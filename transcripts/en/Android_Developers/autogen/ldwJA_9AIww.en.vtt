WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.780
Android 8.1 Oreo contains a targeted set

00:00:02.780 --> 00:00:02.790
Android 8.1 Oreo contains a targeted set
 

00:00:02.790 --> 00:00:04.460
Android 8.1 Oreo contains a targeted set
of enhancements including optimizations

00:00:04.460 --> 00:00:04.470
of enhancements including optimizations
 

00:00:04.470 --> 00:00:07.039
of enhancements including optimizations
for Android Go and a new neural networks

00:00:07.039 --> 00:00:07.049
for Android Go and a new neural networks
 

00:00:07.049 --> 00:00:09.290
for Android Go and a new neural networks
API we've also included a few smaller

00:00:09.290 --> 00:00:09.300
API we've also included a few smaller
 

00:00:09.300 --> 00:00:11.030
API we've also included a few smaller
enhancements in response to user and

00:00:11.030 --> 00:00:11.040
enhancements in response to user and
 

00:00:11.040 --> 00:00:14.120
enhancements in response to user and
developer feedback Android 8.1 includes

00:00:14.120 --> 00:00:14.130
developer feedback Android 8.1 includes
 

00:00:14.130 --> 00:00:15.919
developer feedback Android 8.1 includes
memory optimizations for Android Go

00:00:15.919 --> 00:00:15.929
memory optimizations for Android Go
 

00:00:15.929 --> 00:00:17.720
memory optimizations for Android Go
hardware that has one gigabyte or less

00:00:17.720 --> 00:00:17.730
hardware that has one gigabyte or less
 

00:00:17.730 --> 00:00:20.750
hardware that has one gigabyte or less
of RAM for example notification listener

00:00:20.750 --> 00:00:20.760
of RAM for example notification listener
 

00:00:20.760 --> 00:00:22.429
of RAM for example notification listener
service and condition provider service

00:00:22.429 --> 00:00:22.439
service and condition provider service
 

00:00:22.439 --> 00:00:24.620
service and condition provider service
will not be supported on low Ram devices

00:00:24.620 --> 00:00:24.630
will not be supported on low Ram devices
 

00:00:24.630 --> 00:00:26.599
will not be supported on low Ram devices
in addition we've added new hardware

00:00:26.599 --> 00:00:26.609
in addition we've added new hardware
 

00:00:26.609 --> 00:00:28.040
in addition we've added new hardware
feature constants so you can now target

00:00:28.040 --> 00:00:28.050
feature constants so you can now target
 

00:00:28.050 --> 00:00:30.169
feature constants so you can now target
the distribution of your apps and apk

00:00:30.169 --> 00:00:30.179
the distribution of your apps and apk
 

00:00:30.179 --> 00:00:32.959
the distribution of your apps and apk
splits to normal or low ram devices if

00:00:32.959 --> 00:00:32.969
splits to normal or low ram devices if
 

00:00:32.969 --> 00:00:34.959
splits to normal or low ram devices if
they're running Android 8.1 and later

00:00:34.959 --> 00:00:34.969
they're running Android 8.1 and later
 

00:00:34.969 --> 00:00:37.310
they're running Android 8.1 and later
we've been working hard to bring on

00:00:37.310 --> 00:00:37.320
we've been working hard to bring on
 

00:00:37.320 --> 00:00:39.139
we've been working hard to bring on
device machine intelligence to mobile

00:00:39.139 --> 00:00:39.149
device machine intelligence to mobile
 

00:00:39.149 --> 00:00:40.940
device machine intelligence to mobile
with features such as Now Playing and

00:00:40.940 --> 00:00:40.950
with features such as Now Playing and
 

00:00:40.950 --> 00:00:43.250
with features such as Now Playing and
google lense the new neural networks API

00:00:43.250 --> 00:00:43.260
google lense the new neural networks API
 

00:00:43.260 --> 00:00:45.410
google lense the new neural networks API
lays the foundation for our developer

00:00:45.410 --> 00:00:45.420
lays the foundation for our developer
 

00:00:45.420 --> 00:00:47.420
lays the foundation for our developer
community to build accelerated on device

00:00:47.420 --> 00:00:47.430
community to build accelerated on device
 

00:00:47.430 --> 00:00:48.680
community to build accelerated on device
applications of machine learning

00:00:48.680 --> 00:00:48.690
applications of machine learning
 

00:00:48.690 --> 00:00:50.510
applications of machine learning
including image recognition and

00:00:50.510 --> 00:00:50.520
including image recognition and
 

00:00:50.520 --> 00:00:52.580
including image recognition and
prediction the neural networks API

00:00:52.580 --> 00:00:52.590
prediction the neural networks API
 

00:00:52.590 --> 00:00:54.170
prediction the neural networks API
runtime is designed to efficiently

00:00:54.170 --> 00:00:54.180
runtime is designed to efficiently
 

00:00:54.180 --> 00:00:56.060
runtime is designed to efficiently
distribute the computation workload

00:00:56.060 --> 00:00:56.070
distribute the computation workload
 

00:00:56.070 --> 00:00:57.860
distribute the computation workload
across available on device processors

00:00:57.860 --> 00:00:57.870
across available on device processors
 

00:00:57.870 --> 00:00:59.630
across available on device processors
including dedicated neural network

00:00:59.630 --> 00:00:59.640
including dedicated neural network
 

00:00:59.640 --> 00:01:01.520
including dedicated neural network
hardware graphics processing units and

00:01:01.520 --> 00:01:01.530
hardware graphics processing units and
 

00:01:01.530 --> 00:01:04.520
hardware graphics processing units and
digital signal processors for devices

00:01:04.520 --> 00:01:04.530
digital signal processors for devices
 

00:01:04.530 --> 00:01:06.469
digital signal processors for devices
that lack a specialized vendor driver or

00:01:06.469 --> 00:01:06.479
that lack a specialized vendor driver or
 

00:01:06.479 --> 00:01:08.570
that lack a specialized vendor driver or
hardware the runtime relies on optimized

00:01:08.570 --> 00:01:08.580
hardware the runtime relies on optimized
 

00:01:08.580 --> 00:01:11.480
hardware the runtime relies on optimized
code to execute requests on the CPU it's

00:01:11.480 --> 00:01:11.490
code to execute requests on the CPU it's
 

00:01:11.490 --> 00:01:13.520
code to execute requests on the CPU it's
unlikely that most apps will use the

00:01:13.520 --> 00:01:13.530
unlikely that most apps will use the
 

00:01:13.530 --> 00:01:15.440
unlikely that most apps will use the
neural networks API directly they'll

00:01:15.440 --> 00:01:15.450
neural networks API directly they'll
 

00:01:15.450 --> 00:01:17.270
neural networks API directly they'll
instead rely on a higher-level machine

00:01:17.270 --> 00:01:17.280
instead rely on a higher-level machine
 

00:01:17.280 --> 00:01:18.800
instead rely on a higher-level machine
learning framework such as tensorflow

00:01:18.800 --> 00:01:18.810
learning framework such as tensorflow
 

00:01:18.810 --> 00:01:21.859
learning framework such as tensorflow
lite or cafe to tensorflow lite is

00:01:21.859 --> 00:01:21.869
lite or cafe to tensorflow lite is
 

00:01:21.869 --> 00:01:23.359
lite or cafe to tensorflow lite is
Google's cross-platform open-source

00:01:23.359 --> 00:01:23.369
Google's cross-platform open-source
 

00:01:23.369 --> 00:01:25.580
Google's cross-platform open-source
framework designed to execute deep

00:01:25.580 --> 00:01:25.590
framework designed to execute deep
 

00:01:25.590 --> 00:01:26.899
framework designed to execute deep
trained neural networks in mobile

00:01:26.899 --> 00:01:26.909
trained neural networks in mobile
 

00:01:26.909 --> 00:01:28.609
trained neural networks in mobile
environments and it's scheduled to be

00:01:28.609 --> 00:01:28.619
environments and it's scheduled to be
 

00:01:28.619 --> 00:01:30.890
environments and it's scheduled to be
released soon so make sure to stay tuned

00:01:30.890 --> 00:01:30.900
released soon so make sure to stay tuned
 

00:01:30.900 --> 00:01:33.170
released soon so make sure to stay tuned
we also are investing bringing the

00:01:33.170 --> 00:01:33.180
we also are investing bringing the
 

00:01:33.180 --> 00:01:34.429
we also are investing bringing the
benefits of deep learning to more

00:01:34.429 --> 00:01:34.439
benefits of deep learning to more
 

00:01:34.439 --> 00:01:36.050
benefits of deep learning to more
developers so we intend to release a

00:01:36.050 --> 00:01:36.060
developers so we intend to release a
 

00:01:36.060 --> 00:01:38.030
developers so we intend to release a
library to make common ml use cases

00:01:38.030 --> 00:01:38.040
library to make common ml use cases
 

00:01:38.040 --> 00:01:40.870
library to make common ml use cases
easily available on mobile devices

00:01:40.870 --> 00:01:40.880
easily available on mobile devices
 

00:01:40.880 --> 00:01:43.969
easily available on mobile devices
Android 8.1 Oreo as a new shared memory

00:01:43.969 --> 00:01:43.979
Android 8.1 Oreo as a new shared memory
 

00:01:43.979 --> 00:01:46.760
Android 8.1 Oreo as a new shared memory
API this new API enables the creation of

00:01:46.760 --> 00:01:46.770
API this new API enables the creation of
 

00:01:46.770 --> 00:01:49.310
API this new API enables the creation of
an anonymous shared memory instance you

00:01:49.310 --> 00:01:49.320
an anonymous shared memory instance you
 

00:01:49.320 --> 00:01:51.170
an anonymous shared memory instance you
can nmap the shared memory object into a

00:01:51.170 --> 00:01:51.180
can nmap the shared memory object into a
 

00:01:51.180 --> 00:01:52.819
can nmap the shared memory object into a
local byte buffer and breed and write it

00:01:52.819 --> 00:01:52.829
local byte buffer and breed and write it
 

00:01:52.829 --> 00:01:54.679
local byte buffer and breed and write it
like any other byte buffer the memory

00:01:54.679 --> 00:01:54.689
like any other byte buffer the memory
 

00:01:54.689 --> 00:01:55.910
like any other byte buffer the memory
protection can be controlled on the

00:01:55.910 --> 00:01:55.920
protection can be controlled on the
 

00:01:55.920 --> 00:01:58.010
protection can be controlled on the
shared object since the shared memory

00:01:58.010 --> 00:01:58.020
shared object since the shared memory
 

00:01:58.020 --> 00:01:59.149
shared object since the shared memory
object is parsable

00:01:59.149 --> 00:01:59.159
object is parsable
 

00:01:59.159 --> 00:02:00.440
object is parsable
you can easily pass it to another

00:02:00.440 --> 00:02:00.450
you can easily pass it to another
 

00:02:00.450 --> 00:02:03.139
you can easily pass it to another
process through a IDL the remote process

00:02:03.139 --> 00:02:03.149
process through a IDL the remote process
 

00:02:03.149 --> 00:02:04.670
process through a IDL the remote process
can then map any part of the memory it

00:02:04.670 --> 00:02:04.680
can then map any part of the memory it
 

00:02:04.680 --> 00:02:06.560
can then map any part of the memory it
wants and once access is no longer

00:02:06.560 --> 00:02:06.570
wants and once access is no longer
 

00:02:06.570 --> 00:02:06.950
wants and once access is no longer
needed

00:02:06.950 --> 00:02:06.960
needed
 

00:02:06.960 --> 00:02:09.199
needed
just unmapped the buffer the shared

00:02:09.199 --> 00:02:09.209
just unmapped the buffer the shared
 

00:02:09.209 --> 00:02:10.790
just unmapped the buffer the shared
memory API also supports

00:02:10.790 --> 00:02:10.800
memory API also supports
 

00:02:10.800 --> 00:02:12.740
memory API also supports
interoperability with the NDK using a

00:02:12.740 --> 00:02:12.750
interoperability with the NDK using a
 

00:02:12.750 --> 00:02:13.699
interoperability with the NDK using a
shared memory

00:02:13.699 --> 00:02:13.709
shared memory
 

00:02:13.709 --> 00:02:15.470
shared memory
we can end that the F D and then read

00:02:15.470 --> 00:02:15.480
we can end that the F D and then read
 

00:02:15.480 --> 00:02:17.240
we can end that the F D and then read
and write it's a great way to share data

00:02:17.240 --> 00:02:17.250
and write it's a great way to share data
 

00:02:17.250 --> 00:02:19.039
and write it's a great way to share data
between multiple processes within a

00:02:19.039 --> 00:02:19.049
between multiple processes within a
 

00:02:19.049 --> 00:02:21.920
between multiple processes within a
single app or even between apps we've

00:02:21.920 --> 00:02:21.930
single app or even between apps we've
 

00:02:21.930 --> 00:02:23.479
single app or even between apps we've
added some polish and refinement to

00:02:23.479 --> 00:02:23.489
added some polish and refinement to
 

00:02:23.489 --> 00:02:25.459
added some polish and refinement to
autofill most of the changes are on the

00:02:25.459 --> 00:02:25.469
autofill most of the changes are on the
 

00:02:25.469 --> 00:02:27.559
autofill most of the changes are on the
autofill Service side for example the

00:02:27.559 --> 00:02:27.569
autofill Service side for example the
 

00:02:27.569 --> 00:02:29.750
autofill Service side for example the
save UI now supports custom descriptions

00:02:29.750 --> 00:02:29.760
save UI now supports custom descriptions
 

00:02:29.760 --> 00:02:31.580
save UI now supports custom descriptions
so when asking to save credit card data

00:02:31.580 --> 00:02:31.590
so when asking to save credit card data
 

00:02:31.590 --> 00:02:33.110
so when asking to save credit card data
the service can request the display of a

00:02:33.110 --> 00:02:33.120
the service can request the display of a
 

00:02:33.120 --> 00:02:34.759
the service can request the display of a
logo representing the type of credit

00:02:34.759 --> 00:02:34.769
logo representing the type of credit
 

00:02:34.769 --> 00:02:36.349
logo representing the type of credit
card the last four digits of the card

00:02:36.349 --> 00:02:36.359
card the last four digits of the card
 

00:02:36.359 --> 00:02:38.629
card the last four digits of the card
number and an expiration date this helps

00:02:38.629 --> 00:02:38.639
number and an expiration date this helps
 

00:02:38.639 --> 00:02:40.699
number and an expiration date this helps
the user understand exactly what is

00:02:40.699 --> 00:02:40.709
the user understand exactly what is
 

00:02:40.709 --> 00:02:43.490
the user understand exactly what is
being saved one minor change for apps

00:02:43.490 --> 00:02:43.500
being saved one minor change for apps
 

00:02:43.500 --> 00:02:44.809
being saved one minor change for apps
that want to support autofill is that

00:02:44.809 --> 00:02:44.819
that want to support autofill is that
 

00:02:44.819 --> 00:02:46.309
that want to support autofill is that
base adapter and it's derived classes

00:02:46.309 --> 00:02:46.319
base adapter and it's derived classes
 

00:02:46.319 --> 00:02:47.899
base adapter and it's derived classes
such as array adapter now supports

00:02:47.899 --> 00:02:47.909
such as array adapter now supports
 

00:02:47.909 --> 00:02:50.270
such as array adapter now supports
setting autofill options this makes it

00:02:50.270 --> 00:02:50.280
setting autofill options this makes it
 

00:02:50.280 --> 00:02:51.770
setting autofill options this makes it
easier to provide autofill data for

00:02:51.770 --> 00:02:51.780
easier to provide autofill data for
 

00:02:51.780 --> 00:02:53.809
easier to provide autofill data for
simple custom adapters such as one used

00:02:53.809 --> 00:02:53.819
simple custom adapters such as one used
 

00:02:53.819 --> 00:02:55.550
simple custom adapters such as one used
to set credit card expiration dates in

00:02:55.550 --> 00:02:55.560
to set credit card expiration dates in
 

00:02:55.560 --> 00:02:58.129
to set credit card expiration dates in
Android 0 you would need to override to

00:02:58.129 --> 00:02:58.139
Android 0 you would need to override to
 

00:02:58.139 --> 00:03:00.259
Android 0 you would need to override to
get autofill method options in the

00:03:00.259 --> 00:03:00.269
get autofill method options in the
 

00:03:00.269 --> 00:03:02.509
get autofill method options in the
adapter but now in 8.1 you can just call

00:03:02.509 --> 00:03:02.519
adapter but now in 8.1 you can just call
 

00:03:02.519 --> 00:03:05.149
adapter but now in 8.1 you can just call
set autofill options and in another

00:03:05.149 --> 00:03:05.159
set autofill options and in another
 

00:03:05.159 --> 00:03:07.610
set autofill options and in another
helpful touch the API 27 version of the

00:03:07.610 --> 00:03:07.620
helpful touch the API 27 version of the
 

00:03:07.620 --> 00:03:09.110
helpful touch the API 27 version of the
support library view compat now wraps

00:03:09.110 --> 00:03:09.120
support library view compat now wraps
 

00:03:09.120 --> 00:03:10.759
support library view compat now wraps
the autofill methods to make it easier

00:03:10.759 --> 00:03:10.769
the autofill methods to make it easier
 

00:03:10.769 --> 00:03:12.170
the autofill methods to make it easier
to give hints to the audit fill service

00:03:12.170 --> 00:03:12.180
to give hints to the audit fill service
 

00:03:12.180 --> 00:03:15.110
to give hints to the audit fill service
which you really should do one more

00:03:15.110 --> 00:03:15.120
which you really should do one more
 

00:03:15.120 --> 00:03:17.119
which you really should do one more
autofill note consider setting up an

00:03:17.119 --> 00:03:17.129
autofill note consider setting up an
 

00:03:17.129 --> 00:03:18.920
autofill note consider setting up an
association between your app and your

00:03:18.920 --> 00:03:18.930
association between your app and your
 

00:03:18.930 --> 00:03:20.930
association between your app and your
website this allows the autofill service

00:03:20.930 --> 00:03:20.940
website this allows the autofill service
 

00:03:20.940 --> 00:03:22.339
website this allows the autofill service
to share passwords between the two

00:03:22.339 --> 00:03:22.349
to share passwords between the two
 

00:03:22.349 --> 00:03:24.379
to share passwords between the two
whether you're on android 8.0 or android

00:03:24.379 --> 00:03:24.389
whether you're on android 8.0 or android
 

00:03:24.389 --> 00:03:28.069
whether you're on android 8.0 or android
8.1 Android 801 includes new api is in

00:03:28.069 --> 00:03:28.079
8.1 Android 801 includes new api is in
 

00:03:28.079 --> 00:03:29.839
8.1 Android 801 includes new api is in
the wallpaper manager to get the most

00:03:29.839 --> 00:03:29.849
the wallpaper manager to get the most
 

00:03:29.849 --> 00:03:31.699
the wallpaper manager to get the most
representative colors from the current

00:03:31.699 --> 00:03:31.709
representative colors from the current
 

00:03:31.709 --> 00:03:33.860
representative colors from the current
wallpaper and the system UI and pixel

00:03:33.860 --> 00:03:33.870
wallpaper and the system UI and pixel
 

00:03:33.870 --> 00:03:35.390
wallpaper and the system UI and pixel
launcher will adjust the colors they use

00:03:35.390 --> 00:03:35.400
launcher will adjust the colors they use
 

00:03:35.400 --> 00:03:37.759
launcher will adjust the colors they use
based upon this api if you've made a

00:03:37.759 --> 00:03:37.769
based upon this api if you've made a
 

00:03:37.769 --> 00:03:39.830
based upon this api if you've made a
live wallpaper you notify the wallpaper

00:03:39.830 --> 00:03:39.840
live wallpaper you notify the wallpaper
 

00:03:39.840 --> 00:03:41.420
live wallpaper you notify the wallpaper
service whenever your colors change

00:03:41.420 --> 00:03:41.430
service whenever your colors change
 

00:03:41.430 --> 00:03:43.069
service whenever your colors change
significantly returning them in the on

00:03:43.069 --> 00:03:43.079
significantly returning them in the on
 

00:03:43.079 --> 00:03:45.259
significantly returning them in the on
compute colors method we recommend using

00:03:45.259 --> 00:03:45.269
compute colors method we recommend using
 

00:03:45.269 --> 00:03:46.759
compute colors method we recommend using
the utility functions within the

00:03:46.759 --> 00:03:46.769
the utility functions within the
 

00:03:46.769 --> 00:03:48.860
the utility functions within the
wallpaper colors class to automatically

00:03:48.860 --> 00:03:48.870
wallpaper colors class to automatically
 

00:03:48.870 --> 00:03:50.240
wallpaper colors class to automatically
select these colors from a

00:03:50.240 --> 00:03:50.250
select these colors from a
 

00:03:50.250 --> 00:03:53.119
select these colors from a
representative bitmap or drawable some

00:03:53.119 --> 00:03:53.129
representative bitmap or drawable some
 

00:03:53.129 --> 00:03:55.009
representative bitmap or drawable some
other changes you might be interested in

00:03:55.009 --> 00:03:55.019
other changes you might be interested in
 

00:03:55.019 --> 00:03:56.899
other changes you might be interested in
edit text now returns an editable rather

00:03:56.899 --> 00:03:56.909
edit text now returns an editable rather
 

00:03:56.909 --> 00:03:58.369
edit text now returns an editable rather
than a care sequence your app can

00:03:58.369 --> 00:03:58.379
than a care sequence your app can
 

00:03:58.379 --> 00:03:59.599
than a care sequence your app can
determine how it responds to a known

00:03:59.599 --> 00:03:59.609
determine how it responds to a known
 

00:03:59.609 --> 00:04:01.039
determine how it responds to a known
threat from the webview implementation

00:04:01.039 --> 00:04:01.049
threat from the webview implementation
 

00:04:01.049 --> 00:04:03.199
threat from the webview implementation
of the Safe Browsing API the media

00:04:03.199 --> 00:04:03.209
of the Safe Browsing API the media
 

00:04:03.209 --> 00:04:04.759
of the Safe Browsing API the media
metadata Retriever class has a new

00:04:04.759 --> 00:04:04.769
metadata Retriever class has a new
 

00:04:04.769 --> 00:04:06.770
metadata Retriever class has a new
method get scaled frame at time that

00:04:06.770 --> 00:04:06.780
method get scaled frame at time that
 

00:04:06.780 --> 00:04:08.539
method get scaled frame at time that
finds a frame near a given time position

00:04:08.539 --> 00:04:08.549
finds a frame near a given time position
 

00:04:08.549 --> 00:04:09.830
finds a frame near a given time position
and returns a bitmap with the same

00:04:09.830 --> 00:04:09.840
and returns a bitmap with the same
 

00:04:09.840 --> 00:04:11.719
and returns a bitmap with the same
aspect ratio as a source frame but at

00:04:11.719 --> 00:04:11.729
aspect ratio as a source frame but at
 

00:04:11.729 --> 00:04:14.330
aspect ratio as a source frame but at
the requested size if you have any pixel

00:04:14.330 --> 00:04:14.340
the requested size if you have any pixel
 

00:04:14.340 --> 00:04:16.219
the requested size if you have any pixel
or pixel two device we support

00:04:16.219 --> 00:04:16.229
or pixel two device we support
 

00:04:16.229 --> 00:04:17.990
or pixel two device we support
requesting a audio sharing mode

00:04:17.990 --> 00:04:18.000
requesting a audio sharing mode
 

00:04:18.000 --> 00:04:20.539
requesting a audio sharing mode
exclusive in some cases which provides

00:04:20.539 --> 00:04:20.549
exclusive in some cases which provides
 

00:04:20.549 --> 00:04:23.209
exclusive in some cases which provides
reduced audio latency better yet we've

00:04:23.209 --> 00:04:23.219
reduced audio latency better yet we've
 

00:04:23.219 --> 00:04:25.279
reduced audio latency better yet we've
released a preview of the oboe library

00:04:25.279 --> 00:04:25.289
released a preview of the oboe library
 

00:04:25.289 --> 00:04:27.550
released a preview of the oboe library
which allows applications to target a

00:04:27.550 --> 00:04:27.560
which allows applications to target a
 

00:04:27.560 --> 00:04:30.340
which allows applications to target a
API 26 plus devices and opensl on

00:04:30.340 --> 00:04:30.350
API 26 plus devices and opensl on
 

00:04:30.350 --> 00:04:32.260
API 26 plus devices and opensl on
previous versions of Android to get the

00:04:32.260 --> 00:04:32.270
previous versions of Android to get the
 

00:04:32.270 --> 00:04:33.940
previous versions of Android to get the
best latency with a simplified API

00:04:33.940 --> 00:04:33.950
best latency with a simplified API
 

00:04:33.950 --> 00:04:36.220
best latency with a simplified API
surface in a compatible way if you have

00:04:36.220 --> 00:04:36.230
surface in a compatible way if you have
 

00:04:36.230 --> 00:04:37.990
surface in a compatible way if you have
a pixel to you'll notice a developer

00:04:37.990 --> 00:04:38.000
a pixel to you'll notice a developer
 

00:04:38.000 --> 00:04:40.000
a pixel to you'll notice a developer
setting in Android 8.1 for camera Hal

00:04:40.000 --> 00:04:40.010
setting in Android 8.1 for camera Hal
 

00:04:40.010 --> 00:04:42.700
setting in Android 8.1 for camera Hal
hdr+ this enables you to test an early

00:04:42.700 --> 00:04:42.710
hdr+ this enables you to test an early
 

00:04:42.710 --> 00:04:45.159
hdr+ this enables you to test an early
version of HDR plus with pixel visual

00:04:45.159 --> 00:04:45.169
version of HDR plus with pixel visual
 

00:04:45.169 --> 00:04:47.230
version of HDR plus with pixel visual
core Google's first costume design

00:04:47.230 --> 00:04:47.240
core Google's first costume design
 

00:04:47.240 --> 00:04:49.690
core Google's first costume design
coprocessor for consumer products note

00:04:49.690 --> 00:04:49.700
coprocessor for consumer products note
 

00:04:49.700 --> 00:04:51.909
coprocessor for consumer products note
that hdr+ will only be enabled for

00:04:51.909 --> 00:04:51.919
that hdr+ will only be enabled for
 

00:04:51.919 --> 00:04:53.860
that hdr+ will only be enabled for
specific camera and camera to API

00:04:53.860 --> 00:04:53.870
specific camera and camera to API
 

00:04:53.870 --> 00:04:56.470
specific camera and camera to API
options if you have an eligible pixel or

00:04:56.470 --> 00:04:56.480
options if you have an eligible pixel or
 

00:04:56.480 --> 00:04:58.060
options if you have an eligible pixel or
Nexus device you can enroll it in

00:04:58.060 --> 00:04:58.070
Nexus device you can enroll it in
 

00:04:58.070 --> 00:04:59.620
Nexus device you can enroll it in
Android beta to get the latest update

00:04:59.620 --> 00:04:59.630
Android beta to get the latest update
 

00:04:59.630 --> 00:05:01.930
Android beta to get the latest update
but we also have Android 8.1 emulator

00:05:01.930 --> 00:05:01.940
but we also have Android 8.1 emulator
 

00:05:01.940 --> 00:05:03.909
but we also have Android 8.1 emulator
images this gives you the opportunity to

00:05:03.909 --> 00:05:03.919
images this gives you the opportunity to
 

00:05:03.919 --> 00:05:05.440
images this gives you the opportunity to
fix any issues that update your app

00:05:05.440 --> 00:05:05.450
fix any issues that update your app
 

00:05:05.450 --> 00:05:07.480
fix any issues that update your app
before consumers get their hands on 8.1

00:05:07.480 --> 00:05:07.490
before consumers get their hands on 8.1
 

00:05:07.490 --> 00:05:09.490
before consumers get their hands on 8.1
you can find out more about everything

00:05:09.490 --> 00:05:09.500
you can find out more about everything
 

00:05:09.500 --> 00:05:11.110
you can find out more about everything
we covered including the Developer

00:05:11.110 --> 00:05:11.120
we covered including the Developer
 

00:05:11.120 --> 00:05:14.320
we covered including the Developer
Preview program here happy coding

00:05:14.320 --> 00:05:14.330
Preview program here happy coding
 

00:05:14.330 --> 00:05:25.560
Preview program here happy coding
[Music]

