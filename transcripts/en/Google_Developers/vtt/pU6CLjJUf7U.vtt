WEBVTT
Kind: captions
Language: en

00:00:05.130 --> 00:00:07.140
JAVIER RAMIREZ: Hi, my
name is Javier Ramirez.

00:00:07.140 --> 00:00:09.510
I'm one of the
founders of Teowaki.

00:00:09.510 --> 00:00:13.770
And Teowaki is a collaboration
tool for software developers

00:00:13.770 --> 00:00:18.020
where you can serve interesting
links, best practices,

00:00:18.020 --> 00:00:23.110
documentation, mistakes,
gossip with other developers.

00:00:23.110 --> 00:00:25.580
AND I'm going to tell you
today how we are using

00:00:25.580 --> 00:00:30.970
and how you can use Google
BigQuery to run analytics

00:00:30.970 --> 00:00:34.880
over anything which is
interesting for your business.

00:00:34.880 --> 00:00:37.260
In our case,
analytics is allowing

00:00:37.260 --> 00:00:43.070
us to have insights on how users
are using the tool in a very

00:00:43.070 --> 00:00:46.790
economical way without
having to worry about keeping

00:00:46.790 --> 00:00:51.210
our own servers upgraded,
maintaining them,

00:00:51.210 --> 00:00:55.440
or how much data we are
storing, or if it's going

00:00:55.440 --> 00:00:58.110
to be cost efficient
when we grow up.

00:00:58.110 --> 00:01:02.040
So once you're in the console,
what you are going to see

00:01:02.040 --> 00:01:06.420
is a quite familiar
interface if you know SQL.

00:01:06.420 --> 00:01:10.530
Since we are already developers,
for us, SQL was really easy.

00:01:10.530 --> 00:01:14.470
For example, here, I'm
getting-- from the date,

00:01:14.470 --> 00:01:17.240
I'm getting first the
year, and then the month.

00:01:17.240 --> 00:01:20.770
And then they are going to
be counting how many users

00:01:20.770 --> 00:01:23.010
have been deleted from the tool.

00:01:23.010 --> 00:01:24.900
So SQL is quite
convenient for us.

00:01:24.900 --> 00:01:26.310
This query is quite basic.

00:01:26.310 --> 00:01:30.450
But I've heard-- for
example, in Khan Academy--

00:01:30.450 --> 00:01:34.510
that the businesspeople
are learning

00:01:34.510 --> 00:01:36.960
SQL for managing
their own reports.

00:01:36.960 --> 00:01:39.425
So they don't have to depend
on the development team, which

00:01:39.425 --> 00:01:43.010
is quite interesting,
especially because if you have

00:01:43.010 --> 00:01:45.170
to run many reports,
you don't want

00:01:45.170 --> 00:01:48.360
to have dependencies
from anyone.

00:01:48.360 --> 00:01:50.060
So yeah, when you
run the query, you

00:01:50.060 --> 00:01:52.300
can see the results
are straightforward.

00:01:52.300 --> 00:01:56.080
And here is one of the metrics
that are important for us,

00:01:56.080 --> 00:01:59.790
just how many users are
abandoning the tool.

00:01:59.790 --> 00:02:02.450
But we can do something
more interesting.

00:02:02.450 --> 00:02:06.950
For example, I told you
before, in Teowaki, we

00:02:06.950 --> 00:02:10.460
want to know how users are
interacting with each other.

00:02:10.460 --> 00:02:12.470
So in this particular
query, what

00:02:12.470 --> 00:02:17.570
we are going to see is
per every different month

00:02:17.570 --> 00:02:21.610
and every different team, how
many items they are posting,

00:02:21.610 --> 00:02:25.019
how many items they are sharing
between the team members, which

00:02:25.019 --> 00:02:26.810
is something that would
be difficult to get

00:02:26.810 --> 00:02:28.050
with other tools.

00:02:28.050 --> 00:02:30.140
But here, it's just a query.

00:02:30.140 --> 00:02:34.020
And as you can see, we have
already some teams are starting

00:02:34.020 --> 00:02:37.580
in November, during the winter
period, that were posting,

00:02:37.580 --> 00:02:40.162
I don't know, over 100 items.

00:02:40.162 --> 00:02:41.870
And that's quite
interesting, because you

00:02:41.870 --> 00:02:45.590
can see which teams are
more valuable for you,

00:02:45.590 --> 00:02:47.970
which teams are less valuable.

00:02:47.970 --> 00:02:49.720
Then, of course, you
can see as new people

00:02:49.720 --> 00:02:52.310
are entering into the platform.

00:02:52.310 --> 00:02:54.580
They start with no
contents at all.

00:02:54.580 --> 00:02:58.250
But in the next month,
the number is increasing.

00:02:58.250 --> 00:03:00.490
So to us, it's helping
us to get some insights

00:03:00.490 --> 00:03:04.375
of how people are using Teowaki.

00:03:04.375 --> 00:03:08.160
But what other things
you can do, apart

00:03:08.160 --> 00:03:12.410
from getting aggregates from
how teams are using the tool?

00:03:12.410 --> 00:03:17.000
The other input metric for us
is which users individually

00:03:17.000 --> 00:03:18.290
are the most valuable?

00:03:18.290 --> 00:03:19.980
Who are using the tool the most?

00:03:19.980 --> 00:03:24.000
And with this simple query, I'm
getting just the internal ID

00:03:24.000 --> 00:03:27.100
of the user which is using
the system the most, which

00:03:27.100 --> 00:03:29.060
accidentally in this case is me.

00:03:29.060 --> 00:03:31.240
Because I'm one of
the founders, and I've

00:03:31.240 --> 00:03:34.360
been using the tool
before it was in public.

00:03:34.360 --> 00:03:36.800
But yeah, this just
gives me a number.

00:03:36.800 --> 00:03:38.170
It's not really useful.

00:03:38.170 --> 00:03:40.645
But it would be much
better if I could

00:03:40.645 --> 00:03:44.160
have a way of seeing the
individual navigation

00:03:44.160 --> 00:03:47.390
of the user, how
they are actually

00:03:47.390 --> 00:03:51.920
using the tool, our application.

00:03:51.920 --> 00:03:54.910
So in this other query,
what I am getting is,

00:03:54.910 --> 00:03:59.680
give me the date and the
URL from our database

00:03:59.680 --> 00:04:03.720
where the user-- it's the
[INAUDIBLE], which in this case

00:04:03.720 --> 00:04:04.790
is me.

00:04:04.790 --> 00:04:08.320
And the trouble here
is on the results,

00:04:08.320 --> 00:04:11.280
I can see the URL list
is all the time the same.

00:04:11.280 --> 00:04:13.070
And that's because
in our system,

00:04:13.070 --> 00:04:18.690
we have a notification part,
which every few seconds is

00:04:18.690 --> 00:04:22.540
going to request if we have
new content from the server.

00:04:22.540 --> 00:04:27.040
So if I want to get information,
that's really not useful.

00:04:27.040 --> 00:04:30.000
And I can see in this
new version of the query,

00:04:30.000 --> 00:04:32.730
I'm telling, OK, give
me all the results,

00:04:32.730 --> 00:04:34.840
except the one about
the notifications count.

00:04:34.840 --> 00:04:36.590
And here, you can see
all the information.

00:04:36.590 --> 00:04:40.980
I can see that the part I've
been using the most lately,

00:04:40.980 --> 00:04:43.870
it's the [INAUDIBLE]
interface, categories

00:04:43.870 --> 00:04:47.874
for one particular team, some
different best practices.

00:04:47.874 --> 00:04:49.290
And this is really
cool, because I

00:04:49.290 --> 00:04:53.240
can see if users are using the
tool in one way or another.

00:04:53.240 --> 00:04:56.310
For example, we are seeing
that some parts of the tool

00:04:56.310 --> 00:05:00.530
are not being used
that much, [INAUDIBLE]

00:05:00.530 --> 00:05:04.380
either redesign them or
even stop working on them.

00:05:04.380 --> 00:05:07.130
Because if we are working on
different parts of the tool,

00:05:07.130 --> 00:05:11.410
but the users are not
actually using those things,

00:05:11.410 --> 00:05:15.130
we are wasting the
time and the money.

00:05:15.130 --> 00:05:17.010
This is just an example
of what you can do.

00:05:17.010 --> 00:05:19.960
Depending on your business,
you will have different metrics

00:05:19.960 --> 00:05:21.940
that are more important for you.

00:05:21.940 --> 00:05:24.080
But once you have
the queries assigned,

00:05:24.080 --> 00:05:26.740
you don't want to
come here all the time

00:05:26.740 --> 00:05:30.040
and be writing the queries,
executing the queries.

00:05:30.040 --> 00:05:33.865
Because it's wasting time, and
it's not the best way to do it.

00:05:33.865 --> 00:05:36.040
So the next thing
I want to show you

00:05:36.040 --> 00:05:39.750
is how you can automate
this interface with BigQuery

00:05:39.750 --> 00:05:45.820
so you can have your report
sent to you periodically.

00:05:45.820 --> 00:05:49.930
In order to work with BigQuery,
you can use different things.

00:05:49.930 --> 00:05:52.690
If you're a developer, probably
you want to use the API.

00:05:52.690 --> 00:05:56.270
But you can use something
called Google Apps Script, which

00:05:56.270 --> 00:05:59.290
is a smaller version
of JavaScript.

00:05:59.290 --> 00:06:01.130
If you know JavaScript,
then you already

00:06:01.130 --> 00:06:03.390
know how to use Apps Script.

00:06:03.390 --> 00:06:07.640
And you can interact with
virtually any API from Google,

00:06:07.640 --> 00:06:11.190
like, for example, Google
Analytics, or Google BigQuery

00:06:11.190 --> 00:06:14.730
in this case,
Gmail, Google Docs.

00:06:14.730 --> 00:06:16.600
Let's see what I'm doing here.

00:06:16.600 --> 00:06:20.170
I am creating a new
folder on my Google Docs.

00:06:20.170 --> 00:06:22.370
And in this new
folder, I'm going

00:06:22.370 --> 00:06:27.690
to create a new spreadsheet
with the date of today.

00:06:27.690 --> 00:06:29.990
And I'm going to call
a function to populate

00:06:29.990 --> 00:06:33.280
the data from my new users.

00:06:33.280 --> 00:06:37.470
Then I'm going to create a
new sheet in the spreadsheet.

00:06:37.470 --> 00:06:40.340
I'm going to add
the deleted users,

00:06:40.340 --> 00:06:43.340
insert a new sheet
for the unique users,

00:06:43.340 --> 00:06:46.165
populate the data, and
just send the email.

00:06:46.165 --> 00:06:49.280
And after I execute
this script, I'm

00:06:49.280 --> 00:06:54.970
getting an email directly
into my Gmail inbox

00:06:54.970 --> 00:06:56.750
with the summary
of how many users

00:06:56.750 --> 00:07:00.370
are new in this month, how
many users have removed

00:07:00.370 --> 00:07:03.940
from the tool, and how many
unique users we are seeing,

00:07:03.940 --> 00:07:06.885
and the link to the spreadsheet
in which you can see directly

00:07:06.885 --> 00:07:12.040
all the results, like the report
here for the three metrics

00:07:12.040 --> 00:07:13.820
that we have taken every day.

00:07:13.820 --> 00:07:16.250
And this is just a
spreadsheet, so you

00:07:16.250 --> 00:07:18.420
can do any graphs you want.

00:07:18.420 --> 00:07:20.850
Anything you want to
do, it's up to you.

00:07:20.850 --> 00:07:24.880
But let's see the
detail of how I'm

00:07:24.880 --> 00:07:27.170
getting this data
into the spreadsheet.

00:07:27.170 --> 00:07:29.805
The easiest part is
just sending the email.

00:07:29.805 --> 00:07:32.430
So if you go to the
Mail tab, you're

00:07:32.430 --> 00:07:36.310
going to see sending an
email is as easy as adding

00:07:36.310 --> 00:07:40.910
the recipient of the email,
copy anyone you want,

00:07:40.910 --> 00:07:45.270
add the subject, as the body
of the email as an HTML,

00:07:45.270 --> 00:07:47.617
and that's about it.

00:07:47.617 --> 00:07:49.200
Before this function,
what I'm getting

00:07:49.200 --> 00:07:52.790
is the reference for the
link to the spreadsheet,

00:07:52.790 --> 00:07:57.450
which is a spreadsheet that
you can see later in the email.

00:07:57.450 --> 00:07:58.545
I can show you here.

00:07:58.545 --> 00:08:01.440
So yeah, we're inserting
the link directly.

00:08:01.440 --> 00:08:03.530
So the most difficult
part in this script

00:08:03.530 --> 00:08:05.840
is creating the data
for the spreadsheet.

00:08:05.840 --> 00:08:08.160
But that's also quite easy.

00:08:08.160 --> 00:08:10.280
The first part is we
have three metrics.

00:08:10.280 --> 00:08:12.180
I have three functions here.

00:08:12.180 --> 00:08:16.780
One is getting the new users per
month, which is a query quite

00:08:16.780 --> 00:08:19.660
similar to the one I showed
you before in the console.

00:08:19.660 --> 00:08:21.990
Then I have another
one, which is

00:08:21.990 --> 00:08:25.140
for the deleted users per month.

00:08:25.140 --> 00:08:27.202
And then I have one
for the unique users.

00:08:27.202 --> 00:08:29.410
And once you have that, the
only thing you have to do

00:08:29.410 --> 00:08:31.650
is just launching
the query, which

00:08:31.650 --> 00:08:34.280
is a matter of calling
BigQuery and getting

00:08:34.280 --> 00:08:36.770
the reference for the job ID.

00:08:36.770 --> 00:08:38.770
And then we are just
going to be waiting

00:08:38.770 --> 00:08:42.570
until BigQuery gets
the results for us.

00:08:42.570 --> 00:08:44.425
So we are are sleeping
every half a second

00:08:44.425 --> 00:08:45.940
until we have the results.

00:08:45.940 --> 00:08:47.930
And when we have the
results, we are just

00:08:47.930 --> 00:08:52.500
going to populate those results
into the different cells

00:08:52.500 --> 00:08:57.340
of the spreadsheet using
a very simple JavaScript.

00:08:57.340 --> 00:08:59.180
So that's about it.

00:08:59.180 --> 00:09:04.090
Once you have that, you
are ready to get your data

00:09:04.090 --> 00:09:05.581
into your spreadsheet.

00:09:05.581 --> 00:09:09.730
And yeah, that's how it
looks, as I showed you before.

00:09:09.730 --> 00:09:12.930
But the last part
we need to do is

00:09:12.930 --> 00:09:14.430
you don't want to
run this manually.

00:09:14.430 --> 00:09:17.550
You want to schedule
so periodically,

00:09:17.550 --> 00:09:19.430
you are getting this
report to your mailbox.

00:09:19.430 --> 00:09:22.750
If you go to the
triggers in Apps Script,

00:09:22.750 --> 00:09:26.430
you can see in our case
we have a date timer.

00:09:26.430 --> 00:09:29.020
So every morning
between 9:00 and 10:00,

00:09:29.020 --> 00:09:31.462
we are getting the
mailing to the inbox.

00:09:31.462 --> 00:09:32.920
But if you have
other requirements,

00:09:32.920 --> 00:09:36.000
you can, for example, set
time driven every hour,

00:09:36.000 --> 00:09:38.760
or even every minute.

00:09:38.760 --> 00:09:43.110
And as an example, this year at
Google I/O, I met one person.

00:09:43.110 --> 00:09:48.600
And he's using Apps Script,
BigQuery, and Google Docs

00:09:48.600 --> 00:09:50.100
to have a live dashboard.

00:09:50.100 --> 00:09:53.780
And every 30 seconds, he's
refreshing the queries.

00:09:53.780 --> 00:09:57.240
And you can see in real time
how the graphics are changing.

00:09:57.240 --> 00:09:59.840
So depending what
you want to do,

00:09:59.840 --> 00:10:02.420
you can have different options.

00:10:02.420 --> 00:10:05.935
But the interesting part for
us, it's really easy to set up.

00:10:05.935 --> 00:10:07.560
OK, so that's how
we're using BigQuery.

00:10:07.560 --> 00:10:11.460
And in case you are wondering
why we didn't use something

00:10:11.460 --> 00:10:14.767
like Google Analytics, it's
because we are getting data

00:10:14.767 --> 00:10:16.850
from different places--
not just from the website,

00:10:16.850 --> 00:10:18.770
but also from our API.

00:10:18.770 --> 00:10:20.940
And in Analytics, getting
data from other sources

00:10:20.940 --> 00:10:22.020
is kind of tricky.

00:10:22.020 --> 00:10:23.990
The other thing is
we are interested

00:10:23.990 --> 00:10:27.000
not only in the
individual users, how

00:10:27.000 --> 00:10:29.730
they are clicking around
links or anything.

00:10:29.730 --> 00:10:33.670
We wanted to keep track of
how they are collaborating

00:10:33.670 --> 00:10:36.800
in different teams, what we
are sharing with each other.

00:10:36.800 --> 00:10:40.160
So we needed a more
powerful solution,

00:10:40.160 --> 00:10:42.730
still keeping a
fraction of the cost.

00:10:42.730 --> 00:10:44.200
And to us, it's working.

00:10:44.200 --> 00:10:47.060
Because we have at the
moment like 10 million rows,

00:10:47.060 --> 00:10:49.410
we are running the daily
reports that you just saw,

00:10:49.410 --> 00:10:52.400
and we are paying
like $1 a month.

