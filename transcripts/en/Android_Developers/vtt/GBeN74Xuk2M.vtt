WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.709
[MUSIC PLAYING]

00:00:01.709 --> 00:00:03.500
COLT MCANLIS: So you
know what screams out,

00:00:03.500 --> 00:00:05.070
"this app is slow?"

00:00:05.070 --> 00:00:06.720
A spinner, especially
one that sits

00:00:06.720 --> 00:00:09.330
around mocking the user
while the activity behind it

00:00:09.330 --> 00:00:11.340
is trying to load some UI data.

00:00:11.340 --> 00:00:12.980
My name is Colt
McAnlis, and this

00:00:12.980 --> 00:00:15.817
is one of the most annoying
UI patterns on Android.

00:00:15.817 --> 00:00:18.150
And believe it or not, it's
actually really easy to fix.

00:00:18.150 --> 00:00:21.370
See, it's 2015 now, and
most modern applications

00:00:21.370 --> 00:00:23.120
drive the entirety
of their UI based

00:00:23.120 --> 00:00:26.280
upon information they grab
from some server resource.

00:00:26.280 --> 00:00:28.010
And that's pretty
straightforward.

00:00:28.010 --> 00:00:30.670
Ping the server for updated
data, and once you get it,

00:00:30.670 --> 00:00:32.930
update your UI to
reflect the changes.

00:00:32.930 --> 00:00:34.260
Pretty simple, right?

00:00:34.260 --> 00:00:36.260
The problem here
is in what the user

00:00:36.260 --> 00:00:39.500
is seeing while they're waiting
for you to fetch the updated

00:00:39.500 --> 00:00:40.000
information.

00:00:40.000 --> 00:00:42.770
And sure, if user's
been using the app,

00:00:42.770 --> 00:00:45.560
then chances are the screen is
already populated with data.

00:00:45.560 --> 00:00:48.170
But when you're responding
to a gnarly context change

00:00:48.170 --> 00:00:50.950
or are loading the app for
the first time in a while,

00:00:50.950 --> 00:00:53.260
there's no data to
pre-populate your view,

00:00:53.260 --> 00:00:55.430
so you have to default
to a spinner on top

00:00:55.430 --> 00:00:56.970
of a blank screen.

00:00:56.970 --> 00:00:59.170
Now, the fix here is
really straightforward.

00:00:59.170 --> 00:01:00.040
Caching.

00:01:00.040 --> 00:01:01.750
See, at some point
in the past, you've

00:01:01.750 --> 00:01:04.440
actually grabbed a valid
block of UI information,

00:01:04.440 --> 00:01:06.380
except on your first
load, of course.

00:01:06.380 --> 00:01:09.620
But anyhow, although
the data is outdated,

00:01:09.620 --> 00:01:12.420
your app can use that
information in these situations

00:01:12.420 --> 00:01:14.750
where the fresh data
hasn't been fetched yet.

00:01:14.750 --> 00:01:16.140
See, it works like this.

00:01:16.140 --> 00:01:18.280
Upon a successful
fetch of some UI data,

00:01:18.280 --> 00:01:20.410
serialize it to a
persistent storage

00:01:20.410 --> 00:01:23.200
alongside some
timestamp so you know

00:01:23.200 --> 00:01:24.630
how old the information is.

00:01:24.630 --> 00:01:27.600
When you find yourself
in a cold boot situation,

00:01:27.600 --> 00:01:30.860
you can use the existing UI
data to start drawing the screen

00:01:30.860 --> 00:01:32.730
while also kicking
off your server

00:01:32.730 --> 00:01:34.850
commands to grab the
freshest information.

00:01:34.850 --> 00:01:36.830
Sure, you'll still
need to flag the user

00:01:36.830 --> 00:01:39.240
and say what new information
is being fetched.

00:01:39.240 --> 00:01:41.850
But at least they're looking
at a legitimate screen instead

00:01:41.850 --> 00:01:45.410
of a blank UI with some
crummy spinner on it, right?

00:01:45.410 --> 00:01:47.750
And that's really
pretty much it.

00:01:47.750 --> 00:01:50.141
Cache your UI data so
that you can use it later

00:01:50.141 --> 00:01:51.640
when you need to
wait for the server

00:01:51.640 --> 00:01:53.770
to give you some updates.

00:01:53.770 --> 00:01:58.176
Pretty straightforward,
actually.

00:01:58.176 --> 00:01:58.676
Uh--

00:02:01.930 --> 00:02:02.430
Oh!

00:02:02.430 --> 00:02:03.888
By the way, it's
worth pointing out

00:02:03.888 --> 00:02:07.050
that there's a right and a wrong
way to store this data to disk.

00:02:07.050 --> 00:02:10.160
Firstly, you should be using
a binary serialization format

00:02:10.160 --> 00:02:12.500
since they produce
smaller file sizes

00:02:12.500 --> 00:02:15.200
and have faster performance
than human-readable formats

00:02:15.200 --> 00:02:17.200
like JSON or XML.

00:02:17.200 --> 00:02:19.020
Secondly, take the
time to figure out

00:02:19.020 --> 00:02:21.880
the best way to cache this
information persistently.

00:02:21.880 --> 00:02:23.990
Just storing it to
the serialized blob

00:02:23.990 --> 00:02:25.760
is one way of doing this.

00:02:25.760 --> 00:02:28.780
However, if your UI is dependent
on a lot of complicated queries

00:02:28.780 --> 00:02:31.870
across that data,
unserializing that to load it

00:02:31.870 --> 00:02:33.480
may not be the
best idea compared

00:02:33.480 --> 00:02:36.080
to storing it in a SQLite
database, which could

00:02:36.080 --> 00:02:37.890
be a much faster solution.

00:02:37.890 --> 00:02:40.270
But really, any of
these options is

00:02:40.270 --> 00:02:43.180
better than showing a blank
screen with some spinner on it.

00:02:43.180 --> 00:02:45.430
Even if you're the
fastest app on the planet,

00:02:45.430 --> 00:02:48.300
this will feel incredibly
slow to your users.

00:02:48.300 --> 00:02:50.481
And user perception is
what it's all about, which

00:02:50.481 --> 00:02:52.980
is why should check out the
rest of the "Android Performance

00:02:52.980 --> 00:02:53.850
Patterns" videos.

00:02:53.850 --> 00:02:56.910
And don't forget to join our
Google+ Community to ask other

00:02:56.910 --> 00:02:58.520
questions as well.

00:02:58.520 --> 00:03:01.290
So keep calm, profile your
code, and always remember,

00:03:01.290 --> 00:03:02.140
perf matters.

00:03:02.140 --> 00:03:05.490
[MUSIC PLAYING]

