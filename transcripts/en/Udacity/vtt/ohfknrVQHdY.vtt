WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
This homework is about improving on the optimal strategy function.

00:00:04.000 --> 00:00:06.000
It may seem like that's impossible.

00:00:06.000 --> 00:00:08.000
How could we be better than optimal?

00:00:08.000 --> 00:00:12.000
And in fact, we can't in the sense that we can't come up with a function

00:00:12.000 --> 00:00:17.000
that produces better results, but we can come up with a function that's faster.

00:00:17.000 --> 00:00:20.000
One thing that bothered me about the optimal function

00:00:20.000 --> 00:00:25.000
is a big part of it was defining this probability of winning from a given state.

00:00:25.000 --> 00:00:31.000
And if we give it some random state like, say, 0, 7, 13, 19,

00:00:31.000 --> 00:00:35.000
it turns out that the value of this state--whatever that is--

00:00:35.000 --> 00:00:39.000
is exactly equal to the state where the other player's turn is to play.

00:00:39.000 --> 00:00:43.000
So here Player 0 goes first, here Player 1 goes first,

00:00:43.000 --> 00:00:48.000
but the probability of winning for an optimal function is symmetric

00:00:48.000 --> 00:00:52.000
because we're assuming that the opponent is also playing optimally.

00:00:52.000 --> 00:00:58.000
So if 0 goes first against an optimal opponent or 1 goes first against the optimal opponent,

00:00:58.000 --> 00:01:02.000
that probability of winning is going to be exactly the same.

00:01:02.000 --> 00:01:08.000
But the way we define Pwin, it computes both of these and stores both of these.

00:01:08.000 --> 00:01:10.000
That's wasteful.

00:01:10.000 --> 00:01:14.000
So in this exercise, we're going to get rid of that waste. How wasteful is it?

00:01:14.000 --> 00:01:18.000
I'm going to do a timed call for the Pwin function, and I'm going to pass it a state

00:01:18.000 --> 00:01:20.000
and pass it this starting state.

00:01:20.000 --> 00:01:23.000
And so the first time you pass it the starting state, it has to do the complete computation

00:01:23.000 --> 00:01:25.000
to get all the way to the end.

00:01:25.000 --> 00:01:29.000
So that's going to be a lot of work, and it turns out that it takes about ä»– of a second

00:01:29.000 --> 00:01:34.000
to do that work when the goal is 40, and the probability that's returned is 54%.

00:01:34.000 --> 00:01:38.000
So there's a slight advantage--over 50%--for going first.

00:01:38.000 --> 00:01:41.000
That tells us about the time. How about the space?

00:01:41.000 --> 00:01:45.000
I can look at the cache that the memo function has computed.

00:01:45.000 --> 00:01:48.000
It stored it at Pwin.cache.

00:01:48.000 --> 00:01:51.000
I can compute that length, and it works out to 86,000 entries.

00:01:51.000 --> 00:01:56.000
So I should be able to cut this time down, and I should be able to cut this size of the cache

00:01:56.000 --> 00:02:01.000
roughly in half by working more efficiently and having a better version of Pwin.

00:02:01.000 --> 00:02:04.000
We're going to do that by defining a function Pwin2

00:02:04.000 --> 00:02:07.000
which is going to have the same signature as Pwin.

00:02:07.000 --> 00:02:10.000
It performs the same function, only it's going to do it a little bit better.

00:02:10.000 --> 00:02:13.000
And the way it works is it breaks out this state, throws away the player to play

00:02:13.000 --> 00:02:16.000
because we know it's symmetric--we don't need that--

00:02:16.000 --> 00:02:22.000
and then it calls Pwin3, which we name because it takes 3 arguments--

00:02:22.000 --> 00:02:25.000
the only ones that matter--my score, your score, and the pending score,

00:02:25.000 --> 00:02:27.000
and that's what I want you to do.

00:02:27.000 --> 00:02:32.000
Go ahead and write the code for Pwin3 that will efficiently do this computation.

00:02:32.000 --> 00:02:36.000
Make sure here that you don't get stuck in an infinite loop.

00:02:36.000 --> 00:02:41.000
Take care when the value of pending is 0. That's a special case to deal with.

00:02:41.000 --> 00:02:45.000
Remember that the probability that I win from a position

00:02:45.000 --> 00:02:48.000
is always 1 minus the probability that my opponent wins.

00:02:48.000 --> 00:02:51.000
You may need that in your definition.

