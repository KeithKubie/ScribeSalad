WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:03.040
Great. So to move one step closer 
to building awesome apps

00:00:03.040 --> 00:00:05.430
like the ones you submitted
to the discussion forum,

00:00:05.430 --> 00:00:08.510
we're going to learn about 
how to build up the Sunshine UI.

00:00:08.510 --> 00:00:11.290
We'll do a quick recap first 
to help remind you of the concepts

00:00:11.290 --> 00:00:13.036
that you learned in lesson one.

00:00:13.486 --> 00:00:16.692
In order to build a UI in Android, 
we use Views.

00:00:16.692 --> 00:00:18.770
Views are rectangles on the screen,

00:00:18.770 --> 00:00:21.740
and we may or may not see 
the borders of that rectangle.

00:00:21.740 --> 00:00:24.760
Essentially, a view handles drawing 
and event handling,

00:00:24.760 --> 00:00:28.790
and all the basic widgets 
in Android extend from this base class.

00:00:28.790 --> 00:00:30.980
The Android design guide 
has visual examples

00:00:30.980 --> 00:00:34.246
of these basic building blocks of apps.

00:00:34.906 --> 00:00:38.652
For example, we have the basic text field,
as well as editable text fields.

00:00:38.652 --> 00:00:42.940
You can do auto complete on them, 
and it comes with text selection as well,

00:00:42.940 --> 00:00:46.530
where it pops up a contextual action bar,
for you to copy and paste.

00:00:46.530 --> 00:00:48.263
There are also buttons,

00:00:48.263 --> 00:00:51.786
and also a suggestion 
to use borderless buttons.

00:00:51.786 --> 00:00:52.767
It also has spinners,

00:00:52.767 --> 00:00:55.268
where you can select 
from a drop down menu.

00:00:55.268 --> 00:00:58.330
There's also checkboxes, 
radio buttons, on/off switches,

00:00:58.330 --> 00:01:00.490
and they also have some progress bars.

00:01:00.490 --> 00:01:04.709
There's a ton more basic widgets here,
and also in the Java docs.

00:01:04.709 --> 00:01:07.806
Check those out, and even ones
that aren't listed here.

00:01:07.806 --> 00:01:10.462
You'll come across them as you need them.

00:01:10.462 --> 00:01:12.855
Now, if you want to display 
multiple views together,

00:01:12.855 --> 00:01:14.366
you'll need a view group.

00:01:14.366 --> 00:01:16.770
A view group is a container 
for children views.

00:01:16.770 --> 00:01:20.480
Here are a couple of common view groups,
which Dan introduced earlier.

00:01:20.530 --> 00:01:22.030
First, we have a frame layout.

00:01:22.030 --> 00:01:24.061
A child that gets added 
will be default positioned

00:01:24.061 --> 00:01:25.930
in the top left corner of the view group.

00:01:26.125 --> 00:01:29.145
If you add a second view here, 
it will overlap the first one.

00:01:29.236 --> 00:01:32.129
So typically, we only have one child
per frame layout.

00:01:32.180 --> 00:01:34.738
Next we have a linear layout,
it's composed of children

00:01:34.738 --> 00:01:37.589
either in a horizontal row 
or in a vertical column.

00:01:37.589 --> 00:01:40.070
We can also specify layout weight.

00:01:40.150 --> 00:01:42.060
Layout weight allows us to distribute

00:01:42.060 --> 00:01:44.701
the width or height of a parent
across the children.

00:01:44.777 --> 00:01:47.290
For example, this has weight one, 
and this has weight one

00:01:47.290 --> 00:01:51.230
then the width of the parent
can be split across them evenly.

00:01:51.230 --> 00:01:54.453
Then we have a relative layout 
where we can specify that a view

00:01:54.453 --> 00:01:58.716
should be aligned to the parent's left,
top, right or bottom edge.

00:01:58.716 --> 00:02:02.340
We can also specify that one view 
should be relative to another view.

00:02:02.340 --> 00:02:05.280
It doesn't fill up the spaces nicely
compared to a linear layout,

00:02:05.280 --> 00:02:07.090
but there are pros and cons to each.

00:02:08.157 --> 00:02:11.859
There's a grid layout where the views 
fill up cells in a grid.

00:02:12.060 --> 00:02:15.277
You can also have views 
that span multiple cells.

00:02:15.318 --> 00:02:18.090
I also want to point out 
that a view group is a view.

00:02:18.136 --> 00:02:20.247
In our code when we refer 
to a list item layout

00:02:20.247 --> 00:02:22.993
as being a single view,
that just means the root view

00:02:22.993 --> 00:02:25.793
of the whole view hierarchy 
for that layout.

00:02:25.851 --> 00:02:28.100
Chances are that root view 
is a ViewGroup,

00:02:28.100 --> 00:02:31.280
so it contains children views 
as well as ViewGroups.

00:02:31.690 --> 00:02:34.970
So basically you can nest ViewGroups 
within ViewGroups.

00:02:35.040 --> 00:02:38.280
The reason why we care so much 
about parent child view relationships,

00:02:38.280 --> 00:02:42.470
is because the way a child view 
gets laid out depends on its parent.

00:02:42.470 --> 00:02:46.160
The simplest example of this 
is specifying a view's width and height.

00:02:46.160 --> 00:02:49.530
By now you've seen that every view 
requires a height and width.

00:02:49.950 --> 00:02:53.869
The two possible values 
are either wrap content or match parent.

00:02:54.540 --> 00:02:56.620
This diagram shows all 
the possible combinations

00:02:56.620 --> 00:02:59.000
for width and height for this text view.

00:02:59.000 --> 00:03:01.580
This is the balance of the view 
when we set wrap_content

00:03:01.580 --> 00:03:03.310
for height and width.

00:03:03.310 --> 00:03:05.940
This is what happens when we do 
match_parent for the width

00:03:05.940 --> 00:03:07.840
and match_parent for the height.

00:03:07.840 --> 00:03:10.673
And this is what happens 
when both are set as match_parent.

00:03:10.673 --> 00:03:13.286
It fills up the full dimensions 
of the parent.

00:03:13.286 --> 00:03:16.750
When you run this on the device, 
all of these would visually look the same,

00:03:16.750 --> 00:03:18.660
because you wouldn't see 
these boundaries.

00:03:18.708 --> 00:03:20.656
So why does it matter which one we pick?

00:03:20.656 --> 00:03:22.665
Well, it matters as soon as 
you have other children

00:03:22.665 --> 00:03:24.507
that need to be beside this view.

00:03:24.534 --> 00:03:27.056
Another reason is 
if you want to specify gravity.

00:03:27.116 --> 00:03:29.372
Let me spend a quick moment 
explaining gravity.

00:03:30.025 --> 00:03:33.496
Say for example, you have this text view
within a frame layout.

00:03:33.574 --> 00:03:37.330
By default, the text is left aligned, 
and in this case, no gravity is set.

00:03:37.330 --> 00:03:39.527
If we specify gravity equals center,

00:03:39.547 --> 00:03:42.183
then it will center the content 
within the text view

00:03:42.183 --> 00:03:44.521
Vertically it can't move
because it's already centered,

00:03:44.521 --> 00:03:47.708
but horizontally it does shift over 
to be in the middle.

00:03:47.708 --> 00:03:50.500
Instead of this, if we specify 
layout gravity equals center,

00:03:50.570 --> 00:03:53.540
that means to center horizontally
and vertically within the parent.

00:03:53.540 --> 00:03:57.160
So we grab the whole child text view
and we move it into the center.

00:03:57.160 --> 00:04:00.440
Now it can't be centered horizontally
because it already takes up the max width

00:04:00.440 --> 00:04:03.329
of the parent. If we really want to move
the content to the middle,

00:04:03.329 --> 00:04:06.392
then we should specify 
wrap content on this text view,

00:04:06.470 --> 00:04:09.297
so that it can be moved to the center
with this attribute.

00:04:09.819 --> 00:04:12.504
You can also specify padding 
and margin on views.

00:04:13.204 --> 00:04:15.622
For example, if you added padding
on this text view,

00:04:15.687 --> 00:04:19.750
then it would shift the content inside
by x amount on all sides.

00:04:19.750 --> 00:04:23.390
If you specify layout margin to be x, 
then remember that the parent is

00:04:23.390 --> 00:04:26.700
the one who will be interpreting 
this layout prim.

00:04:26.700 --> 00:04:29.740
In this case, it adds a margin of x 
all around the text view.

00:04:29.760 --> 00:04:31.530
The text view is only this size.

00:04:32.204 --> 00:04:35.280
When you render both of these, 
they would visually look the same.

00:04:35.280 --> 00:04:36.801
Here's one case where it could matter.

00:04:36.801 --> 00:04:38.260
If this was a button and you pressed it,

00:04:38.260 --> 00:04:40.594
there could be 
a gray background here showing.

00:04:40.692 --> 00:04:43.967
In some cases you may want padding
or margin or both.

00:04:44.467 --> 00:04:46.807
All views have a visibility property.

00:04:46.841 --> 00:04:49.708
For this image view, it can be visible,
invisible, or gone.

00:04:49.763 --> 00:04:53.646
If it's invisible then it's not shown, 
but there's still a place holder for it,

00:04:53.646 --> 00:04:56.017
we still have to go 
and measure the size of it.

00:04:56.017 --> 00:04:58.252
If it's gone, then it's not even 
in the layout.

00:04:58.252 --> 00:05:00.526
It's as if it didn't exist in the XML.

00:05:00.526 --> 00:05:04.280
You can also toggle the visibility 
of a view dynamically during runtime.

00:05:04.280 --> 00:05:07.240
In the Java doc, you can find 
all the possible XML attributes

00:05:07.240 --> 00:05:08.560
for that class.

00:05:08.560 --> 00:05:12.740
It also shows inherited XML attributes,
for example, from the view class

00:05:12.740 --> 00:05:14.010
for this image view,

00:05:14.010 --> 00:05:17.746
and then it shows the corresponding 
Java methods for those attributes.

00:05:17.756 --> 00:05:20.542
Now as a briefer, now we have 
some basics to help us get started,

00:05:20.542 --> 00:05:23.970
but definitely check out 
the developer site for more details later.

00:05:23.970 --> 00:05:26.670
Much like the real world, 
if you were working with a team

00:05:26.670 --> 00:05:30.660
to build an Android app, you would start
by implementing the wire frames first.

00:05:30.660 --> 00:05:33.642
This has a correct flow for how the user
will interact with the app.

00:05:33.642 --> 00:05:36.465
But it doesn't have 
the final visual look and feel yet.

00:05:36.557 --> 00:05:40.041
We'll build this up step by step, 
starting with the main activity

00:05:40.043 --> 00:05:43.928
then we'll move on to the detail activity 
and then later build up the tablet UI.

00:05:44.266 --> 00:05:48.370
Then we'll receive a set of visual marks, 
red lines and assets,

00:05:48.482 --> 00:05:51.069
all of this will help us build 
a pixel perfect layout

