WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
There's one last set of concepts

00:00:02.000 --> 00:00:06.000
I'd like to cover before we move into some actual programming.

00:00:06.000 --> 00:00:08.000
This is ACID.

00:00:08.000 --> 00:00:10.000
Now again, like many of the concepts in this lecture,

00:00:10.000 --> 00:00:13.000
this is a very, very broad topic,

00:00:13.000 --> 00:00:15.000
and we're just barely going to scratch the surface.

00:00:15.000 --> 00:00:17.000
But I want you to be familiar with these concepts,

00:00:17.000 --> 00:00:20.000
because this is the type of language we'll be using when we're building a system.

00:00:20.000 --> 00:00:23.000
ACID--this stands for

00:00:23.000 --> 00:00:30.000
Atomicity, Consistency, Isolation, Durability.

00:00:30.000 --> 00:00:32.000
Atomicity refers to the notion that

00:00:32.000 --> 00:00:35.000
all parts of a transaction succeed or fail together.

00:00:35.000 --> 00:00:37.000
Now, we haven't talked about transactions,

00:00:37.000 --> 00:00:40.000
but these are basically just a group of statements.

00:00:40.000 --> 00:00:42.000
So if we were updating our database,

00:00:42.000 --> 00:00:45.000
which is actually not something we spend much time on,

00:00:45.000 --> 00:00:48.000
there may be the case where we're updating two tables at once,

00:00:48.000 --> 00:00:52.000
or updating multiple rows in our database together,

00:00:52.000 --> 00:00:54.000
in one cohesive unit.

00:00:54.000 --> 00:00:56.000
For example, if we're working from the Reddit example,

00:00:56.000 --> 00:00:58.000
if we had a link table and a users table,

00:00:58.000 --> 00:01:03.000
and somebody up voted on a link and that increases the user's reputation,

00:01:03.000 --> 00:01:05.000
we might increase the score of the link

00:01:05.000 --> 00:01:08.000
and also increase the reputation of the user.

00:01:08.000 --> 00:01:11.000
And then what happens is something called a transaction,

00:01:11.000 --> 00:01:13.000
which groups together multiple commands.

00:01:13.000 --> 00:01:17.000
Atomicity refers to the notion that either all those commands are going to succeed,

00:01:17.000 --> 00:01:20.000
or they're all going to fail, but we don't do part of it.

00:01:20.000 --> 00:01:23.000
We don't have just updating the link and not updating the user.

00:01:23.000 --> 00:01:25.000
Everything happens together.

00:01:25.000 --> 00:01:28.000
So this is a nice property for a database to have.

00:01:28.000 --> 00:01:31.000
Consistency refers to the notion that

00:01:31.000 --> 00:01:33.000
the database will always be consistent.

00:01:33.000 --> 00:01:36.000
And to work from our Reddit example, let's talk about this idea

00:01:36.000 --> 00:01:39.000
where we have a link and a user who have properties.

00:01:39.000 --> 00:01:41.000
If we have this notion that

00:01:41.000 --> 00:01:44.000
a link has a score

00:01:44.000 --> 00:01:47.000
that gets updated periodically,

00:01:47.000 --> 00:01:49.000
and the author--or the submitter--of that link

00:01:49.000 --> 00:01:52.000
also has a karma score that also gets updated at the same time,

00:01:52.000 --> 00:01:57.000
consistency refers to the notion that both the score and the karma

00:01:57.000 --> 00:01:59.000
will be consistent with one another

00:01:59.000 --> 00:02:02.000
so that we don't update the score

00:02:02.000 --> 00:02:04.000
without also updating the karma.

00:02:04.000 --> 00:02:07.000
It basically means the database will move from one valid transaction to the next.

00:02:07.000 --> 00:02:11.000
So we'll never run a query that gets a links updated score

00:02:11.000 --> 00:02:15.000
but can't also get the user's updated karma.

00:02:15.000 --> 00:02:17.000
So isolation refers to the notion that

00:02:17.000 --> 00:02:20.000
no transaction can interfere with another's.

00:02:20.000 --> 00:02:23.000
So let's say we have a link that is both getting

00:02:23.000 --> 00:02:25.000
two votes coming at the same time

00:02:25.000 --> 00:02:27.000
to increase the score of this link.

00:02:27.000 --> 00:02:30.000
That means we're going to be updating the links score

00:02:30.000 --> 00:02:33.000
up and down and the user's karma up and down.

00:02:33.000 --> 00:02:35.000
Isolation refers to the notion that

00:02:35.000 --> 00:02:38.000
this up vote won't affect

00:02:38.000 --> 00:02:40.000
the computation of this down vote.

00:02:40.000 --> 00:02:43.000
If we were overriding this link in our database,

00:02:43.000 --> 00:02:46.000
it would be a shame if the down vote was applied to

00:02:46.000 --> 00:02:49.000
the original link score before the up vote was applied.

00:02:49.000 --> 00:02:51.000
Because then that score changing here should be 0,

00:02:51.000 --> 00:02:54.000
but it could be -1 if these aren't handled properly.

00:02:54.000 --> 00:02:57.000
So isolation refers to the notion that each transaction

00:02:57.000 --> 00:03:00.000
cannot affect other transactions.

00:03:00.000 --> 00:03:02.000
Sometimes this is accomplished through locking.

00:03:02.000 --> 00:03:04.000
If two transactions affect the same row,

00:03:04.000 --> 00:03:06.000
only one can go at a time.

00:03:06.000 --> 00:03:09.000
And there are other ways of resolving transaction conflicts like that.

00:03:09.000 --> 00:03:12.000
Isolation refers to a database's ability to do that.

00:03:12.000 --> 00:03:14.000
Finally, we have durability.

00:03:14.000 --> 00:03:16.000
Durability refers to the notion that once a transaction is committed,

00:03:16.000 --> 00:03:18.000
it won't be lost.

00:03:18.000 --> 00:03:21.000
This means that, for example, if we send an update to our database,

00:03:21.000 --> 00:03:23.000
and we update some rows,

00:03:23.000 --> 00:03:26.000
and the database says, okay, successful,

00:03:26.000 --> 00:03:29.000
that even if the database is turned off or crashed,

00:03:29.000 --> 00:03:33.000
crashes, or is unplugged, we won't lose that data.

00:03:33.000 --> 00:03:35.000
That is durability.

00:03:35.000 --> 00:03:37.000
One thing I'd like you to know--

00:03:37.000 --> 00:03:42.000
I know we introduced a lot of new concepts in this portion here,

00:03:42.000 --> 00:03:44.000
but the important takeaway from this

00:03:44.000 --> 00:03:48.000
is that when you're talking about different database systems,

00:03:48.000 --> 00:03:50.000
you have different tradeoffs.

00:03:50.000 --> 00:03:53.000
It's hard to be fully--have a database that's completely atomic,

00:03:53.000 --> 00:03:56.000
it's completely consistent, all transactions are isolated,

00:03:56.000 --> 00:03:58.000
and it's completely durable.

00:03:58.000 --> 00:04:00.000
There's always some tradeoffs.

00:04:00.000 --> 00:04:03.000
So for example, let's take a little quiz.

00:04:03.000 --> 00:04:06.000
Replication lag is the example of the loss of which property--

00:04:06.000 --> 00:04:10.000
Atomicity, Consistency, Isolation, or Durability?

00:04:10.000 --> 00:04:12.000
Now, remember replication lag--we discussed this--

00:04:12.000 --> 00:04:14.000
I'll go over it again real quick--

00:04:14.000 --> 00:04:16.000
occurs in this situation.

00:04:16.000 --> 00:04:18.000
So we've got a master database.

00:04:18.000 --> 00:04:21.000
We've got a couple of slaves.

00:04:21.000 --> 00:04:25.000
Replication lag occurs when we send a write to the master

00:04:25.000 --> 00:04:28.000
and we want to replicate it to our slaves,

00:04:28.000 --> 00:04:32.000
but we don't finish replicating it

00:04:32.000 --> 00:04:36.000
when a read comes in directly to one of the slaves.

00:04:36.000 --> 00:04:39.000
Now, we allow these reads to come in directly to the slaves,

00:04:39.000 --> 00:04:42.000
remember, to alleviate some of the read load from our master.

00:04:42.000 --> 00:04:46.000
But if the data hasn't propagated yet, this is called replication lag.

00:04:46.000 --> 00:04:50.000
So which property is this an example of losing?

