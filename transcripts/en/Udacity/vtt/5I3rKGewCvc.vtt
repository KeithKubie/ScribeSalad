WEBVTT
Kind: captions
Language: en

00:00:00.760 --> 00:00:02.210
Alright, now we know how to use the

00:00:02.210 --> 00:00:06.160
Mapreduce programming model to count words. That's great, but

00:00:06.160 --> 00:00:09.430
counting words is pretty specific and it's not amazingly

00:00:09.430 --> 00:00:12.730
interesting. Can we use the Mapreduce programming model to

00:00:12.730 --> 00:00:16.490
do more interesting things? We sure can. let's

00:00:16.490 --> 00:00:18.850
revisit the AADHAAR enrollment data from way back in

00:00:18.850 --> 00:00:22.250
lesson two. Say we want to know how many enrollments

00:00:22.250 --> 00:00:25.980
happened in each district. We can perform this calculation

00:00:25.980 --> 00:00:28.740
using the map produced programming model. Of course,

00:00:28.740 --> 00:00:31.240
we saw in lesson two, we could easily perform

00:00:31.240 --> 00:00:34.070
such a computation with a SQL query. Or a

00:00:34.070 --> 00:00:37.450
Python script. Using Mapreduce to solve this problem isn't

00:00:37.450 --> 00:00:40.440
necessary with data our size. But imagine if

00:00:40.440 --> 00:00:44.750
we had terabytes and terabytes of data. Say, line

00:00:44.750 --> 00:00:47.640
items for the AADHAAR enrollment of every single Indian

00:00:47.640 --> 00:00:50.890
citizen. We'd have no choice but to use Mapreduce.

