WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So here again we have our dynamic trace,

00:00:03.000 --> 00:00:05.000
now a bit bigger.

00:00:05.000 --> 00:00:10.000
Remember that the input was double quote followed by a less-than sign.

00:00:10.000 --> 00:00:16.000
What we get in the end is the output, which is just the less-than sign.

00:00:16.000 --> 00:00:21.000
In the dynamic trace, we can now, again, follow back the dependency.

00:00:21.000 --> 00:00:24.000
For instance, from out--out is being read here.

00:00:24.000 --> 00:00:26.000
Where was it last written?

00:00:26.000 --> 00:00:29.000
That's over here, so this depends on this earlier statement.

00:00:29.000 --> 00:00:31.000
Here we have out that's being read.

00:00:31.000 --> 00:00:34.000
Now in the dynamic trace you can actually follow this whole thing

00:00:34.000 --> 00:00:38.000
and see where it was last written, again,

00:00:38.000 --> 00:00:40.000
which is up here.

00:00:40.000 --> 00:00:44.000
And here we have the character c, which stems from the second iteration of the for loop.

00:00:44.000 --> 00:00:49.000
And this relates to s, which depends on the input.

00:00:49.000 --> 00:00:53.000
So, again, we have a chain of dependencies: out going up here,

00:00:53.000 --> 00:00:55.000
up here, up here, up here,

00:00:55.000 --> 00:00:58.000
and you can also see this as a cause-effect chain.

00:00:58.000 --> 00:01:03.000
S had this value; therefore, c became a less-than sign,

00:01:03.000 --> 00:01:10.000
which was edited out, which finally resulted in the input also having a less-than sign.

00:01:10.000 --> 00:01:15.000
Again, we can use these dependencies to build a slice.

00:01:15.000 --> 00:01:18.000
However, now the slice would be a dynamic slice

00:01:18.000 --> 00:01:22.000
because it is built on the dynamic trace.

00:01:22.000 --> 00:01:25.000
Starting with the assert statement,

00:01:25.000 --> 00:01:30.000
we see that out=out+c is being executed,

00:01:30.000 --> 00:01:32.000
and therefore part of our slice.

00:01:32.000 --> 00:01:36.000
We see that the initialization of out is part of our slice

00:01:36.000 --> 00:01:39.000
We see that the for loop is part of our slice.

00:01:39.000 --> 00:01:43.000
And, of course, when we call "remove HTML markup"

00:01:43.000 --> 00:01:47.000
where s is being set, this also becomes part of our dynamic slice.

00:01:47.000 --> 00:01:50.000
So far we only looked at dynamic data dependencies,

00:01:50.000 --> 00:01:53.000
but of course there are also dynamic control dependencies.

00:01:53.000 --> 00:01:59.000
Every condition that gets evaluated, that is, executed and controlled

00:01:59.000 --> 00:02:02.000
whether a statement in question is executed or not,

00:02:02.000 --> 00:02:04.000
builds a dynamic-control dependency.

00:02:04.000 --> 00:02:07.000
Therefore, since we executed out=out+c,

00:02:07.000 --> 00:02:11.000
the controlling conditions are also part of the dynamic slice.

00:02:11.000 --> 00:02:16.000
&gt;From these conditions, we again get more dynamic data dependencies,

00:02:16.000 --> 00:02:20.000
which you can look up, again, in our dynamic trace.

00:02:20.000 --> 00:02:24.000
For instance, here the tag variable, which is being read over here,

00:02:24.000 --> 00:02:26.000
was last set up here.

00:02:26.000 --> 00:02:32.000
Therefore, this condition is data-dependent on this initialization.

00:02:32.000 --> 00:02:34.000
So here's a quiz.

00:02:34.000 --> 00:02:40.000
Which other statements in the program are also part of the dynamic slice?

00:02:40.000 --> 00:02:43.000
Is it quote=false?

00:02:43.000 --> 00:02:45.000
Is it tag=true?

00:02:45.000 --> 00:02:47.000
Is it tag=false?

00:02:47.000 --> 00:02:49.000
Or is it quote=not quote?

