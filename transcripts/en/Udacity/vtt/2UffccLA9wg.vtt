WEBVTT
Kind: captions
Language: en

00:00:05.670 --> 00:00:08.600
Hey James, wasn't it kind of annoying that you had to type out

00:00:08.600 --> 00:00:10.660
the same if statement twice?

00:00:10.660 --> 00:00:13.810
&gt;&gt; Yeah. I think I broke one of the cardinal rules of programming: don't

00:00:13.810 --> 00:00:14.645
repeat yourself.

00:00:14.645 --> 00:00:15.180
&gt;&gt; Mm-hm.

00:00:15.180 --> 00:00:16.030
Yeah.

00:00:16.030 --> 00:00:17.100
And with that in mind,

00:00:17.100 --> 00:00:19.009
I think it's probably time that we should talk about loops.

00:00:20.310 --> 00:00:22.810
&gt;&gt; So is that why we're looking at an animated GIF?

00:00:22.810 --> 00:00:24.470
&gt;&gt; Okay. That's one reason.

00:00:24.470 --> 00:00:27.290
The second is because that is an awesome GIF.

00:00:27.290 --> 00:00:30.510
But really, I think the important part here is that a GIF repeats itself

00:00:30.510 --> 00:00:31.510
automatically.

00:00:31.510 --> 00:00:34.470
We don't have to tell a GIF to play itself again, it just does it.

00:00:34.470 --> 00:00:37.515
And in fact, JavaScript gives us a few tools to do this as well.

00:00:37.515 --> 00:00:41.110
And we're going to go ahead and start with a while loop.

00:00:41.110 --> 00:00:45.000
&gt;&gt; A while loop let's us repeat a piece of code so

00:00:45.000 --> 00:00:47.660
long as some condition evaluates to true.

00:00:49.160 --> 00:00:51.920
Once it doesn't evaluate to true, we exit the while loop.

00:00:53.470 --> 00:00:56.630
The syntax is while condition.

00:00:56.630 --> 00:00:59.970
And then in curly braces, some sort of code here.

00:00:59.970 --> 00:01:03.480
So for this one we have doSomething();.

00:01:03.480 --> 00:01:05.556
&gt;&gt; Hey let's let's show an example.

00:01:05.556 --> 00:01:14.200
&gt;&gt; Okay. While(cameron.job ==="course dev") should make courses.

00:01:14.200 --> 00:01:15.610
&gt;&gt; I like that example.

00:01:15.610 --> 00:01:20.425
Notice how this is similar to python, but it includes conditions in parentheses,

00:01:20.425 --> 00:01:24.430
and actions and curly braces, just like with if statements.

00:01:24.430 --> 00:01:26.670
Remember, if the condition evaluates to true,

00:01:26.670 --> 00:01:30.700
we'll do the action, then ask ourselves again, is the condition true?

00:01:30.700 --> 00:01:32.740
We'll continue following this loop.

00:01:32.740 --> 00:01:36.230
Until the condition is no longer true, at which point will exit the loop.

00:01:36.230 --> 00:01:40.260
Over here, so long as my job is course developer, I'll keep making courses.

00:01:40.260 --> 00:01:43.430
The while loop will ask itself again, is Cameron still a course developer?

00:01:43.430 --> 00:01:45.160
If so, make courses.

00:01:45.160 --> 00:01:45.940
Until at some point,

00:01:45.940 --> 00:01:50.250
when my job is no longer course developer, at which point will exit the loop.

00:01:50.250 --> 00:01:51.105
&gt;&gt; How might that happen?

00:01:51.105 --> 00:01:51.860
&gt;&gt; Hm.

00:01:51.860 --> 00:01:54.080
Perhaps there's a limit on how many courses I can make.

00:01:54.080 --> 00:01:55.690
10 courses maximum.

00:01:55.690 --> 00:01:57.190
You know what?

00:01:57.190 --> 00:01:58.310
Let's see what this looks like in code.

00:01:59.850 --> 00:02:00.510
Outside of the loop,

00:02:00.510 --> 00:02:03.530
I'll create an iterator called courses, which is going to start at 0.

00:02:03.530 --> 00:02:08.130
This is going to keep track of how many courses I've made.

00:02:08.130 --> 00:02:09.258
After making a course,

00:02:09.258 --> 00:02:11.960
I'm going to add 1 to the number of courses that I've made.

00:02:13.310 --> 00:02:16.250
Let's add an if statement to our loop that checks if the number of courses I've

00:02:16.250 --> 00:02:17.320
made is 10.

00:02:17.320 --> 00:02:20.146
And if so, changes my job to learning specialist.

00:02:20.146 --> 00:02:24.379
Afterwards, the loop exits.

00:02:24.379 --> 00:02:25.084
&gt;&gt; Interesting.

00:02:25.084 --> 00:02:26.830
Let's check to see if that works.

00:02:26.830 --> 00:02:31.870
Here's the make course function that console logs Made a course every time

00:02:31.870 --> 00:02:32.419
it's run.

00:02:32.419 --> 00:02:37.910
And let's console.log(cameron.job) when we're finished running the loop.

00:02:39.030 --> 00:02:40.830
So, when we run it,

00:02:40.830 --> 00:02:46.250
we can see that it's printed made a course to the counsel log 10 times.

00:02:46.250 --> 00:02:48.400
And then when it finished,

00:02:48.400 --> 00:02:51.310
it printed out learning specialist, Cameron's new job.

