WEBVTT
Kind: captions
Language: en

00:00:07.830 --> 00:00:09.030
SAURABH GUPTA: Good afternoon.

00:00:09.030 --> 00:00:13.240
And welcome to Building Apps
with Google Apps Script.

00:00:13.240 --> 00:00:16.050
My name is Saurabh Gupta, and
I'm the product manager for

00:00:16.050 --> 00:00:18.170
Google Apps Script.

00:00:18.170 --> 00:00:21.420
And today, I'm going to
tell you a story.

00:00:21.420 --> 00:00:24.970
This is a story about an app,
a web app, that was built

00:00:24.970 --> 00:00:26.860
using Google Apps Script.

00:00:26.860 --> 00:00:30.740
The name of the app is DriveEye,
and it lets you keep

00:00:30.740 --> 00:00:34.620
an eye on your Google Drive.

00:00:34.620 --> 00:00:38.230
This story has four parts to it,
meaning we'll go through

00:00:38.230 --> 00:00:41.920
the whole process of how this
web app was assembled and put

00:00:41.920 --> 00:00:44.110
together using Google
Apps Script.

00:00:44.110 --> 00:00:47.050
And in each of these sections,
we'll cover in detail as to

00:00:47.050 --> 00:00:50.160
what you should do when building
an app like that.

00:00:50.160 --> 00:00:54.590
And along the way, we have
a few surprises for you.

00:00:54.590 --> 00:00:57.690
But before we begin,
what is DriveEye?

00:00:57.690 --> 00:00:59.770
Let me explain a little
bit about DriveEye.

00:00:59.770 --> 00:01:02.840
So as I said, DriveEye
lets you keep an eye

00:01:02.840 --> 00:01:04.459
on your Google Drive.

00:01:04.459 --> 00:01:09.080
So for example if, say, you
have a shared folder, and

00:01:09.080 --> 00:01:12.170
you're sharing it, say, with
your friend, or colleague, or

00:01:12.170 --> 00:01:12.830
whoever, right?

00:01:12.830 --> 00:01:15.590
And if there is some activity in
that folder, meaning files

00:01:15.590 --> 00:01:18.340
get added to that folder, then
you might want to get some

00:01:18.340 --> 00:01:19.810
notifications on it.

00:01:19.810 --> 00:01:23.730
So DriveEye lets you just do
exactly that, which is lets

00:01:23.730 --> 00:01:26.920
you keep an eye on your drive
on a particular folder.

00:01:26.920 --> 00:01:29.530
So the first thing is when you
go to this web app, you can

00:01:29.530 --> 00:01:32.390
subscribe to notifications
from different

00:01:32.390 --> 00:01:33.970
folders in your drive.

00:01:33.970 --> 00:01:38.010
So it's a simple way of adding
folders that you can have

00:01:38.010 --> 00:01:39.420
subscription to.

00:01:39.420 --> 00:01:42.250
Once you have subscription, then
if, say, there is some

00:01:42.250 --> 00:01:45.600
activity in this folder-- so for
example in this screenshot

00:01:45.600 --> 00:01:48.500
here you see I have subscribed
to activity in,

00:01:48.500 --> 00:01:49.950
say, playoff bets.

00:01:49.950 --> 00:01:55.800
And if a friend of mine added
a file or a spreadsheet into

00:01:55.800 --> 00:01:58.140
the folder, then I get an email
saying, hey, somebody

00:01:58.140 --> 00:02:00.940
added a file to this folder,
or something like that.

00:02:00.940 --> 00:02:03.840
So it's a very simple, yet
powerful app that lets you

00:02:03.840 --> 00:02:05.390
keep an eye on your drive.

00:02:05.390 --> 00:02:11.330
And this was built using
Google Apps Script.

00:02:11.330 --> 00:02:14.870
So a little bit of history of
Apps Script and our origin.

00:02:14.870 --> 00:02:18.900
So we started in 2009 as a way
of letting you write custom

00:02:18.900 --> 00:02:20.310
functions and spreadsheets.

00:02:20.310 --> 00:02:23.110
Simple, yet powerful features.

00:02:23.110 --> 00:02:25.900
Along the way, we said,
well, you can

00:02:25.900 --> 00:02:26.830
write custom functions.

00:02:26.830 --> 00:02:29.720
Why not some interesting UI,
and sort of extend your

00:02:29.720 --> 00:02:31.050
spreadsheet experience?

00:02:31.050 --> 00:02:33.120
We also gave you a little
gallery where you can share

00:02:33.120 --> 00:02:38.300
code and share your
scripts as well.

00:02:38.300 --> 00:02:42.060
And last year, we doubled down
on our investment in UI.

00:02:42.060 --> 00:02:46.130
Gave you UIBuilder and a whole
host of services that you can

00:02:46.130 --> 00:02:49.520
use to write and build
awesome apps.

00:02:49.520 --> 00:02:51.480
So what's for this year?

00:02:51.480 --> 00:02:55.460
Well, what we thought was that
what we had built was

00:02:55.460 --> 00:02:57.250
something really good.

00:02:57.250 --> 00:03:00.180
But of course, this is Google,
so we want to do something

00:03:00.180 --> 00:03:01.530
even better.

00:03:01.530 --> 00:03:05.900
And that better is
script.google.com.

00:03:08.630 --> 00:03:11.750
This is a one-stop
shop for all your

00:03:11.750 --> 00:03:14.810
Google Apps Script needs.

00:03:14.810 --> 00:03:19.670
This the place that you go now
to create, manage, organize,

00:03:19.670 --> 00:03:20.860
write your scripts.

00:03:20.860 --> 00:03:24.610
One simple URL script,
script.google.com.

00:03:24.610 --> 00:03:25.290
Don't forget it.

00:03:25.290 --> 00:03:26.540
Again, I'll say
script.google.com.

00:03:30.950 --> 00:03:33.570
So what does script.google.com
let you do?

00:03:33.570 --> 00:03:36.280
And this is the first part of
our story, which is it lets

00:03:36.280 --> 00:03:37.720
you create scripts.

00:03:37.720 --> 00:03:40.710
Now, what's such a big deal
about creating scripts?

00:03:40.710 --> 00:03:43.800
Well, I'm going to walk you
through as to the big deal

00:03:43.800 --> 00:03:47.030
about creating scripts, but the
short answer is, you can

00:03:47.030 --> 00:03:50.390
now create scripts from your
Google Drive, or you can

00:03:50.390 --> 00:03:52.300
create scripts from
script.google.com.

00:03:55.860 --> 00:03:59.640
So again, did anything change
with script.google.com?

00:03:59.640 --> 00:04:00.060
No.

00:04:00.060 --> 00:04:02.580
If you like the way Apps
Script is today--

00:04:02.580 --> 00:04:06.880
or was until yesterday, you
get all those features.

00:04:06.880 --> 00:04:09.480
You get all your APIs,
your services.

00:04:09.480 --> 00:04:11.960
You get all your events,
triggers, and a whole host of

00:04:11.960 --> 00:04:12.580
functionality.

00:04:12.580 --> 00:04:17.880
But with script.google.com, you
get something even more.

00:04:17.880 --> 00:04:21.120
So what's such a big deal about
this whole create part

00:04:21.120 --> 00:04:23.330
of the story on DriveEye?

00:04:23.330 --> 00:04:28.700
Well, we let you create scripts,
but only from sites

00:04:28.700 --> 00:04:30.090
or spreadsheets.

00:04:30.090 --> 00:04:33.770
So a lot of our users
ask us, like why are

00:04:33.770 --> 00:04:35.310
you hiding this product?

00:04:35.310 --> 00:04:36.940
And we used to say, well,
you can create

00:04:36.940 --> 00:04:37.660
container-bound scripts.

00:04:37.660 --> 00:04:39.240
That was our origin.

00:04:39.240 --> 00:04:43.040
But with script.google.com,
now you no longer have to

00:04:43.040 --> 00:04:45.290
create a spreadsheet
to create a script.

00:04:48.710 --> 00:04:51.580
Projects are independent and
are, in their own right, first

00:04:51.580 --> 00:04:52.790
class developer products.

00:04:52.790 --> 00:04:55.520
And scripts.google.com
is your destination.

00:04:58.860 --> 00:05:02.060
So this is the first feature
that we are launching today

00:05:02.060 --> 00:05:04.980
which is letting you create
standalone scripts, scripts

00:05:04.980 --> 00:05:06.910
that can be created from
Google Drive, or

00:05:06.910 --> 00:05:08.840
script.google.com.

00:05:08.840 --> 00:05:12.990
So let's explore some
differences between

00:05:12.990 --> 00:05:17.720
container-bond scripts and
standalone scripts.

00:05:17.720 --> 00:05:21.710
As we know, container-bound
scripts can be created from

00:05:21.710 --> 00:05:25.780
Spreadsheet in the Tools menu,
and you can go to the Script

00:05:25.780 --> 00:05:28.500
Editor and you can create as
many scripts as you like.

00:05:28.500 --> 00:05:31.280
And they are bound to a
spreadsheet, and those are

00:05:31.280 --> 00:05:33.370
container-bound scripts.

00:05:33.370 --> 00:05:36.260
But as you can see in this
screenshot here, you can now

00:05:36.260 --> 00:05:41.080
create scripts from the drive
itself, Google Drive.

00:05:41.080 --> 00:05:43.990
Go to Create Menu and More,
you will see Script.

00:05:43.990 --> 00:05:46.910
And now, once you create a
script, it will show up in

00:05:46.910 --> 00:05:48.520
your drive as well.

00:05:48.520 --> 00:05:51.340
Well, if you go to
script.google.com, then you

00:05:51.340 --> 00:05:54.320
see a Welcome screen, and you
are well on your way to

00:05:54.320 --> 00:05:55.960
creating standalone scripts.

00:05:55.960 --> 00:05:58.860
These scripts will also
show up in your drive.

00:06:03.320 --> 00:06:06.400
Another difference,
container-bound scripts always

00:06:06.400 --> 00:06:09.240
followed the life cycle of the
parent or the container.

00:06:09.240 --> 00:06:12.300
So for example, if you had a
script that was part of a

00:06:12.300 --> 00:06:16.210
spreadsheet, it lived and died
with the spreadsheet.

00:06:16.210 --> 00:06:19.940
Standalone scripts, on the other
hand, live on their own.

00:06:19.940 --> 00:06:21.550
So they have their life cycle.

00:06:21.550 --> 00:06:24.340
That's an easy difference.

00:06:24.340 --> 00:06:26.250
How do you find container-bound
scripts?

00:06:26.250 --> 00:06:28.790
So you have to locate the
parent, which is, first, you

00:06:28.790 --> 00:06:32.360
have to go to a spreadsheet,
then find all

00:06:32.360 --> 00:06:34.150
the attached scripts.

00:06:34.150 --> 00:06:36.040
But standalone scripts
just show up in your

00:06:36.040 --> 00:06:37.580
drive, just like that.

00:06:37.580 --> 00:06:42.690
You can go to your drive or UI,
and go through all your

00:06:42.690 --> 00:06:43.940
script projects.

00:06:46.100 --> 00:06:49.320
Well, if you like search, you
can actually search your code

00:06:49.320 --> 00:06:52.170
in Google Drive, and script
projects will show up.

00:06:52.170 --> 00:06:57.310
So how many of you have this
myFunction script that you

00:06:57.310 --> 00:07:00.250
play it around with, and you
can just type myFunction in

00:07:00.250 --> 00:07:02.550
there, and you will see all
of these scripts that have

00:07:02.550 --> 00:07:04.530
myFunction in it?

00:07:04.530 --> 00:07:07.300
So not only can you create
scripts from Drive or

00:07:07.300 --> 00:07:10.010
script.google.com, but you can
find them there, and you can

00:07:10.010 --> 00:07:13.810
search for code, so all your
needs around creating and

00:07:13.810 --> 00:07:17.740
finding scripts are
taken care of.

00:07:17.740 --> 00:07:22.910
So going back to our application
which is DriveEye,

00:07:22.910 --> 00:07:25.410
how does this whole create
story fit in?

00:07:25.410 --> 00:07:28.590
Well, in order to design this
application, DriveEye, we

00:07:28.590 --> 00:07:30.610
thought, well, we will
need to create

00:07:30.610 --> 00:07:32.450
three standalone projects.

00:07:32.450 --> 00:07:36.080
The first project is the main
DriveEye project, which has

00:07:36.080 --> 00:07:38.350
all the nice UI and
everything.

00:07:38.350 --> 00:07:43.280
The second would be a folder
subscription API, meaning if I

00:07:43.280 --> 00:07:45.060
want to subscribe to a folder,
I want to remove a

00:07:45.060 --> 00:07:50.540
subscription, things like,
then I should be able to

00:07:50.540 --> 00:07:54.050
create a project that can do
those types of things.

00:07:54.050 --> 00:07:56.410
And then eventually, there is a
data model that needs to be

00:07:56.410 --> 00:07:58.430
stored in some database.

00:07:58.430 --> 00:08:00.370
That's pretty complex
stuff here.

00:08:00.370 --> 00:08:02.850
But the bottom line is
we need to create

00:08:02.850 --> 00:08:04.370
three standalone projects.

00:08:07.710 --> 00:08:09.900
But then, before we start
creating the standalone

00:08:09.900 --> 00:08:15.090
projects, what is the best way
to build UI and store data?

00:08:15.090 --> 00:08:19.080
And again, let's go back to
our history a little bit.

00:08:19.080 --> 00:08:22.470
So we let you create scripts
from spreadsheets.

00:08:22.470 --> 00:08:29.050
And we had UIApp, an awesome way
to build UI, and a great

00:08:29.050 --> 00:08:31.870
way to store data.

00:08:31.870 --> 00:08:34.330
That was pretty good, right?

00:08:34.330 --> 00:08:35.179
But this is Google.

00:08:35.179 --> 00:08:36.760
We want to do something
even better.

00:08:39.539 --> 00:08:44.420
So today, we are announcing
ScriptDB, which is your

00:08:44.420 --> 00:08:47.080
one-stop shop for all your
data storing needs for

00:08:47.080 --> 00:08:50.250
scripts, and HTMLService.

00:08:50.250 --> 00:08:53.800
So now, you can use HTML,
JavaScript, and CSS, and

00:08:53.800 --> 00:08:55.390
create web applications.

00:08:55.390 --> 00:08:58.830
So if you don't like the way to
create applications using

00:08:58.830 --> 00:09:02.520
Google Web Toolkit style, then
you can use HTMLService.

00:09:02.520 --> 00:09:07.760
And this session is not really
about ScriptDB or HTMLService.

00:09:07.760 --> 00:09:10.480
But we have two awesome
sessions tomorrow.

00:09:10.480 --> 00:09:14.830
One covering ScriptDB, and this
is at 5:15, room number

00:09:14.830 --> 00:09:16.060
seven, Drew's session.

00:09:16.060 --> 00:09:18.080
So you should definitely
attend that.

00:09:18.080 --> 00:09:19.030
You will learn lots
of new stuff.

00:09:19.030 --> 00:09:21.210
It's fully packed with
functionality.

00:09:21.210 --> 00:09:23.800
Every script gets
a data store.

00:09:23.800 --> 00:09:24.710
It's a JSON data store.

00:09:24.710 --> 00:09:28.080
You can store your JavaScript
objects, search across them,

00:09:28.080 --> 00:09:29.390
do a whole host of things.

00:09:29.390 --> 00:09:32.990
And we thought you needed a
whole session to understand

00:09:32.990 --> 00:09:35.110
the full capabilities of it.

00:09:35.110 --> 00:09:39.250
So do remember, 5:15 PM,
room number seven.

00:09:39.250 --> 00:09:42.540
And HTML Service, again,
very powerful stuff.

00:09:42.540 --> 00:09:47.270
It's not just able to do HTML,
JavaScript, CSS, but there's a

00:09:47.270 --> 00:09:49.840
lot of other functionality
like templates,

00:09:49.840 --> 00:09:50.780
and things like that.

00:09:50.780 --> 00:09:52.590
So definitely attend
this session as

00:09:52.590 --> 00:09:57.110
well, 2:45, room 11.

00:09:57.110 --> 00:10:03.030
But let's get back to
our session about

00:10:03.030 --> 00:10:04.210
building this app.

00:10:04.210 --> 00:10:07.830
So as we have noted, we needed
three standalone projects.

00:10:07.830 --> 00:10:09.970
So we go about creating three
standalone projects.

00:10:09.970 --> 00:10:12.410
And you can see here, we have
these three standalone

00:10:12.410 --> 00:10:15.110
projects created in our drive.

00:10:15.110 --> 00:10:18.170
And this is the data model that
we want to use, so these

00:10:18.170 --> 00:10:21.340
are the JavaScript objects that
eventually will be stored

00:10:21.340 --> 00:10:22.830
in ScriptDB.

00:10:22.830 --> 00:10:27.380
But the first class is the user
class, which when a user

00:10:27.380 --> 00:10:29.540
subscribes to a folder,
a trigger gets

00:10:29.540 --> 00:10:31.040
created for the user.

00:10:31.040 --> 00:10:34.660
And we keep track of what
folders you want to subscribe

00:10:34.660 --> 00:10:36.520
on, and the files, and
things like that.

00:10:36.520 --> 00:10:39.230
All of this gets stored
in ScriptDB.

00:10:39.230 --> 00:10:44.290
And for the folder subscription
API, we implement

00:10:44.290 --> 00:10:46.370
all of these functions where
you can add subscription,

00:10:46.370 --> 00:10:47.700
remove, and things like that.

00:10:47.700 --> 00:10:51.060
Pretty simple stuff, right?

00:10:51.060 --> 00:10:55.770
So now, we have the ability to
create scripts, standalone

00:10:55.770 --> 00:11:00.050
strips, from script.google.com,
and we have

00:11:00.050 --> 00:11:02.120
created three standalone
projects.

00:11:02.120 --> 00:11:06.550
But how do we glue these three
projects together?

00:11:06.550 --> 00:11:07.820
What should we do?

00:11:07.820 --> 00:11:11.860
And that brings us to the second
part of the story,

00:11:11.860 --> 00:11:16.290
which is, we want to make it
easy for you to share your

00:11:16.290 --> 00:11:17.840
scripts so that you can
collaborate and

00:11:17.840 --> 00:11:21.520
organize your code.

00:11:21.520 --> 00:11:24.020
So let's go back to
our history again.

00:11:24.020 --> 00:11:26.100
So we had some sort of
sharing and scripts.

00:11:26.100 --> 00:11:28.260
Like you can create a script
from a spreadsheet, and you

00:11:28.260 --> 00:11:32.690
can share it in a way you can
allow editors to collaborate

00:11:32.690 --> 00:11:35.000
on your script, and
things like that.

00:11:35.000 --> 00:11:39.180
Again, that was pretty good,
but we want to do better.

00:11:39.180 --> 00:11:42.060
And that better is just
a plain, simple

00:11:42.060 --> 00:11:43.310
way of sharing scripts.

00:11:45.570 --> 00:11:51.530
And what could be easier than
sharing scripts but sharing in

00:11:51.530 --> 00:11:52.500
a Google Docs way?

00:11:52.500 --> 00:11:56.160
And if you're familiar with this
dialog, then you would

00:11:56.160 --> 00:11:59.500
know that this is how you share
your documents, this is

00:11:59.500 --> 00:12:02.140
how you share a spreadsheet,
this is how you share you

00:12:02.140 --> 00:12:03.260
presentations.

00:12:03.260 --> 00:12:08.470
So why not share your scripts
using the same, well-known

00:12:08.470 --> 00:12:09.760
ability to share?

00:12:09.760 --> 00:12:13.120
So let's explore a little bit
about how sharing works.

00:12:13.120 --> 00:12:17.770
So as we know, we have two types
of scripts, standalone

00:12:17.770 --> 00:12:21.370
scripts and container-bound
scripts.

00:12:21.370 --> 00:12:24.660
So what we have done is we have
made sharing easy, such

00:12:24.660 --> 00:12:30.260
that container-bound scripts
inherit all the permissions

00:12:30.260 --> 00:12:31.010
from the parent.

00:12:31.010 --> 00:12:33.420
So if you create a spreadsheet,
and then you

00:12:33.420 --> 00:12:38.090
create a script, that script
would get all the permissions

00:12:38.090 --> 00:12:39.800
from the spreadsheet.

00:12:39.800 --> 00:12:41.700
Very simple.

00:12:41.700 --> 00:12:44.090
There is no complex way of,
like, OK, I want to prevent

00:12:44.090 --> 00:12:46.990
editors, and things like that.

00:12:46.990 --> 00:12:50.560
Simple way to understand
inheritance of permission.

00:12:50.560 --> 00:12:54.080
For standalone scripts, you can
use this dialog and add

00:12:54.080 --> 00:12:55.470
viewers and editors.

00:12:55.470 --> 00:13:00.790
So a very simple, well-known,
well-used way of sharing.

00:13:00.790 --> 00:13:03.880
But we have another concept in
scripts, which is, you need to

00:13:03.880 --> 00:13:05.090
give execute permission.

00:13:05.090 --> 00:13:10.530
So what we have done is we
have made all viewers

00:13:10.530 --> 00:13:11.820
executors as well.

00:13:11.820 --> 00:13:14.350
So if you can give view
permission to a script, then

00:13:14.350 --> 00:13:18.090
you're giving execute
permissions as well.

00:13:18.090 --> 00:13:22.250
And comparing this analogy
to libraries, or JARs, or

00:13:22.250 --> 00:13:25.600
whatever, if I can get a JAR,
then I can pretty much execute

00:13:25.600 --> 00:13:26.920
whatever code I have
in that JAR.

00:13:30.000 --> 00:13:32.130
So OK, that's great.

00:13:32.130 --> 00:13:33.490
I can share my scripts.

00:13:33.490 --> 00:13:34.110
That's fine.

00:13:34.110 --> 00:13:36.430
I can invite more viewers,
editors.

00:13:36.430 --> 00:13:37.640
People can look at my code.

00:13:37.640 --> 00:13:38.700
That's fine.

00:13:38.700 --> 00:13:42.430
But how does it help me to
really organize my code?

00:13:42.430 --> 00:13:47.050
And so we said, well, we
launched Libraries last month.

00:13:47.050 --> 00:13:51.060
And Libraries is that higher
order of sharing, which is

00:13:51.060 --> 00:13:54.280
once you share your script, then
somehow, what if there

00:13:54.280 --> 00:13:57.240
existed some magic where you
could covert your script

00:13:57.240 --> 00:13:58.960
project into a library?

00:13:58.960 --> 00:14:01.450
And that's that higher
order of sharing.

00:14:01.450 --> 00:14:03.840
So how do you create
a library?

00:14:03.840 --> 00:14:08.620
It's three simple steps
to create a library.

00:14:08.620 --> 00:14:10.105
You save a version
of your script.

00:14:13.040 --> 00:14:15.450
Then you share the script
with view permission.

00:14:15.450 --> 00:14:18.090
So once you have invited
viewers to your script

00:14:18.090 --> 00:14:21.590
project, then you are almost
halfway there.

00:14:21.590 --> 00:14:25.750
Now, your collaborators
can view your code.

00:14:25.750 --> 00:14:29.410
But then, when you share your
project key, then they can

00:14:29.410 --> 00:14:34.350
really start using your script
project as a library.

00:14:34.350 --> 00:14:39.510
So going back to our DriveEye
project, what we need to do is

00:14:39.510 --> 00:14:45.570
we need to convert two projects
out of these three to

00:14:45.570 --> 00:14:47.110
libraries, and then use them.

00:14:47.110 --> 00:14:49.620
So what we are going to do is
we're going to take the Data

00:14:49.620 --> 00:14:53.850
Model project, create a library
out of it, and then

00:14:53.850 --> 00:14:57.030
use that as a library in the
second project, which is the

00:14:57.030 --> 00:14:59.400
Folder Subscription Library.

00:14:59.400 --> 00:15:03.520
And then make Folder
Subscription project as a

00:15:03.520 --> 00:15:06.600
library, and then use it
in the main project.

00:15:06.600 --> 00:15:09.620
It's pretty complex stuff, but
it goes to show the power of

00:15:09.620 --> 00:15:13.540
sharing, combined with
libraries, the kinds of things

00:15:13.540 --> 00:15:16.360
that you can do here.

00:15:16.360 --> 00:15:18.170
So how do you use a library?

00:15:18.170 --> 00:15:20.170
Well, four simple steps.

00:15:20.170 --> 00:15:24.940
Once you have got that project
key from the owner or the

00:15:24.940 --> 00:15:28.250
author of the library, you
insert their project key in

00:15:28.250 --> 00:15:32.260
the Manage Libraries dialog
that you can see

00:15:32.260 --> 00:15:33.950
in the script editor.

00:15:33.950 --> 00:15:37.470
And once you do that, then
you can select a version.

00:15:37.470 --> 00:15:40.030
So now, remember you saved the
version, so you can have

00:15:40.030 --> 00:15:42.900
multiple versions at the same
time of your library.

00:15:42.900 --> 00:15:45.070
And whoever wants to
use your library

00:15:45.070 --> 00:15:46.320
can choose the version.

00:15:49.390 --> 00:15:54.220
Once you choose a version,
then you are asked for an

00:15:54.220 --> 00:15:55.060
identifier.

00:15:55.060 --> 00:15:58.490
Now this identifier is sort of
the namespace that you will

00:15:58.490 --> 00:16:01.060
give to that library
in your code.

00:16:01.060 --> 00:16:06.450
Here, for our DriveEye
application, we are using the

00:16:06.450 --> 00:16:09.540
name, FolderAlertLib, and I am
going to show you how this is

00:16:09.540 --> 00:16:10.930
used in the code.

00:16:10.930 --> 00:16:14.130
And that's the last step really,
which is once I open

00:16:14.130 --> 00:16:17.090
up my script editor, I
include the library.

00:16:17.090 --> 00:16:22.140
And as soon as I type my
identifier or the namespace--

00:16:22.140 --> 00:16:25.030
and here in this case, it's
FolderAlertLib.--

00:16:25.030 --> 00:16:29.260
you can see the auto-complete
shows up with all the

00:16:29.260 --> 00:16:32.250
available functions
that this library

00:16:32.250 --> 00:16:36.420
provides for that version.

00:16:36.420 --> 00:16:40.710
Four simple ways to
create libraries.

00:16:40.710 --> 00:16:44.230
And again, this example shows
you how a data model library

00:16:44.230 --> 00:16:46.520
was used in the second
project.

00:16:46.520 --> 00:16:49.480
Here you can see
DataModel.DriveFolder and

00:16:49.480 --> 00:16:52.010
DriveFolder was one of
the main classes that

00:16:52.010 --> 00:16:53.550
we wanted to store.

00:16:53.550 --> 00:16:56.210
So it's very simple
and easy to create

00:16:56.210 --> 00:16:58.150
libraries and use them.

00:16:58.150 --> 00:16:59.810
And it helps you organize
your code.

00:16:59.810 --> 00:17:08.000
Because now, you can refactor
your code such that it becomes

00:17:08.000 --> 00:17:09.319
usable chunks.

00:17:09.319 --> 00:17:12.119
And then, you can publish
versions and [? help ?] create

00:17:12.119 --> 00:17:16.069
libraries, and then continue
working on your code.

00:17:16.069 --> 00:17:18.260
So you can collaborate
effectively, you can

00:17:18.260 --> 00:17:19.490
organize your code.

00:17:19.490 --> 00:17:21.160
It's a really higher
form of sharing.

00:17:24.520 --> 00:17:28.660
And again, as I said, we used
FolderAlertLib, and we are

00:17:28.660 --> 00:17:31.980
using this library in the main
project, the DriveEye project,

00:17:31.980 --> 00:17:33.250
that has the UI as well.

00:17:37.510 --> 00:17:41.340
So we talked about creating
scripts from Drive or

00:17:41.340 --> 00:17:43.800
script.google.com.

00:17:43.800 --> 00:17:47.060
We talked about sharing
scripts.

00:17:47.060 --> 00:17:49.800
We talked about creating
libraries.

00:17:49.800 --> 00:17:52.720
We talked about creating three
standalone projects,

00:17:52.720 --> 00:17:53.550
converting them into

00:17:53.550 --> 00:17:56.750
libraries, gluing them together.

00:17:56.750 --> 00:17:59.130
So we have all the
elements now.

00:17:59.130 --> 00:18:00.590
What's next?

00:18:00.590 --> 00:18:02.550
So assuming all the
code is done.

00:18:02.550 --> 00:18:04.340
We have glued together
everything.

00:18:04.340 --> 00:18:08.020
Then we need to be able
to deploy our

00:18:08.020 --> 00:18:10.780
script as a web app.

00:18:10.780 --> 00:18:14.230
And that's the third part of our
story, which is we want to

00:18:14.230 --> 00:18:18.470
make it easy for you to creates
script projects, share

00:18:18.470 --> 00:18:21.230
them, organize your code,
and then, able to

00:18:21.230 --> 00:18:23.430
deploy them as web apps.

00:18:23.430 --> 00:18:28.770
Now, deploying scripts as web
apps is not something that is

00:18:28.770 --> 00:18:31.310
new to Apps Script.

00:18:31.310 --> 00:18:33.910
We have had this for awhile.

00:18:33.910 --> 00:18:37.430
And let me explain to you a
little bit about how web apps

00:18:37.430 --> 00:18:41.380
used to work, or work today
in Apps Script.

00:18:41.380 --> 00:18:45.030
So imagine if I have a
developer, and his name is

00:18:45.030 --> 00:18:49.130
Bob, and he writes an
awesome web app.

00:18:49.130 --> 00:18:53.720
And say this is an event
management web app where he

00:18:53.720 --> 00:18:57.610
wrote a web app, and all users
need to see the event

00:18:57.610 --> 00:19:00.500
calendar, or a list of events,
or something like that.

00:19:00.500 --> 00:19:03.180
So it uses Bob's data, Bob's
spreadsheet, all the event

00:19:03.180 --> 00:19:03.750
information.

00:19:03.750 --> 00:19:05.130
Everything is in there.

00:19:05.130 --> 00:19:07.890
And then, he writes the script,
and then converts that

00:19:07.890 --> 00:19:09.850
into a web app.

00:19:09.850 --> 00:19:11.470
And the user comes along--

00:19:11.470 --> 00:19:13.170
let's call him Sam--

00:19:13.170 --> 00:19:16.060
and Sam uses the web app.

00:19:16.060 --> 00:19:19.250
So in app script lingo, Sam
becomes the active user,

00:19:19.250 --> 00:19:20.990
meaning the user on
the keyboard.

00:19:20.990 --> 00:19:26.020
And when Sam accesses the web
app, the script runs.

00:19:26.020 --> 00:19:29.690
And the script runs as Bob,
because the script is supposed

00:19:29.690 --> 00:19:30.940
to access Bob's data.

00:19:30.940 --> 00:19:35.630
And Bob, in Apps Script terms,
is the effective user.

00:19:35.630 --> 00:19:37.400
And this worked pretty well,
but there were some

00:19:37.400 --> 00:19:39.460
limitations to it.

00:19:39.460 --> 00:19:40.340
It was pretty good.

00:19:40.340 --> 00:19:43.760
It was well-received, but
obviously, we wanted to do

00:19:43.760 --> 00:19:47.660
something even better.

00:19:47.660 --> 00:19:51.960
And that better is a new way
of deploying web apps.

00:19:51.960 --> 00:19:55.860
So let's go back to our diagram
a little bit, and try

00:19:55.860 --> 00:19:59.270
to understand what is this new
way of deploying web apps?

00:19:59.270 --> 00:20:05.090
So imagine if we had this app,
but now, instead of the script

00:20:05.090 --> 00:20:09.760
running as developer Bob, what
if it runs as Sam, and

00:20:09.760 --> 00:20:11.220
accesses Sam's data?

00:20:11.220 --> 00:20:14.340
Of course, with his permission,
authorization, and

00:20:14.340 --> 00:20:16.900
all security, everything
taken care of.

00:20:16.900 --> 00:20:21.180
But if the script could run as
Sam, the user, then all of a

00:20:21.180 --> 00:20:25.360
sudden, we have a whole host of
new use cases that open up

00:20:25.360 --> 00:20:28.550
with web apps written
using script.

00:20:28.550 --> 00:20:32.710
And in this case, the active
user, which was Sam, is also

00:20:32.710 --> 00:20:33.640
the effective user.

00:20:33.640 --> 00:20:37.325
The effective user is a
service-side concept in Apps

00:20:37.325 --> 00:20:40.780
Script, where it's the identity
under which a script

00:20:40.780 --> 00:20:42.860
runs on the server.

00:20:42.860 --> 00:20:46.030
So this is the new way of
deploying web apps.

00:20:49.410 --> 00:20:53.340
So what are some of the
advantages of this

00:20:53.340 --> 00:20:56.000
new type of web app?

00:20:56.000 --> 00:21:01.530
Well, the first advantage, as I
just demonstrated, was that

00:21:01.530 --> 00:21:04.710
now the scripts are more
powerful, because the web apps

00:21:04.710 --> 00:21:07.920
are powerful, because
they can ask

00:21:07.920 --> 00:21:10.720
access to user's resources.

00:21:10.720 --> 00:21:12.750
For example--

00:21:12.750 --> 00:21:15.110
and user here being the
user on the keyboard--

00:21:15.110 --> 00:21:18.240
user's calendar, spreadsheets,
and all that.

00:21:18.240 --> 00:21:19.945
And for DriveEye this
is really important.

00:21:22.710 --> 00:21:26.000
And the reason why this is
important is because when I,

00:21:26.000 --> 00:21:29.810
as a user of DriveEye, access
DriveEye, I want to DriveEye

00:21:29.810 --> 00:21:33.240
to show my folders.

00:21:33.240 --> 00:21:36.480
I want to place a subscription
on folders that belong to me,

00:21:36.480 --> 00:21:38.470
not to the developer.

00:21:38.470 --> 00:21:40.590
So this is really important.

00:21:40.590 --> 00:21:44.910
And the second reason why this
is useful is because now, you

00:21:44.910 --> 00:21:48.850
can get the identity
of the active user,

00:21:48.850 --> 00:21:49.960
the user on the keyboard.

00:21:49.960 --> 00:21:52.790
With the earlier type of web
apps, you could not get the

00:21:52.790 --> 00:21:55.080
identity of the active user.

00:21:55.080 --> 00:21:58.150
And the third and really
interesting thing here is that

00:21:58.150 --> 00:22:02.020
the script, when it runs as the
new type of web app, it

00:22:02.020 --> 00:22:03.720
uses the end user's quota.

00:22:03.720 --> 00:22:08.110
So as a developer, if you create
a really useful app,

00:22:08.110 --> 00:22:11.380
then it's not limited to just
your quota, or the use of the

00:22:11.380 --> 00:22:13.570
app is just not limited
to your quota.

00:22:13.570 --> 00:22:17.050
It is limited to the end user,
the user on the keyboard.

00:22:17.050 --> 00:22:21.000
So all these three factors make
it really compelling,

00:22:21.000 --> 00:22:25.690
that this type of new way of
deploying web app becomes

00:22:25.690 --> 00:22:26.940
pretty compelling.

00:22:28.870 --> 00:22:33.990
Again, just to clarify, the type
of web app that we had

00:22:33.990 --> 00:22:37.130
was the first type, which was
the active user is the end

00:22:37.130 --> 00:22:39.620
user, and developer is
the effective user.

00:22:39.620 --> 00:22:44.020
The new of deploying web apps
is active user and effective

00:22:44.020 --> 00:22:45.935
user are the same, which is
the user on the keyboard.

00:22:50.010 --> 00:22:52.320
So how do you deploy these
types of web apps?

00:22:52.320 --> 00:22:59.110
Well, as this dialogue really
shows, you can select the type

00:22:59.110 --> 00:23:05.595
of web app here, and select
whether you want the web app

00:23:05.595 --> 00:23:08.580
to run as you as the developer,
or as the user

00:23:08.580 --> 00:23:10.060
accessing the web app.

00:23:10.060 --> 00:23:13.350
And this simple selection
is the choice of

00:23:13.350 --> 00:23:15.350
deployment that you have.

00:23:15.350 --> 00:23:19.230
Not only that, as you are
familiar with, you can control

00:23:19.230 --> 00:23:23.040
access like who can access
this web app.

00:23:23.040 --> 00:23:27.670
And we added something even
better which was making it

00:23:27.670 --> 00:23:29.960
easy for you to productionize
your application.

00:23:29.960 --> 00:23:34.330
Which is, you can now save your
web apps as versions and

00:23:34.330 --> 00:23:36.090
then select the version.

00:23:36.090 --> 00:23:38.650
So why is that really useful?

00:23:38.650 --> 00:23:42.500
Well, the reason why this is
really useful is that you want

00:23:42.500 --> 00:23:45.750
one single, immutable URL
for your web apps.

00:23:45.750 --> 00:23:49.340
You don't want to change the
URL under your users.

00:23:49.340 --> 00:23:56.380
However you still want the
flexibility to test your app.

00:23:56.380 --> 00:23:59.020
You want to continue development
of your web app.

00:23:59.020 --> 00:24:02.750
So what you can do is you can
save your web apps as

00:24:02.750 --> 00:24:07.030
versions, and then assign the
version number to the URL.

00:24:07.030 --> 00:24:11.590
And whenever a user is accessing
your web app, then

00:24:11.590 --> 00:24:13.870
the assigned version script
will be executed.

00:24:13.870 --> 00:24:16.320
And you can continue developing
without impacting

00:24:16.320 --> 00:24:17.810
the user at all.

00:24:17.810 --> 00:24:22.740
So it makes it very easy to
productionize your web

00:24:22.740 --> 00:24:27.110
application, and it makes it
very easy for you to continue

00:24:27.110 --> 00:24:29.930
developing, testing, and
all the good stuff.

00:24:32.920 --> 00:24:35.560
So deploying web apps is easy.

00:24:35.560 --> 00:24:37.220
It's the same doGet.

00:24:37.220 --> 00:24:40.750
But here you see a little
teaser here, which is

00:24:40.750 --> 00:24:42.320
HTMLService.

00:24:42.320 --> 00:24:46.260
And I'm not going to delve in
more details, because you

00:24:46.260 --> 00:24:49.510
should attend tomorrow's
session at 2:45.

00:24:49.510 --> 00:24:52.790
But the whole idea is now you
can do a lot more with

00:24:52.790 --> 00:24:57.310
HTML5Service, and HTML,
JavaScript, CSS, and create

00:24:57.310 --> 00:24:58.798
very interesting web apps.

00:25:01.400 --> 00:25:03.910
One on the other interesting
parts of the DriveEye

00:25:03.910 --> 00:25:10.250
application is that because it's
going to send you alerts

00:25:10.250 --> 00:25:14.280
on activity on a particular
folder, it needs to create a

00:25:14.280 --> 00:25:16.610
trigger on behalf of the user.

00:25:16.610 --> 00:25:22.280
So the flow here is that when
the user of DriveEye first

00:25:22.280 --> 00:25:26.500
subscribes to a folder, the web
app creates a trigger on

00:25:26.500 --> 00:25:28.030
behalf of the user.

00:25:28.030 --> 00:25:31.010
And this is easy now because
we have that other way of

00:25:31.010 --> 00:25:32.510
deploying web apps.

00:25:32.510 --> 00:25:36.940
So as you can see, we use the
recently launched ScriptApp

00:25:36.940 --> 00:25:40.210
service to create a trigger
which runs for every five

00:25:40.210 --> 00:25:44.190
minutes, polls the user's drive,
and compares and sees

00:25:44.190 --> 00:25:47.090
if there are new files or not.

00:25:47.090 --> 00:25:50.290
And this is only possible
because now you can deploy new

00:25:50.290 --> 00:25:51.540
types of web apps.

00:25:56.070 --> 00:25:57.920
So how do users find
your web apps?

00:25:57.920 --> 00:26:00.190
Well, one way is that you
can create a URL and

00:26:00.190 --> 00:26:01.860
distribute a URL.

00:26:01.860 --> 00:26:06.130
But how many users can you
reach with your URL?

00:26:10.570 --> 00:26:13.790
And this brings us to the last
part of our story here, which

00:26:13.790 --> 00:26:17.880
is, we want to make it easy for
you to publish your web

00:26:17.880 --> 00:26:20.870
apps in a way that it
is discoverable.

00:26:20.870 --> 00:26:24.040
So publishing is not
new to Apps Script.

00:26:24.040 --> 00:26:27.260
We had the Script Gallery, but
it was more of a way of

00:26:27.260 --> 00:26:30.580
sharing code amongst
developers.

00:26:30.580 --> 00:26:33.310
It was not really a mechanism
where apps could be

00:26:33.310 --> 00:26:36.650
discovered, and stored
and installed.

00:26:36.650 --> 00:26:39.480
So that was good.

00:26:39.480 --> 00:26:42.310
It really serves its purpose,
but we want to do, again,

00:26:42.310 --> 00:26:44.650
something really, really good.

00:26:44.650 --> 00:26:48.160
And so we are launching
integration

00:26:48.160 --> 00:26:51.380
with Chrome Web Store.

00:26:51.380 --> 00:26:58.220
Now you can publish your web
apps in Chrome Web Store.

00:26:58.220 --> 00:27:03.000
So you ask, what is the big
deal about publishing in

00:27:03.000 --> 00:27:03.670
Chrome Web Store?

00:27:03.670 --> 00:27:06.820
Well, you have the URL, you
can publish it yourself.

00:27:06.820 --> 00:27:10.150
But what we have done is we have
made it really simple to

00:27:10.150 --> 00:27:11.740
publish in Chrome Web Store.

00:27:11.740 --> 00:27:15.200
It takes one click uploads
to Chrome web store.

00:27:15.200 --> 00:27:19.450
So we take care of the packaging
and all the initial

00:27:19.450 --> 00:27:21.440
upload part of the
Chrome Web Store.

00:27:21.440 --> 00:27:25.390
And also, we let you easily
verify your web apps, because

00:27:25.390 --> 00:27:27.990
your web apps will be running
on script.google.com.

00:27:27.990 --> 00:27:30.430
So it's really important
that you verify

00:27:30.430 --> 00:27:32.780
ownership of your web apps.

00:27:32.780 --> 00:27:36.320
So these are the two reasons,
I think, why it's pretty

00:27:36.320 --> 00:27:38.275
interesting that we have Chrome
Web Store integration

00:27:38.275 --> 00:27:39.990
for you guys.

00:27:39.990 --> 00:27:44.440
So it's, again, four simple
steps in making your web apps

00:27:44.440 --> 00:27:46.180
available in Chrome Web Store.

00:27:46.180 --> 00:27:48.630
First is verify your
ownership using

00:27:48.630 --> 00:27:49.780
Google Webmaster Central.

00:27:49.780 --> 00:27:53.770
And it's a, really, two-step
process guided from the script

00:27:53.770 --> 00:27:56.170
editor on script.google.com.

00:27:56.170 --> 00:27:59.210
So it's very straightforward
and simple.

00:27:59.210 --> 00:28:05.080
Then, what you do is you click
on Publish and register with

00:28:05.080 --> 00:28:08.300
Chrome Web Store, and you
get this dialogue here.

00:28:08.300 --> 00:28:11.300
And you can just click on
Register Web App, and we have

00:28:11.300 --> 00:28:14.240
taken care of all the packaging
requirements for

00:28:14.240 --> 00:28:14.950
Chrome Web Store.

00:28:14.950 --> 00:28:19.280
And then, you can go to Chrome
App Store and customize your

00:28:19.280 --> 00:28:21.780
listing, meaning you can provide
icons, screenshots,

00:28:21.780 --> 00:28:25.380
YouTube videos, [? tiles ?],
whatever it takes to make our

00:28:25.380 --> 00:28:29.280
app look so pretty that
everybody wants to install it.

00:28:29.280 --> 00:28:34.000
And once you've customized your
listing, you just publish

00:28:34.000 --> 00:28:35.230
and go live.

00:28:35.230 --> 00:28:36.110
And that's it.

00:28:36.110 --> 00:28:41.670
Your web apps are now available
in Chrome Web Store.

00:28:41.670 --> 00:28:44.120
So this really completes
our story.

00:28:44.120 --> 00:28:48.400
We want to make it easy for
you to create scripts from

00:28:48.400 --> 00:28:54.480
Drive or script.google.com, and
we want to make it easy

00:28:54.480 --> 00:28:57.080
for you to share scripts,
organize your code, use

00:28:57.080 --> 00:28:59.230
Library, use code.

00:28:59.230 --> 00:29:01.610
We want to make it easy
for you to deploy

00:29:01.610 --> 00:29:03.160
scripts as web apps.

00:29:03.160 --> 00:29:07.270
And eventually, allow you to
publish scripts in Chrome Web

00:29:07.270 --> 00:29:10.960
Store, so that millions
of users can benefit

00:29:10.960 --> 00:29:14.410
from your web app.

00:29:14.410 --> 00:29:15.730
So time for a quick demo.

00:29:20.500 --> 00:29:23.620
So this is a demo of DriveEye
and how it works.

00:29:23.620 --> 00:29:26.830
So let's get started.

00:29:26.830 --> 00:29:29.210
So I go to Chrome Web Store,
and you will see a

00:29:29.210 --> 00:29:30.620
listing like this.

00:29:30.620 --> 00:29:33.670
And I obviously did not
customize my listing really

00:29:33.670 --> 00:29:36.880
well, because there should be,
like, good screenshot, but

00:29:36.880 --> 00:29:39.990
this is how your listing
should look like.

00:29:39.990 --> 00:29:42.230
So once you go to the
Chrome web store,

00:29:42.230 --> 00:29:44.190
you say Add to Chrome.

00:29:44.190 --> 00:29:47.290
Then you will get a dialogue,
and then it will show up in

00:29:47.290 --> 00:29:51.980
your Chrome New Tab, next to my
little Angry Birds there.

00:29:51.980 --> 00:29:58.890
And once it shows up on my
Chrome New Tab, then I get an

00:29:58.890 --> 00:30:02.550
email that I have installed
this app.

00:30:02.550 --> 00:30:05.460
And what this email says is it
gives you, like, instruction

00:30:05.460 --> 00:30:08.820
about what DriveEye is, and
what authorizations have I

00:30:08.820 --> 00:30:11.060
granted, and things like that.

00:30:11.060 --> 00:30:11.690
It's pretty simple.

00:30:11.690 --> 00:30:13.310
It's just a reminder.

00:30:13.310 --> 00:30:18.720
So once you install the app, and
it shows up in the Chrome

00:30:18.720 --> 00:30:21.360
New Tab, then let's access
this app and have a

00:30:21.360 --> 00:30:22.110
little fun with it.

00:30:22.110 --> 00:30:26.010
Like, let's add a few folders
that I want to be alerted on.

00:30:26.010 --> 00:30:28.530
Of course, playoff bets is
really important, tax returns

00:30:28.530 --> 00:30:32.060
for some reason, and images.

00:30:32.060 --> 00:30:36.320
And I am an avid racquetball
player, so some racquetball

00:30:36.320 --> 00:30:37.310
league stuff.

00:30:37.310 --> 00:30:39.780
So now what I've done is I
have subscribed to a few

00:30:39.780 --> 00:30:42.480
folders that exist
in my drive.

00:30:42.480 --> 00:30:44.330
Now, but all of these
are really good.

00:30:44.330 --> 00:30:46.170
I'm interested in racquetball,
yeah, images,

00:30:46.170 --> 00:30:47.490
yeah, returns, of course.

00:30:47.490 --> 00:30:51.100
But what I'm really interested
in is cocktails.

00:30:51.100 --> 00:30:53.250
And I know a friend of
mine, I mean, he

00:30:53.250 --> 00:30:55.230
really is into cocktails.

00:30:55.230 --> 00:30:58.860
And I don't to miss out on any
new stuff that he does.

00:30:58.860 --> 00:31:04.420
So what I say is, hey, I
tell my friend Sam--

00:31:04.420 --> 00:31:06.480
he keeps a folder of
cocktail recipes--

00:31:06.480 --> 00:31:09.470
and I ask him, you should share
this folder with me.

00:31:09.470 --> 00:31:10.650
So I'm like, OK.

00:31:10.650 --> 00:31:15.000
So he does and he shares
this folder with me.

00:31:15.000 --> 00:31:18.380
And as you can see, he uses
the same sharing.

00:31:18.380 --> 00:31:21.010
It's folder sharing, a
Google Drive, and he

00:31:21.010 --> 00:31:22.330
shares it with me.

00:31:22.330 --> 00:31:25.680
Once he shares this folder
with me, I get an email.

00:31:25.680 --> 00:31:29.780
It's a standard Google Drive
email saying a folder is

00:31:29.780 --> 00:31:31.060
shared with me.

00:31:31.060 --> 00:31:32.820
And you can see Sam
shared this folder

00:31:32.820 --> 00:31:34.170
with cocktail recipes.

00:31:34.170 --> 00:31:36.830
And it has some cocktails
in there already.

00:31:36.830 --> 00:31:41.690
So I go back to my DriveEye and
add CocktailRecipes as the

00:31:41.690 --> 00:31:45.420
folder that I want to be alerted
on so that I will no

00:31:45.420 --> 00:31:49.710
longer now miss out on the
adventures of my friend Sam.

00:31:49.710 --> 00:31:51.960
And I know, well, he keeps
coming up with

00:31:51.960 --> 00:31:53.100
new cocktail recipes.

00:31:53.100 --> 00:31:55.270
So one day, something
will happen.

00:31:55.270 --> 00:31:56.810
And that did happen.

00:31:56.810 --> 00:32:00.530
So Sam here created two
new cocktails, right?

00:32:00.530 --> 00:32:02.350
So Bond in the Taj Mahal.

00:32:02.350 --> 00:32:05.530
It was like, OK, Taj Mahal is
in my hometown, so why not?

00:32:05.530 --> 00:32:06.610
Like, I really want this.

00:32:06.610 --> 00:32:07.990
And then Thirsty
in Monte Carlo.

00:32:07.990 --> 00:32:11.360
Well, gambling and cocktails,
that's an awesome combination.

00:32:11.360 --> 00:32:13.940
So I want that.

00:32:13.940 --> 00:32:17.220
So he selects these two,
and then drags

00:32:17.220 --> 00:32:20.010
them into this folder.

00:32:20.010 --> 00:32:24.890
So once he does that, in five
minutes, I get an email

00:32:24.890 --> 00:32:28.750
saying, hey, there are two files
that are added here in

00:32:28.750 --> 00:32:29.230
this folder.

00:32:29.230 --> 00:32:31.780
And now I get notified
on that folder.

00:32:31.780 --> 00:32:35.610
So it helps me keep an eye on
my drive, on my folders, and

00:32:35.610 --> 00:32:38.160
it helps me keep an eye on what
my friends are doing so

00:32:38.160 --> 00:32:41.190
that I don't miss out
on good stuff.

00:32:41.190 --> 00:32:44.470
So going back.

00:32:44.470 --> 00:32:48.650
So if I wanted to remember two
things out of this entire

00:32:48.650 --> 00:32:52.040
session, it's this slide
and then the next one.

00:32:52.040 --> 00:32:53.290
So this slide is
pretty simple.

00:32:53.290 --> 00:32:56.990
Six new main features
in Apps Script.

00:32:56.990 --> 00:32:59.130
Ability to create standalone
scripts.

00:32:59.130 --> 00:33:01.300
ScriptDB, you should definitely

00:33:01.300 --> 00:33:03.470
attend the session tomorrow.

00:33:03.470 --> 00:33:05.300
HTMLService, again, you should

00:33:05.300 --> 00:33:07.280
definitely attend that session.

00:33:07.280 --> 00:33:09.870
Sharing scripts in
a simple way.

00:33:09.870 --> 00:33:12.690
Deploying new types
of web apps.

00:33:12.690 --> 00:33:14.320
Integration with Chrome
app store.

00:33:14.320 --> 00:33:16.730
And the one last thing that
you need to remember is

00:33:16.730 --> 00:33:17.980
script.google.com.

00:33:20.680 --> 00:33:23.261
And I'm opening it
up for questions.

00:33:23.261 --> 00:33:32.099
[APPLAUSE]

00:33:32.099 --> 00:33:33.090
AUDIENCE: Hi.

00:33:33.090 --> 00:33:35.480
How will you handle
authorization and

00:33:35.480 --> 00:33:37.030
authentication?

00:33:37.030 --> 00:33:39.820
Do we need to enable the APIs
we're accessing on the

00:33:39.820 --> 00:33:42.380
Dashboard or something
like we usually do?

00:33:42.380 --> 00:33:45.620
For example, if I want to get
access to [? Contacts ?]

00:33:45.620 --> 00:33:48.390
Drive, need to enable
those APIs in

00:33:48.390 --> 00:33:50.480
the Developer Dashboard?

00:33:50.480 --> 00:33:54.200
SAURABH GUPTA: So if I
understand your question,

00:33:54.200 --> 00:33:57.270
you're asking how do you turn
on authorization and

00:33:57.270 --> 00:33:58.610
authentication on some
of the APIs?

00:33:58.610 --> 00:33:59.660
AUDIENCE: Uh-huh.

00:33:59.660 --> 00:34:00.420
SAURABH GUPTA: Awesome
question.

00:34:00.420 --> 00:34:03.470
So this is Google Apps Script.

00:34:03.470 --> 00:34:06.440
"Apps" in the name is
there for a reason.

00:34:06.440 --> 00:34:09.050
And that reason is that we take
care of security for all

00:34:09.050 --> 00:34:10.100
of your apps products.

00:34:10.100 --> 00:34:13.310
So if you are writing a script
and you're going to the script

00:34:13.310 --> 00:34:15.920
editor, you are already
logged in.

00:34:15.920 --> 00:34:19.620
And then when the script runs,
it runs under somebody's

00:34:19.620 --> 00:34:21.060
account, like security
contact.

00:34:21.060 --> 00:34:23.820
So it either runs as
you, or run as the

00:34:23.820 --> 00:34:25.159
active user, whatever.

00:34:25.159 --> 00:34:31.610
So a lot of that security, or
OAuth stuff is taken care of

00:34:31.610 --> 00:34:34.550
already, so you don't have to
deal with it when using

00:34:34.550 --> 00:34:37.420
default services
of Apps Script.

00:34:37.420 --> 00:34:40.872
All you have to do is just
authorize that, yeah, you want

00:34:40.872 --> 00:34:42.239
a script to access
some of these

00:34:42.239 --> 00:34:43.929
resources on your behalf.

00:34:43.929 --> 00:34:46.330
But as a developer, you
don't have to worry

00:34:46.330 --> 00:34:48.870
about OAuth at all.

00:34:48.870 --> 00:34:51.314
AUDIENCE: Thank you.

00:34:51.314 --> 00:34:52.216
SAURABH GUPTA: Hi.

00:34:52.216 --> 00:34:53.570
AUDIENCE: Hi.

00:34:53.570 --> 00:34:54.960
First, congratulations.

00:34:54.960 --> 00:34:56.625
This new feature
seems amazing.

00:34:56.625 --> 00:34:58.510
SAURABH GUPTA: Thank you.

00:34:58.510 --> 00:35:01.870
AUDIENCE: With these standalone
scripts, will we be

00:35:01.870 --> 00:35:06.460
able to manage these scripts
via Google Drive SDK?

00:35:06.460 --> 00:35:10.960
You know, change the
script code, and--?

00:35:10.960 --> 00:35:13.220
SAURABH GUPTA: So let me
understand your question.

00:35:13.220 --> 00:35:15.110
So what you're saying is you
want to manage these scripts

00:35:15.110 --> 00:35:16.610
using Drive SDK.

00:35:16.610 --> 00:35:18.615
Now, I think what you're talking
about is the Drive

00:35:18.615 --> 00:35:21.080
API, the Docs List API, right?

00:35:21.080 --> 00:35:21.355
AUDIENCE: Yeah.

00:35:21.355 --> 00:35:23.654
SAURABH GUPTA: So the answer
is, eventually.

00:35:23.654 --> 00:35:25.106
Yes.

00:35:25.106 --> 00:35:26.074
AUDIENCE: OK.

00:35:26.074 --> 00:35:27.240
AUDIENCE: Thanks for the talk.

00:35:27.240 --> 00:35:28.880
That was really exciting.

00:35:28.880 --> 00:35:29.930
A great talk.

00:35:29.930 --> 00:35:30.760
Thank you.

00:35:30.760 --> 00:35:31.250
Question.

00:35:31.250 --> 00:35:36.905
On the effective user being the
person using the script,

00:35:36.905 --> 00:35:39.270
are there any fallback
provisions for if they don't

00:35:39.270 --> 00:35:41.650
have a Google account, or don't
log in, where you could

00:35:41.650 --> 00:35:45.060
fall back to your resources
running it?

00:35:45.060 --> 00:35:46.100
Or is it just one
or the other?

00:35:46.100 --> 00:35:49.470
They have to have a Google
account, or if they don't--

00:35:49.470 --> 00:35:51.900
could you deploy an app that
uses their account if they've

00:35:51.900 --> 00:35:53.500
got one, or if they don't,
you fall back

00:35:53.500 --> 00:35:55.880
to something yourself?

00:35:55.880 --> 00:35:58.350
SAURABH GUPTA: So, again,
rephrasing your question, what

00:35:58.350 --> 00:36:03.270
you want is you want to have the
script access the account

00:36:03.270 --> 00:36:06.510
of the user who's using
the web app, right?

00:36:06.510 --> 00:36:07.190
AUDIENCE: Right.

00:36:07.190 --> 00:36:08.270
SAURABH GUPTA: So this
is the new thing

00:36:08.270 --> 00:36:09.190
that we launched today.

00:36:09.190 --> 00:36:11.630
AUDIENCE: Yeah, but if that
person doesn't have a Google

00:36:11.630 --> 00:36:13.655
account, they can't
access your--

00:36:13.655 --> 00:36:14.140
SAURABH GUPTA: So yeah.

00:36:14.140 --> 00:36:16.400
The person needs to have
a Google account.

00:36:16.400 --> 00:36:16.670
Yeah.

00:36:16.670 --> 00:36:20.100
You need to have a Google
account to create scripts and

00:36:20.100 --> 00:36:21.430
use scripts in a
meaningful way.

00:36:21.430 --> 00:36:23.440
AUDIENCE: OK.

00:36:23.440 --> 00:36:25.160
AUDIENCE: Yes.

00:36:25.160 --> 00:36:28.050
If the class that you're after
isn't available within Google

00:36:28.050 --> 00:36:30.880
Apps Script, and you have to
go after, for example, the

00:36:30.880 --> 00:36:35.600
Resources API, and now I have
to expose within my script a

00:36:35.600 --> 00:36:39.790
client key that's secret,
is there a way to--

00:36:39.790 --> 00:36:42.730
you mentioned view gives
you execute?

00:36:42.730 --> 00:36:44.930
Can I have execute
with no view?

00:36:44.930 --> 00:36:48.850
SAURABH GUPTA: So when you
deploy as web app, and it's

00:36:48.850 --> 00:36:53.010
the new type of web app that we
talked about, then you do

00:36:53.010 --> 00:36:56.750
not share your code.

00:36:56.750 --> 00:37:01.360
If the question is how do you
protect your secret key, then

00:37:01.360 --> 00:37:02.390
you can totally do that.

00:37:02.390 --> 00:37:05.880
But if you use that code as a
reusable library, then you

00:37:05.880 --> 00:37:07.660
have to share the library.

00:37:07.660 --> 00:37:10.030
And in that case, it
is not protected.

00:37:10.030 --> 00:37:11.660
AUDIENCE: Well, in order for
the code to run against the

00:37:11.660 --> 00:37:13.690
resource API, you have
to authenticate

00:37:13.690 --> 00:37:16.010
outside of Google Apps.

00:37:16.010 --> 00:37:18.780
So you have to actually make
a call like a URL fetch.

00:37:18.780 --> 00:37:19.350
SAURABH GUPTA: Right.

00:37:19.350 --> 00:37:21.750
AUDIENCE: So how would you
protect that code?

00:37:21.750 --> 00:37:24.100
SAURABH GUPTA: So there are
some challenges in there.

00:37:24.100 --> 00:37:26.620
And I can tell you that we
putting a lot of effort in

00:37:26.620 --> 00:37:31.394
improving the whole
URL fetch thing.

00:37:31.394 --> 00:37:33.854
AUDIENCE: [INAUDIBLE]

00:37:33.854 --> 00:37:34.346
Yeah.

00:37:34.346 --> 00:37:34.838
SAURABH GUPTA: So--

00:37:34.838 --> 00:37:36.088
AUDIENCE: [INAUDIBLE].

00:38:00.440 --> 00:38:01.910
AUDIENCE: To include use
of your own domain?

00:38:04.470 --> 00:38:06.420
OK, would that include users
of your own domain?

00:38:06.420 --> 00:38:07.670
AUDIENCE: [INAUDIBLE].

00:38:12.725 --> 00:38:15.940
AUDIENCE: Howdy, Congrats.

00:38:15.940 --> 00:38:19.730
We get a lot of utility out of
the UI elements that are in

00:38:19.730 --> 00:38:21.040
the spreadsheet environment.

00:38:21.040 --> 00:38:24.900
So the additional dropdown
menus, and whatnot.

00:38:24.900 --> 00:38:28.310
Can what you're describing
around deploying as a web app

00:38:28.310 --> 00:38:30.790
produce UIs in the Spreadsheet
environment, or are they

00:38:30.790 --> 00:38:32.500
purely standalone UIs?

00:38:32.500 --> 00:38:35.090
SAURABH GUPTA: So the new UI
is also in the Spreadsheet

00:38:35.090 --> 00:38:35.590
environment.

00:38:35.590 --> 00:38:37.090
Yeah.

00:38:37.090 --> 00:38:37.410
AUDIENCE: OK.

00:38:37.410 --> 00:38:40.320
So if I understand correctly,
if I'm a user, and I want to

00:38:40.320 --> 00:38:44.710
add functionality to a
spreadsheet, and have

00:38:44.710 --> 00:38:46.710
additional menus in my
spreadsheet, I would go to the

00:38:46.710 --> 00:38:49.890
web app, choose the spreadsheet
I want to install

00:38:49.890 --> 00:38:52.115
it on, and then from there
on out, it would--

00:38:52.115 --> 00:38:52.480
SAURABH GUPTA: Yeah.

00:38:52.480 --> 00:38:53.380
So--

00:38:53.380 --> 00:38:54.670
AUDIENCE: --function
identically to a

00:38:54.670 --> 00:38:55.790
container-bound script?

00:38:55.790 --> 00:38:58.260
SAURABH GUPTA: The distribution
of scripts into a

00:38:58.260 --> 00:38:59.990
spreadsheet remains the
same way through

00:38:59.990 --> 00:39:03.020
the gallery for now.

00:39:03.020 --> 00:39:05.040
The Chrome web store integration
piece that we have

00:39:05.040 --> 00:39:06.130
added is for web apps.

00:39:06.130 --> 00:39:08.730
But if you want to use, say,
HTMLService in your

00:39:08.730 --> 00:39:11.910
spreadsheet, then you're going
to write the script in the

00:39:11.910 --> 00:39:15.260
same way you wrote the script,
but use HTMLService, and then

00:39:15.260 --> 00:39:18.000
distribute either through
Gallery, or through a

00:39:18.000 --> 00:39:20.290
copy/paste mechanism and get
those scripts into your

00:39:20.290 --> 00:39:22.172
spreadsheet.

00:39:22.172 --> 00:39:24.330
Is that what your question?

00:39:24.330 --> 00:39:25.260
AUDIENCE: We'll talk
more, yeah.

00:39:25.260 --> 00:39:26.510
SAURABH GUPTA: OK.

00:39:29.310 --> 00:39:30.090
AUDIENCE: Great stuff.

00:39:30.090 --> 00:39:32.820
Congratulations to you
and your team.

00:39:32.820 --> 00:39:36.050
My question is, if you actually
share a script with a

00:39:36.050 --> 00:39:40.470
bunch of people with an Apps
account, is that script also--

00:39:40.470 --> 00:39:43.410
you know how in sites, you
can also insert scripts--

00:39:43.410 --> 00:39:48.490
is that the same sharings if
you've shared with the Apps

00:39:48.490 --> 00:39:50.430
account user, basically
they can add it to

00:39:50.430 --> 00:39:52.220
their sites as well?

00:39:52.220 --> 00:39:55.760
SAURABH GUPTA: So scripts that
can be added in a site's page

00:39:55.760 --> 00:39:57.510
are container-bound scripts.

00:39:57.510 --> 00:40:00.570
They have to be created
from a Google site.

00:40:00.570 --> 00:40:03.220
Now, what you can do is, though,
say, if you have some

00:40:03.220 --> 00:40:07.170
reusable code, and you want to
use it in different scripts in

00:40:07.170 --> 00:40:13.370
a site's page, then you can
create a standalone project in

00:40:13.370 --> 00:40:16.160
your drive and, create
a library.

00:40:16.160 --> 00:40:19.770
And then use that library in a
script that belongs to a site.

00:40:19.770 --> 00:40:23.850
So what you do is you basically
factor your code and

00:40:23.850 --> 00:40:27.620
take out the reusable parts of
it, and have that code live as

00:40:27.620 --> 00:40:30.140
a standalone project,
and then use it

00:40:30.140 --> 00:40:32.140
everywhere as a library.

00:40:32.140 --> 00:40:32.420
AUDIENCE: OK.

00:40:32.420 --> 00:40:33.010
Got it.

00:40:33.010 --> 00:40:35.870
And is the code available
for this demo?

00:40:35.870 --> 00:40:36.445
SAURABH GUPTA: Yes.

00:40:36.445 --> 00:40:38.470
AUDIENCE: We really just wanted
to build something like

00:40:38.470 --> 00:40:39.720
that, so I kind of want
to take this code.

00:40:39.720 --> 00:40:40.100
SAURABH GUPTA: Yes.

00:40:40.100 --> 00:40:43.800
So we will definitely link to
the store item, and as well as

00:40:43.800 --> 00:40:46.360
the code, and when the
announcement goes out

00:40:46.360 --> 00:40:46.650
[INAUDIBLE]

00:40:46.650 --> 00:40:46.930
AUDIENCE: Cool.

00:40:46.930 --> 00:40:48.180
Thank you.

00:40:49.830 --> 00:40:51.290
SAURABH GUPTA: Well, if there
are no more questions, thank

00:40:51.290 --> 00:40:51.790
you, everyone.

00:40:51.790 --> 00:40:52.610
Thanks for coming.

00:40:52.610 --> 00:40:55.490
And we are here to help on our
office hours and everything.

00:40:55.490 --> 00:40:56.740
Thank you.

