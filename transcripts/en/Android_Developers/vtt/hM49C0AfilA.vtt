WEBVTT
Kind: captions
Language: en

00:00:08.440 --> 00:00:10.191
Hi there, my name
is Katherine Kuan.

00:00:10.191 --> 00:00:12.690
I'm the developer advocate on
the Google Developer Relations

00:00:12.690 --> 00:00:13.440
team.

00:00:13.440 --> 00:00:15.480
This video explains in
a little more detail

00:00:15.480 --> 00:00:17.490
about the Valentine's
Day app that was first

00:00:17.490 --> 00:00:20.050
introduced in the previous
video of the playlist.

00:00:20.050 --> 00:00:22.830
Be sure to watch that one
first, if you haven't already.

00:00:22.830 --> 00:00:25.455
So to pick up where
we left off, you

00:00:25.455 --> 00:00:27.310
are customizing
this app containing

00:00:27.310 --> 00:00:29.980
a list of coupons
for your Valentine.

00:00:29.980 --> 00:00:31.910
We'll take a look,
now, under the hood,

00:00:31.910 --> 00:00:35.900
and see how the views for
one coupon is constructed.

00:00:35.900 --> 00:00:38.870
For each coupon, we start
with a relative layout.

00:00:38.870 --> 00:00:40.541
Then we place an
ImageView inside of it,

00:00:40.541 --> 00:00:42.290
which stretches the
whole width and height

00:00:42.290 --> 00:00:44.470
of the relative layout.

00:00:44.470 --> 00:00:46.790
You proceed by adding
a View at the bottom

00:00:46.790 --> 00:00:48.320
with a slight
gradient, so the text

00:00:48.320 --> 00:00:50.570
doesn't blend in with the photo.

00:00:50.570 --> 00:00:52.860
On top of the gradient
overlay we then

00:00:52.860 --> 00:00:55.910
add the title of the coupon.

00:00:55.910 --> 00:00:59.870
The last View is a TextView
containing the description.

00:00:59.870 --> 00:01:03.390
And there you have
the completed View.

00:01:03.390 --> 00:01:05.170
We took the individual
coupon Views

00:01:05.170 --> 00:01:07.226
and then laid them
out into a grid View.

00:01:07.226 --> 00:01:08.600
The number of
columns in the grid

00:01:08.600 --> 00:01:11.300
adapts based on screen
width for optimal viewing

00:01:11.300 --> 00:01:14.260
of the app on all device sizes.

00:01:14.260 --> 00:01:16.840
On phones like the Nexus 5,
it will be a single column

00:01:16.840 --> 00:01:19.110
grid, which is
essentially a list.

00:01:19.110 --> 00:01:23.110
And it's the same in both
portrait and landscape mode.

00:01:23.110 --> 00:01:26.340
On tablets like Nexus 7, it
will be two columns in portrait

00:01:26.340 --> 00:01:30.060
but three columns in landscape.

00:01:30.060 --> 00:01:32.520
On tablets like Nexus 10,
we have a three column grid

00:01:32.520 --> 00:01:34.577
in landscape and portrait mode.

00:01:34.577 --> 00:01:36.785
For information on how the
resource folders are named

00:01:36.785 --> 00:01:40.184
and set up, see
the provided link.

00:01:40.184 --> 00:01:41.850
Keep in mind that
when you're displaying

00:01:41.850 --> 00:01:45.060
all these images on such
high resolution screens,

00:01:45.060 --> 00:01:47.630
you may consider
sizing down your images

00:01:47.630 --> 00:01:49.169
so that when they're
all loaded up,

00:01:49.169 --> 00:01:50.960
and the user is scrolling
through the list,

00:01:50.960 --> 00:01:52.950
they don't run out of memory.

00:01:52.950 --> 00:01:54.510
If you still have
performance issues,

00:01:54.510 --> 00:01:58.640
then you can read more about
bitmaps with this link.

00:01:58.640 --> 00:02:01.230
Now let's talk about how the
sharing part of the app works.

00:02:01.230 --> 00:02:04.240
When the user taps on a coupon,
we build up a share intent

00:02:04.240 --> 00:02:06.190
using the share compact class.

00:02:06.190 --> 00:02:08.710
And the user can pick
which app to share, too.

00:02:08.710 --> 00:02:12.020
The intent is composed of text
from the title and description

00:02:12.020 --> 00:02:16.330
of the coupon, a content
URI that maps to the image,

00:02:16.330 --> 00:02:19.030
and a type for the image.

00:02:19.030 --> 00:02:21.590
You'll notice that we don't
pass the image file directly,

00:02:21.590 --> 00:02:24.030
but rather a content
URI that the framework

00:02:24.030 --> 00:02:26.450
uses to find the image.

00:02:26.450 --> 00:02:28.340
In this case, the
Hangouts app, will

00:02:28.340 --> 00:02:30.550
try to figure out
what the URI points to

00:02:30.550 --> 00:02:32.200
and it will reach
our asset provider

00:02:32.200 --> 00:02:36.290
class, which then translates
this URI into a file descriptor

00:02:36.290 --> 00:02:39.260
with the right permissions
to access the image.

00:02:39.260 --> 00:02:42.020
And that's how the
draft image ends up

00:02:42.020 --> 00:02:46.010
in the Hangouts app within
the conversation thread.

00:02:46.010 --> 00:02:49.140
The asset provider is an
example of a content provider.

00:02:49.140 --> 00:02:52.080
Content providers can be
used to access a database,

00:02:52.080 --> 00:02:54.430
or files like in our case.

00:02:54.430 --> 00:02:55.960
This link shows
you where you can

00:02:55.960 --> 00:02:59.076
get more info on
content providers.

00:02:59.076 --> 00:03:01.120
So that's the overview
of everything.

00:03:01.120 --> 00:03:04.870
Hope that helps, and good
luck with building your app.

