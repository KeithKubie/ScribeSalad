WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.964
[TITLE MUSIC PLAYING]

00:00:05.432 --> 00:00:06.890
ALAN VIVERETTE:
I'm Alan Viverette.

00:00:06.890 --> 00:00:09.814
I'm the tech lead for the
Android Support Library.

00:00:09.814 --> 00:00:11.230
AURIMAS LIUTIKAS:
Hi, I'm Aurimas,

00:00:11.230 --> 00:00:14.128
and I'm a software engineer
on Android Support Library.

00:00:14.128 --> 00:00:16.419
KATHY KAM: Hi, and I'm Kathy
Kam, the technical program

00:00:16.419 --> 00:00:18.010
manager for the support library.

00:00:18.010 --> 00:00:18.550
ALAN VIVERETTE: And
today we're going

00:00:18.550 --> 00:00:21.010
to be talking about what
is new in the latest

00:00:21.010 --> 00:00:23.009
version of the Android
Support Library,

00:00:23.009 --> 00:00:25.300
as well as some new things
that you can look forward to

00:00:25.300 --> 00:00:27.140
in the future.

00:00:27.140 --> 00:00:29.764
And on this beautiful spring day
in Mountain View, California,

00:00:29.764 --> 00:00:32.180
we're going to start with a
little bit of spring cleaning.

00:00:32.180 --> 00:00:34.130
We're going to talk about
some technical debt that

00:00:34.130 --> 00:00:35.963
has been building up
in the Support Library.

00:00:38.440 --> 00:00:41.770
So we're on Twitter,
we're on Stack Overflow,

00:00:41.770 --> 00:00:42.910
we're on Reddit--

00:00:42.910 --> 00:00:44.860
maybe we're on Reddit
a little bit too much--

00:00:44.860 --> 00:00:47.530
but we noticed some basic
aspects of the support library

00:00:47.530 --> 00:00:50.320
there were a little
bit, let's say, messy.

00:00:50.320 --> 00:00:52.775
So we've reached out and
spoken with developers,

00:00:52.775 --> 00:00:54.400
and tried to find
out some ways that we

00:00:54.400 --> 00:00:56.950
can improve the basics
of Support Library

00:00:56.950 --> 00:01:00.870
and lay a strong
foundation for future work.

00:01:00.870 --> 00:01:04.120
And we got a lot of good
feedback, some very high-level,

00:01:04.120 --> 00:01:06.020
some very specific.

00:01:06.020 --> 00:01:08.950
We know about the issues with
showing and hiding the IME,

00:01:08.950 --> 00:01:12.170
but we drilled
down to the basics.

00:01:12.170 --> 00:01:14.450
We got feedback on our
Maven packaging, so

00:01:14.450 --> 00:01:16.765
our artifact and package names.

00:01:16.765 --> 00:01:19.360
Our Java packages have
become a little bit

00:01:19.360 --> 00:01:23.020
confusing as support
library has aged,

00:01:23.020 --> 00:01:25.870
and in general, we've built
up a lot of technical debt.

00:01:25.870 --> 00:01:27.760
So like last year,
we're going to talk

00:01:27.760 --> 00:01:31.030
about what's old in the
Android Support Library first.

00:01:33.550 --> 00:01:37.690
So we started in
2011 with Support v4,

00:01:37.690 --> 00:01:39.190
and as I'm sure
everyone here knows,

00:01:39.190 --> 00:01:40.780
that provided
backward compatibility

00:01:40.780 --> 00:01:43.990
for devices running SDK 4,
the first public release

00:01:43.990 --> 00:01:45.160
of Android.

00:01:45.160 --> 00:01:46.540
And we grew.

00:01:46.540 --> 00:01:50.320
We gained libraries
for watch components,

00:01:50.320 --> 00:01:57.490
car components, testing,
support for SDK 13, 4 11.

00:01:57.490 --> 00:02:02.320
So we have a lot more than just
backwards compatibility now.

00:02:02.320 --> 00:02:05.320
But we've still got
these artifact names.

00:02:05.320 --> 00:02:06.799
So we've got Support v4--

00:02:06.799 --> 00:02:08.090
everyone's familiar with that--

00:02:08.090 --> 00:02:09.550
Support v13.

00:02:09.550 --> 00:02:11.240
Who knows what's in Support v13?

00:02:14.220 --> 00:02:16.750
Literally less than 10 people.

00:02:16.750 --> 00:02:19.900
Aurimas knows.

00:02:19.900 --> 00:02:23.820
So Support v13 at this
moment contains nothing,

00:02:23.820 --> 00:02:26.970
because our minimum SDK
for everything is 14.

00:02:26.970 --> 00:02:29.582
v13 just redirects to v4.

00:02:29.582 --> 00:02:32.440
v4 actually redirects to a
bunch of other components.

00:02:32.440 --> 00:02:35.430
These are both just
umbrella artifacts on Maven.

00:02:35.430 --> 00:02:39.510
So why do we have all of
these weird versioning names

00:02:39.510 --> 00:02:42.210
in our Maven artifacts
and in our package names?

00:02:42.210 --> 00:02:44.290
Well, they're kind
of hard to change,

00:02:44.290 --> 00:02:45.440
but these are confusing.

00:02:45.440 --> 00:02:47.148
It's not a great place
to start if you're

00:02:47.148 --> 00:02:50.060
new to Android development.

00:02:50.060 --> 00:02:52.870
We also have a lot of versions
of all of these libraries.

00:02:52.870 --> 00:02:56.520
So Recommendation is something
that was added back in 2003

00:02:56.520 --> 00:02:58.500
and hasn't changed
a lot since then,

00:02:58.500 --> 00:03:00.990
so we have 30
versions of basically

00:03:00.990 --> 00:03:02.880
the exact same library.

00:03:02.880 --> 00:03:06.760
And what does the
versioning scheme mean here?

00:03:06.760 --> 00:03:11.220
Well, 24 means it was
released at Google I/O when

00:03:11.220 --> 00:03:13.350
SDK 24 came out.

00:03:13.350 --> 00:03:16.590
We had an alpha 1 corresponding
with the first public release,

00:03:16.590 --> 00:03:21.150
dp 1, alpha 2 for dp
2, beta 1 for dp 3,

00:03:21.150 --> 00:03:22.590
but it doesn't
make a lot of sense

00:03:22.590 --> 00:03:26.140
for us to be corresponding
to just the I/O releases.

00:03:26.140 --> 00:03:28.500
Wouldn't it be great if we
had alpha and beta releases

00:03:28.500 --> 00:03:30.829
for every version of
the support library,

00:03:30.829 --> 00:03:32.370
and wouldn't it be
great if we didn't

00:03:32.370 --> 00:03:34.380
have to do that for
every single library,

00:03:34.380 --> 00:03:36.560
even if it hadn't changed?

00:03:36.560 --> 00:03:40.870
So you may have seen like
a 24.0 that should have

00:03:40.870 --> 00:03:42.120
had a little bit more testing.

00:03:42.120 --> 00:03:44.340
Maybe there should have
been a beta 2 there.

00:03:44.340 --> 00:03:48.690
Or maybe you pulled in 25.4
and found some bugs that really

00:03:48.690 --> 00:03:49.860
should have been in alpha.

00:03:49.860 --> 00:03:52.380
So we've been doing a
lot better about testing,

00:03:52.380 --> 00:03:55.740
but wouldn't it be great if our
dot-0 releases weren't still

00:03:55.740 --> 00:03:56.430
alpha quality.

00:03:59.090 --> 00:04:00.860
So today we're going
to focus on fixing

00:04:00.860 --> 00:04:07.010
how we structure our libraries,
how we handle changes to them,

00:04:07.010 --> 00:04:08.630
and how we ship
them to developers.

00:04:08.630 --> 00:04:13.090
And we're using this to form
the foundation for Jetpack,

00:04:13.090 --> 00:04:15.440
and we're calling it
Android Extension Libraries,

00:04:15.440 --> 00:04:19.910
or AndroidX for short.

00:04:19.910 --> 00:04:21.700
So welcome to what's
new in AndroidX.

00:04:21.700 --> 00:04:25.090
We'll be talking about
foundational changes,

00:04:25.090 --> 00:04:28.150
new features, and what you can
expect from us in the future.

00:04:28.150 --> 00:04:30.460
First, though, I'd like to
talk about the relationship

00:04:30.460 --> 00:04:33.100
between Jetpack, which
everyone may remember

00:04:33.100 --> 00:04:36.670
from the keynote, and AndroidX.

00:04:36.670 --> 00:04:40.600
So Jetpack is a set of
guidance, recommended libraries,

00:04:40.600 --> 00:04:43.120
and tools, and this
is going to teach you

00:04:43.120 --> 00:04:44.860
how to create good apps.

00:04:44.860 --> 00:04:47.339
This may include libraries
that are in AndroidX.

00:04:47.339 --> 00:04:48.880
This may eventually
include libraries

00:04:48.880 --> 00:04:50.440
that aren't in AndroidX.

00:04:50.440 --> 00:04:52.360
And as guidance
changes and evolves,

00:04:52.360 --> 00:04:54.730
you may see that some
things in AndroidX

00:04:54.730 --> 00:04:57.520
become deprecated and are no
longer part of the Jetpack

00:04:57.520 --> 00:04:58.960
recommendations.

00:04:58.960 --> 00:05:01.710
Also, it's got this cute logo.

00:05:01.710 --> 00:05:04.600
AndroidX, on the other hand,
is the libraries themselves.

00:05:04.600 --> 00:05:06.270
These are guarantees
about versioning,

00:05:06.270 --> 00:05:08.520
API surface,
dependency structure,

00:05:08.520 --> 00:05:10.980
and we do not have a cute logo.

00:05:10.980 --> 00:05:12.510
So let's dive into details.

00:05:12.510 --> 00:05:14.260
What exactly is
going to be changing?

00:05:16.870 --> 00:05:20.560
We're going to have logical,
smaller, more scoped artifacts.

00:05:20.560 --> 00:05:22.900
So for example, if you're
looking for a ViewPager,

00:05:22.900 --> 00:05:25.660
it's going to be in the
ViewPager artifact rather than

00:05:25.660 --> 00:05:27.490
Support v4.

00:05:27.490 --> 00:05:29.350
You may remember
the Support v4 split

00:05:29.350 --> 00:05:31.630
that we did last year
where we split out

00:05:31.630 --> 00:05:34.390
to core UI and a number
of other artifacts.

00:05:34.390 --> 00:05:37.570
We've done that again this year,
so we have smaller artifacts.

00:05:37.570 --> 00:05:40.171
If you need ViewPager, you
just pull in ViewPager.

00:05:40.171 --> 00:05:41.920
You don't pull in a
bunch of other widgets

00:05:41.920 --> 00:05:43.480
that you may not need.

00:05:43.480 --> 00:05:45.520
This is of course
non-breaking like the split

00:05:45.520 --> 00:05:46.600
that we did last year.

00:05:46.600 --> 00:05:49.540
So if you pull in
support v4, you still

00:05:49.540 --> 00:05:51.370
get all of that
umbrella of libraries.

00:05:51.370 --> 00:05:52.930
If you pull in
core UI, you still

00:05:52.930 --> 00:05:54.697
get ViewPager and
everything else.

00:05:54.697 --> 00:05:56.530
But you also have the
option of just pulling

00:05:56.530 --> 00:05:57.970
in exactly what you need.

00:06:01.240 --> 00:06:03.420
So here's the split
of the libraries.

00:06:03.420 --> 00:06:04.620
This is just a sample.

00:06:04.620 --> 00:06:06.690
So you'll see that
support-compat has been

00:06:06.690 --> 00:06:09.220
broken down into collections.

00:06:09.220 --> 00:06:10.410
This is a pure Java library.

00:06:10.410 --> 00:06:12.540
It's a JAR instead of an AAR.

00:06:12.540 --> 00:06:14.130
It has no resources.

00:06:14.130 --> 00:06:16.650
You can use it with
host tests, because it

00:06:16.650 --> 00:06:20.700
doesn't have any dependencies
on the Android package.

00:06:20.700 --> 00:06:24.240
Core is the backwards
compatibility

00:06:24.240 --> 00:06:27.240
that you're used
to from Support v4.

00:06:27.240 --> 00:06:30.000
You're going to see less of the
compat moniker in the future,

00:06:30.000 --> 00:06:34.890
as AndroidX is becoming the
primary development surface

00:06:34.890 --> 00:06:37.596
for a lot of framework APIs.

00:06:37.596 --> 00:06:40.200
So here you can see if you
need swipe refresh layout,

00:06:40.200 --> 00:06:41.370
you pull in exactly that.

00:06:41.370 --> 00:06:45.395
You don't get anything
that you didn't need.

00:06:45.395 --> 00:06:48.240
We're also moving to versioning
that makes more sense.

00:06:48.240 --> 00:06:50.090
So instead of
monolithic releases

00:06:50.090 --> 00:06:51.890
that are tied to
Google I/O, we're

00:06:51.890 --> 00:06:55.070
going to reset from
28.0.0 to 1.0.0,

00:06:55.070 --> 00:06:58.850
and the major version number
now actually means something.

00:06:58.850 --> 00:07:01.640
So previously, we would
break binary compatibility

00:07:01.640 --> 00:07:04.034
on any minor version bump.

00:07:04.034 --> 00:07:05.450
And if you're using
a library that

00:07:05.450 --> 00:07:08.090
depends on a specific
version of Support library,

00:07:08.090 --> 00:07:09.620
this can be really problematic.

00:07:09.620 --> 00:07:11.600
You may not even find
out until runtime

00:07:11.600 --> 00:07:14.240
that some method signature
that a library depends on

00:07:14.240 --> 00:07:15.560
has changed.

00:07:15.560 --> 00:07:18.080
Our move to strict semantic
versioning with AndroidX

00:07:18.080 --> 00:07:20.300
means that you can always
expect the major version

00:07:20.300 --> 00:07:23.190
number to indicate
binary compatibility.

00:07:23.190 --> 00:07:30.530
Anything with a 1.4 dependency
on a library, for example,

00:07:30.530 --> 00:07:36.050
would be compatible with 1.5,
1.6, all the way up until 2.0.

00:07:36.050 --> 00:07:38.420
We're also going to be doing
per-artifact versioning

00:07:38.420 --> 00:07:41.030
and release, so instead
of a monolithic release,

00:07:41.030 --> 00:07:43.540
if we have a bug fix
for RecyclerView,

00:07:43.540 --> 00:07:46.790
we release a dot-1 of just
the RecyclerView library,

00:07:46.790 --> 00:07:48.560
you only have to pull
in one new artifact,

00:07:48.560 --> 00:07:51.242
and if you don't need it,
you don't have to pull it in.

00:07:51.242 --> 00:07:52.700
So it's going to
be very low effort

00:07:52.700 --> 00:07:56.256
on the part of the developer

00:07:56.256 --> 00:07:56.882
All right.

00:07:56.882 --> 00:07:58.340
And we want to make
it easy to know

00:07:58.340 --> 00:07:59.780
what's inside each artifact.

00:07:59.780 --> 00:08:02.960
So as I mentioned, our Maven
artifacts are now finer scopes.

00:08:02.960 --> 00:08:05.150
They correspond to
features instead

00:08:05.150 --> 00:08:11.720
of very broad swaths of, for
example, all of support v4.

00:08:11.720 --> 00:08:13.870
We have a consistent
scheme of AndroidX

00:08:13.870 --> 00:08:17.300
dot feature dot package
and class, according

00:08:17.300 --> 00:08:21.200
to layer and functionality,
and our Maven naming scheme

00:08:21.200 --> 00:08:21.800
reflects this.

00:08:21.800 --> 00:08:24.420
So our group IDs are going
to be AndroidX dot feature.

00:08:24.420 --> 00:08:27.560
This will correspond
directly to the Java package.

00:08:27.560 --> 00:08:29.969
The artifact ID
will be the feature,

00:08:29.969 --> 00:08:31.760
and if there is a
sub-feature, for example,

00:08:31.760 --> 00:08:36.380
RecyclerView selection, you will
see AndroidX dot RecyclerView,

00:08:36.380 --> 00:08:40.220
colon, RecyclerView,
dash, selection.

00:08:40.220 --> 00:08:41.809
You also notice
that we've moved all

00:08:41.809 --> 00:08:48.260
of the v7, v4 explicit
backwards compatibility

00:08:48.260 --> 00:08:51.860
or explicit compile
SDK requirements.

00:08:51.860 --> 00:08:55.370
So our min SDK requirement
is built into the Android

00:08:55.370 --> 00:08:58.190
manifests for these
libraries, and we also

00:08:58.190 --> 00:09:00.730
make heavy use of the
requires API annotations.

00:09:00.730 --> 00:09:05.340
So you may run into methods
that may return a new object.

00:09:05.340 --> 00:09:07.840
So you may see something that
returns compat, something that

00:09:07.840 --> 00:09:09.277
returns the actual
object, and you

00:09:09.277 --> 00:09:11.110
can call that if you're
on a newer platform.

00:09:14.730 --> 00:09:15.450
All right.

00:09:15.450 --> 00:09:17.590
So let's dive into
an example of that.

00:09:17.590 --> 00:09:20.130
Here's an example
of some libraries

00:09:20.130 --> 00:09:22.500
that you may already be
using redefining everything

00:09:22.500 --> 00:09:24.360
under the AndroidX
top-level package.

00:09:24.360 --> 00:09:26.670
So everything that was
in compat Android Support

00:09:26.670 --> 00:09:28.440
is now in Android
Extension Library.

00:09:28.440 --> 00:09:31.470
Everything from android.arch
is now an Android Extension

00:09:31.470 --> 00:09:32.644
Library.

00:09:32.644 --> 00:09:34.560
For the most part, we're
preserving the names,

00:09:34.560 --> 00:09:36.630
but you'll see some
simplifications.

00:09:36.630 --> 00:09:38.520
So
android.arch.persistence.room,

00:09:38.520 --> 00:09:41.190
for example, is now just room.

00:09:41.190 --> 00:09:44.770
When you're looking for room,
you can find it very quickly.

00:09:44.770 --> 00:09:48.550
Let's dig down on Support compat
and card view, v7 specifically,

00:09:48.550 --> 00:09:50.920
and take a look at
some of the classes.

00:09:50.920 --> 00:09:56.620
So build compat has moved
from an explicit v4 support

00:09:56.620 --> 00:09:59.530
to Android core OS build
compat, and in the future,

00:09:59.530 --> 00:10:01.930
you'll actually see a lot
less of the compat suffix

00:10:01.930 --> 00:10:03.220
on classes.

00:10:03.220 --> 00:10:06.576
Card view v7 is now
just cardview.widgets,

00:10:06.576 --> 00:10:07.700
and the class is card view.

00:10:07.700 --> 00:10:09.200
You'll find other
supporting classes

00:10:09.200 --> 00:10:13.050
in cardview.util, et cetera.

00:10:13.050 --> 00:10:16.090
So hopefully this
isn't too shocking.

00:10:16.090 --> 00:10:19.362
I think this is a very
long-awaited refactoring

00:10:19.362 --> 00:10:21.570
that we've really been
wanting to do for a long time,

00:10:21.570 --> 00:10:24.090
and you might be wondering,
how do I get that?

00:10:24.090 --> 00:10:25.602
So we'll hand it
over to Aurimas.

00:10:25.602 --> 00:10:27.060
He's going to walk
you through what

00:10:27.060 --> 00:10:30.240
it looks like to migrate
your application.

00:10:30.240 --> 00:10:31.490
AURIMAS LIUTIKAS: Hello there.

00:10:31.490 --> 00:10:32.140
All right.

00:10:32.140 --> 00:10:33.170
Thanks, Alan.

00:10:33.170 --> 00:10:35.990
So I will walk you guys
through our migration story

00:10:35.990 --> 00:10:40.320
and how you want to get to
the AndroidX library usage.

00:10:40.320 --> 00:10:43.080
So first things first, if
you are using Android Studio,

00:10:43.080 --> 00:10:45.000
we will be providing
an automated tool

00:10:45.000 --> 00:10:46.985
for migrating over.

00:10:46.985 --> 00:10:49.110
This tool is available
starting with Android Studio

00:10:49.110 --> 00:10:52.830
3.2 Canary 14 that
shipped yesterday.

00:10:52.830 --> 00:11:02.490
This automated tool will be
in the existing Refactor menu

00:11:02.490 --> 00:11:04.950
that you probably--
hopefully --love.

00:11:04.950 --> 00:11:07.170
And what we added is we
added a new option that's

00:11:07.170 --> 00:11:08.910
called Refactor to AndroidX.

00:11:08.910 --> 00:11:11.400
And this, with a single
click, will go and identify

00:11:11.400 --> 00:11:14.700
all the usages of Android
Support Library old classes,

00:11:14.700 --> 00:11:17.200
and it will pull them
up in the review pane,

00:11:17.200 --> 00:11:19.560
where you're going to be
able to see what has changed,

00:11:19.560 --> 00:11:21.810
and what we're about
to migrate for you.

00:11:21.810 --> 00:11:24.750
And after review, you
click, Do Refactor,

00:11:24.750 --> 00:11:26.520
and we'll go ahead
and refactor it.

00:11:26.520 --> 00:11:28.830
And what this will handle--
it will go and handle

00:11:28.830 --> 00:11:31.960
your source code, including
your constant classes.

00:11:31.960 --> 00:11:33.930
It will handle
simple build scripts

00:11:33.930 --> 00:11:36.210
unless you have something
more complex, in which case,

00:11:36.210 --> 00:11:38.240
we're going to publish
maps of old artifact

00:11:38.240 --> 00:11:41.490
to the new artifact so you can
do the migration in a slightly

00:11:41.490 --> 00:11:43.250
more manual way.

00:11:43.250 --> 00:11:46.480
And migration will also handle
resources such as your layout

00:11:46.480 --> 00:11:46.980
files.

00:11:50.410 --> 00:11:53.920
And then finally, but not least,
what you're going to have is

00:11:53.920 --> 00:11:56.320
we're going to handle
migration of binary

00:11:56.320 --> 00:11:59.380
dependencies for AARs and JARs.

00:11:59.380 --> 00:12:01.831
We know that many of you use
third-party libraries that

00:12:01.831 --> 00:12:03.580
depend on Support
Library, and it could be

00:12:03.580 --> 00:12:05.770
Glide or many other libraries.

00:12:05.770 --> 00:12:09.790
So to help you with that, we
wrote a tool called Jetifier,

00:12:09.790 --> 00:12:13.630
and this tool performs
binary translation using

00:12:13.630 --> 00:12:16.420
ASM, which jumps
into the jar and goes

00:12:16.420 --> 00:12:19.390
and rewrites all the uses
of the old Support Library

00:12:19.390 --> 00:12:21.750
to become the new
Support Library.

00:12:21.750 --> 00:12:23.770
This handles code
inside of the JAR.

00:12:23.770 --> 00:12:25.750
It handles XML resources.

00:12:25.750 --> 00:12:27.970
It even handles ProGuard files.

00:12:27.970 --> 00:12:30.410
We will also publish
a standalone JAR

00:12:30.410 --> 00:12:32.470
that you can run
manually if you'd

00:12:32.470 --> 00:12:35.480
like to have checked-in
versions of these pre-builds

00:12:35.480 --> 00:12:37.150
that you depend on.

00:12:37.150 --> 00:12:38.920
And now let's jump
to the laptop where

00:12:38.920 --> 00:12:41.620
I'm going to give you a
demo of how this tool works,

00:12:41.620 --> 00:12:43.702
and hopefully the demo
works beautifully.

00:12:49.250 --> 00:12:49.770
Of course.

00:12:49.770 --> 00:12:51.220
There we go.

00:12:51.220 --> 00:12:53.916
All right, let's
jump to the laptop.

00:12:53.916 --> 00:12:55.010
All right.

00:12:55.010 --> 00:12:58.370
So here you're looking
at a Topeka Android app.

00:12:58.370 --> 00:13:01.750
It's available on the
Google Samples GitHub page.

00:13:01.750 --> 00:13:02.930
It's nothing super-amazing.

00:13:02.930 --> 00:13:05.720
This is just using
standard components

00:13:05.720 --> 00:13:08.286
and showing examples
of how it works.

00:13:08.286 --> 00:13:10.660
As you see in the Android
emulator, I'm running this app.

00:13:10.660 --> 00:13:11.160
It works.

00:13:11.160 --> 00:13:12.867
You can click on things.

00:13:12.867 --> 00:13:14.450
But now what we are
going to do, we're

00:13:14.450 --> 00:13:16.970
going to jump into
the refactor menu.

00:13:16.970 --> 00:13:18.565
Hit the refactor to AndroidX.

00:13:18.565 --> 00:13:19.940
What this is going
to do is going

00:13:19.940 --> 00:13:22.570
to go jump in and search
through all the uses of all

00:13:22.570 --> 00:13:26.240
the old Support Library
classes in both XML, Java,

00:13:26.240 --> 00:13:29.720
and in all the other places
that we migrate for you.

00:13:29.720 --> 00:13:31.370
And after it's
done searching for,

00:13:31.370 --> 00:13:33.950
it's going to present all
the things that it will

00:13:33.950 --> 00:13:35.357
suggest for you to migrate.

00:13:35.357 --> 00:13:37.940
And in this case, I'm looking
at the specific sign-in fragment

00:13:37.940 --> 00:13:40.315
class, and you can see there's
a bunch of uses of Support

00:13:40.315 --> 00:13:43.100
Library, and what is going to
happen when I hit Do Refactor,

00:13:43.100 --> 00:13:45.470
it will go and
rewrite all of these,

00:13:45.470 --> 00:13:47.810
including build script
files and everything.

00:13:47.810 --> 00:13:50.401
And of course, Gradle needs
to go and sync again now

00:13:50.401 --> 00:13:52.400
because we just changed
all of the dependencies,

00:13:52.400 --> 00:13:55.100
and the class paths
need to be reloaded.

00:13:55.100 --> 00:13:58.110
So now that's what you twiddle
your thumbs a little bit,

00:13:58.110 --> 00:14:01.070
and wait for Studio
to do its thing.

00:14:01.070 --> 00:14:02.840
And now we are using new stuff.

00:14:02.840 --> 00:14:05.390
And now when I hit
Build and Install,

00:14:05.390 --> 00:14:07.802
hopefully in a few seconds--

00:14:07.802 --> 00:14:09.760
at home, you'd probably
would go grab a coffee,

00:14:09.760 --> 00:14:12.040
but here we can do
that on the stage.

00:14:12.040 --> 00:14:15.200
But it will go and install it
on Emulator any moment now.

00:14:15.200 --> 00:14:18.740
It will stall a little bit
longer by saying other words.

00:14:18.740 --> 00:14:19.550
Ta da.

00:14:19.550 --> 00:14:23.780
And now you see this is the same
app using a brand new AndroidX

00:14:23.780 --> 00:14:27.260
library, and migration
was fairly painless.

00:14:27.260 --> 00:14:30.610
So let's jump back
to the slides.

00:14:30.610 --> 00:14:33.610
[APPLAUSE]

00:14:35.610 --> 00:14:37.660
All right.

00:14:37.660 --> 00:14:40.160
Of course, some of you are
now using Android Studio.

00:14:40.160 --> 00:14:43.630
And for those people we will
be providing a giant CSV

00:14:43.630 --> 00:14:46.870
file that has a mapping of
old class to the new class.

00:14:46.870 --> 00:14:50.087
And that, in addition to the
standalone jetifier tool,

00:14:50.087 --> 00:14:51.670
you should be able
to hook up together

00:14:51.670 --> 00:14:53.650
in your build
system and your IDE

00:14:53.650 --> 00:14:57.900
to do the migration manually
if you are now using studio.

00:14:57.900 --> 00:15:01.280
So in summary, we are providing
these tools in Android Studio

00:15:01.280 --> 00:15:03.910
3.2 Canary 14.

00:15:03.910 --> 00:15:07.360
And Jetifier is already
in Google Maven.

00:15:07.360 --> 00:15:10.970
However this is
coming in really hot.

00:15:10.970 --> 00:15:13.460
Even the demo that I was
using is actually not

00:15:13.460 --> 00:15:15.770
using Canary 14, it's
using Canary 15--

00:15:15.770 --> 00:15:18.550
that's shipping next week
--because we found bugs when

00:15:18.550 --> 00:15:20.460
we were trying to do the demo.

00:15:20.460 --> 00:15:24.660
So please wait until Canary
15 to start using this.

00:15:24.660 --> 00:15:27.440
But when you do, in Canary
15, please take a look at it.

00:15:27.440 --> 00:15:28.850
Try to migrate your projects.

00:15:28.850 --> 00:15:32.150
And if you find any issues
with it, please file bugs.

00:15:32.150 --> 00:15:34.960
We want to make it
as easy as possible.

00:15:34.960 --> 00:15:38.390
We want you to migrate and
start using all the new stuff.

00:15:38.390 --> 00:15:40.940
However, you know,
migration takes time,

00:15:40.940 --> 00:15:45.170
so we will still ship Android
Support Library 28.0.0

00:15:45.170 --> 00:15:47.520
alongside of AndroidX.

00:15:47.520 --> 00:15:50.370
However, note that this is
the last feature release.

00:15:50.370 --> 00:15:53.150
So this is kind of like a
little bit of a timeline for you

00:15:53.150 --> 00:15:54.380
to kind of move forward.

00:15:56.892 --> 00:15:58.600
And if you want to
know a little bit more

00:15:58.600 --> 00:16:01.030
of how this works behind
the scenes inside of Android

00:16:01.030 --> 00:16:04.300
Studio, there will be a
talk about Android Build

00:16:04.300 --> 00:16:06.970
System at 6:30 in this room.

00:16:06.970 --> 00:16:10.920
So hopefully you can go
and take a look at that.

00:16:10.920 --> 00:16:12.740
So it's not all
about refactoring.

00:16:12.740 --> 00:16:14.870
We also added new features.

00:16:14.870 --> 00:16:18.312
And I'm going to walk you
through some of these.

00:16:18.312 --> 00:16:20.020
So the first feature
I want to talk about

00:16:20.020 --> 00:16:22.210
is the RecyclerView
selection, and this

00:16:22.210 --> 00:16:24.460
is a library that will
allow you to handle

00:16:24.460 --> 00:16:26.680
item selection a lot easier.

00:16:26.680 --> 00:16:28.300
It will help you
handle motion events

00:16:28.300 --> 00:16:30.610
and touch events, and
convert them into selection

00:16:30.610 --> 00:16:32.100
in the RecyclerView.

00:16:32.100 --> 00:16:33.760
This is a fairly
flexible library

00:16:33.760 --> 00:16:36.190
where it allows for a
custom layout managers

00:16:36.190 --> 00:16:38.710
and a lot of custom
actions that you can do.

00:16:38.710 --> 00:16:40.914
So let's jump through
and see how you use it.

00:16:40.914 --> 00:16:42.830
As you can imagine, you
add the new dependency

00:16:42.830 --> 00:16:45.240
to your build.gradle file.

00:16:45.240 --> 00:16:46.840
An important thing
to note here is

00:16:46.840 --> 00:16:50.660
that we are using the
new AndroidX artifact.

00:16:50.660 --> 00:16:54.300
This is the same stuff that
Alan was talking about.

00:16:54.300 --> 00:16:55.800
So for the setup
what you need to do

00:16:55.800 --> 00:16:59.050
is you want to
create a new layout--

00:16:59.050 --> 00:17:00.000
a new adapter.

00:17:00.000 --> 00:17:03.320
And the adapter, important thing
is that it uses stable IDs.

00:17:03.320 --> 00:17:05.670
We're using a stock
grid layout manager,

00:17:05.670 --> 00:17:07.760
and we set both of these
on the RecyclerView.

00:17:07.760 --> 00:17:09.970
There is no selection
code just yet.

00:17:09.970 --> 00:17:12.660
We're just doing the
basic RecyclerView setup.

00:17:12.660 --> 00:17:15.930
The adapter, as I said,
again, nothing super exciting.

00:17:15.930 --> 00:17:19.230
The only important thing here
is that we're doing stable IDs.

00:17:19.230 --> 00:17:23.500
And this allows for a consistent
mapping from ID to the item.

00:17:23.500 --> 00:17:25.740
And then next, when we
jump back to the activity,

00:17:25.740 --> 00:17:28.830
we set up selections,
libraries, this key provider.

00:17:28.830 --> 00:17:31.470
And this in conjunction
of stable IDs,

00:17:31.470 --> 00:17:34.020
will allow for a quick
mapping between the IDs

00:17:34.020 --> 00:17:37.560
and the items that will handle
the selection by the selection

00:17:37.560 --> 00:17:39.650
library.

00:17:39.650 --> 00:17:42.260
And now what we need to set
up is the selection tracker,

00:17:42.260 --> 00:17:45.620
which actually is the actual
machinery behind the scenes,

00:17:45.620 --> 00:17:47.750
and we pass in RecyclerView,
the key provider--

00:17:47.750 --> 00:17:49.330
both of these that
we just created,

00:17:49.330 --> 00:17:51.050
and then My Details Lookup.

00:17:51.050 --> 00:17:53.900
And My Details Lookup is
actually a fairly simple class.

00:17:53.900 --> 00:17:55.860
You need to overwrite
only one method.

00:17:55.860 --> 00:17:59.900
And then the site of that
one, your return item details.

00:17:59.900 --> 00:18:03.980
And that returns the position
and the selection key

00:18:03.980 --> 00:18:08.800
for the item that is for
the given motion event.

00:18:08.800 --> 00:18:12.400
And finally, RecyclerView has
no default selection mechanism.

00:18:12.400 --> 00:18:15.250
So what you have to do is you
have to handle it in onBind.

00:18:15.250 --> 00:18:18.030
So there you might want to
change the backgound of a view,

00:18:18.030 --> 00:18:21.330
or you can use it by
setting activated state.

00:18:21.330 --> 00:18:23.010
And to get activated
state working,

00:18:23.010 --> 00:18:26.430
you use background for the
view, and that background

00:18:26.430 --> 00:18:30.150
is a selectable drawable that
has an activated state which

00:18:30.150 --> 00:18:32.400
will allow to
indicate to the user

00:18:32.400 --> 00:18:35.530
that the item has been selected.

00:18:35.530 --> 00:18:36.750
So this is the basics.

00:18:36.750 --> 00:18:38.910
This library has a lot more.

00:18:38.910 --> 00:18:41.070
You can set up band selection.

00:18:41.070 --> 00:18:44.130
You can add custom
selection areas.

00:18:44.130 --> 00:18:46.890
You can have items
that are not square.

00:18:46.890 --> 00:18:49.300
You can have circular
handling and stuff like that.

00:18:49.300 --> 00:18:51.870
There's a lot of stuff you
can do to this library.

00:18:51.870 --> 00:18:55.670
And the important part of this
slide, that's my dog, Jack.

00:18:55.670 --> 00:18:56.180
All right.

00:18:56.180 --> 00:19:00.230
Another thing that we added to
RecyclerView is a list adapter.

00:19:00.230 --> 00:19:02.840
And what this does
for you is it helps

00:19:02.840 --> 00:19:05.120
you to work with
RecyclerViews that

00:19:05.120 --> 00:19:07.140
change the content over time.

00:19:07.140 --> 00:19:09.800
So all you need to do
is submit a new list.

00:19:09.800 --> 00:19:12.260
We run the DiffUtil tool
behind the scenes for you

00:19:12.260 --> 00:19:14.030
on the background
thread, and then we

00:19:14.030 --> 00:19:16.790
run the animations based on
how the list has changed.

00:19:16.790 --> 00:19:19.219
And this is all handled
via very simple API,

00:19:19.219 --> 00:19:20.760
and I'm going to
walk you through it.

00:19:20.760 --> 00:19:23.420
So what you need to do is
you create a diff callback.

00:19:23.420 --> 00:19:27.390
And diff callback has to
implement two methods.

00:19:27.390 --> 00:19:30.140
First one, make sure that
the items are the same where

00:19:30.140 --> 00:19:32.420
you compare the item IDs.

00:19:32.420 --> 00:19:35.090
And the second one, you want
to check that that content is

00:19:35.090 --> 00:19:37.790
the same where you do
a deeper comparison,

00:19:37.790 --> 00:19:39.850
essentially equals in Java.

00:19:39.850 --> 00:19:41.960
And then if there
is a change, we'll

00:19:41.960 --> 00:19:45.952
know how to crossfade your
item from one to the next.

00:19:45.952 --> 00:19:47.410
And then the adapter,
what you need

00:19:47.410 --> 00:19:49.810
to do in onBind you
just call getItem,

00:19:49.810 --> 00:19:52.060
and you do your regular
binding, and then

00:19:52.060 --> 00:19:56.440
that's all you need to do to
get the animation working.

00:19:56.440 --> 00:19:59.270
And then a highly complex
code in the activity,

00:19:59.270 --> 00:20:01.840
you call submitList, do
your list, and that's it.

00:20:01.840 --> 00:20:03.180
You're done.

00:20:03.180 --> 00:20:05.110
Note this works really
well with LiveData

00:20:05.110 --> 00:20:10.110
and are RxJava servables.

00:20:10.110 --> 00:20:13.430
So if you need to do a
slightly more advanced adapter,

00:20:13.430 --> 00:20:16.280
we also have a base adapter
called AsyncListDiffer.

00:20:16.280 --> 00:20:19.111
So if you need to do that,
just go and look into that.

00:20:19.111 --> 00:20:21.110
If you would like to know
more about ListAdapter

00:20:21.110 --> 00:20:24.170
and similar utilities,
see managing infinite

00:20:24.170 --> 00:20:26.120
lists the RecyclerView
and paging talk,

00:20:26.120 --> 00:20:28.750
on Thursday at 2:30.

00:20:28.750 --> 00:20:29.740
All right.

00:20:29.740 --> 00:20:33.750
So another thing that we added
is AndroidX WebKit library.

00:20:33.750 --> 00:20:36.730
And what it allows you
to do is to get the APIs

00:20:36.730 --> 00:20:40.660
that we've added in WebView
on the older versions

00:20:40.660 --> 00:20:42.640
in a backwards-compatible way.

00:20:42.640 --> 00:20:45.430
This library works
on API 21 and newer,

00:20:45.430 --> 00:20:47.440
where we introduced
the updateable WebView

00:20:47.440 --> 00:20:49.140
through Play Store.

00:20:49.140 --> 00:20:51.970
So take an example
of Safe Browsing API

00:20:51.970 --> 00:20:54.790
that we added in API 27.

00:20:54.790 --> 00:20:58.250
This prevents loading of
malicious URLs in the WebView

00:20:58.250 --> 00:20:59.890
inside of the application.

00:20:59.890 --> 00:21:02.830
And previously you could only
use it on API 27 and newer,

00:21:02.830 --> 00:21:07.610
but now you're going to be able
to use it on older devices.

00:21:07.610 --> 00:21:10.340
So similarly, we can
add a Gradle dependency

00:21:10.340 --> 00:21:12.200
to get this working.

00:21:12.200 --> 00:21:14.660
Again we're looking
at AndroidX artifacts.

00:21:14.660 --> 00:21:16.550
Hopefully you got this by now.

00:21:16.550 --> 00:21:18.830
And then we check if
the feature's available,

00:21:18.830 --> 00:21:21.230
and if it is, we
start safe browsing.

00:21:21.230 --> 00:21:23.840
Is as simple as that, and
you get the safer experience

00:21:23.840 --> 00:21:27.080
of safe browsing, starting
the API 21 and newer.

00:21:27.080 --> 00:21:31.070
And similarly, many other APIs
that we've added since API 21

00:21:31.070 --> 00:21:32.810
now will become
backwards-compatibly

00:21:32.810 --> 00:21:35.370
available to your application.

00:21:35.370 --> 00:21:38.160
So hopefully you'll
check this out.

00:21:38.160 --> 00:21:41.640
So another library that
we've renamed is Custom Tabs.

00:21:41.640 --> 00:21:44.282
This library became
Android Browser.

00:21:44.282 --> 00:21:46.240
This doesn't actually
change the functionality.

00:21:46.240 --> 00:21:48.390
It will continue to work
with all the browsers

00:21:48.390 --> 00:21:49.810
that already implement this.

00:21:49.810 --> 00:21:52.560
So Chrome, Firefox, and
Samsung Internet, all of them

00:21:52.560 --> 00:21:53.340
implement this.

00:21:53.340 --> 00:21:56.310
And if you're using it,
it will continue to work.

00:21:56.310 --> 00:21:58.940
The cool thing about this,
we added a new feature inside

00:21:58.940 --> 00:22:01.980
of the library which is
called Browser Actions.

00:22:01.980 --> 00:22:03.990
And what it allows you
to do is it allows you

00:22:03.990 --> 00:22:07.320
to hook into the context
menu of the browser.

00:22:07.320 --> 00:22:10.020
So for example now
your Reddit app

00:22:10.020 --> 00:22:12.870
can finally open links
in an incognito tab,

00:22:12.870 --> 00:22:14.950
which can be very handy.

00:22:14.950 --> 00:22:17.859
It works in Chrome,
starting with Chrome 66,

00:22:17.859 --> 00:22:19.650
and it will start
working on other browsers

00:22:19.650 --> 00:22:21.240
when they adopt it.

00:22:21.240 --> 00:22:25.720
So again, to use this,
it's fairly simple.

00:22:25.720 --> 00:22:32.710
You set up pending intents
for your browser action items.

00:22:32.710 --> 00:22:34.840
And this is optional.

00:22:34.840 --> 00:22:37.550
If you don't need any
extra ones in your dialog,

00:22:37.550 --> 00:22:39.650
you can skip this part.

00:22:39.650 --> 00:22:46.400
Another optional part you set
up is browser action tracking.

00:22:46.400 --> 00:22:49.280
So what this allows you to do is
you can see what user ended up

00:22:49.280 --> 00:22:52.910
selecting inside of the dialog.

00:22:52.910 --> 00:22:56.775
And then, finally, you just fire
up the browser action dialog.

00:22:56.775 --> 00:22:58.650
And then you end up with
something like this.

00:22:58.650 --> 00:23:01.340
And then you can do additional
actions for yourself,

00:23:01.340 --> 00:23:02.982
or you can hook
into the browser,

00:23:02.982 --> 00:23:04.940
whereas previously you
weren't able to do these

00:23:04.940 --> 00:23:07.310
via simple intents,
because browsers weren't

00:23:07.310 --> 00:23:12.380
interested in exposing a lot
of this functionality directly.

00:23:12.380 --> 00:23:14.950
Another library that I'm going
to talk about is HeifWriter.

00:23:14.950 --> 00:23:17.530
Heif stands for
High-Efficiency Image Format.

00:23:17.530 --> 00:23:20.530
And we introduced the support
to the platform for Heif

00:23:20.530 --> 00:23:22.690
in Android P. And
alongside we're

00:23:22.690 --> 00:23:24.130
launching this
library that allows

00:23:24.130 --> 00:23:27.340
you to take byte buffers,
surfaces, and bitmaps,

00:23:27.340 --> 00:23:29.150
and write them to the file.

00:23:29.150 --> 00:23:33.370
Currently it is only API 28
and newer, so not super useful.

00:23:33.370 --> 00:23:35.040
But we are working
on a backward that

00:23:35.040 --> 00:23:38.970
will allow you to use
it on older versions.

00:23:38.970 --> 00:23:41.050
Again, usage is very simple.

00:23:41.050 --> 00:23:44.877
You fire up the builder to
create a new HeifWriter object.

00:23:44.877 --> 00:23:46.710
In there, you can set
up a bunch of options,

00:23:46.710 --> 00:23:49.140
like image size or quality.

00:23:49.140 --> 00:23:53.100
You hit Build, and once you have
it, you start writing to it.

00:23:53.100 --> 00:23:55.587
You put in bitmaps,
and once you're ready,

00:23:55.587 --> 00:23:58.170
and you're done with it, and you
want to write it out to disk,

00:23:58.170 --> 00:24:00.720
you call stop with a
timeout, and the timeout

00:24:00.720 --> 00:24:04.074
can be zero if you want to
have an indefinite wait.

00:24:04.074 --> 00:24:05.490
And the important
part here is you

00:24:05.490 --> 00:24:08.010
want to do this work off
of UIFriend because you're

00:24:08.010 --> 00:24:09.966
going to be doing disk.

00:24:09.966 --> 00:24:11.340
And to tell you
a little bit more

00:24:11.340 --> 00:24:15.030
about other features in
AndroidX, I invite Kathy.

00:24:15.030 --> 00:24:15.530
Thanks.

00:24:15.530 --> 00:24:16.476
KATHY KAM: Thanks.

00:24:16.476 --> 00:24:17.895
[APPLAUSE]

00:24:17.895 --> 00:24:18.841
Thanks, Aurimas.

00:24:21.690 --> 00:24:23.950
So the next feature
I want to talk about

00:24:23.950 --> 00:24:26.890
that we added in AndroidX
is a feature called Slices.

00:24:26.890 --> 00:24:28.950
Slices is a feature that
allows you to display

00:24:28.950 --> 00:24:30.370
content outside of your app.

00:24:34.220 --> 00:24:36.380
So the goal here is
to have one reusable

00:24:36.380 --> 00:24:38.990
API that both the
system and other apps

00:24:38.990 --> 00:24:41.960
can request content
from your app.

00:24:41.960 --> 00:24:44.690
Today we have already
integrated research.

00:24:44.690 --> 00:24:46.820
Our goal is to look
into integration

00:24:46.820 --> 00:24:48.620
with notification, long
parse, or even home

00:24:48.620 --> 00:24:50.820
screen in the future.

00:24:50.820 --> 00:24:53.210
So what is this content
that you get to present?

00:24:53.210 --> 00:24:56.460
This content is both
templated and interactive.

00:24:56.460 --> 00:25:00.590
It's templated so that when
you have kind of live content,

00:25:00.590 --> 00:25:05.450
you can display it in a
rich and flexible layout.

00:25:05.450 --> 00:25:07.670
And the content is
interactive because we

00:25:07.670 --> 00:25:13.790
allow you to add existing
controls like sliders, toggles,

00:25:13.790 --> 00:25:16.540
or scroll viewer so
that together you

00:25:16.540 --> 00:25:19.700
can have LiveData with inline
actions, or even deep links

00:25:19.700 --> 00:25:20.910
into your app.

00:25:24.990 --> 00:25:28.980
You can also choose to integrate
your Slices with search.

00:25:28.980 --> 00:25:34.610
So a user can
display app content

00:25:34.610 --> 00:25:37.160
by searching your app
name, or even general terms

00:25:37.160 --> 00:25:38.270
that you've registered.

00:25:38.270 --> 00:25:40.820
This is a win-win for
both users and the apps,

00:25:40.820 --> 00:25:43.940
because users can get
rich LiveData immediately,

00:25:43.940 --> 00:25:47.000
and for your app to
reach millions of users.

00:25:47.000 --> 00:25:49.260
Because this is
implemented in AndroidX,

00:25:49.260 --> 00:25:52.919
it is usable immediately
up to API 19.

00:25:52.919 --> 00:25:54.710
So let's take a look
at how you can use it.

00:25:57.970 --> 00:26:00.579
So as you would expect, we have
to first import the libraries.

00:26:00.579 --> 00:26:02.370
There's three libraries
you need to import,

00:26:02.370 --> 00:26:04.560
and here we are
importing from AndroidX.

00:26:04.560 --> 00:26:06.600
The first is the
slice-builders that

00:26:06.600 --> 00:26:10.590
includes methods to build
content in a templative format.

00:26:10.590 --> 00:26:13.170
The next Library
is the slice-view.

00:26:13.170 --> 00:26:16.920
This contains method so that
you can present the content.

00:26:16.920 --> 00:26:20.310
And the last library to
import is slices-core

00:26:20.310 --> 00:26:22.320
that contains method
for permissions.

00:26:22.320 --> 00:26:24.750
So to build a Slice, you
have to define a Slice,

00:26:24.750 --> 00:26:26.970
implement the Slice,
and handle Slice action.

00:26:26.970 --> 00:26:28.553
Let's take a look
at how we can do it.

00:26:30.692 --> 00:26:32.150
So the first thing
we need to do is

00:26:32.150 --> 00:26:36.110
to let the system or
other apps know that you

00:26:36.110 --> 00:26:37.470
have Slices to provide.

00:26:37.470 --> 00:26:40.940
So you do that by implementing
your Slice provider.

00:26:40.940 --> 00:26:42.560
So you register
your Slice provider

00:26:42.560 --> 00:26:46.760
in your android.manifest file.

00:26:46.760 --> 00:26:49.900
Next, you have to extend
from the Slice provider

00:26:49.900 --> 00:26:51.520
and implement your
Slice provider.

00:26:51.520 --> 00:26:54.320
You can have multiple
Slices for your app.

00:26:54.320 --> 00:26:57.040
So this is where the
business logic happens.

00:26:57.040 --> 00:27:01.780
When a platform or another
app wants to get your Slices,

00:27:01.780 --> 00:27:05.785
you get a call on onBindSlice.

00:27:05.785 --> 00:27:08.890
You get a call with the URI
of the Slice being requested,

00:27:08.890 --> 00:27:11.530
and you have to return
your Slice immediately.

00:27:11.530 --> 00:27:14.260
So any content that needs to
be loaded should be kicked off,

00:27:14.260 --> 00:27:16.514
and you would return
it in buildSlice.

00:27:16.514 --> 00:27:17.680
So let's take a deeper look.

00:27:17.680 --> 00:27:20.470
And we're going to
construct the Slice here.

00:27:20.470 --> 00:27:24.340
And we are able to construct it
with several builder classes,

00:27:24.340 --> 00:27:26.590
include rowBuilder,
gridRowBuilder,

00:27:26.590 --> 00:27:27.430
and listBuilder.

00:27:27.430 --> 00:27:29.730
So let's take a look.

00:27:29.730 --> 00:27:32.670
So here we're going
to use the listBuilder

00:27:32.670 --> 00:27:34.830
to add a very simple header.

00:27:34.830 --> 00:27:36.630
The header contains a
title and a subtitle,

00:27:36.630 --> 00:27:41.640
and you see the method, add
header, that adds the header.

00:27:41.640 --> 00:27:43.740
Then to build on
top of it, we're

00:27:43.740 --> 00:27:45.450
going to use the gridRowBuilder.

00:27:45.450 --> 00:27:48.157
First we get the latest
weather information,

00:27:48.157 --> 00:27:49.740
and then we can loop
through it adding

00:27:49.740 --> 00:27:51.870
a cell to the gridRowBuilder.

00:27:51.870 --> 00:27:54.600
And by just calling
addGridRow at the bottom,

00:27:54.600 --> 00:27:59.220
it appends the rest of
the Slice to the header.

00:27:59.220 --> 00:28:02.220
So what you would get
here is that based

00:28:02.220 --> 00:28:04.275
on screen real estate,
if it is small,

00:28:04.275 --> 00:28:06.450
we show a shortcut Slice.

00:28:06.450 --> 00:28:09.420
The shortcut Slice pick up
an image from your Slice.

00:28:09.420 --> 00:28:11.880
So because we have the weather
image, we'll pick that up.

00:28:11.880 --> 00:28:13.254
But if you didn't
have the image,

00:28:13.254 --> 00:28:15.330
we would show your app icon.

00:28:15.330 --> 00:28:17.790
And then if the screen is
only allow for small Slice,

00:28:17.790 --> 00:28:19.470
it will be the
header that's shown.

00:28:19.470 --> 00:28:21.170
And finally, if it
has enough space,

00:28:21.170 --> 00:28:25.090
we will show the full Slice.

00:28:25.090 --> 00:28:28.660
So to learn more about Slices,
there was a talk this morning

00:28:28.660 --> 00:28:30.220
that you can review.

00:28:30.220 --> 00:28:32.025
But I only just cover
very basic of it,

00:28:32.025 --> 00:28:34.150
and you can learn more
about templates, permission,

00:28:34.150 --> 00:28:38.070
and integrating your
search in the other talk.

00:28:38.070 --> 00:28:40.440
And you can also meet the
team at the office hour tent

00:28:40.440 --> 00:28:43.970
tomorrow morning at 10:30.

00:28:43.970 --> 00:28:47.350
So the next topic I want to talk
about is Material Components.

00:28:47.350 --> 00:28:50.410
We launched Material Components
for Android back in Support

00:28:50.410 --> 00:28:55.220
Library 28.0.0 alpha 1 in March,
and we've also launched it

00:28:55.220 --> 00:28:57.532
for AndroidX yesterday.

00:28:57.532 --> 00:28:58.990
So as you know,
material theming is

00:28:58.990 --> 00:29:00.990
designed to support
great user experience.

00:29:00.990 --> 00:29:03.850
We've made a lot of
improvements since 0.

00:29:03.850 --> 00:29:05.800
So one of the first
things we have

00:29:05.800 --> 00:29:08.890
done as part of the
AndroidX refactoring

00:29:08.890 --> 00:29:12.010
is that instead of being
in android.support.design,

00:29:12.010 --> 00:29:16.810
we've moved it to
com.google.android.material.

00:29:16.810 --> 00:29:19.120
We've done a lot of
extensive usability study

00:29:19.120 --> 00:29:22.600
on how to make these
widgets work well for you.

00:29:22.600 --> 00:29:25.530
So we have made them more
usable and accessible.

00:29:25.530 --> 00:29:27.940
And we've updated styling
so that you can better

00:29:27.940 --> 00:29:31.640
express your brand, and
included new UI components.

00:29:31.640 --> 00:29:33.610
So let's take a look.

00:29:33.610 --> 00:29:36.000
So here is an overview of
the theming capability.

00:29:36.000 --> 00:29:38.610
On your right, there's a
very brand-agnostic baseline,

00:29:38.610 --> 00:29:41.820
and on your left, there
is the Google branding.

00:29:41.820 --> 00:29:44.670
All the components can
pull from the theme

00:29:44.670 --> 00:29:46.590
so that it makes it
super easy for you

00:29:46.590 --> 00:29:49.190
to have app-wide theming.

00:29:49.190 --> 00:29:51.380
Let's walk through
some of this in code.

00:29:51.380 --> 00:29:55.220
As you would expect, you will
have to import the library.

00:29:55.220 --> 00:29:57.080
Here, note that
it is coming from

00:29:57.080 --> 00:30:04.840
com.google.android.material,
and to use a baseline theme,

00:30:04.840 --> 00:30:09.100
you set the theme to be
MaterialComponents.Light.

00:30:09.100 --> 00:30:13.802
This is kind of brand-agnostic
theme for you to start with.

00:30:13.802 --> 00:30:15.760
And then we provide a
whole bunch of attributes

00:30:15.760 --> 00:30:19.090
that you can override so that
all the widgets within the app

00:30:19.090 --> 00:30:20.050
can pick up.

00:30:20.050 --> 00:30:27.950
So here we have defined primary
color and text in theme.XML.

00:30:27.950 --> 00:30:30.070
And then on top of
that, you can also

00:30:30.070 --> 00:30:33.940
define attributes for
different text styles.

00:30:33.940 --> 00:30:35.600
We have some that
comes out of box,

00:30:35.600 --> 00:30:37.190
but you can also
define your own.

00:30:37.190 --> 00:30:38.902
And all the custom widgets--

00:30:38.902 --> 00:30:41.110
if you have custom widget
that uses these attributes,

00:30:41.110 --> 00:30:43.844
it can also pick up the theme.

00:30:43.844 --> 00:30:45.760
So let's take a look at
some of the components

00:30:45.760 --> 00:30:47.020
that we've updated.

00:30:47.020 --> 00:30:48.901
First off is text field.

00:30:48.901 --> 00:30:51.400
We've done a lot of research,
and we have improved the touch

00:30:51.400 --> 00:30:54.610
target, making it
more easier for input,

00:30:54.610 --> 00:30:57.590
and making it more
usable and accessible.

00:30:57.590 --> 00:30:59.350
We've also added
new states to it,

00:30:59.350 --> 00:31:02.190
which includes focus state,
error state, disable,

00:31:02.190 --> 00:31:03.790
and text counter.

00:31:03.790 --> 00:31:07.210
So we kind of think
through all of it

00:31:07.210 --> 00:31:10.250
from the start to
make your life easier.

00:31:10.250 --> 00:31:12.180
Next up is Button.

00:31:12.180 --> 00:31:14.430
As you can tell, you can
just use button the way

00:31:14.430 --> 00:31:17.540
you use today by setting
the material component

00:31:17.540 --> 00:31:20.540
light beam will automatically
inflate this little material

00:31:20.540 --> 00:31:22.130
button that
understand our themes

00:31:22.130 --> 00:31:24.650
and pick up all the attributes
that you have set previously

00:31:24.650 --> 00:31:26.514
in your theme file.

00:31:26.514 --> 00:31:28.430
You can also use custom
attributes with these.

00:31:32.640 --> 00:31:36.130
And then we're also providing
two updated bars for you.

00:31:36.130 --> 00:31:38.190
The first is the bottom app bar.

00:31:38.190 --> 00:31:44.260
The bottom bar allows you to
add actions into your app.

00:31:44.260 --> 00:31:47.389
And what we have done here is
that we have allowed you to--

00:31:47.389 --> 00:31:49.680
we've done research and saw
that the phones are bigger,

00:31:49.680 --> 00:31:53.100
so we want to allow you to
position your actions anywhere

00:31:53.100 --> 00:31:54.540
you want along the
bottom app bar.

00:31:54.540 --> 00:31:57.150
So here we have a
fab that is centered

00:31:57.150 --> 00:32:02.210
and then can be animated
to be right-aligned.

00:32:02.210 --> 00:32:04.030
The other bottom bar
we have update it

00:32:04.030 --> 00:32:06.270
is the bottom navigation bar.

00:32:06.270 --> 00:32:09.020
So just to clarify, that
bottom app bar is for actions,

00:32:09.020 --> 00:32:11.490
and the bottom navigation bar
is for a different section

00:32:11.490 --> 00:32:12.310
within your app.

00:32:12.310 --> 00:32:15.660
We do not recommend
mixing these metaphors,

00:32:15.660 --> 00:32:17.535
but we provide both for
you to choose from so

00:32:17.535 --> 00:32:19.940
that you can build your app.

00:32:19.940 --> 00:32:23.350
So pulling all of this together
is the Material Card View

00:32:23.350 --> 00:32:25.170
that is a wrapper
on the existing card

00:32:25.170 --> 00:32:27.880
view in the Support
Library on AndroidX.

00:32:27.880 --> 00:32:29.990
We've simplified
how this was built

00:32:29.990 --> 00:32:32.420
so that it has less
elevation and shadow,

00:32:32.420 --> 00:32:35.130
and it also pulls from
the theme and color.

00:32:35.130 --> 00:32:38.240
So here you can see all the
elements coming together

00:32:38.240 --> 00:32:42.410
with the text button, and all of
that in the material cart view.

00:32:42.410 --> 00:32:45.520
With this component, you will
have to define a user Material

00:32:45.520 --> 00:32:47.000
Card View explicitly.

00:32:47.000 --> 00:32:51.570
We're looking to see whether
we can integrate it as well.

00:32:51.570 --> 00:32:56.810
So with that, you can learn
more about this in stage 8

00:32:56.810 --> 00:33:00.080
at 4:30, on how to incur
what's new with material

00:33:00.080 --> 00:33:03.530
design in your code base.

00:33:03.530 --> 00:33:06.470
And AndroidX is only
one part of Jetpack.

00:33:06.470 --> 00:33:09.040
So Jetpack is a set of
components, tools, and guidance

00:33:09.040 --> 00:33:14.610
to help you build great Android
apps quickly and easily.

00:33:14.610 --> 00:33:18.650
So we're at this talk, but we
have four more talks for you

00:33:18.650 --> 00:33:20.420
to learn more about Jetpack.

00:33:20.420 --> 00:33:22.250
So with that, thank you.

00:33:22.250 --> 00:33:25.280
Alan, Aurimas, and I will be
hanging out at the Android tent

00:33:25.280 --> 00:33:26.477
right over there.

00:33:26.477 --> 00:33:28.310
So we'll hope to see
and talk to all of you.

00:33:28.310 --> 00:33:28.810
Thank you.

00:33:28.810 --> 00:33:30.646
[APPLAUSE]

00:33:30.646 --> 00:33:34.366
[TITLE MUSIC PLAYING]

