WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:03.610
So let me just show you some of
the results that you can get using that.

00:00:03.610 --> 00:00:04.250
All right?

00:00:04.250 --> 00:00:08.860
So here are again, this is taken
from the the Berkeley database.

00:00:08.860 --> 00:00:13.070
And because Shi and Malik, Jianbo Shi
and Jitendra Malik did normalized cuts.

00:00:13.070 --> 00:00:16.260
And you can see that there
are some pretty good results here.

00:00:16.260 --> 00:00:19.730
You know, you like, I especially like
this one here where it breaks up

00:00:19.730 --> 00:00:23.170
the picture of the people in,
in a particular way.

00:00:23.170 --> 00:00:29.230
Now, of course, these, segmentation
is tremendously influenced by that

00:00:29.230 --> 00:00:33.890
affinity matrix, and the affinity matrix
is defined by that distance function.

00:00:33.890 --> 00:00:36.780
So, we're back to feature spaces again,
right?

00:00:36.780 --> 00:00:39.860
We have to know what features we
should be computing a space over.

00:00:39.860 --> 00:00:42.860
We may have to scale the features
because all of that determines

00:00:42.860 --> 00:00:43.870
the distances.

00:00:43.870 --> 00:00:45.930
But, once you do that and
you play with that,

00:00:45.930 --> 00:00:49.410
you could end up with a really powerful,
segmentation method.

00:00:49.410 --> 00:00:51.340
By the way,
you'll notice that there are more than,

00:00:51.340 --> 00:00:53.530
two segments in these pictures.

00:00:53.530 --> 00:00:54.690
Well, so how do you do that?

00:00:54.690 --> 00:00:58.800
Well, the simplest is you partition
your graph, and then what do you do?

00:00:58.800 --> 00:01:02.700
You partition again, partition again,
and you need a stopping criteria based

00:01:02.700 --> 00:01:06.310
upon, sort of the affinities of the,
the links that you're cutting.

00:01:06.310 --> 00:01:10.343
Here are some more examples also
taken from the Berkeley database for

00:01:10.343 --> 00:01:11.260
segmentation.

