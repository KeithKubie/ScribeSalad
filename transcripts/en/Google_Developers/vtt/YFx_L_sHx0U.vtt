WEBVTT
Kind: captions
Language: en

00:00:00.497 --> 00:01:09.580
[MUSIC PLAYING]

00:01:17.497 --> 00:01:18.204
PAUL MATTHEWS: Hello,
and welcome

00:01:18.204 --> 00:01:20.320
to this OAuth2 session.

00:01:20.320 --> 00:01:21.240
I'm Paul Matthews.

00:01:21.240 --> 00:01:24.370
I'm a Developer Programs
Engineer on the AdWords API,

00:01:24.370 --> 00:01:25.520
and this is Marc.

00:01:25.520 --> 00:01:27.660
MARC WANDSCHNEIDER: Hi my name
is Marc Wandschneider, and I'm

00:01:27.660 --> 00:01:29.310
a developer advocate
here at Google.

00:01:29.310 --> 00:01:32.400
And I also work on
the AdWords API.

00:01:32.400 --> 00:01:34.060
PAUL MATTHEWS: So today we're
going to talk to you about

00:01:34.060 --> 00:01:36.120
authorization, and in
particular, OAuth2.

00:01:39.600 --> 00:01:44.130
For the moment, changes are
coming for the authentication

00:01:44.130 --> 00:01:46.680
of your applications.

00:01:46.680 --> 00:01:50.310
At the moment, many of your apps
are using ClientLogin.

00:01:50.310 --> 00:01:54.720
This is a sort of flow for how
ClientLogin is authenticating

00:01:54.720 --> 00:01:55.480
with a service.

00:01:55.480 --> 00:01:57.760
So your app talks to the
authentication service, blah,

00:01:57.760 --> 00:01:58.800
blah, blah.

00:01:58.800 --> 00:02:02.495
Your app gets an access token,
or an AuthToken, in this case.

00:02:02.495 --> 00:02:05.300
Your app talks to the Product
API servers and passes in

00:02:05.300 --> 00:02:08.919
Developer key and access token,
and your app has to

00:02:08.919 --> 00:02:12.220
periodically re-authenticate
with the servers.

00:02:12.220 --> 00:02:15.410
So this, as I said, is
called ClientLogin.

00:02:15.410 --> 00:02:19.770
So how will it work
in the new world?

00:02:19.770 --> 00:02:22.780
In the OAuth2 world, your app
will talk to the application

00:02:22.780 --> 00:02:24.610
servers, wah, wah, wah.

00:02:24.610 --> 00:02:26.860
Your app gets an access token.

00:02:26.860 --> 00:02:28.160
Sound familiar?

00:02:28.160 --> 00:02:31.410
Your app talks to the Product
API servers and passes in the

00:02:31.410 --> 00:02:33.500
Developer Key and
access token.

00:02:33.500 --> 00:02:36.320
And your app has to periodically
re-authenticate.

00:02:36.320 --> 00:02:39.440
So this new way of doing
it is OAuth2.

00:02:39.440 --> 00:02:40.250
Don't panic!

00:02:40.250 --> 00:02:42.530
This shouldn't be a big deal
for you, and it will

00:02:42.530 --> 00:02:47.450
drastically improve security of
your applications and data.

00:02:47.450 --> 00:02:49.830
So what's wrong with
ClientLogin?

00:02:49.830 --> 00:02:51.110
Why do we want to move
away from it?

00:02:51.110 --> 00:02:54.100
What's the investment
worth for you?

00:02:54.100 --> 00:02:58.100
At the moment, ClientLogin works
on a process of username

00:02:58.100 --> 00:03:00.800
and passwords for products
being shared around.

00:03:00.800 --> 00:03:01.600
MARC WANDSCHNEIDER: And you
actually have to put

00:03:01.600 --> 00:03:02.260
them in your code.

00:03:02.260 --> 00:03:04.710
So your code base is sitting
there with your username and

00:03:04.710 --> 00:03:06.770
password stuck in it,
which is not ideal.

00:03:06.770 --> 00:03:07.280
PAUL MATTHEWS: Exactly.

00:03:07.280 --> 00:03:11.340
And it's quite easy to
accidentally get your code

00:03:11.340 --> 00:03:12.410
leaked out to the world.

00:03:12.410 --> 00:03:15.000
And if that happens, then
you're sending private

00:03:15.000 --> 00:03:18.430
credentials out there, which is
a very bad security crisis.

00:03:18.430 --> 00:03:23.170
So once you authenticate
with our servers, our

00:03:23.170 --> 00:03:25.590
authentication servers, at the
moment, your access token,

00:03:25.590 --> 00:03:28.880
your AuthToken, lasts for
around two weeks.

00:03:28.880 --> 00:03:32.540
There's no way to revoke this
token, or no easy way to

00:03:32.540 --> 00:03:35.690
revoke this token at present.

00:03:35.690 --> 00:03:40.950
And the main thing, the real
drive behind this, is that

00:03:40.950 --> 00:03:47.572
ClientLogin is being sunset by
2015, and it might be sooner.

00:03:47.572 --> 00:03:48.990
It's actually been
in deprecated

00:03:48.990 --> 00:03:50.270
mode since last year.

00:03:50.270 --> 00:03:53.970
So it's really time to start
thinking about changing over

00:03:53.970 --> 00:03:55.930
to pastures new.

00:03:55.930 --> 00:03:58.220
MARC WANDSCHNEIDER: Definitely
being discouraged.

00:03:58.220 --> 00:03:59.830
PAUL MATTHEWS: So why OAuth2?

00:03:59.830 --> 00:04:02.290
Well, OAuth2 primarily,
and this is the

00:04:02.290 --> 00:04:03.980
driver, is more secure.

00:04:03.980 --> 00:04:06.800
It doesn't expose usernames and
passwords, and you only

00:04:06.800 --> 00:04:09.550
exchange OAuth tokens.

00:04:09.550 --> 00:04:11.400
You get more specific
access control.

00:04:11.400 --> 00:04:15.040
So rather than relying on any
person with your credentials

00:04:15.040 --> 00:04:19.519
access to all of your data, you
can rein in and allow them

00:04:19.519 --> 00:04:24.590
access to particular portions
of your data.

00:04:24.590 --> 00:04:25.430
MARC WANDSCHNEIDER:
Or even APIs.

00:04:25.430 --> 00:04:27.670
I can say like with a particular
set of OAuth

00:04:27.670 --> 00:04:31.040
tokens, this one can only accept
access to Mapping API.

00:04:31.040 --> 00:04:34.560
This this one can only access
certain geolocation APIs, and

00:04:34.560 --> 00:04:34.920
everything.

00:04:34.920 --> 00:04:38.660
You can actually severely
restrict the scope of the

00:04:38.660 --> 00:04:41.460
individual access credentials
being issued.

00:04:41.460 --> 00:04:43.140
So again, if they're
compromised, the amount of

00:04:43.140 --> 00:04:45.670
damage that can be
done is limited.

00:04:45.670 --> 00:04:47.910
PAUL MATTHEWS: So, as he was
alluding to, it drastically

00:04:47.910 --> 00:04:52.320
reduces the impact if a
token is compromised.

00:04:52.320 --> 00:04:55.320
There's no CAPTCHA challenges
with OAuth2, which is really

00:04:55.320 --> 00:05:01.050
good for any of you that might
want to put this system into

00:05:01.050 --> 00:05:02.680
an automatic process,
like a Chrome job or

00:05:02.680 --> 00:05:03.370
something like that.

00:05:03.370 --> 00:05:05.130
Where CAPTCHA would just
halt the whole

00:05:05.130 --> 00:05:07.310
process and stop it dead.

00:05:07.310 --> 00:05:12.250
And we've learned a lot from the
OAuth1.0 days, and really

00:05:12.250 --> 00:05:15.040
the standard has grown up a
lot, and OAuth2 is a much

00:05:15.040 --> 00:05:17.790
better revision.

00:05:17.790 --> 00:05:20.470
So what are the key
steps to OAuth2?

00:05:20.470 --> 00:05:24.620
You start off by registering
an OAuth application.

00:05:24.620 --> 00:05:27.080
This is very simple, and we'll
go through that shortly.

00:05:27.080 --> 00:05:30.430
You authenticate to
get an auth code.

00:05:30.430 --> 00:05:34.330
So that's where the
authentication servers.

00:05:34.330 --> 00:05:37.750
You exchange your auth code
for an access token and

00:05:37.750 --> 00:05:38.610
refresh token.

00:05:38.610 --> 00:05:39.650
More on that later.

00:05:39.650 --> 00:05:42.990
And you call the Product API
with the access token.

00:05:42.990 --> 00:05:45.710
And finally you handle
token expiration.

00:05:45.710 --> 00:05:48.350
So you'll see a lot of this
happens before you even get

00:05:48.350 --> 00:05:52.560
into calling the APIs
you're used to.

00:05:52.560 --> 00:05:55.950
So step one, registering
the application.

00:05:55.950 --> 00:05:59.450
You go to
code.google.com/apis/console

00:05:59.450 --> 00:06:01.900
and you create a new project.

00:06:01.900 --> 00:06:04.360
This is how you create
a new project.

00:06:04.360 --> 00:06:05.720
So you just hit the Create
project button.

00:06:05.720 --> 00:06:07.230
It's nice and easy.

00:06:07.230 --> 00:06:08.840
And it'll take you through
to this screen.

00:06:08.840 --> 00:06:10.640
And it'll actually take you
through to the Overview

00:06:10.640 --> 00:06:13.820
screen, where you can click on
API access and create a new

00:06:13.820 --> 00:06:17.770
OAuth2 Client ID in secret.

00:06:17.770 --> 00:06:20.230
Where you'll be prompted
with this box.

00:06:20.230 --> 00:06:23.020
There's no saying that we don't
show you every in-depth

00:06:23.020 --> 00:06:24.420
detail of this.

00:06:24.420 --> 00:06:26.970
So this box will allow you to
put in your product name, and

00:06:26.970 --> 00:06:29.630
that's really the crucial
part of this.

00:06:29.630 --> 00:06:32.070
You can put in a product logo
if you have one, and maybe a

00:06:32.070 --> 00:06:35.380
home page URL for additional
information.

00:06:35.380 --> 00:06:40.090
The next step, you choose the
application type, the workflow

00:06:40.090 --> 00:06:42.160
type, the OAuth2 type.

00:06:42.160 --> 00:06:43.030
More on that later.

00:06:43.030 --> 00:06:45.010
But in this particular example,
we're selecting the

00:06:45.010 --> 00:06:48.290
web application, the web flow
layout, and we're filling in

00:06:48.290 --> 00:06:53.580
other additional details
that might be needed to

00:06:53.580 --> 00:06:54.830
achieve that flow.

00:06:57.680 --> 00:06:59.150
Finally, there's a redirect
URL at the bottom.

00:06:59.150 --> 00:07:03.550
And we click create client ID.

00:07:03.550 --> 00:07:05.050
And it'll produce something
like this.

00:07:05.050 --> 00:07:06.230
You'll see this nice
little box.

00:07:06.230 --> 00:07:09.480
It'll explain it to you, give
you the Client ID, Email

00:07:09.480 --> 00:07:12.420
address, Client secret, Redirect
URL, and JavaScript,

00:07:12.420 --> 00:07:15.200
all that information that you
have to deal with for the

00:07:15.200 --> 00:07:17.220
OAuth2 login.

00:07:17.220 --> 00:07:19.940
And conveniently, there's a
download to JSON format, so

00:07:19.940 --> 00:07:22.710
you can just pick this all out
as a file, and drop this into

00:07:22.710 --> 00:07:27.180
most Google applications or
Google libraries, and it

00:07:27.180 --> 00:07:28.430
should read from that.

00:07:31.960 --> 00:07:33.840
MARC WANDSCHNEIDER: So I'm going
to go here and just sort

00:07:33.840 --> 00:07:36.590
of, I guess, slightly more
technical details about how

00:07:36.590 --> 00:07:38.160
all this works and everything.

00:07:38.160 --> 00:07:41.470
I'm going to go back one slide
here, and mention here that

00:07:41.470 --> 00:07:42.450
you can download--

00:07:42.450 --> 00:07:44.530
you'll see here on the right--
you can download these

00:07:44.530 --> 00:07:46.010
credentials and everything.

00:07:46.010 --> 00:07:48.980
You can actually just copy
them from this page.

00:07:48.980 --> 00:07:51.660
But typically, what we'll do
is we'll download the JSON,

00:07:51.660 --> 00:07:53.090
keep that in a JSON file.

00:07:53.090 --> 00:07:54.720
And again, that's not perfect.

00:07:54.720 --> 00:07:56.930
But you can't have the perfect
security model.

00:07:56.930 --> 00:07:58.740
And again, having these
credentials stored in your

00:07:58.740 --> 00:08:00.890
source tree is far safer than
having your username and

00:08:00.890 --> 00:08:03.680
password, because if they get
compromised, you can easily

00:08:03.680 --> 00:08:06.710
just revoke them with the DELETE
button you see right

00:08:06.710 --> 00:08:09.980
here, and then ask for a
new set of credentials.

00:08:09.980 --> 00:08:14.450
So this picture here is
from our Google OAuth

00:08:14.450 --> 00:08:15.430
documentation page.

00:08:15.430 --> 00:08:18.290
So you can go on to the internet
and view it later.

00:08:18.290 --> 00:08:20.420
We will show you the link for
that at the end of this

00:08:20.420 --> 00:08:21.590
presentation.

00:08:21.590 --> 00:08:25.940
But the basic flow is your
application here is going to

00:08:25.940 --> 00:08:28.210
begin the authentication
process.

00:08:28.210 --> 00:08:32.409
And it's going to ask Google
to begin the authentication

00:08:32.409 --> 00:08:35.090
process and start giving me some
tokens and everything.

00:08:35.090 --> 00:08:39.140
This is going to redirect my
application to some sort of

00:08:39.140 --> 00:08:42.980
Google authentication page,
or pop up, or some sort of

00:08:42.980 --> 00:08:46.310
scheme, depending on what type
of application I have.

00:08:46.310 --> 00:08:48.530
And I'll talk about that
in just a second.

00:08:48.530 --> 00:08:51.380
Once Google has decided to
authenticate me, and has

00:08:51.380 --> 00:08:54.390
verified that the user and
password are all kosher and

00:08:54.390 --> 00:08:58.160
everything, they will send back
a code to my application,

00:08:58.160 --> 00:09:00.160
or my web app, or something.

00:09:00.160 --> 00:09:03.690
My application then, with that
code in hand, recalls Google

00:09:03.690 --> 00:09:07.460
again, exchanges those for a
token response, which has a

00:09:07.460 --> 00:09:09.550
couple of different things
in it, which we can

00:09:09.550 --> 00:09:10.820
use to call the APIs.

00:09:13.530 --> 00:09:16.690
All right so, before we scare
everybody with all the

00:09:16.690 --> 00:09:20.910
technical details, if you're
using Google Client Libraries,

00:09:20.910 --> 00:09:23.770
they're almost all already up
to date in all the languages

00:09:23.770 --> 00:09:26.190
for all of this authentication
and all of

00:09:26.190 --> 00:09:27.120
these different methods.

00:09:27.120 --> 00:09:30.180
So you should be able to just
change your methods to

00:09:30.180 --> 00:09:32.420
OAuth2.0, and have
everything work.

00:09:32.420 --> 00:09:35.610
You just need to plug in the
secret and the tokens that you

00:09:35.610 --> 00:09:38.590
got from the API console
earlier on.

00:09:38.590 --> 00:09:41.340
For those few libraries that are
possibly out of date right

00:09:41.340 --> 00:09:43.400
now, or don't handle everything
quite perfectly,

00:09:43.400 --> 00:09:46.320
you should expect those to be
migrated over and fully

00:09:46.320 --> 00:09:50.040
supported in the very near
future, as we're moving

00:09:50.040 --> 00:09:51.450
everything away from
ClientLogin and

00:09:51.450 --> 00:09:54.400
towards this OAuth2.0.

00:09:54.400 --> 00:09:56.450
So if you're not using a client
library and you're

00:09:56.450 --> 00:09:59.060
coding this stuff by hand, let's
go into the details a

00:09:59.060 --> 00:10:00.810
little bit more of
how you do that.

00:10:00.810 --> 00:10:04.280
You send a request to the Google
Authorization Server

00:10:04.280 --> 00:10:05.770
with what you want to access.

00:10:05.770 --> 00:10:08.480
This is what we said earlier
was the scope.

00:10:08.480 --> 00:10:10.970
So for example, if I'm writing
an app that uses the AdWords

00:10:10.970 --> 00:10:15.080
API, I'll say I want to
authenticate this application

00:10:15.080 --> 00:10:17.630
against this URL, which
is the AdWords.

00:10:17.630 --> 00:10:21.100
I also pass in the client ID and
the client secret, which

00:10:21.100 --> 00:10:24.880
we got from the API console
in that JSON on file.

00:10:24.880 --> 00:10:27.110
Now we have to actually go
and authenticate it.

00:10:27.110 --> 00:10:30.350
In most of the flows, this will
involve actually Google

00:10:30.350 --> 00:10:35.460
popping up a login dialog or
validating that the user wants

00:10:35.460 --> 00:10:39.810
to grant your application access
to the APIs on their

00:10:39.810 --> 00:10:41.730
behalf, and sort of tell
Google they're

00:10:41.730 --> 00:10:43.410
doing things with it.

00:10:43.410 --> 00:10:48.670
Once you've given that, the
Google servers return a code

00:10:48.670 --> 00:10:51.790
back to your application that
your application can, in the

00:10:51.790 --> 00:10:55.480
final step, exchange for
an accessToken and a

00:10:55.480 --> 00:10:56.730
refreshToken.

00:10:58.910 --> 00:11:02.070
So how do we use these tokens
that are returned?

00:11:02.070 --> 00:11:04.510
The accessToken is the
token that I pass

00:11:04.510 --> 00:11:06.510
into the API calls.

00:11:06.510 --> 00:11:09.430
It is passed in actually
as a header.

00:11:09.430 --> 00:11:12.380
An HTTP header called
authorization, and you say

00:11:12.380 --> 00:11:15.350
OAuth, and you pass in this
token that you got back.

00:11:15.350 --> 00:11:18.630
This expires after
about an hour.

00:11:18.630 --> 00:11:21.210
I've seen maybe a few minutes
give or take on this.

00:11:21.210 --> 00:11:24.680
But roughly after an hour, this
token will stop working.

00:11:24.680 --> 00:11:27.070
And actually when you first
get these tokens back, you

00:11:27.070 --> 00:11:31.920
actually get a timeout value
with that JSON response.

00:11:31.920 --> 00:11:33.870
PAUL MATTHEWS: It's probably
worth saying, that's usually

00:11:33.870 --> 00:11:35.560
the one that you
want to go on.

00:11:35.560 --> 00:11:39.000
You don't necessarily need to
make the request to confirm

00:11:39.000 --> 00:11:40.790
that it's still valid.

00:11:40.790 --> 00:11:42.430
You just go by the time out.

00:11:45.350 --> 00:11:47.340
Then after the time out, you
would just refresh your token.

00:11:47.340 --> 00:11:49.615
You wouldn't bother waiting
until it definitely expired.

00:11:49.615 --> 00:11:50.800
MARC WANDSCHNEIDER: Right.

00:11:50.800 --> 00:11:52.700
And then you do have
this refreshToken.

00:11:52.700 --> 00:11:55.130
And the refreshToken is how
you actually get another

00:11:55.130 --> 00:11:58.550
accessToken when your
accessTokens do time out.

00:11:58.550 --> 00:12:01.230
So the nice thing about these is
I don't need to pop up the

00:12:01.230 --> 00:12:02.720
authentication dialog again.

00:12:02.720 --> 00:12:05.040
The user doesn't have to come
back and enter the username or

00:12:05.040 --> 00:12:08.600
password, or authorize my app,
or click any buttons.

00:12:08.600 --> 00:12:11.620
I just say all right, that
old token has expired.

00:12:11.620 --> 00:12:13.610
Please give me a new accessToken
with this

00:12:13.610 --> 00:12:16.600
refreshToken, and I'll
get a new one.

00:12:16.600 --> 00:12:19.680
So you should probably store
that when you first get it, so

00:12:19.680 --> 00:12:22.620
that when your accessToken
does expire, you'll

00:12:22.620 --> 00:12:24.760
be given a new one.

00:12:24.760 --> 00:12:26.910
You'll be able to get a new
accessToken from that

00:12:26.910 --> 00:12:28.270
refreshToken.

00:12:28.270 --> 00:12:30.010
So let's talk a little
bit about the

00:12:30.010 --> 00:12:31.500
various different flows.

00:12:31.500 --> 00:12:34.270
The nice thing about OAuth2.0
on the big improvements it

00:12:34.270 --> 00:12:38.770
offers over OAuth1.0, are the
ways in which it supports the

00:12:38.770 --> 00:12:39.800
various different apps.

00:12:39.800 --> 00:12:42.090
Whether they be web
applications, mobile

00:12:42.090 --> 00:12:46.120
applications on your Android
or other type of phone, or

00:12:46.120 --> 00:12:47.540
even server side applications.

00:12:47.540 --> 00:12:50.210
There are some flows-- that we
won't get time to talk about

00:12:50.210 --> 00:12:52.610
today-- but they're for true
server side scenarios.

00:12:52.610 --> 00:12:56.480
You can even skip some of the
parts of this process if you

00:12:56.480 --> 00:13:00.280
can sort of pre-verify the
security and sort of isolated

00:13:00.280 --> 00:13:01.890
nature of your application.

00:13:01.890 --> 00:13:04.140
But the key ones here,
definitely we'll start with

00:13:04.140 --> 00:13:05.070
the web flow.

00:13:05.070 --> 00:13:07.710
Which is I'm running a web
application, the user,

00:13:07.710 --> 00:13:10.740
somebody browses in to my
application, that application

00:13:10.740 --> 00:13:12.760
now needs to use a Google API.

00:13:12.760 --> 00:13:16.200
So it will redirect to Google
for authentication.

00:13:16.200 --> 00:13:19.160
Once Google has verified I am
who I say I am, and is happy

00:13:19.160 --> 00:13:22.920
with me, they redirect back to
my application with a little

00:13:22.920 --> 00:13:26.490
code that my application can
then exchange for those two

00:13:26.490 --> 00:13:31.700
tokens, and go ahead and start
calling the API as it wishes.

00:13:31.700 --> 00:13:34.390
Another way that this can be
done is what's called the

00:13:34.390 --> 00:13:35.500
installed outflow.

00:13:35.500 --> 00:13:38.570
And for sure, the most common
use of this will be in mobile

00:13:38.570 --> 00:13:41.520
applications on iOS
or an Android.

00:13:41.520 --> 00:13:44.300
The user starts using
my application.

00:13:44.300 --> 00:13:46.730
I want access to an API.

00:13:46.730 --> 00:13:48.090
I need to authenticate.

00:13:48.090 --> 00:13:51.100
I'll pop up a web view control
with the Google authentication

00:13:51.100 --> 00:13:52.020
page on it.

00:13:52.020 --> 00:13:54.480
The user authenticates.

00:13:54.480 --> 00:13:57.590
And then when Google is happy
with that authentication,

00:13:57.590 --> 00:13:59.780
there's this funny problem where
we've got to figure out

00:13:59.780 --> 00:14:03.370
how do we get that code back
to the application.

00:14:03.370 --> 00:14:07.120
And amazingly enough, in the
OAuth2.0 world, the way this

00:14:07.120 --> 00:14:09.950
is done is you set the title
of the web view.

00:14:09.950 --> 00:14:12.430
You set the title of the
next page that the

00:14:12.430 --> 00:14:14.700
OAuth server is showing.

00:14:14.700 --> 00:14:18.010
And then the installed
application here will actually

00:14:18.010 --> 00:14:22.070
scrape that web view control,
or whatever it is, grab the

00:14:22.070 --> 00:14:25.740
title, and then exchange that
for an accessToken and

00:14:25.740 --> 00:14:26.960
refreshToken.

00:14:26.960 --> 00:14:28.220
So that's how that does.

00:14:28.220 --> 00:14:32.020
And you can totally see this
being done in your installed

00:14:32.020 --> 00:14:34.210
applications.

00:14:34.210 --> 00:14:37.130
Now it's worth noting that that
installed application

00:14:37.130 --> 00:14:42.630
flow, popping up a web view,
does sort of have some

00:14:42.630 --> 00:14:45.460
security implications and some
security concerns with it.

00:14:45.460 --> 00:14:48.990
Theoretically, anybody can
pop-up an HTML page that sort

00:14:48.990 --> 00:14:52.310
of looks like a Google login
screen, or some sort of other

00:14:52.310 --> 00:14:53.090
login screen.

00:14:53.090 --> 00:14:55.840
And we might want to worry
about that a little bit.

00:14:55.840 --> 00:14:59.160
So there are a couple of options
for us to do it better

00:14:59.160 --> 00:15:03.670
on, in particular here, I'll
talk about iOS and Android.

00:15:03.670 --> 00:15:07.470
On iOS, my application can
actually register a custom URL

00:15:07.470 --> 00:15:10.730
Handler to receive the
code from Google.

00:15:10.730 --> 00:15:14.020
And then also, Google Apps,
whether I'm using Google+ or

00:15:14.020 --> 00:15:18.430
something else on my iOS device,
it will have a custom

00:15:18.430 --> 00:15:19.520
URL Handler.

00:15:19.520 --> 00:15:22.380
And I can actually say, go
ahead and call that to

00:15:22.380 --> 00:15:24.260
authenticate my application.

00:15:24.260 --> 00:15:27.930
Once Google has verified that
my application is properly

00:15:27.930 --> 00:15:31.740
authenticated, it'll actually
call that custom URL Handler

00:15:31.740 --> 00:15:35.470
that I've registered Because I
set that as the redirect URL

00:15:35.470 --> 00:15:36.880
in the API console.

00:15:36.880 --> 00:15:39.260
And that will actually just
switch right back to my

00:15:39.260 --> 00:15:42.700
application with that code that
I need to exchange for

00:15:42.700 --> 00:15:44.160
the two tokens.

00:15:44.160 --> 00:15:45.210
So that's actually a way.

00:15:45.210 --> 00:15:46.540
It is a little funny in iOS.

00:15:46.540 --> 00:15:48.630
You'll see the app quickly
switch to Google.

00:15:48.630 --> 00:15:50.670
And then, if I've already
authenticated, it'll just

00:15:50.670 --> 00:15:52.210
actually switch right
back to my app.

00:15:52.210 --> 00:15:54.795
Otherwise, I'll enter my
username, password, and then

00:15:54.795 --> 00:15:55.890
it'll switch back to my app.

00:15:55.890 --> 00:15:56.820
It works really well.

00:15:56.820 --> 00:16:00.420
And again, it's definitely
more secure than

00:16:00.420 --> 00:16:02.430
a web page or something.

00:16:02.430 --> 00:16:05.260
The great part is that actually,
for Android users,

00:16:05.260 --> 00:16:07.960
there are built in authorization
managers to do

00:16:07.960 --> 00:16:09.900
all of this for you,
and handle OAuth.

00:16:09.900 --> 00:16:12.840
And indeed, if you're trying
to authenticate against the

00:16:12.840 --> 00:16:16.150
sort of priming account on your
Android device, it'll

00:16:16.150 --> 00:16:18.060
just seamlessly go
through the whole

00:16:18.060 --> 00:16:19.510
authentication process for you.

00:16:19.510 --> 00:16:22.850
So that is definitely the most
secure way to do that on those

00:16:22.850 --> 00:16:24.910
two mobile platforms.

00:16:24.910 --> 00:16:28.790
For web applications, also a lot
of people are starting to

00:16:28.790 --> 00:16:31.840
move away from this switch
to a full Google page,

00:16:31.840 --> 00:16:34.590
authenticate, and then switch
back to my application.

00:16:34.590 --> 00:16:37.450
And there's this new methodology
being done using

00:16:37.450 --> 00:16:40.820
HTML5's Window postMessage.

00:16:40.820 --> 00:16:44.390
Where actually I create an
iFrame with the Google

00:16:44.390 --> 00:16:45.980
authentication system in it.

00:16:45.980 --> 00:16:47.390
I post messages to it.

00:16:47.390 --> 00:16:49.760
It decides whether it needs
to do a pop-up, and get my

00:16:49.760 --> 00:16:51.710
username, password,
and everything.

00:16:51.710 --> 00:16:55.000
And then my web application
and the iFrame communicate

00:16:55.000 --> 00:16:55.600
with each other.

00:16:55.600 --> 00:16:57.130
Get the code back.

00:16:57.130 --> 00:16:59.160
Exchange those for tokens
and everything.

00:16:59.160 --> 00:17:00.930
So this is a new way
that's being done.

00:17:00.930 --> 00:17:03.580
You're seeing this a lot right
now with Google+, and I think

00:17:03.580 --> 00:17:08.760
you'll see this expand to a
lot more services here at

00:17:08.760 --> 00:17:09.630
Google and everything.

00:17:09.630 --> 00:17:12.030
So it's definitely something
you can explore.

00:17:12.030 --> 00:17:14.930
Especially if you're really
working with HTML5 and a lot

00:17:14.930 --> 00:17:17.359
of the new stuff.

00:17:17.359 --> 00:17:18.680
And back to Paul.

00:17:18.680 --> 00:17:21.099
PAUL MATTHEWS: So OAuth2
best practices.

00:17:21.099 --> 00:17:24.069
To start off, although we give
you a refreshToken and an

00:17:24.069 --> 00:17:27.960
accessToken, we really expect
you to use the accessToken as

00:17:27.960 --> 00:17:29.170
much as possible.

00:17:29.170 --> 00:17:32.860
So yes, in theory, you could
refresh your accessToken on

00:17:32.860 --> 00:17:35.940
every call to the API, but
firstly, you making pointless

00:17:35.940 --> 00:17:38.070
additional calls to our API.

00:17:38.070 --> 00:17:40.330
That's going to be a performance
hit to you.

00:17:40.330 --> 00:17:44.210
And secondly, it's going to
increase our load and slow

00:17:44.210 --> 00:17:47.310
down the whole process, our end
as well, meaning a lower

00:17:47.310 --> 00:17:48.860
quality of service
for yourselves.

00:17:48.860 --> 00:17:54.090
So we really expect you to honor
the timeout value of any

00:17:54.090 --> 00:17:55.860
returned token.

00:17:55.860 --> 00:17:58.780
Secondly, you must make
sure you store the

00:17:58.780 --> 00:18:00.280
refreshToken for reuse.

00:18:00.280 --> 00:18:03.680
If you don't store the
refreshToken, what you end up

00:18:03.680 --> 00:18:06.440
with is always having to us
for user interaction.

00:18:06.440 --> 00:18:09.510
And obviously, that's just
about acceptable on some

00:18:09.510 --> 00:18:12.100
applications, but if you're
talking about any services or

00:18:12.100 --> 00:18:14.320
anything like that, that you
don't want a user involved in,

00:18:14.320 --> 00:18:16.190
then that's going to be
a serious problem.

00:18:16.190 --> 00:18:20.050
And secondly, a user is going to
become rather agitated with

00:18:20.050 --> 00:18:22.700
your application if you're
having to give consent on

00:18:22.700 --> 00:18:25.900
every request.

00:18:25.900 --> 00:18:28.810
And also obviously, it reduces
the number of round trips to

00:18:28.810 --> 00:18:30.430
the service.

00:18:30.430 --> 00:18:33.030
So how to handle
expired tokens.

00:18:33.030 --> 00:18:36.280
What do I need to handle
expired tokens?

00:18:36.280 --> 00:18:39.445
Basically, your application--

00:18:44.510 --> 00:18:45.560
MARC WANDSCHNEIDER: Your
application today, when you're

00:18:45.560 --> 00:18:47.750
using ClientLogin, has
to already have

00:18:47.750 --> 00:18:50.390
logic to handle timeouts.

00:18:50.390 --> 00:18:52.440
Like you need to be able to
handle the case where Google

00:18:52.440 --> 00:18:54.670
servers come back and
say your client auth

00:18:54.670 --> 00:18:56.520
token has already expired.

00:18:56.520 --> 00:19:00.785
So you already need to have
logic today to say my token

00:19:00.785 --> 00:19:02.280
has expired.

00:19:02.280 --> 00:19:05.680
Pause this call, go ahead and
reauthenticate, and then go

00:19:05.680 --> 00:19:07.040
back and resume that call.

00:19:07.040 --> 00:19:10.380
So you've probably already
got logic for this.

00:19:10.380 --> 00:19:13.860
Or you should have logic to
handle this sort of token

00:19:13.860 --> 00:19:14.670
timeout thing.

00:19:14.670 --> 00:19:18.300
So theoretically, switching to
OAuth, with the timeout being

00:19:18.300 --> 00:19:20.330
every hour, shouldn't
be a big deal.

00:19:20.330 --> 00:19:22.400
If you haven't written that code
yet, you're definitely

00:19:22.400 --> 00:19:24.420
going to need to now [INAUDIBLE]
timeouts.

00:19:24.420 --> 00:19:27.310
PAUL MATTHEWS: Additionally,
on top of that, if you are

00:19:27.310 --> 00:19:30.750
writing the code to handle the
handshake that the client

00:19:30.750 --> 00:19:33.790
consent you don't want to
write that code and

00:19:33.790 --> 00:19:34.920
then ship it out.

00:19:34.920 --> 00:19:37.960
This consent step could,
in theory, come

00:19:37.960 --> 00:19:40.050
back and hit you again.

00:19:40.050 --> 00:19:42.750
So the point is that you want
to leave that in your code,

00:19:42.750 --> 00:19:47.860
even if it's a service
application-- like a Chrome

00:19:47.860 --> 00:19:48.760
job or something--

00:19:48.760 --> 00:19:52.030
you still want to leave that in
your code, and then just to

00:19:52.030 --> 00:19:55.450
be able to handle
that experience.

00:19:55.450 --> 00:19:57.990
So in summary, change
is coming.

00:19:57.990 --> 00:20:01.560
It shouldn't be a big deal, and
it shouldn't be too much

00:20:01.560 --> 00:20:05.070
coding or hard work on your
end to handle it.

00:20:05.070 --> 00:20:08.470
It'll actually improve the
application security and thus

00:20:08.470 --> 00:20:12.410
reduce liability and worry
for system administrators

00:20:12.410 --> 00:20:14.090
everywhere.

00:20:14.090 --> 00:20:17.840
Any client library users of
Google client libraries should

00:20:17.840 --> 00:20:22.390
be able to switch over
now, or pretty soon.

00:20:22.390 --> 00:20:23.280
MARC WANDSCHNEIDER:
Change is coming.

00:20:23.280 --> 00:20:26.370
I'm immediately like,
winter is coming.

00:20:26.370 --> 00:20:28.970
PAUL MATTHEWS: So this would be
time for a Q&amp;A had we got

00:20:28.970 --> 00:20:31.540
any people on the Hang Out,
but unfortunately no one

00:20:31.540 --> 00:20:32.250
showed up today.

00:20:32.250 --> 00:20:34.090
So we're going to
skip past this.

00:20:34.090 --> 00:20:36.450
So on to some links for you.

00:20:36.450 --> 00:20:40.115
The main one here is the
developers.googl

00:20:40.115 --> 00:20:43.850
e.com/accounts/docs/OAuth2.

00:20:43.850 --> 00:20:46.810
This will give you the vast
majority of OAuth2 information

00:20:46.810 --> 00:20:47.600
you'll need.

00:20:47.600 --> 00:20:48.670
MARC WANDSCHNEIDER: If you
don't remember that, just

00:20:48.670 --> 00:20:51.700
Google search Google
APIs OAuth.

00:20:51.700 --> 00:20:54.680
It's the first organic
result, absolutely.

00:20:54.680 --> 00:20:57.960
PAUL MATTHEWS: Secondly, if you
find yourself needing to

00:20:57.960 --> 00:21:00.380
register your account, you
need to look at the

00:21:00.380 --> 00:21:03.360
code.google.com/apis/console.

00:21:03.360 --> 00:21:05.060
So that'll be where you register
your account, as I

00:21:05.060 --> 00:21:08.250
showed you previously.

00:21:08.250 --> 00:21:12.700
So, thank you for watching
this OAuth2 session.

00:21:12.700 --> 00:21:14.620
I've been Paul Matthews.

00:21:14.620 --> 00:21:17.340
MARC WANDSCHNEIDER: You still
are Paul Matthews.

00:21:17.340 --> 00:21:19.730
And I remain Marc Wandschneider,
and it's been a

00:21:19.730 --> 00:21:20.990
lot of fun, and we
hope you learned

00:21:20.990 --> 00:21:22.750
something from it today.

00:21:22.750 --> 00:21:24.000
PAUL MATTHEWS: Thank
you all so much.

00:21:32.150 --> 00:22:29.473
[MUSIC PLAYING]

