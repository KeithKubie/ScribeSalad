WEBVTT
Kind: captions
Language: en

00:00:00.208 --> 00:00:02.750
GAVIN KINGHALL WERE: So vitals
was the most requested session

00:00:02.750 --> 00:00:03.708
here at Playtime today.

00:00:03.708 --> 00:00:07.372
So we're going to kind of assume
that you all know about vitals.

00:00:07.372 --> 00:00:09.830
And we're going to tell you
what we've been up to recently.

00:00:09.830 --> 00:00:12.470
Also, we're going to go into
a bit more detail about what

00:00:12.470 --> 00:00:16.020
Tian announced earlier.

00:00:16.020 --> 00:00:17.520
And then Fergus is
going to come up,

00:00:17.520 --> 00:00:19.353
and he's going to tell
you a little bit more

00:00:19.353 --> 00:00:22.440
about why you should really,
really care about your vitals.

00:00:22.440 --> 00:00:25.670
So first thing, I made
a bit of an assumption

00:00:25.670 --> 00:00:28.120
that you do all know about
your Android vitals, right?

00:00:28.120 --> 00:00:31.130
Can I get a show of
hands maybe, everybody

00:00:31.130 --> 00:00:33.770
who's using Android vitals?

00:00:33.770 --> 00:00:36.770
Not bad, but I can
see quite a few here

00:00:36.770 --> 00:00:38.690
that didn't put their hands up.

00:00:38.690 --> 00:00:41.600
So just for you and
your vitals, it's

00:00:41.600 --> 00:00:45.230
15 engineering metrics covering
five different performance

00:00:45.230 --> 00:00:48.980
areas that really give you
insight into the things

00:00:48.980 --> 00:00:51.140
that users care about the most.

00:00:51.140 --> 00:00:54.410
So it represents the performance
and quality of your app

00:00:54.410 --> 00:01:00.380
as experienced by real users on
real devices in the real world.

00:01:00.380 --> 00:01:03.440
And most importantly,
it gives you,

00:01:03.440 --> 00:01:06.710
as business leaders,
maybe people

00:01:06.710 --> 00:01:10.010
outside of the engineering team,
insight into what is normally

00:01:10.010 --> 00:01:11.720
just an engineering metric.

00:01:11.720 --> 00:01:16.970
It gives you a very
great, brilliant overview,

00:01:16.970 --> 00:01:22.280
I suppose, of what are the main
quality issues that are really

00:01:22.280 --> 00:01:25.190
affecting your app, and
perhaps why you're not

00:01:25.190 --> 00:01:28.190
seeing the performance
on your business metrics

00:01:28.190 --> 00:01:31.550
that you may expect.

00:01:31.550 --> 00:01:35.120
But having said that, it's
still really, really important

00:01:35.120 --> 00:01:38.120
to recognize that
these are still

00:01:38.120 --> 00:01:40.700
engineering quality metrics.

00:01:40.700 --> 00:01:44.090
It's up to your engineering
team to actually fix the issues

00:01:44.090 --> 00:01:46.257
that vitals identifies.

00:01:46.257 --> 00:01:47.840
Therefore, it's
really, really crucial

00:01:47.840 --> 00:01:50.240
that your engineering team
actually is using vitals

00:01:50.240 --> 00:01:51.710
and is going into
the Play Console

00:01:51.710 --> 00:01:53.750
and is looking through
there, going through all

00:01:53.750 --> 00:01:55.460
of the metrics that
we have available,

00:01:55.460 --> 00:01:58.160
to see what issues
are coming up.

00:01:58.160 --> 00:02:01.990
Because those are the
guys that can fix it.

00:02:01.990 --> 00:02:05.100
So, for all of those here
who didn't put their hand up

00:02:05.100 --> 00:02:09.030
just now, come join the
100,000 developers, including I

00:02:09.030 --> 00:02:12.570
think about half, maybe more
than half of the developers

00:02:12.570 --> 00:02:17.140
that I saw just now, that
are using vitals already.

00:02:17.140 --> 00:02:19.840
So I just want to do a
quick overview of what's

00:02:19.840 --> 00:02:21.217
in vitals today,
and a few things

00:02:21.217 --> 00:02:22.300
that we launched recently.

00:02:22.300 --> 00:02:24.383
And then I'll go into a
bit more detail about what

00:02:24.383 --> 00:02:26.610
we're launching today.

00:02:26.610 --> 00:02:31.110
So Android vitals is split
into five different performance

00:02:31.110 --> 00:02:31.740
areas.

00:02:31.740 --> 00:02:35.790
So we have stability,
battery, rendering,

00:02:35.790 --> 00:02:38.760
and then since Google I/O,
we added app startup time

00:02:38.760 --> 00:02:40.480
and also permissions.

00:02:40.480 --> 00:02:43.200
Now, within those five
performance areas,

00:02:43.200 --> 00:02:46.880
we have 15 different
metrics for you.

00:02:46.880 --> 00:02:49.790
Those metrics are
broken down by at least

00:02:49.790 --> 00:02:50.970
three different dimensions.

00:02:50.970 --> 00:02:54.140
Now, the set of dimension varies
from one metric to another.

00:02:54.140 --> 00:02:58.070
But generally, we have things
like operating system version,

00:02:58.070 --> 00:03:01.860
APK version, released tracks,
or whether it is alpha,

00:03:01.860 --> 00:03:04.070
beta, or prods.

00:03:04.070 --> 00:03:06.170
And then there's a
few other metrics

00:03:06.170 --> 00:03:09.560
which are kind of more specific
to a particular-- sorry, a few

00:03:09.560 --> 00:03:12.410
more dimensions that are more
specific to particular metrics.

00:03:12.410 --> 00:03:14.360
So we have a lot of
data that you can

00:03:14.360 --> 00:03:17.480
really, really delve into here.

00:03:17.480 --> 00:03:20.140
Let me go into a little bit
more detail about the things

00:03:20.140 --> 00:03:21.647
that we launched to I/O as well.

00:03:21.647 --> 00:03:23.230
So with app startup
time, we're trying

00:03:23.230 --> 00:03:26.200
to help you provide
quick-launching apps.

00:03:26.200 --> 00:03:31.790
So across the three different
states that an app may be in,

00:03:31.790 --> 00:03:36.520
we want to allow you to measure
how often an app takes too

00:03:36.520 --> 00:03:38.050
long to render its first frame.

00:03:38.050 --> 00:03:40.317
So from cold start, if it
took 45 seconds or more,

00:03:40.317 --> 00:03:42.400
then that will be highlighted
on the first metric.

00:03:42.400 --> 00:03:45.190
And same for warm start
and hot start and so forth.

00:03:45.190 --> 00:03:48.310
So you know when
the user is waiting

00:03:48.310 --> 00:03:51.860
too long to actually get into
your app in the first place.

00:03:51.860 --> 00:03:53.870
We also added permissions.

00:03:53.870 --> 00:03:56.830
Now, you all know about the
dynamic permission model

00:03:56.830 --> 00:04:00.160
that we added not so
long ago to Android.

00:04:00.160 --> 00:04:05.260
Now, what we find very
often is that users,

00:04:05.260 --> 00:04:07.468
if they are just presented
with a permission dialog--

00:04:07.468 --> 00:04:08.968
hey, I want to use
your camera, hey,

00:04:08.968 --> 00:04:10.310
I want to use your storage--

00:04:10.310 --> 00:04:12.020
and there's no
context for the user,

00:04:12.020 --> 00:04:16.269
there's nothing to tell
them why they should grant

00:04:16.269 --> 00:04:18.430
the app this permission,
then quite often they'll

00:04:18.430 --> 00:04:20.279
go, well, no.

00:04:20.279 --> 00:04:25.600
And your app may not then
have the full functionality

00:04:25.600 --> 00:04:27.800
that you want that
user to experience.

00:04:27.800 --> 00:04:31.480
So this will track how
often your users are denying

00:04:31.480 --> 00:04:34.000
the permissions that you
may rely on in your app

00:04:34.000 --> 00:04:35.750
to provide the full experience.

00:04:35.750 --> 00:04:38.680
So this is why
perhaps you would--

00:04:38.680 --> 00:04:42.190
if you have a poor
performance on this metric,

00:04:42.190 --> 00:04:44.020
then it's an indicator
that you need

00:04:44.020 --> 00:04:47.170
to add that additional
context when you're requesting

00:04:47.170 --> 00:04:50.860
permission, so you can actually
provide the value to the user.

00:04:50.860 --> 00:04:52.540
What is in it for them?

00:04:52.540 --> 00:04:57.840
What's really the reason behind
granting this permission?

00:04:57.840 --> 00:05:00.550
We also added
category benchmarks.

00:05:00.550 --> 00:05:04.140
Now this is where you can
compare your Android vitals

00:05:04.140 --> 00:05:06.750
performance to that
of your competition

00:05:06.750 --> 00:05:08.350
within the same category.

00:05:08.350 --> 00:05:12.800
So if, for example,
your crash rate is 2%,

00:05:12.800 --> 00:05:14.820
and you think, well,
that's kind of OK,

00:05:14.820 --> 00:05:18.773
I'm only crashing on
2% of daily sessions.

00:05:18.773 --> 00:05:20.940
But then you would look
into the category benchmark,

00:05:20.940 --> 00:05:23.022
and you see across your
category, well, actually

00:05:23.022 --> 00:05:24.480
all of your
competitors on average,

00:05:24.480 --> 00:05:28.200
they're crashing 0.1%, 0.2%,
something much, much lower

00:05:28.200 --> 00:05:28.980
than you are.

00:05:28.980 --> 00:05:30.690
Then you know that
you are well behind,

00:05:30.690 --> 00:05:35.180
and that you need to catch
up with your competition.

00:05:35.180 --> 00:05:38.120
We also added anomaly detection.

00:05:38.120 --> 00:05:41.150
Now, this is really
really, really powerful.

00:05:41.150 --> 00:05:44.200
This will send you an alert
when any of your metrics--

00:05:44.200 --> 00:05:47.690
or, excuse me-- four
of your metrics--

00:05:47.690 --> 00:05:50.260
app not responding,
crash, excessive wakeup,

00:05:50.260 --> 00:05:53.770
and partial background
wakelocks, when they start

00:05:53.770 --> 00:05:57.850
trending upwards, or perhaps
even when they're spiking,

00:05:57.850 --> 00:05:59.680
maybe you've done a
new release, or you've

00:05:59.680 --> 00:06:01.890
enabled a new feature
server side or something,

00:06:01.890 --> 00:06:04.390
and, all of a sudden, your crash
rate goes through the roof.

00:06:04.390 --> 00:06:07.450
This will send you
an alert so that you

00:06:07.450 --> 00:06:10.277
can take action on that as
soon as you possibly can.

00:06:10.277 --> 00:06:11.860
It requires you to
go into the console

00:06:11.860 --> 00:06:13.000
and sign up for this alert.

00:06:13.000 --> 00:06:15.000
Make sure your engineering
teams, in particular,

00:06:15.000 --> 00:06:18.070
go and do that, so that
they receive these alerts,

00:06:18.070 --> 00:06:23.980
and they can take action before
your users start complaining.

00:06:23.980 --> 00:06:29.200
Then the last thing we announced
at Google I/O is core vitals.

00:06:29.200 --> 00:06:32.920
Now, there's 15 different
metrics in Android vitals

00:06:32.920 --> 00:06:35.410
today.

00:06:35.410 --> 00:06:37.180
Now, we identified
some of those that

00:06:37.180 --> 00:06:40.850
are particularly important
to the user experience.

00:06:40.850 --> 00:06:42.900
These are the ones you
see on the screen here.

00:06:42.900 --> 00:06:44.560
So they have crash
rate and ANR rates,

00:06:44.560 --> 00:06:47.830
which are from the
stability performance area.

00:06:47.830 --> 00:06:49.960
And then partial
background wakelocks

00:06:49.960 --> 00:06:52.570
and excessive wakeups,
which are from the battery

00:06:52.570 --> 00:06:55.930
sort of resource usage
performance area.

00:06:55.930 --> 00:06:58.660
Now, the reason we did this
is because these-- as I said,

00:06:58.660 --> 00:07:00.910
these are the ones that are
most important to the user

00:07:00.910 --> 00:07:02.120
experience.

00:07:02.120 --> 00:07:03.970
Now, there's a lot of metrics.

00:07:03.970 --> 00:07:04.750
There are 15.

00:07:04.750 --> 00:07:07.390
But these are the ones that
we have prioritized in order

00:07:07.390 --> 00:07:10.210
to help you prioritize.

00:07:10.210 --> 00:07:13.997
We've also added an additional
piece of information

00:07:13.997 --> 00:07:16.330
to each of these metrics,
which we call the bad behavior

00:07:16.330 --> 00:07:17.450
threshold.

00:07:17.450 --> 00:07:21.100
This is essentially
the line in the sand

00:07:21.100 --> 00:07:23.060
for the store as a whole.

00:07:23.060 --> 00:07:25.130
If you're below the
bad behavior threshold,

00:07:25.130 --> 00:07:27.910
then you can consider your
app to be performing well

00:07:27.910 --> 00:07:29.860
on that metric.

00:07:29.860 --> 00:07:33.490
And then we have one defined for
each of the core vitals there.

00:07:33.490 --> 00:07:37.240
If you're above it, then
that means you've got--

00:07:37.240 --> 00:07:39.130
you need to fix that metric.

00:07:39.130 --> 00:07:41.342
And you need to do
it pretty quickly.

00:07:41.342 --> 00:07:43.300
Now, I wanted to go in
a little bit more detail

00:07:43.300 --> 00:07:46.480
as well about what Tian
referred to earlier that we're

00:07:46.480 --> 00:07:47.320
launching today.

00:07:47.320 --> 00:07:49.690
So this is where we're
linking Android vitals

00:07:49.690 --> 00:07:51.250
with pre-launch reports.

00:07:51.250 --> 00:07:54.130
Now, pre-launch reports, if
you're not familiar with it,

00:07:54.130 --> 00:07:57.760
is a system built into
the Play Console, where

00:07:57.760 --> 00:08:01.360
we take your app and
run it on real devices,

00:08:01.360 --> 00:08:04.630
sitting in a data center, on
what we call the Firebase Cloud

00:08:04.630 --> 00:08:06.610
Test Lab.

00:08:06.610 --> 00:08:09.850
And we automatically
navigate through that app

00:08:09.850 --> 00:08:12.190
and see what the app does.

00:08:12.190 --> 00:08:13.490
We record screenshots.

00:08:13.490 --> 00:08:14.860
We record video.

00:08:14.860 --> 00:08:18.010
We capture stack
traces if it crashes.

00:08:18.010 --> 00:08:21.010
We capture video of it
crashing if it does.

00:08:21.010 --> 00:08:22.180
We capture the logs.

00:08:22.180 --> 00:08:24.050
And we capture a
lot more metadata

00:08:24.050 --> 00:08:27.310
than you will typically
find in Android vitals.

00:08:27.310 --> 00:08:30.100
Because vitals is pulling
its data from real users

00:08:30.100 --> 00:08:33.130
in the real world, and there's
a lot of privacy implications

00:08:33.130 --> 00:08:35.590
of what we can pull
and what we can't.

00:08:35.590 --> 00:08:38.200
So if a particular
crash has already

00:08:38.200 --> 00:08:41.380
been identified by
pre-launch reports,

00:08:41.380 --> 00:08:46.070
then that crash will be linked
to in the Android vitals UI

00:08:46.070 --> 00:08:46.570
now.

00:08:46.570 --> 00:08:50.350
So you'll have all of that
metadata available to you,

00:08:50.350 --> 00:08:56.380
so you can really figure out
much more quickly how to action

00:08:56.380 --> 00:09:00.520
and fix that crash
that is occurring.

00:09:00.520 --> 00:09:05.170
Similarly, we've updated
pre--launch reports to make

00:09:05.170 --> 00:09:07.930
that link in the
other direction also.

00:09:07.930 --> 00:09:11.320
If pre-launch reports has
identified a crash that is

00:09:11.320 --> 00:09:14.770
actually already happening
on production devices--

00:09:14.770 --> 00:09:17.710
as I said, real
users, real world--

00:09:17.710 --> 00:09:21.110
then you will see that in the
pre-launch reports UI as well.

00:09:21.110 --> 00:09:24.550
So this will allow you to
prioritize the crashes that

00:09:24.550 --> 00:09:27.430
have been identified
in pre-launch reports,

00:09:27.430 --> 00:09:30.430
and really work on the ones
first that are actually

00:09:30.430 --> 00:09:33.620
affecting real users.

00:09:33.620 --> 00:09:35.260
So now I want to
hand over to Fergus.

00:09:35.260 --> 00:09:38.170
He's going to tell you
a lot more about why

00:09:38.170 --> 00:09:41.650
you should really, really
pay attention to your vitals.

00:09:41.650 --> 00:09:43.814
Thank you.

00:09:43.814 --> 00:09:46.670
[APPLAUSE]

00:09:49.013 --> 00:09:50.180
FERGUS HURLEY: Hi, everyone.

00:09:50.180 --> 00:09:51.222
My name is Fergus Hurley.

00:09:51.222 --> 00:09:53.620
And I'm the product
manager for Android vitals.

00:09:53.620 --> 00:09:56.920
Hands up here, who wants more
five-star ratings and less

00:09:56.920 --> 00:09:58.456
one-star ratings.

00:09:58.456 --> 00:09:59.442
OK.

00:09:59.442 --> 00:10:01.150
Hopefully everyone,
unless you're working

00:10:01.150 --> 00:10:02.650
for one of your competitors.

00:10:02.650 --> 00:10:06.400
And so we learned a lot of
lessons over the last year

00:10:06.400 --> 00:10:09.370
from developers who have
actually improved their vitals.

00:10:09.370 --> 00:10:11.970
And I'm here to share some of
those lessons with you today.

00:10:11.970 --> 00:10:13.720
Feel free to keep your
phones out and take

00:10:13.720 --> 00:10:17.220
photos of these lessons.

00:10:17.220 --> 00:10:21.530
So we did analysis over all
the reviews on Google Play.

00:10:21.530 --> 00:10:22.520
In English.

00:10:22.520 --> 00:10:25.010
And what we found
is that when users

00:10:25.010 --> 00:10:28.820
are talking about performance
and stability issues,

00:10:28.820 --> 00:10:30.710
they talk about them
40% of the time when

00:10:30.710 --> 00:10:33.380
they leave a one-star review.

00:10:33.380 --> 00:10:35.510
And when people leave
a five-star review,

00:10:35.510 --> 00:10:38.750
they're talking about speed,
design, and usability,

00:10:38.750 --> 00:10:40.515
over 70% of the time.

00:10:40.515 --> 00:10:42.390
So we all know that
performance is important,

00:10:42.390 --> 00:10:44.810
and we feel it when
our apps on our phones

00:10:44.810 --> 00:10:47.150
don't actually behave correctly.

00:10:47.150 --> 00:10:48.980
But here we have
the data to show

00:10:48.980 --> 00:10:51.247
how important it is to users.

00:10:51.247 --> 00:10:53.330
And if you want to be able
to improve your rating,

00:10:53.330 --> 00:10:56.070
you need to be able to focus
on these areas yourself.

00:10:58.938 --> 00:11:01.243
As I said, we've been
learning from developers

00:11:01.243 --> 00:11:02.660
over the past year,
and developers

00:11:02.660 --> 00:11:03.830
have been using our tools.

00:11:03.830 --> 00:11:05.360
And as a result,
we've actually seen

00:11:05.360 --> 00:11:07.380
improvements in the ecosystem.

00:11:07.380 --> 00:11:09.050
So we've seen a
nice bump in users

00:11:09.050 --> 00:11:12.140
talking about speed, design,
usability, over the past year

00:11:12.140 --> 00:11:14.420
when leaving five-star reviews.

00:11:14.420 --> 00:11:18.020
But more importantly, we've
seen a large reduction

00:11:18.020 --> 00:11:20.630
of users talking about
stability and bugs

00:11:20.630 --> 00:11:23.450
and resource usage, which
includes battery and memory

00:11:23.450 --> 00:11:27.110
usage, when leaving
one-star reviews.

00:11:27.110 --> 00:11:29.090
Now, let's jump
into some examples

00:11:29.090 --> 00:11:33.560
of developers who have been
improving their stability

00:11:33.560 --> 00:11:36.360
of their application.

00:11:36.360 --> 00:11:39.620
So the team behind "Merge
Dragons," the very popular

00:11:39.620 --> 00:11:42.500
Zynga game, was able
to reduce their number

00:11:42.500 --> 00:11:45.920
of one-star reviews
by over 50% by being

00:11:45.920 --> 00:11:48.110
able to use vitals
to pinpoint issues

00:11:48.110 --> 00:11:50.090
within their application.

00:11:50.090 --> 00:11:53.100
This enabled them to be able
to boost their user engagement,

00:11:53.100 --> 00:11:56.502
while saving their
engineering team a lot of time

00:11:56.502 --> 00:11:57.710
in terms of debugging issues.

00:12:01.330 --> 00:12:04.220
The Tapps Games team was
able to reduce their ANR rate

00:12:04.220 --> 00:12:07.400
by over 80%, because they
were able to pinpoint

00:12:07.400 --> 00:12:10.460
a specific set of devices that
were actually having an ANR

00:12:10.460 --> 00:12:11.520
issue.

00:12:11.520 --> 00:12:15.470
And ANRs are unique
to the Play Console.

00:12:15.470 --> 00:12:17.750
This is where your
application is not responding,

00:12:17.750 --> 00:12:20.030
and the Android platform
is able to detect that

00:12:20.030 --> 00:12:23.790
and is not reported in many
other performance reporting

00:12:23.790 --> 00:12:24.290
tools.

00:12:24.290 --> 00:12:25.915
And I really encourage
you to check out

00:12:25.915 --> 00:12:27.770
the ANR section of
the Play Console,

00:12:27.770 --> 00:12:30.410
so you can be able to deliver
a more responsive application

00:12:30.410 --> 00:12:31.040
to your users.

00:12:33.920 --> 00:12:36.320
Reddit, the very
popular app, was

00:12:36.320 --> 00:12:40.790
able to reduce their crash rate
by 75% using Android vitals.

00:12:40.790 --> 00:12:43.880
But more importantly,
as a result of the peer

00:12:43.880 --> 00:12:47.540
benchmarks that we actually
have available where

00:12:47.540 --> 00:12:50.360
you can see how you compare with
other apps in your category,

00:12:50.360 --> 00:12:51.992
as Gavin mentioned
earlier, they were

00:12:51.992 --> 00:12:53.450
able to understand
that now they're

00:12:53.450 --> 00:12:55.790
one of the top applications
out there in terms

00:12:55.790 --> 00:12:57.232
of being very stable.

00:12:57.232 --> 00:12:58.940
And this enabled them
to be able to share

00:12:58.940 --> 00:13:01.130
that data with other people
within their company.

00:13:01.130 --> 00:13:03.520
So the engineering team
was able to say, hey, it

00:13:03.520 --> 00:13:05.570
was worthwhile for us
to invest in improving

00:13:05.570 --> 00:13:07.340
our stability over
the past few months,

00:13:07.340 --> 00:13:09.673
because now we're one of the
most stable apps out there.

00:13:13.597 --> 00:13:15.430
Another feature that
Gavin mentioned earlier

00:13:15.430 --> 00:13:16.840
was anomaly detection.

00:13:16.840 --> 00:13:18.340
This is where you
can be able to get

00:13:18.340 --> 00:13:21.970
alerted when you have a major
change in the performance

00:13:21.970 --> 00:13:23.710
of your application.

00:13:23.710 --> 00:13:27.350
The team behind Lovoo had
signed up for anomaly alerts.

00:13:27.350 --> 00:13:30.000
And when they had a spike,
which increased their ANR

00:13:30.000 --> 00:13:32.470
rate by 94%, they
immediately got

00:13:32.470 --> 00:13:34.690
alerted about that
using Android vitals,

00:13:34.690 --> 00:13:36.910
and then were able to
disable and add SDK

00:13:36.910 --> 00:13:38.360
that was causing that issue.

00:13:38.360 --> 00:13:42.010
To be able to work with
that SDK to fix the issue.

00:13:42.010 --> 00:13:44.830
And then be able to
release the fixed app that

00:13:44.830 --> 00:13:48.430
reduced their ANR rate back
down to its previous level,

00:13:48.430 --> 00:13:51.940
and deliver on maximizing
their monetization again.

00:13:56.270 --> 00:13:59.270
Now, we don't think you should
give up working on features

00:13:59.270 --> 00:14:01.460
and improving the
application in other ways.

00:14:01.460 --> 00:14:05.688
But we do think that you can do
focused effort on performance.

00:14:05.688 --> 00:14:07.730
And here you can see a
quote from the ABA English

00:14:07.730 --> 00:14:10.100
team, which spent
one quarter focusing

00:14:10.100 --> 00:14:11.980
on performance improvements.

00:14:11.980 --> 00:14:17.343
And that resulted in a 4.6-star
rating for their application.

00:14:17.343 --> 00:14:19.010
Obviously, you need
to do more than just

00:14:19.010 --> 00:14:22.480
have good vitals to have a
4.6 star rating application.

00:14:22.480 --> 00:14:24.160
You need a really
great application.

00:14:24.160 --> 00:14:28.240
And we know for sure, though,
that you will never get

00:14:28.240 --> 00:14:30.820
a 4.6-star rating app if
you have terrible vitals.

00:14:34.790 --> 00:14:37.330
So I've given some great
examples of individual app

00:14:37.330 --> 00:14:40.310
developers who have
improved their performance.

00:14:40.310 --> 00:14:43.450
We also looked at
the developers who

00:14:43.450 --> 00:14:46.270
had engaged most in the Play
Console since Google I/O

00:14:46.270 --> 00:14:48.040
amongst our top developers.

00:14:48.040 --> 00:14:53.020
And what we found is that they
reduced their crash rate by 50%

00:14:53.020 --> 00:14:55.250
over the past few months.

00:14:55.250 --> 00:14:57.160
And it is really great
because this results

00:14:57.160 --> 00:14:59.830
in a much better experience
for Android end users.

00:14:59.830 --> 00:15:02.370
We have 3 billion-plus
active installs

00:15:02.370 --> 00:15:05.740
that are much more stable
as a result of this top 10%

00:15:05.740 --> 00:15:07.370
of our developers.

00:15:10.448 --> 00:15:12.740
So great that these other
developers are having success

00:15:12.740 --> 00:15:13.580
using vitals.

00:15:13.580 --> 00:15:16.220
Is this really impacting
me and my business?

00:15:16.220 --> 00:15:19.220
Well, we looked at apps that
actually have a high crash

00:15:19.220 --> 00:15:19.910
rate.

00:15:19.910 --> 00:15:23.180
And as Tian mentioned earlier,
users who have a higher crash

00:15:23.180 --> 00:15:27.680
rate leave 52% more
one-star ratings

00:15:27.680 --> 00:15:29.570
than users with a
lower crash rate,

00:15:29.570 --> 00:15:33.100
and 22% more one-star ratings
with a higher ANR rate.

00:15:36.710 --> 00:15:37.210
Great.

00:15:37.210 --> 00:15:39.580
So that finishes the stability
and bugs side of things.

00:15:39.580 --> 00:15:43.000
Now, we're going to move on
to the resource usage side.

00:15:43.000 --> 00:15:48.487
So resource usage is battery,
memory, network usage.

00:15:48.487 --> 00:15:50.320
And a lot of these
metrics are interrelated.

00:15:50.320 --> 00:15:52.195
So one of the metrics
we have on your battery

00:15:52.195 --> 00:15:54.280
in the Play Console
Android vitals section

00:15:54.280 --> 00:15:56.080
is excessive network use.

00:15:56.080 --> 00:15:59.190
Now, this is bad for
end users in two ways.

00:15:59.190 --> 00:16:01.690
One is that you're consuming
their data plan, which might be

00:16:01.690 --> 00:16:03.460
very expensive for that user.

00:16:03.460 --> 00:16:08.030
And two, it consumes their
battery unnecessarily.

00:16:08.030 --> 00:16:10.120
The two metrics to pay
most attention to though

00:16:10.120 --> 00:16:12.790
in this area are the core
vitals the Gavin mentioned.

00:16:12.790 --> 00:16:17.140
The core vitals in battery
being excessive wakeups

00:16:17.140 --> 00:16:19.363
and stuck wakelocks
in the background.

00:16:22.540 --> 00:16:28.000
The Jaumo team was able to
reduce their excessive wakeup

00:16:28.000 --> 00:16:29.053
rate by 70%.

00:16:29.053 --> 00:16:30.970
And just look at this
quote for a second here.

00:16:30.970 --> 00:16:34.510
So they appreciate the
visibility and diagnostics

00:16:34.510 --> 00:16:37.090
tools that Android
vitals provides.

00:16:37.090 --> 00:16:39.100
Because very few tools
out there actually

00:16:39.100 --> 00:16:42.950
help you be able to understand
how your battery is being used

00:16:42.950 --> 00:16:44.412
and uses devices.

00:16:44.412 --> 00:16:46.620
And what they say is they
wouldn't have even noticed,

00:16:46.620 --> 00:16:50.140
or have been able to fix this
issue, without Android vitals.

00:16:50.140 --> 00:16:51.820
So I really encourage
you and your teams

00:16:51.820 --> 00:16:53.905
to be able to use
Android vitals to be

00:16:53.905 --> 00:16:56.675
able to understand how are you
impacting user's batteries.

00:16:59.350 --> 00:16:59.890
Great.

00:16:59.890 --> 00:17:03.250
So now we've covered how you can
avoid those one-star ratings.

00:17:03.250 --> 00:17:05.440
And as I said, we've
increased the number

00:17:05.440 --> 00:17:07.690
of users talking about
these five-star performance

00:17:07.690 --> 00:17:09.222
areas over the past year.

00:17:09.222 --> 00:17:10.764
But we want it now
over the next year

00:17:10.764 --> 00:17:12.609
to see an even larger
increase in users

00:17:12.609 --> 00:17:14.680
talking about these things.

00:17:14.680 --> 00:17:16.720
And so let's jump into
some of the metrics

00:17:16.720 --> 00:17:20.339
that we have to be
able to help with that.

00:17:20.339 --> 00:17:22.390
The Mercado Libre team,
which is behind one

00:17:22.390 --> 00:17:26.030
the most popular e-commerce
destinations in Latin America,

00:17:26.030 --> 00:17:29.320
if not the most
popular, was able to use

00:17:29.320 --> 00:17:32.180
Android vitals to be
able to understand

00:17:32.180 --> 00:17:35.770
how were their permission
requests being appreciated

00:17:35.770 --> 00:17:36.820
by users.

00:17:36.820 --> 00:17:39.610
And what they saw is that when
they built this new feature

00:17:39.610 --> 00:17:42.730
into their application, they
require this permission to be

00:17:42.730 --> 00:17:44.590
enabled, that their
permission denial

00:17:44.590 --> 00:17:47.800
rate was much higher than
other apps in their category.

00:17:47.800 --> 00:17:50.572
And so they worked on
redesigning their application,

00:17:50.572 --> 00:17:52.030
and changing their
strategy for how

00:17:52.030 --> 00:17:53.390
they requested that permission.

00:17:53.390 --> 00:17:56.723
And as a result, they were
able to increase the users who

00:17:56.723 --> 00:17:58.390
were able to get
access to that feature,

00:17:58.390 --> 00:18:02.255
and reduce their
permission denial rate.

00:18:02.255 --> 00:18:05.870
Now, the Mercado Libre team
is a pretty large team.

00:18:05.870 --> 00:18:10.370
It's hundreds of engineers
working on it out there.

00:18:10.370 --> 00:18:13.120
And on their application,
they have many teams

00:18:13.120 --> 00:18:14.530
working on different parts.

00:18:14.530 --> 00:18:19.330
And as a result, one
team introduced an issue

00:18:19.330 --> 00:18:21.850
into the application that caused
a regression in the startup

00:18:21.850 --> 00:18:22.480
time.

00:18:22.480 --> 00:18:24.100
But by keeping an eye
on their Android vitals,

00:18:24.100 --> 00:18:26.475
they were to understand that
this happened, and then work

00:18:26.475 --> 00:18:29.110
with that team to actually
be able to debug that issue

00:18:29.110 --> 00:18:32.223
and reduce back their startup
time to what it was previously.

00:18:36.480 --> 00:18:38.460
Startup time is
really important.

00:18:38.460 --> 00:18:41.490
And Android vitals
measures the startup time

00:18:41.490 --> 00:18:44.250
from when the app is
first interactive.

00:18:44.250 --> 00:18:46.530
Now, there's a lot of other
parts of your application

00:18:46.530 --> 00:18:48.155
that you might
consider, and that users

00:18:48.155 --> 00:18:51.520
might consider, to be part
of the startup as well.

00:18:51.520 --> 00:18:55.680
And so the Lovoo team used
Android vitals and Firebase

00:18:55.680 --> 00:18:58.050
Performance Monitoring
to be able to understand

00:18:58.050 --> 00:19:00.960
how their performance was
throughout the whole lifecycle.

00:19:00.960 --> 00:19:03.180
And what they found is that
their actual performance

00:19:03.180 --> 00:19:03.990
was terrible.

00:19:03.990 --> 00:19:07.200
So they actually rewrote
their whole sign-up and login

00:19:07.200 --> 00:19:09.930
process, and reduced
the startup time

00:19:09.930 --> 00:19:12.190
as reflected in vitals and
in Firebase Performance

00:19:12.190 --> 00:19:13.983
Monitoring.

00:19:13.983 --> 00:19:15.900
Now, I think it's important
to point out here,

00:19:15.900 --> 00:19:17.942
why would you use Firebase
Performance Monitoring

00:19:17.942 --> 00:19:18.897
and Android vitals?

00:19:18.897 --> 00:19:20.730
Well where does Android
vitals get its data,

00:19:20.730 --> 00:19:22.300
is the core question to that.

00:19:22.300 --> 00:19:24.510
So Android vitals
is based on the data

00:19:24.510 --> 00:19:26.812
that comes from the
Android platform itself.

00:19:26.812 --> 00:19:28.770
And this is powered by
the hundreds of millions

00:19:28.770 --> 00:19:31.680
of users who have opted into
sharing their data with Google,

00:19:31.680 --> 00:19:34.340
and you, our partners.

00:19:34.340 --> 00:19:36.690
The Firebase Performance
Monitoring tool

00:19:36.690 --> 00:19:40.440
is based on you instrumenting
your own application,

00:19:40.440 --> 00:19:42.840
and you then being
able to collect data

00:19:42.840 --> 00:19:44.910
at certain points
in your application.

00:19:44.910 --> 00:19:47.850
And it fundamentally comes
down to timers and counters

00:19:47.850 --> 00:19:49.830
in the Firebase Performance
Monitoring tool.

00:19:49.830 --> 00:19:54.720
And so if you want to be able to
really track these performance

00:19:54.720 --> 00:19:56.998
pieces that are important
to getting five-star rating,

00:19:56.998 --> 00:19:59.540
I really encourage you to use
Firebase Performance Monitoring

00:19:59.540 --> 00:20:01.760
or another
performance monitoring

00:20:01.760 --> 00:20:03.690
tool in your
application itself to be

00:20:03.690 --> 00:20:06.710
able to track individual events
that you really care about.

00:20:09.900 --> 00:20:11.240
Great.

00:20:11.240 --> 00:20:13.850
We've covered some
case studies from

00:20:13.850 --> 00:20:15.890
many different
stakeholders here today.

00:20:15.890 --> 00:20:20.353
And on the top right here, you
can see some of the core people

00:20:20.353 --> 00:20:22.520
that you would expect to
have been using performance

00:20:22.520 --> 00:20:24.228
data historically.

00:20:24.228 --> 00:20:26.270
Except for it was very
difficult for these people

00:20:26.270 --> 00:20:28.980
to be able to get the
performance data in the past.

00:20:28.980 --> 00:20:32.300
So we have an Android engineer,
head of mobile engineering,

00:20:32.300 --> 00:20:34.610
and a product manager.

00:20:34.610 --> 00:20:37.460
One of the things that I'm most
proud of with Android vitals

00:20:37.460 --> 00:20:39.950
is how it's changed the
conversation around app

00:20:39.950 --> 00:20:41.670
performance in companies.

00:20:41.670 --> 00:20:44.067
And now we have many
stakeholders, outside

00:20:44.067 --> 00:20:46.400
of the core engineering team
working on the application,

00:20:46.400 --> 00:20:48.950
using performance metrics,
or, as Gavin mentioned,

00:20:48.950 --> 00:20:50.510
these engineering metrics.

00:20:50.510 --> 00:20:53.150
So we had quotes in
this presentation

00:20:53.150 --> 00:20:56.850
from lead mobile product
manager, a CTO, a VP

00:20:56.850 --> 00:20:59.610
of product, and a COO even.

00:20:59.610 --> 00:21:02.915
And so, as we all know, quality
across the whole Android

00:21:02.915 --> 00:21:04.070
ecosystem is improving.

00:21:04.070 --> 00:21:06.140
And if you and your
whole entire company

00:21:06.140 --> 00:21:08.733
are not looking at your
performance of your application

00:21:08.733 --> 00:21:10.400
and these technical
metrics, then you're

00:21:10.400 --> 00:21:11.400
going to be left behind.

00:21:14.018 --> 00:21:19.310
OK, the one last
study that we did,

00:21:19.310 --> 00:21:22.550
this just shows how
increased quality

00:21:22.550 --> 00:21:24.620
equals increased engagement.

00:21:24.620 --> 00:21:26.930
What we did is we
looked at games

00:21:26.930 --> 00:21:29.610
that had users with a
really high crash rate,

00:21:29.610 --> 00:21:33.960
and users who had a low crash
rate, across the same game.

00:21:33.960 --> 00:21:39.620
And what we found is that users
had two and a half minutes less

00:21:39.620 --> 00:21:43.130
engagement in the app when
they had a high crash rate.

00:21:43.130 --> 00:21:45.650
And this trend was
even stronger for users

00:21:45.650 --> 00:21:48.170
who had a high ANR rate.

00:21:48.170 --> 00:21:50.630
Now, this equates to if a
user was playing your game

00:21:50.630 --> 00:21:52.550
every single day,
to about 20 hours

00:21:52.550 --> 00:21:55.940
a year of less engagement
time in your game.

00:21:55.940 --> 00:21:57.600
And we all know time is money.

00:21:57.600 --> 00:22:00.140
So really focusing on
increasing your quality

00:22:00.140 --> 00:22:02.170
will increase the
engagement in your product.

00:22:05.820 --> 00:22:06.320
Great.

00:22:06.320 --> 00:22:09.892
So we're actually going to open
up for questions right now.

00:22:09.892 --> 00:22:11.600
So I think there's
mics around if anybody

00:22:11.600 --> 00:22:12.890
wants to ask a question.

00:22:12.890 --> 00:22:15.015
And Gavin, you want to come
back up, and we answer?

00:22:22.373 --> 00:22:24.540
If you put your hand up,
they'll bring a mic to you.

00:22:24.540 --> 00:22:25.040
Yeah.

00:22:30.250 --> 00:22:31.310
OK, no questions.

00:22:31.310 --> 00:22:32.185
We answered them all.

00:22:35.150 --> 00:22:37.500
Any questions?

00:22:37.500 --> 00:22:38.480
No.

00:22:38.480 --> 00:22:39.050
OK, great.

00:22:39.050 --> 00:22:41.050
We're going to be around
throughout the day.

00:22:41.050 --> 00:22:42.740
You can catch us
during the breaks.

00:22:42.740 --> 00:22:45.620
I will also be in the
blue room at 12:30.

00:22:45.620 --> 00:22:47.390
And you can come and
chat to us there.

00:22:47.390 --> 00:22:50.520
There's resources
at this link here,

00:22:50.520 --> 00:22:52.520
where you can be able to
learn more about vials,

00:22:52.520 --> 00:22:56.690
and be able to improve
your application.

00:22:56.690 --> 00:22:58.780
We'd like to thank
everyone that we

00:22:58.780 --> 00:23:01.340
were able to share case
studies from today.

00:23:01.340 --> 00:23:04.460
And we hope that you will work
on improving your application,

00:23:04.460 --> 00:23:07.220
so that we can be able to share
case studies of your success

00:23:07.220 --> 00:23:08.430
in our talk next year.

00:23:08.430 --> 00:23:09.680
Thank you very much, everyone.

00:23:09.680 --> 00:23:11.530
Thank you, [INAUDIBLE].

