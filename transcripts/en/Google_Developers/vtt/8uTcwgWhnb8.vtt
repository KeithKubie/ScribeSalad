WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.541
RETO MEIER: Welcome to "Build
Out," where real engineers face

00:00:02.541 --> 00:00:03.840
off building fake products.

00:00:03.840 --> 00:00:05.480
Today's challenge,
the smart garden.

00:00:05.480 --> 00:00:08.044
I'm Reto Meier, the inevitable
winner, which means this is--

00:00:08.044 --> 00:00:09.960
COLT MCANLIS: Colt
McAnlis, the only one of us

00:00:09.960 --> 00:00:12.450
who has actually done
any real engineering.

00:00:12.450 --> 00:00:13.710
Whose thumb is the greenest?

00:00:13.710 --> 00:00:15.452
Find out now on "Built Out."

00:00:18.686 --> 00:00:20.790
RETO MEIER: And Colt
lost the coin toss,

00:00:20.790 --> 00:00:22.890
so now he has to go first.

00:00:22.890 --> 00:00:25.430
He'll have four minutes to
describe his smart garden

00:00:25.430 --> 00:00:27.940
solution, including one
arbitrary VP requirement.

00:00:27.940 --> 00:00:29.690
I will then have three
minutes to respond.

00:00:29.690 --> 00:00:31.610
COLT MCANLIS: This week,
our VP of engineering

00:00:31.610 --> 00:00:33.125
has mandated that we use--

00:00:33.125 --> 00:00:34.900
RETO MEIER: The Tasks API.

00:00:34.900 --> 00:00:37.580
COLT MCANLIS: Yes, the
Google Cloud Tasks API.

00:00:37.580 --> 00:00:40.670
RETO MEIER: Yes, the
Google Tasks API.

00:00:40.670 --> 00:00:43.340
We know that YouTube comments
solve all known problems.

00:00:43.340 --> 00:00:46.040
So when we're done, you get
to decide which one of us

00:00:46.040 --> 00:00:48.540
solved the problem better by
adding a comment of your own

00:00:48.540 --> 00:00:49.317
to our video.

00:00:49.317 --> 00:00:51.150
COLT MCANLIS: I've got
the winning solution,

00:00:51.150 --> 00:00:53.480
and I'm about to prove it.

00:00:53.480 --> 00:00:56.420
Real gardeners know that
it's not a passive hobby.

00:00:56.420 --> 00:00:59.379
It requires daily maintenance,
water, sunlight, and attention

00:00:59.379 --> 00:01:01.670
to make sure that those plants
are growing and yielding

00:01:01.670 --> 00:01:03.470
fruit in the optimal ways.

00:01:03.470 --> 00:01:05.540
As such, when I think
of a smart garden,

00:01:05.540 --> 00:01:07.610
I want something that
optimizes this process

00:01:07.610 --> 00:01:10.250
and creates less work
for me, which means

00:01:10.250 --> 00:01:12.527
I want an upgraded CNC machine.

00:01:12.527 --> 00:01:15.110
The trick here is that instead
of a drill bit on the motorized

00:01:15.110 --> 00:01:18.380
head, our smart garden is fitted
with a water spout, a UV light,

00:01:18.380 --> 00:01:20.195
and a camera to take pictures.

00:01:20.195 --> 00:01:22.070
We'll also hook it up
to some nutrient tanks,

00:01:22.070 --> 00:01:24.650
so we can use that to spray
the plants with extra food.

00:01:24.650 --> 00:01:27.530
We could replace the cutting
area with a plant bed

00:01:27.530 --> 00:01:29.720
where the plants
are placed in trays.

00:01:29.720 --> 00:01:31.940
Each tray has a sensor in
it to detect the moisture

00:01:31.940 --> 00:01:34.460
and nutrient levels, as
well as the general weight.

00:01:34.460 --> 00:01:37.190
Because as the plant grows, the
trays are going to get heavier.

00:01:37.190 --> 00:01:41.510
Now, most DIY CNC arms are
controlled by a Raspberry Pi.

00:01:41.510 --> 00:01:43.880
But for a smart garden,
we need something

00:01:43.880 --> 00:01:46.100
that has easier interfaces
to internet connectivity

00:01:46.100 --> 00:01:46.880
and sensors.

00:01:46.880 --> 00:01:50.060
So I'd like to add an
Android Things hub, which,

00:01:50.060 --> 00:01:52.190
besides defining the
logic on driving the arm,

00:01:52.190 --> 00:01:54.710
can also collect sensor data
from the plant nutrient tanks

00:01:54.710 --> 00:01:57.440
and communicate that
with the internet.

00:01:57.440 --> 00:01:59.720
The hub also gives us
a client-side end point

00:01:59.720 --> 00:02:03.530
to receive logic blocks that
define the behavior of the arm.

00:02:03.530 --> 00:02:06.080
See, there's always a
default behavior client side.

00:02:06.080 --> 00:02:08.690
But based upon the weather
data or plant information,

00:02:08.690 --> 00:02:12.480
we'll want to push down updates
to that behavior over time.

00:02:12.480 --> 00:02:14.999
Now, once a day, the client
will go into an analysis mode

00:02:14.999 --> 00:02:17.540
where the arm moves around to
take photos and sensor readings

00:02:17.540 --> 00:02:18.740
for each of the plants.

00:02:18.740 --> 00:02:21.050
This data is then uploaded
to the cloud for analysis.

00:02:21.050 --> 00:02:23.270
And here is the important part.

00:02:23.270 --> 00:02:26.640
Once the content is done being
uploaded in its entirety,

00:02:26.640 --> 00:02:29.577
we need to signal our cloud
applications to start analysis.

00:02:29.577 --> 00:02:31.910
One way to do this would be
to set a cloud function that

00:02:31.910 --> 00:02:34.250
fires off once a
new GCS bucket gets

00:02:34.250 --> 00:02:36.000
new analysis sets uploaded.

00:02:36.000 --> 00:02:38.390
But there's a problem with
that in that currently the max

00:02:38.390 --> 00:02:42.230
duration for a cloud function
is 540 seconds, which feels

00:02:42.230 --> 00:02:43.880
a little constrained to me.

00:02:43.880 --> 00:02:47.450
This is where the Tasks
API comes into play.

00:02:47.450 --> 00:02:50.240
Once the data is done uploading,
the Android Things hub

00:02:50.240 --> 00:02:51.900
will ping an App
Engine front end,

00:02:51.900 --> 00:02:54.890
which is responsible for pushing
requests to the Task API, which

00:02:54.890 --> 00:02:57.530
sometime later will spin
up an App Engine instance

00:02:57.530 --> 00:02:59.060
to handle the work.

00:02:59.060 --> 00:03:02.010
These tasks can run
for up to 24 hours.

00:03:02.010 --> 00:03:04.396
So plenty of time for
us to do our analysis.

00:03:04.396 --> 00:03:06.020
Now we've got the
photos of the plants,

00:03:06.020 --> 00:03:09.320
so we want to recognize things
like decay, bugs, fruit,

00:03:09.320 --> 00:03:10.940
and the size of the leaves.

00:03:10.940 --> 00:03:13.910
To do that, we're going to
train a set of TensorFlow models

00:03:13.910 --> 00:03:16.490
for each of these scenarios
and run our pictures through it

00:03:16.490 --> 00:03:18.890
in order to gain information
about the size, health,

00:03:18.890 --> 00:03:20.330
and growth of each plant.

00:03:20.330 --> 00:03:23.360
But here's the complication--
we can't get to TensorFlow

00:03:23.360 --> 00:03:24.980
from App Engine
standard, which means

00:03:24.980 --> 00:03:27.380
we need to switch over
to App Engine Flex

00:03:27.380 --> 00:03:30.320
and upgrade from the
regular App Engine Tasks API

00:03:30.320 --> 00:03:32.630
to the Cloud Tasks API.

00:03:32.630 --> 00:03:34.340
Once the analysis
is done, the results

00:03:34.340 --> 00:03:35.810
are then pushed to
data sort, which

00:03:35.810 --> 00:03:38.870
it can be accessed by the admin
console, built with Polymer,

00:03:38.870 --> 00:03:41.390
and adhere to material
design principle.

00:03:41.390 --> 00:03:43.100
This allows our
smart garden admin

00:03:43.100 --> 00:03:44.690
to check out the
status of everything,

00:03:44.690 --> 00:03:48.341
and then see the trend lines
in a nice consistent manner.

00:03:48.341 --> 00:03:50.090
Now, in the case that
something goes wrong

00:03:50.090 --> 00:03:52.070
or an action needs to
be taken by the farmer,

00:03:52.070 --> 00:03:55.040
we leverage Pub/Sub to send
messages to registered Android

00:03:55.040 --> 00:03:56.750
devices for creating alerts.

00:03:56.750 --> 00:03:58.400
Finally, the
analysis results will

00:03:58.400 --> 00:04:00.800
be combined with local
weather, day and night cycles,

00:04:00.800 --> 00:04:04.010
and sensor data to create and
update new behavior patterns

00:04:04.010 --> 00:04:05.120
for the arm.

00:04:05.120 --> 00:04:07.820
This will allow our smart garden
to optimize sunlight, watering,

00:04:07.820 --> 00:04:10.010
and nutrients for
each unique plant

00:04:10.010 --> 00:04:12.230
that it's responsible
for, guaranteeing

00:04:12.230 --> 00:04:15.830
the best growth, health,
and fruit yield possible.

00:04:15.830 --> 00:04:20.257
And that, my friends,
is a smart garden.

00:04:20.257 --> 00:04:21.930
RETO MEIER: Not bad, not bad.

00:04:21.930 --> 00:04:23.180
There's some good stuff there.

00:04:23.180 --> 00:04:24.980
COLT MCANLIS: Well, are
you ready to respond, then?

00:04:24.980 --> 00:04:26.438
RETO MEIER: Have
the Perth Wildcats

00:04:26.438 --> 00:04:28.970
appeared in 31 consecutive
NBL finals series?

00:04:28.970 --> 00:04:32.051
COLT MCANLIS: I don't
know and I don't care.

00:04:32.051 --> 00:04:34.550
RETO MEIER: Of course they have,
because they're from Perth,

00:04:34.550 --> 00:04:35.390
so they're winners.

00:04:35.390 --> 00:04:37.850
Let's so this.

00:04:37.850 --> 00:04:40.780
There's a lot to like about
Colt's CNC death harvester.

00:04:40.780 --> 00:04:43.300
It's a good start, but it's
lacking in imagination.

00:04:43.300 --> 00:04:45.446
My design sets your garden free.

00:04:45.446 --> 00:04:47.320
We take the head off
the arm and replicate it

00:04:47.320 --> 00:04:49.540
to plant dozens of
independent devices,

00:04:49.540 --> 00:04:52.080
each with its own dedicated
water spout, nutrient system,

00:04:52.080 --> 00:04:54.490
and sensor array
around our garden,

00:04:54.490 --> 00:04:57.550
one alongside each plant,
tree, and flower pot.

00:04:57.550 --> 00:05:00.220
We also incorporate some toys
to help with garden maintenance,

00:05:00.220 --> 00:05:01.870
like an autonomous lawnmower.

00:05:01.870 --> 00:05:03.700
We still need his
Android hub, which

00:05:03.700 --> 00:05:05.530
collects sensor data
from all our devices

00:05:05.530 --> 00:05:06.738
and connects to the internet.

00:05:06.738 --> 00:05:08.950
But rather than
controlling a single arm,

00:05:08.950 --> 00:05:12.220
it now monitors and controls
the device added to each plant.

00:05:12.220 --> 00:05:14.410
The garden devices connect
to each other and the hub

00:05:14.410 --> 00:05:16.092
using a BTLE mesh.

00:05:16.092 --> 00:05:18.550
I'm going to take advantage of
my unique Android experience

00:05:18.550 --> 00:05:20.680
here to add an Android app.

00:05:20.680 --> 00:05:22.330
Now normally, the
whole system will

00:05:22.330 --> 00:05:25.180
be driven by a cloud service,
just like Colt's design.

00:05:25.180 --> 00:05:27.400
But I want a local
peer-to-peer override

00:05:27.400 --> 00:05:29.650
for modifying the schedule,
toggling the sprinklers.

00:05:29.650 --> 00:05:32.249
The Android app is also how we
add new plants to the garden.

00:05:32.249 --> 00:05:34.540
You take a photo of the plant
you want to add, and then

00:05:34.540 --> 00:05:36.490
use TensorFlow to recognize it.

00:05:36.490 --> 00:05:38.980
Now I have to admit, most of
Colt's client implementation

00:05:38.980 --> 00:05:39.790
is pretty solid.

00:05:39.790 --> 00:05:41.740
But again, he's
lacking imagination.

00:05:41.740 --> 00:05:44.020
Colt's system performs
an analysis once a day.

00:05:44.020 --> 00:05:45.970
Let's expand that to
continuously monitor

00:05:45.970 --> 00:05:46.860
each plant.

00:05:46.860 --> 00:05:48.460
We'll use Pub/Sub
to reliably deliver

00:05:48.460 --> 00:05:51.760
the real-time readings from
every sensor up to [? run. ?]

00:05:51.760 --> 00:05:53.320
Next, I'll upgrade
the Android hub

00:05:53.320 --> 00:05:55.390
to use the Firebase
real-time database as a way

00:05:55.390 --> 00:05:57.640
to store the watering and
fertilizing schedule that'll

00:05:57.640 --> 00:06:00.550
sync between the hub server
and Android app, while still

00:06:00.550 --> 00:06:01.979
working offline.

00:06:01.979 --> 00:06:04.270
While we're doing databases,
we'll add data [INAUDIBLE]

00:06:04.270 --> 00:06:06.561
[? to run ?] and populate it
with the care instructions

00:06:06.561 --> 00:06:08.290
for every plant in the world.

00:06:08.290 --> 00:06:09.830
We can adapt Colt's
TensorFlow model

00:06:09.830 --> 00:06:11.980
to adjust those baseline
care instructions based

00:06:11.980 --> 00:06:14.330
on each plant's health readings.

00:06:14.330 --> 00:06:16.450
Now, Colt's model is
static, though, so we'll

00:06:16.450 --> 00:06:18.040
collect all of this
water in Bquery

00:06:18.040 --> 00:06:22.150
and use it to train new and
more powerful models over time.

00:06:22.150 --> 00:06:24.300
Now the Google Tasks API--

00:06:24.300 --> 00:06:26.009
I'm not sure why Colt
missed it, but I'll

00:06:26.009 --> 00:06:28.050
use it here to handle all
the gardening work that

00:06:28.050 --> 00:06:29.510
can't be handled automatically.

00:06:29.510 --> 00:06:32.246
Pruning trees, raking leaves,
it all goes into the task list.

00:06:32.246 --> 00:06:33.870
The task is synced
on your Android app,

00:06:33.870 --> 00:06:35.580
and you can check them
off as they're done.

00:06:35.580 --> 00:06:38.121
We use the app to replace Colt's
web-based status [INAUDIBLE]

00:06:38.121 --> 00:06:41.340
and use Firebase cloud messaging
to keep it all up to date.

00:06:41.340 --> 00:06:43.980
Then we can finish off by
using Data Studio to visualize

00:06:43.980 --> 00:06:46.560
our garden stats and add Google
Assistant actions to allow us

00:06:46.560 --> 00:06:52.380
voice controls for local
updates and overrides.

00:06:52.380 --> 00:06:54.220
COLT MCANLIS: Not bad, not bad.

00:06:54.220 --> 00:06:57.235
I mean, not good, but not bad.

00:06:57.235 --> 00:06:59.670
RETO MEIER: Now you've
seen both of our pitches--

00:06:59.670 --> 00:07:03.330
Colt's utilitarian farmer's
plant box, and my response,

00:07:03.330 --> 00:07:05.260
a peaceful garden
where you're freed

00:07:05.260 --> 00:07:07.300
from the manual burdens
of garden maintenance

00:07:07.300 --> 00:07:09.094
to relax and enjoy nature.

00:07:09.094 --> 00:07:11.260
COLT MCANLIS: Now here's
the really important part--

00:07:11.260 --> 00:07:14.350
you decide which of our builds
is better by leaving comments

00:07:14.350 --> 00:07:15.310
below the video.

00:07:15.310 --> 00:07:17.601
RETO MEIER: And don't forget
to check out our companion

00:07:17.601 --> 00:07:20.170
podcast, "Build Out Rewound,"
also linked in the description

00:07:20.170 --> 00:07:22.390
below, where we'll discuss
our implementations

00:07:22.390 --> 00:07:24.435
and explain some
of our decisions.

00:07:24.435 --> 00:07:26.560
Thank you for watching this
episode of "Build Out."

00:07:26.560 --> 00:07:27.680
As always, I'm Reto Meier.

00:07:27.680 --> 00:07:28.900
COLT MCANLIS: And
I'm Colt McAnlis.

00:07:28.900 --> 00:07:30.370
And always remember,
PerfMatters.

00:07:30.370 --> 00:07:34.620
[MUSIC PLAYING]

