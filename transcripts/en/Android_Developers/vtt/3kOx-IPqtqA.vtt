WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.880
[MUSIC PLAYING]

00:00:02.880 --> 00:00:04.672
The single biggest
improvement your app

00:00:04.672 --> 00:00:06.130
can make for
networking performance

00:00:06.130 --> 00:00:09.350
has to do with reducing the
sheer number of requests made.

00:00:09.350 --> 00:00:11.870
But rather than just avoiding
data syncing all together,

00:00:11.870 --> 00:00:13.369
how exactly do
you pull that off?

00:00:13.369 --> 00:00:14.910
My name is Colt
McAnlis And if you're

00:00:14.910 --> 00:00:17.280
looking for the optimal
way to batch requests

00:00:17.280 --> 00:00:19.460
to reduce overall
network traffic,

00:00:19.460 --> 00:00:21.215
then prefetching is for you.

00:00:21.215 --> 00:00:22.090
Think of it this way.

00:00:22.090 --> 00:00:24.540
Your app makes a request for
a specific piece of data.

00:00:24.540 --> 00:00:26.080
And then, sometime
in the future,

00:00:26.080 --> 00:00:27.880
it makes a request
for a another piece

00:00:27.880 --> 00:00:30.290
of data and so on and so forth.

00:00:30.290 --> 00:00:32.880
Each individual request
has specific overhead

00:00:32.880 --> 00:00:33.710
associated with it.

00:00:33.710 --> 00:00:36.300
It may end up in a weird
pattern of waking up

00:00:36.300 --> 00:00:39.900
the radio each time
to make the request.

00:00:39.900 --> 00:00:41.767
Prefetching is about
predicting what

00:00:41.767 --> 00:00:43.350
data would be in
those future requests

00:00:43.350 --> 00:00:46.450
and grabbing all that data now
while there's an active radio

00:00:46.450 --> 00:00:47.170
connection.

00:00:47.170 --> 00:00:50.052
The benefit here is that each
radio request has some overhead

00:00:50.052 --> 00:00:51.760
in terms of time that
it takes to wake up

00:00:51.760 --> 00:00:53.650
the radio and
battery drain that's

00:00:53.650 --> 00:00:56.010
taken as a result of
its keep-awake time.

00:00:56.010 --> 00:00:59.080
Being able to bundle future
requests together and do them

00:00:59.080 --> 00:01:01.510
now means being able
to reduce that overhead

00:01:01.510 --> 00:01:03.790
and save precious battery life.

00:01:03.790 --> 00:01:06.500
But prefetching is a
tricky balancing problem.

00:01:06.500 --> 00:01:08.380
Prefetch too little
and you'll end up

00:01:08.380 --> 00:01:10.590
not optimizing your
bandwidth effectively.

00:01:10.590 --> 00:01:12.490
And prefetching too
much means the user

00:01:12.490 --> 00:01:15.180
is going to be waiting even
longer for the results.

00:01:15.180 --> 00:01:17.940
So now we come to
our simple question.

00:01:17.940 --> 00:01:20.130
How much data is
in a good prefetch?

00:01:20.130 --> 00:01:23.500
Well, the general rule of thumb
is that, on a 3G connection,

00:01:23.500 --> 00:01:27.080
a quality prefetch is
about 1-5 MB of data.

00:01:27.080 --> 00:01:28.820
Of course, that's
with the understanding

00:01:28.820 --> 00:01:31.650
that the data will be
needed and used by the user.

00:01:31.650 --> 00:01:33.290
So you could look
at this another way

00:01:33.290 --> 00:01:37.360
and prefetch as much data as the
user might need in the next one

00:01:37.360 --> 00:01:39.560
to two minutes of
their active session.

00:01:39.560 --> 00:01:41.480
But in honesty one
of the biggest things

00:01:41.480 --> 00:01:43.840
your prefetch needs
to optimize for has

00:01:43.840 --> 00:01:46.290
to be for the speed of
the device connection.

00:01:46.290 --> 00:01:49.180
For example, if the user
is on a 4G connection,

00:01:49.180 --> 00:01:50.890
you may be able to
connect and fetch

00:01:50.890 --> 00:01:54.190
12 new photos, which takes
the same amount of time

00:01:54.190 --> 00:01:57.820
as prefetching three
photos on a 2G connection.

00:01:57.820 --> 00:01:59.376
So modifying your
prefetching code

00:01:59.376 --> 00:02:01.750
to take into account the
quality of the user's connection

00:02:01.750 --> 00:02:04.347
is the best way to create
optimal fetch cases.

00:02:04.347 --> 00:02:06.180
And it's worth pointing
out that the easiest

00:02:06.180 --> 00:02:08.979
way to determine the health of
the network is simply to time

00:02:08.979 --> 00:02:11.310
how long it takes for some
known piece of content

00:02:11.310 --> 00:02:13.110
to return from a request.

00:02:13.110 --> 00:02:15.960
With a few simple calculations
and a handy lookup table

00:02:15.960 --> 00:02:17.770
for common network
speeds, you can quickly

00:02:17.770 --> 00:02:20.170
determine what type of network
the user is connected to

00:02:20.170 --> 00:02:22.950
and adjust your fetching
and requests accordingly.

00:02:22.950 --> 00:02:25.780
It's also worth pointing out
that the real sweet spot here

00:02:25.780 --> 00:02:28.900
has to be executing
batched requests-- that

00:02:28.900 --> 00:02:31.470
were delayed to be issues
but have been on the wait

00:02:31.470 --> 00:02:34.360
cycle-- and future
requests, AKA prefetching,

00:02:34.360 --> 00:02:37.020
into a single
activity radio window.

00:02:37.020 --> 00:02:39.059
That's when things start
to get really awesome.

00:02:39.059 --> 00:02:41.100
And the good news is that
you can update your app

00:02:41.100 --> 00:02:43.058
to adopt these patterns
without having to write

00:02:43.058 --> 00:02:44.570
a massive amount of code.

00:02:44.570 --> 00:02:47.680
GCMNetworkManager is a
Google Play services API,

00:02:47.680 --> 00:02:50.110
which helps to schedule
network-oriented tasks

00:02:50.110 --> 00:02:51.390
and handle batching for you.

00:02:51.390 --> 00:02:53.700
This greatly simplifies
the implementation

00:02:53.700 --> 00:02:55.550
of common patterns
such as waiting

00:02:55.550 --> 00:02:57.380
for networking activity,
network retries,

00:02:57.380 --> 00:02:59.030
and exponential backoff.

00:02:59.030 --> 00:03:00.460
Basically, it's
all the stuff you

00:03:00.460 --> 00:03:02.486
need with a single helpful API.

00:03:02.486 --> 00:03:03.860
And when it comes
to performance,

00:03:03.860 --> 00:03:06.400
you need all the helpful
APIs you can get.

00:03:06.400 --> 00:03:08.329
And helpful videos
too, which is why

00:03:08.329 --> 00:03:10.870
should check out the rest of
the Android performance patterns

00:03:10.870 --> 00:03:11.370
content.

00:03:11.370 --> 00:03:14.290
And don't forget to join our
Google+ community as well.

00:03:14.290 --> 00:03:15.350
So, keep calm.

00:03:15.350 --> 00:03:16.260
Profile your code.

00:03:16.260 --> 00:03:17.980
And always remember
performance matters.

00:03:17.980 --> 00:03:21.330
[MUSIC PLAYING]

