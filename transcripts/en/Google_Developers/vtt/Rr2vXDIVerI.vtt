WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.280
JAKE ARCHIBALD: So
I'm from England,

00:00:02.280 --> 00:00:04.130
as you can probably tell.

00:00:04.130 --> 00:00:08.920
I'm from a small city
called Carlisle in England

00:00:08.920 --> 00:00:11.860
from a small district
called Harraby

00:00:11.860 --> 00:00:15.150
in Carlisle, in England.

00:00:15.150 --> 00:00:16.563
This is one of the pubs.

00:00:16.563 --> 00:00:17.410
AUDIENCE: All right!

00:00:17.410 --> 00:00:18.285
JAKE ARCHIBALD: Yeah.

00:00:19.942 --> 00:00:21.650
As you can see they
thought long and hard

00:00:21.650 --> 00:00:25.840
about the name of
the pub in Harraby.

00:00:25.840 --> 00:00:28.480
The regulars of
this pub-- they call

00:00:28.480 --> 00:00:35.610
themselves the "Pirates
of the Harrabian."

00:00:35.610 --> 00:00:37.330
And every time-- I
really like that.

00:00:37.330 --> 00:00:40.480
For my money that's the best
pirate pun I have ever heard,

00:00:40.480 --> 00:00:43.580
and whenever I tell people
it, they are underwhelmed.

00:00:43.580 --> 00:00:44.720
But you are all wrong.

00:00:44.720 --> 00:00:46.750
That is clever and funny.

00:00:51.680 --> 00:00:54.230
So we've come a long
way, haven't we,

00:00:54.230 --> 00:00:58.190
since the '90s-- 20 years ago.

00:00:58.190 --> 00:01:00.750
You have some friends
over and it's going great,

00:01:00.750 --> 00:01:02.190
and then maybe two
of your friends

00:01:02.190 --> 00:01:04.554
will start having-- oh, we
do have sound, excellent.

00:01:04.554 --> 00:01:06.470
We start having a
disagreement about something

00:01:06.470 --> 00:01:09.760
meaningless like the release
date of "Ghostbusters."

00:01:09.760 --> 00:01:12.650
But then that argument starts to
get heated, and neither of them

00:01:12.650 --> 00:01:13.530
are backing down.

00:01:13.530 --> 00:01:14.800
But it's OK.

00:01:14.800 --> 00:01:17.030
You hold aloft the answer.

00:01:17.030 --> 00:01:20.270
For you are the proud owner
of Microsoft Cinemania.

00:01:24.267 --> 00:01:25.600
Don't know why that disappeared.

00:01:25.600 --> 00:01:27.780
Let's try that again.

00:01:27.780 --> 00:01:28.280
Wee!

00:01:30.877 --> 00:01:32.460
That's probably a
good sign that we're

00:01:32.460 --> 00:01:34.126
going to have massive
graphical problems

00:01:34.126 --> 00:01:35.180
during this presentation.

00:01:35.180 --> 00:01:36.630
That's excellent.

00:01:36.630 --> 00:01:38.970
We'll see if that continues.

00:01:38.970 --> 00:01:41.040
But it's supposed to
give you instant access

00:01:41.040 --> 00:01:43.950
to the history of cinema, but of
course, it's not truly instant,

00:01:43.950 --> 00:01:44.450
is it?

00:01:44.450 --> 00:01:48.526
Because first you must go to
the room with the computer in,

00:01:48.526 --> 00:01:49.810
and then you turn it on.

00:01:49.810 --> 00:01:52.390
And clunk, all the
fans start whirring.

00:01:52.390 --> 00:01:56.760
You get the static buzz as the
CRT monitor whirs into action.

00:01:56.760 --> 00:02:01.880
Windows 3.1 slowly boots up.

00:02:01.880 --> 00:02:03.675
And then eventually
you get your desktop.

00:02:06.960 --> 00:02:08.782
But then it does this.

00:02:08.782 --> 00:02:12.076
[OLD WINDOWS STARTUP SOUND]

00:02:12.076 --> 00:02:14.200
And that really sets your
expectations, doesn't it?

00:02:14.200 --> 00:02:17.360
Because we are in an era
where booting up successfully

00:02:17.360 --> 00:02:19.620
is a fanfare worthy moment.

00:02:19.620 --> 00:02:22.100
[LAUGHTER]

00:02:22.100 --> 00:02:25.810
But by the power of multimedia,
you reveal authoritatively,

00:02:25.810 --> 00:02:28.380
that "Ghostbusters"
came out in 1994,

00:02:28.380 --> 00:02:30.400
and you did that in
under 10 minutes.

00:02:30.400 --> 00:02:32.647
The dinner party is saved.

00:02:32.647 --> 00:02:35.324
[OLD WINDOWS STARTUP SOUND]

00:02:35.324 --> 00:02:36.740
The web really
changed everything.

00:02:36.740 --> 00:02:38.930
With the web, you get the
information instantly.

00:02:38.930 --> 00:02:41.800
No installation is needed,
and an app such as Cinemania

00:02:41.800 --> 00:02:44.850
[INAUDIBLE], they looked up a
date really, really quickly.

00:02:44.850 --> 00:02:47.415
Having a separate app for
these things just became weird.

00:02:47.415 --> 00:02:48.790
Suddenly the
internet was better.

00:02:48.790 --> 00:02:51.450
It was built with this
new interconnected modern

00:02:51.450 --> 00:02:52.540
world in mind.

00:02:52.540 --> 00:02:55.650
And the browser runtime started
to replace more apps-- email

00:02:55.650 --> 00:02:57.150
clients one of the first.

00:02:57.150 --> 00:02:59.450
But then things like office
tooling, video players,

00:02:59.450 --> 00:03:00.980
code editors even.

00:03:00.980 --> 00:03:03.600
Native apps became
the exception.

00:03:03.600 --> 00:03:07.100
If you look on the Amazon
top selling laptops list,

00:03:07.100 --> 00:03:09.140
you'll see Chromebooks
there, and that's

00:03:09.140 --> 00:03:11.440
how secondary native apps are.

00:03:11.440 --> 00:03:14.550
Although that's not
true is it on mobile.

00:03:14.550 --> 00:03:16.929
There, native apps
rule, because they're

00:03:16.929 --> 00:03:19.470
built for the strengths of the
platform, and a lot of the web

00:03:19.470 --> 00:03:20.620
predates that.

00:03:20.620 --> 00:03:23.830
Some of the web is
even hostile to mobile.

00:03:23.830 --> 00:03:25.956
Here's a creative agency
that I will not name,

00:03:25.956 --> 00:03:27.330
but this is what
you get when you

00:03:27.330 --> 00:03:29.530
visit their site on a phone.

00:03:29.530 --> 00:03:31.070
"Choosing your
creative agency isn't

00:03:31.070 --> 00:03:33.530
like buying a pair of shoes.

00:03:33.530 --> 00:03:37.160
So why don't you make yourself
comfy and visit our site

00:03:37.160 --> 00:03:38.828
on a real screen."

00:03:38.828 --> 00:03:40.970
[GROANING]

00:03:40.970 --> 00:03:43.240
But, they're right.

00:03:43.240 --> 00:03:44.600
No, they're right.

00:03:44.600 --> 00:03:47.520
Choosing a creative agency is
not like buying a pair of shoes

00:03:47.520 --> 00:03:49.150
because I have never
had a shoe tell

00:03:49.150 --> 00:03:51.700
me to fuck off and come
back when I have real feet.

00:03:51.700 --> 00:03:53.600
[LAUGHTER]

00:03:57.184 --> 00:03:59.100
If you visit their desktop
site, obviously you

00:03:59.100 --> 00:04:00.130
get a much better experience.

00:04:00.130 --> 00:04:01.240
You see the sites they've done.

00:04:01.240 --> 00:04:03.115
They list the things
they're expert in, which

00:04:03.115 --> 00:04:05.350
of course includes
responsive sites.

00:04:05.350 --> 00:04:08.270
[LAUGHTER]

00:04:08.270 --> 00:04:10.570
This is hostile to the
whole mobile platform.

00:04:10.570 --> 00:04:12.550
The more worrying
case is sites that

00:04:12.550 --> 00:04:16.050
are simply hostile
for the mobile web.

00:04:16.050 --> 00:04:17.730
This is a horrible situation.

00:04:17.730 --> 00:04:20.649
The user has gone into
these sites in a browser,

00:04:20.649 --> 00:04:22.190
potentially following
a deep link.

00:04:22.190 --> 00:04:23.898
And rather than sending
them to the thing

00:04:23.898 --> 00:04:26.490
they want, we send
them somewhere else.

00:04:26.490 --> 00:04:28.300
Where they can download
a thing, install

00:04:28.300 --> 00:04:30.729
that thing, which they can run.

00:04:30.729 --> 00:04:32.520
Which may contain the
thing they originally

00:04:32.520 --> 00:04:34.670
wanted somewhere
deep within the UI.

00:04:37.460 --> 00:04:40.406
Every day.

00:04:40.406 --> 00:04:42.280
But no one's saying
that's a good experience.

00:04:42.280 --> 00:04:43.700
No one is saying that's
good, but it's one

00:04:43.700 --> 00:04:45.470
that many developers
think is worth it.

00:04:45.470 --> 00:04:48.230
To get their users off the web
and into a native platform.

00:04:48.230 --> 00:04:48.920
And why is that?

00:04:48.920 --> 00:04:50.544
Well have a think
about the native apps

00:04:50.544 --> 00:04:51.830
that you use day-to-day.

00:04:51.830 --> 00:04:54.430
Those are the places
that the web has failed.

00:04:54.430 --> 00:04:55.740
But what caused that failure?

00:04:55.740 --> 00:04:58.160
What features do those
apps have that you

00:04:58.160 --> 00:05:00.570
use that make them impossible
to replicate on the web?

00:05:00.570 --> 00:05:03.140
For me, it's these apps really.

00:05:03.140 --> 00:05:05.560
I use these often, or I
rely on them in some way,

00:05:05.560 --> 00:05:07.320
and they can't be
done on the web,

00:05:07.320 --> 00:05:09.460
because things like
push notifications.

00:05:09.460 --> 00:05:11.640
This is vital for
these apps in yellow.

00:05:11.640 --> 00:05:13.300
They tell me someone
sent me something

00:05:13.300 --> 00:05:16.580
even when the app's closed,
or something happened.

00:05:16.580 --> 00:05:18.920
I rarely often trip
it-- very rarely.

00:05:18.920 --> 00:05:21.200
But I forget it's there,
but then occasionally it'll

00:05:21.200 --> 00:05:22.840
send me a message saying oh,
your flight's been delayed.

00:05:22.840 --> 00:05:23.610
Your flight's been cancelled.

00:05:23.610 --> 00:05:25.322
That's really,
really useful to me.

00:05:25.322 --> 00:05:27.530
Background sync of course--
the apps in yellow again.

00:05:27.530 --> 00:05:29.696
They send and receive stuff
when the app isn't open.

00:05:29.696 --> 00:05:32.380
From downloading podcasts to
sending that email later when

00:05:32.380 --> 00:05:33.800
I have a better connection.

00:05:33.800 --> 00:05:36.080
Which takes us to
the offline stuff.

00:05:36.080 --> 00:05:39.397
I depend on this for more apps
than I realize-- way more.

00:05:39.397 --> 00:05:41.480
From playing music, to
checking where my hotel is,

00:05:41.480 --> 00:05:43.080
to looking up a
meeting location.

00:05:43.080 --> 00:05:46.440
I don't want to depend on
connectivity for those things.

00:05:46.440 --> 00:05:48.490
And of course, we need
better performance

00:05:48.490 --> 00:05:51.360
and better operating system
integration, app menu icons,

00:05:51.360 --> 00:05:53.960
battery stats, payment
and account integration.

00:05:53.960 --> 00:05:57.040
Everything that makes it
first class on the platform.

00:05:57.040 --> 00:06:00.530
The web can't do these
things, and that's a bug.

00:06:00.530 --> 00:06:03.320
But what gives me optimism
is bugs that we are fixing.

00:06:03.320 --> 00:06:06.784
We are actively landing
code to fix these things.

00:06:06.784 --> 00:06:08.700
These are the ones I
want to talk about today.

00:06:08.700 --> 00:06:10.260
These are quite something new.

00:06:10.260 --> 00:06:12.210
Background sync happens
in the background.

00:06:12.210 --> 00:06:14.290
Push notifications
are received and dealt

00:06:14.290 --> 00:06:15.304
with in the background.

00:06:15.304 --> 00:06:17.720
Offline isn't in the background,
but it requires something

00:06:17.720 --> 00:06:20.570
to run sooner than
the page appears,

00:06:20.570 --> 00:06:23.200
so it can handle network
connections and version control

00:06:23.200 --> 00:06:23.830
and things.

00:06:23.830 --> 00:06:25.760
And that thing is
a service worker.

00:06:25.760 --> 00:06:28.520
This is the spec.

00:06:28.520 --> 00:06:33.070
This moment got a round
of applause at Google I/O.

00:06:33.070 --> 00:06:34.440
[DELAYED APPLAUSE]

00:06:34.440 --> 00:06:35.860
Yeah, don't patronize me.

00:06:35.860 --> 00:06:36.970
Fair enough.

00:06:36.970 --> 00:06:39.140
I admit I could have dressed
this up a little bit.

00:06:39.140 --> 00:06:41.650
I really like what graphics
cards do in this scenario,

00:06:41.650 --> 00:06:44.690
because they're essentially
just circuit boards.

00:06:44.690 --> 00:06:46.191
They don't do
anything on their own,

00:06:46.191 --> 00:06:47.981
but they want to sell
themselves to gamers.

00:06:47.981 --> 00:06:49.780
It's the thing they
absolutely must have.

00:06:49.780 --> 00:06:52.100
So the boxes they
come in are amazing.

00:06:52.100 --> 00:06:55.860
They're filled with this kind of
subdeviant art-- shite artwork.

00:06:55.860 --> 00:06:57.930
You get the usual
terrible, sexist stuff

00:06:57.930 --> 00:07:00.200
that you get with anything
to do with games it seems

00:07:00.200 --> 00:07:02.200
at the moment, but also
things like the hideous

00:07:02.200 --> 00:07:06.140
offspring of Yoda and
Shrek as found in one box.

00:07:06.140 --> 00:07:10.010
And, of course, "Teenage
Mutant Ninja Dog"

00:07:10.010 --> 00:07:13.470
appears on one of them as well.

00:07:13.470 --> 00:07:19.630
So in that vain, I present
to you "The ServiceWorker!"

00:07:19.630 --> 00:07:22.490
That's the [INAUDIBLE]
of the living using

00:07:22.490 --> 00:07:26.250
his powers of evil to
control browser features.

00:07:26.250 --> 00:07:28.430
What badge?

00:07:28.430 --> 00:07:31.440
I thought about doing that, but
I really couldn't be bothered.

00:07:31.440 --> 00:07:33.359
I'm sorry.

00:07:33.359 --> 00:07:35.650
But you've got the skull and
crossbones on some slides,

00:07:35.650 --> 00:07:36.650
right?

00:07:36.650 --> 00:07:37.920
I did that in the airport.

00:07:37.920 --> 00:07:40.690
[INAUDIBLE] jet lag.

00:07:40.690 --> 00:07:43.280
If anyone wants to design
a better logo, please do.

00:07:43.280 --> 00:07:45.779
But this is a feature that's
being worked on between Google,

00:07:45.779 --> 00:07:47.680
Mozilla, Samsung, and
other third parties.

00:07:47.680 --> 00:07:50.250
It's like a shared worker that
is shared between many apps,

00:07:50.250 --> 00:07:53.390
and it has many pages even
and it has no thumb access.

00:07:53.390 --> 00:07:56.730
Unlike a shared worker, it
can exist without any pages,

00:07:56.730 --> 00:07:58.880
and it shuts down
when it isn't in use

00:07:58.880 --> 00:08:00.400
keeping the memory
footprint small.

00:08:00.400 --> 00:08:02.370
It gives us this background
JavaScript context

00:08:02.370 --> 00:08:04.650
to do all of this stuff.

00:08:04.650 --> 00:08:06.137
This is still in development.

00:08:06.137 --> 00:08:07.970
So if want to play with
ServiceWorker today,

00:08:07.970 --> 00:08:10.710
you'll need to use Chrome
Canary or Firefox Nightly.

00:08:10.710 --> 00:08:12.890
And in Chrome you'll need
to About Flags and Enable

00:08:12.890 --> 00:08:14.566
Experimental Web
Platform Features.

00:08:14.566 --> 00:08:15.940
And once you've
done that, you'll

00:08:15.940 --> 00:08:18.110
need to give the
browser a restart.

00:08:18.110 --> 00:08:21.410
If Chrome isn't your thing,
then use Firefox Nightly.

00:08:21.410 --> 00:08:23.370
Just go to About
Config, and you'll

00:08:23.370 --> 00:08:26.060
need to enable
com.serviceworkers.enable,

00:08:26.060 --> 00:08:28.530
and once again give
the browser a restart.

00:08:28.530 --> 00:08:30.570
I'm going to stick to
Canary for the demos,

00:08:30.570 --> 00:08:33.280
because we're here
in the Google office,

00:08:33.280 --> 00:08:35.220
so it'd be rude not to, really.

00:08:35.220 --> 00:08:37.864
But also the debugging tools
there are further ahead.

00:08:37.864 --> 00:08:39.280
Firefox is going
to make-- they're

00:08:39.280 --> 00:08:40.840
going to catch up
very, very soon,

00:08:40.840 --> 00:08:42.559
but not quite at the moment.

00:08:42.559 --> 00:08:46.040
So if you want to know
what's supported and where,

00:08:46.040 --> 00:08:48.720
this site has answers--
is ServiceWorker ready?

00:08:48.720 --> 00:08:51.340
It'll tell you the status of
all of the various subfeatures

00:08:51.340 --> 00:08:55.042
of ServiceWorker
across the browsers.

00:08:55.042 --> 00:08:56.750
So let's take a look
at the offline stuff

00:08:56.750 --> 00:09:00.030
because it's the foundation
for the other features.

00:09:00.030 --> 00:09:01.980
Offline suffers from
the same misconceptions

00:09:01.980 --> 00:09:04.950
as progressive enhancement.

00:09:04.950 --> 00:09:08.830
People say I don't need
my app to work offline,

00:09:08.830 --> 00:09:12.010
because my users have permanent
internet connectivity.

00:09:12.010 --> 00:09:15.350
But it's not just about
dealing with zero connectivity.

00:09:15.350 --> 00:09:18.672
It's about treating the
network as an enhancement.

00:09:18.672 --> 00:09:20.380
Elliot covered some
of this stuff before,

00:09:20.380 --> 00:09:23.170
but when the user enters your
URL and navigates your site,

00:09:23.170 --> 00:09:24.886
this creates a new document.

00:09:24.886 --> 00:09:26.260
But we have to
get data for that.

00:09:26.260 --> 00:09:27.850
So off we go to the network.

00:09:27.850 --> 00:09:31.250
And this can take a long
time just to get the HTML

00:09:31.250 --> 00:09:33.256
and, once we've got
that we can't render.

00:09:33.256 --> 00:09:34.880
We need to send off
request for all the

00:09:34.880 --> 00:09:37.954
subresources-- the CSS,
the JavaScript, the images.

00:09:37.954 --> 00:09:39.870
And as these come back
we can start to render,

00:09:39.870 --> 00:09:41.020
but not completely.

00:09:41.020 --> 00:09:43.210
Because these start
other subresources.

00:09:43.210 --> 00:09:45.780
XHR, forms, images
used by the CSS.

00:09:45.780 --> 00:09:48.816
And then we can get
to a complete render.

00:09:48.816 --> 00:09:50.190
That can take a
really long time.

00:09:50.190 --> 00:09:51.564
As a practical
example, I'm going

00:09:51.564 --> 00:09:54.340
to take this demo app
called "Trained to Thrill."

00:09:54.340 --> 00:09:57.440
A simple responsive site that
displays latest train photos

00:09:57.440 --> 00:09:58.180
from Flickr.

00:09:58.180 --> 00:09:59.560
Don't ask me why trains.

00:09:59.560 --> 00:10:01.630
I was on a train when
I started building this

00:10:01.630 --> 00:10:03.940
and I had a moment of
complete zero inspiration,

00:10:03.940 --> 00:10:05.730
but it's going to be trains.

00:10:05.730 --> 00:10:07.160
Let's load it on a phone.

00:10:07.160 --> 00:10:09.880
Now, we're going to load it with
a simulated edge connection,

00:10:09.880 --> 00:10:12.750
and that's 250 kilobits.

00:10:12.750 --> 00:10:14.750
So not the best
connection in the world,

00:10:14.750 --> 00:10:16.760
but 15-year-old me
would have killed you

00:10:16.760 --> 00:10:18.050
for that kind of connectivity.

00:10:18.050 --> 00:10:21.350
It's by no means the worst that
you would get on a phone today.

00:10:21.350 --> 00:10:22.120
So let's load it.

00:10:22.120 --> 00:10:25.300
Three, two, one, go.

00:10:25.300 --> 00:10:25.800
There we go.

00:10:25.800 --> 00:10:28.320
We got first render
up after over a second

00:10:28.320 --> 00:10:29.810
that wasn't
JavaScript dependent.

00:10:29.810 --> 00:10:32.260
We get some content
after five seconds,

00:10:32.260 --> 00:10:33.510
and then begins the long wait.

00:10:33.510 --> 00:10:36.450
These images-- 200k each.

00:10:36.450 --> 00:10:37.950
As we were saying,
if you're dealing

00:10:37.950 --> 00:10:40.399
with a device of this
density-- images are big,

00:10:40.399 --> 00:10:41.940
and this is what
Flickr would give me

00:10:41.940 --> 00:10:44.800
if I wanted enough pixels
for a device like this.

00:10:44.800 --> 00:10:47.750
We get our first image
after over 30 seconds,

00:10:47.750 --> 00:10:50.480
and eventually after
what seems like an age,

00:10:50.480 --> 00:10:52.950
we'll start to get the final
image for the top there,

00:10:52.950 --> 00:10:54.660
and there it goes.

00:10:54.660 --> 00:10:55.980
I have to cut that video down.

00:10:55.980 --> 00:10:57.860
That's not real time--
it just takes so long.

00:10:57.860 --> 00:10:59.770
Those figures are
the real figures.

00:10:59.770 --> 00:11:02.500
Of course we could probably
compress those images a bit,

00:11:02.500 --> 00:11:04.620
and we could do
something to ensure

00:11:04.620 --> 00:11:06.450
that the top images
load a bit sooner.

00:11:06.450 --> 00:11:09.390
I just took what Flickr gave me.

00:11:09.390 --> 00:11:12.170
But we are still winning
compared to native

00:11:12.170 --> 00:11:14.840
to this point, because the
equivalent to the native app

00:11:14.840 --> 00:11:16.410
is a trip to the app store.

00:11:16.410 --> 00:11:19.910
The download, the install-- it's
a slow and comparatively slow

00:11:19.910 --> 00:11:21.590
user experience.

00:11:21.590 --> 00:11:23.850
But native kicks our
ass in the second visit.

00:11:23.850 --> 00:11:25.350
Because it used the
initial download

00:11:25.350 --> 00:11:28.730
to cache a load of stuff,
and set a load of things up.

00:11:28.730 --> 00:11:30.730
We have the browser
cache, but the whole web

00:11:30.730 --> 00:11:33.180
is fighting for that cache,
and something pointless

00:11:33.180 --> 00:11:35.950
can override something
really useful.

00:11:35.950 --> 00:11:38.210
And we deploy stuff
really regularly.

00:11:38.210 --> 00:11:40.485
So we make one
change to our CSS,

00:11:40.485 --> 00:11:42.610
and now we have to change
the file name of the CSS,

00:11:42.610 --> 00:11:44.545
because we
consolidated the cache.

00:11:44.545 --> 00:11:46.170
But this page does
something different.

00:11:46.170 --> 00:11:49.330
It registers for a
ServiceWorker allowing

00:11:49.330 --> 00:11:51.260
it to do something
about that second load.

00:11:51.260 --> 00:11:53.640
This registration happens
just with a single line

00:11:53.640 --> 00:11:56.310
of JavaScript like that, giving
you a location for the script.

00:11:56.310 --> 00:11:59.170
You can also scope it to an area
of your origin, which is useful

00:11:59.170 --> 00:12:02.780
if you have one origin with
many apps such as GitHub pages.

00:12:02.780 --> 00:12:05.977
The default is the whole
origin which we'll use here.

00:12:05.977 --> 00:12:07.560
Registering its main
sync operation so

00:12:07.560 --> 00:12:09.170
it returns a promise.

00:12:09.170 --> 00:12:11.910
So you get call backs depending
on whether it succeeded or not.

00:12:11.910 --> 00:12:14.310
You can only register for
ServiceWorker on pages

00:12:14.310 --> 00:12:16.370
securely-- HTTPS.

00:12:16.370 --> 00:12:20.010
ServiceWorker gives you so much
control that we cannot afford

00:12:20.010 --> 00:12:22.920
to let that lie in the hands
of a man in the middle.

00:12:22.920 --> 00:12:25.830
GitHub pages serve over HTTPS--
great place to put demos,

00:12:25.830 --> 00:12:28.569
and local host is exempt
for development purposes.

00:12:28.569 --> 00:12:30.110
As for this worker
script, we're just

00:12:30.110 --> 00:12:31.540
going to put in a console log.

00:12:31.540 --> 00:12:33.460
We're also [? going to listen ?]
for the install event,

00:12:33.460 --> 00:12:35.500
and that's called when
the ServiceWorker sees

00:12:35.500 --> 00:12:37.850
this worker for the first time.

00:12:37.850 --> 00:12:39.029
So let's see that in action.

00:12:39.029 --> 00:12:41.320
First I'm going to go to
ServiceWorker internals, which

00:12:41.320 --> 00:12:43.790
is where our debugging stuff
is living at the moment.

00:12:43.790 --> 00:12:46.279
It will move into DevTools,
but it's early days.

00:12:46.279 --> 00:12:48.820
These are all the ServiceWorker
that the browser is aware of.

00:12:48.820 --> 00:12:50.800
As you can see,
it's aware of none.

00:12:50.800 --> 00:12:53.200
So let's open the
train site, and we'll

00:12:53.200 --> 00:12:55.120
open DevTools there as well.

00:12:55.120 --> 00:12:57.860
As you see down here, we've
had a successful smiley

00:12:57.860 --> 00:13:00.840
face-- successful
ServiceWorker registration.

00:13:00.840 --> 00:13:03.270
As we go to ServiceWorker
internals now-- ah,

00:13:03.270 --> 00:13:03.860
there it is!

00:13:03.860 --> 00:13:05.280
And that's our console messages.

00:13:05.280 --> 00:13:07.750
Even better we can
open an actual DevTools

00:13:07.750 --> 00:13:08.860
window for that worker.

00:13:08.860 --> 00:13:09.940
We can run stuff on the console.

00:13:09.940 --> 00:13:10.980
We can set breakpoints.

00:13:10.980 --> 00:13:13.200
We can inspect things in detail.

00:13:13.200 --> 00:13:16.630
If we fast forward time a bit,
this worker will terminate.

00:13:16.630 --> 00:13:17.910
That's not a bug.

00:13:17.910 --> 00:13:19.390
It closes when it's
not being used,

00:13:19.390 --> 00:13:21.400
and that's just to save memory.

00:13:21.400 --> 00:13:24.130
At this point, congratulations.

00:13:24.130 --> 00:13:28.134
You are now wielding the
power of the ServiceWorker.

00:13:28.134 --> 00:13:29.550
Well, what did it
actually get us?

00:13:29.550 --> 00:13:30.680
Nothing.

00:13:30.680 --> 00:13:31.980
Nothing at all.

00:13:31.980 --> 00:13:36.540
But wait, that's
actually a good thing.

00:13:36.540 --> 00:13:39.370
Trust me, it's great
that it does nothing.

00:13:39.370 --> 00:13:41.470
Compare this to AppCache.

00:13:41.470 --> 00:13:46.510
If we give an HTML page
a manifest, that manifest

00:13:46.510 --> 00:13:49.300
contains nothing except
the words "cache manifest"

00:13:49.300 --> 00:13:50.900
which is required
to make it valid.

00:13:50.900 --> 00:13:52.700
Yeah, sure, I'd
expect my page to go

00:13:52.700 --> 00:13:58.530
from this to this said
no one in the world ever.

00:13:58.530 --> 00:14:02.190
AppCache missed the point of
the extensible web completely.

00:14:02.190 --> 00:14:04.870
Almost as much as Disney did
with "Jake and the Neverland

00:14:04.870 --> 00:14:06.690
Pirates."

00:14:06.690 --> 00:14:09.715
A good pirate never takes
another person's property.

00:14:16.461 --> 00:14:19.460
Shit pirates-- [MUMBLING]

00:14:19.460 --> 00:14:22.346
Anyway, we didn't want to
repeat AppCache's mistakes.

00:14:22.346 --> 00:14:23.720
ServiceWorker
doesn't do anything

00:14:23.720 --> 00:14:25.470
unless you tell it
to do something.

00:14:25.470 --> 00:14:28.180
AppCache broke a load of eggs
and failed to make an omelette,

00:14:28.180 --> 00:14:30.300
but it is made of the
right ingredients.

00:14:30.300 --> 00:14:31.760
There's routing.

00:14:31.760 --> 00:14:36.110
We've got fetching, caching,
updating and version control.

00:14:36.110 --> 00:14:38.440
But in order to
get them, you must

00:14:38.440 --> 00:14:41.790
reverse the piles of
implicit behavior.

00:14:41.790 --> 00:14:46.506
Which are of course guarded
by the army of robot wasps.

00:14:46.506 --> 00:14:47.880
If you've used
that cache before,

00:14:47.880 --> 00:14:49.463
you'll know exactly
what I'm on about.

00:14:49.463 --> 00:14:50.650
So we got rid of all that.

00:14:50.650 --> 00:14:51.441
We cleared it away.

00:14:51.441 --> 00:14:53.050
We separated them out.

00:14:53.050 --> 00:14:54.670
We give you the
separate parts to use

00:14:54.670 --> 00:14:56.480
however you want
without getting stung.

00:14:56.480 --> 00:14:58.610
This is the extensible web.

00:14:58.610 --> 00:15:01.220
Don't let the platform
give you a fish, say, hey,

00:15:01.220 --> 00:15:04.110
I want the fishing rod,
and show me how to use it.

00:15:04.110 --> 00:15:05.390
But give me the fish as well.

00:15:05.390 --> 00:15:07.015
This is what we want
from the platform.

00:15:07.015 --> 00:15:08.890
We want high level
and low level APIs.

00:15:08.890 --> 00:15:10.820
So first up-- routing.

00:15:10.820 --> 00:15:12.844
Putting you in
control of requests.

00:15:12.844 --> 00:15:14.260
The ServiceWorker
is event driven.

00:15:14.260 --> 00:15:17.139
We've already seen it installed,
but there's also fetch.

00:15:17.139 --> 00:15:18.930
And this is fine for
any navigation request

00:15:18.930 --> 00:15:21.820
to your scope, but also
any subresources requested

00:15:21.820 --> 00:15:22.830
by those pages.

00:15:22.830 --> 00:15:24.390
So in ServiceWorker
internal, you're

00:15:24.390 --> 00:15:28.250
going to start up this
ServiceWorker and inspect it.

00:15:28.250 --> 00:15:30.410
And now I'm going
to navigate-- you

00:15:30.410 --> 00:15:31.530
can see we've got the
[INAUDIBLE] event here

00:15:31.530 --> 00:15:32.696
with the debugger statement.

00:15:32.696 --> 00:15:34.450
And I'm going to
navigate to the page,

00:15:34.450 --> 00:15:37.170
and as soon as we do that we hit
this debug point for the root

00:15:37.170 --> 00:15:38.400
page.

00:15:38.400 --> 00:15:40.270
And if we fast forward
a bit-- skip past

00:15:40.270 --> 00:15:44.520
that-- we'll get another
request this time for the CSS.

00:15:44.520 --> 00:15:46.680
And then we get
one for the logo,

00:15:46.680 --> 00:15:48.670
and then one for the JavaScript.

00:15:48.670 --> 00:15:51.490
And then we get one for the
request to Flickr's API.

00:15:51.490 --> 00:15:55.337
This is to another origin, but
we still get an event for it.

00:15:55.337 --> 00:15:57.670
And then we'll start getting
the requests for the images

00:15:57.670 --> 00:15:57.980
through.

00:15:57.980 --> 00:15:59.450
And we don't just
get the URL either.

00:15:59.450 --> 00:16:01.920
You can get detailed information
about the requests, which

00:16:01.920 --> 00:16:04.410
is the header, the
mode, the referrer--

00:16:04.410 --> 00:16:07.340
as much as we can safely give
you in terms of security.

00:16:07.340 --> 00:16:10.020
But, hey, the cool bit is--
it's like other events,

00:16:10.020 --> 00:16:12.220
such as click, touch
start, and key down.

00:16:12.220 --> 00:16:15.120
You can prevent the default
and do something else.

00:16:15.120 --> 00:16:17.280
You can respond
with something else.

00:16:17.280 --> 00:16:19.171
Responses can be
created manually,

00:16:19.171 --> 00:16:20.920
so there I'm just
creating a new response.

00:16:20.920 --> 00:16:23.520
There's nothing to do.

00:16:23.520 --> 00:16:28.590
We change the response
from this to this.

00:16:28.590 --> 00:16:31.080
But the interesting thing
there is we delivered that

00:16:31.080 --> 00:16:33.660
without going through
the network at all.

00:16:33.660 --> 00:16:38.860
Making it the first offline demo
of the talk only halfway in.

00:16:38.860 --> 00:16:41.120
But we can do better than that.

00:16:41.120 --> 00:16:42.870
When the browser
discovers a ServiceWorker

00:16:42.870 --> 00:16:45.730
for the first time, we'll get
it to make loads of requests

00:16:45.730 --> 00:16:49.210
to the network, and get
loads of responses back.

00:16:49.210 --> 00:16:50.600
This may be fast,
it may be slow.

00:16:50.600 --> 00:16:51.660
The network is unpredictable.

00:16:51.660 --> 00:16:53.970
We don't care, because the
user already has the page.

00:16:53.970 --> 00:16:56.530
We're not disrupting them.

00:16:56.530 --> 00:16:58.700
If all the responses
come back successfully,

00:16:58.700 --> 00:17:00.452
we'll throw them into the cache.

00:17:00.452 --> 00:17:02.160
This precaching pattern
is good for stuff

00:17:02.160 --> 00:17:03.690
that a native
equivalent would make

00:17:03.690 --> 00:17:05.540
part of the initial
download, but we

00:17:05.540 --> 00:17:08.560
get to do it in the background
without disrupting the user.

00:17:08.560 --> 00:17:11.430
For our train site, this is
like the root page template,

00:17:11.430 --> 00:17:12.890
the CSS for
JavaScript, the design

00:17:12.890 --> 00:17:14.182
images-- all the static stuff.

00:17:14.182 --> 00:17:16.140
And in the future when
we get a request for one

00:17:16.140 --> 00:17:18.510
of these things-- eh,
if it's in the cache,

00:17:18.510 --> 00:17:20.635
we'll just get in from
the cache and send it on.

00:17:20.635 --> 00:17:23.579
The uncertainty of the network
is no longer our problem,

00:17:23.579 --> 00:17:26.140
and this is really simple
thanks to the caching API

00:17:26.140 --> 00:17:27.515
that comes through
ServiceWorker.

00:17:27.515 --> 00:17:30.490
Giving you full programmatic
control over the cache.

00:17:30.490 --> 00:17:33.850
So in terms of our train site--
in the install event that we

00:17:33.850 --> 00:17:36.361
had before, we're going
to call event.waitUntil.

00:17:36.361 --> 00:17:37.860
And this lets you
pass in a promise,

00:17:37.860 --> 00:17:39.818
allowing you to extend
the installation process

00:17:39.818 --> 00:17:40.992
or indicate its failure.

00:17:40.992 --> 00:17:43.450
So here we're just going to
create a cache, give it a name.

00:17:43.450 --> 00:17:45.074
That gives us a cache
object, and we're

00:17:45.074 --> 00:17:48.280
going to add a load of stuff to
it-- all of our static assets.

00:17:48.280 --> 00:17:49.570
This is an atomic operation.

00:17:49.570 --> 00:17:51.950
If any of these fail,
the whole thing fails.

00:17:51.950 --> 00:17:54.040
It fails the installation,
and the service worker

00:17:54.040 --> 00:17:55.520
won't control pages.

00:17:55.520 --> 00:17:59.240
That means if install succeeds,
then we have these files.

00:17:59.240 --> 00:18:02.390
We can rely on having
them as a dependency.

00:18:02.390 --> 00:18:04.270
Here to tell us
a little bit more

00:18:04.270 --> 00:18:06.590
about Chrome's implementation
of the cache API,

00:18:06.590 --> 00:18:10.120
we're going to go live to
Senator Vreenak of the Romulan

00:18:10.120 --> 00:18:12.200
Empire.

00:18:12.200 --> 00:18:15.510
Senator, how's it looking?

00:18:15.510 --> 00:18:17.337
SENATOR VREENAK: It's a fake!

00:18:17.337 --> 00:18:18.170
JAKE ARCHIBALD: Yes.

00:18:18.170 --> 00:18:19.660
Thank you very much, Senator.

00:18:19.660 --> 00:18:21.390
Tell the kids I said hi.

00:18:21.390 --> 00:18:24.130
The API that's in Canary at
the moment is a complete fake.

00:18:24.130 --> 00:18:26.000
It doesn't really
work at all yet.

00:18:26.000 --> 00:18:26.870
It's not usable.

00:18:26.870 --> 00:18:30.210
But frankly there is a
polyfill backed by IndexedDB.

00:18:30.210 --> 00:18:33.530
The proper implementation
will arrive in a few weeks.

00:18:33.530 --> 00:18:36.890
But how do we use
these cached items?

00:18:36.890 --> 00:18:40.892
So we can call caches.match
as part of a respond call,

00:18:40.892 --> 00:18:42.100
and we can pass in a request.

00:18:42.100 --> 00:18:44.400
And that will look into
caches for the response that

00:18:44.400 --> 00:18:45.444
matches the request.

00:18:45.444 --> 00:18:47.110
And matching is done
very similar to how

00:18:47.110 --> 00:18:48.568
it works in a normal
browser cache.

00:18:48.568 --> 00:18:50.990
Things that method,
URL, vary headers.

00:18:50.990 --> 00:18:53.250
If there's no match,
you'll get null back,

00:18:53.250 --> 00:18:54.916
which is going to
start breaking things.

00:18:54.916 --> 00:18:56.750
But promises let you
recover from that.

00:18:56.750 --> 00:18:59.200
[INAUDIBLE] and if
responses is faulty,

00:18:59.200 --> 00:19:00.602
we can do something else.

00:19:00.602 --> 00:19:01.560
What can we do instead?

00:19:01.560 --> 00:19:03.435
We could return something
else from the cache

00:19:03.435 --> 00:19:07.459
like a fallback page, but what
if we want to try the network?

00:19:07.459 --> 00:19:09.000
To do this we need
to be able to make

00:19:09.000 --> 00:19:12.670
a request using JavaScript.

00:19:12.670 --> 00:19:19.050
So back in the '90s--
in 1999 to be exact--

00:19:19.050 --> 00:19:21.810
Microsoft engineers were
working on an exciting new API,

00:19:21.810 --> 00:19:25.320
but they didn't know
what to call it.

00:19:25.320 --> 00:19:28.615
It contained some
initialisms-- some acronyms--

00:19:28.615 --> 00:19:30.240
and they couldn't
decide if they should

00:19:30.240 --> 00:19:33.190
be all caps like
HTML and inner HTML,

00:19:33.190 --> 00:19:36.890
or just the first letter
like the element by ID.

00:19:36.890 --> 00:19:40.250
So they did both, and XML
Http Request was born.

00:19:40.250 --> 00:19:42.490
[LAUGHTER]

00:19:42.490 --> 00:19:44.160
Other than that,
the name is perfect.

00:19:44.160 --> 00:19:47.490
XML because it only deals
with XML-- except it doesn't.

00:19:47.490 --> 00:19:51.000
Http because it's restricted
to Http-- except it isn't.

00:19:51.000 --> 00:19:53.290
And Request because you
get a request object back--

00:19:53.290 --> 00:19:55.811
except you don't.

00:19:55.811 --> 00:19:58.310
We tried to modernize this API
a bit so it makes more sense,

00:19:58.310 --> 00:19:59.393
but it's still pretty bad.

00:19:59.393 --> 00:20:01.840
Especially since JSON is
still absolutely terrible.

00:20:01.840 --> 00:20:04.700
We've been patching this
API up for 15 years.

00:20:04.700 --> 00:20:06.490
I do not want to be
using this API when

00:20:06.490 --> 00:20:09.680
it is old enough to drink.

00:20:09.680 --> 00:20:12.875
Thankfully the fetch.spec by
Anne van Kesteren of Mozilla

00:20:12.875 --> 00:20:15.250
gives us lower level control
over requests and responses.

00:20:15.250 --> 00:20:17.650
We've already seen some parts
of it-- the request object,

00:20:17.650 --> 00:20:19.730
the response object--
that part of this.

00:20:19.730 --> 00:20:23.475
Lower level APIs tend to be more
complicated and harder to use.

00:20:23.475 --> 00:20:27.042
But XHR is so bad,
that is not true here.

00:20:27.042 --> 00:20:28.500
The equivalent to
this in the Fetch

00:20:28.500 --> 00:20:31.800
spec-- fetch(url)
gives you a promise.

00:20:31.800 --> 00:20:34.080
Has it in the form what you
want, gives you a promise,

00:20:34.080 --> 00:20:35.320
and you're done.

00:20:35.320 --> 00:20:37.040
This is a forward
thinking API as well,

00:20:37.040 --> 00:20:40.320
so ES6 arrow functions
make it a lot neater.

00:20:40.320 --> 00:20:42.850
ES7 async functions-- you
could turn it into a one liner

00:20:42.850 --> 00:20:43.350
if you want.

00:20:43.350 --> 00:20:45.320
It's a bit messy,
but it is possible.

00:20:45.320 --> 00:20:47.010
So to answer the
question, how do we

00:20:47.010 --> 00:20:49.380
send this request
to the network?

00:20:49.380 --> 00:20:51.110
Fetch it.

00:20:51.110 --> 00:20:52.490
So where does that go?

00:20:52.490 --> 00:20:56.520
So [INAUDIBLE] before,
three, two, one, go.

00:20:56.520 --> 00:20:58.260
It renders almost instantly.

00:20:58.260 --> 00:21:00.210
We get some data in
after two seconds.

00:21:00.210 --> 00:21:01.940
That's still coming
from the network,

00:21:01.940 --> 00:21:03.916
but our JavaScript
arrives so much quicker

00:21:03.916 --> 00:21:05.790
that we were able to
make the request sooner.

00:21:05.790 --> 00:21:07.749
Still a tad slow with
the images though,

00:21:07.749 --> 00:21:09.540
but we got the first
render really quickly.

00:21:09.540 --> 00:21:11.331
All of that stuff Elliot
was talking about.

00:21:11.331 --> 00:21:13.220
All of that DNS
and network crap.

00:21:13.220 --> 00:21:15.040
We didn't have to
worry about it.

00:21:15.040 --> 00:21:17.320
We got to first render
without all of that.

00:21:17.320 --> 00:21:19.780
But with these images--
let's fix those.

00:21:19.780 --> 00:21:23.517
When does a request for
a Flickr image-- that

00:21:23.517 --> 00:21:25.600
goes through the ServiceWorker
as all requests do.

00:21:25.600 --> 00:21:27.960
And if you've got it in a
cache, we'll just return it.

00:21:27.960 --> 00:21:30.060
Otherwise, off we
go to the network.

00:21:30.060 --> 00:21:31.330
The long round trip.

00:21:31.330 --> 00:21:34.150
And once we get a response back,
we'll send it to two places.

00:21:34.150 --> 00:21:37.591
We'll send it to the cache
and the page at the same time.

00:21:37.591 --> 00:21:39.340
So next time it's
requested, we can get it

00:21:39.340 --> 00:21:40.190
straight from the cache.

00:21:40.190 --> 00:21:41.690
We're doing this
with Flickr images.

00:21:41.690 --> 00:21:45.460
It's also good for avatars and
things-- that kind of pattern

00:21:45.460 --> 00:21:47.530
In terms of code, we
do this by special

00:21:47.530 --> 00:21:50.396
casing a URL ending
in static flickr.com,

00:21:50.396 --> 00:21:52.490
and that's where the
Flickr images live.

00:21:52.490 --> 00:21:55.337
And in that case, we're
going get it from the cache

00:21:55.337 --> 00:21:55.920
if it's there.

00:21:55.920 --> 00:21:59.170
Otherwise we do a fetch,
add it to our cache,

00:21:59.170 --> 00:22:00.525
and send it back to the browser.

00:22:00.525 --> 00:22:02.150
We have to be careful
with this pattern

00:22:02.150 --> 00:22:04.640
though, because we're adding
to the cache with every request

00:22:04.640 --> 00:22:05.220
for a Flickr image.

00:22:05.220 --> 00:22:07.262
So we'll need to garden
that cache at some point.

00:22:07.262 --> 00:22:09.553
We'll pick that up later,
but for now how does actually

00:22:09.553 --> 00:22:10.240
improve things?

00:22:10.240 --> 00:22:12.290
Three, two, one, go.

00:22:12.290 --> 00:22:14.352
Instant render as
before, we get content up

00:22:14.352 --> 00:22:15.310
in a couple of seconds.

00:22:15.310 --> 00:22:17.804
But this time we've
got some images.

00:22:17.804 --> 00:22:19.220
All the things
we've already seen.

00:22:19.220 --> 00:22:21.345
Not this top one-- we
haven't seen that one before.

00:22:21.345 --> 00:22:24.380
That arrived in
about 11 seconds.

00:22:24.380 --> 00:22:25.880
This is pretty good,
but we're still

00:22:25.880 --> 00:22:27.710
dependent on the
network for that API

00:22:27.710 --> 00:22:29.350
call to Flickr-- the
one that tells us

00:22:29.350 --> 00:22:31.810
which images to display.

00:22:31.810 --> 00:22:32.954
Let's fix that.

00:22:32.954 --> 00:22:34.370
This one's a little
bit different.

00:22:34.370 --> 00:22:36.300
The page makes
effects request, which

00:22:36.300 --> 00:22:38.470
goes by the ServiceWorker,
as as requests do.

00:22:38.470 --> 00:22:41.829
At the same time, the page also
goes straight to the cache,

00:22:41.829 --> 00:22:43.620
because pages connect
to the cache as well.

00:22:43.620 --> 00:22:46.060
And if it finds a
response, it'll take it.

00:22:46.060 --> 00:22:48.570
It'll render using that result,
and that will be old data.

00:22:48.570 --> 00:22:50.925
And that will trigger the
download of all the images,

00:22:50.925 --> 00:22:52.300
but they're in
the cache as well.

00:22:52.300 --> 00:22:54.540
We'll get to our first
few really quickly.

00:22:54.540 --> 00:22:57.432
Meanwhile, the ServiceWorker
sends a request to the network,

00:22:57.432 --> 00:22:59.890
gets it back, and does what we
did with the Flickr images--

00:22:59.890 --> 00:23:02.470
it sends it to the page and
the cache at the same time.

00:23:02.470 --> 00:23:05.440
This is also a good point for
us to clean up the image cache.

00:23:05.440 --> 00:23:07.815
With this pattern, the
page makes two requests

00:23:07.815 --> 00:23:09.390
and renders content twice.

00:23:09.390 --> 00:23:11.700
Once from the cache, and
then from the network.

00:23:11.700 --> 00:23:14.060
This means we get to
render faster full content,

00:23:14.060 --> 00:23:17.050
but provide up to date content
when we get it, if we get it,

00:23:17.050 --> 00:23:19.030
which you wouldn't if
the user's offline.

00:23:19.030 --> 00:23:20.630
The best native apps do this.

00:23:20.630 --> 00:23:24.460
Not many, but the best ones do.

00:23:24.460 --> 00:23:25.600
So here's where we're at.

00:23:25.600 --> 00:23:27.100
With special casing
static Flickr,

00:23:27.100 --> 00:23:30.081
we also want to special
case api.flickr.com.

00:23:30.081 --> 00:23:31.630
In that case, we do this.

00:23:31.630 --> 00:23:33.840
I'm not going to go
through it line-by-line.

00:23:33.840 --> 00:23:36.380
At the top there, we're fetching
and putting in the cache.

00:23:36.380 --> 00:23:37.810
At the bottom we're
returning to the browser.

00:23:37.810 --> 00:23:39.460
This gnarly bit in
the middle is where

00:23:39.460 --> 00:23:41.370
I'm going through the
caches, finding out

00:23:41.370 --> 00:23:43.710
which images we don't need
anymore by the response we've

00:23:43.710 --> 00:23:45.650
got from Flickr
and deleting those.

00:23:45.650 --> 00:23:49.860
Even with promises this is
a bit ugly, but frankly ES7

00:23:49.860 --> 00:23:52.709
async functions make
it really small.

00:23:52.709 --> 00:23:54.250
And that's how
ServiceWorker started.

00:23:54.250 --> 00:23:56.280
This pattern requires the page
to make two requests, though.

00:23:56.280 --> 00:23:59.190
So over on that side we make
two requests-- one for the cache

00:23:59.190 --> 00:24:00.940
and one for the network,
and we race them.

00:24:00.940 --> 00:24:03.970
Because it is possible for
the network to beat the cache.

00:24:03.970 --> 00:24:05.940
We see this a lot
in Windows machines.

00:24:05.940 --> 00:24:08.020
Windows machines with
virus scanners installed.

00:24:08.020 --> 00:24:10.580
Well, probably-- you
buy a PC these days,

00:24:10.580 --> 00:24:12.490
it comes with eight
virus scanners installed.

00:24:12.490 --> 00:24:14.690
And that basically just
wrecks disk access times.

00:24:14.690 --> 00:24:18.540
So the network can be
faster a lot of times.

00:24:18.540 --> 00:24:22.110
If the cache succeeds and
then the network succeeds,

00:24:22.110 --> 00:24:24.060
we just swap in the data.

00:24:24.060 --> 00:24:26.750
If the cache succeeds but
then the network fails,

00:24:26.750 --> 00:24:28.120
we silently fail at that point.

00:24:28.120 --> 00:24:29.670
That's a good
offline experience.

00:24:29.670 --> 00:24:32.170
This is what apps
like Twitter do.

00:24:32.170 --> 00:24:34.170
That's probably too much
code to show on slides,

00:24:34.170 --> 00:24:35.070
I understand that.

00:24:35.070 --> 00:24:38.560
But my point is we're expressing
relatively complex async custom

00:24:38.560 --> 00:24:41.690
behaviors in relatively
small amounts of code.

00:24:41.690 --> 00:24:43.712
Even using the low
level primitives.

00:24:43.712 --> 00:24:45.670
And the effect of that--
let's remind ourselves

00:24:45.670 --> 00:24:47.160
where we started.

00:24:47.160 --> 00:24:49.670
On the first visit
without ServiceWorker,

00:24:49.670 --> 00:24:51.980
it took us ages to
get to first render,

00:24:51.980 --> 00:24:54.460
and ages to get any
content-- there it goes.

00:24:54.460 --> 00:24:56.710
And then the images
just took far too long.

00:24:56.710 --> 00:24:57.960
Over a minute for all of them.

00:24:57.960 --> 00:24:59.920
But with the
ServiceWorker and the code

00:24:59.920 --> 00:25:03.822
that we've shown in the slides
and the caching-- three,

00:25:03.822 --> 00:25:06.140
two, one, go.

00:25:06.140 --> 00:25:08.530
And it's an instant
render with content.

00:25:08.530 --> 00:25:11.120
New content comes in
a little bit later,

00:25:11.120 --> 00:25:14.770
and now image will come
through in a few seconds.

00:25:14.770 --> 00:25:16.650
[APPLAUSE]

00:25:19.355 --> 00:25:21.250
But we shaved a second
off first render.

00:25:21.250 --> 00:25:23.390
We shaved over 30
seconds for some images.

00:25:23.390 --> 00:25:25.424
This is the kind of
stuff that Elliot

00:25:25.424 --> 00:25:27.590
would kill for to be able
to do that on the network.

00:25:27.590 --> 00:25:29.264
But we can do that
without the network.

00:25:29.264 --> 00:25:30.930
And you get those
kind of response times

00:25:30.930 --> 00:25:33.580
whether you're on a fast
connection, slow connection,

00:25:33.580 --> 00:25:34.521
or no connection.

00:25:34.521 --> 00:25:36.895
This is what catches us up
with native style performance,

00:25:36.895 --> 00:25:40.230
and it gives us the foundation
for these other things

00:25:40.230 --> 00:25:42.600
like push notifications
and background sync.

00:25:42.600 --> 00:25:45.890
These haven't arrived in Canary
yet, but they're coming soon.

00:25:45.890 --> 00:25:47.650
I guess I'm slightly
running out of time,

00:25:47.650 --> 00:25:50.720
but I'm going to-- before we
look at the code for push,

00:25:50.720 --> 00:25:52.650
I'm going to try
and do a live demo

00:25:52.650 --> 00:25:54.090
and we'll see how that works.

00:25:56.850 --> 00:25:58.600
OK, we're going to
do the [INAUDIBLE].

00:26:02.069 --> 00:26:03.110
Yay, it worked this time.

00:26:03.110 --> 00:26:03.660
Excellent.

00:26:03.660 --> 00:26:07.020
OK, so what I'm
going to show here

00:26:07.020 --> 00:26:10.130
is a build of Chrome
that we have internally.

00:26:10.130 --> 00:26:12.685
So there we go.

00:26:12.685 --> 00:26:13.185
Chromium.

00:26:16.480 --> 00:26:19.280
So this is just a
simple chat application,

00:26:19.280 --> 00:26:21.630
and we'll see if this
works if the demo

00:26:21.630 --> 00:26:23.270
gods are shining upon me.

00:26:23.270 --> 00:26:26.480
So I'm going to type in hello.

00:26:26.480 --> 00:26:26.980
[INAUDIBLE]

00:26:29.490 --> 00:26:31.190
So see if that
arrives on the phone.

00:26:31.190 --> 00:26:32.380
Come on-- yes, there we go.

00:26:32.380 --> 00:26:33.220
OK.

00:26:33.220 --> 00:26:34.470
That's nothing special, right?

00:26:34.470 --> 00:26:36.540
WebSockets have been
able to do that for ages.

00:26:36.540 --> 00:26:40.369
So what I'm going to do now
is I'm going to close the app.

00:26:40.369 --> 00:26:40.910
So that's it.

00:26:40.910 --> 00:26:43.290
There's no apps running
at all on this phone.

00:26:43.290 --> 00:26:45.260
The browser is not running.

00:26:45.260 --> 00:26:50.240
But I'm going to
send another message,

00:26:50.240 --> 00:26:53.705
and what happens this time is
just using open web standards--

00:26:53.705 --> 00:26:55.330
and there is actually
a spec for this--

00:26:55.330 --> 00:26:58.130
we've received a
push notification.

00:26:58.130 --> 00:26:59.375
A native push notification.

00:26:59.375 --> 00:27:03.530
And because it's native, it
has also appeared on my watch.

00:27:03.530 --> 00:27:06.190
There it is as well.

00:27:06.190 --> 00:27:09.636
Just using the
open web entirely.

00:27:09.636 --> 00:27:11.760
As I said, this isn't a
custom built at the moment,

00:27:11.760 --> 00:27:13.860
but we're hoping to ship
this stuff in Canary very,

00:27:13.860 --> 00:27:14.359
very soon.

00:27:19.310 --> 00:27:21.140
So the code for that
is pretty simple.

00:27:23.960 --> 00:27:26.044
So on your page, you
register for push.

00:27:26.044 --> 00:27:27.460
You get some
registration details,

00:27:27.460 --> 00:27:29.530
which will give you
the details for GCM--

00:27:29.530 --> 00:27:31.184
for Chrome-- the
Cloud Messaging stuff.

00:27:31.184 --> 00:27:32.600
Firefox will have
their own thing.

00:27:32.600 --> 00:27:34.540
Apple will have their own thing.

00:27:34.540 --> 00:27:36.970
And you'll send out to your
server once you've got it,

00:27:36.970 --> 00:27:39.386
and that gives you the means
to send messages to that user

00:27:39.386 --> 00:27:43.037
later even if their browser's
closed and the site's closed.

00:27:43.037 --> 00:27:44.870
They will have to grant
permission for this.

00:27:44.870 --> 00:27:46.250
We're not going to
give you this for free.

00:27:46.250 --> 00:27:48.041
You'll get some kind
of notification saying

00:27:48.041 --> 00:27:50.920
are you happy with the site
doing background stuff.

00:27:50.920 --> 00:27:53.080
But then when the user
receives a push message over

00:27:53.080 --> 00:27:54.996
in the ServiceWorker,
you get an event for it.

00:27:54.996 --> 00:27:57.000
You can look at the
data that you get.

00:27:57.000 --> 00:27:58.970
In our case, we'll
update some caches

00:27:58.970 --> 00:28:00.424
and then show a notification.

00:28:00.424 --> 00:28:02.340
But you can really-- you
can do what you want.

00:28:02.340 --> 00:28:04.420
You'll also get an event when
the notification's clicked.

00:28:04.420 --> 00:28:06.503
Once again you can do what
you want at this point,

00:28:06.503 --> 00:28:08.540
but it's likely that
you're going to open a URL.

00:28:08.540 --> 00:28:11.439
You can also focus an
existing tab as well.

00:28:11.439 --> 00:28:12.980
I'm running out of
time, so I'm going

00:28:12.980 --> 00:28:14.700
to skip through some of
the background sync stuff.

00:28:14.700 --> 00:28:16.620
But it's very similar
to push messaging stuff.

00:28:16.620 --> 00:28:20.097
Like if sending an email fails--
say that [INAUDIBLE] database,

00:28:20.097 --> 00:28:21.680
register for a
background sync saying,

00:28:21.680 --> 00:28:23.330
hey, sometime in
the future give me

00:28:23.330 --> 00:28:25.682
a chance to do something else.

00:28:25.682 --> 00:28:28.140
And in your ServiceWorker you'll
get an event-- sync event.

00:28:28.140 --> 00:28:29.720
Look at the ID, and
do what you want,

00:28:29.720 --> 00:28:32.136
which is usually going to be
send-- send those emails that

00:28:32.136 --> 00:28:33.210
failed to send.

00:28:33.210 --> 00:28:35.840
You can also-- this is
registering for a single sync

00:28:35.840 --> 00:28:37.660
event, which is kind
of like I wasn't

00:28:37.660 --> 00:28:39.430
able to do some stuff
due to connectivity.

00:28:39.430 --> 00:28:41.620
Let me do it later when
the user has connectivity.

00:28:41.620 --> 00:28:44.350
You can also request an
interval sync as well,

00:28:44.350 --> 00:28:46.182
an interval you
specify as a minimum.

00:28:46.182 --> 00:28:47.890
Things will actually
happen heuristically

00:28:47.890 --> 00:28:50.630
depending on how often
the user uses the site,

00:28:50.630 --> 00:28:55.116
and we'll try and coalesce with
other events to save battery.

00:28:55.116 --> 00:28:56.490
With ServiceWorker,
we gain a lot

00:28:56.490 --> 00:28:59.050
of the features that
make native superior,

00:28:59.050 --> 00:29:02.030
but we retain the bits
that make the web superior.

00:29:02.030 --> 00:29:06.560
Instant on, no install
required, open platform.

00:29:06.560 --> 00:29:08.810
Chrome is going to start
shipping this stuff to stable

00:29:08.810 --> 00:29:09.600
this year.

00:29:09.600 --> 00:29:11.190
The offline stuff especially.

00:29:11.190 --> 00:29:14.190
And then next year for some of
the push and background sync

00:29:14.190 --> 00:29:14.690
stuff.

00:29:14.690 --> 00:29:16.440
Firefox is actively
developing it as well.

00:29:16.440 --> 00:29:17.809
Microsoft are investigating it.

00:29:17.809 --> 00:29:19.350
We haven't heard
anything from Apple,

00:29:19.350 --> 00:29:22.310
but that's not
unusual at this point.

00:29:22.310 --> 00:29:24.910
Thankfully it's design to
be used as an enhancement.

00:29:24.910 --> 00:29:27.406
It won't disrupt the browsers
that don't support it.

00:29:27.406 --> 00:29:29.280
So as long as you use
basic object detection,

00:29:29.280 --> 00:29:31.696
as soon as it hits the millions
of users that have Chrome,

00:29:31.696 --> 00:29:34.600
you can start giving
them that benefit.

00:29:34.600 --> 00:29:36.541
ServiceWorker doesn't
make stuff work offline.

00:29:36.541 --> 00:29:38.540
It doesn't send push
messages into cache updates

00:29:38.540 --> 00:29:39.790
and notifications.

00:29:39.790 --> 00:29:41.790
It gives you nothing for
free, but it treats you

00:29:41.790 --> 00:29:43.250
like an adult.

00:29:43.250 --> 00:29:45.670
It gives you the
moving parts and says

00:29:45.670 --> 00:29:46.920
do what you want with them.

00:29:46.920 --> 00:29:48.128
Use it to make things faster.

00:29:48.128 --> 00:29:49.310
Make things work offline.

00:29:49.310 --> 00:29:50.950
Use it to transcode
a video format

00:29:50.950 --> 00:29:53.280
the browser doesn't
support natively.

00:29:53.280 --> 00:29:54.330
Build a client side wiki.

00:29:54.330 --> 00:29:55.540
We've seen that already.

00:29:55.540 --> 00:29:56.490
Do what you want.

00:29:56.490 --> 00:29:58.480
Do it in a way that's
unique to your app.

00:29:58.480 --> 00:30:01.140
The way that gives the
best user experience.

00:30:01.140 --> 00:30:03.270
I am heavily biased
because I've been involved

00:30:03.270 --> 00:30:05.220
in the design of
this stuff, but I

00:30:05.220 --> 00:30:06.720
think this changes
the scope of what

00:30:06.720 --> 00:30:10.530
the web is capable of more
than any feature since XHR.

00:30:10.530 --> 00:30:12.050
Let's build some
cool stuff with it.

00:30:12.050 --> 00:30:13.217
Thank you very much.

00:30:13.217 --> 00:30:16.670
[APPLAUSE]

00:30:16.670 --> 00:30:17.670
MALE SPEAKER: All right.

00:30:17.670 --> 00:30:19.520
Thank you, Jake.

