WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
The most obvious thing to do is start flipping bits.

00:00:02.000 --> 00:00:05.000
So for example, we take a Word document that we actually saved out of Microsoft Word--

00:00:05.000 --> 00:00:08.000
maybe it's a couple megabytes long; it's some huge file that we've created--

00:00:08.000 --> 00:00:11.000
and we flip maybe 10, maybe 100, maybe a couple thousand bits in it,

00:00:11.000 --> 00:00:15.000
we load it up in Microsoft Word, and we see if we can find a part of the range

00:00:15.000 --> 00:00:18.000
for Microsoft Word that causes it to crash.

00:00:18.000 --> 00:00:21.000
Another thing we can do--and this is one of the techniques 

00:00:21.000 --> 00:00:23.000
often used by penetration testing tools based on fuzzing--

00:00:23.000 --> 00:00:25.000
is modify selected fields.

00:00:25.000 --> 00:00:29.000
And the model here is that our test case has some known structure--

00:00:29.000 --> 00:00:31.000
that is to say, it's a valid HTTP request.

00:00:31.000 --> 00:00:34.000
What we're going to do is target parts of the HTTP request

00:00:34.000 --> 00:00:37.000
that are known to frequently lead to vulnerabilities in servers

00:00:37.000 --> 00:00:39.000
and we're going to selectively modify those.

00:00:39.000 --> 00:00:41.000
So we might, for example, take the request size

00:00:41.000 --> 00:00:43.000
and just replace it with some random number

00:00:43.000 --> 00:00:46.000
and see if that triggers a buffer overflow in the web server.

00:00:46.000 --> 00:00:48.000
Another thing we can do if we have a parser for our test case

00:00:48.000 --> 00:00:50.000
is modify it using its grammar.

00:00:50.000 --> 00:00:54.000
So we can, for example, add or remove or replace tokens in a test case

00:00:54.000 --> 00:00:57.000
or also subtrees of the abstract syntax tree.

00:00:57.000 --> 00:01:00.000
So let's finish up by looking at a short mutational fuzzer.

00:01:00.000 --> 00:01:04.000
What I have here is a 5-line Python program

00:01:04.000 --> 00:01:07.000
that was made kind of famous by Charlie Miller's talk, "Babysitting an Army of Monkeys."

00:01:07.000 --> 00:01:09.000
This talk was pretty fun to watch, so I recommend that you Google that

00:01:09.000 --> 00:01:11.000
and look at it on YouTube.

00:01:11.000 --> 00:01:13.000
What Charlie Miller claims in this talk is that he found an enormous number of bugs

00:01:13.000 --> 00:01:15.000
with this 5 lines of Python.

00:01:15.000 --> 00:01:17.000
And so what it turns out is that the 5 lines of Python 

00:01:17.000 --> 00:01:21.000
are missing quite a bit of code that you need to make this work in practice,

00:01:21.000 --> 00:01:23.000
and I've added comments sort of explaining what these are.

00:01:23.000 --> 00:01:25.000
So what we would first need to do is load a file into a buffer in memory.

00:01:25.000 --> 00:01:28.000
And so the file that we're going to load is going to be a PDF document,

00:01:28.000 --> 00:01:31.000
a PowerPoint document, a Word document--whatever it is that we want to mutate

00:01:31.000 --> 00:01:34.000
for purposes of creating a random test case.

00:01:34.000 --> 00:01:37.000
What this code does is first assigns into this numWrites variable,

00:01:37.000 --> 00:01:39.000
which is basically deciding how many places 

00:01:39.000 --> 00:01:41.000
inside the file that we've loaded we're going to mutate.

00:01:41.000 --> 00:01:43.000
And so now we're going to loop over that range,

00:01:43.000 --> 00:01:47.000
and for every iteration of the loop we're going to make up a random byte

00:01:47.000 --> 00:01:49.000
then make up a random location within our buffer

00:01:49.000 --> 00:01:52.000
and then mod whatever value was there with our random byte.

00:01:52.000 --> 00:01:54.000
So what does that mean?

00:01:54.000 --> 00:01:57.000
We're basically totally randomly picking some places in the buffer to mess with

00:01:57.000 --> 00:02:00.000
and messing with them, then we're going to save the buffer back to disk,

00:02:00.000 --> 00:02:04.000
run whatever our application is, so run Windows Media Player,

00:02:04.000 --> 00:02:06.000
PowerPoint, Acrobat Reader--whatever it is we're trying to fuzz--

00:02:06.000 --> 00:02:08.000
and look at its exit code.

00:02:08.000 --> 00:02:10.000
And so its exit code from the operating system is going to tell us whether it died

00:02:10.000 --> 00:02:12.000
or whether it didn't die.

00:02:12.000 --> 00:02:15.000
And if it doesn't die, then we're going to have to wait a little bit and then just kill it.

00:02:15.000 --> 00:02:17.000
So that's a failed test case.

00:02:17.000 --> 00:02:21.000
If it does die, then we're going to want to save the buffer off into some sort of a location

00:02:21.000 --> 00:02:24.000
where we can examine it later, and in either case, then, we're going to start over.

00:02:24.000 --> 00:02:27.000
So hopefully what would happen if we made this code real by writing the rest of it--

00:02:27.000 --> 00:02:30.000
and this is going to be a challenge program for your assignment at the end of this unit--

00:02:30.000 --> 00:02:33.000
is we would basically have a large pool of documents or files or whatever

00:02:33.000 --> 00:02:35.000
that we can use for fuzzing.

00:02:35.000 --> 00:02:37.000
We'd start this thing up on some sort of a fast machine--

00:02:37.000 --> 00:02:40.000
ideally, we'd start up a copy for every core on the machine--

00:02:40.000 --> 00:02:42.000
and we'd go on vacation, we'd take a week.

00:02:42.000 --> 00:02:45.000
And when we came back, ideally, it would have found a bunch of vulnerabilities.

00:02:45.000 --> 00:02:48.000
It turns out that a lot of people have been using this sort of tool

00:02:48.000 --> 00:02:52.000
on the common utility programs like Acrobat Reader and PowerPoint 

00:02:52.000 --> 00:02:54.000
for a number of years now.

00:02:54.000 --> 00:02:56.000
So it may be the case that if you do this, you're not going to find anything 

00:02:56.000 --> 00:02:58.000
on the latest version of Acrobat Reader.

00:02:58.000 --> 00:03:00.000
And in fact, if you do find something, it's actually pretty interesting,

00:03:00.000 --> 00:03:02.000
and I hope you'll share it on the forums.

00:03:02.000 --> 00:03:04.000
On the other hand, if we want to actually get some easy successes--

00:03:04.000 --> 00:03:08.000
and this isn't for purposes of finding real bugs; 

00:03:08.000 --> 00:03:10.000
it's for purposes of understanding random testing better--

00:03:10.000 --> 00:03:14.000
what you should do is find some old versions of Acrobat Reader or PowerPoint

00:03:14.000 --> 00:03:16.000
or whatever, get those on your machine and fuzz those.

00:03:16.000 --> 00:03:19.000
And almost certainly, using some sort of an infrastructure like this,

00:03:19.000 --> 00:03:24.000
if you wait long enough, you'll be able to find some sort of a problem in those applications.

