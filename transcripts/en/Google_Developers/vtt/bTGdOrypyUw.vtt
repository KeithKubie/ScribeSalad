WEBVTT
Kind: captions
Language: en

00:00:04.374 --> 00:00:07.480
CLAUDIO: --the Google Drive
SDK question time--

00:00:07.480 --> 00:00:08.150
I'm Claudio.

00:00:08.150 --> 00:00:09.270
ALI: And I'm Ali.

00:00:09.270 --> 00:00:10.200
CLAUDIO: This is Ali.

00:00:10.200 --> 00:00:12.580
We're two engineers in the
Google Drive SDK Developer

00:00:12.580 --> 00:00:14.490
Relations Team.

00:00:14.490 --> 00:00:17.930
Today, we're going to answer
some of your questions from

00:00:17.930 --> 00:00:22.100
SecOverflow and some of the
questions we got from you

00:00:22.100 --> 00:00:25.680
about the Google Drive
application development.

00:00:25.680 --> 00:00:27.740
I think we're going to
start with this one.

00:00:27.740 --> 00:00:29.180
It's about search criteria.

00:00:29.180 --> 00:00:33.220
The question says, how to set
criteria on SupFills in the

00:00:33.220 --> 00:00:35.640
query parameter.

00:00:35.640 --> 00:00:39.600
So this user has a complex
tree structure.

00:00:39.600 --> 00:00:42.590
And he wants to retrieve files
and folders and so on.

00:00:42.590 --> 00:00:44.990
But I think, before answering
that, we should explain what

00:00:44.990 --> 00:00:47.120
the search criteria are
in Google Drive

00:00:47.120 --> 00:00:48.090
and how to use that.

00:00:48.090 --> 00:00:50.000
ALI: Thanks, Claudio.

00:00:50.000 --> 00:00:55.000
So when you list files with the
Google Drive API, you have

00:00:55.000 --> 00:00:58.720
the opportunity to give
a query parameter.

00:00:58.720 --> 00:01:00.050
Now that query parameter--

00:01:00.050 --> 00:01:04.349
q, it's called-- specifies
a search on the files and

00:01:04.349 --> 00:01:07.110
returns only the
ones you want.

00:01:07.110 --> 00:01:10.260
So there are a number of fields
you can search on, the

00:01:10.260 --> 00:01:15.520
title, the full text of the
body, the parents of the file,

00:01:15.520 --> 00:01:18.340
i.e., the folders where the
file lives in, whether the

00:01:18.340 --> 00:01:19.240
file has been trashed.

00:01:19.240 --> 00:01:22.520
And all of these are listed
in our documentation.

00:01:22.520 --> 00:01:25.760
Now, the question is
specifically, here, asking.

00:01:25.760 --> 00:01:31.130
CLAUDIO: About looking for files
in specific folders and

00:01:31.130 --> 00:01:34.510
also how to find those files
that are in the root folder.

00:01:34.510 --> 00:01:35.670
ALI: OK.

00:01:35.670 --> 00:01:42.770
So the way that the questioner
wants to do this is by doing

00:01:42.770 --> 00:01:45.440
query parameters
on sub-fields.

00:01:45.440 --> 00:01:48.890
So instead of just checking
whether there is a parent, to

00:01:48.890 --> 00:01:52.030
look whether the parent
is the root.

00:01:52.030 --> 00:01:54.490
Unfortunately, that's
not possible.

00:01:54.490 --> 00:01:57.560
The query language is not
generated, dynamically, based

00:01:57.560 --> 00:01:58.620
on what's available.

00:01:58.620 --> 00:02:00.540
We have specified the
fields that we want.

00:02:00.540 --> 00:02:03.120
And that's so that the queries
can run quickly and

00:02:03.120 --> 00:02:04.330
efficiently.

00:02:04.330 --> 00:02:08.780
So unless the query parameter is
provided, you won't be able

00:02:08.780 --> 00:02:09.160
to use that.

00:02:09.160 --> 00:02:12.680
And you can't invent your own
arbitrarily-nested queries.

00:02:12.680 --> 00:02:13.755
That won't work,
unfortunately.

00:02:13.755 --> 00:02:16.840
CLAUDIO: But you can use some
Boolean logic to extend the

00:02:16.840 --> 00:02:18.120
queries, like End.

00:02:18.120 --> 00:02:19.350
ALI: Yes, of course.

00:02:19.350 --> 00:02:24.110
So you can join, or conjoin,
multiple query bits together.

00:02:24.110 --> 00:02:28.250
So you can say, the title
contains Claudio is great.

00:02:28.250 --> 00:02:31.030
And the file has not
been trashed.

00:02:31.030 --> 00:02:31.590
CLAUDIO: OK.

00:02:31.590 --> 00:02:32.390
Which is always true.

00:02:32.390 --> 00:02:33.810
ALI: Which is always true.

00:02:33.810 --> 00:02:37.160
So you can join them with
the And parameter.

00:02:37.160 --> 00:02:41.460
And once you send that query,
obviously, the query parameter

00:02:41.460 --> 00:02:44.510
itself becomes URL encoded
when you send it.

00:02:44.510 --> 00:02:46.720
So it becomes this long thing.

00:02:46.720 --> 00:02:48.645
But then, the results
are joined.

00:02:48.645 --> 00:02:53.535
So only those files which meet
all the criteria are provided.

00:02:53.535 --> 00:02:56.780
CLAUDIO: If you know Boolean
logic, what you expect is to

00:02:56.780 --> 00:02:59.360
have And, Or, and Not.

00:02:59.360 --> 00:03:00.720
So we have all of them.

00:03:00.720 --> 00:03:02.350
ALI: So currently,
we only have And.

00:03:02.350 --> 00:03:03.320
CLAUDIO: Not even Or?

00:03:03.320 --> 00:03:06.490
ALI: Not even Or.

00:03:06.490 --> 00:03:08.500
So we don't have Or,
at the moment.

00:03:08.500 --> 00:03:09.890
We only have And.

00:03:09.890 --> 00:03:16.010
Unfortunately, the way to do Or,
at the moment, would be to

00:03:16.010 --> 00:03:19.790
do two separate queries and
then join them together.

00:03:19.790 --> 00:03:20.750
And that would be the Or.

00:03:20.750 --> 00:03:22.200
So unfortunately, no.

00:03:22.200 --> 00:03:25.080
But that's definitely something
that, as the query

00:03:25.080 --> 00:03:28.290
language becomes more mature,
we would look to add.

00:03:28.290 --> 00:03:32.650
The other part of it is
negations, as in Not.

00:03:32.650 --> 00:03:34.700
I think that's probably
more useful than Or.

00:03:34.700 --> 00:03:38.500
CLAUDIO: I mean, Or, developers
can easily come up

00:03:38.500 --> 00:03:40.380
with a solution that
doesn't require Or.

00:03:40.380 --> 00:03:44.890
As you said, two queries can
return the same result set of

00:03:44.890 --> 00:03:46.100
an Or query.

00:03:46.100 --> 00:03:47.810
Not is probably a bigger
limitation.

00:03:47.810 --> 00:03:49.320
But are we addressing it?

00:03:49.320 --> 00:03:51.840
ALI: So again, that's something
that we're looking

00:03:51.840 --> 00:03:53.902
to add soon.

00:03:56.780 --> 00:03:59.730
My personal opinion is, I think
it would greatly enhance

00:03:59.730 --> 00:04:02.650
the query language, even
far more than Or.

00:04:02.650 --> 00:04:03.390
But having said that--

00:04:03.390 --> 00:04:06.420
CLAUDIO: Going back to the
question, there's another part

00:04:06.420 --> 00:04:07.940
that is important.

00:04:07.940 --> 00:04:13.740
So this developer is trying to
specifically query for files

00:04:13.740 --> 00:04:15.850
inside folders and folders
inside folders.

00:04:15.850 --> 00:04:20.100
So we have a way to look for the
elements inside a folder.

00:04:20.100 --> 00:04:23.760
And each folder is identified
by a unique ID, like every

00:04:23.760 --> 00:04:27.120
other file and every other
resource in the API.

00:04:27.120 --> 00:04:30.750
But there's a special case,
which is the Root Folder.

00:04:30.750 --> 00:04:35.320
And in fact, developers can
always access the Root Folder

00:04:35.320 --> 00:04:41.760
by using the special alias Root,
instead of the long ID,

00:04:41.760 --> 00:04:45.360
which you retrieve from
the API itself.

00:04:45.360 --> 00:04:48.140
So in any case, you need
to use the root.

00:04:48.140 --> 00:04:50.990
You can just type Root
instead of a long ID.

00:04:50.990 --> 00:04:53.170
ALI: So there are three
things actually here.

00:04:53.170 --> 00:04:56.250
Now, what this person wants--

00:04:56.250 --> 00:04:58.530
I think we can solve it
in a different way.

00:04:58.530 --> 00:05:00.190
What do you think about
that, Claudio?

00:05:00.190 --> 00:05:04.590
So firstly, there are two ways
of looking inside a folder.

00:05:04.590 --> 00:05:08.170
Either you can search for the
files for which the parent is

00:05:08.170 --> 00:05:09.280
that folder.

00:05:09.280 --> 00:05:13.160
Or you can actually list the
children of that folder.

00:05:13.160 --> 00:05:15.700
Now, if you do it the first
way, using the query

00:05:15.700 --> 00:05:18.630
parameter, I search for
files that have the

00:05:18.630 --> 00:05:21.870
parent of that folder.

00:05:21.870 --> 00:05:23.960
Do you know the query
parameter?

00:05:23.960 --> 00:05:26.310
Parent end, something
or another--

00:05:26.310 --> 00:05:28.166
CLAUDIO: Yeah, end is one of
the keywords you can use in

00:05:28.166 --> 00:05:28.720
the query library.

00:05:28.720 --> 00:05:31.180
ALI: So using that, that has the
advantage because you can

00:05:31.180 --> 00:05:35.230
join that with a MIME Type
Query for specifically

00:05:35.230 --> 00:05:37.090
returning folders.

00:05:37.090 --> 00:05:40.160
If you've watched this session
in the past, you know that

00:05:40.160 --> 00:05:44.550
folders in the Google Drive API
are defined by having a

00:05:44.550 --> 00:05:45.930
special MIME type.

00:05:45.930 --> 00:05:47.070
So they're just files.

00:05:47.070 --> 00:05:49.190
But they have this special
MIME type.

00:05:49.190 --> 00:05:50.940
And obviously they don't
have any binary data

00:05:50.940 --> 00:05:52.100
associated with them.

00:05:52.100 --> 00:05:54.770
But what you can do then,
is you can say, OK.

00:05:54.770 --> 00:05:59.310
I want to search for files that
are in a certain folder

00:05:59.310 --> 00:06:01.310
but also have the folder
MIME types.

00:06:01.310 --> 00:06:02.910
And now you're only searching
for folders

00:06:02.910 --> 00:06:04.220
within a certain folder.

00:06:04.220 --> 00:06:06.500
So if you want to search for
folders within the root, the

00:06:06.500 --> 00:06:08.240
first component would
be the root part.

00:06:08.240 --> 00:06:10.340
And the second component would
be the folder type.

00:06:10.340 --> 00:06:14.390
And again, here's where Not
would be really useful.

00:06:14.390 --> 00:06:16.790
Because then, if you just wanted
files, you could search

00:06:16.790 --> 00:06:19.550
for things that were not
the folder MIME type.

00:06:19.550 --> 00:06:21.704
But unfortunately that's not
possible at the moment.

00:06:21.704 --> 00:06:25.210
CLAUDIO: So you said that a
folder has a list of children.

00:06:25.210 --> 00:06:28.840
And a document has a
list of parents.

00:06:28.840 --> 00:06:31.170
So basically, from one you
can get to the other.

00:06:31.170 --> 00:06:35.170
And from the file, you can also
get back to the folder.

00:06:35.170 --> 00:06:37.310
Is there any difference in
what you can achieve with

00:06:37.310 --> 00:06:39.866
these two feeds?

00:06:39.866 --> 00:06:42.150
ALI: So not really.

00:06:42.150 --> 00:06:43.720
They're pretty symmetric.

00:06:43.720 --> 00:06:46.100
CLAUDIO: So it's probably just
a convenience for developers,

00:06:46.100 --> 00:06:50.570
so that they can start from the
research they have and go

00:06:50.570 --> 00:06:52.735
back to the folder, or start
from the folder and get back

00:06:52.735 --> 00:06:53.900
to the intended document.

00:06:53.900 --> 00:06:56.090
ALI: And the third way, as well,
they can actually query

00:06:56.090 --> 00:06:57.100
against these.

00:06:57.100 --> 00:06:58.520
So you can start from
the folder.

00:06:58.520 --> 00:06:59.860
You can start from the file.

00:06:59.860 --> 00:07:02.450
Or you can start completely
outside both, if you happen to

00:07:02.450 --> 00:07:05.590
know an ID or even if you want
to start from the root, as

00:07:05.590 --> 00:07:08.450
Claudio said, using
the Root alias.

00:07:08.450 --> 00:07:09.690
CLAUDIO: OK.

00:07:09.690 --> 00:07:11.130
Let's move to another question.

00:07:11.130 --> 00:07:11.460
ALI: Yeah.

00:07:11.460 --> 00:07:13.970
So just before we go, this is
a really common problem.

00:07:13.970 --> 00:07:17.980
People are traversing Google
Drive to try and get the

00:07:17.980 --> 00:07:18.780
folder hierarchy.

00:07:18.780 --> 00:07:19.670
It's a common problem.

00:07:19.670 --> 00:07:22.510
So perhaps, we should write some
sample code or something.

00:07:22.510 --> 00:07:23.620
CLAUDIO: Maybe we should.

00:07:23.620 --> 00:07:29.780
And we should also highlight
that folders are actually,

00:07:29.780 --> 00:07:30.850
let's say, collections.

00:07:30.850 --> 00:07:35.400
So a document may belong in
multiple collections.

00:07:35.400 --> 00:07:36.280
ALI: Exactly.

00:07:36.280 --> 00:07:36.410
CLAUDIO: Yeah.

00:07:36.410 --> 00:07:38.620
That's why you have a
parent list and not

00:07:38.620 --> 00:07:40.000
just a single parent.

00:07:40.000 --> 00:07:41.860
Remember, it's not exactly
a folder structure.

00:07:41.860 --> 00:07:45.110
I mean, they're represented
as folders in the UI.

00:07:45.110 --> 00:07:47.020
But the same file can be

00:07:47.020 --> 00:07:49.790
categorized in multiple folders.

00:07:49.790 --> 00:07:52.210
ALI: And obviously, that would
depend how your app wants to

00:07:52.210 --> 00:07:52.830
handle that.

00:07:52.830 --> 00:07:55.030
If you're mapping to a regular
file structure, you're going

00:07:55.030 --> 00:07:57.830
to have to think of a way
of handling that.

00:07:57.830 --> 00:07:59.840
And I don't think there's
any particularly good

00:07:59.840 --> 00:08:00.400
solution for that.

00:08:00.400 --> 00:08:01.150
CLAUDIO: Yeah.

00:08:01.150 --> 00:08:04.000
You probably have to have a
single regional file and then

00:08:04.000 --> 00:08:08.690
links to it in the file system
and things like that.

00:08:08.690 --> 00:08:11.620
Well, the follow-up question was
about the Not operator for

00:08:11.620 --> 00:08:13.550
query parameters, for queries.

00:08:13.550 --> 00:08:16.540
And as you said, there is
no negation operator.

00:08:16.540 --> 00:08:18.130
ALI: Yeah, unfortunately not.

00:08:18.130 --> 00:08:19.690
We would love that.

00:08:19.690 --> 00:08:23.760
If you feel like contributing
on how you would prefer that

00:08:23.760 --> 00:08:27.740
to look and things like that,
then obviously, we'd like to

00:08:27.740 --> 00:08:28.885
hear back from you.

00:08:28.885 --> 00:08:32.886
CLAUDIO: How do they give us
feedback, if they want?

00:08:32.886 --> 00:08:34.780
ALI: You can send us an email.

00:08:34.780 --> 00:08:38.140
Or you could even make a
question about that.

00:08:38.140 --> 00:08:40.830
CLAUDIO: OK.

00:08:40.830 --> 00:08:43.650
Let's move on to another
question.

00:08:43.650 --> 00:08:44.770
ALI: Right.

00:08:44.770 --> 00:08:47.960
CLAUDIO: We're still talking
about how Files feed.

00:08:47.960 --> 00:08:51.405
And this user, the question is
called Google Drive using .Net

00:08:51.405 --> 00:08:55.040
API exportLinks empty.

00:08:55.040 --> 00:08:59.380
So it's not exactly about .Net,
it's very interesting.

00:08:59.380 --> 00:09:00.620
It's about the export links.

00:09:00.620 --> 00:09:01.730
What are the export links?

00:09:01.730 --> 00:09:05.250
ALI: So Google Docs types,
as in Google Docs, Google

00:09:05.250 --> 00:09:09.220
Spreadsheets, Google Drawings,
Google Presentations, they can

00:09:09.220 --> 00:09:12.910
all be exported to various
formats, using the API.

00:09:12.910 --> 00:09:16.070
Now, the type of export that
you can perform, i.e., the

00:09:16.070 --> 00:09:19.020
file that it becomes, really
depends on the type.

00:09:19.020 --> 00:09:21.870
So you can imagine a Google Docs
might want to be exported

00:09:21.870 --> 00:09:25.330
to, obviously, PDF, OpenOffice,
Microsoft Word,

00:09:25.330 --> 00:09:26.860
these kind of things.

00:09:26.860 --> 00:09:29.220
And a spreadsheet, likewise,
would be exportable to

00:09:29.220 --> 00:09:30.220
different types.

00:09:30.220 --> 00:09:33.890
So you don't know, unless you
know the type of file, what it

00:09:33.890 --> 00:09:35.380
can be exported to.

00:09:35.380 --> 00:09:38.870
Luckily, in the About feed,
which is kind of like a feed

00:09:38.870 --> 00:09:42.380
that displays loads of data for
the specific user, there

00:09:42.380 --> 00:09:45.790
is a list of the export
formats for each type.

00:09:45.790 --> 00:09:49.570
So in that list you look
up your type of file.

00:09:49.570 --> 00:09:53.580
And then it will show
the export format.

00:09:53.580 --> 00:09:55.910
When later you're writing your
application, you can predict

00:09:55.910 --> 00:09:57.090
what kind of exports
it will be.

00:09:57.090 --> 00:10:01.310
CLAUDIO: In a similar way, the
same About feed includes a

00:10:01.310 --> 00:10:02.930
list of import formats.

00:10:02.930 --> 00:10:03.275
ALI: Exactly.

00:10:03.275 --> 00:10:07.060
CLAUDIO: So they list the pairs
of Source Formats and

00:10:07.060 --> 00:10:09.110
Destination Formats we
can import from.

00:10:09.110 --> 00:10:10.230
ALI: Exactly.

00:10:10.230 --> 00:10:13.480
So without actually grabbing any
files, for that user, you

00:10:13.480 --> 00:10:16.035
can see what imports and what
exports they can do.

00:10:16.035 --> 00:10:18.150
CLAUDIO: But that's a general
thing, you know.

00:10:18.150 --> 00:10:20.770
So you know that, let's say,
for any Google Doc,

00:10:20.770 --> 00:10:22.110
you can get a PDF.

00:10:22.110 --> 00:10:26.960
But then for each document, you
can also get, or export,

00:10:26.960 --> 00:10:29.010
the same document in
different formats.

00:10:29.010 --> 00:10:30.900
And that's what the
exports links are.

00:10:30.900 --> 00:10:35.500
So when you retrieve the
metadata for a document, for a

00:10:35.500 --> 00:10:37.290
file store on Google Drive--

00:10:37.290 --> 00:10:41.470
together with the rest of the
fields you get, you also

00:10:41.470 --> 00:10:43.290
obtain a list of the
export links.

00:10:43.290 --> 00:10:43.980
ALI: That's right.

00:10:43.980 --> 00:10:46.170
CLAUDIO: So let's say
it's a document.

00:10:46.170 --> 00:10:50.010
You get an export link for PDF
format and a link to it, the

00:10:50.010 --> 00:10:54.660
export link for TXT file, if
available and a list to it.

00:10:54.660 --> 00:10:57.150
ALI: Now, these export links
are actually just

00:10:57.150 --> 00:11:00.400
conveniences, so that you can
just grab the link and use it.

00:11:00.400 --> 00:11:02.590
If you look at them, you can
see that they're fairly

00:11:02.590 --> 00:11:03.190
predictable.

00:11:03.190 --> 00:11:05.190
And just by adding a query
parameter, you can

00:11:05.190 --> 00:11:06.300
choose which one.

00:11:06.300 --> 00:11:12.190
Now, these export links do map
exactly to the allowable

00:11:12.190 --> 00:11:15.590
export formats for those
types of file.

00:11:15.590 --> 00:11:19.560
So to recap, remember, this is
just Google Docs types that we

00:11:19.560 --> 00:11:20.820
perform these exports on.

00:11:20.820 --> 00:11:23.650
Imports, obviously, anything
that can be imported into

00:11:23.650 --> 00:11:25.180
these Google Docs format.

00:11:25.180 --> 00:11:27.650
So here we're really
highlighting some of the

00:11:27.650 --> 00:11:31.850
differences between native
Google Docs files, like Google

00:11:31.850 --> 00:11:33.590
Docs, spreadsheets,
presentations, et cetera.

00:11:33.590 --> 00:11:38.100
And what we call binary files,
a JPEG or a PDF or

00:11:38.100 --> 00:11:39.280
these kind of things.

00:11:39.280 --> 00:11:43.010
So you have a bit more control
on how you can export them.

00:11:43.010 --> 00:11:46.000
This is a really useful feature
because, recently,

00:11:46.000 --> 00:11:50.340
we've added the ability to open
these Google Docs files

00:11:50.340 --> 00:11:52.120
directly from the Drive UI.

00:11:52.120 --> 00:11:54.510
In the same way that you can
write an app to edit images,

00:11:54.510 --> 00:11:58.380
you can also write an app, not
quite to edit a Google Doc,

00:11:58.380 --> 00:12:00.010
but to edit the exported

00:12:00.010 --> 00:12:01.830
representation of a Google Doc.

00:12:01.830 --> 00:12:04.480
So if you've got an application
that faxes PDFs,

00:12:04.480 --> 00:12:07.080
for example, you can
register that.

00:12:07.080 --> 00:12:12.090
And then the user can open a
Google Doc file as a PDF on

00:12:12.090 --> 00:12:13.110
your application.

00:12:13.110 --> 00:12:14.590
And then that will be faxed
or whatever you

00:12:14.590 --> 00:12:15.520
want to do with that.

00:12:15.520 --> 00:12:17.460
So we think that's a really
useful feature.

00:12:17.460 --> 00:12:20.360
And while highlighting the
difference, it also shows how

00:12:20.360 --> 00:12:23.495
you can use different types of
files in the same kind of way.

00:12:23.495 --> 00:12:27.170
CLAUDIO: I just wanted to add
that, as you said, the Export

00:12:27.170 --> 00:12:30.340
URLs are pretty easy to guess.

00:12:30.340 --> 00:12:32.510
But don't do it.

00:12:32.510 --> 00:12:35.140
We can always change
the URL format.

00:12:35.140 --> 00:12:37.790
And you should never trust
guessing URLs.

00:12:37.790 --> 00:12:41.000
And any time you want to export
a file from Google

00:12:41.000 --> 00:12:44.870
Drive, you should get the file
metadata, check the export

00:12:44.870 --> 00:12:49.400
links, find the one you want
for the specific format you

00:12:49.400 --> 00:12:52.900
want, and get the
link from there.

00:12:52.900 --> 00:12:54.780
We can always add new formats.

00:12:54.780 --> 00:12:59.290
So you have to check the list of
available formats any time

00:12:59.290 --> 00:13:00.423
you want to use those.

00:13:00.423 --> 00:13:01.410
ALI: Yeah.

00:13:01.410 --> 00:13:04.990
And to continue with that, if
your export format is missing,

00:13:04.990 --> 00:13:07.860
then, well, that's again
something to let us know.

00:13:07.860 --> 00:13:09.940
If it's going to be useful for
you, it's going to be likely

00:13:09.940 --> 00:13:11.452
useful other people as well.

00:13:11.452 --> 00:13:15.140
CLAUDIO: Yeah, perfect.

00:13:15.140 --> 00:13:17.660
Then I would say that we can
move on to another question.

00:13:17.660 --> 00:13:18.510
ALI: Yeah.

00:13:18.510 --> 00:13:21.170
CLAUDIO: Now, the question is
about resumable upload.

00:13:21.170 --> 00:13:27.560
It's Error 411, using resumable
upload in WebLogic.

00:13:27.560 --> 00:13:29.270
WebLogic, I think, is
the least important

00:13:29.270 --> 00:13:30.040
part of this question.

00:13:30.040 --> 00:13:34.790
WebLogic is a Java framework.

00:13:34.790 --> 00:13:37.440
But the protocol
to do resumable

00:13:37.440 --> 00:13:39.430
upload is standard protocol.

00:13:39.430 --> 00:13:42.740
So whatever the framework,
whatever the language, they

00:13:42.740 --> 00:13:44.660
all have to implement
the same protocol.

00:13:44.660 --> 00:13:48.690
This user is reporting
getting a 411

00:13:48.690 --> 00:13:51.280
Exception, length required.

00:13:51.280 --> 00:13:54.560
We already talked a bit about
resumable upload and all the

00:13:54.560 --> 00:13:56.730
upload mechanisms in
other sessions.

00:13:56.730 --> 00:14:02.160
But it's a complex protocol,
even if the libraries hide all

00:14:02.160 --> 00:14:03.200
the details.

00:14:03.200 --> 00:14:05.830
And in case you need to
implement it yourself, you

00:14:05.830 --> 00:14:08.280
have to take care of
all the errors.

00:14:08.280 --> 00:14:09.670
And what is this about?

00:14:09.670 --> 00:14:13.360
ALI: So I can just about see
the stack trace from here.

00:14:13.360 --> 00:14:14.720
I can tell that it's
Java because it's

00:14:14.720 --> 00:14:15.540
about 60 lines long.

00:14:15.540 --> 00:14:17.412
CLAUDIO: It is.

00:14:17.412 --> 00:14:19.640
ALI: And I can see that
it's using GData

00:14:19.640 --> 00:14:21.790
library for doing that.

00:14:21.790 --> 00:14:24.490
So unfortunately, this
is probably a bug

00:14:24.490 --> 00:14:25.360
in the library somewhere.

00:14:25.360 --> 00:14:28.880
Because if the library is having
problems, then that

00:14:28.880 --> 00:14:29.940
should be fixed.

00:14:29.940 --> 00:14:34.310
But to see what the library is
doing wrong, I'm imagining

00:14:34.310 --> 00:14:36.080
when it's sending--

00:14:36.080 --> 00:14:37.740
well, this could be
one of two cases.

00:14:37.740 --> 00:14:39.570
The first one is when
it initializes

00:14:39.570 --> 00:14:41.240
the resumable upload.

00:14:41.240 --> 00:14:43.910
When it initializes it,
you have to actually--

00:14:43.910 --> 00:14:46.810
if you do send some metadata
along with that first request,

00:14:46.810 --> 00:14:49.080
you have to specify
how long that is.

00:14:49.080 --> 00:14:50.840
If you don't specify how
long that is, then

00:14:50.840 --> 00:14:52.090
you'll get the 411.

00:14:52.090 --> 00:14:53.860
Because you're trying
to do a post without

00:14:53.860 --> 00:14:55.020
sending content length.

00:14:55.020 --> 00:14:57.230
And that won't work.

00:14:57.230 --> 00:14:59.580
The other time it could be
doing this is in the

00:14:59.580 --> 00:15:01.200
continuation requests.

00:15:01.200 --> 00:15:03.940
Each chunk you send, or if
you're sending the whole chunk

00:15:03.940 --> 00:15:06.080
at the same time and depending
on how you're doing your

00:15:06.080 --> 00:15:09.130
resumable upload, you have to
also specify the content

00:15:09.130 --> 00:15:10.250
length then.

00:15:10.250 --> 00:15:12.780
I think it's less likely to be
that because the continuation

00:15:12.780 --> 00:15:14.130
request should be puts.

00:15:14.130 --> 00:15:15.040
And this is a post.

00:15:15.040 --> 00:15:16.040
Is that right?

00:15:16.040 --> 00:15:17.380
CLAUDIO: Yeah, this is a post.

00:15:17.380 --> 00:15:20.140
ALI: So it's pretty much
unlikely to be that.

00:15:20.140 --> 00:15:22.560
And actually, I've seen the
code that does resumable

00:15:22.560 --> 00:15:25.060
upload in this library.

00:15:25.060 --> 00:15:27.820
And I don't think it covers the
case where you can send

00:15:27.820 --> 00:15:34.220
metadata and the actual
initializer at the same time.

00:15:34.220 --> 00:15:36.970
CLAUDIO: I would say that
there's a solution to this.

00:15:36.970 --> 00:15:38.610
ALI: There's a fantastic
solution for this.

00:15:38.610 --> 00:15:40.070
We should probably say
at the same time.

00:15:40.070 --> 00:15:40.520
1, 2, 3

00:15:40.520 --> 00:15:42.180
BOTH: Use the Drive API

00:15:42.180 --> 00:15:43.790
ALI: Yeah, use the Drive API.

00:15:43.790 --> 00:15:46.200
Because this is using the
old Documents List API.

00:15:46.200 --> 00:15:48.360
And we're probably going to say
this on every single time

00:15:48.360 --> 00:15:49.240
we do question time.

00:15:49.240 --> 00:15:54.940
But really, using the Drive API,
the resumable upload part

00:15:54.940 --> 00:15:58.150
of that library is considerably
better, I'd say.

00:15:58.150 --> 00:15:59.230
Are we allowed to say that?

00:15:59.230 --> 00:15:59.360
Yeah.

00:15:59.360 --> 00:16:00.620
So it's considerably better.

00:16:00.620 --> 00:16:03.020
One thing it does is it covers
this case of where you try and

00:16:03.020 --> 00:16:05.570
send metadata at
the same time.

00:16:05.570 --> 00:16:07.210
So we use that a lot more.

00:16:07.210 --> 00:16:12.070
And if you're just uploading a
file, then you could use about

00:16:12.070 --> 00:16:12.960
a third of the code.

00:16:12.960 --> 00:16:13.950
CLAUDIO: Yeah.

00:16:13.950 --> 00:16:15.460
So we have these
new libraries.

00:16:15.460 --> 00:16:17.860
And we have a Java library
that can be--

00:16:17.860 --> 00:16:20.480
I guess, it can be
used in WebLogic.

00:16:20.480 --> 00:16:25.470
And this new library takes care
of everything you need to

00:16:25.470 --> 00:16:27.170
do, when doing resumable
upload.

00:16:27.170 --> 00:16:29.780
So you just have a method, an
easy method to call-- it's

00:16:29.780 --> 00:16:32.000
probably like upload.

00:16:32.000 --> 00:16:32.690
And that's it.

00:16:32.690 --> 00:16:35.400
You didn't even have
to know that you're

00:16:35.400 --> 00:16:36.195
doing resumable upload.

00:16:36.195 --> 00:16:36.920
ALI: That's right.

00:16:36.920 --> 00:16:38.720
And we have a full
sample in Java.

00:16:38.720 --> 00:16:43.730
So the best recommendation for
this developer would be--

00:16:43.730 --> 00:16:46.900
unless you're trying to
integrate this into a lot of

00:16:46.900 --> 00:16:50.050
different applications, then
that's the way to do.

00:16:50.050 --> 00:16:53.390
If you've already got the GData
application, and it's

00:16:53.390 --> 00:16:56.200
heavy, then I guess,
unfortunately, we're going to

00:16:56.200 --> 00:16:59.180
have to look to fix that
bug for that person.

00:16:59.180 --> 00:17:01.460
Or the library is Open
Source of course.

00:17:01.460 --> 00:17:02.520
So that can be fixed.

00:17:02.520 --> 00:17:03.470
CLAUDIO: Yeah, all
the libraries.

00:17:03.470 --> 00:17:06.550
The old ones, the GData one,
like this, and the new ones

00:17:06.550 --> 00:17:07.400
are all Open Source.

00:17:07.400 --> 00:17:09.480
And the samples are
also Open Source.

00:17:09.480 --> 00:17:11.450
And feel free to report bugs.

00:17:11.450 --> 00:17:14.599
But also, if you want to
contribute to the development

00:17:14.599 --> 00:17:17.130
of these libraries,
and you find bugs.

00:17:17.130 --> 00:17:20.720
Or you have better approaches
of patches to any of those.

00:17:20.720 --> 00:17:22.960
We'd be really glad to get
your contribution.

00:17:22.960 --> 00:17:24.599
ALI: Yeah, exactly.

00:17:24.599 --> 00:17:26.400
And you know, some people just
want don't want to wait until

00:17:26.400 --> 00:17:28.200
the next day, for
it to get fixed.

00:17:28.200 --> 00:17:29.080
They just want to fix it.

00:17:29.080 --> 00:17:30.510
CLAUDIO: You will fix everything
in one day?

00:17:30.510 --> 00:17:31.790
Are you committing to it?

00:17:31.790 --> 00:17:32.614
ALI: No.

00:17:32.614 --> 00:17:34.970
CLAUDIO: Sorry, what
are did you say?

00:17:34.970 --> 00:17:38.740
ALI: So yes, really,
we appreciate that.

00:17:38.740 --> 00:17:40.110
CLAUDIO: OK.

00:17:40.110 --> 00:17:41.100
Do we want to--

00:17:41.100 --> 00:17:42.860
ALI: Yeah, we've got
time for one more.

00:17:42.860 --> 00:17:43.420
Why not?

00:17:43.420 --> 00:17:43.840
CLAUDIO: OK.

00:17:43.840 --> 00:17:45.576
ALI: If we go up, because
I think we answered some

00:17:45.576 --> 00:17:46.285
of them last time.

00:17:46.285 --> 00:17:48.250
CLAUDIO: OK, yeah.

00:17:48.250 --> 00:17:48.660
Going back.

00:17:48.660 --> 00:17:50.286
ALI: Where's Chrome Web Store?

00:17:50.286 --> 00:17:52.110
CLAUDIO: What about Chrome
Web Store registration?

00:17:52.110 --> 00:17:54.530
ALI: So what about Chrome
Web Store registration?

00:17:54.530 --> 00:17:56.670
Well, if you've written
a Drive app--

00:17:56.670 --> 00:17:57.380
well, do you want to go?

00:17:57.380 --> 00:17:59.940
CLAUDIO: So let's
start from this.

00:17:59.940 --> 00:18:05.270
When we launched Drive API v1,
in April this year, the

00:18:05.270 --> 00:18:09.980
applications that wanted to use
the Drive API had to be

00:18:09.980 --> 00:18:11.500
registered on the Chrome
Web Store.

00:18:11.500 --> 00:18:15.120
And users had to install
the application from

00:18:15.120 --> 00:18:16.220
the Chrome Web Store.

00:18:16.220 --> 00:18:21.210
This was a requirement that
we added by design.

00:18:21.210 --> 00:18:22.590
But then, we got
some feedback.

00:18:22.590 --> 00:18:25.310
We put a lot more
thought on it.

00:18:25.310 --> 00:18:29.470
And when we launched the Drive
API v2, at Google I/O, at the

00:18:29.470 --> 00:18:32.680
end of June, we decided to
drop this requirement.

00:18:32.680 --> 00:18:35.610
So applications that want to
use the Drive API now don't

00:18:35.610 --> 00:18:37.730
need to be on the Chrome
Web Store.

00:18:37.730 --> 00:18:40.020
But they may still want to.

00:18:40.020 --> 00:18:40.800
ALI: Right.

00:18:40.800 --> 00:18:41.730
You may still want to.

00:18:41.730 --> 00:18:42.850
And why is that?

00:18:42.850 --> 00:18:45.760
Well, the Chrome Web Store,
currently, although not

00:18:45.760 --> 00:18:47.970
required, is a really useful
marketing tool for your

00:18:47.970 --> 00:18:49.640
application, for two reasons.

00:18:49.640 --> 00:18:52.220
One, we have a collection
of Drive apps.

00:18:52.220 --> 00:18:56.400
So if a user is thinking, hmm, I
want a Drive app, perhaps to

00:18:56.400 --> 00:18:59.040
modify some images, and
yours fulfills that.

00:18:59.040 --> 00:19:01.430
They can just see that in
the list, and that's

00:19:01.430 --> 00:19:03.090
very easy to install.

00:19:03.090 --> 00:19:04.050
So that's the first part.

00:19:04.050 --> 00:19:06.840
The second part, and probably
way more powerful and a bit

00:19:06.840 --> 00:19:09.560
more important is that when you
register with the Chrome

00:19:09.560 --> 00:19:11.340
Web Store, you register
your manifest.

00:19:11.340 --> 00:19:14.600
And with that manifest, you
register which kinds of file

00:19:14.600 --> 00:19:16.190
you can open.

00:19:16.190 --> 00:19:21.780
That's used by Google Drive,
the web-user interface, to

00:19:21.780 --> 00:19:23.820
help users find your
application.

00:19:23.820 --> 00:19:27.800
So if a user has a file that
can't be opened by the Google

00:19:27.800 --> 00:19:30.610
Drive itself or by any
applications they have

00:19:30.610 --> 00:19:34.230
installed, they will be
hinted to install

00:19:34.230 --> 00:19:35.420
applications that can.

00:19:35.420 --> 00:19:37.370
And that could include
your application.

00:19:37.370 --> 00:19:40.290
This is, we think,
really important.

00:19:40.290 --> 00:19:44.080
It allows you to virally
grow your application.

00:19:44.080 --> 00:19:47.660
For example, if a user shares
a file with someone else, a

00:19:47.660 --> 00:19:50.450
file that can only be opened
by your application, the

00:19:50.450 --> 00:19:53.510
person they've shared it with
will then have a chance,

00:19:53.510 --> 00:19:55.820
immediately, with a single
click, to go to your

00:19:55.820 --> 00:19:57.450
application and install it.

00:19:57.450 --> 00:19:59.460
And we think that's really,
really useful.

00:19:59.460 --> 00:20:01.900
And we think that you should
be involved in

00:20:01.900 --> 00:20:02.670
that, if you can.

00:20:02.670 --> 00:20:04.620
And that's the advantage
that using the Chrome

00:20:04.620 --> 00:20:05.880
Web Store gives you.

00:20:05.880 --> 00:20:08.600
So it's pretty much a way
for users to find your

00:20:08.600 --> 00:20:11.450
application, both inside the
Drive user interface and

00:20:11.450 --> 00:20:12.780
inside Chrome Web Store.

00:20:12.780 --> 00:20:14.160
Anything to add to
that, Claudio?

00:20:14.160 --> 00:20:15.250
CLAUDIO: I think that
was perfect.

00:20:15.250 --> 00:20:15.880
ALI: OK.

00:20:15.880 --> 00:20:18.750
So apart from that, you don't
need to currently, but I

00:20:18.750 --> 00:20:20.230
definitely would, if you've got
a user-facing application.

00:20:20.230 --> 00:20:20.900
CLAUDIO: Well, it's
a marketing tool.

00:20:20.900 --> 00:20:22.570
You want your application
to be discovered.

00:20:22.570 --> 00:20:24.120
So you want to be there.

00:20:24.120 --> 00:20:26.180
There's a collection for Drive
applications, and you want

00:20:26.180 --> 00:20:27.320
your application to be there.

00:20:27.320 --> 00:20:28.850
Of course, there are some
requirements for your

00:20:28.850 --> 00:20:29.820
application to be there.

00:20:29.820 --> 00:20:32.600
So we want good applications
to be there.

00:20:32.600 --> 00:20:35.610
So remember, you have to post
some screenshots of your

00:20:35.610 --> 00:20:37.630
application, a good
description of it.

00:20:37.630 --> 00:20:40.180
And remember, you also get
reviews from people.

00:20:40.180 --> 00:20:43.040
So of course, when other users
go there to look for an

00:20:43.040 --> 00:20:46.410
application, the first thing
they will look at is the other

00:20:46.410 --> 00:20:47.900
users' reviews.

00:20:47.900 --> 00:20:52.140
So make sure your app works
great and description is good.

00:20:52.140 --> 00:20:54.780
And whenever you get some
feedback from the users,

00:20:54.780 --> 00:20:56.885
remember to address
those feedbacks.

00:20:56.885 --> 00:20:58.340
ALI: Yeah, good.

00:20:58.340 --> 00:20:59.075
Great advice.

00:20:59.075 --> 00:21:00.200
CLAUDIO: Thank you.

00:21:00.200 --> 00:21:01.460
And I think that we're done.

00:21:01.460 --> 00:21:02.960
ALI: I think, yeah, we
should wrap that up.

00:21:02.960 --> 00:21:04.170
CLAUDIO: We're done for today.

00:21:04.170 --> 00:21:06.050
And we're going to see
you again next week.

00:21:06.050 --> 00:21:06.920
ALI: Yup, thank you.

00:21:06.920 --> 00:21:07.500
CLAUDIO: Thank you, everyone.

00:21:07.500 --> 00:21:08.750
ALI: Thank you all for
your questions.

