WEBVTT
Kind: captions
Language: en

00:00:06.770 --> 00:00:08.210
Welcome, iOS developers.

00:00:08.210 --> 00:00:10.860
For today's Quick Tip, I want to
show you this cool new drawing

00:00:10.860 --> 00:00:13.030
app I just made, Pressure Draw.

00:00:13.030 --> 00:00:15.600
It is a simple drawing
program with one little twist.

00:00:15.600 --> 00:00:17.170
If I touch the
screen lightly, it

00:00:17.170 --> 00:00:19.450
makes a thin line, like this.

00:00:19.450 --> 00:00:20.950
But if I press
harder on the screen,

00:00:20.950 --> 00:00:23.610
it makes a thicker
line, like this.

00:00:23.610 --> 00:00:26.200
But wait a second, iPhones
don't have pressure

00:00:26.200 --> 00:00:27.960
sensitive screens, do they?

00:00:27.960 --> 00:00:29.500
So how did I do this?

00:00:29.500 --> 00:00:31.430
Did Apple give me a
top secret prototype

00:00:31.430 --> 00:00:33.680
iPhone with a pressure
sensitive screen?

00:00:33.680 --> 00:00:34.217
No, no.

00:00:34.217 --> 00:00:35.050
They didn't do that.

00:00:35.050 --> 00:00:37.055
Why would they even-- no.

00:00:37.055 --> 00:00:38.680
The answer is that
I'm taking advantage

00:00:38.680 --> 00:00:42.539
of a new UITouch property
in iOS 8 called majorRadius.

00:00:42.539 --> 00:00:44.830
You can think of majorRadius
as basically a measurement

00:00:44.830 --> 00:00:47.592
of the size of the touch
that the screen receives.

00:00:47.592 --> 00:00:49.550
I'm using it here to
approximate touch pressure

00:00:49.550 --> 00:00:52.330
because, for human fingertips,
they tend to squish

00:00:52.330 --> 00:00:54.510
and the touch circle gets
larger the harder you

00:00:54.510 --> 00:00:55.700
press against things.

00:00:55.700 --> 00:00:57.620
Note that this doesn't
work in the simulator

00:00:57.620 --> 00:00:59.390
or if you have metallic fingers.

00:00:59.390 --> 00:01:00.430
Sorry, Iron Man.

00:01:00.430 --> 00:01:02.995
But for the rest of us,
it does work, kind of.

00:01:02.995 --> 00:01:04.370
The problem that
I'm running into

00:01:04.370 --> 00:01:06.670
is that the granularity
is pretty crude right now.

00:01:06.670 --> 00:01:10.730
The smallest radius I
get is this 25.52429.

00:01:10.730 --> 00:01:12.890
Then it goes from
there to like 38.29.

00:01:12.890 --> 00:01:15.050
And then 51 point something.

00:01:15.050 --> 00:01:17.820
I can get to some higher numbers
if I touch the entire phone

00:01:17.820 --> 00:01:18.400
with my palm.

00:01:18.400 --> 00:01:19.600
But that's kind of it.

00:01:19.600 --> 00:01:21.870
For a single finger,
there's no real variation

00:01:21.870 --> 00:01:23.740
in between these
numbers, which is weird

00:01:23.740 --> 00:01:25.970
because these super precise
floats kind of suggest

00:01:25.970 --> 00:01:27.250
there should be, right?

00:01:27.250 --> 00:01:30.120
So if I turn off my little bit
of LERPing between major radius

00:01:30.120 --> 00:01:32.050
sizes-- yes, LERPing is a thing.

00:01:32.050 --> 00:01:35.460
Google it-- you can see that the
jumps in between my brush size

00:01:35.460 --> 00:01:37.250
are actually pretty abrupt.

00:01:37.250 --> 00:01:39.510
So in practice, I'm not
sure I would use this

00:01:39.510 --> 00:01:40.915
for a real drawing program.

00:01:40.915 --> 00:01:41.790
Sorry, Pressure Draw.

00:01:41.790 --> 00:01:43.830
You will never see
the light of day.

00:01:43.830 --> 00:01:45.460
So where could you use it?

00:01:45.460 --> 00:01:48.090
Well, you could certainly use
it for nonessential UI polish

00:01:48.090 --> 00:01:48.590
tweaks.

00:01:48.590 --> 00:01:50.310
Do you have a particle
effect that goes off

00:01:50.310 --> 00:01:51.601
when the user presses a button?

00:01:51.601 --> 00:01:53.380
Well, you could use
the majorRadius value

00:01:53.380 --> 00:01:55.890
to determine just how many
particles you shoot off.

00:01:55.890 --> 00:01:57.460
Whoo-- that was
a lot of dollars.

00:01:57.460 --> 00:01:59.960
Or you could change the volume
of the sound that accompanies

00:01:59.960 --> 00:02:01.601
the effect, or both.

00:02:01.601 --> 00:02:04.100
I kind of wonder if you could
use this as a poor man's force

00:02:04.100 --> 00:02:04.680
touch.

00:02:04.680 --> 00:02:06.190
This is a UI
pattern that Apple's

00:02:06.190 --> 00:02:07.896
looking to establish
on the Apple watch.

00:02:07.896 --> 00:02:09.729
And maybe this is sort
of a jerry-rigged way

00:02:09.729 --> 00:02:11.610
to apply this to
devices that don't have

00:02:11.610 --> 00:02:13.130
pressure sensitive screens.

00:02:13.130 --> 00:02:15.510
But frankly, I'm not
sure about this one, yet.

00:02:15.510 --> 00:02:17.343
That's why you got a
big question mark here.

00:02:17.343 --> 00:02:19.020
I would say proceed
with caution.

00:02:19.020 --> 00:02:21.060
Honestly, I think the
best use of majorRadius

00:02:21.060 --> 00:02:23.000
might be not to
detect touch pressure,

00:02:23.000 --> 00:02:26.160
but instead to distinguish big,
ungainly fingers from thinner,

00:02:26.160 --> 00:02:27.282
elegant fingers.

00:02:27.282 --> 00:02:27.990
Here's the thing.

00:02:27.990 --> 00:02:29.400
In games in
particular, if you look

00:02:29.400 --> 00:02:31.790
at a lot of the good, really
high quality stuff out there

00:02:31.790 --> 00:02:33.342
today on touchscreen
devices, they

00:02:33.342 --> 00:02:35.050
will cheat to make
sure their players are

00:02:35.050 --> 00:02:36.224
doing the right thing.

00:02:36.224 --> 00:02:37.640
Here's a favorite
example of mine.

00:02:37.640 --> 00:02:39.620
This is the game 10000000,
which you should totally

00:02:39.620 --> 00:02:40.578
buy if you haven't yet.

00:02:40.578 --> 00:02:42.440
It's on the App Store
and the Play Store.

00:02:42.440 --> 00:02:43.671
So check this out.

00:02:43.671 --> 00:02:45.170
Here you can see
I'm moving my piece

00:02:45.170 --> 00:02:47.110
to a point where I'm
really only about 30%

00:02:47.110 --> 00:02:48.580
towards making a valid move.

00:02:48.580 --> 00:02:51.680
But the game kind of nudges
me a little bit forward so

00:02:51.680 --> 00:02:54.080
that my piece settles in a
place that makes a match.

00:02:54.080 --> 00:02:55.770
And it works the other way, too.

00:02:55.770 --> 00:02:59.200
Here I've overshot my move
by about like 70%, right?

00:02:59.200 --> 00:03:01.420
But once again, the game
is cheating a little bit,

00:03:01.420 --> 00:03:04.940
and settling my move back into a
place that makes a valid match.

00:03:04.940 --> 00:03:06.140
Isn't that brilliant?

00:03:06.140 --> 00:03:07.220
I'll answer that for you.

00:03:07.220 --> 00:03:08.760
Yes, yes it is.

00:03:08.760 --> 00:03:11.180
This game is, nearly
invisibly to me,

00:03:11.180 --> 00:03:14.080
doing what it can to make me
feel like I am a good player.

00:03:14.080 --> 00:03:16.360
And it's these kind of design
decisions that can make

00:03:16.360 --> 00:03:19.100
the difference between a game
that feels right and a game

00:03:19.100 --> 00:03:20.250
that doesn't.

00:03:20.250 --> 00:03:22.130
So tying this back
in to majorRadius,

00:03:22.130 --> 00:03:24.380
say you've got a game with
a bunch of elements densely

00:03:24.380 --> 00:03:26.555
packed onto the screen,
maybe a grid based puzzler

00:03:26.555 --> 00:03:28.975
or a hex-based strategy
game, you can help out

00:03:28.975 --> 00:03:30.850
your players by looking
at where they touched

00:03:30.850 --> 00:03:33.004
on the screen, and the
size of their touch,

00:03:33.004 --> 00:03:35.670
and then using a little logic to
guess at what game element they

00:03:35.670 --> 00:03:36.890
really meant to click on.

00:03:36.890 --> 00:03:39.770
So even if I am playing your
game with my big fat thumb,

00:03:39.770 --> 00:03:42.160
I can still touch all
of the right elements.

00:03:42.160 --> 00:03:44.035
Anyway, those are just
a couple random ideas.

00:03:44.035 --> 00:03:45.780
I've asked around here.

00:03:45.780 --> 00:03:48.779
And so far, we're only using
majorRadius in one place.

00:03:48.779 --> 00:03:50.320
It's basically a
testing only feature

00:03:50.320 --> 00:03:52.590
where we put up a little
indicator that shows where

00:03:52.590 --> 00:03:54.000
our testers touched on screen.

00:03:54.000 --> 00:03:56.510
And we're using majorRadius to
decide how large of a circle

00:03:56.510 --> 00:03:57.281
to draw.

00:03:57.281 --> 00:03:59.780
But if you end up using it in
your code, please let me know.

00:03:59.780 --> 00:04:01.280
I am dying to find
out what you did.

00:04:01.280 --> 00:04:03.350
You can put it in
the comments below.

00:04:03.350 --> 00:04:05.000
majorRadius appears
to be supported

00:04:05.000 --> 00:04:08.700
on any device that runs iOS
8 back to the iPhone 4S.

00:04:08.700 --> 00:04:09.590
So there you go.

00:04:09.590 --> 00:04:11.730
Thanks, again, to Dave
Oster on the Google News

00:04:11.730 --> 00:04:12.660
team for the tip.

00:04:12.660 --> 00:04:13.500
But what about you?

00:04:13.500 --> 00:04:15.640
Do have a tip that would
make for a good Quick Tip?

00:04:15.640 --> 00:04:16.209
Send it in.

00:04:16.209 --> 00:04:18.209
You can email me at
the address here.

00:04:18.209 --> 00:04:21.300
If we use it on the air, I will
send you a t-shirt, or maybe

00:04:21.300 --> 00:04:23.310
a top secret iPhone
prototype with a pressure

00:04:23.310 --> 00:04:26.894
sensitive screen, but
most likely the teacher.

00:04:26.894 --> 00:04:28.310
Anyway, thanks
again for watching.

00:04:28.310 --> 00:04:30.830
As always, click here to see
more videos from Route 85,

00:04:30.830 --> 00:04:32.590
our show for iOS developers.

00:04:32.590 --> 00:04:33.730
I will see you soon.

00:04:33.730 --> 00:04:37.080
[MUSIC PLAYING]

