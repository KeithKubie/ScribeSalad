WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:03.968
In some systems we have what is called,
Role-Based Access Control.

00:00:03.968 --> 00:00:09.390
Role, sort of, is what you do,
your function perhaps that may

00:00:09.390 --> 00:00:14.177
learn what kind of files you can
access if your human resources or

00:00:14.177 --> 00:00:17.660
payroll, or
you are in the different department.

00:00:17.660 --> 00:00:21.010
The set of files you can
access would depend on what

00:00:21.010 --> 00:00:22.980
your role in the organization is.

00:00:22.980 --> 00:00:27.585
So there is role-based access control or
RBAC that is implemented,

00:00:27.585 --> 00:00:28.920
it's a little difference so

00:00:28.920 --> 00:00:32.950
I thought we'll just spend just
a couple of minutes talking about it.

00:00:32.950 --> 00:00:37.590
In role-back Access Control,
remember, rights are for

00:00:37.590 --> 00:00:41.030
being able to access different
resources, so those are access rights.

00:00:41.030 --> 00:00:44.970
Those are associated with the role,
they're not associated with the user.

00:00:44.970 --> 00:00:47.540
So the way to think about the way
you going to define your policy,

00:00:47.540 --> 00:00:52.160
access control policy is you're going to
say, what roles do I have in my system?

00:00:52.160 --> 00:00:53.140
And for each role,

00:00:53.140 --> 00:00:56.430
what kind of resources do
they need to have access to?

00:00:56.430 --> 00:01:00.010
So I would say people in this
role can read these files or

00:01:00.010 --> 00:01:01.410
write these files and things like that.

00:01:01.410 --> 00:01:05.770
So this part of the policy basically
says, access rights are defined for

00:01:05.770 --> 00:01:06.400
roles.

00:01:06.400 --> 00:01:09.440
And users who going to
log into the system or

00:01:09.440 --> 00:01:13.410
authenticate themselves to the system
can then take on some roles.

00:01:13.410 --> 00:01:16.960
So RBAC, the way to think about
this is that we don't have

00:01:16.960 --> 00:01:19.120
direct access rights for users.

00:01:19.120 --> 00:01:22.330
Users must be activated into one or
more roles.

00:01:22.330 --> 00:01:24.700
And once they assume one or more roles,

00:01:24.700 --> 00:01:29.700
based on what those roles give them
access to, that's what the user, or

00:01:29.700 --> 00:01:33.570
the process running on this
behalf of this user, can access.

00:01:33.570 --> 00:01:35.630
So we're talking about
enterprise setting.

00:01:35.630 --> 00:01:39.610
Access may be based on job function or
role of a given user.

00:01:39.610 --> 00:01:41.830
That's where this might make sense.

00:01:41.830 --> 00:01:44.790
Project manager may have
access to all the files.

00:01:44.790 --> 00:01:47.460
The developers or people doing QA or

00:01:47.460 --> 00:01:50.850
something like that may access
files in different ways and so on.

00:01:50.850 --> 00:01:55.480
Payroll manager and HR function may be
able to look at files that have people's

00:01:55.480 --> 00:01:59.180
salaries and so on because they are
payroll managers and things like that.

00:01:59.180 --> 00:02:02.340
So this is how roles will be defined.

00:02:02.340 --> 00:02:06.280
Access rights associated with roles,
as we said before, and

00:02:06.280 --> 00:02:10.979
users when authentication happen and
then we know the user is was

00:02:10.979 --> 00:02:16.010
logging into the system, we have to then
so to start with authentication, but

00:02:16.010 --> 00:02:19.970
then be able to activate one or
more roles for them.

00:02:19.970 --> 00:02:24.550
So role activation is something else
that has to be added to this process.

00:02:24.550 --> 00:02:30.290
The policy defined here and there
are two stages, activating a role for

00:02:30.290 --> 00:02:33.890
a user and based on that deciding
what the user can access.

00:02:33.890 --> 00:02:38.560
Now there's some benefits that come
when we have role-based access controls.

00:02:38.560 --> 00:02:40.820
What could be some of these benefits?

00:02:40.820 --> 00:02:43.490
So first of all we
said our policy defines

00:02:43.490 --> 00:02:47.490
what roles have kind of access for
resources in the system.

00:02:47.490 --> 00:02:50.300
So the policy doesn't
need to change when,

00:02:50.300 --> 00:02:53.070
let's say a certain person
leaves the organization.

00:02:53.070 --> 00:02:55.560
Policy is associated with roles.

00:02:55.560 --> 00:02:59.120
It's not associated with users so
users coming or

00:02:59.120 --> 00:03:03.800
going they don't require changes to
the policy the organization has.

00:03:03.800 --> 00:03:05.700
When a new employee comes,

00:03:05.700 --> 00:03:09.580
basically we think about what
role is appropriate for them.

00:03:09.580 --> 00:03:13.030
And as soon as we decide their role,
based on their function and

00:03:13.030 --> 00:03:16.550
what resources they should have
access to automatically happens,

00:03:16.550 --> 00:03:21.810
because that role, along with it has had
an access right to various resources.

00:03:21.810 --> 00:03:25.550
And that, as I said,
happens automatically

00:03:25.550 --> 00:03:28.536
as soon as we decided what role
this new employee can take.

00:03:28.536 --> 00:03:30.960
An interesting thing,
least privilege, remember,

00:03:30.960 --> 00:03:35.240
is one of the design principles
that we had, which said you should

00:03:35.240 --> 00:03:38.540
always execute with the smallest
number of privileges or

00:03:38.540 --> 00:03:42.600
access rights that you need to do
what is being done at that time.

00:03:42.600 --> 00:03:45.010
And it's a really damage
containment thing.

00:03:45.010 --> 00:03:48.480
If something goes wrong,
you don't negatively impact

00:03:48.480 --> 00:03:52.260
resources that you have no business
having access to at that point.

00:03:52.260 --> 00:03:54.580
So how does RBAC help you with that?

00:03:54.580 --> 00:03:57.760
Well actually it does,
because user can start in one role and

00:03:57.760 --> 00:04:02.280
access a subset of the files that
are only available to that role.

00:04:02.280 --> 00:04:06.100
The user can then switch roles and
then go access a different set of roles,

00:04:06.100 --> 00:04:09.470
a different set of files
associated with a new role.

00:04:09.470 --> 00:04:14.260
If you don't have RBAC and a user has a
UID and has access to everything, he or

00:04:14.260 --> 00:04:15.670
she can never access.

00:04:15.670 --> 00:04:18.120
Roles sort of give you
this ability to control,

00:04:18.120 --> 00:04:22.390
saying if you're in a certain role at a
given time only the resources needed for

00:04:22.390 --> 00:04:26.800
that role should be available at that
point, and we can do that with RBAC.

00:04:26.800 --> 00:04:31.260
Being able to implement least
privilege is a good thing.

00:04:31.260 --> 00:04:33.800
That the design principle for

00:04:33.800 --> 00:04:38.700
systems we want to trust, so
RBAC actually enables that.

00:04:38.700 --> 00:04:42.080
So there are actually
systems that implement RBAC.

00:04:42.080 --> 00:04:46.000
SELinux, we're going to come back to it,
is Security-Enhanced Linux

00:04:46.000 --> 00:04:48.900
actually supports RBAC, and
there are others as well.

