WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:00.940
Hi.

00:00:00.940 --> 00:00:04.770
I'm Eiji, and I'm a
developer advocate at Google.

00:00:04.770 --> 00:00:07.840
Today, I'm going to give you
an overview of Web Components.

00:00:10.570 --> 00:00:13.810
Web Components are a set
of emerging standards that

00:00:13.810 --> 00:00:17.400
changes the way you
develop web apps entirely.

00:00:17.400 --> 00:00:20.780
They will enable you to
build and reuse UI components

00:00:20.780 --> 00:00:23.320
when building web applications.

00:00:23.320 --> 00:00:26.830
Let's take a look at how you
might build a UI element today

00:00:26.830 --> 00:00:28.920
and how that process
can be improved

00:00:28.920 --> 00:00:29.950
by using Web Components.

00:00:32.710 --> 00:00:34.690
Here is a nice looking chart.

00:00:34.690 --> 00:00:39.740
How would you build this using
HTML, CSS, and JavaScript?

00:00:39.740 --> 00:00:44.170
It must be a bit of work if
you create this from scratch.

00:00:44.170 --> 00:00:46.440
To help us build
our chart, we can

00:00:46.440 --> 00:00:50.480
use the Google
Visualization API.

00:00:50.480 --> 00:00:53.060
First, load the Google
JavaScript Library

00:00:53.060 --> 00:00:55.430
to use the API.

00:00:55.430 --> 00:01:00.000
Then, add the div tag onto
the body as a placeholder.

00:01:00.000 --> 00:01:02.860
Now, using JavaScript
initialize the library

00:01:02.860 --> 00:01:05.800
by loading Visualization API.

00:01:05.800 --> 00:01:09.470
Then, set the values and
the options at callback.

00:01:09.470 --> 00:01:14.820
Finally, specify the DOM element
to upend the chart graphic.

00:01:14.820 --> 00:01:15.380
OK.

00:01:15.380 --> 00:01:17.600
Now, let's dive into
the Web Components

00:01:17.600 --> 00:01:19.870
approach and see
how that drastically

00:01:19.870 --> 00:01:21.880
changes the way
you build a chart.

00:01:24.510 --> 00:01:27.070
With Web Components, the
first thing you should do

00:01:27.070 --> 00:01:30.890
is to import Google
Chart Component.

00:01:30.890 --> 00:01:33.390
To enable unsupported
browsers to work,

00:01:33.390 --> 00:01:35.690
you will also need to
load an open source

00:01:35.690 --> 00:01:37.040
polyfill called platform.js.

00:01:41.670 --> 00:01:45.640
Then add the Google Chart tag
and fill in the attributes

00:01:45.640 --> 00:01:47.290
as you wish.

00:01:47.290 --> 00:01:49.650
And done.

00:01:49.650 --> 00:01:53.221
Did you notice the difference
between those two approaches?

00:01:53.221 --> 00:01:53.720
Yes.

00:01:53.720 --> 00:01:56.965
The first one was
imperative using JavaScript.

00:01:56.965 --> 00:02:01.480
The second one was
declarative using HTML tag.

00:02:01.480 --> 00:02:05.510
The declarative approach
might look easier to handle,

00:02:05.510 --> 00:02:09.669
but the biggest difference
here is not easy or difficult.

00:02:09.669 --> 00:02:13.000
It is an underlying knowledge
required for the developer

00:02:13.000 --> 00:02:13.835
to use those APIs.

00:02:17.580 --> 00:02:20.730
In the original example, the
first thing you have to do

00:02:20.730 --> 00:02:24.780
is to understand how Google
JavaScript Library works.

00:02:24.780 --> 00:02:30.750
Then, you can learn how to
use the APIs to control it.

00:02:30.750 --> 00:02:33.500
On the other hand, the
Web Components approach

00:02:33.500 --> 00:02:36.555
uses DOM APIs, which most
of the web developers

00:02:36.555 --> 00:02:38.810
are already familiar with.

00:02:38.810 --> 00:02:40.500
So you can just
start by learning

00:02:40.500 --> 00:02:42.850
how to use attributes and APIs.

00:02:45.500 --> 00:02:49.070
The difference seems subtle,
but you'll notice the benefit

00:02:49.070 --> 00:02:52.180
when you work with
other UI libraries.

00:02:52.180 --> 00:02:55.620
For example, jQuery UI,
Bootstrap, Closure Libraries,

00:02:55.620 --> 00:02:59.450
et cetera, all
use different approaches,

00:02:59.450 --> 00:03:01.980
so you will have to learn
them before you actually

00:03:01.980 --> 00:03:02.950
start using them.

00:03:05.770 --> 00:03:09.820
There are other benefits of
using Web Components, as well.

00:03:09.820 --> 00:03:13.430
Let's take a look
at them one by one.

00:03:13.430 --> 00:03:14.060
Scoped.

00:03:14.060 --> 00:03:18.020
Since Web Components have
scoped styles and markup,

00:03:18.020 --> 00:03:20.670
imported components
won't harm any other part

00:03:20.670 --> 00:03:22.725
of your web page.

00:03:22.725 --> 00:03:25.250
In the existing
libraries, there are

00:03:25.250 --> 00:03:29.470
cases where you have same class
names or IDs that potentially

00:03:29.470 --> 00:03:34.260
overlap with the
ones in the library.

00:03:34.260 --> 00:03:37.510
With Web Components,
all markups and CSS

00:03:37.510 --> 00:03:39.840
are scoped to the element.

00:03:39.840 --> 00:03:42.790
This mean the CSS bundled
with the component

00:03:42.790 --> 00:03:46.610
will not leak out to
affect the parent document.

00:03:46.610 --> 00:03:49.150
And it also prevents
the parent document

00:03:49.150 --> 00:03:51.045
from accidentally
styling the component.

00:03:55.220 --> 00:03:56.690
Reusable.

00:03:56.690 --> 00:03:59.450
Because Web Components
are scoped and decoupled

00:03:59.450 --> 00:04:02.250
with other parts
of your web page,

00:04:02.250 --> 00:04:05.380
you can use the same component
in the other part of your web

00:04:05.380 --> 00:04:09.630
page or even on
the other website.

00:04:09.630 --> 00:04:12.220
Furthermore, you can
share the element

00:04:12.220 --> 00:04:14.850
with the community
as open source

00:04:14.850 --> 00:04:17.610
so that anyone can take
advantage of your work.

00:04:20.600 --> 00:04:21.700
Isolation.

00:04:21.700 --> 00:04:23.600
Because Web
Components are scoped,

00:04:23.600 --> 00:04:26.420
you can decouple
development of UI components

00:04:26.420 --> 00:04:27.420
from main functionality.

00:04:30.100 --> 00:04:32.790
Developers are able
to independently work

00:04:32.790 --> 00:04:36.160
on UI components without
needing to worry or be

00:04:36.160 --> 00:04:39.770
aware of the implementation
details of other parts

00:04:39.770 --> 00:04:41.850
on the page.

00:04:41.850 --> 00:04:43.950
Note that maintaining
those components

00:04:43.950 --> 00:04:49.010
is much easier because
of isolation as well.

00:04:49.010 --> 00:04:49.510
OK.

00:04:49.510 --> 00:04:52.070
Web Components sounds
like a great solution

00:04:52.070 --> 00:04:54.860
for serving or
using UI components.

00:04:54.860 --> 00:04:59.350
So how can we actually
build our own component?

00:04:59.350 --> 00:05:03.690
Web Components consists of four
core technologies-- templates,

00:05:03.690 --> 00:05:07.190
Shadow DOM, Custom
Elements, and HTML Imports.

00:05:07.190 --> 00:05:09.545
Let me briefly describe
what they are like.

00:05:12.770 --> 00:05:15.560
Templates allow you to
define inert boilerplates

00:05:15.560 --> 00:05:20.090
for repeatedly used
markup inside your HTML.

00:05:20.090 --> 00:05:22.950
Because the content of
the template is inert,

00:05:22.950 --> 00:05:25.920
it will not request
images or run scripts

00:05:25.920 --> 00:05:28.080
until it is sent
out onto the page.

00:05:30.590 --> 00:05:34.040
Shadow DOM allows you to
associate scoped HTML markup

00:05:34.040 --> 00:05:37.410
and CSS with an
existing DOM element.

00:05:37.410 --> 00:05:39.740
Since Shadow DOM
is encapsulated,

00:05:39.740 --> 00:05:44.140
the style won't affect
anything outside of it.

00:05:44.140 --> 00:05:46.625
Custom elements allows
you to define and register

00:05:46.625 --> 00:05:50.220
a custom HTML element as if
it were a native element.

00:05:53.060 --> 00:05:56.460
HTML Imports allow you to
load multiple resources,

00:05:56.460 --> 00:06:00.510
such as JavaScript, CSS,
and additional HTML files

00:06:00.510 --> 00:06:01.770
by loading a single HTML.

00:06:04.600 --> 00:06:08.310
Combining all those technologies
will look something like this.

00:06:08.310 --> 00:06:13.950
First, prepare a HTML file that
is separate from main HTML.

00:06:13.950 --> 00:06:17.320
Define and register
a custom element.

00:06:17.320 --> 00:06:20.770
Associate Shadow DOM onto it.

00:06:20.770 --> 00:06:24.351
Use templates to provide
contents of the Shadow DOM.

00:06:27.300 --> 00:06:31.790
Finally, import the component
HTML file using HTML Import.

00:06:34.930 --> 00:06:38.830
Now you have the basic
idea of Web Components.

00:06:38.830 --> 00:06:42.160
I'm going to post a series of
videos about Web Components

00:06:42.160 --> 00:06:45.490
features so you can
learn how to use them.

00:06:45.490 --> 00:06:48.900
In the meantime, documents
and resources listed here

00:06:48.900 --> 00:06:51.590
will help you learn more
about Web Components,

00:06:51.590 --> 00:06:54.970
so please check them out.

00:06:54.970 --> 00:06:55.690
All right.

00:06:55.690 --> 00:06:57.290
Thank you for watching.

00:06:57.290 --> 00:06:59.750
See you in the next episode.

