WEBVTT
Kind: captions
Language: en

00:00:00.090 --> 00:00:03.660
We can improve the overall
hit latency of the cache

00:00:03.660 --> 00:00:06.160
using a virtually accessed cache.

00:00:06.160 --> 00:00:07.340
In that case,

00:00:07.340 --> 00:00:13.170
the virtual address is what we use to
access the cache and get the data.

00:00:13.170 --> 00:00:17.210
On a cache miss,
we would use the virtual address, to

00:00:17.210 --> 00:00:21.990
tell us what the physical address is, so
that we can bring data into our cache.

00:00:21.990 --> 00:00:27.365
But on cache hits, we can get the data
without doing the TLB access at all.

00:00:27.365 --> 00:00:32.165
So the advantages of this virtually
accessed cache over the physically

00:00:32.165 --> 00:00:36.415
accessed one are that
the overall hit time is just

00:00:36.415 --> 00:00:40.536
the cache hit time with no
TLB latency added to it.

00:00:40.536 --> 00:00:41.535
That's nice and

00:00:41.535 --> 00:00:45.155
we don't need the TLB access on
cache hits, so we can save energy.

00:00:45.155 --> 00:00:47.100
We like that too.

00:00:47.100 --> 00:00:49.790
So we can see that
the virtually access cache

00:00:49.790 --> 00:00:52.270
has the hit time that
adjust the cache hit time.

00:00:52.270 --> 00:00:57.230
Because we use the virtual address to
access the cache and because of that

00:00:57.230 --> 00:01:00.650
we get the data even without
address translation on a cache hit.

00:01:00.650 --> 00:01:05.290
So we can only access the TLB on a miss,
which saves us TLB misses and

00:01:05.290 --> 00:01:07.740
saves energy which is also nice.

00:01:07.740 --> 00:01:10.870
So it looks like the virtual access
cache would win every time, so

00:01:10.870 --> 00:01:14.570
why are we even considering
physically accessed caches?

00:01:14.570 --> 00:01:19.240
Well, first of all, the TLB, in addition
to containing the translation for

00:01:19.240 --> 00:01:23.750
the physical address,
also contains permissions that we need

00:01:23.750 --> 00:01:28.220
to tell us whether we are allowed to
read or write or execute certain pages.

00:01:28.220 --> 00:01:32.590
So even though we don't need
a physical address from the TLB in

00:01:32.590 --> 00:01:37.120
order to get their data, we still need
to access the TLB even on cache hits

00:01:37.120 --> 00:01:41.230
just to get the permissions that tell us
whether we are allowed to read, write,

00:01:41.230 --> 00:01:43.500
or execute that location.

00:01:43.500 --> 00:01:48.050
So this advantage really doesn't
exist in real processors.

00:01:48.050 --> 00:01:51.990
A bigger problem is that
the virtual address

00:01:51.990 --> 00:01:54.806
is specific to a particular process.

00:01:54.806 --> 00:01:58.960
So if we were running one process and
filled the cache with it's data,

00:01:58.960 --> 00:02:03.580
once we begin running another process
that other process will have virtual

00:02:03.580 --> 00:02:07.760
addresses that might overlap with
the addresses from the previous process.

00:02:07.760 --> 00:02:09.699
But they should be going
to different data.

00:02:10.830 --> 00:02:15.320
Pretty much in the TLB there will be
different translations for that other

00:02:15.320 --> 00:02:19.560
process, and we should be accessing
different actual memory locations.

00:02:19.560 --> 00:02:23.850
Because our cache only knows about
virtual addresses in this case,

00:02:23.850 --> 00:02:26.860
we now need to flush our cache meaning

00:02:26.860 --> 00:02:30.570
remove all the data from it every
time we do a context switch.

00:02:30.570 --> 00:02:32.590
Once we are switching
to another process,

00:02:32.590 --> 00:02:36.480
we know that virtual addresses are
going to map to different locations, so

00:02:36.480 --> 00:02:39.695
what we have to do is get rid of
everything we have in the cache.

00:02:39.695 --> 00:02:45.425
This means that we have a burst of cache
misses every time we switch processes.

00:02:45.425 --> 00:02:48.355
Processes are switched once
every millisecond or so, so

00:02:48.355 --> 00:02:50.595
it doesn't sound like a big deal.

00:02:50.595 --> 00:02:52.965
But keep in mind that
the cache can be large, so

00:02:52.965 --> 00:02:57.105
it takes a lot of misses to
bring in the data into it.

00:02:57.105 --> 00:02:58.725
So this is a disadvantage.

