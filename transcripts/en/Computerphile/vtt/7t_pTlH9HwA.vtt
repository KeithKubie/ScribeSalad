WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.400
Today we're going to carry on the
recursion story a little more. Many of

00:00:05.400 --> 00:00:10.250
you, I hope, have seen my initial effort
in this direction which is the Recursion

00:00:10.250 --> 00:00:16.350
video. It's featured stack frames - how
recursion is actually done - and the

00:00:16.350 --> 00:00:21.840
answer delivered back by 'factorial' will
be an integer answer. So, I thought what

00:00:21.840 --> 00:00:26.910
we'd do today is move on to another
example much beloved of Brady [Haran]. 

00:00:26.910 --> 00:00:33.480
It's called the Fibonacci sequence. He was an
Italian gentleman - that's not his real

00:00:33.480 --> 00:00:38.100
name that was the nickname he was given -
I'll try and stick to mathematical notation

00:00:38.100 --> 00:00:43.350
here the n+1 Fibonacci number is defined to be the

00:00:43.350 --> 00:00:50.850
nth Fibonacci number plus the n - 1th
Fibonacci number. Whereas with

00:00:50.850 --> 00:00:56.730
factorial it just followed itself
recursively round one strand a recursion

00:00:56.730 --> 00:01:01.500
here you're adding in a second strand of
recursion.  So this is sometimes called

00:01:01.500 --> 00:01:07.470
Multiply Recursive, whereas 'factorial'
will be called Singly Recursive. But like

00:01:07.470 --> 00:01:13.320
all recursive definitions of functions
you do need an escape route at the

00:01:13.320 --> 00:01:17.759
bottom. If you keep on calling yourself
you could go on to infinity. But as you

00:01:17.759 --> 00:01:23.070
can see here, everything's fine
so long as you write down what the first

00:01:23.070 --> 00:01:27.990
Fibonacci number is and the second one.
The second Fibonacci number and the

00:01:27.990 --> 00:01:34.770
first Fibonacci number are both defined
to be 1, We can now write down the

00:01:34.770 --> 00:01:41.400
Fibonacci sequence because it starts off
with a 1 for the first number, a 1 for

00:01:41.400 --> 00:01:46.020
the second number. So if I want F(3)
then I'm got to make n be 2 there.  2 + 1

00:01:46.020 --> 00:01:54.899
is 3. So Fibonacci of 3 [F(3)]is the same as
Fibonacci of 2 [F(2)] plus Fibonacci of 1 [F(1),] 

00:01:54.899 --> 00:02:01.890
Both [are] 1. So, the answer for F(3) is 2.
Every Fibonacci number is the sum of the

00:02:01.890 --> 00:02:08.250
two that immediately precede it. So the
next one, then, is going to be 2 + 1 [i.e.] 3.

00:02:08.250 --> 00:02:16.819
The one after that 3 + 2
5, 8, 13, 21. You might think: "Well, very

00:02:16.819 --> 00:02:21.019
interesting but what does that apply to?
Why should that be so fascinating?"

00:02:21.019 --> 00:02:25.670
Well, it's fascinating first of all, for
the simple reason that in the Computerphile /

00:02:25.670 --> 00:02:30.079
Numberphile family, some of you will
know that the wonderful 'Godfather' Brady

00:02:30.079 --> 00:02:37.040
has already made and got ahead of the
game, a video about Fibonacci. He actually

00:02:37.040 --> 00:02:42.980
had a Fibonacci Tartan designed and had it made up!
[video insert]
&gt;&gt; Brady: ...  and the rows and the threads

00:02:42.980 --> 00:02:47.209
that have been used to create this
design are based on the Fibonacci sequence.

00:02:47.209 --> 00:02:51.920
&gt;&gt; DFB: Heaven knows how much it cost him to get
it made up! But there it is. 
&gt;&gt; Sean: As computer

00:02:51.920 --> 00:02:55.849
scientists why do we care about Fibonacci?! 
&gt;&gt; DFB: The reason I'm doing this with

00:02:55.849 --> 00:03:02.930
you is the following:
Like 'factorial',  'Fibonacci' is a recursive

00:03:02.930 --> 00:03:09.109
function that can be de-recursed. You
could do it in 'for' loops - things that can

00:03:09.109 --> 00:03:14.120
be de-recursed are called Primitive
Recursive, so Fibonacci is just another

00:03:14.120 --> 00:03:18.680
one. It enables us also to draw pretty
pictures, which we'll do in a minute and

00:03:18.680 --> 00:03:25.129
I rather like doing that. But having done
Fibonacci and factorial - but this will have to

00:03:25.129 --> 00:03:28.579
be in a separate video - you then want to
say: "Well, not everything can have the

00:03:28.579 --> 00:03:32.569
recursion taken out of it. Some things
really are recursive. I've actually

00:03:32.569 --> 00:03:38.419
written a PostScript program that will
print out the Fibonacci numbers for you

00:03:38.419 --> 00:03:44.090
up to the value of 'fib(10)' being 55. We'll
put out a link to this program and those

00:03:44.090 --> 00:03:48.739
of you who've got Ghostview, or Ghostscript 
set up, try running it. You should

00:03:48.739 --> 00:03:52.400
get this coming out all right.
I can only apologize it I've done it in

00:03:52.400 --> 00:03:56.120
Helvetica. The thing you've got to be
prepared for in PostScript is you're at

00:03:56.120 --> 00:04:00.079
the mercy of the fonts you have
available in your interpreter. Don't

00:04:00.079 --> 00:04:04.040
blame me if it comes out in boring
Courier. That tends to be the default

00:04:04.040 --> 00:04:10.459
when it doesn't have access to the font
that's asked for.  
&gt;&gt; Sean: Comic Sans! 

00:04:10.459 --> 00:04:15.799
&gt;&gt; DFB: It's more likeely to be Courier actually!
When you look inside the program for that and

00:04:15.799 --> 00:04:21.139
I will do, very briefly, but absolutely
not in detail ... First of all, here is my

00:04:21.139 --> 00:04:26.629
definition of Fibonacci '/fib'
is going to end 'def'. That's the

00:04:26.629 --> 00:04:31.280
definition of the Fibonacci function. To
head off trouble at the pass I've even

00:04:31.280 --> 00:04:35.930
put error messages in it. What I made it
do, to get those numbers to come out, is

00:04:35.930 --> 00:04:42.710
go round a 'for' loop ten times and every
time it goes around it calls up 'fib' but

00:04:42.710 --> 00:04:49.669
every time it goes into 'fib' it calls
itself recursively. It gets straight back

00:04:49.669 --> 00:04:57.560
inside itself and, there we are, out it
comes. It does work absolutely fine but

00:04:57.560 --> 00:05:02.439
if you're going to start doing recursive
stuff in PostScript then, by definition,

00:05:02.439 --> 00:05:07.490
you've got to have something that
corresponds to stack frames, right? And we

00:05:07.490 --> 00:05:10.969
now have C and Java and things to do it;
they do it automatically. What about in

00:05:10.969 --> 00:05:15.110
PostScript? Well,  PostScript is wonderful it makes

00:05:15.110 --> 00:05:21.009
you make your own stack frames but it
gives you a fabulously - what's the word -

00:05:21.009 --> 00:05:27.590
versatile, way of doing it. Basically in
the second line here this thing '10 dict begin'

00:05:27.590 --> 00:05:33.889
and what that means is: "Get me a
dictionary with ten spaces in it". And if

00:05:33.889 --> 00:05:38.900
you think that that '10 dict' is [also] like
saying: "Give me a stack frame with 10

00:05:38.900 --> 00:05:44.210
spaces in it because I'm going to use it
and put values in it - to manipulate them

00:05:44.210 --> 00:05:48.650
all on my own". You'll remember when you
look back at the stack frame story in

00:05:48.650 --> 00:05:52.400
the Recursion video. It's great C does
it for you.

00:05:52.400 --> 00:05:56.810
But the penalty, if you like, is you've
got to accept the way it handles the

00:05:56.810 --> 00:06:01.129
stack frame. unless you want to get into
some most appalling hacking you'd better

00:06:01.129 --> 00:06:06.199
not mess with your stack frames. You
could end up in an awful mess. Whereas 

00:06:06.199 --> 00:06:10.759
PostScript is basically doing its usual thing.
Y'know:  "You're a serious program with

00:06:10.759 --> 00:06:14.539
tons of experience. If you get messed up
you'll soon sort yourself out I'll let

00:06:14.539 --> 00:06:20.060
you manipulate the stack frame every
time we go around recursively into 'fib' "

00:06:20.060 --> 00:06:25.610
It basically hits '10 dict begin' which
says: "Make me another stack frame". I mean

00:06:25.610 --> 00:06:30.319
another recursive instance of Fibonacci.W
what other things can we do with

00:06:30.319 --> 00:06:34.130
Fibonacci that make it interesting for
mathematicians as well as computer

00:06:34.130 --> 00:06:38.120
scientists? Well, one of the things that I
set many years ago,

00:06:38.120 --> 00:06:46.639
in a Digital Documents course, was the
following. If you put Fibonacci-sized

00:06:46.639 --> 00:06:52.610
boxes together and group them properly
and then you join them up you can draw

00:06:52.610 --> 00:06:59.720
some most amazing shapes. This is the
Fibonacci spiral and if you look here

00:06:59.720 --> 00:07:04.820
you can see what I'm doing. Once I've got
the basic Fibonacci recursive function

00:07:04.820 --> 00:07:09.110
working I've built on top of it extra
routines. And this is the beauty of

00:07:09.110 --> 00:07:12.110
PostScript. You not only get the stack,
you get the recursion, you get the

00:07:12.110 --> 00:07:15.949
stack frames ... but you can draw two
dimensional pictures as well!  So, what I

00:07:15.949 --> 00:07:21.110
got it to do was to go round and every
time it visited 'fib' and got an answer

00:07:21.110 --> 00:07:28.190
like 1 [interpret this as]: "draw a box of unit size". 
And then the next box along, just to its left, is

00:07:28.190 --> 00:07:32.870
also of side 1. And of course the
secret is knowing where to attach the

00:07:32.870 --> 00:07:38.630
next box. I have attached the square of
side 2  direct to the south,as it were,

00:07:38.630 --> 00:07:45.080
of the two boxes of side 1 and then
the 3 box gets attached to the east

00:07:45.080 --> 00:07:50.720
side. And then it goes up north and then
it goes west. And as you go around you

00:07:50.720 --> 00:07:57.080
get 1, 1, 2, 3 When you've
stacked your boxes correctly you go into

00:07:57.080 --> 00:08:02.870
them and you draw an arc across each of
the boxes and I've chosen to do it, at

00:08:02.870 --> 00:08:07.789
this time, in an anti-clockwise direction
And you end up with this beautiful

00:08:07.789 --> 00:08:13.669
looking spiral - known as the Fibonacci
spiral. It's an approximation to a

00:08:13.669 --> 00:08:22.210
well-known mathematical object called
the logarithmic spiral

