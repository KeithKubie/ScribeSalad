WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.530
We've lifted the lid on
the Android Studio Box

00:00:02.530 --> 00:00:05.770
and pulled out Instant Run, a
fast and shiny new emulator,

00:00:05.770 --> 00:00:08.500
a new GPU profiler and
all the new features

00:00:08.500 --> 00:00:10.720
and improvements of IntelliJ 15.

00:00:10.720 --> 00:00:11.600
I'm Reto Meier.

00:00:11.600 --> 00:00:15.200
It's Android Tool Time time,
and this is Android Studio 2.0.

00:00:15.200 --> 00:00:18.940
[MUSIC PLAYING]

00:00:18.940 --> 00:00:20.930
Instant Run is a
new feature that,

00:00:20.930 --> 00:00:23.670
once enabled, lets you build
and deploy incremental changes

00:00:23.670 --> 00:00:25.270
to your app within
a few seconds,

00:00:25.270 --> 00:00:28.490
dramatically improving the speed
of your test and debug cycles.

00:00:28.490 --> 00:00:30.970
Once you have your app up and
running, hitting Instant Run

00:00:30.970 --> 00:00:33.650
after making code changes such
as changing this chessboard

00:00:33.650 --> 00:00:37.270
from 2D to 3D and modifying the
size and color of the pieces,

00:00:37.270 --> 00:00:40.590
will perform a hot swap,
sending only the changed code

00:00:40.590 --> 00:00:41.230
to your app.

00:00:41.230 --> 00:00:43.180
The affected methods
are overridden,

00:00:43.180 --> 00:00:45.610
and your code changes
are applied in real time

00:00:45.610 --> 00:00:47.520
within the running app instance.

00:00:47.520 --> 00:00:50.950
Hot swapping works by injecting
code where you make changes.

00:00:50.950 --> 00:00:53.180
Your app isn't restarted,
so memory allocations

00:00:53.180 --> 00:00:56.620
remain unchanged, meaning class
initializes won't be re-run

00:00:56.620 --> 00:00:58.920
and static variables
aren't initialized.

00:00:58.920 --> 00:01:00.680
Existing instances
and constructs

00:01:00.680 --> 00:01:03.870
like Fields and Singletons
are left untouched.

00:01:03.870 --> 00:01:06.770
Changing resources, such
as editing colors, strings,

00:01:06.770 --> 00:01:09.090
or even layouts will send
the modified resources

00:01:09.090 --> 00:01:10.105
file to the running app.

00:01:10.105 --> 00:01:12.230
And you will be able to
see it when the activity is

00:01:12.230 --> 00:01:14.880
restarted-- called
a warm swap, which

00:01:14.880 --> 00:01:18.620
will do for you automatically if
we detect that it's necessary.

00:01:18.620 --> 00:01:21.500
Some changes such as modifying
your manifest or changing

00:01:21.500 --> 00:01:24.700
layout IDs currently
trigger a full build.

00:01:24.700 --> 00:01:27.240
Exactly which changes
will cause a full rebuild

00:01:27.240 --> 00:01:30.800
versus a cold or warm swap will
change as Instant Run improves

00:01:30.800 --> 00:01:31.750
and evolves.

00:01:31.750 --> 00:01:33.980
So rather than listing
them here in detail

00:01:33.980 --> 00:01:36.170
and having this video
become quickly outdated,

00:01:36.170 --> 00:01:39.040
you can find the
details in the Docs.

00:01:39.040 --> 00:01:40.910
Instant Run works
with all emulators

00:01:40.910 --> 00:01:42.520
in every recent physical device.

00:01:42.520 --> 00:01:44.600
In fact, on every
platform version

00:01:44.600 --> 00:01:47.540
all the way back to
Ice Cream Sandwich.

00:01:47.540 --> 00:01:50.150
Not content with Instant
Run, Android Studio 2.0

00:01:50.150 --> 00:01:53.930
also improves each step of the
full build and deploy process.

00:01:53.930 --> 00:01:57.770
So even full builds happen more
than 2 and 1/2 times faster.

00:01:57.770 --> 00:01:59.810
The first time you
hit Run or Debug

00:01:59.810 --> 00:02:02.040
for your code or each
time you do a clean build,

00:02:02.040 --> 00:02:04.390
your code is compiled and
converted to dex files,

00:02:04.390 --> 00:02:07.600
is optionally shrunk, optimized,
and obfuscated with Proguard

00:02:07.600 --> 00:02:09.210
and has its classes
and resources

00:02:09.210 --> 00:02:11.640
packaged all before it's
uploaded to the device

00:02:11.640 --> 00:02:13.060
and installed.

00:02:13.060 --> 00:02:15.900
Android Studio 2.0 has
improved each of these steps,

00:02:15.900 --> 00:02:17.710
starting with dx.

00:02:17.710 --> 00:02:19.830
We have reduced time
here by over half,

00:02:19.830 --> 00:02:22.820
primarily through improving
the dx merger algorithm.

00:02:22.820 --> 00:02:25.900
Now that merging dex dependency
modules is lightning fast,

00:02:25.900 --> 00:02:28.740
we gain significant gains
from pre-dexing them and not

00:02:28.740 --> 00:02:30.940
re-dexing them if
they haven't changed.

00:02:30.940 --> 00:02:32.940
So if your project
has a lot of modules,

00:02:32.940 --> 00:02:35.020
you'll see significant
gains here.

00:02:35.020 --> 00:02:38.080
We've also modified dx so
that it now runs in process,

00:02:38.080 --> 00:02:40.280
and you can specify
running up to four dx

00:02:40.280 --> 00:02:42.400
instances in parallel.

00:02:42.400 --> 00:02:45.910
This has significant advantages,
as we no longer start a new VM

00:02:45.910 --> 00:02:48.790
for each dx instance, keeping
the GIT more opportunity

00:02:48.790 --> 00:02:51.410
to optimize code and removing
the overhead of starting

00:02:51.410 --> 00:02:54.560
and running multiple
parallel VM instances.

00:02:54.560 --> 00:02:57.170
If you're using Proguard,
it creates a single job

00:02:57.170 --> 00:02:59.630
that effectively disables
the pre-dexing advantages

00:02:59.630 --> 00:03:00.940
that we just gained.

00:03:00.940 --> 00:03:04.650
So we developed a new shrinker
to use in debug builds.

00:03:04.650 --> 00:03:06.430
It doesn't replace
Proguard, it just

00:03:06.430 --> 00:03:08.170
replaces it's shrinking
functionality.

00:03:08.170 --> 00:03:10.920
So you'll still need to run
Proguard on release builds

00:03:10.920 --> 00:03:14.530
to optimize and
obfuscate your code.

00:03:14.530 --> 00:03:16.850
But for debugging the
shrinker is much faster

00:03:16.850 --> 00:03:18.560
by including some
incremental support

00:03:18.560 --> 00:03:21.800
and critically by not
re-dexing dependencies.

00:03:21.800 --> 00:03:24.610
To improve AAPT packaging
times on full builds,

00:03:24.610 --> 00:03:26.910
we now ask you to
select a deploy target

00:03:26.910 --> 00:03:29.130
before your app is
built. We'll check

00:03:29.130 --> 00:03:31.720
what resources are required
for that particular device.

00:03:31.720 --> 00:03:33.990
For example, initially
we'll only package and push

00:03:33.990 --> 00:03:36.440
the appropriate image
resource resolutions.

00:03:36.440 --> 00:03:37.950
And future Android
Studio releases

00:03:37.950 --> 00:03:41.410
will expand that to include
resources such as ABIs Legacy

00:03:41.410 --> 00:03:42.980
MultiDex.

00:03:42.980 --> 00:03:45.840
To improve deploy times,
we improved the ADB

00:03:45.840 --> 00:03:48.480
push-pull protocol,
making it very fast

00:03:48.480 --> 00:03:51.630
to deploy to an emulator, which
seems like a really good reason

00:03:51.630 --> 00:03:54.050
to improve the emulator UX
and make it really, really

00:03:54.050 --> 00:03:55.850
ridiculously fast.

00:03:55.850 --> 00:03:57.260
In fact, running
the new emulator

00:03:57.260 --> 00:03:59.170
on typical dev
hardware is faster than

00:03:59.170 --> 00:04:02.930
using a physical Android device.

00:04:02.930 --> 00:04:04.940
To achieve this
without an SMP support

00:04:04.940 --> 00:04:07.560
to take advantage of host
multi-core architecture

00:04:07.560 --> 00:04:10.770
and optimize GPU, IO,
and CPU performance.

00:04:10.770 --> 00:04:14.470
At the same time, we completely
rebuilt the emulator UI.

00:04:14.470 --> 00:04:16.940
It now includes a
toolbar to enable actions

00:04:16.940 --> 00:04:19.529
like screen rotation
and screen shots

00:04:19.529 --> 00:04:22.550
and support for deploying
APKs through drag and drop.

00:04:22.550 --> 00:04:25.550
You can rescale the emulator
frame by dragging a corner,

00:04:25.550 --> 00:04:28.160
modify device hardware
changes like GPS,

00:04:28.160 --> 00:04:30.400
cellular network
conditions, battery state,

00:04:30.400 --> 00:04:33.100
and incoming phone
calls or texts.

00:04:33.100 --> 00:04:35.510
We've also made it easier
to keep up to date.

00:04:35.510 --> 00:04:37.820
The IDE will prompt you
when there's a new emulator

00:04:37.820 --> 00:04:40.061
available for you to download.

00:04:40.061 --> 00:04:42.060
If you're building something
graphics intensive,

00:04:42.060 --> 00:04:44.560
like a game, you can take
advantage of our new GPU

00:04:44.560 --> 00:04:47.160
profiler and debugger.

00:04:47.160 --> 00:04:50.200
It lets you record and replay
the entire GPU stream frame

00:04:50.200 --> 00:04:52.410
by frame, allowing
you to inspect the GPU

00:04:52.410 --> 00:04:55.040
state at each stage
and help you understand

00:04:55.040 --> 00:04:57.310
what caused each specific
rendering outcome.

00:05:01.540 --> 00:05:03.330
You can select an
individual frame

00:05:03.330 --> 00:05:06.251
by either the top bar or
the GPU Commands panel.

00:05:06.251 --> 00:05:08.250
Once you select a frame,
the frame buffer window

00:05:08.250 --> 00:05:10.850
will update to show
that frame's contents.

00:05:10.850 --> 00:05:13.870
You can also see and inspect
each individual command and GL

00:05:13.870 --> 00:05:15.210
call that was used.

00:05:15.210 --> 00:05:18.330
You can also use the GPU State
window or the Textures tab

00:05:18.330 --> 00:05:21.680
to explore GPU state at the time
of your selected frame or draw

00:05:21.680 --> 00:05:22.290
calls.

00:05:22.290 --> 00:05:25.700
Android Studio 2.0 is
built on IntelliJ 15, which

00:05:25.700 --> 00:05:28.710
offers improved stability
and a number of new features,

00:05:28.710 --> 00:05:31.290
including improvements to
the built-in integrations

00:05:31.290 --> 00:05:33.570
with version control
systems, such as support

00:05:33.570 --> 00:05:37.270
for rebase on GIT and cool new
features like Find in Path,

00:05:37.270 --> 00:05:38.870
and Distraction-Free Mode.

00:05:38.870 --> 00:05:41.320
There's also a unified
user interface for testing

00:05:41.320 --> 00:05:44.880
that includes a Test Run a Tool
window, In-line Statistics,

00:05:44.880 --> 00:05:46.230
and a Test Result History.

00:05:46.230 --> 00:05:48.390
We've built on top of
those test improvements,

00:05:48.390 --> 00:05:51.290
allowing you to have both
Android and unit tests

00:05:51.290 --> 00:05:53.370
source sets active
while you develop,

00:05:53.370 --> 00:05:56.567
enabling refactorings
across those source sets.

00:05:56.567 --> 00:05:58.400
We've also worked closely
with Google Search

00:05:58.400 --> 00:06:00.980
to make it easier to create
deep links within your app,

00:06:00.980 --> 00:06:02.470
including static
code inspections

00:06:02.470 --> 00:06:04.700
to check that your links
are correctly configured

00:06:04.700 --> 00:06:07.210
and real time testing to
confirm Google can index

00:06:07.210 --> 00:06:08.895
and render your app
pages correctly.

00:06:15.030 --> 00:06:16.790
In future episodes
of Android Tool Time,

00:06:16.790 --> 00:06:19.010
we'll dive deeper into
these and other new features

00:06:19.010 --> 00:06:20.220
from Android Studio.

00:06:20.220 --> 00:06:22.660
So subscribe to Android
Developers on YouTube,

00:06:22.660 --> 00:06:25.102
and check out the Android
Tool Time playlist.

00:06:25.102 --> 00:06:27.310
And remember, if you've been
taking your breaks based

00:06:27.310 --> 00:06:29.106
on building and
deploying your app,

00:06:29.106 --> 00:06:31.480
you may want to start setting
alarms to remind you to eat

00:06:31.480 --> 00:06:32.910
and drink at regular intervals.

00:06:32.910 --> 00:06:36.720
That's Android Studio 2.0,
and this was Android Tool Time

00:06:36.720 --> 00:06:37.220
time.

00:06:37.220 --> 00:06:40.270
[MUSIC PLAYING]

