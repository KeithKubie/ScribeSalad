WEBVTT
Kind: captions
Language: en

00:00:00.140 --> 00:00:05.170
The next section in each pattern description talks about implementation.

00:00:05.170 --> 00:00:08.300
The design pattern that we've, understood so

00:00:08.300 --> 00:00:11.010
far has to do with the design of a solution.

00:00:11.010 --> 00:00:13.090
Not necessarily It's implementation.

00:00:13.090 --> 00:00:16.140
Implementation means translating that design into some code.

00:00:17.410 --> 00:00:18.060
Okay?

00:00:18.060 --> 00:00:21.380
Doing that often means that there are choices arise.

00:00:21.380 --> 00:00:24.660
And it's important to understand the implication of the those choices.

00:00:24.660 --> 00:00:28.190
The implementation section of a design pattern description lays out

00:00:28.190 --> 00:00:31.680
those implementation issues, and alternative ways of addressing them.

00:00:31.680 --> 00:00:34.860
For the Composite pattern, here are some of the issues that arise.

00:00:34.860 --> 00:00:39.820
We know that in the pattern so far, we have references from parents to children.

00:00:39.820 --> 00:00:43.690
An issue that you might wish to include, or a feature you might wish to

00:00:43.690 --> 00:00:46.780
include is, do you have pointers from children back to parents.

00:00:46.780 --> 00:00:51.650
Once you do this, of course, referential integrity problems might arise.

00:00:51.650 --> 00:00:55.980
Another issue is whether we would allow multiple parents to refer to

00:00:55.980 --> 00:00:56.950
the same children.

00:00:56.950 --> 00:01:00.470
Imagine that you have separate hierarchies in

00:01:00.470 --> 00:01:02.960
which the leaf elements are shared.

00:01:02.960 --> 00:01:06.030
This, of course, can be powerful if you wish to do it because it

00:01:06.030 --> 00:01:09.060
reduces the overall number of objects that you have.

00:01:09.060 --> 00:01:12.880
But it might also increase your code complexity if you were to do that.

00:01:12.880 --> 00:01:16.230
Similar to the situation where we just described in which moving the add

00:01:16.230 --> 00:01:19.420
operation up in the hierarchy has the benefit of making the uni-,

00:01:19.420 --> 00:01:21.110
the interface more uniform.

00:01:21.110 --> 00:01:24.160
However, it might lead to having unnatural operations at

00:01:24.160 --> 00:01:26.160
too high a level in the hierarchy.

00:01:26.160 --> 00:01:29.210
Similarly placing the list of children up one level,

00:01:29.210 --> 00:01:33.290
also would mean that somehow now leafs at children.

00:01:33.290 --> 00:01:37.250
Now, the issue is what data structure should you use to keep the list of

00:01:37.250 --> 00:01:41.530
children, their hash tables, their arrays, link, lesson, so on.

00:01:41.530 --> 00:01:45.990
Finally is the question of whether, when you delete a composite,

00:01:45.990 --> 00:01:47.260
do you also delete its children?

