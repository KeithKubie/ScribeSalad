WEBVTT
Kind: captions
Language: en

00:00:01.390 --> 00:00:02.020
CLANCY CHILDS: Hello.

00:00:02.020 --> 00:00:03.625
Thank you for attending.

00:00:03.625 --> 00:00:07.060
In this session, we're going
to be speaking about two

00:00:07.060 --> 00:00:10.430
Google products, Google AdSense
and Google Analytics,

00:00:10.430 --> 00:00:14.620
which are now integrating with
Google BigQuery, Google's big

00:00:14.620 --> 00:00:17.060
data analysis and
query engine.

00:00:17.060 --> 00:00:18.160
My name's Clancy Childs.

00:00:18.160 --> 00:00:23.220
I'm a product manager for
Google Analytics.

00:00:23.220 --> 00:00:24.593
LOUIS COLLARD: I'm
Louis Collard.

00:00:24.593 --> 00:00:27.000
I'm a software engineer
on AdSense.

00:00:27.000 --> 00:00:27.290
DUNCAN MCKIE: And I'm
Duncan Mckie.

00:00:27.290 --> 00:00:28.540
I work for Gumtree.com.

00:00:30.980 --> 00:00:33.750
CLANCY CHILDS: A key design
principle for all Google

00:00:33.750 --> 00:00:37.370
products is to make sure that
they are easy to use by the

00:00:37.370 --> 00:00:38.700
average user.

00:00:38.700 --> 00:00:41.880
This means that for reporting
products, like Google

00:00:41.880 --> 00:00:45.780
Analytics and AdSense, we really
focus on making sure

00:00:45.780 --> 00:00:49.570
that users can get to the data
very quickly, with very low

00:00:49.570 --> 00:00:53.840
latency, and don't require a lot
of deep domain knowledge

00:00:53.840 --> 00:00:55.420
about the data that's contained

00:00:55.420 --> 00:00:56.840
within those reports.

00:00:56.840 --> 00:01:00.460
Really, the idea is that we want
these users to quickly

00:01:00.460 --> 00:01:04.470
get to the data and get some
insights out of it and then go

00:01:04.470 --> 00:01:06.110
and take action.

00:01:06.110 --> 00:01:09.880
However, we also know that
there's a lot of users at our

00:01:09.880 --> 00:01:12.770
clients-- a lot of our clients
have in their teams data

00:01:12.770 --> 00:01:17.050
scientists, data-savvy analysts
and developers, who

00:01:17.050 --> 00:01:21.020
really want a much more granular
access to the data

00:01:21.020 --> 00:01:22.740
within these products.

00:01:22.740 --> 00:01:26.360
So for instance, some of the use
cases that we see here are

00:01:26.360 --> 00:01:32.400
the developers that want a
SQL-like query interface so

00:01:32.400 --> 00:01:35.940
they can actually get into the
granular data and really make

00:01:35.940 --> 00:01:39.070
complex queries on the data
within there to sort of solve

00:01:39.070 --> 00:01:42.060
specific problems or optimize.

00:01:42.060 --> 00:01:46.980
They also tend to do things like
use some of the business

00:01:46.980 --> 00:01:50.030
class, the enterprise class
visualization tools, things

00:01:50.030 --> 00:01:53.420
like Tableau, which some of
you may be familiar with.

00:01:53.420 --> 00:01:56.900
What they look for is getting
this data into Tableau and

00:01:56.900 --> 00:01:59.780
doing things like building
enterprise-wide dashboards so

00:01:59.780 --> 00:02:03.590
that a company can see at a
glance how their business is

00:02:03.590 --> 00:02:06.260
doing using data from
different data sets.

00:02:06.260 --> 00:02:08.650
And a lot of times, what we've
heard is that these companies

00:02:08.650 --> 00:02:11.860
want to get their AdSense and
Analytics data into those

00:02:11.860 --> 00:02:14.940
visualization tools as well.

00:02:14.940 --> 00:02:17.580
These users also tend to really
rely on their own data

00:02:17.580 --> 00:02:21.590
warehouses, so in many cases,
what they would like to do is

00:02:21.590 --> 00:02:24.140
join up data from different
data sources

00:02:24.140 --> 00:02:25.420
into a single place.

00:02:25.420 --> 00:02:30.560
So for instance, an online hotel
booking site may have a

00:02:30.560 --> 00:02:34.360
database that contains all of
their profit margins for each

00:02:34.360 --> 00:02:35.170
online booking.

00:02:35.170 --> 00:02:39.910
And what they would like to do
is join that with data from,

00:02:39.910 --> 00:02:43.440
let's say, Google Analytics and
be able to say not only

00:02:43.440 --> 00:02:47.150
what are my most profitable
transactions, but actually

00:02:47.150 --> 00:02:49.970
what were the online user
behaviors that led to those

00:02:49.970 --> 00:02:51.600
transactions?

00:02:51.600 --> 00:02:54.000
So they want to be able to join
this data all together in

00:02:54.000 --> 00:02:55.450
the data warehouses.

00:02:55.450 --> 00:03:00.080
Likewise, they may want to use
this granular data as an input

00:03:00.080 --> 00:03:02.080
into other business
applications

00:03:02.080 --> 00:03:02.910
that they may have.

00:03:02.910 --> 00:03:07.270
For instance, an online
retailer may have a

00:03:07.270 --> 00:03:09.970
personalization engine
application that they've built

00:03:09.970 --> 00:03:11.300
for their home page.

00:03:11.300 --> 00:03:15.080
And they want to take data from
Google Analytics and from

00:03:15.080 --> 00:03:20.170
their CRM system, join that data
together, and when a user

00:03:20.170 --> 00:03:23.450
lands on their home page, have
that application display to

00:03:23.450 --> 00:03:27.600
that user a personalized view
of particular products that

00:03:27.600 --> 00:03:29.770
that user may be interested
in purchasing.

00:03:29.770 --> 00:03:33.790
So all of these different use
cases really require a very

00:03:33.790 --> 00:03:36.140
deep access to the data
contained within these

00:03:36.140 --> 00:03:38.540
products for these data
scientist users.

00:03:43.230 --> 00:03:43.930
LOUIS COLLARD: Thanks, Clancy.

00:03:43.930 --> 00:03:46.540
So this is where BigQuery
comes in.

00:03:46.540 --> 00:03:48.600
It's Google's big data
analysis engine.

00:03:48.600 --> 00:03:50.960
And it's been designed from the
beginning with these kinds

00:03:50.960 --> 00:03:52.970
of use cases in mind.

00:03:52.970 --> 00:03:55.310
So we decided the best thing
to do would be to leave our

00:03:55.310 --> 00:03:58.650
existing interfaces as they
are for standard users and

00:03:58.650 --> 00:04:01.010
make our data available in
BigQuery so that data

00:04:01.010 --> 00:04:03.450
scientists can get the access
they need and take advantage

00:04:03.450 --> 00:04:07.170
of BigQuery's existing
functionality.

00:04:07.170 --> 00:04:09.050
So there's a few features I'd
like to call out which we

00:04:09.050 --> 00:04:10.740
think make this a
really good fit.

00:04:10.740 --> 00:04:14.790
So firstly scale, you can query
billions of rows of data

00:04:14.790 --> 00:04:16.430
interactively.

00:04:16.430 --> 00:04:18.839
So you can type an SQL-like
statement into your browser

00:04:18.839 --> 00:04:21.620
and watch the results come
back almost straightaway.

00:04:21.620 --> 00:04:25.690
You can also query from the
command line or from the API.

00:04:25.690 --> 00:04:27.350
And as Clancy mentioned, you're
probably going to want

00:04:27.350 --> 00:04:29.790
to join the Google data we're
making available with some of

00:04:29.790 --> 00:04:31.020
your own data.

00:04:31.020 --> 00:04:33.500
And Big Query gives you a
couple of options here.

00:04:33.500 --> 00:04:36.400
You can either upload your data
into BigQuery and do all

00:04:36.400 --> 00:04:38.440
your analysis in the cloud,
which can be pretty

00:04:38.440 --> 00:04:41.200
cost-effective as it saves you
having to own and maintain an

00:04:41.200 --> 00:04:43.770
equivalent hardware and
software stack.

00:04:43.770 --> 00:04:47.700
Or if you are already using
some third-party data

00:04:47.700 --> 00:04:51.730
warehousing and analysis
solution, then BigQuery

00:04:51.730 --> 00:04:53.710
already has good integration
with a number of them.

00:04:53.710 --> 00:04:56.010
So if you're using one of those,
you can just import the

00:04:56.010 --> 00:04:59.510
data from BigQuery into your
existing solution.

00:04:59.510 --> 00:05:01.770
If you are going to do that, you
can still take advantage

00:05:01.770 --> 00:05:04.220
of BigQuery to reduce the volume
of data that you have

00:05:04.220 --> 00:05:07.076
to import, either just by being
selective about the rows

00:05:07.076 --> 00:05:08.730
that you import or by
performing some

00:05:08.730 --> 00:05:10.130
pre-aggregation in BigQuery.

00:05:13.770 --> 00:05:15.265
So I'm going to talk now
about the AdSense data

00:05:15.265 --> 00:05:18.020
we're making available.

00:05:18.020 --> 00:05:19.590
Hopefully, this looks familiar
to some of you.

00:05:19.590 --> 00:05:21.830
It's the same data which
is available in

00:05:21.830 --> 00:05:23.670
the UI and the API.

00:05:23.670 --> 00:05:26.460
And we've got this split
into five tables.

00:05:26.460 --> 00:05:29.380
The basic DailyReport table
exposes all of the common

00:05:29.380 --> 00:05:30.930
dimensions.

00:05:30.930 --> 00:05:33.750
And then the AdUnit,
CustomChannel, and UrlChannel

00:05:33.750 --> 00:05:36.480
dimensions are each available
in their own respective

00:05:36.480 --> 00:05:38.350
tables, which all expose
all of the common

00:05:38.350 --> 00:05:39.990
dimensions as well.

00:05:39.990 --> 00:05:42.490
And lastly, we've got the Domain
table, which exposes

00:05:42.490 --> 00:05:46.740
Date, Ad Client, Product,
and Domain.

00:05:46.740 --> 00:05:49.870
So all of these tables expose
the same five raw AdSense

00:05:49.870 --> 00:05:51.960
metrics that you see here.

00:05:51.960 --> 00:05:54.820
You'll notice that CPC,
CTR, and RPM are

00:05:54.820 --> 00:05:55.720
missing from that list.

00:05:55.720 --> 00:05:57.700
That's because those are all
derived from these metrics,

00:05:57.700 --> 00:05:59.870
which is something you can do
easily as part of your query.

00:06:06.920 --> 00:06:08.920
So compared to the UI, this
gives you quite a bit of extra

00:06:08.920 --> 00:06:11.740
flexibility, in that you can
request any combination of the

00:06:11.740 --> 00:06:14.990
dimensions and metrics that are
available in those tables.

00:06:14.990 --> 00:06:16.540
And you can run much
larger reports than

00:06:16.540 --> 00:06:18.750
you can in the UI.

00:06:18.750 --> 00:06:21.700
The data is still retrieved
live, so if you're watching

00:06:21.700 --> 00:06:23.350
for updates throughout the
day, you'll see those

00:06:23.350 --> 00:06:24.370
reflected in BigQuery.

00:06:24.370 --> 00:06:26.010
And the data will match
what you see in

00:06:26.010 --> 00:06:27.850
the UI at all times.

00:06:27.850 --> 00:06:29.765
And obviously, it's still free
to query this data, so you

00:06:29.765 --> 00:06:32.170
won't be charged by BigQuery
for querying these tables.

00:06:36.220 --> 00:06:39.280
I've got here a very simple
query, just to retrieve your

00:06:39.280 --> 00:06:42.110
top channels by earnings, just
to give you an idea of what it

00:06:42.110 --> 00:06:43.750
would look like, really.

00:06:43.750 --> 00:06:46.340
You can see in blue where it's
selecting and grouping by

00:06:46.340 --> 00:06:47.580
custom_channel_id.

00:06:47.580 --> 00:06:49.160
And then in green, we're
retrieving and

00:06:49.160 --> 00:06:52.290
ordering by the earnings.

00:06:52.290 --> 00:06:55.380
You probably already know your
top five custom channels, so

00:06:55.380 --> 00:06:58.540
more interesting might be
channels that have grown the

00:06:58.540 --> 00:07:00.830
most month-on-month.

00:07:00.830 --> 00:07:03.680
This is something that's not
readily available in the UI,

00:07:03.680 --> 00:07:06.600
but in BigQuery is quite
easy to retrieve.

00:07:06.600 --> 00:07:09.640
We've got here a query which is
joining the results of two

00:07:09.640 --> 00:07:10.830
subqueries.

00:07:10.830 --> 00:07:12.460
In blue, we're retrieving
a customer

00:07:12.460 --> 00:07:14.180
channel report for January.

00:07:14.180 --> 00:07:16.550
And then in green-- this is
truncated so it fits--

00:07:16.550 --> 00:07:18.910
the same thing, but
for February.

00:07:18.910 --> 00:07:21.950
Then the outer query in red is
joining the results of those

00:07:21.950 --> 00:07:24.990
two subqueries on
custom_channel_name, then

00:07:24.990 --> 00:07:26.780
calculating the delta on
the number of clicks

00:07:26.780 --> 00:07:29.330
and ordering by that.

00:07:29.330 --> 00:07:46.540
So if I switch to the BigQuery
browser tool, you can see I've

00:07:46.540 --> 00:07:49.110
got the full query here.

00:07:49.110 --> 00:07:52.400
If I just press Run on that, we
should pretty quickly get

00:07:52.400 --> 00:07:53.650
back an answer.

00:07:56.820 --> 00:07:59.720
And here we've got some
helpfully named custom

00:07:59.720 --> 00:08:02.500
channels and the number of
additional clicks they got in

00:08:02.500 --> 00:08:03.870
February compared to January.

00:08:12.400 --> 00:08:15.620
Lastly, we mentioned third
party integration.

00:08:15.620 --> 00:08:17.190
I'm going to show you a few of
the kinds of things that you

00:08:17.190 --> 00:08:19.050
can do using Tableau, which is
one of the products that

00:08:19.050 --> 00:08:20.300
already integrates
with BigQuery.

00:08:28.360 --> 00:08:30.670
On the left-hand side here,
we've got the dimensions and

00:08:30.670 --> 00:08:34.110
metrics that are available
in the BigQuery table.

00:08:34.110 --> 00:08:36.980
And we're looking here at
a graph of earnings from

00:08:36.980 --> 00:08:39.630
November to end of January.

00:08:39.630 --> 00:08:41.760
So you'll notice there's
a fairly strong weekly

00:08:41.760 --> 00:08:43.750
seasonality to the data.

00:08:43.750 --> 00:08:45.750
And then we've got a much bigger
dip here, which turns

00:08:45.750 --> 00:08:48.350
out to be Christmas.

00:08:48.350 --> 00:08:50.240
Interesting, nothing
particularly actionable at

00:08:50.240 --> 00:08:51.320
this point.

00:08:51.320 --> 00:08:52.080
So let's dig a bit deeper.

00:08:52.080 --> 00:08:56.780
If we add, say, platform, then
we can very quickly see an

00:08:56.780 --> 00:08:59.900
interesting trend pop up after
Christmas, which is that the

00:08:59.900 --> 00:09:03.610
orange and red sections, which
are mobile and tablet devices,

00:09:03.610 --> 00:09:06.920
show quite a noticeable uplift
in revenue after Christmas.

00:09:06.920 --> 00:09:09.095
So that would seem to indicate
people got some new devices

00:09:09.095 --> 00:09:12.140
for Christmas, so that
kind of makes sense.

00:09:12.140 --> 00:09:15.090
So we could decide to stop here
and go away and optimize

00:09:15.090 --> 00:09:17.440
our site for mobile.

00:09:17.440 --> 00:09:19.400
In this example, we actually
have different sites for

00:09:19.400 --> 00:09:20.650
different countries.

00:09:20.650 --> 00:09:23.290
So it's probably worth checking
if all the countries

00:09:23.290 --> 00:09:26.590
are showing the same trends.

00:09:26.590 --> 00:09:31.570
So if I just exclude desktop for
now, seeing as we're not

00:09:31.570 --> 00:09:34.770
interested in that at the
moment, and then if I merge

00:09:34.770 --> 00:09:36.800
these two together, seeing as
they're behaving roughly the

00:09:36.800 --> 00:09:45.812
same, change this to a line, and
then add Country, then we

00:09:45.812 --> 00:09:47.700
see another interesting trend.

00:09:47.700 --> 00:09:50.790
So our two main earners here are
Australia in brown and the

00:09:50.790 --> 00:09:53.120
UK in gray.

00:09:53.120 --> 00:09:54.130
And it looks like it's
been a pretty good

00:09:54.130 --> 00:09:55.650
Christmas for the UK.

00:09:55.650 --> 00:09:58.420
The uplift in earnings there is
a lot more noticeable than

00:09:58.420 --> 00:10:00.040
for Australia.

00:10:00.040 --> 00:10:02.720
So at this point, we can go away
and optimize our UK site

00:10:02.720 --> 00:10:04.140
for mobile first, knowing
that that will

00:10:04.140 --> 00:10:05.390
have the biggest impact.

00:10:12.350 --> 00:10:14.650
We're pleased to announce that
there's a beta version of this

00:10:14.650 --> 00:10:18.720
integration available for all
AdSense publishers from today.

00:10:18.720 --> 00:10:20.900
All you need to do to get
started is sign up for a

00:10:20.900 --> 00:10:24.170
BigQuery project using the same
Google login as you use

00:10:24.170 --> 00:10:25.800
for your AdSense accounts.

00:10:25.800 --> 00:10:26.410
And that's it.

00:10:26.410 --> 00:10:29.020
Then you can go and start
querying the tables.

00:10:29.020 --> 00:10:31.440
We've got step-by-step
instructions on all of this on

00:10:31.440 --> 00:10:34.290
the AdSense Developer site.

00:10:34.290 --> 00:10:35.980
As I said, it is a beta,
so there probably

00:10:35.980 --> 00:10:36.840
will be some bugs.

00:10:36.840 --> 00:10:39.060
If you find them, please let
us know so we can fix them.

00:10:39.060 --> 00:10:42.150
And the best place to do
that is on the forum.

00:10:42.150 --> 00:10:42.730
Thanks very much.

00:10:42.730 --> 00:10:44.929
I'm going to pass
back to Clancy.

00:10:44.929 --> 00:10:45.402
CLANCY CHILDS: Cool.

00:10:45.402 --> 00:10:49.670
[APPLAUSE]

00:10:49.670 --> 00:10:52.210
CLANCY CHILDS: Thanks
a lot, Louis.

00:10:52.210 --> 00:10:56.460
Similar to the AdSense
integration with BigQuery,

00:10:56.460 --> 00:10:59.140
we're here today to announce
what we're doing with Google

00:10:59.140 --> 00:11:00.990
Analytics and BigQuery.

00:11:00.990 --> 00:11:03.770
So what are we announcing?

00:11:03.770 --> 00:11:06.950
We are targeting in September
of this year a public launch

00:11:06.950 --> 00:11:10.340
where Google Analytics Premium
clients will be able to have

00:11:10.340 --> 00:11:13.870
their data from Google Analytics
Premium imported

00:11:13.870 --> 00:11:16.120
into BigQuery.

00:11:16.120 --> 00:11:18.710
What we're doing today is
we're also opening up a

00:11:18.710 --> 00:11:21.610
developer group for developers
that may be interested in

00:11:21.610 --> 00:11:23.990
working with this BigQuery
integration.

00:11:23.990 --> 00:11:27.240
So I'll give you in a few
minutes a link that will take

00:11:27.240 --> 00:11:29.980
you to a form where you can
register your interest in this

00:11:29.980 --> 00:11:33.030
particular integration.

00:11:33.030 --> 00:11:35.130
What are we actually
exporting?

00:11:35.130 --> 00:11:38.500
It's a daily export of all of
the data within a Google

00:11:38.500 --> 00:11:40.830
Analytics profile into
BigQuery, so

00:11:40.830 --> 00:11:42.190
it's a daily export.

00:11:42.190 --> 00:11:46.070
And the schema, which we'll be
sharing on the developers

00:11:46.070 --> 00:11:52.070
group shortly, takes the shape
of every row in BigQuery in

00:11:52.070 --> 00:11:55.630
this integration corresponds to
a session or visit in the

00:11:55.630 --> 00:11:57.570
Google Analytics profile.

00:11:57.570 --> 00:12:01.110
And so it will have information
on there like any

00:12:01.110 --> 00:12:04.580
sort of visitor or visit-level
custom dimensions or

00:12:04.580 --> 00:12:07.260
variables, things like
traffic source.

00:12:07.260 --> 00:12:10.040
All of that visit-level
information is in each row.

00:12:10.040 --> 00:12:14.920
But also within each of those
rows is a nested sequence of

00:12:14.920 --> 00:12:17.630
all the hits that happened
in that visit.

00:12:17.630 --> 00:12:21.180
So this would mean that, as
it's in a sequence, in the

00:12:21.180 --> 00:12:25.595
order that they occurred,
every page view, event,

00:12:25.595 --> 00:12:28.880
e-commerce transaction, and if
you're using the mobile SDKs

00:12:28.880 --> 00:12:31.170
for Google Analytics,
things like

00:12:31.170 --> 00:12:33.240
exceptions and screen views.

00:12:33.240 --> 00:12:36.990
So you really actually get the
hit-level data, as well as the

00:12:36.990 --> 00:12:39.800
session-level data in each
of these rows in

00:12:39.800 --> 00:12:41.460
the BigQuery export.

00:12:41.460 --> 00:12:45.370
Where possible, we are using the
same dimension and metric

00:12:45.370 --> 00:12:48.460
names that we use for
the Core Reporting

00:12:48.460 --> 00:12:50.050
API in Google Analytics.

00:12:50.050 --> 00:12:53.280
We're using those as the column
names in BigQuery.

00:12:53.280 --> 00:12:57.650
So if you already use the Core
Reporting API for Google

00:12:57.650 --> 00:13:00.320
Analytics, you will have a
certain amount of familiarity

00:13:00.320 --> 00:13:07.300
with the dimension names and
metric names in BigQuery.

00:13:07.300 --> 00:13:11.140
One important note is that at
launch, this is going to

00:13:11.140 --> 00:13:14.110
contain first-party data.

00:13:14.110 --> 00:13:16.500
That means any of the data
that's actually collected by

00:13:16.500 --> 00:13:19.540
either the Google Analytics
measurement protocol or any of

00:13:19.540 --> 00:13:22.930
the tracking code or the
SDKs for mobile apps.

00:13:22.930 --> 00:13:27.310
There's some data in Google
Analytics, for instance, GOIP

00:13:27.310 --> 00:13:30.780
lookup, so the geography data,
that's actually post-processed

00:13:30.780 --> 00:13:33.100
into Google Analytics.

00:13:33.100 --> 00:13:35.590
And that data might
not be available

00:13:35.590 --> 00:13:37.410
at launch in September.

00:13:37.410 --> 00:13:40.090
However, we're going to
continually look to expand the

00:13:40.090 --> 00:13:43.170
number of dimensions and metrics
that we can pass

00:13:43.170 --> 00:13:45.330
through in this export
into BigQuery.

00:13:48.910 --> 00:13:51.710
Starting today, if you're
interested in learning more

00:13:51.710 --> 00:13:56.220
about this integration, you can
go to this short link or

00:13:56.220 --> 00:13:58.550
scan the QR code.

00:13:58.550 --> 00:13:59.780
There will be a form there.

00:13:59.780 --> 00:14:01.990
And that form, if you just
explain to us what you're

00:14:01.990 --> 00:14:03.710
hoping to do, we're just trying
to collect some data

00:14:03.710 --> 00:14:06.520
about exactly how people are
looking forward to using this

00:14:06.520 --> 00:14:07.520
integration.

00:14:07.520 --> 00:14:12.850
And we'll add you to the
group, where we will be

00:14:12.850 --> 00:14:18.420
sharing things like the schema
when it's ready to be shared,

00:14:18.420 --> 00:14:21.440
things like a sample data set,
and all that sort of

00:14:21.440 --> 00:14:24.990
information especially as we
come up to launch on this.

00:14:24.990 --> 00:14:25.960
Please join.

00:14:25.960 --> 00:14:30.530
And we'll be posting everything
there shortly.

00:14:30.530 --> 00:14:33.190
But I can talk about all the
things we're going to do.

00:14:33.190 --> 00:14:34.930
What makes a lot more sense
is for me to invite

00:14:34.930 --> 00:14:36.340
Duncan McKie up.

00:14:36.340 --> 00:14:37.490
Duncan is a senior--

00:14:37.490 --> 00:14:38.740
[INAUDIBLE].

00:14:42.680 --> 00:14:44.570
DUNCAN MCKIE: I like
to make a bang.

00:14:44.570 --> 00:14:46.890
CLANCY CHILDS: So Duncan is a
senior business analyst for

00:14:46.890 --> 00:14:48.700
eBay Classifieds Group.

00:14:48.700 --> 00:14:50.700
EBay Classified--

00:14:50.700 --> 00:14:51.680
are you done?

00:14:51.680 --> 00:14:52.540
DUNCAN MCKIE: I think
I'm done.

00:14:52.540 --> 00:14:52.970
I think I'm done.

00:14:52.970 --> 00:14:54.160
Sorry guys.

00:14:54.160 --> 00:14:56.740
CLANCY CHILDS: EBay Classifieds
Group is a Google

00:14:56.740 --> 00:14:58.210
Analytics premium client.

00:14:58.210 --> 00:15:02.160
They're also one of our larger
AdSense publishers as well.

00:15:02.160 --> 00:15:04.770
So we've given Duncan early
access to both of these

00:15:04.770 --> 00:15:05.760
integrations.

00:15:05.760 --> 00:15:07.800
And he's been able to run a
bunch of queries and do a

00:15:07.800 --> 00:15:10.220
bunch of really interesting
things with this.

00:15:10.220 --> 00:15:12.500
And he's going to take us
through now some of the demos

00:15:12.500 --> 00:15:13.910
that he's prepared.

00:15:13.910 --> 00:15:14.420
DUNCAN MCKIE: Thank
you, Clancy.

00:15:14.420 --> 00:15:16.840
Sorry, everybody,
for the bang.

00:15:16.840 --> 00:15:18.490
Before we get started,
can I just get a

00:15:18.490 --> 00:15:19.680
quick show of hands.

00:15:19.680 --> 00:15:22.240
How many people managed to
attend the Big Data Mashup

00:15:22.240 --> 00:15:23.533
session earlier?

00:15:23.533 --> 00:15:24.340
OK.

00:15:24.340 --> 00:15:25.420
So we've got quite a
few in the room.

00:15:25.420 --> 00:15:30.480
How many people managed to
attend the cross-platform GA

00:15:30.480 --> 00:15:33.260
optimization earlier?

00:15:33.260 --> 00:15:33.860
OK.

00:15:33.860 --> 00:15:36.030
So it's good to see there's
not too many people here.

00:15:36.030 --> 00:15:38.800
We'll have lots of new content
for you, then.

00:15:38.800 --> 00:15:39.050
OK.

00:15:39.050 --> 00:15:42.280
So I'll start off just talking
about who I am.

00:15:42.280 --> 00:15:44.250
I work for Gumtree.com,
which is part of

00:15:44.250 --> 00:15:46.010
eBay Classifieds Group.

00:15:46.010 --> 00:15:49.020
And we had probably
around 42 million

00:15:49.020 --> 00:15:51.060
users in the last month.

00:15:51.060 --> 00:15:54.015
That's across 27 countries
across the globe.

00:15:54.015 --> 00:15:58.290
And unlike other e-commerce
websites, although we connect

00:15:58.290 --> 00:16:01.090
our buyers and our sellers
together online initially, a

00:16:01.090 --> 00:16:04.460
lot of those actually go
on to transact offline.

00:16:04.460 --> 00:16:09.020
So for us, we like to think of
ourselves as a local company

00:16:09.020 --> 00:16:12.110
even though we are global.

00:16:12.110 --> 00:16:14.990
Now, every time one of our users
interacts with us, be

00:16:14.990 --> 00:16:18.040
that on a website, on one of our
apps, or even through one

00:16:18.040 --> 00:16:20.880
of our sales teams, that
generates data.

00:16:20.880 --> 00:16:26.420
We have petabytes of the stuff
that's in MySQL, Postgres,

00:16:26.420 --> 00:16:27.760
Salesforce.

00:16:27.760 --> 00:16:30.700
It all gets pulled together
into a massive Teradata

00:16:30.700 --> 00:16:33.080
warehouse, which I think at the
last count was round about

00:16:33.080 --> 00:16:34.690
10 petabytes.

00:16:34.690 --> 00:16:37.540
And we also have an awful lot
of external data as well,

00:16:37.540 --> 00:16:39.670
things like Analytics and
AdSense that we'll talk about

00:16:39.670 --> 00:16:44.200
today, and a lot of other stuff,
like DFP, Paypal, loads

00:16:44.200 --> 00:16:45.460
of different sources of data.

00:16:48.570 --> 00:16:52.710
Now we also have a lot
of different brands.

00:16:52.710 --> 00:16:54.630
We have a lot of different
sites across the globe.

00:16:54.630 --> 00:16:58.800
And that means that each of
our sites and countries

00:16:58.800 --> 00:17:00.620
operates independently.

00:17:00.620 --> 00:17:04.180
And we have a lot of these
different stores of data.

00:17:04.180 --> 00:17:05.690
So all of our challenges
are kind of

00:17:05.690 --> 00:17:10.020
magnified by about 30 times.

00:17:10.020 --> 00:17:12.450
We have all of our data in
different locations in

00:17:12.450 --> 00:17:13.480
different formats.

00:17:13.480 --> 00:17:15.640
And the real challenge here is
how do we pull that together

00:17:15.640 --> 00:17:16.430
and make it useful?

00:17:16.430 --> 00:17:19.599
How do we turn data
into insight?

00:17:19.599 --> 00:17:23.349
Now for some of our pro users,
these guys who know how to

00:17:23.349 --> 00:17:25.400
connect to the different
systems, they know how to go

00:17:25.400 --> 00:17:27.599
in and get this data themselves,
it's fine.

00:17:27.599 --> 00:17:29.690
It's a little bit of a
challenge, but it's possible.

00:17:29.690 --> 00:17:32.530
However, for our non-power
users, people like our

00:17:32.530 --> 00:17:35.620
marketeers, our project
managers, the people who need

00:17:35.620 --> 00:17:38.310
the information to be able to
make data-driven decisions,

00:17:38.310 --> 00:17:39.450
it's not so easy.

00:17:39.450 --> 00:17:42.110
We really want to be able to
pull all of this together and

00:17:42.110 --> 00:17:44.690
put it in one place so it's
accessible for them and as

00:17:44.690 --> 00:17:45.940
useful as possible.

00:17:48.320 --> 00:17:52.230
Now how does BigQuery
fit into this?

00:17:52.230 --> 00:17:54.960
Well, I'd like to talk about
how we use Analytics and

00:17:54.960 --> 00:17:58.560
AdSense and pull these into
BigQuery, and we can use that

00:17:58.560 --> 00:18:03.880
as a central location for some
of our users to get the data.

00:18:03.880 --> 00:18:06.160
I'd like to take you through a
couple of different examples.

00:18:06.160 --> 00:18:09.330
The first one is this.

00:18:09.330 --> 00:18:11.330
We all hate it when this
happens, right?

00:18:11.330 --> 00:18:13.320
So picture the scene.

00:18:13.320 --> 00:18:15.550
Imagine me as a hipster.

00:18:15.550 --> 00:18:19.020
I've just seen this awesome
new blue single-speed bike

00:18:19.020 --> 00:18:20.780
that I really want to buy and
make all the other hipster

00:18:20.780 --> 00:18:22.360
kids jealous.

00:18:22.360 --> 00:18:25.500
And I'm just about to reply to
Clancy, who's selling it, when

00:18:25.500 --> 00:18:27.940
I see one of these arrows.

00:18:27.940 --> 00:18:31.170
And the worst case is I think,
I'll reply tomorrow.

00:18:31.170 --> 00:18:31.970
It'll be fine.

00:18:31.970 --> 00:18:34.650
And then the next day, I see
some other kid riding around

00:18:34.650 --> 00:18:37.500
the neighborhood on my bike.

00:18:37.500 --> 00:18:40.470
The worst case scenario is that
makes me never come back

00:18:40.470 --> 00:18:42.180
to Gumtree.

00:18:42.180 --> 00:18:44.230
And these kind of issues
actually cost us users.

00:18:44.230 --> 00:18:45.600
It's a bad user experience.

00:18:45.600 --> 00:18:48.190
And we want to stop it
as much as possible.

00:18:48.190 --> 00:18:50.720
Unfortunately, it's not always
simple to do that in the

00:18:50.720 --> 00:18:53.230
current Google Analytics user
interface, although there are

00:18:53.230 --> 00:18:56.340
some excellent navigational
tools that help us page

00:18:56.340 --> 00:18:59.010
backwards and forwards
through pageviews.

00:18:59.010 --> 00:19:01.070
Some of our errors are actually
caused by things that

00:19:01.070 --> 00:19:03.500
are not pageviews, things like
AJAX requests, things like

00:19:03.500 --> 00:19:06.700
events that we're tracking.

00:19:06.700 --> 00:19:09.390
Now that we can actually get
the hit-level data in

00:19:09.390 --> 00:19:12.160
BigQuery, we can page backwards
and forwards through

00:19:12.160 --> 00:19:15.640
these user journeys and really
start to examine them So let's

00:19:15.640 --> 00:19:16.890
talk through how we
might do that.

00:19:19.940 --> 00:19:23.010
Here you can see a query that's
just requesting some of

00:19:23.010 --> 00:19:24.630
our Analytics data.

00:19:24.630 --> 00:19:27.550
And in red, you'll see that
we've identified our errors

00:19:27.550 --> 00:19:29.170
using a custom variable.

00:19:29.170 --> 00:19:32.590
And we're doing a REGEXP_MATCH
on that at the bottom.

00:19:32.590 --> 00:19:34.720
Also, you can see in green,
we're pulling out the hit

00:19:34.720 --> 00:19:37.130
number for where the
error occurs.

00:19:37.130 --> 00:19:41.920
And the information about
the session is in black.

00:19:41.920 --> 00:19:44.990
The next step then is to do a
self-JOIN back on this data.

00:19:44.990 --> 00:19:48.350
And I'd like to show you a
few things about this.

00:19:48.350 --> 00:19:50.700
First of all, in blue you can
see that we're JOINing on the

00:19:50.700 --> 00:19:53.020
session data.

00:19:53.020 --> 00:19:55.730
Slightly on top of that, you can
see that we're using the

00:19:55.730 --> 00:19:56.610
word EACH here.

00:19:56.610 --> 00:19:58.820
Now the reason why we're doing
that is because this is a very

00:19:58.820 --> 00:19:59.600
big data set.

00:19:59.600 --> 00:20:02.880
We're talking millions
of rows.

00:20:02.880 --> 00:20:04.330
If it's just a smaller
data set, you

00:20:04.330 --> 00:20:06.330
don't need to use EACH.

00:20:06.330 --> 00:20:08.160
The final thing I'd
like to show you

00:20:08.160 --> 00:20:10.860
is the use of FLATTEN.

00:20:10.860 --> 00:20:13.610
Now, because this Analytics
data is in a nested JSON

00:20:13.610 --> 00:20:17.650
format, if we want to be able
to JOIN on these repeated

00:20:17.650 --> 00:20:20.410
fields, we need to flatten it
out and turn it into a virtual

00:20:20.410 --> 00:20:22.860
flat format.

00:20:22.860 --> 00:20:25.510
The final step then is to
do one more self-JOIN.

00:20:25.510 --> 00:20:28.960
We can use the hit data that
we've pulled out and the visit

00:20:28.960 --> 00:20:33.530
data and then pull out all of
the meta-information about

00:20:33.530 --> 00:20:36.550
this, things like the hour when
it occurred, the page

00:20:36.550 --> 00:20:40.640
name of the hit that directly
preceded our error, and the

00:20:40.640 --> 00:20:42.890
number of issues that
we're seeing.

00:20:42.890 --> 00:20:47.910
And if we can just switch over
into BigQuery, we can give

00:20:47.910 --> 00:20:49.160
that a run.

00:20:51.670 --> 00:20:55.590
Now this is scanning through
approximately 14 million rows

00:20:55.590 --> 00:20:57.680
just for one of these
derived tables.

00:20:57.680 --> 00:21:00.770
We've done that three times,
so that's 42 million rows.

00:21:00.770 --> 00:21:02.460
And that takes 10 seconds.

00:21:02.460 --> 00:21:03.710
It's blindingly fast.

00:21:08.370 --> 00:21:11.660
So having a table of
results is useful.

00:21:11.660 --> 00:21:14.200
But the great thing is being
able to plug this into one of

00:21:14.200 --> 00:21:16.530
our BI tools, something like
Tableau, which we're seeing a

00:21:16.530 --> 00:21:19.880
lot of love for at the moment,
and being able to track this

00:21:19.880 --> 00:21:23.000
over time and automate the
reporting process.

00:21:23.000 --> 00:21:28.070
From the table, we can just see
that Search has given us

00:21:28.070 --> 00:21:30.700
1,775 errors.

00:21:30.700 --> 00:21:32.730
But if we actually map this over
time, we get a much more

00:21:32.730 --> 00:21:35.020
interesting picture, and we can
see how these errors have

00:21:35.020 --> 00:21:37.945
evolved and which of the
different pages have caused

00:21:37.945 --> 00:21:39.195
the most errors.

00:21:43.330 --> 00:21:47.340
Now we're showing an example
of using errors here.

00:21:47.340 --> 00:21:49.390
But the great thing about having
all of our hits in

00:21:49.390 --> 00:21:52.810
BigQuery is that we can
investigate any sequence.

00:21:52.810 --> 00:21:58.480
So if you were wanting to look
at a conversion funnel, for

00:21:58.480 --> 00:22:02.030
example, started with a
pageview, and then the user

00:22:02.030 --> 00:22:05.480
goes on to fill in a form and
then later makes a purchase,

00:22:05.480 --> 00:22:06.650
we can do that.

00:22:06.650 --> 00:22:08.920
It's not currently possible
in the user

00:22:08.920 --> 00:22:10.170
interface in Google Analytics.

00:22:10.170 --> 00:22:12.280
We can only do a pageview
funnel.

00:22:12.280 --> 00:22:15.160
So being able to get that kind
of visibility is really,

00:22:15.160 --> 00:22:16.420
really useful.

00:22:16.420 --> 00:22:18.540
And the even better thing about
it is we can look at

00:22:18.540 --> 00:22:19.280
that historically.

00:22:19.280 --> 00:22:20.655
We don't have to apply
this in advance.

00:22:23.630 --> 00:22:26.080
The next use case I'd like to
talk about is how we segment

00:22:26.080 --> 00:22:29.330
our onsite activity
at Gumtree.

00:22:29.330 --> 00:22:32.660
Now whenever an ad is posted,
it has a number of different

00:22:32.660 --> 00:22:33.830
attributes.

00:22:33.830 --> 00:22:36.920
Some of those are simple, such
as the category and location.

00:22:36.920 --> 00:22:39.360
Some of them are a little bit
more complicated, such as

00:22:39.360 --> 00:22:41.580
whether it was paid for.

00:22:41.580 --> 00:22:44.870
Most of these attributes,
they're fairly static.

00:22:44.870 --> 00:22:47.820
They're directly related to the
user experience, and they

00:22:47.820 --> 00:22:49.720
don't change too
much over time.

00:22:49.720 --> 00:22:52.440
However, our business needs can
be a lot more changing, a

00:22:52.440 --> 00:22:56.860
lot more dynamic, be that for
strategic purposes, for HR

00:22:56.860 --> 00:23:00.110
reasons, many other reasons.

00:23:00.110 --> 00:23:03.810
To illustrate this, let me
give you a quick example.

00:23:03.810 --> 00:23:05.190
Let me tell you about
my colleague Ron.

00:23:05.190 --> 00:23:06.530
Now Ron's a marketing analyst.

00:23:06.530 --> 00:23:07.850
He's a great guy.

00:23:07.850 --> 00:23:09.640
I have to say that in
case he's listening.

00:23:09.640 --> 00:23:11.590
He's a great guy.

00:23:11.590 --> 00:23:14.380
And when we started a couple of
months ago, he came up to

00:23:14.380 --> 00:23:18.470
me and said, Duncan, why isn't
all of your traffic organized

00:23:18.470 --> 00:23:20.180
by ISBA regions?

00:23:20.180 --> 00:23:22.720
Ron, what the heck is
an ISBA region?

00:23:22.720 --> 00:23:25.050
I've never heard
of that before.

00:23:25.050 --> 00:23:27.340
So he explains to me it's a
non-overlapping television

00:23:27.340 --> 00:23:28.280
broadcasting region.

00:23:28.280 --> 00:23:32.040
And apparently, it's very
important in allowing us to

00:23:32.040 --> 00:23:35.990
assess the online impact of
our offline marketing.

00:23:35.990 --> 00:23:40.050
Now, if I wanted to query that
in the user interface, what

00:23:40.050 --> 00:23:44.440
I'd have to do is create an
advanced segment and a custom

00:23:44.440 --> 00:23:46.300
filter for every
single region.

00:23:46.300 --> 00:23:47.840
And then I'd have to query
every one of those

00:23:47.840 --> 00:23:51.500
individually every time
Ron wanted this data.

00:23:51.500 --> 00:23:53.240
So you may ask, why don't
we just stick

00:23:53.240 --> 00:23:54.470
another tag on the site?

00:23:54.470 --> 00:23:56.350
Well, we're trying to put down
the amount of data that we're

00:23:56.350 --> 00:23:59.300
sending backwards and forwards
to our mobile users.

00:23:59.300 --> 00:24:02.300
And if we just aggregated it
up to these regions that he

00:24:02.300 --> 00:24:04.110
wants, that might
change in time.

00:24:04.110 --> 00:24:07.200
And we're going to lose some
of the granularity that we

00:24:07.200 --> 00:24:09.420
really want.

00:24:09.420 --> 00:24:12.370
So now that we have BigQuery,
how do we deal with this?

00:24:12.370 --> 00:24:15.850
Well, I just say to Ron,
make me a lookup table.

00:24:15.850 --> 00:24:18.800
And he'll get Excel out, he'll
type in a load of values, and

00:24:18.800 --> 00:24:22.130
he'll make me a lookup table,
which I can then upload into

00:24:22.130 --> 00:24:23.850
BigQuery in CSV format.

00:24:23.850 --> 00:24:25.860
And we tried to be a little
forward-thinking here, so

00:24:25.860 --> 00:24:29.400
instead of just uploading all of
the lookup details for our

00:24:29.400 --> 00:24:32.460
ISBA regions, we'll just upload
all of our metadata,

00:24:32.460 --> 00:24:34.774
because we've got plenty of
space to play with, right?

00:24:37.330 --> 00:24:39.900
So once we've done that,
we need to query

00:24:39.900 --> 00:24:42.030
our Analytics data.

00:24:42.030 --> 00:24:44.900
So here we're using
a custom variable.

00:24:44.900 --> 00:24:47.550
And we're going to call that
location_level_2, because

00:24:47.550 --> 00:24:49.530
that's the level that
we want to look at.

00:24:49.530 --> 00:24:52.680
And we're just pulling out,
again, the session data and a

00:24:52.680 --> 00:24:54.990
little bit of aggregation
just relating to our

00:24:54.990 --> 00:24:55.900
pageviews and bounces.

00:24:55.900 --> 00:24:57.960
These are the metrics that we
can sum up with, so we can

00:24:57.960 --> 00:25:00.290
aggregate them at this stage.

00:25:00.290 --> 00:25:03.990
The next step, then, is to
aggregate our lookup table so

00:25:03.990 --> 00:25:06.140
that we're only pulling out
the data that we need.

00:25:06.140 --> 00:25:08.355
So again, we've got
location_level_2.

00:25:08.355 --> 00:25:10.950
But we're also taking
location_level_1, which is our

00:25:10.950 --> 00:25:13.130
TV regions that we're
looking at.

00:25:13.130 --> 00:25:15.840
We've also applied the filter,
so we're only getting back the

00:25:15.840 --> 00:25:18.640
data that we're really
interested in.

00:25:18.640 --> 00:25:21.430
Once we've got these two queries
together, we just do a

00:25:21.430 --> 00:25:22.450
simple JOIN.

00:25:22.450 --> 00:25:25.710
And you can see in red at the
bottom, we're JOINing on

00:25:25.710 --> 00:25:28.740
location_level_2 from both
tables and then pulling out

00:25:28.740 --> 00:25:31.970
the TV region from
our lookup table.

00:25:31.970 --> 00:25:35.280
And in blue, you can see that
it's only at this stage, the

00:25:35.280 --> 00:25:37.160
final stage, that we're actually
aggregating that.

00:25:40.350 --> 00:25:42.860
So if we just switch over
to BigQuery again,

00:25:42.860 --> 00:25:44.110
and we'll run that.

00:25:48.960 --> 00:25:53.560
Again, this is running through
millions of sessions.

00:25:53.560 --> 00:25:57.720
And it only takes 4
and 1/2 seconds.

00:25:57.720 --> 00:26:01.040
So if we switch back to our
presentation, you can see the

00:26:01.040 --> 00:26:02.440
results that we've
got back here.

00:26:02.440 --> 00:26:04.720
We've managed to pull back all
of our regions that we're

00:26:04.720 --> 00:26:06.580
interested in in one query.

00:26:06.580 --> 00:26:08.930
It was very quick,
very easy to run.

00:26:08.930 --> 00:26:12.930
And we've saved ourselves
a lot of time here.

00:26:12.930 --> 00:26:15.660
The great thing about this as
well is we can connect this to

00:26:15.660 --> 00:26:16.680
our BI tools.

00:26:16.680 --> 00:26:20.560
And as we're only aggregating at
the final point, our users

00:26:20.560 --> 00:26:23.560
can then use an interactive
dashboard and cut and slice

00:26:23.560 --> 00:26:25.190
this data as they want.

00:26:25.190 --> 00:26:26.440
And it will never be sampled.

00:26:30.260 --> 00:26:32.800
The final use case I'd like to
talk about actually brings the

00:26:32.800 --> 00:26:36.560
AdSense data and the Analytics
data together.

00:26:36.560 --> 00:26:38.380
Now for those of you who aren't
familiar with A/B

00:26:38.380 --> 00:26:41.570
testing, it's just the practice
of releasing two or

00:26:41.570 --> 00:26:44.690
more variants of a particular
development at the same time.

00:26:44.690 --> 00:26:47.460
And then we evaluate their
performance according to a

00:26:47.460 --> 00:26:50.010
particular metric, a
particular goal.

00:26:50.010 --> 00:26:52.130
This helps us to actually
improve our implementation

00:26:52.130 --> 00:26:54.550
incrementally.

00:26:54.550 --> 00:26:56.700
Now when we're doing that for
AdSense, we're not just

00:26:56.700 --> 00:26:59.810
interested in the metrics
that relate to AdSense.

00:26:59.810 --> 00:27:02.410
We're not just interested in
clickthrough rates or revenue

00:27:02.410 --> 00:27:03.890
or whatever else.

00:27:03.890 --> 00:27:06.950
We're interested in how these
ads actually impact on our

00:27:06.950 --> 00:27:10.160
overall user experience,
whether it impacts on a

00:27:10.160 --> 00:27:13.300
downstream conversion, for
example, or it affects user

00:27:13.300 --> 00:27:15.070
engagement.

00:27:15.070 --> 00:27:17.660
As a result, some of our
optimization metrics can be a

00:27:17.660 --> 00:27:19.060
little bit complicated.

00:27:19.060 --> 00:27:22.700
And they have to be derived
from various sources.

00:27:22.700 --> 00:27:24.770
Usually this means that we have
to go into the different

00:27:24.770 --> 00:27:27.290
user interfaces, query things
separately, and then put them

00:27:27.290 --> 00:27:28.910
together in Excel.

00:27:28.910 --> 00:27:29.640
It's a little bit long-winded.

00:27:29.640 --> 00:27:31.240
And I don't like doing that.

00:27:31.240 --> 00:27:33.087
I don't like doing anything
that I can't automate.

00:27:36.070 --> 00:27:39.370
Now that we have BigQuery,
we can just automate

00:27:39.370 --> 00:27:40.280
the heck out of it.

00:27:40.280 --> 00:27:41.660
It's great.

00:27:41.660 --> 00:27:44.080
So we'll just write a
quick query on our

00:27:44.080 --> 00:27:44.990
AdSense data here.

00:27:44.990 --> 00:27:48.060
You can see that we're using
custom_channel_name as our

00:27:48.060 --> 00:27:48.680
AdSense group.

00:27:48.680 --> 00:27:51.690
And we've just applied a little
tag onto all of our

00:27:51.690 --> 00:27:54.810
users in AdSense so that we
can identify them from the

00:27:54.810 --> 00:27:57.010
DailyCustomChannelReport.

00:27:57.010 --> 00:27:59.750
We've also done that in
Google Analytics.

00:27:59.750 --> 00:28:01.830
And we've used a custom variable
again this time.

00:28:04.800 --> 00:28:08.160
The final step then, we just
do a very simple query that

00:28:08.160 --> 00:28:13.580
JOINs together on those values
of our AdSense test groups.

00:28:13.580 --> 00:28:18.100
So if we just switch over again,
jump back into BigQuery

00:28:18.100 --> 00:28:24.880
and give that a run, how
long do you think

00:28:24.880 --> 00:28:26.400
it's going to take?

00:28:26.400 --> 00:28:27.450
5.7 seconds.

00:28:27.450 --> 00:28:29.450
That's brilliant.

00:28:29.450 --> 00:28:36.740
So if we load up the results
from that, now here we have

00:28:36.740 --> 00:28:38.110
our three test groups.

00:28:38.110 --> 00:28:41.450
And if I was to just look at the
AdSense metrics, I'd see

00:28:41.450 --> 00:28:44.010
that the click-through rate
for testGroup3 is slightly

00:28:44.010 --> 00:28:45.535
higher than the others.

00:28:45.535 --> 00:28:48.780
And I may stop there and
just pick this group.

00:28:48.780 --> 00:28:50.900
However, if we start to combine
our AdSense metrics

00:28:50.900 --> 00:28:53.840
with the Analytics metrics,
we can see that actually,

00:28:53.840 --> 00:28:55.870
testGroup2 has a higher
number of matched ad

00:28:55.870 --> 00:28:57.260
requests per visitor.

00:28:57.260 --> 00:28:59.900
That means that these guys are
actually being shown more ads,

00:28:59.900 --> 00:29:02.850
and they're possibly
more engaged.

00:29:02.850 --> 00:29:05.550
But it could be that actually,
these guys are just coming

00:29:05.550 --> 00:29:09.400
back more often, and in a
particular session, they're

00:29:09.400 --> 00:29:11.730
seeing less.

00:29:11.730 --> 00:29:14.490
So if we also look at our
purely Google Analytics

00:29:14.490 --> 00:29:17.840
metrics, our pageviews per
visit, we see that testGroup3

00:29:17.840 --> 00:29:20.290
also has a higher value of
pageviews per visit, which

00:29:20.290 --> 00:29:23.050
would suggest that these
guys are more engaged.

00:29:23.050 --> 00:29:26.310
And then, by being able to look
at the bigger picture and

00:29:26.310 --> 00:29:29.390
look at all of our metrics
together, we'd actually picked

00:29:29.390 --> 00:29:31.610
testGroup2, which would be
different from the group that

00:29:31.610 --> 00:29:32.860
we might have picked
otherwise.

00:29:35.150 --> 00:29:37.790
Now this makes it really easy to
get all of the information

00:29:37.790 --> 00:29:39.880
that we need in one place.

00:29:39.880 --> 00:29:42.930
And the super-awesome thing
about this is if we use the

00:29:42.930 --> 00:29:45.630
same Custom Dimension for every
single AdSense test that

00:29:45.630 --> 00:29:48.070
we do, we only ever need to
set it up once, and we can

00:29:48.070 --> 00:29:51.490
just sit back and be
lazy and be happy.

00:29:51.490 --> 00:29:51.860
OK.

00:29:51.860 --> 00:29:53.160
Thanks for listening,
everyone.

00:29:53.160 --> 00:29:54.340
I'll hand you back to Clancy.

00:29:54.340 --> 00:29:54.600
CLANCY CHILDS: Great.

00:29:54.600 --> 00:29:55.470
Thanks a lot, Duncan.

00:29:55.470 --> 00:29:56.410
I really appreciate that.

00:29:56.410 --> 00:29:59.700
[APPLAUSE]

00:29:59.700 --> 00:30:04.900
CLANCY CHILDS: So that shows us
the power of what this tool

00:30:04.900 --> 00:30:07.010
can do when put in the capable
hands of a data

00:30:07.010 --> 00:30:08.340
scientist like Duncan.

00:30:08.340 --> 00:30:09.690
And this was actually--

00:30:09.690 --> 00:30:11.740
he didn't have much time
to prepare for this.

00:30:11.740 --> 00:30:13.730
So it's amazing that just with
this short amount of time,

00:30:13.730 --> 00:30:16.510
he's able to start running
really interesting queries

00:30:16.510 --> 00:30:19.470
that can actually really help
optimize some of the things

00:30:19.470 --> 00:30:21.570
that they're working
on at Gumtree.

00:30:21.570 --> 00:30:24.070
So thank you very much
for showing us that.

00:30:24.070 --> 00:30:28.370
The next steps for everyone are
if you would like to get

00:30:28.370 --> 00:30:30.570
started with BigQuery and
you haven't already,

00:30:30.570 --> 00:30:33.080
bigquery.cloud.google.com.

00:30:33.080 --> 00:30:34.150
Set up an account.

00:30:34.150 --> 00:30:37.520
There's a lot of a public data
samples there already, so if

00:30:37.520 --> 00:30:40.450
you just want to start playing
with data in BigQuery, it's

00:30:40.450 --> 00:30:41.920
very easy to do.

00:30:41.920 --> 00:30:45.630
For Google Analytics and
BigQuery, please register on

00:30:45.630 --> 00:30:47.450
this form at this URL.

00:30:47.450 --> 00:30:50.650
Or if you want to come by the
Ad Sandbox on the second

00:30:50.650 --> 00:30:54.480
floor, we have this information
available as well,

00:30:54.480 --> 00:30:57.270
the URL and the one-sheeter.

00:30:57.270 --> 00:31:00.250
And again, we're launching this
in September for everyone

00:31:00.250 --> 00:31:02.700
in Google Analytics Premium.

00:31:02.700 --> 00:31:06.400
For the AdSense and BigQuery
integration that Louis

00:31:06.400 --> 00:31:08.630
demonstrated, the beta
is available now.

00:31:08.630 --> 00:31:12.100
And there's instructions at this
URL, where you can go and

00:31:12.100 --> 00:31:15.710
actually start accessing AdSense
data in BigQuery.

00:31:15.710 --> 00:31:17.730
So we're really excited
about this.

00:31:17.730 --> 00:31:20.360
This is really a step forward
for getting more granular data

00:31:20.360 --> 00:31:22.640
from both of these products
into the hands of data

00:31:22.640 --> 00:31:25.770
scientists who are using
the BigQuery tool.

00:31:25.770 --> 00:31:27.800
We're looking forward to see
all the really cool things

00:31:27.800 --> 00:31:29.000
that everybody's going
to come up with.

00:31:29.000 --> 00:31:31.100
And we look forward
to your feedback.

00:31:31.100 --> 00:31:31.940
Thank you very much.

00:31:31.940 --> 00:31:32.610
We really appreciate it.

00:31:32.610 --> 00:31:34.240
We'll open it up
for questions.

00:31:43.350 --> 00:31:44.150
DUNCAN MCKIE: Awesome.

00:31:44.150 --> 00:31:45.968
CLANCY CHILDS: It was
that explanatory?

00:31:45.968 --> 00:31:47.960
DUNCAN MCKIE: Cool.

00:31:47.960 --> 00:31:49.460
CLANCY CHILDS: OK.

00:31:49.460 --> 00:31:50.540
Or we could do the whole
thing again.

00:31:50.540 --> 00:31:50.720
OK.

00:31:50.720 --> 00:31:51.110
Yeah.

00:31:51.110 --> 00:31:53.280
Do you mind taking the
mike so people--

00:31:57.850 --> 00:32:00.010
AUDIENCE: I guess lots of us are
thinking sort of what data

00:32:00.010 --> 00:32:01.410
sources are next, then.

00:32:01.410 --> 00:32:05.140
Is there a schedule for them
or a priority for them?

00:32:05.140 --> 00:32:06.490
CLANCY CHILDS: You mean other
Google data sources?

00:32:06.490 --> 00:32:07.520
AUDIENCE: Mm-hmm.

00:32:07.520 --> 00:32:08.940
CLANCY CHILDS: We can only
really comment on the ones

00:32:08.940 --> 00:32:11.430
that we work on, on AdSense
and Analytics.

00:32:11.430 --> 00:32:15.000
But I think it's pretty clear
to see that BigQuery is

00:32:15.000 --> 00:32:19.690
Google's big data query and
analysis tool, so I think it's

00:32:19.690 --> 00:32:22.090
reasonable to assume that other
products will be looking

00:32:22.090 --> 00:32:24.770
forward to getting their data
in there to get it into the

00:32:24.770 --> 00:32:27.090
hands of data scientists.

00:32:27.090 --> 00:32:29.760
AUDIENCE: Are there any limits
to the size, the number of

00:32:29.760 --> 00:32:31.750
rows in the data sets?

00:32:31.750 --> 00:32:32.760
CLANCY CHILDS: In BigQuery?

00:32:32.760 --> 00:32:33.360
AUDIENCE: Yeah.

00:32:33.360 --> 00:32:33.950
CLANCY CHILDS: There
are some limits.

00:32:33.950 --> 00:32:35.090
They're very high.

00:32:35.090 --> 00:32:37.660
I don't have offhand
the numbers.

00:32:37.660 --> 00:32:40.960
I know that you can get things
like trillions of rows of data

00:32:40.960 --> 00:32:46.220
into tables, and that in some
cases, if you try to export a

00:32:46.220 --> 00:32:48.850
lot of data at once, you
might hit a limit.

00:32:48.850 --> 00:32:51.040
So sometimes you have to just
make sure that you're not

00:32:51.040 --> 00:32:55.960
doing a select star across
terabytes of data, which might

00:32:55.960 --> 00:32:58.200
not be able to output.

00:32:58.200 --> 00:33:03.510
But for specific questions on
BigQuery and the other things,

00:33:03.510 --> 00:33:06.170
the Cloud Sandbox on the second
floor might be able to

00:33:06.170 --> 00:33:07.160
give more detail.

00:33:07.160 --> 00:33:08.910
It's also all posted online.

00:33:08.910 --> 00:33:10.900
Sorry I don't have the
exact answer for you.

00:33:15.710 --> 00:33:16.010
Great.

00:33:16.010 --> 00:33:20.140
So again, these are the places
go to get more information.

00:33:20.140 --> 00:33:22.900
And if you do have a second,
there's a QR code in the back

00:33:22.900 --> 00:33:23.790
for rating the session.

00:33:23.790 --> 00:33:26.080
We'd always appreciate any
feedback you have about the

00:33:26.080 --> 00:33:28.500
session, so if you can
fill out there.

00:33:28.500 --> 00:33:31.430
And we'll be down in the Ad
Sandbox as well if you have

00:33:31.430 --> 00:33:33.260
any other questions you want
to ask us in person.

00:33:33.260 --> 00:33:34.440
Thank you very much
for your time.

00:33:34.440 --> 00:33:35.700
We really appreciate it.

00:33:35.700 --> 00:33:37.800
[APPLAUSE]

