WEBVTT
Kind: captions
Language: en

00:00:02.209 --> 00:00:04.500
COLT MCANLIS: If you've ever
painted a room or a house,

00:00:04.500 --> 00:00:07.220
you know that it takes a lot of
work to color in those walls,

00:00:07.220 --> 00:00:09.050
and if you need to
repaint it again,

00:00:09.050 --> 00:00:11.390
you've wasted a ton of work
doing it the first time.

00:00:11.390 --> 00:00:14.230
This same concept of wasting
effort to paint something

00:00:14.230 --> 00:00:16.120
can also attribute to
performance problems

00:00:16.120 --> 00:00:17.711
in your applications.

00:00:17.711 --> 00:00:19.710
My name is Colt McAnlis,
and at the intersection

00:00:19.710 --> 00:00:23.280
of performance and design lies
a common performance problem--

00:00:23.280 --> 00:00:24.212
overdraw.

00:00:24.212 --> 00:00:25.670
Overdraw is a term
used to describe

00:00:25.670 --> 00:00:27.750
how many times a
pixel on the screen

00:00:27.750 --> 00:00:29.700
has been redrawn
in a single frame.

00:00:29.700 --> 00:00:32.500
For example, if we have a
bunch of stacked UI cards,

00:00:32.500 --> 00:00:35.250
all the cards in the upper part
of the stack closer to the user

00:00:35.250 --> 00:00:38.074
hide large portions of the
cards hidden underneath,

00:00:38.074 --> 00:00:40.490
meaning that we'll need to
spend time drawing those cards,

00:00:40.490 --> 00:00:42.290
which are mostly invisible.

00:00:42.290 --> 00:00:44.310
This is a large problem
because each time we're

00:00:44.310 --> 00:00:46.930
rendering pixels that don't
contribute to the final scene,

00:00:46.930 --> 00:00:49.510
we're effectively
wasting GPU performance.

00:00:49.510 --> 00:00:51.810
And with modern layouts,
it's easy to fall into a trap

00:00:51.810 --> 00:00:53.450
where we're stacking
and layering

00:00:53.450 --> 00:00:55.525
views to give us
beautiful design,

00:00:55.525 --> 00:00:57.430
but also creating
this same problem.

00:00:57.430 --> 00:00:59.590
To maximize the performance
of your application,

00:00:59.590 --> 00:01:01.600
you'll want to
minimize overdraw.

00:01:01.600 --> 00:01:04.510
And thankfully, it's really easy
to see the impact of overdraw

00:01:04.510 --> 00:01:07.770
on your applications right
on the Android device.

00:01:07.770 --> 00:01:09.980
Simply go into Developer
Mode and then turn

00:01:09.980 --> 00:01:12.012
on Show GPU Overdraw flag.

00:01:12.012 --> 00:01:13.595
Now, don't be alarmed
while your phone

00:01:13.595 --> 00:01:16.580
turns into some sort of
weird visual awesomeness.

00:01:16.580 --> 00:01:17.305
This is normal.

00:01:17.305 --> 00:01:18.930
What's occurring is
that Android is now

00:01:18.930 --> 00:01:20.940
showing overdraw
amounts on your screen

00:01:20.940 --> 00:01:23.630
through tinting pixels
a different color.

00:01:23.630 --> 00:01:25.380
If you've only rendered
a pixel one time,

00:01:25.380 --> 00:01:28.540
you should see it in its
true color with no tint.

00:01:28.540 --> 00:01:31.790
However, as the overdraw
increases, so do the colors.

00:01:31.790 --> 00:01:34.330
1x overdraw, for
example, is tinted blue,

00:01:34.330 --> 00:01:37.270
meaning that you've now redrawn
this pixel one extra time.

00:01:37.270 --> 00:01:39.970
And of course, 2x,
3x, and 4x overdraw

00:01:39.970 --> 00:01:41.480
follow the same pattern.

00:01:41.480 --> 00:01:44.770
The goal of your application is
to reduce as much overdraw as

00:01:44.770 --> 00:01:47.860
possible, which will move you
from seeing lots of deep red

00:01:47.860 --> 00:01:50.180
down to seeing lots more blues.

00:01:50.180 --> 00:01:52.120
Now, while overdraw
will organically

00:01:52.120 --> 00:01:54.280
come from just how your
views overlap each other,

00:01:54.280 --> 00:01:56.420
a more common problem
for folks to be aware of

00:01:56.420 --> 00:01:59.280
is lots of unneeded
overlapping backgrounds,

00:01:59.280 --> 00:02:01.770
for example, having
an activity background

00:02:01.770 --> 00:02:03.960
which gets overdrawn
with a layout, which

00:02:03.960 --> 00:02:06.490
has a series of children
who all have backgrounds.

00:02:06.490 --> 00:02:08.750
Don't forget the text
boxes, and of course

00:02:08.750 --> 00:02:10.550
the titles, and
those backgrounds

00:02:10.550 --> 00:02:13.220
as well, and of course, there's
the avatar backgrounds and then

00:02:13.220 --> 00:02:15.220
the avatars themselves.

00:02:15.220 --> 00:02:18.304
You can quickly see how
this can get out of hand.

00:02:18.304 --> 00:02:20.720
Doing something as simple as
removing unneeded backgrounds

00:02:20.720 --> 00:02:24.140
can take your application from
having a horde of angry red

00:02:24.140 --> 00:02:27.680
to a calming sea of blue, which
is why you need to check out

00:02:27.680 --> 00:02:30.330
the rest of our Android
Performance Patterns content

00:02:30.330 --> 00:02:32.130
for other ways to
improve performance,

00:02:32.130 --> 00:02:34.730
and don't forget to join our
Google+ community for more

00:02:34.730 --> 00:02:36.330
excellent info as well.

00:02:36.330 --> 00:02:39.340
So keep calm, profile your
code, and always remember

00:02:39.340 --> 00:02:40.500
perf matters.

00:02:40.500 --> 00:02:42.050
[MUSIC PLAYING]

