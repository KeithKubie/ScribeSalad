WEBVTT
Kind: captions
Language: en

00:00:00.840 --> 00:00:04.540
Project six is the feed
reader testing project.

00:00:04.540 --> 00:00:08.510
And after the map I gotta say that this
project is a lot less intimidating.

00:00:08.510 --> 00:00:12.620
It's actually pretty straightforward and
fairly easy.

00:00:12.620 --> 00:00:16.129
There's a few little gotchas in
there that you gotta be careful of

00:00:16.129 --> 00:00:20.800
specifically with sort of
the asynchronous tests.

00:00:20.800 --> 00:00:24.160
But overall, I think this project is

00:00:24.160 --> 00:00:27.620
quite a bit easier than that because
you're really not starting from scratch.

00:00:27.620 --> 00:00:30.520
You're starting from a project
that's been handed to you

00:00:30.520 --> 00:00:35.290
that you need to write tests for so
then you can begin expanding on it more.

00:00:36.360 --> 00:00:41.730
And believe it or not, I would say
this is pretty common that you might

00:00:41.730 --> 00:00:46.720
get a piece of code or you're
working on a project and you someone

00:00:46.720 --> 00:00:51.390
hasn't put time to add tests to it and
you're asked to write tests for it.

00:00:52.620 --> 00:00:59.030
I know I'm pretty bad about
doing test-driven design myself.

00:00:59.030 --> 00:01:01.190
I always implement the thing and

00:01:01.190 --> 00:01:06.100
I'm like I should probably add
a test to check that in the future.

00:01:06.100 --> 00:01:08.180
When you should be writing
the test first and

00:01:08.180 --> 00:01:13.360
then implementing the tool or design or
whatever you're trying to do.

00:01:14.420 --> 00:01:15.480
But specifically for

00:01:15.480 --> 00:01:20.290
this project let's take a look at
what we're going to be given here.

00:01:20.290 --> 00:01:24.830
So we're going to be given
this Udacity feed site.

00:01:24.830 --> 00:01:31.430
Which is your standard RSS feed
with some articles from Udacity.

00:01:31.430 --> 00:01:34.080
So you can go in and
read these articles.

00:01:34.080 --> 00:01:35.410
It's actually pretty usable.

00:01:35.410 --> 00:01:39.010
It's got like a little awesome
pop-out side navigation.

00:01:39.010 --> 00:01:43.960
I mean, like I can follow his links and
it actually takes me to the blog.

00:01:43.960 --> 00:01:46.940
So it's a pretty usable site and
it actually works really well.

00:01:46.940 --> 00:01:51.790
But we need to actually add some tests
in here to make sure these things

00:01:51.790 --> 00:01:53.580
stay working well.

00:01:53.580 --> 00:01:55.760
When we want to add extra
functionality to it.

00:01:55.760 --> 00:01:59.300
And as you can see on the bottom
here there's sort of this big

00:01:59.300 --> 00:02:02.330
gray block section, and
this whole Jasmine symbol.

00:02:02.330 --> 00:02:07.180
And this is sort of our test
suite inspector section.

00:02:08.320 --> 00:02:13.670
So in this project we're going to be
using a testing suite called Jasmine.

00:02:13.670 --> 00:02:16.440
And it's really awesome,
I really like it.

00:02:16.440 --> 00:02:22.220
It makes writing tests really simple and
they're very readable way.

00:02:22.220 --> 00:02:26.810
Like writing the test almost feels like
writing a sentence, which is fantastic.

00:02:26.810 --> 00:02:29.910
And you can see here that
I'm not failing anything.

00:02:29.910 --> 00:02:33.790
So I know the tests I've written
are working correctly, awesome.

00:02:36.870 --> 00:02:41.310
But let's talk a little bit about sort
of what we're expecting for this project

00:02:41.310 --> 00:02:48.300
and what might be some gotchas in
the rubric that we can clear up now.

00:02:48.300 --> 00:02:52.730
So the first criteria we're looking for
is test coverage.

00:02:52.730 --> 00:02:55.980
We're asking that the required tests for
the project are all provided and

00:02:55.980 --> 00:03:00.200
are comprehensive enough to
adequately test the functionality.

00:03:00.200 --> 00:03:02.560
This part should be
pretty straightforward.

00:03:02.560 --> 00:03:05.880
Mike Wales went through a lot of
effort to make sure the comments were

00:03:05.880 --> 00:03:10.670
very clear on what a functionality
you were trying to solve and

00:03:10.670 --> 00:03:11.790
what we're looking for.

00:03:12.920 --> 00:03:17.680
And so you should definitely
read the comments and

00:03:17.680 --> 00:03:22.040
then work on what test
you want to create.

00:03:22.040 --> 00:03:25.860
The sort of gotcha part I think
is in the exceed specification.

00:03:25.860 --> 00:03:30.510
So if you're looking for your project
to really exceed what we're asking for.

00:03:30.510 --> 00:03:34.810
We ask that students add additional
test beyond those required

00:03:34.810 --> 00:03:38.660
that adequately tested additional
features within the application.

00:03:38.660 --> 00:03:42.305
Student should provide documentation
within the review describing these

00:03:42.305 --> 00:03:43.710
feature features.

00:03:43.710 --> 00:03:46.470
One of the things we said
right in here that I think

00:03:46.470 --> 00:03:49.740
students are a little like whoa
do I have to actually do this?

00:03:49.740 --> 00:03:54.210
because you can actually write tests for
future features you plan to add.

00:03:54.210 --> 00:03:56.910
So if there's something that you
don't like about RSS feed or

00:03:56.910 --> 00:04:00.040
you can think of a way to improve it or
maybe there's some sort

00:04:00.040 --> 00:04:03.160
of feed reader that you've seen
out there that you really like.

00:04:03.160 --> 00:04:06.650
And there's some functionality that
you think would be really cool to add,

00:04:07.750 --> 00:04:09.660
you can write a test for that.

00:04:09.660 --> 00:04:13.190
And then we get the question back
all the time is, okay well do I

00:04:13.190 --> 00:04:17.240
actually have to implement that or
do I just have to write the test for it?

00:04:17.240 --> 00:04:20.070
And we're saying you only have
to write the test for it, but

00:04:20.070 --> 00:04:25.880
in the readme please describe
what that feature would be.

00:04:25.880 --> 00:04:31.020
What the test is looking for and
explain in a a little bit of detail

00:04:31.020 --> 00:04:34.270
about how you might go
implementing that feature.

00:04:34.270 --> 00:04:36.530
You don't have to implement it though.

00:04:36.530 --> 00:04:40.870
But we would like you to have sort of
a clear idea of what that feature is,

00:04:40.870 --> 00:04:45.240
what kind of test you
need to test it out with.

00:04:45.240 --> 00:04:48.100
The next thing is test results.

00:04:48.100 --> 00:04:51.690
And that's all required tests for
the project to passed.

00:04:51.690 --> 00:04:55.010
This is pretty easy if you've written
all the tests excessively you should see

00:04:55.010 --> 00:04:59.020
that when you load the project
that that Jasmine area

00:04:59.020 --> 00:05:01.390
doesn't come up with any errors.

00:05:01.390 --> 00:05:04.760
It's all going to be green, it's
going to say that all its specs passed.

00:05:06.050 --> 00:05:09.070
That should be a pretty good indicator
that you're on the right track there.

00:05:10.200 --> 00:05:14.520
As far as the exceeding
specifications for that section.

00:05:14.520 --> 00:05:19.080
If student adds additional tests,
these tests are allowed to fail

00:05:19.080 --> 00:05:21.940
as they may be testing for future
features that have not been developed.

00:05:21.940 --> 00:05:26.120
So that goes back to,
do I actually have to create these?

00:05:26.120 --> 00:05:27.050
No you don't.

00:05:27.050 --> 00:05:30.550
It's okay if those ones fail as well
because these aren't features that

00:05:30.550 --> 00:05:31.350
you've implemented yet.

00:05:33.770 --> 00:05:36.920
The rest is pretty straightforward,
I mean code quality.

00:05:36.920 --> 00:05:41.920
I think at this point you guys who have
read through the style guide plenty of

00:05:41.920 --> 00:05:46.770
times or are already writing
code that's decently styled.

00:05:46.770 --> 00:05:47.980
Comments right,

00:05:47.980 --> 00:05:51.440
should be pretty straightforward
make sure you do comment your code.

00:05:51.440 --> 00:05:54.810
And make sure to add comments if
you're doing anything really strange.

00:05:56.330 --> 00:05:59.810
And then make sure to include
a Read Me with this project.

00:05:59.810 --> 00:06:02.140
Especially if you're
looking to exceed and

00:06:02.140 --> 00:06:03.870
you need to explain
those future features.

00:06:05.590 --> 00:06:10.850
So one thing I always like to do
when demoing this project is kind

00:06:10.850 --> 00:06:16.910
of show you how you can test to make
sure your specs are actually working.

00:06:18.060 --> 00:06:22.290
So it's always nice when you
write a spec and is passing.

00:06:22.290 --> 00:06:26.510
So it's really cool when your page looks
like this and everything is passing.

00:06:26.510 --> 00:06:31.760
But you might be asking yourself
did what I do you actually work.

00:06:31.760 --> 00:06:36.300
So an easy way that has that,
pop up in our terminal here and

00:06:36.300 --> 00:06:42.010
open up our project,
is to break the project itself.

00:06:42.010 --> 00:06:48.860
So if we look inside our [INAUDIBLE]
we

00:06:48.860 --> 00:06:54.480
should see that we have a test
here that says that all the feeds

00:06:54.480 --> 00:06:58.700
should be defined and all of the in
feeds.length should be zero.

00:07:00.030 --> 00:07:02.960
In the test, what we're looking for

00:07:02.960 --> 00:07:06.440
is that all our feeds are to be defined
and all feeds might possibly zero.

00:07:06.440 --> 00:07:09.130
So let's figure out what all feeds are.

00:07:09.130 --> 00:07:12.000
So if we look in at app.js file

00:07:12.000 --> 00:07:15.880
will see that there's this variable
to defined called all feeds.

00:07:17.450 --> 00:07:21.986
And according to our test spec we
are saying that this should be defined.

00:07:21.986 --> 00:07:27.780
So let's just delete this and save and

00:07:27.780 --> 00:07:32.330
go back to our tabs here and
refresh this to see what happens.

00:07:32.330 --> 00:07:34.390
Gosh, so many failures.

00:07:34.390 --> 00:07:40.400
But specifically we see that reference
error, all feeds is not defined.

00:07:40.400 --> 00:07:44.520
So we can see that that is
breaking successfully and

00:07:44.520 --> 00:07:50.450
we can see that right when we put it
back That that test is working properly.

00:07:50.450 --> 00:07:53.390
It detected correctly that
allFeeds wasn't defined.

00:07:54.750 --> 00:07:58.290
It also says that allFeeds
length shouldn't be zero.

00:07:58.290 --> 00:08:01.320
So if we go in and have it defined but

00:08:01.320 --> 00:08:05.330
have nothing it it,
we should see a bunch more failures.

00:08:05.330 --> 00:08:06.650
And we can see that, right?

00:08:06.650 --> 00:08:09.750
Expected zero not to be zero.

00:08:09.750 --> 00:08:11.230
Now we can see that right.

00:08:11.230 --> 00:08:15.510
That's part of our RSS feeds
are defined testing suite.

00:08:17.760 --> 00:08:20.670
So let's go back and
fix that and we can se.

00:08:20.670 --> 00:08:23.830
Cool, that's sort of being tracked or
that is being checked correctly.

00:08:25.030 --> 00:08:28.130
So when you're writing your tests
it's good to kind of go through and

00:08:28.130 --> 00:08:31.100
explore the app.js code a little bit.

00:08:31.100 --> 00:08:35.460
And understand what the code is doing.

00:08:35.460 --> 00:08:38.720
You can also write,
explore the actual app and

00:08:38.720 --> 00:08:41.250
use the developer tools
to look at these files.

00:08:41.250 --> 00:08:45.914
But I like looking at it and Sublime
catches this because really pretty.

00:08:45.914 --> 00:08:49.520
[LAUGH] The same thing with the HTML,
I mean,

00:08:49.520 --> 00:08:52.390
there's going to be a few
tests that you have to do to

00:08:52.390 --> 00:08:57.000
look at specific HTML elements and
if certain classes are defined.

00:08:57.000 --> 00:09:03.880
So be sure to go through the HTML and
make sure that.

00:09:03.880 --> 00:09:07.930
You understand a little bit about
what the cite is doing that way you

00:09:07.930 --> 00:09:10.240
can properly test it.

00:09:10.240 --> 00:09:13.770
Right, it does no good to not,
either have a clear idea of what you're

00:09:13.770 --> 00:09:17.010
implementing or
have a clear idea of what's implemented.

00:09:17.010 --> 00:09:20.650
And then start writing tests
you need to start somewhere and

00:09:20.650 --> 00:09:23.710
it's always good to kind of understand
the app that you've been given

00:09:23.710 --> 00:09:25.330
before you get writing tests for.

