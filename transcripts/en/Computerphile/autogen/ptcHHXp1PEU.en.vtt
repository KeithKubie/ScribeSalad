WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:01.869
In the previous video we looked at our guess the

00:00:01.869 --> 00:00:07.589
Philosophy of writing software for giri's and I thought in this video we'd actually talk about how the programs are internally structured

00:00:07.589 --> 00:00:13.048
It doesn't matter what system you're using whether it's a Mac whether it's Windows whether you're writing for a risk us an Atari and Amiga

00:00:13.330 --> 00:00:19.350
x11 it they all seem to have a similar structure one of the things you find with GUI software is that

00:00:19.350 --> 00:00:19.900
 

00:00:19.900 --> 00:00:21.640
one GUI program is

00:00:21.640 --> 00:00:27.150
Very similar to the next GUI program or the previous one you wrote and so it lends itself to having sort of libraries or frameworks

00:00:27.150 --> 00:00:28.119
 

00:00:28.119 --> 00:00:31.949
Particularly object-oriented frameworks that you can use to write the software

00:00:31.949 --> 00:00:35.639
So these days you if you go and write say softer on a Mac you'd perhaps use cocoa

00:00:35.890 --> 00:00:38.189
To do it and you wouldn't necessarily see this structure

00:00:38.189 --> 00:00:38.920
 

00:00:38.920 --> 00:00:42.719
Internally or if you write it in Java you would use the Java frameworks to do it

00:00:43.120 --> 00:00:44.469
but under the hood

00:00:44.469 --> 00:00:48.719
The same things there. I'm gonna be looking at under the hood what's going on and how the operating system is getting the

00:00:48.719 --> 00:00:49.690
 

00:00:49.690 --> 00:00:52.559
Interaction from the user into the program so you can write what's happening

00:00:52.559 --> 00:00:54.559
 

00:00:55.030 --> 00:00:59.190
So when we talk to the previously one of the things we said is that with a GUI program

00:00:59.190 --> 00:00:59.800
 

00:00:59.800 --> 00:01:04.019
The program is no longer in control of how things happen to the program

00:01:04.019 --> 00:01:08.368
They can't say at this point how we need to enter this piece of text. It's very much up to the user

00:01:08.369 --> 00:01:12.569
That's driving you the users clicking on things. They're moving windows around they're in control

00:01:12.570 --> 00:01:16.650
And so you need to structure your program to respond to those

00:01:17.380 --> 00:01:19.380
events coming in from the user and then

00:01:20.049 --> 00:01:25.649
process them and do the right thing based on what that happens and the way that most QE programs are written is

00:01:25.930 --> 00:01:28.470
they have what's called an event loop at the

00:01:28.720 --> 00:01:33.389
Center of them and basically in that event loop the computer will be sitting in a loop because it's a loop

00:01:33.549 --> 00:01:41.309
Doing the same thing after again and you basically get a call to an operating system supply function and let's say it's called wait

00:01:41.740 --> 00:01:45.899
Next event. That's what was called on the original Mac on the Atari

00:01:45.899 --> 00:01:51.539
ST was called event message or event multi depending on what sort of side you wanted on viscose. It's called Wimpole

00:01:52.090 --> 00:01:57.869
Windows does something slightly better something slightly neater with some of them probably say but it's the same sort of thing

00:01:57.869 --> 00:01:59.159
We'll look at that in a second

00:01:59.159 --> 00:01:59.430
well

00:01:59.430 --> 00:02:03.540
so what the operating system does or what the toolbox that provides the user interface does is

00:02:03.969 --> 00:02:04.829
It's sitting there

00:02:04.829 --> 00:02:10.469
It's monitoring the input coming from the user whether it's from the keyboard whether that's from the mouse being moved or them

00:02:10.539 --> 00:02:13.628
It's been clicked and so on and it assembles those

00:02:14.359 --> 00:02:19.479
Inputs into a series of events. So if I press a key on the keyboard, we will get two events for that

00:02:19.480 --> 00:02:23.109
We'll get an event when the key goes down and we'll get an event when the key

00:02:23.510 --> 00:02:28.840
Comes up as well and those events go through the operating system as from the hardware

00:02:29.689 --> 00:02:31.689
up for the operation went into the

00:02:32.030 --> 00:02:37.389
user interface that part of the operating system and then they get passed to our program as

00:02:38.000 --> 00:02:42.939
Events. So when I press a key on the keyboard eventually when next event will return saying hey

00:02:42.939 --> 00:02:48.729
There's a key down event from the user and then I would have to write code here that says

00:02:49.280 --> 00:02:50.450
there's a

00:02:50.450 --> 00:02:51.739
key down event

00:02:51.739 --> 00:02:53.299
Do the right thing?

00:02:53.299 --> 00:02:54.049
in that

00:02:54.049 --> 00:02:58.629
Situation and then the village when you get the key up event when now let go of the key and you do the right thing

00:02:59.030 --> 00:03:04.869
there in the same way if I move the mouse or press a button we'll get an event or a message telling us that the

00:03:04.870 --> 00:03:05.900
mouse has moved and that

00:03:05.900 --> 00:03:10.840
the mouse button has been clicked and we'll get a mouse down event and a mouse up event as the buttons pressed and

00:03:10.909 --> 00:03:12.969
Comes back up and that event will tell us

00:03:13.340 --> 00:03:14.569
What the button was?

00:03:14.569 --> 00:03:19.448
The location where it was pressed and so on in the same way the keyboard event would tell us what key was pressed

00:03:19.760 --> 00:03:22.060
And what's happening so our program was sitting there

00:03:22.819 --> 00:03:24.819
Waiting for the next event

00:03:24.940 --> 00:03:29.979
So what you'll generally end up with is this will often return some sort of structure with the data in

00:03:30.229 --> 00:03:37.149
And then you'll have a big switch statement or series of if statements to switch on the event type and this is sort of pseudocode

00:03:37.310 --> 00:03:43.389
and then we switch on the type and if it's a keydown event, we do one thing if it's a

00:03:44.030 --> 00:03:48.069
Key event, we do another and so on and then we can handle those things

00:03:48.560 --> 00:03:53.769
These aren't the only events you get the UI toolkit will create lots of other events that you can do to do things

00:03:53.769 --> 00:03:57.369
So for example if we've got windows on our system

00:03:57.370 --> 00:04:04.000
Is there a more generic term for these things than windows just because windows is windows and no they are called windows

00:04:04.000 --> 00:04:09.939
I've not seen them referred to as anything else if we click on the window bar to move it around the screen

00:04:10.159 --> 00:04:15.008
Then we don't get a mouse down event there and have to track the window being moved around

00:04:15.229 --> 00:04:18.249
And they're getting a mouse of what the operating is

00:04:18.250 --> 00:04:22.089
What the UI toolkit will do is oK you've clicked on the title bar

00:04:22.090 --> 00:04:24.519
You've moved the window around I'll send you an event

00:04:24.560 --> 00:04:30.940
Once you finish dragging it to say the window has been moved to this position in the same way if I have another window

00:04:31.370 --> 00:04:37.810
Overlapping it like that and I then move that one out of the way suddenly this part of the window here

00:04:38.270 --> 00:04:44.319
Becomes revealed and I have to draw that part of the screen again or the operation has to make sure that part of the screen

00:04:44.660 --> 00:04:48.609
Gets drawn again, and so we can end up with lots of events coming from windows

00:04:48.610 --> 00:04:54.490
But they're constructed by the UI toolkit based in what's happening. So it may have a case for example that

00:04:55.070 --> 00:05:01.449
The window has moved or in my other case that the window needs to be redrawn

00:05:01.449 --> 00:05:04.209
and so what happens it's a program basically sits in

00:05:04.789 --> 00:05:10.119
This big loop and we do that Wow quit isn't true

00:05:10.130 --> 00:05:12.339
So basically we have some sort of things says, okay

00:05:12.340 --> 00:05:17.049
The programs finish that we get out and we set that to be true then we'll stop this loop, but we sit in this loop

00:05:17.659 --> 00:05:19.659
Continually going there waiting for an event

00:05:19.819 --> 00:05:21.349
If there's not an event

00:05:21.349 --> 00:05:24.699
Then this will just block the system won't let us continue

00:05:24.889 --> 00:05:27.429
Until there is an event there on the other hand if there's lots of events

00:05:27.650 --> 00:05:34.630
Will get them through one by one and we'll process them to update things based on what the users doing based on what's happening

00:05:34.630 --> 00:05:37.269
We've talked about the keydown event the key up

00:05:37.669 --> 00:05:41.769
Mouse-click events would probably wouldn't get worn when the mouse is moved

00:05:41.770 --> 00:05:43.389
If you think about as the mouse is being moved

00:05:43.389 --> 00:05:46.899
You've got lots and lots of events most of which you're not interested in

00:05:46.900 --> 00:05:47.780
you're probably only

00:05:47.780 --> 00:05:48.949
interested when a

00:05:48.949 --> 00:05:55.389
button is pressed or so on the only times pass that's different is if you're dragging something around the screen and in that case you

00:05:55.389 --> 00:05:57.389
will often say to you listen, well, I'm

00:05:57.560 --> 00:06:02.709
Dragging something here. Tell me about those events the rest of the time you're not interested in what's happening?

00:06:03.229 --> 00:06:09.129
At those points so you probably don't get mousemove events, but you can register them and you can also do clever things

00:06:09.130 --> 00:06:13.719
like I say actually tell me what it moves into this area or moves out of this area so that you don't get

00:06:13.849 --> 00:06:15.849
Multiple ones, but you can sort of track

00:06:16.009 --> 00:06:20.919
What's going through at that time? So our program is based around a

00:06:21.650 --> 00:06:25.359
Series of events coming in that represent the input coming from the user

00:06:26.330 --> 00:06:30.130
But we still have a problem. We still have to sort of direct these things to the right place

00:06:30.130 --> 00:06:32.649
I mean it's obvious if we've got sort of a window moved event

00:06:33.090 --> 00:06:37.889
We know that we're coming from that window and we know it's moved so we know what's it's being dealing with

00:06:38.320 --> 00:06:45.480
Likewise if we get a mouse-click event, it's pretty obvious where it's going we can find out exactly what windows underneath there

00:06:45.480 --> 00:06:48.659
But for something like a key down event, it's a bit bit more nebulous

00:06:49.630 --> 00:06:52.859
We have to have some sort of idea of there being a current window

00:06:53.560 --> 00:06:55.270
Which would then deal with it?

00:06:55.270 --> 00:07:01.109
But that may not be the right place for it to go. So for example, you may have a text box, but then someone presses

00:07:01.840 --> 00:07:02.669
ctrl Q

00:07:02.669 --> 00:07:08.728
Which means quit the program and so actually if the text box dealt with that then where you want on the text box quitting

00:07:09.070 --> 00:07:10.320
So it probably won't do it

00:07:10.320 --> 00:07:13.320
You want them to enter ctrl Q into the text box as data?

00:07:13.450 --> 00:07:16.739
So you need to have it passed back up to the rest of the program?

00:07:16.740 --> 00:07:21.329
You need to sort of work out where you want this to vent to be deal with them in some systems

00:07:21.330 --> 00:07:25.859
You have to program that into the logic of your code in others. You can sort of

00:07:26.740 --> 00:07:30.479
Direct where you want things to go so Windows actually made a nice optimization

00:07:30.790 --> 00:07:34.559
they instead of having this sort of way next event loop and then you

00:07:34.930 --> 00:07:40.560
Do the tests based on what was returned you have a similar structure? So you still say while quit?

00:07:41.289 --> 00:07:44.729
equals false and then inside that you have

00:07:45.250 --> 00:07:51.059
Your loop which says pink message so you have a look to see if there's something in there and that returns the event

00:07:51.190 --> 00:07:57.809
Windows causing messages rather than the events because you get a message from the operating system when the event happens it makes sense of things

00:07:57.810 --> 00:08:02.190
And then you run another function on it, which translates it slightly

00:08:02.410 --> 00:08:06.059
So you want the Translate message function and then you run?

00:08:06.700 --> 00:08:09.299
another function called dispatch

00:08:09.820 --> 00:08:13.469
Message and that becomes your main loop of a window

00:08:13.470 --> 00:08:15.210
So even if you look at most Windows programs

00:08:15.210 --> 00:08:18.299
They will have something like that there it may be hidden inside the dotnet framework

00:08:18.400 --> 00:08:25.289
It may be hidden inside MFC whatever you're using to write your program, but somewhere inside there you're going to get something like that

00:08:25.810 --> 00:08:30.780
That against so how's Windows handling it? Well, the same thing is happening. But what Windows did

00:08:31.719 --> 00:08:36.179
And this goes back way is when you create a window in Windows

00:08:36.180 --> 00:08:40.680
I'm gonna use an Atari window as an example here when you do on a Mac or on an Atari on risk-off

00:08:40.680 --> 00:08:43.770
You just create a general window and you tell it what you wanted to look like

00:08:44.590 --> 00:08:50.949
with windows you actually associate a function with its associated class with it and that has a function that

00:08:51.470 --> 00:08:53.589
handles messages with it

00:08:53.590 --> 00:08:58.420
And so what windows can do is when a message comes in it can direct it to the specific window

00:08:58.700 --> 00:09:03.309
Because it knows what function to call so you'll probably watch he doesn't have a big switch down

00:09:03.310 --> 00:09:06.760
It has lots of functions which are then bound to the windows that you want them to

00:09:07.820 --> 00:09:09.020
handle

00:09:09.020 --> 00:09:12.309
So that's basically how you write a GUI pro you

00:09:12.650 --> 00:09:17.920
Your event loop your message handling loop at the center of things and then as the user interacts with it

00:09:18.140 --> 00:09:21.430
you have to handle the messages the events that come in and

00:09:22.160 --> 00:09:24.160
Update your program state now

00:09:24.160 --> 00:09:29.860
There's two things that immediately jump to be obvious here you want this code that handles this thing to be quick?

00:09:29.960 --> 00:09:32.470
Because if it takes a long time to process that message

00:09:33.530 --> 00:09:37.089
There'll be a long time before the next message is processed

00:09:37.090 --> 00:09:41.949
So if you press a key and it's a takes for 40 seconds to handle that key being pressed

00:09:42.260 --> 00:09:46.749
It'll be 40 seconds before the next key would then appear on the screen?

00:09:46.750 --> 00:09:50.830
So you often found that you had to write your programs in a way that they do some

00:09:50.960 --> 00:09:54.699
Processing and then go back into the event loop and then carry on will do a bit more

00:09:54.800 --> 00:09:58.329
processing and do a bit more the event loop so they still appeared to

00:09:58.850 --> 00:10:03.819
Function otherwise you often get that effect where the GUI froze while it is impressing and then came back to life

00:10:03.820 --> 00:10:08.950
Which was not from to use as a program. So you had to basically have this happening all the time

00:10:08.950 --> 00:10:13.300
The other thing you can do is push things off into another thread and have them running at the same time

00:10:13.300 --> 00:10:16.869
But again that creates its own interesting issues for writing software

00:10:16.940 --> 00:10:21.820
But because we're dealing with Windows on the screen, we get some interesting things that we have to deal with

00:10:21.820 --> 00:10:25.150
So let's create some windows. In fact, let's just clear the desktop and

00:10:26.720 --> 00:10:28.550
Go to the clean one

00:10:28.550 --> 00:10:33.819
so let's say we're doing a bit of programming and we've got a text editor open there with some text and

00:10:33.890 --> 00:10:37.989
We decide you want to check mail. So we will now fidonet client to go and get the mail

00:10:38.660 --> 00:10:42.279
We need to open some files and then we decide we want to watch a video on

00:10:42.860 --> 00:10:47.469
YouTube so we've got lots of windows open and as we've seen each of these are separate programs

00:10:47.470 --> 00:10:49.000
So there's an event loop for this program

00:10:49.000 --> 00:10:49.990
Which is handling the event

00:10:49.990 --> 00:10:55.659
coming from there is an event loop for this one is an event loop for this one this event loop for our browser handling the

00:10:55.660 --> 00:10:58.149
Events all the messages that are coming for that

00:10:58.339 --> 00:11:01.599
But as well getting the events from the user and we can say well, okay

00:11:01.600 --> 00:11:06.339
This windows at the top say so the events will come to this one and then we go on that one and that one becomes

00:11:06.339 --> 00:11:12.879
on the top and so on the events go to that one as well as handling the events from the user as

00:11:13.580 --> 00:11:15.580
These windows are updated

00:11:16.040 --> 00:11:21.010
They can create events that mean that the other programs have to do things now originally

00:11:21.010 --> 00:11:25.749
Obviously a lot of the graphical user interface operate systems matthos Atari O's windows

00:11:26.959 --> 00:11:29.829
viscose and so on and you allowed one program to run it once

00:11:30.589 --> 00:11:35.679
You still have the same thing because you had desk accessories and things which were effectively separate programs that could do these things

00:11:35.810 --> 00:11:40.869
so for example say I am watching the video on YouTube and I bring my

00:11:41.300 --> 00:11:47.979
Text editor to the top because I want to carry on writing it while watching the video. I've now changed the position of that

00:11:48.290 --> 00:11:49.630
It's now the current window

00:11:49.630 --> 00:11:53.979
So I need to be told that this is now the current window so that I know where things are going

00:11:53.980 --> 00:11:55.980
They may have more than one text editing window

00:11:56.570 --> 00:11:59.890
Open but also as I brought it to the front

00:12:00.170 --> 00:12:06.219
I've revealed parts of the window that were previously covered up by the other windows

00:12:06.220 --> 00:12:12.520
And so I need to ensure that those parts of the window are redrawn now. There's various ways

00:12:12.520 --> 00:12:15.789
you can do it modern operating systems do lots of things to try and

00:12:16.130 --> 00:12:19.899
Speed things up because they have the benefit of more memory and so they cache things

00:12:20.480 --> 00:12:25.120
And they'll often have off-screen areas where they can each do all the contents of the window and it's stored

00:12:25.120 --> 00:12:27.120
So the operating system can redraw it

00:12:27.440 --> 00:12:31.329
automatically, but originally when you did this you would get a message from

00:12:32.149 --> 00:12:33.529
your

00:12:33.529 --> 00:12:36.398
Operating system saying you need to redraw this window

00:12:36.399 --> 00:12:41.679
And so it tells you that you need to redraw the area here or to speed things up

00:12:41.680 --> 00:12:43.339
It would tell you you need to redo all that bit

00:12:43.339 --> 00:12:48.069
You need to redraw this bit and you need to redraw this bit down here. So when you've got a message saying

00:12:48.770 --> 00:12:50.420
redraw the window

00:12:50.420 --> 00:12:57.130
You wouldn't just get a rectangular area to draw you may get several separate rectangular areas. So you need to work out

00:12:57.130 --> 00:13:02.859
Okay, and if you redraw what's in that bit and that bit and that bit now you could if you were a lazy programmer

00:13:03.460 --> 00:13:04.700
redraw everything

00:13:04.700 --> 00:13:07.599
Every time you got that message and just clip to the areas

00:13:07.600 --> 00:13:12.219
But the problem with that is that the computer that would take a while to draw that even today drawing

00:13:12.220 --> 00:13:15.820
Lots of things is a complicated thing can still take some time to do

00:13:15.820 --> 00:13:17.890
So what you actually try ended up how to do is work out

00:13:17.890 --> 00:13:21.789
Well, what bits are being revealed here and redraw that and so on

00:13:22.610 --> 00:13:26.020
But you could sometimes get those things even if you weren't on top

00:13:26.020 --> 00:13:30.639
So for example if I'm like that and I move this window in the right way

00:13:30.640 --> 00:13:35.049
I can end up revealing a section here and another section down here that I have to redraw

00:13:35.360 --> 00:13:37.959
So the events come not just from the user interaction

00:13:37.970 --> 00:13:43.839
But also from the interactions of the program with itself or with the other things every time you move a window

00:13:44.149 --> 00:13:46.070
the operating system has to

00:13:46.070 --> 00:13:51.279
Deal with that and tell you that you need to redraw parts of it and so on and tell you that the windows moved

00:13:51.279 --> 00:13:56.559
So Windows Aero, it's got see-through bit. Yeah, so who's peaceful step?

00:13:57.230 --> 00:13:59.560
Well, this is the thing and this is everything's Mac OSX

00:14:00.170 --> 00:14:05.680
Introduced this Windows Aero in Windows Vista and so on and I think way them probably just something similar as well. I'm not too sure

00:14:06.680 --> 00:14:10.539
What they do is they say oK, you've got lots of windows on screen

00:14:11.870 --> 00:14:15.520
And they're overlapping but what will actually do is will draw all of them

00:14:16.339 --> 00:14:23.799
Off screen so that they don't overlap and you might be can zoom out the other camera and so we've got them off screen

00:14:23.990 --> 00:14:26.950
Like that and what we actually do is we say, okay

00:14:27.200 --> 00:14:30.429
We'll draw them all so they're completely uncovered as separate blocks of memory

00:14:30.430 --> 00:14:32.120
And then we'll make a copy of that

00:14:32.120 --> 00:14:37.419
And copy there and some nice visual effects going to see that properly happening and then we'll make a copy of this

00:14:37.490 --> 00:14:39.040
And put it on the screen here

00:14:39.040 --> 00:14:42.279
I'll make a copy of this and put it on the screen here and a copy of that because we're copying

00:14:43.010 --> 00:14:45.189
Pre-existing things we can do our four channels we can do

00:14:45.410 --> 00:14:49.810
Transparency and we can make it all look pretty and you can have wobbly windows if you've got a weird gnome desktop

00:14:50.089 --> 00:14:54.519
It's interesting depending on the operating system. You're using Windows can be more or less

00:14:55.520 --> 00:14:57.050
intelligent

00:14:57.050 --> 00:14:59.050
Generic windows not the operating system

00:14:59.420 --> 00:15:06.130
So for example on the Atari system, and I think on risk was to remember brightly and it was at the programmers course

00:15:07.310 --> 00:15:12.789
The window basically was a container and that was it. You had a container than you drew in it

00:15:13.550 --> 00:15:20.000
On a Mac on Windows Windows can actually contain other windows and they can contain other windows so you can sort of build

00:15:20.190 --> 00:15:23.899
Things up and so actually all the controls you get buttons text boxes. They're actually

00:15:24.449 --> 00:15:28.009
Specialized windows that you can then combine together to form

00:15:28.680 --> 00:15:29.940
a whole

00:15:29.940 --> 00:15:33.979
That is a window and so on and you can specify whether they have title bars or not

00:15:33.980 --> 00:15:38.029
whether they have scroll bars and things, of course, the interesting thing about redrawing things is

00:15:38.670 --> 00:15:40.729
It's simple if you have to redraw

00:15:41.339 --> 00:15:47.869
an area here because that's Windows come on top of that window like that, but things get

00:15:48.570 --> 00:15:50.040
interesting

00:15:50.040 --> 00:15:52.070
If you scroll around the window

00:15:53.610 --> 00:15:57.560
You perhaps don't want to redraw everything because that will take time I mean

00:15:58.110 --> 00:15:59.370
When when?

00:15:59.370 --> 00:16:05.389
Gooeys are first being invented. We had computers that probably had an eight megahertz CPU that we're doing these things if that

00:16:05.940 --> 00:16:08.779
Went like the touristy or the original Mac these days

00:16:08.779 --> 00:16:13.009
They're much more powerful in looking about sort of five hundred times that speed four gigahertz

00:16:13.139 --> 00:16:17.029
sort of roughly three four gigahertz as a Russell speed, but even so

00:16:17.579 --> 00:16:19.849
What we're drawing on them is now a more complicated

00:16:19.850 --> 00:16:24.740
I sort of it used to be a one bit window, but now we have a sort of

00:16:25.649 --> 00:16:30.078
24-bit color with alpha Channel lots of graphics and so on it

00:16:30.420 --> 00:16:34.699
and so it's a lot more complicated or doing the amount of data that needs to be correctly for that is

00:16:35.370 --> 00:16:42.529
Much more times that we've got a high-resolution displays rather than 640 by 400 and so on so yes, the computers got faster

00:16:42.529 --> 00:16:49.729
But so is the amount of data and also what we're trying to draw this more complicated drawing a bit of text relatively straightforward

00:16:50.250 --> 00:16:52.250
drawing

00:16:52.260 --> 00:16:58.309
a nice web page and so on becomes more complicated and so you still have the same problems is how do we

00:16:58.740 --> 00:17:02.089
Redraw the screen quickly when we scroll through what's on there?

00:17:02.130 --> 00:17:03.809
and so you have to sort of

00:17:03.809 --> 00:17:08.089
Work out what you want to do and sort of do things and we'll have a look at that in a later one

00:17:09.030 --> 00:17:13.249
now I've got the token so I can lay the value in add the valley from emerged or into it and

00:17:13.319 --> 00:17:15.949
Store it back and hand the target and now I've got the token again

00:17:15.949 --> 00:17:22.159
I can load something into it into my register add something onto it back and pass the token on and I've got it

00:17:22.160 --> 00:17:25.069
So I can load the value in add the value from a register story back

