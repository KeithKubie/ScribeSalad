WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So, we can define a recurrence relation for this particular tree generation process

00:00:04.000 --> 00:00:08.000
or graft generation process that matches the recursive structure of the generating routine.

00:00:08.000 --> 00:00:11.000
We have a graph with 1 node, it's going to have 0 edges,

00:00:11.000 --> 00:00:13.000
by the way that this generation process happens.

00:00:13.000 --> 00:00:15.000
If we have a graph with n nodes, what is it going to do?

00:00:15.000 --> 00:00:19.000
It's going to call the recursive generation process, with n/2,

00:00:19.000 --> 00:00:21.000
to generate however many edges it generates with that,

00:00:21.000 --> 00:00:23.000
and it's going to do that twice. So, it's 2 times that.

00:00:23.000 --> 00:00:25.000
And then at the end, it's going to draw 1 extra edge

00:00:25.000 --> 00:00:27.000
to connect the 2 components together.

00:00:27.000 --> 00:00:30.000
So this now is a recurrence relation for the number of edges.

00:00:30.000 --> 00:00:32.000
Now, we know already what this is going to be.

00:00:32.000 --> 00:00:36.000
There is going to be n-1 edges in a tree with n nodes.

00:00:36.000 --> 00:00:39.000
Let's go through this process anyway of solving a recurrence relation

00:00:39.000 --> 00:00:41.000
because this is going to be a useful tool.

00:00:41.000 --> 00:00:44.000
So, you can think of what happens as this process unfolds.

00:00:44.000 --> 00:00:48.000
To generate a graph with n nodes, it 1st breaks that sub problem into 2 things,

00:00:48.000 --> 00:00:53.000
where we work out the number of edges in a graph with n/2 nodes.

00:00:53.000 --> 00:00:56.000
but doing that requires working it out for n/4 nodes and so on.

00:00:56.000 --> 00:01:00.000
This goes on and on and on until we get down to a whole bunch of individual graphs,

00:01:00.000 --> 00:01:03.000
each of which has 1 node. That's where the recursion bottoms out.

00:01:03.000 --> 00:01:05.000
Two useful questions:

00:01:05.000 --> 00:01:07.000
First question is, "How deep is this tree that's being built here--

00:01:07.000 --> 00:01:10.000
that bottoms out over here with the 1s, and how many leaves is it going to have?"

00:01:10.000 --> 00:01:12.000
So, why don't you fill that in.

00:01:12.000 --> 00:01:15.000
Is the depth that we get this way log n, n, or 2^n,

00:01:15.000 --> 00:01:17.000
and are the number of leaves at the bottom log n, n, or 2^n?

