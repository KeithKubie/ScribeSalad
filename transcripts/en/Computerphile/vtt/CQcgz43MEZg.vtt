WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.100
there's a new exploit been discovered

00:00:02.100 --> 00:00:04.170
for Linux which has got the wonderful

00:00:04.170 --> 00:00:06.660
names called Dirty Cow as an unprivileged

00:00:06.660 --> 00:00:08.580
user it will enable me to get root

00:00:08.580 --> 00:00:10.260
access to the system and then i'll be

00:00:10.260 --> 00:00:12.240
able to completely destroy it and so I'm

00:00:12.240 --> 00:00:14.610
running Debian linux VM it's not

00:00:14.610 --> 00:00:16.410
limited just to Debian basically any

00:00:16.410 --> 00:00:18.180
version of linux has been released over

00:00:18.180 --> 00:00:19.350
the last 10 years

00:00:19.350 --> 00:00:21.960
we're going to do is show that the

00:00:21.960 --> 00:00:24.330
exploit will give us a root shell and

00:00:24.330 --> 00:00:25.680
then we can do some things that perhaps we shouldn't

00:00:25.680 --> 00:00:28.980
so I'm going to first of all show by trying to change the

00:00:28.980 --> 00:00:31.170
root password that i don't have any

00:00:31.170 --> 00:00:33.270
permissions more than the normal

00:00:33.270 --> 00:00:36.180
user, so I can't change the root

00:00:36.180 --> 00:00:37.980
password i'm not going to run the

00:00:37.980 --> 00:00:40.500
exploit it goes and visits stuff and

00:00:40.500 --> 00:00:43.200
boom it's giving me a root shell and so

00:00:43.200 --> 00:00:46.260
i can now if i move the right file back

00:00:46.260 --> 00:00:49.170
in i can change the root password to

00:00:49.170 --> 00:00:51.000
lemonade

00:00:51.000 --> 00:00:53.789
copy the password file back into the

00:00:53.789 --> 00:00:54.960
right place

00:00:54.960 --> 00:00:59.340
logout of root, now back at the login

00:00:59.340 --> 00:01:01.800
prompt and I can login as root with my

00:01:01.800 --> 00:01:04.260
password as lemonade so I've managed to

00:01:04.260 --> 00:01:07.650
root my VM all using the Dirty Cow

00:01:07.650 --> 00:01:12.950
exploit

00:01:12.950 --> 00:01:14.899
Well, to understand how it works we actually need to understand

00:01:14.899 --> 00:01:16.670
a little bit about how the linux kernel

00:01:16.670 --> 00:01:19.490
handles memory because what was actually

00:01:19.490 --> 00:01:21.469
happening here is are exploiting a mech-

00:01:21.469 --> 00:01:23.240
a mechanism that linux uses to

00:01:23.240 --> 00:01:25.789
handle its memory and there's a what's

00:01:25.789 --> 00:01:27.079
called a race condition in there that

00:01:27.079 --> 00:01:28.579
when you exploit it enables you to

00:01:28.579 --> 00:01:31.250
overwrite files that you shouldn't

00:01:31.250 --> 00:01:33.770
normally have access to so once you can

00:01:33.770 --> 00:01:36.259
read say things like the password file

00:01:36.259 --> 00:01:38.869
the password program or such as every password

00:01:38.869 --> 00:01:41.659
you can read them which is fine so you

00:01:41.659 --> 00:01:43.130
need to but you shouldn't be able to modify

00:01:43.130 --> 00:01:44.659
them so the first we need to think about

00:01:44.659 --> 00:01:47.000
is how linux manages memory now we've looked at how

00:01:47.000 --> 00:01:48.979
memory works in a computer before what

00:01:48.979 --> 00:01:50.270
most modern operating systems including

00:01:50.270 --> 00:01:53.689
Linux Windows MacOS etc do is that

00:01:53.689 --> 00:01:55.729
the memory that the process uses is a

00:01:55.729 --> 00:01:58.250
sort of logical address space it only

00:01:58.250 --> 00:02:00.770
exists to that process the operating

00:02:00.770 --> 00:02:02.239
system actually thinks about in terms of

00:02:02.239 --> 00:02:05.329
pages or 4k blocks of memory which is

00:02:05.329 --> 00:02:07.280
then maps in and out is necessary this

00:02:07.280 --> 00:02:08.660
is how you can do virtual memory and

00:02:08.660 --> 00:02:10.489
things and past things in and out from

00:02:10.489 --> 00:02:11.989
disk when you need it

00:02:11.989 --> 00:02:14.599
so if you think about our program it's

00:02:14.599 --> 00:02:17.450
got its memory address space and we'll

00:02:17.450 --> 00:02:20.600
say it's got memory location 0 here and

00:02:20.600 --> 00:02:22.700
then that goes up to how ever much it's using

00:02:22.700 --> 00:02:25.010
generally you will also have other bits

00:02:25.010 --> 00:02:26.959
where the the operating system is mapped

00:02:26.959 --> 00:02:30.530
as well so its got its first page there

00:02:30.530 --> 00:02:34.040
then its second page and so on and as

00:02:34.040 --> 00:02:37.010
far as the process is concerned these

00:02:37.010 --> 00:02:40.160
are or continuous in memory that's

00:02:40.160 --> 00:02:43.670
location 0 that 4K later this is 8K 16K

00:02:43.670 --> 00:02:47.510
64K and so we just see a flat memory

00:02:47.510 --> 00:02:49.579
address space which you can write into

00:02:49.579 --> 00:02:51.980
in these pages. What the operating

00:02:51.980 --> 00:02:54.440
system's doing on the other hand is it's

00:02:54.440 --> 00:02:56.420
thinking about the physical memory and

00:02:56.420 --> 00:02:59.269
with the help of the cpu it's got a

00:02:59.269 --> 00:03:01.849
translation table so this is the logical

00:03:01.849 --> 00:03:05.090
view of the process and this is the

00:03:05.090 --> 00:03:07.370
actual physical memory so what happens

00:03:07.370 --> 00:03:08.690
in the operating system will actually-

00:03:08.690 --> 00:03:11.000
when it loads the program it maps that one say,

00:03:11.000 --> 00:03:13.819
to that physical page this one may get

00:03:13.819 --> 00:03:15.919
mapped into that one this one may get

00:03:15.919 --> 00:03:17.840
mapped into that one, they don't have to be in

00:03:17.840 --> 00:03:20.180
order but inside the CPU there's a

00:03:20.180 --> 00:03:22.159
translation table which is set up by the

00:03:22.159 --> 00:03:23.780
operating system when this process is in

00:03:23.780 --> 00:03:26.330
memory that says map these pages in

00:03:26.330 --> 00:03:28.310
to this location and everything works

00:03:28.310 --> 00:03:32.300
absolutely fine now one of the things

00:03:32.300 --> 00:03:36.380
you can then do is say well actually say

00:03:36.380 --> 00:03:39.680
this page here has exactly the same data

00:03:39.680 --> 00:03:42.380
in it as another page in a different

00:03:42.380 --> 00:03:44.600
process so rather than having to use two

00:03:44.600 --> 00:03:47.030
different memory locations in actual

00:03:47.030 --> 00:03:48.920
memory to have the same things you can

00:03:48.920 --> 00:03:51.170
have them both point at the same bit of

00:03:51.170 --> 00:03:52.610
memory and we'll have the other process off

00:03:52.610 --> 00:03:55.640
here points to the same block and if all

00:03:55.640 --> 00:03:57.410
they ever do is read from that memory

00:03:57.410 --> 00:04:00.350
location that's absolutely fine because

00:04:00.350 --> 00:04:02.390
they can both read from it share it

00:04:02.390 --> 00:04:04.310
there's no changes the problem comes to

00:04:04.310 --> 00:04:06.080
say this process wants to modify

00:04:06.080 --> 00:04:08.810
something in that memory location and in

00:04:08.810 --> 00:04:11.420
that case what happens is the linux

00:04:11.420 --> 00:04:13.430
kernel detects that it's modifying it so it's

00:04:13.430 --> 00:04:15.020
no longer the same between the two

00:04:15.020 --> 00:04:18.200
processes and says okay i will copy this

00:04:18.200 --> 00:04:20.870
one into this page here this physical

00:04:20.870 --> 00:04:23.030
page here and update the translation

00:04:23.030 --> 00:04:25.820
table so we now point there, and because we

00:04:25.820 --> 00:04:28.250
changed it there now pointing at two

00:04:28.250 --> 00:04:29.900
separate locations this is what's called

00:04:29.900 --> 00:04:32.690
copy-on-write because we copy it make

00:04:32.690 --> 00:04:35.660
the copy when we write to the file which

00:04:35.660 --> 00:04:38.360
is where we get the cow part of Dirty Cow

00:04:38.360 --> 00:04:41.540
so that's what the copy on write

00:04:41.540 --> 00:04:44.480
does in that process will copy the page

00:04:44.480 --> 00:04:47.240
and modify it so what actually happens

00:04:47.240 --> 00:04:51.860
with the dirty cow exploit is it uses

00:04:51.860 --> 00:04:54.980
this copy-on-write facility but it also

00:04:54.980 --> 00:04:56.540
does something else as well as just

00:04:56.540 --> 00:04:59.150
being able to use the memory because the

00:04:59.150 --> 00:05:01.640
the way that it works, you can also map a

00:05:01.640 --> 00:05:05.120
file off disc directly into memory and

00:05:05.120 --> 00:05:07.280
the various page faulty mechanisms used to

00:05:07.280 --> 00:05:09.050
handle virtual memory will then load it

00:05:09.050 --> 00:05:11.900
in when it's accessed because we've got

00:05:11.900 --> 00:05:14.210
access to read the file we can write it

00:05:14.210 --> 00:05:17.810
into memory and read it so we can read

00:05:17.810 --> 00:05:20.000
the file and so we'll map the file that

00:05:20.000 --> 00:05:22.669
we want to modify into say these memory

00:05:22.669 --> 00:05:25.550
blocks here and these get mapped to various

00:05:25.550 --> 00:05:29.300
pages in real memory as soon as we start

00:05:29.300 --> 00:05:31.580
reading them or writing to them so what

00:05:31.580 --> 00:05:34.310
we do is we map this file into memory

00:05:34.310 --> 00:05:35.060
and we map it

00:05:35.060 --> 00:05:37.190
simplifying the explanation somewhat in

00:05:37.190 --> 00:05:39.139
such a way that it's mapped

00:05:39.139 --> 00:05:40.280
so that when it gets written to

00:05:40.280 --> 00:05:42.979
reactivates the copy-on-write so we're going to

00:05:42.979 --> 00:05:44.900
make it maps and private fashion so

00:05:44.900 --> 00:05:48.080
when we write to the file we get a

00:05:48.080 --> 00:05:49.610
copy-on-write happening

00:05:49.610 --> 00:05:51.979
we then do two things we set up two

00:05:51.979 --> 00:05:54.740
threads running on the computer

00:05:54.740 --> 00:05:58.400
one of which is repeatedly telling the

00:05:58.400 --> 00:05:59.960
operating system that we no longer need

00:05:59.960 --> 00:06:02.090
these bits of memory thing we no longer

00:06:02.090 --> 00:06:04.729
need this bit of memory you can page it out

00:06:04.729 --> 00:06:07.249
and use it for something else in

00:06:07.249 --> 00:06:08.029
which case

00:06:08.029 --> 00:06:09.889
normally you'd tell it doesn't need it

00:06:09.889 --> 00:06:12.080
reuse the physical memory for various

00:06:12.080 --> 00:06:13.099
things one of the things the computer

00:06:13.099 --> 00:06:14.659
can do because it's got this translation

00:06:14.659 --> 00:06:16.460
table and because it knows when you're

00:06:16.460 --> 00:06:19.340
accessing it is take some of it right

00:06:19.340 --> 00:06:21.740
back out to disk and then modify

00:06:21.740 --> 00:06:23.389
load something else in for another process

00:06:23.389 --> 00:06:24.770
and then swap them in and out the time

00:06:24.770 --> 00:06:26.419
this is how virtual memory works so you can

00:06:26.419 --> 00:06:27.710
do that behind the scenes and the

00:06:27.710 --> 00:06:29.360
operations that so you're telling it you no

00:06:29.360 --> 00:06:31.129
longer need this memory so it's a

00:06:31.129 --> 00:06:33.349
candidate to be mapped out so you doing

00:06:33.349 --> 00:06:35.509
that one thread then in another thread

00:06:35.509 --> 00:06:39.529
linux provides access to the memory as a

00:06:39.529 --> 00:06:42.289
special file on disk and so you open

00:06:42.289 --> 00:06:45.710
that file up and you write the new data

00:06:45.710 --> 00:06:47.389
that you wanted to go to that file to

00:06:47.389 --> 00:06:50.270
the memory locations where you map that

00:06:50.270 --> 00:06:52.219
file into memory so just write the data

00:06:52.219 --> 00:06:55.039
you want to go there you do these things

00:06:55.039 --> 00:06:58.849
many times a second and eventually

00:06:58.849 --> 00:07:00.289
there's a possibility that the linux kernel

00:07:00.289 --> 00:07:02.419
that the overlap of the two

00:07:02.419 --> 00:07:05.180
routines happens in such a way that the

00:07:05.180 --> 00:07:08.120
file gets updated and modified its

00:07:08.120 --> 00:07:10.520
change and so the copy-on-write says oh

00:07:10.520 --> 00:07:12.020
this was changed and is no longer needed

00:07:12.020 --> 00:07:14.419
I better write this out to disk and

00:07:14.419 --> 00:07:16.279
because this is happening as the kernel

00:07:16.279 --> 00:07:18.169
it can write to any file regardless of

00:07:18.169 --> 00:07:20.750
permission so writes the update out to

00:07:20.750 --> 00:07:23.029
disk modifying the file that the actual

00:07:23.029 --> 00:07:25.310
program didn't have the permission to

00:07:25.310 --> 00:07:27.110
access the result being that we can

00:07:27.110 --> 00:07:28.520
change the file on this that we

00:07:28.520 --> 00:07:30.710
shouldn't be able to and get ourselves a

00:07:30.710 --> 00:07:33.020
root shell or whatever is we wanted to

00:07:33.020 --> 00:07:35.300
do with it and the reason is because the

00:07:35.300 --> 00:07:37.099
two parts of the operating system one

00:07:37.099 --> 00:07:39.050
that just writing to the memory and the

00:07:39.050 --> 00:07:40.310
other which is doing the copy-on-write

00:07:40.310 --> 00:07:42.529
and not sufficiently interweaven

00:07:42.529 --> 00:07:44.599
interlocked so that they don't actually

00:07:44.599 --> 00:07:46.520
stop the thing that we got what's called

00:07:46.520 --> 00:07:48.349
a race condition between the two parts

00:07:48.349 --> 00:07:50.509
so basically it's exploiting this race

00:07:50.509 --> 00:07:51.000
condition

00:07:51.000 --> 00:07:52.740
so it's kind of setting two things in

00:07:52.740 --> 00:07:55.380
motion that kind of get out of sync is that

00:07:55.380 --> 00:07:56.730
yeah pretty much to the way that

00:07:56.730 --> 00:07:58.830
implementing such that the two parts of

00:07:58.830 --> 00:08:00.330
the operating system one that just

00:08:00.330 --> 00:08:02.340
writing to the memory and the other bit which is

00:08:02.340 --> 00:08:04.050
doing the copy-on-write and not

00:08:04.050 --> 00:08:06.510
sufficiently into even interweaven interlocked so

00:08:06.510 --> 00:08:08.730
that they don't actually stop the thing

00:08:08.730 --> 00:08:09.780
and we got what's called a race

00:08:09.780 --> 00:08:12.030
condition between the two parts I've also

00:08:12.030 --> 00:08:13.710
seen it crashed the kernel when trying

00:08:13.710 --> 00:08:15.510
it as well as perhaps not as easy as all

00:08:15.510 --> 00:08:16.080
that

00:08:16.080 --> 00:08:17.760
it's a sufficiently serious bug if you

00:08:17.760 --> 00:08:19.320
could ever get access to a shell on the

00:08:19.320 --> 00:08:21.480
system you could probably if it's not

00:08:21.480 --> 00:08:24.000
been patch get up to and get a root

00:08:24.000 --> 00:08:25.470
shell and then do some real damage

00:08:25.470 --> 00:08:29.130
install a Trojan, use it to form a botnet

00:08:29.130 --> 00:08:31.200
whatever is you wanted to do so if

00:08:31.200 --> 00:08:33.450
you've got a Linux system go and patch

00:08:33.450 --> 00:08:35.490
it and if there isn't a patch out for it

00:08:35.490 --> 00:08:37.140
unplug it from the network or make

00:08:37.140 --> 00:08:42.719
sure it's well firewalled but it's a

00:08:42.719 --> 00:08:43.230
but it's

00:08:43.230 --> 00:08:44.910
a sufficiently serious bug that anything where you

00:08:44.910 --> 00:08:47.040
can get access to a root shell can then

00:08:47.040 --> 00:08:49.650
just use it it's a sufficiently serious

00:08:49.650 --> 00:08:51.720
bugs an accident

00:08:51.720 --> 00:08:53.700
it's a sufficiently serious bug- that's a

00:08:53.700 --> 00:09:00.050
tongue twister if ever there was one

