WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
[Peter] This one was a little tricky, but you should get it if you understand assignment.

00:00:04.000 --> 00:00:09.000
The answers are all of them except this one,

00:00:09.000 --> 00:00:11.000
and we'll go over each one one by one.

00:00:11.000 --> 00:00:14.000
I've initialized their values to represent colors,

00:00:14.000 --> 00:00:17.000
but they can be any integer as described in the question.

00:00:17.000 --> 00:00:22.000
The first line of code states that a refers to what x refers to,

00:00:22.000 --> 00:00:27.000
so let's change that.

00:00:27.000 --> 00:00:31.000
The second says that a now refers to what a refers to

00:00:31.000 --> 00:00:35.000
plus 1, so now a refers to a new number,

00:00:35.000 --> 00:00:38.000
which is the red triangle plus 1.

00:00:38.000 --> 00:00:40.000
At the end of these 2 statements, x still equals

00:00:40.000 --> 00:00:43.000
what it was originally, and that is the red triangle.

00:00:43.000 --> 00:00:48.000
A and x as described refer to initial values.

00:00:48.000 --> 00:00:52.000
The first line of code says that a refers to what x refers to,

00:00:52.000 --> 00:00:56.000
so as we did in the last problem, we result in that a and x

00:00:56.000 --> 00:00:58.000
both refer to the red triangle.

00:00:58.000 --> 00:01:01.000
Now x refers to what a refers to.

00:01:01.000 --> 00:01:04.000
Well, as you can see, a also refers to the red triangle,

00:01:04.000 --> 00:01:08.000
so the result of this is that x still refers to the red triangle,

00:01:08.000 --> 00:01:12.000
and since that's what it was initially, the value of x has not yet changed.

00:01:12.000 --> 00:01:15.000
In this choice, the value of x changes.

00:01:15.000 --> 00:01:17.000
Let's show you why.

00:01:17.000 --> 00:01:21.000
The first line of code says that x now refers to what it used to refer to plus 1,

00:01:21.000 --> 00:01:26.000
so we're going to create a new value that is the red triangle plus 1

00:01:26.000 --> 00:01:30.000
and change what x points to.

00:01:30.000 --> 00:01:35.000
The second line says x should now refer to what x refers to.

00:01:35.000 --> 00:01:37.000
Well, it doesn't change what it's referring to now,

00:01:37.000 --> 00:01:39.000
which is the red triangle plus 1.

00:01:39.000 --> 00:01:44.000
The end result is that x does not refer to the red triangle any longer,

00:01:44.000 --> 00:01:48.000
which is why it's not the correct choice.

00:01:48.000 --> 00:01:52.000
The first choice may be a little bit of Python that you haven't seen before.

00:01:52.000 --> 00:01:57.000
What this says is a should equal x,

00:01:57.000 --> 00:01:59.000
and x should equal a.

00:01:59.000 --> 00:02:02.000
The end result is that x and a swap.

00:02:02.000 --> 00:02:05.000
Let's see what that looks like,

00:02:05.000 --> 00:02:09.000
and I'll draw this all the way around here.

00:02:09.000 --> 00:02:11.000
X and a have swapped values.

00:02:11.000 --> 00:02:14.000
X now refers to the green triangle, and a the red triangle.

00:02:14.000 --> 00:02:17.000
The second line of code is exactly the same as the first.

00:02:17.000 --> 00:02:19.000
It's going to swap them again,

00:02:19.000 --> 00:02:21.000
and if you swap 2 things twice,

00:02:21.000 --> 00:02:23.000
you get what you had before,

00:02:23.000 --> 00:02:27.000
so since x refers to the red triangle still,

00:02:27.000 --> 00:02:30.000
it's a correct choice.

00:02:30.000 --> 00:02:34.000
In the last choice, we have a third variable x, a z.

00:02:34.000 --> 00:02:37.000
We initialize z to the value of x,

00:02:37.000 --> 00:02:39.000
which is the red triangle.

00:02:39.000 --> 00:02:42.000
We then assign a to what z refers to,

00:02:42.000 --> 00:02:45.000
which is also the red triangle.

00:02:45.000 --> 00:02:48.000
And lastly, we set x to the value of a.

00:02:48.000 --> 00:02:53.000
A refers to the red triangle, so x also refers to the red triangle.

00:02:53.000 --> 00:02:57.000
The end result is the value of x hasn't changed.

