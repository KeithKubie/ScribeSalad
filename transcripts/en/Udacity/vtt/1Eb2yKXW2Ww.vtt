WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
The fact that the number of statements that it takes to execute naive(a, b)

00:00:05.000 --> 00:00:09.000
is a linear function of a shouldn't come as a surprise to us at this point.

00:00:09.000 --> 00:00:13.000
We actually plotted the running time, and it really did give a very nice linear function.

00:00:13.000 --> 00:00:16.000
Russian is going to be a bit trickier for a couple reasons.

00:00:16.000 --> 00:00:20.000
One, is it seems much more obscure how many times it's going to go through this loop.

00:00:20.000 --> 00:00:24.000
It seems like some of the statements are actually conditioned on properties

00:00:24.000 --> 00:00:27.000
that we don't necessarily know as a simple function of the inputs.

00:00:27.000 --> 00:00:30.000
The plot that we made was basically useless.

00:00:30.000 --> 00:00:33.000
It just seemed like the time was more or less constant.

00:00:33.000 --> 00:00:36.000
It's not actually constant, and we can actually work out a function of what it is.

00:00:36.000 --> 00:00:40.000
The key step in analyzing the number of steps that this algorithm is going to take

00:00:40.000 --> 00:00:43.000
is understanding how many times this loop is going to be executed.

00:00:43.000 --> 00:00:47.000
The number of times the loop is going to be executed is going to be

00:00:47.000 --> 00:00:52.000
the same as the number of times that it takes to divide x in half

00:00:52.000 --> 00:00:54.000
before you get down to 0.

00:00:54.000 --> 00:00:56.000
This is, again, a half and rounding down.

00:00:56.000 --> 00:01:01.000
How man times can you divide x in half rounding down before you get down to 0?

00:01:01.000 --> 00:01:07.000
An important thing you need to know is how many times can you divide a number x in half,

00:01:07.000 --> 00:01:09.000
rounding down, before it hits 0?

00:01:09.000 --> 00:01:11.000
Here are some examples.

00:01:11.000 --> 00:01:15.000
If x can be something between 0 and 11, here's how many halvings.

00:01:15.000 --> 00:01:17.000
If the number if 0, then you don't have to halve it at all to get down to 0.

00:01:17.000 --> 00:01:19.000
If it's 1, you have to halve it once.

00:01:19.000 --> 00:01:24.000
If it's 2, you have to halve it twice--once to get you down to 1 and then once more to get to 0.

00:01:24.000 --> 00:01:28.000
It looks like it's a linear function so far, but actually it diverges now.

00:01:28.000 --> 00:01:32.000
The number 3 you have to halve it once to get down to 1 and then once more.

00:01:32.000 --> 00:01:36.000
Four you have to do three times--once to get it to 2, then 1, then 0.

00:01:36.000 --> 00:01:41.000
It stays that way until you get the 8, which takes 4 times--once to get it to 4, 2, 1, 0.

00:01:41.000 --> 00:01:45.000
It stays 4 for a while and the next time it changes is at 16.

00:01:45.000 --> 00:01:49.000
Which of these functions captures the relationship between x

00:01:49.000 --> 00:01:52.000
and the number of times x needs to be halved to get down to 0.

00:01:52.000 --> 00:01:55.000
Just to simplify things a bit, let's get rid of the 0 case, because it's a bit messy.

00:01:55.000 --> 00:01:58.000
The functions are x--seems to work for a little while--

00:01:58.000 --> 00:02:04.000
x/2, the log base 2 of x, and the log base 2 of x floor--meaning rounded down

00:02:04.000 --> 09:59:59.000
if it's not an integer--plus 1.

