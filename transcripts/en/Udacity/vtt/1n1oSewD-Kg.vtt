WEBVTT
Kind: captions
Language: en

00:00:00.200 --> 00:00:03.480
So now we have the wireframes
implemented for both screens.

00:00:03.480 --> 00:00:05.630
But what does it look like on the tablet?

00:00:05.630 --> 00:00:07.760
Well, unfortunately, when we 
take the phone UI

00:00:07.760 --> 00:00:10.390
and stretch it out on a tablet, 
it doesn't look that great.

00:00:10.390 --> 00:00:12.660
There's a lot of empty white space here.

00:00:12.660 --> 00:00:15.256
We could better take advantage 
of this screen real estate

00:00:15.256 --> 00:00:17.342
by showing more useful information.

00:00:17.342 --> 00:00:20.130
For example, why do these details 
need to be a tap away

00:00:20.130 --> 00:00:23.600
when they could just as easily
fit on this screen?

00:00:23.600 --> 00:00:25.700
And, furthermore, if the user 
wants to look through

00:00:25.700 --> 00:00:28.950
the full list of forecasts,
their eyes must go like this,

00:00:28.950 --> 00:00:31.740
which is an unpleasant 
reading experience.

00:00:31.740 --> 00:00:35.640
If we want the user to read some content, 
we should keep the width narrower,

00:00:35.640 --> 00:00:37.790
so that they can scan it quickly.

00:00:37.790 --> 00:00:40.320
These considerations are part 
of responsive design.

00:00:40.320 --> 00:00:42.400
Responsive design means 
designing your app

00:00:42.400 --> 00:00:44.830
by keeping in mind 
that it'll be used across

00:00:44.830 --> 00:00:47.570
a range of different device screen sizes.

00:00:47.570 --> 00:00:49.610
How do we do that, 
and what does it mean to build

00:00:49.610 --> 00:00:51.860
for larger screen devices like tablet's.

00:00:51.860 --> 00:00:55.800
Well, I can show you some examples of how
apps adapt using multi-pane layouts.

00:00:55.800 --> 00:00:59.300
In the Android Design Guide, 
there's a section on multi-pane layouts.

00:00:59.300 --> 00:01:01.960
One technique is to combine 
multiple views together.

00:01:01.960 --> 00:01:04.750
For example, in the People app,
you have the contact list

00:01:04.750 --> 00:01:07.320
and the contact card 
for additional details.

00:01:07.320 --> 00:01:09.620
On the tablet, we can
put them side by side.

00:01:09.620 --> 00:01:12.100
This is also known 
as the MasterDetailFlow.

00:01:12.100 --> 00:01:14.700
This is the master list 
and this is the detail pane.

00:01:14.700 --> 00:01:16.560
In the settings app, 
we have another example.

00:01:16.560 --> 00:01:19.360
The column width adjust 
based on the available screen width.

00:01:19.360 --> 00:01:22.326
In the calendar app, we have panels, 
and they stack vertically

00:01:22.326 --> 00:01:23.790
in the portrait orientation,

00:01:23.790 --> 00:01:26.744
but horizontally
in the landscape orientation.

00:01:26.744 --> 00:01:29.790
There also a couple of other examples
that you can look through as well.

00:01:29.790 --> 00:01:32.720
If you want more information 
on designing for tablet's

00:01:32.720 --> 00:01:35.440
or responsive design in general, 
you can check out the links below

00:01:35.440 --> 00:01:36.900
for more details.

00:01:36.900 --> 00:01:39.630
In this course, we're learning 
how to build up the phone UI first,

00:01:39.630 --> 00:01:40.790
and then the tablet UI.

00:01:40.790 --> 00:01:44.190
But in reality, when we're designing it, 
we thought about responsive design

00:01:44.190 --> 00:01:45.410
from day one.

00:01:45.410 --> 00:01:48.570
When you're building your own app,
it'sbad practice to just completely

00:01:48.570 --> 00:01:51.240
design and build your phone app
and then start to brainstorm

00:01:51.240 --> 00:01:52.530
about the tablet UI.

00:01:52.530 --> 00:01:55.780
That's because the tablet UI often
has an impact on the phone design,

00:01:55.780 --> 00:01:58.510
as well as the architectural
decisions made here.

