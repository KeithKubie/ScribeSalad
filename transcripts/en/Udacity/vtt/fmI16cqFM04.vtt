WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now when you have a decision under uncertainty and there's an opponent,

00:00:03.000 --> 00:00:05.000
it's called game theory.

00:00:05.000 --> 00:00:09.000
If there's no opponent, it's usually called decision under uncertainty.

00:00:09.000 --> 00:00:10.000
There is other names.

00:00:10.000 --> 00:00:14.000
So let's look at an example of that first before we get back to the game of pig.

00:00:14.000 --> 00:00:15.000
Here's the decision I'm going to give you.

00:00:15.000 --> 00:00:23.000
You're on a game show, and you won, and you get a prize of 1 million dollars or euros

00:00:23.000 --> 00:00:25.000
or whatever currency you want to use.

00:00:25.000 --> 00:00:27.000
Now you're given a decision.

00:00:27.000 --> 00:00:33.000
You can keep the $1 million, or the host will flip a coin and you believe it to be a fair coin,

00:00:33.000 --> 00:00:40.000
and if you call it correctly you get $3 million, but if you get it wrong, you get nothing.

00:00:40.000 --> 00:00:48.000
So you analyze the outcome of this and you believe that this is a choice by the coin

00:00:48.000 --> 00:00:55.000
that has a 50% probability of each outcome, and you want to say, what should I do?

00:00:55.000 --> 00:00:58.000
Should I keep the million or should I go for the 3 million?

00:00:58.000 --> 00:01:03.000
What I'm going to do is code up a model for this, and then let the decision theory decide.

00:01:03.000 --> 00:01:07.000
First, I just define a variable million because it's hard to see the number of 0's

00:01:07.000 --> 00:01:08.000
and count correctly.

00:01:08.000 --> 00:01:15.000
Now traditionally, utility is used with the abbreviation U and quality with abbreviation Q.

00:01:15.000 --> 00:01:20.000
So I'm going to define here a quality function that says, given a state and an action,

00:01:20.000 --> 00:01:26.000
what's my--and given utility, what state is worth to me that's going to tell me

00:01:26.000 --> 00:01:30.000
the value of that state action pair?

00:01:30.000 --> 00:01:33.000
And the actions available to me are holding and gambling.

00:01:33.000 --> 00:01:34.000
Let's go ahead and make that explicit.

00:01:34.000 --> 00:01:37.000
So in any state, the actions available are holding and gambling,

00:01:37.000 --> 00:01:41.000
where we're only going to deal with 1 state, but we make this perfectly general.

00:01:41.000 --> 00:01:46.000
And the state that I start with is, however many dollars I have in my pocket--

00:01:46.000 --> 00:01:47.000
could be anything.

00:01:47.000 --> 00:01:53.000
And given that state, if I hold, my state is going to be increased by $1 million,

00:01:53.000 --> 00:01:57.000
and then there's some utility on that--how much do I value having what I have now

00:01:57.000 --> 00:01:58.000
plus 1 million.

00:01:58.000 --> 00:02:03.000
And if I gamble, there's a 50% chance that I get 3 million more than I have now.

00:02:03.000 --> 00:02:05.000
There's some utility for that.

00:02:05.000 --> 00:02:11.000
And a 50% chance that I get nothing more than I have now, and some utility for that.

00:02:11.000 --> 00:02:16.000
So that describes the quality of the state, but only describes it if I have a utility function.

00:02:16.000 --> 00:02:19.000
I have to know how much do I like money?

00:02:19.000 --> 00:02:22.000
Well, the simplest choice for utility function is the identity function.

00:02:22.000 --> 00:02:27.000
Say the identity function just takes any input x and returns x.

00:02:27.000 --> 00:02:33.000
It's the input itself, and so we could say, if I start with nothing,

00:02:33.000 --> 00:02:37.000
the value of the state of having nothing is 0, and the value of the state of having

00:02:37.000 --> 00:02:39.000
a million is a million.

00:02:39.000 --> 00:02:44.000
Now here's--the amazing thing is, I can just write out what the optimal strategy is,

00:02:44.000 --> 00:02:46.000
what the best action is for this state,

00:02:46.000 --> 00:02:50.000
and what it's going to be is the maximum over all the possible actions from the state,

00:02:50.000 --> 00:02:52.000
that was just hold and gamble,

00:02:52.000 --> 00:02:56.000
maximized by EU, which stands for Expected Utility.

00:02:56.000 --> 00:02:58.000
Expected meaning average.

00:02:58.000 --> 00:03:03.000
So what's the average utility of each of the actions, and I've defined the average utility

00:03:03.000 --> 00:03:10.000
as the quality of that state, given that state action pair under the utility function?

00:03:10.000 --> 00:03:14.000
And that means that the Q had to deal with the averaging,

00:03:14.000 --> 00:03:16.000
and it did that.

00:03:16.000 --> 00:03:22.000
It said, 50% this, 50% that. That's the value of gambling.

00:03:22.000 --> 00:03:25.000
Now this best_action function solves this particular problem.

00:03:25.000 --> 00:03:29.000
But the amazing thing is is that we can completely generalize this,

00:03:29.000 --> 00:03:34.000
so if we just add in parameters, now we're saying what's the best_action

00:03:34.000 --> 00:03:38.000
in a particular state if you tell me what the available actions are,

00:03:38.000 --> 00:03:44.000
what the quality of each state action pair is, and what the utility is over states,

00:03:44.000 --> 00:03:46.000
then I can tell you what the best_action is.

00:03:46.000 --> 00:03:48.000
That works for any possible domain that you can define.

00:03:48.000 --> 00:03:52.000
It's an amazing thing that we solved all the problems at once.

00:03:52.000 --> 00:03:57.000
Similarly to the way in search where we had 1 best_search algorithm

00:03:57.000 --> 00:03:59.000
that could solve all of the search problems.

00:03:59.000 --> 00:04:05.000
Now it doesn't mean that we're done, and we never have to program anything again

00:04:05.000 --> 00:04:08.000
because programming can be difficult.

00:04:08.000 --> 00:04:11.000
There's some problems that don't fit into this type of formulation,

00:04:11.000 --> 00:04:14.000
and there are many, many problems which you can describe,

00:04:14.000 --> 00:04:17.000
but which you can't solve in a feasible amount of time.

00:04:17.000 --> 00:04:19.000
So we haven't solved everything, but it is amazing how much we can do

00:04:19.000 --> 00:04:22.000
with just this 1 short function.

00:04:22.000 --> 00:04:23.000
Let's go ahead and solve it.

00:04:23.000 --> 00:04:30.000
Let's solve this problem, and let's say I start off with $100, what's my best_action?

00:04:30.000 --> 00:04:33.000
Then when I run that, it tells me the best_action is gamble.

00:04:33.000 --> 00:04:35.000
Now that doesn't sound quite right to me.

00:04:35.000 --> 00:04:40.000
If you are faced with that problem, assuming you had $100 to your name.

00:04:40.000 --> 00:04:43.000
Would you take the gamble--try to go for the 3 million,

00:04:43.000 --> 00:04:45.000
or would you hold with 1 million?

00:04:45.000 --> 00:04:50.000
And there's no right or wrong answer to this despite what the interface has to do.

00:04:50.000 --> 00:04:54.000
It has to tell you one answer is right or wrong, but you can ignore that.

00:04:54.000 --> 00:04:58.000
I just want to collect some data on how many people think that they would gamble

00:04:58.000 --> 09:59:59.000
in that situation and how many people think they would hold.

