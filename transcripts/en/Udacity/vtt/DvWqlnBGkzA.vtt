WEBVTT
Kind: captions
Language: en

00:00:00.140 --> 00:00:02.100
There are many reasons that a controller

00:00:02.100 --> 00:00:04.950
might want to write policy, to change the

00:00:04.950 --> 00:00:09.420
state and the network switches, including maintenance, unexpected

00:00:09.420 --> 00:00:12.260
failure, and traffic engineering. Any of these network

00:00:12.260 --> 00:00:15.090
tasks involve or require updating state in the

00:00:15.090 --> 00:00:18.490
network switches, and when that state transition happens,

00:00:18.490 --> 00:00:21.820
we want to make sure that forwarding remains

00:00:21.820 --> 00:00:25.460
correct and consistent. In particular, we would like

00:00:25.460 --> 00:00:28.650
to maintain the following in variance: there shouldn't be any

00:00:28.650 --> 00:00:32.310
forwarding loops and there shouldn't be any black holes whereby

00:00:32.310 --> 00:00:34.690
a router or switch receives a packet and doesn't know

00:00:34.690 --> 00:00:36.990
what to do with it. There also shouldn't be cases

00:00:36.990 --> 00:00:39.710
where traffic is going where it shouldn't be allowed to

00:00:39.710 --> 00:00:43.630
go because of the network being in an inconsistent state.

00:00:43.630 --> 00:00:48.090
Let's now consider an example of what might happen when

00:00:48.090 --> 00:00:50.600
policies are written to the network, if they're written in

00:00:50.600 --> 00:00:54.500
an inconsistent fashion. Let's consider a case where

00:00:54.500 --> 00:00:57.880
we have a network that is performing shortest routing

00:00:57.880 --> 00:01:00.860
to some destination. And the link weights are

00:01:00.860 --> 00:01:03.790
as at shown here in the figure. Traffic in

00:01:03.790 --> 00:01:05.810
the network would flow along a path shown

00:01:05.810 --> 00:01:09.740
in green. Let's suppose now that an operator wants

00:01:09.740 --> 00:01:16.560
to change the network state to shift traffic off of this link. He could do so by

00:01:16.560 --> 00:01:20.840
updating the link weight. In doing so, the new shortest path from this top

00:01:20.840 --> 00:01:28.780
router would be as follows. But, what if the state in the top switch

00:01:30.650 --> 00:01:36.420
occurred before the state in the bottom switch could be updated? In this case,

00:01:36.420 --> 00:01:38.910
we would have a potential forwarding loop.

00:01:38.910 --> 00:01:41.320
Traffic would proceed to the bottom switch.

00:01:41.320 --> 00:01:43.190
But the bottom switch would still have the

00:01:43.190 --> 00:01:47.060
old network state, and would continue to forward traffic

00:01:47.060 --> 00:01:50.420
to the top switch, resulting in a forwarding loop.

00:01:50.420 --> 00:01:52.940
If rules are installed along a path out of

00:01:52.940 --> 00:01:56.600
order, packets may reach a switch before the

00:01:56.600 --> 00:02:00.130
new rules do. So, in this type of model

00:02:00.130 --> 00:02:02.460
we would have to think about all possible packet

00:02:02.460 --> 00:02:07.850
and event orderings to ensure that consistent behavior resulted.

00:02:07.850 --> 00:02:10.169
So we need atomic updates of the entire

00:02:10.169 --> 00:02:12.990
configuration. The solution to this problem is to use

00:02:12.990 --> 00:02:17.000
a two phase commit so that packets are either

00:02:17.000 --> 00:02:20.940
subjected to the old configuration on all switches, or

00:02:20.940 --> 00:02:23.670
to the new configuration on all switches. But

00:02:23.670 --> 00:02:26.400
packets aren't subjected to the new policy on some

00:02:26.400 --> 00:02:29.780
switches and the old policy on others. The idea

00:02:29.780 --> 00:02:33.480
is to tag the packet on ingress so that

00:02:33.480 --> 00:02:39.660
the switches maintain copies of both P1 and P2 for some time. When all

00:02:39.660 --> 00:02:43.000
switches have received rules corresponding to the

00:02:43.000 --> 00:02:46.460
new policy, then incoming packets can be tagged

00:02:46.460 --> 00:02:52.120
with P2. After some time, when we're sure that no more packets with P1

00:02:52.120 --> 00:02:53.980
are being forwarded through the network, we

00:02:53.980 --> 00:02:57.990
can only then remove the rules corresponding to

00:02:57.990 --> 00:03:01.075
policy P1. Now, the naive version of

00:03:01.075 --> 00:03:03.580
two-phase commit, requires doing this on all

00:03:03.580 --> 00:03:06.450
switches at once. Which essentially doubles the

00:03:06.450 --> 00:03:09.870
rule space requirements, since we have to store

00:03:09.870 --> 00:03:15.880
the rules for both P1 and P2. We can limit the scope of the two phase commit by

00:03:15.880 --> 00:03:23.000
only applying this mechanism on switches that involve the affected portions of

00:03:23.000 --> 00:03:25.840
the traffic, or the affected portions of the topology.

