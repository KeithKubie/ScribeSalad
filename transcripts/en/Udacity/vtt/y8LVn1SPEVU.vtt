WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
Needless to say, this behavior of C and C++ programs opens the door

00:00:05.000 --> 00:00:08.000
for many many ways of abusing the system.

00:00:08.000 --> 00:00:15.000
You may have heard buffer overflows, which exploit precisely this flaw in C and C++

00:00:15.000 --> 00:00:20.000
where people not only read but write beyond the elements of an array

00:00:20.000 --> 00:00:25.000
in order to supplant malicious code and select locations of the memory.

00:00:25.000 --> 00:00:29.000
This opens the door for all sorts of interesting hacks, of course.

00:00:29.000 --> 00:00:31.000
How can one detect such errors?

00:00:31.000 --> 00:00:34.000
What we need is a system invariant that continuously

00:00:34.000 --> 00:00:38.000
checks the boundaries of an array against reads and writes.

00:00:38.000 --> 00:00:45.000
What a tool can do for instance is constantly monitor the uninitialized areas

00:00:45.000 --> 00:00:49.000
for reads and writes with every single instructions that is,

00:00:49.000 --> 00:00:55.000
and whenever the program tries to access some system memory that is not allocated,

00:00:55.000 --> 00:01:01.000
what will happen is that the invariant checker raises an exception or otherwise aborts the program

00:01:01.000 --> 00:01:05.000
and therefore allows us to detect this kind of error.

00:01:05.000 --> 00:01:10.000
Tools for C and C++ help you do that, include tools like electric fence,

00:01:10.000 --> 00:01:17.000
which is precisely that, places these blocks in front and before every allocated block

00:01:17.000 --> 00:01:22.000
and therefore detects when reads and writes happened outside of these allocated areas.

00:01:22.000 --> 00:01:28.000
And the second important tool here is Valgrind, which actually is an interpreter for x86 binaries

00:01:28.000 --> 00:01:32.000
in which also allows us to monitor accesses to non-initialized code for C and C++ programs.

