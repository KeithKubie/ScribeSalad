WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.360
[MUSIC PLAYING]

00:00:07.967 --> 00:00:09.550
ANKUR KOTWAL: Good
morning, everybody.

00:00:09.550 --> 00:00:13.320
And for those of you that are
watching online, good evening,

00:00:13.320 --> 00:00:16.299
good afternoon, wherever
you are around the world.

00:00:16.299 --> 00:00:17.590
Thank you for joining us today.

00:00:17.590 --> 00:00:23.320
My name is Ankur Kotwal, and
I'm on the Google Maps API team.

00:00:23.320 --> 00:00:26.120
So the Google Maps APIs have
been around for over 10 years.

00:00:26.120 --> 00:00:28.260
It's one of Google's first APIs.

00:00:28.260 --> 00:00:31.570
And in that time, we've
added a lot of functionality

00:00:31.570 --> 00:00:33.220
to these APIs.

00:00:33.220 --> 00:00:36.960
And sometimes that's meant
introducing new APIs.

00:00:36.960 --> 00:00:39.590
Sometimes that's meant
adding these capabilities

00:00:39.590 --> 00:00:42.430
within existing APIs.

00:00:42.430 --> 00:00:44.910
That's led to an interesting
challenge, actually.

00:00:44.910 --> 00:00:49.120
So if you look here,
we have a lot of APIs.

00:00:49.120 --> 00:00:51.690
And we support the
web, Android, iOS.

00:00:51.690 --> 00:00:56.220
We have a number of great
web services to help you--

00:00:56.220 --> 00:01:00.610
to help provide data to each
of those platforms as well.

00:01:00.610 --> 00:01:02.610
But some of the feedback
that we've had from you

00:01:02.610 --> 00:01:05.710
is this functionality is
great, but it's a bit daunting

00:01:05.710 --> 00:01:07.271
to get started.

00:01:07.271 --> 00:01:07.770
Right?

00:01:07.770 --> 00:01:10.800
How do I-- how do I look at this
and go, OK, what are the things

00:01:10.800 --> 00:01:15.450
that I'm going to need for
my business, my use case?

00:01:15.450 --> 00:01:17.190
It's kind of a nice
problem to have,

00:01:17.190 --> 00:01:19.460
but even if you're
not new to us,

00:01:19.460 --> 00:01:22.780
if you're a seasoned
Google Maps API user,

00:01:22.780 --> 00:01:24.030
you probably have faced this.

00:01:24.030 --> 00:01:26.920
And we publish blog posts
and release notes and videos

00:01:26.920 --> 00:01:30.350
to try and keep you up to
date, but it can be daunting.

00:01:30.350 --> 00:01:34.120
So if I took a different
analogy, up until now,

00:01:34.120 --> 00:01:37.740
we have been giving you the
tools and the components

00:01:37.740 --> 00:01:41.530
and some instructions to
help you piece together

00:01:41.530 --> 00:01:43.700
your software solution.

00:01:43.700 --> 00:01:45.910
To take that metaphor
further, if you're

00:01:45.910 --> 00:01:50.010
thinking of your software
solution as a lounge room,

00:01:50.010 --> 00:01:53.840
we were helping you build those
components, the parts that

00:01:53.840 --> 00:01:54.970
go in the lounge room.

00:01:54.970 --> 00:02:00.120
A drawer, a table, a couch.

00:02:00.120 --> 00:02:02.670
Today what I want to do is
talk to you about something new

00:02:02.670 --> 00:02:07.230
that we're doing in addition
to providing you these APIs.

00:02:07.230 --> 00:02:09.259
We call them solutions.

00:02:09.259 --> 00:02:12.470
And in this case, we want to
provide you the lounge room.

00:02:12.470 --> 00:02:15.060
We want to provide you a
reference implementation

00:02:15.060 --> 00:02:19.620
to help get you started with the
best of breed maps application

00:02:19.620 --> 00:02:21.430
depending on your use case.

00:02:21.430 --> 00:02:24.420
And we're going to make
it entirely open source.

00:02:24.420 --> 00:02:26.380
We're publishing it
on our developer site,

00:02:26.380 --> 00:02:28.350
along with supporting
documentation,

00:02:28.350 --> 00:02:30.380
so that you can
grab this and say,

00:02:30.380 --> 00:02:32.410
you know what, I want
to change the color,

00:02:32.410 --> 00:02:35.400
or I want to swap one component,
one of my software components

00:02:35.400 --> 00:02:37.360
out with something else.

00:02:37.360 --> 00:02:39.330
But your starting
point is a great one.

00:02:39.330 --> 00:02:41.610
And even if you have an
existing application,

00:02:41.610 --> 00:02:45.660
you could maybe borrow some of
the features or capabilities

00:02:45.660 --> 00:02:47.540
that we are adding
to these solutions.

00:02:50.680 --> 00:02:53.410
So let's move on to talking
about these solutions.

00:02:53.410 --> 00:02:56.400
As my team went to start
building these out,

00:02:56.400 --> 00:02:58.540
we started to come up with
different architectures

00:02:58.540 --> 00:03:02.580
that we would have for
different Maps API uses.

00:03:02.580 --> 00:03:04.330
And the one thing that
we kept coming back

00:03:04.330 --> 00:03:07.830
to that was sort of defining
what our architecture would be

00:03:07.830 --> 00:03:10.340
was location data.

00:03:10.340 --> 00:03:12.750
So depending on the
type of data you have,

00:03:12.750 --> 00:03:16.490
would dictate what kind
of architecture you use.

00:03:16.490 --> 00:03:21.280
And so broadly speaking, we had
three types of location data.

00:03:21.280 --> 00:03:25.560
Static data-- data that
doesn't change very often.

00:03:25.560 --> 00:03:27.990
We had dynamic data
that does change,

00:03:27.990 --> 00:03:30.680
that maybe you have things
like user-generated content

00:03:30.680 --> 00:03:33.830
where you want to show photos,
or in the case of a real estate

00:03:33.830 --> 00:03:37.220
application, more houses
are coming on the market

00:03:37.220 --> 00:03:39.850
or being taken
out of the market.

00:03:39.850 --> 00:03:41.910
And then you have
real-time data, as well,

00:03:41.910 --> 00:03:46.580
for things like tracking
vehicles in real time.

00:03:46.580 --> 00:03:49.670
And then as we started to build
that out, we came up with a way

00:03:49.670 --> 00:03:52.380
to split that
static data use case

00:03:52.380 --> 00:03:57.090
into two, one which is
entirely just client-side.

00:03:57.090 --> 00:04:00.210
You don't need to have a
server beyond your web server.

00:04:00.210 --> 00:04:03.700
So today's talk, we're going
to go through these solutions.

00:04:03.700 --> 00:04:04.680
We've built these out.

00:04:04.680 --> 00:04:05.554
We've published them.

00:04:05.554 --> 00:04:07.230
And we want to
share them with you.

00:04:07.230 --> 00:04:11.400
And hope to jump-start
your development.

00:04:11.400 --> 00:04:14.730
So the first one we're
going to look at is a--

00:04:14.730 --> 00:04:17.670
the static data, the client-side
only example, and it's

00:04:17.670 --> 00:04:18.690
the Coffee Shop Finder.

00:04:18.690 --> 00:04:24.530
This is a very common
scenario for a store locator.

00:04:24.530 --> 00:04:26.830
We've come up with a
fictional coffee shop called

00:04:26.830 --> 00:04:31.190
Josie's Patisserie and
Cafe, and Josie basically

00:04:31.190 --> 00:04:33.730
has a successful
business in the UK.

00:04:33.730 --> 00:04:35.460
She's got a number of stores.

00:04:35.460 --> 00:04:37.620
And often that data
doesn't change, right?

00:04:37.620 --> 00:04:40.520
She's got a fixed
number of shops.

00:04:40.520 --> 00:04:42.520
She may have a new
store opening up,

00:04:42.520 --> 00:04:44.540
or their opening hours
and closing hours

00:04:44.540 --> 00:04:48.090
might change depending on
seasonality or holidays,

00:04:48.090 --> 00:04:52.130
but effectively, there's
not a lot of change there.

00:04:52.130 --> 00:04:57.090
So what we're going to do
is look at a quick demo

00:04:57.090 --> 00:05:00.980
of Josie's Coffee Shop Finder.

00:05:00.980 --> 00:05:03.140
And so if we can
shift to the laptop--

00:05:03.140 --> 00:05:04.440
that's great.

00:05:04.440 --> 00:05:06.260
So here we're just
showing you the map.

00:05:06.260 --> 00:05:09.060
We don't expect that your whole
website or app would be just

00:05:09.060 --> 00:05:12.102
entirely the map, but you can
see the map section of it,

00:05:12.102 --> 00:05:14.310
and that's what we're going
to cover in the solution.

00:05:14.310 --> 00:05:16.610
So the first thing you notice
is that it is a Google map,

00:05:16.610 --> 00:05:17.568
but it looks different.

00:05:17.568 --> 00:05:19.860
It's because we've
used a custom style.

00:05:19.860 --> 00:05:21.590
We've muted the
colors a little bit,

00:05:21.590 --> 00:05:25.380
and we've aligned it more
closely with Josie's brand.

00:05:25.380 --> 00:05:28.740
So let's have a look at
Josie's Liverpool patisserie.

00:05:28.740 --> 00:05:31.490
And immediately you see
some text that says--

00:05:31.490 --> 00:05:33.290
describes the store.

00:05:33.290 --> 00:05:36.340
It shows the opening hours
and some contact details.

00:05:36.340 --> 00:05:39.220
Probably my favorite feature
is the image, though.

00:05:39.220 --> 00:05:41.400
We're using the
Street View image API

00:05:41.400 --> 00:05:42.950
to show you what
the shop front looks

00:05:42.950 --> 00:05:45.510
like so that when
customers are going

00:05:45.510 --> 00:05:49.790
to come to the actual
destination, they can see it.

00:05:49.790 --> 00:05:54.670
Let's switch to a cafe,
Josie's Cafe in [? Oakham, ?]

00:05:54.670 --> 00:05:56.690
and again, similar data.

00:05:56.690 --> 00:05:58.900
This is a very basic
Store Locator app,

00:05:58.900 --> 00:06:00.979
but I want to show
you how we built it.

00:06:00.979 --> 00:06:02.770
So let's switch back
to the slides, please.

00:06:05.930 --> 00:06:08.850
If you look at the architecture
for this particular example,

00:06:08.850 --> 00:06:10.350
it's really, really simple.

00:06:10.350 --> 00:06:13.610
We have three files that are
just sitting on a web server.

00:06:13.610 --> 00:06:16.220
And this is that
client-side only code.

00:06:16.220 --> 00:06:19.060
You'll notice we have the web
page, the index, the HTML.

00:06:19.060 --> 00:06:22.250
We have a JavaScript
file and a JSON file.

00:06:22.250 --> 00:06:23.920
That contains the
data for the stores,

00:06:23.920 --> 00:06:27.610
and I'll show you
why that's important.

00:06:27.610 --> 00:06:30.730
Actual implementation of this
is actually very, very simple.

00:06:30.730 --> 00:06:32.340
We're going to
initialize the map.

00:06:32.340 --> 00:06:34.687
We're going to put all that
data on it and style it.

00:06:34.687 --> 00:06:36.520
And then we're going
to add a click listener

00:06:36.520 --> 00:06:38.170
so that when users
click on the marker,

00:06:38.170 --> 00:06:41.802
we populate it with the
relevant information.

00:06:41.802 --> 00:06:43.740
So in terms of
initializing the map,

00:06:43.740 --> 00:06:45.930
for any of you that
have used the Maps API,

00:06:45.930 --> 00:06:48.970
the JavaScript Maps API before,
you'll be familiar with this.

00:06:48.970 --> 00:06:51.930
We added div on
there, which is a map,

00:06:51.930 --> 00:06:55.030
and then we add an asynchronous
script to go and load

00:06:55.030 --> 00:06:56.920
the actual Maps API.

00:06:56.920 --> 00:06:59.650
So that URL will be
very familiar to you.

00:06:59.650 --> 00:07:03.050
We substitute API_key
with our API key.

00:07:03.050 --> 00:07:05.230
We lock it down so it's
only useful on our domain,

00:07:05.230 --> 00:07:07.824
so people aren't
using our API key.

00:07:07.824 --> 00:07:10.240
But the important thing is we
have this callback parameter

00:07:10.240 --> 00:07:11.550
on the right-hand side.

00:07:11.550 --> 00:07:13.120
When the map is
loaded, it's going

00:07:13.120 --> 00:07:16.250
to call back our init function.

00:07:16.250 --> 00:07:18.687
And we're going to go ahead
and initialize the map.

00:07:18.687 --> 00:07:20.270
We're just going to
set the zoom level

00:07:20.270 --> 00:07:23.550
to what we want it to be set
to, the latitude and longitude,

00:07:23.550 --> 00:07:25.100
and apply our style.

00:07:25.100 --> 00:07:27.140
Very, very basic.

00:07:27.140 --> 00:07:29.850
Now remember I said that
we have a JSON file.

00:07:29.850 --> 00:07:33.160
Well, that JSON file
contains all the store data

00:07:33.160 --> 00:07:36.000
so that we're just following
programming best practices,

00:07:36.000 --> 00:07:38.270
separating our data
out from our code.

00:07:38.270 --> 00:07:41.750
And by using GeoJSON,
which is an open standard

00:07:41.750 --> 00:07:45.580
for geographical data, it means
that we just have a simple JSON

00:07:45.580 --> 00:07:47.735
file that's structured
in a particular way,

00:07:47.735 --> 00:07:50.160
and loading that JSON
file onto our map

00:07:50.160 --> 00:07:51.780
gives us some advantages.

00:07:51.780 --> 00:07:54.090
So advantages like
pre-populating the map

00:07:54.090 --> 00:07:57.470
with the data,
applying marker styles,

00:07:57.470 --> 00:07:59.890
and even attributing
that metadata.

00:07:59.890 --> 00:08:02.710
So in code, when we
need to refer to fields,

00:08:02.710 --> 00:08:04.570
it'll just do it for us.

00:08:04.570 --> 00:08:07.340
But my favorite part
of using GeoJSON--

00:08:07.340 --> 00:08:10.880
to put that data on a map,
it's a single line of code.

00:08:10.880 --> 00:08:12.240
Our Maps APIs support this.

00:08:12.240 --> 00:08:15.100
You just say
map.data.loadgeojson,

00:08:15.100 --> 00:08:19.080
take that store
file, and it's done.

00:08:19.080 --> 00:08:21.150
Just wanted to give
a quick demonstration

00:08:21.150 --> 00:08:23.889
to what the structure
of that file is like.

00:08:23.889 --> 00:08:25.680
You don't need to look
at the details here.

00:08:25.680 --> 00:08:27.138
As I said, we've
open sourced this,

00:08:27.138 --> 00:08:31.380
so you can have a look at it
in greater detail offline.

00:08:31.380 --> 00:08:32.130
But that's it.

00:08:32.130 --> 00:08:33.659
That's what GeoJSON gives us.

00:08:33.659 --> 00:08:36.490
Now we're going to go look
at the event click listener.

00:08:36.490 --> 00:08:39.000
And the way we add that
is we tell the map, hey,

00:08:39.000 --> 00:08:41.809
we want to add a click
listener, and it's

00:08:41.809 --> 00:08:42.990
going to execute this code.

00:08:42.990 --> 00:08:44.740
I've put some ellipses
in there to get rid

00:08:44.740 --> 00:08:47.040
of some of the boilerplate
code, but basically,

00:08:47.040 --> 00:08:49.870
we're going to initialize some
local fields, and that info

00:08:49.870 --> 00:08:52.190
window, that speech
bubble that we saw,

00:08:52.190 --> 00:08:55.150
it's just-- when we set content
in there, it's just HTML.

00:08:55.150 --> 00:08:58.200
So the way we had laid out those
images, the Street View image

00:08:58.200 --> 00:09:03.230
API, it's just general HTML
that we're populating it with.

00:09:03.230 --> 00:09:06.210
And the reasons that source
over there is particularly long

00:09:06.210 --> 00:09:08.610
is because that's how we're
calling the Street View image

00:09:08.610 --> 00:09:09.260
API.

00:09:09.260 --> 00:09:11.500
And we're saying,
here's our API key.

00:09:11.500 --> 00:09:13.060
And then for each
of Josie's stores,

00:09:13.060 --> 00:09:15.430
we're saying, here's
the latitude, longitude,

00:09:15.430 --> 00:09:18.270
so go and fetch us that
particular Street View image

00:09:18.270 --> 00:09:20.515
and put it in line.

00:09:20.515 --> 00:09:21.640
But it's as simple as that.

00:09:21.640 --> 00:09:25.110
We didn't have to go and like,
do a look-up as to which marker

00:09:25.110 --> 00:09:26.750
corresponded to which data.

00:09:26.750 --> 00:09:29.140
Because we used GeoJSON,
that attribution

00:09:29.140 --> 00:09:30.230
was already done for us.

00:09:30.230 --> 00:09:32.645
It's really, really neat.

00:09:32.645 --> 00:09:34.270
And then the last
thing that we do here

00:09:34.270 --> 00:09:37.480
is just go ahead and position
the info window and open it

00:09:37.480 --> 00:09:40.250
so that it displays.

00:09:40.250 --> 00:09:43.020
So here in this simple
store locator example,

00:09:43.020 --> 00:09:46.440
we used a JavaScript API and we
used the Street View image API.

00:09:46.440 --> 00:09:48.800
But the cool thing is we
didn't need a server-side,

00:09:48.800 --> 00:09:51.020
like a back-end to power this.

00:09:51.020 --> 00:09:52.780
And this would
actually fit really

00:09:52.780 --> 00:09:55.590
well for many store locator
examples that I've seen.

00:09:58.240 --> 00:10:03.106
So let's take it one
more step further.

00:10:03.106 --> 00:10:04.480
What about in the
situation where

00:10:04.480 --> 00:10:06.260
we have got more
data, where we do

00:10:06.260 --> 00:10:08.610
need a server-side component?

00:10:08.610 --> 00:10:11.750
And for this one, we're going
to have a look at the New York

00:10:11.750 --> 00:10:14.320
City Subway Locator.

00:10:14.320 --> 00:10:18.339
So in New York City, there's
many, many subway stations,

00:10:18.339 --> 00:10:19.380
so there's a lot of data.

00:10:19.380 --> 00:10:21.200
You don't want to just
throw that on a map,

00:10:21.200 --> 00:10:23.850
because that map
becomes too noisy.

00:10:23.850 --> 00:10:26.710
It also slows it down, so
performance gets affected,

00:10:26.710 --> 00:10:30.010
so the user experience
isn't particularly great.

00:10:30.010 --> 00:10:31.860
So what we want to
do here is we want

00:10:31.860 --> 00:10:36.490
to make sure that our
application remains scalable.

00:10:36.490 --> 00:10:38.230
And we want to make
sure that we have--

00:10:38.230 --> 00:10:40.200
we can manage the
data that we have.

00:10:40.200 --> 00:10:45.209
So why don't we switch to
the Subway Locator here,

00:10:45.209 --> 00:10:46.000
and you can see it.

00:10:46.000 --> 00:10:47.560
Again, we have a custom style.

00:10:47.560 --> 00:10:49.620
We're here near
Brooklyn at the moment.

00:10:49.620 --> 00:10:54.030
So I can zoom out and give
you a little bit more data

00:10:54.030 --> 00:10:56.066
about the subway
stations themselves.

00:10:56.066 --> 00:10:58.440
Let me zoom back in, and I
want you to look at something.

00:10:58.440 --> 00:10:59.380
I'm going to zoom--

00:10:59.380 --> 00:11:01.530
I want you to look at
the top left of this map.

00:11:01.530 --> 00:11:05.530
As I pan the map and let go
of my camera, so I'm panning

00:11:05.530 --> 00:11:09.100
and let going, it goes and
populates the subway stations.

00:11:09.100 --> 00:11:10.877
That's the back-end
doing its job.

00:11:10.877 --> 00:11:12.460
So the way that this
application works

00:11:12.460 --> 00:11:15.730
is that as the camera
moves, we go and say,

00:11:15.730 --> 00:11:17.040
give me my viewport.

00:11:17.040 --> 00:11:20.500
Go fetch the stations that are
in my viewport and populate it.

00:11:20.500 --> 00:11:22.250
So that way, we're not
overloading the map

00:11:22.250 --> 00:11:25.140
with tons and tons of markers,
and we're still keeping

00:11:25.140 --> 00:11:28.150
a fairly good user experience.

00:11:28.150 --> 00:11:32.230
Of course, we've got info
windows on these subway stops,

00:11:32.230 --> 00:11:34.580
as well, that just sort of
give the name of the place

00:11:34.580 --> 00:11:35.839
as well as which line it's on.

00:11:35.839 --> 00:11:37.630
And the only other
thing I want to call out

00:11:37.630 --> 00:11:39.870
is that the map itself
has got the subway lines

00:11:39.870 --> 00:11:42.250
already drawn on it.

00:11:42.250 --> 00:11:43.870
That's the static
data on this map.

00:11:43.870 --> 00:11:45.328
So let's switch
back to the slides.

00:11:51.080 --> 00:11:55.210
And the architecture for this,
we're now adding a Google App

00:11:55.210 --> 00:11:58.140
Engine instance,
so that stores.json

00:11:58.140 --> 00:12:02.800
file we had for Josie's example,
that's now its own component.

00:12:02.800 --> 00:12:05.190
And the reason is that
we need that back-end.

00:12:05.190 --> 00:12:07.420
We want to make sure
we're scaling it out

00:12:07.420 --> 00:12:10.370
so that we're providing
the right amount of data.

00:12:10.370 --> 00:12:13.260
Interestingly enough, I want
you to notice that we have

00:12:13.260 --> 00:12:15.350
a GeoJSON file here as well.

00:12:15.350 --> 00:12:18.710
So we're still going to continue
to use GeoJSON in this example.

00:12:18.710 --> 00:12:20.560
It's just going to
be on the server.

00:12:20.560 --> 00:12:23.190
So let me show you what the
back-end implementation looks

00:12:23.190 --> 00:12:23.940
like.

00:12:23.940 --> 00:12:25.340
The first thing
we're going to do

00:12:25.340 --> 00:12:28.660
is load the GeoJSON
into memory on startup,

00:12:28.660 --> 00:12:31.400
into a data structure
called an Rtree.

00:12:31.400 --> 00:12:33.880
And I'm going to show you
what that is in a second.

00:12:33.880 --> 00:12:36.030
Then we're going to
register some API endpoints,

00:12:36.030 --> 00:12:39.020
some handlers, so that
when the page needs

00:12:39.020 --> 00:12:43.572
to request for the next view, we
have those handlers registered.

00:12:43.572 --> 00:12:45.280
And then I'll show
you the implementation

00:12:45.280 --> 00:12:46.363
of those handlers as well.

00:12:49.470 --> 00:12:53.290
So an Rtree is just a
really nice data structure

00:12:53.290 --> 00:12:56.910
that helps us look up
location data in a nice way,

00:12:56.910 --> 00:12:58.500
in a spatial way.

00:12:58.500 --> 00:13:01.490
And so what it does is it
has these minimum bounding

00:13:01.490 --> 00:13:03.330
boxes when you give
it all the data,

00:13:03.330 --> 00:13:05.240
and then it generates
a tree-like structure

00:13:05.240 --> 00:13:07.750
like you see in the
bottom-right there.

00:13:07.750 --> 00:13:10.410
So it groups these
objects in nearby--

00:13:10.410 --> 00:13:12.410
that are near to one
another and then provides

00:13:12.410 --> 00:13:13.580
easy look-up methods.

00:13:13.580 --> 00:13:17.900
So that's-- you can start to see
how we are able to say, well,

00:13:17.900 --> 00:13:21.560
in this view port, Rtree, go
and give me all the data points,

00:13:21.560 --> 00:13:23.700
and it's optimized
for that type of data.

00:13:26.440 --> 00:13:29.080
In terms of our App
Engine code, we've

00:13:29.080 --> 00:13:30.740
actually written it in Go.

00:13:30.740 --> 00:13:33.480
And the reason we're using
Go, Google's Go language,

00:13:33.480 --> 00:13:37.100
is because you end up with a
lot of very clean code that's

00:13:37.100 --> 00:13:40.050
easy to read and yet
is quite capable.

00:13:40.050 --> 00:13:42.890
But App Engine supports
many different languages,

00:13:42.890 --> 00:13:44.240
so you could use any of them.

00:13:44.240 --> 00:13:47.080
It's just what we chose
for our implementation.

00:13:47.080 --> 00:13:50.720
So for a Go application
in App Engine,

00:13:50.720 --> 00:13:52.759
your initialization
method is init.

00:13:52.759 --> 00:13:55.050
And what we're going to do
is load all of our locations

00:13:55.050 --> 00:13:56.140
into our Rtree.

00:13:56.140 --> 00:13:59.290
And we're using a great
implementation of an Rtree

00:13:59.290 --> 00:14:02.100
on GitHub by DH
[? Connelly, ?] so thank you

00:14:02.100 --> 00:14:05.790
for that if you're
here or watching.

00:14:05.790 --> 00:14:08.310
And then what we're going to
do is register those handlers.

00:14:08.310 --> 00:14:11.040
So you'll notice here
we say, slash data slash

00:14:11.040 --> 00:14:14.980
subway stations, and then
we give a function name.

00:14:14.980 --> 00:14:17.000
And then we say, slash
data slash subway lines,

00:14:17.000 --> 00:14:18.590
and we give another
function name.

00:14:18.590 --> 00:14:22.220
So basically, whenever we
call that particular endpoint,

00:14:22.220 --> 00:14:24.620
that method is going
to handle it for us.

00:14:24.620 --> 00:14:27.240
Let's have a look at what
that's going to look like.

00:14:27.240 --> 00:14:30.060
So this is the subway
stations handler.

00:14:30.060 --> 00:14:31.820
We're going to call
this thing by saying,

00:14:31.820 --> 00:14:35.200
slash data slash
subway dash stations.

00:14:35.200 --> 00:14:37.810
And we're going to provide a
viewport parameter, which says,

00:14:37.810 --> 00:14:41.680
here's my top right and bottom
left coordinates, and so go

00:14:41.680 --> 00:14:43.780
fetch me the
locations from that.

00:14:43.780 --> 00:14:47.940
So you see here, we're going to
get the viewport parameter out,

00:14:47.940 --> 00:14:50.870
and we're going to
create a rectangle.

00:14:50.870 --> 00:14:54.720
And then because of this really
awesome Rtree implementation,

00:14:54.720 --> 00:14:57.270
we can just easily say,
find me the intersection

00:14:57.270 --> 00:15:00.650
of all the locations that
fit within this rectangle,

00:15:00.650 --> 00:15:03.887
return it as a GeoJSON object.

00:15:03.887 --> 00:15:05.720
And that's really,
really cool, because then

00:15:05.720 --> 00:15:10.150
from our Go component, we're
sending it back as GeoJSON,

00:15:10.150 --> 00:15:11.790
and then, of course,
on the web page,

00:15:11.790 --> 00:15:13.760
we've got that one
line of implementation,

00:15:13.760 --> 00:15:14.468
map.load.geojson.

00:15:14.468 --> 00:15:18.210
Out Really, really neat.

00:15:18.210 --> 00:15:20.410
In terms of the web side
of the implementation,

00:15:20.410 --> 00:15:22.960
those first four are
exactly the same as what

00:15:22.960 --> 00:15:24.640
we had with Josie's example.

00:15:24.640 --> 00:15:25.750
We have a different style.

00:15:25.750 --> 00:15:27.620
We have a different
latitude, longitude.

00:15:27.620 --> 00:15:29.530
But the code is the same.

00:15:29.530 --> 00:15:32.880
What's new is this
map idle listener.

00:15:32.880 --> 00:15:35.100
So let's have a look at that.

00:15:35.100 --> 00:15:36.674
What we do with the
map idle listener

00:15:36.674 --> 00:15:38.090
is we're telling
the map that when

00:15:38.090 --> 00:15:42.730
the camera stops
moving, when it's idle,

00:15:42.730 --> 00:15:44.100
to call this bit of code.

00:15:44.100 --> 00:15:46.420
And all we're doing is
getting those bounds,

00:15:46.420 --> 00:15:49.610
the southwest coordinates and
the northeast coordinates.

00:15:49.610 --> 00:15:52.840
And we're calling slash
data slash subway stations

00:15:52.840 --> 00:15:55.224
and passing in that
viewport parameter,

00:15:55.224 --> 00:15:56.890
and that's what's
going to the back-end.

00:15:56.890 --> 00:15:58.840
But you notice that
when we call this,

00:15:58.840 --> 00:16:01.970
we're saying
map.data.loadgeojson.

00:16:01.970 --> 00:16:04.640
So GeoJSON is, again,
really benefiting us here,

00:16:04.640 --> 00:16:06.440
populating the map dynamically.

00:16:06.440 --> 00:16:10.210
It's handled very easily.

00:16:10.210 --> 00:16:11.250
So that's actually it.

00:16:11.250 --> 00:16:13.814
There was a bunch of boilerplate
code that I didn't show,

00:16:13.814 --> 00:16:15.230
but again, we've
open sourced this

00:16:15.230 --> 00:16:17.330
so you can have a look
at all of the details.

00:16:17.330 --> 00:16:19.660
But that's the map-related code.

00:16:19.660 --> 00:16:22.420
This there's really
not much there.

00:16:22.420 --> 00:16:24.590
And so we have a fairly
sophisticated example

00:16:24.590 --> 00:16:28.240
where we've got interaction
between back-end and front-end

00:16:28.240 --> 00:16:31.680
to provide that awesome
Subway Locator with kind

00:16:31.680 --> 00:16:33.700
of minimal overhead on us.

00:16:33.700 --> 00:16:35.200
So we've used the
JavaScript API,

00:16:35.200 --> 00:16:38.700
we put some custom styling in
there, and we used App Engine.

00:16:38.700 --> 00:16:39.360
We're using Go.

00:16:42.060 --> 00:16:44.920
All right, let's mix
things up even further.

00:16:44.920 --> 00:16:46.670
Let's look at dynamic data.

00:16:46.670 --> 00:16:49.320
And for the dynamic
data example,

00:16:49.320 --> 00:16:52.154
we're going to look
at a Home Finder

00:16:52.154 --> 00:16:54.570
Now, I've marked this as preview
because this is something

00:16:54.570 --> 00:16:55.970
we're still working on.

00:16:55.970 --> 00:16:57.640
But I wanted to show
you architecturally

00:16:57.640 --> 00:16:58.556
how it's going to fit.

00:16:58.556 --> 00:17:02.124
So I don't have a demo
specifically for this one yet,

00:17:02.124 --> 00:17:04.540
but I just wanted to show you
how we're building this out.

00:17:04.540 --> 00:17:09.000
And it should be fairly logical
to see how we're extending it.

00:17:09.000 --> 00:17:11.380
So if you think about
a real estate app,

00:17:11.380 --> 00:17:14.670
the data actually does change
reasonably frequently, right?

00:17:14.670 --> 00:17:18.160
People are going to
post times for viewing

00:17:18.160 --> 00:17:19.460
for a particular property.

00:17:19.460 --> 00:17:22.400
Properties are going to come
on the market for purchase

00:17:22.400 --> 00:17:24.670
or for leasing.

00:17:24.670 --> 00:17:27.359
Eventually, in general--
and people may even rate it.

00:17:27.359 --> 00:17:28.770
They'll put some
photos on there.

00:17:28.770 --> 00:17:32.720
In general, there's going to be
a lot of change on this site.

00:17:32.720 --> 00:17:35.430
So we want to make sure
we can handle that change.

00:17:35.430 --> 00:17:38.360
We want to make sure that we
have a great user experience.

00:17:38.360 --> 00:17:41.140
So if we look at the
architecture for this,

00:17:41.140 --> 00:17:43.980
again, it's similar to the
New York Subway Locator,

00:17:43.980 --> 00:17:46.210
but now, instead
of a GeoJSON file

00:17:46.210 --> 00:17:48.530
that we load into
memory on startup,

00:17:48.530 --> 00:17:52.430
we have a database so that we
can dynamically update data,

00:17:52.430 --> 00:17:54.830
read data, and populate things.

00:17:54.830 --> 00:17:58.920
Now we're going to use Google
Cloud SQL as our database.

00:17:58.920 --> 00:18:00.920
It works really great
with App Engine.

00:18:00.920 --> 00:18:04.510
And specifically,
we're using PostgreSQL.

00:18:04.510 --> 00:18:06.320
And the reason we're
using PostgreSQL

00:18:06.320 --> 00:18:09.570
is because PostgreSQL
has this extension called

00:18:09.570 --> 00:18:13.360
PostGIS, which gives us
spatial access methods.

00:18:13.360 --> 00:18:15.320
So the same type of
intersection that we

00:18:15.320 --> 00:18:18.240
were doing with the Rtree
in the last example,

00:18:18.240 --> 00:18:19.744
we can do with a database.

00:18:19.744 --> 00:18:20.410
Let me show you.

00:18:23.440 --> 00:18:27.160
So our back-end implementation
is, again, much the same

00:18:27.160 --> 00:18:29.170
as the Subway Locator.

00:18:29.170 --> 00:18:31.130
We'll have different
pieces of functionality.

00:18:31.130 --> 00:18:34.770
You might have a different
handler for give me the viewing

00:18:34.770 --> 00:18:38.200
times, or give me the
photos of this place,

00:18:38.200 --> 00:18:41.270
and so on, but architecturally,
it's more or less the same.

00:18:41.270 --> 00:18:43.430
You just might have a
little bit more interaction,

00:18:43.430 --> 00:18:47.110
depending on what you
have in your info windows.

00:18:47.110 --> 00:18:49.300
But the new bit is the database.

00:18:49.300 --> 00:18:52.254
So rather than show you
all of the steps that

00:18:52.254 --> 00:18:53.670
are required to
set up a database,

00:18:53.670 --> 00:18:56.720
I wanted to keep this focused
on the Maps side of things.

00:18:56.720 --> 00:18:58.510
There's a great guide
here that shows you

00:18:58.510 --> 00:19:01.310
how you set up a Google
Cloud instance, Google Cloud

00:19:01.310 --> 00:19:05.220
SQL instance with
Postgres, and then

00:19:05.220 --> 00:19:08.490
how you connect it
using Go to App Engine.

00:19:08.490 --> 00:19:10.830
It's not a lot of work.

00:19:10.830 --> 00:19:12.120
It's fairly easy to follow.

00:19:12.120 --> 00:19:13.280
So it's a great guide.

00:19:13.280 --> 00:19:14.780
But what I really
wanted to call out

00:19:14.780 --> 00:19:17.930
was this SQL statement here.

00:19:17.930 --> 00:19:22.650
So when we ask the back-end
that, hey, here's my viewport.

00:19:22.650 --> 00:19:27.570
I want you to go find me all of
the homes and apartments that

00:19:27.570 --> 00:19:29.740
are in that particular
location, we

00:19:29.740 --> 00:19:31.370
can do it with a
simple SQL query

00:19:31.370 --> 00:19:33.090
like this, where we
just say, give me

00:19:33.090 --> 00:19:36.420
all of the locations that
fit within a bounding box.

00:19:36.420 --> 00:19:38.580
And the reason we're
able to do this

00:19:38.580 --> 00:19:40.840
is because of that
PostGIS extension.

00:19:40.840 --> 00:19:43.550
So it's really, really
worth checking out.

00:19:43.550 --> 00:19:46.480
It just really simplifies
our implementation.

00:19:46.480 --> 00:19:49.560
And of course, once that data
comes back from the table,

00:19:49.560 --> 00:19:53.850
we're going to return it as a
GeoJSON blob to our front-end,

00:19:53.850 --> 00:19:55.740
populate the map,
and we're good to go.

00:19:58.340 --> 00:20:00.160
So the actual web
implementation isn't

00:20:00.160 --> 00:20:02.390
going to change so
much, architecturally.

00:20:02.390 --> 00:20:04.760
Yes, you're going to
have different styles.

00:20:04.760 --> 00:20:07.060
Again, you're going to
have different markers

00:20:07.060 --> 00:20:08.800
for specific--

00:20:08.800 --> 00:20:11.970
whether it's a place for leasing
or a place for purchasing.

00:20:11.970 --> 00:20:14.180
But architecturally,
it's much the same.

00:20:14.180 --> 00:20:16.817
When the viewport changes or
the user clicks on a marker,

00:20:16.817 --> 00:20:18.400
we're going to bring
up and inf window

00:20:18.400 --> 00:20:20.550
with the right amount
of information.

00:20:20.550 --> 00:20:22.450
And you'll probably
have some other HTML

00:20:22.450 --> 00:20:24.530
elements around there as well.

00:20:24.530 --> 00:20:27.438
Really, really simple and
really, really straightforward.

00:20:31.030 --> 00:20:33.656
So we've now covered
three solutions.

00:20:33.656 --> 00:20:35.540
And we're going to get
to my fourth solution

00:20:35.540 --> 00:20:38.620
now, which is the
real-time example.

00:20:38.620 --> 00:20:41.780
And it's-- I'm a bit biased
here, but it's my favorite one.

00:20:41.780 --> 00:20:42.840
It's a Transport Tracker.

00:20:42.840 --> 00:20:44.820
And the reason it's
my favorite one

00:20:44.820 --> 00:20:49.180
is because it's all about
Google I/O, actually.

00:20:49.180 --> 00:20:53.230
So Google I/O is actually being
held in Shoreline Amphitheater,

00:20:53.230 --> 00:20:55.470
for those of you that
are watching online.

00:20:55.470 --> 00:20:59.070
It's not very convenient to get
to if you're in San Francisco

00:20:59.070 --> 00:21:01.370
or if you're flying in.

00:21:01.370 --> 00:21:04.070
So what we did is when we
organized this conference,

00:21:04.070 --> 00:21:06.020
we provided shuttle
buses that take you

00:21:06.020 --> 00:21:11.450
to and from many hotels
all over the area.

00:21:11.450 --> 00:21:13.900
What we thought would
be really useful

00:21:13.900 --> 00:21:16.890
is to build a Transport
Tracker to track these buses.

00:21:16.890 --> 00:21:20.340
So as attendees
here can attest to,

00:21:20.340 --> 00:21:23.864
if you go to the registration
desk or the Maps Sandbox,

00:21:23.864 --> 00:21:25.280
you can come and
see how long it's

00:21:25.280 --> 00:21:29.740
going to take for your rides
to actually get to their hotels

00:21:29.740 --> 00:21:30.695
or from their hotels.

00:21:33.860 --> 00:21:36.260
So in this case, we have
a constant stream of data,

00:21:36.260 --> 00:21:38.984
because our buses are constantly
reporting their location.

00:21:38.984 --> 00:21:40.400
And we're doing
something with it.

00:21:40.400 --> 00:21:42.330
We're going to
analyze that data.

00:21:42.330 --> 00:21:45.090
And I'll show you what kind
of analysis we're doing,

00:21:45.090 --> 00:21:47.780
and then we're going to do some
computation on it before we

00:21:47.780 --> 00:21:50.330
present it to the user.

00:21:50.330 --> 00:21:52.740
Why don't I first
show you a demo.

00:21:59.440 --> 00:22:01.510
All right.

00:22:01.510 --> 00:22:04.000
So this is our dashboard.

00:22:04.000 --> 00:22:07.390
And it's not-- this dashboard
is not meant to be interactive,

00:22:07.390 --> 00:22:10.270
because it's for attendees as
they're walking to their buses

00:22:10.270 --> 00:22:12.250
and looking to leave.

00:22:12.250 --> 00:22:15.610
But what you can see is we
have a number of colored boxes,

00:22:15.610 --> 00:22:18.890
which are just the lines, the
actual bus routes that we have,

00:22:18.890 --> 00:22:21.170
and then you can see
the markers on the map.

00:22:21.170 --> 00:22:24.270
You see pins on the map
that match the hotels,

00:22:24.270 --> 00:22:27.779
and we've colored them based
on the line that they're on.

00:22:27.779 --> 00:22:29.820
And then we have the actual
bus markers, as well,

00:22:29.820 --> 00:22:32.470
that move around as
the buses are moving.

00:22:32.470 --> 00:22:35.020
And just so you know,
this is live data

00:22:35.020 --> 00:22:36.470
that we're looking at.

00:22:36.470 --> 00:22:40.380
I took the risk, and it's
working fine, so that's good.

00:22:40.380 --> 00:22:41.970
The other thing I
want to point out

00:22:41.970 --> 00:22:43.420
is these boxes that are coming.

00:22:43.420 --> 00:22:46.260
These are just HTML
elements that we're drawing,

00:22:46.260 --> 00:22:49.530
but the data there is actually
coming through the Maps APIs.

00:22:49.530 --> 00:22:52.250
So the times that we're
giving you for estimated time

00:22:52.250 --> 00:22:54.050
to travel to each
of these hotels,

00:22:54.050 --> 00:22:56.640
it's actually powered
by our Directions API.

00:22:56.640 --> 00:23:00.491
They give you estimates in
current traffic conditions.

00:23:00.491 --> 00:23:01.740
So that's really, really cool.

00:23:01.740 --> 00:23:05.770
This is like real-time traffic
information powering this app.

00:23:05.770 --> 00:23:07.470
Actually, to take
it one step further,

00:23:07.470 --> 00:23:09.950
we've got a number of buses
that don't leave right now,

00:23:09.950 --> 00:23:12.670
but might leave in the
afternoon to go to the airport.

00:23:12.670 --> 00:23:15.060
And we use our
predictive travel times

00:23:15.060 --> 00:23:18.670
to give you our best guess
at traffic conditions

00:23:18.670 --> 00:23:21.140
at that time of
the day and week.

00:23:21.140 --> 00:23:23.060
So it's not just
real-time traffic.

00:23:23.060 --> 00:23:26.554
You can do some
forecasting here, as well.

00:23:26.554 --> 00:23:28.220
Please come check it
out at the Sandbox.

00:23:28.220 --> 00:23:29.750
for those of you that are here.

00:23:29.750 --> 00:23:32.130
And we have documentation
for those of you

00:23:32.130 --> 00:23:35.800
that are going to follow from
your office or from home.

00:23:35.800 --> 00:23:39.460
So let's switch
back to the slides.

00:23:39.460 --> 00:23:42.230
So I'm super excited about
the Transport Tracker.

00:23:42.230 --> 00:23:44.120
Now, the Transport
Tracker architecturally

00:23:44.120 --> 00:23:45.820
is a little bit
more complicated.

00:23:45.820 --> 00:23:48.480
It's very different to the other
three examples we looked at.

00:23:48.480 --> 00:23:50.490
But basically, we
have Android devices.

00:23:50.490 --> 00:23:52.180
And we wrote a
little Android app

00:23:52.180 --> 00:23:55.290
that goes and reports their
locations to a Firebase

00:23:55.290 --> 00:23:56.810
Realtime Database.

00:23:56.810 --> 00:23:59.540
And the reason we chose a
Firebase Realtime Database is

00:23:59.540 --> 00:24:02.920
because of how good it
is with synchronizing

00:24:02.920 --> 00:24:05.150
that data across all
of the devices that

00:24:05.150 --> 00:24:06.860
are registered for it.

00:24:06.860 --> 00:24:12.520
So we report our location to
a Firebase Realtime Database,

00:24:12.520 --> 00:24:14.500
but I want to share
a secret with you,

00:24:14.500 --> 00:24:16.380
and a somewhat open secret.

00:24:16.380 --> 00:24:19.850
Our mobile devices, no matter
which brand of device you have,

00:24:19.850 --> 00:24:23.200
the GPS on them can be a little
bit unreliable, depending

00:24:23.200 --> 00:24:24.670
on which area you're in.

00:24:24.670 --> 00:24:28.920
If you're in a tunnel, if
you're in an urban environment

00:24:28.920 --> 00:24:32.960
with lots of tall buildings,
the GPS can be inaccurate.

00:24:32.960 --> 00:24:35.800
So even though you have a
straight road like this,

00:24:35.800 --> 00:24:38.380
you might actually find
that the GPS reports

00:24:38.380 --> 00:24:40.600
are saying you're up
here, up here, down here,

00:24:40.600 --> 00:24:43.040
up here, and so on.

00:24:43.040 --> 00:24:45.700
It might not actually show
you exactly on the map--

00:24:45.700 --> 00:24:47.460
on the road itself.

00:24:47.460 --> 00:24:49.780
And we solve this
problem with an API

00:24:49.780 --> 00:24:51.887
that we call the Roads API.

00:24:51.887 --> 00:24:53.470
And the cool thing
about the Roads API

00:24:53.470 --> 00:24:57.540
is you just hand in your points,
your latitudes, longitudes,

00:24:57.540 --> 00:24:59.780
and it returns you
back a different set

00:24:59.780 --> 00:25:03.130
of points that have been
snapped to a road for you.

00:25:03.130 --> 00:25:06.600
And we can do this because we
know that these are vehicles.

00:25:06.600 --> 00:25:09.850
What's even cooler is if
you're on like a roundabout

00:25:09.850 --> 00:25:13.170
or like a curved road,
and your location data

00:25:13.170 --> 00:25:16.880
is being sampled, I don't
know, once every 15 or 30 or 60

00:25:16.880 --> 00:25:19.490
seconds, your
actual-- and you tried

00:25:19.490 --> 00:25:22.750
to plot that, you're going to
have these jagged lines when

00:25:22.750 --> 00:25:24.320
you've got curved roads.

00:25:24.320 --> 00:25:28.280
The Roads API will actually
return you additional points

00:25:28.280 --> 00:25:32.890
in that array so that you
get a smooth, gradual curve

00:25:32.890 --> 00:25:34.924
as you're following that road.

00:25:34.924 --> 00:25:36.090
So it's really, really neat.

00:25:36.090 --> 00:25:39.350
And so when I said we needed
to analyze that data earlier,

00:25:39.350 --> 00:25:40.910
we have a Compute
Engine instance

00:25:40.910 --> 00:25:43.030
that we've written
in Node.js, and what

00:25:43.030 --> 00:25:46.420
we do is we read from the
Firebase Realtime Database.

00:25:46.420 --> 00:25:49.830
We then take those locations,
snap them to a road,

00:25:49.830 --> 00:25:53.840
and then we send them
to the Directions API

00:25:53.840 --> 00:25:56.470
to go ahead and give
us time estimates.

00:25:56.470 --> 00:25:59.860
And then on our web page itself,
we just present that data.

00:25:59.860 --> 00:26:02.980
So we're just literally
reading from that same Firebase

00:26:02.980 --> 00:26:05.410
Realtime Database showing
the position of the buses.

00:26:05.410 --> 00:26:09.260
We have some HTML that goes
and shows the bus routes,

00:26:09.260 --> 00:26:10.590
and so on.

00:26:10.590 --> 00:26:11.450
Really, really fun.

00:26:13.964 --> 00:26:15.380
So on the back-end
side of things,

00:26:15.380 --> 00:26:18.440
what we're going to be doing
is looking at the Firebase

00:26:18.440 --> 00:26:20.717
Realtime Database,
reading those locations,

00:26:20.717 --> 00:26:22.550
snapping them to a road,
and then predicting

00:26:22.550 --> 00:26:25.040
the travel times.

00:26:25.040 --> 00:26:27.290
Let me show you what
that looks like.

00:26:27.290 --> 00:26:30.190
The first thing I want to call
out is we're using Node.js.

00:26:30.190 --> 00:26:34.190
And if you're using Node.js, we
have a fantastic client library

00:26:34.190 --> 00:26:37.470
that wraps our APIs that
makes it really easy to use

00:26:37.470 --> 00:26:41.020
the Google Maps APIs in Node.

00:26:41.020 --> 00:26:44.450
It's so easy that once we've
initialized the client--

00:26:44.450 --> 00:26:48.750
and you can find out how
you set it up at that link--

00:26:48.750 --> 00:26:51.640
to use the roads API,
it's one line of code.

00:26:51.640 --> 00:26:54.680
Literally, we call
snap to roads,

00:26:54.680 --> 00:26:58.040
pass in a bunch of points, we
get a returned set of points.

00:26:58.040 --> 00:27:00.100
That's how easy this
library makes it.

00:27:00.100 --> 00:27:02.725
Just a single line of code.

00:27:02.725 --> 00:27:05.060
So do check out
the library itself.

00:27:05.060 --> 00:27:08.110
In terms of the directions,
we do a little bit more work

00:27:08.110 --> 00:27:08.820
there.

00:27:08.820 --> 00:27:10.610
So think about the route itself.

00:27:10.610 --> 00:27:14.740
We have-- you might be starting
at Shoreline Amphitheater,

00:27:14.740 --> 00:27:17.990
going to five hotels, and then
going to the last destination.

00:27:17.990 --> 00:27:20.115
So you've got an origin,
you've got a destination,

00:27:20.115 --> 00:27:21.740
and you've got all
these stops that you

00:27:21.740 --> 00:27:23.310
need to make in the middle.

00:27:23.310 --> 00:27:25.990
So the way we do it for
the directions request

00:27:25.990 --> 00:27:27.430
is that we take
that first point.

00:27:27.430 --> 00:27:28.430
We call that the origin.

00:27:28.430 --> 00:27:31.040
The last point, we call
that the destination.

00:27:31.040 --> 00:27:33.850
And everything in between,
we just call that a waypoint.

00:27:33.850 --> 00:27:36.440
And the Directions API can
handle these waypoints.

00:27:36.440 --> 00:27:38.460
So when it gives you
those time estimates,

00:27:38.460 --> 00:27:40.980
it's actually calculating
going from point A

00:27:40.980 --> 00:27:44.150
to point B, point B
to point C, and so on.

00:27:44.150 --> 00:27:46.430
In fact, the response
that it gives you,

00:27:46.430 --> 00:27:48.160
which we're going
to look at now,

00:27:48.160 --> 00:27:50.270
breaks it up that way as well.

00:27:50.270 --> 00:27:54.290
So again, because of our client
library that we're using,

00:27:54.290 --> 00:27:57.030
the directions request itself
is just a single line of code

00:27:57.030 --> 00:27:59.190
once you've created
your request.

00:27:59.190 --> 00:28:03.580
And we're saying, give us
a response back in JSON.

00:28:03.580 --> 00:28:05.980
So once we just go do
some error checking,

00:28:05.980 --> 00:28:08.170
make sure that the
response was valid,

00:28:08.170 --> 00:28:11.040
the first thing that we do is
look at the legs of our trip.

00:28:11.040 --> 00:28:15.655
So a leg would be going
from Shoreline to hotel A.

00:28:15.655 --> 00:28:19.990
And then the second leg
would be hotel A to hotel B.

00:28:19.990 --> 00:28:22.310
But for each leg,
you have a number

00:28:22.310 --> 00:28:26.050
of points that you have to
take as well, some paths.

00:28:26.050 --> 00:28:28.330
So for each leg, we can
actually get the duration

00:28:28.330 --> 00:28:30.610
that it takes, and we can
even draw a line if we want,

00:28:30.610 --> 00:28:31.940
a polyline.

00:28:31.940 --> 00:28:34.750
We can see how long it
takes per point, as well.

00:28:34.750 --> 00:28:37.100
So let's look at a
specific leg now,

00:28:37.100 --> 00:28:40.880
from hotel A to hotel B. We can
iterate through that here as

00:28:40.880 --> 00:28:43.460
well, just by looking
at each point,

00:28:43.460 --> 00:28:45.940
and then getting
the time that we

00:28:45.940 --> 00:28:49.130
need to so we can
display that on our page

00:28:49.130 --> 00:28:52.470
or write it back to
our Firebase Database.

00:28:52.470 --> 00:28:55.520
So there's a bit of code here,
but if you break it apart,

00:28:55.520 --> 00:28:56.900
it's fairly simple to follow.

00:28:56.900 --> 00:28:58.180
We have our whole route.

00:28:58.180 --> 00:29:00.680
We go to find each leg,
and within each leg,

00:29:00.680 --> 00:29:02.570
you'll have a-- getting
from hotel A to B

00:29:02.570 --> 00:29:05.140
would be turn right here,
go straight there, turn

00:29:05.140 --> 00:29:07.960
left there, and those are our
points for each of our legs.

00:29:10.560 --> 00:29:11.940
So we use a number of APIs.

00:29:11.940 --> 00:29:14.190
This solution is
entirely [INAUDIBLE].

00:29:14.190 --> 00:29:18.840
We've got the Fused Location
Provider providing the--

00:29:18.840 --> 00:29:20.840
powering the Android
app, so that's

00:29:20.840 --> 00:29:22.470
what we're using
to get locations

00:29:22.470 --> 00:29:24.110
as accurately as possible.

00:29:24.110 --> 00:29:25.930
As possible, as I said.

00:29:25.930 --> 00:29:27.570
We're using Firebase
Realtime Database

00:29:27.570 --> 00:29:30.380
to keep that data in real-time.

00:29:30.380 --> 00:29:32.600
So as soon as we have
a new piece of data,

00:29:32.600 --> 00:29:35.380
we read it from Node.js,
and then the Maps API

00:29:35.380 --> 00:29:37.870
is providing us tons
of capabilities.

00:29:37.870 --> 00:29:40.310
We're not just visualizing
it on a map this time,

00:29:40.310 --> 00:29:43.360
we're using the Directions API
to get real-time or predictive

00:29:43.360 --> 00:29:45.830
travel time information.

00:29:45.830 --> 00:29:48.470
And we're using the Roads
API to snap it to a road.

00:29:48.470 --> 00:29:50.940
In fact, we used the Places
API to provide information

00:29:50.940 --> 00:29:52.930
about Shoreline or
the hotels, as well.

00:29:56.087 --> 00:29:57.920
So that was our four
solutions that I wanted

00:29:57.920 --> 00:29:59.220
to talk to you about today.

00:29:59.220 --> 00:30:03.830
I hope you can see now that by
us providing a reference lounge

00:30:03.830 --> 00:30:06.890
room for you, a reference
implementation, that you can

00:30:06.890 --> 00:30:09.500
see how you can take
this kind of solution

00:30:09.500 --> 00:30:12.650
and use it for whatever
use case you have.

00:30:12.650 --> 00:30:15.620
What I also want to say is this
is something new that we're

00:30:15.620 --> 00:30:17.990
trying, so we think
it's really useful,

00:30:17.990 --> 00:30:19.864
but we need to hear from you.

00:30:19.864 --> 00:30:22.030
We'd love for you to go
check out our documentation,

00:30:22.030 --> 00:30:24.690
check out our source
code, give us feedback.

00:30:24.690 --> 00:30:26.220
We're always listening.

00:30:26.220 --> 00:30:28.230
And tell us what
more you'd like,

00:30:28.230 --> 00:30:32.090
what use cases you'd like us to
look at, what other solutions

00:30:32.090 --> 00:30:33.710
should we build for you?

00:30:33.710 --> 00:30:36.074
Because we think that
this is quite useful,

00:30:36.074 --> 00:30:37.990
but we need to-- we would
love to validate it.

00:30:41.320 --> 00:30:43.310
All of these solutions
that I presented here--

00:30:43.310 --> 00:30:45.050
the Home Finder
is not yet ready,

00:30:45.050 --> 00:30:48.150
but the other three solutions,
you can go check them out

00:30:48.150 --> 00:30:52.620
at developers.googl
e.com/maps/solutions.

00:30:52.620 --> 00:30:55.120
And of course, you can check
out information about all

00:30:55.120 --> 00:31:00.620
of our APIs at
developers.google.com/maps.

00:31:00.620 --> 00:31:03.600
Now, this is the last
session on the Google Maps

00:31:03.600 --> 00:31:05.890
APIs at Google I/O this year.

00:31:05.890 --> 00:31:08.340
If you haven't been able
to attend any of the others

00:31:08.340 --> 00:31:10.660
or you're watching online,
I've put the titles

00:31:10.660 --> 00:31:12.920
up here so that you
can go look them up

00:31:12.920 --> 00:31:17.190
on YouTube at a later stage.

00:31:17.190 --> 00:31:20.580
We're also going to have office
hours at 1:30 in the office

00:31:20.580 --> 00:31:22.335
hours section
today, so if you've

00:31:22.335 --> 00:31:23.710
got any questions,
if you want us

00:31:23.710 --> 00:31:26.290
to have a look at your
specific use cases,

00:31:26.290 --> 00:31:28.840
or you want some more
information on the solutions,

00:31:28.840 --> 00:31:30.750
please come and talk to us.

00:31:30.750 --> 00:31:32.790
With that, I really
want to say thank you.

00:31:32.790 --> 00:31:35.490
I'm always humbled by the
fact that you give up so much

00:31:35.490 --> 00:31:37.330
of your time to be here.

00:31:37.330 --> 00:31:41.080
We hope that what we are sharing
with you is useful and worth

00:31:41.080 --> 00:31:41.880
your time.

00:31:41.880 --> 00:31:44.940
And I'm happy to take a
handful of questions now.

00:31:44.940 --> 00:31:48.050
So if you want to come
to the microphone,

00:31:48.050 --> 00:31:50.420
you can ask your questions.

00:31:50.420 --> 00:31:52.220
[APPLAUSE]

00:31:53.720 --> 00:31:57.070
[MUSIC PLAYING]

