WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.940
[MUSIC PLAYING]

00:00:02.440 --> 00:00:04.430
So by now you know
that there is a lot

00:00:04.430 --> 00:00:07.020
of things that go into
rendering a frame on Android.

00:00:07.020 --> 00:00:08.770
And when frame rate
starts to suffer,

00:00:08.770 --> 00:00:10.700
top priority is
figuring out which

00:00:10.700 --> 00:00:12.680
thing has gone off the rails.

00:00:12.680 --> 00:00:13.830
My name is Colt McAnlis.

00:00:13.830 --> 00:00:15.350
And in order to
help you track down

00:00:15.350 --> 00:00:17.140
where your frame
problems are coming from,

00:00:17.140 --> 00:00:21.490
the M release of Android has
updated its GPU profiling tool.

00:00:21.490 --> 00:00:24.000
Now if you recall, back
in season one of Android

00:00:24.000 --> 00:00:27.399
Performance Patterns, we talked
about the profile GPU tool

00:00:27.399 --> 00:00:29.440
along with the three phases
of rendering pipeline

00:00:29.440 --> 00:00:31.460
that it measured--
recording a display list,

00:00:31.460 --> 00:00:33.760
submitting it to the GPU,
and waiting for the GPU

00:00:33.760 --> 00:00:34.910
to finish its work.

00:00:34.910 --> 00:00:36.170
But let's face it.

00:00:36.170 --> 00:00:38.140
Things are a little
bit more complex

00:00:38.140 --> 00:00:41.000
than that, which is why, in
the M release of Android,

00:00:41.000 --> 00:00:42.700
this tool has been
expanded to show you

00:00:42.700 --> 00:00:45.420
eight different sections
of your rendering frame,

00:00:45.420 --> 00:00:47.390
conveniently and
uniquely colored

00:00:47.390 --> 00:00:49.450
for easy identification.

00:00:49.450 --> 00:00:52.150
Now, you're already familiar
with the first three phases

00:00:52.150 --> 00:00:54.250
here as update,
execute, and process.

00:00:54.250 --> 00:00:55.520
We talked about those before.

00:00:55.520 --> 00:00:57.480
They still report
the same information.

00:00:57.480 --> 00:00:59.400
So we're pretty much
good to go here.

00:00:59.400 --> 00:01:01.910
More interesting are some
of the new stages that

00:01:01.910 --> 00:01:03.800
haven't been reported before.

00:01:03.800 --> 00:01:06.080
Firstly is Sync &amp; Upload.

00:01:06.080 --> 00:01:07.830
This value generally
measures the time

00:01:07.830 --> 00:01:11.830
it takes to upload bitmap
information to the GPU.

00:01:11.830 --> 00:01:14.500
A large graph segment
here means that your app

00:01:14.500 --> 00:01:16.090
is spending a lot
of time doing that,

00:01:16.090 --> 00:01:18.185
like if you suddenly
grab 50 new thumbnails

00:01:18.185 --> 00:01:20.940
or you're uploading
an 8 megapixel image.

00:01:20.940 --> 00:01:22.910
Shrinking this bar
usually means things

00:01:22.910 --> 00:01:24.670
like reducing the
number of visible images

00:01:24.670 --> 00:01:28.800
or reducing and resizing large
images before uploading them

00:01:28.800 --> 00:01:30.250
to the GPU.

00:01:30.250 --> 00:01:32.540
Of course, then there's
Layout and Measure phase,

00:01:32.540 --> 00:01:35.000
which report exactly what you'd
expect-- the amount of time

00:01:35.000 --> 00:01:38.330
spent per frame executing on
layout and on measure callbacks

00:01:38.330 --> 00:01:39.820
in your view hierarchy.

00:01:39.820 --> 00:01:42.791
High values here indicate that
you have a super complex view

00:01:42.791 --> 00:01:43.290
hierarchy.

00:01:43.290 --> 00:01:45.680
And thus performing lots
of measure and layout

00:01:45.680 --> 00:01:47.480
phases across a bunch of views.

00:01:47.480 --> 00:01:49.620
Or you might be the
victim of things

00:01:49.620 --> 00:01:52.390
like double taxation in the
wrong spots in your view

00:01:52.390 --> 00:01:53.110
hierarchy.

00:01:53.110 --> 00:01:54.560
And shrinking this
bar means doing

00:01:54.560 --> 00:01:57.500
stuff we've already talked about
like reducing view hierarchy

00:01:57.500 --> 00:01:59.710
complexity and using view
objects that can reduce

00:01:59.710 --> 00:02:02.250
the chances of double taxation.

00:02:02.250 --> 00:02:04.340
Next is the Animation
phase, which

00:02:04.340 --> 00:02:07.350
just shows how long it took to
evaluate all the animators that

00:02:07.350 --> 00:02:09.610
were running that frame,
the most common of which

00:02:09.610 --> 00:02:11.330
being things like
object animator,

00:02:11.330 --> 00:02:13.980
view property animator,
and transitions.

00:02:13.980 --> 00:02:16.970
If this number is high--
like above 2 milliseconds

00:02:16.970 --> 00:02:20.280
or so-- check to see if your
app uses any custom animators

00:02:20.280 --> 00:02:22.250
or if some unintended
work is happening

00:02:22.250 --> 00:02:24.200
as a result of your
properties being updated.

00:02:24.200 --> 00:02:26.090
I mean, you'd hate to
end up in a situation

00:02:26.090 --> 00:02:29.010
where updating a property
causes a pause due to disk

00:02:29.010 --> 00:02:31.290
I/O every frame or
something like that.

00:02:31.290 --> 00:02:33.370
And then, of course,
there's Input Handling.

00:02:33.370 --> 00:02:35.530
This basically measures
how long the application

00:02:35.530 --> 00:02:39.330
spent handling input events
or, perhaps more accurately,

00:02:39.330 --> 00:02:42.260
how long the application
spent executing your code

00:02:42.260 --> 00:02:44.670
inside an input event callback.

00:02:44.670 --> 00:02:46.420
If this number is
high, this indicates

00:02:46.420 --> 00:02:49.110
that the app is spending a
long time processing the user's

00:02:49.110 --> 00:02:52.080
input, meaning that you might
want to offload or optimize

00:02:52.080 --> 00:02:54.040
that work to a different thread.

00:02:54.040 --> 00:02:57.570
And finally, there's Misc
Time and Vsync Delay.

00:02:57.570 --> 00:02:59.700
If you've ever seen the
logs from Choreographer

00:02:59.700 --> 00:03:02.220
about, like, (DEEP VOICE) missed
vsync by blah, blah, blah,

00:03:02.220 --> 00:03:05.200
skipping, blah, blah, blah,
frames, that's that this thing.

00:03:05.200 --> 00:03:06.920
Basically, it's the
stuff that might

00:03:06.920 --> 00:03:10.180
be occurring on the UI thread
between two consecutive frames

00:03:10.180 --> 00:03:10.890
of rendering.

00:03:10.890 --> 00:03:12.410
If this value is
high, chances are

00:03:12.410 --> 00:03:15.010
you've got some callbacks
and tents or other work

00:03:15.010 --> 00:03:18.470
happening that might be ideal
to push off to another thread.

00:03:18.470 --> 00:03:21.069
But with all these colors
crammed together on the screen,

00:03:21.069 --> 00:03:22.610
it's a little tough
to make out which

00:03:22.610 --> 00:03:24.120
ones are causing the problem.

00:03:24.120 --> 00:03:26.470
That's why, if a frame
spikes above the 60

00:03:26.470 --> 00:03:28.780
millisecond threshold,
you'll notice that its bar is

00:03:28.780 --> 00:03:29.960
drawn more opaque.

00:03:29.960 --> 00:03:32.400
And it's wider than
the bars around it.

00:03:32.400 --> 00:03:34.860
This will hopefully make it
a little easier on your eyes

00:03:34.860 --> 00:03:35.780
to pick out.

00:03:35.780 --> 00:03:38.350
See, as the platform evolves
and developers get more skilled,

00:03:38.350 --> 00:03:41.017
it's only natural that the tools
will evolve alongside it, which

00:03:41.017 --> 00:03:43.641
is why you should check out the
rest of the Android Performance

00:03:43.641 --> 00:03:46.140
Patterns content so you can
stay up to date with the latest

00:03:46.140 --> 00:03:46.990
performance tools.

00:03:46.990 --> 00:03:50.360
And don't forget to join the
Google+ community to get advice

00:03:50.360 --> 00:03:52.130
from other great engineers.

00:03:52.130 --> 00:03:55.440
So keep calm, profile your
code, and always remember,

00:03:55.440 --> 00:03:56.190
perf matters.

00:03:56.190 --> 00:03:58.640
[MUSIC PLAYING]

