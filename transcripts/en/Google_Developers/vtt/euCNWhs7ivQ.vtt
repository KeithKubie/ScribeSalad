WEBVTT
Kind: captions
Language: en

00:00:01.920 --> 00:00:02.390
EMILY FORTUNA: Good afternoon.

00:00:02.390 --> 00:00:03.193
I'm Emily.

00:00:03.193 --> 00:00:04.120
This is Siggy.

00:00:04.120 --> 00:00:07.040
We are two engineers on the
Dart team at Google.

00:00:07.040 --> 00:00:09.900
And today, we'd like to talk
about some of the features in

00:00:09.900 --> 00:00:13.620
Dart that help make your web
app development experience

00:00:13.620 --> 00:00:16.720
more pleasant and productive.

00:00:16.720 --> 00:00:21.290
So this is not--

00:00:21.290 --> 00:00:23.080
oh, OK, thank you.

00:00:23.080 --> 00:00:27.240
This is my impression of
web development today.

00:00:27.240 --> 00:00:32.950
It's thriving, doing well, but
things are maybe evolving

00:00:32.950 --> 00:00:34.930
rather than being designed.

00:00:34.930 --> 00:00:39.570
And as a result, a lot of APIs
are the way they are for

00:00:39.570 --> 00:00:41.780
historical reasons, rather than
making the most sense for

00:00:41.780 --> 00:00:44.670
the developer or being
the most readable.

00:00:44.670 --> 00:00:49.950
Additionally, the way the web
handles errors is they handle

00:00:49.950 --> 00:00:50.870
them silently.

00:00:50.870 --> 00:00:54.690
And this can be great for
prototyping when you're trying

00:00:54.690 --> 00:00:56.450
to get your app up and running
to begin with.

00:00:56.450 --> 00:00:58.940
But when you have larger
applications, it becomes

00:00:58.940 --> 00:01:00.320
frustrating when you're
trying to pinpoint the

00:01:00.320 --> 00:01:01.580
source of your error.

00:01:01.580 --> 00:01:03.600
SIGMUND CHEREM: Now the web also
has a great foundation

00:01:03.600 --> 00:01:05.060
layer at the bottom that
you can use to

00:01:05.060 --> 00:01:06.480
build a richer thing.

00:01:06.480 --> 00:01:08.530
But when you're building large
applications, you start

00:01:08.530 --> 00:01:10.630
needing to structure
applications, thinking about

00:01:10.630 --> 00:01:12.670
models, views, controllers.

00:01:12.670 --> 00:01:15.480
And to cope with this need,
people have created

00:01:15.480 --> 00:01:16.050
frameworks.

00:01:16.050 --> 00:01:18.005
There are actually many
frameworks out there, and they

00:01:18.005 --> 00:01:19.490
[? noticeably don't ?] work well
together when you want to

00:01:19.490 --> 00:01:22.030
actually use a feature or a
widget from one framework into

00:01:22.030 --> 00:01:24.730
an app that uses another
framework.

00:01:24.730 --> 00:01:28.090
So what we're doing with Dart
is we're taking a new--

00:01:31.750 --> 00:01:33.340
click.

00:01:33.340 --> 00:01:35.810
So what we're doing with Dart
is taking a new look at this

00:01:35.810 --> 00:01:39.470
problem and giving you
a pleasant feel.

00:01:39.470 --> 00:01:43.990
So what we want users to have
now, an experience that you

00:01:43.990 --> 00:01:46.170
actually can feel productive
with it.

00:01:46.170 --> 00:01:49.140
So we've taken all these APIs
that have grown organically,

00:01:49.140 --> 00:01:53.110
and we revisit them and do a
design of the HTML libraries

00:01:53.110 --> 00:01:55.080
so that now it all looks uniform
and something that you

00:01:55.080 --> 00:01:56.790
can discover easily.

00:01:56.790 --> 00:01:58.480
We're also taking advantage of
a lot of the features that we

00:01:58.480 --> 00:02:00.040
have in the Dart language.

00:02:00.040 --> 00:02:02.170
Some of the things helping
making things discoverable.

00:02:02.170 --> 00:02:05.330
But it also helps that in Dart,
you can have a lot of

00:02:05.330 --> 00:02:07.040
things that give you warnings
ahead of time.

00:02:07.040 --> 00:02:10.699
We have the notion of optional
types and things that can let

00:02:10.699 --> 00:02:12.630
you know if you're doing
something wrong.

00:02:12.630 --> 00:02:14.630
But if you still want to get
going and ignore the warnings,

00:02:14.630 --> 00:02:16.720
you can do it and continue
your productivity in the

00:02:16.720 --> 00:02:19.050
typical [? prototype ?] mode.

00:02:19.050 --> 00:02:21.330
EMILY FORTUNA: And as Siggy
mentioned, there are a lot of

00:02:21.330 --> 00:02:23.390
frameworks that are being
developed to help you organize

00:02:23.390 --> 00:02:24.540
your models and your views.

00:02:24.540 --> 00:02:27.140
But they don't necessarily
work together.

00:02:27.140 --> 00:02:29.830
And currently, they're
developing some web standards

00:02:29.830 --> 00:02:32.510
to help you do this
on your own.

00:02:32.510 --> 00:02:34.820
And Dart is keeping pace with
these standards and

00:02:34.820 --> 00:02:38.820
integrating them into their
libraries in the language so

00:02:38.820 --> 00:02:43.600
that you can use all these
features on any browser that

00:02:43.600 --> 00:02:46.290
you want, today.

00:02:46.290 --> 00:02:51.180
So we'll take a quick look at
how some of the design of the

00:02:51.180 --> 00:02:54.910
Dart language and Dart libraries
have influenced the

00:02:54.910 --> 00:02:59.950
HTML library in making your
web apps experience.

00:02:59.950 --> 00:03:01.640
So let's take a little
example.

00:03:01.640 --> 00:03:05.980
Let's say you have a collection
of nodes, HTML

00:03:05.980 --> 00:03:08.200
nodes, and you want to
loop through them.

00:03:08.200 --> 00:03:13.010
What might seem like the common
way, or what you would

00:03:13.010 --> 00:03:17.690
think to be the default way to
do this, would possibly trip

00:03:17.690 --> 00:03:19.430
you up in JavaScript.

00:03:19.430 --> 00:03:23.530
So if you do a simple little
For Each loop, you're not

00:03:23.530 --> 00:03:25.340
going to get each node.

00:03:25.340 --> 00:03:27.620
Because you have this array-like
object you're

00:03:27.620 --> 00:03:29.600
looping through, you
get your indexes.

00:03:29.600 --> 00:03:34.440
And then you also get the links
and some other things.

00:03:34.440 --> 00:03:38.360
In Dart, we return native
Dart lists.

00:03:38.360 --> 00:03:42.270
So yes, you can have a pony.

00:03:42.270 --> 00:03:45.690
So everything behaves just like
a Dart list natively in

00:03:45.690 --> 00:03:46.330
the language.

00:03:46.330 --> 00:03:49.700
And so you can loop
through your nodes

00:03:49.700 --> 00:03:51.550
as you would expect.

00:03:51.550 --> 00:03:57.760
And so native lists are not the
only thing we're returning

00:03:57.760 --> 00:03:59.150
from the HTML library.

00:03:59.150 --> 00:04:02.010
We've also adopted a lot of
other Dart types, for example,

00:04:02.010 --> 00:04:08.310
futures and streams, and are
returning them as well.

00:04:08.310 --> 00:04:11.860
So as an example, the
idea behind a future

00:04:11.860 --> 00:04:14.620
is just like a callback.

00:04:14.620 --> 00:04:18.940
But the difference
is that you--

00:04:18.940 --> 00:04:20.450
so you have your--

00:04:23.430 --> 00:04:24.850
this is your function call.

00:04:24.850 --> 00:04:26.820
And when you had a callback,
you'd be

00:04:26.820 --> 00:04:28.290
putting it right here.

00:04:28.290 --> 00:04:30.940
With a future, you return the
future that when the value

00:04:30.940 --> 00:04:32.840
completes, you do
your callback.

00:04:32.840 --> 00:04:34.655
And the great thing about
futures is they

00:04:34.655 --> 00:04:36.580
are easier to compose.

00:04:36.580 --> 00:04:42.170
And so if you have a sequence
of events that needs to run,

00:04:42.170 --> 00:04:45.240
then you can easily
have them chain.

00:04:45.240 --> 00:04:47.710
So we have then, and
do something else.

00:04:47.710 --> 00:04:49.940
As opposed to callbacks, where
you might have sort of

00:04:49.940 --> 00:04:53.420
spaghetti callbacks going from
here to here and so on.

00:04:53.420 --> 00:04:55.140
SIGMUND CHEREM: So you probably,
if you went to the

00:04:55.140 --> 00:04:59.840
earlier talk today on Dart and
what's new in Dart, you

00:04:59.840 --> 00:05:03.280
probably saw some more
examples on futures.

00:05:03.280 --> 00:05:06.410
Just briefly, another thing that
Emily was saying about

00:05:06.410 --> 00:05:07.050
composition.

00:05:07.050 --> 00:05:09.290
Like you can see here, I
have this CatchError.

00:05:09.290 --> 00:05:11.870
This is a way of now handling
both normal control flow and

00:05:11.870 --> 00:05:14.400
exceptional control
flow with futures.

00:05:14.400 --> 00:05:16.340
Another way in which composition
is actually

00:05:16.340 --> 00:05:18.330
helpful with futures is that
you can run multiple

00:05:18.330 --> 00:05:20.110
asynchronous operations
together.

00:05:20.110 --> 00:05:21.870
They can run in parallel, and
they can then create another

00:05:21.870 --> 00:05:24.800
future that waits for an
individual future to complete.

00:05:24.800 --> 00:05:27.470
So when we're looking at the
HTML library, we know that

00:05:27.470 --> 00:05:29.370
there's a lot of things that
are asynchronous by nature.

00:05:29.370 --> 00:05:31.560
And what we want to do is to
take advantage of these types

00:05:31.560 --> 00:05:32.750
and use them in this library.

00:05:32.750 --> 00:05:35.590
Now one clear example
of that is the use

00:05:35.590 --> 00:05:38.520
of a network request.

00:05:38.520 --> 00:05:40.630
When you want to do a network
request, you create an object

00:05:40.630 --> 00:05:41.720
in JavaScript, for example.

00:05:41.720 --> 00:05:44.250
You set it up by sending a
callback so that you know when

00:05:44.250 --> 00:05:47.340
the answer is actually
available, and so on.

00:05:47.340 --> 00:05:49.820
In Dart, we can actually now
just get a future back.

00:05:49.820 --> 00:05:53.250
And now you have all the
existing libraries available

00:05:53.250 --> 00:05:55.450
to you that are functioning
on normal futures.

00:05:55.450 --> 00:05:58.110
You can also use them on
this particular future.

00:05:58.110 --> 00:06:00.780
And in the same way that we have
futures, there's a notion

00:06:00.780 --> 00:06:02.320
of streams, which is
like a repeated

00:06:02.320 --> 00:06:03.640
version of the future.

00:06:03.640 --> 00:06:06.140
And we use that a lot in
events, when listening

00:06:06.140 --> 00:06:09.150
[? for ?] events from the UI.

00:06:09.150 --> 00:06:11.380
EMILY FORTUNA: So Dart
also has libraries.

00:06:11.380 --> 00:06:14.200
And we use this to advantage
in splitting up

00:06:14.200 --> 00:06:16.520
your huge HTML namespace.

00:06:16.520 --> 00:06:17.430
So we have sublibraries.

00:06:17.430 --> 00:06:20.970
For example, all the things that
are related to WebGL are

00:06:20.970 --> 00:06:22.150
in their own space.

00:06:22.150 --> 00:06:26.440
And also, in addition to
semantically grouping these

00:06:26.440 --> 00:06:28.850
things together, this saves
you some typing.

00:06:28.850 --> 00:06:32.090
So for example, we have all the
SVG elements and all the

00:06:32.090 --> 00:06:34.280
SVG types in its own library.

00:06:34.280 --> 00:06:37.140
So you don't have to type "SVG
element." You could just say,

00:06:37.140 --> 00:06:38.160
rect element.

00:06:38.160 --> 00:06:41.550
And so on with HTML elements
and others.

00:06:44.200 --> 00:06:45.910
Dart also has named arguments.

00:06:45.910 --> 00:06:50.160
And we use this to our advantage
in helping make the

00:06:50.160 --> 00:06:52.110
APIs more pleasant
to work with.

00:06:52.110 --> 00:06:54.220
So here's an example we have.

00:06:54.220 --> 00:06:58.140
We're programmatically
initializing a mouse event in

00:06:58.140 --> 00:06:59.890
JavaScript, or one
way to do it.

00:06:59.890 --> 00:07:03.520
And it has a whole bunch of
optional arguments, but

00:07:03.520 --> 00:07:04.420
they're positional.

00:07:04.420 --> 00:07:08.280
And so if we wanted to specify
one non-default value, this

00:07:08.280 --> 00:07:11.040
metaKey value, then we have to
put all of the other default

00:07:11.040 --> 00:07:12.190
values in between.

00:07:12.190 --> 00:07:14.380
And when you look back at this
later, it's a little hard to

00:07:14.380 --> 00:07:17.360
read and understand what was the
programmer intending when

00:07:17.360 --> 00:07:18.820
they wrote this line.

00:07:18.820 --> 00:07:22.030
So with named arguments, all you
have to do is put the ones

00:07:22.030 --> 00:07:23.530
that are not your
default values.

00:07:23.530 --> 00:07:26.780
And so it's much more
clear what the

00:07:26.780 --> 00:07:28.030
programmer's intent was.

00:07:30.810 --> 00:07:36.190
Named arguments also are helpful
for discoverability.

00:07:36.190 --> 00:07:39.410
One other way that the DOM APIs
deal with named arguments

00:07:39.410 --> 00:07:43.720
is they take the dictionary, and
you can have collections--

00:07:43.720 --> 00:07:45.960
or you put in keys
to specify the

00:07:45.960 --> 00:07:48.670
behavior for these functions.

00:07:48.670 --> 00:07:52.790
This works, but it's not
so discoverable.

00:07:52.790 --> 00:07:56.090
So you have to look up what
magic keys do I need to insert

00:07:56.090 --> 00:07:57.430
in my dictionary to
make this call.

00:07:57.430 --> 00:08:00.500
In Dart, we've expanded a lot
of these dictionaries into

00:08:00.500 --> 00:08:04.730
named arguments so that when
you're typing, the Dart Editor

00:08:04.730 --> 00:08:08.280
will autocomplete and show you
that I had these optional

00:08:08.280 --> 00:08:11.080
arguments that I could
also include.

00:08:11.080 --> 00:08:13.260
SIGMUND CHEREM: Now, named
arguments are one way in which

00:08:13.260 --> 00:08:14.990
we can improve discoverability.

00:08:14.990 --> 00:08:16.440
And there are many other things
in the Dart language

00:08:16.440 --> 00:08:17.445
that also help.

00:08:17.445 --> 00:08:19.570
And the fact that we actually
have types, and we can

00:08:19.570 --> 00:08:21.560
actually exploit this
in many ways.

00:08:21.560 --> 00:08:24.390
For example, when we're talking
about CSS and doing

00:08:24.390 --> 00:08:27.180
CSS manipulations, the very
common way to do that today in

00:08:27.180 --> 00:08:29.820
JavaScript is to do strings and
concatenate strings and

00:08:29.820 --> 00:08:30.880
put them together.

00:08:30.880 --> 00:08:33.030
Now here, we can actually have
a specific type for talking

00:08:33.030 --> 00:08:35.010
about the style, for talking
about the property of the

00:08:35.010 --> 00:08:36.690
background color of this
particular style

00:08:36.690 --> 00:08:38.289
object, and so on.

00:08:38.289 --> 00:08:39.980
Now what we're going to do
next is Emily's going to

00:08:39.980 --> 00:08:43.450
actually show you a little
demo in our editor and

00:08:43.450 --> 00:08:46.230
demonstrate a little bit of
how these things work.

00:08:46.230 --> 00:08:48.360
EMILY FORTUNA: So as a matter
of fact, this whole

00:08:48.360 --> 00:08:53.175
presentation we're presenting
is a web page.

00:08:53.175 --> 00:08:54.640
It's a web app.

00:08:54.640 --> 00:08:57.120
And it is written in Dart.

00:08:57.120 --> 00:09:00.580
And so our demo will be adding
on some functionality to your

00:09:00.580 --> 00:09:03.260
presentation.

00:09:03.260 --> 00:09:06.960
So in the presentation mode,
let's say I have this div

00:09:06.960 --> 00:09:08.700
here, and I want to draw
your attention to it.

00:09:08.700 --> 00:09:14.480
So might want a yellow box to
grow when I mouse over it.

00:09:14.480 --> 00:09:15.810
So how do we do that?

00:09:15.810 --> 00:09:19.640
Well, we flip over to
our Dart editor.

00:09:19.640 --> 00:09:23.270
And this div's ID is
discoverable, so

00:09:23.270 --> 00:09:24.540
we'll look it up.

00:09:24.540 --> 00:09:25.790
So first we query.

00:09:32.710 --> 00:09:35.590
And then we want to see
what events are

00:09:35.590 --> 00:09:37.230
available for this div.

00:09:37.230 --> 00:09:39.990
So we say, on, and autocomplete
helps us.

00:09:39.990 --> 00:09:44.590
And we want a mouse event, so
onMouse, and we'll do Over.

00:09:44.590 --> 00:09:47.910
A mouseover produces a
stream of repeated

00:09:47.910 --> 00:09:49.750
events when this happens.

00:09:49.750 --> 00:09:52.870
So we want to listen
to those events.

00:09:52.870 --> 00:10:01.740
And when this happens, we want
to call toggleStyle to--

00:10:01.740 --> 00:10:05.950
I've already added the CSS
title to add this little,

00:10:05.950 --> 00:10:07.200
bring your attention
to the box.

00:10:11.280 --> 00:10:12.530
So we save and refresh.

00:10:16.020 --> 00:10:18.740
Now when I mouseover this
div, we've got a nice

00:10:18.740 --> 00:10:20.438
little yellow glow.

00:10:20.438 --> 00:10:27.530
[APPLAUSE]

00:10:27.530 --> 00:10:30.510
EMILY FORTUNA: Also, jQuery is
a super popular framework for

00:10:30.510 --> 00:10:32.910
developing your web apps.

00:10:32.910 --> 00:10:34.300
And for a couple different
reasons.

00:10:34.300 --> 00:10:41.110
It helps with working with CSS
transitions and modifications.

00:10:41.110 --> 00:10:44.450
And it also helps eliminate
some cross-browser

00:10:44.450 --> 00:10:45.420
differences.

00:10:45.420 --> 00:10:48.670
In Dart, we provide these things
in the language itself.

00:10:48.670 --> 00:10:51.840
So you don't have to import any
extra libraries, and we

00:10:51.840 --> 00:10:53.640
worry about all this for you.

00:10:53.640 --> 00:10:56.540
So as an example, let's take
a look at CSS manipulation.

00:10:56.540 --> 00:11:03.220
At the very top, we have how you
would add a class in plain

00:11:03.220 --> 00:11:04.800
old JavaScript.

00:11:04.800 --> 00:11:08.310
And as I mentioned, this
presentation is in Dart.

00:11:08.310 --> 00:11:10.840
So we're querying all our
slides, and we're adding this

00:11:10.840 --> 00:11:13.840
swing class to the elements.

00:11:13.840 --> 00:11:16.490
In jQuery, it's much
more concise.

00:11:16.490 --> 00:11:20.340
You just query all your slides,
and you call addClass.

00:11:20.340 --> 00:11:21.650
In Dart, we have
the same idea.

00:11:21.650 --> 00:11:27.162
We have a collection of the
classes that are applied to

00:11:27.162 --> 00:11:28.200
the element.

00:11:28.200 --> 00:11:30.880
And we add swing to them.

00:11:30.880 --> 00:11:36.140
So as a demo of how this
works, since this is a

00:11:36.140 --> 00:11:39.890
presentation written in HTML,
you think, well, great.

00:11:39.890 --> 00:11:42.920
I would love to write
all of my other

00:11:42.920 --> 00:11:44.480
presentations in HTML.

00:11:44.480 --> 00:11:48.260
I really would like to switch
and use the web for all of

00:11:48.260 --> 00:11:49.290
these things that I develop.

00:11:49.290 --> 00:11:52.550
But in my favorite presentation
software, there's

00:11:52.550 --> 00:11:56.450
this great animation effect that
really is important to

00:11:56.450 --> 00:12:00.410
drive the point home, and
I can't switch to HTML.

00:12:00.410 --> 00:12:01.430
Never fear.

00:12:01.430 --> 00:12:04.960
We have ridiculous slide
transitions as well.

00:12:04.960 --> 00:12:09.950
So with this little button, I'm
adding this swing class.

00:12:09.950 --> 00:12:16.960
And we have absurd slide
transitions.

00:12:16.960 --> 00:12:19.530
All right.

00:12:19.530 --> 00:12:22.820
Additionally, Dart works--

00:12:22.820 --> 00:12:29.890
so JavaScript has, and jQuery
works on, improving your--

00:12:29.890 --> 00:12:32.670
eliminating some cross-browser
differences.

00:12:32.670 --> 00:12:35.530
So an example, we have WebRTC,
which is the Real Time

00:12:35.530 --> 00:12:38.570
Communication protocol for
video chat and such.

00:12:38.570 --> 00:12:42.280
And a lot of browsers have
implemented this, but they are

00:12:42.280 --> 00:12:44.110
behind various prefixes.

00:12:44.110 --> 00:12:47.370
So you have Mozilla
WebKit and so on.

00:12:47.370 --> 00:12:49.730
And so if you wanted to use this
in JavaScript, you'd need

00:12:49.730 --> 00:12:53.090
to determine which of these was
defined and then call it.

00:12:53.090 --> 00:12:55.550
In Dart, we deal with
all of this for you.

00:12:55.550 --> 00:12:57.230
So all you'd call
is getUserMedia.

00:12:57.230 --> 00:13:00.640
And we determine which browser
you're on and so on.

00:13:00.640 --> 00:13:05.600
And the same is for CSS
selectors as well.

00:13:05.600 --> 00:13:08.990
So as a little example, we
have our WebRTC demo.

00:13:18.600 --> 00:13:21.530
And OK, so this is Chrome,
small potatoes.

00:13:21.530 --> 00:13:25.425
Let's switch over to
another browser.

00:13:27.990 --> 00:13:30.863
And I will prove that it
works here as well.

00:13:34.592 --> 00:13:35.842
Yes.

00:13:40.570 --> 00:13:41.070
All right.

00:13:41.070 --> 00:13:42.320
Oh, let's stop that.

00:13:47.940 --> 00:13:50.850
jQuery has also popularized
the idea of chaining.

00:13:50.850 --> 00:13:55.340
How this works is we have a
snippet of jQuery, not how you

00:13:55.340 --> 00:13:57.240
would actually write
it in real life.

00:13:57.240 --> 00:14:00.880
But what we're doing is we're
applying a bunch of different

00:14:00.880 --> 00:14:07.130
styles to this cascades-demo
element.

00:14:07.130 --> 00:14:11.000
And so we're calling element.css
repeatedly to

00:14:11.000 --> 00:14:13.120
apply all of these different
classes.

00:14:13.120 --> 00:14:15.510
jQuery uses--

00:14:15.510 --> 00:14:18.260
often, in many of its APIs,
will return the original

00:14:18.260 --> 00:14:19.120
calling object.

00:14:19.120 --> 00:14:22.067
So it will return this element
so that then, you can chain

00:14:22.067 --> 00:14:22.540
your calls.

00:14:22.540 --> 00:14:27.290
You could say element.css
textShadow, .css fontFamily,

00:14:27.290 --> 00:14:29.700
and so on, so that
you don't have to

00:14:29.700 --> 00:14:31.040
repeat yourself as much.

00:14:31.040 --> 00:14:34.190
In Dart, we have the
same thing in the

00:14:34.190 --> 00:14:35.540
form of method cascades.

00:14:35.540 --> 00:14:38.460
And the great thing with method
cascades is they work

00:14:38.460 --> 00:14:40.326
on any function in Dart.

00:14:40.326 --> 00:14:45.400
So you don't have to rely on the
API designer to write it

00:14:45.400 --> 00:14:46.240
that way for you.

00:14:46.240 --> 00:14:49.080
You can use it on any
function you want.

00:14:49.080 --> 00:14:51.810
So this also works on functions
as well as setters.

00:14:51.810 --> 00:14:57.310
So this example, we're setting
a bunch of different styles

00:14:57.310 --> 00:15:01.650
using this double dot notation
to set some styles.

00:15:01.650 --> 00:15:08.190
And so as a demo, we are setting
the style of our web

00:15:08.190 --> 00:15:10.400
page, our HTML presentation.

00:15:10.400 --> 00:15:19.420
And what better style to set
than '90s retro webpage?

00:15:19.420 --> 00:15:20.354
All right.

00:15:20.354 --> 00:15:22.689
We'll go back to the future.

00:15:22.689 --> 00:15:23.160
SIGMUND CHEREM: Cool.

00:15:23.160 --> 00:15:26.480
So we've seen great things
that we've done so far,

00:15:26.480 --> 00:15:27.620
improving that base layer.

00:15:27.620 --> 00:15:29.700
How do you actually interact
with HTML.

00:15:29.700 --> 00:15:31.570
The next thing we're going to
look at is what happens at a

00:15:31.570 --> 00:15:32.130
higher level?

00:15:32.130 --> 00:15:34.460
How do you build large
web applications?

00:15:34.460 --> 00:15:36.750
Now, I don't know about you,
but sometimes I'm curious

00:15:36.750 --> 00:15:39.320
about a very awesome feature
that I see on a webpage.

00:15:39.320 --> 00:15:41.600
And I open up the Web
Inspector, and I see

00:15:41.600 --> 00:15:43.020
something like this.

00:15:43.020 --> 00:15:43.410
Right.

00:15:43.410 --> 00:15:47.220
This is actually my Gmail inbox,
and it's obviously not

00:15:47.220 --> 00:15:49.030
very readable.

00:15:49.030 --> 00:15:52.730
In fact, there, I think that's
actually part of--

00:15:52.730 --> 00:15:57.070
each one of those divs can
actually represent one of my

00:15:57.070 --> 00:15:59.450
emails as like threads
on the inbox.

00:15:59.450 --> 00:16:02.960
But what this highlights is
that we're actually using

00:16:02.960 --> 00:16:05.020
something else to
build this app.

00:16:05.020 --> 00:16:09.530
It's very unlikely that people
wrote the code this way.

00:16:09.530 --> 00:16:11.480
What we have is that people
use frameworks.

00:16:11.480 --> 00:16:13.930
And these frameworks actually
generate or try and form the

00:16:13.930 --> 00:16:15.690
code and minimize things
in a way that it

00:16:15.690 --> 00:16:16.865
will generate that.

00:16:16.865 --> 00:16:18.820
Now if you use a different
framework, most likely it's

00:16:18.820 --> 00:16:20.360
going to minimize it in a
different way, and they're not

00:16:20.360 --> 00:16:22.350
going to be compatible
with each other.

00:16:22.350 --> 00:16:24.300
So this is a general
problem on the web.

00:16:24.300 --> 00:16:27.540
And many people out there had
been thinking about this and

00:16:27.540 --> 00:16:29.100
thinking how to make these
things better.

00:16:29.100 --> 00:16:31.150
And it's actually very exciting
times because there

00:16:31.150 --> 00:16:34.190
have been now a lot of proposals
and new standards

00:16:34.190 --> 00:16:36.680
being proposed to add
a lot of features

00:16:36.680 --> 00:16:37.980
to the browser itself.

00:16:37.980 --> 00:16:40.020
And the idea is that all the
things that are done by these

00:16:40.020 --> 00:16:42.470
frameworks can be supported
directly in the browser.

00:16:42.470 --> 00:16:43.700
And that way, they can actually

00:16:43.700 --> 00:16:46.210
interoperate more easily.

00:16:46.210 --> 00:16:49.620
So you might have actually seen
a lot of this content

00:16:49.620 --> 00:16:53.600
earlier in Google I/O, in
different talks, like

00:16:53.600 --> 00:16:55.580
different web components
talks and so on.

00:16:55.580 --> 00:16:59.200
But I'm going to dive a little
bit more into this in the

00:16:59.200 --> 00:17:00.770
perspective of Dart.

00:17:00.770 --> 00:17:02.220
Now what are all the
standards about?

00:17:02.220 --> 00:17:05.109
There are mainly like two points
I want to highlight.

00:17:05.109 --> 00:17:07.430
One is how do you actually
save time and be more

00:17:07.430 --> 00:17:10.819
productive writing code so you
don't write glue code, stuff

00:17:10.819 --> 00:17:12.369
that is just always the same.

00:17:12.369 --> 00:17:15.410
And a typical example of that is
binding your UI in the part

00:17:15.410 --> 00:17:16.520
of the view [? view ?]

00:17:16.520 --> 00:17:17.650
with your data model.

00:17:17.650 --> 00:17:19.380
And it's very common that you
want to actually do that

00:17:19.380 --> 00:17:20.880
automatically.

00:17:20.880 --> 00:17:23.069
The other part is how do you
actually encapsulate what

00:17:23.069 --> 00:17:25.230
you're writing and make it
reusable so you can actually

00:17:25.230 --> 00:17:27.200
work with a lot of people,
and you can share

00:17:27.200 --> 00:17:28.500
your code with others.

00:17:28.500 --> 00:17:30.640
And this is where things like
web components, custom

00:17:30.640 --> 00:17:33.080
elements, Shadow DOM, and all
these things come in.

00:17:33.080 --> 00:17:36.040
So in Dart, we have this project
called Web UI where we

00:17:36.040 --> 00:17:39.170
are keeping pace with what all
these standards are doing and

00:17:39.170 --> 00:17:41.110
implement them for you in
Dart so you can start

00:17:41.110 --> 00:17:43.590
experimenting, giving us
feedback, so we can actually

00:17:43.590 --> 00:17:44.300
give it back [? into ?]

00:17:44.300 --> 00:17:45.395
the entire community.

00:17:45.395 --> 00:17:47.360
EMILY FORTUNA: And use
them on any browser.

00:17:47.360 --> 00:17:48.210
SIGMUND CHEREM: That's right.

00:17:48.210 --> 00:17:50.910
So what we're going to do next
is talk in a little bit more

00:17:50.910 --> 00:17:53.080
detail about some of
these features.

00:17:53.080 --> 00:17:56.370
So the first one I want to talk
about is observability.

00:17:56.370 --> 00:17:59.470
In JavaScript, ECMAScript 7,
there's a proposal that has

00:17:59.470 --> 00:18:01.100
been accepted to add
the notion of

00:18:01.100 --> 00:18:03.500
observing data changes.

00:18:03.500 --> 00:18:05.570
So the idea that you can create
an object, and then you

00:18:05.570 --> 00:18:07.710
can call something like
Object.observe.

00:18:07.710 --> 00:18:10.320
And then after that point, any
time you mutate that object,

00:18:10.320 --> 00:18:13.390
you add a property, you change
the value of the property, you

00:18:13.390 --> 00:18:15.490
will get notified
in a callback.

00:18:15.490 --> 00:18:20.380
So something very similar we're
going to be actually

00:18:20.380 --> 00:18:21.670
supporting in Dart.

00:18:21.670 --> 00:18:24.280
The way we declare it is
slightly different, just in

00:18:24.280 --> 00:18:26.400
the way that the languages are
just slightly different.

00:18:26.400 --> 00:18:28.970
In our case, we use an
annotation saying @observable,

00:18:28.970 --> 00:18:31.440
and we're going to make it,
that class, in some way

00:18:31.440 --> 00:18:33.080
observable.

00:18:33.080 --> 00:18:35.570
So once you have this, there's
actually a great

00:18:35.570 --> 00:18:36.680
power in your hand.

00:18:36.680 --> 00:18:39.370
You can start writing programs
in a more reactive way.

00:18:39.370 --> 00:18:41.770
You can listen to the changes
that come from data from the

00:18:41.770 --> 00:18:43.930
network and react to that
in your own way.

00:18:43.930 --> 00:18:46.720
But it's especially handy when
you want to glue this code

00:18:46.720 --> 00:18:48.690
into your UI and
create now data

00:18:48.690 --> 00:18:49.940
bindings that are automatic.

00:18:52.410 --> 00:18:55.970
EMILY FORTUNA: So as an example
of this, we have a

00:18:55.970 --> 00:18:57.380
little counter here.

00:18:57.380 --> 00:19:01.710
And this is useful in the
context of our presentation if

00:19:01.710 --> 00:19:02.920
we're watching time.

00:19:02.920 --> 00:19:05.760
This is counting since we've
refreshed the page.

00:19:05.760 --> 00:19:07.230
How do we implement this?

00:19:07.230 --> 00:19:10.000
Well, let's take a look
at the Dart code.

00:19:10.000 --> 00:19:11.600
We have a Counter class.

00:19:11.600 --> 00:19:14.830
And the interesting part
is this down here.

00:19:14.830 --> 00:19:18.870
Our timer is every second
incrementing our counter.

00:19:18.870 --> 00:19:20.170
OK, so that's fine.

00:19:20.170 --> 00:19:21.750
But what does it look like?

00:19:21.750 --> 00:19:25.565
How do we notify the web page
to update and redraw?

00:19:28.090 --> 00:19:29.640
That's it.

00:19:29.640 --> 00:19:33.280
We put in this little double
mustache syntax.

00:19:33.280 --> 00:19:35.640
And this tells us that
we need-- we

00:19:35.640 --> 00:19:37.850
want to bind the values.

00:19:37.850 --> 00:19:41.710
When value is incremented, we
want to update the webpage.

00:19:41.710 --> 00:19:44.790
And we, underneath the scenes,
take care of all the

00:19:44.790 --> 00:19:48.670
boilerplate of when to update
the view and listening and so

00:19:48.670 --> 00:19:50.930
on, so you don't have
to worry about this.

00:19:50.930 --> 00:19:52.750
SIGMUND CHEREM: So now the
syntax that you see here might

00:19:52.750 --> 00:19:54.820
be actually slightly different
than what you've seen in other

00:19:54.820 --> 00:19:57.260
presentations because everything
is actually

00:19:57.260 --> 00:19:58.970
changing under our feet,
and we're just

00:19:58.970 --> 00:20:00.050
keeping pace with that.

00:20:00.050 --> 00:20:02.190
So this is actually likely
going to change in just a

00:20:02.190 --> 00:20:05.670
couple days, in fact, to
be slightly different.

00:20:05.670 --> 00:20:09.850
So what we just show here
is an example of one

00:20:09.850 --> 00:20:10.980
direction of bindings.

00:20:10.980 --> 00:20:13.340
You have something changing in
your data model, and you want

00:20:13.340 --> 00:20:14.980
to reflect that in the UI.

00:20:14.980 --> 00:20:16.600
Another thing that you
might want to do is

00:20:16.600 --> 00:20:17.650
go the other way.

00:20:17.650 --> 00:20:21.026
You can actually then have an
input box, and then any change

00:20:21.026 --> 00:20:22.810
that you make in the input
box be reflected

00:20:22.810 --> 00:20:24.200
in your data model.

00:20:24.200 --> 00:20:26.970
So here I have a little example
where on the first

00:20:26.970 --> 00:20:28.550
line, we have something
that is similar

00:20:28.550 --> 00:20:29.770
to what we had before.

00:20:29.770 --> 00:20:32.730
I have a model where I'm going
to actually read a value and

00:20:32.730 --> 00:20:34.040
put it in my UI.

00:20:34.040 --> 00:20:36.550
And on the second line, I have
the input box and the special

00:20:36.550 --> 00:20:38.940
attribute bind-value
does the other

00:20:38.940 --> 00:20:40.810
direction of the binding.

00:20:40.810 --> 00:20:43.100
Now here's the same
code running.

00:20:43.100 --> 00:20:53.240
And whenever I type something
here, with typos, you see them

00:20:53.240 --> 00:20:56.510
reflected immediately on the
other part of the UI.

00:20:56.510 --> 00:20:59.880
So what's going on here is
actually, when you actually

00:20:59.880 --> 00:21:01.940
look at the Dart code,
[INAUDIBLE]

00:21:01.940 --> 00:21:02.920
is again very simple.

00:21:02.920 --> 00:21:04.500
It's just an observable
object, and that's

00:21:04.500 --> 00:21:07.020
all I had to write.

00:21:07.020 --> 00:21:10.050
Now, bindings are very useful
for these simple examples, but

00:21:10.050 --> 00:21:13.620
they actually scale to make
it possible to write more

00:21:13.620 --> 00:21:16.100
sophisticated things as well.

00:21:16.100 --> 00:21:18.240
Given that we're doing this
presentation in Dart, here's

00:21:18.240 --> 00:21:20.100
another interesting thing
that we could do.

00:21:20.100 --> 00:21:22.550
Say I want to have an index
of all my slides.

00:21:22.550 --> 00:21:26.090
So what I'm showing here is a
little list of all the slide

00:21:26.090 --> 00:21:28.080
titles that we have in
this presentation.

00:21:28.080 --> 00:21:31.670
And I can even search for them,
and I can say "future."

00:21:31.670 --> 00:21:34.140
I can actually click on one of
those slides, and it jumps to

00:21:34.140 --> 00:21:35.400
the slide number.

00:21:35.400 --> 00:21:38.210
And I can come back.

00:21:38.210 --> 00:21:42.710
Now this is all written using
a lot of these bindings and

00:21:42.710 --> 00:21:45.370
features that are becoming
available and things like

00:21:45.370 --> 00:21:47.050
model-driven views.

00:21:47.050 --> 00:21:49.470
So here's what that
code looks like.

00:21:49.470 --> 00:21:51.470
What we have in the first two
lines is similar to what you

00:21:51.470 --> 00:21:52.540
saw before.

00:21:52.540 --> 00:21:54.540
It's an input box where
we're binding the

00:21:54.540 --> 00:21:55.500
value of the query.

00:21:55.500 --> 00:21:58.480
So any time you type something
in the search box, that's now

00:21:58.480 --> 00:22:01.830
bound into the particular
variable.

00:22:01.830 --> 00:22:04.140
Then we have this other
variable, matchingTitles, that

00:22:04.140 --> 00:22:06.870
is selecting those things
that actually match

00:22:06.870 --> 00:22:08.360
that particular query.

00:22:08.360 --> 00:22:11.870
And we're using that inside of
a template to do this kind of

00:22:11.870 --> 00:22:13.280
iteration process.

00:22:13.280 --> 00:22:15.360
We're saying that for every
title that matches, we're

00:22:15.360 --> 00:22:17.790
actually creating a list
item in our UI.

00:22:17.790 --> 00:22:19.820
And here's essentially where
we're actually putting the

00:22:19.820 --> 00:22:21.950
text of the title
in our slide.

00:22:21.950 --> 00:22:26.000
And finally, we have this extra
attribute here to hook

00:22:26.000 --> 00:22:27.200
up our event listening.

00:22:27.200 --> 00:22:29.170
So anytime we click on
it, we're jumping to

00:22:29.170 --> 00:22:30.870
a particular slide.

00:22:30.870 --> 00:22:32.590
Now, this is actually something
that looks similar

00:22:32.590 --> 00:22:36.810
to how normal HTML allowed you
to put, like, event handlers

00:22:36.810 --> 00:22:37.420
in JavaScript.

00:22:37.420 --> 00:22:40.050
But there's a difference here,
in that we're actually

00:22:40.050 --> 00:22:43.330
transforming this and generating
code in a way that

00:22:43.330 --> 00:22:45.290
it would actually be efficient
by default.

00:22:45.290 --> 00:22:47.160
It's actually doing the code
that you would normally write,

00:22:47.160 --> 00:22:48.970
if you want to make it
efficient, by hand.

00:22:48.970 --> 00:22:51.040
Like finding the element and
attaching [? event handlers ?]

00:22:51.040 --> 00:22:52.300
programmatically.

00:22:52.300 --> 00:22:56.070
And it's also made in a way
that is secure by default.

00:22:56.070 --> 00:22:58.930
And I want to spend a couple
more seconds talking about

00:22:58.930 --> 00:23:00.330
security in general.

00:23:00.330 --> 00:23:03.160
So in the Dart team, we care a
lot about how do we actually

00:23:03.160 --> 00:23:04.900
make creating web applications
easier.

00:23:04.900 --> 00:23:08.030
And one thing that people
stumble a lot is on how do you

00:23:08.030 --> 00:23:10.450
protect your application from
things like cross-site

00:23:10.450 --> 00:23:12.110
scripting attacks.

00:23:12.110 --> 00:23:14.290
When you're using things like
templating, a lot of the

00:23:14.290 --> 00:23:16.800
things can actually be prevented
more easily.

00:23:16.800 --> 00:23:19.270
Particularly when you see this
binding here, we know that I'm

00:23:19.270 --> 00:23:22.170
injecting some content in
the middle of that HTML.

00:23:22.170 --> 00:23:25.800
But because I know where I am,
I know for once that, OK, I'm

00:23:25.800 --> 00:23:27.350
just been putting text here.

00:23:27.350 --> 00:23:28.750
There's no way I can actually
put something

00:23:28.750 --> 00:23:30.070
like a script tag.

00:23:30.070 --> 00:23:32.630
I know that I'm injecting it
that way when I clearly am

00:23:32.630 --> 00:23:34.420
running this code.

00:23:34.420 --> 00:23:35.680
And there are many other
things like that,

00:23:35.680 --> 00:23:36.900
that you can do.

00:23:36.900 --> 00:23:40.860
So even in our .HTML libraries,
we're currently

00:23:40.860 --> 00:23:42.350
looking into how we make
something like

00:23:42.350 --> 00:23:43.250
[? inner HTML ?]

00:23:43.250 --> 00:23:48.050
safer and have either validation
or checks or things

00:23:48.050 --> 00:23:48.920
that you can do.

00:23:48.920 --> 00:23:51.410
And if you're using templating,
reduce the cost as

00:23:51.410 --> 00:23:53.430
much as possible so you
don't see any overhead

00:23:53.430 --> 00:23:54.680
[? at runtime. ?]

00:23:56.110 --> 00:23:56.510
Cool.

00:23:56.510 --> 00:24:00.540
So now that we have these views,
and we know we can

00:24:00.540 --> 00:24:02.810
create something really pretty,
the next thing we want

00:24:02.810 --> 00:24:06.440
to do is make it reusable.

00:24:06.440 --> 00:24:09.470
So this where custom elements
and Shadow DOM and all these

00:24:09.470 --> 00:24:12.220
things come along.

00:24:12.220 --> 00:24:15.330
So here at the bottom, there's a
little bit of sample syntax.

00:24:15.330 --> 00:24:17.750
And you might have seen
this earlier today.

00:24:17.750 --> 00:24:21.390
Basically the idea is that I can
define a view and wrap it

00:24:21.390 --> 00:24:22.080
with a name.

00:24:22.080 --> 00:24:24.780
And I'm going to use this name
as a tag in my HTML.

00:24:24.780 --> 00:24:27.280
So here I'm saying the name of
my tag or something like

00:24:27.280 --> 00:24:28.230
my-element.

00:24:28.230 --> 00:24:31.000
And later on, I can use that tag
in my HTML in the bottom

00:24:31.000 --> 00:24:32.500
thing, my-element foo.

00:24:32.500 --> 00:24:34.580
EMILY FORTUNA: And the way I
like to think about this is

00:24:34.580 --> 00:24:36.780
object-oriented programming
for HTML.

00:24:36.780 --> 00:24:40.070
So here, we're simply
declaring our

00:24:40.070 --> 00:24:41.980
custom element or class.

00:24:41.980 --> 00:24:43.250
And then we're instantiating
it.

00:24:43.250 --> 00:24:46.950
And it can varying behavior
depending on each element that

00:24:46.950 --> 00:24:48.343
you instantiate.

00:24:48.343 --> 00:24:49.190
SIGMUND CHEREM: Exactly.

00:24:49.190 --> 00:24:52.510
So one thing that I can
highlight related to that is

00:24:52.510 --> 00:24:56.530
that custom elements allow you
to also override or extend the

00:24:56.530 --> 00:24:58.870
behavior of other elements
that exist in the DOM.

00:24:58.870 --> 00:25:01.440
And in this example we have
here, it is extend div.

00:25:01.440 --> 00:25:04.910
And when I see that, I know that
actually this is going to

00:25:04.910 --> 00:25:06.920
behave like a block element,
not like a span

00:25:06.920 --> 00:25:08.340
element, for example.

00:25:08.340 --> 00:25:10.910
And when you instantiate
an element, there's an

00:25:10.910 --> 00:25:13.530
alternative syntax that is
based on the fact that it

00:25:13.530 --> 00:25:15.180
knows that, OK, there's
some base element

00:25:15.180 --> 00:25:16.330
that we know out there.

00:25:16.330 --> 00:25:18.780
And I can say, well, this
particular div is an instance

00:25:18.780 --> 00:25:22.390
of my-element, which is
a subkind of div.

00:25:22.390 --> 00:25:24.710
So I want to switch to the
editor and show you a more

00:25:24.710 --> 00:25:26.250
realistic example.

00:25:26.250 --> 00:25:32.380
And what we're going to do
is open one slide here.

00:25:32.380 --> 00:25:35.550
This slide, in fact, is a
custom element itself.

00:25:35.550 --> 00:25:38.000
And what I have here
on the top is a

00:25:38.000 --> 00:25:40.890
commented out custom element.

00:25:40.890 --> 00:25:46.540
I'm just going to clean this
up and go through the code

00:25:46.540 --> 00:25:48.610
little by little so that
we can actually

00:25:48.610 --> 00:25:50.000
see what it's doing.

00:25:50.000 --> 00:25:52.970
Basically, I'm interested in
adding a slide number to my

00:25:52.970 --> 00:25:53.900
presentation.

00:25:53.900 --> 00:25:56.890
I just want to know what
slide I'm on right now.

00:25:56.890 --> 00:25:58.570
So I'm going to add
a custom element

00:25:58.570 --> 00:26:00.910
called my slide number.

00:26:00.910 --> 00:26:02.360
It's going to be essentially
a div.

00:26:02.360 --> 00:26:08.910
And I'm going to associate with
that element a little bit

00:26:08.910 --> 00:26:09.910
of Dart code.

00:26:09.910 --> 00:26:12.170
So here in this attribute, where
I say constructor equals

00:26:12.170 --> 00:26:14.940
SlideNumber, I'm saying that
this is a class in Dart that I

00:26:14.940 --> 00:26:17.150
want to associate
with my element.

00:26:17.150 --> 00:26:18.970
Now here at the bottom is a
definition of the class.

00:26:18.970 --> 00:26:21.070
It has a bunch of fields.

00:26:21.070 --> 00:26:23.410
One of them is, what's the
current slide, which is just

00:26:23.410 --> 00:26:27.120
looking that up from
my presentation.

00:26:27.120 --> 00:26:29.840
And finally, we have this
template object with this

00:26:29.840 --> 00:26:32.370
template tag, where I'm defining
what the actual

00:26:32.370 --> 00:26:33.230
element looks like.

00:26:33.230 --> 00:26:35.530
And I'm saying, well, it's
actually going to have this

00:26:35.530 --> 00:26:37.100
text, and it's going to actually
show the current

00:26:37.100 --> 00:26:38.740
slide number.

00:26:38.740 --> 00:26:39.880
So let's go to the bottom.

00:26:39.880 --> 00:26:43.090
We have here an instance
of this slide number.

00:26:43.090 --> 00:26:45.600
I'm going to put
it in my slide.

00:26:45.600 --> 00:26:47.700
I'm removing those comments.

00:26:47.700 --> 00:26:50.330
We now save, refresh.

00:26:50.330 --> 00:26:54.400
And once we're here, you'll see
this is slide number 25.

00:26:54.400 --> 00:26:56.510
So once you have one of these
elements, you can actually do

00:26:56.510 --> 00:26:59.770
a lot of other things that also
resemble object-oriented

00:26:59.770 --> 00:27:00.880
or general programming.

00:27:00.880 --> 00:27:03.350
For example, you can actually
pass information to your

00:27:03.350 --> 00:27:05.490
custom element using
attributes.

00:27:05.490 --> 00:27:10.040
So I can actually put here
something like my-attribute

00:27:10.040 --> 00:27:19.110
and say, "Hello Dart!" And what
I have up here is that we

00:27:19.110 --> 00:27:21.590
actually already have a field
named myAttribute.

00:27:21.590 --> 00:27:23.690
You may have noticed that I have
a little difference in

00:27:23.690 --> 00:27:24.270
the syntax.

00:27:24.270 --> 00:27:26.450
This is a camelCase
letter here.

00:27:26.450 --> 00:27:27.640
This is using dashes.

00:27:27.640 --> 00:27:30.200
This is that HTML doesn't
allow you to have case

00:27:30.200 --> 00:27:30.980
sensitivity.

00:27:30.980 --> 00:27:33.010
So in Dart, we say, well,
let's translate.

00:27:33.010 --> 00:27:34.740
Every time you have a dash,
we're going to capitalize the

00:27:34.740 --> 00:27:37.846
next word and associate that
with a field in this class

00:27:37.846 --> 00:27:40.360
that is associated with
your custom element.

00:27:40.360 --> 00:27:42.330
Once we have that, we can
actually just put this

00:27:42.330 --> 00:27:45.410
myAttribute in the middle
of my template.

00:27:45.410 --> 00:27:46.660
Attribute.

00:27:48.630 --> 00:27:52.080
And now when we refresh, we will
see there that it says,

00:27:52.080 --> 00:27:52.320
hey,

00:27:52.320 --> 00:27:54.910
"Hello Dart!" Cool.

00:27:54.910 --> 00:27:57.490
So another thing that you get
with custom elements is that

00:27:57.490 --> 00:28:00.080
once you define it once, you can
use it in multiple places.

00:28:00.080 --> 00:28:01.830
You don't have to use it only
where you define it.

00:28:01.830 --> 00:28:03.645
You can actually also
import it and use it

00:28:03.645 --> 00:28:06.600
in other HTML pages.

00:28:06.600 --> 00:28:09.180
And the way you do that
is by using this link

00:28:09.180 --> 00:28:11.740
rel="import" syntax.

00:28:11.740 --> 00:28:15.810
This is another standard out
there from the web community.

00:28:15.810 --> 00:28:20.220
And back to our presentation,
let's open another slide here.

00:28:20.220 --> 00:28:24.150
This is the slide that has
that particular text.

00:28:24.150 --> 00:28:27.080
And I'm just commenting
out the link rel.

00:28:27.080 --> 00:28:29.730
And then here at the bottom,
we have the other syntax we

00:28:29.730 --> 00:28:31.370
have to create custom
elements.

00:28:31.370 --> 00:28:34.020
Our slide number with
our attribute.

00:28:34.020 --> 00:28:36.790
And we save, we refresh.

00:28:36.790 --> 00:28:39.570
EMILY FORTUNA: So just to
clarify, we're importing from

00:28:39.570 --> 00:28:42.610
our original definition
into this slide.

00:28:42.610 --> 00:28:43.110
SIGMUND CHEREM: Exactly.

00:28:43.110 --> 00:28:47.230
So right here, up here, this
href is essentially the name

00:28:47.230 --> 00:28:48.630
of the other slide number.

00:28:48.630 --> 00:28:52.085
In fact, if I have a typo, and
I say, oh, I forgot to put

00:28:52.085 --> 00:28:54.470
this dot here, and I save.

00:28:54.470 --> 00:28:56.190
You actually see some errors
at the bottom.

00:28:56.190 --> 00:28:59.070
And actually, I wanted to
highlight this because in

00:28:59.070 --> 00:29:02.470
Dart, we have a lot of power
making tools available to you

00:29:02.470 --> 00:29:04.520
that actually give you
a lot of feedback.

00:29:04.520 --> 00:29:07.140
In particular, the Dart editor
focuses a lot of energy on

00:29:07.140 --> 00:29:08.020
analyzing Dart.

00:29:08.020 --> 00:29:09.190
But it's also pluggable.

00:29:09.190 --> 00:29:12.080
And in our case, with WebUI,
we managed to also add

00:29:12.080 --> 00:29:14.880
additional information to
understand the HTML itself.

00:29:14.880 --> 00:29:17.380
So here at the bottom,
you see this actual

00:29:17.380 --> 00:29:18.340
file doesn't exist.

00:29:18.340 --> 00:29:20.990
That's why you see that
red curly line.

00:29:20.990 --> 00:29:23.860
But actually, interestingly, you
also this second warning

00:29:23.860 --> 00:29:25.800
saying the slide number is
not defined anywhere.

00:29:25.800 --> 00:29:28.410
I couldn't find a definition
because, well, it probably

00:29:28.410 --> 00:29:29.390
came from that file.

00:29:29.390 --> 00:29:31.650
But at least you actually get
some feedback if you actually

00:29:31.650 --> 00:29:36.640
had a typo and used the wrong
name of your custom element.

00:29:36.640 --> 00:29:38.460
Right.

00:29:38.460 --> 00:29:41.660
EMILY FORTUNA: So in this
case, we were passing an

00:29:41.660 --> 00:29:45.850
additional, a different
attribute here as well.

00:29:45.850 --> 00:29:46.800
SIGMUND CHEREM: Yeah.

00:29:46.800 --> 00:29:47.210
EMILY FORTUNA: All right.

00:29:47.210 --> 00:29:49.960
So I'm sure you guys were really
blown away by that

00:29:49.960 --> 00:29:51.580
slide number example.

00:29:51.580 --> 00:29:55.290
And now you want to put it
in all of your web apps.

00:29:55.290 --> 00:29:58.420
So the next great step is
fortunately, you can because

00:29:58.420 --> 00:30:01.590
we have this package management
system called Pub.

00:30:01.590 --> 00:30:04.700
It allows you to share any
Dart code, also custom

00:30:04.700 --> 00:30:05.930
elements that you write.

00:30:05.930 --> 00:30:09.110
And you can easily
put them into--

00:30:09.110 --> 00:30:11.090
work with any project
of your own.

00:30:11.090 --> 00:30:16.090
So in this example here,
we are using--

00:30:16.090 --> 00:30:18.930
see these little tabs here?

00:30:18.930 --> 00:30:20.990
This is actually a custom
element that

00:30:20.990 --> 00:30:23.820
neither Siggy nor I wrote.

00:30:23.820 --> 00:30:25.780
A third party developer, Kevin
Moore, wrote this.

00:30:25.780 --> 00:30:27.790
SIGMUND CHEREM: Who
is right there.

00:30:27.790 --> 00:30:31.790
EMILY FORTUNA: He ported a bunch
of bootstrap widgets.

00:30:31.790 --> 00:30:34.986
And so the way we added this to
our presentation is all we

00:30:34.986 --> 00:30:37.380
had to do is we have this
little pubspec.

00:30:37.380 --> 00:30:39.360
We added our widget library.

00:30:39.360 --> 00:30:44.570
And then in our HTML, in the
presentation, we added a link

00:30:44.570 --> 00:30:47.150
rel, just like we did before.

00:30:47.150 --> 00:30:49.190
And then we instantiate
it with his

00:30:49.190 --> 00:30:51.855
custom element tab name.

00:30:51.855 --> 00:30:53.740
And it's that simple.

00:30:53.740 --> 00:30:55.900
And here's another one
that he wrote.

00:30:55.900 --> 00:30:57.150
It's a little accordion
widget.

00:31:00.350 --> 00:31:03.180
So we went through
a whole bunch of

00:31:03.180 --> 00:31:04.550
different things today.

00:31:04.550 --> 00:31:09.030
These are some of the resources
that talk about a

00:31:09.030 --> 00:31:10.820
lot of these standards that
are being developed.

00:31:10.820 --> 00:31:13.010
And if you'd like to read
more, feel free

00:31:13.010 --> 00:31:16.320
to check them out.

00:31:16.320 --> 00:31:19.890
And everything we've shown you
today is available to try it.

00:31:19.890 --> 00:31:24.050
You can download the Dart
SDK, and it will work.

00:31:24.050 --> 00:31:26.660
SIGMUND CHEREM: In fact, there
are people already using this.

00:31:26.660 --> 00:31:30.060
For example, the Blossom team,
they already actually had been

00:31:30.060 --> 00:31:34.000
using and even put up also
some of their widgets in

00:31:34.000 --> 00:31:35.380
another package in Pub.

00:31:35.380 --> 00:31:36.770
EMILY FORTUNA: And the
Glyph3D app as well.

00:31:36.770 --> 00:31:38.110
SIGMUND CHEREM: Oh, the
Glyph3D app as well.

00:31:38.110 --> 00:31:42.130
So there's a lot of things that
are continually changing.

00:31:42.130 --> 00:31:44.940
All the standards are actually
still shaping up.

00:31:44.940 --> 00:31:46.240
And a lot of things
are basically

00:31:46.240 --> 00:31:47.170
moving under our feet.

00:31:47.170 --> 00:31:49.770
So as I mentioned earlier,
there's more things coming,

00:31:49.770 --> 00:31:52.190
more things changing, and
we're just keeping pace.

00:31:52.190 --> 00:31:55.310
Now we're going to
be here around

00:31:55.310 --> 00:31:56.590
to answer any questions.

00:31:56.590 --> 00:31:59.020
We would love for you guys to
join us in the code lab

00:31:59.020 --> 00:32:01.050
tomorrow, where we're going to
actually hands on be using a

00:32:01.050 --> 00:32:02.240
lot of these features.

00:32:02.240 --> 00:32:04.410
And we're happy to take
questions here.

00:32:04.410 --> 00:32:06.850
Then we're afterwards going to
be upstairs in the Dart booth

00:32:06.850 --> 00:32:08.770
and in the Office Hours area.

00:32:08.770 --> 00:32:10.186
Thank you.

00:32:10.186 --> 00:32:18.154
[APPLAUSE]

00:32:23.632 --> 00:32:25.970
SIGMUND CHEREM: Any questions?

00:32:25.970 --> 00:32:28.532
Oh, you're here.

00:32:28.532 --> 00:32:29.900
EMILY FORTUNA: Hi.

00:32:29.900 --> 00:32:30.160
MARK: Hi.

00:32:30.160 --> 00:32:32.160
My name is Mark.

00:32:32.160 --> 00:32:36.330
So you're building a very new
language for all the web.

00:32:36.330 --> 00:32:40.760
Could it be there's a bigger
picture here for Google, like

00:32:40.760 --> 00:32:44.170
you want to use this language in
many of your products like,

00:32:44.170 --> 00:32:45.420
for example, Google+?

00:32:49.510 --> 00:32:51.930
EMILY FORTUNA: Google is
using Dart internally.

00:32:51.930 --> 00:32:54.370
And we hope that these
projects will see the

00:32:54.370 --> 00:32:56.170
light of day soon.

00:32:56.170 --> 00:32:56.720
MARK: OK.

00:32:56.720 --> 00:32:58.970
So it's great to see some
support also from your

00:32:58.970 --> 00:33:00.670
company, then, here.

00:33:00.670 --> 00:33:00.740
SIGMUND CHEREM: Yeah.

00:33:00.740 --> 00:33:03.010
There's definitely commitment
internally to actually

00:33:03.010 --> 00:33:04.120
continue using it.

00:33:04.120 --> 00:33:05.870
And we're starting to see
adoption as well, and it's

00:33:05.870 --> 00:33:07.000
very exciting.

00:33:07.000 --> 00:33:08.250
MARK: Thank you.

00:33:10.640 --> 00:33:10.980
EMILY FORTUNA: Hi.

00:33:10.980 --> 00:33:11.210
PAUL: Hi.

00:33:11.210 --> 00:33:13.380
I'm Paul from [INAUDIBLE].

00:33:13.380 --> 00:33:17.890
I wanted to ask, is Dart Chrome

00:33:17.890 --> 00:33:19.710
extension ready right now?

00:33:19.710 --> 00:33:25.100
Because since Chrome team
introduced manifest version

00:33:25.100 --> 00:33:28.710
two, there is a content
security policy.

00:33:28.710 --> 00:33:32.110
And I wanted to ask,
is this ready for

00:33:32.110 --> 00:33:34.510
applications for Chrome?

00:33:34.510 --> 00:33:38.050
SIGMUND CHEREM: So to clarify,
you're asking about using Dart

00:33:38.050 --> 00:33:39.380
to write your own extension?

00:33:39.380 --> 00:33:39.690
MARK: Yeah.

00:33:39.690 --> 00:33:40.770
SIGMUND CHEREM: Yes.

00:33:40.770 --> 00:33:45.210
Yes, so that's definitely
possible.

00:33:45.210 --> 00:33:48.030
There's even a mode in which you
can actually compile your

00:33:48.030 --> 00:33:50.950
Dart code into JavaScript and
use it in an extension.

00:33:50.950 --> 00:33:53.120
There's a special flag you
need to pass into DartJS

00:33:53.120 --> 00:33:56.030
compiler to make it CSP
compliant so it doesn't use

00:33:56.030 --> 00:33:56.890
things like [? evolve ?]

00:33:56.890 --> 00:33:58.670
and stuff like that.

00:33:58.670 --> 00:33:59.930
But it's definitely possible.

00:33:59.930 --> 00:34:03.260
PAUL: I am wondering about
developing because when you're

00:34:03.260 --> 00:34:05.130
developing, you use
the internal

00:34:05.130 --> 00:34:07.690
server in Dart Editor.

00:34:07.690 --> 00:34:10.710
And when you develop an
extension, you load this

00:34:10.710 --> 00:34:15.370
extension as a file,
as an app.

00:34:15.370 --> 00:34:18.090
EMILY FORTUNA: So the only
reason we used a server for

00:34:18.090 --> 00:34:22.060
this is for our WebRTC demo
because you can't do that from

00:34:22.060 --> 00:34:23.739
file, locally.

00:34:23.739 --> 00:34:23.980
PAUL: OK.

00:34:23.980 --> 00:34:25.010
So I don't--

00:34:25.010 --> 00:34:25.429
EMILY FORTUNA: Everything
else--

00:34:25.429 --> 00:34:27.670
PAUL: I don't need to use
the server, right?

00:34:27.670 --> 00:34:28.239
SIGMUND CHEREM: Right.

00:34:28.239 --> 00:34:28.870
PAUL: OK.

00:34:28.870 --> 00:34:30.966
Thanks.

00:34:30.966 --> 00:34:31.389
EMILY FORTUNA: Hello.

00:34:31.389 --> 00:34:32.837
AUDIENCE: Actually, that's
more or less what I

00:34:32.837 --> 00:34:33.409
was going to ask.

00:34:33.409 --> 00:34:35.760
But basically, what you showed
us today, typically, you would

00:34:35.760 --> 00:34:39.350
have compiled that to a page
that'd be served up, just like

00:34:39.350 --> 00:34:41.460
any other static page.

00:34:41.460 --> 00:34:44.199
And you'd have to use Ajax and
whatnot, then, to get your

00:34:44.199 --> 00:34:47.020
data back and forth, right?

00:34:47.020 --> 00:34:47.380
SIGMUND CHEREM: Yes.

00:34:47.380 --> 00:34:50.040
I mean, that's definitely--

00:34:50.040 --> 00:34:52.550
basically, the deployment step
typically involves something

00:34:52.550 --> 00:34:55.419
like that, where you're bundling
all the Dart code and

00:34:55.419 --> 00:34:57.690
then shipping essentially just
one JavaScript file or a

00:34:57.690 --> 00:34:59.320
couple of JavaScript files that
you want to actually put

00:34:59.320 --> 00:35:01.420
in your app, and their
resources.

00:35:01.420 --> 00:35:03.300
AUDIENCE: And so the way you
were using the web components

00:35:03.300 --> 00:35:05.880
with the data binding, you could
do that using standard

00:35:05.880 --> 00:35:08.860
JavaScript objects that you were
pulling via, say, JSON

00:35:08.860 --> 00:35:11.740
and then bind them into
the UI that way?

00:35:11.740 --> 00:35:15.560
SIGMUND CHEREM: You can use
JSON and things like that.

00:35:15.560 --> 00:35:17.650
In the current state, you would
have to still use Dart

00:35:17.650 --> 00:35:20.485
in a way to say, OK, given this
JSON, how do I process it

00:35:20.485 --> 00:35:23.090
and create Dart objects
out of that?

00:35:23.090 --> 00:35:24.750
But then your client-server
interaction

00:35:24.750 --> 00:35:26.400
continues to be the same.

00:35:26.400 --> 00:35:30.050
You can still have JSON over the
wire and seamlessly work

00:35:30.050 --> 00:35:34.130
and support clients that could
talk, for examplee--

00:35:34.130 --> 00:35:36.510
or be written in JavaScript that
would actually use JSON

00:35:36.510 --> 00:35:37.830
for their rendering.

00:35:37.830 --> 00:35:39.440
And you can use Dart
on the other hand.

00:35:39.440 --> 00:35:42.980
AUDIENCE: Has that JSON to Dart
object conversions all

00:35:42.980 --> 00:35:45.650
been addressed in the
client side then?

00:35:45.650 --> 00:35:46.250
SIGMUND CHEREM: Yes.

00:35:46.250 --> 00:35:49.830
Yes, there's a Dart call in JSON
library, basically, that

00:35:49.830 --> 00:35:52.640
has the JSON parse and
the Stringify APIs.

00:35:52.640 --> 00:35:54.674
AUDIENCE: Thank you.

00:35:54.674 --> 00:35:55.105
EMILY FORTUNA: Hello.

00:35:55.105 --> 00:35:55.970
AUDIENCE: Hey.

00:35:55.970 --> 00:35:57.970
So I've been playing with Dart
a little bit lately.

00:35:57.970 --> 00:36:00.360
And something's been annoying
me about it, and I'm pretty

00:36:00.360 --> 00:36:01.270
sure it's due to my ignorance.

00:36:01.270 --> 00:36:03.270
I'm hoping you can
help me out.

00:36:03.270 --> 00:36:05.370
The way I've usually used web
technologies is I have an

00:36:05.370 --> 00:36:08.460
existing project, and I just
add a little bit of jQuery.

00:36:11.040 --> 00:36:13.020
Dart, it feels like most of the
learning material says,

00:36:13.020 --> 00:36:14.585
start a new project in
the Dart Editor.

00:36:14.585 --> 00:36:15.870
And so there's a lot of magic.

00:36:15.870 --> 00:36:17.120
And I realize there's
command line tools.

00:36:17.120 --> 00:36:20.030
But if I want to use a web
component from Dart in an

00:36:20.030 --> 00:36:23.290
existing project, I need to
compile my Dart to JavaScript,

00:36:23.290 --> 00:36:25.520
and I need to compile my HTML,
because there are some

00:36:25.520 --> 00:36:26.660
transforms.

00:36:26.660 --> 00:36:30.620
Is there kind of documentation
for making Dart play nice with

00:36:30.620 --> 00:36:33.620
my existing project?

00:36:33.620 --> 00:36:35.815
SIGMUND CHEREM: There's some,
but there should be more.

00:36:38.360 --> 00:36:42.340
In a brief way, I can say, a
lot things are possible.

00:36:42.340 --> 00:36:45.080
But some of the things, there's
still a lot of steps

00:36:45.080 --> 00:36:46.740
which we want to take to
actually make things a little

00:36:46.740 --> 00:36:47.730
bit more minimalistic.

00:36:47.730 --> 00:36:49.530
Like, say you just want this
component, and that's

00:36:49.530 --> 00:36:50.740
all that you want.

00:36:50.740 --> 00:36:54.580
Those are things that are
still not there yet.

00:36:54.580 --> 00:36:56.940
EMILY FORTUNA: And I'd say that
the focus right now is

00:36:56.940 --> 00:36:59.920
making one great experience
through the Dart Editor.

00:36:59.920 --> 00:37:03.230
And so, yes, we'd love to
expand in future time.

00:37:03.230 --> 00:37:05.955
But our current focus
is like one whole

00:37:05.955 --> 00:37:09.200
ecosystem that works great.

00:37:09.200 --> 00:37:11.000
SIGMUND CHEREM: One great thing
where things are moving

00:37:11.000 --> 00:37:14.240
is the new changes that we're
seeing in model-driven views

00:37:14.240 --> 00:37:17.050
and in custom elements are
pushing us to also move a lot

00:37:17.050 --> 00:37:20.200
more of our logic to be more
dynamic and to work more later

00:37:20.200 --> 00:37:21.630
on, so that you don't have
to use so much of the

00:37:21.630 --> 00:37:23.050
tools ahead of time.

00:37:23.050 --> 00:37:24.720
So I think that's also
going to help.

00:37:24.720 --> 00:37:25.000
AUDIENCE: Cool.

00:37:25.000 --> 00:37:26.310
Thank you.

00:37:26.310 --> 00:37:26.760
SIMON: Hi.

00:37:26.760 --> 00:37:28.560
Simon from Quebec City.

00:37:28.560 --> 00:37:31.570
Coming from a grid background,
one tool that I heavily rely

00:37:31.570 --> 00:37:34.150
on is Maven to manage
my build cycle.

00:37:34.150 --> 00:37:36.410
I was wondering if there's such
a tool that you would

00:37:36.410 --> 00:37:39.390
recommend for programming Dart,
for managing [INAUDIBLE]

00:37:39.390 --> 00:37:41.910
into the build life cycle.

00:37:41.910 --> 00:37:43.990
EMILY FORTUNA: Sorry,
what's the tool?

00:37:43.990 --> 00:37:44.290
SIMON: Maven.

00:37:44.290 --> 00:37:45.760
EMILY FORTUNA: Maven.

00:37:45.760 --> 00:37:47.500
SIGMUND CHEREM: Maven.

00:37:47.500 --> 00:37:52.330
So I might need some
more context.

00:37:52.330 --> 00:37:55.710
So basically, you have a tool
that helps you in the whole

00:37:55.710 --> 00:37:58.320
process of building things and
bundling things together and

00:37:58.320 --> 00:37:59.070
deployment and such.

00:37:59.070 --> 00:38:01.300
SIMON: Yeah, automating testing
and deployment, and

00:38:01.300 --> 00:38:03.030
compiling and dependence
management and--

00:38:03.030 --> 00:38:03.480
SIGMUND CHEREM: Definitely.

00:38:03.480 --> 00:38:04.790
That's something that
we actually started

00:38:04.790 --> 00:38:06.690
doing some work on.

00:38:06.690 --> 00:38:10.830
And we're hoping that on one
hand, that it should be able

00:38:10.830 --> 00:38:13.655
to start using tools
that already exist.

00:38:13.655 --> 00:38:15.535
Hopefully, there is nothing
Dart-specific about a lot of

00:38:15.535 --> 00:38:16.970
these things.

00:38:16.970 --> 00:38:20.040
But we also have moments where
we actually have realized that

00:38:20.040 --> 00:38:21.680
having a Dart-specific solution

00:38:21.680 --> 00:38:22.670
actually sometimes helps.

00:38:22.670 --> 00:38:25.710
And we have a project called
buildtool, for example, that

00:38:25.710 --> 00:38:27.435
is starting to look
into this area.

00:38:27.435 --> 00:38:29.160
How do you have, for example,
a build server end to your

00:38:29.160 --> 00:38:31.830
picture that helps you
coordinate all these things

00:38:31.830 --> 00:38:34.375
between different tasks and
steps that you have to do?

00:38:34.375 --> 00:38:35.170
AUDIENCE: OK, thank you.

00:38:35.170 --> 00:38:35.620
AUDIENCE: And op.

00:38:35.620 --> 00:38:37.750
SIGMUND CHEREM: And
op, that's true.

00:38:37.750 --> 00:38:40.860
Kevin [INAUDIBLE], there's
another project out there that

00:38:40.860 --> 00:38:42.365
you can try.

00:38:42.365 --> 00:38:43.491
EMILY FORTUNA: In Dart.

00:38:43.491 --> 00:38:44.741
AUDIENCE: [INAUDIBLE]?

00:38:46.750 --> 00:38:49.710
SIGMUND CHEREM: So Pub is
actually, I don't know if--

00:38:49.710 --> 00:38:52.090
yeah, Pub handles a lot of the
package management and the

00:38:52.090 --> 00:38:53.130
installation process.

00:38:53.130 --> 00:38:54.440
So that's another thing
that helps.

00:38:54.440 --> 00:38:55.960
And they are adding
the features to do

00:38:55.960 --> 00:38:57.810
deployment as well.

00:38:57.810 --> 00:39:00.370
So that you can take all the
packages that initially were

00:39:00.370 --> 00:39:03.480
distributed and how to minimally
put them together so

00:39:03.480 --> 00:39:07.030
that you know what you
have to deploy.

00:39:07.030 --> 00:39:07.450
AUDIENCE: Hey.

00:39:07.450 --> 00:39:12.510
How does it compare to, or why
is it better than Angular?

00:39:12.510 --> 00:39:17.100
SIGMUND CHEREM: It's actually
a little bit of apples and

00:39:17.100 --> 00:39:20.290
oranges in that you could
ask the same question.

00:39:20.290 --> 00:39:22.730
How do you compare Angular
and the standards?

00:39:22.730 --> 00:39:23.110
Right?

00:39:23.110 --> 00:39:25.980
And I think that Angular has a
lot of features that are at a

00:39:25.980 --> 00:39:26.940
high level.

00:39:26.940 --> 00:39:28.390
And they're actually
very rich.

00:39:28.390 --> 00:39:31.040
Things like routing, things
like dependence injection.

00:39:31.040 --> 00:39:32.770
And I think all this [INAUDIBLE]
can actually be

00:39:32.770 --> 00:39:34.930
put on top of what
we have as well.

00:39:34.930 --> 00:39:36.690
And I'm hoping that actually,
that's the direction we will

00:39:36.690 --> 00:39:38.860
move forward so that the
standards can be a common

00:39:38.860 --> 00:39:40.910
ground that you can then pick
and choose different

00:39:40.910 --> 00:39:43.370
frameworks and get
something better.

00:39:43.370 --> 00:39:43.720
EMILY FORTUNA: Yeah.

00:39:43.720 --> 00:39:45.710
But I guess the key difference,
really, is you're

00:39:45.710 --> 00:39:49.250
programming Dart versus
JavaScript, which hopefully

00:39:49.250 --> 00:39:52.620
Dart, the language, makes things
nicer, your overall

00:39:52.620 --> 00:39:53.160
development experience.

00:39:53.160 --> 00:39:57.570
But we hope to get most of
the same functionality.

00:39:57.570 --> 00:39:58.420
AUDIENCE: Hi.

00:39:58.420 --> 00:40:04.100
Does Dart act as a polyfill
when web components or

00:40:04.100 --> 00:40:07.080
templates are not available and
not even in the browser?

00:40:07.080 --> 00:40:08.680
I mean, does it--

00:40:08.680 --> 00:40:11.600
when compiling to JavaScript,
it emulates that function as

00:40:11.600 --> 00:40:13.560
not available?

00:40:13.560 --> 00:40:14.190
EMILY FORTUNA: I'm sorry.

00:40:14.190 --> 00:40:15.830
SIGMUND CHEREM: Sorry,
I couldn't hear.

00:40:15.830 --> 00:40:18.520
AUDIENCE: What components and
templates are part of the W3C

00:40:18.520 --> 00:40:20.830
standards, right?

00:40:20.830 --> 00:40:21.120
SIGMUND CHEREM: Yes.

00:40:21.120 --> 00:40:24.770
So a lot of the standards,
there's the Shadow DOM is

00:40:24.770 --> 00:40:25.370
there, custom elements.

00:40:25.370 --> 00:40:25.830
AUDIENCE: Exactly.

00:40:25.830 --> 00:40:29.570
But they're not fully supported
by old browsers.

00:40:29.570 --> 00:40:30.800
SIGMUND CHEREM: They're
not today.

00:40:30.800 --> 00:40:32.810
AUDIENCE: Does that
do something to

00:40:32.810 --> 00:40:35.290
fill this gap when--

00:40:35.290 --> 00:40:37.010
SIGMUND CHEREM: So right now,
what we're currently doing is,

00:40:37.010 --> 00:40:39.360
yes, filling that gap, creating
an interface that

00:40:39.360 --> 00:40:42.420
looks the same and works
in everywhere.

00:40:42.420 --> 00:40:44.530
The term that commonly
people talk about,

00:40:44.530 --> 00:40:45.420
polyfilling, right.

00:40:45.420 --> 00:40:47.640
It's just the same.

00:40:47.640 --> 00:40:50.170
So we're doing our version of
that in Dart so that it has

00:40:50.170 --> 00:40:52.110
the thing experience.

00:40:52.110 --> 00:40:54.240
And ideally, when it's supported
in the browser, then

00:40:54.240 --> 00:40:56.980
it's just simply used directly
rather than poly.

00:40:56.980 --> 00:40:57.295
AUDIENCE: OK.

00:40:57.295 --> 00:40:57.610
That's all right.

00:40:57.610 --> 00:40:58.860
Thanks.

00:41:00.650 --> 00:41:01.440
EMILY FORTUNA: We're
out of time.

00:41:01.440 --> 00:41:03.830
But we will come talk
to you guys offline.

00:41:03.830 --> 00:41:05.230
Or come talk to us.

00:41:05.230 --> 00:41:05.660
SIGMUND CHEREM: Yeah,
come to us.

00:41:05.660 --> 00:41:06.710
We'll be hanging out here.

00:41:06.710 --> 00:41:07.005
EMILY FORTUNA: Thank you.

00:41:07.005 --> 00:41:08.660
SIGMUND CHEREM: And we're going
to be upstairs as well

00:41:08.660 --> 00:41:09.560
in the booth.

00:41:09.560 --> 00:41:10.160
Thank you.

00:41:10.160 --> 00:41:12.645
[APPLAUSE]

