WEBVTT
Kind: captions
Language: en

00:00:02.880 --> 00:00:04.019
KRISPY: OK.

00:00:04.019 --> 00:00:06.250
We are live.

00:00:06.250 --> 00:00:08.350
welcome to Google
TV's Developer

00:00:08.350 --> 00:00:09.640
Office Hours Hangout.

00:00:09.640 --> 00:00:12.525
I'm Krispy, this is Susanna.

00:00:12.525 --> 00:00:13.415
Introduce yourself.

00:00:13.415 --> 00:00:16.460
SUSANNA CHEN: Hi, I'm
Susanna Chen.

00:00:16.460 --> 00:00:22.450
I'm doing testing for the Google
TV apps, and so far

00:00:22.450 --> 00:00:26.362
I've been here for a short
time, and having fun.

00:00:26.362 --> 00:00:29.890
KRISPY: So Susanna's going to be
helping us out, doing a lot

00:00:29.890 --> 00:00:33.000
of testing of applications and
we're excited to have her

00:00:33.000 --> 00:00:34.450
aboard, so welcome.

00:00:34.450 --> 00:00:36.220
A few things in the
news today.

00:00:36.220 --> 00:00:39.120
Well actually not today, but
over the last week or so.

00:00:39.120 --> 00:00:41.757
October eighth saw the launch
of the new and improved Play

00:00:41.757 --> 00:00:43.630
Store for Google TV.

00:00:43.630 --> 00:00:47.030
This has out as an OTA update,
so if you don't have it on

00:00:47.030 --> 00:00:49.590
your Google TV yet expect
to see it soon.

00:00:49.590 --> 00:00:52.390
What this is going to do is
bring all sorts of wonderful

00:00:52.390 --> 00:00:54.560
features from Play that haven't
been available on

00:00:54.560 --> 00:00:57.210
Google TV into your Google
TV environment.

00:00:57.210 --> 00:00:59.530
This means Google Play,
and movies.

00:00:59.530 --> 00:01:02.400
And essentially what this means
for developers is it's

00:01:02.400 --> 00:01:04.819
going to update a lot of other
features involving Google

00:01:04.819 --> 00:01:08.010
Play, such as-- if
I can read this--

00:01:08.010 --> 00:01:09.670
auto updates, subscription
billing,

00:01:09.670 --> 00:01:11.170
and Smart app updates.

00:01:11.170 --> 00:01:14.510
I've mentioned a few of these
things previously, so they're

00:01:14.510 --> 00:01:17.850
rolling out with this
Google Play update.

00:01:17.850 --> 00:01:21.080
Also the "Washington Post"
has revealed it's Post TV

00:01:21.080 --> 00:01:22.630
app on Google TV.

00:01:22.630 --> 00:01:25.900
This app gets you access to
the latest news from the

00:01:25.900 --> 00:01:29.650
"Washington Post" in their
show called "The Fold".

00:01:29.650 --> 00:01:32.400
To be able to tune in and
get lots of fresh

00:01:32.400 --> 00:01:34.270
and interesting news.

00:01:34.270 --> 00:01:34.980
Brazil--

00:01:34.980 --> 00:01:38.590
we had the Brazilian launch
happen recently, and we're

00:01:38.590 --> 00:01:41.450
very excited to have them on
board with Google TV devices.

00:01:41.450 --> 00:01:44.030
We're seeing a lot of apps
getting constructed, and so if

00:01:44.030 --> 00:01:46.730
you're in Brazil, welcome.

00:01:46.730 --> 00:01:47.460
Korea--

00:01:47.460 --> 00:01:49.940
some of you you might
have heard some

00:01:49.940 --> 00:01:51.160
mumblings about Korea.

00:01:51.160 --> 00:01:54.610
We've partnered with--

00:01:54.610 --> 00:01:58.540
LG U+ has become the first
IPTV provider to offer

00:01:58.540 --> 00:02:01.400
integrated Google TV box
for its subscribers.

00:02:01.400 --> 00:02:03.350
Korea becomes the 10th
country in which

00:02:03.350 --> 00:02:04.660
Google TV is available.

00:02:04.660 --> 00:02:06.360
So this is also very exciting.

00:02:06.360 --> 00:02:12.470
Some of you may have seen the
notices that went out with

00:02:12.470 --> 00:02:14.310
Gangnam Style.

00:02:14.310 --> 00:02:15.610
Check it out if you
haven't seen it.

00:02:15.610 --> 00:02:17.170
We have a great blog post.

00:02:17.170 --> 00:02:19.280
As always you can go to
GoogleTV.blogspot.com.

00:02:22.150 --> 00:02:23.930
That's where we post a
lot of information.

00:02:23.930 --> 00:02:26.670
Usually update it a couple times
a week, if not more.

00:02:26.670 --> 00:02:30.660
It's a great source to tie-in
with whatever other

00:02:30.660 --> 00:02:33.640
information sources you're
gathering to find out more

00:02:33.640 --> 00:02:35.230
about Google TV.

00:02:35.230 --> 00:02:36.230
What else is going on?

00:02:36.230 --> 00:02:41.910
We have the GBGDC hosted Google
TV on Monday, and Paul

00:02:41.910 --> 00:02:45.140
Carff and Les Vogel are
there right now.

00:02:45.140 --> 00:02:48.730
DC Droids was hosting Google TV
yesterday at an event that

00:02:48.730 --> 00:02:49.190
they put on.

00:02:49.190 --> 00:02:50.350
I saw some really
cool pictures.

00:02:50.350 --> 00:02:53.850
Hopefully we'll get a blog
post out there shortly.

00:02:53.850 --> 00:02:57.460
Today there's actually Google TV
test lab going on in DC at

00:02:57.460 --> 00:02:58.410
the Google offices.

00:02:58.410 --> 00:03:01.250
So perhaps you're one of the
lucky few who got to go, and

00:03:01.250 --> 00:03:02.750
test out your apps on
some of the new big

00:03:02.750 --> 00:03:03.525
screens that are there.

00:03:03.525 --> 00:03:07.410
I think Paul brought on of the
LG devices, one of the big

00:03:07.410 --> 00:03:09.390
47-inches to test apps on.

00:03:09.390 --> 00:03:11.880
We've introduced Susan,
which was on my list.

00:03:11.880 --> 00:03:14.840
Things that are coming up that
might be of interest to you--

00:03:14.840 --> 00:03:18.360
the LA hack-a-thon is taking
place October 26

00:03:18.360 --> 00:03:19.990
through the 28 in LA.

00:03:19.990 --> 00:03:23.450
So if you're in that area and
possibly interested in

00:03:23.450 --> 00:03:26.750
participating, send an email--
crispy@google.com.

00:03:26.750 --> 00:03:30.040
Also we have the Boulder meet
up, which is happening soon.

00:03:30.040 --> 00:03:32.050
Boulder Droids meet
up is happening

00:03:32.050 --> 00:03:34.520
11/13, so November 13.

00:03:34.520 --> 00:03:37.755
And there is a test lab going
on in Boulder similar to the

00:03:37.755 --> 00:03:39.370
one that's going on
in DC right now.

00:03:39.370 --> 00:03:42.220
That is happening
on November 15.

00:03:42.220 --> 00:03:48.020
So with that, I'm going
to try to tie-in my

00:03:48.020 --> 00:03:49.050
presentation here.

00:03:49.050 --> 00:03:53.520
So bear with me one second while
I boot up the Hangout.

00:03:56.420 --> 00:04:00.180
Sorry for the dead air here,
none of this stuff ever works

00:04:00.180 --> 00:04:01.010
quite out of the box.

00:04:01.010 --> 00:04:02.960
While I'm doing this though,
I'm willing to take a live

00:04:02.960 --> 00:04:05.290
question, so if anybody
has one, now is a

00:04:05.290 --> 00:04:08.620
great time to ask.

00:04:08.620 --> 00:04:11.950
Everyone goes quiet.

00:04:11.950 --> 00:04:14.280
Nobody's got a live question?

00:04:14.280 --> 00:04:18.025
Susan do you have a
question for me?

00:04:18.025 --> 00:04:19.450
AUDIENCE: Actually I do
have one question.

00:04:19.450 --> 00:04:23.130
KRISPY: All right, fire away.

00:04:23.130 --> 00:04:28.400
AUDIENCE: What would be a way to
provide you guys an app to

00:04:28.400 --> 00:04:33.150
test if that app requires a
server in the background?

00:04:33.150 --> 00:04:37.943
Meaning I'm building an app
for LiffTV right now, and

00:04:37.943 --> 00:04:40.080
[INAUDIBLE]

00:04:40.080 --> 00:04:50.682
server on one and how would we
go about me providing the app

00:04:50.682 --> 00:04:52.987
to you guys and get feedback?

00:04:52.987 --> 00:04:54.355
KRISPY: That's a
great question.

00:04:57.420 --> 00:05:02.140
The thing that would occur
to me to do would be--

00:05:02.140 --> 00:05:03.980
if there's a way you could
provide us a test server.

00:05:03.980 --> 00:05:08.240
Either you would set it up,
and host it, or if you had

00:05:08.240 --> 00:05:11.310
code that could run as sort
of a local test server.

00:05:11.310 --> 00:05:13.670
I realize that might not be
possible with all the content.

00:05:13.670 --> 00:05:17.190
But if there was a way that
what you're trying to test

00:05:17.190 --> 00:05:19.070
could be bundled into something
that you could send

00:05:19.070 --> 00:05:22.080
us as well, that would
be a way to go.

00:05:22.080 --> 00:05:24.328
Any insight into how he
might solve that?

00:05:27.200 --> 00:05:28.640
You'd probably be doing
the testing.

00:05:28.640 --> 00:05:30.120
SUSANNA CHEN: Yes,
I probably will.

00:05:32.830 --> 00:05:37.030
There's a way that they submit
their application to Google,

00:05:37.030 --> 00:05:40.810
and I think that there
is a channel that

00:05:40.810 --> 00:05:42.220
goes through Christian?

00:05:42.220 --> 00:05:43.940
KRISPY: Yeah probably.

00:05:43.940 --> 00:05:45.880
Here's what I suggest you do.

00:05:45.880 --> 00:05:49.140
Send me an email, let's
follow up offline.

00:05:49.140 --> 00:05:51.510
We'll figure this out, and
then maybe we'll tell

00:05:51.510 --> 00:05:54.790
everybody next time we have a
Hangout how we solve this

00:05:54.790 --> 00:05:55.810
particular problem.

00:05:55.810 --> 00:05:58.180
Because it is interesting,
and I recognize the

00:05:58.180 --> 00:05:59.860
difficulty in it.

00:05:59.860 --> 00:06:02.860
And I would like to get a
solution in place that can

00:06:02.860 --> 00:06:06.960
handle this for other
people as well.

00:06:06.960 --> 00:06:08.380
So I am about ready.

00:06:08.380 --> 00:06:11.100
I am going to select my
desktop to share.

00:06:11.100 --> 00:06:15.490
For those of you who might not
have read the Call-out, what

00:06:15.490 --> 00:06:19.900
I'm going to be presenting today
is on advanced video.

00:06:19.900 --> 00:06:26.510
This is the talk that I gave
at Silicon Valley code camp

00:06:26.510 --> 00:06:28.130
two weeks ago now.

00:06:28.130 --> 00:06:30.590
So let me just get a thumbs up
from those on the Hangout, can

00:06:30.590 --> 00:06:33.260
you see the presentation
on the screen?

00:06:33.260 --> 00:06:34.430
Awesome.

00:06:34.430 --> 00:06:35.580
All right.

00:06:35.580 --> 00:06:38.110
So let's talk about
advanced video.

00:06:38.110 --> 00:06:40.150
I had put this together.

00:06:40.150 --> 00:06:43.090
So those of you who might do
video production might

00:06:43.090 --> 00:06:46.050
recognize a picture
such as this.

00:06:46.050 --> 00:06:48.200
As you're doing video
production, you're out there

00:06:48.200 --> 00:06:52.600
with your camera, or equipment,
or entire studio

00:06:52.600 --> 00:06:56.140
set up and you've recorded
all your content.

00:06:56.140 --> 00:06:58.170
This is often a lot of work.

00:06:58.170 --> 00:07:00.560
You're doing filming, you're
coordinating schedules, you're

00:07:00.560 --> 00:07:04.550
coordinating location, and now
you've finished all your post

00:07:04.550 --> 00:07:08.830
production, you have to start
thinking about distribution.

00:07:08.830 --> 00:07:11.580
That fun exciting exercise that
helps get that thing that

00:07:11.580 --> 00:07:14.200
you've worked so hard on
out into the world.

00:07:14.200 --> 00:07:18.540
So now with video distribution,
and Google, we

00:07:18.540 --> 00:07:21.870
have two different powerful
distribution channels.

00:07:21.870 --> 00:07:25.610
One being YouTube of course,
where you can upload your

00:07:25.610 --> 00:07:29.110
video, and have it accessible
to the masses, and there's

00:07:29.110 --> 00:07:31.380
YouTube clients on all
sorts of devices.

00:07:31.380 --> 00:07:33.850
The one that I'm interested in
talking about today though is

00:07:33.850 --> 00:07:35.470
the Google TV platform.

00:07:35.470 --> 00:07:38.080
And it's exciting because
it's making its way

00:07:38.080 --> 00:07:38.950
into people's homes.

00:07:38.950 --> 00:07:42.680
Which is changing the way
people consume content.

00:07:42.680 --> 00:07:46.480
Whether it be YouTube,
or other channels.

00:07:46.480 --> 00:07:49.660
A few of the supported encodings
for Google TV--

00:07:49.660 --> 00:07:51.800
because once you've produced
your video, you have to

00:07:51.800 --> 00:07:54.720
consider how you're going to
compress it and encode it to

00:07:54.720 --> 00:07:56.060
distribute it.

00:07:56.060 --> 00:07:59.100
Not all devices are created
equal, and not all devices

00:07:59.100 --> 00:08:01.270
offer the same decoding
mechanisms.

00:08:01.270 --> 00:08:05.310
The ones that Google TV supports
are listed on our

00:08:05.310 --> 00:08:08.560
site-- developers.google.com/TV.

00:08:08.560 --> 00:08:11.120
I've captured the pertinent
information and

00:08:11.120 --> 00:08:12.640
put it on the slide.

00:08:12.640 --> 00:08:16.280
In a nutshell, we support
H.264/AVC.

00:08:16.280 --> 00:08:21.280
So this supports the H.264
High Profile app, 4.1--

00:08:21.280 --> 00:08:25.960
as well as the H.264 Baseline,
so BP for AVI.

00:08:25.960 --> 00:08:28.370
It has limited B-frame support
though, so you have to be

00:08:28.370 --> 00:08:31.780
careful in how you go about
encoding it if you're going to

00:08:31.780 --> 00:08:33.350
use Baseline profile.

00:08:33.350 --> 00:08:37.679
Now file types that are typical
for packaging with

00:08:37.679 --> 00:08:44.190
H.264 include 3GPP, MPEG TS,
Matroska, AVIs, Flash,

00:08:44.190 --> 00:08:49.970
QuickTime, and MTS files
which is AVCHD.

00:08:49.970 --> 00:08:51.670
Not all of you are expected
to know this.

00:08:51.670 --> 00:08:56.642
The world of codecs is
mind bogglingly huge.

00:08:56.642 --> 00:09:01.160
But H.264 is probably one of the
most popular standards out

00:09:01.160 --> 00:09:03.320
there with regards to codecs.

00:09:03.320 --> 00:09:05.580
We also support MP4s.

00:09:05.580 --> 00:09:09.760
This is also a legacy codec I
guess you could say, although

00:09:09.760 --> 00:09:12.240
it does show up in a lot of
devices, and it's still in

00:09:12.240 --> 00:09:13.630
active production--

00:09:13.630 --> 00:09:16.230
or active use by production
companies right now.

00:09:16.230 --> 00:09:18.630
Again the container
types for those--

00:09:18.630 --> 00:09:23.720
3GPP, AVIs, MP4s, DivX, probably
the one that's most

00:09:23.720 --> 00:09:25.770
famous for popularizing MP4.

00:09:25.770 --> 00:09:27.810
And MPEG TS files.

00:09:27.810 --> 00:09:31.100
We have some support
for VP6 and VP8.

00:09:31.100 --> 00:09:35.280
Typically you'll find those
in WBEM and FLVs.

00:09:35.280 --> 00:09:36.690
I'm not going to be covering
any of that

00:09:36.690 --> 00:09:40.490
today WMV 9s and VC-1s--

00:09:40.490 --> 00:09:46.350
those are for ASF, and Windows
support or popularized by

00:09:46.350 --> 00:09:48.812
Windows support.

00:09:48.812 --> 00:09:54.290
The container for that is
a WMV and MPEG TS file.

00:09:54.290 --> 00:09:58.420
We also have support for
MPEG-2, it's not really

00:09:58.420 --> 00:10:01.480
required for Buddy Boxes, but
Blu-Ray players, et cetera,

00:10:01.480 --> 00:10:02.360
typically use that.

00:10:02.360 --> 00:10:05.404
So we support pass through.

00:10:05.404 --> 00:10:07.550
How do codecs work?

00:10:07.550 --> 00:10:11.650
This is something that I don't
think it's enough coverage in

00:10:11.650 --> 00:10:12.510
the stuff that we talk about.

00:10:12.510 --> 00:10:16.830
So I'm going to briefly go over
how codecs do their job.

00:10:16.830 --> 00:10:19.630
Essentially, if you take
a picture, you

00:10:19.630 --> 00:10:22.330
have a lot of pixels.

00:10:22.330 --> 00:10:25.820
Cameras now are multi-megapixel,
and all that

00:10:25.820 --> 00:10:30.630
information for a single frame
needs to be stored in a file.

00:10:30.630 --> 00:10:34.980
The moment you start getting
into videos with multiple

00:10:34.980 --> 00:10:37.270
images all chained together--

00:10:37.270 --> 00:10:41.030
you'd end up carrying around a
lot of redundant information

00:10:41.030 --> 00:10:42.740
in a moving scene.

00:10:42.740 --> 00:10:48.690
So video codecs typically take
the temporal aspect of all of

00:10:48.690 --> 00:10:51.880
these images, and figure
out how to remove those

00:10:51.880 --> 00:10:54.060
redundancies.

00:10:54.060 --> 00:10:56.970
So what I have here on the slide
is what's supposed to

00:10:56.970 --> 00:10:58.790
represent a bunch of
different frames.

00:10:58.790 --> 00:11:00.930
So we have one base image--

00:11:00.930 --> 00:11:02.940
call it an I-frame.

00:11:02.940 --> 00:11:04.640
Not to be confused with
web technology.

00:11:04.640 --> 00:11:08.800
I'm talking the label
of an I-frame.

00:11:08.800 --> 00:11:12.060
The next frame that would be
displayed is not going to

00:11:12.060 --> 00:11:14.890
contain all the same information
as that I-frame.

00:11:14.890 --> 00:11:19.500
It's only going to contain the
deltas between the last frame

00:11:19.500 --> 00:11:22.810
that was shown, and what
needs to be shown now.

00:11:22.810 --> 00:11:25.040
So essentially as it changes.

00:11:25.040 --> 00:11:27.040
Some of the more advanced
codecs-- again,

00:11:27.040 --> 00:11:29.350
H.264 being an example--

00:11:29.350 --> 00:11:31.720
they actually utilize three
different types of frames.

00:11:31.720 --> 00:11:35.700
So you have key frames,
I-frames, P-frames, which are

00:11:35.700 --> 00:11:40.480
limited deltas, and B-frames,
which are even more limited.

00:11:40.480 --> 00:11:46.240
Now a P-frame is going to look
ahead and behind it for what

00:11:46.240 --> 00:11:48.730
delta metadata it needs
to carry with it.

00:11:48.730 --> 00:11:51.730
And a B-frame is only going to
look backwards for what delta

00:11:51.730 --> 00:11:53.900
information to carry with it.

00:11:53.900 --> 00:11:56.520
All of this together when you
encode all these images

00:11:56.520 --> 00:12:01.430
results in a more compressed
form of the video.

00:12:01.430 --> 00:12:03.730
So all these images are crunched
down and you don't

00:12:03.730 --> 00:12:04.980
carry around all
this metadata.

00:12:07.260 --> 00:12:09.130
And why do we care about this?

00:12:09.130 --> 00:12:14.080
Well, we care about getting
small files for video for a

00:12:14.080 --> 00:12:14.660
couple reasons.

00:12:14.660 --> 00:12:18.220
Mainly though, it's for
reducing bandwidth.

00:12:18.220 --> 00:12:24.370
If you have your codec reducing
the bit rate to below

00:12:24.370 --> 00:12:27.600
the bandwidth, you are not
going to achieve the best

00:12:27.600 --> 00:12:31.170
possible quality, because you've
reduced the amount of

00:12:31.170 --> 00:12:33.880
information that's transmitted
too far, and there's more

00:12:33.880 --> 00:12:35.750
bandwidth available.

00:12:35.750 --> 00:12:40.220
Likewise if your bit rate when
you're encoding is higher than

00:12:40.220 --> 00:12:42.290
the available bandwidth,
you end up with

00:12:42.290 --> 00:12:43.160
the buffering screen.

00:12:43.160 --> 00:12:48.480
So some of you might see video
like this if the bit rate is

00:12:48.480 --> 00:12:53.070
too low, and the other case
that happens is the

00:12:53.070 --> 00:12:54.490
buffering as I said.

00:12:54.490 --> 00:12:56.910
And I hate buffering
screens, don't you?

00:12:56.910 --> 00:12:58.000
They're kind of annoying.

00:12:58.000 --> 00:13:03.010
It sort of degrades the whole
experience overall.

00:13:03.010 --> 00:13:06.910
So the reason I'm talking about
all this is because a

00:13:06.910 --> 00:13:10.140
lot of the content distribution
that goes on in

00:13:10.140 --> 00:13:12.980
Google TV, it happens over IP.

00:13:12.980 --> 00:13:15.550
And not everyone's bandwidth
is created equal.

00:13:15.550 --> 00:13:19.320
And you should really take into
account how much somebody

00:13:19.320 --> 00:13:20.760
might be paying for that
bandwidth, or what

00:13:20.760 --> 00:13:22.050
availability they have.

00:13:22.050 --> 00:13:26.770
Geographically people in less
populated areas have lower

00:13:26.770 --> 00:13:32.280
bandwidth, and so you want to
utilize a codec that offers a

00:13:32.280 --> 00:13:38.250
good balance between quality,
and the ability to transport

00:13:38.250 --> 00:13:42.320
it to these devices in these
low bandwidth areas.

00:13:42.320 --> 00:13:45.940
A few things more about encoding
since I've talked

00:13:45.940 --> 00:13:47.190
about bit rates.

00:13:49.720 --> 00:13:53.930
Back in the older days when we
were first learning about how

00:13:53.930 --> 00:13:56.610
to encode video for
transmission, there was

00:13:56.610 --> 00:13:58.150
something called constant
bit rate.

00:13:58.150 --> 00:14:03.610
This is where every frame in the
video file would basically

00:14:03.610 --> 00:14:06.770
be compressed to about the same
size, using quantization,

00:14:06.770 --> 00:14:08.800
matrices, et cetera.

00:14:08.800 --> 00:14:14.290
Constant bit rate is OK, but
it leads to inefficiencies,

00:14:14.290 --> 00:14:17.960
and kind of large files,
or smaller

00:14:17.960 --> 00:14:19.960
files with poorer quality.

00:14:19.960 --> 00:14:22.990
There's this concept called
Variable Bit Rate Encoding

00:14:22.990 --> 00:14:27.240
that takes into account how much
change there is within a

00:14:27.240 --> 00:14:28.160
particular scene.

00:14:28.160 --> 00:14:30.520
So you can see in this slide
here-- which the images at the

00:14:30.520 --> 00:14:33.590
bottom are borrowed from
"Big Buck Bunny".

00:14:33.590 --> 00:14:40.150
In a scene that has low motion,
your encoder will be

00:14:40.150 --> 00:14:42.990
able to compress it more
because there's less

00:14:42.990 --> 00:14:46.260
information that has to be
carried between frames.

00:14:46.260 --> 00:14:49.900
As the scene changes and there
happens to be moderate motion,

00:14:49.900 --> 00:14:54.880
for instance, then the encoder
could detect this, and use a

00:14:54.880 --> 00:14:58.220
higher bit rate to encode
that part of the

00:14:58.220 --> 00:14:59.540
scene in the video.

00:14:59.540 --> 00:15:01.830
And then if it dropped down,
it could go back to a lower

00:15:01.830 --> 00:15:03.940
bit rate, and then if it was
really high motion--

00:15:03.940 --> 00:15:07.240
that is lots of deltas
between the frames--

00:15:07.240 --> 00:15:10.570
it can go up to an even
higher bit rate form.

00:15:10.570 --> 00:15:13.440
So you get all this bursting,
and dropping.

00:15:13.440 --> 00:15:15.680
It's the way the graph is listed
there on the white

00:15:15.680 --> 00:15:21.490
line, which goes up and down as
the encoding takes place.

00:15:21.490 --> 00:15:25.420
So variable bit rate encoding,
its requirements depend on a

00:15:25.420 --> 00:15:25.900
few things.

00:15:25.900 --> 00:15:28.950
One happens to do with the
complexity of the image, and

00:15:28.950 --> 00:15:29.720
its resolution.

00:15:29.720 --> 00:15:33.030
So obviously, the bigger the
image you're trying to encode,

00:15:33.030 --> 00:15:35.300
the more space it's
going to need.

00:15:35.300 --> 00:15:39.130
And the various codecs that
exist out there treat the

00:15:39.130 --> 00:15:42.100
compression part of it
differently, so something

00:15:42.100 --> 00:15:43.970
you'll have to factor in.

00:15:43.970 --> 00:15:46.660
There are differences between
the frames, so an action movie

00:15:46.660 --> 00:15:48.490
versus a talking head movie--

00:15:48.490 --> 00:15:50.840
you could use the same codecs,
same settings and you might

00:15:50.840 --> 00:15:54.460
notice even if they were the
same temporal length--

00:15:54.460 --> 00:15:55.730
say it was 10 minutes--

00:15:55.730 --> 00:16:00.150
they might be encoded into files
that vary differently.

00:16:00.150 --> 00:16:02.680
So one might be a gigabyte,
and the other

00:16:02.680 --> 00:16:05.520
might be 200 megabytes.

00:16:05.520 --> 00:16:08.260
So variable bit rate encoding
in summary--

00:16:08.260 --> 00:16:11.880
its encoding adapts by lowering
the rates for simple

00:16:11.880 --> 00:16:15.270
scenes, and bursts of high bit
rate when it's needed.

00:16:15.270 --> 00:16:17.940
Typical parameters include
setting an average bit rate

00:16:17.940 --> 00:16:21.040
over a 10 to 30 second period
where it allows for bursts

00:16:21.040 --> 00:16:24.190
that go maybe up to 150%
of whatever the

00:16:24.190 --> 00:16:26.850
normal bandwidth is.

00:16:26.850 --> 00:16:31.370
An encoder that will provide
variable bit rate encoding, it

00:16:31.370 --> 00:16:35.080
needs to have the ability to
look ahead, so it needs some

00:16:35.080 --> 00:16:37.510
form of buffering to absorb
these bursts.

00:16:37.510 --> 00:16:40.740
Now this is true on the encoding
side, and also on the

00:16:40.740 --> 00:16:42.070
decoding side.

00:16:42.070 --> 00:16:44.600
So some of you may be familiar
with when you

00:16:44.600 --> 00:16:46.940
start a video online--

00:16:46.940 --> 00:16:50.710
pick your favorite content
provider online.

00:16:50.710 --> 00:16:53.410
You might notice it takes a
couple of seconds for that

00:16:53.410 --> 00:16:55.350
first frame to start
showing and the

00:16:55.350 --> 00:16:55.860
video to start playing.

00:16:55.860 --> 00:17:01.480
This is actually due to the
client side buffering up

00:17:01.480 --> 00:17:05.810
enough information so it can
start decoding the video.

00:17:05.810 --> 00:17:06.540
Average bit rate--

00:17:06.540 --> 00:17:07.670
which I've mentioned--

00:17:07.670 --> 00:17:10.200
the encoder will attempt to
reach a target average bit

00:17:10.200 --> 00:17:13.050
rate or file size, while
allowing for the bit rate to

00:17:13.050 --> 00:17:15.060
vary between the different
parts of the media.

00:17:15.060 --> 00:17:18.220
Essentially what this means is,
when you are encoding your

00:17:18.220 --> 00:17:22.130
video, you have the ability to
say hey, I want to have the

00:17:22.130 --> 00:17:25.440
average rate be half
a megabit.

00:17:25.440 --> 00:17:26.710
Then the encoder's going
to take that and

00:17:26.710 --> 00:17:28.860
use that as a bar.

00:17:28.860 --> 00:17:30.760
And as it's going through the
video, it will try and achieve

00:17:30.760 --> 00:17:34.580
that target average, but it
won't always honor it in a

00:17:34.580 --> 00:17:36.440
strict way across
the whole video.

00:17:36.440 --> 00:17:39.390
As I've demonstrated in the last
few slides, it will maybe

00:17:39.390 --> 00:17:42.575
drop below when it's
appropriate, and it might go

00:17:42.575 --> 00:17:45.820
as high as 150% above the
average bit rate if it's

00:17:45.820 --> 00:17:49.740
necessary to encode a very
complicated scene.

00:17:49.740 --> 00:17:52.900
So which bit rate should
you strive for?

00:17:52.900 --> 00:17:54.330
How do you make these
decisions?

00:17:54.330 --> 00:17:57.240
Where does this all
come into play?

00:17:57.240 --> 00:18:02.300
Like I said a short time ago,
the availability of bandwidth

00:18:02.300 --> 00:18:06.010
varies by geographic location,
and how much someone is

00:18:06.010 --> 00:18:07.080
willing to pay.

00:18:07.080 --> 00:18:10.350
So these numbers that I put the
slide here are just based

00:18:10.350 --> 00:18:11.510
on a quick, rough, survey.

00:18:11.510 --> 00:18:13.440
Nothing really scientific.

00:18:13.440 --> 00:18:16.030
For about $10 a month you can
get two megabits of bandwidth

00:18:16.030 --> 00:18:19.560
in a typical city or
urban environment.

00:18:19.560 --> 00:18:24.350
For $99 a month you can get 20
megabits down, and for $70 a

00:18:24.350 --> 00:18:28.010
month you can get a whole
terabyte megabits downwards.

00:18:28.010 --> 00:18:29.810
But that's in Kansas
City only.

00:18:29.810 --> 00:18:34.370
Sorry if you really want
that for $70 a month.

00:18:34.370 --> 00:18:36.290
So if you're lucky enough to
live in Kansas City, and

00:18:36.290 --> 00:18:40.690
you've got Google Fiber, you
don't have bandwidth problems.

00:18:40.690 --> 00:18:46.140
So consider carefully how much
encoding or what kind of

00:18:46.140 --> 00:18:48.450
encoding trade-off you want to
make with your video after

00:18:48.450 --> 00:18:50.260
you've produced it.

00:18:50.260 --> 00:18:54.390
Now I want to talk about
live streaming.

00:18:54.390 --> 00:18:57.600
Live streaming is something that
seeks to remedy some of

00:18:57.600 --> 00:19:01.790
the problems between deciding
what you should encode at, and

00:19:01.790 --> 00:19:05.330
delivering to people with
varying bandwidth levels.

00:19:05.330 --> 00:19:07.310
Now HLS--

00:19:07.310 --> 00:19:08.850
HTTP live streaming--

00:19:08.850 --> 00:19:13.840
it's a pretty elegant solution
to this problem.

00:19:13.840 --> 00:19:17.080
Essentially you take a video
file and you pass it through

00:19:17.080 --> 00:19:18.630
an HLS encoder.

00:19:18.630 --> 00:19:23.040
And what the encoder is going to
do is actually encode into

00:19:23.040 --> 00:19:26.030
at least three different
bit rates.

00:19:26.030 --> 00:19:28.510
So you'll have a low bit rate,
you'll have a medium bit rate,

00:19:28.510 --> 00:19:30.250
and you'll have a
high bit rate.

00:19:30.250 --> 00:19:33.970
And in the end it'll produce
three video files.

00:19:33.970 --> 00:19:35.630
I'm using a very simple
case here.

00:19:35.630 --> 00:19:40.745
Those three video files
represent half a megabit, a

00:19:40.745 --> 00:19:44.600
full megabit, or two megabits,
and maybe five megabits.

00:19:44.600 --> 00:19:48.980
And you have different degrees
of quality in those videos.

00:19:48.980 --> 00:19:51.000
They're all tied together
with something

00:19:51.000 --> 00:19:52.630
called an Index File.

00:19:52.630 --> 00:19:56.590
Now this Index File, it's
typically XML, there's

00:19:56.590 --> 00:19:57.670
different formats out there.

00:19:57.670 --> 00:20:01.430
I'm going to talk briefly
about M3U8.

00:20:01.430 --> 00:20:03.570
I've got an example
on the next slide.

00:20:03.570 --> 00:20:12.490
Essentially M3U8 indexes this
high, medium, and low encoding

00:20:12.490 --> 00:20:16.470
of the video, and a
client player--

00:20:16.470 --> 00:20:18.740
let's say Google TV--

00:20:18.740 --> 00:20:25.540
which has loaded an M3U8 file
knows how to jump between the

00:20:25.540 --> 00:20:28.900
high, medium, and low streams
based on the bandwidth

00:20:28.900 --> 00:20:32.810
availability as the video's
being delivered.

00:20:32.810 --> 00:20:35.120
Typically it uses things like
quality of service--

00:20:35.120 --> 00:20:37.700
which I'll talk a little
bit about later--

00:20:37.700 --> 00:20:40.270
to determine when it should
switch between

00:20:40.270 --> 00:20:42.470
high, medium, or low.

00:20:42.470 --> 00:20:47.380
But the essential story is you
can use HLS to create multiple

00:20:47.380 --> 00:20:51.430
video streams of the same
video content, but at

00:20:51.430 --> 00:20:54.360
different quality levels, and
let the client choose which

00:20:54.360 --> 00:20:57.560
one to jump to based
on what's available

00:20:57.560 --> 00:20:59.110
bandwidth-wise for the user.

00:20:59.110 --> 00:21:00.790
Now something else I'm going
to point out here-- some of

00:21:00.790 --> 00:21:05.460
the more advanced encoders allow
you to do time splicing

00:21:05.460 --> 00:21:06.610
in the video too.

00:21:06.610 --> 00:21:10.870
So instead of having to choose
one continuous low, medium, or

00:21:10.870 --> 00:21:14.560
high video feed, typically the
encoder will also slice the

00:21:14.560 --> 00:21:15.540
video temporally.

00:21:15.540 --> 00:21:19.660
So you'll have maybe 10 to
30 second chunks of low.

00:21:19.660 --> 00:21:23.400
So let's say we had a 10 minute
video, and we had set

00:21:23.400 --> 00:21:27.200
our encoder to chunk it into
one minute intervals.

00:21:27.200 --> 00:21:31.180
So I'm watching this, and my
bandwidth is such that I'm

00:21:31.180 --> 00:21:33.220
getting the medium feed
to begin with.

00:21:33.220 --> 00:21:36.950
And so I'm fed that first minute
of medium video to my

00:21:36.950 --> 00:21:38.410
client, and it's playing.

00:21:38.410 --> 00:21:42.750
All of a sudden my wife jumps on
to her computer, and starts

00:21:42.750 --> 00:21:46.030
downloading something large, and
my bandwidth gets squeezed

00:21:46.030 --> 00:21:47.040
down a little bit.

00:21:47.040 --> 00:21:52.550
After that minute is up, the
client player on Google TV is

00:21:52.550 --> 00:21:54.700
going to notice that the
bandwidth has sort of dropped

00:21:54.700 --> 00:21:57.720
off, and the buffer is emptying,
so it might switch

00:21:57.720 --> 00:22:00.630
me to the low feed for that
next minute segment.

00:22:00.630 --> 00:22:03.960
And so I would continue to watch
the video, and see this

00:22:03.960 --> 00:22:06.340
lower quality video, but
it's still playing.

00:22:06.340 --> 00:22:08.450
And then my wife's done
downloading her file, and my

00:22:08.450 --> 00:22:13.630
bandwidth skyrockets up
to five megabits.

00:22:13.630 --> 00:22:18.630
Now the client player is going
to detect that the buffer is

00:22:18.630 --> 00:22:22.860
constantly full, and that it
can actually pull more.

00:22:22.860 --> 00:22:25.270
So it makes the decision then
to switch to the high stream

00:22:25.270 --> 00:22:27.000
for that next one
minute segment.

00:22:27.000 --> 00:22:28.050
So this is--

00:22:28.050 --> 00:22:29.190
in a nutshell--

00:22:29.190 --> 00:22:31.750
how HLS works.

00:22:31.750 --> 00:22:33.750
And there are various encoders
you can use.

00:22:33.750 --> 00:22:37.160
I believe you can pull this
off with FFmpeg--

00:22:37.160 --> 00:22:38.720
don't quote me on that.

00:22:38.720 --> 00:22:41.820
Apple I believe produces
some media encoders.

00:22:41.820 --> 00:22:44.000
There's some third party
ones out there.

00:22:44.000 --> 00:22:45.950
I'm not going to make any
official recommendation.

00:22:45.950 --> 00:22:48.680
But you can search for this
using your favorite search

00:22:48.680 --> 00:22:52.610
engine, and discover some of the
details of an encoder that

00:22:52.610 --> 00:22:54.860
might work for your platform.

00:22:54.860 --> 00:22:58.260
So as I've already stated, a
manifest file-- which is the

00:22:58.260 --> 00:22:59.970
M3U8 file in the example
I just gave.

00:22:59.970 --> 00:23:01.590
It's an index file containing
links to the

00:23:01.590 --> 00:23:02.570
actual media files.

00:23:02.570 --> 00:23:05.850
Each media file is referenced,
and has a different bit rate.

00:23:05.850 --> 00:23:10.640
So what an example Manifest
file would look like is

00:23:10.640 --> 00:23:11.310
something like this.

00:23:11.310 --> 00:23:15.270
You have Manifest of XML, and
you've got the name space, and

00:23:15.270 --> 00:23:16.860
then you would have some
media references.

00:23:16.860 --> 00:23:21.320
So media with an href pointing
to the low bit rate file, and

00:23:21.320 --> 00:23:23.680
then it has a bit rate attribute
that specifies what

00:23:23.680 --> 00:23:26.140
its bit rate is, and then you
might have one for medium,

00:23:26.140 --> 00:23:27.400
specifying its bit rate.

00:23:27.400 --> 00:23:31.050
You might have one for high
and its bit rate.

00:23:31.050 --> 00:23:33.260
These files could actually
get kind of complicated,

00:23:33.260 --> 00:23:36.110
especially if you start getting
into temporally

00:23:36.110 --> 00:23:38.520
chunking up your video.

00:23:38.520 --> 00:23:41.490
Your encoder should take care
of all the gory details.

00:23:41.490 --> 00:23:44.990
But the interesting thing to
note is you can actually open

00:23:44.990 --> 00:23:48.320
this in an editor, and poke
around and take a look if you

00:23:48.320 --> 00:23:51.130
need to debug something, or a
stream isn't working the way

00:23:51.130 --> 00:23:52.790
you expected.

00:23:52.790 --> 00:23:56.060
It gives you a point with which
to debug any problems

00:23:56.060 --> 00:23:57.910
you might be having.

00:23:57.910 --> 00:24:00.220
So I'm not going to go too deep
into the details of this,

00:24:00.220 --> 00:24:03.030
this is about the extent that
I'm going to cover this part.

00:24:03.030 --> 00:24:06.450
But there is a lot of
information that is available

00:24:06.450 --> 00:24:09.675
that can explain all the gory
details of this, and how to

00:24:09.675 --> 00:24:10.960
encode your media files.

00:24:10.960 --> 00:24:13.480
I just wanted to make you
guys aware of this.

00:24:13.480 --> 00:24:15.820
I'd already talked about the
track jumping, I guess I

00:24:15.820 --> 00:24:18.510
should have moved to this slide
when I explained it, but

00:24:18.510 --> 00:24:20.190
just track jumping again.

00:24:20.190 --> 00:24:23.170
You can see here it's an example
between the different

00:24:23.170 --> 00:24:24.700
time points in the video.

00:24:24.700 --> 00:24:27.990
Where bandwidth is increasing as
we move from left to right.

00:24:27.990 --> 00:24:31.710
And then after we hit T3 there,
my bandwidth starts to

00:24:31.710 --> 00:24:33.020
get choked off again, So.

00:24:33.020 --> 00:24:38.100
I start to gracefully degrade
into the low range again.

00:24:38.100 --> 00:24:40.890
Now how easy is this to
implement if you're just doing

00:24:40.890 --> 00:24:42.580
a web app for Google TV?

00:24:42.580 --> 00:24:44.400
Pretty darn simple.

00:24:44.400 --> 00:24:49.970
You can use the HTML-5 video
tag, So if you use video with

00:24:49.970 --> 00:24:53.890
a source pointing to your M3U8
file, and you could add

00:24:53.890 --> 00:24:56.520
attributes like controls,
and auto play.

00:24:56.520 --> 00:24:57.880
That's all you need to do.

00:24:57.880 --> 00:25:00.760
So if your video is deployed
on a CDN, or a web server

00:25:00.760 --> 00:25:06.150
somewhere, if you literally put
this line of code in your

00:25:06.150 --> 00:25:08.970
website or web page and
load it on Google TV,

00:25:08.970 --> 00:25:11.240
it will start playing.

00:25:11.240 --> 00:25:12.850
This is not true if you
try and put this

00:25:12.850 --> 00:25:14.800
in just basic Chrome--

00:25:14.800 --> 00:25:16.590
or Firefox for that matter.

00:25:16.590 --> 00:25:20.980
It would work on Mac, under
Safari, because I think they

00:25:20.980 --> 00:25:22.350
implemented it.

00:25:22.350 --> 00:25:24.770
The point I'm trying to make
is this works on Google TV.

00:25:24.770 --> 00:25:29.290
It's not guaranteed to work
on all other browsers.

00:25:29.290 --> 00:25:32.870
There is mixed support for it,
but it does work on Google TV.

00:25:32.870 --> 00:25:36.510
So a nice simple elegant way to
get a video in a web page.

00:25:39.570 --> 00:25:42.130
This fits with the standard ways
of doing video delivery

00:25:42.130 --> 00:25:43.640
on the web using Flash,
or HTML-5.

00:25:46.690 --> 00:25:49.180
Some people have noted that
there's a problem with the

00:25:49.180 --> 00:25:52.670
latest version of Flash
on Google TV.

00:25:52.670 --> 00:25:55.210
We're looking at that, but there
really isn't too much we

00:25:55.210 --> 00:25:57.830
can do because it is an Adobe
product, and they're the ones

00:25:57.830 --> 00:25:59.380
who are responsible for
maintaining it.

00:25:59.380 --> 00:26:02.630
So consider carefully if you're
going to use the latest

00:26:02.630 --> 00:26:04.970
version of Flash for
distribution on Google TV.

00:26:04.970 --> 00:26:08.090
Make sure you test and that the
version actually works.

00:26:08.090 --> 00:26:12.360
We of course support a lot of
the HTML-5 video players.

00:26:12.360 --> 00:26:17.550
Not in WebView, but definitely
in Chrome.

00:26:17.550 --> 00:26:20.100
Now we get to talk about my--

00:26:20.100 --> 00:26:22.310
I don't want to say my favorite
topic, but certainly

00:26:22.310 --> 00:26:25.470
one that said breeds a
lot of controversy.

00:26:25.470 --> 00:26:27.120
That would be DRM.

00:26:27.120 --> 00:26:32.160
Which is another aspect of
advanced video in this space.

00:26:32.160 --> 00:26:34.680
And I really like this graphic,
I like the blue, and

00:26:34.680 --> 00:26:35.600
the digit stuff.

00:26:35.600 --> 00:26:38.070
I'm not sure how well it's
showing up on the Hangouts,

00:26:38.070 --> 00:26:40.920
but I think it looks cool.

00:26:40.920 --> 00:26:44.600
So DRM in a nutshell--

00:26:44.600 --> 00:26:48.790
So HSL in and of itself, even
if you use AES encryption,

00:26:48.790 --> 00:26:50.090
it's not DRM.

00:26:50.090 --> 00:26:53.390
You're simply protecting the
video transmission, not the

00:26:53.390 --> 00:26:54.430
content itself.

00:26:54.430 --> 00:26:58.170
DRM is defined as having
three core things.

00:26:58.170 --> 00:27:01.880
One being license management,
the other being transport

00:27:01.880 --> 00:27:05.020
encryption, and the third one
being secure decoding on a

00:27:05.020 --> 00:27:08.090
trusted video path within
the client.

00:27:08.090 --> 00:27:11.570
You might notice that sometimes
you try and play

00:27:11.570 --> 00:27:16.610
media content on a nonstandard
device, and it won't play.

00:27:16.610 --> 00:27:18.470
Well that's usually because
it's missing

00:27:18.470 --> 00:27:21.030
trusted video paths.

00:27:21.030 --> 00:27:29.236
And this is a confusion I'm
hoping to alleviate where the

00:27:29.236 --> 00:27:32.930
term DRM is synonymous with
these three things--

00:27:32.930 --> 00:27:35.160
License Management, Transport
Encryption, and Security

00:27:35.160 --> 00:27:36.190
Decoding on Trusted
Video Path.

00:27:36.190 --> 00:27:39.780
And Google TV has Trusted
Video Path SOCs.

00:27:39.780 --> 00:27:44.450
SOCs are systems on a chip,
and they are provided by

00:27:44.450 --> 00:27:46.770
certain vendors, and partners
that we have that all

00:27:46.770 --> 00:27:51.090
integrate together, and play
nice in this video space.

00:27:51.090 --> 00:27:53.410
So how does content
protection work?

00:27:53.410 --> 00:27:57.910
Well, you have a server, and
it's serving up some form of

00:27:57.910 --> 00:28:02.050
video file or media file, and
it's going to send along an

00:28:02.050 --> 00:28:04.920
encryption key with that
file to the device.

00:28:04.920 --> 00:28:07.930
And that device uses that
encryption key to decrypt the

00:28:07.930 --> 00:28:09.690
video file for playback.

00:28:09.690 --> 00:28:11.440
Now in Google TV's case
it's playing the role

00:28:11.440 --> 00:28:12.120
of the device here.

00:28:12.120 --> 00:28:16.700
So it needs to receive this
encryption key from whatever

00:28:16.700 --> 00:28:18.730
server is offering it.

00:28:18.730 --> 00:28:21.700
And then it uses that to decrypt
the video file, and

00:28:21.700 --> 00:28:24.540
then it's going to pass it along
another secure channel--

00:28:24.540 --> 00:28:27.470
that is HDMI with HDCP.

00:28:27.470 --> 00:28:31.810
Google TV has imbued in it the
HDCP keys that allow to

00:28:31.810 --> 00:28:35.090
communicate over issue by HDMI
to secure screens like

00:28:35.090 --> 00:28:38.620
televisions to play back that
content on the screen.

00:28:38.620 --> 00:28:41.370
So there's actually two forms
of encryption and

00:28:41.370 --> 00:28:42.970
decryption going on--

00:28:42.970 --> 00:28:45.620
on the whole video path from
wherever the content is being

00:28:45.620 --> 00:28:50.180
served from, to the screen that
it's being served on.

00:28:50.180 --> 00:28:52.320
So I'm going to walk
you through a

00:28:52.320 --> 00:28:53.860
typical scenario here.

00:28:53.860 --> 00:28:57.250
You've got Google TV and it
wants to watch some URL.

00:28:57.250 --> 00:28:59.150
So it goes, hey, content
server, can I

00:28:59.150 --> 00:29:01.020
please watch this URL?

00:29:01.020 --> 00:29:03.810
And the content server
says well you could,

00:29:03.810 --> 00:29:04.940
but you need a license.

00:29:04.940 --> 00:29:06.620
You need to go here
and get this.

00:29:06.620 --> 00:29:08.780
Here's the URL, go take
care of the licensing.

00:29:08.780 --> 00:29:11.970
So Google TV's client
then goes to

00:29:11.970 --> 00:29:13.230
that URL for the license.

00:29:13.230 --> 00:29:15.950
So it asks the license
server hey, can I get

00:29:15.950 --> 00:29:16.980
a license for this?

00:29:16.980 --> 00:29:19.520
And the license servers says no,
you need to pay for that,

00:29:19.520 --> 00:29:21.770
go here to make payment.

00:29:21.770 --> 00:29:26.110
So then Google TV's client
posts payment data to the

00:29:26.110 --> 00:29:28.910
payment server, and the payment
server will inform the

00:29:28.910 --> 00:29:31.610
license server that this
particular client

00:29:31.610 --> 00:29:32.910
has paid for it.

00:29:32.910 --> 00:29:36.320
And if the payment server will
send a token back to the

00:29:36.320 --> 00:29:38.140
client on the Google TV.

00:29:38.140 --> 00:29:41.326
And then the Google TV will ask
for the license again from

00:29:41.326 --> 00:29:43.705
the license server providing
the token that it received

00:29:43.705 --> 00:29:45.115
from the payment server.

00:29:45.115 --> 00:29:47.920
The license server will then
go, hey, you paid.

00:29:47.920 --> 00:29:50.610
Here's your URL unlock
with license key

00:29:50.610 --> 00:29:52.770
on a separate channel.

00:29:52.770 --> 00:29:55.210
And then Google TV will go back
to the content server

00:29:55.210 --> 00:29:58.120
with the URL, and provide
some form of license key

00:29:58.120 --> 00:29:59.070
validation.

00:29:59.070 --> 00:30:01.850
And the content server will
start sending encrypted data

00:30:01.850 --> 00:30:04.430
back that the client can play.

00:30:04.430 --> 00:30:06.330
So in a nutshell--

00:30:06.330 --> 00:30:08.050
this is a very simplistic
view, by the

00:30:08.050 --> 00:30:11.280
way, of how DRM works.

00:30:11.280 --> 00:30:13.360
For illustrative
purposes only.

00:30:13.360 --> 00:30:18.510
But through these mechanisms
this is how DRM works.

00:30:18.510 --> 00:30:20.040
Back to Trusted Video
Paths for a minute.

00:30:20.040 --> 00:30:21.550
So I've mentioned SOCs.

00:30:21.550 --> 00:30:23.680
SOCs are systems on a chip.

00:30:23.680 --> 00:30:26.600
They're isolated from the open
circuits that handle

00:30:26.600 --> 00:30:27.350
application code.

00:30:27.350 --> 00:30:32.060
So on a Google TV device,
there is circuitry that

00:30:32.060 --> 00:30:36.640
handles the Android operating
system, and all the

00:30:36.640 --> 00:30:38.780
application space stuff
that goes on.

00:30:38.780 --> 00:30:41.890
And then there's a completely
separate and isolated set of

00:30:41.890 --> 00:30:46.504
circuits that handle the Trusted
Video Path content.

00:30:46.504 --> 00:30:50.720
These are the things that come
in over through Widevine and

00:30:50.720 --> 00:30:55.270
PlayReady, and make their way
to the actual video screen.

00:30:55.270 --> 00:30:58.180
Now this prevents access to the
raw bits that represent

00:30:58.180 --> 00:31:02.150
the media frames from any
of the application data.

00:31:02.150 --> 00:31:05.150
There's requests a lot of the
time for-- hey can I access

00:31:05.150 --> 00:31:08.090
the content that's coming
in from the HDMI input?

00:31:08.090 --> 00:31:11.510
Well, no you can't, and
this is kind of why.

00:31:11.510 --> 00:31:13.180
Android doesn't have
access to that.

00:31:13.180 --> 00:31:17.630
It's all on this separate
circuitry area.

00:31:17.630 --> 00:31:19.790
That keeps the content
safe and protected

00:31:19.790 --> 00:31:22.240
for the content owners.

00:31:22.240 --> 00:31:24.990
The DRM key decryption is
completely isolated from

00:31:24.990 --> 00:31:26.160
Android as well.

00:31:26.160 --> 00:31:27.930
This again is where
SOCs come in.

00:31:27.930 --> 00:31:31.150
They're circuits on a chip.

00:31:31.150 --> 00:31:34.912
I would find it remarkably
difficult to try and pop a

00:31:34.912 --> 00:31:36.910
chip open and solder
things on there.

00:31:36.910 --> 00:31:40.230
I don't think that's a
reasonable thing to do anyway.

00:31:40.230 --> 00:31:46.290
But all of this is to help bring
premium content from the

00:31:46.290 --> 00:31:50.900
big content producers to your
TV through Google TV, and

00:31:50.900 --> 00:31:52.140
build services on top.

00:31:52.140 --> 00:31:54.240
So I just wanted to cover a
little bit about Trusted Video

00:31:54.240 --> 00:31:55.670
Paths there.

00:31:55.670 --> 00:31:58.770
So as I've mentioned, at Google
TV we're trying to keep

00:31:58.770 --> 00:32:00.600
your content safe.

00:32:00.600 --> 00:32:02.710
So we have several
DRM components.

00:32:02.710 --> 00:32:06.480
One being that we're built on
the Android DRM framework.

00:32:06.480 --> 00:32:11.110
Which it manages the playback
rights of content through that

00:32:11.110 --> 00:32:14.010
illustration I gave
a few slides ago.

00:32:14.010 --> 00:32:16.110
We support Widevine
and PlayReady.

00:32:16.110 --> 00:32:18.830
It's built into the
platform, and will

00:32:18.830 --> 00:32:20.660
continue to be supported.

00:32:20.660 --> 00:32:22.890
We have Trusted Video Path--
as I've mentioned-- and it

00:32:22.890 --> 00:32:26.150
keeps your decrypted video
data securely in

00:32:26.150 --> 00:32:27.640
the hardware sandbox.

00:32:27.640 --> 00:32:31.170
It protects your streamed media
securely, so if you're

00:32:31.170 --> 00:32:35.470
transmitting your media using
Widevine or PlayReady it will

00:32:35.470 --> 00:32:39.280
utilize the Trusted Video Path
for that media playback.

00:32:39.280 --> 00:32:42.450
As I mentioned a few slides
ago, the HDMI content

00:32:42.450 --> 00:32:45.220
protection protects the video
content all the way to the

00:32:45.220 --> 00:32:46.990
television set.

00:32:46.990 --> 00:32:50.080
So this offers end-to-end
protection of the media as it

00:32:50.080 --> 00:32:54.310
moves from the internet or cable
provider through to your

00:32:54.310 --> 00:32:56.160
video screen.

00:32:56.160 --> 00:32:58.340
A little bit about the
Android DRM stack--

00:32:58.340 --> 00:33:01.933
you can read a lot more about
this on the Android site, so

00:33:01.933 --> 00:33:05.720
you can go to
developer.android.com.

00:33:05.720 --> 00:33:08.270
Search for DRM, and you can read
up on a lot of the gory

00:33:08.270 --> 00:33:10.800
details of how this
is implemented.

00:33:10.800 --> 00:33:14.750
Now on traditional Android, the
DRM framework is offered

00:33:14.750 --> 00:33:16.880
as a software package where
you could actually build

00:33:16.880 --> 00:33:18.870
additional DRM solutions--

00:33:18.870 --> 00:33:20.660
custom ones--

00:33:20.660 --> 00:33:25.270
but those typically require
native code, and they're

00:33:25.270 --> 00:33:26.780
difficult to develop.

00:33:26.780 --> 00:33:30.490
Now Google TV being a slightly
different type of Android

00:33:30.490 --> 00:33:33.410
device, we don't support NDK.

00:33:33.410 --> 00:33:36.250
I think I saw a question for
that in the DORY, so I'll get

00:33:36.250 --> 00:33:39.410
around to answering why
when we get to that.

00:33:39.410 --> 00:33:43.390
So because of this, developers
are not able to provide their

00:33:43.390 --> 00:33:44.020
own solutions.

00:33:44.020 --> 00:33:48.945
And we go ahead and use the same
Android DRM framework but

00:33:48.945 --> 00:33:51.930
with our code, and put
it into the Google TV

00:33:51.930 --> 00:33:53.230
Stack so it's available.

00:33:53.230 --> 00:33:56.160
So if you have a really
compelling DRM solution that

00:33:56.160 --> 00:34:00.790
is in wide use by large
content producers or

00:34:00.790 --> 00:34:04.560
providers, then you should let
me know, and I'll put a

00:34:04.560 --> 00:34:06.760
feature request in and see if we
can get it rolled into the

00:34:06.760 --> 00:34:08.442
stack as well.

00:34:08.442 --> 00:34:11.517
A couple things about Widevine,
which is a Google

00:34:11.517 --> 00:34:13.010
owned DRM solution.

00:34:13.010 --> 00:34:15.290
You can go to widevine.com
to find out all sorts of

00:34:15.290 --> 00:34:16.489
wonderful things about it.

00:34:16.489 --> 00:34:20.830
A few quick facts-- it's
supported by 540 million

00:34:20.830 --> 00:34:27.320
devices, including 284 million
television and set-top boxes.

00:34:27.320 --> 00:34:29.810
So that's got some wide
adoption out there.

00:34:29.810 --> 00:34:32.530
It supports adaptive streaming,
and quality of

00:34:32.530 --> 00:34:33.820
service controls.

00:34:33.820 --> 00:34:34.429
PlayReady--

00:34:34.429 --> 00:34:35.770
which I mentioned also--

00:34:35.770 --> 00:34:38.760
it was developed by Microsoft
with collaboration within the

00:34:38.760 --> 00:34:40.580
PCTV and mobile industry.

00:34:40.580 --> 00:34:42.989
It also supports adaptive
streaming

00:34:42.989 --> 00:34:44.150
and quality of service.

00:34:44.150 --> 00:34:46.830
You can go to
microsoft.com/playready to

00:34:46.830 --> 00:34:50.380
learn more about the details
of it there.

00:34:50.380 --> 00:34:54.190
PlayReady itself-- the DRM for
Google TV our [? base ?]

00:34:54.190 --> 00:34:57.860
Google TV devices that is the
newer models that are on the

00:34:57.860 --> 00:35:00.230
market will include support
for PlayReady.

00:35:00.230 --> 00:35:03.730
The older ones I think are
lacking some of the chip sets

00:35:03.730 --> 00:35:04.940
that are required to
pull this off.

00:35:04.940 --> 00:35:10.710
So just be aware if you are
going to use PlayReady, that

00:35:10.710 --> 00:35:13.270
that might be a problem.

00:35:13.270 --> 00:35:16.190
It's implemented as a plug-in
on the DRM framework which

00:35:16.190 --> 00:35:17.470
I've already mentioned.

00:35:17.470 --> 00:35:21.390
It supports license acquisition
through the APIs.

00:35:21.390 --> 00:35:24.840
And the management tools is
extensible to adapt to custom

00:35:24.840 --> 00:35:27.880
licensed servers that we can
play back through the Trusted

00:35:27.880 --> 00:35:30.210
Video Path hardware.

00:35:30.210 --> 00:35:31.530
So an example--

00:35:31.530 --> 00:35:32.600
an Android example--

00:35:32.600 --> 00:35:36.190
a nice, simple Android
example.

00:35:36.190 --> 00:35:40.350
What you can do is actually
write an Android application

00:35:40.350 --> 00:35:43.100
that plays back video in about
four lines of code.

00:35:43.100 --> 00:35:44.870
And if you're clever,
you could do it in

00:35:44.870 --> 00:35:47.640
three lines of code.

00:35:47.640 --> 00:35:49.530
So essentially you want
to take a URL.

00:35:49.530 --> 00:35:52.760
Let's say we took an M3U8 URL.

00:35:52.760 --> 00:35:53.540
Create a string.

00:35:53.540 --> 00:35:55.560
Drop your URL in there.

00:35:55.560 --> 00:35:59.650
Create a Video View Object.

00:35:59.650 --> 00:36:02.230
You can use your declarative
layout to sort of place a

00:36:02.230 --> 00:36:05.060
video view and then
just grab it.

00:36:05.060 --> 00:36:09.020
You set videoview.setvideopath
to the URL that you placed in

00:36:09.020 --> 00:36:10.000
your string.

00:36:10.000 --> 00:36:11.910
And then you do videoview.start.

00:36:11.910 --> 00:36:12.760
And guess what?

00:36:12.760 --> 00:36:15.820
You'll have video playing
on your Google TV.

00:36:15.820 --> 00:36:18.510
Four lines of really
simple code.

00:36:18.510 --> 00:36:24.100
This is a good way to start
playing with just layouts that

00:36:24.100 --> 00:36:25.330
include video.

00:36:25.330 --> 00:36:28.050
As you move into the more
complicated stuff, there's a

00:36:28.050 --> 00:36:31.920
lot of tutorials online
that can help you

00:36:31.920 --> 00:36:33.330
evolve your video solution.

00:36:33.330 --> 00:36:37.320
If you want to start getting
into media control--

00:36:37.320 --> 00:36:39.470
Play, Pause, Rewind,
Skip Ahead--

00:36:39.470 --> 00:36:42.550
that's what I mean by the
more advanced stuff.

00:36:42.550 --> 00:36:43.840
We have documentation on that.

00:36:43.840 --> 00:36:46.140
I'm not going to be covering
that today due to time

00:36:46.140 --> 00:36:46.940
limitations.

00:36:46.940 --> 00:36:48.190
But I wanted to make
you aware of it.

00:36:48.190 --> 00:36:51.560
And those of you who have
not written a Google TV

00:36:51.560 --> 00:36:53.490
application yet, this
is a really good

00:36:53.490 --> 00:36:54.230
way to test it out.

00:36:54.230 --> 00:36:55.820
Especially if you
have a device.

00:36:55.820 --> 00:36:58.080
There's nothing more compelling
than plugging in a

00:36:58.080 --> 00:37:00.580
few lines of code and seeing
something on the screen.

00:37:00.580 --> 00:37:04.260
I know that's what excites
me anyway.

00:37:04.260 --> 00:37:08.990
I've mentioned quality of
service a few times, and where

00:37:08.990 --> 00:37:14.300
quality of service comes in,
and why it's important is--

00:37:14.300 --> 00:37:16.740
Let's say you are a large
content producer and you're

00:37:16.740 --> 00:37:20.920
offering videos for
people to rent.

00:37:20.920 --> 00:37:24.810
Some big company maybe that
starts with an A. You want to

00:37:24.810 --> 00:37:27.590
pay attention to the quality
of the video

00:37:27.590 --> 00:37:29.870
that the user is watching.

00:37:29.870 --> 00:37:35.786
If I've spent $5 to rent a
movie, and I've paid for it to

00:37:35.786 --> 00:37:38.770
be in HD, and I'm playing it,
and my bandwidth starts to

00:37:38.770 --> 00:37:44.290
taper off, and it drops down
to the standard definition

00:37:44.290 --> 00:37:47.550
video, then am I getting
what I paid for?

00:37:47.550 --> 00:37:51.880
How can an application detect
when a certain quality

00:37:51.880 --> 00:37:53.450
threshold hasn't been met?

00:37:53.450 --> 00:37:54.650
Do I get a partial refund?

00:37:54.650 --> 00:37:55.650
Do I get a complete refund?

00:37:55.650 --> 00:37:58.095
What happens if my bandwidth
completely drops off and I

00:37:58.095 --> 00:38:00.080
don't get to enjoy
the whole video?

00:38:00.080 --> 00:38:01.720
This is where quality
of service comes in.

00:38:01.720 --> 00:38:06.060
So we have quality of service
APIs that allow you to monitor

00:38:06.060 --> 00:38:08.980
the video playback while
a video is streaming.

00:38:08.980 --> 00:38:13.060
This is typically implemented
using a listener pattern, so

00:38:13.060 --> 00:38:18.365
you would implement a media
player on Info Listener.

00:38:18.365 --> 00:38:21.380
You would register your listener
with the media

00:38:21.380 --> 00:38:24.740
player, and it would notify
you of info events

00:38:24.740 --> 00:38:27.740
periodically that you could
monitor so you could get

00:38:27.740 --> 00:38:30.450
current frames per second.

00:38:30.450 --> 00:38:33.170
You can get how much space
is left in the buffer.

00:38:33.170 --> 00:38:37.750
There's a whole bunch of really
valuable statistical

00:38:37.750 --> 00:38:41.890
data you can grab through the
QoS APIs that would allow you

00:38:41.890 --> 00:38:45.000
to make an informed decision as
to, hey, has this customer

00:38:45.000 --> 00:38:48.920
actually received the quality
of service that we offered

00:38:48.920 --> 00:38:51.300
them when they paid for it?

00:38:51.300 --> 00:38:52.350
So again--

00:38:52.350 --> 00:38:55.080
you can implement this
very easily.

00:38:55.080 --> 00:38:58.110
You just need to create a
listener that implements

00:38:58.110 --> 00:39:00.590
mediaplayer.oninfolistener.

00:39:00.590 --> 00:39:04.650
I'm not going to cover the code
specifics due to time

00:39:04.650 --> 00:39:10.000
limitations, but you can go to
developers.google.com/TV, and

00:39:10.000 --> 00:39:12.400
jump in and find out
more about QoS.

00:39:12.400 --> 00:39:14.370
If you have questions
about QoS, feel free

00:39:14.370 --> 00:39:15.170
to send me an email.

00:39:15.170 --> 00:39:18.110
Krispy@google.com I'll
do my best answer it.

00:39:18.110 --> 00:39:19.490
Even better though--

00:39:19.490 --> 00:39:23.080
is if you post your question on
Stack Overflow, and label

00:39:23.080 --> 00:39:24.210
it with Google TV.

00:39:24.210 --> 00:39:25.510
Because then I can find it.

00:39:25.510 --> 00:39:26.500
I can answer it.

00:39:26.500 --> 00:39:31.700
And other people can enjoy the
benefits of that answer in the

00:39:31.700 --> 00:39:34.260
future, as opposed to me just
receiving one email and

00:39:34.260 --> 00:39:36.160
responding one-off,
again and again.

00:39:36.160 --> 00:39:37.590
So I'm going to revise that.

00:39:37.590 --> 00:39:40.435
Post your question on Stack
Overflow, and I will find it

00:39:40.435 --> 00:39:42.970
and answer it.

00:39:42.970 --> 00:39:45.890
I'm going to mention the YouTube
Android media APIs.

00:39:45.890 --> 00:39:50.150
These were announced initially
at I/O. We're still waiting

00:39:50.150 --> 00:39:52.520
for them to go public.

00:39:52.520 --> 00:39:54.130
I'm anticipating soon.

00:39:54.130 --> 00:39:57.000
I don't know when though.

00:39:57.000 --> 00:40:02.470
What the YouTube Android media
API allows for is playing back

00:40:02.470 --> 00:40:06.410
high quality video content
on Android devices--

00:40:06.410 --> 00:40:08.620
and this includes Google TV.

00:40:08.620 --> 00:40:13.080
You could write code that you
creates your own YouTube

00:40:13.080 --> 00:40:17.180
channels, and adds levels of
interactivity around this.

00:40:17.180 --> 00:40:21.330
Essentially, it's an API that
allows you to have a video

00:40:21.330 --> 00:40:25.660
view that is tied to
content on YouTube.

00:40:25.660 --> 00:40:27.140
So there's a link at
the bottom there,

00:40:27.140 --> 00:40:35.910
http://goo.gl/V4dGE.

00:40:35.910 --> 00:40:38.190
That's a link to the video
presentation that was given at

00:40:38.190 --> 00:40:41.170
I/O, I think it's about
an hour long.

00:40:41.170 --> 00:40:44.870
It's worth watching if you're
interested in this.

00:40:44.870 --> 00:40:46.970
And it's expected soon.

00:40:46.970 --> 00:40:50.020
I don't know when
unfortunately.

00:40:50.020 --> 00:40:52.050
I've got a QR code, I don't
think it'll do you much good

00:40:52.050 --> 00:40:52.780
in the video stream.

00:40:52.780 --> 00:40:54.390
I'm not sure how good that's
going to come out.

00:40:54.390 --> 00:40:57.335
But Google TV apps can now play
high quality content as

00:40:57.335 --> 00:40:58.790
I've alluded to.

00:40:58.790 --> 00:41:00.710
Stay tuned for this.

00:41:00.710 --> 00:41:04.700
I will be touting it the
Wednesday after it's launched,

00:41:04.700 --> 00:41:06.830
whenever that happens to be.

00:41:06.830 --> 00:41:07.860
So be aware of it.

00:41:07.860 --> 00:41:09.490
Oh, great, we're at
the last slide.

00:41:09.490 --> 00:41:12.470
That brings me to the
end of these slides.

00:41:12.470 --> 00:41:14.470
And we can jump into questions,
which is awesome

00:41:14.470 --> 00:41:15.930
because I wanted to leave
enough time to

00:41:15.930 --> 00:41:17.250
get to these questions.

00:41:17.250 --> 00:41:22.760
While I'm transferring over
here, has anybody got any live

00:41:22.760 --> 00:41:24.180
questions that I can answer?

00:41:27.370 --> 00:41:28.440
Nobody?

00:41:28.440 --> 00:41:31.500
Everybody's shy today?

00:41:31.500 --> 00:41:33.030
All right.

00:41:33.030 --> 00:41:39.420
I'm just going to call up the
moderator, and let's see if we

00:41:39.420 --> 00:41:42.890
can't answer a couple
of questions here.

00:41:42.890 --> 00:41:44.450
I'm going to the wrong
place apparently.

00:41:47.432 --> 00:41:49.018
This is the first time I've
done this without

00:41:49.018 --> 00:41:50.268
Les here for a while.

00:41:52.230 --> 00:41:54.078
VIKRIN: Can you hear me?

00:41:54.078 --> 00:41:57.830
KRISPY: I can hear you,
yes, go ahead.

00:41:57.830 --> 00:41:59.730
VIKRIN: Hey, how's it going?

00:41:59.730 --> 00:42:01.635
I just want to do a quick
introduction for you.

00:42:05.110 --> 00:42:06.970
This is the Vikrin.

00:42:06.970 --> 00:42:08.396
KRISPY: Hi Vikrin.

00:42:08.396 --> 00:42:08.882
How're you?

00:42:08.882 --> 00:42:10.660
VIKRIN: How're And we
have William, who's

00:42:10.660 --> 00:42:11.820
another lead here.

00:42:11.820 --> 00:42:13.070
KRISPY: Hello.

00:42:15.100 --> 00:42:18.400
VIKRIN: I just happened to jump
in, and join the Hangout,

00:42:18.400 --> 00:42:19.780
looking at the presentation.

00:42:19.780 --> 00:42:21.580
KRISPY: Awesome.

00:42:21.580 --> 00:42:23.692
Did it come across
clear enough?

00:42:23.692 --> 00:42:24.930
VIKRIN: Yeah.

00:42:24.930 --> 00:42:27.735
Do we have access to the
PowerPoint after?

00:42:27.735 --> 00:42:32.320
KRISPY: I'm going to make these
slides available soon.

00:42:32.320 --> 00:42:34.090
I've been pulled in many
different directions over the

00:42:34.090 --> 00:42:36.140
last few weeks, and
I am behind on

00:42:36.140 --> 00:42:37.330
getting my slides published.

00:42:37.330 --> 00:42:41.430
What I will do when they are
published is I will put a post

00:42:41.430 --> 00:42:47.380
in the Google+ Google
Developers TV page.

00:42:47.380 --> 00:42:52.130
And also probably mention it in
the next Hangout that we're

00:42:52.130 --> 00:42:52.940
going to do.

00:42:52.940 --> 00:42:56.370
So also to fill you guys in,
we're moving to a two week

00:42:56.370 --> 00:42:58.440
format for Hangouts.

00:42:58.440 --> 00:42:59.570
We're not going to do
it every week now.

00:42:59.570 --> 00:43:01.050
We're going to do
every two weeks.

00:43:01.050 --> 00:43:02.990
Partially because we have
a lot of things

00:43:02.990 --> 00:43:03.820
going on right now.

00:43:03.820 --> 00:43:08.190
And I want to make sure that we
have enough time to prepare

00:43:08.190 --> 00:43:10.520
Hangouts that are of a
certain quality, and

00:43:10.520 --> 00:43:11.350
value to you guys.

00:43:11.350 --> 00:43:15.360
So this gives you guys enough
time to ask a lot of questions

00:43:15.360 --> 00:43:19.480
in the DORY or the moderator.

00:43:19.480 --> 00:43:20.730
If you can mute?

00:43:24.660 --> 00:43:27.240
Yay, muted.

00:43:27.240 --> 00:43:29.540
Yeah, so we're going to move
to a two week format.

00:43:29.540 --> 00:43:31.140
There's going to be some more
planning that goes on in here.

00:43:31.140 --> 00:43:33.560
We're going to try and
spruce up the quality

00:43:33.560 --> 00:43:35.270
level of these Hangouts.

00:43:35.270 --> 00:43:37.900
So just be aware it won't
be every week.

00:43:37.900 --> 00:43:39.150
It'll be every two weeks now.

00:43:41.480 --> 00:43:43.800
If there's no other live
questions right now I'm going

00:43:43.800 --> 00:43:48.430
to jump right into
the questions.

00:43:48.430 --> 00:43:53.340
So we have five questions
this week.

00:43:53.340 --> 00:43:57.720
Is there any way to tell the
LiveTV stream to be quiet?

00:43:57.720 --> 00:44:01.080
I've tried requesting Audio
Focus, but it doesn't seem to

00:44:01.080 --> 00:44:01.760
be working.

00:44:01.760 --> 00:44:06.580
I'd rather not have to pop
the user out of LiveTV.

00:44:06.580 --> 00:44:09.180
This is by Yosi.

00:44:09.180 --> 00:44:13.210
My understanding is that the
LiveTV app should actually be

00:44:13.210 --> 00:44:14.610
respecting Audio Focus.

00:44:14.610 --> 00:44:16.130
If it's not--

00:44:16.130 --> 00:44:19.240
and admittedly I haven't
tested this--

00:44:19.240 --> 00:44:22.890
if it's not doing that,
please file a bug.

00:44:22.890 --> 00:44:25.560
I think it's Google TV issues.

00:44:25.560 --> 00:44:29.160
Please go there, and provide as
much detail as you can, and

00:44:29.160 --> 00:44:30.120
I'll have someone take
a look at that

00:44:30.120 --> 00:44:31.780
if that's not behaving.

00:44:31.780 --> 00:44:34.550
Also if you an NPK that you
don't mind sharing with me,

00:44:34.550 --> 00:44:37.490
send it my way, and I can
install it on one of the

00:44:37.490 --> 00:44:41.440
devices I have that uses
the direct stream

00:44:41.440 --> 00:44:44.830
from a cable provider.

00:44:44.830 --> 00:44:48.320
We'll see if it's problem on
your device, or on all

00:44:48.320 --> 00:44:50.290
devices, or what have you.

00:44:50.290 --> 00:44:53.080
OK next question--

00:44:53.080 --> 00:44:55.740
integration with my DVR.

00:44:55.740 --> 00:44:59.440
AT&amp;T U-verse works, but
can be cumbersome.

00:44:59.440 --> 00:45:02.930
Is there any way to improve the
IR code mapping so that I

00:45:02.930 --> 00:45:05.110
can set up a button that
triggers Record

00:45:05.110 --> 00:45:07.120
TV on my DVR remote?

00:45:07.120 --> 00:45:10.510
Is there an API for
the IR Repeater?

00:45:10.510 --> 00:45:13.730
That's a really great
question.

00:45:13.730 --> 00:45:17.880
Unfortunately, the
answer is no.

00:45:17.880 --> 00:45:22.890
Mainly because I don't think
it's an exposed API yet.

00:45:22.890 --> 00:45:25.050
But you think it would make
an interesting feature.

00:45:25.050 --> 00:45:28.170
So I guess the answer
to this one is put

00:45:28.170 --> 00:45:30.140
in a feature request.

00:45:30.140 --> 00:45:32.880
Provide a little bit more detail
than you have here, use

00:45:32.880 --> 00:45:33.900
case, et cetera.

00:45:33.900 --> 00:45:38.030
And I can make sure that the
right eyeballs see that, and

00:45:38.030 --> 00:45:40.060
we can see what we
can do about it.

00:45:40.060 --> 00:45:45.000
Next question is when will
Google TV start supporting NDK

00:45:45.000 --> 00:45:46.040
to make apps?

00:45:46.040 --> 00:45:49.290
So interesting thing
about NDK.

00:45:49.290 --> 00:45:50.750
I've answered this
a few times.

00:45:50.750 --> 00:45:53.850
I've jumped into the
issues forum and I

00:45:53.850 --> 00:45:55.430
posted an answer there.

00:45:55.430 --> 00:45:58.070
I don't think this is
going to go away.

00:45:58.070 --> 00:45:59.260
I want NDK too.

00:45:59.260 --> 00:46:03.530
The reality is we can't have
it yet, and it's mainly

00:46:03.530 --> 00:46:06.660
because of some of the legacy
work that went on in

00:46:06.660 --> 00:46:09.160
supporting Chrome
in the earlier

00:46:09.160 --> 00:46:11.400
generations of Google TVs.

00:46:11.400 --> 00:46:14.950
Technical trade-offs had to be
made, and the unfortunate

00:46:14.950 --> 00:46:19.310
consequence of that is that
NDK is not supported.

00:46:19.310 --> 00:46:22.270
Now at the time this decision
was made NDK really wasn't a

00:46:22.270 --> 00:46:26.050
huge part of the whole stack,
and we didn't quite know how

00:46:26.050 --> 00:46:26.750
it was going to hook in.

00:46:26.750 --> 00:46:30.300
So we recognize that NDK is
important to a lot of

00:46:30.300 --> 00:46:34.470
developers who want to produce
games specifically, and a few

00:46:34.470 --> 00:46:36.700
other things on Google TV.

00:46:36.700 --> 00:46:38.480
I'm fighting for you guys.

00:46:38.480 --> 00:46:43.200
I'm trying really hard
to get NDK going.

00:46:43.200 --> 00:46:46.380
Everyone here has heard
me and is aware of it.

00:46:46.380 --> 00:46:49.440
These things take a little bit
of time to make happen.

00:46:49.440 --> 00:46:52.610
It's unfortunately not just
flipping a bit here or there.

00:46:52.610 --> 00:46:56.110
There's some large changes
that we're hoping to make

00:46:56.110 --> 00:46:59.510
which in the future should
allow for this.

00:46:59.510 --> 00:47:04.320
So unfortunately, my answer
for this is stay tuned.

00:47:04.320 --> 00:47:05.790
Just stay tuned.

00:47:05.790 --> 00:47:09.180
I have nothing else to announce
at this time.

00:47:09.180 --> 00:47:10.340
Next question--

00:47:10.340 --> 00:47:12.520
is there a Google TV
API to support

00:47:12.520 --> 00:47:14.460
stereoscopic 3D content?

00:47:14.460 --> 00:47:16.260
Ooh, I like that.

00:47:16.260 --> 00:47:18.170
There's a link here
to stack overflow.

00:47:18.170 --> 00:47:19.760
It says FYI--

00:47:19.760 --> 00:47:23.120
LG Google TV has 3D world
application that supports 3D.

00:47:23.120 --> 00:47:27.080
Yes it does, and I've used
it, and I like it.

00:47:27.080 --> 00:47:27.890
I dig the feature.

00:47:27.890 --> 00:47:31.370
I do think stereoscopic 3D is
a little bit of a gimmick.

00:47:31.370 --> 00:47:32.910
You don't want to be using
it all the time.

00:47:32.910 --> 00:47:35.140
But there are times when it's
appropriate, and I think it

00:47:35.140 --> 00:47:38.540
would be cool to be able to
build using some form of

00:47:38.540 --> 00:47:41.030
stereoscopic 3D API.

00:47:41.030 --> 00:47:42.770
Does it exist?

00:47:42.770 --> 00:47:45.390
No.

00:47:45.390 --> 00:47:47.660
It's unfortunate, but
it would make an

00:47:47.660 --> 00:47:48.790
interesting feature request.

00:47:48.790 --> 00:47:49.930
I'd say put it in.

00:47:49.930 --> 00:47:51.855
Yes LG has it.

00:47:51.855 --> 00:47:54.000
LG is the only one
that has it.

00:47:54.000 --> 00:47:56.880
And LG is an OEM partner.

00:47:56.880 --> 00:48:00.630
So they have a certain level of
access to things that the

00:48:00.630 --> 00:48:01.720
general public doesn't.

00:48:01.720 --> 00:48:04.550
And this covers all sorts of
business cases that I'm not

00:48:04.550 --> 00:48:06.180
going to get into.

00:48:06.180 --> 00:48:08.860
Suffice to say it's not
available, I think it would be

00:48:08.860 --> 00:48:09.460
compelling.

00:48:09.460 --> 00:48:14.620
So Jared please file a feature
request, and again I'll make

00:48:14.620 --> 00:48:17.240
sure that the right people
see it, and we'll

00:48:17.240 --> 00:48:18.220
see what we can do.

00:48:18.220 --> 00:48:20.300
But I can't make any promises.

00:48:20.300 --> 00:48:23.393
All right, I hope that works for
an answer, that's the best

00:48:23.393 --> 00:48:24.830
I can give right now.

00:48:24.830 --> 00:48:29.490
Last question on this list is
do you see AR for Google TV

00:48:29.490 --> 00:48:31.090
GUI coming someday?

00:48:31.090 --> 00:48:33.800
I'm going to make a leap because
I can infer all sorts

00:48:33.800 --> 00:48:34.770
of meanings for AR.

00:48:34.770 --> 00:48:39.060
I'm going to suppose it means
augmented reality.

00:48:39.060 --> 00:48:39.890
I don't know.

00:48:39.890 --> 00:48:42.840
I mean it would be kind of
weird to have augmented

00:48:42.840 --> 00:48:46.230
reality within the GUI.

00:48:46.230 --> 00:48:51.300
Parts of this would probably
require some form of access to

00:48:51.300 --> 00:48:55.350
the Direct Video Overlay, and
that might be an issue if the

00:48:55.350 --> 00:48:57.565
content is being delivered
through DRM.

00:49:00.320 --> 00:49:02.580
I could see it happening in
the future at some point.

00:49:02.580 --> 00:49:04.310
I think a lot of things
would have to change.

00:49:04.310 --> 00:49:08.210
I think a lot of the laws
would have to change.

00:49:08.210 --> 00:49:11.410
And a lot of the copyrights,
and patents, and

00:49:11.410 --> 00:49:13.085
privacy, and whatnot.

00:49:13.085 --> 00:49:16.140
I think it'd be cool.

00:49:16.140 --> 00:49:18.090
If you're passionate about
stuff like that, my

00:49:18.090 --> 00:49:21.700
recommendation is maybe create
an Ignite talk, or Ignite

00:49:21.700 --> 00:49:24.390
presentation, and start putting
that idea out in front

00:49:24.390 --> 00:49:27.430
of crowds of passionate people,
and see what you get

00:49:27.430 --> 00:49:30.350
as feedback, and then try
and make it happen.

00:49:30.350 --> 00:49:32.790
If you come up with some really
compelling cases for

00:49:32.790 --> 00:49:35.790
it, and can demonstrate that
there's a demand and a need,

00:49:35.790 --> 00:49:38.740
then if that message gets heard,
then maybe all the

00:49:38.740 --> 00:49:40.850
right things could happen
in the future.

00:49:40.850 --> 00:49:44.440
So I realize that's sort of
a wishy-washy answer.

00:49:44.440 --> 00:49:45.400
Did I answer it?

00:49:45.400 --> 00:49:47.700
Well, yes and no.

00:49:47.700 --> 00:49:51.540
But that's unfortunately the
nature of this is kind of an

00:49:51.540 --> 00:49:55.320
industry and space is that
it's rare that you get a

00:49:55.320 --> 00:49:57.130
blunt yes or no.

00:49:57.130 --> 00:50:01.130
Unless you're asking about a
specific feature, yes, no.

00:50:01.130 --> 00:50:05.660
I've got no more questions that
are on the moderator.

00:50:05.660 --> 00:50:08.980
I keep calling it DORY, that's
our internal name for it.

00:50:08.980 --> 00:50:11.140
I don't see anything.

00:50:11.140 --> 00:50:14.830
I see a few questions in
the chat stream here.

00:50:14.830 --> 00:50:17.270
Invite please, invite please.

00:50:17.270 --> 00:50:21.450
For those who are trying
to get on the Hangout--

00:50:21.450 --> 00:50:25.690
you just have to go to
developers.google.com/live,

00:50:25.690 --> 00:50:28.820
and there's a link I believe
from there on YouTube, or you

00:50:28.820 --> 00:50:32.850
can go to our pages and
click on Join Event.

00:50:32.850 --> 00:50:37.030
I got nothing else guys, so if
there's no other questions--

00:50:37.030 --> 00:50:37.880
Jason, go ahead.

00:50:37.880 --> 00:50:39.030
JASON: I had one question.

00:50:39.030 --> 00:50:44.775
Is there a file size limit
on the APK for Google TV?

00:50:44.775 --> 00:50:47.400
KRISPY: Well you've got a hard
physical limitation.

00:50:47.400 --> 00:50:49.490
I would not go over
two gigabytes.

00:50:49.490 --> 00:50:54.750
In fact I would question going
over 50 megabytes.

00:50:54.750 --> 00:50:59.170
There's not a lot of storage
space on Google TVs.

00:50:59.170 --> 00:51:02.440
I think the standard right
now is about four gigs.

00:51:02.440 --> 00:51:04.040
I believe, one of the models
has eight gigs.

00:51:06.720 --> 00:51:09.390
You want to keep your APKs
as small as possible.

00:51:09.390 --> 00:51:14.750
And I think if you want to
bundle a lot of assets, or

00:51:14.750 --> 00:51:17.705
content, make those available
after the fact, so that way

00:51:17.705 --> 00:51:20.960
they can be loaded
and unloaded.

00:51:20.960 --> 00:51:22.660
That's my suggestion there.

00:51:22.660 --> 00:51:25.040
JASON: And then I had
another question.

00:51:25.040 --> 00:51:30.410
The Google TV data sharing
library is that going to be

00:51:30.410 --> 00:51:31.876
updated or [INAUDIBLE]?

00:51:31.876 --> 00:51:34.270
KRISPY: I don't know,
I actually

00:51:34.270 --> 00:51:35.060
haven't touched those.

00:51:35.060 --> 00:51:36.850
But you what, I can ask.

00:51:36.850 --> 00:51:39.660
I can ask one of the other
guys on the team what the

00:51:39.660 --> 00:51:41.030
status of that is.

00:51:41.030 --> 00:51:44.360
Maybe send me an email just to
remind me, so I don't forget.

00:51:44.360 --> 00:51:48.430
And I'll figure that out, and
make a post or update the

00:51:48.430 --> 00:51:50.970
documentation or something.

00:51:50.970 --> 00:51:52.590
All right?

00:51:52.590 --> 00:51:54.430
Did you enjoy the Hangout?

00:51:54.430 --> 00:51:55.550
You're very quiet today.

00:51:55.550 --> 00:51:57.360
I know I was doing a
lot of the talking.

00:51:57.360 --> 00:51:57.970
SUSANNA CHEN: That's OK.

00:51:57.970 --> 00:51:59.530
All the information
is wonderful.

00:51:59.530 --> 00:52:04.950
And I'm learning as everybody
explains it the same way.

00:52:04.950 --> 00:52:05.830
KRISPY: Cool.

00:52:05.830 --> 00:52:08.030
Now you guys are the ones
who are at Hangout

00:52:08.030 --> 00:52:08.850
live here with me.

00:52:08.850 --> 00:52:10.630
Are you guys finding
this valuable?

00:52:10.630 --> 00:52:13.386
Should I keep up this format
going forward?

00:52:13.386 --> 00:52:15.570
JASON: I definitely
like the slides.

00:52:15.570 --> 00:52:17.360
KRISPY: All right.

00:52:17.360 --> 00:52:21.860
So I'll prepare something
for two weeks from now.

00:52:21.860 --> 00:52:24.540
So two weeks from now,
we'll do another one.

00:52:24.540 --> 00:52:26.885
I'll figure out the topic this
week, and I'll start posting

00:52:26.885 --> 00:52:30.200
it so you guys know what
questions to start asking or

00:52:30.200 --> 00:52:31.490
thinking about.

00:52:31.490 --> 00:52:32.450
All right?

00:52:32.450 --> 00:52:35.650
So with that, I will
bid you adieu.

00:52:35.650 --> 00:52:39.630
And we'll tune in in two
weeks and reconnect.

00:52:39.630 --> 00:52:41.820
All right guys?

00:52:41.820 --> 00:52:42.570
Take care.

00:52:42.570 --> 00:52:43.820
SUSANNA CHEN: Bye.

