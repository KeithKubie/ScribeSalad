WEBVTT
Kind: captions
Language: en

00:00:00.600 --> 00:00:01.540
Greetings, developers.

00:00:01.540 --> 00:00:03.706
This is Wesley Chun, software
engineer and developer

00:00:03.706 --> 00:00:04.940
advocate here at Google.

00:00:04.940 --> 00:00:06.472
Welcome to today's
episode, where

00:00:06.472 --> 00:00:08.180
we'll walk through
the common code needed

00:00:08.180 --> 00:00:10.187
to access Google APIs.

00:00:10.187 --> 00:00:11.770
In the previous
episode, we showed you

00:00:11.770 --> 00:00:14.954
how to set up an app using
Google APIs in the Dev console.

00:00:14.954 --> 00:00:16.620
Click the link if you
missed it, as it's

00:00:16.620 --> 00:00:18.100
needed for this episode.

00:00:18.100 --> 00:00:19.520
Why the code walkthrough?

00:00:19.520 --> 00:00:21.480
Because using the
same common code base,

00:00:21.480 --> 00:00:24.210
you can access any of our APIs.

00:00:24.210 --> 00:00:25.890
The code we'll look
at is in Python.

00:00:25.890 --> 00:00:27.350
But you can use
any language that's

00:00:27.350 --> 00:00:30.280
supported by the Google
API's client library.

00:00:30.280 --> 00:00:33.300
In the end, the HTTP calls
generated by the library,

00:00:33.300 --> 00:00:35.780
that go across the wire,
are the same regardless

00:00:35.780 --> 00:00:37.780
of which language you use.

00:00:37.780 --> 00:00:40.190
First, we'll look at
simple API access,

00:00:40.190 --> 00:00:42.300
which requires an API key.

00:00:42.300 --> 00:00:45.770
An API key will only permit
access to public data,

00:00:45.770 --> 00:00:49.300
and obviously not authorized
data such as user information.

00:00:49.300 --> 00:00:50.740
Before we get to
the code review,

00:00:50.740 --> 00:00:53.270
be sure to grab the API key
from your project's credentials

00:00:53.270 --> 00:00:53.960
page.

00:00:53.960 --> 00:00:55.645
Now let's look at the code.

00:00:55.645 --> 00:00:58.320
On line one, we import
the build function.

00:00:58.320 --> 00:01:01.570
It creates a service endpoint
for interacting with an API.

00:01:01.570 --> 00:01:03.130
The concept is the
same, but may be

00:01:03.130 --> 00:01:04.769
slightly different
in other languages.

00:01:04.769 --> 00:01:06.650
For example, in Java
there's a builder class

00:01:06.650 --> 00:01:07.840
with a Build method.

00:01:07.840 --> 00:01:10.040
In JavaScript, there's
a load function.

00:01:10.040 --> 00:01:14.990
.NET, Objective C, and
PHP, have service class.

00:01:14.990 --> 00:01:18.230
Line two is the API key you
copied from the dev console.

00:01:18.230 --> 00:01:19.770
Note in production,
you're not going

00:01:19.770 --> 00:01:22.040
to hard code an API
key into source!

00:01:22.040 --> 00:01:23.970
It's not secure, all right.

00:01:23.970 --> 00:01:26.690
Finally, in line three, Build
creates that service endpoint

00:01:26.690 --> 00:01:28.270
to the API you wish to use.

00:01:28.270 --> 00:01:29.870
And that's it.

00:01:29.870 --> 00:01:32.890
Now for authorized
access, using OAuth 2.

00:01:32.890 --> 00:01:34.390
Go to your projects
credentials page

00:01:34.390 --> 00:01:36.500
again, and download
the JSON file

00:01:36.500 --> 00:01:38.482
after you've created
those credentials.

00:01:38.482 --> 00:01:40.190
Click on the link to
the earlier episode,

00:01:40.190 --> 00:01:41.770
where we demoed how to do this.

00:01:41.770 --> 00:01:44.330
And save it as
"clientsecret.JSON"

00:01:44.330 --> 00:01:46.685
on your file system.

00:01:46.685 --> 00:01:48.560
Now, it's no surprise
with the added security

00:01:48.560 --> 00:01:49.890
that there's more code.

00:01:49.890 --> 00:01:51.530
Let's break it down.

00:01:51.530 --> 00:01:53.860
We've got the
imports at the top.

00:01:53.860 --> 00:01:56.440
In addition to Build,
we need HTTP objects

00:01:56.440 --> 00:01:59.020
for sine requests--
that's line two.

00:01:59.020 --> 00:02:02.060
The final important line
three gives us token storage

00:02:02.060 --> 00:02:05.720
from OAuth2client.file,
and utility functions

00:02:05.720 --> 00:02:09.509
to create and run the
OAuth flow, respectively.

00:02:09.509 --> 00:02:12.590
OAuth scopes express
the permissions

00:02:12.590 --> 00:02:15.670
you request users to
authorize for your app.

00:02:15.670 --> 00:02:17.180
You may need one or more scopes.

00:02:17.180 --> 00:02:19.940
So, on line five, either
you'll have one or more strings

00:02:19.940 --> 00:02:21.820
representing those scopes.

00:02:21.820 --> 00:02:24.850
In Python, you can have
an interval, or one long

00:02:24.850 --> 00:02:26.890
space delimited string.

00:02:26.890 --> 00:02:29.190
Line six is the
clientsecret.json file

00:02:29.190 --> 00:02:32.320
that you got from clicking
the download JSON button.

00:02:32.320 --> 00:02:34.380
When your app is granted
access, the server

00:02:34.380 --> 00:02:36.010
sends back an
access token, which

00:02:36.010 --> 00:02:38.230
is stored in the
file in line eight.

00:02:38.230 --> 00:02:39.970
Line nine is where
your app tries

00:02:39.970 --> 00:02:41.910
to get a valid access
token with which

00:02:41.910 --> 00:02:44.160
to make authorized API calls.

00:02:44.160 --> 00:02:46.690
If the credentials are missing,
or invalid-- like being

00:02:46.690 --> 00:02:50.770
expired-- lines 11 and 12 will
create and run the OAuth flow

00:02:50.770 --> 00:02:52.620
to get a valid access token.

00:02:52.620 --> 00:02:55.990
Which, if received, is
stored in that file.

00:02:55.990 --> 00:02:58.850
Finally, once we have
a valid access token,

00:02:58.850 --> 00:03:01.510
the last common step is to
create a service endpoint

00:03:01.510 --> 00:03:02.850
to that API.

00:03:02.850 --> 00:03:06.040
You need to specify the
API string and its version.

00:03:06.040 --> 00:03:08.630
The last parameter
signs the HTTP calls

00:03:08.630 --> 00:03:09.960
with your credentials.

00:03:09.960 --> 00:03:13.400
You can get API names
and versions in the Docs.

00:03:13.400 --> 00:03:17.500
Congratulations, now you can
make authorized API requests.

00:03:17.500 --> 00:03:20.800
At this point, we've covered
both simple and authorized API

00:03:20.800 --> 00:03:21.490
access.

00:03:21.490 --> 00:03:24.400
Now you're ready to take on
any Google API, so make sure

00:03:24.400 --> 00:03:26.920
you check out other
episodes in this series.

00:03:26.920 --> 00:03:29.520
Click the link to get the client
library for your development

00:03:29.520 --> 00:03:31.610
language, and review
the previous episode

00:03:31.610 --> 00:03:34.270
on setting up your project
in the dev console.

00:03:34.270 --> 00:03:35.750
We look forward
to seeing what you

00:03:35.750 --> 00:03:37.760
can build using Google APIs.

00:03:37.760 --> 00:03:39.870
This is Wesley Chun
from Google, and we'll

00:03:39.870 --> 00:03:43.140
blast off with you, next
time on "The Launch Pad."

