WEBVTT
Kind: captions
Language: en

00:00:00.200 --> 00:00:03.450
Backbone has cycled through each of
the routes in the food router router and

00:00:03.450 --> 00:00:05.889
added them to Backbone.history.handlers.

00:00:05.889 --> 00:00:08.950
The Backbone.history object
is what actually takes care

00:00:08.950 --> 00:00:11.630
of managing the state
of your application.

00:00:11.630 --> 00:00:15.190
It monitors the URL for changes, and
when it sees a route that's listed in

00:00:15.190 --> 00:00:17.550
its list of handlers,
it calls the function.

00:00:17.550 --> 00:00:20.840
Let's take our last dive into Backbone
source to see how it does this.

00:00:21.900 --> 00:00:24.290
Let's add a breakpoint here
to pause the execution and

00:00:24.290 --> 00:00:25.960
start working through the code.

00:00:25.960 --> 00:00:30.100
Reloading pauses at the breakpoint,
so let's step inside start.

00:00:30.100 --> 00:00:33.095
These lines determine if the app
can use the hash change and

00:00:33.095 --> 00:00:36.500
pushState events to monitor the URL for
changes.

00:00:36.500 --> 00:00:38.620
Since we didn't tell
Backbone to use pushState,

00:00:38.620 --> 00:00:41.000
it will default to hashChange.

00:00:41.000 --> 00:00:44.880
If we want to use pushState,
we could call start like this.

00:00:44.880 --> 00:00:47.440
Backbone gets the current
URL fragment here.

00:00:47.440 --> 00:00:51.020
This is a precaution in case the app is
loaded with one of the routes already in

00:00:51.020 --> 00:00:52.420
the URL.

00:00:52.420 --> 00:00:55.213
This section will run if we
said we wanted pushState and

00:00:55.213 --> 00:00:57.685
hashChanges also available.

00:00:57.685 --> 00:01:00.795
This section will load if
the app is loaded in an iFrame.

00:01:00.795 --> 00:01:04.194
Older browsers do not support
the addEventListener API.

00:01:04.194 --> 00:01:06.315
So if the app is loaded
in an older browser,

00:01:06.315 --> 00:01:10.810
it will set addEventListener to
a function that calls attachEvent.

00:01:10.810 --> 00:01:14.780
This section sets up the listener for
either pushState, hashChange, or

00:01:14.780 --> 00:01:16.230
if neither one of them is available,

00:01:16.230 --> 00:01:20.510
then it fall backs to polling the URL
for changes every 50 milliseconds.

00:01:20.510 --> 00:01:24.540
We're checking for the hashChange event,
so we add this listener here.

00:01:24.540 --> 00:01:25.710
We're done with this part, so

00:01:25.710 --> 00:01:27.480
I'll click Resume to finish
running through all the code.

00:01:28.510 --> 00:01:31.540
Now that check URL will be called
when there's a hashChange,

00:01:31.540 --> 00:01:34.650
let's set a breakpoint here and
walk through it.

00:01:34.650 --> 00:01:37.830
Let's click this button to
change the URL's fragment.

00:01:37.830 --> 00:01:41.610
checkUrl gets the current fragment and
calls loadUrl.

00:01:41.610 --> 00:01:46.050
loadUrl is what compares the new
URL against the list of handlers.

00:01:46.050 --> 00:01:49.840
It gets the current fragment, then it
goes through the list of handlers for

00:01:49.840 --> 00:01:53.920
some that have a route that
matches the current URL.

00:01:53.920 --> 00:01:57.450
I'll add a breakpoint here to let
us skip over the details of some.

00:01:57.450 --> 00:01:59.900
It's paused right here
at the breakpoint.

00:01:59.900 --> 00:02:03.198
Checking the scope, we can see that this
handler is the one for the clear route.

00:02:03.198 --> 00:02:07.460
It tests the route against the current
page's fragment, and they don't match.

00:02:07.460 --> 00:02:10.020
So I'll click Resume to
get to the next handler.

00:02:10.020 --> 00:02:12.120
Now it's checking the select route.

00:02:12.120 --> 00:02:14.150
Notice fragment right here.

00:02:14.150 --> 00:02:17.670
The fragment starts out with select,
so the test does match.

00:02:17.670 --> 00:02:20.760
Remember when we walked through what
happens when a router is set up?

00:02:20.760 --> 00:02:23.210
This is the callback
function that was created.

00:02:23.210 --> 00:02:25.760
This line gets
the parameter from the URL,

00:02:25.760 --> 00:02:29.550
then it executes the callback function
that's set up in food router.

00:02:29.550 --> 00:02:32.720
After that, it just returns,
and that's it.

00:02:32.720 --> 00:02:36.150
We finished digging through how
routing and state management work.

00:02:36.150 --> 00:02:38.076
But don't lose track of the big picture.

00:02:38.076 --> 00:02:43.190
Backbone.history.start sets up an event
listener to watch the URL for changes.

00:02:43.190 --> 00:02:46.590
When it does change, Backbone cycles
through its list of handlers,

00:02:46.590 --> 00:02:49.060
looking for one that matches the URL.

00:02:49.060 --> 00:02:50.000
When it finds one,

00:02:50.000 --> 00:02:52.440
it executes the callback function
associated with that route.

