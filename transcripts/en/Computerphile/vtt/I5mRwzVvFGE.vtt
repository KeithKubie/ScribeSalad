WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.979
So it was an interesting start to 2018 --

00:00:01.979 --> 00:00:05.249
There was a lot of chatter on Twitter and other social networks about how

00:00:05.500 --> 00:00:07.380
there was (sort of) a lot of patches

00:00:07.380 --> 00:00:12.440
going into the Linux kernel was what I think started people noticing this -- and that perhaps there was a major

00:00:12.720 --> 00:00:19.100
exploit about to be announced that would affect Linux perhaps and actually, as it turns out, Windows, Mac OS.

00:00:19.420 --> 00:00:26.099
and other operating systems as well. The short of this is is that people at Google and various other universities, Rambus, and various other

00:00:26.220 --> 00:00:29.640
institutions and so on have discovered a way that

00:00:30.000 --> 00:00:35.520
any program can pretty much read data that it's not meant to be reading. That can be anything as simple as

00:00:36.140 --> 00:00:39.540
reading a value past the end of an array even though the program is coded

00:00:39.580 --> 00:00:43.600
to not let you do that -- which will then give you access to data that you shouldn't have in your program --

00:00:44.110 --> 00:00:47.099
to up to, in the worst case, being able to read kernel memory

00:00:47.100 --> 00:00:51.419
which is the operating system's memory where there's things like passwords and encryption keys stored -

00:00:51.730 --> 00:00:55.919
to actually reading the whole memory of your computer in the worst case.

00:00:56.020 --> 00:01:01.109
To make it worse, the really nasty thing about this one is it's not a problem in the software as such;

00:01:01.539 --> 00:01:06.749
it's an actual problem with the way that modern CPUs are implemented, whether it's AMD,

00:01:07.299 --> 00:01:14.819
Intel, ARM and so on - they've all said that in certain circumstances all their CPUs could be affected so it's a pretty

00:01:15.460 --> 00:01:21.989
major thing which is going to require some rethinking perhaps of the way the CPUs are designed. The best comment

00:01:21.990 --> 00:01:25.890
I've seen about this is the U.S.'s CERT - Computer Emergency Response Team's

00:01:26.500 --> 00:01:29.009
article on this, which I've got open here.

00:01:29.009 --> 00:01:32.140
It says CPU hardware implementations are vulnerable to

00:01:32.160 --> 00:01:40.160
side channel attacks. These vulnerabilities are referred to as Meltdown and Spectre. And they say: "Solution: replace CPU hardware"

00:01:43.050 --> 00:01:45.050
So it's pretty major

00:01:45.730 --> 00:01:48.060
So the short of it is that you can now...

00:01:48.580 --> 00:01:53.860
even though the OS is saying you can't [read memory] even though the program is saying you can't - you can read memory

00:01:54.040 --> 00:02:01.500
that you shouldn't have access to, and then use that to exfiltrate data from the computer system that perhaps you shouldn't have access to.

00:02:01.900 --> 00:02:07.499
According to Mozilla and Chrome and things there are ways that this can be done via JavaScript, say on a webpage, so you could

00:02:08.080 --> 00:02:12.479
technically -- and I don't think it's been exploited yet -- but the real danger would be that you could go to a webpage

00:02:12.480 --> 00:02:15.600
and it would copy out all your memory very slowly (must admit)

00:02:15.600 --> 00:02:21.560
over the network and people would have access to things. It's not as bad as it sounds; there are

00:02:21.780 --> 00:02:27.140
things that can be done in software that can patch and sort of mitigate the effects of this and stop it happening.

00:02:27.460 --> 00:02:30.480
The downside of that is that they can have a significant

00:02:31.270 --> 00:02:33.190
sort of speed performance hit.

00:02:33.190 --> 00:02:41.080
Your programs will probably end up running slightly slower, slightly depends on what it's doing, how it's actually interacting with the operating system, and

00:02:41.160 --> 00:02:43.160
so on but

00:02:43.270 --> 00:02:47.639
as the CERT says, to really fix this it's going to need to require

00:02:47.820 --> 00:02:49.120
redesigned CPUs.

00:02:49.120 --> 00:02:52.280
[Sean]: The very big difference between this and other exploits

00:02:52.290 --> 00:02:58.540
we've covered -- because every exploit seems to be the biggest thing since sliced bread -- the biggest thing is this the fact that it's hardware, right?

00:02:58.560 --> 00:02:59.980
Yeah
So this is not

00:02:59.980 --> 00:03:02.730
something that can be directly patched in

00:03:02.920 --> 00:03:08.580
with a new version of the software. or you can switch from Windows to Linux, or Linux to Windows to Mac OS, whatever it is, Free BSD...

00:03:09.100 --> 00:03:13.709
FreeBSD, Dragonfly BSD, Open BSD -- whatever your favorite operating system of the month is.

00:03:15.160 --> 00:03:18.940
This is an attack that is

00:03:19.620 --> 00:03:23.700
[based] fundamentally in the way that the CPUs have been designed to work and

00:03:23.980 --> 00:03:25.739
doesn't even require the operating system.

00:03:25.740 --> 00:03:28.260
It can be done - if you can get the code to work

00:03:28.380 --> 00:03:32.080
say, from a bit of JavaScript on a web page, and there are examples

00:03:32.260 --> 00:03:34.340
that have been shown to do that.

00:03:34.340 --> 00:03:38.540
[Sean]: As far as I see in the media, there's Spectre and there's Meltdown.

00:03:38.540 --> 00:03:44.120
Are they completely different things then? Or is it just that they affect different devices? How does it work?

00:03:44.120 --> 00:03:50.060
So they're basically all variants of the same techniques - a way of exploiting the design of a modern CPU

00:03:50.260 --> 00:03:54.800
to access data that you shouldn't have access to. The best way to think about it

00:03:54.800 --> 00:03:59.460
is that Spectre describes a sort of family of different techniques or

00:03:59.680 --> 00:04:04.200
exploiting the way the CPU is designed to access data that you perhaps shouldn't have access to.

00:04:05.100 --> 00:04:08.560
Meltdown is a specific instance of using one of those techniques

00:04:08.820 --> 00:04:15.320
specifically to access the kernel's memory, and from that, to be able to get access to any sort of memory inside

00:04:15.540 --> 00:04:20.900
the computer at that time. So they're all related and they sort of all work in a similar way.

00:04:20.900 --> 00:04:23.300
We'll dive down in a minute and have a look.

00:04:23.300 --> 00:04:27.780
In the paper that has been released describing the way the Spectre attacks work,

00:04:27.780 --> 00:04:34.679
there's some demonstration code, which I've got here. It runs the same on Mac, Windows, Linux; you can take the same code

00:04:34.780 --> 00:04:42.080
and bring it to different things. It's completely independent of the operating system; this is right down at the CPU level. What we've got is

00:04:42.100 --> 00:04:48.520
a function which is accessing an array of 16 elements. So we have an array and it's called

00:04:49.270 --> 00:04:50.650
array one

00:04:50.650 --> 00:04:57.900
which has got 16 elements in it, and they are set to be 1, 2, 3, dot dot dot... up to

00:04:58.180 --> 00:05:03.389
16. So accessing in this array... They're laid out in memory, and we've talked about that in previous videos.

00:05:03.389 --> 00:05:10.780
This is then accessed by a variable X, which is used to index that array, but the program says if

00:05:11.340 --> 00:05:18.240
X is less than 16, [then] access the array. If it isn't [less than 16], it's not going to access the array.

00:05:18.240 --> 00:05:23.080
The program's been specifically written in a way so that they won't access values past the end of the array.

00:05:23.500 --> 00:05:24.699
However,

00:05:24.700 --> 00:05:29.320
by using the attacks described as what's been termed Spectre, then

00:05:29.680 --> 00:05:32.640
you are able to still get the values. In this case,

00:05:32.980 --> 00:05:40.360
the string that I've changed from the example to be "Hello Computerphile," and so if we compile this up and run it,

00:05:40.600 --> 00:05:42.600
what we should see...

00:05:42.940 --> 00:05:45.380
( just make it slightly bigger... )

00:05:47.640 --> 00:05:52.200
... is we should see the message "Hello Computerphile" pop up.

00:05:52.260 --> 00:05:56.240
So it's getting the data of various things, and we see here a "Hello Computerphile"

00:05:57.940 --> 00:06:03.700
is popping up. If you go and grab the code, look at the paper -- it's sitting there at the back

00:06:03.940 --> 00:06:05.020
Now this isn't

00:06:05.020 --> 00:06:10.440
Anything too spectacular; it's one program accessing data inside its own program space.

00:06:10.680 --> 00:06:14.660
Why is that an issue? Well the interesting thing is that what we've managed to do...

00:06:15.100 --> 00:06:20.820
we've been able to do this by accessing a value that we shouldn't be able to access. This code, this if statement, should stop us

00:06:20.820 --> 00:06:25.769
being able to access this past the end of this array. Yet as we can see there, the message

00:06:25.770 --> 00:06:32.430
"Hello Computerphile" is appearing. This is a problem because this could actually be done from JavaScript on code

00:06:32.430 --> 00:06:37.680
that's being downloaded from a webpage, and so one webpage will be able to pull things out of your web browser that

00:06:37.680 --> 00:06:41.910
perhaps have been loaded from another webpage -- say, your bank details or something. So that's

00:06:42.240 --> 00:06:47.200
one possible way that this could be exploited. The way that Spectre and

00:06:47.680 --> 00:06:53.370
Meltdown work is that they take advantage of two features of a modern CPU -- the way they're designed and actually implemented.

00:06:53.370 --> 00:07:00.000
So we've talked about how they're running our machine code, but underneath that's getting converted into the electronic circuits

00:07:00.000 --> 00:07:02.070
which execute that and are firing them off

00:07:02.530 --> 00:07:07.919
at the right times. Modern CPUs take advantage of two techniques, one of which is called out-of-order execution.

00:07:08.160 --> 00:07:12.780
Basically, what this means is that the CPU will reorder the instructions --

00:07:13.000 --> 00:07:17.360
Well, technically, reorder that micro-ops that the instructions get split up into, but that's going

00:07:17.889 --> 00:07:19.780
into even more detail than we need

00:07:19.780 --> 00:07:21.580
to find the best

00:07:21.580 --> 00:07:28.340
way to execute them to keep everything going and running at the best speed. On top of this we get what's called speculative

00:07:28.340 --> 00:07:31.220
evaluation, which basically means that the CPU is going to

00:07:31.750 --> 00:07:33.750
execute code

00:07:34.060 --> 00:07:38.820
even if it doesn't need to necessarily do that. The best example... If we go back to the code that we were running here...

00:07:39.039 --> 00:07:44.309
This program has got a bit of code, and I've written it down here (the bits and we'll sort-of build up a bit)

00:07:44.590 --> 00:07:47.250
which is accessing values from array 1

00:07:48.040 --> 00:07:51.420
with an index of X. But before that, we check that our X is

00:07:51.600 --> 00:07:57.120
less than the size of the array, and if it isn't, this code doesn't get executed. So what does Spectre need to do?

00:07:57.120 --> 00:07:58.419
Spectre needs to do two things.

00:07:58.419 --> 00:08:02.189
One: It needs to have this bit of code execute

00:08:02.919 --> 00:08:07.319
even though it shouldn't, to try and get those values from our message out of there.

00:08:07.360 --> 00:08:11.789
That's the first thing: it needs to get this bit of code to execute even though it shouldn't, and

00:08:12.480 --> 00:08:16.860
Two: It needs to get the value returned from that out

00:08:16.860 --> 00:08:18.700
and pass it so you can actually

00:08:19.040 --> 00:08:23.960
extract that value -- to get that value that it was trying to read. So it's two things that it needs to do, and it can

00:08:23.969 --> 00:08:28.019
do both of those things by exploiting the way that a modern CPU is designed.

00:08:28.810 --> 00:08:30.810
Because a modern CPU

00:08:31.060 --> 00:08:32.829
actually is designed

00:08:32.829 --> 00:08:36.760
to sometimes execute code even though it doesn't need to.

00:08:36.760 --> 00:08:41.720
Or rather, we have a technique called speculative evaluation, and what it will say is:

00:08:42.960 --> 00:08:46.780
Okay, I am going to execute this code

00:08:47.320 --> 00:08:49.900
because there's a very good chance that it might need to be done.

00:08:49.930 --> 00:08:55.649
... But it might not, and if it doesn't, I'll undo what that code did and then execute the code

00:08:55.649 --> 00:08:59.360
that should be done. An example where this might happen in

00:08:59.700 --> 00:09:03.779
this code is if we didn't know the value of array one size --

00:09:03.779 --> 00:09:06.689
we didn't know it was 16, so we hadn't actually got that value --

00:09:06.690 --> 00:09:12.029
we'd have to go off to memory and get that value. If this had to go off to main memory rather than get it from

00:09:12.029 --> 00:09:14.920
cache, it would take 200 times as long to

00:09:14.920 --> 00:09:19.740
access it from main memory -- about 100 nanoseconds as opposed to half a nanosecond on a modern

00:09:20.110 --> 00:09:23.760
sort-of typical modern CPU, so it'll take it a reasonably long time.

00:09:23.760 --> 00:09:26.879
And so what the CPU will do while it's waiting for that value,

00:09:26.880 --> 00:09:31.559
it'll make a prediction based on what's happened before -- based on the way this branch has happened before --

00:09:31.630 --> 00:09:33.719
about whether it's going to execute this code or not.

00:09:33.780 --> 00:09:38.900
And so it may well execute this code even though it doesn't need to, because it thinks it's going to do it.

00:09:38.940 --> 00:09:40.920
In fact, there's ways that Spectre uses to

00:09:40.920 --> 00:09:45.660
set that up so that that actually happens. The modern CPU will execute this anyway, and then throw the

00:09:45.660 --> 00:09:50.780
result away. So how do we get the value out of it? Well actually if you look at the code

00:09:51.000 --> 00:09:54.320
that's being used, it's not just getting the value from this.

00:09:54.320 --> 00:10:03.120
It's actually then using that value to access another array, and it's actually multiplying this by 512.

00:10:03.120 --> 00:10:07.120
Why is it doing that? Let's assume that this gets executed as well.

00:10:07.560 --> 00:10:10.040
When it accesses this memory, it's going to

00:10:10.040 --> 00:10:15.380
fetch (again we're talking about the cache) it's going to fetch in the whole cache line containing that thing into memory

00:10:15.380 --> 00:10:18.160
and put it into the cache, so that will then get cached.

00:10:18.360 --> 00:10:22.600
What that means is that the next time it's accessed, that

00:10:24.000 --> 00:10:30.160
value is cached, so it'll be accessed very quickly, as opposed to very slowly - again about 200 times slower.

00:10:30.360 --> 00:10:39.100
There's a way you can use the cache as a sort of covert channel to transfer information out based on whether something has been cached or not.

00:10:39.680 --> 00:10:41.510
And as it turns out,

00:10:41.510 --> 00:10:43.510
even though the result of this is thrown away,

00:10:44.360 --> 00:10:50.200
because this then accessed the cache and brought that value into the cache line, it's not thrown away. So the cache actually

00:10:50.220 --> 00:10:52.720
has that value in it.

00:10:52.720 --> 00:10:59.410
So you can use speculative evaluation to cause this instruction to get executed and actually get the value from memory,

00:10:59.410 --> 00:11:03.309
and then you can use the cache as a sort of covert channel to get that value,

00:11:03.410 --> 00:11:08.679
or parts of that value out of this thing that's actually thrown away -- and you never actually see it --

00:11:09.470 --> 00:11:13.029
[and turn it] into something that you can then extract. If you look at the rest of the code,

00:11:13.820 --> 00:11:17.420
you'll see there're things where it's flushing the cache and timing how long

00:11:17.440 --> 00:11:22.720
instructions take to run. So it's calling the function, and then it's looking at how long

00:11:23.080 --> 00:11:27.300
instructions take to access to find out which value was cached --

00:11:27.310 --> 00:11:30.070
which one was accessed quickly -- and that is based on

00:11:30.200 --> 00:11:34.420
the value that was returned. So if you can find out which bit of memory was cached,

00:11:34.690 --> 00:11:38.320
you can effectively use that as a proxy to find out what the value that was returned was,

00:11:38.560 --> 00:11:43.800
even though the CPU threw that value away and so Spectre and

00:11:44.360 --> 00:11:47.740
Meltdown all rely on the fact that the CPUs will sometimes do work

00:11:47.740 --> 00:11:49.700
they don't have to, they will speculate and say well actually...

00:11:49.780 --> 00:11:54.360
There's ways you can force that to actually be more likely to happen by setting things up in the right way

00:11:54.370 --> 00:11:56.440
And if you read the paper [bitly link in description] you can see how that's done.

00:11:57.160 --> 00:12:01.660
So it uses that to cause it, but normally that would be thrown away, but actually unfortunately

00:12:01.700 --> 00:12:07.720
the way the modern CPUs are designed is that it's possible to set things up so they leave a footprint in the cache

00:12:08.120 --> 00:12:11.500
about whether they accessed a value or not, and you can then

00:12:12.170 --> 00:12:15.489
see what the value was returned. So it's sort of

00:12:15.740 --> 00:12:20.200
clever way of extracting the values. They do it perhaps a bit at a time or a byte at a time.

00:12:21.960 --> 00:12:24.560
What meltdown does is the same thing,

00:12:24.580 --> 00:12:26.480
but it actually sort of

00:12:26.480 --> 00:12:31.280
manages to get the data out of the kernel address space because of the way the caches are implemented and

00:12:31.280 --> 00:12:36.980
the way that the protection checks are done; the speculative evaluation can sometimes happen

00:12:37.160 --> 00:12:43.080
before the protection check happens because of the way the instructions can actually be reordered to make things work as best as possible.

00:12:43.420 --> 00:12:46.280
So yeah, not good; probably need a new CPU.

00:12:46.280 --> 00:12:50.229
[Sean]: Just reading between the lines: even though everybody's blowing up about Intel at the moment,

00:12:50.850 --> 00:12:54.050
actually, the medium- to longer-term problem is all CPUs.

00:12:56.000 --> 00:13:01.860
At the moment Intel has a problem because Meltdown specifically is a nasty effect,

00:13:01.980 --> 00:13:07.520
and the mitigation will slow down the way computers work -- significantly, in some cases.

00:13:07.540 --> 00:13:12.020
This technique of Spectre does work on other CPUs as well:

00:13:12.199 --> 00:13:14.929
AMD, ARM, Intel have all said that in certain circumstances

00:13:14.929 --> 00:13:20.860
there are ways that they're affected, so I suspect we will see a few more plays on this in the next few years.

00:13:22.680 --> 00:13:29.140
By using this sort of idea of a superscalar approach we can actually have multiple instructions if they're in the right order --

00:13:29.140 --> 00:13:34.040
they're sort of using different parts of the chips and so on -- we know multiple instructions execute at the same time

00:13:34.040 --> 00:13:36.079
And then you can say well actually if we can do that

00:13:36.959 --> 00:13:42.768
We can start to actually put say two ALU bits in which do the addition and so on we can have to add instructions?

00:13:43.170 --> 00:13:45.170
providing they're separate

