WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.320
 <i>Android patterns for performance</i> 

00:00:02.430 --> 00:00:03.820
 For mobile apps, 

00:00:03.820 --> 00:00:07.020
 Serial data is a large and consistent set of information 

00:00:07.020 --> 00:00:08.830
 Which you should bring from your servers. 

00:00:08.830 --> 00:00:09.930
 But you were learning 

00:00:09.930 --> 00:00:12.440
 That the order of the data inside the serial form 

00:00:12.440 --> 00:00:14.490
 May greatly affect its output size? 

00:00:14.870 --> 00:00:15.990
 My name is Colt McCannless. 

00:00:15.990 --> 00:00:17.700
 When it comes to serial data, 

00:00:18.010 --> 00:00:21.370
 It may be important to get rid of your standards for organisms 

00:00:21.370 --> 00:00:23.670
 For something more effective. 

00:00:23.670 --> 00:00:26.090
 Most individuals organize their data in memory 

00:00:26.090 --> 00:00:29.450
 As objects filled with numbers, functions and all other things. 

00:00:29.650 --> 00:00:33.730
 A sequence of arrays of these objects preserves their structure 

00:00:33.730 --> 00:00:35.275
 In the resulting data stream. 

00:00:35.495 --> 00:00:36.660
 This type of organization 

00:00:36.660 --> 00:00:39.630
 Is what we call a series of structural models 

00:00:39.630 --> 00:00:43.270
 Or a group of objects or categories, name it. 

00:00:43.410 --> 00:00:45.540
 The conclusion is that the sequence is sequential 

00:00:45.540 --> 00:00:48.590
 Reflects vector-oriented data layout within memory, 

00:00:48.590 --> 00:00:50.860
 It is useful in terms of software, 

00:00:50.860 --> 00:00:53.620
 But eventually leads to the amplification of the serial flow. 

00:00:53.620 --> 00:00:56.200
 First, consider that in the sequential model, 

00:00:56.410 --> 00:01:00.291
 Each member's value must be publicly declared in its own name. 

00:01:00.291 --> 00:01:02.494
 Which means that with every example of your category, 

00:01:02.494 --> 00:01:04.740
 Each property will have the full name of the property 

00:01:04.740 --> 00:01:07.430
 And the value declared in the serial file. 

00:01:07.430 --> 00:01:09.210
 So it's clear that your files will be larger 

00:01:09.210 --> 00:01:12.250
 Resulting in all existing extra attribute names. 

00:01:12.820 --> 00:01:16.830
 Second, you need to understand that this is the worst possible layout of data 

00:01:16.830 --> 00:01:19.270
 To apply pressure to your file. 

00:01:19.270 --> 00:01:23.750
 Consider using GZIP compression; it is standard for most HTTP responses. 

00:01:23.970 --> 00:01:27.200
 GZIP presses data by searching for duplicate strings in your file, 

00:01:27.200 --> 00:01:31.220
 As long as it is separated by a framework of 32 thousand characters. 

00:01:31.500 --> 00:01:33.500
 So as you grow your class, 

00:01:33.500 --> 00:01:35.570
 Different types of data are similar to each other, 

00:01:35.570 --> 00:01:39.110
 Which means there is less repetition within that window of 32 thousand characters 

00:01:39.110 --> 00:01:41.310
 Thus reducing the pressure less. 

00:01:41.800 --> 00:01:44.510
 In general, the use of an array of model structures 

00:01:44.510 --> 00:01:48.100
 To create larger sequential files do not really press it properly. 

00:01:48.460 --> 00:01:49.800
 What is the solution? 

00:01:49.800 --> 00:01:52.600
 Struct-of-Arrays model. 

00:01:52.850 --> 00:01:54.980
 Think of the Struct-of-Arrays 

00:01:54.980 --> 00:01:56.890
 As a position substitution in your data. 

00:01:56.890 --> 00:02:00.090
 If we assume that we have a list of objects, choose from them what is similar to the property 

00:02:00.090 --> 00:02:03.610
 Of each element, and then insert them together into their own array. 

00:02:03.610 --> 00:02:05.530
 So pay it with every property in the category. 

00:02:05.890 --> 00:02:08.479
 For example, create an example of the width values 

00:02:08.479 --> 00:02:11.008
 And an independent figure for height values. 

00:02:11.008 --> 00:02:15.700
 This serial result results from simple arrays of similar data type. 

00:02:15.700 --> 00:02:17.090
 For sequencing, 

00:02:17.090 --> 00:02:19.650
 This pattern returns some immediate benefits. 

00:02:19.980 --> 00:02:21.980
 It first removes extra attribute names 

00:02:21.980 --> 00:02:23.400
 Of the sequence. 

00:02:23.400 --> 00:02:25.800
 They are all folded into one example. 

00:02:25.800 --> 00:02:29.350
 So you'll basically create smaller serial files. 

00:02:29.780 --> 00:02:32.854
 Second, similar data types are now consistent, 

00:02:32.854 --> 00:02:34.270
 Which means that the GZIP algorithm 

00:02:34.270 --> 00:02:36.190
 It will be a better chance to discover duplicate matches, 

00:02:36.190 --> 00:02:38.131
 They will be closer now and will be found 

00:02:38.131 --> 00:02:41.040
 It is more likely to be present in the 32,000-character frame. 

00:02:41.380 --> 00:02:44.180
 Thirdly, data regulation helps in this model 

00:02:44.180 --> 00:02:48.350
 To separate the content of different types of pressure. 

00:02:48.750 --> 00:02:51.337
 If you have, for example, a row consisting of a thousand numbers, 

00:02:51.747 --> 00:02:54.330
 GZIP may not be able to do much with that information. 

00:02:54.330 --> 00:02:56.690
 But it is best for you to apply Delta compression 

00:02:56.970 --> 00:03:00.060
 On this stream of numbers before placing it in the sequential file. 

00:03:00.319 --> 00:03:01.860
 This is something you can not really do 

00:03:01.860 --> 00:03:04.120
 In a structural array model 

00:03:04.120 --> 00:03:08.079
 Because of the complexities of vector-oriented design of the objects embedded here. 

00:03:08.079 --> 00:03:10.900
 Please note that when you change your data, 

00:03:10.900 --> 00:03:14.310
 You can get better compression and faster sequence 

00:03:14.310 --> 00:03:16.500
 Through the use of binary sequence architecture 

00:03:16.500 --> 00:03:19.120
 Such as Protobuffs, Nanobuffs, or FlatBuffers. 

00:03:19.310 --> 00:03:24.010
 It produces much smaller files than JSON or XML. 

00:03:24.370 --> 00:03:27.060
 In the end this is what you want, right? 

00:03:27.060 --> 00:03:29.960
 I mean wonderful layers that you can stack on top of each other 

00:03:29.963 --> 00:03:31.695
 To create the most homogeneous applications. 

00:03:31.695 --> 00:03:35.089
 Check the remaining Android Performance Patterns videos. 

00:03:35.089 --> 00:03:37.200
 Do not miss joining the Google+ community 

00:03:37.200 --> 00:03:40.020
 For other insights from other great developers. 

00:03:40.260 --> 00:03:42.600
 So keep calm, collect your code information 

00:03:42.600 --> 00:03:44.070
 Always remember that performance is important. 

