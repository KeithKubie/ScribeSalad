WEBVTT
Kind: captions
Language: en

00:00:05.268 --> 00:00:07.372
 We will launch the Android Jetpack, 

00:00:07.372 --> 00:00:09.710
 This is our next generation of components and tools. 

00:00:09.710 --> 00:00:12.441
 And an architecture guide to help you speed up 

00:00:12.441 --> 00:00:13.884
 Your Android development. 

00:00:14.318 --> 00:00:16.720
 You tell us that it is difficult to be backward compatible, 

00:00:16.720 --> 00:00:18.626
 So we built a support library. 

00:00:18.626 --> 00:00:21.253
 You tell us that it's difficult to manage your application due to data changes. 

00:00:21.253 --> 00:00:23.211
 So we built the architecture components. 

00:00:23.211 --> 00:00:26.169
 We hear that you want more, so we are building more. 

00:00:27.026 --> 00:00:29.339
 Android architecture components provide us with 

00:00:29.339 --> 00:00:32.409
 A template to write production-ready Android code, 

00:00:32.409 --> 00:00:35.125
 This can help us add new developers faster. 

00:00:35.811 --> 00:00:38.520
 The Jetpack consists of four parts: 

00:00:38.520 --> 00:00:41.216
 Foundation, architecture, behavior and UI. 

00:00:41.772 --> 00:00:44.252
 Each component can be used and built separately. 

00:00:44.252 --> 00:00:46.251
 To maintain backward compatibility. 

00:00:47.413 --> 00:00:50.277
 The Android architecture components are very modular. 

00:00:50.277 --> 00:00:54.784
 So we can choose the feature set we want that applies to our application. 

00:00:55.221 --> 00:00:58.079
 Conscious observers and observable components of the life cycle 

00:00:58.079 --> 00:01:00.833
 Allow separation of concerns to create testable, 

00:01:00.833 --> 00:01:03.019
 Reliable, high quality applications. 

00:01:03.019 --> 00:01:05.750
 One of the most important things we don't have to worry about is 

00:01:05.750 --> 00:01:07.569
 Which code to go to. 

00:01:07.852 --> 00:01:12.088
 This helps us test some models. It helps us build reliable code. 

00:01:12.309 --> 00:01:14.470
 We don't have to have life cycle awareness, 

00:01:14.470 --> 00:01:16.161
 Just help new developers join, 

00:01:16.161 --> 00:01:19.821
 Then write the appropriate modular production-ready code, 

00:01:19.821 --> 00:01:22.373
 There is no need to add all of these extra different themes. 

00:01:23.420 --> 00:01:25.637
 It also utilizes the Kotlin language feature. 

00:01:25.637 --> 00:01:27.222
 Make your work more efficient. 

00:01:27.222 --> 00:01:29.129
 Jetpack management 

00:01:29.129 --> 00:01:33.197
 Trivial activities such as persistence, background tasks, navigation and lifecycle management. 

00:01:33.197 --> 00:01:36.827
 So you can cancel the boilerplate code and focus on what makes your app great. 

00:01:38.570 --> 00:01:43.552
 Database persistence has been a nightmare for the Android community for years, and Room is a huge improvement. 

00:01:43.552 --> 00:01:46.315
 The creation of the Room is due to the testability, 

00:01:46.315 --> 00:01:48.810
 So we can be on the persistence layer 

00:01:48.810 --> 00:01:50.900
 Add test coverage that we were unable to add before. 

00:01:50.900 --> 00:01:52.698
 There is no need to build any infrastructure around it. 

00:01:53.497 --> 00:01:56.808
 With Android Jetpack, we eliminated all types of problems. 

00:01:56.808 --> 00:01:58.858
 And make the code easier to maintain. 

00:01:59.399 --> 00:02:02.338
 Since Zillow has been using Android architecture components, 

00:02:02.338 --> 00:02:05.372
 So the user encounters fewer errors in the application. 

00:02:05.745 --> 00:02:10.008
 We will continue to add new features to Jetpack across the Android platform. 

00:02:10.008 --> 00:02:11.280
 It's easy to get started. 

00:02:11.280 --> 00:02:13.568
 You can update your app at your own pace. 

00:02:13.568 --> 00:02:14.780
 And all these components 

00:02:14.780 --> 00:02:16.928
 Both can be run on older versions of the platform. 

00:02:18.661 --> 00:02:19.464
 to know more information 

00:02:19.464 --> 00:02:23.278
 And start with developer.android.com/jetpack! 

