WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.469
 <i>Android patterns for performance</i> 

00:00:02.469 --> 00:00:06.355
 Data hierarchy is an important aspect of all Android applications. 

00:00:06.355 --> 00:00:09.270
 But when it comes to performance, there are right and wrong ways to do it. 

00:00:09.270 --> 00:00:10.510
 My name is Colt McCannless. 

00:00:10.510 --> 00:00:13.065
 Your choice of the sequence and format service provider may affect 

00:00:13.065 --> 00:00:15.695
 Have a significant impact on the performance of your application. 

00:00:15.695 --> 00:00:18.020
 The sequence is basically 

00:00:18.020 --> 00:00:20.840
 Is the process of taking an object into memory 

00:00:20.840 --> 00:00:22.920
 And convert it into a coordinated set of data 

00:00:22.920 --> 00:00:26.310
 Which can be converted back into an object within memory later. 

00:00:26.680 --> 00:00:30.160
 Sequence occurs everywhere, starting with sending packets 

00:00:30.160 --> 00:00:32.009
 Between the server and the Android device 

00:00:32.009 --> 00:00:34.210
 Sending data between two processes, 

00:00:34.210 --> 00:00:36.110
 Store user preferences in the disk, 

00:00:36.110 --> 00:00:39.220
 And even simple things, such as passing the current song information 

00:00:39.220 --> 00:00:41.430
 To the user interface to view. 

00:00:41.850 --> 00:00:46.080
 Typically, most Android developers automatically choose the easiest way to create a sequence of data, 

00:00:46.080 --> 00:00:50.150
 Specifically expanding its class using the sequential class. 

00:00:50.160 --> 00:00:53.710
 But in terms of performance, there is actually no worse solution to this problem. 

00:00:53.710 --> 00:00:57.424
 Integrated categories, such as serializable and output output stream 

00:00:57.424 --> 00:01:00.010
 Will work wonderfully in terms of functionality, 

00:01:00.280 --> 00:01:03.190
 But these approaches produce great pressure on memory and programming, 

00:01:03.190 --> 00:01:06.672
 Making them very slow with the current function. 

00:01:06.672 --> 00:01:10.270
 For the sake of performance, you will need to avoid all that mess, 

00:01:10.270 --> 00:01:13.190
 And instead switch to things like the GSON library 

00:01:13.190 --> 00:01:17.060
 Which creates a faster sequence and more memory-saving results. 

00:01:17.330 --> 00:01:19.690
 This is despite a big problem with GSON 

00:01:19.690 --> 00:01:23.900
 Is to use the JSON format, which is known to create bloated files. 

00:01:24.370 --> 00:01:27.680
 Text-based attributes such as JSON and XML tend to 

00:01:27.680 --> 00:01:30.782
 To decode the programming slowly and create longer results. 

00:01:30.782 --> 00:01:33.560
 The current problem is that this garment can be read with the eye. 

00:01:33.560 --> 00:01:36.170
 This means there are too many lengthy formulas 

00:01:36.170 --> 00:01:38.580
 Which are added to the file to facilitate readability and usage. 

00:01:38.880 --> 00:01:42.070
 It also tends to be super flexible, 

00:01:42.070 --> 00:01:44.700
 Which means that you can easily change the order or data. 

00:01:45.060 --> 00:01:47.980
 But this also comes at the expense of having additional data in the file 

00:01:47.980 --> 00:01:50.000
 Which you probably do not want to actually send to the user. 

00:01:50.530 --> 00:01:53.680
 Here's a quick note, that is, Android resource files 

00:01:53.680 --> 00:01:56.830
 In XML format that does not have any of these issues. 

00:01:56.830 --> 00:02:00.129
 It is assembled at the time of creation in a more compressed format 

00:02:00.129 --> 00:02:02.170
 Provides more memory and faster loading. 

00:02:02.170 --> 00:02:04.404
 So there is no need to worry about any of these problems. 

00:02:04.714 --> 00:02:06.130
 So when it comes to sequencing, 

00:02:06.130 --> 00:02:09.600
 You will need a faster codec that produces files as small as possible. 

00:02:09.600 --> 00:02:12.340
 Fortunately for you, we have three great options available. 

00:02:12.670 --> 00:02:16.170
 First, the Google Protobuffs Library is highly appreciated 

00:02:16.170 --> 00:02:19.470
 Because they format the sequence is very compact and flexible. 

00:02:19.670 --> 00:02:22.040
 The downside is that Java implementation of the library 

00:02:22.040 --> 00:02:24.180
 It produces pressure on memory and code size, 

00:02:24.180 --> 00:02:26.540
 This is not ideal for mobile software development; 

00:02:26.540 --> 00:02:29.640
 This is why the Nano Proto format was created. 

00:02:29.640 --> 00:02:31.420
 It is basically a Protobuffs 

00:02:31.420 --> 00:02:34.930
 But optimized for Android software development, with fewer memory allocations 

00:02:34.930 --> 00:02:36.500
 And fewer calls to methods 

00:02:36.500 --> 00:02:38.850
 And generally less code pressures. 

00:02:39.140 --> 00:02:40.890
 But what I personally prefer 

00:02:40.890 --> 00:02:42.880
 It is of course the Flat Buffers Library. 

00:02:42.880 --> 00:02:46.630
 This theme has been created by one of Google's game development teams 

00:02:46.630 --> 00:02:49.670
 It focuses on performance. 

00:02:49.670 --> 00:02:51.725
 In fact, when it comes to file size, 

00:02:51.725 --> 00:02:55.500
 You can see that Flat Buffers produces smaller files than Protobuff. 

00:02:55.500 --> 00:02:58.110
 When it comes to programming times and decoding, 

00:02:58.110 --> 00:02:59.690
 Flat Buffers have a great advantage. 

00:03:00.080 --> 00:03:02.129
 It hardly produces any pressure. 

00:03:02.489 --> 00:03:05.030
 But the fact that the best solution in terms of performance 

00:03:05.030 --> 00:03:06.820
 Sometimes there is no sequencing. 

00:03:06.820 --> 00:03:09.450
 If you're trying, for example, to store user preferences, 

00:03:09.450 --> 00:03:11.930
 Avoid storage as a sequential file. 

00:03:11.930 --> 00:03:14.900
 But try using the SharedPreferences API. 

00:03:14.900 --> 00:03:17.370
 It is a fast store of core values 

00:03:17.370 --> 00:03:19.500
 Ideal for this type of data. 

00:03:19.920 --> 00:03:22.580
 The same goes for passing data between ongoing processes. 

00:03:22.580 --> 00:03:25.120
 Sequencing is still the wrong solution here. 

00:03:25.120 --> 00:03:29.320
 Instead you should use the Parcelable API, which gives you a slightly sequential layout 

00:03:29.320 --> 00:03:31.220
 But with a significant improvement of performance. 

00:03:31.220 --> 00:03:35.170
 Although you have a lot of composite data that you plan to serialize 

00:03:35.170 --> 00:03:36.380
 Do not do it. 

00:03:36.380 --> 00:03:38.542
 The flow pressure of these serial organisms 

00:03:38.542 --> 00:03:40.500
 Not to mention the time it takes to load 

00:03:40.500 --> 00:03:42.590
 It is terrible compared to creating a local database 

00:03:42.590 --> 00:03:44.555
 Using the SQL Lite API. 

00:03:44.795 --> 00:03:47.530
 So everything in performance revolves around understanding the warnings 

00:03:47.530 --> 00:03:49.120
 Choose the best options. 

00:03:49.120 --> 00:03:51.142
 Believe me, there are warnings everywhere, 

00:03:51.142 --> 00:03:54.186
 Watch the rest of your Android Performance Patterns videos. 

00:03:54.186 --> 00:03:56.370
 Do not miss joining the Google+ community 

00:03:56.370 --> 00:03:58.180
 To ask questions to other individuals as well. 

00:03:58.180 --> 00:04:00.530
 So keep calm, collect your code information 

00:04:00.530 --> 00:04:02.040
 Always remember that performance is important. 

