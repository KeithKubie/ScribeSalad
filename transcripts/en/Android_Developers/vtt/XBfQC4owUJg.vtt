WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:03.550
SPEAKER: The storage permission
is a fairly far-reaching

00:00:03.550 --> 00:00:05.880
permission, giving
read or write access

00:00:05.880 --> 00:00:09.530
to basically your device's
entire internal storage.

00:00:09.530 --> 00:00:11.890
Instead of requesting
the world, consider

00:00:11.890 --> 00:00:14.910
using Scoped Directory
Access to request access

00:00:14.910 --> 00:00:16.990
to just what you
need, whether it's

00:00:16.990 --> 00:00:21.520
on internal storage, SD cards,
or USB-attached storage.

00:00:21.520 --> 00:00:23.720
Scoped Directory
Access relies heavily

00:00:23.720 --> 00:00:26.960
on a new class called
storage volume.

00:00:26.960 --> 00:00:29.070
There's always a
primary storage value

00:00:29.070 --> 00:00:30.680
that corresponds
with the environment

00:00:30.680 --> 00:00:32.940
to get external
storage directory.

00:00:32.940 --> 00:00:35.870
Then there can be any
number of secondary storage

00:00:35.870 --> 00:00:40.440
volumes for SD cards and
USB devices, for instance.

00:00:40.440 --> 00:00:44.460
To retrieve a storage volume,
you'll use Storage Manager.

00:00:44.460 --> 00:00:47.030
You can either get just
the primary storage volume

00:00:47.030 --> 00:00:50.930
or get a list of all
available storage volumes.

00:00:50.930 --> 00:00:54.380
Now, this is where Scope
Directory Access comes in.

00:00:54.380 --> 00:00:57.150
You can use the storage
volumes to create access intent

00:00:57.150 --> 00:01:00.150
method with
startActivityForResult

00:01:00.150 --> 00:01:05.040
to request access to a specific
folder on that storage volume.

00:01:05.040 --> 00:01:06.870
For secondary
storage volumes, you

00:01:06.870 --> 00:01:09.450
can also request access
to the entire volume

00:01:09.450 --> 00:01:11.290
by passing in null.

00:01:11.290 --> 00:01:14.140
So if you want access to the
standard pictures directory,

00:01:14.140 --> 00:01:19.260
for instance, you'd pass in
Environment DIRECTORY_PICTURES.

00:01:19.260 --> 00:01:20.830
Assuming the user
accepts, you'll

00:01:20.830 --> 00:01:22.860
get a call back to
onActivityResult

00:01:22.860 --> 00:01:26.840
with a document tree URI for
the directory you requested

00:01:26.840 --> 00:01:29.210
with read and write
access to the directory

00:01:29.210 --> 00:01:32.810
through the documents contracts
methods or the helper documents

00:01:32.810 --> 00:01:35.050
file class.

00:01:35.050 --> 00:01:37.660
Now, unless this is
a one time operation,

00:01:37.660 --> 00:01:42.170
strongly consider calling
takePersistableUriPermission

00:01:42.170 --> 00:01:44.360
with the URI you receive.

00:01:44.360 --> 00:01:47.480
This will ensure that you won't
have to ask over and over again

00:01:47.480 --> 00:01:49.980
for the same directory.

00:01:49.980 --> 00:01:52.870
In addition, many of the
action media broadcasts

00:01:52.870 --> 00:01:55.640
sent by the system have
been updated to include

00:01:55.640 --> 00:01:58.580
extra storage volume
to tell you exactly

00:01:58.580 --> 00:02:02.270
which storage volume was
just mounted or unmounted.

00:02:02.270 --> 00:02:04.380
Super useful for
updating your UI

00:02:04.380 --> 00:02:08.100
or kicking off the Scope
Directory Access flow.

00:02:08.100 --> 00:02:10.139
The important part to
keep in mind with this

00:02:10.139 --> 00:02:13.130
is that your app gets to
pick what directories it

00:02:13.130 --> 00:02:14.650
needs access to.

00:02:14.650 --> 00:02:17.150
If you want the user to be
able to select any arbitrary

00:02:17.150 --> 00:02:19.130
directory, you'd
instead want to use

00:02:19.130 --> 00:02:22.010
the ACTION_OPEN_DOCUMENT_TREE
intent.

00:02:22.010 --> 00:02:24.690
So don't scare users
away by requesting access

00:02:24.690 --> 00:02:26.130
to their entire device.

00:02:26.130 --> 00:02:29.290
Access only what you need
with Scope Directory Access.

00:02:29.290 --> 00:02:33.390
But most importantly, just
continue to build better apps.

00:02:33.390 --> 00:02:36.140
[MUSIC PLAYING]

