WEBVTT
Kind: captions
Language: en

00:00:06.868 --> 00:00:09.100
Galbraith: So welcome
to Bespin on the Open Web.

00:00:09.100 --> 00:00:10.734
I'm Ben Galbraith.

00:00:10.734 --> 00:00:12.734
Almaer: And I am Dion Almaer.

00:00:12.734 --> 00:00:15.334
We most recently created
this thing Bespin

00:00:15.334 --> 00:00:17.300
that we'll talk about
on the web technologies,

00:00:17.300 --> 00:00:21.901
but we also founded ajaxian.com
where we gather the community

00:00:21.901 --> 00:00:23.367
to chat about all things Ajax.

00:00:23.367 --> 00:00:26.000
Galbraith: And today we work
at a company called Mozilla.

00:00:26.000 --> 00:00:27.334
You're familiar with Mozilla,
of course.

00:00:27.334 --> 00:00:29.868
We work in the labs division
of Mozilla.

00:00:29.868 --> 00:00:32.934
And at Mozilla Labs,
we're working on a bunch

00:00:32.934 --> 00:00:35.467
of interesting things
that we hope will drive

00:00:35.467 --> 00:00:36.901
the Web forward.

00:00:36.901 --> 00:00:38.767
Almaer: So we've got these
different kind of visualizations

00:00:38.767 --> 00:00:41.267
that people have done
of what the browser can do

00:00:41.267 --> 00:00:44.934
in the future in all of these
kind of crazy, futuristic ways

00:00:44.934 --> 00:00:48.200
of accessing your history
and kind of seeing

00:00:48.200 --> 00:00:50.267
where the different data is
and playing around

00:00:50.267 --> 00:00:53.067
with different, cool things
that have been done.

00:00:53.067 --> 00:00:57.601
Like, Adaptive Path did a pretty
fun Aurora visualization,

00:00:57.601 --> 00:01:00.300
so there's all this kind of fun,
future-y lab stuff

00:01:00.300 --> 00:01:01.634
where people pontificate

00:01:01.634 --> 00:01:03.701
on where we'll browse
in the future.

00:01:03.701 --> 00:01:05.434
Galbraith: That's part
of what we do at Labs.

00:01:05.434 --> 00:01:07.901
But, you know, really, when you
move away from science fiction

00:01:07.901 --> 00:01:10.267
and you look at what
the browsers are actually doing,

00:01:10.267 --> 00:01:11.801
you see the interesting trend

00:01:11.801 --> 00:01:14.667
that browsers aren't turning
into "Minority Report."

00:01:14.667 --> 00:01:17.033
They're actually getting simpler
over time.

00:01:17.033 --> 00:01:19.534
But what's fascinating,
at the same time,

00:01:19.534 --> 00:01:21.634
is that the engine underlying
these browsers

00:01:21.634 --> 00:01:23.467
is getting more
and more interesting,

00:01:23.467 --> 00:01:25.501
and so that's what Dion and I do
at Mozilla Labs

00:01:25.501 --> 00:01:27.334
is focus on how
we can harness

00:01:27.334 --> 00:01:30.300
this increasingly powerful
Rev runtime engine

00:01:30.300 --> 00:01:32.300
to do cool things
for developers.

00:01:32.300 --> 00:01:35.000
Almaer: And when the Ajax
revolution kind of kicked off,

00:01:35.000 --> 00:01:37.167
these were the types
of sessions

00:01:37.167 --> 00:01:39.033
that people were talking about
at events like this.

00:01:39.033 --> 00:01:44.100
It was the very low-level API--
in this case, access in XHR--

00:01:44.100 --> 00:01:45.701
to be able to talk back
to the server.

00:01:45.701 --> 00:01:48.400
But those days are kind
of long behind us.

00:01:48.400 --> 00:01:50.067
We've already abstracted on top.

00:01:50.067 --> 00:01:51.400
We've got these great libraries.

00:01:51.400 --> 00:01:54.701
More than just GWT,
which is fantastic.

00:01:54.701 --> 00:01:57.667
There's a whole ecosystem
of libraries that are out there,

00:01:57.667 --> 00:01:59.734
one for every star
that's on this point.

00:01:59.734 --> 00:02:02.334
Every week, someone comes up
with their own Ajax library.

00:02:02.334 --> 00:02:05.567
And we kind of think
that we've nailed

00:02:05.567 --> 00:02:08.901
kind of these DSLs for doing
this little AJAXy stuff,

00:02:08.901 --> 00:02:10.634
and it's time to move on.

00:02:10.634 --> 00:02:12.234
Galbraith: Yeah, Vic talked
about in the keynote

00:02:12.234 --> 00:02:14.667
to start out Google I/O
the sort of future horizon

00:02:14.667 --> 00:02:17.734
of technologies, and we're
super-excited about that.

00:02:17.734 --> 00:02:19.534
It's clear that we're
at the cutting edge,

00:02:19.534 --> 00:02:21.634
the cusp of seeing
what's possible on the Web

00:02:21.634 --> 00:02:23.033
be revolutionized.

00:02:23.033 --> 00:02:24.634
And so what we want to do

00:02:24.634 --> 00:02:28.300
with Bespin is explore how
we can apply these technologies

00:02:28.300 --> 00:02:30.534
to developer tools,
and in today's talk,

00:02:30.534 --> 00:02:33.300
we want to also talk about
these technologies with you,

00:02:33.300 --> 00:02:36.000
some of the newer Open Web
technologies that we used,

00:02:36.000 --> 00:02:37.400
and why we're so excited
about them

00:02:37.400 --> 00:02:40.067
and why we think
they're so disruptive.

00:02:40.067 --> 00:02:41.467
Almaer: So, exactly right.

00:02:41.467 --> 00:02:43.434
We were playing around with
a lot of these technologies,

00:02:43.434 --> 00:02:45.467
doing a lot of demos,
and we kind of wanted

00:02:45.467 --> 00:02:47.367
to take these things
and these cool things

00:02:47.367 --> 00:02:50.300
that people have been talking
about and seeing how far

00:02:50.300 --> 00:02:51.634
you can actually go.

00:02:51.634 --> 00:02:53.267
You know, so the great example
with Wave--

00:02:53.267 --> 00:02:55.400
in our world,
we're in developer tools.

00:02:55.400 --> 00:02:57.534
We have this, like,
really nice advantage,

00:02:57.534 --> 00:03:00.601
which is, you guys, developers,
I don't know how many of you

00:03:00.601 --> 00:03:03.100
are running IE for example,

00:03:03.100 --> 00:03:05.234
so we can go
with these modern browsers,

00:03:05.234 --> 00:03:06.634
I believe they put it,

00:03:06.634 --> 00:03:09.033
to kind of push and see
what's going on

00:03:09.033 --> 00:03:12.033
because in the drudgery
that we sometimes have

00:03:12.033 --> 00:03:14.100
where we have to kind of work
with these--

00:03:14.100 --> 00:03:16.367
you know, my mum and dad
that are running IE6.

00:03:16.367 --> 00:03:17.801
We don't get to play
with the new engine,

00:03:17.801 --> 00:03:20.601
so we have the luxury
to kind of play around.

00:03:20.601 --> 00:03:22.400
In developer tools,
would something

00:03:22.400 --> 00:03:24.534
that people wouldn't think of
as maybe being

00:03:24.534 --> 00:03:26.501
kind of running on the Web,

00:03:26.501 --> 00:03:30.234
and that was to build a,
you know, top class code editor

00:03:30.234 --> 00:03:31.734
and experience.

00:03:31.734 --> 00:03:34.367
 Galbraith: Something that was
not only rivaling Desktop class,

00:03:34.367 --> 00:03:35.434
that actually was better

00:03:35.434 --> 00:03:36.767
than what you could do
on the desktop.

00:03:36.767 --> 00:03:38.067
And so we thought, you know,
if we could build

00:03:38.067 --> 00:03:40.634
an editor that you could
just use from anywhere--

00:03:40.634 --> 00:03:43.634
from a mobile phone
to a Web browser...

00:03:43.634 --> 00:03:45.701
You don't have to bring
your code environment with you,

00:03:45.701 --> 00:03:47.200
it's just always there,
that would be cool.

00:03:47.200 --> 00:03:49.701
If it was really simple to use.

00:03:49.701 --> 00:03:52.634
So a lot of the editors
that we've seen out there

00:03:52.634 --> 00:03:54.767
require familiarity
with the tool,

00:03:54.767 --> 00:03:56.834
a large learning curve,
and they're really intimidating.

00:03:56.834 --> 00:03:59.601
And we wanted something
you could just jump right into.

00:03:59.601 --> 00:04:03.000
And we wanted it to be
incredibly fast and responsive.

00:04:03.000 --> 00:04:04.467
We wanted to make sure
that you never felt

00:04:04.467 --> 00:04:06.234
like, "Geez, you know,
it's not keeping up with me.

00:04:06.234 --> 00:04:07.868
There's a performance problem."

00:04:07.868 --> 00:04:10.901
If this is gonna be successful,
it's got to be lightning fast.

00:04:10.901 --> 00:04:13.267
Almaer: And then collaboration
is a key piece to this.

00:04:13.267 --> 00:04:16.901
And again we're really excited
to see Wave.

00:04:16.901 --> 00:04:18.367
I've worked at Google
in the past,

00:04:18.367 --> 00:04:20.834
so I've had the luxury of
knowing a little bit about it.

00:04:20.834 --> 00:04:23.501
And we want
this rock-solid collaboration.

00:04:23.501 --> 00:04:25.200
As programmers,
we're kind of used to,

00:04:25.200 --> 00:04:27.400
other than some
of the thought workers over here

00:04:27.400 --> 00:04:30.267
that pair with each other
every time they write some code,

00:04:30.267 --> 00:04:32.634
they're kind of sitting in the
cave, kind of writing this code.

00:04:32.634 --> 00:04:34.934
And we want to explore
what it would be like

00:04:34.934 --> 00:04:36.400
with a more social
environment,

00:04:36.400 --> 00:04:40.367
so we want this rock-solid
collaboration built in

00:04:40.367 --> 00:04:43.167
to your code editing
experience.

00:04:43.167 --> 00:04:45.100
I'm also a command line
junkie,

00:04:45.100 --> 00:04:48.200
whether it's Quicksilver
to do fun things on the Mac

00:04:48.200 --> 00:04:49.601
or just the UNIX command line.

00:04:49.601 --> 00:04:51.067
We wanted to kind of put that

00:04:51.067 --> 00:04:53.901
into the code editing
experience too

00:04:53.901 --> 00:04:55.734
and make it very, very social.

00:04:55.734 --> 00:04:58.300
So there's another lab project
called Ubiquity.

00:04:58.300 --> 00:05:00.567
Ubiquity's all about kind
of having this command line

00:05:00.567 --> 00:05:02.601
for the Web
with these social commands,

00:05:02.601 --> 00:05:06.167
so I can go out and write
and interesting command

00:05:06.167 --> 00:05:08.534
that now ties
into the Wave APIs,

00:05:08.534 --> 00:05:11.767
and Ben can say, "I want
to subscribe to Dion's command."

00:05:11.767 --> 00:05:14.667
And as I do new version,
he gets it in his command line.

00:05:14.667 --> 00:05:16.701
So we want to explore
how we can build

00:05:16.701 --> 00:05:19.067
a really discoverable command
line that people can kind of

00:05:19.067 --> 00:05:21.868
evolve on and share
together.

00:05:21.868 --> 00:05:24.200
And then finally,
this is really important.

00:05:24.200 --> 00:05:26.400
I used to be an old eMacs guy

00:05:26.400 --> 00:05:29.534
and was one of those somewhat
sad people at university

00:05:29.534 --> 00:05:31.567
that, like, read me email
through eMacs,

00:05:31.567 --> 00:05:33.200
and that was kind of
everything.

00:05:33.200 --> 00:05:35.767
And I love the fact
that it was totally self-hosted,

00:05:35.767 --> 00:05:38.534
and with all these Web
developers that are here,

00:05:38.534 --> 00:05:41.801
like, how can you go
and extend your editor,

00:05:41.801 --> 00:05:43.167
your IDE?

00:05:43.167 --> 00:05:44.467
It can be pretty hard.

00:05:44.467 --> 00:05:46.267
Some of 'em have different kind
of plug-in APIs

00:05:46.267 --> 00:05:47.567
that you can play with,
but we wanted it

00:05:47.567 --> 00:05:50.501
to be fully self-hosted
in just the Web technology.

00:05:50.501 --> 00:05:52.934
Just JavaScript, CSS,
HTML.

00:05:52.934 --> 00:05:54.667
And so we want to make it
so anyone can extend it

00:05:54.667 --> 00:05:56.234
'cause you're in this tool,
you know,

00:05:56.234 --> 00:05:57.667
eight-plus hours a day
sometimes.

00:05:57.667 --> 00:05:59.567
Let's make sure
that it can be the tool

00:05:59.567 --> 00:06:00.767
that you really want.

00:06:00.767 --> 00:06:02.334
So that's really
what we wanted to do.

00:06:02.334 --> 00:06:05.534
Galbraith: So let's give you
a quick demo of what we have.

00:06:05.534 --> 00:06:09.300
It's a work in progress.

00:06:09.300 --> 00:06:11.334
Let's turn on Mirroring.

00:06:16.300 --> 00:06:19.767
So let's go into a file.

00:06:19.767 --> 00:06:21.067
So this is the Bespin editor.

00:06:21.067 --> 00:06:24.801
And one of the interesting
things that we did is,

00:06:24.801 --> 00:06:25.968
in order
to get performance,

00:06:25.968 --> 00:06:28.534
we actually wound up
coding the code editor

00:06:28.534 --> 00:06:30.868
from scratch using Canvas,

00:06:30.868 --> 00:06:33.434
one of these HTML5 technologies
we've been talking about.

00:06:33.434 --> 00:06:38.200
And so...

00:06:38.200 --> 00:06:40.033
can't start the function.

00:06:40.033 --> 00:06:44.434
Foo: function.

00:06:44.434 --> 00:06:47.534
So one of the things
that I hope I'm showing

00:06:47.534 --> 00:06:49.501
is that it actually is able
to keep up with us

00:06:49.501 --> 00:06:50.801
really well as we type,

00:06:50.801 --> 00:06:52.167
which was really important
to us

00:06:52.167 --> 00:06:54.200
because we hadn't really seen
HTML code editors

00:06:54.200 --> 00:06:56.334
perform that well,

00:06:56.334 --> 00:06:58.501
and we have seen a few
that perform well

00:06:58.501 --> 00:07:01.100
on files of reasonable size.

00:07:01.100 --> 00:07:03.400
This is, you know, 1,500 lines
of code,

00:07:03.400 --> 00:07:06.834
so what happens if we sort
of step it up a notch

00:07:06.834 --> 00:07:09.133
and go to 50,000 lines
of code.

00:07:09.133 --> 00:07:11.200
Almaer: We consider this a best
practice for your project.

00:07:11.200 --> 00:07:12.234
Galbraith: It's all one code...

00:07:12.234 --> 00:07:13.534
Almaer: One large file.

00:07:13.534 --> 00:07:15.834
And so we want to optimize
for that use case.

00:07:15.834 --> 00:07:17.300
Galbraith:
Yeah, we just find it--

00:07:17.300 --> 00:07:19.367
because directory addressing's
so slow,

00:07:19.367 --> 00:07:20.834
we have a lot of files
in the directory,

00:07:20.834 --> 00:07:22.434
it's all one file
on the Bespin team.

00:07:22.434 --> 00:07:24.400
But even with a really large,
obscene file,

00:07:24.400 --> 00:07:26.501
we're able to have performance
still keep up with us

00:07:26.501 --> 00:07:28.300
with live syntax highlighted
and all that stuff.

00:07:28.300 --> 00:07:30.100
So we were really happy
that we were able

00:07:30.100 --> 00:07:31.300
to achieve performance,

00:07:31.300 --> 00:07:33.133
and because we did all
the rendering ourselves,

00:07:33.133 --> 00:07:37.934
we decided to just kind
of be obnoxious and do things

00:07:37.934 --> 00:07:40.100
like, you know,
translucent scrollbars

00:07:40.100 --> 00:07:42.400
and things that you can't
really do on the Web platform

00:07:42.400 --> 00:07:44.534
unless you do it all
on your own.

00:07:44.534 --> 00:07:46.167
So, that's--
oh, and we also

00:07:46.167 --> 00:07:47.767
have full undo/redo and stuff
like that too.

00:07:47.767 --> 00:07:50.334
So that's the basic core
editor.

00:07:50.334 --> 00:07:52.167
Almaer: And then I should show
quickly the command line?

00:07:52.167 --> 00:07:53.200
Galbraith:
Yeah, please.

00:07:53.200 --> 00:07:55.801
Almaer:
So the command line showed--

00:07:55.801 --> 00:07:57.033
this is a little bit
of an experiment.

00:07:57.033 --> 00:07:58.634
We have this pie menu thing.

00:07:58.634 --> 00:08:01.033
Which, again, 'cause we're doing
all of this in Canvas,

00:08:01.033 --> 00:08:02.801
we can animate
and do fun things.

00:08:02.801 --> 00:08:05.834
Again, I kind of mentioned,
like, Quicksilver-like,

00:08:05.834 --> 00:08:09.501
and you can go through and run
these whole slew of commands

00:08:09.501 --> 00:08:11.934
that you have access to, and
you can look at your history,

00:08:11.934 --> 00:08:14.801
and double-click to run again,
and single-click to put it in,

00:08:14.801 --> 00:08:17.801
and all
these kind of fun things.

00:08:17.801 --> 00:08:20.033
And what we should actually
show you

00:08:20.033 --> 00:08:22.434
is just kind of what it's like
to actually write

00:08:22.434 --> 00:08:24.534
a simple command, say.

00:08:24.534 --> 00:08:27.634
So there's a Bespin settings
project that everyone gets

00:08:27.634 --> 00:08:29.267
when you get an account.

00:08:29.267 --> 00:08:32.200
And I open up
the calculate command.

00:08:32.200 --> 00:08:35.901
It's just a JSONObject
that mimics the Ubiquity API.

00:08:35.901 --> 00:08:38.534
We just give it a name
and the arguments it takes

00:08:38.534 --> 00:08:39.501
and things like this.

00:08:39.501 --> 00:08:41.133
And you just get
an execute function,

00:08:41.133 --> 00:08:42.901
and there's some other things,
like doing validation

00:08:42.901 --> 00:08:44.467
and the like.

00:08:44.467 --> 00:08:46.501
But that's just where you kind
of write your code,

00:08:46.501 --> 00:08:49.734
and then you can go through
and run it.

00:08:49.734 --> 00:08:51.968
Now at first,
I don't have this command,

00:08:51.968 --> 00:08:55.634
but what I can do
is I can go into my settings,

00:08:55.634 --> 00:08:57.033
and I can turn it on.

00:08:57.033 --> 00:08:59.067
So I'll go here into
my config,

00:08:59.067 --> 00:09:03.334
and I've had commented out
loading that particular command.

00:09:03.334 --> 00:09:06.868
So uncomment that guy.

00:09:06.868 --> 00:09:09.467
I can run config
to force the load.

00:09:09.467 --> 00:09:12.133
And now I can calculate
something on the fly.

00:09:12.133 --> 00:09:14.467
And then people can subscribe
to these commands and like.

00:09:14.467 --> 00:09:17.067
So we found the people just
going off and kind of writing

00:09:17.067 --> 00:09:20.000
their own little commands
as a very easy way

00:09:20.000 --> 00:09:22.400
for developers to just extend
what they're doing,

00:09:22.400 --> 00:09:24.467
especially since you don't have
to think too much

00:09:24.467 --> 00:09:26.067
about the UI and the like.

00:09:26.067 --> 00:09:28.100
But we also have APIs where,
from the commands,

00:09:28.100 --> 00:09:30.834
you can then come up
and access the APIs

00:09:30.834 --> 00:09:33.100
and do different things
like that.

00:09:33.100 --> 00:09:34.334
Galbraith: Cool.
Almaer: Shall we go back to it?

00:09:34.334 --> 00:09:35.667
We'll show more
about Bespin in a bit.

00:09:35.667 --> 00:09:36.934
Galbraith: Yeah, let's get
back to the slides

00:09:36.934 --> 00:09:38.300
and talk a little bit more
about this

00:09:38.300 --> 00:09:39.567
because that's really
what you want to see,

00:09:39.567 --> 00:09:41.067
is more slides.

00:09:41.067 --> 00:09:43.834
Um...

00:09:43.834 --> 00:09:46.667
let me turn off Mirroring
just because we need to see

00:09:46.667 --> 00:09:49.100
a little bit in advance
what's happening.

00:09:49.100 --> 00:09:50.801
Almaer: So we're gonna talk
about the different technologies

00:09:50.801 --> 00:09:52.334
that we've used in Bespin

00:09:52.334 --> 00:09:56.267
and then kind of look
at some of the gotchas

00:09:56.267 --> 00:09:58.601
and what we've kind of
experienced as we used them

00:09:58.601 --> 00:10:01.000
and things we had to do
to kind of make this work

00:10:01.000 --> 00:10:02.100
a little bit too.

00:10:02.100 --> 00:10:03.100
Galbraith: Well,
you saw the full slide,

00:10:03.100 --> 00:10:04.167
so I'll just put it up there.

00:10:04.167 --> 00:10:05.567
So we talked
about Canvas.

00:10:05.567 --> 00:10:07.934
And we'd actually like
to talk a little bit more

00:10:07.934 --> 00:10:09.434
about Canvas
and how we've used it.

00:10:09.434 --> 00:10:10.567
And then we'll also be
talking about

00:10:10.567 --> 00:10:12.133
some of the other
technologies

00:10:12.133 --> 00:10:14.701
that played an important role
here in what we've done.

00:10:14.701 --> 00:10:17.601
So Canvas--I just want to blow
through these really quick

00:10:17.601 --> 00:10:19.467
and just point out that
traditionally we've been limited

00:10:19.467 --> 00:10:20.634
to three primitives
on the Web--

00:10:20.634 --> 00:10:22.567
text, rectangles,
and images.

00:10:22.567 --> 00:10:23.834
And Canvas blows that out

00:10:23.834 --> 00:10:26.467
so we can do arbitrary rendering
of all kinds.

00:10:26.467 --> 00:10:28.534
And you can actually do
some things

00:10:28.534 --> 00:10:31.033
that are not
immediately obvious.

00:10:31.033 --> 00:10:32.767
Once you mash a video
in here too,

00:10:32.767 --> 00:10:34.968
like, take video pull frames
out of the video

00:10:34.968 --> 00:10:37.367
and use Canvas to composite
the frames on the fly

00:10:37.367 --> 00:10:40.734
and do things like, you know,
detect the light sources

00:10:40.734 --> 00:10:42.667
and put elements inside,

00:10:42.667 --> 00:10:45.400
they're all using JavaScript,
Canvas, video, all that stuff.

00:10:45.400 --> 00:10:48.133
So Canvas let's us do things
that are pretty amazing

00:10:48.133 --> 00:10:49.400
that have never been possible,

00:10:49.400 --> 00:10:51.200
but you might be thinking,
"Well, we have Flash

00:10:51.200 --> 00:10:52.634
and Silverlight
and other plug-ins that do it."

00:10:52.634 --> 00:10:54.868
We just want to review
the specific reasons

00:10:54.868 --> 00:10:57.434
why we think Canvas
is so revolutionary,

00:10:57.434 --> 00:10:59.200
even though with plug-ins,
we've been able to do

00:10:59.200 --> 00:11:01.434
some arbitrary rendering
before.

00:11:01.434 --> 00:11:03.133
One of which is there's
absolutely no start-up delay,

00:11:03.133 --> 00:11:04.367
which is huge,

00:11:04.367 --> 00:11:05.634
especially with some
of the plug-ins out there

00:11:05.634 --> 00:11:08.000
that block the browser
while they start up.

00:11:08.000 --> 00:11:10.200
And they're available
on mobile devices today.

00:11:10.200 --> 00:11:12.701
There's no need to wait
until mobile versions

00:11:12.701 --> 00:11:14.601
of these plug-ins
are properly optimized.

00:11:14.601 --> 00:11:18.434
You can go use them
on certain classes

00:11:18.434 --> 00:11:19.534
of mobile devices
that are very popular,

00:11:19.534 --> 00:11:20.634
like the iPhone,

00:11:20.634 --> 00:11:22.634
that have full-featured browsers
out there.

00:11:22.634 --> 00:11:25.234
Rendering fidelity
with the browser--

00:11:25.234 --> 00:11:27.167
some plug-ins actually render
their own fonts.

00:11:27.167 --> 00:11:29.567
And if you're into the
micro-details like we are,

00:11:29.567 --> 00:11:31.133
we thinks those things
really, really matter

00:11:31.133 --> 00:11:33.200
when you have text
that just looks different

00:11:33.200 --> 00:11:34.767
from the rest of
the web page,

00:11:34.767 --> 00:11:36.267
from the rest
of what the user expects,

00:11:36.267 --> 00:11:39.133
and having Canvas actually there
using the same pipeline

00:11:39.133 --> 00:11:42.968
as the rest of the browser
makes a big difference.

00:11:42.968 --> 00:11:44.634
Almaer: And then
the whole bridge system.

00:11:44.634 --> 00:11:46.601
So right now there's really
no interesting ways

00:11:46.601 --> 00:11:49.200
to bridge over to Flash
and Silverlight and the like,

00:11:49.200 --> 00:11:51.868
but you have to go through
this marshaling experience,

00:11:51.868 --> 00:11:53.934
which can be
a little bit slow,

00:11:53.934 --> 00:11:56.300
even though things are being
worked on there,

00:11:56.300 --> 00:11:58.701
and you have to do
that little bit of Swiff stuff

00:11:58.701 --> 00:12:00.334
or whatever it is
on the other side

00:12:00.334 --> 00:12:01.934
to bridge through
to the system.

00:12:01.934 --> 00:12:04.200
Here we just kind of
bypass that, and,

00:12:04.200 --> 00:12:06.434
as we'll see when we look
at some of the Canvas stuff,

00:12:06.434 --> 00:12:09.033
it's just JavaScript
with a little API,

00:12:09.033 --> 00:12:11.501
and that's all you need
to worry about.

00:12:11.501 --> 00:12:13.200
And then kind of wrapping it
all together,

00:12:13.200 --> 00:12:16.167
it's not this separate plug-in
with a separate lifecycle.

00:12:16.167 --> 00:12:17.701
It's native
into the environment,

00:12:17.701 --> 00:12:20.167
into the browser platform
itself.

00:12:20.167 --> 00:12:22.434
Galbraith: So the interesting
thing about Canvas

00:12:22.434 --> 00:12:24.400
is that it actually came
to us as a proprietary extension

00:12:24.400 --> 00:12:26.267
that Apple did,
but the thing that we thought

00:12:26.267 --> 00:12:28.567
was interesting is just how
far ahead of the game Apple was

00:12:28.567 --> 00:12:30.934
because Apple took the Web
and basically made it

00:12:30.934 --> 00:12:33.501
the desktop program remodel
for their widgeting system,

00:12:33.501 --> 00:12:35.434
and it seems like,
three or four years later,

00:12:35.434 --> 00:12:36.934
we're finally catching up
with his idea

00:12:36.934 --> 00:12:39.567
that the Web can actually be
the desktop platform.

00:12:39.567 --> 00:12:40.968
And we'll talk more about that.

00:12:40.968 --> 00:12:43.534
And then the other modern
browsers that are out there

00:12:43.534 --> 00:12:45.501
actually have this technology
too, as we've discussed.

00:12:45.501 --> 00:12:47.000
And there's the question
of IE.

00:12:47.000 --> 00:12:48.367
What do you do
with IE?

00:12:48.367 --> 00:12:50.634
Well, it turns out there are
ways to get Canvas in IE.

00:12:50.634 --> 00:12:52.467
Google has created
a VML bridge.

00:12:52.467 --> 00:12:55.734
VML's a proprietary vector
graphics language

00:12:55.734 --> 00:12:57.334
that's been in IE forever.

00:12:57.334 --> 00:13:00.334
And there's a JavaScript bridge
that lets you use Canvas

00:13:00.334 --> 00:13:02.701
on top of VML really slowly.

00:13:02.701 --> 00:13:04.701
And then there's a number
of other bridges out there

00:13:04.701 --> 00:13:06.534
that are based on Flash
and Silverlight.

00:13:06.534 --> 00:13:08.200
These are all works
in progress.

00:13:08.200 --> 00:13:10.701
None of them are really great
in quality right now,

00:13:10.701 --> 00:13:12.567
but if you look at Yahoo! Pipes
for example,

00:13:12.567 --> 00:13:14.601
Yahoo! Pipes has built
a really great application

00:13:14.601 --> 00:13:17.801
on top of the earlier VML Canvas
bridge that I mentioned.

00:13:17.801 --> 00:13:20.501
And then we have
an experimental extension

00:13:20.501 --> 00:13:22.934
at Mozilla that takes
our own Canvas implementation

00:13:22.934 --> 00:13:24.701
in Firefox and packages that up

00:13:24.701 --> 00:13:26.501
as an ActiveX plug-in
and lets you use it

00:13:26.501 --> 00:13:27.901
in Internet Explorer.

00:13:27.901 --> 00:13:29.934
So there are a number of ways
to get Canvas to IE.

00:13:29.934 --> 00:13:31.300
For us, we just said,

00:13:31.300 --> 00:13:33.033
"Hey, we're not
actually gonna support IE."

00:13:33.033 --> 00:13:34.901
And that worked out
pretty well.

00:13:34.901 --> 00:13:37.400
[laughter]

00:13:37.400 --> 00:13:39.067
[stammering]

00:13:39.067 --> 00:13:40.200
Not that we don't like IE.

00:13:40.200 --> 00:13:41.234
Almaer:
Yes, exactly.

00:13:41.234 --> 00:13:43.567
Especially since Chris Wilson
is here.

00:13:43.567 --> 00:13:45.734
We love IE.
We're passionate about it.

00:13:45.734 --> 00:13:47.234
Galbraith: Hey, Chris.

00:13:47.234 --> 00:13:48.701
Almaer: SVG.

00:13:48.701 --> 00:13:50.167
A few people,
after we launched this,

00:13:50.167 --> 00:13:53.100
sort of really like SVG,
said, "Why did you use Canvas

00:13:53.100 --> 00:13:58.234
and not SVG?
It's got different advantages."

00:13:58.234 --> 00:14:00.467
You know, we definitely think
SVG is doing some great stuff,

00:14:00.467 --> 00:14:02.400
we've seen some great
applications with it,

00:14:02.400 --> 00:14:05.067
but, "A," it wasn't really
our background.

00:14:05.067 --> 00:14:07.133
Ben's a Java 2-D kind of guru,

00:14:07.133 --> 00:14:10.067
so if it were--
his knowledge was already--

00:14:10.067 --> 00:14:12.567
and also frankly the Canvas API,
as you'll see,

00:14:12.567 --> 00:14:14.934
is very, very small,
lightweight API

00:14:14.934 --> 00:14:18.634
the browser's gonna implement
easily, whereas SVG is,

00:14:18.634 --> 00:14:21.834
you know, x-thousand pages,
and then there's the SVG live,

00:14:21.834 --> 00:14:23.701
and you get into kind of some
of the same issues

00:14:23.701 --> 00:14:25.367
we see with HTML

00:14:25.367 --> 00:14:27.267
where we get the different
browsers supporting it.

00:14:27.267 --> 00:14:29.100
But a lot of great things
are happening.

00:14:29.100 --> 00:14:31.033
There's some really great
Googlers who are doing

00:14:31.033 --> 00:14:32.601
some really good stuff
with SVG.

00:14:32.601 --> 00:14:35.133
So we're excited to see what
kind of comes out of that too.

00:14:35.133 --> 00:14:36.801
Galbraith: So we've all seen
a lot of slides by now

00:14:36.801 --> 00:14:38.267
about Canvas,
what you can do with it,

00:14:38.267 --> 00:14:40.467
and we thought,
if you were interested,

00:14:40.467 --> 00:14:41.934
we could actually start coding
with Canvas

00:14:41.934 --> 00:14:44.100
to give you more of a feel
of how it actually works.

00:14:44.100 --> 00:14:46.968
And we thought, you know,
it's one thing

00:14:46.968 --> 00:14:48.667
to create a code editor
from scratch in Canvas,

00:14:48.667 --> 00:14:50.167
it's another to create
a code editor

00:14:50.167 --> 00:14:52.067
from scratch using
your code editor from scratch

00:14:52.067 --> 00:14:54.300
in a live demo
using Canvas.

00:14:54.300 --> 00:14:55.767
And if you guys would like
to see that,

00:14:55.767 --> 00:14:57.734
we could spend a couple
of minutes just writing

00:14:57.734 --> 00:14:59.367
the code editor from scratch
in Canvas

00:14:59.367 --> 00:15:01.000
in front of you, just to see
what that's like.

00:15:01.000 --> 00:15:03.100
We obviously can't get
a whole lot of features in there

00:15:03.100 --> 00:15:04.634
because there's a lot more
we want to talk about.

00:15:04.634 --> 00:15:07.534
Would that be interesting?
Should we do that?

00:15:07.534 --> 00:15:09.767
Okay, we'll do that
for a few minutes.

00:15:09.767 --> 00:15:12.501
Um, let's see how far we get.

00:15:12.501 --> 00:15:13.934
I reserve the right
to bail.

00:15:13.934 --> 00:15:16.534
Almaer: We got
to get syntax highlighting...

00:15:16.534 --> 00:15:18.968
Galbraith: Yeah,
that's not gonna happen.

00:15:18.968 --> 00:15:22.868
So let's just go
right into Bespin

00:15:22.868 --> 00:15:24.667
and see how far we get.

00:15:24.667 --> 00:15:27.000
So let's pull up
the command line here.

00:15:27.000 --> 00:15:30.501
New file.

00:15:30.501 --> 00:15:33.300
Okay, so I've created
a new HTML file.

00:15:33.300 --> 00:15:35.868
And let's just do
the boilerplate stuff.

00:15:35.868 --> 00:15:37.534
You'd think we'd do this.

00:15:37.534 --> 00:15:41.100
Live Canvas Editor, so...

00:15:41.100 --> 00:15:42.968
Let me just get this boilerplate
out of the way.

00:15:42.968 --> 00:15:45.834
So what we're gonna do
is just do a simple HTML file.

00:15:45.834 --> 00:15:47.834
[laughter]

00:15:47.834 --> 00:15:49.234
This is a new laptop,

00:15:49.234 --> 00:15:51.100
and I haven't quite adjusted
to the keyboard yet.

00:15:51.100 --> 00:15:53.200
And the Canvas tag,
I'm just gonna give it

00:15:53.200 --> 00:15:55.901
a fixed width and height, if
you'll excuse me in this demo.

00:15:55.901 --> 00:16:00.200
Um, so normally what we do
with the editor

00:16:00.200 --> 00:16:02.400
is we actually have
a JavaScript listener

00:16:02.400 --> 00:16:06.367
that listens
to the document size

00:16:06.367 --> 00:16:07.934
and sees
when you resize the window

00:16:07.934 --> 00:16:09.534
and resizes the Canvas
automatically,

00:16:09.534 --> 00:16:12.267
and we'll just skip that part
in this demo.

00:16:12.267 --> 00:16:14.934
And because I'm a little lazy,

00:16:14.934 --> 00:16:16.734
I'm just gonna give us
an IDE,

00:16:16.734 --> 00:16:18.801
and I'm doing awful
with typing today.

00:16:18.801 --> 00:16:22.434
Um, so we've got
our basic HTML scene,

00:16:22.434 --> 00:16:26.033
and let's go ahead
and save this guy.

00:16:26.033 --> 00:16:27.634
Really quickly.

00:16:27.634 --> 00:16:30.534
And then pop open a preview.

00:16:30.534 --> 00:16:31.968
Okay, so there's
our blank Web page.

00:16:31.968 --> 00:16:33.934
And let's elaborate
a little bit.

00:16:33.934 --> 00:16:36.901
So the first thing we want to do
is create some script...

00:16:41.968 --> 00:16:47.467
that is going to interact here
with our little Canvas guy.

00:16:47.467 --> 00:16:50.934
So, um, let's just do
a set-up function.

00:16:50.934 --> 00:16:52.834
Let's do a set-up function
that we're gonna call

00:16:52.834 --> 00:16:54.000
when the page is loaded.

00:16:54.000 --> 00:16:58.234
Anyone offended by that?

00:16:58.234 --> 00:17:00.534
Very good.

00:17:00.534 --> 00:17:03.567
And we're gonna get a reference
to this Canvas,

00:17:03.567 --> 00:17:04.834
so let's see.

00:17:04.834 --> 00:17:09.400
Canvas = document.
getElementById("canvas").

00:17:11.133 --> 00:17:12.467
All right, so now we've got
our Canvas element.

00:17:12.467 --> 00:17:13.968
In order to do any drawing,

00:17:13.968 --> 00:17:19.934
you've got to get something
called the context.

00:17:19.934 --> 00:17:21.567
And as you see here,
it's the 2-D context

00:17:21.567 --> 00:17:23.200
because it's imagined
that, at some point,

00:17:23.200 --> 00:17:26.567
there'll be other contexts
that let you do 3-D and...

00:17:26.567 --> 00:17:28.601
Almaer: 4-D.

00:17:28.601 --> 00:17:30.200
Galbraith: Other than 3-D
and 2-D, I can't really think

00:17:30.200 --> 00:17:32.801
of what else there'd be,
but it's flexible.

00:17:32.801 --> 00:17:35.300
So we've got our 2-D Canvas.

00:17:35.300 --> 00:17:38.000
There is no 3-D context yet,

00:17:38.000 --> 00:17:39.200
but there is some proposals
out there

00:17:39.200 --> 00:17:40.767
from various browser vendors.

00:17:40.767 --> 00:17:42.534
And once we have this stuff--

00:17:42.534 --> 00:17:43.868
you know what,

00:17:43.868 --> 00:17:46.067
I think I'm just gonna do some
global state here.

00:17:46.067 --> 00:17:48.567
Almaer: So we believe
in large files and global state

00:17:48.567 --> 00:17:50.767
in your applications.
[laughter]

00:17:50.767 --> 00:17:52.167
Galbraith: We'll be giving
a JavaScript tips talk

00:17:52.167 --> 00:17:53.434
after this one.

00:17:53.434 --> 00:17:55.167
[laughter]

00:17:55.167 --> 00:17:58.767
And let's see...
the next thing I need to do

00:17:58.767 --> 00:18:01.033
is do a rendering loop,

00:18:01.033 --> 00:18:02.634
and so what I'll just do

00:18:02.634 --> 00:18:05.367
is do setInterval,
and let's just do--

00:18:05.367 --> 00:18:06.934
let's just call it paint,

00:18:06.934 --> 00:18:09.934
and let's kick it off every--
let's try 100 milliseconds.

00:18:09.934 --> 00:18:11.567
That's a good start.

00:18:11.567 --> 00:18:14.868
All right, so now we've got
a paint function

00:18:14.868 --> 00:18:17.067
that's gonna be called
every 100 milliseconds.

00:18:17.067 --> 00:18:19.067
And we've got a global context

00:18:19.067 --> 00:18:20.834
that the paint function
can reference.

00:18:20.834 --> 00:18:25.400
And let's just start rendering
the editor.

00:18:25.400 --> 00:18:26.534
So what we're gonna do

00:18:26.534 --> 00:18:30.767
is give ourselves some text
to render.

00:18:30.767 --> 00:18:32.834
Oh, geez.

00:18:32.834 --> 00:18:34.701
What just happened?

00:18:34.701 --> 00:18:35.801
Expose for the win.

00:18:35.801 --> 00:18:39.667
Um, hello.

00:18:39.667 --> 00:18:42.567
World. Okay, so those will be
our lines of text in the editor.

00:18:42.567 --> 00:18:46.834
And I'm also gonna give us...

00:18:46.834 --> 00:18:48.000
a cursor position.

00:18:48.000 --> 00:18:50.000
And let's put this
at this a new line.

00:18:50.000 --> 00:18:54.167
And let's have a function here
that will render those lines

00:18:54.167 --> 00:18:55.767
in a Canvas-based editor.

00:18:55.767 --> 00:18:57.067
So the first thing I want to do,

00:18:57.067 --> 00:18:58.334
every time we go
through this loop,

00:18:58.334 --> 00:19:00.434
is clear what happens
to be there.

00:19:00.434 --> 00:19:03.300
So this context has
this function called ClearRect.

00:19:03.300 --> 00:19:05.234
And I'm just gonna assume

00:19:05.234 --> 00:19:07.567
that we're always gonna be
500 by 500, sorry.

00:19:07.567 --> 00:19:10.501
And once we do that,

00:19:10.501 --> 00:19:13.067
then I'm gonna paint in
a background color.

00:19:13.067 --> 00:19:16.868
Let's just go ahead
and set our background to black.

00:19:16.868 --> 00:19:22.300
So Canvas has the notion
of a FillStyle,

00:19:22.300 --> 00:19:24.334
which, when you do
filling operations,

00:19:24.334 --> 00:19:26.367
is obviously what it uses
to style it.

00:19:26.367 --> 00:19:28.667
The FillStyle--
there's also a StrokeStyle.

00:19:28.667 --> 00:19:32.734
These are just
parsed CSS values,

00:19:32.734 --> 00:19:34.467
so I'm just gonna set this

00:19:34.467 --> 00:19:36.167
to whatever I had
for background there.

00:19:36.167 --> 00:19:38.033
And let's just do
a black background,

00:19:38.033 --> 00:19:40.400
just so we have something
to see.

00:19:40.400 --> 00:19:44.400
And then we're gonna do
FillRect.

00:19:44.400 --> 00:19:47.667
And then that'll give us
a basic black background.

00:19:47.667 --> 00:19:49.300
In fact,
if I save this guy,

00:19:49.300 --> 00:19:51.467
we should at least see that.

00:19:51.467 --> 00:19:55.200
We'll see absolutely nothing.

00:19:55.200 --> 00:19:59.701
Didn't we see the bug?

00:19:59.701 --> 00:20:01.968
So set-up, set-up.

00:20:01.968 --> 00:20:03.968
Paint.
Paint.

00:20:03.968 --> 00:20:06.767
[muttering to self]

00:20:06.767 --> 00:20:08.000
So this is the other part
of the demo

00:20:08.000 --> 00:20:09.901
that we were really excited
to show you.

00:20:09.901 --> 00:20:11.934
Um, and that's how you debug

00:20:11.934 --> 00:20:15.734
a Canvas-based application
when things just happen

00:20:15.734 --> 00:20:17.601
to go wrong.

00:20:17.601 --> 00:20:23.200
Um, and I see no errors
in the application.

00:20:26.467 --> 00:20:30.334
It is not, it is not,
it is not...

00:20:33.000 --> 00:20:35.934
[mutters to self]

00:20:40.367 --> 00:20:42.667
Oh, yeah, yeah, why did rogue
get color there?

00:20:42.667 --> 00:20:44.334
Anyway, that's our problem.

00:20:44.334 --> 00:20:46.801
[muttering]

00:20:46.801 --> 00:20:50.367
No errors. Canvas.

00:20:52.133 --> 00:20:53.834
So can anyone see the bug?

00:20:53.834 --> 00:20:54.834
This is...

00:20:54.834 --> 00:20:58.334
[man speaks indistinctly]

00:20:58.334 --> 00:21:01.234
[laughter]

00:21:01.234 --> 00:21:02.968
Almaer: So we believe
in large files,

00:21:02.968 --> 00:21:07.567
global variables,
and alerts.

00:21:07.567 --> 00:21:08.901
Almaer: Console.log?

00:21:08.901 --> 00:21:10.300
Galbraith: Oh, yeah.
That's right. Thanks.

00:21:10.300 --> 00:21:14.234
Thank you so much
for that.

00:21:14.234 --> 00:21:16.100
Okay, so let's give that
a try.

00:21:16.100 --> 00:21:18.601
[hums]

00:21:18.601 --> 00:21:20.701
You can't say it wasn't live.
Okay.

00:21:20.701 --> 00:21:22.200
So our paint loop
is getting called--

00:21:22.200 --> 00:21:23.734
this is fantastic news...

00:21:23.734 --> 00:21:28.200
[people speak indistinctly]

00:21:28.200 --> 00:21:29.667
Oh, right.
Almaer: Zero, zero.

00:21:29.667 --> 00:21:31.701
Galbraith: Thank you so much.
Thank you. Very kind.

00:21:31.701 --> 00:21:32.767
Muy amable.

00:21:32.767 --> 00:21:35.934
So let's try that out.

00:21:35.934 --> 00:21:39.033
Thank you! From the kind
gentleman in the back.

00:21:39.033 --> 00:21:40.300
Thank you so much.

00:21:40.300 --> 00:21:41.834
[applause]

00:21:41.834 --> 00:21:45.000
So obviously FillRect takes
an x and a y

00:21:45.000 --> 00:21:47.067
and width and height, obviously.

00:21:49.567 --> 00:21:53.767
ClearRect obviously takes
an x and a y

00:21:53.767 --> 00:21:54.801
and a width and a heighth.

00:21:54.801 --> 00:21:56.334
Thank you. Thank you.

00:21:56.334 --> 00:21:57.767
It's all part of the show.
It's all part of the show.

00:21:57.767 --> 00:22:01.968
So now what we're gonna do
is go through and iterate

00:22:01.968 --> 00:22:04.834
through each line

00:22:04.834 --> 00:22:07.801
in our little array here.

00:22:07.801 --> 00:22:11.901
And here's where we hit
our first fun little roadblock

00:22:11.901 --> 00:22:13.634
with Canvas.

00:22:13.634 --> 00:22:16.834
It turns out
Canvas has one text metric API,

00:22:16.834 --> 00:22:19.734
and that's to determine
the width of a string.

00:22:19.734 --> 00:22:21.000
So you can't actually
figure out

00:22:21.000 --> 00:22:22.400
what the heighth of
a string is,

00:22:22.400 --> 00:22:24.033
and if you've worked
with these APIs,

00:22:24.033 --> 00:22:26.300
you know that the heighth of a
string is somewhat interesting.

00:22:26.300 --> 00:22:28.167
You can get the actual bounds
of a string

00:22:28.167 --> 00:22:29.334
or the ascent of the font.

00:22:29.334 --> 00:22:30.934
None of that stuff.

00:22:30.934 --> 00:22:34.767
So we're gonna do something
kind of fun.

00:22:36.601 --> 00:22:37.901
We're just gonna say it's 15.

00:22:37.901 --> 00:22:41.133
[laughter]

00:22:41.133 --> 00:22:43.801
And let's actually do a style
for the text too.

00:22:43.801 --> 00:22:47.968
Let's just set the font
to 10-point Arial here.

00:22:47.968 --> 00:22:52.200
And we'll deal with that
in just a...

00:22:52.200 --> 00:22:54.834
Almaer: I think in Bespin we
take the width of the letter "M"

00:22:54.834 --> 00:22:57.501
and we assume that
to be the height, right?

00:22:57.501 --> 00:22:58.601
Galbraith: Yeah, yeah, yeah,
so we cheat.

00:22:58.601 --> 00:22:59.667
Yeah, exactly.

00:22:59.667 --> 00:23:01.434
We render
a one-character string,

00:23:01.434 --> 00:23:03.901
and then we flip it, and then
we just assume that that's--

00:23:03.901 --> 00:23:06.100
you know, anyways, we have ways
of tricking it

00:23:06.100 --> 00:23:08.100
to get something
that's proportional

00:23:08.100 --> 00:23:09.767
that does the job.

00:23:09.767 --> 00:23:11.100
Um, and then we're
just gonna set the font--

00:23:11.100 --> 00:23:14.100
want to--
to our font here.

00:23:14.100 --> 00:23:16.501
And then we're just gonna have
a simple counter variable here,

00:23:16.501 --> 00:23:17.934
and we're gonna send that
to lineheights.

00:23:17.934 --> 00:23:21.067
And then we're gonna go through
and render each line.

00:23:21.067 --> 00:23:27.000
Now to do that, we also need
to have a foreground.

00:23:27.000 --> 00:23:31.067
I'll do that really quick.

00:23:31.067 --> 00:23:33.801
White on black, everyone's
favorite color scheme.

00:23:33.801 --> 00:23:36.868
And...

00:23:36.868 --> 00:23:41.033
FillStyle = foreground.

00:23:41.033 --> 00:23:42.367
Perfect.

00:23:42.367 --> 00:23:45.834
Okay, and now we can--
FillText is the API that we need

00:23:45.834 --> 00:23:47.701
for filling text.

00:23:47.701 --> 00:23:49.868
And is it x,y first
and then the text,

00:23:49.868 --> 00:23:51.934
or the text and then x,y?

00:23:51.934 --> 00:23:53.234
We'll find out live.

00:23:53.234 --> 00:23:55.167
On the fly.

00:23:55.167 --> 00:23:59.300
Um, let's do lines[i],
and let's say 0, y.

00:23:59.300 --> 00:24:00.901
That feels right.
That feels good.

00:24:00.901 --> 00:24:06.501
And then we will +=
the lineheight.

00:24:06.501 --> 00:24:10.400
Okay. How many people think
it's actually gonna work?

00:24:10.400 --> 00:24:12.300
[laughter]

00:24:12.300 --> 00:24:15.567
Huge confidence in the aud--

00:24:15.567 --> 00:24:19.567
well, I didn't anticipate
this kind of a failure.

00:24:19.567 --> 00:24:22.000
Really?

00:24:22.000 --> 00:24:23.601
There we go.
Undefined!

00:24:23.601 --> 00:24:28.834
Awesome. All right, so looks
like I got my length wrong.

00:24:28.834 --> 00:24:30.634
Oh, and we're gonna be
continually doing this

00:24:30.634 --> 00:24:33.901
forever and ever.

00:24:33.901 --> 00:24:36.100
All right, so the next time,
can I stop or do I have to--

00:24:36.100 --> 00:24:37.601
Okay. Thank you.

00:24:37.601 --> 00:24:41.801
Thank you.
Let's stop that script.

00:24:41.801 --> 00:24:43.133
No, FillText is right.

00:24:43.133 --> 00:24:47.167
It's just my loop
is going madly out of control

00:24:47.167 --> 00:24:51.033
to the point where I think
I may have to kill the...

00:24:51.033 --> 00:24:55.334
it's all part of the fun
of browsing in your...

00:24:59.734 --> 00:25:01.434
man: Boo!
Galbraith: Quite often--

00:25:01.434 --> 00:25:03.300
quite often we will see

00:25:03.300 --> 00:25:07.467
that I will have no lost work
whatsoever.

00:25:08.767 --> 00:25:10.234
Almaer: That's actually
an interesting point.

00:25:10.234 --> 00:25:12.100
The very first prototype
of Bespin,

00:25:12.100 --> 00:25:15.033
a core feature was that it's
constantly saving your state,

00:25:15.033 --> 00:25:17.567
even though, if you haven't done
a save yet.

00:25:17.567 --> 00:25:19.300
So if you're going through,
you're editing something,

00:25:19.300 --> 00:25:20.701
you get a phone call,
you go home,

00:25:20.701 --> 00:25:22.300
you open up Bespin at home.

00:25:22.300 --> 00:25:25.734
And it will replay everything
including your undo/redo cue,

00:25:25.734 --> 00:25:28.167
so you can hit Ctrl-Z,
Apple-Z,

00:25:28.167 --> 00:25:30.934
and it's right back
where it starts.

00:25:30.934 --> 00:25:32.601
Galbraith: There we are.

00:25:32.601 --> 00:25:36.667
Yes. Well "i" is less than...
Thank you very much.

00:25:36.667 --> 00:25:39.033
Before you make--before
you belittle me too much,

00:25:39.033 --> 00:25:40.400
just come up on stage...

00:25:40.400 --> 00:25:42.467
Um, so let's try this now.

00:25:42.467 --> 00:25:46.400
Um, great, so we've got
rendered text

00:25:46.400 --> 00:25:48.200
and the final thing

00:25:48.200 --> 00:25:50.534
we wanted to show you

00:25:50.534 --> 00:25:52.767
is actually handling
keyboard input.

00:25:52.767 --> 00:25:54.634
And we'll just do--

00:25:54.634 --> 00:25:56.133
should we just do
a document.onkeypress?

00:25:56.133 --> 00:25:57.133
both: Sure.

00:25:57.133 --> 00:26:01.167
Galbraith: Onkeypress =
handlekeypress.

00:26:01.167 --> 00:26:03.100
Sure,
let's just call it that.

00:26:03.100 --> 00:26:09.033
And give us
a handlekeypress function.

00:26:09.033 --> 00:26:10.467
Okay, so now we have
a neat little event

00:26:10.467 --> 00:26:11.501
that's been passed in

00:26:11.501 --> 00:26:15.234
and so what we can do here
is say,

00:26:15.234 --> 00:26:21.167
"if (lines.length
&lt; (pos.row -1))..."

00:26:23.634 --> 00:26:25.734
then we're just going to add
a new string

00:26:25.734 --> 00:26:27.567
to the lines array.

00:26:27.567 --> 00:26:32.234
And then we'll do
a lines[pos.row],

00:26:32.234 --> 00:26:33.601
and we'll just have it add in

00:26:33.601 --> 00:26:35.501
whatever we happen
to have passed in,

00:26:35.501 --> 00:26:38.601
so charCode.

00:26:38.601 --> 00:26:39.767
Then how do you get
an actual character

00:26:39.767 --> 00:26:40.868
from the charCode?

00:26:40.868 --> 00:26:42.167
fromCharCode, right?

00:26:42.167 --> 00:26:43.634
Did I get that right?

00:26:43.634 --> 00:26:45.567
So now with any luck--

00:26:45.567 --> 00:26:48.567
and I've had very little in this
live coding demonstration--

00:26:48.567 --> 00:26:49.968
we'll have an actual...
undefined.

00:26:49.968 --> 00:26:51.267
Very nice.

00:26:51.267 --> 00:26:55.934
So we'll probably take that
as a pass for now.

00:26:55.934 --> 00:26:58.334
All right, so that's
how you create a basic editor

00:26:58.334 --> 00:27:00.033
from scratch, using Canvas.

00:27:00.033 --> 00:27:02.067
Now you notice
how it's a little choppy?

00:27:02.067 --> 00:27:03.868
The solution there is,
of course,

00:27:03.868 --> 00:27:07.100
to increase the resolution
of your repaint.

00:27:07.100 --> 00:27:09.901
And we found that JavaScript
is actually really, really fast.

00:27:09.901 --> 00:27:14.100
You can actually get really
tight with your repaint loops

00:27:14.100 --> 00:27:16.100
and have CPU utilization
still stay pretty low.

00:27:16.100 --> 00:27:18.133
And it becomes a lot smoother.

00:27:18.133 --> 00:27:20.267
So that's--
that's sort of an example

00:27:20.267 --> 00:27:23.167
of how Canvas works
and how you use Canvas

00:27:23.167 --> 00:27:24.300
to create an editor,

00:27:24.300 --> 00:27:26.901
and if that seemed really
tedious to you

00:27:26.901 --> 00:27:28.434
in this short demo,

00:27:28.434 --> 00:27:30.300
sort of imagine that
with a lot more features,

00:27:30.300 --> 00:27:33.467
and that's kind of what it's
like to code Bespin in Canvas.

00:27:33.467 --> 00:27:35.901
But you know, it's actually--
a lot of people,

00:27:35.901 --> 00:27:37.734
when we first did Bespin,
sort of said, you know,

00:27:37.734 --> 00:27:39.133
"That's crazy.
Why did you do that?

00:27:39.133 --> 00:27:40.234
"Why didn't you just use

00:27:40.234 --> 00:27:42.067
the built-in operating system
stuff?"

00:27:42.067 --> 00:27:44.567
But it turns out that,
if you look at Eclipse

00:27:44.567 --> 00:27:48.300
or IntelliJ IDEA or a lot of
the other really popular IDEs,

00:27:48.300 --> 00:27:49.567
they've all actually written

00:27:49.567 --> 00:27:51.167
their text-editing components
from scratch.

00:27:51.167 --> 00:27:52.367
They actually
haven't even used

00:27:52.367 --> 00:27:53.734
what's in the native
operating system,

00:27:53.734 --> 00:27:57.200
or in the case of IDEA,
what's in Java.

00:27:57.200 --> 00:27:58.801
They actually just wrote it
from scratch.

00:27:58.801 --> 00:28:00.567
And that's what most code
editors do to give you

00:28:00.567 --> 00:28:02.434
the kind of experience
that you want

00:28:02.434 --> 00:28:03.601
when doing that stuff.

00:28:03.601 --> 00:28:06.634
So as we went
through this process,

00:28:06.634 --> 00:28:09.000
we created something called
Thunderhead as an experiment

00:28:09.000 --> 00:28:10.934
in trying to figure out
what are the things

00:28:10.934 --> 00:28:12.901
that you'd want as you create
components from scratch,

00:28:12.901 --> 00:28:15.467
using Canvas,
to make life easier.

00:28:15.467 --> 00:28:16.934
And we'll just touch on this

00:28:16.934 --> 00:28:18.467
because it's an experiment
we're running.

00:28:18.467 --> 00:28:20.033
We're not really sure
what we think of it right now.

00:28:20.033 --> 00:28:22.534
But basically it's a toolkit
that lets you do something

00:28:22.534 --> 00:28:25.467
like this--if you noticed
in our live coding example,

00:28:25.467 --> 00:28:28.467
there's no component hierarchy
in the Canvas.

00:28:28.467 --> 00:28:31.100
There's just this Canvas element
and a bunch of Java 2-D code.

00:28:31.100 --> 00:28:33.834
That's not very accessible,
and it's also hard

00:28:33.834 --> 00:28:36.267
to understand what's really
happening inside of it,

00:28:36.267 --> 00:28:39.067
so Thunderhead is a toolkit
that lets you define a scene

00:28:39.067 --> 00:28:43.334
inside of Canvas
using tags and content.

00:28:43.334 --> 00:28:45.634
And also styling it
using CSS.

00:28:45.634 --> 00:28:47.367
So we wrote a CSS parser

00:28:47.367 --> 00:28:50.934
in JavaScript that will then let
you apply the styles

00:28:50.934 --> 00:28:54.067
that you've done
to a Canvas scene,

00:28:54.067 --> 00:28:57.100
so in this case, we also
actually tackled layout,

00:28:57.100 --> 00:29:00.334
and we added layout constructs
to CSS too.

00:29:00.334 --> 00:29:02.868
Let me just show you
how we actually use CSS

00:29:02.868 --> 00:29:06.133
to style a part
of Bespin.

00:29:06.133 --> 00:29:11.801
And then we'll talk
about layout in a second.

00:29:11.801 --> 00:29:16.901
So we showed this sort
of dashboard file explorer.

00:29:16.901 --> 00:29:18.367
And if you notice here,

00:29:18.367 --> 00:29:20.367
we have these bars here
on the left

00:29:20.367 --> 00:29:23.033
that have the gradient
and another image

00:29:23.033 --> 00:29:25.334
that shows
that there's files there.

00:29:25.334 --> 00:29:30.534
What we actually did was
implemented CSS3's image support

00:29:30.534 --> 00:29:32.200
and WebKit's gradient support.

00:29:32.200 --> 00:29:34.434
And we actually do this
in JavaScript

00:29:34.434 --> 00:29:37.801
so that in JavaScript
we actually render the gradient

00:29:37.801 --> 00:29:39.968
and then put that
into Canvas,

00:29:39.968 --> 00:29:42.934
but we use CSS
so that you didn't have

00:29:42.934 --> 00:29:43.934
to learn something new.

00:29:43.934 --> 00:29:46.567
So that's what Thunderhead is.

00:29:46.567 --> 00:29:48.400
It's this experiment to say,
okay, you can render

00:29:48.400 --> 00:29:49.934
custom components in Canvas
that do things

00:29:49.934 --> 00:29:53.133
that are not easy
or impossible with the DOM,

00:29:53.133 --> 00:29:55.167
but we want to make it easy
and accessible,

00:29:55.167 --> 00:29:58.067
so we created this toolkit
to do that.

00:29:58.067 --> 00:29:59.634
Almaer:
[speaks indistinctly]

00:29:59.634 --> 00:30:01.834
Galbraith: Oh, yeah,
and so...

00:30:01.834 --> 00:30:04.567
one of the things we did
in the dashboard

00:30:04.567 --> 00:30:07.000
as an experiment was to do
JavaScript-driven layout,

00:30:07.000 --> 00:30:08.934
and this is
really experimental, just like,

00:30:08.934 --> 00:30:12.400
so here's a bunch of open files,
and what can we do--

00:30:12.400 --> 00:30:14.267
like, as you can strain
the space,

00:30:14.267 --> 00:30:16.033
what can we do to sort of adapt
the layout

00:30:16.033 --> 00:30:17.334
and reduce the font size

00:30:17.334 --> 00:30:18.901
and display less
and less information

00:30:18.901 --> 00:30:21.634
based on how much space
you want to give it?

00:30:21.634 --> 00:30:23.901
And so JavaScript is also part
of Thunderhead.

00:30:23.901 --> 00:30:25.467
And then the other sort
of miscellaneous thing

00:30:25.467 --> 00:30:28.334
that we added here is doing
some intelligence stuff

00:30:28.334 --> 00:30:29.834
when it comes to, like,

00:30:29.834 --> 00:30:32.734
having long file names,
to be able to do truncation

00:30:32.734 --> 00:30:34.200
in the middle
instead of at the ends.

00:30:34.200 --> 00:30:35.801
Stuff like this.

00:30:35.801 --> 00:30:38.801
Just miscellaneous rendering
that's not typically possible

00:30:38.801 --> 00:30:41.100
in HTML.

00:30:41.100 --> 00:30:43.467
And when we experimented
with layout,

00:30:43.467 --> 00:30:46.000
we actually took a popular
third-party layout manager

00:30:46.000 --> 00:30:48.133
in the Java world
called FormLayout--

00:30:48.133 --> 00:30:50.701
JGoodies' Form Layout,
which already had a DSL

00:30:50.701 --> 00:30:52.901
for doing layout,
which I showed you

00:30:52.901 --> 00:30:54.534
but didn't really talk too much
about in this slide,

00:30:54.534 --> 00:30:56.534
that lets you define a grid
up front

00:30:56.534 --> 00:30:59.167
and then plug components
into it.

00:30:59.167 --> 00:31:02.234
And we took that DSL and
just poured it over JavaScript,

00:31:02.234 --> 00:31:04.601
just to have an experiment
to start playing around with.

00:31:04.601 --> 00:31:06.834
How we can actually
make layout easier.

00:31:06.834 --> 00:31:10.000
And so that's
what Thunderhead's all about.

00:31:10.000 --> 00:31:11.868
Almaer:
So what about fast JavaScript?

00:31:11.868 --> 00:31:14.334
We've seen all
that of these engines

00:31:14.334 --> 00:31:16.300
are getting
not just a little bit faster,

00:31:16.300 --> 00:31:18.801
but orders of magnitude
faster,

00:31:18.801 --> 00:31:21.634
and so what's that
actually gonna mean

00:31:21.634 --> 00:31:23.200
for our different
applications?

00:31:23.200 --> 00:31:25.167
We should actually kind of
see visualizations

00:31:25.167 --> 00:31:27.734
on what's going on here.

00:31:27.734 --> 00:31:29.567
Uh, first of which,
do you want to talk

00:31:29.567 --> 00:31:30.734
about garbage collection?

00:31:30.734 --> 00:31:32.634
Galbraith:
Yeah, that's right.

00:31:32.634 --> 00:31:34.701
So I think the key point here,
if I can go back really quick,

00:31:34.701 --> 00:31:36.734
is that the JavaScript run-times
are getting faster.

00:31:36.734 --> 00:31:39.000
So the first key technology
that really enabled Bespin

00:31:39.000 --> 00:31:40.367
is Canvas.

00:31:40.367 --> 00:31:42.167
And the second piece
that's enabling us

00:31:42.167 --> 00:31:43.501
to do really cool things
is the fact

00:31:43.501 --> 00:31:44.701
that each browser's getting

00:31:44.701 --> 00:31:46.267
really fast JavaScript
run-times,

00:31:46.267 --> 00:31:47.534
at least most browsers.

00:31:47.534 --> 00:31:50.567
And one of the new features
that just landed

00:31:50.567 --> 00:31:52.767
in Chrome's V8
JavaScript run-time

00:31:52.767 --> 00:31:54.467
is generational
garbage collection.

00:31:54.467 --> 00:31:56.167
And we wanted to spend
a second just explaining

00:31:56.167 --> 00:31:58.634
why we think this is really
exciting to see on the Web.

00:31:58.634 --> 00:32:01.400
Because typically with
garbage collection run-times,

00:32:01.400 --> 00:32:03.334
which is what
all the major browsers use now,

00:32:03.334 --> 00:32:06.968
you have objects
that are put on a heap

00:32:06.968 --> 00:32:09.067
that represent the data
of your application,

00:32:09.067 --> 00:32:10.734
and when you've filled up
the heap,

00:32:10.734 --> 00:32:12.567
a garbage collection process
goes through

00:32:12.567 --> 00:32:15.133
and cleans up all the objects
that aren't being used,

00:32:15.133 --> 00:32:17.634
and then you can start
to put more data in there.

00:32:17.634 --> 00:32:19.601
But a key observation

00:32:19.601 --> 00:32:21.734
after seeing how these garbage
collectors work is that

00:32:21.734 --> 00:32:24.300
it turns out most objects
don't live a very long time.

00:32:24.300 --> 00:32:26.367
And so to have the garbage
collector have to walk

00:32:26.367 --> 00:32:28.100
your entire memory space

00:32:28.100 --> 00:32:29.767
in order to reclaim
these objects,

00:32:29.767 --> 00:32:32.234
most of which just existed
for a transient period of time

00:32:32.234 --> 00:32:33.734
and are now just totally bogus,

00:32:33.734 --> 00:32:37.100
can be sped up if you have
a young generation

00:32:37.100 --> 00:32:38.767
where you have
your objects created,

00:32:38.767 --> 00:32:40.133
and then the collector
goes through,

00:32:40.133 --> 00:32:41.734
and, it turns out,
destroys most of that.

00:32:41.734 --> 00:32:43.100
And then an older generation

00:32:43.100 --> 00:32:45.133
where the fewer long-lived
objects go to,

00:32:45.133 --> 00:32:46.767
which represents
a much larger space--

00:32:46.767 --> 00:32:48.667
and if you have this division,
it turns out

00:32:48.667 --> 00:32:52.133
that you have fewer pauses
in your application.

00:32:52.133 --> 00:32:54.000
Because as we try to do a lot
in the browser,

00:32:54.000 --> 00:32:56.000
you'll notice that you start
to get these pauses.

00:32:56.000 --> 00:32:57.400
That's GC.

00:32:57.400 --> 00:33:00.501
And so Chrome getting this
just last week,

00:33:00.501 --> 00:33:02.200
at least
in the public 2.0 release,

00:33:02.200 --> 00:33:03.767
is really, really exciting.

00:33:03.767 --> 00:33:05.834
And it's one of the really cool
innovations we're seeing

00:33:05.834 --> 00:33:07.200
in these JavaScript run-times

00:33:07.200 --> 00:33:09.334
that let us do amazing things
in the browser.

00:33:09.334 --> 00:33:10.868
Almaer: When you're playing
around with different tools,

00:33:10.868 --> 00:33:13.767
it'll give you
kind of visualizations

00:33:13.767 --> 00:33:15.834
on what's actually happening
with the memory,

00:33:15.834 --> 00:33:17.734
so as a developer you can see
what's happening

00:33:17.734 --> 00:33:20.968
with the GC.

00:33:20.968 --> 00:33:22.200
No need to say anything there.
Galbraith: Good.

00:33:22.200 --> 00:33:24.667
Almaer: Let's see what happens.

00:33:24.667 --> 00:33:27.534
To see, though, why it matters
to have these fast things,

00:33:27.534 --> 00:33:30.167
kind of a canonical example
would be--would be,

00:33:30.167 --> 00:33:32.367
like, to have Photoshop
in the Web,

00:33:32.367 --> 00:33:34.801
and this is kind of one
of the stabs at doing that.

00:33:34.801 --> 00:33:37.534
It's called Pixastic,
and it uses Canvas

00:33:37.534 --> 00:33:40.033
to give you
a photo-editing experience.

00:33:40.033 --> 00:33:42.434
And if we kick this off
in the different browsers,

00:33:42.434 --> 00:33:43.934
what we're gonna go
is take the color,

00:33:43.934 --> 00:33:46.667
and we're gonna kind
of grayscale it on the fly.

00:33:46.667 --> 00:33:48.067
So an algorithm is running,

00:33:48.067 --> 00:33:50.567
and you'll see Chrome kicked off
pretty quickly there.

00:33:50.567 --> 00:33:53.767
And we're gonna start to see
the other guys come in...

00:33:53.767 --> 00:33:55.067
[coughs]

00:33:55.067 --> 00:33:56.767
A couple of issues
that they have--

00:33:56.767 --> 00:33:59.167
this is why this speed-up
is really important.

00:33:59.167 --> 00:34:00.968
It allows us to do
these applications

00:34:00.968 --> 00:34:02.133
that we want to take
to the Web

00:34:02.133 --> 00:34:05.267
and finally
kind of get us there,

00:34:05.267 --> 00:34:06.868
so one of the core things

00:34:06.868 --> 00:34:09.467
is having these runtimes
able to give us

00:34:09.467 --> 00:34:11.801
what we need as developers
to actually write these apps

00:34:11.801 --> 00:34:13.968
on the Web,
and we're starting to see that.

00:34:13.968 --> 00:34:17.167
And it's kind of
a breakneck pace of innovation.

00:34:17.167 --> 00:34:18.868
Galbraith: Did you see
those dialogues that popped up

00:34:18.868 --> 00:34:20.367
in Firefox and Safari?

00:34:20.367 --> 00:34:22.267
Those were the long-running
script dialogues that just say,

00:34:22.267 --> 00:34:24.167
"Hey, wait, you know, this
script has just kept running.

00:34:24.167 --> 00:34:25.400
Do you want to keep going?"

00:34:25.400 --> 00:34:26.767
We're gonna talk
about what to do

00:34:26.767 --> 00:34:28.934
with that right now
because it's exciting to see

00:34:28.934 --> 00:34:30.400
that JavaScript's speeding up,

00:34:30.400 --> 00:34:33.501
but it turns out
that I've jumped ahead

00:34:33.501 --> 00:34:35.601
for a second, and before
we explain those dialogues

00:34:35.601 --> 00:34:36.801
and how you can get rid of them,

00:34:36.801 --> 00:34:38.968
we're gonna talk
about bottlenecks in code.

00:34:38.968 --> 00:34:41.167
Almaer: Yeah, so there's
various bottlenecks going on

00:34:41.167 --> 00:34:43.067
as you do your application.

00:34:43.067 --> 00:34:46.200
There's probably one
in that Pixastic example.

00:34:46.200 --> 00:34:47.667
We want to talk
about a bottleneck

00:34:47.667 --> 00:34:50.601
that we ran into
with Bespin

00:34:50.601 --> 00:34:53.334
that was actually totally fake.

00:34:53.334 --> 00:34:55.734
JavaScript we thought
would be a huge bottleneck.

00:34:55.734 --> 00:34:57.334
Everything we're doing
with Canvas,

00:34:57.334 --> 00:34:58.701
all of the work
that we're doing there

00:34:58.701 --> 00:35:01.834
is all on JavaScript Logic,
calculating what to do

00:35:01.834 --> 00:35:03.434
to actually draw that page.

00:35:03.434 --> 00:35:05.567
And so we have this assumption
that JavaScript was gonna be

00:35:05.567 --> 00:35:08.367
a huge bottleneck
for the Bespin editor.

00:35:08.367 --> 00:35:10.801
So one of the features
that we had there

00:35:10.801 --> 00:35:12.367
was syntax highlighting,

00:35:12.367 --> 00:35:14.734
and we used a nice
open-source package

00:35:14.734 --> 00:35:16.334
that's really meant for,

00:35:16.334 --> 00:35:18.534
you go to a page,
you paste in a bunch

00:35:18.534 --> 00:35:21.601
of HTML JavaScript,
and it gives you a pretty set

00:35:21.601 --> 00:35:23.467
of HTML that comes out.

00:35:23.467 --> 00:35:26.200
Well, we just kind of took that
and we started to use it,

00:35:26.200 --> 00:35:27.734
and as we're profiling
Bespin,

00:35:27.734 --> 00:35:30.133
we were seeing that,
every time it was going through

00:35:30.133 --> 00:35:32.334
in Ben's code,
he was painting those lines,

00:35:32.334 --> 00:35:34.200
going through that lines array,

00:35:34.200 --> 00:35:36.634
we were doing syntax
highlighting every time,

00:35:36.634 --> 00:35:38.601
maybe every 25 milliseconds.

00:35:38.601 --> 00:35:41.000
And so suddenly
in that syntax highlighter,

00:35:41.000 --> 00:35:43.834
we saw it was doing
500 regular expressions.

00:35:43.834 --> 00:35:46.033
So it's doing, like, 500 Regex
on every line

00:35:46.033 --> 00:35:47.734
every time it painted.

00:35:47.734 --> 00:35:50.667
And this was, like, a day
before we were gonna push Bespin

00:35:50.667 --> 00:35:54.367
out there for people
to play with, and it was scary,

00:35:54.367 --> 00:35:56.367
so we decided to rewrite

00:35:56.367 --> 00:35:59.434
a very simple state
machine-based syntax highlighter

00:35:59.434 --> 00:36:02.067
that would be kind of aware
of our world

00:36:02.067 --> 00:36:03.634
where it's painting
all the time,

00:36:03.634 --> 00:36:05.133
and we spent a bunch
of time

00:36:05.133 --> 00:36:06.934
and got that all working
just fine.

00:36:06.934 --> 00:36:08.334
And then we profiled it again,

00:36:08.334 --> 00:36:10.300
and there was
no speed difference at all.

00:36:10.300 --> 00:36:13.934
On the micro-level, we were,
like, 500 times faster,

00:36:13.934 --> 00:36:15.901
1,000 times faster,
whatever,

00:36:15.901 --> 00:36:17.100
but JavaScript,
it turned out,

00:36:17.100 --> 00:36:18.701
wasn't the bottleneck
at all.

00:36:18.701 --> 00:36:20.567
It was all the blitting code

00:36:20.567 --> 00:36:22.501
of getting all the stuff
over to Canvas

00:36:22.501 --> 00:36:24.834
and all these other browsery
things that were going on,

00:36:24.834 --> 00:36:29.067
so a huge lesson was working out
what that bottleneck is

00:36:29.067 --> 00:36:31.734
and not having assumptions
that we've had for a long time

00:36:31.734 --> 00:36:33.567
that, oh,
it's probably JavaScript

00:36:33.567 --> 00:36:35.467
'cause JavaScript's slow.

00:36:35.467 --> 00:36:38.167
So we paid the price for that.

00:36:38.167 --> 00:36:41.400
Galbraith: So this is an example
of interface latency,

00:36:41.400 --> 00:36:42.934
and it relates
to those pop-up dialogues

00:36:42.934 --> 00:36:44.200
that I started
to mention before.

00:36:44.200 --> 00:36:46.267
The green indicates
that I've clicked.

00:36:46.267 --> 00:36:48.400
And notice that I've clicked
on the word hello,

00:36:48.400 --> 00:36:51.968
and nothing seems to be
happening.

00:36:51.968 --> 00:36:54.133
And eventually
it will come back.

00:36:54.133 --> 00:36:56.734
This is a problem that plagues
desktop applications

00:36:56.734 --> 00:36:58.901
and will start to plague
Web applications.

00:36:58.901 --> 00:37:02.167
It occurs whenever you have
computations occurring

00:37:02.167 --> 00:37:03.467
in a client.

00:37:03.467 --> 00:37:04.767
We want to talk to you
about why that is

00:37:04.767 --> 00:37:05.968
and how you can solve it

00:37:05.968 --> 00:37:06.968
really quickly.

00:37:06.968 --> 00:37:08.968
The reason this happens

00:37:08.968 --> 00:37:12.567
is because--and this--
all Gooey architectures

00:37:12.567 --> 00:37:14.834
basically work in
the same way.

00:37:14.834 --> 00:37:16.767
Let's talk in terms
of the browser.

00:37:16.767 --> 00:37:18.167
What happens
is the operating system

00:37:18.167 --> 00:37:20.167
will ship to you
all kinds of I/O events--

00:37:20.167 --> 00:37:22.200
input events, sorry,
from the user.

00:37:22.200 --> 00:37:24.400
And they land in this queue,
and then it's up to the browser

00:37:24.400 --> 00:37:26.501
to pull these events
from this queue

00:37:26.501 --> 00:37:28.534
and do something with them,
dispatch these events,

00:37:28.534 --> 00:37:29.901
and as a result
of these input events,

00:37:29.901 --> 00:37:31.767
typing on the keyboard,
moving the mouse,

00:37:31.767 --> 00:37:33.901
we'll either execute
JavaScript code,

00:37:33.901 --> 00:37:35.734
or the browser will actually go
to a new browser page

00:37:35.734 --> 00:37:37.634
because you've clicked
on the Go button or something

00:37:37.634 --> 00:37:38.934
to go to another page.

00:37:38.934 --> 00:37:40.734
But the key point is
there's one process,

00:37:40.734 --> 00:37:42.467
one thread
that's doing that,

00:37:42.467 --> 00:37:43.968
and if you have
a multi-process browser

00:37:43.968 --> 00:37:45.501
like Google Chrome
or you have

00:37:45.501 --> 00:37:48.000
a single-process browser
like Safari or Firefox,

00:37:48.000 --> 00:37:50.100
it doesn't matter
because we're talking

00:37:50.100 --> 00:37:52.767
about the scope
of a single page in this case.

00:37:52.767 --> 00:37:55.634
That page can only do
one thing at a time.

00:37:55.634 --> 00:37:57.634
And so that's why you have
these interfaces

00:37:57.634 --> 00:37:59.200
that freeze up.

00:37:59.200 --> 00:38:03.434
So the solution is to actually
create background thread

00:38:03.434 --> 00:38:06.701
that does anything,
any computation,

00:38:06.701 --> 00:38:08.701
that's likely to lock up
that browser.

00:38:08.701 --> 00:38:09.868
But, unfortunately,
on the Web,

00:38:09.868 --> 00:38:11.834
we don't have
background threads.

00:38:11.834 --> 00:38:13.834
But when you think about it,

00:38:13.834 --> 00:38:18.367
XHR...

00:38:18.367 --> 00:38:21.634
is--this thing that's let us
go and make requests

00:38:21.634 --> 00:38:23.501
to other servers
is essentially

00:38:23.501 --> 00:38:25.334
a single-purpose
background thread

00:38:25.334 --> 00:38:27.767
that lets us go and do that,
and the browser manages that,

00:38:27.767 --> 00:38:30.100
and we've been able
to use things like Gears

00:38:30.100 --> 00:38:34.200
and other plug-ins like Java
and Flash to sort of give us

00:38:34.200 --> 00:38:35.934
something to do
in the background.

00:38:35.934 --> 00:38:39.267
And HTML5 gives us something
called Web Workers,

00:38:39.267 --> 00:38:42.133
which also gives us
this background thread concept.

00:38:42.133 --> 00:38:44.601
But it gives us this concept
with a big difference.

00:38:44.601 --> 00:38:46.734
Threads are considered
deprecated by some

00:38:46.734 --> 00:38:48.467
of the big thinkers
in computer science

00:38:48.467 --> 00:38:50.334
because there's something
called shared state.

00:38:50.334 --> 00:38:53.367
Because threads have access
to all of your variables,

00:38:53.367 --> 00:38:56.434
just as your main thread has,
and so what happens typically

00:38:56.434 --> 00:38:58.267
with most developers
is we create threads,

00:38:58.267 --> 00:38:59.467
we do things in the background,

00:38:59.467 --> 00:39:00.934
we feel really great
about our abilities,

00:39:00.934 --> 00:39:03.801
but inevitably these threads
start to touch the state

00:39:03.801 --> 00:39:07.133
that the other threads see,
and they do that

00:39:07.133 --> 00:39:08.901
in ways
that we just can't predict.

00:39:08.901 --> 00:39:11.634
And even though on paper,
you'd look at the problem space

00:39:11.634 --> 00:39:13.667
and you think, "Hey, I got that.
I can do that.

00:39:13.667 --> 00:39:15.901
"I can create a program
that's gonna behave

00:39:15.901 --> 00:39:17.334
in ways I predict,
using threads,"

00:39:17.334 --> 00:39:20.100
but, in practice, we've seen
that threads inject

00:39:20.100 --> 00:39:22.801
all kinds of unpredictable bugs
into applications,

00:39:22.801 --> 00:39:26.701
so workers take concurrency
and do it a little differently,

00:39:26.701 --> 00:39:28.801
where they give you basically
what you'd recognize

00:39:28.801 --> 00:39:30.100
as a thread,

00:39:30.100 --> 00:39:32.167
but a thread that has
no access to your state--

00:39:32.167 --> 00:39:33.567
to the main thread state.

00:39:33.567 --> 00:39:35.501
All you can do
is just pass messages to it

00:39:35.501 --> 00:39:37.501
and receive responses
in return.

00:39:37.501 --> 00:39:39.534
That's the big innovation
that has a lot of people

00:39:39.534 --> 00:39:42.667
feeling like workers may be
the right way to do concurrency.

00:39:42.667 --> 00:39:45.133
And so we have a couple of demos
to show you

00:39:45.133 --> 00:39:47.267
why this comes in so handy.

00:39:47.267 --> 00:39:50.534
The first demo we wanted
to show you is, frankly,

00:39:50.534 --> 00:39:52.934
a demo that shows you
how sensitive we are

00:39:52.934 --> 00:39:55.801
to interface latency.

00:39:55.801 --> 00:39:58.834
It turns out
that you can sense delays

00:39:58.834 --> 00:40:00.834
of a really short period
of time.

00:40:00.834 --> 00:40:03.234
I've got code here
that just goes off and sleeps

00:40:03.234 --> 00:40:05.334
essentially for the number
of time that you see here.

00:40:05.334 --> 00:40:07.367
And so if I click
on this button,

00:40:07.367 --> 00:40:09.400
you'll see that I register
pretty much

00:40:09.400 --> 00:40:10.868
an instantaneous response.

00:40:10.868 --> 00:40:13.968
It seems like, to me,
that the program responds

00:40:13.968 --> 00:40:15.300
right when I click
on the button.

00:40:15.300 --> 00:40:17.100
But as I start to add
the delay,

00:40:17.100 --> 00:40:20.467
it starts to feel--what would
you call--a little sluggish.

00:40:20.467 --> 00:40:21.667
100 milliseconds isn't bad.

00:40:21.667 --> 00:40:22.934
You can still tell
the difference

00:40:22.934 --> 00:40:24.968
between 50 milliseconds
and 100 milliseconds,

00:40:24.968 --> 00:40:27.400
but as we step up,
you start to see

00:40:27.400 --> 00:40:29.801
that even a 1/10 of a second
difference makes me feel

00:40:29.801 --> 00:40:31.767
like the program
isn't quite responding,

00:40:31.767 --> 00:40:34.300
isn't quite keeping up
with me.

00:40:34.300 --> 00:40:37.200
And it gets really bad
at 350 milliseconds.

00:40:37.200 --> 00:40:38.934
And what's the emotional
response that you have

00:40:38.934 --> 00:40:40.300
when a program doesn't respond
right away,

00:40:40.300 --> 00:40:41.400
when it's sluggish?

00:40:41.400 --> 00:40:43.868
How do you feel
about that program?

00:40:43.868 --> 00:40:45.534
If you're like most people,
you hate it.

00:40:45.534 --> 00:40:46.767
You really hate using it.

00:40:46.767 --> 00:40:48.167
You really hate
using these programs,

00:40:48.167 --> 00:40:50.667
and we're talking about
really small details, right?

00:40:50.667 --> 00:40:52.767
We're just talking
about a 1/10 of a second,

00:40:52.767 --> 00:40:55.100
a 1/15 of a second--
not a 1/15 of a second,

00:40:55.100 --> 00:40:56.434
like an 1/8 of a second,

00:40:56.434 --> 00:40:58.167
but it really, really matters.

00:40:58.167 --> 00:41:00.200
And so this is the challenge
as we start to create

00:41:00.200 --> 00:41:01.801
richer JavaScript
applications,

00:41:01.801 --> 00:41:03.968
sure, we can do a lot more
on the client,

00:41:03.968 --> 00:41:06.567
but if you tie up
that main browser thread

00:41:06.567 --> 00:41:08.701
for these small periods
of time,

00:41:08.701 --> 00:41:10.567
in this case
even just 50 milliseconds,

00:41:10.567 --> 00:41:11.834
the difference
between 50 milliseconds

00:41:11.834 --> 00:41:13.934
and 100 milliseconds,
you've started to create

00:41:13.934 --> 00:41:15.968
an interface
that isn't really responsive.

00:41:15.968 --> 00:41:17.567
And once you do that,
people just start to feel

00:41:17.567 --> 00:41:18.868
like, "Hey, this is sluggish.

00:41:18.868 --> 00:41:21.234
This is not really an
application I enjoy using."

00:41:21.234 --> 00:41:22.968
And so it's really important

00:41:22.968 --> 00:41:25.601
that none of
your JavaScript code takes--

00:41:25.601 --> 00:41:28.000
has the ability to execute
for longer--

00:41:28.000 --> 00:41:29.167
I mean, pick your threshold.

00:41:29.167 --> 00:41:31.334
I would say even,
like, 50 milliseconds.

00:41:31.334 --> 00:41:33.033
If it's gonna take longer
than 50 milliseconds,

00:41:33.033 --> 00:41:34.534
you've got to put it
somewhere else

00:41:34.534 --> 00:41:35.934
other than
the main browser thread.

00:41:35.934 --> 00:41:38.200
So where do you put it?

00:41:38.200 --> 00:41:39.667
Well, you put it
in the background.

00:41:39.667 --> 00:41:41.133
Um, why don't we actually
just--

00:41:41.133 --> 00:41:42.467
should we just switch
to that demo?

00:41:42.467 --> 00:41:43.801
Almaer: Yes, the main one?

00:41:43.801 --> 00:41:46.734
Galbraith: Yeah...

00:41:46.734 --> 00:41:49.033
Almaer: How about we switch
to this one?

00:41:49.033 --> 00:41:50.434
Galbraith: Yeah, perfect.
Yup.

00:41:50.434 --> 00:41:54.067
Almaer: So this is a demo
done by the same guy

00:41:54.067 --> 00:41:56.834
that did that cool, fancy
iPhone,

00:41:56.834 --> 00:41:58.267
on-the-fly Canvas thing.

00:41:58.267 --> 00:42:00.767
And what he's doing here--
the Firefox is gonna rotate,

00:42:00.767 --> 00:42:02.534
and that's his visual way
of showing

00:42:02.534 --> 00:42:05.434
that the application
is responsive.

00:42:05.434 --> 00:42:07.868
But what's really happening is,
he's got JavaScript code

00:42:07.868 --> 00:42:09.501
that's gonna simulate
this annealing,

00:42:09.501 --> 00:42:11.334
which is gonna calculate
the shortest path

00:42:11.334 --> 00:42:13.434
between all of these points.

00:42:13.434 --> 00:42:15.400
And we're gonna kick it off here
without workers,

00:42:15.400 --> 00:42:17.834
and you see immediately
the browser froze,

00:42:17.834 --> 00:42:20.334
which we can tell
from the Firefox icon.

00:42:20.334 --> 00:42:22.634
And it's gonna go through
and do this,

00:42:22.634 --> 00:42:25.267
you know, CPU-intensive thing
in these tests,

00:42:25.267 --> 00:42:27.601
and suddenly it's gonna come
back and do the calculation,

00:42:27.601 --> 00:42:28.901
and the browser's back.

00:42:28.901 --> 00:42:31.067
That entire time,
the browser's frozen.

00:42:31.067 --> 00:42:32.267
We do it with workers.

00:42:32.267 --> 00:42:33.934
Firefox is happy.

00:42:33.934 --> 00:42:35.934
We can interact
with the UI.

00:42:35.934 --> 00:42:38.000
And, boom, then it comes in.

00:42:38.000 --> 00:42:39.400
So it makes a huge difference

00:42:39.400 --> 00:42:42.434
because he took that calculation
and he ran it off

00:42:42.434 --> 00:42:44.000
in this Web worker space.

00:42:44.000 --> 00:42:47.767
And so we got fast JavaScript
now, and we've got workers,

00:42:47.767 --> 00:42:49.534
which allow us to run
that fast JavaScript

00:42:49.534 --> 00:42:51.067
off of the main thread

00:42:51.067 --> 00:42:52.167
and give us what
we really want,

00:42:52.167 --> 00:42:53.901
which is the UI
responsiveness.

00:42:53.901 --> 00:42:54.934
Galbraith:
One more quick demo.

00:42:54.934 --> 00:42:56.968
Um, some of you
may be thinking,

00:42:56.968 --> 00:42:59.167
"Okay, you know,
I really don't care

00:42:59.167 --> 00:43:01.100
"about 50 milliseconds,
100 milliseconds.

00:43:01.100 --> 00:43:03.434
I really--I really just don't
think it matters that much."

00:43:03.434 --> 00:43:06.701
One of the other reasons
why it's important

00:43:06.701 --> 00:43:09.567
to make use of workers
is what happens, frankly,

00:43:09.567 --> 00:43:11.934
when you tie up
the UI thread

00:43:11.934 --> 00:43:14.067
for a certain period
of time.

00:43:14.067 --> 00:43:16.868
So this is an example,
and it's a very simple example.

00:43:16.868 --> 00:43:18.400
Let's view the source.

00:43:18.400 --> 00:43:24.234
When the page loads, I go
into this runTest function,

00:43:24.234 --> 00:43:26.634
and this runTest function--
can I bump up the font size?--

00:43:26.634 --> 00:43:29.300
this runTest function,
the first thing it does

00:43:29.300 --> 00:43:32.434
is it sets an interval--
timeout--a timer

00:43:32.434 --> 00:43:35.067
that, every second, just logs
something to the console.

00:43:35.067 --> 00:43:36.701
And then I go inside of
a loop

00:43:36.701 --> 00:43:38.300
inside of this runTest
function,

00:43:38.300 --> 00:43:40.634
and this loop is gonna take
a fairly long time.

00:43:40.634 --> 00:43:42.100
This tests something
really important.

00:43:42.100 --> 00:43:43.601
And it's another aspect
of workers

00:43:43.601 --> 00:43:45.067
I don't think
we mentioned yet.

00:43:45.067 --> 00:43:48.033
And that is
that workers will not--

00:43:48.033 --> 00:43:50.901
the workers will not interrupt
JavaScript code

00:43:50.901 --> 00:43:52.400
to update the UI ever.

00:43:52.400 --> 00:43:54.334
Because what happens is
you start a worker,

00:43:54.334 --> 00:43:56.434
and when the worker finishes,
it has a callback

00:43:56.434 --> 00:43:58.868
that is inside
of your main JavaScript code

00:43:58.868 --> 00:44:01.300
that then has access
to your main application state.

00:44:01.300 --> 00:44:04.667
And that callback will
never preempt--interrupt

00:44:04.667 --> 00:44:07.100
an executing function
that you have in JavaScript,

00:44:07.100 --> 00:44:08.200
you would think.

00:44:08.200 --> 00:44:09.767
But it turns out,

00:44:09.767 --> 00:44:12.133
when you have really
long-running JavaScript code

00:44:12.133 --> 00:44:15.567
like I'm about to show you--

00:44:15.567 --> 00:44:20.067
Where's my little console guy?
Go.

00:44:20.067 --> 00:44:25.133
I saw this guy go here.

00:44:25.133 --> 00:44:26.400
All right,
so I've locked up the browser,

00:44:26.400 --> 00:44:29.033
so I've got this tight loop.

00:44:29.033 --> 00:44:35.267
And, eventually, Safari shows me
this slow script dialogue

00:44:35.267 --> 00:44:36.901
that says, "Hey, listen,
do you want interrupt this?"

00:44:36.901 --> 00:44:38.868
This is an exceedingly poor
user experience

00:44:38.868 --> 00:44:41.267
to have this thing pop up,
as you would imagine.

00:44:41.267 --> 00:44:43.434
But then the other
interesting thing is--

00:44:43.434 --> 00:44:48.133
I haven't given this demo
on a constrained display.

00:44:48.133 --> 00:44:51.133
Where's my fancy expose?
Is that gonna work?

00:44:51.133 --> 00:44:53.167
Let's just have it continue,

00:44:53.167 --> 00:44:55.434
and then I'm gonna have to go
back over to this debugger

00:44:55.434 --> 00:44:57.767
and show you this piece.

00:44:57.767 --> 00:45:02.267
The sort of scary thing is...

00:45:02.267 --> 00:45:04.634
that it interrupted--

00:45:04.634 --> 00:45:06.367
it broke this contract of
interruptions.

00:45:06.367 --> 00:45:10.634
So if you go back
and look at the source code,

00:45:10.634 --> 00:45:13.767
my code says that I have a loop
that interrupts for,

00:45:13.767 --> 00:45:15.367
what is that,
100,000 or a million?

00:45:15.367 --> 00:45:16.968
100,000 iterations.

00:45:16.968 --> 00:45:20.300
And then after the 100,000
iterations, my loop stops,

00:45:20.300 --> 00:45:23.400
and then, in theory,
this timeout should occur.

00:45:23.400 --> 00:45:24.667
But if you look
at the debugger,

00:45:24.667 --> 00:45:27.534
when Safari presented
that dialogue to the user,

00:45:27.534 --> 00:45:30.934
it stopped the execution
of my top-level function

00:45:30.934 --> 00:45:32.801
and started allowing the timer
to occur.

00:45:32.801 --> 00:45:35.300
And then when I hit "Continue,"
it stopped the timer

00:45:35.300 --> 00:45:37.467
and went back
to my top-level function,

00:45:37.467 --> 00:45:38.901
finished that,
and then went back to the timer.

00:45:38.901 --> 00:45:41.000
In other words, it breaks
a fundamental assumption

00:45:41.000 --> 00:45:43.267
that you make about the safety
of your application.

00:45:43.267 --> 00:45:45.701
So in other words, it's not only
a poor user experience

00:45:45.701 --> 00:45:46.901
to do things
on the main UI thread,

00:45:46.901 --> 00:45:48.667
you can actually,
in some browsers,

00:45:48.667 --> 00:45:49.868
break your application.

00:45:49.868 --> 00:45:51.601
So you really just want
to make sure

00:45:51.601 --> 00:45:53.734
that you use workers, I guess,
is the sales pitch there.

00:45:53.734 --> 00:45:54.734
[man asks inaudible question]

00:45:54.734 --> 00:45:55.834
Uh, I doubt it.

00:45:55.834 --> 00:45:57.133
Um, I doubt it.

00:45:57.133 --> 00:45:59.067
I haven't tried Chrome.

00:45:59.067 --> 00:46:02.067
Um...

00:46:02.067 --> 00:46:03.100
Oh, yeah, sorry.

00:46:03.100 --> 00:46:04.901
Almaer:
So how do we use workers?

00:46:04.901 --> 00:46:07.334
Well, as you're
in a code editor,

00:46:07.334 --> 00:46:09.234
you're doing things
like syntax highlighting.

00:46:09.234 --> 00:46:12.734
We also are doing detailed
retail--real time analysis.

00:46:12.734 --> 00:46:14.934
So we've got JSLint,
for example,

00:46:14.934 --> 00:46:16.133
in your JavaScript file

00:46:16.133 --> 00:46:18.067
that's running constantly
and telling you

00:46:18.067 --> 00:46:20.634
if there are any syntax errors
in real time.

00:46:20.634 --> 00:46:23.467
But if that calculation
was running in this way

00:46:23.467 --> 00:46:25.367
on the main thread,
then you'd be typing,

00:46:25.367 --> 00:46:27.367
and there'd be all
of those same pauses.

00:46:27.367 --> 00:46:29.234
So we take all
of these different modules

00:46:29.234 --> 00:46:31.234
that are doing
interesting analysis,

00:46:31.234 --> 00:46:33.601
and we run those
in the workers.

00:46:33.601 --> 00:46:36.267
So that's always happening
in this kind of side world,

00:46:36.267 --> 00:46:38.567
and then, when it's got
an answer, it can tell us

00:46:38.567 --> 00:46:41.634
what's going on in this
real time syntax analysis

00:46:41.634 --> 00:46:42.868
in that example.

00:46:42.868 --> 00:46:44.601
Now to get this working,

00:46:44.601 --> 00:46:48.334
the browsers have
still slightly different APIs

00:46:48.334 --> 00:46:50.167
for the Web worker API.

00:46:50.167 --> 00:46:54.100
So we have a worker facade,
which we're going to split off

00:46:54.100 --> 00:46:56.567
into its own very small,
little open-source project,

00:46:56.567 --> 00:46:59.167
but you can look at it in the
Bespin source code right now.

00:46:59.167 --> 00:47:02.100
Bespin is, of course,
100% open-source.

00:47:02.100 --> 00:47:03.701
And what it does is

00:47:03.701 --> 00:47:07.000
it sits on top of both
the Web worker API

00:47:07.000 --> 00:47:09.667
and on top of Gears,
so if you're in a browser

00:47:09.667 --> 00:47:11.467
that doesn't support
Web workers yet,

00:47:11.467 --> 00:47:14.133
but you do have Gears,
then it'll work.

00:47:14.133 --> 00:47:16.634
And finally it will do
a set interval

00:47:16.634 --> 00:47:18.000
to try and just make it,
you know,

00:47:18.000 --> 00:47:21.567
actually execute the code
automatically for you.

00:47:21.567 --> 00:47:24.667
And it adds in functionality
that browsers don't have,

00:47:24.667 --> 00:47:26.467
so Safari, for example,
doesn't have

00:47:26.467 --> 00:47:29.868
an import scripts method
that you really need

00:47:29.868 --> 00:47:32.067
within workers
because workers are running

00:47:32.067 --> 00:47:33.701
in their separate
little process.

00:47:33.701 --> 00:47:36.634
They don't have access
to the browser's document object

00:47:36.634 --> 00:47:38.200
or any of those things.

00:47:38.200 --> 00:47:41.000
By design. This is great for
security and everything else.

00:47:41.000 --> 00:47:43.400
So part of the API
is you can then import

00:47:43.400 --> 00:47:44.701
these other scripts.

00:47:44.701 --> 00:47:46.367
And we do that ourselves
in Bespin

00:47:46.367 --> 00:47:48.067
where we say,
"Here's a worker.

00:47:48.067 --> 00:47:50.834
"And here's
this nice Bespin Core space

00:47:50.834 --> 00:47:54.100
that you can then go ahead
and do particular things."

00:47:54.100 --> 00:47:55.400
One of the things
that we do here is,

00:47:55.400 --> 00:47:56.801
if you look
at the Bespin code,

00:47:56.801 --> 00:47:58.200
it's an event-based system

00:47:58.200 --> 00:48:00.367
with just publish/subscribe,

00:48:00.367 --> 00:48:02.767
and that is built in
to the workers.

00:48:02.767 --> 00:48:06.367
A big pain that we had was
marshaling over these objects

00:48:06.367 --> 00:48:08.133
to the workers,
having 'em do things,

00:48:08.133 --> 00:48:10.901
and getting it back
into our world.

00:48:10.901 --> 00:48:12.601
So what we did is,
we have a worker

00:48:12.601 --> 00:48:14.634
with its own
little Bespin script

00:48:14.634 --> 00:48:16.934
that allows you
to create a worker and say,

00:48:16.934 --> 00:48:20.567
"I want to subscribe
to the document change event.

00:48:20.567 --> 00:48:22.234
"And I'm gonna do something,
and when I'm done,

00:48:22.234 --> 00:48:24.133
I'm gonna publish
this other event."

00:48:24.133 --> 00:48:26.300
And we marshal it
over this barrier

00:48:26.300 --> 00:48:27.667
automatically.

00:48:27.667 --> 00:48:29.067
And so now we have
this facade.

00:48:29.067 --> 00:48:31.534
It's very trivial for us
to take a piece of code,

00:48:31.534 --> 00:48:33.734
see that it's taken
more than 50 milliseconds,

00:48:33.734 --> 00:48:35.968
and make it run
in a worker instead.

00:48:35.968 --> 00:48:37.834
And it just kind of goes
through the different issues

00:48:37.834 --> 00:48:39.167
that we've had.

00:48:39.167 --> 00:48:41.467
For example, one thing
that we found right away was,

00:48:41.467 --> 00:48:44.200
we started to do all
this real time syntax analysis,

00:48:44.200 --> 00:48:45.767
and the CPU has gone
through the roof

00:48:45.767 --> 00:48:48.334
because we were firing off
all of these workers.

00:48:48.334 --> 00:48:50.400
You couldn't do that before.

00:48:50.400 --> 00:48:51.934
We were stuck
in this single thread.

00:48:51.934 --> 00:48:53.501
Now we can do all this stuff,

00:48:53.501 --> 00:48:55.501
but we're kind of taking over
the user's machine.

00:48:55.501 --> 00:48:57.667
So we've got a little
kind of slicing algorithm

00:48:57.667 --> 00:48:59.467
that's in there now
because we, unfortunately,

00:48:59.467 --> 00:49:01.934
don't have yield and concepts
like that

00:49:01.934 --> 00:49:04.634
in our world that you have
to start thinking about,

00:49:04.634 --> 00:49:06.467
so you're kind of doing
a little bit of work

00:49:06.467 --> 00:49:08.534
and kind of checking in
to make sure

00:49:08.534 --> 00:49:11.100
that you're not doing too much
and firing off

00:49:11.100 --> 00:49:12.834
too many workers at once
and things like that.

00:49:12.834 --> 00:49:14.901
So if you want
to do worker stuff,

00:49:14.901 --> 00:49:17.067
we've gone through some
of that pain,

00:49:17.067 --> 00:49:19.634
and you can just take a look
at our worker facade

00:49:19.634 --> 00:49:22.901
to see what it's like
to actually use these things.

00:49:22.901 --> 00:49:25.167
Galbraith: So we've been talking
about Canvas, fast JavaScript,

00:49:25.167 --> 00:49:27.701
and Web workers as technologies
that really enable us

00:49:27.701 --> 00:49:30.133
to do some amazing things
in the browser.

00:49:30.133 --> 00:49:31.801
The last thing
that has us really excited

00:49:31.801 --> 00:49:34.634
is removing the cliffs
that we've experienced

00:49:34.634 --> 00:49:35.767
as developers.

00:49:35.767 --> 00:49:38.000
Um, for us, the cliffs
that we have--

00:49:38.000 --> 00:49:39.667
there's this notion
that you can develop

00:49:39.667 --> 00:49:41.467
in one environment,
but only get so far

00:49:41.467 --> 00:49:42.834
and have to jump
to another environment

00:49:42.834 --> 00:49:45.834
and sort of hit this wall
where you have to start over

00:49:45.834 --> 00:49:47.601
and learn
a whole new set of tools

00:49:47.601 --> 00:49:49.634
just because you want to do
something subtly different.

00:49:49.634 --> 00:49:51.400
For example, on the iPhone,

00:49:51.400 --> 00:49:53.334
you can get
to a certain distance

00:49:53.334 --> 00:49:55.501
creating a Web application
in mobile Safari,

00:49:55.501 --> 00:49:58.901
but if you want to integrate
into some of the, you know,

00:49:58.901 --> 00:50:02.300
device-specific APIs, you've got
to stop using HTML, CSS,

00:50:02.300 --> 00:50:03.934
and all these other Web
technologies that you know

00:50:03.934 --> 00:50:06.868
and learn Objective-C
and a whole new toolchain

00:50:06.868 --> 00:50:08.300
and so forth.

00:50:08.300 --> 00:50:10.434
And we see that these cliffs
over and over and over again

00:50:10.434 --> 00:50:12.767
that destroy productivity
in the industry,

00:50:12.767 --> 00:50:15.434
and so we're really excited
to see

00:50:15.434 --> 00:50:17.367
how the emergence
of technologies

00:50:17.367 --> 00:50:19.167
that just say, "Hey,
just take the Web stack--

00:50:19.167 --> 00:50:21.734
"the Web platform and use that
wherever you happen to be,

00:50:21.734 --> 00:50:23.601
on the desktop, on mobile,
or whatever."

00:50:23.601 --> 00:50:27.234
Fluid and Mozilla Prism
and Appcelerator Titanium

00:50:27.234 --> 00:50:30.434
are three open-source
environments that do this.

00:50:30.434 --> 00:50:33.234
Adobe AIR is
a great commercial environment

00:50:33.234 --> 00:50:34.734
that also is experimenting here,
that's saying,

00:50:34.734 --> 00:50:36.767
"Hey, listen, how can we take
a Web application

00:50:36.767 --> 00:50:39.100
and run this
in a desktop sandbox?"

00:50:39.100 --> 00:50:40.501
And Gears has explored this.

00:50:40.501 --> 00:50:43.434
And then there's this
application called PhoneGap

00:50:43.434 --> 00:50:46.133
that actually takes
the native iPhone APIs

00:50:46.133 --> 00:50:50.234
and exposes them
through JavaScript objects

00:50:50.234 --> 00:50:52.467
to Web code that lets you take
Web applications

00:50:52.467 --> 00:50:53.734
and actually access APIs

00:50:53.734 --> 00:50:56.300
that are really, formally,
only available

00:50:56.300 --> 00:50:58.634
to native applications.

00:50:58.634 --> 00:51:00.634
And so this is
an emerging trend

00:51:00.634 --> 00:51:02.133
that we're really, really
excited about.

00:51:02.133 --> 00:51:04.667
And we have a desktop version
of Bespin

00:51:04.667 --> 00:51:06.567
in development using some
of these technologies

00:51:06.567 --> 00:51:08.601
that we'll talk about later on
in the year.

00:51:08.601 --> 00:51:11.267
Um, but we're also
really excited about, um,

00:51:11.267 --> 00:51:12.634
the Palm Pre.

00:51:12.634 --> 00:51:14.434
Almaer: Yeah, so they've
taken this to the next level.

00:51:14.434 --> 00:51:18.100
We saw Michael talk about that
yesterday in the keynote.

00:51:18.100 --> 00:51:20.968
And just like--well, everyone's
programming in this Web world.

00:51:20.968 --> 00:51:24.234
How are we gonna compete
with Apple and the like?

00:51:24.234 --> 00:51:26.400
Let's make the platform
just the Web platform.

00:51:26.400 --> 00:51:29.601
And so everything that you're
used to in the HTML5 land,

00:51:29.601 --> 00:51:32.934
and they've got some extra APIs
that they talked about,

00:51:32.934 --> 00:51:35.200
now as Web developers,
we can really just start using

00:51:35.200 --> 00:51:37.100
the same skills
and the same APIs

00:51:37.100 --> 00:51:38.434
to build these apps.

00:51:38.434 --> 00:51:40.434
So this is very exciting
for us at Mozilla

00:51:40.434 --> 00:51:42.801
to see the Web kind of get
past these cliffs

00:51:42.801 --> 00:51:46.133
and let you write
some more APIs.

00:51:46.133 --> 00:51:47.968
Galbraith: So the other place
we're seeing this too is,

00:51:47.968 --> 00:51:50.334
with Jetpack and Chrome
extensions, this idea of using

00:51:50.334 --> 00:51:53.067
the Web as the extension
platform instead of [indistinct]

00:51:53.067 --> 00:51:56.868
or, you know, other proprietary
sandboxes, APIs.

00:51:56.868 --> 00:51:59.067
The Web is winning.

00:51:59.067 --> 00:52:01.501
Almaer: So talk about Jetpack
very quickly.

00:52:01.501 --> 00:52:04.300
In the background here,
you'll see Bespin going off

00:52:04.300 --> 00:52:06.868
and creating a Jetpack.

00:52:06.868 --> 00:52:08.667
And you can see
this video online,

00:52:08.667 --> 00:52:12.467
but what Jetpack is is a way
to extend the browser

00:52:12.467 --> 00:52:14.467
with very,
very simple Web APIs,

00:52:14.467 --> 00:52:17.133
and the Chrome guys have been
talking about their extensions,

00:52:17.133 --> 00:52:19.267
which is very, very similar.

00:52:19.267 --> 00:52:20.634
You don't have to learn
the proprietary world.

00:52:20.634 --> 00:52:22.667
It's just HTML, CSS,
and JavaScript.

00:52:22.667 --> 00:52:24.701
And it was really, really cool
for us to be able

00:52:24.701 --> 00:52:27.067
to take Bespin,
and, in the fly--

00:52:27.067 --> 00:52:28.801
in the browser in Firefox,

00:52:28.801 --> 00:52:31.634
add a little piece
of functionality to the Chrome

00:52:31.634 --> 00:52:33.634
of the browser, like add
in a little status bar

00:52:33.634 --> 00:52:36.133
that tells you
your Gmail notifications

00:52:36.133 --> 00:52:39.267
and, in real time, just say,
"Install it right now."

00:52:39.267 --> 00:52:41.400
A little pop-up says,
"You want to install this guy?"

00:52:41.400 --> 00:52:44.167
You say, "Yes," and you've
just extended your browser.

00:52:44.167 --> 00:52:46.367
You don't have to restart it.
You don't have to do anything.

00:52:46.367 --> 00:52:47.934
So especially
for development now,

00:52:47.934 --> 00:52:49.501
it's getting very,
very easy,

00:52:49.501 --> 00:52:52.200
and hopefully a lot easier
as these guys kind of progress,

00:52:52.200 --> 00:52:54.501
both the Jetpack
and the Chrome Extensions,

00:52:54.501 --> 00:52:57.467
where the browser itself will
just be this Web environment

00:52:57.467 --> 00:52:58.667
for you to extend.

00:52:58.667 --> 00:53:00.033
And it really lowers
the barrier.

00:53:00.033 --> 00:53:01.868
We've already got
8,000 extensions

00:53:01.868 --> 00:53:03.868
or add-ons on Firefox,

00:53:03.868 --> 00:53:06.667
and that's with things being
a lot harder to use

00:53:06.667 --> 00:53:08.634
than what Web people
are used to.

00:53:08.634 --> 00:53:10.968
So we're really jazzed
about extending the browser

00:53:10.968 --> 00:53:12.934
in new directions too.

00:53:12.934 --> 00:53:14.801
Galbraith: So we've kind of
talked about the Web platform

00:53:14.801 --> 00:53:16.234
and the features
of the Web platform

00:53:16.234 --> 00:53:17.367
that we've used in Bespin.

00:53:17.367 --> 00:53:19.067
We just wanted to spend
a couple of minutes

00:53:19.067 --> 00:53:20.834
at the end of the talk
talking about where we're going,

00:53:20.834 --> 00:53:22.701
and then we'll have
a few minutes left over

00:53:22.701 --> 00:53:24.434
for Q&amp;A.

00:53:24.434 --> 00:53:26.367
As we develop Bespin,
we're really interested

00:53:26.367 --> 00:53:28.901
in how we can do something
that doesn't look like this.

00:53:28.901 --> 00:53:32.868
We really want to keep
Bespin accessible

00:53:32.868 --> 00:53:36.767
and friendly and capture
a lot of people's attention

00:53:36.767 --> 00:53:38.300
who traditionally
have eschewed IDEs.

00:53:38.300 --> 00:53:39.968
But at the same time,
it's kind of a challenge

00:53:39.968 --> 00:53:41.601
because it's one thing
to look at this and say,

00:53:41.601 --> 00:53:45.868
"Yeah, we don't want
this big, bloated interface."

00:53:45.868 --> 00:53:47.501
It's another to say,
"Well, wait,

00:53:47.501 --> 00:53:49.067
"actually all of these
are somewhat useful,

00:53:49.067 --> 00:53:51.334
so how do you start
picking them out?"

00:53:51.334 --> 00:53:54.367
So we're experimenting
with interface techniques

00:53:54.367 --> 00:53:56.601
that will enable us to let
you spend most of your time

00:53:56.601 --> 00:53:58.934
looking at all of your code

00:53:58.934 --> 00:54:00.400
and letting you access
other features

00:54:00.400 --> 00:54:02.734
without having to have docking
panels and things like that.

00:54:02.734 --> 00:54:04.334
We don't know if they're
a good idea or not, frankly,

00:54:04.334 --> 00:54:06.167
but we're playing around
in that direction.

00:54:06.167 --> 00:54:10.167
Almaer: And then fits in
with the Wave thing

00:54:10.167 --> 00:54:12.000
that's going on
and the playback APIs

00:54:12.000 --> 00:54:13.000
and things like that.

00:54:13.000 --> 00:54:15.334
We want to integrate
with that world

00:54:15.334 --> 00:54:16.667
where we, from the beginning,

00:54:16.667 --> 00:54:18.334
made Bespin
this very social tool.

00:54:18.334 --> 00:54:20.033
So you can collaborate
and things like that,

00:54:20.033 --> 00:54:21.667
but we want to go
further than that.

00:54:21.667 --> 00:54:23.968
So what's going on here
is you have

00:54:23.968 --> 00:54:27.033
a social bar kind of
on the right side

00:54:27.033 --> 00:54:28.434
that has your different
coders

00:54:28.434 --> 00:54:31.033
in your project network,
whatever,

00:54:31.033 --> 00:54:32.734
and there's
this little chat thing.

00:54:32.734 --> 00:54:34.033
And it's not just like, okay,

00:54:34.033 --> 00:54:36.400
here's a IM chat that's over
on the side,

00:54:36.400 --> 00:54:38.501
it integrates
with your coding experience.

00:54:38.501 --> 00:54:40.567
So it's associated
with the file

00:54:40.567 --> 00:54:42.100
that you're working on.

00:54:42.100 --> 00:54:44.934
You can also maybe select
a piece of the code

00:54:44.934 --> 00:54:46.100
and see what was said

00:54:46.100 --> 00:54:47.567
about that particular code,

00:54:47.567 --> 00:54:49.701
who wrote that,
what were people discussing.

00:54:49.701 --> 00:54:51.767
So we want to tie these things
into the code

00:54:51.767 --> 00:54:53.834
in a better way
than just having comments

00:54:53.834 --> 00:54:56.067
that people don't like
to update.

00:54:56.067 --> 00:54:57.133
So we've got that,

00:54:57.133 --> 00:54:59.067
and then we have
the next piece,

00:54:59.067 --> 00:55:02.734
which is the timeline view,
where you can just real time see

00:55:02.734 --> 00:55:04.801
all of the commits
that have happened,

00:55:04.801 --> 00:55:06.968
different tags
for that particular version,

00:55:06.968 --> 00:55:08.267
and you can, on the fly,

00:55:08.267 --> 00:55:10.567
go back and just see
what's happened.

00:55:10.567 --> 00:55:14.067
So the file will change
as you go back in time.

00:55:14.067 --> 00:55:16.100
So you can really kind of see
what's going on

00:55:16.100 --> 00:55:18.501
in that particular piece
of code

00:55:18.501 --> 00:55:20.067
and obviously make it
very social

00:55:20.067 --> 00:55:21.601
with your various friends.

00:55:21.601 --> 00:55:23.968
This is Brendan Eich,
the inventor of JavaScript.

00:55:23.968 --> 00:55:25.934
We have a feature going
in Bespin

00:55:25.934 --> 00:55:27.434
where you can follow people.

00:55:27.434 --> 00:55:30.167
So I could follow Brendan
while he hacks on code.

00:55:30.167 --> 00:55:32.033
Luckily, he hacks
on all open-source stuff,

00:55:32.033 --> 00:55:34.767
so there's no issues
with doing stuff

00:55:34.767 --> 00:55:36.267
within a company
or what-have-you.

00:55:36.267 --> 00:55:38.167
But wouldn't it be cool
to see what it's like

00:55:38.167 --> 00:55:41.601
being Brendan and see what
it's like with him writing code.

00:55:41.601 --> 00:55:43.133
And we want to kind of open up
this model

00:55:43.133 --> 00:55:46.434
so we can start following people
and then even play back

00:55:46.434 --> 00:55:48.234
what they were doing.

00:55:48.234 --> 00:55:51.501
So you're in with a teammate--
a team member,

00:55:51.501 --> 00:55:54.133
you had to go to the doctor's,
you come back,

00:55:54.133 --> 00:55:56.667
it'd be pretty cool to see
what was the actual code

00:55:56.667 --> 00:55:59.667
that they went ahead
and did and go through,

00:55:59.667 --> 00:56:01.400
change the playback metaphor,

00:56:01.400 --> 00:56:04.400
and then real time
just kind of see

00:56:04.400 --> 00:56:06.133
exactly what they were typing
at that time.

00:56:06.133 --> 00:56:08.567
So these are some of the things
that tie in with Wave

00:56:08.567 --> 00:56:12.701
and social and real time
that we're playing around with.

00:56:12.701 --> 00:56:14.734
Galbraith: We think that having
an environment like this

00:56:14.734 --> 00:56:17.167
sort of can unlock open-source
in a way

00:56:17.167 --> 00:56:18.167
that we haven't seen before.

00:56:18.167 --> 00:56:20.000
We think open-source
is really just--

00:56:20.000 --> 00:56:21.567
what we've seen
is the tip of the iceberg.

00:56:21.567 --> 00:56:23.534
And that if we had
an environment

00:56:23.534 --> 00:56:25.434
where people could go in,
and, instead of having

00:56:25.434 --> 00:56:27.234
to download a dev tool
and figure out

00:56:27.234 --> 00:56:28.968
where code is and figure out
how to submit code

00:56:28.968 --> 00:56:30.968
back to the project,
they just hit a Web page,

00:56:30.968 --> 00:56:32.100
boom, you're in the code,

00:56:32.100 --> 00:56:34.167
you can immediately start
editing code,

00:56:34.167 --> 00:56:36.501
click a button,
submit a patch to a patch queue,

00:56:36.501 --> 00:56:37.868
and have people review it.

00:56:37.868 --> 00:56:40.067
Or you can actually follow
the project leaders around

00:56:40.067 --> 00:56:41.100
and watch what they code.

00:56:41.100 --> 00:56:42.367
Or you can actually say,
"Okay, show me

00:56:42.367 --> 00:56:43.834
what they coded yesterday."

00:56:43.834 --> 00:56:45.601
When you come back to your desk
and you've seen

00:56:45.601 --> 00:56:47.767
that the code base is changed
because a bunch of patches

00:56:47.767 --> 00:56:49.601
have been committed and you
can actually play those back

00:56:49.601 --> 00:56:51.501
and see them instead of parsing
DIV files,

00:56:51.501 --> 00:56:54.033
we think that will revolutionize
open-source

00:56:54.033 --> 00:56:55.968
and help take it
to the next level.

00:56:55.968 --> 00:56:57.701
And so that's where we're headed
with Bespin.

00:56:57.701 --> 00:57:00.901
Um, and, in general,
we're really excited to see

00:57:00.901 --> 00:57:04.167
the Web kind of go
from the AJAX space,

00:57:04.167 --> 00:57:07.067
which was, "Can we actually do
cool applications

00:57:07.067 --> 00:57:08.267
with a Web platform?"

00:57:08.267 --> 00:57:10.701
to what we're seeing emerge,
which is,

00:57:10.701 --> 00:57:13.067
we can create
the world's best applications

00:57:13.067 --> 00:57:16.100
on this platform,
not just--not just flight,

00:57:16.100 --> 00:57:17.968
but flight with style,
I guess you'd say.

00:57:17.968 --> 00:57:19.934
Anyway, thanks very much
for coming to the talk.

00:57:19.934 --> 00:57:21.434
We really appreciate it.
Almaer: Thank you.

00:57:21.434 --> 00:57:25.501
[applause]

00:57:27.467 --> 00:57:29.934
Galbraith: So we have, like,
a minute and a half

00:57:29.934 --> 00:57:30.968
for questions, I guess.

00:57:30.968 --> 00:57:32.567
Should we just, like,
take a question?

00:57:32.567 --> 00:57:34.234
Yeah, okay,
so if you go to the microphone

00:57:34.234 --> 00:57:36.567
to ask a question,
there's one right behind you.

00:57:36.567 --> 00:57:38.601
Um...
Yeah.

00:57:38.601 --> 00:57:41.100
man: So how did you guys
implement mouse detection

00:57:41.100 --> 00:57:42.601
and mouse events for--

00:57:42.601 --> 00:57:44.000
Galbraith: Using the DOM.

00:57:44.000 --> 00:57:46.801
So we have a top-level DOM
listener that's registered

00:57:46.801 --> 00:57:49.100
on the entire
visible Canvas area.

00:57:49.100 --> 00:57:51.701
And when you click on that area,
then we translate

00:57:51.701 --> 00:57:54.167
in our JavaScript code
what that means for us.

00:57:54.167 --> 00:57:57.567
So we figure out
what line you were over...

00:57:57.567 --> 00:57:59.434
man: So then you're using
the worker essentially

00:57:59.434 --> 00:58:01.267
to do the calculation,
or are you doing it

00:58:01.267 --> 00:58:02.901
on the main thread itself?

00:58:02.901 --> 00:58:04.868
Galbraith: So, stuff like that,
we do on the main thread.

00:58:04.868 --> 00:58:07.334
So, workers--you don't want
to have your entire application

00:58:07.334 --> 00:58:09.834
in workers because the challenge
of marshaling

00:58:09.834 --> 00:58:12.300
and demarshaling state
would be enormous.

00:58:12.300 --> 00:58:14.901
You want to isolate
that functionality

00:58:14.901 --> 00:58:16.667
that has the potential to be
an interface bottleneck.

00:58:16.667 --> 00:58:19.400
50 milliseconds, it turns out,
is a really long time

00:58:19.400 --> 00:58:20.667
in terms of computation.

00:58:20.667 --> 00:58:23.968
And so, yeah, stuff like taking
a raw x,y

00:58:23.968 --> 00:58:25.467
and figuring out what line
that corresponds to,

00:58:25.467 --> 00:58:27.601
things like that, that's
all done on the main thread.

00:58:27.601 --> 00:58:31.000
man: Okay, and only HTML, CSS,
and JavaScript right now?

00:58:31.000 --> 00:58:33.000
Or any other languages
that you're supporting

00:58:33.000 --> 00:58:34.167
for syntax highlighting?

00:58:34.167 --> 00:58:35.334
Galbraith: Oh, as far
as syntax highlighting,

00:58:35.334 --> 00:58:36.634
we actually have more
than that right now.

00:58:36.634 --> 00:58:39.234
Almaer: Yes, some people
have contributed, you know,

00:58:39.234 --> 00:58:44.334
Python, PHP, Ruby,
a whole slew.

00:58:44.334 --> 00:58:45.634
It's very easy to add them.

00:58:45.634 --> 00:58:47.534
The goal is we want
to have

00:58:47.534 --> 00:58:50.567
a syntax highlighter
plug-in system that understands

00:58:50.567 --> 00:58:54.100
eMac style, vi style,
TextMate bundles,

00:58:54.100 --> 00:58:58.033
so we don't have to reinvent
yet another wheel.

00:58:58.033 --> 00:58:59.334
man: Cool.
See you at Bespin. Thanks.

00:58:59.334 --> 00:59:00.434
Galbraith: Thank you.

00:59:00.434 --> 00:59:02.400
man: Hi, there.
[clears throat]

00:59:02.400 --> 00:59:06.100
I'm very interested
in the collaborative aspects

00:59:06.100 --> 00:59:09.200
of the tool,
and I was just wondering,

00:59:09.200 --> 00:59:10.901
what are your capabilities

00:59:10.901 --> 00:59:12.934
in terms of, you know,
sharing code

00:59:12.934 --> 00:59:15.067
and searching for code
that other people have done

00:59:15.067 --> 00:59:19.901
and so on, you know, like
functions and all that stuff?

00:59:19.901 --> 00:59:22.300
Galbraith; So right now,
our model for collaboration

00:59:22.300 --> 00:59:25.367
is really focused on helping you
have a social network

00:59:25.367 --> 00:59:28.000
of people that you're interested
in coding with.

00:59:28.000 --> 00:59:30.133
In a company,
that would be your team.

00:59:30.133 --> 00:59:31.701
In the open-source world,
that would be the contributors

00:59:31.701 --> 00:59:33.834
to a project,
and it can also be people

00:59:33.834 --> 00:59:35.133
that you just like to follow.

00:59:35.133 --> 00:59:37.033
And the ability
to watch them code,

00:59:37.033 --> 00:59:38.801
the ability to code together
on a file,

00:59:38.801 --> 00:59:41.534
the ability to do traditional
VCS things like,

00:59:41.534 --> 00:59:43.667
"Show me who's done what
in a file,"

00:59:43.667 --> 00:59:45.634
that's really
all we focused on.

00:59:45.634 --> 00:59:46.968
If I've understood
your question,

00:59:46.968 --> 00:59:48.400
then, like, finding code
that people have written

00:59:48.400 --> 00:59:50.434
that does X
or stuff like that,

00:59:50.434 --> 00:59:52.400
we haven't thought too much
about that.

00:59:52.400 --> 00:59:54.133
We'd love to have you come
join us on the project

00:59:54.133 --> 00:59:56.501
and help us think
through those issues.

00:59:56.501 --> 00:59:58.167
Almaer: Yeah, so we're excited
the fact

00:59:58.167 --> 01:00:00.133
that all of this code
is in the Cloud.

01:00:00.133 --> 01:00:02.567
And so we can have intelligent
agents watching the code.

01:00:02.567 --> 01:00:05.133
So, for example, we want--
you're in a project,

01:00:05.133 --> 01:00:07.133
and you say you want
to target IE6,

01:00:07.133 --> 01:00:10.000
and I'm using the prototype
library and things like that,

01:00:10.000 --> 01:00:12.067
and, on the fly,
as you write some code,

01:00:12.067 --> 01:00:14.133
it can say, "Hey, there's a
known bug where,

01:00:14.133 --> 01:00:15.567
"if you do this, this,
and this,

01:00:15.567 --> 01:00:17.934
and you're targeting these
browsers, this is what happens."

01:00:17.934 --> 01:00:20.300
So we want to add stuff
on the server

01:00:20.300 --> 01:00:22.133
that's just kind of
constantly watching the code

01:00:22.133 --> 01:00:24.133
and would allow you to search
across projects

01:00:24.133 --> 01:00:25.300
and do stuff like that.

01:00:25.300 --> 01:00:26.400
Galbraith:
We're out of time,

01:00:26.400 --> 01:00:27.400
so we'd love to talk
to you after.

01:00:27.400 --> 01:00:29.634
Thank you.

