WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.120
[MUSIC PLAYING]

00:00:02.120 --> 00:00:03.890
- So, your shiny new
app is ready to be

00:00:03.890 --> 00:00:05.029
submitted to the App Store.

00:00:05.029 --> 00:00:07.070
You've gone through the
long and tiresome process

00:00:07.070 --> 00:00:10.520
of feature definition, design,
implementation, and of course,

00:00:10.520 --> 00:00:13.220
testing, Because you know
your potential users deserve

00:00:13.220 --> 00:00:15.500
the best possible
experience using your app.

00:00:15.500 --> 00:00:17.210
Yep, you're good to go.

00:00:17.210 --> 00:00:19.001
Or are you?

00:00:19.001 --> 00:00:21.250
There's one type of test
that is too often overlooked,

00:00:21.250 --> 00:00:23.620
but shouldn't be, especially
if you're aiming at users

00:00:23.620 --> 00:00:24.696
from developing markets.

00:00:24.696 --> 00:00:26.320
When you're working
on your app, you're

00:00:26.320 --> 00:00:28.427
probably using your
home or office Wi-Fi.

00:00:28.427 --> 00:00:30.760
Or, since you're familiar
with the importance of testing

00:00:30.760 --> 00:00:32.512
your app in various
network conditions,

00:00:32.512 --> 00:00:34.720
you're also testing it with
your carrier's high speed

00:00:34.720 --> 00:00:36.160
mobile network.

00:00:36.160 --> 00:00:37.989
Either way, at least
some of your users

00:00:37.989 --> 00:00:40.030
are bound to be using your
app in a significantly

00:00:40.030 --> 00:00:41.751
worse network environment.

00:00:41.751 --> 00:00:43.750
The last thing you want
is for one of your users

00:00:43.750 --> 00:00:46.870
to be the first to test your
app in a poor network condition.

00:00:46.870 --> 00:00:48.520
If a user using your
app will attempt

00:00:48.520 --> 00:00:50.560
to use it in a low
connectivity environment,

00:00:50.560 --> 00:00:51.820
bad things may happen.

00:00:51.820 --> 00:00:53.680
What can possibly
go wrong, you ask?

00:00:53.680 --> 00:00:55.600
Well, your requests
may time out.

00:00:55.600 --> 00:00:56.920
Responses may get lost.

00:00:56.920 --> 00:00:58.510
You may encounter
race conditions

00:00:58.510 --> 00:01:00.040
you've never considered before.

00:01:00.040 --> 00:01:01.330
Your UI may get stuck.

00:01:01.330 --> 00:01:04.030
And your user may be not so
forgiving for the bad user

00:01:04.030 --> 00:01:06.417
experience your app provides.

00:01:06.417 --> 00:01:08.250
Since we all want our
users to have the best

00:01:08.250 --> 00:01:10.140
possible experience
using our apps,

00:01:10.140 --> 00:01:12.180
it's worthwhile to put
effort into simulating

00:01:12.180 --> 00:01:14.070
these difficult situations
to make sure we're

00:01:14.070 --> 00:01:15.780
doing the best we can.

00:01:15.780 --> 00:01:17.670
Once we put ourselves
in our users' shoes,

00:01:17.670 --> 00:01:20.430
we can take actions to
improve these use cases.

00:01:20.430 --> 00:01:23.490
Apple offers a great tool for
testing apps in varying network

00:01:23.490 --> 00:01:24.210
conditions.

00:01:24.210 --> 00:01:25.932
It's called Network
Link Conditioner,

00:01:25.932 --> 00:01:28.140
and if it's not part of your
regular testing routine,

00:01:28.140 --> 00:01:30.060
it definitely should be.

00:01:30.060 --> 00:01:32.220
You can use this tool to
simulate various network

00:01:32.220 --> 00:01:34.080
conditions in a simple way.

00:01:34.080 --> 00:01:36.930
On your iOS device, go
to Settings, Developer,

00:01:36.930 --> 00:01:39.420
and press the Status Row on
the Network Link Conditioner

00:01:39.420 --> 00:01:40.380
section.

00:01:40.380 --> 00:01:42.857
There, you'll see a list of
all the existing presets.

00:01:42.857 --> 00:01:44.940
You can see a detailed
description of each of them

00:01:44.940 --> 00:01:46.697
by selecting the relevant row.

00:01:46.697 --> 00:01:48.780
If you don't find exactly
what you're looking for,

00:01:48.780 --> 00:01:51.090
or you have a specific
scenario you'd like to test,

00:01:51.090 --> 00:01:52.560
you can set up a
new configuration

00:01:52.560 --> 00:01:55.202
with specific values
for each of the fields.

00:01:55.202 --> 00:01:56.910
Once you've selected
the relevant option,

00:01:56.910 --> 00:01:59.700
don't forget to turn on the
Enable switch on the top row

00:01:59.700 --> 00:02:01.560
to really simulate
that condition.

00:02:01.560 --> 00:02:04.260
Otherwise things may look
like they're running smoothly

00:02:04.260 --> 00:02:05.940
when they're really not.

00:02:05.940 --> 00:02:07.530
Also very important,
don't forget

00:02:07.530 --> 00:02:10.307
to turn off this option
when you're done testing.

00:02:10.307 --> 00:02:12.140
Let's look at some
examples for major issues

00:02:12.140 --> 00:02:14.810
that can be prevented by testing
your app in non-ideal network

00:02:14.810 --> 00:02:15.904
conditions.

00:02:15.904 --> 00:02:17.570
Let's say your app
is a game that can be

00:02:17.570 --> 00:02:19.200
played on various platforms--

00:02:19.200 --> 00:02:20.960
iOS, Android, and web.

00:02:20.960 --> 00:02:22.930
And your app loads the
user updated game score

00:02:22.930 --> 00:02:24.430
from the server in
every app launch,

00:02:24.430 --> 00:02:26.540
since it may have changed
since the user last

00:02:26.540 --> 00:02:28.577
played the app on this device.

00:02:28.577 --> 00:02:30.410
Since it's a very small
piece of information

00:02:30.410 --> 00:02:32.910
and since it's always fetched
from the server on app launch,

00:02:32.910 --> 00:02:34.368
without thinking
too much about it,

00:02:34.368 --> 00:02:35.750
you made this fetch synchronous.

00:02:35.750 --> 00:02:38.645
Which, of course, is
something you should never do.

00:02:38.645 --> 00:02:40.520
Everything looks great
when you test your app

00:02:40.520 --> 00:02:43.020
on your Wi-Fi or even your
high speed mobile connection.

00:02:43.020 --> 00:02:45.520
But when you test it on a very
poor connection using Network

00:02:45.520 --> 00:02:47.390
Link Conditioner, you
notice that the UI

00:02:47.390 --> 00:02:49.030
becomes unresponsive
from the time

00:02:49.030 --> 00:02:51.440
the request for the updated
score is sent to the server

00:02:51.440 --> 00:02:53.545
until the response is
returned to the app.

00:02:53.545 --> 00:02:54.920
You didn't notice
this delay when

00:02:54.920 --> 00:02:57.003
you were using your high
speed network connection.

00:02:57.003 --> 00:02:59.420
But now that it's a
few seconds or worse,

00:02:59.420 --> 00:03:01.126
it's hard not to notice it.

00:03:01.126 --> 00:03:02.750
Good thing you tested
your app properly

00:03:02.750 --> 00:03:04.820
instead of having one of
your unfortunate users

00:03:04.820 --> 00:03:06.735
encounter this bug.

00:03:06.735 --> 00:03:08.360
So you change your
score fetching logic

00:03:08.360 --> 00:03:11.394
to work asynchronously, as it
should, and run the test again.

00:03:11.394 --> 00:03:13.310
It takes the score some
time to be displayed--

00:03:13.310 --> 00:03:15.851
the same few seconds delay you
saw when the display got stuck

00:03:15.851 --> 00:03:16.430
before--

00:03:16.430 --> 00:03:19.400
but the user can use the
app freely during this time.

00:03:19.400 --> 00:03:21.620
You move on to checking
the user profile screen.

00:03:21.620 --> 00:03:24.500
But unfortunately you
see a blank screen.

00:03:24.500 --> 00:03:26.760
You wait a little for the
screen's display to update,

00:03:26.760 --> 00:03:28.310
but nothing changes.

00:03:28.310 --> 00:03:29.960
It turns out that
the request timed out

00:03:29.960 --> 00:03:32.030
and there is no retry
mechanism or an indication

00:03:32.030 --> 00:03:33.770
to the users, who
may find themselves

00:03:33.770 --> 00:03:36.560
staring at a blank screen
without knowing why.

00:03:36.560 --> 00:03:38.540
By supporting some kind
of retry mechanism,

00:03:38.540 --> 00:03:40.550
you can make sure
that the page loads

00:03:40.550 --> 00:03:43.430
in the event that the user is in
an area with poor connectivity,

00:03:43.430 --> 00:03:46.130
or at least display an
appropriate error message.

00:03:46.130 --> 00:03:48.290
These were just two
relatively simple examples

00:03:48.290 --> 00:03:51.750
of things that can go wrong when
using poor network conditions.

00:03:51.750 --> 00:03:53.600
Notice that the same
problematic scenarios

00:03:53.600 --> 00:03:56.540
can be encountered when your
server is heavily overloaded.

00:03:56.540 --> 00:03:58.427
If your timeout is
set to 30 seconds

00:03:58.427 --> 00:04:00.260
and the server only
starts handling requests

00:04:00.260 --> 00:04:03.120
after 40 seconds, the
same issues will occur.

00:04:03.120 --> 00:04:05.120
So it's definitely
worth testing.

00:04:05.120 --> 00:04:06.800
I hope you found this
short tip helpful

00:04:06.800 --> 00:04:08.720
and will include it in
your testing routine.

00:04:08.720 --> 00:04:12.200
I'm Rony Rozen, for Route
85, thanks for watching.

00:04:12.200 --> 00:04:15.250
[MUSIC PLAYING]

