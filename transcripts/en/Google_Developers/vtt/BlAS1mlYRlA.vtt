WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:02.730
[APPLAUSE]

00:00:03.640 --> 00:00:05.370
DANIEL WHITE: So hi, I'm Dan.

00:00:05.370 --> 00:00:08.130
I work on AdSense in London.

00:00:08.130 --> 00:00:11.400
And really, my story today is
about how we just relaunched

00:00:11.400 --> 00:00:14.670
AdSense in Material Design.

00:00:14.670 --> 00:00:18.210
So Google itself, we make a
lot of ad-focused products.

00:00:18.210 --> 00:00:20.600
You probably don't realize
this unless your living--

00:00:20.600 --> 00:00:23.380
in some way-- depends on ads.

00:00:23.380 --> 00:00:26.050
But actually, like a lot
of ads-focused products.

00:00:26.050 --> 00:00:28.960
And we put out some
logos earlier of products

00:00:28.960 --> 00:00:31.960
that you start, but that's not
the whole story within ads,

00:00:31.960 --> 00:00:32.460
right?

00:00:32.460 --> 00:00:34.260
I just found like a
random set of icons

00:00:34.260 --> 00:00:36.630
and pulled out the ones
that I knew were from ads.

00:00:36.630 --> 00:00:39.000
And I bet like none of
you can name more than two

00:00:39.000 --> 00:00:39.940
of these, right?

00:00:39.940 --> 00:00:42.586
I would struggle.

00:00:42.586 --> 00:00:44.210
but this is important
to us, obviously,

00:00:44.210 --> 00:00:46.793
because this is where the bulk
of Google's revenue comes from.

00:00:50.230 --> 00:00:55.070
So AdSense itself is the yellow
and blue diagonal lines there,

00:00:55.070 --> 00:00:55.600
right?

00:00:55.600 --> 00:00:57.400
That's us in London.

00:00:57.400 --> 00:01:00.500
And this is one of Google's
oldest ads products.

00:01:00.500 --> 00:01:02.750
I think it was the second
ads product to Google

00:01:02.750 --> 00:01:03.620
after AdWords.

00:01:03.620 --> 00:01:05.110
So AdWords is where
the money comes

00:01:05.110 --> 00:01:09.730
in, AdSense is where we pay
people to show those adverts.

00:01:09.730 --> 00:01:12.020
We've been going for 13 years.

00:01:12.020 --> 00:01:16.510
And for the last seven or eight
years, we've been in London.

00:01:16.510 --> 00:01:20.030
In 2015, AdSense itself
paid out $10 billion

00:01:20.030 --> 00:01:22.980
to AdSense publishers,
so this is all websites.

00:01:22.980 --> 00:01:26.210
People are running websites,
small and medium businesses.

00:01:26.210 --> 00:01:30.392
And they depend for their
income on AdSense in some way.

00:01:30.392 --> 00:01:31.350
But yeah, that's great.

00:01:31.350 --> 00:01:32.225
Like why do you care?

00:01:32.225 --> 00:01:34.430
You're at the Dart Dev
Summit, you're not here

00:01:34.430 --> 00:01:36.530
to hear about advertising.

00:01:36.530 --> 00:01:38.670
The good news is we just
launched a material design

00:01:38.670 --> 00:01:41.770
UI written in Dart
and Angular 2,

00:01:41.770 --> 00:01:44.920
and that's what I'm going
to talk about today.

00:01:44.920 --> 00:01:48.190
So this is a screenshot
of what we launched,

00:01:48.190 --> 00:01:51.530
but I'll do a quick demo.

00:01:51.530 --> 00:01:53.030
So what you're
seeing here is the UI

00:01:53.030 --> 00:01:57.410
that we've replaced over
the course of the last year.

00:01:57.410 --> 00:02:03.777
And so if I press the Try
The New AdSense button,

00:02:03.777 --> 00:02:05.360
what you saw there
was a splash screen

00:02:05.360 --> 00:02:06.443
that I stole from AdWords.

00:02:09.250 --> 00:02:11.175
And so what you're
now seeing is a UI.

00:02:11.175 --> 00:02:12.800
What you were seeing
before was written

00:02:12.800 --> 00:02:16.210
in GWT, what you're seeing now
is written in Dart and Angular

00:02:16.210 --> 00:02:19.880
2.0 completely,
everything on screen.

00:02:19.880 --> 00:02:22.350
And a lot of this is using
the material design components

00:02:22.350 --> 00:02:23.740
that Ted just talked about.

00:02:26.580 --> 00:02:32.260
And so what we've got is
like a natural step change

00:02:32.260 --> 00:02:35.282
in UX quality on AdSense.

00:02:35.282 --> 00:02:36.740
One of those quotes
that Ted talked

00:02:36.740 --> 00:02:38.959
about said that we were
infinitely better because

00:02:38.959 --> 00:02:40.250
of all these lovely animations.

00:02:40.250 --> 00:02:42.850
And you can see this big
blue bubble, as we call it,

00:02:42.850 --> 00:02:45.710
that is part of the
onboarding flow.

00:02:45.710 --> 00:02:48.830
But just moving
around UI, you can

00:02:48.830 --> 00:02:50.320
see there's lots
of nice animations

00:02:50.320 --> 00:02:51.736
when you're dragging
and dropping.

00:02:53.787 --> 00:02:56.120
And this is already made
possible by the material design

00:02:56.120 --> 00:02:58.600
components that Ted
was just talking about.

00:02:58.600 --> 00:03:00.016
We'll come back
to this in second.

00:03:04.010 --> 00:03:07.060
So in AdSense, we've been
experimenting with Dart

00:03:07.060 --> 00:03:08.490
for about 2 and 1/2 years.

00:03:08.490 --> 00:03:11.500
It started out as a very
small pilot project, just

00:03:11.500 --> 00:03:13.340
me and a few others.

00:03:13.340 --> 00:03:15.984
And over the last
year, about a year ago,

00:03:15.984 --> 00:03:17.400
we started designing
what you just

00:03:17.400 --> 00:03:19.900
saw, the material design UI.

00:03:19.900 --> 00:03:25.180
And then we started to implement
it in January and February.

00:03:25.180 --> 00:03:28.170
So the story here is about how
much productivity has improved.

00:03:28.170 --> 00:03:31.249
We were able to do all
of what you just saw

00:03:31.249 --> 00:03:32.540
within eight months, basically.

00:03:35.240 --> 00:03:37.250
So we did a pilot
project a few years ago.

00:03:37.250 --> 00:03:39.570
And then last summer,
we asked the teams

00:03:39.570 --> 00:03:41.160
to start using Dart
within AdSense.

00:03:41.160 --> 00:03:43.900
And actually, when we presented
the results from our pilot

00:03:43.900 --> 00:03:47.400
project and showed the
productivity improvements

00:03:47.400 --> 00:03:50.490
that we were able to see, the
Edit/Refresh cycles, the UI

00:03:50.490 --> 00:03:52.320
changes that we're
able to make, we

00:03:52.320 --> 00:03:55.210
struggled to cope with demand
from other teams in AdSense.

00:03:55.210 --> 00:03:57.780
So other tech leads
in London came to me,

00:03:57.780 --> 00:03:59.540
asking to write their
features in Dart.

00:03:59.540 --> 00:04:03.220
And my small team, in
building this pilot project,

00:04:03.220 --> 00:04:05.850
we've really struggled to
cope with this like scaling

00:04:05.850 --> 00:04:07.660
to so many people at once.

00:04:07.660 --> 00:04:10.450
We discovered a lot of bugs
in the things that we built.

00:04:10.450 --> 00:04:14.970
But it was like a
good problem to have.

00:04:14.970 --> 00:04:19.516
So in London, we have about
100 people working on AdSense.

00:04:19.516 --> 00:04:20.890
Over the course
of the last year,

00:04:20.890 --> 00:04:22.598
pretty much everything
that we're writing

00:04:22.598 --> 00:04:24.560
is now in Dart, like
every new feature.

00:04:24.560 --> 00:04:28.200
And so on any given week, I
think about 25 people in London

00:04:28.200 --> 00:04:30.471
are writing and committing
Dart, using all the stuff

00:04:30.471 --> 00:04:31.970
that we've been
talking about today.

00:04:34.740 --> 00:04:37.630
The 2x improvement was
mentioned during the keynote.

00:04:37.630 --> 00:04:41.720
But the tech leads in London
are also estimating now

00:04:41.720 --> 00:04:45.380
that the products of their
shipping using this text stack,

00:04:45.380 --> 00:04:48.200
we're doing this two times
more quickly than we're able to

00:04:48.200 --> 00:04:51.077
with our old text stack.

00:04:51.077 --> 00:04:53.410
And really, I've seen that
myself with a material design

00:04:53.410 --> 00:04:53.970
launch.

00:04:53.970 --> 00:04:55.678
It's just infeasible
to have done what we

00:04:55.678 --> 00:04:58.520
did before we were using Dart.

00:04:58.520 --> 00:04:59.970
Why is that?

00:04:59.970 --> 00:05:03.380
Again, so just recapping
stuff from the keynote.

00:05:03.380 --> 00:05:05.740
Dart itself is very
terse, it's concise.

00:05:05.740 --> 00:05:09.460
So you get to write more code.

00:05:09.460 --> 00:05:12.860
It takes less time to write
something in Dart than it would

00:05:12.860 --> 00:05:14.230
in the old way of doing things.

00:05:14.230 --> 00:05:17.530
And we'll talk about what
the old way was soon.

00:05:17.530 --> 00:05:21.560
The Edit/Refresh cycle is
much, much quicker for us.

00:05:21.560 --> 00:05:23.060
And really, this
was the killer when

00:05:23.060 --> 00:05:24.730
I was doing demos of
the pilot project.

00:05:24.730 --> 00:05:28.199
And the proof of concept
was look, I can save a file.

00:05:28.199 --> 00:05:30.490
And then it's there in the
browser a few seconds later.

00:05:30.490 --> 00:05:35.480
And this was really the
killer feature for us.

00:05:35.480 --> 00:05:37.699
And also, this moved
to Dart, because we

00:05:37.699 --> 00:05:39.740
were moving to a completely
different text stack.

00:05:39.740 --> 00:05:42.440
This has given us a chance
to re-imagine the application

00:05:42.440 --> 00:05:44.270
architecture,
which is also meant

00:05:44.270 --> 00:05:48.430
that we can design for
productivity from the start.

00:05:48.430 --> 00:05:51.080
And then one final thing is
like testing got much quicker.

00:05:51.080 --> 00:05:53.790
I've cropped out the labels
and numbers on this chart,

00:05:53.790 --> 00:05:56.939
because you know,
they're internal.

00:05:56.939 --> 00:05:58.230
But also, they're embarrassing.

00:05:58.230 --> 00:06:04.730
And the orange bar is a UI
component that we wrote in GET.

00:06:04.730 --> 00:06:07.430
And it's the time taken
to run the GWT tests.

00:06:07.430 --> 00:06:11.340
And the white bar is
the same UI components

00:06:11.340 --> 00:06:14.300
reskinned and reimplemented
in Dart for material design.

00:06:14.300 --> 00:06:15.780
And that's the testing time.

00:06:15.780 --> 00:06:18.420
And again, this was part of the
results we presented to people.

00:06:18.420 --> 00:06:22.570
That's part of the reason
they wanted to use Dart.

00:06:22.570 --> 00:06:28.140
So happy engineers ship
better products more quickly.

00:06:28.140 --> 00:06:30.610
That's the overall goal, right?

00:06:30.610 --> 00:06:33.919
So by using Dart,
people are happier.

00:06:33.919 --> 00:06:35.960
They can write and check
their code more quickly.

00:06:35.960 --> 00:06:38.770
And so it's more fun for them.

00:06:38.770 --> 00:06:41.440
But actually, if you're able to
see your changes more quickly

00:06:41.440 --> 00:06:44.560
in the browser, this
results in a better product

00:06:44.560 --> 00:06:46.930
because it's not so painful
to change something.

00:06:46.930 --> 00:06:48.370
If it takes a
minute or two to see

00:06:48.370 --> 00:06:50.240
the result of saving
a file, then you're

00:06:50.240 --> 00:06:52.374
not going to make many changes.

00:06:52.374 --> 00:06:53.790
And actually, what
we're seeing is

00:06:53.790 --> 00:06:56.240
that the UI's we're shipping
now are more consistent,

00:06:56.240 --> 00:06:58.323
they're more user friendly,
they're more polished.

00:07:00.900 --> 00:07:07.380
So I've worked in AdSense
for nearly six years now.

00:07:07.380 --> 00:07:09.530
And this is, I think,
the fourth time

00:07:09.530 --> 00:07:13.700
that we've rebranded the
AdSense UI in some way.

00:07:13.700 --> 00:07:16.012
So let's go back to six
years ago when I started.

00:07:16.012 --> 00:07:17.720
We had been working
for a couple of years

00:07:17.720 --> 00:07:20.420
at that point, when I
joined the team on replacing

00:07:20.420 --> 00:07:24.870
this, which internally,
was called AdSense 2.

00:07:24.870 --> 00:07:29.180
This was written as using
servlets and something very

00:07:29.180 --> 00:07:31.170
similar to Java server pages.

00:07:31.170 --> 00:07:33.430
There's very little
JavaScript on that page.

00:07:33.430 --> 00:07:35.510
It's not interactive, it
just does page reloads

00:07:35.510 --> 00:07:38.590
when you click on something.

00:07:38.590 --> 00:07:42.860
And then as I joined, we
launched this GWT application.

00:07:42.860 --> 00:07:44.790
So GWT is the
Google Web Toolkit.

00:07:44.790 --> 00:07:47.760
It lets you write
your UI's in Java

00:07:47.760 --> 00:07:49.997
and compile them to JavaScript.

00:07:49.997 --> 00:07:52.330
But what we're seeing is a
single page application which

00:07:52.330 --> 00:07:55.230
we would now consider the norm.

00:07:55.230 --> 00:07:57.200
But obviously, it's all
driven by JavaScript.

00:07:57.200 --> 00:08:00.557
Clicking on things
is interactive.

00:08:00.557 --> 00:08:02.140
Obviously, it's still
not very pretty.

00:08:02.140 --> 00:08:04.473
But five years ago, this was
obviously a big improvement

00:08:04.473 --> 00:08:06.980
for AdSense users.

00:08:06.980 --> 00:08:08.910
About three years
ago, we rebranded

00:08:08.910 --> 00:08:12.580
to this UI, which is in the
Kennedy design language,

00:08:12.580 --> 00:08:14.340
as we called it internally.

00:08:14.340 --> 00:08:17.720
So we reskinned things,
we rewrote a few things.

00:08:17.720 --> 00:08:20.080
But broadly speaking,
this is the same codebase

00:08:20.080 --> 00:08:22.780
as what you saw previously.

00:08:22.780 --> 00:08:25.820
It's just that we've
made it look prettier.

00:08:25.820 --> 00:08:30.674
So actually, in the
material design UI,

00:08:30.674 --> 00:08:32.590
the bit that I showed
you was written in Dart.

00:08:32.590 --> 00:08:34.740
But most of it is
still written in GWT.

00:08:34.740 --> 00:08:41.480
So if I actually click, we don't
have the beautiful performance

00:08:41.480 --> 00:08:42.550
of AdWords quite yet.

00:08:42.550 --> 00:08:46.190
But if I click on Performance
Reports, what you see here

00:08:46.190 --> 00:08:49.110
is the main reporting
UI in AdSense.

00:08:49.110 --> 00:08:51.590
And this is still
all written in GWT.

00:08:51.590 --> 00:08:53.150
So we actually have
two applications

00:08:53.150 --> 00:08:54.920
running on the page
at the same time now.

00:08:54.920 --> 00:08:57.430
We have the shell, the material
design menus all written

00:08:57.430 --> 00:09:01.450
in Dart, and this disk with
UI running on the same page.

00:09:01.450 --> 00:09:05.150
And they're communicating
with each other.

00:09:05.150 --> 00:09:06.550
And so why have we done that?

00:09:13.090 --> 00:09:14.340
I got the order wrong.

00:09:14.340 --> 00:09:16.610
Let's talk about GWT for a bit.

00:09:16.610 --> 00:09:18.290
It served us well
for six years, right?

00:09:18.290 --> 00:09:19.664
So over the last
six years, we've

00:09:19.664 --> 00:09:21.370
done most of our
development in GWT.

00:09:21.370 --> 00:09:24.630
And it's gone pretty
well for the most part.

00:09:24.630 --> 00:09:26.630
I don't want to paint it
in this horrible light.

00:09:26.630 --> 00:09:29.171
It's actually like I was a GWT
expert when I joined the team.

00:09:29.171 --> 00:09:32.200
And I really loved
it for a long time.

00:09:32.200 --> 00:09:33.860
Why did we use GWT for so long?

00:09:33.860 --> 00:09:36.400
We loved that it
gave us the ability

00:09:36.400 --> 00:09:38.610
to work in a very
large codebase.

00:09:38.610 --> 00:09:40.760
It scales very well
because it's Java.

00:09:40.760 --> 00:09:43.890
It's designed for use by
large teams on large products.

00:09:43.890 --> 00:09:45.970
Static types, we
get code sharing.

00:09:48.550 --> 00:09:50.490
So these are properties
that GWT gave us.

00:09:50.490 --> 00:09:51.906
They are also
properties that Dart

00:09:51.906 --> 00:09:54.230
gave us, which is why it
was like an easy transition

00:09:54.230 --> 00:09:56.326
to sell to the team.

00:09:56.326 --> 00:09:57.700
But over the course
of six years,

00:09:57.700 --> 00:09:59.116
when you've got
hundreds of people

00:09:59.116 --> 00:10:03.310
contributing to the codebase,
cruft tends to creep in.

00:10:03.310 --> 00:10:05.820
People leave the
team, people join,

00:10:05.820 --> 00:10:08.320
it's impossible to understand
an application of that size

00:10:08.320 --> 00:10:10.040
completely.

00:10:10.040 --> 00:10:12.260
So things just gradually
get worse over time.

00:10:12.260 --> 00:10:15.080
And this is the story of many
large software projects, right?

00:10:15.080 --> 00:10:16.780
Things are
unnecessarily verbose.

00:10:16.780 --> 00:10:19.740
There's too much code
to do something simple.

00:10:19.740 --> 00:10:21.770
The workflow has gradually
slowed down a lot.

00:10:21.770 --> 00:10:23.770
It takes a couple of
minutes to see your changes

00:10:23.770 --> 00:10:25.140
when you save files.

00:10:25.140 --> 00:10:28.210
And the RPC mechanism
that we're using

00:10:28.210 --> 00:10:30.680
was actually emulating
Java serialization,

00:10:30.680 --> 00:10:33.180
which means you have to compile
your back-end and your front

00:10:33.180 --> 00:10:34.970
end at the same time.

00:10:34.970 --> 00:10:37.760
So doing releases is
naturally fragile.

00:10:37.760 --> 00:10:39.470
You force the user
to refresh the page,

00:10:39.470 --> 00:10:43.410
if they've got it loaded
while you're doing a release.

00:10:43.410 --> 00:10:45.290
Now, if I went and
talked to the GWT team

00:10:45.290 --> 00:10:47.600
and said we're having
these problems,

00:10:47.600 --> 00:10:50.820
they would say that these are
all solvable in modern GWTs.

00:10:50.820 --> 00:10:54.340
There's Java 8,
there's super dev mode.

00:10:54.340 --> 00:10:56.405
We can change the
RPC serialization.

00:10:56.405 --> 00:10:58.530
But actually, there's bigger
architectural problems

00:10:58.530 --> 00:11:01.290
that we wanted to solve as well.

00:11:01.290 --> 00:11:04.250
So the need to move to
material design, which

00:11:04.250 --> 00:11:07.610
is like the new Google
UI sign language,

00:11:07.610 --> 00:11:12.460
gave us a chance to rethink some
of our fundamental decisions.

00:11:12.460 --> 00:11:16.040
So we redesigned the product to
address longstanding UI issues,

00:11:16.040 --> 00:11:18.600
but also gave us a chance to
solve architectural issues

00:11:18.600 --> 00:11:21.660
in the code base.

00:11:21.660 --> 00:11:23.500
And actually,
because we felt this

00:11:23.500 --> 00:11:25.070
need to re-architect
the application,

00:11:25.070 --> 00:11:28.490
it gave us a chance to think
again about technologies.

00:11:28.490 --> 00:11:34.260
And AdWords were using Dart.

00:11:34.260 --> 00:11:36.690
The Dart team
itself were pushing

00:11:36.690 --> 00:11:37.972
quite hard for new customers.

00:11:37.972 --> 00:11:40.180
And they were very responsive
to what we were saying.

00:11:40.180 --> 00:11:42.190
And also, Angular itself.

00:11:42.190 --> 00:11:44.520
Angular is like a
big change if you're

00:11:44.520 --> 00:11:46.746
used running UI
code before Angular,

00:11:46.746 --> 00:11:49.600
not having to wire up all your
data bindings and your events,

00:11:49.600 --> 00:11:50.880
and all that kind of stuff.

00:11:50.880 --> 00:11:51.979
So we decided to move.

00:11:56.290 --> 00:11:57.870
So what did this mean?

00:11:57.870 --> 00:12:01.430
So we actually had a
single GWT application

00:12:01.430 --> 00:12:04.490
at the time being worked on
by lots of people at once.

00:12:04.490 --> 00:12:07.070
And this caused big
productivity issues.

00:12:07.070 --> 00:12:08.930
When you make a change,
you have to load

00:12:08.930 --> 00:12:11.220
the code for the entire
AdSense codebase,

00:12:11.220 --> 00:12:14.510
and push it into the browser.

00:12:14.510 --> 00:12:16.425
So this gives you big
productivity issues.

00:12:16.425 --> 00:12:18.050
You have to compile
everything at once.

00:12:18.050 --> 00:12:19.550
You have to ship
everything at once.

00:12:19.550 --> 00:12:23.470
You have to QA
everything at once.

00:12:23.470 --> 00:12:27.060
So this is like a pretty
high-level diagram

00:12:27.060 --> 00:12:28.370
of what we did.

00:12:28.370 --> 00:12:32.450
On the left, you can see we've
got a very large application

00:12:32.450 --> 00:12:33.720
written in GWT.

00:12:33.720 --> 00:12:35.880
And now, we have
multiple applications

00:12:35.880 --> 00:12:37.890
that are much smaller
on the same page talking

00:12:37.890 --> 00:12:39.424
to each other.

00:12:39.424 --> 00:12:41.090
I can't go into too
much of the details,

00:12:41.090 --> 00:12:43.786
but these applications
like theoretically

00:12:43.786 --> 00:12:45.160
could be written
in any language.

00:12:45.160 --> 00:12:47.150
We've got GWT and Dart.

00:12:47.150 --> 00:12:48.960
And then on the
same page, there's

00:12:48.960 --> 00:12:52.220
a simple EventBus that they use
to communicate with each other.

00:12:52.220 --> 00:12:54.200
It's basically a
publish/subscribe kind

00:12:54.200 --> 00:12:55.400
of design pattern.

00:12:58.999 --> 00:13:00.540
So when we're making
these decisions,

00:13:00.540 --> 00:13:01.831
what were the tradeoffs for us?

00:13:04.990 --> 00:13:07.260
We really wanted to improve
the development cycle.

00:13:07.260 --> 00:13:10.480
This was a big source of
unhappiness within the team.

00:13:10.480 --> 00:13:14.650
So this new architecture
means that when

00:13:14.650 --> 00:13:16.930
you're developing, say,
that bit of reporting UI,

00:13:16.930 --> 00:13:19.260
you don't need to load the
entire AdSense codebase.

00:13:19.260 --> 00:13:23.460
So there's just less work to
do before you can see the page.

00:13:23.460 --> 00:13:26.430
But it also means that the
team that owns the reporting UI

00:13:26.430 --> 00:13:30.911
doesn't need to talk to the
team that owns the settings UI.

00:13:30.911 --> 00:13:32.410
And theoretically,
they can actually

00:13:32.410 --> 00:13:35.820
ship their applications
at different times.

00:13:35.820 --> 00:13:38.610
By making smaller
applications, we also

00:13:38.610 --> 00:13:40.460
reduced the amount
of code that you

00:13:40.460 --> 00:13:43.140
have to download when
a user loads the page.

00:13:43.140 --> 00:13:46.880
So actually showing the home
page takes much less code.

00:13:46.880 --> 00:13:49.340
We took about a megabyte
of the initial page

00:13:49.340 --> 00:13:54.330
load with this move to
the new architecture.

00:13:54.330 --> 00:13:55.820
The downsides of
this are actually

00:13:55.820 --> 00:13:57.890
like if you go and click
around in everything,

00:13:57.890 --> 00:14:00.480
and load every single
possible piece of code,

00:14:00.480 --> 00:14:02.950
you end up paying
more bandwidth costs.

00:14:02.950 --> 00:14:06.670
And why is that is because
if you have multiple Dart

00:14:06.670 --> 00:14:08.520
applications on
the same page, you

00:14:08.520 --> 00:14:11.440
end up re-downloading parts of
the SDK over and over again.

00:14:14.020 --> 00:14:17.650
But what we see is the usage
patterns for our application

00:14:17.650 --> 00:14:20.570
are like 90% of users
just load the home page

00:14:20.570 --> 00:14:22.010
and then go and
do something else.

00:14:22.010 --> 00:14:24.810
So optimizing for
that initial payload

00:14:24.810 --> 00:14:27.260
actually works well for us.

00:14:27.260 --> 00:14:31.630
And the other downside is that
it complicates the interaction

00:14:31.630 --> 00:14:34.146
between those apps, like when
it's in a single code base,

00:14:34.146 --> 00:14:35.770
you can do refactoring
and know that it

00:14:35.770 --> 00:14:37.600
applies to everyone at once.

00:14:37.600 --> 00:14:40.780
If all of these apps are
shipping at different times,

00:14:40.780 --> 00:14:43.750
then you need to be aware of
breaking changes in your APIs,

00:14:43.750 --> 00:14:46.905
and make sure that you're
backwards compatible.

00:14:46.905 --> 00:14:48.530
And one of the ways
that we manage this

00:14:48.530 --> 00:14:52.510
is using protocol buffers, which
is like a backwards compatible

00:14:52.510 --> 00:14:53.500
serialization.

00:14:53.500 --> 00:14:55.740
So when you add a
filter protocol buffer,

00:14:55.740 --> 00:15:01.940
it doesn't break people who've
got an out-of-date definition.

00:15:01.940 --> 00:15:03.720
But there's all
these kind of tricks.

00:15:03.720 --> 00:15:06.200
We've added some complexity
by making more applications,

00:15:06.200 --> 00:15:09.010
but actually, it buys us a
lot in terms of productivity

00:15:09.010 --> 00:15:13.040
and the initial page load.

00:15:13.040 --> 00:15:14.750
One other thing that
this has let us do

00:15:14.750 --> 00:15:16.960
is this lets us make changes
and ship new boundaries

00:15:16.960 --> 00:15:17.877
every single day.

00:15:21.460 --> 00:15:23.930
And part of the move
is that this will let

00:15:23.930 --> 00:15:26.100
us write more automated tests.

00:15:26.100 --> 00:15:29.900
So before with the
single application,

00:15:29.900 --> 00:15:32.661
we had to write a lot of tests
that compiled everything.

00:15:32.661 --> 00:15:34.410
And the life of the
local development, you

00:15:34.410 --> 00:15:38.040
have to compile everything
and run your tests

00:15:38.040 --> 00:15:39.810
against the entire
code base at once.

00:15:39.810 --> 00:15:43.170
By having smaller applications,
we can test them in isolation

00:15:43.170 --> 00:15:45.992
and have fewer global
integration tests.

00:15:45.992 --> 00:15:47.700
And one of the side
effects of that is it

00:15:47.700 --> 00:15:50.360
made it possible for us to
ship new versions of the UI

00:15:50.360 --> 00:15:53.042
every day, because we have
way more automated tests.

00:15:56.180 --> 00:15:59.400
But you're here to
hear about Dart.

00:15:59.400 --> 00:16:02.220
So what has Dart given
us to let us do this?

00:16:02.220 --> 00:16:04.322
So this is Dart and Angular.

00:16:04.322 --> 00:16:06.780
The quick page for refreshes--
which I keep coming back to,

00:16:06.780 --> 00:16:10.280
but it's actually
like a killer for us--

00:16:10.280 --> 00:16:12.586
the concise code means that
not only are you refreshing

00:16:12.586 --> 00:16:14.460
the page more quickly,
but it takes less time

00:16:14.460 --> 00:16:17.470
to get to the point where you're
ready to refresh the page.

00:16:17.470 --> 00:16:19.660
The faster tests--
obviously, if you've

00:16:19.660 --> 00:16:22.150
sat around waiting
minutes for tests,

00:16:22.150 --> 00:16:24.390
then this will slow
you down and you

00:16:24.390 --> 00:16:26.710
go away and do something
else, and you lose the context

00:16:26.710 --> 00:16:29.730
of what you're working on.

00:16:29.730 --> 00:16:34.677
And then co-chairing across
Google and refactoring,

00:16:34.677 --> 00:16:36.260
these are things
that we had with GWT,

00:16:36.260 --> 00:16:38.060
but we also and
still have with Dart,

00:16:38.060 --> 00:16:41.560
because there are so many
teams internally using Dart.

00:16:41.560 --> 00:16:45.370
Dan Grave mentioned earlier
that we have one large code

00:16:45.370 --> 00:16:48.000
base that everyone contributes
to across the whole company.

00:16:48.000 --> 00:16:51.550
So if you change a common
component in a breaking way,

00:16:51.550 --> 00:16:54.250
you also have to update
your users all at once.

00:16:54.250 --> 00:16:56.930
And this is kind of
impossible, unless you've

00:16:56.930 --> 00:16:59.410
got very good static analysis
tools and refactoring

00:16:59.410 --> 00:17:02.030
tools to make sure that
you don't kill people--

00:17:02.030 --> 00:17:06.010
you kill people--
break people when

00:17:06.010 --> 00:17:09.359
you make a breaking change.

00:17:09.359 --> 00:17:11.329
So those were the things
we liked about it.

00:17:11.329 --> 00:17:13.329
The code sharing and
refactoring were the things

00:17:13.329 --> 00:17:14.410
that we liked about GWT.

00:17:14.410 --> 00:17:16.849
And we still have them with
Dart, so that's really great.

00:17:16.849 --> 00:17:19.670
And then also, we have
these wonderful open source

00:17:19.670 --> 00:17:21.510
material design components
that Ted has just

00:17:21.510 --> 00:17:23.669
talked to you about.

00:17:23.669 --> 00:17:26.210
And just to illustrate that, if
we go back to this screenshot

00:17:26.210 --> 00:17:29.660
from earlier, actually all
over the place on this page,

00:17:29.660 --> 00:17:32.970
we're using things that
are in that component set.

00:17:32.970 --> 00:17:35.800
The icons all come for free.

00:17:35.800 --> 00:17:39.140
CSS is standard across
all of these applications.

00:17:39.140 --> 00:17:42.630
So I think just simple things
like font sizes and spacing

00:17:42.630 --> 00:17:43.640
are all standard.

00:17:43.640 --> 00:17:45.420
If we dropped one
of these components

00:17:45.420 --> 00:17:49.760
into AdWords or to Google
Fiber, then the spacing

00:17:49.760 --> 00:17:50.520
would be similar.

00:17:50.520 --> 00:17:51.750
Everything would just match.

00:17:51.750 --> 00:17:54.400
It would be obvious that this
is from the same company using

00:17:54.400 --> 00:17:55.200
similar stuff.

00:18:00.880 --> 00:18:02.631
So it's not just UI
components either.

00:18:02.631 --> 00:18:04.714
Like internally, we've got
a lot of infrastructure

00:18:04.714 --> 00:18:08.100
that people like
Ted have worked on.

00:18:08.100 --> 00:18:12.180
And so we get a lot
of benefit and get

00:18:12.180 --> 00:18:14.600
to move more quickly by
using all this stuff.

00:18:14.600 --> 00:18:17.480
We have great performance data
coming from those automated

00:18:17.480 --> 00:18:18.045
tests.

00:18:18.045 --> 00:18:19.670
But we also have
great performance data

00:18:19.670 --> 00:18:21.800
coming from our users.

00:18:21.800 --> 00:18:25.190
We can tell how this code
performs in a real application,

00:18:25.190 --> 00:18:26.790
in a real user's computer.

00:18:26.790 --> 00:18:28.840
And so we can do very
large scale analysis

00:18:28.840 --> 00:18:30.340
of how these things
are performing,

00:18:30.340 --> 00:18:35.270
and solve those kind
of issues preemptively.

00:18:35.270 --> 00:18:37.490
Things like the logging
infrastructure and the RPC

00:18:37.490 --> 00:18:41.310
mechanisms, they're all standard
and shared within Google.

00:18:41.310 --> 00:18:43.910
Integration testing
frameworks, and then finally,

00:18:43.910 --> 00:18:45.376
like the development
environment,

00:18:45.376 --> 00:18:47.250
which we've heard a lot
about today, the Dart

00:18:47.250 --> 00:18:51.910
analyzer, Strong Mode, Dev
Tools, all that kind of stuff

00:18:51.910 --> 00:18:52.610
we're using.

00:18:52.610 --> 00:18:54.427
And now, you're
able to use it too.

00:18:58.570 --> 00:19:00.420
So the message of
this talk is actually

00:19:00.420 --> 00:19:03.740
we've been using all this stuff
that people have been building.

00:19:03.740 --> 00:19:05.840
And now it is being
made available to you.

00:19:05.840 --> 00:19:07.710
So we've enjoyed
massive benefits

00:19:07.710 --> 00:19:10.020
compared to what we had
previously a few years ago.

00:19:10.020 --> 00:19:12.859
And so you can do this too.

00:19:12.859 --> 00:19:14.400
That's the message
of today, I guess,

00:19:14.400 --> 00:19:16.525
is that all of these tools
that we've been building

00:19:16.525 --> 00:19:19.050
are now available to you.

00:19:19.050 --> 00:19:20.030
Thank you very much.

00:19:20.030 --> 00:19:23.080
[APPLAUSE]

