WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.060
it's a way of

00:00:02.620 --> 00:00:07.560
Trying to put control of how the network gets configured in some sense into the hands of programmers

00:00:07.870 --> 00:00:10.290
Rather than just leaving it to a bunch network protocols

00:00:12.519 --> 00:00:18.298
I've talked in the past a bit about Ip routing and you've got the idea there that there's routers which are

00:00:19.000 --> 00:00:21.659
Computers that have multiple network cards in that are interconnected

00:00:21.730 --> 00:00:26.129
And they run some software on the routers and the software implements a particular Routing protocol

00:00:26.740 --> 00:00:29.340
link state Protocol whatever it might be and

00:00:29.890 --> 00:00:30.760
so the

00:00:30.760 --> 00:00:32.999
Software on the route has exchanges packets

00:00:33.100 --> 00:00:35.079
with other instances that software and

00:00:35.079 --> 00:00:39.808
They work out the state of the network and they figure out how everything's laid out and they work out how to route through that

00:00:39.809 --> 00:00:45.209
Network and then when data comes in other packets come into the network all through just know what to do they look at the packets

00:00:45.210 --> 00:00:48.660
Destination address they work out where to send it so it gets towards its destination

00:00:49.210 --> 00:00:52.199
So that's kind of traditional networking with software defined networking

00:00:52.870 --> 00:00:59.759
The approach is basically is essentially saying that you want to go from that quite distributed

00:01:00.879 --> 00:01:05.309
Control where you configure things, but then the protocols is run in the background and work out

00:01:05.309 --> 00:01:08.099
What's going on to a much more substantial eyes control?

00:01:08.380 --> 00:01:13.619
So you have software running which is going to actually tell all of the routers or switches typically?

00:01:13.619 --> 00:01:17.879
It's usually done at the lower layer things, so it's usually done at an ethernet layer rather than at my peeler

00:01:17.979 --> 00:01:21.269
They tell the switches okay when you see this thing this packet come in

00:01:21.520 --> 00:01:26.189
You should do this with it, and so it's much more direct kind of poking everything internet

00:01:26.189 --> 00:01:31.169
but poking all the rules in and saying what should happen if you've got a sort of traditional network you might have a bunch of

00:01:32.530 --> 00:01:36.930
Switches or breeders have you wanna call them let's take the case of Ethernet spanning tree

00:01:36.930 --> 00:01:38.500
There's a protocol running called spanning tree

00:01:38.500 --> 00:01:44.369
Which designates that this is going to be the root switch in the network and then that runs a protocol to work out a spanning?

00:01:44.369 --> 00:01:45.840
Tree so this is a structure on a graph

00:01:45.840 --> 00:01:48.570
Which is essentially the minimal set of links that?

00:01:48.880 --> 00:01:52.409
Will allow you to reach every other thing in the graph every other node in the graph

00:01:52.689 --> 00:01:55.169
So in this case depending on how the network set up

00:01:55.450 --> 00:02:01.979
perhaps it would be that link would be in that link would be in that link might be in that link might be in and

00:02:02.740 --> 00:02:06.750
That leak might be in so these two links in that case would not be in the spanning tree

00:02:06.759 --> 00:02:10.068
So there's a protocol that runs in the background that maintains that so one of these

00:02:10.379 --> 00:02:15.349
Selected links say this one would were to go down you'd end up with maybe this one would come in

00:02:15.349 --> 00:02:21.199
So it sort of responds to things like that, but all the switch is running that protocol continuously in the background

00:02:21.450 --> 00:02:26.329
And they're all kind of in some sense. They're almost running it independently in that they're all doing their own thing and

00:02:26.849 --> 00:02:28.500
participating this protocol

00:02:28.500 --> 00:02:33.079
With the software defined networking firstly on each of these switches you now have a piece of software running

00:02:33.079 --> 00:02:35.509
Which is able to control the switch

00:02:35.510 --> 00:02:39.950
I'll come back to what exactly it does in a minute, and then you have another piece of software which is called a

00:02:40.920 --> 00:02:46.159
controller and this piece of software the controller makes a connection to each of

00:02:46.379 --> 00:02:49.188
These bits of software on each of these switches

00:02:49.470 --> 00:02:54.019
There's obviously a bootstrap problem here about how it gets to make that connection given it's about to control the network

00:02:54.019 --> 00:02:57.798
So that's a process. That's be gone through but basically you end up with a controller

00:02:57.870 --> 00:02:59.329
Able to talk to each of these switches

00:02:59.329 --> 00:03:01.789
And then it talks a protocol called open flow

00:03:02.129 --> 00:03:07.969
This is the kind of the height what there are actually two or three other alternatives this P4 and puffs are two of them

00:03:08.579 --> 00:03:10.819
But this is the one that seems to have got out there in the industry

00:03:10.819 --> 00:03:16.578
And it's actually supported by switch manufacturers to some extent and essentially you can insert into each of the switches

00:03:16.979 --> 00:03:22.159
Rules that say when you see a packet coming in that matches this each rule has got basically a match

00:03:23.010 --> 00:03:27.109
Clause and then it's got an action associated with it

00:03:27.109 --> 00:03:33.709
And so it might be that a match says well if the source IP address equals 10 dot 0 dot 0 dot

00:03:33.989 --> 00:03:38.839
And we want to drop it or it might be that it says you know destination IP address

00:03:39.150 --> 00:03:46.190
Equals 10 dot 0 dot 0 dot - we want to forward it out of port number 3 so it's more

00:03:46.319 --> 00:03:49.848
Explicitly saying to each of the switches this is what you should do. This is what you do

00:03:49.849 --> 00:03:51.849
This is what you should do in these particular cases

00:03:53.010 --> 00:03:58.010
So it then becomes about explicitly managing those rules and because this is a piece of software here, you can write

00:03:58.799 --> 00:04:04.339
whatever sort of algorithms you want here to do things in different ways or to treat traffic in different ways each of these bits of

00:04:04.340 --> 00:04:06.340
software running on the switches that

00:04:06.870 --> 00:04:11.750
Open for Switch might have a default rule that says if I see a packet, and I don't know what to do with it

00:04:11.750 --> 00:04:13.750
I should send it to the controller

00:04:14.009 --> 00:04:18.589
So it can then send the packets. It's never seen before - controller controller can look at the packet and go oh

00:04:18.930 --> 00:04:21.409
This is somebody trying to make a connection to that web server

00:04:21.409 --> 00:04:22.370
I should put in a

00:04:22.370 --> 00:04:27.530
Rule that says that make sure that that connection always goes through the firewall or make sure that that connection always goes through

00:04:27.930 --> 00:04:33.410
Some of the proxy middle box of some kind. What's the main benefits over traditional math again?

00:04:33.410 --> 00:04:39.829
It gives you more explicit control so with these kind of methods either with this sort of protocol or with the IP routing protocols

00:04:39.930 --> 00:04:45.199
You essentially control everything by setting weights, and then you allow the network to work things out

00:04:45.510 --> 00:04:51.379
There's one way to think of it in this case you control things by explicitly saying what you want to happen, so you can

00:04:51.690 --> 00:04:56.539
And you you so you've got that the ability to be more specific about what should what should occur?

00:04:56.669 --> 00:04:59.538
So you can tell what's gonna happen hopefully more easily

00:05:00.300 --> 00:05:04.010
In practice is a very complicated network very complicated rule sets in might not be so simple

00:05:04.410 --> 00:05:08.029
But that's the kind of the map. I think part of the motivation behind it spanning tree for example

00:05:08.130 --> 00:05:12.709
It's essentially drop or forward out of a particular port in IP routing

00:05:12.710 --> 00:05:17.840
It's drop or fault out of a port and you do a couple of things in passing so you determine the TTL fields for example

00:05:19.020 --> 00:05:20.960
You might check it checksum and drop it

00:05:20.960 --> 00:05:21.860
It doesn't matter checksum

00:05:21.860 --> 00:05:28.220
But it's still fairly simplistic with the controller actions aren't just dropping forward or forward to control it you can also rewrite

00:05:28.590 --> 00:05:34.190
Certain fields for example, so you might say well packet comes through here with these details in the header

00:05:34.190 --> 00:05:37.399
I'm gonna rewrite some of those fields before I send it on

00:05:38.070 --> 00:05:43.729
You've got more complex rule sets so you can with certain with more recent versions of the Openflow protocol

00:05:44.430 --> 00:05:50.030
You can start to chain tables together this you say well, here is a table of rules, and then if it matches this rule

00:05:50.030 --> 00:05:52.459
it's going to go and be processed by this table of Rules and

00:05:52.530 --> 00:05:59.179
You can build up state as you move the packet between tables so as you as you traverse through a sequence of tables you can

00:05:59.180 --> 00:06:03.829
Remember things about how you got there essentially it's statistics for example about how many packets matched

00:06:04.139 --> 00:06:09.469
Against which of these rules how many packets how many bytes matched against which of these rules and so you're getting this kind of?

00:06:09.690 --> 00:06:11.690
sort of feed of information from

00:06:14.820 --> 00:06:20.329
It's an interesting question there's a lot of research interest in these kind of systems and actually they go back to

00:06:20.520 --> 00:06:26.480
At least to the ninth 90s. There was work for example back in the late 90s. Just around time

00:06:26.480 --> 00:06:27.300
I started my phd

00:06:27.300 --> 00:06:29.250
So I was done here in Cambridge

00:06:29.250 --> 00:06:35.690
Which was looking at how to do this kind of control system for an ATm network so that a synchronous transfer mode not cash machines

00:06:36.480 --> 00:06:40.459
So, but it was a very similar thing where you'd have you have some kind of layer of software on each switch

00:06:40.560 --> 00:06:46.700
You have the ability for some sort of control process just put information into though into that software to say what should happen when?

00:06:46.950 --> 00:06:48.900
cells came in on particular

00:06:48.900 --> 00:06:51.049
virtual circuits that general idea has been

00:06:51.720 --> 00:06:53.720
It's kind of been around for a bit

00:06:53.760 --> 00:06:59.510
And there's a lot of interest in the research community that's kind of waxed and waned over the years probably the biggest

00:07:00.270 --> 00:07:04.970
Deployment that I know of that is using this in some sense is google. So for Google's network

00:07:04.970 --> 00:07:07.670
They use that apparently to manage their global

00:07:08.490 --> 00:07:15.200
Network to make it work in the way. They wanted to more efficiently than they can achieve use into traditional kind of protocols

00:07:19.500 --> 00:07:21.210
I

00:07:21.210 --> 00:07:27.590
Guess it's yeah, it's not unlikely. I don't know I'm not an expert on Google's infrastructure, but it seems not unlikely that that's what happened

00:07:31.050 --> 00:07:33.050
Hopefully at least 200 more

00:07:35.610 --> 00:07:41.360
We'd like to thank audible.com for supporting computerphile if you go to audible.com slash computerphile

00:07:41.510 --> 00:07:44.330
You can sign up for a 30 day free trial now

00:07:45.150 --> 00:07:47.900
Today, I'd like to recommend a game of thrones

00:07:48.419 --> 00:07:52.699
Everyone's been talking about the TV series, but the books are absolutely fantastic

00:07:52.700 --> 00:07:55.609
And what's better is the graphics are all up here?

00:07:55.640 --> 00:07:59.179
So that makes them quite a lot better than TV CGI in my humble opinion

00:07:59.510 --> 00:08:03.649
I've inhaled the books and I'm waiting with bated breath for the next one. I'm surprised

00:08:03.650 --> 00:08:08.810
I haven't actually recommended these before as I've just worked my way through them and just loved every second of it

00:08:08.870 --> 00:08:15.979
So remember audible.com slash competes file for that 30 day free trial. Thanks once again to them for supporting computerphile

00:08:16.590 --> 00:08:20.660
The problem is that if I obtain a cookie of you which is supposed to be secure?

00:08:20.850 --> 00:08:25.070
then I can send that to let's say Amazon or to a shop and

00:08:25.710 --> 00:08:31.370
Say, I'm sure and please you know what's in a shopping basket. What's his address? What's his credit card details?

