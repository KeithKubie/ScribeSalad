WEBVTT
Kind: captions
Language: en

00:00:00.350 --> 00:00:03.900
The second kind of connector we'd like to look at are event connectors these

00:00:03.900 --> 00:00:09.203
are, these are also very common. In fact [INAUDIBLE] book on the resource page.

00:00:09.203 --> 00:00:13.369
They devote a very nice section to describing all the different variations that

00:00:13.369 --> 00:00:15.304
might exist with event connectors.

00:00:15.304 --> 00:00:18.994
First of all event connectors are responsible for a flow of controls so

00:00:18.994 --> 00:00:24.090
that's a coordination role. They may also pass parameters. Typically this

00:00:24.090 --> 00:00:29.590
might involve time stamps, or actual data, so that's a communication wall.

00:00:29.590 --> 00:00:35.580
Event connectors, once an event is detected, generate messages, method calls.

00:00:35.580 --> 00:00:39.980
After detecting the event or some combination of events that it's,

00:00:39.980 --> 00:00:45.080
it's prepared to detect. Event connectors are particularly relevant for

00:00:45.080 --> 00:00:50.190
distributed, asynchronous applications in which we need to know when certain

00:00:50.190 --> 00:00:55.760
things happen. The set of event connectors that exist is dynamic.

00:00:55.760 --> 00:00:59.250
That is, the application itself can turn on or

00:00:59.250 --> 00:01:03.710
turn off the ability to detect certain events. Some of the variations that might

00:01:03.710 --> 00:01:08.750
exist among implementations of event connectors include cardinality.

00:01:08.750 --> 00:01:15.830
That is how many different components can produce the event? How many different

00:01:15.830 --> 00:01:21.270
observers of the event might exist? And might there be patterns of events?

00:01:21.270 --> 00:01:24.624
In which, we like to be able to detect currents of the pattern.

00:01:24.624 --> 00:01:29.820
How were the events actually communicated? Is it via best effort, exactly once,

00:01:29.820 --> 00:01:35.400
at most once, at least once? Do we have a priority among a set of events?

00:01:35.400 --> 00:01:38.700
Do we always handle the outgoing ones before the incoming ones?

00:01:38.700 --> 00:01:42.520
Are there different priorities embedded with the event that are handled in

00:01:42.520 --> 00:01:48.140
a certain fashion? Synchronous, asynchronous, or based upon certain time out?

00:01:48.140 --> 00:01:51.430
How is notification handled? Is it polled? That is,

00:01:51.430 --> 00:01:56.800
does the potential receivers have to periodically look to see whether the event

00:01:56.800 --> 00:02:02.132
occurred? Is there a published, published subscribe interface in which

00:02:02.132 --> 00:02:07.601
a particular component registers it's interests in events. And then, gets told

00:02:07.601 --> 00:02:11.686
when events happen? Is there a central updating mechanism that, a registry that

00:02:11.686 --> 00:02:16.200
receives all of the events and distributes them to the known, known parties. Or

00:02:16.200 --> 00:02:19.800
is, are there queues sitting there that everybody's responsible for

00:02:19.800 --> 00:02:25.040
looking at. Causality refers to the circumstances determining the actual

00:02:25.040 --> 00:02:31.172
issuing of the events. Are there, absolute, absolute event occurrences?

00:02:31.172 --> 00:02:36.256
Or, could could the events be relative to other situations that

00:02:36.256 --> 00:02:41.730
is conditional type events. And what's is the ultimate, generator of the event.

00:02:41.730 --> 00:02:45.710
Might it come from hardware such as pa, page faults, interrupts, or traps. Or

00:02:45.710 --> 00:02:50.610
are they software signals or triggers or even, inputs from the, from the GUI.

