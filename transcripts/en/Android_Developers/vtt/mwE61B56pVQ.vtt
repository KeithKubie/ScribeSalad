WEBVTT
Kind: captions
Language: en

00:00:08.660 --> 00:00:08.890
Hi.

00:00:08.890 --> 00:00:10.160
My name is Daniel Olshansky.

00:00:10.160 --> 00:00:12.350
And today I'll be showing you
how to do an animation to

00:00:12.350 --> 00:00:14.060
extend cells in the ListView.

00:00:14.060 --> 00:00:16.660
So if you have a ListView with
certain data and you want to

00:00:16.660 --> 00:00:19.360
show extra content associated
with every single cell,

00:00:19.360 --> 00:00:21.620
instead of taking the user to
a new page, you can simply

00:00:21.620 --> 00:00:24.520
click on a cell, expand it,
show the extra content and

00:00:24.520 --> 00:00:25.510
collapse it.

00:00:25.510 --> 00:00:28.790
A few of the things about this
animation is that as a cell

00:00:28.790 --> 00:00:32.070
expands, it moves around all
the items around it to make

00:00:32.070 --> 00:00:33.890
room for the new
extra content.

00:00:33.890 --> 00:00:36.910
And furthermore, this
new size persists.

00:00:36.910 --> 00:00:39.450
So if you were to expand a cell,
then scroll away from

00:00:39.450 --> 00:00:42.205
it, and then come back to it,
the new size will persist on

00:00:42.205 --> 00:00:45.370
the expanded cell until it is
collapsed manually by the user

00:00:45.370 --> 00:00:47.100
by clicking on the cell again.

00:00:47.100 --> 00:00:50.510
A couple of the tricks and the
problems they came across

00:00:50.510 --> 00:00:52.680
while implementing this
animation is the fact that

00:00:52.680 --> 00:00:55.570
when you animate a cell-- when
you change the layout of a

00:00:55.570 --> 00:00:58.610
cell, what's going to happen
is that some of the other

00:00:58.610 --> 00:01:00.550
cells around it are going
to disappear.

00:01:00.550 --> 00:01:03.230
They're going to be
moved outside the

00:01:03.230 --> 00:01:04.870
bounds of the ListView.

00:01:04.870 --> 00:01:07.210
And when this happens, you no
longer have a reference to

00:01:07.210 --> 00:01:08.030
those views.

00:01:08.030 --> 00:01:10.970
So even though you still need
to animate them to achieve

00:01:10.970 --> 00:01:12.430
that animation effect.

00:01:12.430 --> 00:01:13.760
That's problem number one.

00:01:13.760 --> 00:01:16.900
The second problem when working
with this is that when

00:01:16.900 --> 00:01:20.130
you change the layout of a
certain view in the ListView,

00:01:20.130 --> 00:01:23.020
the Container, what's going to
happen is that the ListView

00:01:23.020 --> 00:01:25.910
will try to rearrange the
cells as it wants to

00:01:25.910 --> 00:01:27.290
make room for it.

00:01:27.290 --> 00:01:30.860
But if you want to choose some
sort of custom expansion, such

00:01:30.860 --> 00:01:33.260
that when you expand the cell
all the content should be

00:01:33.260 --> 00:01:36.440
visible, or as much of it as
can be visible to the user,

00:01:36.440 --> 00:01:37.830
should be visible once.

00:01:37.830 --> 00:01:40.460
You're going to want to
rearrange the cells in a way

00:01:40.460 --> 00:01:43.680
that's most optimal for
your application.

00:01:43.680 --> 00:01:47.310
And in this case, you need to
tell the ListView exactly how

00:01:47.310 --> 00:01:48.840
to place them on the screen.

00:01:48.840 --> 00:01:51.920
So going straight
into the demo.

00:01:51.920 --> 00:01:54.130
Here we have a ListView of

00:01:54.130 --> 00:01:55.760
chameleons, rocks, and flowers.

00:01:55.760 --> 00:01:59.550
And say I click on a cell,
see how it expands,

00:01:59.550 --> 00:02:01.100
displays a new text.

00:02:01.100 --> 00:02:03.390
And then you can click
again to close it.

00:02:03.390 --> 00:02:07.190
This works for every
single cell.

00:02:07.190 --> 00:02:09.750
It works for extra content
of different sizes.

00:02:09.750 --> 00:02:14.350
You can also see that as a cell
expands and collapses,

00:02:14.350 --> 00:02:17.675
the actual content, the
text, actually fades

00:02:17.675 --> 00:02:18.740
in and fades out.

00:02:18.740 --> 00:02:21.220
And this is not only
restricted to text.

00:02:21.220 --> 00:02:23.700
This will also work with
other types of layouts.

00:02:23.700 --> 00:02:26.870
Another interesting thing about
this is that, say the

00:02:26.870 --> 00:02:29.430
cell is at the edge and
you want to expand it.

00:02:29.430 --> 00:02:32.270
You can see that it'll animate
it to make room for it.

00:02:32.270 --> 00:02:36.480
So if we were to animate, to
bring this flower down, and we

00:02:36.480 --> 00:02:38.320
click here, it'll actually
animate upwards instead of

00:02:38.320 --> 00:02:39.240
animating downwards.

00:02:39.240 --> 00:02:42.410
And then when I click on it,
it makes room for all the

00:02:42.410 --> 00:02:44.480
other cells and then animates
them back in.

00:02:44.480 --> 00:02:48.110
So jumping straight to the code,
here in Custom ListView,

00:02:48.110 --> 00:02:50.310
which extends the ListView
which can expand

00:02:50.310 --> 00:02:52.810
and collapse cells.

00:02:52.810 --> 00:02:55.970
First we initiate an item like
click listener, so that when

00:02:55.970 --> 00:02:59.000
you click and click again, you
can expand or collapse it,

00:02:59.000 --> 00:03:00.310
respectively.

00:03:00.310 --> 00:03:02.880
And then scrolling down
furthermore, this is the Get

00:03:02.880 --> 00:03:04.920
Top and Bottom Translations
method.

00:03:04.920 --> 00:03:07.590
So what this does, this can be
customized by you depending

00:03:07.590 --> 00:03:09.550
what kind of user experience
you'd like.

00:03:09.550 --> 00:03:12.260
But in this specific case, what
I did is always try to

00:03:12.260 --> 00:03:15.110
maximize the amount of content
that displayed to the user.

00:03:15.110 --> 00:03:18.780
And all it is is really just
a little bit of math, and a

00:03:18.780 --> 00:03:21.490
little bit of arithmetic,
using the bounds of the

00:03:21.490 --> 00:03:24.780
ListView, using how much, what
the current offset is, and

00:03:24.780 --> 00:03:29.660
using what the size of the
current visible part of the

00:03:29.660 --> 00:03:30.830
ListView as well.

00:03:30.830 --> 00:03:33.080
So this will return a
bottom and a top.

00:03:33.080 --> 00:03:35.970
And all this will say is how
much the bottom and the top

00:03:35.970 --> 00:03:38.870
bounds of the expanding or the
collapsing cell should be

00:03:38.870 --> 00:03:40.130
modified by.

00:03:40.130 --> 00:03:42.880
And you can use these as a
reference to animate all the

00:03:42.880 --> 00:03:46.710
cells around the cells being
expanded or collapsed.

00:03:46.710 --> 00:03:49.540
Scrolling down furthermore.

00:03:49.540 --> 00:03:52.700
We reach the expanding method,
which takes in the view that's

00:03:52.700 --> 00:03:54.060
being expanded.

00:03:54.060 --> 00:03:56.840
And before we actually expand
anything, there's a few things

00:03:56.840 --> 00:03:57.570
we need to do.

00:03:57.570 --> 00:04:00.540
We need to store what the old
bounds of the cell that's

00:04:00.540 --> 00:04:02.310
about to be expanded is.

00:04:02.310 --> 00:04:05.140
And we also need to store the
top and bottom bounds of all

00:04:05.140 --> 00:04:08.230
the cells that are
around the cell

00:04:08.230 --> 00:04:09.940
that's going to be expanded.

00:04:09.940 --> 00:04:13.850
After that, we get a reference
of the expanding layout.

00:04:13.850 --> 00:04:16.260
So even though it's not
visible at first, the

00:04:16.260 --> 00:04:18.360
expanding layout is present
in every single cell.

00:04:18.360 --> 00:04:20.290
Except its visibility
is set to gone.

00:04:20.290 --> 00:04:21.980
So it's not being rendered.

00:04:21.980 --> 00:04:23.710
It's not affecting the
layout at all.

00:04:23.710 --> 00:04:27.790
But by sending it to visible, we
now tell it that we want--

00:04:27.790 --> 00:04:32.530
by sending it to visible and
have its layout set to wrap

00:04:32.530 --> 00:04:35.140
content, what we're actually
going to be doing is invoking

00:04:35.140 --> 00:04:39.020
a request layout call without
having that be here

00:04:39.020 --> 00:04:40.020
explicitly.

00:04:40.020 --> 00:04:41.870
Because we know that now
something that was gone has

00:04:41.870 --> 00:04:42.730
become visible.

00:04:42.730 --> 00:04:44.670
And we need to render it.

00:04:44.670 --> 00:04:48.330
And like I've mentioned in a
few of my other animations,

00:04:48.330 --> 00:04:51.610
what we're going to want to do
is add an OnPreDraw Listener.

00:04:51.610 --> 00:04:54.020
So by invoking said visible,
we're going to change the

00:04:54.020 --> 00:04:58.110
layout of this cell along with
the bounds and the layout of

00:04:58.110 --> 00:04:59.730
the cells around it.

00:04:59.730 --> 00:05:02.900
And On Layout and On Measurable
get called.

00:05:02.900 --> 00:05:07.140
The final values for all the
cells will be computed, but

00:05:07.140 --> 00:05:08.730
they will not yet be drawn
on the screen.

00:05:08.730 --> 00:05:11.460
So this is the best place
to run animation.

00:05:11.460 --> 00:05:15.250
Except the thing about this
animation right here that's

00:05:15.250 --> 00:05:17.220
going to be a little different
is that we're going to have

00:05:17.220 --> 00:05:21.040
two passes in OnPreDraw
instead of just one.

00:05:21.040 --> 00:05:24.110
During the first PreDraw pass,
what we want to do is we want

00:05:24.110 --> 00:05:27.170
to offset the content in the
ListView in such a way such

00:05:27.170 --> 00:05:30.570
that after we invoke our layout
once again, all the

00:05:30.570 --> 00:05:34.390
cells that we want rendered on
the screen will be visible and

00:05:34.390 --> 00:05:36.280
will be accessible
to the user.

00:05:36.280 --> 00:05:40.180
So if we were not to have this
first pass, the ListView would

00:05:40.180 --> 00:05:44.140
arrange all the cells in a way
most convenient for this

00:05:44.140 --> 00:05:46.260
ListView to display
the content.

00:05:46.260 --> 00:05:49.800
But seeing how we're animating
the top and bottom bounds in a

00:05:49.800 --> 00:05:55.440
very custom manner, we need to
specify exactly which cells we

00:05:55.440 --> 00:05:56.960
want to have visible.

00:05:56.960 --> 00:05:59.480
The way this is done is through
a little bit of math,

00:05:59.480 --> 00:06:01.600
determining how much we
need to offset it by.

00:06:01.600 --> 00:06:03.990
But the key method I'm
using here is set

00:06:03.990 --> 00:06:05.540
selection from top.

00:06:05.540 --> 00:06:08.370
So after determining which cell
is going to be at the

00:06:08.370 --> 00:06:13.010
very top after my custom changes
for the top and bottom

00:06:13.010 --> 00:06:15.860
bounds are run, I know what the
first visible position is

00:06:15.860 --> 00:06:16.840
going to be afterwards.

00:06:16.840 --> 00:06:18.800
And I also know what
its offset is going

00:06:18.800 --> 00:06:19.910
to be from the top.

00:06:19.910 --> 00:06:24.040
So doing some math, and then
calling said selection from

00:06:24.040 --> 00:06:27.910
top, I set the offset that I
want for the ListView, and

00:06:27.910 --> 00:06:29.420
then I call request layout.

00:06:29.420 --> 00:06:32.410
So what this is going to do is
render all the cells that I

00:06:32.410 --> 00:06:35.750
need to be rendered on the
screen, after having the

00:06:35.750 --> 00:06:37.720
ListView be offset by
how much I need.

00:06:37.720 --> 00:06:40.110
I'm also going to be returning
false from OnPreDraw.

00:06:40.110 --> 00:06:42.420
Because all I'm doing here is
offsetting the content.

00:06:42.420 --> 00:06:46.880
But I don't want the current
state of the

00:06:46.880 --> 00:06:48.380
M View to be redrawn.

00:06:48.380 --> 00:06:50.560
Because if I were to redraw in
two different states, it would

00:06:50.560 --> 00:06:52.750
be a very janky and not
a very pleasant

00:06:52.750 --> 00:06:54.410
animation for the user.

00:06:54.410 --> 00:06:58.320
So returning false, but still
not having removed the PreDraw

00:06:58.320 --> 00:07:00.880
Listener, what's going to happen
is it's going to come

00:07:00.880 --> 00:07:03.250
back to OnPreDraw after the
new values have been

00:07:03.250 --> 00:07:04.320
recomputed.

00:07:04.320 --> 00:07:05.780
At which point we
will no longer

00:07:05.780 --> 00:07:08.110
need the PreDraw Listener.

00:07:08.110 --> 00:07:09.840
Then we go down.

00:07:09.840 --> 00:07:12.990
We can retrieve the values from
before for the top and

00:07:12.990 --> 00:07:14.560
bottom bound changes.

00:07:14.560 --> 00:07:17.430
And then we can get straight
into calculating all the

00:07:17.430 --> 00:07:18.920
animations that we need.

00:07:18.920 --> 00:07:21.680
So before the animation took
place, we stored the top and

00:07:21.680 --> 00:07:22.990
bottom bounds for all
the cells that

00:07:22.990 --> 00:07:24.800
were previously visible.

00:07:24.800 --> 00:07:29.310
And so if it was visible before
the animation and the

00:07:29.310 --> 00:07:31.780
cell is still visible after the
animation, we're going to

00:07:31.780 --> 00:07:33.830
go into this else case.

00:07:33.830 --> 00:07:36.480
And all we need to do is animate
the bounds from the

00:07:36.480 --> 00:07:38.590
before state to the after
state, which is very

00:07:38.590 --> 00:07:40.000
straightforward.

00:07:40.000 --> 00:07:45.600
This is what happens
when the Parent of

00:07:45.600 --> 00:07:47.040
the view is not known.

00:07:47.040 --> 00:07:53.240
So this means it was visible
before the layout change and

00:07:53.240 --> 00:07:55.200
it's also present after
the layout change.

00:07:55.200 --> 00:07:59.560
But say the cell expanded so
much that the cell will no

00:07:59.560 --> 00:08:01.530
longer be visible after
the layout change.

00:08:01.530 --> 00:08:06.460
We're going to see that our
View's parent is null.

00:08:06.460 --> 00:08:09.490
So it's no longer contained
in the ListView.

00:08:09.490 --> 00:08:14.970
But up here, when I created
my hash map, I said

00:08:14.970 --> 00:08:17.160
setHasTransientState to true.

00:08:17.160 --> 00:08:19.770
So what that did is even though
it's no longer part of

00:08:19.770 --> 00:08:22.440
the ListView, this view is
not going to be recycled.

00:08:22.440 --> 00:08:24.350
And as long as I store the
reference to this ListView

00:08:24.350 --> 00:08:29.005
myself, I can still make use
of it after the layout has

00:08:29.005 --> 00:08:34.010
taken place as long as I
have a reference to it.

00:08:34.010 --> 00:08:37.429
So scrolling down here, all
I'm going to do is add the

00:08:37.429 --> 00:08:39.840
exact same animation as I do
for cells that are still

00:08:39.840 --> 00:08:41.250
visible after the layout.

00:08:41.250 --> 00:08:43.919
Except I'm also going to add
it to this array of mine

00:08:43.919 --> 00:08:47.340
called mViewsToDraw, which is
going to tell me that this is

00:08:47.340 --> 00:08:51.080
a view that needs to be animated
off the screen, just

00:08:51.080 --> 00:08:52.150
for animation purposes.

00:08:52.150 --> 00:08:54.810
But it doesn't actually need
to be rendered for the

00:08:54.810 --> 00:09:00.890
purposes of the ListView use.

00:09:00.890 --> 00:09:05.220
So scrolling down furthermore,
I add animation to actually

00:09:05.220 --> 00:09:08.240
expand the bounds of the
cell being expanded.

00:09:08.240 --> 00:09:12.250
And then I also fade in the
expanding layout text.

00:09:12.250 --> 00:09:15.180
So this does not necessarily
have to be text, but the

00:09:15.180 --> 00:09:18.240
layout itself is faded in by
animating its alpha value from

00:09:18.240 --> 00:09:20.160
zero to one.

00:09:20.160 --> 00:09:22.820
Then during the animation
itself, I wanted to see all my

00:09:22.820 --> 00:09:27.340
ListView to prevent some weird
behavior if the user were to

00:09:27.340 --> 00:09:29.100
scroll during that time.

00:09:29.100 --> 00:09:32.980
And once my animation completes,
one thing that I

00:09:32.980 --> 00:09:36.980
really have to do is make sure
to set the transient state to

00:09:36.980 --> 00:09:40.130
false for any views that
previously had it to true, so

00:09:40.130 --> 00:09:42.750
that these views don't get
stored but can actually be

00:09:42.750 --> 00:09:45.290
recycled and make lists you're
scrolling more efficient

00:09:45.290 --> 00:09:47.420
afterwards.

00:09:47.420 --> 00:09:50.430
So that was expand view.

00:09:50.430 --> 00:09:53.150
Now in dispatchDraw, what's
going to happen is the only

00:09:53.150 --> 00:09:56.330
things that I would want to draw
on to the screen that are

00:09:56.330 --> 00:09:59.710
not on the screen right now
are views that were on the

00:09:59.710 --> 00:10:02.410
ListView, but are no longer on
the ListView afterwards.

00:10:02.410 --> 00:10:05.380
I only need a reference to these
during the animation.

00:10:05.380 --> 00:10:08.370
Because once the animation
completes, the user should not

00:10:08.370 --> 00:10:10.030
be able to track them anymore.

00:10:10.030 --> 00:10:12.840
And so since I have a reference
to the view itself,

00:10:12.840 --> 00:10:16.665
all I need to do is transfer the
canvas appropriately, just

00:10:16.665 --> 00:10:17.690
its top value.

00:10:17.690 --> 00:10:20.230
Because the cell takes up the
whole width, I just need to

00:10:20.230 --> 00:10:23.540
modify where it's located
vertically on the screen.

00:10:23.540 --> 00:10:25.370
I draw the view onto
the canvas.

00:10:25.370 --> 00:10:28.740
And then I translate it back
so that the next cell to be

00:10:28.740 --> 00:10:31.890
drawn will be drawn in the
correct location as well.

00:10:31.890 --> 00:10:34.550
Scrolling down furthermore
into Collapse View.

00:10:34.550 --> 00:10:37.730
It's going to be very similar
in most ways.

00:10:37.730 --> 00:10:41.360
So before the cells collapse,
I want to store the top and

00:10:41.360 --> 00:10:45.150
bottom bounds of all the cells
prior to the collapse.

00:10:45.150 --> 00:10:48.120
I want to set Translate to True
so nothing gets recycled

00:10:48.120 --> 00:10:50.830
during the collapsing
animation.

00:10:50.830 --> 00:10:54.200
And then the only really
important thing to note here

00:10:54.200 --> 00:10:58.180
is that I'm not changing the
expanding layout visibility

00:10:58.180 --> 00:10:59.750
from visible to gone.

00:10:59.750 --> 00:11:02.620
What I'm actually doing is
setting the height of the

00:11:02.620 --> 00:11:07.650
layout to a custom height that
I pre-computed before, which

00:11:07.650 --> 00:11:09.650
is what its default height
is when it's

00:11:09.650 --> 00:11:11.150
in a collapsed state.

00:11:11.150 --> 00:11:14.100
And the reason I can't set the
visibility to gone and just

00:11:14.100 --> 00:11:16.680
work with the layout change from
there is because I want

00:11:16.680 --> 00:11:20.010
to get that fading effect as the
cell is collapsing on the

00:11:20.010 --> 00:11:21.210
expanding layout.

00:11:21.210 --> 00:11:24.600
And that fading effect cannot
be achieved if the expanding

00:11:24.600 --> 00:11:28.510
layout visibility is
gone or invisible.

00:11:28.510 --> 00:11:31.780
By setting the height to a
custom value, I can then

00:11:31.780 --> 00:11:34.510
invoke a layout and
add an OnPreDraw

00:11:34.510 --> 00:11:36.640
Listener like we did before.

00:11:36.640 --> 00:11:39.470
Very similar to the expand view
method, I'm going to have

00:11:39.470 --> 00:11:40.610
two passes.

00:11:40.610 --> 00:11:43.250
The first pass is going to
offset the ListView in such a

00:11:43.250 --> 00:11:45.170
way to account for the
custom collapse that

00:11:45.170 --> 00:11:46.670
I'm going to achieve.

00:11:46.670 --> 00:11:50.420
And once again I'm going to call
set selection from top,

00:11:50.420 --> 00:11:54.150
request a layout, and make sure
to return false so the

00:11:54.150 --> 00:11:56.660
TransientState of the ListView
does not get

00:11:56.660 --> 00:11:58.480
drawn onto the screen.

00:11:58.480 --> 00:12:00.800
And then since the PreDraw
Listener has not yet been

00:12:00.800 --> 00:12:03.130
removed, I'm going to request
that it has been called again.

00:12:03.130 --> 00:12:08.240
It'll come back here for its
second pass, where I will

00:12:08.240 --> 00:12:10.330
firstly loop through
all the visible

00:12:10.330 --> 00:12:12.110
children in the ListView.

00:12:12.110 --> 00:12:16.690
If I find that I do have access
to the old bounds of

00:12:16.690 --> 00:12:21.140
that view in the ListView, that
means that this view was

00:12:21.140 --> 00:12:23.890
present in the ListView before
and after the collapse.

00:12:23.890 --> 00:12:30.100
At which point, all I need to
do is update its bounds and

00:12:30.100 --> 00:12:31.910
then later animate them.

00:12:31.910 --> 00:12:35.600
But if I find that I don't have
access to the old bounds

00:12:35.600 --> 00:12:38.560
of the cell, that means that
this cell became visible only

00:12:38.560 --> 00:12:39.880
after the collapse
of the view.

00:12:39.880 --> 00:12:42.190
So the collapse of the view
actually made room for new

00:12:42.190 --> 00:12:43.430
cells to appear.

00:12:43.430 --> 00:12:48.680
But since I don't know what
their old bounds were, I don't

00:12:48.680 --> 00:12:51.160
have a reference point from
where I want to animate them.

00:12:51.160 --> 00:12:56.240
And so I just used the top and
bottom translation values to

00:12:56.240 --> 00:12:58.250
account for that.

00:12:58.250 --> 00:13:03.140
Scrolling down here, I loop
through all these same views

00:13:03.140 --> 00:13:06.050
and add the animations to
actually animate them from

00:13:06.050 --> 00:13:08.710
these old bounds to
their new bounds.

00:13:08.710 --> 00:13:11.570
I also want to animate
the collapse of

00:13:11.570 --> 00:13:13.030
the collapsing cell.

00:13:13.030 --> 00:13:17.060
And I want to animate the
expanding layout from a value

00:13:17.060 --> 00:13:19.270
of one to a value of zero,
so it disappears.

00:13:19.270 --> 00:13:22.440
Then I play all of these
together in an animator set.

00:13:22.440 --> 00:13:26.100
And then once it's actually
done, what I do is set the

00:13:26.100 --> 00:13:27.730
expanding layout visibility
to gone.

00:13:27.730 --> 00:13:30.830
So it doesn't get rendered on
the screen at all anymore, nor

00:13:30.830 --> 00:13:32.000
is it visible.

00:13:32.000 --> 00:13:35.670
And I also update my layout
parameters to wrap content.

00:13:35.670 --> 00:13:38.420
Because when it's gone, I want
to just wrap the content,

00:13:38.420 --> 00:13:40.570
which means that none
of the expanding

00:13:40.570 --> 00:13:41.820
layout should be wrapped.

00:13:44.220 --> 00:13:45.880
And then here, get animation.

00:13:45.880 --> 00:13:49.500
This is actually how I animate
the top and bottom bounds.

00:13:49.500 --> 00:13:55.430
And since top and bottom have
associated setters in Views,

00:13:55.430 --> 00:14:00.890
called set top and set bottom,
these values can be animated

00:14:00.890 --> 00:14:02.090
as I would like for
them to be.

00:14:02.090 --> 00:14:04.000
And then I just return
Object Animator, and

00:14:04.000 --> 00:14:05.450
it does what I need.

00:14:05.450 --> 00:14:07.780
The one other thing that I
wanted to mention in this

00:14:07.780 --> 00:14:12.590
animation is how I actually
managed to achieve the

00:14:12.590 --> 00:14:17.380
collapse of the expanding layout
while fading it out.

00:14:17.380 --> 00:14:21.180
So what's going to happen is
when I set the height of the

00:14:21.180 --> 00:14:25.770
layout to be a collapsed state,
the ListView will not

00:14:25.770 --> 00:14:28.110
want to render the expanding
layout because it's not

00:14:28.110 --> 00:14:29.640
visible on the screen.

00:14:29.640 --> 00:14:32.740
So what I do here is overwrite
OnMeasure, OnSize, and

00:14:32.740 --> 00:14:34.170
onSizeChanged.

00:14:34.170 --> 00:14:37.950
And what I'm telling it to do
is that when it doesn't want

00:14:37.950 --> 00:14:41.980
to display the expanding layout
content, but if it

00:14:41.980 --> 00:14:45.640
previously was in expanding
layout state, by overriding

00:14:45.640 --> 00:14:47.840
OnMeasure and returning the
bigger height as opposed to

00:14:47.840 --> 00:14:50.940
the smaller height, will
keep it visible.

00:14:50.940 --> 00:14:54.070
And that lets me animate
its alpha value.

00:14:54.070 --> 00:14:56.740
And once it's completely
collapsed, that's when I set

00:14:56.740 --> 00:14:58.880
it to gone, because I
don't have anything

00:14:58.880 --> 00:15:00.160
else to do with it.

00:15:00.160 --> 00:15:02.520
So that's how you
can expand and

00:15:02.520 --> 00:15:03.900
collapse cells in ListView.

00:15:03.900 --> 00:15:05.150
Thanks for watching.

