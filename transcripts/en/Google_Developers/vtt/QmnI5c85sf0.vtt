WEBVTT
Kind: captions
Language: en

00:00:00.640 --> 00:00:02.740
So as we talked about
in our last video,

00:00:02.740 --> 00:00:04.500
the new Google Sign-In
Library contains

00:00:04.500 --> 00:00:07.300
a number of improvements
over what we had before.

00:00:07.300 --> 00:00:09.380
It's smaller, it's a
better user experience,

00:00:09.380 --> 00:00:11.850
and it accepts all Google
accounts even if they're not

00:00:11.850 --> 00:00:13.100
Google+ accounts.

00:00:13.100 --> 00:00:15.810
But how exactly do you
add it to an iOS project?

00:00:15.810 --> 00:00:18.790
Well, let's find out in this
exciting episode of "Route 85."

00:00:18.790 --> 00:00:20.124
[MUSIC PLAYING]

00:00:30.960 --> 00:00:32.980
So I have a fresh
new Xcode app that I

00:00:32.980 --> 00:00:35.524
want to add the new
Google Sign-In Library to.

00:00:35.524 --> 00:00:36.940
For the purpose
of this video, I'm

00:00:36.940 --> 00:00:38.940
going to do everything
in Swift 1.2,

00:00:38.940 --> 00:00:40.680
but it's very similar
in Objective-C,

00:00:40.680 --> 00:00:42.997
just add a few more
brackets here and there.

00:00:42.997 --> 00:00:44.830
Now, the first thing
I'm going to go through

00:00:44.830 --> 00:00:47.750
is going through all of the
configuration and setup steps,

00:00:47.750 --> 00:00:50.430
always the most fun
part of any project.

00:00:50.430 --> 00:00:52.517
That was sarcasm.

00:00:52.517 --> 00:00:55.100
Actually, it's not too bad now
with the new configuration flow

00:00:55.100 --> 00:00:55.654
that we have.

00:00:55.654 --> 00:00:57.820
So the first thing I'll do
is go to developers.googl

00:00:57.820 --> 00:01:01.387
e.com/mobile/add.

00:01:01.387 --> 00:01:02.970
Now I'll need to
enter my project name

00:01:02.970 --> 00:01:04.870
and my bundle ID here.

00:01:04.870 --> 00:01:07.630
And on this next page, I'm going
to select Sign-In and click

00:01:07.630 --> 00:01:08.399
the Enable button.

00:01:08.399 --> 00:01:10.440
It's going to go ahead
and create an OAuth client

00:01:10.440 --> 00:01:13.032
ID for me behind the scenes,
which is very helpful.

00:01:13.032 --> 00:01:14.990
And I don't need to do
anything else right now,

00:01:14.990 --> 00:01:17.100
so I'm just going
to click Continue.

00:01:17.100 --> 00:01:19.520
And then on this last
page, I have a plist file

00:01:19.520 --> 00:01:21.150
that I am going to download.

00:01:21.150 --> 00:01:22.830
I also have this
important line of text

00:01:22.830 --> 00:01:24.800
that I'm going to need
for my podspec file,

00:01:24.800 --> 00:01:27.660
so let's copy that.

00:01:27.660 --> 00:01:29.970
OK, up next, I'm going
to configure my CocoaPod

00:01:29.970 --> 00:01:32.207
to install the Google
Sign-In Library.

00:01:32.207 --> 00:01:34.540
I'll assume you know a little
something about CocoaPods,

00:01:34.540 --> 00:01:38.810
but if not, why not
check out this video?

00:01:38.810 --> 00:01:42.400
So I'll do a little pod
init here, edit the file,

00:01:42.400 --> 00:01:44.170
and paste in that
line I copied earlier

00:01:44.170 --> 00:01:45.860
from our Configuration Tool.

00:01:45.860 --> 00:01:48.600
You'll notice this is the
Google/signin CocoaPod, which

00:01:48.600 --> 00:01:51.410
not only includes Google
Sign-In, but also a few helper

00:01:51.410 --> 00:01:54.810
libraries that will help me
with the configuration process.

00:01:54.810 --> 00:01:56.320
So I'm going to
type pod install,

00:01:56.320 --> 00:02:00.040
and CocoaPods will download the
Google Sign-In Library for me.

00:02:00.040 --> 00:02:03.170
And once that's done, I'll
open up my .xcworkspace to see

00:02:03.170 --> 00:02:04.580
my new project.

00:02:04.580 --> 00:02:05.640
Oh, hello, pod library.

00:02:05.640 --> 00:02:07.170
Glad you could join us!

00:02:07.170 --> 00:02:09.610
Now remember that plist
file I downloaded earlier?

00:02:09.610 --> 00:02:13.516
I'm just going to add it to
my Xcode project like so.

00:02:13.516 --> 00:02:16.550
OK, now, next step, we
need to add two URL schemes

00:02:16.550 --> 00:02:17.560
to our project.

00:02:17.560 --> 00:02:19.390
These basically allow
other Google apps

00:02:19.390 --> 00:02:22.140
to properly send information
back to our application

00:02:22.140 --> 00:02:24.640
when the user is
done signing in.

00:02:24.640 --> 00:02:26.250
Now to add a URL
scheme, we're going

00:02:26.250 --> 00:02:29.110
to select our app
target here, go to Info,

00:02:29.110 --> 00:02:31.950
and scroll down to the bottom
where it says URL Schemes,

00:02:31.950 --> 00:02:34.675
and then click this plus
button to add a new one.

00:02:34.675 --> 00:02:37.050
The first URL scheme we're
going to add is our bundle ID.

00:02:37.050 --> 00:02:39.340
You can just add it here
in the URL scheme field

00:02:39.340 --> 00:02:41.120
and leave everything else as is.

00:02:41.120 --> 00:02:43.400
OK, so that one was
pretty straightforward.

00:02:43.400 --> 00:02:45.930
But the next one we need to
add is our OAuth 2.0 client

00:02:45.930 --> 00:02:47.420
ID in reverse.

00:02:47.420 --> 00:02:48.900
I know, weird, right?

00:02:48.900 --> 00:02:50.950
Now, in case you don't
have that memorized,

00:02:50.950 --> 00:02:53.270
you can actually find it
here in the plist file

00:02:53.270 --> 00:02:54.771
that we just added
to our project.

00:02:54.771 --> 00:02:55.270
See?

00:02:55.270 --> 00:02:56.210
There it is.

00:02:56.210 --> 00:02:58.740
We'll just copy that
and paste it here

00:02:58.740 --> 00:03:00.970
in the URL Scheme field.

00:03:00.970 --> 00:03:02.910
OK, finally, get to
write a line of code.

00:03:02.910 --> 00:03:04.030
Hurray!

00:03:04.030 --> 00:03:06.480
Now, before I get there, since
I am doing this in Swift,

00:03:06.480 --> 00:03:08.410
I need to add a
bridging header file.

00:03:08.410 --> 00:03:11.300
So I'm going to use the trick
of creating a dummy Objective-C

00:03:11.300 --> 00:03:13.920
file, telling Xcode, yes,
I would like you to create

00:03:13.920 --> 00:03:16.860
a bridging header file for me,
and then deleting these two

00:03:16.860 --> 00:03:18.604
files.

00:03:18.604 --> 00:03:20.770
Now, in my bridging header,
I'm just going to import

00:03:20.770 --> 00:03:23.490
Google/SignIn.h.

00:03:23.490 --> 00:03:25.100
Now I can go into
my AppDelegate,

00:03:25.100 --> 00:03:27.314
and in my application
didFinishLaunching method,

00:03:27.314 --> 00:03:29.147
I'm going to make a
call to GGLContext.share

00:03:29.147 --> 00:03:30.438
dInstance().configureWithError.

00:03:33.440 --> 00:03:36.870
This method will look and see
what Google/CocoaPod libraries

00:03:36.870 --> 00:03:38.580
I have added in our project.

00:03:38.580 --> 00:03:40.770
If it finds any, it will
attempt to configure them

00:03:40.770 --> 00:03:44.100
by reading in constants from
that plist file that I added.

00:03:44.100 --> 00:03:46.266
In fact, if I run
my app right now,

00:03:46.266 --> 00:03:48.390
you'll see here in the
console that it successfully

00:03:48.390 --> 00:03:49.626
configured SignIn.

00:03:49.626 --> 00:03:51.250
It'll also report
that it didn't bother

00:03:51.250 --> 00:03:53.720
trying to configure things
like Analytics or Admob,

00:03:53.720 --> 00:03:55.830
because we haven't installed
those CocoaPods yet.

00:03:55.830 --> 00:03:59.372
But if we had, it would try and
set those libraries up as well.

00:03:59.372 --> 00:04:01.580
Whew, that was an awful lot
of setup, but we're done.

00:04:01.580 --> 00:04:04.134
Let's get into writing
some more code.

00:04:04.134 --> 00:04:06.300
There are two delegates you
need to be aware of when

00:04:06.300 --> 00:04:07.850
you're dealing with Sign-in.

00:04:07.850 --> 00:04:09.870
The GIDSignInDelegate
is the Delegate

00:04:09.870 --> 00:04:12.560
that will be called when the
user has finished signing in.

00:04:12.560 --> 00:04:14.610
Good candidates for this
are your AppDelegate,

00:04:14.610 --> 00:04:16.110
your main ViewController,
or perhaps

00:04:16.110 --> 00:04:19.079
a singleton class that
represents your user.

00:04:19.079 --> 00:04:21.720
The GIDSignInUIDelegate
is the delegate

00:04:21.720 --> 00:04:24.360
that our library requires
in order to properly display

00:04:24.360 --> 00:04:26.000
the embedded WebView.

00:04:26.000 --> 00:04:28.720
It's a little weird in that it's
required for you to set this,

00:04:28.720 --> 00:04:30.759
but it contains all
optional methods

00:04:30.759 --> 00:04:33.300
that you generally don't need
to write if your SignInDelegate

00:04:33.300 --> 00:04:34.591
ends up being a ViewController.

00:04:34.591 --> 00:04:36.560
So very frequently,
you're just going

00:04:36.560 --> 00:04:38.150
to say that the
UIViewController that

00:04:38.150 --> 00:04:41.190
contains your sign-in button
is your SignInUIDelegate,

00:04:41.190 --> 00:04:43.680
and then not implement any
of the optional methods.

00:04:43.680 --> 00:04:45.320
That's what I
typically do, anyway.

00:04:45.320 --> 00:04:48.630
This'll make more sense when
you see it in action, trust me.

00:04:48.630 --> 00:04:51.390
So let's start with
our GIDSignInDelegate.

00:04:51.390 --> 00:04:53.610
I think maybe I'll declare
that my AppDelegate is

00:04:53.610 --> 00:04:54.710
my SignInDelegate.

00:04:54.710 --> 00:04:56.900
So I'll add the
declaration here,

00:04:56.900 --> 00:04:59.190
and I can set it to self
here in my application

00:04:59.190 --> 00:05:00.615
didFinishLaunching method.

00:05:00.615 --> 00:05:02.800
And now I'll need to
implement the required

00:05:02.800 --> 00:05:05.751
signIn didSignInForUser
withError method.

00:05:05.751 --> 00:05:08.250
For now, I'm just going to print
a few pieces of information

00:05:08.250 --> 00:05:11.520
if we succeed and print out
the error message if we fail.

00:05:11.520 --> 00:05:13.630
Note that I'm
still on Swift 1.2,

00:05:13.630 --> 00:05:16.250
so I'm using println
instead of print.

00:05:16.250 --> 00:05:18.610
Oh, and by the way, note that
also getting an error here

00:05:18.610 --> 00:05:19.737
is pretty common.

00:05:19.737 --> 00:05:22.320
The most frequent cause is that
the user clicks Cancel instead

00:05:22.320 --> 00:05:24.672
of signing in, so don't
throw an assertion error

00:05:24.672 --> 00:05:25.380
here or anything.

00:05:25.380 --> 00:05:26.377
Handle it gracefully.

00:05:26.377 --> 00:05:28.210
Oh, and while we're
here at the AppDelegate,

00:05:28.210 --> 00:05:31.240
I'll also need to handle
any incoming URLs.

00:05:31.240 --> 00:05:33.020
Remember, the way
Google's native apps

00:05:33.020 --> 00:05:34.910
send information back
to our application

00:05:34.910 --> 00:05:36.840
is through an incoming URL.

00:05:36.840 --> 00:05:38.710
That's why I had to
set those crazy URL

00:05:38.710 --> 00:05:40.960
schemes back to the
beginning, as you recall.

00:05:40.960 --> 00:05:44.370
So we need to make sure we
capture these incoming URLs.

00:05:44.370 --> 00:05:47.210
And the way to do that
is to add a application

00:05:47.210 --> 00:05:50.110
openURL sourceApplication
annotation method

00:05:50.110 --> 00:05:52.100
and pass in all the
information along

00:05:52.100 --> 00:05:55.030
to the corresponding Google
SignIn handleURL method,

00:05:55.030 --> 00:05:57.230
kind of like so.

00:05:57.230 --> 00:06:00.420
OK, next up, let's go add
that GIDSignInUIDelegate

00:06:00.420 --> 00:06:01.930
that I was talking about.

00:06:01.930 --> 00:06:03.020
I'm going to go into
our ViewController

00:06:03.020 --> 00:06:05.010
here, because that's where the
sign-in button is eventually

00:06:05.010 --> 00:06:06.000
going to live.

00:06:06.000 --> 00:06:09.240
I'm going to declare that
it's our GIDSignInUIDelegate,

00:06:09.240 --> 00:06:12.330
and then I will set that down
here in our viewDidLoad method.

00:06:12.330 --> 00:06:14.190
And then we'll never
speak of it again.

00:06:14.190 --> 00:06:17.650
Really, that's all
I need to do here.

00:06:17.650 --> 00:06:20.410
All that's left to do now is
actually sign the user in.

00:06:20.410 --> 00:06:22.360
Now for that, I'm
going to use a button.

00:06:22.360 --> 00:06:23.960
Adding a sign-in
button using Google's

00:06:23.960 --> 00:06:26.930
built-in sign-in button class
is pretty straightforward.

00:06:26.930 --> 00:06:29.100
I'll just need to add a
view to my storyboard here.

00:06:29.100 --> 00:06:30.840
We'll make it roughly
button shaped,

00:06:30.840 --> 00:06:33.050
and maybe we can add some
constraints to align it

00:06:33.050 --> 00:06:34.250
properly.

00:06:34.250 --> 00:06:36.340
Then I'm going to declare
that our View's Custom

00:06:36.340 --> 00:06:40.190
Class is a GIDSignInButton,
and we're done.

00:06:40.190 --> 00:06:41.170
No, really, that's it.

00:06:41.170 --> 00:06:42.920
Because this View is
now a sign-in button,

00:06:42.920 --> 00:06:45.010
it knows to start the
Google sign-in process

00:06:45.010 --> 00:06:46.290
when the user clicks on it.

00:06:46.290 --> 00:06:49.340
Heck, let's run this right
now in the simulator and see.

00:06:49.340 --> 00:06:51.500
So you can see that my
mysterious gray rectangle

00:06:51.500 --> 00:06:53.610
is now a beautiful
blue sign-in button.

00:06:53.610 --> 00:06:56.241
And when I click it, Google
starts the sign-in process.

00:06:56.241 --> 00:06:58.490
You'll also see that I get
the embedded ViewController

00:06:58.490 --> 00:07:00.114
because there are no
native Google apps

00:07:00.114 --> 00:07:01.890
to swap to in the simulator.

00:07:01.890 --> 00:07:04.780
And when I'm done, you'll get a
printout here of those messages

00:07:04.780 --> 00:07:07.120
that I put in my
didSignInForUserDelegate

00:07:07.120 --> 00:07:08.776
method.

00:07:08.776 --> 00:07:10.650
Now obviously, it'd be
silly to make our user

00:07:10.650 --> 00:07:12.650
sign in every time they
start our app, which

00:07:12.650 --> 00:07:14.439
is what our app currently does.

00:07:14.439 --> 00:07:15.980
Most likely in the
real world, you're

00:07:15.980 --> 00:07:18.563
going to want to cache some of
your user's profile information

00:07:18.563 --> 00:07:20.250
locally so that
when they return,

00:07:20.250 --> 00:07:22.034
you remember who
they are right away.

00:07:22.034 --> 00:07:23.450
However, we're
still going to want

00:07:23.450 --> 00:07:26.290
to sign them in using
Google services as well.

00:07:26.290 --> 00:07:28.930
Partly this will ensure that
if, say, our user updates

00:07:28.930 --> 00:07:31.290
their profile picture or
something on Google's side,

00:07:31.290 --> 00:07:34.550
that will get retrieved
and reflected in our app.

00:07:34.550 --> 00:07:36.550
But also, if we're using
Google Sign-In in order

00:07:36.550 --> 00:07:38.880
to perform other actions
using Google services--

00:07:38.880 --> 00:07:40.960
and I'll talk about that
more in the next video--

00:07:40.960 --> 00:07:44.010
we'll be sure to have an
up-to-date access token.

00:07:44.010 --> 00:07:47.389
To help with this, Google also
has a signInSilently method.

00:07:47.389 --> 00:07:48.930
This method will
try to sign the user

00:07:48.930 --> 00:07:52.110
in without showing them any
kind of confirmation dialog.

00:07:52.110 --> 00:07:55.120
So when we start up our app,
we're going to want to call it.

00:07:55.120 --> 00:07:56.980
If it works, then our
user is signed in,

00:07:56.980 --> 00:07:59.120
and we can update
any info as needed.

00:07:59.120 --> 00:08:02.130
And if it doesn't, well, then
we can show our Sign In button.

00:08:02.130 --> 00:08:04.970
Now, note that this
signInSilently method will only

00:08:04.970 --> 00:08:07.040
succeed if our user has
signed in to the app

00:08:07.040 --> 00:08:09.410
previously on this
device, hasn't signed out

00:08:09.410 --> 00:08:11.270
in the meantime,
and we haven't asked

00:08:11.270 --> 00:08:13.530
for any additional
permissions or scopes.

00:08:13.530 --> 00:08:16.070
So let's go ahead and add this.

00:08:16.070 --> 00:08:18.180
So In my ViewController's
viewDidLoad method,

00:08:18.180 --> 00:08:20.800
I'm just going to make a
call to signInSilently.

00:08:20.800 --> 00:08:23.910
And now when I start my
app, I'll wait a moment,

00:08:23.910 --> 00:08:25.420
and I'm once again signed in.

00:08:29.336 --> 00:08:30.710
Now that we can
sign the user in,

00:08:30.710 --> 00:08:33.001
we're going to want to sign
them out, at the very least

00:08:33.001 --> 00:08:33.992
for testing purposes.

00:08:33.992 --> 00:08:35.700
So I'm going to add
a simple button here.

00:08:35.700 --> 00:08:38.131
Now, I'm just going to create
an action to go with it.

00:08:38.131 --> 00:08:39.880
And in there, I will
call GIDSignIn.shared

00:08:39.880 --> 00:08:40.588
Instance.signOut.

00:08:42.704 --> 00:08:45.120
Note that no Delegate methods
are called here or anything.

00:08:45.120 --> 00:08:47.640
It's all done locally
and nearly instantly.

00:08:47.640 --> 00:08:52.100
And now I can sign out and
sign in as much as I'd like.

00:08:52.100 --> 00:08:54.490
Finally, it'd be awfully nice
if our interface actually

00:08:54.490 --> 00:08:56.497
changed when the user signs in.

00:08:56.497 --> 00:08:58.580
For that, I'm going to
need my AppDelegate, which,

00:08:58.580 --> 00:09:00.380
as you recall, is
my SignInDelegate,

00:09:00.380 --> 00:09:02.490
to talk to my
ViewController here.

00:09:02.490 --> 00:09:04.570
Obviously there's a lot
of ways we could do that.

00:09:04.570 --> 00:09:07.010
We could create our own
protocol and delegate.

00:09:07.010 --> 00:09:09.376
We could send up
an NSNotification,

00:09:09.376 --> 00:09:10.750
but I think I'll
do it by setting

00:09:10.750 --> 00:09:12.640
a property in my
AppDelegate that

00:09:12.640 --> 00:09:15.189
is a method to call when my
user has finished signing in.

00:09:15.189 --> 00:09:16.730
And then I can have
my ViewController

00:09:16.730 --> 00:09:21.202
pass an appropriate method to
my AppDelegate as that property.

00:09:21.202 --> 00:09:23.160
I'm not going to go over
all the plumbing here.

00:09:23.160 --> 00:09:25.360
You've probably done
something like this before.

00:09:25.360 --> 00:09:27.010
But when all is
said and done, I'm

00:09:27.010 --> 00:09:29.780
going to have my AppDelegate
tell my ViewController to call

00:09:29.780 --> 00:09:31.790
this refreshInterface method.

00:09:31.790 --> 00:09:34.660
Now, this method will see if
there is a valid currentUser

00:09:34.660 --> 00:09:37.590
object on my
GIDSignInSharedInstance,

00:09:37.590 --> 00:09:41.370
and if so, I can populate a few
on-screen labels and images.

00:09:41.370 --> 00:09:43.490
Put that together with
a few more UI elements,

00:09:43.490 --> 00:09:46.410
and you might have something
that looks a little like this.

00:09:46.410 --> 00:09:47.890
Ah, nice.

00:09:47.890 --> 00:09:48.640
So there you go.

00:09:48.640 --> 00:09:50.806
That's how you can get
started adding Google Sign-In

00:09:50.806 --> 00:09:52.186
to your own iOS project.

00:09:52.186 --> 00:09:54.060
For more details, please
be sure to check out

00:09:54.060 --> 00:09:55.660
all the documentation here.

00:09:55.660 --> 00:09:56.780
But we're not done yet.

00:09:56.780 --> 00:09:59.060
For a few more interesting
topics on Sign-In,

00:09:59.060 --> 00:10:00.301
follow me to the next video.

00:10:00.301 --> 00:10:00.800
Come on!

00:10:04.020 --> 00:10:04.780
What?

00:10:04.780 --> 00:10:06.030
What are you still doing here?

00:10:06.030 --> 00:10:07.530
I'm waiting for you
in the next video.

00:10:07.530 --> 00:10:08.090
Go on.

00:10:08.090 --> 00:10:08.810
Click it.

00:10:08.810 --> 00:10:09.730
Right there.

00:10:09.730 --> 00:10:10.600
Come on!

00:10:10.600 --> 00:10:11.690
We got to go.

00:10:11.690 --> 00:10:13.710
There's learning
to be had, people!

00:10:13.710 --> 00:10:17.360
[MUSIC PLAYING]

