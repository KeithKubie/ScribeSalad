WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.910
 <i>Android patterns for performance</i> 

00:00:01.910 --> 00:00:03.580
 So you are a hardworking person 

00:00:03.580 --> 00:00:05.940
 Watch each episode of Android Performance Patterns. 

00:00:06.590 --> 00:00:08.749
 Not every episode because Colt offers a lot of episodes 

00:00:08.749 --> 00:00:10.290
 Usually things say, 

00:00:10.290 --> 00:00:11.700
 Such as do not overuse the battery. 

00:00:11.940 --> 00:00:13.610
 Make effective HTTP requests. 

00:00:13.870 --> 00:00:15.370
 Censuses are similar to mechanical failures. 

00:00:15.370 --> 00:00:17.400
 All normal performance issues. 

00:00:17.400 --> 00:00:20.201
 You now know that you do not want a bulky APK package. 

00:00:20.201 --> 00:00:22.790
 You do not want unnecessary resources in your edition. 

00:00:23.220 --> 00:00:25.780
 But even though you know this, you may still have a bloated APK package. 

00:00:26.160 --> 00:00:27.327
 So how was this possible? 

00:00:27.327 --> 00:00:28.381
 I'm David East. 

00:00:28.381 --> 00:00:30.160
 And your resource economy 

00:00:30.160 --> 00:00:33.120
 It does not mean that the libraries you have listed will be economical as well. 

00:00:33.560 --> 00:00:34.826
 Here is this common scenario. 

00:00:35.006 --> 00:00:36.880
 You are using the Google Play services library 

00:00:36.880 --> 00:00:39.610
 To create an application that uses a single API package such as Maps. 

00:00:40.050 --> 00:00:42.440
 But your code instructions do not use them in logon functions. 

00:00:42.810 --> 00:00:45.740
 The library still includes all assets and charts 

00:00:45.740 --> 00:00:47.257
 Which allows people to sign in. 

00:00:47.257 --> 00:00:49.460
 Although you may be impressed by this button, 

00:00:49.460 --> 00:00:51.374
 You do not need the resource in the APK package. 

00:00:51.374 --> 00:00:53.290
 Because you can not remove the resource manually, 

00:00:53.290 --> 00:00:55.630
 It is included in the final package application. 

00:00:56.100 --> 00:00:58.780
 These are the things that produce inflated APK packages. 

00:00:59.330 --> 00:01:02.034
 This problem can be resolved by using the Gradle toolkit. 

00:01:02.034 --> 00:01:03.950
 Gradle can analyze all your code instructions 

00:01:03.950 --> 00:01:06.080
 To find assets that do not have a reference 

00:01:06.080 --> 00:01:07.860
 Then automatically remove them from your edition. 

00:01:08.610 --> 00:01:10.210
 It does not stop here. 

00:01:10.210 --> 00:01:12.588
 Gradle will examine and analyze the strings in your code 

00:01:12.588 --> 00:01:15.637
 For situations where you do things like create a path name at run time 

00:01:15.937 --> 00:01:17.400
 It will also browse your asset folder, 

00:01:17.400 --> 00:01:19.660
 Open text files, CSS and JavaScript files 

00:01:19.660 --> 00:01:21.060
 Check them out too. 

00:01:22.330 --> 00:01:24.840
 To start this, simply enable the Resource Shrink tag 

00:01:24.840 --> 00:01:28.150
 In the automatic configuration of your Gradle. You'll also need to enable miniaturization. 

00:01:28.150 --> 00:01:30.610
 This will trigger the Proguard that removes the code 

00:01:30.610 --> 00:01:32.710
 From linked libraries that your app does not use. 

00:01:33.080 --> 00:01:35.430
 Be aware that this must be done first. 

00:01:35.770 --> 00:01:37.642
 Otherwise Gradle will get involved a lot 

00:01:37.642 --> 00:01:40.390
 Because it is still believed that there are assets passed through the reference. 

00:01:41.050 --> 00:01:44.310
 After that, things will get much better. 

00:01:44.830 --> 00:01:46.630
 After connecting Google Play services, 

00:01:46.630 --> 00:01:49.230
 Gradle sees that there are no paths using login resources 

00:01:49.230 --> 00:01:51.040
 And exclude them from your APK package, 

00:01:51.240 --> 00:01:53.010
 That is precisely what we wanted. 

00:01:53.820 --> 00:01:55.600
 But there is a simple warning. 

00:01:55.600 --> 00:01:58.030
 That there may be negative or positive results. 

00:01:58.030 --> 00:01:59.230
 You may find that some of your assets 

00:01:59.230 --> 00:02:01.030
 They are cut when you want to keep them 

00:02:01.030 --> 00:02:03.000
 You find assets to be retained when you want to cut them. 

00:02:03.360 --> 00:02:06.500
 We can solve this by using SMTY accepting and rejecting tools 

00:02:06.500 --> 00:02:08.298
 To set the desired behavior. 

00:02:08.688 --> 00:02:11.008
 But before cutting resources, 

00:02:11.008 --> 00:02:13.830
 It is important to realize that Gradle has limitations. 

00:02:14.190 --> 00:02:15.940
 Gradle will not get rid of the precision folders 

00:02:15.940 --> 00:02:17.307
 Or multi-language folders. 

00:02:17.527 --> 00:02:19.320
 This may be needed at run time 

00:02:19.320 --> 00:02:22.646
 Because the compiler does not know early what the end user will need. 

00:02:23.256 --> 00:02:25.910
 Managing your resources requires some extra effort on your part, 

00:02:25.910 --> 00:02:28.260
 But this will be a great performance gain for your user. 

00:02:28.260 --> 00:02:31.115
 User experience is the primary goal of performance. 

00:02:31.815 --> 00:02:35.120
 Find out more by watching the rest of Android Performance Patterns 

00:02:35.120 --> 00:02:36.707
 Any Colt program. 

00:02:36.707 --> 00:02:38.690
 Do not miss joining the Google+ community 

00:02:38.690 --> 00:02:40.750
 For another great content as well. 

00:02:41.030 --> 00:02:43.150
 Consider small things but do not panic. 

00:02:43.500 --> 00:02:44.990
 Always remember that performance is important. 

