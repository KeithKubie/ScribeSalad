WEBVTT
Kind: captions
Language: en

00:00:00.740 --> 00:00:03.040
So now when we have introduced indexes, let's

00:00:03.040 --> 00:00:05.550
talk about the size of these index tables,

00:00:05.550 --> 00:00:07.430
since this is important to be aware of

00:00:07.430 --> 00:00:12.190
when you build datastore applications. Using the developer console,

00:00:12.190 --> 00:00:14.090
you can see the index sizes under the

00:00:14.090 --> 00:00:18.260
datastore dashboard page. Here, we display the dashboard for

00:00:18.260 --> 00:00:21.060
a very simple application. And as you can

00:00:21.060 --> 00:00:25.187
see, the entities themselves do take up 6.75 kilobytes.

00:00:25.187 --> 00:00:28.840
However, the built-in indexes for those entities, they

00:00:28.840 --> 00:00:32.960
take up 57.12 kilobytes. This is actually a

00:00:32.960 --> 00:00:35.920
common scenario. Indexes very often take up more

00:00:35.920 --> 00:00:38.280
space than the storage required just to store

00:00:38.280 --> 00:00:41.860
the entities. The built-in indexes are the indexes

00:00:41.860 --> 00:00:43.750
that are generated for each of the individual

00:00:43.750 --> 00:00:46.482
properties, as we talked about for the conference

00:00:46.482 --> 00:00:50.130
city property. There's also something called composite indexes,

00:00:50.130 --> 00:00:54.820
but we'll talk about those shortly. As you can see, if you let data store

00:00:54.820 --> 00:01:00.050
maintain an index for each individual property, it can take up a lot of space.

00:01:00.050 --> 00:01:02.570
Therefore, it's important to think about which

00:01:02.570 --> 00:01:04.920
properties you need to query on. So you

00:01:04.920 --> 00:01:08.050
only generate indexes for those. Let's look at

00:01:08.050 --> 00:01:09.690
how you can control that in your code.

