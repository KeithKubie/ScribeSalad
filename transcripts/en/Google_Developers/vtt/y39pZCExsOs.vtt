WEBVTT
Kind: captions
Language: en

00:00:00.239 --> 00:00:02.280
JOHN MCCUTCHAN: Hi,
everyone, I'm John McCutchan.

00:00:02.280 --> 00:00:03.696
TODD TURNIDGE: I
am Todd Turnidge.

00:00:03.696 --> 00:00:07.140
JOHN MCCUTCHAN: We work
on Observatory together.

00:00:07.140 --> 00:00:09.250
So Observatory is
a web application

00:00:09.250 --> 00:00:11.050
that's hosted by the VM.

00:00:11.050 --> 00:00:15.570
It provides a suite of program
inspection analysis tools.

00:00:15.570 --> 00:00:18.160
Everyone on the Dart VM
team uses Observatory almost

00:00:18.160 --> 00:00:20.890
every day, so we're
extremely committed to making

00:00:20.890 --> 00:00:22.426
this tool really powerful.

00:00:22.426 --> 00:00:24.800
And every time you come to us
with a performance problem,

00:00:24.800 --> 00:00:29.202
the first thing we do is we
look inside of Observatory.

00:00:29.202 --> 00:00:31.035
For those of you who
don't know, Observatory

00:00:31.035 --> 00:00:33.919
is written in Polymer and Dart.

00:00:33.919 --> 00:00:35.460
TODD TURNIDGE: Yeah,
and a little bit

00:00:35.460 --> 00:00:36.543
of an agenda for our talk.

00:00:36.543 --> 00:00:40.071
John's going to give a demo
of how he uses Observatory.

00:00:40.071 --> 00:00:41.820
I'm going to demo some
of the new debugger

00:00:41.820 --> 00:00:42.820
features in Observatory.

00:00:42.820 --> 00:00:45.240
Then we'll go on to talk
in general about the tool.

00:00:45.240 --> 00:00:48.810
JOHN MCCUTCHAN: All right, so
I'm going to demo something

00:00:48.810 --> 00:00:51.390
that I do on a regular
basis in my day job,

00:00:51.390 --> 00:00:55.249
which is stare at Box2D
performance in Observatory.

00:00:55.249 --> 00:00:56.540
TODD TURNIDGE: So what's Box2d?

00:00:56.540 --> 00:01:00.104
JOHN MCCUTCHAN: So Box2D
is a physics engine.

00:01:00.104 --> 00:01:01.520
There's benchmarks
built around it

00:01:01.520 --> 00:01:03.569
that everyone likes to
compare the performance

00:01:03.569 --> 00:01:05.860
of different VMs and runtimes,
so it's really important

00:01:05.860 --> 00:01:08.387
that the Dart VM
runs Box2D well.

00:01:08.387 --> 00:01:10.470
TODD TURNIDGE: Let's
increase the font size a bit,

00:01:10.470 --> 00:01:11.660
or it doesn't matter.

00:01:11.660 --> 00:01:14.010
JOHN MCCUTCHAN: Actually,
it's mostly visual, so.

00:01:14.010 --> 00:01:15.310
All right, so the first
thing I'm going to do

00:01:15.310 --> 00:01:17.330
is I'm just going to
click on one of the tests,

00:01:17.330 --> 00:01:20.210
and this is just a
simple blob test program.

00:01:20.210 --> 00:01:22.070
And now I'm going to
connect to Observatory.

00:01:22.070 --> 00:01:23.736
So in the past, we
had Observatory baked

00:01:23.736 --> 00:01:25.670
into dev tools, but
we found that kind

00:01:25.670 --> 00:01:28.330
of cramped Observatory's
style, because Observatory

00:01:28.330 --> 00:01:31.930
likes to have lots of links and
the browser-like navigation.

00:01:31.930 --> 00:01:35.440
So now we just print a link
in the console that takes you

00:01:35.440 --> 00:01:39.150
to Observatory for this demo.

00:01:39.150 --> 00:01:42.819
Now, the main page in
Observatory lists the isolates,

00:01:42.819 --> 00:01:44.485
and we can see that
we have one isolate,

00:01:44.485 --> 00:01:47.510
and it's called Blob Test,
which is the program that we're

00:01:47.510 --> 00:01:49.290
running on the other tab.

00:01:49.290 --> 00:01:50.915
So if I click on the
Blob Test isolate,

00:01:50.915 --> 00:01:53.380
it takes us to the main
page for the isolate, where

00:01:53.380 --> 00:01:56.640
we can see information about
race and execution history,

00:01:56.640 --> 00:01:59.630
links to various tools that
are built into Observatory,

00:01:59.630 --> 00:02:01.330
information about the heap.

00:02:01.330 --> 00:02:03.560
What I'm going to do next
is go to the root library

00:02:03.560 --> 00:02:06.070
for this isolate, and
this is the library that

00:02:06.070 --> 00:02:07.780
contains the main function.

00:02:07.780 --> 00:02:10.050
So when we're looking
at a library page,

00:02:10.050 --> 00:02:14.270
we see the other libraries
that this library's imported,

00:02:14.270 --> 00:02:16.270
the scripts inside of it,
the classes contained,

00:02:16.270 --> 00:02:17.280
and functions contained.

00:02:17.280 --> 00:02:19.310
Now, all of these are
just regular hyperlinks

00:02:19.310 --> 00:02:22.090
that you can open up a new
tabs and browse around and even

00:02:22.090 --> 00:02:22.980
share.

00:02:22.980 --> 00:02:25.350
So why don't I start
with the blob test class.

00:02:25.350 --> 00:02:27.340
So now we're looking
at a classes page,

00:02:27.340 --> 00:02:30.430
and I'm going to go up here
and click Refresh Coverage.

00:02:30.430 --> 00:02:33.090
So this class has
three functions.

00:02:33.090 --> 00:02:35.530
Here's some information about
instances that we'll get to,

00:02:35.530 --> 00:02:37.969
but let's just take a
look at code coverage.

00:02:37.969 --> 00:02:39.510
TODD TURNIDGE: What's
the green mean?

00:02:39.510 --> 00:02:40.926
JOHN MCCUTCHAN:
So the green means

00:02:40.926 --> 00:02:44.750
that this is an executable
line that has executed.

00:02:44.750 --> 00:02:47.590
And if there's no color next to
it, the line is not executable.

00:02:47.590 --> 00:02:49.490
You can see this is
just a closing brace.

00:02:49.490 --> 00:02:51.540
There's no statement
on this line.

00:02:51.540 --> 00:02:52.920
So if we scan
through this class,

00:02:52.920 --> 00:02:55.777
we can see that actually every
single line in this class

00:02:55.777 --> 00:02:57.860
has executed, which makes
sense, because this just

00:02:57.860 --> 00:03:00.314
sets up the demo, which
is already running.

00:03:00.314 --> 00:03:01.772
Why don't we try
and find some code

00:03:01.772 --> 00:03:04.930
that hasn't executed, so we
can see what that looks like.

00:03:04.930 --> 00:03:07.180
So what I'm going to do is
I'm going to click on this,

00:03:07.180 --> 00:03:10.410
and this is showing runtime type
feedback for this line of code,

00:03:10.410 --> 00:03:13.340
so this method invocation
of new polygon shape,

00:03:13.340 --> 00:03:16.980
we actually see that
it's of this class,

00:03:16.980 --> 00:03:18.897
and this is the
class's constructor.

00:03:18.897 --> 00:03:21.105
So why don't I click over
to the polygon shape class,

00:03:21.105 --> 00:03:22.070
and we'll take a look.

00:03:25.060 --> 00:03:26.850
Now we're on a
polygon shape class,

00:03:26.850 --> 00:03:29.280
and I'm trying to find some
code that hasn't executed,

00:03:29.280 --> 00:03:32.170
so we can see what that
looks like in Observatory.

00:03:32.170 --> 00:03:33.170
So I scroll down.

00:03:33.170 --> 00:03:34.210
We see some green.

00:03:34.210 --> 00:03:35.930
Here's some red, more red.

00:03:35.930 --> 00:03:38.760
So the red is these
lines are executable,

00:03:38.760 --> 00:03:41.330
but they haven't executed yet.

00:03:41.330 --> 00:03:43.550
Here's this function
Set As Edge,

00:03:43.550 --> 00:03:45.470
which hasn't executed yet.

00:03:45.470 --> 00:03:47.950
Why do we actually, while
the program is still running,

00:03:47.950 --> 00:03:50.540
just execute it and
see what happens.

00:03:50.540 --> 00:03:52.170
So to do that, I'm
going to go up here,

00:03:52.170 --> 00:03:55.070
and I'm going to find instances
of the polygon shape class.

00:03:55.070 --> 00:03:56.810
TODD TURNIDGE: So these are the
strongly reachable instances

00:03:56.810 --> 00:03:57.710
of polygon shape?

00:03:57.710 --> 00:03:59.376
JOHN MCCUTCHAN: Yep,
these are instances

00:03:59.376 --> 00:04:02.610
inside your program's heap that
are still alive in this class.

00:04:02.610 --> 00:04:06.080
So I'll just command click
and open up a new tab,

00:04:06.080 --> 00:04:08.290
and now we're actually
looking at a specific instance

00:04:08.290 --> 00:04:09.950
of the polygon shape.

00:04:09.950 --> 00:04:11.980
Now I could just go
down here on this line

00:04:11.980 --> 00:04:14.170
and start typing
regular Dart code.

00:04:14.170 --> 00:04:19.999
So I'll just try and execute
this set as edge function.

00:04:23.490 --> 00:04:25.770
OK, so that function
ran an it returned

00:04:25.770 --> 00:04:27.750
null, which is what we expect.

00:04:27.750 --> 00:04:30.580
Now let's go back over here.

00:04:30.580 --> 00:04:34.810
And we can see that-- sorry,
we'll go back over here,

00:04:34.810 --> 00:04:36.120
and I'll refresh code coverage.

00:04:41.880 --> 00:04:45.171
And we can see that we have
executed this line of code.

00:04:45.171 --> 00:04:47.420
Now why don't I go ahead and
load up a different demo.

00:04:50.090 --> 00:04:53.390
I'll try this domino tower.

00:04:53.390 --> 00:04:56.860
So I'll go back to the
Observatory main page,

00:04:56.860 --> 00:04:59.470
and now we can see that we have
a new isolate for this tab.

00:04:59.470 --> 00:05:01.510
And I'll show you another
feature in Observatory

00:05:01.510 --> 00:05:04.000
called the Allocation Profile.

00:05:04.000 --> 00:05:05.870
So at the top of the
Allocation Profile,

00:05:05.870 --> 00:05:08.750
you have high level information
about both of your heaps,

00:05:08.750 --> 00:05:10.700
how big they are,
how many collections

00:05:10.700 --> 00:05:14.050
have occurred, how frequent
the collections are.

00:05:14.050 --> 00:05:15.950
And then underneath,
we have a break

00:05:15.950 --> 00:05:19.200
down on a class-by-class
basis of allocations.

00:05:19.200 --> 00:05:23.394
So we can see that the most
allocated class in this program

00:05:23.394 --> 00:05:25.560
is double, which makes
sense, because it's a physics

00:05:25.560 --> 00:05:27.460
simulation, so you'd
expect a lot of doubles

00:05:27.460 --> 00:05:29.610
and other floating point types.

00:05:29.610 --> 00:05:31.660
List, we can't conclude
much, because they're

00:05:31.660 --> 00:05:33.497
so common in Dart already.

00:05:33.497 --> 00:05:35.330
TODD TURNIDGE: Yeah,
it's not a smoking gun.

00:05:35.330 --> 00:05:36.850
JOHN MCCUTCHAN: No,
but one byte string,

00:05:36.850 --> 00:05:38.308
this actually looks
really strange.

00:05:38.308 --> 00:05:41.610
This is a physics
simulation, and somehow we've

00:05:41.610 --> 00:05:46.230
allocated over a million
strings, or a mega string.

00:05:46.230 --> 00:05:48.836
TODD TURNIDGE: A mega string.

00:05:48.836 --> 00:05:50.210
JOHN MCCUTCHAN:
So why don't we--

00:05:50.210 --> 00:05:52.585
I think this looks really
weird, because after a one byte

00:05:52.585 --> 00:05:55.429
string, we see Float64Array,
main to vector two.

00:05:55.429 --> 00:05:57.970
These all make a lot of sense
for what this program is doing.

00:05:57.970 --> 00:05:59.969
Something strange is
happening, and why don't we

00:05:59.969 --> 00:06:01.764
try and figure out
what's going on.

00:06:01.764 --> 00:06:03.180
So in order to
figure out the rate

00:06:03.180 --> 00:06:05.737
that we're allocating
one byte strings,

00:06:05.737 --> 00:06:07.195
I'm going to reset
the accumulator.

00:06:07.195 --> 00:06:10.050
And this accumulator's
a counter that I zero,

00:06:10.050 --> 00:06:12.010
and then we increment
every time we allocate

00:06:12.010 --> 00:06:13.350
an instance of that class.

00:06:13.350 --> 00:06:16.880
So I'll reset the counter,
switch back over to the demo,

00:06:16.880 --> 00:06:18.805
and let this run for,
let's say, five seconds.

00:06:21.822 --> 00:06:24.600
I'll come back,
and I'll refresh.

00:06:24.600 --> 00:06:27.200
So we can see in five
seconds we actually

00:06:27.200 --> 00:06:30.690
allocated almost two million
new instances of string.

00:06:30.690 --> 00:06:33.250
This is really
bizarre, and we need

00:06:33.250 --> 00:06:35.190
to figure out what's going on.

00:06:35.190 --> 00:06:37.330
So why don't we go
over to the CPU profile

00:06:37.330 --> 00:06:41.740
and see if we see anything
string-related that's hot.

00:06:41.740 --> 00:06:43.950
So we're looking at
the CPU profile now,

00:06:43.950 --> 00:06:46.470
and we see these different
categories, like Dart, Native,

00:06:46.470 --> 00:06:48.650
GC New Space.

00:06:48.650 --> 00:06:51.150
Dart is the category that's
set when we're actually

00:06:51.150 --> 00:06:52.249
executing script code.

00:06:52.249 --> 00:06:54.540
TODD TURNIDGE: So Dart is
the stuff that you all write,

00:06:54.540 --> 00:06:55.040
basically?

00:06:55.040 --> 00:06:58.032
JOHN MCCUTCHAN: Yes, exactly,
and so if we skim down here,

00:06:58.032 --> 00:06:59.740
I'm looking for
something string-related.

00:06:59.740 --> 00:07:02.810
We see stuff around vector
two calling sign and QoS.

00:07:02.810 --> 00:07:05.090
This all fits.

00:07:05.090 --> 00:07:10.180
And down here at about 1.76%,
we see string one byte string

00:07:10.180 --> 00:07:12.710
concat all, so something is
doing string concatenation,

00:07:12.710 --> 00:07:14.750
but we don't know what yet.

00:07:14.750 --> 00:07:18.410
So if I expand this, we can
see who's triggering the string

00:07:18.410 --> 00:07:20.780
concatenation, and we see
that string concatenation

00:07:20.780 --> 00:07:22.890
is being triggered by
string base interpolate.

00:07:22.890 --> 00:07:24.640
TODD TURNIDGE: So we're
seeing the callers

00:07:24.640 --> 00:07:25.610
here as we open it up?

00:07:25.610 --> 00:07:28.960
JOHN MCCUTCHAN: Exactly, so
interpolate calls concat,

00:07:28.960 --> 00:07:32.880
and the canvas
rendering context set

00:07:32.880 --> 00:07:36.470
fill color and set stroke
color RGB call string base

00:07:36.470 --> 00:07:38.540
interpolate.

00:07:38.540 --> 00:07:40.660
None of this is my code.

00:07:40.660 --> 00:07:43.610
Canvas rendering context
2D is part of Dart HTML.

00:07:43.610 --> 00:07:46.060
But underneath this we can
see canvas draw set color.

00:07:46.060 --> 00:07:48.334
This is actually part of
the Box2D demo harness.

00:07:48.334 --> 00:07:50.500
So what I'm going to do is
I'm going to open this up

00:07:50.500 --> 00:07:53.270
in another tab, and we can
look at what the source

00:07:53.270 --> 00:07:55.130
code of this function does.

00:07:55.130 --> 00:07:57.930
Now, this function gets
a color as a vector,

00:07:57.930 --> 00:07:59.940
and it passes in
the vector contents

00:07:59.940 --> 00:08:02.610
for red, green,
blue and then passes

00:08:02.610 --> 00:08:03.910
in a hard coded alpha value.

00:08:03.910 --> 00:08:04.860
TODD TURNIDGE: It
looks innocent.

00:08:04.860 --> 00:08:07.276
JOHN MCCUTCHAN: Yeah, I don't
see any string interpolation

00:08:07.276 --> 00:08:10.080
going on here at all or really
have any intuition as to why

00:08:10.080 --> 00:08:11.610
we would be doing that.

00:08:11.610 --> 00:08:14.980
So why do we actually dig
in and look at the Dart HTML

00:08:14.980 --> 00:08:17.099
implementation of
this function, which,

00:08:17.099 --> 00:08:18.640
because we're running
in Observatory,

00:08:18.640 --> 00:08:20.223
and we have access
to all source code,

00:08:20.223 --> 00:08:22.070
we can actually
take a look at this.

00:08:22.070 --> 00:08:23.870
And we see the smoking
gun right away.

00:08:23.870 --> 00:08:25.870
We see that even
though we're passing

00:08:25.870 --> 00:08:28.270
in the color as integers,
immediately a string

00:08:28.270 --> 00:08:32.690
is interpolated of RGBA, and
then this string is passed off

00:08:32.690 --> 00:08:33.930
to the Dom.

00:08:33.930 --> 00:08:35.929
So even though we've gone
to all of this trouble

00:08:35.929 --> 00:08:39.450
to keep the color as integers,
every single time we set it

00:08:39.450 --> 00:08:43.230
on the canvas, we're
indirectly allocating a string,

00:08:43.230 --> 00:08:45.840
or, in our case, two strings.

00:08:45.840 --> 00:08:50.000
So why don't we see if
we can fix this, and just

00:08:50.000 --> 00:08:52.567
like a cooking show,
I am going to--

00:08:52.567 --> 00:08:54.650
TODD TURNIDGE: It's ready
to come out of the oven.

00:08:54.650 --> 00:08:56.540
JOHN MCCUTCHAN: Yeah, and then
I'll go ahead an load up--

00:08:56.540 --> 00:08:57.950
TODD TURNIDGE: In fact, what
do you call this project?

00:08:57.950 --> 00:08:59.010
JOHN MCCUTCHAN: This
is the turkey project.

00:08:59.010 --> 00:09:01.380
The turkey Is done, and
it's fixed, so let's see.

00:09:05.140 --> 00:09:11.470
So I'll go back to domino tower,
bringing up Observatory again,

00:09:11.470 --> 00:09:14.500
and I'm going to hop over
to the Allocation Profile,

00:09:14.500 --> 00:09:15.375
and i come down here.

00:09:15.375 --> 00:09:18.280
I'm going to reset
the accumulator again.

00:09:18.280 --> 00:09:21.524
I'm going to let this run
for about five seconds.

00:09:21.524 --> 00:09:24.850
I come back over here,
and I'm going to refresh.

00:09:24.850 --> 00:09:28.540
And we can see that one byte
string has now fallen way down.

00:09:28.540 --> 00:09:33.090
It's now only 1,000 strings
are allocated in every five

00:09:33.090 --> 00:09:37.740
seconds versus two million,
so this is a drastic reduction

00:09:37.740 --> 00:09:40.650
in GC pressure and allocation.

00:09:40.650 --> 00:09:42.129
TODD TURNIDGE: Could be worse.

00:09:42.129 --> 00:09:43.670
JOHN MCCUTCHAN:
Could be a lot worse.

00:09:43.670 --> 00:09:45.544
But now let's go back
over to the CPU profile

00:09:45.544 --> 00:09:47.630
and see if we can see
this one byte string

00:09:47.630 --> 00:09:50.315
function as being hot.

00:09:50.315 --> 00:09:50.940
I don't see it.

00:09:53.185 --> 00:09:55.810
TODD TURNIDGE: I think that all
the calls were from that thing,

00:09:55.810 --> 00:09:57.768
so all the string
interpolation you've probably

00:09:57.768 --> 00:09:58.750
removed at this point.

00:09:58.750 --> 00:09:59.430
JOHN MCCUTCHAN:
Yeah, I think so.

00:09:59.430 --> 00:10:01.204
TODD TURNIDGE: That's
1 and 1/2% you've

00:10:01.204 --> 00:10:02.370
pulled out of the benchmark.

00:10:02.370 --> 00:10:03.090
JOHN MCCUTCHAN:
Yeah, so 1 and 1/2%

00:10:03.090 --> 00:10:05.180
faster of running
this benchmark demo,

00:10:05.180 --> 00:10:08.490
and we were relegating
a lot less memory,

00:10:08.490 --> 00:10:11.440
so all in all, a net win.

00:10:11.440 --> 00:10:12.756
Let's go back to the slides.

00:10:16.330 --> 00:10:17.910
All right, so what
did we just see?

00:10:17.910 --> 00:10:20.590
Well, you saw me browsing
through the running program,

00:10:20.590 --> 00:10:22.480
looking at live code coverage.

00:10:22.480 --> 00:10:25.310
I was able to inspect
specific instances,

00:10:25.310 --> 00:10:28.480
locate instances of classes
that I was interested in,

00:10:28.480 --> 00:10:31.410
invoke code on a
running instance.

00:10:31.410 --> 00:10:33.100
We looked at the
Allocation Profile,

00:10:33.100 --> 00:10:38.490
which is per class statistics
and per heaps garbage space

00:10:38.490 --> 00:10:39.390
information as well.

00:10:39.390 --> 00:10:41.640
We use the user controllable
accumulated to figure out

00:10:41.640 --> 00:10:44.234
how many strings we're
actually allocating,

00:10:44.234 --> 00:10:46.150
and then we use the CPU
profile to go and find

00:10:46.150 --> 00:10:48.490
the smoking gun that was
actually triggering all

00:10:48.490 --> 00:10:50.747
of these string allocations.

00:10:50.747 --> 00:10:52.330
So now I'm going to
turn over to Todd.

00:10:52.330 --> 00:10:55.521
He's gong to give
you a debugger demo.

00:10:55.521 --> 00:10:56.020
OK

00:10:56.020 --> 00:10:57.603
TODD TURNIDGE: So,
the debugger's sort

00:10:57.603 --> 00:10:59.160
of a fresh feature
in Observatory,

00:10:59.160 --> 00:11:04.130
very recently added,
all done in 2015.

00:11:04.130 --> 00:11:06.440
And I'm going to show
you the debugger, finding

00:11:06.440 --> 00:11:08.910
a bug in an actual program.

00:11:08.910 --> 00:11:15.310
Now this program is one
that I wrote with my kids.

00:11:15.310 --> 00:11:16.480
Where is it?

00:11:16.480 --> 00:11:18.350
Oh, there it is.

00:11:18.350 --> 00:11:22.110
My kids, I want to teach them
programming, the family trade,

00:11:22.110 --> 00:11:23.987
so we're writing a
text adventure game.

00:11:23.987 --> 00:11:26.320
So this will be the second
game demo you've seen today--

00:11:26.320 --> 00:11:28.930
significantly more low tech.

00:11:28.930 --> 00:11:30.894
So you're in a
mysterious chamber.

00:11:30.894 --> 00:11:32.060
There's an exit to the west.

00:11:32.060 --> 00:11:33.499
A deadly mousetrap lies nearby.

00:11:33.499 --> 00:11:35.040
For those of you
who aren't familiar,

00:11:35.040 --> 00:11:37.040
a text adventure game,
you type in commands like

00:11:37.040 --> 00:11:40.367
'take mousetrap,' and then
you're holding a mousetrap,

00:11:40.367 --> 00:11:42.700
and you can take your inventory,
and you're holding one.

00:11:42.700 --> 00:11:45.030
You can around.

00:11:45.030 --> 00:11:47.210
You can go-- oh, here's
a rusty revolver,

00:11:47.210 --> 00:11:48.830
so I'll take the revolver.

00:11:48.830 --> 00:11:50.420
We'll go south.

00:11:50.420 --> 00:11:52.600
Now there's a bug in
this program, which

00:11:52.600 --> 00:11:55.560
is my kids want you to be
able to fire the revolver

00:11:55.560 --> 00:11:58.640
and to have something
delightful happen in the game.

00:11:58.640 --> 00:12:02.860
So let's try to
shoot the revolver.

00:12:02.860 --> 00:12:04.310
It says, it's too
rusty to shoot.

00:12:04.310 --> 00:12:07.050
That's not the bug yet, so
I'll all take the oil can.

00:12:07.050 --> 00:12:11.570
I'll oil the revolver,
and now I'll shoot it.

00:12:11.570 --> 00:12:13.325
And boy, we'll be amazed.

00:12:13.325 --> 00:12:14.700
No, it's still to
rusty to shoot.

00:12:14.700 --> 00:12:15.450
Here's our bug.

00:12:15.450 --> 00:12:19.310
We will use the Observatory to
find this bug in our program.

00:12:19.310 --> 00:12:23.570
So let's go over to the browser
and bring up Observatory.

00:12:26.480 --> 00:12:28.610
So here we are, back
at that initial page,

00:12:28.610 --> 00:12:30.050
where we show all the isolates.

00:12:30.050 --> 00:12:33.030
I'm just going to hop
straight to the debugger,

00:12:33.030 --> 00:12:35.130
and what you're seeing
here is a split window.

00:12:35.130 --> 00:12:37.790
The top will display the
frames, and the bottom

00:12:37.790 --> 00:12:40.530
is a console that has
some input and output.

00:12:40.530 --> 00:12:43.080
You can type commands,
much as you can in GDP.

00:12:43.080 --> 00:12:45.020
Like if I type help, it
lists all the commands

00:12:45.020 --> 00:12:46.410
that are available right now.

00:12:46.410 --> 00:12:48.820
It has standard stuff
like setting and removing

00:12:48.820 --> 00:12:51.400
breakpoints, printing
expressions, continuing,

00:12:51.400 --> 00:12:52.260
pausing.

00:12:52.260 --> 00:12:56.610
It's basically what you would
expect in a command line

00:12:56.610 --> 00:12:57.210
debugger.

00:12:57.210 --> 00:12:59.600
So let's set a break at main.

00:12:59.600 --> 00:13:02.490
And I have tab completion
here, so I'll hit tab there.

00:13:02.490 --> 00:13:04.660
JOHN MCCUTCHAN: So this
tab completion works for--

00:13:04.660 --> 00:13:06.560
TODD TURNIDGE:
--functions-- so like main,

00:13:06.560 --> 00:13:08.060
but also for scripts.

00:13:08.060 --> 00:13:12.310
I'll do main.dart line
92, which I happen to know

00:13:12.310 --> 00:13:14.619
is the code that's going to
handle the shoot command.

00:13:14.619 --> 00:13:16.410
So I'll set that break
point, and then I'll

00:13:16.410 --> 00:13:18.451
come back over here and
shoot the revolver again.

00:13:21.470 --> 00:13:23.570
And it's frozen,
which is good, right?

00:13:23.570 --> 00:13:24.730
That's a breakpoint.

00:13:24.730 --> 00:13:27.070
So we come back over
to the debugger,

00:13:27.070 --> 00:13:29.550
and we can see that we
actually have frames up here,

00:13:29.550 --> 00:13:33.470
and I can expand
and contract frames.

00:13:33.470 --> 00:13:35.800
Each frame, when I
expand it, shows me

00:13:35.800 --> 00:13:37.520
sort of a cut out of the code.

00:13:37.520 --> 00:13:39.210
It shows me a current position.

00:13:39.210 --> 00:13:42.130
It also shows me, off to
the side, local variables

00:13:42.130 --> 00:13:44.090
that I can expand and inspect.

00:13:46.739 --> 00:13:48.280
But let's look at
our top frame here.

00:13:48.280 --> 00:13:52.130
We are at line 92,
and let's print

00:13:52.130 --> 00:13:54.894
an expression like player.

00:13:54.894 --> 00:13:56.310
So player is the
object that holds

00:13:56.310 --> 00:13:58.790
all information about a player.

00:13:58.790 --> 00:14:00.570
Let's show some browsing.

00:14:00.570 --> 00:14:01.810
So here's a player.

00:14:01.810 --> 00:14:03.850
It has a current room.

00:14:03.850 --> 00:14:05.730
The player has an
inventory with three items.

00:14:05.730 --> 00:14:06.896
Let's see what I'm carrying.

00:14:06.896 --> 00:14:08.880
I'm carrying a mousetrap.

00:14:08.880 --> 00:14:11.725
I'm carrying a revolver,
and I'm carrying an oil can.

00:14:11.725 --> 00:14:13.100
So this all agrees
with what I've

00:14:13.100 --> 00:14:15.050
seen so far in the program.

00:14:15.050 --> 00:14:20.370
Going back to the debugger,
let's single step.

00:14:20.370 --> 00:14:22.320
So I'm going hit
end to single step.

00:14:22.320 --> 00:14:24.080
I'll hit Return to
do the next command.

00:14:24.080 --> 00:14:25.040
JOHN MCCUTCHAN: So, one of
the coolest things here,

00:14:25.040 --> 00:14:27.248
and it might not be obvious
because of the font size,

00:14:27.248 --> 00:14:30.160
but you actually see the blue
cursor move column by column,

00:14:30.160 --> 00:14:31.921
so you see exactly
what part of the code

00:14:31.921 --> 00:14:33.920
is going to execute next,
so that's pretty nice.

00:14:33.920 --> 00:14:34.700
TODD TURNIDGE: Yeah,
that change was actually

00:14:34.700 --> 00:14:36.220
within the same line.

00:14:36.220 --> 00:14:37.790
so yeah, that little
blue box there,

00:14:37.790 --> 00:14:40.460
that's what you're looking for.

00:14:40.460 --> 00:14:41.610
And here we have the item.

00:14:41.610 --> 00:14:45.660
Let's see what item it
is we're about to shoot.

00:14:45.660 --> 00:14:49.210
It is the revolver.

00:14:49.210 --> 00:14:51.960
And looking below, we
see that it has a field

00:14:51.960 --> 00:14:53.790
called Can Shoot, which
is currently false.

00:14:53.790 --> 00:14:55.498
This is going to be
the cause of our bug,

00:14:55.498 --> 00:14:57.430
but let's just pretend
we don't know that yet.

00:14:57.430 --> 00:14:58.920
We step.

00:14:58.920 --> 00:15:00.820
If the item dot
can shoot is true,

00:15:00.820 --> 00:15:02.250
it's going to do something.

00:15:02.250 --> 00:15:03.510
Oh, it skips it.

00:15:03.510 --> 00:15:05.980
OK, so the revolver's
still too rusty to shoot.

00:15:05.980 --> 00:15:10.040
Let's continue to go
back and shoot it again.

00:15:10.040 --> 00:15:12.170
This time, we're going
to use Observatory

00:15:12.170 --> 00:15:15.785
to modify the data as we go
and actually explore the branch

00:15:15.785 --> 00:15:19.010
that we intended it to go down.

00:15:19.010 --> 00:15:26.020
So step, step, up arrow-- I
have command line history.

00:15:26.020 --> 00:15:29.700
Let's print the
item dot can shoot.

00:15:29.700 --> 00:15:30.980
It's false.

00:15:30.980 --> 00:15:34.905
Now I'm going to set it
to true and continue.

00:15:37.640 --> 00:15:39.225
And now it should
be the big surprise.

00:15:42.020 --> 00:15:46.650
Success-- the revolver
backfires and we die.

00:15:46.650 --> 00:15:48.410
Welcome to my children.

00:15:48.410 --> 00:15:53.830
So let's go back to
the presentation here.

00:15:56.820 --> 00:15:58.445
That's sort of a
taste of the debugger.

00:16:00.874 --> 00:16:03.290
I didn't show you some of the
isolate management features.

00:16:03.290 --> 00:16:05.040
We have the ability
to switch isolates

00:16:05.040 --> 00:16:07.040
from within the debugger
and to rename isolates.

00:16:07.040 --> 00:16:09.456
So if you've got a bunch of
them, you can give one of them

00:16:09.456 --> 00:16:11.860
a distinguished name and
know what it is you're doing.

00:16:11.860 --> 00:16:15.490
A second feature it has that dev
tools doesn't, is that protocol

00:16:15.490 --> 00:16:17.280
supports multiple clients.

00:16:17.280 --> 00:16:19.440
So John can be
running a debugger,

00:16:19.440 --> 00:16:21.900
and I can be running a
debugger on the same exact VM

00:16:21.900 --> 00:16:22.747
at the same time.

00:16:22.747 --> 00:16:24.330
When I step through
the program, he'll

00:16:24.330 --> 00:16:26.515
see the program state change.

00:16:26.515 --> 00:16:28.640
JOHN MCCUTCHAN: It's really
awesome to see it live.

00:16:28.640 --> 00:16:31.349
Maybe later today, if you stop
us, we'll give you a demo.

00:16:31.349 --> 00:16:33.140
TODD TURNIDGE: That's
a little bit too much

00:16:33.140 --> 00:16:35.020
of a high wire act for up here.

00:16:35.020 --> 00:16:38.060
But it's also nice
maybe working at home.

00:16:38.060 --> 00:16:40.080
You can have a connection there.

00:16:40.080 --> 00:16:43.800
So next page-- now
we're going to talk

00:16:43.800 --> 00:16:46.330
about when we're adding features
to the Observatory, what

00:16:46.330 --> 00:16:50.520
it is we think about as
were designing features.

00:16:50.520 --> 00:16:51.950
The first is that
we should always

00:16:51.950 --> 00:16:54.570
be collecting information.

00:16:54.570 --> 00:16:57.490
The VM knows a lot
about your program.

00:16:57.490 --> 00:16:58.345
It has your script.

00:16:58.345 --> 00:16:59.920
It has your source.

00:16:59.920 --> 00:17:00.710
It has parsed it.

00:17:00.710 --> 00:17:02.480
It's turned it into
classes and functions.

00:17:02.480 --> 00:17:04.550
It's compiled those
functions, and then it's

00:17:04.550 --> 00:17:05.450
run those functions.

00:17:05.450 --> 00:17:07.700
All of these things,
it knows exactly what's

00:17:07.700 --> 00:17:08.782
happening all the time.

00:17:08.782 --> 00:17:11.240
It also knows the heap, and
because it's garbage collected,

00:17:11.240 --> 00:17:14.010
it knows where every single
object is in your program,

00:17:14.010 --> 00:17:16.690
and you should have all this
information available to you

00:17:16.690 --> 00:17:18.380
while it's running in real time.

00:17:18.380 --> 00:17:20.730
I mean, there's no excuse
for every VM in the world

00:17:20.730 --> 00:17:24.240
not to provide this information
to you all the time.

00:17:24.240 --> 00:17:27.839
In addition to that, we
have a sampling profiler.

00:17:27.839 --> 00:17:29.860
It's low overhead and always on.

00:17:29.860 --> 00:17:31.270
So when you connect
up to the VM,

00:17:31.270 --> 00:17:33.220
it's already got the
profile sitting there,

00:17:33.220 --> 00:17:37.330
and you can already figure
out what it's been up to.

00:17:37.330 --> 00:17:41.400
Second point-- the
Observatory is self-hosting.

00:17:41.400 --> 00:17:43.940
Meaning it's built
into the Dart VM.

00:17:43.940 --> 00:17:46.180
When you open up the
port, it'll serve it out,

00:17:46.180 --> 00:17:48.050
so it's always available.

00:17:48.050 --> 00:17:50.340
Observatory is like the turtle.

00:17:50.340 --> 00:17:51.750
It carries its
shell on its back.

00:17:51.750 --> 00:17:52.520
Its always home.

00:17:55.221 --> 00:17:57.470
JOHN MCCUTCHAN: So another
design principle we have is

00:17:57.470 --> 00:18:00.120
that we want you to be able to
observe the running program.

00:18:00.120 --> 00:18:01.994
Though there's a lot of
great tools out there

00:18:01.994 --> 00:18:05.050
that require you to start your
program with a special flag

00:18:05.050 --> 00:18:07.810
or run it in a special harness,
this makes it really difficult

00:18:07.810 --> 00:18:10.390
to diagnose real world
problems that you only

00:18:10.390 --> 00:18:12.090
encounter in production.

00:18:12.090 --> 00:18:14.990
So even if you forget to run
with the command line flag that

00:18:14.990 --> 00:18:17.520
enables the Observatory
HTTP server,

00:18:17.520 --> 00:18:21.730
you can just send your process
on the server the quit signal,

00:18:21.730 --> 00:18:24.930
and that's going to trigger the
HTTP server to be activated,

00:18:24.930 --> 00:18:26.240
and then you can connect.

00:18:26.240 --> 00:18:28.820
And since we've always been
collecting the information,

00:18:28.820 --> 00:18:30.560
we have all the
historical information.

00:18:30.560 --> 00:18:32.750
You can actually
dig in and diagnose

00:18:32.750 --> 00:18:35.640
what's happened after the
fact without needing to run

00:18:35.640 --> 00:18:37.420
in a special environment.

00:18:37.420 --> 00:18:41.514
It really helps you diagnose
problems in the wild.

00:18:41.514 --> 00:18:43.680
TODD TURNIDGE: So manipulating
the running program--

00:18:43.680 --> 00:18:46.530
you saw John call set as
edge and change the coverage

00:18:46.530 --> 00:18:47.860
information as went.

00:18:47.860 --> 00:18:50.650
I changed the can shoot
property of the revolver

00:18:50.650 --> 00:18:52.260
and made it backfire.

00:18:52.260 --> 00:18:54.310
But in a real
world scenario, you

00:18:54.310 --> 00:18:56.822
could do something
like turn on logging.

00:18:56.822 --> 00:18:58.280
You've forgotten
to enable logging.

00:18:58.280 --> 00:18:59.950
You want to see the
logging messages.

00:18:59.950 --> 00:19:01.366
You connect up to
the Observatory.

00:19:01.366 --> 00:19:04.630
You tell it to evaluate logger
dot enable and the top level

00:19:04.630 --> 00:19:06.370
root library evaluation area.

00:19:06.370 --> 00:19:08.190
And then suddenly you've
got logging output

00:19:08.190 --> 00:19:10.231
coming out of your program
without restarting it.

00:19:12.407 --> 00:19:14.740
JOHN MCCUTCHAN: So we've kind
of mentioned this already,

00:19:14.740 --> 00:19:16.480
but we wanted to
support from day one

00:19:16.480 --> 00:19:19.040
the idea that Observatory
on the service protocol

00:19:19.040 --> 00:19:21.700
is a multi-user
collaborative experience.

00:19:21.700 --> 00:19:26.190
So when you have-- every page
in Observatory has a unique URL.

00:19:26.190 --> 00:19:28.650
So when you have
this URL, and you

00:19:28.650 --> 00:19:30.790
go through the necessary
port forwarding steps

00:19:30.790 --> 00:19:34.044
to forward from local host
to your external address,

00:19:34.044 --> 00:19:34.960
I could take this URL.

00:19:34.960 --> 00:19:36.390
I could chat it to Todd.

00:19:36.390 --> 00:19:38.430
Todd could then paste
it into his browser,

00:19:38.430 --> 00:19:40.820
and he's looking at the exact
same page in Observatory

00:19:40.820 --> 00:19:43.610
that I am in the
running program.

00:19:43.610 --> 00:19:46.230
TODD TURNIDGE: So to reiterate,
when you start this up,

00:19:46.230 --> 00:19:48.042
it starts on local host.

00:19:48.042 --> 00:19:48.875
JOHN MCCUTCHAN: Yes.

00:19:48.875 --> 00:19:50.206
TODD TURNIDGE: Yeah, and
you have to full local host,

00:19:50.206 --> 00:19:50.770
if you want to share.

00:19:50.770 --> 00:19:53.120
JOHN MCCUTCHAN: And if you want
to share something externally,

00:19:53.120 --> 00:19:54.870
you have to go through
the necessary steps

00:19:54.870 --> 00:19:57.800
on your operating
system for the port.

00:19:57.800 --> 00:19:59.380
But if you go
through those steps,

00:19:59.380 --> 00:20:01.210
then you could even chat.

00:20:01.210 --> 00:20:04.360
You could send a link somewhere
on the other side of the world

00:20:04.360 --> 00:20:06.630
and debug together.

00:20:06.630 --> 00:20:09.380
So finally, we want to build
an ecosystem for tools, so

00:20:09.380 --> 00:20:11.910
every single thing that
you see in Observatory,

00:20:11.910 --> 00:20:13.980
every interaction we do
with your running program

00:20:13.980 --> 00:20:16.420
happens over the VM
service protocol.

00:20:16.420 --> 00:20:19.000
And this for service protocol
is available to anyone,

00:20:19.000 --> 00:20:21.540
allowing you to create
custom tools that

00:20:21.540 --> 00:20:24.610
extract just that piece of
information you care about.

00:20:24.610 --> 00:20:28.150
And we're also working with IDEs
to do deeper IDE integration,

00:20:28.150 --> 00:20:30.460
where the IDE communicates
over the service protocol

00:20:30.460 --> 00:20:33.220
and serves up
interesting information.

00:20:33.220 --> 00:20:35.830
Examples internally-- we
have a code coverage tool,

00:20:35.830 --> 00:20:38.580
that after all running the
unit tests in the Google source

00:20:38.580 --> 00:20:40.980
base, that exports
the code coverage out

00:20:40.980 --> 00:20:44.420
to this shared dashboard, and
it gets that information off

00:20:44.420 --> 00:20:46.660
of the service protocol.

00:20:46.660 --> 00:20:48.890
TODD TURNIDGE: To
that end, pretty soon

00:20:48.890 --> 00:20:51.410
we're going to be publishing
draft one of the service

00:20:51.410 --> 00:20:51.980
protocol.

00:20:51.980 --> 00:20:54.040
We're still tidying
it up right now.

00:20:54.040 --> 00:20:56.090
But the details of
this protocol are

00:20:56.090 --> 00:20:58.490
that it's uses
something like JSON RPC,

00:20:58.490 --> 00:21:00.700
so the requests and
responses are JSON,

00:21:00.700 --> 00:21:02.140
and it uses WebSockets.

00:21:02.140 --> 00:21:04.790
It should be pretty
familiar to people.

00:21:04.790 --> 00:21:07.160
JOHN MCCUTCHAN: So take a
look at for Dart announce,

00:21:07.160 --> 00:21:09.326
we'll have an announcement
in the next coming weeks.

00:21:11.880 --> 00:21:14.190
TODD TURNIDGE: So, what
have we been doing?

00:21:14.190 --> 00:21:16.800
Since last time we gave a
presentation on Observatory,

00:21:16.800 --> 00:21:18.800
some of the new features
have been the debugger,

00:21:18.800 --> 00:21:20.008
which we've shown you before.

00:21:20.008 --> 00:21:22.410
That's pretty fresh.

00:21:22.410 --> 00:21:25.850
Additionally, I want to talk
about annotated script view.

00:21:25.850 --> 00:21:28.030
There's a person on our
team, Ryan-- Ryan Macnak--

00:21:28.030 --> 00:21:30.420
and he says that the more
information you can associate

00:21:30.420 --> 00:21:32.900
with the program source,
the more understandable

00:21:32.900 --> 00:21:35.400
it is for people, because
you're showing them

00:21:35.400 --> 00:21:37.910
like runtime information
associated with the stuff they

00:21:37.910 --> 00:21:39.110
actually wrote.

00:21:39.110 --> 00:21:42.460
And so we're trying to
provide more and more script

00:21:42.460 --> 00:21:43.710
annotations in the program.

00:21:43.710 --> 00:21:45.730
And John showed you this
with call site information.

00:21:45.730 --> 00:21:47.146
He clicked on that
one constructor

00:21:47.146 --> 00:21:49.730
and was able to show us the
actual constructor that' got

00:21:49.730 --> 00:21:51.070
invoked at that line of code.

00:21:51.070 --> 00:21:52.986
JOHN MCCUTCHAN: Both the
class and the method.

00:21:52.986 --> 00:21:55.130
TODD TURNIDGE: Both the
class and the method.

00:21:55.130 --> 00:21:56.671
JOHN MCCUTCHAN: So
kind of furthering

00:21:56.671 --> 00:21:58.950
that point of tying things
back to the source code

00:21:58.950 --> 00:22:01.300
that you wrote, the CPU
profiler now understands

00:22:01.300 --> 00:22:02.790
function in-lining.

00:22:02.790 --> 00:22:04.960
So, in the past, if you
looked at the profile,

00:22:04.960 --> 00:22:08.170
you might see one function
that kind of had globbed up

00:22:08.170 --> 00:22:10.700
and in-lined lots and
lots of other functions

00:22:10.700 --> 00:22:12.810
that your program is executing.

00:22:12.810 --> 00:22:15.200
That made sense the compiler
engineers and people

00:22:15.200 --> 00:22:16.090
on the VM team.

00:22:16.090 --> 00:22:17.860
It was obvious
what was going on.

00:22:17.860 --> 00:22:20.037
But for a regular
Dart developer,

00:22:20.037 --> 00:22:22.370
who doesn't understand the
ins and outs of the compiler,

00:22:22.370 --> 00:22:24.302
it can sometimes be confusing.

00:22:24.302 --> 00:22:26.010
So now the profiler
understands in-lining

00:22:26.010 --> 00:22:27.770
and will expand
it out so you see

00:22:27.770 --> 00:22:30.150
the call stack that
makes sense to you,

00:22:30.150 --> 00:22:32.240
the author of the program.

00:22:32.240 --> 00:22:34.780
We also have metrics,
so user programs can now

00:22:34.780 --> 00:22:36.800
provide counters and gauges.

00:22:36.800 --> 00:22:39.860
And Observatory can connect
and sample these things

00:22:39.860 --> 00:22:41.385
and show you a live counter.

00:22:41.385 --> 00:22:42.760
Like, for example,
a server might

00:22:42.760 --> 00:22:45.524
have how many clients are
connected to me right now,

00:22:45.524 --> 00:22:47.690
and you can go in and watch
a graph like a dashboard

00:22:47.690 --> 00:22:48.550
in Observatory.

00:22:52.370 --> 00:22:54.610
TODD TURNIDGE: OK, so
what's coming next?

00:22:54.610 --> 00:22:56.512
We're going to improve
debugging quite a bit.

00:22:56.512 --> 00:22:58.970
Right now, we have some weakness
around developer workflow.

00:22:58.970 --> 00:23:03.310
Specifically I edit my
program, and I want to restart.

00:23:03.310 --> 00:23:05.630
I have to actually reconnect
to the Observatory.

00:23:05.630 --> 00:23:07.480
It would be nice if
within Observatory, you

00:23:07.480 --> 00:23:10.060
could support VM
restarts or even

00:23:10.060 --> 00:23:11.740
individual isolate restarts.

00:23:11.740 --> 00:23:13.970
That would be a nice addition.

00:23:13.970 --> 00:23:15.370
We're going to work on that.

00:23:15.370 --> 00:23:18.110
Additionally, you saw my demo.

00:23:18.110 --> 00:23:20.060
I was switching back and
forth to standard out

00:23:20.060 --> 00:23:22.550
to look at my output
for my program.

00:23:22.550 --> 00:23:24.270
There's a reason
the standard out

00:23:24.270 --> 00:23:28.410
and other streams shouldn't be
broadcast within the console

00:23:28.410 --> 00:23:29.537
in the debugger window.

00:23:29.537 --> 00:23:31.370
In fact, it would be
nice to be able to say,

00:23:31.370 --> 00:23:34.670
when this future completes, let
me know in the dividing console

00:23:34.670 --> 00:23:36.570
and have it print that out, too.

00:23:36.570 --> 00:23:38.390
JOHN MCCUTCHAN: Yeah,
that would be great.

00:23:38.390 --> 00:23:40.920
So we want to have
a timeline view.

00:23:40.920 --> 00:23:43.512
So right now, the profiler's
a statistical average of where

00:23:43.512 --> 00:23:44.720
your program's spending time.

00:23:44.720 --> 00:23:48.010
But sometimes you need to
pinpoint a specific time range.

00:23:48.010 --> 00:23:51.120
So we're going to add a timeline
view that indicates things

00:23:51.120 --> 00:23:53.570
like when method
compilations occur

00:23:53.570 --> 00:23:55.440
or when a garbage
collection occurs,

00:23:55.440 --> 00:23:57.280
and let you see
how that interacts

00:23:57.280 --> 00:23:58.859
with your running program.

00:23:58.859 --> 00:24:01.150
We also want to be able to
answer the question of where

00:24:01.150 --> 00:24:04.130
do I allocate class Foo and
only class just class Foo?

00:24:04.130 --> 00:24:05.630
TODD TURNIDGE: Yeah,
just class Foo.

00:24:05.630 --> 00:24:05.800
JOHN MCCUTCHAN: No.

00:24:05.800 --> 00:24:07.383
We want to give you
an allocation call

00:24:07.383 --> 00:24:12.420
sites for any class in your
program, so you can narrow in.

00:24:12.420 --> 00:24:14.560
TODD TURNIDGE: Last,
as we were saying

00:24:14.560 --> 00:24:19.810
before, we want to display
runtime information

00:24:19.810 --> 00:24:22.000
alongside the source,
using the source

00:24:22.000 --> 00:24:23.939
as a model for
exploration of the stuff

00:24:23.939 --> 00:24:25.230
in a way that's understandable.

00:24:25.230 --> 00:24:28.230
So the source code should
be live, hyperlinked view

00:24:28.230 --> 00:24:30.772
into all of this
information that we have,

00:24:30.772 --> 00:24:32.730
that, so far, hasn't been
shared with the user.

00:24:32.730 --> 00:24:34.146
JOHN MCCUTCHAN:
Yeah, I can't wait

00:24:34.146 --> 00:24:36.430
until I can hover over a
variable and see its value.

00:24:36.430 --> 00:24:38.513
TODD TURNIDGE: Or its guard
class, or whether it's

00:24:38.513 --> 00:24:39.570
nullible or whatever.

00:24:39.570 --> 00:24:42.990
JOHN MCCUTCHAN: Anything that
we can collect at runtime.

00:24:42.990 --> 00:24:45.020
So, where can you
use Observatory?

00:24:45.020 --> 00:24:47.180
Well, we've already
said this many times,

00:24:47.180 --> 00:24:50.300
but Observatory is available
everywhere the VM is.

00:24:50.300 --> 00:24:53.480
So you can use it for server,
command line applications,

00:24:53.480 --> 00:24:55.130
for developing Sky
applications, which

00:24:55.130 --> 00:24:58.470
you'll hear about tomorrow,
any web applications running

00:24:58.470 --> 00:25:00.254
in Dartium.

00:25:00.254 --> 00:25:02.170
Observatory is available
there, and we're also

00:25:02.170 --> 00:25:05.420
integrating with IDEs,
like Sublime, Dart Editor,

00:25:05.420 --> 00:25:08.640
and Webstorm, so that there's
buttons to launch and connect

00:25:08.640 --> 00:25:10.370
to Observatory for
the running program.

00:25:13.000 --> 00:25:15.590
Finally, Observatory is a suite
of development tools bundled

00:25:15.590 --> 00:25:16.310
with the VM.

00:25:16.310 --> 00:25:17.950
That means you already have it.

00:25:17.950 --> 00:25:22.820
Everyone here has this, so
please try it out, and send us

00:25:22.820 --> 00:25:24.230
bug and feature feedback.

00:25:24.230 --> 00:25:25.771
We really want to
make sure that this

00:25:25.771 --> 00:25:27.710
is useful to everyone,
and the best way

00:25:27.710 --> 00:25:29.535
that we can do that
is to hear from you.

00:25:29.535 --> 00:25:31.368
TODD TURNIDGE: We want
to make this the tool

00:25:31.368 --> 00:25:33.660
that you use to write your
server-side Dart code.

00:25:33.660 --> 00:25:35.076
JOHN MCCUTCHAN:
So, on this slide,

00:25:35.076 --> 00:25:38.270
you can see Daniel and Ryan, two
other members of the Dart team

00:25:38.270 --> 00:25:40.110
that help us with Observatory.

00:25:40.110 --> 00:25:41.810
So feel free to grab
any of us if you

00:25:41.810 --> 00:25:46.450
want to talk about Observatory
later on today and tomorrow.

00:25:46.450 --> 00:25:48.000
Thanks.

