WEBVTT
Kind: captions
Language: en

00:00:05.400 --> 00:00:07.260
STEPH CUTHBERTSON: Good morning.

00:00:07.260 --> 00:00:08.174
Hello.

00:00:08.174 --> 00:00:11.500
[APPLAUSE]

00:00:11.500 --> 00:00:14.080
Welcome, everybody to
our talk today on what's

00:00:14.080 --> 00:00:17.250
new in Android Developer Tools.

00:00:17.250 --> 00:00:19.800
It is awesome to see
so many developers here

00:00:19.800 --> 00:00:22.870
from around the world
and in a concert venue.

00:00:22.870 --> 00:00:27.140
I just want you guys to know
this is pretty cool for us.

00:00:27.140 --> 00:00:29.000
I'm Steph Cuthbertson,
I'm here today

00:00:29.000 --> 00:00:31.930
with the wonderful Tor Norbye
and the wonderful Jamal Eason.

00:00:31.930 --> 00:00:34.710
We're going to give you an
insider's tour of Android

00:00:34.710 --> 00:00:35.840
Studio.

00:00:35.840 --> 00:00:38.540
And for those of you who
are already real insiders,

00:00:38.540 --> 00:00:41.700
and noticed that Zav is
not on the stage this year,

00:00:41.700 --> 00:00:43.202
I'm just filling in for him.

00:00:43.202 --> 00:00:44.660
He's actually on
a beach in Hawaii.

00:00:44.660 --> 00:00:47.690
So hello, Zav.

00:00:47.690 --> 00:00:51.130
When we first started
working on Android Studio,

00:00:51.130 --> 00:00:53.650
we wanted a purpose
built IDE which

00:00:53.650 --> 00:00:55.850
was tuned for our languages.

00:00:55.850 --> 00:00:58.860
That's why we picked IntelliJ,
and native to the Android

00:00:58.860 --> 00:01:00.190
platform.

00:01:00.190 --> 00:01:03.590
Now Android Studio has
built tremendous momentum

00:01:03.590 --> 00:01:05.660
in a short period of time.

00:01:05.660 --> 00:01:08.070
One of the things we
announced yesterday

00:01:08.070 --> 00:01:14.380
is that now, 92% of the
top 125 apps and games

00:01:14.380 --> 00:01:17.960
use Android Studio.

00:01:17.960 --> 00:01:21.180
Since we announced it here
at I/O three years ago,

00:01:21.180 --> 00:01:23.930
and you may remember it
was Tor who did the demo,

00:01:23.930 --> 00:01:28.200
we've released 131
times across our preview

00:01:28.200 --> 00:01:31.150
beta, and stable releases.

00:01:31.150 --> 00:01:34.030
And what that reflects
is actually a big part

00:01:34.030 --> 00:01:36.260
of what's driving our success.

00:01:36.260 --> 00:01:39.010
We have an incredibly
engaged developer community.

00:01:39.010 --> 00:01:41.490
They're trying all
of our early builds

00:01:41.490 --> 00:01:43.660
and giving us
wonderful feedback.

00:01:43.660 --> 00:01:45.680
That is what's
letting the team focus

00:01:45.680 --> 00:01:48.110
and helping us go very quickly.

00:01:48.110 --> 00:01:51.010
We've been thinking a lot
the past year about what else

00:01:51.010 --> 00:01:54.070
we could do to help accelerate
productivity and make

00:01:54.070 --> 00:01:54.958
your lives better.

00:01:57.980 --> 00:01:59.690
So for those of you
in the audience who

00:01:59.690 --> 00:02:02.430
don't know Android
Studio quite as well,

00:02:02.430 --> 00:02:06.146
I'm going to give you a
whirlwind tour of 2016

00:02:06.146 --> 00:02:07.270
and what we've done so far.

00:02:07.270 --> 00:02:08.669
Just in about 60 seconds.

00:02:08.669 --> 00:02:10.630
So I'll bring everybody
up to the same level,

00:02:10.630 --> 00:02:15.100
and then we'll go on and talk
about 2.2 and the road ahead.

00:02:15.100 --> 00:02:18.810
So already this year,
we launched 2.0.

00:02:18.810 --> 00:02:22.400
That focused on speed with the
introduction of Instant Run

00:02:22.400 --> 00:02:23.700
and the emulators.

00:02:23.700 --> 00:02:28.410
We also launched wonderful new
emulator UI, the GPU debugger

00:02:28.410 --> 00:02:30.380
preview.

00:02:30.380 --> 00:02:34.390
Search deep linking creation,
testing and much more.

00:02:34.390 --> 00:02:39.130
Then shortly followed 2.1, which
we built side by side with N.

00:02:39.130 --> 00:02:42.760
And that brings you support
for all N's features and API.

00:02:42.760 --> 00:02:44.330
It brings you
emulators, so you can

00:02:44.330 --> 00:02:46.930
test N. The new Jack
compiler, so you

00:02:46.930 --> 00:02:48.980
can try out Java 8 support.

00:02:48.980 --> 00:02:53.310
And in particular, in 2.1 we
also accelerated Instant Run.

00:02:53.310 --> 00:02:55.810
And the way we did that
was by moving our Dec step

00:02:55.810 --> 00:03:00.480
to happen in process, which gave
us wonderful speed advances.

00:03:00.480 --> 00:03:05.460
Now all of this
brings us now to 2.2,

00:03:05.460 --> 00:03:10.450
which focuses on speed, smarts,
and Android platform support.

00:03:10.450 --> 00:03:13.220
Now, one of the things that's
wonderful for us about I/O

00:03:13.220 --> 00:03:16.280
is this is a developer audience,
so what we're going to do

00:03:16.280 --> 00:03:20.170
is spend the first 25
minutes of today's talk

00:03:20.170 --> 00:03:24.740
giving you a live demo of nearly
every single feature in the 2.2

00:03:24.740 --> 00:03:27.174
preview, which you can also use.

00:03:27.174 --> 00:03:30.492
[CHEERS AND APPLAUSE]

00:03:31.920 --> 00:03:35.180
Now, just a reminder,
this is a preview build,

00:03:35.180 --> 00:03:37.500
so expect preview quality.

00:03:37.500 --> 00:03:39.750
And then we'll do the
normal thing we always do.

00:03:39.750 --> 00:03:41.220
Over the next
several weeks, we'll

00:03:41.220 --> 00:03:43.170
be stabilizing this
as we do, as we

00:03:43.170 --> 00:03:45.450
move through beta and stable.

00:03:45.450 --> 00:03:48.370
After that, Jamal and I
will then take it back.

00:03:48.370 --> 00:03:50.340
And we'll walk you
through design,

00:03:50.340 --> 00:03:54.120
develop, build, and test to give
you a nice structured overview

00:03:54.120 --> 00:03:57.020
with screen shots, and also
take you behind the scenes

00:03:57.020 --> 00:04:00.090
to talk more about how and
why features were built.

00:04:00.090 --> 00:04:03.150
So with that, to take you on
a lap around 2.2, would you

00:04:03.150 --> 00:04:06.650
guys please give a very
warm welcome to Tor Norbye.

00:04:06.650 --> 00:04:07.272
Thank you.

00:04:07.272 --> 00:04:10.300
[APPLAUSE]

00:04:11.620 --> 00:04:13.200
TOR NORBYE: All right.

00:04:13.200 --> 00:04:15.660
Can you see the screen?

00:04:15.660 --> 00:04:17.310
Demo.

00:04:17.310 --> 00:04:19.320
All right.

00:04:19.320 --> 00:04:20.490
Can we get the demo machine?

00:04:23.530 --> 00:04:24.141
Thank you.

00:04:24.141 --> 00:04:24.640
All right.

00:04:24.640 --> 00:04:26.290
So I'm going to
start with something

00:04:26.290 --> 00:04:28.410
very small and simple, but
I think you'll like it.

00:04:28.410 --> 00:04:31.380
So we released a lot of
SDK components yesterday,

00:04:31.380 --> 00:04:33.760
and once you've installed
Android Studio 2.2,

00:04:33.760 --> 00:04:37.790
and you go to install them,
notice how we have a background

00:04:37.790 --> 00:04:38.560
button now.

00:04:38.560 --> 00:04:41.182
[APPLAUSE]

00:04:41.182 --> 00:04:43.240
So you can keep
coding while you're

00:04:43.240 --> 00:04:44.850
installing the latest goodies.

00:04:44.850 --> 00:04:47.370
So we spent the
last year focusing

00:04:47.370 --> 00:04:48.660
on making builds faster.

00:04:48.660 --> 00:04:50.719
We know that's a top
concern for all of you.

00:04:50.719 --> 00:04:53.010
And so I want to show you
where we are with Instant Run

00:04:53.010 --> 00:04:54.220
right now.

00:04:54.220 --> 00:04:58.350
So this is the I/O app
running on the right.

00:04:58.350 --> 00:05:01.570
I can go ahead and comment
out some code here and run it.

00:05:01.570 --> 00:05:03.400
And when I make
that change, you can

00:05:03.400 --> 00:05:06.460
see that, within about
a second, it reflects

00:05:06.460 --> 00:05:07.660
that change on the device.

00:05:07.660 --> 00:05:10.380
That would take 15 seconds
without Instant Run.

00:05:10.380 --> 00:05:12.630
I can also make some
incompatible changes,

00:05:12.630 --> 00:05:16.020
for example, extracting
this into a method,

00:05:16.020 --> 00:05:21.215
and making that change
is another second or two

00:05:21.215 --> 00:05:22.270
to deploy.

00:05:22.270 --> 00:05:25.530
So after the demo,
Steph's going to talk more

00:05:25.530 --> 00:05:27.620
about what it is we're
doing next with Instant

00:05:27.620 --> 00:05:30.675
Run in 2.2 and 2.3.

00:05:30.675 --> 00:05:32.050
So one of the
things we had to do

00:05:32.050 --> 00:05:34.340
when we worked on Instant
Run was figuring out what's

00:05:34.340 --> 00:05:36.120
going on inside the APK files.

00:05:36.120 --> 00:05:39.820
So to do that, we've built this
new feature, the APK analyzer.

00:05:39.820 --> 00:05:44.732
So I can open up any APK
or the one in my project.

00:05:44.732 --> 00:05:46.940
And now I can drill into
what's going on in the file.

00:05:46.940 --> 00:05:49.420
So I can see, for
example what's inside

00:05:49.420 --> 00:05:52.330
the assets folder or the
res folder or, in this case,

00:05:52.330 --> 00:05:53.190
Instant Run.

00:05:53.190 --> 00:05:57.270
The way we're repackaging
the application into slices.

00:05:57.270 --> 00:06:00.210
So let me drag in a
real production app.

00:06:00.210 --> 00:06:02.340
The Chrome APK.

00:06:02.340 --> 00:06:04.610
The purpose of this tool,
there's a couple of things.

00:06:04.610 --> 00:06:06.845
First one is to be able to
look at the download size.

00:06:06.845 --> 00:06:08.470
So in some markets,
it's very important

00:06:08.470 --> 00:06:10.970
that you make the download small
and the install size small.

00:06:10.970 --> 00:06:14.010
So this lets you look at
what is actually in your app

00:06:14.010 --> 00:06:16.430
and focus on whether
you can get rid of it.

00:06:16.430 --> 00:06:19.700
So I can drill into the Assets
folder and look at the files.

00:06:19.700 --> 00:06:22.180
I can look at the, let's
say, the layout folder

00:06:22.180 --> 00:06:25.262
would decompile the binary
XML back into source.

00:06:25.262 --> 00:06:27.470
Although we need to do a
better job with the resource

00:06:27.470 --> 00:06:28.040
references.

00:06:28.040 --> 00:06:31.870
So soon we will map those
back into resource names.

00:06:31.870 --> 00:06:34.630
You can also look
at the value table,

00:06:34.630 --> 00:06:37.350
which has been an opaque
file to look at before.

00:06:37.350 --> 00:06:39.830
Now, we have a viewer, so
you can go in and see just

00:06:39.830 --> 00:06:41.000
what's inside.

00:06:41.000 --> 00:06:42.105
And last but not least--

00:06:42.105 --> 00:06:42.420
[APPLAUSE]

00:06:42.420 --> 00:06:42.920
Yes.

00:06:46.540 --> 00:06:49.150
And last but not least, this
lets you look at the dex files.

00:06:49.150 --> 00:06:52.475
So you probably all aware
of the 64k method limit.

00:06:52.475 --> 00:06:53.850
It's not actually
a method limit,

00:06:53.850 --> 00:06:55.720
it's method plus
reference limit.

00:06:55.720 --> 00:06:57.762
So you can now drill
into this and see

00:06:57.762 --> 00:06:59.470
what is it that you're
declaring and what

00:06:59.470 --> 00:07:01.080
is it that you're
referencing, to see

00:07:01.080 --> 00:07:03.810
how you can get below that
64k or turn on multidex.

00:07:03.810 --> 00:07:08.820
[APPLAUSE]

00:07:08.820 --> 00:07:10.342
If you've ever
looked at a manifest

00:07:10.342 --> 00:07:11.800
file in the build
output, you might

00:07:11.800 --> 00:07:13.320
have noticed that a lot
of stuff in the manifest

00:07:13.320 --> 00:07:14.690
file that you did not write.

00:07:14.690 --> 00:07:15.190
Right?

00:07:15.190 --> 00:07:16.600
Where did it come from?

00:07:16.600 --> 00:07:20.880
Well, we have a new editor
in 2.2, the manifest editor.

00:07:20.880 --> 00:07:23.360
So this is the XML tab, but
you can see on the bottom,

00:07:23.360 --> 00:07:25.710
there's now a
merged manifest tab.

00:07:25.710 --> 00:07:28.800
And when I click on that,
you can see that we now

00:07:28.800 --> 00:07:30.430
give you the full
merged, updated

00:07:30.430 --> 00:07:32.722
live whenever you make edits.

00:07:32.722 --> 00:07:34.680
There is a legend on the
right, which tells you

00:07:34.680 --> 00:07:35.804
where stuff is coming from.

00:07:35.804 --> 00:07:39.110
So for example, I can see
now the Internet permission--

00:07:39.110 --> 00:07:42.860
[APPLAUSE]

00:07:42.860 --> 00:07:44.540
--is coming from Play services.

00:07:44.540 --> 00:07:48.150
So I can also go in here and
navigate to the line that

00:07:48.150 --> 00:07:49.689
is the source for the merge.

00:07:49.689 --> 00:07:51.230
So hopefully that
will help demystify

00:07:51.230 --> 00:07:55.530
what's going on with the Gradle
manifest merging process.

00:07:55.530 --> 00:07:57.310
So speaking of
Gradle, we don't want

00:07:57.310 --> 00:07:59.720
you to have to learn how to
edit build files in order

00:07:59.720 --> 00:08:01.380
to configure your project.

00:08:01.380 --> 00:08:04.500
So we're in the middle of a
complete rewrite of the project

00:08:04.500 --> 00:08:05.362
structure dialog.

00:08:05.362 --> 00:08:07.320
And I say middle, because
all we've done so far

00:08:07.320 --> 00:08:08.694
is dependencies,
though arguably,

00:08:08.694 --> 00:08:11.530
it's probably the hardest part.

00:08:11.530 --> 00:08:15.440
So my favorite part in the
new PSD is the messages pane.

00:08:15.440 --> 00:08:18.140
So what this shows me is
suggestions the ID is making.

00:08:18.140 --> 00:08:20.000
So you can see here,
my project happens

00:08:20.000 --> 00:08:21.555
to be using jCenter
for dependencies,

00:08:21.555 --> 00:08:22.930
and it's telling
me, hey, there's

00:08:22.930 --> 00:08:25.147
a newer version of this
dependency available.

00:08:25.147 --> 00:08:27.230
And all I have to do is
click on this update link,

00:08:27.230 --> 00:08:28.800
now I'm using the
latest version.

00:08:28.800 --> 00:08:31.253
I can also click on Update
All to take all suggestions.

00:08:31.253 --> 00:08:32.669
So notice this is
not just looking

00:08:32.669 --> 00:08:35.679
at local repositories, which
Lint used to be for you,

00:08:35.679 --> 00:08:39.610
it goes out and searches
remote repositories as well.

00:08:39.610 --> 00:08:41.640
If I switch to the
dependencies view,

00:08:41.640 --> 00:08:45.000
I can drill into the
dependencies, either by module

00:08:45.000 --> 00:08:48.580
or I can look at the overall
dependencies for all modules

00:08:48.580 --> 00:08:49.460
across the project.

00:08:49.460 --> 00:08:51.440
And I can drill in
and see, for example,

00:08:51.440 --> 00:08:54.620
the transitive dependencies
to see, basically,

00:08:54.620 --> 00:08:57.660
how I'm reaching certain
dependencies in my project.

00:08:57.660 --> 00:09:00.220
I can also go and
add dependencies.

00:09:00.220 --> 00:09:03.280
So we have a nice UI now
where I can go and search.

00:09:03.280 --> 00:09:06.660
Again, just like with
the update suggestions,

00:09:06.660 --> 00:09:08.780
this looks at
remote repositories.

00:09:08.780 --> 00:09:11.680
It also looks at
local repositories.

00:09:11.680 --> 00:09:13.240
It shows all the
available versions,

00:09:13.240 --> 00:09:15.760
and it even helps
me tweak the scope

00:09:15.760 --> 00:09:18.480
string in the dependency list.

00:09:18.480 --> 00:09:20.964
So you can turn this on today
in the experimental settings,

00:09:20.964 --> 00:09:22.130
if you want to play with it.

00:09:22.130 --> 00:09:23.160
And we're going to
try to finish that

00:09:23.160 --> 00:09:24.760
in next couple of releases.

00:09:24.760 --> 00:09:31.360
[APPLAUSE]

00:09:31.360 --> 00:09:32.869
Next let's talk about C++.

00:09:32.869 --> 00:09:35.410
So last year, we showed you that
we have really great editing

00:09:35.410 --> 00:09:36.230
support.

00:09:36.230 --> 00:09:39.990
This is the Sea-lion C++
functionality from JetBrains

00:09:39.990 --> 00:09:42.100
that we've integrated.

00:09:42.100 --> 00:09:45.060
However, it required you to use
the experimental Gradle plugin.

00:09:45.060 --> 00:09:48.170
And the big news for
2.2 is that we've now

00:09:48.170 --> 00:09:50.420
added support for
external build systems.

00:09:50.420 --> 00:09:55.190
So you can actually use CMake
to build your native code.

00:09:55.190 --> 00:09:57.770
You just declare it like
so, with a stable plugin,

00:09:57.770 --> 00:10:01.030
and now you can build C++.

00:10:01.030 --> 00:10:03.670
And for C++, we will have
a wizard in the next couple

00:10:03.670 --> 00:10:07.860
of builds, so you can very
easily go and add C++ support

00:10:07.860 --> 00:10:08.612
to your project.

00:10:08.612 --> 00:10:11.070
And when you do that, you end
up with a sample project that

00:10:11.070 --> 00:10:12.730
looks exactly like this one.

00:10:12.730 --> 00:10:16.540
So you have a main activity
that loads the native library,

00:10:16.540 --> 00:10:18.920
and then you have a sample
"hello world" native library

00:10:18.920 --> 00:10:19.420
string.

00:10:19.420 --> 00:10:20.800
So let's hook this up.

00:10:20.800 --> 00:10:23.720
I'm going to, first of all, set
a breakpoint here in the C++

00:10:23.720 --> 00:10:25.780
code.

00:10:25.780 --> 00:10:28.690
This main activity is just
showing the default layout that

00:10:28.690 --> 00:10:29.940
has a string in the middle.

00:10:29.940 --> 00:10:34.160
So let me go back and change
that string to show the value

00:10:34.160 --> 00:10:35.040
from C++.

00:10:35.040 --> 00:10:41.270
So will do text view
equals fine view by ID.

00:10:41.270 --> 00:10:43.165
And then we'll hook up that ID.

00:10:43.165 --> 00:10:47.840
We go to cast it, and then we
will call set text on that text

00:10:47.840 --> 00:10:50.410
with the call from C++.

00:10:50.410 --> 00:10:52.620
Now, let's also set
a breakpoint here.

00:10:52.620 --> 00:10:55.620
So now I'm going to
launch the debugger.

00:10:55.620 --> 00:10:58.270
This runs Gradle
which runs CMake,

00:10:58.270 --> 00:11:02.380
builds everything, packages it.

00:11:02.380 --> 00:11:06.940
And in a second, this app should
be running on the emulator.

00:11:06.940 --> 00:11:07.440
There it is.

00:11:07.440 --> 00:11:09.481
So we hit our breakpoint,
now we're in Java code.

00:11:09.481 --> 00:11:11.270
And so you can obviously
be looking around

00:11:11.270 --> 00:11:15.370
at your manifest state,
I'm sorry, activity state.

00:11:15.370 --> 00:11:17.480
And if I resume
the debugger now,

00:11:17.480 --> 00:11:19.450
you can see now we're in C++.

00:11:19.450 --> 00:11:21.352
[APPLAUSE]

00:11:21.352 --> 00:11:22.310
And I can drill around.

00:11:26.320 --> 00:11:29.670
So that's the hybrid debugger
and the CMake support class.

00:11:29.670 --> 00:11:31.890
The last thing I'll show
you in the build system area

00:11:31.890 --> 00:11:33.910
is something on
the command line.

00:11:33.910 --> 00:11:37.295
So let's say that you've gotten
a project from a coworker,

00:11:37.295 --> 00:11:40.310
or maybe you did a Git
poll and someone changed

00:11:40.310 --> 00:11:42.750
the build tools version, or
let's say, the compiled SDK

00:11:42.750 --> 00:11:44.090
version of your project.

00:11:44.090 --> 00:11:48.900
And then you build, and then
you hit a message like this one.

00:11:48.900 --> 00:11:51.290
You don't have built tools
2201, what you do now you?

00:11:51.290 --> 00:11:53.570
You open SDK Manager,
you installed it, right?

00:11:53.570 --> 00:11:58.220
Well, in 2.2 alpha 1, we
now have a experimental flag

00:11:58.220 --> 00:12:00.970
you can set.

00:12:00.970 --> 00:12:04.220
And when I run the
build, if I've already

00:12:04.220 --> 00:12:06.604
agreed to this license,
Gradle will just

00:12:06.604 --> 00:12:09.270
go and download it for me on the
fly, as you can see right here.

00:12:09.270 --> 00:12:15.000
[APPLAUSE]

00:12:15.000 --> 00:12:16.560
So that should also
make configuring

00:12:16.560 --> 00:12:18.750
continuous integration
serves a lot easier.

00:12:18.750 --> 00:12:19.250
All right.

00:12:19.250 --> 00:12:23.230
Let's go from the extreme of
command line to visual editors.

00:12:23.230 --> 00:12:25.960
So let's take a look at
our new Layout Editor.

00:12:25.960 --> 00:12:28.590
Actually, I shouldn't call
it Layout Editor, because it

00:12:28.590 --> 00:12:29.660
does more than layouts.

00:12:29.660 --> 00:12:35.120
So first of all, I can
open up a menu file.

00:12:35.120 --> 00:12:35.710
Here's a menu.

00:12:35.710 --> 00:12:38.630
I can drag and drop
design menus now.

00:12:38.630 --> 00:12:42.420
We can also open up
preference files,

00:12:42.420 --> 00:12:44.960
and I can drag and
drop preference files.

00:12:44.960 --> 00:12:48.666
And obviously, this
Component Inspector.

00:12:48.666 --> 00:12:51.540
STEPH CUTHBERTSON: You did
a really nice job on this.

00:12:51.540 --> 00:12:54.010
TOR NORBYE: But of course,
layouts are a big part of this.

00:12:54.010 --> 00:12:55.390
So you can see we
have a new Component

00:12:55.390 --> 00:12:56.973
Inspector on the
right, this one shows

00:12:56.973 --> 00:13:00.300
you the important attributes
for the selected component,

00:13:00.300 --> 00:13:01.750
text view, in this case.

00:13:01.750 --> 00:13:03.400
So for example,
for text view, we

00:13:03.400 --> 00:13:04.710
show you the text appearance.

00:13:04.710 --> 00:13:07.830
And notice how there is some
gray text here in the Component

00:13:07.830 --> 00:13:10.210
Inspector, even though I
haven't set the text appearance,

00:13:10.210 --> 00:13:11.480
we're showing you
what it actually

00:13:11.480 --> 00:13:12.563
is going to be at runtime.

00:13:12.563 --> 00:13:15.371
So I can see the font will
be 14 SPs for example.

00:13:15.371 --> 00:13:16.870
If I switch to
something else, it'll

00:13:16.870 --> 00:13:18.990
compute what that should be.

00:13:18.990 --> 00:13:22.210
Now, we only have a
subset of the properties

00:13:22.210 --> 00:13:23.540
here to make it simple to find.

00:13:23.540 --> 00:13:25.930
But if you need anything else,
the full set of properties

00:13:25.930 --> 00:13:28.280
is just a click away, up here.

00:13:28.280 --> 00:13:32.120
So on the design surface,
we have blueprint mode.

00:13:32.120 --> 00:13:35.776
So blueprint mode is basically
showing the structure.

00:13:35.776 --> 00:13:37.650
It's like an x-ray of
what your app is doing.

00:13:37.650 --> 00:13:40.120
And I can have blueprint
mode and design mode on side

00:13:40.120 --> 00:13:41.059
by side.

00:13:41.059 --> 00:13:42.850
And one thing we have
that you've asked for

00:13:42.850 --> 00:13:46.320
is, this is the scroll view
and I can now scroll the design

00:13:46.320 --> 00:13:47.895
surface directly.

00:13:47.895 --> 00:13:54.162
[CHEERING AND APPLAUSE]

00:13:54.162 --> 00:13:55.620
Now, blueprint mode
is particularly

00:13:55.620 --> 00:13:57.161
useful for the new
constraint layout.

00:13:57.161 --> 00:13:59.680
So let's take a look
at constraint layout.

00:13:59.680 --> 00:14:03.320
So first of all, I'm to
turn off auto connect mode.

00:14:03.320 --> 00:14:05.130
So let's drag in
some components.

00:14:05.130 --> 00:14:07.010
So I'll put a text view here.

00:14:07.010 --> 00:14:15.920
We'll put a edit text, another
text view, and another password

00:14:15.920 --> 00:14:17.680
field, maybe.

00:14:17.680 --> 00:14:20.220
And then we'll add some
buttons on the bottom right.

00:14:22.839 --> 00:14:24.630
So you can notice I'm
being kind of sloppy,

00:14:24.630 --> 00:14:27.586
because after the fact, I can go
in and I can make a selection.

00:14:27.586 --> 00:14:28.960
I can right click
and say, hey, I

00:14:28.960 --> 00:14:31.740
want to align these
things on the bottom.

00:14:31.740 --> 00:14:34.840
I want to align all
these things on the left.

00:14:34.840 --> 00:14:37.310
Maybe I also want to
pack them vertically.

00:14:40.600 --> 00:14:42.830
So here I have my
design, now let's see

00:14:42.830 --> 00:14:46.012
what happens if I go
to landscape mode.

00:14:46.012 --> 00:14:46.970
That's not good, right?

00:14:46.970 --> 00:14:49.130
So I have buttons off screen.

00:14:49.130 --> 00:14:50.870
So let's try to fix that.

00:14:50.870 --> 00:14:52.870
So there's this
little light bulb

00:14:52.870 --> 00:14:55.570
icon for infer constraints.

00:14:55.570 --> 00:14:58.122
Notice what happens
when I click it.

00:14:58.122 --> 00:14:59.580
I now have these
constraints, where

00:14:59.580 --> 00:15:02.030
it's tried to guess what
we probably mean here.

00:15:02.030 --> 00:15:04.866
And when I try to
resize this now,

00:15:04.866 --> 00:15:06.740
you can see the buttons
are moving correctly.

00:15:06.740 --> 00:15:12.970
[APPLAUSE]

00:15:12.970 --> 00:15:15.450
So normally, you're actually
in Auto connect mode.

00:15:15.450 --> 00:15:17.820
So if I want to drag
in a button here,

00:15:17.820 --> 00:15:19.640
you can see that the
second I drop it,

00:15:19.640 --> 00:15:22.050
it actually goes and adds
these constraints for me.

00:15:22.050 --> 00:15:23.550
And if I don't like
them, of course,

00:15:23.550 --> 00:15:25.758
I can delete the constraint
by just clicking on them.

00:15:25.758 --> 00:15:27.340
I can also drag new constraints.

00:15:27.340 --> 00:15:28.960
And we sort of
show you a preview

00:15:28.960 --> 00:15:31.060
what it's going to do
when you commit to it.

00:15:31.060 --> 00:15:33.634
And the constraints
can also have strength.

00:15:33.634 --> 00:15:35.050
So as I'm dragging,
you can see it

00:15:35.050 --> 00:15:38.650
auto snaps to a quarter
or a specific percentage.

00:15:38.650 --> 00:15:41.207
Someone asked yesterday if this
also works from XML editing,

00:15:41.207 --> 00:15:42.290
if that's what you prefer.

00:15:42.290 --> 00:15:44.347
And why, yes it does.

00:15:44.347 --> 00:15:45.680
You can see here, we are in XML.

00:15:45.680 --> 00:15:49.270
I can continue to play with
the constraints over here.

00:15:49.270 --> 00:15:51.819
And you can see that XML
editing works just fine as well.

00:15:51.819 --> 00:15:52.985
So this is a very powerful--

00:15:52.985 --> 00:15:53.770
[APPLAUSE]

00:15:53.770 --> 00:15:54.396
Thank you.

00:15:58.490 --> 00:16:02.210
So this is a very powerful
constraint solver.

00:16:02.210 --> 00:16:06.450
And what that lets you
do is flatten your layout

00:16:06.450 --> 00:16:09.510
hierarchies, and that's very,
very, good for performance.

00:16:09.510 --> 00:16:12.580
So we've added a feature
to help jumpstart that.

00:16:12.580 --> 00:16:17.160
So let me open this
other layout, this one.

00:16:17.160 --> 00:16:21.140
Let me switch to blueprint mode,
so you can see what's going on.

00:16:21.140 --> 00:16:22.840
So here's a layout
that is actually

00:16:22.840 --> 00:16:26.200
a set of nested linear layouts.

00:16:26.200 --> 00:16:30.650
And if I now go and say,
convert this linear layout

00:16:30.650 --> 00:16:32.360
to a constraint
layout, it offers

00:16:32.360 --> 00:16:34.310
to flatten the whole thing.

00:16:34.310 --> 00:16:36.676
And as you can see, visually,
it looks the same now,

00:16:36.676 --> 00:16:37.800
except we have constraints.

00:16:37.800 --> 00:16:39.799
And on the left, you can
see a single flat list.

00:16:39.799 --> 00:16:43.996
[APPLAUSE]

00:16:47.341 --> 00:16:47.840
All right.

00:16:47.840 --> 00:16:51.440
Let's go look at editing.

00:16:51.440 --> 00:16:54.510
So in the editing area, we've
added a couple of features.

00:16:54.510 --> 00:16:57.240
So first of all, there's
the Firebase integration.

00:16:57.240 --> 00:17:00.350
So if you're trying to
accomplish a task with Firebase

00:17:00.350 --> 00:17:02.660
for example, you want
to add crash reporting,

00:17:02.660 --> 00:17:04.680
you just open up the
assistant window,

00:17:04.680 --> 00:17:06.650
and you pick the
task you want to do.

00:17:06.650 --> 00:17:09.579
So for example, crash
reporting, you drill into this,

00:17:09.579 --> 00:17:12.490
you can see you get this step
by set of instructions that sits

00:17:12.490 --> 00:17:14.210
next to your source editor.

00:17:14.210 --> 00:17:15.890
And if you, for
example, see that you

00:17:15.890 --> 00:17:18.280
want to perform these
lines, you can just

00:17:18.280 --> 00:17:21.246
drag it into your source code
to make that edit, for example.

00:17:24.839 --> 00:17:27.482
If you are trying to figure
out how to use an API.

00:17:27.482 --> 00:17:29.940
So let's say you've heard you
should use the Job Scheduler,

00:17:29.940 --> 00:17:32.390
and yes, you should
use the Job Scheduler.

00:17:32.390 --> 00:17:33.890
You could right
click on it, and you

00:17:33.890 --> 00:17:35.800
can say find me some
sample code for this.

00:17:35.800 --> 00:17:39.608
[APPLAUSE]

00:17:43.267 --> 00:17:45.350
So as you can see, it
basically goes to the server

00:17:45.350 --> 00:17:47.960
and finds recommended samples
that you can then drill into.

00:17:47.960 --> 00:17:50.090
And you can right click and
say, open this in a browser,

00:17:50.090 --> 00:17:51.464
and let me learn
more about this.

00:17:55.120 --> 00:17:58.120
2.2 is based on IntelliJ 16.1.

00:17:58.120 --> 00:18:00.790
So we have a number of new
features for that, as well.

00:18:00.790 --> 00:18:06.150
So one thing we've got
is support for editing

00:18:06.150 --> 00:18:08.200
bidirectional strings.

00:18:08.200 --> 00:18:10.484
So this is something our
international audience

00:18:10.484 --> 00:18:11.650
has been asking for a while.

00:18:11.650 --> 00:18:13.556
So here we have
some Arabic text.

00:18:13.556 --> 00:18:15.180
And you can see the
source editor's now

00:18:15.180 --> 00:18:16.888
more than happy to
handle this correctly.

00:18:16.888 --> 00:18:19.760
I know this has been a big pain
point, so finally we've got it.

00:18:19.760 --> 00:18:21.620
Thank you IntelliJ.

00:18:21.620 --> 00:18:25.180
So IntelliJ 16 also comes with
a bunch of new inspections

00:18:25.180 --> 00:18:26.380
in the editors.

00:18:26.380 --> 00:18:28.860
And on top of that,
we've added into it, too,

00:18:28.860 --> 00:18:32.540
a number of new inspections
that are Android specific.

00:18:32.540 --> 00:18:36.010
Let's take a look at those.

00:18:36.010 --> 00:18:38.070
So first of all,
hopefully everyone

00:18:38.070 --> 00:18:40.110
knows that it's really,
really bad practice

00:18:40.110 --> 00:18:44.180
to solve the problem of passing
data from activities by making

00:18:44.180 --> 00:18:45.560
your field static.

00:18:45.560 --> 00:18:46.260
That's a no-no.

00:18:46.260 --> 00:18:48.342
And now Lint will
flag it for you,

00:18:48.342 --> 00:18:50.050
not just because it's
a leak, but also it

00:18:50.050 --> 00:18:53.392
makes Instant Run very
happy when you do this.

00:18:53.392 --> 00:18:56.860
This is also not as simple as
just this case, for example, we

00:18:56.860 --> 00:18:59.510
have-- if I make
other fields here

00:18:59.510 --> 00:19:02.470
static, app data 1 is no
problem, but after app data 2,

00:19:02.470 --> 00:19:06.260
it turns out that one
has Instant State that

00:19:06.260 --> 00:19:08.849
is a context, but now there's
a static reference to it,

00:19:08.849 --> 00:19:09.390
which is bad.

00:19:09.390 --> 00:19:13.182
[APPLAUSE]

00:19:14.672 --> 00:19:16.880
So let's look at some of
the new support annotations.

00:19:16.880 --> 00:19:18.629
We released the support
library yesterday,

00:19:18.629 --> 00:19:20.200
and there are some
new good ones.

00:19:20.200 --> 00:19:23.409
So first of all, you can now,
finally say, hey, this method,

00:19:23.409 --> 00:19:25.450
even though it's inside
of a worker thread class,

00:19:25.450 --> 00:19:27.130
this one is thread-safe.

00:19:27.130 --> 00:19:28.966
You can call it from any thread.

00:19:31.810 --> 00:19:34.410
For awhile, we've had
API check, so Lint

00:19:34.410 --> 00:19:36.700
will look at the platform
APIs and compare them

00:19:36.700 --> 00:19:38.370
to your main SDK.

00:19:38.370 --> 00:19:41.810
And we have a quick fix where
we can say, well OK, insert

00:19:41.810 --> 00:19:42.950
that check for me.

00:19:42.950 --> 00:19:47.550
However, what you can now
do is, you can say-- sorry.

00:19:47.550 --> 00:19:51.680
You can say I expect my
method to require this API.

00:19:51.680 --> 00:19:53.669
So you're passing on
the responsibility

00:19:53.669 --> 00:19:54.710
to call it from your API.

00:19:54.710 --> 00:19:57.810
So you can now get API check
for your libraries to client.

00:19:57.810 --> 00:20:00.020
So you can see now
these other calls,

00:20:00.020 --> 00:20:03.070
even though they're calling your
API, the API check is applied.

00:20:06.250 --> 00:20:11.485
The next thing I will do is show
you the dimension resource--

00:20:11.485 --> 00:20:13.530
the dimension annotation.

00:20:13.530 --> 00:20:16.920
So this one lets you say, this
integer represents a dimension.

00:20:16.920 --> 00:20:18.670
And there are various
units you can apply.

00:20:18.670 --> 00:20:20.753
Now, it turns out pixel
is a very, very important.

00:20:20.753 --> 00:20:23.020
Most APIs in SDK operate
in the pixel space.

00:20:23.020 --> 00:20:25.520
So we have a new annotation
to just say pixels.

00:20:25.520 --> 00:20:28.226
So that's at px, and
when I do that, you

00:20:28.226 --> 00:20:30.600
can see we're now flagging
incorrect usages, where you're

00:20:30.600 --> 00:20:33.130
passing a dimension resource
that should be a dimension.

00:20:33.130 --> 00:20:35.099
So hopefully that
will be useful.

00:20:35.099 --> 00:20:36.890
And the last annotation
I want to highlight

00:20:36.890 --> 00:20:38.080
is the keep annotation.

00:20:38.080 --> 00:20:41.270
So you can put keep on
your methods and classes.

00:20:41.270 --> 00:20:42.400
And as of, yes--

00:20:42.400 --> 00:20:47.920
[APPLAUSE]

00:20:47.920 --> 00:20:51.104
So as of Gradle plugin
2.2, we now automatically

00:20:51.104 --> 00:20:53.520
make sure that, if you use
ProGuard or the new Incremental

00:20:53.520 --> 00:20:58.350
Shrinker, these methods will
not be removed at release time.

00:20:58.350 --> 00:21:00.140
So if you like the
support annotations,

00:21:00.140 --> 00:21:02.250
we have a feature that,
I think, will make

00:21:02.250 --> 00:21:03.600
them even more useful to you.

00:21:03.600 --> 00:21:06.000
And that's the new inference.

00:21:06.000 --> 00:21:09.440
So IntelliJ has, for a while,
had this analysis action

00:21:09.440 --> 00:21:10.810
to infer nullity.

00:21:10.810 --> 00:21:13.220
Well, we have a new
feature, it's behind a flag,

00:21:13.220 --> 00:21:16.810
but you can try it if you want,
to infer support annotations.

00:21:16.810 --> 00:21:19.350
So when I run this
on the current file,

00:21:19.350 --> 00:21:20.900
it basically does
a bunch of analysis

00:21:20.900 --> 00:21:23.170
to figure out a lot of
new annotations based

00:21:23.170 --> 00:21:24.320
on usage in your project.

00:21:24.320 --> 00:21:26.400
So if I go back
into my file here,

00:21:26.400 --> 00:21:28.817
all the div markers you see
here are for new adaptations

00:21:28.817 --> 00:21:29.650
that it figured out.

00:21:29.650 --> 00:21:31.510
For example, there's a
permission requirement here.

00:21:31.510 --> 00:21:33.640
So that will hopefully
help jump start annotations

00:21:33.640 --> 00:21:36.876
and will help Lint find
more bugs in your code.

00:21:36.876 --> 00:21:38.750
We've also been
collaborating with a research

00:21:38.750 --> 00:21:43.700
team at Oregon State University
to work on permissions.

00:21:43.700 --> 00:21:47.820
So this is still a
work in progress,

00:21:47.820 --> 00:21:51.260
but when this is done, this
will let you migrate your app

00:21:51.260 --> 00:21:52.740
to Android end permissions.

00:21:52.740 --> 00:21:55.870
So here, I can
invoke this action,

00:21:55.870 --> 00:21:58.870
it will help me perform
the right requests

00:21:58.870 --> 00:22:01.152
and handle callbacks for
Android end permissions.

00:22:01.152 --> 00:22:04.905
[APPLAUSE]

00:22:08.390 --> 00:22:12.180
We also have a refactoring
to remove unused resources.

00:22:12.180 --> 00:22:15.322
So if I add some resources
that aren't actually used,

00:22:15.322 --> 00:22:17.030
I can now discard
their refactoring menu,

00:22:17.030 --> 00:22:21.272
say remove unused
resources, and the IDE

00:22:21.272 --> 00:22:23.296
will find them and nuke
them for you, which

00:22:23.296 --> 00:22:24.420
helps make your app leaner.

00:22:24.420 --> 00:22:30.560
[APPLAUSE]

00:22:30.560 --> 00:22:31.110
All right.

00:22:31.110 --> 00:22:36.190
So now the last thing I want to
show you is the Espresso Test

00:22:36.190 --> 00:22:38.290
Recorder.

00:22:38.290 --> 00:22:41.291
I'm hearing "ooh"
in the audience.

00:22:41.291 --> 00:22:41.790
All right.

00:22:41.790 --> 00:22:46.290
So to do that, all I have
to do is go into my project,

00:22:46.290 --> 00:22:50.140
and go to the Run menu and
say, record Espresso test.

00:22:50.140 --> 00:22:53.515
And note that it's
Espresso not "Ex-presso."

00:22:53.515 --> 00:22:55.640
And so when I do that, you
can see that it actually

00:22:55.640 --> 00:22:58.930
says that actually
builds the app,

00:22:58.930 --> 00:23:03.790
and it starts this event
recorder on the left here.

00:23:03.790 --> 00:23:06.780
And on the right, we
have our app running.

00:23:06.780 --> 00:23:08.840
So now I can, for
example, go and click

00:23:08.840 --> 00:23:11.600
on this category over
here, and you can see

00:23:11.600 --> 00:23:13.640
it records an event for that.

00:23:13.640 --> 00:23:16.027
And I can click on
the Back button.

00:23:16.027 --> 00:23:17.860
And then I can go down,
and let's say, click

00:23:17.860 --> 00:23:20.070
on the music tile.

00:23:20.070 --> 00:23:22.570
Notice as I'm clicking, it's
recording the events over here.

00:23:22.570 --> 00:23:24.819
And it tries to make sense
of what it is I'm clicking.

00:23:24.819 --> 00:23:26.850
So for example, when I
click on the red button,

00:23:26.850 --> 00:23:31.090
it's recording that I
click the FAB quiz button.

00:23:31.090 --> 00:23:33.590
And so another cool thing I
can do while I'm recording,

00:23:33.590 --> 00:23:35.590
I can add assertions.

00:23:35.590 --> 00:23:39.510
So I'm going to click on the
Add Assertion button here.

00:23:39.510 --> 00:23:42.750
And it's now pulling down a
screenshot and view hierarchy

00:23:42.750 --> 00:23:45.770
of what's going on in the app.

00:23:45.770 --> 00:23:48.370
And now you can see,
I can move around

00:23:48.370 --> 00:23:50.950
in the logical
structure of the app.

00:23:50.950 --> 00:23:52.520
And if I click,
for example, on the

00:23:52.520 --> 00:23:54.360
question, "Who was
the youngest Beatle?"

00:23:54.360 --> 00:23:56.200
It pulls that down
and it suggests

00:23:56.200 --> 00:23:58.412
an assertion, which
is, hey, at this point,

00:23:58.412 --> 00:23:59.870
when the test is
running, we expect

00:23:59.870 --> 00:24:02.516
this string to be "Who
was the youngest Beatle?"

00:24:02.516 --> 00:24:06.324
[APPLAUSE]

00:24:09.180 --> 00:24:11.920
So then I press Save
Assertion, and I keep going.

00:24:11.920 --> 00:24:15.890
So does anyone-- I'm going
to click some wrong answers,

00:24:15.890 --> 00:24:18.110
until you stop me.

00:24:18.110 --> 00:24:20.560
So all right?

00:24:20.560 --> 00:24:22.010
Still wrong.

00:24:22.010 --> 00:24:23.900
Still wrong.

00:24:23.900 --> 00:24:25.381
George is right.

00:24:25.381 --> 00:24:25.880
OK?

00:24:25.880 --> 00:24:30.770
And I'm going to finally
click on the Submit button.

00:24:30.770 --> 00:24:32.839
And you can see that that
was the correct answer.

00:24:32.839 --> 00:24:34.380
And I think it's
probably good enough

00:24:34.380 --> 00:24:35.550
for the test recording part.

00:24:35.550 --> 00:24:37.450
Now I'm going to say
Complete Recording.

00:24:37.450 --> 00:24:39.390
When I do that, it's
asking me what class

00:24:39.390 --> 00:24:40.890
I want to save this test as.

00:24:40.890 --> 00:24:43.620
I'm going to accept
the default. And here

00:24:43.620 --> 00:24:45.885
we have our Espresso test.

00:24:48.467 --> 00:24:50.800
Notice that I clicked some
wrong stuff in the beginning.

00:24:50.800 --> 00:24:52.340
I can now edit this
test if I want.

00:24:52.340 --> 00:24:56.010
So for example, I can take
out, clicking the wrong tile

00:24:56.010 --> 00:24:57.660
and going back.

00:24:57.660 --> 00:24:59.980
And then I can run the test.

00:24:59.980 --> 00:25:01.590
So let's do that.

00:25:01.590 --> 00:25:05.850
So all I have to do is click
on this Run button right here.

00:25:05.850 --> 00:25:09.092
And you can actually use
cloud testing as well.

00:25:09.092 --> 00:25:11.550
I don't have time to show it,
but you can sign up for that.

00:25:11.550 --> 00:25:14.012
And then it'll run your
UI test across a number

00:25:14.012 --> 00:25:15.720
of different harbored
form factors, which

00:25:15.720 --> 00:25:16.751
is pretty useful.

00:25:16.751 --> 00:25:17.250
All right.

00:25:17.250 --> 00:25:20.280
So let's just run this
on the emulator again.

00:25:20.280 --> 00:25:23.680
So it's going to build the test,
deploy, and let's look over

00:25:23.680 --> 00:25:25.660
on the right here, when
the app starts running,

00:25:25.660 --> 00:25:27.659
because it actually can
click faster than I can.

00:25:30.700 --> 00:25:34.040
Installing APK, here we
go, click, click, click.

00:25:36.800 --> 00:25:38.195
And we have our green pass.

00:25:38.195 --> 00:25:38.760
All right.

00:25:38.760 --> 00:25:43.640
[APPLAUSE]

00:25:43.640 --> 00:25:44.434
Thank you.

00:25:44.434 --> 00:25:45.850
So with that, I'm
going to turn it

00:25:45.850 --> 00:25:47.790
back over to Jamal,
who's going to be talking

00:25:47.790 --> 00:25:50.085
about the visual editors.

00:25:50.085 --> 00:25:54.106
[APPLAUSE]

00:25:56.480 --> 00:25:59.420
JAMAL EASON: Thanks
Tor, great demo.

00:25:59.420 --> 00:26:01.594
So what Tor showed you
is what we're doing.

00:26:01.594 --> 00:26:03.260
I'm going to spend a
little time talking

00:26:03.260 --> 00:26:06.010
about why we're doing it and why
you might want to integrate it

00:26:06.010 --> 00:26:08.260
into your development workflow.

00:26:08.260 --> 00:26:12.550
So for design, we're thinking
about two main topics:

00:26:12.550 --> 00:26:16.070
XML and layouts.

00:26:16.070 --> 00:26:20.760
So for XML, I know a few of you
enjoy designing your entire UI

00:26:20.760 --> 00:26:22.785
in XML, that's great.

00:26:22.785 --> 00:26:24.980
But I know for me,
and many others, it's

00:26:24.980 --> 00:26:27.090
great to have some sort
of visualization tool

00:26:27.090 --> 00:26:30.250
to allow you to see how
your app is going to render.

00:26:30.250 --> 00:26:32.540
And our team set a goal for
ourselves, thinking about

00:26:32.540 --> 00:26:34.660
is it possible for us
to create a tool where

00:26:34.660 --> 00:26:36.057
no XML editing is required?

00:26:36.057 --> 00:26:38.390
Of course, that means you can
always look into your code

00:26:38.390 --> 00:26:40.560
afterwards, but it
shouldn't be in the way

00:26:40.560 --> 00:26:43.160
to get your job done.

00:26:43.160 --> 00:26:45.420
So that was the reason
behind the new layout editor.

00:26:45.420 --> 00:26:47.961
And as Tor has showed, you have
a whole host of new features,

00:26:47.961 --> 00:26:50.780
including ways to drag widgets
onto the component tree

00:26:50.780 --> 00:26:53.511
onto the design surface, or
the new blueprint mode, which

00:26:53.511 --> 00:26:55.260
allows you to peer
behind your application

00:26:55.260 --> 00:26:57.810
to see how all your
widgets connect together.

00:26:57.810 --> 00:26:59.399
And lastly, the new
properties panel.

00:26:59.399 --> 00:27:01.940
In the past, it used to show
you all the different properties

00:27:01.940 --> 00:27:03.700
that are available for a view.

00:27:03.700 --> 00:27:05.460
Now, we curated
those and showed you

00:27:05.460 --> 00:27:09.180
the most impactful attributes
to use for your particular view

00:27:09.180 --> 00:27:10.801
layout.

00:27:10.801 --> 00:27:12.550
The second question
we were thinking about

00:27:12.550 --> 00:27:13.940
is around layouts.

00:27:13.940 --> 00:27:16.440
So for Android layouts, you
have a couple different options.

00:27:16.440 --> 00:27:19.306
You have linear layout, of
course, horizontal and linear.

00:27:19.306 --> 00:27:20.930
But then, you're
thinking well perhaps,

00:27:20.930 --> 00:27:23.184
I need to use the frame
layout or the table layout,

00:27:23.184 --> 00:27:24.850
wait that's not going
to work, actually.

00:27:24.850 --> 00:27:29.010
Let's think about using the grid
layout or the relative layout,

00:27:29.010 --> 00:27:30.540
wait, so which
should we use here?

00:27:30.540 --> 00:27:32.498
That's the problem we're
trying to think about,

00:27:32.498 --> 00:27:36.810
because many times, you're
thinking about which containers

00:27:36.810 --> 00:27:39.120
to use for my layouts?

00:27:39.120 --> 00:27:41.560
So the constraint
layout is the solution

00:27:41.560 --> 00:27:45.080
for this problem, where you can
think less about the container

00:27:45.080 --> 00:27:47.290
and more about the content
and how you lay out

00:27:47.290 --> 00:27:51.267
your widgets on your layouts.

00:27:51.267 --> 00:27:52.850
So let's talk about
why you might want

00:27:52.850 --> 00:27:54.170
to use the constraint layout.

00:27:54.170 --> 00:27:56.660
So number one, it's
fast UI development.

00:27:56.660 --> 00:27:58.870
So as you saw in the
demo, you can actually

00:27:58.870 --> 00:28:01.100
add widgets pretty
quickly and connect

00:28:01.100 --> 00:28:03.060
all the different constraints.

00:28:03.060 --> 00:28:05.390
What it's also very
important to think about

00:28:05.390 --> 00:28:08.107
is that this helps you have
more responsive design.

00:28:08.107 --> 00:28:09.690
So instead of thinking
about, well how

00:28:09.690 --> 00:28:14.200
does my screen fit on a Nexus 4
or a tablet or a Nexus device,

00:28:14.200 --> 00:28:15.760
we can now create
constraints that

00:28:15.760 --> 00:28:19.330
allows you to respond your
content based on the screen

00:28:19.330 --> 00:28:20.770
size.

00:28:20.770 --> 00:28:23.760
The third most important
aspect is performance.

00:28:23.760 --> 00:28:25.810
So as you saw in
the demonstration,

00:28:25.810 --> 00:28:28.460
we can now find your
hierarchy for you.

00:28:28.460 --> 00:28:31.040
If you didn't know, if
you put a relative layout

00:28:31.040 --> 00:28:33.650
underneath another linear layout
and another relative layout,

00:28:33.650 --> 00:28:35.691
that actually is slower
for the Android operating

00:28:35.691 --> 00:28:36.580
system to process.

00:28:36.580 --> 00:28:38.480
So all that nesting
can now flattened

00:28:38.480 --> 00:28:40.680
with a new constraint layout.

00:28:40.680 --> 00:28:43.050
And lastly, it's
backwards compatible,

00:28:43.050 --> 00:28:45.410
which means you can use it,
obviously, for new projects,

00:28:45.410 --> 00:28:46.890
but it's the
support library that

00:28:46.890 --> 00:28:49.220
allows you to use it to
existing projects as well.

00:28:49.220 --> 00:28:55.510
[APPLAUSE]

00:28:55.510 --> 00:28:58.070
And so the third tool that
we demonstrated around design

00:28:58.070 --> 00:28:59.647
is the Layout Inspector.

00:28:59.647 --> 00:29:01.730
So sometimes when you're
loading your application,

00:29:01.730 --> 00:29:04.120
you're wondering, well,
why is my view overlapping,

00:29:04.120 --> 00:29:06.640
or perhaps, why is one
of my attributes not

00:29:06.640 --> 00:29:08.220
what I expect it to be?

00:29:08.220 --> 00:29:09.890
So what you can do
now with our tools

00:29:09.890 --> 00:29:11.680
is you can right click
and take a snapshot

00:29:11.680 --> 00:29:14.310
of your current layout
and visually inspect

00:29:14.310 --> 00:29:16.640
all different attributes
and look at the entire view

00:29:16.640 --> 00:29:18.167
hierarchy of your layout.

00:29:18.167 --> 00:29:20.000
So that should be very
helpful in debugging.

00:29:22.406 --> 00:29:24.530
It's now time to spend a
little bit of time talking

00:29:24.530 --> 00:29:26.620
about Develop, and
what tools we've

00:29:26.620 --> 00:29:29.450
enabled to help you with that.

00:29:29.450 --> 00:29:34.456
So as we showed in the demo,
we have a new Firebase plugin.

00:29:34.456 --> 00:29:36.330
And this supports a the
new Firebase services

00:29:36.330 --> 00:29:39.410
that we launched
yesterday at Google I/O.

00:29:39.410 --> 00:29:42.810
And you can now add things
like Google Analytics, ads,

00:29:42.810 --> 00:29:45.280
cloud messaging, all in a
click of a button, inside

00:29:45.280 --> 00:29:49.750
of Android Studio 2.0.

00:29:49.750 --> 00:29:53.190
The other cool thing we talked
about is the sample's browser.

00:29:53.190 --> 00:29:54.820
And as demonstrated,
if you're looking

00:29:54.820 --> 00:29:57.170
for an API example of
how do you use something,

00:29:57.170 --> 00:29:59.860
now we provide the power
of all the Google samples

00:29:59.860 --> 00:30:00.934
at the click of a button.

00:30:00.934 --> 00:30:02.350
This should make
it easier for you

00:30:02.350 --> 00:30:04.255
to now look and have
a good starting point

00:30:04.255 --> 00:30:05.630
for your application
development.

00:30:09.200 --> 00:30:10.880
And now with that,
I'd like to talk

00:30:10.880 --> 00:30:12.296
a little bit about
the build tools

00:30:12.296 --> 00:30:15.050
and I'll invite Steph to talk
about those two changers.

00:30:15.050 --> 00:30:16.050
STEPH CUTHBERTSON: Cool.

00:30:16.050 --> 00:30:20.270
[APPLAUSE]

00:30:20.270 --> 00:30:22.810
Thanks very much, Jamal.

00:30:22.810 --> 00:30:26.240
For Build, I want to start
by talking about Instant Run.

00:30:26.240 --> 00:30:28.660
Now, as a developer, I
think one of the best

00:30:28.660 --> 00:30:31.250
feelings in the world
is being in the flow.

00:30:31.250 --> 00:30:33.380
And one of our
goals for Android is

00:30:33.380 --> 00:30:35.170
to make Android
development feel as

00:30:35.170 --> 00:30:36.850
lightweight as web development.

00:30:36.850 --> 00:30:38.480
So you can make
your code changes,

00:30:38.480 --> 00:30:40.500
and then see them,
essentially, refresh.

00:30:40.500 --> 00:30:43.820
So that you can really stay
in the flow as you're coding.

00:30:43.820 --> 00:30:45.700
That's why we built Instant Run.

00:30:45.700 --> 00:30:49.240
So I want to talk a little
bit first about how it works.

00:30:49.240 --> 00:30:53.920
The IDE swaps your changes
in one of three ways.

00:30:53.920 --> 00:30:56.440
For incremental changes,
we do the fastest swap,

00:30:56.440 --> 00:30:58.410
which is called a hot-swap.

00:30:58.410 --> 00:31:00.150
And here, what we
do is we instrument

00:31:00.150 --> 00:31:02.370
your byte code on
the first build.

00:31:02.370 --> 00:31:05.030
And then after that,
when you make changes,

00:31:05.030 --> 00:31:08.800
we just redirect the code path
to pick up the changed code.

00:31:08.800 --> 00:31:11.460
The second type of
swap is a warm swap.

00:31:11.460 --> 00:31:13.870
And that's when we need
to do an activity restart.

00:31:13.870 --> 00:31:16.036
So that's what you need
whenever you're going to do,

00:31:16.036 --> 00:31:18.250
for instance, resource changes.

00:31:18.250 --> 00:31:21.260
Cold swaps are when we
need to restart the app.

00:31:21.260 --> 00:31:24.910
And that's required when
you do structural changes.

00:31:24.910 --> 00:31:27.750
So examples of those would
be changes to inheritance

00:31:27.750 --> 00:31:31.100
or if you change your
method signature.

00:31:31.100 --> 00:31:34.110
So what I'd like to do is back
up and unpack a little bit

00:31:34.110 --> 00:31:36.740
some of the benchmarks that
we talked about yesterday

00:31:36.740 --> 00:31:38.410
in the keynote.

00:31:38.410 --> 00:31:41.880
We benchmark using a wide
range of different applications

00:31:41.880 --> 00:31:42.780
and different tools.

00:31:42.780 --> 00:31:45.410
I won't take you through
all of it, just one example.

00:31:45.410 --> 00:31:47.340
We benchmark with
the Wikipedia app.

00:31:47.340 --> 00:31:49.800
It's an open source app,
you can get it on GitHub.

00:31:49.800 --> 00:31:53.280
And I've posted here
all of our criteria,

00:31:53.280 --> 00:31:55.830
in case it's interesting
to repeat them.

00:31:55.830 --> 00:32:00.030
What you'll notice is that
we benchmark against 2.0

00:32:00.030 --> 00:32:02.050
with Instant Run disabled.

00:32:02.050 --> 00:32:05.180
And you can see in,
2.1 with cold swap,

00:32:05.180 --> 00:32:11.900
it's 4.7 times faster, and
hot-swap is 10.7 times faster.

00:32:11.900 --> 00:32:13.990
Now, what that means,
if you think about it,

00:32:13.990 --> 00:32:18.500
is our build speeds are actually
faster than 10x, because we're

00:32:18.500 --> 00:32:22.930
benchmarking against 2.0,
and 2.0 is faster than 1.5,

00:32:22.930 --> 00:32:25.010
because of changes
we made in dex.

00:32:25.010 --> 00:32:28.550
And we also made ADB push
speeds 10 times faster.

00:32:28.550 --> 00:32:31.060
So we're underselling
a little bit,

00:32:31.060 --> 00:32:33.850
but what we care
about most is, really,

00:32:33.850 --> 00:32:35.810
that you guys are getting
super fast builds.

00:32:35.810 --> 00:32:37.185
And so that's what
we focused on,

00:32:37.185 --> 00:32:39.390
and this gives us a nice
apples to apples comparison

00:32:39.390 --> 00:32:41.910
in our own benchmarks.

00:32:41.910 --> 00:32:44.620
Let me talk about another
type of benchmarking we do.

00:32:44.620 --> 00:32:49.120
So we look at the user
stats for users who opt in.

00:32:49.120 --> 00:32:52.180
And we instrument in a bunch
of different, very cool ways.

00:32:52.180 --> 00:32:55.180
So for all of you guys
who opt in, thank you.

00:32:55.180 --> 00:32:57.160
This is an example
of a stat we look at.

00:32:57.160 --> 00:33:02.890
This is average build time
for Instant Run on hot-swap.

00:33:02.890 --> 00:33:05.120
And this is showing
across all users,

00:33:05.120 --> 00:33:08.880
so this is worldwide,
all operating systems,

00:33:08.880 --> 00:33:10.900
all countries, all
hardware, and that

00:33:10.900 --> 00:33:14.060
includes very old hardware
with slow processors

00:33:14.060 --> 00:33:15.670
and things of that nature.

00:33:15.670 --> 00:33:17.840
What you can see
is that most users

00:33:17.840 --> 00:33:22.390
are seeing hot-swap happen in
four to five seconds or less.

00:33:22.390 --> 00:33:24.510
And our goal is always
to push that graph over.

00:33:24.510 --> 00:33:28.450
We're trying to make as many as
possible happen in one second.

00:33:28.450 --> 00:33:30.980
So what we look for is,
we're trying to figure out,

00:33:30.980 --> 00:33:32.870
how do we drive full
build speeds down,

00:33:32.870 --> 00:33:35.320
how do we make hot-swaps
faster, and how do we

00:33:35.320 --> 00:33:39.060
make as many swaps as
possible be hot swaps.

00:33:39.060 --> 00:33:40.750
So we look at things like this.

00:33:40.750 --> 00:33:44.460
We look at the distribution
of hot swaps, warm swaps,

00:33:44.460 --> 00:33:48.250
and cold swaps, and full
build times, as well as what's

00:33:48.250 --> 00:33:50.500
causing cold swaps to happen.

00:33:50.500 --> 00:33:52.840
And it was looking at that
instrumentation, really

00:33:52.840 --> 00:33:54.960
all of your wonderful
data, that gave us

00:33:54.960 --> 00:33:58.730
the clue for one of the big
changes you'll see in 2.2.

00:33:58.730 --> 00:34:03.470
So 2.2 includes
a change to AAPT.

00:34:03.470 --> 00:34:09.400
A lot of you guys know, when you
change a resource, AAPT inserts

00:34:09.400 --> 00:34:11.800
and ID in the manifest.

00:34:11.800 --> 00:34:16.520
Now, what you may not know,
and what we didn't know,

00:34:16.520 --> 00:34:20.239
is that if you change a
resource or add a new one,

00:34:20.239 --> 00:34:23.150
AAPT was renumbering those IDs.

00:34:23.150 --> 00:34:25.780
So the impact is, you
make a code change,

00:34:25.780 --> 00:34:27.530
but you would get a cold swap.

00:34:27.530 --> 00:34:31.409
We identified this was
driving about 16% to 19%

00:34:31.409 --> 00:34:32.989
of our cold swaps.

00:34:32.989 --> 00:34:37.679
So with 2.2, we've changed AAPT
so it holds all the resource

00:34:37.679 --> 00:34:38.872
IDs constant.

00:34:38.872 --> 00:34:41.330
So I'm kind of taking you guys
on an insider's view of what

00:34:41.330 --> 00:34:45.340
will just occur to you in 2.2 as
an acceleration in Instant Run,

00:34:45.340 --> 00:34:48.010
because you're going to
see a lot more hot swaps.

00:34:48.010 --> 00:34:52.580
Another change we made is we're
taking advantage of Split APK.

00:34:52.580 --> 00:34:55.710
So now, when you build
will break your app

00:34:55.710 --> 00:34:58.740
into about 11 to 12 dex files.

00:34:58.740 --> 00:35:00.380
And when you do a
full build, we'll

00:35:00.380 --> 00:35:03.350
actually only rebuild
the changed code.

00:35:06.310 --> 00:35:08.890
We plan to keep driving
build speeds down

00:35:08.890 --> 00:35:12.140
in multiple successive
releases, not 2.2.

00:35:12.140 --> 00:35:15.260
So if any of you guys are
seeing still slow build speeds,

00:35:15.260 --> 00:35:17.650
the engineering team
would really appreciate it

00:35:17.650 --> 00:35:18.728
if you come find us.

00:35:21.720 --> 00:35:23.680
Let me talk next about
project structure.

00:35:23.680 --> 00:35:25.880
Now, Tor already gave
a wonderful demo.

00:35:25.880 --> 00:35:28.760
So I'm just going to give
you guys the insider's look.

00:35:28.760 --> 00:35:30.790
Underneath the project
structure dialog,

00:35:30.790 --> 00:35:34.450
is some very interesting changes
to the great old build model.

00:35:34.450 --> 00:35:36.540
Now Gradle has been
wonderful for us.

00:35:36.540 --> 00:35:40.469
It's a very flexible language,
very powerful for Android.

00:35:40.469 --> 00:35:41.510
But let's think about it.

00:35:41.510 --> 00:35:44.180
An IDE expects
structured inputs,

00:35:44.180 --> 00:35:46.070
and Gradle is a
programming language.

00:35:46.070 --> 00:35:47.710
So that's pretty complex.

00:35:47.710 --> 00:35:50.640
One of the changes
we made in 2.2

00:35:50.640 --> 00:35:54.560
is, we completely rewrote the
Gradle parser from the bottom

00:35:54.560 --> 00:35:55.060
up.

00:35:55.060 --> 00:35:58.180
So what that means is we're
now much more accurate when

00:35:58.180 --> 00:36:00.670
we read in Gradle
files, and we're also

00:36:00.670 --> 00:36:04.000
much more accurate in the IDE
when we write them back out.

00:36:04.000 --> 00:36:07.070
So an example of what
you'll see is for instance,

00:36:07.070 --> 00:36:09.570
if you write variables
into your Gradle file,

00:36:09.570 --> 00:36:12.240
it will now read those
correctly in the IDE.

00:36:12.240 --> 00:36:14.580
And in the future, in the
project structure dialog,

00:36:14.580 --> 00:36:18.590
you'll be able to modify
those in the UI as well.

00:36:18.590 --> 00:36:22.760
[APPLAUSE]

00:36:22.760 --> 00:36:26.800
The Gradle rewrite of the
model is done already in 2.2.

00:36:26.800 --> 00:36:29.450
As Tor mentioned, the
project structure dialog

00:36:29.450 --> 00:36:32.290
is partially complete
in 2.2, and you'll

00:36:32.290 --> 00:36:34.750
be able to try it under
an experimental flag.

00:36:34.750 --> 00:36:37.410
We plan to complete it in
2.3, and at that point,

00:36:37.410 --> 00:36:41.322
it will become the default.

00:36:41.322 --> 00:36:43.530
This is just a nice screenshot
of the Merged Manifest

00:36:43.530 --> 00:36:45.910
viewer, which Tor also showed.

00:36:45.910 --> 00:36:48.390
For a time, I want to skip
ahead and talk a little bit

00:36:48.390 --> 00:36:49.940
about Jack.

00:36:49.940 --> 00:36:54.560
Now the Jack compiler was
integrated with Gradle in 2.1,

00:36:54.560 --> 00:36:57.900
and in 2.2, we now include
annotation processing.

00:36:57.900 --> 00:37:02.029
So you can now use annotation
processors on your class path.

00:37:02.029 --> 00:37:02.528
[APPLAUSE]

00:37:06.530 --> 00:37:09.000
So this would include, such
as a compile dependency,

00:37:09.000 --> 00:37:11.310
and they'll be
automatically applied.

00:37:11.310 --> 00:37:14.380
Now, detailed information about
how to use this in our docs.

00:37:14.380 --> 00:37:17.050
One of the things I wanted
to call out here at I/O

00:37:17.050 --> 00:37:20.760
is, if you are someone who's
writing tools and doing pre

00:37:20.760 --> 00:37:23.390
or post-processing
on class files,

00:37:23.390 --> 00:37:25.280
one of the really
nice things about Jack

00:37:25.280 --> 00:37:28.160
is that it has a structured
API for manipulations.

00:37:28.160 --> 00:37:31.190
Now, we are going to be looking
to move more and more to Jack

00:37:31.190 --> 00:37:32.410
in coming releases.

00:37:32.410 --> 00:37:34.350
So please do try
this out, and let

00:37:34.350 --> 00:37:38.850
us know if there's anything
that's missing for you.

00:37:38.850 --> 00:37:40.697
Our last topic will
be C++ support.

00:37:40.697 --> 00:37:43.280
And for this, I'm going to give
you guys the whole arc of what

00:37:43.280 --> 00:37:44.010
we're doing.

00:37:44.010 --> 00:37:46.960
Because I think it's a nice way
to just understand C++ from end

00:37:46.960 --> 00:37:48.020
to end.

00:37:48.020 --> 00:37:49.900
The reason we're
investing so much

00:37:49.900 --> 00:37:53.300
is because we know there's a
lot of you who are doing very

00:37:53.300 --> 00:37:55.720
graphics-rich apps and games.

00:37:55.720 --> 00:37:59.420
And you've talked to us and
told us that C++ is critical.

00:37:59.420 --> 00:38:02.860
We already support C++
editing and debugging.

00:38:02.860 --> 00:38:05.070
And all of that is
coming through IntelliJ.

00:38:05.070 --> 00:38:08.900
So one of the new things you're
going to get with 2016.1 is

00:38:08.900 --> 00:38:13.830
also IntelliJ's wonderful
improved support for C++.

00:38:13.830 --> 00:38:16.220
But I think the biggest
change you'll see in 2.2

00:38:16.220 --> 00:38:18.480
is CMake and Gradle.

00:38:18.480 --> 00:38:21.400
Let me walk through
a CMake example.

00:38:21.400 --> 00:38:24.810
You can now reference a CMake
project in your Gradle file.

00:38:24.810 --> 00:38:26.700
And this will build
your SO files,

00:38:26.700 --> 00:38:29.040
so they're packaged in the APK.

00:38:29.040 --> 00:38:32.590
And how it works is, Gradle
now shells out to CMake.

00:38:32.590 --> 00:38:35.060
And we're getting CMake
to emit more metadata

00:38:35.060 --> 00:38:37.850
about the project itself,
both how to build it

00:38:37.850 --> 00:38:39.840
and what files are
in the project.

00:38:39.840 --> 00:38:41.660
So that's how, as
Tor was showing you,

00:38:41.660 --> 00:38:44.450
you're able to see the .cpp
files show up in the project

00:38:44.450 --> 00:38:47.557
hierarchy, and you'll also
get your .h files as well,

00:38:47.557 --> 00:38:48.890
if those are in the same folder.

00:38:51.930 --> 00:38:55.190
The files themselves will show
up in a node in the project

00:38:55.190 --> 00:38:57.300
hierarchy as well, under
external build files,

00:38:57.300 --> 00:39:00.170
so you can edit those
as well from the IDE.

00:39:00.170 --> 00:39:01.670
And just as Tor
showed, you can then

00:39:01.670 --> 00:39:05.210
run the app, set a breakpoint,
it will all work as expected.

00:39:05.210 --> 00:39:07.790
Setting up NDKBuild
works the same way.

00:39:07.790 --> 00:39:11.090
So you can reference an Android
.mk file from your build.

00:39:15.020 --> 00:39:18.300
I'd also like to give you guys
a brief tour of the C++ debugger

00:39:18.300 --> 00:39:19.330
enhancements.

00:39:19.330 --> 00:39:22.040
So first, in 2.2,
as we mentioned,

00:39:22.040 --> 00:39:26.050
you no longer have to
explicitly choose the C++, Java,

00:39:26.050 --> 00:39:28.480
or hybrid debugger,
you can just use auto,

00:39:28.480 --> 00:39:30.990
and the IDE will automatically
select the right debugger

00:39:30.990 --> 00:39:33.700
for you.

00:39:33.700 --> 00:39:36.540
If you're debugging in N, you
can actually use one single

00:39:36.540 --> 00:39:39.720
debugger for Java and C++.

00:39:39.720 --> 00:39:42.560
And then, a final thing
we added is watchpoints.

00:39:42.560 --> 00:39:44.670
So you can add a
variable, and you

00:39:44.670 --> 00:39:48.640
can freeze the process if those
are red or if they're modified.

00:39:48.640 --> 00:39:53.070
Watchpoints can be used
on x86 and Nexus 9,

00:39:53.070 --> 00:39:55.334
and we're planning to
bring more devices online.

00:39:55.334 --> 00:39:57.250
For now, a great way,
if you want to try them,

00:39:57.250 --> 00:39:59.100
is to try them out
with our emulators.

00:39:59.100 --> 00:40:01.210
We also fixed several
compatibility issues

00:40:01.210 --> 00:40:04.260
with Samsung S5 and S6 devices.

00:40:04.260 --> 00:40:07.900
So that covers C++ in 2.2, and
you should expect to continue

00:40:07.900 --> 00:40:10.440
to see enhancements
in coming releases.

00:40:10.440 --> 00:40:13.540
The last area we'd like
to talk about is testing.

00:40:13.540 --> 00:40:15.899
And so with that, I would
love to bring Jamal back.

00:40:15.899 --> 00:40:16.940
Thank you guys very much.

00:40:16.940 --> 00:40:22.620
[APPLAUSE]

00:40:22.620 --> 00:40:24.490
JAMAL EASON: So
for testing, a core

00:40:24.490 --> 00:40:27.089
feature you need is a
local testing environment.

00:40:27.089 --> 00:40:29.630
So we're really excited that we
launched the Android emulator

00:40:29.630 --> 00:40:30.860
earlier this year.

00:40:30.860 --> 00:40:33.290
If you haven't tried,
it it's a great tool.

00:40:33.290 --> 00:40:35.730
What's great about it is
that we've improved the CPU,

00:40:35.730 --> 00:40:39.640
GPU, an I/O speeds, so it's
even faster than a device.

00:40:39.640 --> 00:40:41.740
We've also improved
the ADB speeds.

00:40:41.740 --> 00:40:44.060
Believe or not, many times
the bottlenecks between you

00:40:44.060 --> 00:40:46.775
pushing your assets, and
your application is ADB.

00:40:46.775 --> 00:40:49.870
So that's actually now 10 times
faster with the new Android

00:40:49.870 --> 00:40:50.647
emulator.

00:40:50.647 --> 00:40:52.230
And of course, as
Tor was showing you,

00:40:52.230 --> 00:40:53.430
we have the new UI.

00:40:53.430 --> 00:40:55.860
You can do things like
rotating, take screenshots.

00:40:55.860 --> 00:40:58.000
But also, there's an
extended UI as well,

00:40:58.000 --> 00:40:59.499
which allows you
to control sensors,

00:40:59.499 --> 00:41:01.490
like taking a location,
doing SMS, or making

00:41:01.490 --> 00:41:04.360
phone calls, all tools allowing
you to test your application.

00:41:07.002 --> 00:41:09.960
[APPLAUSE]

00:41:09.960 --> 00:41:12.040
So in addition to
the local testing,

00:41:12.040 --> 00:41:13.810
we also launched the
Firebase Test Lab

00:41:13.810 --> 00:41:15.320
inside of Android Studio.

00:41:15.320 --> 00:41:17.100
So if you click
on that clouds tab

00:41:17.100 --> 00:41:19.450
that Tor showed in the
demo, it allows you

00:41:19.450 --> 00:41:21.926
to choose devices in the cloud.

00:41:21.926 --> 00:41:23.800
And now you can run a
device that you may not

00:41:23.800 --> 00:41:27.070
own, and try and send your
APK and test along with that,

00:41:27.070 --> 00:41:28.545
to help you test
your application.

00:41:32.350 --> 00:41:34.930
And I showed earlier, we have
the Espresso Test Recorder.

00:41:34.930 --> 00:41:36.680
And that's a very cool demo.

00:41:36.680 --> 00:41:38.390
Why this is very
important is that, we

00:41:38.390 --> 00:41:40.240
found that making
tests can be tedious,

00:41:40.240 --> 00:41:42.860
and sometimes, not lot
of people like to do it.

00:41:42.860 --> 00:41:44.630
And so now, you can
click on your device,

00:41:44.630 --> 00:41:46.260
we can capture all those tests.

00:41:46.260 --> 00:41:48.950
And you can now upload
those to the test lab

00:41:48.950 --> 00:41:50.450
or run them locally
on your machine.

00:41:54.320 --> 00:41:56.930
And lastly, we talked
about the APK Analyzer.

00:41:56.930 --> 00:41:59.647
Again, why this is very
important is because sometimes,

00:41:59.647 --> 00:42:01.730
you think you're done, you
built your application,

00:42:01.730 --> 00:42:03.362
and the APK is too big.

00:42:03.362 --> 00:42:05.070
Because at the end of
the day, your users

00:42:05.070 --> 00:42:06.986
who download your
application from Google Play

00:42:06.986 --> 00:42:09.160
want the smallest
APK as possible.

00:42:09.160 --> 00:42:11.167
So this tool allows you
to dig into your APK,

00:42:11.167 --> 00:42:12.750
look into your dex
files, your assets,

00:42:12.750 --> 00:42:15.697
and figure out what might be the
problem, and my APK is large.

00:42:19.061 --> 00:42:21.310
We don't have time to talk
about every single feature,

00:42:21.310 --> 00:42:24.640
but we talked about new Lint
analysis, new IntelliJ 2016

00:42:24.640 --> 00:42:27.232
features, and we made a big
investment to accessibility.

00:42:27.232 --> 00:42:29.440
So these are all new features
that we've added inside

00:42:29.440 --> 00:42:32.820
of Android Studio 2.2.

00:42:32.820 --> 00:42:35.680
So just to recap, we launched
a whole host of features around

00:42:35.680 --> 00:42:37.890
design, a new constraint
layout manager,

00:42:37.890 --> 00:42:41.100
and corresponding designer, new
Firebase integration to help

00:42:41.100 --> 00:42:45.045
you code better, enhanced C++
support and build support,

00:42:45.045 --> 00:42:46.586
and a test recorder
to help you test.

00:42:50.886 --> 00:42:52.010
And how do you get started?

00:42:52.010 --> 00:42:54.707
All you have to do, if you're
using Android Studio 2.2 today,

00:42:54.707 --> 00:42:56.290
just go to check for
updates and we'll

00:42:56.290 --> 00:42:57.960
prompt you to download
Android Studio

00:42:57.960 --> 00:43:00.550
2.2 in the canary channel.

00:43:00.550 --> 00:43:05.400
And if you're not using
Android Studio, anyone,

00:43:05.400 --> 00:43:07.570
jut go to this link here
and download a fresh copy.

00:43:07.570 --> 00:43:09.990
And again, change the
channel to the canary channel

00:43:09.990 --> 00:43:14.597
to download Android Studio 2.2.

00:43:14.597 --> 00:43:15.180
And that's it.

00:43:15.180 --> 00:43:15.930
Thank you so much.

00:43:15.930 --> 00:43:16.690
[APPLAUSE]

00:43:16.690 --> 00:43:17.630
Thank you.

00:43:24.010 --> 00:43:27.960
[MUSIC PLAYING]

