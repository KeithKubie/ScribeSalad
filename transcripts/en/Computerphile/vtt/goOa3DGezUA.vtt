WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.920
We thought it might be a good idea to revisit the topic of text compression.

00:00:05.080 --> 00:00:10.980
Which was visited for the first time in the original compression video on the computerphile channel.

00:00:11.040 --> 00:00:13.700
Some of you in the comments made the point to which

00:00:13.700 --> 00:00:18.600
I must plead guilty that in trying to explain things I perhaps oversimplified a little.

00:00:21.740 --> 00:00:27.400
To take the discussion on and make some more general points about text in general:

00:00:27.400 --> 00:00:34.400
How compressible it is, what are good and bad ways to do it, and how it has all become

00:00:34.400 --> 00:00:39.240
really quite big business over the past  thirty-odd years since it became commonly available.

00:00:39.240 --> 00:00:47.240
Well -- the two names we ought to write down to start with on text compression are two gentlemen

00:00:47.240 --> 00:00:52.100
who wrote a classic paper on it called Ziv and Lempel.

00:00:52.100 --> 00:01:00.280
But most people certainly in English speaking worlds seem to find it easier to say Lempel-Ziv rather than Ziv-
Lempel

00:01:01.080 --> 00:01:09.000
and so very widely now it's known as the LZ77 method.

00:01:09.200 --> 00:01:17.320
Let's say we got something like this: "The computerphile channel

00:01:17.500 --> 00:01:25.000
handles computer topics" in my original explanation, I put to you the idea of having a dictionary

00:01:25.000 --> 00:01:31.000
of well known words and buzz phrases. Up at the top of the file with pointers to where these words occured

00:01:31.000 --> 00:01:36.000
and if in doubt, use the pointers -- for repeats of certain words.

00:01:36.000 --> 00:01:41.000
Well, the way it's actually done in practice is not dissimilar in principle to that, but

00:01:41.000 --> 00:01:48.000
the details are even more clever in terms of achieving maximum compression

00:01:48.000 --> 00:01:51.000
cutting down file size and so on.

00:01:51.000 --> 00:02:01.000
What a typical LZ compressor will do is it will work its way through all of the text that you need to compress and will actually

00:02:01.000 --> 00:02:10.000
look for sequences of characters that recur over and over again and will attempt to reuse them as much as it possibly can.

00:02:10.000 --> 00:02:20.000
It doesn't overtly make a dictionary entry by putting them somewhere special but just by leaving these strings of text in place,

00:02:20.000 --> 00:02:24.000
it can reuse stuff in place.

00:02:24.000 --> 00:02:26.000
Here we've got the word computers: eight characters.

00:02:26.000 --> 00:02:36.000
A compressor could remember that it has seen that string of characters already as a subset of the string 'computerphile'

00:02:36.000 --> 00:02:47.500
The thought immediately occurs--one, two, three, four, five, six, seven, eight-- characters are identical here to what they are in the beginning of that word,

00:02:47.500 --> 00:02:53.200
can't we use that in some way and cut down the length of this?

00:02:53.200 --> 00:03:06.400
And what the Lempel-Ziv method does is it uses a pointer, and in that composite pointer it points back to where the phrase first occurred.

00:03:06.400 --> 00:03:11.500
And it also notes down how long the phrase was at that point.

00:03:11.500 --> 00:03:20.500
Now I'm going to denote these pointers with a notation that looks like this: I'll call it 'j' and 'l'

00:03:20.500 --> 00:03:31.000
'j' being the jump. It's a relative jump. How many characters back would I need to go to encounter this word 'computer' somewhere else

00:03:31.000 --> 00:03:39.000
And when I do get back to that character position in the file, then how long will that string of characters be?

00:03:39.000 --> 00:03:48.000
Now I must emphasize that if you look inside a Lempel-Ziv file, you will not see pointed brackets, let alone numbers or characters here

00:03:48.000 --> 00:03:52.000
This is just my notation to try and illustrate what is going on.

00:03:52.000 --> 00:04:01.000
In actual fact, this pointer might well be, at its very simplest, lets say it's 16 bits.

00:04:02.500 --> 00:04:06.500
two 8 bit bytes if you like.

00:04:06.500 --> 00:04:10.000
The details say it's a little more complicated than this even.

00:04:10.000 --> 00:04:17.000
In two bytes, I might be able to do some magic here that will replace 8 bytes in the word computer

00:04:17.000 --> 00:04:20.000
with a two-byte composite pointer of this sort.

00:04:20.700 --> 00:04:28.000
Now what I have to do is to say, "Right, where did 'computer' occur relative to where it is now?"

00:04:28.000 --> 00:04:35.800
Now this is just a single space here although it might not look like it. One, two, three, four, five, six, seven, eight

00:04:35.800 --> 00:04:46.500
We'll assume there isn't a newline here but there is a character-- nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen (...) thirty

00:04:46.500 --> 00:04:49.500
relative backward jump of 30 characters.

00:04:50.400 --> 00:04:57.900
There was, let me put a little partition here, a[n] 8 byte word.

00:04:57.900 --> 00:05:05.000
So there we go. Those numbers, those integers, are cheerfully representable within 8 bits each.

00:05:05.000 --> 00:05:11.200
So I could take out 'computer' here and replace it with, in my notation,

00:05:11.200 --> 00:05:14.500
&lt;30, 8&gt;

00:05:14.500 --> 00:05:21.900
Thinking around it a little bit, it should be pretty clear you've got a trade off. If we are going to allow a total of 16 bits

00:05:21.900 --> 00:05:27.200
to take the jump and also the length of the string you're pointing at,

00:05:27.200 --> 00:05:30.500
now you can trade off that internal boundary

00:05:30.500 --> 00:05:38.500
because 8 bits, 2 to the power 8 is 256 so on either size of this notional divide,

00:05:38.500 --> 00:05:44.000
you've got the ability to hold integers from 0 to 255.

00:05:44.000 --> 00:05:51.000
Now, in actual fact, there are not many situations, in Western European languages at least

00:05:51.000 --> 00:05:56.000
where you get massively long words repeated again, and again, and again.

00:05:56.000 --> 00:06:04.500
So the attitude taken in many practical implementations of these tends to be: 'Let's keep the pointed out string fairly short,

00:06:04.500 --> 00:06:12.500
So if it is a long word we might have to do a few of these pointers, but better to have a long jump back possibility.

00:06:12.500 --> 00:06:18.000
That means that you can keep reusing words up to... well what, let's say

00:06:18.000 --> 00:06:24.000
We do a partition like this: four bits here, twelve bits here,

00:06:24.000 --> 00:06:28.400
2 to the power 12 is 4096.

00:06:28.400 --> 00:06:32.500
Note to those of you that keep writing in on comments saying: "Hey Professor,

00:06:32.500 --> 00:06:37.500
what should I do, I'm just at High School and I want to do computer science at university.

00:06:37.500 --> 00:06:42.500
What's the best preparation?" my statement would be: learn your powers of 2.

00:06:42.500 --> 00:06:51.500
Backwards, upside down, inside out learn your powers of 2. And while your at it learn your 16 times table so you'll be very quick at doing hexadecimal.

00:06:51.500 --> 00:07:00.000
I was forced to learn my 16 times table at school, not because we did hexadecimal, but because in those days, there were 16 ounces in a pound.

00:07:00.000 --> 00:07:07.000
of ... sugar, or whatever. So one 16 is 16, two 16s is 32,  three 16s is 48 and so on.

00:07:07.000 --> 00:07:16.000
It's worth it. Anyway, what we're saying there is 2 to the power 12 is 4096, 2 to the power 4 is 16.

00:07:16.000 --> 00:07:26.500
You can encode in it here a string that is anything--if you like--1 to 16 bytes long, but you can have a relative backward jump of 4096 characters.

00:07:26.500 --> 00:07:39.500
That is a pretty good trade off. What will happen of course, is if your pointer back to the substring 'computer' gets to be more than 4096

00:07:39.500 --> 00:07:48.200
characters away, then your encoder will have to remember and put in its mental dictionary a new instance of the word 'computer'

00:07:48.200 --> 00:07:50.200
that can be referred back to.

00:07:50.200 --> 00:07:55.000
So imagine this happening for more than just the word 'computer' but for words like 'channel'

00:07:55.000 --> 00:08:01.000
for 'handles', for substrings of 'handles' called 'hand', and so on.

00:08:01.000 --> 00:08:07.500
All the time, the thing is preparing, in a sense, to make a dictionary entry of anything that seems suitable

00:08:07.500 --> 00:08:10.500
So it can be referred back to again and again and again.

00:08:10.500 --> 00:08:22.000
So what one is saying here is that even with a simple model, you are able to replace a multi-byte entity by a two-byte pointer.

00:08:26.000 --> 00:08:30.000
probabilities, probabilities, probabilities: the three Ps.

00:08:30.000 --> 00:08:38.000
Getting your probability model right, for the material you are coping with is the heart of getting a really successful compression.

00:08:38.000 --> 00:08:42.660
And the web browser looks at that and goes: "THAT IS JAVASCRIPT CODE! I'M GONNA RUN THAT!"

