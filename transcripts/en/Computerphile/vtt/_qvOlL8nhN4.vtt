WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.040
Things we talked about a spectrum meltdown and they rely on some of the more advanced ways that the CPU operates

00:00:05.040 --> 00:00:10.649
It's probably worth diving down and actually looking at how a CPU actually executes the code be right

00:00:10.650 --> 00:00:16.890
I mean, we've touched on this before we did a video on pipelining we did a video on caching, but also delve down and see

00:00:17.410 --> 00:00:22.049
What happens below the surface when we actually get our CPU to execute our code?

00:00:24.640 --> 00:00:28.540
Let's start by having a simple example:

00:00:28.680 --> 00:00:33.500
A line of code that we might want to look at what happens. Let's take a line of code that takes a variable

00:00:33.780 --> 00:00:40.280
Let's take a line of code. It's gonna add up A plus B plus C plus D

00:00:40.600 --> 00:00:44.520
Times e so I've written this in this sort of see like language

00:00:44.520 --> 00:00:47.639
So we're gonna do this calculation now as I'm sure most of us are aware

00:00:47.950 --> 00:00:54.419
When we take that and put into our C compiler run it it gets converted into the machine code that the CPU executes

00:00:54.420 --> 00:00:56.610
so we take that client of code, and then we'd have to

00:00:57.190 --> 00:00:59.910
Convert that into the machine code, and then the CPU

00:01:00.760 --> 00:01:06.239
Executes that machine code so a program like this would end up looking and I'm going to use arm assembly here

00:01:06.240 --> 00:01:12.659
Just because I know it better than the anything else perhaps for the first instruction. We would load the value for memory of a

00:01:13.900 --> 00:01:17.159
Into registers, let's pick our zero. We've got 14 or so of them

00:01:17.159 --> 00:01:18.750
We can use the 16 of them

00:01:18.750 --> 00:01:21.750
but some of them get used for different things that we don't really use so although the value of a

00:01:22.000 --> 00:01:25.559
Into our zero next thing we want to do is you want to add that to the value of B

00:01:25.560 --> 00:01:30.629
Then after make sure we'll get the operator precedence right so we can load the value of B into a register

00:01:30.630 --> 00:01:32.630
So let's loading the value of C

00:01:33.040 --> 00:01:35.040
Here into another register

00:01:35.470 --> 00:01:40.379
And we might as well do D. And E. As well so load or three come on D. And

00:01:41.619 --> 00:01:43.619
We'll load our four

00:01:44.799 --> 00:01:47.429
With E as well, and now we can start

00:01:48.460 --> 00:01:51.180
Adding these things up multiplying them to produce

00:01:51.480 --> 00:01:54.500
The actual result we want now we're going to make sure we get the precedence right

00:01:54.800 --> 00:01:59.080
But we could either start by adding a and B together then add on C. And then

00:01:59.620 --> 00:02:02.340
Multiply D. And E and have them together or we could do that one first

00:02:02.340 --> 00:02:05.399
I'm just going to start going from left to right as long as the math is right

00:02:05.399 --> 00:02:08.458
We'll get the right result so we'll add together a and B now

00:02:08.459 --> 00:02:12.419
I put those two values in r0 and r1 and we need to store the results somewhere

00:02:12.840 --> 00:02:16.679
We are going to need the value of a again after this, so we'll reuse the register R

00:02:16.990 --> 00:02:18.990
0 so we're saying put into R 0

00:02:19.360 --> 00:02:21.360
the value of R 0

00:02:21.819 --> 00:02:23.590
plus R

00:02:23.590 --> 00:02:27.929
1 so this is adding together storing the result in R. 0 so we now added a and B together

00:02:27.930 --> 00:02:31.890
We want to add on C. And so we could do the same thing add

00:02:32.530 --> 00:02:33.910
to R 0

00:02:33.910 --> 00:02:39.389
The value in R. 0 which is now because of this instruction a plus B want to add on the value in R

00:02:39.390 --> 00:02:43.649
2 there's now about a plus B plus C in

00:02:44.709 --> 00:02:47.159
Our 0 now we need to do the multiplication

00:02:47.160 --> 00:02:50.249
And we need to do that separately before we add it on so we get the right result so we'll multiply

00:02:50.470 --> 00:02:54.449
And we'll see we've got an arm, too cheap here, so we've got the multiply instruction there

00:02:54.450 --> 00:02:59.250
And we need to put the results on whether it's use our 5 D. Which we put in R. 3 and E

00:02:59.250 --> 00:03:01.060
Which we put in R?

00:03:01.060 --> 00:03:04.800
4 and then we want to add the result of that onto the value

00:03:05.080 --> 00:03:11.729
In our 0 and now our 0 contains the result of a plus B. Plus C plus D times E. And

00:03:12.400 --> 00:03:14.200
We could then store that

00:03:14.200 --> 00:03:16.030
back into X

00:03:16.030 --> 00:03:22.860
So that line of code there at one line of C code would become what 1 2 3 4 5 6 7 8 9 10

00:03:23.320 --> 00:03:26.549
different lines an assembler and I've numbered them because I'm going to

00:03:26.739 --> 00:03:32.909
Refer to them at different times so we can say searching one instruction 5 etc to refer to the different ones now

00:03:33.220 --> 00:03:40.229
We might expect that our CPU will just xu instruction 1 the new instruction 2 instruction 3 instruction 405 and so on in order

00:03:40.450 --> 00:03:46.560
To generate the result and some cpus do in fact work exactly like that, but actually if you think about

00:03:47.320 --> 00:03:51.059
What the cpus and what these descriptions are actually doing you might think well actually?

00:03:51.640 --> 00:03:54.479
when I get this first one I've got to go an access memory and

00:03:55.209 --> 00:04:01.169
As we talked about in the caching video many years ago, cache is perhaps a an old-fashioned English word

00:04:01.170 --> 00:04:06.239
but it basically just means a small place where we can store things so you might use it to store your hidden treasure if you're

00:04:06.239 --> 00:04:08.049
a pirate or to store

00:04:08.049 --> 00:04:12.029
Your food for winter on a modern CPU probably say around 200

00:04:12.100 --> 00:04:17.549
Nanoseconds to actually go and get the value out of your main memory and load it into the register now of course

00:04:17.549 --> 00:04:21.509
If these are already cached in the same bit of memory, then you may find that these all execute very quickly

00:04:22.060 --> 00:04:29.049
We don't know that this isn't the only way we could write this program because if we take this instruction here instruction 6

00:04:29.330 --> 00:04:35.319
Where we do the add of r0 and r1 to add up a and B. Well. We've got those two values here

00:04:35.449 --> 00:04:37.929
They're already in the registers at this point in the program

00:04:38.060 --> 00:04:41.619
So there's nothing to stop us moving this instruction up there

00:04:41.620 --> 00:04:46.659
and it would still have exactly the same effect so instruction 6 could be moved to me between instructions 2 &amp; 3

00:04:46.970 --> 00:04:50.769
And then we do the next instruction which was the same as instruction 3 here?

00:04:51.319 --> 00:04:52.940
which would be LDR

00:04:52.940 --> 00:04:59.469
R to come of the values in memory that's representing the letter the variable see how exactly the same effect. We just moved that

00:05:00.560 --> 00:05:05.889
Instruction earlier so you could rewrite this program in various different ways now

00:05:06.560 --> 00:05:08.560
Why is that interesting?

00:05:08.840 --> 00:05:12.789
well when we think about how a CPU is designed and that you will have

00:05:13.460 --> 00:05:21.400
various different what impress be termed execution units within there now one of them is what's generally referred to as the

00:05:22.250 --> 00:05:27.759
ALU or the arithmetic and logic unit and that's the bit of your CPU that does

00:05:28.069 --> 00:05:32.049
Addition it does subtraction it does sort of logical operators and or and so on

00:05:32.449 --> 00:05:34.658
But you also have other bits inside there

00:05:34.659 --> 00:05:40.718
And one of the bits you'll often have in a modern CPU is it part of your CPU that handles loading and storing

00:05:41.690 --> 00:05:46.179
Values from memory sometimes interact sometimes they don't now

00:05:46.580 --> 00:05:53.259
Assuming that they are separate parts of the CPU if we look back at our instructions here. We execute instruction 1

00:05:53.259 --> 00:05:57.128
It uses a load store. You need to get a value for memory we execute instruction 2

00:05:57.129 --> 00:06:01.299
It uses the load store unit to get a value for memory instruction 3

00:06:01.300 --> 00:06:07.090
It uses a load store unit to get a value for memory for uses the load store unit to get a value for memory

00:06:07.340 --> 00:06:11.859
5 uses the load store unit to get a value for a memory 6

00:06:12.529 --> 00:06:15.549
changes and uses the ALU as 2 7 8 &amp; 9

00:06:15.949 --> 00:06:22.119
before insertion turn uses the load store unit so we've got a pretty sequential series the first 5

00:06:22.340 --> 00:06:29.379
instructions all execute using the load store part of the CPU the next four instructions execute using the ALU and

00:06:29.990 --> 00:06:36.130
The final instruction again uses the load store unit but as we said we can reorder that

00:06:36.589 --> 00:06:40.889
into this version here using instructions w x y and z

00:06:41.530 --> 00:06:47.850
Differentiate them and we execute the first instruction instruction w uses a load store unit instruction X

00:06:48.160 --> 00:06:55.170
Uses a load store unit instruction Y uses the ALU restrictions ed uses the load store unit

00:06:55.510 --> 00:07:01.200
Okay, what difference does that make well let's think about what's happening when we're using the load store unit

00:07:02.560 --> 00:07:06.690
the ALU isn't being used that part of the CV is just sitting there not being used and

00:07:07.210 --> 00:07:12.629
When we're using the ALU the load store units sitting there not being used, that's what we saw there

00:07:12.630 --> 00:07:17.909
But does that have to be the case could we actually design it, and you probably guess the answer is that yes?

00:07:17.910 --> 00:07:19.390
We can so that

00:07:19.390 --> 00:07:24.719
While the load store unit say is being used that we can run the instructions on the ALU part as well

00:07:24.730 --> 00:07:27.420
I'd turn the paper round and I'm going to draw

00:07:27.420 --> 00:07:33.420
This as a sort of timeline so these are our two units and we've got time running along this side as well

00:07:33.420 --> 00:07:35.420
I'm using the computer for our paper in a

00:07:35.830 --> 00:07:40.529
Radically different orientation, but never mind, so we're going to execute the instructions

00:07:41.830 --> 00:07:47.819
On here and the first thing that happens is that we execute instruction W

00:07:47.890 --> 00:07:48.840
No problem

00:07:48.840 --> 00:07:54.810
That's going to take certain amount of time to actually that's using the load store unit to execute it

00:07:54.810 --> 00:08:00.750
These are being fetched and decoded and sort of executed by the different execution units we then execute the next instruction

00:08:01.660 --> 00:08:03.280
which is

00:08:03.280 --> 00:08:09.989
X and we couldn't execute this any earlier because the load store unit was being used to execute that one so no difference than what?

00:08:09.990 --> 00:08:13.140
We had before we're using this one after the other we now come to

00:08:13.930 --> 00:08:14.950
execute

00:08:14.950 --> 00:08:19.080
The add instruction now we can't execute this any earlier than this point in time

00:08:19.540 --> 00:08:23.999
Because this depends on the value of registers r0 and r1 which aren't set?

00:08:24.370 --> 00:08:28.650
until this point so we need those two values so we can start doing

00:08:29.230 --> 00:08:31.259
instruction why here now actually

00:08:31.450 --> 00:08:36.030
It's an ADD it's not going to take as long as fetching things from memory because it's all inside the CPU so we can use

00:08:36.030 --> 00:08:42.119
A smaller box and we can put instruction Y there and this depends on the value being fetched from there

00:08:42.120 --> 00:08:46.830
And I'm just going to show this as an arrow here, but the next instruction load

00:08:47.860 --> 00:08:49.810
r2 comma C

00:08:49.810 --> 00:08:50.310
well

00:08:50.310 --> 00:08:55.529
I doesn't depend on anything except the value in there Marie and our load/store units not being used

00:08:55.930 --> 00:08:59.099
So if we build our CPU right? There's nothing to start that

00:08:59.860 --> 00:09:06.209
Instruction being executed at the same time and that means that actually when we come to the next instruction

00:09:06.579 --> 00:09:12.329
Which would be which will be the best instruction to execute next in this example. Let's go back to our program

00:09:12.370 --> 00:09:16.349
We've executed instructions one to six and three already

00:09:16.480 --> 00:09:20.639
That's w x y&amp;z we've rewritten the mass let's put instruction seven here

00:09:20.639 --> 00:09:23.489
What was instruction seven and this is now going to become?

00:09:23.800 --> 00:09:28.529
I'm gonna have to use it's gonna become instruction a I'll hopefully remember to say instruction a but

00:09:28.660 --> 00:09:34.230
You can guess the colonics are referring to a on its own is probably the variable if not is probably the instruction so we can

00:09:34.230 --> 00:09:35.889
now execute

00:09:35.889 --> 00:09:40.079
instruction a and again instruction a depends on two things

00:09:40.600 --> 00:09:46.920
It depends on the value of R. 0 which is going to come from this instruction so we have to have that ready

00:09:46.990 --> 00:09:48.899
But it also depends on the value of R

00:09:48.899 --> 00:09:55.529
2 which is coming from this instruction so we have to have that ready as well so it can actually happen any point before

00:09:56.110 --> 00:10:03.930
This point in time so this would be the LDR R 2 comma dot and this is the add R

00:10:04.059 --> 00:10:11.609
0 and this is the next add, but again we can start trying to leave more the instructions because I okay well

00:10:11.610 --> 00:10:16.620
That's what instruction for here at the same time. We'll call this instruction B

00:10:16.620 --> 00:10:19.739
And so on we put that at that point we can execute

00:10:19.930 --> 00:10:25.589
Instruction B at the same time as we do way and I'm really confusing myself with pens here and so again

00:10:25.750 --> 00:10:32.669
We've saved some time because rather than having to execute that in the same thing we can do these two things at the same time

00:10:33.009 --> 00:10:40.259
Now to be able to do this we need these instructions need to execute on different execution units we couldn't for example

00:10:41.139 --> 00:10:46.919
Execute to add instructions at the same time because we haven't got to Al use well, though

00:10:46.920 --> 00:10:50.699
There's no reason why you can build a CPU with two Al use if you look at modern

00:10:51.069 --> 00:10:57.419
CPU designs from Intel AMD arm and cetera they all have often have multiple Al used or allow you to do just that

00:10:58.179 --> 00:11:04.109
but because the different types we can execute them at the same time and the reason we can do that is because

00:11:04.839 --> 00:11:06.150
They don't depend

00:11:06.150 --> 00:11:13.259
on the results of one to work out the other so they're working on different things and they're using different parts of the CPU and

00:11:13.750 --> 00:11:17.130
The CPU that enables you to do this is what's known as a superscalar

00:11:17.860 --> 00:11:25.409
CPU because it can run multiple instructions at the same time will you continue doing this and we'd end up we execute instruction

00:11:25.780 --> 00:11:28.290
B then we've got to execute instruction C

00:11:28.870 --> 00:11:29.590
instruction D

00:11:29.590 --> 00:11:30.190
uses a

00:11:30.190 --> 00:11:36.420
Multiply and actually on a CPU probably got a separate execution unit which does and multiplies because you can actually do them faster that way

00:11:36.520 --> 00:11:42.480
So you have a multiply unit as well so we can execute that multiply D up there

00:11:42.640 --> 00:11:43.590
We think well okay?

00:11:43.590 --> 00:11:48.600
Can we do the other at the same time well no because we need the result of that as well so we can then execute

00:11:49.120 --> 00:11:56.400
the ad down here before finally, and it just fits on the paper like that so we can actually squash things up and

00:11:56.950 --> 00:12:01.350
we're going to save some time because if you think about it you have the original order of the program and

00:12:02.530 --> 00:12:04.530
Here's one. I made earlier

00:12:04.780 --> 00:12:09.480
All right, or as in I'm just about to draw and Shawn will do some very clever

00:12:10.150 --> 00:12:16.079
Cutting so even if we had a superscalar processor. We've only got one load store unit we've only got one

00:12:16.600 --> 00:12:21.809
Al you really got one multiply unit we wouldn't have any opportunities with this program

00:12:22.300 --> 00:12:26.909
To run two instructions at the same time so this version of the program would

00:12:27.070 --> 00:12:34.140
Still take ten instructions this one still takes ten instructions, but with a superscalar processor we have the opportunity to sort of

00:12:35.020 --> 00:12:40.980
execute two instructions at the same time because they use different bits of the CPU now you need to design the CPU to allow that

00:12:41.080 --> 00:12:43.080
but that enables us to

00:12:43.630 --> 00:12:49.020
Speed things up a little bit because while this is working to get the value for memory. We can execute some more

00:12:49.900 --> 00:12:51.670
instructions

00:12:51.670 --> 00:12:55.920
Now that's all very well and superscalar processors started to appear in

00:12:56.290 --> 00:12:59.819
the mid 90s things like the six eight thousand and sixty the

00:13:00.370 --> 00:13:02.010
Pentium I think was superscalar

00:13:02.010 --> 00:13:05.220
But they require the code to be written in a way

00:13:05.680 --> 00:13:08.909
That enables this to happen so this program wouldn't have been able to do anything

00:13:09.520 --> 00:13:15.810
This one would but as we said when we were developing this we could work out which

00:13:16.150 --> 00:13:19.829
Instructions we could move around to get that speed up based on

00:13:20.560 --> 00:13:23.229
What those instructions depended on so this instruction?

00:13:23.230 --> 00:13:27.520
We said what what six became why only depended on the values of R

00:13:27.520 --> 00:13:32.859
0 and R 1 which has been set by instructions 1 &amp; 2 so we can move that earlier

00:13:33.170 --> 00:13:37.719
Without affecting anything in our program because it only depended on those 2 values

00:13:37.820 --> 00:13:43.150
so we can either do this in the compiler or by hand if you write in the assembly yourself like we just did here or

00:13:44.270 --> 00:13:51.609
It's possible to let the CPU work it out, and so what a modern CPU does what's called an out of water CPU is

00:13:53.180 --> 00:13:55.570
Reorders the instructions without

00:13:56.240 --> 00:13:58.240
supposedly breaking the rules of

00:13:58.520 --> 00:14:02.919
What each instruction does so it'll still execute it as if it was written like this?

00:14:02.920 --> 00:14:05.320
And it won't change break any of the rules of that

00:14:05.870 --> 00:14:09.729
but it will say well hang on it will spot that this instruction could happen earlier and

00:14:09.830 --> 00:14:15.729
So move it earlier to gain some of that parallelism in fact then execute them together at the same time

00:14:16.010 --> 00:14:17.830
And that works generally get well

00:14:17.830 --> 00:14:25.299
But as we saw with things like Spector and meltdown if you allow things to happen too far earlier and start doing what's called speculative

00:14:25.610 --> 00:14:27.610
Evaluation where you say okay?

00:14:27.710 --> 00:14:30.249
I've got the stuff. I need to execute it now

00:14:30.250 --> 00:14:35.229
I don't if I need the result but I might do so I'll execute it anyway, and then if I need it

00:14:35.230 --> 00:14:39.219
I've already done it and if I don't need it while I was still waiting for this to come in anyway

00:14:39.220 --> 00:14:41.500
So it doesn't matter that I've done it. I've not lost

00:14:42.050 --> 00:14:43.270
Any time well

00:14:43.270 --> 00:14:48.549
Then it's turned out that you can have sort of side channels where you can sort of see that that's happened or not

00:14:48.890 --> 00:14:51.549
Which is caused a few issues with computing?

00:14:52.370 --> 00:14:54.370
It goes along here like this

00:14:54.530 --> 00:14:58.389
Intersects the curve somewhere else flips over and it's over here, so this is for G

00:14:58.390 --> 00:15:02.020
Now we won't look at any more right the edge of a formula for this is just

00:15:02.150 --> 00:15:04.419
mathematics to do with lines and the tangent of this curve

00:15:04.420 --> 00:15:08.620
It's actually not very complicated the point is that what we're doing is by multiplying G

