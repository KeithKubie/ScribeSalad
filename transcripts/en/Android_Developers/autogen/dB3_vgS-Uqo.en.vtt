WEBVTT
Kind: captions
Language: en

00:00:02.417 --> 00:00:06.870
 Layouts are the essence of how to create beautiful and modern applications for users 

00:00:06.870 --> 00:00:08.116
 But if you are not careful 

00:00:08.117 --> 00:00:10.930
 Your stunning layouts can lead to a significant drain on performance 

00:00:10.930 --> 00:00:11.931
 My name is Colt McCannless 

00:00:11.931 --> 00:00:14.471
 And if you use some luxury features on the display layouts 

00:00:14.471 --> 00:00:16.020
 It is possible to fall into trouble 

00:00:16.021 --> 00:00:19.824
 Remember that any time the size and location of the object changes in the display hierarchy 

00:00:19.856 --> 00:00:23.506
 There may be implications for other layouts in the view 

00:00:23.577 --> 00:00:28.600
 For example, if the button size doubles suddenly you may need to move an adjacent viewing window 

00:00:28.600 --> 00:00:32.232
 And then of course, there may be a need to change the size of the father display window as a result 

00:00:32.491 --> 00:00:35.444
 Note, there is a small set of properties for the View window which when changed 

00:00:35.484 --> 00:00:40.010
 Requires a pipeline layout phase to occur before screen refresh 

00:00:40.067 --> 00:00:42.486
 Basically this phase is cut through the hierarchy of the display 

00:00:42.510 --> 00:00:46.458
 Calculates the correct locations and sizes for all display windows affected by the change 

00:00:46.720 --> 00:00:49.984
 In general, this is a fairly quick process 

00:00:50.130 --> 00:00:54.712
 But if they are not attentive they can launch an expensive chain of planning processes 

00:00:54.767 --> 00:00:56.998
 Which can gradually and quickly withdraw to your frame time 

00:00:57.073 --> 00:01:00.159
 A good example of this is the relative planning container 

00:01:00.326 --> 00:01:03.044
 Basically, this chart allows you to define the location of the view window 

00:01:03.045 --> 00:01:06.049
 For the location of another view window in the hierarchy 

00:01:06.157 --> 00:01:09.119
 For example, always stay to the right of the script box 

00:01:09.151 --> 00:01:13.944
 Or at the top of the current container, or stay at the top of the top brother 

00:01:13.944 --> 00:01:16.360
 But always to the right of my brothers in my container 

00:01:16.360 --> 00:01:17.885
 And such strange things 

00:01:18.160 --> 00:01:21.898
 The issue here is that in order to place a view window in position for another view window 

00:01:21.976 --> 00:01:24.450
 The container must begin a second charting process 

00:01:24.490 --> 00:01:27.350
 Before you can finalize the sites and move to the view 

00:01:27.350 --> 00:01:29.362
 Basically, it works as follows 

00:01:29.649 --> 00:01:32.791
 In the first pass you will visit the display windows and calculate their positions and sizes 

00:01:32.792 --> 00:01:34.595
 Based on their personal requests 

00:01:34.920 --> 00:01:36.839
 The relative chart then uses this data 

00:01:36.840 --> 00:01:41.137
 To identify potential locations of interconnected display windows or any weight-bearing sizes 

00:01:41.186 --> 00:01:43.608
 Then adjusts the border accordingly 

00:01:43.870 --> 00:01:48.795
 At this point, the second traffic to the chart begins to determine the final location to be used for the display 

00:01:49.010 --> 00:01:52.944
 The result is that two complete planning processes across all the children in the container 

00:01:52.996 --> 00:01:54.830
 Just get things on the screen 

00:01:54.974 --> 00:01:59.558
 The trick is that this happens every time a change occurs in an associated chart 

00:01:59.870 --> 00:02:01.070
 But be careful here 

00:02:01.070 --> 00:02:04.620
 It is not the only container that can produce this double-planning behavior 

00:02:04.620 --> 00:02:08.699
 For example, linear planning generally produces only one layout request 

00:02:08.699 --> 00:02:11.197
 Until you add the measurement with the coefficient of the eldest son 

00:02:11.197 --> 00:02:14.158
 In this case, you can end up needing to start a second planning pass 

00:02:14.370 --> 00:02:15.600
 For proper sizes 

00:02:15.600 --> 00:02:18.470
 The network layout has a very similar problem 

00:02:18.470 --> 00:02:22.293
 This container allows relative positioning but avoids double taxation 

00:02:22.380 --> 00:02:24.877
 By manipulating the windows of children's display windows 

00:02:24.878 --> 00:02:25.959
 It's great, is not it? 

00:02:25.960 --> 00:02:28.951
 I mean, you can get all the functions of a linked chart container 

00:02:28.982 --> 00:02:30.461
 Without any cost to perform 

00:02:30.470 --> 00:02:31.690
 You can get all the jobs 

00:02:31.690 --> 00:02:35.237
 All this is disposed of at any time when the layout is filled with gravity 

00:02:35.238 --> 00:02:38.712
 Or in some cases, if the weights are used in the wrong places 

00:02:38.752 --> 00:02:41.375
 And then of course you will fall into the same performance problem 

00:02:41.480 --> 00:02:44.060
 Now by themselves, many layouts of these containers 

00:02:44.060 --> 00:02:45.830
 Will not have a performance burden 

00:02:45.830 --> 00:02:48.990
 But putting them in the wrong place may cause you great problems. 

00:02:48.990 --> 00:02:52.268
 For example, any time you have root elements in the display hierarchy 

00:02:52.311 --> 00:02:55.851
 Or when the container has a deep hierarchy beneath it. 

00:02:55.898 --> 00:02:59.134
 Or when there is a lot of them swarming the screen like the display menu 

00:02:59.420 --> 00:03:02.923
 Basically, this problem can be exacerbated along the hierarchy 

00:03:02.999 --> 00:03:05.778
 Imagine the relative layout at the top of the display hierarchy 

00:03:05.910 --> 00:03:08.580
 Who will be maneuvering on the planning 

00:03:08.580 --> 00:03:13.472
 Then later, you had a list displayed below containing a series of grid layouts within it 

00:03:13.940 --> 00:03:16.350
 Basically, the final nodes in this configuration 

00:03:16.350 --> 00:03:20.432
 They may end up planning on them 8 times each 

00:03:20.544 --> 00:03:23.864
 Obviously you've got the best places that you can consume frame time 

00:03:23.951 --> 00:03:26.088
 So are we looking to avoid the problem of double layouts? 

00:03:26.270 --> 00:03:27.670
 Here are some useful tips 

00:03:27.671 --> 00:03:30.901
 First, you can track whether the charts use your frame rate 

00:03:30.928 --> 00:03:33.983
 By taking a serious look at the Systrace tool 

00:03:34.132 --> 00:03:38.421
 If you see that the plot / measurement quotas from a view window are unusually high 

00:03:38.485 --> 00:03:41.918
 There is a high probability that they consume frame rate in a bad way 

00:03:42.100 --> 00:03:45.272
 Second, try to reduce the depth of your hierarchy 

00:03:45.312 --> 00:03:48.592
 Note that dual layouts can not be avoided at times 

00:03:48.680 --> 00:03:51.060
 So reduce the depth of your hierarchical view 

00:03:51.060 --> 00:03:54.438
 Will help to minimize their impact on your overall frame rate 

00:03:54.590 --> 00:03:58.350
 Thirdly, avoid calling design requests in any situations 

00:03:58.350 --> 00:04:00.895
 It is not necessary to do so 

00:04:00.991 --> 00:04:05.738
 When a window displays a layout request, you will launch a layout with all its parents 

00:04:05.738 --> 00:04:08.408
 Although there is a large cache in this part of the system 

00:04:08.409 --> 00:04:13.144
 To try to make it as fast as possible it is possible to keep the process very expensive 

00:04:13.236 --> 00:04:16.820
 Fourth, watch the rest of the Android performance patterns videos 

00:04:16.820 --> 00:04:19.175
 Fifth, join our community on Google+ 

00:04:19.200 --> 00:04:21.320
 Ask other performance experts. 

00:04:21.321 --> 00:04:25.752
 Remember, keep calm, write your code, and always remember, performance is important. 

