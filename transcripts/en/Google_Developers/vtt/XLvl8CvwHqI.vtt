WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.840
[MUSIC PLAYING]

00:00:06.240 --> 00:00:08.850
TIM PSIAKI: Welcome to
the third day of I/O.

00:00:08.850 --> 00:00:11.170
It's great to be here
talking to you this morning.

00:00:11.170 --> 00:00:13.590
My name is Tim Psiaki and
I'm a software engineer

00:00:13.590 --> 00:00:15.990
on the AR and VR team.

00:00:15.990 --> 00:00:19.410
Today Tom and I are going to
talk to you about the tools

00:00:19.410 --> 00:00:23.250
that we've built to make AR
development easy and fast

00:00:23.250 --> 00:00:27.290
for every Android developer.

00:00:27.290 --> 00:00:29.260
So if you heard at
the Developer Keynote,

00:00:29.260 --> 00:00:32.570
ARCore is Google's platform
for building augmented reality

00:00:32.570 --> 00:00:35.820
experiences.

00:00:35.820 --> 00:00:39.540
You've been hearing a lot about
ARCore the last couple of days.

00:00:39.540 --> 00:00:42.450
And I hope you guys are
excited about building for AR.

00:00:42.450 --> 00:00:44.250
I certainly am.

00:00:44.250 --> 00:00:46.560
Our goal is that, at
the end of this session,

00:00:46.560 --> 00:00:48.660
every single one
of you would feel

00:00:48.660 --> 00:00:51.410
like you can build an AR app.

00:00:54.470 --> 00:00:56.185
So what we're going
to cover today

00:00:56.185 --> 00:00:59.230
is how you can get
an asset, how you

00:00:59.230 --> 00:01:01.690
can build an app
using that asset,

00:01:01.690 --> 00:01:04.959
and finally how you
can iterate and launch.

00:01:04.959 --> 00:01:06.872
But before I get
into the details,

00:01:06.872 --> 00:01:08.830
I want to tell you a
little bit about something

00:01:08.830 --> 00:01:10.600
that I like to do.

00:01:10.600 --> 00:01:17.530
So I really like to time
myself doing ordinary things.

00:01:17.530 --> 00:01:21.860
I'll time myself doing
things like ironing a shirt,

00:01:21.860 --> 00:01:28.970
or even taking a shower,
or reading my kids a book.

00:01:28.970 --> 00:01:32.810
It's kind of quirky, I know,
but I like to optimize my time

00:01:32.810 --> 00:01:35.640
and do these things
as fast as possible.

00:01:35.640 --> 00:01:37.640
Sometimes my kids don't
appreciate it that much.

00:01:40.890 --> 00:01:43.350
So what I want to
do today is I want

00:01:43.350 --> 00:01:45.960
to do something in AR
as fast as I possibly

00:01:45.960 --> 00:01:52.110
can by doing something
that I call AR done fast.

00:01:52.110 --> 00:01:52.830
That's right.

00:01:52.830 --> 00:01:56.550
I'm going to do a speed run
through building an AR app.

00:01:56.550 --> 00:01:59.610
And Tom, I'm wondering if you
can help time this speed run

00:01:59.610 --> 00:02:04.290
and see just how fast I
can build an app in AR.

00:02:04.290 --> 00:02:07.230
Now to make this happen
as fast as possible,

00:02:07.230 --> 00:02:09.270
I'm going to use the
Sceneform SDK, which

00:02:09.270 --> 00:02:14.800
is our new 3D framework that
we just announced and launched.

00:02:14.800 --> 00:02:20.520
And this framework makes our
development easy in Java.

00:02:20.520 --> 00:02:23.980
So that I can narrate
what's going on,

00:02:23.980 --> 00:02:27.180
I did a one take video
recording of developing

00:02:27.180 --> 00:02:29.500
an app last night.

00:02:29.500 --> 00:02:30.500
And we'll see how I did.

00:02:30.500 --> 00:02:32.930
Let's jump the next slide.

00:02:32.930 --> 00:02:33.990
And Tom, are you ready?

00:02:33.990 --> 00:02:34.740
TOM SALTER: Ready.

00:02:39.084 --> 00:02:40.000
TIM PSIAKI: All right.

00:02:40.000 --> 00:02:41.260
So let's go.

00:02:41.260 --> 00:02:41.990
Start.

00:02:41.990 --> 00:02:42.490
All right.

00:02:42.490 --> 00:02:45.250
So I'm getting my asset
from poly.google.com.

00:02:45.250 --> 00:02:47.350
To make this as
illuminating as possible,

00:02:47.350 --> 00:02:51.100
I'm going to search
for a lamp post.

00:02:51.100 --> 00:02:52.430
We'll see what I find.

00:02:52.430 --> 00:02:52.930
OK.

00:02:52.930 --> 00:02:56.990
So this first lamp post from
Naomi Chen looks pretty good.

00:02:56.990 --> 00:03:00.010
Let's have a closer look
and see if I like that.

00:03:00.010 --> 00:03:02.960
This is pretty much exactly
what I'm looking for.

00:03:02.960 --> 00:03:05.320
So I'm going to
download the model file.

00:03:05.320 --> 00:03:08.530
And as you can see here
I've got it downloaded.

00:03:08.530 --> 00:03:12.640
And I've got all the files
here in my Downloads folder.

00:03:12.640 --> 00:03:15.520
Now what I'm going to do is I'm
going to open the hello scene

00:03:15.520 --> 00:03:16.870
form sample app.

00:03:16.870 --> 00:03:19.120
And I'm going to see if I
can get this lamp post being

00:03:19.120 --> 00:03:21.199
used instead of Andy.

00:03:21.199 --> 00:03:23.740
So what I'm going to do is I'm
going to drag all of the model

00:03:23.740 --> 00:03:27.160
files into my
sample data folder,

00:03:27.160 --> 00:03:31.450
and then using our just released
Scene Form Tools Android Studio

00:03:31.450 --> 00:03:35.740
plug-in, I'm going to import
that asset into my project.

00:03:35.740 --> 00:03:37.980
As you can see, as
soon as I click Finish,

00:03:37.980 --> 00:03:40.600
we've got a Gradle build
going that's doing the import

00:03:40.600 --> 00:03:42.580
of our asset into our project.

00:03:42.580 --> 00:03:45.700
And we're going to see it pop up
in the viewer in just a second

00:03:45.700 --> 00:03:48.230
to see if we like what we got.

00:03:48.230 --> 00:03:49.580
There it is.

00:03:49.580 --> 00:03:52.790
So that's looking pretty much
exactly like it did on Poly.

00:03:52.790 --> 00:03:57.200
So let's see if we can get
that added in place of Andy.

00:03:57.200 --> 00:03:59.270
So we're going to jump
into the code here.

00:03:59.270 --> 00:04:03.670
And as you can see, Andy is
loaded using a resource ID.

00:04:03.670 --> 00:04:06.350
Now you might have
noticed I actually

00:04:06.350 --> 00:04:08.017
put this file into
the Assets folder

00:04:08.017 --> 00:04:10.100
so I'm going to change a
little bit how I load it.

00:04:10.100 --> 00:04:13.280
I'm going to load the file
from the Assets folder,

00:04:13.280 --> 00:04:17.600
going to drop that in, and
I'm loading the file now.

00:04:17.600 --> 00:04:19.470
And I press Play almost.

00:04:19.470 --> 00:04:19.970
Play.

00:04:19.970 --> 00:04:20.810
OK.

00:04:20.810 --> 00:04:21.950
Done.

00:04:21.950 --> 00:04:22.730
All right.

00:04:22.730 --> 00:04:25.580
Hang on with the time.

00:04:25.580 --> 00:04:28.220
Let's see what this looks
like back to the slides.

00:04:33.830 --> 00:04:35.491
There you go.

00:04:35.491 --> 00:04:35.990
OK.

00:04:35.990 --> 00:04:37.597
So here's our app.

00:04:37.597 --> 00:04:38.180
So we're done.

00:04:38.180 --> 00:04:40.880
We have an app
that's running in AR.

00:04:40.880 --> 00:04:41.934
We've got a lamp post.

00:04:41.934 --> 00:04:43.100
We can place our lamp posts.

00:04:43.100 --> 00:04:45.650
We can place a lot of
lamp posts in our office,

00:04:45.650 --> 00:04:49.040
and make our office as
decorated with lamp posts

00:04:49.040 --> 00:04:50.740
as we would like it to be.

00:04:50.740 --> 00:04:52.070
It's looking great.

00:04:52.070 --> 00:04:54.740
And so that was our speed run.

00:04:54.740 --> 00:04:58.040
And so let's see Tom,
how did I do there?

00:04:58.040 --> 00:04:59.930
TOM SALTER: One
minute, 45 seconds.

00:04:59.930 --> 00:05:02.360
TIM PSIAKI: One
minute, 45 seconds.

00:05:02.360 --> 00:05:04.195
That's minutes, not hours.

00:05:04.195 --> 00:05:07.000
[APPLAUSE]

00:05:07.000 --> 00:05:11.170
OK so that's how fast
we can build with AR.

00:05:11.170 --> 00:05:13.526
But now we're
going to slow down.

00:05:13.526 --> 00:05:15.400
And we're going to talk
through all the tools

00:05:15.400 --> 00:05:17.355
that we've built that
make this possible.

00:05:20.080 --> 00:05:24.460
So the first thing I'm going to
do is talk to you about assets.

00:05:24.460 --> 00:05:27.566
You can get your assets
that you use in an AR app

00:05:27.566 --> 00:05:28.690
from many different places.

00:05:28.690 --> 00:05:30.790
You can source them online.

00:05:30.790 --> 00:05:35.950
You could have an artist
create custom assets for you.

00:05:35.950 --> 00:05:38.110
But what I'm going
to do for this talk

00:05:38.110 --> 00:05:40.090
is we're going to get
our asset from Poly.

00:05:40.090 --> 00:05:45.100
Now Poly is Google's
library for 3D assets.

00:05:45.100 --> 00:05:48.100
On Poly you'll find
thousands of 3D assets

00:05:48.100 --> 00:05:50.920
that you can use in your apps.

00:05:50.920 --> 00:05:54.370
As you saw, I was able to
easily search for a lamp post

00:05:54.370 --> 00:05:56.900
and find exactly what
I was looking for.

00:05:56.900 --> 00:05:59.080
But if you want something
else like a tree,

00:05:59.080 --> 00:06:00.177
you can search for that.

00:06:00.177 --> 00:06:02.260
And there are lots of trees
available in all sorts

00:06:02.260 --> 00:06:05.180
of colors, shapes, sizes.

00:06:05.180 --> 00:06:07.480
There are maybe some
dangerous looking ones.

00:06:07.480 --> 00:06:10.340
Whatever you want, you'll
find what you're looking for.

00:06:10.340 --> 00:06:12.790
But if you don't know exactly
what you want and you just

00:06:12.790 --> 00:06:17.020
like to be inspired, you
can browse by category.

00:06:17.020 --> 00:06:19.300
Maybe you'll find an asset
there that will inspire you

00:06:19.300 --> 00:06:21.389
to create a whole new AR app.

00:06:21.389 --> 00:06:23.680
So have a look around and
see if you can find something

00:06:23.680 --> 00:06:24.430
that you like.

00:06:24.430 --> 00:06:26.530
And I think you will.

00:06:26.530 --> 00:06:29.830
Most of these assets are-- many
of these assets are licensed

00:06:29.830 --> 00:06:33.100
under the CC-BY license.

00:06:33.100 --> 00:06:38.800
And so that means that you can
download model files for these

00:06:38.800 --> 00:06:41.830
and use them directly
in your apps.

00:06:41.830 --> 00:06:43.940
All you have to do
is credit the author,

00:06:43.940 --> 00:06:45.070
and then you can use them.

00:06:45.070 --> 00:06:47.970
So here I'm downloading
the model file.

00:06:47.970 --> 00:06:49.060
And look at this.

00:06:49.060 --> 00:06:49.930
I have an asset.

00:06:49.930 --> 00:06:53.800
As you saw in the
speed run, here it is.

00:06:53.800 --> 00:06:56.230
Now if you look closely,
you'll see that this asset

00:06:56.230 --> 00:06:59.140
has three different files.

00:06:59.140 --> 00:07:02.950
Now you want to make sure that
you keep all of these files

00:07:02.950 --> 00:07:05.020
together, because each
one of these files

00:07:05.020 --> 00:07:09.130
is important to actually be able
to render this asset the way

00:07:09.130 --> 00:07:11.770
we want to.

00:07:11.770 --> 00:07:15.730
But what do we do with these
files now that we have them?

00:07:15.730 --> 00:07:18.970
Just for fun, let's crack one
of them open in Android Studio

00:07:18.970 --> 00:07:22.430
and see what it looks like.

00:07:22.430 --> 00:07:26.740
So this doesn't really look
that much like a lamp post.

00:07:26.740 --> 00:07:29.350
Maybe a little bit,
but you probably

00:07:29.350 --> 00:07:32.240
were guessing that this wasn't
going to look like a lamp post

00:07:32.240 --> 00:07:34.300
if we just opened
up the raw files.

00:07:34.300 --> 00:07:35.850
As you can see,
we've got an image.

00:07:35.850 --> 00:07:39.460
We've got some text, which is
showing what all the vertices

00:07:39.460 --> 00:07:40.630
are in this object.

00:07:40.630 --> 00:07:45.530
You might love a file like this
if you're a graphics developer.

00:07:45.530 --> 00:07:49.069
And if you were using a
game engine like Unity,

00:07:49.069 --> 00:07:50.860
it would know exactly
what to do with this.

00:07:50.860 --> 00:07:52.207
It would be able to render this.

00:07:52.207 --> 00:07:53.290
You'd be able to tweak it.

00:07:53.290 --> 00:07:55.900
It'd be great.

00:07:55.900 --> 00:07:58.120
And I actually want
to stop for a second

00:07:58.120 --> 00:08:01.390
and let you know that at
11:30 right here on stage 7,

00:08:01.390 --> 00:08:03.230
or of course
streaming on YouTube,

00:08:03.230 --> 00:08:06.460
there is another session
called Building an AR

00:08:06.460 --> 00:08:08.740
app with the Poly
Toolkit for Unity.

00:08:08.740 --> 00:08:10.810
And you can learn a
lot more about Poly

00:08:10.810 --> 00:08:15.060
and more about using
these assets in Unity.

00:08:15.060 --> 00:08:18.180
But for now, because we're
not building a Unity app,

00:08:18.180 --> 00:08:20.530
we're going to build
a native Java app,

00:08:20.530 --> 00:08:24.145
we want to see how we can use
these assets in Android Studio.

00:08:27.870 --> 00:08:30.990
So let me talk to
you about Sceneform.

00:08:30.990 --> 00:08:34.140
So we can work with 3D
models and Android Studio

00:08:34.140 --> 00:08:37.130
using Sceneform or using
the Sceneform tools

00:08:37.130 --> 00:08:40.890
plug-in that we just announced
and is available now.

00:08:40.890 --> 00:08:45.020
We announced it at the
developer keynote on Tuesday.

00:08:45.020 --> 00:08:47.960
So Sceneform is our
high level 3D framework.

00:08:47.960 --> 00:08:51.500
And it makes building
our apps in Java easy.

00:08:51.500 --> 00:08:54.410
Now Sceneform includes
a Runtime API and that

00:08:54.410 --> 00:08:55.980
handles all of your rendering.

00:08:55.980 --> 00:08:59.450
It handles on doing
things with a ARCore

00:08:59.450 --> 00:09:02.030
and making your app work
on the Android side.

00:09:02.030 --> 00:09:04.610
But Sceneform also
has a set of tools

00:09:04.610 --> 00:09:06.380
that interact with
Android Studio

00:09:06.380 --> 00:09:10.040
and let you import, view,
and tweak your assets right

00:09:10.040 --> 00:09:11.900
in your IDE.

00:09:11.900 --> 00:09:14.210
So where do you
get this plug-in?

00:09:14.210 --> 00:09:17.240
Well, like most other
Android Studio plug-ins,

00:09:17.240 --> 00:09:20.960
you can get your plug-in
right from the Android Studio

00:09:20.960 --> 00:09:21.620
Plug-ins page.

00:09:21.620 --> 00:09:24.470
You go to Preferences, Plug-ins,
Browser Plug-ins, and just

00:09:24.470 --> 00:09:27.870
search for Sceneform
and you'll find it.

00:09:27.870 --> 00:09:31.640
So once we have the
plug-in, it's super easy

00:09:31.640 --> 00:09:34.310
to get your assets imported.

00:09:34.310 --> 00:09:38.060
The first thing we need to
do is place our source files

00:09:38.060 --> 00:09:40.310
in our projects.

00:09:40.310 --> 00:09:43.010
We're going to drop them
in the sample data folder.

00:09:43.010 --> 00:09:44.810
Now this is a little
bit important,

00:09:44.810 --> 00:09:49.850
because the sample data folder
is a folder that does not

00:09:49.850 --> 00:09:52.730
get bundled into your APK.

00:09:52.730 --> 00:09:58.190
Now you might wonder why
would I want these files not

00:09:58.190 --> 00:10:00.740
bundled into my APK.

00:10:00.740 --> 00:10:02.630
Well, as you can see here--

00:10:02.630 --> 00:10:03.890
well, actually hang on.

00:10:03.890 --> 00:10:05.180
I missed one thing.

00:10:05.180 --> 00:10:09.260
As you can see here, we support
over OBJ, FBX, and glTF files.

00:10:09.260 --> 00:10:12.969
And so we're going to
focus more on OBJ files

00:10:12.969 --> 00:10:14.885
right now because that's
what I got from Poly.

00:10:14.885 --> 00:10:19.130
But this exact same flow
works with FBX and glTF

00:10:19.130 --> 00:10:22.520
which you might find
other places online

00:10:22.520 --> 00:10:26.810
or sourced from artists,
things like that.

00:10:26.810 --> 00:10:28.670
But anyway, so we
drop these files

00:10:28.670 --> 00:10:31.610
into our sample
data folder like I

00:10:31.610 --> 00:10:33.860
said, because we don't want
them bundled into our app.

00:10:33.860 --> 00:10:37.740
Why don't we want them
bundled into our app?

00:10:37.740 --> 00:10:40.970
It's because we build
Runtime optimized

00:10:40.970 --> 00:10:45.790
binaries is that Sceneform
will be able to use to render

00:10:45.790 --> 00:10:47.890
your assets in Android.

00:10:47.890 --> 00:10:51.220
Now these binaries are
optimized so they load fast

00:10:51.220 --> 00:10:53.110
and they look great.

00:10:53.110 --> 00:10:54.880
They include all of
the data that you

00:10:54.880 --> 00:11:00.670
need in order for Sceneform
to render your models.

00:11:00.670 --> 00:11:04.780
So that file-- actually,
can you go back one slide?

00:11:04.780 --> 00:11:07.609
So that is the SFB file.

00:11:07.609 --> 00:11:10.150
And so you're going to hear a
little bit more about SFB files

00:11:10.150 --> 00:11:12.190
later, but just
suffice it to say

00:11:12.190 --> 00:11:14.830
that SFB files are
the files that we

00:11:14.830 --> 00:11:16.650
want bundled into our APK.

00:11:19.480 --> 00:11:20.170
OK.

00:11:20.170 --> 00:11:24.670
So now that we have our set
of files in our sample data

00:11:24.670 --> 00:11:26.950
folder, we're going
to right-click.

00:11:26.950 --> 00:11:29.140
And using the Sceneform
Tools plug-in,

00:11:29.140 --> 00:11:31.390
we'll click Import
Sceneform Asset.

00:11:31.390 --> 00:11:34.450
This will trigger our
import wizard flow.

00:11:37.640 --> 00:11:39.400
So this is the import wizard.

00:11:39.400 --> 00:11:42.110
As you can see, this
is fairly simple.

00:11:42.110 --> 00:11:43.840
We have three
fields to fill out.

00:11:43.840 --> 00:11:45.700
The first is the file
path to our model,

00:11:45.700 --> 00:11:48.170
and that's already
filled out for us.

00:11:48.170 --> 00:11:50.950
The second two are outputs,
and both of these files

00:11:50.950 --> 00:11:54.400
are created by
the import wizard.

00:11:54.400 --> 00:11:56.860
The first file you'll
see is an SFA file.

00:11:56.860 --> 00:11:58.840
And I'm going to go
into that in detail

00:11:58.840 --> 00:12:00.520
in just a couple of minutes.

00:12:03.310 --> 00:12:06.370
For now, you just need to know
this should be placed right

00:12:06.370 --> 00:12:08.860
next to your model,
because this is going

00:12:08.860 --> 00:12:10.360
to become one of
the source files

00:12:10.360 --> 00:12:13.030
that will show how
your model is rendered.

00:12:13.030 --> 00:12:17.622
Your SFB file is what you
want bundled into your APK,

00:12:17.622 --> 00:12:20.080
and so you're going to want to
put that somewhere that gets

00:12:20.080 --> 00:12:21.070
bundled.

00:12:21.070 --> 00:12:22.610
You kind of have
two options here.

00:12:22.610 --> 00:12:27.040
Your options are your Assets
folder and your res/raw folder.

00:12:27.040 --> 00:12:29.140
You can put it in
either of these.

00:12:29.140 --> 00:12:31.060
The loading is
slightly different

00:12:31.060 --> 00:12:33.829
when you get to the runtime,
but other than that,

00:12:33.829 --> 00:12:34.870
they'll both get bundled.

00:12:34.870 --> 00:12:35.690
And it doesn't matter.

00:12:35.690 --> 00:12:37.273
You can pick whichever
one you choose.

00:12:39.870 --> 00:12:42.420
So that's all we have to
do in the import wizard.

00:12:42.420 --> 00:12:45.004
We click Finish, and we're done.

00:12:45.004 --> 00:12:46.170
Let's see what happens next.

00:12:49.006 --> 00:12:50.880
So as you can see, as
soon as we click Finish

00:12:50.880 --> 00:12:53.970
we're going to have a
Gradle build kicking off.

00:12:53.970 --> 00:12:59.080
We're compiling here the
SFB that we just imported.

00:12:59.080 --> 00:13:00.780
Now what's going
to happen is we'll

00:13:00.780 --> 00:13:03.270
get these Gradle tasks added.

00:13:03.270 --> 00:13:05.611
We're picking these
defaults that we're

00:13:05.611 --> 00:13:07.860
going to fill in in the SFA
that I'm going to tell you

00:13:07.860 --> 00:13:09.780
about in a second,
and we're building

00:13:09.780 --> 00:13:12.740
this runtime optimized binary.

00:13:12.740 --> 00:13:16.160
But as soon as we
finish this build--

00:13:16.160 --> 00:13:18.030
or sorry-- as soon as
we finish this build,

00:13:18.030 --> 00:13:23.130
we are going to see these SFA,
SFB files added to our project.

00:13:23.130 --> 00:13:24.840
And so you can see
we've got our SFA

00:13:24.840 --> 00:13:27.660
next to our model and
our SFB right here.

00:13:27.660 --> 00:13:30.990
I think I have it in
res/raw right here.

00:13:30.990 --> 00:13:32.020
But that's not all.

00:13:32.020 --> 00:13:33.410
We also have a viewer.

00:13:33.410 --> 00:13:35.580
And so the viewer
is going to pop open

00:13:35.580 --> 00:13:38.600
as soon as you get your
asset fully imported.

00:13:38.600 --> 00:13:43.710
And as you can see, we
see exactly what our model

00:13:43.710 --> 00:13:44.740
is going to look like.

00:13:44.740 --> 00:13:47.290
Here it looks just like it did
on Poly, which makes sense,

00:13:47.290 --> 00:13:48.789
because that's what
we implemented--

00:13:48.789 --> 00:13:51.300
or that's what we imported.

00:13:51.300 --> 00:13:53.130
And you don't have to
deploy to your phone.

00:13:53.130 --> 00:13:54.421
You can just see it right away.

00:13:54.421 --> 00:13:57.130
You don't even have to
have an app built yet.

00:13:57.130 --> 00:13:59.550
You could just import it right
into your project and view

00:13:59.550 --> 00:14:02.550
files without having
your app built.

00:14:02.550 --> 00:14:05.970
And this uses the exact same
renderer as our runtime, And?

00:14:05.970 --> 00:14:07.840
So what you see is what you get.

00:14:07.840 --> 00:14:11.820
This is going to look just
the same on your phone.

00:14:11.820 --> 00:14:12.320
OK.

00:14:12.320 --> 00:14:15.110
So this looks just
like it did in Poly.

00:14:15.110 --> 00:14:18.410
But I was thinking I wanted it
maybe a little bit different

00:14:18.410 --> 00:14:19.790
for my app.

00:14:19.790 --> 00:14:25.520
In Poly it sort of looks maybe
like it's rough plastic maybe.

00:14:25.520 --> 00:14:29.970
And I was hoping it would look
maybe a little bit shinier.

00:14:29.970 --> 00:14:32.710
So let's see how
we could do that.

00:14:32.710 --> 00:14:36.000
So I talked to you about
the SFA a couple of times.

00:14:36.000 --> 00:14:39.790
So there was a text file
that you saw in the viewer.

00:14:39.790 --> 00:14:43.530
And so that file
is your SFA file.

00:14:43.530 --> 00:14:46.110
The SFA file defines
how Sceneform

00:14:46.110 --> 00:14:48.730
will render your asset.

00:14:48.730 --> 00:14:51.920
You can see it has a bunch
of different parameters.

00:14:51.920 --> 00:14:53.980
And if you look
closely, you'll see

00:14:53.980 --> 00:14:59.050
that these might affect the way
your asset is going to look.

00:14:59.050 --> 00:15:02.230
So we're going to look
at a couple of these.

00:15:02.230 --> 00:15:06.790
One of them here is metallic
and one of them is roughness.

00:15:06.790 --> 00:15:08.950
And so by default when
we import from Poly,

00:15:08.950 --> 00:15:11.200
we get something where
the roughness is one

00:15:11.200 --> 00:15:12.342
and the metallic is zero.

00:15:12.342 --> 00:15:14.800
And that's going to make it
look like it's sort of made out

00:15:14.800 --> 00:15:16.750
of plastic.

00:15:16.750 --> 00:15:20.470
And what I'd like to do is turn
the metallic up maybe to one

00:15:20.470 --> 00:15:24.190
so it looks really metallic
and turn the roughness down.

00:15:24.190 --> 00:15:25.480
Maybe not all the way to zero.

00:15:25.480 --> 00:15:27.940
I don't want it too shiny,
but I'm going to turn it down,

00:15:27.940 --> 00:15:31.340
and then I'll see what happens.

00:15:31.340 --> 00:15:34.450
So as soon as I
save the SFA file,

00:15:34.450 --> 00:15:37.600
we're going to rebuild
the runtime bundle.

00:15:37.600 --> 00:15:40.690
And as soon as that
is complete, we're

00:15:40.690 --> 00:15:43.960
going to see that
reflected in the viewer.

00:15:43.960 --> 00:15:46.300
So here you can see,
I guess, this gif is

00:15:46.300 --> 00:15:47.600
sort of looping a little bit.

00:15:47.600 --> 00:15:50.179
But you can see once it
completes the viewer is

00:15:50.179 --> 00:15:51.470
looking a little bit different.

00:15:51.470 --> 00:15:54.340
It's looking pretty metallic.

00:15:54.340 --> 00:15:56.680
This is basically
what I'm going for.

00:15:59.530 --> 00:16:02.200
So I want to point you to
this documentation online.

00:16:02.200 --> 00:16:04.630
So I mentioned a couple
of the parameters.

00:16:04.630 --> 00:16:06.610
And there are actually
a lot more parameters

00:16:06.610 --> 00:16:09.580
that you can edit
in your SFA file.

00:16:09.580 --> 00:16:12.774
There are a lot of parameters
that affect the look

00:16:12.774 --> 00:16:15.190
and feel of your asset but,
there are also parameters that

00:16:15.190 --> 00:16:18.100
affect things like
scale or the way

00:16:18.100 --> 00:16:22.190
its collision works for when
you're tapping on your objects.

00:16:22.190 --> 00:16:25.510
And if you check out this page,
you'll see all of the details

00:16:25.510 --> 00:16:27.140
on all of those parameters.

00:16:27.140 --> 00:16:29.680
Now one thing I'll
mention, I mentioned

00:16:29.680 --> 00:16:33.800
how we support glTF,
FBX, and OBJ files.

00:16:33.800 --> 00:16:35.630
When you import
each of these files,

00:16:35.630 --> 00:16:37.940
the parameters will
be slightly different

00:16:37.940 --> 00:16:40.550
that you can edit in your SFA.

00:16:40.550 --> 00:16:42.536
And all of the details
are on this site,

00:16:42.536 --> 00:16:43.910
so I would strongly
recommend you

00:16:43.910 --> 00:16:46.871
go see which things
you can tweak in each

00:16:46.871 --> 00:16:47.870
of these types of files.

00:16:50.920 --> 00:16:51.480
OK.

00:16:51.480 --> 00:16:55.200
So we've got our asset
looking the way we want it to.

00:16:55.200 --> 00:16:58.710
Let's see what we need
to do to get it in AR.

00:16:58.710 --> 00:17:01.250
Now you remember I
talked about placing

00:17:01.250 --> 00:17:05.220
the runtime optimized
binary, the SFB,

00:17:05.220 --> 00:17:07.930
in the assets or res/raw folder.

00:17:07.930 --> 00:17:10.829
So let's look at how we would
load that in our runtime out

00:17:10.829 --> 00:17:12.700
of each of these.

00:17:12.700 --> 00:17:14.760
So as you can see here,
this is an activity

00:17:14.760 --> 00:17:17.369
that you guys are all
very familiar with.

00:17:17.369 --> 00:17:19.470
We have an onCreate method.

00:17:19.470 --> 00:17:23.010
And what we want to do
is our model renderable

00:17:23.010 --> 00:17:25.500
is an object that
in the runtime is

00:17:25.500 --> 00:17:27.930
going to describe all
the details of how

00:17:27.930 --> 00:17:31.080
to render our lamp posts.

00:17:31.080 --> 00:17:34.140
You could think of this as
the runtime representation

00:17:34.140 --> 00:17:40.137
of our file that has
our optimized model.

00:17:40.137 --> 00:17:41.970
And so what we need to
do is we need to load

00:17:41.970 --> 00:17:44.340
our file into the runtime here.

00:17:44.340 --> 00:17:47.700
And we're using that using
the model renderable builder.

00:17:47.700 --> 00:17:49.260
Now loading can
take a little time,

00:17:49.260 --> 00:17:52.640
so this API is an
asynchronous API.

00:17:52.640 --> 00:17:57.840
And all we have to do is create
a builder, set its source--

00:17:57.840 --> 00:18:01.980
here I'm setting it to
a resource ID in res/raw

00:18:01.980 --> 00:18:04.470
that points to the
lamp posts in build.

00:18:04.470 --> 00:18:08.040
Now the model renderable builder
returns a completable future.

00:18:08.040 --> 00:18:09.960
And so that completable
future we're

00:18:09.960 --> 00:18:13.360
using this then accept method
so that after that's complete,

00:18:13.360 --> 00:18:18.150
we can on we can go and
store the renderable

00:18:18.150 --> 00:18:20.430
that's loaded into our
lamp post renderable

00:18:20.430 --> 00:18:23.710
so that it can be used later on.

00:18:23.710 --> 00:18:26.670
So this was for
loading out of res/raw.

00:18:26.670 --> 00:18:29.010
If we were to load
out of assets,

00:18:29.010 --> 00:18:30.420
it's just slightly different.

00:18:30.420 --> 00:18:33.420
This code is almost exactly
the same except for one line.

00:18:33.420 --> 00:18:37.560
When we set the source ID, we
just need to set it to a URI

00:18:37.560 --> 00:18:42.120
and parse out the actual file
name instead of a resource ID.

00:18:42.120 --> 00:18:46.710
You'll notice this is just
the lamppost.sfb directly

00:18:46.710 --> 00:18:47.640
in the Assets folder.

00:18:47.640 --> 00:18:49.590
This is how we would load that.

00:18:49.590 --> 00:18:53.010
You can define a directory
hierarchy however you please

00:18:53.010 --> 00:18:57.060
and just reference the path all
the way from the Assets folder

00:18:57.060 --> 00:18:58.630
to your SFB right here.

00:19:01.950 --> 00:19:05.720
So there's a lot more to learn
about Sceneform and about

00:19:05.720 --> 00:19:10.460
how to actually display
these in your app.

00:19:10.460 --> 00:19:13.230
When I was doing my speed
run, I used the sample,

00:19:13.230 --> 00:19:15.590
and so that's a great way
to just try this out and see

00:19:15.590 --> 00:19:17.992
how your assets will look.

00:19:17.992 --> 00:19:19.700
But if you'd like to
learn more about how

00:19:19.700 --> 00:19:22.100
to do more things
with these assets

00:19:22.100 --> 00:19:25.370
and how to display
them in the runtime,

00:19:25.370 --> 00:19:27.080
you should check
out this session--

00:19:27.080 --> 00:19:28.580
it was yesterday--

00:19:28.580 --> 00:19:30.750
Rendering for Android Apps.

00:19:30.750 --> 00:19:32.570
And it's available
on YouTube of course.

00:19:32.570 --> 00:19:34.970
You can learn a lot more there.

00:19:34.970 --> 00:19:37.692
So I'm going to jump right into
our actual app we've built.

00:19:37.692 --> 00:19:38.900
And let's take it for a spin.

00:19:38.900 --> 00:19:40.910
See what it looks like
now that we've tweaked

00:19:40.910 --> 00:19:42.275
the parameters in the SFA.

00:19:44.631 --> 00:19:45.130
All right.

00:19:45.130 --> 00:19:46.780
So there is our lamp post.

00:19:46.780 --> 00:19:48.094
It's lit nicely.

00:19:48.094 --> 00:19:49.510
It's got everything
that you would

00:19:49.510 --> 00:19:53.350
expect of a giant lamp post
in the middle of your office.

00:19:56.200 --> 00:19:58.156
And it's looking great.

00:19:58.156 --> 00:19:59.530
That's just what
I was going for.

00:19:59.530 --> 00:20:01.980
So let's jump back
to the slides now.

00:20:07.220 --> 00:20:09.440
So I want to talk about
one other thing, which

00:20:09.440 --> 00:20:12.950
is I'm asking you to install
this Android Studio plug-in.

00:20:12.950 --> 00:20:15.590
You might wonder, what
is this plugin going

00:20:15.590 --> 00:20:17.660
to do to my project build?

00:20:17.660 --> 00:20:19.142
Do I want to install this?

00:20:19.142 --> 00:20:20.600
And so let me tell
you a little bit

00:20:20.600 --> 00:20:22.470
about what's going
on under the hood.

00:20:22.470 --> 00:20:25.250
So we've built a
Sceneform Gradle plug-in.

00:20:25.250 --> 00:20:28.700
And this is what is actually
doing the asset builds

00:20:28.700 --> 00:20:29.470
that I showed you.

00:20:32.080 --> 00:20:34.470
When you import,
what we are going

00:20:34.470 --> 00:20:37.420
to do is we are going to
add this Sceneform Gradle

00:20:37.420 --> 00:20:39.930
plug-in to your Gradle build.

00:20:39.930 --> 00:20:43.120
The first thing we do is we just
add the classpath dependencies

00:20:43.120 --> 00:20:44.815
to your project build file.

00:20:44.815 --> 00:20:46.940
You'll note that we load
this from the Google Maven

00:20:46.940 --> 00:20:49.240
Repository so you want
to make sure that that's

00:20:49.240 --> 00:20:51.340
in your project build file.

00:20:51.340 --> 00:20:53.809
Of course, this is the default
for all new Android apps,

00:20:53.809 --> 00:20:55.100
so this shouldn't be a problem.

00:20:57.960 --> 00:21:01.040
And then in your app
build build.gradle file,

00:21:01.040 --> 00:21:03.200
we apply the plug-in just once.

00:21:03.200 --> 00:21:04.760
We don't do that more than once.

00:21:04.760 --> 00:21:06.650
But then for every
asset that you import,

00:21:06.650 --> 00:21:09.140
you'll see these
asset definitions

00:21:09.140 --> 00:21:11.000
in your Gradle file.

00:21:11.000 --> 00:21:13.020
Now you'll see there
are a few pads there.

00:21:13.020 --> 00:21:14.840
And if you remember
the import flow,

00:21:14.840 --> 00:21:19.430
you'll remember that
those look very familiar.

00:21:19.430 --> 00:21:20.550
And in fact, you're right.

00:21:20.550 --> 00:21:23.690
Those are the exact same pads
that we had in the import

00:21:23.690 --> 00:21:24.210
wizard.

00:21:24.210 --> 00:21:25.400
This is all the
import wizard does.

00:21:25.400 --> 00:21:26.900
It writes these
files into Gradle.

00:21:26.900 --> 00:21:31.250
So could you edit these Gradle
files manually if you wanted?

00:21:31.250 --> 00:21:32.840
Sure, that would be fine.

00:21:32.840 --> 00:21:36.650
Now we think that the Android
Studio plug-in is the quickest

00:21:36.650 --> 00:21:40.580
and easiest way to get
these in, but of course they

00:21:40.580 --> 00:21:42.600
can be edited and
changed here as well.

00:21:45.750 --> 00:21:49.010
And finally, once you build and
you've got these asset rules

00:21:49.010 --> 00:21:52.430
in your project, you'll
see that here I'm

00:21:52.430 --> 00:21:57.300
building an APK using the
assemble debug rule in Gradle.

00:21:57.300 --> 00:22:00.630
And what you see is we're
getting this compile asset

00:22:00.630 --> 00:22:01.620
task.

00:22:01.620 --> 00:22:04.680
And we have a compile asset
task for each of the assets

00:22:04.680 --> 00:22:06.780
that we've added to
our Gradle build.

00:22:06.780 --> 00:22:09.300
And these are added to
the dependency chain

00:22:09.300 --> 00:22:12.690
so that they'll run before
the tasks that merge in assets

00:22:12.690 --> 00:22:15.120
or resources into your APK.

00:22:15.120 --> 00:22:18.630
And so you can always be
sure that these bundles

00:22:18.630 --> 00:22:20.410
will be updated--

00:22:20.410 --> 00:22:24.060
these optimized binaries will
be updated and ready to go

00:22:24.060 --> 00:22:26.160
every time you build an
APK, and you'll always

00:22:26.160 --> 00:22:28.230
get the latest and
greatest version

00:22:28.230 --> 00:22:31.440
of the optimized binary that
has all your updated parameters.

00:22:31.440 --> 00:22:36.300
And that should be--

00:22:36.300 --> 00:22:38.150
that should-- yes.

00:22:38.150 --> 00:22:38.820
Oh sorry.

00:22:38.820 --> 00:22:40.710
I forgot about source control.

00:22:40.710 --> 00:22:45.110
So one thing you
might ask, since we're

00:22:45.110 --> 00:22:47.625
building these files as
part of Gradle, and do we

00:22:47.625 --> 00:22:49.250
need to check them
into source control?

00:22:49.250 --> 00:22:50.540
Where should they live?

00:22:50.540 --> 00:22:55.190
And the truth is you
don't have to check

00:22:55.190 --> 00:22:56.780
in the optimized
runtime bundles.

00:22:56.780 --> 00:22:59.210
These could just be built as
part of your Gradle build.

00:22:59.210 --> 00:23:00.830
But we would actually
highly recommend

00:23:00.830 --> 00:23:01.970
that you do check them in.

00:23:05.150 --> 00:23:08.390
Since these are
trapped in Gradle

00:23:08.390 --> 00:23:12.410
and we understand all of the
dependencies and the input

00:23:12.410 --> 00:23:15.980
files that were used to
generate our optimized binary,

00:23:15.980 --> 00:23:19.130
we can always understand
when it needs to be rebuilt.

00:23:19.130 --> 00:23:24.170
And so if you just check in your
SFBs check in your SFAs phase

00:23:24.170 --> 00:23:27.200
and then pull down the latest
source from your source control

00:23:27.200 --> 00:23:27.950
in build.

00:23:27.950 --> 00:23:29.570
We'll know which
we have to rebuild

00:23:29.570 --> 00:23:32.310
and which we can
leave unchanged,

00:23:32.310 --> 00:23:35.160
and so you'll always have
the latest stuff to run.

00:23:35.160 --> 00:23:35.660
OK.

00:23:35.660 --> 00:23:37.449
So now we have our basic app.

00:23:37.449 --> 00:23:38.990
And I'm going to
turn it over to Tom.

00:23:38.990 --> 00:23:42.230
And he's going to tell us
how after we've built an app

00:23:42.230 --> 00:23:45.657
we would test it, iterate,
and launch that app.

00:23:45.657 --> 00:23:46.240
So here we go.

00:23:46.240 --> 00:23:48.482
Tom.

00:23:48.482 --> 00:23:49.190
TOM SALTER: Cool.

00:23:49.190 --> 00:23:51.200
Thanks, Tim.

00:23:51.200 --> 00:23:51.860
Hi everyone.

00:23:51.860 --> 00:23:52.755
I'm Tom.

00:23:52.755 --> 00:23:55.762
I'm engineering manager
on the AR and VR team.

00:23:55.762 --> 00:23:57.470
I'm going to talk
about some of the tools

00:23:57.470 --> 00:23:59.470
that we've built to make
iterating, and building

00:23:59.470 --> 00:24:02.220
and debugging your
apps even easier.

00:24:02.220 --> 00:24:05.300
So first of all,
earlier this year, we

00:24:05.300 --> 00:24:09.200
released ARCore support
to the Android Emulator

00:24:09.200 --> 00:24:12.590
so no matter where you are,
what devices you've got,

00:24:12.590 --> 00:24:16.340
you're always able
to build for ARCore.

00:24:16.340 --> 00:24:20.360
So if you'd like to develop
your ARCore app without having

00:24:20.360 --> 00:24:23.870
to deploy your device, get
up and walk around your room,

00:24:23.870 --> 00:24:26.990
place your objects,
then you can do that.

00:24:26.990 --> 00:24:30.140
If you would like to develop
in a coffee shop, or on a bus,

00:24:30.140 --> 00:24:33.560
or on the plane, then
we've got you covered.

00:24:33.560 --> 00:24:37.480
The virtual environment that
we let you walk around in it's

00:24:37.480 --> 00:24:38.690
got multiple rooms.

00:24:38.690 --> 00:24:39.560
It's got tables.

00:24:39.560 --> 00:24:40.400
It's got chairs.

00:24:40.400 --> 00:24:41.570
And if you also
want to see what it

00:24:41.570 --> 00:24:44.111
looks like with a cat in your
room, then you can do that too.

00:24:47.100 --> 00:24:48.890
So to get started,
all you need to do

00:24:48.890 --> 00:24:52.460
is use Android 3.14 or above.

00:24:52.460 --> 00:24:55.260
Use the latest Android
Oreo system image.

00:24:55.260 --> 00:24:58.840
Make sure you use an image that
has access to the Play Store

00:24:58.840 --> 00:25:01.280
so that you can
download ARCore or there

00:25:01.280 --> 00:25:04.852
are instructions on our website
to side load it if you'd like.

00:25:04.852 --> 00:25:06.560
And then it should be
the default option,

00:25:06.560 --> 00:25:08.180
but make sure in the
advanced settings

00:25:08.180 --> 00:25:11.000
that you're using the
virtual scene as your camera

00:25:11.000 --> 00:25:12.680
for the back facing camera.

00:25:12.680 --> 00:25:16.870
Once you've settled
up, it's good to go.

00:25:16.870 --> 00:25:18.760
So walking around
your room, it's

00:25:18.760 --> 00:25:21.714
not as easy as holding your
phone up and looking around.

00:25:21.714 --> 00:25:23.630
But if you played a lot
of video games like me

00:25:23.630 --> 00:25:26.170
then you'll find it
really, really natural.

00:25:26.170 --> 00:25:31.390
So use WASD on your keyboard
and the mouse or trackpad,

00:25:31.390 --> 00:25:36.195
and you can navigate like
a first person video game.

00:25:36.195 --> 00:25:38.320
So the really cool thing
about the emulator support

00:25:38.320 --> 00:25:42.670
is we actually run the
entire ARCore tracking stack.

00:25:42.670 --> 00:25:45.790
We don't fake anything
on that rendered image.

00:25:45.790 --> 00:25:47.320
We just run the
full tracking stack,

00:25:47.320 --> 00:25:50.020
which is really cool because
as new features for ARCore

00:25:50.020 --> 00:25:52.970
come online, then it
will just work magically

00:25:52.970 --> 00:25:54.250
within the Emulator.

00:25:54.250 --> 00:25:56.800
So this week in the keynote,
we announced support

00:25:56.800 --> 00:25:58.520
for augmented images.

00:25:58.520 --> 00:26:00.760
And whilst all that
stuff works, we

00:26:00.760 --> 00:26:04.040
don't actually have any images
in that environment just now.

00:26:04.040 --> 00:26:07.750
But if you get the Canary
build of Android Studio

00:26:07.750 --> 00:26:10.030
with the Emulator
right now, then we've

00:26:10.030 --> 00:26:11.830
added this extra
UI which lets you

00:26:11.830 --> 00:26:13.720
place an image in your world.

00:26:13.720 --> 00:26:15.040
You can change the size of it.

00:26:15.040 --> 00:26:18.460
You can put it on horizontal
surfaces, vertical surfaces.

00:26:18.460 --> 00:26:20.140
And as you can
see, we didn't have

00:26:20.140 --> 00:26:22.250
to do anything to make it work.

00:26:22.250 --> 00:26:28.410
Augmented images just works
perfectly in the Emulator.

00:26:28.410 --> 00:26:29.841
So that helps you iterate.

00:26:29.841 --> 00:26:31.590
One thing that we've
worked really hard on

00:26:31.590 --> 00:26:33.566
is helping you debug
your application.

00:26:33.566 --> 00:26:35.190
So I want to show
you a tool that we've

00:26:35.190 --> 00:26:38.550
been working on that helps
building and debugging

00:26:38.550 --> 00:26:42.060
these complex immersive
scenes really easy.

00:26:42.060 --> 00:26:46.290
With Sceneform, and Unity, and
Unreal engine integrations,

00:26:46.290 --> 00:26:48.309
we've made building
your app really easy.

00:26:48.309 --> 00:26:50.100
But sometimes you want
to go under the hood

00:26:50.100 --> 00:26:53.670
and see what's happening.

00:26:53.670 --> 00:26:57.860
So we built GAPID, which is
the graphics API debugger.

00:26:57.860 --> 00:26:59.570
So it's a really
powerful tool that we've

00:26:59.570 --> 00:27:02.360
been working on that lets you
inspect all of the graphics API

00:27:02.360 --> 00:27:05.020
commands that your
application is calling

00:27:05.020 --> 00:27:07.920
and lets you replay
them later on.

00:27:07.920 --> 00:27:11.020
So if you want to see exactly
how your frame is being built

00:27:11.020 --> 00:27:14.810
draw call by draw call, or
see what resources your app

00:27:14.810 --> 00:27:19.310
is being used, or investigate
why your app doesn't look quite

00:27:19.310 --> 00:27:22.980
as you expect, then
GAPID can help.

00:27:22.980 --> 00:27:26.030
So it also helps you understand
exactly what your GPU is

00:27:26.030 --> 00:27:29.260
being asked to do as well.

00:27:29.260 --> 00:27:32.060
So here's a really, really
quick example of GAPID.

00:27:32.060 --> 00:27:34.370
We're just stepping through
draw call by draw call.

00:27:34.370 --> 00:27:38.270
You can see the Andy model,
the raw resources that this

00:27:38.270 --> 00:27:41.270
is using, and you can see
every single gldraw elements

00:27:41.270 --> 00:27:43.980
call which contributes
to your final image.

00:27:43.980 --> 00:27:46.430
And you can see it built
up draw call by draw call.

00:27:49.180 --> 00:27:53.050
So we're going to go for a quick
whirlwind tool through GAPID.

00:27:53.050 --> 00:27:54.530
There are two main stages.

00:27:54.530 --> 00:27:56.200
The first stage
is tracing, which

00:27:56.200 --> 00:27:59.770
is capturing every single API
call that your app is making.

00:27:59.770 --> 00:28:02.830
And then secondly,
there's replay,

00:28:02.830 --> 00:28:04.480
which is on your
desktop or laptop

00:28:04.480 --> 00:28:06.880
so that you can step
through and reproduce

00:28:06.880 --> 00:28:09.720
those issues that your app has.

00:28:09.720 --> 00:28:12.600
So first of all,
to get going, you

00:28:12.600 --> 00:28:14.710
need to capture a trace
of your application.

00:28:14.710 --> 00:28:18.840
So File, Capture Trace.

00:28:18.840 --> 00:28:21.930
You have to choose your
device, choose your package,

00:28:21.930 --> 00:28:25.290
making sure your package is
debuggable, and then click OK,

00:28:25.290 --> 00:28:28.710
and then it will connect to
your device, start your package,

00:28:28.710 --> 00:28:31.450
and then it will start
streaming this information back.

00:28:31.450 --> 00:28:33.990
So once you've captured an
interesting part of your scene,

00:28:33.990 --> 00:28:36.820
this is the UI that you get.

00:28:36.820 --> 00:28:40.240
And you can replay
each frame within GAPID

00:28:40.240 --> 00:28:42.930
and step through it
draw call by draw call.

00:28:42.930 --> 00:28:45.390
For open GLES
applications, which

00:28:45.390 --> 00:28:47.880
most of our AR Core
applications are right now,

00:28:47.880 --> 00:28:50.970
we actually capture from
the start of the application

00:28:50.970 --> 00:28:53.460
all the way through
until you click Stop.

00:28:53.460 --> 00:28:56.070
Use the filmstrip UI at the
top to choose between the frame

00:28:56.070 --> 00:29:01.160
that you'd like to
take a deeper look at.

00:29:01.160 --> 00:29:03.270
And then once you've found
an interesting frame,

00:29:03.270 --> 00:29:05.340
you can really dig
into the details.

00:29:05.340 --> 00:29:07.120
On the left, we've
got the command view.

00:29:07.120 --> 00:29:08.720
So this shows every
single command

00:29:08.720 --> 00:29:11.390
that contribute to
drawing your frame.

00:29:11.390 --> 00:29:14.690
It's neatly separated by
frame and by draw call.

00:29:14.690 --> 00:29:17.269
And any of the parameters to
those functions can be changed,

00:29:17.269 --> 00:29:18.810
and you can replay
it just to see how

00:29:18.810 --> 00:29:20.520
that might make a difference.

00:29:20.520 --> 00:29:23.054
In the center, we've
got a framebuffer pane.

00:29:23.054 --> 00:29:24.720
So that shows what
the application looks

00:29:24.720 --> 00:29:27.690
to up to the current command.

00:29:27.690 --> 00:29:30.739
And that way you can step
through every single command.

00:29:30.739 --> 00:29:32.280
We've added a bunch
of options so you

00:29:32.280 --> 00:29:34.750
can visualize that framebuffer
in a different way too.

00:29:34.750 --> 00:29:36.177
So you can edit the histogram.

00:29:36.177 --> 00:29:38.010
So if your application
is particularly dark,

00:29:38.010 --> 00:29:39.570
you can bring it
more into the light,

00:29:39.570 --> 00:29:41.910
and you can change
those performances.

00:29:41.910 --> 00:29:44.650
On the right, there are various
tabs for your resources.

00:29:44.650 --> 00:29:46.840
So you can see the
textures that contributed

00:29:46.840 --> 00:29:48.060
to your application.

00:29:48.060 --> 00:29:49.770
You can see every mesh.

00:29:49.770 --> 00:29:51.450
Go and investigate
the polygon count.

00:29:51.450 --> 00:29:53.616
You can see it actually
gives the number of vertices

00:29:53.616 --> 00:29:55.150
and triangles.

00:29:55.150 --> 00:29:56.370
So you can take a look there.

00:29:56.370 --> 00:29:58.200
If you also want
to, all the shaders

00:29:58.200 --> 00:30:01.680
that go into building you're
scene, and the raw open GL

00:30:01.680 --> 00:30:05.390
state, you can go and
look at that, too.

00:30:05.390 --> 00:30:07.300
So let's take a look
at a concrete issue,

00:30:07.300 --> 00:30:09.091
the kind of thing you
might see with GAPID.

00:30:11.180 --> 00:30:14.401
So this is an example that
I created from our Seattle

00:30:14.401 --> 00:30:14.900
office.

00:30:14.900 --> 00:30:19.250
This is just an Andy hanging
out on a big chess set.

00:30:19.250 --> 00:30:21.440
It looks like just
one or two androids

00:30:21.440 --> 00:30:23.120
just hanging out there.

00:30:23.120 --> 00:30:25.730
But a really common issue
on mobile applications

00:30:25.730 --> 00:30:26.750
is overdraw.

00:30:26.750 --> 00:30:31.250
So overdraw is when you
shade a pixel multiple times.

00:30:31.250 --> 00:30:34.030
That can become a
performance bottleneck

00:30:34.030 --> 00:30:37.430
on our bandwidth-limited
mobile devices.

00:30:37.430 --> 00:30:39.740
So you generally want
to shade your pixels

00:30:39.740 --> 00:30:43.720
only one, two, or three times.

00:30:43.720 --> 00:30:47.980
So how many times do
we think those pixels

00:30:47.980 --> 00:30:51.330
on that front Android
actually get rendered?

00:30:51.330 --> 00:30:58.425
Well, it's kind of 1, 2,
3, 4, 5, 6, 7, keeps going.

00:30:58.425 --> 00:31:00.780
It actually goes
all the way to 20,

00:31:00.780 --> 00:31:04.230
and that's really, really
expensive on our mobile GPUs.

00:31:04.230 --> 00:31:05.970
So GAPID can let
you see and like

00:31:05.970 --> 00:31:08.250
check your assumptions on
how your frame is actually

00:31:08.250 --> 00:31:09.320
being built up.

00:31:09.320 --> 00:31:11.100
It just lets you kind
of go under the hood

00:31:11.100 --> 00:31:14.520
and see exactly with Sceneform,
and with Unity, and Unreal,

00:31:14.520 --> 00:31:17.916
exactly what they're doing.

00:31:17.916 --> 00:31:19.290
So to walk to my
sight, you could

00:31:19.290 --> 00:31:23.094
render your objects front to
back instead of back to front.

00:31:23.094 --> 00:31:25.510
So my ask of you all who are
building AR applications here

00:31:25.510 --> 00:31:28.110
is go and take GAPID for a spin.

00:31:28.110 --> 00:31:30.510
Go and download a trace
of your application.

00:31:30.510 --> 00:31:31.260
Go under the hood.

00:31:31.260 --> 00:31:32.190
Poke around and see.

00:31:32.190 --> 00:31:34.380
Just check your assumptions.

00:31:34.380 --> 00:31:38.160
I'm always surprised every
time I go and take a capture.

00:31:38.160 --> 00:31:40.710
So there are a lot more
features within GAPID.

00:31:40.710 --> 00:31:43.262
Go and take a look at
the Github to I/O link.

00:31:43.262 --> 00:31:44.970
And we have a lot of
tutorials and guides

00:31:44.970 --> 00:31:47.800
on there on how you
can do extra things.

00:31:47.800 --> 00:31:51.960
GAPID supports Cardboard,
Daydream, and Vanilla Android

00:31:51.960 --> 00:31:54.025
apps as well, as well
as the Vulcan APIs

00:31:54.025 --> 00:31:56.400
that are going to become
popular over the next few years.

00:31:58.930 --> 00:32:02.029
So once you've developed your
AR app, and you've debugged it,

00:32:02.029 --> 00:32:03.570
and it's looking
exactly as you want,

00:32:03.570 --> 00:32:05.980
your next step is to get
it out into the world.

00:32:05.980 --> 00:32:08.940
So we'll talk a little
bit about that now.

00:32:08.940 --> 00:32:11.545
So with AR, there are
two types of applications

00:32:11.545 --> 00:32:14.170
that you should think about when
you're developing your AR app.

00:32:14.170 --> 00:32:17.340
There's AR optional
and AR required.

00:32:17.340 --> 00:32:20.190
So your AR optional apps,
they can be installed and run

00:32:20.190 --> 00:32:23.280
on devices that
don't support ARCore.

00:32:23.280 --> 00:32:25.290
But you have to go and
test for ARCore support

00:32:25.290 --> 00:32:27.960
if you want to create
an ARCore session.

00:32:27.960 --> 00:32:30.090
On the other side,
AR required means

00:32:30.090 --> 00:32:33.090
it can't be installed on the
device until you actually--

00:32:33.090 --> 00:32:36.350
unless that device
supports ARCore.

00:32:36.350 --> 00:32:39.590
So for those devices--

00:32:39.590 --> 00:32:41.590
for AR optional
device applications,

00:32:41.590 --> 00:32:44.110
the onus is on you to
go and write that code

00:32:44.110 --> 00:32:46.660
that checks to see if
ARCore is installed and also

00:32:46.660 --> 00:32:48.767
checks to see if the device
is ARCore compatible.

00:32:48.767 --> 00:32:50.350
So we'll go through
an example of what

00:32:50.350 --> 00:32:51.641
that code looks like right now.

00:32:54.040 --> 00:32:57.900
So we have a very
simple availability API.

00:32:57.900 --> 00:33:01.140
You go in Core,
check availability,

00:33:01.140 --> 00:33:05.250
and you wait until
that returns true.

00:33:05.250 --> 00:33:07.170
If your device supports
ARCore, then you

00:33:07.170 --> 00:33:10.630
can go and enable your UI widget
that takes you into your AR

00:33:10.630 --> 00:33:13.861
mode within your session.

00:33:13.861 --> 00:33:15.860
But before you go and
check if you have support,

00:33:15.860 --> 00:33:19.610
you should check whether ARCore
is actually installed or not.

00:33:19.610 --> 00:33:21.950
So we basically have
this simple API that

00:33:21.950 --> 00:33:26.482
is ARCore APK Request Install.

00:33:26.482 --> 00:33:28.190
That can tell you
whether it's installed.

00:33:28.190 --> 00:33:30.170
If it's not installed,
it can go and install it

00:33:30.170 --> 00:33:31.681
in the background for you.

00:33:31.681 --> 00:33:33.680
Once you've done all that,
you can go and create

00:33:33.680 --> 00:33:37.220
your ARCore session as normal.

00:33:37.220 --> 00:33:39.160
And so for AR
required applications,

00:33:39.160 --> 00:33:41.030
they're really, really simple.

00:33:41.030 --> 00:33:42.740
There's really nothing to do.

00:33:42.740 --> 00:33:44.980
We you go and do the white
listing on the Play Store

00:33:44.980 --> 00:33:48.280
for you so it will only
be available on devices

00:33:48.280 --> 00:33:50.399
that have ARCore support.

00:33:50.399 --> 00:33:51.940
ARCore is also
installed when the app

00:33:51.940 --> 00:33:53.650
is installed in these cases.

00:33:53.650 --> 00:33:56.230
And these new devices
are ARCore enabled,

00:33:56.230 --> 00:33:59.308
these devices will just be
whitelisted automatically.

00:34:03.330 --> 00:34:05.010
Just before we
finish up, we would

00:34:05.010 --> 00:34:10.340
love to get feedback
from you on this session.

00:34:10.340 --> 00:34:12.530
But just to recap,
we've shown you how

00:34:12.530 --> 00:34:14.280
to build your AR
applications really,

00:34:14.280 --> 00:34:17.697
really quickly with Sceneform
using assets from Poly.

00:34:17.697 --> 00:34:19.280
We've shown you how
to iterate quickly

00:34:19.280 --> 00:34:20.612
in the Android Emulator.

00:34:20.612 --> 00:34:22.820
Even if you don't have a
device, you can go and build

00:34:22.820 --> 00:34:25.310
ARCore applications right now.

00:34:25.310 --> 00:34:28.010
We've shown you how to debug
gnarly graphical issues

00:34:28.010 --> 00:34:30.669
in GAPID and understand
what you're scene is doing.

00:34:30.669 --> 00:34:32.960
And we've shown you how to
ship them on the Play Store.

00:34:32.960 --> 00:34:33.350
All right.

00:34:33.350 --> 00:34:34.016
Thanks everyone.

00:34:34.016 --> 00:34:42.330
[MUSIC PLAYING]

