WEBVTT
Kind: captions
Language: en

00:00:06.960 --> 00:00:07.960
&gt;&gt;Ankur: Hello.

00:00:07.960 --> 00:00:11.470
Welcome everyone to another APAC Developer
Office Hours.

00:00:11.470 --> 00:00:16.840
So for those of you guys that are joining
us for the first time, this is your opportunity

00:00:16.840 --> 00:00:21.340
to join us live and ask us questions on Android
development.

00:00:21.340 --> 00:00:25.980
You also have the opportunity to post questions
on Google moderator.

00:00:25.980 --> 00:00:31.330
So if you go to the plus Android developers
Google plus page, you will see this particular

00:00:31.330 --> 00:00:32.330
event.

00:00:32.330 --> 00:00:38.670
And you will be able to go follow the link
to developers.google.com slash live.

00:00:38.670 --> 00:00:39.851
You'll see our event there.

00:00:39.851 --> 00:00:43.320
And there's a moderator page at the bottom
of that event page.

00:00:43.320 --> 00:00:44.989
So you can post some questions.

00:00:44.989 --> 00:00:47.300
And we answer them live.

00:00:47.300 --> 00:00:50.600
So let me introduce our team for today.

00:00:50.600 --> 00:00:54.829
Firstly, we have Anirudh Dewani from Hyderabad.

00:00:54.829 --> 00:00:56.989
&gt;&gt;Anirudh: Hi Guys.

00:00:56.989 --> 00:01:00.820
&gt;&gt;Ankur: Then we have Tony Chen joining us
from Hong Kong.

00:01:00.820 --> 00:01:02.739
&gt;&gt;Tony: Hello everyone.

00:01:02.739 --> 00:01:07.980
&gt;&gt;Ankur: And I am Ankur Kotwal and I am joining
in from Sidney, Australia.

00:01:07.980 --> 00:01:11.780
So, unfortunately we weren't able to run a
Hangout last week.

00:01:11.780 --> 00:01:13.740
So there was a bit of a gap.

00:01:13.740 --> 00:01:17.430
But I'm really glad you could join us today.

00:01:17.430 --> 00:01:21.570
And we can resume normal scheduling.

00:01:21.570 --> 00:01:28.650
So, we've got a number of questions that have
been posted to the Google moderator page.

00:01:28.650 --> 00:01:34.530
And we're just gonna go through them one by
one.

00:01:34.530 --> 00:01:43.790
Let us try and do something a little bit tricky
and share our page.

00:01:43.790 --> 00:01:45.810
The moderator page.

00:01:45.810 --> 00:01:49.369
Let's see if we can get that to happen.

00:01:49.369 --> 00:01:53.380
And so let me go to screen share.

00:01:53.380 --> 00:01:56.100
And Android APAC Office Hours.

00:01:56.100 --> 00:01:57.110
&gt;&gt;Tony: Cool.

00:01:57.110 --> 00:01:58.560
I can see that.

00:01:58.560 --> 00:01:59.650
&gt;&gt;Ankur: Excellent.

00:01:59.650 --> 00:02:00.729
Good start.

00:02:00.729 --> 00:02:01.729
So.

00:02:01.729 --> 00:02:02.729
Wow.

00:02:02.729 --> 00:02:03.729
This is last week's one.

00:02:03.729 --> 00:02:04.859
So that's a little bit embarrassing.

00:02:04.859 --> 00:02:07.590
Let me flick to this week's one.

00:02:07.590 --> 00:02:11.560
And do the screen share again.

00:02:11.560 --> 00:02:12.810
Apologies for that.

00:02:12.810 --> 00:02:13.810
Alright.

00:02:13.810 --> 00:02:16.660
So here we are.

00:02:16.660 --> 00:02:19.940
Uh, let's just go through these one by one.

00:02:19.940 --> 00:02:23.450
First one is from Ryan from Edmonton.

00:02:23.450 --> 00:02:25.080
Tony would you like to take this one?

00:02:25.080 --> 00:02:26.320
&gt;&gt;Tony: Yeah, sure.

00:02:26.320 --> 00:02:32.940
So "What is the best practice recommended
method for implementing push notification

00:02:32.940 --> 00:02:35.970
in an enterprise app specifically?"

00:02:35.970 --> 00:02:38.360
So we have something called C2DM.

00:02:38.360 --> 00:02:42.610
And now we are officially launched it in Google
IO.

00:02:42.610 --> 00:02:45.690
What we now call Google cloud messaging.

00:02:45.690 --> 00:02:51.400
So it's really a reliable way to do push notifications.

00:02:51.400 --> 00:02:55.550
So we have documentation on our website.

00:02:55.550 --> 00:03:00.850
And I think if you Google "GCM" or Google
"Cloud messaging" you should be able to find

00:03:00.850 --> 00:03:02.790
the documentation.

00:03:02.790 --> 00:03:05.700
&gt;&gt;Ankur: Cool. [pause]

00:03:05.700 --> 00:03:11.520
&gt;&gt;Tony: Uh, do we have Ankur?

00:03:11.520 --> 00:03:17.340
&gt;&gt; Anirudh: I think we've lost Ankur.

00:03:17.340 --> 00:03:20.250
&gt;&gt;Tony: OK, so.

00:03:20.250 --> 00:03:24.650
Um, I guess Anirudh you can take the second
question before, um.

00:03:24.650 --> 00:03:25.730
OK, I thinkâ€”

00:03:25.730 --> 00:03:28.210
&gt;&gt;Anirudh: I think Ankur is back.

00:03:28.210 --> 00:03:29.760
&gt;&gt;Tony: Ankur is back.

00:03:29.760 --> 00:03:30.820
&gt;&gt;Ankur: Yeah, my apologies for that.

00:03:30.820 --> 00:03:32.590
I actually don't know what happened.

00:03:32.590 --> 00:03:34.730
But I'm back.

00:03:34.730 --> 00:03:36.060
So.

00:03:36.060 --> 00:03:37.060
Next question.

00:03:37.060 --> 00:03:44.500
"My question last week was not about the IO
2012 app but the issues on the spinner.

00:03:44.500 --> 00:03:48.750
The app is an example showing us that it is
not working and with source code provided

00:03:48.750 --> 00:03:49.750
to us.

00:03:49.750 --> 00:03:51.780
May I have a follow up this week?"

00:03:51.780 --> 00:03:54.630
So just some context about that.

00:03:54.630 --> 00:04:02.480
Last week we had, uh, we had a question about
using the spinner in the action bar.

00:04:02.480 --> 00:04:05.150
So you know, the content control.

00:04:05.150 --> 00:04:07.930
And [video cuts out] with the ViewPager.

00:04:07.930 --> 00:04:09.030
Hi there Andrew.

00:04:09.030 --> 00:04:10.870
&gt;&gt;Andrew: Hey, how's it going?

00:04:10.870 --> 00:04:11.870
&gt;&gt;Tony: Hi.

00:04:11.870 --> 00:04:13.500
&gt;&gt;Ankur: Good thank you.

00:04:13.500 --> 00:04:22.669
So you formerly had raised some questions
about basically saying, when I use my spinner,

00:04:22.669 --> 00:04:26.310
the spinner dropdown will change pages.

00:04:26.310 --> 00:04:32.040
But when I actually swipe across pages, it
doesn't update the spinner for me.

00:04:32.040 --> 00:04:34.979
So Anirudh, do you wanna take this one?

00:04:34.979 --> 00:04:41.479
&gt;&gt;Anirudh: Yeah, so I think the ViewPager
is not wired up to spinner.

00:04:41.479 --> 00:04:44.500
So that the ViewPager events have problems
getting back to spinner.

00:04:44.500 --> 00:04:50.750
So there's one thing you can do, is you can
try updating, so when you swipe and move to

00:04:50.750 --> 00:04:55.969
a certain fragment, you can try updating the
item from the spinner adapter.

00:04:55.969 --> 00:04:58.370
Which is basically what's backing up the spinner.

00:04:58.370 --> 00:05:01.560
You can try updating that fragment from the
spinner adapter.

00:05:01.560 --> 00:05:03.120
The position of the fragment.

00:05:03.120 --> 00:05:08.560
And then manually call spinner.set selection.
and provide that position to the spinner.

00:05:08.560 --> 00:05:12.689
So I think that should change up the spinner
view.

00:05:12.689 --> 00:05:17.550
But you may want to check if they went this,
again, flying back and tries to again, you

00:05:17.550 --> 00:05:19.080
know, switch to that fragment.

00:05:19.080 --> 00:05:23.620
In that case you can write and say "Hey, it's
a swipe so don't really change the fragment."

00:05:23.620 --> 00:05:26.139
&gt;&gt;Ankur: Fair enough.

00:05:26.139 --> 00:05:27.819
Thank you.

00:05:27.819 --> 00:05:33.660
Hey, Andrew, so we, since you're here live,
did you have any questions for us before we

00:05:33.660 --> 00:05:34.660
move on to another one?

00:05:34.660 --> 00:05:35.660
&gt;&gt;Andrew: Eh,not today, no.

00:05:35.660 --> 00:05:36.860
Just kind of listening in today.

00:05:36.860 --> 00:05:40.110
&gt;&gt;Ankur: OK, no worries.

00:05:40.110 --> 00:05:44.400
I'll just screen, share again the set of questions.

00:05:44.400 --> 00:05:50.150
So, Abhi had also asked us some questions
last week.

00:05:50.150 --> 00:05:56.219
And we didn't have the answers available for
him live at the time.

00:05:56.219 --> 00:06:00.340
So I asked him afterwards to post them on
the moderator.

00:06:00.340 --> 00:06:02.889
So that we could answer them in the next Office
Hours.

00:06:02.889 --> 00:06:04.930
So let's look at his question.

00:06:04.930 --> 00:06:07.139
He said, "Firstly, thanks for the follow up
on this.

00:06:07.139 --> 00:06:08.449
I had two questions.

00:06:08.449 --> 00:06:12.129
What is the optimal way to get the existing
fragment from ViewPager."

00:06:12.129 --> 00:06:14.360
That's question number one.

00:06:14.360 --> 00:06:20.630
And question number two is, "What is the difference
between ViewAnimator and ViewFlipper?"

00:06:20.630 --> 00:06:21.680
OK.

00:06:21.680 --> 00:06:23.099
So first question.

00:06:23.099 --> 00:06:26.969
What's the optimum way to get the existing
fragment from the ViewPager?

00:06:26.969 --> 00:06:33.120
The ViewPager can actually give you, you can
get the ID of your fragment from the ViewPager.

00:06:33.120 --> 00:06:35.340
That's the one that's currently being displayed.

00:06:35.340 --> 00:06:40.159
And then you can use your fragment manager
to basically go and pull that fragment itself.

00:06:40.159 --> 00:06:46.560
Now, remember Abhi had also had some questions
around, well if I've already instantiated

00:06:46.560 --> 00:06:51.840
a bunch of fragments, how do I ask the ViewPager
to go return me those fragments?

00:06:51.840 --> 00:06:54.110
Now you have to be a little bit careful here.

00:06:54.110 --> 00:07:01.830
Because the way the ViewPager works is that
it actually will instantiate those fragments

00:07:01.830 --> 00:07:03.059
when it needs to.

00:07:03.059 --> 00:07:05.919
And it'll keep bits and pieces of them around.

00:07:05.919 --> 00:07:13.650
Depending on whether you're using a fragment
page adapter or a fragment state page adapter.

00:07:13.650 --> 00:07:18.409
So there's two ways you can actually try and
fetch you know, these fragments that are being

00:07:18.409 --> 00:07:19.409
pre-instantiated.

00:07:19.409 --> 00:07:25.180
The first is that when you instantiate the
fragment, add it to your fragment manager

00:07:25.180 --> 00:07:26.330
using a tag.

00:07:26.330 --> 00:07:27.330
You know.

00:07:27.330 --> 00:07:32.120
Give it a name. and then you later on, you
can query the fragment manager to go return

00:07:32.120 --> 00:07:34.419
that particular fragment.

00:07:34.419 --> 00:07:38.469
The other way you can do it is that when you
instantiate your fragments, you can track

00:07:38.469 --> 00:07:41.569
it in your own array or vector.

00:07:41.569 --> 00:07:42.569
Or map.

00:07:42.569 --> 00:07:43.569
Yourself.

00:07:43.569 --> 00:07:44.569
And hold on to it there.

00:07:44.569 --> 00:07:47.749
So when you need to go and fetch it, you can
go and return the one that's already been

00:07:47.749 --> 00:07:48.749
instantiated.

00:07:48.749 --> 00:07:51.310
So that's question one.

00:07:51.310 --> 00:07:56.460
Question two is, "What is the difference between
the ViewFlipper and the ViewAnimator?"

00:07:56.460 --> 00:08:00.690
Well, the ViewAnimator is actually the base
class for the ViewFlipper.

00:08:00.690 --> 00:08:05.309
So the ViewFlipper is a specialized version
of the ViewAnimator.

00:08:05.309 --> 00:08:10.539
And it's really there so that you can have
a set of views that you can really go from

00:08:10.539 --> 00:08:11.979
one to the next to the next.

00:08:11.979 --> 00:08:14.229
And have some sort of animation playing.

00:08:14.229 --> 00:08:19.680
So the ViewAnimator allows you to specify
things like which particular animation you

00:08:19.680 --> 00:08:24.580
want to use when you transition from one view
to the next.

00:08:24.580 --> 00:08:30.800
ViewFlipper itself actually specializes in
the sense that the main thing that it can

00:08:30.800 --> 00:08:36.710
do is that you can actually say "Hey, I want
a specific time interval.

00:08:36.710 --> 00:08:38.510
Go to the next view automatically."

00:08:38.510 --> 00:08:43.760
So you could say maybe every five seconds,
it might be a photo gallery app.

00:08:43.760 --> 00:08:44.760
Right?

00:08:44.760 --> 00:08:45.920
So you might be wanting to show a slide show.

00:08:45.920 --> 00:08:48.800
So you can say every five seconds, go to the
next view.

00:08:48.800 --> 00:08:55.760
So you know, the view flipper just kind of
provides some of that nice stuff for you in

00:08:55.760 --> 00:08:58.450
terms of the timing.

00:08:58.450 --> 00:09:01.630
Before we just wrap that question up, there
is actually something called a ViewSwitcher

00:09:01.630 --> 00:09:03.180
as well.

00:09:03.180 --> 00:09:09.000
The ViewSwitcher also has a base class in
ViewAnimator.

00:09:09.000 --> 00:09:13.000
The ViewSwitcher is special in that it only
supports two views.

00:09:13.000 --> 00:09:16.670
Whereas the ViewFlipper supports two or more.

00:09:16.670 --> 00:09:21.230
Now the reason you might use a ViewSwitcher
is literally when you're just toggling back

00:09:21.230 --> 00:09:22.550
and forth between those two views.

00:09:22.550 --> 00:09:26.840
But the ViewSwitcher also allows you to specify
your own view factory.

00:09:26.840 --> 00:09:32.900
So by doing that you can choose how you instantiate
it, and use a factory pattern to implement

00:09:32.900 --> 00:09:34.580
it that way.

00:09:34.580 --> 00:09:35.830
Alright.

00:09:35.830 --> 00:09:37.700
Thanks for the question Abhi.

00:09:37.700 --> 00:09:43.830
Just switch back to the questions and we have
Jack.

00:09:43.830 --> 00:09:49.510
"When will Google revise the API for serving
Maps on fragments?

00:09:49.510 --> 00:09:53.750
Right now we have to resort to workarounds
using MapActivity and this makes the code

00:09:53.750 --> 00:09:55.470
ugly."

00:09:55.470 --> 00:09:59.590
To be honest, this is a question that's incredibly
popular.

00:09:59.590 --> 00:10:01.250
We get it all the time.

00:10:01.250 --> 00:10:06.450
We don't have anything to announce but it's
something that we, the engineering team is

00:10:06.450 --> 00:10:07.640
certainly looking at.

00:10:07.640 --> 00:10:10.480
But there's just, there's no announcements
around this.

00:10:10.480 --> 00:10:18.020
So right now you are stuck with using the
MapActivity.

00:10:18.020 --> 00:10:19.770
OK.

00:10:19.770 --> 00:10:23.270
Ah. [pause]

00:10:23.270 --> 00:10:25.310
Next question.

00:10:25.310 --> 00:10:26.310
From Vimal.

00:10:26.310 --> 00:10:33.850
"What is the optimal way for adding multiple
fragments under a single tab in the tab view

00:10:33.850 --> 00:10:37.470
with back track functionality on the back
button?

00:10:37.470 --> 00:10:42.830
Right now I am facing an issue with the back
button when there are two fragments loaded

00:10:42.830 --> 00:10:45.620
under single tab for two tabs."

00:10:45.620 --> 00:10:46.760
Hmm.

00:10:46.760 --> 00:10:47.910
OK.

00:10:47.910 --> 00:10:50.280
So I'm trying to make sense of this.

00:10:50.280 --> 00:10:51.280
Tony, do you?

00:10:51.280 --> 00:10:52.280
Tony or Anirudh?

00:10:52.280 --> 00:10:54.680
Do you guys wanna chime in on this one at
all?

00:10:54.680 --> 00:11:02.290
&gt;&gt;Tony: Well, one thing about the back button
is for sure you need to add when you add those

00:11:02.290 --> 00:11:07.070
new fragments you need to have them put into
a transaction.

00:11:07.070 --> 00:11:12.410
So that when the user hits the back button,
it will roll back all the changes.

00:11:12.410 --> 00:11:17.780
That I think, if that's, if that's been Vimal's
question.

00:11:17.780 --> 00:11:20.220
So, anything to add to that?

00:11:20.220 --> 00:11:24.370
&gt;&gt;Anirudh: Uh, I didn't quite get the last
statement of the question either.

00:11:24.370 --> 00:11:25.370
&gt;&gt;Tony: Yeah.

00:11:25.370 --> 00:11:32.070
&gt;&gt;Anirudh: So, I mean you have APIs available
of how to backstack to how you wanna manage.

00:11:32.070 --> 00:11:36.660
And only that something that goes through
a comment will actually go into the backstack.

00:11:36.660 --> 00:11:37.960
So you can press back on that.

00:11:37.960 --> 00:11:39.620
To go to the previous [unintelligible].

00:11:39.620 --> 00:11:41.330
&gt;&gt;Ankur: Yeah.

00:11:41.330 --> 00:11:46.920
And there's also overrides that you can implement
in your activity to say, on back button pressed

00:11:46.920 --> 00:11:47.920
as well.

00:11:47.920 --> 00:11:49.700
So if you wanna specialize even further.

00:11:49.700 --> 00:11:54.980
Just keep in mind that that override came
in to API ten, I wanna say.

00:11:54.980 --> 00:11:59.390
But it might have been a different API version.

00:11:59.390 --> 00:12:02.640
So, but certainly add to backstackers there.

00:12:02.640 --> 00:12:06.570
The only other thing that I'll add is that
we've made this a little bit nicer in Jellybean.

00:12:06.570 --> 00:12:12.780
You can now specify backstack navigation behavior
through XML.

00:12:12.780 --> 00:12:18.270
So in your layout files you can actually,
there's an XML attribute where you can say,

00:12:18.270 --> 00:12:23.130
that basically what you're saying is when
you're on this particular element and you

00:12:23.130 --> 00:12:24.740
hit back, which one should it go to?

00:12:24.740 --> 00:12:27.060
Which view should it go back to?

00:12:27.060 --> 00:12:28.490
OK.

00:12:28.490 --> 00:12:31.530
Um, back to the questions.

00:12:31.530 --> 00:12:34.120
Um, alright.

00:12:34.120 --> 00:12:41.370
"How do I make my hardware device," and they
said HTC, "available for testing instead of

00:12:41.370 --> 00:12:45.890
using the emulator, without sending my app
to the Android market?"

00:12:45.890 --> 00:12:49.030
And I guess this person means the PlayStore
now.

00:12:49.030 --> 00:12:50.950
Tony, do you wanna grab this one?

00:12:50.950 --> 00:12:52.510
&gt;&gt;Tony: Yeah, sure.

00:12:52.510 --> 00:12:58.110
So in general you can do testing development,
using Eclipse.

00:12:58.110 --> 00:13:00.300
And using the ATT plug-in.

00:13:00.300 --> 00:13:08.200
So for testing using a real phone, you need
to enable USB debugging on your phone.

00:13:08.200 --> 00:13:11.200
I wonder whether people can see this or not?

00:13:11.200 --> 00:13:13.130
&gt;&gt;Ankur: Yeah, we can see that.

00:13:13.130 --> 00:13:19.640
&gt;&gt;Tony: Yes, it's under setting so um, there
is a option called "enable USB debugging."

00:13:19.640 --> 00:13:28.600
So once you enable that, you just plug your
phone through USB to your laptop or desktop.

00:13:28.600 --> 00:13:36.330
One thing about window involvement, you may
need to install a driver.

00:13:36.330 --> 00:13:37.330
For that.

00:13:37.330 --> 00:13:43.320
And, other than that, you can just use Eclipse
hooking USB debug through your real phone.

00:13:43.320 --> 00:13:44.320
So.

00:13:44.320 --> 00:13:45.510
&gt;&gt;Ankur: Cool.

00:13:45.510 --> 00:13:46.970
Thanks Tony.

00:13:46.970 --> 00:13:47.970
Alright.

00:13:47.970 --> 00:13:53.320
The next question is from Abhi again.

00:13:53.320 --> 00:13:59.700
And I intentionally didn't cover in my previous
answer to him, cover a particular topic.

00:13:59.700 --> 00:14:01.450
Because I was waiting for this question.

00:14:01.450 --> 00:14:07.290
And it's basically, "What's the difference
between the FragmentPagerAdapter and the FragmentStatePagerAdapter?

00:14:07.290 --> 00:14:09.870
And also when should either of them be used?"

00:14:09.870 --> 00:14:18.260
So basically what it is is that the FragmentPagerAdapter,
when the fragments are no longer required,

00:14:18.260 --> 00:14:24.670
what it will do is relinquish the view hierarchy
for that fragment.

00:14:24.670 --> 00:14:26.680
But it'll keep the fragment around.

00:14:26.680 --> 00:14:31.860
In the case of the FragmentStatePagerAdapter,
what it will do is actually call "save state"

00:14:31.860 --> 00:14:35.550
on the fragment and it will release the fragment
itself.

00:14:35.550 --> 00:14:41.240
So when the fragment, again, needs to be re-instantiated,
what it will do is restore the state that

00:14:41.240 --> 00:14:43.770
it saved earlier.

00:14:43.770 --> 00:14:47.360
Now, that's a reasonably subtle difference.

00:14:47.360 --> 00:14:52.970
But basically what it is, it's about, it's
a trade-off between performance versus memory

00:14:52.970 --> 00:14:54.320
requirements.

00:14:54.320 --> 00:14:55.730
Memory usage, sorry.

00:14:55.730 --> 00:15:01.510
So, a fragment pager adapter, because it only
relinquishes the view hierarchy, it stays

00:15:01.510 --> 00:15:02.820
resident in your app.

00:15:02.820 --> 00:15:05.220
So it's obviously consuming more memory.

00:15:05.220 --> 00:15:09.860
But it means that when that fragment is required
again, it has to do less work to go and show

00:15:09.860 --> 00:15:11.870
that fragment.

00:15:11.870 --> 00:15:14.480
So that's one that performs slightly better.

00:15:14.480 --> 00:15:18.080
But because it consumes more memory, it's
less scalable.

00:15:18.080 --> 00:15:20.840
And that's where the FragmentStatePagerAdapter
comes in.

00:15:20.840 --> 00:15:25.730
Where if you have lots and lots of fragments,
you're better off using the StatePagerAdapter

00:15:25.730 --> 00:15:29.200
which is going to be more aggressive about
relinquishing memory.

00:15:29.200 --> 00:15:30.520
So it's a bit of a trade-off.

00:15:30.520 --> 00:15:33.790
See how many fragments you're expecting to
have in your app.

00:15:33.790 --> 00:15:36.320
I wouldn't even say that there's a magic number.

00:15:36.320 --> 00:15:37.660
But have a look at it.

00:15:37.660 --> 00:15:43.060
I can say if you've got more than a handful
of fragments that you're displaying then move

00:15:43.060 --> 00:15:46.180
to the StatePagerAdapter.

00:15:46.180 --> 00:15:50.630
Otherwise stick with just the FragmentPagerAdapter.

00:15:50.630 --> 00:15:53.180
OK.

00:15:53.180 --> 00:15:54.370
Next question.

00:15:54.370 --> 00:16:00.050
Uh, "Considering I've been living under a
rock for the past six years," Gee, that sounds

00:16:00.050 --> 00:16:01.050
very uncomfortable.

00:16:01.050 --> 00:16:07.090
But "How, or where do you guys recommend I
get started on developing for Android devices?"

00:16:07.090 --> 00:16:11.470
Anirudh, how about you take this one.

00:16:11.470 --> 00:16:12.470
[silence]

00:16:12.470 --> 00:16:15.550
You're on mute, Anirudh.

00:16:15.550 --> 00:16:16.550
[laughs]

00:16:16.550 --> 00:16:18.000
&gt;&gt;Anirudh: Alright.

00:16:18.000 --> 00:16:23.790
So, we have plenty of documentation and a
lot of resources on developer.Android.com.

00:16:23.790 --> 00:16:24.790
You can go there.

00:16:24.790 --> 00:16:27.850
We have some Android U classes that give you
basics.

00:16:27.850 --> 00:16:30.810
And just a lot of stuff on what Android is.

00:16:30.810 --> 00:16:36.120
And the framework components on your own time
. And the entire library is available to you.

00:16:36.120 --> 00:16:40.540
So I think just going to developer.Android.com
is a good start.

00:16:40.540 --> 00:16:45.750
Also we have plenty of videos on YouTube and
there are a lot of resources around.

00:16:45.750 --> 00:16:47.100
Which you can check out.

00:16:47.100 --> 00:16:50.310
I see, I think that will be a good place to
start.

00:16:50.310 --> 00:16:52.980
That would be our developer site.

00:16:52.980 --> 00:17:00.050
&gt;&gt;Tony: Yeah, adding to that, I think in terms
of designing Android style application, we

00:17:00.050 --> 00:17:08.560
have under developer.Android.com, we have
a specific session called slash design.

00:17:08.560 --> 00:17:14.240
So it has tons of information about how to
design an app with the Android style application

00:17:14.240 --> 00:17:15.240
as well.

00:17:15.240 --> 00:17:17.199
So make sure you check that out.

00:17:17.199 --> 00:17:19.059
In terms of online resource, stackoverflow.

00:17:19.059 --> 00:17:23.079
There are a lot of questions answered.

00:17:23.079 --> 00:17:25.350
Android questions get answered there.

00:17:25.350 --> 00:17:30.669
So you hopefully can find a lot of answers
from stackoverflow as well.

00:17:30.669 --> 00:17:37.940
&gt;&gt;Ankur: Yeah, look, I just shared the entry
point for our developer.Android.com training

00:17:37.940 --> 00:17:38.940
site.

00:17:38.940 --> 00:17:44.050
And you know, over there we literally show
you how to build your apps from the ground

00:17:44.050 --> 00:17:45.429
up.

00:17:45.429 --> 00:17:52.539
So you know, the only step that you need to
take prior to this is setting up your development

00:17:52.539 --> 00:17:53.539
environment.

00:17:53.539 --> 00:17:57.530
And again, if you go to the "tools" section,
you'll find it there.

00:17:57.530 --> 00:17:59.980
And you need some familiarity with Java.

00:17:59.980 --> 00:18:07.419
The rest of it, the Android side of it, is
you can learn about from this page here.

00:18:07.419 --> 00:18:15.450
So this is the place where I recommend everyone
goes to basically start learning.

00:18:15.450 --> 00:18:17.470
OK.

00:18:17.470 --> 00:18:23.610
Now we have Hemmon on the Hangout here.

00:18:23.610 --> 00:18:26.830
Hemmon, have you got access to a mic?

00:18:26.830 --> 00:18:27.830
[silence]

00:18:27.830 --> 00:18:29.820
No, OK.

00:18:29.820 --> 00:18:38.720
So he's chatting and he's asking us some questions
about "Is there an easy way for remote debugging?"

00:18:38.720 --> 00:18:41.960
and it looks like Anirudh has been working
with him, so Anirudh, do you wanna just walk

00:18:41.960 --> 00:18:43.840
us through the question and the answer?

00:18:43.840 --> 00:18:49.659
&gt;&gt;Anirudh: So the question is, and I'm still
trying to understand what's the involvement

00:18:49.659 --> 00:18:51.919
that Hemmon has there.

00:18:51.919 --> 00:18:56.462
So from what I can gather, he has a Linux
box.

00:18:56.462 --> 00:18:59.830
And the device is available over the internet.

00:18:59.830 --> 00:19:02.200
So was explaining, there is DDMS and ADB.

00:19:02.200 --> 00:19:05.710
These are some of the tools that help you
connect to devices.

00:19:05.710 --> 00:19:09.249
And ADB can work over S-search with call forwarding.

00:19:09.249 --> 00:19:11.379
That's one way to develop a remote device.

00:19:11.379 --> 00:19:17.710
So you may have your device attached to a
uh, laptop near you.

00:19:17.710 --> 00:19:21.440
And your call base lives, or your APK lives
in a different machine.

00:19:21.440 --> 00:19:24.720
And you can use ADB or S-search to deploy
remotely or debut.

00:19:24.720 --> 00:19:30.809
There is also ADB or TCP which allows you
to connect to a device over the same subnet.

00:19:30.809 --> 00:19:39.500
And ADB or TCP I think requires you to plug
in the cable first, and then say ADB mode

00:19:39.500 --> 00:19:40.500
is TCP.

00:19:40.500 --> 00:19:41.999
And then you can plug the cable out.

00:19:41.999 --> 00:19:44.760
And then use the IP address to connect.

00:19:44.760 --> 00:19:49.299
And if there are, if there is something you
wanna try about your environment, please go

00:19:49.299 --> 00:19:52.820
ahead and we can also base on that.

00:19:52.820 --> 00:19:56.500
&gt;&gt;Ankur: Yeah, very cool.

00:19:56.500 --> 00:19:58.570
So he said, "It's clear."

00:19:58.570 --> 00:20:00.009
OK, that's fantastic.

00:20:00.009 --> 00:20:01.009
Next question.

00:20:01.009 --> 00:20:05.990
"What is your stand on native versus HTML
5 apps?"

00:20:05.990 --> 00:20:08.309
Again from Hemmon live.

00:20:08.309 --> 00:20:10.580
Tony would you like to take this one?

00:20:10.580 --> 00:20:17.409
&gt;&gt;Tony: I guess we really, it really depends
on your applications.

00:20:17.409 --> 00:20:23.149
Like, what kind of features you need for your
particular application.

00:20:23.149 --> 00:20:31.929
So the strength of like native apps is they
have a tighter integration access to sensors

00:20:31.929 --> 00:20:33.850
in your phone.

00:20:33.850 --> 00:20:36.799
And which, HTML5 is catching up.

00:20:36.799 --> 00:20:41.280
But I think it's still like native apps can
do a better job internal accessing.

00:20:41.280 --> 00:20:43.570
Like different sensor on your phone.

00:20:43.570 --> 00:20:50.120
If that's what you need, in your particular
application, probably you may want to consider

00:20:50.120 --> 00:20:51.940
more on native apps.

00:20:51.940 --> 00:21:00.590
But HTML5 avocation of the benefit is, you
can reuse what you develop already, or call

00:21:00.590 --> 00:21:04.040
for your, for desktop applications.

00:21:04.040 --> 00:21:12.299
So you can use, we use a lot of the web stuff
you have already, through web view.

00:21:12.299 --> 00:21:16.390
So I guess it really depends on your environment.

00:21:16.390 --> 00:21:21.909
Or what you already have and what kind of
features you are planning to add to your application.

00:21:21.909 --> 00:21:28.880
&gt;&gt;Ankur: Yeah, I might just add on that, that,
um, there is no one size fits all.

00:21:28.880 --> 00:21:35.460
So when you ask this sort of question, I can't
say that it's very clear cut that you should

00:21:35.460 --> 00:21:37.330
go one way or another.

00:21:37.330 --> 00:21:38.659
Depends what's important to you.

00:21:38.659 --> 00:21:41.330
Depends what you can put your priorities on.

00:21:41.330 --> 00:21:44.919
Certainly native apps will tend to be very
responsive.

00:21:44.919 --> 00:21:47.440
They'll tend to be faster.

00:21:47.440 --> 00:21:52.409
I mean, typical web technologies tend to refresh
the whole page.

00:21:52.409 --> 00:21:53.610
And that sort of thing.

00:21:53.610 --> 00:21:57.539
So you can certainly put the work into your
web app.

00:21:57.539 --> 00:22:01.690
To make it give a native experience.

00:22:01.690 --> 00:22:07.740
Or at least give an experience that the user
is, feels is native.

00:22:07.740 --> 00:22:10.809
But it depends where you can commit those
resources.

00:22:10.809 --> 00:22:17.960
&gt;&gt;Tony: Yeah, I guess another key thing is
like, make sure you have an Android style

00:22:17.960 --> 00:22:18.960
app.

00:22:18.960 --> 00:22:21.320
I mean, doesn't matter what technology you're
using.

00:22:21.320 --> 00:22:25.789
Make sure the user experience have a good
Android user experience.

00:22:25.789 --> 00:22:27.630
I think that's also very important.

00:22:27.630 --> 00:22:32.150
&gt;&gt;Ankur: Yeah, so I guess Tony, what you're
referring to are things like the action bar.

00:22:32.150 --> 00:22:37.529
Better uses of the back button.

00:22:37.529 --> 00:22:42.119
And those sorts of things that really give
it an Android look and feel.

00:22:42.119 --> 00:22:43.119
&gt;&gt;Tony: Yeah.

00:22:43.119 --> 00:22:44.980
Even the choice of graphics.

00:22:44.980 --> 00:22:45.980
Like icons.

00:22:45.980 --> 00:22:51.640
Like, we have our own style of buttons and
things.

00:22:51.640 --> 00:22:57.490
So make sure you, you build an Android style
application in our platform.

00:22:57.490 --> 00:22:59.169
&gt;&gt;Ankur: Yeah.

00:22:59.169 --> 00:23:00.169
Cool.

00:23:00.169 --> 00:23:01.169
Alright.

00:23:01.169 --> 00:23:02.529
Thank you.

00:23:02.529 --> 00:23:04.990
So, final question on the Moderator.

00:23:04.990 --> 00:23:11.190
Is, "How do I take a picture of the content
of the webview completely?"

00:23:11.190 --> 00:23:16.309
And he's posted a, well, it could be a she.

00:23:16.309 --> 00:23:22.179
They've posted a link to a stackoverflow page
which is about programatically taking the

00:23:22.179 --> 00:23:24.519
screenshot of a webview.

00:23:24.519 --> 00:23:28.149
When that webview is rendering some flash
content.

00:23:28.149 --> 00:23:37.129
And what the stackoverflow thread said was
that it, they were getting effectively black

00:23:37.129 --> 00:23:41.940
boxes where the flash content lived.

00:23:41.940 --> 00:23:45.049
I actually don't know of a way to do this.

00:23:45.049 --> 00:23:48.360
I don't know if Anirudh or Tony know how to
do this.

00:23:48.360 --> 00:23:52.870
But I don't know of a way to capture that
flash content when you take a screenshot.

00:23:52.870 --> 00:23:56.210
&gt;&gt;Anirudh: Yeah, I have no clue either.

00:23:56.210 --> 00:23:57.210
&gt;&gt;Tony: No.

00:23:57.210 --> 00:23:59.929
&gt;&gt;Ankur: yeah, sorry about that.

00:23:59.929 --> 00:24:06.679
Flash is one of those specialized pieces of
technology and I suspect that you know, through

00:24:06.679 --> 00:24:12.590
various optimizations it's rendering in ways
that might make it harder for you to be able

00:24:12.590 --> 00:24:16.299
to grab these screenshots.

00:24:16.299 --> 00:24:20.289
I would suggest have a look at what happens
when you do it through DDMS.

00:24:20.289 --> 00:24:22.240
You know, through the Eclipse tools.

00:24:22.240 --> 00:24:26.570
If you can get away with that, then that might
be the solution you're looking for.

00:24:26.570 --> 00:24:30.299
It's certainly not programmatic there, thought.

00:24:30.299 --> 00:24:36.419
Um, now Hemmon wants to start a flame war
about whether HTML5 is gonna beat flash out

00:24:36.419 --> 00:24:37.820
in the long term.

00:24:37.820 --> 00:24:45.509
I think we try to avoid controversial topics,
Hemmon, so, it's a matter of opinion.

00:24:45.509 --> 00:24:48.929
Who knows?

00:24:48.929 --> 00:24:54.600
Um, I'm just going to go back and check if
there are any more questions that have been

00:24:54.600 --> 00:24:58.059
posted on the event.

00:24:58.059 --> 00:25:01.429
Doesn't look like it though.

00:25:01.429 --> 00:25:08.809
So is there anyone else that's live that would,
that has any questions?

00:25:08.809 --> 00:25:10.210
[pause]

00:25:10.210 --> 00:25:11.610
No?

00:25:11.610 --> 00:25:13.010
Alright.

00:25:13.010 --> 00:25:18.519
Well, in that case, it's a fairly short one
today.

00:25:18.519 --> 00:25:20.190
Thanks for joining us.

00:25:20.190 --> 00:25:21.190
Thanks for tuning in.

00:25:21.190 --> 00:25:23.130
we'll be back again next time.

00:25:23.130 --> 00:25:24.130
Next week.

00:25:24.130 --> 00:25:25.130
Same time.

00:25:25.130 --> 00:25:26.980
And we look forward to seeing you then.

00:25:26.980 --> 00:25:31.090
We'll obviously post the Moderator link beforehand.

00:25:31.090 --> 00:25:32.730
So make sure you get those questions in.

00:25:32.730 --> 00:25:34.070
We had some interesting questions today.

00:25:34.070 --> 00:25:35.669
Some fairly technical ones.

00:25:35.669 --> 00:25:37.710
So keep them coming.

00:25:37.710 --> 00:25:40.200
And on that note, thank you very much.

00:25:40.200 --> 00:25:41.200
See you later.

00:25:41.200 --> 00:25:42.289
&gt;&gt;Anirudh: See you.

00:25:42.289 --> 00:25:43.399
&gt;&gt;Tony: Thank you.

00:25:43.399 --> 00:25:44.399
&gt;&gt;Ankur: Bye.

00:25:44.399 --> 00:25:44.879
&gt;&gt;Tony: Bye.

