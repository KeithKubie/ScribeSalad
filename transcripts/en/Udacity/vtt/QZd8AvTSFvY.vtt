WEBVTT
Kind: captions
Language: en

00:00:00.410 --> 00:00:02.810
The answer is the auto save method.

00:00:02.810 --> 00:00:05.010
It will save every few seconds.

00:00:05.010 --> 00:00:08.600
But, how can we call
a method with a delay?

00:00:08.600 --> 00:00:11.470
Grand Central Dispatch is your friend.

00:00:11.470 --> 00:00:14.870
If we look at the save method
in our core data class,

00:00:14.870 --> 00:00:19.150
the first thing you'll notice is
that it doesn't necessarily save.

00:00:19.150 --> 00:00:23.550
It will always check the context and
see if there is anything to save, and

00:00:23.550 --> 00:00:25.060
if there is, then it saves.

00:00:26.160 --> 00:00:31.480
This means we only perform the save
operation with all its dependencies,

00:00:31.480 --> 00:00:35.940
validating, deleting,
etc if it makes sense.

00:00:35.940 --> 00:00:39.720
Now we're going to add a new
method called autosave.

00:00:39.720 --> 00:00:42.850
We still have no idea how to
implement it, but who cares?

00:00:42.850 --> 00:00:46.748
When you don't know what to do,
just do something and see what happens.

00:00:46.748 --> 00:00:51.748
A good method to organize your thoughts
is to break down the complex task into

00:00:51.748 --> 00:00:55.730
smaller ones, then write them
down as a series of comments.

00:00:55.730 --> 00:00:58.630
We'll find out the code
we need along the way.

00:00:58.630 --> 00:00:59.550
So let's get started.

00:01:00.790 --> 00:01:04.300
The first part is easy,
it's just calling the save method.

00:01:04.300 --> 00:01:09.120
The second part seems more complex,
but doc gave me a tip.

00:01:09.120 --> 00:01:11.450
He told me to use GCD.

00:01:11.450 --> 00:01:13.090
Check out the documentation and

00:01:13.090 --> 00:01:17.720
see if you can find a function in GCD
that allows us to delay something.

00:01:17.720 --> 00:01:18.940
Go on, I'll wait.

00:01:20.480 --> 00:01:24.330
Yes, there is a function
called dispatch after.

00:01:24.330 --> 00:01:28.890
It takes a closure and runs it after
a certain amount of milliseconds.

00:01:28.890 --> 00:01:34.360
If we call AutoSave inside that closure,
we have what we're looking for.

00:01:34.360 --> 00:01:39.730
A loop that saves, waits for
a certain time, and then saves again.

00:01:39.730 --> 00:01:44.740
Just keep in mind that we're not
really saving every say five seconds.

00:01:44.740 --> 00:01:45.940
It's even better.

00:01:45.940 --> 00:01:50.010
We check every five seconds if
there is anything worth saving, and

00:01:50.010 --> 00:01:51.830
only then we save.

00:01:51.830 --> 00:01:53.840
Let's get the code for this one.

00:01:53.840 --> 00:01:58.478
Before moving on, please make sure
to check out the documentation for

00:01:58.478 --> 00:02:03.540
dispatch_after and dispatch_time, then
make sure you understand this code, and

00:02:03.540 --> 00:02:07.210
then call autoSave, while passing 60,

00:02:07.210 --> 00:02:10.419
that would be one minute
when your app launches.

00:02:10.419 --> 00:02:13.170
This way you'll be auto
saving every one minute.

