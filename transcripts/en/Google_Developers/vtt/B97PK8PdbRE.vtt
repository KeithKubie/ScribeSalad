WEBVTT
Kind: captions
Language: en

00:00:08.058 --> 00:00:10.064
FRANCESC CAMPOY
FLORES: Hi, everybody.

00:00:10.064 --> 00:00:10.980
Welcome to this video.

00:00:10.980 --> 00:00:14.660
We're going to be talking today
about Pythonistas experience

00:00:14.660 --> 00:00:15.910
learning Go.

00:00:15.910 --> 00:00:18.070
So I'm Francesc Campoy Flores.

00:00:18.070 --> 00:00:20.675
I'm a developer programs
engineer for the Go team

00:00:20.675 --> 00:00:22.310
at Google in Mountain View.

00:00:22.310 --> 00:00:24.256
BRIAN DORSEY: And
I'm Brian Dorsey.

00:00:24.256 --> 00:00:25.880
I'm also a developer
programs engineer.

00:00:25.880 --> 00:00:28.410
But I'm on cloud
and don't actually

00:00:28.410 --> 00:00:29.890
have much experience with Go.

00:00:29.890 --> 00:00:32.910
FRANCESC CAMPOY
FLORES: OK, so you

00:00:32.910 --> 00:00:34.680
decided to learn
Go some months ago.

00:00:34.680 --> 00:00:36.336
What brought you
to that decision?

00:00:36.336 --> 00:00:37.210
BRIAN DORSEY: Gotcha.

00:00:37.210 --> 00:00:39.170
So I've been using
Python for a long time.

00:00:39.170 --> 00:00:40.250
I love it.

00:00:40.250 --> 00:00:45.570
And-- but there's a few areas
where I think, in particular,

00:00:45.570 --> 00:00:49.000
like distributing command
line apps and kind

00:00:49.000 --> 00:00:53.310
of-- there's-- and
so, in particular,

00:00:53.310 --> 00:00:55.810
that was the one thing that I
was really looking around for.

00:00:55.810 --> 00:00:58.830
And I was looking
around languages

00:00:58.830 --> 00:01:01.510
and Go looked really,
really interesting.

00:01:01.510 --> 00:01:06.610
And in particular, having a
real baked-in concurrency model

00:01:06.610 --> 00:01:07.850
was really appealing.

00:01:07.850 --> 00:01:11.550
Because I have to
admit, I fear threads.

00:01:11.550 --> 00:01:13.554
FRANCESC CAMPOY FLORES:
Threads are-- yeah--

00:01:13.554 --> 00:01:14.970
difficult to
understand sometimes.

00:01:14.970 --> 00:01:15.980
Yes.

00:01:15.980 --> 00:01:21.260
So in are more generic
question, why [INAUDIBLE]

00:01:21.260 --> 00:01:22.337
Pythonista learn Go?

00:01:22.337 --> 00:01:23.170
BRIAN DORSEY: Right.

00:01:23.170 --> 00:01:26.100
So definitely, as I mentioned,
the concurrency model

00:01:26.100 --> 00:01:28.230
is really appealing.

00:01:28.230 --> 00:01:31.140
And there's a lot of different
options in the Python world

00:01:31.140 --> 00:01:33.920
for dealing with
currency-- both within one

00:01:33.920 --> 00:01:36.195
process and
multi-process and async

00:01:36.195 --> 00:01:37.570
and all this other
kind of stuff.

00:01:37.570 --> 00:01:41.680
And pretty much every
model is possible.

00:01:41.680 --> 00:01:45.510
But I think it's really
nice in Go, where there's

00:01:45.510 --> 00:01:47.890
one way to do it
that's baked in.

00:01:47.890 --> 00:01:50.979
And it's a lot easier to
get your head around it,

00:01:50.979 --> 00:01:52.020
I think, because of that.

00:01:52.020 --> 00:01:53.020
So that's one thing.

00:01:53.020 --> 00:01:55.230
And then, of course, you've
got a compiled language

00:01:55.230 --> 00:01:57.420
that's fast.

00:01:57.420 --> 00:02:00.870
It feels, honestly, kind
of like a Python XE to me,

00:02:00.870 --> 00:02:04.030
as a Python person.

00:02:04.030 --> 00:02:07.440
And the approach to
object orientation,

00:02:07.440 --> 00:02:10.520
through what kind of feels
like duck typing to me,

00:02:10.520 --> 00:02:11.470
is pretty awesome.

00:02:11.470 --> 00:02:12.636
FRANCESC CAMPOY FLORES: Yes.

00:02:12.636 --> 00:02:15.780
So yeah, maybe it
feels like duck typing.

00:02:15.780 --> 00:02:17.610
Go doesn't have
duck typing though.

00:02:17.610 --> 00:02:18.330
BRIAN DORSEY: OK.

00:02:18.330 --> 00:02:20.330
FRANCESC CAMPOY FLORES:
Duck typing is something

00:02:20.330 --> 00:02:24.520
that-- so as you very well
know from Pythonage when

00:02:24.520 --> 00:02:27.080
if it looks like a duck and
quacks like a duck, then

00:02:27.080 --> 00:02:28.090
it's a duck.

00:02:28.090 --> 00:02:31.037
And if it's not a duck,
it will fail at run time.

00:02:31.037 --> 00:02:31.870
BRIAN DORSEY: Right.

00:02:31.870 --> 00:02:33.245
FRANCESC CAMPOY
FLORES: In Go, it

00:02:33.245 --> 00:02:34.945
will actually fail
at compilation time.

00:02:34.945 --> 00:02:35.540
BRIAN DORSEY: OK.

00:02:35.540 --> 00:02:37.539
FRANCESC CAMPOY FLORES:
So it's not duck typing.

00:02:37.539 --> 00:02:39.520
It's called
structural sub-typing.

00:02:39.520 --> 00:02:46.071
And it's kind of like if you had
an explicit statically checked

00:02:46.071 --> 00:02:46.570
duck typing.

00:02:46.570 --> 00:02:47.344
BRIAN DORSEY: OK.

00:02:47.344 --> 00:02:48.120
FRANCESC CAMPOY FLORES: Yes.

00:02:48.120 --> 00:02:48.660
BRIAN DORSEY: Right.

00:02:48.660 --> 00:02:51.490
So probably that-- yeah, that's
a better way to think about it.

00:02:51.490 --> 00:02:55.040
So I guess a good
example for Python people

00:02:55.040 --> 00:02:57.440
might be, we have
something that-- we'll

00:02:57.440 --> 00:02:59.530
say this object is file-like.

00:02:59.530 --> 00:03:02.010
So you can kind of, op,
you can read from it,

00:03:02.010 --> 00:03:04.020
and you can write to it,
and that sort of thing.

00:03:04.020 --> 00:03:06.670
And-- but the list
of exactly which

00:03:06.670 --> 00:03:08.700
methods, can you also
open it or close it,

00:03:08.700 --> 00:03:10.700
or can you seek on it
or things like that?

00:03:10.700 --> 00:03:12.408
Which ones are actually
included in that?

00:03:12.408 --> 00:03:14.460
It's not clearly
defined all the time.

00:03:14.460 --> 00:03:17.484
And in Go, you might have an
interface that is like the--

00:03:17.484 --> 00:03:18.650
or you do have an interface.

00:03:18.650 --> 00:03:19.610
It's the Read Writer, right?

00:03:19.610 --> 00:03:21.420
FRANCESC CAMPOY FLORES: Yeah,
there's Reader, there's Writer,

00:03:21.420 --> 00:03:22.640
there's Read Writer.

00:03:22.640 --> 00:03:24.110
Also, you were saying Seek.

00:03:24.110 --> 00:03:25.255
So there's Read Seeker.

00:03:25.255 --> 00:03:27.620
BRIAN DORSEY: OK, and
so each one of those

00:03:27.620 --> 00:03:31.230
is a specific
collection of methods

00:03:31.230 --> 00:03:32.745
with their exact
signature, right?

00:03:32.745 --> 00:03:33.270
FRANCESC CAMPOY FLORES: Yes.

00:03:33.270 --> 00:03:35.840
BRIAN DORSEY: And so the
compiler can know exactly when

00:03:35.840 --> 00:03:35.980
[INTERPOSING VOICES]

00:03:35.980 --> 00:03:36.510
FRANCESC CAMPOY
FLORES: And then you

00:03:36.510 --> 00:03:39.600
can write a function that
receives as an argument, a Read

00:03:39.600 --> 00:03:40.100
Writer.

00:03:40.100 --> 00:03:41.360
And you know
exactly what you can

00:03:41.360 --> 00:03:42.570
do the map-- on that object.

00:03:42.570 --> 00:03:43.767
You can do read and write.

00:03:43.767 --> 00:03:44.600
BRIAN DORSEY: Right.

00:03:44.600 --> 00:03:46.250
So locally, you're
reading the code,

00:03:46.250 --> 00:03:47.583
and you can tell what it can do.

00:03:47.583 --> 00:03:48.333
So that's awesome.

00:03:48.333 --> 00:03:50.124
FRANCESC CAMPOY FLORES:
Yeah, that's great.

00:03:50.124 --> 00:03:52.122
So now that you've
been programming

00:03:52.122 --> 00:03:54.080
for-- how long have you
been programming in Go?

00:03:54.080 --> 00:03:55.370
BRIAN DORSEY: I basically
did a learning project

00:03:55.370 --> 00:03:56.145
for a couple of months.

00:03:56.145 --> 00:03:56.820
FRANCESC CAMPOY FLORES: OK.

00:03:56.820 --> 00:03:58.280
BRIAN DORSEY: So not a
huge amount of experience,

00:03:58.280 --> 00:03:58.960
but made one little project.

00:03:58.960 --> 00:04:00.959
FRANCESC CAMPOY FLORES:
OK, so but after-- yeah,

00:04:00.959 --> 00:04:04.442
after these couple
of months, what

00:04:04.442 --> 00:04:06.275
were the things that
surprised you the most?

00:04:06.275 --> 00:04:08.160
BRIAN DORSEY: So
I think probably

00:04:08.160 --> 00:04:09.990
the biggest surprise
is error handling.

00:04:09.990 --> 00:04:14.340
And I feel like I got
surprised by that twice.

00:04:14.340 --> 00:04:17.029
One, in that-- I had
this initial reaction of,

00:04:17.029 --> 00:04:18.360
wait, this is the modern world.

00:04:18.360 --> 00:04:21.519
Why am I having to deal with the
error from every single call,

00:04:21.519 --> 00:04:22.019
right?

00:04:22.019 --> 00:04:22.870
FRANCESC CAMPOY FLORES: Yes.

00:04:22.870 --> 00:04:24.540
BRIAN DORSEY: And pretty
much anything where

00:04:24.540 --> 00:04:26.400
there's something that can
go wrong-- And it's software,

00:04:26.400 --> 00:04:27.690
so things can almost always--

00:04:27.690 --> 00:04:28.250
FRANCESC CAMPOY FLORES:
Everything can go wrong.

00:04:28.250 --> 00:04:28.822
Yes.

00:04:28.822 --> 00:04:30.905
BRIAN DORSEY: You get this
error [INAUDIBLE] thing

00:04:30.905 --> 00:04:35.220
back from the call, and you
have to deal with it locally.

00:04:35.220 --> 00:04:36.630
And that really surprised me.

00:04:36.630 --> 00:04:40.420
And then I feel like working
through an actual project

00:04:40.420 --> 00:04:43.550
with it, I came to
really, really like that.

00:04:43.550 --> 00:04:46.100
So take networking
as an example.

00:04:46.100 --> 00:04:48.070
You're going to open
a socket and try

00:04:48.070 --> 00:04:49.260
to do some stuff with it.

00:04:49.260 --> 00:04:51.450
And there's so many things
that can go wrong there.

00:04:51.450 --> 00:04:53.116
FRANCESC CAMPOY FLORES:
Yes, everything.

00:04:53.116 --> 00:04:57.350
BRIAN DORSEY: And
it's kind of unclear,

00:04:57.350 --> 00:04:59.950
looking at a local piece
of Python socket code,

00:04:59.950 --> 00:05:01.930
whether-- which errors
are handled, right?

00:05:01.930 --> 00:05:03.431
Because it could
be handled locally.

00:05:03.431 --> 00:05:05.638
It could be handled in a
wrapped exception somewhere.

00:05:05.638 --> 00:05:07.580
You have to kind of
know the whole code base

00:05:07.580 --> 00:05:09.110
to know where that's at.

00:05:09.110 --> 00:05:11.100
And in Go, it's right
there in front of you,

00:05:11.100 --> 00:05:12.420
on the screen-- page
you're looking at.

00:05:12.420 --> 00:05:12.990
FRANCESC CAMPOY FLORES: Yes.

00:05:12.990 --> 00:05:15.327
BRIAN DORSEY: And of course,
you can decide, well,

00:05:15.327 --> 00:05:17.410
if anything goes wrong,
then I just have to abort,

00:05:17.410 --> 00:05:19.300
because I can't continue.

00:05:19.300 --> 00:05:20.910
But it'll be
written right there.

00:05:20.910 --> 00:05:24.380
And if you want to handle all
of the various corner cases,

00:05:24.380 --> 00:05:26.480
then that's also
kind of laid out

00:05:26.480 --> 00:05:27.946
right there in front of you.

00:05:27.946 --> 00:05:29.880
So I've come to
feel like the error

00:05:29.880 --> 00:05:32.860
handling is very powerful.

00:05:32.860 --> 00:05:36.390
And I almost feel
uncomfortable without being

00:05:36.390 --> 00:05:38.240
able to see it in front of me.

00:05:38.240 --> 00:05:40.156
FRANCESC CAMPOY FLORES:
So you think that now,

00:05:40.156 --> 00:05:42.850
when you write Python code, that
you write kind of ghost style

00:05:42.850 --> 00:05:45.010
error handling in
Python or not really?

00:05:45.010 --> 00:05:47.500
BRIAN DORSEY: I'm a little
more careful about the errors

00:05:47.500 --> 00:05:50.230
that I consider upfront.

00:05:50.230 --> 00:05:53.700
I've-- my tendency, in the
past, has been to just write it

00:05:53.700 --> 00:05:55.720
and then bang on it, and
oh, OK, that happened.

00:05:55.720 --> 00:05:56.220
Add a--

00:05:56.220 --> 00:05:56.890
FRANCESC CAMPOY FLORES: Gotcha.

00:05:56.890 --> 00:05:57.360
Everything that is failing and--

00:05:57.360 --> 00:05:58.580
BRIAN DORSEY: Yeah, exactly.

00:05:58.580 --> 00:05:59.420
And then you don't--

00:05:59.420 --> 00:06:00.423
FRANCESC CAMPOY FLORES:
I used to do that too.

00:06:00.423 --> 00:06:01.910
BRIAN DORSEY: Yeah, still do.

00:06:01.910 --> 00:06:06.620
But-- and I think that's
kind of the way to go.

00:06:06.620 --> 00:06:10.050
You want to have a test suite
that covers all of your cases.

00:06:10.050 --> 00:06:17.340
But I guess I feel like
it takes me-- yeah, yeah.

00:06:17.340 --> 00:06:19.185
FRANCESC CAMPOY
FLORES: Yeah, so do

00:06:19.185 --> 00:06:21.860
you think that,
therefore, since you're

00:06:21.860 --> 00:06:24.192
writing all this extra
code for handling errors,

00:06:24.192 --> 00:06:26.400
do you think that's a good
thing, that's a bad thing,

00:06:26.400 --> 00:06:27.600
it takes you longer?

00:06:27.600 --> 00:06:28.255
Is it worth it?

00:06:28.255 --> 00:06:29.880
BRIAN DORSEY: It's
absolutely worth it.

00:06:29.880 --> 00:06:31.862
And I feel like-- so
yes, it takes me longer.

00:06:31.862 --> 00:06:33.820
Part of that's because
I don't know Go as well.

00:06:33.820 --> 00:06:34.960
FRANCESC CAMPOY FLORES: OK.

00:06:34.960 --> 00:06:35.466
Fair enough.

00:06:35.466 --> 00:06:37.090
BRIAN DORSEY: But
also, I think it just

00:06:37.090 --> 00:06:39.090
takes me longer to work
through the logic of it.

00:06:39.090 --> 00:06:42.260
And overall, I feel like
that's actually a good thing.

00:06:42.260 --> 00:06:44.280
I feel like it takes
me longer to work

00:06:44.280 --> 00:06:48.914
through this flow and the
cases that I need to handle.

00:06:48.914 --> 00:06:50.580
And I feel more
confident in the result.

00:06:50.580 --> 00:06:51.705
FRANCESC CAMPOY FLORES: OK.

00:06:51.705 --> 00:06:52.620
Yeah, that's good.

00:06:52.620 --> 00:06:56.860
So now that you are almost
a Go expert already--

00:06:56.860 --> 00:06:58.150
BRIAN DORSEY: Two months of--

00:06:58.150 --> 00:07:01.110
FRANCESC CAMPOY FLORES: --what
could be your advice to people

00:07:01.110 --> 00:07:03.567
that-- probably Pythonistas
are curious about Go.

00:07:03.567 --> 00:07:05.400
What could be your piece
of advice for them?

00:07:05.400 --> 00:07:09.610
BRIAN DORSEY: So the main thing,
I think, would be, one, try it.

00:07:09.610 --> 00:07:12.010
It's absolutely worth
your time to learn Go,

00:07:12.010 --> 00:07:14.919
because you will get the ability
to use a new language that

00:07:14.919 --> 00:07:16.210
complements Python really well.

00:07:16.210 --> 00:07:21.130
But also, the tooling
around Go really

00:07:21.130 --> 00:07:23.430
helps you, like from a software
engineering standpoint,

00:07:23.430 --> 00:07:25.720
write good code more
quickly, faster.

00:07:25.720 --> 00:07:27.570
There's a whole bunch
of things in that area

00:07:27.570 --> 00:07:29.116
you can read about.

00:07:29.116 --> 00:07:29.990
But it's really true.

00:07:29.990 --> 00:07:32.560
And getting in the
habit there, I think,

00:07:32.560 --> 00:07:34.742
helps your habits writing
Python code as well.

00:07:34.742 --> 00:07:36.950
So we can do all the same
things in the Python world.

00:07:36.950 --> 00:07:39.640
We just have dozens of different
options for each of them.

00:07:39.640 --> 00:07:42.769
So I think it's helpful
to have this one path

00:07:42.769 --> 00:07:44.310
and get in the habit
fo doing things.

00:07:44.310 --> 00:07:45.200
FRANCESC CAMPOY FLORES:
The good way to do it.

00:07:45.200 --> 00:07:47.533
BRIAN DORSEY: Yeah, your code
is all formatted this way.

00:07:47.533 --> 00:07:49.740
And so Go has Go Format.

00:07:49.740 --> 00:07:51.560
And Python, we have PEP8.pi.

00:07:51.560 --> 00:07:53.810
And just use PEP8.pi.

00:07:53.810 --> 00:07:56.480
And I think there's some good
lessons back and forth there.

00:07:56.480 --> 00:08:00.529
But the other thing I want
to just kind of mention

00:08:00.529 --> 00:08:02.070
is there's some
things that are going

00:08:02.070 --> 00:08:04.994
to feel really
awkward-- weird when

00:08:04.994 --> 00:08:06.160
you're starting to learn Go.

00:08:06.160 --> 00:08:07.493
FRANCESC CAMPOY FLORES: Such as?

00:08:07.493 --> 00:08:09.529
BRIAN DORSEY: So one
is-- the air handling

00:08:09.529 --> 00:08:10.820
is kind of one example of that.

00:08:10.820 --> 00:08:11.410
FRANCESC CAMPOY FLORES: OK, yes.

00:08:11.410 --> 00:08:13.660
BRIAN DORSEY: And there's a
bunch of those throughout.

00:08:13.660 --> 00:08:17.530
Or you look at a
library, and it doesn't

00:08:17.530 --> 00:08:20.040
feel like there's enough
code there to really do

00:08:20.040 --> 00:08:21.030
what you want to do.

00:08:21.030 --> 00:08:25.190
And I really encourage people
to give the Go way a try, right?

00:08:25.190 --> 00:08:27.990
So give the air handling
a shot before knocking it.

00:08:27.990 --> 00:08:29.800
Actually really try
to write some code

00:08:29.800 --> 00:08:33.350
and see how it affects your
experience with the code.

00:08:33.350 --> 00:08:35.159
And if you have
some library that

00:08:35.159 --> 00:08:38.750
looks like it just can't
possibly work, try it.

00:08:38.750 --> 00:08:43.409
And I found over and over
again that there was actually

00:08:43.409 --> 00:08:44.784
plenty of functionality there.

00:08:44.784 --> 00:08:46.950
And I was able to write the
stuff I wanted to write.

00:08:46.950 --> 00:08:49.900
So I think that has helped
me, from a design standpoint,

00:08:49.900 --> 00:08:53.860
think about, how little code can
we have to make this really--

00:08:53.860 --> 00:08:57.400
FRANCESC CAMPOY FLORES: There
was this talk that [INAUDIBLE],

00:08:57.400 --> 00:08:58.100
a very good one.

00:08:58.100 --> 00:09:00.195
It's called "Less is
Exponentially More."

00:09:00.195 --> 00:09:01.070
BRIAN DORSEY: Ah, OK.

00:09:01.070 --> 00:09:02.180
FRANCESC CAMPOY
FLORES: So yeah, that's

00:09:02.180 --> 00:09:04.850
exactly that point of sometimes
having a little less code

00:09:04.850 --> 00:09:06.770
is actually a good idea.

00:09:06.770 --> 00:09:11.110
Yeah, so thank you very much
for sharing your experience.

00:09:11.110 --> 00:09:15.270
OK, so what could the
Pythonista watching this video

00:09:15.270 --> 00:09:17.312
do next if they
want to learn Go?

00:09:17.312 --> 00:09:18.520
BRIAN DORSEY: So that's easy.

00:09:18.520 --> 00:09:21.495
Go to tour.golang.org.

00:09:21.495 --> 00:09:22.720
We'll put the link up.

00:09:22.720 --> 00:09:26.580
And it's a web-based
introduction

00:09:26.580 --> 00:09:28.975
walk through to the Go
language that's interactive.

00:09:28.975 --> 00:09:31.910
You type Go programs, you
hit a button, and they run.

00:09:31.910 --> 00:09:34.610
And it takes you from
the very beginning,

00:09:34.610 --> 00:09:37.117
all the way up through
concurrency exercises

00:09:37.117 --> 00:09:37.950
and everything else.

00:09:37.950 --> 00:09:39.657
So when you have a
few hours, sit down

00:09:39.657 --> 00:09:40.740
and get started with that.

00:09:40.740 --> 00:09:44.440
I think it's very worthwhile and
really helps you read about Go.

00:09:44.440 --> 00:09:46.900
But a couple hours
doing that will really

00:09:46.900 --> 00:09:48.984
internalize what it feels
like to actually use Go.

00:09:48.984 --> 00:09:50.233
FRANCESC CAMPOY FLORES: Great.

00:09:50.233 --> 00:09:52.600
Well, thank you very much
for those pieces of advice.

00:09:52.600 --> 00:09:54.280
And thank you very
much for watching.

00:09:54.280 --> 00:09:54.880
Bye-bye.

00:09:54.880 --> 00:09:56.730
BRIAN DORSEY: Take care.

