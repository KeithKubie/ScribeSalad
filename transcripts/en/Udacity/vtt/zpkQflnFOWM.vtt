WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So we just learned how to do that JavaScript token

00:00:03.000 --> 00:00:05.000
in lexical analysis.

00:00:05.000 --> 00:00:07.000
Now we need to know how to handle that special

00:00:07.000 --> 00:00:10.000
JavaScript token.type when we're parsing.

00:00:10.000 --> 00:00:12.000
Just to review a bit,

00:00:12.000 --> 00:00:14.000
this is how we did basic HTML parsing

00:00:14.000 --> 00:00:16.000
or our basic HTML grammar.

00:00:16.000 --> 00:00:19.000
We say it's a parsing rule, with p_.

00:00:19.000 --> 00:00:21.000
This is the kind of thing we're trying to parse--an element--

00:00:21.000 --> 00:00:25.000
and then we write down here, the rule from the grammar,

00:00:25.000 --> 00:00:29.000
and where we would normally write an arrow, they ask us to write a colon.

00:00:29.000 --> 00:00:33.000
So element can be rewritten to word.

00:00:33.000 --> 00:00:36.000
And then p[0] is the final parse tree.

00:00:36.000 --> 00:00:39.000
And p[1] is the child parse tree.

00:00:39.000 --> 00:00:43.000
And we build the final parse tree out of the child parse tree,

00:00:43.000 --> 00:00:45.000
growing a bigger tree, over time.

00:00:45.000 --> 00:00:48.000
Well--actually, our handling of JavaScript elements is very similar.

00:00:48.000 --> 00:00:50.000
We just indicate that an HTML element

00:00:50.000 --> 00:00:53.000
can consist of a JavaScript token,

00:00:53.000 --> 00:00:55.000
and we build up our parse tree by

00:00:55.000 --> 00:00:57.000
noting that it's a JavaScript token

00:00:57.000 --> 00:00:59.000
and then including the text.

00:00:59.000 --> 00:01:02.000
And you see this word here--JAVASCRIPT--in all capital letters.

00:01:02.000 --> 00:01:06.000
Back here, when we were lexing the JavaScript token,

00:01:06.000 --> 00:01:09.000
we said: token.type is JAVASCRIPT, in all capital letters.

00:01:09.000 --> 00:01:11.000
Those intentionally match.

00:01:11.000 --> 00:01:14.000
This is the linkage we're making between the lexer and the parser.

00:01:14.000 --> 00:01:16.000
In fact, they have to match; otherwise, it won't work.

00:01:16.000 --> 00:01:18.000
So let me show you a concrete example.

00:01:18.000 --> 00:01:21.000
Let's say my HTML input is: hello my

00:01:21.000 --> 00:01:24.000
and then there's some 'javascript' which says:

00:01:24.000 --> 00:01:26.000
document.write (99);

00:01:26.000 --> 00:01:28.000
and then "luft ballons".

00:01:28.000 --> 00:01:30.000
Let me show you what the Abstract Syntax Tree--

00:01:30.000 --> 00:01:32.000
or what the parse tree--will look like for this.

00:01:32.000 --> 00:01:35.000
And we'll recall that HTML is a list of elements,

00:01:35.000 --> 00:01:39.000
and here we have 4 elements: 1, 2, 3, 4.

00:01:39.000 --> 00:01:41.000
The first is the word_element, hello.

00:01:41.000 --> 00:01:43.000
The next is the word_element, my.

00:01:43.000 --> 00:01:45.000
The next is the javascript_element containing

00:01:45.000 --> 00:01:47.000
only the important text--

00:01:47.000 --> 00:01:49.000
not all of this tag stuff.

00:01:49.000 --> 00:01:52.000
And the last is the word_element, luftballons.

00:01:52.000 --> 00:01:55.000
This is the parse tree, a list of HTML elements.

00:01:55.000 --> 00:01:57.000
It just so happens that none of these are nested,

00:01:57.000 --> 00:02:00.000
but they could have been if there were some tags in here.

00:02:00.000 --> 00:02:02.000
And here: 99 luftballons

00:02:02.000 --> 00:02:04.000
is perhaps more commonly known as--

00:02:04.000 --> 00:02:07.000
in English--as 99 Red Balloons.

00:02:07.000 --> 00:02:09.000
It was a protest song, in German,

00:02:09.000 --> 00:02:11.000
written around 1983.

00:02:11.000 --> 00:02:14.000
Here are, clearly, 99 entire balloons.

00:02:14.000 --> 00:02:17.000
It must be that the other 95 are just behind this one--

00:02:17.000 --> 00:02:19.000
exactly covered by it.

00:02:19.000 --> 09:59:59.000
You believe me, don't you? You totally don't.

