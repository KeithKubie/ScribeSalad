WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.020
 <i>Android patterns for performance</i> 

00:00:02.690 --> 00:00:06.150
 At any time when you can drive less accurate results, 

00:00:06.150 --> 00:00:07.792
 Will achieve a significant gain in performance. 

00:00:07.792 --> 00:00:08.930
 I'm Joanna Smith. 

00:00:08.930 --> 00:00:11.436
 I will show you how to balance the need for perfect performance 

00:00:11.436 --> 00:00:15.440
 And maintain complete satisfaction to your users. 

00:00:16.329 --> 00:00:18.400
 The rounding revolves around saving voltage 

00:00:18.400 --> 00:00:20.490
 And make things good enough for users 

00:00:20.500 --> 00:00:22.860
 Then convince the developers that it is OK to do this. 

00:00:23.580 --> 00:00:26.110
 Consider implementing a trip plan that uses the user's location 

00:00:26.110 --> 00:00:28.766
 Remember to fill the car with gasoline or suggest restaurants to eat in 

00:00:28.766 --> 00:00:30.570
 Or great landmarks to visit. 

00:00:30.920 --> 00:00:33.390
 This application does not need the exact location of the device 

00:00:33.390 --> 00:00:34.590
 To perform these functions. 

00:00:34.590 --> 00:00:36.160
 A zip code may be all it needs 

00:00:36.160 --> 00:00:38.090
 Until the user accepts a suggestion 

00:00:38.090 --> 00:00:40.050
 Then ask for navigation directions. 

00:00:40.450 --> 00:00:42.700
 GPS accuracy should be increased. 

00:00:43.280 --> 00:00:45.260
 This is the practical application of approximation. 

00:00:45.620 --> 00:00:48.240
 Which minimizes user time and displays a less accurate result 

00:00:48.240 --> 00:00:50.480
 But they meet the current need of the user. 

00:00:50.870 --> 00:00:53.710
 How much time your app is wasting to provide a more accurate result 

00:00:53.710 --> 00:00:56.570
 At a time when the user does not notice the least accurate result? 

00:00:57.200 --> 00:01:00.760
 We can find savings because of the approximation of everything. 

00:01:01.199 --> 00:01:02.490
 Such as the flight plan application we presented. 

00:01:02.490 --> 00:01:05.129
 While driving the user on that very long road, 

00:01:05.129 --> 00:01:08.550
 There is no need to bring updates from the server every five minutes exactly. 

00:01:08.850 --> 00:01:11.280
 Your app can instead configure payments and schedule requests 

00:01:11.280 --> 00:01:13.660
 Accuracy and repeat less to keep the battery 

00:01:14.060 --> 00:01:16.012
 Which the user will need if the window is punctured. 

00:01:16.332 --> 00:01:19.210
 The app can also calculate a route between two cities in the trip 

00:01:19.215 --> 00:01:22.850
 Then use the estimated travel time to set the alarm clock later in the future 

00:01:22.850 --> 00:01:25.050
 The GPS is activated and turned on 

00:01:25.050 --> 00:01:26.809
 So that suggestions can be presented again. 

00:01:26.809 --> 00:01:29.880
 But until there is a nearby area of ​​interest that deserves to be offered to the user, 

00:01:29.880 --> 00:01:32.200
 There is little point in tracking a user's site 

00:01:32.200 --> 00:01:34.184
 Along this long and empty highway. 

00:01:34.634 --> 00:01:36.300
 Of course, there are simple approximations 

00:01:36.300 --> 00:01:39.400
 Such as allowing slightly less precision for your images 

00:01:39.400 --> 00:01:40.880
 To save memory space 

00:01:40.880 --> 00:01:42.220
 And increased display speed. 

00:01:42.540 --> 00:01:44.260
 This is because when the user browses 

00:01:44.260 --> 00:01:46.310
 A list of potential stops along the way, 

00:01:46.310 --> 00:01:48.190
 Does not need full picture details yet. 

00:01:48.190 --> 00:01:51.599
 You can even load it when you inspect the decor of the restaurant you choose. 

00:01:52.030 --> 00:01:54.240
 I will repeat what I said earlier so please listen. 

00:01:54.780 --> 00:01:56.970
 For the vast majority of code, 

00:01:56.970 --> 00:01:59.500
 No 100% accurate results are needed. 

00:01:59.820 --> 00:02:01.410
 And by combining the demand for a few devices 

00:02:01.410 --> 00:02:03.250
 Giving users everything they need, 

00:02:03.250 --> 00:02:05.890
 Can gain a lot of frame rate 

00:02:05.890 --> 00:02:07.400
 And provide battery life. 

00:02:08.590 --> 00:02:10.930
 So the roundabout is essentially about compromise. 

00:02:10.930 --> 00:02:13.472
 This is no different from everything else in performance. 

00:02:13.472 --> 00:02:17.131
 So you'll lose the rest of your Android Performance Patterns 

00:02:17.131 --> 00:02:20.021
 Think about joining the G + forum for tips, guidance, and help. 

00:02:20.261 --> 00:02:22.280
 So keep calm, collect your code information 

00:02:22.280 --> 00:02:23.900
 Always remember that performance is important. 

