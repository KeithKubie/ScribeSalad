WEBVTT
Kind: captions
Language: en

00:00:00.390 --> 00:00:06.640
What we will look at now is one of the
simpler coherence protocols called MSI.

00:00:06.640 --> 00:00:11.730
In MSI, a block can be in one
of three states in a cache.

00:00:11.730 --> 00:00:14.260
I stands for the invalid state.

00:00:14.260 --> 00:00:20.010
A block is in an invalid state either
when it is present in the cache, but

00:00:20.010 --> 00:00:25.220
its valid bit will not be set, or when
it's simply not present in the cache.

00:00:25.220 --> 00:00:29.760
So a block that is not present in the
cache is treated like it is present, but

00:00:29.760 --> 00:00:31.560
in an invalid state.

00:00:31.560 --> 00:00:34.190
S stands for the shared state.

00:00:34.190 --> 00:00:38.620
A block that is in
the shared state in a cache

00:00:38.620 --> 00:00:40.810
can be read without any further ado.

00:00:41.940 --> 00:00:44.850
But if we write it,
we have to do something.

00:00:44.850 --> 00:00:48.500
A local read to a block
that is in the shared state

00:00:48.500 --> 00:00:52.800
keeps the block in the shared state and
doesn't do anything else.

00:00:52.800 --> 00:00:57.210
And finally, m stands for
the modified state.

00:00:57.210 --> 00:01:00.050
In this state we can read the block

00:01:00.050 --> 00:01:03.710
just like the shared state
without sending anything out.

00:01:03.710 --> 00:01:06.930
And we can also write to
this block by the local core

00:01:06.930 --> 00:01:09.070
without sending anything out.

00:01:09.070 --> 00:01:12.730
Now, because this is
an invalidation-based protocol,

00:01:12.730 --> 00:01:16.010
what happens is in the modified state,
we are sure that

00:01:16.010 --> 00:01:20.240
there are no other cached copies, which
is why we are allowed to locally write.

00:01:20.240 --> 00:01:23.520
We don't have to tell anybody that
we are writing because we know there

00:01:23.520 --> 00:01:24.830
is nobody.

00:01:24.830 --> 00:01:29.362
So this is sort of equivalent
to having valid equals 1, and

00:01:29.362 --> 00:01:32.500
dirty equals 1 in a normal cache.

00:01:32.500 --> 00:01:36.600
We just call this state modified because
it's easier to understand what's going

00:01:36.600 --> 00:01:39.960
on this way, than if we have
to look at individual bits.

00:01:39.960 --> 00:01:44.010
And we will see that with more
complicated coherence protocols,

00:01:44.010 --> 00:01:45.830
we will add maybe a state or two, but

00:01:45.830 --> 00:01:49.310
we will need to add several bits
in order to track what's going on.

00:01:49.310 --> 00:01:54.860
So now, in the invalid state, we have
what's equivalent to valid bit being 0.

00:01:54.860 --> 00:01:56.910
Pretty much,
we behave like we don't have the block.

00:01:56.910 --> 00:02:00.750
Either because we really don't have it,
or because we have it but

00:02:00.750 --> 00:02:03.030
we are not supposed to read it or
write it.

00:02:03.030 --> 00:02:04.990
So, when we have a write and

00:02:04.990 --> 00:02:10.199
the block is in the invalid state,
we move the block to the modified state.

00:02:10.199 --> 00:02:14.390
So when we have a local write, meaning
the local processor wants to write and

00:02:14.390 --> 00:02:18.930
the block is in the invalid state,
we move the block to the modified state.

00:02:18.930 --> 00:02:20.960
But we cannot just do that.

00:02:20.960 --> 00:02:25.240
To do that, we have to put
the write request on the bus.

00:02:25.240 --> 00:02:27.020
So pretty much this is a write miss,

00:02:27.020 --> 00:02:29.360
we have to tell others
that it's a write miss.

00:02:29.360 --> 00:02:32.643
We get the data and
now we can put it in the modified state.

00:02:32.643 --> 00:02:33.412
Why?
Well,

00:02:33.412 --> 00:02:36.757
because our write request on
the bus pretty much made sure

00:02:36.757 --> 00:02:39.266
that nobody else has
a copy any more because

00:02:39.266 --> 00:02:43.580
the right request that we made
invalidated everybody else.

00:02:43.580 --> 00:02:48.000
If we have a block in the modified state
and we observe on the bus that another

00:02:48.000 --> 00:02:54.800
cache is placing a write on the bus,
then we will go to the invalid state.

00:02:54.800 --> 00:02:58.890
So we do this when we snoop
the write on the bus.

00:02:58.890 --> 00:03:02.180
And we cannot just do this and be done.

00:03:02.180 --> 00:03:04.350
When we snoop a write on the bus,

00:03:04.350 --> 00:03:07.600
because we are in the modified
state where we have the dirty copy.

00:03:07.600 --> 00:03:12.720
Meaning really the only fresh copy of
the data in the system is in our cache.

00:03:12.720 --> 00:03:15.510
It's not even in memory
because it's dirty here.

00:03:15.510 --> 00:03:19.670
We have to write the block back,
as we're transitioning to invalid.

00:03:19.670 --> 00:03:23.670
And we have to delay the data that
would be sent to the write request

00:03:23.670 --> 00:03:26.190
until we are done with the write back.

00:03:26.190 --> 00:03:27.880
This can be done in two ways.

00:03:27.880 --> 00:03:33.320
One is to actually cancel that request,
write back, move to invalid and

00:03:33.320 --> 00:03:36.690
then that request gets repeated and
now gets the data from memory.

00:03:36.690 --> 00:03:40.360
Another one is,
when we see a write on the bus,

00:03:40.360 --> 00:03:45.430
if it's requesting data, then what we do
is we suppress the memory response and

00:03:45.430 --> 00:03:47.360
feed the data to the processor.

00:03:47.360 --> 00:03:51.800
The simpler way of doing things is just
to delay that request, write back, and

00:03:51.800 --> 00:03:53.210
then let it proceed.

00:03:53.210 --> 00:03:57.770
But either way, we have to make sure
that before we move from modified to

00:03:57.770 --> 00:04:00.310
invalid, we write back
the data to memory.

00:04:00.310 --> 00:04:04.600
And also make sure that the write
request, if it is a write miss and

00:04:04.600 --> 00:04:08.820
needs the data, gets our new
data not the data from memory.

00:04:08.820 --> 00:04:13.180
Now, if we snoop a read on the bus and

00:04:13.180 --> 00:04:17.600
we are in the modified state,
then we move to the shared state.

00:04:17.600 --> 00:04:20.010
So we have snooped a read on the bus,

00:04:20.010 --> 00:04:24.370
we will now not be the only one
who has a copy of the data.

00:04:24.370 --> 00:04:27.800
That means we will not be able
to write without telling others.

00:04:27.800 --> 00:04:30.410
So we will move to the shared state.

00:04:30.410 --> 00:04:35.630
Just like here, we have to also make
sure that the block is written back.

00:04:35.630 --> 00:04:40.080
The shared state is equivalent
to having V=1, and D=0.

00:04:40.080 --> 00:04:43.030
So we will not be doing a write
back from a shared state,

00:04:44.200 --> 00:04:45.999
because it only allows reads anyway.

00:04:47.110 --> 00:04:50.140
So as we are moving from
the dirty to a clean state,

00:04:50.140 --> 00:04:53.790
modified to shared,
we are going to write back the data.

00:04:53.790 --> 00:04:58.020
The reading processor wants
a copy of this block.

00:04:58.020 --> 00:05:02.390
Again, we have to either delay
that request, do our write back,

00:05:02.390 --> 00:05:07.220
change to the shared state, and then
let that processor proceed with a read.

00:05:07.220 --> 00:05:11.370
Or we have to suppress the memory
response that would happen

00:05:11.370 --> 00:05:12.920
as a result of this read and

00:05:12.920 --> 00:05:17.360
provide our data instead as we
are transitioning to a shared state.

00:05:17.360 --> 00:05:21.710
If the processor reads a block, and
the block is in the invalid state,

00:05:21.710 --> 00:05:25.260
then the block will be
moved to a shared state.

00:05:25.260 --> 00:05:29.840
So in response to a local read,
we put a read request on the bus.

00:05:29.840 --> 00:05:35.020
And then we get the data, and then we
are in the shared state for the data.

00:05:35.020 --> 00:05:38.130
Note that the data might
come from memory, or

00:05:38.130 --> 00:05:42.060
it may come from another cache because
it had data in the modified state, and

00:05:42.060 --> 00:05:43.460
we need it to get that data.

00:05:43.460 --> 00:05:46.640
But as far as this local
cache is concerned,

00:05:46.640 --> 00:05:50.010
it puts a read request on the bus,
it gets the data, and

00:05:50.010 --> 00:05:53.280
then it puts that block in
the shared state in the local cache.

00:05:53.280 --> 00:05:57.130
Then we can do many reads
without telling anybody.

00:05:57.130 --> 00:06:00.900
If we have a block in the shared state,
and we observe

00:06:00.900 --> 00:06:05.700
a snooped write on the bus, then we
move the block to the invalid state.

00:06:05.700 --> 00:06:07.380
We don't have to do anything,

00:06:07.380 --> 00:06:10.210
because the block is clean
as far as we are concerned.

00:06:10.210 --> 00:06:11.880
We don't have to write it back.

00:06:11.880 --> 00:06:14.910
We simply have to do the equivalent
of resetting the valid bit and

00:06:14.910 --> 00:06:16.270
move to the invalid state.

00:06:16.270 --> 00:06:19.460
So there is nothing really that we
have to do except change the state so

00:06:19.460 --> 00:06:23.290
that next time we try to read it
we can no longer read it here,

00:06:23.290 --> 00:06:26.220
we have to put the read
request on the bus again.

00:06:26.220 --> 00:06:29.920
If we snoop a read on
the bus in the shared state,

00:06:29.920 --> 00:06:32.000
we don't need to do anything.

00:06:32.000 --> 00:06:35.020
Why?
Well because our shared state is okay

00:06:35.020 --> 00:06:38.580
with there being other sharers that
are only going to read the data.

00:06:38.580 --> 00:06:42.650
And finally, all the local reads
are okay in the shared state.

00:06:42.650 --> 00:06:46.840
If we have a local write,
that is not allowed in the shared state.

00:06:46.840 --> 00:06:51.782
So a local write that finds the block
in the shared state will make us move

00:06:51.782 --> 00:06:55.630
the block to a modified state,
but we cannot do that silently.

00:06:55.630 --> 00:06:57.120
We cannot just move the block and

00:06:57.120 --> 00:07:01.700
write to it, what we have to do is
put an invalidation on the bus.

00:07:01.700 --> 00:07:06.461
Know that things are slightly different
when we move from invalid state on

00:07:06.461 --> 00:07:08.303
the local right to modify and

00:07:08.303 --> 00:07:12.696
when we moved from shared state to
a modified state on a local write.

00:07:12.696 --> 00:07:18.850
Here we put a write request that asks
for a block so that we can write it.

00:07:18.850 --> 00:07:21.740
Here we already have the block.

00:07:21.740 --> 00:07:25.510
This is the most up to date copy,
because if there was another write after

00:07:25.510 --> 00:07:28.200
that, we would not have
it in the shared state.

00:07:28.200 --> 00:07:30.030
So now we want to write to it.

00:07:30.030 --> 00:07:31.299
We already have the data,

00:07:31.299 --> 00:07:33.960
we just have to put an invalidation
request on the bus.

00:07:33.960 --> 00:07:38.890
So this invalidation request does
not actually request the data.

00:07:38.890 --> 00:07:41.350
It just puts a request on the bus for

00:07:41.350 --> 00:07:45.520
everybody to invalidate their copies,
but it's not asking for the data.

00:07:45.520 --> 00:07:48.670
So pretty much, as soon as we
put this request on the bus,

00:07:48.670 --> 00:07:53.290
we can write because by putting
an invalidation on the bus,

00:07:53.290 --> 00:07:56.040
we have made sure that now
everybody is invalidated.

00:07:56.040 --> 00:07:58.570
At which point,
we are in the modified state.

00:07:58.570 --> 00:08:03.160
Now of course, in the invalid state,
whatever we snooped for

00:08:03.160 --> 00:08:05.575
this block on the bus doesn't matter.

00:08:05.575 --> 00:08:07.820
We're going to stay
in the invalid state.

00:08:07.820 --> 00:08:12.010
Also in the shared state, it doesn't
matter whether we snoop somebody's

00:08:12.010 --> 00:08:16.620
request to write, or an invalidation
that they put on the bus.

00:08:16.620 --> 00:08:19.650
We still move to the invalid
state without doing much.

00:08:19.650 --> 00:08:23.770
And finally note that if
we are in a modified state,

00:08:23.770 --> 00:08:29.490
we will observe a write if somebody
wants to write, and not an invalidation.

00:08:29.490 --> 00:08:32.350
Because if we are in the modified
state that means that

00:08:32.350 --> 00:08:34.570
everybody else is in the invalid
state for this block.

00:08:35.600 --> 00:08:38.890
So if they want to write, they'll have
to put a write request on the bus.

00:08:38.890 --> 00:08:42.690
They cannot be in the shared state and
put just an invalidation on it.

