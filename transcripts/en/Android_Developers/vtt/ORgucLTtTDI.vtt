WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.420
[MUSIC PLAYING]

00:00:02.420 --> 00:00:04.610
Optimizing your Android
application performance

00:00:04.610 --> 00:00:06.990
has a lot to do with how
you're managing your memory.

00:00:06.990 --> 00:00:09.070
And more often than
not, issues here

00:00:09.070 --> 00:00:11.810
can come from using collections
that may not be frugal

00:00:11.810 --> 00:00:13.360
when it comes to this resource.

00:00:13.360 --> 00:00:14.515
My name is Colt McAnlis.

00:00:14.515 --> 00:00:16.520
And to help you write more
performant applications,

00:00:16.520 --> 00:00:18.514
the Android system
provides a set of collections

00:00:18.514 --> 00:00:21.580
built especially
for mobile development.

00:00:21.580 --> 00:00:24.040
Consider the commonly
used hashmap object.

00:00:24.040 --> 00:00:26.905
Totally useful from 
a language perspective,

00:00:26.905 --> 00:00:28.580
but also a complete memory hog.

00:00:28.580 --> 00:00:31.770
See, a typical hashmap system
works a little something like this.

00:00:31.770 --> 00:00:34.160
You take in a key object 
and apply a hash to it,

00:00:34.160 --> 00:00:36.270
which gives you an
index into a large array.

00:00:36.270 --> 00:00:39.560
At that index location,
you place the value object,

00:00:39.560 --> 00:00:42.920
which means the biggest problem 
you have to design around is collisions,

00:00:42.920 --> 00:00:47.274
or rather, when multiple keys hash
to the same location in that array.

00:00:47.274 --> 00:00:48.420
Now, small arrays mean

00:00:48.420 --> 00:00:50.740
that you're going to end up
with a lot more hash collisions.

00:00:50.740 --> 00:00:53.390
I mean, mapping 20,000
objects to 10 locations

00:00:53.390 --> 00:00:56.420
is, by definition, going
to get a little bit messy.

00:00:56.420 --> 00:01:00.210
As such, most hashmaps end up
allocating a large array

00:01:00.210 --> 00:01:02.130
in order to reduce the
potential for collisions,

00:01:02.130 --> 00:01:04.320
and then go about adding
some other crazy logic

00:01:04.320 --> 00:01:07.560
in case those things do happen,
like chaining algorithms and whatnot.

00:01:07.560 --> 00:01:09.664
So obviously, this
whole large array

00:01:09.664 --> 00:01:11.430
that's only sparsley
populated thing

00:01:11.430 --> 00:01:14.930
isn't really ideal from the perspective
of a memory-minimal device,

00:01:14.930 --> 00:01:18.290
which is why the Android Runtime
provides an alternate container class,

00:01:18.290 --> 00:01:20.970
which is more memory efficient,
ArrayMap.

00:01:20.970 --> 00:01:23.760
ArrayMap provides the identical
functionality as a hashmap,

00:01:23.760 --> 00:01:25.540
but avoids all of its crazy overhead

00:01:25.540 --> 00:01:28.470
by using two small arrays
instead of one large one.

00:01:28.470 --> 00:01:32.710
The first array contains the hashes
of the given keys in sorted order.

00:01:32.720 --> 00:01:35.190
The second array stores
the key and value objects

00:01:35.190 --> 00:01:38.440
that have been inserted into the
collection, interwoven together

00:01:38.440 --> 00:01:41.160
according to the ordering
of the sorted key array.

00:01:41.590 --> 00:01:44.500
When you want to fetch a value,
we create a hash for the key

00:01:44.500 --> 00:01:47.830
and then binary search
the hash array to find its index.

00:01:47.830 --> 00:01:49.490
We can use that
index directly then

00:01:49.490 --> 00:01:53.700
to find the location in the key
value pair in the interwoven array.

00:01:54.020 --> 00:01:57.664
Now, if the key in the second array
isn't equal to the one

00:01:57.664 --> 00:01:59.950
that we submitted when we
were searching for things,

00:01:59.950 --> 00:02:02.190
then we assume that
there's been a collision.

00:02:02.190 --> 00:02:05.460
To resolve this, we then linearly
walk the keys in both directions,

00:02:05.460 --> 00:02:07.610
trying to find the correct match.

00:02:07.610 --> 00:02:09.019
These two things together mean that

00:02:09.019 --> 00:02:11.369
as the number of objects
grows in our container,

00:02:11.369 --> 00:02:14.580
so does the time required
to access a single object.

00:02:14.580 --> 00:02:17.170
Basically, you're trading off 
smaller memory overhead

00:02:17.170 --> 00:02:19.580
for more expensive
runtime access.

00:02:19.580 --> 00:02:21.802
Now, since these arrays
are contiguous in memory,

00:02:21.802 --> 00:02:24.513
there's a few things to keep in mind
with respect to their usage.

00:02:24.513 --> 00:02:28.210
Dominantly is understanding how deleting
and adding to the container works.

00:02:28.210 --> 00:02:30.140
Deleting elements
can fall into two paths.

00:02:30.140 --> 00:02:32.700
Either you get lucky|
and only need a compaction step,

00:02:32.700 --> 00:02:34.990
which means shifting the
deleted items to the end

00:02:34.990 --> 00:02:37.180
and then all the
other values forward.

00:02:37.180 --> 00:02:38.820
Or you can end up in the slowest path

00:02:38.820 --> 00:02:42.160
which actually requires a resize
and copy of the elements

00:02:42.160 --> 00:02:44.190
to eliminate the value in question.

00:02:44.190 --> 00:02:46.240
Insertions work
on the other side of this coin.

00:02:46.240 --> 00:02:50.030
If the array has been compacted,
then we can reuse those allocated blocks,

00:02:50.030 --> 00:02:53.090
and then just shift around everything
to keep our sorted order.

00:02:53.090 --> 00:02:54.410
However, the slow path here

00:02:54.410 --> 00:02:57.040
does require a complete resize
of the contiguous array

00:02:57.040 --> 00:02:58.810
in order to make space...

00:02:58.810 --> 00:03:01.164
plus copying and moving everything,
on top of that.

00:03:01.164 --> 00:03:03.170
In general, this means that
insertions and deletions

00:03:03.170 --> 00:03:05.180
from array maps are going to
cost a little bit more

00:03:05.180 --> 00:03:06.571
from a performance perspective.

00:03:06.571 --> 00:03:08.750
But if you keep the number
of objects in it small,

00:03:08.750 --> 00:03:10.140
like in hundreds of items,

00:03:10.140 --> 00:03:12.230
then this really
isn't anything to worry about.

00:03:12.230 --> 00:03:13.807
See, these small contiguous arrays

00:03:13.807 --> 00:03:16.140
mean that when the number
of values is pretty low,

00:03:16.140 --> 00:03:18.617
you get a lot of savings
versus the standard hashmap.

00:03:18.617 --> 00:03:21.041
For empty maps, there's no allocations
hanging around taking up space.

00:03:21.041 --> 00:03:24.910
And for small amounts of objects,
it's pretty memory-optimal.

00:03:24.910 --> 00:03:27.899
Oh, and by the way, another great feature
of these containers

00:03:27.899 --> 00:03:30.460
is that you can iterate
over them using indexing.

00:03:30.460 --> 00:03:32.400
Compare that to the hashmap container,

00:03:32.400 --> 00:03:35.360
which requires you to use
the iterator pattern,

00:03:35.360 --> 00:03:37.020
which, of course,
is significantly slower

00:03:37.020 --> 00:03:39.480
and takes up more memory to do.

00:03:39.480 --> 00:03:41.200
But obviously, it's not wise

00:03:41.200 --> 00:03:44.010
to use these optimized containers
in every case.

00:03:44.010 --> 00:03:47.020
But there are some perfect situations
that you should consider.

00:03:47.020 --> 00:03:50.590
Number one, situations where you have
a small number of items,

00:03:50.590 --> 00:03:53.400
in the hundreds or so,
with lots of accesses,

00:03:53.400 --> 00:03:55.890
or the insertions and deletions
are infrequent enough

00:03:55.890 --> 00:03:58.640
that the overhead of doing so
isn't really noticed.

00:03:58.640 --> 00:04:01.540
Number two, situations
where we have containers of maps,

00:04:01.540 --> 00:04:03.390
like maps of maps,

00:04:03.390 --> 00:04:05.670
where the submaps tend to have
a low number of items

00:04:05.670 --> 00:04:08.320
and you're often
iterating over them a lot of time.

00:04:08.320 --> 00:04:10.890
If your use case doesn't
fall into either of those two buckets,

00:04:10.890 --> 00:04:14.010
then it might be best to stick
with the hashmap class

00:04:14.010 --> 00:04:16.870
which actually highlights
a very interesting point.

00:04:16.870 --> 00:04:19.040
Optimizing performance
is a constant trade-off

00:04:19.040 --> 00:04:21.570
between finding the right container
for the right usage pattern

00:04:21.570 --> 00:04:23.650
for the right memory pattern.

00:04:23.650 --> 00:04:25.994
And as someone said,
there is no silver bullet,

00:04:25.994 --> 00:04:27.300
which is why you need to check out

00:04:27.300 --> 00:04:29.669
the rest of the Android 
Performance Patterns content,

00:04:29.669 --> 00:04:31.800
to get more information about
these types of trade-offs.

00:04:31.800 --> 00:04:34.720
Oh, and don't forget to join
the Google+ community as well

00:04:34.720 --> 00:04:36.270
to hear other war stories

00:04:36.270 --> 00:04:39.180
from developers who may be facing
similar situations.

00:04:39.180 --> 00:04:42.130
So keep calm, profile your code,
and always remember,

00:04:42.130 --> 00:04:43.290
perfmatters.

00:04:43.290 --> 00:04:46.040
[MUSIC PLAYING]

