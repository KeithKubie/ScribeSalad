WEBVTT
Kind: captions
Language: en

00:00:00.710 --> 00:00:04.923
The approach we're instead going to take is based on a different hashing algorithm, non-chaining,

00:00:04.923 --> 00:00:07.574
and this hashing algorithm is called cuckoo hashing.

00:00:07.574 --> 00:00:09.785
This is a cuckoo bird; thanks, Wikipedia.

00:00:09.785 --> 00:00:14.484
And it's termed a brood parasite, but let's put it into more understandable English.

00:00:14.484 --> 00:00:17.486
This bird is one of the biggest jerks in the animal kingdom.

00:00:17.486 --> 00:00:20.571
Rather than taking care of its own eggs and chicks,

00:00:20.571 --> 00:00:23.326
it instead lays its eggs in another bird's nest,

00:00:23.326 --> 00:00:25.897
throwing out the other bird's eggs to make room

00:00:25.897 --> 00:00:28.863
and let's the other bird raise its chicks.

00:00:28.863 --> 00:00:34.356
See if you can detect why the algorithm I'm about to describe is called cuckoo hashing, as I describe it.

00:00:34.356 --> 00:00:37.817
The key to this method is having multiple hash tables instead of just 1.

00:00:37.817 --> 00:00:41.778
Multiple hash functions, 1 per hash table.

00:00:41.778 --> 00:00:46.358
And those hash tables only allow 1 item in each one of their buckets.

00:00:46.358 --> 00:00:49.970
There is no chaining in this algorithm at all.

00:00:49.970 --> 00:00:53.585
In the example we'll show, we're going to have 2 hash tables and 2 hash functions,

00:00:53.585 --> 00:00:56.264
but the method generalizes to more than 2.

00:00:56.264 --> 00:00:58.194
So here's where we're going to do at a high level.

00:00:58.194 --> 00:01:00.830
First, all the items that we want to hash,

00:01:00.830 --> 00:01:04.340
we use the first hash function and try to hash into the first hash table.

00:01:04.340 --> 00:01:10.046
Some of them will collide and fail, and by that, I mean, we're going to try write multiple items into the same bucket,

00:01:10.046 --> 00:01:12.677
but we're only allowing 1 item per bucket.

00:01:12.677 --> 00:01:16.216
That's okay; if n items try to write into 1 hash bucket,

00:01:16.216 --> 00:01:20.580
we only require that 1 of them succeeds, and it doesn't really matter which one.

00:01:20.580 --> 00:01:24.954
So then those that fail--we're going to take all the ones that are leftover that failed,

00:01:24.954 --> 00:01:29.556
and we're going to use the second hash function to try to hash into the second hash table and so on.

00:01:29.556 --> 00:01:31.695
Now the cool part is what happens next,

00:01:31.695 --> 00:01:33.937
but we're going to go and take an example here

00:01:33.937 --> 00:01:35.632
and I'm going to show you how it works,

00:01:35.632 --> 00:01:38.559
and then we'll see exactly how this cuckoo hashing works.

