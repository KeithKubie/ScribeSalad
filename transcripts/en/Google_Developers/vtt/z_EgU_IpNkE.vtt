WEBVTT
Kind: captions
Language: en

00:00:01.180 --> 00:00:03.450
Hi, I'm James Chittenden
here, solutions

00:00:03.450 --> 00:00:05.970
engineer for Google
Cloud Platform.

00:00:05.970 --> 00:00:09.180
Today I'm going to talk about
how to effectively prepare

00:00:09.180 --> 00:00:11.580
video assets for
streaming delivery

00:00:11.580 --> 00:00:13.550
on Google Cloud Platform.

00:00:13.550 --> 00:00:15.600
When preparing media
files for streaming,

00:00:15.600 --> 00:00:19.240
there are many options you have
to consider-- from transcoding,

00:00:19.240 --> 00:00:22.310
cropping the video files
using Google Compute Engine,

00:00:22.310 --> 00:00:25.400
leveraging open source
libraries-- such as ffMpeg,

00:00:25.400 --> 00:00:28.610
HandBrake-- or even
leveraging manage offerings,

00:00:28.610 --> 00:00:31.100
like Wix media
platform, Zing Coder,

00:00:31.100 --> 00:00:33.860
and many other
commercial offerings.

00:00:33.860 --> 00:00:35.380
There are many
variables that come

00:00:35.380 --> 00:00:37.990
into play that could
interrupt playback,

00:00:37.990 --> 00:00:42.700
and a few top ones include the
diverse devices of your users--

00:00:42.700 --> 00:00:45.760
are they running on a mobile
device, a desktop, a TV

00:00:45.760 --> 00:00:47.220
with a Chromecast?

00:00:47.220 --> 00:00:50.430
So you have to account for the
different sizes of screens.

00:00:50.430 --> 00:00:53.652
Secondly, users with
varied bandwidth speeds.

00:00:53.652 --> 00:00:56.110
You're going to have some users
that have slow connections,

00:00:56.110 --> 00:00:58.210
and some of them that are fast.

00:00:58.210 --> 00:01:01.360
Thirdly, network traffic from
your streaming video server

00:01:01.360 --> 00:01:03.390
has to be blazing fast.

00:01:03.390 --> 00:01:06.280
And we're going to cover that
in depth in the next video.

00:01:06.280 --> 00:01:09.770
And then lastly, the performance
abilities of the user's device.

00:01:09.770 --> 00:01:12.850
Do they have a fast
CPU, or a slow CPU?

00:01:12.850 --> 00:01:15.820
The goal is to find the right
balance between bit rate

00:01:15.820 --> 00:01:19.760
and resolution, as it relates to
the end user's connection speed

00:01:19.760 --> 00:01:21.430
and device ability.

00:01:21.430 --> 00:01:23.410
To achieve these goals,
we need to leverage

00:01:23.410 --> 00:01:25.990
a technique called
adaptive streaming.

00:01:25.990 --> 00:01:27.250
Let's explore this concept.

00:01:27.250 --> 00:01:29.090
So what is adaptive streaming?

00:01:29.090 --> 00:01:30.960
Well, adaptive
streaming is a technique

00:01:30.960 --> 00:01:34.930
of detecting a user's bandwidth
capabilities in real time,

00:01:34.930 --> 00:01:37.180
taking that information,
and adjusting

00:01:37.180 --> 00:01:39.950
the quality of the video
stream accordingly.

00:01:39.950 --> 00:01:44.070
The result is less buffering,
faster start times, and overall

00:01:44.070 --> 00:01:47.430
a much better user experience
for both your high speed

00:01:47.430 --> 00:01:49.540
and low speed connections.

00:01:49.540 --> 00:01:51.770
Adaptive streaming works
by having multiple bit

00:01:51.770 --> 00:01:55.650
rates available for the
player or server, on a CDN,

00:01:55.650 --> 00:01:59.230
potentially, to pull content
based on the user's connection

00:01:59.230 --> 00:02:00.950
speed and ability.

00:02:00.950 --> 00:02:03.910
Let's dig into this
concept with an example.

00:02:03.910 --> 00:02:05.790
Say I have a large
video that I need

00:02:05.790 --> 00:02:08.180
to transcode to
accommodate users

00:02:08.180 --> 00:02:11.160
with mobile resolutions
for Android, iOS,

00:02:11.160 --> 00:02:12.880
and other mobile devices.

00:02:12.880 --> 00:02:16.740
I also want to ensure I have
HD versions of the video that's

00:02:16.740 --> 00:02:21.130
formatted for big desktop
screens, as well as TV devices.

00:02:21.130 --> 00:02:22.880
So as a user, they
should be able to use

00:02:22.880 --> 00:02:25.890
my app on their device
and, unknown to them,

00:02:25.890 --> 00:02:28.000
multiple streams
will be available

00:02:28.000 --> 00:02:30.560
and will be seamlessly switched
to match their internet

00:02:30.560 --> 00:02:33.700
connection as it
degrades or improves.

00:02:33.700 --> 00:02:37.320
The key is keep this
process smooth and seamless.

00:02:37.320 --> 00:02:39.300
And when using
adaptive streaming,

00:02:39.300 --> 00:02:42.070
we can achieve no
interruption to playback.

00:02:42.070 --> 00:02:43.650
So check out this diagram.

00:02:43.650 --> 00:02:46.710
I have a sample video player
on Google Cloud Platform,

00:02:46.710 --> 00:02:50.940
and it might be serving up
multiple formats all at once.

00:02:50.940 --> 00:02:54.930
I have a large sample video,
2,612 kilobits per second,

00:02:54.930 --> 00:02:57.640
another is 1,600
kilobits per second,

00:02:57.640 --> 00:03:00.890
and another 1,200,
and 800, and so on.

00:03:00.890 --> 00:03:04.230
The goal is to select the
right encoding profile

00:03:04.230 --> 00:03:08.030
to insure each device that's
consuming my video content will

00:03:08.030 --> 00:03:09.710
receive the right
format and right

00:03:09.710 --> 00:03:12.790
size that's appropriate
for their connection.

00:03:12.790 --> 00:03:16.760
Let's explore how we can
prepare our video assets.

00:03:16.760 --> 00:03:18.870
When selecting a
transcoding tool

00:03:18.870 --> 00:03:21.700
there are several options
available to leverage.

00:03:21.700 --> 00:03:24.210
Depending on your preference,
whether you like command line

00:03:24.210 --> 00:03:26.890
access for automation,
or simplistic user

00:03:26.890 --> 00:03:29.260
interface for manual
conversion, there's

00:03:29.260 --> 00:03:32.330
many open source tools that
can be leveraged within Google

00:03:32.330 --> 00:03:35.700
Compute Engine to provide an
automated video transcoding

00:03:35.700 --> 00:03:37.320
pipeline.

00:03:37.320 --> 00:03:39.040
The first is ffMPEG.

00:03:39.040 --> 00:03:41.600
This is a popular,
open-source product

00:03:41.600 --> 00:03:44.600
that provides an extensive
cross-platform solution

00:03:44.600 --> 00:03:47.350
for converting videos
to streaming formats.

00:03:47.350 --> 00:03:50.450
This tool supports many
input container formats.

00:03:50.450 --> 00:03:53.590
It's a very mature tool,
and it has strong automation

00:03:53.590 --> 00:03:55.180
capabilities.

00:03:55.180 --> 00:03:59.375
The Nexus HandBrake-- another
open-source cross-platform tool

00:03:59.375 --> 00:04:02.350
that you can use to convert
any video from nearly

00:04:02.350 --> 00:04:05.410
any format to a selection
of modern, widely

00:04:05.410 --> 00:04:07.140
supported codecs.

00:04:07.140 --> 00:04:08.896
That's from the
open-source side.

00:04:08.896 --> 00:04:10.270
From a managed
perspective, there

00:04:10.270 --> 00:04:13.800
are several fully-managed
video processing solutions

00:04:13.800 --> 00:04:17.440
that integrate directly
with Google Cloud Platform.

00:04:17.440 --> 00:04:19.649
Let's look at a couple of
the popular options that

00:04:19.649 --> 00:04:21.959
could Jumpstart
your video solution,

00:04:21.959 --> 00:04:24.540
and scale up with
your app's needs.

00:04:24.540 --> 00:04:26.750
The first is
Brightcove Zencoder.

00:04:26.750 --> 00:04:28.720
This is a cloud-based
transcoding

00:04:28.720 --> 00:04:33.280
solution for both live video,
as well as video on demand.

00:04:33.280 --> 00:04:36.280
You simply push your
video to the Zencoder API,

00:04:36.280 --> 00:04:39.090
and this managed solution
takes care of the rest.

00:04:39.090 --> 00:04:41.870
Customers like Funny
or Die, SmugMug

00:04:41.870 --> 00:04:45.860
have all built their video
workflows around ZenCoder

00:04:45.860 --> 00:04:49.860
to encode large volumes of
video affordably and quickly.

00:04:49.860 --> 00:04:52.400
So this same powerful tool
set is available for you

00:04:52.400 --> 00:04:53.930
as a developer.

00:04:53.930 --> 00:04:56.050
The next is Wix media platform.

00:04:56.050 --> 00:04:57.950
Another collection
of services that

00:04:57.950 --> 00:05:00.750
allows you to store,
serve, upload, and manage

00:05:00.750 --> 00:05:03.510
images, audio, and video files.

00:05:03.510 --> 00:05:06.960
This platform allows you
to host, transcode, answer

00:05:06.960 --> 00:05:11.307
video seamlessly across any
internet-enabled device.

00:05:11.307 --> 00:05:13.890
If you want to take the work out
of standing up your own video

00:05:13.890 --> 00:05:16.580
encoding solution,
these managed services

00:05:16.580 --> 00:05:18.430
are definitely the way to go.

00:05:18.430 --> 00:05:20.760
As a quick recap,
it's very important

00:05:20.760 --> 00:05:22.940
to spend some time
thinking through what

00:05:22.940 --> 00:05:26.500
your primary objectives are
for streaming video content,

00:05:26.500 --> 00:05:28.735
from your app to
your target users.

00:05:28.735 --> 00:05:32.930
You need to think about which
options fit your app's needs.

00:05:32.930 --> 00:05:34.550
As you can see, there
are many options

00:05:34.550 --> 00:05:36.630
to leverage on Google
Cloud Platform,

00:05:36.630 --> 00:05:39.690
from open source tools, to
fully managed, third party video

00:05:39.690 --> 00:05:41.670
processing solutions.

00:05:41.670 --> 00:05:43.872
For more information,
please see the links below,

00:05:43.872 --> 00:05:44.580
and stick around.

00:05:44.580 --> 00:05:46.410
Watch the next
video to learn more

00:05:46.410 --> 00:05:48.420
about how to
effectively serve up

00:05:48.420 --> 00:05:52.581
your newly encoded video content
using Google Cloud Platform.

00:05:52.581 --> 00:05:53.330
That's it for now.

00:05:53.330 --> 00:05:56.020
The next step is delivering
these video assets

00:05:56.020 --> 00:05:58.050
in a blazing fast way.

00:05:58.050 --> 00:05:59.660
This is James
Chittenden with Google,

00:05:59.660 --> 00:06:03.040
and we will see you on the next
episode of Launchpad Online.

00:06:03.040 --> 00:06:04.670
[MUSIC PLAYING]

