WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.856
[MUSIC PLAYING]

00:00:06.200 --> 00:00:07.610
PAUL LEWIS: Hello, everyone!

00:00:07.610 --> 00:00:08.910
JAKE ARCHIBALD: Hi, ya!

00:00:08.910 --> 00:00:11.810
PAUL LEWIS: How is it going?

00:00:11.810 --> 00:00:12.860
JAKE ARCHIBALD: Oh!

00:00:12.860 --> 00:00:15.351
OK, so this session is
going to be a little bit

00:00:15.351 --> 00:00:16.059
different, right?

00:00:16.059 --> 00:00:18.800
PAUL LEWIS: Yeah, but we should
actually introduce ourselves.

00:00:18.800 --> 00:00:19.820
I'm Paul.

00:00:19.820 --> 00:00:20.900
He's Jake.

00:00:20.900 --> 00:00:23.017
We work in Dev Rel.

00:00:23.017 --> 00:00:23.850
JAKE ARCHIBALD: Yes.

00:00:23.850 --> 00:00:26.240
PAUL LEWIS: Now we've been
doing web stuff for a while,

00:00:26.240 --> 00:00:27.939
and it still manages
to surprise us.

00:00:27.939 --> 00:00:29.480
So we've written a
quiz that explores

00:00:29.480 --> 00:00:32.119
the weird and wonderful
corners of the web.

00:00:32.119 --> 00:00:33.690
JAKE ARCHIBALD: But we're also
going to dig into the answers

00:00:33.690 --> 00:00:35.450
and hopefully explain
parts of the web platform

00:00:35.450 --> 00:00:37.366
in a way that will help
you with your projects

00:00:37.366 --> 00:00:40.340
and let you build faster, more
reliable, progressive web apps.

00:00:40.340 --> 00:00:43.730
PAUL LEWIS: And of course,
the quiz itself is a PWA.

00:00:43.730 --> 00:00:46.257
So prepare yourselves, Get
your smartphones, tablets,

00:00:46.257 --> 00:00:47.840
or laptops at the
ready, because we're

00:00:47.840 --> 00:00:54.558
going to play the Big Web Quiz.

00:00:54.558 --> 00:00:55.558
JAKE ARCHIBALD: Oh, yes.

00:00:58.420 --> 00:01:00.700
Paul did spend
three hours making

00:01:00.700 --> 00:01:03.250
that one intro in After
Effects, by the way.

00:01:03.250 --> 00:01:05.290
PAUL LEWIS: More
like six, whatever.

00:01:05.290 --> 00:01:06.520
Worth every minute.

00:01:06.520 --> 00:01:07.900
JAKE ARCHIBALD: So if
you want to play along,

00:01:07.900 --> 00:01:09.340
and you should,
because it's basically

00:01:09.340 --> 00:01:11.423
the whole point of this
session, get yourself down

00:01:11.423 --> 00:01:14.434
to bigwebquiz.com and log in
with your Google accounts.

00:01:14.434 --> 00:01:15.850
PAUL LEWIS: And
of course, this is

00:01:15.850 --> 00:01:18.124
the part where we panic about
the server falling down.

00:01:18.124 --> 00:01:20.040
JAKE ARCHIBALD: It's OK
though, we did test it

00:01:20.040 --> 00:01:20.860
at Chrome Dev Summit.

00:01:20.860 --> 00:01:22.630
PAUL LEWIS: Yes, and
the server fell down!

00:01:22.630 --> 00:01:23.796
JAKE ARCHIBALD: Yes, it did.

00:01:23.796 --> 00:01:24.910
But I think we fixed that.

00:01:24.910 --> 00:01:27.340
And with a little bit of
luck, it should be OK.

00:01:27.340 --> 00:01:27.700
Yeah, it should be fine.

00:01:27.700 --> 00:01:29.590
PAUL LEWIS: But then your
laptop screwed up on this stage

00:01:29.590 --> 00:01:30.120
last year.

00:01:30.120 --> 00:01:31.480
JAKE ARCHIBALD: Last
year, my laptop broke.

00:01:31.480 --> 00:01:32.650
But that's a new laptop now.

00:01:32.650 --> 00:01:34.950
In fact, it's the first time
I've ever presented from it.

00:01:34.950 --> 00:01:35.590
So it probably--

00:01:35.590 --> 00:01:37.000
PAUL LEWIS: An untested laptop
is what you're telling me.

00:01:37.000 --> 00:01:38.720
JAKE ARCHIBALD:
--going to be fine.

00:01:38.720 --> 00:01:40.000
They weren't being
able to get logged in?

00:01:40.000 --> 00:01:41.250
Is that sort of thing working?

00:01:41.250 --> 00:01:42.452
Yes, thumbs up!

00:01:42.452 --> 00:01:44.160
Oh, we're winning from
Chrome Dev Summit.

00:01:44.160 --> 00:01:44.800
That's just so unreal.

00:01:44.800 --> 00:01:46.285
PAUL LEWIS: I mean, obviously.

00:01:46.285 --> 00:01:47.290
JAKE ARCHIBALD: Yeah,
last time we did it,

00:01:47.290 --> 00:01:48.360
people were just
shaking their heads,

00:01:48.360 --> 00:01:50.210
and we were like,
what do we do now?

00:01:50.210 --> 00:01:51.001
Do we just have a--

00:01:51.001 --> 00:01:52.870
PAUL LEWIS: Panic, blind panic.

00:01:52.870 --> 00:01:54.010
JAKE ARCHIBALD: OK.

00:01:54.010 --> 00:01:55.830
PAUL LEWIS: Anyway, we're
going to show the top players

00:01:55.830 --> 00:01:58.038
at the end of the game and
at some points throughout.

00:01:58.038 --> 00:02:00.692
But we only want to do
that with your permission.

00:02:00.692 --> 00:02:02.600
So if you want to appear
on the leaderboard,

00:02:02.600 --> 00:02:05.117
click on your avatar and
click up here on Leaderboard.

00:02:05.117 --> 00:02:06.700
JAKE ARCHIBALD: Yeah,
so if you phoned

00:02:06.700 --> 00:02:09.729
in sick so you could come
here instead, don't opt-in.

00:02:09.729 --> 00:02:12.460
Because your massive face
appearing on this screen

00:02:12.460 --> 00:02:14.410
might give things away
a little bit, you know.

00:02:14.410 --> 00:02:19.550
Oh, of course, no quiz is
complete without a grand prize.

00:02:19.550 --> 00:02:22.180
PAUL LEWIS: Yes, unfortunately,
unfortunately the organizers

00:02:22.180 --> 00:02:24.040
of Google I/O told
us we weren't allowed

00:02:24.040 --> 00:02:25.930
to have our own giveaway.

00:02:25.930 --> 00:02:27.700
But we came up
with a compromise.

00:02:27.700 --> 00:02:32.140
JAKE ARCHIBALD: Yeah, we
said, what if our prize was

00:02:32.140 --> 00:02:35.350
of such low quality
that winning it

00:02:35.350 --> 00:02:38.329
would kind of feel like losing?

00:02:38.329 --> 00:02:40.120
PAUL LEWIS: Yes, so if
you play the Big Web

00:02:40.120 --> 00:02:42.970
Quiz, opt-in to the leaderboard,
and use your esoteric web

00:02:42.970 --> 00:02:44.830
knowledge to make it
into the top three,

00:02:44.830 --> 00:02:48.400
you will become the proud owner
of the official Big Web Quiz

00:02:48.400 --> 00:02:49.040
mousepad.

00:02:49.040 --> 00:02:51.884
[CHEERING]

00:02:54.730 --> 00:02:56.950
JAKE ARCHIBALD: Oh, yeah.

00:02:56.950 --> 00:02:59.076
PAUL LEWIS: I think we all
know he's enjoying that.

00:02:59.076 --> 00:03:01.158
JAKE ARCHIBALD: We've been
asked to make it clear.

00:03:01.158 --> 00:03:02.530
You only get the mousepad.

00:03:02.530 --> 00:03:04.490
Paul Irish is sold separately.

00:03:04.490 --> 00:03:10.660
So if you are watching this
on the live stream, hello.

00:03:10.660 --> 00:03:12.160
And feel free to
play along as well.

00:03:12.160 --> 00:03:15.880
You can't win the
mousepad, unfortunately.

00:03:15.880 --> 00:03:17.170
And there's a delay, right?

00:03:17.170 --> 00:03:17.660
PAUL LEWIS: There is.

00:03:17.660 --> 00:03:18.160
JAKE ARCHIBALD: The live stream.

00:03:18.160 --> 00:03:19.840
PAUL LEWIS: Yeah, about
30 seconds behind reality.

00:03:19.840 --> 00:03:21.850
So you need to watch for
the questions appearing

00:03:21.850 --> 00:03:25.480
on your device as the question
may end before the video makes

00:03:25.480 --> 00:03:26.620
its way to you.

00:03:26.620 --> 00:03:27.380
JAKE ARCHIBALD:
Yeah, so in fact,

00:03:27.380 --> 00:03:29.338
if you're watching this
in the live stream now,

00:03:29.338 --> 00:03:31.840
we've probably started the
first question already.

00:03:31.840 --> 00:03:34.540
Because we're going to be
doing that in 30 seconds.

00:03:34.540 --> 00:03:36.940
And you are living in
the future right now.

00:03:36.940 --> 00:03:37.940
PAUL LEWIS: Ooh.

00:03:37.940 --> 00:03:39.150
JAKE ARCHIBALD: Paul,
this is hurting my head.

00:03:39.150 --> 00:03:41.050
PAUL LEWIS: The evidence in
which to confuse you, really.

00:03:41.050 --> 00:03:42.220
Shall we do a practice question?

00:03:42.220 --> 00:03:43.480
Make sure everything is working?

00:03:43.480 --> 00:03:45.355
JAKE ARCHIBALD: Yes,
let's see if this works.

00:03:45.355 --> 00:03:46.180
Let's give it a go.

00:03:46.180 --> 00:03:47.920
So devices at the ready.

00:03:47.920 --> 00:03:50.500
Here comes the first question.

00:03:50.500 --> 00:03:52.990
PAUL LEWIS: What
does PWA stand for?

00:03:52.990 --> 00:03:55.000
Is it progressive
web app, produced

00:03:55.000 --> 00:03:58.270
with angular, partially wheeled
automobile, or perfectly

00:03:58.270 --> 00:04:00.592
waterproofed anorak?

00:04:00.592 --> 00:04:02.550
JAKE ARCHIBALD: Anorak,
is that a word that's--

00:04:02.550 --> 00:04:03.075
PAUL LEWIS: It's a coat.

00:04:03.075 --> 00:04:03.575
It's a coat.

00:04:03.575 --> 00:04:05.908
JAKE ARCHIBALD: It obviously
makes for the right answer.

00:04:05.908 --> 00:04:06.640
PAUL LEWIS: Yeah.

00:04:06.640 --> 00:04:07.660
JAKE ARCHIBALD: The
question should,

00:04:07.660 --> 00:04:10.066
if everything's working, be
appearing on your phones now.

00:04:10.066 --> 00:04:11.940
So pick the answer that
you think is correct,

00:04:11.940 --> 00:04:13.180
and hit Submit.

00:04:13.180 --> 00:04:15.320
Very important that
you hit Submit.

00:04:15.320 --> 00:04:17.028
PAUL LEWIS: And while
you are doing that,

00:04:17.028 --> 00:04:19.089
let's see how the
results are looking.

00:04:19.089 --> 00:04:20.797
JAKE ARCHIBALD: So
what we're seeing here

00:04:20.797 --> 00:04:23.110
is the percentage of
you picking each answer.

00:04:23.110 --> 00:04:24.912
However, the order
is randomized.

00:04:24.912 --> 00:04:26.370
PAUL LEWIS: The
order is randomized

00:04:26.370 --> 00:04:27.580
compared to your devices.

00:04:27.580 --> 00:04:29.202
It may not be in the same order.

00:04:29.202 --> 00:04:31.660
JAKE ARCHIBALD: Yes, but can
see that you're all converging

00:04:31.660 --> 00:04:33.460
on one particular answer.

00:04:33.460 --> 00:04:34.862
Wonder which one that might be.

00:04:34.862 --> 00:04:36.570
PAUL LEWIS: Should we
close the question?

00:04:36.570 --> 00:04:39.230
JAKE ARCHIBALD: We're closing
the question in 3, 2, 1.

00:04:41.960 --> 00:04:42.627
And there it is.

00:04:42.627 --> 00:04:43.626
PAUL LEWIS: There it is.

00:04:43.626 --> 00:04:44.710
JAKE ARCHIBALD: Oh, OK.

00:04:44.710 --> 00:04:47.010
Some of you think it's
produced with angular.

00:04:47.010 --> 00:04:48.090
That's interesting, OK.

00:04:48.090 --> 00:04:49.260
PAUL LEWIS: Perfectly
waterproofed anorak.

00:04:49.260 --> 00:04:51.060
JAKE ARCHIBALD:
Obviously, somebody

00:04:51.060 --> 00:04:53.070
hasn't really thought about it.

00:04:53.070 --> 00:04:55.080
Been to a session yet.

00:04:55.080 --> 00:04:58.160
The correct answer is, of
course, progressive web app.

00:04:58.160 --> 00:04:59.160
PAUL LEWIS: Yes.

00:04:59.160 --> 00:05:00.868
JAKE ARCHIBALD: So we
didn't award points

00:05:00.868 --> 00:05:03.490
for that question, since it's
just for a bit of a practice.

00:05:03.490 --> 00:05:04.440
But one thing we
do want to stress

00:05:04.440 --> 00:05:06.689
is that you have to hit that
Submit button once you've

00:05:06.689 --> 00:05:08.920
pick your answer, else we
don't find out about it.

00:05:08.920 --> 00:05:09.072
PAUL LEWIS: Yeah.

00:05:09.072 --> 00:05:10.320
It turned out that
during the rehearsal,

00:05:10.320 --> 00:05:12.070
some of our colleagues
didn't realize that

00:05:12.070 --> 00:05:13.380
and they scored zero points.

00:05:13.380 --> 00:05:14.310
JAKE ARCHIBALD: Yes.

00:05:14.310 --> 00:05:16.050
And in true web fashion,
like rather than

00:05:16.050 --> 00:05:17.862
fix the problem
properly, we thought

00:05:17.862 --> 00:05:20.070
we'd just sort of gaffer
tape over it with this slide

00:05:20.070 --> 00:05:22.403
and just tell you, just make
sure you press that button.

00:05:22.403 --> 00:05:25.190
PAUL LEWIS: Read
the instructions.

00:05:25.190 --> 00:05:26.939
So everybody knows
what they're doing?

00:05:26.939 --> 00:05:28.230
Let's get serious now, I think.

00:05:28.230 --> 00:05:29.063
JAKE ARCHIBALD: Yes.

00:05:29.063 --> 00:05:33.425
From now on, each question will
award a maximum of four points.

00:05:33.425 --> 00:05:34.704
PAUL LEWIS: Yes, indeed.

00:05:34.704 --> 00:05:36.245
That's a nice round
number, isn't it?

00:05:36.245 --> 00:05:36.786
Power of two.

00:05:36.786 --> 00:05:37.695
Very happy with that.

00:05:37.695 --> 00:05:38.010
JAKE ARCHIBALD: Right.

00:05:38.010 --> 00:05:38.240
OK.

00:05:38.240 --> 00:05:39.860
So we're going to kick
everything off with a deep dive

00:05:39.860 --> 00:05:40.677
into loading stuff.

00:05:40.677 --> 00:05:43.260
Because if you want to build a
successful progressive web app,

00:05:43.260 --> 00:05:46.012
you need to minimize the time
from the user clicking a link,

00:05:46.012 --> 00:05:47.970
and then actually having
your app on the screen

00:05:47.970 --> 00:05:48.760
and being able to use it.

00:05:48.760 --> 00:05:49.050
PAUL LEWIS: Yeah.

00:05:49.050 --> 00:05:51.330
No, this is the difference
between a fast app

00:05:51.330 --> 00:05:52.507
and a slow app, of course.

00:05:52.507 --> 00:05:53.340
JAKE ARCHIBALD: Yes.

00:05:53.340 --> 00:05:56.160
So ideally, progressive web
app should load bit by bit.

00:05:56.160 --> 00:05:58.530
Some might say progressively.

00:05:58.530 --> 00:06:00.800
However, some loading
techniques get in the way

00:06:00.800 --> 00:06:01.800
of parsing and painting.

00:06:01.800 --> 00:06:03.258
And that can result
in the browser,

00:06:03.258 --> 00:06:06.060
like downloading loads of
stuff, but being unable to show

00:06:06.060 --> 00:06:07.270
any of it to the user.

00:06:07.270 --> 00:06:09.290
And then once everything
is downloaded, ta-da.

00:06:09.290 --> 00:06:10.472
There's this big reveal.

00:06:10.472 --> 00:06:11.430
PAUL LEWIS: Absolutely.

00:06:11.430 --> 00:06:12.660
And that's bad for the
user because they're

00:06:12.660 --> 00:06:14.450
left staring at a
white screen, wondering

00:06:14.450 --> 00:06:17.280
if stuff's downloading, whether
their connection is hung.

00:06:17.280 --> 00:06:20.015
Whereas, a progressive render
improves the perception

00:06:20.015 --> 00:06:21.390
of performance
because things can

00:06:21.390 --> 00:06:22.745
start appearing much sooner.

00:06:22.745 --> 00:06:23.620
JAKE ARCHIBALD: Yeah.

00:06:23.620 --> 00:06:24.810
And internally,
this is good as well

00:06:24.810 --> 00:06:26.685
because the browser can
create these elements

00:06:26.685 --> 00:06:29.496
as the HTML downloads, which
is much faster than doing all

00:06:29.496 --> 00:06:30.870
of the download
as one step, then

00:06:30.870 --> 00:06:33.480
doing all of the parsing as
a completely separate step.

00:06:33.480 --> 00:06:35.429
And that brings us
to our next question.

00:06:35.429 --> 00:06:36.095
PAUL LEWIS: Yes.

00:06:36.095 --> 00:06:38.250
JAKE ARCHIBALD: So
devices at the ready.

00:06:38.250 --> 00:06:39.870
Here it comes.

00:06:39.870 --> 00:06:43.240
Which of the following
script elements

00:06:43.240 --> 00:06:45.440
blocks the parser while
the script downloads?

00:06:45.440 --> 00:06:48.110
So we have a normal
script tag there.

00:06:48.110 --> 00:06:51.700
We've got a script with
defer, a script with async,

00:06:51.700 --> 00:06:53.330
and a script with
async equals false.

00:06:53.330 --> 00:06:53.870
PAUL LEWIS: Now,
this is a little

00:06:53.870 --> 00:06:55.411
different to the
last one because you

00:06:55.411 --> 00:06:58.177
can select all answers
that you think are true.

00:06:58.177 --> 00:07:00.260
And you're gonna get to
get points for the answers

00:07:00.260 --> 00:07:02.385
that you select that turn
out to be true and points

00:07:02.385 --> 00:07:04.520
for not selecting the
ones that are false.

00:07:04.520 --> 00:07:05.470
JAKE ARCHIBALD: Yeah,
it's actually simpler

00:07:05.470 --> 00:07:06.310
that it sounds on this.

00:07:06.310 --> 00:07:08.120
You get 4 points for
getting it fully right.

00:07:08.120 --> 00:07:09.470
You get 2 points if
you get it half right.

00:07:09.470 --> 00:07:09.770
PAUL LEWIS: Yeah.

00:07:09.770 --> 00:07:10.830
And it might be all of them.

00:07:10.830 --> 00:07:11.600
It might be none of them.

00:07:11.600 --> 00:07:13.235
It might be somewhere
in the middle.

00:07:13.235 --> 00:07:15.170
JAKE ARCHIBALD: Also, you
can submit as many times

00:07:15.170 --> 00:07:15.669
as you want.

00:07:15.669 --> 00:07:17.984
So if you change your
mind at the last second,

00:07:17.984 --> 00:07:18.650
you can do that.

00:07:18.650 --> 00:07:19.760
Just make sure you
hit the Submit button.

00:07:19.760 --> 00:07:20.240
PAUL LEWIS: OK.

00:07:20.240 --> 00:07:21.150
Let's look at the voting.

00:07:21.150 --> 00:07:22.350
Don't worry, you'll get
[? faxed on ?] this.

00:07:22.350 --> 00:07:24.140
JAKE ARCHIBALD: Let's
see how things are going.

00:07:24.140 --> 00:07:24.680
OK.

00:07:24.680 --> 00:07:26.970
So already, we got a kind
of spread of answers.

00:07:26.970 --> 00:07:29.210
We got two that you're
pretty confident on, two

00:07:29.210 --> 00:07:30.687
that you're less confident on.

00:07:30.687 --> 00:07:32.020
You've had enough time to guess.

00:07:32.020 --> 00:07:34.174
So if you haven't
guessed already, guess.

00:07:34.174 --> 00:07:35.590
But we're gonna
lock the question.

00:07:35.590 --> 00:07:36.089
Close it.

00:07:36.089 --> 00:07:37.780
3, 2, 1.

00:07:37.780 --> 00:07:38.850
Lock it.

00:07:38.850 --> 00:07:39.460
There you go.

00:07:39.460 --> 00:07:40.160
OK.

00:07:40.160 --> 00:07:41.920
So what we're seeing here,
we're thinking a normal script

00:07:41.920 --> 00:07:42.860
element blocks the parser.

00:07:42.860 --> 00:07:43.840
And we're also
thinking that async

00:07:43.840 --> 00:07:45.320
equals false one is
going to do the same.

00:07:45.320 --> 00:07:46.319
PAUL LEWIS: Interesting.

00:07:46.319 --> 00:07:49.240
JAKE ARCHIBALD:
The correct answer?

00:07:49.240 --> 00:07:50.610
It's just that one.

00:07:50.610 --> 00:07:51.730
Just the normal script.

00:07:51.730 --> 00:07:52.420
PAUL LEWIS: There's
some happy people.

00:07:52.420 --> 00:07:54.227
There's some less happy people.

00:07:54.227 --> 00:07:55.060
JAKE ARCHIBALD: Yes.

00:07:55.060 --> 00:07:56.650
Although it was a
multi-select, it

00:07:56.650 --> 00:07:58.720
was only one of them that
was actually correct.

00:07:58.720 --> 00:07:59.696
PAUL LEWIS: Cheeky.

00:07:59.696 --> 00:08:01.570
JAKE ARCHIBALD: Scripts
are awful by default.

00:08:01.570 --> 00:08:04.134
They block parsing while
they download and execute.

00:08:04.134 --> 00:08:06.050
Deferred and async
scripts, on the other hand,

00:08:06.050 --> 00:08:08.230
they do not block the
parser while they download.

00:08:08.230 --> 00:08:10.396
The difference between the
two is when they execute.

00:08:10.396 --> 00:08:12.610
Deferred scripts execute
once parsing is complete.

00:08:12.610 --> 00:08:14.170
And they always
execute in the order

00:08:14.170 --> 00:08:16.156
that the HTML parser
discovers them.

00:08:16.156 --> 00:08:17.530
Async scripts, on
the other hand,

00:08:17.530 --> 00:08:19.389
they execute as soon
as they download.

00:08:19.389 --> 00:08:21.430
And that means they can
run in a different order.

00:08:21.430 --> 00:08:22.971
PAUL LEWIS: And you
may have noticed,

00:08:22.971 --> 00:08:24.850
async equals false was
in the list of options

00:08:24.850 --> 00:08:25.540
for that last question.

00:08:25.540 --> 00:08:25.675
JAKE ARCHIBALD: Yeah.

00:08:25.675 --> 00:08:26.633
It doesn't do anything.

00:08:26.633 --> 00:08:29.000
The browser ignores the
attribute value completely.

00:08:29.000 --> 00:08:29.920
PAUL LEWIS: Yeah.

00:08:29.920 --> 00:08:32.860
So what you're basically saying
is async equals false is true,

00:08:32.860 --> 00:08:34.944
which I absolutely
adore [INAUDIBLE] web.

00:08:34.944 --> 00:08:36.360
JAKE ARCHIBALD:
Yes, that is true.

00:08:36.360 --> 00:08:39.039
And that's true of most HTML
stuff, like Boolean attributes.

00:08:39.039 --> 00:08:41.035
They're either there
or they're not.

00:08:41.035 --> 00:08:42.909
The exception is ARIA,
where you can actually

00:08:42.909 --> 00:08:43.867
set things to be false.

00:08:43.867 --> 00:08:45.110
PAUL LEWIS: True story.

00:08:45.110 --> 00:08:46.700
JAKE ARCHIBALD: So let's talk
about which one of these--

00:08:46.700 --> 00:08:48.860
when to use the right
one, which one is best.

00:08:48.860 --> 00:08:50.800
PAUL LEWIS: OK.

00:08:50.800 --> 00:08:53.552
So having the script execute
in any order is probably risky.

00:08:53.552 --> 00:08:55.510
Because if you've got,
say, five async scripts,

00:08:55.510 --> 00:08:58.060
you've got 120
different permutations

00:08:58.060 --> 00:08:59.540
of execution order.

00:08:59.540 --> 00:09:02.474
And so if your scripts rely
on one another, one of them

00:09:02.474 --> 00:09:04.640
causes failure, then you
don't know where you're at.

00:09:04.640 --> 00:09:06.400
That's a tricky bug to
reproduce and to solve.

00:09:06.400 --> 00:09:06.880
JAKE ARCHIBALD: Yeah.

00:09:06.880 --> 00:09:08.717
Deferred scripts are
better in this regard

00:09:08.717 --> 00:09:10.300
because they run at
a predictable time

00:09:10.300 --> 00:09:11.682
and in a predictable order.

00:09:11.682 --> 00:09:13.015
But if you've got this kind of--

00:09:13.015 --> 00:09:14.860
a really long article
and your script

00:09:14.860 --> 00:09:17.525
is to enhance a button that's
at the very top of the page,

00:09:17.525 --> 00:09:19.900
it's a big waste of time to
be waiting for the whole page

00:09:19.900 --> 00:09:22.335
to download just to enhance that
little button at the top there.

00:09:22.335 --> 00:09:22.490
PAUL LEWIS: Absolutely.

00:09:22.490 --> 00:09:23.890
So JavaScript
execution is always

00:09:23.890 --> 00:09:26.886
going to block the parser
and other JavaScript.

00:09:26.886 --> 00:09:29.510
So async scripts could actually
cause jank during the page load

00:09:29.510 --> 00:09:31.300
if they're big or
complex and they just

00:09:31.300 --> 00:09:33.155
arrived during the
middle of your page load.

00:09:33.155 --> 00:09:35.740
JAKE ARCHIBALD: So the
answer really is it depends.

00:09:35.740 --> 00:09:37.090
Really, it depends.

00:09:37.090 --> 00:09:39.710
Test it and do whatever gives
the best user experience

00:09:39.710 --> 00:09:40.210
for users.

00:09:40.210 --> 00:09:41.920
PAUL LEWIS: It turns out,
tools, not rules is probably

00:09:41.920 --> 00:09:43.250
a good guiding principle here.

00:09:43.250 --> 00:09:43.875
JAKE ARCHIBALD: Tools not rules.

00:09:43.875 --> 00:09:45.640
PAUL LEWIS: Oh, we
should have said.

00:09:45.640 --> 00:09:48.400
At the end of this
session, bigwebquiz.com

00:09:48.400 --> 00:09:51.835
will show a set of links to
resources and documentation

00:09:51.835 --> 00:09:53.710
for the things that
we've been talking about,

00:09:53.710 --> 00:09:55.450
in case you don't
believe us or you

00:09:55.450 --> 00:09:57.629
want to learn more
about a particular area.

00:09:57.629 --> 00:09:58.420
JAKE ARCHIBALD: OK.

00:09:58.420 --> 00:10:01.460
So we've been discussing these
scripts here, but they're old.

00:10:01.460 --> 00:10:04.360
They've been around for
years, but there is a new way

00:10:04.360 --> 00:10:05.350
to load JavaScript.

00:10:05.350 --> 00:10:06.310
Ooh.

00:10:06.310 --> 00:10:08.290
Scripts can be loaded
as ECMAScript modules.

00:10:08.290 --> 00:10:10.330
And it's this type
equals module thing that

00:10:10.330 --> 00:10:11.755
makes it a bit different.

00:10:11.755 --> 00:10:14.130
Module scripts can be external
resources using the source

00:10:14.130 --> 00:10:17.701
attribute like this, or they can
be in line like normal scripts.

00:10:17.701 --> 00:10:19.450
The exciting thing you
can do with modules

00:10:19.450 --> 00:10:22.182
is use these import statements
to dynamically load scripts.

00:10:22.182 --> 00:10:23.890
And this is actually
supported in Safari,

00:10:23.890 --> 00:10:26.080
in the stable version right now.

00:10:26.080 --> 00:10:29.110
But it's also behind the flag
in Chrome, Firefox, and Edge.

00:10:29.110 --> 00:10:30.872
But once it lands in
all of our browsers,

00:10:30.872 --> 00:10:33.080
I think it's definitely the
best way to load scripts.

00:10:33.080 --> 00:10:33.410
PAUL LEWIS: Yeah.

00:10:33.410 --> 00:10:35.035
JAKE ARCHIBALD: It's
good [? recall. ?]

00:10:35.035 --> 00:10:37.655
So on that note, here comes
a really cruel question.

00:10:37.655 --> 00:10:39.030
PAUL LEWIS: Devices
at the ready.

00:10:39.030 --> 00:10:40.820
Here we go.

00:10:40.820 --> 00:10:44.390
According to the specification,
which of the following scripts

00:10:44.390 --> 00:10:45.072
executes first?

00:10:45.072 --> 00:10:46.780
JAKE ARCHIBALD: That's
a good quiz voice.

00:10:46.780 --> 00:10:47.696
PAUL LEWIS: Thank you.

00:10:47.696 --> 00:10:48.920
I've been practicing it--

00:10:48.920 --> 00:10:50.770
backstage, in my hotel room.

00:10:50.770 --> 00:10:51.850
It's been very awkward.

00:10:51.850 --> 00:10:52.370
JAKE ARCHIBALD: So
what have we got here?

00:10:52.370 --> 00:10:53.440
PAUL LEWIS: So we got
type equals module,

00:10:53.440 --> 00:10:55.148
type equals module
with something inline,

00:10:55.148 --> 00:10:57.030
defer with something
inline, and then

00:10:57.030 --> 00:10:59.600
standard issue script there
but with defer on it as well.

00:10:59.600 --> 00:11:01.308
JAKE ARCHIBALD: Which
one executes first?

00:11:01.308 --> 00:11:03.550
Let's see what
you're saying so far.

00:11:03.550 --> 00:11:04.050
OK.

00:11:04.050 --> 00:11:06.450
So it's kind of-- there's a
bit of a debate around two

00:11:06.450 --> 00:11:07.555
of the answers.

00:11:07.555 --> 00:11:09.280
[INTERPOSING VOICES]

00:11:09.280 --> 00:11:10.770
JAKE ARCHIBALD:
But it's fairly--

00:11:10.770 --> 00:11:12.750
if you haven't guessed
already, get a guess in.

00:11:12.750 --> 00:11:14.499
There's no harm in
guessing because we are

00:11:14.499 --> 00:11:15.670
going to close the question.

00:11:15.670 --> 00:11:20.800
3, 2, 1, and it's closed.

00:11:20.800 --> 00:11:22.092
So what we're seeing here?

00:11:22.092 --> 00:11:23.550
Some people think
script 1 is going

00:11:23.550 --> 00:11:26.910
to execute first, which makes
sense in terms of numbers.

00:11:26.910 --> 00:11:28.190
It's the first number.

00:11:28.190 --> 00:11:28.950
I like that.

00:11:28.950 --> 00:11:30.660
That's probably how we
actually write our questions.

00:11:30.660 --> 00:11:32.520
Some people thinking script 2,
which isn't the first number.

00:11:32.520 --> 00:11:32.875
PAUL LEWIS: No, there you go.

00:11:32.875 --> 00:11:34.020
Thank you for that, Jake.

00:11:34.020 --> 00:11:38.605
JAKE ARCHIBALD: The answer
though, it is script 3.

00:11:38.605 --> 00:11:39.105
Ooh.

00:11:39.105 --> 00:11:39.604
Oh, yes.

00:11:39.604 --> 00:11:43.331
Someone is very happy
at the front there.

00:11:43.331 --> 00:11:43.830
OK.

00:11:43.830 --> 00:11:45.330
Here's why that is.

00:11:45.330 --> 00:11:47.640
Like I said before, the
way scripts block execution

00:11:47.640 --> 00:11:50.670
by default while they download,
that was a bad design.

00:11:50.670 --> 00:11:51.660
A real design mistake.

00:11:51.660 --> 00:11:54.090
So module scripts have
a different default.

00:11:54.090 --> 00:11:55.560
They are deferred.

00:11:55.560 --> 00:11:58.170
But the same also goes
for inline module scripts.

00:11:58.170 --> 00:12:01.170
And this is actually pretty new
because regular inline scripts

00:12:01.170 --> 00:12:02.237
cannot be deferred.

00:12:02.237 --> 00:12:04.320
So in this case, the
attribute is totally ignored,

00:12:04.320 --> 00:12:07.350
making it just a normal script,
which executes immediately.

00:12:07.350 --> 00:12:08.580
So it's first.

00:12:08.580 --> 00:12:11.010
You can also use async as
well on module scripts.

00:12:11.010 --> 00:12:13.590
And this causes it to execute
as soon as all of its imports

00:12:13.590 --> 00:12:14.270
have downloaded.

00:12:14.270 --> 00:12:16.270
PAUL LEWIS: Now, fetching
stuff from the network

00:12:16.270 --> 00:12:19.080
quickly is important, but
not having to fetch it at all

00:12:19.080 --> 00:12:19.920
is even better.

00:12:19.920 --> 00:12:23.877
So we're going to take ourselves
a dive into some caching stuff.

00:12:23.877 --> 00:12:25.710
And there are two basic
types of cache usage

00:12:25.710 --> 00:12:26.760
that we're interested in here.

00:12:26.760 --> 00:12:28.301
When the page fetches
something, it's

00:12:28.301 --> 00:12:31.080
going to start by looking for
a match in the HTTP cache.

00:12:31.080 --> 00:12:34.110
Sometimes, the thing it finds
needs validating with a server.

00:12:34.110 --> 00:12:36.350
So it makes a connection
and says, hey, I've

00:12:36.350 --> 00:12:37.530
got this thing already.

00:12:37.530 --> 00:12:40.254
It's this old and
it's this shaped.

00:12:40.254 --> 00:12:41.670
And the server can
either say, no.

00:12:41.670 --> 00:12:42.940
Don't use that.

00:12:42.940 --> 00:12:44.160
Here's a newer version.

00:12:44.160 --> 00:12:46.410
Or, it sends back a tiny
message saying, yeah,

00:12:46.410 --> 00:12:48.349
you're good to use
what you've got.

00:12:48.349 --> 00:12:49.890
Now, if that happens,
the cache sends

00:12:49.890 --> 00:12:51.690
what it has back to the page.

00:12:51.690 --> 00:12:54.070
Sometimes, however, the
browser makes a fetch.

00:12:54.070 --> 00:12:55.596
It finds a result
in the HTTP cache.

00:12:55.596 --> 00:12:57.970
But this time, it doesn't need
validating with a service,

00:12:57.970 --> 00:12:59.720
so it just goes
ahead and uses it.

00:12:59.720 --> 00:13:01.430
It doesn't even ask
the server at all.

00:13:01.430 --> 00:13:03.180
JAKE ARCHIBALD: And
that is faster, right?

00:13:03.180 --> 00:13:06.120
Especially for small assets
where just making the request,

00:13:06.120 --> 00:13:08.550
making that connection is
the majority of the work.

00:13:08.550 --> 00:13:09.780
PAUL LEWIS: The primary
way to tell the browser

00:13:09.780 --> 00:13:12.470
how it should use the cache
is the cache control response

00:13:12.470 --> 00:13:14.880
header, which takes
a variety of values.

00:13:14.880 --> 00:13:16.250
JAKE ARCHIBALD: A variety.

00:13:16.250 --> 00:13:19.171
But do you know what they
are and what they do?

00:13:19.171 --> 00:13:20.420
PAUL LEWIS: Because we didn't.

00:13:20.420 --> 00:13:21.870
JAKE ARCHIBALD: No, we did not.

00:13:21.870 --> 00:13:23.096
But let's find out if you do.

00:13:23.096 --> 00:13:23.970
Devices at the ready.

00:13:23.970 --> 00:13:25.930
Here comes the next question.

00:13:25.930 --> 00:13:28.950
So this one, what
does that header--

00:13:28.950 --> 00:13:30.900
what does that header
as a response header

00:13:30.900 --> 00:13:32.220
tell the browser to do?

00:13:32.220 --> 00:13:34.740
Does it say, don't
put this in the cache?

00:13:34.740 --> 00:13:36.750
Does it mean, cache
it, but you can only

00:13:36.750 --> 00:13:38.430
use it after server validation?

00:13:38.430 --> 00:13:40.530
Or does it mean cache
it, and you can use it

00:13:40.530 --> 00:13:45.770
without server validation
for 31,536,000 seconds, which

00:13:45.770 --> 00:13:46.530
is a year?

00:13:46.530 --> 00:13:46.890
PAUL LEWIS: Yeah.

00:13:46.890 --> 00:13:48.348
So let's have a
look at the voting.

00:13:48.348 --> 00:13:50.020
See how we're doing.

00:13:50.020 --> 00:13:52.020
JAKE ARCHIBALD: Oh, I
love it when this happens.

00:13:52.020 --> 00:13:53.510
50/50 on two of them.

00:13:53.510 --> 00:13:54.800
That's exciting.

00:13:54.800 --> 00:13:57.564
PAUL LEWIS: Some happy,
some sad, some confused.

00:13:57.564 --> 00:13:58.980
JAKE ARCHIBALD:
There's definitely

00:13:58.980 --> 00:14:00.870
one answer people are
thinking it's definitely not.

00:14:00.870 --> 00:14:01.660
PAUL LEWIS: Should
we lock it in?

00:14:01.660 --> 00:14:02.040
JAKE ARCHIBALD: Yes.

00:14:02.040 --> 00:14:03.670
Get a guess in if
you haven't already.

00:14:03.670 --> 00:14:04.405
PAUL LEWIS: 2.

00:14:04.405 --> 00:14:05.630
3.

00:14:05.630 --> 00:14:06.340
3, 2.

00:14:06.340 --> 00:14:06.650
JAKE ARCHIBALD: 8.

00:14:06.650 --> 00:14:07.420
PAUL LEWIS: 17.

00:14:07.420 --> 00:14:07.960
JAKE ARCHIBALD: 28.

00:14:07.960 --> 00:14:08.540
42.

00:14:08.540 --> 00:14:09.410
Lock it.

00:14:09.410 --> 00:14:11.761
Lock it in.

00:14:11.761 --> 00:14:12.260
OK.

00:14:12.260 --> 00:14:14.720
So you're saying cache
it, but you can use it

00:14:14.720 --> 00:14:15.720
after server validation.

00:14:15.720 --> 00:14:17.928
Or you cache it and use it
without server validation,

00:14:17.928 --> 00:14:19.580
some of you saying.

00:14:19.580 --> 00:14:20.120
The answer?

00:14:23.520 --> 00:14:24.390
Of course it is.

00:14:24.390 --> 00:14:26.370
You can use it without
server validation.

00:14:26.370 --> 00:14:27.786
I don't know what
made some of you

00:14:27.786 --> 00:14:30.470
think must revalidate
means it must revalidate.

00:14:30.470 --> 00:14:32.320
That would be weird.

00:14:32.320 --> 00:14:35.010
In fact, it does mean that
the browser must be revalidate

00:14:35.010 --> 00:14:36.660
once the max age expires.

00:14:36.660 --> 00:14:39.814
If the browser has a copy of the
resource that's under that age,

00:14:39.814 --> 00:14:41.730
it can feel free to use
it without checking in

00:14:41.730 --> 00:14:43.170
with the server.

00:14:43.170 --> 00:14:44.380
PAUL LEWIS: OK.

00:14:44.380 --> 00:14:46.020
What about this one?

00:14:46.020 --> 00:14:48.240
What does same caching
header as last time,

00:14:48.240 --> 00:14:50.230
except that the no cache--

00:14:50.230 --> 00:14:52.230
we're using no cache
instead of must revalidate.

00:14:52.230 --> 00:14:53.438
JAKE ARCHIBALD: Same answers.

00:14:53.438 --> 00:14:55.080
Same question, just
must revalidate

00:14:55.080 --> 00:14:56.200
has been replaced with no cache.

00:14:56.200 --> 00:14:56.825
PAUL LEWIS: OK.

00:14:56.825 --> 00:14:58.200
Let's have a look at the voting.

00:14:58.200 --> 00:14:59.574
JAKE ARCHIBALD:
It's easy, right?

00:14:59.574 --> 00:15:00.730
Obviously.

00:15:00.730 --> 00:15:03.210
Also, once again, we've got
a sort of 50/50 situation

00:15:03.210 --> 00:15:04.130
between two of them.

00:15:04.130 --> 00:15:05.510
Oh, but one of them is winning.

00:15:05.510 --> 00:15:06.070
That's good.

00:15:06.070 --> 00:15:07.500
PAUL LEWIS: I'm seeing a
lot of concentrating faces

00:15:07.500 --> 00:15:10.150
in the audience, which makes
me very happy on the inside.

00:15:10.150 --> 00:15:12.399
JAKE ARCHIBALD: Get a guess
in if you haven't already.

00:15:12.399 --> 00:15:16.620
We are closing the
question in 3, 2, 1.

00:15:16.620 --> 00:15:19.320
And it's closed.

00:15:19.320 --> 00:15:19.840
Right.

00:15:19.840 --> 00:15:20.340
OK.

00:15:20.340 --> 00:15:23.280
So we're saying no
cache would mean

00:15:23.280 --> 00:15:25.440
do not put this in the cache.

00:15:25.440 --> 00:15:31.260
The answer is cache
it, but you can only

00:15:31.260 --> 00:15:32.630
use it after server validation.

00:15:32.630 --> 00:15:34.546
PAUL LEWIS: I don't know
what made some of you

00:15:34.546 --> 00:15:36.045
think no cache means no cache.

00:15:36.045 --> 00:15:36.920
JAKE ARCHIBALD: Yeah.

00:15:36.920 --> 00:15:39.980
No cache is shorthand for
must revalidate, max age zero.

00:15:39.980 --> 00:15:42.650
So the additional max age we
have there is just ignored.

00:15:42.650 --> 00:15:45.230
No cache means the
browser may use the cache,

00:15:45.230 --> 00:15:47.870
but it must check
with the server first.

00:15:47.870 --> 00:15:50.180
We do not know why they
are named like this.

00:15:50.180 --> 00:15:52.730
It's like they had a load of
features and some good names

00:15:52.730 --> 00:15:54.740
for them, and then
they put them in a bag

00:15:54.740 --> 00:15:56.577
and picked them out at random.

00:15:56.577 --> 00:15:58.910
PAUL LEWIS: They do say the
hardest problems in computer

00:15:58.910 --> 00:16:01.190
science are caching
validation and naming things.

00:16:01.190 --> 00:16:03.150
And this happens to
involve naming things

00:16:03.150 --> 00:16:04.140
to do with caching validation.

00:16:04.140 --> 00:16:05.270
JAKE ARCHIBALD: They
were destined to fail.

00:16:05.270 --> 00:16:06.650
PAUL LEWIS: So let's have a chat
about what we should typically

00:16:06.650 --> 00:16:07.730
do here then.

00:16:07.730 --> 00:16:08.000
JAKE ARCHIBALD: Yeah.

00:16:08.000 --> 00:16:10.583
Well, like we said, it's best
to avoid a request, if possible.

00:16:10.583 --> 00:16:13.210
So for sub resources, treat
your content as immutable.

00:16:13.210 --> 00:16:16.090
Give it a unique URL that never
changes, like we have here,

00:16:16.090 --> 00:16:18.015
cat.4e22 whatever.

00:16:18.015 --> 00:16:21.202
And let that cache for as long
as you can, which is a year.

00:16:21.202 --> 00:16:22.910
So if you wanted to
update this resource,

00:16:22.910 --> 00:16:24.659
you would need to
change its URL.

00:16:24.659 --> 00:16:27.200
There are lots of build system
tools that can help with this.

00:16:27.200 --> 00:16:28.490
One of which is webpack.

00:16:28.490 --> 00:16:31.945
But you know, Rails and
Python, Django, they all

00:16:31.945 --> 00:16:32.570
have their own.

00:16:32.570 --> 00:16:33.530
PAUL LEWIS: They
have plenty of them.

00:16:33.530 --> 00:16:35.738
But not all of your content
is going to be immutable.

00:16:35.738 --> 00:16:37.340
For example, a
page like about-us,

00:16:37.340 --> 00:16:40.040
or pretty much anything that the
user's going to visit directly.

00:16:40.040 --> 00:16:42.539
In this case, it's usually
best to use no-cache.

00:16:42.539 --> 00:16:44.330
And that means that
the browser will always

00:16:44.330 --> 00:16:45.950
check-in with the server first.

00:16:45.950 --> 00:16:48.454
However, if the page contains,
like, really private data.

00:16:48.454 --> 00:16:50.120
You can tell the
browser not to store it

00:16:50.120 --> 00:16:52.600
at all using no-store, which
is actually named quite well.

00:16:52.600 --> 00:16:52.670
JAKE ARCHIBALD: Yeah.

00:16:52.670 --> 00:16:54.680
Kind of came out of the
bag at the right time.

00:16:54.680 --> 00:16:57.064
[INTERPOSING VOICES]

00:16:57.064 --> 00:16:59.480
JAKE ARCHIBALD: Although, if
you've given an untrustworthy

00:16:59.480 --> 00:17:01.449
person or a piece of
software the access

00:17:01.449 --> 00:17:02.990
they need to read
your browser cache,

00:17:02.990 --> 00:17:05.160
then you kind of
have bigger problems.

00:17:05.160 --> 00:17:07.452
Some people will say it's
just paranoia doing no-store.

00:17:07.452 --> 00:17:09.910
PAUL LEWIS: But there is another
caching pattern that we do

00:17:09.910 --> 00:17:11.599
see quite a lot around the web.

00:17:11.599 --> 00:17:14.750
And it does lead to some
pretty weird behaviors.

00:17:14.750 --> 00:17:16.250
Because sometimes,
want the benefit

00:17:16.250 --> 00:17:17.810
of avoiding going
to the network,

00:17:17.810 --> 00:17:19.560
but they haven't set
up their build system

00:17:19.560 --> 00:17:21.050
to generate unique URLs.

00:17:21.050 --> 00:17:23.941
So they go with regular
URLs, like script JS.

00:17:23.941 --> 00:17:25.940
And they expect the content
to change over time,

00:17:25.940 --> 00:17:28.550
meaning they don't want
to cache it for a year,

00:17:28.550 --> 00:17:29.840
but they take a guess.

00:17:29.840 --> 00:17:32.480
And they kind of go, oh, how
does a couple of hours sound?

00:17:32.480 --> 00:17:33.120
JAKE ARCHIBALD: Two hours.

00:17:33.120 --> 00:17:34.340
It sounds like a
good compromise.

00:17:34.340 --> 00:17:35.174
But it really isn't.

00:17:35.174 --> 00:17:36.381
It's a really bad compromise.

00:17:36.381 --> 00:17:38.900
And we see this everywhere,
like on a lot of static services

00:17:38.900 --> 00:17:39.560
as well.

00:17:39.560 --> 00:17:40.310
Don't do this.

00:17:40.310 --> 00:17:41.210
Here's why.

00:17:41.210 --> 00:17:43.895
Let's say you're serving some
HTML, CSS, and JavaScript.

00:17:43.895 --> 00:17:45.770
And you're telling it
to cache for two hours.

00:17:45.770 --> 00:17:47.526
A user visits your
site and that means

00:17:47.526 --> 00:17:48.650
they download a lot, right?

00:17:48.650 --> 00:17:50.990
And they end up with those
resources in their cache

00:17:50.990 --> 00:17:53.270
and on their page.

00:17:53.270 --> 00:17:55.100
So far, so good.

00:17:55.100 --> 00:17:56.000
It's all working.

00:17:56.000 --> 00:17:58.766
But let's say an hour later,
you update your HTML, CSS,

00:17:58.766 --> 00:17:59.390
and JavaScript.

00:17:59.390 --> 00:18:02.960
So they have Version 2 now,
but you don't change the URLs.

00:18:02.960 --> 00:18:05.680
Meanwhile, user's browsing
around the web and the browser

00:18:05.680 --> 00:18:07.960
just decides ah, I've
had enough of those, too.

00:18:07.960 --> 00:18:09.690
And it's going to remove
the HTML and the JavaScript

00:18:09.690 --> 00:18:10.320
from the cache.

00:18:10.320 --> 00:18:11.330
PAUL LEWIS: And maybe
you're thinking, why

00:18:11.330 --> 00:18:12.260
would the browser ever do that?

00:18:12.260 --> 00:18:13.490
But the browser
can remove whatever

00:18:13.490 --> 00:18:15.364
it wants from the cache
whenever it wants to.

00:18:15.364 --> 00:18:17.170
Maybe it just wanted
some space back.

00:18:17.170 --> 00:18:19.400
JAKE ARCHIBALD: Yeah, and also
because these assets have a max

00:18:19.400 --> 00:18:21.500
age, and that's from the
point they're downloaded,

00:18:21.500 --> 00:18:22.708
you can get them out of sync.

00:18:22.708 --> 00:18:24.780
They can expire at
different points.

00:18:24.780 --> 00:18:26.532
So now the user
returns to the site.

00:18:26.532 --> 00:18:27.990
They'll get the
CSS from the cache,

00:18:27.990 --> 00:18:29.840
because it's still
within the two hours.

00:18:29.840 --> 00:18:32.500
But the other assets, they are
going to come from the network.

00:18:32.500 --> 00:18:33.010
PAUL LEWIS: Yeah,
so now you've got

00:18:33.010 --> 00:18:34.801
Version 2 of your HTML
and your JavaScript.

00:18:34.801 --> 00:18:37.204
But you're still on
Version 1 of your CSS.

00:18:37.204 --> 00:18:39.120
JAKE ARCHIBALD: Yeah,
and the result of that--

00:18:39.120 --> 00:18:39.912
PAUL LEWIS: Eh, uh.

00:18:39.912 --> 00:18:41.286
JAKE ARCHIBALD:
It could be fine.

00:18:41.286 --> 00:18:42.777
You could get away
with it, maybe.

00:18:42.777 --> 00:18:45.110
Or you could end up with a
lot of broken, unstyled stuff

00:18:45.110 --> 00:18:45.450
appearing on the page.

00:18:45.450 --> 00:18:46.760
PAUL LEWIS: Basically,
it's a big gamble.

00:18:46.760 --> 00:18:49.320
And it's going to be very,
very hard to figure out why

00:18:49.320 --> 00:18:50.159
if it breaks.

00:18:50.159 --> 00:18:51.700
So don't do that if
you can avoid it.

00:18:51.700 --> 00:18:54.890
Instead, either use no-cache
or immutable resources

00:18:54.890 --> 00:18:56.450
with a year of caching.

00:18:56.450 --> 00:18:58.820
So, so far, we've covered
parser blocking and caching.

00:18:58.820 --> 00:19:01.459
But another part of
page load is timing.

00:19:01.459 --> 00:19:03.500
Now some resources start
downloading pretty late,

00:19:03.500 --> 00:19:05.291
and the performance
can suffer as a result.

00:19:05.291 --> 00:19:07.708
The most common one that we
see is web fonts, I would say.

00:19:07.708 --> 00:19:08.582
JAKE ARCHIBALD: Yeah.

00:19:08.582 --> 00:19:10.130
PAUL LEWIS: And
fonts are defined

00:19:10.130 --> 00:19:12.290
in your CSS, including
how to download them

00:19:12.290 --> 00:19:13.700
and where to use them.

00:19:13.700 --> 00:19:16.110
So once the browser has
downloaded your CSS,

00:19:16.110 --> 00:19:19.125
it performs a recalc to apply
all those styles to the page.

00:19:19.125 --> 00:19:20.750
And at this point,
it discovers that it

00:19:20.750 --> 00:19:23.469
needs a web font for one
or more of those paragraphs

00:19:23.469 --> 00:19:24.010
on your page.

00:19:24.010 --> 00:19:25.940
So it begins fetching it.

00:19:25.940 --> 00:19:28.430
Meanwhile, the browser lays
out the page and paints it.

00:19:28.430 --> 00:19:30.550
But this paint is going
to be missing the text.

00:19:30.550 --> 00:19:32.610
That needs the web font.

00:19:32.610 --> 00:19:33.110
Oh, yeah.

00:19:33.110 --> 00:19:34.340
We've all seen this.

00:19:34.340 --> 00:19:36.320
And we've all sat
there going, really?

00:19:36.320 --> 00:19:37.190
Really, really?

00:19:37.190 --> 00:19:39.360
I just wanted to read it.

00:19:39.360 --> 00:19:41.300
And it's pretty
frustrating, right?

00:19:41.300 --> 00:19:43.136
But once the font
has downloaded,

00:19:43.136 --> 00:19:44.510
the browser performs
layout again

00:19:44.510 --> 00:19:47.330
and paints the page, this time
with the text using the web

00:19:47.330 --> 00:19:48.140
font.

00:19:48.140 --> 00:19:48.830
JAKE ARCHIBALD: So
as you can tell,

00:19:48.830 --> 00:19:50.240
this isn't really optimal.

00:19:50.240 --> 00:19:53.119
The font starts downloading
so late, and the result of it

00:19:53.119 --> 00:19:54.660
is, the user is left
without content.

00:19:54.660 --> 00:19:56.530
Well, they actually have
the content on their device.

00:19:56.530 --> 00:19:58.170
It's just the browser is
refusing to download it.

00:19:58.170 --> 00:19:58.435
PAUL LEWIS: Absolutely.

00:19:58.435 --> 00:20:00.010
JAKE ARCHIBALD: And
refusing to paint it, right?

00:20:00.010 --> 00:20:01.843
PAUL LEWIS: Now you can
improve things a lot

00:20:01.843 --> 00:20:03.680
using link rel preload.

00:20:03.680 --> 00:20:05.450
With this in the head
of your document,

00:20:05.450 --> 00:20:06.950
you're telling the browser
that you need the resource

00:20:06.950 --> 00:20:08.510
as part of loading the page.

00:20:08.510 --> 00:20:11.120
So that means the download
can happen in parallel-- ooh--

00:20:11.120 --> 00:20:11.952
with the CSS.

00:20:11.952 --> 00:20:13.910
JAKE ARCHIBALD: Right,
so now you can see here,

00:20:13.910 --> 00:20:16.201
the time between the CSS
download and the font download

00:20:16.201 --> 00:20:17.420
is massively reduced.

00:20:17.420 --> 00:20:19.685
And that means the user
gets content quicker, which

00:20:19.685 --> 00:20:20.185
is great.

00:20:20.185 --> 00:20:22.460
PAUL LEWIS: Now, when
you use link rel preload,

00:20:22.460 --> 00:20:26.960
the response is actually stored
in a special preload cache

00:20:26.960 --> 00:20:28.170
until the browser needs it.

00:20:28.170 --> 00:20:30.420
JAKE ARCHIBALD: So yeah,
we've got this preload cache.

00:20:30.420 --> 00:20:31.490
We've got the HTTP cache.

00:20:31.490 --> 00:20:32.900
But there is another.

00:20:32.900 --> 00:20:36.170
In HTTP/2, the browser can
ask the server for something,

00:20:36.170 --> 00:20:38.150
and the server can say,
yeah, sure, here it is.

00:20:38.150 --> 00:20:40.550
But also, here's
some other stuff

00:20:40.550 --> 00:20:41.910
that I think you might need.

00:20:41.910 --> 00:20:43.880
This is called HTTP/2 push.

00:20:43.880 --> 00:20:45.849
The server sends down
an additional response

00:20:45.849 --> 00:20:47.390
and the information
the browser needs

00:20:47.390 --> 00:20:49.850
to know for when it can
use those responses.

00:20:49.850 --> 00:20:51.732
PAUL LEWIS: Thing
is, this cache,

00:20:51.732 --> 00:20:53.690
they end up-- it's a
completely different cache

00:20:53.690 --> 00:20:55.380
from the other two.

00:20:55.380 --> 00:20:57.320
Which brings us to
our next question.

00:20:57.320 --> 00:20:59.900
Devices at the ready.

00:20:59.900 --> 00:21:02.690
JAKE ARCHIBALD: Which cache
does the browser check first?

00:21:02.690 --> 00:21:06.355
Is it the HTTP/2 push
cache, the preload cache,

00:21:06.355 --> 00:21:08.107
or the HTTP cache?

00:21:08.107 --> 00:21:09.440
PAUL LEWIS: This is a cruel one.

00:21:09.440 --> 00:21:11.255
It's not one I knew until
talking to the networking

00:21:11.255 --> 00:21:11.963
team [INAUDIBLE].

00:21:11.963 --> 00:21:14.012
JAKE ARCHIBALD: I think
this is bearing out what

00:21:14.012 --> 00:21:15.220
we're seeing here, which is--

00:21:15.220 --> 00:21:16.460
PAUL LEWIS: Well, there's one
answer people are kind of--

00:21:16.460 --> 00:21:17.010
JAKE ARCHIBALD: Oh,
yeah, actually--

00:21:17.010 --> 00:21:17.550
PAUL LEWIS: --others.

00:21:17.550 --> 00:21:18.675
JAKE ARCHIBALD: Oh, they're
getting less sure now.

00:21:18.675 --> 00:21:20.230
PAUL LEWIS: Now you see,
there's-- confidence is waning,

00:21:20.230 --> 00:21:20.580
Jake.

00:21:20.580 --> 00:21:21.235
JAKE ARCHIBALD: Oh, OK.

00:21:21.235 --> 00:21:22.312
PAUL LEWIS: It's going--

00:21:22.312 --> 00:21:24.270
definitely take a guess
if you haven't already.

00:21:24.270 --> 00:21:25.660
Make sure you hit
that submit button.

00:21:25.660 --> 00:21:26.240
JAKE ARCHIBALD: We're
going to close it.

00:21:26.240 --> 00:21:27.906
PAUL LEWIS: We are
closing the question.

00:21:27.906 --> 00:21:29.460
ALL: 3, 2, 1.

00:21:29.460 --> 00:21:30.460
PAUL LEWIS: It's closed.

00:21:30.460 --> 00:21:32.220
JAKE ARCHIBALD: We're out.

00:21:32.220 --> 00:21:34.494
PAUL LEWIS: Ooh, the HTTP
cache was winning that one.

00:21:34.494 --> 00:21:35.410
It's a popular answer.

00:21:35.410 --> 00:21:37.010
It's a popular answer
among Googlers,

00:21:37.010 --> 00:21:38.810
I seem to remember
when we did rehearsal.

00:21:38.810 --> 00:21:42.230
And just like the
Googlers, wrong, wrong.

00:21:42.230 --> 00:21:45.600
The correct answer
is the preload cache.

00:21:45.600 --> 00:21:46.876
JAKE ARCHIBALD: Absolutely.

00:21:46.876 --> 00:21:48.500
As you can see, some
of these questions

00:21:48.500 --> 00:21:49.541
are deliberately obscure.

00:21:49.541 --> 00:21:52.207
So really, do not feel bad
if you're getting them wrong.

00:21:52.207 --> 00:21:52.790
Like we said--

00:21:52.790 --> 00:21:53.950
PAUL LEWIS: Unless
you're a Googler who

00:21:53.950 --> 00:21:55.390
was in one of our
rehearsals, in which case

00:21:55.390 --> 00:21:55.940
you should feel pretty bad.

00:21:55.940 --> 00:21:56.350
JAKE ARCHIBALD:
All those Googlers

00:21:56.350 --> 00:21:57.577
were fired, by the way.

00:21:57.577 --> 00:21:58.910
So they don't work here anymore.

00:21:58.910 --> 00:22:00.449
[LAUGHTER]

00:22:00.449 --> 00:22:02.240
In fact, if you do end
up with a top score,

00:22:02.240 --> 00:22:04.540
it probably means you didn't
learn a lot from this talk,

00:22:04.540 --> 00:22:06.770
so you've kind of wasted your
time being here, to be honest.

00:22:06.770 --> 00:22:08.240
PAUL LEWIS: Unless
you win the mouse pad.

00:22:08.240 --> 00:22:09.410
JAKE ARCHIBALD: Unless
you win the mouse pad.

00:22:09.410 --> 00:22:10.445
That's a desirable prize.

00:22:10.445 --> 00:22:12.230
PAUL LEWIS: I'm glad they didn't
applaud that because that would

00:22:12.230 --> 00:22:13.630
have been-- good, good, fine.

00:22:13.630 --> 00:22:14.630
JAKE ARCHIBALD: So yeah.

00:22:14.630 --> 00:22:15.830
Free cache is in play here.

00:22:15.830 --> 00:22:17.465
And it is pretty complicated.

00:22:17.465 --> 00:22:20.090
But knowing this stuff can help
prevent loads of kind of weird,

00:22:20.090 --> 00:22:21.320
[INAUDIBLE] bugs.

00:22:21.320 --> 00:22:23.480
So when your page contains
a preload element,

00:22:23.480 --> 00:22:26.960
the browser fetches it as
normal through the HTTP cache,

00:22:26.960 --> 00:22:28.745
potentially to the
server, and it ends up

00:22:28.745 --> 00:22:30.911
in this memory cache that
sits alongside the page.

00:22:30.911 --> 00:22:33.410
So the things to note from this
is that your preloaded stuff

00:22:33.410 --> 00:22:35.810
may come from the HTTP cache.

00:22:35.810 --> 00:22:38.690
But also, since the preload
cache sits with the page,

00:22:38.690 --> 00:22:40.610
other pages will not use it.

00:22:40.610 --> 00:22:42.470
They may have their
own preload caches.

00:22:42.470 --> 00:22:44.840
But one page won't use
another page's preload cache.

00:22:44.840 --> 00:22:45.470
PAUL LEWIS: Yeah,
so that means it's

00:22:45.470 --> 00:22:47.480
pointless to use link
rel preload to try

00:22:47.480 --> 00:22:49.092
and preload things
for another page,

00:22:49.092 --> 00:22:51.050
maybe the next page,
because that page is going

00:22:51.050 --> 00:22:53.474
to have its own preload cache.

00:22:53.474 --> 00:22:55.640
JAKE ARCHIBALD: The HTTP/2
cache, on the other hand,

00:22:55.640 --> 00:22:57.700
it sits with the connection.

00:22:57.700 --> 00:22:59.930
And that makes it pretty
different to preload.

00:22:59.930 --> 00:23:02.540
Because two pages can
share an HTTP connection,

00:23:02.540 --> 00:23:04.670
so they can share
the same push cache.

00:23:04.670 --> 00:23:06.890
Things you push
intended for one page

00:23:06.890 --> 00:23:08.540
may end up being
consumed by another.

00:23:08.540 --> 00:23:10.340
PAUL LEWIS: Yeah, that's
pretty complicated, isn't it?

00:23:10.340 --> 00:23:12.320
JAKE ARCHIBALD: And also,
because the server initiates

00:23:12.320 --> 00:23:14.694
the push, you could be pushing
something the user already

00:23:14.694 --> 00:23:15.602
has in their cache.

00:23:15.602 --> 00:23:17.060
The spec does say
that browsers can

00:23:17.060 --> 00:23:18.290
send a message to
their server saying,

00:23:18.290 --> 00:23:20.000
no, stop that, I've
already got it.

00:23:20.000 --> 00:23:21.229
But no browser does this yet.

00:23:21.229 --> 00:23:23.270
PAUL LEWIS: So the answer
to the actual question,

00:23:23.270 --> 00:23:25.186
the question that we
asked, the browser checks

00:23:25.186 --> 00:23:28.730
the preload cache first,
then the HTTP cache, and then

00:23:28.730 --> 00:23:30.767
the push cache.

00:23:30.767 --> 00:23:31.600
JAKE ARCHIBALD: Yes.

00:23:31.600 --> 00:23:32.350
Yes, that's it.

00:23:32.350 --> 00:23:33.040
PAUL LEWIS: Yeah, [INAUDIBLE].

00:23:33.040 --> 00:23:34.940
So like you said, it is a
good thing to keep in mind.

00:23:34.940 --> 00:23:36.050
It is a bit out there.

00:23:36.050 --> 00:23:38.399
But at the same
time, if you do find

00:23:38.399 --> 00:23:39.940
you've got weird
behaviors, then it's

00:23:39.940 --> 00:23:42.852
good to know where
to start looking.

00:23:42.852 --> 00:23:45.310
JAKE ARCHIBALD: Yeah, I think
HTTP/2 push is dead powerful.

00:23:45.310 --> 00:23:46.690
But it's pretty low-level.

00:23:46.690 --> 00:23:48.310
And in many cases,
link rel preload

00:23:48.310 --> 00:23:49.899
is a simpler, more
reliable solution.

00:23:49.899 --> 00:23:51.940
And it definitely seems
to catch people out less.

00:23:51.940 --> 00:23:53.504
And DevTools are
much more helpful

00:23:53.504 --> 00:23:54.670
when things are going wrong.

00:23:54.670 --> 00:23:55.060
PAUL LEWIS: Absolutely.

00:23:55.060 --> 00:23:57.315
So that's the networking
round, if you like, complete.

00:23:57.315 --> 00:23:59.320
Should we take a look
at our leader board?

00:23:59.320 --> 00:24:00.290
JAKE ARCHIBALD: Yes, we shall.

00:24:00.290 --> 00:24:01.360
Let's see how you're doing.

00:24:01.360 --> 00:24:01.985
PAUL LEWIS: Mm.

00:24:01.985 --> 00:24:02.963
JAKE ARCHIBALD: Oh, oh.

00:24:02.963 --> 00:24:03.880
PAUL LEWIS: [LAUGHS]

00:24:03.880 --> 00:24:04.713
[INTERPOSING VOICES]

00:24:04.713 --> 00:24:05.080
PAUL LEWIS: Here we are.

00:24:05.080 --> 00:24:06.960
We have one person in
the lead at the moment.

00:24:06.960 --> 00:24:08.545
JAKE ARCHIBALD: Andrei,
in first with 20 points.

00:24:08.545 --> 00:24:09.589
That's pretty good.

00:24:09.589 --> 00:24:10.880
But we're only halfway through.

00:24:10.880 --> 00:24:11.330
PAUL LEWIS: Absolutely.

00:24:11.330 --> 00:24:12.190
JAKE ARCHIBALD:
Less than half way.

00:24:12.190 --> 00:24:12.990
PAUL LEWIS: So if you've
been playing this quiz,

00:24:12.990 --> 00:24:13.880
and you're competing
with colleagues,

00:24:13.880 --> 00:24:16.690
and you're thinking, well, they
know plenty of network stuff,

00:24:16.690 --> 00:24:19.150
they've got an unfair
advantage, well, hold on.

00:24:19.150 --> 00:24:20.860
Because the thing is,
CSS and rendering,

00:24:20.860 --> 00:24:22.870
that might be your thing, and
that's your time to shine.

00:24:22.870 --> 00:24:23.620
JAKE ARCHIBALD: Mm.

00:24:23.620 --> 00:24:24.850
PAUL LEWIS: Because
indeed, let's talk

00:24:24.850 --> 00:24:26.040
a little bit about rendering.

00:24:26.040 --> 00:24:27.539
JAKE ARCHIBALD:
Yeah, animations are

00:24:27.539 --> 00:24:30.010
important in communicating
parts of your UI to the user.

00:24:30.010 --> 00:24:31.090
And they also just
look really cool.

00:24:31.090 --> 00:24:33.635
We've had a lot of fun with
animation so far here, right?

00:24:33.635 --> 00:24:37.090
But a badly performing animation
can be really jarring, often

00:24:37.090 --> 00:24:38.710
worse than no animation at all.

00:24:38.710 --> 00:24:40.418
PAUL LEWIS: Yeah, and
our modern browsers

00:24:40.418 --> 00:24:42.534
have an animation fast-path
known as compositing.

00:24:42.534 --> 00:24:44.950
And this means that the browser
takes a particular element

00:24:44.950 --> 00:24:47.550
and it temporarily isolates
it into its own layer.

00:24:47.550 --> 00:24:49.600
Now if the conditions
are correct,

00:24:49.600 --> 00:24:52.920
the browser does this
automatically for an animation.

00:24:52.920 --> 00:24:55.090
Now this minimizes the
impact of the animation

00:24:55.090 --> 00:24:56.548
as the browser
doesn't have to keep

00:24:56.548 --> 00:24:59.267
repainting the thing behind
the element that's actually

00:24:59.267 --> 00:25:00.100
doing the animation.

00:25:00.100 --> 00:25:01.860
And at the end of
the animation, it

00:25:01.860 --> 00:25:04.480
can merge down or
flatten that content back

00:25:04.480 --> 00:25:06.190
with the other
content on the page.

00:25:06.190 --> 00:25:07.565
JAKE ARCHIBALD:
But as Paul said,

00:25:07.565 --> 00:25:10.280
the conditions need to be
correct for this to happen.

00:25:10.280 --> 00:25:12.640
So devices at the ready.

00:25:12.640 --> 00:25:13.950
Here comes a question.

00:25:13.950 --> 00:25:16.660
We're animating a
circle in an SVG.

00:25:16.660 --> 00:25:18.040
Which of the
following animations

00:25:18.040 --> 00:25:21.270
will be automatically
composited in Chrome 57?

00:25:21.270 --> 00:25:23.730
PAUL LEWIS: So it's the center
x, center x and transform,

00:25:23.730 --> 00:25:26.070
transform, or opacity.

00:25:26.070 --> 00:25:28.219
And you can select, I
believe, all that apply.

00:25:28.219 --> 00:25:29.260
I need to get in on the--

00:25:29.260 --> 00:25:30.040
JAKE ARCHIBALD: [INAUDIBLE]
quiz voice again.

00:25:30.040 --> 00:25:31.660
PAUL LEWIS: I like
your quiz voice.

00:25:31.660 --> 00:25:32.580
I'll give it a go on
the next question.

00:25:32.580 --> 00:25:33.250
JAKE ARCHIBALD: All right.

00:25:33.250 --> 00:25:34.708
PAUL LEWIS: How
are you voting now?

00:25:34.708 --> 00:25:37.680
OK, so strong feelings
about kind of three of them.

00:25:37.680 --> 00:25:39.483
Less confident with one of them.

00:25:39.483 --> 00:25:42.570
Ooh, get a guess in if
you haven't already.

00:25:42.570 --> 00:25:44.180
We're going to close
the question in--

00:25:44.180 --> 00:25:45.398
ALL: 3, 2, 1.

00:25:45.398 --> 00:25:46.856
PAUL LEWIS: Don't
forget to submit.

00:25:46.856 --> 00:25:48.210
JAKE ARCHIBALD: And it's closed.

00:25:48.210 --> 00:25:49.320
PAUL LEWIS: There you go.

00:25:49.320 --> 00:25:51.090
OK, so we're sort of saying--

00:25:51.090 --> 00:25:52.370
we've got transform there.

00:25:52.370 --> 00:25:55.020
So yeah, the opacity
and transform.

00:25:55.020 --> 00:25:56.840
The correct answer--

00:25:56.840 --> 00:25:58.600
JAKE ARCHIBALD: Ooh--

00:25:58.600 --> 00:25:59.880
PAUL LEWIS: It's none of them.

00:25:59.880 --> 00:26:01.088
JAKE ARCHIBALD: None of them.

00:26:01.088 --> 00:26:03.405
[LAUGHTER]

00:26:03.405 --> 00:26:04.309
Cruel, isn't it?

00:26:04.309 --> 00:26:05.350
PAUL LEWIS: Yeah, I know.

00:26:05.350 --> 00:26:06.237
I know.

00:26:06.237 --> 00:26:08.070
Yeah, for implementation
and legacy reasons,

00:26:08.070 --> 00:26:10.028
in Chrome today-- and I
think it's fair to say,

00:26:10.028 --> 00:26:11.285
we'd love to see this change--

00:26:11.285 --> 00:26:12.868
compositing never
happens for elements

00:26:12.868 --> 00:26:14.720
inside of an SVG element.

00:26:14.720 --> 00:26:16.270
JAKE ARCHIBALD: You used an
out-of-date emoji there, Paul.

00:26:16.270 --> 00:26:17.103
That's not on-brand.

00:26:17.103 --> 00:26:18.370
PAUL LEWIS: Awkward.

00:26:18.370 --> 00:26:20.120
JAKE ARCHIBALD: This
means your animations

00:26:20.120 --> 00:26:22.412
are going to paint as a flat,
single layer every frame.

00:26:22.412 --> 00:26:24.453
PAUL LEWIS: Yeah, and in
case you were wondering,

00:26:24.453 --> 00:26:27.130
Edge and Firefox do currently
support composite SVGs,

00:26:27.130 --> 00:26:29.842
but Safari 10.1, like
Chrome, does not.

00:26:29.842 --> 00:26:31.300
But the good news
is it's something

00:26:31.300 --> 00:26:32.040
that we are looking at.

00:26:32.040 --> 00:26:33.540
And we'll post a link
to the Chromebook

00:26:33.540 --> 00:26:34.498
at the end of the quiz.

00:26:34.498 --> 00:26:36.930
So you'll see it in the
resources on your devices.

00:26:36.930 --> 00:26:37.430
OK.

00:26:37.430 --> 00:26:38.850
So that's SVG.

00:26:38.850 --> 00:26:41.020
Let's talk about your
standard issue DOM.

00:26:41.020 --> 00:26:42.430
You know, your non-SVG DOM.

00:26:42.430 --> 00:26:44.260
JAKE ARCHIBALD: We
are animating a div.

00:26:44.260 --> 00:26:45.790
Which of the
following animations

00:26:45.790 --> 00:26:49.420
can be automatically
composited in Chrome 57?

00:26:49.420 --> 00:26:53.920
Is it margin-left, width
and transform, transform,

00:26:53.920 --> 00:26:54.750
or opacity?

00:26:54.750 --> 00:26:56.140
PAUL LEWIS: Can I commend
you on your quiz voice?

00:26:56.140 --> 00:26:57.765
JAKE ARCHIBALD: I
really like that one.

00:26:57.765 --> 00:27:02.162
It's based on the guy from
the "Weakest Link" in the UK.

00:27:02.162 --> 00:27:04.819
Let's take a look at the voting.

00:27:04.819 --> 00:27:07.360
PAUL LEWIS: Similar kind of feel
to last time, I'd say, this.

00:27:07.360 --> 00:27:07.910
JAKE ARCHIBALD:
People are holding

00:27:07.910 --> 00:27:09.205
onto their previous
answers, it seems.

00:27:09.205 --> 00:27:09.800
PAUL LEWIS: Perhaps.

00:27:09.800 --> 00:27:11.758
JAKE ARCHIBALD: But will
that pay off for them?

00:27:11.758 --> 00:27:12.900
It's a bold play.

00:27:12.900 --> 00:27:13.780
Should we play it?

00:27:13.780 --> 00:27:16.765
3, 2, 1, and we're closing.

00:27:16.765 --> 00:27:18.550
PAUL LEWIS: There we are.

00:27:18.550 --> 00:27:19.356
Tricky, tricky.

00:27:19.356 --> 00:27:19.635
JAKE ARCHIBALD: So
we've got the width

00:27:19.635 --> 00:27:22.080
and transform, opacity and
transform, the margin-left,

00:27:22.080 --> 00:27:24.510
less confident on.

00:27:24.510 --> 00:27:27.087
The correct
answer's, of course--

00:27:27.087 --> 00:27:29.360
ooh.

00:27:29.360 --> 00:27:31.050
PAUL LEWIS: Pretty
right as a room.

00:27:31.050 --> 00:27:31.200
JAKE ARCHIBALD: Well done.

00:27:31.200 --> 00:27:31.440
PAUL LEWIS: That
was a good show.

00:27:31.440 --> 00:27:31.790
JAKE ARCHIBALD: Good job.

00:27:31.790 --> 00:27:34.414
PAUL LEWIS: Yeah, the answer is,
any animation that transitions

00:27:34.414 --> 00:27:36.420
on opacity or transform.

00:27:36.420 --> 00:27:37.132
Yeah.

00:27:37.132 --> 00:27:39.090
And if you declare the
animation up front using

00:27:39.090 --> 00:27:41.790
CSS and transitions, or
keyframed animations,

00:27:41.790 --> 00:27:43.980
the browser can probably
move the whole thing away

00:27:43.980 --> 00:27:44.930
from the main thread.

00:27:44.930 --> 00:27:47.096
JAKE ARCHIBALD: Yeah and
if it happens the animation

00:27:47.096 --> 00:27:49.649
can continue jank-free, even
if the main thread is busy.

00:27:49.649 --> 00:27:51.940
However, an element that's
composited and declaratively

00:27:51.940 --> 00:27:55.020
animated may still have a
frame-by-frame dependency

00:27:55.020 --> 00:27:56.220
on the main thread.

00:27:56.220 --> 00:27:57.178
PAUL LEWIS: Absolutely.

00:27:57.178 --> 00:28:00.420
Now that correct answer, of
width 2 seconds, transform 2

00:28:00.420 --> 00:28:02.100
seconds, is one of these.

00:28:02.100 --> 00:28:04.560
Now sure, the element is
going to get its own layer

00:28:04.560 --> 00:28:05.640
if you animate transform.

00:28:05.640 --> 00:28:07.240
That is absolutely true.

00:28:07.240 --> 00:28:09.510
But if you animate
width, even if you

00:28:09.510 --> 00:28:11.610
make something
have its own layer,

00:28:11.610 --> 00:28:16.250
you will trigger recalc styles,
layout, and paint per frame.

00:28:16.250 --> 00:28:18.000
And these are all
main-thread-bound pieces

00:28:18.000 --> 00:28:18.360
of work.

00:28:18.360 --> 00:28:19.151
JAKE ARCHIBALD: Mm.

00:28:19.151 --> 00:28:21.960
Yeah, and it's true that
things are getting faster

00:28:21.960 --> 00:28:23.460
in terms of layout and paint--

00:28:23.460 --> 00:28:25.560
or at least phones
are getting faster.

00:28:25.560 --> 00:28:27.480
Trying to do layout
and paint per frame

00:28:27.480 --> 00:28:31.060
is not normally 60 frames a
second fast on a smartphone.

00:28:31.060 --> 00:28:34.200
In fact, layout is scoped to the
DOM, so the bigger the document

00:28:34.200 --> 00:28:36.970
you have, the longer it tends
to take in most situations.

00:28:36.970 --> 00:28:38.040
PAUL LEWIS: That's not the
kind of thing you typically

00:28:38.040 --> 00:28:38.998
want from an animation.

00:28:38.998 --> 00:28:40.069
JAKE ARCHIBALD: No.

00:28:40.069 --> 00:28:41.610
So the most performance
solution here

00:28:41.610 --> 00:28:43.800
is to stick to
transforms and opacity

00:28:43.800 --> 00:28:45.870
and animate only
those properties.

00:28:45.870 --> 00:28:48.630
PAUL LEWIS: Yeah, so just
because an element has

00:28:48.630 --> 00:28:50.130
its own layer doesn't
mean that it's

00:28:50.130 --> 00:28:52.922
safe to start animating
properties like left or margin

00:28:52.922 --> 00:28:53.880
or something like that.

00:28:53.880 --> 00:28:54.090
JAKE ARCHIBALD: OK.

00:28:54.090 --> 00:28:55.150
Let's switch this
up a little bit.

00:28:55.150 --> 00:28:56.941
Let's switch to some
event-based animation.

00:28:56.941 --> 00:28:59.280
Let's get some JavaScript
in there as well.

00:28:59.280 --> 00:29:00.314
Devices at the ready.

00:29:00.314 --> 00:29:01.230
Is this your favorite?

00:29:01.230 --> 00:29:02.850
PAUL LEWIS: Yeah, I
really enjoy this one.

00:29:02.850 --> 00:29:04.724
JAKE ARCHIBALD: Here
comes the next question.

00:29:04.724 --> 00:29:07.320
You have an element with no
transform and the following

00:29:07.320 --> 00:29:08.070
code.

00:29:08.070 --> 00:29:10.380
According to the
HTML specification,

00:29:10.380 --> 00:29:11.130
what happens next?

00:29:11.130 --> 00:29:13.546
All right, talk me through the
code here, what's going on?

00:29:13.546 --> 00:29:15.320
PAUL LEWIS: So
we've got on click.

00:29:15.320 --> 00:29:18.000
There's a transform, which
translate X 200 pixels.

00:29:18.000 --> 00:29:18.970
Switch on.

00:29:18.970 --> 00:29:20.430
A transition on transform.

00:29:20.430 --> 00:29:22.590
And then we set the
transform to 100 pixels.

00:29:22.590 --> 00:29:24.840
Does it slide to the right,
does it slide to the left?

00:29:24.840 --> 00:29:27.630
Does it do the "Macarena," or
does it snap to 100 pixels?

00:29:27.630 --> 00:29:30.862
JAKE ARCHIBALD: Let's see
how people are voting.

00:29:30.862 --> 00:29:32.820
PAUL LEWIS: Oh, we've
got some strong opinions.

00:29:32.820 --> 00:29:34.620
There's one answer
there that people--

00:29:34.620 --> 00:29:35.570
what's interesting
here is there's

00:29:35.570 --> 00:29:36.870
two answers that are unpopular.

00:29:36.870 --> 00:29:38.850
And I thought one would
have been significantly less

00:29:38.850 --> 00:29:39.886
popular than any of them.

00:29:39.886 --> 00:29:40.885
JAKE ARCHIBALD: [LAUGHS]

00:29:40.885 --> 00:29:42.440
PAUL LEWIS: Turns out not.

00:29:42.440 --> 00:29:42.995
OK.

00:29:42.995 --> 00:29:44.578
Get a guess in if
you haven't already.

00:29:44.578 --> 00:29:45.660
Hit Submit.

00:29:45.660 --> 00:29:47.000
We are closing the question in--

00:29:47.000 --> 00:29:49.390
ALL: 3, 2, 1.

00:29:49.390 --> 00:29:51.004
PAUL LEWIS: It's locked in.

00:29:51.004 --> 00:29:52.170
JAKE ARCHIBALD: Interesting.

00:29:52.170 --> 00:29:53.610
Some people do you think
it does the "Macarena."

00:29:53.610 --> 00:29:54.865
PAUL LEWIS: Snapping.

00:29:54.865 --> 00:29:55.410
And right.

00:29:55.410 --> 00:29:55.590
So 30--

00:29:55.590 --> 00:29:56.714
JAKE ARCHIBALD: That's 30%.

00:29:56.714 --> 00:29:59.070
That's a lot of people who
have clearly just given up

00:29:59.070 --> 00:29:59.615
on the quiz.

00:29:59.615 --> 00:30:00.660
[LAUGHTER]

00:30:00.660 --> 00:30:02.900
I don't know what to say, folks.

00:30:02.900 --> 00:30:04.650
Put it this way, one
of the highest scores

00:30:04.650 --> 00:30:05.820
we got when we did
this in rehearsal

00:30:05.820 --> 00:30:07.034
was our design advocate.

00:30:07.034 --> 00:30:09.450
And he was just like, oh, I'm
just making random guesses--

00:30:09.450 --> 00:30:09.570
PAUL LEWIS: Guessing.

00:30:09.570 --> 00:30:10.260
JAKE ARCHIBALD: --and he
got one of the top scores.

00:30:10.260 --> 00:30:11.060
PAUL LEWIS: I don't
even know anymore.

00:30:11.060 --> 00:30:12.643
JAKE ARCHIBALD: So
that's pretty good.

00:30:12.643 --> 00:30:15.719
The correct answer, of course--

00:30:15.719 --> 00:30:17.010
when it appears on the screen--

00:30:17.010 --> 00:30:19.080
it slides to the right.

00:30:19.080 --> 00:30:23.010
Now, Paul, I did
maths at school.

00:30:23.010 --> 00:30:25.290
And I was led to
believe that 200

00:30:25.290 --> 00:30:27.450
is a bigger number than 100.

00:30:27.450 --> 00:30:30.285
Therefore, moving from 200
to 100 would be to the left.

00:30:30.285 --> 00:30:31.910
PAUL LEWIS: And while
I agree with you,

00:30:31.910 --> 00:30:34.650
you did just say maths.

00:30:34.650 --> 00:30:37.890
And I think here it
would probably be math.

00:30:37.890 --> 00:30:39.140
JAKE ARCHIBALD: I don't know.

00:30:39.140 --> 00:30:41.250
It's mathematics--
so the abbreviation

00:30:41.250 --> 00:30:43.830
is maths is my strong opinion.

00:30:43.830 --> 00:30:46.650
But you know what, America,
I could live with it--

00:30:46.650 --> 00:30:47.580
I could live with it.

00:30:47.580 --> 00:30:49.920
But then you took
that s that you saved,

00:30:49.920 --> 00:30:52.130
and you put it on
the end of Lego.

00:30:52.130 --> 00:30:54.390
[AMERICAN ACCENT] Ooh, Legos.

00:30:54.390 --> 00:30:57.000
The toy is Lego.

00:30:57.000 --> 00:31:00.660
Legos is an island off the
coast of Spain, probably.

00:31:00.660 --> 00:31:01.410
I don't know.

00:31:01.410 --> 00:31:02.490
I'm not a geographist.

00:31:02.490 --> 00:31:03.640
PAUL LEWIS: Shall we--

00:31:03.640 --> 00:31:05.500
let's move on before we trigger
an international incident.

00:31:05.500 --> 00:31:07.333
JAKE ARCHIBALD: The
group doesn't like that.

00:31:07.333 --> 00:31:08.185
[LAUGHS] OK.

00:31:08.185 --> 00:31:09.810
So why does it slide
to the right then?

00:31:09.810 --> 00:31:10.380
What's going on?

00:31:10.380 --> 00:31:12.060
PAUL LEWIS: It's because
browsers try and reduce

00:31:12.060 --> 00:31:12.780
their workload.

00:31:12.780 --> 00:31:14.640
And the HTML spec
accounts for this

00:31:14.640 --> 00:31:17.750
by saying that a task is
queued to run event callbacks.

00:31:17.750 --> 00:31:19.230
And at the end of
the current task,

00:31:19.230 --> 00:31:20.370
the rendering path begins.

00:31:20.370 --> 00:31:21.828
And this is where
the browser takes

00:31:21.828 --> 00:31:23.930
stock of any style changes.

00:31:23.930 --> 00:31:26.850
Now by that point, that
translate X 200 pixels

00:31:26.850 --> 00:31:29.707
has been overwritten by
the translate X 100 pixels.

00:31:29.707 --> 00:31:31.290
So as far as the
browser is concerned,

00:31:31.290 --> 00:31:34.802
the animation should be from no
transform at all to 100 pixels.

00:31:34.802 --> 00:31:36.510
And that means when
the frame is shipped,

00:31:36.510 --> 00:31:38.310
it's going to
slide to the right.

00:31:38.310 --> 00:31:40.360
JAKE ARCHIBALD: So although
the DOM layer sees--

00:31:40.360 --> 00:31:42.660
has set the transform
to 200 pixels,

00:31:42.660 --> 00:31:45.715
we overwrite that value before
the style system in the browser

00:31:45.715 --> 00:31:46.590
takes any note of it.

00:31:46.590 --> 00:31:47.290
PAUL LEWIS: Yeah, exactly.

00:31:47.290 --> 00:31:50.160
So what we need to do, if we
want it to slide from the right

00:31:50.160 --> 00:31:53.490
to the left, is to make sure
that 200 pixel transform takes

00:31:53.490 --> 00:31:56.940
hold before we overwrite
it to 100 pixels.

00:31:56.940 --> 00:32:01.497
So with that in mind, here
comes the next question.

00:32:01.497 --> 00:32:03.830
You have an element with no
transform in the following--

00:32:03.830 --> 00:32:05.070
it's the same question, really.

00:32:05.070 --> 00:32:05.653
Same question.

00:32:05.653 --> 00:32:09.570
But the difference is we have
that final transform wrapped

00:32:09.570 --> 00:32:12.630
inside a request
animation frame.

00:32:12.630 --> 00:32:14.280
Does it slide to the right?

00:32:14.280 --> 00:32:15.600
Does it slide to the left?

00:32:15.600 --> 00:32:17.100
Does it snap to 100 pixels?

00:32:17.100 --> 00:32:20.876
Or does it gain sentience
and feel only sadness?

00:32:20.876 --> 00:32:22.000
Basically, a web developer.

00:32:22.000 --> 00:32:23.490
Let's see how you are voting.

00:32:26.390 --> 00:32:29.515
Less sure this time,
dividing the room.

00:32:29.515 --> 00:32:30.890
Except for one
particular answer.

00:32:30.890 --> 00:32:32.286
Wonder which one that is.

00:32:32.286 --> 00:32:33.910
Get a guess in, if
you haven't already.

00:32:33.910 --> 00:32:35.920
We are closing the question.

00:32:35.920 --> 00:32:38.286
3, 2, 1.

00:32:38.286 --> 00:32:41.115
It's locked in.

00:32:41.115 --> 00:32:42.240
So what are we seeing here?

00:32:42.240 --> 00:32:45.030
Kind of, pretty much
equal guessing among--

00:32:45.030 --> 00:32:47.680
that tends to happen with
this quiz about this point.

00:32:47.680 --> 00:32:52.030
It all just spreads out evenly
among the non-ridiculous

00:32:52.030 --> 00:32:53.670
answers, shall we say.

00:32:53.670 --> 00:32:57.580
The correct answer
though, is, once again,

00:32:57.580 --> 00:32:59.076
it slides to the right.

00:32:59.076 --> 00:32:59.950
JAKE ARCHIBALD: What?

00:32:59.950 --> 00:33:00.940
PAUL LEWIS: Dun-dun!

00:33:00.940 --> 00:33:01.380
JAKE ARCHIBALD: What?

00:33:01.380 --> 00:33:01.930
PAUL LEWIS: Yes.

00:33:01.930 --> 00:33:02.410
JAKE ARCHIBALD: Why?

00:33:02.410 --> 00:33:02.950
PAUL LEWIS: Yes.

00:33:02.950 --> 00:33:03.370
JAKE ARCHIBALD: Tell me.

00:33:03.370 --> 00:33:05.507
PAUL LEWIS: Because
maybe you're thinking--

00:33:05.507 --> 00:33:06.340
JAKE ARCHIBALD: Why?

00:33:06.340 --> 00:33:07.510
PAUL LEWIS: OK.

00:33:07.510 --> 00:33:09.745
Because-- you said the
transforms are 200 pixels.

00:33:09.745 --> 00:33:11.620
And you maybe thought,
eh, we waited a frame,

00:33:11.620 --> 00:33:13.080
and then we set
it to 100 pixels.

00:33:13.080 --> 00:33:14.650
Surely it took hold.

00:33:14.650 --> 00:33:16.210
We got the 200
pixels to take hold.

00:33:16.210 --> 00:33:17.430
And then we animated.

00:33:17.430 --> 00:33:18.800
Like that's what you'd expect.

00:33:18.800 --> 00:33:21.872
But no, the HTML spec
says, once again, things

00:33:21.872 --> 00:33:23.580
should be a little
bit different to that.

00:33:23.580 --> 00:33:24.530
JAKE ARCHIBALD: Yeah,
it's the same as before.

00:33:24.530 --> 00:33:27.010
Our event call back
runs as part of a task.

00:33:27.010 --> 00:33:29.710
And then we get to the rendering
bits of the event loop.

00:33:29.710 --> 00:33:32.277
And that involves running any
requested animation callbacks,

00:33:32.277 --> 00:33:34.360
and then the browser thinks
about styles and such,

00:33:34.360 --> 00:33:35.860
and doing the actual painting.

00:33:35.860 --> 00:33:37.350
Because animation
callbacks happen

00:33:37.350 --> 00:33:39.970
before style recalculation,
the net result,

00:33:39.970 --> 00:33:41.560
it's exactly the same before.

00:33:41.560 --> 00:33:45.076
We overwrite the value before
the style system sees it.

00:33:45.076 --> 00:33:45.700
PAUL LEWIS: OK.

00:33:45.700 --> 00:33:47.408
So let's talk about
what we could do then

00:33:47.408 --> 00:33:48.839
if we wanted to solve this.

00:33:48.839 --> 00:33:50.380
Now, one fix that
we could apply here

00:33:50.380 --> 00:33:52.480
would be to not call
request animation frame one.

00:33:52.480 --> 00:33:56.126
So no, but in fact,
call it twice.

00:33:56.126 --> 00:33:57.650
Just take that in.

00:33:57.650 --> 00:33:58.547
Enjoy that.

00:33:58.547 --> 00:34:01.130
Now, if you request an animation
callback while the browser is

00:34:01.130 --> 00:34:02.838
running an animation
callback, then those

00:34:02.838 --> 00:34:04.838
will run in the next turn
around the event loop.

00:34:04.838 --> 00:34:07.296
After style recall, which would
mean that you've definitely

00:34:07.296 --> 00:34:09.574
got something at 200 pixels
before transferring it

00:34:09.574 --> 00:34:10.250
to 100 pixels.

00:34:10.250 --> 00:34:14.192
The downside here is that you
got ridiculous looking code,

00:34:14.192 --> 00:34:15.650
and that it would
be an extra frame

00:34:15.650 --> 00:34:16.679
before the animation starts.

00:34:16.679 --> 00:34:18.350
And in fact, in
Safari, you'd actually

00:34:18.350 --> 00:34:20.840
wait two frames, because
they don't follow the spec.

00:34:20.840 --> 00:34:23.690
Though they do follow what,
I think, was our expectation.

00:34:23.690 --> 00:34:23.810
JAKE ARCHIBALD: Yeah.

00:34:23.810 --> 00:34:26.100
Initially we thought Chrome
was buggy, in this case.

00:34:26.100 --> 00:34:26.719
Until we actually
hooked up a spec.

00:34:26.719 --> 00:34:26.949
PAUL LEWIS: We were all ready.

00:34:26.949 --> 00:34:28.940
JAKE ARCHIBALD: I was like
see, CR bug and everything.

00:34:28.940 --> 00:34:29.690
PAUL LEWIS: Ready.

00:34:29.690 --> 00:34:30.701
And then, oh, no.

00:34:30.701 --> 00:34:32.659
But perhaps you don't
want to do this, kind of,

00:34:32.659 --> 00:34:33.710
ridiculous double graphing.

00:34:33.710 --> 00:34:35.960
And instead you want to force
that style recalculation

00:34:35.960 --> 00:34:38.150
to happen synchronously
so the style system sees

00:34:38.150 --> 00:34:41.449
that 200 pixel transform before
you change it to 100 pixels.

00:34:41.449 --> 00:34:43.070
Shall we have a
question on that?

00:34:43.070 --> 00:34:44.060
JAKE ARCHIBALD: Yes.

00:34:44.060 --> 00:34:45.409
PAUL LEWIS: Here we go.

00:34:45.409 --> 00:34:46.889
What could go in here?

00:34:46.889 --> 00:34:49.730
And by here we mean where
it says, answer goes here.

00:34:49.730 --> 00:34:53.630
To force a synchronous
update in Chrome 57.

00:34:53.630 --> 00:34:58.010
getBoundingClientRect,
offsetWidth, getComputedStyle,

00:34:58.010 --> 00:34:58.610
innerText.

00:34:58.610 --> 00:34:59.810
Select all that apply.

00:34:59.810 --> 00:35:01.370
JAKE ARCHIBALD: Ah,
multi-select one.

00:35:01.370 --> 00:35:03.301
Let's see how people are voting.

00:35:03.301 --> 00:35:03.800
OK.

00:35:03.800 --> 00:35:06.594
So we're confident
on one of them,

00:35:06.594 --> 00:35:07.760
unsure about to two of them.

00:35:07.760 --> 00:35:09.290
Pretty certain
one of them isn't.

00:35:09.290 --> 00:35:11.360
Seems to be what the
room is saying so far.

00:35:11.360 --> 00:35:12.704
Though it's kind of rising.

00:35:12.704 --> 00:35:14.120
We are going to
close the question

00:35:14.120 --> 00:35:14.940
in a couple of seconds.

00:35:14.940 --> 00:35:16.500
So take a guess, if
you haven't already.

00:35:16.500 --> 00:35:18.000
Make sure you hit
the submit button.

00:35:18.000 --> 00:35:23.160
Closed in 3, 2,
1, and it's done.

00:35:23.160 --> 00:35:25.820
PAUL LEWIS: getComputedStyle
there being the most popular

00:35:25.820 --> 00:35:27.370
of all the answers.

00:35:27.370 --> 00:35:28.536
JAKE ARCHIBALD: Interesting.

00:35:28.536 --> 00:35:30.440
But also the correct answer.

00:35:30.440 --> 00:35:32.000
What is it?

00:35:32.000 --> 00:35:33.227
It is--

00:35:33.227 --> 00:35:35.060
PAUL LEWIS: Everything
but getComputedStyle.

00:35:35.060 --> 00:35:36.755
[LAUGHTER]

00:35:36.755 --> 00:35:37.255
Who knew?

00:35:37.255 --> 00:35:37.970
We didn't.

00:35:37.970 --> 00:35:38.630
Well, I didn't.

00:35:38.630 --> 00:35:39.930
You did.

00:35:39.930 --> 00:35:40.850
Here's why.

00:35:40.850 --> 00:35:43.190
So the browser starts off
knowing the styles and layout

00:35:43.190 --> 00:35:45.386
for every element,
because it needed

00:35:45.386 --> 00:35:47.510
to know all of that stuff
in order to draw what you

00:35:47.510 --> 00:35:49.240
saw there, the frame before.

00:35:49.240 --> 00:35:51.260
But then we set
translateX to 200 pixels,

00:35:51.260 --> 00:35:53.270
meaning the browser's
calculations are no longer

00:35:53.270 --> 00:35:54.437
valid, no longer up to date.

00:35:54.437 --> 00:35:56.770
And that isn't a problem,
because the browser will just,

00:35:56.770 --> 00:35:58.640
like, recompute
everything once it needs

00:35:58.640 --> 00:36:00.380
to update the actual rendering.

00:36:00.380 --> 00:36:02.630
However, if we call
getBoundingClientRect,

00:36:02.630 --> 00:36:04.760
offsetWidth, or
innerText, the browser

00:36:04.760 --> 00:36:07.310
has to recalculate the style
and the layout synchronously

00:36:07.310 --> 00:36:09.090
in order to give you
the correct answer.

00:36:09.090 --> 00:36:09.590
Yeah.

00:36:09.590 --> 00:36:12.530
So if you're asking for,
say, the width of an element,

00:36:12.530 --> 00:36:14.560
the browser has to figure
out what you changed,

00:36:14.560 --> 00:36:15.976
what the impact
of that change is.

00:36:15.976 --> 00:36:18.720
And then and only then can
it give you the answer.

00:36:18.720 --> 00:36:20.144
JAKE ARCHIBALD: Right.

00:36:20.144 --> 00:36:22.310
And all of the correct
answers cause that to happen.

00:36:22.310 --> 00:36:25.870
Probably the most
surprising one is innerText.

00:36:25.870 --> 00:36:27.890
And innerText actually
has a layout dependency,

00:36:27.890 --> 00:36:30.012
because it won't give you the
text of the inner elements that

00:36:30.012 --> 00:36:31.010
are display-none.

00:36:31.010 --> 00:36:33.200
And it also has some
dependencies on line layout,

00:36:33.200 --> 00:36:34.407
as well.

00:36:34.407 --> 00:36:35.990
PAUL LEWIS: The
problem here is mostly

00:36:35.990 --> 00:36:38.630
that these are all fairly
heavyweight options.

00:36:38.630 --> 00:36:40.920
They trigger both style
calculations and layout

00:36:40.920 --> 00:36:41.900
synchronously.

00:36:41.900 --> 00:36:44.234
Not per frame, like in the
previous example, admittedly.

00:36:44.234 --> 00:36:45.108
JAKE ARCHIBALD: Yeah.

00:36:45.108 --> 00:36:47.810
And since layout calculations,
they scale with the DOM size,

00:36:47.810 --> 00:36:50.450
you risk pushing the start
of your animation back, which

00:36:50.450 --> 00:36:51.789
may make your app feel laggy.

00:36:51.789 --> 00:36:52.580
You press a button.

00:36:52.580 --> 00:36:54.038
You have to wait
a few milliseconds

00:36:54.038 --> 00:36:55.284
before it starts up.

00:36:55.284 --> 00:36:57.200
PAUL LEWIS: Now, what
we'd probably like to do

00:36:57.200 --> 00:37:00.180
is avoid calculating
layout, if at all possible,

00:37:00.180 --> 00:37:02.457
which we can do with
getComputedStyle.

00:37:02.457 --> 00:37:04.040
And you might have
noticed that wasn't

00:37:04.040 --> 00:37:05.870
one of the correct answers.

00:37:05.870 --> 00:37:08.720
And that's because things are
ever so slightly nuanced here.

00:37:08.720 --> 00:37:11.090
Because you might
think getComputedStyle

00:37:11.090 --> 00:37:14.240
captures the styles, but no.

00:37:14.240 --> 00:37:16.970
When it's cold, you might think
that, but not, in fact, it's

00:37:16.970 --> 00:37:17.710
not.

00:37:17.710 --> 00:37:19.210
No, because if you
update the styles

00:37:19.210 --> 00:37:22.250
before checking a property of
the computed styles object,

00:37:22.250 --> 00:37:24.609
you'll get the second
value and not the first.

00:37:24.609 --> 00:37:26.150
JAKE ARCHIBALD: And
this blew my mind

00:37:26.150 --> 00:37:27.410
when you first showed me it.

00:37:27.410 --> 00:37:28.880
The styles aren't
computed when you

00:37:28.880 --> 00:37:31.670
call the big
getComputedStyles function.

00:37:31.670 --> 00:37:33.410
No, they are computed
when you access

00:37:33.410 --> 00:37:36.680
one of the properties of
the object it returns.

00:37:36.680 --> 00:37:39.590
So to work around this weirdness
you call getComputedStyle,

00:37:39.590 --> 00:37:42.144
but also access one of the
properties, such as transform.

00:37:42.144 --> 00:37:44.810
PAUL LEWIS: And in the question,
technically, we didn't actually

00:37:44.810 --> 00:37:46.630
access the transform property.

00:37:46.630 --> 00:37:47.957
So I wouldn't do it.

00:37:47.957 --> 00:37:50.540
JAKE ARCHIBALD: All that said,
we overlooked one option, which

00:37:50.540 --> 00:37:51.800
is using web animations.

00:37:51.800 --> 00:37:53.610
And this is a nice
imperative API.

00:37:53.610 --> 00:37:55.174
Kind of jQuery like.

00:37:55.174 --> 00:37:56.840
And it will do these
kind of animations.

00:37:56.840 --> 00:37:59.480
And will make use of
compositing and everything.

00:37:59.480 --> 00:38:03.200
The problem is, web animations,
not great support out there.

00:38:03.200 --> 00:38:05.751
It's basically just partial
support in Chrome and Firefox.

00:38:05.751 --> 00:38:07.250
And because it's
in Chrome, it means

00:38:07.250 --> 00:38:09.833
you get it in, like, Opera, or
in Samsung Internet, et cetera.

00:38:09.833 --> 00:38:11.332
But not in Edge or Safari.

00:38:11.332 --> 00:38:12.040
PAUL LEWIS: Yeah.

00:38:12.040 --> 00:38:13.860
So while it is an
option, for compat,

00:38:13.860 --> 00:38:16.680
you're probably going to use
getComputedStyle for the time

00:38:16.680 --> 00:38:17.180
being.

00:38:17.180 --> 00:38:19.670
OK, so with both network
and rendering people,

00:38:19.670 --> 00:38:20.930
hopefully, fairly happy.

00:38:20.930 --> 00:38:21.862
But it isn't over yet.

00:38:21.862 --> 00:38:22.820
JAKE ARCHIBALD: Oh, no.

00:38:22.820 --> 00:38:24.820
PAUL LEWIS: Let's bring
on the quick fire round.

00:38:24.820 --> 00:38:27.195
JAKE ARCHIBALD: By which we
mean the silly questions that

00:38:27.195 --> 00:38:29.290
didn't really fit into
the narrative of the talk.

00:38:29.290 --> 00:38:30.440
PAUL LEWIS: Pretty much.

00:38:30.440 --> 00:38:32.520
JAKE ARCHIBALD: We just
wanted to ask them.

00:38:32.520 --> 00:38:33.020
OK.

00:38:33.020 --> 00:38:34.310
So our first one of these.

00:38:34.310 --> 00:38:35.030
Ready?

00:38:35.030 --> 00:38:35.590
Let's go.

00:38:35.590 --> 00:38:37.310
When we say quick
fire, we mean quick.

00:38:37.310 --> 00:38:40.520
PAUL LEWIS: What happens with
.foo min height 300 pixels,

00:38:40.520 --> 00:38:42.820
max height 200 pixels?

00:38:42.820 --> 00:38:43.950
Will it be 200 pixels tall?

00:38:43.950 --> 00:38:45.500
Will it be 300 pixels tall?

00:38:45.500 --> 00:38:46.580
Will it be 0 pixels tall?

00:38:46.580 --> 00:38:49.460
Will it crash all browsers
in a three mile radius?

00:38:49.460 --> 00:38:51.987
JAKE ARCHIBALD: Get
an answer in quickly.

00:38:51.987 --> 00:38:53.570
Well, let's see how
people are voting.

00:38:53.570 --> 00:38:55.530
So we've got one answer's
particularly popular.

00:38:55.530 --> 00:38:57.530
Hit submit, take a guess,
because we are closing

00:38:57.530 --> 00:38:58.539
the question in 3, 2, 1.

00:38:58.539 --> 00:39:00.580
PAUL LEWIS: It is called
quick fire for a reason.

00:39:00.580 --> 00:39:02.430
JAKE ARCHIBALD: And we are out.

00:39:02.430 --> 00:39:02.930
OK.

00:39:02.930 --> 00:39:05.720
200 pixels tall is the
most popular answer there.

00:39:05.720 --> 00:39:09.480
PAUL LEWIS: Now, according
to the CSS spec, Here we go--

00:39:09.480 --> 00:39:10.127
ding.

00:39:10.127 --> 00:39:10.960
JAKE ARCHIBALD: 300.

00:39:10.960 --> 00:39:12.460
PAUL LEWIS: The
algorithm for height

00:39:12.460 --> 00:39:14.036
is figure out the
tentative height.

00:39:14.036 --> 00:39:16.160
And then if it's bigger
than max height, reduce it.

00:39:16.160 --> 00:39:18.872
And if it's smaller than
min height, grow it.

00:39:18.872 --> 00:39:21.080
JAKE ARCHIBALD: Literally
no idea what you just said.

00:39:21.080 --> 00:39:22.788
PAUL LEWIS: Yeah, I
didn't think you did.

00:39:22.788 --> 00:39:24.549
It basically means min
height always wins.

00:39:24.549 --> 00:39:25.340
JAKE ARCHIBALD: OK.

00:39:25.340 --> 00:39:25.840
Fair enough.

00:39:25.840 --> 00:39:26.798
PAUL LEWIS: Here we go.

00:39:26.798 --> 00:39:29.510
JAKE ARCHIBALD: Let's move on
to another quick fire question.

00:39:29.510 --> 00:39:30.710
This is my favorite.

00:39:30.710 --> 00:39:33.168
PAUL LEWIS: After running this
code, which of the following

00:39:33.168 --> 00:39:33.990
is set to 1?

00:39:33.990 --> 00:39:36.920
And you can see we've
got an Int8Array.

00:39:36.920 --> 00:39:40.190
And we're setting a bunch
of items there to 1.

00:39:40.190 --> 00:39:43.910
So the suggestion here is that,
possibly, maybe, one or more

00:39:43.910 --> 00:39:45.350
of them is not going to work.

00:39:45.350 --> 00:39:48.439
So select all that apply,
and get an answer in quickly.

00:39:48.439 --> 00:39:50.480
Big thanks to the VA team
who showed us this one.

00:39:50.480 --> 00:39:51.690
We didn't know
anything about it.

00:39:51.690 --> 00:39:52.670
JAKE ARCHIBALD: No,
they were wonderful.

00:39:52.670 --> 00:39:54.370
PAUL LEWIS: Judging by the
spread of answers there,

00:39:54.370 --> 00:39:55.350
you know nothing about it.

00:39:55.350 --> 00:39:55.900
It's fine.

00:39:55.900 --> 00:39:56.930
We're all friends here.

00:39:56.930 --> 00:39:57.832
That's great.

00:39:57.832 --> 00:39:59.040
But we're locking it in, in--

00:39:59.040 --> 00:40:01.470
JAKE ARCHIBALD: 3, 2, 1.

00:40:01.470 --> 00:40:01.990
There we go.

00:40:04.510 --> 00:40:05.010
OK.

00:40:05.010 --> 00:40:09.960
So bleh, who knows the
correct answers though?

00:40:09.960 --> 00:40:12.750
Here they come, from the
server, which is getting slow.

00:40:12.750 --> 00:40:13.660
OK There we go.

00:40:13.660 --> 00:40:14.340
Yeah.

00:40:14.340 --> 00:40:17.100
Correct answer, 0.9, and 1.0.

00:40:17.100 --> 00:40:17.610
Why?

00:40:17.610 --> 00:40:19.590
PAUL LEWIS: Yeah, the
reason is pretty weird.

00:40:19.590 --> 00:40:22.140
So when you do this kind of
thing, when you assign, like,

00:40:22.140 --> 00:40:23.786
this with a string,
JavaScript needs

00:40:23.786 --> 00:40:26.160
to decide if you're assigning
to a property of the object

00:40:26.160 --> 00:40:28.780
or if you're assigning
to an index of the array.

00:40:28.780 --> 00:40:31.680
Now, numbers are treated
as array index assignments,

00:40:31.680 --> 00:40:35.820
but so are strings, if the
string is a canonical string

00:40:35.820 --> 00:40:36.945
representation of a number.

00:40:36.945 --> 00:40:39.528
JAKE ARCHIBALD: And when I first
heard that I had no idea what

00:40:39.528 --> 00:40:40.140
it meant.

00:40:40.140 --> 00:40:41.223
PAUL LEWIS: I still don't.

00:40:41.223 --> 00:40:42.767
But I can follow along.

00:40:42.767 --> 00:40:44.850
JAKE ARCHIBALD: So for
example, what's this about?

00:40:44.850 --> 00:40:45.840
PAUL LEWIS: OK.

00:40:45.840 --> 00:40:48.660
0.9 is not a canonical
representation,

00:40:48.660 --> 00:40:51.010
because the canonical
representation is not 0.9.

00:40:51.010 --> 00:40:51.180
JAKE ARCHIBALD: Yeah.

00:40:51.180 --> 00:40:52.260
This means the browser's
going to treat it

00:40:52.260 --> 00:40:53.700
as a property assignment.

00:40:53.700 --> 00:40:54.727
And that works fine.

00:40:54.727 --> 00:40:56.310
PAUL LEWIS: Same
goes for 1.0, because

00:40:56.310 --> 00:40:58.390
the canonical
representation is just 1.

00:40:58.390 --> 00:41:03.510
However, 1.1 is the canonical
representation of 1.1,

00:41:03.510 --> 00:41:05.280
so JS treats it as a number.

00:41:05.280 --> 00:41:08.160
JAKE ARCHIBALD: And this means
it tries to assign to the 1.1th

00:41:08.160 --> 00:41:09.510
item of the array.

00:41:09.510 --> 00:41:11.830
But array indexes
need to be integers.

00:41:11.830 --> 00:41:13.332
So it's just silently ignored.

00:41:13.332 --> 00:41:14.040
PAUL LEWIS: Yeah.

00:41:14.040 --> 00:41:15.730
Why would it throw an error?

00:41:15.730 --> 00:41:18.374
So the same goes for
1.2, same kind of deal.

00:41:18.374 --> 00:41:19.290
JAKE ARCHIBALD: Right.

00:41:19.290 --> 00:41:20.290
Second to last question.

00:41:20.290 --> 00:41:24.570
So we are going to move on, if
my clicker continues to work.

00:41:24.570 --> 00:41:25.380
There we go.

00:41:25.380 --> 00:41:26.520
That makes me happier.

00:41:26.520 --> 00:41:27.420
Devices at the ready.

00:41:27.420 --> 00:41:28.800
Here we go.

00:41:28.800 --> 00:41:31.123
PAUL LEWIS: How many
elements are created?

00:41:31.123 --> 00:41:32.050
JAKE ARCHIBALD: Oh.

00:41:32.050 --> 00:41:34.530
OK so we're assigning to
innerHTML, then plus equals,

00:41:34.530 --> 00:41:37.410
plus equals, plus equals, how
many elements does it create?

00:41:37.410 --> 00:41:39.240
PAUL LEWIS: One,
four, 10, or 16.

00:41:39.240 --> 00:41:40.516
Let's see how they're voting.

00:41:40.516 --> 00:41:41.640
JAKE ARCHIBALD: Quick fire.

00:41:41.640 --> 00:41:43.050
So get your answer in quickly.

00:41:43.050 --> 00:41:45.020
We've got two strong
answers, and two people

00:41:45.020 --> 00:41:47.469
who we're pretty dismissive of.

00:41:47.469 --> 00:41:49.010
Guess if you haven't
guessed already.

00:41:49.010 --> 00:41:52.220
We are closing in 3, 2, 1.

00:41:52.220 --> 00:41:54.030
And we are closed.

00:41:54.030 --> 00:41:56.600
So we're saying four and
one, the most popular answers

00:41:56.600 --> 00:41:57.650
of the room.

00:41:57.650 --> 00:41:58.490
PAUL LEWIS: OK.

00:41:58.490 --> 00:42:03.850
JAKE ARCHIBALD: The correct
answer, of course, is 10.

00:42:03.850 --> 00:42:04.810
Eh!

00:42:04.810 --> 00:42:05.780
PAUL LEWIS: Yay!

00:42:05.780 --> 00:42:07.280
JAKE ARCHIBALD: So
why is this then?

00:42:07.280 --> 00:42:07.780
OK.

00:42:07.780 --> 00:42:09.800
So when you use plus
equals, it is equivalent,

00:42:09.800 --> 00:42:11.614
it's just shorthand
for reading the value,

00:42:11.614 --> 00:42:12.530
and adding more to it.

00:42:12.530 --> 00:42:14.000
It's a read and a write.

00:42:14.000 --> 00:42:19.890
So if we expand this out further
we create 1, 2, 3, 4, 5, 6, 7,

00:42:19.890 --> 00:42:21.260
8, 9, 10 elements.

00:42:21.260 --> 00:42:21.920
There you go.

00:42:21.920 --> 00:42:22.490
PAUL LEWIS: So there you go.

00:42:22.490 --> 00:42:24.890
If you really want to append
a string to an element

00:42:24.890 --> 00:42:28.760
you can use insertAdjacentHTML,
which is ancient,

00:42:28.760 --> 00:42:29.920
and apparently brilliant.

00:42:29.920 --> 00:42:31.310
I get BoundingClientRect.

00:42:31.310 --> 00:42:32.930
JAKE ARCHIBALD: Thank you,
Internet Explorer 4 for that

00:42:32.930 --> 00:42:33.474
API.

00:42:33.474 --> 00:42:35.640
PAUL LEWIS: This will
actually create four elements.

00:42:35.640 --> 00:42:38.870
JAKE ARCHIBALD: So we're
going to do the final question

00:42:38.870 --> 00:42:40.160
of the whole quiz now.

00:42:40.160 --> 00:42:42.920
This might be my
favorite, this one.

00:42:42.920 --> 00:42:44.960
PAUL LEWIS: Given
this string of HTML,

00:42:44.960 --> 00:42:46.211
which resources are requested?

00:42:46.211 --> 00:42:47.918
JAKE ARCHIBALD: So
what have we got here?

00:42:47.918 --> 00:42:49.680
We've got an image of a source.

00:42:49.680 --> 00:42:50.180
Excellent.

00:42:50.180 --> 00:42:51.471
We've got a script of a source.

00:42:51.471 --> 00:42:53.210
You know, the link
roll style sheets.

00:42:53.210 --> 00:42:54.340
Linkroll preload.

00:42:54.340 --> 00:42:54.920
OK.

00:42:54.920 --> 00:42:57.250
So it's a select many.

00:42:57.250 --> 00:42:58.850
So select all that
you think apply.

00:42:58.850 --> 00:42:59.270
PAUL LEWIS: Yep.

00:42:59.270 --> 00:43:00.311
One, two, three, or four.

00:43:00.311 --> 00:43:00.867
Ah.

00:43:00.867 --> 00:43:03.200
JAKE ARCHIBALD: Let's see how
the answers are coming in.

00:43:03.200 --> 00:43:03.699
Interesting.

00:43:03.699 --> 00:43:04.827
A real spread here.

00:43:04.827 --> 00:43:06.410
PAUL LEWIS: So it's
kind of confident.

00:43:06.410 --> 00:43:07.610
I guess.

00:43:07.610 --> 00:43:08.990
JAKE ARCHIBALD: Wow.

00:43:08.990 --> 00:43:10.620
PAUL LEWIS: Did
anyone else see that?

00:43:10.620 --> 00:43:13.120
JAKE ARCHIBALD: I think there
is a large amount of bird mess

00:43:13.120 --> 00:43:15.359
has just landed
right in front of us.

00:43:15.359 --> 00:43:16.150
That is incredible.

00:43:16.150 --> 00:43:17.800
PAUL LEWIS: The birds are
not happy with the quiz.

00:43:17.800 --> 00:43:18.460
JAKE ARCHIBALD: Yeah.

00:43:18.460 --> 00:43:20.751
Someone didn't pick the right
answer in the last round.

00:43:20.751 --> 00:43:21.390
Fair enough.

00:43:21.390 --> 00:43:22.190
OK.

00:43:22.190 --> 00:43:24.360
I'm going to step
back a little bit.

00:43:24.360 --> 00:43:28.970
We are going to close
the question in 3, 2, 1.

00:43:28.970 --> 00:43:29.981
There it goes.

00:43:29.981 --> 00:43:30.606
PAUL LEWIS: OK.

00:43:30.606 --> 00:43:35.825
So sort of spread
there of the answers.

00:43:35.825 --> 00:43:38.555
JAKE ARCHIBALD: But which
ones actually are meant to be

00:43:38.555 --> 00:43:39.470
requested?

00:43:39.470 --> 00:43:42.020
It is one.

00:43:42.020 --> 00:43:43.340
Just one.

00:43:43.340 --> 00:43:45.320
And this question
is really evil.

00:43:45.320 --> 00:43:47.390
And I don't know how
many people might have

00:43:47.390 --> 00:43:48.750
spotted what was going on here.

00:43:48.750 --> 00:43:49.458
PAUL LEWIS: Yeah.

00:43:49.458 --> 00:43:51.590
So even though this
is an I-M-A-G-E image,

00:43:51.590 --> 00:43:54.200
the browser does treat
it as an I-M-G image.

00:43:54.200 --> 00:43:56.610
So yes, that one's
going to download.

00:43:56.610 --> 00:43:59.030
This script uses
source, S-O-U-R-C-E,

00:43:59.030 --> 00:44:01.059
rather than S-R-C .

00:44:01.059 --> 00:44:02.350
So the browser just ignores it.

00:44:02.350 --> 00:44:03.182
Just ignores it.

00:44:03.182 --> 00:44:03.890
Doesn't download.

00:44:03.890 --> 00:44:05.300
Don't like that one.

00:44:05.300 --> 00:44:06.710
These use the
correct attributes.

00:44:06.710 --> 00:44:10.135
But have you noticed that,
ooh yeah, that code highlight,

00:44:10.135 --> 00:44:11.960
well it's basically
all but gone.

00:44:11.960 --> 00:44:13.070
Why has it changed?

00:44:13.070 --> 00:44:15.560
JAKE ARCHIBALD: Well, in HTML,
script elements cannot be

00:44:15.560 --> 00:44:16.490
self-closing.

00:44:16.490 --> 00:44:17.640
That doesn't work.

00:44:17.640 --> 00:44:21.502
You have to close scripts with
a proper closing script tag.

00:44:21.502 --> 00:44:27.010
PAUL LEWIS: [LAUGHS] So if the
browser parses those two link

00:44:27.010 --> 00:44:29.829
elements as JavaScript, and now
it's going to throw an error.

00:44:29.829 --> 00:44:31.120
They definitely don't download.

00:44:31.120 --> 00:44:31.880
JAKE ARCHIBALD: Sorry.

00:44:31.880 --> 00:44:32.720
That was horrible.

00:44:32.720 --> 00:44:32.990
PAUL LEWIS: Sorry.

00:44:32.990 --> 00:44:33.680
Not sorry.

00:44:33.680 --> 00:44:35.487
Completely not sorry.

00:44:35.487 --> 00:44:37.070
JAKE ARCHIBALD: Well,
so this is it's.

00:44:37.070 --> 00:44:40.550
The moment we've been waiting
almost 45 minutes for.

00:44:40.550 --> 00:44:42.470
Who are the winners
of the mouse pad?

00:44:42.470 --> 00:44:44.440
Let's find out.

00:44:44.440 --> 00:44:45.240
Oh.

00:44:45.240 --> 00:44:46.140
Ivan.

00:44:46.140 --> 00:44:46.663
Andrei.

00:44:46.663 --> 00:44:47.704
PAUL LEWIS: Andrew Betts!

00:44:47.704 --> 00:44:48.572
JAKE ARCHIBALD: Andrew Betts.

00:44:48.572 --> 00:44:49.440
There he is there.

00:44:49.440 --> 00:44:49.795
PAUL LEWIS: Congratulations.

00:44:49.795 --> 00:44:51.300
JAKE ARCHIBALD: Excellent
But all three of you

00:44:51.300 --> 00:44:52.490
have won mouse pads.

00:44:52.490 --> 00:44:55.242
A big round of applause
to our three winners.

00:44:55.242 --> 00:44:57.505
PAUL LEWIS: So after the
session, come find us.

00:44:57.505 --> 00:44:58.880
Come to the front
with your phone

00:44:58.880 --> 00:45:00.980
and prove that you did
actually get that score.

00:45:00.980 --> 00:45:01.480
JAKE ARCHIBALD: Yes.

00:45:01.480 --> 00:45:03.020
And bigwebquiz.com
now shows a set

00:45:03.020 --> 00:45:05.570
of links describing the detail
behind some of the questions

00:45:05.570 --> 00:45:06.660
that we've asked today.

00:45:06.660 --> 00:45:09.210
And with that, it's
seen a pleasure.

00:45:09.210 --> 00:45:10.350
It's been a blast.

00:45:10.350 --> 00:45:11.984
Thank you so much
for playing along.

00:45:11.984 --> 00:45:12.650
Thank you, guys.

00:45:12.650 --> 00:45:13.149
Cheers.

00:45:13.149 --> 00:45:14.762
Bye.

00:45:14.762 --> 00:45:17.844
[MUSIC PLAYING]

