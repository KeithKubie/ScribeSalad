WEBVTT
Kind: captions
Language: en

00:00:02.734 --> 00:00:03.650
RETO MEIER: All right.

00:00:03.650 --> 00:00:05.270
Hello, everyone.

00:00:05.270 --> 00:00:10.480
And welcome to the Android
Studio Fireside Chat.

00:00:10.480 --> 00:00:11.550
My name is Reto Meier.

00:00:11.550 --> 00:00:14.180
I am a Developer Advocate
working on Android and Android

00:00:14.180 --> 00:00:14.680
Studio.

00:00:14.680 --> 00:00:17.640
And these fine people are
many of the folks involved

00:00:17.640 --> 00:00:20.990
in bringing us
Android Studio 2.0.

00:00:20.990 --> 00:00:22.210
They need no introduction.

00:00:22.210 --> 00:00:24.471
So I'm going to make them
do their own introductions.

00:00:24.471 --> 00:00:26.720
If each of you could go down
and introduce yourselves,

00:00:26.720 --> 00:00:28.010
that would be fantastic.

00:00:28.010 --> 00:00:28.286
STEPHANIE CUTHBERTSON: Sure.

00:00:28.286 --> 00:00:30.830
Hi, I'm Stephanie
Cuthbertson, the Group Product

00:00:30.830 --> 00:00:32.949
Manager for Android Studio.

00:00:32.949 --> 00:00:34.490
KATHRYN SHIH: Hi,
I'm Katherine Shih.

00:00:34.490 --> 00:00:38.010
I'm the Product Manager for
C++ and Gaming Support as well

00:00:38.010 --> 00:00:39.620
as Performance Tools.

00:00:39.620 --> 00:00:41.620
JEROME DOCHEZ: Hi,
I'm Jerome Dochez.

00:00:41.620 --> 00:00:43.684
I'm the Android Gradle
Plugin Tech Lead.

00:00:43.684 --> 00:00:45.600
MICHAL BENDOWSKI: My
name is Michal Bendowski.

00:00:45.600 --> 00:00:48.635
I'm an engineer on the
Gradle Plugin team.

00:00:48.635 --> 00:00:50.260
ALEX RUIZ: Hello, my
name is Alex Ruiz.

00:00:50.260 --> 00:00:53.070
I'm the tech lead for Project
Support, which is integration

00:00:53.070 --> 00:00:54.852
of build system and IDs.

00:00:54.852 --> 00:00:57.660
STEPHAN LINZNER: Stephan
Linzner, I'm a DPE,

00:00:57.660 --> 00:01:00.279
and I work on the Android
Testing Support Library.

00:01:00.279 --> 00:01:02.070
JAMAL EASON: Hi, I'm
Jamal Eason, a Product

00:01:02.070 --> 00:01:04.036
Manager on Android Studio.

00:01:04.036 --> 00:01:05.950
XAVIER DUCROHET: Hi,
I'm Xavier Ducrohet.

00:01:05.950 --> 00:01:07.960
I'm the tech lead for
the Developer Tools.

00:01:07.960 --> 00:01:08.550
TOR NORBYE: I'm Tor Norbye.

00:01:08.550 --> 00:01:09.656
I'm the tech lead
for Android Studio.

00:01:09.656 --> 00:01:11.760
ESTEBAN DE LA CANAL: Hi,
I'm Esteban De La Canal.

00:01:11.760 --> 00:01:13.384
I'm the tech lead
for performance tools

00:01:13.384 --> 00:01:14.250
in Android Studio.

00:01:14.250 --> 00:01:15.060
RETO MEIER: All
right, thank you all.

00:01:15.060 --> 00:01:16.920
So the purpose of
the fireside chat

00:01:16.920 --> 00:01:19.010
is to give you guys
the opportunity to ask

00:01:19.010 --> 00:01:21.002
all of these guys
anything you want

00:01:21.002 --> 00:01:22.210
to know about Android Studio.

00:01:22.210 --> 00:01:24.906
So I think we have one
mic set up over here.

00:01:24.906 --> 00:01:27.030
So if you have any questions,
please line up there.

00:01:27.030 --> 00:01:30.994
And I'll start taking some
questions once we have some.

00:01:30.994 --> 00:01:32.910
Given that there's no
one in line yet, luckily

00:01:32.910 --> 00:01:34.880
we have a few which we've
gathered from social media

00:01:34.880 --> 00:01:36.088
over the last couple of days.

00:01:36.088 --> 00:01:38.990
So I'm going to start
with one of those.

00:01:38.990 --> 00:01:41.610
First question, nice
broad, open-ended one.

00:01:41.610 --> 00:01:43.410
Why did the team
move to IntelliJ?

00:01:43.410 --> 00:01:44.780
And how has that turned out?

00:01:44.780 --> 00:01:46.030
STEPHANIE CUTHBERTSON: I
think Xavier should definitely

00:01:46.030 --> 00:01:46.866
answer that one.

00:01:49.750 --> 00:01:51.449
XAVIER DUCROHET:
It's a great ID.

00:01:51.449 --> 00:01:52.740
You know, and that's literally.

00:01:52.740 --> 00:01:58.430
Without that we couldn't build
a better Android-specific ID

00:01:58.430 --> 00:01:59.160
on top of it.

00:01:59.160 --> 00:02:02.840
And so, I hope that today's
demo, actually, showed

00:02:02.840 --> 00:02:04.390
that we made the right choice.

00:02:04.390 --> 00:02:07.744
And hopefully, you like it.

00:02:07.744 --> 00:02:11.642
[APPLAUSE]

00:02:11.642 --> 00:02:13.850
TOR NORBYE: And also, looking
around the Android team

00:02:13.850 --> 00:02:16.050
at the time, everyone
who had a choice of ID

00:02:16.050 --> 00:02:17.910
was using IntelliJ.

00:02:17.910 --> 00:02:20.600
And the Android Tools team
was pushing another ID.

00:02:20.600 --> 00:02:23.100
And so we thought, well, you
know, if the coding is so good,

00:02:23.100 --> 00:02:25.660
maybe that's what we
should give our users.

00:02:25.660 --> 00:02:27.670
RETO MEIER: Seems the
reasonable approach.

00:02:27.670 --> 00:02:30.570
A question from the
audience, please.

00:02:30.570 --> 00:02:31.225
AUDIENCE: Hi.

00:02:31.225 --> 00:02:32.370
I have two questions.

00:02:32.370 --> 00:02:35.200
One of them is from
yesterday, actually.

00:02:35.200 --> 00:02:38.250
I wanted to just ask
about Jack and Jill,

00:02:38.250 --> 00:02:42.760
and more specifically,
if there are going

00:02:42.760 --> 00:02:47.360
to be any implications
for using other languages

00:02:47.360 --> 00:02:55.610
once that starts rolling out in
a more official and stable way?

00:02:55.610 --> 00:02:59.210
Specifically, like if
we're using Kotlin,

00:02:59.210 --> 00:03:04.310
and Jack and Jill
becomes the default build

00:03:04.310 --> 00:03:07.350
tool, what will happen then?

00:03:07.350 --> 00:03:10.000
XAVIER DUCROHET:
So yeah, we don't

00:03:10.000 --> 00:03:12.410
have much to talk about
in terms of Jack and Jill.

00:03:12.410 --> 00:03:14.660
It's still a work in progress.

00:03:14.660 --> 00:03:16.216
You can try it right now.

00:03:16.216 --> 00:03:17.590
It's still
integrating in Gradle.

00:03:17.590 --> 00:03:19.381
I think we made a little
bit of improvement

00:03:19.381 --> 00:03:21.510
in the actual
Gradle integration.

00:03:21.510 --> 00:03:23.840
But there isn't a
whole lot to talk about

00:03:23.840 --> 00:03:30.360
until it's a featured parity
with the current toolchain,

00:03:30.360 --> 00:03:31.430
javac and dx.

00:03:31.430 --> 00:03:34.220
We may just switch it
as being the default,

00:03:34.220 --> 00:03:36.600
but we're not there yet anyway.

00:03:36.600 --> 00:03:41.580
So when that happens, hopefully
not too long from now,

00:03:41.580 --> 00:03:43.310
we'll do that.

00:03:43.310 --> 00:03:46.570
In the meantime, there
isn't much talk about.

00:03:46.570 --> 00:03:51.330
So regarding
languages, we are aware

00:03:51.330 --> 00:03:54.390
that, even though we
have a new toolchain,

00:03:54.390 --> 00:03:57.140
we know that you guys
want to be able to use

00:03:57.140 --> 00:03:59.169
different even libraries, right.

00:03:59.169 --> 00:04:00.710
Even without talking
about languages,

00:04:00.710 --> 00:04:03.580
if you can't reuse any
libraries, that's a problem.

00:04:03.580 --> 00:04:07.960
So that's what Jill is for,
supporting any Java bytecode

00:04:07.960 --> 00:04:10.050
and integrating that and
converting that into dx.

00:04:10.050 --> 00:04:12.080
So an integration
with Kotlin could be

00:04:12.080 --> 00:04:14.040
like using the Kotlin compiler.

00:04:14.040 --> 00:04:17.019
And then inserting
that into Jill,

00:04:17.019 --> 00:04:19.740
and then converting
that into dx.

00:04:19.740 --> 00:04:21.140
So it's not impossible.

00:04:21.140 --> 00:04:23.900
It may not be the
most efficient path.

00:04:23.900 --> 00:04:25.775
But it's definitely possible.

00:04:25.775 --> 00:04:26.940
AUDIENCE: Cool, thank you.

00:04:26.940 --> 00:04:30.680
And the second question was
about the performance test

00:04:30.680 --> 00:04:34.480
tools that were talked about
earlier today in the test

00:04:34.480 --> 00:04:36.330
session.

00:04:36.330 --> 00:04:39.800
I was wondering if we
instrument with those tests,

00:04:39.800 --> 00:04:43.720
will the Cloud Test Lab run
those tests on the devices,

00:04:43.720 --> 00:04:46.340
on physical devices, that
we specify and give us

00:04:46.340 --> 00:04:48.650
the performance
[INAUDIBLE] dumps.

00:04:48.650 --> 00:04:50.790
Because that would
be really awesome.

00:04:50.790 --> 00:04:53.820
STEPHAN LINZNER: So essentially,
right now it's just rules.

00:04:53.820 --> 00:04:56.030
But we definitely work
with the Cloud Test Lab

00:04:56.030 --> 00:04:57.620
to get these integrated.

00:04:57.620 --> 00:05:00.320
And I think we want to
look at the broader story

00:05:00.320 --> 00:05:02.100
to, not only have it
in Cloud Test Lab,

00:05:02.100 --> 00:05:03.474
but maybe also in
Android Studio.

00:05:03.474 --> 00:05:05.710
And surface the data
better so that you

00:05:05.710 --> 00:05:09.690
can get signals if something
changes over time, yes.

00:05:09.690 --> 00:05:10.770
AUDIENCE: Thank you.

00:05:10.770 --> 00:05:13.300
RETO MEIER: Thank you,
the next person, please.

00:05:13.300 --> 00:05:18.980
AUDIENCE: Hi, when Java 8
will be officially supported

00:05:18.980 --> 00:05:21.730
and available to all
Android developers

00:05:21.730 --> 00:05:23.717
be a little more happy?

00:05:23.717 --> 00:05:25.550
XAVIER DUCROHET: So you
need to go yesterday

00:05:25.550 --> 00:05:28.110
and I ask the
Framework team first.

00:05:28.110 --> 00:05:30.840
I know that they punted
some questions to us.

00:05:30.840 --> 00:05:33.680
So I'm going to punt
a question to them.

00:05:33.680 --> 00:05:36.390
You know, I mean, it's
not just a tool issue.

00:05:36.390 --> 00:05:39.860
So you're asking just
one half of Android.

00:05:39.860 --> 00:05:42.060
By half I mean like 10%, right.

00:05:42.060 --> 00:05:43.460
Android is a big team.

00:05:43.460 --> 00:05:45.100
TOR NORBYE: Well,
the Java 7 support

00:05:45.100 --> 00:05:46.570
was done by the Framework first.

00:05:46.570 --> 00:05:48.860
And then once that was done,
then we could, of course, do--

00:05:48.860 --> 00:05:50.110
XAVIER DUCROHET: I mean there
isn't a whole lot of work

00:05:50.110 --> 00:05:51.360
to do on the tool side, right.

00:05:51.360 --> 00:05:53.576
Like IntelliJ supports Java 8.

00:05:53.576 --> 00:05:55.200
You have JDK, you
have javac, you know.

00:05:55.200 --> 00:05:56.220
It's all there, right.

00:05:56.220 --> 00:06:00.490
And so it's, first,
a platform problem.

00:06:00.490 --> 00:06:02.827
And you're asking the
wrong people, sorry.

00:06:02.827 --> 00:06:04.910
STEPHANIE CUTHBERTSON:
What I would say though is,

00:06:04.910 --> 00:06:06.535
it's nice that you
asked that question.

00:06:06.535 --> 00:06:09.030
Because I probably have taken
it seven times at lunch now/

00:06:09.030 --> 00:06:11.720
I'm not getting a chance
to eat my dessert.

00:06:11.720 --> 00:06:13.650
I think that,
certainly, there have

00:06:13.650 --> 00:06:15.940
been a wide range of
people who have asked us

00:06:15.940 --> 00:06:17.240
for Java 8 support.

00:06:17.240 --> 00:06:19.180
It's definitely something
we're looking at.

00:06:19.180 --> 00:06:21.980
The number one thing that we
hear when people ask for Java i

00:06:21.980 --> 00:06:23.420
support is lambdas.

00:06:23.420 --> 00:06:26.220
so if it's lambdas you want,
you should affirm that.

00:06:26.220 --> 00:06:28.994
If there's other specific
language features that

00:06:28.994 --> 00:06:30.410
are very high
priority for you, it

00:06:30.410 --> 00:06:31.910
would be great to know
about those as well.

00:06:31.910 --> 00:06:33.530
And I think we'd say we
appreciate the feedback.

00:06:33.530 --> 00:06:35.272
But we don't have anything
specific to share right now.

00:06:35.272 --> 00:06:36.106
AUDIENCE: Thank you.

00:06:36.106 --> 00:06:37.772
RETO MEIER: We'll
take this opportunity.

00:06:37.772 --> 00:06:39.590
Who would like
lambdas, specifically?

00:06:39.590 --> 00:06:40.560
[APPLAUSE]

00:06:40.560 --> 00:06:42.110
STEPHANIE CUTHBERTSON:
There we go.

00:06:42.110 --> 00:06:44.040
RETO MEIER: So that's
something of an affirmation.

00:06:44.040 --> 00:06:45.748
STEPHANIE CUTHBERTSON:
Yep, that's great.

00:06:45.748 --> 00:06:46.980
RETO MEIER: Thank you.

00:06:46.980 --> 00:06:49.440
We'll take you as well.

00:06:49.440 --> 00:06:53.755
AUDIENCE: So the Android
tools site is a little rough.

00:06:53.755 --> 00:06:56.730
[LAUGHTER]

00:06:56.730 --> 00:06:58.110
RETO MEIER: Can you rephrase?

00:06:58.110 --> 00:06:58.880
What do you mean?

00:06:58.880 --> 00:07:01.380
STEPHANIE CUTHBERTSON: Is there
anyone here from the Android

00:07:01.380 --> 00:07:02.310
Tool site team?

00:07:02.310 --> 00:07:04.466
We'd love to have
you come up on stage.

00:07:04.466 --> 00:07:05.220
No, I'm kidding.

00:07:05.220 --> 00:07:05.761
Keep talking.

00:07:09.500 --> 00:07:11.470
AUDIENCE: I mean
it's not typically

00:07:11.470 --> 00:07:14.470
a very useful place to visit.

00:07:14.470 --> 00:07:19.397
The road map still mentions your
post-Android Studio 1.0 plans.

00:07:19.397 --> 00:07:21.980
TOR NORBYE: Yeah, so it's true
that there's a couple of things

00:07:21.980 --> 00:07:23.105
that are obsolete on there.

00:07:23.105 --> 00:07:26.160
I think I would disagree
that it's not useful.

00:07:26.160 --> 00:07:29.230
It's where we post
a lot of information

00:07:29.230 --> 00:07:31.260
that we can do
directly as engineers,

00:07:31.260 --> 00:07:33.010
as opposed to having
it sort of written up

00:07:33.010 --> 00:07:37.606
and go through the whole
putting it into proper English.

00:07:37.606 --> 00:07:38.980
So you know, it's
the place where

00:07:38.980 --> 00:07:40.370
you can find the
authoritative source

00:07:40.370 --> 00:07:42.530
on what you can do in the
build system, for example.

00:07:42.530 --> 00:07:44.905
And there's a number of other
documents we put out there,

00:07:44.905 --> 00:07:47.570
and then that have since been
processed by professional doc

00:07:47.570 --> 00:07:49.034
writers into real documentation.

00:07:49.034 --> 00:07:49.950
So it's good for that.

00:07:49.950 --> 00:07:51.580
But it's true that the
road map, and don't we

00:07:51.580 --> 00:07:53.160
have a document that says
what we would like help with?

00:07:53.160 --> 00:07:54.535
And it's probably
five years old.

00:07:54.535 --> 00:07:58.240
Yeah so, apologies for
the outdated content.

00:07:58.240 --> 00:08:00.810
RETO MEIER: It has a
superset of information.

00:08:00.810 --> 00:08:04.602
So it's got useful information,
but also other information.

00:08:04.602 --> 00:08:06.060
TOR NORBYE: Yeah,
but it is helpful

00:08:06.060 --> 00:08:08.620
when people complain
that it's out of date.

00:08:08.620 --> 00:08:10.032
Then we do try to fix it.

00:08:10.032 --> 00:08:10.990
The road map is tricky.

00:08:10.990 --> 00:08:13.073
Because, I think it's a
policy, we don't generally

00:08:13.073 --> 00:08:14.460
talk about stuff in the future.

00:08:14.460 --> 00:08:16.490
XAVIER DUCROHET: So
there's a couple of things

00:08:16.490 --> 00:08:19.810
that we do want to migrate
and to significantly improve

00:08:19.810 --> 00:08:21.200
the documentation for Gradle.

00:08:21.200 --> 00:08:25.157
We already started
publishing the DSA reference.

00:08:25.157 --> 00:08:26.740
AUDIENCE: Yeah,
that's a good example.

00:08:26.740 --> 00:08:29.290
XAVIER DUCROHET: So we do
want to integrate better

00:08:29.290 --> 00:08:31.100
into developer.android.com.

00:08:31.100 --> 00:08:33.419
We do want to have a
proper user guide also

00:08:33.419 --> 00:08:34.809
on developer.android.com.

00:08:34.809 --> 00:08:36.924
So everything that's
been officially released

00:08:36.924 --> 00:08:38.299
in the stable
channel, we do want

00:08:38.299 --> 00:08:39.757
to migrate to
developer.android.com

00:08:39.757 --> 00:08:43.400
And we're starting to have
some plan to work on that soon.

00:08:43.400 --> 00:08:46.200
You know, tools.android.com
is a good place for us

00:08:46.200 --> 00:08:49.174
to put information about stuff
that's not stable, right.

00:08:49.174 --> 00:08:50.590
On developer.android.com,
we don't

00:08:50.590 --> 00:08:53.030
want to preview things
that are not final,

00:08:53.030 --> 00:08:55.100
things that may change
before they get released.

00:08:55.100 --> 00:08:58.970
So we'll keep using it more as
a, hey, here's the 2.0 Canary.

00:08:58.970 --> 00:09:02.110
You know, here's a bunch
of stuff to look at it.

00:09:02.110 --> 00:09:04.610
That's the place where you'll
find that kind of information.

00:09:04.610 --> 00:09:07.430
But we do want to migrate
stuff that's now being promoted

00:09:07.430 --> 00:09:10.040
to stable, like hey, Gradle
is the official build system,

00:09:10.040 --> 00:09:12.240
to developer.android.com.

00:09:12.240 --> 00:09:14.100
AUDIENCE: Thanks.

00:09:14.100 --> 00:09:15.495
RETO MEIER: Please.

00:09:15.495 --> 00:09:17.650
AUDIENCE: Hi, guys.

00:09:17.650 --> 00:09:20.915
Are there any plans to create
a more, like an integration

00:09:20.915 --> 00:09:23.137
for CI into Android Studio?

00:09:25.940 --> 00:09:27.330
XAVIER DUCROHET: Which CI?

00:09:27.330 --> 00:09:31.460
AUDIENCE: OK, I assume everybody
is using Jenkins, probably,

00:09:31.460 --> 00:09:33.331
or a lot of people.

00:09:33.331 --> 00:09:34.580
XAVIER DUCROHET: I don't know.

00:09:34.580 --> 00:09:36.570
Who is using Jenkins?

00:09:36.570 --> 00:09:39.150
TOR NORBYE: Oh. [INAUDIBLE].

00:09:39.150 --> 00:09:42.304
XAVIER DUCROHET: OK, who
is using something else?

00:09:42.304 --> 00:09:43.720
That's still a
good number, right.

00:09:43.720 --> 00:09:48.260
So I mean, we do want
to improve our CI story.

00:09:48.260 --> 00:09:50.832
I don't know that, actually,
integrating that into Studio

00:09:50.832 --> 00:09:51.790
is the number one goal.

00:09:51.790 --> 00:09:54.660
Maybe we should first
have a CI story.

00:09:54.660 --> 00:09:57.425
You know, you can use
Jenkins right now.

00:09:57.425 --> 00:09:58.300
But it's not awesome.

00:09:58.300 --> 00:10:00.175
You have to do a lot of
manual configuration.

00:10:00.175 --> 00:10:01.760
And we do want to
improve that first.

00:10:01.760 --> 00:10:04.020
So once we have that, we'll
probably look at what else

00:10:04.020 --> 00:10:06.927
we can do to make it
an end-to-end story.

00:10:06.927 --> 00:10:08.760
TOR NORBYE: It would
be good to know what it

00:10:08.760 --> 00:10:10.700
is you feel is missing as well.

00:10:10.700 --> 00:10:13.350
Because I know that there are
plugins for a lot of things.

00:10:13.350 --> 00:10:15.920
So running unit tests, Android
tests, should be pretty--

00:10:15.920 --> 00:10:17.510
XAVIER DUCROHET: I think
he was talking specifically

00:10:17.510 --> 00:10:18.990
about Studio
integration with CI.

00:10:18.990 --> 00:10:21.031
TOR NORBYE: Do you want
like a build notification

00:10:21.031 --> 00:10:23.187
when a job is done and failed?

00:10:23.187 --> 00:10:25.020
Or what specifically
do you want in the IDE?

00:10:25.020 --> 00:10:27.950
AUDIENCE: OK, I was
recently asked by a PM

00:10:27.950 --> 00:10:30.330
about if Android
Studio has something

00:10:30.330 --> 00:10:34.050
like the really nice dashboards
that Xcode has for the Xcode

00:10:34.050 --> 00:10:34.762
bots.

00:10:34.762 --> 00:10:36.220
XAVIER DUCROHET:
OK, so a dashboard

00:10:36.220 --> 00:10:38.390
of running jobs, the ability
to right click and say

00:10:38.390 --> 00:10:41.530
kill this job, give
my job more priority.

00:10:41.530 --> 00:10:43.396
OK, got it.

00:10:43.396 --> 00:10:45.150
[LAUGHTER]

00:10:45.150 --> 00:10:46.660
RETO MEIER: Request noted.

00:10:46.660 --> 00:10:49.210
Please, if other people have
questions, please jump up.

00:10:49.210 --> 00:10:51.150
It's a good opportunity
to ask hard questions,

00:10:51.150 --> 00:10:52.358
because there's not too many.

00:10:52.358 --> 00:10:54.175
So they can take their
time answering them.

00:10:54.175 --> 00:10:56.050
In the meantime, I do
have a few from online,

00:10:56.050 --> 00:10:57.530
which I can pass on.

00:10:57.530 --> 00:11:01.180
This one asks, why is
ADB throughput so poor?

00:11:01.180 --> 00:11:07.010
USB 2 can do like
16 mbs, but ADB

00:11:07.010 --> 00:11:10.210
seems to cap out at about
3 megabits, et cetera.

00:11:10.210 --> 00:11:13.600
So why is ADB
throughput so poor?

00:11:13.600 --> 00:11:16.106
XAVIER DUCROHET: Because
the product code is stupid.

00:11:16.106 --> 00:11:18.902
[LAUGHTER]

00:11:20.929 --> 00:11:22.720
JEROME DOCHEZ: That's
a long answer, right?

00:11:22.720 --> 00:11:24.178
XAVIER DUCROHET:
Yeah, yeah, I mean

00:11:24.178 --> 00:11:28.557
it sends like a little bit of
data, then it waits for an ACK,

00:11:28.557 --> 00:11:30.140
and then sends a
little bit more data,

00:11:30.140 --> 00:11:31.980
and then waits for an ACK.

00:11:31.980 --> 00:11:33.980
Yeah, it's broken.

00:11:33.980 --> 00:11:34.890
So we are fixing it.

00:11:34.890 --> 00:11:38.340
We have a better
protocol coming.

00:11:38.340 --> 00:11:40.800
I don't know how it
was designed that way,

00:11:40.800 --> 00:11:43.982
but it was a poor decision.

00:11:43.982 --> 00:11:45.440
JAMAL EASON: And
initially, we were

00:11:45.440 --> 00:11:48.280
adding just better throughput
just on the ADB side,

00:11:48.280 --> 00:11:49.280
but also on the devices.

00:11:49.280 --> 00:11:51.062
We talked about that
in the emulator talk.

00:11:51.062 --> 00:11:52.770
And you know, it's
just basically looking

00:11:52.770 --> 00:11:54.940
at increasing the throughput
on both of the devices,

00:11:54.940 --> 00:11:56.870
which just makes it faster.

00:11:56.870 --> 00:11:59.200
RETO MEIER: Great,
another question here,

00:11:59.200 --> 00:12:01.300
talking about the emulator.

00:12:01.300 --> 00:12:03.690
Excited to try it,
but still disappointed

00:12:03.690 --> 00:12:06.400
by how long it has taken to
just boot up in the past.

00:12:06.400 --> 00:12:08.540
So has the boot speed
for the emulator

00:12:08.540 --> 00:12:10.450
improved in the new version?

00:12:10.450 --> 00:12:12.950
JAMAL EASON: Yes, so we didn't
really talk about it as much.

00:12:12.950 --> 00:12:15.860
But we mentioned about
faster CPU speed.

00:12:15.860 --> 00:12:18.590
So the boot was really about
loading files onto the emulator

00:12:18.590 --> 00:12:19.770
and starting it up.

00:12:19.770 --> 00:12:22.610
So with the impact of dual-core
support, multi-core support,

00:12:22.610 --> 00:12:23.906
we actually can go faster.

00:12:23.906 --> 00:12:25.780
And you'll see that
later on when we actually

00:12:25.780 --> 00:12:27.455
release it for release.

00:12:27.455 --> 00:12:29.036
RETO MEIER: Fantastic.

00:12:29.036 --> 00:12:30.630
A question from the audience.

00:12:30.630 --> 00:12:32.838
AUDIENCE: Yeah, this also
came up yesterday, I guess.

00:12:32.838 --> 00:12:35.380
But I was wondering why
some of the artifacts

00:12:35.380 --> 00:12:39.340
are published in the report
like JCentral and Maven Central,

00:12:39.340 --> 00:12:44.420
while others are only delivered
to the support development, SDK

00:12:44.420 --> 00:12:45.950
Management.

00:12:45.950 --> 00:12:49.730
So why is it supported
and not [INAUDIBLE]?

00:12:49.730 --> 00:12:52.960
XAVIER DUCROHET: So you have
to click through a license

00:12:52.960 --> 00:12:54.100
to get those.

00:12:54.100 --> 00:12:57.810
And JCentral and Maven Central
do not allow that workflow.

00:12:57.810 --> 00:12:58.520
That's it.

00:12:58.520 --> 00:13:00.448
AUDIENCE: OK.

00:13:00.448 --> 00:13:02.440
RETO MEIER: Easy answer.

00:13:02.440 --> 00:13:04.700
Another question from online.

00:13:04.700 --> 00:13:08.250
Can I use Instant Run to improve
turnaround times on pipelines

00:13:08.250 --> 00:13:10.800
outside of Android Studio?

00:13:10.800 --> 00:13:13.300
So they want to take advantage
of all the cool things you've

00:13:13.300 --> 00:13:16.250
done, but do it
outside of your tool.

00:13:16.250 --> 00:13:17.570
Is such a thing possible?

00:13:17.570 --> 00:13:19.577
TOR NORBYE: Why would
they want to do that?

00:13:19.577 --> 00:13:20.660
RETO MEIER: Next question.

00:13:20.660 --> 00:13:22.384
I couldn't imagine.

00:13:22.384 --> 00:13:24.800
TOR NORBYE: Currently it's
built inside of Android Studio.

00:13:24.800 --> 00:13:27.560
So the connection to the
app is maintained by Studio.

00:13:27.560 --> 00:13:29.380
It's not done from
the Gradle plugin.

00:13:29.380 --> 00:13:30.750
So there is no way to.

00:13:30.750 --> 00:13:33.190
XAVIER DUCROHET: And you
know, Gradle doesn't really

00:13:33.190 --> 00:13:37.317
talk continuously to
devices, but Studio does.

00:13:37.317 --> 00:13:39.784
Studio monitors file changes,
which Gradle doesn't do.

00:13:39.784 --> 00:13:41.200
So there's a lot
of things that we

00:13:41.200 --> 00:13:43.340
can do where, if
the integration was

00:13:43.340 --> 00:13:45.910
done, if it was
just done in Gradle,

00:13:45.910 --> 00:13:47.650
it would not be as good.

00:13:47.650 --> 00:13:49.650
TOR NORBYE: Plus, even
the pushing to the device

00:13:49.650 --> 00:13:51.024
is not done through
Gradle today.

00:13:51.024 --> 00:13:52.530
It's done in Studio.

00:13:52.530 --> 00:13:55.227
And Studio maintains a cache
of check sums and things

00:13:55.227 --> 00:13:56.810
like that to make
sure that it doesn't

00:13:56.810 --> 00:13:58.840
have to push the same
app over and over again.

00:13:58.840 --> 00:14:00.030
We'd have to put a lot
of stuff in Gradle.

00:14:00.030 --> 00:14:02.393
We'd have to put Studio in
Gradle, really, to do this.

00:14:02.393 --> 00:14:04.690
RETO MEIER: Great,
that's a good answer.

00:14:04.690 --> 00:14:08.430
A couple of related questions,
where is Studio support for C++

00:14:08.430 --> 00:14:09.400
going?

00:14:09.400 --> 00:14:11.340
And are there any
new features related

00:14:11.340 --> 00:14:14.200
to the NDK in
Android Studio 2.0?

00:14:14.200 --> 00:14:17.000
KATHRYN SHIH: So I don't
think 2.0, per se, has new NDK

00:14:17.000 --> 00:14:19.580
features, except for
the GPU profiler.

00:14:19.580 --> 00:14:22.590
There have been features
released shortly before 2.0,

00:14:22.590 --> 00:14:23.970
mostly the stuff
I covered today,

00:14:23.970 --> 00:14:26.130
so the experimental
Gradle support.

00:14:26.130 --> 00:14:28.510
I guess that's either before
or after 2.0, depending

00:14:28.510 --> 00:14:30.510
on whether you count the
day it was experimental

00:14:30.510 --> 00:14:33.820
or the day it stops
being experimental.

00:14:33.820 --> 00:14:36.240
Then similarly, the
debugger support

00:14:36.240 --> 00:14:39.140
is either right
before or right after,

00:14:39.140 --> 00:14:40.540
depending on your counting.

00:14:40.540 --> 00:14:45.100
As far as the more broadly where
it's going, in the short term,

00:14:45.100 --> 00:14:48.930
I think, I probably could not
say with a straight face that

00:14:48.930 --> 00:14:51.510
there are no rough edges
in the C++ experience.

00:14:51.510 --> 00:14:53.260
There's a number of
rough edges, as anyone

00:14:53.260 --> 00:14:54.870
who's tried it will testify.

00:14:54.870 --> 00:14:57.070
And so, for the
short to medium term,

00:14:57.070 --> 00:15:00.240
we're really just focused on
sanding those down and making

00:15:00.240 --> 00:15:03.790
it so the C++ experience is
as smooth and easy as the Java

00:15:03.790 --> 00:15:06.015
experience can be.

00:15:06.015 --> 00:15:07.390
I think long-term
plans will come

00:15:07.390 --> 00:15:10.760
after we get to that point.

00:15:10.760 --> 00:15:12.690
RENO MEIER: That
makes a lot of sense.

00:15:12.690 --> 00:15:15.730
Will Android Studio ever
support mipmap suggestions

00:15:15.730 --> 00:15:17.060
in XML layout editing?

00:15:20.130 --> 00:15:22.120
TOR NORBYE: Say
it one more time.

00:15:22.120 --> 00:15:25.850
RETO MEIER: Will Android Studio
ever support mipmap suggestions

00:15:25.850 --> 00:15:28.600
in XML layout editing?

00:15:28.600 --> 00:15:30.770
TOR NORBYE: Yeah,
we should do that.

00:15:30.770 --> 00:15:31.680
RETO MEIER: Great.

00:15:31.680 --> 00:15:32.796
Yeah, that's easy.

00:15:32.796 --> 00:15:34.170
Anyone else has
feature requests,

00:15:34.170 --> 00:15:35.180
now is probably a good time.

00:15:35.180 --> 00:15:36.721
TOR NORBYE: The word
was ever, right?

00:15:36.721 --> 00:15:38.632
There was no specific timeline.

00:15:38.632 --> 00:15:39.340
RETO MEIER: Ever.

00:15:39.340 --> 00:15:39.940
TOR NORBYE: It will.

00:15:39.940 --> 00:15:40.648
RETO MEIER: Yeah.

00:15:40.648 --> 00:15:41.510
OK, great.

00:15:41.510 --> 00:15:44.560
You've heard it here first.

00:15:44.560 --> 00:15:49.390
OK, another question, again,
with a non-defined timeline.

00:15:49.390 --> 00:15:52.090
I know you announced
the Eclipse deprecation.

00:15:52.090 --> 00:15:54.927
When will it officially
be deprecated?

00:15:54.927 --> 00:15:57.010
JAMAL EASON: Well, just
to clarify, so we actually

00:15:57.010 --> 00:16:00.850
deprecated it, Eclipse.

00:16:00.850 --> 00:16:02.748
Which means you
should not use it.

00:16:02.748 --> 00:16:04.873
RETO MEIER: So some time
in the past is the answer.

00:16:04.873 --> 00:16:05.560
JAMAL EASON: What's that?

00:16:05.560 --> 00:16:06.900
RETO MEIER: Sometime in
the past is the answer.

00:16:06.900 --> 00:16:08.450
JAMAL EASON: In the past, right.

00:16:08.450 --> 00:16:10.222
But yeah, I mean,
really the focus

00:16:10.222 --> 00:16:11.930
has been on Android
Studio for some time.

00:16:11.930 --> 00:16:13.571
And if you haven't
made the conversion,

00:16:13.571 --> 00:16:15.570
all this cool stuff is
not available on Eclipse.

00:16:15.570 --> 00:16:18.755
So really, use Android
Studio and migrate over.

00:16:18.755 --> 00:16:20.380
If you have issues,
please let us know.

00:16:20.380 --> 00:16:23.857
We can help you through that.

00:16:23.857 --> 00:16:24.940
RETO MEIER: OK, let's see.

00:16:24.940 --> 00:16:28.000
Would a feature like
Saving Custom Templates

00:16:28.000 --> 00:16:31.214
be introduced in any
future version of Studio?

00:16:31.214 --> 00:16:32.380
Because that would be great.

00:16:35.150 --> 00:16:38.480
XAVIER DUCROHET: Saving
custom templates.

00:16:38.480 --> 00:16:41.835
TOR NORBYE: Well, we
support it now, kind of.

00:16:41.835 --> 00:16:43.210
RETO MEIER: It's
very convincing.

00:16:43.210 --> 00:16:44.690
TOR NORBYE: Yeah, the only
way you can do it right now

00:16:44.690 --> 00:16:46.870
is you put your custom
templates in the SDK folder

00:16:46.870 --> 00:16:47.990
under Extras Templates.

00:16:50.264 --> 00:16:51.680
The only people I
know who do this

00:16:51.680 --> 00:16:53.710
are typically book
authors, right.

00:16:53.710 --> 00:16:55.300
Because then they
could very easily

00:16:55.300 --> 00:16:58.979
do a repeatable thing
for each chapter.

00:16:58.979 --> 00:16:59.520
I don't know.

00:16:59.520 --> 00:17:03.500
Is that a feature lot of
people are excited about?

00:17:03.500 --> 00:17:06.641
OK, well, we have
one or two votes.

00:17:06.641 --> 00:17:08.849
Yeah, given all the other
things we are trying to do,

00:17:08.849 --> 00:17:10.390
I don't know if it's
top of our list.

00:17:10.390 --> 00:17:11.724
But we could always consider it.

00:17:11.724 --> 00:17:13.889
MICHAL BENDOWSKI: I [INAUDIBLE]
imagine, for example

00:17:13.889 --> 00:17:16.180
like, [INAUDIBLE] to
provide custom templates,

00:17:16.180 --> 00:17:17.770
specifically for this library.

00:17:17.770 --> 00:17:19.609
And other library
authors might be

00:17:19.609 --> 00:17:23.156
interested in doing
something like this.

00:17:23.156 --> 00:17:25.197
RETO MEIER: A question
from the audience, please.

00:17:25.197 --> 00:17:28.030
AUDIENCE: Yeah, the
AOSP Bug Tracker, there

00:17:28.030 --> 00:17:30.060
have been a few
passes, it seems,

00:17:30.060 --> 00:17:34.260
of bugs that are still active
being marked as obsolete.

00:17:34.260 --> 00:17:36.170
How should the community
interpret that.

00:17:36.170 --> 00:17:40.910
What is the meaning of the
obsolete closing status?

00:17:40.910 --> 00:17:45.260
XAVIER DUCROHET: Are you talking
about some recent handful

00:17:45.260 --> 00:17:48.240
of bugs, or a large number
of bugs that were suddenly

00:17:48.240 --> 00:17:51.050
marked as obsolete?

00:17:51.050 --> 00:17:54.060
AUDIENCE: Well, I think I've
seen multiple passes of it.

00:17:54.060 --> 00:17:58.852
But there was one very
large bulk closing.

00:17:58.852 --> 00:18:01.715
You know, there have been
numerous comments of saying,

00:18:01.715 --> 00:18:04.228
no I still experience this.

00:18:04.228 --> 00:18:07.240
A couple of these were things
that I was still seeing.

00:18:07.240 --> 00:18:10.000
So there was this bulk closing.

00:18:10.000 --> 00:18:13.740
So I guess what was the--

00:18:13.740 --> 00:18:17.290
XAVIER DUCROHET: So
some of the bulk closing

00:18:17.290 --> 00:18:19.920
that happened were
just some people

00:18:19.920 --> 00:18:22.430
on the platform realizing
that, hey, no one is

00:18:22.430 --> 00:18:23.720
looking at those bugs.

00:18:23.720 --> 00:18:27.146
There's probably some
people who are still

00:18:27.146 --> 00:18:28.270
hoping that we'll fix them.

00:18:28.270 --> 00:18:29.570
But since no one
is looking at them,

00:18:29.570 --> 00:18:32.040
let's actually tell people
that we're not looking at them,

00:18:32.040 --> 00:18:35.200
rather than just
give false hope.

00:18:35.200 --> 00:18:37.340
You know, that's not
the main bug tracker

00:18:37.340 --> 00:18:38.650
for the Android team.

00:18:38.650 --> 00:18:41.189
We, on the Tools
team, we do use it.

00:18:41.189 --> 00:18:42.230
This is our main tracker.

00:18:42.230 --> 00:18:45.940
But for the platform team
we have an internal tracker.

00:18:45.940 --> 00:18:50.520
And you know, Android
engineers on the platform

00:18:50.520 --> 00:18:53.500
may not look at it as
often as maybe they should.

00:18:53.500 --> 00:18:54.010
Some do.

00:18:54.010 --> 00:18:55.680
And there's been some
good improvement,

00:18:55.680 --> 00:18:58.960
I think, recently from people
looking at it more closely.

00:18:58.960 --> 00:19:01.754
But if you have some bugs
that are dating from 2008,

00:19:01.754 --> 00:19:03.250
when you released Android 1.0.

00:19:03.250 --> 00:19:05.540
It's like, realistically,
we're not going to fix them.

00:19:05.540 --> 00:19:06.970
We might as well
just close them.

00:19:07.704 --> 00:19:09.870
TOR NORBYE: So most of the
obsolete bugs I've closed

00:19:09.870 --> 00:19:13.796
have been, their filed
against Studio 0.4, 0.5, 0.8.

00:19:13.796 --> 00:19:15.170
And the point is,
that to us that

00:19:15.170 --> 00:19:18.291
is as ancient as Android 1.0
would be for the Android team,

00:19:18.291 --> 00:19:18.790
right.

00:19:18.790 --> 00:19:21.170
So we have someone reporting
a stack trace where nothing

00:19:21.170 --> 00:19:22.400
really is current anymore.

00:19:22.400 --> 00:19:24.566
And we could spend a lot
of time investigating that.

00:19:24.566 --> 00:19:26.740
But given the high
volume of reports we get,

00:19:26.740 --> 00:19:30.040
it's probably better to
close those as obsolete.

00:19:30.040 --> 00:19:31.760
So that people
don't put duplicates

00:19:31.760 --> 00:19:35.314
for a very similar symptom, but
pointing to old information.

00:19:35.314 --> 00:19:37.730
XAVIER DUCROHET: So I don't
think we've done bulk closing.

00:19:37.730 --> 00:19:41.220
But we have closed all
the ones like that.

00:19:41.220 --> 00:19:43.150
Yeah, I mean, if there's
a bug that you think

00:19:43.150 --> 00:19:46.320
is still there and really
should be fixed, just reopen it,

00:19:46.320 --> 00:19:49.040
if it's on a newer
version of Android, right.

00:19:49.040 --> 00:19:51.459
If it's still on
Marshmallow, just reopen it.

00:19:51.459 --> 00:19:53.250
JAMAL EASON: I would
add, if you file bugs,

00:19:53.250 --> 00:19:58.072
make sure you have clear
repro steps and screen shots.

00:19:58.072 --> 00:20:00.030
Because some of the bugs
we have are just like,

00:20:00.030 --> 00:20:00.937
hey, it doesn't work.

00:20:00.937 --> 00:20:02.770
And you can't really
work with those things.

00:20:02.770 --> 00:20:04.800
So be clear with all the
instructions on the bug

00:20:04.800 --> 00:20:06.930
templates, and we can
respond back to you.

00:20:06.930 --> 00:20:07.763
AUDIENCE: Thank you.

00:20:10.140 --> 00:20:12.310
RETO MEIER: Please.

00:20:12.310 --> 00:20:14.050
AUDIENCE: On the
unit testing site,

00:20:14.050 --> 00:20:17.690
so now unit testing
works really good.

00:20:17.690 --> 00:20:20.310
So everything that comes
basically from Android

00:20:20.310 --> 00:20:21.990
is the place for
unit testing, right.

00:20:21.990 --> 00:20:24.250
This Android draft is generated.

00:20:24.250 --> 00:20:26.760
But a lot of things come from
the support libraries or get

00:20:26.760 --> 00:20:28.051
moved to the support libraries.

00:20:28.051 --> 00:20:30.600
So this is like real cool
that it's not marked out.

00:20:30.600 --> 00:20:33.810
Any solution there, or is
someone working on those?

00:20:33.810 --> 00:20:36.950
The unit testing of things that
come out of support library

00:20:36.950 --> 00:20:37.767
gets easier?

00:20:37.767 --> 00:20:39.850
MICHAL BENDOWSKI: So what
exactly is the question?

00:20:39.850 --> 00:20:42.770
You would like us to
provide what exactly?

00:20:42.770 --> 00:20:45.660
AUDIENCE: When something
like a [INAUDIBLE]

00:20:45.660 --> 00:20:47.290
for the support libraries.

00:20:47.290 --> 00:20:49.248
MICHAL BENDOWSKI: You
mean to make this support

00:20:49.248 --> 00:20:50.434
libraries [INAUDIBLE].

00:20:50.434 --> 00:20:51.850
AUDIENCE: So if
you use something,

00:20:51.850 --> 00:20:54.040
a little support library, like
extended view or something,

00:20:54.040 --> 00:20:56.581
you cannot unit test it anymore
because there's a lot of code

00:20:56.581 --> 00:20:57.870
running there suddenly.

00:20:57.870 --> 00:20:59.800
Is there a way to mock this.

00:20:59.800 --> 00:21:02.540
But everything that comes out
of Android itself, it's a view,

00:21:02.540 --> 00:21:05.260
there is no code running when
the unit tests are running.

00:21:05.260 --> 00:21:06.760
MICHAL BENDOWSKI:
We're not actively

00:21:06.760 --> 00:21:07.680
working on it at the moment.

00:21:07.680 --> 00:21:08.770
But it's on our road map.

00:21:08.770 --> 00:21:10.870
We actually discussed
it, how we could actually

00:21:10.870 --> 00:21:14.060
extend our support
to support libraries

00:21:14.060 --> 00:21:16.430
and to GMS core and whatnot.

00:21:16.430 --> 00:21:19.070
We will be looking at
it next year, hopefully.

00:21:19.070 --> 00:21:20.807
AUDIENCE: OK, thanks.

00:21:20.807 --> 00:21:23.140
RETO MEIER: I've got a slightly
open-ended question here

00:21:23.140 --> 00:21:24.330
from online.

00:21:24.330 --> 00:21:26.715
It says the performance tools
are getting better rapidly

00:21:26.715 --> 00:21:28.410
but need some more work.

00:21:28.410 --> 00:21:30.010
What's the plan for
performance tools?

00:21:30.010 --> 00:21:32.010
ESTEBAN DE LA CANAL: I
can probably answer that.

00:21:32.010 --> 00:21:37.090
So if you saw the
talk before, we

00:21:37.090 --> 00:21:40.460
are investing heavily on the
line performance analysis.

00:21:40.460 --> 00:21:42.289
So the monitors
that you are seeing

00:21:42.289 --> 00:21:43.330
is where we're investing.

00:21:43.330 --> 00:21:48.070
So we're going to invest
in memory, CPU, battery.

00:21:48.070 --> 00:21:49.967
A lot of you asked
me about when are you

00:21:49.967 --> 00:21:51.550
going to do something
about batteries?

00:21:51.550 --> 00:21:53.360
We are going to
be doing something

00:21:53.360 --> 00:21:55.530
about battery performance.

00:21:55.530 --> 00:21:59.420
And the direction is, we want
to give you as much information

00:21:59.420 --> 00:22:02.841
as we can without you having
to actually go and profile

00:22:02.841 --> 00:22:03.340
your app.

00:22:03.340 --> 00:22:05.045
And then if you
really find a problem

00:22:05.045 --> 00:22:06.420
that you don't
know how to solve,

00:22:06.420 --> 00:22:08.830
then we will give
you the right tools

00:22:08.830 --> 00:22:13.775
to dig deep into that problem
particularly and analyze it.

00:22:13.775 --> 00:22:14.525
RETO MEIER: Great.

00:22:14.525 --> 00:22:16.900
ESTEBAN DE LA CANAL:
That's the direction.

00:22:16.900 --> 00:22:18.780
RETO MEIER: A question
from the audience.

00:22:18.780 --> 00:22:21.270
AUDIENCE: Yeah, I had a
question about the Instant Run

00:22:21.270 --> 00:22:23.130
functionality and
how hard it would

00:22:23.130 --> 00:22:26.720
be for a third-party language
to hook into that feature?

00:22:26.720 --> 00:22:29.770
Would it just be about producing
a sufficiently granular

00:22:29.770 --> 00:22:31.340
incremental build?

00:22:31.340 --> 00:22:34.630
Or is there a very
involved pipeline

00:22:34.630 --> 00:22:37.280
that they would
have to implement?

00:22:37.280 --> 00:22:40.044
JEROME DOCHEZ: OK, I
guess that's for me.

00:22:40.044 --> 00:22:41.960
So you're talking about
something like Kotlin,

00:22:41.960 --> 00:22:42.690
for instance.

00:22:42.690 --> 00:22:43.330
AUDIENCE: Yeah.

00:22:43.330 --> 00:22:47.535
JEROME DOCHEZ: Right, so
in theory, the Instant Run

00:22:47.535 --> 00:22:50.110
is hooking up on the
class file format already.

00:22:50.110 --> 00:22:53.462
So as long as your tool is
producing a normal class

00:22:53.462 --> 00:22:59.110
file, in theory we should be
able to hook up fairly easy.

00:22:59.110 --> 00:23:00.350
However, we've never tried.

00:23:00.350 --> 00:23:03.950
So chances are,
it's not working.

00:23:03.950 --> 00:23:07.180
But yes, we are definitely doing
the [INAUDIBLE] instrumentation

00:23:07.180 --> 00:23:08.190
at the class file level.

00:23:08.190 --> 00:23:10.960
We just load the
[INAUDIBLE] class files

00:23:10.960 --> 00:23:12.890
and we instrument those.

00:23:12.890 --> 00:23:14.560
There's not much magic here.

00:23:14.560 --> 00:23:17.200
We've seen these around
for quite many years.

00:23:17.200 --> 00:23:18.950
TOR NORBYE: And there's
the new transforms

00:23:18.950 --> 00:23:21.800
API, which is basically
allowing more plugins to work.

00:23:21.800 --> 00:23:24.427
JEROME DOCHEZ: So I don't know
if you went to Xavier's talk

00:23:24.427 --> 00:23:25.010
earlier today.

00:23:25.010 --> 00:23:26.551
But there is the
Transform API, which

00:23:26.551 --> 00:23:30.290
will help you introducing
your transformer.

00:23:30.290 --> 00:23:33.030
But that probably won't take
care of the Kotlin compiler.

00:23:33.030 --> 00:23:35.510
But still, there are
many ways that we'll

00:23:35.510 --> 00:23:38.410
be able to hook up your code.

00:23:38.410 --> 00:23:40.530
AUDIENCE: Awsome, thank you.

00:23:40.530 --> 00:23:42.015
RETO MEIER: And
another question.

00:23:42.015 --> 00:23:44.440
AUDIENCE: Hi, I'm wondering
if there are any plans

00:23:44.440 --> 00:23:46.770
to include UI test recording.

00:23:46.770 --> 00:23:49.960
So Xcode has some sort of
where you just click around,

00:23:49.960 --> 00:23:51.294
it starts recording your step.

00:23:51.294 --> 00:23:52.710
And then you can
just replay them.

00:23:52.710 --> 00:23:56.669
Is that something that
may come in the future?

00:23:56.669 --> 00:23:58.710
STEPHAN LINZNER: I mean,
it's certainly something

00:23:58.710 --> 00:24:00.000
that we look at.

00:24:00.000 --> 00:24:02.086
Because right now
I can get on stage.

00:24:02.086 --> 00:24:03.460
I can tell you,
how your Espresso

00:24:03.460 --> 00:24:05.200
is so awesome and so easy.

00:24:05.200 --> 00:24:07.580
But at the end of the day
you have to write your test.

00:24:07.580 --> 00:24:10.590
And so yeah, it's
something that makes

00:24:10.590 --> 00:24:12.830
recording UI tests easier.

00:24:12.830 --> 00:24:15.230
It's also something
that's interesting for us

00:24:15.230 --> 00:24:18.900
because we can inject best
practices through code

00:24:18.900 --> 00:24:20.260
generation.

00:24:20.260 --> 00:24:23.440
But yeah, it's
obviously something

00:24:23.440 --> 00:24:26.040
that will improve and
drive adoption of Espresso.

00:24:26.040 --> 00:24:29.630
So we certainly look at
these kind of approaches.

00:24:29.630 --> 00:24:33.034
But we are not actively
working on it right now.

00:24:33.034 --> 00:24:34.290
AUDIENCE: Thank you.

00:24:34.290 --> 00:24:36.530
RETO MEIER: Another
question from social media.

00:24:36.530 --> 00:24:39.110
Will it be possible to
use Instant Run for apps

00:24:39.110 --> 00:24:42.767
with multidex enabled, so
with more than 65,000 methods?

00:24:42.767 --> 00:24:44.475
JEROME DOCHEZ: It
actually already works.

00:24:44.475 --> 00:24:45.391
RETO MEIER: Fantastic.

00:24:45.391 --> 00:24:48.240
JEROME DOCHEZ: So it's better if
you use the native multidexing.

00:24:48.240 --> 00:24:50.002
It's going to make
it much faster.

00:24:50.002 --> 00:24:52.350
But I was actually helping
somebody earlier today

00:24:52.350 --> 00:24:54.590
who was running
into the 65k limit

00:24:54.590 --> 00:24:57.710
when he enabled his
application with Instant Run.

00:24:57.710 --> 00:25:00.810
And we switched to
multidex, and it worked.

00:25:00.810 --> 00:25:03.250
Except we were surprised
about how many methods

00:25:03.250 --> 00:25:03.900
we were adding.

00:25:03.900 --> 00:25:06.190
But we'll work on that.

00:25:06.190 --> 00:25:07.697
So yeah, we know it works.

00:25:07.697 --> 00:25:09.160
RETO MEIER: Fantastic.

00:25:09.160 --> 00:25:10.752
Another question
from the audience.

00:25:10.752 --> 00:25:12.250
AUDIENCE: I have
a second question.

00:25:12.250 --> 00:25:14.560
It's about, we have those
annotations, non-null

00:25:14.560 --> 00:25:18.550
and nullable for a while
now, which will be nice.

00:25:18.550 --> 00:25:21.710
But they only will be
shown in Android Studio as

00:25:21.710 --> 00:25:25.070
like a warning, but it is not
part of Lint, as far as I know.

00:25:25.070 --> 00:25:28.860
So is there any way to trigger
this by Lint so that a CI will

00:25:28.860 --> 00:25:30.180
say, hey there is a hold up.

00:25:30.180 --> 00:25:32.660
You're using something
that is null?

00:25:32.660 --> 00:25:34.420
TOR NORBYE: Yeah,
the problem is that,

00:25:34.420 --> 00:25:36.180
to support that from
Lint, we'd basically

00:25:36.180 --> 00:25:39.300
have to duplicate functionality.

00:25:39.300 --> 00:25:43.200
When you run it in Studio, it's
done by IntelliJ basically.

00:25:43.200 --> 00:25:46.200
So Lint doesn't run that
stuff on the command line.

00:25:46.200 --> 00:25:48.730
So we'd have to go to the
trouble of reimplementing

00:25:48.730 --> 00:25:51.310
all that for Lint's own uses.

00:25:51.310 --> 00:25:53.170
Which may not be worth it.

00:25:53.170 --> 00:25:54.919
So the easier way to
do it is to just run

00:25:54.919 --> 00:25:56.710
IntelliJ's own inspections
from the command

00:25:56.710 --> 00:25:57.870
line, which you can do.

00:25:57.870 --> 00:26:01.180
If you look at Distribution,
there is an Inspect LSH script.

00:26:01.180 --> 00:26:04.462
So you do that plus a profile
XML File that you can make.

00:26:04.462 --> 00:26:05.670
And you can run that from CI.

00:26:05.670 --> 00:26:07.129
You just get an XML file.

00:26:07.129 --> 00:26:07.670
No you don't.

00:26:07.670 --> 00:26:10.800
You get lots of XML
files, one per inspection.

00:26:10.800 --> 00:26:13.040
But you can do your
own little command line

00:26:13.040 --> 00:26:14.300
processing of that.

00:26:14.300 --> 00:26:16.010
XAVIER DUCROHET: We should a
better integration for that.

00:26:16.010 --> 00:26:16.926
TOR NORBYE: We should.

00:26:16.926 --> 00:26:18.220
Yeah, good point.

00:26:18.220 --> 00:26:19.428
AUDIENCE: Thanks [INAUDIBLE].

00:26:21.420 --> 00:26:24.040
RETO MEIER: Great, let's take
another audience question.

00:26:24.040 --> 00:26:25.456
AUDIENCE: My
question [INAUDIBLE].

00:26:25.456 --> 00:26:29.240
So how did you make a decision
to advise the Android Studio

00:26:29.240 --> 00:26:34.062
version to 2.0 instead of
just one point something?

00:26:34.062 --> 00:26:35.770
RETO MEIER: What
justifies the extra 0.4?

00:26:37.852 --> 00:26:40.060
KATHRYN SHIH: It's interesting,
because we debated it

00:26:40.060 --> 00:26:41.440
quite a bit internally.

00:26:41.440 --> 00:26:45.190
Because I will say that, in
our own engineering team,

00:26:45.190 --> 00:26:47.600
I think it's fair to say
the bar is very high.

00:26:47.600 --> 00:26:51.950
And the team feels strongly
about not over promising.

00:26:51.950 --> 00:26:56.030
So we debated at quite some
length about the numbering.

00:26:56.030 --> 00:26:59.960
And ultimately, I think it would
be great if a couple of people

00:26:59.960 --> 00:27:01.090
weighed in on this as well.

00:27:01.090 --> 00:27:04.380
But there are a
few major features

00:27:04.380 --> 00:27:08.900
that we felt were significant
in how they changed

00:27:08.900 --> 00:27:10.550
the way you will develop.

00:27:10.550 --> 00:27:12.420
Probably the most
significant of those,

00:27:12.420 --> 00:27:15.490
as everyone in the audience that
I've talked to in the last two

00:27:15.490 --> 00:27:18.407
days, has mentioned
is Instant Run.

00:27:18.407 --> 00:27:20.490
Because it really does
change the way you develop.

00:27:20.490 --> 00:27:22.140
And several of us
have it running.

00:27:22.140 --> 00:27:24.310
Once you get used to
running with Instant

00:27:24.310 --> 00:27:27.230
Run, the ones of us who
have had it live for quite

00:27:27.230 --> 00:27:33.120
some time find, even
though there certainly

00:27:33.120 --> 00:27:35.820
were some bugs in the
early implementations,

00:27:35.820 --> 00:27:37.560
you just don't ever
want to have it off.

00:27:37.560 --> 00:27:39.610
Because it just
completely changes.

00:27:39.610 --> 00:27:42.530
You always end up writing
code with the emulator up,

00:27:42.530 --> 00:27:44.910
or the device up, and
seeing how it runs.

00:27:44.910 --> 00:27:47.670
I think the changes
in the emulator

00:27:47.670 --> 00:27:49.192
are also very significant.

00:27:49.192 --> 00:27:50.900
And the two in
combination are important.

00:27:50.900 --> 00:27:54.350
Because together, you
can execute code and see

00:27:54.350 --> 00:27:56.060
the results very quickly.

00:27:56.060 --> 00:28:00.610
Those were two of the
most driving forces.

00:28:00.610 --> 00:28:03.250
I would say the code
search features are also

00:28:03.250 --> 00:28:04.470
quite significant.

00:28:04.470 --> 00:28:07.230
And actually, probably
the other biggest one

00:28:07.230 --> 00:28:09.559
was the integration of
IntelliJ 15, which I think,

00:28:09.559 --> 00:28:11.350
as we mentioned, the
team did very rapidly.

00:28:11.350 --> 00:28:13.600
It really did just come
out three weeks ago

00:28:13.600 --> 00:28:15.480
for those of you guys
who watch IntelliJ 15.

00:28:15.480 --> 00:28:17.800
And it has a really
wide range of features.

00:28:17.800 --> 00:28:20.690
We didn't talk
about all those, we

00:28:20.690 --> 00:28:22.807
didn't enumerate them
specifically in the keynote.

00:28:22.807 --> 00:28:25.390
Although I think Tor did kind
of an amazing job of walking you

00:28:25.390 --> 00:28:28.020
through some of the cool
things you get with IntelliJ.

00:28:28.020 --> 00:28:30.290
But those were probably
the three biggest things

00:28:30.290 --> 00:28:34.610
that drove us to do it, IntelliJ
15, the emulators, and Instant

00:28:34.610 --> 00:28:35.290
Run.

00:28:35.290 --> 00:28:38.030
Does anybody else
want to talk specific?

00:28:38.030 --> 00:28:40.250
It wasn't a decision
that we made lightly.

00:28:40.250 --> 00:28:43.277
Because we feel so strongly
about not over promising.

00:28:43.277 --> 00:28:45.360
TOR NORBYE: But I think
the other thing is that we

00:28:45.360 --> 00:28:48.210
released 1.0 about a year ago.

00:28:48.210 --> 00:28:51.640
So it seems like going to a
major revision a year later

00:28:51.640 --> 00:28:52.170
is fair.

00:28:52.170 --> 00:28:56.980
Otherwise, we'd start
like 1.10, 1.11, right.

00:28:56.980 --> 00:28:59.910
XAVIER DUCROHET: And also like
last year, we did IntelliJ 14

00:28:59.910 --> 00:29:01.060
on the 1.2.

00:29:01.060 --> 00:29:03.300
And it felt like, at
least to some of us,

00:29:03.300 --> 00:29:07.330
that the switch from 1.1 to 1.2,
when we got all of IntelliJ 14.

00:29:07.330 --> 00:29:09.580
It was like a brand new
debugger, UI, and all of that.

00:29:09.580 --> 00:29:12.180
It was kind of like
the 1.2 didn't really

00:29:12.180 --> 00:29:14.275
show all the things
you guys were getting.

00:29:17.850 --> 00:29:19.350
AUDIENCE: Thank you.

00:29:19.350 --> 00:29:22.000
RETO MEIER: Surprisingly
detailed answer.

00:29:22.000 --> 00:29:22.820
Another question.

00:29:22.820 --> 00:29:24.111
AUDIENCE: OK, hi it's me again.

00:29:24.111 --> 00:29:25.880
Just one thing
about the CI bits.

00:29:25.880 --> 00:29:28.340
I really care about
the dashboard thing.

00:29:28.340 --> 00:29:33.600
But having a plugin that I could
use to configure Jenkins tasks

00:29:33.600 --> 00:29:39.160
and hit Run for manual-built
jobs would be really nice.

00:29:39.160 --> 00:29:41.410
So that's just like
the part before that.

00:29:41.410 --> 00:29:44.680
And after that, I have one
other question about tests.

00:29:44.680 --> 00:29:47.480
It would be really nice to
have performance tests where

00:29:47.480 --> 00:29:51.570
I can set a performance
goal for, like, Method X.

00:29:51.570 --> 00:29:54.550
And then have the test
running and then get alert

00:29:54.550 --> 00:29:58.177
when my performance is
deteriorating for some reason.

00:29:58.177 --> 00:29:59.260
That would be really cool.

00:29:59.260 --> 00:30:02.120
Any ideas about that?

00:30:02.120 --> 00:30:04.540
STEPHAN LINZNER: So if you
look at the actual code lab,

00:30:04.540 --> 00:30:06.910
it actually uses a
time out in the test.

00:30:06.910 --> 00:30:09.270
And so if you have a Janky test.

00:30:09.270 --> 00:30:12.230
And it goes past this time out,
the test will actually fail.

00:30:12.230 --> 00:30:15.790
So go downstairs and
look at the code lab.

00:30:15.790 --> 00:30:17.410
Or do it from home.

00:30:17.410 --> 00:30:19.002
It's already in there.

00:30:19.002 --> 00:30:19.710
AUDIENCE: Thanks.

00:30:19.710 --> 00:30:19.920
ESTEBAN DE LA
CANAL: Another thing

00:30:19.920 --> 00:30:21.980
to add on the
performance side, we

00:30:21.980 --> 00:30:23.840
are planning all the
analysis I mentioned

00:30:23.840 --> 00:30:25.250
we will do live on your app.

00:30:25.250 --> 00:30:27.750
We are planning on also
porting that to a library

00:30:27.750 --> 00:30:29.420
that you can use on
the CI environment.

00:30:29.420 --> 00:30:33.080
So you could check, for
example, linked activity

00:30:33.080 --> 00:30:33.940
running your tests.

00:30:33.940 --> 00:30:36.248
So that's something
we are planning.

00:30:40.976 --> 00:30:42.850
AUDIENCE: I have a
question about the future.

00:30:42.850 --> 00:30:44.266
I know you don't
like those, but I

00:30:44.266 --> 00:30:46.550
think I ask this for all of us.

00:30:46.550 --> 00:30:51.110
Are we going to have an Android
Dev Summit in the future?

00:30:51.110 --> 00:30:54.025
RETO MEIER: They've
asked the right people.

00:30:54.025 --> 00:30:54.900
I hope so.

00:30:54.900 --> 00:30:56.752
Have you guys enjoyed
this Dev Summit?

00:30:56.752 --> 00:31:00.860
[APPLAUSE]

00:31:04.464 --> 00:31:07.684
I will pass that raucous
applause on to the organizers.

00:31:07.684 --> 00:31:09.100
We've certainly
enjoyed having it.

00:31:09.100 --> 00:31:11.180
Have you guys enjoyed
this as a venue

00:31:11.180 --> 00:31:13.250
to launch your
new product, yeah?

00:31:14.252 --> 00:31:16.210
STEPHANIE CUTHBERTSON:
I'd love to hear, again,

00:31:16.210 --> 00:31:17.293
other folks talk about it.

00:31:17.293 --> 00:31:18.930
It's been incredibly
valuable for us.

00:31:18.930 --> 00:31:21.624
Because, especially
with this audience,

00:31:21.624 --> 00:31:23.290
with the folks who
have chosen to attend

00:31:23.290 --> 00:31:27.450
this conference, the depth of
the questions and the feedback

00:31:27.450 --> 00:31:28.500
that we're getting.

00:31:28.500 --> 00:31:31.190
The technical depth and the
understanding that you have,

00:31:31.190 --> 00:31:33.315
it's tremendously valuable
to the engineering team.

00:31:33.315 --> 00:31:35.905
And I'm sure you guys have
noticed, the caliber of folks

00:31:35.905 --> 00:31:37.850
that you're getting
from the engineering

00:31:37.850 --> 00:31:41.810
teams of Android Studio, Android
Platform Android Framework.

00:31:41.810 --> 00:31:45.540
You've seen all of these
really very foundational people

00:31:45.540 --> 00:31:47.550
for Android Studio.

00:31:47.550 --> 00:31:51.150
You've seen Dianne
Hackborn, a very wide range

00:31:51.150 --> 00:31:54.640
of people who are quite
critical in the decisions that

00:31:54.640 --> 00:31:56.220
drive Android.

00:31:56.220 --> 00:31:59.040
And so the feedback is just
tremendously valuable for us.

00:31:59.040 --> 00:32:01.450
I think a key question
for us, of course,

00:32:01.450 --> 00:32:03.310
because it's a lot
of time for you is,

00:32:03.310 --> 00:32:04.900
is this really worth your time?

00:32:04.900 --> 00:32:07.590
So I think that's probably the
main thing we need to know.

00:32:07.590 --> 00:32:09.880
How many people in
the audience would

00:32:09.880 --> 00:32:12.385
attend something like this
again, if we were to do it?

00:32:12.385 --> 00:32:15.860
[APPLAUSE]

00:32:15.860 --> 00:32:16.360
OK.

00:32:16.360 --> 00:32:18.270
RETO MEIER: So to most people.

00:32:18.270 --> 00:32:21.110
Yeah, I mean, I think I can
speak for the people here,

00:32:21.110 --> 00:32:22.010
specifically.

00:32:22.010 --> 00:32:25.400
We would love to be
able to do this again.

00:32:25.400 --> 00:32:27.690
So yeah, we hope so, I guess.

00:32:27.690 --> 00:32:29.686
But none of us are going
to make that decision.

00:32:29.686 --> 00:32:32.159
So take that for
what it's worth.

00:32:32.159 --> 00:32:33.700
We've got no one
else behind the mic.

00:32:33.700 --> 00:32:36.600
I do have a couple
more questions here.

00:32:36.600 --> 00:32:38.500
Let's see, what have we got?

00:32:38.500 --> 00:32:41.350
When do you plan to enable
Instant Run for library

00:32:41.350 --> 00:32:43.980
projects, e.g. one
library and one demo

00:32:43.980 --> 00:32:46.300
module in the same project?

00:32:46.300 --> 00:32:49.050
JEROME DOCHEZ: So we will
do, the first support

00:32:49.050 --> 00:32:51.760
will be for this
subprojects of your,

00:32:51.760 --> 00:32:53.232
the submodule of your project.

00:32:53.232 --> 00:32:54.940
For the libraries, so
far we don't really

00:32:54.940 --> 00:32:56.130
have a plan do this.

00:32:56.130 --> 00:32:59.180
Because we think that,
most of the time,

00:32:59.180 --> 00:33:03.204
you are not changing the
libraries you're consuming.

00:33:03.204 --> 00:33:04.370
Maybe there would be a mode.

00:33:04.370 --> 00:33:04.990
I don't know.

00:33:04.990 --> 00:33:06.460
We can still think about it.

00:33:06.460 --> 00:33:07.840
I'm not convinced
it's necessary.

00:33:07.840 --> 00:33:09.548
I'm definitely convinced
we need to do it

00:33:09.548 --> 00:33:11.782
for the main project
and the other modules.

00:33:11.782 --> 00:33:13.156
Just a module,
just the projects,

00:33:13.156 --> 00:33:15.162
I don't thing for library
it's really necessary.

00:33:15.162 --> 00:33:17.120
I think it should be the
library developer that

00:33:17.120 --> 00:33:21.200
should have his Instant Run
when he's producing his library,

00:33:21.200 --> 00:33:23.000
not you when you're
consuming it.

00:33:23.000 --> 00:33:24.458
TOR NORBYE: Well,
just to be clear,

00:33:24.458 --> 00:33:26.150
if you have a library
in your project

00:33:26.150 --> 00:33:27.620
that is a direct
module dependency.

00:33:27.620 --> 00:33:29.820
Even though it's a library,
that we do Instant Run.

00:33:29.820 --> 00:33:32.330
Because, really only when
you have a third-party, Maven

00:33:32.330 --> 00:33:35.537
Central or JCenter
artifact, that's the case

00:33:35.537 --> 00:33:36.370
we're talking about.

00:33:36.370 --> 00:33:39.420
I don't think you're
modifying those.

00:33:39.420 --> 00:33:40.360
So it does work.

00:33:40.360 --> 00:33:41.950
It's not like you
can only Instant

00:33:41.950 --> 00:33:45.560
Run your main app, module, all
the modules in your program.

00:33:45.560 --> 00:33:48.260
JEROME DOCHEZ: Well, actually,
today it's only the main app.

00:33:48.260 --> 00:33:49.634
The Preview Tool
we will actually

00:33:49.634 --> 00:33:52.830
support the other modules.

00:33:52.830 --> 00:33:54.640
RETO MEIER: Question
from the audience.

00:33:54.640 --> 00:33:57.100
AUDIENCE: This is just a
followup on the future Android

00:33:57.100 --> 00:33:59.430
Dev Summit plans.

00:33:59.430 --> 00:34:01.930
If there is another one,
can we request that it not

00:34:01.930 --> 00:34:03.063
be Thanksgiving week?

00:34:03.063 --> 00:34:06.170
[LAUGHTER AND APPLAUSE]

00:34:06.170 --> 00:34:09.020
JEROME DOCHEZ: Can we also
request it's in Bora Bora,

00:34:09.020 --> 00:34:11.610
or someplace like that?

00:34:11.610 --> 00:34:14.730
RETO MEIER: That doesn't
necessarily help everyone here.

00:34:14.730 --> 00:34:15.330
Yes, noted.

00:34:18.330 --> 00:34:21.684
Let's have a look.

00:34:21.684 --> 00:34:25.149
This might be a little bit more
for the Android Framework team.

00:34:25.149 --> 00:34:25.940
But we've got time.

00:34:25.940 --> 00:34:27.560
I'll ask your opinion.

00:34:27.560 --> 00:34:31.050
What are your thoughts on using
event libraries, like EventBus,

00:34:31.050 --> 00:34:33.770
compared to local
broadcast manager?

00:34:33.770 --> 00:34:36.219
Any opinions?

00:34:36.219 --> 00:34:37.600
[LAUGHTER]

00:34:37.600 --> 00:34:40.329
You have no thoughts.

00:34:40.329 --> 00:34:42.704
TOR NORBYE: Well, I know
which ID you should edit in.

00:34:42.704 --> 00:34:44.129
[LAUGHTER]

00:34:44.129 --> 00:34:46.029
RETO MEIER: Good.

00:34:46.029 --> 00:34:47.780
Oh, people to save me, please.

00:34:47.780 --> 00:34:50.750
AUDIENCE: Nobody's
asking about Glass, what?

00:34:50.750 --> 00:34:55.679
I actually have more of a
request than a question.

00:34:55.679 --> 00:34:59.310
A number of times on stage, the
Framework team in particular,

00:34:59.310 --> 00:35:02.140
has referred to Stack Overflow
and getting answers off

00:35:02.140 --> 00:35:03.180
of Stack Overflow.

00:35:03.180 --> 00:35:06.210
And it seems like a
lot of tech support

00:35:06.210 --> 00:35:08.750
and a lot of interaction
with developers

00:35:08.750 --> 00:35:11.660
has been outsourced
to Stack Overflow.

00:35:11.660 --> 00:35:14.400
So I'm just, kind of,
requesting and asking

00:35:14.400 --> 00:35:19.500
that Google might take a
little more responsibility.

00:35:19.500 --> 00:35:22.260
In the early days with
the Google Groups,

00:35:22.260 --> 00:35:25.110
members of the Android team
used to answer questions.

00:35:25.110 --> 00:35:31.290
Ramon and Diane were
responding to developers.

00:35:31.290 --> 00:35:33.694
We could count on their answers.

00:35:33.694 --> 00:35:37.530
And we can count on Mark
Murphy, kind of, sort of.

00:35:37.530 --> 00:35:42.340
And there are a lot of
good tutorial sites.

00:35:42.340 --> 00:35:45.470
But most of the examples
and example code

00:35:45.470 --> 00:35:46.525
are over simplified.

00:35:46.525 --> 00:35:48.750
And when you're
actually using some

00:35:48.750 --> 00:35:50.992
of these objects
in practice, you

00:35:50.992 --> 00:35:57.520
need to look at questions
around threading or larger input

00:35:57.520 --> 00:35:58.720
objects.

00:35:58.720 --> 00:36:03.190
And so, that would be something
I hope that you can take back

00:36:03.190 --> 00:36:07.550
to the entire Android
team about helping

00:36:07.550 --> 00:36:11.384
us to be more effective.

00:36:11.384 --> 00:36:12.800
STEPHANIE CUTHBERTSON:
Actually, I

00:36:12.800 --> 00:36:14.520
think you probably couldn't
have asked us something

00:36:14.520 --> 00:36:15.820
that would make us happier.

00:36:15.820 --> 00:36:18.880
There's quite an internal
discussion going on

00:36:18.880 --> 00:36:23.430
for us about a desire
to dramatically deepen

00:36:23.430 --> 00:36:25.939
the level of technical
content that we have.

00:36:25.939 --> 00:36:28.480
And so, I think you can see the
level of passion the team has

00:36:28.480 --> 00:36:31.310
by the fact that there's a
lot of people sitting up here

00:36:31.310 --> 00:36:33.412
to connect with the Dev Summit.

00:36:33.412 --> 00:36:35.620
Would anyone else like to--
because this is certainly

00:36:35.620 --> 00:36:36.820
something we've talked
about quite a bit.

00:36:36.820 --> 00:36:38.640
Anybody else want to talk
about our aspirations--

00:36:38.640 --> 00:36:40.600
TOR NORBYE: Well, there is
the generating documentation.

00:36:40.600 --> 00:36:43.140
But I also heard a bit of
tech support in that question,

00:36:43.140 --> 00:36:43.340
right.

00:36:43.340 --> 00:36:44.464
STEPHANIE CUTHBERTSON: Yes.

00:36:44.464 --> 00:36:47.710
TOR NORBYE: So I think it's
hard to both finish Instant Run,

00:36:47.710 --> 00:36:50.396
and at the same time
answer lots of questions.

00:36:50.396 --> 00:36:52.020
So that's kind of a
difficulty we have,

00:36:52.020 --> 00:36:55.030
balancing the how much time
you spend looking through user

00:36:55.030 --> 00:36:56.800
forums and responding
and following up,

00:36:56.800 --> 00:36:59.754
and how much do you time
to your daytime job.

00:36:59.754 --> 00:37:02.170
XAVIER DUCROHET: But I think
we can do a better job about,

00:37:02.170 --> 00:37:04.522
you know like, creating
a user guide for Gradle.

00:37:04.522 --> 00:37:05.480
OK, we want to do that.

00:37:05.480 --> 00:37:06.670
Having the DSA reference.

00:37:06.670 --> 00:37:07.840
OK, we want to do that.

00:37:07.840 --> 00:37:12.324
But we've talked in the past
about having a lot of recipes.

00:37:12.324 --> 00:37:14.490
And that's kind of like
what we did during our talk.

00:37:14.490 --> 00:37:16.115
You know, it's like
here's a few things

00:37:16.115 --> 00:37:18.210
that, if you're trying to
do that, do it that way.

00:37:18.210 --> 00:37:20.440
And be more proactive
about showing

00:37:20.440 --> 00:37:22.100
best practices on
a lot of use case

00:37:22.100 --> 00:37:24.619
that we know developers
need to do anyway.

00:37:24.619 --> 00:37:26.660
You know, it doesn't really
fit in the user guide

00:37:26.660 --> 00:37:29.760
where you're really
teaching the workings.

00:37:29.760 --> 00:37:31.810
But just saying, hey,
if you want to do that,

00:37:31.810 --> 00:37:33.490
here's how you do it.

00:37:33.490 --> 00:37:35.100
I think, if we
publish more of those

00:37:35.100 --> 00:37:36.890
and then they get
indexed anyway,

00:37:36.890 --> 00:37:38.520
they'd be more discoverable.

00:37:38.520 --> 00:37:41.750
As Tor said, like at the
beginning, Android Beginner

00:37:41.750 --> 00:37:44.060
and Android Developer
on Google Groups,

00:37:44.060 --> 00:37:45.580
there wasn't that
many developers.

00:37:45.580 --> 00:37:47.310
And our team or smaller too.

00:37:47.310 --> 00:37:51.580
But there was still a pretty
big load of questions to answer.

00:37:51.580 --> 00:37:53.790
Nowadays, it's like
I can't keep track.

00:37:53.790 --> 00:37:55.160
There's just too many of them.

00:37:55.160 --> 00:37:57.670
So sometimes, some developer
will point me, saying, hey,

00:37:57.670 --> 00:37:59.360
can you answer that
question because I

00:37:59.360 --> 00:38:00.780
can't get a good answer.

00:38:00.780 --> 00:38:02.902
And more often than
not, it's not really

00:38:02.902 --> 00:38:03.860
a good question anyway.

00:38:03.860 --> 00:38:05.530
But when it is, I try to help.

00:38:05.530 --> 00:38:06.840
But it's hard.

00:38:06.840 --> 00:38:08.070
There are so many of them.

00:38:08.070 --> 00:38:11.580
And I think what Joe was saying
about bug reporter is very

00:38:11.580 --> 00:38:13.280
important for Stack Overflow.

00:38:13.280 --> 00:38:16.855
I see a lot of questions that
are just like, not just read

00:38:16.855 --> 00:38:17.595
the doc.

00:38:17.595 --> 00:38:22.240
But I'm less inclined to
answer if you don't even

00:38:22.240 --> 00:38:24.240
try to really explain to
me what the problem is.

00:38:24.240 --> 00:38:27.067
Just saying, hey, doesn't
work just doesn't help me.

00:38:27.067 --> 00:38:29.192
KATHRYN SHIH: Well, that's
not anybody here, right.

00:38:29.192 --> 00:38:31.025
XAVIER DUCROHET: Well,
hopefully, hopefully.

00:38:31.025 --> 00:38:33.979
But well, it's live stream so
everyone is watching that too.

00:38:33.979 --> 00:38:35.270
You know it's important, right.

00:38:35.270 --> 00:38:36.920
So if you're asking
for help online,

00:38:36.920 --> 00:38:39.150
try to make it
easy on the person.

00:38:39.150 --> 00:38:41.400
TOR NORBYE: But just I want
to say for Stack Overflow.

00:38:41.400 --> 00:38:43.810
Sure there maybe
are lots of, I don't

00:38:43.810 --> 00:38:45.816
want to say dumb
questions, but maybe they

00:38:45.816 --> 00:38:47.190
could have tried
a little harder.

00:38:47.190 --> 00:38:49.315
But often, when you're
trying to find something out

00:38:49.315 --> 00:38:51.717
and you search for it, the
best hit is Stack Overflow.

00:38:51.717 --> 00:38:53.050
You had the exact same question.

00:38:53.050 --> 00:38:54.091
Five other people hit it.

00:38:54.091 --> 00:38:56.400
And people have loaded up
and down the solutions.

00:38:56.400 --> 00:38:58.510
So often for me, I find
the actual answer there.

00:38:58.510 --> 00:39:00.550
But maybe that's
because I don't know

00:39:00.550 --> 00:39:01.960
what I'm doing when it comes
to Android development.

00:39:01.960 --> 00:39:03.876
And if it was a tools
question be like, no no,

00:39:03.876 --> 00:39:05.260
that's a wrong answer.

00:39:05.260 --> 00:39:06.180
STEPHANIE CUTHBERTSON: Actually,
I'll say one more thing,

00:39:06.180 --> 00:39:07.480
and then, actually,
we should probably

00:39:07.480 --> 00:39:08.604
go on to the next question.

00:39:08.604 --> 00:39:13.232
So you can see the depth
of technical answers

00:39:13.232 --> 00:39:15.690
and documentation is something
we're very passionate about.

00:39:15.690 --> 00:39:18.590
I think we talked some about
the momentum of Android Studio

00:39:18.590 --> 00:39:20.540
recently, with things
like 103 releases

00:39:20.540 --> 00:39:21.190
and things of that nature.

00:39:21.190 --> 00:39:21.720
It's 2.0.

00:39:21.720 --> 00:39:25.100
The usage is enormous,
and the growth--

00:39:25.100 --> 00:39:27.680
I think one thing that
we would be open about

00:39:27.680 --> 00:39:29.500
is that the growth
of Android Studio,

00:39:29.500 --> 00:39:32.370
as explosive as it
has been, has slightly

00:39:32.370 --> 00:39:35.620
scaled beyond our ability to
keep up with everyone who is

00:39:35.620 --> 00:39:36.900
using it and asking questions.

00:39:36.900 --> 00:39:38.690
And so, Reto was
actually pretty modest

00:39:38.690 --> 00:39:39.815
when he introduced himself.

00:39:39.815 --> 00:39:43.740
We recently inaugurated him as
the first ever Android Studio

00:39:43.740 --> 00:39:45.030
advocate in residence.

00:39:45.030 --> 00:39:47.570
And that was really
acknowledging

00:39:47.570 --> 00:39:49.270
that we need to
dramatically scale up

00:39:49.270 --> 00:39:52.220
our outreach and ability
to answer questions.

00:39:52.220 --> 00:39:55.160
Because, as amazing as
the engineering team is,

00:39:55.160 --> 00:39:58.290
it's just not scalable for us
to answer every single question

00:39:58.290 --> 00:40:00.425
out of the engineering
team to keep up

00:40:00.425 --> 00:40:02.550
with all the questions
coming out of the community.

00:40:02.550 --> 00:40:04.620
So thank you very
much for the feedback.

00:40:04.620 --> 00:40:06.536
And we've got to move
on to the next question.

00:40:06.536 --> 00:40:09.460
AUDIENCE: Yeah, as a segue, the
Android Wear team, for example,

00:40:09.460 --> 00:40:13.208
I have some friends, some people
in Cambridge that I've met.

00:40:13.208 --> 00:40:16.010
And they don't know,
in developer relations,

00:40:16.010 --> 00:40:17.780
they might refer me to.

00:40:17.780 --> 00:40:20.810
And so, if the developer
relations team is that divorced

00:40:20.810 --> 00:40:24.179
from the engineering
team, then the community

00:40:24.179 --> 00:40:25.720
might not be getting
correct answers.

00:40:25.720 --> 00:40:26.780
STEPHANIE CUTHBERTSON: The
developer relations team

00:40:26.780 --> 00:40:28.654
works very closely with
the engineering team.

00:40:28.654 --> 00:40:31.147
So that's definitely
not an issue.

00:40:31.147 --> 00:40:32.480
AUDIENCE:That was my experience.

00:40:32.480 --> 00:40:35.300
You know, go to Stack
Overflow, rather

00:40:35.300 --> 00:40:37.470
than go to Developer Relations.

00:40:37.470 --> 00:40:38.170
STEPHANIE CUTHBERTSON:
Yeah, they definitely

00:40:38.170 --> 00:40:38.970
work very closely together.

00:40:38.970 --> 00:40:40.576
I would be happy to
talk more offline.

00:40:40.576 --> 00:40:41.200
We can sync up.

00:40:41.200 --> 00:40:42.950
I'll be in the booth
after the discussion.

00:40:42.950 --> 00:40:44.705
AUDIENCE: Right,
it's just my request.

00:40:44.705 --> 00:40:46.300
If it's Developer
Relations, great.

00:40:46.300 --> 00:40:48.460
Maybe we can beef it up.

00:40:48.460 --> 00:40:51.470
And just having
more opportunities

00:40:51.470 --> 00:40:53.562
to get the best answers.

00:40:53.562 --> 00:40:54.520
RETO MEIER: Absolutely.

00:40:54.520 --> 00:40:56.760
As the resident developer
relations person

00:40:56.760 --> 00:41:01.470
up here, I should
probably answer.

00:41:01.470 --> 00:41:03.030
Steph was very kind.

00:41:03.030 --> 00:41:04.770
Basically she said,
in a very polite way,

00:41:04.770 --> 00:41:06.715
that I have to fix that problem.

00:41:06.715 --> 00:41:08.590
So I will definitely be
taking that on board.

00:41:08.590 --> 00:41:09.799
We have so many smart people.

00:41:09.799 --> 00:41:11.214
We should have all
of the answers.

00:41:11.214 --> 00:41:13.080
And clearly one of the
key things we can do

00:41:13.080 --> 00:41:15.310
is develop relationships
is help make sure

00:41:15.310 --> 00:41:17.390
that the most pressing
questions that you have

00:41:17.390 --> 00:41:19.340
are answered by
the right people.

00:41:19.340 --> 00:41:21.750
So helping to create that
funnel, be that interface,

00:41:21.750 --> 00:41:23.160
is a big part of what
we're going to do.

00:41:23.160 --> 00:41:25.118
And definitely something
we want to improve on.

00:41:25.118 --> 00:41:27.060
So thank you for the feedback.

00:41:27.060 --> 00:41:28.360
Another question, please.

00:41:28.360 --> 00:41:30.680
AUDIENCE: So as
the Android build

00:41:30.680 --> 00:41:32.720
toolchain has
gotten more complex,

00:41:32.720 --> 00:41:35.950
more things go on
between your Java

00:41:35.950 --> 00:41:38.372
and the class files
that come out.

00:41:38.372 --> 00:41:39.580
You have more generated code.

00:41:39.580 --> 00:41:44.370
Is there any tips for, you
know, this is my dot Java.

00:41:44.370 --> 00:41:49.115
I want to see what came out
the other side, as opposed

00:41:49.115 --> 00:41:53.965
to kind of spelunking through
the intermediates directory.

00:41:57.124 --> 00:41:58.540
For instance, if
I want to see how

00:41:58.540 --> 00:42:06.440
this resource ends
up getting packaged.

00:42:06.440 --> 00:42:08.820
XAVIER DUCROHET:
So for resources,

00:42:08.820 --> 00:42:14.900
we have, for Java, I don't think
there's much besides-- I mean,

00:42:14.900 --> 00:42:17.091
you would have to go through
the Intermediate folder

00:42:17.091 --> 00:42:19.590
and look at all the different
transformance, see the output,

00:42:19.590 --> 00:42:21.298
and then see the
classes for that export.

00:42:21.298 --> 00:42:24.090
But for the resources,
at least for merging,

00:42:24.090 --> 00:42:26.340
which is one case where you
could have a resource that

00:42:26.340 --> 00:42:27.851
gets replaced by another one.

00:42:27.851 --> 00:42:29.600
Let's say you have one
in Source Main Res,

00:42:29.600 --> 00:42:31.350
and then you have one
in Source Debug Res.

00:42:31.350 --> 00:42:34.330
You could not realize
maybe that the one in Debug

00:42:34.330 --> 00:42:37.200
replaced the one in Source Main.

00:42:37.200 --> 00:42:42.110
We do have a blame,
sort of file now.

00:42:42.110 --> 00:42:44.800
Because we need it for APT.

00:42:44.800 --> 00:42:49.460
Where when APT runs on
the result of the merge,

00:42:49.460 --> 00:42:50.960
we want to make
sure that we display

00:42:50.960 --> 00:42:53.091
the errors as your
actual original file

00:42:53.091 --> 00:42:55.340
as it is in Source Main or
Source Debug, which was not

00:42:55.340 --> 00:42:56.075
the case before.

00:42:56.075 --> 00:42:57.520
Before you would
see APT complain

00:42:57.520 --> 00:42:59.390
about a file that
was an intermediary

00:42:59.390 --> 00:43:00.240
as being a problem.

00:43:00.240 --> 00:43:02.180
And you were like, why
is that file there?

00:43:02.180 --> 00:43:04.030
I don't even know
where the source is.

00:43:04.030 --> 00:43:07.144
So we could expose that
potentially in Studio.

00:43:07.144 --> 00:43:08.310
TOR NORBYE: I think they do.

00:43:08.310 --> 00:43:10.990
If you do Show
Documentation on a Resource,

00:43:10.990 --> 00:43:13.270
we show the overlays,
and we strike out.

00:43:13.270 --> 00:43:16.416
So if you have a base resource
and you have a debug overlay,

00:43:16.416 --> 00:43:17.540
we'll show the debug value.

00:43:17.540 --> 00:43:19.440
And then we'll show the
other one with strike through

00:43:19.440 --> 00:43:20.130
to show that it was hidden.

00:43:20.130 --> 00:43:20.510
XAVIER DUCROHET:
And there you go.

00:43:20.510 --> 00:43:21.690
It's all right there.

00:43:21.690 --> 00:43:22.870
JEROME DOCHEZ: What about
the Manifest Merger?

00:43:22.870 --> 00:43:24.745
We also have a blame
for the Manifest Merger,

00:43:24.745 --> 00:43:26.120
but I don't think we show that.

00:43:26.120 --> 00:43:27.010
XAVIER DUCROHET: Yeah,
for the Manifest Merger,

00:43:27.010 --> 00:43:28.680
it's harder because
it's per node, right.

00:43:28.680 --> 00:43:31.221
JEROME DOCHEZ: So you can have
a text for the Manifest Merger

00:43:31.221 --> 00:43:33.314
that tells you which entry
comes from which file.

00:43:33.314 --> 00:43:35.480
But I don't think you've
got a visual element of it.

00:43:35.480 --> 00:43:37.960
XAVIER DUCROHET: Yeah,
we can do something too.

00:43:37.960 --> 00:43:41.674
I'm not sure what the problem
is for Java source file though.

00:43:44.930 --> 00:43:46.707
AUDIENCE: So you
want to look at the--

00:43:46.707 --> 00:43:49.040
TOR NORBYE: I would basically,
I would javap two folders

00:43:49.040 --> 00:43:51.703
and dif the operative javap.

00:43:51.703 --> 00:43:52.307
AUDIENCE: OK.

00:43:52.307 --> 00:43:54.890
TOR NORBYE: I mean, that would
tell you exactly what happened,

00:43:54.890 --> 00:43:55.390
right.

00:43:55.390 --> 00:43:57.217
AUDIENCE: Yep.

00:43:57.217 --> 00:43:58.800
RETO MEIER: I think
we have just about

00:43:58.800 --> 00:44:00.130
time for one last question.

00:44:00.130 --> 00:44:02.540
There's no one at the
mic, so I will ask it.

00:44:02.540 --> 00:44:05.510
Does Android Studio include
screen reader support?

00:44:05.510 --> 00:44:07.820
And if not, when is this coming?

00:44:07.820 --> 00:44:09.700
TOR NORBYE: OK, I can take that.

00:44:09.700 --> 00:44:11.070
It's something we're working on.

00:44:11.070 --> 00:44:12.980
And in fact, we
would like everyone

00:44:12.980 --> 00:44:15.830
who needs this to try
it in 2.0 Preview.

00:44:15.830 --> 00:44:20.220
So the source editor
itself should now work.

00:44:20.220 --> 00:44:22.180
We've tested it
on Windows on Mac.

00:44:22.180 --> 00:44:25.150
On Mac, there are some other
JDK bugs that prevent list

00:44:25.150 --> 00:44:26.680
from being iterated correctly.

00:44:26.680 --> 00:44:29.470
So the best platform right
now for accessibility in 2.0

00:44:29.470 --> 00:44:32.980
is Windows with the latest JDK.

00:44:32.980 --> 00:44:35.370
But the source editor, actually,
should work everywhere.

00:44:35.370 --> 00:44:36.870
RETO MEIER: Right,
so yeah, it would

00:44:36.870 --> 00:44:40.870
be great to hear your feedback
if you're impacted by that.

00:44:40.870 --> 00:44:43.020
So I think that just
about wraps us up on time.

00:44:43.020 --> 00:44:44.520
There's no one
waiting in the queue.

00:44:44.520 --> 00:44:47.392
So I'd like to thank all of our
panelists for joining us today.

00:44:47.392 --> 00:44:52.326
[APPLAUSE]

00:44:55.314 --> 00:44:58.130
And thank you to the audience
for your wonderful questions.

00:44:58.130 --> 00:44:59.570
And we'll be around.

00:44:59.570 --> 00:45:01.120
Thanks.

