WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:03.530
hello and welcome back in this week

00:00:03.530 --> 00:00:03.540
hello and welcome back in this week
 

00:00:03.540 --> 00:00:06.200
hello and welcome back in this week
we're going to go over the basics of

00:00:06.200 --> 00:00:06.210
we're going to go over the basics of
 

00:00:06.210 --> 00:00:09.320
we're going to go over the basics of
neural network programming it turns out

00:00:09.320 --> 00:00:09.330
neural network programming it turns out
 

00:00:09.330 --> 00:00:11.270
neural network programming it turns out
that when you implement a neural network

00:00:11.270 --> 00:00:11.280
that when you implement a neural network
 

00:00:11.280 --> 00:00:13.610
that when you implement a neural network
there are some implementation techniques

00:00:13.610 --> 00:00:13.620
there are some implementation techniques
 

00:00:13.620 --> 00:00:15.470
there are some implementation techniques
that are going to be really important

00:00:15.470 --> 00:00:15.480
that are going to be really important
 

00:00:15.480 --> 00:00:18.650
that are going to be really important
for example if you have a training set

00:00:18.650 --> 00:00:18.660
for example if you have a training set
 

00:00:18.660 --> 00:00:21.679
for example if you have a training set
of M training examples you might be used

00:00:21.679 --> 00:00:21.689
of M training examples you might be used
 

00:00:21.689 --> 00:00:23.960
of M training examples you might be used
to processing the training set by having

00:00:23.960 --> 00:00:23.970
to processing the training set by having
 

00:00:23.970 --> 00:00:26.990
to processing the training set by having
a for loop step through your M training

00:00:26.990 --> 00:00:27.000
a for loop step through your M training
 

00:00:27.000 --> 00:00:29.509
a for loop step through your M training
examples but it turns out that when you

00:00:29.509 --> 00:00:29.519
examples but it turns out that when you
 

00:00:29.519 --> 00:00:31.490
examples but it turns out that when you
implement it in your network you usually

00:00:31.490 --> 00:00:31.500
implement it in your network you usually
 

00:00:31.500 --> 00:00:34.010
implement it in your network you usually
want to process your entire training set

00:00:34.010 --> 00:00:34.020
want to process your entire training set
 

00:00:34.020 --> 00:00:36.920
want to process your entire training set
without using an explicit for loop to

00:00:36.920 --> 00:00:36.930
without using an explicit for loop to
 

00:00:36.930 --> 00:00:39.110
without using an explicit for loop to
loop over your entire training set so

00:00:39.110 --> 00:00:39.120
loop over your entire training set so
 

00:00:39.120 --> 00:00:41.209
loop over your entire training set so
you see how to do that in this week's

00:00:41.209 --> 00:00:41.219
you see how to do that in this week's
 

00:00:41.219 --> 00:00:44.840
you see how to do that in this week's
materials another idea when you organize

00:00:44.840 --> 00:00:44.850
materials another idea when you organize
 

00:00:44.850 --> 00:00:47.990
materials another idea when you organize
the computation of a new network usually

00:00:47.990 --> 00:00:48.000
the computation of a new network usually
 

00:00:48.000 --> 00:00:49.610
the computation of a new network usually
you have what's called a forward

00:00:49.610 --> 00:00:49.620
you have what's called a forward
 

00:00:49.620 --> 00:00:52.069
you have what's called a forward
password for propagation set followed by

00:00:52.069 --> 00:00:52.079
password for propagation set followed by
 

00:00:52.079 --> 00:00:53.959
password for propagation set followed by
a backward pass or what's called a

00:00:53.959 --> 00:00:53.969
a backward pass or what's called a
 

00:00:53.969 --> 00:00:56.779
a backward pass or what's called a
backward propagation step and so in this

00:00:56.779 --> 00:00:56.789
backward propagation step and so in this
 

00:00:56.789 --> 00:00:57.590
backward propagation step and so in this
week's material

00:00:57.590 --> 00:00:57.600
week's material
 

00:00:57.600 --> 00:01:00.020
week's material
you also get an intuition about why the

00:01:00.020 --> 00:01:00.030
you also get an intuition about why the
 

00:01:00.030 --> 00:01:02.479
you also get an intuition about why the
computations in learning in a neural

00:01:02.479 --> 00:01:02.489
computations in learning in a neural
 

00:01:02.489 --> 00:01:04.729
computations in learning in a neural
network can be organized in this board

00:01:04.729 --> 00:01:04.739
network can be organized in this board
 

00:01:04.739 --> 00:01:07.219
network can be organized in this board
propagation and a separate backward

00:01:07.219 --> 00:01:07.229
propagation and a separate backward
 

00:01:07.229 --> 00:01:10.250
propagation and a separate backward
propagation for this week's materials I

00:01:10.250 --> 00:01:10.260
propagation for this week's materials I
 

00:01:10.260 --> 00:01:12.170
propagation for this week's materials I
want to convey these ideas using

00:01:12.170 --> 00:01:12.180
want to convey these ideas using
 

00:01:12.180 --> 00:01:14.300
want to convey these ideas using
logistic regression in order to make the

00:01:14.300 --> 00:01:14.310
logistic regression in order to make the
 

00:01:14.310 --> 00:01:16.999
logistic regression in order to make the
ideas easier to understand but even if

00:01:16.999 --> 00:01:17.009
ideas easier to understand but even if
 

00:01:17.009 --> 00:01:18.980
ideas easier to understand but even if
you've seen logistic regression before I

00:01:18.980 --> 00:01:18.990
you've seen logistic regression before I
 

00:01:18.990 --> 00:01:20.600
you've seen logistic regression before I
think that there will be some new and

00:01:20.600 --> 00:01:20.610
think that there will be some new and
 

00:01:20.610 --> 00:01:22.160
think that there will be some new and
interesting ideas for you to pick up in

00:01:22.160 --> 00:01:22.170
interesting ideas for you to pick up in
 

00:01:22.170 --> 00:01:25.070
interesting ideas for you to pick up in
this week's material so that let's get

00:01:25.070 --> 00:01:25.080
this week's material so that let's get
 

00:01:25.080 --> 00:01:27.590
this week's material so that let's get
started logistic regression is an

00:01:27.590 --> 00:01:27.600
started logistic regression is an
 

00:01:27.600 --> 00:01:30.649
started logistic regression is an
algorithm for binary classification so

00:01:30.649 --> 00:01:30.659
algorithm for binary classification so
 

00:01:30.659 --> 00:01:32.749
algorithm for binary classification so
let's start by setting up the problem

00:01:32.749 --> 00:01:32.759
let's start by setting up the problem
 

00:01:32.759 --> 00:01:34.969
let's start by setting up the problem
here's an example of a binary

00:01:34.969 --> 00:01:34.979
here's an example of a binary
 

00:01:34.979 --> 00:01:37.520
here's an example of a binary
classification problem you might have an

00:01:37.520 --> 00:01:37.530
classification problem you might have an
 

00:01:37.530 --> 00:01:41.960
classification problem you might have an
input of an image like that and one to

00:01:41.960 --> 00:01:41.970
input of an image like that and one to
 

00:01:41.970 --> 00:01:44.990
input of an image like that and one to
output a label to recognize this image

00:01:44.990 --> 00:01:45.000
output a label to recognize this image
 

00:01:45.000 --> 00:01:47.810
output a label to recognize this image
as being either a cat in which case you

00:01:47.810 --> 00:01:47.820
as being either a cat in which case you
 

00:01:47.820 --> 00:01:50.840
as being either a cat in which case you
output one or non-cat in which case you

00:01:50.840 --> 00:01:50.850
output one or non-cat in which case you
 

00:01:50.850 --> 00:01:53.810
output one or non-cat in which case you
hope with zero and we're going to use Y

00:01:53.810 --> 00:01:53.820
hope with zero and we're going to use Y
 

00:01:53.820 --> 00:01:58.219
hope with zero and we're going to use Y
to denote the output label let's look at

00:01:58.219 --> 00:01:58.229
to denote the output label let's look at
 

00:01:58.229 --> 00:02:00.410
to denote the output label let's look at
how an image is represented in a

00:02:00.410 --> 00:02:00.420
how an image is represented in a
 

00:02:00.420 --> 00:02:03.050
how an image is represented in a
computer to store an image your computer

00:02:03.050 --> 00:02:03.060
computer to store an image your computer
 

00:02:03.060 --> 00:02:04.999
computer to store an image your computer
suppose three separate matrices

00:02:04.999 --> 00:02:05.009
suppose three separate matrices
 

00:02:05.009 --> 00:02:07.819
suppose three separate matrices
corresponding to the red green and blue

00:02:07.819 --> 00:02:07.829
corresponding to the red green and blue
 

00:02:07.829 --> 00:02:11.570
corresponding to the red green and blue
color channels of this image so if your

00:02:11.570 --> 00:02:11.580
color channels of this image so if your
 

00:02:11.580 --> 00:02:13.280
color channels of this image so if your
input image is 60

00:02:13.280 --> 00:02:13.290
input image is 60
 

00:02:13.290 --> 00:02:16.399
input image is 60
four pixels by 64 pixels then you would

00:02:16.399 --> 00:02:16.409
four pixels by 64 pixels then you would
 

00:02:16.409 --> 00:02:20.959
four pixels by 64 pixels then you would
have three 64 by 64 matrices

00:02:20.959 --> 00:02:20.969
have three 64 by 64 matrices
 

00:02:20.969 --> 00:02:24.050
have three 64 by 64 matrices
corresponding to the red green and blue

00:02:24.050 --> 00:02:24.060
corresponding to the red green and blue
 

00:02:24.060 --> 00:02:26.479
corresponding to the red green and blue
pixel intensity values for your image

00:02:26.479 --> 00:02:26.489
pixel intensity values for your image
 

00:02:26.489 --> 00:02:28.910
pixel intensity values for your image
although to make these from a slide I

00:02:28.910 --> 00:02:28.920
although to make these from a slide I
 

00:02:28.920 --> 00:02:31.190
although to make these from a slide I
drew these as much smaller matrices so

00:02:31.190 --> 00:02:31.200
drew these as much smaller matrices so
 

00:02:31.200 --> 00:02:33.289
drew these as much smaller matrices so
these are actually 5 by 4 matrices

00:02:33.289 --> 00:02:33.299
these are actually 5 by 4 matrices
 

00:02:33.299 --> 00:02:36.619
these are actually 5 by 4 matrices
rather than 64 by 64 so to turn these

00:02:36.619 --> 00:02:36.629
rather than 64 by 64 so to turn these
 

00:02:36.629 --> 00:02:39.920
rather than 64 by 64 so to turn these
pixel intensity values into a feature

00:02:39.920 --> 00:02:39.930
pixel intensity values into a feature
 

00:02:39.930 --> 00:02:42.800
pixel intensity values into a feature
vector what we're going to do is unroll

00:02:42.800 --> 00:02:42.810
vector what we're going to do is unroll
 

00:02:42.810 --> 00:02:46.250
vector what we're going to do is unroll
all of these pixel values into a input

00:02:46.250 --> 00:02:46.260
all of these pixel values into a input
 

00:02:46.260 --> 00:02:50.599
all of these pixel values into a input
feature vector X so to unroll all of

00:02:50.599 --> 00:02:50.609
feature vector X so to unroll all of
 

00:02:50.609 --> 00:02:52.729
feature vector X so to unroll all of
these pixel intensity values into a

00:02:52.729 --> 00:02:52.739
these pixel intensity values into a
 

00:02:52.739 --> 00:02:55.280
these pixel intensity values into a
feature vector what we're going to do is

00:02:55.280 --> 00:02:55.290
feature vector what we're going to do is
 

00:02:55.290 --> 00:02:58.550
feature vector what we're going to do is
define a feature vector X corresponding

00:02:58.550 --> 00:02:58.560
define a feature vector X corresponding
 

00:02:58.560 --> 00:03:00.289
define a feature vector X corresponding
to this dimension as follows which is

00:03:00.289 --> 00:03:00.299
to this dimension as follows which is
 

00:03:00.299 --> 00:03:03.050
to this dimension as follows which is
going to take all the pixel values 2 5 5

00:03:03.050 --> 00:03:03.060
going to take all the pixel values 2 5 5
 

00:03:03.060 --> 00:03:08.210
going to take all the pixel values 2 5 5
2 3 1 and so on 2 5 5 2 3 1 and so on

00:03:08.210 --> 00:03:08.220
2 3 1 and so on 2 5 5 2 3 1 and so on
 

00:03:08.220 --> 00:03:10.610
2 3 1 and so on 2 5 5 2 3 1 and so on
until we've listed all the red pixels

00:03:10.610 --> 00:03:10.620
until we've listed all the red pixels
 

00:03:10.620 --> 00:03:14.449
until we've listed all the red pixels
and then eventually to 5 5 1 3 4 2 5 5 1

00:03:14.449 --> 00:03:14.459
and then eventually to 5 5 1 3 4 2 5 5 1
 

00:03:14.459 --> 00:03:17.449
and then eventually to 5 5 1 3 4 2 5 5 1
3 4 and so on until we get a very long

00:03:17.449 --> 00:03:17.459
3 4 and so on until we get a very long
 

00:03:17.459 --> 00:03:20.390
3 4 and so on until we get a very long
feature vector listing out all the red

00:03:20.390 --> 00:03:20.400
feature vector listing out all the red
 

00:03:20.400 --> 00:03:24.140
feature vector listing out all the red
green and blue pixel intensity values of

00:03:24.140 --> 00:03:24.150
green and blue pixel intensity values of
 

00:03:24.150 --> 00:03:28.670
green and blue pixel intensity values of
this image so if this image is a 64 by

00:03:28.670 --> 00:03:28.680
this image so if this image is a 64 by
 

00:03:28.680 --> 00:03:32.180
this image so if this image is a 64 by
64 image the total dimension of this

00:03:32.180 --> 00:03:32.190
64 image the total dimension of this
 

00:03:32.190 --> 00:03:37.250
64 image the total dimension of this
vector X will be 64 by 64 by 3 because

00:03:37.250 --> 00:03:37.260
vector X will be 64 by 64 by 3 because
 

00:03:37.260 --> 00:03:40.129
vector X will be 64 by 64 by 3 because
that the total numbers we have in all of

00:03:40.129 --> 00:03:40.139
that the total numbers we have in all of
 

00:03:40.139 --> 00:03:42.890
that the total numbers we have in all of
these matrices which in this case turns

00:03:42.890 --> 00:03:42.900
these matrices which in this case turns
 

00:03:42.900 --> 00:03:45.469
these matrices which in this case turns
out to be 1 2 2 8 8 that's what you get

00:03:45.469 --> 00:03:45.479
out to be 1 2 2 8 8 that's what you get
 

00:03:45.479 --> 00:03:47.509
out to be 1 2 2 8 8 that's what you get
if you multiply out those numbers and so

00:03:47.509 --> 00:03:47.519
if you multiply out those numbers and so
 

00:03:47.519 --> 00:03:51.259
if you multiply out those numbers and so
we're going to use n x equals 1 2 2 8 8

00:03:51.259 --> 00:03:51.269
we're going to use n x equals 1 2 2 8 8
 

00:03:51.269 --> 00:03:53.719
we're going to use n x equals 1 2 2 8 8
to represent the dimension of the input

00:03:53.719 --> 00:03:53.729
to represent the dimension of the input
 

00:03:53.729 --> 00:03:56.420
to represent the dimension of the input
features X and sometimes for brevity and

00:03:56.420 --> 00:03:56.430
features X and sometimes for brevity and
 

00:03:56.430 --> 00:03:59.839
features X and sometimes for brevity and
also just use lowercase n to represent

00:03:59.839 --> 00:03:59.849
also just use lowercase n to represent
 

00:03:59.849 --> 00:04:01.909
also just use lowercase n to represent
the dimension of this input feature

00:04:01.909 --> 00:04:01.919
the dimension of this input feature
 

00:04:01.919 --> 00:04:02.449
the dimension of this input feature
vector

00:04:02.449 --> 00:04:02.459
vector
 

00:04:02.459 --> 00:04:05.300
vector
so in binary classification our goal is

00:04:05.300 --> 00:04:05.310
so in binary classification our goal is
 

00:04:05.310 --> 00:04:07.309
so in binary classification our goal is
to learn a classifier that can input an

00:04:07.309 --> 00:04:07.319
to learn a classifier that can input an
 

00:04:07.319 --> 00:04:09.409
to learn a classifier that can input an
image represented by this feature vector

00:04:09.409 --> 00:04:09.419
image represented by this feature vector
 

00:04:09.419 --> 00:04:13.640
image represented by this feature vector
X and predict whether the corresponding

00:04:13.640 --> 00:04:13.650
X and predict whether the corresponding
 

00:04:13.650 --> 00:04:16.580
X and predict whether the corresponding
label Y is 1 or 0 that is whether this

00:04:16.580 --> 00:04:16.590
label Y is 1 or 0 that is whether this
 

00:04:16.590 --> 00:04:19.099
label Y is 1 or 0 that is whether this
is a cat image or non cat image let's

00:04:19.099 --> 00:04:19.109
is a cat image or non cat image let's
 

00:04:19.109 --> 00:04:21.050
is a cat image or non cat image let's
now lay out some of the notation that

00:04:21.050 --> 00:04:21.060
now lay out some of the notation that
 

00:04:21.060 --> 00:04:22.670
now lay out some of the notation that
we'll use throughout the rest of this

00:04:22.670 --> 00:04:22.680
we'll use throughout the rest of this
 

00:04:22.680 --> 00:04:25.399
we'll use throughout the rest of this
course a single training example is

00:04:25.399 --> 00:04:25.409
course a single training example is
 

00:04:25.409 --> 00:04:26.879
course a single training example is
represented by a pair

00:04:26.879 --> 00:04:26.889
represented by a pair
 

00:04:26.889 --> 00:04:34.110
represented by a pair
X comma Y where X is an N X dimensional

00:04:34.110 --> 00:04:34.120
X comma Y where X is an N X dimensional
 

00:04:34.120 --> 00:04:37.739
X comma Y where X is an N X dimensional
feature vector and Y the label is either

00:04:37.739 --> 00:04:37.749
feature vector and Y the label is either
 

00:04:37.749 --> 00:04:41.300
feature vector and Y the label is either
0 or 1 your training set will comprise

00:04:41.300 --> 00:04:41.310
0 or 1 your training set will comprise
 

00:04:41.310 --> 00:04:45.209
0 or 1 your training set will comprise
lowercase M training examples and so

00:04:45.209 --> 00:04:45.219
lowercase M training examples and so
 

00:04:45.219 --> 00:04:47.820
lowercase M training examples and so
your training sets will be written x1

00:04:47.820 --> 00:04:47.830
your training sets will be written x1
 

00:04:47.830 --> 00:04:50.790
your training sets will be written x1
comma y1 which is the input and output

00:04:50.790 --> 00:04:50.800
comma y1 which is the input and output
 

00:04:50.800 --> 00:04:54.089
comma y1 which is the input and output
for your first training example x2 comma

00:04:54.089 --> 00:04:54.099
for your first training example x2 comma
 

00:04:54.099 --> 00:04:57.659
for your first training example x2 comma
y2 for a second training example up to X

00:04:57.659 --> 00:04:57.669
y2 for a second training example up to X
 

00:04:57.669 --> 00:05:01.080
y2 for a second training example up to X
M comma Y M which is the last training

00:05:01.080 --> 00:05:01.090
M comma Y M which is the last training
 

00:05:01.090 --> 00:05:04.019
M comma Y M which is the last training
example and then that altogether this

00:05:04.019 --> 00:05:04.029
example and then that altogether this
 

00:05:04.029 --> 00:05:06.240
example and then that altogether this
your entire training set so I'm going to

00:05:06.240 --> 00:05:06.250
your entire training set so I'm going to
 

00:05:06.250 --> 00:05:08.850
your entire training set so I'm going to
use lowercase M to denote the number of

00:05:08.850 --> 00:05:08.860
use lowercase M to denote the number of
 

00:05:08.860 --> 00:05:11.189
use lowercase M to denote the number of
training examples and sometimes to

00:05:11.189 --> 00:05:11.199
training examples and sometimes to
 

00:05:11.199 --> 00:05:12.719
training examples and sometimes to
emphasize that this is the number of

00:05:12.719 --> 00:05:12.729
emphasize that this is the number of
 

00:05:12.729 --> 00:05:14.519
emphasize that this is the number of
training examples I might write this as

00:05:14.519 --> 00:05:14.529
training examples I might write this as
 

00:05:14.529 --> 00:05:16.769
training examples I might write this as
M subscript train and when we talk about

00:05:16.769 --> 00:05:16.779
M subscript train and when we talk about
 

00:05:16.779 --> 00:05:19.709
M subscript train and when we talk about
a test set we might sometimes use M

00:05:19.709 --> 00:05:19.719
a test set we might sometimes use M
 

00:05:19.719 --> 00:05:22.469
a test set we might sometimes use M
subscript test to denote the number of

00:05:22.469 --> 00:05:22.479
subscript test to denote the number of
 

00:05:22.479 --> 00:05:25.019
subscript test to denote the number of
test examples so that's the number of

00:05:25.019 --> 00:05:25.029
test examples so that's the number of
 

00:05:25.029 --> 00:05:29.640
test examples so that's the number of
test examples finally to put all of the

00:05:29.640 --> 00:05:29.650
test examples finally to put all of the
 

00:05:29.650 --> 00:05:32.129
test examples finally to put all of the
training examples into a more compact

00:05:32.129 --> 00:05:32.139
training examples into a more compact
 

00:05:32.139 --> 00:05:34.730
training examples into a more compact
notation we're going to define a matrix

00:05:34.730 --> 00:05:34.740
notation we're going to define a matrix
 

00:05:34.740 --> 00:05:38.999
notation we're going to define a matrix
capital X as defined by taking your

00:05:38.999 --> 00:05:39.009
capital X as defined by taking your
 

00:05:39.009 --> 00:05:42.629
capital X as defined by taking your
training set inputs x1 x2 and so on and

00:05:42.629 --> 00:05:42.639
training set inputs x1 x2 and so on and
 

00:05:42.639 --> 00:05:45.269
training set inputs x1 x2 and so on and
stacking them in columns so if you take

00:05:45.269 --> 00:05:45.279
stacking them in columns so if you take
 

00:05:45.279 --> 00:05:48.749
stacking them in columns so if you take
x1 and you put that as the first column

00:05:48.749 --> 00:05:48.759
x1 and you put that as the first column
 

00:05:48.759 --> 00:05:52.050
x1 and you put that as the first column
of this matrix and x2 cordetta the

00:05:52.050 --> 00:05:52.060
of this matrix and x2 cordetta the
 

00:05:52.060 --> 00:05:55.709
of this matrix and x2 cordetta the
second column and so on down to X M then

00:05:55.709 --> 00:05:55.719
second column and so on down to X M then
 

00:05:55.719 --> 00:05:58.889
second column and so on down to X M then
this is the matrix capital X so this

00:05:58.889 --> 00:05:58.899
this is the matrix capital X so this
 

00:05:58.899 --> 00:06:03.240
this is the matrix capital X so this
matrix X will have M columns where m is

00:06:03.240 --> 00:06:03.250
matrix X will have M columns where m is
 

00:06:03.250 --> 00:06:05.969
matrix X will have M columns where m is
the number of training examples and the

00:06:05.969 --> 00:06:05.979
the number of training examples and the
 

00:06:05.979 --> 00:06:07.559
the number of training examples and the
number of rows or the height of this

00:06:07.559 --> 00:06:07.569
number of rows or the height of this
 

00:06:07.569 --> 00:06:11.610
number of rows or the height of this
matrix is NX notice that in other causes

00:06:11.610 --> 00:06:11.620
matrix is NX notice that in other causes
 

00:06:11.620 --> 00:06:14.309
matrix is NX notice that in other causes
you might see the matrix capital X

00:06:14.309 --> 00:06:14.319
you might see the matrix capital X
 

00:06:14.319 --> 00:06:16.499
you might see the matrix capital X
defined by stacking up the training

00:06:16.499 --> 00:06:16.509
defined by stacking up the training
 

00:06:16.509 --> 00:06:19.969
defined by stacking up the training
examples in rows like so X 1 transpose

00:06:19.969 --> 00:06:19.979
examples in rows like so X 1 transpose
 

00:06:19.979 --> 00:06:24.779
examples in rows like so X 1 transpose
down to X M transpose but it turns out

00:06:24.779 --> 00:06:24.789
down to X M transpose but it turns out
 

00:06:24.789 --> 00:06:26.219
down to X M transpose but it turns out
that when you're implementing neural

00:06:26.219 --> 00:06:26.229
that when you're implementing neural
 

00:06:26.229 --> 00:06:28.740
that when you're implementing neural
networks using this convention I have on

00:06:28.740 --> 00:06:28.750
networks using this convention I have on
 

00:06:28.750 --> 00:06:30.209
networks using this convention I have on
the left will make the implementation

00:06:30.209 --> 00:06:30.219
the left will make the implementation
 

00:06:30.219 --> 00:06:35.399
the left will make the implementation
much easier so just to recap X is a n X

00:06:35.399 --> 00:06:35.409
much easier so just to recap X is a n X
 

00:06:35.409 --> 00:06:39.689
much easier so just to recap X is a n X
by M dimensional matrix and when you

00:06:39.689 --> 00:06:39.699
by M dimensional matrix and when you
 

00:06:39.699 --> 00:06:40.350
by M dimensional matrix and when you
compliment this

00:06:40.350 --> 00:06:40.360
compliment this
 

00:06:40.360 --> 00:06:44.070
compliment this
Pisan you see that ex-parte shape that

00:06:44.070 --> 00:06:44.080
Pisan you see that ex-parte shape that
 

00:06:44.080 --> 00:06:46.170
Pisan you see that ex-parte shape that
the Python command for finding the shape

00:06:46.170 --> 00:06:46.180
the Python command for finding the shape
 

00:06:46.180 --> 00:06:50.070
the Python command for finding the shape
of the matrix that this is M and X comma

00:06:50.070 --> 00:06:50.080
of the matrix that this is M and X comma
 

00:06:50.080 --> 00:06:52.200
of the matrix that this is M and X comma
M this just means is in NX by M

00:06:52.200 --> 00:06:52.210
M this just means is in NX by M
 

00:06:52.210 --> 00:06:54.450
M this just means is in NX by M
dimensional matrix so that's how you

00:06:54.450 --> 00:06:54.460
dimensional matrix so that's how you
 

00:06:54.460 --> 00:06:57.450
dimensional matrix so that's how you
group the training examples input X into

00:06:57.450 --> 00:06:57.460
group the training examples input X into
 

00:06:57.460 --> 00:07:01.290
group the training examples input X into
matrix how about the output labels Y it

00:07:01.290 --> 00:07:01.300
matrix how about the output labels Y it
 

00:07:01.300 --> 00:07:02.879
matrix how about the output labels Y it
turns out that to make your

00:07:02.879 --> 00:07:02.889
turns out that to make your
 

00:07:02.889 --> 00:07:04.439
turns out that to make your
implementation of a neural network

00:07:04.439 --> 00:07:04.449
implementation of a neural network
 

00:07:04.449 --> 00:07:08.100
implementation of a neural network
easier I'll be convenient also stack Y

00:07:08.100 --> 00:07:08.110
easier I'll be convenient also stack Y
 

00:07:08.110 --> 00:07:10.649
easier I'll be convenient also stack Y
in columns so we're going to define

00:07:10.649 --> 00:07:10.659
in columns so we're going to define
 

00:07:10.659 --> 00:07:17.040
in columns so we're going to define
capital Y to be equal to Y 1 y 2 up to Y

00:07:17.040 --> 00:07:17.050
capital Y to be equal to Y 1 y 2 up to Y
 

00:07:17.050 --> 00:07:22.969
capital Y to be equal to Y 1 y 2 up to Y
M like so so Y here will be a 1 by M

00:07:22.969 --> 00:07:22.979
M like so so Y here will be a 1 by M
 

00:07:22.979 --> 00:07:26.070
M like so so Y here will be a 1 by M
dimensional matrix and again to use the

00:07:26.070 --> 00:07:26.080
dimensional matrix and again to use the
 

00:07:26.080 --> 00:07:28.740
dimensional matrix and again to use the
Python notation you know the shape of Y

00:07:28.740 --> 00:07:28.750
Python notation you know the shape of Y
 

00:07:28.750 --> 00:07:32.189
Python notation you know the shape of Y
will be 1 comma M which just means this

00:07:32.189 --> 00:07:32.199
will be 1 comma M which just means this
 

00:07:32.199 --> 00:07:35.730
will be 1 comma M which just means this
is a 1 by M matrix and as you implement

00:07:35.730 --> 00:07:35.740
is a 1 by M matrix and as you implement
 

00:07:35.740 --> 00:07:37.800
is a 1 by M matrix and as you implement
your neural network later in this course

00:07:37.800 --> 00:07:37.810
your neural network later in this course
 

00:07:37.810 --> 00:07:40.320
your neural network later in this course
you find that a useful convention will

00:07:40.320 --> 00:07:40.330
you find that a useful convention will
 

00:07:40.330 --> 00:07:42.749
you find that a useful convention will
be to take the data associate to a

00:07:42.749 --> 00:07:42.759
be to take the data associate to a
 

00:07:42.759 --> 00:07:44.969
be to take the data associate to a
different training example and by data I

00:07:44.969 --> 00:07:44.979
different training example and by data I
 

00:07:44.979 --> 00:07:47.369
different training example and by data I
mean either X or Y or other quantities

00:07:47.369 --> 00:07:47.379
mean either X or Y or other quantities
 

00:07:47.379 --> 00:07:49.829
mean either X or Y or other quantities
you see later but to take the stuff or

00:07:49.829 --> 00:07:49.839
you see later but to take the stuff or
 

00:07:49.839 --> 00:07:51.719
you see later but to take the stuff or
the data associated with different

00:07:51.719 --> 00:07:51.729
the data associated with different
 

00:07:51.729 --> 00:07:53.730
the data associated with different
training examples and to stack them in

00:07:53.730 --> 00:07:53.740
training examples and to stack them in
 

00:07:53.740 --> 00:07:55.769
training examples and to stack them in
different columns like we've done here

00:07:55.769 --> 00:07:55.779
different columns like we've done here
 

00:07:55.779 --> 00:07:59.430
different columns like we've done here
for both x and y so that's the notation

00:07:59.430 --> 00:07:59.440
for both x and y so that's the notation
 

00:07:59.440 --> 00:08:01.499
for both x and y so that's the notation
we'll use for logistic regression and

00:08:01.499 --> 00:08:01.509
we'll use for logistic regression and
 

00:08:01.509 --> 00:08:03.300
we'll use for logistic regression and
for neural networks later in this course

00:08:03.300 --> 00:08:03.310
for neural networks later in this course
 

00:08:03.310 --> 00:08:05.309
for neural networks later in this course
if you ever forget what a piece of

00:08:05.309 --> 00:08:05.319
if you ever forget what a piece of
 

00:08:05.319 --> 00:08:07.950
if you ever forget what a piece of
notation means like what is M or 1 is n

00:08:07.950 --> 00:08:07.960
notation means like what is M or 1 is n
 

00:08:07.960 --> 00:08:10.110
notation means like what is M or 1 is n
or 1 or something else we've also posted

00:08:10.110 --> 00:08:10.120
or 1 or something else we've also posted
 

00:08:10.120 --> 00:08:11.219
or 1 or something else we've also posted
on the course website

00:08:11.219 --> 00:08:11.229
on the course website
 

00:08:11.229 --> 00:08:13.469
on the course website
in notation guide you can use to quickly

00:08:13.469 --> 00:08:13.479
in notation guide you can use to quickly
 

00:08:13.479 --> 00:08:15.149
in notation guide you can use to quickly
look up what you know any particular

00:08:15.149 --> 00:08:15.159
look up what you know any particular
 

00:08:15.159 --> 00:08:18.510
look up what you know any particular
piece of notation means so that lets go

00:08:18.510 --> 00:08:18.520
piece of notation means so that lets go
 

00:08:18.520 --> 00:08:20.249
piece of notation means so that lets go
on to the next video we'll start to

00:08:20.249 --> 00:08:20.259
on to the next video we'll start to
 

00:08:20.259 --> 00:08:22.529
on to the next video we'll start to
flesh out logistic regression using this

00:08:22.529 --> 00:08:22.539
flesh out logistic regression using this
 

00:08:22.539 --> 00:08:24.750
flesh out logistic regression using this
notation

