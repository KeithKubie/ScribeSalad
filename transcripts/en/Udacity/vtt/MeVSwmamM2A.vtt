WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
So once again, as a quiz, we're going to build

00:00:02.000 --> 00:00:04.000
a lot of this interpreter, together.

00:00:04.000 --> 00:00:06.000
I will get started; you'll complete the rest.

00:00:06.000 --> 00:00:09.000
We're going to write an eval_exp procedure

00:00:09.000 --> 00:00:11.000
to interpret JavaScript arithmetic.

00:00:11.000 --> 00:00:14.000
We're only going to handle (+), (-), and numbers for now.

00:00:14.000 --> 00:00:18.000
Our procedure walks over a (tree) so it takes a single (tree) as argument.

00:00:18.000 --> 00:00:20.000
Note that this is a little different from our HTML interpreter,

00:00:20.000 --> 00:00:22.000
which took multiple (tree)s.

00:00:22.000 --> 00:00:24.000
Remember that our (tree)s typically look like these.

00:00:24.000 --> 00:00:28.000
It's either a tuple "number", followed by something like "5"

00:00:28.000 --> 00:00:31.000
or maybe something like "binop", for binary operator,

00:00:31.000 --> 00:00:33.000
with a left_child (tree),

00:00:33.000 --> 00:00:35.000
a right_child (tree), and something like (+) in the middle.

00:00:35.000 --> 00:00:38.000
This first part, here, is the nodetype.

00:00:38.000 --> 00:00:42.000
We're going to extract it, by getting the zeroth element of the (tree).

00:00:42.000 --> 00:00:45.000
If it's a "number", all I have to do is

00:00:45.000 --> 00:00:47.000
figure out the integer value of this string.

00:00:47.000 --> 00:00:50.000
Python allows me to do that, just by calling (int) as if it were a function--

00:00:50.000 --> 00:00:53.000
to turn this string into an integer.

00:00:53.000 --> 00:00:56.000
Otherwise, for us, the node might be some binary operator.

00:00:56.000 --> 00:00:58.000
So we'll just pull out the left_child,

00:00:58.000 --> 00:01:00.000
the operator, and the right_child

00:01:00.000 --> 00:01:04.000
from the parts of the tuple that you already put there for us

00:01:04.000 --> 00:01:06.000
when you did all the hard work of making the parser.

00:01:06.000 --> 00:01:08.000
So here's what I want you to do for the quiz:

00:01:08.000 --> 00:01:11.000
You'll need to figure out the value of the left and the right_child--

00:01:11.000 --> 00:01:14.000
and the big hint here is recursive function call.

00:01:14.000 --> 00:01:16.000
And then once you have those values,

00:01:16.000 --> 00:01:18.000
you should actually do the work.

00:01:18.000 --> 00:01:21.000
If this is a (+) binary operator, add them together.

