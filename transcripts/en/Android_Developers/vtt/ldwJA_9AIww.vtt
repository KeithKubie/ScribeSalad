WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:02.830
DAN GALPIN: Android 8.1
Oreo contains a targeted set

00:00:02.830 --> 00:00:05.770
of enhancements, including
optimizations for Android Go

00:00:05.770 --> 00:00:08.054
and a new Neural Networks API.

00:00:08.054 --> 00:00:09.970
We've also included a
few smaller enhancements

00:00:09.970 --> 00:00:12.910
in response to user
and developer feedback.

00:00:12.910 --> 00:00:16.300
Android 8.1 includes memory
optimizations for Android Go--

00:00:16.300 --> 00:00:18.910
hardware that has one
gigabyte or less of RAM.

00:00:18.910 --> 00:00:21.220
For example, Notification
Listener Service

00:00:21.220 --> 00:00:23.050
and Condition Provider
Service will not

00:00:23.050 --> 00:00:24.959
be supported on low RAM devices.

00:00:24.959 --> 00:00:27.250
In addition, we've added new
hardware feature constants

00:00:27.250 --> 00:00:29.620
so you can now target the
distribution of your apps

00:00:29.620 --> 00:00:32.890
and APK splits to normal
or low RAM devices

00:00:32.890 --> 00:00:35.860
if they're running
Android 8.1 and later.

00:00:35.860 --> 00:00:38.740
We've been working hard to bring
on-device machine intelligence

00:00:38.740 --> 00:00:42.040
to mobile with features such
as Now Playing and Google Lens.

00:00:42.040 --> 00:00:44.770
The new Neural Networks
API lays the foundation

00:00:44.770 --> 00:00:46.360
for our developer
community to build

00:00:46.360 --> 00:00:48.130
accelerated on-device
applications

00:00:48.130 --> 00:00:50.410
of machine learning,
including image recognition

00:00:50.410 --> 00:00:51.570
and prediction.

00:00:51.570 --> 00:00:53.470
The Neural Networks
API runtime is

00:00:53.470 --> 00:00:55.780
designed to efficiently
distribute the computation

00:00:55.780 --> 00:00:58.240
workload across available
on-device processors,

00:00:58.240 --> 00:01:00.700
including dedicated neural
network hardware, graphics

00:01:00.700 --> 00:01:03.940
processing units, and
digital signal processors.

00:01:03.940 --> 00:01:06.010
For devices that lack
a specialized vendor

00:01:06.010 --> 00:01:08.990
driver or hardware, the runtime
relies on optimized code

00:01:08.990 --> 00:01:11.410
to execute requests on the CPU.

00:01:11.410 --> 00:01:14.230
It's unlikely that most apps
will use the Neural Networks

00:01:14.230 --> 00:01:15.370
API directly.

00:01:15.370 --> 00:01:17.020
They'll instead rely
on a higher level

00:01:17.020 --> 00:01:21.130
machine learning framework such
as TensorFlow Lite or Caffe 2.

00:01:21.130 --> 00:01:23.890
TensorFlow Lite is Google's
cross-platform open source

00:01:23.890 --> 00:01:26.200
framework designed to
execute deep trained neural

00:01:26.200 --> 00:01:28.120
networks in mobile
environments, and it's

00:01:28.120 --> 00:01:31.600
scheduled to be released soon,
so make sure to stay tuned.

00:01:31.600 --> 00:01:34.180
We also are investing bringing
the benefits of deep learning

00:01:34.180 --> 00:01:36.760
to more developers, so we
intend to release a library

00:01:36.760 --> 00:01:39.220
to make common ML use
cases easily available

00:01:39.220 --> 00:01:41.650
on mobile devices.

00:01:41.650 --> 00:01:44.920
Android 8.1 Oreo adds a
new Shared Memory API.

00:01:44.920 --> 00:01:46.750
This new API
enables the creation

00:01:46.750 --> 00:01:49.360
of an anonymous shared
memory instance.

00:01:49.360 --> 00:01:52.060
You can mmap the shared memory
object into a local byte buffer

00:01:52.060 --> 00:01:54.216
and read and write it like
any other byte buffer.

00:01:54.216 --> 00:01:55.840
The memory protection
can be controlled

00:01:55.840 --> 00:01:57.310
on the shared object.

00:01:57.310 --> 00:01:59.410
Since the shared memory
object is parcelable,

00:01:59.410 --> 00:02:02.400
you can easily pass it to
another process through AIDL.

00:02:02.400 --> 00:02:04.180
The remote process
can then map any part

00:02:04.180 --> 00:02:07.150
of the memory it wants, and
once access is no longer needed,

00:02:07.150 --> 00:02:08.889
just unmap the buffer.

00:02:08.889 --> 00:02:11.680
The Shared Memory API also
supports interoperability

00:02:11.680 --> 00:02:13.930
with the NDK using
a shared memory.

00:02:13.930 --> 00:02:16.210
We can mmap the FD and
then read and write.

00:02:16.210 --> 00:02:18.790
It's a great way to share data
between multiple processes,

00:02:18.790 --> 00:02:21.820
within a single app,
or even between apps.

00:02:21.820 --> 00:02:24.400
We've added some polish
and refinement to Autofill.

00:02:24.400 --> 00:02:26.980
Most of the changes are on
the Autofill service side.

00:02:26.980 --> 00:02:30.084
For example, the Save UI now
supports custom descriptions,

00:02:30.084 --> 00:02:31.750
so when asking to
save credit card data,

00:02:31.750 --> 00:02:34.116
the service can request a
displayable logo representing

00:02:34.116 --> 00:02:36.490
the type of credit card, the
last four digits of the card

00:02:36.490 --> 00:02:38.420
number, and an expiration date.

00:02:38.420 --> 00:02:42.329
This helps the user understand
exactly what is being saved.

00:02:42.329 --> 00:02:44.620
One minor change for apps
that want to support Autofill

00:02:44.620 --> 00:02:46.504
is that base adapter
and its derived classes,

00:02:46.504 --> 00:02:47.920
such as Array
Adapter, now support

00:02:47.920 --> 00:02:49.765
setting Autofill options.

00:02:49.765 --> 00:02:52.390
This makes it easier to provide
Autofill data for simple custom

00:02:52.390 --> 00:02:55.240
adapters, such as one used
to set credit card expiration

00:02:55.240 --> 00:02:55.810
dates.

00:02:55.810 --> 00:02:58.810
In Android 8.0, you would need
to override the Get Autofill

00:02:58.810 --> 00:03:02.380
method options in the adapter,
but now in 8.1, you can just

00:03:02.380 --> 00:03:04.210
call Set Autofill options.

00:03:04.210 --> 00:03:07.324
And in another helpful
touch, the API 27 version

00:03:07.324 --> 00:03:08.740
of the support
library view compat

00:03:08.740 --> 00:03:10.810
now wraps the Autofill
methods to make it easier

00:03:10.810 --> 00:03:13.330
to give hints to the Autofill
service, which you really

00:03:13.330 --> 00:03:14.740
should do.

00:03:14.740 --> 00:03:16.270
One more Autofill note--

00:03:16.270 --> 00:03:18.730
consider setting up an
association between your app

00:03:18.730 --> 00:03:19.690
and your website.

00:03:19.690 --> 00:03:21.850
This allows the Autofill
service to share passwords

00:03:21.850 --> 00:03:26.060
between the two, whether you
run Android 8.0 or Android 8.1.

00:03:26.060 --> 00:03:29.290
Android 8.1 includes the new
APIs in the Wallpaper Manager

00:03:29.290 --> 00:03:31.210
to get the most
representative colors

00:03:31.210 --> 00:03:32.580
from the current wallpaper.

00:03:32.580 --> 00:03:34.210
And the system UI
and Pixel launcher

00:03:34.210 --> 00:03:37.360
will adjust the colors they
use based upon this API.

00:03:37.360 --> 00:03:39.010
If you've made a
live wallpaper, you

00:03:39.010 --> 00:03:41.200
notify the wallpaper
service whenever your colors

00:03:41.200 --> 00:03:43.930
change significantly, returning
them in the On Compute Colors

00:03:43.930 --> 00:03:44.650
method.

00:03:44.650 --> 00:03:47.320
We recommend using the utility
functions within the Wallpaper

00:03:47.320 --> 00:03:49.330
Colors class to
automatically select

00:03:49.330 --> 00:03:51.490
these colors from a
representative bitmap

00:03:51.490 --> 00:03:52.990
or drawable.

00:03:52.990 --> 00:03:55.255
Some other changes you
might be interested in--

00:03:55.255 --> 00:03:57.130
Edit Text now returns
an editable rather than

00:03:57.130 --> 00:03:57.930
a care sequence.

00:03:57.930 --> 00:03:59.320
Your app can determine
how it responds

00:03:59.320 --> 00:04:01.903
to a known threat from the Web
View implementation of the Safe

00:04:01.903 --> 00:04:02.800
Browsing API.

00:04:02.800 --> 00:04:04.420
The Media Metadata
Retriever class

00:04:04.420 --> 00:04:06.730
has a new method, Get
Scaled Frame At Time,

00:04:06.730 --> 00:04:08.620
that finds a frame near
a given time position

00:04:08.620 --> 00:04:11.161
and returns a bitmap with the
same aspect ratio as the source

00:04:11.161 --> 00:04:13.520
frame, but at the
requested size.

00:04:13.520 --> 00:04:15.790
If you have any Pixel
or Pixel 2 device,

00:04:15.790 --> 00:04:17.829
we support requesting
A-audio sharing

00:04:17.829 --> 00:04:20.260
mode exclusive in
some cases, which

00:04:20.260 --> 00:04:22.240
provides reduced audio latency.

00:04:22.240 --> 00:04:24.130
Better yet, we've
released a preview

00:04:24.130 --> 00:04:27.130
of the Oboe library, which
allows applications to target

00:04:27.130 --> 00:04:30.310
A-Audio on API 26 plus
devices and Open SL

00:04:30.310 --> 00:04:32.560
on previous versions of
Android to get the best

00:04:32.560 --> 00:04:35.950
latency with a simplified API
surface in a compatible way.

00:04:35.950 --> 00:04:38.290
If you have a Pixel 2, you'll
notice a developer setting

00:04:38.290 --> 00:04:41.280
in Android 8.1 for
Camera HAL HDR+.

00:04:41.280 --> 00:04:44.350
This enables you to test an
early version of HDR+ with

00:04:44.350 --> 00:04:47.380
Pixel Visual Core, Google's
first custom designed

00:04:47.380 --> 00:04:49.480
co-processor for
consumer products.

00:04:49.480 --> 00:04:52.960
Note that HDR+ will only be
enabled for specific Camera

00:04:52.960 --> 00:04:55.180
and Camera2 API options.

00:04:55.180 --> 00:04:57.242
If you have an eligible
Pixel or Nexus device,

00:04:57.242 --> 00:04:59.700
you can enroll it in Android
Beta to get the latest update,

00:04:59.700 --> 00:05:02.850
but we also have Android
8.1 emulator images.

00:05:02.850 --> 00:05:04.860
This gives you the
opportunity to fix any issues

00:05:04.860 --> 00:05:06.360
and update your app
before consumers

00:05:06.360 --> 00:05:08.100
get their hands on 8.1.

00:05:08.100 --> 00:05:10.300
You can find out more about
everything we covered,

00:05:10.300 --> 00:05:12.750
including the developer
preview program here.

00:05:12.750 --> 00:05:13.650
Happy coding.

00:05:13.650 --> 00:05:16.700
[MUSIC PLAYING]

