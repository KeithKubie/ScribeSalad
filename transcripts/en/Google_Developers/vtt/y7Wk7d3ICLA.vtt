WEBVTT
Kind: captions
Language: en

00:00:03.505 --> 00:00:05.380
EDUARDO: I want to
apologize about something,

00:00:05.380 --> 00:00:07.270
but I will leave
that until the panel.

00:00:07.270 --> 00:00:10.590
And you can ask me why I was,
why I am apologizing now.

00:00:10.590 --> 00:00:12.380
But anyway.

00:00:12.380 --> 00:00:13.600
So hello.

00:00:13.600 --> 00:00:14.730
My name is Eduardo.

00:00:14.730 --> 00:00:18.121
And I want to start
with your help.

00:00:18.121 --> 00:00:19.745
I know some of you
are very introverted

00:00:19.745 --> 00:00:21.370
and will not want
to participate.

00:00:21.370 --> 00:00:26.370
But just for one second,
everybody raised your hands.

00:00:26.370 --> 00:00:27.707
All right.

00:00:27.707 --> 00:00:28.540
Thank you very much.

00:00:28.540 --> 00:00:29.587
Everyone, keep it up.

00:00:29.587 --> 00:00:29.700
Keep it up.

00:00:29.700 --> 00:00:30.699
Only one hand, so sorry.

00:00:30.699 --> 00:00:31.660
Only one hand.

00:00:31.660 --> 00:00:32.400
Don't cheat.

00:00:32.400 --> 00:00:32.640
Yeah.

00:00:32.640 --> 00:00:32.980
Thank you.

00:00:32.980 --> 00:00:33.530
All right.

00:00:33.530 --> 00:00:38.880
So if you are sure that--
let's do the first block.

00:00:38.880 --> 00:00:42.900
If you're sure that you can
protect against XSS-- you

00:00:42.900 --> 00:00:43.920
what is XSS.

00:00:43.920 --> 00:00:47.450
[INAUDIBLE] explained it--
please lower your hands.

00:00:47.450 --> 00:00:48.510
All right.

00:00:48.510 --> 00:00:50.530
If you think you can
protect against CSRF--

00:00:50.530 --> 00:00:52.250
you know what is CSRF.

00:00:52.250 --> 00:00:56.050
Dean just talked about it--
please lower your hands.

00:00:56.050 --> 00:00:59.440
No, I mean only lower it
if you know XSS and CSRF.

00:00:59.440 --> 00:01:01.860
So anyway.

00:01:01.860 --> 00:01:02.360
All right.

00:01:02.360 --> 00:01:03.039
Anyway.

00:01:03.039 --> 00:01:04.080
What about Mixed Content?

00:01:04.080 --> 00:01:07.041
Lower it if you know
about Mixed Content.

00:01:07.041 --> 00:01:07.540
OK.

00:01:07.540 --> 00:01:09.980
What about Timing?

00:01:09.980 --> 00:01:11.780
Timing attacks in
web applications?

00:01:11.780 --> 00:01:12.280
No?

00:01:12.280 --> 00:01:14.010
OK.

00:01:14.010 --> 00:01:16.770
Anyone know about Direct
Object Reference bugs,

00:01:16.770 --> 00:01:19.370
like Authorization Bypasses?

00:01:19.370 --> 00:01:22.220
Info leaks and stuff like that?

00:01:22.220 --> 00:01:23.880
Hash Extension bugs?

00:01:23.880 --> 00:01:24.380
OK.

00:01:24.380 --> 00:01:24.920
Maybe.

00:01:24.920 --> 00:01:26.060
Let's do it backwards.

00:01:26.060 --> 00:01:28.500
Lower your hands.

00:01:28.500 --> 00:01:33.620
Anyone that knows how to do
Caching, use Caching correctly

00:01:33.620 --> 00:01:37.911
for security purposes, like not
put the wrong Cache in headers.

00:01:37.911 --> 00:01:38.410
Come on.

00:01:38.410 --> 00:01:38.909
One person.

00:01:38.909 --> 00:01:39.580
All right.

00:01:39.580 --> 00:01:43.970
Maybe there's someone in
the other room as well.

00:01:43.970 --> 00:01:44.470
Yeah.

00:01:44.470 --> 00:01:47.980
Maybe all of-- if you are in the
other room-- no, I'm kidding.

00:01:47.980 --> 00:01:48.870
Don't do that.

00:01:48.870 --> 00:01:49.460
Anyway.

00:01:49.460 --> 00:01:56.620
So web security vulnerabilities
are, well quite a lot.

00:01:56.620 --> 00:01:58.980
[INAUDIBLE] already suggested
almost the same thing

00:01:58.980 --> 00:01:59.530
I just did.

00:01:59.530 --> 00:02:01.150
He was asking, oh,
so tell me whenever

00:02:01.150 --> 00:02:02.608
there are security
vulnerabilities.

00:02:02.608 --> 00:02:06.230
And you were coming out
with plenty of them.

00:02:06.230 --> 00:02:09.180
Anyone didn't know about
one of the vulnerabilities

00:02:09.180 --> 00:02:13.015
that she talked about
or that someone shouted?

00:02:13.015 --> 00:02:15.140
So every one of you knew
all of the vulnerabilities

00:02:15.140 --> 00:02:16.145
that were mentioned?

00:02:16.145 --> 00:02:17.280
All right.

00:02:17.280 --> 00:02:23.380
So knowing how to prevent them,
it's actually quite tricky.

00:02:23.380 --> 00:02:26.324
Not in all cases,
it's trivial to know

00:02:26.324 --> 00:02:27.490
exactly what you have to do.

00:02:27.490 --> 00:02:29.930
So for XSS, you have
to know about Escaping,

00:02:29.930 --> 00:02:31.390
about the right
type of Escaping.

00:02:31.390 --> 00:02:33.241
We have talks about,
there is Escaping.

00:02:33.241 --> 00:02:34.740
There is the right
type of Escaping.

00:02:34.740 --> 00:02:37.000
But in the wrong order, and
then you introduce a bug.

00:02:37.000 --> 00:02:39.630
For CSRF, there might
be CSRF token sent.

00:02:39.630 --> 00:02:41.460
But then they are not
enforced in one case,

00:02:41.460 --> 00:02:43.120
in the one case
that you need it.

00:02:43.120 --> 00:02:45.000
There is Authentication
Bypass blocks,

00:02:45.000 --> 00:02:49.450
and they are just forgotten
to have it in one place.

00:02:49.450 --> 00:02:52.120
Generally speaking,
we have noticed,

00:02:52.120 --> 00:02:54.860
or we reached the
conclusion that even

00:02:54.860 --> 00:02:56.680
if you want to do
things safe, even if you

00:02:56.680 --> 00:02:58.550
know about the bugs,
it's very likely

00:02:58.550 --> 00:03:00.750
that you will
introduce them anyway.

00:03:00.750 --> 00:03:03.226
We also notice that,
even if you don't know,

00:03:03.226 --> 00:03:04.600
you are likely to
introduce them.

00:03:04.600 --> 00:03:06.840
So if you care about
security, if you

00:03:06.840 --> 00:03:08.400
don't care about
security, both ways,

00:03:08.400 --> 00:03:11.530
you're going to introduce, in
one case, very complex bugs,

00:03:11.530 --> 00:03:13.080
in the other case,
very simple bugs.

00:03:13.080 --> 00:03:14.020
Maybe you don't know anything.

00:03:14.020 --> 00:03:15.228
You will introduce more bugs.

00:03:15.228 --> 00:03:17.350
But end of the day,
you're going to have

00:03:17.350 --> 00:03:22.060
more than enough to have
an unsafe web application.

00:03:22.060 --> 00:03:24.994
So as far [INAUDIBLE]
mentioned, I

00:03:24.994 --> 00:03:26.410
work in the product
security team.

00:03:26.410 --> 00:03:28.100
In the product
security response team.

00:03:28.100 --> 00:03:30.950
And what my team does is,
whenever someone finds a bug,

00:03:30.950 --> 00:03:33.770
like the ones that Tim
Willis just talked about,

00:03:33.770 --> 00:03:35.784
we go, and we're with
the product team.

00:03:35.784 --> 00:03:37.200
And we work with
them to make sure

00:03:37.200 --> 00:03:38.710
that it never happens again.

00:03:38.710 --> 00:03:42.600
So that means, make sure
that if a bug happened now,

00:03:42.600 --> 00:03:45.030
we would try to look for
similar bugs around it.

00:03:45.030 --> 00:03:47.050
We try to see what is
the real root cause.

00:03:47.050 --> 00:03:50.760
And then, we make it
so that doesn't happen.

00:03:50.760 --> 00:03:54.280
As we tried to do this
in the past couple years,

00:03:54.280 --> 00:03:59.020
we concluded that we
cannot trust humans.

00:03:59.020 --> 00:04:01.950
So humans are going
to make mistakes.

00:04:01.950 --> 00:04:02.960
And we're all human.

00:04:02.960 --> 00:04:04.150
So we all make mistakes.

00:04:04.150 --> 00:04:06.415
And developers have to be
humans because otherwise we

00:04:06.415 --> 00:04:10.400
have Terminator and
stuff like that.

00:04:10.400 --> 00:04:15.120
So we came up with these that,
what the developer has to know

00:04:15.120 --> 00:04:18.019
about security to be able to
develop secure applications is

00:04:18.019 --> 00:04:20.880
what is in this slide and
that's-- in these slides.

00:04:20.880 --> 00:04:21.899
And that's a wide slide.

00:04:21.899 --> 00:04:24.294
And this is not all my slides.

00:04:24.294 --> 00:04:25.460
But this is the first slide.

00:04:25.460 --> 00:04:29.760
So if that's what
a web developer has

00:04:29.760 --> 00:04:33.590
to offer security,
then how can they

00:04:33.590 --> 00:04:35.090
develop web secure
web applications?

00:04:35.090 --> 00:04:37.640
How do we have secure
web applications?

00:04:37.640 --> 00:04:42.440
So what we ended up
doing is that we are now

00:04:42.440 --> 00:04:46.270
expecting that every security
bug is the frameworks fault.

00:04:46.270 --> 00:04:49.180
That means that if you're
using a framework and framework

00:04:49.180 --> 00:04:52.280
doesn't prevent you from
introducing XSS bugs,

00:04:52.280 --> 00:04:55.420
then the framework is not
as complete as it should be.

00:04:55.420 --> 00:04:56.901
And then, we should
implement, we

00:04:56.901 --> 00:04:58.900
should implement something
in the framework that

00:04:58.900 --> 00:05:01.019
prevent a bug from
being ever introduced.

00:05:01.019 --> 00:05:03.310
That's why, that why the talk
is called Vulnerabilities

00:05:03.310 --> 00:05:04.740
Should Not Compile.

00:05:04.740 --> 00:05:08.080
Because it means that we should
make possible that a CSRF bug

00:05:08.080 --> 00:05:09.530
can be launched into production.

00:05:09.530 --> 00:05:12.110
We should not be possible that
an info leak or [INAUDIBLE]

00:05:12.110 --> 00:05:15.240
Reference or whatever should
be launched into production.

00:05:15.240 --> 00:05:18.579
What this talk is going to be
about is about several ways

00:05:18.579 --> 00:05:20.120
that we have been
doing it in Google.

00:05:20.120 --> 00:05:22.745
Or if we have not been doing it
in Google, what we are planning

00:05:22.745 --> 00:05:24.860
to do in Google to prevent
this type of security

00:05:24.860 --> 00:05:26.680
vulnerabilities.

00:05:26.680 --> 00:05:32.090
Don't consider that the things
that we're going to talk,

00:05:32.090 --> 00:05:35.450
about that I'm going to talk
about, but not all of them

00:05:35.450 --> 00:05:37.770
are feasible for all
web applications.

00:05:37.770 --> 00:05:40.067
So some of the things
might not make sense

00:05:40.067 --> 00:05:41.650
for someone that is
developing a game.

00:05:41.650 --> 00:05:42.890
Some of the things
might not makes sense

00:05:42.890 --> 00:05:45.940
for someone that is developing
a bank application, for example.

00:05:45.940 --> 00:05:50.199
Someone that has nothing to
do with a specific subset

00:05:50.199 --> 00:05:50.990
of the [INAUDIBLE].

00:05:50.990 --> 00:05:56.130
But still, the general principle
is the same, roughly speaking.

00:05:56.130 --> 00:05:59.080
If I do my job right, then
by the end of the talk,

00:05:59.080 --> 00:06:01.780
you will be able to eat, to
sleep, and code without having

00:06:01.780 --> 00:06:04.080
to think about patching
a security bug.

00:06:04.080 --> 00:06:08.910
So you're going to be able
to, if someone ever tells you,

00:06:08.910 --> 00:06:10.260
we have to patch this XSS.

00:06:10.260 --> 00:06:13.467
We have to patch this whatever.

00:06:13.467 --> 00:06:15.800
Hopefully, the first thought
that will come to your mind

00:06:15.800 --> 00:06:18.180
will be, no.

00:06:18.180 --> 00:06:22.320
That's not how you fix this bug.

00:06:22.320 --> 00:06:25.000
Let's see if this works.

00:06:25.000 --> 00:06:25.500
Nope.

00:06:25.500 --> 00:06:27.330
Oh, it worked.

00:06:27.330 --> 00:06:29.880
So let's take one step
back and figure out

00:06:29.880 --> 00:06:32.660
why we should even
care about this.

00:06:32.660 --> 00:06:34.680
So why security is important.

00:06:34.680 --> 00:06:36.020
This is super, super fast.

00:06:36.020 --> 00:06:38.310
And I just want to mention
it for two reasons.

00:06:38.310 --> 00:06:40.840
So because of your face,
because of your reputation

00:06:40.840 --> 00:06:45.340
is in the line, because if
you have a security bug,

00:06:45.340 --> 00:06:47.590
you are in the news
as Tim just mentioned.

00:06:47.590 --> 00:06:51.780
Then, it is your brand,
your product, your website,

00:06:51.780 --> 00:06:56.475
the one that is
being talked about.

00:06:56.475 --> 00:06:58.060
The second reason is your money.

00:06:58.060 --> 00:06:59.900
So if you are
marketing agency that

00:06:59.900 --> 00:07:03.430
is making business with another
website, with another company,

00:07:03.430 --> 00:07:05.350
and that company gets
hacked because of you,

00:07:05.350 --> 00:07:07.308
you are not going to get
that business anymore.

00:07:07.308 --> 00:07:08.760
If they talk with
each other, they

00:07:08.760 --> 00:07:11.690
are most likely
not going to-- you

00:07:11.690 --> 00:07:15.680
are going to have
a bad name overall.

00:07:15.680 --> 00:07:17.722
And the most important
reason is because it's

00:07:17.722 --> 00:07:18.555
your responsibility.

00:07:18.555 --> 00:07:23.200
If you have users,
your users trust you.

00:07:23.200 --> 00:07:25.990
And if your users trust you,
you have some responsibility

00:07:25.990 --> 00:07:27.730
to them to be able
to protect them

00:07:27.730 --> 00:07:29.730
against any type
of vulnerability

00:07:29.730 --> 00:07:32.580
that you are meant
to protect them.

00:07:32.580 --> 00:07:36.987
So I'm going to assume
that [INAUDIBLE].

00:07:36.987 --> 00:07:38.570
So I'm going to
assume that all of you

00:07:38.570 --> 00:07:39.730
want to do the right thing.

00:07:39.730 --> 00:07:42.930
All of you want to know
how to do this correctly,

00:07:42.930 --> 00:07:46.200
that you want to protect
the users and so on.

00:07:46.200 --> 00:07:49.472
So the question is, what
is the right thing to do.

00:07:49.472 --> 00:07:51.930
I just told you what I think
what is the right thing to do.

00:07:51.930 --> 00:07:54.820
But let's see if
that's really the case.

00:07:54.820 --> 00:07:57.320
So where do these
bugs come from?

00:07:57.320 --> 00:07:58.820
So that's the right
question, right?

00:07:58.820 --> 00:08:01.330
It's like, where
these vulnerabilities

00:08:01.330 --> 00:08:02.260
are coming from.

00:08:02.260 --> 00:08:06.070
Why do they exist
in the first place?

00:08:06.070 --> 00:08:08.950
And the reason is, or
at least the reason

00:08:08.950 --> 00:08:11.400
that we see is because
the services grow

00:08:11.400 --> 00:08:12.990
bigger and more complex.

00:08:12.990 --> 00:08:15.210
And by that I mean,
at some point,

00:08:15.210 --> 00:08:18.190
you're going to have a website
that is moderately successful.

00:08:18.190 --> 00:08:21.030
That is going to have
several users or many users.

00:08:21.030 --> 00:08:22.804
And eventually,
you're going to have

00:08:22.804 --> 00:08:23.970
more people that work on it.

00:08:23.970 --> 00:08:24.900
And it's not just you.

00:08:24.900 --> 00:08:26.349
Now, it's you and other people.

00:08:26.349 --> 00:08:28.140
Now, eventually, you're
going to be talking

00:08:28.140 --> 00:08:30.380
with other services
and other websites.

00:08:30.380 --> 00:08:32.590
And eventually,
those other website

00:08:32.590 --> 00:08:34.890
will want to talk
to you in some API.

00:08:34.890 --> 00:08:37.520
Or you're going to be able to
use APIs of other sites like,

00:08:37.520 --> 00:08:41.380
I don't know, Facebook or
Twitter or Google+ or whatever.

00:08:41.380 --> 00:08:44.970
And eventually, all
of these becomes

00:08:44.970 --> 00:08:48.410
just a huge complex
mix, completely mess.

00:08:48.410 --> 00:08:54.030
So how do we look
at complex systems.

00:08:54.030 --> 00:08:57.240
There is very popular
example of no one

00:08:57.240 --> 00:08:59.310
really knows where
a pencil comes from.

00:08:59.310 --> 00:09:01.780
It's very simple, but no one
knows every single component

00:09:01.780 --> 00:09:04.900
where it comes from, the
paint, to lead, the eraser,

00:09:04.900 --> 00:09:06.810
and everything.

00:09:06.810 --> 00:09:10.930
What about an application
like I don't know, fancy.com.

00:09:10.930 --> 00:09:14.350
Do you guys think that
there is one engineer

00:09:14.350 --> 00:09:17.105
in the company that knows
how every single line of code

00:09:17.105 --> 00:09:19.770
or that understands all
the complexities around it?

00:09:19.770 --> 00:09:22.850
Like the Sandbox environments,
all the third party

00:09:22.850 --> 00:09:24.750
dependencies that they have.

00:09:24.750 --> 00:09:26.020
Maybe, there someone there is.

00:09:26.020 --> 00:09:28.320
But it's more
likely there isn't.

00:09:28.320 --> 00:09:31.490
So the way that developers
and anyone really

00:09:31.490 --> 00:09:34.470
can cope with these complexities
that they just simply,

00:09:34.470 --> 00:09:37.990
or we just simply see
it as a simple process.

00:09:37.990 --> 00:09:39.830
So we just see it
like, OK, this is

00:09:39.830 --> 00:09:41.810
what I expect to happen
in this scenario.

00:09:41.810 --> 00:09:43.450
And we create a
very specific set

00:09:43.450 --> 00:09:46.780
of schemas that-- or
patterns in our brain

00:09:46.780 --> 00:09:49.580
of how things happen
in the general sense.

00:09:49.580 --> 00:09:52.590
So we will be remembering, oh,
yeah, so this is probably--

00:09:52.590 --> 00:09:53.967
this probably works in this way.

00:09:53.967 --> 00:09:55.550
This probably works
in this other way.

00:09:55.550 --> 00:09:57.290
And in some cases, it
works because the framework

00:09:57.290 --> 00:09:58.289
makes it work like that.

00:09:58.289 --> 00:10:00.950
And some other cases, it
doesn't work like that.

00:10:00.950 --> 00:10:07.700
So I'm going to go through
five examples of when

00:10:07.700 --> 00:10:11.840
the assumptions and the way
that you expect things to work

00:10:11.840 --> 00:10:13.040
don't work quite like that.

00:10:15.810 --> 00:10:17.740
That's the reason where--
that's a place where

00:10:17.740 --> 00:10:20.350
security vulnerabilities,
in most cases, come from.

00:10:20.350 --> 00:10:22.683
When you expect things to
work one way and they actually

00:10:22.683 --> 00:10:24.250
they work a different way.

00:10:24.250 --> 00:10:25.860
So the first one is XSS.

00:10:25.860 --> 00:10:27.080
We talked about XSS a lot.

00:10:27.080 --> 00:10:30.690
HTML5 probably the most
popular bug that any one of you

00:10:30.690 --> 00:10:32.415
are going to
interact with is XSS.

00:10:35.040 --> 00:10:36.520
This is an example of an XSS.

00:10:36.520 --> 00:10:37.140
So it's hello.

00:10:37.140 --> 00:10:37.795
This is PHP.

00:10:37.795 --> 00:10:39.100
I'm sorry about that.

00:10:39.100 --> 00:10:44.290
And it says hello and
then the variable name.

00:10:44.290 --> 00:10:44.960
That's the user.

00:10:44.960 --> 00:10:46.990
And you as a developer,
you or someone

00:10:46.990 --> 00:10:49.382
who is writing this code
expect that to write the users

00:10:49.382 --> 00:10:52.660
name not HTML.

00:10:52.660 --> 00:10:55.230
When you wrote this code
or whenever that person

00:10:55.230 --> 00:10:57.380
wrote this code, they
literally did not

00:10:57.380 --> 00:11:01.600
expect that to be HTML, right?

00:11:01.600 --> 00:11:06.700
So the right question to ask
is, why will it even be HTML.

00:11:06.700 --> 00:11:08.330
Why shouldn't it
just be a string?

00:11:08.330 --> 00:11:11.930
Because that's what
you expect, right?

00:11:11.930 --> 00:11:14.280
This syntax is meant to inject
variables, not-- I mean,

00:11:14.280 --> 00:11:15.780
it's meant [INAUDIBLE]
HTML as well.

00:11:15.780 --> 00:11:17.770
But in most cases,
it's just going

00:11:17.770 --> 00:11:20.271
to be used to inject variables.

00:11:20.271 --> 00:11:20.770
All right.

00:11:20.770 --> 00:11:21.610
Next example.

00:11:21.610 --> 00:11:23.880
Authorization and CSRF.

00:11:23.880 --> 00:11:27.552
So this is a very simple request
of a fake bank application.

00:11:27.552 --> 00:11:29.260
And the fake bank
application, you just--

00:11:29.260 --> 00:11:31.510
the only thing you want to
do, the thing that you want

00:11:31.510 --> 00:11:35.110
this endpoint to do is
to transfer the amount

00:11:35.110 --> 00:11:37.810
from from to to in that amount.

00:11:37.810 --> 00:11:40.310
And if it fails, then
you send a error.

00:11:40.310 --> 00:11:45.820
If it doesn't failed, then
you send a success response.

00:11:45.820 --> 00:11:48.420
So that sounds ideal.

00:11:48.420 --> 00:11:51.880
That will be the best type of
code that you could ever write.

00:11:51.880 --> 00:11:53.949
It's super simple,
super compact.

00:11:53.949 --> 00:11:56.490
These POST requests, the only
thing it does is call that API.

00:11:56.490 --> 00:11:58.842
And that's it.

00:11:58.842 --> 00:12:00.050
That's a code that you write.

00:12:00.050 --> 00:12:01.591
That the code that
you want to write.

00:12:01.591 --> 00:12:04.020
That's the code that does
what you actually want.

00:12:04.020 --> 00:12:05.811
You don't actually want
to know about CSRF,

00:12:05.811 --> 00:12:07.250
and how to generate
these tokens,

00:12:07.250 --> 00:12:12.220
and how to authenticate if user
is allowed to do this or that.

00:12:12.220 --> 00:12:16.360
That's not really what this do
POST request is meant to do.

00:12:16.360 --> 00:12:19.342
This is just meant to do
this one very simple thing.

00:12:19.342 --> 00:12:21.690
And you're going
to do it like that.

00:12:21.690 --> 00:12:24.530
Another example, which
is very similar to XSS,

00:12:24.530 --> 00:12:27.770
in the source, in the
reason where it comes from,

00:12:27.770 --> 00:12:30.540
is that you want to have a
very simple SQL query that

00:12:30.540 --> 00:12:33.110
says SELECT a star FROM
Product WHERE sku is equal to,

00:12:33.110 --> 00:12:35.620
and some interpolate of
the string of called sku.

00:12:35.620 --> 00:12:37.565
And this is short, and
simple, and readable.

00:12:37.565 --> 00:12:38.940
If anyone looks
at the code, they

00:12:38.940 --> 00:12:40.523
know what this code
is supposed to do.

00:12:40.523 --> 00:12:42.800
Unfortunately, that will
narrow the SQL injection.

00:12:42.800 --> 00:12:44.383
If you just put the
single code there,

00:12:44.383 --> 00:12:45.660
you can do whatever you want.

00:12:45.660 --> 00:12:48.806
But that's short, and that's
simple, and that's readable.

00:12:48.806 --> 00:12:50.430
And that's vulnerable
to SQL injection.

00:12:53.120 --> 00:12:56.150
You just want to make
things work nicely, right?

00:12:59.050 --> 00:13:00.830
There are still other examples.

00:13:00.830 --> 00:13:03.300
One of them is authentication.

00:13:03.300 --> 00:13:06.370
The case for authentication
is a little bit tricky.

00:13:06.370 --> 00:13:08.055
So you're going to log in.

00:13:08.055 --> 00:13:09.680
And the only thing
you want is the user

00:13:09.680 --> 00:13:12.130
to be able-- you just want
to authenticate the user.

00:13:12.130 --> 00:13:14.050
You don't really want
to do anything else.

00:13:14.050 --> 00:13:15.720
You just want to
know who the user is.

00:13:15.720 --> 00:13:17.929
That's your goal when you
[INAUDIBLE] authentication.

00:13:17.929 --> 00:13:20.136
And the first thing that
comes to mind to most people

00:13:20.136 --> 00:13:23.020
when they think authentication
is a user name and a password.

00:13:23.020 --> 00:13:26.150
That's normal, right?

00:13:26.150 --> 00:13:28.640
So then you have to deal
with account recovery.

00:13:28.640 --> 00:13:31.600
So you're going to do email, or
questions, or for enterprises.

00:13:31.600 --> 00:13:33.641
How are they going to--
current enterprise, where

00:13:33.641 --> 00:13:36.020
the company is going to recover
their corporate account.

00:13:36.020 --> 00:13:38.909
If you have [INAUDIBLE]
/google, for example,

00:13:38.909 --> 00:13:40.950
then how is Google going
to recover that account?

00:13:40.950 --> 00:13:42.700
Like you cannot use
with secret questions,

00:13:42.700 --> 00:13:45.340
because then an
ex-employee can recover it.

00:13:45.340 --> 00:13:48.260
You cannot use an email, because
then the email can be changed.

00:13:48.260 --> 00:13:51.134
So how do you deal
with those situations?

00:13:51.134 --> 00:13:51.800
Recovery of use.

00:13:51.800 --> 00:13:54.020
So how do you deal
with brute forcing?

00:13:54.020 --> 00:13:55.930
How do you deal
with people brute

00:13:55.930 --> 00:13:57.929
forcing their way
into an account.

00:13:57.929 --> 00:13:59.470
We all know Twitter
has this problem.

00:13:59.470 --> 00:14:01.550
That if you have two-tier,
one-layer handle,

00:14:01.550 --> 00:14:03.810
everyone wants to get
into that account.

00:14:03.810 --> 00:14:04.430
Hijacking.

00:14:04.430 --> 00:14:06.440
How you deal with
someone hijacks account,

00:14:06.440 --> 00:14:08.747
and then the real user
wants to get it back?

00:14:08.747 --> 00:14:09.830
How do you deal with that?

00:14:09.830 --> 00:14:11.410
You have to deal with some way?

00:14:11.410 --> 00:14:13.640
How do you use social
engineering your own employees,

00:14:13.640 --> 00:14:17.686
or employees [INAUDIBLE] users
to get their account back.

00:14:17.686 --> 00:14:19.310
How would you deal
with password reuse?

00:14:19.310 --> 00:14:21.860
How many times in the last
year password databases

00:14:21.860 --> 00:14:25.400
have been leaked.

00:14:25.400 --> 00:14:32.070
So that has been Adobe,
LinkedIn, several times.

00:14:32.070 --> 00:14:33.060
Monitor hijackings.

00:14:33.060 --> 00:14:35.100
You have to monitor
whenever that happens.

00:14:35.100 --> 00:14:38.900
You're going to make
something in there.

00:14:38.900 --> 00:14:42.580
You have to store your passwords
in some strong salted KDF

00:14:42.580 --> 00:14:44.590
with maybe some key
that is [INAUDIBLE],

00:14:44.590 --> 00:14:46.500
and then you have to
deal with performance

00:14:46.500 --> 00:14:48.250
and making sure that
it happens correctly.

00:14:48.250 --> 00:14:50.810
And that if you lose a key and
there's some cause of failure,

00:14:50.810 --> 00:14:52.240
you're able to
recover gracefully

00:14:52.240 --> 00:14:55.890
without having to depend on the
key being in the wrong place.

00:14:55.890 --> 00:14:57.460
How to deal with
password managers.

00:14:57.460 --> 00:15:00.810
If you are going to enforce
a minimum password strength,

00:15:00.810 --> 00:15:03.026
then how are you going
to deal with that?

00:15:03.026 --> 00:15:03.992
AUDIENCE: Excuse me.

00:15:03.992 --> 00:15:10.829
Before you go on, I don't really
know what Salt, what was that?

00:15:10.829 --> 00:15:12.370
EDUARDO VELA NAVA:
You don't have to.

00:15:12.370 --> 00:15:14.822
That's a trick.

00:15:14.822 --> 00:15:16.300
AUDIENCE: What if I want to?

00:15:16.300 --> 00:15:17.350
EDUARDO VELA NAVA: We
can follow up offline.

00:15:17.350 --> 00:15:19.013
AUDIENCE: May I
talk to you after?

00:15:19.013 --> 00:15:20.262
EDUARDO VELA NAVA: Yeah, sure.

00:15:20.262 --> 00:15:21.480
AUDIENCE: Appreciate that.

00:15:21.480 --> 00:15:23.730
EDUARDO VELA NAVA: So there
is more things, as I said.

00:15:23.730 --> 00:15:26.300
Some users may want to know
about photo authentication.

00:15:26.300 --> 00:15:28.910
Some people might want to
the detect suspicious actions

00:15:28.910 --> 00:15:30.160
and then block their accounts.

00:15:30.160 --> 00:15:32.110
Some people might want
to be able to deal

00:15:32.110 --> 00:15:33.590
with [INAUDIBLE] authentication.

00:15:33.590 --> 00:15:38.680
How to deal with a password in
a phone and then in a website.

00:15:38.680 --> 00:15:41.410
With passwords, I think
I mentioned this briefly

00:15:41.410 --> 00:15:43.564
before, you're going to
enforce a minimum strength.

00:15:43.564 --> 00:15:45.480
You're going to protect
against brute forcing,

00:15:45.480 --> 00:15:46.794
online brute forcing.

00:15:46.794 --> 00:15:48.960
Putting captcha isn't going
to be enough, of course,

00:15:48.960 --> 00:15:51.110
because then people that
want to get into account

00:15:51.110 --> 00:15:52.730
are going to want
to have a captcha.

00:15:52.730 --> 00:15:53.650
Are you going to put
a strength meter?

00:15:53.650 --> 00:15:55.275
You're going to put
strength meter, how

00:15:55.275 --> 00:15:56.870
are you going to
measure the strength.

00:15:56.870 --> 00:15:57.911
I don't want to continue.

00:16:00.580 --> 00:16:02.810
There is one more thing,
third party libraries.

00:16:02.810 --> 00:16:04.530
And this is not all the
things about the security.

00:16:04.530 --> 00:16:06.738
These are just five things
that I happened to choose,

00:16:06.738 --> 00:16:09.090
because the diagram
have five balls,

00:16:09.090 --> 00:16:10.850
and I wanted to put five things.

00:16:10.850 --> 00:16:15.580
So for third party
libraries, you

00:16:15.580 --> 00:16:17.430
have to read all
documentation and looking

00:16:17.430 --> 00:16:20.050
for all dangerous functionality
and unsafe configurations.

00:16:20.050 --> 00:16:22.360
So if you are going to
be using an XML parser,

00:16:22.360 --> 00:16:24.240
you have to know about
XML external entities

00:16:24.240 --> 00:16:27.320
and about [INAUDIBLE]
attacks and stuff like that.

00:16:27.320 --> 00:16:29.660
You have to know
about if your media

00:16:29.660 --> 00:16:32.875
player is downloading products.

00:16:35.840 --> 00:16:38.710
If you're SVG does foreign
resolution of objects,

00:16:38.710 --> 00:16:41.680
and then that allows itself
to load another other XML

00:16:41.680 --> 00:16:43.595
file within you
SVG file, and then

00:16:43.595 --> 00:16:46.100
load some internal
research in your page.

00:16:46.100 --> 00:16:48.530
Or DOM.js, for
example, that was nice.

00:16:48.530 --> 00:16:51.360
Some people were DOM.js,
which is an old thing

00:16:51.360 --> 00:16:52.990
to load the scripts
from other page,

00:16:52.990 --> 00:16:55.156
and that ended passing
remote [INAUDIBLE] execution,

00:16:55.156 --> 00:16:57.150
because that's how it works.

00:16:57.150 --> 00:16:59.015
You also have to
monitor CVEs, and change

00:16:59.015 --> 00:17:02.630
logs, announce lists to
be able to know whenever

00:17:02.630 --> 00:17:04.488
the thing has a security bar.

00:17:04.488 --> 00:17:06.240
You have pull out
the deploy and fix.

00:17:06.240 --> 00:17:09.160
You have to, once the
software goes out of life, how

00:17:09.160 --> 00:17:11.584
are you going to deal with that?

00:17:11.584 --> 00:17:14.500
If the new versions are
not compatible anymore,

00:17:14.500 --> 00:17:16.880
if they have an API change,
what are going to do?

00:17:16.880 --> 00:17:20.589
So all these things
seem super complicated,

00:17:20.589 --> 00:17:22.569
and you just want to
do a simple thing.

00:17:22.569 --> 00:17:24.480
You just wanted to
have a website that

00:17:24.480 --> 00:17:26.290
shows videos to their friends.

00:17:26.290 --> 00:17:28.480
And then you had to have
some video converters.

00:17:28.480 --> 00:17:30.160
And then you have to
do authentication.

00:17:30.160 --> 00:17:32.770
And then XSS, and authorization,
and CSRF, and SQL injection.

00:17:32.770 --> 00:17:34.020
And how do you deal with that?

00:17:39.030 --> 00:17:40.260
What is the right thing?

00:17:40.260 --> 00:17:42.640
So the right thing is a blender.

00:17:45.390 --> 00:17:47.090
This is not a
framework before anyone

00:17:47.090 --> 00:17:48.548
thinks I'm selling
you a framework.

00:17:50.986 --> 00:17:52.360
The reason I
mention a blender is

00:17:52.360 --> 00:17:56.350
because it is an example of
something that all of you know,

00:17:56.350 --> 00:17:59.020
I hope.

00:17:59.020 --> 00:18:00.440
Something very special about it.

00:18:00.440 --> 00:18:03.760
So it is a machine
that has motor

00:18:03.760 --> 00:18:06.750
that turns super fast
and very strongly,

00:18:06.750 --> 00:18:09.350
about 500 revolutions
per second.

00:18:09.350 --> 00:18:12.800
And has super sharp
blade in it that

00:18:12.800 --> 00:18:17.350
can destroy bones and do
all sort of scary things.

00:18:17.350 --> 00:18:20.590
And somehow we were able
to put it in such a form

00:18:20.590 --> 00:18:23.180
that it's relatively
safe to use.

00:18:23.180 --> 00:18:26.790
There's reasonable not so
reasonable circumstances.

00:18:26.790 --> 00:18:29.380
So just to share a story.

00:18:29.380 --> 00:18:32.000
My wife was telling me that
she put a spoon inside one

00:18:32.000 --> 00:18:36.940
of these blenders,
and it was OK.

00:18:36.940 --> 00:18:38.850
I was like, yeah, that's right.

00:18:38.850 --> 00:18:41.490
It should be OK.

00:18:41.490 --> 00:18:47.940
So the blender has several
security mechanisms

00:18:47.940 --> 00:18:50.280
to prevent them from
being a problem,

00:18:50.280 --> 00:18:51.775
even if they are misuses.

00:18:51.775 --> 00:18:53.900
If there is a warning
in the manual that

00:18:53.900 --> 00:18:55.770
says, do not, under
any circumstances,

00:18:55.770 --> 00:18:57.500
turn the know three
times and then

00:18:57.500 --> 00:18:58.980
press the button five times.

00:18:58.980 --> 00:19:01.665
Because in that
situation, then the blade

00:19:01.665 --> 00:19:04.000
is going to go out spinning
and hit you in the eye.

00:19:04.000 --> 00:19:06.900
That's not how it
works, except that's

00:19:06.900 --> 00:19:09.630
how it works for several
web framers and platforms.

00:19:09.630 --> 00:19:12.142
Like oh yeah, by the way, you
shouldn't do this in this way,

00:19:12.142 --> 00:19:14.475
because if you do it then--
that's obviously vulnerable.

00:19:20.660 --> 00:19:23.120
A blender is meant to
be safe against someone

00:19:23.120 --> 00:19:26.600
that has seen someone use it
once, and can continue use it

00:19:26.600 --> 00:19:29.140
without having to care
exactly about how it works.

00:19:29.140 --> 00:19:30.487
It knows what is dangerous.

00:19:30.487 --> 00:19:31.570
It knows there is a blade.

00:19:31.570 --> 00:19:33.180
You know not to put
your hands inside.

00:19:33.180 --> 00:19:34.900
And if you put
your hand inside, I

00:19:34.900 --> 00:19:36.390
looked into-- I looked online.

00:19:36.390 --> 00:19:39.190
Most people recover their hands.

00:19:39.190 --> 00:19:42.270
Anyway, we shouldn't go there.

00:19:42.270 --> 00:19:46.090
So maybe the right
thing to do is

00:19:46.090 --> 00:19:48.301
to let developers
do what they need,

00:19:48.301 --> 00:19:50.800
and then just fix these problems
in the framework ourselves.

00:19:50.800 --> 00:19:54.180
And I'm going to explain
very quickly what this means.

00:19:54.180 --> 00:19:58.642
So for example, for XSS, if a
user has a template like this,

00:19:58.642 --> 00:20:01.440
and user_id is a
string, then it needs

00:20:01.440 --> 00:20:03.400
to be URL sanitized
first, then URL escaped,

00:20:03.400 --> 00:20:04.890
and then HTML escaped.

00:20:04.890 --> 00:20:06.090
That's obviously right.

00:20:06.090 --> 00:20:08.474
That's always right.

00:20:08.474 --> 00:20:09.640
The framework can know this.

00:20:09.640 --> 00:20:11.890
The framework
knows that the user

00:20:11.890 --> 00:20:14.780
is about to write something
into that specific place.

00:20:14.780 --> 00:20:17.850
It knows that this one only
requires HTML escaping.

00:20:17.850 --> 00:20:19.940
It knows what escaping,
what order, in what case.

00:20:19.940 --> 00:20:21.052
The framework knows.

00:20:21.052 --> 00:20:22.090
It knows the context.

00:20:22.090 --> 00:20:23.570
It knows HTML.

00:20:23.570 --> 00:20:26.980
So it can just do it, right?

00:20:26.980 --> 00:20:30.260
In this case, in name string,
it requires HTML escaping.

00:20:30.260 --> 00:20:32.640
But what if name is
allowed to be HTML.

00:20:32.640 --> 00:20:33.940
How do you deal with that.?

00:20:33.940 --> 00:20:35.980
Well, then you can do
something like SafeHtml,

00:20:35.980 --> 00:20:38.180
a new type that is
not just a string.

00:20:38.180 --> 00:20:40.440
It's a string that has a
special meaning and that

00:20:40.440 --> 00:20:44.389
is special for allowing
itself to be rendered as HTML.

00:20:44.389 --> 00:20:45.930
And the framework
can recognize that,

00:20:45.930 --> 00:20:47.660
oh this is not the SafeHtml.

00:20:47.660 --> 00:20:49.880
Let's render it the SafeHtml
right on the string.

00:20:49.880 --> 00:20:51.105
The framework knows that.

00:20:51.105 --> 00:20:52.480
And the developer
that is writing

00:20:52.480 --> 00:20:56.710
code that is putting this code
that it is, OK, this is HTML

00:20:56.710 --> 00:20:58.170
will be safe.

00:20:58.170 --> 00:21:01.240
Worst case scenario, you might
end up not escaping something,

00:21:01.240 --> 00:21:04.012
but then you're going to note is
that does not escape correctly.

00:21:04.012 --> 00:21:04.970
You're going to fix it.

00:21:04.970 --> 00:21:08.800
You're not going to
cause security bug.

00:21:08.800 --> 00:21:10.840
This gets a little
bit more complicated.

00:21:10.840 --> 00:21:12.720
So Google Analytics,
for example,

00:21:12.720 --> 00:21:15.220
gives you a script tag that you
have to put in your website.

00:21:15.220 --> 00:21:17.450
So this is very similar to
what I mentioned before.

00:21:17.450 --> 00:21:22.090
So if you have to put a
specific type of script up,

00:21:22.090 --> 00:21:26.210
then the templating system can
detect that [INAUDIBLE] HTML

00:21:26.210 --> 00:21:29.010
[INAUDIBLE], and then is
going to inject it like that.

00:21:29.010 --> 00:21:30.551
And then the developer
doesn't really

00:21:30.551 --> 00:21:31.930
have to think about, right?

00:21:31.930 --> 00:21:34.600
They just have to
mark the things that

00:21:34.600 --> 00:21:36.050
are meant to be HTML as HTML.

00:21:36.050 --> 00:21:37.466
And if they are
not HTML, they are

00:21:37.466 --> 00:21:41.980
going to be rendered
safely, so it works.

00:21:41.980 --> 00:21:44.980
So you can store the HTML
as safe in databases.

00:21:44.980 --> 00:21:47.790
You can do whatever you want.

00:21:47.790 --> 00:21:50.709
You can make sure that your
apps are in XSS by default.

00:21:50.709 --> 00:21:52.500
And this works for
client side applications

00:21:52.500 --> 00:21:54.740
or for server side applications.

00:21:54.740 --> 00:21:56.660
Another example is
authorization checks.

00:21:56.660 --> 00:22:02.266
So you have four different
end points, web end points.

00:22:02.266 --> 00:22:03.640
And you want these
web end points

00:22:03.640 --> 00:22:06.350
to all have
authorization checks.

00:22:06.350 --> 00:22:09.120
And what you have to
do usually, not always,

00:22:09.120 --> 00:22:10.580
but you usually
have to do is you

00:22:10.580 --> 00:22:12.270
have to put different
authorization

00:22:12.270 --> 00:22:13.860
checks in different places.

00:22:13.860 --> 00:22:15.380
So where should you put it?

00:22:15.380 --> 00:22:17.051
Should you put it in here?

00:22:17.051 --> 00:22:17.550
Or here?

00:22:17.550 --> 00:22:17.850
Here?

00:22:17.850 --> 00:22:18.475
In all of them?

00:22:18.475 --> 00:22:20.121
Or in the top four?

00:22:20.121 --> 00:22:22.370
I think the answer is pretty
obvious that you probably

00:22:22.370 --> 00:22:24.840
want to put it as close
as possible to the data.

00:22:24.840 --> 00:22:27.020
This is called usually row
level security, row level

00:22:27.020 --> 00:22:28.050
authorization.

00:22:28.050 --> 00:22:30.770
And if you put it this
way, it's more likely--

00:22:30.770 --> 00:22:33.830
it's only one place that
you have to do the security,

00:22:33.830 --> 00:22:36.640
that you have to program
any security output checks.

00:22:36.640 --> 00:22:39.910
And if you do it right only
once, then you are safe.

00:22:39.910 --> 00:22:42.380
If you do it wrong in
any of these four places,

00:22:42.380 --> 00:22:44.651
then you are not safe.

00:22:44.651 --> 00:22:47.175
These are things framework
can help you with.

00:22:47.175 --> 00:22:47.800
Authentication.

00:22:47.800 --> 00:22:49.591
There are two ways of
doing authentication.

00:22:49.591 --> 00:22:51.680
Verify their identity--
if you trust your users

00:22:51.680 --> 00:22:53.930
to have one of these
four accounts, or any

00:22:53.930 --> 00:22:57.170
of the other ones, using
OpenID Connect or whatever.

00:22:57.170 --> 00:22:58.970
Or you can do your own.

00:22:58.970 --> 00:23:01.090
Maybe the framework
should provide something

00:23:01.090 --> 00:23:03.590
to allow you to
do it by yourself.

00:23:03.590 --> 00:23:05.770
And they should be able to
manage all the questions

00:23:05.770 --> 00:23:07.620
that I asked before.

00:23:07.620 --> 00:23:09.650
Or if you don't want
to do it yourself,

00:23:09.650 --> 00:23:12.600
which is a reasonable thing
to do, do not do it yourself,

00:23:12.600 --> 00:23:15.450
then you can just trust
one of the [INAUDIBLE]

00:23:15.450 --> 00:23:18.150
providers to do it for you.

00:23:18.150 --> 00:23:21.816
Libraries is the last one,
and I think it's interesting.

00:23:21.816 --> 00:23:23.190
So if you have a
service that you

00:23:23.190 --> 00:23:25.619
trust it to take a
screenshot of a website,

00:23:25.619 --> 00:23:28.160
the only thing you want it to
do is to go take a screen shot,

00:23:28.160 --> 00:23:29.900
and then give you the data log.

00:23:29.900 --> 00:23:33.540
However, whatever you allow
of third party library,

00:23:33.540 --> 00:23:35.790
it has this ambient authority
of access to everything.

00:23:35.790 --> 00:23:36.800
So it runs as you.

00:23:36.800 --> 00:23:38.570
It can [INAUDIBLE]
your source code.

00:23:38.570 --> 00:23:41.050
It can read your keys and
connect to your databases.

00:23:41.050 --> 00:23:42.770
It can do whatever it wants.

00:23:42.770 --> 00:23:45.730
If you sandbox it, then
the only thing it can do

00:23:45.730 --> 00:23:48.071
is connect through
HTTP to this service,

00:23:48.071 --> 00:23:50.570
get the data ratings back, run
the rates, take a screenshot,

00:23:50.570 --> 00:23:55.237
and then send you back the
screenshot as an image.

00:23:55.237 --> 00:23:56.945
Same thing for the
compression functions.

00:23:56.945 --> 00:23:59.300
For the compression
functions that need access

00:23:59.300 --> 00:24:01.900
to the internet, it just
needs access to one directory.

00:24:01.900 --> 00:24:03.420
It reads the directory.

00:24:03.420 --> 00:24:05.420
It reads the compressed file.

00:24:05.420 --> 00:24:09.070
It outputs [INAUDIBLE] and
then gives it back to you.

00:24:09.070 --> 00:24:11.680
You can even do this for
encryption and key management.

00:24:11.680 --> 00:24:12.510
You can OK.

00:24:12.510 --> 00:24:15.170
You have access to this-- the
only thing you have access

00:24:15.170 --> 00:24:18.710
is to this specific keystore.

00:24:18.710 --> 00:24:21.210
Whenever someone access the
keystore, it lifts a log,

00:24:21.210 --> 00:24:22.770
and then you can't
encrypt the data.

00:24:22.770 --> 00:24:26.074
If someone finds a lock
in any of these things,

00:24:26.074 --> 00:24:27.990
then they only get access
to one thing, right?

00:24:27.990 --> 00:24:30.630
Then only get access to take
more screenshots, whatever.

00:24:30.630 --> 00:24:34.900
They only get access to
decompressing more files.

00:24:34.900 --> 00:24:35.670
Decompress away.

00:24:44.560 --> 00:24:46.230
Bare with me for a second.

00:24:46.230 --> 00:24:48.620
That's a pun.

00:24:48.620 --> 00:24:53.650
So imagine that you
can write secure code.

00:24:53.650 --> 00:24:56.260
You can write secure
web applications

00:24:56.260 --> 00:24:59.440
without having to think
about security in general.

00:24:59.440 --> 00:25:03.918
That you trust your framework
to do everything for you.

00:25:03.918 --> 00:25:05.680
You might think that
I'm going crazy,

00:25:05.680 --> 00:25:08.921
because there's no framework
that does this for you.

00:25:08.921 --> 00:25:11.530
And you're kind of right.

00:25:11.530 --> 00:25:16.270
So what we're doing, and we
are doing it starting today,

00:25:16.270 --> 00:25:19.457
is that I want you by
the end of this talk,

00:25:19.457 --> 00:25:21.040
to think about the
last security block

00:25:21.040 --> 00:25:23.560
that you had to deal with.

00:25:23.560 --> 00:25:24.430
It might in XSS.

00:25:24.430 --> 00:25:25.195
It might be CSRF.

00:25:25.195 --> 00:25:26.810
It might be whatever.

00:25:26.810 --> 00:25:28.950
And I want you to send an
email to your framework

00:25:28.950 --> 00:25:31.980
to whoever, whatever
framework you use.

00:25:31.980 --> 00:25:35.670
And I want you to tell them
that they should fix it,

00:25:35.670 --> 00:25:38.440
that they are responsible
for fixing it.

00:25:38.440 --> 00:25:40.100
And if you want to
go one step ahead,

00:25:40.100 --> 00:25:42.250
you can actually write
the code that does it,

00:25:42.250 --> 00:25:43.500
and then send them the code.

00:25:43.500 --> 00:25:46.720
Or you probably want to discuss
with them first and figure out

00:25:46.720 --> 00:25:47.610
the right way.

00:25:47.610 --> 00:25:50.590
But they might tell you
they don't have bandwidth,

00:25:50.590 --> 00:25:52.600
or they might be an
open source project that

00:25:52.600 --> 00:25:54.095
runs on volunteers.

00:25:54.095 --> 00:25:56.476
In which case, you can
write a code for it.

00:25:56.476 --> 00:26:01.470
If you do that, then Google
will give a reward amount

00:26:01.470 --> 00:26:04.620
from $500 to $10,000.

00:26:04.620 --> 00:26:09.660
To you and/or their
framework maintainers

00:26:09.660 --> 00:26:11.810
if they helped you
push it to code.

00:26:11.810 --> 00:26:14.452
So we're announcing this for
a couple web applications.

00:26:14.452 --> 00:26:16.160
I don't remember the
name of all of them,

00:26:16.160 --> 00:26:17.730
so I have to write them don.

00:26:17.730 --> 00:26:20.530
So the ones are Angular,
Closure, and Dart, and GWT,

00:26:20.530 --> 00:26:22.090
and Go, which are from Google.

00:26:22.090 --> 00:26:23.270
And then Django.

00:26:23.270 --> 00:26:25.790
[INAUDIBLE] from
the Dojo Foundation,

00:26:25.790 --> 00:26:29.540
which are the [INAUDIBLE]
[INAUDIBLE], et cetera.

00:26:29.540 --> 00:26:32.520
Ember, Jinja, Werkzeug, and
Flask, JQuery, Knockout,

00:26:32.520 --> 00:26:34.290
Struts, and Wicket.

00:26:34.290 --> 00:26:36.600
And we're happy to add
more if you tell me

00:26:36.600 --> 00:26:37.810
which one I'm missing.

00:26:40.930 --> 00:26:42.940
Tell me, if you
want to learn more,

00:26:42.940 --> 00:26:45.472
just go
g.co/SecurityPatchRewards.

00:26:45.472 --> 00:26:47.138
And that will give
you more information.

00:26:47.138 --> 00:26:49.090
AUDIENCE: It will
have that list?

00:26:49.090 --> 00:26:51.131
EDUARDO VELA NAVA: It has
that list and way more.

00:26:51.131 --> 00:26:53.963
AUDIENCE: Terrific, because
I can't write that fast.

00:26:53.963 --> 00:26:55.992
And I won't remember it.

00:26:55.992 --> 00:26:56.492
Thank you.

00:26:56.492 --> 00:26:57.910
EDUARDO VELA NAVA: No problem.

00:26:57.910 --> 00:27:03.020
So if you do that, you will
be able to help yourself

00:27:03.020 --> 00:27:04.860
to write simple and secure code.

00:27:04.860 --> 00:27:07.210
You will be able to help
millions of fellow developers

00:27:07.210 --> 00:27:08.680
to write simple and secure code.

00:27:08.680 --> 00:27:10.054
And you will make
everyone happy,

00:27:10.054 --> 00:27:11.610
and you will make
yourself happy.

00:27:11.610 --> 00:27:13.720
And to finish this
presentation, I just

00:27:13.720 --> 00:27:15.340
want to say that it works.

00:27:15.340 --> 00:27:17.900
We did this for Google
in a couple cases.

00:27:17.900 --> 00:27:19.400
For several type
of vulnerabilities,

00:27:19.400 --> 00:27:21.060
for XSS for example.

00:27:21.060 --> 00:27:22.300
And it worked.

00:27:22.300 --> 00:27:26.020
Some of the products that
were in the top vulnerable

00:27:26.020 --> 00:27:28.060
went to [INAUDIBLE]
in a couple years

00:27:28.060 --> 00:27:30.600
once they finished
their migration.

00:27:30.600 --> 00:27:31.337
That's it.

00:27:31.337 --> 00:27:32.170
Thank you very much.

00:27:32.170 --> 00:27:35.220
[APPLAUSE]

