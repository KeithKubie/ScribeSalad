WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
All right. For our last big review question,

00:00:03.000 --> 00:00:06.000
Let's delve into Optimization, making programs faster.

00:00:06.000 --> 00:00:09.000
Remember that we can only apply an optimization--

00:00:09.000 --> 00:00:12.000
that is, we can only replace one subtree of a program with another--

00:00:12.000 --> 00:00:17.000
if we don't change the semantics, the meaning, the answer of the program.

00:00:17.000 --> 00:00:20.000
Here's another way to look at the challenge of optimization.

00:00:20.000 --> 00:00:25.000
What we really want to know for optimization is given two functions, F and G,

00:00:25.000 --> 00:00:28.000
do they both compute the same answer for all inputs.

00:00:28.000 --> 00:00:32.000
This may seem a little abstract, but let me firm it up with a concrete example.

00:00:32.000 --> 00:00:39.000
It might be that F is the original program, and G is the candidate optimized program.

00:00:39.000 --> 00:00:42.000
If they compute the same answer on all inputs a,

00:00:42.000 --> 00:00:46.000
then we can replace F with G wherever it occurs.

00:00:46.000 --> 00:00:51.000
We can imagine framing this as some hypothetical procedure--optimization okay.

00:00:51.000 --> 00:00:57.000
You just pass it in F and G and if F(a) = G(a) for all a, then you return True.

00:00:57.000 --> 00:00:59.000
Otherwise you return False.

00:00:59.000 --> 00:01:03.000
Now, this is clearly sketchy code. We sometimes call this psuedocode,

00:01:03.000 --> 00:01:09.000
because it wouldn't actually work in Python, but you can imagine what would go there.

00:01:09.000 --> 00:01:11.000
Somehow we're going to try this out--maybe we'll look at their source code.

00:01:11.000 --> 00:01:14.000
We apply these rules that we did previously.

00:01:14.000 --> 00:01:16.000
Maybe we test it out on a bunch of inputs.

00:01:16.000 --> 00:01:20.000
Somehow we come to the conclusion that F(a) is always equal to G(a).

00:01:20.000 --> 00:01:23.000
If so, we return True, and the optimization is okay.

00:01:23.000 --> 00:01:26.000
Otherwise, the optimization is not safe, so we don't apply it.

00:01:26.000 --> 00:01:31.000
Just to give one more concrete example, we expect optimization okay of F and G

00:01:31.000 --> 00:01:38.000
to return True, but optimization okay of X and Y down here where X is a/a and Y is 1.

00:01:38.000 --> 00:01:45.000
This should return False because remember if a equals 0 then this one is division by 0 exception,

00:01:45.000 --> 00:01:47.000
and this one is 1, and those aren't the same thing.

00:01:47.000 --> 00:01:49.000
All right. So here is the actual quiz.

00:01:49.000 --> 00:01:55.000
I've written four statements, four claims, that refer to that optimization okay phrasing

00:01:55.000 --> 00:01:57.000
or procedure from before.

00:01:57.000 --> 00:01:59.000
It's kind of like a specification.

00:01:59.000 --> 00:02:03.000
Here they are. We can implement optimization okay so that it returns a safe answer

00:02:03.000 --> 00:02:08.000
for optimization in all cases, for all possible programs.

00:02:08.000 --> 00:02:14.000
We cannot implement optimization okay that works precisely in all cases.

00:02:14.000 --> 00:02:17.000
It is undecidable like the Halting Problem.

00:02:17.000 --> 00:02:22.000
We cannot implement an optimization okay that works precisely for any case.

00:02:22.000 --> 00:02:24.000
It is undecidable like the Halting Problem.

00:02:24.000 --> 00:02:29.000
Then down here optimization of george f will and betty frieden implies

00:02:29.000 --> 09:59:59.000
optimization okay of betty frieden and george f will. Check all that are true.

