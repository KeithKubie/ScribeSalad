WEBVTT
Kind: captions
Language: en

00:00:05.090 --> 00:00:08.630
 Many apps use audio to create fantastic experiences 

00:00:08.630 --> 00:00:11.710
 Whether it's a disc, karaoke or music game 

00:00:11.710 --> 00:00:16.280
 Audio is a powerful tool for expression, entertainment and creativity 

00:00:16.280 --> 00:00:21.280
 Today I will show you the oboe program, a new C++ music library. 

00:00:21.280 --> 00:00:23.320
 How to simply create on Android 

00:00:23.320 --> 00:00:26.530
 A fun, interactive audio experience. 

00:00:26.530 --> 00:00:30.340
 But first, what do we mean by interactive audio? 

00:00:30.340 --> 00:00:31.610
 Imagine this is the keyboard 

00:00:31.610 --> 00:00:36.790
 When I press a button, I will immediately send a sound file. 

00:00:36.790 --> 00:00:39.700
 This makes people feel that the keyboard response is very agile. 

00:00:39.700 --> 00:00:42.360
 Because I will get a voice feedback right away. 

00:00:42.360 --> 00:00:44.320
 This is why playing an instrument 

00:00:44.320 --> 00:00:46.450
 Is such a pleasant experience 

00:00:46.450 --> 00:00:49.980
 But imagine, after knocking a key, 

00:00:49.980 --> 00:00:51.930
 I have to wait a moment to hear the sound. 

00:00:51.930 --> 00:00:53.910
 Such hysteresis or delay 

00:00:53.910 --> 00:00:56.970
 Will make playing the keyboard very difficult and frustrating 

00:00:56.970 --> 00:00:59.380
 Again, this also applies to apps and games. 

00:00:59.380 --> 00:01:02.910
 Whether it's an app for rhythm games, karaoke, discs and scratches 

00:01:02.910 --> 00:01:06.870
 Or virtual reality, synthesizer, drum machine, 

00:01:06.870 --> 00:01:09.030
 And other virtual instruments 

00:01:09.030 --> 00:01:12.030
 These applications share common requirements 

00:01:12.030 --> 00:01:14.970
 They need low latency audio 

00:01:14.970 --> 00:01:16.300
 To provide a great user experience 

00:01:16.300 --> 00:01:18.240
 These are all that the oboe program can do. 

00:01:18.240 --> 00:01:21.990
 This is a C++ repository that makes it available on specific Android devices. 

00:01:21.990 --> 00:01:26.190
 Easier to get the lowest latency audio 

00:01:26.190 --> 00:01:28.530
 Working in API version 16 and above 

00:01:28.530 --> 00:01:32.760
 This means it is compatible with 99% of Android devices. 

00:01:32.760 --> 00:01:36.630
 Under this range, cores with AAudio or API version 27 and above 

00:01:36.630 --> 00:01:40.590
 Going back to OpenSL ES at all API levels will work 

00:01:40.590 --> 00:01:44.040
 In this way, the oboe program provides a single, easy-to-use API. 

00:01:44.040 --> 00:01:46.230
 This takes advantage of the new features 

00:01:46.230 --> 00:01:48.420
 And let AAudio perform better. 

00:01:48.420 --> 00:01:52.620
 It also provides all backup compatibility for the device. 

00:01:52.740 --> 00:01:54.870
 Start using the oboe program, all you have to do is 

00:01:54.870 --> 00:01:56.730
 Clone a repository from GitHub 

00:01:56.730 --> 00:01:59.910
 This will copy the database to your local machine 

00:01:59.910 --> 00:02:03.510
 The oboe program is designed to create CMake subprojects 

00:02:03.510 --> 00:02:07.630
 In order to create it, you must update your CMake surface configuration 

00:02:07.800 --> 00:02:10.110
 If you don't have an existing CMake configuration 

00:02:10.110 --> 00:02:12.060
 You must pass the link below 

00:02:12.060 --> 00:02:14.340
 Add C++ support to your app 

00:02:14.340 --> 00:02:17.520
 First, tell your project where the source code of the oboe program is. 

00:02:17.520 --> 00:02:20.670
 There should be a path to the repository you have cloned. 

00:02:20.670 --> 00:02:23.230
 Next, add this path as a subdirectory 

00:02:23.230 --> 00:02:25.450
 And add a public title 

00:02:25.450 --> 00:02:28.570
 Finally, add the oboe program as a dependent library. 

00:02:28.570 --> 00:02:32.220
 Let the Android studio index the database and enter the creation 

00:02:32.220 --> 00:02:35.250
 Refresh link to C++ project 

00:02:35.250 --> 00:02:37.390
 Now that you are done, you can join the oboe heading 

00:02:37.400 --> 00:02:40.590
 Objects using the oboe program are in your code 

00:02:40.590 --> 00:02:42.900
 All objects are in the namespace of the oboe program 

00:02:42.900 --> 00:02:44.850
 So they won't and any other 

00:02:44.850 --> 00:02:46.420
 The namespace you might use conflicts 

00:02:46.420 --> 00:02:48.900
 Now you are ready to use the oboe API 

00:02:48.900 --> 00:02:51.840
 View the getting started guide, code example 

00:02:51.840 --> 00:02:54.180
 All code labs are available on the GitHub website below 

00:02:54.180 --> 00:02:55.470
 Found on the link 

00:02:55.470 --> 00:02:57.070
 If you have any problems or problems 

00:02:57.070 --> 00:02:59.486
 Please post the issue in the problem area on our GitHub website 

00:02:59.486 --> 00:03:01.900
 We will do our best to help you 

00:03:01.900 --> 00:03:03.600
 You can learn more about the oboe program. 

00:03:03.600 --> 00:03:05.730
 Including how to create low-latency audio streams 

00:03:05.730 --> 00:03:07.780
 And high priority audio response 

00:03:07.780 --> 00:03:10.890
 Create sound with the oboe program in the next video in this series 

00:03:10.890 --> 00:03:12.350
 Come here today. 

00:03:12.350 --> 00:03:14.085
 Good luck, let's get some sound out. 

