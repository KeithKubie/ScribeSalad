WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.808
[MUSIC PLAYING]

00:00:06.502 --> 00:00:08.710
TIM SNEATH: We're going to
take the next little while

00:00:08.710 --> 00:00:12.400
to talk through four
core areas of Flutter,

00:00:12.400 --> 00:00:15.100
starting with designing
stunning apps with Flutter.

00:00:15.100 --> 00:00:18.147
Then we're going to talk
about developing Flutter apps.

00:00:18.147 --> 00:00:20.230
Then, we're going to talk
about connecting Flutter

00:00:20.230 --> 00:00:21.637
to online services.

00:00:21.637 --> 00:00:24.220
And lastly, we're going to talk
about the process of releasing

00:00:24.220 --> 00:00:26.090
apps.

00:00:26.090 --> 00:00:28.550
So let's start with design.

00:00:28.550 --> 00:00:30.470
And to start this
section off, I'm

00:00:30.470 --> 00:00:34.481
joined by Will Larche, who's an
engineer on the Material Design

00:00:34.481 --> 00:00:34.980
team.

00:00:34.980 --> 00:00:36.260
Will, great to see you.

00:00:36.260 --> 00:00:38.132
[APPLAUSE]

00:00:38.132 --> 00:00:41.410
WILL LARCHE: Thanks, Tim.

00:00:41.410 --> 00:00:43.860
I'm so excited to
tell you today why

00:00:43.860 --> 00:00:47.910
I believe that Flutter is the
perfect platform for executing

00:00:47.910 --> 00:00:50.370
pixel-perfect designs.

00:00:50.370 --> 00:00:53.070
But first, let's
take a step back.

00:00:53.070 --> 00:00:56.890
Right now, good
design is expensive,

00:00:56.890 --> 00:00:58.020
especially on mobile.

00:00:58.020 --> 00:01:01.400
It takes extra engineering
resources to execute,

00:01:01.400 --> 00:01:05.190
and what you get is
rarely what you want.

00:01:05.190 --> 00:01:08.350
The designer hands us something
detailed and beautiful.

00:01:08.350 --> 00:01:11.310
But we push back on
what makes it special.

00:01:11.310 --> 00:01:12.540
Branded menu button?

00:01:12.540 --> 00:01:14.610
It's easier to use a stock icon.

00:01:14.610 --> 00:01:15.960
Custom map bar?

00:01:15.960 --> 00:01:17.940
We could, but it's complex.

00:01:17.940 --> 00:01:19.320
Custom tabs?

00:01:19.320 --> 00:01:21.660
We ran out of time.

00:01:21.660 --> 00:01:23.850
We end up compromising
on the details that

00:01:23.850 --> 00:01:27.690
make our experience excellent,
and end up shipping something

00:01:27.690 --> 00:01:31.650
that's just good enough, that
has the major features we

00:01:31.650 --> 00:01:35.080
need but none of the finesse.

00:01:35.080 --> 00:01:38.260
So with the best of intentions,
we say we'll get to it later.

00:01:38.260 --> 00:01:41.350
But let's be honest,
later never comes.

00:01:41.350 --> 00:01:43.900
The tickets sit in our
backlog, and we never

00:01:43.900 --> 00:01:47.650
delete them because that
would be admitting defeat.

00:01:47.650 --> 00:01:50.560
But what gets me so
excited about Flutter

00:01:50.560 --> 00:01:52.720
is that we can break that cycle.

00:01:52.720 --> 00:01:58.210
We can ship the app we really
want, with detail and polish,

00:01:58.210 --> 00:02:02.390
and fewer of those
painful compromises.

00:02:02.390 --> 00:02:04.610
Flutter's architecture
is designed

00:02:04.610 --> 00:02:07.820
for building
beautiful, custom UI.

00:02:07.820 --> 00:02:10.130
Flutter's main goal is to
make building polished,

00:02:10.130 --> 00:02:14.390
custom app interfaces a faster,
more delightful experience

00:02:14.390 --> 00:02:17.540
for designers and developers.

00:02:17.540 --> 00:02:20.030
Firstly, Flutter
is powerful enough

00:02:20.030 --> 00:02:23.420
to draw anything
designers dream up.

00:02:23.420 --> 00:02:26.540
It's built on Skia, the
open-source graphics

00:02:26.540 --> 00:02:32.790
engine used by Adobe,
Chrome, and Amazon Kindle.

00:02:32.790 --> 00:02:35.700
We can get print-quality,
custom typography

00:02:35.700 --> 00:02:38.280
without needing to dive down
to low-level frameworks,

00:02:38.280 --> 00:02:40.530
like Core Text.

00:02:40.530 --> 00:02:43.650
There's easy-to-access APIs
for character spacing and word

00:02:43.650 --> 00:02:45.750
spacing.

00:02:45.750 --> 00:02:48.000
Its animation and
motion framework

00:02:48.000 --> 00:02:49.830
is more finely
tunable than anything

00:02:49.830 --> 00:02:53.730
I've ever seen on mobile.

00:02:53.730 --> 00:02:55.970
We've looked closely
at what developers

00:02:55.970 --> 00:02:58.310
need to execute
complex, high-fidelity

00:02:58.310 --> 00:03:02.450
designs on the devices of today,
and put it at their fingertips,

00:03:02.450 --> 00:03:05.090
instead of burying it in
obscure, hard-to-learn

00:03:05.090 --> 00:03:06.800
frameworks.

00:03:06.800 --> 00:03:09.950
And we've used these APIs
to make a component library

00:03:09.950 --> 00:03:14.180
expressing opinionated and
flexible design standards.

00:03:14.180 --> 00:03:16.940
Material components for Flutter.

00:03:16.940 --> 00:03:20.210
These are reusable widgets
designed by the Material Design

00:03:20.210 --> 00:03:22.640
team here at Google.

00:03:22.640 --> 00:03:26.060
If you haven't heard, we
released a major expansion

00:03:26.060 --> 00:03:30.680
of Material, making the system
more flexible and expressive.

00:03:30.680 --> 00:03:33.320
And the Flutter team
has done a great job

00:03:33.320 --> 00:03:35.420
implementing the
Material components

00:03:35.420 --> 00:03:37.454
to our specifications.

00:03:37.454 --> 00:03:38.870
So we can get a
beautifully themed

00:03:38.870 --> 00:03:41.120
experience out of the box.

00:03:41.120 --> 00:03:44.750
On Flutter, Material
is beautiful.

00:03:44.750 --> 00:03:47.240
It's a platform powerful
enough to build anything

00:03:47.240 --> 00:03:50.210
our designers dream up.

00:03:50.210 --> 00:03:51.840
It's also extensible.

00:03:51.840 --> 00:03:54.500
We can extend the existing
Material components

00:03:54.500 --> 00:03:56.810
to support almost anything.

00:03:56.810 --> 00:04:01.530
And often, much more easily
than in traditional code.

00:04:01.530 --> 00:04:04.540
But maybe most impressively,
Material is fast.

00:04:04.540 --> 00:04:06.390
I actually built these
screens on the subway

00:04:06.390 --> 00:04:09.000
on my way to work in
about half an hour.

00:04:09.000 --> 00:04:12.840
The layout system in
Flutter is just that good.

00:04:12.840 --> 00:04:16.410
I believe Material Design is
the most expressive and flexible

00:04:16.410 --> 00:04:19.560
cross-platform design
system you could need.

00:04:19.560 --> 00:04:23.180
But Flutter's powerful enough
to implement any design system,

00:04:23.180 --> 00:04:26.040
so Material components
isn't the only library that

00:04:26.040 --> 00:04:27.960
comes with Flutter.

00:04:27.960 --> 00:04:31.470
You also get Cupertino,
a faithful implementation

00:04:31.470 --> 00:04:35.550
of Apple's iOS design language.

00:04:35.550 --> 00:04:38.880
Cupertino gives us
action sheets, alerts,

00:04:38.880 --> 00:04:43.260
segment controls, sliders,
nav bars, switches--

00:04:43.260 --> 00:04:46.140
over two dozen widgets
that look like they

00:04:46.140 --> 00:04:48.360
came right out of UI kit.

00:04:48.360 --> 00:04:51.450
But 100% open source.

00:04:51.450 --> 00:04:55.290
And coming from traditional
iOS, that's mind-blowing.

00:04:55.290 --> 00:04:57.870
If I have a question
about a text field,

00:04:57.870 --> 00:05:00.510
I can go look at
its source code.

00:05:00.510 --> 00:05:03.700
And you can't do that
with private APIs.

00:05:03.700 --> 00:05:06.000
[LAUGHTER]

00:05:06.000 --> 00:05:09.300
Cupertino even plays well with
Material components on iOS.

00:05:09.300 --> 00:05:13.920
So I automatically get iOS style
controls when I run a Material

00:05:13.920 --> 00:05:16.780
app on an iPhone.

00:05:16.780 --> 00:05:19.380
But it doesn't matter if
you're using a design system

00:05:19.380 --> 00:05:21.900
or a completely custom UI.

00:05:21.900 --> 00:05:25.680
Flutter's faster than
traditional mobile coding.

00:05:25.680 --> 00:05:29.010
In fact, we've seen
teams make up to 3x gains

00:05:29.010 --> 00:05:31.200
in velocity using Flutter.

00:05:31.200 --> 00:05:34.500
That could dramatically alter
what your team can accomplish.

00:05:34.500 --> 00:05:36.510
And we've already
seen some of you

00:05:36.510 --> 00:05:40.060
do amazing things with Flutter.

00:05:40.060 --> 00:05:42.670
This is Reflectly,
an award-winning app

00:05:42.670 --> 00:05:46.150
on iOS and Android, and
it's built with Flutter.

00:05:46.150 --> 00:05:48.820
I'd like to invite
designer/developer Jacob

00:05:48.820 --> 00:05:52.380
Kristensen, founder of
Reflectly, to join me on stage.

00:05:52.380 --> 00:05:53.232
Jacob?

00:05:53.232 --> 00:05:56.124
[APPLAUSE]

00:05:57.990 --> 00:05:59.740
JACOB KRISTENSEN: Thank
you so much, Will.

00:05:59.740 --> 00:06:01.010
So hello, everyone.

00:06:01.010 --> 00:06:01.870
My name is Jacob.

00:06:01.870 --> 00:06:04.450
I am a co-founder at
Reflectly, where I also

00:06:04.450 --> 00:06:08.600
head up UX/UI design, as well
as front end development.

00:06:08.600 --> 00:06:12.280
Now, Reflectly is what we call
a conversation-based journal.

00:06:12.280 --> 00:06:15.229
Now, what that means is that
everyday users open up the app

00:06:15.229 --> 00:06:17.020
and go through a series
of questions, which

00:06:17.020 --> 00:06:18.864
helps them log down their day.

00:06:18.864 --> 00:06:20.530
However, instead of
just presenting them

00:06:20.530 --> 00:06:22.990
with a blank screen and
they fill in some text,

00:06:22.990 --> 00:06:24.820
like you would in a
traditional journal, we

00:06:24.820 --> 00:06:27.760
prompt them with very specific
UI instructions, such as rating

00:06:27.760 --> 00:06:30.130
their day with little
a smiley face slider,

00:06:30.130 --> 00:06:32.650
or selecting a icon that
best represented, well,

00:06:32.650 --> 00:06:34.552
how their day went.

00:06:34.552 --> 00:06:36.260
Now, all of this is
then bundled together

00:06:36.260 --> 00:06:38.270
into what we call a Story.

00:06:38.270 --> 00:06:41.960
Now, users can then go
back in their journal

00:06:41.960 --> 00:06:44.150
and reread the story to
see what were they up to,

00:06:44.150 --> 00:06:46.344
and how did they actually feel.

00:06:46.344 --> 00:06:47.760
However, we can
also show them how

00:06:47.760 --> 00:06:49.860
they've been progressing
over time by giving them

00:06:49.860 --> 00:06:52.200
aggregated statistics.

00:06:52.200 --> 00:06:56.070
Now, all this makes Reflectly
understandable and easy to use.

00:06:56.070 --> 00:06:57.780
However, what's even
more important to

00:06:57.780 --> 00:07:01.170
us is we're seeing it bringing
immense value to our users.

00:07:01.170 --> 00:07:03.540
We're actually seeing users
become happier over time

00:07:03.540 --> 00:07:07.000
by using Reflectly, which
of course, is amazing.

00:07:07.000 --> 00:07:08.910
Now, Reflectly is
just around the corner

00:07:08.910 --> 00:07:12.340
from hitting that 1 million
user mark, globally, all of whom

00:07:12.340 --> 00:07:15.854
are able to use this amazing
app built entirely in Flutter.

00:07:15.854 --> 00:07:17.520
WILL LARCHE: That's
really great, Jacob.

00:07:17.520 --> 00:07:19.900
I want to ask you
a couple questions.

00:07:19.900 --> 00:07:21.240
Was this your first Flutter app?

00:07:21.240 --> 00:07:22.489
JACOB KRISTENSEN: Yes, it was.

00:07:22.489 --> 00:07:24.870
WILL LARCHE: And how many
engineers were working on it?

00:07:24.870 --> 00:07:26.869
JACOB KRISTENSEN: So just
me, for the front end.

00:07:26.869 --> 00:07:28.810
WILL LARCHE: And how
long did it take you?

00:07:28.810 --> 00:07:31.080
JACOB KRISTENSEN: So the
first line of Flutter

00:07:31.080 --> 00:07:33.192
was written in March, and
with a learning curve,

00:07:33.192 --> 00:07:35.150
we got this completed in
two and a half months.

00:07:35.150 --> 00:07:35.816
WILL LARCHE: OK.

00:07:35.816 --> 00:07:36.630
That's crazy.

00:07:36.630 --> 00:07:37.150
Wow.

00:07:37.150 --> 00:07:37.650
All right.

00:07:37.650 --> 00:07:38.460
Great job, Jacob.

00:07:38.460 --> 00:07:39.230
Thank you.

00:07:39.230 --> 00:07:40.120
Jacob Kristensen.

00:07:40.120 --> 00:07:43.775
[APPLAUSE]

00:07:46.250 --> 00:07:48.620
I really believe we
might be entering

00:07:48.620 --> 00:07:52.070
a new age, one in which
we don't tell designers

00:07:52.070 --> 00:07:55.460
that we're going to be getting
to something later, or soon.

00:07:55.460 --> 00:08:03.280
But now, Flutter makes executing
beautiful designs easy.

00:08:03.280 --> 00:08:05.650
And with that, I'd like to
turn things back over to Tim.

00:08:05.650 --> 00:08:06.436
Tim?

00:08:06.436 --> 00:08:10.324
[APPLAUSE]

00:08:13.250 --> 00:08:15.800
TIM SNEATH: So you've heard
how the architecture of Flutter

00:08:15.800 --> 00:08:18.470
makes it possible for
designers and developers

00:08:18.470 --> 00:08:22.100
to work together to
create beautiful UI.

00:08:22.100 --> 00:08:23.990
And again, this is where
Flutter stands out,

00:08:23.990 --> 00:08:27.500
as you saw with Philip's
demo in the Big History app.

00:08:27.500 --> 00:08:33.200
It's the composition of
text, video, graphics, and UI

00:08:33.200 --> 00:08:36.710
controls, whether from Flutter
or the underlying platform,

00:08:36.710 --> 00:08:40.460
applying animations
and transformations

00:08:40.460 --> 00:08:44.150
onto a single
hardware-accelerated surface

00:08:44.150 --> 00:08:47.610
that makes Flutter such
a powerful platform,

00:08:47.610 --> 00:08:51.470
and a powerful addition to
the tool kits of designers

00:08:51.470 --> 00:08:53.700
and developers.

00:08:53.700 --> 00:08:56.970
But while Flutter bridges
the gap to designers,

00:08:56.970 --> 00:09:00.300
we think there's an opportunity
to give creative professionals

00:09:00.300 --> 00:09:04.500
the same boost to productivity
that stateful hot reload gives

00:09:04.500 --> 00:09:06.660
to developers.

00:09:06.660 --> 00:09:09.840
And we've been working
with a company who've

00:09:09.840 --> 00:09:12.960
been investing in this
space for a little while,

00:09:12.960 --> 00:09:15.720
and they've got some
tools that I think

00:09:15.720 --> 00:09:17.070
you might be interested to see.

00:09:17.070 --> 00:09:20.976
So I want to invite
2Dimensions onto the stage.

00:09:20.976 --> 00:09:25.739
[APPLAUSE]

00:09:28.644 --> 00:09:29.810
GUIDO ROSSO: I'm a designer.

00:09:29.810 --> 00:09:32.000
And what I really
like about Flutter

00:09:32.000 --> 00:09:34.580
is how easy it makes
it for us to create

00:09:34.580 --> 00:09:36.470
beautiful applications.

00:09:36.470 --> 00:09:40.310
Now, as a designer, I
always have big plans

00:09:40.310 --> 00:09:41.960
for what I'm going to build.

00:09:41.960 --> 00:09:46.460
I love coming up with new
interactions, slick animations,

00:09:46.460 --> 00:09:48.440
epic lens flares--

00:09:48.440 --> 00:09:50.270
you name it.

00:09:50.270 --> 00:09:53.780
That said, once I've
got these concepts down,

00:09:53.780 --> 00:09:58.220
I then have to figure out how
I'm going to actually code

00:09:58.220 --> 00:10:00.530
all of this awesome stuff.

00:10:00.530 --> 00:10:02.900
And that's when I
think, how cool would it

00:10:02.900 --> 00:10:07.670
be if I had a twin that
could code it all for me?

00:10:07.670 --> 00:10:10.130
Well, I have good news.

00:10:10.130 --> 00:10:15.934
Today, we are launching
a clone program.

00:10:15.934 --> 00:10:19.862
[LAUGHTER]

00:10:22.820 --> 00:10:24.360
Just kidding.

00:10:24.360 --> 00:10:28.010
I am, indeed, lucky to have
a twin, and he's an engineer.

00:10:28.010 --> 00:10:29.930
This is Luigi, by the way.

00:10:29.930 --> 00:10:33.980
But thanks to our new
tool, and Flutter,

00:10:33.980 --> 00:10:36.380
you won't need a
complimentary twin like us.

00:10:43.162 --> 00:10:45.120
LUIGI ROSSO: We are
2Dimensions, and we're here

00:10:45.120 --> 00:10:47.250
today to tell you guys
about a new product we

00:10:47.250 --> 00:10:49.160
built called Flare.

00:10:49.160 --> 00:10:52.770
Flare is a vector design and
runtime animation tool that

00:10:52.770 --> 00:10:55.050
exports directly to Flutter.

00:10:55.050 --> 00:10:57.180
Guido and I built
Flare so that designers

00:10:57.180 --> 00:11:00.864
like ourselves and developers
can work in parallel.

00:11:00.864 --> 00:11:02.280
GUIDO ROSSO: If
you're a designer,

00:11:02.280 --> 00:11:04.140
the biggest
advantage to Flare is

00:11:04.140 --> 00:11:05.790
that you don't need
to work-- that you

00:11:05.790 --> 00:11:08.610
do get to work directly
on the assets that

00:11:08.610 --> 00:11:10.440
run in your final app.

00:11:10.440 --> 00:11:14.370
That means you don't need
to design in one app,

00:11:14.370 --> 00:11:18.760
animate in another app,
red line your mock-ups,

00:11:18.760 --> 00:11:22.800
write up a 100-page guide to
basically help your engineering

00:11:22.800 --> 00:11:26.220
team redo all the work
that you already did.

00:11:26.220 --> 00:11:28.620
Everything that
you design in Flare

00:11:28.620 --> 00:11:31.590
is exactly what runs in Flutter.

00:11:31.590 --> 00:11:33.570
Not only does this open
up your entire team

00:11:33.570 --> 00:11:35.670
to be able to quickly
iterate, but it also

00:11:35.670 --> 00:11:38.940
allows you to make great
design a part of your process

00:11:38.940 --> 00:11:41.370
from the very beginning
right up until the completion

00:11:41.370 --> 00:11:42.694
of your app.

00:11:42.694 --> 00:11:44.610
So we have a demo, and
we're going to show you

00:11:44.610 --> 00:11:46.037
how all of this works.

00:11:46.037 --> 00:11:48.120
LUIGI ROSSO: So what Guido's
going to pull up here

00:11:48.120 --> 00:11:51.570
is a Flutter list view
that's hooked up to a Flare

00:11:51.570 --> 00:11:53.850
pull-down refresh animation.

00:11:53.850 --> 00:11:56.330
Now, what you can see is, as
Guido pulls the list down,

00:11:56.330 --> 00:11:58.320
there's a zoom animation
that progresses

00:11:58.320 --> 00:12:00.130
with the movement of the list.

00:12:00.130 --> 00:12:01.860
And at the same time,
there are a couple

00:12:01.860 --> 00:12:04.020
different idle animations,
like the Earth spinning,

00:12:04.020 --> 00:12:06.540
the stars twinkling,
and some of the comets

00:12:06.540 --> 00:12:08.680
that are shooting by
that are blended on top.

00:12:08.680 --> 00:12:09.660
GUIDO ROSSO: And this
is done regardless

00:12:09.660 --> 00:12:11.070
of where Guido's
finger is placed,

00:12:11.070 --> 00:12:12.444
or where the list
view is placed.

00:12:12.444 --> 00:12:16.210
This is all animated
in different layers.

00:12:16.210 --> 00:12:19.140
So this would all be
pretty difficult to achieve

00:12:19.140 --> 00:12:22.380
with a video or
an image sequence.

00:12:22.380 --> 00:12:24.550
Instead, these are all
animations that I created.

00:12:24.550 --> 00:12:26.466
And I'm going to show
you a little bit of what

00:12:26.466 --> 00:12:28.865
the file looks like in Flare.

00:12:28.865 --> 00:12:30.690
So this is our space demo.

00:12:30.690 --> 00:12:33.840
And these are all the animations
I created for this app.

00:12:33.840 --> 00:12:35.790
There's this pull
animation, which

00:12:35.790 --> 00:12:37.950
Luigi has hooked up
to basically progress

00:12:37.950 --> 00:12:39.420
as you're pulling your finger.

00:12:39.420 --> 00:12:43.530
And as you can see, the earth
isn't actually rotating.

00:12:43.530 --> 00:12:45.270
The clouds and
continents aren't moving.

00:12:45.270 --> 00:12:47.520
And that's because there's
a separate animation called

00:12:47.520 --> 00:12:50.104
Idle here, and that's where
all that stuff is happening.

00:12:50.104 --> 00:12:52.020
Now, if I blend these
two animations together,

00:12:52.020 --> 00:12:55.050
you see that all that
stuff happens together.

00:12:55.050 --> 00:12:56.430
The other animations
we have here

00:12:56.430 --> 00:12:58.140
are just a simple
success state, which

00:12:58.140 --> 00:13:01.570
basically happens when the users
pull their finger far enough.

00:13:01.570 --> 00:13:05.100
It just lets the user know
something happened, success.

00:13:05.100 --> 00:13:08.160
And then it goes into this
loading indeterminate state,

00:13:08.160 --> 00:13:10.750
where it's basically waiting
for the loading to finish.

00:13:10.750 --> 00:13:11.280
That's it.

00:13:11.280 --> 00:13:13.290
That's all I created
in Flare, and Luigi

00:13:13.290 --> 00:13:14.819
hooked that all up to work.

00:13:14.819 --> 00:13:16.860
LUIGI ROSSO: So it only
takes a few lines of code

00:13:16.860 --> 00:13:18.810
to get this actually
running in Flutter.

00:13:18.810 --> 00:13:21.060
There are a bunch of widgets
that we provide that make

00:13:21.060 --> 00:13:22.210
it really easy to do this.

00:13:22.210 --> 00:13:25.200
And once this is done, Guido can
keep iterating on this design

00:13:25.200 --> 00:13:26.825
completely by himself.

00:13:26.825 --> 00:13:28.200
GUIDO ROSSO: That's
a good point.

00:13:28.200 --> 00:13:32.310
So going back to the
simulator here, now

00:13:32.310 --> 00:13:34.120
that I'm actually seeing
this running here,

00:13:34.120 --> 00:13:36.420
I kind of think that the
moon spinning actually

00:13:36.420 --> 00:13:37.950
looks sort of boring.

00:13:37.950 --> 00:13:40.630
I think we could do something
a little more exciting with it.

00:13:40.630 --> 00:13:42.450
And that's a good
opportunity to show you

00:13:42.450 --> 00:13:45.390
guys how easily I can
update that, and iterate

00:13:45.390 --> 00:13:47.820
on it, without taking
up any of Luigi's time.

00:13:47.820 --> 00:13:49.650
So I'm going to
switch over to Flare.

00:13:49.650 --> 00:13:52.170
And I'm in my loading
animation already.

00:13:52.170 --> 00:13:54.360
I'm going to grab the moon
orbit key frames here,

00:13:54.360 --> 00:13:55.750
and just hit Delete.

00:13:55.750 --> 00:14:00.240
Now, what I actually want to do
is have the moon kind of move

00:14:00.240 --> 00:14:01.250
from a side view.

00:14:01.250 --> 00:14:03.780
I want it to move like this.

00:14:03.780 --> 00:14:05.870
So I'm going to set a
key frame at the start

00:14:05.870 --> 00:14:07.452
here for the position.

00:14:07.452 --> 00:14:09.410
I'm going to set the same
key frame at the end.

00:14:12.200 --> 00:14:14.090
And then, right about
in the middle here,

00:14:14.090 --> 00:14:17.930
I'm going to put negative
60 to inverse it.

00:14:17.930 --> 00:14:20.270
So now we've got the movement.

00:14:20.270 --> 00:14:22.550
I'm going to add just
some easing to it.

00:14:22.550 --> 00:14:24.140
And I want this to
be kind of playful,

00:14:24.140 --> 00:14:26.720
so I'm going to go for a
bit of an exaggerated curve.

00:14:26.720 --> 00:14:29.150
I already set up the draw
order so that it switches,

00:14:29.150 --> 00:14:31.457
and you can see that we've
got our new orbit here.

00:14:31.457 --> 00:14:33.790
Now, I'm going to do just one
last thing to really solve

00:14:33.790 --> 00:14:37.220
this animation, and that's to
add just a little bit of scale

00:14:37.220 --> 00:14:38.960
to make this look cartoony.

00:14:38.960 --> 00:14:41.720
So I'm going to add
two key frames first

00:14:41.720 --> 00:14:44.750
for our normal scale, and
then right about here,

00:14:44.750 --> 00:14:47.030
where the moon is passing
in front of the earth,

00:14:47.030 --> 00:14:49.160
I'm going to double our x.

00:14:49.160 --> 00:14:51.260
And you'll see that this
creates just a little bit

00:14:51.260 --> 00:14:52.310
of playfulness.

00:14:52.310 --> 00:14:53.540
All right.

00:14:53.540 --> 00:14:55.310
I think that's good
enough for now.

00:14:55.310 --> 00:14:57.320
Let's see how I get
this back into Flutter.

00:14:57.320 --> 00:15:02.790
Going to hit Export,
switch over to our assets,

00:15:02.790 --> 00:15:06.180
and just drag-and-drop our
new asset over the old one.

00:15:06.180 --> 00:15:07.930
Hit Replace.

00:15:07.930 --> 00:15:10.270
And then I switch
over to VS code,

00:15:10.270 --> 00:15:14.466
do a hot restart because we
need to reload our asset,

00:15:14.466 --> 00:15:16.340
and we've got my new
moon animation in there.

00:15:16.340 --> 00:15:20.150
[APPLAUSE]

00:15:23.610 --> 00:15:25.740
I was able to do all of
that without taking up

00:15:25.740 --> 00:15:28.110
any of Luigi's time, and I
can keep iterating on this

00:15:28.110 --> 00:15:29.430
as long as I want.

00:15:29.430 --> 00:15:30.930
LUIGI ROSSO: So
Flare is really good

00:15:30.930 --> 00:15:33.960
that UI components, as well
as graphical animations,

00:15:33.960 --> 00:15:35.940
like you just saw.

00:15:35.940 --> 00:15:38.280
This is an expand-collapse
toggle animation

00:15:38.280 --> 00:15:40.840
that Guido built for the
History of Everything app.

00:15:40.840 --> 00:15:43.530
This is a broken heart that
shows up in the Favorites list

00:15:43.530 --> 00:15:45.150
when it's empty.

00:15:45.150 --> 00:15:48.750
But where Flare really shines
is at building complex animation

00:15:48.750 --> 00:15:50.850
systems that are
really easy to control.

00:15:50.850 --> 00:15:53.610
We have full support for
bones, constraints, and inverse

00:15:53.610 --> 00:15:54.504
kinematics.

00:15:54.504 --> 00:15:55.920
One of the animations
you may have

00:15:55.920 --> 00:15:57.294
seen in the History
of Everything

00:15:57.294 --> 00:15:58.650
is this Amelia Earhart.

00:15:58.650 --> 00:16:01.350
She is controlled by
one set of constraints

00:16:01.350 --> 00:16:04.620
that allow moving her eyes, her
nose, her mouth, and her face

00:16:04.620 --> 00:16:07.080
without animating all of
those properties individually.

00:16:07.080 --> 00:16:09.570
Instead, an animator can
really quickly key frame

00:16:09.570 --> 00:16:12.601
just one node, or have
a developer control it

00:16:12.601 --> 00:16:14.850
in Flutter, and have all
these constraints work there,

00:16:14.850 --> 00:16:16.080
as well.

00:16:16.080 --> 00:16:19.767
In this other example,
Guido can move the hip bone

00:16:19.767 --> 00:16:22.350
for this character, and you can
see that her feet and her legs

00:16:22.350 --> 00:16:24.840
bend and move in the correct
direction, as you'd expect,

00:16:24.840 --> 00:16:28.190
and that's thanks to the inverse
kinematics that we support.

00:16:28.190 --> 00:16:31.030
GUIDO ROSSO: So as
you can see, Flare

00:16:31.030 --> 00:16:33.950
removes the churn between
design and development,

00:16:33.950 --> 00:16:37.360
and it really allows you to make
great design a fundamental part

00:16:37.360 --> 00:16:38.830
of your process.

00:16:38.830 --> 00:16:42.910
I'm really excited to announce
that Flare is launching today

00:16:42.910 --> 00:16:46.218
on 2Dimensions.com,
and it's free.

00:16:46.218 --> 00:16:50.122
[APPLAUSE]

00:16:56.292 --> 00:16:57.750
LUIGI ROSSO: If
you're a developer,

00:16:57.750 --> 00:17:00.290
you'll be able to find a bunch
of assets on 2Dimensions.com

00:17:00.290 --> 00:17:02.210
that other designers
have already shared

00:17:02.210 --> 00:17:03.650
and made available on there.

00:17:03.650 --> 00:17:06.290
In fact, all of the assets for
the History of Everything app

00:17:06.290 --> 00:17:09.119
are available for free
on 2Dimensions.com.

00:17:09.119 --> 00:17:10.819
We're really, really
excited to see

00:17:10.819 --> 00:17:13.250
that Flutter is going
1.0 today, and we

00:17:13.250 --> 00:17:15.890
can't wait to see how
you'll use Flare with it.

00:17:15.890 --> 00:17:16.714
Thank you.

00:17:16.714 --> 00:17:20.666
[APPLAUSE]

00:17:22.650 --> 00:17:23.520
TIM SNEATH: Wow.

00:17:23.520 --> 00:17:24.240
Thanks, Luigi.

00:17:24.240 --> 00:17:25.470
Thanks, Guido.

00:17:25.470 --> 00:17:27.450
So that is Flare.

00:17:27.450 --> 00:17:31.870
Flare bridges the gap between
designers and developers.

00:17:31.870 --> 00:17:35.460
Designers are, at last,
able to fully participate,

00:17:35.460 --> 00:17:38.940
from beginning to end, in
the development of an app,

00:17:38.940 --> 00:17:42.510
creating interactive content
that can evolve along

00:17:42.510 --> 00:17:44.130
with the rest of the app.

00:17:44.130 --> 00:17:48.380
[MUSIC PLAYING]

