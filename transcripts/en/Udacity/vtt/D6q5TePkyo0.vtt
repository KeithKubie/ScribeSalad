WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:02.980
Now we're actually going to use these templates. First thing

00:00:02.980 --> 00:00:06.870
we're going to learn is, variable substitution. The syntax for in,

00:00:06.870 --> 00:00:10.620
substituting a variable in Jinja is just double curly braces,

00:00:10.620 --> 00:00:13.150
and then you include your variable name, and then you

00:00:13.150 --> 00:00:17.234
close your curly braces. Pretty simple, right? Basically these curly

00:00:17.234 --> 00:00:19.880
braces, it just means print. It's as if you typed

00:00:19.880 --> 00:00:22.780
the print statement. In the middle of your HTML code.

00:00:22.780 --> 00:00:26.030
So let's see what that looks like in practice. Okay,

00:00:26.030 --> 00:00:30.380
I'm going to go into my shopping list HTML file. And add,

00:00:30.380 --> 00:00:32.070
I'm just going to add a string right to the bottom of

00:00:32.070 --> 00:00:35.070
the file. Okay. So I just said hello, and then I

00:00:35.070 --> 00:00:39.120
added in a curly, curly name. Now, where is name defined? It

00:00:39.120 --> 00:00:41.940
does not define anywhere yet. Let's see what happens when I

00:00:41.940 --> 00:00:45.540
reload this page with just this. Here I am in a

00:00:45.540 --> 00:00:48.270
browser. Let's reload this page. And it says hello, and there's

00:00:48.270 --> 00:00:51.080
nothing there. Actually we can get rid of this egg. That's a

00:00:51.080 --> 00:00:53.958
little leftover. So Jinja, if the variable's not

00:00:53.958 --> 00:00:57.690
defined, just quietly doesn't include it. Now let's

00:00:57.690 --> 00:00:59.970
go ahead and include name. let's just kind of

00:00:59.970 --> 00:01:04.800
hacked this in real quick. Name equals Steve. Okay,

00:01:04.800 --> 00:01:06.770
so, remember before I was talking about this

00:01:06.770 --> 00:01:09.960
star, star syntax. Name equals Steve basically gets

00:01:09.960 --> 00:01:13.060
passed in as star, star kw, which gets

00:01:13.060 --> 00:01:16.262
passed along here. Which gets received by render string

00:01:16.262 --> 00:01:19.320
as star, star params. Just different variable names, to

00:01:19.320 --> 00:01:22.700
be deliberately confusing for some reason, and which gets passed

00:01:22.700 --> 00:01:26.860
into the render function from Jinja, which expects keyword parameters.

00:01:26.860 --> 00:01:30.350
So, it's going to define name equals Steve, and if we

00:01:30.350 --> 00:01:32.992
go to our browser and reload this. We see, it

00:01:32.992 --> 00:01:35.470
says hello Steve. Let's see if we can make this

00:01:35.470 --> 00:01:38.005
a little bit fancier. What is instead of name equals

00:01:38.005 --> 00:01:41.710
Steve all the time, we said name equals self.request.get name.

00:01:41.710 --> 00:01:43.390
So we can put name as a, as a parameter.

00:01:43.390 --> 00:01:46.660
Let's see if that works. Okay, if I reload this

00:01:46.660 --> 00:01:49.525
page, I get nothing, because there is no parameter. But

00:01:49.525 --> 00:01:52.670
if I add name equals udacity, we can see that

00:01:52.670 --> 00:01:57.320
udacity appears in our template. Okay, so, right now we

00:01:57.320 --> 00:02:01.040
basically have this very elaborate way of doing string substitution

00:02:01.040 --> 00:02:03.470
via these files, but we can, we can always see

00:02:03.470 --> 00:02:06.240
we're somewhat on the right direction of having cleaner code.

00:02:07.360 --> 00:02:11.660
And, time for our quick quiz, okay, so what I want you to do, is use

00:02:11.660 --> 00:02:14.290
variable substitution, the syntax I just showed you,

00:02:14.290 --> 00:02:17.210
to make this string. The quick brown and

00:02:17.210 --> 00:02:20.130
then the variable, animal1, jumped over the lazy,

00:02:20.130 --> 00:02:22.820
and then the variable, animal2. Go ahead and

00:02:22.820 --> 00:02:25.390
type this complete string with the correct variable

00:02:25.390 --> 00:02:27.730
substitutions for these variables, in the box here.

