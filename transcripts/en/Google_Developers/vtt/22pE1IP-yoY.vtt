WEBVTT
Kind: captions
Language: en

00:00:06.840 --> 00:00:08.360
BRAD RYDZEWSKI:
All right, thanks.

00:00:08.360 --> 00:00:11.150
Thanks everyone for having us.

00:00:11.150 --> 00:00:12.415
My name is Brad Rydzewski.

00:00:12.415 --> 00:00:14.540
I'm a founder of a start-up
that's called drone.io.

00:00:14.540 --> 00:00:17.530
We do continuous integration,
deployment, and dev ops tools.

00:00:17.530 --> 00:00:20.029
We're located here
in the Bay Area.

00:00:20.029 --> 00:00:22.070
I'm really excited to be
here, especially knowing

00:00:22.070 --> 00:00:23.740
the background with
Google Web Toolkit.

00:00:23.740 --> 00:00:25.750
We're huge GWT programmers
over the last year.

00:00:25.750 --> 00:00:28.985
I think I still have an
HTML5 Nintendo emulator out

00:00:28.985 --> 00:00:30.110
on the app store somewhere.

00:00:30.110 --> 00:00:33.760
So go check it out, but don't
play with any illegal games

00:00:33.760 --> 00:00:34.780
or anything like that.

00:00:37.330 --> 00:00:38.830
MATT NORRIS: Hi I'm
Matt Norris, I'm

00:00:38.830 --> 00:00:41.510
actually a program manager
at General Electric.

00:00:41.510 --> 00:00:46.590
I do software development and
architecture, and basically

00:00:46.590 --> 00:00:49.820
my department dabbles in
lots of new technologies,

00:00:49.820 --> 00:00:52.070
brings new technologies
into my business,

00:00:52.070 --> 00:00:55.500
and I have a background
in graphics and animation.

00:00:55.500 --> 00:00:58.310
I'm also very, very
excited to be here.

00:00:58.310 --> 00:01:01.650
It's almost as
excited as this guy.

00:01:01.650 --> 00:01:03.950
I don't know if I'm as
excited because I can't jump

00:01:03.950 --> 00:01:08.110
that high in the air, but as
Seth said, Dart 1.0 is out,

00:01:08.110 --> 00:01:09.030
so that's great.

00:01:09.030 --> 00:01:11.300
That means you've got a
stable library to play with,

00:01:11.300 --> 00:01:15.180
and we're going to actually
show you the benefits right now.

00:01:15.180 --> 00:01:17.420
So Brad's going to go into
a demo of a very simple

00:01:17.420 --> 00:01:20.080
application that we'll
go through soup to nuts.

00:01:22.780 --> 00:01:24.060
BRAD RYDZEWSKI: Thanks, Matt.

00:01:24.060 --> 00:01:25.601
I think one of the
interesting things

00:01:25.601 --> 00:01:28.710
to just add on about Dart
1.0, the language is stable,

00:01:28.710 --> 00:01:31.021
the API stable, they're
working on performance.

00:01:31.021 --> 00:01:32.770
These are all great
things, but a language

00:01:32.770 --> 00:01:35.720
is more than just the syntax.

00:01:35.720 --> 00:01:37.700
As Seth said, it's an ecosystem.

00:01:37.700 --> 00:01:39.749
So if you're going to
be developing in Dart,

00:01:39.749 --> 00:01:41.790
you want to know what
technologies are available,

00:01:41.790 --> 00:01:43.469
what tools, what frameworks.

00:01:43.469 --> 00:01:45.510
And so these are the things
we're going to go to,

00:01:45.510 --> 00:01:50.550
and to do that, we wanted to
build an app, soup to nuts,

00:01:50.550 --> 00:01:54.740
and go through the code,
client server, database.

00:01:54.740 --> 00:01:57.110
And so I'm just going
to click on this,

00:01:57.110 --> 00:02:00.240
so we'll jump out,
and prepare to be

00:02:00.240 --> 00:02:04.640
amazed by an awesome
URL shortener.

00:02:04.640 --> 00:02:07.800
Pretty much just works
as you would expect.

00:02:07.800 --> 00:02:12.432
I'm going to type in a URL,
and I'm going to click shorten,

00:02:12.432 --> 00:02:13.640
and it's going to shorten it.

00:02:13.640 --> 00:02:17.500
And then I'm going to
click it, and it goes.

00:02:17.500 --> 00:02:19.610
Of course, the ironic
thing is the shortened URL

00:02:19.610 --> 00:02:22.352
was actually I think
longer than Google.com,

00:02:22.352 --> 00:02:24.344
but that's not a big deal.

00:02:24.344 --> 00:02:27.010
MATT NORRIS: If that's the worst
thing that happens in the demo,

00:02:27.010 --> 00:02:28.536
then I think we're doing OK.

00:02:28.536 --> 00:02:29.410
BRAD RYDZEWSKI: Yeah.

00:02:29.410 --> 00:02:32.710
So just to describe that, we
did a client-side app in Dart,

00:02:32.710 --> 00:02:34.530
we did the server-side
code in Dart,

00:02:34.530 --> 00:02:36.810
and we're actually
persisting hashing the URLs

00:02:36.810 --> 00:02:39.180
and persisting those in
a Redis key value store,

00:02:39.180 --> 00:02:42.190
so that when you visit the
URL, it's pulling the hash out

00:02:42.190 --> 00:02:45.020
and sending you need to link.

00:02:45.020 --> 00:02:48.300
All right, so
let's jump back in.

00:02:48.300 --> 00:02:50.755
And I can already talked
about that, what we'll learn,

00:02:50.755 --> 00:02:52.140
but client, server side app.

00:02:52.140 --> 00:02:53.580
We're going to
talk about testing,

00:02:53.580 --> 00:02:56.163
we're going to talk a little bit
about deploying some language

00:02:56.163 --> 00:02:57.710
features, some tools.

00:02:57.710 --> 00:02:59.544
A lot of people here
from a Java background,

00:02:59.544 --> 00:03:01.418
so I know you'll care
about the tools, things

00:03:01.418 --> 00:03:03.300
like continuous
integration, et cetera.

00:03:08.760 --> 00:03:13.030
MATT NORRIS: So you'll
notice that on the client,

00:03:13.030 --> 00:03:16.150
we're going to start there.

00:03:16.150 --> 00:03:19.410
The way that you include Dart
into your web application

00:03:19.410 --> 00:03:21.910
is very similar to--
it's very familiar

00:03:21.910 --> 00:03:23.800
as to how you
include JavaScript.

00:03:23.800 --> 00:03:26.120
So there's a script
to include, you

00:03:26.120 --> 00:03:28.710
see the type is actually
application Dart.

00:03:28.710 --> 00:03:34.450
And what allows us to use
this in a browser that's

00:03:34.450 --> 00:03:37.670
outside of Dartium,
which Seth went over

00:03:37.670 --> 00:03:40.860
in terms of
development, is dart.js.

00:03:40.860 --> 00:03:42.960
So that's what takes
your Dart code,

00:03:42.960 --> 00:03:45.780
compiles it into JS so that
it can be used in any browser.

00:03:49.100 --> 00:03:52.320
To dive into the index
itself, each Dart application

00:03:52.320 --> 00:03:56.150
really starts off
as two key files.

00:03:56.150 --> 00:03:58.430
We've got the HTML
file, and then we've

00:03:58.430 --> 00:04:01.130
got your Dart script
that's running.

00:04:01.130 --> 00:04:04.460
And in our particular
form, there's

00:04:04.460 --> 00:04:07.410
the input, where you
put your long URL.

00:04:07.410 --> 00:04:11.259
We've got a button that you
click so that it's actually

00:04:11.259 --> 00:04:12.550
calls Dart from the background.

00:04:12.550 --> 00:04:15.370
That's where we have
the action wired up.

00:04:15.370 --> 00:04:18.350
And we've got a
hidden anchor tag,

00:04:18.350 --> 00:04:22.060
that's where we're going to
stuff the hashed short URL when

00:04:22.060 --> 00:04:24.720
we're all said and done.

00:04:24.720 --> 00:04:27.170
Dart is a little bit
different than JavaScript.

00:04:27.170 --> 00:04:28.940
If you'll notice, each
Dart file actually

00:04:28.940 --> 00:04:33.340
has a main, which it's not
a huge surprise if you've

00:04:33.340 --> 00:04:36.050
come from Java or
any other language,

00:04:36.050 --> 00:04:38.300
it's just the way that the
convention that's used.

00:04:38.300 --> 00:04:40.567
And in just in this
particular instance,

00:04:40.567 --> 00:04:42.150
the only thing we're
really doing here

00:04:42.150 --> 00:04:46.170
is we're wiring up the
listener to the button

00:04:46.170 --> 00:04:49.170
itself on the HTML file.

00:04:49.170 --> 00:04:50.610
Really kind of a
cool thing though

00:04:50.610 --> 00:04:53.360
is the simplicity in
which you can do this.

00:04:53.360 --> 00:04:58.220
If you're familiar with jQuery,
you'll feel right at home.

00:04:58.220 --> 00:05:00.790
Dart uses a query
selector so that you're

00:05:00.790 --> 00:05:03.290
able to actually
grab what you need to

00:05:03.290 --> 00:05:04.970
and attach the event
listener that way.

00:05:09.290 --> 00:05:12.310
BRAD RYDZEWSKI: All right, so
we've wired up the onClick.

00:05:12.310 --> 00:05:14.550
This is just a quick look
at the onClick function.

00:05:14.550 --> 00:05:16.080
Again, if you've
coded in JavaScript

00:05:16.080 --> 00:05:18.100
this should look
extremely familiar.

00:05:18.100 --> 00:05:21.090
We're creating the HTTP request.

00:05:21.090 --> 00:05:22.660
We have the onReady
state changed,

00:05:22.660 --> 00:05:25.410
so when we send the request,
we can get a response back.

00:05:25.410 --> 00:05:27.380
Of course there's some
more complete code,

00:05:27.380 --> 00:05:29.670
this demo is posted,
we just didn't stuff it

00:05:29.670 --> 00:05:31.060
all into the slides.

00:05:31.060 --> 00:05:34.280
And then when we get
the response back,

00:05:34.280 --> 00:05:36.470
we're going to use that to
populate the form calling

00:05:36.470 --> 00:05:39.382
this show text method.

00:05:39.382 --> 00:05:40.840
And then there's
one thing I wanted

00:05:40.840 --> 00:05:42.580
to cover because, as
you're going through Dart,

00:05:42.580 --> 00:05:44.440
you're going to see
some new syntax things,

00:05:44.440 --> 00:05:46.460
and some people
had some questions,

00:05:46.460 --> 00:05:49.080
like what's going on with
this thing right here?

00:05:49.080 --> 00:05:50.690
This underscore?

00:05:50.690 --> 00:05:53.900
And really, it's just
the listener is invoking

00:05:53.900 --> 00:05:56.410
this function on callback,
and it would typically

00:05:56.410 --> 00:05:59.330
be passing in
event handler data,

00:05:59.330 --> 00:06:01.190
and we're just
going to ignore it,

00:06:01.190 --> 00:06:02.700
and so that's what we're
doing with that underscore, is

00:06:02.700 --> 00:06:04.158
we just don't really
care about it.

00:06:04.158 --> 00:06:06.705
And so you'll see that from
time to time in Dart code

00:06:06.705 --> 00:06:08.407
and maybe even
further in this demo.

00:06:08.407 --> 00:06:09.990
So as see these types
of things, we'll

00:06:09.990 --> 00:06:11.650
try to point out what they mean.

00:06:17.130 --> 00:06:18.840
MATT NORRIS: Seth
mentioned this is well.

00:06:18.840 --> 00:06:21.220
This is one of the
really cool things

00:06:21.220 --> 00:06:24.750
that we found about Dart
was the syntactic sugar.

00:06:24.750 --> 00:06:27.669
It takes a lot of
the boilerplate stuff

00:06:27.669 --> 00:06:29.960
that you're used to kind of
putting together and having

00:06:29.960 --> 00:06:32.050
to piece together
in other languages,

00:06:32.050 --> 00:06:35.870
and boils it down so that
you're not using as much,

00:06:35.870 --> 00:06:37.380
you're not thinking
through as much,

00:06:37.380 --> 00:06:40.850
and string interpolation
is a great example of this.

00:06:44.080 --> 00:06:49.060
The thing that I found that
actually most fascinating

00:06:49.060 --> 00:06:52.304
was the cascades, so
Seth also covered that.

00:06:52.304 --> 00:06:54.220
I'm going to gush a
little bit more about this

00:06:54.220 --> 00:07:00.450
because this is where, as
developers, 90% of your time

00:07:00.450 --> 00:07:02.850
is spent maintaining
stuff, not writing it.

00:07:02.850 --> 00:07:06.950
And anything that you
write is inherently

00:07:06.950 --> 00:07:10.270
shared with other people,
you work on teams, and even

00:07:10.270 --> 00:07:11.190
yourself.

00:07:11.190 --> 00:07:13.660
A few months later after you
write something and go back

00:07:13.660 --> 00:07:16.970
to it, you might not quite
remember exactly what it did.

00:07:16.970 --> 00:07:19.350
So this is--
anything that you can

00:07:19.350 --> 00:07:21.500
do with a language to
make it more readable,

00:07:21.500 --> 00:07:24.610
make it more like
prose, is a great thing.

00:07:24.610 --> 00:07:26.410
Programming is poetry.

00:07:26.410 --> 00:07:30.260
You're all writers, and
this makes your job easier.

00:07:30.260 --> 00:07:33.550
It's absolutely
fantastic, and it really

00:07:33.550 --> 00:07:36.740
helps in maintaining
things in the future.

00:07:36.740 --> 00:07:38.930
So for this particular,
just to explain what's

00:07:38.930 --> 00:07:45.114
going on in the
code, the URL short,

00:07:45.114 --> 00:07:46.530
the anchor tag
that we're actually

00:07:46.530 --> 00:07:48.770
going to update the
attributes when the show text

00:07:48.770 --> 00:07:51.090
function is invoked.

00:07:51.090 --> 00:07:53.340
And just like in
the code that you

00:07:53.340 --> 00:07:55.270
saw before, we're
taking all of the things

00:07:55.270 --> 00:07:56.728
that we want to
change about it, we

00:07:56.728 --> 00:07:58.537
want to put the
new href in there,

00:07:58.537 --> 00:08:00.120
we want to change
its name so that you

00:08:00.120 --> 00:08:03.560
see what the actual
short hashed link is.

00:08:03.560 --> 00:08:06.020
And we're doing it with
cascade, so it's very, very easy

00:08:06.020 --> 00:08:08.650
to read and maintain later.

00:08:08.650 --> 00:08:10.030
BRAD RYDZEWSKI: All right.

00:08:10.030 --> 00:08:15.869
So now what I'd like to do is
just jump back to the demo.

00:08:15.869 --> 00:08:18.410
Who would have thought we could
actually demo more with this?

00:08:21.110 --> 00:08:25.190
We're going to go
to yahoo.com, and we

00:08:25.190 --> 00:08:28.640
generated the hash, and
boom, we didn't redirect.

00:08:28.640 --> 00:08:30.280
So what happened?

00:08:30.280 --> 00:08:31.550
What broke?

00:08:31.550 --> 00:08:34.260
And so let's jump
back into the pitch,

00:08:34.260 --> 00:08:37.640
and we can kind of further
analyze what happened here.

00:08:37.640 --> 00:08:40.970
Well, we didn't type the
HTTP, we just typed the www,

00:08:40.970 --> 00:08:43.350
and it turns out
when the server tried

00:08:43.350 --> 00:08:47.824
to do the redirect without the
HTTP, it wasn't able to do so.

00:08:47.824 --> 00:08:49.740
And those are kind of
like the mundane details

00:08:49.740 --> 00:08:52.430
that as developers
sometimes we forget about.

00:08:52.430 --> 00:08:54.340
And so we thought
that was a nice segue

00:08:54.340 --> 00:08:58.105
into the next topic, which
is going to be unit tests.

00:09:02.610 --> 00:09:04.860
MATT NORRIS: So every time
you kind of come across one

00:09:04.860 --> 00:09:07.650
of these things that might not
cross your mind earlier when

00:09:07.650 --> 00:09:10.820
you develop something, every
time somebody finds a bug,

00:09:10.820 --> 00:09:12.880
you want to write that
unit test so that you

00:09:12.880 --> 00:09:15.330
make sure you have
coverage going forward.

00:09:15.330 --> 00:09:17.280
This is starting
from the client side.

00:09:17.280 --> 00:09:21.180
We're going to take a look at
how to implement this in Dart.

00:09:21.180 --> 00:09:24.350
The first thing you do is import
the unit test library, which

00:09:24.350 --> 00:09:27.450
is baked into-- is
thought of from the very

00:09:27.450 --> 00:09:31.530
first implementation--
baked into Dart itself,

00:09:31.530 --> 00:09:34.630
so it's really great.

00:09:34.630 --> 00:09:38.530
You also will pull in an
HTML-enhanced configuration,

00:09:38.530 --> 00:09:41.640
which I'll show you what
the output is in a second,

00:09:41.640 --> 00:09:45.210
but basically when you're
doing your development workflow

00:09:45.210 --> 00:09:48.250
in Dartium, it's
a simple command

00:09:48.250 --> 00:09:51.390
to actually format the
results of the unit tests

00:09:51.390 --> 00:09:55.400
and, in a nice way,
in the browser.

00:09:55.400 --> 00:09:58.590
And finally, the meat of
this is the test itself.

00:09:58.590 --> 00:10:02.620
So what we said when somebody
came in with a bug report

00:10:02.620 --> 00:10:05.840
and said hey, I tried to put
in this URL and it didn't work.

00:10:05.840 --> 00:10:08.330
We say, OK, it's because
we forgot the protocol.

00:10:08.330 --> 00:10:10.190
We now write a couple
of tests to make sure

00:10:10.190 --> 00:10:11.950
that we have that
coverage going forward.

00:10:11.950 --> 00:10:15.290
We check that it's a
valid URL, is working,

00:10:15.290 --> 00:10:18.610
and that we get everything--
stuff the protocol--

00:10:18.610 --> 00:10:23.400
and if people do
not include that.

00:10:23.400 --> 00:10:26.010
So when you run the
test itself, this

00:10:26.010 --> 00:10:27.900
is the output that you get.

00:10:27.900 --> 00:10:30.850
It shows you that all
your tests have passed.

00:10:30.850 --> 00:10:32.996
You're green, so
you're good to go.

00:10:32.996 --> 00:10:34.620
BRAD RYDZEWSKI:
Actually one more thing

00:10:34.620 --> 00:10:37.078
that I wanted to just bring up
because GWT came up earlier,

00:10:37.078 --> 00:10:39.640
and we've got a lot
of Java developers.

00:10:39.640 --> 00:10:41.770
I remember, one thing
I love about this,

00:10:41.770 --> 00:10:45.360
is that I can run my test
directly against a real DOM.

00:10:45.360 --> 00:10:47.000
If you're programming
in GWT before,

00:10:47.000 --> 00:10:50.310
maybe you remember Ray Ryan's
talk on model view presenter,

00:10:50.310 --> 00:10:53.226
and you had to actually
mock your entire UI.

00:10:53.226 --> 00:10:56.290
And so, I think this is awesome
that when I write my unit

00:10:56.290 --> 00:10:59.930
tests against my web page,
I get hit an actual real DOM

00:10:59.930 --> 00:11:02.640
and I don't have to write all
that extra boilerplate mocking

00:11:02.640 --> 00:11:04.640
code.

00:11:04.640 --> 00:11:07.860
MATT NORRIS: So like Brad
said, this is fantastic,

00:11:07.860 --> 00:11:10.870
and it's really great to see
everything kind of included

00:11:10.870 --> 00:11:14.330
in Dartium and the
Dart editor itself,

00:11:14.330 --> 00:11:15.844
it's very nice workflow.

00:11:15.844 --> 00:11:18.010
You don't have to jump to
a lot of different places,

00:11:18.010 --> 00:11:19.170
everything's contained.

00:11:19.170 --> 00:11:20.753
But there's going
to be points in time

00:11:20.753 --> 00:11:23.220
when you want to do things,
you want to script them out,

00:11:23.220 --> 00:11:24.345
you want to do them faster.

00:11:24.345 --> 00:11:27.100
You're not going
to do them manually

00:11:27.100 --> 00:11:29.150
by control running something.

00:11:29.150 --> 00:11:33.010
And so that's what brings us
into the next topic, which

00:11:33.010 --> 00:11:35.860
is headless browser testing.

00:11:35.860 --> 00:11:43.150
And this is really done-- Dart
provides a very nice utility

00:11:43.150 --> 00:11:44.800
to take care of this.

00:11:44.800 --> 00:11:47.800
It's a headless browser with
full DOM, like Brad said,

00:11:47.800 --> 00:11:50.040
and it's faster than
running something

00:11:50.040 --> 00:11:52.600
like HTTP unit and Selenium.

00:11:52.600 --> 00:11:56.010
So anything that we
can do with a browser,

00:11:56.010 --> 00:11:58.430
we can do in the
headless browser.

00:11:58.430 --> 00:12:01.350
So we use content shell,
which is the tool itself.

00:12:01.350 --> 00:12:02.810
And the way that
we do this is we

00:12:02.810 --> 00:12:05.317
call this with an argument
of Dump-render-tree.

00:12:05.317 --> 00:12:07.400
And you'll see that the
file that it's pointing to

00:12:07.400 --> 00:12:09.494
is actually the
same that we invoked

00:12:09.494 --> 00:12:10.910
that you saw in
the previous slide

00:12:10.910 --> 00:12:13.720
within the browser itself.

00:12:13.720 --> 00:12:17.350
And when we call that, we
see that same content too.

00:12:17.350 --> 00:12:20.000
All our tests passed,
so we're good to go.

00:12:20.000 --> 00:12:21.700
But it's happening
on the command line,

00:12:21.700 --> 00:12:26.040
so it can be done much quicker
and built into our build steps

00:12:26.040 --> 00:12:28.785
later on.

00:12:28.785 --> 00:12:32.000
AUDIENCE: So what would
happen with negative test?

00:12:32.000 --> 00:12:34.869
Let's say you had
a faulty web page.

00:12:37.500 --> 00:12:39.370
BRAD RYDZEWSKI: So you
mean in terms of you

00:12:39.370 --> 00:12:42.491
want to test errors,
like you expect errors?

00:12:42.491 --> 00:12:43.116
AUDIENCE: Yeah.

00:12:43.116 --> 00:12:44.010
Negative testing.

00:12:44.010 --> 00:12:49.170
BRAD RYDZEWSKI:
So yeah, I think--

00:12:49.170 --> 00:12:50.944
Do we have an example
of that in here?

00:12:50.944 --> 00:12:53.110
MATT NORRIS: I don't think
we have an example of it,

00:12:53.110 --> 00:12:54.760
but it's something
that you could do.

00:12:54.760 --> 00:12:57.450
It just all depends on how
you structure your tests.

00:12:57.450 --> 00:13:02.104
So there's more code
behind the scenes.

00:13:02.104 --> 00:13:04.020
It's actually something
that we didn't prepare

00:13:04.020 --> 00:13:07.320
for this particular application,
but we can definitely

00:13:07.320 --> 00:13:10.850
add that into the GitHub
projects and show as an example

00:13:10.850 --> 00:13:12.630
if that's something
you'd like to see.

00:13:12.630 --> 00:13:15.450
BRAD RYDZEWSKI: Yeah, I'm sure
there are plenty of examples,

00:13:15.450 --> 00:13:17.050
and maybe Seth can
answer that one.

00:13:17.050 --> 00:13:18.591
When we're done, he
can talk to that.

00:13:18.591 --> 00:13:20.420
Because I know some of
the Dart team there,

00:13:20.420 --> 00:13:22.660
they're running
hundreds of these types

00:13:22.660 --> 00:13:24.710
of tests and analyzing
[? outputs, ?]

00:13:24.710 --> 00:13:26.867
so I'm sure they're doing
those types of tests.

00:13:26.867 --> 00:13:29.200
But basically anything you
can do from a Dart unit test,

00:13:29.200 --> 00:13:30.537
you're running in headless mode.

00:13:30.537 --> 00:13:32.870
So if you're familiar with
like a PhantomJS or something

00:13:32.870 --> 00:13:37.890
like that, it's that for Dart,
maybe a little more primitive,

00:13:37.890 --> 00:13:41.500
but hopefully it will
evolve over time.

00:13:41.500 --> 00:13:44.760
So now I want to talk
the server piece.

00:13:44.760 --> 00:13:48.769
Seth mentioned, Dart has HTTP,
TCP, all this stuff built in.

00:13:48.769 --> 00:13:50.560
Of course we could talk
about the low level

00:13:50.560 --> 00:13:52.810
handlers, the request
handlers and stuff,

00:13:52.810 --> 00:13:56.430
but I don't program like that.

00:13:56.430 --> 00:13:58.880
That reminds me of
1999 Java servlets.

00:13:58.880 --> 00:14:00.650
I typically like to
use a web framework.

00:14:00.650 --> 00:14:01.816
It maked me more productive.

00:14:01.816 --> 00:14:07.160
I don't have to handle parsing
URL paths and stuff like that.

00:14:07.160 --> 00:14:09.290
And so we're just going
to jump straight to it.

00:14:09.290 --> 00:14:10.530
This is a framework.

00:14:10.530 --> 00:14:12.320
It's called start.dart.

00:14:12.320 --> 00:14:13.510
It rhymes.

00:14:13.510 --> 00:14:16.410
If you're familiar
with Express for node,

00:14:16.410 --> 00:14:21.500
if you're familiar with Sinatra
for Ruby, Rat Pack for Groovy,

00:14:21.500 --> 00:14:23.750
Spark for Java, there's
tons of frameworks

00:14:23.750 --> 00:14:26.880
like this that make
it really easy to deal

00:14:26.880 --> 00:14:29.590
with URL routing
and stuff like that.

00:14:29.590 --> 00:14:33.320
And so what we're doing here
is we're invoking start.

00:14:33.320 --> 00:14:36.000
What we see is this
public web, that is,

00:14:36.000 --> 00:14:37.790
we're pointing it
to the server where

00:14:37.790 --> 00:14:40.160
we're serving our static
content out of our CSS

00:14:40.160 --> 00:14:43.030
files, our Dart script.

00:14:43.030 --> 00:14:44.860
And then this is
where we're declaring

00:14:44.860 --> 00:14:46.950
that we want to
handle this route,

00:14:46.950 --> 00:14:49.710
so the code where you have
the dot-dot-dot, that will get

00:14:49.710 --> 00:14:52.037
invoked any time we do a
post to that route, which

00:14:52.037 --> 00:14:53.620
is, of course,
important because we're

00:14:53.620 --> 00:14:56.740
going to be posting
a URL to this route

00:14:56.740 --> 00:14:58.650
in order to get back a hash.

00:14:58.650 --> 00:15:00.140
And so, let's kind
of quickly look

00:15:00.140 --> 00:15:03.200
at what we would fill this with.

00:15:03.200 --> 00:15:05.640
It should be pretty
straightforward.

00:15:05.640 --> 00:15:08.290
We're getting the
URL from the request,

00:15:08.290 --> 00:15:10.630
we're hashing it
using a simple SHA

00:15:10.630 --> 00:15:13.130
hash built into the
Dart library, awesome.

00:15:13.130 --> 00:15:15.920
Dart has a standard library,
has all this great stuff in it,

00:15:15.920 --> 00:15:18.257
so I didn't have to write
a SHA hashing algorithm

00:15:18.257 --> 00:15:20.715
or anything like that, I was
able to just take it right out

00:15:20.715 --> 00:15:22.290
of the library.

00:15:22.290 --> 00:15:24.360
And then we're using
a Redis client.

00:15:24.360 --> 00:15:26.402
Obviously, I don't show
how you start it up here.

00:15:26.402 --> 00:15:27.818
I didn't think
that was necessary.

00:15:27.818 --> 00:15:29.230
But we're doing
something simple.

00:15:29.230 --> 00:15:32.900
We're setting the hash as the
key, the URL as the value,

00:15:32.900 --> 00:15:34.904
And of course, this
is asynchronous,

00:15:34.904 --> 00:15:36.320
and so, as Seth
mentioned, this is

00:15:36.320 --> 00:15:37.850
where futures come into play.

00:15:37.850 --> 00:15:41.120
And so we're saying
when this is done,

00:15:41.120 --> 00:15:43.770
we're going to invoke
this function here,

00:15:43.770 --> 00:15:46.820
and we're going to say
respond with the hash.

00:15:46.820 --> 00:15:49.270
And so, Seth kind
of touched on it,

00:15:49.270 --> 00:15:52.570
but it's kind of nice to be
able to use this future syntax,

00:15:52.570 --> 00:15:55.250
especially when you get
multiple of these thens,

00:15:55.250 --> 00:15:57.270
you avoid that callback
hell, so we really

00:15:57.270 --> 00:15:58.730
like that as we are programming.

00:15:58.730 --> 00:16:00.720
And actually, this is
a simplified version,

00:16:00.720 --> 00:16:03.610
we have an over
engineered hashing one

00:16:03.610 --> 00:16:06.900
that uses much more thens
in the actual GitHub repo.

00:16:11.300 --> 00:16:15.117
So, we've persisted to Redis,
we've persisted to the hash,

00:16:15.117 --> 00:16:16.700
and now we need the
redirect function,

00:16:16.700 --> 00:16:21.690
so when someone visits
the shortened URL,

00:16:21.690 --> 00:16:25.984
we're going to look it up
just simply with Redis.git,

00:16:25.984 --> 00:16:27.150
we're going to get the hash.

00:16:27.150 --> 00:16:30.220
Again, this is asynchronous,
so we're using a future.

00:16:30.220 --> 00:16:33.440
We're getting the value,
and we're redirecting.

00:16:33.440 --> 00:16:37.490
So again, very, very simple
readable code in Dart.

00:16:37.490 --> 00:16:38.120
We love it.

00:16:42.770 --> 00:16:45.096
MATT NORRIS: So just like
we tested the client,

00:16:45.096 --> 00:16:46.720
we're going to test
the server as well.

00:16:46.720 --> 00:16:49.200
And what's great about
running the same code

00:16:49.200 --> 00:16:51.410
on the server and the
client, is that things

00:16:51.410 --> 00:16:53.860
are going to feel very familiar.

00:16:53.860 --> 00:16:56.720
So like we did before, we're
going to pull in the unit test

00:16:56.720 --> 00:16:59.420
library and we're going to
do something a little bit

00:16:59.420 --> 00:17:02.651
different because we're not
going to be testing the HTML,

00:17:02.651 --> 00:17:04.609
we're actually going to
use the virtual machine

00:17:04.609 --> 00:17:07.380
in this instance.

00:17:07.380 --> 00:17:12.130
And to test that the
hash is working properly,

00:17:12.130 --> 00:17:15.050
we first check to see that
it's just returning something.

00:17:15.050 --> 00:17:17.170
We just want to make
sure that it's not null.

00:17:17.170 --> 00:17:20.430
And then we know what the
specific hash will be.

00:17:20.430 --> 00:17:21.980
It's a simple hash,
so we're going

00:17:21.980 --> 00:17:27.369
to test for that specific hash.

00:17:27.369 --> 00:17:30.670
And to run it, all you do is
in the command line, Dart,

00:17:30.670 --> 00:17:33.570
whatever your test
file's name is,

00:17:33.570 --> 00:17:35.900
and you can see whether
it passes or fails.

00:17:35.900 --> 00:17:37.865
And in this case, it passes.

00:17:42.677 --> 00:17:43.760
BRAD RYDZEWSKI: All right.

00:17:43.760 --> 00:17:46.110
Seth touched on this,
so we don't have a lot

00:17:46.110 --> 00:17:49.590
to say about it because it's
so simple deployment, Heroku.

00:17:49.590 --> 00:17:51.080
It's a great option.

00:17:51.080 --> 00:17:52.750
This is literally
what it took for us

00:17:52.750 --> 00:17:54.350
to get this running on Heroku.

00:17:54.350 --> 00:17:55.910
Heroku create.

00:17:55.910 --> 00:17:57.870
Seth mentioned the
second command,

00:17:57.870 --> 00:18:00.680
we give it a URL to what
they call a buildpack, which

00:18:00.680 --> 00:18:02.380
is essentially
instructions to create

00:18:02.380 --> 00:18:04.170
a virtual machine on the fly.

00:18:04.170 --> 00:18:06.100
Very simple.

00:18:06.100 --> 00:18:09.330
Heroku add-ons, we add
a Redis data store,

00:18:09.330 --> 00:18:11.810
and within seconds we
had a Redis database,

00:18:11.810 --> 00:18:13.350
and then we just get push.

00:18:13.350 --> 00:18:15.954
And so it's a great
way if you're just

00:18:15.954 --> 00:18:18.370
getting started with Dart, and
you're building a cool app,

00:18:18.370 --> 00:18:19.940
and you want to
show it to people,

00:18:19.940 --> 00:18:22.940
definitely try out Heroku.

00:18:22.940 --> 00:18:24.760
If you Google the
Dart buildpack,

00:18:24.760 --> 00:18:27.042
there's instructions for
a little more in-depth

00:18:27.042 --> 00:18:28.250
for getting this all working.

00:18:34.120 --> 00:18:35.870
MATT NORRIS: Just a
question to everybody,

00:18:35.870 --> 00:18:39.070
does anybody know about
how many browser and OS

00:18:39.070 --> 00:18:41.370
combinations there
are out there?

00:18:41.370 --> 00:18:42.780
[LAUGHTER]

00:18:42.780 --> 00:18:43.930
A million.

00:18:43.930 --> 00:18:45.160
I think that's pretty close.

00:18:45.160 --> 00:18:45.951
Another guess here.

00:18:45.951 --> 00:18:48.180
AUDIENCE: Are you counting
Linux as one or many?

00:18:48.180 --> 00:18:51.620
MATT NORRIS: Let's
go with many, many.

00:18:51.620 --> 00:18:54.590
As many permutations
as possible.

00:18:54.590 --> 00:18:55.091
So--

00:18:55.091 --> 00:18:57.048
AUDIENCE: Does that
include different versions?

00:18:57.048 --> 00:18:58.174
MATT NORRIS: What's that?

00:18:58.174 --> 00:19:00.132
AUDIENCE: Does that
include different versions?

00:19:00.132 --> 00:19:02.880
MATT NORRIS: It includes
different versions too.

00:19:02.880 --> 00:19:03.710
Lots.

00:19:03.710 --> 00:19:07.910
So you see this is quickly
spiraling out of control.

00:19:07.910 --> 00:19:11.330
There's at least over 200
different combinations of,

00:19:11.330 --> 00:19:14.890
I'll say the modern ones,
so not every single one.

00:19:14.890 --> 00:19:18.130
I was just trying to get
as many numbers as I could.

00:19:18.130 --> 00:19:20.262
But--

00:19:20.262 --> 00:19:25.845
AUDIENCE: Let's say 2002 or
2004 when Web 2.0 was around,

00:19:25.845 --> 00:19:28.120
[INAUDIBLE] a while,
though, right?

00:19:28.120 --> 00:19:30.020
MATT NORRIS: Yeah, yeah.

00:19:30.020 --> 00:19:33.430
There is some cut-off date,
so-- but for the modern ones,

00:19:33.430 --> 00:19:35.730
let's say that it's
over 200 about,

00:19:35.730 --> 00:19:37.480
approximately, the
different combinations.

00:19:37.480 --> 00:19:42.120
And so when we're
creating web applications,

00:19:42.120 --> 00:19:43.940
are all of us going
out and testing

00:19:43.940 --> 00:19:48.060
all those combinations
ourselves manually?

00:19:48.060 --> 00:19:49.940
Probably not.

00:19:49.940 --> 00:19:53.004
So that brings us
to our next segment,

00:19:53.004 --> 00:19:54.295
which is cross browser testing.

00:19:57.530 --> 00:20:00.050
Selenium probably everybody's
pretty familiar with.

00:20:00.050 --> 00:20:02.390
You know, Selenium IDE,
you can record tests

00:20:02.390 --> 00:20:06.710
within your browser, Selenium
server, you run those tests.

00:20:06.710 --> 00:20:09.160
We're actually--
Dart's got capabilities

00:20:09.160 --> 00:20:11.850
where you can actually do
the scripting for the test

00:20:11.850 --> 00:20:12.510
within Dart.

00:20:12.510 --> 00:20:17.250
So again, you're keeping all
of your code in one place

00:20:17.250 --> 00:20:19.000
and using the same language.

00:20:19.000 --> 00:20:22.770
And here we just
picked that one sample,

00:20:22.770 --> 00:20:26.590
but basically we're creating
the WebDriver here in Selenium,

00:20:26.590 --> 00:20:30.610
and we're saying, I want to
test on an Android browser.

00:20:30.610 --> 00:20:32.750
Picture multiple
iterations of this,

00:20:32.750 --> 00:20:36.640
you've got Firefox, Chrome,
et cetera, everything

00:20:36.640 --> 00:20:39.520
that you could stuff in,
add as many as you need to.

00:20:44.070 --> 00:20:45.790
So that's setting up.

00:20:45.790 --> 00:20:50.160
The actual test itself
is, what we're doing,

00:20:50.160 --> 00:20:53.900
we're basically finding, again,
we're finding an element,

00:20:53.900 --> 00:20:56.030
we're doing something
to that element.

00:20:56.030 --> 00:20:58.630
And what's neat is
we're actually back

00:20:58.630 --> 00:21:01.260
to the future syntax
that we saw earlier.

00:21:01.260 --> 00:21:04.240
So, again, this is a
simplified version,

00:21:04.240 --> 00:21:06.320
but we're basically
nesting-- we're

00:21:06.320 --> 00:21:11.410
able to stagger a whole
lot of asynchronous calls

00:21:11.410 --> 00:21:14.880
to actually achieve the
testing that we want.

00:21:14.880 --> 00:21:17.030
And right in the middle
of everything, smack dab

00:21:17.030 --> 00:21:19.800
in the middle of
everything, we can actually

00:21:19.800 --> 00:21:21.640
throw in an expectation.

00:21:21.640 --> 00:21:23.030
So that's your test right there.

00:21:23.030 --> 00:21:26.050
So you can have multiple
ones of these chained off

00:21:26.050 --> 00:21:31.210
of each other, and it's just
a nice way to actually, again,

00:21:31.210 --> 00:21:34.240
format this, put it in
a very readable format,

00:21:34.240 --> 00:21:36.570
and execute a lot
of different tests

00:21:36.570 --> 00:21:39.840
and a lot of different
expectations.

00:21:39.840 --> 00:21:42.585
BRAD RYDZEWSKI: So yes, Selenium
directly in Dart is awesome.

00:21:45.320 --> 00:21:48.530
As Matt mentioned, there's
200-plus combinations.

00:21:48.530 --> 00:21:51.302
And maybe some of you
guys have seen this,

00:21:51.302 --> 00:21:52.260
it's called Sauce Labs.

00:21:52.260 --> 00:21:54.620
I think it's actually by
a bunch of ex-Google guys

00:21:54.620 --> 00:21:57.230
that ran their internal
testing, but it's

00:21:57.230 --> 00:21:59.330
a web service that
works with Selenium

00:21:59.330 --> 00:22:03.640
that lets you test tons
of different permutations.

00:22:03.640 --> 00:22:06.320
So once you have the Selenium
code working locally,

00:22:06.320 --> 00:22:08.690
you just point it directly
at the Sauce Lab servers,

00:22:08.690 --> 00:22:10.810
and in parallel,
they're going to test

00:22:10.810 --> 00:22:12.940
against a bunch of
different browsers.

00:22:12.940 --> 00:22:19.240
And so we actually took
the test, I have it here,

00:22:19.240 --> 00:22:23.040
and we ran it against Firefox.

00:22:23.040 --> 00:22:26.790
And what's pretty cool is when
you're running in Sauce Labs,

00:22:26.790 --> 00:22:29.790
they actually will
record your entire set,

00:22:29.790 --> 00:22:32.190
run your tests,
show you the output,

00:22:32.190 --> 00:22:34.190
any types of error messages.

00:22:34.190 --> 00:22:37.430
And it's really a
boring video, it's just

00:22:37.430 --> 00:22:40.200
showing what we showed you
like two times already,

00:22:40.200 --> 00:22:44.730
but you can see it's running
with the Dart library

00:22:44.730 --> 00:22:47.926
and it's running on
the Sauce Labs engine.

00:22:47.926 --> 00:22:49.300
And so this is
something that you

00:22:49.300 --> 00:22:51.090
can start using
today to test in all

00:22:51.090 --> 00:22:55.180
these different
permutations and scenarios.

00:22:55.180 --> 00:22:57.260
The other thing that
I wanted to show,

00:22:57.260 --> 00:22:59.710
just because it was
so easy, I decided

00:22:59.710 --> 00:23:02.630
I wanted to test our
app in Android Why not?

00:23:02.630 --> 00:23:04.600
I just had to change
like literally one

00:23:04.600 --> 00:23:07.990
parameter in Sauce, and
I'm testing it in Android.

00:23:07.990 --> 00:23:11.170
And this actually ended up
being pretty fascinating,

00:23:11.170 --> 00:23:14.010
and it kind of goes to
Seth's earlier point

00:23:14.010 --> 00:23:17.130
is that we should be
testing everything on mobile

00:23:17.130 --> 00:23:18.269
and using the viewport.

00:23:18.269 --> 00:23:20.560
And I think this will become
very clear when I show you

00:23:20.560 --> 00:23:22.710
what we found when we
ran this on Android.

00:23:22.710 --> 00:23:24.100
So we're running it on
Android, and I'm not

00:23:24.100 --> 00:23:25.250
going to show the
video, I'll just

00:23:25.250 --> 00:23:26.500
show some of the screen shots.

00:23:29.300 --> 00:23:32.997
We instruct Selenium to click
on the field and add the text.

00:23:32.997 --> 00:23:34.330
And what does it immediately do?

00:23:34.330 --> 00:23:37.400
It zooms in all big, and I
can't see any of the page now,

00:23:37.400 --> 00:23:40.160
I can't even see the button.

00:23:40.160 --> 00:23:46.450
And Selenium is able to
actually put in the URL,

00:23:46.450 --> 00:23:48.170
so that was scripted correctly.

00:23:48.170 --> 00:23:52.000
But then we tell Selenium
to click the button,

00:23:52.000 --> 00:23:53.030
and Selenium fails.

00:23:53.030 --> 00:23:55.760
Selenium says, we
can't fix it-- let

00:23:55.760 --> 00:23:58.520
me read this-- this web
element is not visible

00:23:58.520 --> 00:23:59.660
and may not be clicked.

00:23:59.660 --> 00:24:00.790
And so that's actually
kind of awesome,

00:24:00.790 --> 00:24:03.070
because normally when I'm
using a tool like Selenium,

00:24:03.070 --> 00:24:05.730
I'm thinking it's going to find
bugs, like glitches in code,

00:24:05.730 --> 00:24:08.750
but this actually kind
of like a UX error.

00:24:08.750 --> 00:24:12.010
So again, just kind of
a nice byproduct of this

00:24:12.010 --> 00:24:14.790
is being able to test on
mobile, see how your app looks.

00:24:14.790 --> 00:24:16.982
So maybe you had Android,
but you don't iPhone,

00:24:16.982 --> 00:24:18.940
or you have iPhone, but
you don't have an iPad.

00:24:18.940 --> 00:24:20.540
This does all
these permutations,

00:24:20.540 --> 00:24:23.070
it's free for open
source projects.

00:24:23.070 --> 00:24:26.080
And there are paid
plans, and it's probably

00:24:26.080 --> 00:24:29.120
cheaper than hosting all
the infrastructure yourself.

00:24:29.120 --> 00:24:30.496
So definitely
highly recommended.

00:24:30.496 --> 00:24:32.161
MATT NORRIS: I think
we had a question--

00:24:32.161 --> 00:24:32.993
BRAD RYDZEWSKI: Oh.

00:24:32.993 --> 00:24:33.820
MATT NORRIS: Out
in the audience.

00:24:33.820 --> 00:24:34.450
BRAD RYDZEWSKI: Yes.

00:24:34.450 --> 00:24:36.540
AUDIENCE: I was just
curious, with Sauce Labs,

00:24:36.540 --> 00:24:38.160
I saw it was
testing local hosts?

00:24:38.160 --> 00:24:38.993
BRAD RYDZEWSKI: Yes.

00:24:38.993 --> 00:24:41.110
AUDIENCE: Does part
of the test for Sauce

00:24:41.110 --> 00:24:43.730
tells you, tells it,
how to run the server?

00:24:43.730 --> 00:24:46.750
BRAD RYDZEWSKI: So the way
Sauce Labs works, it actually

00:24:46.750 --> 00:24:49.840
is like a bundled version
of Selenium that proxies.

00:24:49.840 --> 00:24:52.190
So what happens,
actually almost exactly

00:24:52.190 --> 00:24:54.540
like what you were
showing with the DevTools,

00:24:54.540 --> 00:24:57.005
I'm running the app
locally, and Sauce Labs

00:24:57.005 --> 00:24:58.730
is providing a
local server that's

00:24:58.730 --> 00:25:01.290
proxying all the
traffic to their servers

00:25:01.290 --> 00:25:05.360
in their environment, so very
similar to what you demoed.

00:25:05.360 --> 00:25:07.890
Was there another question?

00:25:07.890 --> 00:25:10.400
OK.

00:25:10.400 --> 00:25:13.780
Jumping back into the pitch.

00:25:13.780 --> 00:25:16.840
So, the kind of last technology
we wanted to touch on

00:25:16.840 --> 00:25:20.050
was continuous integration.

00:25:20.050 --> 00:25:25.090
Obviously we built our app,
we're running our tests.

00:25:25.090 --> 00:25:28.250
It would be great to do that
automatically, especially

00:25:28.250 --> 00:25:32.180
in a team setting, if we
have multiple collaborators,

00:25:32.180 --> 00:25:33.300
et cetera.

00:25:33.300 --> 00:25:40.300
And so back in October
2011 when Dart launched,

00:25:40.300 --> 00:25:43.220
my company, drone.io,
started supporting Dart

00:25:43.220 --> 00:25:44.950
as a language for
continuous integration.

00:25:44.950 --> 00:25:46.950
And so a lot of
the Dart projects

00:25:46.950 --> 00:25:49.515
are doing continuous
integration on drone.io.

00:25:49.515 --> 00:25:51.740
It supports other
languages as well.

00:25:51.740 --> 00:25:54.490
So that's what I wanted
to show to you today.

00:25:54.490 --> 00:25:57.560
So we're going to go
ahead and click on-- maybe

00:25:57.560 --> 00:26:01.320
not-- so actually I
have it up right here.

00:26:01.320 --> 00:26:08.010
So this is drone.io-- yeah,
all right, it's showing up.

00:26:08.010 --> 00:26:10.540
It's a continuous
integration server.

00:26:10.540 --> 00:26:13.967
If you're familiar with Jenkins,
similar type of concept.

00:26:13.967 --> 00:26:15.550
Some interesting
things with drone.io.

00:26:15.550 --> 00:26:17.329
It's completely hosted
like Sauce Labs.

00:26:17.329 --> 00:26:18.870
You don't have to
set it up yourself,

00:26:18.870 --> 00:26:20.620
you don't have to
manage your own servers.

00:26:20.620 --> 00:26:23.225
You can just log into the
website and set up an account.

00:26:23.225 --> 00:26:25.350
But that's actually not
what I'm showing you today.

00:26:25.350 --> 00:26:27.016
I'm actually showing
you the open source

00:26:27.016 --> 00:26:28.170
version of drone.io.

00:26:28.170 --> 00:26:29.670
So this is actually
something you'll

00:26:29.670 --> 00:26:33.970
be able to download and
run on your own servers.

00:26:33.970 --> 00:26:35.830
If you're running
Jenkins today, this

00:26:35.830 --> 00:26:37.940
would be an alternate solution.

00:26:37.940 --> 00:26:39.976
So we actually haven't
showed this yet,

00:26:39.976 --> 00:26:41.850
and it's not scheduled
to come out next week.

00:26:41.850 --> 00:26:43.349
But I was really
excited to show it,

00:26:43.349 --> 00:26:45.760
and I've been waiting
to show this to people,

00:26:45.760 --> 00:26:49.180
so-- bear with me because it's
not quite production ready yet,

00:26:49.180 --> 00:26:51.740
so fingers crossed
to the demo gods

00:26:51.740 --> 00:26:55.365
that Seth was
praying to earlier.

00:26:55.365 --> 00:26:56.740
So we're going to
go in and we're

00:26:56.740 --> 00:27:00.012
going to set up our
repository from GitHub.

00:27:00.012 --> 00:27:01.970
So I'm just going to go
ahead and type that in.

00:27:08.264 --> 00:27:09.680
I think that's
what it was called.

00:27:12.220 --> 00:27:14.840
All right, so just that
simple, we added the project,

00:27:14.840 --> 00:27:17.320
it actually linked it to
GitHub, it added a key,

00:27:17.320 --> 00:27:20.210
it set up hooks that
will automatically

00:27:20.210 --> 00:27:24.220
trigger a build every time a
developer pushes a code change.

00:27:24.220 --> 00:27:28.090
So very simple to get
up and running with CI,

00:27:28.090 --> 00:27:30.750
especially if you're kind
of used to downloading,

00:27:30.750 --> 00:27:32.890
installing Jenkins,
installing software,

00:27:32.890 --> 00:27:34.282
all that kind of stuff.

00:27:34.282 --> 00:27:36.240
So let me just kind of
jump back into the pitch

00:27:36.240 --> 00:27:38.660
because I think the one
thing we want to show

00:27:38.660 --> 00:27:41.282
is how do we set up a build.

00:27:41.282 --> 00:27:42.990
How do we instruct it
our build commands,

00:27:42.990 --> 00:27:46.560
how do we tell it to compile
or run our Dart code,

00:27:46.560 --> 00:27:47.850
run our Dart tests.

00:27:47.850 --> 00:27:50.380
And we do that with a
simple YAML configuration

00:27:50.380 --> 00:27:54.570
file that you'll check into
the root of your repository.

00:27:54.570 --> 00:27:56.540
And this has some
benefits in the sense

00:27:56.540 --> 00:27:59.500
you could build
branches differently.

00:27:59.500 --> 00:28:01.136
So what does this YAML file do?

00:28:01.136 --> 00:28:02.760
It sits in the root
of your repository.

00:28:02.760 --> 00:28:04.509
The first thing we're
saying is the image,

00:28:04.509 --> 00:28:05.910
we want to use a Dart image.

00:28:05.910 --> 00:28:08.580
The cool thing about Drone
is it runs all your builds

00:28:08.580 --> 00:28:10.370
inside a virtual
machine, and it downloads

00:28:10.370 --> 00:28:14.210
those virtual machines from a
centralized repository using

00:28:14.210 --> 00:28:15.580
a technology called Docker.

00:28:15.580 --> 00:28:18.585
So you actually don't ever have
to install your own software

00:28:18.585 --> 00:28:20.760
or configure your own
build environments.

00:28:20.760 --> 00:28:23.100
We have pre-built
virtual machines, so

00:28:23.100 --> 00:28:26.050
Dart, JAVA for the Java
developers out there,

00:28:26.050 --> 00:28:28.830
I think 14 different languages
and multiple versions.

00:28:28.830 --> 00:28:30.930
The second piece we're
just instructing it,

00:28:30.930 --> 00:28:33.510
what are the build
commands we want it to run?

00:28:33.510 --> 00:28:35.800
And then we can optionally
even deploy to Heroku

00:28:35.800 --> 00:28:37.840
at the end of the
build automatically,

00:28:37.840 --> 00:28:42.030
to get that continuous
delivery flow going.

00:28:42.030 --> 00:28:44.870
And so-- let's see how do
we want to do this-- just

00:28:44.870 --> 00:28:47.420
to jump back in and show
you how this would work.

00:28:47.420 --> 00:28:50.232
This is my GitHub
repository, and we're

00:28:50.232 --> 00:28:51.690
going to make a
change to this file

00:28:51.690 --> 00:28:54.409
to just trigger a
build in real time.

00:28:54.409 --> 00:28:55.200
It should email me.

00:28:55.200 --> 00:28:58.020
That's my email address, so
feel free to send me a note

00:28:58.020 --> 00:29:00.472
if you ever want to say hi.

00:29:00.472 --> 00:29:01.930
And we're going to
make the change.

00:29:04.530 --> 00:29:08.490
And we're notified via
WebSocket new build running.

00:29:08.490 --> 00:29:10.570
I'm going to go
ahead and click that.

00:29:10.570 --> 00:29:13.780
And then we can actually see
the build output streaming live

00:29:13.780 --> 00:29:17.580
in real time, so it's going
to run our build test.

00:29:17.580 --> 00:29:20.650
So this is a technology
that is available today

00:29:20.650 --> 00:29:22.550
online for if you're
developing open source

00:29:22.550 --> 00:29:23.850
projects, open source Dart.

00:29:23.850 --> 00:29:26.440
Feel free to use this to
automate your unit tests,

00:29:26.440 --> 00:29:27.950
automate your deployments.

00:29:27.950 --> 00:29:33.900
And if you're interested when we
have this available next week,

00:29:33.900 --> 00:29:37.650
definitely check it out as
the open source project.

00:29:37.650 --> 00:29:39.400
MATT NORRIS: Just a
comment on the benefit

00:29:39.400 --> 00:29:41.740
of continuous integration,
it's really great

00:29:41.740 --> 00:29:44.180
to have a tool like
Drone where you

00:29:44.180 --> 00:29:46.525
don't have to think about
running things all the time.

00:29:49.120 --> 00:29:52.240
Essentially, you just want
to be as lazy as possible.

00:29:52.240 --> 00:29:57.082
You don't want to worry about
having to run any tests.

00:29:57.082 --> 00:29:59.290
You don't want to have to
worry about certain checks.

00:29:59.290 --> 00:30:01.470
As a developer, you
want to do cool stuff,

00:30:01.470 --> 00:30:04.500
you don't want to be bogged
down in the boilerplate.

00:30:04.500 --> 00:30:08.500
And getting on board with
automated testing, automated

00:30:08.500 --> 00:30:10.626
builds, automated
deployment is really, really

00:30:10.626 --> 00:30:12.250
going to help you
out, and you can just

00:30:12.250 --> 00:30:16.470
discover new things, which
is what we like to do.

00:30:16.470 --> 00:30:18.940
So just to recap, what
have we learned today?

00:30:18.940 --> 00:30:21.600
We built an entire
Dart application, so

00:30:21.600 --> 00:30:22.350
client and server.

00:30:22.350 --> 00:30:26.120
We saw that the same code's
used on both client and server.

00:30:26.120 --> 00:30:27.990
We persisted something
to a database,

00:30:27.990 --> 00:30:29.690
so we went round trip.

00:30:29.690 --> 00:30:32.200
We tested things with
various testing tools.

00:30:32.200 --> 00:30:38.074
We saw whether it's through
HTML or the command line,

00:30:38.074 --> 00:30:39.240
and we actually deployed it.

00:30:39.240 --> 00:30:42.390
So we deployed something, and it
was live, it's out in the world

00:30:42.390 --> 00:30:42.960
there.

00:30:42.960 --> 00:30:45.260
And as we were
doing so, we touched

00:30:45.260 --> 00:30:48.950
on a few of the language
features of Dart

00:30:48.950 --> 00:30:52.830
and some additional tools that
can help you with the workflow.

00:30:52.830 --> 00:30:55.020
Again, wrapping up with
that continuous integration

00:30:55.020 --> 00:30:57.890
and really showing
how that could really

00:30:57.890 --> 00:30:59.605
ease your workflow
as a developer.

00:31:02.790 --> 00:31:06.236
BRAD RYDZEWSKI: So, I think in
conclusion, Dart is awesome,

00:31:06.236 --> 00:31:08.110
Dart has an awesome
ecosystem, and it's still

00:31:08.110 --> 00:31:09.620
a very young language.

00:31:09.620 --> 00:31:11.897
And hopefully some
of these tools,

00:31:11.897 --> 00:31:13.980
if you're coming from a
different background, Java

00:31:13.980 --> 00:31:16.490
or whatever, you'll feel
a little more at home,

00:31:16.490 --> 00:31:18.580
and they'll help you be
a little more productive.

00:31:18.580 --> 00:31:20.310
So what should you do?

00:31:20.310 --> 00:31:26.240
Try Dart, test things,
use tools, and deploy.

00:31:26.240 --> 00:31:30.110
So thank you, everyone, and we'd
love to take some questions.

00:31:30.110 --> 00:31:36.130
[APPLAUSE]

00:31:36.130 --> 00:31:42.141
AUDIENCE: So, the tool you
demonstrated for drone.io,

00:31:42.141 --> 00:31:44.890
was that a new tool
that is [INAUDIBLE]?

00:31:44.890 --> 00:31:46.609
BRAD RYDZEWSKI: Yes, so--- When

00:31:46.609 --> 00:31:48.150
AUDIENCE: When about
might it be out,

00:31:48.150 --> 00:31:50.080
and what is it-- who
does it serve, exactly?

00:31:50.080 --> 00:31:53.920
BRAD RYDZEWSKI: Yeah, so
website drone.io that is live,

00:31:53.920 --> 00:31:56.125
it's been live for a
year, and I think of it

00:31:56.125 --> 00:31:58.570
as like a hosted Jenkins
for anyone to use.

00:31:58.570 --> 00:32:00.460
But what I demoed is
the open source addition

00:32:00.460 --> 00:32:02.637
that you can download,
install, and run directly

00:32:02.637 --> 00:32:04.470
on your own servers,
and you should see that

00:32:04.470 --> 00:32:06.600
literally any time in
the next couple days.

00:32:06.600 --> 00:32:08.308
I was hoping it would
be ready for today,

00:32:08.308 --> 00:32:11.060
but you know how things go.

00:32:11.060 --> 00:32:13.060
It's targeted at people
who want to use Jenkins.

00:32:13.060 --> 00:32:17.736
Maybe you want to do CI, but
you want it on your own servers.

00:32:17.736 --> 00:32:19.110
AUDIENCE: And
that's called what?

00:32:19.110 --> 00:32:23.530
BRAD RYDZEWSKI: It's called
Drone, drone.io is the website.

00:32:23.530 --> 00:32:28.050
And so yes, sometime next
week, we'll be announcing it.

00:32:28.050 --> 00:32:30.300
We usually announce that
stuff on Twitter or whatever,

00:32:30.300 --> 00:32:32.049
so if it's something
you're interested in,

00:32:32.049 --> 00:32:35.720
find us on Twitter as
we're making announcements.

00:32:35.720 --> 00:32:41.450
We're also actually giving a
talk related to it, Dart Plus

00:32:41.450 --> 00:32:45.160
Docker Virtualization
and Drone on Thursday

00:32:45.160 --> 00:32:47.310
at Rackspace in
downtown San Francisco.

00:32:47.310 --> 00:32:49.520
So if you're in that area,
you should definitely

00:32:49.520 --> 00:32:51.130
come to that talk as well.

00:32:51.130 --> 00:32:53.470
And Seth will be there,
but not speaking,

00:32:53.470 --> 00:32:55.560
but you could probably
ask him questions

00:32:55.560 --> 00:32:59.879
that you didn't get ask
here, there if you want.

00:32:59.879 --> 00:33:01.170
MATT NORRIS: No pressure, Seth.

00:33:01.170 --> 00:33:02.827
BRAD RYDZEWSKI: Yeah.

00:33:02.827 --> 00:33:03.660
Any other questions?

00:33:06.260 --> 00:33:07.260
Yes.

00:33:07.260 --> 00:33:09.480
AUDIENCE: Is there any
memory issues [INAUDIBLE]

00:33:09.480 --> 00:33:10.146
virtual machine?

00:33:10.146 --> 00:33:12.070
I've been using those
for almonst a year

00:33:12.070 --> 00:33:15.918
now and finding some
performance and memory issues.

00:33:15.918 --> 00:33:19.365
This one is new to
me, so [INAUDIBLE]

00:33:19.365 --> 00:33:20.990
BRAD RYDZEWSKI: I
think that's probably

00:33:20.990 --> 00:33:24.030
a question for Seth's expertise.

00:33:24.030 --> 00:33:26.820
I'm going to say Dart is awesome
and has no memory issues,

00:33:26.820 --> 00:33:29.420
but I'm going to let
Seth reinforce that fact.

00:33:29.420 --> 00:33:31.240
SETH LADD: No, we don't
have memory leaks,

00:33:31.240 --> 00:33:34.750
so that was easy to answer.

00:33:34.750 --> 00:33:37.095
No, one distinction
of course, I don't

00:33:37.095 --> 00:33:38.470
know what libraries
you're using,

00:33:38.470 --> 00:33:41.680
et cetera, but one thing that we
take very seriously on the Dart

00:33:41.680 --> 00:33:43.570
project is tool ability.

00:33:43.570 --> 00:33:46.980
And so we've been
working on this project

00:33:46.980 --> 00:33:50.300
called Observatory, which
is actually a Polymer app.

00:33:50.300 --> 00:33:52.770
You connect directly
to the virtual machine

00:33:52.770 --> 00:33:54.819
and you get to inspect
it in real time.

00:33:54.819 --> 00:33:56.360
And we're adding
more and more things

00:33:56.360 --> 00:33:59.570
to it, things like what are
my isolates doing right now,

00:33:59.570 --> 00:34:01.880
what's a heat profile
going on right now,

00:34:01.880 --> 00:34:04.290
what's a CPU profile
going on right now.

00:34:04.290 --> 00:34:07.940
So, I don't know every
time people have bugs,

00:34:07.940 --> 00:34:09.800
but we hope to
give you the tools

00:34:09.800 --> 00:34:12.325
to go in and find the
problem and fix the problem.

00:34:15.260 --> 00:34:17.010
BRAD RYDZEWSKI: Any
other questions?

00:34:17.010 --> 00:34:19.230
Or any others for Seth
before he sits back down?

00:34:21.712 --> 00:34:22.920
MATT NORRIS: Thank you again.

00:34:22.920 --> 00:34:24.689
BRAD RYDZEWSKI:
Thanks, everyone.

