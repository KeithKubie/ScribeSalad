WEBVTT
Kind: captions
Language: en

00:00:00.190 --> 00:00:02.450
So what can we do with
a sensor like this?

00:00:02.450 --> 00:00:04.980
Let's first talk about depth estimation.

00:00:04.980 --> 00:00:07.910
Using this sensor and
this kind of a coded aperture, they

00:00:07.910 --> 00:00:12.900
were able to compute depth in one single
image just using this coded aperture.

00:00:12.900 --> 00:00:14.620
This is the output they would get.

00:00:14.620 --> 00:00:18.100
Not perfect, but this is what
you get out of a single image.

00:00:18.100 --> 00:00:21.500
And then they actually came up with
an algorithm that would regularize

00:00:21.500 --> 00:00:24.020
the depth to able to
generate an image like this.

00:00:24.020 --> 00:00:27.360
I encourage you to look at the concept
of regularization, but among other

00:00:27.360 --> 00:00:31.110
things, it basically is one of the best
ways of smoothing out the information.

00:00:31.110 --> 00:00:33.670
And that basically is the way that
this kind of detail were kind of

00:00:33.670 --> 00:00:34.680
gotten rid of.

00:00:34.680 --> 00:00:37.560
And allow you to kind of generate
a much better mask for depth.

00:00:37.560 --> 00:00:40.660
So of course, if you look at
it after doing regularization

00:00:40.660 --> 00:00:43.080
you can actually get a much
better sense of depth.

00:00:43.080 --> 00:00:45.929
In this paper they also kind of
suggest that the sometimes,

00:00:45.929 --> 00:00:49.095
by simple manual intervention,
you can also improve results.

00:00:49.095 --> 00:00:51.205
Another example of this kind of stuff,

00:00:51.205 --> 00:00:54.205
again where you have
regularized depth here.

00:00:54.205 --> 00:00:56.880
Some of the stuff is lost, but
again, from a simple camera,

00:00:56.880 --> 00:00:59.463
you can actually do quite well
with these types of things.

00:00:59.463 --> 00:01:03.263
And here, by just adding a little
bit of corrections manually you can

00:01:03.263 --> 00:01:07.148
actually now get the shapes that you
wanted, or the depth that you wanted.

00:01:07.148 --> 00:01:10.610
And these are the gestures that were
actually acquired to help you do this.

00:01:10.610 --> 00:01:12.670
Let's look at a few exam,
other examples.

00:01:12.670 --> 00:01:16.090
This is an example of focus corrections.

00:01:16.090 --> 00:01:20.660
So, of course, this is an input and you
can see a lot of focusing, you know, and

00:01:20.660 --> 00:01:23.070
defocusing artifacts here.

00:01:23.070 --> 00:01:26.600
Of course it's not completely
all defocused here.

00:01:26.600 --> 00:01:30.723
But, with this method, now we know
the things we can actually use this to

00:01:30.723 --> 00:01:34.795
deconvolve the thing, and now the whole
image is completely in focus.

00:01:34.795 --> 00:01:37.975
Another example to just look at this is,
this was the original image and

00:01:37.975 --> 00:01:39.885
if you just zoom in,
in this output image.

00:01:39.885 --> 00:01:43.247
And again, the coded image
captured all of the details,

00:01:43.247 --> 00:01:46.680
allowing you to after the fact,
in a post-editing mode,

00:01:46.680 --> 00:01:49.710
be able to now actually
visualize a focused image.

00:01:49.710 --> 00:01:54.520
Another close-up is this example here,
when given an input image of two people.

00:01:54.520 --> 00:01:57.420
One you can see is badly focused,
and of course,

00:01:57.420 --> 00:01:59.430
now the whole image has
been focused correctly.

00:01:59.430 --> 00:02:01.650
Again, the camera captured
all the information and

00:02:01.650 --> 00:02:03.320
you can do this after the fact.

00:02:03.320 --> 00:02:06.870
And, the example again is the original
image had a lot of focus blur, and

00:02:06.870 --> 00:02:09.530
you can see a much sharper
image as the output.

00:02:09.530 --> 00:02:12.720
Of course, we could do some sort
of you know, naive sharpening and

00:02:12.720 --> 00:02:16.240
stuff like that and get simple
examples like this on this image and

00:02:16.240 --> 00:02:17.720
again, there are methods out there.

00:02:17.720 --> 00:02:21.540
But again, the point basically being
this was done on the camera itself

00:02:21.540 --> 00:02:22.950
with the coded aperture.

