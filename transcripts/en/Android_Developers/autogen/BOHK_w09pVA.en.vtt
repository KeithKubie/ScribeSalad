WEBVTT
Kind: captions
Language: en

00:00:01.420 --> 00:00:04.510
 
[Music]

00:00:04.510 --> 00:00:04.520
[Music]
 

00:00:04.520 --> 00:00:07.550
[Music]
my name is Igor I'm an engineer in the

00:00:07.550 --> 00:00:07.560
my name is Igor I'm an engineer in the
 

00:00:07.560 --> 00:00:10.339
my name is Igor I'm an engineer in the
Android team hey my name is Sergey and I

00:00:10.339 --> 00:00:10.349
Android team hey my name is Sergey and I
 

00:00:10.349 --> 00:00:12.830
Android team hey my name is Sergey and I
work in the same team hi I'm Sean I'm

00:00:12.830 --> 00:00:12.840
work in the same team hi I'm Sean I'm
 

00:00:12.840 --> 00:00:15.440
work in the same team hi I'm Sean I'm
from Android dev rel okay today we are

00:00:15.440 --> 00:00:15.450
from Android dev rel okay today we are
 

00:00:15.450 --> 00:00:17.750
from Android dev rel okay today we are
going to talk about qualities on

00:00:17.750 --> 00:00:17.760
going to talk about qualities on
 

00:00:17.760 --> 00:00:20.990
going to talk about qualities on
androids but before we talk about that

00:00:20.990 --> 00:00:21.000
androids but before we talk about that
 

00:00:21.000 --> 00:00:22.490
androids but before we talk about that
let's try to figure out like why do you

00:00:22.490 --> 00:00:22.500
let's try to figure out like why do you
 

00:00:22.500 --> 00:00:25.250
let's try to figure out like why do you
even need some qualities and to

00:00:25.250 --> 00:00:25.260
even need some qualities and to
 

00:00:25.260 --> 00:00:27.380
even need some qualities and to
understand that let's get how you write

00:00:27.380 --> 00:00:27.390
understand that let's get how you write
 

00:00:27.390 --> 00:00:31.429
understand that let's get how you write
UI code on Android so this is the dream

00:00:31.429 --> 00:00:31.439
UI code on Android so this is the dream
 

00:00:31.439 --> 00:00:34.010
UI code on Android so this is the dream
code we want to write you like color

00:00:34.010 --> 00:00:34.020
code we want to write you like color
 

00:00:34.020 --> 00:00:36.319
code we want to write you like color
function makes a network request

00:00:36.319 --> 00:00:36.329
function makes a network request
 

00:00:36.329 --> 00:00:39.380
function makes a network request
whatever you get the user set it on the

00:00:39.380 --> 00:00:39.390
whatever you get the user set it on the
 

00:00:39.390 --> 00:00:41.479
whatever you get the user set it on the
text view this is what you want to write

00:00:41.479 --> 00:00:41.489
text view this is what you want to write
 

00:00:41.489 --> 00:00:43.850
text view this is what you want to write
but if you write that you get an

00:00:43.850 --> 00:00:43.860
but if you write that you get an
 

00:00:43.860 --> 00:00:45.650
but if you write that you get an
exception because you cannot make a

00:00:45.650 --> 00:00:45.660
exception because you cannot make a
 

00:00:45.660 --> 00:00:48.590
exception because you cannot make a
network request on the main thread easy

00:00:48.590 --> 00:00:48.600
network request on the main thread easy
 

00:00:48.600 --> 00:00:51.619
network request on the main thread easy
we just put an insider threat and run

00:00:51.619 --> 00:00:51.629
we just put an insider threat and run
 

00:00:51.629 --> 00:00:54.410
we just put an insider threat and run
the code now you're going to complain is

00:00:54.410 --> 00:00:54.420
the code now you're going to complain is
 

00:00:54.420 --> 00:00:56.150
the code now you're going to complain is
the text view which is like you cannot

00:00:56.150 --> 00:00:56.160
the text view which is like you cannot
 

00:00:56.160 --> 00:00:57.770
the text view which is like you cannot
touch the UI thread from a background

00:00:57.770 --> 00:00:57.780
touch the UI thread from a background
 

00:00:57.780 --> 00:01:01.880
touch the UI thread from a background
thread and okay go write this kind of

00:01:01.880 --> 00:01:01.890
thread and okay go write this kind of
 

00:01:01.890 --> 00:01:04.520
thread and okay go write this kind of
code where you make it a synchronous you

00:01:04.520 --> 00:01:04.530
code where you make it a synchronous you
 

00:01:04.530 --> 00:01:06.830
code where you make it a synchronous you
provide a callback it runs on the

00:01:06.830 --> 00:01:06.840
provide a callback it runs on the
 

00:01:06.840 --> 00:01:08.390
provide a callback it runs on the
background thread and cause your

00:01:08.390 --> 00:01:08.400
background thread and cause your
 

00:01:08.400 --> 00:01:11.090
background thread and cause your
callback on the UI thread and this code

00:01:11.090 --> 00:01:11.100
callback on the UI thread and this code
 

00:01:11.100 --> 00:01:13.940
callback on the UI thread and this code
works fine except if you're writing code

00:01:13.940 --> 00:01:13.950
works fine except if you're writing code
 

00:01:13.950 --> 00:01:16.130
works fine except if you're writing code
like this you're gonna receive out of

00:01:16.130 --> 00:01:16.140
like this you're gonna receive out of
 

00:01:16.140 --> 00:01:18.140
like this you're gonna receive out of
out of memory exceptions because you're

00:01:18.140 --> 00:01:18.150
out of memory exceptions because you're
 

00:01:18.150 --> 00:01:20.179
out of memory exceptions because you're
going to be leaking those callbacks left

00:01:20.179 --> 00:01:20.189
going to be leaking those callbacks left
 

00:01:20.189 --> 00:01:22.850
going to be leaking those callbacks left
and right there's a solution to this as

00:01:22.850 --> 00:01:22.860
and right there's a solution to this as
 

00:01:22.860 --> 00:01:25.460
and right there's a solution to this as
well where we can like have an

00:01:25.460 --> 00:01:25.470
well where we can like have an
 

00:01:25.470 --> 00:01:27.560
well where we can like have an
understanding of a subscription that

00:01:27.560 --> 00:01:27.570
understanding of a subscription that
 

00:01:27.570 --> 00:01:29.899
understanding of a subscription that
keeps his chain and whenever you're a

00:01:29.899 --> 00:01:29.909
keeps his chain and whenever you're a
 

00:01:29.909 --> 00:01:31.929
keeps his chain and whenever you're a
stop we can just cancel the subscription

00:01:31.929 --> 00:01:31.939
stop we can just cancel the subscription
 

00:01:31.939 --> 00:01:35.149
stop we can just cancel the subscription
that one works but then you end up

00:01:35.149 --> 00:01:35.159
that one works but then you end up
 

00:01:35.159 --> 00:01:38.690
that one works but then you end up
something like this and I'm not making

00:01:38.690 --> 00:01:38.700
something like this and I'm not making
 

00:01:38.700 --> 00:01:40.850
something like this and I'm not making
this up by the way three years ago when

00:01:40.850 --> 00:01:40.860
this up by the way three years ago when
 

00:01:40.860 --> 00:01:42.889
this up by the way three years ago when
we started architecture components I was

00:01:42.889 --> 00:01:42.899
we started architecture components I was
 

00:01:42.899 --> 00:01:45.410
we started architecture components I was
looking at the Google app code and I

00:01:45.410 --> 00:01:45.420
looking at the Google app code and I
 

00:01:45.420 --> 00:01:48.080
looking at the Google app code and I
found one application that had 26 lines

00:01:48.080 --> 00:01:48.090
found one application that had 26 lines
 

00:01:48.090 --> 00:01:50.990
found one application that had 26 lines
of amount math unregister so if it

00:01:50.990 --> 00:01:51.000
of amount math unregister so if it
 

00:01:51.000 --> 00:01:53.179
of amount math unregister so if it
happens at Google it happens everywhere

00:01:53.179 --> 00:01:53.189
happens at Google it happens everywhere
 

00:01:53.189 --> 00:01:55.999
happens at Google it happens everywhere
like we'd always write the base code but

00:01:55.999 --> 00:01:56.009
like we'd always write the base code but
 

00:01:56.009 --> 00:01:58.370
like we'd always write the base code but
there's a solution to this as well which

00:01:58.370 --> 00:01:58.380
there's a solution to this as well which
 

00:01:58.380 --> 00:02:00.350
there's a solution to this as well which
if you are using something like Eric's

00:02:00.350 --> 00:02:00.360
if you are using something like Eric's
 

00:02:00.360 --> 00:02:03.260
if you are using something like Eric's
Java and so this function returns an

00:02:03.260 --> 00:02:03.270
Java and so this function returns an
 

00:02:03.270 --> 00:02:06.200
Java and so this function returns an
observable you can just use the auto

00:02:06.200 --> 00:02:06.210
observable you can just use the auto
 

00:02:06.210 --> 00:02:09.410
observable you can just use the auto
dispose library associated subscription

00:02:09.410 --> 00:02:09.420
dispose library associated subscription
 

00:02:09.420 --> 00:02:12.619
dispose library associated subscription
with your real life cycle and safely

00:02:12.619 --> 00:02:12.629
with your real life cycle and safely
 

00:02:12.629 --> 00:02:13.820
with your real life cycle and safely
subscribe

00:02:13.820 --> 00:02:13.830
subscribe
 

00:02:13.830 --> 00:02:16.580
subscribe
and this works perfectly similarly you

00:02:16.580 --> 00:02:16.590
and this works perfectly similarly you
 

00:02:16.590 --> 00:02:18.530
and this works perfectly similarly you
could be using live data which enforces

00:02:18.530 --> 00:02:18.540
could be using live data which enforces
 

00:02:18.540 --> 00:02:20.600
could be using live data which enforces
you to have a life cycle to observe and

00:02:20.600 --> 00:02:20.610
you to have a life cycle to observe and
 

00:02:20.610 --> 00:02:24.470
you to have a life cycle to observe and
this also works so this whole problem

00:02:24.470 --> 00:02:24.480
this also works so this whole problem
 

00:02:24.480 --> 00:02:26.570
this also works so this whole problem
right why are we even talking here about

00:02:26.570 --> 00:02:26.580
right why are we even talking here about
 

00:02:26.580 --> 00:02:29.890
right why are we even talking here about
this if there's already good solutions

00:02:29.890 --> 00:02:29.900
this if there's already good solutions
 

00:02:29.900 --> 00:02:32.630
this if there's already good solutions
every year we run these developer

00:02:32.630 --> 00:02:32.640
every year we run these developer
 

00:02:32.640 --> 00:02:34.520
every year we run these developer
benchmark service we ask the voters how

00:02:34.520 --> 00:02:34.530
benchmark service we ask the voters how
 

00:02:34.530 --> 00:02:36.050
benchmark service we ask the voters how
are they doing but are there problems

00:02:36.050 --> 00:02:36.060
are they doing but are there problems
 

00:02:36.060 --> 00:02:39.470
are they doing but are there problems
and the service we run last year one of

00:02:39.470 --> 00:02:39.480
and the service we run last year one of
 

00:02:39.480 --> 00:02:41.630
and the service we run last year one of
the top cop plays was threading and

00:02:41.630 --> 00:02:41.640
the top cop plays was threading and
 

00:02:41.640 --> 00:02:44.360
the top cop plays was threading and
concurrency developer says this is hard

00:02:44.360 --> 00:02:44.370
concurrency developer says this is hard
 

00:02:44.370 --> 00:02:47.690
concurrency developer says this is hard
on Android and one of the top Lucas was

00:02:47.690 --> 00:02:47.700
on Android and one of the top Lucas was
 

00:02:47.700 --> 00:02:49.640
on Android and one of the top Lucas was
this week what we call live data plus

00:02:49.640 --> 00:02:49.650
this week what we call live data plus
 

00:02:49.650 --> 00:02:52.250
this week what we call live data plus
once the people want us to extend live

00:02:52.250 --> 00:02:52.260
once the people want us to extend live
 

00:02:52.260 --> 00:02:55.730
once the people want us to extend live
data make it more like Eric's Chara and

00:02:55.730 --> 00:02:55.740
data make it more like Eric's Chara and
 

00:02:55.740 --> 00:02:59.210
data make it more like Eric's Chara and
you're like why why do you want this we

00:02:59.210 --> 00:02:59.220
you're like why why do you want this we
 

00:02:59.220 --> 00:03:01.160
you're like why why do you want this we
have good solutions just use one of them

00:03:01.160 --> 00:03:01.170
have good solutions just use one of them
 

00:03:01.170 --> 00:03:03.530
have good solutions just use one of them
so we didn't bother we do best when we

00:03:03.530 --> 00:03:03.540
so we didn't bother we do best when we
 

00:03:03.540 --> 00:03:06.650
so we didn't bother we do best when we
don't know we did a UX research this is

00:03:06.650 --> 00:03:06.660
don't know we did a UX research this is
 

00:03:06.660 --> 00:03:08.150
don't know we did a UX research this is
a user experience research on

00:03:08.150 --> 00:03:08.160
a user experience research on
 

00:03:08.160 --> 00:03:11.720
a user experience research on
concurrency so we did in-depth

00:03:11.720 --> 00:03:11.730
concurrency so we did in-depth
 

00:03:11.730 --> 00:03:13.760
concurrency so we did in-depth
interviews with nine developers what

00:03:13.760 --> 00:03:13.770
interviews with nine developers what
 

00:03:13.770 --> 00:03:16.250
interviews with nine developers what
they do is they do the regular work for

00:03:16.250 --> 00:03:16.260
they do is they do the regular work for
 

00:03:16.260 --> 00:03:18.650
they do is they do the regular work for
a couple of weeks in their own company

00:03:18.650 --> 00:03:18.660
a couple of weeks in their own company
 

00:03:18.660 --> 00:03:20.770
a couple of weeks in their own company
and every time they see a problem about

00:03:20.770 --> 00:03:20.780
and every time they see a problem about
 

00:03:20.780 --> 00:03:24.560
and every time they see a problem about
concurrency like this observable T they

00:03:24.560 --> 00:03:24.570
concurrency like this observable T they
 

00:03:24.570 --> 00:03:26.479
concurrency like this observable T they
just write it down this was the problem

00:03:26.479 --> 00:03:26.489
just write it down this was the problem
 

00:03:26.489 --> 00:03:28.699
just write it down this was the problem
this is I sold it and this is how I feel

00:03:28.699 --> 00:03:28.709
this is I sold it and this is how I feel
 

00:03:28.709 --> 00:03:31.460
this is I sold it and this is how I feel
about it and in this study we focused on

00:03:31.460 --> 00:03:31.470
about it and in this study we focused on
 

00:03:31.470 --> 00:03:33.500
about it and in this study we focused on
three main things focused on live data

00:03:33.500 --> 00:03:33.510
three main things focused on live data
 

00:03:33.510 --> 00:03:36.260
three main things focused on live data
which is our observable date older we

00:03:36.260 --> 00:03:36.270
which is our observable date older we
 

00:03:36.270 --> 00:03:38.449
which is our observable date older we
focused on Eric Shaw with the reactive

00:03:38.449 --> 00:03:38.459
focused on Eric Shaw with the reactive
 

00:03:38.459 --> 00:03:40.970
focused on Eric Shaw with the reactive
Sims library and qualities which

00:03:40.970 --> 00:03:40.980
Sims library and qualities which
 

00:03:40.980 --> 00:03:43.660
Sims library and qualities which
provides suspend of all computations and

00:03:43.660 --> 00:03:43.670
provides suspend of all computations and
 

00:03:43.670 --> 00:03:46.580
provides suspend of all computations and
in the result of that study this was the

00:03:46.580 --> 00:03:46.590
in the result of that study this was the
 

00:03:46.590 --> 00:03:49.220
in the result of that study this was the
conclusion for live data people say we

00:03:49.220 --> 00:03:49.230
conclusion for live data people say we
 

00:03:49.230 --> 00:03:51.620
conclusion for live data people say we
love it but we want a complete solution

00:03:51.620 --> 00:03:51.630
love it but we want a complete solution
 

00:03:51.630 --> 00:03:54.080
love it but we want a complete solution
in fact is funny live data doesn't even

00:03:54.080 --> 00:03:54.090
in fact is funny live data doesn't even
 

00:03:54.090 --> 00:03:56.630
in fact is funny live data doesn't even
support anything but a main thread but

00:03:56.630 --> 00:03:56.640
support anything but a main thread but
 

00:03:56.640 --> 00:03:59.350
support anything but a main thread but
we talked about it in a concurrent study

00:03:59.350 --> 00:03:59.360
we talked about it in a concurrent study
 

00:03:59.360 --> 00:04:02.780
we talked about it in a concurrent study
for our Xterra it is amazing people love

00:04:02.780 --> 00:04:02.790
for our Xterra it is amazing people love
 

00:04:02.790 --> 00:04:06.229
for our Xterra it is amazing people love
and hate it they love how powerful it is

00:04:06.229 --> 00:04:06.239
and hate it they love how powerful it is
 

00:04:06.239 --> 00:04:08.479
and hate it they love how powerful it is
but the common complaint we always heard

00:04:08.479 --> 00:04:08.489
but the common complaint we always heard
 

00:04:08.489 --> 00:04:10.850
but the common complaint we always heard
was well as always misused it feels like

00:04:10.850 --> 00:04:10.860
was well as always misused it feels like
 

00:04:10.860 --> 00:04:14.120
was well as always misused it feels like
an overkill and for qualities this was

00:04:14.120 --> 00:04:14.130
an overkill and for qualities this was
 

00:04:14.130 --> 00:04:16.940
an overkill and for qualities this was
like it really looks like the best

00:04:16.940 --> 00:04:16.950
like it really looks like the best
 

00:04:16.950 --> 00:04:19.789
like it really looks like the best
solution but I'm not sure it's very new

00:04:19.789 --> 00:04:19.799
solution but I'm not sure it's very new
 

00:04:19.799 --> 00:04:22.580
solution but I'm not sure it's very new
it's not major so this was the overall

00:04:22.580 --> 00:04:22.590
it's not major so this was the overall
 

00:04:22.590 --> 00:04:25.600
it's not major so this was the overall
conclusion we said we need a solution

00:04:25.600 --> 00:04:25.610
conclusion we said we need a solution
 

00:04:25.610 --> 00:04:27.470
conclusion we said we need a solution
that is simple

00:04:27.470 --> 00:04:27.480
that is simple
 

00:04:27.480 --> 00:04:29.720
that is simple
it shouldn't be hard to learn that

00:04:29.720 --> 00:04:29.730
it shouldn't be hard to learn that
 

00:04:29.730 --> 00:04:32.600
it shouldn't be hard to learn that
solution it should be compressive so you

00:04:32.600 --> 00:04:32.610
solution it should be compressive so you
 

00:04:32.610 --> 00:04:34.310
solution it should be compressive so you
should be able to scale to different use

00:04:34.310 --> 00:04:34.320
should be able to scale to different use
 

00:04:34.320 --> 00:04:37.190
should be able to scale to different use
cases and it should be robots that

00:04:37.190 --> 00:04:37.200
cases and it should be robots that
 

00:04:37.200 --> 00:04:40.250
cases and it should be robots that
should be built in testing stories so

00:04:40.250 --> 00:04:40.260
should be built in testing stories so
 

00:04:40.260 --> 00:04:43.070
should be built in testing stories so
made two decisions we said okay we are

00:04:43.070 --> 00:04:43.080
made two decisions we said okay we are
 

00:04:43.080 --> 00:04:44.990
made two decisions we said okay we are
going to have first-class quality

00:04:44.990 --> 00:04:45.000
going to have first-class quality
 

00:04:45.000 --> 00:04:48.800
going to have first-class quality
support in jetpack and we are going to

00:04:48.800 --> 00:04:48.810
support in jetpack and we are going to
 

00:04:48.810 --> 00:04:51.290
support in jetpack and we are going to
have more support for rxjava in our

00:04:51.290 --> 00:04:51.300
have more support for rxjava in our
 

00:04:51.300 --> 00:04:54.860
have more support for rxjava in our
documentation but today it is all about

00:04:54.860 --> 00:04:54.870
documentation but today it is all about
 

00:04:54.870 --> 00:04:56.000
documentation but today it is all about
Cortese

00:04:56.000 --> 00:04:56.010
Cortese
 

00:04:56.010 --> 00:04:58.070
Cortese
so shut why don't you tell us a little

00:04:58.070 --> 00:04:58.080
so shut why don't you tell us a little
 

00:04:58.080 --> 00:05:01.040
so shut why don't you tell us a little
bit more about what qualities are thanks

00:05:01.040 --> 00:05:01.050
bit more about what qualities are thanks
 

00:05:01.050 --> 00:05:03.440
bit more about what qualities are thanks
you so I want to just take five minutes

00:05:03.440 --> 00:05:03.450
you so I want to just take five minutes
 

00:05:03.450 --> 00:05:06.020
you so I want to just take five minutes
and talk a little bit about what problem

00:05:06.020 --> 00:05:06.030
and talk a little bit about what problem
 

00:05:06.030 --> 00:05:08.600
and talk a little bit about what problem
carotenes are great at solving so in a

00:05:08.600 --> 00:05:08.610
carotenes are great at solving so in a
 

00:05:08.610 --> 00:05:10.670
carotenes are great at solving so in a
sentence the main problem the correcting

00:05:10.670 --> 00:05:10.680
sentence the main problem the correcting
 

00:05:10.680 --> 00:05:12.500
sentence the main problem the correcting
solve is simplifying async programming

00:05:12.500 --> 00:05:12.510
solve is simplifying async programming
 

00:05:12.510 --> 00:05:15.410
solve is simplifying async programming
by replacing callbacks which is quite

00:05:15.410 --> 00:05:15.420
by replacing callbacks which is quite
 

00:05:15.420 --> 00:05:17.240
by replacing callbacks which is quite
abstract so let's look at some samples

00:05:17.240 --> 00:05:17.250
abstract so let's look at some samples
 

00:05:17.250 --> 00:05:19.280
abstract so let's look at some samples
and see what that looks like I'm gonna

00:05:19.280 --> 00:05:19.290
and see what that looks like I'm gonna
 

00:05:19.290 --> 00:05:21.320
and see what that looks like I'm gonna
make an imaginary Network request three

00:05:21.320 --> 00:05:21.330
make an imaginary Network request three
 

00:05:21.330 --> 00:05:23.420
make an imaginary Network request three
ways the first style is what's called a

00:05:23.420 --> 00:05:23.430
ways the first style is what's called a
 

00:05:23.430 --> 00:05:25.430
ways the first style is what's called a
blocking style this is where the result

00:05:25.430 --> 00:05:25.440
blocking style this is where the result
 

00:05:25.440 --> 00:05:27.410
blocking style this is where the result
is returned directly from the function

00:05:27.410 --> 00:05:27.420
is returned directly from the function
 

00:05:27.420 --> 00:05:30.200
is returned directly from the function
let's see how that executes and for fun

00:05:30.200 --> 00:05:30.210
let's see how that executes and for fun
 

00:05:30.210 --> 00:05:32.560
let's see how that executes and for fun
I'm gonna run that on the main thread

00:05:32.560 --> 00:05:32.570
I'm gonna run that on the main thread
 

00:05:32.570 --> 00:05:34.040
I'm gonna run that on the main thread
when called

00:05:34.040 --> 00:05:34.050
when called
 

00:05:34.050 --> 00:05:35.930
when called
a blocking network Hall will block the

00:05:35.930 --> 00:05:35.940
a blocking network Hall will block the
 

00:05:35.940 --> 00:05:37.730
a blocking network Hall will block the
thread that called it so the entire time

00:05:37.730 --> 00:05:37.740
thread that called it so the entire time
 

00:05:37.740 --> 00:05:40.820
thread that called it so the entire time
that Network request is running the main

00:05:40.820 --> 00:05:40.830
that Network request is running the main
 

00:05:40.830 --> 00:05:42.320
that Network request is running the main
thread will be blocked and that's the

00:05:42.320 --> 00:05:42.330
thread will be blocked and that's the
 

00:05:42.330 --> 00:05:44.060
thread will be blocked and that's the
thread that has to update the UI and

00:05:44.060 --> 00:05:44.070
thread that has to update the UI and
 

00:05:44.070 --> 00:05:46.100
thread that has to update the UI and
handle user touches so the user will see

00:05:46.100 --> 00:05:46.110
handle user touches so the user will see
 

00:05:46.110 --> 00:05:47.660
handle user touches so the user will see
your app is frozen or it might even

00:05:47.660 --> 00:05:47.670
your app is frozen or it might even
 

00:05:47.670 --> 00:05:50.180
your app is frozen or it might even
crash now I do want to pause and say

00:05:50.180 --> 00:05:50.190
crash now I do want to pause and say
 

00:05:50.190 --> 00:05:51.440
crash now I do want to pause and say
there's nothing wrong with a blocking

00:05:51.440 --> 00:05:51.450
there's nothing wrong with a blocking
 

00:05:51.450 --> 00:05:53.450
there's nothing wrong with a blocking
style of network api's but it's not what

00:05:53.450 --> 00:05:53.460
style of network api's but it's not what
 

00:05:53.460 --> 00:05:55.340
style of network api's but it's not what
we want to do on android so to fix that

00:05:55.340 --> 00:05:55.350
we want to do on android so to fix that
 

00:05:55.350 --> 00:05:57.440
we want to do on android so to fix that
as he'd already talked about we commonly

00:05:57.440 --> 00:05:57.450
as he'd already talked about we commonly
 

00:05:57.450 --> 00:06:00.110
as he'd already talked about we commonly
introduce callbacks so let's see how bad

00:06:00.110 --> 00:06:00.120
introduce callbacks so let's see how bad
 

00:06:00.120 --> 00:06:02.150
introduce callbacks so let's see how bad
executes we're still gonna call this

00:06:02.150 --> 00:06:02.160
executes we're still gonna call this
 

00:06:02.160 --> 00:06:04.520
executes we're still gonna call this
from the main thread but now when fetch

00:06:04.520 --> 00:06:04.530
from the main thread but now when fetch
 

00:06:04.530 --> 00:06:06.770
from the main thread but now when fetch
user is called the main thread is free

00:06:06.770 --> 00:06:06.780
user is called the main thread is free
 

00:06:06.780 --> 00:06:09.290
user is called the main thread is free
to perform other work it can handle on

00:06:09.290 --> 00:06:09.300
to perform other work it can handle on
 

00:06:09.300 --> 00:06:12.260
to perform other work it can handle on
draw or respond to user touches and the

00:06:12.260 --> 00:06:12.270
draw or respond to user touches and the
 

00:06:12.270 --> 00:06:14.150
draw or respond to user touches and the
networking library is responsible for

00:06:14.150 --> 00:06:14.160
networking library is responsible for
 

00:06:14.160 --> 00:06:16.460
networking library is responsible for
finding another thread to actually run

00:06:16.460 --> 00:06:16.470
finding another thread to actually run
 

00:06:16.470 --> 00:06:19.610
finding another thread to actually run
the request when the result is ready the

00:06:19.610 --> 00:06:19.620
the request when the result is ready the
 

00:06:19.620 --> 00:06:21.050
the request when the result is ready the
network library can then use with a

00:06:21.050 --> 00:06:21.060
network library can then use with a
 

00:06:21.060 --> 00:06:23.510
network library can then use with a
callback I gave it to callback into my

00:06:23.510 --> 00:06:23.520
callback I gave it to callback into my
 

00:06:23.520 --> 00:06:25.570
callback I gave it to callback into my
code and let me know that it's ready

00:06:25.570 --> 00:06:25.580
code and let me know that it's ready
 

00:06:25.580 --> 00:06:28.640
code and let me know that it's ready
let's rewrite that exact same code with

00:06:28.640 --> 00:06:28.650
let's rewrite that exact same code with
 

00:06:28.650 --> 00:06:29.510
let's rewrite that exact same code with
co-routines

00:06:29.510 --> 00:06:29.520
co-routines
 

00:06:29.520 --> 00:06:31.670
co-routines
it looks just like the blocking style

00:06:31.670 --> 00:06:31.680
it looks just like the blocking style
 

00:06:31.680 --> 00:06:34.130
it looks just like the blocking style
the result of fetch user is available

00:06:34.130 --> 00:06:34.140
the result of fetch user is available
 

00:06:34.140 --> 00:06:35.900
the result of fetch user is available
immediately and I don't have to

00:06:35.900 --> 00:06:35.910
immediately and I don't have to
 

00:06:35.910 --> 00:06:38.450
immediately and I don't have to
introduce a callback to tell Collin I

00:06:38.450 --> 00:06:38.460
introduce a callback to tell Collin I
 

00:06:38.460 --> 00:06:39.010
introduce a callback to tell Collin I
want to

00:06:39.010 --> 00:06:39.020
want to
 

00:06:39.020 --> 00:06:40.420
want to
keep this with co-routines it has a

00:06:40.420 --> 00:06:40.430
keep this with co-routines it has a
 

00:06:40.430 --> 00:06:42.610
keep this with co-routines it has a
suspend modifier on the function and

00:06:42.610 --> 00:06:42.620
suspend modifier on the function and
 

00:06:42.620 --> 00:06:45.189
suspend modifier on the function and
when we run it still on the main thread

00:06:45.189 --> 00:06:45.199
when we run it still on the main thread
 

00:06:45.199 --> 00:06:48.100
when we run it still on the main thread
the main thread is unblocked just like

00:06:48.100 --> 00:06:48.110
the main thread is unblocked just like
 

00:06:48.110 --> 00:06:50.950
the main thread is unblocked just like
with callbacks and this is a key concept

00:06:50.950 --> 00:06:50.960
with callbacks and this is a key concept
 

00:06:50.960 --> 00:06:54.100
with callbacks and this is a key concept
of carotenes the networking request

00:06:54.100 --> 00:06:54.110
of carotenes the networking request
 

00:06:54.110 --> 00:06:57.070
of carotenes the networking request
still runs on another thread when the

00:06:57.070 --> 00:06:57.080
still runs on another thread when the
 

00:06:57.080 --> 00:06:59.260
still runs on another thread when the
result is ready it resumes the curry

00:06:59.260 --> 00:06:59.270
result is ready it resumes the curry
 

00:06:59.270 --> 00:07:02.260
result is ready it resumes the curry
team where it left off this code is much

00:07:02.260 --> 00:07:02.270
team where it left off this code is much
 

00:07:02.270 --> 00:07:04.629
team where it left off this code is much
simpler than the callback style while

00:07:04.629 --> 00:07:04.639
simpler than the callback style while
 

00:07:04.639 --> 00:07:06.640
simpler than the callback style while
still ensuring that I can write my

00:07:06.640 --> 00:07:06.650
still ensuring that I can write my
 

00:07:06.650 --> 00:07:08.589
still ensuring that I can write my
Android app and make it never freeze for

00:07:08.589 --> 00:07:08.599
Android app and make it never freeze for
 

00:07:08.599 --> 00:07:11.710
Android app and make it never freeze for
the user this is the key mechanism here

00:07:11.710 --> 00:07:11.720
the user this is the key mechanism here
 

00:07:11.720 --> 00:07:14.980
the user this is the key mechanism here
of correcting suspend and resume when a

00:07:14.980 --> 00:07:14.990
of correcting suspend and resume when a
 

00:07:14.990 --> 00:07:16.870
of correcting suspend and resume when a
KO routine is suspended it's not running

00:07:16.870 --> 00:07:16.880
KO routine is suspended it's not running
 

00:07:16.880 --> 00:07:19.899
KO routine is suspended it's not running
it's paused and when it resumes it picks

00:07:19.899 --> 00:07:19.909
it's paused and when it resumes it picks
 

00:07:19.909 --> 00:07:22.180
it's paused and when it resumes it picks
up from where it left off you can think

00:07:22.180 --> 00:07:22.190
up from where it left off you can think
 

00:07:22.190 --> 00:07:24.969
up from where it left off you can think
of suspending ko routine as taking a

00:07:24.969 --> 00:07:24.979
of suspending ko routine as taking a
 

00:07:24.979 --> 00:07:26.830
of suspending ko routine as taking a
callback from the rest of the function

00:07:26.830 --> 00:07:26.840
callback from the rest of the function
 

00:07:26.840 --> 00:07:29.350
callback from the rest of the function
so you've put it together suspend and

00:07:29.350 --> 00:07:29.360
so you've put it together suspend and
 

00:07:29.360 --> 00:07:31.629
so you've put it together suspend and
resume replaced callbacks we can even

00:07:31.629 --> 00:07:31.639
resume replaced callbacks we can even
 

00:07:31.639 --> 00:07:33.760
resume replaced callbacks we can even
visualize that the callback version and

00:07:33.760 --> 00:07:33.770
visualize that the callback version and
 

00:07:33.770 --> 00:07:36.100
visualize that the callback version and
the co-routine version execute almost

00:07:36.100 --> 00:07:36.110
the co-routine version execute almost
 

00:07:36.110 --> 00:07:38.619
the co-routine version execute almost
exactly the same way let's switch back

00:07:38.619 --> 00:07:38.629
exactly the same way let's switch back
 

00:07:38.629 --> 00:07:41.649
exactly the same way let's switch back
and take a look at fetch user how can we

00:07:41.649 --> 00:07:41.659
and take a look at fetch user how can we
 

00:07:41.659 --> 00:07:43.149
and take a look at fetch user how can we
call a function that makes a network

00:07:43.149 --> 00:07:43.159
call a function that makes a network
 

00:07:43.159 --> 00:07:46.540
call a function that makes a network
request from the main thread to start

00:07:46.540 --> 00:07:46.550
request from the main thread to start
 

00:07:46.550 --> 00:07:48.730
request from the main thread to start
we'll need to make fetch user another

00:07:48.730 --> 00:07:48.740
we'll need to make fetch user another
 

00:07:48.740 --> 00:07:50.050
we'll need to make fetch user another
suspending function

00:07:50.050 --> 00:07:50.060
suspending function
 

00:07:50.060 --> 00:07:51.909
suspending function
this tells Kotlin that it works with

00:07:51.909 --> 00:07:51.919
this tells Kotlin that it works with
 

00:07:51.919 --> 00:07:54.459
this tells Kotlin that it works with
care routines and inside will call

00:07:54.459 --> 00:07:54.469
care routines and inside will call
 

00:07:54.469 --> 00:07:56.290
care routines and inside will call
another suspending function called

00:07:56.290 --> 00:07:56.300
another suspending function called
 

00:07:56.300 --> 00:07:58.629
another suspending function called
with context well pass it dispatchers

00:07:58.629 --> 00:07:58.639
with context well pass it dispatchers
 

00:07:58.639 --> 00:08:00.580
with context well pass it dispatchers
done I am zooming in on those

00:08:00.580 --> 00:08:00.590
done I am zooming in on those
 

00:08:00.590 --> 00:08:02.800
done I am zooming in on those
dispatchers calling gives us three

00:08:02.800 --> 00:08:02.810
dispatchers calling gives us three
 

00:08:02.810 --> 00:08:06.100
dispatchers calling gives us three
dispatchers default IO and main and

00:08:06.100 --> 00:08:06.110
dispatchers default IO and main and
 

00:08:06.110 --> 00:08:08.219
dispatchers default IO and main and
they're used for different things

00:08:08.219 --> 00:08:08.229
they're used for different things
 

00:08:08.229 --> 00:08:11.050
they're used for different things
default should be used for CPU intensive

00:08:11.050 --> 00:08:11.060
default should be used for CPU intensive
 

00:08:11.060 --> 00:08:13.450
default should be used for CPU intensive
work things like transforming a list of

00:08:13.450 --> 00:08:13.460
work things like transforming a list of
 

00:08:13.460 --> 00:08:15.850
work things like transforming a list of
a hundred elements calling des futile or

00:08:15.850 --> 00:08:15.860
a hundred elements calling des futile or
 

00:08:15.860 --> 00:08:18.999
a hundred elements calling des futile or
pre computing text anything that takes

00:08:18.999 --> 00:08:19.009
pre computing text anything that takes
 

00:08:19.009 --> 00:08:20.680
pre computing text anything that takes
too long to run on the main thread

00:08:20.680 --> 00:08:20.690
too long to run on the main thread
 

00:08:20.690 --> 00:08:23.740
too long to run on the main thread
should run on the default dispatcher IO

00:08:23.740 --> 00:08:23.750
should run on the default dispatcher IO
 

00:08:23.750 --> 00:08:26.230
should run on the default dispatcher IO
is a dispatcher that's optimized for

00:08:26.230 --> 00:08:26.240
is a dispatcher that's optimized for
 

00:08:26.240 --> 00:08:28.959
is a dispatcher that's optimized for
blocking Network in disk IO you should

00:08:28.959 --> 00:08:28.969
blocking Network in disk IO you should
 

00:08:28.969 --> 00:08:30.730
blocking Network in disk IO you should
use it anytime you need to write code

00:08:30.730 --> 00:08:30.740
use it anytime you need to write code
 

00:08:30.740 --> 00:08:34.060
use it anytime you need to write code
that blocks an API like writing a file

00:08:34.060 --> 00:08:34.070
that blocks an API like writing a file
 

00:08:34.070 --> 00:08:37.899
that blocks an API like writing a file
or reading from a socket and main this

00:08:37.899 --> 00:08:37.909
or reading from a socket and main this
 

00:08:37.909 --> 00:08:39.779
or reading from a socket and main this
is the main thread on Android and

00:08:39.779 --> 00:08:39.789
is the main thread on Android and
 

00:08:39.789 --> 00:08:42.279
is the main thread on Android and
surprisingly it's our recommendation as

00:08:42.279 --> 00:08:42.289
surprisingly it's our recommendation as
 

00:08:42.289 --> 00:08:44.290
surprisingly it's our recommendation as
the right place to start co-routines in

00:08:44.290 --> 00:08:44.300
the right place to start co-routines in
 

00:08:44.300 --> 00:08:46.090
the right place to start co-routines in
response to UI events

00:08:46.090 --> 00:08:46.100
response to UI events
 

00:08:46.100 --> 00:08:47.920
response to UI events
since you're usually starting para teens

00:08:47.920 --> 00:08:47.930
since you're usually starting para teens
 

00:08:47.930 --> 00:08:50.230
since you're usually starting para teens
from the main thread staying there will

00:08:50.230 --> 00:08:50.240
from the main thread staying there will
 

00:08:50.240 --> 00:08:52.420
from the main thread staying there will
avoid extra work for simple operations

00:08:52.420 --> 00:08:52.430
avoid extra work for simple operations
 

00:08:52.430 --> 00:08:55.120
avoid extra work for simple operations
then when you need to transform a list

00:08:55.120 --> 00:08:55.130
then when you need to transform a list
 

00:08:55.130 --> 00:08:58.270
then when you need to transform a list
or write a file co-routines let you

00:08:58.270 --> 00:08:58.280
or write a file co-routines let you
 

00:08:58.280 --> 00:08:59.980
or write a file co-routines let you
switch to one of the other dispatchers

00:08:59.980 --> 00:08:59.990
switch to one of the other dispatchers
 

00:08:59.990 --> 00:09:03.610
switch to one of the other dispatchers
by using with context with context will

00:09:03.610 --> 00:09:03.620
by using with context with context will
 

00:09:03.620 --> 00:09:06.040
by using with context with context will
run the block that you pass it on the

00:09:06.040 --> 00:09:06.050
run the block that you pass it on the
 

00:09:06.050 --> 00:09:08.140
run the block that you pass it on the
dispatcher you tell it to so this block

00:09:08.140 --> 00:09:08.150
dispatcher you tell it to so this block
 

00:09:08.150 --> 00:09:10.420
dispatcher you tell it to so this block
here is gonna run on dispatchers dot IO

00:09:10.420 --> 00:09:10.430
here is gonna run on dispatchers dot IO
 

00:09:10.430 --> 00:09:12.970
here is gonna run on dispatchers dot IO
and I'm free to make blocking Network

00:09:12.970 --> 00:09:12.980
and I'm free to make blocking Network
 

00:09:12.980 --> 00:09:16.090
and I'm free to make blocking Network
calls this allows us to provide main

00:09:16.090 --> 00:09:16.100
calls this allows us to provide main
 

00:09:16.100 --> 00:09:18.880
calls this allows us to provide main
safe api's you can just make a function

00:09:18.880 --> 00:09:18.890
safe api's you can just make a function
 

00:09:18.890 --> 00:09:20.290
safe api's you can just make a function
that reads and writes from the network

00:09:20.290 --> 00:09:20.300
that reads and writes from the network
 

00:09:20.300 --> 00:09:22.660
that reads and writes from the network
like this and call it from the main

00:09:22.660 --> 00:09:22.670
like this and call it from the main
 

00:09:22.670 --> 00:09:25.000
like this and call it from the main
thread and this is a huge benefit on

00:09:25.000 --> 00:09:25.010
thread and this is a huge benefit on
 

00:09:25.010 --> 00:09:26.740
thread and this is a huge benefit on
Android now I don't have to worry about

00:09:26.740 --> 00:09:26.750
Android now I don't have to worry about
 

00:09:26.750 --> 00:09:29.050
Android now I don't have to worry about
what every single function what thread

00:09:29.050 --> 00:09:29.060
what every single function what thread
 

00:09:29.060 --> 00:09:31.660
what every single function what thread
it needs to run on instead I can just

00:09:31.660 --> 00:09:31.670
it needs to run on instead I can just
 

00:09:31.670 --> 00:09:33.400
it needs to run on instead I can just
call it and the function itself can

00:09:33.400 --> 00:09:33.410
call it and the function itself can
 

00:09:33.410 --> 00:09:34.900
call it and the function itself can
ensure that it's safe to be called from

00:09:34.900 --> 00:09:34.910
ensure that it's safe to be called from
 

00:09:34.910 --> 00:09:38.530
ensure that it's safe to be called from
the main thread to finish up introducing

00:09:38.530 --> 00:09:38.540
the main thread to finish up introducing
 

00:09:38.540 --> 00:09:40.060
the main thread to finish up introducing
pair routines let's take a look at how

00:09:40.060 --> 00:09:40.070
pair routines let's take a look at how
 

00:09:40.070 --> 00:09:42.340
pair routines let's take a look at how
Kotlin implements them every thread has

00:09:42.340 --> 00:09:42.350
Kotlin implements them every thread has
 

00:09:42.350 --> 00:09:44.170
Kotlin implements them every thread has
a call stack it's what you see in the

00:09:44.170 --> 00:09:44.180
a call stack it's what you see in the
 

00:09:44.180 --> 00:09:46.210
a call stack it's what you see in the
debugger or a stack trace it's how

00:09:46.210 --> 00:09:46.220
debugger or a stack trace it's how
 

00:09:46.220 --> 00:09:48.220
debugger or a stack trace it's how
collin keeps track of which function is

00:09:48.220 --> 00:09:48.230
collin keeps track of which function is
 

00:09:48.230 --> 00:09:50.770
collin keeps track of which function is
running and its local variables when you

00:09:50.770 --> 00:09:50.780
running and its local variables when you
 

00:09:50.780 --> 00:09:52.660
running and its local variables when you
call us to spend function Collin needs

00:09:52.660 --> 00:09:52.670
call us to spend function Collin needs
 

00:09:52.670 --> 00:09:54.460
call us to spend function Collin needs
to keep track of the fact it's running a

00:09:54.460 --> 00:09:54.470
to keep track of the fact it's running a
 

00:09:54.470 --> 00:09:56.530
to keep track of the fact it's running a
KO routine instead of a regular function

00:09:56.530 --> 00:09:56.540
KO routine instead of a regular function
 

00:09:56.540 --> 00:09:59.080
KO routine instead of a regular function
I'm gonna represent this as a suspend

00:09:59.080 --> 00:09:59.090
I'm gonna represent this as a suspend
 

00:09:59.090 --> 00:09:59.620
I'm gonna represent this as a suspend
marker

00:09:59.620 --> 00:09:59.630
marker
 

00:09:59.630 --> 00:10:01.570
marker
everything above the suspend marker will

00:10:01.570 --> 00:10:01.580
everything above the suspend marker will
 

00:10:01.580 --> 00:10:03.310
everything above the suspend marker will
be a couraging and everything below will

00:10:03.310 --> 00:10:03.320
be a couraging and everything below will
 

00:10:03.320 --> 00:10:06.610
be a couraging and everything below will
be a regular function then Kotlin calls

00:10:06.610 --> 00:10:06.620
be a regular function then Kotlin calls
 

00:10:06.620 --> 00:10:08.380
be a regular function then Kotlin calls
load user just like a normal function

00:10:08.380 --> 00:10:08.390
load user just like a normal function
 

00:10:08.390 --> 00:10:10.420
load user just like a normal function
it's gonna put a stack entry onto the

00:10:10.420 --> 00:10:10.430
it's gonna put a stack entry onto the
 

00:10:10.430 --> 00:10:12.700
it's gonna put a stack entry onto the
call stack and this is where any local

00:10:12.700 --> 00:10:12.710
call stack and this is where any local
 

00:10:12.710 --> 00:10:14.380
call stack and this is where any local
variables for load user would be stored

00:10:14.380 --> 00:10:14.390
variables for load user would be stored
 

00:10:14.390 --> 00:10:17.320
variables for load user would be stored
and then it just executes until it finds

00:10:17.320 --> 00:10:17.330
and then it just executes until it finds
 

00:10:17.330 --> 00:10:20.740
and then it just executes until it finds
another suspend function call now Kotlin

00:10:20.740 --> 00:10:20.750
another suspend function call now Kotlin
 

00:10:20.750 --> 00:10:22.660
another suspend function call now Kotlin
has to implement suspend how does it do

00:10:22.660 --> 00:10:22.670
has to implement suspend how does it do
 

00:10:22.670 --> 00:10:23.370
has to implement suspend how does it do
that

00:10:23.370 --> 00:10:23.380
that
 

00:10:23.380 --> 00:10:25.900
that
what's kind of simple once you figure it

00:10:25.900 --> 00:10:25.910
what's kind of simple once you figure it
 

00:10:25.910 --> 00:10:28.840
what's kind of simple once you figure it
out all Kotlin has to do is copy the

00:10:28.840 --> 00:10:28.850
out all Kotlin has to do is copy the
 

00:10:28.850 --> 00:10:31.630
out all Kotlin has to do is copy the
state of the function from the stack to

00:10:31.630 --> 00:10:31.640
state of the function from the stack to
 

00:10:31.640 --> 00:10:33.510
state of the function from the stack to
a place where it can save it for later

00:10:33.510 --> 00:10:33.520
a place where it can save it for later
 

00:10:33.520 --> 00:10:35.950
a place where it can save it for later
it'll put all suspended coverage scenes

00:10:35.950 --> 00:10:35.960
it'll put all suspended coverage scenes
 

00:10:35.960 --> 00:10:37.810
it'll put all suspended coverage scenes
out here and it's not structured like a

00:10:37.810 --> 00:10:37.820
out here and it's not structured like a
 

00:10:37.820 --> 00:10:40.390
out here and it's not structured like a
stack then Collin will actually call

00:10:40.390 --> 00:10:40.400
stack then Collin will actually call
 

00:10:40.400 --> 00:10:42.340
stack then Collin will actually call
fetch user creates another stack entry

00:10:42.340 --> 00:10:42.350
fetch user creates another stack entry
 

00:10:42.350 --> 00:10:44.830
fetch user creates another stack entry
and when it calls with context suspends

00:10:44.830 --> 00:10:44.840
and when it calls with context suspends
 

00:10:44.840 --> 00:10:49.829
and when it calls with context suspends
that as well so at this point

00:10:49.829 --> 00:10:49.839
 
 

00:10:49.839 --> 00:10:52.629
 
so at this point all of the curry teams

00:10:52.629 --> 00:10:52.639
so at this point all of the curry teams
 

00:10:52.639 --> 00:10:54.430
so at this point all of the curry teams
on the main thread are suspended and

00:10:54.430 --> 00:10:54.440
on the main thread are suspended and
 

00:10:54.440 --> 00:10:56.560
on the main thread are suspended and
this means the main thread is free to do

00:10:56.560 --> 00:10:56.570
this means the main thread is free to do
 

00:10:56.570 --> 00:10:58.660
this means the main thread is free to do
other work like handle on draw or

00:10:58.660 --> 00:10:58.670
other work like handle on draw or
 

00:10:58.670 --> 00:11:00.730
other work like handle on draw or
respond to user touches and this is

00:11:00.730 --> 00:11:00.740
respond to user touches and this is
 

00:11:00.740 --> 00:11:03.100
respond to user touches and this is
really really important when all of the

00:11:03.100 --> 00:11:03.110
really really important when all of the
 

00:11:03.110 --> 00:11:05.259
really really important when all of the
curry teens on a thread are suspended

00:11:05.259 --> 00:11:05.269
curry teens on a thread are suspended
 

00:11:05.269 --> 00:11:07.870
curry teens on a thread are suspended
the thread is free to do other work if

00:11:07.870 --> 00:11:07.880
the thread is free to do other work if
 

00:11:07.880 --> 00:11:09.400
the thread is free to do other work if
we fast forward a few seconds the

00:11:09.400 --> 00:11:09.410
we fast forward a few seconds the
 

00:11:09.410 --> 00:11:12.579
we fast forward a few seconds the
network result will be ready and Colin

00:11:12.579 --> 00:11:12.589
network result will be ready and Colin
 

00:11:12.589 --> 00:11:14.889
network result will be ready and Colin
will have to call resume in order to do

00:11:14.889 --> 00:11:14.899
will have to call resume in order to do
 

00:11:14.899 --> 00:11:16.420
will have to call resume in order to do
that it just takes the save state and

00:11:16.420 --> 00:11:16.430
that it just takes the save state and
 

00:11:16.430 --> 00:11:17.980
that it just takes the save state and
copies it backs over puts it on the

00:11:17.980 --> 00:11:17.990
copies it backs over puts it on the
 

00:11:17.990 --> 00:11:21.100
copies it backs over puts it on the
stack and resumes the function when it

00:11:21.100 --> 00:11:21.110
stack and resumes the function when it
 

00:11:21.110 --> 00:11:23.379
stack and resumes the function when it
resumes load user it'll just go ahead

00:11:23.379 --> 00:11:23.389
resumes load user it'll just go ahead
 

00:11:23.389 --> 00:11:26.160
resumes load user it'll just go ahead
and continue executing just like normal

00:11:26.160 --> 00:11:26.170
and continue executing just like normal
 

00:11:26.170 --> 00:11:28.840
and continue executing just like normal
load user head aired it would have

00:11:28.840 --> 00:11:28.850
load user head aired it would have
 

00:11:28.850 --> 00:11:30.939
load user head aired it would have
thrown an exception right there the

00:11:30.939 --> 00:11:30.949
thrown an exception right there the
 

00:11:30.949 --> 00:11:32.740
thrown an exception right there the
suspend and resume mechanism is the

00:11:32.740 --> 00:11:32.750
suspend and resume mechanism is the
 

00:11:32.750 --> 00:11:34.509
suspend and resume mechanism is the
magic behind co-routines and we wanted

00:11:34.509 --> 00:11:34.519
magic behind co-routines and we wanted
 

00:11:34.519 --> 00:11:35.829
magic behind co-routines and we wanted
to show it to you so you could

00:11:35.829 --> 00:11:35.839
to show it to you so you could
 

00:11:35.839 --> 00:11:37.389
to show it to you so you could
understand how they work as you start

00:11:37.389 --> 00:11:37.399
understand how they work as you start
 

00:11:37.399 --> 00:11:42.189
understand how they work as you start
using them in your code that wraps up

00:11:42.189 --> 00:11:42.199
using them in your code that wraps up
 

00:11:42.199 --> 00:11:43.990
using them in your code that wraps up
the core routines intro hurry teams on

00:11:43.990 --> 00:11:44.000
the core routines intro hurry teams on
 

00:11:44.000 --> 00:11:46.030
the core routines intro hurry teams on
android offer us the ability to simplify

00:11:46.030 --> 00:11:46.040
android offer us the ability to simplify
 

00:11:46.040 --> 00:11:47.980
android offer us the ability to simplify
our code by replacing callbacks and

00:11:47.980 --> 00:11:47.990
our code by replacing callbacks and
 

00:11:47.990 --> 00:11:50.139
our code by replacing callbacks and
allow us the ability to create main

00:11:50.139 --> 00:11:50.149
allow us the ability to create main
 

00:11:50.149 --> 00:11:52.629
allow us the ability to create main
safety to ensure we never block the main

00:11:52.629 --> 00:11:52.639
safety to ensure we never block the main
 

00:11:52.639 --> 00:11:54.460
safety to ensure we never block the main
thread now I'm going to hand it over to

00:11:54.460 --> 00:11:54.470
thread now I'm going to hand it over to
 

00:11:54.470 --> 00:11:55.750
thread now I'm going to hand it over to
Sergey who will talk a bit about

00:11:55.750 --> 00:11:55.760
Sergey who will talk a bit about
 

00:11:55.760 --> 00:11:57.370
Sergey who will talk a bit about
libraries you can use today with

00:11:57.370 --> 00:11:57.380
libraries you can use today with
 

00:11:57.380 --> 00:12:03.009
libraries you can use today with
heritance thanks John yeah those very

00:12:03.009 --> 00:12:03.019
heritance thanks John yeah those very
 

00:12:03.019 --> 00:12:04.840
heritance thanks John yeah those very
cool bits on ice but we really want to

00:12:04.840 --> 00:12:04.850
cool bits on ice but we really want to
 

00:12:04.850 --> 00:12:07.000
cool bits on ice but we really want to
benefit in our real application from it

00:12:07.000 --> 00:12:07.010
benefit in our real application from it
 

00:12:07.010 --> 00:12:09.819
benefit in our real application from it
and despite a very young age of curtains

00:12:09.819 --> 00:12:09.829
and despite a very young age of curtains
 

00:12:09.829 --> 00:12:11.980
and despite a very young age of curtains
there are libraries that already support

00:12:11.980 --> 00:12:11.990
there are libraries that already support
 

00:12:11.990 --> 00:12:14.949
there are libraries that already support
them in very stable orbit artifacts and

00:12:14.949 --> 00:12:14.959
them in very stable orbit artifacts and
 

00:12:14.959 --> 00:12:17.079
them in very stable orbit artifacts and
I want to start with work manager that

00:12:17.079 --> 00:12:17.089
I want to start with work manager that
 

00:12:17.089 --> 00:12:19.810
I want to start with work manager that
is Payoneer for us in Android X because

00:12:19.810 --> 00:12:19.820
is Payoneer for us in Android X because
 

00:12:19.820 --> 00:12:22.470
is Payoneer for us in Android X because
it's already supports car scenes in its

00:12:22.470 --> 00:12:22.480
it's already supports car scenes in its
 

00:12:22.480 --> 00:12:25.269
it's already supports car scenes in its
stable release and you can use this

00:12:25.269 --> 00:12:25.279
stable release and you can use this
 

00:12:25.279 --> 00:12:28.389
stable release and you can use this
curtain worker but let's make a step

00:12:28.389 --> 00:12:28.399
curtain worker but let's make a step
 

00:12:28.399 --> 00:12:32.019
curtain worker but let's make a step
back and try to figure out why we do

00:12:32.019 --> 00:12:32.029
back and try to figure out why we do
 

00:12:32.029 --> 00:12:35.050
back and try to figure out why we do
that we use it so this is a typical flow

00:12:35.050 --> 00:12:35.060
that we use it so this is a typical flow
 

00:12:35.060 --> 00:12:38.230
that we use it so this is a typical flow
of workers so if you are not familiar of

00:12:38.230 --> 00:12:38.240
of workers so if you are not familiar of
 

00:12:38.240 --> 00:12:39.850
of workers so if you are not familiar of
work manager you can think of worker

00:12:39.850 --> 00:12:39.860
work manager you can think of worker
 

00:12:39.860 --> 00:12:42.759
work manager you can think of worker
just something that does long pink round

00:12:42.759 --> 00:12:42.769
just something that does long pink round
 

00:12:42.769 --> 00:12:45.939
just something that does long pink round
job it may have some constraints but

00:12:45.939 --> 00:12:45.949
job it may have some constraints but
 

00:12:45.949 --> 00:12:48.930
job it may have some constraints but
it's very simple just some work and

00:12:48.930 --> 00:12:48.940
it's very simple just some work and
 

00:12:48.940 --> 00:12:51.160
it's very simple just some work and
typical use case for that you need to

00:12:51.160 --> 00:12:51.170
typical use case for that you need to
 

00:12:51.170 --> 00:12:54.129
typical use case for that you need to
synchronize some local data with your

00:12:54.129 --> 00:12:54.139
synchronize some local data with your
 

00:12:54.139 --> 00:12:56.470
synchronize some local data with your
web server and this flow would look like

00:12:56.470 --> 00:12:56.480
web server and this flow would look like
 

00:12:56.480 --> 00:12:58.470
web server and this flow would look like
you query your

00:12:58.470 --> 00:12:58.480
you query your
 

00:12:58.480 --> 00:13:02.220
you query your
new notes from your database then upload

00:13:02.220 --> 00:13:02.230
new notes from your database then upload
 

00:13:02.230 --> 00:13:05.930
new notes from your database then upload
it to the web server lastly you just

00:13:05.930 --> 00:13:05.940
it to the web server lastly you just
 

00:13:05.940 --> 00:13:09.060
it to the web server lastly you just
mark those notes is successfully singing

00:13:09.060 --> 00:13:09.070
mark those notes is successfully singing
 

00:13:09.070 --> 00:13:11.960
mark those notes is successfully singing
well you see no need for curtsies well

00:13:11.960 --> 00:13:11.970
well you see no need for curtsies well
 

00:13:11.970 --> 00:13:14.730
well you see no need for curtsies well
actually we didn't start to talk about

00:13:14.730 --> 00:13:14.740
actually we didn't start to talk about
 

00:13:14.740 --> 00:13:17.519
actually we didn't start to talk about
translation because translation may

00:13:17.519 --> 00:13:17.529
translation because translation may
 

00:13:17.529 --> 00:13:20.129
translation because translation may
happen tea variety reasons for example

00:13:20.129 --> 00:13:20.139
happen tea variety reasons for example
 

00:13:20.139 --> 00:13:22.500
happen tea variety reasons for example
constraints for this worker aren't met

00:13:22.500 --> 00:13:22.510
constraints for this worker aren't met
 

00:13:22.510 --> 00:13:26.129
constraints for this worker aren't met
anymore or user explicitly cancel this

00:13:26.129 --> 00:13:26.139
anymore or user explicitly cancel this
 

00:13:26.139 --> 00:13:28.650
anymore or user explicitly cancel this
job if you provided this UI so how you

00:13:28.650 --> 00:13:28.660
job if you provided this UI so how you
 

00:13:28.660 --> 00:13:30.389
job if you provided this UI so how you
would support cancellation well you can

00:13:30.389 --> 00:13:30.399
would support cancellation well you can
 

00:13:30.399 --> 00:13:32.310
would support cancellation well you can
try to do something like that you try to

00:13:32.310 --> 00:13:32.320
try to do something like that you try to
 

00:13:32.320 --> 00:13:34.860
try to do something like that you try to
put like every other line this if check

00:13:34.860 --> 00:13:34.870
put like every other line this if check
 

00:13:34.870 --> 00:13:38.009
put like every other line this if check
and it starts to look silly and even

00:13:38.009 --> 00:13:38.019
and it starts to look silly and even
 

00:13:38.019 --> 00:13:39.569
and it starts to look silly and even
more it doesn't actually work because

00:13:39.569 --> 00:13:39.579
more it doesn't actually work because
 

00:13:39.579 --> 00:13:42.170
more it doesn't actually work because
this call which is probably most

00:13:42.170 --> 00:13:42.180
this call which is probably most
 

00:13:42.180 --> 00:13:44.280
this call which is probably most
expensive call because it goes to the

00:13:44.280 --> 00:13:44.290
expensive call because it goes to the
 

00:13:44.290 --> 00:13:46.980
expensive call because it goes to the
network and do some work there it

00:13:46.980 --> 00:13:46.990
network and do some work there it
 

00:13:46.990 --> 00:13:49.590
network and do some work there it
doesn't have any consolation signal

00:13:49.590 --> 00:13:49.600
doesn't have any consolation signal
 

00:13:49.600 --> 00:13:51.900
doesn't have any consolation signal
propagation because well if it was

00:13:51.900 --> 00:13:51.910
propagation because well if it was
 

00:13:51.910 --> 00:13:54.360
propagation because well if it was
started it will run till its end no

00:13:54.360 --> 00:13:54.370
started it will run till its end no
 

00:13:54.370 --> 00:13:59.150
started it will run till its end no
matter what and this actually will

00:13:59.150 --> 00:13:59.160
matter what and this actually will
 

00:13:59.160 --> 00:14:02.280
matter what and this actually will
curtail worker will help us with that we

00:14:02.280 --> 00:14:02.290
curtail worker will help us with that we
 

00:14:02.290 --> 00:14:04.769
curtail worker will help us with that we
didn't talk about that yet but curtains

00:14:04.769 --> 00:14:04.779
didn't talk about that yet but curtains
 

00:14:04.779 --> 00:14:07.980
didn't talk about that yet but curtains
don't really don't only ruff callbacks

00:14:07.980 --> 00:14:07.990
don't really don't only ruff callbacks
 

00:14:07.990 --> 00:14:10.970
don't really don't only ruff callbacks
nicely it also provides nice consolation

00:14:10.970 --> 00:14:10.980
nicely it also provides nice consolation
 

00:14:10.980 --> 00:14:14.430
nicely it also provides nice consolation
property so every system function can be

00:14:14.430 --> 00:14:14.440
property so every system function can be
 

00:14:14.440 --> 00:14:16.530
property so every system function can be
cancelled it can react on this

00:14:16.530 --> 00:14:16.540
cancelled it can react on this
 

00:14:16.540 --> 00:14:18.420
cancelled it can react on this
cancellation and also it propagates to

00:14:18.420 --> 00:14:18.430
cancellation and also it propagates to
 

00:14:18.430 --> 00:14:21.870
cancellation and also it propagates to
all inner calls this cancellation signal

00:14:21.870 --> 00:14:21.880
all inner calls this cancellation signal
 

00:14:21.880 --> 00:14:26.430
all inner calls this cancellation signal
well you may say our code inside those

00:14:26.430 --> 00:14:26.440
well you may say our code inside those
 

00:14:26.440 --> 00:14:28.530
well you may say our code inside those
calls are still blocking we don't

00:14:28.530 --> 00:14:28.540
calls are still blocking we don't
 

00:14:28.540 --> 00:14:30.660
calls are still blocking we don't
benefit from that anyhow this is true

00:14:30.660 --> 00:14:30.670
benefit from that anyhow this is true
 

00:14:30.670 --> 00:14:34.379
benefit from that anyhow this is true
however if you use room as your database

00:14:34.379 --> 00:14:34.389
however if you use room as your database
 

00:14:34.389 --> 00:14:37.350
however if you use room as your database
solution you can mark your queries and

00:14:37.350 --> 00:14:37.360
solution you can mark your queries and
 

00:14:37.360 --> 00:14:40.920
solution you can mark your queries and
suspense functions and then room will

00:14:40.920 --> 00:14:40.930
suspense functions and then room will
 

00:14:40.930 --> 00:14:43.470
suspense functions and then room will
take care of consolation for you as well

00:14:43.470 --> 00:14:43.480
take care of consolation for you as well
 

00:14:43.480 --> 00:14:45.930
take care of consolation for you as well
as fretting as Sean mentioned that in

00:14:45.930 --> 00:14:45.940
as fretting as Sean mentioned that in
 

00:14:45.940 --> 00:14:48.300
as fretting as Sean mentioned that in
multiple times this thing will be main

00:14:48.300 --> 00:14:48.310
multiple times this thing will be main
 

00:14:48.310 --> 00:14:51.180
multiple times this thing will be main
safe room takes care of reading it will

00:14:51.180 --> 00:14:51.190
safe room takes care of reading it will
 

00:14:51.190 --> 00:14:54.889
safe room takes care of reading it will
run the query on a background thread

00:14:54.889 --> 00:14:54.899
run the query on a background thread
 

00:14:54.899 --> 00:14:59.069
run the query on a background thread
then well nice our database calls are

00:14:59.069 --> 00:14:59.079
then well nice our database calls are
 

00:14:59.079 --> 00:15:02.009
then well nice our database calls are
canceled now but as we discussed before

00:15:02.009 --> 00:15:02.019
canceled now but as we discussed before
 

00:15:02.019 --> 00:15:05.040
canceled now but as we discussed before
the main call is this one and actually

00:15:05.040 --> 00:15:05.050
the main call is this one and actually
 

00:15:05.050 --> 00:15:07.860
the main call is this one and actually
if you use retrofit you can make it

00:15:07.860 --> 00:15:07.870
if you use retrofit you can make it
 

00:15:07.870 --> 00:15:10.230
if you use retrofit you can make it
suspend as well because retrofit already

00:15:10.230 --> 00:15:10.240
suspend as well because retrofit already
 

00:15:10.240 --> 00:15:11.040
suspend as well because retrofit already
for

00:15:11.040 --> 00:15:11.050
for
 

00:15:11.050 --> 00:15:15.600
for
suspend modifier for its Network calls

00:15:15.600 --> 00:15:15.610
suspend modifier for its Network calls
 

00:15:15.610 --> 00:15:18.570
suspend modifier for its Network calls
and I want to highlight that a retrofit

00:15:18.570 --> 00:15:18.580
and I want to highlight that a retrofit
 

00:15:18.580 --> 00:15:21.480
and I want to highlight that a retrofit
isn't part of Android X it's a just job

00:15:21.480 --> 00:15:21.490
isn't part of Android X it's a just job
 

00:15:21.490 --> 00:15:23.370
isn't part of Android X it's a just job
that's done via a community Android

00:15:23.370 --> 00:15:23.380
that's done via a community Android
 

00:15:23.380 --> 00:15:25.620
that's done via a community Android
Android a cotton community embraces

00:15:25.620 --> 00:15:25.630
Android a cotton community embraces
 

00:15:25.630 --> 00:15:27.930
Android a cotton community embraces
college scenes and we like it at the end

00:15:27.930 --> 00:15:27.940
college scenes and we like it at the end
 

00:15:27.940 --> 00:15:32.850
college scenes and we like it at the end
of a day it's less work for us so nice

00:15:32.850 --> 00:15:32.860
of a day it's less work for us so nice
 

00:15:32.860 --> 00:15:36.510
of a day it's less work for us so nice
now this code supports constellation and

00:15:36.510 --> 00:15:36.520
now this code supports constellation and
 

00:15:36.520 --> 00:15:41.030
now this code supports constellation and
it looks as as easy as it looked before

00:15:41.030 --> 00:15:41.040
it looks as as easy as it looked before
 

00:15:41.040 --> 00:15:44.160
it looks as as easy as it looked before
so we got a constellation for free so

00:15:44.160 --> 00:15:44.170
so we got a constellation for free so
 

00:15:44.170 --> 00:15:46.230
so we got a constellation for free so
this was a quick look on the things that

00:15:46.230 --> 00:15:46.240
this was a quick look on the things that
 

00:15:46.240 --> 00:15:49.710
this was a quick look on the things that
were available today and it will present

00:15:49.710 --> 00:15:49.720
were available today and it will present
 

00:15:49.720 --> 00:15:55.500
were available today and it will present
you a lot of new price that we just made

00:15:55.500 --> 00:15:55.510
 
 

00:15:55.510 --> 00:15:58.500
 
so so far we talked about what you could

00:15:58.500 --> 00:15:58.510
so so far we talked about what you could
 

00:15:58.510 --> 00:16:00.300
so so far we talked about what you could
do with qualities and for the rest part

00:16:00.300 --> 00:16:00.310
do with qualities and for the rest part
 

00:16:00.310 --> 00:16:02.070
do with qualities and for the rest part
of this talk we are going to talk about

00:16:02.070 --> 00:16:02.080
of this talk we are going to talk about
 

00:16:02.080 --> 00:16:05.610
of this talk we are going to talk about
new stuff so first one is live data and

00:16:05.610 --> 00:16:05.620
new stuff so first one is live data and
 

00:16:05.620 --> 00:16:09.390
new stuff so first one is live data and
qualities now just to be very clear live

00:16:09.390 --> 00:16:09.400
qualities now just to be very clear live
 

00:16:09.400 --> 00:16:12.120
qualities now just to be very clear live
data is not designed for concurrency

00:16:12.120 --> 00:16:12.130
data is not designed for concurrency
 

00:16:12.130 --> 00:16:14.730
data is not designed for concurrency
it's an observable value holder and you

00:16:14.730 --> 00:16:14.740
it's an observable value holder and you
 

00:16:14.740 --> 00:16:16.830
it's an observable value holder and you
are expected to be able to access the

00:16:16.830 --> 00:16:16.840
are expected to be able to access the
 

00:16:16.840 --> 00:16:18.570
are expected to be able to access the
value from the main thread that's like

00:16:18.570 --> 00:16:18.580
value from the main thread that's like
 

00:16:18.580 --> 00:16:24.120
value from the main thread that's like
intentional but that doesn't mean it

00:16:24.120 --> 00:16:24.130
intentional but that doesn't mean it
 

00:16:24.130 --> 00:16:26.850
intentional but that doesn't mean it
should not be interoperable so this is

00:16:26.850 --> 00:16:26.860
should not be interoperable so this is
 

00:16:26.860 --> 00:16:28.680
should not be interoperable so this is
what we are going to provide you today

00:16:28.680 --> 00:16:28.690
what we are going to provide you today
 

00:16:28.690 --> 00:16:30.600
what we are going to provide you today
there will be easy way to use live data

00:16:30.600 --> 00:16:30.610
there will be easy way to use live data
 

00:16:30.610 --> 00:16:34.020
there will be easy way to use live data
with Cortese so the most common use case

00:16:34.020 --> 00:16:34.030
with Cortese so the most common use case
 

00:16:34.030 --> 00:16:36.240
with Cortese so the most common use case
is you have some value you want to

00:16:36.240 --> 00:16:36.250
is you have some value you want to
 

00:16:36.250 --> 00:16:38.310
is you have some value you want to
compute in a quarantine but smart to

00:16:38.310 --> 00:16:38.320
compute in a quarantine but smart to
 

00:16:38.320 --> 00:16:41.670
compute in a quarantine but smart to
serve the result is a live data so to

00:16:41.670 --> 00:16:41.680
serve the result is a live data so to
 

00:16:41.680 --> 00:16:44.190
serve the result is a live data so to
turn starting today with the lifecycles

00:16:44.190 --> 00:16:44.200
turn starting today with the lifecycles
 

00:16:44.200 --> 00:16:47.370
turn starting today with the lifecycles
2.2 of a one artifact you get this new

00:16:47.370 --> 00:16:47.380
2.2 of a one artifact you get this new
 

00:16:47.380 --> 00:16:51.150
2.2 of a one artifact you get this new
one new API called live data so it's a

00:16:51.150 --> 00:16:51.160
one new API called live data so it's a
 

00:16:51.160 --> 00:16:53.010
one new API called live data so it's a
builder function very similar to the

00:16:53.010 --> 00:16:53.020
builder function very similar to the
 

00:16:53.020 --> 00:16:55.980
builder function very similar to the
sickness wielders in Cortland inside

00:16:55.980 --> 00:16:55.990
sickness wielders in Cortland inside
 

00:16:55.990 --> 00:16:59.640
sickness wielders in Cortland inside
that you pass a quality block and he

00:16:59.640 --> 00:16:59.650
that you pass a quality block and he
 

00:16:59.650 --> 00:17:01.050
that you pass a quality block and he
said you could do whatever you want and

00:17:01.050 --> 00:17:01.060
said you could do whatever you want and
 

00:17:01.060 --> 00:17:03.600
said you could do whatever you want and
call this amid function to dispatch

00:17:03.600 --> 00:17:03.610
call this amid function to dispatch
 

00:17:03.610 --> 00:17:06.720
call this amid function to dispatch
values so if you look at this data with

00:17:06.720 --> 00:17:06.730
values so if you look at this data with
 

00:17:06.730 --> 00:17:10.580
values so if you look at this data with
load function it is HLS husband function

00:17:10.580 --> 00:17:10.590
load function it is HLS husband function
 

00:17:10.590 --> 00:17:12.470
load function it is HLS husband function
and because you are calling the image

00:17:12.470 --> 00:17:12.480
and because you are calling the image
 

00:17:12.480 --> 00:17:15.200
and because you are calling the image
with a user in this case we can infer

00:17:15.200 --> 00:17:15.210
with a user in this case we can infer
 

00:17:15.210 --> 00:17:17.120
with a user in this case we can infer
that type for you so you don't even need

00:17:17.120 --> 00:17:17.130
that type for you so you don't even need
 

00:17:17.130 --> 00:17:19.640
that type for you so you don't even need
to specify this so this very simple

00:17:19.640 --> 00:17:19.650
to specify this so this very simple
 

00:17:19.650 --> 00:17:22.010
to specify this so this very simple
light that the API bridges the gap

00:17:22.010 --> 00:17:22.020
light that the API bridges the gap
 

00:17:22.020 --> 00:17:25.040
light that the API bridges the gap
between your live data elements and your

00:17:25.040 --> 00:17:25.050
between your live data elements and your
 

00:17:25.050 --> 00:17:28.220
between your live data elements and your
qualities so you get that ap a little

00:17:28.220 --> 00:17:28.230
qualities so you get that ap a little
 

00:17:28.230 --> 00:17:30.620
qualities so you get that ap a little
bit more in detail so it receives three

00:17:30.620 --> 00:17:30.630
bit more in detail so it receives three
 

00:17:30.630 --> 00:17:32.450
bit more in detail so it receives three
parameters and the first one is a

00:17:32.450 --> 00:17:32.460
parameters and the first one is a
 

00:17:32.460 --> 00:17:36.620
parameters and the first one is a
contact so why do we need a context well

00:17:36.620 --> 00:17:36.630
contact so why do we need a context well
 

00:17:36.630 --> 00:17:39.590
contact so why do we need a context well
if this data is loaded user function is

00:17:39.590 --> 00:17:39.600
if this data is loaded user function is
 

00:17:39.600 --> 00:17:41.990
if this data is loaded user function is
not less than the sass file function

00:17:41.990 --> 00:17:42.000
not less than the sass file function
 

00:17:42.000 --> 00:17:43.550
not less than the sass file function
which is a regular function and you

00:17:43.550 --> 00:17:43.560
which is a regular function and you
 

00:17:43.560 --> 00:17:46.160
which is a regular function and you
write this code you are going to receive

00:17:46.160 --> 00:17:46.170
write this code you are going to receive
 

00:17:46.170 --> 00:17:48.740
write this code you are going to receive
an eye on main thread exception because

00:17:48.740 --> 00:17:48.750
an eye on main thread exception because
 

00:17:48.750 --> 00:17:51.710
an eye on main thread exception because
this vlog by default resume dispatchers

00:17:51.710 --> 00:17:51.720
this vlog by default resume dispatchers
 

00:17:51.720 --> 00:17:54.350
this vlog by default resume dispatchers
main but you can change that we can tell

00:17:54.350 --> 00:17:54.360
main but you can change that we can tell
 

00:17:54.360 --> 00:17:57.320
main but you can change that we can tell
it give it a context as dispatchers IO

00:17:57.320 --> 00:17:57.330
it give it a context as dispatchers IO
 

00:17:57.330 --> 00:18:00.560
it give it a context as dispatchers IO
and now this code will work perfectly I

00:18:00.560 --> 00:18:00.570
and now this code will work perfectly I
 

00:18:00.570 --> 00:18:03.140
and now this code will work perfectly I
want you to notice that I didn't change

00:18:03.140 --> 00:18:03.150
want you to notice that I didn't change
 

00:18:03.150 --> 00:18:05.480
want you to notice that I didn't change
any contents of the code because you can

00:18:05.480 --> 00:18:05.490
any contents of the code because you can
 

00:18:05.490 --> 00:18:07.850
any contents of the code because you can
omit from whatever dispatcher you want

00:18:07.850 --> 00:18:07.860
omit from whatever dispatcher you want
 

00:18:07.860 --> 00:18:09.800
omit from whatever dispatcher you want
you don't need to be on the main

00:18:09.800 --> 00:18:09.810
you don't need to be on the main
 

00:18:09.810 --> 00:18:14.660
you don't need to be on the main
dispatcher to change the values now the

00:18:14.660 --> 00:18:14.670
dispatcher to change the values now the
 

00:18:14.670 --> 00:18:16.580
dispatcher to change the values now the
second one is a really awkward parameter

00:18:16.580 --> 00:18:16.590
second one is a really awkward parameter
 

00:18:16.590 --> 00:18:20.360
second one is a really awkward parameter
called timeout and to understand why we

00:18:20.360 --> 00:18:20.370
called timeout and to understand why we
 

00:18:20.370 --> 00:18:22.940
called timeout and to understand why we
needed a timeout parameter let's look at

00:18:22.940 --> 00:18:22.950
needed a timeout parameter let's look at
 

00:18:22.950 --> 00:18:25.520
needed a timeout parameter let's look at
the a famous rotation problem on Android

00:18:25.520 --> 00:18:25.530
the a famous rotation problem on Android
 

00:18:25.530 --> 00:18:29.060
the a famous rotation problem on Android
so on the Left I have a view model that

00:18:29.060 --> 00:18:29.070
so on the Left I have a view model that
 

00:18:29.070 --> 00:18:30.710
so on the Left I have a view model that
serves a live data and on the right I

00:18:30.710 --> 00:18:30.720
serves a live data and on the right I
 

00:18:30.720 --> 00:18:33.650
serves a live data and on the right I
have an activity that's observing it so

00:18:33.650 --> 00:18:33.660
have an activity that's observing it so
 

00:18:33.660 --> 00:18:35.750
have an activity that's observing it so
when my activity goes to started state

00:18:35.750 --> 00:18:35.760
when my activity goes to started state
 

00:18:35.760 --> 00:18:38.420
when my activity goes to started state
the live data will become active which

00:18:38.420 --> 00:18:38.430
the live data will become active which
 

00:18:38.430 --> 00:18:40.670
the live data will become active which
means ok you're an observer visible to

00:18:40.670 --> 00:18:40.680
means ok you're an observer visible to
 

00:18:40.680 --> 00:18:42.800
means ok you're an observer visible to
the user you are better off creating

00:18:42.800 --> 00:18:42.810
the user you are better off creating
 

00:18:42.810 --> 00:18:45.890
the user you are better off creating
some values but during that time what if

00:18:45.890 --> 00:18:45.900
some values but during that time what if
 

00:18:45.900 --> 00:18:49.610
some values but during that time what if
our activity rotates and so it's going

00:18:49.610 --> 00:18:49.620
our activity rotates and so it's going
 

00:18:49.620 --> 00:18:50.390
our activity rotates and so it's going
to be stopped

00:18:50.390 --> 00:18:50.400
to be stopped
 

00:18:50.400 --> 00:18:53.390
to be stopped
my data will become inactive be

00:18:53.390 --> 00:18:53.400
my data will become inactive be
 

00:18:53.400 --> 00:18:55.730
my data will become inactive be
destroyed and a new activity will come

00:18:55.730 --> 00:18:55.740
destroyed and a new activity will come
 

00:18:55.740 --> 00:18:58.100
destroyed and a new activity will come
so right now there is no one observing

00:18:58.100 --> 00:18:58.110
so right now there is no one observing
 

00:18:58.110 --> 00:18:59.540
so right now there is no one observing
live data so there's no reason to

00:18:59.540 --> 00:18:59.550
live data so there's no reason to
 

00:18:59.550 --> 00:19:02.900
live data so there's no reason to
produce results except after the new one

00:19:02.900 --> 00:19:02.910
produce results except after the new one
 

00:19:02.910 --> 00:19:05.390
produce results except after the new one
goes started again it becomes active

00:19:05.390 --> 00:19:05.400
goes started again it becomes active
 

00:19:05.400 --> 00:19:07.370
goes started again it becomes active
again so the problem we are trying to

00:19:07.370 --> 00:19:07.380
again so the problem we are trying to
 

00:19:07.380 --> 00:19:10.220
again so the problem we are trying to
solve here is this gap where live data

00:19:10.220 --> 00:19:10.230
solve here is this gap where live data
 

00:19:10.230 --> 00:19:13.400
solve here is this gap where live data
quickly becomes inactive and active in a

00:19:13.400 --> 00:19:13.410
quickly becomes inactive and active in a
 

00:19:13.410 --> 00:19:15.470
quickly becomes inactive and active in a
very quick succession like usual less

00:19:15.470 --> 00:19:15.480
very quick succession like usual less
 

00:19:15.480 --> 00:19:17.400
very quick succession like usual less
than one second

00:19:17.400 --> 00:19:17.410
than one second
 

00:19:17.410 --> 00:19:21.250
than one second
so how do we fix that let's look at the

00:19:21.250 --> 00:19:21.260
so how do we fix that let's look at the
 

00:19:21.260 --> 00:19:25.750
so how do we fix that let's look at the
detail how we run that code block and to

00:19:25.750 --> 00:19:25.760
detail how we run that code block and to
 

00:19:25.760 --> 00:19:26.770
detail how we run that code block and to
understand it better

00:19:26.770 --> 00:19:26.780
understand it better
 

00:19:26.780 --> 00:19:28.690
understand it better
we're just going to write a timer

00:19:28.690 --> 00:19:28.700
we're just going to write a timer
 

00:19:28.700 --> 00:19:30.910
we're just going to write a timer
function it's basically creates a timer

00:19:30.910 --> 00:19:30.920
function it's basically creates a timer
 

00:19:30.920 --> 00:19:32.710
function it's basically creates a timer
for live data

00:19:32.710 --> 00:19:32.720
for live data
 

00:19:32.720 --> 00:19:36.160
for live data
it gets the current time returns a live

00:19:36.160 --> 00:19:36.170
it gets the current time returns a live
 

00:19:36.170 --> 00:19:39.910
it gets the current time returns a live
data builder and in an infinite loop it

00:19:39.910 --> 00:19:39.920
data builder and in an infinite loop it
 

00:19:39.920 --> 00:19:42.970
data builder and in an infinite loop it
just missed the time the last one second

00:19:42.970 --> 00:19:42.980
just missed the time the last one second
 

00:19:42.980 --> 00:19:44.770
just missed the time the last one second
a miss the time delays one second and

00:19:44.770 --> 00:19:44.780
a miss the time delays one second and
 

00:19:44.780 --> 00:19:47.800
a miss the time delays one second and
never ends and this code I'm showing is

00:19:47.800 --> 00:19:47.810
never ends and this code I'm showing is
 

00:19:47.810 --> 00:19:51.790
never ends and this code I'm showing is
hundred percent okay to write how does

00:19:51.790 --> 00:19:51.800
hundred percent okay to write how does
 

00:19:51.800 --> 00:19:55.450
hundred percent okay to write how does
it actually work when the live data

00:19:55.450 --> 00:19:55.460
it actually work when the live data
 

00:19:55.460 --> 00:19:58.480
it actually work when the live data
returned by this blog becomes active we

00:19:58.480 --> 00:19:58.490
returned by this blog becomes active we
 

00:19:58.490 --> 00:20:01.390
returned by this blog becomes active we
check okay did we run this block and if

00:20:01.390 --> 00:20:01.400
check okay did we run this block and if
 

00:20:01.400 --> 00:20:04.300
check okay did we run this block and if
we didn't run that block now we start

00:20:04.300 --> 00:20:04.310
we didn't run that block now we start
 

00:20:04.310 --> 00:20:07.720
we didn't run that block now we start
executing it while we're executing it if

00:20:07.720 --> 00:20:07.730
executing it while we're executing it if
 

00:20:07.730 --> 00:20:10.150
executing it while we're executing it if
that block becomes inactive like if the

00:20:10.150 --> 00:20:10.160
that block becomes inactive like if the
 

00:20:10.160 --> 00:20:11.530
that block becomes inactive like if the
live data becomes inactive

00:20:11.530 --> 00:20:11.540
live data becomes inactive
 

00:20:11.540 --> 00:20:13.360
live data becomes inactive
we check okay is this block still

00:20:13.360 --> 00:20:13.370
we check okay is this block still
 

00:20:13.370 --> 00:20:15.880
we check okay is this block still
running and if it is still running we

00:20:15.880 --> 00:20:15.890
running and if it is still running we
 

00:20:15.890 --> 00:20:19.090
running and if it is still running we
give it some time to finish but even

00:20:19.090 --> 00:20:19.100
give it some time to finish but even
 

00:20:19.100 --> 00:20:20.980
give it some time to finish but even
after the timeout if it is still running

00:20:20.980 --> 00:20:20.990
after the timeout if it is still running
 

00:20:20.990 --> 00:20:23.260
after the timeout if it is still running
and we are inactive that's basically

00:20:23.260 --> 00:20:23.270
and we are inactive that's basically
 

00:20:23.270 --> 00:20:25.600
and we are inactive that's basically
unnecessary computation there is no one

00:20:25.600 --> 00:20:25.610
unnecessary computation there is no one
 

00:20:25.610 --> 00:20:27.340
unnecessary computation there is no one
observing the live data but the block

00:20:27.340 --> 00:20:27.350
observing the live data but the block
 

00:20:27.350 --> 00:20:30.850
observing the live data but the block
keeps running so we just cancel the

00:20:30.850 --> 00:20:30.860
keeps running so we just cancel the
 

00:20:30.860 --> 00:20:34.870
keeps running so we just cancel the
continuation the recording so if the

00:20:34.870 --> 00:20:34.880
continuation the recording so if the
 

00:20:34.880 --> 00:20:36.970
continuation the recording so if the
like that' becomes active again we're

00:20:36.970 --> 00:20:36.980
like that' becomes active again we're
 

00:20:36.980 --> 00:20:39.280
like that' becomes active again we're
just going to restart it and we only do

00:20:39.280 --> 00:20:39.290
just going to restart it and we only do
 

00:20:39.290 --> 00:20:41.440
just going to restart it and we only do
it once so if it finished the completion

00:20:41.440 --> 00:20:41.450
it once so if it finished the completion
 

00:20:41.450 --> 00:20:45.250
it once so if it finished the completion
there is no reason to restart it now you

00:20:45.250 --> 00:20:45.260
there is no reason to restart it now you
 

00:20:45.260 --> 00:20:48.750
there is no reason to restart it now you
can also emit more than one value so

00:20:48.750 --> 00:20:48.760
can also emit more than one value so
 

00:20:48.760 --> 00:20:51.310
can also emit more than one value so
this was some structure around this

00:20:51.310 --> 00:20:51.320
this was some structure around this
 

00:20:51.320 --> 00:20:53.470
this was some structure around this
sample we had before where we have a

00:20:53.470 --> 00:20:53.480
sample we had before where we have a
 

00:20:53.480 --> 00:20:55.870
sample we had before where we have a
repository that has a get user function

00:20:55.870 --> 00:20:55.880
repository that has a get user function
 

00:20:55.880 --> 00:20:58.330
repository that has a get user function
a lot user function and the loss from

00:20:58.330 --> 00:20:58.340
a lot user function and the loss from
 

00:20:58.340 --> 00:21:01.510
a lot user function and the loss from
the database and a Miss Tattaglia now

00:21:01.510 --> 00:21:01.520
the database and a Miss Tattaglia now
 

00:21:01.520 --> 00:21:03.700
the database and a Miss Tattaglia now
most of the time this is not the code

00:21:03.700 --> 00:21:03.710
most of the time this is not the code
 

00:21:03.710 --> 00:21:05.500
most of the time this is not the code
you write you need to go to the web

00:21:05.500 --> 00:21:05.510
you write you need to go to the web
 

00:21:05.510 --> 00:21:08.680
you write you need to go to the web
service fetch an updated user update the

00:21:08.680 --> 00:21:08.690
service fetch an updated user update the
 

00:21:08.690 --> 00:21:11.440
service fetch an updated user update the
database and omit that value again so

00:21:11.440 --> 00:21:11.450
database and omit that value again so
 

00:21:11.450 --> 00:21:13.780
database and omit that value again so
you could call emit as many times as you

00:21:13.780 --> 00:21:13.790
you could call emit as many times as you
 

00:21:13.790 --> 00:21:15.820
you could call emit as many times as you
want as long as you're inside that

00:21:15.820 --> 00:21:15.830
want as long as you're inside that
 

00:21:15.830 --> 00:21:19.360
want as long as you're inside that
quarantine block but you might say well

00:21:19.360 --> 00:21:19.370
quarantine block but you might say well
 

00:21:19.370 --> 00:21:21.370
quarantine block but you might say well
most of the time the database doesn't

00:21:21.370 --> 00:21:21.380
most of the time the database doesn't
 

00:21:21.380 --> 00:21:23.140
most of the time the database doesn't
return you a user it returns your live

00:21:23.140 --> 00:21:23.150
return you a user it returns your live
 

00:21:23.150 --> 00:21:24.940
return you a user it returns your live
data for user because you want to be

00:21:24.940 --> 00:21:24.950
data for user because you want to be
 

00:21:24.950 --> 00:21:27.600
data for user because you want to be
notified about the changes

00:21:27.600 --> 00:21:27.610
notified about the changes
 

00:21:27.610 --> 00:21:31.320
notified about the changes
well all you can say is you could just

00:21:31.320 --> 00:21:31.330
well all you can say is you could just
 

00:21:31.330 --> 00:21:33.570
well all you can say is you could just
call a meat source if you ever used

00:21:33.570 --> 00:21:33.580
call a meat source if you ever used
 

00:21:33.580 --> 00:21:35.670
call a meat source if you ever used
mediator live data this is very similar

00:21:35.670 --> 00:21:35.680
mediator live data this is very similar
 

00:21:35.680 --> 00:21:38.640
mediator live data this is very similar
to at source where it says whatever

00:21:38.640 --> 00:21:38.650
to at source where it says whatever
 

00:21:38.650 --> 00:21:41.250
to at source where it says whatever
value comes from the slide data just

00:21:41.250 --> 00:21:41.260
value comes from the slide data just
 

00:21:41.260 --> 00:21:43.410
value comes from the slide data just
make it my value and you can run things

00:21:43.410 --> 00:21:43.420
make it my value and you can run things
 

00:21:43.420 --> 00:21:47.070
make it my value and you can run things
like transformations here oh also now we

00:21:47.070 --> 00:21:47.080
like transformations here oh also now we
 

00:21:47.080 --> 00:21:49.680
like transformations here oh also now we
don't need this extra emit because we

00:21:49.680 --> 00:21:49.690
don't need this extra emit because we
 

00:21:49.690 --> 00:21:51.900
don't need this extra emit because we
already observing the database so you

00:21:51.900 --> 00:21:51.910
already observing the database so you
 

00:21:51.910 --> 00:21:55.950
already observing the database so you
can get rid of it so this slide at the

00:21:55.950 --> 00:21:55.960
can get rid of it so this slide at the
 

00:21:55.960 --> 00:21:58.350
can get rid of it so this slide at the
API basically provides us a very nice

00:21:58.350 --> 00:21:58.360
API basically provides us a very nice
 

00:21:58.360 --> 00:22:00.390
API basically provides us a very nice
way to make likely to work with

00:22:00.390 --> 00:22:00.400
way to make likely to work with
 

00:22:00.400 --> 00:22:05.370
way to make likely to work with
qualities but how what we models thank

00:22:05.370 --> 00:22:05.380
qualities but how what we models thank
 

00:22:05.380 --> 00:22:07.980
qualities but how what we models thank
you so let's talk a little bit about how

00:22:07.980 --> 00:22:07.990
you so let's talk a little bit about how
 

00:22:07.990 --> 00:22:10.200
you so let's talk a little bit about how
to integrate into integrate carotenes

00:22:10.200 --> 00:22:10.210
to integrate into integrate carotenes
 

00:22:10.210 --> 00:22:11.610
to integrate into integrate carotenes
into your view models but first I'm

00:22:11.610 --> 00:22:11.620
into your view models but first I'm
 

00:22:11.620 --> 00:22:12.720
into your view models but first I'm
gonna talk a little bit about

00:22:12.720 --> 00:22:12.730
gonna talk a little bit about
 

00:22:12.730 --> 00:22:15.750
gonna talk a little bit about
Gleeks specifically co-routine leaks

00:22:15.750 --> 00:22:15.760
Gleeks specifically co-routine leaks
 

00:22:15.760 --> 00:22:18.060
Gleeks specifically co-routine leaks
these are very serious problem they're

00:22:18.060 --> 00:22:18.070
these are very serious problem they're
 

00:22:18.070 --> 00:22:19.740
these are very serious problem they're
kind of like a memory leak that we're

00:22:19.740 --> 00:22:19.750
kind of like a memory leak that we're
 

00:22:19.750 --> 00:22:23.130
kind of like a memory leak that we're
all familiar with but way worse a cover

00:22:23.130 --> 00:22:23.140
all familiar with but way worse a cover
 

00:22:23.140 --> 00:22:25.440
all familiar with but way worse a cover
team can resume itself and in addition

00:22:25.440 --> 00:22:25.450
team can resume itself and in addition
 

00:22:25.450 --> 00:22:27.900
team can resume itself and in addition
to using memory it can use CPU it could

00:22:27.900 --> 00:22:27.910
to using memory it can use CPU it could
 

00:22:27.910 --> 00:22:30.120
to using memory it can use CPU it could
write a file it could make a network

00:22:30.120 --> 00:22:30.130
write a file it could make a network
 

00:22:30.130 --> 00:22:33.750
write a file it could make a network
request that doesn't need to happen to

00:22:33.750 --> 00:22:33.760
request that doesn't need to happen to
 

00:22:33.760 --> 00:22:35.340
request that doesn't need to happen to
help us deal with care routine leaks

00:22:35.340 --> 00:22:35.350
help us deal with care routine leaks
 

00:22:35.350 --> 00:22:37.230
help us deal with care routine leaks
Kotlin introduced this idea of

00:22:37.230 --> 00:22:37.240
Kotlin introduced this idea of
 

00:22:37.240 --> 00:22:40.140
Kotlin introduced this idea of
co-routine scopes so what is this scope

00:22:40.140 --> 00:22:40.150
co-routine scopes so what is this scope
 

00:22:40.150 --> 00:22:42.420
co-routine scopes so what is this scope
well it's really just a way of keeping

00:22:42.420 --> 00:22:42.430
well it's really just a way of keeping
 

00:22:42.430 --> 00:22:44.400
well it's really just a way of keeping
track of your co-routines

00:22:44.400 --> 00:22:44.410
track of your co-routines
 

00:22:44.410 --> 00:22:46.740
track of your co-routines
all care routines must run in a scope

00:22:46.740 --> 00:22:46.750
all care routines must run in a scope
 

00:22:46.750 --> 00:22:49.530
all care routines must run in a scope
and a scope gets the ability to cancel

00:22:49.530 --> 00:22:49.540
and a scope gets the ability to cancel
 

00:22:49.540 --> 00:22:51.810
and a scope gets the ability to cancel
all of the carotenes inside of it in

00:22:51.810 --> 00:22:51.820
all of the carotenes inside of it in
 

00:22:51.820 --> 00:22:53.760
all of the carotenes inside of it in
addition they're also the place that

00:22:53.760 --> 00:22:53.770
addition they're also the place that
 

00:22:53.770 --> 00:22:55.500
addition they're also the place that
uncaught exceptions formica routine gets

00:22:55.500 --> 00:22:55.510
uncaught exceptions formica routine gets
 

00:22:55.510 --> 00:22:57.420
uncaught exceptions formica routine gets
shuffled off to now you put that all

00:22:57.420 --> 00:22:57.430
shuffled off to now you put that all
 

00:22:57.430 --> 00:22:59.880
shuffled off to now you put that all
together and you can use scopes to help

00:22:59.880 --> 00:22:59.890
together and you can use scopes to help
 

00:22:59.890 --> 00:23:01.710
together and you can use scopes to help
ensure that you never leaked occur

00:23:01.710 --> 00:23:01.720
ensure that you never leaked occur
 

00:23:01.720 --> 00:23:04.530
ensure that you never leaked occur
routine work manager that Sergei talked

00:23:04.530 --> 00:23:04.540
routine work manager that Sergei talked
 

00:23:04.540 --> 00:23:06.330
routine work manager that Sergei talked
about provides a scope so does the live

00:23:06.330 --> 00:23:06.340
about provides a scope so does the live
 

00:23:06.340 --> 00:23:07.890
about provides a scope so does the live
data builder that yet just talked about

00:23:07.890 --> 00:23:07.900
data builder that yet just talked about
 

00:23:07.900 --> 00:23:11.160
data builder that yet just talked about
view model scope is a scope it's an

00:23:11.160 --> 00:23:11.170
view model scope is a scope it's an
 

00:23:11.170 --> 00:23:13.290
view model scope is a scope it's an
extension property on view model from

00:23:13.290 --> 00:23:13.300
extension property on view model from
 

00:23:13.300 --> 00:23:16.170
extension property on view model from
the KTX library I'm gonna do another one

00:23:16.170 --> 00:23:16.180
the KTX library I'm gonna do another one
 

00:23:16.180 --> 00:23:18.210
the KTX library I'm gonna do another one
of those scary infinite loop things that

00:23:18.210 --> 00:23:18.220
of those scary infinite loop things that
 

00:23:18.220 --> 00:23:19.740
of those scary infinite loop things that
Yeats showed but this time in a

00:23:19.740 --> 00:23:19.750
Yeats showed but this time in a
 

00:23:19.750 --> 00:23:21.510
Yeats showed but this time in a
quarantine that I start myself interview

00:23:21.510 --> 00:23:21.520
quarantine that I start myself interview
 

00:23:21.520 --> 00:23:23.910
quarantine that I start myself interview
model it uses view model scope to launch

00:23:23.910 --> 00:23:23.920
model it uses view model scope to launch
 

00:23:23.920 --> 00:23:26.040
model it uses view model scope to launch
a quarantine in the scope and by default

00:23:26.040 --> 00:23:26.050
a quarantine in the scope and by default
 

00:23:26.050 --> 00:23:28.800
a quarantine in the scope and by default
this launches on main then it starts an

00:23:28.800 --> 00:23:28.810
this launches on main then it starts an
 

00:23:28.810 --> 00:23:30.690
this launches on main then it starts an
infinite loop that doesn't know how to

00:23:30.690 --> 00:23:30.700
infinite loop that doesn't know how to
 

00:23:30.700 --> 00:23:33.450
infinite loop that doesn't know how to
stop itself and every second it's gonna

00:23:33.450 --> 00:23:33.460
stop itself and every second it's gonna
 

00:23:33.460 --> 00:23:35.700
stop itself and every second it's gonna
go ahead and write a file now that's

00:23:35.700 --> 00:23:35.710
go ahead and write a file now that's
 

00:23:35.710 --> 00:23:38.850
go ahead and write a file now that's
pretty expensive it's cover teams don't

00:23:38.850 --> 00:23:38.860
pretty expensive it's cover teams don't
 

00:23:38.860 --> 00:23:40.360
pretty expensive it's cover teams don't
make writing files faster

00:23:40.360 --> 00:23:40.370
make writing files faster
 

00:23:40.370 --> 00:23:42.909
make writing files faster
cheaper and we definitely don't want to

00:23:42.909 --> 00:23:42.919
cheaper and we definitely don't want to
 

00:23:42.919 --> 00:23:46.240
cheaper and we definitely don't want to
leak this work human scope lets us write

00:23:46.240 --> 00:23:46.250
leak this work human scope lets us write
 

00:23:46.250 --> 00:23:48.310
leak this work human scope lets us write
code like this safely when the user

00:23:48.310 --> 00:23:48.320
code like this safely when the user
 

00:23:48.320 --> 00:23:50.470
code like this safely when the user
navigates away from the screen the scope

00:23:50.470 --> 00:23:50.480
navigates away from the screen the scope
 

00:23:50.480 --> 00:23:52.480
navigates away from the screen the scope
will be canceled which guarantees this

00:23:52.480 --> 00:23:52.490
will be canceled which guarantees this
 

00:23:52.490 --> 00:23:55.960
will be canceled which guarantees this
very expensive work one week so if you

00:23:55.960 --> 00:23:55.970
very expensive work one week so if you
 

00:23:55.970 --> 00:23:57.310
very expensive work one week so if you
model scope can help you avoid

00:23:57.310 --> 00:23:57.320
model scope can help you avoid
 

00:23:57.320 --> 00:23:59.230
model scope can help you avoid
co-routine leaks by guaranteeing all

00:23:59.230 --> 00:23:59.240
co-routine leaks by guaranteeing all
 

00:23:59.240 --> 00:24:01.630
co-routine leaks by guaranteeing all
your cover teens are canceled whenever a

00:24:01.630 --> 00:24:01.640
your cover teens are canceled whenever a
 

00:24:01.640 --> 00:24:03.970
your cover teens are canceled whenever a
user leaves the screen I'm gonna pass it

00:24:03.970 --> 00:24:03.980
user leaves the screen I'm gonna pass it
 

00:24:03.980 --> 00:24:05.500
user leaves the screen I'm gonna pass it
over to Sergei he's gonna talk about

00:24:05.500 --> 00:24:05.510
over to Sergei he's gonna talk about
 

00:24:05.510 --> 00:24:07.390
over to Sergei he's gonna talk about
some other scopes writing yeah thanks

00:24:07.390 --> 00:24:07.400
some other scopes writing yeah thanks
 

00:24:07.400 --> 00:24:10.060
some other scopes writing yeah thanks
Jon yep another thing that's very

00:24:10.060 --> 00:24:10.070
Jon yep another thing that's very
 

00:24:10.070 --> 00:24:12.610
Jon yep another thing that's very
naturally provides scope is lifecycle

00:24:12.610 --> 00:24:12.620
naturally provides scope is lifecycle
 

00:24:12.620 --> 00:24:14.350
naturally provides scope is lifecycle
because as you can say from his name

00:24:14.350 --> 00:24:14.360
because as you can say from his name
 

00:24:14.360 --> 00:24:16.269
because as you can say from his name
something that has a start and the end

00:24:16.269 --> 00:24:16.279
something that has a start and the end
 

00:24:16.279 --> 00:24:18.279
something that has a start and the end
and if you think you are not familiar

00:24:18.279 --> 00:24:18.289
and if you think you are not familiar
 

00:24:18.289 --> 00:24:20.560
and if you think you are not familiar
face lifecycle owner interface you're

00:24:20.560 --> 00:24:20.570
face lifecycle owner interface you're
 

00:24:20.570 --> 00:24:23.409
face lifecycle owner interface you're
actually are because it is your activity

00:24:23.409 --> 00:24:23.419
actually are because it is your activity
 

00:24:23.419 --> 00:24:26.049
actually are because it is your activity
it is your fragment and don't forget

00:24:26.049 --> 00:24:26.059
it is your fragment and don't forget
 

00:24:26.059 --> 00:24:28.539
it is your fragment and don't forget
that fragment conveniently has two

00:24:28.539 --> 00:24:28.549
that fragment conveniently has two
 

00:24:28.549 --> 00:24:30.130
that fragment conveniently has two
different life cycles and the second one

00:24:30.130 --> 00:24:30.140
different life cycles and the second one
 

00:24:30.140 --> 00:24:32.620
different life cycles and the second one
is associated with views inside of it

00:24:32.620 --> 00:24:32.630
is associated with views inside of it
 

00:24:32.630 --> 00:24:34.450
is associated with views inside of it
and fortunately for me I don't have to

00:24:34.450 --> 00:24:34.460
and fortunately for me I don't have to
 

00:24:34.460 --> 00:24:39.490
and fortunately for me I don't have to
talk about that but let's defined scope

00:24:39.490 --> 00:24:39.500
talk about that but let's defined scope
 

00:24:39.500 --> 00:24:41.740
talk about that but let's defined scope
more precise there so as you know your

00:24:41.740 --> 00:24:41.750
more precise there so as you know your
 

00:24:41.750 --> 00:24:45.310
more precise there so as you know your
fragments are get recreated over with do

00:24:45.310 --> 00:24:45.320
fragments are get recreated over with do
 

00:24:45.320 --> 00:24:47.320
fragments are get recreated over with do
you configuration changes so it's life

00:24:47.320 --> 00:24:47.330
you configuration changes so it's life
 

00:24:47.330 --> 00:24:49.659
you configuration changes so it's life
cycle can lifetime can be shorter it can

00:24:49.659 --> 00:24:49.669
cycle can lifetime can be shorter it can
 

00:24:49.669 --> 00:24:53.080
cycle can lifetime can be shorter it can
be longer and lexical scope just mirrors

00:24:53.080 --> 00:24:53.090
be longer and lexical scope just mirrors
 

00:24:53.090 --> 00:24:56.590
be longer and lexical scope just mirrors
that meaning that once your lifecycle

00:24:56.590 --> 00:24:56.600
that meaning that once your lifecycle
 

00:24:56.600 --> 00:25:00.580
that meaning that once your lifecycle
owner receives destroy event lifecycle

00:25:00.580 --> 00:25:00.590
owner receives destroy event lifecycle
 

00:25:00.590 --> 00:25:03.070
owner receives destroy event lifecycle
scope gets cancelled and all its energy

00:25:03.070 --> 00:25:03.080
scope gets cancelled and all its energy
 

00:25:03.080 --> 00:25:07.240
scope gets cancelled and all its energy
ups are canceled as well so as you can

00:25:07.240 --> 00:25:07.250
ups are canceled as well so as you can
 

00:25:07.250 --> 00:25:09.700
ups are canceled as well so as you can
see the recycle scope is very tightly

00:25:09.700 --> 00:25:09.710
see the recycle scope is very tightly
 

00:25:09.710 --> 00:25:13.000
see the recycle scope is very tightly
coupled with UI and it works best in

00:25:13.000 --> 00:25:13.010
coupled with UI and it works best in
 

00:25:13.010 --> 00:25:15.490
coupled with UI and it works best in
situation like that so previously you

00:25:15.490 --> 00:25:15.500
situation like that so previously you
 

00:25:15.500 --> 00:25:18.159
situation like that so previously you
would have you do something like this

00:25:18.159 --> 00:25:18.169
would have you do something like this
 

00:25:18.169 --> 00:25:20.799
would have you do something like this
when you decide to show some UI will

00:25:20.799 --> 00:25:20.809
when you decide to show some UI will
 

00:25:20.809 --> 00:25:24.490
when you decide to show some UI will
delay and well this looks pretty simple

00:25:24.490 --> 00:25:24.500
delay and well this looks pretty simple
 

00:25:24.500 --> 00:25:27.250
delay and well this looks pretty simple
so we can make it a bit harder and if we

00:25:27.250 --> 00:25:27.260
so we can make it a bit harder and if we
 

00:25:27.260 --> 00:25:31.000
so we can make it a bit harder and if we
have a two steps it becomes to look very

00:25:31.000 --> 00:25:31.010
have a two steps it becomes to look very
 

00:25:31.010 --> 00:25:33.760
have a two steps it becomes to look very
ugly because of this deep nesting and

00:25:33.760 --> 00:25:33.770
ugly because of this deep nesting and
 

00:25:33.770 --> 00:25:35.950
ugly because of this deep nesting and
actually if you take a closer look you

00:25:35.950 --> 00:25:35.960
actually if you take a closer look you
 

00:25:35.960 --> 00:25:38.380
actually if you take a closer look you
have some real issues here because this

00:25:38.380 --> 00:25:38.390
have some real issues here because this
 

00:25:38.390 --> 00:25:41.289
have some real issues here because this
main Handler and those functions that

00:25:41.289 --> 00:25:41.299
main Handler and those functions that
 

00:25:41.299 --> 00:25:43.630
main Handler and those functions that
touch you I don't really work nicely

00:25:43.630 --> 00:25:43.640
touch you I don't really work nicely
 

00:25:43.640 --> 00:25:46.299
touch you I don't really work nicely
together because main handler is kind of

00:25:46.299 --> 00:25:46.309
together because main handler is kind of
 

00:25:46.309 --> 00:25:47.710
together because main handler is kind of
a global scope it doesn't care about

00:25:47.710 --> 00:25:47.720
a global scope it doesn't care about
 

00:25:47.720 --> 00:25:50.230
a global scope it doesn't care about
your lifecycle at all and those

00:25:50.230 --> 00:25:50.240
your lifecycle at all and those
 

00:25:50.240 --> 00:25:53.520
your lifecycle at all and those
functions have reference to fragments

00:25:53.520 --> 00:25:53.530
functions have reference to fragments
 

00:25:53.530 --> 00:25:56.010
functions have reference to fragments
or activities so if your delay is long

00:25:56.010 --> 00:25:56.020
or activities so if your delay is long
 

00:25:56.020 --> 00:25:59.550
or activities so if your delay is long
enough you can easily leak a lot of them

00:25:59.550 --> 00:25:59.560
enough you can easily leak a lot of them
 

00:25:59.560 --> 00:26:02.960
enough you can easily leak a lot of them
and receive out of memory exception well

00:26:02.960 --> 00:26:02.970
and receive out of memory exception well
 

00:26:02.970 --> 00:26:07.400
and receive out of memory exception well
my second scope will cancel all those

00:26:07.400 --> 00:26:07.410
my second scope will cancel all those
 

00:26:07.410 --> 00:26:10.410
my second scope will cancel all those
callbacks we are so for us is a

00:26:10.410 --> 00:26:10.420
callbacks we are so for us is a
 

00:26:10.420 --> 00:26:11.940
callbacks we are so for us is a
kind of a callback because it's suspend

00:26:11.940 --> 00:26:11.950
kind of a callback because it's suspend
 

00:26:11.950 --> 00:26:14.190
kind of a callback because it's suspend
function it will cancel it automatically

00:26:14.190 --> 00:26:14.200
function it will cancel it automatically
 

00:26:14.200 --> 00:26:17.190
function it will cancel it automatically
once your life cycle is destroyed so

00:26:17.190 --> 00:26:17.200
once your life cycle is destroyed so
 

00:26:17.200 --> 00:26:19.770
once your life cycle is destroyed so
this code looks nicely because it's very

00:26:19.770 --> 00:26:19.780
this code looks nicely because it's very
 

00:26:19.780 --> 00:26:22.460
this code looks nicely because it's very
sequential and it is actually safer

00:26:22.460 --> 00:26:22.470
sequential and it is actually safer
 

00:26:22.470 --> 00:26:25.470
sequential and it is actually safer
however I have to say that life cycle

00:26:25.470 --> 00:26:25.480
however I have to say that life cycle
 

00:26:25.480 --> 00:26:28.680
however I have to say that life cycle
scope is a bit of a danger zone so let's

00:26:28.680 --> 00:26:28.690
scope is a bit of a danger zone so let's
 

00:26:28.690 --> 00:26:30.120
scope is a bit of a danger zone so let's
rewind a little bit I was the one who

00:26:30.120 --> 00:26:30.130
rewind a little bit I was the one who
 

00:26:30.130 --> 00:26:32.730
rewind a little bit I was the one who
show you that retrofit and room supports

00:26:32.730 --> 00:26:32.740
show you that retrofit and room supports
 

00:26:32.740 --> 00:26:35.820
show you that retrofit and room supports
suspend functions it shows you something

00:26:35.820 --> 00:26:35.830
suspend functions it shows you something
 

00:26:35.830 --> 00:26:38.910
suspend functions it shows you something
look that very family looks like that

00:26:38.910 --> 00:26:38.920
look that very family looks like that
 

00:26:38.920 --> 00:26:42.080
look that very family looks like that
when you say okay I will combine those

00:26:42.080 --> 00:26:42.090
when you say okay I will combine those
 

00:26:42.090 --> 00:26:44.550
when you say okay I will combine those
functions to network and database into

00:26:44.550 --> 00:26:44.560
functions to network and database into
 

00:26:44.560 --> 00:26:47.070
functions to network and database into
some repository pattern and I'll have

00:26:47.070 --> 00:26:47.080
some repository pattern and I'll have
 

00:26:47.080 --> 00:26:48.870
some repository pattern and I'll have
just one function which is suspend

00:26:48.870 --> 00:26:48.880
just one function which is suspend
 

00:26:48.880 --> 00:26:51.810
just one function which is suspend
function that orchestrate all of this

00:26:51.810 --> 00:26:51.820
function that orchestrate all of this
 

00:26:51.820 --> 00:26:54.480
function that orchestrate all of this
work so I just need the scope to call it

00:26:54.480 --> 00:26:54.490
work so I just need the scope to call it
 

00:26:54.490 --> 00:26:57.600
work so I just need the scope to call it
so why wouldn't I just call it in my

00:26:57.600 --> 00:26:57.610
so why wouldn't I just call it in my
 

00:26:57.610 --> 00:27:00.150
so why wouldn't I just call it in my
life cycle scope and it's actually not a

00:27:00.150 --> 00:27:00.160
life cycle scope and it's actually not a
 

00:27:00.160 --> 00:27:02.360
life cycle scope and it's actually not a
brightest idea

00:27:02.360 --> 00:27:02.370
brightest idea
 

00:27:02.370 --> 00:27:07.290
brightest idea
well why and don't get me wrong you can

00:27:07.290 --> 00:27:07.300
well why and don't get me wrong you can
 

00:27:07.300 --> 00:27:09.780
well why and don't get me wrong you can
Sean told you everything correctly it

00:27:09.780 --> 00:27:09.790
Sean told you everything correctly it
 

00:27:09.790 --> 00:27:12.180
Sean told you everything correctly it
won't lock main thread it wants the

00:27:12.180 --> 00:27:12.190
won't lock main thread it wants the
 

00:27:12.190 --> 00:27:14.160
won't lock main thread it wants the
curtains however do remember this

00:27:14.160 --> 00:27:14.170
curtains however do remember this
 

00:27:14.170 --> 00:27:17.640
curtains however do remember this
picture lexical scope get canceled on

00:27:17.640 --> 00:27:17.650
picture lexical scope get canceled on
 

00:27:17.650 --> 00:27:20.010
picture lexical scope get canceled on
every configuration change meaning that

00:27:20.010 --> 00:27:20.020
every configuration change meaning that
 

00:27:20.020 --> 00:27:23.010
every configuration change meaning that
your main that your network request gets

00:27:23.010 --> 00:27:23.020
your main that your network request gets
 

00:27:23.020 --> 00:27:25.500
your main that your network request gets
canceled every time so it is just

00:27:25.500 --> 00:27:25.510
canceled every time so it is just
 

00:27:25.510 --> 00:27:27.900
canceled every time so it is just
wasteful you're wasting users resources

00:27:27.900 --> 00:27:27.910
wasteful you're wasting users resources
 

00:27:27.910 --> 00:27:30.000
wasteful you're wasting users resources
to battle resources it's just bad for

00:27:30.000 --> 00:27:30.010
to battle resources it's just bad for
 

00:27:30.010 --> 00:27:36.420
to battle resources it's just bad for
environment so so how you would do it

00:27:36.420 --> 00:27:36.430
environment so so how you would do it
 

00:27:36.430 --> 00:27:38.070
environment so so how you would do it
properly well one of the things actually

00:27:38.070 --> 00:27:38.080
properly well one of the things actually
 

00:27:38.080 --> 00:27:40.140
properly well one of the things actually
was presented by get like this life that

00:27:40.140 --> 00:27:40.150
was presented by get like this life that
 

00:27:40.150 --> 00:27:42.600
was presented by get like this life that
builder will work very nice in this kind

00:27:42.600 --> 00:27:42.610
builder will work very nice in this kind
 

00:27:42.610 --> 00:27:44.610
builder will work very nice in this kind
of situations I'll present you like an

00:27:44.610 --> 00:27:44.620
of situations I'll present you like an
 

00:27:44.620 --> 00:27:47.280
of situations I'll present you like an
hour way how you can approach this so

00:27:47.280 --> 00:27:47.290
hour way how you can approach this so
 

00:27:47.290 --> 00:27:49.680
hour way how you can approach this so
your starting point from this kind of

00:27:49.680 --> 00:27:49.690
your starting point from this kind of
 

00:27:49.690 --> 00:27:51.960
your starting point from this kind of
task is a view model scope so you just

00:27:51.960 --> 00:27:51.970
task is a view model scope so you just
 

00:27:51.970 --> 00:27:54.720
task is a view model scope so you just
run this load function in this femoral

00:27:54.720 --> 00:27:54.730
run this load function in this femoral
 

00:27:54.730 --> 00:27:57.390
run this load function in this femoral
scope then we introduce a function in

00:27:57.390 --> 00:27:57.400
scope then we introduce a function in
 

00:27:57.400 --> 00:28:00.000
scope then we introduce a function in
the model that you connect our UI nav

00:28:00.000 --> 00:28:00.010
the model that you connect our UI nav
 

00:28:00.010 --> 00:28:00.450
the model that you connect our UI nav
model

00:28:00.450 --> 00:28:00.460
model
 

00:28:00.460 --> 00:28:02.550
model
third when you grab a node well as we

00:28:02.550 --> 00:28:02.560
third when you grab a node well as we
 

00:28:02.560 --> 00:28:05.520
third when you grab a node well as we
discussed it's a network call somewhere

00:28:05.520 --> 00:28:05.530
discussed it's a network call somewhere
 

00:28:05.530 --> 00:28:06.990
discussed it's a network call somewhere
inside of his load node

00:28:06.990 --> 00:28:07.000
inside of his load node
 

00:28:07.000 --> 00:28:09.390
inside of his load node
so it's I seen Fran separation so it

00:28:09.390 --> 00:28:09.400
so it's I seen Fran separation so it
 

00:28:09.400 --> 00:28:12.750
so it's I seen Fran separation so it
should be suspended and well now we need

00:28:12.750 --> 00:28:12.760
should be suspended and well now we need
 

00:28:12.760 --> 00:28:15.600
should be suspended and well now we need
somehow connect this note that is loaded

00:28:15.600 --> 00:28:15.610
somehow connect this note that is loaded
 

00:28:15.610 --> 00:28:18.330
somehow connect this note that is loaded
in one scope and load not functions will

00:28:18.330 --> 00:28:18.340
in one scope and load not functions will
 

00:28:18.340 --> 00:28:21.120
in one scope and load not functions will
be called in some other scope well I

00:28:21.120 --> 00:28:21.130
be called in some other scope well I
 

00:28:21.130 --> 00:28:23.580
be called in some other scope well I
will use complete deferrable well it

00:28:23.580 --> 00:28:23.590
will use complete deferrable well it
 

00:28:23.590 --> 00:28:25.950
will use complete deferrable well it
sounds a bit scary but it's actually a

00:28:25.950 --> 00:28:25.960
sounds a bit scary but it's actually a
 

00:28:25.960 --> 00:28:27.539
sounds a bit scary but it's actually a
very simple thing you will see in a

00:28:27.539 --> 00:28:27.549
very simple thing you will see in a
 

00:28:27.549 --> 00:28:30.810
very simple thing you will see in a
second so how we use it we complete our

00:28:30.810 --> 00:28:30.820
second so how we use it we complete our
 

00:28:30.820 --> 00:28:32.940
second so how we use it we complete our
deferred with a note that we loaded it

00:28:32.940 --> 00:28:32.950
deferred with a note that we loaded it
 

00:28:32.950 --> 00:28:35.190
deferred with a note that we loaded it
just put the note into this object

00:28:35.190 --> 00:28:35.200
just put the note into this object
 

00:28:35.200 --> 00:28:41.159
just put the note into this object
nothing happens and readers request the

00:28:41.159 --> 00:28:41.169
nothing happens and readers request the
 

00:28:41.169 --> 00:28:43.620
nothing happens and readers request the
note like with a weight function from

00:28:43.620 --> 00:28:43.630
note like with a weight function from
 

00:28:43.630 --> 00:28:46.700
note like with a weight function from
this deferred if a note isn't ready yet

00:28:46.700 --> 00:28:46.710
this deferred if a note isn't ready yet
 

00:28:46.710 --> 00:28:51.779
this deferred if a note isn't ready yet
then the reader will be suspended if it

00:28:51.779 --> 00:28:51.789
then the reader will be suspended if it
 

00:28:51.789 --> 00:28:55.740
then the reader will be suspended if it
is ready we will resumed right away so

00:28:55.740 --> 00:28:55.750
is ready we will resumed right away so
 

00:28:55.750 --> 00:28:58.560
is ready we will resumed right away so
this is how implemented our review model

00:28:58.560 --> 00:28:58.570
this is how implemented our review model
 

00:28:58.570 --> 00:29:01.710
this is how implemented our review model
and last step we just call that in our

00:29:01.710 --> 00:29:01.720
and last step we just call that in our
 

00:29:01.720 --> 00:29:05.399
and last step we just call that in our
lifecycle scope this load note function

00:29:05.399 --> 00:29:05.409
lifecycle scope this load note function
 

00:29:05.409 --> 00:29:07.580
lifecycle scope this load note function
that we introduced in a view model and

00:29:07.580 --> 00:29:07.590
that we introduced in a view model and
 

00:29:07.590 --> 00:29:11.700
that we introduced in a view model and
our network called properly is is

00:29:11.700 --> 00:29:11.710
our network called properly is is
 

00:29:11.710 --> 00:29:15.000
our network called properly is is
properly executed in view model scope so

00:29:15.000 --> 00:29:15.010
properly executed in view model scope so
 

00:29:15.010 --> 00:29:17.010
properly executed in view model scope so
it's not affected by configuration

00:29:17.010 --> 00:29:17.020
it's not affected by configuration
 

00:29:17.020 --> 00:29:19.980
it's not affected by configuration
changes and our update UI function

00:29:19.980 --> 00:29:19.990
changes and our update UI function
 

00:29:19.990 --> 00:29:23.549
changes and our update UI function
doesn't leak once your life cycle one

00:29:23.549 --> 00:29:23.559
doesn't leak once your life cycle one
 

00:29:23.559 --> 00:29:27.180
doesn't leak once your life cycle one
cycle owner gets destroyed however once

00:29:27.180 --> 00:29:27.190
cycle owner gets destroyed however once
 

00:29:27.190 --> 00:29:28.529
cycle owner gets destroyed however once
we add the fragment into the picture

00:29:28.529 --> 00:29:28.539
we add the fragment into the picture
 

00:29:28.539 --> 00:29:31.529
we add the fragment into the picture
things get complicated as always so

00:29:31.529 --> 00:29:31.539
things get complicated as always so
 

00:29:31.539 --> 00:29:33.570
things get complicated as always so
right we decided to run the fragment

00:29:33.570 --> 00:29:33.580
right we decided to run the fragment
 

00:29:33.580 --> 00:29:36.120
right we decided to run the fragment
transaction and you will get a legal

00:29:36.120 --> 00:29:36.130
transaction and you will get a legal
 

00:29:36.130 --> 00:29:38.070
transaction and you will get a legal
state exception because nothing

00:29:38.070 --> 00:29:38.080
state exception because nothing
 

00:29:38.080 --> 00:29:40.020
state exception because nothing
guarantees you that you are in the

00:29:40.020 --> 00:29:40.030
guarantees you that you are in the
 

00:29:40.030 --> 00:29:43.680
guarantees you that you are in the
correct state that allows you to execute

00:29:43.680 --> 00:29:43.690
correct state that allows you to execute
 

00:29:43.690 --> 00:29:46.289
correct state that allows you to execute
fragment transaction and we did

00:29:46.289 --> 00:29:46.299
fragment transaction and we did
 

00:29:46.299 --> 00:29:48.720
fragment transaction and we did
something smart and introduced some

00:29:48.720 --> 00:29:48.730
something smart and introduced some
 

00:29:48.730 --> 00:29:51.330
something smart and introduced some
special function that help you to deal

00:29:51.330 --> 00:29:51.340
special function that help you to deal
 

00:29:51.340 --> 00:29:54.480
special function that help you to deal
with these kind of situations and this

00:29:54.480 --> 00:29:54.490
with these kind of situations and this
 

00:29:54.490 --> 00:29:56.399
with these kind of situations and this
is going to be a bit tricky because it's

00:29:56.399 --> 00:29:56.409
is going to be a bit tricky because it's
 

00:29:56.409 --> 00:29:59.310
is going to be a bit tricky because it's
actually fairly complicated things but

00:29:59.310 --> 00:29:59.320
actually fairly complicated things but
 

00:29:59.320 --> 00:30:03.029
actually fairly complicated things but
what it does this block will run only

00:30:03.029 --> 00:30:03.039
what it does this block will run only
 

00:30:03.039 --> 00:30:05.880
what it does this block will run only
when your application is started or

00:30:05.880 --> 00:30:05.890
when your application is started or
 

00:30:05.890 --> 00:30:08.130
when your application is started or
resumed meaning that is enough for a

00:30:08.130 --> 00:30:08.140
resumed meaning that is enough for a
 

00:30:08.140 --> 00:30:11.430
resumed meaning that is enough for a
ground and this block will be suspended

00:30:11.430 --> 00:30:11.440
ground and this block will be suspended
 

00:30:11.440 --> 00:30:14.310
ground and this block will be suspended
when the application is when your life

00:30:14.310 --> 00:30:14.320
when the application is when your life
 

00:30:14.320 --> 00:30:17.310
when the application is when your life
cycle is just created so let's take a

00:30:17.310 --> 00:30:17.320
cycle is just created so let's take a
 

00:30:17.320 --> 00:30:18.990
cycle is just created so let's take a
look on an example what it actually

00:30:18.990 --> 00:30:19.000
look on an example what it actually
 

00:30:19.000 --> 00:30:20.470
look on an example what it actually
means so

00:30:20.470 --> 00:30:20.480
means so
 

00:30:20.480 --> 00:30:23.920
means so
you have this function I read it is

00:30:23.920 --> 00:30:23.930
you have this function I read it is
 

00:30:23.930 --> 00:30:26.710
you have this function I read it is
called probably in the beginning your

00:30:26.710 --> 00:30:26.720
called probably in the beginning your
 

00:30:26.720 --> 00:30:29.080
called probably in the beginning your
block will be suspended because note is

00:30:29.080 --> 00:30:29.090
block will be suspended because note is
 

00:30:29.090 --> 00:30:33.940
block will be suspended because note is
not ready then once is ready in usual

00:30:33.940 --> 00:30:33.950
not ready then once is ready in usual
 

00:30:33.950 --> 00:30:37.990
not ready then once is ready in usual
situation we would resume execution and

00:30:37.990 --> 00:30:38.000
situation we would resume execution and
 

00:30:38.000 --> 00:30:39.220
situation we would resume execution and
proceed to the next line

00:30:39.220 --> 00:30:39.230
proceed to the next line
 

00:30:39.230 --> 00:30:41.440
proceed to the next line
but with lunch when started function

00:30:41.440 --> 00:30:41.450
but with lunch when started function
 

00:30:41.450 --> 00:30:45.130
but with lunch when started function
we're going to go and check life cycle

00:30:45.130 --> 00:30:45.140
we're going to go and check life cycle
 

00:30:45.140 --> 00:30:48.190
we're going to go and check life cycle
if it is not started we going suspend

00:30:48.190 --> 00:30:48.200
if it is not started we going suspend
 

00:30:48.200 --> 00:30:50.800
if it is not started we going suspend
forever until the life cycle will become

00:30:50.800 --> 00:30:50.810
forever until the life cycle will become
 

00:30:50.810 --> 00:30:53.770
forever until the life cycle will become
started again and once it is started

00:30:53.770 --> 00:30:53.780
started again and once it is started
 

00:30:53.780 --> 00:30:56.350
started again and once it is started
when we're going to proceed to the next

00:30:56.350 --> 00:30:56.360
when we're going to proceed to the next
 

00:30:56.360 --> 00:30:57.910
when we're going to proceed to the next
line and in the execute this transaction

00:30:57.910 --> 00:30:57.920
line and in the execute this transaction
 

00:30:57.920 --> 00:31:02.320
line and in the execute this transaction
so we won't run into this exception

00:31:02.320 --> 00:31:02.330
so we won't run into this exception
 

00:31:02.330 --> 00:31:05.320
so we won't run into this exception
situation so one thing I want to

00:31:05.320 --> 00:31:05.330
situation so one thing I want to
 

00:31:05.330 --> 00:31:10.000
situation so one thing I want to
highlight that this block is suspended

00:31:10.000 --> 00:31:10.010
highlight that this block is suspended
 

00:31:10.010 --> 00:31:11.770
highlight that this block is suspended
during creation and it's a different

00:31:11.770 --> 00:31:11.780
during creation and it's a different
 

00:31:11.780 --> 00:31:14.200
during creation and it's a different
frame from being canceled because

00:31:14.200 --> 00:31:14.210
frame from being canceled because
 

00:31:14.210 --> 00:31:16.840
frame from being canceled because
cancellation is still provided where

00:31:16.840 --> 00:31:16.850
cancellation is still provided where
 

00:31:16.850 --> 00:31:19.300
cancellation is still provided where
lifecycle scope when destroy haven't

00:31:19.300 --> 00:31:19.310
lifecycle scope when destroy haven't
 

00:31:19.310 --> 00:31:24.220
lifecycle scope when destroy haven't
happen and now as you can see we it's

00:31:24.220 --> 00:31:24.230
happen and now as you can see we it's
 

00:31:24.230 --> 00:31:25.510
happen and now as you can see we it's
something that we definitely need to

00:31:25.510 --> 00:31:25.520
something that we definitely need to
 

00:31:25.520 --> 00:31:26.590
something that we definitely need to
test and Chango

00:31:26.590 --> 00:31:26.600
test and Chango
 

00:31:26.600 --> 00:31:30.850
test and Chango
how do that thanks Sergey so we talk to

00:31:30.850 --> 00:31:30.860
how do that thanks Sergey so we talk to
 

00:31:30.860 --> 00:31:32.200
how do that thanks Sergey so we talk to
you a lot about car routines today we

00:31:32.200 --> 00:31:32.210
you a lot about car routines today we
 

00:31:32.210 --> 00:31:33.730
you a lot about car routines today we
talked about how they can help clean up

00:31:33.730 --> 00:31:33.740
talked about how they can help clean up
 

00:31:33.740 --> 00:31:35.770
talked about how they can help clean up
api's by replacing callbacks with

00:31:35.770 --> 00:31:35.780
api's by replacing callbacks with
 

00:31:35.780 --> 00:31:37.030
api's by replacing callbacks with
suspend and resume we talked about

00:31:37.030 --> 00:31:37.040
suspend and resume we talked about
 

00:31:37.040 --> 00:31:39.160
suspend and resume we talked about
different ways they can be used in

00:31:39.160 --> 00:31:39.170
different ways they can be used in
 

00:31:39.170 --> 00:31:41.410
different ways they can be used in
different situations and that's all

00:31:41.410 --> 00:31:41.420
different situations and that's all
 

00:31:41.420 --> 00:31:43.330
different situations and that's all
great that's awesome but if they were

00:31:43.330 --> 00:31:43.340
great that's awesome but if they were
 

00:31:43.340 --> 00:31:45.400
great that's awesome but if they were
difficult to test that just be a

00:31:45.400 --> 00:31:45.410
difficult to test that just be a
 

00:31:45.410 --> 00:31:46.690
difficult to test that just be a
non-starter it wouldn't be something

00:31:46.690 --> 00:31:46.700
non-starter it wouldn't be something
 

00:31:46.700 --> 00:31:48.460
non-starter it wouldn't be something
that I would take very seriously as a

00:31:48.460 --> 00:31:48.470
that I would take very seriously as a
 

00:31:48.470 --> 00:31:52.300
that I would take very seriously as a
thing to use so what I want to talk to

00:31:52.300 --> 00:31:52.310
thing to use so what I want to talk to
 

00:31:52.310 --> 00:31:54.400
thing to use so what I want to talk to
you about right now is Kotlin XK routine

00:31:54.400 --> 00:31:54.410
you about right now is Kotlin XK routine
 

00:31:54.410 --> 00:31:56.800
you about right now is Kotlin XK routine
test it's a new library came out about a

00:31:56.800 --> 00:31:56.810
test it's a new library came out about a
 

00:31:56.810 --> 00:31:59.140
test it's a new library came out about a
week and a half ago that's currently

00:31:59.140 --> 00:31:59.150
week and a half ago that's currently
 

00:31:59.150 --> 00:32:02.350
week and a half ago that's currently
marked experimental car routines API

00:32:02.350 --> 00:32:02.360
marked experimental car routines API
 

00:32:02.360 --> 00:32:04.630
marked experimental car routines API
because it needs it needs more feedback

00:32:04.630 --> 00:32:04.640
because it needs it needs more feedback
 

00:32:04.640 --> 00:32:05.860
because it needs it needs more feedback
before it makes it all the way to the

00:32:05.860 --> 00:32:05.870
before it makes it all the way to the
 

00:32:05.870 --> 00:32:07.840
before it makes it all the way to the
stable it's a collaboration between

00:32:07.840 --> 00:32:07.850
stable it's a collaboration between
 

00:32:07.850 --> 00:32:10.870
stable it's a collaboration between
Google and JetBrains to make testing

00:32:10.870 --> 00:32:10.880
Google and JetBrains to make testing
 

00:32:10.880 --> 00:32:14.410
Google and JetBrains to make testing
cover teens on Android very easy so it's

00:32:14.410 --> 00:32:14.420
cover teens on Android very easy so it's
 

00:32:14.420 --> 00:32:17.020
cover teens on Android very easy so it's
not coupled to any testing libraries so

00:32:17.020 --> 00:32:17.030
not coupled to any testing libraries so
 

00:32:17.030 --> 00:32:19.420
not coupled to any testing libraries so
you can use J unifor you can use J unit

00:32:19.420 --> 00:32:19.430
you can use J unifor you can use J unit
 

00:32:19.430 --> 00:32:21.880
you can use J unifor you can use J unit
5 you can use your own custom test

00:32:21.880 --> 00:32:21.890
5 you can use your own custom test
 

00:32:21.890 --> 00:32:23.650
5 you can use your own custom test
runner that you've built and this

00:32:23.650 --> 00:32:23.660
runner that you've built and this
 

00:32:23.660 --> 00:32:24.910
runner that you've built and this
library is going to help you test pair

00:32:24.910 --> 00:32:24.920
library is going to help you test pair
 

00:32:24.920 --> 00:32:25.990
library is going to help you test pair
routines

00:32:25.990 --> 00:32:26.000
routines
 

00:32:26.000 --> 00:32:28.900
routines
so I'm gonna focus in on that live data

00:32:28.900 --> 00:32:28.910
so I'm gonna focus in on that live data
 

00:32:28.910 --> 00:32:30.400
so I'm gonna focus in on that live data
builder that each showed and we're gonna

00:32:30.400 --> 00:32:30.410
builder that each showed and we're gonna
 

00:32:30.410 --> 00:32:31.810
builder that each showed and we're gonna
talk about how to write a test for that

00:32:31.810 --> 00:32:31.820
talk about how to write a test for that
 

00:32:31.820 --> 00:32:33.970
talk about how to write a test for that
so I'm just gonna omit one

00:32:33.970 --> 00:32:33.980
so I'm just gonna omit one
 

00:32:33.980 --> 00:32:35.440
so I'm just gonna omit one
I'm gonna wait a second and then I'm

00:32:35.440 --> 00:32:35.450
I'm gonna wait a second and then I'm
 

00:32:35.450 --> 00:32:37.510
I'm gonna wait a second and then I'm
gonna admit to so this is a relatively

00:32:37.510 --> 00:32:37.520
gonna admit to so this is a relatively
 

00:32:37.520 --> 00:32:39.430
gonna admit to so this is a relatively
simple live data so I can focus in on

00:32:39.430 --> 00:32:39.440
simple live data so I can focus in on
 

00:32:39.440 --> 00:32:42.880
simple live data so I can focus in on
how to write the test for it so to get

00:32:42.880 --> 00:32:42.890
how to write the test for it so to get
 

00:32:42.890 --> 00:32:45.010
how to write the test for it so to get
started we need to mock out that main

00:32:45.010 --> 00:32:45.020
started we need to mock out that main
 

00:32:45.020 --> 00:32:48.400
started we need to mock out that main
dispatcher the wipe data builder uses

00:32:48.400 --> 00:32:48.410
dispatcher the wipe data builder uses
 

00:32:48.410 --> 00:32:50.530
dispatcher the wipe data builder uses
dispatchers not mean by default which is

00:32:50.530 --> 00:32:50.540
dispatchers not mean by default which is
 

00:32:50.540 --> 00:32:53.020
dispatchers not mean by default which is
the actual main threat on Android we can

00:32:53.020 --> 00:32:53.030
the actual main threat on Android we can
 

00:32:53.030 --> 00:32:55.090
the actual main threat on Android we can
replace it with a test co-routine

00:32:55.090 --> 00:32:55.100
replace it with a test co-routine
 

00:32:55.100 --> 00:32:57.340
replace it with a test co-routine
dispatcher this is a special dispatcher

00:32:57.340 --> 00:32:57.350
dispatcher this is a special dispatcher
 

00:32:57.350 --> 00:33:00.130
dispatcher this is a special dispatcher
designed for testing carotenes and we

00:33:00.130 --> 00:33:00.140
designed for testing carotenes and we
 

00:33:00.140 --> 00:33:02.440
designed for testing carotenes and we
can make a test correcting scope this is

00:33:02.440 --> 00:33:02.450
can make a test correcting scope this is
 

00:33:02.450 --> 00:33:04.180
can make a test correcting scope this is
a scope designed for testing care

00:33:04.180 --> 00:33:04.190
a scope designed for testing care
 

00:33:04.190 --> 00:33:07.510
a scope designed for testing care
routines so then in setup you can switch

00:33:07.510 --> 00:33:07.520
routines so then in setup you can switch
 

00:33:07.520 --> 00:33:10.300
routines so then in setup you can switch
out dispatchers that main for a testing

00:33:10.300 --> 00:33:10.310
out dispatchers that main for a testing
 

00:33:10.310 --> 00:33:12.250
out dispatchers that main for a testing
dispatcher this will change the global

00:33:12.250 --> 00:33:12.260
dispatcher this will change the global
 

00:33:12.260 --> 00:33:13.780
dispatcher this will change the global
value for dispatchers that mean

00:33:13.780 --> 00:33:13.790
value for dispatchers that mean
 

00:33:13.790 --> 00:33:16.090
value for dispatchers that mean
immediately so the live data builder

00:33:16.090 --> 00:33:16.100
immediately so the live data builder
 

00:33:16.100 --> 00:33:18.790
immediately so the live data builder
will use the dispatcher we give it and

00:33:18.790 --> 00:33:18.800
will use the dispatcher we give it and
 

00:33:18.800 --> 00:33:21.130
will use the dispatcher we give it and
then in teardown reset main to the

00:33:21.130 --> 00:33:21.140
then in teardown reset main to the
 

00:33:21.140 --> 00:33:23.350
then in teardown reset main to the
default value and then this last line

00:33:23.350 --> 00:33:23.360
default value and then this last line
 

00:33:23.360 --> 00:33:24.880
default value and then this last line
here on the bottom is really really

00:33:24.880 --> 00:33:24.890
here on the bottom is really really
 

00:33:24.890 --> 00:33:26.920
here on the bottom is really really
important it says test scope cleanup

00:33:26.920 --> 00:33:26.930
important it says test scope cleanup
 

00:33:26.930 --> 00:33:28.840
important it says test scope cleanup
test care routines if you think about

00:33:28.840 --> 00:33:28.850
test care routines if you think about
 

00:33:28.850 --> 00:33:31.090
test care routines if you think about
what a dispatcher and a scope are doing

00:33:31.090 --> 00:33:31.100
what a dispatcher and a scope are doing
 

00:33:31.100 --> 00:33:32.740
what a dispatcher and a scope are doing
their very stateful right they have to

00:33:32.740 --> 00:33:32.750
their very stateful right they have to
 

00:33:32.750 --> 00:33:34.000
their very stateful right they have to
keep track of your Co routines and

00:33:34.000 --> 00:33:34.010
keep track of your Co routines and
 

00:33:34.010 --> 00:33:35.740
keep track of your Co routines and
actually run them so you don't call this

00:33:35.740 --> 00:33:35.750
actually run them so you don't call this
 

00:33:35.750 --> 00:33:37.690
actually run them so you don't call this
it's very easy to leak state between

00:33:37.690 --> 00:33:37.700
it's very easy to leak state between
 

00:33:37.700 --> 00:33:41.500
it's very easy to leak state between
tests so that's a lot of boilerplate so

00:33:41.500 --> 00:33:41.510
tests so that's a lot of boilerplate so
 

00:33:41.510 --> 00:33:43.150
tests so that's a lot of boilerplate so
you can go ahead and put that together

00:33:43.150 --> 00:33:43.160
you can go ahead and put that together
 

00:33:43.160 --> 00:33:45.760
you can go ahead and put that together
in maybe a J unit for role this doesn't

00:33:45.760 --> 00:33:45.770
in maybe a J unit for role this doesn't
 

00:33:45.770 --> 00:33:48.010
in maybe a J unit for role this doesn't
come in the library but you can write

00:33:48.010 --> 00:33:48.020
come in the library but you can write
 

00:33:48.020 --> 00:33:49.840
come in the library but you can write
all of that code into a rule and I would

00:33:49.840 --> 00:33:49.850
all of that code into a rule and I would
 

00:33:49.850 --> 00:33:51.250
all of that code into a rule and I would
expect to see a library that does this

00:33:51.250 --> 00:33:51.260
expect to see a library that does this
 

00:33:51.260 --> 00:33:54.850
expect to see a library that does this
relatively shortly so whatever testing

00:33:54.850 --> 00:33:54.860
relatively shortly so whatever testing
 

00:33:54.860 --> 00:33:56.680
relatively shortly so whatever testing
framework you're using however you

00:33:56.680 --> 00:33:56.690
framework you're using however you
 

00:33:56.690 --> 00:33:57.880
framework you're using however you
should build an abstraction that's

00:33:57.880 --> 00:33:57.890
should build an abstraction that's
 

00:33:57.890 --> 00:33:59.320
should build an abstraction that's
appropriate for your testing framework

00:33:59.320 --> 00:33:59.330
appropriate for your testing framework
 

00:33:59.330 --> 00:34:01.600
appropriate for your testing framework
to do that code the rule that I'm

00:34:01.600 --> 00:34:01.610
to do that code the rule that I'm
 

00:34:01.610 --> 00:34:03.790
to do that code the rule that I'm
defining here exposes test care routine

00:34:03.790 --> 00:34:03.800
defining here exposes test care routine
 

00:34:03.800 --> 00:34:06.610
defining here exposes test care routine
scope interface which lets me call run

00:34:06.610 --> 00:34:06.620
scope interface which lets me call run
 

00:34:06.620 --> 00:34:09.010
scope interface which lets me call run
blocking tests this is a cover team

00:34:09.010 --> 00:34:09.020
blocking tests this is a cover team
 

00:34:09.020 --> 00:34:11.710
blocking tests this is a cover team
builder that's optimized for testing it

00:34:11.710 --> 00:34:11.720
builder that's optimized for testing it
 

00:34:11.720 --> 00:34:14.230
builder that's optimized for testing it
works kind of like run blocking but it

00:34:14.230 --> 00:34:14.240
works kind of like run blocking but it
 

00:34:14.240 --> 00:34:16.090
works kind of like run blocking but it
makes writing a lot of tests easier oh

00:34:16.090 --> 00:34:16.100
makes writing a lot of tests easier oh
 

00:34:16.100 --> 00:34:19.660
makes writing a lot of tests easier oh
and it returns unit so you can use it in

00:34:19.660 --> 00:34:19.670
and it returns unit so you can use it in
 

00:34:19.670 --> 00:34:22.580
and it returns unit so you can use it in
single expression style in your test

00:34:22.580 --> 00:34:22.590
single expression style in your test
 

00:34:22.590 --> 00:34:25.280
single expression style in your test
then we get the subject and then we need

00:34:25.280 --> 00:34:25.290
then we get the subject and then we need
 

00:34:25.290 --> 00:34:27.290
then we get the subject and then we need
to start observing the live data so it

00:34:27.290 --> 00:34:27.300
to start observing the live data so it
 

00:34:27.300 --> 00:34:29.240
to start observing the live data so it
will execute remember the live data

00:34:29.240 --> 00:34:29.250
will execute remember the live data
 

00:34:29.250 --> 00:34:30.980
will execute remember the live data
builder won't run until someone's

00:34:30.980 --> 00:34:30.990
builder won't run until someone's
 

00:34:30.990 --> 00:34:32.660
builder won't run until someone's
observing it I'll define a little test

00:34:32.660 --> 00:34:32.670
observing it I'll define a little test
 

00:34:32.670 --> 00:34:34.370
observing it I'll define a little test
helper called observe for testing this

00:34:34.370 --> 00:34:34.380
helper called observe for testing this
 

00:34:34.380 --> 00:34:35.930
helper called observe for testing this
is just my test code it's not in a

00:34:35.930 --> 00:34:35.940
is just my test code it's not in a
 

00:34:35.940 --> 00:34:38.150
is just my test code it's not in a
library anywhere it's just gonna start

00:34:38.150 --> 00:34:38.160
library anywhere it's just gonna start
 

00:34:38.160 --> 00:34:39.920
library anywhere it's just gonna start
an observer and then call the block that

00:34:39.920 --> 00:34:39.930
an observer and then call the block that
 

00:34:39.930 --> 00:34:44.660
an observer and then call the block that
I passed it and back to the test the

00:34:44.660 --> 00:34:44.670
I passed it and back to the test the
 

00:34:44.670 --> 00:34:46.430
I passed it and back to the test the
first value has already been emitted

00:34:46.430 --> 00:34:46.440
first value has already been emitted
 

00:34:46.440 --> 00:34:47.330
first value has already been emitted
because I've made everything

00:34:47.330 --> 00:34:47.340
because I've made everything
 

00:34:47.340 --> 00:34:49.490
because I've made everything
deterministic with this this test rule

00:34:49.490 --> 00:34:49.500
deterministic with this this test rule
 

00:34:49.500 --> 00:34:51.530
deterministic with this this test rule
that I'm using I'm gonna use fluent

00:34:51.530 --> 00:34:51.540
that I'm using I'm gonna use fluent
 

00:34:51.540 --> 00:34:52.760
that I'm using I'm gonna use fluent
assertions to check that the value

00:34:52.760 --> 00:34:52.770
assertions to check that the value
 

00:34:52.770 --> 00:34:54.860
assertions to check that the value
should equal one and then I'm going to

00:34:54.860 --> 00:34:54.870
should equal one and then I'm going to
 

00:34:54.870 --> 00:34:57.200
should equal one and then I'm going to
advance the time by one second this is

00:34:57.200 --> 00:34:57.210
advance the time by one second this is
 

00:34:57.210 --> 00:34:59.210
advance the time by one second this is
one of the big advantages of test cut

00:34:59.210 --> 00:34:59.220
one of the big advantages of test cut
 

00:34:59.220 --> 00:35:00.950
one of the big advantages of test cut
routine dispatcher you can control

00:35:00.950 --> 00:35:00.960
routine dispatcher you can control
 

00:35:00.960 --> 00:35:03.770
routine dispatcher you can control
virtual time so advance time by it will

00:35:03.770 --> 00:35:03.780
virtual time so advance time by it will
 

00:35:03.780 --> 00:35:05.270
virtual time so advance time by it will
cause that delay to return immediately

00:35:05.270 --> 00:35:05.280
cause that delay to return immediately
 

00:35:05.280 --> 00:35:08.990
cause that delay to return immediately
and I have control over it in my test so

00:35:08.990 --> 00:35:09.000
and I have control over it in my test so
 

00:35:09.000 --> 00:35:10.850
and I have control over it in my test so
the second image is already done when I

00:35:10.850 --> 00:35:10.860
the second image is already done when I
 

00:35:10.860 --> 00:35:12.680
the second image is already done when I
get to this line of code there's no need

00:35:12.680 --> 00:35:12.690
get to this line of code there's no need
 

00:35:12.690 --> 00:35:15.140
get to this line of code there's no need
to spin and wait for a result and this

00:35:15.140 --> 00:35:15.150
to spin and wait for a result and this
 

00:35:15.150 --> 00:35:17.090
to spin and wait for a result and this
test won't be flaky I can just say

00:35:17.090 --> 00:35:17.100
test won't be flaky I can just say
 

00:35:17.100 --> 00:35:19.040
test won't be flaky I can just say
subject that value should equal two

00:35:19.040 --> 00:35:19.050
subject that value should equal two
 

00:35:19.050 --> 00:35:21.590
subject that value should equal two
and if we run it we see that our test

00:35:21.590 --> 00:35:21.600
and if we run it we see that our test
 

00:35:21.600 --> 00:35:24.200
and if we run it we see that our test
passes the test runs instantly in tape

00:35:24.200 --> 00:35:24.210
passes the test runs instantly in tape
 

00:35:24.210 --> 00:35:26.810
passes the test runs instantly in tape
instead of taking an entire second so go

00:35:26.810 --> 00:35:26.820
instead of taking an entire second so go
 

00:35:26.820 --> 00:35:28.730
instead of taking an entire second so go
check out the library be sure to file

00:35:28.730 --> 00:35:28.740
check out the library be sure to file
 

00:35:28.740 --> 00:35:30.620
check out the library be sure to file
any bugs that you find it's currently

00:35:30.620 --> 00:35:30.630
any bugs that you find it's currently
 

00:35:30.630 --> 00:35:32.630
any bugs that you find it's currently
marked experimental carotenes api until

00:35:32.630 --> 00:35:32.640
marked experimental carotenes api until
 

00:35:32.640 --> 00:35:34.610
marked experimental carotenes api until
it's had enough feedback to elevate this

00:35:34.610 --> 00:35:34.620
it's had enough feedback to elevate this
 

00:35:34.620 --> 00:35:36.890
it's had enough feedback to elevate this
table and now I'm gonna hand the mic

00:35:36.890 --> 00:35:36.900
table and now I'm gonna hand the mic
 

00:35:36.900 --> 00:35:41.630
table and now I'm gonna hand the mic
back to you just suspend the talk thanks

00:35:41.630 --> 00:35:41.640
back to you just suspend the talk thanks
 

00:35:41.640 --> 00:35:42.010
back to you just suspend the talk thanks
yeah

00:35:42.010 --> 00:35:42.020
yeah
 

00:35:42.020 --> 00:35:46.070
yeah
okay so I want just need stuff what is

00:35:46.070 --> 00:35:46.080
okay so I want just need stuff what is
 

00:35:46.080 --> 00:35:49.250
okay so I want just need stuff what is
next so today we talked about how you

00:35:49.250 --> 00:35:49.260
next so today we talked about how you
 

00:35:49.260 --> 00:35:51.920
next so today we talked about how you
can already use qualities in Android

00:35:51.920 --> 00:35:51.930
can already use qualities in Android
 

00:35:51.930 --> 00:35:55.040
can already use qualities in Android
eggs and other Android libraries we

00:35:55.040 --> 00:35:55.050
eggs and other Android libraries we
 

00:35:55.050 --> 00:35:57.170
eggs and other Android libraries we
introduced a new live data builder that

00:35:57.170 --> 00:35:57.180
introduced a new live data builder that
 

00:35:57.180 --> 00:35:59.240
introduced a new live data builder that
lets you integrate live data with

00:35:59.240 --> 00:35:59.250
lets you integrate live data with
 

00:35:59.250 --> 00:36:02.480
lets you integrate live data with
qualities and the new life cycle scopes

00:36:02.480 --> 00:36:02.490
qualities and the new life cycle scopes
 

00:36:02.490 --> 00:36:04.850
qualities and the new life cycle scopes
for your view model so Cora this goes

00:36:04.850 --> 00:36:04.860
for your view model so Cora this goes
 

00:36:04.860 --> 00:36:08.650
for your view model so Cora this goes
for your via model and your life cycles

00:36:08.650 --> 00:36:08.660
for your via model and your life cycles
 

00:36:08.660 --> 00:36:11.150
for your via model and your life cycles
now we also introduced this new

00:36:11.150 --> 00:36:11.160
now we also introduced this new
 

00:36:11.160 --> 00:36:13.220
now we also introduced this new
functional to my started which allows

00:36:13.220 --> 00:36:13.230
functional to my started which allows
 

00:36:13.230 --> 00:36:15.890
functional to my started which allows
you to run qualities based on your

00:36:15.890 --> 00:36:15.900
you to run qualities based on your
 

00:36:15.900 --> 00:36:19.070
you to run qualities based on your
lifecycle state and last but not least

00:36:19.070 --> 00:36:19.080
lifecycle state and last but not least
 

00:36:19.080 --> 00:36:21.650
lifecycle state and last but not least
we have introduced a new testing library

00:36:21.650 --> 00:36:21.660
we have introduced a new testing library
 

00:36:21.660 --> 00:36:24.840
we have introduced a new testing library
for Cortese

00:36:24.840 --> 00:36:24.850
 
 

00:36:24.850 --> 00:36:29.110
 
okay so earlier today we announced call

00:36:29.110 --> 00:36:29.120
okay so earlier today we announced call
 

00:36:29.120 --> 00:36:32.350
okay so earlier today we announced call
him first and for Android X and jetpack

00:36:32.350 --> 00:36:32.360
him first and for Android X and jetpack
 

00:36:32.360 --> 00:36:36.130
him first and for Android X and jetpack
is more like Courtis first this is a

00:36:36.130 --> 00:36:36.140
is more like Courtis first this is a
 

00:36:36.140 --> 00:36:38.560
is more like Courtis first this is a
recommendation we believe qualities

00:36:38.560 --> 00:36:38.570
recommendation we believe qualities
 

00:36:38.570 --> 00:36:42.040
recommendation we believe qualities
provides the best functionality and ease

00:36:42.040 --> 00:36:42.050
provides the best functionality and ease
 

00:36:42.050 --> 00:36:46.210
provides the best functionality and ease
of use for concurrency on Android but we

00:36:46.210 --> 00:36:46.220
of use for concurrency on Android but we
 

00:36:46.220 --> 00:36:47.980
of use for concurrency on Android but we
acknowledge that this is work in

00:36:47.980 --> 00:36:47.990
acknowledge that this is work in
 

00:36:47.990 --> 00:36:48.430
acknowledge that this is work in
progress

00:36:48.430 --> 00:36:48.440
progress
 

00:36:48.440 --> 00:36:50.500
progress
most of these libraries we own are

00:36:50.500 --> 00:36:50.510
most of these libraries we own are
 

00:36:50.510 --> 00:36:54.010
most of these libraries we own are
either experimental or alpha one but we

00:36:54.010 --> 00:36:54.020
either experimental or alpha one but we
 

00:36:54.020 --> 00:36:56.320
either experimental or alpha one but we
want to develop this with the community

00:36:56.320 --> 00:36:56.330
want to develop this with the community
 

00:36:56.330 --> 00:36:58.090
want to develop this with the community
the same way we do with architecture

00:36:58.090 --> 00:36:58.100
the same way we do with architecture
 

00:36:58.100 --> 00:37:00.430
the same way we do with architecture
components and other jetpack libraries

00:37:00.430 --> 00:37:00.440
components and other jetpack libraries
 

00:37:00.440 --> 00:37:03.400
components and other jetpack libraries
so you can either join us or wait six

00:37:03.400 --> 00:37:03.410
so you can either join us or wait six
 

00:37:03.410 --> 00:37:05.560
so you can either join us or wait six
months and then that's not using them

00:37:05.560 --> 00:37:05.570
months and then that's not using them
 

00:37:05.570 --> 00:37:09.430
months and then that's not using them
and as part of this you will see more

00:37:09.430 --> 00:37:09.440
and as part of this you will see more
 

00:37:09.440 --> 00:37:11.440
and as part of this you will see more
and more of coupling and qualities

00:37:11.440 --> 00:37:11.450
and more of coupling and qualities
 

00:37:11.450 --> 00:37:15.220
and more of coupling and qualities
coming out of jetpack so all of these

00:37:15.220 --> 00:37:15.230
coming out of jetpack so all of these
 

00:37:15.230 --> 00:37:17.650
coming out of jetpack so all of these
are available in lifecycle to point to

00:37:17.650 --> 00:37:17.660
are available in lifecycle to point to
 

00:37:17.660 --> 00:37:21.040
are available in lifecycle to point to
offer 0 1 starting today so please take

00:37:21.040 --> 00:37:21.050
offer 0 1 starting today so please take
 

00:37:21.050 --> 00:37:22.870
offer 0 1 starting today so please take
a look at it and let us know how you

00:37:22.870 --> 00:37:22.880
a look at it and let us know how you
 

00:37:22.880 --> 00:37:26.260
a look at it and let us know how you
feel about them also we really really

00:37:26.260 --> 00:37:26.270
feel about them also we really really
 

00:37:26.270 --> 00:37:29.140
feel about them also we really really
like Curtis thank you

00:37:29.140 --> 00:37:29.150
like Curtis thank you
 

00:37:29.150 --> 00:37:50.519
like Curtis thank you
[Music]

