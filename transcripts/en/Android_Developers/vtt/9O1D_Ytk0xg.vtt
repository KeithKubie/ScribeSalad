WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.300
[MUSIC PLAYING]

00:00:03.775 --> 00:00:05.970
IAN LAKE: So when the
Android framework goes

00:00:05.970 --> 00:00:09.270
to start your application from
the Launcher icon, or an app

00:00:09.270 --> 00:00:12.720
shortcut, or what you see when
you're doing Multi-Window,

00:00:12.720 --> 00:00:15.480
those are all activities, right?

00:00:15.480 --> 00:00:20.130
So they really are, kind of, the
entry point into your app's UI.

00:00:20.130 --> 00:00:22.650
When the user goes
to launch your app,

00:00:22.650 --> 00:00:24.162
they're launching an activity.

00:00:26.707 --> 00:00:29.040
What you actually want if you
want to build the layering

00:00:29.040 --> 00:00:31.000
you actually need.

00:00:31.000 --> 00:00:34.080
So in this case, we can
have multiple things,

00:00:34.080 --> 00:00:37.320
multiple destinations
within an activity,

00:00:37.320 --> 00:00:42.960
and share information across
each of these destinations

00:00:42.960 --> 00:00:47.580
by using the activity scope as
an actual useful element now.

00:00:47.580 --> 00:00:51.390
So for example, you could have
a shared view element or view

00:00:51.390 --> 00:00:54.940
model that both
destinations talk to.

00:00:54.940 --> 00:00:57.180
So one destination
could put data in.

00:00:57.180 --> 00:01:00.420
And the other one could
observe changes to that data.

00:01:00.420 --> 00:01:03.090
You don't need to work
at the application scope

00:01:03.090 --> 00:01:04.260
level for this to work.

00:01:07.780 --> 00:01:10.360
When we're thinking
about this, like if we're

00:01:10.360 --> 00:01:14.110
moving from this activity world
to a destination and world--

00:01:14.110 --> 00:01:17.350
we really want to make that
world as easy as possible.

00:01:17.350 --> 00:01:20.200
Otherwise, why would we move?

00:01:20.200 --> 00:01:23.930
And we focused on two things.

00:01:23.930 --> 00:01:26.980
One was that global UI thing.

00:01:26.980 --> 00:01:29.980
Like, how can we
make that are easy?

00:01:29.980 --> 00:01:33.910
It's something that every app
has the same kind of patterns

00:01:33.910 --> 00:01:36.220
and we really don't want
that to be something that

00:01:36.220 --> 00:01:39.730
takes a lot of effort to do.

00:01:39.730 --> 00:01:43.480
Also, the navigating
between destinations--

00:01:43.480 --> 00:01:47.200
that start activity,
activity compact thing--

00:01:47.200 --> 00:01:49.400
can we make that even easier?

00:01:49.400 --> 00:01:53.020
So we started the navigation
architecture component.

00:01:53.020 --> 00:01:59.905
And we introduced it to you all
in I/O this last year in 2018.

00:01:59.905 --> 00:02:02.110
If you have arguments
to something,

00:02:02.110 --> 00:02:04.870
how do we make this nice?

00:02:04.870 --> 00:02:08.979
So we built a cradle plugin
called safe-args, which,

00:02:08.979 --> 00:02:11.050
for every destination
in your graph--

00:02:11.050 --> 00:02:13.030
such as this main fragment--

00:02:13.030 --> 00:02:15.820
we generate a directions object.

00:02:15.820 --> 00:02:18.880
Which has a nice, simple
show profile method,

00:02:18.880 --> 00:02:23.610
which gives you a directions
object with type safe arguments

00:02:23.610 --> 00:02:25.740
that you define in
your navigation graph.

00:02:25.740 --> 00:02:27.480
And then you just
call a navigate.

00:02:27.480 --> 00:02:28.660
And that's it.

00:02:28.660 --> 00:02:30.400
We'll take care of
all of the fragment

00:02:30.400 --> 00:02:33.940
transaction-- all of that
sort of stuff for you.

00:02:33.940 --> 00:02:35.530
So this makes it a lot easier.

00:02:38.800 --> 00:02:41.250
So rule number one
of testing things

00:02:41.250 --> 00:02:43.756
at the destination
level is don't

00:02:43.756 --> 00:02:44.880
test the destination level.

00:02:47.490 --> 00:02:50.340
it's really the number
one thing with testing

00:02:50.340 --> 00:02:52.890
is making things
nice and separate.

00:02:52.890 --> 00:02:55.500
And extracting some
of that business logic

00:02:55.500 --> 00:02:57.930
out of a destination
and into something you

00:02:57.930 --> 00:02:59.580
can test in isolation.

00:03:02.730 --> 00:03:05.010
So how can we do this?

00:03:05.010 --> 00:03:10.070
So this Monday, we
released Fragment 1.1--

00:03:10.070 --> 00:03:11.340
the first alpha.

00:03:11.340 --> 00:03:13.590
And with this,
became a new artifact

00:03:13.590 --> 00:03:15.090
called fragment testing--

00:03:15.090 --> 00:03:18.990
just about six years overdue.

00:03:18.990 --> 00:03:23.820
And it's really around being
able to test your Android X

00:03:23.820 --> 00:03:26.670
fragments in isolation.

00:03:26.670 --> 00:03:29.720
Separate from an activity,
separate from everything else,

00:03:29.720 --> 00:03:32.010
but being able to
test and verify that,

00:03:32.010 --> 00:03:33.810
that fragment is
doing the right thing.

00:03:37.070 --> 00:03:40.260
We have a mockable layer.

00:03:40.260 --> 00:03:43.800
One of the things that we found
when building navigation is

00:03:43.800 --> 00:03:45.660
that most companies--

00:03:45.660 --> 00:03:48.030
once they got to a certain
point and they're like, wow,

00:03:48.030 --> 00:03:49.560
we should add some testing.

00:03:49.560 --> 00:03:52.150
And they're like, wow, we can't
really test start activities.

00:03:52.150 --> 00:03:53.700
So they built their
own navigator,

00:03:53.700 --> 00:03:57.750
which just provides a layer
to mock out the start activity

00:03:57.750 --> 00:03:58.250
calls.

00:03:58.250 --> 00:04:01.540
Well, that layer
is handled for you.

00:04:01.540 --> 00:04:02.780
It's called NavController.

00:04:02.780 --> 00:04:04.450
We test NavController.

00:04:04.450 --> 00:04:07.230
So now what we can
do in our activities

00:04:07.230 --> 00:04:10.230
is just mock out
that NavController

00:04:10.230 --> 00:04:13.140
and confirm that
yes, you're calling

00:04:13.140 --> 00:04:14.300
the right navigate calls.

00:04:17.430 --> 00:04:22.110
You can actually do constructor
injection into fragments.

00:04:22.110 --> 00:04:25.830
You no longer need to only
have a no args constructor

00:04:25.830 --> 00:04:27.120
to use fragments.

00:04:27.120 --> 00:04:30.641
You can use a fragment factory
to instantiate your fragments

00:04:30.641 --> 00:04:31.140
for you.

00:04:34.380 --> 00:04:38.190
We do recommend using
multiple activities.

00:04:38.190 --> 00:04:39.660
Not a lot, though.

00:04:39.660 --> 00:04:44.410
So what I'd like to say
is you don't actually

00:04:44.410 --> 00:04:46.420
need multiple activities.

00:04:46.420 --> 00:04:48.610
what you need are
multiple tasks.

00:04:52.470 --> 00:04:55.260
I'd really like to end
this with one note.

00:04:55.260 --> 00:04:57.750
A lot of you have
existing apps that

00:04:57.750 --> 00:05:00.960
have very different
kinds of experiences.

00:05:00.960 --> 00:05:06.360
And I'd like to say, do
what's right for your app.

00:05:06.360 --> 00:05:08.430
I think single
activity is great.

00:05:08.430 --> 00:05:09.950
If I was writing
a new activity, it

00:05:09.950 --> 00:05:12.270
would also be single activity.

00:05:12.270 --> 00:05:16.410
But I realize that
going to your PM

00:05:16.410 --> 00:05:18.510
and being like hey,
let's rip the whole app

00:05:18.510 --> 00:05:24.720
apart is sometimes a hard sell.

00:05:24.720 --> 00:05:26.700
Some of them don't
like your current app

00:05:26.700 --> 00:05:29.220
so maybe you'll actually
get some yeah, OK.

00:05:29.220 --> 00:05:31.050
Go for it.

00:05:31.050 --> 00:05:32.820
Really depends on
your experience.

00:05:32.820 --> 00:05:37.380
If you find yourself
contorting your own experience

00:05:37.380 --> 00:05:41.550
and it's not making sense
to you, don't do it.

00:05:41.550 --> 00:05:43.330
If something is working--

00:05:43.330 --> 00:05:44.550
that's good.

00:05:44.550 --> 00:05:46.060
Keep it working.

00:05:46.060 --> 00:05:48.630
But if you're finding
you're running into issues,

00:05:48.630 --> 00:05:51.240
you're having
inconsistent behavior,

00:05:51.240 --> 00:05:54.510
or you want to do things
like shared view models--

00:05:54.510 --> 00:05:57.270
maybe that's the time
to think about moving

00:05:57.270 --> 00:06:00.710
towards a single
activity structure.

