WEBVTT
Kind: captions
Language: en

00:00:00.322 --> 00:00:02.963
Through this problem, you're asked to verify a set of blinded

00:00:02.963 --> 00:00:06.331
messages, where blinded message B equals the original

00:00:06.331 --> 00:00:10.435
message M times R random nonce raise to the power E

00:00:10.435 --> 00:00:14.132
mod n. And so the question is given the random nonce R,

00:00:14.132 --> 00:00:17.550
how do we get M from B. There are two very similar ways

00:00:17.550 --> 00:00:20.340
to accomplish this and I’ll talk about both of them. And the

00:00:20.340 --> 00:00:23.549
first way, the first step is to calculate the inverse of R mod

00:00:23.549 --> 00:00:26.320
n, I would like to talk for a second about what this means

00:00:26.320 --> 00:00:29.649
and how to calculate it. So in normal arithmetic not

00:00:29.649 --> 00:00:33.002
modular finding the inverse is easy, we can just divide by

00:00:33.002 --> 00:00:36.745
R. As a simple example, we have 3X equals Y, you can

00:00:36.745 --> 00:00:40.718
find X by dividing with 3. But with module arithmetic, this

00:00:40.718 --> 00:00:45.588
doesn’t work. Here are some example. 3X equals Y mod 5

00:00:45.588 --> 00:00:51.300
and so Y equals 2. If we just divide, we get X equals two-

00:00:51.300 --> 00:00:55.587
thirds which doesn’t make sense. X has to be an integer. It

00:00:55.587 --> 00:00:59.298
turns out the answer is actually 4 because 3 times 4 is 12,

00:00:59.298 --> 00:01:03.938
and 12 mod 5 is 2. And so we need to find a sum Z such

00:01:03.938 --> 00:01:09.097
that 3 times Z is congruent to 1 mod 5. It’s fairly easy to

00:01:09.097 --> 00:01:14.252
see that Z equals 2 accomplishes this. 3 times 2 is 6, 6 is 1

00:01:14.252 --> 00:01:17.596
mod 5. So going back up to our original problem, you can

00:01:17.596 --> 00:01:22.365
solve 3X is congruent to Y mod 5 for X, writing it X is

00:01:22.365 --> 00:01:27.670
congruent to 2Y mod 5. So if Y equals 2, X is 2 times 2

00:01:27.670 --> 00:01:31.439
which is 4. And for mod 5, here are all the inverses: 1

00:01:31.439 --> 00:01:34.869
times 1 equals 1, 2 times 3 equals 6 which is congruent to

00:01:34.869 --> 00:01:38.047
1, 3 times 2 equals 6 which is congruent to 1. And 4 times

00:01:38.047 --> 00:01:41.446
4 is equal to 16 which is congruent to 1.

00:01:41.446 --> 00:01:43.648
And so we can calculate inverses using the extended

00:01:43.648 --> 00:01:46.120
Euclidean algorithm which is implemented in the PyCrypto

00:01:46.120 --> 00:01:49.156
library in crypto.util.number.inverse.

00:01:49.156 --> 00:01:51.935
So now that we have the inverse of R mod n, we can

00:01:51.935 --> 00:01:54.496
calculate our blinded message. You should calculate B to

00:01:54.496 --> 00:01:57.981
the power D which equals M times Re to the power D

00:01:57.981 --> 00:02:00.404
since E and D are the public and private keys RSA

00:02:00.404 --> 00:02:04.397
encryption, we get M to the power D and R mod n. If we

00:02:04.397 --> 00:02:09.006
multiply by the inverse of R, we get MD mod n, and if we

00:02:09.006 --> 00:02:11.511
apply the public exponent, we can get M.

00:02:11.511 --> 00:02:14.142
And the second way of solving this problem. First, take a

00:02:14.142 --> 00:02:17.283
random nonce to the power E and we call that R. We’re

00:02:17.283 --> 00:02:19.679
going to calculate the inverse of R, if we take our blinded

00:02:19.679 --> 00:02:22.350
message times inverse of R, we get our message times

00:02:22.350 --> 00:02:27.481
Re times R since Re in capital R inverses they cancel and

00:02:27.481 --> 00:02:29.564
we are left with just our message.

00:02:29.564 --> 00:02:31.867
Comparing the two ways, the second way is quicker. It

00:02:31.867 --> 00:02:34.749
involves one exponentiation and one inverse whereas the

00:02:34.749 --> 00:02:38.236
first way requires two exponentiations and one inverse.

00:02:38.236 --> 00:02:40.929
And here is my solution. In this first step, we calculate

00:02:40.929 --> 00:02:44.737
what I call capital R big nonce. We use the inverse

00:02:44.737 --> 00:02:47.729
function from the PyCrypto library to calculate the inverse

00:02:47.729 --> 00:02:52.414
of our big nonce, modulus D, our N value. We can then

00:02:52.414 --> 00:02:55.398
remove the nonce from our bill by multiplying the bill times

00:02:55.398 --> 00:02:59.830
the nonce inverse. Again, modulus N returning. So N the

00:02:59.830 --> 00:03:02.948
verify function itself, we loop through all the bills and nonces

00:03:02.948 --> 00:03:06.592
remove the nonce, check the value where message

00:03:06.592 --> 00:03:09.663
value does give inversions to change message versus

00:03:09.663 --> 00:03:11.854
an imager into bits. Make sure

00:03:11.854 --> 00:03:14.369
the padding is right. And then convert the bits to a string

00:03:14.369 --> 00:03:17.147
and then check the value of that string. We then see if the

00:03:17.147 --> 00:03:20.839
test value is equal to our target value, if it's not return false

00:03:20.839 --> 00:03:23.523
so you don't need to verify any more. If we've passed

00:03:23.523 --> 00:03:27.000
all of these, return true.

