WEBVTT
Kind: captions
Language: en

00:00:02.754 --> 00:00:04.170
FOUTSE KHOMH: So
I'm Foutse Khomh,

00:00:04.170 --> 00:00:05.586
from [INAUDIBLE]
Montreal and it's

00:00:05.586 --> 00:00:09.070
my honor to introduce to you our
second keynote speaker, Dinah

00:00:09.070 --> 00:00:11.180
McNutt, from Google.

00:00:11.180 --> 00:00:13.810
Dinah have been Release
Engineer for more than 20 years.

00:00:13.810 --> 00:00:16.980
She ship all kind of
unit base software.

00:00:16.980 --> 00:00:20.230
She contribute to a lot of
tech magazine of our Release

00:00:20.230 --> 00:00:22.330
Engineering and she's
currently sharing

00:00:22.330 --> 00:00:24.860
a couple of events on
Release Engineering.

00:00:24.860 --> 00:00:26.327
So she'll be sharing
with us today

00:00:26.327 --> 00:00:28.160
her ten commandments
on Release Engineering.

00:00:28.160 --> 00:00:30.660
So please join me
to welcome Dinah.

00:00:35.860 --> 00:00:38.505
DINAH MCNUTT: My
background is I have

00:00:38.505 --> 00:00:41.900
a Masters in mechanical
engineering from MIT.

00:00:41.900 --> 00:00:43.820
Somewhere along the
way, I discovered

00:00:43.820 --> 00:00:45.650
system administration.

00:00:45.650 --> 00:00:47.910
That was my passion
for years and years,

00:00:47.910 --> 00:00:51.690
and then I discovered
release engineering.

00:00:51.690 --> 00:00:56.780
And so I'm lucky actually
to be on my second career

00:00:56.780 --> 00:01:01.720
and very delighted to be
part of this workshop today.

00:01:01.720 --> 00:01:06.180
So one of the questions is,
what is Release Engineering?

00:01:09.180 --> 00:01:12.450
I defined Release Engineering
as accelerating the path

00:01:12.450 --> 00:01:16.710
from development to operations.

00:01:16.710 --> 00:01:18.670
That's really what
our goal is, and what

00:01:18.670 --> 00:01:23.850
our role is in our organizations
and in the industry.

00:01:23.850 --> 00:01:27.930
I've given this talk twice
before, the first time was

00:01:27.930 --> 00:01:31.350
four years ago at the
Usenix Lisa conference.

00:01:31.350 --> 00:01:33.640
And I targeted it to
system administrators.

00:01:33.640 --> 00:01:38.220
And basically, the
message was, here's

00:01:38.220 --> 00:01:40.050
what you system
administrators need

00:01:40.050 --> 00:01:44.430
to be asking the people
delivering software to you.

00:01:44.430 --> 00:01:47.870
Here are the commandments you
need to ask them to live by.

00:01:47.870 --> 00:01:49.670
And then I gave
it again last year

00:01:49.670 --> 00:01:52.340
to a test automation group.

00:01:52.340 --> 00:01:54.950
And there again the
message was, as testers

00:01:54.950 --> 00:01:58.420
this is what you need to be
asking the people delivering

00:01:58.420 --> 00:02:00.010
software to you.

00:02:00.010 --> 00:02:02.030
So I'm actually excited
to be able to give

00:02:02.030 --> 00:02:04.030
this talk to Release
Engineers, and I'm

00:02:04.030 --> 00:02:05.760
going to be interested
in your feedback

00:02:05.760 --> 00:02:08.680
on-- I think each of
us could get up here,

00:02:08.680 --> 00:02:11.050
and there'll be some
overlap in our commandments,

00:02:11.050 --> 00:02:12.980
but they will be
different commandments.

00:02:12.980 --> 00:02:14.854
We could probably have
a hundred commandments

00:02:14.854 --> 00:02:16.490
that we think we
need to be living by.

00:02:16.490 --> 00:02:18.710
So I'm really going to be
interested in your alls'

00:02:18.710 --> 00:02:21.020
feedback, and there should
be time for discussion

00:02:21.020 --> 00:02:21.960
at the end of my talk.

00:02:25.410 --> 00:02:30.110
So this is my talk, so we get
to talk about my commandments.

00:02:30.110 --> 00:02:33.920
It's based on my years
of 20 plus experience

00:02:33.920 --> 00:02:37.630
in developing
commercial software.

00:02:37.630 --> 00:02:42.540
These concepts are not just
for web apps, or customer

00:02:42.540 --> 00:02:45.390
facing software.

00:02:45.390 --> 00:02:49.560
In a company like Google, I work
mostly with internal customers.

00:02:49.560 --> 00:02:52.220
Almost nothing I
work on is external

00:02:52.220 --> 00:02:54.970
facing because I work in our
infrastructure organization.

00:02:54.970 --> 00:02:57.692
So there's lots of different
types of product delivery,

00:02:57.692 --> 00:02:59.400
and lots of different
types of customers.

00:02:59.400 --> 00:03:02.500
But I think these
commandments are applicable

00:03:02.500 --> 00:03:05.170
regardless of what
your deployment method

00:03:05.170 --> 00:03:06.910
or your customers.

00:03:06.910 --> 00:03:10.120
And of course, the gratuitous,
these are my ideas,

00:03:10.120 --> 00:03:10.760
not Google's.

00:03:14.700 --> 00:03:19.810
So all of us, we're
Release Engineers, right?

00:03:19.810 --> 00:03:23.850
Release processes are very
often an afterthought.

00:03:23.850 --> 00:03:26.574
Organizations do them
because they have to

00:03:26.574 --> 00:03:28.990
or because they've run into
problems and they're like gee,

00:03:28.990 --> 00:03:33.120
if we had some process in
place, we could fix this.

00:03:33.120 --> 00:03:36.640
It's been rare-- I think I've
only gone into one company

00:03:36.640 --> 00:03:39.830
where I was hired on early
as a Release Engineer.

00:03:39.830 --> 00:03:43.024
It was often very much,
much further down the path,

00:03:43.024 --> 00:03:44.440
there was a lot
of rework that had

00:03:44.440 --> 00:03:47.900
to be done to put
processes in place.

00:03:47.900 --> 00:03:51.140
Most systems in companies
do just the minimum

00:03:51.140 --> 00:03:51.810
to get it done.

00:03:51.810 --> 00:03:56.960
You're so focused, so developer
oriented, and code oriented,

00:03:56.960 --> 00:04:00.570
that the processes themselves,
they're after thoughts.

00:04:00.570 --> 00:04:03.310
They're like, what do we have
to do to get this delivered

00:04:03.310 --> 00:04:05.510
instead of stepping
back and saying,

00:04:05.510 --> 00:04:07.321
how can we do this
better and how can we

00:04:07.321 --> 00:04:09.820
use this to actually help our
whole development environment.

00:04:12.740 --> 00:04:14.410
There's often a
disconnect-- and I

00:04:14.410 --> 00:04:16.940
think we actually saw this
in an earlier talk-- where

00:04:16.940 --> 00:04:19.552
the person who writes the
code, the person who tests it,

00:04:19.552 --> 00:04:23.080
and the person who installs
it aren't communicating end

00:04:23.080 --> 00:04:23.767
to end.

00:04:23.767 --> 00:04:25.475
I think there was one
organization, where

00:04:25.475 --> 00:04:26.849
they actually--
sorry, he said it

00:04:26.849 --> 00:04:28.810
was Facebook-- sit in
with the developers,

00:04:28.810 --> 00:04:31.630
and so they have very tightly
coupled communication.

00:04:31.630 --> 00:04:34.050
And then other
organizations, maybe they

00:04:34.050 --> 00:04:36.440
don't talk to each other
and there's go betweens.

00:04:41.770 --> 00:04:42.940
This is a release process.

00:04:42.940 --> 00:04:44.440
It's pretty simple, right?

00:04:44.440 --> 00:04:46.750
You check out your code,
you compile it, you test it,

00:04:46.750 --> 00:04:48.400
and you release it,
we're done, right?

00:04:54.080 --> 00:04:55.690
It looks more like this, right?

00:04:55.690 --> 00:04:57.670
We've got unit tests,
we've got packaging,

00:04:57.670 --> 00:04:59.944
we've got system tests,
we're going to canary,

00:04:59.944 --> 00:05:01.360
we've got more
system tests, we've

00:05:01.360 --> 00:05:03.730
got bug fixes that
feedback into and causes

00:05:03.730 --> 00:05:05.290
to start all over again.

00:05:05.290 --> 00:05:07.620
And we deploy it.

00:05:07.620 --> 00:05:12.040
Well this is what release
boxes really look like.

00:05:12.040 --> 00:05:13.610
They're very complicated.

00:05:13.610 --> 00:05:15.880
You've got build artifacts,
you've got report,

00:05:15.880 --> 00:05:18.160
you've got all your tests.

00:05:18.160 --> 00:05:20.890
And you really
need to understand

00:05:20.890 --> 00:05:22.990
what's happening
in the end, and be

00:05:22.990 --> 00:05:24.790
able to make the
decision like somebody

00:05:24.790 --> 00:05:27.520
was talking about earlier.

00:05:27.520 --> 00:05:29.094
Do we want to release this?

00:05:29.094 --> 00:05:30.010
Is this a good change?

00:05:30.010 --> 00:05:31.720
What information
do I have in order

00:05:31.720 --> 00:05:34.340
to be able to make
that decision?

00:05:34.340 --> 00:05:38.270
And so this is what makes
our job so interesting.

00:05:38.270 --> 00:05:40.860
It's really trying
to solve, this

00:05:40.860 --> 00:05:44.560
is one of the problems
we're trying to solve.

00:05:44.560 --> 00:05:47.030
So here's my first
commandment-- thou shalt

00:05:47.030 --> 00:05:50.480
use a source code
control system.

00:05:50.480 --> 00:05:53.390
We've come a long way with
source code control systems,

00:05:53.390 --> 00:05:59.630
I used SCCS and RCS, and
the whole gamut of Unix

00:05:59.630 --> 00:06:02.200
based source code systems.

00:06:02.200 --> 00:06:05.210
Thank goodness we have
things like Get Now.

00:06:05.210 --> 00:06:07.490
I thought CVS of so
much better right.

00:06:07.490 --> 00:06:10.060
And that SVN, oh my God, this
is so much better than CVS.

00:06:10.060 --> 00:06:11.360
And now we have Get.

00:06:11.360 --> 00:06:15.660
I can't wait to see
what's coming next.

00:06:15.660 --> 00:06:20.760
And so we must use a source
code repository system.

00:06:20.760 --> 00:06:24.280
What do we use it for?

00:06:24.280 --> 00:06:26.040
Everything you need
to release should

00:06:26.040 --> 00:06:28.850
be under some kind of
source code management.

00:06:28.850 --> 00:06:31.700
This includes your source files,
this is the obvious thing.

00:06:31.700 --> 00:06:32.523
This is the first
thing that comes

00:06:32.523 --> 00:06:34.898
to mind when we talk about
source code management, right?

00:06:34.898 --> 00:06:39.370
It is our code, our C
files, our Java files.

00:06:39.370 --> 00:06:44.460
The build files associated
with building a software

00:06:44.460 --> 00:06:49.460
are build tools themselves,
because the build

00:06:49.460 --> 00:06:52.590
tools are going to change as
the environment changes right.

00:06:52.590 --> 00:06:56.350
So you need to be tracking
that documentation even.

00:06:56.350 --> 00:06:58.850
You're going to [INAUDIBLE]
your documentation

00:06:58.850 --> 00:07:03.480
with specific releases, if you
have customer documentation.

00:07:03.480 --> 00:07:06.915
And it doesn't matter which one
you use, just use something.

00:07:11.650 --> 00:07:13.850
Related to this, and
one of the motivations,

00:07:13.850 --> 00:07:17.870
is you want to have a
reproducible build environment.

00:07:17.870 --> 00:07:21.400
One of my very first experiences
with release management,

00:07:21.400 --> 00:07:23.810
release engineering, I was
actually Release Manager

00:07:23.810 --> 00:07:26.730
at Tivoli back in
the early days.

00:07:26.730 --> 00:07:29.315
My job was to work with-- I was
professional services person,

00:07:29.315 --> 00:07:30.690
but we didn't have
any customers.

00:07:30.690 --> 00:07:33.380
So it's like, well, while we're
waiting to have some customers,

00:07:33.380 --> 00:07:35.560
why don't you perform this role?

00:07:35.560 --> 00:07:38.920
And we had a release that
we could not reproduce.

00:07:38.920 --> 00:07:41.900
We didn't have the build tools
in place that we can actually

00:07:41.900 --> 00:07:44.320
go back to our source
code repository

00:07:44.320 --> 00:07:47.050
and rebuild what we had
shipped to our customers.

00:07:47.050 --> 00:07:49.450
So that was a lesson I took
away with me from many years

00:07:49.450 --> 00:07:54.110
ago is you want to be
able to reproduce what you

00:07:54.110 --> 00:07:55.910
were shipping to your customers.

00:07:55.910 --> 00:07:58.460
You want to be able to
go back and patch it,

00:07:58.460 --> 00:08:00.217
you want to be
able to support it,

00:08:00.217 --> 00:08:02.050
you don't want to be a
position where you're

00:08:02.050 --> 00:08:04.070
forced to roll
forward because you

00:08:04.070 --> 00:08:09.250
can't support what they have.

00:08:09.250 --> 00:08:12.820
So the operating
system, if you're

00:08:12.820 --> 00:08:16.960
web-based or doing
managed hosting,

00:08:16.960 --> 00:08:18.960
you've got to-- and even
your build environment.

00:08:18.960 --> 00:08:21.293
You want to be able to reproduce
your build environment,

00:08:21.293 --> 00:08:23.230
and part of that is
the operating system.

00:08:23.230 --> 00:08:27.610
Your compilers,
your build tools,

00:08:27.610 --> 00:08:29.955
the whole environment
needs to be recreated.

00:08:29.955 --> 00:08:31.330
And maybe not all
of these things

00:08:31.330 --> 00:08:33.288
that are in your source
code management system.

00:08:33.288 --> 00:08:34.964
But maybe you have
configuration files

00:08:34.964 --> 00:08:36.880
that are in the source
code management system,

00:08:36.880 --> 00:08:39.710
so that you can actually get a
manifest of everything that's

00:08:39.710 --> 00:08:42.850
needed, and all the
dependencies in order

00:08:42.850 --> 00:08:44.920
to reproduce your
build environment.

00:08:44.920 --> 00:08:46.530
Lots of solutions.

00:08:46.530 --> 00:08:48.670
You can have backups
of your environments,

00:08:48.670 --> 00:08:50.240
you can have
installation servers,

00:08:50.240 --> 00:08:52.910
you can have virtual machines.

00:08:52.910 --> 00:08:56.240
And so these are all solutions
that may not necessarily

00:08:56.240 --> 00:09:00.470
be checked in to your
source code repository.

00:09:00.470 --> 00:09:03.810
But you need to be
thinking of that.

00:09:03.810 --> 00:09:07.550
Tie into this
configuration management.

00:09:07.550 --> 00:09:10.050
I think it's going to be
interesting to see what happens

00:09:10.050 --> 00:09:12.440
with configuration management
and Release Engineering,

00:09:12.440 --> 00:09:14.670
over the next few years.

00:09:14.670 --> 00:09:16.740
Configuration management
as a discipline

00:09:16.740 --> 00:09:19.390
has been around much longer.

00:09:19.390 --> 00:09:22.730
But I think these two
disciplines are actually

00:09:22.730 --> 00:09:24.700
going to emerge and
evolve together,

00:09:24.700 --> 00:09:27.780
because I don't see how
you could separate them.

00:09:27.780 --> 00:09:30.730
And so related to
configuration management,

00:09:30.730 --> 00:09:34.330
binary dependencies, your
configuration files, manifest,

00:09:34.330 --> 00:09:38.720
change lists, machines
configurations.

00:09:38.720 --> 00:09:41.120
Everywhere from your
dev environment,

00:09:41.120 --> 00:09:44.580
to your testing environment,
to your deployment empowerment,

00:09:44.580 --> 00:09:48.117
you need to be able to
understand what they are,

00:09:48.117 --> 00:09:49.700
so that you can
troubleshoot problems.

00:09:52.270 --> 00:09:54.440
OK, what about binaries?

00:09:54.440 --> 00:09:56.940
My personal opinion
is that binaries

00:09:56.940 --> 00:09:58.640
don't belong in an SCM.

00:09:58.640 --> 00:10:03.110
However, that's not
a hard and fast rule.

00:10:03.110 --> 00:10:04.860
We certainly at
Google, we have lots

00:10:04.860 --> 00:10:09.980
of binaries in our
source code repositories.

00:10:09.980 --> 00:10:13.540
But I think it's important
to be able to recreate

00:10:13.540 --> 00:10:16.390
those binaries, and I'd like
to focus on everything that's

00:10:16.390 --> 00:10:18.875
needed to actually
create those binaries.

00:10:18.875 --> 00:10:20.860
And if you can do that
and its reproducible,

00:10:20.860 --> 00:10:24.020
then why do you need
to store the binaries

00:10:24.020 --> 00:10:28.141
if you have to put them
in a separate repository?

00:10:28.141 --> 00:10:30.590
A source code
repository is really--

00:10:30.590 --> 00:10:33.224
most of them are text
based, they assume texts.

00:10:33.224 --> 00:10:35.640
And so something like diffing
on a binary file [INAUDIBLE]

00:10:35.640 --> 00:10:37.295
isn't necessarily as meaningful.

00:10:40.150 --> 00:10:41.174
John's agreeing with me.

00:10:43.960 --> 00:10:47.040
OK, so the moral of this
is reproducibility ability

00:10:47.040 --> 00:10:47.910
is a virtue.

00:10:47.910 --> 00:10:50.779
You want to be able to
reproduce what you have.

00:10:50.779 --> 00:10:52.320
That doesn't mean
you can necessarily

00:10:52.320 --> 00:10:55.767
support what you have
out in a field maybe.

00:10:55.767 --> 00:10:57.516
Maybe there's a bug,
and the only solution

00:10:57.516 --> 00:10:58.730
is to roll forward.

00:10:58.730 --> 00:11:01.590
But at least you understand
that and you understand

00:11:01.590 --> 00:11:04.480
why the reason is,
apposed to, oh gee,

00:11:04.480 --> 00:11:06.609
we can't recreate
that let's push out

00:11:06.609 --> 00:11:07.650
a new version real quick.

00:11:10.170 --> 00:11:12.720
The second commandment
is-- thou shalt

00:11:12.720 --> 00:11:16.930
use the right tools for the job.

00:11:16.930 --> 00:11:19.510
Just because you know a
programming language, doesn't

00:11:19.510 --> 00:11:21.832
mean it's the right
tool for the job.

00:11:21.832 --> 00:11:26.470
As software engineers, we
should be using the right tool

00:11:26.470 --> 00:11:28.450
in choosing the right tool.

00:11:28.450 --> 00:11:31.710
In Google, Go is
the new hotness.

00:11:31.710 --> 00:11:33.737
And it's fun to
use Go, and there's

00:11:33.737 --> 00:11:35.570
a lot of powerful things
you can do with Go.

00:11:35.570 --> 00:11:37.319
That doesn't mean it's
the right solution.

00:11:41.000 --> 00:11:43.250
Complex projects, you're
going to have multiple tools.

00:11:43.250 --> 00:11:45.020
You're not going to
have just one tool.

00:11:45.020 --> 00:11:49.870
The days of just having Make,
thank goodness, are over.

00:11:49.870 --> 00:11:51.830
And we've got lots
of different tools.

00:11:51.830 --> 00:11:54.430
And this is just a
very small subset

00:11:54.430 --> 00:12:00.500
and obviously, there's lots of
commercial products available,

00:12:00.500 --> 00:12:02.460
and open source
products available.

00:12:02.460 --> 00:12:06.921
But I think it's a given, you're
going to have a mix of tools.

00:12:06.921 --> 00:12:08.920
And when I'm talking about
tools here obviously,

00:12:08.920 --> 00:12:10.503
I'm talking about
the low level stuff.

00:12:10.503 --> 00:12:15.690
I'm talking about, your
compilers, your interpreters,

00:12:15.690 --> 00:12:19.040
everything that
basically takes the bits

00:12:19.040 --> 00:12:21.392
and turns them
into something that

00:12:21.392 --> 00:12:22.600
can be run as an application.

00:12:25.810 --> 00:12:27.300
I figure, one of
these days, I'll

00:12:27.300 --> 00:12:30.130
be able to respond to ads,
looking for a Make person.

00:12:30.130 --> 00:12:32.296
Because people will have
these Make files and nobody

00:12:32.296 --> 00:12:34.870
at the organization
knows how to use Make.

00:12:34.870 --> 00:12:36.680
Like COBOL programmers
in the '90s,

00:12:36.680 --> 00:12:38.429
people were looking
for COBOL programmers.

00:12:41.720 --> 00:12:43.060
Yes exactly.

00:12:43.060 --> 00:12:44.890
Y2K was coming
around so I'm going

00:12:44.890 --> 00:12:47.610
to make my fortune writing
Make files someday.

00:12:47.610 --> 00:12:48.110
I hope not.

00:12:51.040 --> 00:12:55.370
So the moral here is
unnecessary complexity is a sin.

00:12:55.370 --> 00:12:57.870
So just because you know how
to use five different languages

00:12:57.870 --> 00:13:00.020
doesn't mean you have
to use them all at once.

00:13:00.020 --> 00:13:06.830
But there again, what we're
doing is complex by nature,

00:13:06.830 --> 00:13:07.810
by definition.

00:13:07.810 --> 00:13:13.570
So don't make it more
complex, than it really is.

00:13:13.570 --> 00:13:16.940
OK the third commandment.

00:13:16.940 --> 00:13:18.680
This is one of my favorites.

00:13:18.680 --> 00:13:21.375
Thou shalt write portable and
low maintenance build files.

00:13:27.950 --> 00:13:32.700
Someone talked about homogeneity
earlier and said by definition

00:13:32.700 --> 00:13:35.330
that they were running
heterogeneously

00:13:35.330 --> 00:13:38.210
on their front end machines.

00:13:38.210 --> 00:13:43.100
So if you plan to support
multiple architectures in OS's

00:13:43.100 --> 00:13:47.740
up front, even if
you never do, you're

00:13:47.740 --> 00:13:50.560
job's going to be so much
easier, when you probably

00:13:50.560 --> 00:13:53.740
will down the road.

00:13:53.740 --> 00:13:56.470
So if you design this up
front and think about it,

00:13:56.470 --> 00:14:00.304
how do you do this when you
have output for your compilers?

00:14:00.304 --> 00:14:01.970
How do you want to
structure your trees,

00:14:01.970 --> 00:14:03.510
how do you want
to name them, how

00:14:03.510 --> 00:14:04.926
do you want to
name your packages?

00:14:04.926 --> 00:14:07.300
I'm going to talk about
packaging in a little bit.

00:14:07.300 --> 00:14:09.200
So this is something
that you really,

00:14:09.200 --> 00:14:11.130
if you think about
this up front,

00:14:11.130 --> 00:14:12.970
it will save you so--
how many people front

00:14:12.970 --> 00:14:18.172
end to this, where you get down
the road and your like, oh gee,

00:14:18.172 --> 00:14:19.880
we're dealing with
some of this in Google

00:14:19.880 --> 00:14:21.840
right now to in some areas.

00:14:21.840 --> 00:14:25.050
I think some people are lying,
I think I saw three hands.

00:14:27.990 --> 00:14:33.000
Centralized configuration
files can really

00:14:33.000 --> 00:14:34.500
save you a lot of time.

00:14:34.500 --> 00:14:41.260
Centralized compiler
flags, configuration flags,

00:14:41.260 --> 00:14:45.350
because I work at a start up
company where it's like, oh

00:14:45.350 --> 00:14:48.150
gee, we want to change that
flag because we're supporting

00:14:48.150 --> 00:14:50.420
multiple architectures
and I'm like,

00:14:50.420 --> 00:14:53.110
no I really don't want to
edit all these build files.

00:14:53.110 --> 00:14:56.230
And so it's time to have a
centralized build file and make

00:14:56.230 --> 00:15:02.830
it configurable so that, you
don't have to go do that again.

00:15:02.830 --> 00:15:07.900
One of the reasons you
want to do this is I

00:15:07.900 --> 00:15:11.980
view part of my job as making
the developer's job easy.

00:15:11.980 --> 00:15:15.990
Most developers really
don't care about build

00:15:15.990 --> 00:15:20.030
files or packaging or
anything like that.

00:15:20.030 --> 00:15:23.220
They really care about their
code and their cool code

00:15:23.220 --> 00:15:24.635
and finishing it.

00:15:24.635 --> 00:15:27.189
And so there's a lot we can
do through best practice--

00:15:27.189 --> 00:15:29.230
and I'm going talk about
this a little bit more--

00:15:29.230 --> 00:15:31.870
but through best
practices, to setting up

00:15:31.870 --> 00:15:35.594
templates, and telling them.

00:15:35.594 --> 00:15:37.510
You could do it in the,
guys, I'm helping you.

00:15:37.510 --> 00:15:38.710
Or you're really
helping yourself,

00:15:38.710 --> 00:15:41.084
because it means they're going
to be doing things the way

00:15:41.084 --> 00:15:43.730
you want them to do instead
of having to retrofit or have

00:15:43.730 --> 00:15:46.260
to go back later, and try to
convince them that maybe we

00:15:46.260 --> 00:15:48.730
want to build with some
different build options,

00:15:48.730 --> 00:15:51.070
because it's going to work
better in the production

00:15:51.070 --> 00:15:52.280
environment.

00:15:52.280 --> 00:15:55.910
And so this is where
I see us having

00:15:55.910 --> 00:15:57.545
a huge role in
our organizations.

00:16:00.700 --> 00:16:04.240
Related to this is build IDs.

00:16:04.240 --> 00:16:06.610
And by the way we
structure or build files

00:16:06.610 --> 00:16:09.920
and our build system,
we can have build IDs,

00:16:09.920 --> 00:16:12.840
so that our builds can
be uniquely identified

00:16:12.840 --> 00:16:13.630
and reproduced.

00:16:13.630 --> 00:16:15.505
And this goes back to
the earlier commandment

00:16:15.505 --> 00:16:18.950
of being able to reproduce
what it is we have done.

00:16:18.950 --> 00:16:20.470
Here's some examples.

00:16:20.470 --> 00:16:25.070
The big thing is you want
to be able to identify what

00:16:25.070 --> 00:16:28.010
it is you have,
whether it's a binary,

00:16:28.010 --> 00:16:30.430
whether it's a Debian package.

00:16:30.430 --> 00:16:34.840
What is this, and
where did it come from?

00:16:34.840 --> 00:16:36.880
Because if you can't
answer that question,

00:16:36.880 --> 00:16:38.740
you're going to
have problems being

00:16:38.740 --> 00:16:42.830
able to provide support
to your customers.

00:16:42.830 --> 00:16:45.670
You can also embed
them in binaries.

00:16:45.670 --> 00:16:48.830
Every knows if you type
command dash version,

00:16:48.830 --> 00:16:51.160
and you can find out
what version it is.

00:16:51.160 --> 00:16:53.810
And that information
needs to make it clear

00:16:53.810 --> 00:16:56.610
based on your build system
and the tools you're using,

00:16:56.610 --> 00:16:59.730
what that is, and
uniquely identify it.

00:17:03.180 --> 00:17:06.089
So I have two morals
for this commandment.

00:17:06.089 --> 00:17:08.099
Measure twice, cut once.

00:17:08.099 --> 00:17:09.440
In other words, plan upfront.

00:17:09.440 --> 00:17:13.550
Spend time working on templates
and consistent build files.

00:17:13.550 --> 00:17:16.859
And then that way,
you don't have

00:17:16.859 --> 00:17:18.599
to go back and rework later.

00:17:18.599 --> 00:17:21.910
And knowing your
ancestry as a virgin,

00:17:21.910 --> 00:17:24.010
if you're a binary
where did you come from.

00:17:27.950 --> 00:17:31.340
Fourth commandment--
this conference

00:17:31.340 --> 00:17:34.050
has really talked
about this a lot.

00:17:34.050 --> 00:17:35.705
Thou shalt use a
release process that

00:17:35.705 --> 00:17:42.300
is reproducible,
unattended, and automated.

00:17:42.300 --> 00:17:44.720
And this is where CI comes in.

00:17:47.260 --> 00:17:49.210
You should have a
continuous build process.

00:17:51.770 --> 00:17:53.380
Maybe you have a
long release cycle

00:17:53.380 --> 00:17:55.800
because you're shipping a
network appliance maybe.

00:17:59.030 --> 00:18:05.090
There have been studies on
the sooner you detect a bug,

00:18:05.090 --> 00:18:07.340
the cheaper it is
to fix that bug.

00:18:07.340 --> 00:18:10.760
And so if you have a
CI process in place,

00:18:10.760 --> 00:18:13.880
you can identify bugs
much, much sooner,

00:18:13.880 --> 00:18:17.980
and fix them before they get too
far down your release pipeline.

00:18:17.980 --> 00:18:20.900
So I think this is
important regardless

00:18:20.900 --> 00:18:23.840
of what your
deployment process is.

00:18:23.840 --> 00:18:26.940
And I actually don't talk a
lot about continuous deployment

00:18:26.940 --> 00:18:31.120
in this talk, because I think
these four commandments apply

00:18:31.120 --> 00:18:35.130
regardless of your
deployment process.

00:18:38.050 --> 00:18:41.460
There's lots of tools
available, thank goodness.

00:18:41.460 --> 00:18:46.040
This wasn't true 10 years ago.

00:18:46.040 --> 00:18:50.600
Well I guess it was, I was using
cruise control 10 years ago.

00:18:50.600 --> 00:18:52.150
You could write your own.

00:18:52.150 --> 00:18:55.480
Or better yet, write plug-ins
for the existing ones

00:18:55.480 --> 00:18:59.140
and open source them.

00:18:59.140 --> 00:19:01.430
This is one of my
favorite topics

00:19:01.430 --> 00:19:04.296
is Release Engineering
as a service.

00:19:04.296 --> 00:19:07.110
And I'm actually going to
be doing a project on this

00:19:07.110 --> 00:19:10.750
within Google this
year, this quarter.

00:19:10.750 --> 00:19:14.480
Developers should be able to
operate in self service mode.

00:19:14.480 --> 00:19:17.660
They should be able
to do their own bills,

00:19:17.660 --> 00:19:22.890
and decide when
they're ready to deploy

00:19:22.890 --> 00:19:26.610
what it is they have done.

00:19:26.610 --> 00:19:30.200
We should work with them on
implementing and configuring

00:19:30.200 --> 00:19:36.700
tools and policies
to help them do that.

00:19:36.700 --> 00:19:39.140
We need to be defining what
the best practices are.

00:19:39.140 --> 00:19:41.950
We need to have tools that
help us implement those best

00:19:41.950 --> 00:19:43.820
practices.

00:19:43.820 --> 00:19:47.550
It's important to
have workflows that

00:19:47.550 --> 00:19:51.310
are reproducible
and predictable.

00:19:51.310 --> 00:19:53.830
So that if one developer
does a release,

00:19:53.830 --> 00:19:57.460
you get the same results as if
another developer does them.

00:19:57.460 --> 00:19:59.760
So there shouldn't
be any guesswork.

00:19:59.760 --> 00:20:02.930
You take the burden off of
them, they click a button,

00:20:02.930 --> 00:20:04.740
and it just happens.

00:20:04.740 --> 00:20:06.620
There again, you're
offloading the things

00:20:06.620 --> 00:20:09.900
they don't like to do,
but empowering them,

00:20:09.900 --> 00:20:12.100
which they very
much do you like.

00:20:12.100 --> 00:20:14.230
They like being in
control of their code.

00:20:14.230 --> 00:20:16.800
They know their code
better than we do.

00:20:16.800 --> 00:20:19.699
But there again, all through
the release pipeline,

00:20:19.699 --> 00:20:21.240
you've got to have
the tools in place

00:20:21.240 --> 00:20:24.550
to help people make
the right decisions.

00:20:24.550 --> 00:20:27.460
And one of the prelunch time
talks was talking about that.

00:20:27.460 --> 00:20:30.910
How do you make these decisions
and how do you have the data?

00:20:30.910 --> 00:20:34.430
And if it's a very,
very hard problem.

00:20:34.430 --> 00:20:37.800
And I think this is where
Release Engineers can offer

00:20:37.800 --> 00:20:40.890
significant value to
the organizations.

00:20:40.890 --> 00:20:43.740
I know with-- I work in our
technical infrastructure--

00:20:43.740 --> 00:20:48.420
and we save developers literally
hundreds of hours a year

00:20:48.420 --> 00:20:50.760
because we can just tell
them, oh, here here's

00:20:50.760 --> 00:20:51.646
what you need to do.

00:20:51.646 --> 00:20:53.020
And they're like,
oh thank you, I

00:20:53.020 --> 00:20:54.660
don't have to worry
about that now.

00:20:54.660 --> 00:20:56.201
And they're very
appreciative, and it

00:20:56.201 --> 00:20:59.460
makes the organization as a
whole much more productive.

00:20:59.460 --> 00:21:01.770
All right, my second
favorite-- well actually I

00:21:01.770 --> 00:21:03.710
guess it's tied for my
favorite commandment.

00:21:03.710 --> 00:21:07.460
Thou shalt use a
package manager.

00:21:07.460 --> 00:21:09.380
I love package managers,
I don't know why.

00:21:12.170 --> 00:21:14.430
I've worked with a lot of
different package managers

00:21:14.430 --> 00:21:17.684
over the years and dealt
with packaging problems.

00:21:17.684 --> 00:21:19.100
And there are many
reasons why you

00:21:19.100 --> 00:21:20.660
want to use a package manager.

00:21:20.660 --> 00:21:23.180
You get auditing.

00:21:23.180 --> 00:21:25.440
You can find out exactly
what is it a package.

00:21:25.440 --> 00:21:28.160
When you install a
package on a machine,

00:21:28.160 --> 00:21:29.660
depending want
package you're using,

00:21:29.660 --> 00:21:33.377
you get different auditing
capabilities on this binary.

00:21:33.377 --> 00:21:34.710
Where did this binary come from?

00:21:34.710 --> 00:21:36.510
What package is it
associated with?

00:21:39.190 --> 00:21:41.500
Many package managers
have hooks in place

00:21:41.500 --> 00:21:45.690
for doing upgrades,
installations, removals,

00:21:45.690 --> 00:21:49.780
and you can leverage that
instead of writing your own.

00:21:49.780 --> 00:21:52.130
You can find out who
built the package,

00:21:52.130 --> 00:21:55.320
when was it built, what
code base did it come from?

00:21:59.030 --> 00:22:00.760
You get built in
version tracking,

00:22:00.760 --> 00:22:02.040
independency checking.

00:22:02.040 --> 00:22:03.910
What are some of
the other packages

00:22:03.910 --> 00:22:07.220
this package depends on
before you install it.

00:22:07.220 --> 00:22:09.610
What versions of those
packages were supported or not

00:22:09.610 --> 00:22:11.000
supported.

00:22:11.000 --> 00:22:11.540
Manifest.

00:22:11.540 --> 00:22:14.170
What's in the package?

00:22:14.170 --> 00:22:17.860
And I'm a firm believer
in using native package

00:22:17.860 --> 00:22:20.029
managers where possible.

00:22:20.029 --> 00:22:22.320
Course this is Google, we
have our own package manager.

00:22:25.760 --> 00:22:28.310
Because of our infrastructure
and it's so complicated and so

00:22:28.310 --> 00:22:31.190
Google centric, we tend to
write a lot of our own tools.

00:22:31.190 --> 00:22:34.800
But we use Debian
packages, and we also

00:22:34.800 --> 00:22:38.706
use our proprietary
Midas package manager.

00:22:38.706 --> 00:22:40.080
And if you're
interested in that,

00:22:40.080 --> 00:22:44.640
I did a talk on that
at UCMS last June.

00:22:44.640 --> 00:22:48.990
But based on whatever operating
system [INAUDIBLE] RPM,

00:22:48.990 --> 00:22:51.300
Debian package, Solaris
package manager.

00:22:53.960 --> 00:22:56.725
It's OK to support all of those
different package managers.

00:23:00.200 --> 00:23:02.656
So tar is not a package manager.

00:23:07.830 --> 00:23:10.720
Really, and you can
replace that with jar.

00:23:15.230 --> 00:23:17.440
I'm sorry, it's not
a package manager.

00:23:17.440 --> 00:23:19.646
And I don't think it's OK
to tar up a bunch of files

00:23:19.646 --> 00:23:21.020
and put them in
a package either,

00:23:21.020 --> 00:23:23.317
because now you lose the
manifest capabilities

00:23:23.317 --> 00:23:25.650
and the ability to query the
package, it's going to say,

00:23:25.650 --> 00:23:28.215
I have this tar file
and you're like, OK

00:23:28.215 --> 00:23:29.605
but what's in the tar file?

00:23:34.910 --> 00:23:44.080
OK this is another commandment
that I learned the hard way.

00:23:44.080 --> 00:23:46.590
You need to think about
your upgrade process

00:23:46.590 --> 00:23:48.450
before-- I love it when
people nod, they're

00:23:48.450 --> 00:23:53.050
like yeah I did that-- before
you release your first version,

00:23:53.050 --> 00:23:54.730
think about your
upgrade process.

00:23:54.730 --> 00:23:57.490
How are you going to upgrade?

00:23:57.490 --> 00:23:59.370
Can you upgrade in [INAUDIBLE]?

00:23:59.370 --> 00:24:01.620
If you have a
running binary, how

00:24:01.620 --> 00:24:04.540
are you going to bring up a new
job and shut down the old job?

00:24:04.540 --> 00:24:06.040
You had configuration
files that may

00:24:06.040 --> 00:24:08.110
be customized by the
customer, that you

00:24:08.110 --> 00:24:10.940
need to save off and replace.

00:24:10.940 --> 00:24:12.316
Are there database
schema issues?

00:24:12.316 --> 00:24:14.231
You're going to have to
have an upgrade there.

00:24:14.231 --> 00:24:16.060
You've got to think
about that before you

00:24:16.060 --> 00:24:18.000
do your first release.

00:24:18.000 --> 00:24:21.360
Otherwise, you can paint
yourself into a corner

00:24:21.360 --> 00:24:24.160
and have problems
doing your upgrade.

00:24:24.160 --> 00:24:26.910
And this also will help
drive some of your packaging

00:24:26.910 --> 00:24:31.940
decisions on how and what you
package in to your package.

00:24:31.940 --> 00:24:35.867
So you have to think about, do
I have any pre-install commands

00:24:35.867 --> 00:24:36.450
I need to run?

00:24:36.450 --> 00:24:40.180
Do I have any post install
commands I need to run?

00:24:40.180 --> 00:24:42.610
And a lot of package managers
have really good support

00:24:42.610 --> 00:24:46.180
for doing this, but only if
you think about it and plan.

00:24:50.390 --> 00:24:56.230
And related to that, think
down the road beyond just 1.0,

00:24:56.230 --> 00:24:56.730
right?

00:24:56.730 --> 00:24:59.730
You need to think about,
OK, can I roll back?

00:24:59.730 --> 00:25:04.610
What happens if we,
particularly if you're

00:25:04.610 --> 00:25:06.070
running in a hosted environment?

00:25:06.070 --> 00:25:08.890
And I think somebody
talked about earlier

00:25:08.890 --> 00:25:12.950
that they had a problem where
they couldn't roll back.

00:25:12.950 --> 00:25:16.080
You want to be
able to roll back.

00:25:16.080 --> 00:25:18.247
And may be rolling back
means you roll forward.

00:25:18.247 --> 00:25:20.330
But basically, you're like,
OK, we have a problem,

00:25:20.330 --> 00:25:24.200
we have to fix, how
am I going to do that?

00:25:24.200 --> 00:25:30.100
If you're doing things like the
Debians and RPMs and so forth,

00:25:30.100 --> 00:25:32.850
and those people are installing
the packages themselves,

00:25:32.850 --> 00:25:34.030
they should be relocatable.

00:25:34.030 --> 00:25:36.990
I should, as a
system administrator,

00:25:36.990 --> 00:25:39.710
I should be able to decide
where I want the package to go.

00:25:39.710 --> 00:25:45.120
Is anybody here shipping
software directly to customers?

00:25:45.120 --> 00:25:47.930
There's a few hands.

00:25:47.930 --> 00:25:48.890
Beyond the mobile.

00:25:48.890 --> 00:25:52.560
I think obviously, mobile's
going directly to customers.

00:25:52.560 --> 00:25:55.600
So these are the kinds of things
system administrators want

00:25:55.600 --> 00:25:56.380
to be able to do.

00:26:00.190 --> 00:26:04.210
So the moral here is not
thinking ahead is a sin.

00:26:04.210 --> 00:26:06.750
Plan.

00:26:06.750 --> 00:26:09.170
And this is where us as
Release Engineers can

00:26:09.170 --> 00:26:13.370
work with our site reliability
engineers, and our field

00:26:13.370 --> 00:26:17.050
service people, and so forth
on really thinking about this

00:26:17.050 --> 00:26:20.279
and finding out, how our
customers using and installing

00:26:20.279 --> 00:26:20.820
our software.

00:26:26.060 --> 00:26:28.970
Some of these you can see it's
the admin in me coming out.

00:26:28.970 --> 00:26:33.800
Thou shalt provide a detailed
log of what thou hath done.

00:26:33.800 --> 00:26:42.720
Logging information is so
important to understanding

00:26:42.720 --> 00:26:45.420
what is going on.

00:26:45.420 --> 00:26:48.200
So when you do an installation,
when you do a dinstall,

00:26:48.200 --> 00:26:50.682
there needs to be some
kind of logging mechanism.

00:26:50.682 --> 00:26:52.140
That could be in
a log file, it can

00:26:52.140 --> 00:26:56.230
be events that get sent out and
picked up by an event manager.

00:27:01.190 --> 00:27:06.680
In related to
packaging, I want to be

00:27:06.680 --> 00:27:09.240
able to unpack and
inspect the packages too.

00:27:09.240 --> 00:27:14.670
I want to be able to install
without doing anything.

00:27:14.670 --> 00:27:17.640
And the logs are so critical
for troubleshooting problems

00:27:17.640 --> 00:27:19.666
because if you don't
know what's happened

00:27:19.666 --> 00:27:21.290
in the sequence of
events, particularly

00:27:21.290 --> 00:27:26.130
if have a very complicated
web based application

00:27:26.130 --> 00:27:29.190
with lots of layers,
you need to be

00:27:29.190 --> 00:27:31.421
able to understand the
sequence of events that

00:27:31.421 --> 00:27:33.170
caused a particular
problem that happened.

00:27:33.170 --> 00:27:35.640
Maybe you rolled out a
new application version

00:27:35.640 --> 00:27:38.254
of your application
and something happened,

00:27:38.254 --> 00:27:40.670
but it was something in the
infrastructure underneath that

00:27:40.670 --> 00:27:43.670
changed at the same time
that caused the problem.

00:27:43.670 --> 00:27:45.260
Unless you have
a picture of that

00:27:45.260 --> 00:27:47.691
and there's logging
capabilities of some kind,

00:27:47.691 --> 00:27:49.440
it's very, very difficult
to troubleshoot.

00:27:52.979 --> 00:27:53.520
So canarying.

00:27:59.340 --> 00:28:02.450
You need to have
canaries of some kind.

00:28:02.450 --> 00:28:05.740
I think canarying-- I
ran across it most often

00:28:05.740 --> 00:28:12.280
with cloud based applications,
web based application.

00:28:12.280 --> 00:28:16.450
So everybody probably knows
this, but I put it up anyway.

00:28:16.450 --> 00:28:19.530
The term came from
using domestic canaries

00:28:19.530 --> 00:28:21.480
in coal mines,
because the canaries

00:28:21.480 --> 00:28:24.170
would detect the carbon
monoxide build up

00:28:24.170 --> 00:28:26.240
before the coal miners would.

00:28:26.240 --> 00:28:30.990
And so they sacrificed the poor
canaries to save human lives.

00:28:30.990 --> 00:28:35.690
So this canarying
refers to rolling out

00:28:35.690 --> 00:28:37.650
to a small number of users.

00:28:37.650 --> 00:28:39.890
And I think Chuck talked
about that in his talk,

00:28:39.890 --> 00:28:43.640
about rolling out
to 2% of users.

00:28:43.640 --> 00:28:49.440
Because this has been true of
all my years of working with

00:28:49.440 --> 00:28:52.800
commercial software, customers
find problems we cannot find

00:28:52.800 --> 00:28:56.810
in house, even if
your dog fooding.

00:28:56.810 --> 00:28:59.530
And I think everybody dog foods.

00:28:59.530 --> 00:29:01.940
Certainly in Google, where
I look at my phone and most

00:29:01.940 --> 00:29:04.310
of my apps have bones
on them because they're

00:29:04.310 --> 00:29:07.950
dog food version of that,
so my Android phone.

00:29:07.950 --> 00:29:12.040
But customers are always going
to find corner cases and just

00:29:12.040 --> 00:29:14.890
environments, just problems
we cannot reproduce.

00:29:14.890 --> 00:29:17.870
So it's important to
do canary roll outs

00:29:17.870 --> 00:29:21.060
to very, very small
number of users.

00:29:21.060 --> 00:29:24.810
Also if you have all
the monitoring in place,

00:29:24.810 --> 00:29:29.870
you can start detecting abnormal
changes in the patterns.

00:29:29.870 --> 00:29:34.340
I used to work on our search
for an [INAUDIBLE] push.

00:29:34.340 --> 00:29:37.960
And we did one job
at each data center.

00:29:37.960 --> 00:29:40.710
We would roll out
across the whole world.

00:29:40.710 --> 00:29:42.230
And we would start watching.

00:29:42.230 --> 00:29:44.015
And then we would
bump the number up.

00:29:44.015 --> 00:29:45.880
And we would start
watching the numbers

00:29:45.880 --> 00:29:47.920
to see if there were problems.

00:29:47.920 --> 00:29:53.450
And very often, we would detect
trends and problems early on,

00:29:53.450 --> 00:29:55.230
could easily roll back.

00:29:55.230 --> 00:29:57.770
Very small number of users
were affected or noticed

00:29:57.770 --> 00:29:58.880
the problems.

00:29:58.880 --> 00:30:01.600
But we could not do that
if we didn't canary,

00:30:01.600 --> 00:30:06.044
because the risk
is just too high.

00:30:06.044 --> 00:30:08.210
We don't want to push a new
version of Google search

00:30:08.210 --> 00:30:09.412
everywhere at once.

00:30:09.412 --> 00:30:10.370
That's just a bad idea.

00:30:10.370 --> 00:30:12.800
Even thought we could, but
we're not going to do that.

00:30:19.100 --> 00:30:21.630
This goes back to what I was
talking about at the beginning.

00:30:21.630 --> 00:30:26.510
Our job is to accelerate
the path from Dev to DevOps.

00:30:26.510 --> 00:30:29.070
We need to keep the
big picture in mind.

00:30:29.070 --> 00:30:33.380
I think that is part
of our job and a value

00:30:33.380 --> 00:30:35.800
add to our companies
is we really

00:30:35.800 --> 00:30:38.510
need to be thinking about
stepping back constantly.

00:30:38.510 --> 00:30:40.674
We have the fun job
where we get to go down

00:30:40.674 --> 00:30:41.590
to the nuts and bolts.

00:30:41.590 --> 00:30:45.850
We get to work with build
files, we get to write code,

00:30:45.850 --> 00:30:48.700
but we also need to step back
and look at the big picture

00:30:48.700 --> 00:30:51.690
and think about, OK, what
are our processes, what

00:30:51.690 --> 00:30:53.600
are our best practices?

00:30:53.600 --> 00:30:57.270
What can we do to
make things better?

00:30:57.270 --> 00:31:01.870
I love the presentation
this morning about AWS.

00:31:01.870 --> 00:31:03.505
Any analysis on cost savings?

00:31:06.300 --> 00:31:08.570
That was great, and
that's the kind of thing

00:31:08.570 --> 00:31:10.760
that we need to
be thinking about,

00:31:10.760 --> 00:31:14.390
and we can use to actually
justify additional resources

00:31:14.390 --> 00:31:15.370
to our management.

00:31:15.370 --> 00:31:18.700
Because the bottom line is
it's all about money, right?

00:31:18.700 --> 00:31:24.080
We like making the world's
information available,

00:31:24.080 --> 00:31:26.560
which is Google's charter.

00:31:26.560 --> 00:31:28.950
But we want to get paid for it.

00:31:32.760 --> 00:31:36.590
Management is all about numbers.

00:31:36.590 --> 00:31:39.110
I really enjoyed that
and took that away.

00:31:39.110 --> 00:31:41.520
So keep in mind the big picture.

00:31:41.520 --> 00:31:46.820
I think this venue is great
for doing that because we

00:31:46.820 --> 00:31:50.197
get so focused on what we're
doing, and when you hear about.

00:31:50.197 --> 00:31:52.280
Gee, they're solving the
same problem that we are.

00:31:52.280 --> 00:31:56.590
And then you could also say,
oh I never thought about that.

00:31:56.590 --> 00:32:01.430
It really helps us keep
the big picture in mind.

00:32:01.430 --> 00:32:04.960
We would never run anything out
of our home directory right.

00:32:04.960 --> 00:32:06.850
Because we're Release Engineers.

00:32:06.850 --> 00:32:09.524
And we know the right
way to do this right?

00:32:09.524 --> 00:32:11.690
We're going to package,
we're going to have our best

00:32:11.690 --> 00:32:13.540
practices, we're
going to do it right.

00:32:13.540 --> 00:32:14.040
No.

00:32:14.040 --> 00:32:17.270
Everybody, I have Cron jobs
running out of stuff in my home

00:32:17.270 --> 00:32:18.920
directory, I must admit.

00:32:18.920 --> 00:32:21.300
Auditing and stuff I'm doing.

00:32:21.300 --> 00:32:28.010
We can actually lead the way and
demonstrate, because we're all

00:32:28.010 --> 00:32:30.650
probably involved with tool
development of some kind.

00:32:30.650 --> 00:32:33.230
This is how you do
this and demonstrate

00:32:33.230 --> 00:32:36.670
to the other organizations
that if some are resistant,

00:32:36.670 --> 00:32:41.050
depends on how much clout you
have within your organization

00:32:41.050 --> 00:32:43.605
to do things like get that
best practices in place.

00:32:43.605 --> 00:32:46.590
And sometimes the
best way to do that is

00:32:46.590 --> 00:32:49.360
from demonstration
and showing hey,

00:32:49.360 --> 00:32:53.540
we went from release cycles
this long to release cycles

00:32:53.540 --> 00:32:55.560
this long, with higher quality.

00:32:55.560 --> 00:32:58.420
And so it's hard to
argue with the numbers.

00:32:58.420 --> 00:33:06.270
Keep these commandments in line,
in mind apply them to yourself.

00:33:06.270 --> 00:33:12.180
Before we get the questions,
I have a shameless plug.

00:33:12.180 --> 00:33:14.570
It's a great year to
be a Release Engineer.

00:33:14.570 --> 00:33:16.850
I am so excited about
everything that's going on.

00:33:16.850 --> 00:33:19.850
this summit has been awesome.

00:33:19.850 --> 00:33:22.220
Got to meet a lot of new people.

00:33:22.220 --> 00:33:26.590
In June, Usenix is having
their very first summit

00:33:26.590 --> 00:33:28.080
on Release Engineering.

00:33:28.080 --> 00:33:30.330
I've been trying to talk and
do this in several years,

00:33:30.330 --> 00:33:31.960
I've been telling
this is a hot topic

00:33:31.960 --> 00:33:33.520
and they finally let me do it.

00:33:33.520 --> 00:33:36.400
We got four times as
many submissions as this

00:33:36.400 --> 00:33:38.490
we actually could except.

00:33:38.490 --> 00:33:41.180
It's going to be
a great program.

00:33:41.180 --> 00:33:43.490
It's going to be
in June in Philly.

00:33:43.490 --> 00:33:47.000
On June 19th, the
day before, is going

00:33:47.000 --> 00:33:49.640
to be a summit on
configuration management.

00:33:49.640 --> 00:33:51.070
And I'm on that
program committee

00:33:51.070 --> 00:33:52.444
and actually the
two programs are

00:33:52.444 --> 00:33:54.010
going to really
work well together.

00:33:54.010 --> 00:33:56.650
So it's a great
opportunity to meet again.

00:33:59.360 --> 00:34:01.850
Then if that's not enough,
the first week in November,

00:34:01.850 --> 00:34:06.630
I think it is in Seattle, we're
doing a co-located release

00:34:06.630 --> 00:34:09.230
engineering summit with Lisa.

00:34:09.230 --> 00:34:11.690
And I'm working with the
program chair of Lisa.

00:34:11.690 --> 00:34:16.270
There's actually going to have
it, one day, same time as Lisa,

00:34:16.270 --> 00:34:19.750
a summit, but there's also going
to be sessions during Lisa,

00:34:19.750 --> 00:34:21.590
that are going to be
for Release Engineers.

00:34:21.590 --> 00:34:24.139
There's going to be tutorials.

00:34:24.139 --> 00:34:27.010
I'm really excited about that.

00:34:27.010 --> 00:34:28.830
Usenix never seen a
response like we've

00:34:28.830 --> 00:34:30.989
gotten for a first time summit.

00:34:30.989 --> 00:34:32.810
So this is a hot area.

00:34:32.810 --> 00:34:37.199
It's very exciting to be a
Release Engineer right now.

00:34:37.199 --> 00:34:39.810
This is the first time,
I've unveiled this,

00:34:39.810 --> 00:34:42.020
this is the June program.

00:34:42.020 --> 00:34:43.920
I just finalized it
this week and you all

00:34:43.920 --> 00:34:47.370
are the first ones
actually get to see it.

00:34:47.370 --> 00:34:54.679
We've got a good cross section
of industry, types of talks,

00:34:54.679 --> 00:34:58.188
I hope to see you all
there, or in Seattle.

00:34:58.188 --> 00:34:59.500
I'm done.

00:34:59.500 --> 00:35:00.150
Thank you.

00:35:04.470 --> 00:35:06.174
Thank you Dinah.

00:35:06.174 --> 00:35:07.840
AUDIENCE: Release
Engineers have to deal

00:35:07.840 --> 00:35:12.360
with people on other teams and
manage lots of relationships.

00:35:12.360 --> 00:35:17.696
Your commandments are mostly
about technical issues.

00:35:17.696 --> 00:35:21.110
A really big part of being a
successful Release Engineer,

00:35:21.110 --> 00:35:23.977
is managing relationships with
all of the other teams, who

00:35:23.977 --> 00:35:26.060
are stakeholders in what
you're trying to release.

00:35:26.060 --> 00:35:27.643
DINAH MCNUTT: I think
that [INAUDIBLE]

00:35:27.643 --> 00:35:30.790
goes under the umbrella
of the big picture right.

00:35:30.790 --> 00:35:32.300
That's part of the big picture.

00:35:32.300 --> 00:35:39.434
AUDIENCE: Our Release Engineers
are also still engineers

00:35:39.434 --> 00:35:41.850
and they have a tendency to
put their nose into their work

00:35:41.850 --> 00:35:44.440
and not look up.

00:35:44.440 --> 00:35:47.770
Calling this out explicitly
I think is pretty important.

00:35:47.770 --> 00:35:50.950
DINAH MCNUTT: Good point.

00:35:50.950 --> 00:35:52.220
AUDIENCE: Thank you.

00:35:52.220 --> 00:35:55.070
My question is, could you
provide some more clarification

00:35:55.070 --> 00:35:57.790
around using package
management's.

00:35:57.790 --> 00:36:00.140
Because I may not use
that to configure my

00:36:00.140 --> 00:36:02.440
build machine of course,
but is there a way

00:36:02.440 --> 00:36:08.610
that you would use it inside
the build process itself,

00:36:08.610 --> 00:36:12.220
that's not dependent
on my Debian,

00:36:12.220 --> 00:36:15.390
or that's not like RPM
or [INAUDIBLE] Dpacket.

00:36:18.900 --> 00:36:22.060
DINAH MCNUTT: Well it's all
about taking bits and making

00:36:22.060 --> 00:36:23.170
them available right.

00:36:23.170 --> 00:36:26.070
So it really depends
on if you want

00:36:26.070 --> 00:36:29.300
to use a package
as, we actually use

00:36:29.300 --> 00:36:34.060
package as a interim storage
for builder artifacts in our

00:36:34.060 --> 00:36:35.660
build system.

00:36:35.660 --> 00:36:39.370
So because we have this highly
available very distributed

00:36:39.370 --> 00:36:43.520
package manager
within Google, there

00:36:43.520 --> 00:36:49.180
are build artifacts that we
will store in one of our NPMs,

00:36:49.180 --> 00:36:53.080
just to make it available to
be used down the pipeline.

00:36:53.080 --> 00:36:55.530
So depending on your
infrastructure, a package

00:36:55.530 --> 00:36:58.090
repository, a yum repository
might be a good way

00:36:58.090 --> 00:37:01.707
to make intermediate build
artifacts available possibly,

00:37:01.707 --> 00:37:03.290
depending on what
your environment is.

00:37:03.290 --> 00:37:06.400
So that's one example if
I understand your question

00:37:06.400 --> 00:37:07.865
correctly of doing that.

00:37:11.825 --> 00:37:13.450
AUDIENCE: So you're
actually suggesting

00:37:13.450 --> 00:37:18.310
it's a good idea if their
local tests goes green,

00:37:18.310 --> 00:37:23.040
but it needs to get in queue
for some larger integration

00:37:23.040 --> 00:37:27.390
build or tasks, that they check
it into some sort of not code

00:37:27.390 --> 00:37:31.400
repository but artifact
package management.

00:37:31.400 --> 00:37:35.890
DINAH MCNUTT: Probably not,
because one of our best

00:37:35.890 --> 00:37:40.560
practices is we have our
continuous integration

00:37:40.560 --> 00:37:44.150
system, which does test
every time there's a commit,

00:37:44.150 --> 00:37:45.870
but then when we
actually do a build,

00:37:45.870 --> 00:37:48.520
we start with the
repository itself.

00:37:48.520 --> 00:37:50.800
And we rerun those tests.

00:37:50.800 --> 00:37:53.720
AUDIENCE: I think it's
really useful in the cases

00:37:53.720 --> 00:37:57.630
where you do your on
your build systems.

00:37:57.630 --> 00:37:59.710
On some platforms,
where you don't

00:37:59.710 --> 00:38:02.077
want to necessarily
to grade source code,

00:38:02.077 --> 00:38:03.660
you don't want to
put some source code

00:38:03.660 --> 00:38:06.100
client to what there were
other pieces and piece of it.

00:38:06.100 --> 00:38:08.830
So what you can do, you can
wrap your build framework

00:38:08.830 --> 00:38:10.963
into packages and
deploy them with part

00:38:10.963 --> 00:38:13.395
of the so what were
deployment, you

00:38:13.395 --> 00:38:16.590
do when you deploy your
tools first on the platform.

00:38:16.590 --> 00:38:20.250
So we do that for this team.

00:38:20.250 --> 00:38:23.130
So we have some five
some based framework

00:38:23.130 --> 00:38:25.790
and we wrap it into
packages and we deploy them

00:38:25.790 --> 00:38:28.540
so we don't have,
we do version them

00:38:28.540 --> 00:38:30.060
and everything so
don't get us wrong

00:38:30.060 --> 00:38:33.210
but we don't have to
use source code clients

00:38:33.210 --> 00:38:35.740
and they get them from
the source code repository

00:38:35.740 --> 00:38:37.830
these bits and
pieces of framework

00:38:37.830 --> 00:38:41.610
like we use for
the build system.

00:38:41.610 --> 00:38:44.360
AUDIENCE: So my question
is about the commandment

00:38:44.360 --> 00:38:49.180
you had about portability and
maintainability of build specs.

00:38:49.180 --> 00:38:53.620
You said we should have portable
and maintainable build specs.

00:38:53.620 --> 00:38:58.260
To some extent, are these
two qualities not opposed

00:38:58.260 --> 00:39:00.433
to raise portability
you also have

00:39:00.433 --> 00:39:03.030
to raise maintenance costs.

00:39:03.030 --> 00:39:04.790
Maybe you could riff
a little on that.

00:39:04.790 --> 00:39:06.750
DINAH MCNUTT: I think
what I had in mind

00:39:06.750 --> 00:39:10.940
there was thinking about
how you architect them

00:39:10.940 --> 00:39:18.540
and planning for
flexibility, configurability,

00:39:18.540 --> 00:39:24.780
but being able to make a
single change and have it

00:39:24.780 --> 00:39:28.350
propagate throughout
your whole system.

00:39:28.350 --> 00:39:30.964
And so that's where I
was coming from on that.

00:39:30.964 --> 00:39:32.255
Does that answer your question?

00:39:32.255 --> 00:39:35.150
OK.

00:39:35.150 --> 00:39:36.780
AUDIENCE: Great commandments.

00:39:36.780 --> 00:39:44.400
What are we doing to ensure that
we're basically training people

00:39:44.400 --> 00:39:45.560
to know these commandments.

00:39:45.560 --> 00:39:49.740
The biggest problem I have
is I cannot find people out

00:39:49.740 --> 00:39:51.820
of school, or people
new engineers,

00:39:51.820 --> 00:39:54.790
who like could know
those Ten Commandments.

00:39:54.790 --> 00:39:59.130
I'm going to beat
into them one by one.

00:39:59.130 --> 00:40:01.020
DINAH MCNUTT:
Here's my prediction

00:40:01.020 --> 00:40:04.020
because, I went through this
with system administration.

00:40:04.020 --> 00:40:06.840
I played an early role
in the development

00:40:06.840 --> 00:40:11.870
of system administration as
a discipline A lot of that

00:40:11.870 --> 00:40:15.210
and the reason we're seeing
curriculum for system

00:40:15.210 --> 00:40:17.550
administration, was
actually the work

00:40:17.550 --> 00:40:21.610
of sage, the Usenix
special interest group.

00:40:21.610 --> 00:40:26.540
So I think organizations
like RelEng, like Usenix,

00:40:26.540 --> 00:40:31.040
we already have an in with
some of the universities right.

00:40:31.040 --> 00:40:33.460
I think we can
collaborate and come up

00:40:33.460 --> 00:40:36.190
with the right curriculum.

00:40:36.190 --> 00:40:39.090
Lots of opportunities for
people to give talks this year.

00:40:39.090 --> 00:40:41.260
Oh I almost forgot.

00:40:41.260 --> 00:40:44.510
There's the IEEE publication on
release engineering next year.

00:40:44.510 --> 00:40:47.700
The deadline is August
4 first for that.

00:40:47.700 --> 00:40:52.200
Also Usenix, has,
and by the way,

00:40:52.200 --> 00:40:56.640
I got permission to do the
Usenix spiels ahead of time.

00:40:56.640 --> 00:40:59.840
Usenix has an excellent
publication called login.

00:40:59.840 --> 00:41:03.640
I have extra copies of
the April login up here.

00:41:03.640 --> 00:41:05.710
In anticipation of
[INAUDIBLE], they

00:41:05.710 --> 00:41:08.680
asked me to write an article
on what is release engineering,

00:41:08.680 --> 00:41:11.220
because it's like
this elephant right.

00:41:11.220 --> 00:41:13.545
I think the analogy I used
in the article in fact.

00:41:17.640 --> 00:41:20.437
We're looking for
more submissions

00:41:20.437 --> 00:41:21.770
on release engineering for this.

00:41:21.770 --> 00:41:23.560
There's the IEEE
publication, which

00:41:23.560 --> 00:41:25.490
I plan on submitting
something for.

00:41:25.490 --> 00:41:28.060
So I think there's going to
be lots of opportunities.

00:41:28.060 --> 00:41:33.079
We're going to see
possibly good standards.

00:41:33.079 --> 00:41:34.870
I've been around
standards for a long time.

00:41:37.464 --> 00:41:39.140
I think you're here.

00:41:39.140 --> 00:41:41.410
I think this is the start of it.

00:41:41.410 --> 00:41:44.330
FOUTSE KHOMH: Yeah just to build
a bit of that, now University

00:41:44.330 --> 00:41:48.090
actually we have a cost that
we just started [INAUDIBLE]

00:41:48.090 --> 00:41:49.080
on Release Engineering.

00:41:49.080 --> 00:41:53.420
And in July, coming July we have
a mini Windows summer school

00:41:53.420 --> 00:41:55.730
that we'll be doing
three days school

00:41:55.730 --> 00:41:57.850
on release engineering stuff.

00:41:57.850 --> 00:41:59.840
I think we're pushing
in that direction.

00:42:02.710 --> 00:42:07.330
DINAH MCNUTT: I think we need
to have some camps at Google.

00:42:07.330 --> 00:42:09.990
I think it'd be a great idea.

00:42:09.990 --> 00:42:13.620
AUDIENCE: If we're all on
the hook for recruiting.

00:42:13.620 --> 00:42:20.710
[INAUDIBLE] It is
on all of us right.

00:42:20.710 --> 00:42:22.720
And I have to go for
all of our companies,

00:42:22.720 --> 00:42:24.960
I'm sure we're all on the
hook for recruiting right.

00:42:24.960 --> 00:42:28.230
So they drag me out to
campuses, but I have a deck

00:42:28.230 --> 00:42:31.320
that I've made for college
campuses like you said,

00:42:31.320 --> 00:42:34.770
what is release engineering,
to at least open their minds

00:42:34.770 --> 00:42:36.710
in their junior and
senior years that this

00:42:36.710 --> 00:42:39.670
is a track that's available.

00:42:39.670 --> 00:42:42.690
So I think it's up to us when
we go on our recruiting trips

00:42:42.690 --> 00:42:46.000
to make sure we have a deck
or something we can give

00:42:46.000 --> 00:42:48.360
the 20 minute pitch, that
gets them excited about it.

00:42:48.360 --> 00:42:49.860
DINAH MCNUTT: I
don't think anything

00:42:49.860 --> 00:42:56.340
I said today was earth
shattering to this audience.

00:42:56.340 --> 00:42:58.929
I went over to Netflix and did
a dry run earlier this week

00:42:58.929 --> 00:43:01.470
and it was really great because
the person I was giving it to

00:43:01.470 --> 00:43:04.380
was like, oh yeah
that's a good one.

00:43:04.380 --> 00:43:06.180
I was able to get
his first reaction.

00:43:06.180 --> 00:43:09.325
And it's like sometimes
just seeing it all at once

00:43:09.325 --> 00:43:11.450
and it's like, well yeah
doesn't everybody do this.

00:43:11.450 --> 00:43:12.866
And it's like well
no, some people

00:43:12.866 --> 00:43:15.080
haven't thought about
some of the points.

00:43:15.080 --> 00:43:18.480
AUDIENCE: So an
observation actually,

00:43:18.480 --> 00:43:21.850
I think the ideas that you
all throughout our great,

00:43:21.850 --> 00:43:28.020
but the open source community
has been actually really

00:43:28.020 --> 00:43:31.100
driving this cadence
based release process.

00:43:31.100 --> 00:43:35.800
We heard from Mozilla earlier
and Gnome and one of the ways

00:43:35.800 --> 00:43:37.640
that Google has
been contributing

00:43:37.640 --> 00:43:41.580
to this problem is trying to
get students in universities

00:43:41.580 --> 00:43:44.630
involved in the open source
community really early.

00:43:44.630 --> 00:43:46.260
With the Google Summer
of Code program,

00:43:46.260 --> 00:43:50.570
which has some hundreds of
participants every year.

00:43:50.570 --> 00:43:53.660
So the more that
students in university

00:43:53.660 --> 00:43:57.860
are plugged in to
release processes early,

00:43:57.860 --> 00:44:00.250
I think is a great
opportunity for students

00:44:00.250 --> 00:44:05.720
to learn about release
practices and best practices.

00:44:05.720 --> 00:44:09.300
MALE SPEAKER: Well with that,
let's give a hand to Dinah.

