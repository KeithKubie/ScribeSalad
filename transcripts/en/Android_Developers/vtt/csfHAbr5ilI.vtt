WEBVTT
Kind: captions
Language: en

00:00:01.386 --> 00:00:03.234
[MUSIC PLAYING]

00:00:05.090 --> 00:00:08.630
SPEAKER: Many apps use audio
to create amazing experiences.

00:00:08.630 --> 00:00:11.710
Whether it's DJing,
karaoke, or musical games,

00:00:11.710 --> 00:00:15.040
audio is a powerful tool for
expression, entertainment,

00:00:15.040 --> 00:00:16.770
and creativity.

00:00:16.770 --> 00:00:21.280
Today, I'm going to show you how
Oboe, a new C++ audio library,

00:00:21.280 --> 00:00:23.320
makes it easy to
build interesting,

00:00:23.320 --> 00:00:26.530
interactive audio
experiences on Android.

00:00:26.530 --> 00:00:30.340
But first, what do we
mean by interactive audio?

00:00:30.340 --> 00:00:31.610
Consider this keyboard.

00:00:31.610 --> 00:00:36.790
I press a key, the keyboard
makes a sound immediately.

00:00:36.790 --> 00:00:39.700
This makes the keyboard
feel incredibly responsive,

00:00:39.700 --> 00:00:42.360
because I get instant
audible feedback.

00:00:42.360 --> 00:00:44.320
It's part of what makes
playing an instrument

00:00:44.320 --> 00:00:46.450
such a joyous experience.

00:00:46.450 --> 00:00:49.980
But imagine if,
after hitting a key,

00:00:49.980 --> 00:00:51.930
I had to wait to hear the sound.

00:00:51.930 --> 00:00:53.910
This delay, or
latency, would make

00:00:53.910 --> 00:00:56.970
the keyboard difficult
and frustrating to play.

00:00:56.970 --> 00:00:59.380
The same applies
in apps and games,

00:00:59.380 --> 00:01:02.910
whether it's rhythm games and
karaoke, DJing and scratching

00:01:02.910 --> 00:01:06.870
apps, virtual reality,
synthesizers, drum machines,

00:01:06.870 --> 00:01:09.030
and other virtual instruments.

00:01:09.030 --> 00:01:12.030
All these apps share the
same common requirement,

00:01:12.030 --> 00:01:14.970
they need low-latency audio
to provide a great user

00:01:14.970 --> 00:01:16.300
experience.

00:01:16.300 --> 00:01:18.240
And that's exactly
what Oboe does.

00:01:18.240 --> 00:01:21.990
It's a C++ library which makes
it easy to obtain the lowest

00:01:21.990 --> 00:01:26.190
possible audio latency on
any given Android device.

00:01:26.190 --> 00:01:28.530
It works with API
16 and above, which

00:01:28.530 --> 00:01:32.760
means it's compatible with
over 99% of Android devices.

00:01:32.760 --> 00:01:36.630
Under the hood, it uses
AAudio on API 27 and above,

00:01:36.630 --> 00:01:40.590
falling back to OpenSL
ES on all the API levels.

00:01:40.590 --> 00:01:44.040
This way, Oboe provides a
single, easy-to-use API,

00:01:44.040 --> 00:01:46.230
which takes advantage
of the new features

00:01:46.230 --> 00:01:48.420
and better
performance in AAudio,

00:01:48.420 --> 00:01:50.970
while still providing backward
compatibility with all

00:01:50.970 --> 00:01:52.740
the devices.

00:01:52.740 --> 00:01:54.870
To get started with
Oboe, all you need to do

00:01:54.870 --> 00:01:56.730
is clone the
repository from GitHub.

00:01:56.730 --> 00:01:59.910
This will copy the library
to your local machine.

00:01:59.910 --> 00:02:03.510
Oboe is designed to be built
as a CMake sub-project.

00:02:03.510 --> 00:02:05.770
To build it, you need to
update your project CMake

00:02:05.770 --> 00:02:07.800
configuration.

00:02:07.800 --> 00:02:10.110
If you don't have an
existing CMake configuration,

00:02:10.110 --> 00:02:12.960
you'll need to add C++ support
to your app by following

00:02:12.960 --> 00:02:14.340
the link below.

00:02:14.340 --> 00:02:17.520
First, tell your project
where the Oboe source code is.

00:02:17.520 --> 00:02:20.670
That's the path to which
you've cloned the repository.

00:02:20.670 --> 00:02:23.230
Next, add this path
as a subdirectory,

00:02:23.230 --> 00:02:25.450
and add the public headers.

00:02:25.450 --> 00:02:28.570
Finally, add Oboe as
a dependent library.

00:02:28.570 --> 00:02:32.220
To have Android Studio index
the library, go to Build,

00:02:32.220 --> 00:02:35.250
Refresh Link to C++ Project.

00:02:35.250 --> 00:02:37.920
Now that's done, you can use
Oboe objects in your code

00:02:37.920 --> 00:02:40.590
by including the Oboe header.

00:02:40.590 --> 00:02:42.900
All objects are in
the Oboe namespace,

00:02:42.900 --> 00:02:44.850
so they won't clash with
any other namespaces

00:02:44.850 --> 00:02:46.420
you might be using.

00:02:46.420 --> 00:02:48.900
Now you are ready to
start using the Oboe API.

00:02:48.900 --> 00:02:51.840
Check out the Getting Started
guide, the code samples,

00:02:51.840 --> 00:02:54.180
and the code lab, all
available on the GitHub

00:02:54.180 --> 00:02:55.470
site linked below.

00:02:55.470 --> 00:02:57.070
If you have any
problems or questions,

00:02:57.070 --> 00:02:59.486
please post them in the Issues
section on our GitHub site,

00:02:59.486 --> 00:03:01.900
and we'll do our very
best to help you out.

00:03:01.900 --> 00:03:03.600
You can learn more
about Oboe, including

00:03:03.600 --> 00:03:05.730
how to create
low-latency audio streams

00:03:05.730 --> 00:03:07.780
and a high-priority
audio callback

00:03:07.780 --> 00:03:10.890
in the next video in the
series, Making Sounds With Oboe.

00:03:10.890 --> 00:03:11.790
That's all for now.

00:03:11.790 --> 00:03:13.665
So good luck, and
go make some noise.

00:03:13.665 --> 00:03:17.270
[MUSIC PLAYING]

