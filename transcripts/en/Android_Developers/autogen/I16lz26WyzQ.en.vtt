WEBVTT
Kind: captions
Language: en

00:00:02.706 --> 00:00:05.710
 Automatic packaging is one of the strange patterns in your application. 

00:00:05.710 --> 00:00:07.790
 Sometimes it is not really a performance problem 

00:00:07.790 --> 00:00:11.162
 But when they are, they consume memory and performance. 

00:00:11.162 --> 00:00:13.620
 My name is Colt McCannless, thanks to the Android operating environment 

00:00:13.620 --> 00:00:17.854
 You can avoid one of the biggest causes of automatic packaging problems - HashMap containers 

00:00:18.075 --> 00:00:21.602
 Now, automatic packaging is a process in which the operating environment automatically converts 

00:00:21.604 --> 00:00:24.659
 One of the initial patterns to the corresponding public object pattern. 

00:00:24.660 --> 00:00:26.622
 But this is bad for two reasons. 

00:00:26.622 --> 00:00:28.300
 The first reason is that the packaging is automatic 

00:00:28.300 --> 00:00:32.220
 A customization of an Integer object will generate any type of conversion that it uses. 

00:00:32.220 --> 00:00:37.739
 Second, these general organisms are larger than their primary counterparts, 

00:00:37.767 --> 00:00:41.104
 16 bytes for a valid object instead of 4 for the initial interview. 

00:00:41.223 --> 00:00:43.470
 Meaning not only because it allocates objects 

00:00:43.470 --> 00:00:46.523
 But these objects are much larger than they should be. 

00:00:46.541 --> 00:00:49.841
 Now, this is not a big problem for your intermediate calculations, 

00:00:49.850 --> 00:00:51.275
 But the time you get, 

00:00:51.275 --> 00:00:53.848
 Is when dealing with public containers such as HashMap. 

00:00:54.130 --> 00:00:57.661
 Note, when using primitive styles, such as int, float, and bool, 

00:00:57.819 --> 00:01:00.869
 HashMap must use object versions. 

00:01:01.040 --> 00:01:03.843
 So instead of being able to use a simple 32-bit int 

00:01:03.843 --> 00:01:06.422
 HashMap is forced to use general Integer objects 

00:01:06.422 --> 00:01:08.182
 Which of course consumes more memory. 

00:01:08.266 --> 00:01:09.567
 And you have to be careful here 

00:01:09.568 --> 00:01:12.528
 Because any time you call it an initial pattern from a public container, 

00:01:12.840 --> 00:01:14.320
 You get automatic packaging process. 

00:01:14.602 --> 00:01:18.640
 Now, memory is very important in Android and to save space is running Android 

00:01:18.640 --> 00:01:23.970
 Providing a whole family of public containers built specifically to secure the work of HashMap 

00:01:23.970 --> 00:01:26.830
 But allow you to use the initial patterns and avoid automatic packaging. 

00:01:26.830 --> 00:01:29.075
 Welcome to SparseArray family of scattered matrices. 

00:01:29.075 --> 00:01:31.171
 Basically the scattered matrices are similar to ArrayMaps 

00:01:31.171 --> 00:01:33.568
 So that they reduce the overall memory effect 

00:01:33.569 --> 00:01:37.669
 By using two closely interconnected matrices rather than one large matrix for hashing. 

00:01:37.670 --> 00:01:40.471
 But they also cause some extra effort to bring the kettles. 

00:01:40.471 --> 00:01:43.985
 So they are actually useful for containers containing only hundreds of objects 

00:01:43.986 --> 00:01:45.728
 Instead of thousands or millions. 

00:01:46.000 --> 00:01:49.627
 The main difference between scattered arrays and ArrayMaps is that it is in scattered matrices 

00:01:49.864 --> 00:01:54.040
 The key object is always a defined primary style instead of a generic style, 

00:01:54.040 --> 00:01:56.609
 Allowing you to save memory and avoid automatic packaging. 

00:01:56.750 --> 00:01:59.216
 But in fact, the differences stop there. 

00:01:59.311 --> 00:02:03.045
 Like ArrayMaps, you can also cross scattered matrices by indexing 

00:02:03.046 --> 00:02:06.560
 Instead of using an iterative pattern, it is required for HashMaps 

00:02:06.560 --> 00:02:09.937
 Also significantly slower and consumes more memory to do. 

00:02:09.993 --> 00:02:11.682
 And also like ArrayMaps 

00:02:11.683 --> 00:02:16.510
 It is not wise to use the beds of improved scattered matrix containers in each case. 

00:02:16.510 --> 00:02:19.509
 But there are some ideal cases to consider. 

00:02:19.649 --> 00:02:23.901
 First, situations where you have a few items, almost in the hundreds 

00:02:24.035 --> 00:02:27.955
 It has lots of access, or access operations that are rarely repeated 

00:02:28.029 --> 00:02:30.347
 So that the extra effort to bring the elements is not noticeable. 

00:02:30.580 --> 00:02:34.183
 Secondly, where we have containers of maps, 

00:02:34.183 --> 00:02:36.556
 Often a map is a map of a map 

00:02:36.556 --> 00:02:39.615
 The sub-maps are the deeper they are in the stack 

00:02:39.615 --> 00:02:41.454
 Tend to contain a smaller number of elements, 

00:02:41.490 --> 00:02:45.235
 We end up passing through these sub-maps many times. 

00:02:45.470 --> 00:02:48.692
 If your use cases do not fall into either of these situations 

00:02:48.693 --> 00:02:51.075
 It may be best to stick to using the HashMap row 

00:02:51.131 --> 00:02:53.192
 Instead of one of these wonderful and beautiful alternatives. 

00:02:53.290 --> 00:02:55.534
 It highlights every interesting point, 

00:02:55.534 --> 00:02:59.179
 Improving performance is a trade-off of searches on the right container 

00:02:59.180 --> 00:03:02.068
 For proper usage mode for the correct memory cases. 

00:03:02.290 --> 00:03:04.247
 As one of them said, there is no magic solution, 

00:03:04.264 --> 00:03:07.265
 That's why you need to check the rest of the content of Android performance patterns. 

00:03:07.265 --> 00:03:10.000
 For more information on these types of swaps. 

00:03:10.000 --> 00:03:12.667
 Do not forget to join our community on Google+ too, 

00:03:12.783 --> 00:03:15.123
 To hear war stories from other developers. 

00:03:15.350 --> 00:03:19.070
 So stay calm, type your code, and always remember, performance is important. 

