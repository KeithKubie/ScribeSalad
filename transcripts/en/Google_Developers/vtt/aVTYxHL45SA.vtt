WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[MUSIC PLAYING]

00:00:04.343 --> 00:00:06.010
TOM GREENAWAY: Good
afternoon, everyone.

00:00:06.010 --> 00:00:07.080
My name is Tom Greenaway.

00:00:07.080 --> 00:00:09.630
And I'm the games lead for
the Chrome and Web Developer

00:00:09.630 --> 00:00:11.970
Relations team at Google.

00:00:11.970 --> 00:00:14.430
Before joining Google, I
ran my own independent game

00:00:14.430 --> 00:00:15.810
development studio.

00:00:15.810 --> 00:00:17.490
And I created a
native mobile game

00:00:17.490 --> 00:00:20.160
called "Duet,"
which was downloaded

00:00:20.160 --> 00:00:22.350
nearly 20 million times.

00:00:22.350 --> 00:00:25.873
So I have a lot of experience
in game design, and production,

00:00:25.873 --> 00:00:27.165
but also in running a business.

00:00:31.620 --> 00:00:34.090
I joined the web team a
little over six months ago.

00:00:34.090 --> 00:00:36.610
And I've been researching
the web game space

00:00:36.610 --> 00:00:38.192
during that time.

00:00:38.192 --> 00:00:39.650
And I'll admit
that, when I joined,

00:00:39.650 --> 00:00:44.770
I was a little bit skeptical
about the success of web games

00:00:44.770 --> 00:00:47.350
and whether it's a truly viable
place for a game developer

00:00:47.350 --> 00:00:49.205
to build a business.

00:00:49.205 --> 00:00:51.580
But today, I'd like to share
with you some of my thoughts

00:00:51.580 --> 00:00:53.080
and discoveries in this area.

00:00:53.080 --> 00:00:54.700
And I hope, by the
end of the session,

00:00:54.700 --> 00:00:56.140
I've opened your
eyes a little bit

00:00:56.140 --> 00:00:59.950
to some of the new opportunities
that exist out there.

00:00:59.950 --> 00:01:02.650
Because the truth is is
that I think the best

00:01:02.650 --> 00:01:06.100
way I can describe the web
and the potential of web games

00:01:06.100 --> 00:01:08.390
is that it's an opportunity.

00:01:08.390 --> 00:01:10.540
In fact, I think it's a
huge opportunity that,

00:01:10.540 --> 00:01:13.120
with some effort and
some determination,

00:01:13.120 --> 00:01:17.770
can be incredibly valuable for
game developers to consider.

00:01:17.770 --> 00:01:20.020
But let's start by
facing some facts.

00:01:20.020 --> 00:01:24.790
As game developers, what do we
need to succeed as a business?

00:01:24.790 --> 00:01:28.930
Well, really, we need three
things, a functioning game,

00:01:28.930 --> 00:01:32.950
users, and a way
to monetize them.

00:01:32.950 --> 00:01:35.110
The first topic probably
sounds really obvious.

00:01:35.110 --> 00:01:38.580
You're thinking, Tom, of course
you need a functioning game.

00:01:38.580 --> 00:01:41.320
But to clarify, by
functioning game, what I mean

00:01:41.320 --> 00:01:43.720
is a game that runs
well on devices,

00:01:43.720 --> 00:01:46.390
looks good, and sounds good.

00:01:46.390 --> 00:01:48.710
Does the web provide
us with these things?

00:01:48.710 --> 00:01:51.520
Can we build a web game that
ticks all of these boxes?

00:01:51.520 --> 00:01:53.020
Well, the answer is, yes.

00:01:53.020 --> 00:01:55.970
HTML5 has matured a lot
in the last 10 years.

00:01:55.970 --> 00:01:58.240
And there is a long laundry
list of technologies

00:01:58.240 --> 00:01:59.937
that I could tell you about.

00:01:59.937 --> 00:02:02.020
And I'll touch on some of
them later in this talk.

00:02:02.020 --> 00:02:06.290
But to be brutally honest,
the viability of web games--

00:02:06.290 --> 00:02:08.740
it really has nothing
to do with the tech.

00:02:08.740 --> 00:02:11.390
This isn't really a
technological problem anymore.

00:02:11.390 --> 00:02:14.030
It's a business and
ecosystem problem.

00:02:14.030 --> 00:02:16.780
And that's why these
next two points--

00:02:16.780 --> 00:02:20.420
getting users and monetization--
are so much more important.

00:02:20.420 --> 00:02:23.800
Because if you don't have users
and if you can't make money,

00:02:23.800 --> 00:02:25.522
then you're toast.

00:02:25.522 --> 00:02:26.980
Now, I'm not saying
that the web is

00:02:26.980 --> 00:02:31.330
100% equipped right now to
solve both of those problems.

00:02:31.330 --> 00:02:34.270
As someone who created
games for platforms

00:02:34.270 --> 00:02:36.280
like Google Play
and the App Store,

00:02:36.280 --> 00:02:39.790
I know how valuable it is to
have a platform provide you

00:02:39.790 --> 00:02:42.940
with users and eyeballs that
are looking at your product

00:02:42.940 --> 00:02:45.430
and also to have credit
card details and payment

00:02:45.430 --> 00:02:47.560
options readily available
to be able to transact

00:02:47.560 --> 00:02:50.360
with your users.

00:02:50.360 --> 00:02:52.540
So, does the web have
these things built in?

00:02:52.540 --> 00:02:55.930
Well, no, not to the same
degree that the native platforms

00:02:55.930 --> 00:02:57.820
like mobile platforms have--

00:02:57.820 --> 00:03:00.010
or even desktop
stores, actually.

00:03:00.010 --> 00:03:02.170
But at the same time,
we should recognize

00:03:02.170 --> 00:03:06.010
that the web is basically
the most open platform that

00:03:06.010 --> 00:03:07.630
has ever been created.

00:03:07.630 --> 00:03:09.280
That is both its
greatest strength

00:03:09.280 --> 00:03:12.250
and its greatest weakness.

00:03:12.250 --> 00:03:14.620
So business models,
ads, subscriptions,

00:03:14.620 --> 00:03:16.750
or microtransactions--
on the web,

00:03:16.750 --> 00:03:20.030
you can literally do
anything you want.

00:03:20.030 --> 00:03:21.520
But at the same
time, it also means

00:03:21.520 --> 00:03:23.312
that users aren't always
familiar with what

00:03:23.312 --> 00:03:24.340
you're proposing.

00:03:24.340 --> 00:03:26.290
And that means there
can be less trust.

00:03:26.290 --> 00:03:28.360
And less trust means
more friction to pay.

00:03:31.030 --> 00:03:33.323
And discovering
and getting users--

00:03:33.323 --> 00:03:35.740
now this is where things get
really interesting, actually,

00:03:35.740 --> 00:03:36.280
for the web.

00:03:36.280 --> 00:03:39.040
Because the web is
totally decentralized.

00:03:39.040 --> 00:03:42.130
And when it comes
to discovery, that's

00:03:42.130 --> 00:03:44.020
the reason why we have
things like search

00:03:44.020 --> 00:03:46.180
engines in the first place.

00:03:46.180 --> 00:03:48.070
That's why Google exists.

00:03:48.070 --> 00:03:49.780
And yet, at the
same time, there's

00:03:49.780 --> 00:03:54.010
no platform that is actually
more viral than the web.

00:03:54.010 --> 00:03:56.380
When users see a URL,
they know what it means.

00:03:56.380 --> 00:03:58.360
They know it means
that they can tap it,

00:03:58.360 --> 00:04:01.210
and they can be whisked away
to something that could be--

00:04:01.210 --> 00:04:02.830
well, it could be anything.

00:04:02.830 --> 00:04:05.530
And yet, they trust it
completely to tap that link

00:04:05.530 --> 00:04:09.370
and to jump into something
completely unknown.

00:04:09.370 --> 00:04:11.770
So there is enormous
trust in web browsers

00:04:11.770 --> 00:04:13.000
to keep users safe.

00:04:13.000 --> 00:04:14.487
And we don't take that lightly.

00:04:14.487 --> 00:04:16.570
And that's sort of the
beauty of the web browser--

00:04:16.570 --> 00:04:20.019
is that, as easily as you are
linked to a piece of content,

00:04:20.019 --> 00:04:23.830
you can now link another
user to that same content

00:04:23.830 --> 00:04:25.270
by sharing it.

00:04:25.270 --> 00:04:27.970
And so that cycle of being
linked and then linking others

00:04:27.970 --> 00:04:33.255
is really the power
of the web, really.

00:04:33.255 --> 00:04:33.880
We all know it.

00:04:33.880 --> 00:04:35.720
It's not just a series of tubes.

00:04:35.720 --> 00:04:37.950
It's actually a series of links.

00:04:37.950 --> 00:04:40.360
And not only is the web
the most open platform

00:04:40.360 --> 00:04:45.430
that has ever been created, it's
also the biggest platform ever.

00:04:45.430 --> 00:04:47.320
Every device has
a web browser now.

00:04:47.320 --> 00:04:49.960
Even smartwatches
can render web pages.

00:04:49.960 --> 00:04:53.020
And with new feature
phone platforms coming out

00:04:53.020 --> 00:04:56.362
that with HTML5 as their
primary app platform,

00:04:56.362 --> 00:04:57.820
it really means
that there are just

00:04:57.820 --> 00:04:59.320
billions of devices out there.

00:04:59.320 --> 00:05:01.010
That's the size of
the opportunity.

00:05:01.010 --> 00:05:02.770
The user base is
literally billions

00:05:02.770 --> 00:05:06.470
of users on browsers on
all sorts of devices.

00:05:06.470 --> 00:05:10.210
So why do we focus so
much on native platforms?

00:05:10.210 --> 00:05:12.040
As game developers,
I think we do it,

00:05:12.040 --> 00:05:14.650
because it tends to be easier.

00:05:14.650 --> 00:05:17.253
Because a lot of the work
has been done for us,

00:05:17.253 --> 00:05:18.670
especially when
it comes to things

00:05:18.670 --> 00:05:20.290
like discovery and monetization.

00:05:20.290 --> 00:05:21.790
But that doesn't
mean that we should

00:05:21.790 --> 00:05:24.580
ignore the potential of
the web and the opportunity

00:05:24.580 --> 00:05:27.000
that the web brings.

00:05:27.000 --> 00:05:28.990
For sure, continue
making native games.

00:05:28.990 --> 00:05:30.490
I'm not saying that
you should stop.

00:05:30.490 --> 00:05:34.810
But as we all know, all
businesses and business

00:05:34.810 --> 00:05:37.763
opportunities are governed
by risk versus reward.

00:05:37.763 --> 00:05:39.430
And the reward for
building native games

00:05:39.430 --> 00:05:41.450
is a well-known factor.

00:05:41.450 --> 00:05:44.560
So I think it would be great
to try tackling those three

00:05:44.560 --> 00:05:46.870
requirements I outlined
earlier, and look

00:05:46.870 --> 00:05:49.090
at them from the
perspective of web games

00:05:49.090 --> 00:05:53.080
to measure the potential
of that web gaming reward.

00:05:53.080 --> 00:05:56.770
So let's look at building a
functioning game on the web,

00:05:56.770 --> 00:06:02.240
finding users on the web,
and monetizing on the web.

00:06:02.240 --> 00:06:05.110
OK, so a functioning
game-- as I said earlier,

00:06:05.110 --> 00:06:06.760
HTML5 has matured a lot.

00:06:06.760 --> 00:06:09.490
So, what are the requirements
for a functioning game?

00:06:09.490 --> 00:06:10.780
I mentioned that earlier, too.

00:06:10.780 --> 00:06:12.698
You need to have it run
well on your device.

00:06:12.698 --> 00:06:13.740
You want it to look good.

00:06:13.740 --> 00:06:14.670
You want it to sound good.

00:06:14.670 --> 00:06:16.337
So that means we're
talking about things

00:06:16.337 --> 00:06:20.320
like CPU, graphics, and audio.

00:06:20.320 --> 00:06:23.980
So a very quick way to break
this down is by just grouping

00:06:23.980 --> 00:06:26.920
all game developers in the
world into two simple buckets,

00:06:26.920 --> 00:06:29.698
those who have their own
engine and those who don't.

00:06:29.698 --> 00:06:31.240
So if you're in the
latter and you're

00:06:31.240 --> 00:06:35.200
using an existing off-the-shelf
engine, I imagine 99% of you

00:06:35.200 --> 00:06:38.740
are using either Unity,
Unreal, or Cocos.

00:06:38.740 --> 00:06:41.380
And so, the reality is that
all these engines actually

00:06:41.380 --> 00:06:42.520
support HTML5.

00:06:42.520 --> 00:06:45.790
And they've supported
HTML5 for a long time.

00:06:45.790 --> 00:06:48.370
In fact, Unity has
a special new HTML5

00:06:48.370 --> 00:06:50.282
runtime called
Project Tiny, which

00:06:50.282 --> 00:06:51.490
I'd like to highlight to you.

00:06:51.490 --> 00:06:55.848
But I'm going to save that
for a bit later in the talk.

00:06:55.848 --> 00:06:57.390
But if we flip to
that other bucket--

00:06:57.390 --> 00:06:59.790
OK, you've got your own engine.

00:06:59.790 --> 00:07:01.860
Well, firstly, that's amazing.

00:07:01.860 --> 00:07:02.850
That's really great.

00:07:02.850 --> 00:07:05.640
And the reason why I say that
is because in my own company we

00:07:05.640 --> 00:07:07.380
had our own C++ engine.

00:07:07.380 --> 00:07:10.270
And it was kind of
completely ridiculous.

00:07:10.270 --> 00:07:12.695
But it was also completely
awesome at the same time.

00:07:12.695 --> 00:07:14.820
So if you want to bring
your own engine to the web,

00:07:14.820 --> 00:07:15.948
how do you do it?

00:07:15.948 --> 00:07:17.490
Well, if you do have
your own engine,

00:07:17.490 --> 00:07:21.150
I imagine that 99% of you
have written it in C, C++,

00:07:21.150 --> 00:07:23.460
or some other language
that compiles through LLVM

00:07:23.460 --> 00:07:25.050
to machine code.

00:07:25.050 --> 00:07:28.260
And if that's, the case
go check out Emscripten.

00:07:28.260 --> 00:07:31.980
So Emscripten is basically
a compilation tool chain

00:07:31.980 --> 00:07:34.470
that takes any language
that compiles through LLVM

00:07:34.470 --> 00:07:37.080
and can provide bindings for
a bunch of standard platform

00:07:37.080 --> 00:07:40.620
features, like file system,
graphics, and sound, and OpenGL

00:07:40.620 --> 00:07:42.880
bindings, for example.

00:07:42.880 --> 00:07:45.090
And as we know,
all this sounds--

00:07:45.090 --> 00:07:47.130
well, actually, no, I
know what you're thinking.

00:07:47.130 --> 00:07:48.210
You're probably thinking
this sounds a bit

00:07:48.210 --> 00:07:50.970
like I'm cheating, like I'm not
going really in-depth on each

00:07:50.970 --> 00:07:52.250
of these topics.

00:07:52.250 --> 00:07:55.320
But the reason why is
because, at I/O, we

00:07:55.320 --> 00:07:57.930
have other sessions
on web assembly,

00:07:57.930 --> 00:08:00.790
and CPU, and
graphics, and audio.

00:08:00.790 --> 00:08:03.180
So I recommend you go and
check out those talks.

00:08:03.180 --> 00:08:05.430
And I'll highlight
them in a few seconds.

00:08:05.430 --> 00:08:09.150
But I'll go just
briefly at a high level

00:08:09.150 --> 00:08:11.560
on each of these topics.

00:08:11.560 --> 00:08:12.730
So here's a quick summary.

00:08:12.730 --> 00:08:16.920
So, CPU-- there's a cool new
portable binary instruction

00:08:16.920 --> 00:08:19.140
set called WebAssembly
that's available in all

00:08:19.140 --> 00:08:20.580
the major browsers.

00:08:20.580 --> 00:08:21.360
So it's safe.

00:08:21.360 --> 00:08:23.120
It runs really fast.

00:08:23.120 --> 00:08:24.870
It's actually close
to native performance.

00:08:24.870 --> 00:08:27.780
And it also loads really,
really quickly, too.

00:08:27.780 --> 00:08:30.060
Can you do threading in
WebAssembly or in Chrome?

00:08:30.060 --> 00:08:30.690
You can.

00:08:30.690 --> 00:08:35.240
And in other
browsers, it's coming.

00:08:35.240 --> 00:08:37.490
And you don't need to write
your entire game or engine

00:08:37.490 --> 00:08:38.532
in WebAssembly, actually.

00:08:38.532 --> 00:08:40.200
You can mix it with
JavaScript, as well.

00:08:40.200 --> 00:08:43.950
So Construct is a web-based
game editor and engine.

00:08:43.950 --> 00:08:45.180
It's super simple to use.

00:08:45.180 --> 00:08:46.860
And they used
WebAssembly actually

00:08:46.860 --> 00:08:48.300
to optimize their physics.

00:08:48.300 --> 00:08:50.820
Originally, it was just
Box2D ported to JavaScript.

00:08:50.820 --> 00:08:52.320
But they've replaced
it with a Box3D

00:08:52.320 --> 00:08:56.452
to WebAssembly port now for
even better performance.

00:08:56.452 --> 00:08:59.310
If you want to learn
more about WebAssembly,

00:08:59.310 --> 00:09:02.740
we have another talk called "Web
Assembly for Web Developers,"

00:09:02.740 --> 00:09:04.050
which ran earlier today.

00:09:04.050 --> 00:09:09.162
So I recommend checking out a
recording of that on YouTube.

00:09:09.162 --> 00:09:10.660
OK, what about graphics?

00:09:10.660 --> 00:09:12.720
Well, there are
two parts of this.

00:09:12.720 --> 00:09:15.710
If you're using OpenGL, you
should really check out WebGL.

00:09:15.710 --> 00:09:19.080
The most prevalent version
of WebGL in the wild

00:09:19.080 --> 00:09:23.402
is WebGL 1.0, which is sort
of equivalent to OpenGL ES 2.

00:09:23.402 --> 00:09:25.110
And I know that's not
at parity with what

00:09:25.110 --> 00:09:27.000
native mobile platforms provide.

00:09:27.000 --> 00:09:28.775
But we all know
that good graphics--

00:09:28.775 --> 00:09:30.150
it's not just
about raw fidelity.

00:09:30.150 --> 00:09:32.430
It's also about style.

00:09:32.430 --> 00:09:34.680
And in the future, what
about other modern graphics

00:09:34.680 --> 00:09:37.440
pipelines, like Vulkan,
or Metal, or DX12?

00:09:37.440 --> 00:09:40.710
Well, there's a new standard
in development called WebGPU.

00:09:40.710 --> 00:09:43.110
And it's a fully programmatic
graphics pipeline

00:09:43.110 --> 00:09:44.470
that gives you full control.

00:09:44.470 --> 00:09:46.720
So all the major browsers
are experimenting on WebGPU.

00:09:49.410 --> 00:09:51.810
But here's a little
demo of Unity's engine

00:09:51.810 --> 00:09:55.500
running the tanks demo
with WebGL on HTML5.

00:09:55.500 --> 00:09:57.910
And that Bitly link
will take you there.

00:09:57.910 --> 00:10:00.270
If you want to learn more
about WebGL and WebGPU,

00:10:00.270 --> 00:10:01.890
check out the
"Next Generation 3D

00:10:01.890 --> 00:10:05.260
Graphics on the Web" talk,
which is on tomorrow at 3:30 PM.

00:10:05.260 --> 00:10:09.105
Or check the
recording on YouTube.

00:10:09.105 --> 00:10:10.695
OK, but what about audio?

00:10:10.695 --> 00:10:12.320
Well, this is super
important, as well.

00:10:12.320 --> 00:10:14.670
I remember, whenever
I made a game,

00:10:14.670 --> 00:10:16.998
I would probably end up
adding audio late in the stage

00:10:16.998 --> 00:10:17.790
of the development.

00:10:17.790 --> 00:10:20.700
But as soon as I added it, I
really realized, how did I ever

00:10:20.700 --> 00:10:22.793
play this game without it?

00:10:22.793 --> 00:10:24.210
Well, you might
be wondering, what

00:10:24.210 --> 00:10:26.190
is most common audio
API on the web?

00:10:26.190 --> 00:10:29.070
Well, it's aptly named
the Web Audio API.

00:10:29.070 --> 00:10:31.870
And it's a versatile API that
can handle sound and music

00:10:31.870 --> 00:10:32.370
loops.

00:10:32.370 --> 00:10:35.770
And you can also write your own
programmatic effects, as well.

00:10:35.770 --> 00:10:38.400
But if you need to run effects
and ensure your audio never

00:10:38.400 --> 00:10:42.180
glitches, I'd recommend checking
out the AudioWorklet API.

00:10:42.180 --> 00:10:43.770
It's available in
Chrome and supports

00:10:43.770 --> 00:10:47.610
effects in either JavaScript
or WebAssembly, actually.

00:10:47.610 --> 00:10:49.470
And because it runs
in its own thread,

00:10:49.470 --> 00:10:52.500
it doesn't cause any
glitching or any jank.

00:10:52.500 --> 00:10:55.230
And if you want to learn more
about audio with the web,

00:10:55.230 --> 00:10:57.210
check out the "Sonic
Boom Audio Programming

00:10:57.210 --> 00:10:58.775
on Android and Chrome" talk.

00:10:58.775 --> 00:11:00.150
That was given
yesterday evening.

00:11:00.150 --> 00:11:04.550
So that will definitely need
to be checked on YouTube.

00:11:04.550 --> 00:11:06.622
So those are the key
technologies, in my opinion,

00:11:06.622 --> 00:11:08.330
to get a functioning
game up and running.

00:11:08.330 --> 00:11:09.830
Are there more things
you can do with the web

00:11:09.830 --> 00:11:10.830
when it comes to games?

00:11:10.830 --> 00:11:11.330
For sure.

00:11:11.330 --> 00:11:13.490
You can have things like
the Full Screen API,

00:11:13.490 --> 00:11:16.530
or the Gamepad API, or
Gyroscope for inputs.

00:11:16.530 --> 00:11:18.655
And there's a long list.

00:11:18.655 --> 00:11:20.030
But I don't want
to just tell you

00:11:20.030 --> 00:11:21.590
that web games
can match the user

00:11:21.590 --> 00:11:24.410
experience, and the
fidelity, and the features

00:11:24.410 --> 00:11:25.310
of native games.

00:11:25.310 --> 00:11:27.960
I want to show you.

00:11:27.960 --> 00:11:30.230
So here's a quick
example of "Crossy Road."

00:11:30.230 --> 00:11:33.080
It's an excellent indie game
from a few years ago running

00:11:33.080 --> 00:11:36.166
on native mobile but also
on the web, actually.

00:11:36.166 --> 00:11:37.860
As you can see,
they're pretty similar.

00:11:37.860 --> 00:11:40.220
So, which one is which?

00:11:40.220 --> 00:11:42.290
Well, the one on the
right is the web version.

00:11:42.290 --> 00:11:45.830
There are some clues like the
navigation bar at the bottom,

00:11:45.830 --> 00:11:48.710
the branding from
the web portal, Poki.

00:11:48.710 --> 00:11:51.050
But as you can see, the
overall graphical fidelity

00:11:51.050 --> 00:11:53.840
of the two versions,
the native and the web,

00:11:53.840 --> 00:11:55.580
especially in terms
of frame rate,

00:11:55.580 --> 00:12:00.007
is basically on par
between native and web.

00:12:00.007 --> 00:12:02.340
And how successful was "Crossy
Road" in the first place?

00:12:02.340 --> 00:12:04.850
Well, on iPhone and
Android, it actually

00:12:04.850 --> 00:12:06.710
got 200 million downloads.

00:12:06.710 --> 00:12:09.230
So it was a very,
very successful game.

00:12:09.230 --> 00:12:11.270
Was it pushing the
limits of mobile devices?

00:12:11.270 --> 00:12:13.640
Did it really need
high-end graphics

00:12:13.640 --> 00:12:16.760
or Super realistic visuals,
or physics simulations

00:12:16.760 --> 00:12:18.800
to achieve those
download numbers?

00:12:18.800 --> 00:12:20.270
No, it didn't.

00:12:20.270 --> 00:12:24.560
It just needed to run well,
look good, and sound good.

00:12:24.560 --> 00:12:27.380
But actually, it also needed to
have one other thing, really.

00:12:27.380 --> 00:12:29.840
It also really needed to be fun.

00:12:29.840 --> 00:12:33.110
That's not something I've
brought up before in this talk.

00:12:33.110 --> 00:12:36.440
But it's actually the most
important things about games.

00:12:36.440 --> 00:12:37.920
It needs to be fun.

00:12:37.920 --> 00:12:39.560
So why didn't I
mentioned it earlier?

00:12:39.560 --> 00:12:41.630
Well, I didn't mention
earlier, because I

00:12:41.630 --> 00:12:44.480
think it ties in really
well to my next topic, which

00:12:44.480 --> 00:12:47.610
is how to get users.

00:12:47.610 --> 00:12:50.300
So there's an old saying that
a great product sells itself.

00:12:50.300 --> 00:12:52.700
It's sort of the foundation
of product marketing.

00:12:52.700 --> 00:12:55.680
And honestly, I think it's true.

00:12:55.680 --> 00:12:57.540
So in a funny story--

00:12:57.540 --> 00:13:00.140
in my company, while I was
running it, we made five games.

00:13:00.140 --> 00:13:03.752
And I'd like to talk about
two of them briefly today.

00:13:03.752 --> 00:13:05.210
Out of the two of
them, one of them

00:13:05.210 --> 00:13:07.310
was featured really
heavily at launch.

00:13:07.310 --> 00:13:08.810
And it got a big
burst of eyeballs

00:13:08.810 --> 00:13:10.130
looking at it when it came out.

00:13:10.130 --> 00:13:11.780
And then the other
one, it launched,

00:13:11.780 --> 00:13:15.010
but it didn't get anywhere near
the same level of featuring.

00:13:15.010 --> 00:13:17.510
So if you're wondering what I
mean by featuring, what I mean

00:13:17.510 --> 00:13:20.010
is, of course, when the mobile
platforms highlight your game

00:13:20.010 --> 00:13:20.900
on their stores.

00:13:20.900 --> 00:13:23.330
In other words, it drives a
lot of eyeballs to your game

00:13:23.330 --> 00:13:24.320
all at once.

00:13:24.320 --> 00:13:25.560
It's really awesome.

00:13:25.560 --> 00:13:26.960
It's like free marketing.

00:13:26.960 --> 00:13:30.770
And as an indie game
developer, that's gold.

00:13:30.770 --> 00:13:32.720
Now, one of those
games actually went on

00:13:32.720 --> 00:13:34.790
to become the most-financially
successful game

00:13:34.790 --> 00:13:36.650
that we ever made
by a big margin.

00:13:36.650 --> 00:13:38.985
And the other one was
the least successful.

00:13:38.985 --> 00:13:40.610
So which one do you
think made the most

00:13:40.610 --> 00:13:43.070
money, the one that got the
big spotlight of featuring

00:13:43.070 --> 00:13:44.000
at launch?

00:13:44.000 --> 00:13:47.120
Actually, no, it was
"Duet" that was the more

00:13:47.120 --> 00:13:49.550
financially successful
game-- the one on the right.

00:13:49.550 --> 00:13:52.010
And it only got basic
featuring at launch.

00:13:52.010 --> 00:13:54.350
Yet, its daily revenue was
really great from the start,

00:13:54.350 --> 00:13:55.520
and it just grew over time.

00:13:55.520 --> 00:13:56.540
And we did sales.

00:13:56.540 --> 00:13:58.310
And that sparked
things, as well.

00:13:58.310 --> 00:14:00.590
And actually, the other
game, "Time Surfer"--

00:14:00.590 --> 00:14:02.150
it plummeted in
the download ranks

00:14:02.150 --> 00:14:04.800
when it wasn't featured, while
"Duet" just sort of glided

00:14:04.800 --> 00:14:07.400
every time it got
featured or had sales.

00:14:07.400 --> 00:14:10.520
And it just had this
slow gliding effect

00:14:10.520 --> 00:14:12.830
in terms of the download ranks.

00:14:12.830 --> 00:14:14.840
The question of why--

00:14:14.840 --> 00:14:17.210
well, because "Duet" had
an interesting narrative.

00:14:17.210 --> 00:14:19.040
It had really
innovative gameplay

00:14:19.040 --> 00:14:20.560
and an excellent soundtrack.

00:14:20.560 --> 00:14:22.250
And for all of
those reasons, users

00:14:22.250 --> 00:14:24.427
really loved it, and shared
it with their friends,

00:14:24.427 --> 00:14:25.260
and talked about it.

00:14:25.260 --> 00:14:28.340
And that made it go viral.

00:14:28.340 --> 00:14:30.500
It's the same sort of
story for "Crossy Road".

00:14:30.500 --> 00:14:33.080
It's the same for all
great games that take off.

00:14:33.080 --> 00:14:35.013
They take off because
they're great.

00:14:35.013 --> 00:14:37.430
Now, I know some of you in the
audience might be thinking,

00:14:37.430 --> 00:14:40.160
but what about games
like "Flappy Bird"?

00:14:40.160 --> 00:14:41.820
That took off, and it was viral.

00:14:41.820 --> 00:14:43.558
But it wasn't great.

00:14:43.558 --> 00:14:44.600
But actually, I disagree.

00:14:44.600 --> 00:14:45.600
I completely disagree.

00:14:45.600 --> 00:14:47.820
I think "Flappy Bird"
is really great.

00:14:47.820 --> 00:14:50.400
It's so simple and
also challenging.

00:14:50.400 --> 00:14:52.820
But also, very importantly,
it's hilarious.

00:14:52.820 --> 00:14:55.483
It's actually pure comedy
gold if you think about it.

00:14:55.483 --> 00:14:57.900
Look at the face of that bird,
and tell me it's not funny.

00:14:57.900 --> 00:15:00.290
If you look at the
proportion of his duck bill

00:15:00.290 --> 00:15:02.180
to his tiny little wings--

00:15:02.180 --> 00:15:04.590
I find it just adorable.

00:15:04.590 --> 00:15:06.590
And the sound effect when
you crash in the game,

00:15:06.590 --> 00:15:08.465
it's sort of like the
sound effect of someone

00:15:08.465 --> 00:15:10.020
being punched in the face.

00:15:10.020 --> 00:15:12.740
So you've got this ridiculous
bird flying through space

00:15:12.740 --> 00:15:15.980
and encountering these green
pipes-- which is another really

00:15:15.980 --> 00:15:17.480
great video game reference.

00:15:17.480 --> 00:15:19.250
And when they smack
into it, your reward

00:15:19.250 --> 00:15:22.550
for your frustration is the
sound of like a martial arts

00:15:22.550 --> 00:15:24.080
movie sound effect.

00:15:24.080 --> 00:15:25.910
It's a combination
of just how funny

00:15:25.910 --> 00:15:27.560
and how challenging
"Flappy Bird" was

00:15:27.560 --> 00:15:31.840
that made it so interesting
for users to share it.

00:15:31.840 --> 00:15:33.410
And so, what am I
getting at here?

00:15:33.410 --> 00:15:34.440
What am I saying?

00:15:34.440 --> 00:15:36.350
I'm saying that
the best way to get

00:15:36.350 --> 00:15:38.690
users is to make something
really fun, and innovative,

00:15:38.690 --> 00:15:39.920
and interesting.

00:15:39.920 --> 00:15:42.080
And that way, it's
likely to be shared.

00:15:42.080 --> 00:15:44.833
In other words, I'm saying,
you want to make it viral.

00:15:44.833 --> 00:15:46.250
And additionally,
you want to make

00:15:46.250 --> 00:15:48.530
that sharing process,
that viral loop,

00:15:48.530 --> 00:15:50.655
to be as fast as possible.

00:15:50.655 --> 00:15:52.280
And why do I think
this is particularly

00:15:52.280 --> 00:15:54.740
important for our
talk about web games?

00:15:54.740 --> 00:15:57.270
Because that's the
cycle of the web.

00:15:57.270 --> 00:15:58.910
That's what web users expect.

00:15:58.910 --> 00:16:02.042
They expect web content
to load really fast.

00:16:02.042 --> 00:16:03.500
And good game
developers know that,

00:16:03.500 --> 00:16:05.910
to capitalize on a
particular platform,

00:16:05.910 --> 00:16:08.360
whether at a software
or hardware level,

00:16:08.360 --> 00:16:10.700
it's important to embrace
the unique characteristics

00:16:10.700 --> 00:16:11.900
of that platform.

00:16:11.900 --> 00:16:14.510
If you're building a game,
say, for a console with motion

00:16:14.510 --> 00:16:16.790
controls, you should probably
think about the best way

00:16:16.790 --> 00:16:19.890
to embrace those motion
controls in your game.

00:16:19.890 --> 00:16:22.220
So ultimately, what I'm saying
is that you must respect

00:16:22.220 --> 00:16:24.500
the expectations of the
users of the platform

00:16:24.500 --> 00:16:26.000
you're building for.

00:16:26.000 --> 00:16:29.030
And in the case of
making web games,

00:16:29.030 --> 00:16:30.440
what do you need to respect?

00:16:30.440 --> 00:16:35.770
The speed, the seamless, and
the frictionlessness of the web.

00:16:35.770 --> 00:16:39.440
And I mentioned earlier that
the URL, and that sharing loop,

00:16:39.440 --> 00:16:43.370
and everything on the web being
a tap away is really important.

00:16:43.370 --> 00:16:45.590
Well, have you heard
this stat before that,

00:16:45.590 --> 00:16:47.330
for each additional
second of load time,

00:16:47.330 --> 00:16:49.540
you lose 20% of your users?

00:16:49.540 --> 00:16:53.450
Well, users aren't going to
wait longer just because you

00:16:53.450 --> 00:16:57.200
have a web page
that's loading a game.

00:16:57.200 --> 00:16:58.700
So you need to
design your web games

00:16:58.700 --> 00:17:00.875
to load within that
sort of time frame

00:17:00.875 --> 00:17:04.910
to download the minimum viable
game that your users expect

00:17:04.910 --> 00:17:06.454
web content download within.

00:17:06.454 --> 00:17:08.329
And you want to get that
user into your game,

00:17:08.329 --> 00:17:12.990
and engaged, and hooked
as fast as possible.

00:17:12.990 --> 00:17:16.829
So let's summarize that
viral feedback loop.

00:17:16.829 --> 00:17:19.880
We want to build our game so
it loads fast and gets the user

00:17:19.880 --> 00:17:21.319
playing it really fast.

00:17:21.319 --> 00:17:23.599
And then we want to make
sure that the user is

00:17:23.599 --> 00:17:24.859
pulled in and engaged.

00:17:24.859 --> 00:17:27.859
So you want something to be
interesting and innovative.

00:17:27.859 --> 00:17:29.900
And then you want to
give the user a reason

00:17:29.900 --> 00:17:31.760
to share the game
with someone else,

00:17:31.760 --> 00:17:36.485
ideally beyond just the fact
that it's an interesting game.

00:17:36.485 --> 00:17:37.610
So, how do we make it fast?

00:17:37.610 --> 00:17:39.920
What are good examples of
games or technologies that

00:17:39.920 --> 00:17:41.930
get users into a game quickly?

00:17:44.570 --> 00:17:47.750
Well, remember I mentioned
Unity's Project Tiny HTML5

00:17:47.750 --> 00:17:49.370
runtime?

00:17:49.370 --> 00:17:51.600
So Unity is previewing
a new runtime,

00:17:51.600 --> 00:17:54.250
which provides a new modular
design for their engine.

00:17:54.250 --> 00:17:57.110
And that keeps the core
engine under 1 megabyte.

00:17:57.110 --> 00:18:00.290
This gives you the
power of Unity's editor

00:18:00.290 --> 00:18:02.520
with a much smaller file size.

00:18:02.520 --> 00:18:06.488
And additionally, C# support
is coming soon in the future.

00:18:06.488 --> 00:18:08.030
And from the tech
side, that's really

00:18:08.030 --> 00:18:10.690
an interesting example
of how to make sure

00:18:10.690 --> 00:18:11.720
our game loads quickly.

00:18:11.720 --> 00:18:14.510
You want to use tools that
ensure that the game is

00:18:14.510 --> 00:18:17.640
as small as possible.

00:18:17.640 --> 00:18:20.130
But let's also look from the
game production side, as well.

00:18:20.130 --> 00:18:22.140
What do these games
have in common?

00:18:22.140 --> 00:18:24.110
Well, they all have
interesting art styles

00:18:24.110 --> 00:18:27.800
that are visually
pleasing but actually also

00:18:27.800 --> 00:18:29.310
very simple at the same time.

00:18:29.310 --> 00:18:33.020
In other words, they're
sort of minimalist in style.

00:18:33.020 --> 00:18:34.020
And what does this mean?

00:18:34.020 --> 00:18:35.450
It means that the
overall download

00:18:35.450 --> 00:18:39.527
size of my game and the actual
content or assets that we need

00:18:39.527 --> 00:18:40.610
doesn't need to be as big.

00:18:40.610 --> 00:18:42.620
Because we're just
rendering games

00:18:42.620 --> 00:18:45.360
with an abstract or
minimalist art style.

00:18:45.360 --> 00:18:49.903
In other words, I'm saying
you can do more with less.

00:18:49.903 --> 00:18:51.570
Here's actually a
great example of that.

00:18:51.570 --> 00:18:54.380
So some of my other team members
in the Web Developer Relations

00:18:54.380 --> 00:18:56.930
team have made this
game called "Proxx."

00:18:56.930 --> 00:19:02.270
And game design wise, it's
basically like "Minesweeper."

00:19:02.270 --> 00:19:03.320
It's super lightweight.

00:19:03.320 --> 00:19:06.350
And it's less than 100 kilobytes
in total over the wire.

00:19:06.350 --> 00:19:08.090
So it really
demonstrates the fidelity

00:19:08.090 --> 00:19:11.330
and the athletically
pleasing nature of graphics

00:19:11.330 --> 00:19:13.160
that you can achieve
in a web game

00:19:13.160 --> 00:19:17.810
with just a really small
amount of file size.

00:19:17.810 --> 00:19:20.923
And what about making a game
as fast to start as possible?

00:19:20.923 --> 00:19:22.340
Let's take a look
at "Slither.io."

00:19:22.340 --> 00:19:25.950
This is a game that went
super viral on the web.

00:19:25.950 --> 00:19:27.980
And how have they
actually designed

00:19:27.980 --> 00:19:30.763
the first-time-user experience?

00:19:30.763 --> 00:19:32.180
Well, when a user
arrives, they're

00:19:32.180 --> 00:19:35.060
asked to pick a
nickname and press play.

00:19:35.060 --> 00:19:36.980
And it loads very
quickly, this login page.

00:19:36.980 --> 00:19:38.480
And then as soon
as they press play,

00:19:38.480 --> 00:19:40.820
it just throws them
straight into the game.

00:19:40.820 --> 00:19:44.870
And I would even advocate that
you can take that further.

00:19:44.870 --> 00:19:46.685
You could actually
maybe make it so that,

00:19:46.685 --> 00:19:48.060
the first time
the user arrives--

00:19:48.060 --> 00:19:49.640
and if they've never
played before--

00:19:49.640 --> 00:19:51.473
then just throw them
straight into the game.

00:19:51.473 --> 00:19:53.340
And then when they die
for the first time,

00:19:53.340 --> 00:19:56.520
then you could ask them if
they want to pick a nickname.

00:19:56.520 --> 00:19:59.088
So this is "Slither.io"
recognizing

00:19:59.088 --> 00:20:01.130
that getting the user
engaged and into their game

00:20:01.130 --> 00:20:05.430
as fast as possible
is really important.

00:20:05.430 --> 00:20:08.670
And here is an animation of
another game, "TypeShift."

00:20:08.670 --> 00:20:11.480
So this is from a game designer
and game developer, Zack Gage,

00:20:11.480 --> 00:20:12.930
based in New York.

00:20:12.930 --> 00:20:15.440
He did a talk at
GDC last year called

00:20:15.440 --> 00:20:18.860
"Designing Games That Are
Understandable at a Glance."

00:20:18.860 --> 00:20:21.110
The idea behind this
is that he advocates

00:20:21.110 --> 00:20:24.530
for designing your game so
that, visually, at a distance,

00:20:24.530 --> 00:20:26.000
it can be understood--

00:20:26.000 --> 00:20:27.800
like, what your
game is all about,

00:20:27.800 --> 00:20:29.615
what the game design
and the mechanics are.

00:20:29.615 --> 00:20:31.490
Because if you design
your game at a distance

00:20:31.490 --> 00:20:33.420
to be understandable
in that way,

00:20:33.420 --> 00:20:35.930
then it's very likely that,
when your game is being played

00:20:35.930 --> 00:20:37.850
by a player directly
in front of them,

00:20:37.850 --> 00:20:40.790
that they're going to be able
to understand it even faster.

00:20:40.790 --> 00:20:42.955
It's when the game
explains itself.

00:20:42.955 --> 00:20:44.330
And all the elements
of the game,

00:20:44.330 --> 00:20:46.100
the mechanics and
the visuals, come

00:20:46.100 --> 00:20:50.360
together so that your game
is instantly graspable.

00:20:50.360 --> 00:20:53.330
But how do we create
a compelling game,

00:20:53.330 --> 00:20:55.610
one that pulls the user
into the experience

00:20:55.610 --> 00:20:58.680
after they've loved the
interface and the mechanics?

00:20:58.680 --> 00:21:01.250
Well, here are a few thoughts.

00:21:01.250 --> 00:21:03.857
Going back to
"Crossy Road" again--

00:21:03.857 --> 00:21:05.690
I guess one way of
thinking about engagement

00:21:05.690 --> 00:21:09.480
or engaging a user is to
think about the fun factor.

00:21:09.480 --> 00:21:12.410
So in "Crossy," it has
a swipe-based game play

00:21:12.410 --> 00:21:16.115
that's sort of like an evolution
of the original "Frogger" game.

00:21:16.115 --> 00:21:17.990
But they also streamlined
it, so you can just

00:21:17.990 --> 00:21:20.990
tap the screen really easily
to progress further and just

00:21:20.990 --> 00:21:23.870
go in the straight path, which
is the most important movement

00:21:23.870 --> 00:21:25.470
you can do in the game.

00:21:25.470 --> 00:21:27.140
And then they made
it endless and then

00:21:27.140 --> 00:21:29.900
also added in this
slow-moving camera that

00:21:29.900 --> 00:21:31.140
adds a tension to the game.

00:21:31.140 --> 00:21:33.350
Because if you're too slow,
then you get left behind,

00:21:33.350 --> 00:21:33.950
and you lose.

00:21:36.600 --> 00:21:38.810
And another example
is "A Dark Room."

00:21:38.810 --> 00:21:42.050
So "A Dark Room" is a web
game that went really viral.

00:21:42.050 --> 00:21:44.480
And it starts out as
just a simple clicker

00:21:44.480 --> 00:21:46.220
genre, in which
you're just stoking

00:21:46.220 --> 00:21:48.980
this fire in a mysterious room.

00:21:48.980 --> 00:21:50.990
And while you're
stoking this fire,

00:21:50.990 --> 00:21:52.500
eventually a stranger walks in.

00:21:52.500 --> 00:21:54.170
And you speak to them.

00:21:54.170 --> 00:21:56.780
And then basically, the
game just evolves over time.

00:21:56.780 --> 00:21:59.820
You get more actions to do,
which is normal in clickers.

00:21:59.820 --> 00:22:01.100
The gameplay expands.

00:22:01.100 --> 00:22:03.290
But on top of that,
then the whole nature

00:22:03.290 --> 00:22:05.400
of the game and the game
genre changes, as well.

00:22:05.400 --> 00:22:08.060
It opens up to
have an overworld.

00:22:08.060 --> 00:22:10.640
And you're then exploring
a larger game world.

00:22:10.640 --> 00:22:12.140
And I think what's
clever about this

00:22:12.140 --> 00:22:14.420
is that it really highlights
the power of mystery

00:22:14.420 --> 00:22:15.920
that a game can have.

00:22:15.920 --> 00:22:19.400
Something as simple as just
the mysterious narrative

00:22:19.400 --> 00:22:22.590
and the thrill of not
knowing what you don't know

00:22:22.590 --> 00:22:27.080
can really pull you in
and keep you in a game.

00:22:27.080 --> 00:22:29.370
And then there's the
innovation side of things.

00:22:29.370 --> 00:22:31.400
So there's a web game
called "Black Room,"

00:22:31.400 --> 00:22:34.730
which was from a web artisan
game designer, Cassie McQuater.

00:22:34.730 --> 00:22:37.580
And it recently won the
prestigious Nuovo award

00:22:37.580 --> 00:22:40.610
at the Independent Games
Festival at GDC this year.

00:22:40.610 --> 00:22:43.370
And the Nuovo award is
specifically for innovation.

00:22:43.370 --> 00:22:46.490
And this wasn't only in the web
category or anything like that.

00:22:46.490 --> 00:22:48.740
They don't have
categories for the web.

00:22:48.740 --> 00:22:51.910
It was across all the games
that were submitted to IGF.

00:22:51.910 --> 00:22:53.810
And so the key with
"Black Room" is

00:22:53.810 --> 00:22:55.910
it's got some really
funny ideas about how

00:22:55.910 --> 00:22:58.707
to embrace specific features
of the web platform.

00:22:58.707 --> 00:23:00.290
So when you're playing
the game, there

00:23:00.290 --> 00:23:02.600
are some levels where
you need to find

00:23:02.600 --> 00:23:05.727
something that's actually not
on the screen at the moment.

00:23:05.727 --> 00:23:07.310
And so, traditionally,
you might think

00:23:07.310 --> 00:23:10.070
that you need to pan the camera
around or scroll the camera

00:23:10.070 --> 00:23:11.720
to find these objects.

00:23:11.720 --> 00:23:14.420
But actually, in "Black
Room," what you need to do

00:23:14.420 --> 00:23:18.830
is you actually resize
the browser window

00:23:18.830 --> 00:23:20.660
and reveal more of the room.

00:23:20.660 --> 00:23:25.040
So it really highlights how
you can use the unique features

00:23:25.040 --> 00:23:27.110
of the platform in
your game design

00:23:27.110 --> 00:23:31.220
such that that game could not
be achieved on other platforms.

00:23:31.220 --> 00:23:33.530
Additionally, she also
incorporated ideas

00:23:33.530 --> 00:23:37.430
like being intentionally
linked out from the game

00:23:37.430 --> 00:23:40.490
to the open web, and exploring
parts of the open web,

00:23:40.490 --> 00:23:43.722
and then needing to explore the
open web to solve puzzles back

00:23:43.722 --> 00:23:44.430
in the real game.

00:23:48.040 --> 00:23:50.560
And lastly, I mentioned
that we want to give users

00:23:50.560 --> 00:23:51.520
a reason to share.

00:23:51.520 --> 00:23:55.080
We want the URL to
be really compelling.

00:23:55.080 --> 00:23:57.080
So there's a few different
ways you can do this.

00:23:57.080 --> 00:23:59.230
You can do it in competitive,
or collaborative,

00:23:59.230 --> 00:24:02.122
or maybe exploitative ways.

00:24:02.122 --> 00:24:03.580
Here's a competitive
example, which

00:24:03.580 --> 00:24:06.430
"Shellshock" at I/O. It's
an arena first-person

00:24:06.430 --> 00:24:09.880
shooter, similar to "Quake"
or something like that.

00:24:09.880 --> 00:24:11.860
So it's a competitive
multiplayer game.

00:24:11.860 --> 00:24:15.130
And using URLs, you can deep
link another player into a room

00:24:15.130 --> 00:24:16.330
to compete with you.

00:24:16.330 --> 00:24:19.750
So whenever you create a
room in the game to play,

00:24:19.750 --> 00:24:21.460
it generates a
URL that's unique.

00:24:24.620 --> 00:24:27.948
And so then there are all other
kinds of examples you could do.

00:24:27.948 --> 00:24:29.240
Think of all the possibilities.

00:24:29.240 --> 00:24:32.450
You could create a game
where you have the ability

00:24:32.450 --> 00:24:34.430
to create a puzzle
or a level in a game,

00:24:34.430 --> 00:24:37.910
and then that URL is
playable link to that level.

00:24:37.910 --> 00:24:40.490
Or you could speed
run a game or a level,

00:24:40.490 --> 00:24:42.410
and then have a player
ghost or a player

00:24:42.410 --> 00:24:43.898
trail that is left behind.

00:24:43.898 --> 00:24:46.190
Or you could challenge other
people to beat your score,

00:24:46.190 --> 00:24:48.260
to beat your ghost.

00:24:48.260 --> 00:24:49.760
Or you could have
a game that's like

00:24:49.760 --> 00:24:52.670
a big, open, rogue-like
style game with a really

00:24:52.670 --> 00:24:55.130
large, huge, open world.

00:24:55.130 --> 00:24:57.590
And you explore different
rooms, but you're

00:24:57.590 --> 00:25:01.070
able to copy and paste the URL
of the current room you're in

00:25:01.070 --> 00:25:03.230
and share it with a
friend to teleport them

00:25:03.230 --> 00:25:06.493
into that part of
the game world.

00:25:06.493 --> 00:25:07.910
So here's a little
game I actually

00:25:07.910 --> 00:25:09.680
made called "Space Board."

00:25:09.680 --> 00:25:12.382
And I built it using Construct,
which I mentioned earlier.

00:25:12.382 --> 00:25:14.090
And I made it actually
in less than a day

00:25:14.090 --> 00:25:16.430
to just see how fast
Construct on the web

00:25:16.430 --> 00:25:18.750
could be as a game
development platform.

00:25:18.750 --> 00:25:20.900
But not only that,
I designed the game

00:25:20.900 --> 00:25:24.175
to demonstrate how URLs can be
used to transmit data, as well.

00:25:24.175 --> 00:25:26.643
And so I put a little
level editor into the game.

00:25:26.643 --> 00:25:28.310
And when you play the
game, you can then

00:25:28.310 --> 00:25:30.480
send a link to your level.

00:25:30.480 --> 00:25:33.740
And all of the game
data of the actual level

00:25:33.740 --> 00:25:35.450
is transmitting that URL.

00:25:35.450 --> 00:25:39.230
It's hard to see that
full URL in the browser.

00:25:39.230 --> 00:25:42.680
But it's literally representing
each of the tiles of the game

00:25:42.680 --> 00:25:45.500
as characters in the URL.

00:25:45.500 --> 00:25:47.660
So if you try that
out, you can play it

00:25:47.660 --> 00:25:49.670
on either desktop on mobile.

00:25:49.670 --> 00:25:51.330
But why am I also
showing a QR code?

00:25:51.330 --> 00:25:53.955
Because QR codes also are URLs.

00:25:53.955 --> 00:25:56.330
And so I think that can be a
really interesting marketing

00:25:56.330 --> 00:25:59.030
tool for promoting content
in the physical world.

00:25:59.030 --> 00:26:02.570
If you access the
URL in this QR code,

00:26:02.570 --> 00:26:05.510
it's another level I
generated or created.

00:26:05.510 --> 00:26:08.090
And it's actually a
lot more challenging.

00:26:08.090 --> 00:26:09.310
It has a lot of enemies.

00:26:09.310 --> 00:26:11.915
So you can have some
fun trying out that one.

00:26:11.915 --> 00:26:13.790
But you could also
imagine that "Space Board"

00:26:13.790 --> 00:26:17.810
itself could generate
QR codes of levels

00:26:17.810 --> 00:26:19.380
right there on
the mobile device.

00:26:19.380 --> 00:26:21.920
And then other users
could scan the QR code

00:26:21.920 --> 00:26:23.990
and share it in
person, not just as

00:26:23.990 --> 00:26:29.830
links that are shared in chat
apps or anything like that.

00:26:29.830 --> 00:26:33.300
But once you've got users,
what are the best practices

00:26:33.300 --> 00:26:36.510
for monetizing them on the web?

00:26:36.510 --> 00:26:39.990
Well, the landscape has
been changing gradually.

00:26:39.990 --> 00:26:41.940
Banners are still a
form of web advertising

00:26:41.940 --> 00:26:44.370
that's really important
for web games.

00:26:44.370 --> 00:26:47.220
For example, Agar.io,
their web version

00:26:47.220 --> 00:26:51.450
shows a banner every time the
game loads or the player dies.

00:26:51.450 --> 00:26:53.190
But we also have
more modern forms

00:26:53.190 --> 00:26:55.930
of advertising now on the
web, like video interstitials.

00:26:55.930 --> 00:26:58.320
And several companies,
including Google,

00:26:58.320 --> 00:26:59.910
have solutions for
inserting videos

00:26:59.910 --> 00:27:01.583
in the middle of your web games.

00:27:01.583 --> 00:27:03.000
And ideally, you
should experiment

00:27:03.000 --> 00:27:08.100
with how frequently you show
these ads to your users.

00:27:08.100 --> 00:27:09.540
And meanwhile,
some companies have

00:27:09.540 --> 00:27:11.832
experimented with the rewarded
video ads and web games,

00:27:11.832 --> 00:27:12.490
as well.

00:27:12.490 --> 00:27:14.880
If you aren't familiar
with rewarded ads,

00:27:14.880 --> 00:27:17.820
it's a very popular ad format
that native mobile games have

00:27:17.820 --> 00:27:19.440
adopted in the last few years.

00:27:22.410 --> 00:27:25.110
Say, you're playing a
game, and maybe there's

00:27:25.110 --> 00:27:26.850
a currency in that game.

00:27:26.850 --> 00:27:28.908
What you would do,
as a game developer,

00:27:28.908 --> 00:27:31.200
if you want to display reward
ads, is you would make it

00:27:31.200 --> 00:27:34.620
so that you can watch a
rewarded ad to then get more

00:27:34.620 --> 00:27:36.550
of the currency in your game.

00:27:36.550 --> 00:27:39.690
And so that's why we
call it rewarded ads.

00:27:39.690 --> 00:27:42.870
Because when you
watch this video ad

00:27:42.870 --> 00:27:45.150
by choice instead
of having it pop in

00:27:45.150 --> 00:27:47.730
for you like an
interstitial, by opting in,

00:27:47.730 --> 00:27:49.872
you're getting a reward
as part of that process.

00:27:52.230 --> 00:27:53.855
And when it comes to
microtransactions,

00:27:53.855 --> 00:27:56.550
there are quite a few
different options now, as well.

00:27:56.550 --> 00:27:58.940
So Google Pay, of course,
is a JavaScript library

00:27:58.940 --> 00:28:00.620
which gives you
access the credit card

00:28:00.620 --> 00:28:03.900
details that are stored in
the user's Google account.

00:28:03.900 --> 00:28:05.510
But also, Chrome
supports the Payment

00:28:05.510 --> 00:28:08.862
Request API, which is a
open web platform feature.

00:28:08.862 --> 00:28:10.820
And this streamlines the
payment flow, as well,

00:28:10.820 --> 00:28:13.130
by making it easier
or quicker to access

00:28:13.130 --> 00:28:15.830
the credit card
details of your users,

00:28:15.830 --> 00:28:17.630
say, stored in the browser.

00:28:17.630 --> 00:28:21.440
But also, on a native
platform like Android,

00:28:21.440 --> 00:28:23.180
using Payment
Request, it actually

00:28:23.180 --> 00:28:25.700
will access the
credit card details

00:28:25.700 --> 00:28:28.560
that are stored in
Android Pay, as well.

00:28:28.560 --> 00:28:30.990
So those are two ways of
quickly getting the credit card

00:28:30.990 --> 00:28:31.490
details.

00:28:31.490 --> 00:28:34.040
But it doesn't really help you
with the payment processing

00:28:34.040 --> 00:28:35.150
and payment back ends.

00:28:35.150 --> 00:28:38.810
But nowadays, there are
a lot of companies that

00:28:38.810 --> 00:28:40.190
are operating in this space.

00:28:40.190 --> 00:28:42.890
And it's really
never been easier

00:28:42.890 --> 00:28:49.650
to set up a payment back end for
processing microtransactions.

00:28:49.650 --> 00:28:51.742
And what about web
portals, as well?

00:28:51.742 --> 00:28:52.950
Well, remember "Crossy Road"?

00:28:52.950 --> 00:28:54.090
I mentioned it earlier.

00:28:54.090 --> 00:28:56.140
They published
their game via Poki.

00:28:56.140 --> 00:29:00.240
And Poki is a web portal which
has quite a few different games

00:29:00.240 --> 00:29:02.190
available.

00:29:02.190 --> 00:29:04.150
Another example is
the "Subway Surfers,"

00:29:04.150 --> 00:29:07.240
which has come out recently
on poki.com, as well.

00:29:07.240 --> 00:29:09.000
And I guess what I'm
getting across here

00:29:09.000 --> 00:29:11.490
is that you should recognize
that web portals can probably

00:29:11.490 --> 00:29:13.763
assist you in monetization
best practices

00:29:13.763 --> 00:29:15.180
and help you with
that user reach.

00:29:15.180 --> 00:29:18.130
Because they have their own
discovery ecosystems of users,

00:29:18.130 --> 00:29:18.630
as well.

00:29:21.492 --> 00:29:23.950
But also, let's think from a
totally different perspective,

00:29:23.950 --> 00:29:24.880
as well.

00:29:24.880 --> 00:29:27.790
Even if you've already
launched a game--

00:29:27.790 --> 00:29:29.020
say, a native game--

00:29:29.020 --> 00:29:31.240
on a mobile platform, have
you actually considered

00:29:31.240 --> 00:29:33.370
whether all your
potential users who

00:29:33.370 --> 00:29:36.080
are interested in your
brand are finding your game?

00:29:36.080 --> 00:29:38.920
Or are they perhaps searching
for your game on the web

00:29:38.920 --> 00:29:42.100
and finding web alternatives
built by other companies?

00:29:42.100 --> 00:29:45.370
Game design isn't patentable
nor is it a copyrightable.

00:29:45.370 --> 00:29:47.170
So it's important to
ensure you have parity

00:29:47.170 --> 00:29:50.140
with your competitors
and your offerings.

00:29:50.140 --> 00:29:51.710
If your game is
hugely successful,

00:29:51.710 --> 00:29:53.793
you should consider whether
you are losing traffic

00:29:53.793 --> 00:29:56.240
to other websites, which
may be ripping off your game

00:29:56.240 --> 00:29:58.617
and leveraging your product's
name on search engines.

00:29:58.617 --> 00:30:00.700
And if you do build a web
version of your existing

00:30:00.700 --> 00:30:03.910
native game, it doesn't have
to be the full experience.

00:30:03.910 --> 00:30:05.890
It can just be a
taste of the gameplay.

00:30:05.890 --> 00:30:08.350
And then up-sell the
user to your native app

00:30:08.350 --> 00:30:10.190
for stronger monetization.

00:30:10.190 --> 00:30:14.633
So you can think of it as like
a teaser trailer for your game.

00:30:14.633 --> 00:30:16.300
And on that topic,
if you weren't aware,

00:30:16.300 --> 00:30:18.580
playable ads are
a growing source

00:30:18.580 --> 00:30:20.770
of advertising that,
as an ad buyer,

00:30:20.770 --> 00:30:22.760
you might want to
support, as well.

00:30:22.760 --> 00:30:24.310
So these playable
ad networks need

00:30:24.310 --> 00:30:26.320
to be cross-platform
on Android and iOS.

00:30:26.320 --> 00:30:29.770
And so they actually leverage
HTML5 as a portable content

00:30:29.770 --> 00:30:30.900
format.

00:30:30.900 --> 00:30:33.160
And these ad units are known
to have higher conversion

00:30:33.160 --> 00:30:36.072
rates compared to other ad
formats when you acquire users.

00:30:36.072 --> 00:30:37.780
And they increase the
day seven retention

00:30:37.780 --> 00:30:41.270
of the users you acquire
versus other formats.

00:30:41.270 --> 00:30:46.390
So what I'm saying here is
that, if you're already building

00:30:46.390 --> 00:30:50.740
a playable ad and
it's an HTML5 game,

00:30:50.740 --> 00:30:53.050
then why don't you
leverage that advert,

00:30:53.050 --> 00:30:54.748
and also place in
on the open web,

00:30:54.748 --> 00:30:57.040
and direct users to your
native game from the open web?

00:31:00.720 --> 00:31:04.200
Another interesting element
that's appeared recently

00:31:04.200 --> 00:31:05.500
is Trusted Web Activities.

00:31:05.500 --> 00:31:07.230
So this is sort of
like the best way

00:31:07.230 --> 00:31:11.220
to deploy a website as an
Android app on Google Play.

00:31:11.220 --> 00:31:13.530
It's similar to Cordoba,
but it doesn't package

00:31:13.530 --> 00:31:15.330
the resources inside the APK.

00:31:15.330 --> 00:31:17.340
They're fetched
from your server.

00:31:17.340 --> 00:31:19.800
And Trusted Web Activities--
one of the cool features

00:31:19.800 --> 00:31:22.500
is that it shares
cookies, and local data,

00:31:22.500 --> 00:31:25.140
and IndexedDB, or
anything you can

00:31:25.140 --> 00:31:27.900
think of between the
native and the web versions

00:31:27.900 --> 00:31:30.870
of your app or your game.

00:31:30.870 --> 00:31:33.030
And so, with Google
Play, you can actually

00:31:33.030 --> 00:31:34.920
pull off Google Play
billing transactions

00:31:34.920 --> 00:31:36.600
via Android Intents.

00:31:36.600 --> 00:31:39.610
The only downside is that, when
you come back to the web app

00:31:39.610 --> 00:31:43.800
after the transaction, it
refreshes the web page.

00:31:43.800 --> 00:31:45.860
And technically, a
Trusted Web Activity

00:31:45.860 --> 00:31:48.600
is slightly faster than web
view, as it avoids some Android

00:31:48.600 --> 00:31:49.920
rendering overheads, as well.

00:31:53.830 --> 00:31:55.370
So just with these
last few minutes,

00:31:55.370 --> 00:31:58.960
I'd like to talk about
some of my thoughts

00:31:58.960 --> 00:32:03.750
on the future of the
web games ecosystem.

00:32:03.750 --> 00:32:06.380
Because it's not just web games
that are powered with HTML5

00:32:06.380 --> 00:32:07.310
nowadays.

00:32:07.310 --> 00:32:09.070
There are a growing
number of ecosystems

00:32:09.070 --> 00:32:11.910
which leverage HTML5
as a portable content

00:32:11.910 --> 00:32:13.440
format for games.

00:32:13.440 --> 00:32:16.140
Typically, these ecosystems
live in messaging platforms

00:32:16.140 --> 00:32:18.390
or other walled gardens.

00:32:18.390 --> 00:32:19.950
So I think it's
really interesting.

00:32:19.950 --> 00:32:21.367
And I think we
should look at what

00:32:21.367 --> 00:32:25.140
ideas we can borrow
from these ecosystems.

00:32:25.140 --> 00:32:28.860
Maybe we could define a portable
content format specification

00:32:28.860 --> 00:32:31.470
for HTML5 similar to Flash.

00:32:31.470 --> 00:32:33.840
Maybe we could use
the new web packaging

00:32:33.840 --> 00:32:36.480
standard that's in development
to distribute these games, as

00:32:36.480 --> 00:32:38.240
well.

00:32:38.240 --> 00:32:41.040
And maybe we could have
more consistent monetization

00:32:41.040 --> 00:32:45.390
options, as well, to
increase the users' trusts.

00:32:45.390 --> 00:32:48.150
Additionally, we could
have new metadata formats

00:32:48.150 --> 00:32:49.260
for discoverability.

00:32:49.260 --> 00:32:52.860
Like, you declare the
genre of your game,

00:32:52.860 --> 00:32:55.890
or you could declare what inputs
are necessary for your game

00:32:55.890 --> 00:32:57.850
to be played.

00:32:57.850 --> 00:33:00.090
So I think, as an
industry and a community,

00:33:00.090 --> 00:33:03.390
there's a lot that we can do
to reignite the web game's

00:33:03.390 --> 00:33:06.110
ecosystem.

00:33:06.110 --> 00:33:08.530
So if you're a game developer,
an engine developer, an ad

00:33:08.530 --> 00:33:10.812
network, or a digital
payments platform,

00:33:10.812 --> 00:33:11.770
please reach out to me.

00:33:11.770 --> 00:33:14.260
I want to learn more about
what you think the web game's

00:33:14.260 --> 00:33:16.450
ecosystem needs to
succeed and what

00:33:16.450 --> 00:33:18.610
Chrome and Google can do
to enable and stimulate

00:33:18.610 --> 00:33:21.167
this ecosystem.

00:33:21.167 --> 00:33:22.750
I hope you found
this talk interesting

00:33:22.750 --> 00:33:26.290
and that I've challenged some of
your assumptions about the web.

00:33:26.290 --> 00:33:28.690
We have a few demos in
the Web Game Sandbox.

00:33:28.690 --> 00:33:31.222
So please come by,
and say hi tomorrow.

00:33:31.222 --> 00:33:31.930
Thanks very much.

00:33:31.930 --> 00:33:34.680
[MUSIC PLAYING]

