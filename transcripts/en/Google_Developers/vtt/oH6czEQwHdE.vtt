WEBVTT
Kind: captions
Language: en

00:00:01.042 --> 00:00:04.980
SPEAKER: So you guys have
heard the word "Dart Dev

00:00:04.980 --> 00:00:07.530
Compiler," or DDC.

00:00:07.530 --> 00:00:09.470
What is it?

00:00:09.470 --> 00:00:11.660
We talked about it a
little bit last year,

00:00:11.660 --> 00:00:13.710
at last year's summit.

00:00:13.710 --> 00:00:16.390
It is a new Dart to
JavaScript compiler.

00:00:16.390 --> 00:00:19.075
It is not intended
to replace Dart2JS,

00:00:19.075 --> 00:00:21.690
but to be a complement to it.

00:00:21.690 --> 00:00:24.700
DDC is very much
focused on development

00:00:24.700 --> 00:00:26.160
on [INAUDIBLE] browsers.

00:00:26.160 --> 00:00:28.270
And in fact, one of
the first questions

00:00:28.270 --> 00:00:31.860
we asked when we started
DDC is, what would it

00:00:31.860 --> 00:00:36.230
take to provide a Dartium-like
experience in regular Chrome?

00:00:36.230 --> 00:00:39.180
What would it take
to let developers

00:00:39.180 --> 00:00:40.860
have that same sort
of fast iteration

00:00:40.860 --> 00:00:44.230
experience on regular Chrome?

00:00:44.230 --> 00:00:46.360
And how can they take
advantage, for example,

00:00:46.360 --> 00:00:48.450
of the browser
developer tools the way

00:00:48.450 --> 00:00:49.990
we've added hooks into Dartium?

00:00:52.660 --> 00:00:55.960
We're also very much
interested in providing

00:00:55.960 --> 00:00:58.990
a very strong error checking
experience as part of DDC.

00:00:58.990 --> 00:01:01.470
Leif talked about this quite
a bit in the last talk.

00:01:01.470 --> 00:01:04.870
Strong Mode and DDC
are very integrated

00:01:04.870 --> 00:01:08.200
to provide a nice,
static plus runtime

00:01:08.200 --> 00:01:09.330
error checking experience.

00:01:09.330 --> 00:01:11.790
It's very important when
you're developing code.

00:01:11.790 --> 00:01:13.504
We also want to
support other browsers.

00:01:13.504 --> 00:01:14.920
That's what we can
do by compiling

00:01:14.920 --> 00:01:16.330
to JavaScript quickly.

00:01:16.330 --> 00:01:18.520
And we have support for
things like Source Maps.

00:01:18.520 --> 00:01:20.450
But we also want to
make it possible to drop

00:01:20.450 --> 00:01:23.230
into JavaScript and see
readable, developable

00:01:23.230 --> 00:01:26.190
JavaScript for people who
need to go down to that level.

00:01:26.190 --> 00:01:28.420
And then finally, a theme
I'll hit on a little bit

00:01:28.420 --> 00:01:32.360
later is we also want to make
it very easy to integrate

00:01:32.360 --> 00:01:34.500
into any kind of
standard build tool,

00:01:34.500 --> 00:01:36.920
whether it be our own
internal tools at Google

00:01:36.920 --> 00:01:38.220
or any other tools.

00:01:38.220 --> 00:01:43.254
And I'll have a demo that
talks a little bit about that.

00:01:43.254 --> 00:01:44.670
Development's been
our main theme.

00:01:44.670 --> 00:01:47.570
But kind of a secondary
theme that will come through

00:01:47.570 --> 00:01:50.670
is that DDC is a platform for
JavaScript interoperability.

00:01:50.670 --> 00:01:52.900
This dovetails actually
quite a bit with our goals

00:01:52.900 --> 00:01:54.600
for development.

00:01:54.600 --> 00:01:57.375
We want to be able to generate
readable JavaScript code.

00:01:57.375 --> 00:01:59.375
And what we really try
to do as much as possible

00:01:59.375 --> 00:02:02.680
is just target idiomatic
ECMAScript 6 code.

00:02:02.680 --> 00:02:05.690
So Dart classes map
to JavaScript classes,

00:02:05.690 --> 00:02:07.695
Dart methods map to
JavaScript methods,

00:02:07.695 --> 00:02:09.570
properties to properties,
getters and setters

00:02:09.570 --> 00:02:13.920
to getters and setters
with minimal name mangling.

00:02:13.920 --> 00:02:16.160
Another part of this is
also to actually take

00:02:16.160 --> 00:02:17.980
advantage of JavaScript
module frameworks,

00:02:17.980 --> 00:02:21.540
so to map Dart modules
into standard JavaScript

00:02:21.540 --> 00:02:25.490
modules such as Node or AND
or the forthcoming ES6 module

00:02:25.490 --> 00:02:29.480
system and play well with those.

00:02:29.480 --> 00:02:31.260
Leif talked a little
bit about soundness.

00:02:31.260 --> 00:02:33.830
And soundness ties
in a lot to DDC.

00:02:33.830 --> 00:02:36.510
And I want talk a little bit
about that before I go on.

00:02:36.510 --> 00:02:40.270
Standard Dart is intentionally
unsound by design.

00:02:40.270 --> 00:02:42.930
And this is a bit of a pop
quiz to see if you were paying

00:02:42.930 --> 00:02:44.970
attention to Leif's talk.

00:02:44.970 --> 00:02:49.710
If I have a list of numbers and
I add the first two elements

00:02:49.710 --> 00:02:53.240
together, what can happen?

00:02:53.240 --> 00:02:54.982
Anybody, it's a pop quiz.

00:02:54.982 --> 00:02:57.230
AUDIENCE: Anything.

00:02:57.230 --> 00:02:58.492
AUDIENCE: Don't know.

00:02:58.492 --> 00:03:00.450
SPEAKER: Absolutely
anything is probably right.

00:03:00.450 --> 00:03:02.664
A developer would
reasonably think, OK, well

00:03:02.664 --> 00:03:04.330
it could throw a null
pointer exception.

00:03:04.330 --> 00:03:05.180
List could be null.

00:03:05.180 --> 00:03:06.030
That's true.

00:03:06.030 --> 00:03:09.080
It could throw an array
out of bounds exception.

00:03:09.080 --> 00:03:11.071
The list might not
have two elements.

00:03:11.071 --> 00:03:13.070
You kind of think or hope
that most of the time,

00:03:13.070 --> 00:03:14.680
it would print a number.

00:03:14.680 --> 00:03:17.360
But it could be anything.

00:03:17.360 --> 00:03:19.510
This is legal Dart code.

00:03:19.510 --> 00:03:21.110
And interestingly,
you won't get,

00:03:21.110 --> 00:03:24.829
in standard Dart, any static
errors or runtime failures,

00:03:24.829 --> 00:03:26.370
even if you're
running in check mode.

00:03:26.370 --> 00:03:28.000
You can pass in strings.

00:03:28.000 --> 00:03:32.410
You can even pass in cats,
as you saw, or anything else.

00:03:32.410 --> 00:03:33.674
So that makes it challenging.

00:03:33.674 --> 00:03:35.090
There's an interesting
implication

00:03:35.090 --> 00:03:37.570
to this for those of
us who are actually

00:03:37.570 --> 00:03:39.210
developing tools or
writing compilers,

00:03:39.210 --> 00:03:40.260
or even for developers
who are trying

00:03:40.260 --> 00:03:41.301
to reason about the code.

00:03:41.301 --> 00:03:43.860
And that's that we can't
really use those static type

00:03:43.860 --> 00:03:46.020
annotations, or we
couldn't before.

00:03:46.020 --> 00:03:49.280
The static type of that
expression adding the two lists

00:03:49.280 --> 00:03:50.990
is num.

00:03:50.990 --> 00:03:53.240
But the compiler can't
assume that that's

00:03:53.240 --> 00:03:55.020
a numeric operation.

00:03:55.020 --> 00:03:58.640
We can't just generate
standard JavaScript plus if we

00:03:58.640 --> 00:04:00.640
are generating code from that.

00:04:00.640 --> 00:04:01.870
It could be anything.

00:04:01.870 --> 00:04:03.346
Dart has operator overloading.

00:04:03.346 --> 00:04:05.470
So even though it's plus
and would work for string,

00:04:05.470 --> 00:04:06.591
it wouldn't work for cat.

00:04:06.591 --> 00:04:08.590
I'm not sure exactly how
you would add two cats,

00:04:08.590 --> 00:04:12.120
but those things can
happen, I suppose.

00:04:12.120 --> 00:04:15.390
So what many people are a
little bit surprised about

00:04:15.390 --> 00:04:18.959
is that Dart2JS doesn't
really use static types

00:04:18.959 --> 00:04:20.310
to generate code.

00:04:20.310 --> 00:04:22.360
It actually drops
the type information

00:04:22.360 --> 00:04:28.060
and recovers it all
in a more sound way.

00:04:28.060 --> 00:04:30.060
But it's not using
the static types

00:04:30.060 --> 00:04:32.710
that you, as a
programmer, write.

00:04:32.710 --> 00:04:34.130
This isn't actually
that unusual.

00:04:34.130 --> 00:04:37.062
In fact, pretty much
every common typed

00:04:37.062 --> 00:04:39.020
JavaScript variant, and
there's a bunch of them

00:04:39.020 --> 00:04:40.850
now, are also unsound.

00:04:40.850 --> 00:04:43.760
So here's effectively the
same example in TypeScript,

00:04:43.760 --> 00:04:46.010
no static errors or warnings.

00:04:46.010 --> 00:04:47.092
Prints hello world.

00:04:47.092 --> 00:04:48.800
I have a list of
numbers here at the top.

00:04:48.800 --> 00:04:50.500
I can just populate
that with strings.

00:04:50.500 --> 00:04:54.430
I'm not going to get an error
or warning in TypeScript.

00:04:54.430 --> 00:04:56.420
Of course, in TypeScript,
code generation

00:04:56.420 --> 00:04:57.700
is just type erasure.

00:04:57.700 --> 00:05:01.200
So you have that number
annotation there.

00:05:01.200 --> 00:05:02.750
All we have to do
is get rid of it.

00:05:02.750 --> 00:05:03.630
That's fine.

00:05:03.630 --> 00:05:07.060
TypeScript types by design
aren't intended for compilers

00:05:07.060 --> 00:05:08.030
to use.

00:05:08.030 --> 00:05:09.530
I don't think any
tools actually try

00:05:09.530 --> 00:05:13.400
to use them to do
optimization, for example.

00:05:13.400 --> 00:05:15.737
Dart is not JavaScript.

00:05:15.737 --> 00:05:16.570
That's a good thing.

00:05:16.570 --> 00:05:19.570
I think you guys wouldn't
be here if it was.

00:05:19.570 --> 00:05:22.540
But we often get this
question about compilation.

00:05:22.540 --> 00:05:25.660
So let's take this
fragment of Dart code here.

00:05:25.660 --> 00:05:28.810
Why can't we just translate
that to the same JavaScript?

00:05:28.810 --> 00:05:32.670
That fragment is conveniently
legal JavaScript and Dart.

00:05:32.670 --> 00:05:34.280
Why is that different?

00:05:34.280 --> 00:05:36.490
Well, the semantics
are different.

00:05:36.490 --> 00:05:40.300
And I hope you'll agree with
me that this is a good thing.

00:05:40.300 --> 00:05:42.200
And just to go into
detail a little bit

00:05:42.200 --> 00:05:48.090
here, if a doesn't happen to
have a bar field here, in Dart,

00:05:48.090 --> 00:05:50.150
you're just going
to get an error.

00:05:50.150 --> 00:05:53.050
In JavaScript, well,
we'll just throw undefined

00:05:53.050 --> 00:05:54.420
and keep trucking along.

00:05:54.420 --> 00:05:57.500
And who knows what's
going to happen, right?

00:05:57.500 --> 00:05:58.640
Same thing with methods.

00:05:58.640 --> 00:06:04.040
If we pass in too few or too
many in Dart, you get an error.

00:06:04.040 --> 00:06:06.720
In JavaScript, they
just figure out some way

00:06:06.720 --> 00:06:08.180
to keep trucking along.

00:06:11.250 --> 00:06:14.650
So again, we think this is a
really good thing about Dart.

00:06:14.650 --> 00:06:16.880
We certainly don't
want to change that.

00:06:16.880 --> 00:06:18.650
Dart has fail-fast semantics.

00:06:18.650 --> 00:06:20.710
You don't want to
just keep trucking.

00:06:20.710 --> 00:06:22.830
If you're writing
serious applications,

00:06:22.830 --> 00:06:25.520
we believe undefined
behavior is bad.

00:06:25.520 --> 00:06:28.020
And you want, as a developer,
to know about these errors

00:06:28.020 --> 00:06:29.000
as soon as possible.

00:06:29.000 --> 00:06:30.590
And even if you
ship the code out,

00:06:30.590 --> 00:06:32.870
you don't really want
undefined behavior

00:06:32.870 --> 00:06:35.820
happening in your applications.

00:06:35.820 --> 00:06:38.200
This does come at
a cost, though.

00:06:38.200 --> 00:06:44.360
So if you take that bit
of Dart, what Dart2JS

00:06:44.360 --> 00:06:46.400
does in the general
case is to generate

00:06:46.400 --> 00:06:47.760
something that looks like this.

00:06:47.760 --> 00:06:50.130
And these interceptor
objects are basically

00:06:50.130 --> 00:06:53.329
what's doing the
dispatch in Dart2JS

00:06:53.329 --> 00:06:54.870
to make sure the
right things happen.

00:06:54.870 --> 00:06:56.330
So if you look at
generated code,

00:06:56.330 --> 00:06:58.070
sometimes you might
see these things.

00:06:58.070 --> 00:07:02.120
Now, Dart2JS is an aggressive,
whole program optimizing

00:07:02.120 --> 00:07:02.900
compiler.

00:07:02.900 --> 00:07:05.360
And a lot of times,
it's able to get rid

00:07:05.360 --> 00:07:06.790
of a lot of this overhead.

00:07:06.790 --> 00:07:09.434
But what you get at the end
might be pretty efficient,

00:07:09.434 --> 00:07:11.600
but might not look a lot
like what you started with.

00:07:11.600 --> 00:07:13.433
And it takes quite a
bit of time to do that.

00:07:15.780 --> 00:07:18.920
So DDC is very much
tied to strong mode

00:07:18.920 --> 00:07:21.860
to be able to generate
reasonably nice code very

00:07:21.860 --> 00:07:22.370
quickly.

00:07:22.370 --> 00:07:23.800
And we take
advantage of the fact

00:07:23.800 --> 00:07:27.300
that we can now trust with
strong mode the type checks.

00:07:27.300 --> 00:07:29.000
So if this little
snippet of code

00:07:29.000 --> 00:07:31.590
here now type checks in
strong mode and a and b

00:07:31.590 --> 00:07:34.340
are statically typed,
then we, at compile time,

00:07:34.340 --> 00:07:38.570
know that a.bar can't throw
a no such method exception,

00:07:38.570 --> 00:07:40.665
and b.foo can't either.

00:07:40.665 --> 00:07:43.040
And that means that we can
actually generate more or less

00:07:43.040 --> 00:07:45.350
the same JavaScript code.

00:07:45.350 --> 00:07:48.300
So the JavaScript you get
out looks a lot like the Dart

00:07:48.300 --> 00:07:49.450
that you get in.

00:07:49.450 --> 00:07:52.190
So safety is basically-- you
get a lot of the same safety

00:07:52.190 --> 00:07:52.690
properties.

00:07:52.690 --> 00:07:55.192
But most of them are
actually enforced statically.

00:07:55.192 --> 00:07:57.150
As Leif said, not all of
them, but most of them

00:07:57.150 --> 00:07:58.760
are actually
enforced statically.

00:07:58.760 --> 00:08:01.370
And DDC can generate code
that takes advantage of that.

00:08:01.370 --> 00:08:03.750
Implication, of course, is
that DDC requires strong mode,

00:08:03.750 --> 00:08:07.450
but that's what you're getting
out of it, just to be clear.

00:08:07.450 --> 00:08:10.890
So type checking is one
aspect of modularity.

00:08:10.890 --> 00:08:15.170
We're rethinking a lot of the
build system here with DDC.

00:08:15.170 --> 00:08:17.090
We can modularly
type check things.

00:08:17.090 --> 00:08:19.260
That means that we can do
the type checking locally

00:08:19.260 --> 00:08:22.570
on a module without
having the entire program.

00:08:22.570 --> 00:08:25.730
If the module type checks, we
can do modular type-driven code

00:08:25.730 --> 00:08:26.230
generation.

00:08:26.230 --> 00:08:27.563
We don't need the whole program.

00:08:27.563 --> 00:08:30.810
We can use the types there
to generate nice code.

00:08:30.810 --> 00:08:33.039
That lets us plug into
modular build systems,

00:08:33.039 --> 00:08:35.650
whether you're old school
and like to use make files,

00:08:35.650 --> 00:08:38.326
or you want to use something
as advanced as Bazel, which

00:08:38.326 --> 00:08:39.909
is Google's build
system, and there'll

00:08:39.909 --> 00:08:41.909
be a talk on that
tomorrow, and I'll talk

00:08:41.909 --> 00:08:43.940
a little bit about that later.

00:08:43.940 --> 00:08:46.610
You can also generate modules,
JavaScript modules for example,

00:08:46.610 --> 00:08:49.570
and play nicely with deployment
tools that are out there,

00:08:49.570 --> 00:08:51.130
like Webpack.

00:08:51.130 --> 00:08:52.920
We just generate modules.

00:08:52.920 --> 00:08:55.740
Webpack can consume them.

00:08:55.740 --> 00:08:57.100
So I'll show you the demo.

00:08:57.100 --> 00:09:00.860
And this is going to be based
on the Captain's Log app

00:09:00.860 --> 00:09:03.860
from yesterday's
code lab using DDC.

00:09:03.860 --> 00:09:07.694
Who did that code lab, just
a show of hands quickly?

00:09:07.694 --> 00:09:09.360
Yeah, several of you
managed to do that.

00:09:09.360 --> 00:09:10.500
Great.

00:09:10.500 --> 00:09:14.010
Yesterday's code lab was
showing DDC working with Bazel,

00:09:14.010 --> 00:09:15.260
which is our new build system.

00:09:15.260 --> 00:09:17.700
And you'll learn more
about that tomorrow.

00:09:17.700 --> 00:09:19.460
And I'll talk a little
about that later.

00:09:19.460 --> 00:09:21.660
But I have a
different variant here

00:09:21.660 --> 00:09:24.960
that works with Node
modules and Webpack,

00:09:24.960 --> 00:09:27.680
just to show you the
flexibility in the system.

00:09:27.680 --> 00:09:29.220
So what we're going
to do with DDC

00:09:29.220 --> 00:09:30.970
is that we're going
to take this app,

00:09:30.970 --> 00:09:33.303
and we're going to compile
it down to different modules.

00:09:33.303 --> 00:09:35.940
And we just basically do this at
a package granularity in Dart.

00:09:35.940 --> 00:09:38.360
So you'll see essentially
five different modules

00:09:38.360 --> 00:09:39.330
in the system.

00:09:39.330 --> 00:09:42.180
The SDK, package.js,
which we're going

00:09:42.180 --> 00:09:45.171
to use to talk to a WYSIWYG
editor called quilljs.

00:09:45.171 --> 00:09:46.920
Those of you who
actually ran the code lab

00:09:46.920 --> 00:09:47.720
would have seen it.

00:09:47.720 --> 00:09:51.040
And Jacob will talk a little bit
about that in about 20 minutes.

00:09:51.040 --> 00:09:53.920
Package.funk, which has some
nice function utilities.

00:09:53.920 --> 00:09:57.380
The package that's part of the
app itself, the Captain's Log.

00:09:57.380 --> 00:10:02.280
And then, a main driver app
to build it all together.

00:10:02.280 --> 00:10:04.010
There's kind of a
make-based build.

00:10:04.010 --> 00:10:08.284
I should say, I found
out I had to give a demo.

00:10:08.284 --> 00:10:09.950
Well, actually, I
wanted to give a demo.

00:10:09.950 --> 00:10:13.140
I wanted to do something cool.

00:10:13.140 --> 00:10:14.700
Someone told me about Webpack.

00:10:14.700 --> 00:10:17.230
I never used Webpack before.

00:10:17.230 --> 00:10:20.103
And so this actually came
together pretty quickly.

00:10:20.103 --> 00:10:21.900
I ran Webpack for
the first time,

00:10:21.900 --> 00:10:23.691
and then got something
more or less running

00:10:23.691 --> 00:10:24.960
in about five or six hours.

00:10:24.960 --> 00:10:27.470
But it's glued
together with make

00:10:27.470 --> 00:10:29.630
to kind of drive
the Dart building

00:10:29.630 --> 00:10:32.580
and Webpack to do the
bundling and serving.

00:10:32.580 --> 00:10:35.330
And let's take a look.

00:10:35.330 --> 00:10:42.630
So first of all, this is a make
file that basically shows you

00:10:42.630 --> 00:10:44.360
how you can invoke DDC.

00:10:44.360 --> 00:10:46.904
Unlike Dart2JS, it's not
a whole program compiler.

00:10:46.904 --> 00:10:49.320
I don't know how many of you
are familiar with make files,

00:10:49.320 --> 00:10:50.700
but they're very simple.

00:10:50.700 --> 00:10:53.490
Target on the left,
sources on the right.

00:10:53.490 --> 00:10:59.580
If js.dart changes, we
invoke DDC to produce js.js.

00:10:59.580 --> 00:11:01.922
Similarly with the funk package.

00:11:01.922 --> 00:11:03.880
Captain's Log is a little
bit more interesting.

00:11:03.880 --> 00:11:06.970
We take two Dart files,
and we take summaries,

00:11:06.970 --> 00:11:08.860
and we invoke DDC.

00:11:08.860 --> 00:11:10.610
These summaries
basically just mean

00:11:10.610 --> 00:11:13.710
that Captain's Log depends
on these modules up there.

00:11:13.710 --> 00:11:17.850
The summary is just an
API level summarization

00:11:17.850 --> 00:11:19.210
of those libraries.

00:11:19.210 --> 00:11:21.270
So if you're editing
something up here

00:11:21.270 --> 00:11:23.540
and the APIs didn't change,
the build short circuits.

00:11:23.540 --> 00:11:25.190
You don't have to
build anything else.

00:11:25.190 --> 00:11:27.590
And then, finally, the
main.js at the bottom,

00:11:27.590 --> 00:11:28.880
which ties it all together.

00:11:28.880 --> 00:11:30.790
And also takes in summaries.

00:11:30.790 --> 00:11:32.700
So again, if you're
editing Captain's Log,

00:11:32.700 --> 00:11:37.250
you don't affect the API,
main won't get built.

00:11:37.250 --> 00:11:38.630
So I'm lying a little bit.

00:11:38.630 --> 00:11:41.130
I actually ended up wrapping
this up in a Dart Watcher thing

00:11:41.130 --> 00:11:42.900
because I didn't
want to type make.

00:11:42.900 --> 00:11:45.210
And you can see it's kind of
running in the background,

00:11:45.210 --> 00:11:48.570
looking for things, and just
running the minimal build step.

00:11:48.570 --> 00:11:51.450
In most cases, I'm going to
be editing just this Captain's

00:11:51.450 --> 00:11:52.100
Log.

00:11:52.100 --> 00:11:53.920
And it will build
the minimal thing.

00:11:53.920 --> 00:11:56.860
I have Webpack
sitting on the side

00:11:56.860 --> 00:11:59.460
listening to changes in
the produced JavaScript

00:11:59.460 --> 00:12:01.850
and serving it up.

00:12:01.850 --> 00:12:03.580
So let's actually see.

00:12:03.580 --> 00:12:05.810
So DDC and Webpack
don't actually

00:12:05.810 --> 00:12:07.270
know anything about each other.

00:12:07.270 --> 00:12:09.579
But they talk the
same module format.

00:12:09.579 --> 00:12:11.870
So it actually was surprisingly
straightforward to glue

00:12:11.870 --> 00:12:13.600
these things together.

00:12:13.600 --> 00:12:15.840
This is the Webpack entry point.

00:12:15.840 --> 00:12:19.160
I just use Node style require
statements to pull in the Dart

00:12:19.160 --> 00:12:22.620
SDK and the main app.

00:12:22.620 --> 00:12:26.810
The Dart SDK is just used to
actually set some cool tools

00:12:26.810 --> 00:12:29.180
in the debugger and
dev tools in Chrome.

00:12:29.180 --> 00:12:31.000
I'll get back to
that in a moment.

00:12:31.000 --> 00:12:34.190
But all this is really doing
is firing off the main entry

00:12:34.190 --> 00:12:35.685
point in the application.

00:12:35.685 --> 00:12:37.310
Of course, there's
this interesting bit

00:12:37.310 --> 00:12:40.010
of code in the middle here.

00:12:40.010 --> 00:12:44.100
Webpack has support for
hot module reloading.

00:12:44.100 --> 00:12:46.730
DDC doesn't know anything
about hot module reloading.

00:12:46.730 --> 00:12:49.264
But it doesn't actually need
to, because again, we're just

00:12:49.264 --> 00:12:50.430
talking to the same modules.

00:12:50.430 --> 00:12:54.180
So as soon as Webpack
sends out a signal,

00:12:54.180 --> 00:12:56.340
I just have a listener
here that listens for it,

00:12:56.340 --> 00:13:00.450
calls clear on my
Dart application,

00:13:00.450 --> 00:13:02.590
does a require to
load the new version,

00:13:02.590 --> 00:13:04.870
and just calls the
entry point on that.

00:13:04.870 --> 00:13:06.100
So let's see this in action.

00:13:08.990 --> 00:13:11.770
This is the Captain's Log app.

00:13:11.770 --> 00:13:16.932
Firefox, Safari, Chrome, all
running at the same time.

00:13:16.932 --> 00:13:18.640
Let's make some
interesting changes here.

00:13:18.640 --> 00:13:22.220
So we've got these
stardates at the bottom.

00:13:22.220 --> 00:13:24.760
This is the WYSIWYG
editor called Quill.

00:13:24.760 --> 00:13:27.880
And Jacob will talk a little
bit about how that works.

00:13:27.880 --> 00:13:28.940
You enter stuff in here.

00:13:28.940 --> 00:13:30.550
It shows up in your log.

00:13:30.550 --> 00:13:31.660
We have stardates.

00:13:31.660 --> 00:13:35.090
These stardates look
awfully like Earth dates.

00:13:35.090 --> 00:13:37.087
2016, that looks a
little suspicious.

00:13:37.087 --> 00:13:38.545
So let's just make
a simple change.

00:13:41.950 --> 00:13:47.680
I've conveniently put
this at the bottom.

00:13:47.680 --> 00:13:49.360
I'll save it.

00:13:49.360 --> 00:13:50.260
And we'll go back.

00:13:50.260 --> 00:13:55.010
And you can see Earth date
shows up everywhere more or less

00:13:55.010 --> 00:13:56.372
immediately.

00:13:56.372 --> 00:13:58.316
[APPLAUSE]

00:14:02.700 --> 00:14:05.000
SPEAKER: That might
have been too quick.

00:14:05.000 --> 00:14:10.440
All right, notice how
there's a toolbar up here.

00:14:10.440 --> 00:14:12.554
Turns out Quill has
different themes.

00:14:12.554 --> 00:14:14.012
You can play around
with that, too.

00:14:17.390 --> 00:14:20.050
So let's go here and
change from the snoot theme

00:14:20.050 --> 00:14:21.241
to the bubble theme.

00:14:23.950 --> 00:14:26.124
And we now have the
bubble theme here.

00:14:26.124 --> 00:14:27.290
What happened to my toolbar?

00:14:27.290 --> 00:14:29.540
Bubble uses tool tips.

00:14:29.540 --> 00:14:35.670
So I can check that, hey, this
renders on all my browsers.

00:14:35.670 --> 00:14:38.189
And again, it's just
reloading it on the fly.

00:14:38.189 --> 00:14:39.980
We didn't actually have
to reset the state.

00:14:39.980 --> 00:14:42.105
You can see I'm in the
middle of editing something.

00:14:42.105 --> 00:14:44.360
If I reload it, the "This
is Chrome" part disappears.

00:14:44.360 --> 00:14:47.626
But it's all just
happening live here.

00:14:47.626 --> 00:14:48.250
So that's cool.

00:14:48.250 --> 00:14:52.780
We get a lot of stuff for free
just by designing our system

00:14:52.780 --> 00:14:54.000
modularly.

00:14:54.000 --> 00:14:56.590
I didn't really spend
a whole lot of time

00:14:56.590 --> 00:14:57.940
trying to get Webpack working.

00:14:57.940 --> 00:15:00.930
It just happened to work.

00:15:00.930 --> 00:15:04.420
So hopefully, we'll get
a lot of those features.

00:15:04.420 --> 00:15:06.410
Let me show a little
bit about debugging.

00:15:06.410 --> 00:15:10.630
So Webpack does
support Source Maps.

00:15:10.630 --> 00:15:12.980
And it can handle the Source
Maps that DDC changes.

00:15:12.980 --> 00:15:15.130
But I have to run it
in this debug mode.

00:15:15.130 --> 00:15:17.536
That just makes things
like a half second slower,

00:15:17.536 --> 00:15:18.910
so I found that
kind of annoying.

00:15:18.910 --> 00:15:20.076
But let's start it up again.

00:15:23.100 --> 00:15:24.810
The apps are reloading here.

00:15:24.810 --> 00:15:28.750
You can see the text that
I had written is all gone.

00:15:28.750 --> 00:15:31.050
But we're now live again.

00:15:31.050 --> 00:15:33.790
And let's zoom
out here in Chrome

00:15:33.790 --> 00:15:36.780
and start looking at
the dev tools here.

00:15:36.780 --> 00:15:38.003
So I have a breakpoint.

00:15:41.390 --> 00:15:42.890
Let's see if I've
actually saved it.

00:15:42.890 --> 00:15:43.390
Yup.

00:15:43.390 --> 00:15:44.780
So I set a breakpoint here.

00:15:44.780 --> 00:15:47.510
And as you can see,
we're in Dart source.

00:15:47.510 --> 00:15:53.210
This is captains_log.dart at
the breakpoint in the Dart code

00:15:53.210 --> 00:15:54.150
itself, right?

00:15:54.150 --> 00:15:56.260
And so even though
I'm in regular Chrome,

00:15:56.260 --> 00:15:59.410
I get a pretty nice to
look at stack trace here.

00:15:59.410 --> 00:16:01.790
So saveLog here is
the handler that

00:16:01.790 --> 00:16:03.880
gets registered on the button.

00:16:03.880 --> 00:16:06.070
And we stopped here in
a [INAUDIBLE] log which

00:16:06.070 --> 00:16:07.510
is getting called from that.

00:16:07.510 --> 00:16:10.540
And what's kind of
cool here is that we

00:16:10.540 --> 00:16:15.110
have hooks in the dev tools,
which Dan talked about earlier.

00:16:15.110 --> 00:16:18.710
So when you actually
hover over log entries,

00:16:18.710 --> 00:16:20.130
you actually see the Dart type.

00:16:20.130 --> 00:16:21.880
It's a JS linked hash map.

00:16:21.880 --> 00:16:24.337
And you see the reified
type information.

00:16:24.337 --> 00:16:25.920
So we're keeping all
of that in there.

00:16:25.920 --> 00:16:28.740
We're using it and enforcing
it, the safety of it.

00:16:28.740 --> 00:16:30.710
And the nice thing
is when you are

00:16:30.710 --> 00:16:33.420
developing, when you're bugging,
you see that type information.

00:16:33.420 --> 00:16:36.560
And you also see a nice,
Darty view of the hash map.

00:16:36.560 --> 00:16:40.570
You get the double
keys and the values.

00:16:40.570 --> 00:16:43.550
And you can even
drill down on that

00:16:43.550 --> 00:16:47.170
and expand and look at the
div itself, if you wanted.

00:16:47.170 --> 00:16:49.030
So you get a nice
dev tools experience

00:16:49.030 --> 00:16:50.850
because we're saving
all this information

00:16:50.850 --> 00:16:54.230
and displaying it to
you in a nice way.

00:16:54.230 --> 00:16:56.070
One final thing I
just want to show here

00:16:56.070 --> 00:16:58.970
is when we do the
hot update, what

00:16:58.970 --> 00:17:02.420
actually is happening here?

00:17:02.420 --> 00:17:05.770
So let's go back and actually
change that thing back

00:17:05.770 --> 00:17:08.069
to snow, which I
like better anyway.

00:17:11.780 --> 00:17:15.040
And we'll see that it
gets slightly slower.

00:17:15.040 --> 00:17:16.099
But it gets reloaded.

00:17:16.099 --> 00:17:18.000
And these two things
come down the pipe.

00:17:18.000 --> 00:17:21.329
And it's just a message that's
showing some information.

00:17:21.329 --> 00:17:24.180
And it's only sending the
minimal thing down, right?

00:17:24.180 --> 00:17:27.530
It's not resending the Dart
SDK or any other packages.

00:17:27.530 --> 00:17:29.760
It's just generating--
I edited Captain's Log.

00:17:29.760 --> 00:17:32.590
I'm getting captains_log.js
down the pipe.

00:17:32.590 --> 00:17:36.450
This gives us a good chance
to take a look at JavaScript.

00:17:36.450 --> 00:17:41.410
So we can see that this code got
generated with the snow theme.

00:17:41.410 --> 00:17:42.910
And that was
effectively the update.

00:17:42.910 --> 00:17:44.662
So you know, it sent
the whole package.

00:17:44.662 --> 00:17:46.370
I guess it could have
had a smarter diff,

00:17:46.370 --> 00:17:49.300
but I don't really know a whole
lot about how Webpack works.

00:17:49.300 --> 00:17:53.640
That's kind of the point of
the demo actually, right?

00:17:53.640 --> 00:17:56.970
So just to show an example
of what the code looks like,

00:17:56.970 --> 00:17:59.300
though, it's not perfectly
idiomatic Dart code.

00:17:59.300 --> 00:18:00.630
But it's pretty readable.

00:18:00.630 --> 00:18:02.930
So for example,
calculate stardate

00:18:02.930 --> 00:18:05.040
is clearly a function
with the name that

00:18:05.040 --> 00:18:07.410
matches the original Dart name.

00:18:07.410 --> 00:18:10.770
We're calling into the core
library to create a date time,

00:18:10.770 --> 00:18:13.259
a couple date times
with different arguments

00:18:13.259 --> 00:18:15.050
and different constructors,
as you can see.

00:18:15.050 --> 00:18:16.880
We're calling the
difference method.

00:18:16.880 --> 00:18:17.889
We're doing add.

00:18:17.889 --> 00:18:19.930
You can notice this is
one case where we actually

00:18:19.930 --> 00:18:22.620
have to do some runtime
checking in DDC.

00:18:22.620 --> 00:18:24.520
We don't know from
the type system

00:18:24.520 --> 00:18:28.096
yet that we have a
non-nullable number here.

00:18:28.096 --> 00:18:29.345
So we have to do a null check.

00:18:29.345 --> 00:18:31.250
Of course, if the type
system told us these things,

00:18:31.250 --> 00:18:32.215
we'd get better code.

00:18:32.215 --> 00:18:35.660
So we're always asking
for that kind of stuff.

00:18:35.660 --> 00:18:39.320
In this case, we happen to know
that this is a private member

00:18:39.320 --> 00:18:41.002
to the package.

00:18:41.002 --> 00:18:42.710
So we know that that
one is not nullable.

00:18:42.710 --> 00:18:44.140
So we don't have to check that.

00:18:44.140 --> 00:18:47.323
But in general, we love
things in the type system.

00:18:51.530 --> 00:18:52.394
So let's see.

00:18:52.394 --> 00:18:53.060
That's the demo.

00:18:53.060 --> 00:18:56.770
Again, this was something
I quickly put together.

00:18:56.770 --> 00:19:00.134
All the code is
up here in GitHub.

00:19:00.134 --> 00:19:01.050
All the code is there.

00:19:01.050 --> 00:19:03.380
I promise to actually put
instructions in the next couple

00:19:03.380 --> 00:19:05.130
days before the summit
is done if anyone's

00:19:05.130 --> 00:19:06.800
interested in actually
reproducing this.

00:19:09.450 --> 00:19:13.060
So I mentioned I just spent like
a day or so hacking up Webpack

00:19:13.060 --> 00:19:14.950
just to show that it worked.

00:19:14.950 --> 00:19:17.040
We've been very much
focused in the past year

00:19:17.040 --> 00:19:19.100
internally with DDC.

00:19:19.100 --> 00:19:22.379
And there's a good
reason for that, right?

00:19:22.379 --> 00:19:23.920
First of all, we
have all these teams

00:19:23.920 --> 00:19:25.720
that are basically paying us.

00:19:25.720 --> 00:19:26.620
So we gotta do that.

00:19:26.620 --> 00:19:31.140
But we also wanted to prove that
anything we do works at scale.

00:19:31.140 --> 00:19:34.626
We need to scale to many,
many megabytes of code

00:19:34.626 --> 00:19:36.000
to run our internal
applications,

00:19:36.000 --> 00:19:38.750
to provide a good
developer experience

00:19:38.750 --> 00:19:40.310
for these applications.

00:19:40.310 --> 00:19:43.450
And we wanted to prove it
there, right, at size of code,

00:19:43.450 --> 00:19:46.120
at a complex set of
web dependencies.

00:19:46.120 --> 00:19:48.470
And we felt that if we
could prove it here, then

00:19:48.470 --> 00:19:50.990
we could take it to the small,
like I did with Webpack,

00:19:50.990 --> 00:19:53.020
and get things to
work pretty quickly

00:19:53.020 --> 00:19:54.700
and get our assumptions right.

00:19:54.700 --> 00:19:56.770
So part of the
complexity here is just

00:19:56.770 --> 00:19:58.470
all of these dependencies.

00:19:58.470 --> 00:19:59.630
We have the Dart SDK.

00:19:59.630 --> 00:20:02.430
We have all kinds
of packages in pub.

00:20:02.430 --> 00:20:04.440
We have Angular Dart,
which you saw about today.

00:20:04.440 --> 00:20:07.170
We have all these cool
Angular Dart components

00:20:07.170 --> 00:20:08.650
which you saw earlier today.

00:20:08.650 --> 00:20:11.170
We had a lot of common internal
infrastructure, some of it

00:20:11.170 --> 00:20:12.800
UI, some of it other stuff.

00:20:12.800 --> 00:20:15.400
We have components on
our own application.

00:20:15.400 --> 00:20:17.780
An application author will
have their own components.

00:20:17.780 --> 00:20:19.260
And they'll have
a main app again

00:20:19.260 --> 00:20:21.930
that weaves this all together.

00:20:21.930 --> 00:20:23.150
It's also not just Dart code.

00:20:23.150 --> 00:20:25.650
[? Farhat and Matan ?] talked
about this a little bit today.

00:20:25.650 --> 00:20:29.280
But Angular templates, they
have a generation process

00:20:29.280 --> 00:20:32.190
to turn those templates
into Dart code.

00:20:32.190 --> 00:20:33.802
We have things like
protocol buffers

00:20:33.802 --> 00:20:35.260
that we use for
serialization where

00:20:35.260 --> 00:20:36.730
you can change specifications.

00:20:36.730 --> 00:20:38.010
And it generates Dart code.

00:20:38.010 --> 00:20:41.410
And all of these are part of
our build framework, right?

00:20:41.410 --> 00:20:43.490
And the thing we've
been focusing on

00:20:43.490 --> 00:20:45.572
is making this work in Bazel.

00:20:45.572 --> 00:20:47.280
And you'll hear more
about that tomorrow.

00:20:47.280 --> 00:20:48.613
But Bazel gives you parallelism.

00:20:48.613 --> 00:20:49.910
It gives you caching.

00:20:49.910 --> 00:20:52.220
It's really a great
tool to build large apps

00:20:52.220 --> 00:20:53.990
at scalability and speed.

00:20:53.990 --> 00:20:56.526
And I can't show the app itself.

00:20:56.526 --> 00:20:57.400
It's an internal app.

00:20:57.400 --> 00:20:59.691
But just going to walk you
through the life of an edit.

00:20:59.691 --> 00:21:01.900
Let's suppose we're editing
one of our components.

00:21:01.900 --> 00:21:05.332
Most of our app authors
are not necessarily here,

00:21:05.332 --> 00:21:06.290
but they're often here.

00:21:06.290 --> 00:21:08.530
They're usually not
all the way down here.

00:21:08.530 --> 00:21:11.350
And we want to make the
incremental build process work

00:21:11.350 --> 00:21:13.120
really well for them.

00:21:13.120 --> 00:21:15.850
So let's suppose we're editing
one of our own table components

00:21:15.850 --> 00:21:18.430
inside of our app.

00:21:18.430 --> 00:21:19.550
It's an Angular component.

00:21:19.550 --> 00:21:25.050
So step one here is to actually
generate from the templates,

00:21:25.050 --> 00:21:27.846
take Dart and HTML
templates, and produce Dart.

00:21:27.846 --> 00:21:29.220
And in this
particular case, that

00:21:29.220 --> 00:21:32.770
took about 200 milliseconds.

00:21:32.770 --> 00:21:35.920
Now the Dart library, so step
two in this build process,

00:21:35.920 --> 00:21:38.730
this is basically kicked off
as soon as you do an edit,

00:21:38.730 --> 00:21:41.000
is to build the summary.

00:21:41.000 --> 00:21:44.120
And that takes about, in
this case, a little bit

00:21:44.120 --> 00:21:47.450
less than 300 milliseconds.

00:21:47.450 --> 00:21:50.000
Step three is to actually build
a JavaScript corresponding

00:21:50.000 --> 00:21:50.790
to this component.

00:21:50.790 --> 00:21:52.370
But we don't have to
wait for the summary.

00:21:52.370 --> 00:21:53.870
As soon as we have
the Dart library,

00:21:53.870 --> 00:21:56.540
we start kicking that off
in parallel right there.

00:21:58.869 --> 00:22:01.410
The summary, like I mentioned,
you saw this in the make file,

00:22:01.410 --> 00:22:05.420
is used to inform
downscale dependencies.

00:22:05.420 --> 00:22:07.530
So if we have
downstream dependencies,

00:22:07.530 --> 00:22:08.960
if we have something
using table,

00:22:08.960 --> 00:22:11.010
we use the summary
to type check it.

00:22:11.010 --> 00:22:13.050
And in this case,
the summary, the edit

00:22:13.050 --> 00:22:14.510
happened to change the summary.

00:22:14.510 --> 00:22:17.280
So I have to build another
component library that

00:22:17.280 --> 00:22:19.540
depends on that table.

00:22:19.540 --> 00:22:23.260
So for this change, I had
some cascading dependencies.

00:22:23.260 --> 00:22:24.660
I build that summary.

00:22:24.660 --> 00:22:27.190
Again, you can show-- this is
basically a time line here.

00:22:27.190 --> 00:22:29.320
So this is actually
happening while I'm

00:22:29.320 --> 00:22:31.620
doing DDC on another thread.

00:22:34.330 --> 00:22:36.550
I can also start compiling
that new component that

00:22:36.550 --> 00:22:37.970
happens to be a fairly big one.

00:22:37.970 --> 00:22:40.150
So it took a little bit of time.

00:22:40.150 --> 00:22:42.650
And then finally, I had a main
app that I needed to compile,

00:22:42.650 --> 00:22:43.310
too.

00:22:43.310 --> 00:22:45.309
And the cool thing about
this particular example

00:22:45.309 --> 00:22:47.920
is I have three different
things compiling.

00:22:47.920 --> 00:22:49.490
But at some point
in time, they're

00:22:49.490 --> 00:22:50.620
all happening in parallel.

00:22:50.620 --> 00:22:54.654
So I'm taking advantage of the
parallelism on my workstation.

00:22:54.654 --> 00:22:56.070
And if I want to
do this at scale,

00:22:56.070 --> 00:22:57.750
well, Google has a
nice infrastructure

00:22:57.750 --> 00:23:00.320
for parallel builds.

00:23:00.320 --> 00:23:02.520
And then finally, when
all these things are done,

00:23:02.520 --> 00:23:03.729
I just bundle it up.

00:23:03.729 --> 00:23:04.270
And I'm done.

00:23:04.270 --> 00:23:06.290
And this whole thing took
a little bit over a second.

00:23:06.290 --> 00:23:07.970
So that's the kind
of experience that we

00:23:07.970 --> 00:23:12.010
can get when you do this
at a much larger scale.

00:23:12.010 --> 00:23:13.280
Many changes are local.

00:23:13.280 --> 00:23:16.520
So if I was doing a local
change that didn't cascade out

00:23:16.520 --> 00:23:18.910
of the table component,
I'd basically

00:23:18.910 --> 00:23:21.760
be done at this point right
here and able to bundle it.

00:23:21.760 --> 00:23:23.700
So in that kind of
more common case,

00:23:23.700 --> 00:23:25.440
this would take more
like half a second.

00:23:28.380 --> 00:23:32.560
So to summarize, what
do you get from DDC?

00:23:32.560 --> 00:23:34.670
You get a fast, modular rebuild.

00:23:34.670 --> 00:23:38.310
You get readable ES6 code.

00:23:38.310 --> 00:23:40.620
You get nice,
iterative development

00:23:40.620 --> 00:23:42.610
on multiple browsers.

00:23:42.610 --> 00:23:45.280
And we've done a lot of
extra work in Chrome,

00:23:45.280 --> 00:23:46.696
dev tools support with Chrome.

00:23:46.696 --> 00:23:48.570
And Jacob promised, if
I left him extra time,

00:23:48.570 --> 00:23:51.550
he'll actually do a demo that'll
show even cooler things than I

00:23:51.550 --> 00:23:54.270
was able to get into.

00:23:54.270 --> 00:23:56.660
As Leif talked about,
soundness in strong mode.

00:23:56.660 --> 00:23:59.455
DDC works very nicely
with strong mode.

00:23:59.455 --> 00:24:02.195
It requires strong mode, but
it exploits it quite nicely.

00:24:05.170 --> 00:24:07.980
The status, it's still
kind of in a beta state.

00:24:07.980 --> 00:24:10.350
But we are-- it is actually
being used by several teams

00:24:10.350 --> 00:24:13.100
internally for their
day to day development.

00:24:13.100 --> 00:24:16.140
As I mentioned, our
initial focus is Chrome.

00:24:16.140 --> 00:24:17.976
But we are now in the Dart SDK.

00:24:17.976 --> 00:24:19.850
We used to be in a
different GitHub location.

00:24:19.850 --> 00:24:20.530
We've moved.

00:24:20.530 --> 00:24:26.630
You can find our code over here,
as Kevin mentioned, or Bob.

00:24:26.630 --> 00:24:30.110
We are the DartDevC
binary now in the SDK

00:24:30.110 --> 00:24:32.250
as of somewhat recently.

00:24:32.250 --> 00:24:33.740
And we still have
the mailing list.

00:24:33.740 --> 00:24:38.140
You can chime in with questions
and hopefully get some answers.

00:24:38.140 --> 00:24:42.460
But that's basically
what we got.

00:24:42.460 --> 00:24:43.250
Thank you.

00:24:43.250 --> 00:24:45.700
[APPLAUSE]

