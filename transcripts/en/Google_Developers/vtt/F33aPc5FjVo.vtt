WEBVTT
Kind: captions
Language: en

00:00:06.940 --> 00:00:07.440
JJ BEHRENS: Hi.

00:00:07.440 --> 00:00:09.200
My name is JJ Behrens.

00:00:09.200 --> 00:00:11.510
I'm a developer advocate
at Google.

00:00:11.510 --> 00:00:13.880
In this episode of Dartisans,
I'm going to show you a

00:00:13.880 --> 00:00:17.570
variety of ways to use Dart
with Google Web Toolkit.

00:00:17.570 --> 00:00:20.000
I know that there are a lot of
good developers out there who

00:00:20.000 --> 00:00:22.770
would like to give Dart a shot,
but they can't, because

00:00:22.770 --> 00:00:24.880
they already have a large
successful app

00:00:24.880 --> 00:00:26.320
that's written in GWT.

00:00:26.320 --> 00:00:28.680
I'm going to show you ways to
integrate Dart into your

00:00:28.680 --> 00:00:31.890
existing GWT application without
having to rewrite it

00:00:31.890 --> 00:00:33.000
from scratch.

00:00:33.000 --> 00:00:36.170
If you'd like to download the
sample code, the URL is

00:00:36.170 --> 00:00:39.540
bit.ly/dart_with_gwt.

00:00:39.540 --> 00:00:42.360
To do this, I've built a simple
application that uses

00:00:42.360 --> 00:00:44.180
both GWT and Dart.

00:00:44.180 --> 00:00:46.480
I'll show you how to set up a
development environment so

00:00:46.480 --> 00:00:48.940
that you can work with
both technologies.

00:00:48.940 --> 00:00:51.320
Then I'll show you a variety of
ways in which you can get

00:00:51.320 --> 00:00:55.600
GWT and Dart to interoperate,
such as using GWT and Dart to

00:00:55.600 --> 00:00:59.030
manage different parts of the
same page; using Dart to

00:00:59.030 --> 00:01:02.260
retrieve JSON from a
Java servlet; using

00:01:02.260 --> 00:01:05.930
window.postMessage and JSNI to
pass messages between GWT and

00:01:05.930 --> 00:01:10.420
Dart; using JavaScript, JSNI,
and Dart's js package for

00:01:10.420 --> 00:01:14.230
synchronous interoperability
between GWT and Dart; using

00:01:14.230 --> 00:01:17.230
CustomEvent objects and
Elemental to pass messages

00:01:17.230 --> 00:01:19.110
between GWT and Dart.

00:01:19.110 --> 00:01:21.960
Rather than show you a one
size fits all solution, I

00:01:21.960 --> 00:01:24.960
decided to show you a bunch of
approaches so that you could

00:01:24.960 --> 00:01:26.850
pick the right tool
for the job.

00:01:26.850 --> 00:01:29.740
Each of them have strengths and
weaknesses, and I'll cover

00:01:29.740 --> 00:01:31.830
those along the way as well.

00:01:31.830 --> 00:01:35.160
By the way, this video is
best viewed full screen.

00:01:35.160 --> 00:01:37.180
Also, be sure to set the
YouTube player to

00:01:37.180 --> 00:01:40.330
play at 720p HD.

00:01:40.330 --> 00:01:43.440
Let's quickly cover how I set up
my development environment.

00:01:43.440 --> 00:01:48.350
I used Eclipse and Dart Editor
to build the simple

00:01:48.350 --> 00:01:49.520
application.

00:01:49.520 --> 00:01:52.050
If you're a GWT developer,
you're probably already very

00:01:52.050 --> 00:01:54.650
familiar with how to install
Eclipse, so I won't

00:01:54.650 --> 00:01:55.790
bore you with that.

00:01:55.790 --> 00:01:58.550
The GWT website has some pretty
decent instructions.

00:01:58.550 --> 00:02:02.640
I used the Juno release of the
Eclipse IDE for Java EE

00:02:02.640 --> 00:02:03.800
developers.

00:02:03.800 --> 00:02:06.680
Then I installed the Google
plugin for Eclipse.

00:02:06.680 --> 00:02:09.150
I decided to install everything,
but the most

00:02:09.150 --> 00:02:12.120
important things are Google
Web Toolkit and Google App

00:02:12.120 --> 00:02:14.130
Engine Java SDK.

00:02:14.130 --> 00:02:16.980
The instructions also walk you
through installing Google Web

00:02:16.980 --> 00:02:19.300
Toolkit developer plug-in
for Chrome.

00:02:19.300 --> 00:02:23.190
To install Dart, head on
over to dartlang.org.

00:02:23.190 --> 00:02:26.250
If you've never installed Dart
Editor before, there's even a

00:02:26.250 --> 00:02:27.120
getting started guide.

00:02:27.120 --> 00:02:30.480
I like to use Dart and various
other tools from the command

00:02:30.480 --> 00:02:33.580
line, so I have the following
in my bashrc.

00:02:33.580 --> 00:02:36.660
Of course, you can also rely
on Dart Editor to run those

00:02:36.660 --> 00:02:37.970
tools for you.

00:02:37.970 --> 00:02:40.760
Dart Editor is based on Eclipse
components, so it kind

00:02:40.760 --> 00:02:43.770
of looks like a very stripped
down version of Eclipse.

00:02:43.770 --> 00:02:46.270
You might be wondering why I
don't use the Dart Editor

00:02:46.270 --> 00:02:47.900
plug-in for Eclipse.

00:02:47.900 --> 00:02:51.580
Unfortunately, it's not yet as
polished as Dart Editor is.

00:02:51.580 --> 00:02:54.400
I recommend keeping Dart Editor
separate of Eclipse for

00:02:54.400 --> 00:02:57.210
the time being, until things
settle down and a few

00:02:57.210 --> 00:02:59.060
key bugs get fixed.

00:02:59.060 --> 00:03:02.640
Using Eclipse to edit Java and
Dart Editor to edit Dart

00:03:02.640 --> 00:03:04.720
actually works out pretty
well for me.

00:03:04.720 --> 00:03:07.210
You could still use Eclipse
with the EGit plug-in to

00:03:07.210 --> 00:03:10.880
commit your Dart files to Git,
but I tend to use the command

00:03:10.880 --> 00:03:13.200
line to interact with Git
anyway, because that's where

00:03:13.200 --> 00:03:14.670
I'm most comfortable.

00:03:14.670 --> 00:03:17.290
Let's start by creating
a GWT application.

00:03:17.290 --> 00:03:20.220
Then you'll embed a Dart
application within it.

00:03:20.220 --> 00:03:22.990
Finally, I'll show how to use
GWT and Dart to manage

00:03:22.990 --> 00:03:24.940
different parts of
the same page.

00:03:24.940 --> 00:03:28.680
Since GWT and Dart each have
their own requirements for how

00:03:28.680 --> 00:03:31.310
the application should be laid
out, I'm going to start by

00:03:31.310 --> 00:03:33.050
creating a GWT application.

00:03:33.050 --> 00:03:34.790
So I'm going to come
here and select New

00:03:34.790 --> 00:03:36.525
Web Application Project.

00:03:36.525 --> 00:03:40.150
I'm going to call it GWT
Application, because I'm kind

00:03:40.150 --> 00:03:41.740
of a creative guy.

00:03:41.740 --> 00:03:47.590
I'll put it in
org.land.gwtapplication, and

00:03:47.590 --> 00:03:49.700
leave it in my workspace.

00:03:49.700 --> 00:03:53.320
I am going to use Google Web
Toolkit and Google App Engine,

00:03:53.320 --> 00:03:54.245
and that's it.

00:03:54.245 --> 00:03:57.170
So I'll go ahead and
finish that.

00:03:57.170 --> 00:04:01.870
So here's an application, and
it has a war directory.

00:04:01.870 --> 00:04:04.830
The war directory is where all
the static files go, so that's

00:04:04.830 --> 00:04:07.520
where my Dart application's
going to go.

00:04:07.520 --> 00:04:09.270
I'm going to create the
Dart application

00:04:09.270 --> 00:04:11.050
from within Dart Editor.

00:04:11.050 --> 00:04:13.650
So I'm going to create
a new application.

00:04:13.650 --> 00:04:17.810
I'm going to call it Dart
Application, and you can see

00:04:17.810 --> 00:04:20.070
here that it's within the
war directory of my GWT

00:04:20.070 --> 00:04:21.510
application.

00:04:21.510 --> 00:04:24.980
I'll include sample content and
make it a web application,

00:04:24.980 --> 00:04:26.370
and hit Finish.

00:04:26.370 --> 00:04:29.840
Now, I like the project layout
that Dart Editor set up for

00:04:29.840 --> 00:04:33.280
me, but I don't need the CSS
file, and I don't need this

00:04:33.280 --> 00:04:36.950
HTML file, and I'm going to
delete most of the start file.

00:04:36.950 --> 00:04:40.070
So I'm going to go ahead and
do that really quickly.

00:04:40.070 --> 00:04:42.110
By the way, if you're
using Git, here's

00:04:42.110 --> 00:04:43.450
my Git ignore file.

00:04:43.450 --> 00:04:46.420
Now I'm going to get rid of most
of the sample code that

00:04:46.420 --> 00:04:47.760
Eclipse created.

00:04:47.760 --> 00:04:51.030
You have to do it in the right
order, or you'll get errors.

00:04:51.030 --> 00:04:53.380
Remember to delete the reference
to the servlet in

00:04:53.380 --> 00:04:56.740
web.XML, or else the app
won't start correctly.

00:04:56.740 --> 00:05:00.700
I'm also going to mostly empty
out the GWT application class.

00:05:00.700 --> 00:05:04.540
Now all I'm left with is an
empty on module load method in

00:05:04.540 --> 00:05:07.070
the GWT application.Java file.

00:05:07.070 --> 00:05:10.250
Now let's fire up the GWT
application in Eclipse.

00:05:10.250 --> 00:05:15.030
I'm going to select debug as
web application, and select

00:05:15.030 --> 00:05:16.280
GWTapplication.html.

00:05:20.460 --> 00:05:22.440
And this takes a few seconds
to start up,

00:05:22.440 --> 00:05:23.950
and there's the URL.

00:05:23.950 --> 00:05:27.740
If I double click on it,
it starts in Chrome.

00:05:27.740 --> 00:05:30.110
Of course, there's not
much there right now.

00:05:30.110 --> 00:05:32.960
If you haven't yet installed the
Google Web Toolkit plug-in

00:05:32.960 --> 00:05:36.170
for Chrome, it'll walk you
through that at this point.

00:05:36.170 --> 00:05:39.210
By the way, if you downloaded
the source code for the sample

00:05:39.210 --> 00:05:42.150
project, and you're trying to
get it to work, remember that

00:05:42.150 --> 00:05:45.040
to run the Dart code, you need
to either use Dartium, that

00:05:45.040 --> 00:05:47.630
is, the copy of Chromium that
comes with Dart Editor--

00:05:47.630 --> 00:05:50.500
or you need to compile the code
to JavaScript using Dart

00:05:50.500 --> 00:05:54.020
to JS, which, again, can be
done with Dart Editor.

00:05:54.020 --> 00:05:56.600
It's a common mistake to try
to run the code in regular

00:05:56.600 --> 00:05:59.220
Chrome before you've compiled
the Dart to JavaScript.

00:05:59.220 --> 00:06:01.070
That won't work yet.

00:06:01.070 --> 00:06:03.470
I should also mention that
although GWT's development

00:06:03.470 --> 00:06:06.200
mode works for most of the
code in this tutorial, it

00:06:06.200 --> 00:06:08.220
doesn't yet work
for Elemental.

00:06:08.220 --> 00:06:10.630
So if you've downloaded the
sample code, you'll need to

00:06:10.630 --> 00:06:14.130
actually compile it and strip
off the GWT code server

00:06:14.130 --> 00:06:17.800
parameter before you can
view the application.

00:06:17.800 --> 00:06:20.810
Now let's edit the HTML file
in the war directory.

00:06:20.810 --> 00:06:23.240
First, I'll get rid of most of
the comments so that it's

00:06:23.240 --> 00:06:25.110
easier to see what's going on.

00:06:25.110 --> 00:06:28.940
Now I'm going to tweak the title
and the H1 for the page.

00:06:28.940 --> 00:06:31.610
Now I'm going to get rid
of this HTML here.

00:06:31.610 --> 00:06:35.250
Notice that I've used an H2 for
the GWT section and an H2

00:06:35.250 --> 00:06:39.170
for the Dart section, and I've
also created a div for the GWT

00:06:39.170 --> 00:06:43.120
section and a div for the Dart
section, and I could plug into

00:06:43.120 --> 00:06:46.590
these from the GWT and the
Dart code respectively.

00:06:46.590 --> 00:06:48.570
Now I'm going to add
two script tags.

00:06:48.570 --> 00:06:52.520
The first one is my
DartApplication.dart file, and

00:06:52.520 --> 00:06:57.320
then the second one is the
standard dart.js file.

00:06:57.320 --> 00:06:59.910
Now, this dart.js file is
responsible for seeing it's a

00:06:59.910 --> 00:07:03.230
browser support start, and if
it does, everything's good.

00:07:03.230 --> 00:07:06.190
If it doesn't, it loads the
corresponding JavaScript

00:07:06.190 --> 00:07:09.060
version of my
DartApplication.dart file.

00:07:09.060 --> 00:07:13.210
The dart.js file actually gets
created by pub, Dart's package

00:07:13.210 --> 00:07:15.860
manager, thanks to
our dependence

00:07:15.860 --> 00:07:17.720
on the browser package.

00:07:17.720 --> 00:07:20.830
Now let's do Hello World in
GWT by having GWT print

00:07:20.830 --> 00:07:22.410
something to the page.

00:07:22.410 --> 00:07:25.230
I've added a vertical panel
to the GWT div.

00:07:25.230 --> 00:07:28.180
I've also created a print string
method that can add new

00:07:28.180 --> 00:07:30.350
labels to the vertical panel.

00:07:30.350 --> 00:07:31.400
Let's try it out.

00:07:31.400 --> 00:07:34.240
I reloaded the page in Chrome,
and now it says GWT

00:07:34.240 --> 00:07:36.240
application loaded.

00:07:36.240 --> 00:07:36.610
Great.

00:07:36.610 --> 00:07:39.780
GWT is now interacting
with the HTML page.

00:07:39.780 --> 00:07:41.680
Now let's do the same
thing in Dart.

00:07:41.680 --> 00:07:44.240
Let's edit the
DartApplication.dart file that

00:07:44.240 --> 00:07:46.720
lives deep within GWT's
war directory.

00:07:46.720 --> 00:07:49.350
However, let's edit
it in Dart Editor.

00:07:49.350 --> 00:07:52.400
First, I query for the Dart
div, then I create a print

00:07:52.400 --> 00:07:54.700
string method like
I did for GWT.

00:07:54.700 --> 00:07:57.870
Notice the cool method cascade
syntax that saves me from

00:07:57.870 --> 00:08:00.040
writing div two times.

00:08:00.040 --> 00:08:03.250
Also notice that I'm setting the
text property of the div

00:08:03.250 --> 00:08:06.660
element rather than the
inner HTML property.

00:08:06.660 --> 00:08:08.680
That way, I don't have to
worry about cross site

00:08:08.680 --> 00:08:10.320
scripting attacks.

00:08:10.320 --> 00:08:13.060
Now I can call print string to
say that the Dart application

00:08:13.060 --> 00:08:14.460
has loaded.

00:08:14.460 --> 00:08:17.430
At this point, I could compile
the Dart to JavaScript.

00:08:17.430 --> 00:08:20.160
However, during development,
it's much faster to run the

00:08:20.160 --> 00:08:21.240
code in Dartium.

00:08:21.240 --> 00:08:24.800
I'm going to copy the URL from
Chrome, and then come over

00:08:24.800 --> 00:08:28.100
here to my Dart Editor
directory, where I have Dart

00:08:28.100 --> 00:08:31.770
Editor, and click on Chromium.

00:08:31.770 --> 00:08:35.549
Now, this is actually Dartium,
and it understands Dart

00:08:35.549 --> 00:08:37.919
natively, and so it's going
to run the code natively.

00:08:37.919 --> 00:08:38.870
And there we go.

00:08:38.870 --> 00:08:41.080
It says Dart application
loaded.

00:08:41.080 --> 00:08:44.480
So Dart is interacting
with the HTML page.

00:08:44.480 --> 00:08:47.520
Furthermore, you could see that
Dart and GWT are both

00:08:47.520 --> 00:08:50.080
running on the same page at
the same time, managing

00:08:50.080 --> 00:08:52.200
different parts of
the same page.

00:08:52.200 --> 00:08:55.880
Later, I'll show you how they
could work even more closely.

00:08:55.880 --> 00:08:58.230
Now is a great time for me to
show you how to debug your

00:08:58.230 --> 00:08:59.980
code in Dart Editor.

00:08:59.980 --> 00:09:02.370
Even though the code is being
served from a web server

00:09:02.370 --> 00:09:04.720
running in Eclipse, you
could still debug the

00:09:04.720 --> 00:09:06.140
code in Dart Editor.

00:09:06.140 --> 00:09:08.950
I just need to create a custom
launch configuration with the

00:09:08.950 --> 00:09:10.270
correct URL.

00:09:10.270 --> 00:09:15.010
So I'll come up here and
manage launches.

00:09:15.010 --> 00:09:17.890
I already got rid of all the
other launch configurations,

00:09:17.890 --> 00:09:19.900
so I'm going to create a
new one with Dartium.

00:09:19.900 --> 00:09:21.990
I'll call it Dartium.

00:09:21.990 --> 00:09:23.910
And here's the URL
that we used.

00:09:23.910 --> 00:09:27.170
We got this from our
Chrome launch.

00:09:27.170 --> 00:09:30.680
And we'll run in checked
mode, and so forth.

00:09:30.680 --> 00:09:32.930
And we need to pick the project,
which is, of course,

00:09:32.930 --> 00:09:34.590
Dart application.

00:09:34.590 --> 00:09:36.560
And I'll go ahead
and run that.

00:09:39.180 --> 00:09:40.030
Great.

00:09:40.030 --> 00:09:42.890
This time, I'm going to set a
breakpoint in the editor.

00:09:42.890 --> 00:09:44.665
And I'm going to go ahead
and run that again.

00:09:49.080 --> 00:09:54.190
And it dumps me immediately back
into Dart Editor, and you

00:09:54.190 --> 00:09:57.100
can see my various variables.

00:09:57.100 --> 00:09:59.510
I'll go ahead and step over
the code a little bit.

00:10:02.610 --> 00:10:05.410
So we have a Dart div,
window, and so forth,

00:10:05.410 --> 00:10:06.890
and here's my stack.

00:10:06.890 --> 00:10:10.070
And so you can see that I can
debug my Dart code from within

00:10:10.070 --> 00:10:11.630
Dart Editor.

00:10:11.630 --> 00:10:13.990
Another thing that I could do is
come over here to generate

00:10:13.990 --> 00:10:16.450
JavaScript.

00:10:16.450 --> 00:10:19.920
And that's going to compile my
Dart to JavaScript, and then I

00:10:19.920 --> 00:10:23.500
can go over to Chrome, then,
from within Chrome, I'll

00:10:23.500 --> 00:10:27.450
select Tools, Developer Tools.

00:10:27.450 --> 00:10:31.000
Click on the gear icon here, and
I will enable source maps.

00:10:31.000 --> 00:10:32.830
Great, that's done already.

00:10:32.830 --> 00:10:35.650
And then come over
here to sources--

00:10:35.650 --> 00:10:37.820
I'll have to get rid of
this real quick--

00:10:37.820 --> 00:10:42.800
and then I could pick from here
the DartApplication.dart.

00:10:42.800 --> 00:10:44.280
And notice, this is Chrome.

00:10:44.280 --> 00:10:46.240
It doesn't actually
understand Dart.

00:10:46.240 --> 00:10:48.060
But because of source
maps, it's able to

00:10:48.060 --> 00:10:49.540
show me the Dart code.

00:10:49.540 --> 00:10:53.230
And from here, I'm even able to
set break points and debug

00:10:53.230 --> 00:10:55.750
it from within Chrome.

00:10:55.750 --> 00:10:58.800
If you're using GWT, it's very
likely you have Java on the

00:10:58.800 --> 00:11:00.400
server side, too.

00:11:00.400 --> 00:11:03.100
Hence, it's important that your
Dart code be able to talk

00:11:03.100 --> 00:11:05.320
to your Java code
on the server.

00:11:05.320 --> 00:11:08.500
If you're used to using GWT, you
may be accustomed to using

00:11:08.500 --> 00:11:11.560
GWT RPC to talk to your
Java servlets.

00:11:11.560 --> 00:11:14.210
Unfortunately, that's not
an option for Dart.

00:11:14.210 --> 00:11:17.410
The protocol is very specific
to GWT and Java.

00:11:17.410 --> 00:11:20.220
However, you could certainly
generate JSON using your Java

00:11:20.220 --> 00:11:24.025
servlet, and then consume that
JSON from Dart using an XML

00:11:24.025 --> 00:11:26.120
HTTP request.

00:11:26.120 --> 00:11:29.570
It's not as slick as GWT RPC,
but it definitely works.

00:11:29.570 --> 00:11:31.470
Let me show you how
to do that.

00:11:31.470 --> 00:11:34.210
Here's the code for a servlet
that serves JSON.

00:11:34.210 --> 00:11:36.360
In this code, I'm hard
coding the JSON.

00:11:36.360 --> 00:11:39.190
But naturally, you could
generate the JSON dynamically

00:11:39.190 --> 00:11:41.050
using a JSON library.

00:11:41.050 --> 00:11:44.830
In order to make use of
JSONservlet.java, you have to

00:11:44.830 --> 00:11:47.470
edit web.xml, and tie
the servlet to a

00:11:47.470 --> 00:11:50.480
particular HTTP path.

00:11:50.480 --> 00:11:53.870
This requires a servlet tag
and a servlet mapping tag.

00:11:53.870 --> 00:11:56.530
Notice the URL that I used.

00:11:56.530 --> 00:11:58.880
Let's restart the application
and check to make sure that

00:11:58.880 --> 00:12:03.440
the servlet is actually
generating the JSON correctly.

00:12:03.440 --> 00:12:05.770
I could view that
URL in Chrome.

00:12:05.770 --> 00:12:06.130
Good.

00:12:06.130 --> 00:12:09.760
It looks like the application is
generating JSON correctly.

00:12:09.760 --> 00:12:10.560
Now let's look at

00:12:10.560 --> 00:12:13.220
DartApplication.dart in Dart Editor.

00:12:13.220 --> 00:12:17.770
I use HTTP request dot get
string to fetch a URL.

00:12:17.770 --> 00:12:21.100
Rather than take a call back,
it returns a future object.

00:12:21.100 --> 00:12:24.530
I register a success handler
using the then method, and an

00:12:24.530 --> 00:12:27.460
error handler using the
catch error method.

00:12:27.460 --> 00:12:30.190
The use of futures is pretty
pervasive in Dart, both on the

00:12:30.190 --> 00:12:33.100
client side as well as the
server side, so this code will

00:12:33.100 --> 00:12:35.990
look familiar if you're
a Dart developer.

00:12:35.990 --> 00:12:37.880
In this code, I'm just
printing out the JSON

00:12:37.880 --> 00:12:41.450
response, but it's trivial to
parse it using the Dart colon

00:12:41.450 --> 00:12:43.410
JSON library.

00:12:43.410 --> 00:12:45.760
Now that we've covered getting
Dart to talk to your Java

00:12:45.760 --> 00:12:48.250
server, let's cover how
to get Dart and GWT

00:12:48.250 --> 00:12:49.730
to talk to one another.

00:12:49.730 --> 00:12:52.850
One approach that HTML5 provides
for getting different

00:12:52.850 --> 00:12:55.340
things to talk to each
other in a browser is

00:12:55.340 --> 00:12:57.110
window.postMessage.

00:12:57.110 --> 00:12:59.250
You could use window.postMessage
for lots of

00:12:59.250 --> 00:13:02.140
things, such as communicating
with your C code written using

00:13:02.140 --> 00:13:04.430
[INAUDIBLE], or getting webpages
from different

00:13:04.430 --> 00:13:06.400
domains to communicate.

00:13:06.400 --> 00:13:08.140
It's also one way of getting
Dart and GWT

00:13:08.140 --> 00:13:09.660
to talk to one another.

00:13:09.660 --> 00:13:12.250
They could simply pass messages
back and forth.

00:13:12.250 --> 00:13:14.730
However, since GWT doesn't
have native support for

00:13:14.730 --> 00:13:18.880
window.postMessage, I'll need to
use JSNI, GWT's JavaScript

00:13:18.880 --> 00:13:21.050
native interface.

00:13:21.050 --> 00:13:23.990
In the following, I'm going to
show you six pieces of code.

00:13:23.990 --> 00:13:27.790
How to call postMessage from GWT
and then from Dart; how to

00:13:27.790 --> 00:13:30.770
listen for postMessage from GWT
and then from Dart; and

00:13:30.770 --> 00:13:33.580
how to create a button to
generate a postMessage from

00:13:33.580 --> 00:13:35.080
GWT and then from Dart.

00:13:35.080 --> 00:13:37.620
Once it's all done, I'll show it
to you with all the pieces

00:13:37.620 --> 00:13:38.860
working together.

00:13:38.860 --> 00:13:41.890
First, let me show you how to
call postMessage from GWT.

00:13:41.890 --> 00:13:44.350
This requires JSNI, the
JavaScript native

00:13:44.350 --> 00:13:45.960
interface for GWT.

00:13:45.960 --> 00:13:48.300
I create a method called
postMessage that takes a

00:13:48.300 --> 00:13:49.990
string message.

00:13:49.990 --> 00:13:52.270
Notice that I use the
native keyword.

00:13:52.270 --> 00:13:54.850
The body of the method is a
weird mix of JavaScript and

00:13:54.850 --> 00:13:57.170
JSNI hidden in a comment.

00:13:57.170 --> 00:13:59.460
In order to call
window.postMessage, I have to

00:13:59.460 --> 00:14:03.410
call dollar wnd dot
postMessage.

00:14:03.410 --> 00:14:06.520
Now let me show you how to call
postMessage from Dart.

00:14:06.520 --> 00:14:08.890
Hmm, well, that's not
very exciting.

00:14:08.890 --> 00:14:10.290
Now let me show you
how to listen for

00:14:10.290 --> 00:14:11.880
message events in GWT.

00:14:11.880 --> 00:14:14.210
Let's start by calling a new
method called listen for

00:14:14.210 --> 00:14:16.930
postMessage in on module load.

00:14:16.930 --> 00:14:19.510
Now I have to implement listen
for postMessage.

00:14:19.510 --> 00:14:22.030
Just like before, this requires
JSNI, which is why I

00:14:22.030 --> 00:14:25.120
had to pull the code for listen
for postMessage out of

00:14:25.120 --> 00:14:27.970
on module load and into
its own method.

00:14:27.970 --> 00:14:31.540
The key part is window dot add
event listener, where we

00:14:31.540 --> 00:14:33.720
listen for message events.

00:14:33.720 --> 00:14:34.830
That takes a call back.

00:14:34.830 --> 00:14:37.720
Notice that I have to set
var that equals this.

00:14:37.720 --> 00:14:40.850
This is a little JavaScript
trick that's necessary because

00:14:40.850 --> 00:14:43.680
of a weird scoping issue
in JavaScript.

00:14:43.680 --> 00:14:46.880
Inside the add event listener,
there's a really long piece of

00:14:46.880 --> 00:14:49.700
code that has a fully qualified
class name.

00:14:49.700 --> 00:14:51.420
This is the JSNI code
necessary to

00:14:51.420 --> 00:14:53.370
call back into Java.

00:14:53.370 --> 00:14:56.370
I call from JavaScript into my
on post message, which is a

00:14:56.370 --> 00:14:57.990
simple Java method.

00:14:57.990 --> 00:15:00.820
The nice thing is that JSNI
takes care of casting the data

00:15:00.820 --> 00:15:04.000
to the right types when calling
on postMessage.

00:15:04.000 --> 00:15:07.350
Inside on postMessage, I just
print a string saying that GWT

00:15:07.350 --> 00:15:10.000
has received a postMessage.

00:15:10.000 --> 00:15:12.330
Here's how to listen for
postMessage in Dart.

00:15:12.330 --> 00:15:15.690
Once again, Dart provides an
API, so it's pretty easy.

00:15:15.690 --> 00:15:18.650
I just call window dot on
message dot listen,

00:15:18.650 --> 00:15:20.230
and pass a call back.

00:15:20.230 --> 00:15:23.960
Notice the convenient function
expression syntax, the use of

00:15:23.960 --> 00:15:27.340
triple quotes, and the use
of string interpolation.

00:15:27.340 --> 00:15:29.000
Now let's create a
button in GWT.

00:15:29.000 --> 00:15:31.470
Clicking on the button will
send a postMessage.

00:15:31.470 --> 00:15:33.190
This code is fairly
straightforward.

00:15:33.190 --> 00:15:36.980
It just calls the postMessage
method that we wrote earlier.

00:15:36.980 --> 00:15:39.730
Now let's look at the Dart code
to do the same thing.

00:15:39.730 --> 00:15:43.280
I create a new button element,
and set some properties on it.

00:15:43.280 --> 00:15:46.020
I add the GWT button class to
it to make sure it looks the

00:15:46.020 --> 00:15:48.205
same as the button
I created in GWT.

00:15:48.205 --> 00:15:49.910
My on click listener just calls

00:15:49.910 --> 00:15:52.390
window.postMessage directly.

00:15:52.390 --> 00:15:54.130
Now let's see if everything
works.

00:15:54.130 --> 00:15:57.240
First, I'll restart the
server just in case.

00:15:57.240 --> 00:15:58.955
Then I'll hit reload
in Dartium.

00:16:03.350 --> 00:16:05.990
I click on each of the buttons,
first to generate a

00:16:05.990 --> 00:16:09.240
postMessage from GWT, and
then to generate a

00:16:09.240 --> 00:16:11.470
postMessage from Dart.

00:16:11.470 --> 00:16:14.590
Notice that it doesn't matter
who sends the postMessage.

00:16:14.590 --> 00:16:16.140
Both sides receive it.

00:16:16.140 --> 00:16:18.420
That's just something you have
to keep in mind when you use

00:16:18.420 --> 00:16:20.590
postMessage the way
we're using it.

00:16:20.590 --> 00:16:22.460
From the browser's perspective,
there's no

00:16:22.460 --> 00:16:25.200
difference between whether
Dart or GWT is calling

00:16:25.200 --> 00:16:27.090
window.postMessage.

00:16:27.090 --> 00:16:29.720
By the way, I'm kind of ignoring
the origin of the

00:16:29.720 --> 00:16:30.800
postMessage.

00:16:30.800 --> 00:16:33.240
You could read more about
postMessage online to learn

00:16:33.240 --> 00:16:35.900
about the security implications
of properly

00:16:35.900 --> 00:16:37.190
checking the origin.

00:16:37.190 --> 00:16:40.750
But that's outside the scope
of this tutorial.

00:16:40.750 --> 00:16:44.480
Window.postMessage is a useful
tool to have in your toolbox,

00:16:44.480 --> 00:16:47.150
because it can work in a variety
of situations, as I

00:16:47.150 --> 00:16:48.730
mentioned earlier.

00:16:48.730 --> 00:16:52.480
However, since Dart and GWT
both have an API for

00:16:52.480 --> 00:16:55.950
JavaScript interoperability, you
could use JavaScript as an

00:16:55.950 --> 00:16:58.530
intermediary between
Dart and GWT.

00:16:58.530 --> 00:17:01.790
They can even synchronously
call each other's methods.

00:17:01.790 --> 00:17:05.910
This lets you do very fine
grained interoperability.

00:17:05.910 --> 00:17:08.560
However, this fine grained
interoperability

00:17:08.560 --> 00:17:10.640
comes with a cost.

00:17:10.640 --> 00:17:13.750
First of all, using Dart's JS
package can almost double the

00:17:13.750 --> 00:17:17.470
size of the generated
JavaScript for Dart.

00:17:17.470 --> 00:17:21.280
In my sample, it made the
JavaScript 89% larger.

00:17:21.280 --> 00:17:24.710
Secondly, because Dart can run
natively in Dartium, and

00:17:24.710 --> 00:17:27.380
because doing distributed
garbage collection across two

00:17:27.380 --> 00:17:30.460
virtual machines is nontrivial,
using the JS

00:17:30.460 --> 00:17:33.760
package to integrate with
JavaScript and Dart requires a

00:17:33.760 --> 00:17:36.910
little more work than in other
languages that always compile

00:17:36.910 --> 00:17:38.440
the JavaScript.

00:17:38.440 --> 00:17:40.890
Rather than show you how to put
a single callback function

00:17:40.890 --> 00:17:42.940
on the window object, I'm
going to show you how to

00:17:42.940 --> 00:17:46.170
create a JavaScript module so
that you could have lots of

00:17:46.170 --> 00:17:47.580
callback functions.

00:17:47.580 --> 00:17:49.660
Hence, I'm going to show
you four things--

00:17:49.660 --> 00:17:52.430
how to create a JavaScript
module and a callback function

00:17:52.430 --> 00:17:56.150
in GWT, and then in Dart, how to
call the Dart callback from

00:17:56.150 --> 00:17:59.720
GWT, and how to call the
GWT callback from Dart.

00:17:59.720 --> 00:18:01.730
Just like I did for postMessage,
I'll create a

00:18:01.730 --> 00:18:04.800
button on each side that the
user can click on in order to

00:18:04.800 --> 00:18:06.840
invoke the callbacks.

00:18:06.840 --> 00:18:08.570
First, let's start with GWT.

00:18:08.570 --> 00:18:12.360
In on module load, I'll call
a new method, init GWT

00:18:12.360 --> 00:18:13.950
application module.

00:18:13.950 --> 00:18:18.630
Init GWT application module
is implemented using JSNI.

00:18:18.630 --> 00:18:21.950
I set window dot GWT application
module to a new

00:18:21.950 --> 00:18:24.470
JavaScript object that
contains a single

00:18:24.470 --> 00:18:26.510
method, GWT call back.

00:18:26.510 --> 00:18:29.850
GWT call back is a JavaScript
method that calls a Java

00:18:29.850 --> 00:18:32.960
method that is also called
GWT call back.

00:18:32.960 --> 00:18:35.610
Hence, with just a little bit
of JSNI code, I've set up a

00:18:35.610 --> 00:18:38.650
JavaScript module where I could
add as many call backs

00:18:38.650 --> 00:18:42.540
as I need, and I can implement
those call backs using Java.

00:18:42.540 --> 00:18:45.020
To make it even more realistic,
the GWT callback

00:18:45.020 --> 00:18:47.030
method takes three parameters.

00:18:47.030 --> 00:18:50.390
An int, a string, and
a JavaScript object.

00:18:50.390 --> 00:18:54.020
I did this to show you that Dart
and GWT can pass complex

00:18:54.020 --> 00:18:57.040
JavaScript objects back and
forth to each other.

00:18:57.040 --> 00:19:00.280
Finally, the GWT callback
method returns a string.

00:19:00.280 --> 00:19:02.440
There's another interesting
thing to notice.

00:19:02.440 --> 00:19:05.600
The Java version of GWT callback
receives a JavaScript

00:19:05.600 --> 00:19:08.670
object passed from Dart
instance, rather than a

00:19:08.670 --> 00:19:10.940
JavaScript object instance.

00:19:10.940 --> 00:19:14.970
This is based on GWT's notion
of JavaScript overlay types.

00:19:14.970 --> 00:19:18.450
The JavaScript object passed
from Dart class extends

00:19:18.450 --> 00:19:22.790
JavaScript object, and it adds
a hello method implemented in

00:19:22.790 --> 00:19:25.960
JSNI, so that the Java code can
interact more easily with

00:19:25.960 --> 00:19:29.000
the JavaScript object
passed from Dart.

00:19:29.000 --> 00:19:31.570
As a final comment, unlike with
postMessage, where the

00:19:31.570 --> 00:19:34.950
message was asynchronous and
went to everyone listening for

00:19:34.950 --> 00:19:38.590
messages, in this case, the call
back is synchronous, only

00:19:38.590 --> 00:19:42.240
goes to a single listener, and
even has a return value.

00:19:42.240 --> 00:19:44.470
Nonetheless, the implementation
isn't too

00:19:44.470 --> 00:19:47.290
different from the code we
used for postMessage.

00:19:47.290 --> 00:19:49.860
Over on the Dart side, the code
looks very different.

00:19:49.860 --> 00:19:52.820
First, I have to add the JS
package as a dependency in my

00:19:52.820 --> 00:19:54.580
pubspec.yaml.

00:19:54.580 --> 00:19:58.400
Dart Editor recognizes when I
change pubspec.yaml and will

00:19:58.400 --> 00:20:01.090
automatically run Pub Install
for me to update my

00:20:01.090 --> 00:20:02.380
dependencies.

00:20:02.380 --> 00:20:04.100
If it doesn't, you
can always select

00:20:04.100 --> 00:20:06.500
Tools, Reanalyze Sources.

00:20:06.500 --> 00:20:09.860
Next, I have to add some code
in DartApplication.dart.

00:20:09.860 --> 00:20:14.320
I start by importing the JS
package using the prefix JS.

00:20:14.320 --> 00:20:15.970
Now, let's look at the
code for setting up

00:20:15.970 --> 00:20:17.640
the JavaScript module.

00:20:17.640 --> 00:20:20.780
In this code, JS.context is
basically a reference to the

00:20:20.780 --> 00:20:22.730
JavaScript window object.

00:20:22.730 --> 00:20:26.520
I create a new JavaScript object
using JS.map, and I

00:20:26.520 --> 00:20:27.770
assign it to JS.context.darta
pplicationmodule.

00:20:30.610 --> 00:20:33.400
Then, inside the JavaScript
object, I create a new

00:20:33.400 --> 00:20:37.020
callback called Dart Callback
that references a Dart

00:20:37.020 --> 00:20:40.330
function that is also called
Dart Callback.

00:20:40.330 --> 00:20:43.790
Notice that Dart's JavaScript
interoperability API doesn't

00:20:43.790 --> 00:20:47.120
let you sling little bits of
JavaScript all over the place.

00:20:47.120 --> 00:20:50.240
Furthermore, the API requires
that you be a little bit more

00:20:50.240 --> 00:20:53.030
explicit about how memory
is managed.

00:20:53.030 --> 00:20:56.820
For instance, notice that the
use of js.scoped which sets up

00:20:56.820 --> 00:20:58.280
a memory context.

00:20:58.280 --> 00:21:00.440
The Dart team did it this
way because dealing with

00:21:00.440 --> 00:21:03.530
distributed garbage collection
when you have two entirely

00:21:03.530 --> 00:21:06.720
separate VMs is a very
difficult problem.

00:21:06.720 --> 00:21:09.240
On the other hand, the Dart
code is pure Dart.

00:21:09.240 --> 00:21:11.510
It's easy to create a JavaScript
object using

00:21:11.510 --> 00:21:14.490
JS.map, and it's easy to set up
a callback that will call

00:21:14.490 --> 00:21:17.670
back into Dart using
JS.callback.

00:21:17.670 --> 00:21:20.140
In this case, the callback might
be called many times

00:21:20.140 --> 00:21:24.060
instead of just once, so I used
JS.callback.many rather

00:21:24.060 --> 00:21:26.440
than JS.callback.once.

00:21:26.440 --> 00:21:29.110
By the way, the astute reader
might be wondering if Dart has

00:21:29.110 --> 00:21:32.270
JavaScript overlay types
like GWT does.

00:21:32.270 --> 00:21:34.870
If you look at the Dart version
of Dart call back,

00:21:34.870 --> 00:21:37.310
you'll see that Dart can
interact with a JavaScript

00:21:37.310 --> 00:21:40.310
object without needing to create
a specific JavaScript

00:21:40.310 --> 00:21:41.690
overlay type.

00:21:41.690 --> 00:21:45.560
That's because Dart uses a
JS.proxy object to act as a

00:21:45.560 --> 00:21:48.510
proxy object for the
JavaScript object.

00:21:48.510 --> 00:21:50.670
This is very convenient, because
it lets you use a

00:21:50.670 --> 00:21:54.230
JavaScript object as if it were
a native Dart object.

00:21:54.230 --> 00:21:57.120
On the other hand, GWT's
JavaScript overlay types do

00:21:57.120 --> 00:21:58.510
have one benefit.

00:21:58.510 --> 00:22:01.400
They work very well with code
completion in Eclipse.

00:22:01.400 --> 00:22:04.580
Code completion in Dart editor
isn't particularly helpful

00:22:04.580 --> 00:22:09.700
with JS proxy objects, since
JS proxy is a dynamic proxy

00:22:09.700 --> 00:22:13.730
which is based on Dart's
no such method feature.

00:22:13.730 --> 00:22:16.790
Now let's look at how to call
the Dart call back from GWT.

00:22:16.790 --> 00:22:19.500
Just like before, I set up a
button that the user can click

00:22:19.500 --> 00:22:21.610
on in order to call
the call back.

00:22:21.610 --> 00:22:24.800
This calls a JSNI method called
Call Dart Call Back,

00:22:24.800 --> 00:22:26.590
which I'll create in
just a moment.

00:22:26.590 --> 00:22:29.800
I can pass an int and a string
directly to Call Dart

00:22:29.800 --> 00:22:32.800
Callback, but in order to create
a native JavaScript

00:22:32.800 --> 00:22:36.140
object, I use another JSNI
method called Create Object

00:22:36.140 --> 00:22:37.080
For Callback.

00:22:37.080 --> 00:22:40.690
The Create Object For Callback
method is just a simple JSNI

00:22:40.690 --> 00:22:44.690
method that just returns an
opaque JavaScript object.

00:22:44.690 --> 00:22:47.580
Inside the method, you can see
that the JavaScript object

00:22:47.580 --> 00:22:49.280
itself is very simple.

00:22:49.280 --> 00:22:52.970
The Call Dart Callback method is
a JSNI method that takes an

00:22:52.970 --> 00:22:56.420
int, a string, and the
JavaScript object that we've

00:22:56.420 --> 00:22:59.370
created in Create Object
For Callback.

00:22:59.370 --> 00:23:03.780
Then it calls window.dartappli
cationmodule.dartcallback,

00:23:03.780 --> 00:23:05.750
which is pretty much how you'd
call the callback from

00:23:05.750 --> 00:23:07.110
JavaScript.

00:23:07.110 --> 00:23:11.820
Notice that Call Dart Callback
returns the string that is

00:23:11.820 --> 00:23:14.060
returned by the Dart callback.

00:23:14.060 --> 00:23:15.380
Now let's look at
the Dart code to

00:23:15.380 --> 00:23:16.930
invoke the GWT callback.

00:23:16.930 --> 00:23:18.990
Once again, I create
a button element.

00:23:18.990 --> 00:23:22.240
This time, however, the
onclick.listen event handler

00:23:22.240 --> 00:23:24.945
makes use of the JS library in
order to call JS.context.GWTap

00:23:24.945 --> 00:23:26.195
plicationmodule.GWTcallback.

00:23:30.210 --> 00:23:34.310
Remember that JS.context is
Dart's reference to JavaScript

00:23:34.310 --> 00:23:35.610
window object.

00:23:35.610 --> 00:23:38.560
I pass three parameters to the
GWT callback function--

00:23:38.560 --> 00:23:41.710
an int, a string, and a
JavaScript object, which I

00:23:41.710 --> 00:23:43.570
create with JS.map.

00:23:43.570 --> 00:23:47.160
Finally, I print the result
of the callback.

00:23:47.160 --> 00:23:50.270
OK, now that we have all the
code, let's try it out.

00:23:50.270 --> 00:23:53.530
I'm going to call the Dart
callback from GWT, and the

00:23:53.530 --> 00:23:56.650
Dart callback is called with
these parameters, and it says

00:23:56.650 --> 00:23:59.740
that Dart received a callback,
which is the return value.

00:23:59.740 --> 00:24:02.450
Now I'm going to call the
GWT callback from Dart.

00:24:02.450 --> 00:24:07.120
And the GWT callback is called
with these parameters, and

00:24:07.120 --> 00:24:09.490
Dart says that GWT received
the callback, which is the

00:24:09.490 --> 00:24:11.390
return value.

00:24:11.390 --> 00:24:14.100
It really is possible to get GWT
and Dart to talk to each

00:24:14.100 --> 00:24:18.880
other synchronously, using
JavaScript as an intermediary.

00:24:18.880 --> 00:24:20.530
The last approach I'm going
to show you is the

00:24:20.530 --> 00:24:21.980
most leading edge.

00:24:21.980 --> 00:24:25.040
Just like the section in which
I used window.postMessage to

00:24:25.040 --> 00:24:28.250
send events between GWT and
Dart, you can also use custom

00:24:28.250 --> 00:24:29.510
event objects.

00:24:29.510 --> 00:24:32.920
However, this time, instead of
using JSNI to work with APIs

00:24:32.920 --> 00:24:35.520
that GWT doesn't natively
support, I'll show you how to

00:24:35.520 --> 00:24:37.000
use Elemental.

00:24:37.000 --> 00:24:39.870
While I can't say that there was
actual blood involved in

00:24:39.870 --> 00:24:42.790
developing this part of the
sample, I can't say that it

00:24:42.790 --> 00:24:46.320
was pretty painful to be so
close to the bleeding edge.

00:24:46.320 --> 00:24:48.940
There are a bunch of hurdles to
overcome, and there isn't

00:24:48.940 --> 00:24:51.800
much documentation on Elemental,
or how to use

00:24:51.800 --> 00:24:54.430
custom event objects
in GWT and Dart.

00:24:54.430 --> 00:24:58.280
Elemental is a new library for
fast, lightweight, and to the

00:24:58.280 --> 00:25:00.210
metal web programming in GWT.

00:25:00.210 --> 00:25:02.830
It's intended for developers
who are comfortable working

00:25:02.830 --> 00:25:06.450
with the browser APIs that
JavaScript programmers use.

00:25:06.450 --> 00:25:09.320
Elemental is very convenient,
since it doesn't require you

00:25:09.320 --> 00:25:11.150
to write any JSNI code.

00:25:11.150 --> 00:25:14.270
However, it's still a fairly
new technology.

00:25:14.270 --> 00:25:17.900
Not only is it woefully
underdocumented, but it's also

00:25:17.900 --> 00:25:19.690
currently incompatible
with GWT's

00:25:19.690 --> 00:25:21.360
development mode plug-in.

00:25:21.360 --> 00:25:24.400
One approach is to switch to
super dev mode, which is an

00:25:24.400 --> 00:25:26.330
experimental replacement
for GWT's

00:25:26.330 --> 00:25:28.020
development mode plug-in.

00:25:28.020 --> 00:25:31.110
However, there are currently
a lot of drawbacks to using

00:25:31.110 --> 00:25:32.380
super dev mode.

00:25:32.380 --> 00:25:35.260
After consulting with another
GWT developer at Google, I

00:25:35.260 --> 00:25:38.600
opted for the safe, albeit
slow and painful route of

00:25:38.600 --> 00:25:41.690
recompiling to JavaScript and
restarting the server every

00:25:41.690 --> 00:25:43.310
time I make a change.

00:25:43.310 --> 00:25:46.440
This works, although it does
put a cramp in your style.

00:25:46.440 --> 00:25:49.100
Let's start on the GWT side
by setting up Elemental.

00:25:49.100 --> 00:25:51.730
Elemental does come with GWT,
but to actually use it, you

00:25:51.730 --> 00:25:54.130
have to copy the JAR
file from the SDK

00:25:54.130 --> 00:25:56.030
bundle into your project.

00:25:56.030 --> 00:25:57.910
I like to do this from
the command line.

00:25:57.910 --> 00:26:00.910
First, I CD into my clips
directory, because I know the

00:26:00.910 --> 00:26:03.230
SDK bundle is in there
somewhere.

00:26:03.230 --> 00:26:05.380
Then, I find the JAR file.

00:26:05.380 --> 00:26:09.430
Now I copy that file into GWT
application slash war slash

00:26:09.430 --> 00:26:11.460
webINF slash lib.

00:26:11.460 --> 00:26:13.980
Now I have to tell Eclipse to
make use of the new JAR file,

00:26:13.980 --> 00:26:17.680
so I'm going to right click on
the project and hit refresh.

00:26:17.680 --> 00:26:19.860
And then in the lib directory,
I'm going to find the GWT

00:26:19.860 --> 00:26:22.970
elemental JAR file that I copied
over, right click on

00:26:22.970 --> 00:26:26.460
that, and add it to
my build path.

00:26:26.460 --> 00:26:30.160
Now I have to set up elemental
in the GWT application dot GWT

00:26:30.160 --> 00:26:31.960
dot XML file.

00:26:31.960 --> 00:26:34.860
All I have to do is say that
the module inherits from

00:26:34.860 --> 00:26:36.910
Elemental.elemental.

00:26:36.910 --> 00:26:40.400
At this point, it's not a bad
idea to clean the project, run

00:26:40.400 --> 00:26:42.620
GWT compile, and restart
the server.

00:26:42.620 --> 00:26:45.130
If you're following along,
remember that Elemental is

00:26:45.130 --> 00:26:48.420
currently incompatible with
GWT's development mode.

00:26:48.420 --> 00:26:51.990
So that not only means you'll
have to recompile the Java

00:26:51.990 --> 00:26:55.560
code each time, I'm also going
to have to change the Dartium

00:26:55.560 --> 00:26:57.000
launch configuration.

00:26:57.000 --> 00:27:00.620
So I'm going to go here and
manage launch, click here, and

00:27:00.620 --> 00:27:03.580
the key thing is that I need
to remove this parameter

00:27:03.580 --> 00:27:06.910
called GWT code server.

00:27:06.910 --> 00:27:10.480
So I'm going to apply
that and run that.

00:27:10.480 --> 00:27:10.850
Great.

00:27:10.850 --> 00:27:12.340
Things still work.

00:27:12.340 --> 00:27:16.194
Another word of warning about
Elemental imports in GWT.

00:27:16.194 --> 00:27:19.780
com.google.gwt and Elemental
each have separate APIs for

00:27:19.780 --> 00:27:21.480
interacting with the browser.

00:27:21.480 --> 00:27:24.450
Hence, there's a lot of
overlapping class names.

00:27:24.450 --> 00:27:27.550
Pay close attention to where
you import classes from.

00:27:27.550 --> 00:27:29.740
In this section, we'll
mostly be importing

00:27:29.740 --> 00:27:31.410
classes from Elemental.

00:27:31.410 --> 00:27:33.120
Now, here's the code to
generate a custom

00:27:33.120 --> 00:27:35.140
event object in GWT.

00:27:35.140 --> 00:27:37.930
Just like before, I create a
button that the user can click

00:27:37.930 --> 00:27:40.070
on to generate the
custom event.

00:27:40.070 --> 00:27:43.360
I create the custom event using
document.createevent

00:27:43.360 --> 00:27:45.420
custom event, and I
cast the return

00:27:45.420 --> 00:27:47.190
value to a custom event.

00:27:47.190 --> 00:27:50.250
For the detail property, I
create a JSON object using

00:27:50.250 --> 00:27:53.080
JSJSONobject.create.

00:27:53.080 --> 00:27:55.730
Notice that I don't need
to use JSNI to create a

00:27:55.730 --> 00:27:57.330
JavaScript object.

00:27:57.330 --> 00:27:59.980
Then, I shove a bunch
of data into it.

00:27:59.980 --> 00:28:04.560
Next, I call init custom event,
passing in the custom

00:28:04.560 --> 00:28:07.100
event type and the
detail property.

00:28:07.100 --> 00:28:09.690
I serialize the detail
object to JSON

00:28:09.690 --> 00:28:11.810
using the to JSON method.

00:28:11.810 --> 00:28:15.290
Finally, I call window
dot dispatch event.

00:28:15.290 --> 00:28:19.330
By the way, it may be possible
to skip serialization to JSON,

00:28:19.330 --> 00:28:22.460
but I wasn't able to get it to
work with Dart under both

00:28:22.460 --> 00:28:25.020
Dartium and Dart to JS.

00:28:25.020 --> 00:28:27.260
The code to listen for a custom
event is even more

00:28:27.260 --> 00:28:28.210
straightforward.

00:28:28.210 --> 00:28:30.290
It, too, is free of JSNI code.

00:28:30.290 --> 00:28:32.470
I use add event listener
to listen for

00:28:32.470 --> 00:28:34.160
the custom Dart event.

00:28:34.160 --> 00:28:36.420
Then, in the event handler,
I cast the

00:28:36.420 --> 00:28:38.115
event to a custom event.

00:28:38.115 --> 00:28:41.740
I unpack the detail property
using JSON.parse.

00:28:41.740 --> 00:28:44.040
After that, it's
smooth sailing.

00:28:44.040 --> 00:28:47.120
Here's how to generate a custom
event object in Dart.

00:28:47.120 --> 00:28:49.730
I create a normal Dart
map with all the data

00:28:49.730 --> 00:28:51.370
that I want to pass.

00:28:51.370 --> 00:28:54.550
Next, I create a custom event
using Dart's custom event

00:28:54.550 --> 00:28:56.090
constructor.

00:28:56.090 --> 00:29:00.570
I serialize the detail to JSON
using JSON.stringify.

00:29:00.570 --> 00:29:03.090
Finally, I call
window.dispatchevent to

00:29:03.090 --> 00:29:05.040
dispatch the custom event.

00:29:05.040 --> 00:29:08.020
To listen for custom event
objects using the new streams

00:29:08.020 --> 00:29:11.960
API, I start by creating an
event stream provider called

00:29:11.960 --> 00:29:14.250
custom event stream provider.

00:29:14.250 --> 00:29:16.750
You don't have to do this for
most types of events, but

00:29:16.750 --> 00:29:19.540
custom events are,
well, custom.

00:29:19.540 --> 00:29:22.230
Now I can listen for custom
events on the window object

00:29:22.230 --> 00:29:24.450
using the custom event
stream provider

00:29:24.450 --> 00:29:26.080
that I created earlier.

00:29:26.080 --> 00:29:29.280
When I receive one, I unpack
the detail property using

00:29:29.280 --> 00:29:30.980
JSON.parse.

00:29:30.980 --> 00:29:33.650
JSON.parse returns a
normal Dart map.

00:29:33.650 --> 00:29:36.250
After that, it's once again
smooth sailing.

00:29:36.250 --> 00:29:38.800
To show everything working, I
need to compile the GWT to

00:29:38.800 --> 00:29:41.100
JavaScript and restart
the server.

00:29:41.100 --> 00:29:45.380
So I'm going to right click on
the GWT application, go to

00:29:45.380 --> 00:29:52.000
Google, GWT compile, compile.

00:29:52.000 --> 00:29:55.850
And now that that's done, I'm
going to restart the server.

00:29:55.850 --> 00:29:59.200
Now, in Dartium, I could
generate a custom GWT event,

00:29:59.200 --> 00:30:00.850
and Dart receives it.

00:30:00.850 --> 00:30:03.225
And I can generate a custom
Dart event, and

00:30:03.225 --> 00:30:04.320
GWT receives it.

00:30:04.320 --> 00:30:05.310
Great.

00:30:05.310 --> 00:30:08.340
Dartium's great, but let's
compile it to JavaScript so we

00:30:08.340 --> 00:30:09.590
can run it in other browsers.

00:30:13.154 --> 00:30:18.470
Here it is running in standard
Chrome, and here it is running

00:30:18.470 --> 00:30:19.720
in Firefox.

00:30:21.720 --> 00:30:23.950
The other buttons
work as well.

00:30:23.950 --> 00:30:24.530
Great.

00:30:24.530 --> 00:30:26.200
My work here is done.

00:30:26.200 --> 00:30:28.700
I hope I've convinced you that
if you already have a large

00:30:28.700 --> 00:30:31.710
GWT app, but you want to give
Dart a try, you shouldn't feel

00:30:31.710 --> 00:30:34.360
like you have to rewrite
your whole app.

00:30:34.360 --> 00:30:37.390
You can dip your toes in the
water to see if you like it.

00:30:37.390 --> 00:30:40.080
By the way, here are a couple
of other projects that you

00:30:40.080 --> 00:30:42.470
might be interested in, although
I haven't had a

00:30:42.470 --> 00:30:44.410
chance yet to check them out.

00:30:44.410 --> 00:30:47.700
As I was building this sample,
I made heavy use of the GWT

00:30:47.700 --> 00:30:51.160
and Dart documentation, and I
kept a list of links that I

00:30:51.160 --> 00:30:53.190
found particularly helpful.

00:30:53.190 --> 00:30:56.270
You can check the transcript
for all the details.

00:30:56.270 --> 00:30:57.380
Thanks for watching.

00:30:57.380 --> 00:31:00.140
You can download the sample
source code and the transcript

00:31:00.140 --> 00:31:03.950
for this video from
bit.ly/dart_with_gwt.

00:31:03.950 --> 00:31:06.285
If you'd like to learn more
about Dart, check out

00:31:06.285 --> 00:31:07.720
Dartlang.org.

00:31:07.720 --> 00:31:10.230
And if you have any questions
about using Dart with GWT,

00:31:10.230 --> 00:31:14.820
post them to Stack Overflow
using the tags Dart and GWT.

00:31:14.820 --> 00:31:17.330
If you'd like to follow
me on Google+, here's

00:31:17.330 --> 00:31:18.580
a link to my profile.

