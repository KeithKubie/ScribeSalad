WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.308
[MUSIC PLAYING]

00:00:02.620 --> 00:00:05.390
SEB GRUBB: Firstly,
we will clarify what

00:00:05.390 --> 00:00:07.280
is meant by shared storage--

00:00:07.280 --> 00:00:09.800
also known as external storage.

00:00:09.800 --> 00:00:11.660
Shared storage is
the area of apps--

00:00:11.660 --> 00:00:14.090
can write files visible
to other apps, once they

00:00:14.090 --> 00:00:18.080
get granted the reader right
external storage permission.

00:00:18.080 --> 00:00:22.630
Functions that return locations
within shared storage include--

00:00:22.630 --> 00:00:26.780
getExternalFilesDirs, which
returns your apps files folder;

00:00:26.780 --> 00:00:29.810
getExternalCachedDirs, which
returns your apps cache

00:00:29.810 --> 00:00:33.350
file folders; and get
ExternalMediaDirs, that returns

00:00:33.350 --> 00:00:34.890
your apps media folders.

00:00:34.890 --> 00:00:37.550
Game developers may also
be interested in the OBB

00:00:37.550 --> 00:00:40.290
directories returned
by getOBBDirs.

00:00:43.980 --> 00:00:47.620
Now, let's dive down into
what the stored situation is

00:00:47.620 --> 00:00:50.500
like currently on Android Pi.

00:00:50.500 --> 00:00:52.880
On one hand, we have
internal storage,

00:00:52.880 --> 00:00:54.130
which is private to your app--

00:00:57.250 --> 00:01:00.580
meaning, other apps will never
be able to access data there.

00:01:00.580 --> 00:01:04.660
Internal storage is thus a good
place for internal app data

00:01:04.660 --> 00:01:07.820
that the user doesn't
need to directly access.

00:01:07.820 --> 00:01:10.040
And on the other hand,
we have shared storage

00:01:10.040 --> 00:01:11.580
that we just talked about.

00:01:11.580 --> 00:01:15.030
It is a world-readable space
that can be viewed and modified

00:01:15.030 --> 00:01:16.710
by the user and apps.

00:01:16.710 --> 00:01:19.800
This is what you see when
you enable USB mass storage

00:01:19.800 --> 00:01:22.190
and plug your phone
into a computer.

00:01:22.190 --> 00:01:26.900
To see files in shared
storage or /SD card,

00:01:26.900 --> 00:01:28.820
apps need the
storage permission.

00:01:28.820 --> 00:01:33.380
For files written there, there
is no App-to-File attribution.

00:01:33.380 --> 00:01:36.500
There's only one exception.

00:01:36.500 --> 00:01:39.290
Shared storage contains
app-attributed directories

00:01:39.290 --> 00:01:41.840
that do not need any permission
to be accessed by the owner

00:01:41.840 --> 00:01:42.920
app.

00:01:42.920 --> 00:01:44.870
These include the
directories returned

00:01:44.870 --> 00:01:49.670
by the GetExternalFiles media
and CachedDirs functions.

00:01:49.670 --> 00:01:52.430
No permissions are needed, since
these folders have a clear app

00:01:52.430 --> 00:01:55.000
to follow ownership structure.

00:01:55.000 --> 00:01:58.450
This ownership structure
ensures that the files

00:01:58.450 --> 00:02:02.560
are cleaned on app uninstall.

00:02:02.560 --> 00:02:06.340
So that was the
situation in Android Pi.

00:02:06.340 --> 00:02:08.680
Storage is one of the
most popular permissions

00:02:08.680 --> 00:02:10.110
used by Android apps.

00:02:10.110 --> 00:02:13.690
And as a result, we've seen
apps behind in all kind of ways,

00:02:13.690 --> 00:02:17.020
resulting in issues
such as this clutter.

00:02:17.020 --> 00:02:20.500
In Android Q, we looked at how
we could improve shared storage

00:02:20.500 --> 00:02:23.035
by abiding to three
principles that improve

00:02:23.035 --> 00:02:25.190
the experience for users.

00:02:25.190 --> 00:02:28.260
The first one is
better attribution.

00:02:28.260 --> 00:02:30.590
Here, we're really
trying to solve clutter

00:02:30.590 --> 00:02:32.600
by avoiding files
lingering around on disk

00:02:32.600 --> 00:02:34.710
once an app is uninstalled.

00:02:34.710 --> 00:02:37.070
So in Q, when shown,
the system knows

00:02:37.070 --> 00:02:40.080
what files belong to what apps.

00:02:40.080 --> 00:02:42.590
This makes it easier for
users to manage their files.

00:02:42.590 --> 00:02:45.150
And it means that, when
the app is uninstalled.

00:02:45.150 --> 00:02:48.610
The Content [INAUDIBLE]
disk is cleaned up after.

00:02:48.610 --> 00:02:50.620
There's obviously always
content that user will

00:02:50.620 --> 00:02:52.360
want to possess post uninstall.

00:02:52.360 --> 00:02:54.580
And we'll talk about this later.

00:02:54.580 --> 00:02:57.820
The second principle
is protecting app data.

00:02:57.820 --> 00:03:00.050
When apps write files
to external storage,

00:03:00.050 --> 00:03:02.290
it should not be made
freely available and visible

00:03:02.290 --> 00:03:03.700
to other apps.

00:03:03.700 --> 00:03:05.290
You don't want
other apps looking

00:03:05.290 --> 00:03:06.730
into what your app is doing.

00:03:06.730 --> 00:03:09.490
So in Q, we're protecting
the app-specific data

00:03:09.490 --> 00:03:12.710
by disallowing other apps
to view this content.

00:03:12.710 --> 00:03:16.750
And the third principle
is protecting user data.

00:03:16.750 --> 00:03:18.670
When you download
files, such as pictures

00:03:18.670 --> 00:03:22.030
in your private conversations
or PDF of your bank statements,

00:03:22.030 --> 00:03:25.030
you probably don't want all apps
to immediately see these files

00:03:25.030 --> 00:03:27.070
and glean info
about your behavior.

00:03:27.070 --> 00:03:31.000
In Q, we're making sure
users know when and what

00:03:31.000 --> 00:03:33.280
files apps are accessing.

00:03:33.280 --> 00:03:38.860
So sticking to these
principles means

00:03:38.860 --> 00:03:40.870
that we are doing deep
changes in the ways

00:03:40.870 --> 00:03:42.370
storage works in Android.

00:03:42.370 --> 00:03:44.860
And we understand, it may
take some time for apps

00:03:44.860 --> 00:03:46.840
to adapt to these changes.

00:03:46.840 --> 00:03:48.340
But we think that,
in the long-term,

00:03:48.340 --> 00:03:50.980
this will help make Android
a better platform for users

00:03:50.980 --> 00:03:55.720
by providing better privacy
and storage management.

00:03:55.720 --> 00:03:57.900
So with this in mind,
let's have a look at how

00:03:57.900 --> 00:04:00.690
storage will work in Android Q.

00:04:00.690 --> 00:04:04.740
So in Android Q, we're
doubling down on MediaStore.

00:04:04.740 --> 00:04:07.500
The first change is that apps
can contribute to MediaStore

00:04:07.500 --> 00:04:09.310
without any permission.

00:04:09.310 --> 00:04:12.600
However, to view content
contributed by other apps,

00:04:12.600 --> 00:04:15.930
the Storage permission
is required.

00:04:15.930 --> 00:04:18.420
Apps can continue
to read and write

00:04:18.420 --> 00:04:20.950
to their app-specific
directories.

00:04:20.950 --> 00:04:23.250
But other apps, even if
they have obtained storage

00:04:23.250 --> 00:04:26.970
permission, cannot view them,
unless the files are attributed

00:04:26.970 --> 00:04:29.780
to them.

00:04:29.780 --> 00:04:32.810
Apps will still be able to pick
files present anywhere on disk,

00:04:32.810 --> 00:04:38.180
using the system picker,
which gives the app

00:04:38.180 --> 00:04:40.100
and user a
transactional approach

00:04:40.100 --> 00:04:42.590
to gain access to a file.

00:04:42.590 --> 00:04:44.653
This makes access
more secure, since it

00:04:44.653 --> 00:04:46.070
makes it more
explicit to the user

00:04:46.070 --> 00:04:50.400
what file or files
are being accessed.

00:04:50.400 --> 00:04:52.830
The final thing to
mention is the way

00:04:52.830 --> 00:04:58.200
that internal storage
is not changing in Q.

00:04:58.200 --> 00:05:02.010
So MediaStore is
not new to Android.

00:05:02.010 --> 00:05:03.960
In fact, it's been
here since day one.

00:05:03.960 --> 00:05:07.260
But Android Q-- we're
doubling down on MediaStore

00:05:07.260 --> 00:05:08.560
and improving it.

00:05:08.560 --> 00:05:12.650
So let's look more
into how it works.

00:05:12.650 --> 00:05:13.850
So first question is--

00:05:13.850 --> 00:05:15.830
what belongs in MediaStore?

00:05:15.830 --> 00:05:17.920
MediaStore is designed
to hold content

00:05:17.920 --> 00:05:19.720
that belongs to
the user and that

00:05:19.720 --> 00:05:21.730
is available to other apps.

00:05:21.730 --> 00:05:24.400
Thus, we recommend
only contributing files

00:05:24.400 --> 00:05:28.600
when the user actively
expects it to be present

00:05:28.600 --> 00:05:32.950
and the MediaStore collections,
such as explicitly taking

00:05:32.950 --> 00:05:35.110
a picture in the Camera app.

00:05:35.110 --> 00:05:38.590
The main types of media
present in MediaStore

00:05:38.590 --> 00:05:41.800
are audio, video, and images.

00:05:41.800 --> 00:05:44.230
So content contributed
to MediaStore

00:05:44.230 --> 00:05:46.690
persists post app uninstall.

00:05:46.690 --> 00:05:49.210
However, once the
app is uninstalled.

00:05:49.210 --> 00:05:52.130
The content is considered
to be orphaned.

00:05:52.130 --> 00:05:54.355
And if the same app is
then reinstalled later,

00:05:54.355 --> 00:05:56.230
it will need to obtain
the storage permission

00:05:56.230 --> 00:06:01.790
from the user to see content
it had previously contributed.

00:06:01.790 --> 00:06:04.620
Now, what doesn't
belong in MediaStore?

00:06:04.620 --> 00:06:06.320
This is a bit more
nuanced, since this

00:06:06.320 --> 00:06:08.270
is more that user expectations.

00:06:08.270 --> 00:06:11.450
But sometimes, it's pretty
obvious what doesn't belong.

00:06:11.450 --> 00:06:14.180
App-specific media-- like
thumbnails, album art,

00:06:14.180 --> 00:06:15.360
or stickers--

00:06:15.360 --> 00:06:17.360
would usually not be
appropriate for MediaStore,

00:06:17.360 --> 00:06:20.650
since they are not files a user
would want to see in other apps

00:06:20.650 --> 00:06:24.000
or see persist post
app's uninstall.

00:06:24.000 --> 00:06:28.680
In some cases, you may not be
sure where the content belongs.

00:06:28.680 --> 00:06:31.530
For example, users
in chat apps may

00:06:31.530 --> 00:06:33.600
exchange a large amount
of pictures that would

00:06:33.600 --> 00:06:35.760
create clutter in MediaStore.

00:06:35.760 --> 00:06:38.400
In these situations, we
suggest not contributing

00:06:38.400 --> 00:06:40.110
to MediaStore straight away.

00:06:40.110 --> 00:06:43.890
But wait until a user has
taken an explicit action,

00:06:43.890 --> 00:06:45.030
such as selecting Save.

00:06:48.080 --> 00:06:51.990
Now, in Android Q, we're
introducing a new collection

00:06:51.990 --> 00:06:54.830
in MediaStore, which is
the downloads collections.

00:06:54.830 --> 00:06:56.510
And this one works
a bit differently

00:06:56.510 --> 00:06:59.900
than the previous three
that we mentioned.

00:06:59.900 --> 00:07:01.740
This collection
is to place files

00:07:01.740 --> 00:07:03.990
that don't fit into
other collections,

00:07:03.990 --> 00:07:07.340
such as PDF files or any
other type of documents.

00:07:07.340 --> 00:07:09.320
You can also contribute
content there

00:07:09.320 --> 00:07:11.420
that would go into
other collections,

00:07:11.420 --> 00:07:14.090
if you want it to be explicitly
part of a downloads collection.

00:07:14.090 --> 00:07:18.020
In that case, they will also
be automatic contributed

00:07:18.020 --> 00:07:19.990
to the other
appropriate collections.

00:07:19.990 --> 00:07:23.840
So for example, if you download
a photo on your web browser

00:07:23.840 --> 00:07:25.580
and add it to the
Downloads collection,

00:07:25.580 --> 00:07:29.720
it will also be added to
the Images collection.

00:07:29.720 --> 00:07:31.960
So like the previous
mentioned collections,

00:07:31.960 --> 00:07:34.660
apps can view all the
content they contributed.

00:07:34.660 --> 00:07:38.390
However, to view files
contributed by other apps,

00:07:38.390 --> 00:07:39.920
a system picker--

00:07:39.920 --> 00:07:42.350
invoked by Action Open
Document, for example--

00:07:42.350 --> 00:07:45.570
is required to be used.

00:07:45.570 --> 00:07:47.960
Another tip is not
always contribute data

00:07:47.960 --> 00:07:50.960
to a downloads collection,
especially when the user might

00:07:50.960 --> 00:07:52.610
want to control the
way it's stored,

00:07:52.610 --> 00:07:54.720
such as saving a document.

00:07:54.720 --> 00:07:58.310
In this case, launching
Action Create Document Intent

00:07:58.310 --> 00:07:59.510
is recommended.

00:07:59.510 --> 00:08:02.900
It lets users choose any
local network or cloud storage

00:08:02.900 --> 00:08:05.790
provider location.

00:08:05.790 --> 00:08:09.003
So this was a quick overview
how MediaStore works.

00:08:09.003 --> 00:08:10.920
And I'm going to hand
you over to Jeff, who'll

00:08:10.920 --> 00:08:14.010
give you more details of
how to contribute and query

00:08:14.010 --> 00:08:15.045
MediaStore.

00:08:15.045 --> 00:08:15.640
Thanks, Jeff.

00:08:15.640 --> 00:08:16.890
JEFF SHARKEY: Thanks.

00:08:16.890 --> 00:08:17.948
Thanks, Seb.

00:08:17.948 --> 00:08:19.262
[APPLAUSE]

00:08:20.580 --> 00:08:22.950
So as Seb mentioned,
one of the big changes

00:08:22.950 --> 00:08:24.540
that we're making
in the Q release

00:08:24.540 --> 00:08:26.880
is we're giving you
developers the opportunity

00:08:26.880 --> 00:08:29.190
to contribute
items to MediaStore

00:08:29.190 --> 00:08:31.920
without needing the
storage permission.

00:08:31.920 --> 00:08:35.400
You can now insert, modify,
and delete any content

00:08:35.400 --> 00:08:38.700
that you own yourselves
into MediaStore.

00:08:38.700 --> 00:08:40.770
Only when you want
to work with content

00:08:40.770 --> 00:08:43.230
that has been contributed
by other applications

00:08:43.230 --> 00:08:45.840
do you need the storage
runtime permission.

00:08:45.840 --> 00:08:48.630
We think this is going to
be a great change for apps

00:08:48.630 --> 00:08:51.300
like photo or camera apps,
because you don't need

00:08:51.300 --> 00:08:53.220
the storage permission anymore.

00:08:53.220 --> 00:08:56.040
You can capture that image and
then save it into MediaStore.

00:08:56.040 --> 00:08:58.950
And you won't need that
runtime permission.

00:08:58.950 --> 00:09:01.260
As Seb also mentioned--
things that you contribute

00:09:01.260 --> 00:09:03.960
to these common collections,
it's your way of saying,

00:09:03.960 --> 00:09:06.000
this content
belongs to the user.

00:09:06.000 --> 00:09:08.610
And it's intended to
persist beyond the lifetime

00:09:08.610 --> 00:09:10.060
of your application.

00:09:10.060 --> 00:09:11.730
So if the user
uninstalls your app,

00:09:11.730 --> 00:09:14.700
that data is going
to be preserved.

00:09:14.700 --> 00:09:16.920
So let's take a look at an
example of how this works

00:09:16.920 --> 00:09:18.900
in practice with some code.

00:09:18.900 --> 00:09:22.170
As Seb mentioned, MediaStore has
been around since Android 1.0.

00:09:22.170 --> 00:09:24.540
So some of the APIs that
you're seeing on screen--

00:09:24.540 --> 00:09:26.340
you've already been
working with today.

00:09:26.340 --> 00:09:28.410
I'll focus on a
handful of places

00:09:28.410 --> 00:09:30.390
we've added new
special behaviors

00:09:30.390 --> 00:09:33.430
that can help make it
a better experience.

00:09:33.430 --> 00:09:35.350
So here, the code
sample on the slide--

00:09:35.350 --> 00:09:38.760
we're creating a ContentValues
to contribute a new image

00:09:38.760 --> 00:09:40.260
that we're working with.

00:09:40.260 --> 00:09:41.880
In the Q release,
all we need to do

00:09:41.880 --> 00:09:45.090
is specify the display name and
the MIME type of the content

00:09:45.090 --> 00:09:46.440
we're working with.

00:09:46.440 --> 00:09:49.738
In this case, it's
just a JPEG image.

00:09:49.738 --> 00:09:51.780
The new thing that's
highlighted on screen here--

00:09:51.780 --> 00:09:53.950
this is a new feature
in the Q release--

00:09:53.950 --> 00:09:56.010
the Is Pending flag.

00:09:56.010 --> 00:09:57.390
When you insert an item--

00:09:57.390 --> 00:10:00.150
like, when you inserted item
that is marked as pending,

00:10:00.150 --> 00:10:03.150
by default, it will be hidden
from other applications

00:10:03.150 --> 00:10:04.260
on the device.

00:10:04.260 --> 00:10:05.880
When they go query
MediaStore, they're

00:10:05.880 --> 00:10:08.340
not going to see that
item that's pending.

00:10:08.340 --> 00:10:10.110
This gives you, as
the developer, a way

00:10:10.110 --> 00:10:13.590
to temporarily work on that item
until you're ready to reveal it

00:10:13.590 --> 00:10:15.790
to other apps on the device.

00:10:15.790 --> 00:10:18.450
An example here might be if
you're a web browser working

00:10:18.450 --> 00:10:19.980
on a long-running
download, where

00:10:19.980 --> 00:10:22.890
you may switch between
mobile and Wi-Fi networks.

00:10:22.890 --> 00:10:26.400
You can insert that downloaded
item, mark it as pending.

00:10:26.400 --> 00:10:29.490
You can slowly work-- maybe
over 15 to 20 minutes--

00:10:29.490 --> 00:10:31.488
however long it takes
to download that item.

00:10:31.488 --> 00:10:33.030
And once you're
finished, that's when

00:10:33.030 --> 00:10:35.760
you can set that
Is Pending bit back

00:10:35.760 --> 00:10:40.060
to 0 to reveal it to other
applications on the device.

00:10:40.060 --> 00:10:42.480
So back to our example here--
we have our content values

00:10:42.480 --> 00:10:44.250
inserting something
that's pending.

00:10:44.250 --> 00:10:46.308
I don't believe we have
our content resolver.

00:10:46.308 --> 00:10:48.600
And we're going to be working
with the primary external

00:10:48.600 --> 00:10:50.600
storage volume.

00:10:50.600 --> 00:10:52.710
Content resolver.insert--
you've probably already

00:10:52.710 --> 00:10:54.040
been using that today.

00:10:54.040 --> 00:10:55.710
This is what's going
to insert a record

00:10:55.710 --> 00:10:57.510
to say that you want
to work on this item.

00:10:57.510 --> 00:11:01.440
It's reserving a space
for you to insert.

00:11:01.440 --> 00:11:05.490
Now, that we have that item,
the result of that Insert call

00:11:05.490 --> 00:11:08.460
was a new specific URI that
has been allocated just

00:11:08.460 --> 00:11:10.590
for you to work on that item.

00:11:10.590 --> 00:11:14.490
With that item URI, you can
now open a file descriptor--

00:11:14.490 --> 00:11:16.260
in this case, for
write access here.

00:11:16.260 --> 00:11:19.083
And you can stream
contents into place.

00:11:19.083 --> 00:11:21.000
So we've highlighted
some of the details here.

00:11:21.000 --> 00:11:23.040
If you need to, you
can also do that up

00:11:23.040 --> 00:11:24.720
in managed code in Java.

00:11:24.720 --> 00:11:27.630
You can also use that file
descriptor to go across JNI

00:11:27.630 --> 00:11:29.910
and contribute data,
if you have native code

00:11:29.910 --> 00:11:31.403
in your application.

00:11:31.403 --> 00:11:33.820
At some point, we'll be finished
with the file descriptor.

00:11:33.820 --> 00:11:34.840
We'll close it.

00:11:34.840 --> 00:11:37.320
And now it's time to reveal
that to the other apps

00:11:37.320 --> 00:11:38.190
on the device.

00:11:38.190 --> 00:11:41.160
And that's as simple as
clearly not that ContentValues,

00:11:41.160 --> 00:11:43.380
setting that Is
Pending bit to 0,

00:11:43.380 --> 00:11:46.008
and then calling
Content resolver.update.

00:11:46.008 --> 00:11:47.550
Once you make this
call, that's going

00:11:47.550 --> 00:11:51.610
to cause it to become visible
to the other apps on the device.

00:11:51.610 --> 00:11:53.200
So that was a simple example.

00:11:53.200 --> 00:11:54.870
Let's look at some
more complex ways--

00:11:54.870 --> 00:11:57.300
some new features that
we've given to you

00:11:57.300 --> 00:11:59.550
to work with in MediaStore.

00:11:59.550 --> 00:12:02.250
You now have the ability
to influence directories

00:12:02.250 --> 00:12:06.630
of where things are stored on
these external storage devices.

00:12:06.630 --> 00:12:08.250
In the simple
example that we just

00:12:08.250 --> 00:12:11.790
looked at a few moments ago, the
operating system automatically

00:12:11.790 --> 00:12:14.730
picks a safe default location.

00:12:14.730 --> 00:12:18.400
Because we were inserting
an image/JPEG object,

00:12:18.400 --> 00:12:21.990
the OS will put it in the
Pictures directory by default.

00:12:21.990 --> 00:12:23.550
Similarly, if we
were inserting--

00:12:23.550 --> 00:12:25.930
say-- an audio type
of file format,

00:12:25.930 --> 00:12:28.620
we would automatically insert
it into the Music directory

00:12:28.620 --> 00:12:30.040
on the device.

00:12:30.040 --> 00:12:32.550
So we're helping set
some good defaults.

00:12:32.550 --> 00:12:35.130
But you also have the
ability to influence if you

00:12:35.130 --> 00:12:36.910
want a specific directory.

00:12:36.910 --> 00:12:39.120
And this is the new
Relative Path column, which

00:12:39.120 --> 00:12:42.180
is part of the public API.

00:12:42.180 --> 00:12:44.040
You can set this
value to control where

00:12:44.040 --> 00:12:46.980
those files are placed on disk.

00:12:46.980 --> 00:12:49.530
We'll give an example of
that in just a moment.

00:12:49.530 --> 00:12:52.740
Similar to these two columns,
both the Relative Path

00:12:52.740 --> 00:12:54.310
and the Display Name--

00:12:54.310 --> 00:12:56.470
you can use them when
you're inserting content.

00:12:56.470 --> 00:12:58.340
But you can also
use them later on.

00:12:58.340 --> 00:13:00.840
Once you've published content,
if you need to move it around

00:13:00.840 --> 00:13:03.930
on disk, you can call
Content resolver.update

00:13:03.930 --> 00:13:05.190
with those columns.

00:13:05.190 --> 00:13:09.963
And the OS will now move the
content on disk on your behalf.

00:13:09.963 --> 00:13:11.380
So zooming out a
little bit more--

00:13:11.380 --> 00:13:13.130
we've talked about
influencing directories

00:13:13.130 --> 00:13:14.370
of where the content lands.

00:13:14.370 --> 00:13:16.650
In Q, we've also given
you more capabilities

00:13:16.650 --> 00:13:19.470
to control which storage
device it lands on.

00:13:19.470 --> 00:13:21.870
This is particularly
useful for Android devices

00:13:21.870 --> 00:13:25.810
have that have multiple
shared storage locations.

00:13:25.810 --> 00:13:27.840
They may have a
built-in shared storage.

00:13:27.840 --> 00:13:30.030
But they also may
have an SD card slot,

00:13:30.030 --> 00:13:32.040
where the user has
inserted something.

00:13:32.040 --> 00:13:34.440
Starting in Q, you now
have the flexibility

00:13:34.440 --> 00:13:38.400
to control which device you
want that content to land on.

00:13:38.400 --> 00:13:41.070
Earlier we mentioned the
Volume External Primary.

00:13:41.070 --> 00:13:44.530
That's the volume name of
that primary storage device.

00:13:44.530 --> 00:13:48.330
You can also call a new API,
Get External Volume Names.

00:13:48.330 --> 00:13:50.490
And this will enumerate
all of the possible storage

00:13:50.490 --> 00:13:55.090
locations that are available
for your application to use.

00:13:55.090 --> 00:13:57.660
Once you've selected one
of those volume names,

00:13:57.660 --> 00:14:00.450
it's easy to start working
with that collection,

00:14:00.450 --> 00:14:02.410
using the various
Get content URI

00:14:02.410 --> 00:14:06.360
methods that you'll find across
the collections in MediaStore.

00:14:06.360 --> 00:14:08.430
So if we pick a secondary
storage device--

00:14:08.430 --> 00:14:09.870
if we discover it--

00:14:09.870 --> 00:14:11.760
we can go past that
as the argument

00:14:11.760 --> 00:14:13.050
to the Get content URI--

00:14:13.050 --> 00:14:15.480
say, for example-- for
the Images collection.

00:14:15.480 --> 00:14:17.190
That will allow us
to work with images

00:14:17.190 --> 00:14:20.010
that are present on that
secondary storage device,

00:14:20.010 --> 00:14:22.150
such as an SD card.

00:14:22.150 --> 00:14:24.810
So let's take a look
at an example of both

00:14:24.810 --> 00:14:29.380
of these advanced concepts
together in one example.

00:14:29.380 --> 00:14:31.980
So the first thing we talked
about was that Relative path--

00:14:31.980 --> 00:14:34.597
being able to influence
where things land on disk.

00:14:34.597 --> 00:14:36.930
Here, we have a simple music
file that we're inserting--

00:14:36.930 --> 00:14:39.090
MySong.mp3.

00:14:39.090 --> 00:14:41.040
The relative path here--
we're asking for it

00:14:41.040 --> 00:14:45.000
to be placed under Music,
My Artist, My Album.

00:14:45.000 --> 00:14:48.480
Something worth noticing-- to
call back to Seb's point that

00:14:48.480 --> 00:14:49.680
he made earlier--

00:14:49.680 --> 00:14:53.550
one of our goals in Q is to help
ensure that the user's content

00:14:53.550 --> 00:14:55.795
is organized on their device.

00:14:55.795 --> 00:14:58.170
And so what this means-- that
top-level directory-- we're

00:14:58.170 --> 00:14:59.850
going to help make
sure that it's placed

00:14:59.850 --> 00:15:01.470
in a reasonable location.

00:15:01.470 --> 00:15:05.130
So here, we're inserting an
MP3 file-- an audio file--

00:15:05.130 --> 00:15:07.650
into the Music directory--
the top-level directory.

00:15:07.650 --> 00:15:10.890
The OS is going to allow this,
because the content type makes

00:15:10.890 --> 00:15:12.240
sense.

00:15:12.240 --> 00:15:16.020
If, for example, we were
trying to insert this MP3 file

00:15:16.020 --> 00:15:18.150
into the user's
Pictures collection,

00:15:18.150 --> 00:15:19.290
that doesn't make sense.

00:15:19.290 --> 00:15:20.610
That's disorganized.

00:15:20.610 --> 00:15:23.040
And so the OS would throw
an exception back to you.

00:15:23.040 --> 00:15:25.260
So just those three
common collection

00:15:25.260 --> 00:15:26.490
types that we discussed--

00:15:26.490 --> 00:15:28.470
Audio, Video, and Images--

00:15:28.470 --> 00:15:30.990
there's a handful of locations--
top-level directories--

00:15:30.990 --> 00:15:33.330
that are allowed
for each of those.

00:15:33.330 --> 00:15:36.210
You can find, in the developer
documentation, more details.

00:15:36.210 --> 00:15:39.803
But it's our way of helping keep
the user's content organized.

00:15:39.803 --> 00:15:41.970
All right-- so in this
example, that relative path--

00:15:41.970 --> 00:15:44.735
we've selected Music,
My Artist, My Album.

00:15:44.735 --> 00:15:46.860
Just like we did before,
we're going to use Insert.

00:15:46.860 --> 00:15:48.762
But the second
half of the slide--

00:15:48.762 --> 00:15:50.220
this is where we're
going to select

00:15:50.220 --> 00:15:52.920
a specific secondary
storage device.

00:15:52.920 --> 00:15:54.960
We're seeing what volume
names are available.

00:15:54.960 --> 00:15:56.310
And the ellipses there--

00:15:56.310 --> 00:15:57.810
it's up to you and
your application.

00:15:57.810 --> 00:15:59.520
But you could go
and prompt the user

00:15:59.520 --> 00:16:03.540
to select one of those storage
devices that are available.

00:16:03.540 --> 00:16:06.330
Or you could have settings
deep inside of your application

00:16:06.330 --> 00:16:08.310
where you let the
user pivot and choose

00:16:08.310 --> 00:16:11.217
one of those storage devices.

00:16:11.217 --> 00:16:13.050
Either way, when you've
made your selection,

00:16:13.050 --> 00:16:14.640
here's where you
pass that volume name

00:16:14.640 --> 00:16:16.265
into the Get Content URI.

00:16:16.265 --> 00:16:17.640
And this is what's
going to allow

00:16:17.640 --> 00:16:19.320
us to work with the
audio collection

00:16:19.320 --> 00:16:21.438
on a specific storage device.

00:16:21.438 --> 00:16:22.980
And then the final
call will actually

00:16:22.980 --> 00:16:25.790
insert that and work with it.

00:16:25.790 --> 00:16:28.450
So we talked quite a bit
about contributing content.

00:16:28.450 --> 00:16:31.060
Let's shift gears and
talk about discovery--

00:16:31.060 --> 00:16:32.740
if you'd like to
consume the content

00:16:32.740 --> 00:16:35.350
or list it or display
it to the user.

00:16:35.350 --> 00:16:37.930
Thankfully, the APIs you've
been working with today--

00:16:37.930 --> 00:16:39.760
content resolver.query--
those will

00:16:39.760 --> 00:16:42.190
continue to work with
these collection types.

00:16:42.190 --> 00:16:45.490
So you can query-- find items
in the user's Images or Music

00:16:45.490 --> 00:16:46.688
collection.

00:16:46.688 --> 00:16:48.230
The one thing we're
changing in the Q

00:16:48.230 --> 00:16:49.810
release-- we're
strongly recommending

00:16:49.810 --> 00:16:54.010
that you switch to using content
resolver.openfile descriptor

00:16:54.010 --> 00:16:57.970
when you want to work with
one of those particular items.

00:16:57.970 --> 00:17:00.250
And the reason is,
the data column,

00:17:00.250 --> 00:17:03.369
which has been there for many
years, has now been deprecated.

00:17:03.369 --> 00:17:04.869
And we'll get into
a little bit more

00:17:04.869 --> 00:17:07.329
later today on why
that's deprecated.

00:17:07.329 --> 00:17:09.760
But the best practice that
we're encouraging developers

00:17:09.760 --> 00:17:13.810
to move towards is using
Open File descriptor instead.

00:17:13.810 --> 00:17:15.800
You'll get back a
partial file descriptor,

00:17:15.800 --> 00:17:18.680
be able to send that either to
managed or down to native code.

00:17:18.680 --> 00:17:20.800
So it's quite flexible.

00:17:20.800 --> 00:17:22.930
As we mentioned
earlier, by default,

00:17:22.930 --> 00:17:25.240
applications that
query this collection

00:17:25.240 --> 00:17:28.510
won't see any pending items that
other applications are still

00:17:28.510 --> 00:17:30.760
working on.

00:17:30.760 --> 00:17:32.890
If users expect to
see those pending

00:17:32.890 --> 00:17:37.200
items in your application,
you can still modify the URI

00:17:37.200 --> 00:17:39.820
that you're about to query
to request that those pending

00:17:39.820 --> 00:17:41.710
items be included.

00:17:41.710 --> 00:17:43.360
One thing to note
is that, for each

00:17:43.360 --> 00:17:45.250
of the items that is
being contributed,

00:17:45.250 --> 00:17:47.560
we now track who
contributed it--

00:17:47.560 --> 00:17:50.260
who the owner is of those items.

00:17:50.260 --> 00:17:52.600
What this means is--
while an item is pending,

00:17:52.600 --> 00:17:56.000
only the owner of that item
can work with the content.

00:17:56.000 --> 00:17:58.300
They're the only ones
that can read or write

00:17:58.300 --> 00:18:00.310
the contents of the file.

00:18:00.310 --> 00:18:01.810
Only when they've
published it, when

00:18:01.810 --> 00:18:03.185
you've cleared
that pending flag,

00:18:03.185 --> 00:18:05.920
is it available for other
applications to see.

00:18:05.920 --> 00:18:08.530
The reason that's relevant here
for the set Include Pending--

00:18:08.530 --> 00:18:10.322
you'll be able to see
that other people are

00:18:10.322 --> 00:18:11.680
about to contribute items.

00:18:11.680 --> 00:18:13.455
You won't be able
to open those items

00:18:13.455 --> 00:18:15.580
until they've been published,
because they're still

00:18:15.580 --> 00:18:17.920
under construction.

00:18:17.920 --> 00:18:21.830
Here's an example of how to
use these things in practice.

00:18:21.830 --> 00:18:25.210
So here, we have a normal
collection-- the users Video

00:18:25.210 --> 00:18:26.710
collection.

00:18:26.710 --> 00:18:28.785
We've gotten our Get
Content URI from that.

00:18:28.785 --> 00:18:30.160
But in our case,
we'd like to see

00:18:30.160 --> 00:18:31.600
some of that pending content.

00:18:31.600 --> 00:18:34.300
The set Include Pending--
we pass in the URI.

00:18:34.300 --> 00:18:37.480
And we get back a slightly
modified version of that URI.

00:18:37.480 --> 00:18:39.490
It's modified to
tell us, as the OS,

00:18:39.490 --> 00:18:42.400
that you'd also like to
see the pending items.

00:18:42.400 --> 00:18:45.640
Once you've run a query with
a cursor that comes back,

00:18:45.640 --> 00:18:48.760
that gives it the opportunity
to show those items to the user

00:18:48.760 --> 00:18:51.040
and pick one to work with.

00:18:51.040 --> 00:18:52.930
Open File Descriptor
is another great choice

00:18:52.930 --> 00:18:55.810
here for a specific
item that you've found.

00:18:55.810 --> 00:18:58.180
With that partial file
descriptor that comes back--

00:18:58.180 --> 00:19:00.100
many of our utilities
across the US,

00:19:00.100 --> 00:19:04.240
whether it's Image Decoder
or other media player APIs--

00:19:04.240 --> 00:19:06.730
they're ready and willing
to accept that partial file

00:19:06.730 --> 00:19:08.380
descriptor.

00:19:08.380 --> 00:19:10.850
Finally, one side note at
the bottom of the slide--

00:19:10.850 --> 00:19:12.490
there's a new API in Q--

00:19:12.490 --> 00:19:15.130
content resolver.loadThumbnail.

00:19:15.130 --> 00:19:17.500
And this is designed to
provide an optimized path

00:19:17.500 --> 00:19:20.560
for loading a small lightweight
thumbnail in your app.

00:19:20.560 --> 00:19:22.060
You can imagine,
if you're scrolling

00:19:22.060 --> 00:19:23.980
through a large
list of contents,

00:19:23.980 --> 00:19:26.920
you don't want to open the
large heavyweight items just

00:19:26.920 --> 00:19:29.780
to generate a small thumbnail
to show to the user.

00:19:29.780 --> 00:19:31.690
So this new Load Thumbnail API--

00:19:31.690 --> 00:19:35.080
for a specific item, you pass
in the item you're interested in

00:19:35.080 --> 00:19:36.145
and the size--

00:19:36.145 --> 00:19:38.020
roughly, the dimensions
on-screen that you're

00:19:38.020 --> 00:19:39.790
looking to show to the user.

00:19:39.790 --> 00:19:42.400
Internally, in the OS,
we'll do the hard work

00:19:42.400 --> 00:19:45.610
of helping resize that image to
make it nice and lightweight.

00:19:45.610 --> 00:19:47.333
And we'll also
handle caching that,

00:19:47.333 --> 00:19:49.000
so that we ensure
that it's fast for you

00:19:49.000 --> 00:19:51.310
to reopen in the future.

00:19:51.310 --> 00:19:54.100
And we'll also handle-- if the
content has changed over time,

00:19:54.100 --> 00:19:56.050
we'll automatically
invalidate that thumbnail

00:19:56.050 --> 00:19:57.310
and regenerate it.

00:19:57.310 --> 00:20:00.010
So it's designed as a great
best practice API to use,

00:20:00.010 --> 00:20:03.070
if you want to just show
lightweight thumbnails.

00:20:03.070 --> 00:20:05.200
So now that we've
discovered items,

00:20:05.200 --> 00:20:07.570
let's talk about editing items.

00:20:07.570 --> 00:20:09.050
A change that we're
making in the Q

00:20:09.050 --> 00:20:10.840
release-- we've
already described items

00:20:10.840 --> 00:20:12.040
that you contribute.

00:20:12.040 --> 00:20:15.400
You have full read, write,
and delete access to the items

00:20:15.400 --> 00:20:16.990
that you have contributed.

00:20:16.990 --> 00:20:20.740
However, items that belong
to other applications,

00:20:20.740 --> 00:20:23.800
you'll only have read access to.

00:20:23.800 --> 00:20:27.130
If you'd like to be able to
modify or write those items,

00:20:27.130 --> 00:20:29.260
you'll need to involve the user.

00:20:29.260 --> 00:20:30.490
And we're doing this--

00:20:30.490 --> 00:20:33.070
any of the operations
on Content Resolver

00:20:33.070 --> 00:20:36.760
that work with modifying files,
whether it's Update, Delete,

00:20:36.760 --> 00:20:39.880
or opening a file descriptor
for the right mode--

00:20:39.880 --> 00:20:41.890
all of those-- they
will check internally

00:20:41.890 --> 00:20:44.680
if you have the right
permission to that item.

00:20:44.680 --> 00:20:46.120
If you don't have
the permission,

00:20:46.120 --> 00:20:49.270
it'll throw back a new type
of exception-- a Recoverable

00:20:49.270 --> 00:20:50.945
Security Exception.

00:20:50.945 --> 00:20:52.570
We'll dig into, in
a moment, an example

00:20:52.570 --> 00:20:53.697
of what this looks like.

00:20:53.697 --> 00:20:55.780
The easiest thing-- when
you receive one of these,

00:20:55.780 --> 00:20:57.680
it's telling you,
it's an exception.

00:20:57.680 --> 00:20:59.020
You don't have access now.

00:20:59.020 --> 00:21:01.420
But if you involve
the user, the user

00:21:01.420 --> 00:21:03.700
is able to grant you that
access so that you can have

00:21:03.700 --> 00:21:06.670
both read and write access.

00:21:06.670 --> 00:21:08.560
Let's take a look at an example.

00:21:08.560 --> 00:21:10.420
Here at the top,
we're attempting

00:21:10.420 --> 00:21:12.560
to delete a specific photo.

00:21:12.560 --> 00:21:14.620
But we don't have to
know ahead of time

00:21:14.620 --> 00:21:16.900
if we have that
permission or not.

00:21:16.900 --> 00:21:19.300
If we have the permission
to delete, we'll succeed.

00:21:19.300 --> 00:21:22.510
If we don't, it'll throw that
recoverable security exception

00:21:22.510 --> 00:21:23.530
back at us.

00:21:23.530 --> 00:21:26.170
And it's up to us to
involve the user in whatever

00:21:26.170 --> 00:21:27.940
way is most appropriate.

00:21:27.940 --> 00:21:29.380
In this example
on the code slide,

00:21:29.380 --> 00:21:31.360
we're going to be
showing an alert dialog

00:21:31.360 --> 00:21:33.820
to the user in our application.

00:21:33.820 --> 00:21:36.242
This alert dialog-- when
the user presses the button,

00:21:36.242 --> 00:21:38.200
we're going to launch
that PendingIntent that's

00:21:38.200 --> 00:21:39.675
included in that
exception, which

00:21:39.675 --> 00:21:41.800
is going to show a dialog
to the user, letting them

00:21:41.800 --> 00:21:43.870
grant that access
to your application

00:21:43.870 --> 00:21:47.300
for that specific item
that you're interested in.

00:21:47.300 --> 00:21:48.650
So we get that exception.

00:21:48.650 --> 00:21:49.900
There's a nice message.

00:21:49.900 --> 00:21:51.448
Under User Action,
it has a title.

00:21:51.448 --> 00:21:52.990
And there's also
that pending intent.

00:21:52.990 --> 00:21:55.150
That action item or
that action intent

00:21:55.150 --> 00:21:58.810
is a pending intent that you
can send to involve the user.

00:21:58.810 --> 00:22:00.670
The alert dialog
is just one example

00:22:00.670 --> 00:22:04.040
here for the purposes of
our presentation today.

00:22:04.040 --> 00:22:06.310
But depending on the
design of your application,

00:22:06.310 --> 00:22:08.650
you may also want to show
a notification to the user

00:22:08.650 --> 00:22:10.660
if you're trying to do
this in the background.

00:22:10.660 --> 00:22:12.160
There's many ways
to get the user

00:22:12.160 --> 00:22:14.440
to launch the pending intent.

00:22:14.440 --> 00:22:17.350
So it's quite flexible in
letting you figure out the best

00:22:17.350 --> 00:22:20.430
way to involve the user.

00:22:20.430 --> 00:22:22.020
So shifting gears
a little bit more--

00:22:22.020 --> 00:22:24.540
one thing we're focusing
on in Q is helping

00:22:24.540 --> 00:22:26.610
protect location metadata.

00:22:26.610 --> 00:22:28.590
As Seb mentioned, one
of the critical features

00:22:28.590 --> 00:22:31.410
we're building in Q is
helping protect users' privacy

00:22:31.410 --> 00:22:32.920
and security.

00:22:32.920 --> 00:22:34.350
And what this means
is-- normally,

00:22:34.350 --> 00:22:36.840
when you go interact
with an image file,

00:22:36.840 --> 00:22:40.570
we'll be redacting any
location information included,

00:22:40.570 --> 00:22:42.510
such as the latitude
or longitude,

00:22:42.510 --> 00:22:44.550
in the EXIF metadata.

00:22:44.550 --> 00:22:48.870
So if users expect to see
the location information

00:22:48.870 --> 00:22:52.110
inside of your app, you
can add a new permission--

00:22:52.110 --> 00:22:55.740
Access Media Location--
to your manifest.

00:22:55.740 --> 00:22:58.730
When you open that file, we
will not redact the information.

00:22:58.730 --> 00:23:01.345
It will allow you to see
the full latitude longitude.

00:23:01.345 --> 00:23:02.970
But what we're doing--
it's by default.

00:23:02.970 --> 00:23:04.890
We're protecting
that information.

00:23:04.890 --> 00:23:06.720
You'll still be able
to see the other EXIF

00:23:06.720 --> 00:23:10.260
metadata, such as the shutter
length, shutter speed,

00:23:10.260 --> 00:23:12.450
other information about
the date-time taken.

00:23:12.450 --> 00:23:16.110
But only the location data
is going to be redacted.

00:23:16.110 --> 00:23:18.180
On MediaStore, there
are two columns,

00:23:18.180 --> 00:23:20.640
Latitude and Longitude,
that in previous releases

00:23:20.640 --> 00:23:21.990
have been indexed.

00:23:21.990 --> 00:23:23.550
Now, in the Q
release, you'll find

00:23:23.550 --> 00:23:24.930
that those columns are null.

00:23:24.930 --> 00:23:26.010
And they're empty.

00:23:26.010 --> 00:23:29.590
Instead, if you need access
to the location metadata,

00:23:29.590 --> 00:23:32.950
you can use the EXIF
interface tool instead.

00:23:32.950 --> 00:23:35.500
Let's take a look
at this in action.

00:23:35.500 --> 00:23:38.880
So in this case, if your app
actually needs access to that

00:23:38.880 --> 00:23:41.210
location information--
if the user expects it--

00:23:41.210 --> 00:23:42.960
you would just add a
user's permission tag

00:23:42.960 --> 00:23:44.370
to your manifest.

00:23:44.370 --> 00:23:47.430
Note that this is not
a runtime permission.

00:23:47.430 --> 00:23:50.100
It's purely a signal
to us on the OS

00:23:50.100 --> 00:23:52.380
that you're interested
in this information.

00:23:52.380 --> 00:23:55.750
Simply by adding it, it
will grant you that access.

00:23:55.750 --> 00:23:59.730
So by virtue of requesting
that permission, when

00:23:59.730 --> 00:24:00.683
you go to open--

00:24:00.683 --> 00:24:02.100
in this case-- the
openInputStream

00:24:02.100 --> 00:24:04.770
for a particular photo,
you can pass that

00:24:04.770 --> 00:24:06.690
into the EXIF interface.

00:24:06.690 --> 00:24:09.250
That's a class that's been in
the OS for a couple of years.

00:24:09.250 --> 00:24:12.630
But it's also available in
the jetpack support libraries.

00:24:12.630 --> 00:24:15.300
That will help decode that
information in the metadata

00:24:15.300 --> 00:24:17.580
and give you access to
that latitude and longitude

00:24:17.580 --> 00:24:21.630
information to help
you build your app.

00:24:21.630 --> 00:24:24.665
So we've talked so far about
the three important principles

00:24:24.665 --> 00:24:26.040
that we've been
building into Q--

00:24:28.770 --> 00:24:32.190
helping protect user's data,
helping protect your data,

00:24:32.190 --> 00:24:34.080
and giving better
accountability to the user

00:24:34.080 --> 00:24:35.910
over who's responsible
for putting

00:24:35.910 --> 00:24:37.800
that data on the device.

00:24:37.800 --> 00:24:41.250
In order to deliver on
those goals, starting in Q,

00:24:41.250 --> 00:24:43.950
we have to start restricting
the direct raw access

00:24:43.950 --> 00:24:45.540
to the underlying file system.

00:24:45.540 --> 00:24:47.640
And we're doing
this using a feature

00:24:47.640 --> 00:24:50.110
we're calling Scoped Storage.

00:24:50.110 --> 00:24:53.130
Let's dig a little bit
more into what that means.

00:24:53.130 --> 00:24:55.590
This has changed over the
course of our beta releases

00:24:55.590 --> 00:24:56.340
this year--

00:24:56.340 --> 00:24:58.790
Beta 1, Beta 2,
and also in Beta 3.

00:24:58.790 --> 00:25:00.540
What we're going to
be talking about today

00:25:00.540 --> 00:25:02.290
is the final design
that we're going to be

00:25:02.290 --> 00:25:05.400
shipping in the Q release.

00:25:05.400 --> 00:25:09.450
So in the Q release, if your
app is targeting an older API

00:25:09.450 --> 00:25:13.110
level, below or before Q,
you will see no changes.

00:25:13.110 --> 00:25:16.440
You will continue to retain full
access to the shared storage

00:25:16.440 --> 00:25:16.950
device--

00:25:16.950 --> 00:25:20.200
that raw kernel file
system level access.

00:25:20.200 --> 00:25:23.070
However, once your
application targets Q,

00:25:23.070 --> 00:25:25.193
it's put into this Scoped mode.

00:25:25.193 --> 00:25:26.610
And what this
means-- it no longer

00:25:26.610 --> 00:25:31.290
has direct raw file system
access to the SD card.

00:25:31.290 --> 00:25:34.140
One note is-- you will
continue to receive

00:25:34.140 --> 00:25:35.890
these package-specific
directories.

00:25:35.890 --> 00:25:38.130
You'll continue to
have raw direct access

00:25:38.130 --> 00:25:39.730
to those directories.

00:25:39.730 --> 00:25:42.210
These are the ones that Seb
mentioned at the very beginning

00:25:42.210 --> 00:25:44.940
of the presentation--
those best-practice APIs--

00:25:44.940 --> 00:25:48.720
so context.GetEsternalFilesDirs,
CachedDirs,

00:25:48.720 --> 00:25:50.940
MediaDirs, and ObbDirs.

00:25:50.940 --> 00:25:53.430
All of those directories--
because they have your package

00:25:53.430 --> 00:25:56.610
name in them, you'll continue
to enjoy full raw system

00:25:56.610 --> 00:25:58.260
access to those.

00:25:58.260 --> 00:26:00.570
It's only outside
of those locations

00:26:00.570 --> 00:26:02.610
that the kernel will
start returning either

00:26:02.610 --> 00:26:05.640
a File Not Found exception, if
you're running managed code,

00:26:05.640 --> 00:26:09.593
or an EPERM error not, if you're
running down a native code.

00:26:09.593 --> 00:26:11.010
Instead, if you'd
like to interact

00:26:11.010 --> 00:26:14.190
with content outside of those
package-specific directories,

00:26:14.190 --> 00:26:16.650
we're encouraging you to use
MediaStore or the Storage

00:26:16.650 --> 00:26:19.300
Access Framework instead.

00:26:19.300 --> 00:26:20.970
Let's take a look at example--

00:26:20.970 --> 00:26:23.840
so when is it appropriate
to use one versus the other?

00:26:23.840 --> 00:26:26.100
We've talked about
both interchangeably.

00:26:26.100 --> 00:26:29.880
MediaStore is good for
those strongly-typed content

00:26:29.880 --> 00:26:33.010
that we talked about--
images, video, and audio.

00:26:33.010 --> 00:26:36.180
But it's not a good fit for
other content types, like Word

00:26:36.180 --> 00:26:40.440
documents, Excel
documents, or PDF files.

00:26:40.440 --> 00:26:43.740
Instead, we want you to launch
an intent, like the Storage

00:26:43.740 --> 00:26:46.290
Access Framework, to let
the user pick exactly what

00:26:46.290 --> 00:26:47.760
content you work with.

00:26:47.760 --> 00:26:50.550
These intents have been around
since the Kit Kat release.

00:26:50.550 --> 00:26:53.920
You can call them using Action
Open Document or Action Create

00:26:53.920 --> 00:26:54.920
Document.

00:26:54.920 --> 00:26:57.270
And these have two benefits
for you as developers.

00:26:57.270 --> 00:26:59.340
One is it's a whole
lot less code for you

00:26:59.340 --> 00:27:00.510
to build and maintain.

00:27:00.510 --> 00:27:03.180
Instead of building your
own file-picking experience

00:27:03.180 --> 00:27:04.680
that the user has
to learn when they

00:27:04.680 --> 00:27:06.390
come into your
application, they're

00:27:06.390 --> 00:27:09.660
now presented with a
single uniform experience

00:27:09.660 --> 00:27:14.040
across all apps when they want
to pick content to work with.

00:27:14.040 --> 00:27:16.620
So right-- to contrast,
MediaStore is a good fit

00:27:16.620 --> 00:27:18.240
for those well-defined
collections--

00:27:18.240 --> 00:27:20.920
Images, Video, and Audio.

00:27:20.920 --> 00:27:23.280
But also, MediaStore
is limited to only work

00:27:23.280 --> 00:27:26.830
with local content that
is built into the device.

00:27:26.830 --> 00:27:30.840
It doesn't offer any access
to other storage locations

00:27:30.840 --> 00:27:31.620
off the device.

00:27:31.620 --> 00:27:33.870
That's another powerful
feature of the Storage Access

00:27:33.870 --> 00:27:34.830
Framework.

00:27:34.830 --> 00:27:37.230
It gives the user
the ability to choose

00:27:37.230 --> 00:27:39.390
to work with a
network file share,

00:27:39.390 --> 00:27:41.520
such as in a small
business environment,

00:27:41.520 --> 00:27:44.160
or a cloud storage provider.

00:27:44.160 --> 00:27:46.120
This is an open platform.

00:27:46.120 --> 00:27:50.220
So starting in Kit Kat, there
was the Document Provider API.

00:27:50.220 --> 00:27:51.720
If you find yourself--
if you'd like

00:27:51.720 --> 00:27:53.970
to provide a place
to store content,

00:27:53.970 --> 00:27:55.500
you, as a third-party
developer, can

00:27:55.500 --> 00:27:57.330
go build one of these
document providers

00:27:57.330 --> 00:27:59.340
and appear in the
list, right next to any

00:27:59.340 --> 00:28:02.290
of the other storage locations
that are available to the user.

00:28:02.290 --> 00:28:05.900
So we think it's quite
powerful and flexible.

00:28:05.900 --> 00:28:07.790
So we've also heard,
loud and clear from you,

00:28:07.790 --> 00:28:09.920
as our developer
community, when we started

00:28:09.920 --> 00:28:12.770
initiating these
changes, that taking away

00:28:12.770 --> 00:28:16.400
that access required a lot
of changes on your part.

00:28:16.400 --> 00:28:18.800
And this is why, as we
announced a couple weeks ago

00:28:18.800 --> 00:28:20.990
in a blog post, we've relaxed.

00:28:20.990 --> 00:28:23.810
We've relaxed the requirements
for the Q release.

00:28:23.810 --> 00:28:26.120
So Scope storage--
when you target Q,

00:28:26.120 --> 00:28:30.170
you have the opportunity
to temporarily opt out.

00:28:30.170 --> 00:28:33.080
In our testing internally,
the majority of applications,

00:28:33.080 --> 00:28:36.297
when we enabled Scope storage,
we found that they worked.

00:28:36.297 --> 00:28:37.880
There's only a small
handful of cases,

00:28:37.880 --> 00:28:40.670
where applications may not be
following our best practices,

00:28:40.670 --> 00:28:42.330
that we found there were bugs.

00:28:42.330 --> 00:28:44.790
So we hope that, as you
target the Q release,

00:28:44.790 --> 00:28:47.720
you'll attempt to keep
Scope storage enabled.

00:28:47.720 --> 00:28:50.540
And we hope that you'll be able
to find that it just works.

00:28:50.540 --> 00:28:52.550
If you don't-- if
you encounter bugs,

00:28:52.550 --> 00:28:54.480
we'd like to ask you
to do two things.

00:28:54.480 --> 00:28:57.770
First, you can use this Manifest
flag to temporarily opt out.

00:28:57.770 --> 00:29:00.020
And second-- please, reach
out to us and our developer

00:29:00.020 --> 00:29:02.840
advocates so we can understand
more about your use case

00:29:02.840 --> 00:29:05.530
and make sure that we can
work together to solve it.

00:29:05.530 --> 00:29:07.940
The one final thing that we
want to make really clear

00:29:07.940 --> 00:29:10.010
is that this is only temporary.

00:29:10.010 --> 00:29:13.640
This Manifest flag will not work
in next year's major platform

00:29:13.640 --> 00:29:14.570
release.

00:29:14.570 --> 00:29:16.220
And part of that is
our goal of trying

00:29:16.220 --> 00:29:18.380
to deliver on that full
message of delivering

00:29:18.380 --> 00:29:20.520
the user privacy and security.

00:29:20.520 --> 00:29:22.490
So thank you for
your help with that.

00:29:22.490 --> 00:29:25.500
Let's take a look at an example
of how you would use this.

00:29:25.500 --> 00:29:27.290
A note is that
some of these names

00:29:27.290 --> 00:29:30.050
have changed over time
between the beta releases.

00:29:30.050 --> 00:29:31.970
What we're looking at
on the slides today

00:29:31.970 --> 00:29:33.920
are the final
attribute and method

00:29:33.920 --> 00:29:35.863
names that will ship
in the final Q release.

00:29:35.863 --> 00:29:37.280
The names are going
to be slightly

00:29:37.280 --> 00:29:38.930
different in the
Beta 3 release that

00:29:38.930 --> 00:29:41.130
was just launched yesterday.

00:29:41.130 --> 00:29:43.340
So here, we're
targeting the Q release.

00:29:43.340 --> 00:29:46.410
And using this Manifest flag,
we can temporarily opt out.

00:29:46.410 --> 00:29:49.190
We can say, we'd like to go
back to the old storage world.

00:29:49.190 --> 00:29:50.330
You can add this.

00:29:50.330 --> 00:29:52.400
One example that we've
heard from developers is--

00:29:52.400 --> 00:29:54.590
maybe you're embedding
a shared library

00:29:54.590 --> 00:29:56.870
from another developer that
you don't have the ability

00:29:56.870 --> 00:29:57.800
to quickly change.

00:29:57.800 --> 00:29:59.270
It's code that you don't own.

00:29:59.270 --> 00:30:02.270
This might be a good reason
to add this flag temporarily.

00:30:02.270 --> 00:30:04.820
But please, reach out to us
and that library developer

00:30:04.820 --> 00:30:07.550
to see if we can work
together to migrate

00:30:07.550 --> 00:30:10.130
towards best practices.

00:30:10.130 --> 00:30:12.640
The second code snippet
on the slide here is--

00:30:12.640 --> 00:30:14.350
we recognize that your
app may be running

00:30:14.350 --> 00:30:15.910
under either of these modes.

00:30:15.910 --> 00:30:18.700
It may be in the Legacy mode
or in the new Scoped mode.

00:30:18.700 --> 00:30:20.160
And the method
here on Environment

00:30:20.160 --> 00:30:21.910
lets you check to see
which of those modes

00:30:21.910 --> 00:30:24.520
your application
is running under.

00:30:24.520 --> 00:30:27.040
One thing that's worth
noting is that, on Android,

00:30:27.040 --> 00:30:29.530
we always preserve the
original level of access

00:30:29.530 --> 00:30:32.630
you had when your application
was first installed.

00:30:32.630 --> 00:30:35.590
So if you were installed on a
P device, where you expected

00:30:35.590 --> 00:30:37.900
to have full access
to the storage device,

00:30:37.900 --> 00:30:39.610
your app will
continue to have that,

00:30:39.610 --> 00:30:42.760
even after the user
upgrades to the Q device

00:30:42.760 --> 00:30:45.420
or after they've
upgraded your app.

00:30:45.420 --> 00:30:46.420
So you'll preserve that.

00:30:46.420 --> 00:30:47.962
You'll have that
access you've always

00:30:47.962 --> 00:30:50.530
had-- that [INAUDIBLE] when
you were first installed.

00:30:50.530 --> 00:30:52.030
This method is the
good way to check

00:30:52.030 --> 00:30:55.860
to see which of those states
that you're running under.

00:30:55.860 --> 00:30:59.250
So thank you for taking
the time to understand

00:30:59.250 --> 00:31:01.230
more of our motivation
about why we are

00:31:01.230 --> 00:31:02.665
making some of these changes.

00:31:02.665 --> 00:31:03.790
We understand they're hard.

00:31:03.790 --> 00:31:05.248
And hopefully, we
can work together

00:31:05.248 --> 00:31:08.100
to be able to help improve
the privacy and security

00:31:08.100 --> 00:31:09.450
of our users together.

00:31:09.450 --> 00:31:13.170
Both Seb and I will be at the
Sandbox tomorrow at 1:30 PM,

00:31:13.170 --> 00:31:15.840
if you have any additional
questions for us.

00:31:15.840 --> 00:31:17.940
With that-- thank
you for your time.

00:31:17.940 --> 00:31:20.990
[MUSIC PLAYING]

