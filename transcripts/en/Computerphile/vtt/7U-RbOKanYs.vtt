WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.040
Everyone's passwords are terrible and they should change their passwords right now.

00:00:03.040 --> 00:00:05.260
Let's just get that right out in the open,

00:00:05.260 --> 00:00:08.800
OK, you all have bad passwords and you know you should feel bad.

00:00:08.800 --> 00:00:12.020
Probably not necessarily people who watch Computerphile, but the majority of the public

00:00:12.020 --> 00:00:14.280
don't have good passwords, and it's a real problem.

00:00:14.640 --> 00:00:16.880
It's a problem becauseâ€“

00:00:16.880 --> 00:00:19.420
People like LinkedIn and TalkTalk get hacked, and

00:00:19.420 --> 00:00:22.200
a bunch of hashed passwords go out onto the Internet,

00:00:22.200 --> 00:00:23.840
um.. and then within

00:00:24.160 --> 00:00:25.440
..you know, hours

00:00:26.060 --> 00:00:27.340
half of 'em have been cracked.

00:00:27.520 --> 00:00:28.900
And then people are going:

00:00:29.140 --> 00:00:31.300
"Oh well this user name and this password's been cracked.

00:00:31.300 --> 00:00:33.160
Well let's just go and log on over there and see if

00:00:33.160 --> 00:00:34.840
that username and password combination

00:00:34.840 --> 00:00:35.940
gets me into their Amazon.

00:00:36.160 --> 00:00:37.840
Oh it does? That's good news."

00:00:37.840 --> 00:00:38.920
And, and so on.

00:00:41.380 --> 00:00:43.480
Password cracking has massive implications for

00:00:43.480 --> 00:00:44.280
password security.

00:00:44.520 --> 00:00:45.980
Uh, for what passwords you need to use,

00:00:45.980 --> 00:00:47.740
how you need to store your passwords,

00:00:47.740 --> 00:00:48.360
and so on and so forth.

00:00:48.440 --> 00:00:49.820
In a previous video,

00:00:50.140 --> 00:00:52.440
Tom Scott talked about how to store passwords,

00:00:52.440 --> 00:00:55.440
Tom Scott: "Please please please please please, look up a recent tutorial

00:00:55.780 --> 00:00:57.260
for the language you're using."

00:00:57.520 --> 00:00:58.040
As a company

00:00:58.040 --> 00:00:58.700
right? That these

00:00:58.700 --> 00:00:59.940
things are still true.

00:00:59.940 --> 00:01:03.240
Right, the hashing algorithms you have to use have become longer.

00:01:03.380 --> 00:01:05.200
Because they don't hold up as well, the older ones.

00:01:05.280 --> 00:01:06.860
Which we'll see in a minute,

00:01:07.900 --> 00:01:08.400
and

00:01:09.240 --> 00:01:09.740
um...

00:01:09.940 --> 00:01:13.140
so, some things have changed, but really the principle remains the same.

00:01:13.140 --> 00:01:18.180
Right? We don't store passwords unencrypted in a database because that's a terrible terrible idea.

00:01:18.420 --> 00:01:23.040
What we do is we pass them through something called a "One Way Pseudorandom Function".

00:01:23.040 --> 00:01:26.220
Which basically take some plain text password, and turns it into gibberish.

00:01:26.800 --> 00:01:27.640
And then,

00:01:27.940 --> 00:01:29.520
When someone tries to login,

00:01:29.520 --> 00:01:33.720
We do the same operation on what they just typed, and if the gibberish matches up

00:01:33.780 --> 00:01:36.900
we know they've taught in their password correctly, without actually having to know

00:01:36.900 --> 00:01:38.040
what their password is.

00:01:38.040 --> 00:01:42.840
But if these hashes get dumped on the
internet then we can't reverse them

00:01:42.840 --> 00:01:46.679
because they're just random nonsense but
we can do is test the load of different

00:01:46.679 --> 00:01:51.149
words by hashing them and seeing if the hatches matc--hashes match any of the

00:01:51.149 --> 00:01:56.789
ones in the dictionary and if they do we
know we've cracked their password and

00:01:56.789 --> 00:01:59.220
And that's really really easy to do

00:01:59.220 --> 00:02:02.550
I'm going to show you it and it's got me
scared me the first time

00:02:03.420 --> 00:02:07.770
So yeah let's see-- I've changed my
password simply put that way

00:02:07.770 --> 00:02:12.930
Okay now this is what is necessary
terminal but this is Beast the aptly

00:02:12.930 --> 00:02:17.700
named Beast which is our deep learning,
one of our deep learning service right

00:02:17.700 --> 00:02:20.730
now. I'm not using a deep learning right now and
nor is anyone else

00:02:20.730 --> 00:02:24.390
I don't think, so just for a moment we'll
borrow it.

00:02:24.390 --> 00:02:27.510
It's about two or three times bigger
than a normal desktop but it's not

00:02:27.510 --> 00:02:31.740
service size rack and it's sitting
somewhere between behind a bunch of

00:02:31.740 --> 00:02:32.640
locks

00:02:32.640 --> 00:02:36.060
I think on this floor somewhere I
haven't seen it-- well I saw getting

00:02:36.060 --> 00:02:38.160
built and then I-- but it disappeared.

00:02:38.160 --> 00:02:42.870
Maybe we'll go and look at it some time. So if we-- we type in there nvidia

00:02:43.380 --> 00:02:47.069
SMI we can see what's what's this is
equipped with. For now, my most of my

00:02:47.069 --> 00:02:51.240
contact with it is my terminal and I ask it to do things and it does them very very fast.

00:02:51.930 --> 00:02:54.630
This particular server has four Titan X

00:02:54.630 --> 00:02:58.920
graphics cards in it. A Titan X is one of the foremost graphics cards. There are

00:02:58.920 --> 00:03:03.000
new generation 10 nvidia graphics
cards coming out and some AMD cards but

00:03:03.000 --> 00:03:07.680
a Titan X is still performing massively well. Certainly for deep learning it's

00:03:07.680 --> 00:03:10.470
very good because it has 12 gigs of onboard ram.

00:03:10.470 --> 00:03:14.010
Now in some games 12 gigs onboard ram might be necessary for really high

00:03:14.010 --> 00:03:15.090
texture resolution.

00:03:15.090 --> 00:03:19.890
So if I wanted to play... you know, the new Doom game and there was no one about then I could.

00:03:19.900 --> 00:03:23.700
Apart from they've installed Ubuntu on it so that doesn't help me much. It might be Fedora.

00:03:23.700 --> 00:03:28.740
Let's not go into that though. So if I say it's linux, right, and we've installed

00:03:28.740 --> 00:03:31.950
Caffe and other deep learning libraries and lots of people are using it all the time

00:03:31.950 --> 00:03:35.250
to do interesting deep learning problems. We've got a huge array of different

00:03:35.250 --> 00:03:39.870
problems, but right now we will use it to do some password cracking. I downloaded

00:03:39.870 --> 00:03:45.240
a program called cudaHashcat. Hashcat is one of the sort of foremost password

00:03:45.240 --> 00:03:46.290
cracking tools.

00:03:46.290 --> 00:03:48.930
It lets you do lots of different types of password cracking which I'll talk

00:03:48.930 --> 00:03:53.430
about and it does it very very quickly because it makes use of the graphics

00:03:53.430 --> 00:03:57.540
card or in this computer case it makes use of all four graphics cards in

00:03:57.540 --> 00:04:00.540
parallel. Each of these graphics card is capable of somewhere around

00:04:01.230 --> 00:04:06.480
I think it's ten thousand million so 10 billion hashes per second.

00:04:06.480 --> 00:04:10.500
my standard graphics card at home which is pretty good is about four billion so

00:04:10.500 --> 00:04:13.500
these about nearly two times faster each and there's four of them.

00:04:13.500 --> 00:04:17.780
Okay, so this is over eight times faster, let's say about 10 times faster than my computer at home?

00:04:17.790 --> 00:04:23.430
It takes 40 billion plaintext password hypotheses, hashes them using MD5, and compares

00:04:23.430 --> 00:04:26.050
them to a list at a rate of 40 billion per second.

00:04:26.120 --> 00:04:28.620
[Off Camera] And how many words are written just in English dictionary?

00:04:28.620 --> 00:04:31.380
[Mike] More than you'd think. A lot more than you'd think,

00:04:31.500 --> 00:04:37.100
which, is in some cases reassuring. In other cases if your password is not very long,

00:04:37.170 --> 00:04:42.330
not reassuring at all. Okay, so we'll talk about the different-- I'll show it working and

00:04:42.330 --> 00:04:45.060
I'll talk about the different kinds of
password cracking because they do have

00:04:45.060 --> 00:04:47.370
implications, different implications for passwords.

00:04:47.370 --> 00:04:50.460
Okay, so Hashcat is run off the command line...

00:04:51.000 --> 00:04:54.660
What I've got here, if I just show it... This example file is just a list of hashes

00:04:54.660 --> 00:04:58.470
that comes with Hashcat. There's about six or so thousand hashes in it

00:04:58.470 --> 00:05:02.910
that range in difficulty. So some of them are going to be "password1" because

00:05:02.910 --> 00:05:06.790
that's what some people's passwords are, and some of them are going to be much longer, so 20 or 30 characters,

00:05:06.810 --> 00:05:10.470
almost random, and they're
going to be very difficult to crack.

00:05:10.470 --> 00:05:14.990
So we won't crack all of them now but we will crack a fair few. So if I just show you this, these are what the hashes look like.

00:05:15.090 --> 00:05:21.230
MD5 produces a hundred and twenty-eight bit hash. Now only five should not be used by anyone ever, ever again.

00:05:21.240 --> 00:05:32.100
The problem is that... that lower... standard hashes like MD5 and SHA-1 still get used a lot for back end storage.

00:05:32.120 --> 00:05:36.700
Maybe the developers are thinking, "Oh, it's already in SHA-1, you know, it's a lot of effort to convert them all over.

00:05:36.720 --> 00:05:38.480
Maybe people won't be able to log in for a while...

00:05:38.480 --> 00:05:45.580
Hmm, let's probably not." Yes, do. Change your hashes to something like SHA-512 really quickly, because this is not acceptable.

00:05:45.660 --> 00:05:49.889
Hashing it takes longer literally just-- it takes longer for the GPU to process

00:05:49.889 --> 00:05:54.330
and so you will go down from 40 billion to, you know, a few million or a few

00:05:54.330 --> 00:05:57.940
thousand for really good hashing that's been iterated a lot of times.

00:05:57.940 --> 00:06:04.240
And that makes the process insurmountably harder, you know... Much more difficult, you know,

00:06:04.260 --> 00:06:07.240
and so that-- that would be what I would recommend as a developer.

00:06:07.260 --> 00:06:13.660
As a user, it just means you have to have a password that sui-- that's acceptable but you have to, in a way, assume that

00:06:13.700 --> 00:06:18.700
some of the websites that you use won't know what they're doing and will have it stored in MD5.

00:06:18.720 --> 00:06:22.060
If it's still in plain text, then all bets are off, there's nothing we can do.

00:06:22.110 --> 00:06:26.460
Okay, right, so let's just run this in brute force mode.

00:06:26.460 --> 00:06:31.140
So the first type of password cracking,
which sees some use but not a lot, is brute force.

00:06:31.200 --> 00:06:37.190
So this is simply a case of starting
with "AAAAAAA" and then "AAAAAAB"

00:06:37.190 --> 00:06:42.570
and "AAAAC" and so on for different character sets. If we assume that it's going to be some subset of passwords

00:06:42.570 --> 00:06:48.770
that use only lowercase letters we can brute force those very quickly, especially if they're not very long.

00:06:48.800 --> 00:06:53.700
So what I'm going to do first is I'm going to run a hash-- I'm going to run an attack on these passwords

00:06:53.780 --> 00:06:57.220
of, let's say, seven character passwords all with lower case letters.

00:06:57.240 --> 00:07:05.880
Okay, so that's like this... So it's, ah... Hashcat attack mode 3, which is brute force, example0.hash--

00:07:05.920 --> 00:07:09.580
the hash file-- and then my mask which tells me what character sets I'm going to use.

00:07:10.220 --> 00:07:16.080
So L is a lowercase letter, so 1, 2, 3, 4, 5, 6, 7 lower case letters.

00:07:18.000 --> 00:07:18.500
Thinking...

00:07:21.600 --> 00:07:22.100
There we go!

00:07:23.120 --> 00:07:27.880
So it's done it. Okay, if I scroll up, those are the passwords it found. Okay, not very many, because

00:07:27.900 --> 00:07:31.520
there aren't very many, luckily for these users, lowercase only passwords.

00:07:31.560 --> 00:07:36.880
[odd cut] ...Seven of them. But it went through the whole combination of lower case letters at seven length,

00:07:36.880 --> 00:07:39.800
in, you know, a second? Which isn't great.

00:07:40.340 --> 00:07:45.500
Alright? So we step it up a notch. Now we say, "Well okay let's do eight characters," so we just add another L

00:07:45.560 --> 00:07:49.960
And we run it and... forty billion attempts per second...

00:07:49.970 --> 00:07:53.690
Here they go and they just, they just keep coming, right.

00:07:53.690 --> 00:07:57.980
Each of these lines is a hash and the associated password that has been cracked.

00:07:57.980 --> 00:08:03.720
So what it means is, at some point it's tried "mycubana," the combination of letters that spell "mycubana"

00:08:03.760 --> 00:08:11.520
It's hashed it and found, "Oh that does match one of the ones in our dictionary, in our hashfile, so we will put that in our output.

00:08:11.560 --> 00:08:19.200
Alright? Okay, so let's just step it up a little bit further. Some passwords, for example, will have two digits at the end.

00:08:19.280 --> 00:08:24.180
Okay? The vast majority part of that have numbers in have one or two digits at the end, maybe four, because

00:08:24.180 --> 00:08:29.280
they're dates? So let's say we say six character passwords with two digits at the end.

00:08:34.040 --> 00:08:34.740
Here we go.

00:08:35.089 --> 00:08:38.479
Aw, there were only a few of those, but we found them.

00:08:38.479 --> 00:08:42.380
There they are. This is a good start, right, it's very very quick.

00:08:42.380 --> 00:08:45.800
it starts to slow down as you increase
the number of characters so

00:08:46.310 --> 00:08:50.960
when you're doing a brute force, sort of naive brute force attack like this, then you're using the number of characters

00:08:50.960 --> 00:08:55.180
in your character set to the power of the length of your password.

00:08:55.180 --> 00:09:03.940
In this case, there are 26 lowercase digits, 26, to the power of 7, for when we were trying 7 passwords

00:09:04.260 --> 00:09:15.440
And then for, let's say, six character passwords with two digits on the end it's going to be 26 to the power of 6

00:09:15.500 --> 00:09:21.960
multiplied by 10 to the power of 2. This is the status of the last attack I did, and it had this many passwords

00:09:22.080 --> 00:09:29.080
to crack and it's done them all and it was doing at 38 billion hashes per second. Which is why MD5 is not usable

00:09:29.080 --> 00:09:31.420
in any sense anymore, ever.

00:09:31.620 --> 00:09:37.400
Don't use it. Okay, is that clear yet? Okay, so this is a start, right? Now the problem is that first of all,

00:09:37.440 --> 00:09:42.900
I only get a few hashes each time because it, you know... this is only 6000 passwords. If it were LinkedIn's

00:09:42.940 --> 00:09:48.560
40 million password database, you'd get a lot like this, but it's a bit of work for me to do this.

00:09:48.560 --> 00:09:53.460
There are ways of generating this mass automatically and iterating through them to try all the different combinations.

00:09:53.510 --> 00:09:59.790
The other thing is that once we start getting to 9 or 10 character passwords, even for this machine it starts to become impractical.

00:09:59.860 --> 00:10:06.620
Particularly if people are using larger character sets so consider that this 7 length password is 26^7.

00:10:06.740 --> 00:10:18.880
Well, if you're using lower and uppercase, it's going to be (26*2)^7. Okay, which is 52. 52^7... put me on the spot!

00:10:18.980 --> 00:10:24.660
52^7, and then if you add symbols it's more, and it's something like, if you're having symbols and numbers

00:10:24.700 --> 00:10:29.380
as well, it's going to be somewhere around 90^7, each depending on your character set.

00:10:29.390 --> 00:10:36.950
So... that's too much, even for this. At 7 length, it might be feasible. At 8 length, it starts to get pretty difficult,

00:10:36.950 --> 00:10:43.810
if you're using symbols, and at nine still currently not really doable, even for MD5, okay, because that's how big the search space is.

00:10:43.900 --> 00:10:47.340
But, most password cracking these days doesn't work this way.

00:10:47.340 --> 00:10:52.240
Okay, this is a start and you can pick up the really rubbish passwords. So if your password is six characters

00:10:52.240 --> 00:10:58.260
long, it's being cracked right now, and it's being cracked quickly because we can go through all the 6 character

00:10:58.340 --> 00:10:59.760
passwords in a fraction of a second.

00:11:01.280 --> 00:11:06.000
For longer passwords, we have to  make some assumptions about the way that people choose passwords.

00:11:06.000 --> 00:11:13.460
So, obviously the password "password" or in the "password1" is actually nine characters, you know,

00:11:13.480 --> 00:11:19.420
in which brute force is pretty good, but it's not good because it's just the sort of number one password to be used

00:11:19.420 --> 00:11:24.700
And so on the top of your list of hypothetical passwords, it should be right at the top and the first one you try.

00:11:24.780 --> 00:11:30.180
Okay, so this is what a dictionary attack does. We have a dictionary of a list of commonly used words or

00:11:30.200 --> 00:11:36.220
commonly used passwords, and then we try those. And then we manipulate them slightly, with rules, and we try them again

00:11:36.260 --> 00:11:42.360
and we append them to other words and try them again and we do lots of different combinations of things and

00:11:42.380 --> 00:11:50.380
try them again. And it's pretty scary. It's much more effective than brute force, and so it's the current way that things are done.

00:11:50.470 --> 00:11:54.150
The hashing rate goes down a bit because you're loading dictionaries and doing word manipulations

00:11:54.190 --> 00:11:59.490
but it's still pretty quick. So let's show you an example dictionary. So this dictionary has common passwords

00:11:59.560 --> 00:12:01.860
that have been cracked from other sources.

00:12:01.960 --> 00:12:07.380
There are other password lists, like the RockYou list and soon the LinkedIn list, I'm sure, which will have a big impact

00:12:07.380 --> 00:12:11.880
because they are real passwords of people are actually using, so if you make a word list out of those passwords

00:12:11.880 --> 00:12:13.680
that's going to be really effective.

00:12:13.690 --> 00:12:20.130
Let's run this example dictionary over our passwords, but now let's just manipulate it a bit to make it a little more

00:12:20.220 --> 00:12:26.740
well, scary is one way of looking at it. Right so, Hashcat, but this time we're going to run in attack mode 0,

00:12:26.740 --> 00:12:31.560
which is straight dictionary attack. Okay, if I did that against my example dictionary that we've got,

00:12:31.580 --> 00:12:36.880
then it would probably find, you know, a couple. It's very quick, because it's not that many, so it's already finished

00:12:36.880 --> 00:12:43.700
and it found one: this chat with "13lexon". So what that's telling me is there's only one guy who happened to have

00:12:43.740 --> 00:12:48.120
who happened to have the same password that's in the word list. Now that's quite common because I mean,

00:12:48.120 --> 00:12:52.620
In a really big database, you're going to have a lot of people who have "password" and "password1234" and

00:12:52.620 --> 00:12:57.540
"12341234" and so on-- All those people are going to be found this way but what we really want to do is mix up

00:12:57.580 --> 00:13:03.480
the dictionary little bit, swap a few letters around. So what these rules do, they do obvious things like they

00:13:03.560 --> 00:13:10.120
replace "I" with the number 1. Or they replace "E" with a 3. Or put an "@" in instead of an "&amp;" or something.

00:13:10.160 --> 00:13:16.780
You know, mix it up a bit, common password substitutions: leet speak, weird things like this that people think are very secure,

00:13:16.780 --> 00:13:21.820
and in fact they're just got rules to just completely defeat them. Toggling case up and down, you know, if a password's

00:13:21.860 --> 00:13:26.300
viable, then the same password with the first letter as uppercase also probably viable.

00:13:26.380 --> 00:13:32.600
Alright, so you do all these things. And there are rules to do this. Now, if one of my, one of the-- If someone does

00:13:32.640 --> 00:13:37.180
a lot of password cracking, because maybe it's their job... which is kind of a weird job but people do do it,

00:13:37.180 --> 00:13:41.520
security experts and stuff, if you're really into this then you have your own dictionaries and your own rules

00:13:41.560 --> 00:13:46.020
I'm not using it today, I don't have my own dictionaries, my own rules, because fun as this is, mostly I have no more

00:13:46.020 --> 00:13:50.540
work to do. Now what I'm going to do here is I'm going to put in a ruleset called dive.rule. Now I don't know who

00:13:50.540 --> 00:13:56.880
dive is, I expect it's an alias of some hacker somewhere. He's got quite a good rule set that works quite nicely with this hash file.

00:13:56.890 --> 00:14:01.710
Okay so let's run it, and what it is going to do is go through all of the rules in turn and for each rule

00:14:01.740 --> 00:14:08.340
it's gonna through the whole dictionary and try all those different combinations against these hashes.

00:14:12.860 --> 00:14:18.720
And here they come. So that was about a thousand hashes we just got, which is a little bit worrying

00:14:18.740 --> 00:14:22.600
Some of them are rude,  right, I've scrolled past those, okay, because some people have rude passwords.

00:14:22.600 --> 00:14:27.860
Those passwords are bad passwords because rude words are also in these dictionaries. Alright, so if you

00:14:27.860 --> 00:14:32.320
you're being clever by putting swear words in your password file you actually are just making it weaker.

00:14:32.480 --> 00:14:38.640
Okay, these are some not absolutely terrible passwords in some sense, most of them are lowercase with

00:14:38.640 --> 00:14:45.160
a few numbers. "leanadrien", which might be a name, is ok but probably a similar word's in the dictionary

00:14:45.180 --> 00:14:49.700
and it got manipulated in some ways and some letters got swapped around and suddenly it was cracked.

00:14:49.700 --> 00:14:55.680
So we've had some luck, we've done a bit of brute force, we've done a basic dictionary attack, we have a few rules

00:14:55.680 --> 00:15:00.080
just to mix it up, and we've got some passwords. So far I've cracked I think about 1700 passwords out of about

00:15:00.260 --> 00:15:06.020
6 and a half thousand. Some of these passwords aren't crackable, in the sense that you could be here for days

00:15:06.020 --> 00:15:11.460
and still have some left, but I think I've previously gotten about sixty or seventy percent fairly easily.

00:15:11.810 --> 00:15:19.230
So how can we get even better? Well, we use a better dictionary. That's the key. This example dictionary is fine,

00:15:19.230 --> 00:15:23.330
it's not very long, you know some passwords are going to be in it, but as you remember we ran it and

00:15:23.330 --> 00:15:29.960
it didn't find many passwords. It found some when we ran it through some rules, but it didn't find a lot.

00:15:29.990 --> 00:15:35.970
So what we really want to do is find a list of actual passwords that people are using in real life and use that.

00:15:36.180 --> 00:15:41.300
Now luckily, these leaks happen all the time and so passwords are just being dumped out onto the internet all the time.

00:15:41.380 --> 00:15:48.900
So there's this password list called RockYou, which is a bit of a game changer in password cracking, if that's a thing

00:15:49.040 --> 00:15:57.980
and basically it's 14 million or so passwords I think, actually leaked from a proper database of real passwords

00:15:57.980 --> 00:16:03.080
that people were using. It was I think it was a gaming service or something like this and then it got leaked.

00:16:03.080 --> 00:16:09.940
And the point is that if you run the RockYou database over these hashes you start to really get results, because

00:16:09.940 --> 00:16:14.060
there's just much more interesting passwords in the RockYou database, there's just many more of them.

00:16:14.060 --> 00:16:19.520
If I run the same thing I did before, but I parse it over the RockYou dictionary...

00:16:19.520 --> 00:16:23.840
So I'm doing the exact same thing as before: same rule manipulations parsing over the RockYou dictionary,

00:16:23.879 --> 00:16:26.879
we should get many more passwords. Should we see? Okay.

00:16:28.110 --> 00:16:31.110
it's just compiling the cuda and then
off it goes.

00:16:31.709 --> 00:16:34.949
And here they come and they're just
going to keep coming, right,

00:16:34.949 --> 00:16:42.769
there's a lot more because we've got lots and we've got many rules and we've got many... 40 million passwords

00:16:42.769 --> 00:16:44.849
in this list. It's going to take quite a lot longer to do.

00:16:44.970 --> 00:16:54.450
Okay, so but it's pretty fast! If I pause it and if we look at the status... so we're calculating now in total 8 to 10 thousand

00:16:54.520 --> 00:16:59.960
hashes per second. So, about four times slower because of all the dictionary manipulations we have to do.

00:16:59.960 --> 00:17:05.100
but it's still pretty quick. [Off Camera] So you said compiling the cuda, I've heard of mentioned cuda in terms of

00:17:05.100 --> 00:17:07.040
graphics card before, what does that mean?

00:17:07.049 --> 00:17:14.189
So cuda is an nvidia-- I mean actually Hashcat can work on AMD cards as well-- but what it basically does is

00:17:14.189 --> 00:17:21.880
it compiles a C-like intermediate language that tells the graphics card what to do. Normally-- so cuda in detail

00:17:21.880 --> 00:17:26.380
is for a different video-- but normally, what a graphics card does is basically take a bunch of vertices in your world,

00:17:26.380 --> 00:17:30.600
transform them in front of your camera and render them to the screen very very quickly.

00:17:30.600 --> 00:17:37.620
And the reason it does it quickly, because it maybe as 2800, 3000 processes all doing the same basic stuff.

00:17:37.620 --> 00:17:44.620
It's essentially taking the RockYou list manipulating it using the rules and testing these words for passwords

00:17:44.960 --> 00:17:49.340
At a rate of 8 to 10 thousand million per second.

00:17:49.660 --> 00:17:50.640
[off camera mumbling]

00:17:51.000 --> 00:17:53.900
Yeah, 10 billion per second right?

00:17:53.909 --> 00:17:58.829
I just-- it's the way it's written here, so I keep saying 8 thousand million, 8 billion. 8 billion per second.

00:17:58.860 --> 00:18:00.620
[Off Camera] So that's 8 billion attempts?

00:18:00.630 --> 00:18:06.890
[Mike] Yeah. So, you know, it'll try "password1" then it will try "password2", then it'll try "password3" with a captial P

00:18:06.890 --> 00:18:13.799
and so on and so forth, for much more complicated passwords and we've already I mean, I paused it and we've already got

00:18:13.799 --> 00:18:22.899
3000 now. We had 1700 so we've got 1300 in--I ran it for about 10 seconds? And if I keep running it, so I keep resuming,

00:18:22.900 --> 00:18:28.100
and theyre gonna keep coimng. Alright, and some of these passwords are really, really hard to crack

00:18:28.100 --> 00:18:31.850
By brute force or by normal dictionary, and this RockYou has changed everything.

00:18:31.850 --> 00:18:36.200
in the sense that it's just so varied that you just get password that you just get passwords that you think

00:18:36.200 --> 00:18:43.540
are really good. If I pause it and we look at the passwords... I mean this one, "nik21061989"

00:18:43.540 --> 00:18:49.200
You could guess that that-- because it's the guy's date, but it's been found in the dictionary

00:18:49.360 --> 00:18:54.880
"spacelightning" is quite a long one, but it's two words put together, so that's not secure. Alright, so it's been found.

00:18:54.920 --> 00:19:00.040
And so on and so forth. "laurence0901", even if 0901 is completely random, you're going to get caught. Alright,

00:19:00.040 --> 00:19:06.400
because you've used your name. Alright, so we can just keep going, we can keep going with this.

00:19:06.400 --> 00:19:11.840
And they'll just keep coming. If I look at the... how long we've got left, we've done 18%. And we've cracked another

00:19:11.840 --> 00:19:17.620
200 since I've been talking. So it's just going to keep going. And finish off the database.

00:19:17.630 --> 00:19:25.050
So if like MD5 you are doing fairly basic things, you can plow through jobs and in this case, I'm doing it with

00:19:25.050 --> 00:19:31.900
however many calls per GPU with 4 GPUs. Which is a little bit, a little bit worrying.

00:19:33.020 --> 00:19:37.730
I mean, it's still going. My current-- my current count is... I'm 47% through this particular attack. I could use different

00:19:39.230 --> 00:19:45.610
rules, there are other rules, like toggling case rules and things. I've got 3 and 1/2 thousand now, nearly.

00:19:45.900 --> 00:19:52.460
Of these-- so, nearly half of the passwords, right? And some of these passwords are good. So I guess, for the

00:19:52.460 --> 00:19:57.140
people watching you got to think how good are your passwords? Are your passwords better than half the people

00:19:57.140 --> 00:20:04.740
in this list, right? And if they aren't, you-- that's probably the next thing you should do, is change them, you know?

00:20:08.700 --> 00:20:13.920
I mean xkcd alluded to this and we'll talk about that in a minute, you know it didn't necessarily answer every question

00:20:13.960 --> 00:20:19.480
but it did get a good message across and then there's other aspects, you know, should you reuse passwords and so on.

