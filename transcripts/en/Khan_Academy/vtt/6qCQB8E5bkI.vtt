WEBVTT
Kind: captions
Language: en

00:00:00.342 --> 00:00:02.050
What I want to do in
this video is really

00:00:02.050 --> 00:00:05.450
think about what happens
when we define a function,

00:00:05.450 --> 00:00:08.420
and actually what happens as
we step through the program

00:00:08.420 --> 00:00:09.830
and we use the function.

00:00:09.830 --> 00:00:11.860
So let's say we
write this program,

00:00:11.860 --> 00:00:15.280
just like we did in the
last video, and we run it.

00:00:15.280 --> 00:00:17.760
So the interpreter will start
at this first line over here.

00:00:17.760 --> 00:00:19.760
It says, oh look, there's
a function definition.

00:00:19.760 --> 00:00:22.590
We're defining the
function factorial.

00:00:22.590 --> 00:00:24.990
What I'm going to do here is
I'm going to make a big box.

00:00:24.990 --> 00:00:27.340
And this big box
is the environment.

00:00:27.340 --> 00:00:30.310
And an environment
for a program is

00:00:30.310 --> 00:00:32.650
all of the different
definitions,

00:00:32.650 --> 00:00:34.480
and variable definitions,
and everything

00:00:34.480 --> 00:00:39.420
that are specific to the context
that the program is running in.

00:00:39.420 --> 00:00:43.680
So immediately, the program will
associate the name factorial

00:00:43.680 --> 00:00:45.910
with this whole function
right over here.

00:00:45.910 --> 00:00:55.480
So right when it says
define factorial,

00:00:55.480 --> 00:01:00.380
it'll actually associate
factorial-- the label

00:01:00.380 --> 00:01:04.150
factorial, you could say it--
it'll associate the label

00:01:04.150 --> 00:01:09.180
factorial with a function that
looks like all of this business

00:01:09.180 --> 00:01:10.450
right over here.

00:01:10.450 --> 00:01:15.020
So you'll pass it a number.

00:01:15.020 --> 00:01:17.960
And I'm not using-- well,
maybe I'll write it like this.

00:01:20.730 --> 00:01:22.470
It's a function.

00:01:22.470 --> 00:01:25.240
And I'm not using the-- you'll
see different notations, lambda

00:01:25.240 --> 00:01:26.740
notation and all
of this fancy stuff

00:01:26.740 --> 00:01:28.573
if you take a formal
computer science class.

00:01:28.573 --> 00:01:30.760
But all I'm just saying
is factorial refers

00:01:30.760 --> 00:01:38.910
to a function that has
the parameters-- that

00:01:38.910 --> 00:01:39.920
only has one parameter.

00:01:39.920 --> 00:01:42.290
It has the parameter number.

00:01:42.290 --> 00:01:49.930
And then given this function
with the parameter number,

00:01:49.930 --> 00:01:51.940
it'll then process this code.

00:01:51.940 --> 00:01:54.590
So let me just copy and
paste it right here.

00:01:54.590 --> 00:01:58.490
And then-- whoops-- I'm
doing it in the wrong layer.

00:01:58.490 --> 00:02:00.040
Let me copy and paste it again.

00:02:00.040 --> 00:02:04.570
So let me try to copy it.

00:02:04.570 --> 00:02:05.780
Let me copy it.

00:02:05.780 --> 00:02:08.620
And then let me paste it.

00:02:08.620 --> 00:02:11.279
So that's what it's
doing right over there.

00:02:11.279 --> 00:02:12.820
And actually, I
should make this box.

00:02:12.820 --> 00:02:14.370
The environment
includes all of this.

00:02:14.370 --> 00:02:15.536
I think you'll bear with me.

00:02:15.536 --> 00:02:18.170
I didn't draw this orange
box big enough the first time

00:02:18.170 --> 00:02:19.560
around.

00:02:19.560 --> 00:02:22.285
So let me do that just so
that no one gets confused.

00:02:22.285 --> 00:02:24.030
Just so that no
one gets confused,

00:02:24.030 --> 00:02:25.970
let me expand the orange box.

00:02:28.620 --> 00:02:31.910
And I erased a little bit.

00:02:31.910 --> 00:02:36.212
One of the parameters is number.

00:02:36.212 --> 00:02:38.420
And then that orange box
goes around the whole thing.

00:02:41.740 --> 00:02:43.950
That's a green color.

00:02:43.950 --> 00:02:45.890
All right, here we go.

00:02:45.890 --> 00:02:48.930
So right when we hit this
first few lines, it's saying,

00:02:48.930 --> 00:02:52.210
look, in our entire
global environment,

00:02:52.210 --> 00:02:53.620
we're defining a function.

00:02:53.620 --> 00:02:55.800
The factorial will now
refer to a function

00:02:55.800 --> 00:02:57.360
that takes the parameter number.

00:02:57.360 --> 00:03:00.460
And then it'll run all of this
code that we've defined here.

00:03:00.460 --> 00:03:03.560
And then it'll return whatever
inside this function world,

00:03:03.560 --> 00:03:06.670
whatever the value of
the variable product is.

00:03:06.670 --> 00:03:08.810
And then it keeps going
line by line by line.

00:03:08.810 --> 00:03:10.750
And then we get to this
line right over here.

00:03:10.750 --> 00:03:14.390
And it says, the variable
user input is equal to--

00:03:14.390 --> 00:03:16.680
and then it calls
the function input.

00:03:16.680 --> 00:03:18.550
And it passes the
function input.

00:03:18.550 --> 00:03:20.841
And I'm starting to use a
little bit of the terminology

00:03:20.841 --> 00:03:22.130
that we've been exposed to.

00:03:22.130 --> 00:03:25.300
It passes the function
input a string.

00:03:25.300 --> 00:03:26.830
So this right here is a string.

00:03:26.830 --> 00:03:29.230
And once again, string
sounds like a fancy word.

00:03:29.230 --> 00:03:31.830
But it literally means
string of characters,

00:03:31.830 --> 00:03:33.940
or this text right
here, the text

00:03:33.940 --> 00:03:35.690
enter a non-negative
integer to take

00:03:35.690 --> 00:03:37.680
the factorial of colon space.

00:03:37.680 --> 00:03:39.880
So even the spaces are
part of the strings.

00:03:39.880 --> 00:03:41.940
And the telltale
sign for a string

00:03:41.940 --> 00:03:44.640
is it's going to be inside
some type of quotation marks,

00:03:44.640 --> 00:03:47.060
either double or
single quotation marks.

00:03:47.060 --> 00:03:49.830
So by passing this to
that input function,

00:03:49.830 --> 00:03:53.110
that tells the input function
what to prompt the user.

00:03:53.110 --> 00:03:55.800
So it prompts the
user with this string.

00:03:55.800 --> 00:03:59.420
The user types in a number
or some type of expression.

00:03:59.420 --> 00:04:03.240
That gets evaluated, and then
gets stored in user input.

00:04:03.240 --> 00:04:06.240
Or I really should say, in
then the Python context,

00:04:06.240 --> 00:04:08.920
user input refers to that value.

00:04:08.920 --> 00:04:10.915
So let's say the user inputs 3.

00:04:13.692 --> 00:04:20.860
Then the variable
user input will

00:04:20.860 --> 00:04:22.860
refer, in this
global environment--

00:04:22.860 --> 00:04:29.760
now factorial refers to
a function-- user input

00:04:29.760 --> 00:04:32.910
refers to whatever
the user typed in.

00:04:32.910 --> 00:04:35.350
I'm going to go with the
specific example of 3.

00:04:35.350 --> 00:04:36.770
Then we go to the next line.

00:04:36.770 --> 00:04:39.270
And it's saying, look, make
factorial of user input.

00:04:39.270 --> 00:04:42.900
Make this entire variable
refer to whatever

00:04:42.900 --> 00:04:47.520
we get when we call factorial
of user input, factorial

00:04:47.520 --> 00:04:49.330
of this variable over here.

00:04:49.330 --> 00:04:50.990
And so this is the
interesting part.

00:04:50.990 --> 00:04:55.890
At this point in the program,
the factorial of user input,

00:04:55.890 --> 00:05:02.140
this part right over here, it
makes a call to this function.

00:05:02.140 --> 00:05:04.900
It makes a call
to this function.

00:05:04.900 --> 00:05:09.010
And it gives it the argument
of whatever user input is.

00:05:09.010 --> 00:05:14.620
Now, user input
is referring to 3.

00:05:14.620 --> 00:05:18.120
So it is going to pass 3
to the function factorial.

00:05:18.120 --> 00:05:19.780
So 3 gets passed here.

00:05:19.780 --> 00:05:22.380
And essentially, within
this function world--

00:05:22.380 --> 00:05:25.110
so now let's say that this
is the context of running

00:05:25.110 --> 00:05:28.790
this function-- so within
this function world--

00:05:28.790 --> 00:05:29.990
let me make it clear.

00:05:29.990 --> 00:05:32.100
So now, within this
function world right

00:05:32.100 --> 00:05:36.830
over here, the
function's environment,

00:05:36.830 --> 00:05:48.877
the variable number within this
function world now refers to 3.

00:05:48.877 --> 00:05:50.460
I now want to be a
little bit careful,

00:05:50.460 --> 00:05:53.870
because we're starting to
touch on the idea of scope

00:05:53.870 --> 00:05:56.750
of a variable.

00:05:56.750 --> 00:05:58.710
The variable number in
this function world,

00:05:58.710 --> 00:06:01.620
it is only referenceable
within the function.

00:06:01.620 --> 00:06:03.910
And we do refer it
within the function.

00:06:03.910 --> 00:06:06.810
It is not a referable
outside of the function.

00:06:06.810 --> 00:06:08.570
So if down here
someplace, I were

00:06:08.570 --> 00:06:11.350
to say print number,
you would get an error,

00:06:11.350 --> 00:06:14.370
because it would be out of
the scope of that variable.

00:06:14.370 --> 00:06:16.930
This variable, it's a
parameter to this function.

00:06:16.930 --> 00:06:18.730
It's only usable
within this function.

00:06:18.730 --> 00:06:20.800
Its scope, the place
where you can refer to it,

00:06:20.800 --> 00:06:23.100
is only in this function.

00:06:23.100 --> 00:06:24.770
So you get that number.

00:06:24.770 --> 00:06:27.380
And then it does the code
that we've looked at before.

00:06:27.380 --> 00:06:28.715
It sets the variable product.

00:06:31.780 --> 00:06:37.790
So the variable product
now refers to the number 1.

00:06:37.790 --> 00:06:39.200
Then it calls all of this code.

00:06:39.200 --> 00:06:40.390
And since we've
talked about scope,

00:06:40.390 --> 00:06:42.181
I'll talk about another
situation of scope.

00:06:42.181 --> 00:06:45.580
This variable i is only
valid within the scope

00:06:45.580 --> 00:06:46.270
of the for loop.

00:06:46.270 --> 00:06:49.480
If down here I said return i,
that would have given an error.

00:06:49.480 --> 00:06:52.300
You can only refer to
it within the for loop.

00:06:52.300 --> 00:06:54.380
And we've gone through
this code multiple times.

00:06:54.380 --> 00:06:57.790
It goes from i equals 0 to
i equals 1 to i equals 2,

00:06:57.790 --> 00:07:00.620
all the way up to i is equal
to 1 less than the number.

00:07:00.620 --> 00:07:02.630
But since we're adding
1 to i every time,

00:07:02.630 --> 00:07:04.780
it's really going from--
this whole expression

00:07:04.780 --> 00:07:08.280
right over here starts at 1,
then 2, then 3, all the way up

00:07:08.280 --> 00:07:09.080
to the number.

00:07:09.080 --> 00:07:11.780
And each time, we're multiplying
it times the original product

00:07:11.780 --> 00:07:13.130
to get a new product.

00:07:13.130 --> 00:07:15.200
So at the end of
the day, after we

00:07:15.200 --> 00:07:21.280
go through this whole
for loop, product

00:07:21.280 --> 00:07:27.260
will contain the
factorial of the number.

00:07:27.260 --> 00:07:28.800
So after you do
this, product will

00:07:28.800 --> 00:07:30.380
keep referring to
a bunch of things.

00:07:30.380 --> 00:07:31.740
It'll refer to 1.

00:07:31.740 --> 00:07:33.200
Then it'll refer to 2.

00:07:33.200 --> 00:07:35.970
Then it'll refer to 6, because
we're going to do 3 times 2.

00:07:35.970 --> 00:07:46.400
So eventually, product
is going to refer to 6.

00:07:46.400 --> 00:07:47.275
And that is returned.

00:07:47.275 --> 00:07:49.110
And when I say that
that is returned,

00:07:49.110 --> 00:07:55.040
that means when you evaluate
this entire thing over here,

00:07:55.040 --> 00:07:59.760
that entire thing
is going to be 6.

00:07:59.760 --> 00:08:03.580
And then once we get
out of that program,

00:08:03.580 --> 00:08:15.230
it let's the interpreter know
that factorial of user input

00:08:15.230 --> 00:08:17.404
should now refer to that 6.

00:08:17.404 --> 00:08:19.570
I know this might be a
little bit confusing with all

00:08:19.570 --> 00:08:20.420
of this diagramming.

00:08:20.420 --> 00:08:22.878
But I really want you to get
the sense of what's happening.

00:08:22.878 --> 00:08:24.520
User input is
referring to something.

00:08:24.520 --> 00:08:27.360
We pass that something
to the factorial program.

00:08:27.360 --> 00:08:28.870
So then we go up here.

00:08:28.870 --> 00:08:30.610
And within the
factorial program,

00:08:30.610 --> 00:08:32.429
now, since we've passed
user input and user

00:08:32.429 --> 00:08:35.429
input was 3, within
the factorial program,

00:08:35.429 --> 00:08:38.200
this number is
going to refer to 3.

00:08:38.200 --> 00:08:40.360
And then we run this
as if number was 3.

00:08:40.360 --> 00:08:42.289
And then we return
product, which

00:08:42.289 --> 00:08:44.550
is going to be the
factorial of number.

00:08:44.550 --> 00:08:46.610
And so this whole
thing evaluates

00:08:46.610 --> 00:08:50.390
to the factorial of whatever was
in here, so the factorial of 3.

00:08:50.390 --> 00:08:53.100
And so factorial of user
input, this variable,

00:08:53.100 --> 00:08:55.990
will now refer to that, because
it's being assigned to that.

00:08:55.990 --> 00:08:57.565
And then we print it.

00:08:57.565 --> 00:08:58.940
And when we print
it, that's what

00:08:58.940 --> 00:09:01.760
actually shows up down
in our interpreter.

00:09:01.760 --> 00:09:03.940
So hopefully that doesn't
confuse you too much.

00:09:03.940 --> 00:09:05.920
In the next video,
we'll discuss how

00:09:05.920 --> 00:09:08.450
we might be able to
do interesting things

00:09:08.450 --> 00:09:10.601
to this function itself.

