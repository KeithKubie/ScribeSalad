WEBVTT
Kind: captions
Language: en

00:00:00.270 --> 00:00:03.760
So what exactly do we need to
know to get a widget working?

00:00:03.760 --> 00:00:07.620
How does the launcher even know we have
a widget the user could choose to add to

00:00:07.620 --> 00:00:08.300
their home screens?

00:00:09.300 --> 00:00:11.020
There's two main pieces.

00:00:11.020 --> 00:00:16.726
An AppWidgetProvider XML file and
an AppWidgetProvider class.

00:00:16.726 --> 00:00:21.740
The AppWidgetProvider XML file Is what
describes your widget's attributes,

00:00:21.740 --> 00:00:25.390
such as its size,
whether it can be resized, and

00:00:25.390 --> 00:00:29.270
a preview image, which helps users get a
sense of what your widget will look like

00:00:29.270 --> 00:00:31.910
before adding it to their home screen.

00:00:31.910 --> 00:00:35.820
The AppWidgetProvider is
what holds all the logic for

00:00:35.820 --> 00:00:39.980
creating the actual widget views,
filling the views with the correct data

00:00:39.980 --> 00:00:43.490
and setting up the click listeners so
our widgets respond to touch.

00:00:43.490 --> 00:00:46.440
One thing to keep in mind is that
users aren't limited to just

00:00:46.440 --> 00:00:47.930
one instance of your widget.

00:00:47.930 --> 00:00:50.520
They could have a bunch of
different sized widgets with

00:00:50.520 --> 00:00:51.880
potentially different data.

00:00:53.130 --> 00:00:57.570
That's one reasons why part of your
AppWidgetProviderInfo can specify

00:00:57.570 --> 00:00:59.280
a configuration activity,

00:00:59.280 --> 00:01:04.709
a special one-time setup activity that
appears when users select your widget.

00:01:04.709 --> 00:01:06.130
Well, we won't use this for Sunshine.

00:01:06.130 --> 00:01:07.250
You can imagine,

00:01:07.250 --> 00:01:11.650
if Sunshine supported multiple locations
at once, we could use a configuration

00:01:11.650 --> 00:01:16.480
activity to select which location we
wanted to display in each widget.

00:01:17.640 --> 00:01:19.344
So, let's start simple.

00:01:19.344 --> 00:01:23.210
We'll build the one by one version of
our today widget with some static data,

00:01:23.210 --> 00:01:28.750
say sunny and 76 degrees Fahrenheit,
a nice 24 Celsius.

00:01:28.750 --> 00:01:31.730
What would our app widget
provider info look like?

00:01:31.730 --> 00:01:34.970
In fact,
there's only a few required attributes.

00:01:34.970 --> 00:01:38.020
First here is initialLayout.

00:01:38.020 --> 00:01:41.788
This is the XML layout
to be used by default.

00:01:41.788 --> 00:01:42.954
minHeight and

00:01:42.954 --> 00:01:47.580
minWidth are what determine how many
cells in the launcher are used.

00:01:47.580 --> 00:01:52.230
Note that the number and size of cells
can change based on the device or

00:01:52.230 --> 00:01:53.420
launcher being used.

00:01:54.740 --> 00:01:58.180
A good rule of thumb is this formula,
which works well for

00:01:58.180 --> 00:02:00.020
all default launchers.

00:02:00.020 --> 00:02:02.800
In any case, you should build your
widget such that it's flexible

00:02:02.800 --> 00:02:06.600
enough to support slight
variations in the size available.

00:02:06.600 --> 00:02:11.310
The last attribute, you can see here,
is the updatePeriodMillis.

00:02:11.310 --> 00:02:16.320
By default, the system will wake up your
device at approximately this interval,

00:02:16.320 --> 00:02:19.860
and call your app widget
provider update your widget,

00:02:19.860 --> 00:02:22.860
with a minimum update
period of a half hour.

00:02:22.860 --> 00:02:24.280
However, if you have static data,

00:02:24.280 --> 00:02:28.850
you don't want to wake up
the data if it's in deep sleep.

00:02:28.850 --> 00:02:33.180
Or, if you have another component
already controlling the flow of new data

00:02:33.180 --> 00:02:37.384
into your app, such as
Sunshine Sync Adapter, you can use 0 to

00:02:37.384 --> 00:02:41.410
disable this functionality and
prevent unnecessary work.

00:02:41.410 --> 00:02:42.710
That's all we need to get started.

