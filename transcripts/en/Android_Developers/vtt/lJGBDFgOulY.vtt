WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:01.700
XIN LIU: Hi, everyone.

00:00:01.700 --> 00:00:03.920
I'm Xin from NetEase games.

00:00:03.920 --> 00:00:07.130
Today I'm going to talk
about Airtest project,

00:00:07.130 --> 00:00:12.010
the next generation automated
test team for games.

00:00:12.010 --> 00:00:16.305
Two month ago, on
JDC we launched here

00:00:16.305 --> 00:00:18.600
an open source-based project.

00:00:18.600 --> 00:00:22.191
So how many of you
here have heard of it?

00:00:22.191 --> 00:00:22.690
Oh.

00:00:22.690 --> 00:00:24.430
Pretty much.

00:00:24.430 --> 00:00:27.060
OK.

00:00:27.060 --> 00:00:30.550
Today I'm going to talk
about these three topics--

00:00:30.550 --> 00:00:35.230
challenges in testing,
and how Airtest project

00:00:35.230 --> 00:00:38.980
can help you solve
these problems; and also

00:00:38.980 --> 00:00:43.111
our internal priorities of
larger scale real device

00:00:43.111 --> 00:00:43.610
testing.

00:00:47.120 --> 00:00:49.910
So the first issue is
that we have so many games

00:00:49.910 --> 00:00:52.880
to test in NetEase games.

00:00:52.880 --> 00:00:58.720
These are games we developed
and released since 2014.

00:00:58.720 --> 00:01:03.040
We have released over
150 mobile games.

00:01:03.040 --> 00:01:07.230
And also, we have run several
PC games for over 10 years.

00:01:07.230 --> 00:01:10.040
So how do we ensure the high
quality of all these games?

00:01:12.650 --> 00:01:16.570
Another issue is Android
device fragmentation.

00:01:16.570 --> 00:01:19.900
And because Android
system is open source,

00:01:19.900 --> 00:01:24.310
and OEMs can customize
their own Android phones.

00:01:24.310 --> 00:01:28.540
And this graph shows
the situation in China.

00:01:28.540 --> 00:01:31.240
You can see Samsung,
Huawei, Xiaomi.

00:01:31.240 --> 00:01:35.100
Each have dozens
of Android models,

00:01:35.100 --> 00:01:38.680
and each model has
different screen resolution,

00:01:38.680 --> 00:01:45.170
different system APIs,
or even graphic drivers.

00:01:45.170 --> 00:01:47.070
in NetEase games,
we usually need

00:01:47.070 --> 00:01:54.630
to test more than 200 Android
phones before releasing a game.

00:01:57.180 --> 00:02:00.810
Then let's take a look at
the difference of testing

00:02:00.810 --> 00:02:03.570
between apps and the games.

00:02:03.570 --> 00:02:07.290
The first one is
usually our games

00:02:07.290 --> 00:02:10.050
are released on
multiple platforms,

00:02:10.050 --> 00:02:14.730
like Android, iOS; the
same version of game

00:02:14.730 --> 00:02:16.860
on different platforms.

00:02:16.860 --> 00:02:18.490
And sometimes on desktop.

00:02:18.490 --> 00:02:21.690
And just now we said
Chrome OS, right.

00:02:21.690 --> 00:02:27.960
And sometimes Tim HTML5
platforms, console, or even VR.

00:02:27.960 --> 00:02:32.550
The next difference is
that we got less support

00:02:32.550 --> 00:02:34.930
from a third party.

00:02:34.930 --> 00:02:39.390
I mean, such as test
frameworks, or testing tools,

00:02:39.390 --> 00:02:41.280
and platforms.

00:02:41.280 --> 00:02:45.450
Unlike apps, Google
provide app developers

00:02:45.450 --> 00:02:49.860
with test frameworks, like UI
Automator, or is [INAUDIBLE]..

00:02:49.860 --> 00:02:54.760
And also testing tools are
integrated in Android Studio.

00:02:54.760 --> 00:02:59.280
Now also we have Firebase
Test Lab for app testing.

00:02:59.280 --> 00:03:05.370
Another big issue is that games
always need more test cases,

00:03:05.370 --> 00:03:09.270
because users, there
are more content

00:03:09.270 --> 00:03:13.290
that can be played in
a game than in a app.

00:03:13.290 --> 00:03:19.375
So the test cases are increases
exponentially in games.

00:03:22.740 --> 00:03:26.510
So how do we solve these issues?

00:03:26.510 --> 00:03:29.560
We can hire more and more
people to do testing.

00:03:29.560 --> 00:03:32.160
But hiring more
people to do test

00:03:32.160 --> 00:03:37.520
on 200 Android phones, that's
not tolerable, I think--

00:03:37.520 --> 00:03:41.660
even if it's in China.

00:03:41.660 --> 00:03:44.480
So automation is here to help.

00:03:44.480 --> 00:03:48.650
Actually, we have developed
this project for three years

00:03:48.650 --> 00:03:50.270
internally.

00:03:50.270 --> 00:03:55.260
And last year on Google I/O, I
talked with Firebase Test Lab

00:03:55.260 --> 00:03:56.120
team.

00:03:56.120 --> 00:03:59.075
And we collaborate open
sourcing these project.

00:04:02.410 --> 00:04:05.290
So let me introduce
Airtest IDE first.

00:04:05.290 --> 00:04:08.474
It's a desktop IDE.

00:04:08.474 --> 00:04:10.750
The right side is
the mirror window

00:04:10.750 --> 00:04:15.870
of an Android phone connecting
with your PC via ADB.

00:04:15.870 --> 00:04:19.149
And the middle part
is a code editor,

00:04:19.149 --> 00:04:21.910
where you can write
arbitrary Python code.

00:04:21.910 --> 00:04:24.280
And the left part
shows the hierarchy

00:04:24.280 --> 00:04:27.820
of this, the UI hierarchy
of this Unity game,

00:04:27.820 --> 00:04:33.820
and also the APIs provided
by our test framework.

00:04:33.820 --> 00:04:38.440
And when you operate
on the screen window,

00:04:38.440 --> 00:04:43.829
test code will be automatically
generated in the Code Editor.

00:04:43.829 --> 00:04:44.620
Let's see the demo.

00:04:48.510 --> 00:04:49.010
Yeah.

00:04:49.010 --> 00:04:50.340
Click the recording button.

00:04:54.940 --> 00:04:58.730
And perform a touch
action, it will

00:04:58.730 --> 00:05:01.850
generate a sentence in Python.

00:05:01.850 --> 00:05:02.890
Also, you can edit it.

00:05:06.980 --> 00:05:07.625
Swipe action.

00:05:10.750 --> 00:05:12.750
And then we can slip one second.

00:05:17.340 --> 00:05:22.200
Also, make assertions
of the UI show up.

00:05:22.200 --> 00:05:25.060
Then we can run it
immediately on this phone

00:05:25.060 --> 00:05:26.080
to see if it works.

00:05:31.481 --> 00:05:33.620
After you run the tests--

00:05:33.620 --> 00:05:35.420
oh, yeah, it worked--

00:05:35.420 --> 00:05:39.400
after you run it, you can
check the HTML report.

00:05:39.400 --> 00:05:42.440
It shows every
step of your tests.

00:05:45.540 --> 00:05:48.630
If any step went wrong,
it will be labeled red,

00:05:48.630 --> 00:05:50.370
and you can see
the failure point.

00:05:53.030 --> 00:05:57.730
You may have noticed that
we have two underlying test

00:05:57.730 --> 00:05:59.260
framework here.

00:05:59.260 --> 00:06:01.880
The first is Airtest framework.

00:06:01.880 --> 00:06:04.700
It uses image recognition
[INAUDIBLE] knowledge

00:06:04.700 --> 00:06:07.010
to locate UI elements.

00:06:07.010 --> 00:06:12.010
And then in the use device APIs
to perform simulated input.

00:06:15.030 --> 00:06:18.740
This is the structure
of a Airtest.

00:06:18.740 --> 00:06:25.850
We provide users with a simple
test API, like simulated input,

00:06:25.850 --> 00:06:27.440
like make a insertion.

00:06:27.440 --> 00:06:32.220
And then it uses image
recognition to locate a UI.

00:06:32.220 --> 00:06:39.230
And then we have a underlying
abstract layer of platform API.

00:06:39.230 --> 00:06:45.310
We unify the simulate the input
APIs of different platforms

00:06:45.310 --> 00:06:48.260
so that user can
run their script

00:06:48.260 --> 00:06:54.740
on different platforms, like
Android, iOS, and Windows,

00:06:54.740 --> 00:06:55.402
and VR.

00:06:58.470 --> 00:07:02.510
There is another
framework called Poco.

00:07:02.510 --> 00:07:08.120
This framework is similar to
the task frameworks for apps,

00:07:08.120 --> 00:07:12.070
like UI Automator for Android.

00:07:12.070 --> 00:07:15.870
But most of the games
uses graphic API,

00:07:15.870 --> 00:07:20.880
like OpenGL or Vulkan
to render the UI widget.

00:07:20.880 --> 00:07:26.200
So we cannot directly use UI
automator on Android for games.

00:07:26.200 --> 00:07:27.560
So we developed Poco.

00:07:30.270 --> 00:07:32.740
This is how it works.

00:07:32.740 --> 00:07:36.030
We also have a
underlying abstract layer

00:07:36.030 --> 00:07:41.580
of device abstraction here
for different game engines.

00:07:41.580 --> 00:07:45.360
We provide each game
engine an SDK so

00:07:45.360 --> 00:07:47.940
that the test framework
can communicate

00:07:47.940 --> 00:07:49.450
with the game engine.

00:07:49.450 --> 00:07:52.580
We are JSON RPC.

00:07:52.580 --> 00:07:56.950
And then we unify
different game engines.

00:07:56.950 --> 00:07:59.410
So we can write test for
different game engines.

00:08:01.980 --> 00:08:04.500
Also, the custom engines.

00:08:04.500 --> 00:08:09.890
In the morning I saw most of
you are using custom engines.

00:08:09.890 --> 00:08:12.930
We provide multiple
language SDK so you

00:08:12.930 --> 00:08:15.420
can implement in
your own game engine,

00:08:15.420 --> 00:08:18.720
and start using our test
framework, and also our tools.

00:08:21.380 --> 00:08:24.900
Here is a comparison.

00:08:24.900 --> 00:08:28.660
Airtest use image
recognition to locate UI,

00:08:28.660 --> 00:08:33.940
and use platform API to
perform simulated input.

00:08:33.940 --> 00:08:35.799
And what's cool
here is it does not

00:08:35.799 --> 00:08:37.539
require any instrumentation.

00:08:37.539 --> 00:08:41.500
Just plug in your
phone, and start using.

00:08:41.500 --> 00:08:44.280
And we support
multiple platforms.

00:08:44.280 --> 00:08:47.810
And Poco uses UI
hierarchy inspection,

00:08:47.810 --> 00:08:53.110
and use JSON RPC to communicate
with the SDK in game engine.

00:08:53.110 --> 00:08:56.660
Now you need to
integrate our SDK.

00:08:56.660 --> 00:08:59.370
It usually takes
less than 10 minutes.

00:08:59.370 --> 00:09:03.890
And now we support Unity and
Cocos, those two game engine.

00:09:03.890 --> 00:09:08.390
And also Android native
app, we implement an SDK

00:09:08.390 --> 00:09:10.550
using accessibility service.

00:09:10.550 --> 00:09:12.680
So you don't need to
integrate anything

00:09:12.680 --> 00:09:17.270
into app for Android native
apps, and also custom game

00:09:17.270 --> 00:09:17.770
engine.

00:09:21.390 --> 00:09:24.750
So how do we choose
which framework to use?

00:09:24.750 --> 00:09:27.140
Here are some
suggestions from us.

00:09:27.140 --> 00:09:29.270
Actually, in NetEase,
we have written

00:09:29.270 --> 00:09:35.450
thousands of tests for different
type of games internally.

00:09:35.450 --> 00:09:39.980
And the advantage of
Airtest is obvious.

00:09:39.980 --> 00:09:42.200
It requires no instrumentation.

00:09:42.200 --> 00:09:46.490
And using open CV
to do assertion,

00:09:46.490 --> 00:09:49.550
to make assertion of
the UI, is reliable,

00:09:49.550 --> 00:09:56.080
because it checks exactly what
users are expected to see.

00:09:56.080 --> 00:10:00.150
And for Poco, since it uses
UI hierarchy inspection,

00:10:00.150 --> 00:10:05.560
it can be more accurate,
especially for cases of 3D

00:10:05.560 --> 00:10:09.490
object when the object change
their orientation in games.

00:10:12.380 --> 00:10:18.560
And this Poco is similar
to test frameworks

00:10:18.560 --> 00:10:22.570
for apps like UI Automation.

00:10:22.570 --> 00:10:25.870
And it covers the what
is missing for games.

00:10:30.260 --> 00:10:35.750
And we released these two
project GDC two month ago.

00:10:35.750 --> 00:10:44.840
And we got 6,000 downloads,
and over 1,000 stars

00:10:44.840 --> 00:10:46.400
in this two month.

00:10:46.400 --> 00:10:51.206
And please try our project,
and star us on GitHub.

00:10:51.206 --> 00:10:52.730
But it's started.

00:10:52.730 --> 00:10:58.430
We have two more new
features in this two month.

00:10:58.430 --> 00:11:01.420
First we support iOS.

00:11:01.420 --> 00:11:04.290
Actually, we have
supported iOS last year,

00:11:04.290 --> 00:11:10.230
but the performance is not
good enough to be released.

00:11:10.230 --> 00:11:11.130
Let's see this demo.

00:11:14.190 --> 00:11:19.750
Connecting your iOS
with your x code.

00:11:19.750 --> 00:11:25.280
Then you can operate the screen
just like for Android phones.

00:11:33.627 --> 00:11:35.920
And this is one of our games.

00:11:48.860 --> 00:11:51.875
Then you can run the
tests on this iPhone.

00:12:11.080 --> 00:12:12.200
That's it.

00:12:12.200 --> 00:12:14.360
The back panel of
this iOS support

00:12:14.360 --> 00:12:19.780
is originated from
Facebook web travel agent.

00:12:19.780 --> 00:12:24.470
But the web travel agent, the
problem is that it's too slow.

00:12:24.470 --> 00:12:28.690
Simple touch action can
take as long as one second,

00:12:28.690 --> 00:12:32.160
and it's not tolerable
for games automation.

00:12:32.160 --> 00:12:37.910
So we optimize most
of its API last month.

00:12:37.910 --> 00:12:45.455
And now the frame rate can be
up to 15 FPS in the Airtest IDE.

00:12:48.730 --> 00:12:52.582
Another feature is we
support web pages automation.

00:12:56.280 --> 00:13:00.900
You can open the Chrome
browser in the IDE.

00:13:00.900 --> 00:13:05.850
And then you can
operate on the Chrome.

00:13:05.850 --> 00:13:10.730
And then code will be
automatically generated.

00:13:10.730 --> 00:13:11.350
Yeah.

00:13:11.350 --> 00:13:16.780
The [INAUDIBLE] is based
on Selenium framework.

00:13:16.780 --> 00:13:19.300
Also you can use
Airtest API to make

00:13:19.300 --> 00:13:33.060
insertions to run the test,
and then generate the report.

00:13:33.060 --> 00:13:38.730
Since Selenium is quite immature
in web pages automation,

00:13:38.730 --> 00:13:40.640
we have no reason
to reinvent it.

00:13:40.640 --> 00:13:45.530
So we just wrote a
plugin for Airtest IDE

00:13:45.530 --> 00:13:50.480
to help recording this
web pages automation.

00:13:54.890 --> 00:13:58.190
I think it will be useful
if you are releasing game

00:13:58.190 --> 00:14:00.730
on HTML platform.

00:14:03.660 --> 00:14:06.690
Until now we talked
about Airtest project.

00:14:06.690 --> 00:14:11.910
You can use Airtest IDE
to record and run the test

00:14:11.910 --> 00:14:14.970
on your PC and on your phone.

00:14:14.970 --> 00:14:21.090
But how do we test
hundreds of Android phones?

00:14:21.090 --> 00:14:23.960
The first thing is
Firebase Test Lab.

00:14:23.960 --> 00:14:27.540
Firebase Test Lab is a
test service provided

00:14:27.540 --> 00:14:29.630
by Google Firebase team.

00:14:29.630 --> 00:14:32.730
And what do we do
collaborating with their team

00:14:32.730 --> 00:14:37.920
is we support running
Airtest and the Poco script

00:14:37.920 --> 00:14:39.850
on Firebase Test Lab.

00:14:39.850 --> 00:14:44.040
And you can use Airtest
IDE to bundle your test

00:14:44.040 --> 00:14:46.110
script into an APK.

00:14:46.110 --> 00:14:50.170
And then you can upload
it to the FTL web page.

00:14:50.170 --> 00:14:54.720
And then you can start
a instrumentation test,

00:14:54.720 --> 00:14:58.370
and use the cloud of
devices provided by FTL.

00:15:01.390 --> 00:15:06.390
And this is our
internal device farm.

00:15:06.390 --> 00:15:10.970
We have set up a device
farm of 200 devices--

00:15:10.970 --> 00:15:12.740
200 Android devices.

00:15:12.740 --> 00:15:18.210
And we have written now the
number could be 2,000 scripts.

00:15:18.210 --> 00:15:21.960
And we run those scripts of
different games every week,

00:15:21.960 --> 00:15:25.971
because our game
are updated weekly.

00:15:25.971 --> 00:15:28.023
And let's see how it works.

00:15:40.581 --> 00:15:44.590
It's just [INAUDIBLE]
and around the test

00:15:44.590 --> 00:15:46.150
generated by Airtest IDE.

00:16:00.010 --> 00:16:02.490
Yeah, that's it.

00:16:02.490 --> 00:16:08.030
As for our roadmap for
this automation project,

00:16:08.030 --> 00:16:10.910
we intended to
support more clients--

00:16:10.910 --> 00:16:15.110
iOS, Android Emulator,
and web pages.

00:16:15.110 --> 00:16:17.540
These are in better version.

00:16:17.540 --> 00:16:19.350
You can try it now.

00:16:19.350 --> 00:16:25.370
And feel free to fire us a
issue if you find any bug.

00:16:25.370 --> 00:16:32.560
And also we are Hybrid apps, and
UnrealEngine is in the future.

00:16:32.560 --> 00:16:36.960
Also, we supported Android TV.

00:16:36.960 --> 00:16:40.003
But I'm not sure
about Chrome OS.

00:16:40.003 --> 00:16:44.060
But maybe it works.

00:16:44.060 --> 00:16:48.760
And also another
important thing is

00:16:48.760 --> 00:16:52.700
we want to build
up the open source

00:16:52.700 --> 00:16:59.000
community for this project, and
I hope more and more developers

00:16:59.000 --> 00:17:01.730
like it, and get
involved in this project.

00:17:01.730 --> 00:17:03.290
Yeah, thank you.

00:17:03.290 --> 00:17:04.690
And any question?

00:17:31.080 --> 00:17:32.580
AUDIENCE: You
mentioned you're using

00:17:32.580 --> 00:17:35.130
the accessibility service.

00:17:35.130 --> 00:17:36.810
Did you have any
issue with that when

00:17:36.810 --> 00:17:39.340
that was restricted recently?

00:17:39.340 --> 00:17:40.390
XIN LIU: When it what?

00:17:40.390 --> 00:17:41.890
AUDIENCE: The
accessibility service.

00:17:41.890 --> 00:17:45.570
It was restricted for apps that
were using those launchers,

00:17:45.570 --> 00:17:51.350
or for any apps that were
trying to access the reverse

00:17:51.350 --> 00:17:54.067
[INAUDIBLE] tapped in large.

00:17:54.067 --> 00:17:56.400
Those are things that were
being restricted because they

00:17:56.400 --> 00:17:57.650
were being taken advantage of.

00:17:57.650 --> 00:18:00.036
Have you guys seen
any impact from that?

00:18:00.036 --> 00:18:05.640
XIN LIU: For UI
testing of native apps,

00:18:05.640 --> 00:18:07.560
we don't see any restriction.

00:18:07.560 --> 00:18:13.710
I think it can do what UI
automation or [INAUDIBLE] do.

