WEBVTT
Kind: captions
Language: en

00:00:08.810 --> 00:00:11.020
ANKUR KOTWAL: Hi, I'm Ankur
Kotwal, and I'm an engineer on

00:00:11.020 --> 00:00:12.780
the Android Developer
Relations team

00:00:12.780 --> 00:00:13.380
CHRIS BROADFOOT: Hi, I'm
Chris Broadfoot.

00:00:13.380 --> 00:00:16.540
I work on the Google Maps
Android API team.

00:00:16.540 --> 00:00:17.830
ANKUR KOTWAL: Today we're going
to talk to you about the

00:00:17.830 --> 00:00:19.410
Maps API for Android.

00:00:19.410 --> 00:00:21.640
And we're going to cover
a few things.

00:00:21.640 --> 00:00:23.870
But to start with, let's
talk about animation.

00:00:23.870 --> 00:00:28.840
If you have a look at the sample
code for the Maps API,

00:00:28.840 --> 00:00:32.700
you'll see that we use handlers
to animate markers

00:00:32.700 --> 00:00:34.210
and for other purposes, too.

00:00:34.210 --> 00:00:37.230
So what we're going to talk
about today is how you can use

00:00:37.230 --> 00:00:39.480
handlers for backward
compatibility but use some of

00:00:39.480 --> 00:00:42.900
the newer APIs, ie the property
animation framework,

00:00:42.900 --> 00:00:45.560
to have an even better
experience.

00:00:45.560 --> 00:00:50.340
So let's switch to the tablet,
and let's just see a basic

00:00:50.340 --> 00:00:51.700
marker animating.

00:00:51.700 --> 00:00:53.600
All we're doing is where we
tap, we just generate a

00:00:53.600 --> 00:00:56.950
polyline from the source
to destination.

00:00:56.950 --> 00:00:58.282
Just tell the marker
to move there.

00:00:58.282 --> 00:00:59.610
CHRIS BROADFOOT: Yup.

00:00:59.610 --> 00:01:03.070
ANKUR KOTWAL: So here,
we've accomplished

00:01:03.070 --> 00:01:03.660
what we wanted to.

00:01:03.660 --> 00:01:08.070
But as I said in Gingerbread and
older, what we would do is

00:01:08.070 --> 00:01:10.980
animate the marker's position
using a handler.

00:01:10.980 --> 00:01:13.290
So let's have a look at
some code that shows

00:01:13.290 --> 00:01:14.170
us how we do this.

00:01:14.170 --> 00:01:16.210
CHRIS BROADFOOT: OK, so we'll
be showing you three ways of

00:01:16.210 --> 00:01:18.350
animating a marker.

00:01:18.350 --> 00:01:20.800
And each of these methods will
have the same parameters--

00:01:20.800 --> 00:01:25.030
so the marker itself, the final
destination lat long, so

00:01:25.030 --> 00:01:28.650
that's its final point, and a
lat long interpolator, which

00:01:28.650 --> 00:01:31.010
we'll talk about a
little bit later.

00:01:31.010 --> 00:01:34.780
So from Gingerbread and before,
we need to do a little

00:01:34.780 --> 00:01:37.920
bit of setup to set up our
animation handler.

00:01:37.920 --> 00:01:41.200
So first of all, we get the
start position just by calling

00:01:41.200 --> 00:01:43.060
get position on the marker.

00:01:43.060 --> 00:01:46.940
And then again, some of that's
set up, so just the start time

00:01:46.940 --> 00:01:48.900
and our animation duration.

00:01:48.900 --> 00:01:51.380
So here's the meat
of the animation.

00:01:51.380 --> 00:01:56.580
So this runnable gets called
every 16 milliseconds while

00:01:56.580 --> 00:01:59.260
the animation is in progress.

00:01:59.260 --> 00:02:03.230
The t variable is the
portion that we

00:02:03.230 --> 00:02:04.530
are through the animation.

00:02:04.530 --> 00:02:05.790
And we're also using
an interpolator.

00:02:05.790 --> 00:02:08.710
And so these are available
before Ice Cream Sandwich and

00:02:08.710 --> 00:02:10.259
Honeycomb as well.

00:02:10.259 --> 00:02:13.130
So this is great for like
a accelerate/decelerate

00:02:13.130 --> 00:02:16.380
interpolation or a bouncing
interpolation.

00:02:16.380 --> 00:02:19.540
And then we just go ahead and
call that set position on the

00:02:19.540 --> 00:02:22.340
marker with its new value.

00:02:22.340 --> 00:02:23.480
ANKUR KOTWAL: And you'll see
at the end of the handler,

00:02:23.480 --> 00:02:27.370
what we do is we re-invoke the
handler after 16 milliseconds.

00:02:27.370 --> 00:02:29.370
And of course, that magic number
is used so that we can

00:02:29.370 --> 00:02:31.390
get 60 frames per second.

00:02:31.390 --> 00:02:33.750
Now one of the downsides to this
is that we are doing this

00:02:33.750 --> 00:02:37.830
asynchronously to the Android
UI rendering thread.

00:02:37.830 --> 00:02:41.270
So what we can do is use the
property animation framework,

00:02:41.270 --> 00:02:43.410
and we're going to shift to the
next one and see in the

00:02:43.410 --> 00:02:46.000
value animator how we can
synchronize those.

00:02:46.000 --> 00:02:48.940
CHRIS BROADFOOT: OK, so from
Honeycomb onwards, we can use

00:02:48.940 --> 00:02:51.070
value animator, as Ankur said.

00:02:51.070 --> 00:02:52.950
So here we still have to do
a little bit of setup.

00:02:52.950 --> 00:02:55.580
We get the marker's
starting position.

00:02:55.580 --> 00:02:58.780
But the value animator can give
us the animated fraction.

00:02:58.780 --> 00:03:01.620
So this is the combination of
how far the animation is

00:03:01.620 --> 00:03:05.530
through and also the
interpolator.

00:03:05.530 --> 00:03:10.800
So any accelerate, decelerate
is applied to that as well.

00:03:10.800 --> 00:03:13.575
And so we just again call
set position on that.

00:03:13.575 --> 00:03:16.230
ANKUR KOTWAL: So the
onAnimationUpdate override, it

00:03:16.230 --> 00:03:19.390
gets invoked as the next frame
is being prepared.

00:03:19.390 --> 00:03:22.600
So literally, that's your
opportunity to do whatever

00:03:22.600 --> 00:03:23.800
changes you want to make.

00:03:23.800 --> 00:03:25.620
And then the frame
will get drawn.

00:03:25.620 --> 00:03:28.610
Unlike the handler, which is
just going to happen every 16

00:03:28.610 --> 00:03:32.450
milliseconds regardless of when
you're drawing your next

00:03:32.450 --> 00:03:37.440
frame, this happens synchronized
with that

00:03:37.440 --> 00:03:38.540
rendering framework.

00:03:38.540 --> 00:03:40.930
Now the interesting thing is,
or important thing is, you

00:03:40.930 --> 00:03:43.550
want to make sure you complete
your execution within 16

00:03:43.550 --> 00:03:46.630
milliseconds, otherwise you're
going to miss that draw, and

00:03:46.630 --> 00:03:48.430
you're going to get
jank or jitter.

00:03:48.430 --> 00:03:51.630
The actual animation of the
value, we're not really using

00:03:51.630 --> 00:03:52.320
that, as you can see.

00:03:52.320 --> 00:03:53.790
We say ignored.

00:03:53.790 --> 00:03:57.150
Because we're animating from
zero to one, but we're not

00:03:57.150 --> 00:03:59.100
actually utilizing
that at all.

00:03:59.100 --> 00:04:00.930
CHRIS BROADFOOT: So let's talk
about Object Animator, which

00:04:00.930 --> 00:04:03.425
is also available from
Honeycomb upwards.

00:04:03.425 --> 00:04:05.610
But Ice Cream Sandwich
adds some other

00:04:05.610 --> 00:04:08.990
nice options, I suppose.

00:04:08.990 --> 00:04:11.950
So here we're using an
object animator.

00:04:11.950 --> 00:04:14.560
So if you see down on this line,
we just create an object

00:04:14.560 --> 00:04:19.370
animator of the marker and
its property position.

00:04:19.370 --> 00:04:22.079
We're passing in a type
evaluator, which basically

00:04:22.079 --> 00:04:26.290
tells the animation framework
how to animate between custom

00:04:26.290 --> 00:04:27.020
object types.

00:04:27.020 --> 00:04:29.740
So in this case, it's a latitude
longitude object.

00:04:29.740 --> 00:04:31.810
And we just passed in
the final position.

00:04:31.810 --> 00:04:34.640
So there's no need to call
marker.getPosition at the

00:04:34.640 --> 00:04:37.700
start of the animation,
which is quite nice.

00:04:37.700 --> 00:04:40.530
So the type evaluator
is very simple.

00:04:40.530 --> 00:04:43.240
In fact, it's very similar to
our lat long interpolator

00:04:43.240 --> 00:04:45.820
object, which we'll show you
in the next section.

00:04:45.820 --> 00:04:48.740
ANKUR KOTWAL: So the other
advantage that I can see here

00:04:48.740 --> 00:04:51.510
is that we've actually got
significantly less code to do

00:04:51.510 --> 00:04:53.000
this now than when we started.

00:04:53.000 --> 00:04:55.240
So you can obviously
group properties.

00:04:55.240 --> 00:04:57.100
You can group different objects
in here as well.

00:04:57.100 --> 00:04:59.980
So you can animate things
in bundles.

00:04:59.980 --> 00:05:01.680
CHRIS BROADFOOT: This works well
with a property's value

00:05:01.680 --> 00:05:03.340
holder, for example.

00:05:03.340 --> 00:05:04.300
ANKUR KOTWAL: Yeah.

00:05:04.300 --> 00:05:06.300
All right, so that's
animation.

00:05:06.300 --> 00:05:09.440
Now let's switch back
to our tablet.

00:05:09.440 --> 00:05:12.190
Chris, why don't you walk us
through the next problem?

00:05:12.190 --> 00:05:14.960
CHRIS BROADFOOT: OK, so our
animation is very simple.

00:05:14.960 --> 00:05:18.700
We're just animating the
latitude and longitude values

00:05:18.700 --> 00:05:21.620
of the lat long object
separately.

00:05:21.620 --> 00:05:25.220
So this has some problems on
the surface of the earth,

00:05:25.220 --> 00:05:29.520
where things wrap around
the date line.

00:05:29.520 --> 00:05:33.510
So at the 180th longitude, it's
actually the same point

00:05:33.510 --> 00:05:36.130
as minus 180 longitude.

00:05:36.130 --> 00:05:39.080
So you'll notice if we try to
animate across, the marker's

00:05:39.080 --> 00:05:41.350
going to go all the way around
the world instead of taking

00:05:41.350 --> 00:05:43.040
the shortest path.

00:05:43.040 --> 00:05:44.985
So we can fix this
very simply.

00:05:44.985 --> 00:05:47.890
Let's go over to the code.

00:05:47.890 --> 00:05:50.350
So here's our broken
interpolator.

00:05:50.350 --> 00:05:55.600
It just takes the lat and
long and takes a linear

00:05:55.600 --> 00:05:57.300
interpolation of each value.

00:05:57.300 --> 00:06:00.820
And our fixed one just figures
out whether we should take a

00:06:00.820 --> 00:06:02.380
shorter path or not.

00:06:02.380 --> 00:06:05.210
So it just sees if the distance
it needs to travel is

00:06:05.210 --> 00:06:07.800
more than 180 degrees.

00:06:07.800 --> 00:06:08.860
ANKUR KOTWAL: Let's switch back
to the tablet and just

00:06:08.860 --> 00:06:10.620
see what happens there.

00:06:10.620 --> 00:06:12.180
So this is the broken one.

00:06:12.180 --> 00:06:13.695
We're traveling around
the world to get to

00:06:13.695 --> 00:06:15.420
that shortest distance.

00:06:15.420 --> 00:06:18.250
If we just switched to our fixed
one, you'll notice that

00:06:18.250 --> 00:06:19.340
we get that path.

00:06:19.340 --> 00:06:20.570
CHRIS BROADFOOT: Yeah.

00:06:20.570 --> 00:06:21.590
So it's very simple.

00:06:21.590 --> 00:06:25.680
So you may notice that the
marker doesn't exactly follow

00:06:25.680 --> 00:06:28.400
this polyline that we've
added to the map.

00:06:28.400 --> 00:06:32.020
So the polyline that we're using
has a geodesic property,

00:06:32.020 --> 00:06:35.570
which means that it's taking
the shortest path on the

00:06:35.570 --> 00:06:39.080
surface of the earth, as opposed
to a straight line on

00:06:39.080 --> 00:06:41.210
the surface of the map.

00:06:41.210 --> 00:06:45.370
So if we wanted our marker to
follow the polyline, we can

00:06:45.370 --> 00:06:48.560
use similar spherical
mathematics to do this

00:06:48.560 --> 00:06:50.260
interpolation instead.

00:06:50.260 --> 00:06:51.990
ANKUR KOTWAL: So switching
back to the laptop.

00:06:51.990 --> 00:06:53.210
CHRIS BROADFOOT: Yeah,
so this one's

00:06:53.210 --> 00:06:54.750
quite a bit more complex.

00:06:54.750 --> 00:06:58.050
You probably won't be writing
this function yourself.

00:06:58.050 --> 00:07:00.370
Instead you should probably
just copy and paste it or

00:07:00.370 --> 00:07:03.440
include the Android Maps
Utils Library.

00:07:03.440 --> 00:07:06.160
But basically, it just does
this spherical math.

00:07:06.160 --> 00:07:08.840
So if we switch back
to the tablet--

00:07:08.840 --> 00:07:11.190
ANKUR KOTWAL: Here it is broken,
just to show you that

00:07:11.190 --> 00:07:13.260
it's actually not following
that line.

00:07:13.260 --> 00:07:14.350
CHRIS BROADFOOT: Yep.

00:07:14.350 --> 00:07:15.690
ANKUR KOTWAL: And let's
switch to spherical.

00:07:15.690 --> 00:07:16.710
CHRIS BROADFOOT: Yup.

00:07:16.710 --> 00:07:20.360
So let's go near the poles,
for example, where this is

00:07:20.360 --> 00:07:21.610
more obvious.

00:07:25.190 --> 00:07:28.450
So you can see there's
quite a large bow.

00:07:28.450 --> 00:07:31.080
And the marker's following
the line exactly.

00:07:31.080 --> 00:07:33.140
ANKUR KOTWAL: And if we go back
to the broken one, you'll

00:07:33.140 --> 00:07:34.240
see that it literally--

00:07:34.240 --> 00:07:36.070
CHRIS BROADFOOT: Line goes
straight across.

00:07:36.070 --> 00:07:40.040
So the spherical method is very
useful if you want this

00:07:40.040 --> 00:07:43.960
marker to follow a line, like
we are here, or if your

00:07:43.960 --> 00:07:46.600
markers have some sort of actual
geographic importance,

00:07:46.600 --> 00:07:50.110
like perhaps a plane on the map
or something like that.

00:07:50.110 --> 00:07:52.370
Just animating the latitude and
longitude separately is

00:07:52.370 --> 00:07:55.440
fine for short distances, or if
you don't really care about

00:07:55.440 --> 00:07:59.850
any geographic properties, and
is probably quite a bit faster

00:07:59.850 --> 00:08:01.190
than the spherical methods.

00:08:01.190 --> 00:08:02.590
There's a lot of
maths in there.

00:08:02.590 --> 00:08:05.660
ANKUR KOTWAL: Yup, so please
do check out the code

00:08:05.660 --> 00:08:06.320
that we have here.

00:08:06.320 --> 00:08:09.010
We'll put an annotation
into the video.

00:08:09.010 --> 00:08:11.210
CHRIS BROADFOOT: It's going
to be on Ankur's face.

00:08:11.210 --> 00:08:14.250
ANKUR KOTWAL: And we hope
you found this useful.

