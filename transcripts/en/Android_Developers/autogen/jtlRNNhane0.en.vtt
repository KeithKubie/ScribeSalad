WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.180 align:start position:0%
 
Oh<00:00:02.000><c> async</c><00:00:03.000><c> tasks</c><00:00:03.330><c> how</c><00:00:03.750><c> we</c><00:00:03.810><c> have</c><00:00:04.140><c> a</c><00:00:04.190><c> love/hate</c>

00:00:05.180 --> 00:00:05.190 align:start position:0%
Oh async tasks how we have a love/hate
 

00:00:05.190 --> 00:00:07.220 align:start position:0%
Oh async tasks how we have a love/hate
relationship<00:00:05.220><c> with</c><00:00:06.029><c> you</c><00:00:06.330><c> on</c><00:00:06.509><c> the</c><00:00:06.870><c> one</c><00:00:07.020><c> hand</c>

00:00:07.220 --> 00:00:07.230 align:start position:0%
relationship with you on the one hand
 

00:00:07.230 --> 00:00:08.870 align:start position:0%
relationship with you on the one hand
you<00:00:07.410><c> make</c><00:00:07.529><c> it</c><00:00:07.649><c> really</c><00:00:08.010><c> easy</c><00:00:08.220><c> to</c><00:00:08.340><c> get</c><00:00:08.519><c> work</c><00:00:08.730><c> off</c>

00:00:08.870 --> 00:00:08.880 align:start position:0%
you make it really easy to get work off
 

00:00:08.880 --> 00:00:10.490 align:start position:0%
you make it really easy to get work off
the<00:00:09.030><c> main</c><00:00:09.150><c> thread</c><00:00:09.179><c> but</c><00:00:09.990><c> on</c><00:00:10.170><c> the</c><00:00:10.290><c> other</c><00:00:10.410><c> hand</c>

00:00:10.490 --> 00:00:10.500 align:start position:0%
the main thread but on the other hand
 

00:00:10.500 --> 00:00:12.200 align:start position:0%
the main thread but on the other hand
you<00:00:10.830><c> make</c><00:00:10.950><c> it</c><00:00:11.040><c> really</c><00:00:11.190><c> easy</c><00:00:11.309><c> to</c><00:00:11.700><c> do</c><00:00:11.820><c> a</c><00:00:11.849><c> bunch</c><00:00:12.090><c> of</c>

00:00:12.200 --> 00:00:12.210 align:start position:0%
you make it really easy to do a bunch of
 

00:00:12.210 --> 00:00:14.720 align:start position:0%
you make it really easy to do a bunch of
really<00:00:12.450><c> bad</c><00:00:12.929><c> stuff</c><00:00:13.530><c> my</c><00:00:14.160><c> name</c><00:00:14.309><c> is</c><00:00:14.460><c> Colt</c><00:00:14.700><c> McAnlis</c>

00:00:14.720 --> 00:00:14.730 align:start position:0%
really bad stuff my name is Colt McAnlis
 

00:00:14.730 --> 00:00:16.670 align:start position:0%
really bad stuff my name is Colt McAnlis
and<00:00:15.179><c> while</c><00:00:15.330><c> async</c><00:00:15.719><c> task</c><00:00:15.960><c> provides</c><00:00:16.289><c> some</c><00:00:16.470><c> easy</c>

00:00:16.670 --> 00:00:16.680 align:start position:0%
and while async task provides some easy
 

00:00:16.680 --> 00:00:18.529 align:start position:0%
and while async task provides some easy
interfaces<00:00:17.310><c> if</c><00:00:17.520><c> you're</c><00:00:17.699><c> not</c><00:00:17.820><c> careful</c><00:00:18.090><c> it</c><00:00:18.359><c> can</c>

00:00:18.529 --> 00:00:18.539 align:start position:0%
interfaces if you're not careful it can
 

00:00:18.539 --> 00:00:20.510 align:start position:0%
interfaces if you're not careful it can
hurt<00:00:18.810><c> your</c><00:00:19.050><c> apps</c><00:00:19.230><c> performance</c><00:00:19.439><c> and</c><00:00:19.920><c> end</c><00:00:20.340><c> up</c>

00:00:20.510 --> 00:00:20.520 align:start position:0%
hurt your apps performance and end up
 

00:00:20.520 --> 00:00:22.580 align:start position:0%
hurt your apps performance and end up
causing<00:00:20.789><c> memory</c><00:00:21.210><c> leaks</c><00:00:21.600><c> so</c><00:00:22.260><c> here's</c><00:00:22.500><c> a</c>

00:00:22.580 --> 00:00:22.590 align:start position:0%
causing memory leaks so here's a
 

00:00:22.590 --> 00:00:24.590 align:start position:0%
causing memory leaks so here's a
familiar<00:00:22.920><c> situation</c><00:00:23.279><c> the</c><00:00:24.000><c> user</c><00:00:24.150><c> wipes</c><00:00:24.449><c> the</c>

00:00:24.590 --> 00:00:24.600 align:start position:0%
familiar situation the user wipes the
 

00:00:24.600 --> 00:00:26.480 align:start position:0%
familiar situation the user wipes the
screen<00:00:24.900><c> kicking</c><00:00:25.260><c> off</c><00:00:25.380><c> some</c><00:00:25.650><c> bitmap</c><00:00:25.980><c> decoding</c>

00:00:26.480 --> 00:00:26.490 align:start position:0%
screen kicking off some bitmap decoding
 

00:00:26.490 --> 00:00:28.550 align:start position:0%
screen kicking off some bitmap decoding
to<00:00:26.609><c> it</c><00:00:26.730><c> occur</c><00:00:27.029><c> and</c><00:00:27.300><c> because</c><00:00:28.080><c> that</c><00:00:28.260><c> work</c><00:00:28.439><c> is</c>

00:00:28.550 --> 00:00:28.560 align:start position:0%
to it occur and because that work is
 

00:00:28.560 --> 00:00:29.960 align:start position:0%
to it occur and because that work is
going<00:00:28.619><c> to</c><00:00:28.769><c> take</c><00:00:28.920><c> a</c><00:00:28.949><c> long</c><00:00:29.160><c> time</c><00:00:29.400><c> you</c><00:00:29.730><c> need</c><00:00:29.820><c> to</c>

00:00:29.960 --> 00:00:29.970 align:start position:0%
going to take a long time you need to
 

00:00:29.970 --> 00:00:31.370 align:start position:0%
going to take a long time you need to
hand<00:00:30.179><c> it</c><00:00:30.269><c> off</c><00:00:30.390><c> to</c><00:00:30.570><c> another</c><00:00:30.660><c> thread</c><00:00:31.080><c> so</c><00:00:31.349><c> you</c>

00:00:31.370 --> 00:00:31.380 align:start position:0%
hand it off to another thread so you
 

00:00:31.380 --> 00:00:33.229 align:start position:0%
hand it off to another thread so you
don't<00:00:31.590><c> cause</c><00:00:31.710><c> hitching</c><00:00:32.219><c> in</c><00:00:32.399><c> your</c><00:00:32.640><c> animations</c>

00:00:33.229 --> 00:00:33.239 align:start position:0%
don't cause hitching in your animations
 

00:00:33.239 --> 00:00:34.880 align:start position:0%
don't cause hitching in your animations
but<00:00:33.780><c> once</c><00:00:34.020><c> the</c><00:00:34.170><c> bitmaps</c><00:00:34.469><c> have</c><00:00:34.620><c> been</c><00:00:34.710><c> decoded</c>

00:00:34.880 --> 00:00:34.890 align:start position:0%
but once the bitmaps have been decoded
 

00:00:34.890 --> 00:00:36.440 align:start position:0%
but once the bitmaps have been decoded
you<00:00:35.190><c> need</c><00:00:35.309><c> to</c><00:00:35.370><c> get</c><00:00:35.460><c> them</c><00:00:35.610><c> back</c><00:00:35.940><c> to</c><00:00:36.210><c> the</c><00:00:36.300><c> UI</c>

00:00:36.440 --> 00:00:36.450 align:start position:0%
you need to get them back to the UI
 

00:00:36.450 --> 00:00:38.540 align:start position:0%
you need to get them back to the UI
thread<00:00:36.840><c> so</c><00:00:37.260><c> that</c><00:00:37.290><c> you</c><00:00:37.500><c> can</c><00:00:37.649><c> update</c><00:00:37.860><c> your</c><00:00:38.070><c> views</c>

00:00:38.540 --> 00:00:38.550 align:start position:0%
thread so that you can update your views
 

00:00:38.550 --> 00:00:40.130 align:start position:0%
thread so that you can update your views
if<00:00:38.760><c> this</c><00:00:39.450><c> happens</c><00:00:39.780><c> a</c><00:00:39.840><c> lot</c><00:00:39.960><c> in</c><00:00:40.079><c> your</c>

00:00:40.130 --> 00:00:40.140 align:start position:0%
if this happens a lot in your
 

00:00:40.140 --> 00:00:41.840 align:start position:0%
if this happens a lot in your
application<00:00:40.649><c> then</c><00:00:41.010><c> it's</c><00:00:41.129><c> not</c><00:00:41.280><c> worth</c><00:00:41.489><c> writing</c>

00:00:41.840 --> 00:00:41.850 align:start position:0%
application then it's not worth writing
 

00:00:41.850 --> 00:00:43.280 align:start position:0%
application then it's not worth writing
all<00:00:41.969><c> the</c><00:00:42.090><c> one-off</c><00:00:42.360><c> code</c><00:00:42.719><c> snippets</c><00:00:43.079><c> to</c><00:00:43.170><c> make</c>

00:00:43.280 --> 00:00:43.290 align:start position:0%
all the one-off code snippets to make
 

00:00:43.290 --> 00:00:45.020 align:start position:0%
all the one-off code snippets to make
this<00:00:43.410><c> happen</c><00:00:43.649><c> the</c><00:00:43.800><c> right</c><00:00:43.920><c> way</c><00:00:43.980><c> this</c><00:00:44.789><c> is</c>

00:00:45.020 --> 00:00:45.030 align:start position:0%
this happen the right way this is
 

00:00:45.030 --> 00:00:47.240 align:start position:0%
this happen the right way this is
exactly<00:00:45.600><c> why</c><00:00:45.870><c> async</c><00:00:46.320><c> task</c><00:00:46.500><c> was</c><00:00:46.710><c> created</c><00:00:46.860><c> it</c>

00:00:47.240 --> 00:00:47.250 align:start position:0%
exactly why async task was created it
 

00:00:47.250 --> 00:00:49.190 align:start position:0%
exactly why async task was created it
wraps<00:00:47.610><c> up</c><00:00:47.789><c> all</c><00:00:47.969><c> of</c><00:00:48.149><c> this</c><00:00:48.300><c> gnarliness</c><00:00:48.930><c> with</c>

00:00:49.190 --> 00:00:49.200 align:start position:0%
wraps up all of this gnarliness with
 

00:00:49.200 --> 00:00:51.799 align:start position:0%
wraps up all of this gnarliness with
three<00:00:49.710><c> simple</c><00:00:50.129><c> function</c><00:00:50.700><c> calls</c><00:00:50.940><c> basically</c>

00:00:51.799 --> 00:00:51.809 align:start position:0%
three simple function calls basically
 

00:00:51.809 --> 00:00:53.869 align:start position:0%
three simple function calls basically
the<00:00:52.020><c> on</c><00:00:52.170><c> pre</c><00:00:52.649><c> execute</c><00:00:53.070><c> function</c><00:00:53.250><c> will</c><00:00:53.579><c> happen</c>

00:00:53.869 --> 00:00:53.879 align:start position:0%
the on pre execute function will happen
 

00:00:53.879 --> 00:00:55.549 align:start position:0%
the on pre execute function will happen
on<00:00:54.059><c> the</c><00:00:54.210><c> main</c><00:00:54.360><c> thread</c><00:00:54.510><c> and</c><00:00:54.809><c> allow</c><00:00:55.140><c> you</c><00:00:55.199><c> to</c><00:00:55.379><c> set</c>

00:00:55.549 --> 00:00:55.559 align:start position:0%
on the main thread and allow you to set
 

00:00:55.559 --> 00:00:57.619 align:start position:0%
on the main thread and allow you to set
up<00:00:55.590><c> the</c><00:00:55.710><c> work</c><00:00:55.890><c> you're</c><00:00:56.070><c> about</c><00:00:56.280><c> to</c><00:00:56.489><c> do</c><00:00:56.699><c> then</c><00:00:57.239><c> the</c>

00:00:57.619 --> 00:00:57.629 align:start position:0%
up the work you're about to do then the
 

00:00:57.629 --> 00:00:59.119 align:start position:0%
up the work you're about to do then the
do<00:00:57.840><c> in</c><00:00:58.050><c> background</c><00:00:58.590><c> function</c><00:00:58.980><c> will</c><00:00:59.070><c> execute</c>

00:00:59.119 --> 00:00:59.129 align:start position:0%
do in background function will execute
 

00:00:59.129 --> 00:01:01.700 align:start position:0%
do in background function will execute
on<00:00:59.579><c> a</c><00:00:59.609><c> worker</c><00:01:00.000><c> thread</c><00:01:00.359><c> actually</c><00:01:00.570><c> doing</c><00:01:01.410><c> the</c>

00:01:01.700 --> 00:01:01.710 align:start position:0%
on a worker thread actually doing the
 

00:01:01.710 --> 00:01:04.130 align:start position:0%
on a worker thread actually doing the
computation<00:01:02.070><c> and</c><00:01:02.460><c> finally</c><00:01:03.120><c> on</c><00:01:03.300><c> post</c><00:01:03.840><c> execute</c>

00:01:04.130 --> 00:01:04.140 align:start position:0%
computation and finally on post execute
 

00:01:04.140 --> 00:01:06.050 align:start position:0%
computation and finally on post execute
is<00:01:04.439><c> called</c><00:01:04.680><c> on</c><00:01:04.949><c> the</c><00:01:05.159><c> main</c><00:01:05.309><c> thread</c><00:01:05.460><c> along</c><00:01:05.760><c> with</c>

00:01:06.050 --> 00:01:06.060 align:start position:0%
is called on the main thread along with
 

00:01:06.060 --> 00:01:07.310 align:start position:0%
is called on the main thread along with
the<00:01:06.150><c> results</c><00:01:06.270><c> of</c><00:01:06.570><c> the</c><00:01:06.659><c> work</c><00:01:06.810><c> that</c><00:01:06.869><c> you've</c><00:01:07.110><c> just</c>

00:01:07.310 --> 00:01:07.320 align:start position:0%
the results of the work that you've just
 

00:01:07.320 --> 00:01:09.289 align:start position:0%
the results of the work that you've just
completed<00:01:07.799><c> simply</c><00:01:08.340><c> overload</c><00:01:08.820><c> these</c><00:01:09.000><c> three</c>

00:01:09.289 --> 00:01:09.299 align:start position:0%
completed simply overload these three
 

00:01:09.299 --> 00:01:11.030 align:start position:0%
completed simply overload these three
functions<00:01:09.479><c> in</c><00:01:09.810><c> your</c><00:01:09.840><c> own</c><00:01:09.990><c> class</c><00:01:10.200><c> and</c><00:01:10.439><c> async</c>

00:01:11.030 --> 00:01:11.040 align:start position:0%
functions in your own class and async
 

00:01:11.040 --> 00:01:12.289 align:start position:0%
functions in your own class and async
task<00:01:11.250><c> will</c><00:01:11.490><c> do</c><00:01:11.729><c> the</c><00:01:12.000><c> rest</c>

00:01:12.289 --> 00:01:12.299 align:start position:0%
task will do the rest
 

00:01:12.299 --> 00:01:14.300 align:start position:0%
task will do the rest
now<00:01:12.689><c> while</c><00:01:12.990><c> this</c><00:01:13.200><c> seems</c><00:01:13.470><c> like</c><00:01:13.650><c> an</c><00:01:13.890><c> ideal</c>

00:01:14.300 --> 00:01:14.310 align:start position:0%
now while this seems like an ideal
 

00:01:14.310 --> 00:01:16.640 align:start position:0%
now while this seems like an ideal
solution<00:01:14.549><c> you</c><00:01:15.390><c> need</c><00:01:15.540><c> to</c><00:01:15.600><c> be</c><00:01:15.720><c> cautious</c><00:01:15.960><c> there's</c>

00:01:16.640 --> 00:01:16.650 align:start position:0%
solution you need to be cautious there's
 

00:01:16.650 --> 00:01:18.830 align:start position:0%
solution you need to be cautious there's
some<00:01:16.860><c> nuances</c><00:01:17.729><c> with</c><00:01:17.909><c> async</c><00:01:18.240><c> tasks</c><00:01:18.600><c> that</c><00:01:18.720><c> can</c>

00:01:18.830 --> 00:01:18.840 align:start position:0%
some nuances with async tasks that can
 

00:01:18.840 --> 00:01:21.380 align:start position:0%
some nuances with async tasks that can
get<00:01:19.020><c> you</c><00:01:19.170><c> into</c><00:01:19.320><c> trouble</c><00:01:19.460><c> firstly</c><00:01:20.460><c> all</c><00:01:20.610><c> async</c>

00:01:21.380 --> 00:01:21.390 align:start position:0%
get you into trouble firstly all async
 

00:01:21.390 --> 00:01:23.060 align:start position:0%
get you into trouble firstly all async
tasks<00:01:21.720><c> that</c><00:01:21.840><c> are</c><00:01:21.960><c> created</c><00:01:22.470><c> will</c><00:01:22.650><c> share</c><00:01:22.920><c> the</c>

00:01:23.060 --> 00:01:23.070 align:start position:0%
tasks that are created will share the
 

00:01:23.070 --> 00:01:25.550 align:start position:0%
tasks that are created will share the
same<00:01:23.369><c> thread</c><00:01:24.000><c> and</c><00:01:24.299><c> thus</c><00:01:24.659><c> will</c><00:01:24.810><c> execute</c><00:01:25.080><c> in</c><00:01:25.350><c> a</c>

00:01:25.550 --> 00:01:25.560 align:start position:0%
same thread and thus will execute in a
 

00:01:25.560 --> 00:01:27.980 align:start position:0%
same thread and thus will execute in a
serial<00:01:26.070><c> fashion</c><00:01:26.100><c> from</c><00:01:26.640><c> a</c><00:01:26.759><c> single</c><00:01:27.330><c> message</c>

00:01:27.980 --> 00:01:27.990 align:start position:0%
serial fashion from a single message
 

00:01:27.990 --> 00:01:30.170 align:start position:0%
serial fashion from a single message
queue<00:01:28.320><c> so</c><00:01:28.799><c> if</c><00:01:28.890><c> you</c><00:01:28.979><c> kick</c><00:01:29.189><c> off</c><00:01:29.310><c> 20</c><00:01:29.640><c> work</c><00:01:29.820><c> orders</c>

00:01:30.170 --> 00:01:30.180 align:start position:0%
queue so if you kick off 20 work orders
 

00:01:30.180 --> 00:01:31.819 align:start position:0%
queue so if you kick off 20 work orders
and<00:01:30.329><c> the</c><00:01:30.390><c> third</c><00:01:30.630><c> one</c><00:01:30.780><c> takes</c><00:01:31.020><c> an</c><00:01:31.140><c> hour</c><00:01:31.290><c> the</c>

00:01:31.819 --> 00:01:31.829 align:start position:0%
and the third one takes an hour the
 

00:01:31.829 --> 00:01:33.859 align:start position:0%
and the third one takes an hour the
other<00:01:31.860><c> 17</c><00:01:32.490><c> will</c><00:01:32.640><c> block</c><00:01:32.970><c> and</c><00:01:33.270><c> wait</c><00:01:33.420><c> until</c><00:01:33.720><c> it's</c>

00:01:33.859 --> 00:01:33.869 align:start position:0%
other 17 will block and wait until it's
 

00:01:33.869 --> 00:01:36.230 align:start position:0%
other 17 will block and wait until it's
done<00:01:34.110><c> this</c><00:01:34.650><c> is</c><00:01:34.799><c> especially</c><00:01:35.189><c> dangerous</c><00:01:35.790><c> if</c><00:01:36.150><c> you</c>

00:01:36.230 --> 00:01:36.240 align:start position:0%
done this is especially dangerous if you
 

00:01:36.240 --> 00:01:38.090 align:start position:0%
done this is especially dangerous if you
kick<00:01:36.540><c> off</c><00:01:36.689><c> some</c><00:01:36.930><c> work</c><00:01:37.079><c> that's</c><00:01:37.439><c> got</c><00:01:37.650><c> a</c><00:01:37.680><c> long</c>

00:01:38.090 --> 00:01:38.100 align:start position:0%
kick off some work that's got a long
 

00:01:38.100 --> 00:01:40.429 align:start position:0%
kick off some work that's got a long
running<00:01:38.759><c> while</c><00:01:39.180><c> loop</c><00:01:39.420><c> in</c><00:01:39.570><c> it</c><00:01:39.600><c> basically</c><00:01:40.259><c> it'll</c>

00:01:40.429 --> 00:01:40.439 align:start position:0%
running while loop in it basically it'll
 

00:01:40.439 --> 00:01:42.530 align:start position:0%
running while loop in it basically it'll
just<00:01:40.680><c> freeze</c><00:01:41.189><c> that</c><00:01:41.430><c> thread</c><00:01:41.759><c> from</c><00:01:41.939><c> doing</c><00:01:42.360><c> any</c>

00:01:42.530 --> 00:01:42.540 align:start position:0%
just freeze that thread from doing any
 

00:01:42.540 --> 00:01:44.870 align:start position:0%
just freeze that thread from doing any
future<00:01:42.899><c> work</c><00:01:43.259><c> now</c><00:01:43.920><c> to</c><00:01:43.979><c> be</c><00:01:44.159><c> fair</c><00:01:44.340><c> there</c><00:01:44.700><c> is</c><00:01:44.729><c> a</c>

00:01:44.870 --> 00:01:44.880 align:start position:0%
future work now to be fair there is a
 

00:01:44.880 --> 00:01:46.670 align:start position:0%
future work now to be fair there is a
way<00:01:45.119><c> to</c><00:01:45.180><c> force</c><00:01:45.479><c> async</c><00:01:45.899><c> tasks</c><00:01:46.110><c> to</c><00:01:46.259><c> execute</c><00:01:46.619><c> in</c>

00:01:46.670 --> 00:01:46.680 align:start position:0%
way to force async tasks to execute in
 

00:01:46.680 --> 00:01:48.830 align:start position:0%
way to force async tasks to execute in
the<00:01:46.740><c> thread</c><00:01:46.920><c> pooled</c><00:01:47.100><c> fashion</c><00:01:47.549><c> but</c><00:01:48.060><c> in</c><00:01:48.240><c> reality</c>

00:01:48.830 --> 00:01:48.840 align:start position:0%
the thread pooled fashion but in reality
 

00:01:48.840 --> 00:01:50.420 align:start position:0%
the thread pooled fashion but in reality
if<00:01:48.990><c> you're</c><00:01:49.140><c> venturing</c><00:01:49.619><c> into</c><00:01:49.799><c> that</c><00:01:49.950><c> area</c><00:01:50.280><c> you</c>

00:01:50.420 --> 00:01:50.430 align:start position:0%
if you're venturing into that area you
 

00:01:50.430 --> 00:01:51.770 align:start position:0%
if you're venturing into that area you
might<00:01:50.520><c> just</c><00:01:50.759><c> want</c><00:01:50.939><c> to</c><00:01:50.970><c> use</c><00:01:51.090><c> the</c><00:01:51.270><c> thread</c><00:01:51.630><c> pool</c>

00:01:51.770 --> 00:01:51.780 align:start position:0%
might just want to use the thread pool
 

00:01:51.780 --> 00:01:53.630 align:start position:0%
might just want to use the thread pool
primitive<00:01:52.200><c> directly</c><00:01:52.530><c> instead</c><00:01:52.710><c> of</c><00:01:52.829><c> all</c><00:01:53.040><c> that</c>

00:01:53.630 --> 00:01:53.640 align:start position:0%
primitive directly instead of all that
 

00:01:53.640 --> 00:01:56.480 align:start position:0%
primitive directly instead of all that
madness<00:01:54.470><c> anyhow</c><00:01:55.470><c> the</c><00:01:55.829><c> second</c><00:01:56.189><c> big</c><00:01:56.280><c> problem</c>

00:01:56.480 --> 00:01:56.490 align:start position:0%
madness anyhow the second big problem
 

00:01:56.490 --> 00:01:58.580 align:start position:0%
madness anyhow the second big problem
might<00:01:56.850><c> be</c><00:01:57.000><c> a</c><00:01:57.030><c> little</c><00:01:57.360><c> bit</c><00:01:57.450><c> more</c><00:01:57.630><c> familiar</c><00:01:57.810><c> how</c>

00:01:58.580 --> 00:01:58.590 align:start position:0%
might be a little bit more familiar how
 

00:01:58.590 --> 00:02:00.560 align:start position:0%
might be a little bit more familiar how
do<00:01:58.649><c> you</c><00:01:58.740><c> actually</c><00:01:58.890><c> cancel</c><00:01:59.579><c> a</c><00:01:59.759><c> block</c><00:02:00.119><c> of</c><00:02:00.299><c> work</c><00:02:00.450><c> I</c>

00:02:00.560 --> 00:02:00.570 align:start position:0%
do you actually cancel a block of work I
 

00:02:00.570 --> 00:02:02.749 align:start position:0%
do you actually cancel a block of work I
mean<00:02:00.719><c> async</c><00:02:01.320><c> task</c><00:02:01.500><c> has</c><00:02:01.710><c> this</c><00:02:01.860><c> handy</c><00:02:02.070><c> cancel</c>

00:02:02.749 --> 00:02:02.759 align:start position:0%
mean async task has this handy cancel
 

00:02:02.759 --> 00:02:05.569 align:start position:0%
mean async task has this handy cancel
function<00:02:03.360><c> but</c><00:02:03.840><c> does</c><00:02:03.990><c> that</c><00:02:04.110><c> really</c><00:02:04.439><c> do</c><00:02:04.979><c> well</c>

00:02:05.569 --> 00:02:05.579 align:start position:0%
function but does that really do well
 

00:02:05.579 --> 00:02:07.069 align:start position:0%
function but does that really do well
remember<00:02:06.000><c> that</c><00:02:06.149><c> threads</c><00:02:06.420><c> don't</c><00:02:06.659><c> directly</c>

00:02:07.069 --> 00:02:07.079 align:start position:0%
remember that threads don't directly
 

00:02:07.079 --> 00:02:08.630 align:start position:0%
remember that threads don't directly
contain<00:02:07.469><c> the</c><00:02:07.619><c> ability</c><00:02:07.920><c> to</c><00:02:07.950><c> interrupt</c><00:02:08.489><c> the</c>

00:02:08.630 --> 00:02:08.640 align:start position:0%
contain the ability to interrupt the
 

00:02:08.640 --> 00:02:11.390 align:start position:0%
contain the ability to interrupt the
current<00:02:08.849><c> code</c><00:02:09.239><c> being</c><00:02:09.869><c> executed</c><00:02:10.440><c> if</c><00:02:10.890><c> you</c><00:02:11.129><c> want</c>

00:02:11.390 --> 00:02:11.400 align:start position:0%
current code being executed if you want
 

00:02:11.400 --> 00:02:13.160 align:start position:0%
current code being executed if you want
a<00:02:11.489><c> threaded</c><00:02:11.879><c> block</c><00:02:12.060><c> of</c><00:02:12.239><c> work</c><00:02:12.390><c> to</c><00:02:12.750><c> be</c><00:02:12.870><c> able</c><00:02:13.080><c> to</c>

00:02:13.160 --> 00:02:13.170 align:start position:0%
a threaded block of work to be able to
 

00:02:13.170 --> 00:02:14.250 align:start position:0%
a threaded block of work to be able to
terminate<00:02:13.709><c> early</c>

00:02:14.250 --> 00:02:14.260 align:start position:0%
terminate early
 

00:02:14.260 --> 00:02:16.680 align:start position:0%
terminate early
you<00:02:14.680><c> have</c><00:02:14.830><c> to</c><00:02:14.980><c> do</c><00:02:15.129><c> two</c><00:02:15.459><c> things</c><00:02:15.819><c> number</c><00:02:16.239><c> one</c><00:02:16.480><c> add</c>

00:02:16.680 --> 00:02:16.690 align:start position:0%
you have to do two things number one add
 

00:02:16.690 --> 00:02:18.690 align:start position:0%
you have to do two things number one add
some<00:02:17.260><c> logic</c><00:02:17.440><c> to</c><00:02:17.709><c> check</c><00:02:17.920><c> for</c><00:02:18.129><c> a</c><00:02:18.159><c> flag</c><00:02:18.430><c> that</c><00:02:18.640><c> says</c>

00:02:18.690 --> 00:02:18.700 align:start position:0%
some logic to check for a flag that says
 

00:02:18.700 --> 00:02:20.880 align:start position:0%
some logic to check for a flag that says
the<00:02:19.239><c> work</c><00:02:19.420><c> has</c><00:02:19.599><c> been</c><00:02:19.750><c> canceled</c><00:02:20.260><c> and</c><00:02:20.409><c> number</c>

00:02:20.880 --> 00:02:20.890 align:start position:0%
the work has been canceled and number
 

00:02:20.890 --> 00:02:23.039 align:start position:0%
the work has been canceled and number
two<00:02:21.099><c> once</c><00:02:22.000><c> the</c><00:02:22.209><c> block</c><00:02:22.420><c> of</c><00:02:22.569><c> work</c><00:02:22.690><c> is</c><00:02:22.840><c> finished</c>

00:02:23.039 --> 00:02:23.049 align:start position:0%
two once the block of work is finished
 

00:02:23.049 --> 00:02:24.720 align:start position:0%
two once the block of work is finished
let<00:02:23.379><c> the</c><00:02:23.500><c> other</c><00:02:23.709><c> functions</c><00:02:24.250><c> know</c><00:02:24.430><c> that</c><00:02:24.610><c> this</c>

00:02:24.720 --> 00:02:24.730 align:start position:0%
let the other functions know that this
 

00:02:24.730 --> 00:02:26.910 align:start position:0%
let the other functions know that this
packets<00:02:25.120><c> results</c><00:02:25.510><c> are</c><00:02:25.659><c> invalid</c><00:02:26.290><c> and</c><00:02:26.349><c> this</c><00:02:26.769><c> is</c>

00:02:26.910 --> 00:02:26.920 align:start position:0%
packets results are invalid and this is
 

00:02:26.920 --> 00:02:28.949 align:start position:0%
packets results are invalid and this is
exactly<00:02:27.519><c> what</c><00:02:27.940><c> the</c><00:02:28.030><c> cancel</c><00:02:28.390><c> function</c><00:02:28.690><c> in</c><00:02:28.810><c> a</c>

00:02:28.949 --> 00:02:28.959 align:start position:0%
exactly what the cancel function in a
 

00:02:28.959 --> 00:02:31.050 align:start position:0%
exactly what the cancel function in a
sync<00:02:29.230><c> task</c><00:02:29.409><c> does</c><00:02:29.739><c> it</c><00:02:30.010><c> will</c><00:02:30.400><c> set</c><00:02:30.580><c> a</c><00:02:30.610><c> flag</c><00:02:30.879><c> and</c>

00:02:31.050 --> 00:02:31.060 align:start position:0%
sync task does it will set a flag and
 

00:02:31.060 --> 00:02:33.210 align:start position:0%
sync task does it will set a flag and
allow<00:02:31.180><c> the</c><00:02:31.239><c> is</c><00:02:31.540><c> canceled</c><00:02:32.379><c> function</c><00:02:32.830><c> to</c><00:02:32.950><c> return</c>

00:02:33.210 --> 00:02:33.220 align:start position:0%
allow the is canceled function to return
 

00:02:33.220 --> 00:02:35.100 align:start position:0%
allow the is canceled function to return
true<00:02:33.489><c> so</c><00:02:34.060><c> your</c><00:02:34.209><c> code</c><00:02:34.480><c> can</c><00:02:34.690><c> check</c><00:02:34.930><c> that</c>

00:02:35.100 --> 00:02:35.110 align:start position:0%
true so your code can check that
 

00:02:35.110 --> 00:02:37.380 align:start position:0%
true so your code can check that
regularly<00:02:35.799><c> to</c><00:02:36.129><c> see</c><00:02:36.310><c> if</c><00:02:36.400><c> it</c><00:02:36.519><c> should</c><00:02:36.670><c> exit</c><00:02:37.030><c> early</c>

00:02:37.380 --> 00:02:37.390 align:start position:0%
regularly to see if it should exit early
 

00:02:37.390 --> 00:02:39.479 align:start position:0%
regularly to see if it should exit early
in<00:02:37.690><c> addition</c><00:02:38.290><c> after</c><00:02:38.440><c> do</c><00:02:39.129><c> and</c><00:02:39.310><c> background</c>

00:02:39.479 --> 00:02:39.489 align:start position:0%
in addition after do and background
 

00:02:39.489 --> 00:02:42.630 align:start position:0%
in addition after do and background
returns<00:02:40.060><c> a</c><00:02:40.299><c> canceled</c><00:02:41.170><c> async</c><00:02:41.650><c> task</c><00:02:41.920><c> will</c><00:02:42.430><c> call</c>

00:02:42.630 --> 00:02:42.640 align:start position:0%
returns a canceled async task will call
 

00:02:42.640 --> 00:02:45.690 align:start position:0%
returns a canceled async task will call
on<00:02:42.879><c> canceled</c><00:02:43.659><c> on</c><00:02:43.810><c> the</c><00:02:43.900><c> UI</c><00:02:44.049><c> thread</c><00:02:44.319><c> instead</c><00:02:45.280><c> of</c>

00:02:45.690 --> 00:02:45.700 align:start position:0%
on canceled on the UI thread instead of
 

00:02:45.700 --> 00:02:48.000 align:start position:0%
on canceled on the UI thread instead of
on<00:02:45.909><c> post</c><00:02:46.299><c> execute</c><00:02:46.780><c> this</c><00:02:47.470><c> is</c><00:02:47.650><c> so</c><00:02:47.769><c> you</c><00:02:47.829><c> can</c>

00:02:48.000 --> 00:02:48.010 align:start position:0%
on post execute this is so you can
 

00:02:48.010 --> 00:02:49.680 align:start position:0%
on post execute this is so you can
properly<00:02:48.250><c> update</c><00:02:48.640><c> your</c><00:02:48.760><c> UI</c><00:02:48.910><c> or</c><00:02:49.329><c> destroy</c>

00:02:49.680 --> 00:02:49.690 align:start position:0%
properly update your UI or destroy
 

00:02:49.690 --> 00:02:51.569 align:start position:0%
properly update your UI or destroy
specific<00:02:50.379><c> memory</c><00:02:50.650><c> allocations</c><00:02:51.280><c> that</c><00:02:51.489><c> you</c>

00:02:51.569 --> 00:02:51.579 align:start position:0%
specific memory allocations that you
 

00:02:51.579 --> 00:02:52.319 align:start position:0%
specific memory allocations that you
might<00:02:51.700><c> not</c><00:02:51.819><c> need</c><00:02:51.940><c> anymore</c>

00:02:52.319 --> 00:02:52.329 align:start position:0%
might not need anymore
 

00:02:52.329 --> 00:02:54.869 align:start position:0%
might not need anymore
yada-yada-yada<00:02:53.019><c> and</c><00:02:53.769><c> finally</c><00:02:54.129><c> be</c><00:02:54.549><c> aware</c><00:02:54.670><c> that</c>

00:02:54.869 --> 00:02:54.879 align:start position:0%
yada-yada-yada and finally be aware that
 

00:02:54.879 --> 00:02:57.839 align:start position:0%
yada-yada-yada and finally be aware that
it's<00:02:55.180><c> really</c><00:02:55.720><c> really</c><00:02:56.680><c> easy</c><00:02:56.890><c> to</c><00:02:57.280><c> leak</c><00:02:57.640><c> memory</c>

00:02:57.839 --> 00:02:57.849 align:start position:0%
it's really really easy to leak memory
 

00:02:57.849 --> 00:02:59.309 align:start position:0%
it's really really easy to leak memory
with<00:02:58.209><c> async</c><00:02:58.720><c> tasks</c>

00:02:59.309 --> 00:02:59.319 align:start position:0%
with async tasks
 

00:02:59.319 --> 00:03:01.380 align:start position:0%
with async tasks
check<00:02:59.769><c> out</c><00:02:59.890><c> this</c><00:03:00.010><c> very</c><00:03:00.220><c> common</c><00:03:00.640><c> seeing</c><00:03:01.120><c> all</c>

00:03:01.380 --> 00:03:01.390 align:start position:0%
check out this very common seeing all
 

00:03:01.390 --> 00:03:03.449 align:start position:0%
check out this very common seeing all
the<00:03:01.720><c> time</c><00:03:01.959><c> code</c><00:03:02.349><c> pattern</c><00:03:02.769><c> in</c><00:03:02.890><c> Android</c><00:03:03.280><c> apps</c>

00:03:03.449 --> 00:03:03.459 align:start position:0%
the time code pattern in Android apps
 

00:03:03.459 --> 00:03:05.789 align:start position:0%
the time code pattern in Android apps
where<00:03:03.879><c> an</c><00:03:03.970><c> async</c><00:03:04.450><c> task</c><00:03:04.750><c> is</c><00:03:05.019><c> declared</c><00:03:05.470><c> as</c><00:03:05.650><c> an</c>

00:03:05.789 --> 00:03:05.799 align:start position:0%
where an async task is declared as an
 

00:03:05.799 --> 00:03:08.699 align:start position:0%
where an async task is declared as an
inner<00:03:06.099><c> class</c><00:03:06.370><c> of</c><00:03:06.760><c> some</c><00:03:07.120><c> activity</c><00:03:07.750><c> this</c><00:03:08.500><c> is</c><00:03:08.560><c> a</c>

00:03:08.699 --> 00:03:08.709 align:start position:0%
inner class of some activity this is a
 

00:03:08.709 --> 00:03:11.339 align:start position:0%
inner class of some activity this is a
really<00:03:09.220><c> big</c><00:03:09.430><c> problem</c><00:03:09.760><c> having</c><00:03:10.540><c> async</c><00:03:11.109><c> tasks</c>

00:03:11.339 --> 00:03:11.349 align:start position:0%
really big problem having async tasks
 

00:03:11.349 --> 00:03:13.259 align:start position:0%
really big problem having async tasks
declared<00:03:11.709><c> is</c><00:03:11.799><c> an</c><00:03:11.890><c> inner</c><00:03:12.129><c> class</c><00:03:12.400><c> creates</c><00:03:13.150><c> an</c>

00:03:13.259 --> 00:03:13.269 align:start position:0%
declared is an inner class creates an
 

00:03:13.269 --> 00:03:16.110 align:start position:0%
declared is an inner class creates an
implicit<00:03:13.840><c> reference</c><00:03:14.349><c> to</c><00:03:15.099><c> the</c><00:03:15.220><c> outer</c><00:03:15.400><c> activity</c>

00:03:16.110 --> 00:03:16.120 align:start position:0%
implicit reference to the outer activity
 

00:03:16.120 --> 00:03:17.910 align:start position:0%
implicit reference to the outer activity
which<00:03:16.269><c> can</c><00:03:16.450><c> then</c><00:03:16.599><c> result</c><00:03:16.989><c> in</c><00:03:17.049><c> lete</c><00:03:17.410><c> memory</c>

00:03:17.910 --> 00:03:17.920 align:start position:0%
which can then result in lete memory
 

00:03:17.920 --> 00:03:20.099 align:start position:0%
which can then result in lete memory
which<00:03:18.400><c> means</c><00:03:18.819><c> it</c><00:03:19.030><c> won't</c><00:03:19.120><c> be</c><00:03:19.329><c> destroyed</c><00:03:19.750><c> until</c>

00:03:20.099 --> 00:03:20.109 align:start position:0%
which means it won't be destroyed until
 

00:03:20.109 --> 00:03:22.650 align:start position:0%
which means it won't be destroyed until
the<00:03:20.230><c> async</c><00:03:20.590><c> task</c><00:03:20.799><c> work</c><00:03:21.069><c> completes</c><00:03:21.660><c> obviously</c>

00:03:22.650 --> 00:03:22.660 align:start position:0%
the async task work completes obviously
 

00:03:22.660 --> 00:03:24.180 align:start position:0%
the async task work completes obviously
this<00:03:22.870><c> is</c><00:03:23.019><c> less</c><00:03:23.200><c> than</c><00:03:23.230><c> ideal</c><00:03:23.470><c> if</c><00:03:23.859><c> you're</c><00:03:23.980><c> trying</c>

00:03:24.180 --> 00:03:24.190 align:start position:0%
this is less than ideal if you're trying
 

00:03:24.190 --> 00:03:26.039 align:start position:0%
this is less than ideal if you're trying
to<00:03:24.250><c> load</c><00:03:24.400><c> a</c><00:03:24.430><c> new</c><00:03:24.730><c> activity</c><00:03:25.120><c> and</c><00:03:25.510><c> you</c><00:03:25.870><c> still</c>

00:03:26.039 --> 00:03:26.049 align:start position:0%
to load a new activity and you still
 

00:03:26.049 --> 00:03:27.809 align:start position:0%
to load a new activity and you still
have<00:03:26.200><c> several</c><00:03:26.560><c> destroyed</c><00:03:27.130><c> activities</c><00:03:27.669><c> in</c>

00:03:27.809 --> 00:03:27.819 align:start position:0%
have several destroyed activities in
 

00:03:27.819 --> 00:03:29.640 align:start position:0%
have several destroyed activities in
memory<00:03:28.120><c> since</c><00:03:28.389><c> their</c><00:03:28.599><c> work</c><00:03:28.870><c> hasn't</c><00:03:29.530><c> been</c>

00:03:29.640 --> 00:03:29.650 align:start position:0%
memory since their work hasn't been
 

00:03:29.650 --> 00:03:32.220 align:start position:0%
memory since their work hasn't been
completed<00:03:30.160><c> the</c><00:03:30.639><c> gist</c><00:03:30.970><c> here</c><00:03:31.359><c> is</c><00:03:31.780><c> that</c><00:03:32.019><c> while</c>

00:03:32.220 --> 00:03:32.230 align:start position:0%
completed the gist here is that while
 

00:03:32.230 --> 00:03:34.620 align:start position:0%
completed the gist here is that while
async<00:03:32.680><c> task</c><00:03:32.889><c> makes</c><00:03:33.130><c> it</c><00:03:33.310><c> really</c><00:03:33.760><c> easy</c><00:03:33.910><c> to</c><00:03:34.480><c> move</c>

00:03:34.620 --> 00:03:34.630 align:start position:0%
async task makes it really easy to move
 

00:03:34.630 --> 00:03:36.900 align:start position:0%
async task makes it really easy to move
work<00:03:34.870><c> off</c><00:03:35.049><c> the</c><00:03:35.380><c> UI</c><00:03:35.560><c> thread</c><00:03:35.859><c> it's</c><00:03:36.519><c> far</c><00:03:36.790><c> from</c>

00:03:36.900 --> 00:03:36.910 align:start position:0%
work off the UI thread it's far from
 

00:03:36.910 --> 00:03:38.430 align:start position:0%
work off the UI thread it's far from
being<00:03:37.000><c> a</c><00:03:37.209><c> silver</c><00:03:37.510><c> bullet</c><00:03:37.750><c> so</c><00:03:37.989><c> don't</c><00:03:38.200><c> be</c><00:03:38.290><c> afraid</c>

00:03:38.430 --> 00:03:38.440 align:start position:0%
being a silver bullet so don't be afraid
 

00:03:38.440 --> 00:03:40.020 align:start position:0%
being a silver bullet so don't be afraid
to<00:03:38.560><c> check</c><00:03:38.769><c> out</c><00:03:38.889><c> some</c><00:03:39.040><c> of</c><00:03:39.069><c> the</c><00:03:39.160><c> other</c><00:03:39.370><c> threading</c>

00:03:40.020 --> 00:03:40.030 align:start position:0%
to check out some of the other threading
 

00:03:40.030 --> 00:03:41.909 align:start position:0%
to check out some of the other threading
primitives<00:03:40.419><c> in</c><00:03:40.510><c> Android</c><00:03:40.840><c> in</c><00:03:41.019><c> case</c><00:03:41.380><c> you</c><00:03:41.560><c> need</c><00:03:41.709><c> a</c>

00:03:41.909 --> 00:03:41.919 align:start position:0%
primitives in Android in case you need a
 

00:03:41.919 --> 00:03:44.129 align:start position:0%
primitives in Android in case you need a
little<00:03:42.250><c> different</c><00:03:42.700><c> use</c><00:03:43.209><c> case</c><00:03:43.480><c> for</c><00:03:43.690><c> example</c>

00:03:44.129 --> 00:03:44.139 align:start position:0%
little different use case for example
 

00:03:44.139 --> 00:03:46.440 align:start position:0%
little different use case for example
handler<00:03:45.010><c> threads</c><00:03:45.340><c> are</c><00:03:45.549><c> great</c><00:03:45.849><c> when</c><00:03:46.209><c> you</c><00:03:46.299><c> need</c>

00:03:46.440 --> 00:03:46.450 align:start position:0%
handler threads are great when you need
 

00:03:46.450 --> 00:03:48.479 align:start position:0%
handler threads are great when you need
a<00:03:46.480><c> dedicated</c><00:03:46.810><c> thread</c><00:03:47.500><c> for</c><00:03:47.709><c> callbacks</c><00:03:47.919><c> to</c><00:03:48.310><c> land</c>

00:03:48.479 --> 00:03:48.489 align:start position:0%
a dedicated thread for callbacks to land
 

00:03:48.489 --> 00:03:50.520 align:start position:0%
a dedicated thread for callbacks to land
on<00:03:48.639><c> thread</c><00:03:49.209><c> pools</c><00:03:49.480><c> work</c><00:03:50.019><c> best</c><00:03:50.230><c> when</c><00:03:50.410><c> you've</c>

00:03:50.520 --> 00:03:50.530 align:start position:0%
on thread pools work best when you've
 

00:03:50.530 --> 00:03:53.009 align:start position:0%
on thread pools work best when you've
got<00:03:50.680><c> a</c><00:03:50.829><c> mountain</c><00:03:51.430><c> of</c><00:03:51.609><c> small</c><00:03:52.150><c> work</c><00:03:52.419><c> objects</c><00:03:52.930><c> to</c>

00:03:53.009 --> 00:03:53.019 align:start position:0%
got a mountain of small work objects to
 

00:03:53.019 --> 00:03:55.080 align:start position:0%
got a mountain of small work objects to
do<00:03:53.139><c> and</c><00:03:53.349><c> intent</c><00:03:53.889><c> services</c><00:03:54.340><c> are</c><00:03:54.519><c> really</c><00:03:54.790><c> ideal</c>

00:03:55.080 --> 00:03:55.090 align:start position:0%
do and intent services are really ideal
 

00:03:55.090 --> 00:03:57.270 align:start position:0%
do and intent services are really ideal
for<00:03:55.569><c> background</c><00:03:56.049><c> tasks</c><00:03:56.470><c> or</c><00:03:56.590><c> when</c><00:03:56.980><c> you</c><00:03:57.069><c> need</c><00:03:57.190><c> to</c>

00:03:57.270 --> 00:03:57.280 align:start position:0%
for background tasks or when you need to
 

00:03:57.280 --> 00:03:59.550 align:start position:0%
for background tasks or when you need to
get<00:03:57.400><c> intent</c><00:03:57.760><c> work</c><00:03:57.910><c> off</c><00:03:58.090><c> of</c><00:03:58.510><c> the</c><00:03:58.629><c> UI</c><00:03:58.780><c> thread</c><00:03:59.290><c> and</c>

00:03:59.550 --> 00:03:59.560 align:start position:0%
get intent work off of the UI thread and
 

00:03:59.560 --> 00:04:02.009 align:start position:0%
get intent work off of the UI thread and
see<00:04:00.129><c> that's</c><00:04:00.519><c> the</c><00:04:01.030><c> whole</c><00:04:01.060><c> thing</c><00:04:01.540><c> when</c><00:04:01.780><c> it</c><00:04:01.870><c> comes</c>

00:04:02.009 --> 00:04:02.019 align:start position:0%
see that's the whole thing when it comes
 

00:04:02.019 --> 00:04:03.390 align:start position:0%
see that's the whole thing when it comes
to<00:04:02.139><c> performance</c><00:04:02.500><c> coding</c><00:04:02.829><c> you</c><00:04:03.160><c> have</c><00:04:03.310><c> to</c>

00:04:03.390 --> 00:04:03.400 align:start position:0%
to performance coding you have to
 

00:04:03.400 --> 00:04:04.860 align:start position:0%
to performance coding you have to
understand<00:04:03.730><c> enough</c><00:04:04.090><c> about</c><00:04:04.209><c> the</c><00:04:04.450><c> primitives</c>

00:04:04.860 --> 00:04:04.870 align:start position:0%
understand enough about the primitives
 

00:04:04.870 --> 00:04:06.659 align:start position:0%
understand enough about the primitives
to<00:04:04.930><c> know</c><00:04:05.109><c> how</c><00:04:05.230><c> they</c><00:04:05.319><c> might</c><00:04:05.470><c> help</c><00:04:05.650><c> you</c><00:04:05.829><c> and</c><00:04:06.040><c> how</c>

00:04:06.659 --> 00:04:06.669 align:start position:0%
to know how they might help you and how
 

00:04:06.669 --> 00:04:08.009 align:start position:0%
to know how they might help you and how
they<00:04:06.790><c> might</c><00:04:06.940><c> hurt</c><00:04:07.209><c> you</c><00:04:07.389><c> and</c><00:04:07.599><c> if</c><00:04:07.780><c> it's</c><00:04:07.870><c> not</c>

00:04:08.009 --> 00:04:08.019 align:start position:0%
they might hurt you and if it's not
 

00:04:08.019 --> 00:04:09.930 align:start position:0%
they might hurt you and if it's not
working<00:04:08.440><c> move</c><00:04:08.620><c> on</c><00:04:08.799><c> to</c><00:04:09.010><c> a</c><00:04:09.040><c> better</c><00:04:09.400><c> pattern</c>

00:04:09.930 --> 00:04:09.940 align:start position:0%
working move on to a better pattern
 

00:04:09.940 --> 00:04:11.129 align:start position:0%
working move on to a better pattern
which<00:04:10.389><c> is</c><00:04:10.510><c> why</c><00:04:10.599><c> you</c><00:04:10.690><c> should</c><00:04:10.810><c> check</c><00:04:10.959><c> out</c><00:04:11.079><c> the</c>

00:04:11.129 --> 00:04:11.139 align:start position:0%
which is why you should check out the
 

00:04:11.139 --> 00:04:12.360 align:start position:0%
which is why you should check out the
rest<00:04:11.199><c> of</c><00:04:11.379><c> the</c><00:04:11.470><c> Android</c><00:04:11.799><c> performance</c><00:04:11.919><c> patterns</c>

00:04:12.360 --> 00:04:12.370 align:start position:0%
rest of the Android performance patterns
 

00:04:12.370 --> 00:04:14.550 align:start position:0%
rest of the Android performance patterns
videos<00:04:12.699><c> and</c><00:04:13.120><c> don't</c><00:04:13.269><c> forget</c><00:04:13.419><c> to</c><00:04:13.720><c> ask</c><00:04:13.840><c> your</c><00:04:14.109><c> hard</c>

00:04:14.550 --> 00:04:14.560 align:start position:0%
videos and don't forget to ask your hard
 

00:04:14.560 --> 00:04:16.770 align:start position:0%
videos and don't forget to ask your hard
threading<00:04:15.459><c> questions</c><00:04:15.910><c> in</c><00:04:16.120><c> the</c><00:04:16.209><c> Google+</c>

00:04:16.770 --> 00:04:16.780 align:start position:0%
threading questions in the Google+
 

00:04:16.780 --> 00:04:19.170 align:start position:0%
threading questions in the Google+
community<00:04:16.810><c> as</c><00:04:17.289><c> well</c><00:04:17.440><c> so</c><00:04:17.680><c> keep</c><00:04:18.220><c> calm</c><00:04:18.519><c> profile</c>

00:04:19.170 --> 00:04:19.180 align:start position:0%
community as well so keep calm profile
 

00:04:19.180 --> 00:04:20.430 align:start position:0%
community as well so keep calm profile
your<00:04:19.209><c> code</c><00:04:19.359><c> and</c><00:04:19.599><c> always</c><00:04:19.900><c> remember</c><00:04:20.079><c> perf</c>

00:04:20.430 --> 00:04:20.440 align:start position:0%
your code and always remember perf
 

00:04:20.440 --> 00:04:22.979 align:start position:0%
your code and always remember perf
matters

