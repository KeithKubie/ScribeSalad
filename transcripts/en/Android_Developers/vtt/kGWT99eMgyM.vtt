WEBVTT
Kind: captions
Language: en

00:00:01.419 --> 00:00:06.622
[MUSIC PLAYING]

00:00:06.622 --> 00:00:10.129
BENJAMIN POIESZ: Afternoon,
morning, lunchish.

00:00:10.129 --> 00:00:10.920
Welcome, everybody.

00:00:10.920 --> 00:00:13.380
Thank you for coming
to talk about battery.

00:00:13.380 --> 00:00:15.050
So it's another year,
and I'm here again

00:00:15.050 --> 00:00:17.100
to talk to you about power.

00:00:17.100 --> 00:00:19.460
It's an ongoing project.

00:00:19.460 --> 00:00:22.470
And as you probably
saw from the keynote,

00:00:22.470 --> 00:00:25.430
Dave talked about Maslow's--
or his own version,

00:00:25.430 --> 00:00:26.690
of the pyramid.

00:00:26.690 --> 00:00:31.690
And I think it's actually
like, a lot is in this image.

00:00:31.690 --> 00:00:34.310
Battery is foundational
to everything

00:00:34.310 --> 00:00:35.630
you're doing on your phone.

00:00:35.630 --> 00:00:35.870
Right?

00:00:35.870 --> 00:00:37.580
If you don't have
power, you don't really

00:00:37.580 --> 00:00:38.690
have any other cool features.

00:00:38.690 --> 00:00:39.773
You don't have the camera.

00:00:39.773 --> 00:00:41.630
You don't have the assistant.

00:00:41.630 --> 00:00:45.020
Battery exists to power
all the other things.

00:00:45.020 --> 00:00:47.150
And it's a struggle for
us, and it's a struggle,

00:00:47.150 --> 00:00:48.860
I think, for all
of you as well is,

00:00:48.860 --> 00:00:51.800
you want to do awesome
things for users,

00:00:51.800 --> 00:00:53.930
and you also want to
save power so they

00:00:53.930 --> 00:00:56.290
can do those things for longer.

00:00:56.290 --> 00:00:58.880
And battery is actually a
really easy problem to solve.

00:00:58.880 --> 00:01:01.591
You just take-- just
kill everything.

00:01:01.591 --> 00:01:02.090
Fixed.

00:01:02.090 --> 00:01:03.920
I'll take my promotion.

00:01:03.920 --> 00:01:05.032
It's great.

00:01:05.032 --> 00:01:07.490
The problem is, it's obviously
much more nuanced than that.

00:01:07.490 --> 00:01:10.700
And that is a struggle that
we have internally, every day,

00:01:10.700 --> 00:01:12.170
talking about
power, and what are

00:01:12.170 --> 00:01:14.402
the right trade-offs for users?

00:01:14.402 --> 00:01:16.110
And that's always a
really hard question.

00:01:16.110 --> 00:01:18.110
And we're going to talk
a little bit about that,

00:01:18.110 --> 00:01:20.900
and some of the things that
we're building into Android P

00:01:20.900 --> 00:01:23.199
to make it a lot easier.

00:01:23.199 --> 00:01:24.740
And so the first
thing I want to talk

00:01:24.740 --> 00:01:27.410
about is, where is it going?

00:01:27.410 --> 00:01:29.286
And this is like, a
horrifically simplified--

00:01:29.286 --> 00:01:31.868
I'm sure some of the engineers
out there are like, oh, my god,

00:01:31.868 --> 00:01:32.660
he's showing this.

00:01:32.660 --> 00:01:34.820
But you have hardware.

00:01:34.820 --> 00:01:37.910
Things even like, how much
RAM you have in your device,

00:01:37.910 --> 00:01:41.490
cause a persistent drain on
what's happening to that.

00:01:41.490 --> 00:01:43.832
So what hardware the
OEM has selected,

00:01:43.832 --> 00:01:45.290
what hardware you're
using, how big

00:01:45.290 --> 00:01:47.510
your screen is, how
bright your screen is,

00:01:47.510 --> 00:01:50.090
all play into that effect.

00:01:50.090 --> 00:01:51.680
You have the OS itself.

00:01:51.680 --> 00:01:53.410
Is the kernel being
really efficient?

00:01:53.410 --> 00:01:55.270
Is it waking up a lot?

00:01:55.270 --> 00:01:57.040
Does it have a lot of overhead?

00:01:57.040 --> 00:01:58.130
Do you have disencryption?

00:01:58.130 --> 00:02:01.070
Is that disencryption
in software or hardware?

00:02:01.070 --> 00:02:03.700
Those things all affect, then,
your overall power profile,

00:02:03.700 --> 00:02:05.660
the happening under the hood.

00:02:05.660 --> 00:02:07.160
The next thing is
apps and services.

00:02:07.160 --> 00:02:08.743
And this is where
we're going to spend

00:02:08.743 --> 00:02:10.060
a bit of time talking today.

00:02:10.060 --> 00:02:12.560
Obviously, what apps you have
on your phone and the services

00:02:12.560 --> 00:02:15.890
running on that phone, drive,
power, substantially largely

00:02:15.890 --> 00:02:18.220
through the CPU and through
network connectivity.

00:02:18.220 --> 00:02:20.270
And then the last one is
the user's interaction

00:02:20.270 --> 00:02:21.950
with the device itself.

00:02:21.950 --> 00:02:23.220
How they behave.

00:02:23.220 --> 00:02:24.380
What applications they use.

00:02:24.380 --> 00:02:26.660
How quickly they
respond to notifications

00:02:26.660 --> 00:02:30.570
or don't all impact the
overall picture of where

00:02:30.570 --> 00:02:32.540
a battery ends up.

00:02:32.540 --> 00:02:34.340
Really complicated topic.

00:02:34.340 --> 00:02:37.370
We're going to talk largely
about the bottom left

00:02:37.370 --> 00:02:38.850
corner today.

00:02:38.850 --> 00:02:40.370
But the thing I
wanted just to give,

00:02:40.370 --> 00:02:43.460
before we get into that is,
what other things have we done,

00:02:43.460 --> 00:02:45.560
and how does the stuff
we're going to talk about

00:02:45.560 --> 00:02:47.670
affect the overall strategy?

00:02:47.670 --> 00:02:50.602
So we started out with
lollipop, with JobScheduler.

00:02:50.602 --> 00:02:52.310
And JobScheduler was
a very powerful tool

00:02:52.310 --> 00:02:54.579
to avoid apps just
having to hang out

00:02:54.579 --> 00:02:56.870
on services all the time,
processing in the background.

00:02:56.870 --> 00:02:58.010
But you could schedule
a piece of work.

00:02:58.010 --> 00:02:59.385
You could have
that piece of work

00:02:59.385 --> 00:03:01.340
done in a finite amount
of time, and the OS

00:03:01.340 --> 00:03:05.030
could then have some variability
on when to schedule it.

00:03:05.030 --> 00:03:06.230
Next, we did Doze.

00:03:06.230 --> 00:03:08.630
And Doze was largely
targeted at cases

00:03:08.630 --> 00:03:11.850
where you have your tablet
or phone, you put it down,

00:03:11.850 --> 00:03:13.760
you're not using it,
you put it in a drawer,

00:03:13.760 --> 00:03:15.106
and you forget about it.

00:03:15.106 --> 00:03:17.480
And hopefully when you pull
it back out and use it again,

00:03:17.480 --> 00:03:19.660
a few days later, it
still has a battery.

00:03:19.660 --> 00:03:21.830
And Doze was really trying
to target that problem,

00:03:21.830 --> 00:03:24.320
and was largely successful
at dealing with that.

00:03:24.320 --> 00:03:26.870
We had to go further, though,
and that was with Doze

00:03:26.870 --> 00:03:29.840
on the Go, or Doze Light, as
we tend to call it internally,

00:03:29.840 --> 00:03:31.880
because it's just faster.

00:03:31.880 --> 00:03:33.800
That was targeted at phones.

00:03:33.800 --> 00:03:36.290
And like, I have my phone
hanging out in my pocket.

00:03:36.290 --> 00:03:38.490
I'm not using it right
now, but I'm moving around,

00:03:38.490 --> 00:03:39.800
so I'm not in a drawer.

00:03:39.800 --> 00:03:41.960
That is, then,
the next step, was

00:03:41.960 --> 00:03:43.850
how do we get that to
be a good scenario.

00:03:43.850 --> 00:03:46.099
And Doze on the Go is trying
to look at that scenario,

00:03:46.099 --> 00:03:48.767
if your phone screen is off,
you're maybe moving around,

00:03:48.767 --> 00:03:50.600
so you're probably not
wanting all your apps

00:03:50.600 --> 00:03:53.780
to be quite severely
restricted as full Doze,

00:03:53.780 --> 00:03:55.700
but you still need to
be a little bit backed

00:03:55.700 --> 00:03:59.270
off normal scenarios
where the screen is on.

00:03:59.270 --> 00:04:01.130
We still need to do
more and go deeper.

00:04:01.130 --> 00:04:03.170
The next thing was looking
at background limits,

00:04:03.170 --> 00:04:06.180
and this was largely targeted at
background services as a whole.

00:04:06.180 --> 00:04:08.640
And now we've had jobs
around for quite a while.

00:04:08.640 --> 00:04:11.082
We also were looking at
background limits for location,

00:04:11.082 --> 00:04:13.040
and trying to figure out
what the right balance

00:04:13.040 --> 00:04:15.496
of applications looking at
location in the backgrounds,

00:04:15.496 --> 00:04:17.120
versus the foreground,
and should there

00:04:17.120 --> 00:04:19.940
be different thresholds
of what is appropriate.

00:04:19.940 --> 00:04:22.089
Really good effect with that.

00:04:22.089 --> 00:04:23.900
The only downside,
if you will, to what

00:04:23.900 --> 00:04:26.330
we did with Oreo was, we needed
to ax the target, the Oreo

00:04:26.330 --> 00:04:26.877
SDK--

00:04:26.877 --> 00:04:28.460
and I'll talk about
that in a moment--

00:04:28.460 --> 00:04:29.877
in order to support this.

00:04:29.877 --> 00:04:31.460
And then, obviously,
since we're here,

00:04:31.460 --> 00:04:33.320
we're going to talk
about some more stuff

00:04:33.320 --> 00:04:35.450
that we've been working on.

00:04:35.450 --> 00:04:37.220
The one thing I wanted
to take a moment,

00:04:37.220 --> 00:04:38.050
because we're
mostly going to talk

00:04:38.050 --> 00:04:40.480
about really cool ML and
other exciting things,

00:04:40.480 --> 00:04:43.760
is there was a lot of just
brute force optimization

00:04:43.760 --> 00:04:46.450
that the engineering
team has also done.

00:04:46.450 --> 00:04:49.080
This was looking at
F2FS system work.

00:04:49.080 --> 00:04:50.780
This was looking
at, how do we choose

00:04:50.780 --> 00:04:52.238
between whether a
process should be

00:04:52.238 --> 00:04:53.900
on a small core or a big core?

00:04:53.900 --> 00:04:55.910
Looking at when we
should do CPU boosts

00:04:55.910 --> 00:04:57.950
so that you have nice,
buttery smooth sliding,

00:04:57.950 --> 00:04:59.325
but you're not
just burning power

00:04:59.325 --> 00:05:01.130
when the screen is
on in anticipation

00:05:01.130 --> 00:05:03.420
that the user might
interact with the screen.

00:05:03.420 --> 00:05:04.620
And these were all a
bunch of things that

00:05:04.620 --> 00:05:05.828
had been done over the years.

00:05:05.828 --> 00:05:08.000
This is a set that
we just did on P,

00:05:08.000 --> 00:05:11.180
and there's probably still more
that we're trying to get done.

00:05:11.180 --> 00:05:13.010
And then, the thing
is, there's still

00:05:13.010 --> 00:05:15.770
some of those big, big
challenges that are remaining.

00:05:15.770 --> 00:05:18.050
And this is what we're
talking about today.

00:05:18.050 --> 00:05:21.084
What we noticed
was battery drain

00:05:21.084 --> 00:05:23.000
was roughly proportional
to the number of apps

00:05:23.000 --> 00:05:24.920
you had on the phone.

00:05:24.920 --> 00:05:27.560
Not the number of
apps you were using,

00:05:27.560 --> 00:05:29.210
but how many you had installed.

00:05:29.210 --> 00:05:31.700
And obviously, that's not ideal.

00:05:31.700 --> 00:05:33.590
And so we wanted to
try and remedy that.

00:05:33.590 --> 00:05:37.040
We also saw a lot of scenarios
where apps are accidentally

00:05:37.040 --> 00:05:37.996
making mistakes.

00:05:37.996 --> 00:05:39.620
Like, if you're
working with wakelocks,

00:05:39.620 --> 00:05:41.210
you're kind of
playing with fire.

00:05:41.210 --> 00:05:43.230
And what happens when
a mistake happens?

00:05:43.230 --> 00:05:45.020
And usually, the
battery would suffer.

00:05:45.020 --> 00:05:46.820
Also, some developers
would be a really

00:05:46.820 --> 00:05:49.760
aggressive with their use case,
and trying to be like, oh,

00:05:49.760 --> 00:05:51.740
I must be there all
the time, ready to go,

00:05:51.740 --> 00:05:53.121
at a moment's notice.

00:05:53.121 --> 00:05:55.370
And sometimes, that might
take an awful lot of battery

00:05:55.370 --> 00:05:57.050
to achieve that,
and is that really

00:05:57.050 --> 00:05:58.841
in the interest of the
user, and how can we

00:05:58.841 --> 00:06:01.820
help balance that back out.

00:06:01.820 --> 00:06:04.280
Because the last part is, even
when an app was aggressive

00:06:04.280 --> 00:06:06.710
or an app had a
mistake, it wasn't

00:06:06.710 --> 00:06:08.940
obvious to the user
as to what to do.

00:06:08.940 --> 00:06:11.256
They didn't know, is the
battery menu going to help me?

00:06:11.256 --> 00:06:12.380
Does it tell me everything?

00:06:12.380 --> 00:06:13.340
Does it catch all the cases?

00:06:13.340 --> 00:06:14.150
Some of the cases?

00:06:14.150 --> 00:06:15.770
None of the cases?

00:06:15.770 --> 00:06:20.000
And even when you saw a high
battery value, now what?

00:06:20.000 --> 00:06:21.140
Do I uninstall?

00:06:21.140 --> 00:06:22.500
Do I live with it?

00:06:22.500 --> 00:06:25.070
Do I call up the developer
and send them a nasty gram?

00:06:25.070 --> 00:06:27.130
And so that's something else
we waned to really look into.

00:06:27.130 --> 00:06:28.921
And then the very last
one that I mentioned

00:06:28.921 --> 00:06:32.900
before is the Oreo SDK, having
apps targeting that SDK to say,

00:06:32.900 --> 00:06:35.270
I understand how the
background limits work.

00:06:35.270 --> 00:06:37.910
I understand how I can use
jobs and use alarms instead

00:06:37.910 --> 00:06:39.410
of using services.

00:06:39.410 --> 00:06:42.200
As you probably saw, there was
a announcement late last year

00:06:42.200 --> 00:06:45.770
talking about targeting
requirements for applications

00:06:45.770 --> 00:06:46.520
on the Play Store.

00:06:46.520 --> 00:06:48.478
If you haven't seen that,
please go Google that

00:06:48.478 --> 00:06:49.395
and find out about it.

00:06:49.395 --> 00:06:51.853
You should be looking at it,
because those requirements are

00:06:51.853 --> 00:06:53.415
kicking in later this year.

00:06:53.415 --> 00:06:55.790
And that's going to ensure
that, then, on P, the majority

00:06:55.790 --> 00:06:58.460
of the apps on your phone
are now running the Oreo SDK,

00:06:58.460 --> 00:07:01.490
and all of these features
we're talking about work.

00:07:01.490 --> 00:07:04.970
So the high level thing we're
going to talk about here

00:07:04.970 --> 00:07:06.980
is a feature called
adaptive battery, which

00:07:06.980 --> 00:07:09.260
I think has been talked about in
a few different talks already.

00:07:09.260 --> 00:07:11.010
We'll talk about battery
saver, and trying

00:07:11.010 --> 00:07:12.297
to make battery saver better.

00:07:12.297 --> 00:07:14.630
And then also, additional
restrictions around background

00:07:14.630 --> 00:07:16.460
processing that we've
been looking at.

00:07:16.460 --> 00:07:18.320
And this is also
how to help users

00:07:18.320 --> 00:07:20.300
understand, when
can I make it stop.

00:07:20.300 --> 00:07:22.610
Can I have another choice
other than uninstall?

00:07:22.610 --> 00:07:25.215
Something in the middle between
live with it and remove it?

00:07:25.215 --> 00:07:26.840
And that's like, that
kind of pyramid's

00:07:26.840 --> 00:07:28.700
trying to articulate
here, is we all

00:07:28.700 --> 00:07:30.040
want a good power efficiency.

00:07:30.040 --> 00:07:30.540
Right?

00:07:30.540 --> 00:07:32.330
We like batteries
that last a long time.

00:07:32.330 --> 00:07:33.824
We want really cool apps.

00:07:33.824 --> 00:07:35.240
And we don't want
the user to have

00:07:35.240 --> 00:07:36.680
to manage between these things.

00:07:36.680 --> 00:07:39.380
Like, do I want cool apps, or
do I want power efficiency?

00:07:39.380 --> 00:07:41.810
No one wants to have to be
forced to make that choice.

00:07:41.810 --> 00:07:44.170
It's terrifically difficult.
I don't want to make it.

00:07:44.170 --> 00:07:45.230
No one wants to make it.

00:07:45.230 --> 00:07:46.620
We want it just to work.

00:07:46.620 --> 00:07:48.925
And that's what this whole
project has been all about.

00:07:48.925 --> 00:07:51.050
And so with that, I'm going
to invite James up here

00:07:51.050 --> 00:07:54.220
to talk about the battery.

00:07:54.220 --> 00:07:55.364
Thanks.

00:07:55.364 --> 00:07:57.005
[APPLAUSE]

00:07:57.005 --> 00:07:58.380
JAMES SMITH: Thank
you very much.

00:07:58.380 --> 00:07:59.338
BENJAMIN POIESZ: Enjoy.

00:07:59.338 --> 00:08:00.700
JAMES SMITH: Cheers.

00:08:00.700 --> 00:08:02.390
Hi, everyone.

00:08:02.390 --> 00:08:03.580
Good morning.

00:08:03.580 --> 00:08:06.941
I'm James I'm representing
the DeepMind team today.

00:08:06.941 --> 00:08:09.315
I just wanted to say that
we're really pleased to be here

00:08:09.315 --> 00:08:12.910
and working with Android,
and excited about what

00:08:12.910 --> 00:08:14.800
we've built together.

00:08:14.800 --> 00:08:19.190
So as a user, you shouldn't
have to closely manage

00:08:19.190 --> 00:08:22.000
how your apps behave
on your device.

00:08:22.000 --> 00:08:24.970
A modern, intelligent
operating system

00:08:24.970 --> 00:08:26.620
should just take care of it.

00:08:26.620 --> 00:08:29.880
And that's where machine
learning can help.

00:08:29.880 --> 00:08:32.110
We've co-developed this
feature with Android

00:08:32.110 --> 00:08:34.200
called Adaptive Battery.

00:08:34.200 --> 00:08:40.270
It intelligently aligns power
consumption with app usage.

00:08:40.270 --> 00:08:43.480
Apps can still run in the
background when they need to,

00:08:43.480 --> 00:08:46.148
and users don't need
to micro-manage.

00:08:49.290 --> 00:08:55.590
So adaptive battery uses the
concept of app standby buckets.

00:08:55.590 --> 00:08:57.780
Every app on the
device is assigned

00:08:57.780 --> 00:09:00.450
to one of these buckets.

00:09:00.450 --> 00:09:04.320
Each bucket has different
limits on background activity,

00:09:04.320 --> 00:09:08.790
and there are four buckets,
ranging from active to rare.

00:09:08.790 --> 00:09:13.230
Apps in the rare bucket will
have the most restrictions.

00:09:13.230 --> 00:09:16.920
And we use the ML model
to assign apps to buckets

00:09:16.920 --> 00:09:21.190
based on their predicted usage.

00:09:21.190 --> 00:09:24.240
So, for example, apps
that are predicted to be

00:09:24.240 --> 00:09:25.960
open in the next few hours.

00:09:25.960 --> 00:09:29.250
I'm here at IO, so I
might be using the IO app.

00:09:29.250 --> 00:09:33.060
So the IO app is going to
be in the active bucket.

00:09:33.060 --> 00:09:35.820
But in a few days time,
when I'm back at home,

00:09:35.820 --> 00:09:39.060
adaptive battery is going
to automatically determine

00:09:39.060 --> 00:09:41.620
that I'm unlikely
to be using this app

00:09:41.620 --> 00:09:45.270
and put it into the rare bucket,
so it's not unnecessarily

00:09:45.270 --> 00:09:46.980
consuming resources
like battery.

00:09:50.700 --> 00:09:54.180
So what are the restrictions
that are applied?

00:09:54.180 --> 00:09:58.950
Jobs, alarms, Firebase
Cloud messaging, and network

00:09:58.950 --> 00:10:01.740
are all restricted in
Android P, depending

00:10:01.740 --> 00:10:06.040
on which bucket the app is in.

00:10:06.040 --> 00:10:09.490
Apps in the active bucket
have no restrictions,

00:10:09.490 --> 00:10:11.680
just like it is today.

00:10:11.680 --> 00:10:13.450
Working set has
some restrictions

00:10:13.450 --> 00:10:17.080
on jobs and alarms, and
frequent and rare Buckets

00:10:17.080 --> 00:10:21.130
introduce restrictions on
the number of high priority

00:10:21.130 --> 00:10:23.320
Firebase Cloud messages.

00:10:23.320 --> 00:10:27.550
Messages beyond that cap will
be treated as normal priority,

00:10:27.550 --> 00:10:32.570
so that we batch together with
other messages to save battery.

00:10:32.570 --> 00:10:34.450
Generally, as
developers, you should

00:10:34.450 --> 00:10:36.580
assume the background
activity will

00:10:36.580 --> 00:10:39.550
be deferred and ensure
that your app can

00:10:39.550 --> 00:10:42.170
work under those conditions.

00:10:42.170 --> 00:10:45.010
But one thing to remember
is that once this device is

00:10:45.010 --> 00:10:47.875
plugged into power, all of
the restrictions are lifted.

00:10:52.980 --> 00:10:55.020
There are adb
commands that you can

00:10:55.020 --> 00:10:58.530
use to test your app in
each bucket to make sure

00:10:58.530 --> 00:11:01.740
that it performs as expected.

00:11:01.740 --> 00:11:04.650
You can also use
new framework APIs

00:11:04.650 --> 00:11:06.855
to get your app's current
bucket at runtime.

00:11:09.390 --> 00:11:12.150
Most apps should be
fine if they're already

00:11:12.150 --> 00:11:15.720
following best practices, such
as using jobs for background

00:11:15.720 --> 00:11:20.190
work and targeting recent API
levels like Android or Oreo.

00:11:20.190 --> 00:11:22.770
As Ben just said, this is
going to be a requirement

00:11:22.770 --> 00:11:25.690
for app updates on the
Play Store later this year,

00:11:25.690 --> 00:11:28.121
so please make sure you're
targeting the latest SDK

00:11:28.121 --> 00:11:28.620
versions.

00:11:32.470 --> 00:11:35.590
So let's talk a little bit
about machine learning.

00:11:35.590 --> 00:11:38.440
The model was built by
Android and DeepMind

00:11:38.440 --> 00:11:42.840
to predict which apps
go into which buckets.

00:11:42.840 --> 00:11:45.370
Now we could have done this
with simple heuristics,

00:11:45.370 --> 00:11:49.070
or we could have even just used
past behavior on the device.

00:11:49.070 --> 00:11:50.620
But we found that
machine learning

00:11:50.620 --> 00:11:53.300
allows us to capture
the nuance of how

00:11:53.300 --> 00:11:56.170
users behave with their apps.

00:11:56.170 --> 00:11:57.760
And I'll go into
some detail on how

00:11:57.760 --> 00:12:00.650
we built the model in a second.

00:12:00.650 --> 00:12:03.730
For those of you who are
interested in the architecture

00:12:03.730 --> 00:12:07.360
of the model, we're using a
two-layer, deep convolutional

00:12:07.360 --> 00:12:11.400
neural net with a feed
forward neural net on top.

00:12:11.400 --> 00:12:15.040
And this is used to predict the
probability that an app will

00:12:15.040 --> 00:12:18.250
be opened in a given interval.

00:12:18.250 --> 00:12:20.590
You might have heard of
convolutional neural nets

00:12:20.590 --> 00:12:21.320
before.

00:12:21.320 --> 00:12:24.460
Particularly, they're quite
common in image classifiers.

00:12:24.460 --> 00:12:26.410
But we've used them
here to measure

00:12:26.410 --> 00:12:30.400
higher levels, higher level
patterns, of app usage

00:12:30.400 --> 00:12:32.220
over time.

00:12:32.220 --> 00:12:34.430
It turns out they're
pretty good at that.

00:12:34.430 --> 00:12:38.770
Now all of this is happening
on device, using TensorFlow.

00:12:38.770 --> 00:12:41.350
And that's actually
a first for DeepMind.

00:12:41.350 --> 00:12:43.540
We've never deployed
a production model

00:12:43.540 --> 00:12:46.140
on the compute power
of a single device.

00:12:46.140 --> 00:12:48.860
And a single mobile device
within a limited compute power

00:12:48.860 --> 00:12:52.175
that's available is a
particular set of challenges.

00:12:52.175 --> 00:12:54.550
And of course, we're building
this machine learning model

00:12:54.550 --> 00:12:57.870
with the intention of
attempting to save power.

00:12:57.870 --> 00:12:59.930
And if we are doing
machine learning on device,

00:12:59.930 --> 00:13:02.110
we have to be careful
that we're not spending

00:13:02.110 --> 00:13:05.320
more power than we are saving.

00:13:05.320 --> 00:13:09.310
We're going to be making this
model available to all device

00:13:09.310 --> 00:13:12.040
manufacturers, so they
can take it, if they wish,

00:13:12.040 --> 00:13:14.710
for their devices on
Android P, or they

00:13:14.710 --> 00:13:18.400
can implement their own, or they
can take an Android open source

00:13:18.400 --> 00:13:19.360
version of it as well.

00:13:22.870 --> 00:13:24.460
So the model.

00:13:24.460 --> 00:13:28.150
We trained the model on
millions of sequences of app

00:13:28.150 --> 00:13:32.170
opens and transitions to
discover the patterns of how

00:13:32.170 --> 00:13:34.030
your users behave.

00:13:34.030 --> 00:13:37.870
So, an example would be, if
you use an app at 8 o'clock

00:13:37.870 --> 00:13:39.730
in the morning,
every morning, you're

00:13:39.730 --> 00:13:43.990
probably quite likely to open it
tomorrow at 8 o'clock as well.

00:13:43.990 --> 00:13:47.650
But if you only use a
certain app on weekends,

00:13:47.650 --> 00:13:50.860
like a game or a
travel app, then you're

00:13:50.860 --> 00:13:53.800
probably not going to
open it on Monday morning.

00:13:53.800 --> 00:13:57.160
And the model is able
to capture this nuance.

00:13:57.160 --> 00:13:59.500
The model looks at
the user's behavior

00:13:59.500 --> 00:14:02.410
and outputs a probability
of when you're next

00:14:02.410 --> 00:14:05.390
going to open a particular app.

00:14:05.390 --> 00:14:08.440
The model compares the
usage to the patterns

00:14:08.440 --> 00:14:11.950
we've observed in the data,
and the behavior on device

00:14:11.950 --> 00:14:14.840
will influence the predictions
given by the model.

00:14:19.510 --> 00:14:22.270
So we've also built this
model with certain principles

00:14:22.270 --> 00:14:23.830
in mind.

00:14:23.830 --> 00:14:25.370
We try to make it fair.

00:14:25.370 --> 00:14:29.380
There is no favoritism
of one app over another.

00:14:29.380 --> 00:14:33.340
If you use one particular app
in exactly the same way that I

00:14:33.340 --> 00:14:35.260
use a different
app, then the model

00:14:35.260 --> 00:14:37.210
will output the
same predictions,

00:14:37.210 --> 00:14:40.720
and they will be assigned
to the same buckets.

00:14:40.720 --> 00:14:42.370
It's privacy-sensitive.

00:14:42.370 --> 00:14:45.580
There's no personally
identifiable information

00:14:45.580 --> 00:14:48.640
used by the model,
both when it's trained

00:14:48.640 --> 00:14:50.770
and when it runs on the device.

00:14:50.770 --> 00:14:54.670
The model only compares
the app usage on device

00:14:54.670 --> 00:14:58.420
to our known sequences of
millions of app transitions,

00:14:58.420 --> 00:15:01.000
and it predicts when you're
next going to use that app.

00:15:03.990 --> 00:15:06.730
So if you combine
the App Standby

00:15:06.730 --> 00:15:09.740
buckets and their restrictions
with this model that

00:15:09.740 --> 00:15:12.320
predicts when you're next
going to open the apps,

00:15:12.320 --> 00:15:14.850
that's the adaptive
battery feature.

00:15:14.850 --> 00:15:17.630
It's a system that
adapts the phone to you.

00:15:17.630 --> 00:15:21.650
The output of the model is used
to personalize the OS' behavior

00:15:21.650 --> 00:15:24.720
to adapt it to how
you use the phone.

00:15:24.720 --> 00:15:27.620
So the apps that you use get
to run in the background,

00:15:27.620 --> 00:15:30.560
and the apps that
you don't, don't.

00:15:30.560 --> 00:15:33.080
We hope this will create
a more consistent battery

00:15:33.080 --> 00:15:34.760
experience for users.

00:15:34.760 --> 00:15:36.452
I'm now going to
pass over to Madan,

00:15:36.452 --> 00:15:37.910
who's a product
manager on Android,

00:15:37.910 --> 00:15:40.010
to talk about the
battery saver features.

00:15:40.010 --> 00:15:41.036
Thanks very much.

00:15:41.036 --> 00:15:44.369
[APPLAUSE]

00:15:44.369 --> 00:15:45.410
MADAN ANKAPURA: Good job.

00:15:48.326 --> 00:15:49.784
Thank you, James.

00:15:53.200 --> 00:15:56.980
So let's talk about
battery saver.

00:15:56.980 --> 00:15:59.410
Many of us actually
run through the day.

00:15:59.410 --> 00:16:01.030
And as we end
towards the day, we

00:16:01.030 --> 00:16:04.580
realize that, oh, I won't
be able to actually make it.

00:16:04.580 --> 00:16:07.440
And battery saver is there
to actually save you.

00:16:07.440 --> 00:16:10.390
You remember those red
bars when our animations

00:16:10.390 --> 00:16:13.750
that were janky in Oreo?

00:16:13.750 --> 00:16:15.100
Who liked those?

00:16:15.100 --> 00:16:17.750
So we got rid of them.

00:16:17.750 --> 00:16:21.490
We also actually
turned off location.

00:16:21.490 --> 00:16:23.740
That helps battery.

00:16:23.740 --> 00:16:26.800
In addition to that, many
device-specific features,

00:16:26.800 --> 00:16:30.640
like Ambient display as an
example, are also turned off.

00:16:30.640 --> 00:16:35.140
All of these add up in order
to save battery and prolong

00:16:35.140 --> 00:16:36.730
the device battery
so that you can

00:16:36.730 --> 00:16:40.960
go back and charge the device.

00:16:40.960 --> 00:16:43.750
We have also made some
changes in the UI,

00:16:43.750 --> 00:16:47.800
so that you can live on
this more for longer.

00:16:47.800 --> 00:16:49.660
Now you have a slider
that you can actually

00:16:49.660 --> 00:16:52.060
increase all the way
to the right, which

00:16:52.060 --> 00:16:57.781
probably allows you to stay
on this more if you choose to.

00:16:57.781 --> 00:17:00.880
But what's also interesting
is, what we found is,

00:17:00.880 --> 00:17:06.310
if an app is being used
by the user in this mode,

00:17:06.310 --> 00:17:09.260
having a dark
theme really helps.

00:17:09.260 --> 00:17:14.260
Our internal tests show that
apps using dark theme save

00:17:14.260 --> 00:17:17.750
power compared with
the ones that don't.

00:17:17.750 --> 00:17:21.160
So if you are a developer that
already supports dark theme,

00:17:21.160 --> 00:17:24.339
please do think about
switching to dark theme

00:17:24.339 --> 00:17:26.940
when you detect that the
device is in battery saver.

00:17:29.426 --> 00:17:30.800
There are a few
commands that you

00:17:30.800 --> 00:17:37.160
can use through adb to force
the device into battery saver

00:17:37.160 --> 00:17:39.230
and test them.

00:17:39.230 --> 00:17:42.140
And for those of you who
already support dark mode,

00:17:42.140 --> 00:17:46.210
there are APIs, like
isPowerSaveMode,

00:17:46.210 --> 00:17:52.720
and a broadcast that you can use
to switch your device, your app

00:17:52.720 --> 00:17:54.140
theme to dark.

00:17:57.810 --> 00:18:01.410
So let's jump into the
battery settings itself.

00:18:01.410 --> 00:18:06.000
We think when a user actually
goes into a battery settings,

00:18:06.000 --> 00:18:09.390
probably they are having
a bad battery day.

00:18:09.390 --> 00:18:15.240
You want to make the user
very easy to take actions.

00:18:15.240 --> 00:18:19.170
You want to keep
the UI simplified.

00:18:19.170 --> 00:18:23.220
And we will tell you
exactly what applications

00:18:23.220 --> 00:18:26.310
might be causing
their battery drain,

00:18:26.310 --> 00:18:30.120
so it'll be much more
opinionated about these things.

00:18:30.120 --> 00:18:33.000
And in addition to that,
as you scroll down,

00:18:33.000 --> 00:18:37.212
we'll also be able to see how
long your batter will last,

00:18:37.212 --> 00:18:39.170
and that number is also
powered by an ML model.

00:18:43.320 --> 00:18:45.780
So let's jump into that
opinionated background

00:18:45.780 --> 00:18:47.580
restrictions.

00:18:47.580 --> 00:18:49.740
So we have some principles
upon which we have

00:18:49.740 --> 00:18:52.440
built this particular feature.

00:18:52.440 --> 00:18:54.730
User asks for controls.

00:18:54.730 --> 00:18:56.970
They want to know like,
which app is doing what,

00:18:56.970 --> 00:19:00.550
so that they can take
a quick action on them.

00:19:00.550 --> 00:19:03.750
We also want to make sure that
apps that don't necessarily

00:19:03.750 --> 00:19:09.150
target audio are also being
well-managed by the user.

00:19:09.150 --> 00:19:11.520
And lastly, our
goal is to make sure

00:19:11.520 --> 00:19:15.370
that apps don't get
restricted in the first place.

00:19:15.370 --> 00:19:18.315
So that way, apps fundamentally
are better battery citizens.

00:19:22.620 --> 00:19:26.310
So with P, we will actually
launch this feature

00:19:26.310 --> 00:19:29.110
with two specific criteria.

00:19:29.110 --> 00:19:33.270
The first one is, if your app
is still not targeting Oreo

00:19:33.270 --> 00:19:35.850
and has a background service.

00:19:35.850 --> 00:19:39.450
The second one is if
an app holds wakelocks,

00:19:39.450 --> 00:19:42.090
or what we call are stuck
wakelocks for more than an hour

00:19:42.090 --> 00:19:43.620
in the background.

00:19:43.620 --> 00:19:47.040
Both of these are
very well understood

00:19:47.040 --> 00:19:50.160
causes for battery drain.

00:19:50.160 --> 00:19:53.200
There are more such reasons.

00:19:53.200 --> 00:19:57.990
We today represent those reasons
within Play developer console,

00:19:57.990 --> 00:20:00.540
and we call them Android Vitals.

00:20:00.540 --> 00:20:02.850
So we are, in the future,
going to be looking

00:20:02.850 --> 00:20:06.390
at many such signals
in order to incorporate

00:20:06.390 --> 00:20:09.947
into coming up with new rules
for background restrictions.

00:20:13.930 --> 00:20:16.780
So what does it mean
for your app in case

00:20:16.780 --> 00:20:21.670
if the user decides
to restrict them?

00:20:21.670 --> 00:20:26.400
As James talked about, jobs,
alarms, services, and network,

00:20:26.400 --> 00:20:31.210
the apps will not be able to do
any of those in the background.

00:20:31.210 --> 00:20:33.760
There are some
explicit intents--

00:20:33.760 --> 00:20:37.060
for example, location
will not be delivered

00:20:37.060 --> 00:20:39.080
to those applications.

00:20:39.080 --> 00:20:43.780
So we are trying to minimize
the reasons why an app should

00:20:43.780 --> 00:20:48.580
be able to use device resources
when it is in the background.

00:20:48.580 --> 00:20:52.840
And lastly, if an app is in
the background and restricted,

00:20:52.840 --> 00:20:55.335
it won't be able to use
foreground services.

00:21:00.120 --> 00:21:02.930
So as I spoke earlier,
I hope many of you

00:21:02.930 --> 00:21:06.470
are already familiar
with Android vitals.

00:21:06.470 --> 00:21:08.180
If not, I would
strongly recommend

00:21:08.180 --> 00:21:10.850
you to go take a look
into what signals

00:21:10.850 --> 00:21:12.940
do we actually show
in there today,

00:21:12.940 --> 00:21:15.770
and how your app is behaving.

00:21:15.770 --> 00:21:18.080
We have heard many
success stories

00:21:18.080 --> 00:21:20.930
of application developers
using this data in order

00:21:20.930 --> 00:21:24.050
to improve their applications.

00:21:24.050 --> 00:21:27.350
And we, in fact, use
some of these signals

00:21:27.350 --> 00:21:31.207
internally also
to make OS better,

00:21:31.207 --> 00:21:33.290
trying to figure it out
like, what kind of changes

00:21:33.290 --> 00:21:36.410
we could be making in order
to have the right guardrails

00:21:36.410 --> 00:21:39.890
within the OS to make sure
that apps necessarily don't

00:21:39.890 --> 00:21:43.460
accidentally drain battery.

00:21:43.460 --> 00:21:45.860
There was a session about it.

00:21:45.860 --> 00:21:48.580
If you haven't had a
chance to listen to those,

00:21:48.580 --> 00:21:50.560
please take a look
at that according.

00:21:54.320 --> 00:21:58.700
So, we made the UI
simplify, but there

00:21:58.700 --> 00:22:04.700
might be several of you who
would fall into as power users.

00:22:04.700 --> 00:22:08.030
So you do like graphs and you
do like number of percentages,

00:22:08.030 --> 00:22:09.820
so we do have it in
the old flow menus.

00:22:12.500 --> 00:22:16.880
Now the graph is improved
via better predictions,

00:22:16.880 --> 00:22:19.460
and the user can take
action from this screen

00:22:19.460 --> 00:22:23.420
if you see any app that is not
necessarily that surprises you

00:22:23.420 --> 00:22:27.590
as being consuming more battery.

00:22:27.590 --> 00:22:30.950
So from here, you can
directly preemptively restrict

00:22:30.950 --> 00:22:34.880
applications or unrestrict them.

00:22:34.880 --> 00:22:38.710
This is a good user
control for users to have.

00:22:41.760 --> 00:22:43.510
So how do you test for this?

00:22:43.510 --> 00:22:45.980
Again, there is adb
commands that you

00:22:45.980 --> 00:22:51.050
can use to put your app
to a restricted state,

00:22:51.050 --> 00:22:55.280
or unrestrict them and test them
while they are in the state.

00:22:55.280 --> 00:22:58.700
Note that even an app
that has been restricted

00:22:58.700 --> 00:23:02.724
could still be used by the user
by launching them explicitly.

00:23:02.724 --> 00:23:04.640
So you want to make sure
that they still work.

00:23:08.480 --> 00:23:13.060
So we have gone through some
of the key features in P.

00:23:13.060 --> 00:23:16.060
And what does it mean for you
as an app developer to continue

00:23:16.060 --> 00:23:19.090
to actually deliver
your features using

00:23:19.090 --> 00:23:23.680
various affordances that the
OS offers, like jobs, alarms,

00:23:23.680 --> 00:23:25.160
and so on, and so forth.

00:23:25.160 --> 00:23:27.970
What does it mean for you
to do a background work?

00:23:27.970 --> 00:23:31.240
You might have actually
seen this flowchart

00:23:31.240 --> 00:23:33.534
before been presented last year.

00:23:33.534 --> 00:23:35.950
It literally went through,
what is it that you want to do,

00:23:35.950 --> 00:23:39.010
and offered some choices.

00:23:39.010 --> 00:23:41.110
We want to simplify
our recommendation.

00:23:41.110 --> 00:23:43.970
And thanks to Jetpack, in
it we have a great tool.

00:23:47.380 --> 00:23:50.610
So it's extremely
simplified now, hopefully.

00:23:50.610 --> 00:23:52.760
So if you want to think
about doing anything

00:23:52.760 --> 00:23:55.190
in the background,
we highly recommend

00:23:55.190 --> 00:23:59.870
you to actually evaluate
WorkManager as a go-to thing.

00:23:59.870 --> 00:24:02.420
And if you think it is something
that is really important

00:24:02.420 --> 00:24:05.420
and must happen
now, of course, you

00:24:05.420 --> 00:24:08.540
have the ability to use
foreground and services.

00:24:08.540 --> 00:24:11.360
But note that if you
use foreground services,

00:24:11.360 --> 00:24:14.810
you have to tell the user
why you are using it for,

00:24:14.810 --> 00:24:17.210
because there will
be a notification,

00:24:17.210 --> 00:24:19.280
and you'll have to
justify yourself as to why

00:24:19.280 --> 00:24:21.250
you think it is important.

00:24:21.250 --> 00:24:24.830
And now, because of that,
if you change your mind,

00:24:24.830 --> 00:24:26.150
go back to WorkManager.

00:24:29.890 --> 00:24:34.060
So if none of this works,
think about actually doing

00:24:34.060 --> 00:24:36.640
the work when the app
actually is launched

00:24:36.640 --> 00:24:38.900
and being actively
used by the user.

00:24:38.900 --> 00:24:43.090
So the choices are
hopefully very simplified.

00:24:43.090 --> 00:24:47.020
All of this really helps
us manage battery better,

00:24:47.020 --> 00:24:49.720
and that will lead to having
a better battery life.

00:24:52.990 --> 00:24:55.890
There have been some sessions
that have already happened,

00:24:55.890 --> 00:24:59.140
so I want to call a
shout out to Jetpack,

00:24:59.140 --> 00:25:01.600
which talks about WorkManager.

00:25:01.600 --> 00:25:05.050
There was also a session
on Android vitals,

00:25:05.050 --> 00:25:07.420
and there is a DevByte as video.

00:25:07.420 --> 00:25:10.390
There is a detailed of
documentation of the features

00:25:10.390 --> 00:25:12.850
that we talked about.

00:25:12.850 --> 00:25:17.410
Please head over to
d.android.com/power.

00:25:17.410 --> 00:25:19.576
And thank you.

00:25:19.576 --> 00:25:21.070
[APPLAUSE]

00:25:21.070 --> 00:25:26.802
[MUSIC PLAYING]

