WEBVTT
Kind: captions
Language: en

00:00:00.190 --> 00:00:03.380
The mathematics behind computer
graphics is fascinating,

00:00:03.380 --> 00:00:06.570
especially when it comes to 2D and
3D projection.

00:00:06.570 --> 00:00:08.910
Whether you are creating
a side-scrolling platformer or

00:00:08.910 --> 00:00:12.040
a first-person shooter,
it turns out that how the graphics

00:00:12.040 --> 00:00:16.790
are transformed and manipulated before
they reach the screen is very similar.

00:00:16.790 --> 00:00:20.420
As you might expect, 2D can be
considered as just a special case of 3D,

00:00:20.420 --> 00:00:23.010
and, in fact,
that's how many frameworks and

00:00:23.010 --> 00:00:26.450
development tools treat 2D objects and
scenes.

00:00:26.450 --> 00:00:29.250
It's a question of perspective,
literally.

00:00:29.250 --> 00:00:33.320
We usually think of perspective
as a feature only of 3D games,

00:00:33.320 --> 00:00:34.645
like driving games or

00:00:34.645 --> 00:00:39.560
first-person shooters, because they tend
to look like the physical world looks.

00:00:39.560 --> 00:00:42.110
There are vanishing points
where lines converge, and

00:00:42.110 --> 00:00:45.120
objects appear smaller
the farther away they get.

00:00:45.120 --> 00:00:49.190
This is because they rely on perspective
projection to render objects on a flat

00:00:49.190 --> 00:00:52.840
screen, but there's another
whole category of projection

00:00:52.840 --> 00:00:57.290
called parallel projection that
produces very different results.

00:00:57.290 --> 00:01:02.290
In fact, one kind of parallel
projection called orthographic can turn

00:01:02.290 --> 00:01:07.630
a 3D scene into a typical platform or
side view or a top-down 2D map.

00:01:07.630 --> 00:01:10.320
This allows 2D game
developers to use today's,

00:01:10.320 --> 00:01:14.620
powerful feature-rich 3D development
tools, then achieve the look and

00:01:14.620 --> 00:01:17.760
feel they want simply by changing
properties of the main camera view.

00:01:18.890 --> 00:01:21.260
This is the approach we'll take for
our game.

00:01:21.260 --> 00:01:25.585
We'll use an orthographic projection
to render it in the style of a classic

00:01:25.585 --> 00:01:27.129
side-view platformer.

00:01:27.129 --> 00:01:30.950
Later, you might experiment on your
own with other kinds of projections.

00:01:30.950 --> 00:01:32.834
They're fun to play around with.

00:01:32.834 --> 00:01:34.959
Isometric projection
is popular right now.

00:01:34.959 --> 00:01:38.360
Think of Crossy Road or Monument Valley.

00:01:38.360 --> 00:01:41.620
At first glance, it looks like
objects are drawn with perspective,

00:01:41.620 --> 00:01:43.660
but then you notice that
there's no foreshortening,

00:01:43.660 --> 00:01:45.810
which is a classic feature
of perspective drawing.

00:01:47.080 --> 00:01:51.751
One time, in a hare-brained attempt at
optimization, I accidentally created

00:01:51.751 --> 00:01:55.873
a rather exotic projection in which
all straight lines curved subtly,

00:01:55.873 --> 00:01:59.490
kind of like a fish eye lens,
but not exactly.

00:01:59.490 --> 00:02:02.210
I was trying to simplify the math for
speed and

00:02:02.210 --> 00:02:05.390
was experimenting with
spherical coordinates.

00:02:05.390 --> 00:02:09.180
The result wasn't really practical for
my purposes at the time, but

00:02:09.180 --> 00:02:11.730
it found its way into
other projects later on.

00:02:11.730 --> 00:02:13.250
It was cool.

