WEBVTT
Kind: captions
Language: en

00:00:00.270 --> 00:00:02.900
So now that we've created our empty hash table, the next

00:00:02.900 --> 00:00:05.100
steps are to figure out how to do lookups as well

00:00:05.100 --> 00:00:08.630
as adds. Both lookups and adds depend on the same first

00:00:08.630 --> 00:00:10.800
step. We need to find the right bucket, so that's what

00:00:10.800 --> 00:00:13.890
we'll do next. So remember the idea for a hash table,

00:00:13.890 --> 00:00:17.400
so we have a list of buckets, each bucket is a

00:00:17.400 --> 00:00:21.710
list of entries, and each entry is a key, and the

00:00:21.710 --> 00:00:25.860
list of values. So regardless of whether we want to do lookups and

00:00:25.860 --> 00:00:29.200
added, and find the value associated with the word, or if we

00:00:29.200 --> 00:00:33.340
want to do add and add a new value associated with a word.

00:00:33.340 --> 00:00:35.760
The first thing we always have to do is find the right bucket.

00:00:35.760 --> 00:00:38.020
So if you find the right bucket if we're doing a lookup, the

00:00:38.020 --> 00:00:41.060
next thing we're going to do is need to look through all the entries

00:00:41.060 --> 00:00:44.260
in that bucket to find if there's one that matches the key word.

00:00:44.260 --> 00:00:46.950
If we're doing add, we also need to start by finding the right

00:00:46.950 --> 00:00:50.760
bucket. Then we're going to look through and see if that word already exists.

00:00:50.760 --> 00:00:53.740
If it doesn't exist, we can add a new word

00:00:53.740 --> 00:00:56.400
and we'll have a new entry, with that word and that

00:00:56.400 --> 00:00:59.170
value. So both of those depend on first being able to

00:00:59.170 --> 00:01:01.620
find the right bucket, so we'll do that once and be

00:01:01.620 --> 00:01:04.489
able to reuse that code in both lookup and add.

00:01:04.489 --> 00:01:07.350
So our goal is to define a procedure, and we'll call

00:01:07.350 --> 00:01:11.300
it hashtable_get_bucket, and it'll take two inputs. So it'll take a

00:01:11.300 --> 00:01:16.080
hashtable, and a keyword, and it will output the bucket where

00:01:16.080 --> 00:01:18.400
that keyword could occur. We don't know yet whether

00:01:18.400 --> 00:01:20.740
that keyword's actually in the table. It might be somewhere

00:01:20.740 --> 00:01:23.020
in that bucket. It might not. But the important

00:01:23.020 --> 00:01:26.870
thing that hashtable_get_bucket should do, is find the bucket. One

00:01:26.870 --> 00:01:28.840
function that will be useful for doing that is

00:01:28.840 --> 00:01:32.570
the hash_string procedure that you defined earlier. And hash_string takes

00:01:32.570 --> 00:01:36.150
two inputs. It takes a string, which is the

00:01:36.150 --> 00:01:41.150
keyword, and it took a size, the number of buckets,

00:01:41.150 --> 00:01:44.890
and it outputs the number which is the index

00:01:44.890 --> 00:01:46.980
of that bucket. There's a bit of a mismatch

00:01:46.980 --> 00:01:49.315
here that you'll have to think about to define

00:01:49.315 --> 00:01:53.610
hashtable_get_bucket. That hash_string, the input is the size, the

00:01:53.610 --> 00:01:57.010
number of buckets, it's a number. The two inputs

00:01:57.010 --> 00:02:00.520
to hashtable_get_bucket are just the hashtable and a keyword.

00:02:00.520 --> 00:02:02.200
So you need to also figure out how to

00:02:02.200 --> 00:02:06.420
get the size of the hashtable to pass into hash_string.

00:02:06.420 --> 00:02:09.288
And if you remember the structure of the hashtable, you

00:02:09.288 --> 00:02:11.550
should be able to figure out how to do that.

00:02:11.550 --> 00:02:14.902
Remember our hashtable is a list of buckets, so the

00:02:14.902 --> 00:02:18.870
value that we want to pass in to the hash_string is the

00:02:18.870 --> 00:02:21.960
size of that hashtable, the number of elements in the

00:02:21.960 --> 00:02:24.730
list of buckets, that is the hash table. So see if

00:02:24.730 --> 00:02:29.360
you can define hashtable_get_bucket, and as a hint, you can

00:02:29.360 --> 00:02:31.870
do the whole definition with a very small amount of code.

00:02:31.870 --> 00:02:33.760
It should only take one line to do this.

