WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:05.390
Time sensitive applications require quickly responding

00:00:05.390 --> 00:00:07.770
to an event. Think of playing a

00:00:07.770 --> 00:00:12.730
video game and shooting at a target. You want the instant that you shoot

00:00:12.730 --> 00:00:18.830
at the target for action to appear on the screen. Now, problem is there

00:00:18.830 --> 00:00:21.620
are three sources of latency for time

00:00:21.620 --> 00:00:25.600
sensitive events, in any typical general purpose

00:00:25.600 --> 00:00:29.410
operating system. The first source of latency

00:00:29.410 --> 00:00:31.980
is what is called the timer latency.

00:00:31.980 --> 00:00:35.520
That is coming because of the inaccuracy

00:00:35.520 --> 00:00:39.040
of the timing mechanism. For instance, the timer

00:00:39.040 --> 00:00:42.550
event went off at this point, but

00:00:42.550 --> 00:00:46.090
the timer interrupt actually happens only here.

00:00:46.090 --> 00:00:47.910
That is, this is the event that

00:00:47.910 --> 00:00:51.580
should have resulted in an interrupt, but because

00:00:51.580 --> 00:00:53.980
of the inaccuracy of the timer, there's a

00:00:53.980 --> 00:00:56.560
latency between the point at which an even

00:00:56.560 --> 00:00:59.070
happened, an external event. And the point at

00:00:59.070 --> 00:01:02.930
which the timer goes off indicating that external event.

00:01:02.930 --> 00:01:05.150
And this is primarily coming up due to

00:01:05.150 --> 00:01:09.570
the granularity of the timing mechanism that's available in

00:01:09.570 --> 00:01:12.810
general purpose operating systems. For instance, periodic timers

00:01:12.810 --> 00:01:16.970
tend to have a ten millisecond granularity in Linux

00:01:16.970 --> 00:01:22.640
operating system. So that's the first source of inaccuracy or

00:01:22.640 --> 00:01:27.370
latency for time sensitive applications. The second

00:01:27.370 --> 00:01:32.910
source of latency is what we call as the as the preemption latency.

00:01:32.910 --> 00:01:38.360
And this is because of the fact that the interupt could have happened when the

00:01:38.360 --> 00:01:42.560
kernel was in the middle of doing something from which it can not be preempted.

00:01:42.560 --> 00:01:46.210
For instance, when the kernel is modifying some critical

00:01:46.210 --> 00:01:48.950
data structure. In that case it may have turned off

00:01:48.950 --> 00:01:51.570
the interrupt and therefore even though the interrupt went off

00:01:51.570 --> 00:01:54.820
at this point the kernel cannot be preempted until this

00:01:54.820 --> 00:01:58.800
point. That may be the second source of latency

00:01:58.800 --> 00:02:01.710
or it could be that the kernel itself is in

00:02:01.710 --> 00:02:05.340
the middle of handling another higher priority interrupt. And in

00:02:05.340 --> 00:02:07.880
that case, this time interrupt is going to be delayed.

00:02:07.880 --> 00:02:10.000
So that the second source of latency

00:02:10.000 --> 00:02:13.680
for time sensitive applications running on commodity operating

00:02:13.680 --> 00:02:17.135
systems. Okay, finally the timer interrupt has been

00:02:17.135 --> 00:02:20.670
delivered to the system and now the scheduler

00:02:20.670 --> 00:02:24.000
can actually schedule the process that is

00:02:24.000 --> 00:02:26.550
waiting for this timer interrupt so that that

00:02:26.550 --> 00:02:29.460
application can take the appropriate action for this

00:02:29.460 --> 00:02:33.150
external interrupt. But wait, there is another high

00:02:33.150 --> 00:02:36.500
priority task that's already in the scheduler's

00:02:36.500 --> 00:02:40.500
queue and therefore the app that was waiting

00:02:40.500 --> 00:02:42.920
for this timer event cannot yet be

00:02:42.920 --> 00:02:46.592
scheduled because of this higher priority tasks that

00:02:46.592 --> 00:02:50.730
has dibs on the processor at this point of time. So this is the third

00:02:50.730 --> 00:02:53.530
source of latency, that is the scheduler latency.

00:02:53.530 --> 00:02:58.570
That is preventing this external event from being

00:02:58.570 --> 00:03:01.810
delivered to the application that is waiting

00:03:01.810 --> 00:03:05.210
for this particular event. Now finally the high

00:03:05.210 --> 00:03:11.750
priority app is done, and therefore now it is time for the app that is actually

00:03:11.750 --> 00:03:17.720
waiting for this event. So this is the point of activation of the Event app,

00:03:17.720 --> 00:03:23.670
that is, the app that is waiting for this timer event. So you can see that this

00:03:23.670 --> 00:03:30.220
is the distance TA to Th. The difference between TA and Th is the

00:03:30.220 --> 00:03:36.970
event to activation distance. The event happened here, but the app that can

00:03:36.970 --> 00:03:41.210
react to this event only gets scheduled at this point, and this is

00:03:41.210 --> 00:03:43.623
the latency that is coming in for

00:03:43.623 --> 00:03:48.540
time-sensitive applications between the actual event happening.

00:03:48.540 --> 00:03:52.210
And the activation of the app that has to

00:03:52.210 --> 00:03:55.870
deal with that particular event. For time sensitive applications

00:03:55.870 --> 00:03:59.010
to do well, it is extremely important that we

00:03:59.010 --> 00:04:03.740
shrink this distance between event happening, and event activation.

