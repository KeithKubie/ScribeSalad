WEBVTT
Kind: captions
Language: en

00:00:05.082 --> 00:00:06.810
VINCE WU: Good
morning, and welcome

00:00:06.810 --> 00:00:11.580
to the second day of Google
I/O. Thank you all, who

00:00:11.580 --> 00:00:13.200
made it here bright and early.

00:00:13.200 --> 00:00:15.960
And a big warm hello to
folks on the Livestream.

00:00:15.960 --> 00:00:18.900
This session is about Android
Things, the version of Android

00:00:18.900 --> 00:00:22.080
that was specifically designed
for IoT products embedded

00:00:22.080 --> 00:00:23.032
devices.

00:00:23.032 --> 00:00:24.990
My name is Vince, and I
lead product management

00:00:24.990 --> 00:00:27.090
for Android Things.

00:00:27.090 --> 00:00:30.840
Yesterday, you heard about the
incredible momentum on Android.

00:00:30.840 --> 00:00:32.450
Over the years, we've
extended Android

00:00:32.450 --> 00:00:33.900
to many different
types of devices

00:00:33.900 --> 00:00:36.030
beyond phones and tablets--

00:00:36.030 --> 00:00:39.035
wearables, TVs, auto.

00:00:39.035 --> 00:00:41.160
And last year we announced
a new version of Android

00:00:41.160 --> 00:00:44.130
called Android Things,
specifically designed

00:00:44.130 --> 00:00:46.922
for embedded devices
and IoT products.

00:00:46.922 --> 00:00:49.380
I know many of you have been
tracking our regular developer

00:00:49.380 --> 00:00:52.309
previews and are already
building great things.

00:00:52.309 --> 00:00:53.725
I love reading
about the projects.

00:00:53.725 --> 00:00:55.530
It's so awesome.

00:00:55.530 --> 00:00:58.020
For some of you,
this is entirely new.

00:00:58.020 --> 00:00:59.520
You're just getting
started and want

00:00:59.520 --> 00:01:02.530
to know what Android
Things can do for you.

00:01:02.530 --> 00:01:05.519
So let me just get started with
some of the obvious questions.

00:01:05.519 --> 00:01:07.500
What is Android Things for?

00:01:07.500 --> 00:01:11.032
What problems does it solve?

00:01:11.032 --> 00:01:12.740
People have been making
connected devices

00:01:12.740 --> 00:01:14.130
for many years.

00:01:14.130 --> 00:01:16.430
What's different now is
the profound revolution

00:01:16.430 --> 00:01:18.350
in machine learning.

00:01:18.350 --> 00:01:21.920
Powerful models and tools are
available to all developers,

00:01:21.920 --> 00:01:25.520
and there's ever-increasing
demand for smarter devices.

00:01:25.520 --> 00:01:28.760
Traditionally, your only option
when building smarter devices

00:01:28.760 --> 00:01:32.150
was to delegate some of
the serious processing

00:01:32.150 --> 00:01:33.650
to the cloud.

00:01:33.650 --> 00:01:35.960
Now, it's possible
to run much of it

00:01:35.960 --> 00:01:39.510
on device, which is useful
if you need low latency

00:01:39.510 --> 00:01:43.040
or if you're handling
sensitive content and so on.

00:01:43.040 --> 00:01:45.140
And this growing
area is exactly where

00:01:45.140 --> 00:01:47.030
Android Things is targeted.

00:01:47.030 --> 00:01:50.240
It is for devices that
need powerful on-device

00:01:50.240 --> 00:01:51.260
intelligence.

00:01:51.260 --> 00:01:53.510
When we look around at devices
that populate our homes

00:01:53.510 --> 00:01:57.380
and businesses, IoT is, of
course, very broad and diverse.

00:01:57.380 --> 00:02:00.230
So in a sense, the product
categories are all familiar.

00:02:00.230 --> 00:02:02.300
We all know these.

00:02:02.300 --> 00:02:04.940
It's just the user
expectations have gone up--

00:02:04.940 --> 00:02:06.200
way up.

00:02:06.200 --> 00:02:08.780
Let me just pick
on two use cases.

00:02:08.780 --> 00:02:11.570
At home, we increasingly
expect to be

00:02:11.570 --> 00:02:15.390
able to talk to our devices
and they'll know who we are.

00:02:15.390 --> 00:02:17.210
Another one is smart
building devices,

00:02:17.210 --> 00:02:20.900
such as cameras, that can detect
how many people are in a room

00:02:20.900 --> 00:02:23.390
and do something useful
with that, for example, talk

00:02:23.390 --> 00:02:25.370
to their HVAC system.

00:02:25.370 --> 00:02:28.080
We know users want
these kinds of devices.

00:02:28.080 --> 00:02:30.210
And we know we could build them.

00:02:30.210 --> 00:02:32.900
But of course,
building these devices

00:02:32.900 --> 00:02:35.660
is actually very hard,
especially maintaining them

00:02:35.660 --> 00:02:37.490
over time.

00:02:37.490 --> 00:02:39.775
It's actually very
expensive to do this.

00:02:39.775 --> 00:02:41.900
We know this at Google,
because we've been shipping

00:02:41.900 --> 00:02:43.670
these kinds of products.

00:02:43.670 --> 00:02:45.090
Well, what's so hard?

00:02:45.090 --> 00:02:48.840
Well, first off, we're talking
about an entire device, so

00:02:48.840 --> 00:02:50.180
a whole physical product.

00:02:50.180 --> 00:02:52.370
So we're responsible
for the entire software

00:02:52.370 --> 00:02:54.710
stack, from the bottom all
the way up to the product

00:02:54.710 --> 00:02:55.317
experience.

00:02:55.317 --> 00:02:56.900
Now, of course, the
product experience

00:02:56.900 --> 00:02:58.820
is where you'd
ideally be wanting

00:02:58.820 --> 00:03:00.830
to spend most of your
time because that's where

00:03:00.830 --> 00:03:03.960
users are interacting with.

00:03:03.960 --> 00:03:06.980
Below the product
experience, IoT devices

00:03:06.980 --> 00:03:09.530
are currently built using
many different flavors

00:03:09.530 --> 00:03:13.070
of roll-your-own
Linux or Android.

00:03:13.070 --> 00:03:15.290
Every device is different.

00:03:15.290 --> 00:03:19.460
So it's hard to expect
consistent and reliable APIs.

00:03:19.460 --> 00:03:21.710
When you go from
project to project,

00:03:21.710 --> 00:03:23.810
you want to reuse
what you've built.

00:03:23.810 --> 00:03:26.420
You want to get support
from a large community.

00:03:26.420 --> 00:03:28.970
At the same time, we're talking
about richer experiences

00:03:28.970 --> 00:03:30.260
with these devices.

00:03:30.260 --> 00:03:32.600
So obviously you need
to get your app working.

00:03:32.600 --> 00:03:34.580
Chances are you need
to get third-party apps

00:03:34.580 --> 00:03:36.680
and services working.

00:03:36.680 --> 00:03:39.965
Each time you need to figure
out basic building blocks,

00:03:39.965 --> 00:03:42.090
like a reliable [? setup ?]
flow from a smartphone,

00:03:42.090 --> 00:03:43.410
for instance.

00:03:43.410 --> 00:03:45.230
You could do all
yourself, but it just

00:03:45.230 --> 00:03:49.010
feels like extra
time and effort.

00:03:49.010 --> 00:03:52.330
Second, you need to get
down to the hardware.

00:03:52.330 --> 00:03:55.600
Building prototypes
with microprocessor SoCs

00:03:55.600 --> 00:03:58.000
have certainly gotten
easier over time.

00:03:58.000 --> 00:03:59.920
People use all sorts
of prototyping tools

00:03:59.920 --> 00:04:01.810
to get that done.

00:04:01.810 --> 00:04:04.450
But those don't get you through
to production, let alone

00:04:04.450 --> 00:04:06.440
commercial launch.

00:04:06.440 --> 00:04:08.700
We're talking about PCB
design and layout involving

00:04:08.700 --> 00:04:12.040
high-speed, highly
integrated components,

00:04:12.040 --> 00:04:15.480
SoC vendor relationships for
general support and bring up,

00:04:15.480 --> 00:04:18.690
component supply chain,
access to parts in low volume,

00:04:18.690 --> 00:04:19.925
and so on.

00:04:19.925 --> 00:04:21.550
These are all very
different skill sets

00:04:21.550 --> 00:04:23.550
you need to hire for your team.

00:04:23.550 --> 00:04:26.800
Again, prototyping solutions
get you off the ground,

00:04:26.800 --> 00:04:29.160
but that's it.

00:04:29.160 --> 00:04:32.310
Finally, while it's amazing
how much these devices can

00:04:32.310 --> 00:04:35.310
do on our behalf these days,
the flip side, of course,

00:04:35.310 --> 00:04:39.330
is that they have the keys
to our homes, our businesses,

00:04:39.330 --> 00:04:40.980
are back-end systems.

00:04:40.980 --> 00:04:43.500
Clearly there's more and more
to gain from attacking IoT

00:04:43.500 --> 00:04:45.000
devices.

00:04:45.000 --> 00:04:49.500
Perhaps less obvious is why it's
hard to provide the security.

00:04:49.500 --> 00:04:52.770
Well, it turns out it's
incredibly expensive

00:04:52.770 --> 00:04:55.170
to harden products
out of the gate

00:04:55.170 --> 00:04:59.520
and to keep them
updated over time.

00:04:59.520 --> 00:05:02.132
It involves a lot of back-end
infrastructure to do this.

00:05:02.132 --> 00:05:03.840
We know this at Google
because we've been

00:05:03.840 --> 00:05:06.390
doing this for many products.

00:05:06.390 --> 00:05:09.660
Meanwhile, there's immense cost
pressure from end consumers,

00:05:09.660 --> 00:05:10.470
of course.

00:05:10.470 --> 00:05:15.090
And it's hard to amortize
costs without large volume.

00:05:15.090 --> 00:05:18.290
So those are the issues
that our engineering teams

00:05:18.290 --> 00:05:20.000
and our business
teams focused on when

00:05:20.000 --> 00:05:22.010
we built Android Things.

00:05:22.010 --> 00:05:24.710
The thinking was we could take
care of all the challenges that

00:05:24.710 --> 00:05:26.900
make development expensive.

00:05:26.900 --> 00:05:29.140
We provide Android
Things free of charge.

00:05:29.140 --> 00:05:31.386
You have less to worry about.

00:05:31.386 --> 00:05:33.260
Our goal is to reduce
the barrier to building

00:05:33.260 --> 00:05:35.930
powerful, intelligent
edge devices

00:05:35.930 --> 00:05:38.240
and make it more
accessible to everyone.

00:05:38.240 --> 00:05:40.250
Now, let's take a look deeper.

00:05:40.250 --> 00:05:43.280
About building on reliable
and consistent APIs,

00:05:43.280 --> 00:05:45.620
Android Things is Android.

00:05:45.620 --> 00:05:48.800
As you'd expect, you can
rely on the same Android APIs

00:05:48.800 --> 00:05:52.640
and Google services as
when you build for phones.

00:05:52.640 --> 00:05:55.955
Familiar tools, such as
Android Studio and Android SDK,

00:05:55.955 --> 00:05:58.250
are available.

00:05:58.250 --> 00:06:00.950
You can build on Google
Play Services, Google Cloud

00:06:00.950 --> 00:06:04.370
Platform, Firebase, including
the most recently announced ML

00:06:04.370 --> 00:06:07.500
kit that you heard about
yesterday, and more.

00:06:07.500 --> 00:06:10.250
Of course, you are
building hardware.

00:06:10.250 --> 00:06:13.160
So it's also about component
providers, SoC vendors

00:06:13.160 --> 00:06:14.270
and so on.

00:06:14.270 --> 00:06:16.250
As a device maker,
usually you'll

00:06:16.250 --> 00:06:18.530
be spending a lot of your
time interacting directly

00:06:18.530 --> 00:06:20.950
to get to a working image.

00:06:20.950 --> 00:06:22.600
With Android Things,
we've already

00:06:22.600 --> 00:06:24.610
done the hard work for you.

00:06:24.610 --> 00:06:27.220
That means you have access to
hardware reference designs.

00:06:27.220 --> 00:06:30.610
It means the build support
package comes from Google.

00:06:30.610 --> 00:06:32.530
And you get a working
image right away.

00:06:34.810 --> 00:06:37.660
You can scale to production
because we've signed agreements

00:06:37.660 --> 00:06:40.090
with the SoC vendors
to guarantee support

00:06:40.090 --> 00:06:42.120
over the long term.

00:06:42.120 --> 00:06:45.000
Literally, our goal is if you
know how to build an Android

00:06:45.000 --> 00:06:47.730
app, you can now
prototype IoT products

00:06:47.730 --> 00:06:50.140
and take them all the
way to production.

00:06:50.140 --> 00:06:52.950
You don't have to be a hardware
engineer or a firmware engineer

00:06:52.950 --> 00:06:54.920
to do this.

00:06:54.920 --> 00:06:57.100
Finally on security,
our strategy

00:06:57.100 --> 00:07:00.490
is to have security features
built into the platform.

00:07:00.490 --> 00:07:02.890
OS hardening is on
by default, and you

00:07:02.890 --> 00:07:05.920
don't have to spend time
figuring it out yourself.

00:07:05.920 --> 00:07:08.900
Well, what about
fixes over time?

00:07:08.900 --> 00:07:12.770
Regular security patches
come regularly from Google.

00:07:12.770 --> 00:07:15.140
Google provides all the
back-end infrastructure for you

00:07:15.140 --> 00:07:16.430
to be in control.

00:07:16.430 --> 00:07:19.900
And you can decide
when those go out.

00:07:19.900 --> 00:07:21.430
Now let's go a bit deeper.

00:07:21.430 --> 00:07:24.790
How do all the pieces that I
just talked about fit together?

00:07:24.790 --> 00:07:27.760
Developers often ask me,
how is Android Things

00:07:27.760 --> 00:07:29.050
different from Android?

00:07:29.050 --> 00:07:30.335
How is it different from AOSP?

00:07:33.185 --> 00:07:35.250
I found that the
best way to describe

00:07:35.250 --> 00:07:38.390
Android Things is that it's
a fully managed solution

00:07:38.390 --> 00:07:41.320
beyond the AOSP model.

00:07:41.320 --> 00:07:44.380
At the lowest level, we
define turnkey hardware

00:07:44.380 --> 00:07:46.870
in partnership with
the silicon providers.

00:07:46.870 --> 00:07:50.500
This is in the form of a
system-on-module architecture.

00:07:50.500 --> 00:07:52.761
I'll talk a bit more
about that in a bit.

00:07:52.761 --> 00:07:54.260
But the way the
model works, though,

00:07:54.260 --> 00:07:55.990
is that we work
closely with the SoCs

00:07:55.990 --> 00:07:58.810
to land code into Google tree.

00:07:58.810 --> 00:08:01.120
Google's the one
hosting the BSPs.

00:08:01.120 --> 00:08:03.340
In fact, we have a
system-on-modules

00:08:03.340 --> 00:08:07.500
in our test labs hooked up
for continuous integration.

00:08:07.500 --> 00:08:10.560
Moving up to Android and
the framework layers,

00:08:10.560 --> 00:08:12.540
Android Things is Android.

00:08:12.540 --> 00:08:15.030
What we've done is we
took Android and we shrunk

00:08:15.030 --> 00:08:18.930
it down to around 50% of
the footprint of AOSP.

00:08:18.930 --> 00:08:21.180
Meaning it can run with
lower compute and storage

00:08:21.180 --> 00:08:22.890
requirements.

00:08:22.890 --> 00:08:24.680
Security features are built in.

00:08:24.680 --> 00:08:29.250
Meaning they're done for you,
and they're on by default.

00:08:29.250 --> 00:08:31.980
Up at the top is the app layer.

00:08:31.980 --> 00:08:35.309
We formalized the boundaries so
all the product-specific code

00:08:35.309 --> 00:08:36.330
lives there.

00:08:36.330 --> 00:08:38.280
We make sure the
Google services you

00:08:38.280 --> 00:08:41.820
might want to work with
work well out of the box.

00:08:41.820 --> 00:08:46.200
So your apps can rely on Google
Play Services, Firebase, Cloud

00:08:46.200 --> 00:08:49.720
Platform, Assistant, and more.

00:08:49.720 --> 00:08:53.340
Finally, what's pictured
on the left side

00:08:53.340 --> 00:08:56.151
is the management console.

00:08:56.151 --> 00:08:58.150
It's shown cutting across
everything from bottom

00:08:58.150 --> 00:09:00.130
to top because it's
where you control what

00:09:00.130 --> 00:09:03.070
exactly goes into your devices.

00:09:03.070 --> 00:09:04.670
It's where you get
access to the BSP

00:09:04.670 --> 00:09:08.430
that Google and the SoC
vendors are supporting.

00:09:08.430 --> 00:09:10.320
It's where you create
full product builds,

00:09:10.320 --> 00:09:13.580
with all of your apps
and services included.

00:09:13.580 --> 00:09:17.760
It's where you manage releases
and update channels over time.

00:09:17.760 --> 00:09:20.390
As you can see, that's what
I've described Android things

00:09:20.390 --> 00:09:22.310
as a fully managed solution.

00:09:22.310 --> 00:09:24.260
It gives you a portfolio
of reference hardware

00:09:24.260 --> 00:09:25.380
to choose from.

00:09:25.380 --> 00:09:28.170
It gives you Android with
security and key services

00:09:28.170 --> 00:09:29.434
working on top.

00:09:29.434 --> 00:09:31.100
It gives you a console
to configure what

00:09:31.100 --> 00:09:33.470
exactly goes into your devices.

00:09:33.470 --> 00:09:36.620
It's all of the ingredients
necessary to prototype

00:09:36.620 --> 00:09:38.435
and scale to production.

00:09:42.890 --> 00:09:45.590
On behalf of the entire
Android Things team,

00:09:45.590 --> 00:09:50.150
I'm super excited to share that
we are now generally available.

00:09:50.150 --> 00:09:53.450
Version 1.0 is the first
long-term, supported release.

00:09:53.450 --> 00:09:58.380
It came out just two days ago
on Monday, fresh off the press.

00:09:58.380 --> 00:10:01.260
Many of you have helped
us along the way.

00:10:01.260 --> 00:10:03.900
We've seen more than 100,000
downloads of our Android Things

00:10:03.900 --> 00:10:05.360
SDK.

00:10:05.360 --> 00:10:08.670
We've received feedback from
more than 10,000 developers.

00:10:08.670 --> 00:10:11.680
This is all critical to
get us to this point.

00:10:11.680 --> 00:10:13.410
Thank you so much.

00:10:13.410 --> 00:10:18.700
Now, what does version
1.0 mean for you?

00:10:18.700 --> 00:10:20.470
Most importantly, it
means Android Things

00:10:20.470 --> 00:10:24.410
is a stable base for you to
build commercial products.

00:10:24.410 --> 00:10:26.210
In fact, we've worked
with a few partners

00:10:26.210 --> 00:10:28.970
to put Android Things
through its paces and vet

00:10:28.970 --> 00:10:31.534
whether we could power
real shipping products.

00:10:31.534 --> 00:10:32.450
Let me show you a few.

00:10:35.330 --> 00:10:37.760
What you see here is our
first shipping product.

00:10:37.760 --> 00:10:40.340
And it really put our
program to the test.

00:10:40.340 --> 00:10:43.580
This is a smart speaker by
LG, and it landed on shelves

00:10:43.580 --> 00:10:45.410
last month.

00:10:45.410 --> 00:10:48.830
So story is LG wanted
to build a smart speaker

00:10:48.830 --> 00:10:51.650
with high-end audio and
go to market quickly.

00:10:51.650 --> 00:10:54.180
And they felt we'd
be a good fit.

00:10:54.180 --> 00:10:57.870
One of the first things was
to determine a good hardware

00:10:57.870 --> 00:10:59.220
reference design.

00:10:59.220 --> 00:11:00.900
The system-on-module
architecture

00:11:00.900 --> 00:11:05.070
that we talked about before is
in all the shipping products.

00:11:05.070 --> 00:11:07.666
From your point of
view, it's all done,

00:11:07.666 --> 00:11:08.790
so you can just pick it up.

00:11:08.790 --> 00:11:10.980
It will be an officially
support a platform,

00:11:10.980 --> 00:11:13.620
and you're good to go.

00:11:13.620 --> 00:11:16.300
Well, LG was also concerned
about ongoing security

00:11:16.300 --> 00:11:21.170
fixes and infrastructure to
send over-the-air updates.

00:11:21.170 --> 00:11:22.670
Bottom line is that
these guys want

00:11:22.670 --> 00:11:25.010
to be working on
amazing audio, not

00:11:25.010 --> 00:11:28.140
worrying about staffing up
a team to do security and do

00:11:28.140 --> 00:11:30.560
OS bring-up.

00:11:30.560 --> 00:11:32.060
This is a smart
speaker, so there's

00:11:32.060 --> 00:11:35.750
non-trivial audio processing
for audio casting and a Google

00:11:35.750 --> 00:11:37.282
Assistant.

00:11:37.282 --> 00:11:38.990
We make sure these
work well and are part

00:11:38.990 --> 00:11:41.710
of the full solution as well.

00:11:41.710 --> 00:11:44.420
There's more OEMs working
on smart speakers.

00:11:44.420 --> 00:11:46.886
And they'll be coming
out in retail soon.

00:11:49.802 --> 00:11:52.930
Soon after, partners
chose us for a new product

00:11:52.930 --> 00:11:55.570
category called smart displays.

00:11:55.570 --> 00:11:58.000
The idea is a visual
Google Assistant.

00:11:58.000 --> 00:12:00.070
There's deep
integration with photos,

00:12:00.070 --> 00:12:04.150
maps, video calling,
YouTube, and so on.

00:12:04.150 --> 00:12:09.470
What you see here are devices
from Lenovo, JBL, and LG.

00:12:09.470 --> 00:12:11.930
All these guys wanted
to move quickly,

00:12:11.930 --> 00:12:15.400
and we felt that we
could help them do that.

00:12:15.400 --> 00:12:19.270
At the time, we were already
working with SoC vendors

00:12:19.270 --> 00:12:21.130
on expanding our portfolio.

00:12:21.130 --> 00:12:23.530
And we were locked in on
a common system-on-module

00:12:23.530 --> 00:12:25.450
for all these products.

00:12:25.450 --> 00:12:28.480
In other words, if you look
under the hood, all of them

00:12:28.480 --> 00:12:30.100
are using the same
system-on-module,

00:12:30.100 --> 00:12:32.379
which is quite cool.

00:12:32.379 --> 00:12:33.920
Again, when you work
on your project,

00:12:33.920 --> 00:12:36.650
you can just skip all
of that upfront SoC work

00:12:36.650 --> 00:12:40.390
and just pick up the
supported design.

00:12:40.390 --> 00:12:43.400
The OEMs were also concerned
about ongoing updates,

00:12:43.400 --> 00:12:46.460
especially because this
is a new product category.

00:12:46.460 --> 00:12:48.160
They're expecting
frequent updates.

00:12:48.160 --> 00:12:49.618
And during development,
they wanted

00:12:49.618 --> 00:12:51.730
to partition folks
into different groups

00:12:51.730 --> 00:12:54.326
and A/B test the
user experience.

00:12:54.326 --> 00:12:56.200
This is where our console
was put to the test

00:12:56.200 --> 00:12:58.000
to manage all the
builds, release

00:12:58.000 --> 00:12:59.680
channels, and frequent updates.

00:13:02.280 --> 00:13:05.790
Now, of course, IoT
is broad and diverse.

00:13:05.790 --> 00:13:07.830
What's the most
exciting for me is

00:13:07.830 --> 00:13:10.410
seeing what everyone has been
building based on our developer

00:13:10.410 --> 00:13:11.610
previews.

00:13:11.610 --> 00:13:13.700
Here are two examples.

00:13:13.700 --> 00:13:15.800
The product on the right
is made by a company

00:13:15.800 --> 00:13:18.560
called Byteflies, a
wearable health startup

00:13:18.560 --> 00:13:20.440
based in Belgium.

00:13:20.440 --> 00:13:23.650
The hand is holding a sensor
that measures vital signs,

00:13:23.650 --> 00:13:27.620
and a docking station sends
data back to the cloud.

00:13:27.620 --> 00:13:29.620
Byteflies let us know
that Android Things helped

00:13:29.620 --> 00:13:32.770
turned their docking
station into a secure hub.

00:13:32.770 --> 00:13:35.020
They don't have to worry
about ongoing security fixes

00:13:35.020 --> 00:13:38.290
and how to update the device.

00:13:38.290 --> 00:13:41.740
The product on a left is made
by a company called Morigo

00:13:41.740 --> 00:13:43.630
based in Montreal.

00:13:43.630 --> 00:13:46.060
They build a network
of large photo displays

00:13:46.060 --> 00:13:48.367
running Android Things
and are connected

00:13:48.367 --> 00:13:50.200
to public photo booths
in downtown Montreal,

00:13:50.200 --> 00:13:53.100
which sounds really fun.

00:13:53.100 --> 00:13:55.560
Morigo wanted a solution that
could help them move quickly,

00:13:55.560 --> 00:13:57.780
and Android could
help them do that.

00:13:57.780 --> 00:14:01.500
If you're building a new product
powered by Android Things,

00:14:01.500 --> 00:14:04.622
we want to work with you too.

00:14:04.622 --> 00:14:06.514
We introduce a special
limited program

00:14:06.514 --> 00:14:07.930
to partner with
the Android Things

00:14:07.930 --> 00:14:10.750
team for technical
guidance and support.

00:14:10.750 --> 00:14:13.660
If your company is interested
in learning more, please let us

00:14:13.660 --> 00:14:14.530
know at the link.

00:14:18.680 --> 00:14:21.010
So now that I've shown
you some real products,

00:14:21.010 --> 00:14:22.780
let's switch gears
and go back to how

00:14:22.780 --> 00:14:25.840
all the pieces fit together,
starting from the bottom.

00:14:25.840 --> 00:14:27.970
We talked about the
hardware reference designs.

00:14:27.970 --> 00:14:30.070
We talked about the
system-on-modules.

00:14:30.070 --> 00:14:35.320
You might be wondering, what
do they actually look like?

00:14:35.320 --> 00:14:38.620
So on the right here
is a System-on-Module,

00:14:38.620 --> 00:14:40.420
SoM for short.

00:14:40.420 --> 00:14:43.950
This one is based
on a NXP IMX 7D.

00:14:43.950 --> 00:14:46.290
All the high-speed and
complicated-to-design

00:14:46.290 --> 00:14:49.180
electronics are in the
SoM, the key components,

00:14:49.180 --> 00:14:55.830
such as the SoC, memory,
flash, Wi-Fi, Bluetooth,

00:14:55.830 --> 00:14:58.260
The baseboard is what
you see on the left.

00:14:58.260 --> 00:14:59.730
This one shown here
is actually one

00:14:59.730 --> 00:15:01.710
of our development baseboards.

00:15:01.710 --> 00:15:04.620
Well, you can imagine designing
product-specific baseboards

00:15:04.620 --> 00:15:06.870
with just the right
set of connectors

00:15:06.870 --> 00:15:08.175
and plugging the SoM on top.

00:15:10.760 --> 00:15:13.580
The SoM is complicated
and quite costly

00:15:13.580 --> 00:15:15.830
to design if you were
to do it yourself.

00:15:15.830 --> 00:15:19.190
And we've done the
hard work for you.

00:15:19.190 --> 00:15:21.186
It would also be very
expensive at low volume.

00:15:21.186 --> 00:15:23.060
But the SoMs are what
everyone will be using,

00:15:23.060 --> 00:15:26.770
and that helps drive
up volume for everyone.

00:15:26.770 --> 00:15:29.710
The baseboards are much less
expensive to produce, even

00:15:29.710 --> 00:15:31.250
at lower quantities.

00:15:31.250 --> 00:15:34.780
The electronics are much
lower speed and less dense.

00:15:34.780 --> 00:15:36.910
What I've shown here
is also referred

00:15:36.910 --> 00:15:41.570
to as a physical SoM, because
the SoM is on its own board.

00:15:41.570 --> 00:15:43.940
You could also imagine
designing it in,

00:15:43.940 --> 00:15:46.370
so it's all on one single board.

00:15:46.370 --> 00:15:48.950
And we call that a virtual SoM.

00:15:48.950 --> 00:15:51.440
This would allow you to
save on costs at high volume

00:15:51.440 --> 00:15:55.040
or to better match x-y
dimensions for your product.

00:15:55.040 --> 00:15:57.770
Going back to the three smart
displays I showed earlier,

00:15:57.770 --> 00:15:59.330
they all use different tactics.

00:15:59.330 --> 00:16:01.010
Some used physical SoMs.

00:16:01.010 --> 00:16:05.400
And some design it in virtually.

00:16:05.400 --> 00:16:09.660
For each SoM, Google
proposed the Board Support

00:16:09.660 --> 00:16:12.510
Package, BSP for short.

00:16:12.510 --> 00:16:14.370
In other words, you
don't have to interact

00:16:14.370 --> 00:16:16.470
with the SoC vendors.

00:16:16.470 --> 00:16:18.780
There's a stable layer of
separation with the BSP

00:16:18.780 --> 00:16:20.740
that makes your code portable.

00:16:20.740 --> 00:16:22.922
You could imagine a starting
development on one SoM,

00:16:22.922 --> 00:16:25.380
then swapping over to another
at later stages of production

00:16:25.380 --> 00:16:28.650
if your design changes, without
having to change your code.

00:16:31.470 --> 00:16:35.480
Now, part of making the
SoM architecture viable

00:16:35.480 --> 00:16:37.920
is guaranteed support.

00:16:37.920 --> 00:16:40.260
Behind the scenes, we've
been working really hard

00:16:40.260 --> 00:16:43.890
with the SoC vendors to work out
the collaboration so you don't

00:16:43.890 --> 00:16:46.810
have to talk directly to them.

00:16:46.810 --> 00:16:50.050
We are now seeing SoMs that
are certified for production.

00:16:50.050 --> 00:16:55.710
The list includes hardware from
Mediatek, NXP, and Qualcomm.

00:16:55.710 --> 00:16:57.720
More specifically,
SoMs on his list

00:16:57.720 --> 00:17:01.260
have guaranteed long-term
support and all security

00:17:01.260 --> 00:17:04.380
features built in, making
it possible to bring

00:17:04.380 --> 00:17:09.060
prototypes and go all
the way to production.

00:17:09.060 --> 00:17:11.460
Hardware and references
designs for these

00:17:11.460 --> 00:17:15.839
SoMs be available in the
coming months so stay tuned.

00:17:15.839 --> 00:17:19.460
SoMs supported for development
is already available now.

00:17:19.460 --> 00:17:23.700
They include hardware
from RaspberryPi and NXP.

00:17:23.700 --> 00:17:26.609
Development hardware have a
large community of support

00:17:26.609 --> 00:17:28.950
and are readily available
in retail, even at unit

00:17:28.950 --> 00:17:31.920
quantities, usually for cheap.

00:17:31.920 --> 00:17:35.170
So that gets everyone
started right away.

00:17:35.170 --> 00:17:36.930
The beauty of the
Android Things model

00:17:36.930 --> 00:17:39.570
is that you can easily
swap over to SoMs

00:17:39.570 --> 00:17:43.320
certified for production
once you're ready.

00:17:43.320 --> 00:17:46.830
So everyone has been wondering
for the list of SoMs that

00:17:46.830 --> 00:17:50.010
are certified for production,
the ones on the left, how

00:17:50.010 --> 00:17:51.780
long is the support?

00:17:51.780 --> 00:17:52.880
How much does it cost?

00:17:56.100 --> 00:17:58.170
Each SoM certified
for production

00:17:58.170 --> 00:18:00.580
is supported by Google for
a minimum of three years

00:18:00.580 --> 00:18:03.660
from the time it was
first made available.

00:18:03.660 --> 00:18:06.600
What this means is you will
get regular security patches

00:18:06.600 --> 00:18:09.270
and stability fixes
from Google for you

00:18:09.270 --> 00:18:11.560
to push to your own devices.

00:18:11.560 --> 00:18:13.680
You can even set your
devices to auto update

00:18:13.680 --> 00:18:16.154
and not worry about it.

00:18:16.154 --> 00:18:17.820
In other words, you
get to fully harness

00:18:17.820 --> 00:18:20.820
the power of the
Android security team.

00:18:20.820 --> 00:18:24.100
Of course, you can push your
own updates to your devices

00:18:24.100 --> 00:18:27.682
anytime you want for the
entire product lifetime.

00:18:27.682 --> 00:18:29.570
Well, what about fees?

00:18:29.570 --> 00:18:31.930
There are no charges to
using Android Things.

00:18:31.930 --> 00:18:35.160
There are no license fees
for the OS or the management

00:18:35.160 --> 00:18:37.060
console.

00:18:37.060 --> 00:18:38.990
The API surface is stable.

00:18:38.990 --> 00:18:41.140
Meaning the length of
support is provided

00:18:41.140 --> 00:18:43.300
for each major version.

00:18:43.300 --> 00:18:48.100
This is why we refer to
1.0 as long-term support.

00:18:48.100 --> 00:18:50.950
We know moving to a new major
version can be disruptive,

00:18:50.950 --> 00:18:53.380
and it may not make sense
for many IoT products.

00:18:53.380 --> 00:18:55.630
So there's no need to do that.

00:18:55.630 --> 00:18:57.350
Let me show you in
a bit more detail.

00:18:59.960 --> 00:19:02.510
Each line on this chart
represents a major version

00:19:02.510 --> 00:19:06.920
of Android Things and, of
course, 2.0, 3.0 in the future.

00:19:06.920 --> 00:19:09.350
As I said, every
major version will

00:19:09.350 --> 00:19:11.660
have long-term support,
the minimum three

00:19:11.660 --> 00:19:14.120
years we talked about.

00:19:14.120 --> 00:19:17.420
These major versions do map to
underlying Android desserts,

00:19:17.420 --> 00:19:20.990
and we'll pick the right
points to intersect over time.

00:19:20.990 --> 00:19:23.770
The important point
is when 2.0 comes out,

00:19:23.770 --> 00:19:28.630
1.0 and 2.0 are
supported in parallel.

00:19:28.630 --> 00:19:32.450
The security patches and
stability fixes come regularly.

00:19:32.450 --> 00:19:36.480
And that's what each white
dot in the lines represent.

00:19:36.480 --> 00:19:38.400
We'll also have
minor feature updates

00:19:38.400 --> 00:19:40.030
on the latest major version.

00:19:40.030 --> 00:19:43.020
This is so we continue to
address community feedback

00:19:43.020 --> 00:19:44.760
in a timely manner.

00:19:44.760 --> 00:19:46.860
So we won't wait for
the next major version

00:19:46.860 --> 00:19:49.370
to push these out.

00:19:49.370 --> 00:19:51.770
In fact, in the
coming months, 1.1

00:19:51.770 --> 00:19:55.820
will come out with
improvements for you.

00:19:55.820 --> 00:19:58.700
One last note on SoMs,
obviously the work

00:19:58.700 --> 00:20:02.370
we do behind the scenes with
the SoC vendors is never ending.

00:20:02.370 --> 00:20:04.460
It's an ongoing process.

00:20:04.460 --> 00:20:07.539
We'll continue to expand
the SoM portfolio.

00:20:07.539 --> 00:20:09.080
You saw the vendors
that already have

00:20:09.080 --> 00:20:10.790
something listed officially.

00:20:10.790 --> 00:20:14.890
And we're deeply engaged with
others too, like Rockchip.

00:20:14.890 --> 00:20:18.950
The point is once we put a SoM
up as certified for production,

00:20:18.950 --> 00:20:20.350
it's a commitment.

00:20:20.350 --> 00:20:23.050
The ones you saw
all support 1.0.

00:20:23.050 --> 00:20:25.150
And when we eventually
add 2.0, we'll

00:20:25.150 --> 00:20:29.317
be explicit about
which SoMs support it.

00:20:29.317 --> 00:20:31.150
Now, we've been talking
about the next layer

00:20:31.150 --> 00:20:35.080
up already, since Google
hosts the board support

00:20:35.080 --> 00:20:37.030
package for every SoM.

00:20:37.030 --> 00:20:38.570
But what does it
actually look like?

00:20:38.570 --> 00:20:40.528
Let's go into that in a
little bit more detail.

00:20:43.150 --> 00:20:45.740
What you see here is a
simplified software stack

00:20:45.740 --> 00:20:48.620
for a traditional
Android mobile device.

00:20:48.620 --> 00:20:51.350
Going from bottom to top, the
kernel up to the [? HAL ?]

00:20:51.350 --> 00:20:56.190
layers, it's primarily focused
on enabling hardware support.

00:20:56.190 --> 00:20:58.850
The Android framework provides
a rich set of APIs and services

00:20:58.850 --> 00:21:00.830
for apps.

00:21:00.830 --> 00:21:03.410
And the applications on top
provide user-facing features,

00:21:03.410 --> 00:21:05.060
right?

00:21:05.060 --> 00:21:08.360
Now, in IoT devices, you can
imagine many of the included

00:21:08.360 --> 00:21:10.960
components not making sense.

00:21:10.960 --> 00:21:14.930
Or embedded devices are
usually single purpose.

00:21:14.930 --> 00:21:16.710
They may not have a screen.

00:21:16.710 --> 00:21:20.820
Users are not installing
apps and so on.

00:21:20.820 --> 00:21:23.760
So first, Android
Things removed most

00:21:23.760 --> 00:21:26.940
of the user-facing applications
and visual framework components

00:21:26.940 --> 00:21:28.410
that don't make sense.

00:21:28.410 --> 00:21:32.680
For example, there's no reason
for a text messaging app.

00:21:32.680 --> 00:21:34.900
This removes
unnecessary complexity

00:21:34.900 --> 00:21:39.090
and reduced the footprint
of the distribution.

00:21:39.090 --> 00:21:42.980
If you build a device with a
display, you have full control.

00:21:42.980 --> 00:21:45.840
There's no system UI
to get in the way.

00:21:45.840 --> 00:21:48.870
Now, with or without a display,
the UI toolkit portions

00:21:48.870 --> 00:21:51.480
of the framework remain
available to your apps.

00:21:51.480 --> 00:21:56.786
Activities are still the primary
component of an Android app.

00:21:56.786 --> 00:21:58.410
The framework delivers
all input events

00:21:58.410 --> 00:22:00.201
to the foreground
activity which has focus.

00:22:03.520 --> 00:22:06.850
Next, we formalized the
boundary between the system

00:22:06.850 --> 00:22:10.550
and the product-specific code
necessary for the device.

00:22:10.550 --> 00:22:12.970
All the product-specific
code is above the line

00:22:12.970 --> 00:22:14.900
in the app layer.

00:22:14.900 --> 00:22:16.900
Everything below
the line is provided

00:22:16.900 --> 00:22:20.230
by Google and our SoC partners.

00:22:20.230 --> 00:22:22.660
This way you don't have to
figure out how to put together

00:22:22.660 --> 00:22:23.906
a working image.

00:22:23.906 --> 00:22:26.990
Google can sign the
full image and guarantee

00:22:26.990 --> 00:22:32.000
automatic security updates
over the support time frame.

00:22:32.000 --> 00:22:36.500
You might be wondering how this
boundary can work in practice?

00:22:36.500 --> 00:22:40.660
Well, one crucial piece is the
Android Things support library.

00:22:40.660 --> 00:22:43.315
I'll touch upon the
API surface briefly.

00:22:46.546 --> 00:22:47.920
For example, you
may be wondering

00:22:47.920 --> 00:22:49.840
how to control hardware.

00:22:49.840 --> 00:22:53.200
The peripheral I/O API allows
apps to interface directly

00:22:53.200 --> 00:22:56.890
with low-level peripherals using
industry standard protocols,

00:22:56.890 --> 00:22:59.950
like I-squared-C and GPIO.

00:22:59.950 --> 00:23:03.460
User-space drivers allows
apps to inject hardware events

00:23:03.460 --> 00:23:06.610
into the Android framework.

00:23:06.610 --> 00:23:09.310
You might be wondering how to
call APIs that usually involve

00:23:09.310 --> 00:23:12.220
a dialog or a view to the user?

00:23:12.220 --> 00:23:15.890
These don't make sense
when displays are optional.

00:23:15.890 --> 00:23:19.010
So we've added APIs to control
settings, control device

00:23:19.010 --> 00:23:21.549
updates, and configure
local area connectivity,

00:23:21.549 --> 00:23:22.840
including Bluetooth and LoWPAN.

00:23:25.660 --> 00:23:28.711
Now I'd like to show you
the complete picture.

00:23:28.711 --> 00:23:30.710
We've already talked about
the portfolio of SoMs

00:23:30.710 --> 00:23:31.650
you can select from.

00:23:31.650 --> 00:23:33.140
And these come in at the bottom.

00:23:33.140 --> 00:23:35.610
There's actually two
more building blocks.

00:23:35.610 --> 00:23:38.090
The first is device
configuration,

00:23:38.090 --> 00:23:40.820
and the second is security.

00:23:40.820 --> 00:23:43.910
Let's start with
device configuration.

00:23:43.910 --> 00:23:46.940
It's the other crucial piece,
along with the Android Things

00:23:46.940 --> 00:23:49.790
support library, that helps
maintain the formal boundary

00:23:49.790 --> 00:23:52.050
that we just talked about.

00:23:52.050 --> 00:23:55.930
You see, SoMs can support
a wide variety of hardware.

00:23:55.930 --> 00:23:57.540
So in many cases,
the OS needs to know

00:23:57.540 --> 00:24:00.600
which hardware is actually
connected in order to properly

00:24:00.600 --> 00:24:04.380
configure those interfaces,
for instance, which

00:24:04.380 --> 00:24:06.270
audio devices are
connected where

00:24:06.270 --> 00:24:09.030
and their formats, pin muxing.

00:24:09.030 --> 00:24:10.860
We provide a
configuration system

00:24:10.860 --> 00:24:13.050
so OEMs can [? divine ?]
their connected hardware

00:24:13.050 --> 00:24:15.720
in the console, which
will customize the image

00:24:15.720 --> 00:24:18.970
correspondingly at build time.

00:24:18.970 --> 00:24:19.700
Cool.

00:24:19.700 --> 00:24:21.505
Let's talk a little
bit about security.

00:24:24.240 --> 00:24:26.900
Well, first off, the OS
hardening that we do on Android

00:24:26.900 --> 00:24:29.480
is enabled for Android Things.

00:24:29.480 --> 00:24:32.450
So these are things like
permissions, the application

00:24:32.450 --> 00:24:36.470
sandbox, mandatory access
control with SELinux,

00:24:36.470 --> 00:24:40.360
kernel Cisco
filtering, and so on.

00:24:40.360 --> 00:24:42.040
Images are signed.

00:24:42.040 --> 00:24:44.260
You don't need to run any
signing infrastructure

00:24:44.260 --> 00:24:45.694
yourself.

00:24:45.694 --> 00:24:47.110
Google provides
the infrastructure

00:24:47.110 --> 00:24:49.680
to build the full image for you.

00:24:49.680 --> 00:24:52.870
These partitions are
signed for security.

00:24:52.870 --> 00:24:56.290
Verified boot, which is fully
implemented four SoMs certified

00:24:56.290 --> 00:24:59.080
for production, makes sure
you're running a valid image

00:24:59.080 --> 00:25:01.010
at all times.

00:25:01.010 --> 00:25:02.910
Now, there's lots of
interesting scenarios

00:25:02.910 --> 00:25:03.990
that are handled for you.

00:25:03.990 --> 00:25:07.800
And I always get a kick
out of thinking about them.

00:25:07.800 --> 00:25:10.260
For example, what
about running an older

00:25:10.260 --> 00:25:14.230
image with a vulnerability
that has since been fixed?

00:25:14.230 --> 00:25:17.790
Rollback protection makes
sure this doesn't happen.

00:25:17.790 --> 00:25:20.210
Another one is for product keys.

00:25:20.210 --> 00:25:22.730
So images only run
where intended.

00:25:22.730 --> 00:25:27.530
You can insure only your product
images run on your devices.

00:25:27.530 --> 00:25:30.687
Finally, you don't need to
run any update infrastructure.

00:25:30.687 --> 00:25:32.395
Google takes care of
building and serving

00:25:32.395 --> 00:25:34.390
all updates, the same
infrastructure we

00:25:34.390 --> 00:25:35.485
use for our own products.

00:25:39.540 --> 00:25:41.670
Now we're moving
onto the app layer,

00:25:41.670 --> 00:25:44.280
where all of the
product-specific code lives.

00:25:44.280 --> 00:25:46.860
What does building an app
on Android Things look like?

00:25:49.710 --> 00:25:52.740
To get started, we want access
to the Android Things support

00:25:52.740 --> 00:25:54.730
library we just talked about.

00:25:54.730 --> 00:25:58.570
It's built into the supported
devices as a shared library.

00:25:58.570 --> 00:26:01.690
We're showing code snippets
from two files here.

00:26:01.690 --> 00:26:04.630
At the top is a snippet
of the build gradle file.

00:26:04.630 --> 00:26:09.210
You declare the SDK dependency
there, and it'll get pulled in.

00:26:09.210 --> 00:26:12.660
The bottom part is a snippet
of the Android manifest file.

00:26:12.660 --> 00:26:15.100
You notice we use the
user's library tag

00:26:15.100 --> 00:26:18.940
so our app can access the
device's shared library.

00:26:18.940 --> 00:26:20.950
Below that is applying
the home category

00:26:20.950 --> 00:26:23.050
to one of your activities.

00:26:23.050 --> 00:26:24.880
What this does is
that the system

00:26:24.880 --> 00:26:27.700
will launch this activity
automatically on boot

00:26:27.700 --> 00:26:30.580
and relaunch it if
the app terminates.

00:26:30.580 --> 00:26:32.290
This is, of course,
exactly the behavior

00:26:32.290 --> 00:26:35.550
you'd expect for
embedded devices.

00:26:35.550 --> 00:26:39.462
Now that we have this set up,
let's do something useful.

00:26:39.462 --> 00:26:41.800
The example here's very simple.

00:26:41.800 --> 00:26:43.300
It detects a button press.

00:26:43.300 --> 00:26:45.250
But it's a good
demonstration of how

00:26:45.250 --> 00:26:47.170
to interface directly
with peripherals

00:26:47.170 --> 00:26:50.940
using the peripheral I/O API.

00:26:50.940 --> 00:26:53.920
The code snippet at the top
is the Android manifest file.

00:26:53.920 --> 00:26:56.400
This is where we declare
the required permissions

00:26:56.400 --> 00:27:01.920
to use peripheral I/O. The code
snippet below is the activity.

00:27:01.920 --> 00:27:03.540
There we use the
peripheral I/O API

00:27:03.540 --> 00:27:06.540
to open a connection
to a GPIO pin, which is

00:27:06.540 --> 00:27:08.780
where the button is connected.

00:27:08.780 --> 00:27:13.650
We configured a GPIO pin as an
input and attach a callback.

00:27:13.650 --> 00:27:14.990
And that's pretty much it.

00:27:14.990 --> 00:27:17.170
Good to go.

00:27:17.170 --> 00:27:20.490
A similar workflow is used
for all of the peripheral I/O

00:27:20.490 --> 00:27:21.780
interfaces.

00:27:21.780 --> 00:27:23.760
So you can imagine
adding a few lines,

00:27:23.760 --> 00:27:26.480
and you can light up an LED.

00:27:26.480 --> 00:27:30.020
Of course, it's not
just about simple stuff.

00:27:30.020 --> 00:27:32.780
There's a wide variety
of peripherals out there.

00:27:32.780 --> 00:27:36.140
Your app could interact with
all kinds of sensors, actuators,

00:27:36.140 --> 00:27:37.160
and so on this way.

00:27:40.120 --> 00:27:42.610
We've expanded our
community hub this week

00:27:42.610 --> 00:27:45.160
as part of the
1.0 announcements.

00:27:45.160 --> 00:27:49.330
The site is
androidthings.withgoogle.com.

00:27:49.330 --> 00:27:52.780
It brings together all of the
information in one place--

00:27:52.780 --> 00:27:56.780
samples, documents, forum.

00:27:56.780 --> 00:27:58.610
Also, as you probably
guessed, much

00:27:58.610 --> 00:28:00.890
of the code we showed before
about driving hardware

00:28:00.890 --> 00:28:04.430
peripherals isn't
exactly product specific.

00:28:04.430 --> 00:28:06.110
You can get up and
running quickly

00:28:06.110 --> 00:28:09.990
with pre-built drivers from
our peripheral driver library.

00:28:09.990 --> 00:28:13.290
These drivers extract the
low-level communication details

00:28:13.290 --> 00:28:16.890
associated with many common
hardware peripherals.

00:28:16.890 --> 00:28:19.840
You can browse the driver
library at the community hub.

00:28:19.840 --> 00:28:23.940
And we're also now accepting
community contributions

00:28:23.940 --> 00:28:24.850
as well.

00:28:24.850 --> 00:28:27.390
So let's all make
this better together.

00:28:27.390 --> 00:28:30.560
Be sure to check it out.

00:28:30.560 --> 00:28:32.250
Well, where do you go from here?

00:28:32.250 --> 00:28:34.360
Well, you have full
access to the Android SDK

00:28:34.360 --> 00:28:37.030
and NDK when building apps.

00:28:37.030 --> 00:28:38.340
You can use Android Studio.

00:28:38.340 --> 00:28:40.500
Develop your apps in Kotlin.

00:28:40.500 --> 00:28:42.420
You can leverage
standard developer tools

00:28:42.420 --> 00:28:44.990
and third-party libraries.

00:28:44.990 --> 00:28:50.980
Many projects find Google
Play services, Firebase,

00:28:50.980 --> 00:28:54.200
Google Cloud Platform,
et cetera, very useful.

00:28:54.200 --> 00:28:57.570
In fact, you can create an
end-to-end demo very quickly.

00:28:57.570 --> 00:28:59.840
For instance, if you're
collecting sensor data,

00:28:59.840 --> 00:29:04.850
you can use Cloud IoT Core to
help you ingest data and do

00:29:04.850 --> 00:29:07.100
something with it in the cloud.

00:29:07.100 --> 00:29:10.100
If you're taking photos, the
Cloud Vision API, for example,

00:29:10.100 --> 00:29:12.140
can help you with
optic detection.

00:29:12.140 --> 00:29:13.490
Of course, there's a lot more.

00:29:13.490 --> 00:29:16.400
We have many samples in
a community site for you

00:29:16.400 --> 00:29:17.090
to check out.

00:29:19.650 --> 00:29:22.260
Let's say a bit more
about Google Play services

00:29:22.260 --> 00:29:24.870
because we've created an
optimized lighter-weight

00:29:24.870 --> 00:29:28.050
version of that
for Android Things.

00:29:28.050 --> 00:29:30.330
It's optional, so it
doesn't take up space

00:29:30.330 --> 00:29:32.290
if you don't need it.

00:29:32.290 --> 00:29:34.900
Many developers do find
it very useful though.

00:29:34.900 --> 00:29:37.120
You can literally
tick a checkbox

00:29:37.120 --> 00:29:40.760
and add it to your
build from the console.

00:29:40.760 --> 00:29:43.610
You can find the Firebase
APIs in there, which were

00:29:43.610 --> 00:29:45.782
used in many of our samples.

00:29:45.782 --> 00:29:47.240
For example, the
real-time database

00:29:47.240 --> 00:29:50.540
is very useful when
you sync device data.

00:29:50.540 --> 00:29:54.380
You can also use the new ML kit
to integrate Google's machine

00:29:54.380 --> 00:29:57.410
learning technology
into your app.

00:29:57.410 --> 00:30:00.190
There's, of course, a lot
more in Play Services,

00:30:00.190 --> 00:30:05.390
fused location APIs, Nearby
for setup, maps, and more.

00:30:08.270 --> 00:30:10.100
The final piece
to Android Things

00:30:10.100 --> 00:30:13.822
is a console for managing
what's running on your devices.

00:30:13.822 --> 00:30:16.280
It's shown vertically cutting
across everything from bottom

00:30:16.280 --> 00:30:19.520
to top because that's where
you manage all the builds

00:30:19.520 --> 00:30:22.040
and releases for
your entire device

00:30:22.040 --> 00:30:27.600
fleet at every stage of the
product development process.

00:30:27.600 --> 00:30:29.610
Let me explain.

00:30:29.610 --> 00:30:33.340
Here's a very simplified view
of the product development flow.

00:30:33.340 --> 00:30:35.590
Every product goes through
the prototyping phase where

00:30:35.590 --> 00:30:37.990
you just want to get
something working,

00:30:37.990 --> 00:30:40.330
then a series of hardware
validation manufacturing

00:30:40.330 --> 00:30:44.720
stages, and finally
commercial launch.

00:30:44.720 --> 00:30:48.560
At the beginning, you can pick
up one of the development SoMs,

00:30:48.560 --> 00:30:51.450
because that's the easiest
thing to do, and then later swap

00:30:51.450 --> 00:30:55.280
to one of the SoMs
certified for production.

00:30:55.280 --> 00:30:58.230
After you get the hardware,
you might be wondering, well,

00:30:58.230 --> 00:31:01.670
how do I assemble an image
and push it to the device?

00:31:04.430 --> 00:31:06.560
In the prototyping
phase, you probably

00:31:06.560 --> 00:31:11.120
just want quick access to a
generic image to get you going.

00:31:11.120 --> 00:31:13.580
You might only care
about one device.

00:31:13.580 --> 00:31:15.740
So you go to the
console and tell it

00:31:15.740 --> 00:31:17.490
which SoM you've chosen.

00:31:17.490 --> 00:31:19.010
And that's pretty much it.

00:31:19.010 --> 00:31:21.140
You can then flash
the supported image

00:31:21.140 --> 00:31:24.370
and sign all apps
to your device.

00:31:24.370 --> 00:31:26.860
As your product evolves,
you'll come back to the console

00:31:26.860 --> 00:31:29.860
to customize a lot more.

00:31:29.860 --> 00:31:33.250
For instance, you may want to
change the partition sizes.

00:31:33.250 --> 00:31:35.260
You may want to include
Google Play services

00:31:35.260 --> 00:31:37.260
because your apps need it.

00:31:37.260 --> 00:31:40.260
You may want to modify
the device configurations

00:31:40.260 --> 00:31:42.360
at build time based
on the peripherals

00:31:42.360 --> 00:31:44.190
that you're connecting.

00:31:44.190 --> 00:31:47.200
You may start caring
about a lot more devices.

00:31:47.200 --> 00:31:50.350
For the smart displays and
the smart speaker devices

00:31:50.350 --> 00:31:53.200
that we showed earlier,
the OEMs used the console

00:31:53.200 --> 00:31:55.180
to split devices into groups.

00:31:55.180 --> 00:31:58.990
So developers, QA,
early beta testers,

00:31:58.990 --> 00:32:00.827
they're on different groups.

00:32:00.827 --> 00:32:02.410
They all have different
builds and are

00:32:02.410 --> 00:32:03.618
on different update channels.

00:32:05.900 --> 00:32:08.560
All of this is configured
from the console.

00:32:08.560 --> 00:32:10.750
When you go to
production, you obviously

00:32:10.750 --> 00:32:13.510
need to assemble the--

00:32:13.510 --> 00:32:15.280
sorry, previous slide.

00:32:15.280 --> 00:32:17.710
When you go to
production, you obviously

00:32:17.710 --> 00:32:19.630
need to assemble the
entire factory image.

00:32:19.630 --> 00:32:21.970
That includes your
apps and services.

00:32:21.970 --> 00:32:26.390
You want to update your app
over the lifetime of the device.

00:32:26.390 --> 00:32:29.390
It's important to have control
over rollout, for example,

00:32:29.390 --> 00:32:32.700
roll back, if
something goes wrong,

00:32:32.700 --> 00:32:35.310
gradual percentage roll
out so that you can go slow

00:32:35.310 --> 00:32:38.651
and check that things are
going well, access to metrics

00:32:38.651 --> 00:32:41.150
so you can see that things are
going in the right direction.

00:32:41.150 --> 00:32:45.030
All of this is why
the console exists.

00:32:45.030 --> 00:32:47.040
The underlying
back-end infrastructure

00:32:47.040 --> 00:32:49.310
is the same as what Google
uses for our own products.

00:32:52.690 --> 00:32:56.190
So just finished explaining
how Android Things

00:32:56.190 --> 00:32:59.240
is a fully managed solution.

00:32:59.240 --> 00:33:02.420
We have a lot more to
show you at I/O. Come

00:33:02.420 --> 00:33:04.710
and see us at our sandbox dome.

00:33:04.710 --> 00:33:06.140
It's the giant
bright orange one.

00:33:06.140 --> 00:33:07.730
It's hard to miss.

00:33:07.730 --> 00:33:11.390
The entire dome is filled
with Android Things demos.

00:33:11.390 --> 00:33:14.040
You can see how real commercial
products evolve from prototype

00:33:14.040 --> 00:33:16.250
to production, the
smart displays.

00:33:16.250 --> 00:33:18.500
You can see them all there.

00:33:18.500 --> 00:33:21.900
We talked about devices
getting increasingly smarter.

00:33:21.900 --> 00:33:23.570
We have demos showing
machine learning

00:33:23.570 --> 00:33:28.250
ingesting real-time video so it
can recognize emotions, faces,

00:33:28.250 --> 00:33:30.530
handwriting, and so on.

00:33:30.530 --> 00:33:34.340
By the way, you notice Android
Things powering devices

00:33:34.340 --> 00:33:37.140
outside of the dome as well.

00:33:37.140 --> 00:33:38.940
They're powering
the survey boxes

00:33:38.940 --> 00:33:41.610
all around I/O for
instant feedback.

00:33:41.610 --> 00:33:44.610
There's a five-foot tall robot
roaming around somewhere.

00:33:44.610 --> 00:33:45.910
It's hard to miss that one--

00:33:45.910 --> 00:33:48.000
Android Things in there.

00:33:48.000 --> 00:33:52.010
If you like to code, come to
our code labs and get hands on.

00:33:52.010 --> 00:33:54.270
We have one showing how
to work with TensorFlow,

00:33:54.270 --> 00:33:57.310
Cloud IoT, how we made
the survey box, and more.

00:34:00.109 --> 00:34:01.650
There's eight more
sessions coming up

00:34:01.650 --> 00:34:05.290
today and tomorrow that go
deeper into specific topics.

00:34:05.290 --> 00:34:07.350
For example, the
session at 11:30

00:34:07.350 --> 00:34:09.630
today talks about how we
built the smart display

00:34:09.630 --> 00:34:14.936
product that journey all the way
from prototype to production.

00:34:14.936 --> 00:34:16.560
The last session we
have tomorrow talks

00:34:16.560 --> 00:34:18.510
about the console
in detail and how

00:34:18.510 --> 00:34:20.670
to manage your devices
at different stage

00:34:20.670 --> 00:34:22.050
of the development process.

00:34:24.960 --> 00:34:27.830
Finally, let's all
have some fun at I/O.

00:34:27.830 --> 00:34:33.155
Join our scavenger hunt
at the link g.co/iosearch.

00:34:33.155 --> 00:34:34.530
You might have
seen this already.

00:34:34.530 --> 00:34:36.719
There's very cool machine
learning enhanced flowers

00:34:36.719 --> 00:34:38.462
that you'll notice.

00:34:38.462 --> 00:34:40.920
Solve the puzzles, and you'll
get a free hardware developer

00:34:40.920 --> 00:34:41.419
kit.

00:34:44.360 --> 00:34:47.820
With that, let's all
go build some hardware.

00:34:47.820 --> 00:34:49.920
If you know how to
build an Android app,

00:34:49.920 --> 00:34:53.380
you now have a new super power.

00:34:53.380 --> 00:34:56.409
You can prototype IoT products
and bring them all the way

00:34:56.409 --> 00:34:58.690
to production with
Android Things.

00:34:58.690 --> 00:35:01.390
You don't have to be a hardware
engineer or firmware engineer

00:35:01.390 --> 00:35:03.070
to do this.

00:35:03.070 --> 00:35:05.840
Pick up a kit from
the scavenger hunt.

00:35:05.840 --> 00:35:08.560
Then head on to
androidthings.withgoogle.com

00:35:08.560 --> 00:35:10.390
to get started.

00:35:10.390 --> 00:35:11.410
This concludes our talk.

00:35:11.410 --> 00:35:12.550
My name's Vince.

00:35:12.550 --> 00:35:15.120
Thank you and good luck.

