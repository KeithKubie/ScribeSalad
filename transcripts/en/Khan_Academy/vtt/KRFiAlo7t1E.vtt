WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:04.090
What I want to do in this
video is familiarize ourselves

00:00:04.090 --> 00:00:06.880
with the notion of a sequence.

00:00:06.880 --> 00:00:09.410
And all a sequence is is
an ordered list of numbers.

00:00:09.410 --> 00:00:12.172
So for example, I could
have a finite sequence--

00:00:12.172 --> 00:00:14.380
that means I don't have an
infinite number of numbers

00:00:14.380 --> 00:00:17.600
in it-- where, let's say, I
start at 1 and I keep adding 3.

00:00:17.600 --> 00:00:19.246
So 1 plus 3 is 4.

00:00:19.246 --> 00:00:20.366
4 plus 3 is 7.

00:00:20.366 --> 00:00:21.990
7 plus 3 is 10.

00:00:21.990 --> 00:00:25.670
And let's say I only have these
four terms right over here.

00:00:25.670 --> 00:00:29.530
So this one we would
call a finite sequence.

00:00:29.530 --> 00:00:31.560
I could also have an
infinite sequence.

00:00:31.560 --> 00:00:33.360
So an example of an
infinite sequence--

00:00:33.360 --> 00:00:37.940
let's say we start at
3, and we keep adding 4.

00:00:37.940 --> 00:00:43.180
So we go to 3, to 7, to 11, 15.

00:00:43.180 --> 00:00:45.180
And you don't always have
to add the same thing.

00:00:45.180 --> 00:00:46.734
We'll explore fancier sequences.

00:00:46.734 --> 00:00:48.900
The sequences where you
keep adding the same amount,

00:00:48.900 --> 00:00:50.570
we call these
arithmetic sequences,

00:00:50.570 --> 00:00:54.514
which we will also
explore in more detail.

00:00:54.514 --> 00:00:55.930
But to show that
this is infinite,

00:00:55.930 --> 00:00:58.360
to show that we keep this
pattern going on and on and on,

00:00:58.360 --> 00:00:59.920
I'll put three dots.

00:00:59.920 --> 00:01:02.670
This just means we're going to
keep going on and on and on.

00:01:02.670 --> 00:01:07.679
So we could call this
an infinite sequence.

00:01:07.679 --> 00:01:09.470
Now, there's a bunch
of different notations

00:01:09.470 --> 00:01:11.670
that seem fancy for
denoting sequences.

00:01:11.670 --> 00:01:13.090
But this is all they refer to.

00:01:13.090 --> 00:01:15.300
But I want to make us
comfortable with how

00:01:15.300 --> 00:01:20.497
we can denote sequences and
also how we can define them.

00:01:20.497 --> 00:01:22.080
We could say that
this right over here

00:01:22.080 --> 00:01:31.740
is the sequence a sub k
for k is going from 1 to 4,

00:01:31.740 --> 00:01:34.100
is equal to this
right over here.

00:01:34.100 --> 00:01:35.690
So when we look
at it this way, we

00:01:35.690 --> 00:01:38.430
can look at each of these as
the terms in the sequence.

00:01:38.430 --> 00:01:40.790
And this right over here
would be the first term.

00:01:40.790 --> 00:01:42.600
We would call that a sub 1.

00:01:42.600 --> 00:01:44.520
This right over here
would be the second term.

00:01:44.520 --> 00:01:46.070
We'd call it a sub 2.

00:01:46.070 --> 00:01:48.880
I think you get the
picture-- a sub 3.

00:01:48.880 --> 00:01:51.130
This right over here is a sub 4.

00:01:51.130 --> 00:01:54.900
So this just says, all of the
a sub k's from k equals 1,

00:01:54.900 --> 00:01:58.520
from our first term, all
the way to the fourth term.

00:01:58.520 --> 00:02:02.620
Now, I could also define it
by not explicitly writing

00:02:02.620 --> 00:02:03.700
the sequence like this.

00:02:03.700 --> 00:02:06.530
I could essentially do
it defining our sequence

00:02:06.530 --> 00:02:09.740
as explicitly using kind of a
function notation or something

00:02:09.740 --> 00:02:11.540
close to function notation.

00:02:11.540 --> 00:02:14.690
So the same exact
sequence, I could define it

00:02:14.690 --> 00:02:23.880
as a sub k from k equals 1 to
4, with-- instead of explicitly

00:02:23.880 --> 00:02:27.160
writing the numbers
here, I could say a sub k

00:02:27.160 --> 00:02:29.737
is equal to some function of k.

00:02:29.737 --> 00:02:30.820
So let's see what happens.

00:02:30.820 --> 00:02:32.890
When k is 1, we get 1.

00:02:32.890 --> 00:02:36.370
When k is 2, we get 4.

00:02:36.370 --> 00:02:39.509
When k is 3, we get 7.

00:02:39.509 --> 00:02:40.050
So let's see.

00:02:40.050 --> 00:02:43.660
When k is 3, we added 3 twice.

00:02:43.660 --> 00:02:44.800
Let me make it clear.

00:02:44.800 --> 00:02:47.040
So this was a plus 3.

00:02:47.040 --> 00:02:49.890
This right over
here was a plus 3.

00:02:49.890 --> 00:02:52.390
This right over
here is a plus 3.

00:02:52.390 --> 00:02:55.690
So whatever k is,
we started at 1.

00:02:55.690 --> 00:02:59.520
And we added 3 one less
than the k term times.

00:02:59.520 --> 00:03:04.420
So we could say that this
is going to be equal to 1

00:03:04.420 --> 00:03:13.685
plus k minus 1
times 3, or maybe I

00:03:13.685 --> 00:03:15.780
should write 3 times k
minus 1-- same thing.

00:03:19.920 --> 00:03:21.530
And you can verify
that this works.

00:03:24.840 --> 00:03:31.070
If k is equal to 1, you're
going to get 1 minus 1 is 0.

00:03:31.070 --> 00:03:33.660
And so a sub 1 is going to be 1.

00:03:33.660 --> 00:03:37.200
If k is equal to 2, you're going
to have 1 plus 3, which is 4.

00:03:37.200 --> 00:03:41.310
If k is equal to 3, you
get 3 times 2 plus 1 is 7.

00:03:41.310 --> 00:03:42.980
So it works out.

00:03:42.980 --> 00:03:47.270
So this is one way to explicitly
define our sequence with kind

00:03:47.270 --> 00:03:48.360
of this function notation.

00:03:48.360 --> 00:03:50.193
I want to make it clear--
I have essentially

00:03:50.193 --> 00:03:51.200
defined a function here.

00:03:51.200 --> 00:03:53.370
If I wanted a more
traditional function notation,

00:03:53.370 --> 00:03:55.960
I could have written
a of k, where

00:03:55.960 --> 00:03:58.190
k is the term that
I care about. a

00:03:58.190 --> 00:04:02.610
of k is equal to 1
plus 3 times k minus 1.

00:04:02.610 --> 00:04:04.180
This is essentially
a function, where

00:04:04.180 --> 00:04:06.000
an allowable input,
the domain, is

00:04:06.000 --> 00:04:09.340
restricted to positive integers.

00:04:09.340 --> 00:04:12.310
Now, how would I denote this
business right over here?

00:04:12.310 --> 00:04:16.100
Well, I could say that
this is equal to--

00:04:16.100 --> 00:04:17.380
and people tend to use a.

00:04:17.380 --> 00:04:20.310
But I could use the notation
b sub k or anything else.

00:04:20.310 --> 00:04:23.110
But I'll do a again-- a sub k.

00:04:23.110 --> 00:04:26.140
And here, we're going
from our first term--

00:04:26.140 --> 00:04:30.170
so this is a sub 1,
this is a sub 2--

00:04:30.170 --> 00:04:33.180
all the way to infinity.

00:04:33.180 --> 00:04:36.040
Or we could define it-- if we
wanted to define it explicitly

00:04:36.040 --> 00:04:41.780
as a function-- we could write
this sequence as a sub k, where

00:04:41.780 --> 00:04:45.570
k starts at the first
term and goes to infinity,

00:04:45.570 --> 00:04:53.720
with a sub k is equaling--
so we're starting at 3.

00:04:53.720 --> 00:04:58.180
And we are adding
4 one less time.

00:04:58.180 --> 00:04:59.980
For the second term,
we added 4 once.

00:04:59.980 --> 00:05:02.100
For the third term,
we add 4 twice.

00:05:02.100 --> 00:05:05.800
For the fourth term,
we add 4 three times.

00:05:05.800 --> 00:05:09.280
So we're adding 4 one less
than the term that we're at.

00:05:09.280 --> 00:05:15.440
So it's going to be
plus 4 times k minus 1.

00:05:19.150 --> 00:05:20.670
So this is another
way of defining

00:05:20.670 --> 00:05:22.890
this infinite sequence.

00:05:22.890 --> 00:05:24.770
Now, in both of these
cases, I defined it

00:05:24.770 --> 00:05:26.690
as an explicit function.

00:05:26.690 --> 00:05:29.670
So this right over
here is explicit.

00:05:29.670 --> 00:05:31.590
That's not an attractive color.

00:05:31.590 --> 00:05:34.010
Let me write this in.

00:05:34.010 --> 00:05:36.724
This is an explicit function.

00:05:36.724 --> 00:05:38.140
And so you might
say, well, what's

00:05:38.140 --> 00:05:40.390
another way of defining
these functions?

00:05:40.390 --> 00:05:44.080
Well, we can also define
it, especially something

00:05:44.080 --> 00:05:47.140
like an arithmetic sequence, we
can also define it recursively.

00:05:47.140 --> 00:05:49.850
And I want to be clear-- not
every sequence can be defined

00:05:49.850 --> 00:05:51.580
as either an explicit
function like this,

00:05:51.580 --> 00:05:52.950
or as a recursive function.

00:05:52.950 --> 00:05:54.452
But many can,
including this, which

00:05:54.452 --> 00:05:55.910
is an arithmetic
sequence, where we

00:05:55.910 --> 00:05:59.180
keep adding the same
quantity over and over again.

00:05:59.180 --> 00:06:00.610
So how would we do that?

00:06:00.610 --> 00:06:02.730
Well, we could also--
another way of defining

00:06:02.730 --> 00:06:07.140
this first sequence,
we could say a sub k,

00:06:07.140 --> 00:06:11.390
starting at k equals
1 and going to 4 with.

00:06:11.390 --> 00:06:14.900
And when you define a
sequence recursively,

00:06:14.900 --> 00:06:19.870
you want to define what your
first term is, with a sub 1

00:06:19.870 --> 00:06:22.390
equaling 1.

00:06:22.390 --> 00:06:25.370
You can define every other term
in terms of the term before it.

00:06:25.370 --> 00:06:33.660
And so then we
could write a sub k

00:06:33.660 --> 00:06:37.810
is equal to the previous term.

00:06:37.810 --> 00:06:39.700
So this is a sub k minus 1.

00:06:39.700 --> 00:06:41.700
So a given term is equal
to the previous term.

00:06:41.700 --> 00:06:48.530
Let me make it clear-- this is
the previous term, plus-- in

00:06:48.530 --> 00:06:50.350
this case, we're
adding 3 every time.

00:06:52.791 --> 00:06:54.040
Now, how does this make sense?

00:06:54.040 --> 00:06:55.977
Well, we're defining
what a sub 1 is.

00:06:55.977 --> 00:06:58.310
And if someone says, well,
what happens when k equals 2?

00:06:58.310 --> 00:07:01.900
Well, they're saying, well, it's
going to be a sub 2 minus 1.

00:07:01.900 --> 00:07:04.010
So it's going to
be a sub 1 plus 3.

00:07:04.010 --> 00:07:06.300
Well, we know a sub 1 is 1.

00:07:06.300 --> 00:07:08.630
So it's going to be
1 plus 3, which is 4.

00:07:08.630 --> 00:07:10.620
Well, what about a sub 3?

00:07:10.620 --> 00:07:12.920
Well, it's going to be
a sub 2 plus 3. a sub 2,

00:07:12.920 --> 00:07:13.990
we just calculated as 4.

00:07:13.990 --> 00:07:14.490
You add 3.

00:07:14.490 --> 00:07:15.410
It's going to be 7.

00:07:15.410 --> 00:07:16.910
This is essentially
what we mentally

00:07:16.910 --> 00:07:19.326
did when I first wrote out the
sequence, when I said, hey,

00:07:19.326 --> 00:07:22.480
I'm just going to start with 1.

00:07:22.480 --> 00:07:25.930
And I'm just going to add 3
for every successive term.

00:07:25.930 --> 00:07:27.870
So how would we do this one?

00:07:27.870 --> 00:07:32.320
Well, once again, we could
write this as a sub k.

00:07:32.320 --> 00:07:34.510
Starting at k, the
first term, going

00:07:34.510 --> 00:07:38.790
to infinity with-- our
first term, a sub 1,

00:07:38.790 --> 00:07:40.450
is going to be 3, now.

00:07:40.450 --> 00:07:42.900
And every successive
term, a sub k,

00:07:42.900 --> 00:07:50.240
is going to be the previous
term, a sub k minus 1, plus 4.

00:07:50.240 --> 00:07:52.599
And once again, you start at 3.

00:07:52.599 --> 00:07:54.140
And then if you want
the second term,

00:07:54.140 --> 00:07:55.580
it's going to be the
first term plus 4.

00:07:55.580 --> 00:07:56.780
It's going to be 3 plus 4.

00:07:56.780 --> 00:07:57.420
You get to 7.

00:07:57.420 --> 00:07:58.950
And you keep adding 4.

00:07:58.950 --> 00:08:02.090
So both of these,
this right over here

00:08:02.090 --> 00:08:06.280
is a recursive definition.

00:08:06.280 --> 00:08:09.020
We started with
kind of a base case.

00:08:09.020 --> 00:08:11.780
And then every term is
defined in terms of the term

00:08:11.780 --> 00:08:13.750
before it or in terms
of the function itself,

00:08:13.750 --> 00:08:17.056
but the function for
a different term.

