WEBVTT
Kind: captions
Language: en

00:00:00.090 --> 00:00:02.790
We have already seen that a VLIW instruction

00:00:02.790 --> 00:00:06.386
really specifies several operations. Each of which operations would

00:00:06.386 --> 00:00:08.887
have taken a normal instruction in a normal super

00:00:08.887 --> 00:00:12.940
scalar processor. The instructions set for a VLIW processor

00:00:12.940 --> 00:00:15.600
typically has all the normal ISA opcodes, so

00:00:15.600 --> 00:00:18.890
each of the VLIW instructions can typically do whatever

00:00:18.890 --> 00:00:21.760
normal instructions would have been able to do in

00:00:21.760 --> 00:00:25.671
and out of normal processor. A typical VLIW processor

00:00:25.671 --> 00:00:28.582
will also have support for full predication, or

00:00:28.582 --> 00:00:32.380
at least very extensive predication support. This is

00:00:32.380 --> 00:00:35.250
because it relies on the compiler to expose

00:00:35.250 --> 00:00:38.470
parallelism. One of the ways the compiler does that

00:00:38.470 --> 00:00:41.380
is through scheduling instructions, so we really want

00:00:41.380 --> 00:00:44.210
the compiler to be able to predicate and thus

00:00:44.210 --> 00:00:48.220
expose more opportunities for instruction scheduling. A VLIW

00:00:48.220 --> 00:00:52.169
ISA also, typically, includes a lot of architectural registers.

00:00:53.180 --> 00:00:55.060
The reason for this is at that a lot

00:00:55.060 --> 00:00:59.350
of the scheduling optimizations require use of additional registers. We

00:00:59.350 --> 00:01:02.160
have already seen some examples of this in the

00:01:02.160 --> 00:01:05.400
compiler support for IOP lesson. What we have seen, that

00:01:05.400 --> 00:01:08.860
sometimes we have to put somethings in other registers,

00:01:08.860 --> 00:01:12.461
when we're rearranging instructions. So to help the compiler do

00:01:12.461 --> 00:01:15.877
instruction scheduling, we need more registers than usual and we

00:01:15.877 --> 00:01:18.317
really, really want the compiler to do a god job

00:01:18.317 --> 00:01:19.842
here so we will provide a lot of

00:01:19.842 --> 00:01:25.000
registers to it. Another frequently seen type of

00:01:25.000 --> 00:01:27.770
ISA support for compiler work are the branch

00:01:27.770 --> 00:01:30.840
hints, where the compiler can specify to the hardware

00:01:30.840 --> 00:01:33.806
what it thinks the branches will do. This

00:01:33.806 --> 00:01:36.790
helps the branch vectors. And we also often

00:01:36.790 --> 00:01:40.080
see some sort of compaction mechanism for VLIW

00:01:40.080 --> 00:01:43.750
instructions. For example, if we have a four operation

00:01:43.750 --> 00:01:47.080
instruction, and we have something like this, we do

00:01:47.080 --> 00:01:49.470
some operation and then the next operation needs to

00:01:49.470 --> 00:01:51.980
be here and thus we have to put NOPs

00:01:51.980 --> 00:01:57.002
in here. The actual VLIW instruction might include some sort

00:01:57.002 --> 00:02:00.434
of a stop date for every instruction, in which

00:02:00.434 --> 00:02:03.426
case we can put OP1 here, then mark this

00:02:03.426 --> 00:02:09.497
as a stop, and then we can put OP2, and OP3, like this, mark this as a stop, and

00:02:09.497 --> 00:02:13.113
even squeeze in maybe something else here. So,

00:02:13.113 --> 00:02:15.289
the idea is that instead of having a lot

00:02:15.289 --> 00:02:17.941
of NOPs in our instruction, now the processor

00:02:17.941 --> 00:02:21.273
fetches this instruction, checks for the stop bits, and

00:02:21.273 --> 00:02:25.557
in the first cycle does this, in the second cycle does up to the next stop and

00:02:25.557 --> 00:02:29.020
so on. So, this helps a lot in reducing

00:02:29.020 --> 00:02:31.921
the number of NOPs and thus, the code bloat

