WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.760
[GUITAR STRUMMING]

00:00:03.760 --> 00:00:05.400
CHRIS WILSON: Hey,
I'm Chris Wilson.

00:00:05.400 --> 00:00:07.960
Like me, many of you probably
have a guitar or two tucked

00:00:07.960 --> 00:00:10.090
away you like to
noodle around on.

00:00:10.090 --> 00:00:13.040
Or like me, you have a basement
full of synthesizer and studio

00:00:13.040 --> 00:00:13.800
gear.

00:00:13.800 --> 00:00:15.300
But for years now,
I've been getting

00:00:15.300 --> 00:00:18.090
more and more excited by
the powerful music software

00:00:18.090 --> 00:00:21.520
available for desktop computers,
and lately even mobile devices.

00:00:21.520 --> 00:00:24.490
Now, I can replicate vintage
synthesizer and processing

00:00:24.490 --> 00:00:27.260
hardware and software, which
lets me stop filling up

00:00:27.260 --> 00:00:29.690
my basement while draining
my checking account.

00:00:29.690 --> 00:00:32.560
Well I'm here to tell you that
all that exciting software can

00:00:32.560 --> 00:00:35.700
now come to the web platform
with an amazing open web

00:00:35.700 --> 00:00:38.850
platform API called
the Web Audio API.

00:00:38.850 --> 00:00:41.860
The Web Audio API was
designed for several purposes.

00:00:41.860 --> 00:00:45.760
First of all, it's a great API
for building sound for gaming.

00:00:45.760 --> 00:00:47.380
When we build
games, we need to be

00:00:47.380 --> 00:00:49.340
able to make pew
pew pew sounds right

00:00:49.340 --> 00:00:50.940
when our users hit the button.

00:00:50.940 --> 00:00:53.450
You need to hear that
massive explosion right

00:00:53.450 --> 00:00:56.740
as the screen lights
up, or whatever.

00:00:56.740 --> 00:00:59.560
Now this was hard to do with
the HTML5 audio element, which

00:00:59.560 --> 00:01:01.650
wasn't really designed
for precise timing,

00:01:01.650 --> 00:01:05.250
multiple simultaneous
sounds, or memory management.

00:01:05.250 --> 00:01:07.160
But the Web Audio
API also lets you

00:01:07.160 --> 00:01:10.130
crack into the world of
digital audio in a big way.

00:01:10.130 --> 00:01:11.690
You're in control
of the audio path

00:01:11.690 --> 00:01:14.935
itself, with powerful but
easy to use processing nodes

00:01:14.935 --> 00:01:19.330
to create effects like delay,
filtering, reverb, and more.

00:01:19.330 --> 00:01:21.980
Now the Web Audio API lets
you create rich, multiply

00:01:21.980 --> 00:01:24.590
layered effects by giving
you the primitives you need

00:01:24.590 --> 00:01:28.630
to do the job, like delay nodes,
gain control, filtering, even

00:01:28.630 --> 00:01:31.320
complex primitives
like convolution.

00:01:31.320 --> 00:01:33.797
The goal isn't to give you
all the complex final effects

00:01:33.797 --> 00:01:34.630
you could ever want.

00:01:34.630 --> 00:01:36.130
It's to give you
all the primitives

00:01:36.130 --> 00:01:39.270
you need to build
more complex effects.

00:01:39.270 --> 00:01:42.037
When I first started playing
around with the Web Audio API,

00:01:42.037 --> 00:01:44.370
I wanted to see just how far
I could take the processing

00:01:44.370 --> 00:01:45.340
system.

00:01:45.340 --> 00:01:49.360
So for a past Google I/O, I
wrote a vocoder application.

00:01:49.360 --> 00:01:52.120
Now vocoding is a
fairly complex process.

00:01:52.120 --> 00:01:55.330
It takes one sound source,
like me talking to you now,

00:01:55.330 --> 00:01:58.090
and it chops it up
by frequency bands.

00:01:58.090 --> 00:02:01.030
Next, it takes the volumes
in those bands over time

00:02:01.030 --> 00:02:03.570
and it applies them dynamically
to the same frequency

00:02:03.570 --> 00:02:07.520
bands in another sound,
usually a synthesizer sound.

00:02:07.520 --> 00:02:10.180
(SYNTHESIZED) Now you'll be
able to sound like a robot.

00:02:10.180 --> 00:02:12.225
You'll amaze your friends.

00:02:12.225 --> 00:02:16.040
You can even change your
voice like a singing robot.

00:02:16.040 --> 00:02:21.360
Do re mi fa so la ti do.

00:02:21.360 --> 00:02:24.580
You can also use Web Audio to
create other audio processing

00:02:24.580 --> 00:02:29.128
effects, like chorus effects,
or reverb, or pitch shifting.

00:02:29.128 --> 00:02:30.960
I'm talking to you, Kent.

00:02:30.960 --> 00:02:34.780
Or you can become Alvin,
Simon, or Theodore.

00:02:34.780 --> 00:02:37.082
Should I give the rest
of my talk like this?

00:02:37.082 --> 00:02:38.810
No, probably not.

00:02:38.810 --> 00:02:40.630
To implement each of
these effects though,

00:02:40.630 --> 00:02:42.280
I didn't write
JavaScript code that

00:02:42.280 --> 00:02:44.550
acts directly on
the sound buffers.

00:02:44.550 --> 00:02:46.860
I wrote code that combines
the processing nodes

00:02:46.860 --> 00:02:50.120
that Web Audio gives me,
and it does all the work.

00:02:50.120 --> 00:02:52.820
OK, so you can perform
real powerful processing

00:02:52.820 --> 00:02:53.500
with Web Audio.

00:02:53.500 --> 00:02:55.890
But where does that
sound source come from?

00:02:55.890 --> 00:02:57.840
Where do you get started?

00:02:57.840 --> 00:02:59.520
Well as I just
demonstrated, the sound

00:02:59.520 --> 00:03:02.780
can come from the user's
audio inputs via WebRTC's

00:03:02.780 --> 00:03:05.920
getUserMedia API, you
can hook the audio inputs

00:03:05.920 --> 00:03:07.160
of your computer.

00:03:07.160 --> 00:03:09.460
Sometimes, that's just the
microphone on your headset.

00:03:09.460 --> 00:03:11.650
But you can also
have a pro quality

00:03:11.650 --> 00:03:14.615
audio interface with a
killer axe plugged in.

00:03:14.615 --> 00:03:16.740
[GUITAR RIFF]

00:03:16.740 --> 00:03:20.530
Web audio can also hook any
media elements audio output,

00:03:20.530 --> 00:03:24.170
so you can grab the audio output
from video or audio elements.

00:03:24.170 --> 00:03:26.740
This can make it easy to do
just some basic processing,

00:03:26.740 --> 00:03:29.990
like gain control or filtering,
on an audio element that

00:03:29.990 --> 00:03:32.990
may be streaming
from the server.

00:03:32.990 --> 00:03:35.210
But sound sources can also
come from audio samples

00:03:35.210 --> 00:03:39.290
that you load through XML
HTTP request most likely.

00:03:39.290 --> 00:03:43.070
And you can use Web Audio to
decode from MP3, wav, or OGG

00:03:43.070 --> 00:03:45.140
format to a buffer.

00:03:45.140 --> 00:03:47.810
When you play those
buffers back in Web Audio,

00:03:47.810 --> 00:03:50.950
you can also change the
playback rate or detune them.

00:03:50.950 --> 00:03:53.680
This makes it easy to take a
simple sample, like this one

00:03:53.680 --> 00:03:55.710
I recorded of me
tapping a wine glass--

00:03:55.710 --> 00:03:57.210
[CHIME]

00:03:57.210 --> 00:04:00.050
--and turn it into a
playable musical voice.

00:04:00.050 --> 00:04:03.020
[MUSIC PLAYING]

00:04:03.020 --> 00:04:05.950
And finally, if you don't
want to use recorded sound,

00:04:05.950 --> 00:04:09.500
you can use Web Audio's natively
implementing oscillators.

00:04:09.500 --> 00:04:11.320
If you're an old
synthesizer nut like me,

00:04:11.320 --> 00:04:14.410
you'll know the oscillators
create a basic waveform,

00:04:14.410 --> 00:04:17.360
like a sine, square, saw
tooth, or triangle wave.

00:04:17.360 --> 00:04:20.029
This makes it easy to produce
basic audio blips, bleeps,

00:04:20.029 --> 00:04:21.500
and bloops.

00:04:21.500 --> 00:04:24.330
Of course, oscillators also
make it completely possible

00:04:24.330 --> 00:04:26.810
to build much richer
synthesizers without ever

00:04:26.810 --> 00:04:29.830
loading a sound file, like
with this digitally replicated

00:04:29.830 --> 00:04:31.690
analog synthesizer I built.

00:04:31.690 --> 00:04:35.190
[MUSIC PLAYING]

00:04:35.190 --> 00:04:37.400
I tried to dig up a
keytar to play this live,

00:04:37.400 --> 00:04:39.790
but I couldn't find one.

00:04:39.790 --> 00:04:42.720
Now, oscillators aren't just
for building synthesizers.

00:04:42.720 --> 00:04:45.110
They're also the key to
creating a lot of effects

00:04:45.110 --> 00:04:46.680
and complex sounds.

00:04:46.680 --> 00:04:49.580
Many effects, like the
very common chorus effect,

00:04:49.580 --> 00:04:51.560
use oscillators
in the background.

00:04:51.560 --> 00:04:54.880
Chorus is really just a delay
with a constantly varying delay

00:04:54.880 --> 00:04:55.640
time.

00:04:55.640 --> 00:04:58.820
That variation is caused
using an oscillator.

00:04:58.820 --> 00:05:01.780
This kind of control is
possible because of Web Audio's

00:05:01.780 --> 00:05:05.380
powerful, flexible audio
parameter and routing system.

00:05:05.380 --> 00:05:07.520
Most parameters can be
controlled and scheduled

00:05:07.520 --> 00:05:09.080
at the rate of the audio.

00:05:09.080 --> 00:05:11.260
This makes for some
amazing effects.

00:05:11.260 --> 00:05:13.910
For example, for those of
you who remember the '80s,

00:05:13.910 --> 00:05:17.900
you can build FM synthesizers
similar to Yamaha's DX7

00:05:17.900 --> 00:05:20.500
because you can modify
one oscillator's frequency

00:05:20.500 --> 00:05:23.490
with another oscillator
at an audible frequency,

00:05:23.490 --> 00:05:27.770
and that creates that classic
FM synth bell-like sound.

00:05:27.770 --> 00:05:30.740
Working with the Web Audio
system's routing and parameter

00:05:30.740 --> 00:05:33.049
schedule can be a little
daunting at first,

00:05:33.049 --> 00:05:34.590
but think of it like
a queue of notes

00:05:34.590 --> 00:05:36.420
that you need to keep full.

00:05:36.420 --> 00:05:38.640
It's sort of like when you
sight read sheet music.

00:05:38.640 --> 00:05:40.190
You need to look
ahead of where you

00:05:40.190 --> 00:05:42.800
are to keep your
playing fingers primed.

00:05:42.800 --> 00:05:45.360
The audio system is
busy under the hood

00:05:45.360 --> 00:05:47.145
generating and processing
the sound stream

00:05:47.145 --> 00:05:49.930
and keeping the sound
output happy by pushing

00:05:49.930 --> 00:05:52.055
a continuous stream
of audio bits at it.

00:05:52.055 --> 00:05:54.180
So really, the least you
can do is give it a little

00:05:54.180 --> 00:05:57.640
heads up for what it will
need to be playing soon.

00:05:57.640 --> 00:06:00.240
I wrote an article a while
ago about Web Audio scheduling

00:06:00.240 --> 00:06:02.940
for HTML5 Rocks they can
help you better understand

00:06:02.940 --> 00:06:03.900
this system.

00:06:03.900 --> 00:06:06.350
And it can help teach you
to create rock solid timing

00:06:06.350 --> 00:06:09.780
for musical applications, even
with JavaScript's not always

00:06:09.780 --> 00:06:12.850
rock solid event
delivery timing.

00:06:12.850 --> 00:06:14.600
This makes it so
you can easily build

00:06:14.600 --> 00:06:16.710
drum machine and sequencing
applications that

00:06:16.710 --> 00:06:19.640
keep a rock solid beat
while still responding

00:06:19.640 --> 00:06:23.130
in near real time to
parameter changes.

00:06:23.130 --> 00:06:25.920
One more critical piece to
building musical applications

00:06:25.920 --> 00:06:27.070
is control.

00:06:27.070 --> 00:06:29.000
In the music world,
nothing beats

00:06:29.000 --> 00:06:31.700
having a real physical
instrument to finally control

00:06:31.700 --> 00:06:32.670
your sound.

00:06:32.670 --> 00:06:35.010
So we've been building
support for a standard called

00:06:35.010 --> 00:06:40.510
the web MIDI API, that lets
music controllers like this,

00:06:40.510 --> 00:06:46.970
or this, or even this get
plugged straight into the web

00:06:46.970 --> 00:06:49.884
platform, so you can use them
for direct control of your web

00:06:49.884 --> 00:06:50.425
applications.

00:06:55.490 --> 00:06:58.480
This lets me have direct
physical immediate control

00:06:58.480 --> 00:07:01.210
over these great
audio capabilities.

00:07:01.210 --> 00:07:04.190
Now, the Web Audio API is
available on Chrome, Firefox,

00:07:04.190 --> 00:07:05.520
and Safari today.

00:07:05.520 --> 00:07:08.890
And Internet Explorer recently
began development as well.

00:07:08.890 --> 00:07:11.270
But finally, I want to leave
you with one mind blowing

00:07:11.270 --> 00:07:11.817
revelation.

00:07:11.817 --> 00:07:13.650
All of these things
I've been talking about,

00:07:13.650 --> 00:07:16.860
all of the incredible
power of the Web Audio API,

00:07:16.860 --> 00:07:19.680
all of this works on the
mobile web as well with

00:07:19.680 --> 00:07:21.270
modern mobile browsers.

00:07:21.270 --> 00:07:23.220
iOS Safari and
Chrome for Android

00:07:23.220 --> 00:07:25.520
both implement
the Web Audio API.

00:07:25.520 --> 00:07:27.420
In fact, Chrome for
Android even has

00:07:27.420 --> 00:07:30.250
an experimental
implementation of web MIDI,

00:07:30.250 --> 00:07:32.630
so you can build amazing
web music applications

00:07:32.630 --> 00:07:35.569
and take them with you
wherever the web goes.

00:07:35.569 --> 00:07:37.110
So I hope I've
inspired you with some

00:07:37.110 --> 00:07:39.443
of the things you can do with
the Web Audio and web MIDI

00:07:39.443 --> 00:07:40.150
APIs.

00:07:40.150 --> 00:07:42.835
Let's get out there
and make the web rock.

