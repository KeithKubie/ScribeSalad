WEBVTT
Kind: captions
Language: en

00:00:08.457 --> 00:00:09.290
VICTOR: Hi everyone.

00:00:09.290 --> 00:00:10.490
I'm Victor.

00:00:10.490 --> 00:00:12.290
Thanks for having us here.

00:00:12.290 --> 00:00:18.010
Thanks to HTML5 for arranging
this wonderful meetup.

00:00:18.010 --> 00:00:21.070
I work for Goo technologies,
based in Stockholm, Sweden.

00:00:21.070 --> 00:00:22.840
And with me today,
as Peter said,

00:00:22.840 --> 00:00:26.650
is another Peter, from Kaazing,
based here in California.

00:00:26.650 --> 00:00:28.640
And as a colleague
of mine put it,

00:00:28.640 --> 00:00:32.970
WebGL is very good at solving a
very specific computer science

00:00:32.970 --> 00:00:34.180
problem of today.

00:00:34.180 --> 00:00:36.230
And that problem is
to get the highest

00:00:36.230 --> 00:00:39.465
amount of likes
per line of code.

00:00:39.465 --> 00:00:41.590
The measurement to keep
track of the next few years

00:00:41.590 --> 00:00:43.710
will be LPL, Likes Per Line.

00:00:43.710 --> 00:00:47.980
And we've seen, as we've seen
in the previous talks, that

00:00:47.980 --> 00:00:50.260
for example, Chrome
experiments, collecting

00:00:50.260 --> 00:00:56.000
a lot of really cool hacks
of WebGL wizardry and WebGL

00:00:56.000 --> 00:00:59.070
examples from people that
know this really well.

00:00:59.070 --> 00:01:02.820
But the question now is how do
we get this into more hands?

00:01:02.820 --> 00:01:06.380
How do we get WebGL into the
hands of all the creators

00:01:06.380 --> 00:01:07.780
that are out there?

00:01:07.780 --> 00:01:10.560
And this, of course,
can be graphics wizards

00:01:10.560 --> 00:01:12.780
and game developers and hackers.

00:01:12.780 --> 00:01:17.140
But it can also be artists,
architects, teachers,

00:01:17.140 --> 00:01:20.200
advertisers, interface
designers, and so on.

00:01:20.200 --> 00:01:24.140
How do we give them
the power of WebGL?

00:01:24.140 --> 00:01:27.480
And the answer to that question
is, we build the pipelines,

00:01:27.480 --> 00:01:31.030
and we design workflows.

00:01:31.030 --> 00:01:34.230
Because not everyone
dreams about spending

00:01:34.230 --> 00:01:36.610
all of their Friday nights
with shader debugging.

00:01:36.610 --> 00:01:38.860
I know it's really hard to
imagine those people exist,

00:01:38.860 --> 00:01:41.390
but they do.

00:01:41.390 --> 00:01:43.590
So the first step, as
we've already seen,

00:01:43.590 --> 00:01:46.210
also is to get a
3D engine going.

00:01:46.210 --> 00:01:49.290
It takes care of all
the low level WebGL

00:01:49.290 --> 00:01:51.640
stuff that we don't
want to do every time.

00:01:51.640 --> 00:01:54.100
It gives us a nice
API to play with.

00:01:54.100 --> 00:01:56.690
And one thing that I think is
very important when we do this,

00:01:56.690 --> 00:02:00.810
is that we try to use open web
standards as much as possible.

00:02:00.810 --> 00:02:05.080
In this case, it means
nothing but JavaScript HTML5

00:02:05.080 --> 00:02:06.730
and of course, WebGL.

00:02:06.730 --> 00:02:09.240
Because what happens then
is that, a lot of people

00:02:09.240 --> 00:02:12.000
know JavaScript, and
suddenly they now

00:02:12.000 --> 00:02:15.270
have tools to also know 3D.

00:02:15.270 --> 00:02:18.470
And it also means that you don't
have any plug-ins and downloads

00:02:18.470 --> 00:02:23.530
necessary to share
your work later.

00:02:23.530 --> 00:02:25.040
I want to show you
some more demos.

00:02:25.040 --> 00:02:27.220
So that's kind of why
we are here, right?

00:02:27.220 --> 00:02:31.930
So this first demo can show
you that not only can you

00:02:31.930 --> 00:02:36.130
render cool 3D stuff, you can
also integrate other things

00:02:36.130 --> 00:02:37.650
in this, like,
for example, video

00:02:37.650 --> 00:02:40.910
in this case, once you decide
to use all these open standards.

00:02:44.220 --> 00:02:46.860
The other demo I want
to show is this one,

00:02:46.860 --> 00:02:50.320
is something that
we've-- let's see.

00:02:50.320 --> 00:02:56.897
So many sliders-- I need
more resolution, Peter.

00:02:56.897 --> 00:02:57.855
Where's the resolution?

00:03:03.345 --> 00:03:05.470
So now we see the slider,
and I can click that one,

00:03:05.470 --> 00:03:06.240
sorry about that.

00:03:06.240 --> 00:03:07.870
There we go.

00:03:07.870 --> 00:03:11.060
This is a demo of pretty much
a full-fledged flight simulator

00:03:11.060 --> 00:03:13.930
of a really old
Swedish fighter plane.

00:03:13.930 --> 00:03:16.180
Those exist, actually.

00:03:16.180 --> 00:03:16.880
It's a thing.

00:03:16.880 --> 00:03:18.610
I did not make that up.

00:03:18.610 --> 00:03:22.790
This screencast is
recorded in Chrome,

00:03:22.790 --> 00:03:24.980
and it's something that we
have developed internally

00:03:24.980 --> 00:03:27.309
while we are building
our Goo engine.

00:03:27.309 --> 00:03:29.600
Because it turns out it's
not easy to build a pipeline,

00:03:29.600 --> 00:03:31.350
and it's really hard
to define a workflow,

00:03:31.350 --> 00:03:35.990
and you need people to tell you
how they want it to be done.

00:03:35.990 --> 00:03:37.810
So this is what can
be done of course,

00:03:37.810 --> 00:03:39.870
and it's really useful
to have people in-house

00:03:39.870 --> 00:03:40.911
to do that kind of stuff.

00:03:46.700 --> 00:03:47.580
So that's great.

00:03:47.580 --> 00:03:52.460
Now we have a couple
of different 3D engines

00:03:52.460 --> 00:03:54.510
in the open web standards
that we can use.

00:03:54.510 --> 00:03:58.160
But what do we do about the
people that don't want to code,

00:03:58.160 --> 00:04:00.650
or don't know how to code?

00:04:00.650 --> 00:04:02.790
Well the answer is again,
we build a pipeline.

00:04:02.790 --> 00:04:03.980
We build more things.

00:04:03.980 --> 00:04:06.310
We build a pipeline
that can handle things.

00:04:06.310 --> 00:04:09.470
So if you have a model of a
really old Swedish fighter

00:04:09.470 --> 00:04:11.820
plane, and you want
to get this online,

00:04:11.820 --> 00:04:12.910
you need a way to do that.

00:04:12.910 --> 00:04:15.730
And you need a way
to do things visually

00:04:15.730 --> 00:04:18.070
without necessarily
writing code all the time

00:04:18.070 --> 00:04:19.032
to move things around.

00:04:19.032 --> 00:04:20.490
And then, of course,
you want to be

00:04:20.490 --> 00:04:23.740
able to share it with as
many users as possible,

00:04:23.740 --> 00:04:26.290
to get as many
likes as possible.

00:04:26.290 --> 00:04:27.670
That's the whole point.

00:04:27.670 --> 00:04:30.280
So I'd like to show
you a tool that

00:04:30.280 --> 00:04:33.854
does try to solve
part of this puzzle.

00:04:33.854 --> 00:04:35.520
And this tool will
be called Goo Create.

00:04:35.520 --> 00:04:37.270
It looks like this.

00:04:37.270 --> 00:04:42.880
And this part here to the
right is the 3D canvas,

00:04:42.880 --> 00:04:46.590
where the 3D engine will put
all the stuff and render that.

00:04:46.590 --> 00:04:48.650
The interface that you
can see to the left

00:04:48.650 --> 00:04:52.360
here is built using a very,
very, very large amount

00:04:52.360 --> 00:04:53.620
of Angular.

00:04:53.620 --> 00:04:56.920
And behind all of this, there's
a Python back-end running.

00:04:56.920 --> 00:05:00.970
And the back-end takes care
of exporting and importing

00:05:00.970 --> 00:05:04.610
models into a format that
the engine understands,

00:05:04.610 --> 00:05:06.880
but it also fills the
very important part

00:05:06.880 --> 00:05:09.340
of managing users and projects.

00:05:09.340 --> 00:05:11.010
Because in a
pipeline, of course,

00:05:11.010 --> 00:05:13.090
you want a place
to do your things,

00:05:13.090 --> 00:05:16.850
you want one place to
store all your work.

00:05:16.850 --> 00:05:18.980
So the way this works
is, say that you

00:05:18.980 --> 00:05:22.380
have a 3D model
that someone built.

00:05:22.380 --> 00:05:24.920
In this case,
saved in a COLLADA,

00:05:24.920 --> 00:05:27.460
a large FBX file format.

00:05:27.460 --> 00:05:29.240
And what you can do
here is you simply,

00:05:29.240 --> 00:05:32.400
if we can get all the windows
to see at the same time,

00:05:32.400 --> 00:05:36.000
you can drag and drop
this onto the canvas,

00:05:36.000 --> 00:05:42.390
and once the back-end has
converted this to a format

00:05:42.390 --> 00:05:46.620
that the engine understands, we
can start to interact with it.

00:05:46.620 --> 00:05:47.410
So there we go.

00:05:47.410 --> 00:05:49.760
Now we have this 3D
model here, and I

00:05:49.760 --> 00:05:52.040
can start interacting with it.

00:05:52.040 --> 00:05:54.910
It looks kind of
creepy right now,

00:05:54.910 --> 00:05:57.380
but luckily the
designers thought of that

00:05:57.380 --> 00:06:01.470
and put some materials
and textures onto this.

00:06:01.470 --> 00:06:04.640
So clothing, for example,
what we can do here now

00:06:04.640 --> 00:06:08.240
is do some more
dragging and dropping,

00:06:08.240 --> 00:06:11.370
because I happen to have
textures in the standard PNG

00:06:11.370 --> 00:06:12.239
format here.

00:06:12.239 --> 00:06:13.280
So this was the clothing.

00:06:13.280 --> 00:06:18.720
So let's just do this so you
can see what happens here.

00:06:18.720 --> 00:06:20.762
Drag and drop that
onto the model,

00:06:20.762 --> 00:06:29.130
and then we can do the
same thing for the hair,

00:06:29.130 --> 00:06:31.000
and for the skin, as well.

00:06:36.920 --> 00:06:37.420
There we go.

00:06:37.420 --> 00:06:39.740
And that looks a
little better, right?

00:06:39.740 --> 00:06:43.290
And this interface lets
us interact with it

00:06:43.290 --> 00:06:46.850
and add things like sounds and
cameras and lights and so on.

00:06:46.850 --> 00:06:49.400
And this model happens
to have an animation,

00:06:49.400 --> 00:06:53.100
so if I press play here,
we can watch it and see it

00:06:53.100 --> 00:06:57.320
in real time without
writing any code.

00:06:57.320 --> 00:07:00.360
So let's try to add light, for
example, and see what happens.

00:07:00.360 --> 00:07:03.020
Add light here, and we can
start moving that around,

00:07:03.020 --> 00:07:08.100
set some parameters, and see
the scene change in real time,

00:07:08.100 --> 00:07:09.490
fully interactively.

00:07:09.490 --> 00:07:10.620
It's all in the browser.

00:07:10.620 --> 00:07:14.190
It's not using any plug-ins
or any downloads like that.

00:07:14.190 --> 00:07:15.970
And let's go to
my favorite panel,

00:07:15.970 --> 00:07:17.340
and it's the post effects panel.

00:07:17.340 --> 00:07:19.960
It's very good for likes,
very good for likes.

00:07:19.960 --> 00:07:24.680
So if we want to add some glow
to this-- that's a bit much.

00:07:24.680 --> 00:07:30.260
Maybe tone down a little
bit-- or some grain,

00:07:30.260 --> 00:07:34.311
we can add some movie
vignetting, et cetera,

00:07:34.311 --> 00:07:34.810
et cetera.

00:07:34.810 --> 00:07:36.314
You get the point.

00:07:36.314 --> 00:07:37.730
And once we're
done with the scene

00:07:37.730 --> 00:07:41.040
now, thanks to that we
have all these awesome web

00:07:41.040 --> 00:07:44.820
standards to play with, we
can share our work very easily

00:07:44.820 --> 00:07:47.120
by just a basic
clicking a button,

00:07:47.120 --> 00:07:49.010
bundling everything
up together, including

00:07:49.010 --> 00:07:52.840
the engine and the data format,
and push this to our website.

00:07:52.840 --> 00:07:57.220
And now if you have a decent
WebGL compatible browser

00:07:57.220 --> 00:07:59.870
on your tablet or your
phone or your computer,

00:07:59.870 --> 00:08:02.440
on your refrigerator or
your washing machine,

00:08:02.440 --> 00:08:05.870
insert into this web site.

00:08:05.870 --> 00:08:08.210
And look at this
right now, actually.

00:08:08.210 --> 00:08:13.030
I'll give you a TinyURL
version of this in a minute.

00:08:13.030 --> 00:08:15.630
And of course, if you want to
code, you can do that as well.

00:08:15.630 --> 00:08:17.980
You can export this into
a JavaScript template,

00:08:17.980 --> 00:08:20.100
and add to your own
code and then keep

00:08:20.100 --> 00:08:24.680
working on that, because
we like to code, right?

00:08:24.680 --> 00:08:29.110
Now, if you want to try
this out, you can do that.

00:08:29.110 --> 00:08:31.670
You can go to that TinyURL,
and you'll see the same link.

00:08:31.670 --> 00:08:33.341
Or you can sign up
for the beta, it's

00:08:33.341 --> 00:08:35.299
free right now if you
want to try the tool out.

00:08:38.070 --> 00:08:39.309
So what happens now?

00:08:39.309 --> 00:08:40.150
What's next?

00:08:40.150 --> 00:08:41.530
We have all these things.

00:08:41.530 --> 00:08:44.460
I can take my Swedish
fighter jet model

00:08:44.460 --> 00:08:46.870
and put it on the
internet, but we

00:08:46.870 --> 00:08:49.980
need to think about what
happens in the future.

00:08:49.980 --> 00:08:52.630
And I want to talk a little
bit about the funnel.

00:08:52.630 --> 00:08:54.530
It's a kind of pipeline, right?

00:08:54.530 --> 00:09:00.500
You take a lot of input, and
you get a very defined output.

00:09:00.500 --> 00:09:04.160
So here's my invention,
it's the double funnel.

00:09:04.160 --> 00:09:06.750
Probably the worst
invention ever made,

00:09:06.750 --> 00:09:09.000
if you would ever
use it in real life.

00:09:09.000 --> 00:09:10.990
It's really hard to get
venture capital for it,

00:09:10.990 --> 00:09:13.414
but if you want to talk
later, we can do that.

00:09:13.414 --> 00:09:14.830
But it illustrates
the point here.

00:09:14.830 --> 00:09:17.810
We want to take a wide array
of inputs from different people

00:09:17.810 --> 00:09:19.800
in different formats
for different purposes,

00:09:19.800 --> 00:09:23.180
use the tools that we
have, and then push it out

00:09:23.180 --> 00:09:28.020
to different distribution
channels, cooperation ways.

00:09:28.020 --> 00:09:29.950
We want to push these
to different games,

00:09:29.950 --> 00:09:32.310
to apps, to programs,
whatever, you name it.

00:09:32.310 --> 00:09:34.160
So the double funnel.

00:09:34.160 --> 00:09:35.850
It's the future, promise.

00:09:39.000 --> 00:09:40.330
Demo time again, of course.

00:09:40.330 --> 00:09:40.980
We like demos.

00:09:40.980 --> 00:09:45.550
I want to show you a little
bit more complete product built

00:09:45.550 --> 00:09:48.010
on this Goo engine.

00:09:48.010 --> 00:09:50.510
This is the same guy
that we saw earlier.

00:09:50.510 --> 00:09:54.620
And this one, I can
make him row around here

00:09:54.620 --> 00:09:58.880
by pressing the standard
keyboard control.

00:09:58.880 --> 00:10:00.490
I can turn him
around, and so forth.

00:10:00.490 --> 00:10:03.150
It's all done
interactively in real time.

00:10:03.150 --> 00:10:06.310
And a mouse and a
keyboard is fine,

00:10:06.310 --> 00:10:09.191
but if we want to kick it up a
few notches, Peter, what do we

00:10:09.191 --> 00:10:09.690
do then?

00:10:18.470 --> 00:10:19.840
PETER: That's excellent, great.

00:10:19.840 --> 00:10:21.200
Thank you, Victor.

00:10:21.200 --> 00:10:21.950
This is awesome.

00:10:21.950 --> 00:10:25.720
So what we've seen is that
you can add extra layers

00:10:25.720 --> 00:10:28.530
and tooling on top of
WebGL, and by doing so,

00:10:28.530 --> 00:10:30.440
you can make it
accessible to those

00:10:30.440 --> 00:10:32.260
who are not necessarily coding.

00:10:32.260 --> 00:10:34.730
So what I wanted to
discuss a little bit

00:10:34.730 --> 00:10:38.540
is how we can use related
HTML5 technologies

00:10:38.540 --> 00:10:40.360
to improve the WebGL experience.

00:10:40.360 --> 00:10:42.882
Specifically, the area
that we are focusing on,

00:10:42.882 --> 00:10:45.090
and I've been focusing on
in the last couple of years

00:10:45.090 --> 00:10:46.780
is real time web
communications, and how

00:10:46.780 --> 00:10:48.600
you can improve this experience.

00:10:48.600 --> 00:10:50.500
So what I've done
here is I pulled up

00:10:50.500 --> 00:10:53.050
a remote control on my browser.

00:10:53.050 --> 00:10:56.464
The remote control on my
phone is running in Safari

00:10:56.464 --> 00:10:57.880
without having
installed anything.

00:10:57.880 --> 00:11:00.210
I have a URL that I went to.

00:11:00.210 --> 00:11:05.130
And by simply tapping the
buttons here on my phone,

00:11:05.130 --> 00:11:07.990
I am sending messages to
the application that's

00:11:07.990 --> 00:11:11.160
running here on the desktop.

00:11:11.160 --> 00:11:13.760
So what is happening
here behind the scenes,

00:11:13.760 --> 00:11:18.030
my phone is on the
AT&amp;T LTE network,

00:11:18.030 --> 00:11:22.040
and it has a means to send
a very low latency, very

00:11:22.040 --> 00:11:25.600
small messages, to
my PC over here.

00:11:25.600 --> 00:11:27.450
So let's take a very
quick look at how

00:11:27.450 --> 00:11:30.840
we can achieve this
kind of experience.

00:11:30.840 --> 00:11:36.140
Let me do a little bit
of [INAUDIBLE] here.

00:11:36.140 --> 00:11:39.240
So I have my desktop
app pulled up

00:11:39.240 --> 00:11:42.940
that is a web browser on
the top, and on the bottom,

00:11:42.940 --> 00:11:46.500
we see my Safari browser.

00:11:46.500 --> 00:11:50.820
Both of these HTML5
apps are connecting

00:11:50.820 --> 00:11:52.760
to a WebSocket server.

00:11:52.760 --> 00:11:54.960
The WebSocket server
has the ability

00:11:54.960 --> 00:11:57.360
to receive and send messages.

00:11:57.360 --> 00:12:01.880
So very much-- thank you-- very
much like in the world of HTTP,

00:12:01.880 --> 00:12:05.790
you do need a WebSocket server
for WebSocket communication.

00:12:05.790 --> 00:12:09.540
The fundamental difference
between the REST-based world,

00:12:09.540 --> 00:12:11.530
and the WebSocket-based
world, is

00:12:11.530 --> 00:12:13.820
that you have the
ability to keep

00:12:13.820 --> 00:12:17.700
this connection open between
your client and the server,

00:12:17.700 --> 00:12:20.540
and send these messages
with extremely low overhead,

00:12:20.540 --> 00:12:22.790
back and forth
between the server.

00:12:22.790 --> 00:12:26.540
So my desktop application is
not sitting there and polling

00:12:26.540 --> 00:12:28.431
the server, is there
a new message for me?

00:12:28.431 --> 00:12:29.680
Is there a new message for me?

00:12:29.680 --> 00:12:31.410
It's just sitting there idle.

00:12:31.410 --> 00:12:34.730
And whenever I press a
button here on my phone,

00:12:34.730 --> 00:12:38.380
the WebSocket server passes
that message to the application

00:12:38.380 --> 00:12:43.530
and-- let me close
this-- and it allows

00:12:43.530 --> 00:12:47.130
us to navigate on the screen.

00:12:47.130 --> 00:12:50.660
So a few words about this
communication technique.

00:12:50.660 --> 00:12:54.950
Originally, it was designed
to bring the same power

00:12:54.950 --> 00:12:57.250
to web applications that
we have in the world

00:12:57.250 --> 00:13:00.070
of any connected application
in the TCP world.

00:13:00.070 --> 00:13:03.380
So now you can say that
whatever app there is out there,

00:13:03.380 --> 00:13:07.010
whatever connected app is out
there in the world of TCP, now

00:13:07.010 --> 00:13:08.639
we can do that over the web.

00:13:08.639 --> 00:13:10.180
And this gives us
an incredible power

00:13:10.180 --> 00:13:14.650
to improve our WebGL and
non-WebGL applications.

00:13:14.650 --> 00:13:16.380
So we have this
permanent connection,

00:13:16.380 --> 00:13:19.110
and that allows us to
build these events driven

00:13:19.110 --> 00:13:22.760
applications, which is a
major shift from having

00:13:22.760 --> 00:13:25.410
REST-oriented request
response kind of applications,

00:13:25.410 --> 00:13:28.110
where the client is requesting
information from the server.

00:13:28.110 --> 00:13:31.110
Now you have the ability to
send these messages freely back

00:13:31.110 --> 00:13:33.790
and forth.

00:13:33.790 --> 00:13:36.110
When you're building
a network application,

00:13:36.110 --> 00:13:39.340
you are not going against
a low-level network

00:13:39.340 --> 00:13:40.580
API or a protocol.

00:13:40.580 --> 00:13:42.580
If you are building an
email application or chat

00:13:42.580 --> 00:13:44.120
application, there's
a good chance

00:13:44.120 --> 00:13:47.270
that you're using something
like IMAP or SMTP for email

00:13:47.270 --> 00:13:50.400
or XMPP Java for
your email client.

00:13:50.400 --> 00:13:53.370
WebSocket, as the
standard was designed

00:13:53.370 --> 00:13:56.180
to support these higher
level, richer protocols.

00:13:56.180 --> 00:13:59.600
So in our case, you can build
very easy pub/sub experiences,

00:13:59.600 --> 00:14:03.140
pub/sub APIs, that allow
you to build these apps very

00:14:03.140 --> 00:14:05.200
quickly and very easily.

00:14:05.200 --> 00:14:08.350
Not only that, WebSocket
was not designed

00:14:08.350 --> 00:14:11.310
to be there exclusively
for web browsers.

00:14:11.310 --> 00:14:14.270
It was designed to be
agnostic to the client.

00:14:14.270 --> 00:14:16.250
So you can build native
mobile applications,

00:14:16.250 --> 00:14:19.370
you can build Android and
iOS applications, natively.

00:14:19.370 --> 00:14:21.740
Not only that, you can
build desktop applications.

00:14:21.740 --> 00:14:26.420
You can have a dot.net, a flash,
or a Java application that

00:14:26.420 --> 00:14:30.580
can have this kind of real
time communication going

00:14:30.580 --> 00:14:31.290
all over the web.

00:14:31.290 --> 00:14:34.340
So again, remember,
I had a browser

00:14:34.340 --> 00:14:36.190
based app running
here on my phone.

00:14:36.190 --> 00:14:39.210
I was connecting to
the network over LTE.

00:14:39.210 --> 00:14:42.200
I press the button
here, and that message

00:14:42.200 --> 00:14:43.890
was sent to the
WebSocket server,

00:14:43.890 --> 00:14:45.910
and it bounced back
here to my laptop.

00:14:45.910 --> 00:14:49.130
That WebSocket server that
I was communicating with

00:14:49.130 --> 00:14:52.700
is in the east coast of the
US, 3,000 miles away from here.

00:14:52.700 --> 00:14:55.270
So it had to cross the
continent back and forth

00:14:55.270 --> 00:14:58.130
to get this data here across.

00:14:58.130 --> 00:15:00.610
OK.

00:15:00.610 --> 00:15:06.450
Now I wanted to show
an example of how

00:15:06.450 --> 00:15:08.705
this can be elevated
even further.

00:15:12.250 --> 00:15:15.660
Everybody brought their
awesome 3D designs,

00:15:15.660 --> 00:15:22.160
and awesome 3D models, and
I decided to bring mine.

00:15:22.160 --> 00:15:25.250
So here I have my 3D model.

00:15:25.250 --> 00:15:26.720
Just look at the textures here.

00:15:26.720 --> 00:15:29.340
Look at the reflections
on the design.

00:15:29.340 --> 00:15:32.290
It's pretty impressive.

00:15:32.290 --> 00:15:33.440
So what is this?

00:15:33.440 --> 00:15:37.010
We went out to Toys
R Us, and we bought

00:15:37.010 --> 00:15:39.890
a radio-controlled truck.

00:15:39.890 --> 00:15:42.850
And after driving it around
a little bit in the office,

00:15:42.850 --> 00:15:45.650
we said that maybe
we can do it better.

00:15:45.650 --> 00:15:49.000
So we ripped out all the
radio control functionality,

00:15:49.000 --> 00:15:53.210
and we glued a credit
card sized little computer

00:15:53.210 --> 00:15:55.770
onto the back of the truck.

00:15:55.770 --> 00:16:00.900
And what this does,
is it has USB ports.

00:16:00.900 --> 00:16:02.900
You can attach a
little WiFi card.

00:16:02.900 --> 00:16:04.210
It has an ethernet port.

00:16:04.210 --> 00:16:09.170
It has an SD card that you can
put the operating system on.

00:16:09.170 --> 00:16:11.670
But most importantly,
it has the ability

00:16:11.670 --> 00:16:14.440
to control external electronics.

00:16:14.440 --> 00:16:17.430
It has a notion of a
general purpose input/output

00:16:17.430 --> 00:16:20.870
port that allows you to
control, let's say, a car.

00:16:20.870 --> 00:16:23.630
You can drive it
around, in our case.

00:16:23.630 --> 00:16:26.040
We have three pairs
of these adapters,

00:16:26.040 --> 00:16:29.530
and I'm going to attempt to
show that to you in a minute.

00:16:29.530 --> 00:16:34.000
Now I could drive it
around the same way

00:16:34.000 --> 00:16:38.400
I was controlling the
leap boy on the screen,

00:16:38.400 --> 00:16:42.110
or the Pearl Boy on the screen.

00:16:42.110 --> 00:16:46.650
But my favorite way of showing
this kind of demonstration

00:16:46.650 --> 00:16:50.890
is having somebody very far
away, maybe continents away,

00:16:50.890 --> 00:16:55.070
Skyped in, and have that
person control the truck.

00:16:55.070 --> 00:16:57.980
Now we have some network
limitations here,

00:16:57.980 --> 00:17:01.830
and we couldn't achieve this,
or couldn't quite do this,

00:17:01.830 --> 00:17:03.860
to set up this networking.

00:17:03.860 --> 00:17:06.069
But I brought the
experience to you.

00:17:06.069 --> 00:17:10.349
So I'm kind of doing
these acrobatic tricks

00:17:10.349 --> 00:17:12.770
without the net underneath me.

00:17:12.770 --> 00:17:15.839
So we'll try to do this.

00:17:15.839 --> 00:17:21.280
So what is going to happen
is I will bring up a page,

00:17:21.280 --> 00:17:27.930
and in this page we are
going to do a video call.

00:17:27.930 --> 00:17:30.070
So in the top left
corner, you see me.

00:17:30.070 --> 00:17:32.420
And in the middle of the
screen, you see David.

00:17:32.420 --> 00:17:35.210
And David has this ability of
sitting there very patiently

00:17:35.210 --> 00:17:37.250
and not moving at
all while he is

00:17:37.250 --> 00:17:39.405
waiting to control the truck.

00:17:42.030 --> 00:17:45.360
So let's see if we can
have a chat with David.

00:17:48.120 --> 00:17:50.530
Hey, David, can you hear us?

00:17:50.530 --> 00:17:51.780
DAVID: Hello, can you hear me?

00:17:51.780 --> 00:17:53.320
PETER: Yeah, we can hear you.

00:17:53.320 --> 00:17:54.225
Hey are you online?

00:17:54.225 --> 00:17:56.350
DAVID: Well yeah, we are
on a video call right now,

00:17:56.350 --> 00:17:57.300
so I think I'm online.

00:17:57.300 --> 00:17:58.674
PETER: Yeah, that's
a good point.

00:17:58.674 --> 00:18:00.520
Hey, we have a truck
here that we could use.

00:18:00.520 --> 00:18:01.145
DAVID: A truck?

00:18:01.145 --> 00:18:02.096
PETER: Yeah, a truck.

00:18:02.096 --> 00:18:04.470
DAVID: I thought we were going
to be controlling a drone.

00:18:04.470 --> 00:18:07.080
PETER: No, we had to
cancel the drone project.

00:18:07.080 --> 00:18:07.690
DAVID: Oh, OK.

00:18:07.690 --> 00:18:09.511
PETER: Can you help
us with the truck?

00:18:09.511 --> 00:18:10.510
DAVID: Yeah, absolutely.

00:18:10.510 --> 00:18:12.136
PETER: OK, so what
are you going to do?

00:18:12.136 --> 00:18:14.176
DAVID: So I have the
controls pulled up over here

00:18:14.176 --> 00:18:14.740
on my phone.

00:18:14.740 --> 00:18:15.882
PETER: OK.

00:18:15.882 --> 00:18:17.840
DAVID: So if you hold up
the truck on your end,

00:18:17.840 --> 00:18:20.030
I can actually turn
on and off the lights.

00:18:20.030 --> 00:18:24.962
So, on, off, on, off,

00:18:24.962 --> 00:18:25.670
PETER: Very cool.

00:18:25.670 --> 00:18:27.545
Can you turn the front
wheels left and right?

00:18:27.545 --> 00:18:28.730
DAVID: Yeah, absolutely.

00:18:28.730 --> 00:18:32.332
Right, left, right, left.

00:18:32.332 --> 00:18:33.040
PETER: Very cool.

00:18:33.040 --> 00:18:34.581
Can you spin the
wheels a little bit?

00:18:34.581 --> 00:18:39.352
DAVID: Yeah, so, forward,
reverse, and forward, reverse.

00:18:39.352 --> 00:18:40.060
PETER: Very cool.

00:18:40.060 --> 00:18:41.643
I'm going to put it
down on the floor.

00:18:41.643 --> 00:18:45.610
Can you control it there
a little bit for us?

00:18:45.610 --> 00:18:46.120
DAVID: Sure.

00:18:46.120 --> 00:18:47.270
Let me know when you're ready.

00:18:47.270 --> 00:18:48.269
PETER: OK, we are ready.

00:18:48.269 --> 00:18:50.900
But be gentle!

00:18:50.900 --> 00:18:52.130
Very cool!

00:18:52.130 --> 00:18:53.060
Awesome!

00:18:53.060 --> 00:18:54.310
Thank you, David.

00:18:54.310 --> 00:18:55.420
DAVID: Oh, you're welcome.

00:18:55.420 --> 00:18:56.550
PETER: Very nice.

00:18:56.550 --> 00:18:58.910
DAVID: So next time,
remember to bring the drone.

00:18:58.910 --> 00:18:59.830
PETER: We will
bring to the drone

00:18:59.830 --> 00:19:01.000
for you, don't worry about that.

00:19:01.000 --> 00:19:01.500
DAVID: Bye.

00:19:01.500 --> 00:19:04.120
PETER: OK, take care.

00:19:04.120 --> 00:19:05.960
So-- [APPLAUSE] thank you.

00:19:11.900 --> 00:19:15.300
So what you have seen is magic.

00:19:15.300 --> 00:19:18.590
Basically what we did
was we have a web browser

00:19:18.590 --> 00:19:20.070
running on a mobile
device that can

00:19:20.070 --> 00:19:22.800
be on a carrier's network,
that has the ability

00:19:22.800 --> 00:19:25.140
to send real time messages
to any web application

00:19:25.140 --> 00:19:28.240
out there, or any WebSocket
client, for that matter.

00:19:28.240 --> 00:19:32.690
In our case, its Java code
running on the Raspberry Pi.

00:19:32.690 --> 00:19:35.600
If you're interested in how
this experience was created here

00:19:35.600 --> 00:19:38.300
for you, can just Google here
in the bottom right corner.

00:19:38.300 --> 00:19:40.630
You Google for
WebSocket and Popcorn.

00:19:40.630 --> 00:19:43.350
Popcorn is an awesome
media library,

00:19:43.350 --> 00:19:45.890
and you can do these
nice experiences with it.

00:19:45.890 --> 00:19:47.990
There's a blog post
that was just put out.

00:19:47.990 --> 00:19:49.970
You can read all the details.

00:19:49.970 --> 00:19:54.330
Now, what do I do
when I am not here

00:19:54.330 --> 00:19:57.650
and having fun and meeting
nice people at meetups?

00:19:57.650 --> 00:20:01.657
There are many, many
challenges in the real time web

00:20:01.657 --> 00:20:05.620
communication space that make
it really hard and challenging

00:20:05.620 --> 00:20:08.680
to build and provide
seamless experiences.

00:20:08.680 --> 00:20:11.030
There's a notion of
firewalls and routers,

00:20:11.030 --> 00:20:13.782
your connection gets broken down
because you are in a tunnel,

00:20:13.782 --> 00:20:15.740
maybe you need to scale
up to millions of users

00:20:15.740 --> 00:20:18.600
because you've become
very successful suddenly.

00:20:18.600 --> 00:20:21.590
These are the kinds of problems
that we are trying to solve,

00:20:21.590 --> 00:20:24.930
and we are very busy
solving at Kaazing.

00:20:24.930 --> 00:20:31.220
So if you want to learn more
about Goo, how Goo enables

00:20:31.220 --> 00:20:35.730
web developers as well
as creative people,

00:20:35.730 --> 00:20:40.260
here are a handful of links
for you that you can go.

00:20:40.260 --> 00:20:45.210
Goo is having a beta
program, and you're

00:20:45.210 --> 00:20:47.570
encouraged to sign up to those.

00:20:47.570 --> 00:20:50.420
And if you're interested in any
of the real time communication

00:20:50.420 --> 00:20:52.810
aspects, how you can
bring this kind of power

00:20:52.810 --> 00:20:56.600
to your WebGL apps, as well
as to the physical world,

00:20:56.600 --> 00:21:00.860
you can visit the links
on the Kaazing site.

00:21:00.860 --> 00:21:05.480
And last, here's the
contact information for us.

00:21:05.480 --> 00:21:06.380
Thank you very much.

00:21:06.380 --> 00:21:06.963
VICTOR: Great!

00:21:06.963 --> 00:21:07.580
Thank you.

00:21:07.580 --> 00:21:18.141
[APPLAUSE]

