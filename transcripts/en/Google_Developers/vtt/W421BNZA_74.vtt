WEBVTT
Kind: captions
Language: en

00:00:03.902 --> 00:00:05.860
WESLEY CHUN: Greetings,
developers, and welcome

00:00:05.860 --> 00:00:07.480
to "The G Suite Dev Show."

00:00:07.480 --> 00:00:10.750
In this episode, we conclude our
two-part series on field masks.

00:00:10.750 --> 00:00:12.490
I'm your host Wesley Chun.

00:00:12.490 --> 00:00:15.430
In the last video, we discussed
reading data from an API

00:00:15.430 --> 00:00:17.470
and how you can use
field masks to control

00:00:17.470 --> 00:00:19.570
the amount of data that
gets returned-- you know,

00:00:19.570 --> 00:00:21.050
partial response?

00:00:21.050 --> 00:00:22.690
Well, today we'll
focus on rights,

00:00:22.690 --> 00:00:24.250
or more likely updates--

00:00:24.250 --> 00:00:26.990
you know, via post,
put, or patch?

00:00:26.990 --> 00:00:28.630
Well, you already
know that field masks

00:00:28.630 --> 00:00:31.690
aren't things you wear but
instead work like a filter.

00:00:31.690 --> 00:00:34.480
More specifically for updates,
think of them as a bit mask,

00:00:34.480 --> 00:00:36.760
where data represented
by bits that are on

00:00:36.760 --> 00:00:39.550
will be updated, whereas
those that are off are ignored

00:00:39.550 --> 00:00:41.479
and remain the same.

00:00:41.479 --> 00:00:43.770
You pass in a field you're
updating along with its name

00:00:43.770 --> 00:00:44.860
in the mask.

00:00:44.860 --> 00:00:46.630
Generally, the field
mask will consist

00:00:46.630 --> 00:00:49.180
of exactly the attributes
you're updating.

00:00:49.180 --> 00:00:51.280
If you provide additional
fields in the mask that

00:00:51.280 --> 00:00:54.680
are not in the request, those
attributes will be reset.

00:00:54.680 --> 00:00:57.310
Yes, I'll show you
what I mean in a bit.

00:00:57.310 --> 00:00:59.620
Right now let's look at our
first example, this Google

00:00:59.620 --> 00:01:00.580
sheet.

00:01:00.580 --> 00:01:02.710
Let's say we want to
bold the first row.

00:01:02.710 --> 00:01:05.085
You'd send this JSON to the API.

00:01:05.085 --> 00:01:06.460
Ignoring fields
for a moment, you

00:01:06.460 --> 00:01:08.290
can clearly see
that the repeat cell

00:01:08.290 --> 00:01:10.450
request affects the first row.

00:01:10.450 --> 00:01:13.030
In particular, we want to
set the cells user entered

00:01:13.030 --> 00:01:17.170
format slash text format
slash bold attribute to true.

00:01:17.170 --> 00:01:21.114
The payload looks legit without
fields, so why is it there?

00:01:21.114 --> 00:01:22.780
Well, remember how I
said that the field

00:01:22.780 --> 00:01:25.920
mask will consist of exactly
the fields you're updating?

00:01:25.920 --> 00:01:27.400
Well, here we only
want to affect

00:01:27.400 --> 00:01:31.320
each cell's bold attribute but
no other text format field.

00:01:31.320 --> 00:01:33.820
Well, for fun, let's
add the italic flag.

00:01:33.820 --> 00:01:36.850
Now our request affects
bold and italics.

00:01:36.850 --> 00:01:40.720
Since we don't have a italics in
the request, bold will be set,

00:01:40.720 --> 00:01:42.820
but italics will be reset.

00:01:42.820 --> 00:01:44.182
Make sense?

00:01:44.182 --> 00:01:45.890
All right, here's a
more extreme example.

00:01:45.890 --> 00:01:48.280
Let's just remove the
last part of that mask.

00:01:48.280 --> 00:01:51.610
Well, now it's a super-set
making up all text format

00:01:51.610 --> 00:01:52.540
fields.

00:01:52.540 --> 00:01:55.180
Any field not in the
request will be reset.

00:01:55.180 --> 00:01:57.520
In this case, while
bold will still be set,

00:01:57.520 --> 00:01:59.590
all others will be reset.

00:01:59.590 --> 00:02:01.960
Yep, you can kiss
italics goodbye again.

00:02:01.960 --> 00:02:04.840
But now the same goes for
strike-through and underline.

00:02:04.840 --> 00:02:08.430
The original font family
and size will come back too.

00:02:08.430 --> 00:02:10.180
Well, if you want to
specify all fields,

00:02:10.180 --> 00:02:12.520
you can use asterisk as
a shorthand alternative

00:02:12.520 --> 00:02:14.050
to listing every
single one, which

00:02:14.050 --> 00:02:15.520
you'd have to look up anyway.

00:02:15.520 --> 00:02:17.604
But be wary that
if the API changes,

00:02:17.604 --> 00:02:19.270
you could have
inadvertent side effects.

00:02:19.270 --> 00:02:22.660
So minimize your
use of the asterisk.

00:02:22.660 --> 00:02:25.120
Here's the original JSON
in actual Python code

00:02:25.120 --> 00:02:27.880
that bolds row number one,
leaving all other attributes

00:02:27.880 --> 00:02:29.230
untouched.

00:02:29.230 --> 00:02:33.220
Also see the Sheets API
page on update field masks.

00:02:33.220 --> 00:02:35.930
Now let's bold some
text with Google Slides.

00:02:35.930 --> 00:02:39.130
Instead of cells, it's
text on the slide.

00:02:39.130 --> 00:02:41.320
Given you already
have the text box ID,

00:02:41.320 --> 00:02:44.860
this JSON bolds the first eight
characters in the text box.

00:02:44.860 --> 00:02:47.650
Notice that the field's
value is simpler here,

00:02:47.650 --> 00:02:50.890
no user entered format
slash text format.

00:02:50.890 --> 00:02:53.020
Well, that's because
the root object

00:02:53.020 --> 00:02:56.800
for the slide's request is style
so you don't have to specify

00:02:56.800 --> 00:02:58.030
any other attributes.

00:02:58.030 --> 00:02:59.770
Whereas for Sheets,
the root object

00:02:59.770 --> 00:03:03.310
was cell, meaning you needed
the full path from the cell down

00:03:03.310 --> 00:03:05.860
to the bold flag, meaning
user entered format

00:03:05.860 --> 00:03:08.550
slash text format slashed bold.

00:03:08.550 --> 00:03:10.660
Each API differs,
so check the docs

00:03:10.660 --> 00:03:13.624
to determine your root objects.

00:03:13.624 --> 00:03:15.040
Here's some Python
that implements

00:03:15.040 --> 00:03:17.800
bolding of the first eight
characters of the text box.

00:03:17.800 --> 00:03:21.370
And that's almost the
entire story on field masks.

00:03:21.370 --> 00:03:24.190
I'd like to share a few
parting tips as we wrap up.

00:03:24.190 --> 00:03:27.140
One, for the Sheets
and Slides APIs,

00:03:27.140 --> 00:03:30.220
fields for read operations
is an API call parameter,

00:03:30.220 --> 00:03:31.216
like you see here.

00:03:31.216 --> 00:03:32.590
But for write
operations, they're

00:03:32.590 --> 00:03:35.200
an attribute you set
in your requests.

00:03:35.200 --> 00:03:37.060
Updates may also have
fields as a parameter.

00:03:37.060 --> 00:03:41.230
But this depends on the API and
possibly your client library.

00:03:41.230 --> 00:03:43.870
Two, some recent APIs
have also started

00:03:43.870 --> 00:03:46.060
supporting the dotted
attribute notation,

00:03:46.060 --> 00:03:48.730
so you can use periods
instead of slashes.

00:03:48.730 --> 00:03:51.920
This makes the APIs more
consistent with Google protocol

00:03:51.920 --> 00:03:53.200
buffers.

00:03:53.200 --> 00:03:55.210
But not all API
is supported yet.

00:03:55.210 --> 00:03:57.080
So if you try it
and it doesn't work,

00:03:57.080 --> 00:03:59.230
you're going to get
an HTTP 400 error

00:03:59.230 --> 00:04:01.900
and need to change the
dots back to slashes.

00:04:01.900 --> 00:04:04.390
Want to learn more about
proto buffs and field masks?

00:04:04.390 --> 00:04:06.760
Check out this page in the docs.

00:04:06.760 --> 00:04:09.850
Three, when we discussed
field masks with read,

00:04:09.850 --> 00:04:12.250
it's all about what comes
back in the response and not

00:04:12.250 --> 00:04:14.410
the actual API request.

00:04:14.410 --> 00:04:17.290
In other words, you can have
non-read actions that send back

00:04:17.290 --> 00:04:19.120
data that you can filter.

00:04:19.120 --> 00:04:21.490
In this example, creating
a new presentation

00:04:21.490 --> 00:04:25.120
with the Slides API isn't a
read operation but acts like one

00:04:25.120 --> 00:04:26.910
due to its response payload.

00:04:26.910 --> 00:04:29.680
The API creates a document
and then returns a payload

00:04:29.680 --> 00:04:33.340
as if you called get on it,
which then you can filter.

00:04:33.340 --> 00:04:35.410
The field masks we're
using requests just

00:04:35.410 --> 00:04:38.110
a presentation ID plus
the IDs of all the slide

00:04:38.110 --> 00:04:40.420
pages and objects on each page.

00:04:40.420 --> 00:04:42.310
We pass in those
fields in the same way

00:04:42.310 --> 00:04:46.690
for this massive
write-plus-read operation.

00:04:46.690 --> 00:04:48.810
And four, to
complete our journey,

00:04:48.810 --> 00:04:51.910
we'll look at another
read-plus-write example

00:04:51.910 --> 00:04:55.790
that uses both read
and write field masks.

00:04:55.790 --> 00:04:58.080
The example updates
a Google sheet,

00:04:58.080 --> 00:05:01.410
but it has this include
spreadsheet in response flag

00:05:01.410 --> 00:05:02.580
you see here.

00:05:02.580 --> 00:05:04.450
That requests the
updated Sheet data

00:05:04.450 --> 00:05:06.450
be added to the
response payload, which

00:05:06.450 --> 00:05:10.710
then can be filtered, limiting
the amount of data returned.

00:05:10.710 --> 00:05:13.110
The data has a header row
and a first column made up

00:05:13.110 --> 00:05:16.020
of time stamps, where the
update request changes the time

00:05:16.020 --> 00:05:19.570
stamps, adjusts the date
in year, month, day format.

00:05:19.570 --> 00:05:22.100
In the code, we
request the API return

00:05:22.100 --> 00:05:25.950
just a Sheet's name and
the URL plus the names

00:05:25.950 --> 00:05:28.050
of all the individual Sheets.

00:05:28.050 --> 00:05:30.670
Well, how's that for the
kitchen sink example?

00:05:30.670 --> 00:05:33.000
Field masks in the
update request body

00:05:33.000 --> 00:05:36.860
and field masks in the call
to obtain a partial response--

00:05:36.860 --> 00:05:39.150
well, that wraps up our
journey into field masks.

00:05:39.150 --> 00:05:41.130
Be sure to tune into
part 1 if you missed

00:05:41.130 --> 00:05:43.080
our show on partial response.

00:05:43.080 --> 00:05:45.810
The field masks guide
in the Slides API docs

00:05:45.810 --> 00:05:48.360
is the most comprehensive,
covering read and write.

00:05:48.360 --> 00:05:50.419
So check it out if
you haven't already.

00:05:50.419 --> 00:05:52.835
And check out the last link
to see more episodes of "The G

00:05:52.835 --> 00:05:54.330
Suite Dev Show."

00:05:54.330 --> 00:05:56.640
Now that you know how to
use field masks in read

00:05:56.640 --> 00:05:58.770
and write API calls,
it's time for you

00:05:58.770 --> 00:06:01.680
to try out field masks to
build that awesome app.

00:06:01.680 --> 00:06:03.180
Be sure to subscribe
to our channel

00:06:03.180 --> 00:06:05.280
to get the latest from
Google Developers.

00:06:05.280 --> 00:06:07.965
This is Wesley Chun, and we'll
see you the next time on "The G

00:06:07.965 --> 00:06:09.970
Suite Dev Show."

