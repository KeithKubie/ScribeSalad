WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.360
[MUSIC PLAYING]

00:00:06.074 --> 00:00:08.490
DAN GALPIN: Hi, and welcome
back to "The Developer Show's"

00:00:08.490 --> 00:00:10.320
coverage at GDD India.

00:00:10.320 --> 00:00:13.440
I'm Dan Galpin here
with Florina Muntenescu.

00:00:13.440 --> 00:00:15.450
And she's been working
with Android developers

00:00:15.450 --> 00:00:18.504
around the world, particularly
with Architecture Components.

00:00:18.504 --> 00:00:20.670
Now, how does Architecture
Components change the way

00:00:20.670 --> 00:00:22.254
Google relates to
Android development?

00:00:22.254 --> 00:00:23.670
FLORINA MUNTENESCU:
Well, together

00:00:23.670 --> 00:00:25.410
with a set of
Architecture Components,

00:00:25.410 --> 00:00:28.170
we're also releasing a
guide to Architecture.

00:00:28.170 --> 00:00:30.240
So for a long time,
developers have

00:00:30.240 --> 00:00:32.460
been asking us what's the
right way of architecting

00:00:32.460 --> 00:00:33.540
our application?

00:00:33.540 --> 00:00:36.450
Because, especially in Android,
we have a lot of patterns--

00:00:36.450 --> 00:00:40.754
MVC, MVP, MVVM, MVI, MVC--

00:00:40.754 --> 00:00:41.640
yeah.

00:00:41.640 --> 00:00:44.820
So developers wanted,
well, what's the right way?

00:00:44.820 --> 00:00:47.550
And then we released the Guide
to App Architecture, which

00:00:47.550 --> 00:00:49.720
suggests a way of doing that.

00:00:49.720 --> 00:00:51.660
But most importantly,
what it suggests

00:00:51.660 --> 00:00:55.627
is having things separate and
testable and easy to extract.

00:00:55.627 --> 00:00:57.210
DAN GALPIN: What's
the biggest benefit

00:00:57.210 --> 00:00:59.140
of the lifecycle-aware
components?

00:00:59.140 --> 00:01:01.390
FLORINA MUNTENESCU: We saw
that there were some things

00:01:01.390 --> 00:01:03.370
that developers tend to
do over and over again,

00:01:03.370 --> 00:01:06.060
and one thing is
having components

00:01:06.060 --> 00:01:07.950
that we have based
on the lifecycle.

00:01:07.950 --> 00:01:10.920
So for example, you start
subscribing or listening

00:01:10.920 --> 00:01:14.890
to location services based on
when the activities started.

00:01:14.890 --> 00:01:16.800
Or you want to stop
when the activity is

00:01:16.800 --> 00:01:18.120
no longer in program.

00:01:18.120 --> 00:01:20.530
This was initially
part of the activity.

00:01:20.530 --> 00:01:23.400
But now, you can separate
that in a different class.

00:01:23.400 --> 00:01:25.560
And that class can
be, now, unit tested.

00:01:25.560 --> 00:01:29.271
So again, it's all about the
stability and separation.

00:01:29.271 --> 00:01:31.770
DAN GALPIN: How does Vroom alter
the typical ways developers

00:01:31.770 --> 00:01:33.510
work with databases?

00:01:33.510 --> 00:01:35.850
FLORINA MUNTENESCU: Well, to
be honest, for a long time

00:01:35.850 --> 00:01:39.220
I was avoiding databases
as much as possible.

00:01:39.220 --> 00:01:41.650
And what I didn't like
was that it was so much

00:01:41.650 --> 00:01:44.400
boilerplate I needed to write,
all of those cursor.getInt,

00:01:44.400 --> 00:01:45.231
cursor.getString.

00:01:45.231 --> 00:01:46.980
And then you keep on
writing, and then you

00:01:46.980 --> 00:01:48.270
keep on Copy, Pasting.

00:01:48.270 --> 00:01:51.700
And if you're like me, you
can end up doing mistakes.

00:01:51.700 --> 00:01:54.720
So all of that boilerplate
that you need to write now

00:01:54.720 --> 00:01:56.430
is just gone because
Vroom does all

00:01:56.430 --> 00:01:58.530
of that object mapping for you.

00:01:58.530 --> 00:02:00.390
And again, apart
from that, it also

00:02:00.390 --> 00:02:02.520
comes with a high
degree of flexibility,

00:02:02.520 --> 00:02:05.070
so not only on
creating the tables,

00:02:05.070 --> 00:02:06.570
working with the
queries, and so on,

00:02:06.570 --> 00:02:09.840
but also with migrations
because our app always evolves.

00:02:09.840 --> 00:02:11.910
So you want to make sure
that when the database

00:02:11.910 --> 00:02:15.300
schema changes, we also provide
something that's stable,

00:02:15.300 --> 00:02:19.110
that's robust, that our users
don't have a problem with.

00:02:19.110 --> 00:02:21.450
DAN GALPIN: Many of the
components are already at 1.0,

00:02:21.450 --> 00:02:24.640
but you talked about the Paging
Library here at GDD India.

00:02:24.640 --> 00:02:25.905
Now, what does it do?

00:02:25.905 --> 00:02:28.640
FLORINA MUNTENESCU: In India, we
released already the components

00:02:28.640 --> 00:02:31.580
to be announced at Google
I/O are already in 1.0.

00:02:31.580 --> 00:02:32.830
They're already stable.

00:02:32.830 --> 00:02:36.330
But we saw that there's
more need for components.

00:02:36.330 --> 00:02:38.470
So we started working
on the Paging Library.

00:02:38.470 --> 00:02:39.820
That's now in our focus.

00:02:39.820 --> 00:02:41.910
We're still in working
progress with it.

00:02:41.910 --> 00:02:46.180
So what developers had was
data coming from a data

00:02:46.180 --> 00:02:48.405
source, database
network, and that they

00:02:48.405 --> 00:02:51.044
don't need it to be displayed
on a screen, on a list.

00:02:51.044 --> 00:02:52.710
And then, the role
of the Paging Library

00:02:52.710 --> 00:02:54.990
is to make this connection
between the data source

00:02:54.990 --> 00:02:57.974
and the RecyclerView
as easy as possible.

00:02:57.974 --> 00:02:59.640
But I was saying that
it's [INAUDIBLE]..

00:02:59.640 --> 00:03:01.950
So this means that
this is your chance

00:03:01.950 --> 00:03:04.830
to help us shape the library,
as you did with the Architecture

00:03:04.830 --> 00:03:06.420
Components so far.

00:03:06.420 --> 00:03:08.490
You've done such a
great job giving us

00:03:08.490 --> 00:03:10.980
feedback, telling us what's
missing, what kind of issues

00:03:10.980 --> 00:03:15.300
we have, what kind of stuff you
expect to be there but are not.

00:03:15.300 --> 00:03:17.100
Please do the same with
the Paging Library,

00:03:17.100 --> 00:03:20.150
and tell us how it can make
everything easier for you.

00:03:20.150 --> 00:03:22.650
DAN GALPIN: I know you've been
talking a lot with developers

00:03:22.650 --> 00:03:23.910
here in India.

00:03:23.910 --> 00:03:26.100
Was there any interesting
insight you found out

00:03:26.100 --> 00:03:27.930
about the local
market and things

00:03:27.930 --> 00:03:29.924
that Indian developers
have to do to target it?

00:03:29.924 --> 00:03:32.340
FLORINA MUNTENESCU: So I heard
that there are applications

00:03:32.340 --> 00:03:36.600
here that actually have, as
part of their app icon label,

00:03:36.600 --> 00:03:38.970
something that says less
than two megabytes or less

00:03:38.970 --> 00:03:42.390
than three megabytes because
that's the size of APK.

00:03:42.390 --> 00:03:45.146
I think we've been spoiled
with the device size

00:03:45.146 --> 00:03:46.020
and with the network.

00:03:46.020 --> 00:03:49.830
And we don't realize that,
hey, outside our bubble,

00:03:49.830 --> 00:03:51.360
people really care
about the data

00:03:51.360 --> 00:03:53.790
and really care about
the size of the APK.

00:03:53.790 --> 00:03:56.700
So developers here end up
doing a lot of really awesome

00:03:56.700 --> 00:03:59.280
optimizations on the APK size.

00:03:59.280 --> 00:04:01.320
I actually even talked
with a few of them,

00:04:01.320 --> 00:04:03.830
and it's going to
come out later.

00:04:03.830 --> 00:04:05.850
But I promise I'll give
you a lot of insights

00:04:05.850 --> 00:04:09.840
on what developers here do,
also, to optimize their APK

00:04:09.840 --> 00:04:13.260
size and other, in general,
Android best practices, which

00:04:13.260 --> 00:04:14.450
for them are a must.

00:04:14.450 --> 00:04:16.329
They're not just a should.

00:04:16.329 --> 00:04:17.370
DAN GALPIN: That's great.

00:04:17.370 --> 00:04:19.440
So now, where can
developers go to learn more

00:04:19.440 --> 00:04:22.000
about Paging Library and
the rest of the Architecture

00:04:22.000 --> 00:04:22.770
Components?

00:04:22.770 --> 00:04:24.990
FLORINA MUNTENESCU: On
developers.android.com we

00:04:24.990 --> 00:04:28.680
have extensive documentation
on the Architecture Components.

00:04:28.680 --> 00:04:32.730
We have advice on how to use the
components and in which cases.

00:04:32.730 --> 00:04:35.102
And even more, if you're
looking for code samples,

00:04:35.102 --> 00:04:36.560
check out the
googlesamples/android

00:04:36.560 --> 00:04:38.790
architecture components.

00:04:38.790 --> 00:04:40.980
You'll find there
six or seven projects

00:04:40.980 --> 00:04:44.630
that target different specific
problems that Architecture

00:04:44.630 --> 00:04:45.599
Component solves.

00:04:45.599 --> 00:04:46.890
DAN GALPIN: Well, that's great.

00:04:46.890 --> 00:04:48.990
Thank you so much for
chatting with us, Florina.

00:04:48.990 --> 00:04:50.400
FLORINA MUNTENESCU:
Thank you for having me.

00:04:50.400 --> 00:04:51.870
DAN GALPIN: Please visit
the description below

00:04:51.870 --> 00:04:53.790
if you'd like to learn more
about the Paging Library

00:04:53.790 --> 00:04:55.956
preview and the rest of the
Architecture Components.

00:04:55.956 --> 00:04:58.290
And stay tuned for Florina's
on the ground developer

00:04:58.290 --> 00:05:00.127
interviews here in India.

00:05:00.127 --> 00:05:02.460
Once again, I'm Dan Galpin
reporting from "The Developer

00:05:02.460 --> 00:05:04.050
Show" from GDD India.

00:05:04.050 --> 00:05:07.700
[MUSIC PLAYING]

