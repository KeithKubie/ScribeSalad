WEBVTT
Kind: captions
Language: en

00:00:00.860 --> 00:00:01.990
JAREK WILKIEWICZ: All right.

00:00:01.990 --> 00:00:03.880
Good morning everyone.

00:00:03.880 --> 00:00:05.580
Quick introductions.

00:00:05.580 --> 00:00:06.830
My name is Jarek Wilkiewicz.

00:00:06.830 --> 00:00:08.880
I'm a Developer Advocate
with YouTube.

00:00:08.880 --> 00:00:11.030
And here with me is Doug Muir.

00:00:11.030 --> 00:00:13.720
He's a Technical Director
from Activision.

00:00:13.720 --> 00:00:17.310
And we also have Cliff Samaniego
and Kenji Arai from

00:00:17.310 --> 00:00:20.110
YouTube who will be joining
us for Q&amp;A later in this

00:00:20.110 --> 00:00:22.730
presentation.

00:00:22.730 --> 00:00:24.770
So the agenda for today.

00:00:24.770 --> 00:00:26.500
We just went through
the introductions.

00:00:26.500 --> 00:00:29.560
I will talk a little bit about
why would one want to

00:00:29.560 --> 00:00:32.590
integrate a game title
with YouTube.

00:00:32.590 --> 00:00:35.500
And then what is the process of
integration, so how do you

00:00:35.500 --> 00:00:37.350
actually get that done.

00:00:37.350 --> 00:00:41.130
And discuss the one use case in
more detail, namely Call of

00:00:41.130 --> 00:00:42.810
Duty: Black Ops.

00:00:42.810 --> 00:00:45.760
For those of you that are
gamers, this game needs no

00:00:45.760 --> 00:00:46.860
introduction.

00:00:46.860 --> 00:00:50.670
And for those of you that
aren't, let me just say that

00:00:50.670 --> 00:00:52.770
it was the biggest
game of 2010.

00:00:52.770 --> 00:00:55.510
And they made an incredible
amount of money on that game.

00:01:00.190 --> 00:01:02.140
What I would like to start with
is a little quiz to kind

00:01:02.140 --> 00:01:05.780
of wake you up and see how much
you know about YouTube.

00:01:05.780 --> 00:01:08.850
I'm sure all of you guys are
users, but I always like to

00:01:08.850 --> 00:01:10.620
test knowledge of my audience.

00:01:10.620 --> 00:01:12.850
So question number one is--

00:01:12.850 --> 00:01:15.560
it should be pretty easy-- how
many views do we get per day

00:01:15.560 --> 00:01:16.810
on YouTube?

00:01:16.810 --> 00:01:19.430
Any guesses?

00:01:19.430 --> 00:01:22.410
2, 3, 10 million?

00:01:22.410 --> 00:01:24.970
1 million.

00:01:24.970 --> 00:01:28.460
200 million.

00:01:28.460 --> 00:01:30.840
A billion-ish.

00:01:30.840 --> 00:01:31.100
OK.

00:01:31.100 --> 00:01:33.260
So actually it's
over 2 billion.

00:01:33.260 --> 00:01:35.030
And this is data
from last year.

00:01:37.660 --> 00:01:38.650
Next question.

00:01:38.650 --> 00:01:43.700
So out of the 2 billion, how
many are mobile, so used on

00:01:43.700 --> 00:01:44.600
mobile devices?

00:01:44.600 --> 00:01:47.490
What do you guys think?

00:01:47.490 --> 00:01:48.260
25%.

00:01:48.260 --> 00:01:51.150
30%.

00:01:51.150 --> 00:01:52.160
10%.

00:01:52.160 --> 00:01:54.940
Yeah, it's actually
over 200 million.

00:01:54.940 --> 00:01:56.500
So it's over 10%.

00:01:56.500 --> 00:01:59.130
This number is also growing
pretty fast.

00:01:59.130 --> 00:02:00.360
Last question.

00:02:00.360 --> 00:02:02.240
How much video is uploaded
each and

00:02:02.240 --> 00:02:04.720
every minute to YouTube?

00:02:04.720 --> 00:02:06.720
How many hours?

00:02:06.720 --> 00:02:07.360
20 hours.

00:02:07.360 --> 00:02:08.169
OK.

00:02:08.169 --> 00:02:09.639
Do I have 24?

00:02:09.639 --> 00:02:13.420
26.

00:02:13.420 --> 00:02:16.670
It's actually over 35 hours.

00:02:16.670 --> 00:02:19.270
Which brings us to this
presentation because we'll be

00:02:19.270 --> 00:02:22.530
talking about uploading videos
to YouTube from a game.

00:02:22.530 --> 00:02:26.510
So why would anybody want to
integrate with YouTube?

00:02:26.510 --> 00:02:29.230
First of all, the site is
very international.

00:02:29.230 --> 00:02:30.900
We have hundreds of
millions of users.

00:02:30.900 --> 00:02:33.750
And over 70% of traffic
comes from outside

00:02:33.750 --> 00:02:34.860
of the United States.

00:02:34.860 --> 00:02:37.490
So if you want to target global
audience, putting

00:02:37.490 --> 00:02:40.520
content up on YouTube is
a good way to do this.

00:02:40.520 --> 00:02:42.320
Gaming is one of our
top verticals.

00:02:42.320 --> 00:02:45.810
And we find that gamers are very
engaged, so they create,

00:02:45.810 --> 00:02:50.840
share, discover new content
and socialize on YouTube.

00:02:50.840 --> 00:02:54.300
And we like that because that
really helps drive community

00:02:54.300 --> 00:02:58.530
engagement around the content
that you put up on YouTube.

00:02:58.530 --> 00:03:00.920
As Doug was going to talk about
a little later in the

00:03:00.920 --> 00:03:03.700
presentation, YouTube gives
you a mechanism to promote

00:03:03.700 --> 00:03:04.400
your title.

00:03:04.400 --> 00:03:07.790
And you can monetize some of
that content as well and thus

00:03:07.790 --> 00:03:13.640
grow your community, grow the
excitement around your title.

00:03:13.640 --> 00:03:17.160
So we talked a little bit about
why to go through this

00:03:17.160 --> 00:03:21.240
process of YouTube
integration.

00:03:21.240 --> 00:03:23.430
Since we are developers here,
let's talk a little bit about

00:03:23.430 --> 00:03:26.120
the APIs, and how does
one actually do this.

00:03:26.120 --> 00:03:32.710
So first of all, to upload a
video to YouTube there's three

00:03:32.710 --> 00:03:33.990
steps that one has
to go through.

00:03:33.990 --> 00:03:36.320
First, the video needs
to be encoded.

00:03:36.320 --> 00:03:40.490
And there are various encoding
technologies available.

00:03:40.490 --> 00:03:43.020
So I know that two of them here
that are quite popular,

00:03:43.020 --> 00:03:46.990
H.264 and WebM VP8.

00:03:46.990 --> 00:03:50.620
Once the video is encoded, we
provide data APIs that can be

00:03:50.620 --> 00:03:53.530
used to actually push the
video over to YouTube

00:03:53.530 --> 00:03:54.400
programmatically.

00:03:54.400 --> 00:03:58.510
So again this is not going to
youtube.com and uploading this

00:03:58.510 --> 00:04:01.450
manually, all we talked about
here are the APIs.

00:04:01.450 --> 00:04:03.370
And then finally, we have
a set of player APIs.

00:04:03.370 --> 00:04:06.300
So if you would like to build
say a video portal around the

00:04:06.300 --> 00:04:08.790
content that you have uploaded,
you can use the

00:04:08.790 --> 00:04:12.030
player APIs to customize the
playback experience.

00:04:12.030 --> 00:04:14.340
And I'll talk a little bit more
about each one of these

00:04:14.340 --> 00:04:16.950
in the following slides.

00:04:16.950 --> 00:04:18.810
So starting with encoding.

00:04:18.810 --> 00:04:24.510
Some platforms have H.264
encoding built in.

00:04:24.510 --> 00:04:27.030
In the case of platforms
that don't--

00:04:27.030 --> 00:04:30.710
for example, on the Xbox,
there was no encoding

00:04:30.710 --> 00:04:32.820
available during
the integration

00:04:32.820 --> 00:04:34.980
process for Black Ops.

00:04:34.980 --> 00:04:39.260
We have WebM, which is an
open source project.

00:04:39.260 --> 00:04:44.080
It is really designed for web
video, so it provides pretty

00:04:44.080 --> 00:04:48.620
efficient compression and
streaming capability.

00:04:48.620 --> 00:04:52.130
So you can achieve pretty high
quality streaming at

00:04:52.130 --> 00:04:53.230
relatively low bandwidth.

00:04:53.230 --> 00:04:57.450
So as I showed here,
360p at 280Kpbs

00:04:57.450 --> 00:05:01.840
or 720p at 1.5 megabit.

00:05:01.840 --> 00:05:04.650
The technology performs quite
well on platforms that don't

00:05:04.650 --> 00:05:08.090
have hardware offloading.

00:05:08.090 --> 00:05:10.650
Some platforms do have it, but
they don't necessarily expose

00:05:10.650 --> 00:05:14.950
it through the APIs, Mobilis
is one case.

00:05:14.950 --> 00:05:17.260
It's open source, so you can
just fetch it from WebM

00:05:17.260 --> 00:05:19.210
Project and try it out.

00:05:19.210 --> 00:05:23.470
And typically video file
consists of encoded video with

00:05:23.470 --> 00:05:27.020
VP8 and audio also encoded.

00:05:27.020 --> 00:05:30.510
I wanted to mention Ogg Vorbis
which is also an open source

00:05:30.510 --> 00:05:32.980
code that you can use to kind of
combine the two and create

00:05:32.980 --> 00:05:35.230
a video ready for upload.

00:05:35.230 --> 00:05:38.610
So we created a video, rendered
frames, compressed

00:05:38.610 --> 00:05:42.240
it, encoded it, and now we
are ready to upload.

00:05:42.240 --> 00:05:44.840
So how do we do that?

00:05:44.840 --> 00:05:48.650
YouTube offers Google
data APIs.

00:05:48.650 --> 00:05:51.970
For those of you that haven't
worked with data APIs, just a

00:05:51.970 --> 00:05:53.240
quick overview.

00:05:53.240 --> 00:05:56.850
They are based on REST, so they
are very easy to use.

00:05:56.850 --> 00:06:00.010
Really designed around
HTTP protocols.

00:06:00.010 --> 00:06:01.520
Based on ATOM.

00:06:01.520 --> 00:06:05.240
We tried to follow a couple of
RFC in the API design that

00:06:05.240 --> 00:06:08.520
kind of dictate how do you
map an object model to a

00:06:08.520 --> 00:06:11.900
REST-based implementation.

00:06:11.900 --> 00:06:13.570
I mentioned RFCs here.

00:06:13.570 --> 00:06:14.770
If you guys have
trouble falling

00:06:14.770 --> 00:06:17.300
asleep, I recommend these.

00:06:17.300 --> 00:06:18.495
They are better than
counting sheep.

00:06:18.495 --> 00:06:20.580
I actually like reading
RFCs myself.

00:06:20.580 --> 00:06:23.700
So for me, it's kind of fun to
kind of check out how the

00:06:23.700 --> 00:06:26.690
design was actually driven
by these standards.

00:06:26.690 --> 00:06:29.230
And we support XML-based
encoding.

00:06:29.230 --> 00:06:32.180
So this is the representation of
the actual data, as well as

00:06:32.180 --> 00:06:34.890
JSON, JSON-C and RSS.

00:06:34.890 --> 00:06:38.190
JSON, JSON-C are very relevant
for JavaScript developers, but

00:06:38.190 --> 00:06:39.930
also in the mobile context.

00:06:39.930 --> 00:06:41.920
Where you really care about
the amount of information

00:06:41.920 --> 00:06:44.250
exchanged, JSON-C is
a very efficient

00:06:44.250 --> 00:06:45.480
representation of the data.

00:06:45.480 --> 00:06:48.590
So that's something that you can
request. When you make the

00:06:48.590 --> 00:06:52.690
REST request to our API, you can
actually tell it what type

00:06:52.690 --> 00:06:55.360
of representation you
would like to fetch.

00:06:55.360 --> 00:06:58.870
The data that we expose is
organized as a set of feeds.

00:06:58.870 --> 00:07:00.770
Each feed has a bunch
of entries.

00:07:00.770 --> 00:07:02.860
So for example, video feed
will have entries

00:07:02.860 --> 00:07:05.190
corresponding to individual
videos.

00:07:05.190 --> 00:07:07.790
Subscription feed will have
entries corresponding to

00:07:07.790 --> 00:07:08.930
individual subscriptions.

00:07:08.930 --> 00:07:13.180
And applications integrate with
the YouTube platform by

00:07:13.180 --> 00:07:15.020
basically interacting
with these feeds.

00:07:15.020 --> 00:07:18.360
So entries can be deleted,
created, queried and so forth.

00:07:18.360 --> 00:07:21.700
And that's typically how
an integration works.

00:07:21.700 --> 00:07:25.620
So let's look at a API
invocation example.

00:07:25.620 --> 00:07:28.270
Since I mentioned that the
protocol is based on REST,

00:07:28.270 --> 00:07:31.140
really all I need to do in order
to invoke the YouTube

00:07:31.140 --> 00:07:36.120
API is issue an HTTP get
request to our URL,

00:07:36.120 --> 00:07:38.110
which I just did.

00:07:38.110 --> 00:07:41.370
And I basically asked it to
show me all the top rated

00:07:41.370 --> 00:07:42.450
videos on YouTube.

00:07:42.450 --> 00:07:46.140
And what you see here is an XML
representation, which is

00:07:46.140 --> 00:07:47.890
the default ATOM
representation.

00:07:47.890 --> 00:07:51.560
I could have asked for
JSON or JSON-C.

00:07:51.560 --> 00:07:55.170
Each entry corresponds to
a video from this feed.

00:07:55.170 --> 00:07:57.530
And there's additional metadata
information available

00:07:57.530 --> 00:07:58.790
about each of these entries.

00:07:58.790 --> 00:08:02.190
So I have a playback URL if I
want to play the video back.

00:08:02.190 --> 00:08:05.090
There is description,
tags and so forth.

00:08:05.090 --> 00:08:09.020
So as you see, invoking the
API is quite simple.

00:08:09.020 --> 00:08:10.710
You can do it directly
over HTTP.

00:08:10.710 --> 00:08:15.190
We also provide gdata libraries
that abstract this

00:08:15.190 --> 00:08:15.790
process out.

00:08:15.790 --> 00:08:18.590
So if you don't want to do XML
parsing or JSON parsing, you

00:08:18.590 --> 00:08:21.160
want higher level abstractions,
we have open

00:08:21.160 --> 00:08:22.410
source libraries for that.

00:08:25.030 --> 00:08:27.450
So again, this is kind
of zooming in

00:08:27.450 --> 00:08:29.460
on one of the results.

00:08:29.460 --> 00:08:33.020
What you see here is the feed
that's got a closing entity.

00:08:33.020 --> 00:08:35.220
And then each one of
these videos is

00:08:35.220 --> 00:08:37.460
represented as an entry.

00:08:37.460 --> 00:08:39.770
I'm highlighting here video
ID as one of the important

00:08:39.770 --> 00:08:41.200
attributes of this video.

00:08:41.200 --> 00:08:44.870
And that's pretty much how one
interacts with most of the

00:08:44.870 --> 00:08:47.000
gdata APIs, Google Data
APIs for YouTube.

00:08:47.000 --> 00:08:49.800
So the process of uploading the
video really follows the

00:08:49.800 --> 00:08:51.940
same pattern.

00:08:51.940 --> 00:08:56.600
So how do we actually upload
the video from a game?

00:08:56.600 --> 00:08:59.350
We offer several upload APIs.

00:08:59.350 --> 00:09:03.340
Browser-based API, direct upload
API, direct API and

00:09:03.340 --> 00:09:04.860
direct resumable API.

00:09:04.860 --> 00:09:07.950
The browser-based approach
doesn't really apply in our

00:09:07.950 --> 00:09:11.010
case here because we are talking
about integration from

00:09:11.010 --> 00:09:13.130
a game title and installed
application.

00:09:13.130 --> 00:09:15.700
It is typically used for web
applications where you would

00:09:15.700 --> 00:09:18.590
like to allow the user to upload
a video to YouTube, but

00:09:18.590 --> 00:09:21.020
you want to take control over
the entire experience.

00:09:21.020 --> 00:09:22.960
You don't want them to
ever leave your site.

00:09:22.960 --> 00:09:25.180
You can use the browser-based
approach.

00:09:25.180 --> 00:09:29.020
In this case, we are talking
about integration directly

00:09:29.020 --> 00:09:29.960
from an application.

00:09:29.960 --> 00:09:33.080
And for that, we have two set
of APIs, direct and direct

00:09:33.080 --> 00:09:34.130
resumable uploads.

00:09:34.130 --> 00:09:35.970
Really the important difference
between these two

00:09:35.970 --> 00:09:40.220
is direct resumable, it's very
applicable to mobile context

00:09:40.220 --> 00:09:43.850
or situations where your
connectivity can come and go.

00:09:43.850 --> 00:09:47.290
Because what direct resumable
uploads allows you to do is if

00:09:47.290 --> 00:09:49.720
your connectivity goes down, you
can actually pick up from

00:09:49.720 --> 00:09:50.870
where you left off.

00:09:50.870 --> 00:09:53.690
This way you don't have to kind
of restart the entire

00:09:53.690 --> 00:09:55.420
upload process.

00:09:55.420 --> 00:09:57.690
One thing that is important that
I wanted to highlighted

00:09:57.690 --> 00:10:01.960
is we have to authenticate in
order to upload a video on

00:10:01.960 --> 00:10:03.410
behalf of the user.

00:10:03.410 --> 00:10:06.600
Historically, ClientLogin was
kind of the authentication

00:10:06.600 --> 00:10:08.860
method of choice.

00:10:08.860 --> 00:10:13.330
But recently the industry has
really moved away from

00:10:13.330 --> 00:10:17.550
ClientLogin for many reasons
and instead has adopted an

00:10:17.550 --> 00:10:22.010
AuthSub, OAuth 2.0 or OAuth
2.0 device profile-based

00:10:22.010 --> 00:10:22.960
authorization model.

00:10:22.960 --> 00:10:26.100
And what that allows you to do
is really to fetch a token

00:10:26.100 --> 00:10:29.050
that you can use in order to
perform API operations on

00:10:29.050 --> 00:10:30.200
behalf of the user.

00:10:30.200 --> 00:10:31.550
But you never actually
have to store the

00:10:31.550 --> 00:10:32.780
username and password.

00:10:32.780 --> 00:10:35.560
And it's nice not to have to
do that because if, for

00:10:35.560 --> 00:10:38.860
whatever reason, you encounter
any kind of security breach,

00:10:38.860 --> 00:10:42.210
the only thing that one could
actually obtain is that token

00:10:42.210 --> 00:10:45.670
that is only valid for a
specific subset of the data

00:10:45.670 --> 00:10:46.810
that the user has access to.

00:10:46.810 --> 00:10:49.940
And that token can very easy
be revoked by the user.

00:10:49.940 --> 00:10:54.170
So I wanted to take a little
time and talk about OAuth 2.0

00:10:54.170 --> 00:10:57.950
device profile, which is
something that we have

00:10:57.950 --> 00:11:02.210
launched into beta
very recently.

00:11:02.210 --> 00:11:05.050
The problem that OAuth 2.0
device profile tries to solve

00:11:05.050 --> 00:11:08.930
is how do you actually provide
a nice user experience on

00:11:08.930 --> 00:11:11.750
platforms that typically don't
have a web browser.

00:11:11.750 --> 00:11:16.430
So what I'm trying to do is I
would like to invoke a method

00:11:16.430 --> 00:11:20.480
or service that gives me access
to a token, which I can

00:11:20.480 --> 00:11:23.270
then use to perform API
operations on behalf of the

00:11:23.270 --> 00:11:26.220
user, but I don't have a web
browser on my device.

00:11:26.220 --> 00:11:28.930
So say I'm on a gaming
console--

00:11:28.930 --> 00:11:32.550
some kind of an embedded device,
a TV or what not--

00:11:32.550 --> 00:11:36.640
so OAuth 2.0 device profile
attempts to solve this problem

00:11:36.640 --> 00:11:39.310
by really setting up a flow,
which at some point takes the

00:11:39.310 --> 00:11:43.020
user away from their couch, so
they go and use a web browser

00:11:43.020 --> 00:11:46.990
in order to obtain the
application token or authorize

00:11:46.990 --> 00:11:49.610
the device access
to their data.

00:11:49.610 --> 00:11:53.550
So let's quickly walk
through the flow.

00:11:53.550 --> 00:11:56.350
So what to see here is on the
left hand side, I have the

00:11:56.350 --> 00:11:57.150
device client.

00:11:57.150 --> 00:12:00.520
So that could be gaming console,
TV, some kind of an

00:12:00.520 --> 00:12:02.280
embedded device without
a browser.

00:12:02.280 --> 00:12:04.465
On the right hand side, I have
an authorization server, which

00:12:04.465 --> 00:12:06.800
is something that we have
implemented, and other people

00:12:06.800 --> 00:12:09.340
in the industry are implementing
that as well.

00:12:09.340 --> 00:12:13.560
And the first step of this
sequence is that the device

00:12:13.560 --> 00:12:18.340
client actually asks the
authorization server to

00:12:18.340 --> 00:12:22.390
initiate the authorization
sequence by supplying a client

00:12:22.390 --> 00:12:23.100
identifier.

00:12:23.100 --> 00:12:24.890
A client identifier is something
that you can

00:12:24.890 --> 00:12:27.480
actually obtain through
our API console.

00:12:27.480 --> 00:12:30.850
So when you actually register
your application with Google,

00:12:30.850 --> 00:12:35.370
you can say that this is the
application name, this is

00:12:35.370 --> 00:12:38.300
image or thumbnail that you
would like to show to the user

00:12:38.300 --> 00:12:41.780
when they attempt to perform
an authorization flow.

00:12:41.780 --> 00:12:43.050
And then the client
identifier is

00:12:43.050 --> 00:12:44.290
something you get in exchange.

00:12:44.290 --> 00:12:46.640
This is what the device client
must know in order to actually

00:12:46.640 --> 00:12:48.250
initiate this sequence.

00:12:48.250 --> 00:12:51.860
So really identifies the
application as well.

00:12:51.860 --> 00:12:54.090
So once the client identifier
is submitted to the

00:12:54.090 --> 00:12:58.460
authorization server, the
authorization server returns a

00:12:58.460 --> 00:12:59.690
verification code.

00:12:59.690 --> 00:13:02.220
So you can think of it as a
PIN code that the user can

00:13:02.220 --> 00:13:06.350
then use in order to authorize
this device to access the

00:13:06.350 --> 00:13:07.460
user's data.

00:13:07.460 --> 00:13:13.330
And in addition to the
verification code, user code

00:13:13.330 --> 00:13:15.430
is returned in the
verification URI.

00:13:15.430 --> 00:13:18.730
The verification URI identifies
the place on the

00:13:18.730 --> 00:13:20.420
net where the user has
to go in order to

00:13:20.420 --> 00:13:21.650
complete the sequence.

00:13:21.650 --> 00:13:26.550
So what you see is the next
step in the sequence is C,

00:13:26.550 --> 00:13:28.610
where the user will
visit a site--

00:13:28.610 --> 00:13:30.750
again that's the site that
is identified by the

00:13:30.750 --> 00:13:32.480
verification URI--

00:13:32.480 --> 00:13:36.770
and authorize access to the
user's data upon which the

00:13:36.770 --> 00:13:38.720
device will be able to retrieve
the authorization

00:13:38.720 --> 00:13:39.590
token and proceed.

00:13:39.590 --> 00:13:44.570
So while step C is taking
place, step E--

00:13:44.570 --> 00:13:48.150
the verification code
reattempt--

00:13:48.150 --> 00:13:50.520
is initiated by the
device client.

00:13:50.520 --> 00:13:52.050
So it's basically a
polling mechanism.

00:13:52.050 --> 00:13:54.200
The device will keep polling
until the user

00:13:54.200 --> 00:13:55.730
authorizes the access.

00:13:55.730 --> 00:13:58.690
Then when the user actually
authenticates, authorizes the

00:13:58.690 --> 00:14:05.400
access, the device will obtain
the access token in step F.

00:14:05.400 --> 00:14:08.070
And from then on, that token
can be used to actually

00:14:08.070 --> 00:14:09.450
perform API operations.

00:14:09.450 --> 00:14:12.210
So that's kind of the big
difference between how things

00:14:12.210 --> 00:14:14.100
are typically done with
ClientLogin, where somebody

00:14:14.100 --> 00:14:17.280
tries to type username and
password in front of a TV that

00:14:17.280 --> 00:14:21.500
maybe doesn't have a keyboard,
or they're on a gaming console

00:14:21.500 --> 00:14:24.120
where typically web browsers are
really not a part of their

00:14:24.120 --> 00:14:26.835
experience because it's not
optimized for that.

00:14:26.835 --> 00:14:29.820
So this OAuth 2.0 device
profile tries

00:14:29.820 --> 00:14:31.290
to solve this problem.

00:14:31.290 --> 00:14:34.985
So let's look through a quick
demo of how this thing works

00:14:34.985 --> 00:14:35.530
in practice.

00:14:35.530 --> 00:14:43.930
So I built a small application
here that performs the

00:14:43.930 --> 00:14:45.390
authorization flow.

00:14:45.390 --> 00:14:48.980
And I'm using my favorite
terminal emulator from the

00:14:48.980 --> 00:14:51.775
'80s called Cathode.

00:14:51.775 --> 00:14:53.195
So let's just start
the sequence.

00:14:58.100 --> 00:15:03.290
So what you see here is this
part would be executed by the

00:15:03.290 --> 00:15:06.930
embedded device, so TV or gaming
console or whatever.

00:15:06.930 --> 00:15:09.770
The authorization server
was contacted.

00:15:09.770 --> 00:15:15.280
And the token returned
by it is shown and

00:15:15.280 --> 00:15:17.020
embedded in this URL.

00:15:17.020 --> 00:15:19.080
In practice, we will actually
shorten the URL.

00:15:19.080 --> 00:15:21.320
So right now you see it's
sandbox.google.com.

00:15:21.320 --> 00:15:22.510
It's a little long.

00:15:22.510 --> 00:15:24.260
We'll come up with something
shorter.

00:15:24.260 --> 00:15:26.730
But the idea here is that the
user will be presented with

00:15:26.730 --> 00:15:27.840
this code and the URL.

00:15:27.840 --> 00:15:30.910
Then they go to a website
actually identified by the URL

00:15:30.910 --> 00:15:31.660
and type in the code.

00:15:31.660 --> 00:15:33.350
So let's try to do that.

00:15:36.370 --> 00:15:39.090
So I followed that URL.

00:15:39.090 --> 00:15:43.560
I am presented with a prompt
saying, device is requesting

00:15:43.560 --> 00:15:45.630
permission to connect
with my account.

00:15:45.630 --> 00:15:46.880
Hit continue.

00:15:48.720 --> 00:15:50.670
I don't need to update.

00:15:50.670 --> 00:15:55.510
And then what I see is my
application, which I

00:15:55.510 --> 00:15:56.090
registered.

00:15:56.090 --> 00:15:58.420
So I mentioned earlier that you
can provide a thumbnail

00:15:58.420 --> 00:15:59.750
that identifies the
application, the

00:15:59.750 --> 00:16:01.090
title and so on.

00:16:01.090 --> 00:16:03.860
So this application is asking
for permission in order to

00:16:03.860 --> 00:16:05.200
access my YouTube account.

00:16:05.200 --> 00:16:08.530
I will grant access.

00:16:08.530 --> 00:16:11.200
OK.

00:16:11.200 --> 00:16:14.570
Now that I have done this, you
have noticed that the polling

00:16:14.570 --> 00:16:15.260
has stopped.

00:16:15.260 --> 00:16:20.710
So my client application
successfully obtained the

00:16:20.710 --> 00:16:23.850
authorization token.

00:16:23.850 --> 00:16:32.736
And then I will complete
the upload.

00:16:42.080 --> 00:16:42.240
Yeah.

00:16:42.240 --> 00:16:45.850
So this process now performs a
resumable upload of a video

00:16:45.850 --> 00:16:48.490
that I had on my local
machine to YouTube.

00:16:48.490 --> 00:16:51.800
That upload was actually done
into my account using the

00:16:51.800 --> 00:16:55.990
authorization token that this
polling client obtained from

00:16:55.990 --> 00:16:58.170
the authorization server
on my behalf.

00:16:58.170 --> 00:17:00.830
So you saw that in this embedded
environment that I'm

00:17:00.830 --> 00:17:02.190
showing here, there was
no web browser.

00:17:02.190 --> 00:17:06.430
So doing any sort of user
experience based on web

00:17:06.430 --> 00:17:07.380
browser wouldn't have worked.

00:17:07.380 --> 00:17:10.780
But with OAuth 2.0 device
profile, I can actually still

00:17:10.780 --> 00:17:12.030
implement that.

00:17:15.510 --> 00:17:18.260
So we talked about
video encoding.

00:17:18.260 --> 00:17:19.089
We have the video.

00:17:19.089 --> 00:17:22.819
We uploaded it to youtube.com
using the API.

00:17:22.819 --> 00:17:25.420
Now let's talk a little
bit about player APIs.

00:17:25.420 --> 00:17:30.510
And how can we customize
playback behavior with our

00:17:30.510 --> 00:17:32.620
player APIs?

00:17:32.620 --> 00:17:36.720
So we offer three ways to
customize the player and the

00:17:36.720 --> 00:17:40.370
playback behavior, URI
parameter, JavaScript API, and

00:17:40.370 --> 00:17:41.310
ActionScript API.

00:17:41.310 --> 00:17:43.450
So let's quickly walk
through them.

00:17:43.450 --> 00:17:47.570
The simplest way to influence
how the player

00:17:47.570 --> 00:17:49.150
works is player parameter.

00:17:49.150 --> 00:17:52.170
So in the top example,
I have a parameter

00:17:52.170 --> 00:17:54.690
called FullScreen, fs=0.

00:17:54.690 --> 00:17:58.650
So by appending this parameter
to my embed source, what will

00:17:58.650 --> 00:18:01.300
happen is that the user will not
have an option to actually

00:18:01.300 --> 00:18:03.120
pop up the video in
full screen mode.

00:18:03.120 --> 00:18:07.260
So again if you are designing
an application, which for

00:18:07.260 --> 00:18:09.820
whatever reason doesn't want
to grant the user access to

00:18:09.820 --> 00:18:12.820
full screen playback because
you always want them to see

00:18:12.820 --> 00:18:15.830
your web application, you can
actually do that by appending

00:18:15.830 --> 00:18:17.370
a player parameter
to the embed.

00:18:17.370 --> 00:18:19.170
So it's very simple.

00:18:19.170 --> 00:18:21.440
On the bottom, I have
an example of

00:18:21.440 --> 00:18:23.180
another parameter, autoplay.

00:18:23.180 --> 00:18:25.960
What that will do is when the
user navigates to a page,

00:18:25.960 --> 00:18:29.960
which includes this embed, the
video embedded on the page

00:18:29.960 --> 00:18:32.000
will start playing right away.

00:18:32.000 --> 00:18:36.950
And one thing to notice, the
syntax of the bottom embed is

00:18:36.950 --> 00:18:41.410
something that we have
introduced fairly recently.

00:18:41.410 --> 00:18:42.480
It's the iframe embed.

00:18:42.480 --> 00:18:43.850
It is kind of the default
embed right

00:18:43.850 --> 00:18:45.310
now for YouTube videos.

00:18:45.310 --> 00:18:48.870
And we have a session about
details of this

00:18:48.870 --> 00:18:51.095
implementation, how it
works, tomorrow.

00:18:54.540 --> 00:18:57.920
So we talked about the
player parameters.

00:18:57.920 --> 00:19:00.500
But sometimes you actually want
much finer control over

00:19:00.500 --> 00:19:02.860
what the playback experience
is like.

00:19:02.860 --> 00:19:06.040
And for that, we actually have
a JavaScript API and

00:19:06.040 --> 00:19:06.960
ActionScript API.

00:19:06.960 --> 00:19:09.220
So if you are a Flash developer,
you can invoke

00:19:09.220 --> 00:19:12.570
methods on the player to start
playback, stop playback,

00:19:12.570 --> 00:19:14.410
register for events
and so forth.

00:19:14.410 --> 00:19:16.500
And you can do the same
thing with JavaScript.

00:19:16.500 --> 00:19:19.030
So here's an example where I'm
actually creating an instance

00:19:19.030 --> 00:19:22.330
of a player registering to a
couple of events and really

00:19:22.330 --> 00:19:25.210
what I'm trying to achieve is
I want the video to start

00:19:25.210 --> 00:19:27.920
playing as soon as someone
navigates to the page.

00:19:27.920 --> 00:19:29.410
That excuses this JavaScript.

00:19:29.410 --> 00:19:32.570
And then I want the playback
to stop after 15 seconds.

00:19:32.570 --> 00:19:34.220
So let's try that.

00:19:38.400 --> 00:19:39.475
Maybe we crank up the volume.

00:19:39.475 --> 00:19:39.640
[MUSIC PLAYING --

00:19:39.640 --> 00:19:40.890
THE ROLLING STONES,
"GIMME SHELTER"]

00:19:51.570 --> 00:19:56.570
JAREK WILKIEWICZ: So if you look
through the code, really

00:19:56.570 --> 00:19:59.150
what I did here is I embedded
this video.

00:19:59.150 --> 00:20:01.820
This is the video ID that I was
showing you earlier in the

00:20:01.820 --> 00:20:02.980
presentation.

00:20:02.980 --> 00:20:06.590
I registered two events on
ready, which is called--

00:20:06.590 --> 00:20:10.690
this event gets actually fired
when player is ready to

00:20:10.690 --> 00:20:15.220
receive API invocations
and on state change.

00:20:15.220 --> 00:20:18.460
When player is ready, I trigger
the video playback.

00:20:18.460 --> 00:20:24.480
And upon state change, when the
playback starts, I set up

00:20:24.480 --> 00:20:27.570
a timer, which will fire and
trigger the video to stop

00:20:27.570 --> 00:20:29.500
after 15 seconds.

00:20:29.500 --> 00:20:36.220
So I can very easily change
that to say five seconds.

00:20:36.220 --> 00:20:37.470
Let's see.

00:20:44.030 --> 00:20:45.070
Nothing interesting happens.

00:20:45.070 --> 00:20:48.500
But I think you get the point
that you can actually control

00:20:48.500 --> 00:20:50.760
the playback behavior through
the player API.

00:20:55.530 --> 00:20:57.950
So we talked about the
APIs and platform

00:20:57.950 --> 00:20:59.470
integration and so forth.

00:20:59.470 --> 00:21:03.290
So now I would like to let Doug
talk a little bit more

00:21:03.290 --> 00:21:05.820
about Black Ops.

00:21:05.820 --> 00:21:07.420
But first a question.

00:21:07.420 --> 00:21:11.240
How many of you guys have
actually played the game?

00:21:11.240 --> 00:21:13.320
Fair amount, but I see some
folks that haven't.

00:21:13.320 --> 00:21:16.760
So why don't we look at the
game trailer to give you a

00:21:16.760 --> 00:21:18.510
little better idea of what
the game is all about.

00:21:18.510 --> 00:21:21.380
And then Doug will take you
through the integration

00:21:21.380 --> 00:21:23.480
process that he went through
with his team.

00:21:29.928 --> 00:21:30.068
[MUSIC PLAYING--

00:21:30.068 --> 00:21:31.318
THE ROLLING STONES,
"GIMME SHELTER"]

00:22:33.060 --> 00:22:34.240
DOUG MUIR: I'm Doug Muir.

00:22:34.240 --> 00:22:38.490
I'm a Technical Director at
Activision, the company that

00:22:38.490 --> 00:22:40.310
published Call of
Duty: Black Ops.

00:22:40.310 --> 00:22:43.270
And I'm here to talk a little
bit about the theater feature

00:22:43.270 --> 00:22:45.470
for Call of Duty: Black
Ops, and how it

00:22:45.470 --> 00:22:46.950
integrates with YouTube.

00:22:46.950 --> 00:22:50.030
But first I want to talk about
what we were trying to do.

00:22:50.030 --> 00:22:52.080
The primary thing we were trying
to do with the theater

00:22:52.080 --> 00:22:54.860
functionality and allowing
people to upload their videos

00:22:54.860 --> 00:22:57.110
to YouTube is we were trying to
let people share their cool

00:22:57.110 --> 00:22:58.620
moments in the game.

00:22:58.620 --> 00:23:02.650
You do something neat, you get
five kills in a row, you take

00:23:02.650 --> 00:23:05.000
out a helicopter with a
Tomahawk, you want to tell

00:23:05.000 --> 00:23:05.730
your buddies about it.

00:23:05.730 --> 00:23:10.450
You want to show them how that
happened, how that worked.

00:23:10.450 --> 00:23:13.760
And so YouTube is a great way
for us to let people share

00:23:13.760 --> 00:23:17.510
those cool moments
with each other.

00:23:17.510 --> 00:23:19.790
In those terms, we were sort
of looking at two things.

00:23:19.790 --> 00:23:24.910
We were looking to let our
existing community connect

00:23:24.910 --> 00:23:26.720
with each other and share
these cool moments.

00:23:26.720 --> 00:23:31.210
But we were also looking to
expose Call of Duty to players

00:23:31.210 --> 00:23:35.100
who haven't gotten into
the game yet.

00:23:35.100 --> 00:23:37.625
And we obviously wanted all the
reporting and engagement

00:23:37.625 --> 00:23:39.730
and analysis that we could get,
but we didn't want to

00:23:39.730 --> 00:23:41.470
have to build YouTube to
get all this stuff.

00:23:44.600 --> 00:23:46.680
So the uploading process.

00:23:46.680 --> 00:23:50.920
The user experience for it is
not the OAuth 2.0 device

00:23:50.920 --> 00:23:54.570
profile that Jarek just
walked you through.

00:23:54.570 --> 00:23:58.520
A, that wasn't available when
we did this integration.

00:23:58.520 --> 00:24:03.360
And B, as I'll talk about a
little bit later, we came to

00:24:03.360 --> 00:24:04.520
the YouTube party
a little late.

00:24:04.520 --> 00:24:06.760
And the game was pretty much
baked at that point.

00:24:06.760 --> 00:24:09.270
We wouldn't have been able to
integrate anything for the

00:24:09.270 --> 00:24:11.360
device profile integration
anyway.

00:24:11.360 --> 00:24:15.460
But here's a short video sort
of showing the process for

00:24:15.460 --> 00:24:19.896
uploading a clip from Call of
Duty: Black Ops to YouTube.

00:24:19.896 --> 00:24:21.146
[VIDEO PLAYBACK]

00:24:24.333 --> 00:24:25.130
-Hey everyone.

00:24:25.130 --> 00:24:25.850
It's Anoj.

00:24:25.850 --> 00:24:28.610
And right now I have a tutorial
on how to get your

00:24:28.610 --> 00:24:31.170
Black Op clips onto your
YouTube account

00:24:31.170 --> 00:24:32.980
and onto your computer.

00:24:32.980 --> 00:24:35.190
And I know some people already
know how to do this, but if

00:24:35.190 --> 00:24:38.340
you don't, I hope this video
is going to be helpful.

00:24:38.340 --> 00:24:42.440
The only things that you need
are an Xbox 360 or PS3, the

00:24:42.440 --> 00:24:44.700
game itself, an internet
connection

00:24:44.700 --> 00:24:46.880
and a YouTube account.

00:24:46.880 --> 00:24:49.170
And the greatest thing about
this method is that it

00:24:49.170 --> 00:24:51.060
requires no capture
card, cables,

00:24:51.060 --> 00:24:53.290
wires or editing software.

00:24:53.290 --> 00:24:57.720
And most importantly, this
process is absolutely free.

00:24:57.720 --> 00:25:00.160
I'm going to go step by step,
starting with the things you

00:25:00.160 --> 00:25:03.130
need to do on the internet and
then move on to the things you

00:25:03.130 --> 00:25:06.770
need to do with your
Xbox or PS3.

00:25:06.770 --> 00:25:09.960
The first step is to go to
callofduty.com and register an

00:25:09.960 --> 00:25:11.960
account there.

00:25:11.960 --> 00:25:15.340
Once you do that, go to
callofduty.com/theater and

00:25:15.340 --> 00:25:17.980
link your gamertag, which will
require you using your

00:25:17.980 --> 00:25:20.120
Windows Live ID.

00:25:20.120 --> 00:25:22.535
Now go back to
callofduty.com/theater.

00:25:22.535 --> 00:25:25.965
And on that page, click to link
your YouTube account, and

00:25:25.965 --> 00:25:28.520
then click to allow access
to your YouTube account.

00:25:28.520 --> 00:25:30.350
If you don't allow access,
this whole

00:25:30.350 --> 00:25:32.640
process will not work.

00:25:32.640 --> 00:25:36.335
Now switch over to your Xbox
360 or PS3, and go into

00:25:36.335 --> 00:25:38.510
multiplayer and then
into theater.

00:25:41.220 --> 00:25:43.460
Select the game play
that you want.

00:25:43.460 --> 00:25:46.560
And while you are watching that
game, find a segment you

00:25:46.560 --> 00:25:47.860
want to capture and
select record.

00:25:47.860 --> 00:25:49.110
[VIDEO GAME DIALOG AND SOUNDS]

00:26:07.750 --> 00:26:09.740
-When you have reached the end
of the clip segment that you

00:26:09.740 --> 00:26:12.200
want to capture, hit
record again.

00:26:12.200 --> 00:26:15.060
A very important note here,
your clip cannot be longer

00:26:15.060 --> 00:26:18.400
than 30 seconds, or it
will not be uploaded.

00:26:18.400 --> 00:26:21.460
Next, you have to name the clip,
save it and upload it to

00:26:21.460 --> 00:26:22.710
a slot on your Fileshare.

00:26:32.660 --> 00:26:35.178
Now get out of viewing the full
game, and then take your

00:26:35.178 --> 00:26:37.850
clip from your Fileshare, and
click select for playback.

00:26:41.460 --> 00:26:43.190
After that, you'll notice
that the render clip

00:26:43.190 --> 00:26:44.366
option is now available.

00:26:44.366 --> 00:26:45.940
So click on that.

00:26:45.940 --> 00:26:47.500
And then the clip will
be opened and

00:26:47.500 --> 00:26:49.710
will run through once.

00:26:49.710 --> 00:26:52.230
After, you will see a loading
screen for the clip, which

00:26:52.230 --> 00:26:56.610
means it's being uploaded and
rendered to the internet.

00:26:56.610 --> 00:26:58.990
After a couple hours, your clip
should be uploaded to

00:26:58.990 --> 00:27:01.350
your YouTube account and
to your Fileshare on

00:27:01.350 --> 00:27:03.810
callofduty.com/theater.

00:27:03.810 --> 00:27:06.805
This process does take some
time, so don't expect your

00:27:06.805 --> 00:27:09.920
clip to be there as soon as the
rendering has finished.

00:27:09.920 --> 00:27:12.430
So in other words, try to be
as patient as possible.

00:27:18.020 --> 00:27:18.430
[END VIDEO PLAYBACK]

00:27:18.430 --> 00:27:20.580
DOUG MUIR: So that's the flow.

00:27:20.580 --> 00:27:23.650
And you can see it sort of
uses the normal web-based

00:27:23.650 --> 00:27:25.300
OAuth flow.

00:27:25.300 --> 00:27:27.030
And we'll talk a little
bit about the details

00:27:27.030 --> 00:27:28.780
a little bit later.

00:27:28.780 --> 00:27:32.550
But how did we end up here?

00:27:32.550 --> 00:27:36.230
Where we started actually
was we weren't

00:27:36.230 --> 00:27:37.770
thinking YouTube at all.

00:27:37.770 --> 00:27:39.930
We were thinking, OK we have
this cool feature.

00:27:39.930 --> 00:27:43.030
We can let people share their
clips in the game.

00:27:43.030 --> 00:27:44.090
And you saw a little
bit of that.

00:27:44.090 --> 00:27:46.110
We have the Fileshare in the
game, and people can download

00:27:46.110 --> 00:27:48.060
the clips and look
at it from there.

00:27:48.060 --> 00:27:52.920
But we wanted to let people
share outside of our world of

00:27:52.920 --> 00:27:54.740
callofduty.com.

00:27:54.740 --> 00:27:57.800
So our first plan was actually
we were going to put the clips

00:27:57.800 --> 00:27:59.580
available on callofduty.com.

00:27:59.580 --> 00:28:02.340
So you could go to
callofduty.com, find your

00:28:02.340 --> 00:28:05.100
clip, download it, and then do
whatever you wanted with it.

00:28:05.100 --> 00:28:09.250
Upload it to YouTube, send it
your grandma, whatever.

00:28:09.250 --> 00:28:13.810
But that's really kind of a
horrible user experience.

00:28:13.810 --> 00:28:18.540
So the next sort of evolution
of our thinking was we would

00:28:18.540 --> 00:28:21.420
turn callofduty.com into
a video streaming site.

00:28:21.420 --> 00:28:25.300
We would serve the videos.

00:28:25.300 --> 00:28:27.560
We would have to do some
transcoding especially on the

00:28:27.560 --> 00:28:29.910
Xbox videos.

00:28:29.910 --> 00:28:33.360
Again sort of due to the
lateness with which we came to

00:28:33.360 --> 00:28:36.590
YouTube, we were not using WebM
when the game launched.

00:28:36.590 --> 00:28:39.670
We were using Motion JPEG on the
Xbox actually because that

00:28:39.670 --> 00:28:43.290
was the quickest free
codec for us to

00:28:43.290 --> 00:28:46.110
integrate with the game.

00:28:46.110 --> 00:28:48.610
As we were working through this
idea of streaming the

00:28:48.610 --> 00:28:52.650
videos from callofduty.com, we
started asking ourselves, how

00:28:52.650 --> 00:28:53.870
much video are we talking
about here?

00:28:53.870 --> 00:28:55.540
Call of Duty is a
pretty big game.

00:28:55.540 --> 00:28:58.310
We expected Black Ops
to do very well.

00:28:58.310 --> 00:29:01.270
And in fact Black Ops
has sold north of 20

00:29:01.270 --> 00:29:03.740
million units so far.

00:29:03.740 --> 00:29:06.230
As we started thinking about the
size of the community, and

00:29:06.230 --> 00:29:11.200
how much video we might be
taking on here, we realized,

00:29:11.200 --> 00:29:14.570
this is not Activision's
core competency.

00:29:14.570 --> 00:29:16.770
Let's find somebody who
does this pretty well.

00:29:16.770 --> 00:29:18.020
And that's when we thought
of YouTube.

00:29:21.010 --> 00:29:24.080
Again, because we came YouTube
so late, I think we first

00:29:24.080 --> 00:29:26.370
started talking to them about
doing this integration

00:29:26.370 --> 00:29:28.310
sometime in September
for a game that was

00:29:28.310 --> 00:29:30.670
launching in November.

00:29:30.670 --> 00:29:33.570
We really had no way of
doing any sort of

00:29:33.570 --> 00:29:36.320
account linking in game.

00:29:36.320 --> 00:29:38.710
Because of that, because we
couldn't link your account in

00:29:38.710 --> 00:29:42.860
game, we wanted to have a good
user experience for users who

00:29:42.860 --> 00:29:44.130
haven't linked their account.

00:29:44.130 --> 00:29:47.080
We didn't want you to go
theater, and your first time

00:29:47.080 --> 00:29:50.220
trying to render a movie have
to tell you, sorry you don't

00:29:50.220 --> 00:29:51.500
have your YouTube
account link.

00:29:51.500 --> 00:29:52.320
You can't upload.

00:29:52.320 --> 00:29:55.570
We wanted something to happen
even for users who hadn't yet

00:29:55.570 --> 00:29:58.030
linked their YouTube accounts,
or who didn't want a YouTube

00:29:58.030 --> 00:29:59.060
account for whatever reason.

00:29:59.060 --> 00:30:00.810
They just wanted to share
their video and not will

00:30:00.810 --> 00:30:02.970
bother with a YouTube account.

00:30:02.970 --> 00:30:05.310
After spending some time talking
to YouTube, we came up

00:30:05.310 --> 00:30:10.370
with these per-platform Call
of Duty channels, sort of

00:30:10.370 --> 00:30:12.150
catch-all accounts for
people who haven't

00:30:12.150 --> 00:30:15.010
linked their accounts.

00:30:15.010 --> 00:30:17.850
And we upload the videos to
those channels on behalf of

00:30:17.850 --> 00:30:20.663
these sort of role users,
these fictional users.

00:30:23.340 --> 00:30:25.160
And that actually worked
pretty well.

00:30:25.160 --> 00:30:28.160
So this is how the flow works.

00:30:28.160 --> 00:30:30.970
You build your clip on
your Xbox, your PS3.

00:30:30.970 --> 00:30:32.380
You upload it.

00:30:32.380 --> 00:30:36.420
It actually goes to DemonWare,
which is the Activision studio

00:30:36.420 --> 00:30:39.610
that handles all of the
multi-player backends for all

00:30:39.610 --> 00:30:40.440
Activision titles.

00:30:40.440 --> 00:30:41.510
They handle matchmaking.

00:30:41.510 --> 00:30:45.550
They handle stats, backends,
everything.

00:30:45.550 --> 00:30:49.070
And we go to DemonWare, A,
because we did this very late,

00:30:49.070 --> 00:30:50.520
and we were already talking
to DemonWare.

00:30:50.520 --> 00:30:53.840
But B, some of the first parties
have some policy rules

00:30:53.840 --> 00:30:58.470
about talking to just anybody
out on the internet.

00:30:58.470 --> 00:31:02.260
So to work around those policy
issues, the easiest thing to

00:31:02.260 --> 00:31:05.510
do was to just send it
to DemonWare first.

00:31:05.510 --> 00:31:07.660
Which actually turned out to be
very convenient in terms of

00:31:07.660 --> 00:31:08.580
account linking.

00:31:08.580 --> 00:31:11.700
Because in the user flow that we
saw a little while ago for

00:31:11.700 --> 00:31:15.710
linking your YouTube account,
that token that we get back,

00:31:15.710 --> 00:31:18.060
the OAuth token is actually
stored at DemonWare.

00:31:18.060 --> 00:31:21.490
And it's associated with
your consul identity.

00:31:21.490 --> 00:31:24.570
So when the video hits
DemonWare, they look up for

00:31:24.570 --> 00:31:28.050
the user that you're playing
as, do they have an OAuth

00:31:28.050 --> 00:31:29.010
token for you.

00:31:29.010 --> 00:31:33.800
And if so, they upload that
video to YouTube under your

00:31:33.800 --> 00:31:35.130
account for you.

00:31:35.130 --> 00:31:40.170
If not, then they go to one of
these shared accounts, which

00:31:40.170 --> 00:31:41.330
get a lot of videos.

00:31:41.330 --> 00:31:45.050
And all the videos eventually
end up at YouTube.

00:31:45.050 --> 00:31:47.110
And if you have linked your
account, it ends up in the

00:31:47.110 --> 00:31:48.250
right place.

00:31:48.250 --> 00:31:50.690
And from there, you can watch
the videos directly on

00:31:50.690 --> 00:31:54.220
YouTube, or you can go to
callofduty.com/theater and

00:31:54.220 --> 00:31:58.120
find your videos there and watch
them there if that's

00:31:58.120 --> 00:32:00.350
what you like to do.

00:32:00.350 --> 00:32:02.320
So the benefits of integrating
for us.

00:32:02.320 --> 00:32:04.170
The big one was actually
the ROI.

00:32:04.170 --> 00:32:08.460
And it's not so much that we
made a ton of money from the

00:32:08.460 --> 00:32:11.310
YouTube views is that we saved
so much money by not having to

00:32:11.310 --> 00:32:13.200
build it ourselves.

00:32:13.200 --> 00:32:16.940
So rather than having to spend
all the money to engineer a

00:32:16.940 --> 00:32:19.870
solution for the transcoding
and streaming and buildout,

00:32:19.870 --> 00:32:24.750
the serving infrastructure for
handling what we expected was

00:32:24.750 --> 00:32:28.130
going to be sort of a very
longtail distribution of

00:32:28.130 --> 00:32:32.950
views, we were able to push all
that work off on YouTube

00:32:32.950 --> 00:32:37.540
and have them pay us a little
bit, which was a huge net win.

00:32:37.540 --> 00:32:40.050
In terms of user engagement,
it's been working very well.

00:32:40.050 --> 00:32:44.910
Since the game launched on
November 9, we've had over 3.6

00:32:44.910 --> 00:32:49.800
million uploads of videos to
people's own YouTube channels

00:32:49.800 --> 00:32:52.760
and the shared YouTube
channels.

00:32:52.760 --> 00:32:57.090
Nearly 70 million total views.

00:32:57.090 --> 00:33:04.360
And it's something that this
is a true community-based

00:33:04.360 --> 00:33:07.600
marketing opportunity for
lack of a better word.

00:33:07.600 --> 00:33:08.810
We get PR.

00:33:08.810 --> 00:33:09.800
We get community buzz.

00:33:09.800 --> 00:33:11.080
We get people sharing
their videos,

00:33:11.080 --> 00:33:12.430
talking about the game.

00:33:12.430 --> 00:33:15.490
You go to YouTube, and you
search for Call of Duty: Black

00:33:15.490 --> 00:33:18.140
Ops, there's a ton of
videos basically

00:33:18.140 --> 00:33:19.040
advertising our game.

00:33:19.040 --> 00:33:21.380
It's fantastic.

00:33:21.380 --> 00:33:26.110
Here are some of the key
insights from the views and

00:33:26.110 --> 00:33:28.120
the uploads.

00:33:28.120 --> 00:33:29.940
I'm not going to read it.

00:33:29.940 --> 00:33:33.560
Some of the interesting ones are
the male/female breakdown

00:33:33.560 --> 00:33:35.170
is just about what you might
expect for a game

00:33:35.170 --> 00:33:36.420
like Call of Duty.

00:33:38.630 --> 00:33:40.800
Most of the traffic is actually
coming from YouTube.

00:33:40.800 --> 00:33:42.150
The vast majority
of the traffic

00:33:42.150 --> 00:33:43.110
is coming from YouTube.

00:33:43.110 --> 00:33:47.000
Either people going to the Call
of Duty channel pages or

00:33:47.000 --> 00:33:48.680
just searching for Call
of Duty and finding

00:33:48.680 --> 00:33:50.110
the videos that way.

00:33:50.110 --> 00:33:52.400
In terms of player behavior, the
thing that was interesting

00:33:52.400 --> 00:33:55.270
to us was for a feature that--

00:33:55.270 --> 00:33:58.550
as you saw from the video
outlining how you upload

00:33:58.550 --> 00:34:01.580
videos-- for a feature that's
kind of buried in the UI,

00:34:01.580 --> 00:34:06.150
we've had 580,000 plus players
upload videos.

00:34:06.150 --> 00:34:08.820
And most of them actually have
uploaded more than one.

00:34:08.820 --> 00:34:11.780
So it's not something where most
players are going in and

00:34:11.780 --> 00:34:15.150
uploading one video and then
giving up on the future.

00:34:15.150 --> 00:34:17.489
Over 80,000 players
have uploaded more

00:34:17.489 --> 00:34:19.139
than 10 videos each.

00:34:19.139 --> 00:34:24.820
And we've got one user who, as
of late April, he'd uploaded

00:34:24.820 --> 00:34:26.409
over 500 videos.

00:34:26.409 --> 00:34:31.150
So that guy's working at a clip
of about three a day.

00:34:31.150 --> 00:34:32.199
Which we think is great.

00:34:32.199 --> 00:34:35.870
I mean that sort of validates
our whole thinking in terms of

00:34:35.870 --> 00:34:36.300
the feature.

00:34:36.300 --> 00:34:41.270
We expected that there would be
sort of that creative core,

00:34:41.270 --> 00:34:44.400
who would really get
into the future and

00:34:44.400 --> 00:34:45.840
produce a lot of videos.

00:34:45.840 --> 00:34:49.389
But we also wanted to build
something that the more casual

00:34:49.389 --> 00:34:51.389
user would use.

00:34:51.389 --> 00:34:54.080
And we think that the usage
stats are sort of

00:34:54.080 --> 00:34:55.550
bearing that out.

00:34:55.550 --> 00:35:01.400
In terms of views, this slide
just blows me away.

00:35:01.400 --> 00:35:05.380
Well over 90% of the videos have
had less than 100 views

00:35:05.380 --> 00:35:08.110
since November 15.

00:35:08.110 --> 00:35:10.810
Which, when you think of the
average age of the videos,

00:35:10.810 --> 00:35:12.930
that's less than one
view per day.

00:35:12.930 --> 00:35:16.160
There's no way that we would
have been in a position to

00:35:16.160 --> 00:35:18.710
handle that number of views,
building out an

00:35:18.710 --> 00:35:19.930
infrastructure ourselves.

00:35:19.930 --> 00:35:24.930
Akamai or any other CDN would
not have helped with 90% of

00:35:24.930 --> 00:35:28.050
the views that we would
have had to serve.

00:35:28.050 --> 00:35:31.540
So having YouTube and their
scale and their serving

00:35:31.540 --> 00:35:35.210
capability was a huge
win for us.

00:35:35.210 --> 00:35:43.420
I mean the number of of videos
with over 100,000 views is 36.

00:35:43.420 --> 00:35:46.050
The distribution is just
frightening for anybody who

00:35:46.050 --> 00:35:48.505
would be trying to build a
system like this themselves.

00:35:51.750 --> 00:35:53.010
In terms of what went right.

00:35:53.010 --> 00:35:56.620
I mean like I said, we started
this in September for a game

00:35:56.620 --> 00:35:57.710
that was shipping in November.

00:35:57.710 --> 00:36:00.440
And this was ready to go on
November 9 when Call of Duty:

00:36:00.440 --> 00:36:02.135
Black Ops hit store shelves.

00:36:05.320 --> 00:36:07.300
The way I think about it, it was
actually ready on November

00:36:07.300 --> 00:36:10.630
8 when the game started
launching in Australia.

00:36:10.630 --> 00:36:13.020
I mean that was a
huge win for us.

00:36:13.020 --> 00:36:14.320
The technical support
that we got

00:36:14.320 --> 00:36:18.120
from YouTube was fantastic.

00:36:18.120 --> 00:36:21.110
The API docks and the
public forums

00:36:21.110 --> 00:36:22.520
answered most of our questions.

00:36:22.520 --> 00:36:27.120
The developer support was
fantastic when it didn't.

00:36:27.120 --> 00:36:30.090
And really once we launched,
except for one issue where we

00:36:30.090 --> 00:36:33.590
didn't know to watch the
YouTube maintenance

00:36:33.590 --> 00:36:35.170
notifications--

00:36:35.170 --> 00:36:37.780
so there was one window when
YouTube went into a read-only

00:36:37.780 --> 00:36:39.790
mode, and we didn't
know about it.

00:36:39.790 --> 00:36:42.210
And so we started panicking
because our writes were

00:36:42.210 --> 00:36:44.140
failing, our uploads
were failing.

00:36:44.140 --> 00:36:46.330
Except for that, we haven't had
any issues since this went

00:36:46.330 --> 00:36:51.150
live in November after
3.6 million uploads.

00:36:53.750 --> 00:36:57.160
In terms of what we could
have done better.

00:36:57.160 --> 00:36:59.530
Looking back, things could have
gone a lot more smoothly

00:36:59.530 --> 00:37:03.470
had we engaged YouTube much
earlier in the process.

00:37:03.470 --> 00:37:05.370
Had we done that, we might have
been able to figure out

00:37:05.370 --> 00:37:07.760
something a little bit more
streamlined and a little bit

00:37:07.760 --> 00:37:12.970
more user-friendly in terms of
linking your YouTube accounts.

00:37:12.970 --> 00:37:17.650
And the fact that we didn't have
a decent codec on Xbox

00:37:17.650 --> 00:37:19.590
kind of hurt things.

00:37:19.590 --> 00:37:20.060
Well, not kind of.

00:37:20.060 --> 00:37:21.620
It did hurt things.

00:37:21.620 --> 00:37:25.840
The Motion JPEG encodings were
so large, and because they do

00:37:25.840 --> 00:37:29.770
have to go through DemonWare,
we just couldn't allow clips

00:37:29.770 --> 00:37:31.390
longer than 30 seconds.

00:37:31.390 --> 00:37:33.430
And because of platform parity,
we couldn't allow it

00:37:33.430 --> 00:37:37.230
even on platforms that did
have better encoders.

00:37:37.230 --> 00:37:41.080
We've since added WebM encoding
to one of the recent

00:37:41.080 --> 00:37:43.830
title updates for Call of Duty:
Black Ops, so we will be

00:37:43.830 --> 00:37:47.010
looking at relaxing that
30 second limit.

00:37:47.010 --> 00:37:49.700
That's absolutely not a
YouTube limitation.

00:37:49.700 --> 00:37:52.280
They've been asking us for
longer videos since the

00:37:52.280 --> 00:37:53.280
feature became available.

00:37:53.280 --> 00:37:58.200
That's something we need to
work through on our side.

00:37:58.200 --> 00:38:01.850
What we learned after we
launched was we really should

00:38:01.850 --> 00:38:03.230
have had somebody ready
to engage the

00:38:03.230 --> 00:38:05.810
community on day one.

00:38:05.810 --> 00:38:08.950
Because we didn't have a lot
of time to really put this

00:38:08.950 --> 00:38:12.660
together and build a proper UI
around it, we had a lot of

00:38:12.660 --> 00:38:15.360
user confusion about uploads.

00:38:15.360 --> 00:38:19.650
We had users posting comments on
the YouTube channel about,

00:38:19.650 --> 00:38:20.890
hey you stole my video.

00:38:20.890 --> 00:38:22.790
That's my video.

00:38:22.790 --> 00:38:25.570
They didn't understand that when
they uploaded the video

00:38:25.570 --> 00:38:27.850
without having a linked account,
it was going to go to

00:38:27.850 --> 00:38:31.270
this shared account that
wasn't theirs.

00:38:31.270 --> 00:38:37.080
We could have really done a much
better job of engaging

00:38:37.080 --> 00:38:40.290
the community and educating
the community early.

00:38:40.290 --> 00:38:43.280
It took us probably two or three
weeks to get branding up

00:38:43.280 --> 00:38:46.140
on the channels, which probably
also hurt the

00:38:46.140 --> 00:38:47.310
messaging on that.

00:38:47.310 --> 00:38:49.930
You go to this YouTube channel
that has all these videos,

00:38:49.930 --> 00:38:51.420
some of which are yours.

00:38:51.420 --> 00:38:53.660
And it looks like just anybody
else's YouTube channel.

00:38:53.660 --> 00:38:56.900
It doesn't look like an official
Call of Duty channel.

00:38:56.900 --> 00:39:00.380
I think that added to the
confusion as well.

00:39:00.380 --> 00:39:04.230
Really until we did a similar
presentation at GDC in this,

00:39:04.230 --> 00:39:07.210
we haven't done a whole lot
of PR on the feature.

00:39:07.210 --> 00:39:08.620
It's kind of buried in the UI.

00:39:08.620 --> 00:39:11.340
We didn't really talk about it
much with the gaming press.

00:39:11.340 --> 00:39:15.840
So we really could have done a
much better job of talking

00:39:15.840 --> 00:39:19.090
about the feature and really
letting people know how cool

00:39:19.090 --> 00:39:22.170
it is that they can go into Call
of Duty: Black Ops and

00:39:22.170 --> 00:39:23.420
make these videos.

00:39:25.600 --> 00:39:28.330
Now we're going to see some
samples that people have--

00:39:28.330 --> 00:39:31.420
these are straight out of the
game, straight to YouTube

00:39:31.420 --> 00:39:34.240
using the exact mechanisms
we talked about before.

00:39:34.240 --> 00:39:36.500
I think the first one is an Xbox
video, and I believe the

00:39:36.500 --> 00:39:37.840
second one is a PS3 video.

00:39:40.576 --> 00:39:41.826
[VIDEO GAME SOUNDS]

00:39:46.280 --> 00:39:48.315
DOUG MUIR: And this is a
Tomahawk killing a helicopter.

00:39:48.315 --> 00:39:49.565
[VIDEO GAME SOUNDS]

00:40:22.620 --> 00:40:26.730
DOUG MUIR: I've been told to
remind everybody that feedback

00:40:26.730 --> 00:40:28.770
goes to the URL right there.

00:40:28.770 --> 00:40:31.850
The QR code is also a link
to the feedback link.

00:40:31.850 --> 00:40:37.070
Or you can use the hashtags to
give us feedback that way.

00:40:37.070 --> 00:40:39.426
And I believe we're ready
for questions now.

00:40:39.426 --> 00:40:40.676
[APPLAUSE]

00:40:43.550 --> 00:40:47.520
DOUG MUIR: Cliff and Kenji, do
you guys want to come on up?

00:40:47.520 --> 00:40:48.690
Cliff's coming.

00:40:48.690 --> 00:40:49.940
Kenji is too cool for it.

00:40:55.560 --> 00:40:56.810
Are there any questions?

00:40:59.790 --> 00:41:00.750
AUDIENCE: Hi.

00:41:00.750 --> 00:41:02.190
That's a good talk.

00:41:02.190 --> 00:41:04.150
I'm an Android game developer
actually.

00:41:04.150 --> 00:41:06.660
Do you have any advice on how
one might implement this sort

00:41:06.660 --> 00:41:09.560
of thing with Android games,
letting users record their

00:41:09.560 --> 00:41:12.550
video and share it?

00:41:12.550 --> 00:41:14.820
DOUG MUIR: So the question was
for an Android developer, how

00:41:14.820 --> 00:41:18.680
to implement a similar
feature for Android.

00:41:18.680 --> 00:41:22.200
Well, the first thing I'll say
is the whole bit about

00:41:22.200 --> 00:41:25.490
capturing the game play and
rendering it out, kind of

00:41:25.490 --> 00:41:26.220
falls on you.

00:41:26.220 --> 00:41:28.120
I mean that's going to be
different for each game.

00:41:28.120 --> 00:41:31.010
I don't know what your
rendering engine is.

00:41:31.010 --> 00:41:34.320
Beyond that though, the upload
and the linking with YouTube

00:41:34.320 --> 00:41:36.600
actually could probably be
pretty smooth on Android

00:41:36.600 --> 00:41:40.030
because you do have a browser
and even embedded web views

00:41:40.030 --> 00:41:42.770
that you could use
to do the linking

00:41:42.770 --> 00:41:45.430
right inside your game.

00:41:45.430 --> 00:41:49.620
So that any user can
immediately, the first time

00:41:49.620 --> 00:41:51.330
upload straight to his YouTube
account and have

00:41:51.330 --> 00:41:53.640
it work that way.

00:41:53.640 --> 00:41:56.100
If that's an option to you, I
would definitely recommend

00:41:56.100 --> 00:41:58.180
that because it works.

00:41:58.180 --> 00:42:01.600
And it was fantastic that we
were able to let people upload

00:42:01.600 --> 00:42:04.330
their videos without having
to have a YouTube account.

00:42:04.330 --> 00:42:09.100
But it did cause all kinds of
confusion for, who is this guy

00:42:09.100 --> 00:42:11.080
who's got all these videos,
and why is he

00:42:11.080 --> 00:42:12.260
taking them from me?

00:42:12.260 --> 00:42:14.650
So if you can get people to
upload straight to their own

00:42:14.650 --> 00:42:16.790
YouTube account right from the
beginning, that's definitely

00:42:16.790 --> 00:42:18.274
what I would recommend.

00:42:18.274 --> 00:42:18.651
AUDIENCE: Wow.

00:42:18.651 --> 00:42:19.030
Yeah.

00:42:19.030 --> 00:42:20.200
Thank you.

00:42:20.200 --> 00:42:20.450
JAREK WILKIEWICZ: Yeah.

00:42:20.450 --> 00:42:22.350
I would like to add that on
Android, you have account

00:42:22.350 --> 00:42:24.590
manager, so you can actually
obtain the authorization

00:42:24.590 --> 00:42:28.540
tokens much easier than what
we have demonstrated.

00:42:28.540 --> 00:42:31.970
And I see two approaches that
people have been trying.

00:42:31.970 --> 00:42:34.780
There's already some titles that
have this functionality.

00:42:34.780 --> 00:42:39.000
One that I kind of like is this
little application called

00:42:39.000 --> 00:42:42.510
Talking Tom by a company
called Outfit7.

00:42:42.510 --> 00:42:43.920
My daughter really likes
to play with it.

00:42:43.920 --> 00:42:45.410
It's basically a cat.

00:42:45.410 --> 00:42:47.250
You can talk to it, and
it talks back to you.

00:42:47.250 --> 00:42:49.550
It actually has a YouTube
upload capability.

00:42:49.550 --> 00:42:51.410
So you can hit a camera button,
and they do the

00:42:51.410 --> 00:42:52.610
rendering and encoding.

00:42:52.610 --> 00:42:53.540
They push it up to YouTube.

00:42:53.540 --> 00:42:58.200
So we get a fair amount
of Talking Tom videos.

00:42:58.200 --> 00:43:00.800
Then others have been thinking
about, can you actually do the

00:43:00.800 --> 00:43:03.840
rendering and encoding
in the cloud?

00:43:03.840 --> 00:43:06.800
So ship the states over
to the cloud and do

00:43:06.800 --> 00:43:07.510
the encoding there.

00:43:07.510 --> 00:43:09.290
You could then be
very creative.

00:43:09.290 --> 00:43:11.120
You could do it in
high resolution.

00:43:11.120 --> 00:43:12.610
You could do it in 3-D.

00:43:12.610 --> 00:43:14.530
It opens up a whole range
of possibilities.

00:43:14.530 --> 00:43:14.953
AUDIENCE: Oh yeah.

00:43:14.953 --> 00:43:17.070
And the streaming game play
events could be very small.

00:43:17.070 --> 00:43:18.900
JAREK WILKIEWICZ: Yeah

00:43:18.900 --> 00:43:19.240
AUDIENCE: Thanks.

00:43:19.240 --> 00:43:20.490
JAREK WILKIEWICZ: Thanks.

00:43:25.285 --> 00:43:25.990
VINAY: Hi.

00:43:25.990 --> 00:43:26.935
My name is Vinay.

00:43:26.935 --> 00:43:29.560
I have a question.

00:43:29.560 --> 00:43:32.480
Do you have custom search
features on the website?

00:43:36.880 --> 00:43:38.710
DOUG MUIR: So the question is,
do we have custom search

00:43:38.710 --> 00:43:39.920
features on the website?

00:43:39.920 --> 00:43:43.110
YouTube doesn't have any
custom search features.

00:43:43.110 --> 00:43:48.280
We do add some keywords to the
videos when we upload them.

00:43:48.280 --> 00:43:51.110
Most of the meta-information
that we tag is actually with

00:43:51.110 --> 00:43:52.360
developer tags.

00:43:52.360 --> 00:43:55.320
And we do have plans for using
the developer tags that we

00:43:55.320 --> 00:43:59.540
attach when we upload the video,
but there's nothing

00:43:59.540 --> 00:44:01.380
that you can see
using that yet.

00:44:01.380 --> 00:44:04.550
But there definitely is
a way to do that.

00:44:04.550 --> 00:44:07.130
All of the videos that have
been uploaded have been

00:44:07.130 --> 00:44:10.780
annotated with developer tags
that we are planning on using

00:44:10.780 --> 00:44:12.030
at some point in the future.

00:44:15.300 --> 00:44:15.480
AUDIENCE: Hi.

00:44:15.480 --> 00:44:16.410
I have two questions.

00:44:16.410 --> 00:44:19.330
One is, can you bypass a
workaround the browser

00:44:19.330 --> 00:44:20.200
verification.

00:44:20.200 --> 00:44:23.630
So if you're playing let's say
on the PS3, is there a way

00:44:23.630 --> 00:44:25.820
that you don't have to force the
player out of the game to

00:44:25.820 --> 00:44:28.660
go and authenticate
his account?

00:44:28.660 --> 00:44:31.290
And the second question is, is
there any way you can stream

00:44:31.290 --> 00:44:32.520
from YouTube to the game?

00:44:32.520 --> 00:44:35.390
So again, on the console, like
let's say PS3, is there a way

00:44:35.390 --> 00:44:39.010
you can take a stream
and just play it?

00:44:39.010 --> 00:44:41.810
DOUG MUIR: PS3 in Jarek
might probably--

00:44:41.810 --> 00:44:42.110
Sorry.

00:44:42.110 --> 00:44:46.990
The question was, is there a way
to bypass the going to the

00:44:46.990 --> 00:44:49.460
browser and linking
the account?

00:44:49.460 --> 00:44:50.880
And also is there
a way to stream

00:44:50.880 --> 00:44:52.570
back to the game console?

00:44:52.570 --> 00:44:54.400
And Jarek might be able
to talk a little

00:44:54.400 --> 00:44:56.340
bit more about this.

00:44:56.340 --> 00:45:01.310
But on the PS3 actually, they
do have native platform APIs

00:45:01.310 --> 00:45:06.050
for uploading to YouTube and
linking your account in the

00:45:06.050 --> 00:45:08.310
Xross Media Bar.

00:45:08.310 --> 00:45:11.480
So ahead of time or
even in game.

00:45:11.480 --> 00:45:15.140
Xbox is really the one where
that's not available.

00:45:15.140 --> 00:45:18.610
And because we are a
cross-platform game and trying

00:45:18.610 --> 00:45:21.660
to present the same experience
across all the platforms we

00:45:21.660 --> 00:45:27.460
support, we kind of work with
the lowest common denominator.

00:45:27.460 --> 00:45:29.900
It's possible now that we've
done the feature once that we

00:45:29.900 --> 00:45:32.820
would have a different
implementation path for PS3

00:45:32.820 --> 00:45:35.530
versus Xbox going forward.

00:45:35.530 --> 00:45:37.540
But again because of how late
this all came together, we

00:45:37.540 --> 00:45:41.190
just stuck with a common
path for both.

00:45:41.190 --> 00:45:44.420
In terms of streaming back to
the console, I believe it is

00:45:44.420 --> 00:45:47.480
possible, but I don't know if
there's any convenient APIs

00:45:47.480 --> 00:45:48.060
for doing it.

00:45:48.060 --> 00:45:48.550
JAREK WILKIEWICZ:
Two quick notes.

00:45:48.550 --> 00:45:50.530
So back to PS3.

00:45:50.530 --> 00:45:53.050
So the former actually
has the capability.

00:45:53.050 --> 00:45:56.640
The problem is it still uses
ClientLogin for authorization

00:45:56.640 --> 00:46:00.000
and authentication, which is
something that the entire

00:46:00.000 --> 00:46:02.270
industry is really
moving away from.

00:46:02.270 --> 00:46:04.450
So that is still
an open issue.

00:46:04.450 --> 00:46:08.510
And for YouTube accounts, you
see more and more cases where

00:46:08.510 --> 00:46:10.480
ClientLogin will not
be sufficient.

00:46:10.480 --> 00:46:13.740
For example, if you enabled
two-factor authentication on

00:46:13.740 --> 00:46:16.980
your account, that might
actually prevent ClientLogin

00:46:16.980 --> 00:46:21.450
access because the box doesn't
implement that flow.

00:46:21.450 --> 00:46:24.400
There's a number-- we actually
have a blog post about all the

00:46:24.400 --> 00:46:27.360
different cases that we
know of today that

00:46:27.360 --> 00:46:28.900
ClientLogin can fail.

00:46:28.900 --> 00:46:32.460
And then on the streaming inside
of the game, this is

00:46:32.460 --> 00:46:36.550
something that we've been
thinking about.

00:46:36.550 --> 00:46:39.030
But probably we would need
to know a little

00:46:39.030 --> 00:46:40.430
more about the context.

00:46:40.430 --> 00:46:41.800
So we're going to hang
around after this.

00:46:41.800 --> 00:46:44.240
If you would like to talk to
us a little more about what

00:46:44.240 --> 00:46:45.400
you have in mind, then we could

00:46:45.400 --> 00:46:46.960
definitely look into that.

00:46:46.960 --> 00:46:48.210
VINAY: Thank you.

00:46:51.890 --> 00:46:53.740
I have another question.

00:46:53.740 --> 00:46:59.170
As I understand, the flow is
from the game the video is

00:46:59.170 --> 00:47:01.470
uploaded to your backend servers
and from the servers

00:47:01.470 --> 00:47:03.240
it is uploaded to the YouTube.

00:47:03.240 --> 00:47:08.550
So the bottleneck really is how
much upload your backend

00:47:08.550 --> 00:47:12.120
servers can handle rather than
how much YouTube can handle.

00:47:12.120 --> 00:47:17.330
So is there a way that you can
directly upload to YouTube?

00:47:17.330 --> 00:47:18.800
DOUG MUIR: Absolutely.

00:47:18.800 --> 00:47:23.540
On the PS3 that absolutely would
have been an option.

00:47:23.540 --> 00:47:28.200
It's rendered on the console
for every platform.

00:47:28.200 --> 00:47:35.240
And Sony has no first party
limitations about talking to

00:47:35.240 --> 00:47:36.960
the internet basically.

00:47:36.960 --> 00:47:40.410
Microsoft does have some first
party rules about who you're

00:47:40.410 --> 00:47:42.710
allowed to talk to
from your game.

00:47:42.710 --> 00:47:43.990
I don't know if you're
familiar with it.

00:47:43.990 --> 00:47:47.940
But you have to go through the
live service platform gateway,

00:47:47.940 --> 00:47:49.630
which ours lives at DemonWare.

00:47:49.630 --> 00:47:53.490
So we sort of have to stream
through them no matter what.

00:47:53.490 --> 00:47:55.870
And again because of simplicity,
we just decided to

00:47:55.870 --> 00:47:58.450
do it the same way on both
platforms. But without that

00:47:58.450 --> 00:48:03.720
limitation, we absolutely would
have been able to upload

00:48:03.720 --> 00:48:04.930
directly to YouTube.

00:48:04.930 --> 00:48:08.860
Now the tricky bit in that case
though would be knowing

00:48:08.860 --> 00:48:13.020
the OAuth tokens because our
consoles don't have them.

00:48:13.020 --> 00:48:14.550
Those are stored at DemonWare.

00:48:14.550 --> 00:48:17.510
So if we were going to be
uploading directly to YouTube

00:48:17.510 --> 00:48:20.700
from the console, we would have
to have some mechanism.

00:48:20.700 --> 00:48:24.480
Probably when you log into our
backends, we would then have

00:48:24.480 --> 00:48:28.400
to send the console your OAuth
tokens so that the console

00:48:28.400 --> 00:48:32.180
could go directly there.

00:48:32.180 --> 00:48:36.410
So going through DemonWare did
impose a bottleneck on us.

00:48:36.410 --> 00:48:38.880
But it also gave us a single
point where we could store the

00:48:38.880 --> 00:48:43.930
OAuth tokens and deal with
all the upload logic

00:48:43.930 --> 00:48:46.920
and work that way.

00:48:46.920 --> 00:48:47.420
VINAY: Sorry.

00:48:47.420 --> 00:48:48.420
If I may extend.

00:48:48.420 --> 00:48:51.380
The question was mainly in terms
of the infrastructure

00:48:51.380 --> 00:48:52.940
that you need to have. Right?

00:48:52.940 --> 00:48:58.740
So probably one of the reasons
that you went with YouTube is

00:48:58.740 --> 00:49:01.120
that you don't have to
have the whole lot of

00:49:01.120 --> 00:49:02.160
infrastructure.

00:49:02.160 --> 00:49:06.110
But still you have to have a
scaled-down version or-- and

00:49:06.110 --> 00:49:07.710
so was that--

00:49:07.710 --> 00:49:09.700
DOUG MUIR: Well I
mean yes and no.

00:49:09.700 --> 00:49:13.760
I mean, Call of Duty already
has a fairly large backend

00:49:13.760 --> 00:49:17.290
infrastructure just because of
the size of our community.

00:49:17.290 --> 00:49:20.140
I don't know how much I'm
actually allowed to say at a

00:49:20.140 --> 00:49:21.130
public place like this.

00:49:21.130 --> 00:49:25.010
But suffice it to say that
there are hundreds of

00:49:25.010 --> 00:49:28.860
thousands of Call of Duty
matches going on every day.

00:49:28.860 --> 00:49:31.060
And so we already have a fairly
large infrastructure

00:49:31.060 --> 00:49:33.100
for dealing with that.

00:49:33.100 --> 00:49:38.740
The video bandwidth is actually
not a large part of

00:49:38.740 --> 00:49:39.320
what's going on.

00:49:39.320 --> 00:49:42.690
It's only a bottleneck because
of all the other bandwidth--

00:49:42.690 --> 00:49:45.010
because of all the other traffic
hitting our backends

00:49:45.010 --> 00:49:47.400
just as part of running
the Call of Duty

00:49:47.400 --> 00:49:50.210
multi-player service.

00:49:50.210 --> 00:49:51.460
VINAY: Thank you.

00:49:56.620 --> 00:49:57.870
DOUG MUIR: Any other
questions?

00:50:01.820 --> 00:50:02.720
AUDIENCE: I'm not sure
if I missed this.

00:50:02.720 --> 00:50:06.900
But is there going to be a way
for users to authenticate

00:50:06.900 --> 00:50:11.280
themselves, to upload videos
that's not ClientLogin and

00:50:11.280 --> 00:50:14.360
doesn't require a browser?

00:50:14.360 --> 00:50:17.510
DOUG MUIR: So the question is,
is there a way to authenticate

00:50:17.510 --> 00:50:20.280
for uploading videos that's not
ClientLogin, that doesn't

00:50:20.280 --> 00:50:22.010
require a browser.

00:50:22.010 --> 00:50:24.240
And as far as I know,
the answer to that

00:50:24.240 --> 00:50:25.540
right now is no.

00:50:25.540 --> 00:50:28.460
JAREK WILKIEWICZ: My guess is
in the future there will be.

00:50:28.460 --> 00:50:30.760
Because ultimately that's
probably what you would want.

00:50:30.760 --> 00:50:33.890
DOUG MUIR: Yeah, I mean, we
would love it absolutely.

00:50:33.890 --> 00:50:36.090
But right now I don't believe
there is a way to do it that

00:50:36.090 --> 00:50:36.990
doesn't involve a browser
at some stage.

00:50:36.990 --> 00:50:38.650
JAREK WILKIEWICZ: I think
when it comes to kind of

00:50:38.650 --> 00:50:42.040
standards-based solutions that
we've been tracking, I don't

00:50:42.040 --> 00:50:42.620
see anything.

00:50:42.620 --> 00:50:45.340
So the OAuth 2.0 device profile
in beta is probably

00:50:45.340 --> 00:50:48.420
the closest we've gotten to
something that takes you away

00:50:48.420 --> 00:50:52.310
from the device in the
standards way.

00:50:52.310 --> 00:50:54.820
You could certainly think of
a proprietary mechanism to

00:50:54.820 --> 00:50:56.390
achieve that.

00:50:56.390 --> 00:50:58.160
We haven't been taking advantage
like of people's

00:50:58.160 --> 00:51:00.400
smartphones, for example,
for that.

00:51:00.400 --> 00:51:04.350
So there's many mechanisms that
one could envision, but

00:51:04.350 --> 00:51:07.700
when it comes to kind of
standards-based approaches, I

00:51:07.700 --> 00:51:09.180
don't see anything right now.

00:51:09.180 --> 00:51:11.790
DOUG MUIR: The good news is
that with OAuth 2.0 device

00:51:11.790 --> 00:51:15.150
profile, you could do it all
without leaving your couch if

00:51:15.150 --> 00:51:18.390
you have a smartphone or
something like that, which

00:51:18.390 --> 00:51:20.960
will be an increasingly
common use case.

00:51:20.960 --> 00:51:22.160
AUDIENCE: Because I guess that's
kind of one of the

00:51:22.160 --> 00:51:26.120
reasons why, despite its
insecurity, people still use

00:51:26.120 --> 00:51:29.090
ClientLogin because ultimately
it does-- from the user's

00:51:29.090 --> 00:51:31.565
perspective, it does make it
flow a little bit more

00:51:31.565 --> 00:51:32.060
straightforward.

00:51:32.060 --> 00:51:32.555
Right?

00:51:32.555 --> 00:51:34.540
But then of course there's
the security.

00:51:34.540 --> 00:51:34.840
JAREK WILKIEWICZ: Right.

00:51:34.840 --> 00:51:35.240
Yeah.

00:51:35.240 --> 00:51:36.020
But less secure.

00:51:36.020 --> 00:51:36.150
Right?

00:51:36.150 --> 00:51:37.580
DOUG MUIR: And the problem
with something like

00:51:37.580 --> 00:51:39.180
ClientLogin--

00:51:39.180 --> 00:51:41.866
the potential problem would be,
you don't necessarily want

00:51:41.866 --> 00:51:43.850
to be storing those credentials
on the console.

00:51:43.850 --> 00:51:47.090
So now you're asking the user
to log in every time

00:51:47.090 --> 00:51:47.780
they want to upload.

00:51:47.780 --> 00:51:50.390
Whereas with the OAuth
solution, we do

00:51:50.390 --> 00:51:51.310
that linking once.

00:51:51.310 --> 00:51:54.270
And then until the user revokes
those tokens, we can

00:51:54.270 --> 00:51:56.690
use them to act on the
user's behalf.

00:51:56.690 --> 00:51:57.930
JAREK WILKIEWICZ: One thing
that I didn't cover in the

00:51:57.930 --> 00:52:03.360
flow is actually OAuth has a
way to refresh the token.

00:52:03.360 --> 00:52:05.920
So you don't actually have to
go through the entire flow.

00:52:05.920 --> 00:52:09.010
There's a refresh token that can
be stored on the device.

00:52:09.010 --> 00:52:11.750
And then when the access token
expires or is close to

00:52:11.750 --> 00:52:14.530
expiration, it can actually
do the dance again.

00:52:14.530 --> 00:52:17.920
And typically the ClientLogin
tokens, their life

00:52:17.920 --> 00:52:19.470
may not be as long.

00:52:19.470 --> 00:52:22.600
So then you have to renew
it or refresh it.

00:52:22.600 --> 00:52:24.550
But in order to do that, you
either have to prompt the user

00:52:24.550 --> 00:52:26.560
again, or you keep their
credentials.

00:52:26.560 --> 00:52:28.750
And storing their credentials
is always--

00:52:28.750 --> 00:52:31.050
I mean, any developer that
builds these types of

00:52:31.050 --> 00:52:34.760
applications tries to avoid
it as much as fire because

00:52:34.760 --> 00:52:37.070
there's so many things that can
go wrong with if you store

00:52:37.070 --> 00:52:38.320
their credentials.

00:52:41.940 --> 00:52:45.140
AUDIENCE: I had a question
for you, Doug.

00:52:45.140 --> 00:52:48.760
You said that you guys were
using a lot of the metadata in

00:52:48.760 --> 00:52:54.440
terms of adding developer tags
and looking forward to new

00:52:54.440 --> 00:52:59.730
ways to engage those videos
that users have uploaded.

00:52:59.730 --> 00:53:02.940
My question was, how much
optimization did you guys do

00:53:02.940 --> 00:53:06.490
in terms of search terms and
keywords that users might be

00:53:06.490 --> 00:53:09.480
looking for for the videos
as they were uploaded?

00:53:09.480 --> 00:53:12.460
So were you guys thinking about
how people are going to

00:53:12.460 --> 00:53:14.580
find these videos on YouTube?

00:53:14.580 --> 00:53:16.480
Or was it just kind of like
they name it whatever they

00:53:16.480 --> 00:53:22.870
named it, and then it goes up,
and the Call of Duty community

00:53:22.870 --> 00:53:27.500
creates the browsing structure
for its own community to find

00:53:27.500 --> 00:53:28.650
those videos?

00:53:28.650 --> 00:53:28.890
DOUG MUIR: Right.

00:53:28.890 --> 00:53:30.510
So the question is--

00:53:30.510 --> 00:53:32.130
if I were to paraphrase--

00:53:32.130 --> 00:53:34.950
is, how much optimization have
we done on the keywords that

00:53:34.950 --> 00:53:40.170
we attached to the videos as
we upload them to make it

00:53:40.170 --> 00:53:43.340
easier for users
to find videos.

00:53:43.340 --> 00:53:47.090
And the answer to that
unfortunately is almost none.

00:53:47.090 --> 00:53:51.910
We upload your title that
you attach in the game.

00:53:51.910 --> 00:53:56.150
We attach your gamertag
to that as well.

00:53:56.150 --> 00:54:00.040
The developer tags, which we
have some plans for, but we're

00:54:00.040 --> 00:54:02.960
not using yet, do contain a
little bit more information.

00:54:02.960 --> 00:54:06.560
Things like other users in the
videos, the map, the game

00:54:06.560 --> 00:54:07.970
mode, things like that.

00:54:07.970 --> 00:54:11.160
But those are not visible
to the YouTube channel.

00:54:13.680 --> 00:54:16.690
But yeah, in terms of that--
and that's sort of another

00:54:16.690 --> 00:54:19.670
place where we probably should
have been a little bit more

00:54:19.670 --> 00:54:22.270
ready in terms of engaging
the community.

00:54:22.270 --> 00:54:25.670
We could do a whole lot on our
backend when we upload to

00:54:25.670 --> 00:54:29.860
organize channels, organize
playlists and really curate

00:54:29.860 --> 00:54:30.630
our channel.

00:54:30.630 --> 00:54:34.020
And right now, we're not doing
really any of that.

00:54:34.020 --> 00:54:36.900
I don't know who has worked in
the game industry before, but

00:54:36.900 --> 00:54:40.150
there's always something else
that seems higher priority

00:54:40.150 --> 00:54:43.920
than those sorts of tasks.

00:54:43.920 --> 00:54:46.040
So hopefully we'll get to it.

00:54:46.040 --> 00:54:47.030
AUDIENCE: It seems like
you guys are doing

00:54:47.030 --> 00:54:47.650
pretty good, so--

00:54:47.650 --> 00:54:49.050
DOUG MUIR: Yeah.

00:54:49.050 --> 00:54:51.100
JAREK WILKIEWICZ: I would like
to add one thing is, even

00:54:51.100 --> 00:54:53.670
though, as Doug mentioned, there
wasn't necessarily a lot

00:54:53.670 --> 00:54:58.300
of emphasis on optimization,
if you go back to the slide

00:54:58.300 --> 00:55:00.060
that he was showing where most
of the views were actually

00:55:00.060 --> 00:55:01.260
from YouTube.

00:55:01.260 --> 00:55:03.490
That means that users were able
to find their content.

00:55:03.490 --> 00:55:05.530
And in fact when we were looking
through the data, it

00:55:05.530 --> 00:55:08.070
looked like a lot of the views
were actually related videos.

00:55:08.070 --> 00:55:09.920
So when you watch a video on
YouTube, at the end we show

00:55:09.920 --> 00:55:11.160
related videos.

00:55:11.160 --> 00:55:13.480
So we were able to still kind
of figure out what is the

00:55:13.480 --> 00:55:15.260
content relevant to
these uploads.

00:55:15.260 --> 00:55:19.020
And then keep them within
this set of videos.

00:55:19.020 --> 00:55:21.540
So in the end, it worked out
even though maybe it wasn't so

00:55:21.540 --> 00:55:22.420
[INTERPOSING VOICES]--

00:55:22.420 --> 00:55:25.370
DOUG MUIR: I think we could do
more to support it and more to

00:55:25.370 --> 00:55:27.460
sort of curate our
YouTube channels.

00:55:27.460 --> 00:55:32.420
But we're fantastically
happy with it so far.

00:55:37.000 --> 00:55:37.330
JAREK WILKIEWICZ: All right.

00:55:37.330 --> 00:55:38.430
We have two more minutes.

00:55:38.430 --> 00:55:41.810
So if there are no more
questions, thank you very much

00:55:41.810 --> 00:55:42.300
for coming.

00:55:42.300 --> 00:55:44.500
Enjoy the rest of Google I/O.

00:55:44.500 --> 00:55:44.840
Thank you.

00:55:44.840 --> 00:55:46.990
DOUG MUIR: Thank you.

