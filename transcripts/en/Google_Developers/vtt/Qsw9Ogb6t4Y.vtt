WEBVTT
Kind: captions
Language: en

00:00:06.900 --> 00:00:07.570
Hi.

00:00:07.570 --> 00:00:09.330
My name is Chris
B. I'm a developer

00:00:09.330 --> 00:00:11.170
advocate on the
Google Cast team.

00:00:11.170 --> 00:00:12.820
In this episode of
DevBytes, I'm going

00:00:12.820 --> 00:00:15.560
to cover some of the essentials
of creating a Cast web sender

00:00:15.560 --> 00:00:17.950
app that runs in Chrome.

00:00:17.950 --> 00:00:20.770
Currently, the Google Cast
SDK is available for three

00:00:20.770 --> 00:00:24.360
platforms-- Chrome,
Android, and iOS.

00:00:24.360 --> 00:00:26.500
In this video, I will
focus exclusively

00:00:26.500 --> 00:00:28.950
on the SDK for Chrome.

00:00:28.950 --> 00:00:32.320
In order to build a Google
Cast web sender application,

00:00:32.320 --> 00:00:34.220
you will lead to install
the Google Chrome

00:00:34.220 --> 00:00:38.349
browser and the Google
Cast Chrome extension.

00:00:38.349 --> 00:00:39.890
If you already have
Chrome installed,

00:00:39.890 --> 00:00:42.860
make sure you are on
version 32 or higher.

00:00:42.860 --> 00:00:46.310
To get the Cast extension, visit
the Google Chrome Web Store

00:00:46.310 --> 00:00:48.420
and search for Google Cast.

00:00:48.420 --> 00:00:49.860
The Cast extension
is what allows

00:00:49.860 --> 00:00:53.120
web senders to communicate
with Cast receivers.

00:00:53.120 --> 00:00:55.980
With Chrome installed and the
Cast extension ready to go,

00:00:55.980 --> 00:00:58.960
let's take a peek at the Cast
sender life-cycle for a moment.

00:00:58.960 --> 00:01:01.510
Once a Cast sender
application has been loaded,

00:01:01.510 --> 00:01:04.180
the app will detect and
initialize the Cast APIs,

00:01:04.180 --> 00:01:06.370
get notified about
available receivers,

00:01:06.370 --> 00:01:08.850
connect to a receiver, and
begin exchanging messages

00:01:08.850 --> 00:01:10.760
over the established connection.

00:01:10.760 --> 00:01:12.690
Closing up the life
cycle is disconnection

00:01:12.690 --> 00:01:14.110
from a receiver device.

00:01:14.110 --> 00:01:17.380
Let's take a closer look at
each phase of life cycle.

00:01:17.380 --> 00:01:19.380
Chrome sender applications
are constructed

00:01:19.380 --> 00:01:22.280
using HTML, JavaScript, and CSS.

00:01:22.280 --> 00:01:24.560
Sender apps can be hosted
locally during development

00:01:24.560 --> 00:01:27.250
and then move to production
servers when publishing.

00:01:27.250 --> 00:01:30.810
A Google hosted Cast sender
JavaScript resource provides

00:01:30.810 --> 00:01:34.090
the API that your sender
application uses to communicate

00:01:34.090 --> 00:01:36.140
with the Cast
extension, which manages

00:01:36.140 --> 00:01:38.530
the interaction
with Cast receivers.

00:01:38.530 --> 00:01:41.380
A Chrome sender application
must detect and initialize

00:01:41.380 --> 00:01:43.260
the Cast API before
communicating

00:01:43.260 --> 00:01:45.570
with the Cast receiver.

00:01:45.570 --> 00:01:48.380
Prior to using the Cast APIs,
the web sender application

00:01:48.380 --> 00:01:50.730
needs to first check
that they're available.

00:01:50.730 --> 00:01:52.790
This is accomplished by
looking for the existence

00:01:52.790 --> 00:01:55.430
of chrome.cast
JavaScript namespace

00:01:55.430 --> 00:01:58.870
and checking the
chrome.cast.isAvailable Boolean

00:01:58.870 --> 00:01:59.800
flag.

00:01:59.800 --> 00:02:01.920
Depending on how the web
sender application loads

00:02:01.920 --> 00:02:04.960
its resources, it may need
to set up a retry timeout

00:02:04.960 --> 00:02:07.710
to detect the Cast APIs.

00:02:07.710 --> 00:02:09.340
With the detection
out of the way,

00:02:09.340 --> 00:02:10.970
the web sender
application is now

00:02:10.970 --> 00:02:13.450
ready to initialize
the Cast API.

00:02:13.450 --> 00:02:16.960
Initialization connects the web
sender to the Cast extension

00:02:16.960 --> 00:02:20.260
and lets the extension know that
the web app is Cast enabled.

00:02:20.260 --> 00:02:22.010
Performing the
initialization consists

00:02:22.010 --> 00:02:23.790
of creating a sender
request object that

00:02:23.790 --> 00:02:27.420
holds the application ID of
the receiver that will launch.

00:02:27.420 --> 00:02:30.300
Then, constructing a
new API config object,

00:02:30.300 --> 00:02:33.230
which takes the session request
object as well as a session

00:02:33.230 --> 00:02:35.930
listener and receiver
listener callbacks.

00:02:35.930 --> 00:02:41.100
Lastly, the web sender calls the
chrome.cast.initialize function

00:02:41.100 --> 00:02:43.790
and provides the API
config object along

00:02:43.790 --> 00:02:46.660
with the success
and error callback.

00:02:46.660 --> 00:02:48.870
When the success
callback is invoked,

00:02:48.870 --> 00:02:50.630
the web application
has successfully

00:02:50.630 --> 00:02:52.510
initialized the Cast APIs.

00:02:52.510 --> 00:02:54.850
However, there is one more
thing that the application

00:02:54.850 --> 00:02:57.530
needs to wait on
before proceeding.

00:02:57.530 --> 00:02:59.950
Looking at the API
config constructor,

00:02:59.950 --> 00:03:02.870
the receiverListener passed
in performs an important role

00:03:02.870 --> 00:03:05.500
in the discovery Cast devices.

00:03:05.500 --> 00:03:08.310
Cast web sender applications
delegate the management

00:03:08.310 --> 00:03:11.670
of available Cast receiver
devices to the Cast extension.

00:03:11.670 --> 00:03:13.600
The API config that
the app creates

00:03:13.600 --> 00:03:15.740
is passed along to
the Cast extension.

00:03:15.740 --> 00:03:18.200
And the receiverListener
is invoked.

00:03:18.200 --> 00:03:20.490
The receiverListener is
passed a string parameter

00:03:20.490 --> 00:03:23.490
that should be checked
for the available value.

00:03:23.490 --> 00:03:25.060
Any other value
should be treated

00:03:25.060 --> 00:03:27.490
as no receiver
devices available.

00:03:27.490 --> 00:03:29.420
The receiverListener
will be invoked whenever

00:03:29.420 --> 00:03:31.490
there is a change in the
availability of receiver

00:03:31.490 --> 00:03:32.590
devices.

00:03:32.590 --> 00:03:34.860
The web sender should
display the Cast icon

00:03:34.860 --> 00:03:36.650
when the
receiverListener reports

00:03:36.650 --> 00:03:39.520
Cast receivers are available.

00:03:39.520 --> 00:03:41.090
Now that the
application knows when

00:03:41.090 --> 00:03:43.130
to show a Cast icon
to the user, we

00:03:43.130 --> 00:03:47.260
can explore how to request
a session on a Cast receiver

00:03:47.260 --> 00:03:48.300
device.

00:03:48.300 --> 00:03:49.780
It is actually quite simple.

00:03:49.780 --> 00:03:53.710
The sender can call on
chrome.cast.requestSession

00:03:53.710 --> 00:03:56.470
and provide a success
and error callback.

00:03:56.470 --> 00:03:58.940
The success callback will
be passed a Cast session

00:03:58.940 --> 00:04:02.650
object that can be decorated
with update listeners.

00:04:02.650 --> 00:04:06.180
The success callback is
dependent on user action

00:04:06.180 --> 00:04:07.530
and may not be invoked.

00:04:07.530 --> 00:04:09.930
Let's take a look.

00:04:09.930 --> 00:04:11.440
Use the receiverListener
as a way

00:04:11.440 --> 00:04:13.600
to determine if the web
sender application should

00:04:13.600 --> 00:04:15.990
show the Cast icon to the user.

00:04:15.990 --> 00:04:18.079
When the user clicks
the Cast icon,

00:04:18.079 --> 00:04:21.350
the Cast extension will show a
list of available Cast receiver

00:04:21.350 --> 00:04:25.170
devices that can be
connected to by the sender.

00:04:25.170 --> 00:04:28.730
If the user closes the list
without selecting a device,

00:04:28.730 --> 00:04:31.940
the request session error
callback will be invoked.

00:04:31.940 --> 00:04:34.500
Otherwise, if the user selects
a Cast receiver device,

00:04:34.500 --> 00:04:36.290
then the extension
will communicate

00:04:36.290 --> 00:04:39.160
with the Cast receiver to set
up the communication channel.

00:04:39.160 --> 00:04:42.630
Once complete, the success
callback of the request session

00:04:42.630 --> 00:04:44.990
function will be invoked.

00:04:44.990 --> 00:04:47.570
With a connection established,
the sender application

00:04:47.570 --> 00:04:50.000
may now communicate with
the connected Cast receiver

00:04:50.000 --> 00:04:51.210
application.

00:04:51.210 --> 00:04:54.180
Messages are exchanged between
the sender and receiver using

00:04:54.180 --> 00:04:56.860
namespaces, also
called protocols.

00:04:56.860 --> 00:04:58.770
These messages are used
to invoke behaviors

00:04:58.770 --> 00:05:01.710
on the receiver application
and to update the sender

00:05:01.710 --> 00:05:05.140
application as to the
state of the receiver app.

00:05:05.140 --> 00:05:07.290
One example of
message exchange would

00:05:07.290 --> 00:05:10.020
be to load some media
onto the Cast receiver.

00:05:10.020 --> 00:05:13.050
The Cast APIs come bundled
with a media API that

00:05:13.050 --> 00:05:17.330
enables a sender app to tell the
receiver to load and playback

00:05:17.330 --> 00:05:19.230
media, such as video.

00:05:19.230 --> 00:05:21.450
In this case, the
media info object

00:05:21.450 --> 00:05:24.650
gets created that bundles
information about the media.

00:05:24.650 --> 00:05:26.960
This object is then used
to create a load request

00:05:26.960 --> 00:05:30.620
object that gets passed to
a session function called

00:05:30.620 --> 00:05:31.700
load media.

00:05:31.700 --> 00:05:33.460
The load media
function serializes

00:05:33.460 --> 00:05:35.970
the data and communicates
with the receiver application

00:05:35.970 --> 00:05:37.810
over the media namespace.

00:05:37.810 --> 00:05:39.510
Sender and receiver
applications must

00:05:39.510 --> 00:05:41.250
agree on the
supported namespaces

00:05:41.250 --> 00:05:44.070
in order to communicate
with each other.

00:05:44.070 --> 00:05:46.400
The last part of life
cycle is the disconnection

00:05:46.400 --> 00:05:47.690
from a receiver.

00:05:47.690 --> 00:05:50.360
When a session is
first established,

00:05:50.360 --> 00:05:53.060
the session app is
passed a session object.

00:05:53.060 --> 00:05:55.110
Adding an update listener
to the session object

00:05:55.110 --> 00:05:58.200
allows the sender app to know
when a session has ended.

00:05:58.200 --> 00:06:01.360
The session listener function
is passed a Boolean value.

00:06:01.360 --> 00:06:04.480
If this value is false,
then there is no connection.

00:06:04.480 --> 00:06:06.200
The user can
initiate a disconnect

00:06:06.200 --> 00:06:09.360
by clicking the Cast extension
and choosing stop casting.

00:06:09.360 --> 00:06:11.680
This will trigger a
session update listener

00:06:11.680 --> 00:06:14.150
when the session is torn down.

00:06:14.150 --> 00:06:17.470
And there you have it, the life
cycle of a Cast web sender.

00:06:17.470 --> 00:06:20.380
We're very excited to see what
you build with Google Cast.

00:06:20.380 --> 00:06:21.810
To get you going,
we're providing

00:06:21.810 --> 00:06:23.310
a number of resources.

00:06:23.310 --> 00:06:27.260
You can discover more about the
details of the Google Cast SDK

00:06:27.260 --> 00:06:30.050
at developers.google.com/cast.

00:06:30.050 --> 00:06:32.300
The design checklist will
go a long way in guiding you

00:06:32.300 --> 00:06:35.160
down the path to creating great
second screen applications.

00:06:35.160 --> 00:06:38.000
You can find sample Cast
sender and receiver apps

00:06:38.000 --> 00:06:40.740
at github.com/googlecast.

00:06:40.740 --> 00:06:43.240
Use Stack Overflow for
questions and comments.

00:06:43.240 --> 00:06:45.590
Tag them with google-cast.

00:06:45.590 --> 00:06:47.500
In future DevBytes,
we will dive deeper

00:06:47.500 --> 00:06:50.170
into the Cast sender
SDK for each platform

00:06:50.170 --> 00:06:52.470
and the Cast receiver SDK.

00:06:52.470 --> 00:06:55.830
Join the Google Cast developer
community on Google+ for pro

00:06:55.830 --> 00:06:57.960
tips and share your experiences.

00:06:57.960 --> 00:07:00.980
It's now up to you to go out and
create great Chrome web sender

00:07:00.980 --> 00:07:01.820
applications.

00:07:01.820 --> 00:07:03.710
Happy casting.

