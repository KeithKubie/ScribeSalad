WEBVTT
Kind: captions
Language: en

00:00:00.112 --> 00:00:01.570
TIM KILBOURN: Hi,
I'm Tim Kilbourn,

00:00:01.570 --> 00:00:03.020
from the Android framework team.

00:00:03.020 --> 00:00:05.353
And I want to talk about
building great apps for Android

00:00:05.353 --> 00:00:06.270
TV.

00:00:06.270 --> 00:00:07.980
Android TV apps
are developed using

00:00:07.980 --> 00:00:09.720
all the familiar
components and tools

00:00:09.720 --> 00:00:11.150
from the Android framework.

00:00:11.150 --> 00:00:13.350
So if you already have a
great phone or tablet app,

00:00:13.350 --> 00:00:15.266
you're on your way to
bringing that experience

00:00:15.266 --> 00:00:16.475
to the big screen.

00:00:16.475 --> 00:00:18.100
However, there are
some key differences

00:00:18.100 --> 00:00:21.080
between developing for a
phone or a tablet, and a TV.

00:00:21.080 --> 00:00:23.480
In particular, the
information density on a TV

00:00:23.480 --> 00:00:26.030
should be much lower than
on a phone or a tablet.

00:00:26.030 --> 00:00:28.830
No one wants to read a
wall of text on a TV.

00:00:28.830 --> 00:00:31.430
Also, the way we interact with
the TV is through a D-pad,

00:00:31.430 --> 00:00:34.260
like a remote control or game
controller, rather than touch.

00:00:34.260 --> 00:00:36.510
So make sure all of the
important elements of your app

00:00:36.510 --> 00:00:38.340
are focus-able.

00:00:38.340 --> 00:00:41.550
Let's look at an example of
an app written for Android TV.

00:00:41.550 --> 00:00:43.530
This app uses minimal
amounts of text,

00:00:43.530 --> 00:00:45.840
and everything is
reachable with the D-pad.

00:00:45.840 --> 00:00:47.450
Navigating to find
something to watch

00:00:47.450 --> 00:00:49.370
is easy with these layouts.

00:00:49.370 --> 00:00:51.250
In fact, because
this browsing concept

00:00:51.250 --> 00:00:54.890
is so common for a TV app, we've
built a new support library

00:00:54.890 --> 00:00:56.890
to help you create
beautiful, easy

00:00:56.890 --> 00:00:58.660
to use apps for the big screen.

00:00:58.660 --> 00:01:01.180
By using the widgets and
fragments from this Leanback

00:01:01.180 --> 00:01:04.090
Support Library, you will
be able to quickly create

00:01:04.090 --> 00:01:06.290
apps that work well on TVs.

00:01:06.290 --> 00:01:08.930
The Leanback Support Library
is based on the Model, View,

00:01:08.930 --> 00:01:10.240
Presenter pattern.

00:01:10.240 --> 00:01:11.980
We've made it
straightforward to separate

00:01:11.980 --> 00:01:14.160
the way you display your
content from the model

00:01:14.160 --> 00:01:15.800
objects you used
to store the data.

00:01:15.800 --> 00:01:18.277
The model objects
come from your app.

00:01:18.277 --> 00:01:19.860
We don't put any
requirements on them,

00:01:19.860 --> 00:01:21.943
so it should be possible
to update an existing app

00:01:21.943 --> 00:01:24.754
to run on a TV without
changing your model.

00:01:24.754 --> 00:01:26.420
The Views are the
standard Android views

00:01:26.420 --> 00:01:28.830
that you know and love, like
text views and image views

00:01:28.830 --> 00:01:30.070
and so on.

00:01:30.070 --> 00:01:33.270
What is new for Android in
this library is the Presenter.

00:01:33.270 --> 00:01:34.940
Given a model
object, the Presenter

00:01:34.940 --> 00:01:37.780
binds the data from
that object to a View

00:01:37.780 --> 00:01:39.790
that the library code
can use to display

00:01:39.790 --> 00:01:42.230
your items in all the
screens of your app.

00:01:42.230 --> 00:01:44.140
In particular,
this same item can

00:01:44.140 --> 00:01:46.870
be rendered in different ways,
in different parts of your app,

00:01:46.870 --> 00:01:49.110
simply by replacing
the Presenter.

00:01:49.110 --> 00:01:50.762
Let's look at some examples.

00:01:50.762 --> 00:01:52.720
Here we have a screen
that lets the user browse

00:01:52.720 --> 00:01:54.409
through the content catalog.

00:01:54.409 --> 00:01:56.200
This is implemented
using a browse fragment

00:01:56.200 --> 00:01:58.200
from the Leanback
Support Library.

00:01:58.200 --> 00:02:00.827
The fragment is instantiated
and given an object adapter

00:02:00.827 --> 00:02:02.910
that contains the model
objects and the Presenters

00:02:02.910 --> 00:02:04.040
used to render them.

00:02:04.040 --> 00:02:06.447
The library code in the
fragment takes care of the rest,

00:02:06.447 --> 00:02:08.030
calling the methods
and the presenters

00:02:08.030 --> 00:02:10.930
for each item to show
the views in the rows.

00:02:10.930 --> 00:02:12.730
Next, we have a Detail screen.

00:02:12.730 --> 00:02:14.680
The same model object
that was previously

00:02:14.680 --> 00:02:17.070
rendered using a small
card view can now

00:02:17.070 --> 00:02:19.060
be rendered to show
more details simply

00:02:19.060 --> 00:02:21.130
by using a different Presenter.

00:02:21.130 --> 00:02:23.000
We also see rows
of related content

00:02:23.000 --> 00:02:25.370
below the Details
Overview, with Presenters

00:02:25.370 --> 00:02:27.580
creating each of
those views as well.

00:02:27.580 --> 00:02:29.710
In-apps search works
in the same way.

00:02:29.710 --> 00:02:31.660
Your app will receive
the text of the query

00:02:31.660 --> 00:02:33.920
as the user enters it,
and the search fragment

00:02:33.920 --> 00:02:35.750
uses the object
adapter and Presenters

00:02:35.750 --> 00:02:37.992
that you provide to
show the results.

00:02:37.992 --> 00:02:39.450
There are a few
other things you'll

00:02:39.450 --> 00:02:41.850
want to do to make your
app look great on a TV.

00:02:41.850 --> 00:02:43.420
We've designed a
new Launcher that's

00:02:43.420 --> 00:02:45.260
optimized for getting
you into the content

00:02:45.260 --> 00:02:47.510
you want to see as
quickly as possible,

00:02:47.510 --> 00:02:50.350
and that starts with
Content Recommendations.

00:02:50.350 --> 00:02:53.540
Using the existing
Android notifications API,

00:02:53.540 --> 00:02:55.200
your app can publish
recommendations

00:02:55.200 --> 00:02:58.480
for videos or other content the
viewers will want to see next.

00:02:58.480 --> 00:03:01.614
You specify the data, including
the card image in the text.

00:03:01.614 --> 00:03:04.030
And the Launcher will show the
recommendations prominently

00:03:04.030 --> 00:03:05.327
on the home screen.

00:03:05.327 --> 00:03:06.910
The order of all
these recommendations

00:03:06.910 --> 00:03:09.070
is determined by how the
user interacts with them.

00:03:09.070 --> 00:03:11.444
So make sure you're creating
high-quality recommendations

00:03:11.444 --> 00:03:14.190
that will make people want
to return to your app.

00:03:14.190 --> 00:03:16.090
You can find more
details and sample code

00:03:16.090 --> 00:03:18.670
for Presenters, Fragments,
and Content Recommendations,

00:03:18.670 --> 00:03:20.930
on the new developer
site for Android TV.

00:03:20.930 --> 00:03:21.970
Thanks for watching.

00:03:21.970 --> 00:03:24.990
Now go make some great TV apps.

