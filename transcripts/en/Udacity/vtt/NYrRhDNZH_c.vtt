WEBVTT
Kind: captions
Language: en

00:00:00.760 --> 00:00:04.910
Many of our students responded to this question by saying that the word outlet,

00:00:04.910 --> 00:00:07.260
reminded them of the outlet in the wall.

00:00:07.260 --> 00:00:08.420
Now this, as you know,

00:00:08.420 --> 00:00:12.560
is a connection between electrical appliances at home, and the electric grid.

00:00:13.630 --> 00:00:17.830
In much the same way, an outlet in iOS is also a connection,

00:00:17.830 --> 00:00:21.370
it's a connection between our code, and something on the story board.

00:00:22.630 --> 00:00:24.490
Let's see how this works in code.

00:00:24.490 --> 00:00:29.100
So, to manage screen space, I will slide out the utility area, and

00:00:29.100 --> 00:00:32.369
then go on to assistant editor, there.

00:00:32.369 --> 00:00:36.630
Then I will hold down Ctrl on my keyboard, click on this label,

00:00:36.630 --> 00:00:40.430
and then drag to the top of this class and let go.

00:00:40.430 --> 00:00:42.870
Here I have a popup that I can fill in.

00:00:42.870 --> 00:00:47.920
The type of this connection is an outlet, I will call it recordingInProgress.

00:00:47.920 --> 00:00:51.410
The type of this label in iOS is called UILabel.

00:00:51.410 --> 00:00:53.460
UI stands for User Interface.

00:00:53.460 --> 00:00:54.680
And then I will hit Connect.

00:00:56.380 --> 00:01:00.590
Okay, so I have some code here, that X code has written for me.

00:01:00.590 --> 00:01:02.630
Let's unpack this line.

00:01:02.630 --> 00:01:06.120
So, we created a variable called recordingInProgress,

00:01:06.120 --> 00:01:07.960
the type of this variable is UILabel.

00:01:09.310 --> 00:01:12.770
Here, we also see something called IBOutlet.

00:01:12.770 --> 00:01:15.070
IB stands for interface builder.

00:01:15.070 --> 00:01:19.970
And IBOutlet tells developers like us that hey, this variable is not an ordinary

00:01:19.970 --> 00:01:24.990
variable, but is linked to the storyboard or the interface builder somehow.

00:01:24.990 --> 00:01:27.930
Another thing to notice here is this keyword, weak.

00:01:28.960 --> 00:01:30.160
What you should know about this for

00:01:30.160 --> 00:01:34.169
now is that this keyword allows us to manage memory for our variable.

00:01:35.180 --> 00:01:36.950
And weak as opposed to what?

00:01:36.950 --> 00:01:38.060
Strong.

00:01:38.060 --> 00:01:40.940
That's right, strong is also a keyword in iOS.

00:01:40.940 --> 00:01:44.770
Both weak and strong help us manage memory for our variables.

00:01:44.770 --> 00:01:49.000
The keyword means, hey I initialized that variable, so

00:01:49.000 --> 00:01:51.030
keep it around till I don't need it anymore.

00:01:52.460 --> 00:01:57.210
Weak on the other hand means, someone else created that variable, someone else.

00:01:58.510 --> 00:02:02.540
And all I want to do is have a weak reference to that variable.

00:02:02.540 --> 00:02:06.410
Now, if you want to learn more about these 2 keywords, weak and strong,

00:02:06.410 --> 00:02:10.490
we found a great stack overflow page, that explains these two really well.

00:02:10.490 --> 00:02:12.850
The link to that page is in the instructor notes.

00:02:12.850 --> 00:02:16.760
So if I return to my code, I can see that we also have a bang or

00:02:16.760 --> 00:02:19.310
an exclamation point here at the end.

00:02:19.310 --> 00:02:23.550
Is this our way of demonstrating excitement for declaring this variable?

00:02:23.550 --> 00:02:24.620
Not quite.

00:02:24.620 --> 00:02:28.160
The real answer lies around in idea and swift called Optionals.

00:02:29.240 --> 00:02:32.810
Swift allows us to declare a variable, like we have done here.

00:02:32.810 --> 00:02:35.710
And it also allows us to not declare any value for

00:02:35.710 --> 00:02:39.890
this variable in our code, or have its value be, Optional.

00:02:39.890 --> 00:02:43.230
There is a document in the instructor notes that explains optionals and

00:02:43.230 --> 00:02:45.610
these exclamation points in detail.

00:02:45.610 --> 00:02:49.290
I encourage you to bookmark it for now, and read it later.

00:02:49.290 --> 00:02:53.280
Okay, now that I have an outlet to this label in our code.

00:02:53.280 --> 00:02:57.280
I can go back to this function, remember, this is the action that gets called

00:02:57.280 --> 00:03:02.260
when we press the microphone button, and change the visibility of our label.

00:03:03.260 --> 00:03:08.210
So I can say, recordingInProgress, and there is an auto complete.

00:03:08.210 --> 00:03:14.080
I can say, it is no longer hidden, there.

00:03:15.120 --> 00:03:18.870
So what I'm saying here, is that when this microphone button gets pressed,

00:03:18.870 --> 00:03:21.220
this record audio function gets called.

00:03:21.220 --> 00:03:25.310
And at that point I do not want this label to be hidden anymore.

00:03:25.310 --> 00:03:28.030
All right, let me run this code and see what happens.

00:03:28.030 --> 00:03:31.930
All right, so I don't see the label when the app first launches which is good.

00:03:31.930 --> 00:03:35.350
And when I press the microphone button, the label starts to show.

00:03:35.350 --> 00:03:36.720
That's great.

00:03:36.720 --> 00:03:41.267
So, I'm going to go back to my code, slide out my debug area, and

00:03:41.267 --> 00:03:45.761
then remove this one TODO, because we've already done it now.

00:03:45.761 --> 00:03:46.261
Done.

