WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.420
&gt;&gt; Got to love that kind of story. So we try
very, very, very hard to give you all the

00:00:08.420 --> 00:00:12.860
optimization tools that we can, as you've
seen and they can be very effective, but if,

00:00:12.860 --> 00:00:18.830
what if the application still isn't fast enough.
What if you've done everything you can to

00:00:18.830 --> 00:00:24.640
make your Java Script small and fast and your
application still, still feels sluggish? Well,

00:00:24.640 --> 00:00:29.960
actually this does happen. Java Script is
not always the main source of latency and

00:00:29.960 --> 00:00:34.470
sluggish in an application. There's a whole
other world of things that can make your app

00:00:34.470 --> 00:00:41.420
feel slow, that have been invisible in the
past. I am super excited to be introducing

00:00:41.420 --> 00:00:47.550
Speed Tracer tonight as part of GWT 2.0, that's
going to help you with the rest of the story.

00:00:47.550 --> 00:00:51.399
To tell you that story in detail. I'd like
to introduce Kelly Norton, the Tech Lead of

00:00:51.399 --> 00:00:57.879
Speed Tracer.
&gt;&gt; NORTON: Thanks, Bruce. So first of all,

00:00:57.879 --> 00:01:01.030
I just want to say in this Google Developer
Event, the great thing about these Google

00:01:01.030 --> 00:01:04.800
Developer Events, if you're willing to wear
anything up here, they'll give you great shirts,

00:01:04.800 --> 00:01:12.481
check that out, awesome. So, if you ever had
to fix a performance problem in web application,

00:01:12.481 --> 00:01:17.980
this part of tonight's event is especially
for you. So, a few of us on the GWT team developed

00:01:17.980 --> 00:01:23.360
the reputation for being able to run down
these tricky performance problems in web applications.

00:01:23.360 --> 00:01:27.770
The great thing about that type of work is
if you're able to pinpoint a problem in an

00:01:27.770 --> 00:01:33.780
application for a team, you're the hero. Well,
at least for a little while. But the non-so-great

00:01:33.780 --> 00:01:38.590
thing about it is invariably requires debugging
the browser itself. You have to be constantly

00:01:38.590 --> 00:01:42.110
building from source. You have to sprinkle
in all these little pieces of instrumentation

00:01:42.110 --> 00:01:47.430
code into that source, and then once you get
it in place, you have to, sift through a reams

00:01:47.430 --> 00:01:52.140
of data to find out exactly what in your application
is causing problems. And we did this quite

00:01:52.140 --> 00:01:57.110
a bit, and while we built a lot of little
tools to get through it, every time we did

00:01:57.110 --> 00:02:03.700
it, it kept us up late at night, which we--which
we didn't like. So, after a while, we realized

00:02:03.700 --> 00:02:08.202
that, all this timing code and all these little
tools are generally helpful and we wanted

00:02:08.202 --> 00:02:12.720
to make them available to all developers.
So, we pulled the--we took the instrumentation

00:02:12.720 --> 00:02:17.760
code and we contributed it to web kit, which
is the browser engine inside of Google Chrome,

00:02:17.760 --> 00:02:21.359
and then we took all our little tools and
we pulled them together into a larger tool,

00:02:21.359 --> 00:02:24.959
that helps you visualize and make sense as
all the new data that's now coming out, out

00:02:24.959 --> 00:02:30.999
of the browser. And so, we're going to release
this tool as part of Google Web Tool Kit 2.0.

00:02:30.999 --> 00:02:36.819
So we call the tool Speed Tracer, and it does
three things to help you make your web apps

00:02:36.819 --> 00:02:41.129
faster. First thing it does is it allows you
to monitor application as you use them to

00:02:41.129 --> 00:02:47.500
be able to spot performance problems as you--as
they happen. The second thing is, exposes

00:02:47.500 --> 00:02:53.620
a lot of timing data--exposes a lot of timing
data from key parts of the browser, so you

00:02:53.620 --> 00:02:57.930
can know exactly what are--what's causing
those--those problems, those performance problems.

00:02:57.930 --> 00:03:03.689
And the last thing it does is it actually,
automatically highlights many of performance

00:03:03.689 --> 00:03:07.870
problems we ran into as we were up late at
night debugging browsers. So, as fun as it

00:03:07.870 --> 00:03:11.410
is to sit here and to tell you the story of
how it came about and then explain what it

00:03:11.410 --> 00:03:15.519
does for you, it's about twice as much fun
to show it to you. So, I'm going to do that

00:03:15.519 --> 00:03:27.079
instead. So, get over to the right screen,
I'm not going to do Andrew's demo again. So,

00:03:27.079 --> 00:03:32.980
I have a web application and I'm interested
in knowing how it performs. I'm just going

00:03:32.980 --> 00:03:38.340
to use Google Calendar as an example. To get
started with Speed Tracer, it's easy. I just

00:03:38.340 --> 00:03:43.969
click on the Speed Tracer button on the browser,
the interface comes up and we're now monitoring

00:03:43.969 --> 00:03:48.930
what's going on inside the browser as we use
Google Calendar. Now, if I go into Google

00:03:48.930 --> 00:03:55.669
calendar and refresh; then return to the Speed
Tracer interface, we'll see that some activity

00:03:55.669 --> 00:03:59.430
has appeared. But let me show--let me actually
explain what you're looking at. So, the first

00:03:59.430 --> 00:04:06.169
thing you'll notice is the sluggishness graph
at the top, scrap at the top, we call that

00:04:06.169 --> 00:04:11.859
sluggishness graph. It's--it's simply a measure
of how busy the browser is while it executes

00:04:11.859 --> 00:04:17.540
your application. So it's really easy to use.
If--if the graph is low on the Y axis, it

00:04:17.540 --> 00:04:21.820
means that the browser is responding well.
It was able to respond to the users. However,

00:04:21.820 --> 00:04:27.040
if the graph reaches the top, it means that
you're keeping the browser too busy and users

00:04:27.040 --> 00:04:31.410
may start to notice delays, in other words,
they'll think your app sluggish. Now, just

00:04:31.410 --> 00:04:36.470
as users notice delays associated with keeping
the browser too busy, they also notice when

00:04:36.470 --> 00:04:41.010
it takes to load network resources. So, Speed
Tracer also has this network graph that shows

00:04:41.010 --> 00:04:46.320
you exactly when network resources start and
stop loading. You'll also notice that on the

00:04:46.320 --> 00:04:51.090
sluggishness graph, the network activity is
actually overlaid directly. So it's easy to

00:04:51.090 --> 00:04:54.450
correlate the loading and resources with their
corresponding events in the browser. And if

00:04:54.450 --> 00:04:58.310
you ever try to debug a problem with the XML
HTTP request, you'll understand why that's

00:04:58.310 --> 00:05:03.250
important. Now, once I find some interesting
activity on the sluggishness graph, because

00:05:03.250 --> 00:05:08.860
that's where I usually start. I want to zoom
into that region and time, so I can push the

00:05:08.860 --> 00:05:13.760
zoom buttons at the top, zoom in, or I can
use the handles in the overview graph, or

00:05:13.760 --> 00:05:18.400
what I usually do is I just select the region
directly on the selections graph itself. And

00:05:18.400 --> 00:05:23.290
once, I've selected the region, what is showing
you here on the bottom is all the significant

00:05:23.290 --> 00:05:28.470
events that are contributing to the sluggishness--sluggishness
of this application. And if I mouse over these

00:05:28.470 --> 00:05:33.210
events, you'll see that on the sluggishness
graph, they are actually highlighted and their

00:05:33.210 --> 00:05:37.740
duration is emphasized. So, for our final
event and I'm interested in knowing more about

00:05:37.740 --> 00:05:42.650
where the time went. I simply click on that
row and it brings up a detailed breakdown,

00:05:42.650 --> 00:05:47.270
includes both, a pie graph form that gives
you a breakdown of the types of activities,

00:05:47.270 --> 00:05:52.680
but also a detailed waterfall view that shows
you exactly what happened and time. And by

00:05:52.680 --> 00:05:56.890
the way, as we look at the types of activity
you see here, you'll notice many things that

00:05:56.890 --> 00:06:01.880
are previously missing from development tools,
the things like, the parsing of HTML, delaying

00:06:01.880 --> 00:06:07.130
out of DOM Elements, CSS style recalculation,
even painting pixels to the screen. These

00:06:07.130 --> 00:06:10.450
are all the things that can affect your apps
performance, but as a developer they've previously

00:06:10.450 --> 00:06:16.660
been completely hidden to you. Another thing
I'll--another thing I'll mention is that,

00:06:16.660 --> 00:06:19.820
Google Calendar is actually an example of
an interactive application. It's not enough

00:06:19.820 --> 00:06:24.560
to know that it loads as fast as it can. We
also want to know that as the user interacts

00:06:24.560 --> 00:06:29.700
with it, it continues to be snappy. So, if
I go back in the Google Calendar, create a

00:06:29.700 --> 00:06:36.940
new calendar entry. I suspect that after this,
I will want some drinks. Then I return back

00:06:36.940 --> 00:06:42.030
to Speed Tracer, I'll zoom all the way out,
so we can see the full timeline. You see the--there's

00:06:42.030 --> 00:06:47.000
some new activity over to the right of the
sluggishness graph. By zooming into that--if

00:06:47.000 --> 00:06:52.780
I can zoom into that, we can see all the details
of the events here, just as we did as we were

00:06:52.780 --> 00:06:57.800
loading the application. So another thing
that is important to mention, there's many

00:06:57.800 --> 00:07:01.930
performance and profiling tools that actually
cause a big slow down in your application

00:07:01.930 --> 00:07:05.930
as you use them, and it gets in the way. We've
work really hard with Speed Tracer to make

00:07:05.930 --> 00:07:11.370
sure these sorts of observer effects are negligible.
So, if you're debugging an application in

00:07:11.370 --> 00:07:16.220
Speed Tracer and the application seems slow,
it's not Speed Tracer's fault, it's probably

00:07:16.220 --> 00:07:21.650
your code. And now that--since I'm bragging
on Speed Tracer a little bit, I also want

00:07:21.650 --> 00:07:26.170
to point out, the Speed Tracer itself, we
tried to make it a responsive application.

00:07:26.170 --> 00:07:29.250
As a matter of fact, many people thought that
it was actually a desktop application when

00:07:29.250 --> 00:07:34.960
we began showing it around Google. But it's
not, it's an HTML 5 application, deployed

00:07:34.960 --> 00:07:40.090
as a Chrome extension and it's built with
GWT. We want it to be an example of the type

00:07:40.090 --> 00:07:44.330
of application that Speed Tracer actually
encourages and we're really going to get this

00:07:44.330 --> 00:07:48.150
question, so I'm going to answer it, I mean,
go ahead and answer. We absolutely did this

00:07:48.150 --> 00:07:55.240
by using Speed Tracer on Speed Tracer. So,
that's sort of an intro to how to use it and

00:07:55.240 --> 00:07:59.400
how to get it started. What I want to do now
is take you through a scenario of the types

00:07:59.400 --> 00:08:05.000
of problems we're able to pinpoint using Speed
Tracer. So, not too long ago the AdWords team

00:08:05.000 --> 00:08:08.370
came to us and they said they're having a
performance problem. Whenever they displayed

00:08:08.370 --> 00:08:14.180
a table in their user interface, it felt like
the browser froze or sort of locked up. Now,

00:08:14.180 --> 00:08:19.180
I'm not going to show you the entire AdWords
application, because it's really complex,

00:08:19.180 --> 00:08:25.480
instead I've created a simple, but hopefully
dramatic reenactment of how this happened.

00:08:25.480 --> 00:08:31.620
So, if I bring up my reenactment, AdWords
came to us, displaying the table and application

00:08:31.620 --> 00:08:39.560
look ed how, like this. Obviously a little
slow and if we look inside the Speed Tracer,

00:08:39.560 --> 00:08:43.930
zoom out; and I--I need to find my way to
the relevant events and I've made that easy

00:08:43.930 --> 00:08:48.300
by using a feature in Speed Tracer that allows
us to put some Java Script code in our application

00:08:48.300 --> 00:08:52.220
and have it mark directly on the timeline,
when that even occurred. I could find that

00:08:52.220 --> 00:08:56.420
by finding a blue info bubble on the left.
So I'm going to zoom in, just a little bit,

00:08:56.420 --> 00:09:00.430
so you can get a better view. You see the
blue info bubble on the left, pointing out

00:09:00.430 --> 00:09:06.259
the event. Now, the one thing you'll notice
about this event, or the first thing you'll

00:09:06.259 --> 00:09:11.720
notice is, the Speed Tracer thinks it's sluggish
and we saw that when we pushed on the button.

00:09:11.720 --> 00:09:15.730
The other thing that amazed us was just how
much of this event was being spent in layout.

00:09:15.730 --> 00:09:21.330
In fact, in case you can't read that, it's
90% of the time going to layout, and also

00:09:21.330 --> 00:09:27.360
if you look at the waterfall view, you'll
see it's just a lot of really small layout

00:09:27.360 --> 00:09:32.290
events. So, but you'll remember at the beginning
of this talk, I mentioned that Speed Tracer

00:09:32.290 --> 00:09:36.300
would automatically identify many of the problems
that we ran into. This is in fact one of those

00:09:36.300 --> 00:09:42.589
problems, it turns out that it's easy to construct
your DOM Code in such a way that you cause

00:09:42.589 --> 00:09:46.540
the browser to do a layout over and over again.
In fact, in many cases, you actually cause

00:09:46.540 --> 00:09:51.730
the same DOM Elements to be laid out repeatedly.
Speed Tracer is actually calling this out

00:09:51.730 --> 00:09:57.389
explicitly, you see on the left there's some
hints in the green and orange bubbles. On

00:09:57.389 --> 00:10:02.350
of these points out the fact, that we're doing
a lot excessive layout here. Now, arm with--armed

00:10:02.350 --> 00:10:08.399
with the knowledge of two things, one; that
this problem is occurring in our click event

00:10:08.399 --> 00:10:12.670
and that two, it's being caused by excessive
layout, we went into the AdWords code, and

00:10:12.670 --> 00:10:19.019
it turns out, all of this logic was in basically
one function. We--we separated two pieces

00:10:19.019 --> 00:10:23.710
of very important code. We've separated the
pieces of code that built up the DOM Element

00:10:23.710 --> 00:10:27.632
from a piece of code that tried to measure
how wide those DOM Elements were when they

00:10:27.632 --> 00:10:36.050
were on the screen. All in all, very small
change, a few lines; however, it made a big

00:10:36.050 --> 00:10:40.769
difference in the performance of the application,
which I'll show you now. This is about--this

00:10:40.769 --> 00:10:45.190
is what the AdWords application looks like
now, where they're displaying the table of

00:10:45.190 --> 00:10:48.899
the--in the AdWords application looks like
now. Going back to Speed Tracer so we can

00:10:48.899 --> 00:10:54.329
get a good comparison, and again, we'll use
that feature; it allows us to just look for

00:10:54.329 --> 00:10:59.529
the info bubbles over on the left. Now, first
thing you'll notice that it's much faster,

00:10:59.529 --> 00:11:07.110
right? It's barely reaching the top of the
graph now. But the other important thing is,

00:11:07.110 --> 00:11:13.040
we went from 90% layout to only three percent
layout. So with just a small change, I was

00:11:13.040 --> 00:11:19.660
able to make a huge impact in the application.
And by the way, this is the type of problem

00:11:19.660 --> 00:11:22.850
that would have been really hard to find,
because layout is usually completely hidden

00:11:22.850 --> 00:11:27.170
to you as a developer. You see it is a long
Java Script call, but in fact, there's all

00:11:27.170 --> 00:11:32.509
this other activity going on inside the browser,
like layout. So, let me just show one more

00:11:32.509 --> 00:11:37.540
thing, suppose that I find the performance
problem in an application just like the AdWords

00:11:37.540 --> 00:11:42.329
team did. Now, the first thing I want to do
is want to tell my team about it, because

00:11:42.329 --> 00:11:46.120
I don't want to fix it myself. I want somebody
to at least help me with it, right? So, I

00:11:46.120 --> 00:11:51.139
could put together an email that list all
the times and try to describe what I saw.

00:11:51.139 --> 00:11:54.809
But that's going to be a hard email to type
and it's going to be an even harder email

00:11:54.809 --> 00:12:02.139
to read. So, what I would rather do, is just
go into the tool, hit a save button, save

00:12:02.139 --> 00:12:09.449
that file to disk. And then, I'll email that
to my teammates. When they get that by email,

00:12:09.449 --> 00:12:17.100
simply open it up in the browser again, hit
open monitor, and this is going to bring up

00:12:17.100 --> 00:12:21.939
the same view that I was looking at as I was
looking at the--as I was originally looking

00:12:21.939 --> 00:12:29.860
at the problem. So, not only are we seeing
the same thing as team--the same thing as

00:12:29.860 --> 00:12:35.920
teammates, but I can still use all the controls
in the interface to navigate all the data

00:12:35.920 --> 00:12:41.720
and even look at some details that the original
person that found this may not--may have even

00:12:41.720 --> 00:12:47.649
overlooked. So you can imagine how nice it
is, if you get a, if you get a bug in your

00:12:47.649 --> 00:12:51.010
issue tracker about [INDISTINCT] problems
that have one of these things attached to

00:12:51.010 --> 00:12:58.759
it. So, if we can switch back to slides; so
this is Speed Tracer, it's a new tool, allows

00:12:58.759 --> 00:13:02.949
you to monitor your applications as you them
to find out where their performance problems;

00:13:02.949 --> 00:13:09.959
it allows you to see a lot of these hidden
timing inside of browsers that previously

00:13:09.959 --> 00:13:16.139
confused and left browsers debugging for days.
And then, it also it's automatically identifies

00:13:16.139 --> 00:13:22.129
and highlights many of the problems that are
common in causing performance problems. Like

00:13:22.129 --> 00:13:26.370
everything in Google Web Tool Kit, it's all
open source, so we hope that everyone will

00:13:26.370 --> 00:13:31.959
contribute. But most importantly we hope that
you'll use Speed Tracer in your next application,

00:13:31.959 --> 00:13:35.850
to make it as responsive as possible without
having to stay up all night, debugging browsers.

00:13:35.850 --> 00:13:42.059
&gt;&gt; Thank you, thank you, nice, nice.

