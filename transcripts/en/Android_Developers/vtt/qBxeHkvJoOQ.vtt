WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.237
Android
Performance Patterns

00:00:02.237 --> 00:00:03.820
For mobile applications,

00:00:03.820 --> 00:00:07.020
serialized data is a large and
constant chunk of information

00:00:07.020 --> 00:00:09.190
that you have to pull
down from your servers.

00:00:09.190 --> 00:00:10.630
But did you know
that the ordering

00:00:10.630 --> 00:00:12.440
of the data inside
your serialized form

00:00:12.440 --> 00:00:15.410
can have a huge impact
on its resulting size?

00:00:15.410 --> 00:00:16.410
My name is Colt McAnlis.

00:00:16.410 --> 00:00:18.010
And when it comes
to serialized data,

00:00:18.010 --> 00:00:20.520
it might be worthwhile to
kick your object oriented

00:00:20.520 --> 00:00:22.380
standards to the
curb for something

00:00:22.380 --> 00:00:23.900
a little more powerful.

00:00:23.900 --> 00:00:25.570
See most folks
organize their data

00:00:25.570 --> 00:00:29.060
in memory as objects full of
numbers and functions and all

00:00:29.060 --> 00:00:29.870
the other stuff.

00:00:29.870 --> 00:00:32.220
Serializing arrays
of those objects

00:00:32.220 --> 00:00:35.495
preserves their structure in
the resulting data stream.

00:00:35.495 --> 00:00:36.870
This kind of
organization is what

00:00:36.870 --> 00:00:39.630
we call an array
of structs form,

00:00:39.630 --> 00:00:42.510
or array of objects or
classes or whatever language

00:00:42.510 --> 00:00:43.640
you want to call it.

00:00:43.640 --> 00:00:45.540
The gist is that the
serialized format

00:00:45.540 --> 00:00:48.070
mirrors the in-memory
object oriented layout

00:00:48.070 --> 00:00:50.860
of the data, which is convenient
from a programming perspective

00:00:50.860 --> 00:00:53.920
but actually ends up bloating
your serialized stream.

00:00:53.920 --> 00:00:56.650
Firstly, consider that
in the serialized form,

00:00:56.650 --> 00:00:59.811
each member value must generally
be declared with its property

00:00:59.811 --> 00:01:00.310
name.

00:01:00.310 --> 00:01:02.494
Meaning that for each
instance of your class,

00:01:02.494 --> 00:01:04.910
every property will have the
full property name as well as

00:01:04.910 --> 00:01:07.430
the value declared in
the serialized file.

00:01:07.430 --> 00:01:09.130
So obviously your
files going to be

00:01:09.130 --> 00:01:11.350
larger as a result of all
these redundant property

00:01:11.350 --> 00:01:12.820
names just sitting around.

00:01:12.820 --> 00:01:14.570
Secondly, you need to
understand that this

00:01:14.570 --> 00:01:17.770
is the worst possible data
layout for applying compression

00:01:17.770 --> 00:01:19.350
to your serialized file.

00:01:19.350 --> 00:01:23.120
Consider GZIP compression,
which is standard for most HTTP

00:01:23.120 --> 00:01:23.970
responses.

00:01:23.970 --> 00:01:27.200
GZIP compresses data by finding
duplicate strings in your file,

00:01:27.200 --> 00:01:30.640
as long as they're within
a window of 32k characters

00:01:30.640 --> 00:01:31.600
from each other.

00:01:31.600 --> 00:01:33.500
So the larger your
serialized class is,

00:01:33.500 --> 00:01:35.410
the further away
similar data types

00:01:35.410 --> 00:01:37.850
are, meaning that there's
less duplicating inside

00:01:37.850 --> 00:01:41.800
of that 32k window resulting
in less compression savings.

00:01:41.800 --> 00:01:44.510
In general, using the
array of structs form

00:01:44.510 --> 00:01:47.390
creates larger serialized files
that don't really compress

00:01:47.390 --> 00:01:48.650
as well as they should.

00:01:48.650 --> 00:01:50.330
So what's the solution?

00:01:50.330 --> 00:01:53.020
The Struct-of-Arrays form.

00:01:53.020 --> 00:01:54.980
Basically, think
of Struct-of-Arrays

00:01:54.980 --> 00:01:56.890
as a transpose on your data.

00:01:56.890 --> 00:02:00.090
Given a list of objects,
take all of one property

00:02:00.090 --> 00:02:03.610
from every element, enlist them
together in their own array.

00:02:03.610 --> 00:02:05.890
And then do this for each
property in the class.

00:02:05.890 --> 00:02:08.479
For example, make an array
for just the width values

00:02:08.479 --> 00:02:11.009
and a separate array
for the height values.

00:02:11.009 --> 00:02:13.780
The serialized result of
this produces simple arrays

00:02:13.780 --> 00:02:15.772
of similar typed data.

00:02:15.772 --> 00:02:17.230
And when it comes
to serialization,

00:02:17.230 --> 00:02:19.980
this format has some
immediate benefits.

00:02:19.980 --> 00:02:21.980
Firstly, it removes the
redundant property names

00:02:21.980 --> 00:02:23.400
from the serialized format.

00:02:23.400 --> 00:02:24.950
Basically, they
all get collapsed

00:02:24.950 --> 00:02:25.990
into a single instance.

00:02:25.990 --> 00:02:28.320
So already, you're going
to be producing a smaller

00:02:28.320 --> 00:02:29.780
serialized file.

00:02:29.780 --> 00:02:32.854
Secondly, similar data
types are now contiguous,

00:02:32.854 --> 00:02:34.270
meaning that the
GZIP algorithm is

00:02:34.270 --> 00:02:36.370
going to have a better shot
at finding duplicate matches,

00:02:36.370 --> 00:02:38.911
since duplicates are now going
to be closer together and more

00:02:38.911 --> 00:02:41.540
likely to exist
in the 32k window.

00:02:41.540 --> 00:02:44.180
And thirdly, organizing
your data in this form

00:02:44.180 --> 00:02:47.820
helps you actually separate
out content for different types

00:02:47.820 --> 00:02:48.750
of compression.

00:02:48.750 --> 00:02:51.747
For example, if you have
an array of 1,000 numbers,

00:02:51.747 --> 00:02:54.330
chances are GZIP isn't going to
do much with that information.

00:02:54.330 --> 00:02:56.970
But it's better for you
to apply delta compression

00:02:56.970 --> 00:02:58.910
to that stream of numbers
before throwing it

00:02:58.910 --> 00:03:00.319
into the serialized file.

00:03:00.319 --> 00:03:01.860
This is something
you really couldn't

00:03:01.860 --> 00:03:05.160
do in the array of structs
form due to the complexities

00:03:05.160 --> 00:03:08.079
of the object oriented layout
that is inherent there.

00:03:08.079 --> 00:03:09.870
Now it's worth putting
out that once you've

00:03:09.870 --> 00:03:11.580
transposed your
data, you can get

00:03:11.580 --> 00:03:14.520
even better compression
and faster serialization

00:03:14.520 --> 00:03:17.750
by adopting binary serialization
formats like protobuffs,

00:03:17.750 --> 00:03:19.420
nanobuffs, or FlatBuffers.

00:03:19.420 --> 00:03:22.030
These formats produce
much smaller files

00:03:22.030 --> 00:03:24.370
than JSON or XML counterparts.

00:03:24.370 --> 00:03:26.710
And at the end of the day,
that's kind of what you want.

00:03:26.710 --> 00:03:27.210
Right?

00:03:27.210 --> 00:03:28.570
I mean, different
layers of awesome

00:03:28.570 --> 00:03:30.153
that you can pile
on top of each other

00:03:30.153 --> 00:03:31.695
to create the
smoothest app possible.

00:03:31.695 --> 00:03:34.069
Which is why you should check
out the rest of the Android

00:03:34.069 --> 00:03:35.280
Performance Patterns videos.

00:03:35.280 --> 00:03:38.020
And don't forget to join the
Google+ community for other

00:03:38.020 --> 00:03:40.570
insights from other
great developers.

00:03:40.570 --> 00:03:43.710
So keep calm, profile your
code, and always remember,

00:03:43.710 --> 00:03:45.490
perf matters.

