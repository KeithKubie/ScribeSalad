WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:03.600
&gt;&gt;Joe Malin: Hello, and welcome once again
to Android Developer Office Hours.

00:00:03.600 --> 00:00:11.549
My name is Joe Malin, and I have with me today
DevRel people: Alexander Lucas, Reto Meier,

00:00:11.549 --> 00:00:18.170
Trevor Johns, and from Google engineering,
Francesco-- Sorry, I screwed up his first

00:00:18.170 --> 00:00:19.170
name.

00:00:19.170 --> 00:00:21.070
&gt;&gt;Francesco Nerieri: Francesco Nerieri.

00:00:21.070 --> 00:00:23.390
&gt;&gt;Malin: Thank you, Francesco.

00:00:23.390 --> 00:00:28.670
[laughter] The first thing we want to do is
find out, with a little intro from Francesco,

00:00:28.670 --> 00:00:33.910
about Google Cloud Messaging, which is a new
service that we introduced at Google IO.

00:00:33.910 --> 00:00:35.000
Go ahead.

00:00:35.000 --> 00:00:36.640
&gt;&gt;Nerieri: Hi everyone.

00:00:36.640 --> 00:00:43.100
Google Cloud Messaging is a new service which
is evolution from the old C2DM service, which

00:00:43.100 --> 00:00:48.070
allows you to send messages from the Cloud
to the device.

00:00:48.070 --> 00:00:55.199
This is an important service if you want to
avoid polling, which saves battery life because

00:00:55.199 --> 00:01:01.469
your application doesn't have to work out
the radio every X seconds or minutes due to

00:01:01.469 --> 00:01:02.469
polling.

00:01:02.469 --> 00:01:09.380
But when the data is available on the Cloud,
then the server can send it down to the device.

00:01:09.380 --> 00:01:12.970
Improvement regards scalability, performance.

00:01:12.970 --> 00:01:17.950
There is a new set of features for APIs that
allows you to send multi-cast messages.

00:01:17.950 --> 00:01:21.170
With one request, you can send up to 1000
messages.

00:01:21.170 --> 00:01:24.730
Up to one message to up to 1000 different
devices.

00:01:24.730 --> 00:01:28.720
Time to leave, so your messages can expire.

00:01:28.720 --> 00:01:32.270
And so on and so forth, a bit more.

00:01:32.270 --> 00:01:33.270
Other APIs.

00:01:33.270 --> 00:01:39.030
&gt;&gt;Malin: Please send in or call in your questions.

00:01:39.030 --> 00:01:44.750
With that, we'll start now with the questions
from Moderator.

00:01:44.750 --> 00:01:49.480
The first question is: why doesn't Google
provide developers with more stats for the

00:01:49.480 --> 00:01:57.870
downloads, such as how users found the app,
keywords, categories, related apps, etcetera.

00:01:57.870 --> 00:02:08.229
&gt;&gt;Trevor Johns: All right.

00:02:08.229 --> 00:02:15.990
[electronic music playing]

00:02:15.990 --> 00:02:28.940
&gt;&gt;Malin: Okay, thank you, Trevor.

00:02:28.940 --> 00:02:33.510
Next question, also about Google Play: how
come selling apps on Google Play is still

00:02:33.510 --> 00:02:36.690
impossible for most of the world because of
country limitations?

00:02:36.690 --> 00:02:40.210
Why is Google being so opaque on this matter?

00:02:40.210 --> 00:02:41.460
&gt;&gt;Johns: Okay.

00:02:41.460 --> 00:02:48.220
We definitely do want to try and offer Google
Play both for downloads and as well for publishing

00:02:48.220 --> 00:02:50.130
in as many regions as possible.

00:02:50.130 --> 00:02:51.870
But different countries have different legal
climates.

00:02:51.870 --> 00:02:57.140
In some places, it's a bit easier for us to
go and open up shop than it is for others.

00:02:57.140 --> 00:02:59.200
We definitely do want to go to expand to,
again, as many regions as possible.

00:02:59.200 --> 00:03:05.690
It just takes a bit longer in some places
compared to others.

00:03:05.690 --> 00:03:10.760
It would take a very long time to go explain
what these issues are for each country.

00:03:10.760 --> 00:03:13.000
Just in general, we're working on it.

00:03:13.000 --> 00:03:15.880
We're trying to get there as fast as possible.

00:03:15.880 --> 00:03:16.880
&gt;&gt;Malin: Great.

00:03:16.880 --> 00:03:18.250
Thank you again, Trevor.

00:03:18.250 --> 00:03:20.440
Here is a GCM question.

00:03:20.440 --> 00:03:24.490
GCM servers allow for a maximum of four different
collapse keys.

00:03:24.490 --> 00:03:28.860
Suppose the server's already received and
stored messages with four different collapse

00:03:28.860 --> 00:03:29.860
keys.

00:03:29.860 --> 00:03:31.170
What happens with the next message?

00:03:31.170 --> 00:03:34.240
If it's collapse key, it's not among those
four.

00:03:34.240 --> 00:03:35.770
&gt;&gt;Nerieri: Okay.

00:03:35.770 --> 00:03:42.349
The collapse key concept comes from C2DM where
every single message needs to specify one

00:03:42.349 --> 00:03:44.540
collapse key.

00:03:44.540 --> 00:03:53.459
The limit of four was to avoid people to use
infinite collapse keys to flood the devices.

00:03:53.459 --> 00:04:00.230
We picked up four, which means that you have
four main topics for which you can update

00:04:00.230 --> 00:04:02.350
your device with messages.

00:04:02.350 --> 00:04:07.560
With GCM, we introduced a noncollapsible message,
so you don't have to specify the collapse

00:04:07.560 --> 00:04:08.660
key.

00:04:08.660 --> 00:04:13.760
If you need to send a big number of messages,
even if the devices are offline, you can use

00:04:13.760 --> 00:04:16.180
that [indistinct].

00:04:16.180 --> 00:04:21.410
It's important to note that it shouldn't be
used for messages that you do want to collapse,

00:04:21.410 --> 00:04:26.050
like saying the same news as the very same
update, because we will deliver all those

00:04:26.050 --> 00:04:27.050
messages down.

00:04:27.050 --> 00:04:29.370
So you can still use this four collapse keys.

00:04:29.370 --> 00:04:34.410
Now, we are thinking that this restriction
for GCM doesn't make much sense anymore, so

00:04:34.410 --> 00:04:37.560
we might consider to increase the number of
collapse keys.

00:04:37.560 --> 00:04:43.870
But to answer the question, what happens is
that you should not use more than four because

00:04:43.870 --> 00:04:48.449
the results are not definite.

00:04:48.449 --> 00:04:53.520
If you send messages with six different collapse
keys and the devices are offline, four of

00:04:53.520 --> 00:04:57.880
those messages will make the device, and you're
not guaranteed which one of those four.

00:04:57.880 --> 00:04:58.990
&gt;&gt;Malin: Great.

00:04:58.990 --> 00:05:01.770
Thank you very much, Francesco.

00:05:01.770 --> 00:05:02.889
All right.

00:05:02.889 --> 00:05:07.000
Next question about GCM: I read somewhere
that GCM makes no guarantees regarding the

00:05:07.000 --> 00:05:11.380
time to delivery or order of delivery of GCM
messages.

00:05:11.380 --> 00:05:12.380
Okay.

00:05:12.380 --> 00:05:15.720
Could you give us a rough estimate or target?

00:05:15.720 --> 00:05:19.520
Any plans to provide stats once the system
is running smoothly?

00:05:19.520 --> 00:05:23.870
&gt;&gt;Nerieri: Okay, one question at a time.

00:05:23.870 --> 00:05:26.770
[chuckles] The time of delivery.

00:05:26.770 --> 00:05:29.479
We do guarantee time of delivery for multiple
reasons.

00:05:29.479 --> 00:05:34.300
One is that we have no idea if the device
is offline or online when we receive your

00:05:34.300 --> 00:05:35.300
message.

00:05:35.300 --> 00:05:38.880
If the device is offline, we just store it
and deliver it when it comes back online.

00:05:38.880 --> 00:05:44.470
Two, we have no say on the latency introduced
by, for example, the mobile network between

00:05:44.470 --> 00:05:47.520
our server and the device.

00:05:47.520 --> 00:05:53.220
The numbers I gave are the speech, when I
had the speech at IO, was that roughly, we

00:05:53.220 --> 00:05:55.740
take 95 milliseconds to process a message.

00:05:55.740 --> 00:06:01.880
This is the time the GCM takes from the moment
it receives the message to the moment it sends

00:06:01.880 --> 00:06:02.880
to the device.

00:06:02.880 --> 00:06:05.450
Another part of the question--

00:06:05.450 --> 00:06:11.650
&gt;&gt;Johns: The short answer there is that it's
pretty close to immediate.

00:06:11.650 --> 00:06:12.650
&gt;&gt;Nerieri: Yes, it is.

00:06:12.650 --> 00:06:13.650
&gt;&gt;Johns: Unless there's extenuating circumstances.

00:06:13.650 --> 00:06:19.010
&gt;&gt;Malin: I would say in the best possible
case, it's nearly immediate, but the estimate

00:06:19.010 --> 00:06:23.139
or target, a lot of it depends on what's going
on.

00:06:23.139 --> 00:06:24.710
Whether the device is offline or online.

00:06:24.710 --> 00:06:25.710
&gt;&gt;Nerieri: Correct.

00:06:25.710 --> 00:06:32.040
But also, if your server sends a message in
Germany, and the user that receives the message

00:06:32.040 --> 00:06:38.240
is somewhere else in the world, like in Taiwan,
we have quite a bit of routing to do from

00:06:38.240 --> 00:06:40.310
that side of the world to the other one.

00:06:40.310 --> 00:06:44.139
The latency can go out to 150 milliseconds.

00:06:44.139 --> 00:06:49.370
But it's definitely, if the device is connected,
it's way below one second.

00:06:49.370 --> 00:06:50.830
&gt;&gt;Malin: Right.

00:06:50.830 --> 00:06:55.130
&gt;&gt;Nerieri: The other part was the order of
messages.

00:06:55.130 --> 00:07:01.880
The way we send messages downstream is when
we receive a message, we store it, unless

00:07:01.880 --> 00:07:02.880
the time to leave is zero.

00:07:02.880 --> 00:07:05.710
In that case, we just send it down directly.

00:07:05.710 --> 00:07:10.670
But if we store a message and a second one
comes, we deliver in that order.

00:07:10.670 --> 00:07:16.320
But network, from your servers to our servers,
does not guarantee that if you send two messages

00:07:16.320 --> 00:07:20.440
in the same millisecond, that we will receive
them in that exact order.

00:07:20.440 --> 00:07:21.610
If we receive them swapped, then we'll deliver
them swapped.

00:07:21.610 --> 00:07:27.610
&gt;&gt;Alexander Lucas: So does that mean that
it's guaranteed that we're sending them in

00:07:27.610 --> 00:07:28.610
order?

00:07:28.610 --> 00:07:29.690
&gt;&gt;Nerieri: In the order in which we receive
them.

00:07:29.690 --> 00:07:33.030
&gt;&gt;Lucas: OK
&gt;&gt;Malin: That may not be the order in which

00:07:33.030 --> 00:07:34.460
you sent them to our servers.

00:07:34.460 --> 00:07:35.460
&gt;&gt;Nerieri: Correct.

00:07:35.460 --> 00:07:39.540
Especially if you have a farm of servers that
sends messages at the very same time.

00:07:39.540 --> 00:07:42.580
It depends on the network location.

00:07:42.580 --> 00:07:48.000
&gt;&gt;Malin: I think in the last question was:
do we plan to provide stats on our--

00:07:48.000 --> 00:07:50.990
&gt;&gt;Nerieri: We launched version 1 of Stats.

00:07:50.990 --> 00:07:57.699
If you, as a developer, log into Android Developer
Console, you can see stats for GCM and C2DM

00:07:57.699 --> 00:07:58.699
applications.

00:07:58.699 --> 00:08:03.370
We provide metrics of how many messages are
being sent, how many are stored, collapsed,

00:08:03.370 --> 00:08:04.390
or throttled.

00:08:04.390 --> 00:08:06.370
If you had any errors in the request.

00:08:06.370 --> 00:08:11.870
And also metrics for the registrations that
the user's device are connecting to our servers

00:08:11.870 --> 00:08:13.000
for your application.

00:08:13.000 --> 00:08:14.229
You can already see those.

00:08:14.229 --> 00:08:20.670
We are working for providing a version 2 in
which you will be able to query the life of

00:08:20.670 --> 00:08:21.670
a message.

00:08:21.670 --> 00:08:22.670
[pause]

00:08:22.670 --> 00:08:23.670
&gt;&gt;Malin: Okay, thank you.

00:08:23.670 --> 00:08:36.800
&gt;&gt;Reto Meier: Just before we go to the next
question, I'm getting a little bit of interference

00:08:36.800 --> 00:08:38.900
from the two lavaliere mikes.

00:08:38.900 --> 00:08:39.900
If you guys maybe want to turn those off and
just share the hand-helds with the guys next

00:08:39.900 --> 00:08:40.900
to you.

00:08:40.900 --> 00:08:41.900
&gt;&gt;Malin: All right.

00:08:41.900 --> 00:08:42.900
We'll have to do that.

00:08:42.900 --> 00:08:43.900
&gt;&gt;Johns: Actually, I guess we didn't have
to turn those off.

00:08:43.900 --> 00:08:44.910
We could have just muted them, too, but--
Yes, we do have to share mikes now.

00:08:44.910 --> 00:08:45.910
&gt;&gt;Malin: Right.

00:08:45.910 --> 00:08:50.390
So that's why I have this yellow thing in
front of my face.

00:08:50.390 --> 00:08:54.070
Next question from Moderator is for an app
working with sensitive data.

00:08:54.070 --> 00:08:58.600
What solution would you recommend if I need
to show a login screen every time the app

00:08:58.600 --> 00:09:00.740
comes from the background?

00:09:00.740 --> 00:09:05.130
Related to that, is there an easy way to determine
if your app is currently in the background?

00:09:05.130 --> 00:09:09.120
&gt;&gt;Johns: I think that this is actually a question
that's come up at least once before.

00:09:09.120 --> 00:09:15.720
There's-- First off, to answer the question
of how do you determine if your app is in

00:09:15.720 --> 00:09:19.910
the background, all Android applications have
a life cycle.

00:09:19.910 --> 00:09:23.910
When they start up, you get a on-start or
on-create callback.

00:09:23.910 --> 00:09:27.540
Then you'll get on-resume and so on and so
forth.

00:09:27.540 --> 00:09:30.680
And finally, on-pause, on-stop.

00:09:30.680 --> 00:09:34.060
These callbacks are what allows your app to
know what its current state is.

00:09:34.060 --> 00:09:37.070
That's pretty much the answer to your question
as well, too.

00:09:37.070 --> 00:09:42.000
If you want to go display a login dialog when
your app comes back up from the background,

00:09:42.000 --> 00:09:45.310
if you just want to be on first launch, you
can put it in on-create.

00:09:45.310 --> 00:09:48.690
If you want to make it so it appears when
it's coming back after being in the background

00:09:48.690 --> 00:09:51.810
for a while, you can put it in on-resume.

00:09:51.810 --> 00:09:54.640
It's just a matter of how you want to go and
display this.

00:09:54.640 --> 00:09:58.480
Keep in mind that you don't want to display
your login dialog too frequently.

00:09:58.480 --> 00:10:00.520
Be a bit cautious about how you do use this.

00:10:00.520 --> 00:10:05.200
Also, it's worth noting, as far as your login
screen, don't go and launch that as a separate

00:10:05.200 --> 00:10:06.490
activity.

00:10:06.490 --> 00:10:08.300
There's some security implications there that--.

00:10:08.300 --> 00:10:12.370
You can get it right if you're careful, but
it's very difficult to get right.

00:10:12.370 --> 00:10:16.610
My recommendation there would be just to go
swap out your layout for your login form without

00:10:16.610 --> 00:10:19.810
spawning a whole new activity.

00:10:19.810 --> 00:10:22.899
I think that should answer your question.

00:10:22.899 --> 00:10:31.680
&gt;&gt;Malin: I was going to add something, which
is that I have used apps that have [pause]

00:10:31.680 --> 00:10:32.899
encrypted data in them.

00:10:32.899 --> 00:10:37.990
They ask you for a login screen every time
you switch away from them and switch back,

00:10:37.990 --> 00:10:39.320
which is a little bit of an annoyance.

00:10:39.320 --> 00:10:41.550
&gt;&gt;Johns: Oh, it's very annoying.

00:10:41.550 --> 00:10:44.120
To call out one app in particular, One Password.

00:10:44.120 --> 00:10:46.100
I love the Mac version of it.

00:10:46.100 --> 00:10:50.769
The Android version drives me absolutely nuts
because I log in to get my password, I switch

00:10:50.769 --> 00:10:55.490
to the browser, I enter my password, I go
back to One Password, and it's locked again.

00:10:55.490 --> 00:10:58.529
It hasn't even been 30 seconds.

00:10:58.529 --> 00:11:04.600
The phone already has a lock screen, so I'd
say, at the very least, make this optional

00:11:04.600 --> 00:11:08.480
because it's going to drive a lot of your
users nuts to the point where they might switch

00:11:08.480 --> 00:11:09.730
to other apps.

00:11:09.730 --> 00:11:13.360
Definitely don't make it mandatory.

00:11:13.360 --> 00:11:15.751
Consider that if the user really does want
to keep their phone secure, they've probably

00:11:15.751 --> 00:11:17.720
already set a passcode for the screen as well.

00:11:17.720 --> 00:11:18.720
&gt;&gt;Malin: Right.

00:11:18.720 --> 00:11:24.210
And in fairness to One Pass, I'm aware of
another password [clears throat] app that

00:11:24.210 --> 00:11:27.180
I use which works exactly the same way.

00:11:27.180 --> 00:11:33.010
I think it was designed with the idea that
you might leave the phone around without locking

00:11:33.010 --> 00:11:34.010
it.

00:11:34.010 --> 00:11:39.990
But I think it's better to just trust the
user that the user will know when he or she

00:11:39.990 --> 00:11:44.430
wants to lock the phone itself.

00:11:44.430 --> 00:11:49.420
Having to enter the password every time you
go in to get a different password is a user

00:11:49.420 --> 00:11:50.540
annoyance.

00:11:50.540 --> 00:11:52.279
That would be my comment.

00:11:52.279 --> 00:11:58.120
&gt;&gt;Johns: Phones are much more personal devices
than computers.

00:11:58.120 --> 00:12:03.899
Keep in mind, again, with a lot of the security
considerations you've made, you had to make

00:12:03.899 --> 00:12:06.670
on a computer that wouldn't make sense in
the context of a phone because it is something

00:12:06.670 --> 00:12:09.240
a user typically carries in their pocket.

00:12:09.240 --> 00:12:13.170
And if you really, really do want to implement
this, consider making it a time delay and

00:12:13.170 --> 00:12:15.750
not just an on-background delay.

00:12:15.750 --> 00:12:18.660
&gt;&gt;Malin: Okay.

00:12:18.660 --> 00:12:23.029
Any other comments?

00:12:23.029 --> 00:12:32.030
[pause] Our next question from Moderator is
view.gettag performance versus custom holder

00:12:32.030 --> 00:12:35.240
class for cells in a list view.

00:12:35.240 --> 00:12:46.500
Storing view references using view.settag,
find view by IB, and then retrieving via view.gettag.

00:12:46.500 --> 00:12:47.500
Simpler and less static.

00:12:47.500 --> 00:12:49.529
I'm not really sure what that means.

00:12:49.529 --> 00:12:50.529
[pause]

00:12:50.529 --> 00:12:52.950
&gt;&gt;Johns: All right.

00:12:52.950 --> 00:12:59.010
Well, I'll add you haven't used this for a
gridview, which behaves pretty much similar

00:12:59.010 --> 00:13:00.010
to listview.

00:13:00.010 --> 00:13:03.990
There's really no harm in using settag and
gettag.

00:13:03.990 --> 00:13:07.290
It's there for you to go and store your custom
data, whatever that might be.

00:13:07.290 --> 00:13:12.670
If you find that's an appropriate place to
put metadata, references to objects using,

00:13:12.670 --> 00:13:14.620
etcetera, that's perfectly fine.

00:13:14.620 --> 00:13:18.720
Just keep in mind, though, that your listview
cells get reused.

00:13:18.720 --> 00:13:23.230
But as long as you keep that in mind, where
you decide to put your data doesn't really

00:13:23.230 --> 00:13:24.230
make a difference.

00:13:24.230 --> 00:13:28.250
&gt;&gt;Lucas: I'm trying to figure out what he
means by "versus custom holder."

00:13:28.250 --> 00:13:35.441
I'm assuming that means something like external
hash table, keyed off of the row ID or something

00:13:35.441 --> 00:13:36.820
like that.

00:13:36.820 --> 00:13:41.959
One thing that you would run into in which
where view.settag would be a much better option

00:13:41.959 --> 00:13:45.860
is that, as Trevor was saying, these get recycled.

00:13:45.860 --> 00:13:49.750
If you were using an external hash table or
something like that, you could have 100 entries

00:13:49.750 --> 00:13:57.149
in there with the view stored in there when
you only really need, like, seven.

00:13:57.149 --> 00:14:00.950
That situation would take care of itself if
you just use the view.settag.

00:14:00.950 --> 00:14:02.280
[pause]

00:14:02.280 --> 00:14:06.270
&gt;&gt;Johns: All right.

00:14:06.270 --> 00:14:07.600
Cool.

00:14:07.600 --> 00:14:08.600
Next question, then.

00:14:08.600 --> 00:14:10.110
&gt;&gt;Malin: Thank you very much, Alex.

00:14:10.110 --> 00:14:15.620
The next question is from Moderator again:
with GCM, will there be any third party social

00:14:15.620 --> 00:14:21.730
servers available for us to use, as otherwise,
stuff like Twitter Push, which is difficult

00:14:21.730 --> 00:14:23.600
and pricey to implement.

00:14:23.600 --> 00:14:28.130
I'm not really sure what's meant by third
party social servers.

00:14:28.130 --> 00:14:30.620
I'll let Francesco--

00:14:30.620 --> 00:14:34.340
&gt;&gt;Nerieri: The answer is no.

00:14:34.340 --> 00:14:40.980
Google Cloud Messaging is a messaging service,
which means that your server can send messages

00:14:40.980 --> 00:14:41.980
to the Cloud.

00:14:41.980 --> 00:14:47.850
We deliver it to the device, but we don't
provide any kind of extra feature like bringing

00:14:47.850 --> 00:14:49.810
down social messages or whatever.

00:14:49.810 --> 00:14:55.370
If some developers could create a third party
service that other users could use, but it's

00:14:55.370 --> 00:14:57.240
not Google.

00:14:57.240 --> 00:15:02.230
&gt;&gt;Johns: The one thing that might be worth
mentioning there: one of the new features

00:15:02.230 --> 00:15:07.540
we did add in GCM is that you can actually
have multiple API keys associated with a single

00:15:07.540 --> 00:15:08.540
application.

00:15:08.540 --> 00:15:13.970
As a completely hypothetical example, if Twitter
wanted to go and push messages directly to

00:15:13.970 --> 00:15:17.160
your app, they could go and give you their
own API key.

00:15:17.160 --> 00:15:21.200
You could add that as an authorized key for
your app, and then Twitter would be authorized

00:15:21.200 --> 00:15:23.029
to send directly in to your app.

00:15:23.029 --> 00:15:27.830
Right now, I'm not aware of any social services
that do that, but the functionality is there,

00:15:27.830 --> 00:15:32.519
so if anybody does want to go and build that
out, the backend's already in place for that.

00:15:32.519 --> 00:15:34.690
I got that right, right?

00:15:34.690 --> 00:15:35.690
&gt;&gt;Nerieri: Yes.

00:15:35.690 --> 00:15:36.860
&gt;&gt;Johns: Cool. [laughs]

00:15:36.860 --> 00:15:37.860
&gt;&gt;Malin: Great.

00:15:37.860 --> 00:15:40.420
Thank you very much, Trevor.

00:15:40.420 --> 00:15:49.240
&gt;&gt;Meier: We had a question on the hangouts
from Matthew.

00:15:49.240 --> 00:15:51.940
&gt;&gt;Malin: Okay, go ahead, Matthew.

00:15:51.940 --> 00:15:54.100
[buzzing noise] Hello? [pause]

00:15:54.100 --> 00:15:55.370
&gt;&gt;Matthew: Hello, this is Matt.

00:15:55.370 --> 00:15:58.170
I had a question on the ADB tool.

00:15:58.170 --> 00:16:03.250
When installing devices onto an emulator,
we're using code that's either generated by

00:16:03.250 --> 00:16:05.560
ASM, not necessarily just compiled in Java.

00:16:05.560 --> 00:16:07.170
You get errors like "Dexopt failed" or "Failed
UID changed."

00:16:07.170 --> 00:16:09.100
I'm trying to find if there's a way to find
a general area that just lists where to go

00:16:09.100 --> 00:16:10.100
when you encounter those types of errors.

00:16:10.100 --> 00:16:19.399
I know what they mean, but-- [laughs] Assuming
Dexopt is kind of like a Java lying verify

00:16:19.399 --> 00:16:25.080
error, but with much less details.

00:16:25.080 --> 00:16:26.080
[pause]

00:16:26.080 --> 00:16:33.139
&gt;&gt;Johns: Yeah, I'd say-- I mean, our documentation
there is somewhat sparse, partly because most

00:16:33.139 --> 00:16:35.730
of the time, people don't interact with those
tools directly.

00:16:35.730 --> 00:16:40.870
Anything that-- What causes error is normally
caught at an early level by the compiler and

00:16:40.870 --> 00:16:41.980
such.

00:16:41.980 --> 00:16:45.610
If you are going and trying to do your own
custom build, the chance of running into those

00:16:45.610 --> 00:16:47.370
are a bit greater.

00:16:47.370 --> 00:16:54.589
Unfortunately, like I said, not much documentation
there, at least on the Android Developer site.

00:16:54.589 --> 00:16:58.959
Probably a good resource would be the Android
Developer's mailing list.

00:16:58.959 --> 00:17:01.600
A lot of us are on the Android team within
Google.

00:17:01.600 --> 00:17:03.730
We do keep an eye on that.

00:17:03.730 --> 00:17:07.350
There's members of the framework team, members
of the build tools team.

00:17:07.350 --> 00:17:09.629
We all stop in there every now and then.

00:17:09.629 --> 00:17:13.539
If you do run into any of the more complicated
errors like that, you can just go ahead and

00:17:13.539 --> 00:17:14.569
ask us directly.

00:17:14.569 --> 00:17:19.679
It's certainly not as good as having documentation,
but it's probably the next best thing.

00:17:19.679 --> 00:17:21.959
&gt;&gt;Matthew: Okay, thank you.

00:17:21.959 --> 00:17:23.100
&gt;&gt;Jones: Yep.

00:17:23.100 --> 00:17:24.809
&gt;&gt;Malin: Thank you.

00:17:24.809 --> 00:17:27.600
Do we have anything else on-- Okay.

00:17:27.600 --> 00:17:33.049
My producer says, "No", so let's move to Moderator:
I implemented a simple app for push notifications

00:17:33.049 --> 00:17:35.769
to my phone, but I ran into a problem.

00:17:35.769 --> 00:17:41.230
Boolean entries in the JSON sent to the GCM
server were converted into strings in the

00:17:41.230 --> 00:17:43.139
intent extras.

00:17:43.139 --> 00:17:46.179
Is that a bug or a technical limitation?

00:17:46.179 --> 00:17:51.029
&gt;&gt;Nerieri: It's more like a technical limitation.

00:17:51.029 --> 00:17:58.279
GCM, we opened the JSON protocol in GCM only,
but we want to be able for you guys to use

00:17:58.279 --> 00:18:04.159
GCM on the very first release of push messaging,
which happened in Froyo devices.

00:18:04.159 --> 00:18:09.109
Froyo devices, when we used C2DM for them,
they accepted all the plain text, in which

00:18:09.109 --> 00:18:11.210
every parameter was string.

00:18:11.210 --> 00:18:15.440
So we send down to the device only string
parameters.

00:18:15.440 --> 00:18:20.669
It's a key-valued pair in which every single
value is represented as string.

00:18:20.669 --> 00:18:25.549
When we opened the GCM interface, we had to
convert into string.

00:18:25.549 --> 00:18:33.640
What we are thinking about is maybe force
the JSON to have only parameters with strings.

00:18:33.640 --> 00:18:35.739
&gt;&gt;Malin: Okay.

00:18:35.739 --> 00:18:38.609
Thank you very much, Francesco.

00:18:38.609 --> 00:18:44.609
Next question from Moderator: Is it possible
that daily device installs also counts existing

00:18:44.609 --> 00:18:47.899
devices that got a software update to a new
Android version?

00:18:47.899 --> 00:18:53.210
On a certain day, I had 80 user installs and
450 device installs.

00:18:53.210 --> 00:19:00.129
That was a spike on 4.03-4.04 device installs
that day.

00:19:00.129 --> 00:19:02.590
&gt;&gt;Jones: Okay.

00:19:02.590 --> 00:19:08.649
Google Play does make a distinction between--
Actually, hey, Reto, don't you want to switch

00:19:08.649 --> 00:19:09.649
cameras?

00:19:09.649 --> 00:19:10.649
Yeah.

00:19:10.649 --> 00:19:14.789
[laughs] Google Play does make a distinction
between new installs versus upgrades.

00:19:14.789 --> 00:19:18.799
As far as the data we're logging, we definitely
do know the difference between the two of

00:19:18.799 --> 00:19:19.799
them.

00:19:19.799 --> 00:19:24.879
I'm certainly not going to rule off the possibility
that there is a bug in our logging pipeline,

00:19:24.879 --> 00:19:30.409
but, to my knowledge, assuming everything
is working the way it was designed, those

00:19:30.409 --> 00:19:31.729
installs should be different.

00:19:31.729 --> 00:19:36.360
It's entirely-- It's possible, too, that maybe
you just got a bunch of traffic from some

00:19:36.360 --> 00:19:40.279
other source and your update may, [indistinct],
notice your app.

00:19:40.279 --> 00:19:45.309
If you [pause] maybe install something like
Google Analytics, which will get you a little

00:19:45.309 --> 00:19:49.859
bit more visibility into where your users
are coming from, how many unique users you

00:19:49.859 --> 00:19:52.779
have, that might help distinguish between
the two of those.

00:19:52.779 --> 00:19:58.549
I've certainly never heard of updates being
counted as new installs, so I'm really inclined

00:19:58.549 --> 00:20:02.129
to think that actually, those are new installs
for some reason with your app.

00:20:02.129 --> 00:20:04.779
Like I said, give Google Analytics a try,
see if that helps.

00:20:04.779 --> 00:20:08.349
At least you'll distinguish where those users
are coming from.

00:20:08.349 --> 00:20:10.210
It'll tell you things like refers.

00:20:10.210 --> 00:20:13.289
Lots of really GC stats there.

00:20:13.289 --> 00:20:14.830
All right.

00:20:14.830 --> 00:20:17.909
&gt;&gt;Malin: Thank you, Trevor.

00:20:17.909 --> 00:20:20.570
&gt;&gt;Jones: I just want to say, I stole Alex's
thunder.

00:20:20.570 --> 00:20:21.570
He's the analytics guy.

00:20:21.570 --> 00:20:22.570
[laughter]

00:20:22.570 --> 00:20:23.570
&gt;&gt;Lucas: It's all right.

00:20:23.570 --> 00:20:24.570
I'm just glad more people know on the scene
know that I noticed.

00:20:24.570 --> 00:20:27.700
I'm not the only one.

00:20:27.700 --> 00:20:29.609
&gt;&gt;Malin: Great.

00:20:29.609 --> 00:20:35.679
Regarding GCM, what ports need to be opened
on our server behind firewall?

00:20:35.679 --> 00:20:43.809
Only HTTPS, which is 443, or 5228, 5229 and
5230, or all of them?

00:20:43.809 --> 00:20:51.379
&gt;&gt;Nerieri: Okay, so if your server is the
one that sends the messages and the only piece

00:20:51.379 --> 00:20:56.850
that you want to use for GCM, in this case,
then the port 43 is the only one you need.

00:20:56.850 --> 00:21:01.229
But if you have devices that need to receive
messages, then the port you want to open your

00:21:01.229 --> 00:21:08.639
firewall is 5228, which is enough for now,
but you might want to open as well 5229, 5230,

00:21:08.639 --> 00:21:11.760
because we might use those in the future.

00:21:11.760 --> 00:21:13.100
&gt;&gt;Malin: Okay.

00:21:13.100 --> 00:21:14.100
Great.

00:21:14.100 --> 00:21:16.279
Thank you very much.

00:21:16.279 --> 00:21:21.799
Next question off of Moderator: are there
docs coming up for using Create App Engine

00:21:21.799 --> 00:21:23.649
Backends option in GPE?

00:21:23.649 --> 00:21:28.729
There was a great talk in Google IO about
the same thing, but until now, no docs have

00:21:28.729 --> 00:21:29.759
been released.

00:21:29.759 --> 00:21:35.169
When I click Google Create App Engine Backend,
it exits with an error.

00:21:35.169 --> 00:21:40.700
&gt;&gt;Lucas: I can take a shot at this.

00:21:40.700 --> 00:21:46.081
I'm assuming that you're referring to the
Create App Engine Backend for an Android application

00:21:46.081 --> 00:21:54.399
and you haven't just randomly put an App Engine
question in an unrelated Android talk.

00:21:54.399 --> 00:21:59.360
That plug-in, that particular function, uses
C2DM to communicate back down to the Android

00:21:59.360 --> 00:22:01.580
device.

00:22:01.580 --> 00:22:08.080
Given the C2DM is now deprecated, I'm not
actually sure what the future of that plug-in

00:22:08.080 --> 00:22:09.460
is off the top of my head.

00:22:09.460 --> 00:22:11.220
I can look into it.

00:22:11.220 --> 00:22:16.570
[buzzing noise] But for the time being, I
know that there are documents.

00:22:16.570 --> 00:22:21.299
If you already have a C2DM account, there
is documentation up.

00:22:21.299 --> 00:22:26.039
There is-- The GPE plug-in has its own page
that you can look at.

00:22:26.039 --> 00:22:30.320
There's also a page up on Android training.

00:22:30.320 --> 00:22:34.970
I can't really say anything about the error
you're seeing without knowing what the actual--

00:22:34.970 --> 00:22:38.879
&gt;&gt;Jones: Yeah, as general guidelines, when
you guys see an error and you want to ask

00:22:38.879 --> 00:22:41.450
us, it helps if you actually tell us what
the error is.

00:22:41.450 --> 00:22:46.599
[laughs] But more general, just talking about
the plug-in, I'm not aware of any plans to

00:22:46.599 --> 00:22:47.639
deprecate it.

00:22:47.639 --> 00:22:52.029
I think, if something isn't working, I think
that's just a legitimate bug.

00:22:52.029 --> 00:22:55.179
Please file a bug report and we'll look into
it.

00:22:55.179 --> 00:22:58.179
In general, b.android.com is the Android bug
tracker.

00:22:58.179 --> 00:23:01.340
Or, of course, leave a comment here with additional
information.

00:23:01.340 --> 00:23:03.899
But again, we do need to know the actual error.

00:23:03.899 --> 00:23:05.679
All right.

00:23:05.679 --> 00:23:06.679
Joe?

00:23:06.679 --> 00:23:08.359
&gt;&gt;Malin: Great.

00:23:08.359 --> 00:23:10.590
Thank you very much, gentlemen.

00:23:10.590 --> 00:23:15.409
Next question is: are you planning on selling
the ADK 2012 at some point in time for those

00:23:15.409 --> 00:23:16.749
who couldn't make IO?

00:23:16.749 --> 00:23:20.119
If not, what would you say is the next best
alternative?

00:23:20.119 --> 00:23:22.409
Go ahead, Trevor.

00:23:22.409 --> 00:23:24.700
&gt;&gt;Jones: All right.

00:23:24.700 --> 00:23:32.899
Right now, I'm not aware of any plans to have
Google selling the ADK version too directly.

00:23:32.899 --> 00:23:39.340
That being said, we have published all of
the schematics and various board layout files

00:23:39.340 --> 00:23:40.799
online.

00:23:40.799 --> 00:23:43.669
Anybody who does want to go and make one,
everything is open source.

00:23:43.669 --> 00:23:45.850
I want to say it's Creative Commons.

00:23:45.850 --> 00:23:46.850
Don't quote me on that.

00:23:46.850 --> 00:23:51.190
Check the license associated with it, but
it is released under permissive license.

00:23:51.190 --> 00:23:55.770
Anybody who does want to actually go and manufacture
more of these boards, just go ahead, download

00:23:55.770 --> 00:23:58.690
them from our website.

00:23:58.690 --> 00:24:03.099
At some point in the future, I suspect you'll
actually see some on the market from somebody

00:24:03.099 --> 00:24:05.779
who's not Google who's actually gone and reproduced
them.

00:24:05.779 --> 00:24:09.679
They do take-- For those of you haven't seen
it, it's actually a really cool design.

00:24:09.679 --> 00:24:14.609
They took the ADK and built this really neat
touch sensitive alarm clock around it.

00:24:14.609 --> 00:24:18.509
When you actually want to go and build it,
you actually pop it open, it has some magnets,

00:24:18.509 --> 00:24:20.269
and rip the ADK out of it.

00:24:20.269 --> 00:24:23.739
It's really cool, but it's also a lot of work
to build.

00:24:23.739 --> 00:24:30.370
I think it'll probably take a little bit before
people actually release the exact same ADK.

00:24:30.370 --> 00:24:35.629
That being said, I'm sure you'll also see
some non-alarm clock ADKs for sale as well,

00:24:35.629 --> 00:24:39.460
for somebody who just wants a simpler, hardware
platform to go and build on top of.

00:24:39.460 --> 00:24:47.409
&gt;&gt;Lucas: I just want to add: the ADK that
we gave away last year was followed up within

00:24:47.409 --> 00:24:54.460
a couple months by several third parties writing
their own ADKs and selling their own ADKs.

00:24:54.460 --> 00:24:58.269
Many of them were more impressive than the
one that we gave away.

00:24:58.269 --> 00:25:02.460
I wouldn't worry too much about getting your
hands on one of the ones that we gave away

00:25:02.460 --> 00:25:03.460
at IO.

00:25:03.460 --> 00:25:06.730
Just go to the website and keep your ears
open.

00:25:06.730 --> 00:25:10.409
Check out Maker Faire-type communities.

00:25:10.409 --> 00:25:14.649
More awesome stuff that's better than what
we gave away will probably be coming down

00:25:14.649 --> 00:25:15.830
the pipe.

00:25:15.830 --> 00:25:17.599
&gt;&gt;Malin: Good answers.

00:25:17.599 --> 00:25:20.409
Thank you very much.

00:25:20.409 --> 00:25:23.830
Let's go down here to the next Moderator question.

00:25:23.830 --> 00:25:29.340
This is going to be one that Francesco can
answer: why are GCM multicast messages restricted

00:25:29.340 --> 00:25:32.679
to 1000 registration IDs?

00:25:32.679 --> 00:25:36.409
&gt;&gt;Nerieri: As opposed to 1001? [laughs] No.

00:25:36.409 --> 00:25:39.690
It's actually a good question.

00:25:39.690 --> 00:25:44.529
The API is a multicast messaging, which means
it's not broadcast, which means you don't

00:25:44.529 --> 00:25:46.639
want to send the message to everybody.

00:25:46.639 --> 00:25:49.029
So we had to come up with a number.

00:25:49.029 --> 00:25:53.609
Now, the number is 1000.

00:25:53.609 --> 00:25:59.850
It's the maximum we wanted to go at the beginning
because we see spikes.

00:25:59.850 --> 00:26:04.090
Every time we receive messages, we can have
a QPS.

00:26:04.090 --> 00:26:08.190
In C2DM, we had a very nice curve with QPS.

00:26:08.190 --> 00:26:12.769
But now we can have spikes of people sending
1000 messages in one request, which is very

00:26:12.769 --> 00:26:15.909
difficult to allocate for our resources.

00:26:15.909 --> 00:26:22.369
We wanted to give this kind of API because
it's good for our developers to be able to,

00:26:22.369 --> 00:26:25.019
in one request, address multiple devices.

00:26:25.019 --> 00:26:27.830
But we had to come up with a number, and this
number was 1000.

00:26:27.830 --> 00:26:29.259
&gt;&gt;Malin: Okay.

00:26:29.259 --> 00:26:33.600
That's a good enough answer, I think.

00:26:33.600 --> 00:26:34.840
&gt;&gt;Nerieri: I hope.

00:26:34.840 --> 00:26:35.840
&gt;&gt;Malin: Yeah.

00:26:35.840 --> 00:26:38.429
I hope that answers your question.

00:26:38.429 --> 00:26:46.820
If not, if you've got any other information
that causes you to ask this, we'd be interested

00:26:46.820 --> 00:26:48.049
in hearing it.

00:26:48.049 --> 00:26:53.269
Meanwhile, we'll move on to the next question:
I have knowledge of Android SDK, Android tools,

00:26:53.269 --> 00:26:56.239
Jenkins, Ant, Miavan, XML, and JSON.

00:26:56.239 --> 00:26:59.299
&gt;&gt;Lucas: I think they mean Maven.

00:26:59.299 --> 00:27:00.320
&gt;&gt;Malin: Maven.

00:27:00.320 --> 00:27:02.169
Okay, yeah, that's probably true.

00:27:02.169 --> 00:27:03.299
Didn't think about that.

00:27:03.299 --> 00:27:08.279
What else does an Android developer need to
know to enhance his or her technical skills?

00:27:08.279 --> 00:27:09.330
[pause]

00:27:09.330 --> 00:27:11.429
&gt;&gt;Lucas: Everything!

00:27:11.429 --> 00:27:15.539
&gt;&gt;Jones: Yeah, that's quite the question there.

00:27:15.539 --> 00:27:16.749
&gt;&gt;Lucas: Yeah.

00:27:16.749 --> 00:27:20.509
One thing I do notice missing from the list
is SQL.

00:27:20.509 --> 00:27:26.200
For persistence storage, we use a SQLite database.

00:27:26.200 --> 00:27:28.889
I would throw that on the list of things to
cover.

00:27:28.889 --> 00:27:32.919
Other than that, that is quite a broad question.

00:27:32.919 --> 00:27:33.919
&gt;&gt;Jones: Yeah.

00:27:33.919 --> 00:27:37.869
Open GL would be a very good topic to learn,
just because at some point, you'll probably

00:27:37.869 --> 00:27:38.929
want to do something 3D.

00:27:38.929 --> 00:27:43.729
If not, a full-fledged 3D game, maybe you
just want to go and build some effects into

00:27:43.729 --> 00:27:44.729
your application.

00:27:44.729 --> 00:27:47.659
Open GL tends to be a very good tool for that.

00:27:47.659 --> 00:27:51.299
In addition, just general computer graphics.

00:27:51.299 --> 00:27:54.589
If Open GL doesn't do what you need to do,
you're going to be stuck with something like

00:27:54.589 --> 00:27:57.249
a canvas.

00:27:57.249 --> 00:28:02.440
Knowing how to actually go and do things efficiently
in that context is a good skill.

00:28:02.440 --> 00:28:06.219
More broadly speaking, you're going to want
to know how to do things with web services,

00:28:06.219 --> 00:28:12.590
so understanding concepts like rest, o/off,
things like that, very useful to know.

00:28:12.590 --> 00:28:15.980
Really, it's a very broad question here.

00:28:15.980 --> 00:28:19.159
[laughs] I could just go down the list all
day.

00:28:19.159 --> 00:28:22.760
But yeah, I'd say you've already got a pretty
strong foundation there.

00:28:22.760 --> 00:28:25.640
It really depends on what it is you want to
build.

00:28:25.640 --> 00:28:27.690
I mentioned Open GL.

00:28:27.690 --> 00:28:29.142
Maybe that has no bearing in your-- I don't
know.

00:28:29.142 --> 00:28:32.139
I don't know what you want to do.

00:28:32.139 --> 00:28:36.739
But I'd say you already have a pretty strong
technical foundation with what you've listed.

00:28:36.739 --> 00:28:38.610
&gt;&gt;Malin: I would certainly agree with that.

00:28:38.610 --> 00:28:44.499
I would also say that there's really no end
to the answer because you can't ever tell

00:28:44.499 --> 00:28:46.450
what you're going to need to know.

00:28:46.450 --> 00:28:49.259
A lot of it, to my mind, depends on what you're
trying to accomplish.

00:28:49.259 --> 00:28:56.359
If you are trying to get a position someplace
with a company that's doing something in particular,

00:28:56.359 --> 00:29:00.399
then I would look at what that company is
doing, what type of applications base it's

00:29:00.399 --> 00:29:01.399
in.

00:29:01.399 --> 00:29:05.609
If it's very data-oriented, you probably want
to look at something like SQL.

00:29:05.609 --> 00:29:13.330
Or, you may want to look at statistics and
learn something about how statistics and analytics

00:29:13.330 --> 00:29:15.909
are done in this base.

00:29:15.909 --> 00:29:21.809
On the other hand, if you want to be a contractor
and independent developer, one of the things

00:29:21.809 --> 00:29:26.809
you're probably going to have to do is decide
on what's most in demand and then focus on

00:29:26.809 --> 00:29:29.009
those areas.

00:29:29.009 --> 00:29:35.580
You may have to pick up technical skills along
the way as you're doing a contract.

00:29:35.580 --> 00:29:41.840
There's no way to say that you're ever finished
with learning stuff.

00:29:41.840 --> 00:29:43.529
That's certainly true.

00:29:43.529 --> 00:29:44.649
[pause]

00:29:44.649 --> 00:29:47.339
&gt;&gt;Jones: I think that's a pretty good answer.

00:29:47.339 --> 00:29:48.339
&gt;&gt;Malin: Yeah.

00:29:48.339 --> 00:29:52.220
I mean, Trevor covered a lot of the things
that I would have covered, especially Open

00:29:52.220 --> 00:29:53.220
GL.

00:29:53.220 --> 00:29:54.820
I think that's a really good answer.

00:29:54.820 --> 00:30:00.999
Let's move on: is there a rough estimate for
when C2DM will be turned off?

00:30:00.999 --> 00:30:04.539
I think we've got the expert here that maybe
will give us an answer.

00:30:04.539 --> 00:30:10.700
&gt;&gt;Nerieri: C2DM is deprecated, which means
we don't accept any more sign-ups, nor quota

00:30:10.700 --> 00:30:11.779
requests.

00:30:11.779 --> 00:30:17.950
We do not want to break your applications,
so we will give, if we will ever turn the

00:30:17.950 --> 00:30:22.240
services down, we will give heads up way ahead
of time.

00:30:22.240 --> 00:30:25.080
At least a year before we decide to do so.

00:30:25.080 --> 00:30:30.869
This said, I would urge you to migrate to
the new system before you run into quota issues

00:30:30.869 --> 00:30:35.779
or if you need to use new APIs or the client
login, which is being deprecated.

00:30:35.779 --> 00:30:39.119
It will actually be deprecated.

00:30:39.119 --> 00:30:41.879
&gt;&gt;Jones: Just to follow up on that.

00:30:41.879 --> 00:30:46.190
Whenever we deprecate an API, it is a good
idea to go and take a look for alternatives.

00:30:46.190 --> 00:30:50.519
The alternative in this case would be GCM
and to move there as quickly as you can.

00:30:50.519 --> 00:30:52.109
Again, we don't want to break your app.

00:30:52.109 --> 00:30:55.440
It's not going to disappear any time in the
near future.

00:30:55.440 --> 00:30:59.909
You do have time to do a nice, orderly migration.

00:30:59.909 --> 00:31:05.440
But please don't wait to migrate until we
actually say the servers are going away, because

00:31:05.440 --> 00:31:07.029
by then, you'll be in a rush.

00:31:07.029 --> 00:31:10.450
Start your migration to GCM now, and then
you'll be in good shape for when they do eventually

00:31:10.450 --> 00:31:12.339
get turned off in the future.

00:31:12.339 --> 00:31:13.339
[pause]

00:31:13.339 --> 00:31:17.220
&gt;&gt;Malin: Great, thank you.

00:31:17.220 --> 00:31:18.220
Next question.

00:31:18.220 --> 00:31:23.539
Okay, if we thought the one before was open
ended: I'm trying to learn Java.

00:31:23.539 --> 00:31:26.609
Can you recommend some books or videos, etcetera?

00:31:26.609 --> 00:31:30.539
&gt;&gt;Lucas: I'm sure we're all going to have
opinions on this one, but I'm going to take

00:31:30.539 --> 00:31:32.029
a start.

00:31:32.029 --> 00:31:37.179
The part that you didn't give us that's really
important is: are you an experienced or intermediate

00:31:37.179 --> 00:31:43.159
programmer who just hasn't been exposed to
Java yet, or are you not used to programming?

00:31:43.159 --> 00:31:47.019
If you're already familiar with programming,
I got a lot of value out of a book called

00:31:47.019 --> 00:31:48.879
Core Java.

00:31:48.879 --> 00:31:52.070
Also one-- I'm blanking on the name, maybe
you guys can help-- by Josh Bloch.

00:31:52.070 --> 00:31:56.139
It had a lot of really good design patterns.

00:31:56.139 --> 00:31:57.479
&gt;&gt;Malin: Effective Java.

00:31:57.479 --> 00:31:58.820
&gt;&gt;Lucas: Effective Java.

00:31:58.820 --> 00:32:00.159
Thank you, Joe.

00:32:00.159 --> 00:32:05.789
Really good book, but difficult to digest
if you are not already familiar with programming.

00:32:05.789 --> 00:32:11.469
If you're a new programmer, it's been pretty--
I'm pretty sure pretty close to a decade since

00:32:11.469 --> 00:32:15.289
any of us have been new to programming.

00:32:15.289 --> 00:32:20.299
If we knew good resources a decade ago, they're
out of date by now.

00:32:20.299 --> 00:32:21.879
Anyone else want to take a crack at this?

00:32:21.879 --> 00:32:26.649
&gt;&gt;Jones: Yeah, I'm actually going to take
an opposing stance here and say that I've

00:32:26.649 --> 00:32:30.070
hated every Java book I've ever read.

00:32:30.070 --> 00:32:36.089
[laughter] That being said, there's some amazing
tutorials online.

00:32:36.089 --> 00:32:39.229
What used to be the Sun website is now the
Oracle website.

00:32:39.229 --> 00:32:41.799
They have a lot of Java tutorials there.

00:32:41.799 --> 00:32:44.080
All of them are actually really well-written.

00:32:44.080 --> 00:32:46.839
I can't recommend them highly enough.

00:32:46.839 --> 00:32:49.399
You go take a look at those, perhaps.

00:32:49.399 --> 00:32:52.849
They have-- Most of them are in tutorial format.

00:32:52.849 --> 00:32:57.419
They're written by the guys who did a lot
of the initial work on the Java language.

00:32:57.419 --> 00:33:00.399
That'd be my recommendation.

00:33:00.399 --> 00:33:06.039
Also, if you are going to branch out into
Android, I can recommend a very good Android

00:33:06.039 --> 00:33:09.909
book, which would be the one written by the
guy sitting on the other end of the camera

00:33:09.909 --> 00:33:11.959
right now, Reto Meier.

00:33:11.959 --> 00:33:16.099
It's an Android for application development.

00:33:16.099 --> 00:33:20.619
He's not on camera, so he can't really speak
to it, but I'll give him my recommendation

00:33:20.619 --> 00:33:22.580
from this side of the camera.

00:33:22.580 --> 00:33:25.799
&gt;&gt;Malin: I would agree with Trevor's recommendation.

00:33:25.799 --> 00:33:31.210
I would also say that the books and videos
and everything is going to depend a lot on

00:33:31.210 --> 00:33:32.839
where you're coming from.

00:33:32.839 --> 00:33:37.169
If you've done programming and you're coming
from another language, you may want to take

00:33:37.169 --> 00:33:39.549
a look at books out there.

00:33:39.549 --> 00:33:44.679
I'm sure there is some book that is like "Java
programming for C programmers" or something

00:33:44.679 --> 00:33:45.679
like that.

00:33:45.679 --> 00:33:49.489
If you just Google that, you may find something
that will help you.

00:33:49.489 --> 00:33:55.559
If you are not familiar with object-oriented
programming, then you may want to look at

00:33:55.559 --> 00:34:01.590
something that's a little bit more elementary
that covers that as well as Java from the

00:34:01.590 --> 00:34:04.870
point of view of somebody just starting out.

00:34:04.870 --> 00:34:09.029
I happen to have a book called Java in a Nutshell,
which is an O'Reilly book.

00:34:09.029 --> 00:34:16.179
The reason I have it is that it does cover--
It is a good introduction in the sense that

00:34:16.179 --> 00:34:22.129
it takes you from very simple to very complex,
but it's also a really great reference.

00:34:22.129 --> 00:34:27.079
Since I can't claim to be a Java expert, I
always have it sitting around in case I need

00:34:27.079 --> 00:34:32.789
to look up something, which I find very easy
to do in that particular book.

00:34:32.789 --> 00:34:38.210
The only other thing I can think of is that
a lot of things these days are discussed in

00:34:38.210 --> 00:34:44.779
terms of general terminology for computer
science related to programming languages.

00:34:44.779 --> 00:34:50.349
You may want to look at books that are just
in general about object-oriented programming

00:34:50.349 --> 00:34:51.940
and design patterns.

00:34:51.940 --> 00:34:58.960
I sometimes read a book called Design Patterns,
which is at least a decade old, if not 20

00:34:58.960 --> 00:35:00.260
years old at this point.

00:35:00.260 --> 00:35:02.480
But it's a good summary.

00:35:02.480 --> 00:35:08.019
Unfortunately in C++ rather than Java.

00:35:08.019 --> 00:35:15.099
The standard algorithms and design patterns
for creating things in any programming language.

00:35:15.099 --> 00:35:18.450
That's worth having on your bookshelf.

00:35:18.450 --> 00:35:24.910
&gt;&gt;Jones: Actually, Francesco, since you're
a guest today, what's your opinion?

00:35:24.910 --> 00:35:28.260
Was there any books or anything you found
particularly good when you started out learning

00:35:28.260 --> 00:35:29.869
Java for the first time?

00:35:29.869 --> 00:35:32.080
&gt;&gt;Nerieri: You know, I learned Java when I
was in Italy.

00:35:32.080 --> 00:35:36.230
The books there were different.

00:35:36.230 --> 00:35:43.579
[laughter] My opinion is if you're new to
a programming language, I would not start

00:35:43.579 --> 00:35:44.630
with the language itself.

00:35:44.630 --> 00:35:53.460
I would start learning [mike gives out] like
suggested, because you can build up the foundation

00:35:53.460 --> 00:35:58.890
of programming skills, which will help you
then pick up a language, which is Java, C,

00:35:58.890 --> 00:36:03.240
or Python, or whatever, much quicker and faster.

00:36:03.240 --> 00:36:08.730
I have a deeper understanding of the code
[mike gives out] rather than having an approach

00:36:08.730 --> 00:36:12.670
of, "I know this Java library, so I'm going
to use that" without really understanding

00:36:12.670 --> 00:36:13.670
what's happening.

00:36:13.670 --> 00:36:17.100
&gt;&gt;Jones: Okay, thank you very much.

00:36:17.100 --> 00:36:21.339
&gt;&gt;Malin: Since we're on this topic that is
dear to my heart, I'll say one more thing

00:36:21.339 --> 00:36:29.319
about this, which is-- sorry-- which is that
the fastest way to learn any programming language

00:36:29.319 --> 00:36:31.930
is to set yourself a project.

00:36:31.930 --> 00:36:38.599
I thought I knew Java really well until I
started working on Android.

00:36:38.599 --> 00:36:44.430
Then I really learned Java, because you learn
something very fast if you have to work in

00:36:44.430 --> 00:36:48.520
it every day and if you've got a target.

00:36:48.520 --> 00:36:51.500
At least, that's my way of learning.

00:36:51.500 --> 00:36:55.650
Look at the ways you've learned other things,
and follow that.

00:36:55.650 --> 00:36:57.920
If you learn out of a book, then get a book.

00:36:57.920 --> 00:37:01.450
If you learn by doing, then I would say, "Go
do something."

00:37:01.450 --> 00:37:02.450
[pause]

00:37:02.450 --> 00:37:04.420
&gt;&gt;Jones: All right.

00:37:04.420 --> 00:37:06.990
&gt;&gt;Malin: Okay, let's move on.

00:37:06.990 --> 00:37:12.980
The next question is: is Semantic Zoom, as
implemented in ICS Calendar, a recommended

00:37:12.980 --> 00:37:14.840
pattern to use in our own apps?

00:37:14.840 --> 00:37:17.960
&gt;&gt;Jones: I actually don't know what Semantic
Zoom is.

00:37:17.960 --> 00:37:19.420
&gt;&gt;Malin: Yeah, I don't either.

00:37:19.420 --> 00:37:20.420
Sorry.

00:37:20.420 --> 00:37:22.059
&gt;&gt;Lucas: It's this.

00:37:22.059 --> 00:37:24.029
&gt;&gt;Malin: Ah, okay.

00:37:24.029 --> 00:37:33.500
I think what the question means is: is expanding
with a two finger gesture a recommended pattern

00:37:33.500 --> 00:37:35.390
to use in your own apps?

00:37:35.390 --> 00:37:38.869
&gt;&gt;Jones: Unfortunately, we don't have our
capture device hooked up, otherwise we'd actually

00:37:38.869 --> 00:37:40.319
show you what Alex just showed us.

00:37:40.319 --> 00:37:44.279
He took two fingers and just was able to drag
up and down.

00:37:44.279 --> 00:37:47.020
The calendar view expanded and contracted
as he did that.

00:37:47.020 --> 00:37:51.810
&gt;&gt;Lucas: Specifically, one element of the
view expanded and everything else stayed the

00:37:51.810 --> 00:37:55.860
same, which I assume is what they mean by
Semantic Zoom.

00:37:55.860 --> 00:37:58.250
A recommended pattern.

00:37:58.250 --> 00:38:00.490
I don't think it's an official recommendation
at this point.

00:38:00.490 --> 00:38:03.640
I would check the Android Design Guide for
that.

00:38:03.640 --> 00:38:07.140
But it looks neat.

00:38:07.140 --> 00:38:13.450
[laughter] I think it improves usability,
at least for the calendar app.

00:38:13.450 --> 00:38:17.730
It's definitely not a discouraged pattern,
but I don't think it's an official pattern

00:38:17.730 --> 00:38:19.500
yet, either.

00:38:19.500 --> 00:38:22.819
It's just a neat thing that's out there.

00:38:22.819 --> 00:38:33.140
&gt;&gt;Malin: I can answer specifically for something
I do know about: notifications.

00:38:33.140 --> 00:38:41.119
Jelly Bean Notifications implement that feature
as part of the API now.

00:38:41.119 --> 00:38:46.569
Notifications at least used to be what we
call one-u, which is a height of about, I

00:38:46.569 --> 00:38:48.010
think it's 64 DP.

00:38:48.010 --> 00:38:51.880
But now we feature an expanded notification.

00:38:51.880 --> 00:38:58.840
If you do a gesture like stretching the boundaries
of the notification apart or some other gestures,

00:38:58.840 --> 00:39:02.859
you'll expand it to what's called a 4-U notification
with a lot more space.

00:39:02.859 --> 00:39:04.849
It's 256 DP.

00:39:04.849 --> 00:39:12.720
That's a zoom multi-- What I would call a
multi-touch zoom.

00:39:12.720 --> 00:39:16.180
That's an official part of Notification UI
at this point.

00:39:16.180 --> 00:39:17.700
It's worth looking into.

00:39:17.700 --> 00:39:20.589
&gt;&gt;Jones: On the broader topic of UI design
patterns.

00:39:20.589 --> 00:39:26.960
There's certainly a lot of stuff that we try
that we think looks really cool or greatly

00:39:26.960 --> 00:39:28.220
improves the usability of the system.

00:39:28.220 --> 00:39:30.880
Hopefully the two at the same time.

00:39:30.880 --> 00:39:32.320
We give those a try in our own apps.

00:39:32.320 --> 00:39:37.630
We're a bit more conservative with the official
design guidelines, because once we write something

00:39:37.630 --> 00:39:40.819
down there, it's more or less set in stone.

00:39:40.819 --> 00:39:43.200
Developers go and they build up their apps
using those patterns.

00:39:43.200 --> 00:39:46.450
So we want to make sure that anything we actually
go and write down is something that we're

00:39:46.450 --> 00:39:48.549
really happy with.

00:39:48.549 --> 00:39:52.549
I think that this particular pattern that
was mentioned in the question has not actually

00:39:52.549 --> 00:39:56.490
been added to our UI guideline, as Alex mentioned.

00:39:56.490 --> 00:39:59.859
If you want to go and be on the leading edge,
by all means try to make your app work on

00:39:59.859 --> 00:40:00.859
the system.

00:40:00.859 --> 00:40:01.880
I think it's a very good goal.

00:40:01.880 --> 00:40:04.240
I think you can't go wrong.

00:40:04.240 --> 00:40:08.520
That being said, don't be surprised if, in
the next release, some of these things change

00:40:08.520 --> 00:40:09.520
out from underneath you.

00:40:09.520 --> 00:40:10.829
It's just like using undocumented API.

00:40:10.829 --> 00:40:11.829
That's right.

00:40:11.829 --> 00:40:14.620
These things are still in flux.

00:40:14.620 --> 00:40:16.720
Actually, I take it back.

00:40:16.720 --> 00:40:19.569
It's not as bad as [mike gives out] in API,
that's a horrible thing.

00:40:19.569 --> 00:40:21.039
Don't ever do it.

00:40:21.039 --> 00:40:24.119
[laughs] But no.

00:40:24.119 --> 00:40:27.410
I don't think you can go wrong in this case
if you just want to make something that looks

00:40:27.410 --> 00:40:29.690
like the system.

00:40:29.690 --> 00:40:33.369
Just keep an eye out what comes for you.

00:40:33.369 --> 00:40:38.120
When the K release comes out, whatever that
happens to be called, make sure that that

00:40:38.120 --> 00:40:39.450
behavior hasn't changed.

00:40:39.450 --> 00:40:45.060
&gt;&gt;Lucas: I would also add that this is a shiny,
visually appealing feature that doesn't necessarily

00:40:45.060 --> 00:40:47.130
mean it's appropriate all the time.

00:40:47.130 --> 00:40:51.920
In general, I agree with Trevor, that if you
want to look like the system, you can't really

00:40:51.920 --> 00:40:52.920
go wrong.

00:40:52.920 --> 00:40:58.970
But we also put a lot of effort into making
visually appealing little effects like that,

00:40:58.970 --> 00:40:59.970
where appropriate.

00:40:59.970 --> 00:41:00.970
&gt;&gt;Jones: That's true.

00:41:00.970 --> 00:41:06.329
There is a guideline that you want to have
lots of playful visual flourishes.

00:41:06.329 --> 00:41:09.040
It makes your app feel more alive.

00:41:09.040 --> 00:41:11.360
It makes your users happy.

00:41:11.360 --> 00:41:15.990
Even if things aren't necessarily documented
as official patterns, if it makes sense in

00:41:15.990 --> 00:41:24.119
the context of your app and follows the spirit
of the system-- The overarching goal there

00:41:24.119 --> 00:41:25.950
is something we have written down.

00:41:25.950 --> 00:41:32.100
&gt;&gt;Lucas: I was actually more referring to--
again, general, I agree-- I was more referring

00:41:32.100 --> 00:41:36.250
to being cautious when using a feature like
that.

00:41:36.250 --> 00:41:42.630
Don't set up a text view where you use that
feature and expand one word so it overlaps

00:41:42.630 --> 00:41:44.650
all the other words, because that would be--

00:41:44.650 --> 00:41:47.109
&gt;&gt;Jones: Right, you have to make sure it's
usable.

00:41:47.109 --> 00:41:48.450
You have to make sure it actually makes sense.

00:41:48.450 --> 00:41:49.450
&gt;&gt;Lucas: Exactly.

00:41:49.450 --> 00:41:56.049
&gt;&gt;Jones: But at the same time, having something
that is usable and makes sense, but is fun,

00:41:56.049 --> 00:41:57.100
is a good thing.

00:41:57.100 --> 00:41:59.500
Case in point, Google+.

00:41:59.500 --> 00:42:04.500
When I get an event invitation, it folds out
like an actual event card, like a little piece

00:42:04.500 --> 00:42:07.369
of paper unraveling.

00:42:07.369 --> 00:42:12.130
It has no practical use, but it looks cool
and it makes people happy.

00:42:12.130 --> 00:42:14.039
It doesn't hurt usability, at the very least.

00:42:14.039 --> 00:42:16.809
It actually might even help, because it helps
explain what's going on.

00:42:16.809 --> 00:42:17.809
&gt;&gt;Malin: Right.

00:42:17.809 --> 00:42:22.420
I would add that some of these things are
sort of subtle, but they're force multipliers.

00:42:22.420 --> 00:42:30.369
That means that you have immediate ability
to look at information in depth and take action

00:42:30.369 --> 00:42:34.480
without having to go to another activity or
application.

00:42:34.480 --> 00:42:43.420
For instance, in Notifications, you can click
buttons and look at more than one email message.

00:42:43.420 --> 00:42:48.109
That's a force multiplier because what it
means is you're not forcing the user to go

00:42:48.109 --> 00:42:54.660
into email to look at what's going on or go
into a music player or a chat system.

00:42:54.660 --> 00:42:57.230
They can look at it right from the notifications.

00:42:57.230 --> 00:43:04.309
They can look at a calendar event in detail
without having to switch to a separate activity

00:43:04.309 --> 00:43:05.519
to look at it.

00:43:05.519 --> 00:43:06.910
That's very powerful.

00:43:06.910 --> 00:43:17.819
It makes things look-- It's easy to use, but
it means that there's less work for the user.

00:43:17.819 --> 00:43:20.020
I have to give credit to Daniel Sandler for
that.

00:43:20.020 --> 00:43:23.490
Yes, go ahead.

00:43:23.490 --> 00:43:45.821
&gt;&gt;Audience member: I've got a question about
the impact servers.

00:43:45.821 --> 00:43:46.821
Can you use content observers [inaudible]

00:43:46.821 --> 00:43:51.839
&gt;&gt;Malin: The question was: can you use content
observer instead of content provider to monitor

00:43:51.839 --> 00:43:53.950
a database?

00:43:53.950 --> 00:43:57.710
If not, can you suggest another way of monitoring
a database?

00:43:57.710 --> 00:43:59.760
This sounds like a familiar question.

00:43:59.760 --> 00:44:02.060
I think we've discussed this before.

00:44:02.060 --> 00:44:07.650
If not officially in Developer Office Hours,
amongst ourselves.

00:44:07.650 --> 00:44:10.250
I'm not sure what the answer is.

00:44:10.250 --> 00:44:12.410
Anybody got an idea?

00:44:12.410 --> 00:44:13.410
[pause]

00:44:13.410 --> 00:44:18.960
&gt;&gt;Jones: As far as content observer versus
content provider, unfortunately, I don't know

00:44:18.960 --> 00:44:20.270
the answer off the top of my head either.

00:44:20.270 --> 00:44:23.099
I'm drawing a blank.

00:44:23.099 --> 00:44:26.650
There's certainly more than one way to go
and read data out of a database.

00:44:26.650 --> 00:44:31.150
At the end, it's all going to boil down to
a SQL statement somewhere.

00:44:31.150 --> 00:44:35.359
It's just what design pattern do you use to
go and retrieve that data and make it accessible

00:44:35.359 --> 00:44:37.579
to everything else.

00:44:37.579 --> 00:44:41.040
Reto, you literally wrote the book on this,
so what's your thoughts?

00:44:41.040 --> 00:44:46.839
&gt;&gt;Meier: I think the key here is what he's
asking is, specifically-- A content observer

00:44:46.839 --> 00:44:52.950
what you use when you want to be able to monitor
a database with changes.

00:44:52.950 --> 00:44:56.550
&gt;&gt;Malin: If you want a content observer that
monitors a cursor.

00:44:56.550 --> 00:44:57.550
&gt;&gt;Meier: Exactly.

00:44:57.550 --> 00:44:58.550
&gt;&gt;Malin: Right.

00:44:58.550 --> 00:44:59.550
&gt;&gt;Meier: Exactly.

00:44:59.550 --> 00:45:04.580
His question is: can you use it for a monitor
a cursor from a database, rather than from

00:45:04.580 --> 00:45:05.580
a content provider?

00:45:05.580 --> 00:45:07.670
&gt;&gt;Malin: As far as I know, you should be able
to.

00:45:07.670 --> 00:45:09.280
&gt;&gt;Jones: Yeah, a cursor's a cursor.

00:45:09.280 --> 00:45:10.280
&gt;&gt;Malin: Yeah, a cursor is a cursor.

00:45:10.280 --> 00:45:12.750
A content observer.

00:45:12.750 --> 00:45:16.710
There's an observer on cursors that I think
is independent of content providers.

00:45:16.710 --> 00:45:21.519
&gt;&gt;Meier: That's my understanding as well,
but--

00:45:21.519 --> 00:45:22.900
&gt;&gt;Malin: Right.

00:45:22.900 --> 00:45:31.859
The easy answer is: look in cursor, and if
cursor has a set content observer method on

00:45:31.859 --> 00:45:37.171
it, then you can do it, because that's how
you would do it, is set a content observer

00:45:37.171 --> 00:45:40.299
for a cursor that comes from the database.

00:45:40.299 --> 00:45:47.279
Content provider, all that it really does
for SQL databases, is encapsulate an SQLite

00:45:47.279 --> 00:45:48.279
database.

00:45:48.279 --> 00:45:53.450
The SQLite database returns the cursor and
the content provider returns that cursor to

00:45:53.450 --> 00:45:56.940
the calling component.

00:45:56.940 --> 00:45:59.569
So really, that's all the difference that
there is.

00:45:59.569 --> 00:46:04.269
There's nothing magic about a content provider
that automatically does an observation.

00:46:04.269 --> 00:46:07.259
[pause] Anybody else?

00:46:07.259 --> 00:46:08.259
Okay.

00:46:08.259 --> 00:46:12.839
&gt;&gt;Jones: It's actually probably a good time
to mention that we have about 15 minutes left.

00:46:12.839 --> 00:46:17.990
If anybody does want to go and ask us any
live questions, please jump into our Hangout.

00:46:17.990 --> 00:46:20.200
We'd be happy to have you on the air.

00:46:20.200 --> 00:46:22.960
Even if your mike doesn't work, feel free
to hop on anyway.

00:46:22.960 --> 00:46:27.630
You can go ahead and type your question out
to us and we can go ahead and ask our panel

00:46:27.630 --> 00:46:29.550
of experts here in the room.

00:46:29.550 --> 00:46:33.009
GCM questions or just Android questions in
general.

00:46:33.009 --> 00:46:34.009
We're happy to take any of them.

00:46:34.009 --> 00:46:35.009
&gt;&gt;Malin: That's a good point.

00:46:35.009 --> 00:46:36.009
&gt;&gt;Meier: I've been keeping an eye on the Google+
event livestream as well.

00:46:36.009 --> 00:46:37.009
If you have any questions, you can talk to
me [inaudible]

00:46:37.009 --> 00:46:38.009
&gt;&gt;Malin: Right.

00:46:38.009 --> 00:46:39.009
&gt;&gt;Meier: One of these is from Noulesh, who
asks: is it a good idea to have two different

00:46:39.009 --> 00:46:44.009
versions of the AAP plugin and FDK tools running
two separate fields.

00:46:44.009 --> 00:47:01.339
Eg, SPN trunk could be running on ADT 20 and
SPK 20 tools, and Branch could be running

00:47:01.339 --> 00:47:03.410
ADT 15 and SDK 15.

00:47:03.410 --> 00:47:04.410
Are there any issues with this?

00:47:04.410 --> 00:47:05.410
&gt;&gt;Malin: Okay.

00:47:05.410 --> 00:47:10.759
The question is: is it a good idea to run
separate versions of ADT on separate builds?

00:47:10.759 --> 00:47:17.180
The answer is-- My answer would be you certainly
can't do it in the same version of Eclipse,

00:47:17.180 --> 00:47:18.579
because those are plug-ins.

00:47:18.579 --> 00:47:23.450
I don't think you can have more than one ADT
plug-in in the same version of Eclipse You

00:47:23.450 --> 00:47:25.049
certainly would run into problems.

00:47:25.049 --> 00:47:29.150
But if you want to have more than one instance
of Eclipse on your system, then you should

00:47:29.150 --> 00:47:30.230
be able to do it.

00:47:30.230 --> 00:47:33.950
&gt;&gt;Jones: There is one problem I can see with
all this.

00:47:33.950 --> 00:47:37.340
The goal here is not only to have different
versions of ADT, but also different versions

00:47:37.340 --> 00:47:39.320
of the Android framework running, too.

00:47:39.320 --> 00:47:40.320
Correct?

00:47:40.320 --> 00:47:41.320
&gt;&gt;Malin: Right.

00:47:41.320 --> 00:47:45.749
&gt;&gt;Jones: In that case, there are different
versions of ADB server.

00:47:45.749 --> 00:47:48.680
The different versions of the framework are
going to try to launch different versions

00:47:48.680 --> 00:47:50.099
of ADB server.

00:47:50.099 --> 00:47:53.359
That's going to cause conflicts.

00:47:53.359 --> 00:47:57.599
I think even if you're running your different
versions of the SDK inside of different versions

00:47:57.599 --> 00:48:01.970
of the ADT inside of different versions of
Eclipse, at the end of the day, you can only

00:48:01.970 --> 00:48:04.109
have one version of ADB server running.

00:48:04.109 --> 00:48:05.400
That's where you're going to run into problems.

00:48:05.400 --> 00:48:08.570
&gt;&gt;Malin: Yeah, that is a good point.

00:48:08.570 --> 00:48:13.589
You'd probably have to do a lot of fiddling
around with path variables and environment

00:48:13.589 --> 00:48:15.740
variables in order to get it to work correctly.

00:48:15.740 --> 00:48:17.240
It's probably not worth doing.

00:48:17.240 --> 00:48:22.490
I would think that probably what you want
to do, if you're just trying to aim at different

00:48:22.490 --> 00:48:27.359
platforms, is set up for the highest level
platform.

00:48:27.359 --> 00:48:34.640
Then you can always aim to a lower API if
you want to check for API compatibility.

00:48:34.640 --> 00:48:39.509
&gt;&gt;Jones: Yeah, I'll add one additional data
point here.

00:48:39.509 --> 00:48:43.359
Here in the Android team, we work with a lot
of different versions of the Android framework.

00:48:43.359 --> 00:48:48.019
I have never installed more than one copy
of ADT.

00:48:48.019 --> 00:48:49.569
I think that's not the right approach here.

00:48:49.569 --> 00:48:54.721
I think the right approach: have one version
of FDK tools, one version of ADT, and, like

00:48:54.721 --> 00:48:59.480
Joe said, just go ahead and switch what your
build targets are.

00:48:59.480 --> 00:49:01.819
That's a perfectly supported work flow.

00:49:01.819 --> 00:49:03.140
[pause]

00:49:03.140 --> 00:49:05.770
&gt;&gt;Malin: Great.

00:49:05.770 --> 00:49:07.599
Thank you.

00:49:07.599 --> 00:49:11.210
Next question from Moderator: Google Maps
home to work feature.

00:49:11.210 --> 00:49:15.339
Is there an API available for developers to
access this data?

00:49:15.339 --> 00:49:16.640
Intents or provider or something?

00:49:16.640 --> 00:49:20.069
I'm researching location tracking for my app.

00:49:20.069 --> 00:49:28.539
I don't know exactly what the question means,
but I assume that the respondent means the

00:49:28.539 --> 00:49:35.499
thing that tells you how long it's going to
take you to get from your home to work and

00:49:35.499 --> 00:49:36.499
vice versa.

00:49:36.499 --> 00:49:42.380
&gt;&gt;Jones: Right, I think so too, which I believe,
actually, was something-- I think that's part

00:49:42.380 --> 00:49:47.730
of the whole latitude umbrella, where it's
actually going and keeping track of where

00:49:47.730 --> 00:49:52.069
you are and reporting it to your friends and
building a location service on top of that.

00:49:52.069 --> 00:49:55.279
The answer, to my knowledge, is no, we don't
have an API for that.

00:49:55.279 --> 00:49:56.450
We do have location manager.

00:49:56.450 --> 00:50:03.670
You can get both fine-grained GPS location
data as well as the coarser-grained WiFi-based

00:50:03.670 --> 00:50:05.289
data as well.

00:50:05.289 --> 00:50:09.730
But we don't actually have the API say, "Where
is my detect at home, where is my detect at

00:50:09.730 --> 00:50:10.730
work, etcetera."

00:50:10.730 --> 00:50:15.789
&gt;&gt;Lucas: I would say, actually, if there is
an API for that, we're the wrong one's to

00:50:15.789 --> 00:50:22.150
ask because we don't run-- or we don't write
latitude or Google Maps.

00:50:22.150 --> 00:50:24.890
I believe Maps API has their own office hours.

00:50:24.890 --> 00:50:27.680
That would be the right place to ask.

00:50:27.680 --> 00:50:28.839
&gt;&gt;Malin: Yeah.

00:50:28.839 --> 00:50:35.380
I'm familiar with the current V1 version of
the Maps API for Android, and I don't think

00:50:35.380 --> 00:50:37.260
that it has anything like this in it.

00:50:37.260 --> 00:50:38.400
&gt;&gt;Jones: No, it doesn't.

00:50:38.400 --> 00:50:43.339
&gt;&gt;Malin: But there's also-- I think this is
not a feature of that component.

00:50:43.339 --> 00:50:51.190
I think this is more a feature of the Maps
app and the latitude API-- the latitude app.

00:50:51.190 --> 00:50:52.210
I don't think that they have APIs available.

00:50:52.210 --> 00:50:53.210
So.

00:50:53.210 --> 00:50:54.210
Go ahead.

00:50:54.210 --> 00:50:58.230
&gt;&gt;Meier: There is a latitude API, I think.

00:50:58.230 --> 00:50:59.920
&gt;&gt;Malin: Is there?

00:50:59.920 --> 00:51:00.920
Hmm.

00:51:00.920 --> 00:51:04.400
&gt;&gt;Jones: There is a latitude API, but I think
it's more for just reporting what your location

00:51:04.400 --> 00:51:05.400
is.

00:51:05.400 --> 00:51:08.019
I don't think-- At least, the last time I
looked at it, which admittedly was quite a

00:51:08.019 --> 00:51:12.380
while ago, it didn't have anything "get your
autodetected home and work locations."

00:51:12.380 --> 00:51:13.380
&gt;&gt;Malin: Okay.

00:51:13.380 --> 00:51:17.070
Well, I stand corrected, which is pretty much
par for the course today.

00:51:17.070 --> 00:51:18.869
&gt;&gt;Jones: No, no.

00:51:18.869 --> 00:51:20.740
The answer is there's no API for this.

00:51:20.740 --> 00:51:21.740
&gt;&gt;Malin: Right.

00:51:21.740 --> 00:51:24.690
The answer for this particular question is
there is no API.

00:51:24.690 --> 00:51:25.690
Sorry.

00:51:25.690 --> 00:51:31.890
If you've got any more particular questions,
you can send them into us or call on-- get

00:51:31.890 --> 00:51:33.930
online and talk to us about it.

00:51:33.930 --> 00:51:37.410
There may be something that we're missing
that-- I feel like there's more to this question

00:51:37.410 --> 00:51:38.759
that we haven't answered.

00:51:38.759 --> 00:51:41.579
I just want to leave that open.

00:51:41.579 --> 00:51:46.790
Next question from Moderator is: I'm using
the following function to get all view IBs

00:51:46.790 --> 00:51:53.190
versus calling find view by IB multiple times,
which does a very similar traversal.

00:51:53.190 --> 00:51:55.690
And he has it in a link.

00:51:55.690 --> 00:52:01.269
I'm guessing this is faster if you have a
high IB versus non IB view group.

00:52:01.269 --> 00:52:05.759
Unfortunately, we don't-- I don't have off-hand
the link available.

00:52:05.759 --> 00:52:16.609
Let me go look in the link and see if it's--
[pause] I'm getting a redirect.

00:52:16.609 --> 00:52:23.319
It has something called a create resource
map. [pause]

00:52:23.319 --> 00:52:31.249
&gt;&gt;Jones: Okay, he's literally just iterating
through all the children inside a view group.

00:52:31.249 --> 00:52:37.020
Then it creates this resource map, which is--
I'm not sure what data structure that is there.

00:52:37.020 --> 00:52:44.500
&gt;&gt;Malin: I can't tell off-hand, but I think
what's he's just--

00:52:44.500 --> 00:52:45.539
&gt;&gt;Jones: Oh, here we go.

00:52:45.539 --> 00:52:52.529
He's actually-- If resource ID is not equal
to view.noid, and then he sets-- All right.

00:52:52.529 --> 00:52:54.400
&gt;&gt;Malin: Oh, I see.

00:52:54.400 --> 00:52:55.400
Yeah.

00:52:55.400 --> 00:52:56.400
Mm-hmm.

00:52:56.400 --> 00:52:59.480
&gt;&gt;Jones: Honestly, I think you're over-thinking
things a bit.

00:52:59.480 --> 00:53:02.880
Find view by id is normally the right way
to do this.

00:53:02.880 --> 00:53:09.390
Unless you're seeing actual concrete performance
problems, which you can use-- You can find

00:53:09.390 --> 00:53:11.039
that out by using profiling tools.

00:53:11.039 --> 00:53:12.990
Things like Trace View.

00:53:12.990 --> 00:53:18.359
Unless you're actually seeing a negative performant
hit there, I'd say this is probably a case

00:53:18.359 --> 00:53:19.359
of premature optimization.

00:53:19.359 --> 00:53:21.009
It seems like going a bit overboard to me.

00:53:21.009 --> 00:53:28.249
I've never seen anyone go out of their way
to go in and scan through all your childviews

00:53:28.249 --> 00:53:29.249
like that.

00:53:29.249 --> 00:53:31.539
Seems a little off.

00:53:31.539 --> 00:53:39.480
But that being said, I'm not going to discount
the possibility that it might be more-- it

00:53:39.480 --> 00:53:44.279
might be faster in certain situations, which
really just depend on how you're using it.

00:53:44.279 --> 00:53:48.599
But again, unless you're seeing a performance
impact, it seems like code you might not even

00:53:48.599 --> 00:53:49.710
need to worry about.

00:53:49.710 --> 00:53:54.069
&gt;&gt;Lucas: I would say that if you are seeing
a performance impact and that's actually making

00:53:54.069 --> 00:54:00.650
it faster, the only way I can see that being
true is if your view IR key is so complicated

00:54:00.650 --> 00:54:04.430
and nested that you have much bigger fish
to fry.

00:54:04.430 --> 00:54:10.240
&gt;&gt;Jones: Yeah, if you have hundreds and hundreds
and hundreds of views that you're trying to

00:54:10.240 --> 00:54:15.660
call find view by ID on, I'm really terrified
to think what you're view hierarchy actually

00:54:15.660 --> 00:54:16.660
looks like.

00:54:16.660 --> 00:54:17.660
&gt;&gt;Lucas: If it's a--

00:54:17.660 --> 00:54:21.380
&gt;&gt;Jones: You're going to spend more time rendering
than you're going to spend searching.

00:54:21.380 --> 00:54:22.670
&gt;&gt;Lucas: Right.

00:54:22.670 --> 00:54:23.950
&gt;&gt;Malin: Right.

00:54:23.950 --> 00:54:24.950
Okay.

00:54:24.950 --> 00:54:25.950
Let's move on here.

00:54:25.950 --> 00:54:29.980
How does the Tablet layout of Google Play
manage to display two pages at once when you've

00:54:29.980 --> 00:54:33.920
scrolled over to the category section of the
view pager?

00:54:33.920 --> 00:54:34.920
Hmm.

00:54:34.920 --> 00:54:40.480
&gt;&gt;Lucas: I don't have a Tablet on hand.

00:54:40.480 --> 00:54:45.930
&gt;&gt;Jones: Yeah, I'm not sure what you mean
by display two pages at once.

00:54:45.930 --> 00:54:50.250
I suspect they've just gone and created a
view that displays both sets of information

00:54:50.250 --> 00:54:51.309
at once.

00:54:51.309 --> 00:54:53.109
It could be done using fragments.

00:54:53.109 --> 00:54:56.089
That's the sort of thing that they're designed
to be very good at.

00:54:56.089 --> 00:54:58.400
You can certainly stick fragments inside of
a view pager.

00:54:58.400 --> 00:55:03.089
I think that's the answer: the magic of fragments.

00:55:03.089 --> 00:55:04.690
&gt;&gt;Malin: Okay.

00:55:04.690 --> 00:55:06.299
Thank you.

00:55:06.299 --> 00:55:10.380
Next question from Moderator: do you have
any plans on integrating Facebook or Twitter

00:55:10.380 --> 00:55:12.710
in Android as Apple did with Twitter?

00:55:12.710 --> 00:55:14.339
[buzzing noise] Hmm.

00:55:14.339 --> 00:55:15.960
&gt;&gt;Jones: No comment.

00:55:15.960 --> 00:55:16.960
[laughs]

00:55:16.960 --> 00:55:17.960
&gt;&gt;Malin: Yeah.

00:55:17.960 --> 00:55:18.960
&gt;&gt;Lucas: Yeah.

00:55:18.960 --> 00:55:23.900
This falls under the category of "we don't
disclose roadmap."

00:55:23.900 --> 00:55:24.900
&gt;&gt;Malin: Right.

00:55:24.900 --> 00:55:28.779
&gt;&gt;Lucas: This would be a huge roadmap question.

00:55:28.779 --> 00:55:29.779
&gt;&gt;Jones: Yeah.

00:55:29.779 --> 00:55:31.579
Is our tardis fixed, by any chance?

00:55:31.579 --> 00:55:32.579
&gt;&gt;Malin: Nope.

00:55:32.579 --> 00:55:33.579
&gt;&gt;Jones: All right.

00:55:33.579 --> 00:55:34.579
Yeah, we can't--

00:55:34.579 --> 00:55:35.579
&gt;&gt;Malin: Nothing we can do.

00:55:35.579 --> 00:55:36.579
The time machine is not working.

00:55:36.579 --> 00:55:39.210
we can't tell you about things that we may
or may not do in the future.

00:55:39.210 --> 00:55:41.960
&gt;&gt;Jones: Yeah, it's stuck on the shelf, not
moving anywhere.

00:55:41.960 --> 00:55:43.160
&gt;&gt;Malin: Right.

00:55:43.160 --> 00:55:46.339
&gt;&gt;Jones: Sometimes it has cookies inside,
but--

00:55:46.339 --> 00:55:53.869
&gt;&gt;Malin: Okay, next question: does the remote
control client API only support the flag key

00:55:53.869 --> 00:55:58.789
median next, flag key media pause, and flag
key media previous controls?

00:55:58.789 --> 00:56:01.970
Other flags do not seem to show up.

00:56:01.970 --> 00:56:06.700
&gt;&gt;Jones: Without looking at that API, on the
top of my head, I'm not sure any of us know

00:56:06.700 --> 00:56:09.259
the answer.

00:56:09.259 --> 00:56:11.369
I'm not sure what you mean by "don't show
up", either.

00:56:11.369 --> 00:56:13.079
Do you mean it doesn't work or it's not in
the documentation?

00:56:13.079 --> 00:56:15.640
&gt;&gt;Meier: I think he probably means that it's
not visible on the lock screen.

00:56:15.640 --> 00:56:20.690
So you just have next, previous, and pause.

00:56:20.690 --> 00:56:21.950
&gt;&gt;Jones: Ah.

00:56:21.950 --> 00:56:26.690
Well, if they don't show up, that's probably
a good indication they don't work.

00:56:26.690 --> 00:56:29.170
&gt;&gt;Malin: Yeah.

00:56:29.170 --> 00:56:30.410
Okay.

00:56:30.410 --> 00:56:34.019
Since we're getting low on time, we'll move
on.

00:56:34.019 --> 00:56:39.039
I'm looking for a way to overlay a drop shadow
on a scroll view as described here, with a

00:56:39.039 --> 00:56:40.039
link.

00:56:40.039 --> 00:56:41.800
How can I overlay a dropshot onto a scroll
view?

00:56:41.800 --> 00:56:43.339
Is this possible?

00:56:43.339 --> 00:56:47.559
It looks as if the holo.lite action bar does
the same.

00:56:47.559 --> 00:56:51.520
[pause] Any answers?

00:56:51.520 --> 00:56:53.609
Are you waiting for--

00:56:53.609 --> 00:56:55.239
&gt;&gt;Jones: I was waiting for the link.

00:56:55.239 --> 00:57:00.049
But I'm not sure I actually know the answer,
having never tried to overlay shadow on top

00:57:00.049 --> 00:57:01.680
of a scroll view.

00:57:01.680 --> 00:57:10.049
&gt;&gt;Malin: I think that what he's trying-- It
shows a layout, and he's trying to put a drop

00:57:10.049 --> 00:57:16.049
shadow on top of something that's in the details.

00:57:16.049 --> 00:57:20.160
My intention that has another layout above
and outside the scroll view.

00:57:20.160 --> 00:57:23.910
It stays at the top whilst scrolling the content
in the scroll view.

00:57:23.910 --> 00:57:27.829
The scroll view should have a drop shadow
overlay if the top, which appears to be from

00:57:27.829 --> 00:57:28.930
the layout of--

00:57:28.930 --> 00:57:34.390
&gt;&gt;Jones: Well, you certainly can place views
on top of other views.

00:57:34.390 --> 00:57:37.040
There is an implied Z order.

00:57:37.040 --> 00:57:40.890
I think, depending on which type of [indistinct]
major you're using, sometimes you can even

00:57:40.890 --> 00:57:43.369
specify the Z order, if I remember correctly.

00:57:43.369 --> 00:57:52.160
But if that's the case, then just create a
shadow as a drawable, with an alpha layer.

00:57:52.160 --> 00:57:53.160
Problem solved.

00:57:53.160 --> 00:57:57.970
Short of that, there are other things you
can do to try and fake that, but I'm not thinking

00:57:57.970 --> 00:58:01.050
of anything that will work really well in
the case of a scroll view.

00:58:01.050 --> 00:58:02.779
Actually, no.

00:58:02.779 --> 00:58:09.750
There is a-- what's the word I'm looking for?--
a heading section on scroll views where you

00:58:09.750 --> 00:58:14.160
can actually go and-- Normally, it's designed
to go and have a title for your scroll view,

00:58:14.160 --> 00:58:16.670
but you could put a drawable in there to put
your shadow as well.

00:58:16.670 --> 00:58:19.220
That's a hack, but it'll work.

00:58:19.220 --> 00:58:20.220
&gt;&gt;Malin: Yeah.

00:58:20.220 --> 00:58:24.400
It's not-- I mean, from what I'm looking at
here, it's not really clear to me whether

00:58:24.400 --> 00:58:29.690
he's trying to put the drop shadow on the
scroll view or on the title above the scroll

00:58:29.690 --> 00:58:32.369
view.

00:58:32.369 --> 00:58:33.910
I can't really tell.

00:58:33.910 --> 00:58:37.130
&gt;&gt;Jones: If you're putting it on the title
above the scroll view, that's even easier.

00:58:37.130 --> 00:58:38.650
Then you just place a drawable at the bottom.

00:58:38.650 --> 00:58:42.730
The one thing that makes the scroll view difficult
is it's going to move.

00:58:42.730 --> 00:58:49.359
But I think-- To me, you're putting whatever
your green box is on top of your scroll view.

00:58:49.359 --> 00:58:52.380
Taking advantage of Z order is probably the
easiest option.

00:58:52.380 --> 00:58:54.160
&gt;&gt;Malin: I think that's a good answer.

00:58:54.160 --> 00:58:58.599
Okay, let's see if we can move on.

00:58:58.599 --> 00:58:59.960
Next question-- sorry.

00:58:59.960 --> 00:59:00.960
Okay.

00:59:00.960 --> 00:59:05.930
We're going to have to make this the last
question, my producer tells me.

00:59:05.930 --> 00:59:10.069
So: how can I notify each fragment in the
view pager, which is linked to a tab-post

00:59:10.069 --> 00:59:14.720
to refresh its view data, following the lotoor
finishing in the main activity? [pause]

00:59:14.720 --> 00:59:19.430
&gt;&gt;Lucas: A view pager is linked to a tab-post?

00:59:19.430 --> 00:59:20.480
&gt;&gt;Malin: Yeah.

00:59:20.480 --> 00:59:26.730
How can I notify each fragment in a view pager
linked to a tab-post to refresh its view data

00:59:26.730 --> 00:59:29.450
following the lotoor finishing in the main
activity?

00:59:29.450 --> 00:59:36.140
&gt;&gt;Jones: Generally speaking, the way you want
to go and communicate with fragments is using--

00:59:36.140 --> 00:59:40.749
Define and interface and just make a call
to all of your fragments.

00:59:40.749 --> 00:59:42.829
Then have your fragments go and update what's
inside of them.

00:59:42.829 --> 00:59:48.019
I usually recommend against reaching inside
of fragments to go and try to manipulate whatever

00:59:48.019 --> 00:59:52.130
view components are inside of it, because
then you're breaking encapsulation.

00:59:52.130 --> 00:59:58.200
The idea with a fragment is you can go and
swap it out with other fragments as needed.

00:59:58.200 --> 00:59:59.279
It is portable.

00:59:59.279 --> 01:00:04.770
Once you go and start modifying the content
of fragments, you've broken that portability.

01:00:04.770 --> 01:00:09.700
Short answer: send a message to your fragment
and have the fragment update itself.

01:00:09.700 --> 01:00:12.749
Anybody else have any insight on that?

01:00:12.749 --> 01:00:14.180
&gt;&gt;Malin: No.

01:00:14.180 --> 01:00:22.759
He has posted a large set of code on Stack
Overflow that we could go take a look at in

01:00:22.759 --> 01:00:24.680
more detail, but--

01:00:24.680 --> 01:00:27.670
&gt;&gt;Jones: Probably not in the 30 seconds that
we have left.

01:00:27.670 --> 01:00:29.549
&gt;&gt;Malin: Yeah, unfortunately.

01:00:29.549 --> 01:00:30.549
Sorry.

01:00:30.549 --> 01:00:32.779
&gt;&gt;Lucas: I think we're out of time.

01:00:32.779 --> 01:00:33.880
&gt;&gt;Malin: Sorry we're out of time.

01:00:33.880 --> 01:00:36.130
But we are out of time.

01:00:36.130 --> 01:00:39.339
We'll have to take a look at it in Stack Overflow.

01:00:39.339 --> 01:00:42.759
Hopefully, somebody else can step in and take
a look at it as well.

01:00:42.759 --> 01:00:47.990
I encourage everybody else in the Android
developer world to go to Stack Overflow, take

01:00:47.990 --> 01:00:51.269
a look at this question, see if you've got
any ideas about what's going on.

01:00:51.269 --> 01:00:52.700
&gt;&gt;Jones: That's a lot of people.

01:00:52.700 --> 01:00:53.950
&gt;&gt;Malin: Yes.

01:00:53.950 --> 01:00:57.200
[laughter] Crowd-sourcing the answer.

01:00:57.200 --> 01:00:59.110
And on that note, I think we're done for today.

01:00:59.110 --> 01:01:03.250
I want to thank Francesco for showing up and
answering GCM questions.

01:01:03.250 --> 01:01:04.329
&gt;&gt;Nerieri: Thank you, guys.

01:01:04.329 --> 01:01:11.190
&gt;&gt;Malin: And Trevor and Alex for supporting
me, and Reto for running all the equipment

01:01:11.190 --> 01:01:12.259
to bring this to you.

01:01:12.259 --> 01:01:13.910
On that note, goodbye.

01:01:13.910 --> 01:01:16.089
&gt;&gt;Jones: See ya, everyone.

