WEBVTT
Kind: captions
Language: en

00:00:00.360 --> 00:00:03.190
Now we'll sum up the application
of dynamic programming

00:00:03.190 --> 00:00:05.420
to the sequence alignment problem.

00:00:05.420 --> 00:00:09.470
Recall that we gave an algorithm, which
given two sequences of length m and

00:00:09.470 --> 00:00:13.440
n, found a minimum cost
alignment in O(mn) time.

00:00:14.660 --> 00:00:16.630
We did a constant amount of work for

00:00:16.630 --> 00:00:19.200
each element in the grid
that we filled out.

00:00:19.200 --> 00:00:22.070
Dynamic programming always
relies on the existence of some

00:00:22.070 --> 00:00:24.240
optimal similar substructure.

00:00:24.240 --> 00:00:27.180
In this case,
it was the minimum cost of aligning

00:00:27.180 --> 00:00:30.680
prefixes of the sequences
that we wanted to align.

00:00:30.680 --> 00:00:33.730
The key recurrence was that
the cost of aligning the first i

00:00:33.730 --> 00:00:38.725
characters of one sequence with the
first j of the other, was the minimum

00:00:38.725 --> 00:00:43.505
of the cost of matching the last
characters that sequence together,

00:00:43.505 --> 00:00:48.085
of leaving the last character of
the first sequence unmatched, and

00:00:48.085 --> 00:00:51.155
of leaving the last character of
the second sequence unmatched.

