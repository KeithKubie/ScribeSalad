WEBVTT
Kind: captions
Language: en

00:00:01.870 --> 00:00:02.929
&gt;&gt; HOSSAIN: Hello, everybody. My name is Monsur
Hossain. I work for the Google Data API's

00:00:02.929 --> 00:00:03.530
team...

00:00:03.530 --> 00:00:08.900
&gt;&gt; BIDELMAN: And I'm Eric Bidelman and I also
work for the Google Data API's team.

00:00:08.900 --> 00:00:12.089
&gt;&gt; HOSSAIN: And we're here to talk to you
today by using the Google Data APIs and OAuth

00:00:12.089 --> 00:00:17.890
to create an open social gadget. If you guys
have any questions, feel free to visit this

00:00:17.890 --> 00:00:22.250
URL we have right here. You can go ahead and
post your questions on the Google moderator

00:00:22.250 --> 00:00:26.980
site, and we'll take a look at them once the
session is over. You can also, you know, feel

00:00:26.980 --> 00:00:34.690
free to ask questions up to the mic once the
presentation is over as well. Okay. So, our

00:00:34.690 --> 00:00:39.879
goal today is to build an iGoogle gadget that
can read and write user data. So, just by

00:00:39.879 --> 00:00:44.949
a show of hands here, how many people are
familiar with gadget development? Okay, a

00:00:44.949 --> 00:00:53.399
good number. What about the Google Data APIs?
And, how about OAuth? Okay, great. Sounds

00:00:53.399 --> 00:00:58.170
like a lot of you from Google gadget, that's
good because we're not going to cover as much

00:00:58.170 --> 00:01:03.359
gadget development. We're going to focus more
on the aspects of using OAuth and using the

00:01:03.359 --> 00:01:09.150
Google Data APIs when building a gadget. Kind
of like, what we're trying to do here is imagine

00:01:09.150 --> 00:01:14.040
you have gadget living on iGoogle that's going
to want to load data from bloggers, so we're

00:01:14.040 --> 00:01:17.590
going to talk about how we're actually going
to go about grabbing that data from blogger

00:01:17.590 --> 00:01:23.630
and also writing data back to blogger. A lot
of the, a lot of the topics that you're going

00:01:23.630 --> 00:01:26.150
to learn today, you can also apply it to other
open social containers and other services

00:01:26.150 --> 00:01:31.610
that support OAuth, but for the purpose of
this talk, we're going to focus on iGoogle

00:01:31.610 --> 00:01:39.590
and on Google services. So, some of the issues
you're going to run into is that traditional

00:01:39.590 --> 00:01:42.210
JavaScript development practices are kind
of inadequate for what we want them to do.

00:01:42.210 --> 00:01:47.390
You have issues such as cross-domain communication
is really hard to do, we're going to want

00:01:47.390 --> 00:01:52.600
to load data from blogger to iGoogle and it's
really hard to talk cross-domain without doing

00:01:52.600 --> 00:02:00.590
some sort of Iframe hack. Also, even you could
talk cross-domain, you can have issues with

00:02:00.590 --> 00:02:06.750
the data format. Google data offers the JSON-in-script
format. If you're not familiar with JSON-in-script,

00:02:06.750 --> 00:02:12.489
basically, what it does is you call JSON-in-script
with a callback function and it's going to

00:02:12.489 --> 00:02:18.090
load some JSON onto your page and it's going
to call the callback with that JSON object.

00:02:18.090 --> 00:02:23.060
This works really well for reading data, but
you can't write data back to the server using

00:02:23.060 --> 00:02:30.549
this method. Even if there was a good way
to do, to write, you need a way to do authentication.

00:02:30.549 --> 00:02:37.010
The Google Data APIs offer AuthSub and they
offer ClientLogin but this authentication

00:02:37.010 --> 00:02:44.790
recommendation don't offer as great an experience
when being used in a gadget environment. So,

00:02:44.790 --> 00:02:48.620
what we're going to is we're going to use
a Google Data JavaScript client with the OAuth

00:02:48.620 --> 00:02:56.430
Proxy to create this gadget. So, the authentication
will be handled by OAuth while the Google

00:02:56.430 --> 00:03:01.870
Data JavaScript client will handle the reading
and the writing of the data. So, just to give

00:03:01.870 --> 00:03:04.930
you an idea of the technology stack that we're
dealing with--on the browser side, on the

00:03:04.930 --> 00:03:08.569
client side, you're going to have your actual
gadget code which is going to talk to the

00:03:08.569 --> 00:03:13.189
Google Data JavaScript client which in turn
is going to interface with the open social

00:03:13.189 --> 00:03:21.310
JavaScript API specifically gadgets.io.makerequest.
This is all going to be sent up to the iGoogle

00:03:21.310 --> 00:03:26.480
server where it'll be received by the iGoogle
server and also processed by the OAuth Proxy

00:03:26.480 --> 00:03:31.439
to handle the OAuth portion. And finally,
that request is going to be sent off to the

00:03:31.439 --> 00:03:37.529
service provider which in this case will be
a blogger or if you're using any other Google

00:03:37.529 --> 00:03:40.689
service, calendar, context, you know whatever.
So, I kind of made sense of the entire technology

00:03:40.689 --> 00:03:46.689
stack we've been talking about today. Okay.
So, I'm going to start by giving a little

00:03:46.689 --> 00:03:53.959
bit of background into what OAuth is and how
it's used in a gadget environment. So, OAuth

00:03:53.959 --> 00:03:58.959
is an open standard for sharing user's private
data with another website or a gadget. When

00:03:58.959 --> 00:04:03.209
using OAuth, it eliminates the need to have
to share passwords between sites. So if you're

00:04:03.209 --> 00:04:08.419
in iGoogle, I don't have to give my password
to iGoogle who in turn gives it off to another

00:04:08.419 --> 00:04:13.200
site. Instead, what happens is that, I get
a token and this token is used to make all

00:04:13.200 --> 00:04:19.609
authenticated requests. All data requests
are digitally signed, so if you're familiar

00:04:19.609 --> 00:04:26.699
with AuthSub's secure mode is very similar
to that. So, to give a little background by

00:04:26.699 --> 00:04:32.280
how OAuth works, we're going to start first
by looking at the players in this OAuth dance.

00:04:32.280 --> 00:04:36.770
So first of all, there's the actual user of
the gadget which would be you yourself or

00:04:36.770 --> 00:04:42.120
anyone else sitting in front of the computer.
Next, comes the consumer. The consumer is

00:04:42.120 --> 00:04:47.169
the application that's trying to access the
user's data. In our particular case, the consumer

00:04:47.169 --> 00:04:54.030
is going to be iGoogle who's going to be requesting
the data on behalf of the gadget. Lastly,

00:04:54.030 --> 00:04:58.090
you have the service provider. The service
provider is going to be the keeper of the

00:04:58.090 --> 00:05:06.310
user's data. In this particular case, it's
going to be blogger or any other Google service.

00:05:06.310 --> 00:05:12.659
So, these three OAuth players are going to
interact in three distinct steps which is

00:05:12.659 --> 00:05:19.300
called the OAuth process or the OAuth dance.
So this first, the first step is a get request

00:05:19.300 --> 00:05:25.319
token step. This is a behind-the-scenes request
from the consumer to the service provider;

00:05:25.319 --> 00:05:30.750
the user doesn't see any of this. What's going
to happen is that the consumer is going ask

00:05:30.750 --> 00:05:34.830
the service provider for a request token and
this request token is going to be used in

00:05:34.830 --> 00:05:43.560
some screen request between, in the OAuth
process. So after obtaining that initial request

00:05:43.560 --> 00:05:50.199
token, the consumer is going to redirect the
user over to the service provider. So, once

00:05:50.199 --> 00:05:54.340
he uses that service provider site, say once
the user's at the Google site, if he hasn't

00:05:54.340 --> 00:05:58.900
logged in today, if he hasn't logged in yet,
he's going to be asked to log in and then

00:05:58.900 --> 00:06:02.150
he's going to be asked to authorize the request
token. And what that basically means is that

00:06:02.150 --> 00:06:07.889
he's going to see a site that says, hey, you
know, iGoogle wants to access your data, do

00:06:07.889 --> 00:06:13.659
you want to give them permission to use your
data? And, the user can say yes or no. So,

00:06:13.659 --> 00:06:17.539
we're going to assume, of course, that the
user says yes. So, what's going to happen?

00:06:17.539 --> 00:06:23.669
As the user clicks authorize and then the
user is redirected back to the consumer site.

00:06:23.669 --> 00:06:27.729
Now when the consumer sees that the users
arrive at their site, we have the third step

00:06:27.729 --> 00:06:31.810
which is called the "get access token" step.
And this is another behind-the-scenes request

00:06:31.810 --> 00:06:36.550
from the consumer to the service provider.
So, what happens is the consumer says, hey,

00:06:36.550 --> 00:06:41.599
you know I got this authorize request token.
It shows it to a service provider, the service

00:06:41.599 --> 00:06:47.389
provider says, yes, the user has authorized
you to load data, and then, it returns back

00:06:47.389 --> 00:06:51.599
this access token. So this access token is
going to be used at all subsequent requests

00:06:51.599 --> 00:06:59.389
in order to load data from the Google servers.
So, that's kind of the OAuth process in a

00:06:59.389 --> 00:07:04.729
nutshell. However, the OAuth process has some
issues when being used in JavaScript. First

00:07:04.729 --> 00:07:09.419
you got this issue of crypto. I mean, you
could do it JavaScript but you users are always

00:07:09.419 --> 00:07:14.389
going to be or some malicious user is always
going to be able to hit, you know, Control

00:07:14.389 --> 00:07:18.340
U or Command U. They're going to be able to
view the source, and at some level, you're

00:07:18.340 --> 00:07:23.689
always worried that the user can get at, you
know, your crypto secrets, so there really

00:07:23.689 --> 00:07:28.629
are no secrets when using JavaScript. The
next issue as I mentioned earlier is cross-domain.

00:07:28.629 --> 00:07:32.610
As you saw the OAuth process has a lot of
communications between the consumer and the

00:07:32.610 --> 00:07:38.099
service provider and you're going to have
a hard time doing that when you're using JavaScript.

00:07:38.099 --> 00:07:41.590
And lastly, you have the question of storage.
You've got all these tokens going back and

00:07:41.590 --> 00:07:45.460
forth, and where do you store these tokens
when you receive them? You know, do you put

00:07:45.460 --> 00:07:51.099
them in cookies, or what's the standard way
to do that? So, in order to address all these

00:07:51.099 --> 00:07:56.990
issues in JavaScript, we have the OAuth Proxy.
The OAuth Proxy is, it lives in the iGoogle

00:07:56.990 --> 00:08:01.560
server. It's an open source. It goes under
the name of shindig, if you're familiar with

00:08:01.560 --> 00:08:07.129
the open source project and basically, what
the OAuth Proxy does is it manages the OAuth

00:08:07.129 --> 00:08:12.379
dance for gadget. So now with the issue of
crypto, we don't have to worry about that

00:08:12.379 --> 00:08:17.620
because the OAuth Proxy signs a request on
behalf of the gadget. We don't have to worry

00:08:17.620 --> 00:08:23.249
about cross-domain issues because the OAuth
Proxy lives on the same server as the gadget.

00:08:23.249 --> 00:08:28.389
So the gadget can just use HTML repeated requests
to talk back to your OAuth Proxy. And lastly,

00:08:28.389 --> 00:08:32.650
we don't have to worry about storage because
the OAuth Proxy is going to manage all the

00:08:32.650 --> 00:08:39.519
token information for the gadget. So, if you
revisit again the three steps of the OAuth

00:08:39.519 --> 00:08:44.880
process that I've mentioned earlier, you'll
see that the OAuth Proxy is going to handle

00:08:44.880 --> 00:08:49.769
the request token step and the access token
step for you. As a gadget developer, you'll

00:08:49.769 --> 00:08:53.889
mostly be concerned with redirecting the user
in order to authorize the request token.

00:08:53.889 --> 00:09:07.940
&gt;&gt; The OAuth process lives on the what?
&gt;&gt; HOSSAIN: It lives on the server. So, this

00:09:07.940 --> 00:09:10.060
kind of, here's a general skeleton outline
of the gadget module prefs section. You'll

00:09:10.060 --> 00:09:16.500
see, we've added, now, we're going to talk
about kind of how to enable OAuth in a gadget

00:09:16.500 --> 00:09:20.040
environment, so we've got the module prefs
section. We're going to add a section called

00:09:20.040 --> 00:09:24.880
OAuth and we're going to add to that a section
named service with the name attribute set

00:09:24.880 --> 00:09:30.779
to Google which indicates that we're going
to be talking to a Google server. Next, we're

00:09:30.779 --> 00:09:35.399
going to go ahead and add a specific URL for
each of the three steps of the OAuth process.

00:09:35.399 --> 00:09:40.300
Of course, we have the request URL. This right
here, the Google.com/accounts/OAuthGetRequestToken

00:09:40.300 --> 00:09:48.980
is standard for doing OAuth against any Google
server. Have you noticed here the scope parameter?

00:09:48.980 --> 00:09:54.860
What the scope parameter says is that it indicates
which service your gadget wants to talk to.

00:09:54.860 --> 00:09:59.160
In this particular case, the scope is sent
to blogger because you want to talk to, we

00:09:59.160 --> 00:10:06.449
want to get data from the blogger service.
Next, we're going to add the authorization

00:10:06.449 --> 00:10:12.440
section and this is basically the URL that
the user should visit in order to authenticate

00:10:12.440 --> 00:10:18.660
or authorize with Google. Notice here, we've
got the OAuth callback parameter. Basically,

00:10:18.660 --> 00:10:23.519
when the user is redirected to the authorization
URL, they're going to authenticate, they're

00:10:23.519 --> 00:10:27.000
going to authorize, but once they've finished
all that step, all those steps, the service

00:10:27.000 --> 00:10:31.899
provider needs to know where to send to the
user back on the consumer side. So, the service

00:10:31.899 --> 00:10:38.029
provider is going to send them back to this
OAuth callback URL. Lastly, we've got the

00:10:38.029 --> 00:10:44.430
access token step. This is, this tells the
iGoogle server where to visit on the service

00:10:44.430 --> 00:10:50.949
provider in order to exchange the request
token for an access token. So here's what

00:10:50.949 --> 00:10:56.470
the entire module prefs section looks like
and basically, with these three URLs, we've

00:10:56.470 --> 00:11:03.019
laid down the groundwork of doing OAuth in
your gadget. Next, Eric is going to come up

00:11:03.019 --> 00:11:04.079
and talk to you about actually building the
gadget.

00:11:04.079 --> 00:11:13.160
&gt;&gt; BIDELMAN: All right, thanks, Mon. Thank
you, Monsur. So, Monsur sure laid the groundwork

00:11:13.160 --> 00:11:17.110
on our setup, on our setup code for gadget,
what we need to do to use the OAuth proxy

00:11:17.110 --> 00:11:21.300
to talk to one of the Google Data APIs. Now,
we're going to take a look at some code, we're

00:11:21.300 --> 00:11:25.709
going take a look at both, you know, the JavaScript
required to pull and push data to blogger

00:11:25.709 --> 00:11:29.649
and also the presentation where what you sort
of need to do to manage these different states.

00:11:29.649 --> 00:11:33.519
This request token state--this authorization
where the users throw in to Google and then

00:11:33.519 --> 00:11:39.000
the Access token state. So, we'll do that
both in OpenSocial using some of the OpenSocial

00:11:39.000 --> 00:11:43.709
APIs and we'll do that using the Google data
JavaScript client lateral, take a look at

00:11:43.709 --> 00:11:47.480
different ways, I can answer your question
real quick.

00:11:47.480 --> 00:11:51.639
&gt;&gt; [INDISTINCT]?
&gt;&gt; BIDELMAN: It's on the server, it's iGoogle

00:11:51.639 --> 00:12:00.620
server, so the question was where does OAuth
proxy live? That's iGoogle. So, we define

00:12:00.620 --> 00:12:05.120
the mod prefs section, you know, on the previous
couple of slides, we'd sold the OAuth endpoints

00:12:05.120 --> 00:12:10.170
there, in that OAuth tag. And now, we're just
requiring the OpenSocial APIs and then there's

00:12:10.170 --> 00:12:15.220
a special feature here, this OAuth pop up
feature and we'll talk about that, that's

00:12:15.220 --> 00:12:19.810
actually, that'll provide a great user experience
for users. This is a pop up window that's

00:12:19.810 --> 00:12:25.480
going to show the user that they want to access
their blogger data and then subsequently when

00:12:25.480 --> 00:12:30.100
the gadget tries to fetch data when that pop
up window closes, that features completely

00:12:30.100 --> 00:12:34.320
required in here. And, lastly, there's just
you know the regular content section, and

00:12:34.320 --> 00:12:38.509
that's where you're going to be putting, you
know, presentations, CSS and possible JavaScript

00:12:38.509 --> 00:12:44.139
so, let's dive into that. So here's sort of
the overall picture of what needs to happen

00:12:44.139 --> 00:12:47.790
and we'll take a look at each of these sections.
You can see it's, you know, relatively few

00:12:47.790 --> 00:12:52.860
lines of HTML code to get all this working.
So, the first thing you need to do is sort

00:12:52.860 --> 00:12:56.620
of add this unauthenticated state and we're
doing this with different div containers.

00:12:56.620 --> 00:12:58.730
You'll notice that, initially we're not displaying
any of these, and that's because the gadgets

00:12:58.730 --> 00:13:05.870
going to have these different states and we'll
take a look at the code behind that in a second.

00:13:05.870 --> 00:13:09.320
Look, the approval state is your authenticated
state. So when the gadget installed for the

00:13:09.320 --> 00:13:13.029
first time the user visits your gadget, or
there are iGoogle pictures for the first time

00:13:13.029 --> 00:13:16.850
the gadget is installed, they're going to
need to authenticate that, and actually obtain

00:13:16.850 --> 00:13:21.079
this request token and then go through this
OAuth dance like Monsur talked about. So in

00:13:21.079 --> 00:13:24.820
this case we're just displaying, you know,
sign in to blogger, we'll fill this href with

00:13:24.820 --> 00:13:31.839
a response that we'll get from the OAuth Proxy
and we'll take a look of that code. Next is

00:13:31.839 --> 00:13:36.089
to serve this pending state right you're waiting
for the user to go through the approval and

00:13:36.089 --> 00:13:40.630
actually grant access to your data. So, in
this case, we're just displaying a link that

00:13:40.630 --> 00:13:45.230
says "I've approved access." A user shouldn't
actually see this if you're using that OAuth

00:13:45.230 --> 00:13:48.399
pop up feature, what we just saw because a
gadget will always try to refresh itself,

00:13:48.399 --> 00:13:54.839
and they'll never actually see this. So, the
pop will go away and that'll be taken care

00:13:54.839 --> 00:13:58.930
for you but, if you don't use the pop up,
you know, you can do something like this and

00:13:58.930 --> 00:14:04.959
just have the URL and fill it as needed. Next
is sort of authenticated stage, just the sort

00:14:04.959 --> 00:14:08.250
of the normal operating state of the gadgets
so the user already has approved access to

00:14:08.250 --> 00:14:13.149
their data and then, in this case, we'll just
fill it with data, you know, reference its

00:14:13.149 --> 00:14:19.649
I.D. and fill it with data once we're authenticated.
A couple nice to haves, you know, if anything

00:14:19.649 --> 00:14:23.740
goes wrong maybe the user denies access to
the data, maybe you show a meaningful message

00:14:23.740 --> 00:14:29.199
and some kind of errors div with a big red
text or something. Another nice to have, you

00:14:29.199 --> 00:14:32.990
know, display something that the user, I am
loading data, these gadgets are trying to

00:14:32.990 --> 00:14:38.579
fetch data, I'm trying to post data, you know
maybe an Ajax loader and gift and some text

00:14:38.579 --> 00:14:44.930
there. So, let's see some practice, there's
actually the Google Data JavaScript client

00:14:44.930 --> 00:14:51.850
library is, is a read/write library for web
applications and we'll take a look at this

00:14:51.850 --> 00:14:59.639
blogger gadget real quick. So, you can see,
I have this pretty boring blog that I started.

00:14:59.639 --> 00:15:05.220
I have one post, it's not very interesting,
but it was started yesterday so bear with

00:15:05.220 --> 00:15:10.519
me. And we'll install this blogger gadget
and you can see we have that sign at the blog

00:15:10.519 --> 00:15:17.829
URL, and if I'll just refresh the page, you
know, as the gadget will try to, it'll try

00:15:17.829 --> 00:15:21.720
to fetch data for the first time, it uses
unauthenticated this point, there's no request

00:15:21.720 --> 00:15:27.990
token associated with the gadget. So, we fill
the href with the response we got from OAuth

00:15:27.990 --> 00:15:33.620
proxy. Here's that pop up window feature that
I was talking about and you can see that I've

00:15:33.620 --> 00:15:40.670
approved access link this pending state. So,
I do trust this gadget with my blogger data,

00:15:40.670 --> 00:15:45.940
so I'm going to grant access; we'll be redirected
back to the OAuth callback URL. If you use

00:15:45.940 --> 00:15:50.009
the OAuth callback URL that was in a few slides
back, that actually just closes the window

00:15:50.009 --> 00:15:54.459
using some JavaScript and the gadget is smart
enough to know to refresh itself; and we'll

00:15:54.459 --> 00:15:58.310
take a look at what exactly went behind that.
But, you can see there's a road to be painless

00:15:58.310 --> 00:16:02.860
experience for the user, you know, one pop
up, one click, a few clicks to grant access

00:16:02.860 --> 00:16:03.839
and now the gadget is in its authenticated
state, I mean, let me maximize this for you,

00:16:03.839 --> 00:16:10.060
guys. So

00:16:10.060 --> 00:16:13.209
you can see the gadget refreshed itself but
I have a token, so this is the normal state,

00:16:13.209 --> 00:16:17.459
right? And, it's kind of a nifty gadget I
can choose which blog I want to post to you.

00:16:17.459 --> 00:16:31.620
I can say Google I/O. It can tag this, you
can publish that to blogger. So if all goes

00:16:31.620 --> 00:16:36.279
well, we should see my new post show up in
blogger and there you go. So, we read data,

00:16:36.279 --> 00:16:39.949
we read data from blogger, we got the list
of blogs and then we posted a new entry to

00:16:39.949 --> 00:16:51.870
blogger. So, how did we do that? [pause] By
the way, this code is an open source at this

00:16:51.870 --> 00:16:58.069
URL if you're interested, it's blogger_gadget.
So, how do we load data? For those familiar

00:16:58.069 --> 00:17:03.949
with the OpenSocial APIs, there's a gadgets
I/O make request. And what's going on with

00:17:03.949 --> 00:17:07.400
actually--inside the Google data library is
we're wrapping that function with some of

00:17:07.400 --> 00:17:12.360
the open methods. And you just pass the URL,
the feed you're interested in. You pass a

00:17:12.360 --> 00:17:16.579
callback function to process the results,
the JSON results you get from the response,

00:17:16.579 --> 00:17:22.490
and then you pass us an optional parameters
of JSON object. In this case, the OAuth Proxy

00:17:22.490 --> 00:17:27.400
and the iGoogle, you're going to actually
need those parameters because we need to tell

00:17:27.400 --> 00:17:29.980
the OAuth Proxy that we're using OAuth, you
need to tell them that we're using tokens.

00:17:29.980 --> 00:17:34.559
We'll take a look what's required. And again,
the OAuth Proxy is handling all of this cryptography

00:17:34.559 --> 00:17:38.580
work for us. All you do is, you know, write
your OpenSocial calls using make request,

00:17:38.580 --> 00:17:42.520
or using the help library functions and this
works which is great because we like that.

00:17:42.520 --> 00:17:51.940
So OpenSocial, what does this look like in
JavaScript? Pretty simple right? So, the first

00:17:51.940 --> 00:17:55.750
time the gadget loads, you're going to have
to register on load handler and then we're

00:17:55.750 --> 00:18:00.559
just going to call some kind of initialization
function. In this case we're just fetching

00:18:00.559 --> 00:18:06.840
data. So, the magic here is we're fetching
data. Let's take a closer look at that. Here's

00:18:06.840 --> 00:18:12.350
the overall picture I just want to show you.
You know, it's one slide of a code but, it's

00:18:12.350 --> 00:18:17.250
powerful, right? I'm using the same function
in the blogger gadget to post data to blogger

00:18:17.250 --> 00:18:23.059
and also read data so, take a look at each
section a little more closely. You saw in

00:18:23.059 --> 00:18:27.909
the example, the first time the gadget loads,
we're just showing the animation, you know,

00:18:27.909 --> 00:18:29.340
presenting the user with some kind of meaningful
representation that we're doing something

00:18:29.340 --> 00:18:35.659
in the background. We're setting up a callback
function. This callback function is going

00:18:35.659 --> 00:18:41.120
to process the response JSON from the OAuth
Proxy and the iGoogle server. The first time

00:18:41.120 --> 00:18:45.510
the gadget loads and it's unauthenticated,
you're going to get the response object and

00:18:45.510 --> 00:18:50.780
there's going to be this OAuth approval URL
inside that object. And so that's the sign

00:18:50.780 --> 00:18:55.010
in to blogger link right there. That's actually
the URL that we used to fill that href. So,

00:18:55.010 --> 00:18:58.700
if we have that, we know to use, we know what
state the gadget's in. So we're going to create

00:18:58.700 --> 00:19:03.270
a pop up handler and we'll take a look at
that, and just pass that to URL that we want

00:19:03.270 --> 00:19:11.120
the user to go to. That's the, excuse me,
the OAuth approval URL. And then, we're just

00:19:11.120 --> 00:19:16.510
going to show the approval state waiting for
the users to make that action. So, if we're

00:19:16.510 --> 00:19:20.370
now actually authenticating and the user has
gone through this process, we'll use the same

00:19:20.370 --> 00:19:24.630
fetch data function and we'll try to fetch
data again. This time, we may have a feed

00:19:24.630 --> 00:19:29.390
object. So, in the case, the Google data APIs
is going to have feed object with a bunch

00:19:29.390 --> 00:19:33.740
of entries, you know, each entry being a blog,
a post, or a comment or, you know what have

00:19:33.740 --> 00:19:39.990
you. All right, we're just going to show those
results in that main div there. Well, to be

00:19:39.990 --> 00:19:45.159
straightforward there, otherwise, there might
be an error, maybe, you know, the user denied

00:19:45.159 --> 00:19:50.289
access again. Maybe there's something wrong
with our request so we'll just show them,

00:19:50.289 --> 00:19:57.159
you know, some kind of meaningful error and
show the errors div. To continue on with the

00:19:57.159 --> 00:20:01.090
same codes as we had, in the previous slide,
this is the important section here, this is

00:20:01.090 --> 00:20:06.279
where we setup the I/O request parameters.
So, we're talking to Google, our OAuth service

00:20:06.279 --> 00:20:12.870
name will be Google. Our method, we'll do
a "get method" to get the list of blogs. Our

00:20:12.870 --> 00:20:16.850
content type they're expecting will be JSON
from the server. Yes?

00:20:16.850 --> 00:20:19.890
&gt;&gt; Is the post supported?
&gt;&gt; BIDELMAN: Post is supported, yes. That's

00:20:19.890 --> 00:20:25.640
how we did the post the blogger, so, well,
take a look at in a second. The authorization

00:20:25.640 --> 00:20:29.000
type is OAuth, of course, using the OAuth
Proxy, and we're always going to be using

00:20:29.000 --> 00:20:35.200
tokens. So, this gadget is accessing private
data and also writing data as you're going

00:20:35.200 --> 00:20:42.230
to need to be authenticated. And the last
thing you want to do is just make that, hit

00:20:42.230 --> 00:20:47.140
that endpoint that you want to talk to. So
we're getting a list of blogs and then we're

00:20:47.140 --> 00:20:50.520
requesting the results in JSON and then making
the request with the callback we set up here

00:20:50.520 --> 00:20:58.260
and then the params that we setup here.

00:20:58.260 --> 00:21:03.529
So, the pop up handler, the thing that makes
us all work, so we saw the sign in the blogger

00:21:03.529 --> 00:21:07.919
link that was the first thing when the gadget
is being authenticated, we're passing OAuth

00:21:07.919 --> 00:21:16.630
approval URL in there. We're creating an OnClick
handler for that link, or an open function,

00:21:16.630 --> 00:21:22.070
it's just going to open that pop up or show
the waiting state. The user will click grant

00:21:22.070 --> 00:21:26.640
access, the gadget will refresh itself. The
CloseHandler will be invoked, we'll show the

00:21:26.640 --> 00:21:31.380
loading state, we'll try to fetch data for
the first time, and this is a sort of the

00:21:31.380 --> 00:21:35.090
setup code to make all that happen. You can
see that now the gadgets fetch data to an

00:21:35.090 --> 00:21:40.460
authenticated state, and so you're just passing
in a hide, you're passing in a whip for that

00:21:40.460 --> 00:21:49.779
pop up URL and the two handlers there. So
I promise we'd make things a little easier.

00:21:49.779 --> 00:21:54.600
Like I said, we have a JavaScript client library
that's sort of, you know, takes care of, at

00:21:54.600 --> 00:21:58.820
least if you're talking to the Google Data
APIs, has a lot of helpful functionality.

00:21:58.820 --> 00:22:03.330
It can be used for reading and writing data.
It doesn't have to be used in OAuth Proxy

00:22:03.330 --> 00:22:09.100
or iGoogle, this can be used in a web application
using JavaScript, so we have a special AuthSub

00:22:09.100 --> 00:22:17.159
JS for the JavaScript library. It uses cross-domain
and communications and using some Iframe frame

00:22:17.159 --> 00:22:21.559
magic. And what we do is we just wrap the
gadgets I/O make request. So, you can take

00:22:21.559 --> 00:22:26.610
advantage of the libraries helper methods
without having to worry about in the OpenSocial

00:22:26.610 --> 00:22:34.520
APIs and there's more information at JS-client,
that URL there. So, we have the same sort

00:22:34.520 --> 00:22:39.220
of setup code we had in the OpenSocial world,
you know, we have the unregistered handler

00:22:39.220 --> 00:22:44.760
for when the gadget first loads, we're calling
some kind of a knit function, but now, we

00:22:44.760 --> 00:22:49.360
have a little more setup to do. What you want
to do is you want to load the Google Data

00:22:49.360 --> 00:22:55.480
library, so you can include the same common
loader that's used in the Maps API, the Earth

00:22:55.480 --> 00:23:01.980
API, you know, the AJAX libraries, and so
we'll load that using the google.load. We'll

00:23:01.980 --> 00:23:08.179
load the gdata module and then, we'll specify,
optionally specify packages. In this case,

00:23:08.179 --> 00:23:12.429
this example right here, we'll talk to blogger
encounter. You can minimize some overhead

00:23:12.429 --> 00:23:18.299
by requesting certain packages, you can request
the whole library, you can do whatever you

00:23:18.299 --> 00:23:23.890
want depending on what your gadget needs,
your WebAPP needs. So, we'll set an unload

00:23:23.890 --> 00:23:31.409
callback for when the library loads. We're
talking to bloggers, so we'll setup a blogger

00:23:31.409 --> 00:23:35.620
service object and it'll pass the name of
our application, it just takes the form of

00:23:35.620 --> 00:23:42.200
your company name, the name of your gadget
in a sort of a version number. Probably, the

00:23:42.200 --> 00:23:46.460
most important line on this slide if you take
anything away from the slide is this one,

00:23:46.460 --> 00:23:50.470
this is saying "Yes, library I'm going to
be in the OAuth Proxy, we're going to be using

00:23:50.470 --> 00:23:56.919
Google as our service provider." Oops, oops,
oops, oops. And then the last thing we do

00:23:56.919 --> 00:24:00.090
is we fetch data like we did in the OpenSocial
case. So, you can see there's a little more

00:24:00.090 --> 00:24:07.059
setup code, but you'll save some, in the next
slide, you'll see the benefits of this library.

00:24:07.059 --> 00:24:11.500
The last thing you can do, if you're in a
Google Apps domain, you can optionally set

00:24:11.500 --> 00:24:17.059
the HT parameter to your domain, and that'll
provide a more smooth lined user experience

00:24:17.059 --> 00:24:20.429
when the user logs in. They won't have to
choose which accounts to log in, they'll just

00:24:20.429 --> 00:24:30.450
get your Google Apps log-in instead. Okay.
So with the same fetch data we had in OpenSocial,

00:24:30.450 --> 00:24:35.260
you know, we're showing the divs, we're having
the same callback function to create the OAuth

00:24:35.260 --> 00:24:41.929
approval URL on the pop up. We had the gadgets
I/O request parameters before in OpenSocial;

00:24:41.929 --> 00:24:47.890
you can actually just get rid of all those.
And instead just make the call directly to

00:24:47.890 --> 00:24:52.010
the feed we're talking to, the feeds, default
blogs, we're getting the list of blogs. You

00:24:52.010 --> 00:24:56.919
notice we're not appending the ALT JSON anymore
because by default, the library uses JSON.

00:24:56.919 --> 00:25:01.860
So you just can hit that endpoint directly
and then instead of calling gadgets I/O make

00:25:01.860 --> 00:25:06.120
request, you can just use one of library's
helper functions so, you know, get the blog

00:25:06.120 --> 00:25:11.039
feed in this case, and we're passing it to
URL. It's important to know that the callback

00:25:11.039 --> 00:25:15.270
that will process the results from the server
and the error handler is the same callback

00:25:15.270 --> 00:25:19.789
because we're trying to, we're fetching data
when the gadget loads and also when they're

00:25:19.789 --> 00:25:23.260
come back from the approval page. So we're
going to use the same URL to do both, sorry,

00:25:23.260 --> 00:25:31.640
excuse me, the same function to, to do both.
So creating data, as I said the library can

00:25:31.640 --> 00:25:39.830
be used to read and write data using JavaScript,
so in that blogger example, what I did was

00:25:39.830 --> 00:25:45.659
I added just a post data method. Right, we're
passing a blog that we want to post to and

00:25:45.659 --> 00:25:51.029
then we're just setting up a new entry, in
this case gdata blogger BlogPostEntry and

00:25:51.029 --> 00:25:56.500
it's just JSON, so we're setting a title,
you know, we're setting a content, a couple

00:25:56.500 --> 00:26:01.120
of categories maybe for labels and optionally,
if you want to mark that blogger entry that

00:26:01.120 --> 00:26:08.149
new post as a draft or not. So we referenced
that new library, in the blogger insert entry

00:26:08.149 --> 00:26:15.399
function, the link we'll post to is the blog's
edit link, the entry post link and then, we'll

00:26:15.399 --> 00:26:20.130
reference that new entry that we just created
out here and we'll have a handle insert method

00:26:20.130 --> 00:26:26.610
and the HandleError method, those are on the
next slide. So just for your reference, this

00:26:26.610 --> 00:26:31.549
is how we actually got this red blog here.
We just did, remember the get blog feed with

00:26:31.549 --> 00:26:37.490
the blog list URL. We process that response
from the server and just posted to that the

00:26:37.490 --> 00:26:47.539
first entry we found, the first entry being
the first blog.
So a little cleaner, a little cleaner than

00:26:47.539 --> 00:26:52.020
the OpenSocial world, if you're using Google
Data APIs, this code would be much more verbose

00:26:52.020 --> 00:27:00.809
if you're using OpenSocial, obviously you
can't take advantage of the library's functions,

00:27:00.809 --> 00:27:01.850
if you're not using the library and the library
does the JSON XML to Atom XML back to JSON

00:27:01.850 --> 00:27:06.610
for you. We'll do questions then. The handle
insert and handle error methods both pretty

00:27:06.610 --> 00:27:12.630
simple, right? We're just, just displaying
the link to the blog we posted to the user.

00:27:12.630 --> 00:27:17.940
This is the entry that was posted, you'll
get that in the response from the server,

00:27:17.940 --> 00:27:20.409
and the HTML link is the actual link to the
blogs, if you visit, in the website that would

00:27:20.409 --> 00:27:26.690
be the same URL there. The HandleError method
is just presenting, you know, a meaningful

00:27:26.690 --> 00:27:28.220
alert message, the user is saying something,
something went wrong or the server doesn't

00:27:28.220 --> 00:27:34.580
understand your entry or what not. So, I think
I'm going to hand it back to Monsur now who's

00:27:34.580 --> 00:27:37.710
going to talk a little bit more what's going
on behind-the-scenes and how all of these

00:27:37.710 --> 00:27:40.769
OAuth Proxy magic is happening, let's hear
it.

00:27:40.769 --> 00:27:47.230
&gt;&gt; HOSSAIN: All right, thanks Eric. So, it's
all a little bit about how to setup your gadget.

00:27:47.230 --> 00:27:52.519
Now we're going to talk about what's going
on behind-the-scenes. So, excuse me, we have

00:27:52.519 --> 00:27:56.539
this, this single line from the JavaScript
Client basically with the URL, and we have

00:27:56.539 --> 00:28:01.600
our two handlers in our particular example,
the handlers are the same but they could also

00:28:01.600 --> 00:28:06.710
be different because there's success handler
and error handler. And then, basically, these

00:28:06.710 --> 00:28:13.299
are going to get wrapped up and it's going
to call gadgets.io.makerequest like we saw

00:28:13.299 --> 00:28:19.690
earlier, so, here we have the gadgets.io.makerequest
call. Notice some modified callback here gadgets.io.makerequest

00:28:19.690 --> 00:28:27.260
only accepts one callback. So, what the Google
Data JavaScript client does is that it takes

00:28:27.260 --> 00:28:30.580
those that success callback and that error
callback and wraps it into one and then it

00:28:30.580 --> 00:28:35.080
just batches it accordingly whether it gets
a successful result or an error result. Also

00:28:35.080 --> 00:28:40.620
notice we have the OAuth parameters here which
Eric also showed us earlier. So that also

00:28:40.620 --> 00:28:44.580
gets filled in for you because the JavaScript
client understands, for example, whether or

00:28:44.580 --> 00:28:50.399
not it's doing a get or a post, and all of
the rest of the variables are pretty much

00:28:50.399 --> 00:28:58.230
the same. So, what happens is this gadgets.io.makerequest
is going to end up making an XML, HTTP request

00:28:58.230 --> 00:29:05.049
back to the iGoogle server. So that XML HTTP
request is always going to be a post, and

00:29:05.049 --> 00:29:10.460
that's just the way that to make request call
works. Notice here gmodules.com domain which

00:29:10.460 --> 00:29:16.409
is basically the same domain that the gadget
lives on. Within this post, you're going to

00:29:16.409 --> 00:29:20.649
have a couple of items in the body of the
request, for example, you have the URL which

00:29:20.649 --> 00:29:25.130
is going to be the URL you want to make the
request to. You've got the original HTTP method

00:29:25.130 --> 00:29:30.630
and you post data that goes along with it
and so on and so forth. So, basically, when

00:29:30.630 --> 00:29:35.110
the iGoogle server, this is all going to go
to the iGoogle server; whenever we see this

00:29:35.110 --> 00:29:39.320
request, it's going to basically unwind the
request and say "Okay, this is a request that

00:29:39.320 --> 00:29:44.340
needs to go to blogger.com, it needs to be
a get request and so on" and it's actually

00:29:44.340 --> 00:29:49.710
going to make this request to blogger. When
blogger gets his request, it has one of two

00:29:49.710 --> 00:29:54.470
possible responses, it could say "Oh, you
know, I've got the OAuth token here, everything's

00:29:54.470 --> 00:30:00.330
in good shape, here's the blogger data for
the user." However, if the user isn't logged

00:30:00.330 --> 00:30:05.049
in using OAuth, then blogger server is going
to say "Hey, wait a minute, this user doesn't

00:30:05.049 --> 00:30:10.029
have permission yet, and it's going to send
back a failure response. And that failure

00:30:10.029 --> 00:30:16.340
response looks something like this, so it's
going to be a JSON object and all of the request,

00:30:16.340 --> 00:30:21.380
other responses back to gadgets.io.makerequest,
are going to be JSON objects. However, notice

00:30:21.380 --> 00:30:27.450
that the body of this response is empty and
instead of a body, we have this OAuth approval

00:30:27.450 --> 00:30:32.409
URL here, and the OAuth approval URL is going
to be the same URL that we saw in step two

00:30:32.409 --> 00:30:37.000
of the OAuth process, and it's going to be
the, the pop up that the gadgets are going

00:30:37.000 --> 00:30:41.519
to show in order for the user to authorize
with. So, new gadgets are just going to see

00:30:41.519 --> 00:30:46.000
this OAuth approval URL and as Eric's code
showed earlier, it's going to show the pop

00:30:46.000 --> 00:30:52.169
up accordingly. So, once the user, you know,
authenticates, authorizes, the gadgets are

00:30:52.169 --> 00:30:57.840
going to try to make the request again. And
this time since the user is properly authorized,

00:30:57.840 --> 00:31:02.230
they're going to get back a successful response
from the blogger server, and a successful

00:31:02.230 --> 00:31:06.460
response is going to look something like this.
You still have the JSON object but in the

00:31:06.460 --> 00:31:10.769
body field, you actually have the JSON of
the blogger response, so that's going to have

00:31:10.769 --> 00:31:15.990
your feeds and your entries and all that kind
of stuff. And so, that's kind of a sense what's

00:31:15.990 --> 00:31:22.850
going on behind-the-scenes and Eric's going
to talk about a few more demos.

00:31:22.850 --> 00:31:32.159
&gt;&gt; BIDELMAN: So, we saw blogger gadget but
there's, you know, 14, 15, 16 Google Data

00:31:32.159 --> 00:31:37.299
APIs now, analytics and, and the Maps Data
API being the, the latest additions. So we

00:31:37.299 --> 00:31:43.610
can talk to any of these APIs using or any,
any as mentioned by Monsur, any OAuth service

00:31:43.610 --> 00:31:51.549
provider for that matter using OpenSocial.
So there's a base example we can show and

00:31:51.549 --> 00:32:04.039
there's also a calendar gadget we can show.
[pause] So, this is an example for counter,

00:32:04.039 --> 00:32:07.750
you know, I've used the same sort of logic
and setup code, my contents, my divs and then

00:32:07.750 --> 00:32:13.880
the sign of the calendar link using the same
creep pop up handler. This time, we're accessing

00:32:13.880 --> 00:32:19.669
the calendar scope in that OAuth request URL
instead of the bloggers scope. We'll grant

00:32:19.669 --> 00:32:25.159
access and it's a very interesting gadget,
it just gives a list of these test accounts,

00:32:25.159 --> 00:32:30.710
list of calendars. But, it's literally the,
you know, the same idea for any of these APIs

00:32:30.710 --> 00:32:34.380
using the JavaScript client library. I think
I wrote this in probably five minutes as I

00:32:34.380 --> 00:32:41.389
pored it over the blogger gadget, so just
showing you how easy it is and how versatile

00:32:41.389 --> 00:32:47.960
it is. Another example using Google Base,
and you'll notice, I didn't have to approve

00:32:47.960 --> 00:32:53.419
access to this one because Google Base actually
has public feeds. This does use the JavaScript

00:32:53.419 --> 00:32:56.990
client library but I didn't have to go through
the OAuth dance, so this is another sort of

00:32:56.990 --> 00:33:05.179
example of things you can do. This gadget
uses settings on, I'm searching for software

00:33:05.179 --> 00:33:10.919
job titles around the mountain view area,
you know, there are 75,000 and above. So,

00:33:10.919 --> 00:33:14.490
if I save that settings, we'll get some results
and each of these is just one of the entries

00:33:14.490 --> 00:33:15.019
based that somebody posted, and there's pagination
in the Google Data feeds so you can paginate

00:33:15.019 --> 00:33:24.039
to these results. So, you can provide some
pretty powerful gadgets using the library

00:33:24.039 --> 00:33:33.399
in little or no time, and both of those are
open source, those two URLs there if you're

00:33:33.399 --> 00:33:41.100
interested in the source code. All right,
to wrap things up, we saw a lot of technology

00:33:41.100 --> 00:33:44.260
there. We, you know, introduced OAuth, we
talked about a little bit about OAuth and

00:33:44.260 --> 00:33:50.090
the basics behind it. We talked about OpenSocial,
how to set up a gadget to use the OAuth Proxy

00:33:50.090 --> 00:33:55.690
in iGoogle, we talked about the Google Data
APIs and then we saw the same sort of JavaScript

00:33:55.690 --> 00:34:01.080
to talk to Google Data APIs using the JavaScript
client library. We talked about how OAuth

00:34:01.080 --> 00:34:05.519
Proxy, Monsur talked about how the OAuth Proxy
handles theses requests for us and we don't

00:34:05.519 --> 00:34:09.290
have to worry about any crypto, you know,
token management, whatsoever. We just literally

00:34:09.290 --> 00:34:16.860
call the APIs, we post data, you know, we
update data, we delete data from the APIs

00:34:16.860 --> 00:34:20.580
and then we talked about the server side of
things a little bit. So, as always, we have

00:34:20.580 --> 00:34:24.700
a great list of resources for you, there's
information on the JavaScript client library

00:34:24.700 --> 00:34:30.010
and how you can use that within a WebAPP or,
you know, the OAuth Proxy in iGoogle and the

00:34:30.010 --> 00:34:36.080
gadget space. There's a comprehensive article
on writing OAuth gadgets, this is all sort

00:34:36.080 --> 00:34:40.840
of the OAuth goodness and OAuth Proxy goodness
in that article there, and there's code samples.

00:34:40.840 --> 00:34:45.260
There's example gadgets, there's example WebAPPs
so you can get quickly started with--in the

00:34:45.260 --> 00:34:52.530
different APIs, if you're interested. All
right. So, I think we have a Google moderator

00:34:52.530 --> 00:34:57.070
link and, again, it's I/O OAuth gadgets. If
you would like to ask questions on moderator,

00:34:57.070 --> 00:35:02.490
feel free to also step to the mic so we can,
sorry, so we can hear you too on the video

00:35:02.490 --> 00:35:23.170
and we'll also be available afterwards if
you want to come up and talk to us. Thank

00:35:23.170 --> 00:35:29.650
you.
&gt;&gt; Thank you for a great presentation.

00:35:29.650 --> 00:35:30.360
&gt;&gt; BIDELMAN: Thank you.
&gt;&gt; It's a several part question. We saw the

00:35:30.360 --> 00:35:30.630
ability to post and also read the comments
of a blog, how about drilling into, searching

00:35:30.630 --> 00:35:30.880
into that blog on a particular discussion
thread and reading from within that discussion

00:35:30.880 --> 00:35:37.700
thread or posting to inside that discussion
thread, is it just generally to a blog, is

00:35:37.700 --> 00:35:40.590
that their ability? And, the second part,
second question is how does OAuth integrate

00:35:40.590 --> 00:35:46.950
given the fact that for instance, for enterprises,
we have our own [INDISTINCT] or internal LTAP.

00:35:46.950 --> 00:35:54.720
Do we now, does it integrate, given that OAuth
is hosted by iGoogle and how? And, or do we

00:35:54.720 --> 00:36:00.850
now have to create two different users accounts
onto separate systems separated from each

00:36:00.850 --> 00:36:05.230
other?
&gt;&gt; BIDELMAN: All right, I can answer your

00:36:05.230 --> 00:36:12.170
first one because I remember that one. So,
you can do using OAuth and three legged OAuth

00:36:12.170 --> 00:36:17.240
as we saw in this, the examples, you can do
anything the APIs can do. So, in the case

00:36:17.240 --> 00:36:23.590
of blogger, yes, you can, you know, post comments,
you can retrieve the comments. Each blog has

00:36:23.590 --> 00:36:26.990
a comments feed that you can use to get that
and then post and update comments and what

00:36:26.990 --> 00:36:32.670
not, and same thing with the other APIs. So,
anything you can do in the APIs using your

00:36:32.670 --> 00:36:37.690
server, you can do using OAuth and the OAuth
Proxy.

00:36:37.690 --> 00:36:48.960
&gt;&gt; So, that means that you have search capability
within the blog? So, for instance, you can

00:36:48.960 --> 00:36:59.270
key on for certain words, you can sort that
and you can display in a certain form? Is

00:36:59.270 --> 00:37:01.410
that built in to the protocol or is that something
that you have to handle in your code?

00:37:01.410 --> 00:37:03.630
&gt;&gt; HOSSAIN: Yes, so, it's probably something
you have to handle in your code. I mean, the

00:37:03.630 --> 00:37:05.330
APIs expose underlying functionality that
blogger itself exposes, so I mean, there isn't

00:37:05.330 --> 00:37:08.720
really a way to do that. I mean, you need
basically to grab the entries yourself and

00:37:08.720 --> 00:37:12.700
then add that capability on it yourself.
&gt;&gt; BIDELMAN: So, yeah, I just add that each

00:37:12.700 --> 00:37:17.490
of the API is, you know, its own query model
that the Google data protocol has a standard

00:37:17.490 --> 00:37:22.300
set of protocol parameters that you can use,
search full text and title, search on title

00:37:22.300 --> 00:37:27.490
and full text. I'm not sure what blogger actually
supports if they support full text search

00:37:27.490 --> 00:37:29.950
on, you know, the body of the contents of
this other blog.

00:37:29.950 --> 00:37:32.050
&gt;&gt; Other blog like gquery support or anything
like that?

00:37:32.050 --> 00:37:33.580
&gt;&gt; BIDELMAN: No.
&gt;&gt; No? Okay.

00:37:33.580 --> 00:37:38.290
&gt;&gt; BIDELMAN: No. They're protocol.
&gt;&gt; HOSSAIN: And for your second question.

00:37:38.290 --> 00:37:42.510
So, within your file URL, are you yourself
running the iGoogle server or the OpenSocial

00:37:42.510 --> 00:37:48.570
server, see, if you're hosting it all internally
then you'd be able to configure the OAuth

00:37:48.570 --> 00:37:51.870
Proxy yourself and…
&gt;&gt; So, if we were to host it internally, then,

00:37:51.870 --> 00:37:58.700
does it have an interface to A.D.? Does it
have an interface to LTAP where it can actually

00:37:58.700 --> 00:38:05.910
go and ask for credentials from that system
and pull them in to URL, or do we still have

00:38:05.910 --> 00:38:11.680
to enter into two separate xylo systems?
&gt;&gt; HOSSAIN: Yeah, I don't believe the, that

00:38:11.680 --> 00:38:12.100
sort of capability is there right now. So,
yeah, users will have to authenticate with

00:38:12.100 --> 00:38:12.250
OAuth as long as, as a separate kind of interaction
with the gadget.

00:38:12.250 --> 00:38:12.640
&gt;&gt; All right. Thank you.
&gt;&gt; I'm interested in the third party servers

00:38:12.640 --> 00:38:18.120
that you have for the OAuth. Do you have an
estimate as to what percentage of the gadgets

00:38:18.120 --> 00:38:41.430
that you have are powered by third party servers
or is it mostly Google stuff?

00:38:41.430 --> 00:38:52.290
&gt;&gt; HOSSAIN: Do you mean the gadgets in general
like service providers, OAuth Providers?

00:38:52.290 --> 00:38:55.340
&gt;&gt; Exactly. OAuth Service Poviders.

00:38:55.340 --> 00:38:59.480
&gt;&gt; BIDELMAN: No idea the stats up on top of
my head but I know for a fact that, you know,

00:38:59.480 --> 00:39:03.670
I've created a number of different OAuth service
provider, gadget, MySpace, you know, Netflix

00:39:03.670 --> 00:39:09.310
has an OAuth, API, Twitter has an OAuth API,
and you can, what you can do is you can register,

00:39:09.310 --> 00:39:15.400
actually on that article explains the writing
OAuth gadgets article explains how to register

00:39:15.400 --> 00:39:20.410
a gadget that doesn't talk to Google. So,
if you're talking let's say MySpace, you know,

00:39:20.410 --> 00:39:24.830
you register your consumer key and consumer
seeker with us, I think it's just an email

00:39:24.830 --> 00:39:32.460
and then, so then you can use the, one of
their APIs, their OAuth endpoints instead

00:39:32.460 --> 00:39:39.660
of Google's. Does that answer your question?
&gt;&gt; Yes, it does. What if I wanted to implement

00:39:39.660 --> 00:39:44.550
my own OAuth server? Is there a service that
I can go to, to help me do that or do I have

00:39:44.550 --> 00:39:47.550
to set up my server that does the implementation?
I mean, you mentioned MySpace and Twitter…

00:39:47.550 --> 00:39:50.310
&gt;&gt; BIDELMAN: Yeah, if you wanted to actually
issue tokens and be a service provider?

00:39:50.310 --> 00:39:52.280
&gt;&gt; Yes, yes.
&gt;&gt; BIDELMAN: As far as, I think there's a

00:39:52.280 --> 00:40:00.520
few, maybe, OpenSocial projects that use AppEngine
to do that and maybe you can look at that

00:40:00.520 --> 00:40:01.580
code.
&gt;&gt; HOSSAIN: You can also, you go to oauth.net,

00:40:01.580 --> 00:40:02.280
you could, there's a bunch OpenSocial libraries
that you could use depending on what language

00:40:02.280 --> 00:40:04.750
you're programming in. And I think most of
them handle both server and client side of

00:40:04.750 --> 00:40:13.830
doing OAuth.
&gt;&gt; So, it really want to, all I want to do

00:40:13.830 --> 00:40:21.660
is give users of my gadget access to their
data that stored of my server using OAuth

00:40:21.660 --> 00:40:22.190
as opposed to on Blogger or My Space.
&gt;&gt; HOSSAIN: Right.

00:40:22.190 --> 00:40:22.770
&gt;&gt; BIDELMAN: Definitely. Yeah, like Monsur
said those libraries have server code as well

00:40:22.770 --> 00:40:41.390
as client code so. Show the monitor. Where
can we find guidance for integrating GData

00:40:41.390 --> 00:40:51.820
APIs into non-web clients, eg.netapps on windows?
&gt;&gt; HOSSAIN: So, if you go to the main, what's

00:40:51.820 --> 00:41:06.620
the link again? If you go to the main iGoogle
Data APIs site, its code., oops, code.google.com/api/gdata,

00:41:06.620 --> 00:41:14.470
under the "Docs" section, and right here,
on the left hand side, there's a "Client Libraries"

00:41:14.470 --> 00:41:21.910
link. This will kind of give you an idea of
all the client libraries that are available

00:41:21.910 --> 00:41:29.230
under GData so its Java.net, JavaScript, PHP,
Python, Objective-C, so we kind of got a sense

00:41:29.230 --> 00:41:34.820
of all the libraries we provide right there
so that's a good place to start and the documentations,

00:41:34.820 --> 00:41:42.820
samples and reference guides for all in Client
Libraries.

00:41:42.820 --> 00:41:45.950
&gt;&gt; BIDELMAN: Okay.
&gt;&gt; HOSSAIN: Is there any other questions?

00:41:45.950 --> 00:41:49.170
Okay, we're good.
&gt;&gt; BIDELMAN: All right, well, thank you. We

00:41:49.170 --> 00:41:50.660
know this is the last session of the day.
Thanks for coming.

00:41:50.660 --> 00:41:50.820
&gt;&gt; HOSSAIN: Thank you.

