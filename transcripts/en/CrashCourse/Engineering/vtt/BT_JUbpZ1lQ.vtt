WEBVTT
Kind: captions
Language: en

00:00:03.020 --> 00:00:05.260
Engineers often worry about laws.

00:00:05.260 --> 00:00:09.480
Not necessarily the legal system kind, although
most engineers have to consider those as well!

00:00:09.480 --> 00:00:12.360
What I mean is laws, like the laws of physics.

00:00:12.360 --> 00:00:15.240
Those laws describe limits on the sorts of
things that are possible;

00:00:15.240 --> 00:00:19.680
for example, there’s no way of getting around the
conservation of momentum that we know of!

00:00:19.680 --> 00:00:24.560
But outside of physics, there’s one law
that keeps many an engineer up at night:
Murphy’s Law.

00:00:24.560 --> 00:00:31.460
Murphy’s so-called ‘law’ is more of a
tongue-in-cheek proverb, named after
aerospace engineer Edward A. Murphy.

00:00:31.460 --> 00:00:35.980
Simply put, it says:
“Anything that can go wrong will go wrong.”

00:00:35.980 --> 00:00:39.080
That makes it sound like all attempts at engineering
are doomed.

00:00:39.080 --> 00:00:43.900
But we’re going to find a way to use Murphy’s
law to make us better engineers.

00:00:43.900 --> 00:00:54.320
[Theme Music]

00:00:54.320 --> 00:00:57.180
Murphy’s “law” isn’t a literal statement.

00:00:57.180 --> 00:01:00.780
Your calculator isn’t going to spontaneously
combust every time you use it.

00:01:00.780 --> 00:01:05.200
But, keeping in mind all the different ways
mishaps can jeopardize an engineering process,

00:01:05.200 --> 00:01:09.180
as Murphy’s Law tells us they can, is a
good reminder to stay vigilant.

00:01:09.180 --> 00:01:15.260
Even if many parts of a process are in flux
or changing, you need a system to keep things
stable and reliable.

00:01:15.260 --> 00:01:19.940
That same system should also prevent mistakes
from spiraling into a major disaster!

00:01:19.940 --> 00:01:26.880
To do this, engineers use what’s called process
control: an automated system that takes a look
at what’s going on in your process,

00:01:26.880 --> 00:01:31.000
and makes adjustments based on those
observations to keep everything on track.

00:01:31.000 --> 00:01:35.140
The aspects of the system your process control
looks at are called parameters,

00:01:35.140 --> 00:01:40.440
while the outputs that get changed as a result of
those observations are called controlled variables.

00:01:40.440 --> 00:01:44.980
To see all this in action and understand why
process control matters, consider cheese.

00:01:44.980 --> 00:01:52.220
A few years ago, a cheese company based in
Toronto ran into trouble when some of the vats they
used for storing milk started having problems.

00:01:52.220 --> 00:01:56.480
The vats needed a certain amount of milk in
them for the cheese making process.

00:01:56.480 --> 00:02:03.000
Like many industrial processes, precision
is what allows high quality products to be
manufactured with consistency.

00:02:03.000 --> 00:02:04.750
And no one wants bad cheese!

00:02:04.750 --> 00:02:11.840
Too little milk in the tank, and it would affect
production further down the line, perhaps leading
to a loss of the entire production run.

00:02:11.849 --> 00:02:15.040
Too much milk in the vat, and some of it would
start to spill over.

00:02:15.040 --> 00:02:17.040
At first, that might not seem like a big deal.

00:02:17.040 --> 00:02:23.260
Even if it did spill over, some of it would be
directed into the drains leading to the sewer,
removing it from the factory floor.

00:02:23.260 --> 00:02:28.780
The rest could be cleaned up and, as in
the case of too little milk, you might need
to write off this production run.

00:02:28.780 --> 00:02:30.320
But that’s not the worst of it!

00:02:30.320 --> 00:02:32.020
Cheese is made using bacteria.

00:02:32.020 --> 00:02:38.780
If the milk containing that bacteria
overflows from the vat and into the drains,
it could end up in the sewer systems.

00:02:38.780 --> 00:02:44.320
And at the end of the sewer line would be
a waste treatment plant that uses its own 
bacteria to treat wastewater!

00:02:44.320 --> 00:02:49.580
If the bacteria in the cheese began to kill
off the plant’s bacteria, it would jeopardize
the whole system,

00:02:49.580 --> 00:02:54.920
perhaps even threatening the water supply
of an entire urban area, like the city of Toronto.

00:02:54.920 --> 00:02:59.680
This sounds like exactly the sort of catastrophe
Murphy’s Law tries to warn us about!

00:02:59.680 --> 00:03:05.280
Thankfully, process control is exactly the
sort of thing that prevents both major and
minor problems like these.

00:03:05.280 --> 00:03:13.480
What was happening with the cheese factory was
that the inputs to the system of milk vats needed to be
controlled to maintain the level of the contents inside.

00:03:13.480 --> 00:03:20.220
In the language of process control, one of
the parameters involved in making the product,
in this case, the level of milk in the tank,

00:03:20.220 --> 00:03:26.440
is sensitive to the controlled variables of
the process, which are the amounts of all
the ingredients pumped into the tank.

00:03:26.440 --> 00:03:34.280
The failure was that the system that automatically adjusted the flow rate of the ingredients in response to the measurements made in the tank wasn’t working as intended.

00:03:34.280 --> 00:03:42.040
As we’ve mentioned, process control uses
measurements of a process’s parameters to
make changes to its controlled variables.

00:03:42.040 --> 00:03:49.040
That might sound a little abstract, but various
types of process control are currently in use around
us, making the world run smoothly.

00:03:49.040 --> 00:03:57.580
When you set the thermostat in a building, you’re
essentially programming a process control system
to keep it at a particular temperature – say, 25°C.

00:03:57.580 --> 00:04:04.540
That’s the setpoint – the number that
represents the target output or operating
state you want a process to achieve.

00:04:04.540 --> 00:04:10.820
For example, after you set it, the thermostat
then turns the furnace or the air conditioner
on or off,

00:04:10.820 --> 00:04:15.080
to heat up or cool down the environment
and maintain it at 25 degrees.

00:04:15.080 --> 00:04:22.440
The controlled variable here would be whether the
furnace was on or off, which has a direct effect on the
parameter you’re interested in, the temperature.

00:04:22.440 --> 00:04:30.120
Other parameters you might want process control to
be sensitive to are things like the pressure in an
oxygen tank, or the force being applied to something.

00:04:30.129 --> 00:04:33.840
You can even use it to control a mixture’s
chemical properties, like acidity.

00:04:33.840 --> 00:04:37.280
Because of its broad uses, process control
is everywhere.

00:04:37.280 --> 00:04:43.580
It’s a major consideration in chemical,
electrical, industrial, and mechanical engineering,
just to name a few.

00:04:43.580 --> 00:04:52.060
The beauty of it is that along with avoiding big mistakes,
process control lets you create products to particular
standards with consistently high quality and precision.

00:04:52.060 --> 00:04:58.920
Plus, monitoring and controlling things so
carefully can help you find new ways to use
materials and energy more efficiently.

00:04:58.920 --> 00:05:03.260
In modern control systems, measurements are
taken as electronic readings from sensors,

00:05:03.260 --> 00:05:08.000
which are delivered to a computerized
control system, called well, the controller.

00:05:08.000 --> 00:05:13.080
The controller also sends signals to the machinery
responsible for changing the controlled variables.

00:05:13.080 --> 00:05:16.020
This normally means the operation of things
like valves or switches.

00:05:16.020 --> 00:05:22.720
There are two main kinds of process control
to consider: feedback, and feedforward – which,
yes, is a real word.

00:05:22.720 --> 00:05:26.560
To see this in action, let’s revisit our
old friend the heat exchanger!

00:05:26.560 --> 00:05:32.520
Heat exchangers transfer thermal energy
from one fluid to another to raise or cool
the temperature of one of the fluids.

00:05:32.520 --> 00:05:39.240
In a shell-and-tube exchanger, you run one
fluid through a series of pipes to exchange heat
through the pipes, with the surrounding fluid.

00:05:39.240 --> 00:05:46.280
Let’s say you’re using steam in the pipes to
raise the temperature of oil to 200°C before
it flows into an engine.

00:05:46.280 --> 00:05:51.460
At the input end for the steam, there’s
an inlet valve that controls how much steam
is entering the exchanger.

00:05:51.460 --> 00:05:58.220
The goal is to make sure the oil leaves the
heat exchanger at a given temperature – 200 °C
– that’s the setpoint.

00:05:58.220 --> 00:06:02.620
The controller then adjusts the machinery to
maintain the setpoint condition for the process –

00:06:02.620 --> 00:06:08.300
in this case, by controlling the steam inlet valve
to maintain the oil’s temperature at 200 degrees.

00:06:08.300 --> 00:06:10.920
One of the ways you can do this is with feedback
control.

00:06:10.920 --> 00:06:15.440
First, you put a sensor to measure temperature
at the output end of the exchanger for the fluid.

00:06:15.440 --> 00:06:20.639
In feedback control, the sensor will continuously
feed temperature data back to the controller.

00:06:20.640 --> 00:06:25.240
The difference between the observed temperature
of the output and the setpoint is called the error.

00:06:25.240 --> 00:06:33.920
The controller tries to minimize the error by controlling
the inlet valve at the start of the process to increase or
decrease the amount of steam entering the exchanger,

00:06:33.920 --> 00:06:36.820
depending on whether the error is negative or positive.

00:06:36.820 --> 00:06:43.660
If the error is negative, that means the temperature
is too low, so the controller will open the valve a
little to let more steam through.

00:06:43.660 --> 00:06:46.220
If the error is positive, it will do the opposite.

00:06:46.220 --> 00:06:48.800
On the other hand, you could also use a feedforward
system.

00:06:48.800 --> 00:06:52.820
In that case, you’d be measuring the input
variables of the process.

00:06:52.820 --> 00:06:58.680
In the heat exchanger, the sensors would
measure the amount of steam and fluid flowing
in, and the fluid’s starting temperature.

00:06:58.680 --> 00:07:02.860
Then you’d model what you think the output
temperature will be, based on those inputs.

00:07:02.860 --> 00:07:09.820
In this case, you’d need to know things like the
specific heat of the fluids and the heat conductance
between the steam, the pipes, and the oil.

00:07:09.820 --> 00:07:17.400
The modeling is often the hardest part, but once it’s
done, all the input parameters provide a decent estimate
of what the output temperature of the fluid will be.

00:07:17.400 --> 00:07:22.480
What’s more, from the model, you can then
work out the best flow rate for the steam,
given all the other inputs.

00:07:22.480 --> 00:07:30.420
In this case, the difference between the measured flow rate and the flow rate needed to obtain the setpoint temperature would be an example of what’s called the disturbance.

00:07:30.420 --> 00:07:37.860
The disturbance is the difference between what
the input parameters should be and what they really
are – like the output error in a feedback system.

00:07:37.860 --> 00:07:43.980
All the sensor data is fed forward to the
controller to compare the modeled output
temperature to the setpoint.

00:07:43.980 --> 00:07:52.160
Depending on the disturbance, it operates the valve
similarly as before, until the inputs are set according to
the model to make the oil’s temperature hit the setpoint.

00:07:52.160 --> 00:07:55.220
On their own, both of these approaches have
some flaws.

00:07:55.220 --> 00:08:00.540
In a feedback control system, you have to
wait until something has already gone wrong
in order to fix it!

00:08:00.540 --> 00:08:07.180
If a lot of errors are creeping into the process
very quickly, a feedback system might not respond
fast enough to change the inputs.

00:08:07.180 --> 00:08:13.180
On the other hand, a feedforward system relies
on having to model everything going on inside
the heat exchanger.

00:08:13.180 --> 00:08:16.800
You can’t be sure that your model is perfectly
predicting the output temperature,

00:08:16.800 --> 00:08:21.600
and even if it’s pretty close, it usually takes a lot
of work to get the model right in the first place.

00:08:21.600 --> 00:08:25.900
In real life, often the most sensible thing
to do is just combine the two approaches.

00:08:25.900 --> 00:08:30.240
The feedforward controller can help you get
the inputs as close to what you need as possible,

00:08:30.240 --> 00:08:35.800
while the feedback controller can correct
for the flaws in the model by measuring the
actual output temperature.

00:08:35.800 --> 00:08:39.740
You could even implement something called
cascade control as an additional measure.

00:08:39.740 --> 00:08:44.920
It helps you make sure that turning the valve
influences the steam flow rate in the way
you expect.

00:08:44.920 --> 00:08:52.080
To do this, you put in a separate controller
and sensor that measures the steam flow as the
valve is opened or closed by a certain amount.

00:08:52.080 --> 00:08:59.300
Otherwise, if the steam is at a higher pressure
than expected, opening the valve might increase the
flow rate of the steam by more than you predicted!

00:08:59.300 --> 00:09:03.000
The cascade control system puts checks in
place to prevent that from happening.

00:09:03.000 --> 00:09:08.640
With the feedback, feedforward, and cascade
systems working together, in what’s called an
integrated approach,

00:09:08.640 --> 00:09:15.740
you can keep the oil’s temperature steady at the
setpoint, despite all the little ways Murphy’s law
could have made things go off the rails.

00:09:15.740 --> 00:09:18.940
You can apply the same thinking to the milk
tanks in the cheese factory.

00:09:18.940 --> 00:09:26.400
To keep everything perfectly balanced, the sensor
in the tank was meant to measure the milk level, while
other sensors measured the flow rate of ingredients.

00:09:26.400 --> 00:09:29.220
The controller would then adjust the flow
rate as needed.

00:09:29.220 --> 00:09:36.640
But because the sensor – in this case a gauge
in the tank – was misreading the level of milk, the
entire system was being thrown off.

00:09:36.640 --> 00:09:41.880
After fixing it to take accurate readings,
the factory’s process control started working
properly again.

00:09:41.880 --> 00:09:44.120
And the water in Toronto stayed nice and clean.

00:09:44.120 --> 00:09:52.860
So while Murphy’s law might paint a pessimistic picture
of engineering, process control steps in as the linchpin
that keeps everything from spiraling out of control.

00:09:52.860 --> 00:09:53.980
Crisis averted!

00:09:53.980 --> 00:10:01.840
In this episode, we looked at process control
systems, where automated controllers change process
variables in response to measured parameters.

00:10:01.840 --> 00:10:07.100
We looked at how feedforward and feedback
systems minimize errors and disturbances,

00:10:07.100 --> 00:10:14.900
and saw how integrating them both with the final
check of cascade control creates a system made to
handle uncertainty the world throws its way.

00:10:14.900 --> 00:10:18.340
Next time, we’re looking at how systems react to forces,

00:10:18.340 --> 00:10:24.340
when we delve into the world of statics and
dynamics and how they affect all the structures
an engineer might create.

00:10:24.340 --> 00:10:28.120
Crash Course Engineering is produced in association
with PBS Digital Studios.

00:10:28.130 --> 00:10:29.589
Wanna keep learning?

00:10:29.589 --> 00:10:37.440
Check out Global Weirding, which explores
the intersection among climate, politics, and religion,
hosted by climate scientist Katharine Hayhoe.

00:10:37.440 --> 00:10:44.500
Crash Course is a Complexly production and this
episode was filmed in the Doctor Cheryl C. Kinney
Studio with the help of these wonderful people.

00:10:44.500 --> 00:10:48.640
And our amazing graphics team is Thought Cafe.

