WEBVTT
Kind: captions
Language: en

00:00:00.021 --> 00:00:04.553
Let's step back for a bit to remind us why we're focusing on memory the way we are.

00:00:04.553 --> 00:00:07.409
Our overarching goal, of course, is just to make code fast.

00:00:07.409 --> 00:00:12.953
So we say great, GPUs are fast, let's use those. But why are they fast?

00:00:12.953 --> 00:00:18.482
Gpus are fast, first, because they are massively parallel, with hundreds or thousands of

00:00:18.482 --> 00:00:23.054
processors on a single chip, working for you to solve your problem, but also because they have

00:00:23.054 --> 00:00:28.253
an extremely high bandwidth memory system to feed those massively parallel processors, okay?

00:00:28.253 --> 00:00:33.819
So if the memory system can't deliver data to all of these processors

00:00:33.819 --> 00:00:37.788
and store results from all those processors, then we're not going to get the full speed out of our GPU.

00:00:37.788 --> 00:00:40.935
And that's why, on a memory limited kernel like transpose,

00:00:40.935 --> 00:00:45.612
our subgoal is really to utilize all the available memory bandwidth.

00:00:45.612 --> 00:00:51.920
Hence our focus on global memory coalescing, DRAM utilization, and so on.

00:00:51.920 --> 00:00:54.692
Now I really want to ask a question a little bit more rigorously.

00:00:54.692 --> 00:00:58.172
What do we mean by utilizing all the available memory bandwidth?

00:00:58.172 --> 00:01:02.511
And this is going to bring us to a very important, very simple principle called Little's Law.

00:01:02.511 --> 00:01:05.268
Let's have the talented Kim Dilla illustrate this for us.

00:01:05.268 --> 00:01:08.997
Now John Little is a MIT professor who studies Marketing.

00:01:08.997 --> 00:01:13.642
He formulated his Eponymous Law, when writing about queuing theory in business processes.

00:01:13.642 --> 00:01:17.729
And Little's Law is usually used to reason about things like optimizing the number

00:01:17.729 --> 00:01:21.749
of customers in a line at Starbucks, or maybe the size of queues in a factory.

00:01:21.749 --> 00:01:24.574
But Little's Law is really very general and can be applied

00:01:24.574 --> 00:01:27.247
to many things including memory systems in computers.

00:01:27.247 --> 00:01:30.974
In that context, Little's Law states that the number of bytes delivered

00:01:30.974 --> 00:01:36.062
equals the average latency of each memory transaction times the bandwidth.

00:01:36.062 --> 00:01:38.829
Let's be a little more precise and emphasize

00:01:38.829 --> 00:01:42.769
that we care about the useful bytes delivered, and the problem with uncoalesced

00:01:42.769 --> 00:01:47.619
global memory accesses is that not all of the bytes in every memory transaction are actually being used.

00:01:47.619 --> 00:01:50.188
That's why coalescing global memory accesses helps

00:01:50.188 --> 00:01:53.844
ensure that every byte delivered in a memory transaction will be used.

00:01:53.844 --> 00:01:59.604
So given this definition, what can we do to improve our bandwidth? Let's check all that apply.

00:01:59.604 --> 00:02:05.678
We can increase the number of bytes delivered, we can increase the latency--

00:02:05.678 --> 00:02:10.068
meaning the time between memory transactions--we can decrease the

00:02:10.068 --> 00:02:15.747
number of bytes delivered, or we can decrease the latency or time between transactions.

