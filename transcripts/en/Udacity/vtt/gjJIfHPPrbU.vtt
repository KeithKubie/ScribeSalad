WEBVTT
Kind: captions
Language: en

00:00:00.080 --> 00:00:01.630
So privacy's a good thing,

00:00:01.630 --> 00:00:06.620
so do we have technologies that can
help enhance privacy or include privacy?

00:00:06.620 --> 00:00:09.334
So here we're going to
talk about a few of those.

00:00:09.334 --> 00:00:15.270
So one of the threats we talked
about was traffic analysis, okay?

00:00:15.270 --> 00:00:19.980
You know who's talking to who,
so we said communication,

00:00:19.980 --> 00:00:21.560
who I want to talk to.

00:00:21.560 --> 00:00:26.700
Or if Alice is talking to Bob, somebody
else shouldn't be able to figure that

00:00:26.700 --> 00:00:29.450
out and they could do that
with traffic analysis.

00:00:31.030 --> 00:00:33.819
What machine is talking to what
other machine for source and

00:00:33.819 --> 00:00:35.170
destination information.

00:00:35.170 --> 00:00:39.100
So what if we don't want somebody
to be able to infer that?

00:00:39.100 --> 00:00:42.240
So this we can do with this
technology called TOR,

00:00:42.240 --> 00:00:47.110
and we'll see what exactly it does.

00:00:47.110 --> 00:00:50.690
But it's basically sort of anonymous
communication is what we're trying to

00:00:52.320 --> 00:00:53.270
get to here.

00:00:53.270 --> 00:00:58.460
Let's say what's happening here is,
but Alice is, maybe interacting with

00:00:58.460 --> 00:01:03.160
the website, but it doesn't want the
website to know that it's really Alice.

00:01:03.160 --> 00:01:07.350
Or, doesn't even want to know,
this website to know, that, so

00:01:07.350 --> 00:01:11.610
it's Bob's site is,
the website is operated by Bob.

00:01:11.610 --> 00:01:16.190
So Alice doesn't want Bob's server to
know that the request is coming from

00:01:16.190 --> 00:01:19.240
her, or even the IP address
from which it's coming.

00:01:19.240 --> 00:01:25.160
So one way you can do that is,
Alice has a client, a TOR client.

00:01:25.160 --> 00:01:29.160
So that fix a random path
the bunch of TOR nodes that

00:01:29.160 --> 00:01:30.910
you need to find some set of those.

00:01:30.910 --> 00:01:34.790
And it constructs this path in
such a way that any node here,

00:01:34.790 --> 00:01:38.380
sort of knows about this predecessor and
its immediate successor, but

00:01:38.380 --> 00:01:43.415
doesn't know who this request
has come through in the past, or

00:01:43.415 --> 00:01:47.290
except its immediate successor, who is
the next node that's going to get it.

00:01:47.290 --> 00:01:51.730
So this guy is told saying,
well just send it to the next node, and

00:01:51.730 --> 00:01:55.020
the rest of the information,
the node after that,

00:01:55.020 --> 00:01:58.900
that information is encrypted with this
node's key, so this guy would have no

00:01:58.900 --> 00:02:03.330
idea that once it sends the message
here, it's going to go to this one.

00:02:03.330 --> 00:02:08.550
Once it comes here, then it decrypts
that, the next destination, finds out.

00:02:08.550 --> 00:02:10.672
And it doesn't know who it's
going to go after that, so

00:02:10.672 --> 00:02:12.752
it doesn't have the full picture either.

00:02:12.752 --> 00:02:16.530
So basically we create this
anonymous communication, or

00:02:16.530 --> 00:02:21.600
implement anonymous communication
as TOR does, by using this kind of

00:02:21.600 --> 00:02:26.830
a scheme where instead of nodes actually
forward the message repeatedly and

00:02:26.830 --> 00:02:30.470
make use of encryption to sort of know
who the message is coming from, and

00:02:30.470 --> 00:02:32.590
where it's going, and
that's all they know about.

00:02:32.590 --> 00:02:36.170
They don't know the full path, and
as a result, traffic analysis,

00:02:36.170 --> 00:02:41.460
no one is going to be able to figure out
that Alice is visiting Bob's website,

00:02:41.460 --> 00:02:43.650
unless they have control
of all these nodes,

00:02:43.650 --> 00:02:47.470
which the likelihood
of that would be less.

