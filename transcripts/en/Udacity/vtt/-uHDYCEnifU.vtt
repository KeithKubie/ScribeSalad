WEBVTT
Kind: captions
Language: en

00:00:00.850 --> 00:00:05.540
Remember the libraries we loaded earlier
to do cool things like draw on the map,

00:00:05.540 --> 00:00:09.500
we've been saving the best library for
last, the Places Library.

00:00:09.500 --> 00:00:12.990
The functionality in the Google Places
Library enables your application to

00:00:12.990 --> 00:00:17.240
search for places, like establishments,
geographic locations or

00:00:17.240 --> 00:00:20.510
prominent points of interest
contained within a defined area,

00:00:20.510 --> 00:00:23.880
such as the bounds of a map or
around a fixed point.

00:00:23.880 --> 00:00:27.830
You'll be able to access a crazy amount
of data on your favorite McDonald's,

00:00:27.830 --> 00:00:31.180
nail salons, bars, police stations.

00:00:31.180 --> 00:00:33.190
&gt;&gt; That sounds like a typical night out,
eh Emily.

00:00:34.420 --> 00:00:37.110
&gt;&gt; Anyway,
we'll cover details like that later.

00:00:37.110 --> 00:00:39.860
Our first usage of this
data is much simpler.

00:00:39.860 --> 00:00:43.660
So far we've been typing in addresses or
locations in order to search for

00:00:43.660 --> 00:00:44.860
nearby listings in our site.

00:00:45.940 --> 00:00:48.662
What if we didn't want to have
to write out the whole thing?

00:00:48.662 --> 00:00:52.170
&gt;&gt; Google's Place's Library has
the places auto complete functionality

00:00:52.170 --> 00:00:55.210
which allows the user to get
back probable results with

00:00:55.210 --> 00:00:57.920
each keystroke while
entering a location.

00:00:57.920 --> 00:01:02.160
So they can find what they're looking
for faster and more accurately.

00:01:02.160 --> 00:01:06.181
Essentially, we know what the user is
typing before they finish typing it.

00:01:07.300 --> 00:01:08.410
&gt;&gt; Let's go back into our code and

00:01:08.410 --> 00:01:12.460
update both of these text input
areas to use autocomplete.

00:01:12.460 --> 00:01:15.590
The first thing that we have to
do is include another library,

00:01:15.590 --> 00:01:16.670
the Place's Library.

00:01:17.720 --> 00:01:21.740
This will allow us to use autocomplete
and also other features of Places later.

00:01:23.290 --> 00:01:26.140
So, we'll define two
new places autocomplete

00:01:26.140 --> 00:01:31.420
instances within our initialize function
and bind them to our two input boxes.

00:01:31.420 --> 00:01:32.630
At the simplest level,

00:01:32.630 --> 00:01:36.270
these will predict what the user
is typing with each keystroke, and

00:01:36.270 --> 00:01:40.060
supply the most likely options in
a pick list below the input box.

00:01:41.440 --> 00:01:44.000
We can also add more options to these.

00:01:44.000 --> 00:01:48.320
In addition to specifying which text
input to execute autocomplete on,

00:01:48.320 --> 00:01:53.870
we can add bounds, which is a lot long
area to bias the results towards.

00:01:53.870 --> 00:01:58.510
This won't restrict the results, but
it will favor items within those bounds.

00:01:58.510 --> 00:02:00.730
We can also add a types restriction,

00:02:00.730 --> 00:02:04.570
which will restrict the types of
places we get back to for example,

00:02:04.570 --> 00:02:08.699
addresses for only precise addresses or
establishments for only business.

00:02:09.750 --> 00:02:13.060
And we can add a component
restriction to restrict the results

00:02:13.060 --> 00:02:14.180
to within a certain country.

00:02:15.360 --> 00:02:18.690
Let's try biasing the zoom
to area autocomplete

00:02:18.690 --> 00:02:19.760
to within the bounds of the map.

00:02:22.140 --> 00:02:23.820
Let's test it out.

00:02:23.820 --> 00:02:27.790
This makes it much easier for the user
and also makes it much more likely that

00:02:27.790 --> 00:02:31.880
the Geocoder or Distance Matrix Service
actually finds a location.

00:02:31.880 --> 00:02:35.180
Let's look at the difference
between the zoom to area one and

00:02:35.180 --> 00:02:36.220
the Distance Matrix one.

00:02:37.510 --> 00:02:41.155
Right now they're both supplying options
for New York City, that's because we

00:02:41.155 --> 00:02:44.110
biased the zoom to area one to
within the bounds of the map.

00:02:45.180 --> 00:02:47.550
But also because even if
you don't set any bounds,

00:02:47.550 --> 00:02:50.190
the API will attempt to
detect your location and

00:02:50.190 --> 00:02:54.030
it'll automatically bias
the results to that location.

00:02:54.030 --> 00:02:56.850
Thus this one is trying to find me
a place in New York because I'm

00:02:56.850 --> 00:02:58.070
currently in New York.

00:02:58.070 --> 00:03:01.010
Let's change the bounds of the map and
see if it makes a difference.

00:03:01.010 --> 00:03:03.584
Okay, I've changed the bounds of the map
so that we're looking at Detroit.

00:03:03.584 --> 00:03:07.600
Now, the autocomplete which I
bound to the area of the map

00:03:07.600 --> 00:03:09.380
is actually looking for
places in Detroit.

00:03:10.600 --> 00:03:13.460
Whereas the one where I
didn't bind it to anything,

00:03:13.460 --> 00:03:15.550
still knows that I'm in New York City.

00:03:15.550 --> 00:03:16.050
Pretty neat.

00:03:17.190 --> 00:03:21.370
If I don't want any bias, I can also
specify the bounds of the whole world.

00:03:22.480 --> 00:03:26.116
Let's take a break before continuing
to find out how fast autocomplete

00:03:26.116 --> 00:03:26.690
really is.

