WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:01.750
Welcome back.

00:00:01.750 --> 00:00:06.190
Now we're going to use an object diagram
to clarify how text fields interact with

00:00:06.190 --> 00:00:09.640
delegates using the UI text
field delegate protocol.

00:00:09.640 --> 00:00:11.240
We'll start with the view controller.

00:00:11.240 --> 00:00:16.840
Which of course has outlets to
the four views and here are our views.

00:00:16.840 --> 00:00:19.599
Up here our colorizer are and
the emoji delegates.

00:00:21.390 --> 00:00:25.300
You can see that each of the
corresponding UI text field view objects

00:00:25.300 --> 00:00:27.180
has an outlet pointing to a delegate.

00:00:28.480 --> 00:00:32.140
These objects can be delegates because
they implement the UI text field

00:00:32.140 --> 00:00:33.750
delegate protocol.

00:00:33.750 --> 00:00:36.760
This third text field has the view
controller as its delegate.

00:00:36.760 --> 00:00:39.810
So the view controller also needs
to implement the UI text field

00:00:39.810 --> 00:00:41.610
delegate protocol.

00:00:41.610 --> 00:00:44.970
So why would we want to use
a view controller as a delegate?

00:00:44.970 --> 00:00:48.210
Because the view controller's role
in the architecture is to manage all

00:00:48.210 --> 00:00:49.430
of the views.

00:00:49.430 --> 00:00:52.860
The behavior of the third text
field is connected to a label.

00:00:52.860 --> 00:00:55.730
The label is updated with the character
count whenever the text in

00:00:55.730 --> 00:00:56.959
the text field changes.

00:00:58.030 --> 00:01:01.180
Now I want to walk through the method
indication so we can clarify how

00:01:01.180 --> 00:01:05.269
the delegate pattern is used to keep
the character count label up to date.

00:01:05.269 --> 00:01:07.740
So if we were to trace
the user's actions,

00:01:07.740 --> 00:01:12.260
the user's going to tap on the third
text field tap a key on the keyboard and

00:01:12.260 --> 00:01:13.880
then the number is immediately updated.

00:01:15.570 --> 00:01:18.590
Now let's step through that sequence
of events again in our diagram.

00:01:19.660 --> 00:01:21.948
The user taps the keyboard.

00:01:21.948 --> 00:01:25.669
The text field realizes
that the text will change.

00:01:25.669 --> 00:01:29.908
The text field invokes the method
should change characters in range.

00:01:29.908 --> 00:01:32.808
All of these methods
happen behind the scenes.

00:01:32.808 --> 00:01:34.709
The text field invokes the method.

00:01:34.709 --> 00:01:37.360
Should change characters in range.

00:01:37.360 --> 00:01:40.420
The view controller
receives that invocation.

00:01:40.420 --> 00:01:42.880
So it updates the label.

00:01:42.880 --> 00:01:44.680
And it returns true.

00:01:44.680 --> 00:01:47.230
If we zoom in on
the ViewController.swift file,

00:01:47.230 --> 00:01:49.540
we can see the code for
some of these steps.

00:01:49.540 --> 00:01:52.450
We won't be able to find these
first three steps in our code.

00:01:52.450 --> 00:01:55.070
Those are happening behind the scenes.

00:01:55.070 --> 00:01:57.460
The first step we can
see is number four,

00:01:57.460 --> 00:01:59.730
when the invocation comes
in from the text field.

00:02:01.850 --> 00:02:03.160
Here is step five,

00:02:03.160 --> 00:02:07.500
where the variable new text is being
set to the characters we just typed.

00:02:07.500 --> 00:02:10.110
Here's step six, where the text
of the label is being set.

00:02:11.280 --> 00:02:13.220
And here's step seven, return true.

00:02:14.560 --> 00:02:18.500
Notice again that you don't get to see
where the UI text field delegate method

00:02:18.500 --> 00:02:20.360
invocations begin.

00:02:20.360 --> 00:02:24.820
We just implement the protocol and
handle the indications as they come in.

00:02:24.820 --> 00:02:27.190
Now let's take a quick look
at the other two delegates.

