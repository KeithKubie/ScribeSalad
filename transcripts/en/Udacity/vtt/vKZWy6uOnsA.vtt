WEBVTT
Kind: captions
Language: en

00:00:00.850 --> 00:00:07.160
In this lesson, we will learn how to write control programs to customize network

00:00:07.160 --> 00:00:12.860
control. We will review the operation of a hub and a learning switch, then

00:00:12.860 --> 00:00:17.980
we will explore how to use the POX controller to create a simple MiniNet

00:00:17.980 --> 00:00:21.680
topology. And then we will explore how

00:00:21.680 --> 00:00:26.160
to customize the Pox controller to perform two

00:00:26.160 --> 00:00:32.610
types of network control. As a review, when a host sends a

00:00:32.610 --> 00:00:39.050
packet to a hub, the hub maintains no state About which output port a package

00:00:39.050 --> 00:00:40.670
should be forwarded to reach a

00:00:40.670 --> 00:00:44.590
particular destination. Therefore, the hub simply forwards

00:00:44.590 --> 00:00:52.240
the input package on every output port. In Pox, this code is fairly simple.

00:00:52.240 --> 00:00:58.160
When the controller starts. It adds a listener that listens for a connection up,

00:00:59.190 --> 00:01:04.569
which is a connection from a switch. When switch connects, it simply sense

00:01:04.569 --> 00:01:07.850
and open-flow, flow modification back to the

00:01:07.850 --> 00:01:11.190
switch it says flood all packets out

00:01:11.190 --> 00:01:13.890
every output port. The first function here

00:01:13.890 --> 00:01:17.340
involved creates the open-flow massage. And the

00:01:17.340 --> 00:01:19.510
second sends that message back to the

00:01:19.510 --> 00:01:23.900
switch. In contrast a learning switch maintains

00:01:23.900 --> 00:01:29.140
a switch table that's initially empty. But when a packet arrives on input port

00:01:29.140 --> 00:01:35.100
1, the switch creates a table. That associates host A with output port 1,

00:01:35.100 --> 00:01:38.560
such that whenever a subsequent packet is

00:01:38.560 --> 00:01:42.700
destined for destination A, the switch knows

00:01:42.700 --> 00:01:48.600
to forward the packet via output port 1. I won't show you the full Python

00:01:48.600 --> 00:01:53.990
code here. But it's fairly simple, and you can go look at the Pox distribution

00:01:53.990 --> 00:01:56.550
to see the learning switch example. As

00:01:56.550 --> 00:02:00.140
before, when the first packet arrives at the

00:02:00.140 --> 00:02:04.020
switch, it is diverted to the controller, at

00:02:04.020 --> 00:02:07.760
this point, the controller maintains a hash table

00:02:07.760 --> 00:02:13.730
that maps the address to the out put port, when it sees that first packet

00:02:13.730 --> 00:02:16.790
&gt;From Post A, it updates the address and

00:02:16.790 --> 00:02:19.620
port table. If the packet's a multicast packet,the

00:02:19.620 --> 00:02:22.660
controller makes a decision to flood that

00:02:22.660 --> 00:02:26.550
packet on all output ports. Likewise, if there's

00:02:26.550 --> 00:02:29.480
no table entry for the destination for that

00:02:29.480 --> 00:02:33.070
packet, the controller also instructs the switch to

00:02:33.070 --> 00:02:35.460
forward the packet on all output ports.

00:02:35.460 --> 00:02:37.530
If the source and destination address are the

00:02:37.530 --> 00:02:40.580
same, The controller instructs the switch to

00:02:40.580 --> 00:02:43.670
drop the packet. Otherwise, the controller installs the

00:02:43.670 --> 00:02:47.110
flow table entry corresponding to that destination

00:02:47.110 --> 00:02:51.480
address and output port. Installing that flow table

00:02:51.480 --> 00:02:54.330
entry in the switch prevents future packets for

00:02:54.330 --> 00:02:58.700
that flow from being redirected to the controller.

00:02:58.700 --> 00:03:01.280
Rather, all subsequent packets on that flow

00:03:01.280 --> 00:03:03.900
can be handled directly by the switch,

00:03:03.900 --> 00:03:06.190
since it now knows which output port

00:03:06.190 --> 00:03:08.960
to send a packet for that particular destination.

