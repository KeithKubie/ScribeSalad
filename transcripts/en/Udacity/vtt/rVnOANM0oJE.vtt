WEBVTT
Kind: captions
Language: en

00:00:00.410 --> 00:00:03.820
For me, one of the most fascinating
classes of graph partitioning methods

00:00:03.820 --> 00:00:06.270
are the so-called spectral methods.

00:00:06.270 --> 00:00:09.360
That's spectral as in rainbows,
not ghosts.

00:00:09.360 --> 00:00:13.500
Spectral methods go back to the linear
algebraic view of graphs, and

00:00:13.500 --> 00:00:17.040
they have what, for me, is a surprising
physics-based interpretation.

00:00:17.040 --> 00:00:20.030
We'll get there, but first, let's remind
ourselves about the connection between

00:00:20.030 --> 00:00:21.938
graph structure and certain matrices.

00:00:21.938 --> 00:00:25.920
Consider an unweighted,
directed graph such as this one.

00:00:25.920 --> 00:00:27.730
Let's call this graph G.

00:00:27.730 --> 00:00:30.630
Now let's represent it,
not by its adjacency matrix, but

00:00:30.630 --> 00:00:33.810
by an incidence matrix, C of G.

00:00:33.810 --> 00:00:39.130
In this form, each row is an edge,
and each column is a vertex.

00:00:39.130 --> 00:00:40.790
How do you mark edges?

00:00:40.790 --> 00:00:42.816
Let's take this edge as an example.

00:00:42.816 --> 00:00:45.715
It points from vertex 0 to vertex 1.

00:00:45.715 --> 00:00:48.440
Let's make it the first edge
in the incidence matrix, and

00:00:48.440 --> 00:00:51.330
let's mark it using
the following convention.

00:00:51.330 --> 00:00:55.790
We'll put a positive 1 at the source
vertex, and a -1 at the sink.

00:00:55.790 --> 00:00:57.550
Let me fill in the rest.

00:00:57.550 --> 00:00:58.940
&gt;From this incidence matrix,

00:00:58.940 --> 00:01:02.490
let's construct a new object
called the graph laplacian.

00:01:02.490 --> 00:01:06.200
We'll define it as the product
of C transposed times C.

00:01:06.200 --> 00:01:09.650
To see what this product is, I want
you to compute it algebraically and

00:01:09.650 --> 00:01:11.010
then interpret it.

00:01:11.010 --> 00:01:14.970
Start by writing C as
a sequence of its m edges.

00:01:14.970 --> 00:01:18.050
Here's C shown symbolically as a list of

00:01:18.050 --> 00:01:21.540
row vectors where each row
vector corresponds to an edge.

00:01:21.540 --> 00:01:24.520
Here's what C transposed
times C would look like.

00:01:24.520 --> 00:01:26.220
Let's multiply this out.

00:01:26.220 --> 00:01:30.250
That is, C transpose C is
the sum of a bunch of products.

00:01:30.250 --> 00:01:33.320
Each product is an edge,
represented as a column vector,

00:01:33.320 --> 00:01:36.320
multiplied by itself
represented as a rho vector.

00:01:36.320 --> 00:01:39.900
To see what this is saying, let's take
a closer look at one of these products.

00:01:39.900 --> 00:01:43.380
Each e sub k is some edge,
let's call it ij.

00:01:43.380 --> 00:01:46.640
Remember that it's a vector with
a plus 1 in the Ith position and

00:01:46.640 --> 00:01:48.980
a minus 1 in the Jth position.

00:01:48.980 --> 00:01:50.550
So what about the product?

00:01:50.550 --> 00:01:53.150
This product will be a matrix,
and, in fact,

00:01:53.150 --> 00:01:56.920
this product will only have
non-zero entries in four places.

00:01:56.920 --> 00:01:58.330
Let's do the diagonals first.

00:01:59.390 --> 00:02:02.660
A diagonal entry will either
be plus 1 times plus 1 or

00:02:02.660 --> 00:02:06.682
minus 1 times minus 1,
which in either case is just plus 1.

00:02:06.682 --> 00:02:07.280
In effect,

00:02:07.280 --> 00:02:11.460
the diagonals are tallying the number
of incident edges on each vertex.

00:02:12.490 --> 00:02:13.400
That's the diagonals.

00:02:13.400 --> 00:02:15.270
What about the off diagonals?

00:02:15.270 --> 00:02:20.010
The off diagonals will always
multiply a positive 1 times a -1.

00:02:20.010 --> 00:02:24.610
In effect, the off diagonals
indicate the presence of an edge.

00:02:24.610 --> 00:02:26.380
However, since both j, i, and

00:02:26.380 --> 00:02:32.050
i, j are minus 1, you've effectively
lost the direction information.

00:02:32.050 --> 00:02:32.820
Put another way,

00:02:32.820 --> 00:02:35.960
the Graph Laplacian is telling you
something about the undirected

00:02:35.960 --> 00:02:39.940
form of the original graph, in the event
that the original graph was directed.

00:02:39.940 --> 00:02:43.690
Now this is what one of these products
tells us, but what about the sum?

00:02:43.690 --> 00:02:45.160
Well, let's see.

00:02:45.160 --> 00:02:48.460
The diagonals count
the degree of each vertex.

00:02:48.460 --> 00:02:52.080
Let's represent that by a diagonal
matrix D, where the diagonal entries

00:02:52.080 --> 00:02:56.270
are the degrees of each vertex, and
let's say there are n vertices in all.

00:02:56.270 --> 00:02:59.080
The off diagonals mark all the edges.

00:02:59.080 --> 00:03:02.866
That's basically just the adjacency
matrix of the undirected form of

00:03:02.866 --> 00:03:03.515
the graph.

00:03:03.515 --> 00:03:06.465
Remember, the adjacency
matrix would have a positive

00:03:06.465 --> 00:03:09.809
1 anywhere there's an edge
either connecting i, j or j, i.

00:03:09.809 --> 00:03:12.858
And, of course, to get minus 1s
in the off diagonal positions,

00:03:12.858 --> 00:03:15.350
we'll subtract the adjacency matrix.

00:03:15.350 --> 00:03:18.710
Okay, so let's construct
a Graph Laplacian on an example.

00:03:18.710 --> 00:03:22.300
Step one is to throw out the directions,
then build a diagonal matrix,

00:03:22.300 --> 00:03:25.400
D, that contains
the degrees of each vertex.

00:03:25.400 --> 00:03:29.930
This example isn't very exciting
because every vertex has a degree of 3.

00:03:29.930 --> 00:03:33.740
Then build the adjacency matrix,
which marks all the edges.

00:03:33.740 --> 00:03:37.420
Again, this example isn't very exciting
because it's basically fully connected.

00:03:37.420 --> 00:03:40.780
So there are ones in all of
the off diagonal entries.

00:03:40.780 --> 00:03:44.070
Finally, the graph laplacian
is just D minus W.

00:03:44.070 --> 00:03:46.056
In this case, that's this thing.

00:03:46.056 --> 00:03:48.910
Take a moment to contemplate
the Graph Laplacian.

00:03:48.910 --> 00:03:51.820
Once you've done so, you can move
onto a more interesting question of,

00:03:51.820 --> 00:03:54.350
how do I use this doohickey to
actually partition a graph?

