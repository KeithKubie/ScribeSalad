WEBVTT
Kind: captions
Language: en

00:00:00.271 --> 00:00:04.941
In Problem Set #3, you will be implementing a parallel algorithm for tone mapping.

00:00:04.941 --> 00:00:09.051
Tone mapping is the process of mapping an image with a wide range

00:00:09.051 --> 00:00:13.683
of brightness values into an image with a narrow range of brightness values.

00:00:13.683 --> 00:00:20.144
This is an important operation because the real world has an enormous range of different brightness values.

00:00:20.144 --> 00:00:26.229
For example, think of this spectrum as the range of brightness values in the real world.

00:00:26.229 --> 00:00:29.633
On one end of the spectrum we have a bright, sunny day.

00:00:29.633 --> 00:00:33.951
On the other end of the spectrum we have a very dark, moonlit night.

00:00:33.951 --> 00:00:38.700
And it turns out that the bright, sunny day is about a million times brighter than the night.

00:00:38.700 --> 00:00:43.765
Unfortunately, our computer screen can only display a narrow range of values.

00:00:43.765 --> 00:00:48.703
And think of this spectrum as the range of brightness values that our computer screen can display.

00:00:48.703 --> 00:00:53.455
So tone mapping is the problem of taking the brightness values that we seen the real world

00:00:53.455 --> 00:00:59.294
and mapping them down into a tiny range of brightness values that we can display on our computer screen.

00:00:59.294 --> 00:01:01.763
This process is tone mapping.

00:01:01.763 --> 00:01:08.064
There's a good chance that the camera on your cell phone has a high dynamic range or HDR mode.

00:01:08.064 --> 00:01:10.300
When you take pictures in HDR mode,

00:01:10.300 --> 00:01:13.667
then your camera is performing a tone mapping step

00:01:13.667 --> 00:01:16.973
to arrive at the final image that it shows you.

00:01:16.973 --> 00:01:24.480
In this problem set, you will be implementing a simple algorithm for tone mapping called "histogram equalization,"

00:01:24.480 --> 00:01:33.189
and this factors nicely into parallel map, reduce, scatter, and scan operations.

00:01:33.189 --> 00:01:36.634
You have been exposed to the map operation in previous homework,

00:01:36.634 --> 00:01:43.303
so in this homework you will focus on reduce, scatter, and scan.

00:01:43.303 --> 00:01:48.498
Recall that histogram counts the number of occurrences of something in the data set.

00:01:48.498 --> 00:01:53.245
For example, if we measure the heights of everyone taking this class

00:01:53.245 --> 00:01:57.817
and compute a histogram of the heights, it may look something like this.

00:01:57.817 --> 00:02:05.333
The height of each bar in this histogram is a count of how many peoples' height fall into a particular range.

00:02:05.333 --> 00:02:15.587
For example, this bar may represent that range of people whose height is from 170 cm to 180 cm.

00:02:15.587 --> 00:02:25.747
And this bar right here may represent people whose height is from 200 cm to 210 cm,

00:02:25.747 --> 00:02:27.916
and these people are really tall by the way.

00:02:27.916 --> 00:02:36.164
The main idea in this homework is to first compute a histogram of the brightness values in the image.

00:02:36.164 --> 00:02:39.963
And after that we will compute a scan of the histogram

00:02:39.963 --> 00:02:44.134
that we computed in step one, using the plus operator.

00:02:44.134 --> 00:02:49.077
It turns out that the array resulting from the scan, tells us exactly

00:02:49.077 --> 00:02:52.512
how to remap the brightness values in the original image.

00:02:52.512 --> 00:02:56.785
This is just one of the many really interesting applications of scan,

00:02:56.785 --> 00:03:01.268
and that is why we're going to focus on scan in this particular problem set.

00:03:01.268 --> 00:03:07.342
In order to figure out the range of brightness values that should go into each column of the histogram,

00:03:07.342 --> 00:03:12.028
you will need to, first, compute the minimum brightness in the image

00:03:12.028 --> 00:03:16.558
and, second, compute the maximum brightness in the image.

00:03:16.558 --> 00:03:19.854
We will provide you with an array of brightness values,

00:03:19.854 --> 00:03:27.500
but you will need to figure out the minimum and the maximum values using the parallel reduce operation.

00:03:27.500 --> 00:03:35.615
When computing a histogram parallel, it is very likely that different threads will try to update

00:03:35.615 --> 00:03:38.718
the same memory locations at the same time,

00:03:38.718 --> 00:03:43.821
and to correctly handle this parallel data scattering requires special care.

00:03:43.821 --> 00:03:49.796
For now we recommend that you use the atomicAdd function when computing your histogram.

00:03:49.796 --> 00:03:54.609
Although using atomicAdd may be a little slow,

00:03:54.609 --> 00:04:01.849
but it will ensure that multiple threads don't try to update the same memory location concurrently.

00:04:01.849 --> 00:04:06.746
In return, that will ensure the correctness of your histogram computation.

00:04:06.746 --> 00:04:08.448
Once you get everything working,

00:04:08.448 --> 00:04:10.813
feel free to start experimenting

00:04:10.813 --> 00:04:14.088
and see if you can avoid using atomicAdd.

00:04:14.088 --> 00:04:18.389
If you're interested, we have included a more detailed mathematical formulation

00:04:18.389 --> 00:04:22.760
of the histogram equalization in the instructor comments.

00:04:22.760 --> 00:04:28.333
Lastly, I'd like to thank Eric Ellson of Royal Caliber and Mike Roberts

00:04:28.333 --> 00:04:33.037
for writing the script and the code to this problem set. Good luck.

