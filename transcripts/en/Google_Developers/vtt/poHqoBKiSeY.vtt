WEBVTT
Kind: captions
Language: en

00:00:03.027 --> 00:00:04.033
&gt;&gt;Kevin Carle: Hi. Hello, everyone.

00:00:04.033 --> 00:00:08.053
Welcome to WebM Open Video Playback in HTML5.

00:00:08.053 --> 00:00:11.063
I have myself, Kevin Carle, here from Google.

00:00:11.063 --> 00:00:13.073
Also Jim Bankoski. 

00:00:13.073 --> 00:00:16.007
And from Brightcove, we have Bob Mason.

00:00:16.007 --> 00:00:23.040
And actually, also David Mendels.

00:00:23.040 --> 00:00:30.097
&gt;&gt;Kevin Carle: You can follow along on wave
and ask questions and do Google moderator.

00:00:30.097 --> 00:00:32.080
So, like I said, I'm a software engineer
at YouTube.

00:00:32.080 --> 00:00:35.043
I work on latency and HTML5.

00:00:38.033 --> 00:00:40.057
So today, we're going to cover couple things.

00:00:40.057 --> 00:00:46.010
First off, we're going to go over a little bit
of an overview of HTML5 video,

00:00:46.010 --> 00:00:51.023
go through some benefits -- 
what it does for us and for the user --

00:00:51.023 --> 00:00:55.077
and go through some of what we've been doing
at YouTube with HTML5 in the last year.

00:00:55.077 --> 00:00:58.083
And then, Jim's going to take it over
and start talking about WebM,

00:00:58.083 --> 00:01:03.007
and we're going to go into some specifics
about "What is WebM and VP8 and performance"

00:01:03.007 --> 00:01:04.060
and that sort of thing.

00:01:04.060 --> 00:01:06.087
And then, we're going to
have some demos from YouTube

00:01:06.087 --> 00:01:11.053
and Brightcove of WebM playing in our HTML5 players.

00:01:11.053 --> 00:01:17.083
And then, some summaries of some of the experiences
we've had developing for HTML5 in the last year.

00:01:17.083 --> 00:01:22.017
And then, we'll go to questions.

00:01:22.017 --> 00:01:23.040
So what is HTML5 video?

00:01:23.040 --> 00:01:24.087
So most of you probably know this stuff,

00:01:24.087 --> 00:01:28.010
but essentially, HTML5 has introduced media tags

00:01:28.010 --> 00:01:34.027
so that now we have audio and video as first-class
HTML tags along with everything else.

00:01:34.027 --> 00:01:39.017
So now, the media player can be part of the browser
and you don't need a plug-in to be instantiated.

00:01:39.017 --> 00:01:40.033
Otherwise, it acts like any other tag.

00:01:40.033 --> 00:01:44.077
And you can see that the simplest possible
example of video tag is pretty much out there

00:01:44.077 --> 00:01:51.087
that would start a little player using the browser's
built-in controls playing a video.

00:01:51.087 --> 00:01:55.000
And one other thing I wanted to cover up front here
is just that we're going to be using the words

00:01:55.000 --> 00:01:56.083
"codecs and containers" a lot. 

00:01:56.083 --> 00:01:58.037
Again, most of you probably know what that is.

00:01:58.037 --> 00:02:03.047
But, for those who don't -- a "codec" is something
that encodes and decodes a video.

00:02:03.047 --> 00:02:05.033
It's software that basically tells a video --

00:02:05.033 --> 00:02:10.007
explains how the video's information
is organized and how to play it back.

00:02:10.007 --> 00:02:14.010
A "container" is a file that wraps the video,
the audio --

00:02:14.010 --> 00:02:16.060
other content associated with the media object --

00:02:16.060 --> 00:02:22.087
and describes what it is and where it is.

00:02:22.087 --> 00:02:26.027
So, what are the reasons that we want
the video tag in HTML5?

00:02:26.027 --> 00:02:28.097
Well, the biggest reason is really
just that it's open.

00:02:28.097 --> 00:02:35.013
So you now have the ability to have an open
source browser with a media player built in

00:02:35.013 --> 00:02:38.060
and an open source video codec
and video container.

00:02:38.060 --> 00:02:44.083
And so, now, anyone can implement the full stack
all the way from the video itself to the player.

00:02:44.083 --> 00:02:49.013
And so, we'll have a lot of different implementations
out there and a lot of competition --

00:02:49.013 --> 00:02:52.033
a lot of innovation in this space. 

00:02:52.033 --> 00:02:54.097
These next two reasons are fairly similar,

00:02:54.097 --> 00:03:01.097
but there's a lot of opportunity for improvements
in latency and performance.

00:03:03.000 --> 00:03:05.040
These will vary a bit, of course.
They're not guaranteed.

00:03:05.040 --> 00:03:10.027
But for latency, for example, that you won't
have to instantiate and download a plug-in.

00:03:10.027 --> 00:03:13.093
So at the very least, 
you've got one pure resource request

00:03:13.093 --> 00:03:18.040
assuming you package all your JavaScript
in CSS together the way it normally would.

00:03:18.040 --> 00:03:23.060
And, depending on how the browser implements it,
you can get better performance,

00:03:23.060 --> 00:03:28.033
assuming that they take advantage
of hardware and so on.

00:03:28.033 --> 00:03:31.007
So, the other advantage, of course,
is the video tag is -- it's a video tag.

00:03:31.007 --> 00:03:34.080
So, if you want to have a screen reader
or other accessibility software,

00:03:34.080 --> 00:03:38.027
they know that it's a video and
they can handle it appropriately.

00:03:38.027 --> 00:03:42.087
Some relief if you've got search indexer or
anything that's walking over the HTML page.

00:03:42.087 --> 00:03:52.010
It knows it's a video and not just some sort
of plug-in where it doesn't know what's inside.

00:03:52.010 --> 00:03:54.067
So, what have we been doing
with the video tag at YouTube?

00:03:54.067 --> 00:04:01.093
Well, we've had a player up for a couple of months
now at YouTube.com/HTML5 using the h.264 codec.

00:04:01.093 --> 00:04:06.043
As of today, we are announcing that 
we have WebM videos available on the site.

00:04:06.043 --> 00:04:09.077
For now, if you want to find WebM specific videos,

00:04:09.077 --> 00:04:15.007
when you do a search, you can append
"and WebM equals one" to the search URL.

00:04:15.007 --> 00:04:20.000
We'll clean that up a bit soon
and have a UI option for that.

00:04:20.000 --> 00:04:22.017
As far as the browsers we support with HTML5,

00:04:22.017 --> 00:04:24.017
it's pretty much everything at this point.

00:04:24.017 --> 00:04:28.023
In Chrome, we now support h.264 and WebM.

00:04:28.023 --> 00:04:30.093
WebM, of course, only on the newest Chromium build.

00:04:30.093 --> 00:04:33.010
If you go to the Web M project website,

00:04:33.010 --> 00:04:38.020
I believe there are links to all the browsers builds
that support WebM.

00:04:38.020 --> 00:04:41.067
Safari, we support video tag with h.264.

00:04:41.067 --> 00:04:44.047
Opera and Firefox, we will have support --

00:04:44.047 --> 00:04:48.073
again, on those kind of tip-of-tree builds there
that have WebM support.

00:04:48.073 --> 00:04:51.023
And that will be rolled out more later.

00:04:51.023 --> 00:04:53.000
And then, IE9 -- we will have support

00:04:53.000 --> 00:04:56.023
as soon as they release a preview
version essentially with a video tag

00:04:56.023 --> 00:04:58.093
which should be in preview release 3.

00:04:58.093 --> 00:05:01.017
And they would definitely support h.264.

00:05:01.017 --> 00:05:05.013
And today, they announced they would be
supporting VP8 through direct show,

00:05:05.013 --> 00:05:08.040
I believe, if you have that installed.

00:05:08.040 --> 00:05:12.040
So that should give us quite a few options there.

00:05:12.040 --> 00:05:16.000
We don't currently support certain advanced overlays,
like ads and annotations,

00:05:16.000 --> 00:05:18.057
which are implemented in flash on our site.

00:05:18.057 --> 00:05:22.037
We will be working on support
for those as time goes on.

00:05:22.037 --> 00:05:25.010
We did just add this week -- caption support.

00:05:25.010 --> 00:05:28.020
So, right now, it's actually
only the default caption track.

00:05:28.020 --> 00:05:31.023
We still need to implement the menu
and selection and all that fun stuff.

00:05:31.023 --> 00:05:35.070
But it should give you the default caption track
for your language if the video has captions.

00:05:35.070 --> 00:05:42.070
And that's just on using JavaScript
and the Canvas tag for now.

00:05:43.057 --> 00:05:47.047
So, looking at video formats
that we have at YouTube.

00:05:47.047 --> 00:05:50.033
We support h.264 and WebM now.

00:05:50.033 --> 00:05:54.033
Both formats are going to be supported
for uploads going forward.

00:05:54.033 --> 00:05:58.020
For h.264, every video on the site
is basically be enabled on h.264.

00:05:58.020 --> 00:06:05.080
We have then an MP4 container at three
resolutions -- 360p, 720p, and 1080p.

00:06:05.080 --> 00:06:10.017
And then, in FLV container, we have
some additional formats like 480p.

00:06:10.017 --> 00:06:14.053
Right now, there -- I don't know of any browser
that supports the FLV container in HTML5 tag.

00:06:14.053 --> 00:06:15.080
Although there's nothing
really stopping them from it.

00:06:15.080 --> 00:06:17.027
It is an open specification.

00:06:17.027 --> 00:06:22.080
So if that ever happened, we could potentially
provide those additional formats in HTML5.

00:06:22.080 --> 00:06:29.083
For WebM -- so, currently, we will be transcoding
all new 720p and above uploads in WebM.

00:06:29.083 --> 00:06:32.020
We will eventually expand that
to all new uploads.

00:06:32.020 --> 00:06:36.063
And we will also be going through and transcoding
our existing catalog of videos into WebM.

00:06:36.063 --> 00:06:40.077
So it'll take a little while 
as we get 24 plus hours of video a minute.

00:06:40.077 --> 00:06:46.030
So, we'll be working on that.

00:06:46.030 --> 00:06:50.053
So we currently have the WebM videos
available in 360p and 720p,

00:06:50.053 --> 00:06:56.030
and we'll be adding additional formats over time.

00:06:56.030 --> 00:06:59.087
So what can we not do with HTML5 right now?

00:06:59.087 --> 00:07:04.043
Well, the biggest issue that people --
that users -- will notice I think is fullscreen.

00:07:04.043 --> 00:07:09.000
So there is fullscreen support in web kit and in
Firefox.

00:07:09.000 --> 00:07:11.083
Neither currently allows you to full screen anything
other than the video itself.

00:07:11.083 --> 00:07:14.007
So the problem is -- if you want to be
able to implement your own controls

00:07:14.007 --> 00:07:16.097
and things like the captions
which have been put into JavaScript --

00:07:16.097 --> 00:07:19.080
those will not be available in fullscreen.

00:07:19.080 --> 00:07:23.003
And then, many other browsers don't have
any current support for fullscreen.

00:07:23.003 --> 00:07:27.033
Our short-term plan is that we're going to give you
the ability to expand the player to fill the browser.

00:07:27.033 --> 00:07:28.097
That should be coming out soon.

00:07:28.097 --> 00:07:33.067
And then, you can full screen the
browser or just maximize it or whatever.

00:07:33.067 --> 00:07:36.053
We do hope that eventually
there will be some support for scriptable

00:07:36.053 --> 00:07:40.090
and media element full screening in browsers.

00:07:40.090 --> 00:07:44.040
So that you can implement --
take part of the page like in Canvas or something,

00:07:44.040 --> 00:07:47.010
and expand it to full screen.

00:07:47.010 --> 00:07:49.063
But we do don't know if that will happen.

00:07:49.063 --> 00:07:50.070
Another issue is embedding.

00:07:50.070 --> 00:07:56.057
So right now, most sites on the web, of course, 
do video embedding through the object tag with flash.

00:07:56.057 --> 00:07:59.017
So, that doesn't, you know, the object tag --

00:07:59.017 --> 00:08:01.070
while, technically, it can be used for HTML5
-- it doesn't work very well.

00:08:01.070 --> 00:08:04.033
It's not supported.

00:08:04.033 --> 00:08:06.013
So really, iFrame is the best option.

00:08:06.013 --> 00:08:09.060
Then, you can include the controls --
the JavaScript-- everything you need

00:08:09.060 --> 00:08:12.010
to have your own player experience.

00:08:12.010 --> 00:08:17.000
But the big issue with that, of course, is that not
everything allows you to embed in iFrame right now.

00:08:17.000 --> 00:08:18.087
So we'll be talking with --
and working with --

00:08:18.087 --> 00:08:24.000
sites in the community to push that kind of forward.

00:08:24.000 --> 00:08:27.083
Live streaming -- there's no real spec
for live streaming right now in HTML5.

00:08:27.083 --> 00:08:30.077
That's something that can come --

00:08:30.077 --> 00:08:33.087
something that we've only recently
started doing ourselves.

00:08:33.087 --> 00:08:37.043
Stream management -- so, right now, the browser
pretty much handles all of the aspects

00:08:37.043 --> 00:08:39.040
of loading and displaying the video.

00:08:39.040 --> 00:08:46.040
In Flash, you get a little more control over the
network streams and visibility into what's going on.

00:08:46.040 --> 00:08:48.010
Some of that would be nice in HTML5.

00:08:48.010 --> 00:08:50.063
It's not there now.

00:08:50.063 --> 00:08:57.000
Content protection -- some content owners
rely on this to make their content available.

00:08:57.000 --> 00:09:01.053
And right now, there's no official support
for this in HTML5.

00:09:01.053 --> 00:09:05.007
And then, a big one is just that the
implementations and the spec are still in motion.

00:09:05.007 --> 00:09:07.097
I'm sure a lot of web developers
are familiar with this kind of thing.

00:09:07.097 --> 00:09:09.080
All the browsers are implemented
a little differently,

00:09:09.080 --> 00:09:13.013
and there's still debate going on as
to how best to handle certain things.

00:09:13.013 --> 00:09:18.070
So it just -- you know -- makes it a little extra fun
when developing.

00:09:18.070 --> 00:09:22.027
And then, from a YouTube perspective,
we also have the issue of ads.

00:09:22.027 --> 00:09:26.047
So, on a normal browser -- on desktop -- if you have
Flash, we can display the ads in Flash,

00:09:26.047 --> 00:09:29.000
the video in HTML5 -- that's fine. 

00:09:29.000 --> 00:09:31.050
Obviously, some devices aren't going to have Flash.

00:09:31.050 --> 00:09:37.033
And so, and those we won't be able to support videos
where the content owner requires ads.

00:09:37.033 --> 00:09:41.040
And that's another thing that we just need
to work with the ad committee on essentially

00:09:41.040 --> 00:09:48.083
is getting more content available in HTML5 for ads --
which is certainly doable.

00:09:48.083 --> 00:09:51.033
Now, I'll turn it over to Jim to talk about WebM.

00:09:53.063 --> 00:09:55.083
Jim Bankoski: Hi. I'm Jim Bankoski.

00:09:55.083 --> 00:09:57.020
I'm an engineering manager at Google.

00:09:57.020 --> 00:10:02.017
But, until recently, I worked at a small company
called On2 Technologies.

00:10:02.017 --> 00:10:05.077
On2 was a pioneer in video codec technology.

00:10:05.077 --> 00:10:12.063
We started in 1992 doing video game machines
like the Saga Saturn and the Saga Dreamcast.

00:10:12.063 --> 00:10:18.060
We also did video and PC games like
Final Fantasy 7 and a bunch of other games.

00:10:18.060 --> 00:10:26.003
Up until probably 2002 -- 2004, we were also --
we had a deal with electronic arts.

00:10:26.003 --> 00:10:32.087
And we're in Sim City -- sorry -- Sims 2.

00:10:32.087 --> 00:10:39.043
We're also -- around 2000, we started doing
Internet video with our site.

00:10:39.043 --> 00:10:43.043
And we've been adopted since then by Flash --

00:10:43.043 --> 00:10:46.030
so, our friends from Macromedia and Adobe.

00:10:46.030 --> 00:10:49.027
And then, Skype and AOL Instant Messenger.

00:10:49.027 --> 00:10:54.037
And now, in Java and Sun's Java effects.

00:10:54.037 --> 00:10:58.043
Basically, we add up and we come to
a number around 2 billion installs

00:10:58.043 --> 00:11:02.053
by summing up all the numbers
of the installs of these things.

00:11:02.053 --> 00:11:05.027
In 2010, about two months ago, in February,

00:11:05.027 --> 00:11:06.090
we were acquired by Google.

00:11:06.090 --> 00:11:09.017
So it's been a very busy set of two months.

00:11:09.017 --> 00:11:16.033
We went from our Codec -- where it was at On2 --
to released open source product today.

00:11:16.033 --> 00:11:20.083
So you can imagine it's been a very busy
couple of months.

00:11:20.083 --> 00:11:23.060
In any case, we're excited about what's happened.

00:11:23.060 --> 00:11:28.060
And we talk about what WebM video is exactly.

00:11:28.060 --> 00:11:35.057
WebM is kind of a container format that we
borrowed a spec from the core codec team

00:11:35.057 --> 00:11:40.000
who created a format called "Matroska."

00:11:40.000 --> 00:11:44.067
Matroska can contain video and audio
and some other things.

00:11:44.067 --> 00:11:51.077
For us in the WebM spec, we're talking about
purely Vorbis audio codec and the VP8 video codec.

00:11:51.077 --> 00:11:56.010
The Vorbis audio codec is from a team called "ZIF."

00:11:56.010 --> 00:12:00.090
It's a great audio codec -- 
think very highly of it.

00:12:00.090 --> 00:12:07.090
VP8 is a codec that we developed at On2
and is now what we open source today.

00:12:09.087 --> 00:12:12.073
Move on.
So what's great about WebM?

00:12:12.073 --> 00:12:14.047
We think the video quality is
great.

00:12:14.047 --> 00:12:18.017
We think that you'll see that it's not blurry.

00:12:18.017 --> 00:12:20.010
It's sharp. 
There's not blocks.

00:12:20.010 --> 00:12:24.013
We compare favorably with other codecs that are out.

00:12:24.013 --> 00:12:28.007
We have strong playback performance --
or fast playback performance.

00:12:28.007 --> 00:12:34.053
In other words, it'll play on your low-end processes-
your Atoms, your Snapdragons,

00:12:34.053 --> 00:12:38.003
running on cell phones and the like.

00:12:38.003 --> 00:12:41.093
We also have great, live, 
2-way encoder performance.

00:12:41.093 --> 00:12:48.093
I don't -- we mentioned on the last slide
that Skype was a user of ours.

00:12:49.027 --> 00:12:52.010
We do very well in realtime performance.

00:12:52.010 --> 00:12:54.013
Also, obviously, we're open.

00:12:54.013 --> 00:13:00.053
And that means that anybody could download
and use it in any way that they see fit.

00:13:00.053 --> 00:13:05.000
We think that that has a very --
some very unique advantages.

00:13:05.000 --> 00:13:08.040
You won't be paying a royalty.

00:13:08.040 --> 00:13:11.063
We're also -- we've also -- 
I'm sure you've seen --

00:13:11.063 --> 00:13:15.060
we've got some great hardware
support coming out of the gate.

00:13:15.060 --> 00:13:18.050
We have a lot of vendors that
have already jumped up and said,

00:13:18.050 --> 00:13:20.010
"We're going to support this format."

00:13:20.010 --> 00:13:22.087
We'll have a slide to talk about each of these.

00:13:22.087 --> 00:13:25.070
I also -- sorry -- we don't want
to do short
shift.

00:13:25.070 --> 00:13:31.097
We also have a lot of tools support from companies
like Sorenson and various others

00:13:31.097 --> 00:13:37.067
who are providing encoders that
will produce our video format.

00:13:37.067 --> 00:13:39.007
I keep calling it "our video format."

00:13:39.007 --> 00:13:41.083
It's an open video format.

00:13:41.083 --> 00:13:44.017
I'm going to talk a little bit about video quality.

00:13:44.017 --> 00:13:45.087
This is a PSNR graph.

00:13:45.087 --> 00:13:50.050
I'm sure very -- unless you've worked with video
before, you have no idea what this means.

00:13:50.050 --> 00:13:52.080
So I'm going to talk a little bit about that.

00:13:52.080 --> 00:13:54.080
There are two axes.

00:13:54.080 --> 00:14:00.010
On the horizontal axis is "bitrate"
and "kilobits per second."

00:14:00.010 --> 00:14:05.043
On the vertical axis is basically a metric of quality.

00:14:05.043 --> 00:14:07.053
It's called "PSNR."

00:14:07.053 --> 00:14:13.033
If you were to take a look at -- 
you follow along a straight line across --

00:14:13.033 --> 00:14:18.023
you're basically saying 
"All of these points have the same video quality."

00:14:18.023 --> 00:14:24.047
So for us here, if you follow the fixed
quality across to about 2800 kilobits,

00:14:24.047 --> 00:14:30.067
you'll see that VP8 achieved
on this clip a PSNR of 25.5.

00:14:30.067 --> 00:14:36.077
Following the 25.5 line across,
you come to about 3400 kilobits for 264.

00:14:36.077 --> 00:14:40.000
So, on this specific clip
with the settings that we used,

00:14:40.000 --> 00:14:46.003
we got about 600 kilobit savings over the 264.

00:14:46.003 --> 00:14:49.047
We've tested this on a lot of different clips.

00:14:49.047 --> 00:14:57.043
At On2, we had about 70 clips that we were
typically using that cut from high def down to QCIF--

00:14:57.043 --> 00:15:08.010
so that's high def being 1080p -- so 1920
pixels by 1080 high, 720p, 1280, 720,

00:15:08.010 --> 00:15:15.030
all the way down to image sizes like 176 x 144.

00:15:15.030 --> 00:15:22.030
We do very well, and we compare very favorably
against other codecs like 264, on a very wide set.

00:15:23.020 --> 00:15:27.033
Now that we've become part of Google,
obviously, we have a much larger test set.

00:15:27.033 --> 00:15:34.030
[chuckling] We can talk about hundreds
of thousands of videos as opposed to,

00:15:34.030 --> 00:15:38.047
you know, the 70 that we're talking about now.

00:15:38.047 --> 00:15:40.063
So. I'm just sliding through these.

00:15:40.063 --> 00:15:42.097
I don't think anybody needs to, you know --

00:15:42.097 --> 00:15:46.033
I can tell you that each one of the graphs
that I'm showing you is --

00:15:46.033 --> 00:15:49.020
we are, in fact, comparing favorably. 

00:15:49.020 --> 00:15:51.047
But that is not to say that we always win.

00:15:51.047 --> 00:15:58.017
There are clips that we are not doing as well on.

00:15:58.017 --> 00:16:01.040
One thing we're also doing quite well on is,
playback performance.

00:16:01.040 --> 00:16:04.047
But, there's a couple caveats
when I show these graphs.

00:16:04.047 --> 00:16:09.000
First, the comparisons that we're doing --
I'm running in single core mode.

00:16:09.000 --> 00:16:13.000
The codec does support multiple cores decoding.

00:16:13.000 --> 00:16:15.090
But we haven't done a great job on that yet,
and we're going to.

00:16:15.090 --> 00:16:19.013
I'll talk about some of the To Do's at a later point.

00:16:19.013 --> 00:16:23.083
Another thing that I should mention is
the comparison is done in software.

00:16:23.083 --> 00:16:26.000
We're not using hardware acceleration.

00:16:26.000 --> 00:16:32.043
And there is some hardware acceleration 
for 264 that are on PCs and cell phones today.

00:16:32.043 --> 00:16:35.037
So I wanted to point that out.

00:16:35.037 --> 00:16:40.037
Basically, we are about 20 percent --
oh, one final thing --

00:16:40.037 --> 00:16:42.063
we haven't fully optimized our decoder yet.

00:16:42.063 --> 00:16:48.050
We're not using the two most recent
instruction sets from Intel and AMD --

00:16:48.050 --> 00:16:52.050
the SSE 2 instruction set
or the SSE 3 instruction set.

00:16:52.050 --> 00:16:58.037
So we think that we can actually get a good boost
over where we are today in performance.

00:16:58.037 --> 00:17:00.040
Right now, we have a couple of profiles.

00:17:00.040 --> 00:17:06.067
Our Profile 0 -- which is our highest quality,
maybe slowest to decode --

00:17:06.067 --> 00:17:13.067
is running about 15 to 20 percent faster than 264
and it's high-profile -- on high-profile material.

00:17:17.020 --> 00:17:21.087
P1 -- which is our profile that competes well
with Baseline --

00:17:21.087 --> 00:17:26.003
is actually slower today on the newest machines.

00:17:26.003 --> 00:17:30.037
But we think -- and I'll show you another slide --
now that,

00:17:30.037 --> 00:17:34.093
if you take SSE 2 and 3 out of the equation
by going to an older machine,

00:17:34.093 --> 00:17:40.057
in fact, our Profile 1 is actually performing
faster than Baseline.

00:17:40.057 --> 00:17:43.017
So I think you'll see that we are --

00:17:43.017 --> 00:17:49.037
we compare very favorably to these codecs
on the playback performance side.

00:17:49.037 --> 00:17:54.003
We also -- I don't want to skip over --
Atom is a very important possessor,

00:17:54.003 --> 00:17:56.083
because it's used in a lot of netbooks today.

00:17:56.083 --> 00:18:00.027
And Chrome OS will be supporting atom.

00:18:00.027 --> 00:18:08.020
We are performing quite well on the Atom processor
in comparison to software decodes of 264.

00:18:08.020 --> 00:18:15.023
Snapdragon is a processor that
uses an ARM neon instruction set.

00:18:15.023 --> 00:18:19.077
It's in your Nexus 1 phones, if you have them.

00:18:19.077 --> 00:18:21.023
We perform quite well.

00:18:21.023 --> 00:18:26.093
We can just about do 720p in software.

00:18:26.093 --> 00:18:28.037
As long as you're not doing anything else.

00:18:28.037 --> 00:18:31.020
If you had to do audio decode in software
or something along those lines,

00:18:31.020 --> 00:18:33.013
you'd have a little bit of trouble.

00:18:33.013 --> 00:18:37.097
But we're very, very close.

00:18:37.097 --> 00:18:42.097
I also mentioned earlier that
we do well at live compress --

00:18:42.097 --> 00:18:44.087
live or 2-way compression. 

00:18:44.087 --> 00:18:46.090
We actually have inside of our compressor --

00:18:46.090 --> 00:18:51.050
we have 16 different internal
complexities that we can switch between.

00:18:51.050 --> 00:18:55.083
We can -- on a typical -- I think it was a 2-core --

00:18:55.083 --> 00:19:02.007
we can run about 3 milliseconds per frame
for 640x480 software compress.

00:19:02.007 --> 00:19:06.043
We can use as much as you're willing
to give up in terms of cycles --

00:19:06.043 --> 00:19:09.097
up to somewhere around 45 milliseconds per frame.

00:19:09.097 --> 00:19:13.080
So we'll get better quality if we spend more time.

00:19:13.080 --> 00:19:17.087
The blue line in the back that you see
is actually a line

00:19:17.087 --> 00:19:21.030
that describes our codec as of two months earlier.

00:19:21.030 --> 00:19:25.033
I want to point that we've been rapidly
improving this codec.

00:19:25.033 --> 00:19:30.053
And we think that there's quite a bit more
that we can do to improve it further.

00:19:30.053 --> 00:19:34.037
I don't want to neglect our friends at ARM.

00:19:34.037 --> 00:19:37.073
We also have an encoder for ARM processes.

00:19:37.073 --> 00:19:39.050
This is that same Snapdragon.

00:19:39.050 --> 00:19:44.010
And here we're basically able to do 640x480
at a 30 frames per second.

00:19:44.010 --> 00:19:47.023
Again, using a hundred percent of the CPU right now.

00:19:47.023 --> 00:19:51.080
We think we can do better, 
but that's where we are.

00:19:51.080 --> 00:19:54.047
I talked about another advantage being openness.

00:19:54.047 --> 00:19:57.063
And I think Kevin hit on that.

00:19:57.063 --> 00:19:59.017
Here's one way that you could contribute -- 

00:19:59.017 --> 00:20:03.030
that's to go to our website --
WebMproject.org --

00:20:03.030 --> 00:20:07.030
and download the
source code and start making check-ins.

00:20:07.030 --> 00:20:11.073
We are very serious about the fact
that we want community involvement.

00:20:11.073 --> 00:20:16.047
It is our plan to support two kind
of different bit streams --

00:20:16.047 --> 00:20:19.087
one which will be bit stream compliant
and will stay with that bit stream

00:20:19.087 --> 00:20:25.037
and another for experimentation
that's outside of the straight bit stream.

00:20:25.037 --> 00:20:32.070
In that case, we're talking about wild ideas
that people have to improve the codec.

00:20:32.070 --> 00:20:35.040
There's a lot of things that we
think that people could do--

00:20:35.040 --> 00:20:36.030
the community could do. 

00:20:36.030 --> 00:20:40.010
There's -- for instance, 
if you're familiar with digital cinema--

00:20:40.010 --> 00:20:46.080
the people that do digital cinema do not use
typical RGB with 8 bits for R,

00:20:46.080 --> 00:20:48.063
8 bits for G, and 8 bits for B.

00:20:48.063 --> 00:20:52.033
They go up to 10 bits or even 12 bits.

00:20:52.033 --> 00:20:54.063
That's something we haven't done in our codec yet.

00:20:54.063 --> 00:21:01.097
That's a feature that we think that
somebody using our codec could add.

00:21:01.097 --> 00:21:03.073
There's other things, obviously.

00:21:03.073 --> 00:21:05.040
If you guys know about security cameras.

00:21:05.040 --> 00:21:10.003
If you've ever seen dome cameras
where they're taking a picture, and the video is --

00:21:10.003 --> 00:21:13.053
they're actually capturing through a dome,
so they get a 360 view.

00:21:13.053 --> 00:21:19.037
We imagine that those guys have specific needs
around how the motion moves.

00:21:19.037 --> 00:21:23.087
So we are very serious about our willingness
to accept contributions.

00:21:23.087 --> 00:21:27.097
And we have kind of two tracks for doing that.

00:21:27.097 --> 00:21:31.057
And I mentioned earlier that we have
a couple of things we haven't done yet.

00:21:31.057 --> 00:21:33.073
Faster decoding is one of them.

00:21:33.073 --> 00:21:37.050
We think that we can get very strong improvements

00:21:37.050 --> 00:21:41.057
by doing some multicore stuff
that we haven't yet gotten in.

00:21:41.057 --> 00:21:45.060
We haven't used the SSC 2 or SSC 3 instruction sets.

00:21:45.060 --> 00:21:48.020
We haven't done much with GPU decoding yet.

00:21:48.020 --> 00:21:51.057
All of these things are areas
that we are currently working on,

00:21:51.057 --> 00:21:54.043
and we hope to get in soon.

00:21:54.043 --> 00:21:59.030
We also think that we can improve the quality
of the codec in a lot of different ways.

00:21:59.030 --> 00:22:02.027
There's features that we could add.

00:22:02.027 --> 00:22:05.080
We also think -- one of the things
that we did in our release is --

00:22:05.080 --> 00:22:09.063
our best quality mode is pretty darn slow.

00:22:09.063 --> 00:22:13.050
We think we can do a lot better in our best
quality mode to make it a lot faster.

00:22:13.050 --> 00:22:20.023
And that will have a good impact on people producing
the absolutely best quality that we have.

00:22:20.023 --> 00:22:24.070
We also think that there's subjective quality
improvements that we could do.

00:22:24.070 --> 00:22:28.077
Imagine that there's a person standing
in front of a screen

00:22:28.077 --> 00:22:31.053
and there's white noise playing in the background.

00:22:31.053 --> 00:22:34.053
Really, you want the compressor to do a good job,

00:22:34.053 --> 00:22:39.090
potentially focusing on the person's face
as opposed to the stuff in--

00:22:39.090 --> 00:22:41.023
the white noise in -- the background.

00:22:41.023 --> 00:22:43.073
Our compressor right now doesn't
do anything like that,

00:22:43.073 --> 00:22:45.097
and I think we could do a lot better.

00:22:45.097 --> 00:22:49.003
And we have some internal features
that we are using --

00:22:49.003 --> 00:22:51.047
we defined in the bit stream,

00:22:51.047 --> 00:22:55.060
but really, haven't fully implemented
except in a researchy way.

00:22:55.060 --> 00:22:57.073
In other words, we know that they're beneficial,

00:22:57.073 --> 00:22:59.080
but we don't have them in our production build yet.

00:22:59.080 --> 00:23:02.060
So we think that we can get a lot better
than we are today.

00:23:02.060 --> 00:23:05.080
And we think we will in the short-term.

00:23:05.080 --> 00:23:09.097
And we also hope that the community
will help us do this.

00:23:09.097 --> 00:23:12.097
In terms of the browsers that support WebM --

00:23:12.097 --> 00:23:17.003
if you sat through Sundar's keynote speech,

00:23:17.003 --> 00:23:21.070
you saw that Mozilla Firefox will be supporting it.

00:23:21.070 --> 00:23:24.057
Opera is supporting it.

00:23:24.057 --> 00:23:29.000
Obviously, our own browser -- Chromium and Chrome --
will be supporting it.

00:23:29.000 --> 00:23:30.083
And we're really hopeful that everybody else will.

00:23:30.083 --> 00:23:35.010
I mean, we'd love to see Internet Explorer
and Safari on board supporting this.

00:23:35.010 --> 00:23:39.070
All of this info you can find on WebMproject.org.

00:23:39.070 --> 00:23:46.000
So you can go and find where to download these
browsers and to start playing with them.

00:23:46.000 --> 00:23:47.053
We talked about industry support.

00:23:47.053 --> 00:23:50.087
If you went to Sundar's keynote,
you saw this same slide.

00:23:50.087 --> 00:23:53.050
There are a lot of software vendors--

00:23:53.050 --> 00:23:57.093
people that are using it right out the gate
for things like video conferencing.

00:23:57.093 --> 00:24:04.093
There are vendors that will be producing tools
that will let you encode in WebM.

00:24:08.027 --> 00:24:10.073
There are also a lot of hardware
vendors.

00:24:10.073 --> 00:24:12.010
And just -- I want to point out that --

00:24:12.010 --> 00:24:15.043
just because a name doesn't appear
on the list doesn't mean that

00:24:15.043 --> 00:24:19.010
they aren't working with us and moving forward.

00:24:19.010 --> 00:24:21.073
There are a lot of people that are --

00:24:21.073 --> 00:24:27.030
I think you'll see that in the coming days
that there will be more of these.

00:24:27.030 --> 00:24:37.073
And I'm going to pass it over to Kevin again to
show you the demo of VP8 playing in YouTube.

00:24:43.083 --> 00:24:47.000
&gt;&gt;Kevin Carle: All right, so you can see this is a --
the normal YouTube watch page --

00:24:47.000 --> 00:24:50.000
if you opt in, like I said, to slash HTML5,

00:24:50.000 --> 00:24:55.050
you can get the HTML5 browser
wherever your web browser will support it.

00:24:55.050 --> 00:24:57.083
If you're on one that doesn't support h.264,

00:24:57.083 --> 00:24:59.047
you'll want to see if for videos as WebM.

00:24:59.047 --> 00:25:03.083
If you're on something, say Chrome,
you'll see it for pretty much all videos.

00:25:03.083 --> 00:25:07.033
It's a nice little visual thing here so that
you can see if you're on HTML5.

00:25:07.033 --> 00:25:18.033
We have the HTML5 logo, and we also have the WebM
logo when you're playing in the WebM format.

00:25:18.033 --> 00:25:22.073
And that's just me not knowing
how to use a Mac. Sorry.

00:25:22.073 --> 00:25:27.080
You can see it there. 
This is the Chrome speed test video.

00:25:27.080 --> 00:25:38.083
[lots of noises from the video]

00:25:38.083 --> 00:25:41.020
The 1280x720 version.

00:25:41.020 --> 00:25:41.093
[blasting sound] 

00:25:51.017 --> 00:26:14.077
[exploding sound]

00:26:21.017 --> 00:26:23.003
And we updated the player this week.

00:26:23.003 --> 00:26:27.000
If you've seen our flash player in the last
month or so, then it has this new look,

00:26:27.000 --> 00:26:29.093
and we updated the HTML5 player this week to match.

00:26:29.093 --> 00:26:33.033
So we have all the new controls here.

00:26:33.033 --> 00:26:35.037
And videos with captions.

00:26:35.037 --> 00:26:37.083
You'll see the captions and so on.

00:26:37.083 --> 00:26:39.070
There's the new player. 

00:26:50.063 --> 00:26:54.063
&gt;&gt;Jim Bankoski: Okay, I would like
to introduce Dave Mendels.

00:27:03.083 --> 00:27:07.003
&gt;&gt;David Mendels: Hi, I'm David.
Nice to meet you.

00:27:07.003 --> 00:27:08.047
This is a cool event. 

00:27:08.047 --> 00:27:10.087
I want to thank folks at Google for having us.

00:27:10.087 --> 00:27:11.077
It's exciting to be here.

00:27:11.077 --> 00:27:15.090
It's exciting to be one of the partners
in the WebM announcement.

00:27:15.090 --> 00:27:18.040
Is the microphone working?

00:27:18.040 --> 00:27:20.067
I think that was human error, 
not microphone error.

00:27:20.067 --> 00:27:22.050
I was too far away. 

00:27:22.050 --> 00:27:24.007
I'll say again.
I'm David Mendels.

00:27:24.007 --> 00:27:25.080
Thank you to Google for having us here.

00:27:25.080 --> 00:27:28.063
It's a great event. 
Really cool.

00:27:28.063 --> 00:27:31.057
We're excited to be one of the partners
involved in the WebM announcement --

00:27:31.057 --> 00:27:34.067
And I wanted to talk a little bit about video
and what Brightcove is doing

00:27:34.067 --> 00:27:36.077
and what we're going to be doing with WebM.

00:27:36.077 --> 00:27:44.057
So -- first of all, 
when you think about video on the web,

00:27:44.057 --> 00:27:46.010
there's lots of different problems to solve.

00:27:46.010 --> 00:27:49.003
And a lot of people who haven't thought
about it and haven't published video think,

00:27:49.003 --> 00:27:51.007
"Oh, it's just about playing a video."

00:27:51.007 --> 00:27:53.067
You've got, you know, you need a video tag
or you need a flash player.

00:27:53.067 --> 00:27:55.080
You need a play button, and you play a video.

00:27:55.080 --> 00:27:59.077
And the fact is that the playback problem is
probably the simplest problem that people have.

00:27:59.077 --> 00:28:01.060
There's a whole range of problems
that people have

00:28:01.060 --> 00:28:04.080
when they want to do complex publishing
that involves video.

00:28:04.080 --> 00:28:06.047
So, playback is the simplest problem.

00:28:06.047 --> 00:28:09.030
But today, even that has become increasingly complex

00:28:09.030 --> 00:28:13.027
because of the fragmentation of the runtime
environments -- whether you're --

00:28:13.027 --> 00:28:15.053
 Are you targeting flash?
Are you targeting HTML5?

00:28:15.053 --> 00:28:17.093
Are you targeting both, 
depending on which device you're on?

00:28:17.093 --> 00:28:22.007
Are you doing different form factors
for different devices --

00:28:22.007 --> 00:28:26.067
FlashPlayer 10.1, HTML5 and devices --
iPhone and iPad, etc.

00:28:26.067 --> 00:28:30.000
And so, there's increasing complexity
even on the playback side.

00:28:30.000 --> 00:28:32.070
Well, when we talked to our customers --
and we --

00:28:32.070 --> 00:28:34.060
we're involved in publishing and streaming --

00:28:34.060 --> 00:28:38.023
oh, I don't know -- on tens of thousands
of web properties,

00:28:38.023 --> 00:28:39.077
hundreds of millions of videos,

00:28:39.077 --> 00:28:42.033
billions of video plays a month.

00:28:42.033 --> 00:28:44.090
The set of problems that our customers
are dealing with

00:28:44.090 --> 00:28:48.087
and that we try to help our customers with are
much more than just playing back the video.

00:28:48.087 --> 00:28:55.030
So how do you create an experience that you can
encapsulate and share into a Facebook stream?

00:28:55.030 --> 00:28:57.097
How do you do subtitling and closed captioning?

00:28:57.097 --> 00:28:59.047
How do you get analytics on that video?

00:28:59.047 --> 00:29:00.097
How do you do engagement analytics?

00:29:00.097 --> 00:29:02.087
How do you do audience demographics?

00:29:02.087 --> 00:29:07.083
How do you do advertising insertions and prerolls
and midrolls and postrolls and overlays?

00:29:07.083 --> 00:29:11.000
How do you do it with an ad network?
How do you do it with an ad server?

00:29:11.000 --> 00:29:11.067
And I could go on.

00:29:11.067 --> 00:29:16.080
There's just a wide range of things up here
that you have to do across a wide range of platforms.

00:29:16.080 --> 00:29:19.017
And it's a complicated world.

00:29:19.017 --> 00:29:22.073
There's a lot of fragmentation today
in what you have to deal with.

00:29:22.073 --> 00:29:24.017
So briefly, what Brightcove is,

00:29:24.017 --> 00:29:26.090
because some of you might know
who we are and some of you might not.

00:29:26.090 --> 00:29:30.020
We're a Cloud-based, online, video platform.

00:29:30.020 --> 00:29:32.087
So we've got the Cloud right there in the middle.

00:29:32.087 --> 00:29:34.007
So what does that mean?

00:29:34.007 --> 00:29:37.083
What we do for our customers is,
you upload a video to us.

00:29:37.083 --> 00:29:41.097
And we take care of encoding it in the Cloud
into multiple renditions

00:29:41.097 --> 00:29:44.030
at different bit rates and different codecs.

00:29:44.030 --> 00:29:48.017
And then, we provide meta data management.

00:29:48.017 --> 00:29:49.067
We will generate players.

00:29:49.067 --> 00:29:55.083
We have a means of customizing those players --
integrating them with Twitter or with Facebook.

00:29:55.083 --> 00:29:57.070
We have ways to integrate analytics --

00:29:57.070 --> 00:30:01.027
both our own analytics as well as Google analytics
as well as other third parties

00:30:01.027 --> 00:30:05.010
like Neilson or Omniture or Quantcast.

00:30:05.010 --> 00:30:09.073
And then, we provide all of the hooks to integrate
with basically any ad technology out there

00:30:09.073 --> 00:30:11.063
for video advertising on the web.

00:30:11.063 --> 00:30:12.067
If you want to do that -- 

00:30:12.067 --> 00:30:14.077
if you don't want to do that, that's great too.

00:30:14.077 --> 00:30:16.027
And so, that's what we do.

00:30:16.027 --> 00:30:19.050
And so, we solve that whole range
of problems end to end from,

00:30:19.050 --> 00:30:21.077
"Hey I have a video. I want to play it.

00:30:21.077 --> 00:30:22.083
I want to know who's watching it.

00:30:22.083 --> 00:30:25.070
I want to monetize that with advertising,

00:30:25.070 --> 00:30:29.020
and I don't want to manage all of that complexity
across different devices."

00:30:29.020 --> 00:30:32.003
And on the playback side,
we do that across different screens --

00:30:32.003 --> 00:30:33.080
so we do HTML5.

00:30:33.080 --> 00:30:40.037
If you come to a device today from iPhone
or iPad and also Android or other devices--

00:30:40.037 --> 00:30:42.003
we do flash. 

00:30:42.003 --> 00:30:46.000
And our aim is to make that process really simpler.

00:30:46.000 --> 00:30:53.013
So every content publisher in the world doesn't also
have to manage this complex matrix of browsers,

00:30:53.013 --> 00:30:55.040
Flash players, codecs --

00:30:55.040 --> 00:30:57.033
but they can focus on publishing video 

00:30:57.033 --> 00:31:01.017
whatever their business model or communications
strategy is around publishing video.

00:31:01.017 --> 00:31:05.000
And then, we can take care of detecting
that device, and going forward --

00:31:05.000 --> 00:31:06.090
detect the device, detect the runtime,

00:31:06.090 --> 00:31:10.087
and then, select the right rendition
and the right player to play back.

00:31:10.087 --> 00:31:17.003
So our news today is pretty straightforward is that
we are adding to that mix of stuff we're doing,

00:31:17.003 --> 00:31:18.087
support for WebM.

00:31:18.087 --> 00:31:22.093
And somebody asked me earlier today,
"So why are you doing WebM?"

00:31:22.093 --> 00:31:27.053
It's a pretty straightforward answer --
it's good, it's free, and it's open.

00:31:27.053 --> 00:31:29.040
Not a very complicated story.

00:31:29.040 --> 00:31:31.010
We think that's a great thing for the web.

00:31:31.010 --> 00:31:33.083
Our whole business and our whole vision
resolves around

00:31:33.083 --> 00:31:36.030
more and more people being able to publish video --

00:31:36.030 --> 00:31:38.003
whatever video experiences they're trying to create--

00:31:38.003 --> 00:31:40.030
whether that's personal or commercial,

00:31:40.030 --> 00:31:44.053
whether it's entertainment or news
or any other kind of communication.

00:31:44.053 --> 00:31:47.070
So the easier it is for people
to do that across devices,

00:31:47.070 --> 00:31:50.033
across browsers across different experiences,
the better.

00:31:50.033 --> 00:31:52.060
So we think WebM's a great thing.

00:31:52.060 --> 00:31:56.027
We will still support h.264.
We support h.264 today.

00:31:56.027 --> 00:32:03.093
And we'll do both across both Flash and HTML5
so that whatever device you're targeting,

00:32:03.093 --> 00:32:06.083
you can get a great playback experience
and a great user experience.

00:32:06.083 --> 00:32:13.040
So we're not interested in our customers
being collateral damage in the platform wars

00:32:13.040 --> 00:32:17.080
among different vendors here who are fighting
for one platform or another.

00:32:17.080 --> 00:32:18.080
Our take is,

00:32:18.080 --> 00:32:21.007
"If you have video content to publish,
we will help you publish it.

00:32:21.007 --> 00:32:24.060
We'll get it in the right format, 
in the right device, at the right time."

00:32:24.060 --> 00:32:26.053
And so, WebM will be a core part of that.

00:32:26.053 --> 00:32:28.067
And we've already got it up and running.

00:32:28.067 --> 00:32:30.043
It's in our Cloud-based encoding.

00:32:30.043 --> 00:32:31.097
We'll have a demo to show you in a minute.

00:32:31.097 --> 00:32:34.077
And that'll be available to all
of our customers later in the year.

00:32:34.077 --> 00:32:36.060
And our customers -- 
just to give you some perspective -- 

00:32:36.060 --> 00:32:38.073
range from Sony music,

00:32:38.073 --> 00:32:41.000
that might be doing tens of thousands
of music videos,

00:32:41.000 --> 00:32:46.023
to the New York Times or Fox Entertainment-- 
if you watch House or 24 or any of those shows--

00:32:46.023 --> 00:32:50.003
all the way down to individual
churches or nonprofits.

00:32:50.003 --> 00:32:52.097
So we range the whole gamut of customers.

00:32:52.097 --> 00:32:55.097
And anybody interested in publishing
can take advantage of Brightcove

00:32:55.097 --> 00:33:02.000
either through a set of user interfaces
or we provide rest-based APIs for everything we do.

00:33:02.000 --> 00:33:04.017
So if you're a developer --
you're building applications,

00:33:04.017 --> 00:33:07.047
you're building content management systems -- and
you want to integrate with a video publishing system

00:33:07.047 --> 00:33:10.043
that will help you take advantage of WebM,

00:33:10.043 --> 00:33:13.050
help you publish those players
without having to do all the work yourselves,

00:33:13.050 --> 00:33:16.067
you can take advantage of the plumbing
we've basically built in the Cloud.

00:33:16.067 --> 00:33:18.010
So that's what we do.

00:33:18.010 --> 00:33:20.050
And the last piece is, 
I just want to introduce Bob Mason.

00:33:20.050 --> 00:33:22.060
Bob is our co-founder and CTO.

00:33:22.060 --> 00:33:24.007
And we have a demo.

00:33:24.007 --> 00:33:26.000
It involves playing some videos.

00:33:26.097 --> 00:33:28.030
&gt;&gt;Bob Mason: Thanks, David.

00:33:28.030 --> 00:33:35.080
What I want to illustrate here is a sample
application that we built as part of this effort.

00:33:35.080 --> 00:33:41.010
What I wanted to sort of demonstrate is
this ability for us to do device detection,

00:33:41.010 --> 00:33:44.030
understanding the capabilities
of the different platforms,

00:33:44.030 --> 00:33:47.037
and then, actually rendering
out the appropriate experiences.

00:33:47.037 --> 00:33:50.043
So, on my computer here I have a vanilla install, 

00:33:50.043 --> 00:33:55.010
a Firefox, Safari in one of the latest builds
of Chrome.

00:33:55.010 --> 00:34:02.037
So if I go here to Firefox you can see
that this is a standard flash player.

00:34:02.037 --> 00:34:05.097
Nothing remarkable or interesting
around that on its own.

00:34:05.097 --> 00:34:08.027
But it gives great playback experiences,

00:34:08.027 --> 00:34:13.017
and there's a huge amount of ecosystem
support on advertising integrations,

00:34:13.017 --> 00:34:14.087
dynamic streaming playback.

00:34:14.087 --> 00:34:18.063
It's a really robust delivery platform.

00:34:18.063 --> 00:34:21.090
But if I now go to Safari, 

00:34:21.090 --> 00:34:23.093
what I want to sort of illustrate here is,

00:34:23.093 --> 00:34:26.097
this is actually an HTML5 experience.

00:34:26.097 --> 00:34:28.073
So as this page is getting loaded,

00:34:28.073 --> 00:34:32.017
there's a series of rest-based APIs
and device detection code

00:34:32.017 --> 00:34:36.030
that actually can determine
what capabilities this end user has.

00:34:36.030 --> 00:34:42.080
And we're rendering out an HTML5 experience that
has high fidelity compared to a flash experience.

00:34:42.080 --> 00:34:45.080
And you can see -- 
in this circumstance with this video --

00:34:45.080 --> 00:34:50.090
that it's actually an h.264 video 
that's being rendered in this circumstance.

00:34:50.090 --> 00:34:53.073
But if I go to the Chrome version,

00:34:53.073 --> 00:34:56.080
it's an identical HTML5 experience,

00:34:56.080 --> 00:35:03.053
but the main difference here being is that we're
actually running VP8 video through this process.

00:35:03.053 --> 00:35:05.070
So you can see it's actually working.

00:35:05.070 --> 00:35:09.083
The way this system is managed the content
can get uploaded, encoded.

00:35:09.083 --> 00:35:12.007
We actually store multiple renditions.

00:35:12.007 --> 00:35:16.023
And then, the logic at the runtime is advanced enough
to understand the best way

00:35:16.023 --> 00:35:18.073
to optimize the user experience based on

00:35:18.073 --> 00:35:22.097
what device and what platform they're connecting to
and what capabilities.

00:35:22.097 --> 00:35:24.010
Thank you.

00:35:25.053 --> 00:35:29.067
[applause]

00:35:29.067 --> 00:35:31.067
&gt;&gt;Jim Bankoski: And I think we're done
and it's questions now, right?

00:35:31.067 --> 00:35:34.017
Kevin Carle: I have one more slide. 

00:36:14.040 --> 00:36:15.093
There we go.

00:36:15.093 --> 00:36:18.017
All right, so we just had one quick slide here.

00:36:18.017 --> 00:36:20.033
Just sharing some of the development experts
as we've had at YouTube,

00:36:20.033 --> 00:36:23.077
and then, we'll lead right into the questions.

00:36:23.077 --> 00:36:27.003
So one thing that might be helpful for anyone
who wants to play around with this in YouTube.

00:36:27.003 --> 00:36:29.047
If you add the "&amp;Debug=true."

00:36:29.047 --> 00:36:34.087
We're using some closer stuff there to output
debugger information to law as you can see

00:36:34.087 --> 00:36:39.040
what video formats are available for that video,
which one we've chosen for you,

00:36:39.040 --> 00:36:41.003
all sorts of fun things.

00:36:41.003 --> 00:36:43.047
You can also just -- 
if you want to go to HTML5 for a particular video,

00:36:43.047 --> 00:36:46.053
you can add "&amp;HTML5=true."

00:36:46.053 --> 00:36:48.093
With all of these though,
including with the opt in --

00:36:48.093 --> 00:36:50.063
which I don't think was entirely
clear in here earlier -- was that,

00:36:50.063 --> 00:36:53.040
if the video was monetized, 
we will still show you Flash,

00:36:53.040 --> 00:36:55.020
because we have to show the ads. 

00:36:55.020 --> 00:36:57.000
And that's something we're working on.

00:36:57.000 --> 00:36:59.017
Like so before if you want to find WebM videos,

00:36:59.017 --> 00:37:03.080
you can add the "&amp;WebM=1" parameter to your search.

00:37:03.080 --> 00:37:08.067
And we'll probably have the UI option
for that under the advance search soon.

00:37:08.067 --> 00:37:10.063
So some choices we've made in development --

00:37:10.063 --> 00:37:14.037
we're not using a lot of the HTML5 semantic tags
for some of the video controls

00:37:14.037 --> 00:37:16.093
such as like the progress element.

00:37:16.093 --> 00:37:24.053
And this is because we have issues
around styling CSS support for those tags

00:37:24.053 --> 00:37:26.093
and just general browser support.

00:37:26.093 --> 00:37:30.003
But one nice -- but speaking of CSS,
one nice thing is that, 

00:37:30.003 --> 00:37:31.020
when you're working in HTML5,

00:37:31.020 --> 00:37:34.000
you pretty much know you're working
in a modern browser

00:37:34.000 --> 00:37:36.097
so we can use things like CSS 3 and a lot of things

00:37:36.097 --> 00:37:41.063
where you don't have to worry so much
about supporting the older browsers.

00:37:41.063 --> 00:37:47.033
One thing we've been working on is the whole
concept of the way we do fallback, content,

00:37:47.033 --> 00:37:48.057
and source selection.

00:37:48.057 --> 00:37:51.057
We don't actually use the source tags in the video.

00:37:51.057 --> 00:37:52.093
Like, we don't render them out initially.

00:37:52.093 --> 00:37:56.057
We actually do some JavaScript
before we create them,

00:37:56.057 --> 00:37:58.000
because we want to be able
to have a little more control

00:37:58.000 --> 00:38:02.027
over which source we choose based for the user.

00:38:02.027 --> 00:38:05.063
And then, we also are working on
implementing the switch back to flash

00:38:05.063 --> 00:38:07.037
on the client side if, for some reason -- 

00:38:07.037 --> 00:38:12.050
even though we think on the server you'll be
able to use HTML5, but you really can't.

00:38:12.050 --> 00:38:16.057
Like so, we're not making HTML5 default
for any browser yet, but that should be soon.

00:38:16.057 --> 00:38:20.047
So one estimation of HTML5 is, of course,
it's supported on a lot of devices.

00:38:20.047 --> 00:38:25.053
What you get is -- but the device support
is a little odd on many of them.

00:38:25.053 --> 00:38:27.070
You don't actually get the controls and so on.

00:38:27.070 --> 00:38:29.037
If there's a video element,

00:38:29.037 --> 00:38:36.020
it'll actually full screen then the video element
automatically like on some phones, tablets, and so on.

00:38:36.020 --> 00:38:37.023
So that's just something to keep in mind.

00:38:37.023 --> 00:38:43.040
You won't always have that control
even if you do create the controls yourself.

00:38:43.040 --> 00:38:46.093
One nice thing that actually got removed
to the UI this week with the action

00:38:46.093 --> 00:38:51.003
is there's client side support for variable speed
playback in HTML5.

00:38:51.003 --> 00:38:52.037
There's just a property called "playback speed,"

00:38:52.037 --> 00:38:58.093
and you can set that to whatever you want.
We had that last week. It'll be back.

00:38:58.093 --> 00:39:03.017
One thing that we found on seeking was
that it was better to pause the video,

00:39:03.017 --> 00:39:06.030
do the seek, and then replay --
than to just seek.

00:39:06.030 --> 00:39:08.030
That's something that maybe
that'd be fixed in some of the browsers.

00:39:08.030 --> 00:39:11.023
But right now, we're getting a big performance
advantage to doing that versus

00:39:11.023 --> 00:39:14.037
just issuing the "seek" command.

00:39:14.037 --> 00:39:17.043
One other thing is that, 
when we do the progress part rendering,

00:39:17.043 --> 00:39:19.083
we originally were relying on the time update events.

00:39:19.083 --> 00:39:25.027
But again, we found that a lot of browsers would
stop firing the time update events periodically.

00:39:25.027 --> 00:39:26.077
This is probably a bug that'll get fixed.

00:39:26.077 --> 00:39:30.070
But in the meantime, we actually have
a timer that fires every 500 milliseconds.

00:39:30.070 --> 00:39:34.013
And if no time update events
have happened within that time,

00:39:34.013 --> 00:39:36.000
we'll just go ahead and update
the progress part that way.

00:39:36.000 --> 00:39:41.057
So we needed that fallback in order to keep
if from just stalling out much of the time.

00:39:41.057 --> 00:39:43.053
So, we're going to open it to questions.

00:39:43.053 --> 00:39:48.070
Also wanted to mention first that we have
a YouTube developer mixer tomorrow

00:39:48.070 --> 00:39:51.040
at 6 p.m. at Jillian's across 4th street.

00:39:51.040 --> 00:39:56.070
I'll have tickets for that that anyone can pick up
if they want in this chair over here.

00:39:56.070 --> 00:39:58.047
And then, take a round of questions.
00:39:58.047,00:00:00.000

