WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.380
Hi, my name is Seth Ladd, and
welcome to this episode of

00:00:02.380 --> 00:00:05.130
"Dart Tips." This is part one
in a series about functions,

00:00:05.130 --> 00:00:08.000
the stalwart and trusty building
blocks of any app.

00:00:08.000 --> 00:00:09.960
Dart supports top-level
functions, optional

00:00:09.960 --> 00:00:13.030
parameters, nested functions,
passing functions as arguments

00:00:13.030 --> 00:00:15.220
to other functions, and more.

00:00:15.220 --> 00:00:16.760
It's not uncommon to
build an entire

00:00:16.760 --> 00:00:18.590
app using only functions.

00:00:18.590 --> 00:00:20.655
If you think Dart is only
classes and libraries, you're

00:00:20.655 --> 00:00:21.810
in for a treat.

00:00:21.810 --> 00:00:22.950
This episode will focus on

00:00:22.950 --> 00:00:24.980
defining and calling functions.

00:00:24.980 --> 00:00:25.700
Let's get started.

00:00:25.700 --> 00:00:31.530
[MUSIC PLAYING]

00:00:31.530 --> 00:00:33.520
Functions are reusable
bundles of logic.

00:00:33.520 --> 00:00:36.040
They can take zero or more
arguments, perform some work,

00:00:36.040 --> 00:00:38.040
and optionally return a value.

00:00:38.040 --> 00:00:41.140
Here's a very simple function
named meaning0fLife().

00:00:41.140 --> 00:00:43.580
The empty parentheses means this
function does not take

00:00:43.580 --> 00:00:44.600
any parameters.

00:00:44.600 --> 00:00:46.510
Use the return statement
to return a value--

00:00:46.510 --> 00:00:48.090
in this case, 42.

00:00:48.090 --> 00:00:50.120
If no return statement is
specified, the function

00:00:50.120 --> 00:00:51.850
returns null.

00:00:51.850 --> 00:00:53.630
Here's how you call
this function.

00:00:53.630 --> 00:00:54.510
So far, so good.

00:00:54.510 --> 00:00:56.700
But Dart likes to be a terse
language, so we can simplify

00:00:56.700 --> 00:01:00.110
the definition of this function
into a single line.

00:01:00.110 --> 00:01:03.010
This fat arrow syntax is
syntactic sugar for a more

00:01:03.010 --> 00:01:05.150
terse way to return the
resulting value of the

00:01:05.150 --> 00:01:08.810
expression on the right-hand
side of the fat arrow.

00:01:08.810 --> 00:01:10.870
Functions can, of course,
accept parameters.

00:01:10.870 --> 00:01:12.140
Here's an example.

00:01:12.140 --> 00:01:14.310
This code works just fine,
but this is Dart.

00:01:14.310 --> 00:01:16.750
We have optional type
annotation, so we can annotate

00:01:16.750 --> 00:01:20.640
this method's parameters
and return type.

00:01:20.640 --> 00:01:23.110
We strongly recommend using
type annotations on the

00:01:23.110 --> 00:01:24.980
surface area of your code.

00:01:24.980 --> 00:01:27.920
Any code that another user will
interact with, functions

00:01:27.920 --> 00:01:30.420
being a perfect example, should
annotate what types it

00:01:30.420 --> 00:01:32.990
expects and what type
it returns.

00:01:32.990 --> 00:01:35.040
Your fellow developers will
thank you, and your tools will

00:01:35.040 --> 00:01:37.020
give you even better feedback.

00:01:37.020 --> 00:01:39.250
Functions can take multiple
parameters.

00:01:39.250 --> 00:01:40.380
Here's an example.

00:01:40.380 --> 00:01:42.890
This function has two required
parameters-- a string for the

00:01:42.890 --> 00:01:45.720
message and an integer for the
number of exclamation points

00:01:45.720 --> 00:01:47.120
to add at the end.

00:01:47.120 --> 00:01:49.340
Exclamation points are loud,
no doubt about it.

00:01:49.340 --> 00:01:52.520
But sometimes, you may not
want to shout so loud.

00:01:52.520 --> 00:01:55.780
Of course, one option is to pass
0 at the end as a second

00:01:55.780 --> 00:01:58.470
parameter, like this
code shows.

00:01:58.470 --> 00:02:01.030
However, it is hard to read
this line of code.

00:02:01.030 --> 00:02:04.730
A casual observer may not know
what this magic 0 is.

00:02:04.730 --> 00:02:06.960
Also, wouldn't it be better to
simply leave off the second

00:02:06.960 --> 00:02:08.860
parameter if you don't
want to use it?

00:02:08.860 --> 00:02:11.690
Luckily, Dart has a way
to make this better.

00:02:11.690 --> 00:02:14.350
Wrap one or more parameters with
square brackets to make

00:02:14.350 --> 00:02:15.380
them optional.

00:02:15.380 --> 00:02:16.870
Here's an example.

00:02:16.870 --> 00:02:19.650
Notice how the function now
checks if exclamations is

00:02:19.650 --> 00:02:22.510
null, which is the value of the
parameter if it was not

00:02:22.510 --> 00:02:24.960
provided by the caller.

00:02:24.960 --> 00:02:27.100
Now that the second parameter
is optional, you can

00:02:27.100 --> 00:02:29.210
optionally omit it when
you call the function.

00:02:29.210 --> 00:02:30.920
Here's an example.

00:02:30.920 --> 00:02:33.860
We made this function more
flexible and easier to use.

00:02:33.860 --> 00:02:35.870
However, there is still
another problem here.

00:02:35.870 --> 00:02:38.510
The second parameter, if it is
provided, still looks a bit

00:02:38.510 --> 00:02:40.150
like a magic number.

00:02:40.150 --> 00:02:42.840
That is, the casual observer
would not know what this magic

00:02:42.840 --> 00:02:44.520
number 5 means.

00:02:44.520 --> 00:02:47.010
Luckily, Dart has a solution
for this, too.

00:02:47.010 --> 00:02:49.190
You can make methods even
easier to read by using

00:02:49.190 --> 00:02:51.320
optional named parameters.

00:02:51.320 --> 00:02:52.670
Here's an example.

00:02:52.670 --> 00:02:55.150
I think adding a simple name
to the parameter makes it

00:02:55.150 --> 00:02:56.970
obvious what is going on.

00:02:56.970 --> 00:02:59.560
To define optional named
parameters, wrap the

00:02:59.560 --> 00:03:02.960
parameters in curly braces.

00:03:02.960 --> 00:03:05.510
To briefly recap, there are two
ways to define optional

00:03:05.510 --> 00:03:06.270
parameters--

00:03:06.270 --> 00:03:09.730
square brackets for optional
positional parameters and

00:03:09.730 --> 00:03:12.790
curly braces for optional
named parameters.

00:03:12.790 --> 00:03:15.240
There's yet another benefit
from the use of optional

00:03:15.240 --> 00:03:15.800
parameters.

00:03:15.800 --> 00:03:17.410
But first, the setup.

00:03:17.410 --> 00:03:19.490
Sometimes there's an
obvious or default

00:03:19.490 --> 00:03:20.900
answer for a parameter.

00:03:20.900 --> 00:03:23.360
Only on occasion does it make
sense to pass in something

00:03:23.360 --> 00:03:24.800
more unique.

00:03:24.800 --> 00:03:28.710
For example, here's a function
that opens an HTTP connection.

00:03:28.710 --> 00:03:30.580
The first parameter IP
address could be

00:03:30.580 --> 00:03:32.220
anything, so it's required.

00:03:32.220 --> 00:03:35.350
However, almost all HTTP
connections use port 80, so

00:03:35.350 --> 00:03:38.090
the second parameter
can be optional.

00:03:38.090 --> 00:03:40.300
The function is easier to use
now, because the user doesn't

00:03:40.300 --> 00:03:41.920
have to specify the obvious.

00:03:41.920 --> 00:03:44.960
However, the code inside the
function is a bit verbose.

00:03:44.960 --> 00:03:47.690
Plus, there's no way to express
to the user what the

00:03:47.690 --> 00:03:51.700
port's value is if it
is not provided.

00:03:51.700 --> 00:03:54.380
Luckily, Dart lets us specify
a default value for a

00:03:54.380 --> 00:03:56.660
parameter if that parameter
is optional.

00:03:56.660 --> 00:03:58.060
Here's an example.

00:03:58.060 --> 00:04:00.950
This code is simpler, the
semantics are more clear, and

00:04:00.950 --> 00:04:02.680
it is self-documenting.

00:04:02.680 --> 00:04:05.120
You can use any compiled time
constants, such as integer

00:04:05.120 --> 00:04:08.850
literals, as shown here,
for default values.

00:04:08.850 --> 00:04:12.800
Here are some examples of
using this function.

00:04:12.800 --> 00:04:14.510
However, here is an
example that might

00:04:14.510 --> 00:04:16.060
not be totally clear.

00:04:16.060 --> 00:04:19.220
Notice how I am passing null
as the second parameter.

00:04:19.220 --> 00:04:21.200
Null is a perfectly
valid value.

00:04:21.200 --> 00:04:24.280
So in this case, port will be
set to null, even though it

00:04:24.280 --> 00:04:25.960
has a default value.

00:04:25.960 --> 00:04:28.250
The lesson here is that default
values are only

00:04:28.250 --> 00:04:30.190
applied if the caller
does not supply any

00:04:30.190 --> 00:04:31.930
value for the parameter.

00:04:31.930 --> 00:04:33.970
This means, to really cover your
bases, you should check

00:04:33.970 --> 00:04:37.100
for null even when you
use default values.

00:04:37.100 --> 00:04:38.810
This brings up a
good question.

00:04:38.810 --> 00:04:41.320
In the case of an optional
parameter without a default

00:04:41.320 --> 00:04:43.720
value, can you tell the
difference between a user

00:04:43.720 --> 00:04:47.080
passing in null and not passing
in anything at all?

00:04:47.080 --> 00:04:49.620
The parameter will be
null either way.

00:04:49.620 --> 00:04:52.380
It turns out that Dart does
indeed have a way to ask if an

00:04:52.380 --> 00:04:54.250
optional parameter
was provided when

00:04:54.250 --> 00:04:55.700
the method was called.

00:04:55.700 --> 00:04:58.420
Just use the question mark
parameter syntax.

00:04:58.420 --> 00:05:01.130
Here's an example.

00:05:01.130 --> 00:05:03.170
Like the optional named
parameters, you can use

00:05:03.170 --> 00:05:06.530
default values with optional
positional parameters.

00:05:06.530 --> 00:05:08.070
There is a syntax difference,
though.

00:05:08.070 --> 00:05:10.040
You must use equals with
the positional

00:05:10.040 --> 00:05:12.130
params instead of colon.

00:05:12.130 --> 00:05:14.510
Here's an example of defining
an optional positional

00:05:14.510 --> 00:05:17.770
parameter with a
default value.

00:05:17.770 --> 00:05:20.520
Moving on, you can define
functions simply at the top

00:05:20.520 --> 00:05:21.770
level of your code.

00:05:21.770 --> 00:05:23.000
Here's an example.

00:05:23.000 --> 00:05:25.320
I love this, because it means I
don't need to wrap functions

00:05:25.320 --> 00:05:27.000
assigned [? to ?] classes.

00:05:27.000 --> 00:05:29.480
Writing a simple script with
Dart is easy because of

00:05:29.480 --> 00:05:31.340
top-level functions.

00:05:31.340 --> 00:05:33.290
Now you know that functions
can capitalize on type

00:05:33.290 --> 00:05:35.660
annotations, have both optional
positional and

00:05:35.660 --> 00:05:38.390
optional named parameters, have
default values for their

00:05:38.390 --> 00:05:40.240
optional parameters, and more.

00:05:40.240 --> 00:05:42.030
There's a lot more to
functions in Dart.

00:05:42.030 --> 00:05:44.210
And we'll cover nested
functions, functions as

00:05:44.210 --> 00:05:47.020
objects, and more in
a future episode.

00:05:47.020 --> 00:05:47.760
Thanks for watching.

00:05:47.760 --> 00:05:48.380
I'm Seth Ladd.

00:05:48.380 --> 00:05:51.210
And as we say here on "Dart
Tips," stay sharp.

00:05:51.210 --> 00:05:53.360
Click here to subscribe to our
channel for more episodes of

00:05:53.360 --> 00:05:55.660
"Dart Tips." We appreciate any
thoughts you might have for

00:05:55.660 --> 00:05:56.160
this series.

00:05:56.160 --> 00:05:57.940
Please leave them in
the comments below.

00:05:57.940 --> 00:06:00.250
And if you have any additional
questions about Dart, please

00:06:00.250 --> 00:06:02.880
drop by Stack Overflow where
Dart experts are standing by

00:06:02.880 --> 00:06:03.590
to help you out.

00:06:03.590 --> 00:06:04.840
See you next time.

