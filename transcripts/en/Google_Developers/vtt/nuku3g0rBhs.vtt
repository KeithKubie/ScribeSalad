WEBVTT
Kind: captions
Language: en

00:24:39.605 --> 00:24:41.886
seat.  Our session will begin 
soon.

00:25:12.857 --> 00:25:16.452
&gt;&gt; Welcome to Google io 2018.  
We welcome to you celebrate 

00:25:16.453 --> 00:25:22.354
platforms at goog e.  By now you
have checked into registration 

00:25:22.355 --> 00:25:27.528
to receive your badge.  You need
to ride the io shuttles and tone

00:25:27.529 --> 00:25:29.529
ter the after-hours activities 
at 

00:25:31.402 --> 00:25:33.402
Throughout the event make sure 
to visit Google.

00:25:35.265 --> 00:25:37.090
com/io or download the mobile io
app for the most up to date 

00:25:37.091 --> 00:25:41.765
schedules and      For questions
for assistance, stop by the 

00:25:41.766 --> 00:25:44.004
information desk located a 
Krause from the code labs 

00:25:44.005 --> 00:25:46.005
building or chat with 

00:25:48.917 --> 00:25:50.775
Sessions will take place in the 
amphitheater and at the eight 

00:25:50.776 --> 00:25:53.014
stages throughout the venue.  If
you haven't already, reserve a 

00:25:53.015 --> 00:25:58.698
seat for your favorite session 
the io website or Mobile App.  

00:25:58.699 --> 00:26:00.957
And, if you miss a session, 
don't worry.  Recordings will be

00:26:00.958 --> 00:26:02.958
available online 

00:26:05.425 --> 00:26:07.252
Be sure to visit the CodeLabs 
building for hands-on experience

00:26:07.253 --> 00:26:09.253
with 

00:26:10.527 --> 00:26:13.006
ready the code kiosks and 
self-paced tutorials.  Google 

00:26:13.007 --> 00:26:14.430
staff will be on hand for 
helpful advice and to provide 

00:26:14.431 --> 00:26:16.431
direction 

00:26:18.323 --> 00:26:20.141
Make time to visit the office 
hours to meet one-on-one with 

00:26:20.142 --> 00:26:22.398
Googlers and ask all your 
technical questions and get 

00:26:25.657 --> 00:26:28.285
If you are looking to network 
with Googlers and fellow 

00:26:28.286 --> 00:26:33.414
developers join one of the 
several meet ups hosted in the  

00:26:33.415 --> 00:26:35.415
Finally, we would like to invite

00:26:37.881 --> 00:26:39.955
you to visit the Sandbox domes, 
where you can explore, interact 

00:26:39.956 --> 00:26:41.956
with our 

00:26:43.812 --> 00:26:46.458
After session is done for the 
day, stick around for food, 

00:26:46.459 --> 00:26:49.502
music, drinks, and fun.  Be 
prepared foresaw prices along 

00:26:49.503 --> 00:26:53.151
the      We would like to take 
this opportunity to remind you 

00:26:53.152 --> 00:26:55.152
we are 

00:26:56.630 --> 00:26:57.239
dedicated to providing an and 
inclusive experience for 

00:26:57.240 --> 00:27:01.711
Everyone.  By attending Google 
io you agree to our code of 

00:27:01.712 --> 00:27:03.712
conduct posted throughout 

00:27:05.623 --> 00:27:07.667
Your opinion is valuable to us. 
After the event look for a 

00:27:07.668 --> 00:27:09.668
feedback 

00:27:11.568 --> 00:27:13.828
Thanks for attending and have a 
wonderful time exploring Google 

00:27:13.829 --> 00:27:15.829
io.

00:31:35.456 --> 00:31:37.456
.  .

00:31:56.454 --> 00:31:58.454
Io18

00:32:06.029 --> 00:32:08.029
.  

00:32:11.173 --> 00:32:13.173
.  

00:32:21.524 --> 00:32:23.524
.  Hash

00:35:15.581 --> 00:35:17.581
&gt;&gt; Welling come.  Thank you for 
joining.

00:35:20.985 --> 00:35:22.985
Our session will be begin soon

00:35:28.815 --> 00:35:30.815
welcome.  Thank you for joining.

00:35:34.120 --> 00:35:37.113
Our session will begin soon.  

00:35:52.088 --> 00:35:54.088
soon.

00:39:07.037 --> 00:39:09.037
&gt;&gt; Hi guys.

00:39:11.928 --> 00:39:15.807
&gt;&gt; All right.  So, we're going 
to cover what is new in Chrome 

00:39:15.808 --> 00:39:17.808
Dev Tools.

00:39:19.503 --> 00:39:21.334
&gt;&gt; PAUL IRISH:  And we're good 
go to be capturing what has been

00:39:21.335 --> 00:39:26.068
going on from the Chrome Dev 
Tools team in the past year, the

00:39:26.069 --> 00:39:28.069
the features and function 

00:39:31.563 --> 00:39:33.563
&gt;&gt; JASON MILLER:  Just says 
joke.

00:39:37.690 --> 00:39:39.345
&gt;&gt; PAUL IRISH:  We're going to 
be covering a few different 

00:39:39.346 --> 00:39:43.641
things.  We're going to go 
through offering, accessibility,

00:39:43.642 --> 00:39:48.306
performance and jaufy script 
capturing feature areas of the  

00:39:48.307 --> 00:39:50.144
&gt;&gt; PAUL IRISH:  To kick things 
off we want to look at 

00:39:50.145 --> 00:39:54.219
authoring.  In authoring this is
really the experience of us 

00:39:54.220 --> 00:39:56.447
crafting a nice user experience 
for Everyone who is enjoying 

00:39:59.523 --> 00:40:01.365
our web content, and this is 
create a nice feel, a nice look,

00:40:01.366 --> 00:40:03.366
and there is a 

00:40:07.225 --> 00:40:09.225
I can first possible way is the 
classic, the reliable way.

00:40:12.516 --> 00:40:14.546
I work in my editor, I load it 
up, I tweak things in DevTools, 

00:40:14.547 --> 00:40:18.414
you know, copy paste what I 
like, bring it back to my edit 

00:40:18.415 --> 00:40:20.507
to are, save and refresh.  That 
old save and refresh cycle.  

00:40:20.508 --> 00:40:22.508
Good.

00:40:25.603 --> 00:40:28.257
Now, previous I/O' we've also 
talked about work spaces.  This 

00:40:28.258 --> 00:40:30.328
is a way where we take your 
entire project like your get 

00:40:30.329 --> 00:40:34.383
checkout essentially, drag them 
to DevTools and DevTools can now

00:40:34.384 --> 00:40:36.384
work with that, save to 

00:40:37.482 --> 00:40:39.482
disk and you have access to the 
entire 

00:40:41.174 --> 00:40:43.025
folder there and really makes 
for a fast      &gt;&gt; PAUL IRISH:  

00:40:43.026 --> 00:40:45.276
This is great if it is your 
project, but there is also this 

00:40:46.530 --> 00:40:48.569
other case of I want to make 
changes and I don't necessarily 

00:40:48.570 --> 00:40:51.065
have, like, a get checkout of 
it, but I still want to try 

00:40:51.475 --> 00:40:53.475
things out.  And, that is what 
local overrides is 

00:40:56.987 --> 00:41:00.331
So, like Jason, if you wanted to
make changes on Paul Irish.     

00:41:00.332 --> 00:41:02.332
&gt;&gt; JASON MILLER:  Right F.

00:41:05.430 --> 00:41:07.252
&gt;&gt; PAUL IRISH: So far you would 
not have good access, so that 

00:41:07.253 --> 00:41:10.716
works for me.  But local 
overrides would work for your 

00:41:10.717 --> 00:41:12.717
de-a face meant.

00:41:13.776 --> 00:41:14.792
I'm going to go show a little 
bit of how this works in 

00:41:14.793 --> 00:41:17.086
actuality.  Let's switch over to
my screen for a 

00:41:20.975 --> 00:41:24.056
So, we have here the Google io 
extended site.  Nice little 

00:41:24.057 --> 00:41:26.057
page, but I feel like making 
some changes and it's not my 

00:41:29.974 --> 00:41:31.974
So, first thing is you will head

00:41:33.252 --> 00:41:35.498
over to sources panel, and in 
this little drop down we go to 

00:41:35.499 --> 00:41:39.582
overrides.  First thing that we 
have to do, just once, is set 

00:41:39.583 --> 00:41:41.583
this up so we just need to 

00:41:44.053 --> 00:41:46.907
So, I'm just going to go right 
in here and you just need to put

00:41:46.908 --> 00:41:53.272
this someplace on disk.  Really 
anywhere.  .  And, we're going 

00:41:53.273 --> 00:41:57.758
to be using the disk to kind of 
back all these changes.  So, 

00:41:57.759 --> 00:41:59.580
once you select, you click allow
so that DevTools has permission 

00:41:59.581 --> 00:42:03.240
to work with this folder.     &gt;&gt;
JASON MILLER:  It only gets 

00:42:06.103 --> 00:42:07.124
permission inside that folder, 
in that root?     &gt;&gt; PAUL IRISH:

00:42:07.125 --> 00:42:09.125
Yeah.  Yeah.

00:42:10.205 --> 00:42:12.205
So, I this that I is all good.

00:42:14.524 --> 00:42:16.524
And, now -- let's make some 
changes.

00:42:20.393 --> 00:42:22.393
This guy right here, actually, 

00:42:24.321 --> 00:42:27.174
&gt;&gt; JASON MILLER:  Something 
nice.     &gt;&gt; PAUL IRISH:  Let's 

00:42:27.175 --> 00:42:29.175
go -- hot pink is a good choice.
I like hot pink.

00:42:32.260 --> 00:42:34.260
&gt;&gt; JASON MILLER:  Hot pink.     
&gt;&gt; PAUL IRISH:  Wow.

00:42:37.137 --> 00:42:39.164
&gt;&gt; PAUL IRISH:  Probably needs  
&gt;&gt; JASON MILLER:  Yeah, some    

00:42:39.165 --> 00:42:41.165
&gt;&gt; PAUL IRISH:  All right.

00:42:42.484 --> 00:42:44.745
&gt;&gt; PAUL IRISH:  Now, I don't 
know if you saw that.  Let me 

00:42:44.746 --> 00:42:46.746
just do that again.  Refresh.

00:42:48.005 --> 00:42:50.005
Oh, sticking around post 
refresh.  I like that.

00:42:52.691 --> 00:42:54.531
Now, the cool thing here is that
I can make changes to kind of 

00:42:54.532 --> 00:42:56.564
anything.  Say, for instance, 
this text beneath 

00:43:02.347 --> 00:43:04.775
here, the hosted 534 viewing 
parties.  Cool.  I think that 

00:43:04.776 --> 00:43:06.611
number needs an upgrade.  I 
don't know exactly where this 

00:43:06.612 --> 00:43:08.612
text 

00:43:09.856 --> 00:43:11.856
is, it could be in the 
JavaScript file, maybe the html.

00:43:14.959 --> 00:43:16.959
So, I'm going to select and copy

00:43:18.809 --> 00:43:20.809
So, command shift P brings up 
this      &gt;&gt; PAUL IRISH:  Nice.

00:43:23.510 --> 00:43:25.344
And, I'm going to show search.  
This will s across all the files

00:43:25.345 --> 00:43:29.216
that are loaded into the page.  
And, okay.

00:43:34.898 --> 00:43:37.968
So, here we have just the html. 
All right.  Easy enough.  We can

00:43:37.969 --> 00:43:41.025
make a change to that.     &gt;&gt; 
PAUL IRISH:  Good.  We hit 

00:43:41.026 --> 00:43:43.026
control S.  And, you can see 
this little purple.

00:43:46.335 --> 00:43:47.583
That this is telling me that 
this file is linked to the 

00:43:47.584 --> 00:43:49.584
network file.

00:43:52.876 --> 00:43:54.709
And, this also means if I right 
click this and open it, this is 

00:43:54.710 --> 00:43:58.773
just, this html file that I just
changed is just a regular old 

00:43:58.774 --> 00:44:03.271
file on disk.  I can drag this 
into my texted it tore and make 

00:44:03.272 --> 00:44:05.272
changes there, and they will 

00:44:07.732 --> 00:44:10.587
instantly be reflected if I just
refresh.  Over 9,000.     &gt;&gt; 

00:44:10.588 --> 00:44:12.644
PAUL IRISH:  Nice.  So, this 
enables a lot of cool things, 

00:44:16.721 --> 00:44:18.721
and you can make dice changes, 
prototype 

00:44:19.774 --> 00:44:21.603
If you get to a point where 
you're like okay, made some 

00:44:21.604 --> 00:44:26.278
changes, they feel good, but 
were they all again?  There is 

00:44:26.279 --> 00:44:28.113
another little pain that you can
access to summarize everything 

00:44:28.114 --> 00:44:33.829
that has happened.  Again, you 
can use command shift P or you 

00:44:33.830 --> 00:44:35.830
can just open up the little menu

00:44:38.759 --> 00:44:40.178
down here on the bt the bottom 
and go to changes.  The changes 

00:44:40.179 --> 00:44:42.179
view will tell you what change.

00:44:44.607 --> 00:44:46.607
Now, in this case it is

00:44:47.956 --> 00:44:50.603
minifiedCSS society is not 
entirely useful to look at the 

00:44:50.604 --> 00:44:52.604
dif, but then again I could open
this file and pretty 

00:44:58.366 --> 00:45:00.366
print it and at that point I 
(Laughter) 

00:45:01.657 --> 00:45:03.657
&gt;&gt; PAUL IRISH:  All right.  
Let's go back to the slides.

00:45:06.588 --> 00:45:08.588
All right.

00:45:10.478 --> 00:45:13.368
So, you saw it in my demo search
across all files, and we've been

00:45:13.369 --> 00:45:15.636
looking at other Places to 
surface more content via search.

00:45:16.662 --> 00:45:18.662
&gt;&gt; JASON MILLER: Yeah.  So, one 
of the ways that we're doing 

00:45:21.343 --> 00:45:23.576
that is through improvements to 
the network search.  So, in the 

00:45:23.577 --> 00:45:27.103
network tab we've had search for
a while.  It's just like a bar 

00:45:27.104 --> 00:45:29.104
that shows up at 

00:45:32.611 --> 00:45:37.145
the bottom, and that bar is only
searching urls.  So, it's 

00:45:37.146 --> 00:45:38.581
useful, you know, if you're 
looking for something that is in

00:45:38.582 --> 00:45:42.037
the url, but not quite so useful
if you're looking for something 

00:45:42.038 --> 00:45:44.038
that isn't in the url.

00:45:45.894 --> 00:45:47.894
So, now there is a new Icon in 
here, 

00:45:48.977 --> 00:45:50.603
&gt;&gt; PAUL IRISH:  Yeah, control F.
Yeah.     &gt;&gt; JASON MILLER: And 

00:45:50.604 --> 00:45:52.604
that's going 

00:45:54.914 --> 00:45:56.954
Search sidebar searches through 
headers and their values in 

00:45:56.955 --> 00:45:58.955
addition to all those other 
pieces of information.

00:46:05.752 --> 00:46:07.784
Let's say I want to search for 
cache control headers.  It is 

00:46:07.785 --> 00:46:09.785
going to tell me whether the 

00:46:11.243 --> 00:46:13.278
browser going to cache stuff 
locally and get an overview of 

00:46:13.279 --> 00:46:15.523
what we're sending down.  If I 
hit enter on this it will show 

00:46:15.524 --> 00:46:20.605
me an aggregated list of all the
cache control headers that is 

00:46:20.606 --> 00:46:23.656
sent down.  And, you can click 
them in the left.  You can see 

00:46:23.657 --> 00:46:27.313
the details of those on the 
right.  It is very nice.  There 

00:46:27.314 --> 00:46:29.548
is still the familiar controls 
in the header for case sensitive

00:46:29.549 --> 00:46:34.227
search, RegX space search.  If 
you want to search for 

00:46:36.057 --> 00:46:37.482
authorization headers to know 
which of your requests are 

00:46:37.483 --> 00:46:39.483
authenticated, 

00:46:41.151 --> 00:46:43.396
&gt;&gt; PAUL IRISH:  If you add 
specific domains and looking up 

00:46:43.397 --> 00:46:48.067
what CSP headers      &gt;&gt; JASON 
MILLER:  Yeah.  So, we're trying

00:46:48.068 --> 00:46:50.302
to show you kind of an at a 
glance overview in this 

00:46:52.338 --> 00:46:54.163
interface, and there is other 
Places in DevTools where we have

00:46:54.164 --> 00:46:56.164
kind of similar 

00:46:57.682 --> 00:46:59.682
problems here, like huge lists 
of CSS 

00:47:03.788 --> 00:47:05.006
Raise your hand if you use CSS 
variables, custom properties.  

00:47:05.007 --> 00:47:08.276
Good stuff.  Yeah, I love them, 
too.  We use them all the time 

00:47:08.277 --> 00:47:10.525
on the Chrome Dev Tools 
themselves, and we've been 

00:47:12.773 --> 00:47:14.773
looking at it and they could 
probably 

00:47:16.447 --> 00:47:18.479
&gt;&gt; PAUL IRISH:  So, if you have 
seen some variables before they 

00:47:18.480 --> 00:47:21.972
might look a little something 
like this.     &gt;&gt; PAUL IRISH:  

00:47:21.973 --> 00:47:26.674
Good.  But then you're like what
was that again?  So, today 

00:47:26.675 --> 00:47:28.708
you'll see something a little 
bit different.  You will just 

00:47:28.709 --> 00:47:31.555
see a little color swatch place 
there.  We recognize that this 

00:47:31.556 --> 00:47:34.618
is recognizing a color value and
some of the color swatch seems 

00:47:34.619 --> 00:47:36.619
good.

00:47:38.499 --> 00:47:40.742
You can also just hover on that 
variable name and it will just, 

00:47:40.743 --> 00:47:45.003
the tool tip will resolve the 
actual value.  Works with 

00:47:45.004 --> 00:47:47.004
colors, it works with 

00:47:50.327 --> 00:47:52.570
&gt;&gt; PAUL IRISH:  But, with colors
it was one more thing that was 

00:47:52.571 --> 00:47:56.838
pretty cool.  If you open up the
color picker, down at the bottom

00:47:56.839 --> 00:47:58.855
is this kind of color pallet.  
And, this is the material design

00:47:58.856 --> 00:48:02.960
color pallet.  A lot of nice 
tasteful choices of      &gt;&gt; PAUL

00:48:02.961 --> 00:48:05.016
IRISH:  But there are a few 
other pallets available, and a 

00:48:05.017 --> 00:48:07.017
brand new one is CSS variables.

00:48:09.704 --> 00:48:11.704
You click into this and this is 

00:48:13.552 --> 00:48:13.970
listing the CSS variables that 
apply to this element right 

00:48:13.971 --> 00:48:15.971
here.

00:48:17.634 --> 00:48:19.656
So, it's basically the -- while 
there may be many, many 

00:48:19.657 --> 00:48:23.933
variables in the page, these are
only the variables that apply to

00:48:23.934 --> 00:48:24.739
this specific element via the 
cascade      &gt;&gt; JASON MILLER:  

00:48:24.740 --> 00:48:26.740
Right.  Right.     &gt;&gt; PAUL 
IRISH:  So that is kind of cool.

00:48:31.119 --> 00:48:32.960
Right now we're hovering over 
text link color if I select 

00:48:32.961 --> 00:48:34.961
this, the cool 

00:48:37.031 --> 00:48:39.891
thing is we apply a var text 
link color      &gt;&gt; JASON MILLER:

00:48:39.892 --> 00:48:43.983
Society doesn't use the hex, it 
uses the actual variable      &gt;&gt;

00:48:43.984 --> 00:48:45.984
PAUL IRISH:  What you would     
&gt;&gt; JASON MILLER:  That is pretty

00:48:47.273 --> 00:48:49.535
&gt;&gt; PAUL IRISH:  When you choose 
colors, it is important you 

00:48:49.536 --> 00:48:52.004
choose something that looks 
good, tasteful, but also 

00:48:52.005 --> 00:48:55.465
accessible.  You want to make 
sure that what you have is an 

00:48:55.466 --> 00:48:59.530
accessible choice.  So, we've 
introduced some features to make

00:48:59.531 --> 00:49:01.764
that a little bit easier.  And, 
we're going to walk through this

00:49:05.238 --> 00:49:06.874
So, I'm looking at this page and
I want to tweak the foreground 

00:49:06.875 --> 00:49:10.732
color of this text.  So, I bring
up the color picker and it says 

00:49:10.733 --> 00:49:12.575
contrast ratio right there.  It 
says it is not very good right 

00:49:12.576 --> 00:49:16.442
now.  But as I drag the color 
around, the contrast ratio is 

00:49:16.443 --> 00:49:19.516
going to update.  It's kind of 
cool.  And, if you open that 

00:49:19.517 --> 00:49:22.181
section up, you'll now get this 
line in the color pecker.

00:49:26.873 --> 00:49:29.719
So, a line a green line is bad 
and on the other side is good.  

00:49:29.720 --> 00:49:32.568
You get ratings beneath on what 
the current ratio is and what if

00:49:32.569 --> 00:49:34.569
it meets 

00:49:37.675 --> 00:49:39.336
Now, it is currently trying to 
identify what the background 

00:49:39.337 --> 00:49:41.337
color is, but there is a little 
color dropper 

00:49:44.027 --> 00:49:45.248
there if -- a little eye dropper
if you want to manually select 

00:49:45.249 --> 00:49:47.691
your background color.     &gt;&gt; 
JASON MILLER: Cool.

00:49:50.734 --> 00:49:53.175
Did I notice that you were 
editing your Lighthouse score 

00:49:53.176 --> 00:49:56.877
with that tool?     &gt;&gt; PAUL 
IRISH: I was in Lighthouse with 

00:49:56.878 --> 00:49:58.878
DevTools.

00:50:00.154 --> 00:50:01.596
I wasn't editing my score, but 
my score could use some 

00:50:01.597 --> 00:50:05.271
improvement.     &gt;&gt; JASON 
MILLER:  Right.     &gt;&gt; JASON 

00:50:05.272 --> 00:50:07.272
MILLER:  We should probably tell
them about the new 

00:50:09.741 --> 00:50:11.741
&gt;&gt; JASON MILLER:  Seems like a 
good 

00:50:13.980 --> 00:50:15.980
Yeah, last year at Google io we 
announced that we were bringing 

00:50:16.005 --> 00:50:18.005
Lighthouse into DevTools.  This 
was huge because it meant 

00:50:19.482 --> 00:50:21.925
everybody who had Chrome 
obviously has DevTools.  

00:50:21.926 --> 00:50:24.795
Everybody who has DevTools, 
which is the Chrome users now 

00:50:24.796 --> 00:50:27.042
had Lighthouse.  Nothing to 
install.  No extensions.  None 

00:50:27.043 --> 00:50:30.518
of that business.     Now, that 
kind of started us thinking, was

00:50:30.519 --> 00:50:32.757
there anything else we could do 
to kind of make Lighthouse more 

00:50:33.803 --> 00:50:37.062
helpful to people?  We're always
thinking of that, but moving 

00:50:37.063 --> 00:50:39.968
into Chrome was sort of a 
turning point here.  We want 

00:50:39.969 --> 00:50:42.217
Lighthouse to act like a real 
Lighthouse.  We want it to kind 

00:50:42.218 --> 00:50:44.218
of keep you away 

00:50:45.457 --> 00:50:47.098
from the rocks and guide you 
towards other meaningful 

00:50:47.099 --> 00:50:49.099
information that exists 

00:50:52.368 --> 00:50:54.415
So, this year I'm excited to 
announce that we are introducing

00:50:54.416 --> 00:50:57.914
some improvements that we hope 
will bridge the gap between 

00:50:57.915 --> 00:51:00.362
Lighthouse and DevTools.  And, 
I'm just going to show you my 

00:51:02.218 --> 00:51:04.218
favorite new feature of all 
time, which 

00:51:08.125 --> 00:51:10.955
View trace to stretch the 
analogy to the point of breaking

00:51:10.956 --> 00:51:12.956
unless you dig      &gt;&gt; JASON 
MILLER:  Yeah.

00:51:16.646 --> 00:51:19.281
&gt;&gt; JASON MILLER:  Lighthouse 
records a trace of your 

00:51:19.282 --> 00:51:21.517
application as it runs.  It 
loads your application, reloads 

00:51:21.518 --> 00:51:26.231
it, grabs a trace, which is 
going to be details about 

00:51:26.232 --> 00:51:28.672
JavaScript network stuff, all 
those kind of underlying pieces 

00:51:28.673 --> 00:51:32.552
of information.  We thought why 
not let people dig into the 

00:51:32.553 --> 00:51:36.217
trace.  We have it.  It is 
sitting there.  And, turns out 

00:51:36.218 --> 00:51:38.218
this is a really nice 

00:51:39.935 --> 00:51:41.935
way to kind of see why you got a
Lighthouse.

00:51:46.997 --> 00:51:51.713
I'm on Paul Irish Irish.com.  My
favorite website.  Just the 

00:51:51.714 --> 00:51:53.714
performance ought I had for 

00:51:55.189 --> 00:51:57.038
So, behind the scenes this is 
going to be reloading the page, 

00:51:57.039 --> 00:51:59.283
gathering a trace, analyzing it 
and coming up with a 

00:52:02.789 --> 00:52:04.789
pretty page and a lovely score. 
I think there, yeah.

00:52:08.953 --> 00:52:11.804
But you see now there is a view 
trace button.  Clicking this, it

00:52:11.805 --> 00:52:13.805
is actually going to 

00:52:15.076 --> 00:52:17.512
take me right over into the 
performance tab and I can dig 

00:52:17.513 --> 00:52:21.428
down into the trace that powered
that Lighthouse score, and this 

00:52:21.429 --> 00:52:23.429
is awesome because that tries 
was 

00:52:24.481 --> 00:52:26.949
run-on an emulated 3G network o 
a slow      &gt;&gt; JASON MILLER:  

00:52:26.950 --> 00:52:30.631
And, you can kind of figure out 
what exactly those odd ilgts 

00:52:30.632 --> 00:52:32.632
were derived from.

00:52:34.290 --> 00:52:36.126
Let's say you had a critical 
request chain for CSS or 

00:52:36.127 --> 00:52:40.188
something.  You can see that in 
the performance tab blocking the

00:52:40.189 --> 00:52:43.038
rest of your page rendering with
screen shots.  So, to me this is

00:52:43.039 --> 00:52:45.039
huge.

00:52:46.508 --> 00:52:48.165
&gt;&gt; PAUL IRISH:  I'm looking at 
this, and in a way you're 

00:52:48.166 --> 00:52:52.049
calling me out.  Your oo calling
my sight out at least.  I was 

00:52:52.050 --> 00:52:53.879
wondering maybe we should spend 
a few minutes and see if we can 

00:52:53.880 --> 00:52:57.138
improve      &gt;&gt; JASON MILLER:  I
think we can      &gt;&gt; PAUL IRISH:

00:52:57.139 --> 00:53:02.445
On the site a      &gt;&gt; PAUL 
IRISH:  We can make it      To 

00:53:02.446 --> 00:53:03.456
make it faster let's bring back 
one of the features we were 

00:53:03.457 --> 00:53:05.555
talking      Okay.

00:53:09.463 --> 00:53:10.705
First up, let's reload the page 
to capture a trace of the page 

00:53:10.706 --> 00:53:16.838
load.  All right.  Now, what we 
want to do is measure from the 

00:53:16.839 --> 00:53:19.399
very beginning of the html load 
right there to when the web 

00:53:19.400 --> 00:53:21.400
fonts finished loading.

00:53:22.889 --> 00:53:24.889
&gt;&gt; PAUL IRISH:  At the bottom.  
Yeah.

00:53:30.680 --> 00:53:33.957
Now in the green right there waf
files.  These are my web fonts. 

00:53:33.958 --> 00:53:35.196
Big gap before they start 
loading in.  So, we can fix 

00:53:35.197 --> 00:53:37.197
this.  This is a bit of code.

00:53:40.896 --> 00:53:42.760
Going to usury source code and 
API, copy it to the clipboard, 

00:53:42.761 --> 00:53:44.761
but really I 

00:53:48.106 --> 00:53:49.747
We're going to come over here 
and use local overrides.  We 

00:53:49.748 --> 00:53:51.748
paste them in.

00:53:53.020 --> 00:53:55.020
&gt;&gt; JASON MILLER:  Ignore the 

00:53:56.020 --> 00:54:00.425
multiple mult cursor magic.     
&gt;&gt; PAUL IRISH:  Reload.

00:54:04.113 --> 00:54:06.974
I think that is link pre-load.
Again, 2000 milliseconds before.

00:54:10.658 --> 00:54:12.480
Let's reload with the local 
overrides changes.  Now we are 

00:54:12.481 --> 00:54:17.412
pre-loading.     &gt;&gt; PAUL IRISH: 
Yeah.  Yeah.  The fonts are at 

00:54:17.413 --> 00:54:19.413
the top T. green.  Yeah.

00:54:21.893 --> 00:54:25.365
&gt;&gt; PAUL IRISH:  And our total 
time is, yeah, 13.     &gt;&gt; JASON 

00:54:25.366 --> 00:54:27.602
MILLER:  A 33.     &gt;&gt; PAUL 
IRISH:  Uh-huh.

00:54:30.657 --> 00:54:32.726
&gt;&gt; PAUL IRISH:  That is pretty 
fast      &gt;&gt; JASON MILLER:  Very

00:54:32.727 --> 00:54:34.727
impress 

00:54:36.184 --> 00:54:37.610
So, while we're talking about 
performance, there is a few 

00:54:37.611 --> 00:54:42.351
other changes.  So, you might 
see something like this if 

00:54:42.352 --> 00:54:45.193
you're looking at a trace.  You 
have the main thread.  You may 

00:54:45.194 --> 00:54:47.239
have i frames that are using 
site isolation and those are 

00:54:47.240 --> 00:54:49.240
going to be represented on a 
separate track.

00:54:51.727 --> 00:54:54.177
&gt;&gt; PAUL IRISH:  Are positioned 
on      The nice thing now is 

00:54:54.178 --> 00:54:56.178
that as you 

00:54:57.425 --> 00:54:59.667
select each track, the summary t
bottom up, the cull tree, all 

00:54:59.668 --> 00:55:03.780
that stuff at the bottom is 
going to be updating to      &gt;&gt; 

00:55:03.781 --> 00:55:05.781
JASON MILLER:  Very nice.

00:55:07.894 --> 00:55:10.133
&gt;&gt; PAUL IRISH:  Kind of cool.  
Enables also another feature 

00:55:10.134 --> 00:55:13.988
that I      Say, for instance, 
you're looking at a trace of 

00:55:13.989 --> 00:55:17.660
your web app.  You see a flame 
chart like this.  Now, in the 

00:55:17.661 --> 00:55:20.721
flame chart there is a lot of 
stuff going on.  There is a 

00:55:20.722 --> 00:55:23.621
function names like complete 
work.  Create element.  Mount 

00:55:23.622 --> 00:55:27.500
class instance.  You're like 
yeah, mount class instance      

00:55:27.501 --> 00:55:29.501
&gt;&gt; JASON MILLER:  Good old mount
&gt;&gt; PAUL IRISH:  Great.

00:55:32.378 --> 00:55:35.213
&gt;&gt; PAUL IRISH:  A number of 
frameworks also use user timing 

00:55:35.214 --> 00:55:38.877
to say when things started and 
ended.  And, usually this is 

00:55:38.878 --> 00:55:43.007
very meaningful because it is 
talking about your components.  

00:55:43.008 --> 00:55:44.868
When your components were 
mounted and rendered.  So, you 

00:55:44.869 --> 00:55:46.869
can select the user timing 

00:55:48.744 --> 00:55:50.744
track and now see that data 
summarized 

00:55:52.836 --> 00:55:54.884
&gt;&gt; PAUL IRISH:  This is really 
great.  Having this structural 

00:55:54.885 --> 00:55:59.383
profiling data come in via user 
timing saves time, because 

00:55:59.384 --> 00:56:01.384
otherwise you would be writing 

00:56:04.052 --> 00:56:06.520
all this start and end, like, 
marks yourself.  It is a big 

00:56:06.521 --> 00:56:09.988
time sync to do all this.  Here 
DevTools is doing a lot of the  

00:56:09.989 --> 00:56:11.989
&gt;&gt; JASON MILLER:  Right.

00:56:13.441 --> 00:56:14.456
Paul, you mentioned syncs and 
lifting.     &gt;&gt; JASON MILLER:  

00:56:14.457 --> 00:56:18.334
Right.  So, one of the things I 
wanted to cover is actually 

00:56:18.335 --> 00:56:20.335
related to that, and 

00:56:22.181 --> 00:56:24.181
it's a sync

00:56:29.375 --> 00:56:31.375
&gt;&gt; JASON MILLER: I think I was 

00:56:33.248 --> 00:56:36.541
&gt;&gt; JASON MILLER:  This is the 
last      &gt;&gt; JASON MILLER: No.  

00:56:36.542 --> 00:56:38.542
There is two.  There was two.

00:56:43.249 --> 00:56:45.249
&gt;&gt; JASON MILLER: There is a 
couple.

00:56:46.304 --> 00:56:49.167
&gt;&gt; PAUL IRISH:  Is that a      
&gt;&gt; JASON MILLER: It is a 

00:56:56.084 --> 00:56:58.084
&gt;&gt; JASON MILLER: So anyway.

00:57:00.161 --> 00:57:02.161
What I was going to say is it is
2018 

00:57:04.656 --> 00:57:06.656
and it is year of a sync await.

00:57:09.551 --> 00:57:11.551
So, a sync a weight is every 
part of Java at this point.

00:57:13.860 --> 00:57:16.302
We added this in DevTools.  
Amazing.  This year we're taking

00:57:16.303 --> 00:57:19.373
things a few steps further F. 
you're not familiar with Async 

00:57:19.374 --> 00:57:21.374
await, it kind of looks like 
this.

00:57:24.070 --> 00:57:25.494
You have a wrapper function, 
very important.  With the Async 

00:57:25.495 --> 00:57:27.495
keyword.  Inside of the body of 
this function 

00:57:30.428 --> 00:57:31.884
you can use the await keyword to
await on the return value on the

00:57:31.885 --> 00:57:33.885
promise.

00:57:35.922 --> 00:57:37.855
It looks like soo*erng 
synchronous code this, is 

00:57:37.856 --> 00:57:40.911
promesed under the hood but it 
is going to run kind of line by 

00:57:40.912 --> 00:57:44.966
line to you.  This will run 
Async row nowsly when it      

00:57:44.967 --> 00:57:49.221
This is fine.  Certainly fine 
for application development, but

00:57:49.222 --> 00:57:51.221
one place where this is actually
kind of annoying is down in the 

00:57:51.222 --> 00:57:53.222
console.

00:57:54.251 --> 00:57:55.056
&gt;&gt; JASON MILLER:  So, we are 
happy to announce that today the

00:57:55.057 --> 00:57:57.057
console has 

00:58:00.811 --> 00:58:04.487
&gt;&gt; JASON MILLER:  No wrapper.  
No shenanigans.  So, I will 

00:58:04.488 --> 00:58:06.921
walk-through an example and     
In this case, I'm going to await

00:58:10.576 --> 00:58:13.460
the response from this fetch 
call, which is going to connect 

00:58:13.461 --> 00:58:16.749
to a GitHub API that I googled 
it.  So, we're going to search 

00:58:16.750 --> 00:58:21.234
for work box.  We're going to 
stick that in res, then we're 

00:58:21.235 --> 00:58:23.235
going to await, no wrapper, no 

00:58:24.916 --> 00:58:27.438
promises, the value of res did 
the json.  This responds.  You 

00:58:27.439 --> 00:58:29.439
notice it dumps it straight into
the console.

00:58:33.582 --> 00:58:36.646
&gt;&gt; JASON MILLER:  Exactly.  You 
have to wait and expand it.  Get

00:58:36.647 --> 00:58:38.647
the value.  Clever hats.

00:58:40.529 --> 00:58:42.529
Finally I'm going to use a 
DevTools 

00:58:44.810 --> 00:58:46.258
&gt;&gt; JASON MILLER:  This is the 
previous result from the 

00:58:46.259 --> 00:58:51.950
console.  So, I can just do 
dollar score under sign items 

00:58:51.951 --> 00:58:54.008
map, map them over the name and 
I have the list of the 30 most 

00:58:59.530 --> 00:59:01.530
So I've been able to step 
through 

00:59:02.950 --> 00:59:05.757
line by line in a dis 
discoverable way, an Async flow.

00:59:08.205 --> 00:59:09.634
Haven't had to use wrapper, 
promises, callbacks, none of 

00:59:09.635 --> 00:59:13.124
that stuff.  The console 
supports this out of the      

00:59:13.125 --> 00:59:15.125
The interesting thing is we're 

00:59:18.097 --> 00:59:20.133
bringing this Async mentality to
the debugger.  One of the big e-

00:59:20.134 --> 00:59:22.165
changes you'll notice here is 
when stepping into Async 

00:59:24.828 --> 00:59:27.465
functions, until now if you 
stepped into an Async function 

00:59:27.466 --> 00:59:29.466
like a set time out or whatever,
we would pretty much just step 

00:59:33.812 --> 00:59:35.812
&gt;&gt; JASON MILLER:  So, let me 
show 

00:59:37.538 --> 00:59:40.809
In DevTools last year, this is 
what step time out looked like. 

00:59:40.810 --> 00:59:42.882
If I click step into on this set
time out call, step into next 

00:59:42.883 --> 00:59:44.883
function call, 

00:59:51.866 --> 00:59:53.866
&gt;&gt; JASON MILLER:  Right.

00:59:56.402 --> 00:59:58.041
Now in DevTools if I click step 
into on step time out I can step

00:59:58.042 --> 01:00:01.395
through the rest of the 
function.  So, it is kind of an 

01:00:01.396 --> 01:00:07.258
Async aware step into.  This is 
just one type of Async, though. 

01:00:07.259 --> 01:00:09.259
So, a lot of people right now 
are 

01:00:10.742 --> 01:00:12.596
spreading their work out by by 
the main thread or the 

01:00:12.597 --> 01:00:14.597
alternative is you push your 
work off the main thread into a 

01:00:17.069 --> 01:00:19.069
background thread using a web 
order, let's say.

01:00:20.335 --> 01:00:21.958
One of the hardest parts of web 
worker development is debugging 

01:00:21.959 --> 01:00:24.198
them.  These are separate 
threads.     &gt;&gt; PAUL IRISH:  It 

01:00:24.199 --> 01:00:27.249
is a little      &gt;&gt; JASON 
MILLER:  It's painful.  You're 

01:00:27.250 --> 01:00:28.886
switching context of the 
debugger going from one thread 

01:00:28.887 --> 01:00:32.769
to the other, the sidebar the is
changing, you have to wait for 

01:00:32.770 --> 01:00:36.696
post message calls to resolve 
and you can really do anything  

01:00:36.697 --> 01:00:38.697
We thought what about making all
of that a little bit easier?

01:00:41.615 --> 01:00:43.615
So, now let's see we have some 

01:00:45.686 --> 01:00:46.509
worker -- some main thread code,
right, running on the main 

01:00:46.510 --> 01:00:48.962
thread.  With new Async aware 
step into, I can 

01:00:52.835 --> 01:00:54.691
&gt;&gt; PAUL IRISH:  Into the 
creation      &gt;&gt; JASON MILLER:  

01:00:54.692 --> 01:00:57.138
-- and it drops me off on the 
first line of the worker that I 

01:00:57.139 --> 01:00:59.590
created.     &gt;&gt; JASON MILLER:  
Yeah.     &gt;&gt; JASON MILLER:  So 

01:00:59.591 --> 01:01:03.909
we can step across a thread 
boundary in DevTools now.  So, 

01:01:03.910 --> 01:01:05.910
this, is really cool.

01:01:08.025 --> 01:01:10.025
Another case would be, let's 
say, 

01:01:11.083 --> 01:01:12.734
I've created my worker, I've got
this W variable with the worker 

01:01:12.735 --> 01:01:16.793
in it, and I've got a break 
point there.  I can step into 

01:01:16.794 --> 01:01:19.080
the post message call to the 
worker and it will step across 

01:01:21.110 --> 01:01:23.973
the thread boundary and into the
worker.  It will drop me off the

01:01:23.974 --> 01:01:25.974
first line on 

01:01:27.639 --> 01:01:29.497
&gt;&gt; PAUL IRISH:  What about in 
the post message from the worker

01:01:29.498 --> 01:01:32.344
back to the      &gt;&gt; JASON 
MILLER:  It's funny you should 

01:01:32.345 --> 01:01:34.345
mention that.

01:01:36.844 --> 01:01:38.684
&gt;&gt; JASON MILLER:  We can step 
into the post message call and 

01:01:38.685 --> 01:01:42.369
get back to the main thread like
there was no thread boundary at 

01:01:42.370 --> 01:01:45.432
all and it drops us off in the 
message handler.  This is super 

01:01:45.433 --> 01:01:49.374
cool.  You're not debugging 
across the worker      &gt;&gt; PAUL 

01:01:49.375 --> 01:01:51.819
IRISH:  That's rad.  All right. 
So, before we finish up, I do 

01:01:51.820 --> 01:01:54.288
want to bring it back to the 
console for a      &gt;&gt; JASON 

01:01:54.289 --> 01:01:57.558
MILLER:  Got you.  Got you.     
&gt;&gt; PAUL IRISH:  There is some 

01:01:57.559 --> 01:02:02.233
stuff going on in the console.  
I console there are functions 

01:02:02.234 --> 01:02:04.234
that are avail lbl there and 
nowhere else.

01:02:06.951 --> 01:02:08.951
We call them the au manned line 
API.

01:02:12.061 --> 01:02:14.727
First up as spotted before, copy
&gt;&gt; JASON MILLER:  Right.     &gt;&gt; 

01:02:14.728 --> 01:02:16.581
PAUL IRISH:  Take anything you 
want, throw it in the copy 

01:02:16.582 --> 01:02:20.885
method, it copies it to the clip
poured, it's so nice you pass it

01:02:20.886 --> 01:02:23.552
like an element it will give you
an outer html, anything else it 

01:02:24.976 --> 01:02:26.976
will string au identify it as 
Jason and 

01:02:28.631 --> 01:02:30.631
&gt;&gt; JASON MILLER:  I did not know
&gt;&gt; PAUL IRISH:  It's been there 

01:02:33.923 --> 01:02:35.140
&gt;&gt; JASON MILLER: Longer than I 
have      &gt;&gt; PAUL IRISH:  But, 

01:02:35.141 --> 01:02:39.449
anyways.  Just a familiar, 
refamiliarize There are some 

01:02:39.450 --> 01:02:44.320
other methods in there that have
now just got an upgrade, too.  

01:02:44.321 --> 01:02:46.192
The debug method has been 
around, what you can do is pass 

01:02:46.193 --> 01:02:48.228
a function it to and it will 
essentially pause right inside 

01:02:49.853 --> 01:02:51.853
of the function that you pass.

01:02:52.904 --> 01:02:54.904
But now you can pass in native 
function.

01:02:55.979 --> 01:02:57.821
So, document dot query select 
ter would be an example, and 

01:02:57.822 --> 01:03:02.348
what happens is it will pause 
right as soon as any JavaScript 

01:03:02.349 --> 01:03:04.383
is about to use that data      
&gt;&gt; PAUL IRISH:  You can also do 

01:03:04.384 --> 01:03:06.487
it with alert, too, if you want 
to find out 

01:03:13.326 --> 01:03:15.759
Similar story with monitor.  It 
doesn't pause but instead logs 

01:03:15.760 --> 01:03:19.456
to the console stack trace and 
also the arguments that are 

01:03:19.457 --> 01:03:22.938
being passed in.  This you could
say tell me about all of the 

01:03:22.939 --> 01:03:24.939
code that is using set time out 

01:03:25.990 --> 01:03:27.643
&gt;&gt; JASON MILLER:  So we would 
have seen in my previous example

01:03:27.644 --> 01:03:30.499
of a function I pass to you and 
all this      &gt;&gt; PAUL IRISH:  

01:03:30.500 --> 01:03:33.955
Exactly.     &gt;&gt; PAUL IRISH:  
It's really nice.  There is one 

01:03:33.956 --> 01:03:37.223
more that is actually brand new,
which is query objects.  It is 

01:03:37.224 --> 01:03:42.823
kind of cool.     So, let's 
start this out.  We have a 

01:03:42.824 --> 01:03:47.300
class.  We create two instances 
of the class.  The second one we

01:03:47.301 --> 01:03:49.301
just add an extra property so it
is unique.

01:03:53.010 --> 01:03:54.429
Now, later on, we're like ah 
query objects we pass back into 

01:03:54.430 --> 01:03:58.807
that class.  And, we're going to
get in the console an array of 

01:03:58.808 --> 01:04:00.634
all of the instances of the 
class.  In this case pretty 

01:04:00.635 --> 01:04:04.997
straightforward, but the really 
powerful thing here is that it 

01:04:04.998 --> 01:04:06.643
is looking across the entire 
JavaScript and reporting back 

01:04:06.644 --> 01:04:08.644
all the instances that we know 
about it.

01:04:10.718 --> 01:04:12.718
It is like taking a big heap 
memory 

01:04:14.009 --> 01:04:16.654
snapshot and summarizing it down
to just      Now, this is cool, 

01:04:16.655 --> 01:04:18.655
because it's not 

01:04:21.502 --> 01:04:23.654
just what is currently available
to JavaScript scope right now.  

01:04:23.655 --> 01:04:25.655
It is the entire heap.

01:04:26.749 --> 01:04:28.749
You can look at, for instance, 
custom element constructors.

01:04:31.888 --> 01:04:33.914
Or what are all my canvass 
contacts that are somewhere and 

01:04:33.915 --> 01:04:35.915
get them dumped 

01:04:37.011 --> 01:04:39.011
Okay.  I think that is it.

01:04:41.492 --> 01:04:42.306
To wrap up we covered offering, 
accessib, performance and Java 

01:04:42.307 --> 01:04:44.307
scripts.

01:04:45.975 --> 01:04:47.605
&gt;&gt; JASON MILLER:  Paul, didn't I
see you literally backstage 

01:04:47.606 --> 01:04:49.606
before we 

01:04:51.292 --> 01:04:52.766
&gt;&gt; JASON MILLER:  Is there 
something you wanted to tell the

01:04:52.767 --> 01:04:54.767
people      &gt;&gt; PAUL IRISH:  Yes,
there was.

01:04:57.490 --> 01:05:00.752
&gt;&gt; JASON MILLER:  Oh God, are we
&gt;&gt; PAUL IRISH:  I think so.     

01:05:00.753 --> 01:05:02.753
&gt;&gt; JASON MILLER: We're getting a
&gt;&gt; PAUL IRISH:  You guys want to

01:05:03.819 --> 01:05:05.819
&gt;&gt; JASON MILLER: We're getting a
&gt;&gt; PAUL IRISH:  I got one more 

01:05:10.176 --> 01:05:12.397
&gt;&gt; PAUL IRISH:  Jason, as you 
know, web flat form evolves 

01:05:12.398 --> 01:05:14.398
quickly.

01:05:16.690 --> 01:05:18.537
As it's involves, we as 
developers need to feel 

01:05:18.538 --> 01:05:20.580
comfortable working with these 
new APIs, these new objects and 

01:05:23.220 --> 01:05:25.220
make sure that our code runs 
well against all them.

01:05:28.108 --> 01:05:30.108
And, the console is our home 
base for this exploration.

01:05:33.885 --> 01:05:35.885
So, we were thinking that 
console 

01:05:37.137 --> 01:05:38.759
could use some more power here 
so we're introducing a brand new

01:05:38.760 --> 01:05:40.798
feature that we think 
revolutionaries nationes how we 

01:05:41.828 --> 01:05:43.828
work with the console.

01:05:45.115 --> 01:05:47.115
We all call it eager evaluation.

01:05:48.787 --> 01:05:51.260
&gt;&gt; PAUL IRISH:  No other way to 
do it than with a demo.  Let's 

01:05:51.261 --> 01:05:53.261
switch over to my machine.

01:05:56.216 --> 01:05:57.439
We'll just undoc this and go 
full      &gt;&gt; JASON MILLER:  Does

01:05:57.440 --> 01:05:59.440
anybody else 

01:06:01.327 --> 01:06:03.327
&gt;&gt; JASON MILLER:  He adds them 
as 

01:06:05.186 --> 01:06:09.905
&gt;&gt; PAUL IRISH:  Undoc.     &gt;&gt; 
PAUL IRISH:  All right.  Here in

01:06:09.906 --> 01:06:12.954
the console I have a little line
of code, right.  We have a 

01:06:12.955 --> 01:06:14.955
regular expression and we're 

01:06:16.011 --> 01:06:17.860
going do call exec on it and 
pass it a string.     &gt;&gt; JASON 

01:06:17.861 --> 01:06:20.940
MILLER: There is a music      &gt;&gt;
PAUL IRISH:  All right.  Let's 

01:06:20.941 --> 01:06:23.629
finish this off.  Thanks.

01:06:27.931 --> 01:06:28.344
Now, as I finish this 
expression, checkout what 

01:06:28.345 --> 01:06:33.267
happens.  We get the results of 
this evaluation just positioned 

01:06:33.268 --> 01:06:35.295
right beneath me, and I did not 
hit enter or anything.     &gt;&gt; 

01:06:35.296 --> 01:06:38.771
JASON MILLER: What?     &gt;&gt; PAUL 
IRISH: The cool thing here is, 

01:06:38.772 --> 01:06:40.772
too, this is going to update as 
I type.

01:06:42.289 --> 01:06:44.289
So, if I come back and let's say
does 

01:06:45.350 --> 01:06:47.350
this rgeex work if I have parens
around 

01:06:48.406 --> 01:06:50.406
&gt;&gt; PAUL IRISH:  No, it doesn't.

01:06:52.535 --> 01:06:56.046
Regx, a little brittle.  Could 
use some improvement.  One thing

01:06:56.047 --> 01:07:00.329
I do see as far as      &gt;&gt; JASON
MILLER:  Yeah.     &gt;&gt; PAUL 

01:07:00.330 --> 01:07:04.425
IRISH:  All right.  We can use a
digit instead.  We do have 

01:07:04.426 --> 01:07:06.426
multiple of these, so we 

01:07:10.550 --> 01:07:13.184
could just multiple selection/D 
and      &gt;&gt; PAUL IRISH:  Matches

01:07:13.185 --> 01:07:15.824
too work good.     Now one last 
thing Jason I wanted 

01:07:19.947 --> 01:07:21.772
&gt;&gt; JASON MILLER:  You're sure 
this wasn't just a reason to 

01:07:21.773 --> 01:07:23.773
show off your 

01:07:25.273 --> 01:07:27.273
&gt;&gt; PAUL IRISH:  While we have 
these 

01:07:28.720 --> 01:07:30.787
multiple cursers here, oh, I 
like that, what we're going to 

01:07:30.788 --> 01:07:35.263
do is add some      &gt;&gt; PAUL 
IRISH:  All right.  All right.  

01:07:35.264 --> 01:07:37.264
Yes.  Exactly.

01:07:38.962 --> 01:07:40.962
And, so, let's pull out the, is 
it 1?  1.  Boom.

01:07:42.879 --> 01:07:44.879
So n a few short moments with 
not 

01:07:46.144 --> 01:07:48.386
too much work we manage to 
explore the API, find the bug, 

01:07:48.387 --> 01:07:51.692
make an improvement and get the 
result that we wanted.  And this

01:07:51.693 --> 01:07:53.979
speed of iteration is really 
nice.  No going back in your 

01:07:53.980 --> 01:07:55.980
history, changing that one 
thing.

01:08:00.524 --> 01:08:03.376
&gt;&gt; JASON MILLER:  We should do a
&gt;&gt; JASON MILLER:  You still have

01:08:04.789 --> 01:08:06.789
&gt;&gt; PAUL IRISH:  Yeah.  We're 
still connected to the page with

01:08:08.648 --> 01:08:10.504
&gt;&gt; JASON MILLER:  That guy never
&gt;&gt; PAUL IRISH:  All right.  How 

01:08:10.505 --> 01:08:12.505
about -- okay.

01:08:14.976 --> 01:08:17.439
&gt;&gt; PAUL IRISH:  Let's grab all 
of      &gt;&gt; JASON MILLER:  Like 

01:08:17.440 --> 01:08:19.491
you're a      &gt;&gt; PAUL IRISH:  
Yeah, like I'm a 

01:08:23.137 --> 01:08:25.137
&gt;&gt; PAUL IRISH:  Okay.  So, what 
do we need?

01:08:27.441 --> 01:08:29.441
&gt;&gt; JASON MILLER:  Query selector
&gt;&gt; PAUL IRISH:  All right.

01:08:35.067 --> 01:08:37.067
&gt;&gt; PAUL IRISH:  Okay.

01:08:38.110 --> 01:08:39.955
We have them now, I don't know, 
we'll grab the text with 

01:08:39.956 --> 01:08:41.956
intertext or something.  So, 
we'll map over that.  Map.

01:08:47.891 --> 01:08:49.891
&gt;&gt; JASON MILLER:  It is a node 
list.     &gt;&gt; PAUL IRISH:  Right.

01:08:54.031 --> 01:08:56.031
&gt;&gt; PAUL IRISH:  How do we change
a 

01:08:57.074 --> 01:08:59.074
&gt;&gt; JASON MILLER: What is the 
newest 

01:09:01.368 --> 01:09:03.406
&gt;&gt; PAUL IRISH:  Audience 
particip suggestions?  I like 

01:09:03.407 --> 01:09:05.407
it.  I like it.  Yes.

01:09:08.358 --> 01:09:10.615
&gt;&gt; PAUL IRISH:  Array literal 
with      &gt;&gt; PAUL IRISH:  Yeah.

01:09:15.732 --> 01:09:17.570
&gt;&gt; JASON MILLER: Did that even 
work in Chrome?     &gt;&gt; PAUL 

01:09:17.571 --> 01:09:20.424
IRISH:  I love this one.  Now we
got array.  Maps the thing.  

01:09:20.425 --> 01:09:22.425
Maps the thing.  All right.

01:09:24.331 --> 01:09:26.331
&gt;&gt; PAUL IRISH:  So, let's grab 
the 

01:09:29.835 --> 01:09:31.835
&gt;&gt; PAUL IRISH:  Let's clean this
up.

01:09:32.923 --> 01:09:35.156
&gt;&gt; JASON MILLER:  That is a lot 
of      &gt;&gt; PAUL IRISH:  Wow.  

01:09:35.157 --> 01:09:39.235
Let's get rid of that.     &gt;&gt; 
JASON MILLER:  Holding uptight  

01:09:39.236 --> 01:09:41.236
&gt;&gt; PAUL IRISH:  The classic one.

01:09:46.408 --> 01:09:49.265
&gt;&gt; JASON MILLER:  I like it 
still      &gt;&gt; PAUL IRISH:  Trim 

01:09:49.266 --> 01:09:51.266
that.

01:09:52.558 --> 01:09:54.591
Trim.  No.

01:09:57.676 --> 01:09:59.676
&gt;&gt; JASON MILLER:  Some type -- 
it 

01:10:01.148 --> 01:10:03.148
&gt;&gt; PAUL IRISH:  Go.

01:10:04.422 --> 01:10:06.899
&gt;&gt; PAUL IRISH:  All right.  
Nice.     &gt;&gt; PAUL IRISH:  So I 

01:10:06.900 --> 01:10:09.161
was able to craft that, not mess
up too much, and we 

01:10:12.651 --> 01:10:14.906
&gt;&gt; JASON MILLER:  Who knows what
&gt;&gt; PAUL IRISH:  The really 

01:10:14.907 --> 01:10:18.813
powerful thing here is that eeg 
gar evaluation is done in a way 

01:10:18.814 --> 01:10:22.690
that we can guarantee there are 
no side effects.  And we did 

01:10:22.691 --> 01:10:24.703
this by introducing a new mode 
into V8 where we attempt to 

01:10:26.649 --> 01:10:28.905
evaluate code, but if we know it
is about to cause a side effect 

01:10:28.906 --> 01:10:31.143
that changes the outside state, 
your application, the page, 

01:10:31.144 --> 01:10:35.225
other parts of the dom, we just 
bail and stop doing      &gt;&gt; 

01:10:35.226 --> 01:10:37.226
JASON MILLER:  I tried for like 
an hour to break it.  You can't.

01:10:38.924 --> 01:10:40.924
I am going to try more, though. 
&gt;&gt; PAUL IRISH:  The other nice 

01:10:42.831 --> 01:10:44.052
thing is that eager evaluation 
in addition to kind of giving 

01:10:44.053 --> 01:10:46.053
you this 

01:10:47.909 --> 01:10:49.785
result right underneath what you
type in the console enables some

01:10:49.786 --> 01:10:52.658
new completions in the console. 
So, a completion is just a type 

01:10:52.659 --> 01:10:54.659
of 

01:10:57.939 --> 01:10:59.939
&gt;&gt; JASON MILLER:  CloseClosure 
UID.

01:11:04.363 --> 01:11:07.025
But, there are some tricky 
things here.  Completions 

01:11:07.026 --> 01:11:09.958
normally as soon as you 
introduce, like, some parens you

01:11:09.959 --> 01:11:11.959
are 

01:11:13.057 --> 01:11:15.336
&gt;&gt; PAUL IRISH:  Completions 
never continue to work.  You 

01:11:15.337 --> 01:11:17.337
just have to figure it out on 
yourself.

01:11:19.211 --> 01:11:22.065
But, now we can try your 
evaluation on that same string 

01:11:22.066 --> 01:11:27.407
and power more      &gt;&gt; PAUL 
IRISH:  So, to give you a show 

01:11:27.408 --> 01:11:29.408
of how this kind of works, and 

01:11:31.099 --> 01:11:33.099
&gt;&gt; JASON MILLER:  You're going 
to show off our thumb war stats.

01:11:34.760 --> 01:11:37.625
&gt;&gt; PAUL IRISH:  Okay.  We've 
been playing thumb wears.

01:11:41.088 --> 01:11:42.547
&gt;&gt; PAUL IRISH:  I've been 
keeping      &gt;&gt; PAUL IRISH:  

01:11:42.548 --> 01:11:44.548
Touch.

01:11:46.076 --> 01:11:48.076
Going.  All right.  5.

01:11:55.074 --> 01:11:56.715
&gt;&gt; PAUL IRISH:  A nice thing is,
I'm keeping this here, but we 

01:11:56.716 --> 01:12:01.228
were thinking it would make more
sense if we      &gt;&gt; JASON 

01:12:01.229 --> 01:12:03.229
MILLER:  Right we're going 

01:12:05.745 --> 01:12:07.745
&gt;&gt; PAUL IRISH:  Thumb wars stats

01:12:08.812 --> 01:12:10.812
&gt;&gt; PAUL IRISH:  If we pulled 
that 

01:12:12.679 --> 01:12:14.710
&gt;&gt; PAUL IRISH:  So let's make 
this      &gt;&gt; JASON MILLER:  That

01:12:14.711 --> 01:12:17.352
is a bit      &gt;&gt; PAUL IRISH:  
Yeah.  And, we need to turn it 

01:12:17.353 --> 01:12:19.353
back into an object, right guys.
All right.

01:12:22.288 --> 01:12:24.949
&gt;&gt; JASON MILLER:  My namesake   
&gt;&gt; PAUL IRISH:  Now take a look.

01:12:27.391 --> 01:12:28.613
I'm going to hit dot, and what 
is in      &gt;&gt; JASON MILLER:  

01:12:28.614 --> 01:12:32.904
What?     &gt;&gt; JASON MILLER:  We 
have a cameo      &gt;&gt; PAUL IRISH:

01:12:32.905 --> 01:12:34.905
Check us out.

01:12:36.783 --> 01:12:38.601
The cool thing is this is being 
evaluated under the hood and it 

01:12:38.602 --> 01:12:41.703
was day determined to have no 
side effects so now the 

01:12:41.704 --> 01:12:43.757
completions are upgraded.     &gt;&gt;
PAUL IRISH:  Really powerful 

01:12:43.758 --> 01:12:47.212
stuff.  This is just a taste of 
some of the things you will be 

01:12:47.213 --> 01:12:49.213
seeing.

01:12:51.085 --> 01:12:53.160
What you can do is grab today's 
Chrome Canary, pop into the 

01:12:53.161 --> 01:12:55.161
console 

01:12:57.024 --> 01:12:58.707
settings, right up here, turn on
eager evaluation, it will enable

01:12:58.708 --> 01:13:03.983
all the stuff      All right, 
Jason.  I think that's it.  

01:13:03.984 --> 01:13:05.984
Let's go back to the slides.

01:13:08.530 --> 01:13:10.164
&gt;&gt; JASON MILLER:  I think we're 
good.     &gt;&gt; PAUL IRISH:  Thanks

01:13:10.165 --> 01:13:12.165
guys.

01:13:17.666 --> 01:13:19.666
(Applause)

01:13:35.507 --> 01:13:38.203
&gt;&gt; Thank you for joining this 
session.  Brand ambassadors will

01:13:38.204 --> 01:13:40.204
assist with 

01:13:41.842 --> 01:13:44.083
directing you through the 
designated exists.  We will be 

01:13:44.084 --> 01:13:45.537
making room for those of you who
have registered for the next 

01:13:45.538 --> 01:13:50.431
session.  If you have registered
for the next session in this 

01:13:50.432 --> 01:13:55.131
room, we ask you to please exit 
the run and return via the      

01:13:55.132 --> 01:13:57.132
Thank you.

01:15:27.546 --> 01:15:29.546
Easy

01:18:56.239 --> 01:18:58.239
#io18

01:29:02.802 --> 01:29:07.081
&gt;&gt; All right.  Hey folks, my 
name is Addy.  This is Ewa.  We 

01:29:07.082 --> 01:29:11.167
work on Chrome.  And, today 
we're going to give you a world 

01:29:11.168 --> 01:29:13.168
wind tour of trips and 
particulars 

01:29:18.475 --> 01:29:20.127
&gt;&gt; EWA GASPEROWICZ:  The 
Internet gits heavier and 

01:29:20.128 --> 01:29:25.323
heavier every year.  If we check
on the State of mobile web we 

01:29:25.324 --> 01:29:27.324
can see that on the page of 
mobile the weight is about 1.

01:29:31.745 --> 01:29:35.056
5 Megs with more majority of it 
being scaufy crypt and images.  

01:29:35.057 --> 01:29:37.352
Apart from the sheer size though
there are other reasons why web 

01:29:37.353 --> 01:29:39.610
page might feel splug I shall 
and heavy.

01:29:51.674 --> 01:29:52.736
Third party code, network,  
latency, CPU, partial blocking 

01:29:52.737 --> 01:29:54.737
patterns, all of this contribute
to the complicated 

01:29:57.679 --> 01:29:57.710
We have been pretty busy over 
past year trying to figure out 

01:29:57.711 --> 01:30:01.735
how to fit this rich content of 
mobile web into the      In this

01:30:01.736 --> 01:30:03.736
talk, Addy and I are going to 
show you what we can do in this 

01:30:05.431 --> 01:30:07.126
regard today, but also we will 
take a peek into the future and 

01:30:07.127 --> 01:30:10.031
give you a highlight of what 
might be possible really, really

01:30:10.032 --> 01:30:14.563
soon.     &gt;&gt; ADDY OSMANI: So, 
I'm not the biggest fan of 

01:30:14.564 --> 01:30:18.704
suitcases.  The last time I was 
at the airport waiting at the 

01:30:18.705 --> 01:30:20.944
baggage carousel for my bags I 
looked around for my suitcase 

01:30:20.945 --> 01:30:22.945
and 

01:30:24.832 --> 01:30:30.319
all I could find was this.  .   
&gt;&gt; ADDY OSMANI: I too, laughed 

01:30:30.320 --> 01:30:33.632
the first four times this went 
around.  I was really happy to 

01:30:33.633 --> 01:30:35.633
get this back, I 

01:30:36.894 --> 01:30:38.716
Now, the experience that I had 
at a baggage kaur au sell is a 

01:30:38.717 --> 01:30:41.136
lot like the experience our 
users have when they're waiting 

01:30:41.137 --> 01:30:46.252
for the page to load.  In fact, 
most users rate speed as being 

01:30:46.253 --> 01:30:48.253
at the very top of the UX 

01:30:50.572 --> 01:30:51.608
hierarchy of their needs and 
this isn't too surprising 

01:30:51.609 --> 01:30:53.639
because you can't really do a 
whole lot before a page is 

01:30:53.640 --> 01:30:55.699
finished loading.  You can't 
derive value from the page, 

01:31:02.438 --> 01:31:04.282
Now, we know that performance 
matters, but I can also 

01:31:04.283 --> 01:31:06.283
sometimes feel 

01:31:08.372 --> 01:31:11.264
like a secret discovering where 
to start optimizing.  So, we've 

01:31:11.265 --> 01:31:13.308
been working on trying to make 
this problem a little easier for

01:31:13.309 --> 01:31:15.309
a 

01:31:16.772 --> 01:31:18.416
while, and today we have an 
exciting announcement to share 

01:31:18.417 --> 01:31:20.417
with you.

01:31:21.475 --> 01:31:23.475
We like to call it a Paul Irish 
in 

01:31:29.175 --> 01:31:31.175
&gt;&gt; ADDY OSMANI: Well,      &gt;&gt; 
EWA GASPEROWICZ:  Well, we're 

01:31:32.907 --> 01:31:35.372
happy to announce an expanded 
performance of audits in 

01:31:35.373 --> 01:31:39.043
Lighthouse.  Lighthouse is part 
of the developer tools that 

01:31:39.044 --> 01:31:40.868
allow you to make an audit of 
your website and also gives you 

01:31:40.869 --> 01:31:43.957
hints on how to make it better. 
It's been around for a while, 

01:31:43.958 --> 01:31:48.871
right, but as some of you have 
heard today in the morning, it's

01:31:48.872 --> 01:31:51.928
been also act worked on.  And, 
today I'm happy to share with 

01:31:51.929 --> 01:31:53.929
you 

01:31:55.010 --> 01:31:57.010
some of the newest audits that 
landed in 

01:31:58.742 --> 01:32:00.570
We'll try to show them to you in
action during the rest of the 

01:32:00.571 --> 01:32:02.571
talk.

01:32:06.783 --> 01:32:08.783
As the Internet thing goes, 
fixing 

01:32:10.870 --> 01:32:13.501
web performance is easy as 
drawing a horse, right.  You 

01:32:13.502 --> 01:32:15.502
just need to follow some steps 
carefully.

01:32:16.998 --> 01:32:19.661
But, even though, well, there is
some truth in the picture above,

01:32:19.662 --> 01:32:21.662
the good 

01:32:28.675 --> 01:32:30.705
news is you can get pretty far 
by following some simple steps. 

01:32:30.706 --> 01:32:32.706
In order to show you the steps, 
addy 

01:32:37.761 --> 01:32:39.742
So, Ewa and I are really big 
fans of Google doodles.  Google 

01:32:39.743 --> 01:32:41.743
has been doing some since 1988 

01:32:44.703 --> 01:32:48.903
and we thought it would be fun 
to create a app to show you our 

01:32:44.703 --> 01:32:46.703
favorite interactive doodles 
over the year.

01:32:51.388 --> 01:32:53.388
Video

01:32:54.619 --> 01:32:56.619
(Video

01:33:07.208 --> 01:33:10.103
&gt;&gt; ADDY OSMANI: So, we kick it 
off and as you can see we can 

01:33:10.104 --> 01:33:13.988
start browsing through the app 
plau taetion and look at doodles

01:33:13.989 --> 01:33:15.989
over the year and click through 

01:33:18.897 --> 01:33:20.746
We're not going to ruin the 
surprise.  You can go and play 

01:33:20.747 --> 01:33:22.747
some during your 

01:33:24.405 --> 01:33:27.263
So, let's begin our journey into
the wild west of web performance

01:33:27.264 --> 01:33:29.264
and it all begins with one tool.

01:33:32.360 --> 01:33:35.021
&gt;&gt; EWA GASPEROWICZ:  Of course, 
Lighthouse.  The individual 

01:33:35.022 --> 01:33:37.278
performance of our app, as you 
can see on this Lighthouse 

01:33:38.497 --> 01:33:40.497
report, was pretty terrible.

01:33:41.748 --> 01:33:43.748
On a 3G network the user needed 
to 

01:33:44.822 --> 01:33:47.106
wait for 15 seconds for the 
first meaningful pain or for the

01:33:47.107 --> 01:33:49.745
app to get interactive.  
Lighthouse highlighted a ton of 

01:33:49.746 --> 01:33:51.746
issues with our site, and the 
overall 

01:33:55.884 --> 01:33:57.896
performance score of 23 mirrored
exactly that.  The page waited 

01:33:57.897 --> 01:33:59.897
at about 3.4 megs.

01:34:04.043 --> 01:34:06.043
This started our first 
performance challenge.

01:34:07.290 --> 01:34:08.920
Fun things that we can easily 
remove without effecting the 

01:34:08.921 --> 01:34:10.921
overall 

01:34:14.324 --> 01:34:18.636
So, what is the easiest thing to
remove?  Usually nothing.  And, 

01:34:18.637 --> 01:34:20.654
by nothing, I mean things that 
do not really contribute to the 

01:34:20.655 --> 01:34:24.756
code, like white space or 
comments.  Lighthouse highlights

01:34:24.757 --> 01:34:26.757
this opportunity 

01:34:27.770 --> 01:34:29.770
in the

01:34:31.080 --> 01:34:34.144
manufactured CSS and 
manufactured Java crypt audit.  

01:34:34.145 --> 01:34:36.145
In order to get communicate 

01:34:37.462 --> 01:34:39.462
identification we simply use the
agi plug in.

01:34:40.742 --> 01:34:42.599
Communication is a common task 
so you should be able to find a 

01:34:42.600 --> 01:34:44.600
ready made solution for 
whichever build process you 

01:34:48.338 --> 01:34:49.971
Other useful odd it in that 
space is enable text 

01:34:49.972 --> 01:34:54.504
compression.  There is no reason
to send uncouple pressed files, 

01:34:54.505 --> 01:34:56.505
and most of the CDN' 

01:34:58.605 --> 01:35:00.605
We were using Firebase Hosting 
to 

01:35:02.509 --> 01:35:04.509
host our code, and Firebase 
actually enables GCP by default.

01:35:07.420 --> 01:35:09.420
So, by the sheer vir oo of 
hosting our 

01:35:14.693 --> 01:35:16.693
And, while GCP is a very popular
way of 

01:35:19.239 --> 01:35:20.248
compressing other mechanisms 
that are getting traction as 

01:35:20.249 --> 01:35:22.249
well.

01:35:24.134 --> 01:35:25.956
Broadly enjoys support in most 
of of the browsers these days 

01:35:25.957 --> 01:35:30.872
and you can use binary to 
pre-compress your assets      

01:35:30.873 --> 01:35:32.873
Okay.

01:35:33.940 --> 01:35:36.388
In these two ways we made sure 
that our code is nice and 

01:35:36.389 --> 01:35:38.389
compact and ready 

01:35:41.787 --> 01:35:43.787
Our next task was to not send it
twice, if not necessary.

01:35:47.405 --> 01:35:49.244
The in efficient cache policy 
audit in Lighthouse helped us 

01:35:49.245 --> 01:35:51.245
notice that we 

01:35:52.504 --> 01:35:54.134
could be optimizing our caching 
strategies in order to achieve 

01:35:54.135 --> 01:35:56.135
exactly that.

01:35:57.390 --> 01:36:00.058
By setting a max stage 
expiration head ner our server, 

01:36:00.059 --> 01:36:02.059
we made sure that on a 

01:36:04.088 --> 01:36:06.088
repeated solicit the

01:36:08.630 --> 01:36:10.630
repeat user can reuse the 
resources as before.

01:36:12.936 --> 01:36:14.778
You should aim at caching as 
many as possible for the longest

01:36:14.779 --> 01:36:16.779
period of time and provide 
validation tokens for 

01:36:21.499 --> 01:36:21.897
All the changes we made so far 
were very straightforward, 

01:36:21.898 --> 01:36:26.182
right.  They required no code 
whatsoever.  It was a really low

01:36:26.183 --> 01:36:28.183
hanging fruit with very little 
risk of breaking anything.

01:36:31.158 --> 01:36:33.609
So, remember, always minimize 
the code, preferably automate go

01:36:33.610 --> 01:36:36.047
it with build tools by using the
right CDNs or 

01:36:39.937 --> 01:36:42.430
by adding optimization modules 
to your own servers.  Always 

01:36:42.431 --> 01:36:43.852
compress your assets and use 
efficient cache policies to open

01:36:43.853 --> 01:36:45.853
Tau 

01:36:47.507 --> 01:36:49.507
Okay.

01:36:51.181 --> 01:36:53.022
This way we remove the obvious 
parts of the unnecessary down 

01:36:53.023 --> 01:36:55.023
loads, but what about the less 
obvious parts?

01:37:00.730 --> 01:37:04.622
As it happens, unused code can 
really surprise us.  It may 

01:37:04.623 --> 01:37:06.623
lininger in the dark corners of 
your code base.

01:37:08.768 --> 01:37:10.587
Idle and long forgotten, and yet
making it to the users bandwidth

01:37:10.588 --> 01:37:14.919
each time the app is loaded.  
This has been especially if you 

01:37:14.920 --> 01:37:19.447
work on your app for a longer 
period of time, your team or 

01:37:19.448 --> 01:37:21.448
your dependencies change, 

01:37:25.623 --> 01:37:27.623
and sometimes a I will gets left
behind.

01:37:28.697 --> 01:37:30.697
At the beginning we were using 

01:37:31.737 --> 01:37:33.737
material components library to 
quickly prototype our app.

01:37:35.629 --> 01:37:37.516
In time we moved to a more 
custom look and feel and of 

01:37:37.517 --> 01:37:40.579
course we forgot entirely about 
that library.  Fortunately t 

01:37:40.580 --> 01:37:42.580
code coverage check 

01:37:45.770 --> 01:37:47.770
You can check your code coverage

01:37:49.635 --> 01:37:51.671
stats in DevTools both for the 
run time as load time of your 

01:37:51.672 --> 01:37:53.672
application.

01:37:54.743 --> 01:37:56.743
You can see the two big red 
stripes in 

01:37:58.397 --> 01:38:00.397
the bottom screen shots.

01:38:01.456 --> 01:38:03.456
We had over 95% of our CSS 
unused and 

01:38:06.205 --> 01:38:08.230
Lighthouse also picked up this 
issue in the unused CSS rules 

01:38:08.231 --> 01:38:10.231
audit.

01:38:12.552 --> 01:38:15.417
It showed a potential saving of 
over      So, we go back to our 

01:38:15.418 --> 01:38:18.264
code and kicked out both the 
JavaScript and CSS part of that 

01:38:18.265 --> 01:38:20.265
library.

01:38:22.538 --> 01:38:24.538
This brought our CSS bundle 20 
fold, 

01:38:26.634 --> 01:38:28.634
which is pretty good for a tiny 
tool two 

01:38:30.960 --> 01:38:32.581
Of course, it made our 
performance score go up and also

01:38:32.582 --> 01:38:34.582
the time to 

01:38:35.659 --> 01:38:38.305
interact got much better; 
however, with changes like this,

01:38:38.306 --> 01:38:40.664
it's not enough to check your 
metrics and scores alone.

01:38:45.810 --> 01:38:47.810
Removing actual code is never 
risk free.

01:38:57.285 --> 01:38:59.285
Remember that our code was 
unused in '95%?

01:39:03.317 --> 01:39:03.347
Well, there is still this 5%, 
right.  One of our components 

01:39:03.348 --> 01:39:06.228
was still you'd using the slide 
from the library, the little 

01:39:06.229 --> 01:39:10.229
arrows in the slide there.  
Because it was so small we could

01:39:06.229 --> 01:39:08.305
go and manually incorporate 
those slides back into the 

01:39:08.306 --> 01:39:10.306
buttons.

01:39:11.589 --> 01:39:13.431
So, if you remember code, just 
make sure you have a proper 

01:39:13.432 --> 01:39:17.122
testing work flow in place to 
help you guard against potential

01:39:17.123 --> 01:39:19.123
visual regressions.

01:39:23.458 --> 01:39:24.505
So remember, code coverage in 
DevTools and in Lighthouse is 

01:39:24.506 --> 01:39:26.506
your 

01:39:27.979 --> 01:39:31.053
friend when it comes to spotting
and removing unused code.  Check

01:39:31.054 --> 01:39:32.276
regularly throughout the 
development of your app to keep 

01:39:32.277 --> 01:39:37.573
your code base clean and tidy 
and to test your changes 

01:39:37.574 --> 01:39:41.492
thoroughly before Well, so far 
so good.  All of those changes 

01:39:41.493 --> 01:39:43.493
made our app a little bit 
lighter.

01:39:47.869 --> 01:39:50.736
It was still too slow to Addy, 
so he took it a bit farther?

01:39:54.863 --> 01:39:56.908
&gt;&gt; ADDY OSMANI: It went so, so 
good.  Some light pages are like

01:39:56.909 --> 01:40:00.437
heavy suitcases.  You have some 
stuff that is important and then

01:40:00.438 --> 01:40:02.438
you have crap and even more 

01:40:03.539 --> 01:40:05.539
We know the large resources can 

01:40:06.876 --> 01:40:08.918
slow down web page loads that 
can cost our users money and 

01:40:08.919 --> 01:40:10.919
have a big impact on their data 
Plan, so it's really 

01:40:13.823 --> 01:40:16.503
Now, Lighthouse was able to 
detect that we had an issue with

01:40:16.504 --> 01:40:19.555
some of our network pay loads 
using the enormous network 

01:40:19.556 --> 01:40:21.556
payload audit.

01:40:23.024 --> 01:40:24.497
Here we saw that we had over 3 
Megs worth of code that was 

01:40:24.498 --> 01:40:28.612
being shipped down.  Quite a 
lot, especially on mobile.  At 

01:40:28.613 --> 01:40:30.245
the very top of this list, 
Lighthouse highlighted that we 

01:40:30.246 --> 01:40:34.502
had a JavaScript vendor bundle 
that was 2 Megs uncouple pressed

01:40:34.503 --> 01:40:36.994
code that we were trying to ship
down.  This was also a problem 

01:40:36.995 --> 01:40:39.963
highlighted by web pack.  What 
we say is that the fastest 

01:40:40.977 --> 01:40:42.977
request is the one that is not 
made.

01:40:44.224 --> 01:40:46.677
Ideally you should be measuring 
the value of every single asset 

01:40:46.678 --> 01:40:50.812
you're serving down to your 
users, measuring the performance

01:40:50.813 --> 01:40:52.813
of those assets and making a 
call on whether it is worth 

01:40:53.709 --> 01:40:54.719
shipping down with the initial 
experience, because sometimes 

01:40:54.720 --> 01:40:56.720
these 

01:40:57.806 --> 01:40:59.806
assets can be deferred or laysly
loaded 

01:41:01.562 --> 01:41:04.029
In our case, because we're 
dealing with a lot of jaufy 

01:41:04.030 --> 01:41:06.255
script bundles, we were 
fortunate, because the jaufy 

01:41:06.256 --> 01:41:08.256
script 

01:41:09.503 --> 01:41:10.524
community has a rich set of 
JavaScript bundle auditing 

01:41:10.525 --> 01:41:16.260
tools.  We started off with web 
pack bundle analyze esh that 

01:41:16.261 --> 01:41:18.261
informed use uni code which is 
1.

01:41:20.521 --> 01:41:23.201
6 megs of parsed Java scripts, 
so quite a lot.  We then went 

01:41:23.202 --> 01:41:25.258
over to our editor and using the
import cost plug in for visual 

01:41:27.101 --> 01:41:29.139
code we were able to visualize 
the cost of every module that we

01:41:29.140 --> 01:41:33.827
were importing.  This allowed me
to discover which component was 

01:41:33.828 --> 01:41:35.828
including code that was 

01:41:38.324 --> 01:41:41.377
We then switched over to another
tool, bundle phobia.  This is a 

01:41:41.378 --> 01:41:43.378
tool that allows you to 

01:41:45.709 --> 01:41:48.557
enter in the name of any NPN 
package to modify what G size 

01:41:48.558 --> 01:41:51.228
isest mayed to be.  We found a 
nice you will a, your Honorive 

01:41:51.229 --> 01:41:53.229
for the slug md usual that only 
weighed 2.

01:41:56.513 --> 01:41:58.448
This had a big impact on our 
performance between this change 

01:41:58.449 --> 01:42:02.170
and discovering other 
opportunities to trim down our 

01:42:02.171 --> 01:42:04.171
Java crypt bundle size, we saved
2.

01:42:07.652 --> 01:42:10.307
We saw 65% improvements overall 
once you factor in the G zip and

01:42:10.308 --> 01:42:12.545
size of these bundles.  We found
that this is really worth 

01:42:15.819 --> 01:42:17.819
So, in general, try to eliminate

01:42:19.094 --> 01:42:21.193
unnecessary down loads in your 
sites and apps.  In the case of 

01:42:21.194 --> 01:42:23.406
the ood Del theater, an app that
has games and a lot of 

01:42:25.666 --> 01:42:28.112
interactive multimedia content 
it is important for us to keep 

01:42:28.113 --> 01:42:30.113
the application shell as 
lightweight as possible.

01:42:34.191 --> 01:42:36.191
In ven [TORG] our

01:42:41.186 --> 01:42:42.399
Although large pay loads can 
have a big impact, there is 

01:42:42.400 --> 01:42:44.454
another thing that can have a 
really big impact and that is 

01:42:44.858 --> 01:42:46.858
JavaScript.

01:42:48.327 --> 01:42:49.936
We all love JavaScript, but as 
we saw earlier, the median page 

01:42:49.937 --> 01:42:51.937
includes a little bit too much 
of it.

01:42:54.871 --> 01:42:58.572
JavaScript is your most 
expensive asset.  On mobile if 

01:42:58.573 --> 01:43:00.573
you're send down large bundles 
of JavaScript it can delay how 

01:43:02.275 --> 01:43:03.694
soon your users are able to 
interact with user interface 

01:43:03.695 --> 01:43:06.952
components.  That means they can
be tapping on UI without 

01:43:06.953 --> 01:43:08.970
anything meaningful actually 
happening.  So, it's important 

01:43:08.971 --> 01:43:10.971
for us to 

01:43:14.690 --> 01:43:16.690
This is how a browser processes 
JavaScript.

01:43:18.144 --> 01:43:21.010
We first of all have to download
that script, we have a 

01:43:21.011 --> 01:43:23.011
JavaScript engine 

01:43:24.089 --> 01:43:26.089
which then needs to parse that 
code, compile it and execute it.

01:43:26.323 --> 01:43:28.375
Now these phases are something 
that don't take a whole lot of 

01:43:28.376 --> 01:43:32.287
time on a high end device like a
desktop machine or a laptop.  

01:43:32.288 --> 01:43:35.159
Maybe even a high end phone.  
But on a median mobile phone, 

01:43:35.160 --> 01:43:41.273
this process can take anywhere 
between 5 and 10 times longer.  

01:43:41.274 --> 01:43:42.700
This is what delays 
interactivity.  So, it is 

01:43:42.701 --> 01:43:45.546
important for us to try      
Now, to help you discover these 

01:43:50.166 --> 01:43:54.119
issues with your app, we 
introduce a new JavaScript.  It 

01:43:54.120 --> 01:43:57.039
told us that we had 1.8 seconds 
of time in boot up app.

01:44:00.582 --> 01:44:02.038
While this was happening we were
statically importing in all of 

01:44:02.039 --> 01:44:05.492
our routes and components into 
one monolithic JavaScript 

01:44:05.493 --> 01:44:08.961
bundle.  One technique for work 
around this is using code 

01:44:08.962 --> 01:44:13.249
splitting.  Code splitting is 
this notion of instead of giving

01:44:13.250 --> 01:44:17.124
your users a whole pizza worth 
of JavaScript, what if you only 

01:44:17.125 --> 01:44:20.393
gave them one slice at a time as
they needed it.  Code splitting 

01:44:20.394 --> 01:44:24.301
can be applied at a route level 
or component level.  It works 

01:44:24.302 --> 01:44:26.302
great with react and react 

01:44:28.978 --> 01:44:30.978
load able, UGS, annular, 
polymer, 

01:44:34.533 --> 01:44:37.834
So, we incorporate a code slit 
splitting into our application. 

01:44:37.835 --> 01:44:39.835
We switched over from status 
imports 

01:44:42.163 --> 01:44:43.611
to dynamic allowing to us 
synchronously lazy code it in as

01:44:43.612 --> 01:44:47.529
we need it.  It was shrinking 
down the size of our bundles but

01:44:47.530 --> 01:44:50.843
also decreasing our JavaScript 
booting time.  Took it down to 

01:44:50.844 --> 01:44:52.844
0.

01:44:54.311 --> 01:44:56.311
87 seconds making the app 50% 
faster.

01:44:58.528 --> 01:45:00.740
In general f you're building a 
jaufy script heavy experience 

01:45:00.741 --> 01:45:02.625
send code to the user they need.
Take advantage of code 

01:45:02.626 --> 01:45:07.328
splitting, explore ideas like 
trees shaking, and checkout this

01:45:07.329 --> 01:45:09.354
repo we have with few ideas of 
how you can trim down your 

01:45:11.208 --> 01:45:13.644
library size if you happen to be
using      Now, as much as 

01:45:13.645 --> 01:45:15.645
JavaScript can be 

01:45:16.900 --> 01:45:18.900
an issue, we know unoptimized 
images can 

01:45:20.198 --> 01:45:22.198
So, over to Ewa to talk about 

01:45:24.248 --> 01:45:26.511
&gt;&gt; EWA GASPEROWICZ:  Images, 
Internet loves images, and so do

01:45:26.512 --> 01:45:31.478
we.  In ood Del app we're using 
them in the background, 

01:45:31.479 --> 01:45:33.479
foreground, and pretty much 
everywhere.

01:45:35.962 --> 01:45:37.175
Unfortunate Lou, Lighthouse was 
listen thoosy as particular 

01:45:37.176 --> 01:45:39.176
about it than we were.

01:45:41.336 --> 01:45:45.470
As a matter of fact we find on 
all three images audits.  We 

01:45:45.471 --> 01:45:47.326
forgot to optimize our images, 
not sizing them correctly, and 

01:45:47.327 --> 01:45:49.327
also get some gain from using 
other image formats as 

01:45:53.208 --> 01:45:55.030
So, we started optimizing our 
images for one of open Tau 

01:45:55.031 --> 01:46:00.576
misszation route you can use 
visual tools like image optim or

01:46:00.577 --> 01:46:02.577
image convert.

01:46:04.252 --> 01:46:06.512
To adds image optimization step 
with our build process with 

01:46:06.513 --> 01:46:09.554
libraries for example imagery.  
This way you make sure that also

01:46:09.555 --> 01:46:11.555
the 

01:46:13.245 --> 01:46:15.245
images added in future get 
optimized automatically.

01:46:19.493 --> 01:46:21.493
For example, Lackamy or third 
cloudy 

01:46:22.542 --> 01:46:25.007
or fastly offer you 
comprehensive image solution.  

01:46:25.008 --> 01:46:27.073
So, to save yourself some time 
and headache, you can simply 

01:46:27.074 --> 01:46:31.163
host your images on those 
services.  If you don't want to 

01:46:31.164 --> 01:46:36.078
do that because of the cost or 
latency issues, projects like 

01:46:36.079 --> 01:46:38.079
thumb bell or image flow offer 

01:46:41.152 --> 01:46:44.848
Here you can see a single image 
optimization outcome.  Our 

01:46:44.849 --> 01:46:49.747
background P&amp;G was flagged in 
web pack as big and rightly so. 

01:46:49.748 --> 01:46:52.465
After sizing it correctly to the
view port and running in through

01:46:52.466 --> 01:46:55.525
image optimum, we went down 200 
kilobytes, which is acceptable.

01:46:58.573 --> 01:47:00.417
Repeating this for multiple 
images on our site allowed to us

01:47:00.418 --> 01:47:02.418
bring down the 

01:47:05.929 --> 01:47:08.213
That was pretty easy for static 
images, but what about the 

01:47:08.214 --> 01:47:10.214
animated content?

01:47:14.373 --> 01:47:16.373
As much as we all love gifs, 

01:47:18.236 --> 01:47:19.852
especially the one [W-S] ones 
with the cats in them, they are 

01:47:19.853 --> 01:47:21.853
expensive.

01:47:23.344 --> 01:47:25.029
It was never intended as an 
image platform in the first 

01:47:25.030 --> 01:47:27.104
place, there for switching to 
more suitable video format 

01:47:28.922 --> 01:47:30.922
offers you large saving in terms
of the 

01:47:35.036 --> 01:47:38.736
In oodle app we were using a gif
you saw earlier.  According to 

01:47:38.737 --> 01:47:41.364
Lighthouse we could be saving 
over 7 megabytes by swaechg to a

01:47:45.898 --> 01:47:48.328
Our clip waited about 7.3 megs. 
Way too much for any reasonable 

01:47:48.575 --> 01:47:50.575
website.

01:47:52.251 --> 01:47:54.903
So, instead we turned it into a 
video element with two source 

01:47:54.904 --> 01:47:56.904
files, an MP4 

01:48:00.001 --> 01:48:02.001
Here you can see how we use FFM 

01:48:04.105 --> 01:48:08.063
tool to convert our animation 
jif into the format file.  It 

01:48:08.064 --> 01:48:10.083
offers larger savings, and for 
example image open Tau might the

01:48:10.084 --> 01:48:12.084
eye can 

01:48:14.760 --> 01:48:16.760
We managed to save over 80% of 
our 

01:48:23.380 --> 01:48:27.005
This brought us down to around 1
megabyte.  Still 1 megabyte is a

01:48:27.006 --> 01:48:29.876
large resource to push down the 
wire, especially for 

01:48:34.562 --> 01:48:37.482
the user on the restricted band 
witch bandwidth.  We could use 

01:48:37.483 --> 01:48:39.483
effective API to realize they're
on a low bandwidth and give them

01:48:41.312 --> 01:48:43.312
a much, much smaller J peg 
instead.

01:48:44.408 --> 01:48:46.863
This interface uses the 
effective round-trip down and 

01:48:46.864 --> 01:48:48.864
downing values to estimate the 
network type the user is using.

01:48:55.236 --> 01:48:57.236
It is simply registering 2G, 3G 
or 4G.

01:48:58.578 --> 01:49:00.578
Depending on this value if the 
user is 

01:49:01.876 --> 01:49:04.103
on below 4G we could replace the
video element with the image.  

01:49:04.104 --> 01:49:06.532
It does remove a little bit from
the experience, but at least the

01:49:06.533 --> 01:49:08.533
site is 

01:49:12.927 --> 01:49:15.580
Last, but not least there is a 
common problem of off screen 

01:49:15.581 --> 01:49:20.547
images.  Curse or, sliders, 
really long pages often load 

01:49:20.548 --> 01:49:22.786
images even though the user 
cannot see them on the page 

01:49:22.787 --> 01:49:26.468
right away.  Lighthouse reflect 
this behavior in the off screen 

01:49:26.469 --> 01:49:29.324
images audit and you can see it 
for yourself in the network 

01:49:29.325 --> 01:49:34.425
panel for DevTools.  If you see 
a lot of images coming while 

01:49:34.426 --> 01:49:36.074
only few are visible on the 
page, it means that maybe you 

01:49:36.075 --> 01:49:38.075
could consider 

01:49:43.254 --> 01:49:45.117
Lazy loading is not yet 
supported natively in the 

01:49:45.118 --> 01:49:47.118
browser, so we have to 

01:49:48.197 --> 01:49:50.197
use JavaScript to add this 
capability.

01:49:51.264 --> 01:49:53.264
Here you can see how we use lazy

01:49:54.347 --> 01:49:57.980
sidees to add lazy loading 
behavior to our oodle covers.  

01:49:57.981 --> 01:49:59.209
Lazy loading is smart because it
does not only track the 

01:49:59.210 --> 01:50:01.210
visibility changes of 

01:50:02.924 --> 01:50:03.955
the element but it also 
practically perfects elements 

01:50:03.956 --> 01:50:05.956
that are near the view 

01:50:08.673 --> 01:50:09.897
It also offers an optional 
integration of the intersection 

01:50:09.898 --> 01:50:12.788
observe e, which gives you very 
efficient 

01:50:17.086 --> 01:50:18.926
As you you can see after this 
change, our images are being 

01:50:18.927 --> 01:50:26.694
fetched on      Okay.  That's a 
lot of good stuff about images. 

01:50:26.695 --> 01:50:29.169
So, just remember, always 
optimize images before pushing 

01:50:29.170 --> 01:50:31.170
them to the user.

01:50:33.043 --> 01:50:34.071
Use responsive images techniques
to achieve the right size of the

01:50:34.072 --> 01:50:36.090
image.  Use lighter formats 
wherever possible, 

01:50:41.012 --> 01:50:43.012
And, finally, lazy load, 
whatever 

01:50:47.594 --> 01:50:49.008
If you want to dig deeper into 
that topic, here is a present 

01:50:49.009 --> 01:50:51.009
for you.

01:50:52.699 --> 01:50:54.699
A very handy and comprehensive 
guide written by Addy.

01:50:57.161 --> 01:50:59.161
So, you can see it as images.
guide url.

01:51:01.242 --> 01:51:03.251
&gt;&gt; ADDY OSMANI: Cool.  Let's 
talk about resources that are 

01:51:07.159 --> 01:51:08.594
Now, not every bite that is 
shipped down the wire to the 

01:51:08.595 --> 01:51:11.252
browser has the same degree of 
importance, and the browser 

01:51:11.253 --> 01:51:13.253
knows this.

01:51:15.781 --> 01:51:17.398
A lot of browsers have Hugh 
wrist sticks to decide what they

01:51:17.399 --> 01:51:20.049
should be fetching first.  
Sometimes they will fetch CSS 

01:51:20.050 --> 01:51:24.758
before images or scripts.  Now, 
something that could be useful 

01:51:24.759 --> 01:51:26.759
is 

01:51:28.104 --> 01:51:29.949
us as authors of the maeth 
informing the browser what is 

01:51:29.950 --> 01:51:33.010
important to us.  Thankfully 
over the last couple of years 

01:51:33.011 --> 01:51:34.640
browser vendors have been add 
ago number of features to help 

01:51:34.641 --> 01:51:36.641
us with this.

01:51:38.541 --> 01:51:40.541
Things like link connect or 
pre-load or pre-fekt.

01:51:42.261 --> 01:51:44.133
These help the browser fetch the
right thing at the right time, 

01:51:44.134 --> 01:51:48.044
and they can be a little bit 
more efficient than some of the 

01:51:48.045 --> 01:51:50.045
custom loading logic based 
approach 

01:51:51.556 --> 01:51:52.981
So, let's see how Lighthouse 
actually guides us towards using

01:51:52.982 --> 01:51:54.982
some of 

01:51:58.715 --> 01:52:01.573
The first thing Lighthouse tells
us to do is avoid multiple 

01:52:01.574 --> 01:52:05.266
costly round trips to any 
origin.  In the case of ood Del 

01:52:05.267 --> 01:52:07.703
app we're using heavily Google 
fonts.  Whenever you drop in a 

01:52:07.704 --> 01:52:11.199
Google font style sheet into 
your page, it is going to 

01:52:11.200 --> 01:52:13.039
connect up to two sub domains.  
The Lighthouse is telling us is 

01:52:13.040 --> 01:52:15.271
that if we were able to warmup 
that 

01:52:20.554 --> 01:52:21.771
connection, we could could save 
up to 3 milliseconds in our 

01:52:21.772 --> 01:52:23.772
connection time.  Taking 
advantage of the pre-connect, 

01:52:27.306 --> 01:52:29.343
we ak effectively match that 
connection latency.  Something 

01:52:29.344 --> 01:52:31.344
with Google fonts where our 

01:52:32.457 --> 01:52:34.684
fonlt face CSS is host owed 
Google APIs.com and our font 

01:52:34.685 --> 01:52:37.596
resource rest host owed G 
static, this can have a big many

01:52:37.799 --> 01:52:39.799
packet.  We applied this 
optimization and 

01:52:43.757 --> 01:52:45.757
The next thing Lighthouse 
suggests 

01:52:47.235 --> 01:52:49.697
is we pre-load key requests.  It
informs the browse their a 

01:52:49.698 --> 01:52:52.366
resource is needed as part of 
the current navigation and it 

01:52:52.367 --> 01:52:54.367
tries to get the browser 
fetching it as soon as possible.

01:52:55.643 --> 01:52:58.117
Now, here Lighthouse is telling 
us that we should be going and 

01:52:58.118 --> 01:53:00.396
pre-loading our key web font 
resources because we're 

01:53:05.741 --> 01:53:07.741
Pre-loading in a web font looks 
like this.

01:53:08.789 --> 01:53:10.814
Specificly Rel equals pre-load 
you pass in as with a type of 

01:53:10.815 --> 01:53:14.496
font and then you specify the 
type of font you're trying to 

01:53:14.497 --> 01:53:16.529
load in such as lof2.  The 
impact this can have on your 

01:53:16.530 --> 01:53:22.237
page is quite stark.  So, nomly 
without using [PE] spell load, 

01:53:22.238 --> 01:53:23.744
if web fonts happen to be 
critical to your page, what the 

01:53:23.745 --> 01:53:25.745
browser has to do 

01:53:26.854 --> 01:53:28.921
is it first of all has to fetch 
your html and parse your CSS and

01:53:28.922 --> 01:53:31.799
somewhere much later down the 
line it will fetch 

01:53:35.879 --> 01:53:37.879
Using link well present load as 
soon as 

01:53:39.373 --> 01:53:41.627
the browser has parsed your html
it can fetch it early on.  In 

01:53:41.628 --> 01:53:43.463
the case of our app this was 
able to shave a second off the 

01:53:43.464 --> 01:53:45.464
time it took for us to render 
text using our web 

01:53:49.968 --> 01:53:51.432
Now, it's not quite that 
straightforward if you are going

01:53:51.433 --> 01:53:55.703
to try pre-loading fonts using 
Google fonts.  There is one got 

01:53:55.704 --> 01:53:58.568
chau.  The Google font urls that
we specify 

01:54:01.847 --> 01:54:04.143
in our font faces and style 
sheets happen to be something 

01:54:04.144 --> 01:54:06.144
that the font teams update.

01:54:08.625 --> 01:54:10.484
These urls can expire or get 
updated so what suggest to do if

01:54:10.485 --> 01:54:14.560
you want complete control of 
your font loading experience is 

01:54:14.561 --> 01:54:16.848
to self-host your web fonts.  
This can be great because it 

01:54:16.849 --> 01:54:21.910
gives you things like link rel 
pre-load.  We found the toog 

01:54:21.911 --> 01:54:24.547
Google when helper really useful
in helping us the web 

01:54:29.696 --> 01:54:32.568
Now, whether you're using web 
fonts as part of your critical 

01:54:32.569 --> 01:54:36.450
resources or it happens to be 
JavaScript, try to help the 

01:54:36.451 --> 01:54:39.119
browser identify your resources 
a soon as possible.  If you are 

01:54:39.120 --> 01:54:41.120
connecting up to mult mull 

01:54:44.157 --> 01:54:46.157
origins consider use link Rel 
reconnect.

01:54:48.203 --> 01:54:52.254
Use link well pre-load.  We 
happen to have a good pre-load 

01:54:52.255 --> 01:54:56.188
plug in available for web pack. 
If you haven't asse future 

01:54:52.255 --> 01:54:56.326
navigation, consider using 
pre-fetch.  This has good 

01:54:56.327 --> 01:54:58.327
support now in the 

01:54:59.623 --> 01:55:02.501
Now, we've got something special
to share with you today.  In 

01:55:02.502 --> 01:55:04.502
addition to features like 
resource 

01:55:06.878 --> 01:55:08.709
hints, as well as present 
pre-load, we have been working 

01:55:08.710 --> 01:55:10.710
on a brand new 

01:55:11.791 --> 01:55:13.678
experiment shul feature calling 
priority hints.  This is a 

01:55:13.679 --> 01:55:15.076
feature that allows you to hint 
to the browser how important a 

01:55:15.077 --> 01:55:17.077
resource is.

01:55:19.137 --> 01:55:22.831
It expose [AES] new exposes a 
new attribute with low, high, or

01:55:22.832 --> 01:55:25.909
auto.  This allows us to convey 
lowering the priority of less 

01:55:25.910 --> 01:55:28.367
important resources such as 
non-critical styles, images, or 

01:55:31.040 --> 01:55:33.492
fetch API calls to reduce 
contention.  We can also boost 

01:55:33.493 --> 01:55:35.493
the priority of more 

01:55:37.771 --> 01:55:39.820
In the case of our oodle app 
this led to one practical place 

01:55:39.821 --> 01:55:43.739
where we could optimize.  So, 
before we added lazy loading to 

01:55:45.369 --> 01:55:47.652
our images, what the browser was
doing is we had this image 

01:55:47.653 --> 01:55:49.682
carousel with all of our 
doodles, and the browser is 

01:55:51.944 --> 01:55:53.556
fetching all of the images at 
the very start of the carousel 

01:55:53.557 --> 01:55:56.230
with a high priority early on.  
Unfortunately, it was the images

01:55:56.231 --> 01:55:59.292
in the middle of the carousel 
that were most important to the 

01:55:59.293 --> 01:56:03.203
user.  So, what we did was we 
set the importance of those 

01:56:03.204 --> 01:56:05.484
background images to very low, 
the for growbt ones to very 

01:56:07.730 --> 01:56:09.730
high, and with what this had was
a 

01:56:11.438 --> 01:56:13.273
two-second impact over 3G and 
how quick rewe were able to 

01:56:13.274 --> 01:56:17.134
fetch and render those images.  
So, nice positive experience.  

01:56:17.135 --> 01:56:19.135
We're hoping to bring this feech
tour 

01:56:20.675 --> 01:56:22.497
Canary in a few weeks, so keep 
an eye      The next thing I 

01:56:22.498 --> 01:56:25.804
want to talk about the 
typography.  It is fundamental 

01:56:25.805 --> 01:56:29.063
to good design.  If you are 
using web fonts you don't want 

01:56:29.064 --> 01:56:31.295
to block rendering of your text 
and you definitely don't want to

01:56:31.296 --> 01:56:34.772
show invisible text.  We 
highlight this in Lighthouse now

01:56:36.614 --> 01:56:38.037
with the avoid p invisible text 
while web fonts are loading 

01:56:38.038 --> 01:56:40.038
audit.

01:56:41.309 --> 01:56:43.337
If you load your web fonts using
a font face block you are 

01:56:43.338 --> 01:56:47.032
allowing the browse tore decide 
what to do if it takes a long 

01:56:47.033 --> 01:56:49.311
time for that web font to fetch.
Some browsers will wait anywhere

01:56:49.312 --> 01:56:52.583
up to three seconds for this 
before falling back to a system 

01:56:52.584 --> 01:56:56.079
font and eventually swap it out 
to the font once it is download.

01:56:57.722 --> 01:57:00.003
We're trying the avoid this 
invisible text.  We wouldn't 

01:57:00.004 --> 01:57:01.796
have been able to see the 
classic doodles if the web font 

01:57:01.797 --> 01:57:06.488
had      Thankfully with a new 
feature called font display you 

01:57:06.489 --> 01:57:08.489
get a lot more control over this
process.

01:57:10.572 --> 01:57:12.403
Font display helps you decide 
how web fonts will render or 

01:57:12.404 --> 01:57:14.404
fall back based on how long it 
takes for them to swap.

01:57:17.095 --> 01:57:19.445
Now, in this case we're using 
font display swap.  It gives the

01:57:19.446 --> 01:57:22.277
font face a swreer so second 
block period and an infinite 

01:57:22.278 --> 01:57:24.532
swap period.  This is going to 
draw your text pretty 

01:57:26.436 --> 01:57:28.058
immediately with the fall back 
font if the font takes a while 

01:57:28.059 --> 01:57:30.499
to load.  It is going to swap it
once the font face is available.

01:57:33.555 --> 01:57:35.555
In the case of our (?

01:57:37.061 --> 01:57:39.163
)  It allows us to display text 
very early on and transfer it to

01:57:39.164 --> 01:57:43.647
the web font      In general f 
you happen to be using February 

01:57:43.648 --> 01:57:46.334
fonts as the large percentage of
the web does have a good web 

01:57:46.335 --> 01:57:48.335
font loading strategy in place.

01:57:51.251 --> 01:57:53.923
There are a lot of web form 
features you can use, checkout 

01:57:53.924 --> 01:57:55.924
Zach whether lance 

01:57:59.063 --> 01:58:01.063
Next up is Ewa to talk about 
render 

01:58:02.945 --> 01:58:04.775
&gt;&gt; EWA GASPEROWICZ:  Displaying 
text is very important, but we 

01:58:04.776 --> 01:58:06.809
can go further than that.  There
are other parts of our 

01:58:09.317 --> 01:58:11.373
application that we could push 
earlier in the download chain to

01:58:11.374 --> 01:58:13.828
provide at least some basic user
experience a 

01:58:17.904 --> 01:58:20.626
Here on the Lighthouse timeline 
strip you can see that during 

01:58:20.627 --> 01:58:25.163
this first few seconds when all 
the resources are loading the 

01:58:25.164 --> 01:58:27.164
user cannot really see any 
content.

01:58:30.675 --> 01:58:31.900
Downloading and processing 
sheets is blocking our ren derpg

01:58:31.901 --> 01:58:33.901
process from making any 
progress.

01:58:37.414 --> 01:58:39.459
Well, we can try to optimize our
critical rendering path by 

01:58:39.460 --> 01:58:41.460
delivering 

01:58:42.793 --> 01:58:44.638
some of the slice a bit earlier.
If we extract the slides that 

01:58:44.639 --> 01:58:48.931
are responsible for this initial
render and align them in our 

01:58:48.932 --> 01:58:51.592
html, the browser is able to 
render them straightaway without

01:58:55.202 --> 01:58:57.202
waiting for the external

01:59:00.425 --> 01:59:02.661
In our case we used MPN called 
critical in html in a build 

01:59:02.662 --> 01:59:06.334
step.  While this module did 
most of the heavy lifting for 

01:59:06.335 --> 01:59:08.393
us, it was still a little bit 
tricky to get this working 

01:59:13.321 --> 01:59:15.321
The truth is, if you are not 

01:59:16.359 --> 01:59:18.359
careful or your site structure 
is vaelly 

01:59:21.416 --> 01:59:23.316
complex, it might be really 
difficult to introduce this type

01:59:23.317 --> 01:59:25.317
of pattern if you 

01:59:26.995 --> 01:59:27.814
did not Plan for offshore 
architecture from the very 

01:59:27.815 --> 01:59:31.725
beginning.  This is why it is 
important to take performance 

01:59:31.726 --> 01:59:33.759
considerations early on.  If you
don't design for performance 

01:59:36.424 --> 01:59:38.424
from the start, there is high 
chance 

01:59:40.917 --> 01:59:42.770
In the end, our risk paid off.  
We managed to make it working, 

01:59:42.771 --> 01:59:44.771
and the app started delivering 
content much 

01:59:48.130 --> 01:59:50.130
earlier improving our first 
meaningful 

01:59:53.670 --> 01:59:56.101
So, to sum up, to unblock the 
rendering process considering 

01:59:56.102 --> 01:59:58.360
aligning critical starts in the 
document and 

02:00:04.506 --> 02:00:06.949
For non-critical script, 
consider marking the attribute, 

02:00:06.950 --> 02:00:08.950
or lazy load them 

02:00:10.231 --> 02:00:15.635
Okay.  So, that's the whole 
story of how we drew the horse 

02:00:15.636 --> 02:00:17.636
and tried to put it in a 

02:00:19.792 --> 02:00:21.792
&gt;&gt; EWA GASPEROWICZ:  Let's take 
a 

02:00:23.883 --> 02:00:26.326
This is how our app loaded on a 
medium mobile device on a 3G 

02:00:26.327 --> 02:00:28.765
network.  Before and after the 
optimization.

02:00:36.358 --> 02:00:37.554
All of this progress was fueled 
by us continuously checking and 

02:00:37.555 --> 02:00:39.555
following the Lighthouse report.

02:00:42.623 --> 02:00:44.385
All of the hinges you have seen 
today are LinkedIn Lighthouse 

02:00:44.386 --> 02:00:47.758
tool so that you can check them 
in the context of your own 

02:00:47.759 --> 02:00:51.851
application.  If you would like 
to check out how we technically 

02:00:51.852 --> 02:00:53.852
implemented all of the 

02:00:55.106 --> 02:00:57.106
changes, feel free to take a 
look at our 

02:01:00.671 --> 02:01:04.760
The performance score went up 
from 23 to 91.  That's pretty 

02:01:04.761 --> 02:01:07.871
nice, right.  However, our goal 
was never to make Lighthouse 

02:01:07.872 --> 02:01:11.573
happy.  We wanted to make the 
user happy.  And, high level 

02:01:11.574 --> 02:01:13.574
metrics included in 

02:01:15.233 --> 02:01:17.233
the report, like time 
interactive or 

02:01:19.001 --> 02:01:21.001
perceptual speed index are a 
good proxy 

02:01:22.247 --> 02:01:23.875
Also the snapshots timeline 
gives you a nice visual feedback

02:01:23.876 --> 02:01:25.876
about how much shorter the 
waiting time for our 

02:01:31.050 --> 02:01:33.918
This is the full story of little
oodel app.  Now let's take a 

02:01:33.919 --> 02:01:35.919
look at some much 

02:01:37.274 --> 02:01:38.499
&gt;&gt; ADDY OSMANI:  Ewa and I had 
the benefit of being able to 

02:01:38.500 --> 02:01:42.478
think about performance very 
early on but how does this apply

02:01:42.479 --> 02:01:44.479
at scale to much larger 

02:01:46.549 --> 02:01:48.393
Let's take a look at NIKKE itch,
they are jaw pans largest media 

02:01:48.394 --> 02:01:52.923
company.  They have a site that 
has 450 million users that are 

02:01:52.924 --> 02:01:55.213
accessing it and they spend a 
lot of time optimizing their old

02:01:57.702 --> 02:02:00.336
mobile site turning it into a 
new PWA.  The impact of 

02:02:00.337 --> 02:02:02.337
performance optimizations were 
huge.

02:02:04.578 --> 02:02:06.578
[WRE] able to get

02:02:08.779 --> 02:02:11.214
they were able to see 14 seconds
user and their daily active 

02:02:11.215 --> 02:02:13.215
users and page views also went 
up.

02:02:17.527 --> 02:02:19.527
What did they do to optimize 
their performance?

02:02:21.218 --> 02:02:23.493
You take a look at what NIKKEI 
did, they will look familiar 

02:02:23.494 --> 02:02:25.494
that's because many of these 
things we covered today.

02:02:28.846 --> 02:02:33.130
NIKKEI optimized bundles, and 
shrank them down by 3%.  One big

02:02:33.131 --> 02:02:35.184
change they made was use web 
pack to optimize their 

02:02:35.185 --> 02:02:37.222
performance in their first and 
third party ones.

02:02:41.093 --> 02:02:43.150
They were Al to use link Rel 
fetch improving next page 

02:02:43.151 --> 02:02:46.650
performance loading by 75%.  In 
addition to this they also took 

02:02:46.651 --> 02:02:51.730
a tip that Ewa was just walking 
through, critical-path 

02:02:51.731 --> 02:02:57.151
optimization.  This an on open 
Tau muzation where you're 

02:02:57.152 --> 02:02:59.022
sending down 14 kilobytes 
consent, and you're able to xees

02:02:59.023 --> 02:03:03.807
in enough styles in there you 
can reduce it by quite a lot.  

02:03:03.808 --> 02:03:06.475
Here they were able to shake off
a second of their first 

02:03:06.476 --> 02:03:08.476
meaningful pain of 

02:03:11.782 --> 02:03:13.782
Finally on NIKKE, they took 
advantage of the purple pattern.

02:03:15.276 --> 02:03:17.276
Purple was a pattern first 
discovered 

02:03:18.321 --> 02:03:20.582
by the polymer team, it stands 
for push, render, pre-cache and 

02:03:20.583 --> 02:03:22.583
lazy load.

02:03:25.282 --> 02:03:27.282
What they're doing is pushing 
their 

02:03:29.167 --> 02:03:29.244
resources and they're rendering 
their main article content quite

02:03:29.245 --> 02:03:31.245
quiekly.

02:03:32.260 --> 02:03:33.201
They're pre-cachecaching their 
top stories using service 

02:03:33.202 --> 02:03:35.444
worker.  This gives them off 
line access to read art I can 

02:03:35.445 --> 02:03:37.445
cuss as well, and they're lazy 
loading code, and they're also 

02:03:39.590 --> 02:03:41.590
using skeleton screens to 
improve the 

02:03:44.290 --> 02:03:46.342
So, we talked about how 
performance and how businesses 

02:03:46.343 --> 02:03:48.343
to give users better 

02:03:50.079 --> 02:03:52.583
experience, but on users we have
one more thing that we think 

02:03:52.584 --> 02:03:54.584
could help with the future.

02:03:57.424 --> 02:03:59.592
&gt;&gt; EWA GASPEROWICZ:  Well, as 
you are heard during the 

02:04:00.818 --> 02:04:03.467
keynote, we believe that machine
learning reports an exciting 

02:04:03.468 --> 02:04:05.468
opportunity for future in many 
areas.

02:04:09.433 --> 02:04:11.066
So, what if we could take this 
two words of machine learning 

02:04:11.067 --> 02:04:15.661
and web performance and blend 
them together?  Maybe it could 

02:04:15.662 --> 02:04:17.662
lead us to some really, 

02:04:18.736 --> 02:04:20.763
really interesting solution 
solutions.  Today we want to 

02:04:20.764 --> 02:04:22.764
tell you about our experience 
with machine learning and 

02:04:23.834 --> 02:04:25.834
explain why we think it has a 
large 

02:04:26.926 --> 02:04:29.384
Here is an idea that we hope 
will spark more experimentation 

02:04:29.385 --> 02:04:31.385
in the future 

02:04:32.841 --> 02:04:34.885
that real data can really guide 
the user experiences we're 

02:04:34.886 --> 02:04:36.886
creating.

02:04:38.152 --> 02:04:39.586
Today we make a lot of ash bra 
Terry decisions about what the 

02:04:39.587 --> 02:04:41.587
user might want or need.

02:04:47.136 --> 02:04:49.984
And, therefore, what is being 
pre-loaded.  If we guess right, 

02:04:49.985 --> 02:04:53.501
we are able to prioritize a 
small amount of resources, but 

02:04:53.502 --> 02:04:55.502
it is really hard to scale it to
the 

02:04:58.067 --> 02:05:00.333
At the same time, we have a 
wealth of data about typical 

02:05:00.334 --> 02:05:02.334
user behavior readily available.

02:05:07.536 --> 02:05:09.536
&gt;&gt; ADDY OSMANI: So, we actually 

02:05:10.590 --> 02:05:13.862
have data available to better 
inform our optimizations today. 

02:05:13.863 --> 02:05:15.863
Using the Google analytics 
reporting 

02:05:16.912 --> 02:05:18.945
API we can take a look at the 
next top page for any url on our

02:05:18.946 --> 02:05:21.602
site.  In fact we have a little 
tool for this that anybody can 

02:05:21.603 --> 02:05:27.921
checkout.  Here it is for 
developers.dpoog el.com/web.  As

02:05:27.922 --> 02:05:30.214
we can see here a lot of the 
users that land on the Chrome 

02:05:30.215 --> 02:05:32.215
Dev Tools documentation actually
end up going over 

02:05:36.487 --> 02:05:38.487
to Lighthouse so we could 
potentially pre-fetch that page.

02:05:41.051 --> 02:05:42.464
And, we could use this data to 
improve our page load 

02:05:42.465 --> 02:05:47.386
performance.  This gives us the 
notion of data driven loading 

02:05:47.387 --> 02:05:49.442
for improving the performance of
websites, but there is one piece

02:05:49.443 --> 02:05:51.443
missing here.

02:05:53.122 --> 02:05:54.964
Having a good probability model 
is important because we don't 

02:05:54.965 --> 02:05:56.965
want to waste 

02:05:58.866 --> 02:06:02.662
our users data by aggressively 
over (?)  And content.  We can 

02:06:02.663 --> 02:06:04.712
take advantage of that Google 
analytics data and use machine 

02:06:04.713 --> 02:06:06.713
learning 

02:06:10.684 --> 02:06:14.884
and models like mark off chains 
or neural networks in order to 

02:06:10.684 --> 02:06:12.683
implement such probability 
models.  This is a lot less 

02:06:12.684 --> 02:06:15.118
subjective and error prone than 
man Julie deciding what we 

02:06:15.119 --> 02:06:17.119
should be pre-fetching or 
pre-loading 

02:06:19.112 --> 02:06:21.340
We can then wire this all up 
using link Rel pre-fetch inside 

02:06:21.341 --> 02:06:23.341
of our sites so as the user 
browsees through the site we're 

02:06:26.645 --> 02:06:28.645
able to fetch and cache things 
they need 

02:06:32.010 --> 02:06:33.861
We can go further than this.  
Earlier we talked about code 

02:06:33.862 --> 02:06:37.731
splitting and lazy loading but 
in a single page app we're 

02:06:37.732 --> 02:06:42.686
dealing with routes, chunks, and
a bund ler.  So, instead of 

02:06:42.687 --> 02:06:46.816
pre-fetching pages we can go 
granular.  What if we could 

02:06:46.817 --> 02:06:48.817
pre-fetch a number of 

02:06:51.309 --> 02:06:53.135
Well across all of these ideas 
we've been focused on trying to 

02:06:53.136 --> 02:06:55.136
make some of these a little bit 
more low 

02:06:58.088 --> 02:06:59.946
friction for web developers to 
adopt.  Today we're happy to 

02:06:59.947 --> 02:07:02.836
announce a new initiative called
guess JS.  Guess.

02:07:06.311 --> 02:07:07.342
js is a project focused on data 
driven user experiences for the 

02:07:07.343 --> 02:07:12.270
web.  We hope that it is going 
to inspire and poil laetion of 

02:07:12.271 --> 02:07:13.914
using data to improve web 
perform skmans be object 

02:07:13.915 --> 02:07:17.203
objected.  That it is all open 
source and available on GitHub 

02:07:17.204 --> 02:07:19.265
today.  This is built in 
collaboration with 

02:07:23.160 --> 02:07:24.989
the open source kmin it tee by 
NIKK Kevin, Carl Matthews from 

02:07:24.990 --> 02:07:26.990
gat see, Katie 

02:07:30.502 --> 02:07:35.216
Let's take a look at what guess.
gs out of the box.  The first 

02:07:35.217 --> 02:07:37.653
thing it is Google analytics 
module.  It has a parser for 

02:07:37.654 --> 02:07:40.513
popular frameworks allowing to 
us make map those urls back 

02:07:43.648 --> 02:07:45.681
We then have a comprehensive web
pack plug in that is able to do 

02:07:45.682 --> 02:07:49.973
machine learning training on 
some of that data to determine 

02:07:49.974 --> 02:07:52.839
all the probabilities.  We're 
able to bundle the JavaScript 

02:07:56.522 --> 02:07:57.751
for your routes and chunks and 
we're then able to wire it all 

02:07:57.752 --> 02:07:59.752
together for 

02:08:01.449 --> 02:08:03.449
you so we can pre-fetch fetch 
those 

02:08:05.339 --> 02:08:07.339
junks while the user navigates 
through 

02:08:09.033 --> 02:08:11.033
Now, that is enough talk.  What 
about showing you how this works

02:08:12.124 --> 02:08:14.124
in practice?

02:08:17.001 --> 02:08:19.243
So, here we have a demo of guess
JS in action.  What we're first 

02:08:19.244 --> 02:08:21.920
going to do is load up a wrap.  
We're in the DevTools, we're in 

02:08:21.921 --> 02:08:26.608
low end mobile I'm ma laetion 
over slow 3G.  This app is 

02:08:26.609 --> 02:08:28.058
rendered very quickly what we 
can see in the network pan sell 

02:08:28.059 --> 02:08:31.115
the number of routes that are 
already starting to be 

02:08:31.116 --> 02:08:34.391
pre-fetched because we have high
confidence there that are going 

02:08:34.392 --> 02:08:38.805
to be used.  We can toggle on a 
visualization of this.  If pink 

02:08:38.806 --> 02:08:42.095
we voo pages high confidence the
user is going to want.  In green

02:08:42.096 --> 02:08:45.145
we have low confidence and in 
yellow we have mild confidence. 

02:08:45.146 --> 02:08:45.974
We can actually start to 
navigate through this 

02:08:45.975 --> 02:08:47.975
application.  Let's say we go to
cheese.

02:08:50.691 --> 02:08:52.585
We can visualize this again and 
see cheesecake is a page that 

02:08:52.586 --> 02:08:54.908
users will often navigate to.  
As you can see it loaded 

02:08:54.909 --> 02:08:56.909
instantly because it's already 
in the users cache 

02:09:00.975 --> 02:09:02.847
Contextually we're able to 
display to you in this demo all 

02:09:02.848 --> 02:09:05.928
the visualizations of confidence
levels we have for different 

02:09:05.929 --> 02:09:07.929
pages as we navigate through the
site.

02:09:09.400 --> 02:09:11.243
Even this last page, the custard
loaded really, really quickly 

02:09:11.244 --> 02:09:13.244
using 

02:09:15.161 --> 02:09:17.021
Now, pre-fetching is a great 
idea in practice, but we want it

02:09:17.022 --> 02:09:20.911
to be mindful of the users data 
plans.  And, this is where we 

02:09:20.912 --> 02:09:22.912
use navigate ter.connection.

02:09:24.411 --> 02:09:27.100
effective type to make sure this
we're only pre-fetching things 

02:09:27.101 --> 02:09:29.101
when we think 

02:09:30.896 --> 02:09:33.927
So, this is our demo of guess.js
using gats bee.  By the way, 

02:09:33.928 --> 02:09:35.862
this also happens to be a PWA 
with a great performance score, 

02:09:35.863 --> 02:09:39.949
so thank you to both minute 
co-and Kyle for      Check ous 

02:09:39.950 --> 02:09:41.950
guess.

02:09:44.853 --> 02:09:46.902
Today we talked about quite a 
few things, but at the end of 

02:09:46.903 --> 02:09:50.383
the day, performance is about 
inclusivity, it is about people,

02:09:50.384 --> 02:09:52.384
it is about all of us.

02:09:53.695 --> 02:09:55.554
We've all experienced slow pays 
loads on the go, but we've 

02:09:55.555 --> 02:09:59.625
gotten an opportunity today to 
consider considering to give ous

02:09:59.626 --> 02:10:04.356
users more delightful 
experiences that load really,   

02:10:04.357 --> 02:10:07.260
We hope you took something away 
from this talk.  Remember 

02:10:07.261 --> 02:10:09.345
improving performance is a 
journey.  On checkout some of 

02:10:09.346 --> 02:10:12.214
the things we talked about 
today, talk to us in the web 

02:10:12.215 --> 02:10:14.215
Sandbox if you have got any     
That's it from us.

02:10:23.830 --> 02:10:25.830
(Applause) (Cheers)

02:11:43.544 --> 02:11:45.544
Building the Future of 
Artificial 

02:11:50.718 --> 02:11:52.718
Stage 2

02:12:47.256 --> 02:12:49.256
Greg core

02:13:24.153 --> 02:13:26.153
Dianne green

02:13:36.198 --> 02:13:38.198
Die Dr.

02:13:39.199 --> 02:13:41.199
Green

02:14:00.561 --> 02:14:02.561
Fee

02:15:10.461 --> 02:15:12.461
screen)

02:15:16.024 --> 02:15:18.024
Realtime

02:15:21.985 --> 02:15:23.985
Real-time captioning

02:15:33.692 --> 02:15:35.692
Realtime cap

02:15:40.289 --> 02:15:42.289
Realtime captioning on this 
screen)

02:16:18.408 --> 02:16:20.408
yank key

02:28:35.816 --> 02:28:37.687
)&gt;&gt; At this time, please find 
your seat.  Our session will be 

02:28:37.688 --> 02:28:40.686
begin soon.  

02:33:34.012 --> 02:33:36.012
&gt;&gt; DIANNE GREENE:  All right.  
Hello.

02:33:38.125 --> 02:33:40.125
&gt;&gt; DIANNE GREENE:  Who is 

02:33:43.058 --> 02:33:45.058
&gt;&gt; DIANNE GREENE:  Me, too.  Me 
three.

02:33:49.177 --> 02:33:51.239
So, I'm the moderator today.  
I'm Dianne Greene, and I'm 

02:33:51.240 --> 02:33:53.240
running 

02:33:57.216 --> 02:33:59.216
Google Cloud and on the board 
and I am 

02:34:00.314 --> 02:34:02.566
going to briefly introduce our 
really amazing guests we have 

02:34:02.567 --> 02:34:04.567
here.

02:34:07.105 --> 02:34:08.944
I also live on the standard 
campus so I've known one of our 

02:34:08.945 --> 02:34:13.651
guests a long time      So, let 
me just introduce them.  First 

02:34:13.652 --> 02:34:15.652
is fay fay, Dr.

02:34:17.071 --> 02:34:19.071
fay

02:34:20.228 --> 02:34:24.745
FeidFei Li.  He is the Google 
scientist for Google Cloud, she 

02:34:24.746 --> 02:34:26.746
also runs the AI lab at Stanford
University, the vision lab, and 

02:34:31.489 --> 02:34:33.540
then she also founded sailors, 
which is now AI4ALL, which you 

02:34:33.541 --> 02:34:37.074
will hear a little bit later.  
And, is there anything you want 

02:34:37.075 --> 02:34:39.075
to add 

02:34:48.096 --> 02:34:50.096
So, then the other -- so now we 

02:34:53.971 --> 02:34:55.971
have Greg Corrado, and actually,
there is one amazing 

02:34:56.129 --> 02:34:58.129
coincidence.

02:34:59.384 --> 02:35:01.828
Both Fei-Fei and Greg were 
undergraduate physics majors at 

02:35:05.777 --> 02:35:08.691
Princeton together at the same 
time.  And, didn't really know 

02:35:08.692 --> 02:35:10.692
each other 

02:35:13.559 --> 02:35:15.559
&gt;&gt; FEI-FEI LI:  We were studying
&gt;&gt; GREG CORRADO:  It was kind of

02:35:16.669 --> 02:35:18.669
surprising to go to undergrad 
together 

02:35:20.185 --> 02:35:23.039
and then neither of us in 
Computer Science and then rejoin

02:35:23.040 --> 02:35:25.040
later only once 

02:35:28.784 --> 02:35:33.122
&gt;&gt; DIANNE GREENE:  Hall pass AI 
and neural networks.Anyhow.  So,

02:35:33.123 --> 02:35:35.830
Greg is a principal scientist in
the Google brain group.  He 

02:35:35.831 --> 02:35:37.831
co-founded it.

02:35:39.539 --> 02:35:41.539
And, more recently he has been 
doing a 

02:35:43.918 --> 02:35:44.934
lot of amazing work in health 
with neuronetworks and machine 

02:35:44.935 --> 02:35:46.935
learning.  He has a Ph.D.

02:35:49.013 --> 02:35:51.704
in neuroscience from Stanford, 
and so he came in to AI in a 

02:35:51.705 --> 02:35:53.705
very interesting 

02:35:55.621 --> 02:35:56.639
way and maybe he'll talk about 
the similarities between the 

02:35:56.640 --> 02:35:58.640
brain and what 

02:35:59.969 --> 02:36:02.204
Would you like to add anything 
else?     &gt;&gt; GREG CORRADO: No.  

02:36:02.205 --> 02:36:04.842
&gt;&gt; DIANNE GREENE:  Okay.  So, I 
thought since both of them have 

02:36:07.543 --> 02:36:09.543
been involved in the AI field 
for a 

02:36:12.432 --> 02:36:14.257
while, and it wasn't, you know, 
it's recently become a really 

02:36:14.258 --> 02:36:16.258
big deal, but it would be nice 
to get a little 

02:36:20.012 --> 02:36:21.438
perspective on the history, you 
know, yours in vision and yours 

02:36:21.439 --> 02:36:23.439
in 

02:36:25.526 --> 02:36:27.526
neuroscience about AI and how it
was so 

02:36:30.252 --> 02:36:32.252
natural for it to evolve to what
it is 

02:36:33.720 --> 02:36:35.720
&gt;&gt; FEI-FEI LI:  I guess I'll 
start.

02:36:37.839 --> 02:36:39.839
So, first of all, AI is a very 
basic 

02:36:42.083 --> 02:36:45.078
field in the history of science,
of human civil layzation this, 

02:36:45.079 --> 02:36:47.079
is a 

02:36:49.112 --> 02:36:52.728
field of only of 0 60 years of 
age.  It is a simple request.  

02:36:52.729 --> 02:36:54.729
Can machines think.  And, we all
know thinkers and thought 

02:36:58.860 --> 02:36:59.682
leaders like Allan Touring 
challenged humanity with that 

02:36:59.683 --> 02:37:01.683
question.

02:37:03.973 --> 02:37:05.973
So, about 60 years ago a group 
of 

02:37:07.301 --> 02:37:09.301
very pioneering scientists, 
computer 

02:37:11.171 --> 02:37:13.230
scientists like Marvin Menske, 
John mark car thee, started 

02:37:13.231 --> 02:37:15.231
really this field, 

02:37:16.903 --> 02:37:18.903
John McCarthy who founded 
Stanford' AI 

02:37:21.834 --> 02:37:23.834
So, where do we begin to build 
machines that think?

02:37:27.015 --> 02:37:29.015
Humanity is best at looking 
inward in 

02:37:30.887 --> 02:37:33.562
ourselves and try to draw 
inspiration from who we are, so 

02:37:33.563 --> 02:37:36.116
we started thinking about 
building machines that resemble 

02:37:36.956 --> 02:37:39.653
human thinking.  And, when you 
think about human in 

02:37:42.658 --> 02:37:46.401
till intelligence, you start 
thinking about different aspect,

02:37:46.402 --> 02:37:48.491
ability to reason, ability to 
see, ability to hear, to 

02:37:53.848 --> 02:37:55.848
speak, to move around, make 
decisions, manipulate.

02:37:59.001 --> 02:38:01.855
So, AI started from the very 
core foundational dream 60 years

02:38:01.856 --> 02:38:03.856
ago, started 

02:38:06.395 --> 02:38:08.395
to proliferate as a field of 
multiple 

02:38:09.648 --> 02:38:12.542
subfield, which includes 
robotics, computer vision, 

02:38:12.543 --> 02:38:14.543
national language 

02:38:16.024 --> 02:38:18.024
And, there is a very important 

02:38:19.533 --> 02:38:21.587
development happened a round the
80's and 90's, which is a sister

02:38:21.588 --> 02:38:26.581
field called machine learning 
started to blossom.  And, that's

02:38:26.582 --> 02:38:28.643
a field combining statistical 
learnings, statisit was 

02:38:32.542 --> 02:38:34.542
noticestatistics with Computer 
Science 

02:38:35.698 --> 02:38:37.931
and combining the quest of 
machine intelligence, which is 

02:38:37.932 --> 02:38:39.932
what AI was borne 

02:38:42.032 --> 02:38:44.050
out of, with the fools and the 
capabilities of machine 

02:38:44.051 --> 02:38:46.310
learning.  AI as a field went 
through an 

02:38:51.264 --> 02:38:54.367
extremely fruitful productive 
blossoming period of time.  In 

02:38:54.368 --> 02:38:56.368
fact, fast forward to the second

02:38:58.089 --> 02:39:00.760
decade of 21st century, the 
latest machine learning booming 

02:39:00.761 --> 02:39:03.198
that we are observing is called 
deep learning, which 

02:39:06.668 --> 02:39:09.156
has a deep root in neuroscience,
which I will let you talk about,

02:39:09.157 --> 02:39:11.157
and so 

02:39:12.748 --> 02:39:14.589
combining deep learning as a 
powerful statistical machine 

02:39:14.590 --> 02:39:16.590
learning tool with 

02:39:19.102 --> 02:39:21.829
the quest of making machines 
more intelligent.  Whether it is

02:39:21.830 --> 02:39:23.830
to see or is it to hear 

02:39:27.829 --> 02:39:29.829
And, lastly I just want to say, 

02:39:31.793 --> 02:39:33.793
three critical factors converged
around 

02:39:34.809 --> 02:39:36.809
the

02:39:38.396 --> 02:39:40.396
last decade, which is the 
2000's, in 

02:39:43.139 --> 02:39:44.962
the beginning of of 2000 teens, 
which are the three computing 

02:39:44.963 --> 02:39:46.963
factors.

02:39:48.272 --> 02:39:50.272
One is the advance of hardware 
that 

02:39:54.925 --> 02:39:56.925
Second is the emergence of Big 
Data.

02:39:59.870 --> 02:40:01.870
Powerful data that can drive the

02:40:04.888 --> 02:40:07.217
statistical learning allege 
algorithms.  And I was lucky to 

02:40:07.218 --> 02:40:09.218
be involved myself 

02:40:10.521 --> 02:40:12.521
And the third one is advances of

02:40:14.652 --> 02:40:17.316
machine learning and deep 
learning [A*L] algorithms.  So, 

02:40:17.317 --> 02:40:19.317
this converging of three major 

02:40:20.365 --> 02:40:22.365
factors brought us the AI boom 
that 

02:40:23.840 --> 02:40:26.697
we're seeing today, and Google 
has been investing in all three 

02:40:26.698 --> 02:40:29.554
areas.  Honestly earlier than 
the curve.

02:40:32.638 --> 02:40:34.638
Most of the effort started even 
in 

02:40:36.065 --> 02:40:40.660
early 2000' and as a company 
we're doing a lot of AI work 

02:40:40.661 --> 02:40:42.661
from research to products.

02:40:44.580 --> 02:40:46.580
&gt;&gt; GREG CORRADO:  And, it's been

02:40:47.675 --> 02:40:49.909
really interesting to watch the 
divergence and exploration in 

02:40:49.910 --> 02:40:55.017
various academic fields and then
the reconvergence as we see 

02:40:55.018 --> 02:40:57.018
ideas that are aligned.

02:41:00.159 --> 02:41:01.988
So, it wasn't, as Fei-Fei says, 
it wasn't so long ago that 

02:41:01.989 --> 02:41:06.334
fields like cognitive science, 
neuroscience, Artificial 

02:41:06.335 --> 02:41:08.171
Intelligence, even things that 
we don't talk about much more 

02:41:08.172 --> 02:41:10.172
like 

02:41:13.339 --> 02:41:14.562
cyber net I cans, we're really 
all oo lined in a single 

02:41:14.563 --> 02:41:16.563
discipline, and they have moved 
apart from each other and 

02:41:18.355 --> 02:41:20.355
explored these ideas 
independently for a 

02:41:23.484 --> 02:41:25.141
And, then, with the Renaissance 
in artificial neuronetworks and 

02:41:25.142 --> 02:41:27.142
deep 

02:41:28.828 --> 02:41:30.828
learning, we're starting to see 
some reconvergence.

02:41:32.508 --> 02:41:34.569
So, some of these ideas that 
were popular only in a small 

02:41:34.570 --> 02:41:36.833
community for a couple of 
decades are now coming back 

02:41:40.324 --> 02:41:42.361
into the mainstream of what 
Artificial Intelligence is, what

02:41:42.362 --> 02:41:44.362
statistical 

02:41:46.031 --> 02:41:48.935
pattern recognition is has 
really been delightful to see.  

02:41:48.936 --> 02:41:51.374
But, it's not just one idea, 
it's actually multiple ideas 

02:41:51.375 --> 02:41:53.375
that you see 

02:41:55.130 --> 02:41:56.964
that were maintained for a long 
time in field like cognitive 

02:41:56.965 --> 02:42:01.034
science that are coming back 
into the fold.  So, another 

02:42:01.035 --> 02:42:05.731
example beyond deep learning is 
reinforcement learning.  So, for

02:42:05.732 --> 02:42:07.732
the longest time if you looked 

02:42:08.801 --> 02:42:10.827
at a university catalog of 
courses and you were looking for

02:42:10.828 --> 02:42:14.953
any mention of reinforcement 
learning whatsoever, you were 

02:42:14.954 --> 02:42:17.030
going to find it in a psychology
department or a cognitive 

02:42:17.031 --> 02:42:19.031
science department.

02:42:20.737 --> 02:42:23.603
But, today as we all know, we 
look at reinforcement learning 

02:42:23.604 --> 02:42:27.058
as a new opportunity, as 
something that we actually look 

02:42:27.059 --> 02:42:29.059
at for the future of AI that 
might be something that is 

02:42:30.763 --> 02:42:32.763
important to get machines to 
really 

02:42:34.683 --> 02:42:36.121
learn in completely dynamic 
environments, in environments 

02:42:36.122 --> 02:42:38.122
where they 

02:42:40.039 --> 02:42:42.039
have to explore entirely new 
stimuli.

02:42:44.714 --> 02:42:46.714
how this convergence has 
happened back 

02:42:48.446 --> 02:42:50.446
in the direction from those 
ideas into 

02:42:51.496 --> 02:42:52.935
mainstream Computer Science, and
I think there is some hope for 

02:42:52.936 --> 02:42:54.936
exchange back in the other 
direction.

02:42:57.705 --> 02:42:59.776
So, neuroscientists and 
cognitive scientists today are 

02:42:59.777 --> 02:43:01.812
starting to ask whether we can 
take the kind of computer 

02:43:07.733 --> 02:43:10.374
vision models that Fei-Fei 
helped Pioneer and use those 

02:43:10.375 --> 02:43:13.043
hypotheses for how it is that 
neural systems actually 

02:43:16.110 --> 02:43:18.984
compute, how our own biological 
brains see.  And, I think that 

02:43:18.985 --> 02:43:21.023
that is a really, it's really 
exciting to see this kind of 

02:43:22.279 --> 02:43:24.279
exchange between disciplines 
that have 

02:43:26.961 --> 02:43:29.649
&gt;&gt; DIANNE GREENE:  You know, one
little piece of history.  I 

02:43:29.650 --> 02:43:31.650
think that is also interesting 
is 

02:43:32.918 --> 02:43:34.918
what you did Fei-Fei with image 
net, 

02:43:36.597 --> 02:43:38.597
which is a nice way of 
explaining, you 

02:43:39.669 --> 02:43:41.747
know, building these neural 
networks where you labeled all 

02:43:41.748 --> 02:43:43.748
these images and 

02:43:47.616 --> 02:43:50.574
then people could refine their 
allege algorithms.  Go ahead and

02:43:50.575 --> 02:43:53.442
explain that really      &gt;&gt; 
FEI-FEI LI:  Sure.  About ten 

02:43:53.443 --> 02:43:57.564
years ago the whole community of
computer vision, which is the 

02:43:57.565 --> 02:43:59.565
sub field of AI was working on 
the 

02:44:00.637 --> 02:44:02.678
holy grail problem of object 
recognition, which is you open 

02:44:02.679 --> 02:44:05.592
your eye, you can see the world 
full of objects, 

02:44:08.665 --> 02:44:10.665
like flowers, chairs, people, 
you know, 

02:44:12.321 --> 02:44:14.562
and that's a building block of 
visually intelligence and 

02:44:14.563 --> 02:44:17.198
intelligence in general.  And, 
to crack that problem, we were 

02:44:19.034 --> 02:44:23.137
building as a field different 
machine learning models.  We're 

02:44:23.138 --> 02:44:25.138
making small progress but we're 
hitting a lot of walls.

02:44:27.060 --> 02:44:29.703
And, when my student and I 
started working this problem and

02:44:29.704 --> 02:44:31.704
start thinking 

02:44:32.767 --> 02:44:35.622
deeply about what is missing in 
the way we're approaching this 

02:44:35.623 --> 02:44:37.673
problem, we recognize this 
important interplay 

02:44:41.404 --> 02:44:43.905
between data and statistical 
machine learning models.  They 

02:44:43.906 --> 02:44:46.787
really reinforce each other in 
very deep mathematical ways that

02:44:46.788 --> 02:44:48.788
we're 

02:44:52.002 --> 02:44:55.897
That realization was also 
inspired by human vision.  If 

02:44:55.898 --> 02:44:57.898
you look at how children learn, 

02:44:59.576 --> 02:45:01.186
it's a lot of learning through 
Big Data experiences and 

02:45:01.187 --> 02:45:03.187
exploration.

02:45:04.462 --> 02:45:06.462
So, combining that, we decided 
to put 

02:45:10.151 --> 02:45:12.422
together a pretty epic effort of
we wanted to label all the 

02:45:12.423 --> 02:45:14.467
images we can get on the 
Internet, and of course we 

02:45:18.181 --> 02:45:20.449
Google searched a lot, and we 
downloaded billions of images 

02:45:20.450 --> 02:45:22.450
and used crowd 

02:45:24.101 --> 02:45:26.101
sourcing technology to label all
the 

02:45:28.430 --> 02:45:30.430
images, organize them into a 
data set of 

02:45:35.031 --> 02:45:37.031
15 million images, organized in 
22,000 

02:45:38.307 --> 02:45:40.307
categories of objects and put 
that 

02:45:41.610 --> 02:45:43.610
together, and that's the image 
project.

02:45:45.526 --> 02:45:47.578
And, we de-mock craw ties edit 
to the research world and 

02:45:47.579 --> 02:45:49.579
released the open 

02:45:53.713 --> 02:45:56.374
And, then we starting 2010 we 
held an international challenge 

02:45:56.375 --> 02:46:01.861
for the whole AI community 
called image net challenge.  

02:46:01.862 --> 02:46:03.862
And, one of the teams from 
Toronto, 

02:46:05.731 --> 02:46:07.373
which is now at Google, won the 
image      &gt;&gt; DIANNE GREENE:  

02:46:07.374 --> 02:46:11.512
Yeah.  Yeah.     &gt;&gt; FEI-FEI LI: 
With the deep learning con voe 

02:46:11.513 --> 02:46:16.052
lootion on the network model, 
and that was year 2012.  And, a 

02:46:16.053 --> 02:46:18.053
lot of people think the 

02:46:19.344 --> 02:46:21.344
combination of image net and the
deep 

02:46:22.600 --> 02:46:24.600
learning model in 2012 was the 
onset of 

02:46:26.072 --> 02:46:27.290
&gt;&gt; DIANNE GREENE:  A way to 
compare      &gt;&gt; FEI-FEI LI:  

02:46:27.291 --> 02:46:31.371
Exactly.     &gt;&gt; DIANNE GREENE:  
And it was really good.     So, 

02:46:31.372 --> 02:46:33.372
Greg, you've been doing a lot 

02:46:35.429 --> 02:46:39.152
of brain inspired research, very
interesting research.  And, I 

02:46:39.153 --> 02:46:41.153
know you've been doing a lot of 

02:46:42.218 --> 02:46:43.867
Could you tell us a little bit 
about that.     &gt;&gt; GREG CORRADO:

02:46:43.868 --> 02:46:45.868
Sure.

02:46:47.949 --> 02:46:50.177
So, I mean, I think you know, 
the image net example actually 

02:46:50.178 --> 02:46:52.178
sort of sets 

02:46:53.450 --> 02:46:55.450
a play book for how we can try 
to approach a problem.

02:46:58.749 --> 02:47:01.601
The kind of machine learning in 
AI that is most practical and 

02:47:01.602 --> 02:47:04.051
most useful today is once where 
machines learn through 

02:47:04.052 --> 02:47:06.096
imitation.  It is an imitation 
game where if you 

02:47:10.204 --> 02:47:12.861
have examples of a task you can 
perform correctly, the machine 

02:47:12.862 --> 02:47:14.862
can learn to imitate this, and 
this is called 

02:47:17.760 --> 02:47:19.760
So, what happened in the image 

02:47:21.026 --> 02:47:23.706
recognition case is that by 
Fei-Fei building an object 

02:47:23.707 --> 02:47:26.567
recognition data set, we could 
all focus on that problem in a 

02:47:30.058 --> 02:47:31.716
really concrete, attract able 
way in order to compare 

02:47:31.717 --> 02:47:33.717
different methods.  It turned 
out that methods like deep 

02:47:36.829 --> 02:47:37.873
learning and artificial neural 
networks were able to do 

02:47:37.874 --> 02:47:39.874
something really interest 
anything that space that 

02:47:44.186 --> 02:47:45.815
previous machine learning and 
artificial Artificial 

02:47:45.816 --> 02:47:48.048
Intelligence methods had not, 
which was that they were able to

02:47:48.049 --> 02:47:50.049
go 

02:47:51.534 --> 02:47:53.572
directly from the data to the 
predictions and break the 

02:47:53.573 --> 02:47:55.573
problem up 

02:47:57.257 --> 02:47:59.482
knew him smaller steps without 
having being told exactly how to

02:47:59.483 --> 02:48:01.483
do that.

02:48:02.557 --> 02:48:04.177
So, that's what we were doing 
before.  That we were trying to 

02:48:04.178 --> 02:48:06.857
engineer features or queues, 
things that we could 

02:48:11.002 --> 02:48:13.044
see in the stim stimuli that 
then we would do statistical 

02:48:13.045 --> 02:48:15.045
learning on to 

02:48:17.138 --> 02:48:18.993
With artificial neural networks 
and deep learning, we're 

02:48:18.994 --> 02:48:21.841
learning to do those things all 
together.  And, this applies not

02:48:21.842 --> 02:48:26.435
only to computer vision, but it 
applies to most things that you 

02:48:26.436 --> 02:48:28.474
could imagine a machine 
imitating.  So, the kinds of 

02:48:28.475 --> 02:48:30.475
things that we've 

02:48:32.773 --> 02:48:35.188
done, like with Google 
SmartReplay and now smart 

02:48:35.189 --> 02:48:37.189
compose, we're taking that 

02:48:38.294 --> 02:48:40.535
same approach that if you have a
lot of text data, which it turns

02:48:40.536 --> 02:48:44.854
out the Internet is full of, 
what you can actually do is you 

02:48:44.855 --> 02:48:47.696
can look at the sequence of 
words so far in a 

02:48:52.015 --> 02:48:54.015
conversation, or in an email 
exchange 

02:48:55.526 --> 02:48:58.418
and try to guess what comes 
next.     &gt;&gt; DIANNE GREENE:  You

02:48:58.419 --> 02:49:00.419
know, I'm going to interrupt 
here a little bit and 

02:49:03.947 --> 02:49:05.947
&gt;&gt; DIANNE GREENE:  So, you're 

02:49:07.228 --> 02:49:09.228
talking about, you know, neural 
inspired 

02:49:11.936 --> 02:49:13.936
machine learning and so forth, 
and so, 

02:49:15.191 --> 02:49:18.029
you know, this Artificial 
Intelligence is kind of bringing

02:49:18.030 --> 02:49:20.030
into question what 

02:49:21.116 --> 02:49:23.773
are we humans, and then there is
this thing out there called 

02:49:23.774 --> 02:49:27.030
artificial general -- AGI.  
Artificial general intelligence.

02:49:28.934 --> 02:49:31.608
What do you think is going on 
here?     &gt;&gt; GREG CORRADO: I 

02:49:31.609 --> 02:49:33.609
really don't 

02:49:35.503 --> 02:49:37.503
So, there is a variety of 
opinions 

02:49:38.778 --> 02:49:41.452
in the community, but my feeling
is that, okay, we have finally 

02:49:41.453 --> 02:49:44.943
gotten artificial neural 
networks to be able to recognize

02:49:44.944 --> 02:49:46.944
photos of cats.  Right.  That's 
really great.

02:49:51.918 --> 02:49:53.949
&gt;&gt; DIANNE GREENE:  Fei-Fei was 
that      &gt;&gt; FEI-FEI LI: No.

02:49:59.685 --> 02:50:01.327
&gt;&gt; GREG CORRADO:  So the kind of
thing that is working well right

02:50:01.328 --> 02:50:06.205
now is this sort of pattern 
recognize, this immediate 

02:50:06.206 --> 02:50:08.206
response where we're able to 

02:50:09.276 --> 02:50:11.324
recognize something kind of 
reflexly, and we now have, I 

02:50:11.325 --> 02:50:15.618
believe, machines can do pattern
recognition every bit as well as

02:50:15.619 --> 02:50:17.065
humans can, and that's why they 
can recognize objects in photo, 

02:50:17.066 --> 02:50:22.193
that is why they can do speech 
recognition and that is why they

02:50:22.194 --> 02:50:24.836
can win at a game liking.  That 
is only one small sliver, a tiny

02:50:26.698 --> 02:50:28.698
sliver of what goes into 
something like intelligence.

02:50:30.615 --> 02:50:32.615
Notions of memory and planning 
and 

02:50:33.935 --> 02:50:35.777
strategy and contingencies, even
emotional intelligence, these 

02:50:35.778 --> 02:50:37.778
are things 

02:50:39.454 --> 02:50:42.124
that have just, we haven't even 
scratched the surface.  So, to 

02:50:42.125 --> 02:50:44.198
me, I feel like it is really a 
leap too far to imagine that 

02:50:44.199 --> 02:50:48.943
having finally cracked pattern 
recognition, after some decades 

02:50:48.944 --> 02:50:50.944
of trying, that we 

02:50:53.038 --> 02:50:54.277
are therefore on the verge of 
cracking all of these other 

02:50:54.278 --> 02:50:56.278
problems that go into 

02:50:57.379 --> 02:50:59.856
&gt;&gt; DIANNE GREENE:  Although we 
have gone way faster than either

02:50:59.857 --> 02:51:03.557
of you ever expected us to go, I
believe.     &gt;&gt; FEI-FEI LI: Yes 

02:51:03.558 --> 02:51:05.558
and no.

02:51:08.294 --> 02:51:10.294
Humanity has a tendency to over 

02:51:12.147 --> 02:51:13.584
estimate short-term progress and
underestimate long-term 

02:51:13.585 --> 02:51:19.096
progress.  So, eventually we 
will achieving things that we 

02:51:19.097 --> 02:51:21.394
cannot dream of, but Dianne and 
Greg, I want to just give a 

02:51:27.710 --> 02:51:29.710
So, the definition of AGI, 
again, 

02:51:31.328 --> 02:51:33.328
is an in

02:51:35.904 --> 02:51:38.141
tral spectrum definition of what
humans can do.  I have a 

02:51:38.142 --> 02:51:41.447
two-year-old daughter who 
doesn't like napg.  And, I 

02:51:41.448 --> 02:51:44.116
thought I'm smart enough to 
scheme to put her in a very 

02:51:44.117 --> 02:51:46.134
complicated sleeping bag that 
doesn't get herself 

02:51:51.219 --> 02:51:53.461
out of the crib, and just a 
couple of months ago I was on 

02:51:53.462 --> 02:51:56.311
the monitor watching this kid, 
two years old, where for the 

02:52:00.829 --> 02:52:02.928
first time she -- I was training
her for napg by herself.  She 

02:52:02.929 --> 02:52:07.853
was very angry.  So, she looked 
around, figured out a weak spot 

02:52:07.854 --> 02:52:09.854
on the crib where she might be 

02:52:11.742 --> 02:52:13.367
able to climb out, figured out 
how unzip her complicated 

02:52:13.368 --> 02:52:16.229
sleeping bag that I thought I 
schemed to do really, you 

02:52:19.323 --> 02:52:21.323
know, to prevent that, and 
figure out a 

02:52:22.590 --> 02:52:24.590
way to climb out of the cryp 
that is way 

02:52:26.049 --> 02:52:28.717
taller than who she is and 
managed to escape safely 

02:52:28.718 --> 02:52:30.718
(Laughter) without      &gt;&gt; 
DIANNE GREENE:  Okay.  Okay.

02:52:34.382 --> 02:52:38.140
How about AGI equivalent to my 
cat or equivalent to      &gt;&gt; 

02:52:38.141 --> 02:52:41.822
FEI-FEI LI:  If you're shifting 
the definition, sure.     &gt;&gt; 

02:52:41.823 --> 02:52:43.651
FEI-FEI LI:  But even cat, I 
think there are things that the 

02:52:43.652 --> 02:52:45.652
cat is 

02:52:48.565 --> 02:52:50.626
So, I do think that if you look 
at an organism like a cat from a

02:52:50.627 --> 02:52:55.350
behavioral level, like how cats 
behave and how they respond to 

02:52:55.351 --> 02:52:57.197
their environments, I think that
you could imagine a world where 

02:52:57.198 --> 02:53:02.941
you have something like a toy 
that, you know, is for 

02:53:02.942 --> 02:53:05.416
entertainment purposes that 
approximates a cat in a bunch of

02:53:05.417 --> 02:53:10.115
ways in that the sorts of 
behaviors that the humans 

02:53:10.116 --> 02:53:12.116
observe, you're like oh, it 
walks 

02:53:13.726 --> 02:53:15.726
around, it doesn't

02:53:17.399 --> 02:53:19.399
bump in things, it meows at me, 
I think 

02:53:20.859 --> 02:53:22.859
But what you can't do, you can't

02:53:23.934 --> 02:53:25.581
take that robot and dump it in 
the forest and have it figure 

02:53:25.582 --> 02:53:30.518
out what it needs to do in order
to survive and make      &gt;&gt; 

02:53:30.519 --> 02:53:32.519
FEI-FEI LI:  But it's a goal.

02:53:33.628 --> 02:53:36.307
&gt;&gt; DIANNE GREENE:  It's a 
healthy      And along the way, 

02:53:36.308 --> 02:53:38.308
like, you both, 

02:53:39.392 --> 02:53:41.451
at least we all three agree that
AI' capacity to help us solve 

02:53:41.452 --> 02:53:46.742
all our big problems is going to
outweigh any kind of negative, 

02:53:46.743 --> 02:53:48.743
and we're pretty excited about 
that, I guess.

02:53:50.864 --> 02:53:53.494
Like in Cloud you're kind of 
doing some cool things with auto

02:53:53.495 --> 02:53:55.771
ML and so      &gt;&gt; FEI-FEI LI:  
Yes.

02:53:58.826 --> 02:54:00.826
So, we talk a lot, Dianne, about
the 

02:54:03.946 --> 02:54:07.052
belief of building be Nevada oh 
lant technology of human use.  

02:54:07.053 --> 02:54:09.511
Our technology reflect our 
values.  So, I personally, and I

02:54:09.512 --> 02:54:11.512
know Greg' 

02:54:13.949 --> 02:54:16.597
whole team is working on 
bringing AI to people and to the

02:54:16.598 --> 02:54:18.598
fields that really 

02:54:21.036 --> 02:54:23.036
need it to make a positive 
difference.

02:54:26.420 --> 02:54:28.457
So, at Cloud we're very lucky to
be working with customers and 

02:54:28.458 --> 02:54:30.458
partners from 

02:54:32.327 --> 02:54:34.966
all kinds of vertical industries
from healthcare, where we 

02:54:34.967 --> 02:54:36.967
collaborate, to 

02:54:38.879 --> 02:54:40.950
agriculture, to sustainability, 
to entertainment, to retail, to 

02:54:40.951 --> 02:54:43.612
commerce, to finance, where our 
customers bring 

02:54:47.341 --> 02:54:48.777
some of the toughest problems 
and their pain points and we can

02:54:48.778 --> 02:54:50.778
work with them 

02:54:53.475 --> 02:54:55.475
For example, recently we rolled 
out auto ML.

02:54:58.959 --> 02:54:59.978
That is the recognition of the 
pain of entering machine 

02:54:59.979 --> 02:55:04.889
learning.  It's still a highly 
technical field.  The bar is 

02:55:04.890 --> 02:55:06.890
still high.

02:55:08.784 --> 02:55:11.018
Not enough people are trained 
experts in the world of machine 

02:55:11.019 --> 02:55:13.019
learning, but 

02:55:14.911 --> 02:55:16.911
yet, our industry already has so
much 

02:55:18.788 --> 02:55:20.788
need to, you know, tag pictures,

02:55:25.392 --> 02:55:27.392
understand imagery image rees as
a vision.

02:55:30.070 --> 02:55:32.070
So, we've worked hard and 
thought 

02:55:35.242 --> 02:55:37.242
about the suite product called 
auto ML 

02:55:38.559 --> 02:55:40.559
where the customer, we lower the
entry 

02:55:42.628 --> 02:55:45.277
barrier by relieving them from 
coding machine learning custom 

02:55:45.278 --> 02:55:47.278
models themselves.

02:55:48.765 --> 02:55:50.765
All they have to do is to give 
us the 

02:55:51.850 --> 02:55:53.850
kind of -- provide the kind of 
data and concept they need.

02:55:57.973 --> 02:55:59.973
Here is an example of a

02:56:02.583 --> 02:56:05.078
ramen company in Tokyo that has 
many shops of ramens and they 

02:56:05.079 --> 02:56:07.752
want to build an app that 
recognize the ramens from 

02:56:09.799 --> 02:56:12.461
different ramen stores.  And, 
they give us the pictures of 

02:56:15.341 --> 02:56:18.191
ramens and the consents of their
store, one store, two store, 

02:56:18.192 --> 02:56:23.113
three, and what we do is to use 
a technique, a machine learning 

02:56:23.114 --> 02:56:25.001
technique that Google and many 
others have developed called 

02:56:25.002 --> 02:56:27.002
learning to 

02:56:29.684 --> 02:56:31.684
learn, and then build a 
customized model 

02:56:33.496 --> 02:56:35.522
for the customer that recognize 
ramens for their different 

02:56:35.523 --> 02:56:40.440
stores.  And, then the customer 
can take that      &gt;&gt; DIANNE 

02:56:40.441 --> 02:56:43.295
GREENE:  You know, I can write a
little C++, maybe some 

02:56:43.296 --> 02:56:46.161
JavaScript.     &gt;&gt; FEI-FEI LI: 
Absolutely.  Absolutely.

02:56:50.286 --> 02:56:53.126
We're working with teams that 
they don't have, not even C++ 

02:56:53.127 --> 02:56:55.127
experience, and 

02:56:57.243 --> 02:56:59.299
we have a drag and drop 
interface, and you can use auto 

02:56:59.300 --> 02:57:02.798
ML that way.     &gt;&gt; GREG 
CORRADO:  That is, because I 

02:57:02.799 --> 02:57:05.262
really believe that, you know, 
there are so many problems that 

02:57:05.263 --> 02:57:07.263
can be solved 

02:57:08.328 --> 02:57:11.207
using this technique, that it's 
critical that we share as much 

02:57:11.208 --> 02:57:15.514
as possible about how these 
things work.  I don't believe 

02:57:15.515 --> 02:57:19.825
that these technologies should 
live in law gardens, but instead

02:57:19.826 --> 02:57:21.826
we should develop tools that can
be used by Everyone in the 

02:57:23.100 --> 02:57:25.941
community, that is why we have a
part of very aggressive open 

02:57:25.942 --> 02:57:30.438
source stance to our software 
packages, particularly if AI.  

02:57:30.439 --> 02:57:33.305
And, that includes things like 
TensorFlow that are available 

02:57:33.306 --> 02:57:36.183
completely freely and it 
includes the kinds of service 

02:57:36.184 --> 02:57:39.030
these are available on Cloud to 
do the kind of compute storage 

02:57:39.031 --> 02:57:41.031
and model tuning and surveying 
that you need to 

02:57:44.972 --> 02:57:46.972
And, I think it is amazing that 
we, 

02:57:48.224 --> 02:57:51.084
the same tools that my applied 
machine learning team uses to 

02:57:51.085 --> 02:57:53.085
tackle problems that we're 
interested in, those same 

02:57:56.209 --> 02:57:57.841
tools are accessible to all of 
you, as well, to try to solve 

02:57:57.842 --> 02:57:59.842
the same problems in the same 
way.

02:58:03.582 --> 02:58:05.582
And, I've been really excited 
with how 

02:58:06.608 --> 02:58:08.706
much -- how great the uptake is 
and how we're seeing expanding 

02:58:08.707 --> 02:58:13.597
to other languages, mentioning 
JavaScript, quick plug for 

02:58:13.598 --> 02:58:15.598
TensorFlow.

02:58:18.776 --> 02:58:20.818
&gt;&gt; DIANNE GREENE:  You should   
&gt;&gt; GREG CORRADO:  Yes.  Exactly.

02:58:25.104 --> 02:58:27.104
&gt;&gt; DIANNE GREENE:  It does give 
a 

02:58:28.972 --> 02:58:31.219
So, you're doing -- you're 
building, I mean, with machine 

02:58:31.220 --> 02:58:35.921
learning we're bringing into 
market in so many ways because 

02:58:35.922 --> 02:58:37.922
we do -- we have the tools 

02:58:39.830 --> 02:58:42.904
to build your own models, the 
tenants and flow.  We have the 

02:58:42.905 --> 02:58:46.997
auto ML that brings it to any 
programmer.  And, then, what is 

02:58:46.998 --> 02:58:48.998
going on with all 

02:58:50.466 --> 02:58:52.732
the APIs and how is that going 
to effect every industry and 

02:58:52.733 --> 02:58:54.733
what do you see going 

02:58:56.596 --> 02:58:58.596
&gt;&gt; FEI-FEI LI: So, Cloud already

02:59:00.708 --> 02:59:03.560
has a suite of APIs for a lot of
our industry partners and 

02:59:03.561 --> 02:59:05.561
customers from 

02:59:08.277 --> 02:59:10.277
&gt;&gt; DIANNE GREENE:  Which are 
based 

02:59:13.163 --> 02:59:15.860
&gt;&gt; FEI-FEI LI:  For example, Bo 
x is a major partner with Google

02:59:15.861 --> 02:59:17.861
Cloud 

02:59:20.018 --> 02:59:22.018
where they recognize a 
tremendous need 

02:59:24.690 --> 02:59:28.369
for organizing customers imagery
data to help customers.  So, 

02:59:28.370 --> 02:59:31.041
they actually use Google' vision
&gt;&gt; DIANNE GREENE:  Yeah.

02:59:34.316 --> 02:59:37.199
&gt;&gt; FEI-FEI LI:  And that's a 
model easily delivered to our 

02:59:37.200 --> 02:59:41.899
customers      &gt;&gt; DIANNE GREENE:
Yeah.  It is pretty exciting.  

02:59:41.900 --> 02:59:44.534
Greg, how do you think that is 
going to play out in the health 

02:59:44.535 --> 02:59:46.574
industry.  I know you have been 
thinking about that?     &gt;&gt; GREG

02:59:46.575 --> 02:59:50.923
CORRADO: Yeah.  So, healthcare 
is one of the problems that a 

02:59:50.924 --> 02:59:52.697
bunch of people are working on 
at Google and a lot of people 

02:59:52.698 --> 02:59:56.622
are working on outside, as well,
because I think there is a huge 

02:59:56.623 --> 02:59:58.623
opportunity to use these 

03:00:00.092 --> 03:00:00.733
technologies to expand the 
availability and the accuracy of

03:00:00.734 --> 03:00:02.734
healthcare.

03:00:05.297 --> 03:00:07.328
And, part of that is because 
there is -- doctors today are 

03:00:07.329 --> 03:00:09.329
basically trying to 

03:00:10.398 --> 03:00:12.398
weather information, hurricane, 
in order to provide care.

03:00:14.480 --> 03:00:17.327
So, there is -- I think there 
are thousands of individual 

03:00:17.328 --> 03:00:19.328
opportunities to 

03:00:20.380 --> 03:00:22.240
make doctors work more fluid to 
build tools to solve problems 

03:00:22.241 --> 03:00:24.241
that they want 

03:00:25.718 --> 03:00:28.409
solved, and to do things that 
help      &gt;&gt; DIANNE GREENE:  I 

03:00:28.410 --> 03:00:31.052
mean, I think you were telling 
me that so many doctors 

03:00:35.182 --> 03:00:37.182
are so unhappy because they have
so much drudgery to do.

03:00:39.863 --> 03:00:43.134
&gt;&gt; GREG CORRADO:  Yeah.  
Absolutely.  I believe there has

03:00:43.135 --> 03:00:47.448
been a great, you know, when you
go to a doctor you're looking 

03:00:47.449 --> 03:00:49.688
for medical attention, right, 
and right now a huge amount of 

03:00:49.689 --> 03:00:53.959
their attention is not actually 
focused on the practice of 

03:00:53.960 --> 03:00:56.006
medicine, but is focused on a 
whole bunch of other work that 

03:00:56.007 --> 03:00:58.007
they 

03:00:59.056 --> 03:01:01.056
have to do that doesn't require 
the kind 

03:01:03.120 --> 03:01:04.747
of insights and care and 
connection the real practice of 

03:01:04.748 --> 03:01:06.748
medicine does.

03:01:08.044 --> 03:01:10.504
So, I believe that machine 
learning in AI is going to come 

03:01:10.505 --> 03:01:12.505
in to healthcare 

03:01:14.786 --> 03:01:16.410
through assistive technologies 
that help the doctors do what 

03:01:16.411 --> 03:01:18.411
they want to do 

03:01:19.475 --> 03:01:21.475
&gt;&gt; DIANNE GREENE:  By 
understanding 

03:01:22.563 --> 03:01:24.563
what they do and assist 
testimony them.

03:01:28.088 --> 03:01:29.937
&gt;&gt; DIANNE GREENE:  Speaking of 
human.  Fei-Fei, do you want to 

03:01:29.938 --> 03:01:31.938
talk a little bit about why 
you've been so -- you 

03:01:35.844 --> 03:01:37.844
&gt;&gt; FEI-FEI LI: Yeah.  Thank you.

03:01:39.905 --> 03:01:42.572
So, if we look at the history of
AI, we've entered Phase II, the 

03:01:42.573 --> 03:01:44.573
first 60 

03:01:46.234 --> 03:01:48.284
years is AI as more or less a 
niche technical field where 

03:01:48.285 --> 03:01:50.929
we're still laying down 
scientific foundations, but 

03:01:54.410 --> 03:01:56.680
starting this point on, AI is 
one of the biggest drivers 

03:01:56.681 --> 03:01:58.681
societal changes to come.

03:02:00.991 --> 03:02:03.846
So, how do we think about AI in 
this next space?  What is the 

03:02:03.847 --> 03:02:06.687
frame of mind that should be 
driving us has been on top of my

03:02:09.141 --> 03:02:11.141
mind, and I think deeply about 
the need 

03:02:12.636 --> 03:02:14.636
for human centered AI, which, in
my 

03:02:16.746 --> 03:02:18.746
opinion, includes three elements
to 

03:02:23.660 --> 03:02:25.660
The first element is really 

03:02:27.662 --> 03:02:29.732
advancing AI to the next stage 
and here we bring our collective

03:02:29.733 --> 03:02:32.643
background from neuroscience, 
cognitive science, you know, 

03:02:32.644 --> 03:02:34.644
whether we're getting to AGI 

03:02:36.309 --> 03:02:38.309
tomorrow or in 50 years, there 
is a need 

03:02:41.222 --> 03:02:43.222
for AI to be a lot more 
flexible, 

03:02:46.336 --> 03:02:48.336
nuanced, learn faster, in more 

03:02:51.436 --> 03:02:53.296
unsupervised, semi supervised 
one shop learning ways to be 

03:02:53.297 --> 03:02:55.376
able to understand emotion, to 
be able to communicate with 

03:02:55.982 --> 03:02:58.017
humans.  So, that is the more 
human centered 

03:03:03.307 --> 03:03:04.937
The second part is the human 
centered AI technology and 

03:03:04.938 --> 03:03:06.938
application 

03:03:08.842 --> 03:03:10.476
is that I love what you're 
saying that there is no 

03:03:10.477 --> 03:03:12.944
substitute for humans.  This 
technology, like all technology,

03:03:16.019 --> 03:03:18.294
is to enhance humans, to augment
humans, not to replace humans.

03:03:21.588 --> 03:03:23.588
We'll replace certain tasks or 
replace 

03:03:25.711 --> 03:03:28.352
humans out of danger or tasks 
that we cannot perform, but the 

03:03:28.353 --> 03:03:30.788
bottom line is we can use AI to 
help our doctors, to 

03:03:34.451 --> 03:03:36.451
help our disaster relief 
workers, to 

03:03:38.733 --> 03:03:40.768
help decision makers.  So, there
is a lot of technology in 

03:03:44.024 --> 03:03:46.873
robotics, in design, in natural 
language practicing that is 

03:03:46.874 --> 03:03:48.874
centered around human 

03:03:51.832 --> 03:03:53.832
The third element of human 
center 

03:03:55.733 --> 03:03:57.999
AI is really to combine the 
thinking of AIs a technology, as

03:03:58.000 --> 03:04:00.000
well as the societal impact.

03:04:03.126 --> 03:04:05.974
We are so nice ant in seeing the
impact in this technology, but 

03:04:05.975 --> 03:04:09.760
already, like Dianne said, that 
we are seeing the impact in 

03:04:09.761 --> 03:04:13.216
different ways, ways that we 
might not even predict.  So, I 

03:04:13.217 --> 03:04:15.217
think that is really important 

03:04:16.484 --> 03:04:18.336
and it's a responsibility of 
Everyone from academia to 

03:04:18.337 --> 03:04:20.337
industry to government 

03:04:22.461 --> 03:04:24.461
to bring social scientists, 
philosopher, 

03:04:26.957 --> 03:04:28.957
law scholars, policy makers, 
ethicists, 

03:04:31.220 --> 03:04:33.220
and historians at the table and 
to study 

03:04:35.984 --> 03:04:38.828
more deeply about AI social and 
humanistic impact.  That is the 

03:04:38.829 --> 03:04:40.829
three elements of human 

03:04:42.520 --> 03:04:44.520
&gt;&gt; DIANNE GREENE:  That's pretty

03:04:46.027 --> 03:04:48.095
&gt;&gt; DIANNE GREENE:   -- I think 
we here at Google are working as

03:04:48.096 --> 03:04:50.096
hard as we 

03:04:54.634 --> 03:04:55.851
You know, you mentioned, you 
know, what we need to be careful

03:04:55.852 --> 03:04:58.085
about out there with AI and 
regulatory.

03:05:01.341 --> 03:05:03.165
What are some of the barriers 
to, you know, I think every 

03:05:03.166 --> 03:05:05.615
company in the world has a use 
for AI in many, many ways.

03:05:09.297 --> 03:05:11.960
I mean, it's just exploding in 
all the verticals, but there are

03:05:11.961 --> 03:05:15.662
some impediments to adoption, 
for example in financial, the 

03:05:15.663 --> 03:05:17.663
financial industry, they need to
have something called 

03:05:18.789 --> 03:05:23.359
explainable AI.  And, could you 
just talk about some of the 

03:05:23.360 --> 03:05:25.360
different barriers you see to 
being 

03:05:29.809 --> 03:05:31.229
&gt;&gt; FEI-FEI LI:  We should start 
&gt;&gt; GREG CORRADO:  I think there 

03:05:31.230 --> 03:05:35.159
are a bunch of really important 
things to consider.  So, one of 

03:05:35.160 --> 03:05:37.160
the things is, of course we 

03:05:38.655 --> 03:05:40.655
want to have machine learning 
systems 

03:05:42.146 --> 03:05:44.185
that are designed to fit the 
needs of the folks that are 

03:05:44.186 --> 03:05:46.835
using them and applying them.  
And, that can often include not 

03:05:46.836 --> 03:05:51.937
just giving you the answer, but 
telling me something about how 

03:05:51.938 --> 03:05:53.938
that was derived.

03:05:55.236 --> 03:05:57.236
So, some kind of explain 
ability.

03:05:58.312 --> 03:05:59.934
So, in the healthcare space for 
example we've been working on a 

03:05:59.935 --> 03:06:01.935
bunch of 

03:06:03.187 --> 03:06:04.626
things in medical imaging, and 
it is not acceptable to tell the

03:06:04.627 --> 03:06:08.900
doctor something looks fishy in 
this X-ray or this pathology 

03:06:08.901 --> 03:06:12.141
slide or retinal scan.  You have
to tell them, well, what do you 

03:06:12.142 --> 03:06:13.795
think is wrong, but more 
importantly, you actually have 

03:06:13.796 --> 03:06:18.468
to show them where in the image 
you think the evidence for that 

03:06:18.469 --> 03:06:20.489
conclusion lies so that they can
then look at it and decide 

03:06:23.383 --> 03:06:24.834
whether they concur or they 
disagree or oh, well, there is a

03:06:24.835 --> 03:06:26.835
spec of dust there and that's 
what the machine is picking 

03:06:30.117 --> 03:06:32.809
And the good news is that these 
things actually are possible and

03:06:32.810 --> 03:06:34.810
I  

03:06:35.880 --> 03:06:38.320
there has kind of been this 
unfortunate mythology that AI 

03:06:38.321 --> 03:06:40.771
and deep learning, in 
particular, is a black box, and 

03:06:40.772 --> 03:06:42.772
it really isn't.

03:06:45.507 --> 03:06:47.169
We didn't study how it worked, 
because for a long time it 

03:06:47.170 --> 03:06:49.442
really didn't work that well.  
But now that it is working well,

03:06:49.443 --> 03:06:51.443
there are a lot of tools and 
techniques that 

03:06:53.981 --> 03:06:55.981
go into examining how these 
systems 

03:06:57.059 --> 03:06:58.690
work, and I think explain 
ability is a big part of it in 

03:06:58.691 --> 03:07:00.731
terms of making these things 
available for a bunch of 

03:07:01.348 --> 03:07:06.283
applications.     &gt;&gt; FEI-FEI LI:
So, in addition to explain 

03:07:06.284 --> 03:07:08.284
ability, I would add bias.

03:07:09.354 --> 03:07:11.354
I think bias is a issue we need 
to 

03:07:12.630 --> 03:07:14.630
address in AI, and I see bias 
from where 

03:07:16.300 --> 03:07:18.300
I sit two major kind of bias we 
need to address.

03:07:20.404 --> 03:07:22.647
One is the pipeline of AI 
development starting from the 

03:07:22.648 --> 03:07:25.091
bias of the data to the outcome 
of the bias.

03:07:28.588 --> 03:07:30.653
And, we have heard a lot about 
if the machine learning 

03:07:30.654 --> 03:07:32.654
algorithm is fed with 

03:07:36.405 --> 03:07:38.405
data, that does not represent 
the 

03:07:41.611 --> 03:07:43.611
problem domain in a fair way we 
will 

03:07:44.651 --> 03:07:46.651
introduce bias, whether it is 
missing a 

03:07:49.775 --> 03:07:52.441
group of people' data or bias 
related to a skewed 

03:07:52.442 --> 03:07:54.442
distribution.

03:07:56.550 --> 03:07:58.169
These are things that would have
deep consequences whether you 

03:07:58.170 --> 03:08:01.275
are in the healthcare domain or 
finance or legal decision 

03:08:01.276 --> 03:08:03.276
making.

03:08:06.609 --> 03:08:09.059
So, I think that is a huge 
issue, very nicely that Google 

03:08:09.060 --> 03:08:11.553
is already addressing that.  We 
have a whole team at Google 

03:08:11.554 --> 03:08:17.379
working      &gt;&gt; DIANNE GREENE:  
Yeah.  This is true.     &gt;&gt; 

03:08:17.380 --> 03:08:18.593
FEI-FEI LI: And, another bias I 
think is important, is the 

03:08:18.594 --> 03:08:20.594
people who are developing AI.

03:08:23.692 --> 03:08:25.933
&gt;&gt; FEI-FEI LI:  And, the lack of
&gt;&gt; DIANNE GREENE:  It is so 

03:08:27.964 --> 03:08:29.964
important, and that kind of 
brings me to 

03:08:31.059 --> 03:08:33.059
maybe some of our -- we're 
getting close 

03:08:36.972 --> 03:08:40.294
to the end, but if, you know, 
where is AI going?  I mean, how 

03:08:40.295 --> 03:08:42.295
prevalent is it going to be?

03:08:44.156 --> 03:08:46.175
We look at universities and 
these machine learning classes 

03:08:46.176 --> 03:08:50.677
have 800 people, 900 people.  
There is such a demand.  Every 

03:08:50.678 --> 03:08:55.182
computer Science graduate wants 
Where is it going?  I mean, will

03:08:55.183 --> 03:08:57.183
every high school 

03:08:59.262 --> 03:09:00.718
graduating senior be able to 
customize AI to their own 

03:09:00.719 --> 03:09:02.719
purposes?

03:09:06.633 --> 03:09:08.633
And, howwhat does it look like 
five, ten years from now?

03:09:12.042 --> 03:09:14.042
&gt;&gt; FEI-FEI LI: So, from a 

03:09:15.293 --> 03:09:18.134
technology point of view, I 
think that because of the 

03:09:18.135 --> 03:09:20.190
tremendous investment in 
resource, both in the private 

03:09:20.191 --> 03:09:22.191
sector, as 

03:09:24.495 --> 03:09:26.989
well in the public sector now 
every -- many countries are 

03:09:26.990 --> 03:09:28.990
waking up to investing AI.

03:09:32.899 --> 03:09:34.899
We are going to see a huge 
continue 

03:09:36.970 --> 03:09:39.411
development of AI technology.  I
am mostly excited at Cloud or 

03:09:39.412 --> 03:09:43.912
seeing what Greg' team doing, AI
being delivered to the 

03:09:43.913 --> 03:09:45.913
industries that really 

03:09:47.789 --> 03:09:49.789
matter to people' lives and work
quality 

03:09:52.081 --> 03:09:54.081
But, Dianne, I think you are 
also 

03:09:55.944 --> 03:09:57.944
asking is how are we educating 
more 

03:09:59.419 --> 03:10:01.257
&gt;&gt; DIANNE GREENE:  Both making 
it easier to use and educating 

03:10:01.258 --> 03:10:03.258
them, and what is it going to 
look like?

03:10:07.769 --> 03:10:10.013
&gt;&gt; FEI-FEI LI: That's a really 
tough question, because at the 

03:10:10.014 --> 03:10:14.951
core of today's AI still 
calculus, and that is      &gt;&gt; 

03:10:14.952 --> 03:10:16.952
GREG CORRADO:  So I think that 

03:10:19.061 --> 03:10:20.889
from the kind of -- from the 
tech industry perspective or 

03:10:20.890 --> 03:10:24.798
from the computer science 
education perspective, I think 

03:10:24.799 --> 03:10:26.799
that we're going to see AI and 

03:10:28.494 --> 03:10:31.352
ML become as essential as 
networking is, right.  Like, no 

03:10:31.353 --> 03:10:33.208
one really thinks about oh, 
well, I'm going to write some 

03:10:33.209 --> 03:10:37.107
software and it's going to be 
stand au lon on a box and it's 

03:10:37.108 --> 03:10:39.149
not going to be a TCPI 
connection, right.  We all know 

03:10:39.150 --> 03:10:41.601
that you're going to have a TCPI
connection at the end of the day

03:10:43.456 --> 03:10:46.139
somewhere and Everyone 
understands the basics.  

03:10:46.140 --> 03:10:47.963
Networking stack, and that is 
not just at the engineering, the

03:10:47.964 --> 03:10:49.964
level of engineers, that is the 
level of 

03:10:53.103 --> 03:10:55.103
designers of

03:10:56.845 --> 03:10:58.263
executives, of product 
developers and leaders.  And, 

03:10:58.264 --> 03:11:00.094
the same thing I think is going 
to happen with machine learning 

03:11:00.095 --> 03:11:03.788
and AI which is that designers 
is going to start to understand 

03:11:03.789 --> 03:11:05.843
how can I make a completely 
revolutionary kind of product 

03:11:08.548 --> 03:11:11.443
that folds in machine learning 
the same way that we fold in 

03:11:11.444 --> 03:11:13.714
networking and Internet 
technologies into something 

03:11:14.516 --> 03:11:16.516
everything we built.

03:11:19.638 --> 03:11:21.693
I think we are going to see 
tremendous upkeep and it become 

03:11:21.694 --> 03:11:25.008
be Annie vase I have background 
of the technologies.  I think in

03:11:25.009 --> 03:11:28.921
that process the ways we are 
using AI are going to evolve.  I

03:11:28.922 --> 03:11:30.949
think right now you're seeing a 
lot of things where AI and 

03:11:30.950 --> 03:11:32.950
machine learning 

03:11:34.611 --> 03:11:36.045
adds some spice, some extra 
little coolness on a feature, 

03:11:36.046 --> 03:11:38.476
and I think that what you're 
going to see over the next 

03:11:41.961 --> 03:11:42.964
decade is you're going see more 
integration into what it means 

03:11:42.965 --> 03:11:46.012
for the product to actually 
work.  And, I think that one of 

03:11:46.013 --> 03:11:48.013
the great opportunities there is
actually going to 

03:11:51.980 --> 03:11:54.621
be the development of artificial
emotional intelligence that 

03:11:54.622 --> 03:11:58.507
allows products to actually have
much more natural and much more 

03:11:58.508 --> 03:12:01.236
fluid human interaction.  We're 
good beginning to see that in 

03:12:02.659 --> 03:12:04.659
the assistant now with speech 

03:12:05.705 --> 03:12:07.705
recognition, speech synthesis, 

03:12:09.528 --> 03:12:13.046
understanding dialogues and 
which exchanges, .  I think this

03:12:13.047 --> 03:12:15.047
is still in its infancy.  We're 
going to get to a point where 

03:12:17.591 --> 03:12:20.242
the products that they build 
interact with humans in the ways

03:12:20.243 --> 03:12:22.243
most humans find 

03:12:24.751 --> 03:12:27.383
&gt;&gt; FEI-FEI LI:  I spend a a lot 
of time with high xol lers.  I 

03:12:27.384 --> 03:12:29.696
really believe in the future.  
We always talk about AI changing

03:12:29.697 --> 03:12:33.174
the world, and I always say the 
question is who is changing AI.

03:12:36.645 --> 03:12:38.689
And, to me, bringing more human 
mission ond thinking into 

03:12:38.690 --> 03:12:41.764
technology development and 
thought leadership is really 

03:12:41.765 --> 03:12:44.617
important.  Not only for the 
future of our 

03:12:48.080 --> 03:12:49.905
technology and the value we 
instill in our technology, but 

03:12:49.906 --> 03:12:52.762
also in bringing the diverse 
group of students and future 

03:12:55.829 --> 03:12:57.829
leaders into the development of 
AI.

03:13:00.576 --> 03:13:02.576
So, you know, at Google we all 
work a 

03:13:03.832 --> 03:13:06.708
lot on this issue, and 
personally I'm very involved 

03:13:06.709 --> 03:13:08.709
with AI4ALL, which is a 

03:13:10.593 --> 03:13:12.857
non-profit that educates high 
schoolers around the country 

03:13:12.858 --> 03:13:14.858
from diverse 

03:13:18.175 --> 03:13:20.175
background, whether they're (?

03:13:21.695 --> 03:13:23.532
)  Or students of unrepresented 
minority groups, and we bring 

03:13:23.533 --> 03:13:25.533
them on to AI, 

03:13:27.288 --> 03:13:29.288
university campus, and work with
them on 

03:13:31.349 --> 03:13:33.349
&gt;&gt; DIANNE GREENE:  And, at 
Google 

03:13:35.464 --> 03:13:38.300
we're just completely committed 
to bringing all our best 

03:13:38.301 --> 03:13:41.771
technologies to everybody in the
world, and we're doing that 

03:13:41.772 --> 03:13:43.993
through the Cloud, and we're 
bringing these tools, we're 

03:13:43.994 --> 03:13:46.038
bringing these APIs, and the 
training and the 

03:13:49.488 --> 03:13:51.320
partnering and the processors, 
and we're pretty excited to see 

03:13:51.321 --> 03:13:53.321
what all you guys 

03:14:01.758 --> 03:14:03.758
(Applause)

03:16:44.315 --> 03:16:46.315
Design Actions for the Google 
Assistant

03:16:49.461 --> 03:16:51.461
:  Beyond smart speakers

03:17:05.871 --> 03:17:07.871
, to

03:17:10.406 --> 03:17:12.406
phones and Smart Displays

03:26:09.261 --> 03:26:11.261
Thank you for joining.  Our 
session will be begin soon.

03:27:37.495 --> 03:27:39.495
Design Actions for the Google 
Assistant

03:28:06.075 --> 03:28:08.075
(Realtime viewing screen)

03:29:13.241 --> 03:29:15.093
&gt;&gt; Hi husband and I have been in
a somewhat long distance 

03:29:15.094 --> 03:29:17.094
relationship for a few years 
now.

03:29:20.383 --> 03:29:22.853
We talk on the phone and message
a lot.  But, perhaps what is 

03:29:22.854 --> 03:29:27.758
most enjoyable for me is when I 
visit him, I leave little notes 

03:29:27.759 --> 03:29:30.035
all over his apartment.  And, 
sometimes when I'm home alone, 

03:29:31.673 --> 03:29:33.695
he'll start changing the color 
of the smart lights in my living

03:29:33.696 --> 03:29:35.696
room to let me 

03:29:38.798 --> 03:29:42.718
Our human conversations take a 
lot of different forms.  We 

03:29:42.719 --> 03:29:44.537
don't just talk verbally, 
depending on where we are and 

03:29:44.538 --> 03:29:46.538
what we're trying to 

03:29:48.405 --> 03:29:50.405
say, we might write, hold hands,
or even 

03:29:54.113 --> 03:29:56.113
This is human conversations that

03:29:57.187 --> 03:29:59.187
have inspired us to create 
conversations with technology.

03:30:01.053 --> 03:30:03.486
It's no surprise, then, that 
we're starting to incorporate 

03:30:03.487 --> 03:30:05.487
more modalities 

03:30:08.624 --> 03:30:10.853
But, with this increased number 
of devices and complexity of 

03:30:10.854 --> 03:30:12.854
interactions, 

03:30:14.344 --> 03:30:16.344
it might feel overwhelming to 
design for the Google Assistant.

03:30:19.672 --> 03:30:21.672
If you look at the Google 
Assistant 

03:30:23.735 --> 03:30:25.379
today, I can talk to it not just
through the speaker in my living

03:30:25.380 --> 03:30:27.832
room, but also through my car or
my headphones.

03:30:31.092 --> 03:30:33.543
I can tap on my phone or my 
watch.  But how do we design for

03:30:33.544 --> 03:30:35.544
an increased 

03:30:41.176 --> 03:30:42.611
I'm Saba Zaidi and I'm an 
interaction design other the 

03:30:42.612 --> 03:30:44.449
Google assist tantd team.  I 
will be talking about how you 

03:30:44.450 --> 03:30:46.450
can design actions across 
services and give 

03:30:50.763 --> 03:30:52.763
you some frameworks and some 
tips

03:30:59.886 --> 03:31:01.886
gear and I can tell you using 
the design 

03:31:03.631 --> 03:31:05.880
Before we get started talking 
about how to design services 

03:31:05.881 --> 03:31:08.554
across services we need to get a
better experience of 

03:31:12.036 --> 03:31:14.893
Let's start with a journey 
through a user' day.  You wake 

03:31:14.894 --> 03:31:16.948
up in the morning to the sound 
of an alarm ringing on your 

03:31:16.949 --> 03:31:20.858
Google Home without even getting
out of your blanket you can say,

03:31:20.859 --> 03:31:22.859
hey, Google, stop.

03:31:25.329 --> 03:31:27.327
You get up, get ready, and as 
you're about to head out you 

03:31:27.328 --> 03:31:31.622
want to make sure you don't need
an umbrella, so you turn to the 

03:31:31.623 --> 03:31:33.650
Smart Display in your hallway 
and you ask, hey Google, what is

03:31:33.651 --> 03:31:35.651
the weather today?

03:31:37.731 --> 03:31:39.731
You're able to hear a summary 
and also 

03:31:42.428 --> 03:31:45.305
As you're walking to your car, 
you take out your phone and tap 

03:31:45.306 --> 03:31:49.641
on it to ask the Google 
Assistant to order your favorite

03:31:49.642 --> 03:31:51.642
from Starbucks.  It is able to 
connect to you Starbucks 

03:31:56.983 --> 03:31:59.038
As you're driving, you want to 
listen to your favorite pod cast

03:31:59.039 --> 03:32:01.039
or the 

03:32:02.130 --> 03:32:04.361
news, and you can ask Google 
Assistant for help in a hands 

03:32:04.362 --> 03:32:09.462
freeway and it can connect you, 
for example, to NPR news update.

03:32:11.301 --> 03:32:12.517
You go about your day and when 
you come back home it's time to 

03:32:12.518 --> 03:32:15.774
make dinner for your family.  
You turn to the Smart Display in

03:32:15.775 --> 03:32:17.775
your 

03:32:19.025 --> 03:32:20.848
kitchen and you ask, for 
example, Tasty for help with a 

03:32:20.849 --> 03:32:24.940
recipe, like in this place, 
pizza bons.  Tasty comes back 

03:32:24.941 --> 03:32:26.981
and you can hear and see on the 
screen step-by-step 

03:32:33.179 --> 03:32:35.007
After dinner, it's time to 
unwind with your family in the 

03:32:35.008 --> 03:32:39.513
living room, you decide to play 
a buzz feed personality quiz, 

03:32:39.514 --> 03:32:41.514
and it's a great way for your 

03:32:42.564 --> 03:32:44.564
family to get together around a 
shared 

03:32:46.704 --> 03:32:48.740
And then you head to bed.  You 
say, hey Google, good night.

03:32:52.640 --> 03:32:54.252
It's able to start your custom 
bedtime routine, which includes 

03:32:54.253 --> 03:32:56.253
for example, 

03:32:58.175 --> 03:33:00.175
setting your aur alarms or 
telling you 

03:33:01.670 --> 03:33:03.321
As you can see users were able 
to interact with a Google 

03:33:03.322 --> 03:33:05.349
Assistant similar to human 
interactions in that there were 

03:33:09.033 --> 03:33:11.075
And a although there were a lot 
of different devices, there are 

03:33:11.076 --> 03:33:13.076
some overarching principals.

03:33:17.021 --> 03:33:19.092
First, the experience was 
familiar whether it was morning,

03:33:19.093 --> 03:33:23.576
evening orca mute, users can 
access their favorite Google 

03:33:23.577 --> 03:33:25.577
Assistant actions whenever, 

03:33:29.136 --> 03:33:31.598
The system was available in 
different contexts.  You saw it 

03:33:31.599 --> 03:33:34.078
being used on the go and at 
home, up close and from a 

03:33:34.079 --> 03:33:36.079
distance, and 

03:33:38.606 --> 03:33:40.028
So, as you're thinking about 
your actions, think about all 

03:33:40.029 --> 03:33:42.029
the different 

03:33:45.009 --> 03:33:46.822
And lastly, different devices 
lend themselves to different 

03:33:46.823 --> 03:33:48.823
modes of interaction.

03:33:50.087 --> 03:33:51.718
Some are voice only, some are 
visual and some are a mix of 

03:33:51.719 --> 03:33:56.201
both.  And, we'll talk a bit 
more about the strengths of and 

03:33:56.202 --> 03:33:58.670
weaknesses of each of      
First, let's take a deeper look 

03:33:58.671 --> 03:34:04.385
at a couple of those devices and
see how these principles apply. 

03:34:04.386 --> 03:34:07.824
You have already heard about 
Smart Displays now.  They were 

03:34:07.825 --> 03:34:10.504
announced early this year, and 
even though it was a new device 

03:34:12.146 --> 03:34:13.976
users can expect it to feel 
familiar.  It is essentially 

03:34:13.977 --> 03:34:15.977
like a Google Home with a 
screen.

03:34:17.638 --> 03:34:19.913
It is designed to be used at 
home from a distance, and as a 

03:34:19.914 --> 03:34:21.914
shared device.

03:34:24.217 --> 03:34:25.662
And, as you can see in this 
queue inspiration action 

03:34:25.663 --> 03:34:27.702
example, even though will is a 
screen, users still interact 

03:34:29.122 --> 03:34:30.545
with the device through voice.  
They don't have to tap through 

03:34:30.546 --> 03:34:34.624
complex app navigation.  Instead
the visuals are designed to be 

03:34:36.050 --> 03:34:39.943
seen at a distance.  And, of 
course, the user can walk up to 

03:34:39.944 --> 03:34:41.944
the screen and touch it if they 
want.

03:34:44.626 --> 03:34:47.507
Next, let's take a quick look at
phones.  One thing to note here 

03:34:47.508 --> 03:34:49.774
is that we're making phones more
visually assistive, 

03:34:53.064 --> 03:34:54.681
as well, similar to smart die 
replies, allowing for a greater 

03:34:54.682 --> 03:34:57.329
focus on the content.  These 
devices, as you know, are great 

03:35:00.177 --> 03:35:02.238
for use cases, on the go, up 
close, and in a private 

03:35:02.239 --> 03:35:06.503
environment.  And, users can 
interact with the Google 

03:35:06.504 --> 03:35:08.504
Assistant on the phone through 

03:35:10.782 --> 03:35:13.251
So, hopefully that gave au 
better sense of what the 

03:35:13.252 --> 03:35:15.252
experiences on Google 

03:35:17.939 --> 03:35:20.588
Now, in order to divine for so 
many devices, it helps to have a

03:35:20.589 --> 03:35:22.589
vocabulary to help categorize 
them.

03:35:25.896 --> 03:35:27.896
At Google we use this divine 
framework 

03:35:29.175 --> 03:35:32.020
called the multi modal spectrum.
It helps us categorize devices 

03:35:32.021 --> 03:35:35.489
based on their interaction 
types.  On one end you have 

03:35:35.490 --> 03:35:37.490
voice only devices 

03:35:38.610 --> 03:35:40.610
like the Google Home and other 
smart 

03:35:42.753 --> 03:35:44.753
On the other end you have visual
only devices, like a phone or a 

03:35:46.365 --> 03:35:48.677
Chromebook that is on mute, and 
most watches.  So, you have to 

03:35:48.678 --> 03:35:53.987
look at these devices      And, 
in the middle, you have what we 

03:35:53.988 --> 03:35:55.988
call multi modal devices, in 
that 

03:35:59.677 --> 03:36:01.714
Cars and smart displays that 
rely primarily on voice but have

03:36:01.715 --> 03:36:07.275
optional visuals are known as 
voice forward      Phones and 

03:36:07.276 --> 03:36:12.353
Chrome books with the audio on, 
which can use mix of both voice 

03:36:12.354 --> 03:36:14.354
and visuals are known as enter 

03:36:18.059 --> 03:36:19.696
So, now we have a vocabulary for
categorizing these devices, but 

03:36:19.697 --> 03:36:21.697
before 

03:36:22.778 --> 03:36:24.618
we can start designing for them 
it helps to understand the 

03:36:24.619 --> 03:36:26.619
zr*ents and weaknesses 

03:36:28.155 --> 03:36:30.155
Let's talk about voice first.

03:36:32.429 --> 03:36:34.429
Voice is great for natural 
input.

03:36:36.491 --> 03:36:38.146
We've been using it for melony 
au, whether you're a kid, a 

03:36:38.147 --> 03:36:42.028
scene your, someone who is not 
tech savvy, it is still really 

03:36:42.029 --> 03:36:45.085
intuitive.  It is great for 
hands free far afield use cases.

03:36:47.322 --> 03:36:49.322
Like, setting a timer in the 
kitchen 

03:36:52.039 --> 03:36:54.295
And it helps reduce task 
navigation.  So, for example, if

03:36:54.296 --> 03:36:56.296
you were out on a 

03:36:57.366 --> 03:36:59.606
run, you could ask your favorite
Google action that is about 

03:36:59.607 --> 03:37:02.678
fitness and ask it about your 
work outs.  Instead of having to

03:37:02.679 --> 03:37:04.679
pull out your phone, navigate to
that app and search 

03:37:08.860 --> 03:37:10.487
Similarly, could you ask the 
Google Assistant to play the 

03:37:10.488 --> 03:37:12.488
next song without having to mess
with any controls.

03:37:16.754 --> 03:37:19.753
So, voice has a lot of benefits.
It's great.  But, it does have 

03:37:19.754 --> 03:37:21.754
some limitations.

03:37:25.272 --> 03:37:29.570
Think about the last time you 
were at a cafe.  You probably 

03:37:29.571 --> 03:37:31.813
walked past all the pace strees,
looked at the menu and made eye 

03:37:32.828 --> 03:37:35.275
contact with the cashier.  Think
about how difficult that 

03:37:36.288 --> 03:37:38.288
interaction would be if it was 
just through voice.

03:37:39.958 --> 03:37:41.958
Have a listen at what the menu 
would 

03:37:48.355 --> 03:37:51.240
&gt;&gt; Espresso, latte, vanilla 
latte, Kappa theen oh, moek kau,

03:37:51.241 --> 03:37:55.753
American oh, flat white, hot 
chocolate, black cough pee and 

03:37:55.754 --> 03:37:57.754
tea.

03:37:59.434 --> 03:38:01.081
&gt;&gt; That feels pretty 
overwhelming, right, it is like 

03:38:01.082 --> 03:38:04.940
waismg all the options go by and
catching the right one.  It is 

03:38:04.941 --> 03:38:06.940
like looking at a particularrer 
voice isy ferm moral and linear 

03:38:06.941 --> 03:38:08.979
and that makes it very difficult
to hold a lot of 

03:38:12.708 --> 03:38:14.963
By contrast, the menu is a lot 
easier to scan if it looks like 

03:38:14.964 --> 03:38:16.964
this.

03:38:21.319 --> 03:38:23.569
You can imagine that the problem
gets compounded if you also 

03:38:23.570 --> 03:38:26.246
today compare price xes 
calories.  So, visuals are great

03:38:26.247 --> 03:38:30.336
for scanning and      We aum so 
use them a lot to reference 

03:38:30.337 --> 03:38:35.473
objects in the world.  So, I can
look at all the baked goods and 

03:38:35.474 --> 03:38:37.286
then point to the one that I 
want.  Instead of, for example, 

03:38:37.287 --> 03:38:40.176
having to hear or say out loud 
something like sma 

03:38:43.460 --> 03:38:45.460
small sugar cookie with a 
chocolate tciz 

03:38:47.120 --> 03:38:49.120
So, voice and visuals both have 

03:38:50.204 --> 03:38:52.204
their benefits, and it often is 
useful to use both.

03:38:54.514 --> 03:38:56.967
So, in this example, we usually 
prefer to look at the menu but 

03:38:56.968 --> 03:38:58.968
then talk to the 

03:39:01.657 --> 03:39:03.296
Similar benefits to using both 
voice and visuals exist in the 

03:39:03.297 --> 03:39:09.201
real world, as well.  Or in the 
digital world, as well.  And, 

03:39:09.202 --> 03:39:12.077
that is what makes multi modal 
devices, like phones and smart 

03:39:12.078 --> 03:39:14.078
displays 

03:39:15.355 --> 03:39:17.414
such a unique opportunity by 
leveraging the best of both 

03:39:17.415 --> 03:39:19.415
voice and visuals, 

03:39:21.475 --> 03:39:23.475
they're able to provide really 
rich interactions.

03:39:32.150 --> 03:39:34.536
One thing to keep in mind, au
again is to start with a human 

03:39:34.537 --> 03:39:39.414
conversation.  You might have an
Apple ready, but avoid the 

03:39:39.415 --> 03:39:42.262
temptation to duplicate it.  
Instead, try to open serve a 

03:39:42.263 --> 03:39:45.142
relevant conversation in the 
real world or role play it with 

03:39:45.143 --> 03:39:49.004
a colleague.  And, write down 
that dialogue.  You'll realize 

03:39:49.005 --> 03:39:51.257
that not everything that is in 
your app does well as 

03:39:52.681 --> 03:39:54.681
conversation or vice versa.

03:40:00.641 --> 03:40:03.510
Instead think of a reaction that
is a companion to your app.  I 

03:40:03.511 --> 03:40:05.812
won't go into detail into how to
write good dialogue or create 

03:40:05.813 --> 03:40:09.718
per Sony, but I highly recommend
you checkout our brand new 

03:40:09.719 --> 03:40:12.407
conversation design website at 
that link there.  It goes into 

03:40:12.408 --> 03:40:14.408
great detail into how to get 
started.

03:40:19.139 --> 03:40:20.563
So we've learned that we need to
create spoken dialogue and add 

03:40:20.564 --> 03:40:24.671
visuals      So, let's take a 
look at an example of how to do 

03:40:24.672 --> 03:40:27.571
that and how that helps us      
So, if you haven't already, I 

03:40:27.572 --> 03:40:29.572
would 

03:40:31.607 --> 03:40:33.607
encourage you to checkout the 
Google

03:40:35.123 --> 03:40:37.378
io 2018 action to help you learn
more about this event.  We 

03:40:37.379 --> 03:40:39.648
started by writing a spoken 
dialogue as for a voice only 

03:40:39.649 --> 03:40:44.344
device like a Google Home, and 
it includes terms like this one,

03:40:44.345 --> 03:40:46.345
a user can say browse sessions 
and we respond with a spoken 

03:40:47.239 --> 03:40:49.080
response like here are some of 
the topics left for today.  And,

03:40:49.081 --> 03:40:52.074
so on.  

03:40:55.994 --> 03:40:57.616
Now, in order to take this 
dialogue and scale it, we need 

03:40:57.617 --> 03:41:01.299
to take every turn like this, 
and think about all the ways we 

03:41:01.300 --> 03:41:02.717
can incorporate visual 
components to it.  This would 

03:41:02.718 --> 03:41:05.162
include, for example, display 
prompts, cards, and suggestions.

03:41:10.161 --> 03:41:11.994
In our example we can accompany 
that spoken protht with a 

03:41:11.995 --> 03:41:15.860
display prompt like which topic 
are you interested in?  This 

03:41:15.861 --> 03:41:20.769
helps carry the written 
conversation on a screen.  We 

03:41:20.770 --> 03:41:22.770
can add a list of sessions as a 

03:41:24.055 --> 03:41:25.897
card, a user could tap on that 
for example, and we could have a

03:41:25.898 --> 03:41:29.345
suggestion chip like none of 
these.  And, this helps a user 

03:41:29.346 --> 03:41:31.346
know how to 

03:41:34.040 --> 03:41:36.040
Once we've constructed our 
response 

03:41:37.158 --> 03:41:40.009
to have spoken and visual 
elements, we can then map that 

03:41:40.010 --> 03:41:44.108
response to the multi modal 
spectrum from earlier.  So, 

03:41:44.109 --> 03:41:46.109
depending on whether the device 

03:41:47.794 --> 03:41:49.424
has visual or audio capabilities
or how important voice is, we 

03:41:49.425 --> 03:41:51.425
can choose the 

03:41:53.523 --> 03:41:54.944
You already saw what our 
response would look like on a 

03:41:54.945 --> 03:41:56.945
Google Home.

03:41:58.002 --> 03:41:59.656
We would simply have the spoken 
prompt.  Let's take a look at 

03:41:59.657 --> 03:42:01.657
what the response 

03:42:06.639 --> 03:42:09.528
A Smart Display is a voice 
forward device, so we still need

03:42:09.529 --> 03:42:12.385
to show all the spoken prompt 
and make it carry the whole 

03:42:12.386 --> 03:42:14.386
conversation.

03:42:15.449 --> 03:42:18.262
We don't really need a display 
prompt anymore, especially if 

03:42:18.263 --> 03:42:20.535
we're going to have better 
visuals, like the list and the 

03:42:20.536 --> 03:42:24.789
chips.  A phone on the other 
hand, is enter modal device, and

03:42:24.790 --> 03:42:27.075
we need to have both the voice 
and the visuals carry the 

03:42:28.290 --> 03:42:31.784
conversation.  In this case, you
might notice that we shortened 

03:42:31.785 --> 03:42:33.785
the spoken prompt because we can
direct the use tore look at the 

03:42:34.429 --> 03:42:36.429
screen for more details.

03:42:37.899 --> 03:42:39.934
And, Ulas will talk more about 
how you can do that.  And, of 

03:42:39.935 --> 03:42:41.935
course the rest of the visual 

03:42:44.415 --> 03:42:46.471
And finally, if your phone was 
on silent, we would simply 

03:42:46.472 --> 03:42:48.472
ignore the 

03:42:49.549 --> 03:42:51.619
spoken prompt and the visual 
components are able to carry the

03:42:51.620 --> 03:42:54.270
complete      So now we've 
learned that in order 

03:42:58.373 --> 03:42:59.824
to scale our dialogue, we need 
to write spoken prompts and add 

03:42:59.825 --> 03:43:01.825
visuals to them 

03:43:05.329 --> 03:43:07.329
But, how do we know what kinds 
of visuals to add?

03:43:09.245 --> 03:43:11.245
I would like to leave you with 
five 

03:43:14.338 --> 03:43:17.826
tips for how how can incorporate
visuals into your dialogue.  For

03:43:17.827 --> 03:43:19.927
that let's take up this made up 
assistive action called National

03:43:19.928 --> 03:43:22.991
Anthem player on a Smart 
Display.  As the name suggests 

03:43:22.992 --> 03:43:26.670
the user can ask for a country 
and it will come back with the 

03:43:26.671 --> 03:43:28.502
National Anthem for that 
country.  When you invoke this 

03:43:28.503 --> 03:43:30.503
action, it gives you a welcome 
message that sounds like 

03:43:35.653 --> 03:43:38.363
(Audio clip:  Welcome to 
National Anthem player.  I can 

03:43:38.364 --> 03:43:39.788
play the National Anthems from 
20 different countries, 

03:43:39.789 --> 03:43:43.670
including United States, Canada,
and the you nighted kingdom.  

03:43:43.671 --> 03:43:45.671
Which would you like to hear?

03:43:50.203 --> 03:43:51.232
&gt;&gt; Saba Zaidi:  As you can see 
the device is currently writing 

03:43:51.233 --> 03:43:55.916
on the screen what it is saying 
out loud.  This is a missed 

03:43:55.917 --> 03:43:58.353
opportunity especially by now 
we've learned that visuals have 

03:43:58.354 --> 03:43:59.975
some strength over voice and 
that smart displays are great 

03:43:59.976 --> 03:44:01.976
for 

03:44:03.881 --> 03:44:07.146
So, tip No. 1 is to consider 
cards rather than just display 

03:44:07.147 --> 03:44:09.147
prompts.

03:44:10.221 --> 03:44:14.123
In this case, we've swapped out 
the words for a carousel.  Users

03:44:14.124 --> 03:44:16.155
can quickly browse through the 
list and select the country that

03:44:16.156 --> 03:44:18.156
they want.

03:44:20.318 --> 03:44:21.747
You'll notice this is kind of 
similar to the menu example we 

03:44:21.748 --> 03:44:23.748
looked at in the cafe where 
visuals are helping someone 

03:44:29.139 --> 03:44:30.958
Additionally, things like maps, 
charts, and images are also 

03:44:30.959 --> 03:44:34.866
great on visual devices, because
they're difficult to describe 

03:44:34.867 --> 03:44:36.867
through voice, similar to the 

03:44:38.952 --> 03:44:40.952
Second, consider varying your 
spoken and your display prompts.

03:44:42.623 --> 03:44:45.072
This is particularly useful for 
devices that are enter modal 

03:44:45.073 --> 03:44:49.579
that might have a display prompt
next to a card.  And, some of 

03:44:49.580 --> 03:44:52.477
that information might be 
redundant.  So, in this case, 

03:44:52.478 --> 03:44:56.169
we're stripping out the examples
for the countries in the display

03:44:56.170 --> 03:44:58.170
prompt because the card already 

03:45:02.282 --> 03:45:04.282
Third, consider visuals for 
suggestions.

03:45:06.400 --> 03:45:08.628
Here we know that the user is a 
repeat user, so we're 

03:45:08.629 --> 03:45:10.685
reorderering the list so that 
they're most frequently visited 

03:45:11.930 --> 03:45:14.164
countries show up first.  We're 
also using suggestion chips to 

03:45:15.983 --> 03:45:17.812
allude to the user how they can 
follow up or pivot a 

03:45:17.813 --> 03:45:20.664
conversation.  This kind of 
discovery can be quite 

03:45:28.017 --> 03:45:30.863
Next, you can use visuals to 
increase your brand expression. 

03:45:30.864 --> 03:45:33.713
We used to allow you to change 
your voice and choose a logo, 

03:45:33.714 --> 03:45:35.714
but now we're also going to be 
allowing you to choose 

03:45:39.729 --> 03:45:41.760
a font and the background image,
and Ulas will talk more about 

03:45:41.761 --> 03:45:46.455
how you dock that.  As you can 
see here, the experience looks a

03:45:46.456 --> 03:45:48.456
lot more custom and immerse I 

03:45:49.523 --> 03:45:51.350
Lastly, visual devices are great
for carrying conversations that 

03:45:51.351 --> 03:45:53.351
started on a voice only device.

03:45:55.445 --> 03:45:57.906
So, for example, if I use this 
National Anthem action on a 

03:45:57.907 --> 03:45:59.907
Google Home 

03:46:01.770 --> 03:46:03.806
and I wanted to see the lyrics, 
the action can send a 

03:46:03.807 --> 03:46:05.807
notification after a few steps 
to my phone and I can take out 

03:46:06.903 --> 03:46:08.903
my phone and read them there.

03:46:10.160 --> 03:46:12.401
So, hopefully those five tips 
will help you in incorporating 

03:46:12.402 --> 03:46:14.402
more visuals 

03:46:16.747 --> 03:46:18.747
Let's summarize what we've 
learned 

03:46:20.001 --> 03:46:22.903
so far on how to design actions 
for the assistant.  First, users

03:46:22.904 --> 03:46:24.125
interact with the Google 
Assistant in a variety of 

03:46:24.126 --> 03:46:29.849
different ways and contexts, so 
this could include i home or on 

03:46:29.850 --> 03:46:31.850
the go, up close or at a 

03:46:34.749 --> 03:46:36.571
In order to design across so 
many modalities, it helps to 

03:46:36.572 --> 03:46:39.030
keep in mind the multi modal 
spectrum and think of your 

03:46:40.865 --> 03:46:42.865
responses of having visual 
components as 

03:46:45.580 --> 03:46:47.433
And lastly, learn and leverage 
the strengths of each of these 

03:46:47.434 --> 03:46:49.434
modalities.  We learned for 
example that visuals 

03:46:52.133 --> 03:46:55.392
are great at scanning, brand 
expression and discovery.  So, 

03:46:55.393 --> 03:46:57.472
instead of just showing on the 
screen what you're saying out 

03:46:57.473 --> 03:47:05.205
loud, try to use cards instead. 
All right.  Now I'm going to 

03:47:05.206 --> 03:47:08.262
hand it over to my colleague 
Ulas, who is going to talk about

03:47:08.263 --> 03:47:10.263
how you can develop these 
actions.

03:47:16.149 --> 03:47:18.149
&gt;&gt; Thank you, [SAB]

03:47:21.746 --> 03:47:23.746
&gt;&gt; Ulas Kirazci:  As we said 
this 

03:47:25.644 --> 03:47:26.860
type runs on many assistants and
in the future will run-on many 

03:47:26.861 --> 03:47:31.365
others.  It will run well on all
these devices today, as well as 

03:47:31.366 --> 03:47:33.366
all the devices dmt future.

03:47:35.411 --> 03:47:37.453
To walk you through this, I'm 
going to use a test action I 

03:47:37.454 --> 03:47:39.454
created called 

03:47:40.730 --> 03:47:42.730
California surf report that 
gives wave 

03:47:43.787 --> 03:47:45.616
height and weather information 
information in beaches in 

03:47:45.617 --> 03:47:48.081
California for surfers.  So, 
currently I only have spoken 

03:47:48.473 --> 03:47:51.334
responses.  No visuals yet.  So,
let's see what the sounds like 

03:47:51.335 --> 03:47:53.335
on 

03:47:59.485 --> 03:48:01.358
(Audio clip:  What is the air 
for most of today, waves will be

03:48:01.359 --> 03:48:04.854
from two to three feet in the 
morning to three to four feet in

03:48:04.855 --> 03:48:06.855
the afternoon.

03:48:08.070 --> 03:48:12.274
Expect waist swell in the 
morning with northwest winds.  

03:48:12.275 --> 03:48:14.275
Shoulder high surf in the 
afternoon 

03:48:16.946 --> 03:48:19.857
&gt;&gt; Ulas Kirazci:  Great.  Pretty
informative.  Now let's take a 

03:48:19.858 --> 03:48:22.118
look at what this sounds like 
and looks like on a voice 

03:48:24.558 --> 03:48:26.597
forward device, like Smart 
Display.  Switch the demo, 

03:48:26.598 --> 03:48:28.598
please.

03:48:33.545 --> 03:48:35.545
Okay, Google, talk the 
California surf report.

03:48:37.609 --> 03:48:39.609
(Google:  Okay.  Let's get the 
test version of 

03:48:43.347 --> 03:48:45.347
Welcome to California surf 
report.

03:48:46.595 --> 03:48:48.595
&gt;&gt; Tell me the surf report for 

03:48:51.720 --> 03:48:52.747
(Google:  Surf insanity fau 
crews beach looks fair for most 

03:48:52.748 --> 03:48:55.391
of today.  Waves will be from 
two to three feet in the morning

03:48:55.392 --> 03:48:57.628
to three to four feet in the 
afternoon.) .

03:49:00.897 --> 03:49:02.897
&gt;&gt; Ulas Kirazci:  I cut it short

03:49:04.577 --> 03:49:06.404
As you can see spoken responses 
are a good way to get started 

03:49:06.405 --> 03:49:08.405
and working 

03:49:10.155 --> 03:49:12.155
well on many devices, but, when 
we have 

03:49:13.829 --> 03:49:15.858
is a screen we can make it a lot
better.     One of the best 

03:49:15.859 --> 03:49:18.305
visuals we can add and the 
easiest once to add is a basic 

03:49:18.499 --> 03:49:20.499
card.

03:49:21.807 --> 03:49:24.063
And, here is an example from the
note JS client library of how to

03:49:24.064 --> 03:49:26.910
add a basic card to your 
responses.  So, we start with 

03:49:26.911 --> 03:49:28.911
the spoken prompt, 

03:49:30.392 --> 03:49:32.216
as usual, and the second 
statement of ask as a basic 

03:49:32.217 --> 03:49:36.691
card.  A basic card can have a 
title, subtitle, body text and 

03:49:36.692 --> 03:49:41.982
optional image.  .  So, let's 
see what this looks like on our 

03:49:41.983 --> 03:49:43.983
Smart Display again.  Let's 
switch to the demo, please.

03:49:48.073 --> 03:49:50.073
Okay, Google.

03:49:55.843 --> 03:49:56.866
(Google:  Surf in Santa Cruz 
beach looks fair for most of 

03:49:56.867 --> 03:49:59.944
today.  Waves will be from two 
to three feet in the morning to 

03:49:59.945 --> 03:50:01.972
three to four feet in the 
afternoon.

03:50:05.507 --> 03:50:07.757
Expect waist swell in the 
morning with northwest winds.  

03:50:07.758 --> 03:50:09.758
Shoulder high surf in the 
afternoon with southwest winds.

03:50:14.720 --> 03:50:18.617
&gt;&gt; Ulas Kirazci:  Okay.  Great. 
Now it looks much better.  We 

03:50:18.618 --> 03:50:20.618
have a nice visual for it rather

03:50:25.324 --> 03:50:28.788
And, here is some other kinds of
cards you can use.  There is a 

03:50:28.789 --> 03:50:30.828
carousel list card that allows 
you to display a set of things 

03:50:32.657 --> 03:50:34.894
that the user can choose from.  
There is also a newly introduced

03:50:34.895 --> 03:50:36.895
table card.

03:50:38.359 --> 03:50:39.771
Another great way to add visuals
to your action is to use 

03:50:39.772 --> 03:50:42.665
suggestion chips.  Suggestion 
chips allow the user to 

03:50:45.929 --> 03:50:48.992
understand what they can do in 
this turn in the conversation.  

03:50:48.993 --> 03:50:50.813
And, also they simplify user 
input.  You can use more about 

03:50:50.814 --> 03:50:52.814
responses at 

03:50:56.503 --> 03:50:59.346
And, by the way, all of this, 
like I promised, works equally 

03:50:59.347 --> 03:51:01.347
well on enter modal device, like
a phone.

03:51:07.740 --> 03:51:09.981
As you can see we formatted the 
font sizes and layout to fit the

03:51:09.982 --> 03:51:15.300
enter modal      Okay.  Great.  
So, next maybe what we want to 

03:51:15.301 --> 03:51:19.585
do is shorten the spoken 
response a bit, because it's a 

03:51:19.586 --> 03:51:20.802
bit repetitive with the 
information that is already on 

03:51:20.803 --> 03:51:23.072
the card.  Users can just look 
at the display for these.

03:51:27.804 --> 03:51:30.270
So, how do we do this?  We have 
a feature in the API called 

03:51:30.666 --> 03:51:32.666
capabilities.

03:51:33.745 --> 03:51:35.745
So, instead of thinking if 
Google Home 

03:51:36.846 --> 03:51:38.846
do this, L Smart Display do 
that, think 

03:51:39.911 --> 03:51:41.739
about what capabilities the 
surface that the user is 

03:51:41.740 --> 03:51:44.398
interacting with you on had.  
Does it have a screen?  Can it 

03:51:44.399 --> 03:51:46.399
output audio?

03:51:49.716 --> 03:51:51.591
The capabilities of the device 
are reported to you in every web

03:51:51.592 --> 03:51:54.228
protocol so you get to, though, 
what this is on every 

03:51:54.229 --> 03:51:58.101
conversation term.  And, here is
a sample list of capabilities 

03:51:58.102 --> 03:52:00.170
that we support, and there is a 
-- you can learn more at the 

03:52:00.171 --> 03:52:02.171
link.

03:52:04.434 --> 03:52:06.434
So, in our use case what we're 
looking for is the screen output

03:52:06.683 --> 03:52:08.683
capability.

03:52:09.753 --> 03:52:12.211
This indicates that the user 
device has a screen so we can 

03:52:12.212 --> 03:52:15.669
show them a card.  By the way, 
if you don't want your responses

03:52:15.670 --> 03:52:17.670
to differentiate between ones 

03:52:19.137 --> 03:52:21.407
with displace and once that are 
(?)  Only you can always add a 

03:52:21.408 --> 03:52:26.098
card and we will strip it out 
for you lently.  So, this makes 

03:52:26.099 --> 03:52:28.099
it easy for you to 

03:52:31.787 --> 03:52:33.634
And, here is, again t no JS 
client library snippet that 

03:52:33.635 --> 03:52:35.635
shows how to use this.

03:52:38.070 --> 03:52:39.545
In the first if statement 
determined that the user device 

03:52:39.546 --> 03:52:41.784
did not have a screen.  So, we 
have the full content in the 

03:52:42.193 --> 03:52:44.193
spoken response.

03:52:45.604 --> 03:52:49.368
In the else clause we know that 
there is a screen so we shorten 

03:52:49.369 --> 03:52:54.478
the spoken response and end it 
with a phrase like here is the 

03:52:54.479 --> 03:52:56.314
report to lead the user to the 
screen, and then we append the 

03:52:56.315 --> 03:52:58.315
basic 

03:53:00.976 --> 03:53:02.976
So, let's see how this looks 
like 

03:53:11.185 --> 03:53:13.185
Okay, Google, show me the 
shortened 

03:53:17.737 --> 03:53:20.181
(Google:  Surf in Santa Cruz 
beach looks fair for most of 

03:53:20.182 --> 03:53:22.819
today with two to three foot 
waves in the morning and three 

03:53:22.820 --> 03:53:25.276
to four foot waves in the 
afternoon.  Here is the report.

03:53:31.726 --> 03:53:33.726
&gt;&gt; Ulas Kirazci:  So that sounds
a 

03:53:37.047 --> 03:53:39.118
Another way you can use 
capabilities is to require that 

03:53:39.119 --> 03:53:43.887
your action only run-on devices 
that have the capabilities.  

03:53:43.888 --> 03:53:46.114
This is what we call static 
capabilities.  And, you can 

03:53:46.115 --> 03:53:47.537
configure these through the 
actions on Google console as you

03:53:47.538 --> 03:53:49.538
can see here.

03:53:51.418 --> 03:53:53.077
But, only use this if your 
action absolutely makes no sense

03:53:53.078 --> 03:53:55.078
without that capability.

03:53:57.569 --> 03:53:59.569
So, for example, the National 
Anthem 

03:54:01.438 --> 03:54:03.668
player action that Saba talked 
about would not make sense on a 

03:54:03.669 --> 03:54:05.309
device without audio.  So, this 
would be a good place to use 

03:54:05.310 --> 03:54:07.310
that.

03:54:09.017 --> 03:54:10.635
However, for the surf report 
app, it equally works well on 

03:54:10.636 --> 03:54:13.957
voice only and display only 
devices.  So, it wouldn't be a 

03:54:13.958 --> 03:54:16.840
good place to use this.  You can
configure all of this using 

03:54:23.972 --> 03:54:25.972
Another high quality and easy 
way 

03:54:27.865 --> 03:54:29.090
to target multiple surfaces is 
to use Google libraries we call 

03:54:29.091 --> 03:54:31.091
helpers.

03:54:32.572 --> 03:54:35.497
So, I've been asking California 
surf report, the surf report 

03:54:35.498 --> 03:54:37.498
with the beach 

03:54:39.929 --> 03:54:41.929
name, but if I don't say the 
beach

03:54:43.483 --> 03:54:47.416
name, I get a prompt, which 
beach?  Now, this doesn't tell 

03:54:43.483 --> 03:54:48.613
me what I can say.  It doesn't 
tell me which beach this action 

03:54:48.614 --> 03:54:51.475
actually supports, so we can fix
that with a helper called ask 

03:54:51.476 --> 03:54:53.476
for carousel.

03:54:54.972 --> 03:54:56.408
What ask with carousel does is 
it presents the user with a list

03:54:56.409 --> 03:54:58.409
of options 

03:54:59.464 --> 03:55:01.464
to pick from, and associates 
visuals with each item.

03:55:05.273 --> 03:55:07.704
In addition, when the user 
utters the query to select an 

03:55:07.705 --> 03:55:09.705
item, Google does the 

03:55:10.966 --> 03:55:12.997
matching of the query to the 
item so we can deal with 

03:55:12.998 --> 03:55:14.998
variations in how people 

03:55:17.885 --> 03:55:20.348
So, let's make our prompt better
with the ask with carousel 

03:55:20.349 --> 03:55:22.349
helper.

03:55:26.032 --> 03:55:27.877
And, again, the note JS library 
snippet here.  We start with the

03:55:27.878 --> 03:55:30.527
spoken response with the prompt,
and we add a carousel to it.

03:55:34.839 --> 03:55:37.270
And, carousel is made up of 
items, and each item has a list 

03:55:37.271 --> 03:55:39.515
of phrases that you think the 
user might say to match this 

03:55:39.706 --> 03:55:44.415
item.  And, visuals associated 
with each item so the user can 

03:55:44.416 --> 03:55:46.416
understand what they're 

03:55:48.683 --> 03:55:51.136
So, let's switch to the demo and
see what this looks like.

03:55:57.927 --> 03:56:00.588
Okay, Google, show me the surf  
(Google:  Which beach do you 

03:56:00.589 --> 03:56:03.852
want to see the report for?  ?

03:56:07.126 --> 03:56:08.761
&gt;&gt; Ulas Kirazci:  So this is the
example where I'm a little 

03:56:08.762 --> 03:56:10.762
confused as 

03:56:11.810 --> 03:56:13.810
Okay, Google, show me the beach 

03:56:14.869 --> 03:56:16.869
(Google:  Which beach would you 
like to know about?

03:56:19.490 --> 03:56:21.490
)  

03:56:24.252 --> 03:56:26.925
&gt;&gt; Ulas Kirazci:  Now it is 
great.  It lets me know what the

03:56:26.926 --> 03:56:28.926
possible options are and even 
tap on one if I 

03:56:32.859 --> 03:56:34.859
And, we always continuously 
improve 

03:56:37.760 --> 03:56:40.048
the experience with these 
helpers, so this is one of the 

03:56:40.049 --> 03:56:42.558
advantagees of helper is that we
continue to modify them and 

03:56:49.639 --> 03:56:51.639
Now, since we launched the card 
at 

03:56:53.163 --> 03:56:56.715
API last year we've since come 
up with smart displays.  aus 

03:56:56.716 --> 03:56:57.953
noticed on smart displays, each 
conversation turn takes up the 

03:56:57.954 --> 03:57:02.966
entire screen.  So, given this 
fact, maybe we can make our 

03:57:02.967 --> 03:57:06.907
visuals more branded and give 
them a little bit more flare.  

03:57:06.908 --> 03:57:08.908
So, we're introducing styling 
options this year.

03:57:10.607 --> 03:57:12.607
So, here is how it works.  Let's
switch to the demo, please.

03:57:20.593 --> 03:57:23.129
So, here is a new tab in the 
actions on Google console called

03:57:23.130 --> 03:57:25.982
team customization.  You can 
modify the background color, 

03:57:28.055 --> 03:57:30.111
primary color, so that's like 
the font color of the text, and 

03:57:30.112 --> 03:57:32.618
the typography and even set a 
background image.

03:57:39.806 --> 03:57:41.894
Let's say we want to make this 
cursive, and let's add a 

03:57:41.895 --> 03:57:43.895
background image.

03:57:46.317 --> 03:57:49.314
What do we got here?  

03:57:54.409 --> 03:57:57.035
So, this is the landscape pass 
image, and then we want to add a

03:57:59.313 --> 03:58:02.298
portrait image, as well.  

03:58:08.502 --> 03:58:10.502
All right.

03:58:14.042 --> 03:58:16.042
Now all we have to do is save

03:58:19.560 --> 03:58:21.560
and then we click test right 
here to 

03:58:23.394 --> 03:58:25.394
update our test version

03:58:27.246 --> 03:58:29.204
.  All right.  Now let's see 
what this looks like on the 

03:58:29.205 --> 03:58:31.205
demo.

03:58:35.089 --> 03:58:37.089
Okay, Google, show me the surf 

03:58:41.236 --> 03:58:42.682
(Google:  Surf in Santa Cruz 
beach looks fair for most of 

03:58:42.683 --> 03:58:46.225
today with two to three foot 
waives in the morning and three 

03:58:46.226 --> 03:58:48.226
to four foot waves in the 
afternoon.

03:58:52.393 --> 03:58:54.393
&gt;&gt; Ulas Kirazci:  I think now 
that looks really beautiful.

03:59:01.366 --> 03:59:04.311
Smart displays are coming out 
later this year; however, you 

03:59:04.312 --> 03:59:08.696
can start building your action 
against these vish yums today 

03:59:08.697 --> 03:59:11.434
using the updated simulator.  
So, we've added a new simulator 

03:59:11.435 --> 03:59:14.150
device type for smart displays, 
as you can see here.

03:59:17.512 --> 03:59:19.181
And, we've also added a display 
tab which shows you the full 

03:59:19.182 --> 03:59:21.242
screen version of what you would
get on a Smart Display.

03:59:26.747 --> 03:59:29.658
And o the left side, as usual, 
you have the spoken responses, 

03:59:29.659 --> 03:59:31.659
as well as 

03:59:37.521 --> 03:59:42.716
One last thing.  We said the 
assistant is in many Places.  

03:59:42.717 --> 03:59:45.210
So, if the users interacting 
with your action using a voice 

03:59:45.211 --> 03:59:48.291
only device, maybe they also 
have a device that has a display

03:59:48.292 --> 03:59:50.292
on it.  For example, a phone.

03:59:53.334 --> 03:59:55.827
So, what if in your current turn
in the conversation you really 

03:59:55.828 --> 03:59:57.828
want to have your response 
display something.

04:00:01.488 --> 04:00:03.812
So, for example, in the surf 
report action, the user might 

04:00:03.813 --> 04:00:07.740
ask us for the full report, and 
we want to return the hour by 

04:00:07.741 --> 04:00:09.741
hour wave height graph.  So, how
do we do that?

04:00:16.355 --> 04:00:18.431
There is a feature in the API 
called multi-surface 

04:00:18.432 --> 04:00:20.432
conversations, and here is how 
it works.

04:00:24.009 --> 04:00:26.009
In each API web book we report 
not 

04:00:27.956 --> 04:00:29.956
only the capabilities of the 
device that 

04:00:32.314 --> 04:00:34.400
the use user is currently using,
but the union of the 

04:00:34.401 --> 04:00:38.090
capabilities of the all the 
devices the user owns.  In this 

04:00:38.091 --> 04:00:40.091
example what you see is that 

04:00:42.001 --> 04:00:43.434
the current user device only has
a voice app capability and has 

04:00:43.435 --> 04:00:47.320
no screen.  But in available 
surfaces we can see the screen 

04:00:47.321 --> 04:00:50.526
output capability.  So, the user
seems to have another device 

04:00:50.527 --> 04:00:52.527
with a screen on it.  So, how do
we use this?

04:00:57.538 --> 04:00:59.783
We, again in the client library,
we have a function to help you 

04:00:59.784 --> 04:01:01.784
to inspect 

04:01:03.273 --> 04:01:05.273
if the user has a certain 
capability 

04:01:07.299 --> 04:01:08.333
Now we determine that the user 
has a device with this 

04:01:08.334 --> 04:01:10.834
capability.  How do we transfer 
the user to the other device?

04:01:15.796 --> 04:01:19.526
We have a function, ask for new 
surface that does this.  And, 

04:01:19.527 --> 04:01:21.395
you can give it a notification 
that will appear on the target 

04:01:21.396 --> 04:01:26.198
device.  In addition to the list
of capabilities that you're 

04:01:26.199 --> 04:01:28.199
require for continuing your 
conversation.

04:01:32.017 --> 04:01:34.509
I'm not going to demo this, but 
here is what it looks like.  So,

04:01:34.510 --> 04:01:36.362
let's say the user said show me 
the full report and they're 

04:01:36.363 --> 04:01:38.363
talking to you on a Google Home.

04:01:42.860 --> 04:01:44.860
So, you would call the ask new 
surface 

04:01:46.383 --> 04:01:48.383
function that I showed you 
earlier and 

04:01:51.625 --> 04:01:52.654
we ask the user permission to 
send the conversation over to 

04:01:52.655 --> 04:01:54.655
the users phone.

04:01:55.831 --> 04:01:58.794
And if the user accepts, then 
there is a notification sent to 

04:01:58.795 --> 04:02:00.795
the new device, the conversation
ends on the current 

04:02:03.706 --> 04:02:06.445
device and when the user taps 
the notification, then they 

04:02:06.446 --> 04:02:08.522
resume the conversation from 
where you left off.  Like this.

04:02:12.091 --> 04:02:14.091
Note that this is not just for 
single responses.

04:02:16.076 --> 04:02:17.362
This works equally well when you
want to continue the 

04:02:17.363 --> 04:02:19.419
conversation.  So, we bring the 
full context over so 

04:02:28.606 --> 04:02:30.644
So, to sum up, we've built a lot
of features in the API for you 

04:02:30.645 --> 04:02:33.380
to add visuals to your 
responses.  So, please use them.

04:02:37.934 --> 04:02:39.798
And, we make it such that we 
take your responses and optimize

04:02:39.799 --> 04:02:43.690
them as best as possible to all 
these surfaces, and surfaces in 

04:02:43.691 --> 04:02:45.691
the future without extra 

04:02:47.617 --> 04:02:49.666
And, if you wanted to customize 
your responses, always think of 

04:02:52.536 --> 04:02:54.536
capabilities and not individual 
device types.

04:02:56.959 --> 04:02:58.630
This way we can run your action 
on new devices without any extra

04:02:58.631 --> 04:03:00.631
work from you.

04:03:10.909 --> 04:03:13.344
&gt;&gt; Saba:  Thank you.  So, I 
would just like to end with an 

04:03:14.368 --> 04:03:16.368
invitation for you.

04:03:17.438 --> 04:03:20.076
Next time you order coffee at a 
cafe or do a presentation like 

04:03:20.077 --> 04:03:22.077
this one, 

04:03:23.152 --> 04:03:25.827
start to notice all the 
different modes of interactions 

04:03:25.828 --> 04:03:27.885
you use every day, and let the 
richness of those human 

04:03:30.321 --> 04:03:32.321
conversations inspire how you 
design 

04:03:33.582 --> 04:03:35.635
actions for users and help us 
evolve what it means to have 

04:03:35.636 --> 04:03:37.636
conversations with 

04:03:40.122 --> 04:03:41.964
Here are some links to resources
we mentioned, and how to give 

04:03:41.965 --> 04:03:46.301
feedback.  So, also come just 
talk to us.  We will be with our

04:03:46.302 --> 04:03:50.178
team at the assistant office 
hours and Sandboxes ready to 

04:03:50.179 --> 04:03:52.179
answer your questions and 
showing off some of the devices.

04:03:56.231 --> 04:03:58.231
(

04:03:59.386 --> 04:04:01.386
&gt;&gt; 

04:04:06.962 --> 04:04:08.962
(Applause)

05:18:59.873 --> 05:19:00.906
... 
 ... 

05:19:00.907 --> 05:19:02.907
... 
 ...

05:19:57.644 --> 05:19:59.644
Introduce

05:20:02.578 --> 05:20:06.320
IntroducingIntroducing
Introducing AIY.  

05:20:11.820 --> 05:20:13.820
Do-it-yourself Artificial 
Intelligence  

05:20:22.339 --> 05:20:24.339
IntroduceIntroducing AIY  
Do-it-yourself 

05:20:25.350 --> 05:20:27.350
Artificial Intelligence  

05:25:34.853 --> 05:25:35.666
&gt;&gt; At this time, please find 
your seat.  Our session will 

05:25:35.667 --> 05:25:37.667
begin soon.  

05:30:07.592 --> 05:30:09.592
&gt;&gt; You can see, right?  

05:30:21.677 --> 05:30:24.956
&gt;&gt; Good afternoon, everyone.  
Welcome to the AIY session.  

05:30:24.957 --> 05:30:29.454
How is everybody for I/O so far?
Everybody had a good lunch 

05:30:29.455 --> 05:30:34.213
today?  Yes?  Okay.  As you can 
see on the screen, the name 

05:30:37.542 --> 05:30:41.443
of the session is introduction 
to AIY.  What is AIY?  AIY is a 

05:30:41.444 --> 05:30:43.444
line of a product Google 

05:30:44.485 --> 05:30:46.566
makes for developers like you, 
makers all around the world, to 

05:30:46.567 --> 05:30:49.414
make applications for Artificial
Intelligence by yourself.  

05:30:53.495 --> 05:30:55.495
That's the name of AIY, where 
that came from.

05:30:56.758 --> 05:30:58.758
Today joining me my colleagues 
in 

05:31:01.652 --> 05:31:03.652
development relations, my name 
is Bill Luan.

05:31:07.576 --> 05:31:09.576
Sebastian is joining me and 
Dushyantsinh joining me.

05:31:13.952 --> 05:31:15.952
Before we begin, I will 
introduce my colleagues.  

05:31:16.595 --> 05:31:18.640
&gt;&gt; DUSHYANTSINH JADEJA: Hello, 
everybody.  My name is 

05:31:18.641 --> 05:31:20.641
Dushyantsinh.

05:31:22.907 --> 05:31:24.935
I am excited to show demos on 
the AIY.  Before we start, I 

05:31:24.936 --> 05:31:28.225
would like Sebastian is give you
a quick overview of what is AIY.

05:31:32.697 --> 05:31:34.697
And to set the context for the 
talk.  

05:31:35.945 --> 05:31:37.945
&gt;&gt; SEBASTIAN TRZCINSKI-CLEMENT: 
Thank 

05:31:39.199 --> 05:31:41.199
you, I'm Sebastian, with this 
very complicated last name.

05:31:43.107 --> 05:31:46.576
A joined Google recently, just 
about 11 years ago.  With my 

05:31:46.577 --> 05:31:48.810
teams, what we do around the 
world, especially in major 

05:31:48.811 --> 05:31:50.811
markets is 

05:31:52.882 --> 05:31:55.123
help developers and startups 
build better mobile and weapon 

05:31:55.124 --> 05:31:57.163
applications.  
Today, I want to talk about AIY.

05:32:01.449 --> 05:32:03.065
Before that let's talk about 
DIY, do-it-yourself.  Do you 

05:32:03.066 --> 05:32:05.515
know what this is?  It is not a 
UFO.

05:32:08.561 --> 05:32:09.381
It is actually a musical 
instrument which makes nice 

05:32:09.382 --> 05:32:13.081
sounds.  But no, it was not 
invented in prehistoric times.

05:32:16.975 --> 05:32:20.018
It was actually created in the 
year 2000 in Switzerland.  

05:32:20.019 --> 05:32:22.649
Schweitzer is land is the 
country where I am officially 

05:32:22.650 --> 05:32:24.650
based, which is 

05:32:26.320 --> 05:32:28.580
not one of the other UFOs, 
planes, because I travel quite a

05:32:28.581 --> 05:32:30.581
bit to see my team.

05:32:31.825 --> 05:32:34.475
This is also a window into DIY 
culture.  I will take you 

05:32:34.476 --> 05:32:36.476
through a brief 

05:32:37.533 --> 05:32:39.533
history of humankind's appetite 
for DIY.

05:32:42.002 --> 05:32:43.630
If you read the book, the 
history of humankind, you will 

05:32:43.631 --> 05:32:46.501
know what I am talking about.  
Our human ancestors were 

05:32:46.502 --> 05:32:49.586
building tools as part of 
weapons, instruments, using 

05:32:49.587 --> 05:32:54.668
stone, wood.  If we skip a few 
generations of humans, we're 

05:32:54.669 --> 05:32:56.669
still using wood to create 
things.

05:32:58.790 --> 05:33:00.790
This is one of my brothers, 
mattias 

05:33:01.831 --> 05:33:03.831
and sister Lidia 30 years ago.

05:33:06.940 --> 05:33:07.991
I'm sure you and your siblings 
just tinkered with stuff, 

05:33:07.992 --> 05:33:10.029
whatever you can lay your hands 
on.  

05:33:11.857 --> 05:33:13.857
Let's fast forward to the 
electronics age.

05:33:15.719 --> 05:33:18.360
Do you remember in it the '90s, 
desktops -- not even laptops -- 

05:33:18.361 --> 05:33:20.361
desktops were so expensive.

05:33:25.277 --> 05:33:27.528
Show of hands, who built 
computers.  I'm the only one who

05:33:27.529 --> 05:33:30.782
is too old for this?  
This animated image, you can see

05:33:30.783 --> 05:33:32.783
how I 

05:33:34.444 --> 05:33:36.444
used an overhead projector and 

05:33:40.410 --> 05:33:43.877
dismantled LCD screen to build a
cheap homemade projector.  My 

05:33:43.878 --> 05:33:46.731
mom was annoyed everything was 
all over the living room.  She 

05:33:46.732 --> 05:33:48.732
said go outside, fresh air.  

05:33:53.461 --> 05:33:55.461
That is my outside reusing 
garbage bags.

05:34:02.434 --> 05:34:06.369
$1 for a garb  -- garage bags to
build a balloon.  Almost strong 

05:34:06.370 --> 05:34:08.370
enough to lift me up.

05:34:10.447 --> 05:34:12.479
My other brother, Lauren started
tinkering with 3D printers.  

05:34:12.480 --> 05:34:17.372
My other brother -- the one on 
the right.  The left is a Forto 

05:34:17.373 --> 05:34:19.373
in a museum.

05:34:20.820 --> 05:34:24.478
As I said DIY is in our D.N.A. 
from early on.  It is also in 

05:34:24.479 --> 05:34:26.479
Google's D.N.A.

05:34:28.210 --> 05:34:30.456
Four years ago, you remember the
engineer from the Paris office 

05:34:30.457 --> 05:34:32.457
-- I am actually French.

05:34:34.168 --> 05:34:36.168
This engineer came here at I/O 
to show 

05:34:37.419 --> 05:34:39.419
the VR platform he had built 
using 

05:34:41.251 --> 05:34:46.262
cardboard, during his 20% 
innovation time.  This is the 

05:34:46.263 --> 05:34:48.263
Daydream at VR platform. 

05:34:51.098 --> 05:34:55.630
Here's what's interesting.  
One hand, it is objects and 

05:34:55.631 --> 05:34:57.631
culture.

05:35:00.992 --> 05:35:02.609
This DIY and hack it culture.  
You may have megaspaces around 

05:35:02.610 --> 05:35:07.090
you.  If there are none in your 
city, then you should start a 

05:35:07.091 --> 05:35:10.962
megaspace.  The great thing 
about the megaculture is that 

05:35:10.963 --> 05:35:12.963
you learn through doing with 
your hands.

05:35:14.823 --> 05:35:16.823
You make mistakes, so what!  It 
doesn't matter.

05:35:18.878 --> 05:35:22.811
It is a good way to learn, try 
new things, learn from each 

05:35:18.878 --> 05:35:22.155
other.  Figure out new 
applications that you can create

05:35:22.156 --> 05:35:24.207
with that technology.  
It doesn't matter what your 

05:35:24.208 --> 05:35:26.208
background is.

05:35:27.279 --> 05:35:29.946
In fact, it is better when you 
can mix and match different 

05:35:29.947 --> 05:35:31.181
domains to find new 
applications, other technology. 

05:35:31.182 --> 05:35:34.855
Let's take a look at what has 
happened in the past few years.

05:35:40.182 --> 05:35:42.182
You now have macrocontrollers,- 

05:35:45.725 --> 05:35:47.725
microcontrollers like ras  berry
pie.

05:35:49.593 --> 05:35:51.593
-- Raspberry pie. 

05:35:53.064 --> 05:35:55.127
And did you know that costs has 
decreased for lithium batteries.

05:35:58.827 --> 05:36:01.061
And the Cloud and Artificial 
Intelligence.  All of this 

05:36:01.062 --> 05:36:04.743
sounds complicated.  
It doesn't have to be.  This is 

05:36:04.744 --> 05:36:08.004
with AIY.  Do-it-yourself 
Artificial Intelligence that we 

05:36:08.005 --> 05:36:11.052
introduced last year, you can 
have fun.  The idea of this 

05:36:11.053 --> 05:36:13.917
megaculture is before anything 
else, to have fun.  

05:36:16.387 --> 05:36:18.387
Using in this case, Artificial 
Intelligence.

05:36:21.266 --> 05:36:23.266
We want to put AI in your hands 
so you can solve real problems.

05:36:28.801 --> 05:36:30.640
The AIY kits are open source, 
have hardware and software and 

05:36:30.641 --> 05:36:34.103
integrate directly on the device
themselves.  The essence, as I 

05:36:34.104 --> 05:36:37.995
mentioned previously, is to keep
it low cost, using readily 

05:36:37.996 --> 05:36:39.996
available components you 

05:36:41.046 --> 05:36:43.046
can find almost anywhere on the 
planet. 

05:36:44.354 --> 05:36:46.354
The kits are able to assemble.

05:36:49.468 --> 05:36:51.468
Dushyantsinh how long does it 
take to assemble?

05:36:53.774 --> 05:36:55.599
&gt;&gt; DUSHYANTSINH JADEJA: 15 to 20
minutes. 

05:36:55.600 --> 05:36:58.472
&gt;&gt; SEBASTIAN TRZCINSKI-CLEMENT: 
I will say not more than an hour

05:36:58.473 --> 05:37:00.473
to assemble a kit.

05:37:03.586 --> 05:37:05.586
Dushyantsinh and Bill will demo 
the kits.  

05:37:05.815 --> 05:37:08.072
So stay with us, the voice and 
vision kit.  Stay with us, in 

05:37:08.073 --> 05:37:10.073
the coming months 

05:37:11.740 --> 05:37:13.740
there will be more to announce 
in that space. 

05:37:14.598 --> 05:37:16.443
Let's take a look -- I will 
finish up with this -- at what 

05:37:16.444 --> 05:37:18.444
some of you have created.

05:37:19.504 --> 05:37:20.526
I will show you in a few 
seconds, a 16-year-old with no 

05:37:20.527 --> 05:37:24.983
programming experience has come 
up with the following use case. 

05:37:24.984 --> 05:37:26.984
Play the video for about 20 
seconds.  

05:37:29.900 --> 05:37:31.947
&gt;&gt; Shop for New York Yankee 
baseball hats.  What is actually

05:37:31.948 --> 05:37:34.594
happening now?  
&gt;&gt; Done. 

05:37:35.600 --> 05:37:39.298
&gt;&gt; She said done?  
&gt;&gt; Yeah.  What happened is when 

05:37:39.299 --> 05:37:41.956
it said done, it sent links to 
my e-mail after finding it on 

05:37:41.957 --> 05:37:46.436
eBay.  It will find results 
online, send links in an e-mail 

05:37:46.437 --> 05:37:48.437
to me, I will receive 

05:37:50.114 --> 05:37:51.743
those so I can quickly click and
buy something.  

05:37:51.744 --> 05:37:53.598
&gt;&gt; SEBASTIAN TRZCINSKI-CLEMENT: 
What happened here with Lawrence

05:37:53.599 --> 05:37:55.599
and the high school kid was 
shopping for a product.

05:37:58.337 --> 05:38:00.575
I don't know if you heard that 
at the beginning.  I'm shopping 

05:38:00.576 --> 05:38:03.852
for baseball caps.  
Searching on eBay and e-mailed 

05:38:03.853 --> 05:38:06.540
when the device was done.  Let 
me take you through the code. 

05:38:06.541 --> 05:38:08.776
Just a few lines of code.

05:38:12.236 --> 05:38:15.692
Not a hundred or thousand lines 
of code.  Just 20 or 30 lines.  

05:38:15.693 --> 05:38:17.533
I want to show you, even if you 
are not an experienced 

05:38:17.534 --> 05:38:19.219
programmer, you can learn from 
that. 

05:38:19.220 --> 05:38:21.220
I will keep it simple.  The 
first line you can see here is 

05:38:22.879 --> 05:38:24.904
this action triggered when the 
user presses the button on top 

05:38:24.905 --> 05:38:30.039
of the device.  Let's examine 
what happens next.  We take the 

05:38:30.040 --> 05:38:32.690
words, store them in the local 
variable at the keyword at the 

05:38:32.691 --> 05:38:37.766
bottom.  What happens next?  
Import a range of libraries.  

05:38:37.767 --> 05:38:39.394
You can be like me, you don't 
have to understand the 

05:38:39.395 --> 05:38:41.395
libraries, copy, paste 

05:38:44.262 --> 05:38:46.263
it, it works, you try to 
understand afterward what 

05:38:46.264 --> 05:38:48.264
library does what.  It is by 
learning about example.  

05:38:48.697 --> 05:38:51.957
When I said learning by doing, 
this is what I mean.  Copy and 

05:38:51.958 --> 05:38:53.958
paste the libraries you need, 
the few lines here.

05:38:58.925 --> 05:39:01.369
After, that we will call the 
eBay API this is the line in the

05:39:01.370 --> 05:39:04.440
middle.  With that line, we get 
results back from eBay.  

05:39:06.102 --> 05:39:08.102
We will read the results as you 
see on the bottom.  

05:39:08.742 --> 05:39:11.428
Finally, what we do, you may 
remember in the video, all the 

05:39:11.429 --> 05:39:15.306
results are sent to the e-mail. 
Here's the code.  We will go 

05:39:15.307 --> 05:39:17.307
through the result, the first 
three lines of code up there, 

05:39:18.155 --> 05:39:20.805
format all of this in an e-mail.
You can recognize, even if you 

05:39:20.806 --> 05:39:23.677
are not an experienced 
programmer, from, to, subject 

05:39:23.678 --> 05:39:27.138
line.  
That's it.  Nothing more.  The 

05:39:27.139 --> 05:39:29.139
last thing we do is connect to 
the 

05:39:30.266 --> 05:39:32.266
server, the e-mail server and 
send the 

05:39:34.767 --> 05:39:35.987
e-mail and get the device to say
"done."  

05:39:35.988 --> 05:39:37.988
That's it, nothing more.

05:39:39.416 --> 05:39:41.416
You can literally copy and paste
that code.  It will work. 

05:39:42.302 --> 05:39:44.302
It is your turn to do things 
with AIY.

05:39:45.942 --> 05:39:47.581
If you are not inspired enough, 
I have Dushyantsinh now to come 

05:39:47.582 --> 05:39:50.686
on stage and do a demo with the 
voice kit.  Thank you for 

05:39:50.687 --> 05:39:52.687
listening.

05:39:54.370 --> 05:39:54.980
Welcome, Dushyantsinh, back on 
stage.  

05:39:54.981 --> 05:39:56.981
(Applause) .  

05:40:01.501 --> 05:40:03.501
&gt;&gt; DUSHYANTSINH JADEJA: Thank 
you, Sebastian.

05:40:04.959 --> 05:40:06.392
My name is Dushyantsinh Jadeja 
development team at Google.  

05:40:06.393 --> 05:40:08.911
Like everybody, we all are 
excited about 

05:40:13.084 --> 05:40:15.084
the possibility of AI in front 
of us, correct?

05:40:15.967 --> 05:40:17.967
This only becomes more 
meaningful and 

05:40:19.467 --> 05:40:21.714
more impactful when all of us 
have access to this wonderful 

05:40:21.715 --> 05:40:23.715
platform.

05:40:25.215 --> 05:40:28.105
At Google, we have been sharing 
our work and advancement in the 

05:40:28.106 --> 05:40:33.185
field of Artificial Intelligence
by building products, sharing 

05:40:33.186 --> 05:40:35.186
through research 

05:40:37.060 --> 05:40:39.291
papers and now with the AIY 
kits, we are taking to even more

05:40:39.292 --> 05:40:41.292
people in a more playful way.

05:40:43.526 --> 05:40:47.683
Yet, it is strong enough for you
to solve some really good 

05:40:47.684 --> 05:40:50.756
problems.  
Let's see how we can kind of 

05:40:50.757 --> 05:40:53.402
solve some of those things.  
When we're thinking about this 

05:40:53.403 --> 05:40:56.236
kit together, we are thinking, 
you know, what makes sense?  

05:40:56.237 --> 05:41:00.712
What would be a right way of 
putting this in front of people 

05:41:00.713 --> 05:41:05.210
woman and of course, voice was 
one of the things that was very 

05:41:05.211 --> 05:41:08.664
evident.  
Correct, we all like talking? 

05:41:08.665 --> 05:41:10.665
Imagine, we have a power of 
playing 

05:41:13.200 --> 05:41:15.200
around with the voice, how fun 
it would be.

05:41:16.260 --> 05:41:19.326
It was mentioned in the keynote 
yesterday, the wave net.  You 

05:41:19.327 --> 05:41:21.983
can create different voices.  
So in this demo, I'm just going 

05:41:21.984 --> 05:41:23.984
to talk 

05:41:27.436 --> 05:41:29.436
about the capabilities of

05:41:34.428 --> 05:41:37.102
AIY kit, and Google Assistant, 
but of course, there is much 

05:41:37.103 --> 05:41:39.103
more than this. 

05:41:40.595 --> 05:41:42.595
Voice kit was launched sometime 
last year, I believe.

05:41:44.457 --> 05:41:47.115
It got a lot of attention.  
The voice kit has a combination 

05:41:47.116 --> 05:41:49.116
of few software and some of the 
hardware there.

05:41:52.009 --> 05:41:54.009
It was marketed along with the 
(?

05:41:55.287 --> 05:41:57.963
) Foundation to see what are the
feedback we can get from the 

05:41:57.964 --> 05:42:00.033
existing community and try to 
improve our offering.

05:42:03.901 --> 05:42:05.901
We launch the second version of 
voice 

05:42:07.185 --> 05:42:09.185
kit in January, to get and 
incorporate 

05:42:11.255 --> 05:42:14.538
the feedbacks and make it all in
one box component kit.  This is 

05:42:14.539 --> 05:42:16.801
what you get today, if you go to
AIY website and look at voice 

05:42:16.802 --> 05:42:18.802
kit, 

05:42:20.489 --> 05:42:23.334
this is what you will probably 
find there.  But what does the 

05:42:23.335 --> 05:42:25.335
kit contain?

05:42:26.598 --> 05:42:28.598
From a hardware point of view, 
it has, 

05:42:38.418 --> 05:42:40.250
you know, ras Perry pie -- 
Raspberry pie zero.  

05:42:40.251 --> 05:42:42.251
And the processing for you.  

05:42:44.332 --> 05:42:47.177
The voice bonnet, it has a mic, 
microcontroller, general input, 

05:42:47.178 --> 05:42:50.666
output, and to basically give 
you visual indication of what is

05:42:50.667 --> 05:42:52.667
happening with 

05:42:54.700 --> 05:42:56.700
your voice kit at any point in 
time.  

05:42:57.310 --> 05:42:59.310
And from a software point of 
view, it 

05:43:00.736 --> 05:43:02.736
basically runs

05:43:09.383 --> 05:43:11.797
on ras bianilinebianiline -- 
razz Berrian Linux.

05:43:15.741 --> 05:43:18.258
This is just scratching the 
surface of the voice kit. 

05:43:18.865 --> 05:43:23.799
How to get started.  Step one, 
in terms of assembling the kit. 

05:43:23.800 --> 05:43:25.800
Step two, setting up the device.

05:43:27.065 --> 05:43:29.065
Step three, now you set up 
everything, 

05:43:30.094 --> 05:43:32.094
you can build some solution by 
yourself.

05:43:33.190 --> 05:43:35.190
So if you open the kit, this is 
what is looks like.

05:43:37.677 --> 05:43:39.677
First thing, ensure you have all
the 

05:43:40.950 --> 05:43:42.806
right components, you have 
cardboard, all the different 

05:43:42.807 --> 05:43:44.833
hardwares mentioned on the 
website, just verify that you 

05:43:44.834 --> 05:43:49.129
have all of the components ready
with you before you start 

05:43:49.130 --> 05:43:52.014
assembling together.  Once you 
verify, the next step for you 

05:43:55.691 --> 05:43:57.691
to do is build an engine, think 
of it as building a car.

05:44:01.794 --> 05:44:03.934
Building an engine, putting 
Raspberry pie and the engine 

05:44:03.935 --> 05:44:06.411
together.  
Now you are building the 

05:44:06.412 --> 05:44:08.412
chassis.

05:44:09.449 --> 05:44:11.449
You know, a structure for your 
car or for the voice kit.

05:44:14.263 --> 05:44:18.159
You take it, cardboard and give 
it a structure of a speaker.  

05:44:18.160 --> 05:44:20.160
Once you build the cardboard, 
you put the engine inside it.

05:44:24.049 --> 05:44:26.090
You put the Raspberry pie, voice
bonnet in it.  That's it.  

05:44:27.136 --> 05:44:29.561
Super easy, super fun.  For me, 
when I tried first time, it 

05:44:31.450 --> 05:44:34.128
somewhere around 15 to 20 
minutes, I'm sure you are much, 

05:44:34.129 --> 05:44:38.630
much advanced than me and you 
can probably do it even faster. 

05:44:38.631 --> 05:44:43.720
The key is not fast, but do it 
in a nice, fun way out of it.  

05:44:43.721 --> 05:44:45.721
Yeah, that's it.

05:44:49.594 --> 05:44:51.594
You can assemble your voice 

05:44:52.945 --> 05:44:58.418
kit.  
Step two, set up your device. 

05:45:02.480 --> 05:45:05.171
Now I have the device, the voice
kit is in a nice shape and form,

05:45:05.172 --> 05:45:09.649
let me give a voice to it.  See 
if it is working fine.  I have 

05:45:09.650 --> 05:45:11.650
an already built voice kit here.

05:45:12.719 --> 05:45:14.758
I will switch back to my voice 
kit and see if everything is 

05:45:14.759 --> 05:45:16.759
working fine there.

05:45:18.415 --> 05:45:21.411
Can we switch to demo? 

05:45:46.551 --> 05:45:53.963
Give it a second.  Should be ...
yes?  Oh, ... sorry for the 

05:45:53.964 --> 05:45:55.964
glitch.

05:45:57.424 --> 05:45:59.424
I think I am booting up my 
machine here.

05:46:06.583 --> 05:46:12.915
Yes.  And it's live.  So before 
you start, you want to kind of 

05:46:12.916 --> 05:46:16.406
know -- ensure that you have 
everything running for you.  So 

05:46:16.407 --> 05:46:19.681
things like let's say you are 
connected to network.  This 

05:46:19.682 --> 05:46:21.682
could be either a wired network 

05:46:24.761 --> 05:46:26.196
or wireless network or tething 
to your phone.  To have a 

05:46:26.197 --> 05:46:29.261
connection. 
Voice kit needs to be connected 

05:46:29.262 --> 05:46:31.262
to Internet.

05:46:33.530 --> 05:46:35.530
It is using the Google Assistant
and 

05:46:36.635 --> 05:46:38.635
speech API for recognition 
purpose.

05:46:40.291 --> 05:46:42.291
So let's see if my -- sorry.

05:46:43.944 --> 05:46:45.944
This is my Wi-Fi, but I'm not 
using Wi-Fi.

05:46:49.005 --> 05:46:51.712
Let me see if I am online.

05:46:57.492 --> 05:46:59.492
And ... 

05:47:11.472 --> 05:47:14.721
Good, it looks like I'm all set 
from an Internet point of view. 

05:47:14.722 --> 05:47:16.722
I will see if the speakers, if 
the audio is working fine.

05:47:19.623 --> 05:47:23.505
The kit audio is working fine.  
&gt;&gt; Front, center. 

05:47:24.326 --> 05:47:26.326
&gt;&gt; SEBASTIAN TRZCINSKI-CLEMENT: 
Seems okay.

05:47:28.004 --> 05:47:30.441
I will see if it rec -- 
&gt;&gt; DUSHYANTSINH JADEJA: Let me 

05:47:30.442 --> 05:47:34.336
see if it recognizes my voice.
Testing, one, two, three. 

05:47:37.179 --> 05:47:39.001
&gt;&gt; Testing, one, two, three. 
&gt;&gt; DUSHYANTSINH JADEJA: Seems to

05:47:39.002 --> 05:47:44.117
be okay.
I am almost set.  The good 

05:47:44.118 --> 05:47:48.409
thing, voice kit comes with some
of the prebuilt demos as well.  

05:47:48.410 --> 05:47:50.451
It is good to kind of know -- 
see if those are also working 

05:47:50.452 --> 05:47:52.472
fine before you kind of start 
building yourself.  

05:47:58.029 --> 05:48:00.073
So if you go to the Pi directory
and look at voice examples.

05:48:03.277 --> 05:48:05.277
Which is

05:48:08.441 --> 05:48:10.441
here and I'm just going to try 
this 

05:48:12.069 --> 05:48:14.069
library 

05:48:23.580 --> 05:48:25.580
demo.

05:48:29.847 --> 05:48:32.128
Ok Google, what's time right 
now?  Okay? 

05:48:38.697 --> 05:48:40.987
Okay.  Let me try one more time.

05:48:45.620 --> 05:48:47.620
Or let me try

05:48:51.678 --> 05:48:53.678
with this one.  

05:49:04.126 --> 05:49:06.126
Hey Google, what's time right 
now?

05:49:12.193 --> 05:49:14.193
&gt;&gt; SEBASTIAN TRZCINSKI-CLEMENT: 
Just a bit shy.  

05:49:20.625 --> 05:49:23.685
&gt;&gt; DUSHYANTSINH JADEJA: Okay. 
We'll try one more time, 

05:49:23.686 --> 05:49:25.686
otherwise, I'll 

05:49:26.933 --> 05:49:28.933
walk you through what it does at
this point in time.

05:49:29.378 --> 05:49:31.378
Whenever I say something -- 
okay.

05:49:33.056 --> 05:49:35.056
Hey Google, what's the time 
right now?  

05:49:35.712 --> 05:49:37.712
&gt;&gt; 

05:49:40.183 --> 05:49:42.465
&gt;&gt; Google: It's 1:50.  
&gt;&gt; DUSHYANTSINH JADEJA: Thank 

05:49:42.466 --> 05:49:46.349
you.  So you can try bunch of 
things.  What I was doing, I was

05:49:46.350 --> 05:49:48.350
just testing if it things are 
working fine.

05:49:51.044 --> 05:49:53.719
Now, of course, at this point in
time, you can ask a bunch of 

05:49:53.720 --> 05:49:56.991
other questions, like, you know,
hey Google, what's the distance 

05:49:56.992 --> 05:49:58.992
to moon?

05:50:03.961 --> 05:50:08.084
Okay.  But at this point in 
time, what it would have done is

05:50:08.085 --> 05:50:10.085
it would have you know, looked 
at some of the services 

05:50:12.779 --> 05:50:14.625
available online, try to FEFRN 
an answer for you and display to

05:50:14.626 --> 05:50:16.626
you.

05:50:18.333 --> 05:50:21.171
-- fetch an answer for you and 
display to you.  Things are 

05:50:21.172 --> 05:50:23.172
seeming to be okay.

05:50:24.259 --> 05:50:26.259
Let me see if it could -- if it 
can build something.

05:50:27.711 --> 05:50:29.711
I will go back to presentation.

05:50:33.081 --> 05:50:35.081
Can we go back to slides?

05:50:37.366 --> 05:50:39.366
Yeah, the device -- it is always
good 

05:50:41.443 --> 05:50:43.674
to see if -- if device is 
working fine, before you kind of

05:50:43.675 --> 05:50:45.675
start building by yourself.

05:50:47.545 --> 05:50:49.777
I have built a typical shopping 
experience.  Hopefully it should

05:50:49.778 --> 05:50:51.778
work fine.  But let's see.

05:50:55.269 --> 05:50:58.138
Given my setup was not optimal. 
But let's give it one more shot.

05:51:03.700 --> 05:51:06.691
Can we switch to demo?  

05:51:17.575 --> 05:51:19.575
The Google was showing mostly 
about, 

05:51:22.782 --> 05:51:23.803
you giving a come up to Google 
Assistant saying shop for 

05:51:23.804 --> 05:51:26.643
something.  It was trying to 
identify a text, 

05:51:32.427 --> 05:51:34.427
calling the API from eBay, I 
believe, 

05:51:36.737 --> 05:51:39.427
and search the result and send 
it as an e-mail.  I tried to 

05:51:39.428 --> 05:51:41.428
mimic similar behavior.

05:51:47.448 --> 05:51:49.448
And let's see if I can -- if 
demo gods are with me ... 

05:52:06.796 --> 05:52:09.105
I will ask for maybe shop 
something.  Mother's Day is 

05:52:09.106 --> 05:52:11.950
coming up, I won't be in town, I
want to send something to my 

05:52:11.951 --> 05:52:17.265
mom.  I was thinking what is an 
interesting thing?  The 

05:52:17.266 --> 05:52:19.308
smartwatch is a big thing.  I 
thought maybe I will give her a 

05:52:19.309 --> 05:52:23.605
smartwatch.  Let's see if I can 
find a smartwatch using my voice

05:52:23.606 --> 05:52:25.606
kit.  

05:52:29.722 --> 05:52:31.722
Hey Google, shop for smartwatch.
Cool.  

05:52:36.265 --> 05:52:38.265
&gt;&gt; Google: Done.  

05:52:43.202 --> 05:52:44.212
. 
&gt;&gt; DUSHYANTSINH JADEJA: If you 

05:52:44.213 --> 05:52:46.454
look at what it did, it 
recognized my voice or 

05:52:49.907 --> 05:52:51.944
my command and kind of connected
to the particular service and 

05:52:51.945 --> 05:52:53.945
displayed some of 

05:52:55.202 --> 05:52:57.238
the smartwatches available for 
me to purchase.  At this point 

05:52:57.239 --> 05:52:59.886
in time, I could take this 
output, send an e-mail like what

05:53:01.927 --> 05:53:03.953
Sebastian was mentioned or if I 
have a smart display device, I 

05:53:03.954 --> 05:53:05.954
could basically, 

05:53:07.625 --> 05:53:09.475
you know, post it there or give 
a nice visual, list, okay, these

05:53:09.476 --> 05:53:11.476
are some of 

05:53:12.526 --> 05:53:14.526
the things or engage it more in 
relation 

05:53:15.528 --> 05:53:17.528
to 

05:53:20.467 --> 05:53:23.568
that.  Can we move back to 
slides?  

05:53:25.802 --> 05:53:27.425
I was trying to emphasize, there
is a lot of things possible with

05:53:27.426 --> 05:53:29.426
the voice, that you can play 
around with it.  

05:53:31.084 --> 05:53:33.317
You can also not just look at 
the software as a one side of 

05:53:33.318 --> 05:53:35.787
it, but also experiment with 
some of the things on the 

05:53:35.788 --> 05:53:37.788
hardware.

05:53:40.513 --> 05:53:42.513
Let's say, we have seen people 
now 

05:53:44.016 --> 05:53:46.016
taking old toys and putting the 
voice 

05:53:48.330 --> 05:53:49.975
kits or other AI kits and revive
the bodies or bring life to the 

05:53:49.976 --> 05:53:51.976
toys.

05:53:54.009 --> 05:53:56.009
We have seen people

05:53:58.808 --> 05:54:00.808
customize voice kits, there are 
people° 

05:54:03.100 --> 05:54:05.138
gimmicks, giving voice to a 
rumba vacuum.  Tell them don't 

05:54:05.139 --> 05:54:07.410
go to this side of the house, 
but go to different house 

05:54:07.411 --> 05:54:09.411
section.

05:54:10.863 --> 05:54:13.351
Or can completely custom voice 
actions.  Tons of things are 

05:54:13.352 --> 05:54:16.013
possible.  If you want to know 
more about what is 

05:54:19.708 --> 05:54:21.708
there, you can follow us on 
Instagram or 

05:54:23.809 --> 05:54:25.809
Twitter or follow the discussion
on reddit.  

05:54:28.076 --> 05:54:30.116
With that, I will invite Bill to
know more about what is 

05:54:30.117 --> 05:54:32.560
happening on vision kit.  
(Applause) .

05:54:42.975 --> 05:54:45.652
&gt;&gt; Bill: Thank you.

05:54:49.344 --> 05:54:50.778
I will continue on with the 
second part, that is the vision 

05:54:50.779 --> 05:54:53.882
kit. 
The vision kit is a new product.

05:54:57.792 --> 05:55:00.030
It is being released end of last
year, we had a new version 

05:55:00.031 --> 05:55:02.031
update the first quarter of this
year.

05:55:04.924 --> 05:55:06.981
The latest version is 1.1.  It 
launches in December of last 

05:55:06.982 --> 05:55:08.982
year.

05:55:11.802 --> 05:55:15.930
It has the latest Raspberry Pi 
0.  And it is on the board.

05:55:19.189 --> 05:55:20.608
It doesn't have the early 
version to solve yourself.  It 

05:55:20.609 --> 05:55:22.609
is much easier. 

05:55:25.772 --> 05:55:27.772
It comes with the Raspberry Pi 
version 2 

05:55:31.307 --> 05:55:33.307
and the Google made visson 
bonnet.

05:55:35.662 --> 05:55:37.662
That is where it is all put in 
the product. 

05:55:38.104 --> 05:55:39.747
Most of the unique things of the
particular product, it doesn't 

05:55:39.748 --> 05:55:45.282
require you to connect to 
Internet.  You can work with the

05:55:45.283 --> 05:55:50.405
vision recognition software in 
the box by itself alone.  Before

05:55:50.406 --> 05:55:52.406
we start, go through the list 

05:55:54.274 --> 05:55:55.902
of materials that Dushyantsinh 
did with the voice kit.  Similar

05:55:55.903 --> 05:55:57.903
thing.

05:56:01.655 --> 05:56:03.655
It has the Raspberry Pi zero.  

05:56:05.135 --> 05:56:07.135
And Google has this vision 
bonnet, it 

05:56:10.691 --> 05:56:12.123
contains the Intel vision 
recognition processor, which has

05:56:12.124 --> 05:56:14.565
the power to help you do the 
vision recognition.

05:56:16.401 --> 05:56:18.401
In addition to that, the camera 
support 

05:56:20.685 --> 05:56:23.329
and the connections to the 
Raspberry Pi cable connector, 

05:56:23.330 --> 05:56:25.330
and has the general 

05:56:28.048 --> 05:56:29.487
purpose input, output, GPIO 
connector to allow you to do 

05:56:29.488 --> 05:56:31.488
more things, which I will cover 
shortly.  

05:56:37.079 --> 05:56:39.938
And also, it has the cryptochip 
to help you encrypt and add more

05:56:39.939 --> 05:56:42.381
securities in it terms of the 
application.  

05:56:45.840 --> 05:56:47.840
There on -- it also has the 
button and 

05:56:48.924 --> 05:56:50.924
the cardboard form to allow you 
to fold the device. 

05:56:51.564 --> 05:56:53.564
On the software side, the 
operating 

05:56:56.265 --> 05:56:58.329
system the same, it runs on the 
Linux ras bian system.

05:57:01.394 --> 05:57:03.031
It includes the flow, with the 
inception, and mobile net 

05:57:03.032 --> 05:57:05.032
software.

05:57:07.120 --> 05:57:09.120
It is on the device which allow 
you to 

05:57:10.578 --> 05:57:12.630
build AI models to work with the
device to do applications in AI.

05:57:15.286 --> 05:57:16.946
It has the built in software for
facial recognition and the 

05:57:16.947 --> 05:57:18.947
general object recognition.

05:57:20.642 --> 05:57:23.473
All of the software is on the 
device ready to use. 

05:57:26.120 --> 05:57:28.120
And in terms of its component, 
let me 

05:57:29.175 --> 05:57:29.754
get into more detail, because 
this is a relatively new 

05:57:29.755 --> 05:57:32.431
product.  On the hardware level,
at the bottom, 

05:57:36.293 --> 05:57:38.293
the Raspberry Pi zero.

05:57:39.944 --> 05:57:40.756
As I said, it has the built in 
Wi-Fi and Bluetooth support.  

05:57:40.757 --> 05:57:42.757
So you can connect to the 
Internet if 

05:57:46.294 --> 05:57:47.709
you want, without a cable, with 
Wi-Fi connection to the 

05:57:47.710 --> 05:57:49.710
Internet.

05:57:51.416 --> 05:57:53.416
It has GPIO connection which 
allows it 

05:57:54.421 --> 05:57:56.421
to

05:57:57.513 --> 05:57:59.513
connect directly with the flex 
cable to 

05:58:01.791 --> 05:58:03.791
the Google vision bonnet vision 
bowl.

05:58:05.901 --> 05:58:07.901
That connects to the camera and 
the accessories like L.E.D.

05:58:10.054 --> 05:58:12.054
and push button and the buzzer. 

05:58:14.120 --> 05:58:16.170
There is a piece of buzzer on 
the device that as your 

05:58:16.171 --> 05:58:18.171
application necessary you can 
have it generate sound.

05:58:24.283 --> 05:58:26.283
On the software side, it runs on
the

05:58:31.934 --> 05:58:33.934
same ras bian Linux system.

05:58:35.197 --> 05:58:37.197
It has the Python interpreter on
top of that.  

05:58:38.239 --> 05:58:39.673
In Google, the software we put 
together contain three different

05:58:39.674 --> 05:58:42.115
modules, if you will, in terms 
of the vision process.

05:58:48.019 --> 05:58:50.019
The first is the TensorFlow 
module, 

05:58:52.311 --> 05:58:54.311
that does the inception and then
the 

05:58:56.661 --> 05:59:00.311
software and then the object 
recognition software.  With the 

05:59:00.312 --> 05:59:02.312
software and hardware, you 

05:59:03.375 --> 05:59:05.209
have the application interface 
with the components.  This is 

05:59:05.210 --> 05:59:07.210
how everything put together.  
Okay?  

05:59:11.999 --> 05:59:13.825
Then let me go through the same 
process Dushyantsinh mentioned 

05:59:13.826 --> 05:59:18.708
with the voice kit. 
First you assemble it.  In terms

05:59:18.709 --> 05:59:20.709
of assembly, very similar.

05:59:22.385 --> 05:59:25.456
You have the box, it has parts, 
cardboard, whatever.  As you can

05:59:25.457 --> 05:59:27.457
see on the screen, in terms 

05:59:28.736 --> 05:59:30.736
of processprocess building, it 
is easy. 

05:59:32.283 --> 05:59:34.919
You hook up the Raspberry Pi, 
with the vision cable, hook them

05:59:34.920 --> 05:59:36.920
together, stick 

05:59:39.614 --> 05:59:41.614
them together, fold the 
cardboard box.

05:59:43.267 --> 05:59:45.344
Almost like in the engine in a 
car, hook up the button, this is

05:59:45.345 --> 05:59:47.345
it.

05:59:48.619 --> 05:59:50.855
First time I build, 40-something
minutes.  Second time, only 20 

05:59:50.856 --> 05:59:56.207
minutes.  Very simple.  I have a
product for myself.  I made a 

05:59:56.208 --> 05:59:59.722
video tutorial for how to 
assemble it on YouTube.  For 

05:59:59.723 --> 06:00:00.936
those that don't want to read 
the instruction, you can watch 

06:00:00.937 --> 06:00:05.046
the video.  But it is very 
simple, very easy.  Okay?  

06:00:07.705 --> 06:00:10.160
So to assemble that, you can 
have in less than an hour build 

06:00:10.161 --> 06:00:12.161
a device like that.  
Okay.

06:00:13.652 --> 06:00:16.530
In terms of setup, this is very 
simple.  As I said, this does 

06:00:16.531 --> 06:00:21.192
not necessarily need to hook up 
to Internet.  So the connection 

06:00:21.193 --> 06:00:24.667
is all you need is a power 
supply.  Have a power supply 

06:00:24.668 --> 06:00:26.668
connect to it, and you are ready
to go.

06:00:30.393 --> 06:00:31.617
And because of the facial 
recognition software built into 

06:00:31.618 --> 06:00:33.618
the device, after 

06:00:34.673 --> 06:00:36.673
you power it up, it will 
automatically 

06:00:37.719 --> 06:00:40.371
run the facial detection 
software.  Right now, on the 

06:00:40.372 --> 06:00:42.372
desk, I have this vision bonnet 
with me.

06:00:45.711 --> 06:00:47.711
And as you can see, the top 
L.E.D. 

06:00:48.368 --> 06:00:50.368
blue light, the button is 
lighted up.

06:00:52.067 --> 06:00:54.520
If I point this to my face, as 
you can see, the blue light 

06:00:54.521 --> 06:00:56.759
indicating the camera is 
capturing my face.  

06:01:00.878 --> 06:01:02.909
If I show to the camera with a 
smiley face, the happy face, the

06:01:02.910 --> 06:01:04.957
light color of the L.E.D. 
will change to yellow.

06:01:08.260 --> 06:01:13.057
And if I am showing a frowning 
face, it will go back to blue.  

06:01:13.058 --> 06:01:16.054
Let me demonstrate this.  

06:01:19.189 --> 06:01:24.936
Can everybody see?  It changes 
the color.  Let me say.  This is

06:01:24.937 --> 06:01:27.033
not some kind of magic.  It is 
AI and working. 

06:01:29.940 --> 06:01:31.940
What happen, it is a software 
inside 

06:01:34.663 --> 06:01:36.081
with the AI TensorFlow model 
with the facial recognition that

06:01:36.082 --> 06:01:38.082
I will get to in 

06:01:39.158 --> 06:01:40.016
a minute, to make a facial 
recognition software just like 

06:01:40.017 --> 06:01:44.769
that.  It doesn't have much of a
set up.  Just power it on, hook 

06:01:44.770 --> 06:01:48.025
up the power, you can do the 
facial recognition.  This demo 

06:01:48.026 --> 06:01:50.026
is called joy detection. 

06:01:52.915 --> 06:01:54.961
It is part of a project thatthat
-- part of a product we ship 

06:01:54.962 --> 06:01:56.962
with the device.

06:01:58.684 --> 06:02:01.142
Set up is easy, how to make your
own solutions.  There is a lot 

06:02:01.143 --> 06:02:05.671
of software you can do.  Let me 
do another demo.  Please switch 

06:02:05.672 --> 06:02:11.167
the screen to the output of my 
other device.  Do we have 

06:02:11.168 --> 06:02:13.168
output?

06:02:39.072 --> 06:02:41.072
We lost the signal.  Don't power
down.  

06:02:41.508 --> 06:02:43.508
I'm plugged in if.  

06:02:51.534 --> 06:02:53.781
All right.  I apologize for the 
connection glitch.

06:02:57.256 --> 06:02:59.528
As you can see now, I am running
the Raspbian software system, it

06:02:59.529 --> 06:03:03.004
is a window showing the 
software.  Let me, by starting a

06:03:03.005 --> 06:03:05.005
simple demo, 

06:03:06.215 --> 06:03:08.215
which is

06:03:10.157 --> 06:03:12.420
the object classification.  What
you can see is the right-hand 

06:03:15.264 --> 06:03:18.138
side, the camera, video image 
coming captured by the camera.

06:03:23.928 --> 06:03:26.583
And on the table, I have the 
apple, banana and Coke can.  

06:03:26.584 --> 06:03:30.032
Random object I put together. 
You can see on the left side of 

06:03:30.033 --> 06:03:34.784
the screen, the output stream 
out, starting put on the screen,

06:03:34.785 --> 06:03:36.785
which is by the object 
classification software that we 

06:03:37.445 --> 06:03:39.682
put on the device.  
I'm going to explain all of that

06:03:39.683 --> 06:03:44.159
in a minute.  First let me do a 
demo.  I will point this to 

06:03:44.160 --> 06:03:46.160
banana.

06:03:47.853 --> 06:03:49.853
You should see on the left-hand 
of the 

06:03:50.931 --> 06:03:52.145
screen, it will say -- it detect
this object, a banana, I hope.  

06:03:52.146 --> 06:03:54.146
 Right?

06:03:58.096 --> 06:04:00.096
Now, if I point this to apple, 
not 

06:04:01.589 --> 06:04:03.589
only it will recognize it's an 
apple, in 

06:04:05.084 --> 06:04:07.084
fact, it should say granny 
Smith, it 

06:04:08.632 --> 06:04:11.066
actually recognize the type of 
the apple.  And I tried it 

06:04:11.067 --> 06:04:13.067
earlier.

06:04:18.474 --> 06:04:20.474
I point it toward the Coca-Cola 
can.

06:04:21.940 --> 06:04:23.940
If it is a punching bag, it is 
red color.

06:04:26.373 --> 06:04:29.343
It looks like this.  Let me stop
the application, make this 

06:04:32.954 --> 06:04:34.954
window bigger.

06:04:40.714 --> 06:04:42.714
And as you can see on the left 

06:04:45.884 --> 06:04:47.127
side, the first number, it is 
object recognize, it says 

06:04:47.128 --> 06:04:49.596
banana.  
The number after that is the 

06:04:49.597 --> 06:04:51.597
confidence score.

06:04:53.717 --> 06:04:55.717
How confident the AI think this 
is 

06:04:57.632 --> 06:04:58.863
banana or similarly an apple, 
which is granny Smith apple.  

06:04:58.864 --> 06:05:03.548
This confidence level tells you 
the recognition part, it is 

06:05:03.549 --> 06:05:05.549
truly the object it detects.

06:05:07.626 --> 06:05:10.473
These numbers, this feedback 
from the software, you can use 

06:05:10.474 --> 06:05:12.474
to make a lot of applications.  
Okay?

06:05:14.590 --> 06:05:19.307
Let's switch back to the slides.
So this image on the screen, you

06:05:19.308 --> 06:05:21.308
can see very similar.

06:05:22.977 --> 06:05:25.020
It recognized the object along 
with a confidence score.  You 

06:05:25.021 --> 06:05:27.076
can use this number to help you 
design your applications. 

06:05:31.354 --> 06:05:35.892
So exactly what can you do with 
a vision kit?  Number one, you 

06:05:35.893 --> 06:05:37.893
can see it already does the 
object detection.  

06:05:39.365 --> 06:05:41.436
And it has the facial detection,
it is all software built into 

06:05:41.437 --> 06:05:43.437
it.

06:05:47.766 --> 06:05:49.766
So through API you can leverage 
these.

06:05:53.063 --> 06:05:55.063
It takes photo, and send the 
output.

06:05:56.558 --> 06:05:58.558
It has the ability to tell 
difference 

06:06:00.279 --> 06:06:02.516
between apple, banana and bunch 
of other stuff.  Most 

06:06:02.517 --> 06:06:04.517
importantly, as demonstrate, you

06:06:06.817 --> 06:06:09.501
can run your own AI machine 
learning software in this 

06:06:09.502 --> 06:06:11.502
device, by building 

06:06:12.543 --> 06:06:14.783
your own customized TensorFlow 
model.  Some may think, how do I

06:06:14.784 --> 06:06:19.524
do that?  It is a bit of 
confusion with the TensorFlow 

06:06:19.525 --> 06:06:21.525
model, powerful stuff, how do 
you do that?  

06:06:22.600 --> 06:06:25.269
Let me introduce to you the 
process of how do you do your 

06:06:25.270 --> 06:06:29.944
customized model.  First of all,
the first, number one, every 

06:06:29.945 --> 06:06:32.594
machine learning model you build
in TensorFlow, you are building 

06:06:32.595 --> 06:06:36.727
a model to train.
Specify and train your own model

06:06:36.728 --> 06:06:42.634
is the first step.  The second, 
just like any other TensorFlow 

06:06:42.635 --> 06:06:44.635
model, you get the end 

06:06:46.724 --> 06:06:48.724
results, you do an export model 
to a 

06:06:51.403 --> 06:06:53.301
so-called GrecianGrecian -- 
frozen graph.  

06:06:53.302 --> 06:06:55.765
There is there own format.  
That is not understood by the 

06:06:55.766 --> 06:07:00.075
vision bonnet hardware.  Okay?
So somehow we need to make a 

06:07:00.076 --> 06:07:02.076
match.

06:07:03.765 --> 06:07:05.765
That next step is the so-called 
compiler.

06:07:07.650 --> 06:07:09.650
Google provide this Google model
compiler.

06:07:11.366 --> 06:07:13.366
You take the frozen graph, 
binary code 

06:07:14.630 --> 06:07:16.474
run it through the compartment 
you generate called your own 

06:07:16.475 --> 06:07:18.475
customized computer graph.  

06:07:20.382 --> 06:07:22.411
The artifact is the end result 
is going through the three steps

06:07:22.412 --> 06:07:25.481
you have a binary file. 
That file defines your machine 

06:07:25.482 --> 06:07:27.482
learning model.

06:07:30.606 --> 06:07:33.456
On the hardware side we have 
Raspberry Pi and vision bonnet, 

06:07:33.457 --> 06:07:35.457
there is the 

06:07:36.709 --> 06:07:38.777
vision program, you use the API,
send the graph to the vision 

06:07:38.778 --> 06:07:43.491
bonnet, next step, write code, 
you can look at our tutorials 

06:07:43.492 --> 06:07:45.492
and example models, coding a 

06:07:47.374 --> 06:07:49.619
model function, basically, send 
this computer graph into the 

06:07:49.620 --> 06:07:54.310
vision bonnet.  In this case, 
the computer graph and vision 

06:07:54.311 --> 06:07:56.311
bonnet match, they understood 
what is going on.  

06:07:57.562 --> 06:07:59.562
Then you have a camera coming in
the stream of the inputs.  

06:08:01.455 --> 06:08:03.719
The inputs are coming as a 
binary number.  Because of the 

06:08:03.720 --> 06:08:05.720
computer graph, we 

06:08:06.795 --> 06:08:09.480
arrange these inputs into 
whatever the machine learning 

06:08:09.481 --> 06:08:12.579
test is.  
Which is basically a bunch of 

06:08:13.589 --> 06:08:15.589
multidimensional arrays.

06:08:19.529 --> 06:08:21.529
So next step is you need to 
match this 

06:08:23.500 --> 06:08:25.500
tensor, a bunch of arrays, to 
the image with your model.

06:08:27.492 --> 06:08:29.308
This is what we call the 
computing.  Basically, the step 

06:08:29.309 --> 06:08:31.309
is you are writing 

06:08:32.602 --> 06:08:34.602
a program, you have this vision 
bonnet 

06:08:36.251 --> 06:08:38.277
hardware and it does the 
calculation and will send the 

06:08:38.278 --> 06:08:40.278
signal to the output.  
Here's the code.

06:08:42.983 --> 06:08:46.888
How do you define your face 
object, as you can see?  The 

06:08:46.889 --> 06:08:49.156
face object is defined with the 
bonnet box, the score.

06:08:52.662 --> 06:08:54.662
You write the argument code.

06:08:56.344 --> 06:08:58.825
You send it as a structure and 
say, in my model, I need this 

06:08:58.826 --> 06:09:03.110
four.  This four number matches 
the machine.  And finding the 

06:09:03.111 --> 06:09:05.784
application code, you say let me
get results from this tensor, 

06:09:09.471 --> 06:09:11.120
where is the score, the face 
score, whatever, you take that 

06:09:11.121 --> 06:09:13.606
to your end result. 
You can make a decision, you can

06:09:13.607 --> 06:09:17.674
say the score is based on some 
number, above some number, 

06:09:17.675 --> 06:09:20.368
change my color light.
This is exactly what you do, in 

06:09:20.369 --> 06:09:22.369
terms of 

06:09:23.436 --> 06:09:25.298
using your own model with the 
vision kit.  

06:09:25.299 --> 06:09:28.168
All right. 
So with that, talk about 

06:09:28.169 --> 06:09:31.027
extending your project.  We talk
about software, how about 

06:09:31.028 --> 06:09:33.028
hardware?

06:09:34.682 --> 06:09:36.682
On the AIY board, there is the 
area, with the additional pings.

06:09:38.760 --> 06:09:40.760
With the pings you can control 
output, 

06:09:42.253 --> 06:09:44.490
turn on lights, turn on fans, 
something is making noise, 

06:09:44.491 --> 06:09:46.592
whatever you can do.  With these
things you can expand your 

06:09:48.232 --> 06:09:50.911
project and with the controller 
on board, you can do those 

06:09:50.912 --> 06:09:52.912
things.

06:09:55.043 --> 06:09:57.043
So hardwarehardware-wise, we can
do those things. 

06:09:58.934 --> 06:10:01.154
We go through these, talk about 
how to assemble, set up and do 

06:10:01.155 --> 06:10:03.829
your own things.  Most 
importantly, I want to say to 

06:10:03.830 --> 06:10:08.534
use AIY, the power really is 
connected to many of the 

06:10:08.535 --> 06:10:10.535
services Google provide, 

06:10:12.802 --> 06:10:15.474
like Google Assistant, 
TensorFlow, leverage the power 

06:10:15.475 --> 06:10:17.475
of the service behind you.

06:10:18.842 --> 06:10:20.842
AIY, part of global open source 
community.

06:10:24.145 --> 06:10:26.145
We publish this, Github, 
Raspberry Pi, 

06:10:29.674 --> 06:10:30.685
work with others, immerse 
yourself with online communities

06:10:30.686 --> 06:10:33.363
around the world.  This is part 
of the fun of the building 

06:10:33.364 --> 06:10:37.236
makers.  I want to take this 
opportunity to tell everybody, 

06:10:37.237 --> 06:10:41.179
the audience, those of you from 
the U.S., you can join a contest

06:10:41.180 --> 06:10:45.095
going on right now.  
Organized by texter with the 

06:10:46.723 --> 06:10:48.760
administration of China, the 
young U.S. China makers contest.

06:10:51.850 --> 06:10:54.525
The winners get an all-expense 
paid trip to China.  Those of 

06:10:54.526 --> 06:10:57.198
you in the room, you are 
American makers, please join 

06:10:57.199 --> 06:10:59.199
this contest.

06:11:01.056 --> 06:11:02.705
And more details on hackster 
website.  

06:11:02.706 --> 06:11:08.039
All right.  The key take away 
from our talk today with 

06:11:08.040 --> 06:11:09.897
Sebastian, Dushyantsinh 
mentioned in their part of the 

06:11:09.898 --> 06:11:11.898
talk and mine.

06:11:13.922 --> 06:11:15.922
Key take away is

06:11:18.347 --> 06:11:20.881
resource-wise, it is this 
address.  The kits can be 

06:11:20.882 --> 06:11:22.882
purchased at target store in the
U.S.

06:11:24.619 --> 06:11:25.838
And also, next weekend, in the 
Bay Area, there is a makers 

06:11:25.839 --> 06:11:31.126
fair.  Those of you in the area,
join in the makers fair, you can

06:11:31.127 --> 06:11:33.127
get the kits from the makers 
fair.

06:11:35.872 --> 06:11:37.717
Learning, using Raspberry Pi and
Python programming is part of 

06:11:37.718 --> 06:11:41.009
the thing you need to get 
yourself involved to expand your

06:11:41.010 --> 06:11:43.010
applications.

06:11:46.299 --> 06:11:49.149
And using TensorFlow learning 
model to learn the power of AI 

06:11:49.150 --> 06:11:52.043
into the application.  That is 
the power of AIY.  

06:11:55.098 --> 06:11:56.527
Finally, to summary -- I will 
say call to action, things you 

06:11:56.528 --> 06:11:58.528
can do.  Everyone can do.

06:12:01.035 --> 06:12:03.035
Get a kit and start building, 
having fun, of course.

06:12:05.132 --> 06:12:07.132
And learning many Google 
services.

06:12:10.431 --> 06:12:12.431
At Google I/O, we have sessions 
on 

06:12:13.705 --> 06:12:15.149
Google Cloud, Google Assistant, 
and TensorFlow, learn those 

06:12:15.150 --> 06:12:17.150
knowledge and skills.

06:12:18.216 --> 06:12:20.280
Get different sensors, controls,
hook up to the ports on the 

06:12:20.281 --> 06:12:22.964
devices.  You can build a lot of
applications, 

06:12:26.424 --> 06:12:28.424
in the leverage of the AI 
capabilities.

06:12:30.322 --> 06:12:32.322
Lastly, joining online 
communities.

06:12:35.895 --> 06:12:38.744
We will develop a global 
exchange, and put your device on

06:12:38.745 --> 06:12:42.643
that, so with that, along with 
Sebastian and Dushyantsinh, we 

06:12:42.644 --> 06:12:44.644
want to thank you for coming, 
joining 

06:12:45.906 --> 06:12:47.337
our session today, start your 
AIY journey today. 

06:12:47.338 --> 06:12:49.338
Thank you very much.  

06:12:54.260 --> 06:12:56.260
(Applause) (Session concluded)  
.  

06:13:00.338 --> 06:13:02.975
&gt;&gt; Thank you for joining this 
session, brand ambassadors will 

06:13:02.976 --> 06:13:04.976
assist with 

06:13:06.306 --> 06:13:08.306
directing you through the 
designated exits. 

06:13:09.170 --> 06:13:09.996
We'll be making room for those 
that registered for the next 

06:13:09.997 --> 06:13:11.997
session.

06:13:15.914 --> 06:13:17.914
If you registered for this 
section in 

06:13:19.820 --> 06:13:22.256
this room -- for the next 
session in this room, we ask 

06:13:22.257 --> 06:13:24.257
that you exit and return to the 
lines outside.  Thank you.  

06:13:31.249 --> 06:13:31.649
.  
.  

06:13:31.650 --> 06:13:32.284
.  
.  

06:13:32.285 --> 06:13:33.094
.  
.  

06:13:33.095 --> 06:13:33.937
.  
.  

06:13:33.938 --> 06:13:34.751
.  
.  

06:13:34.752 --> 06:13:35.559
.  
.  

06:13:35.560 --> 06:13:36.385
.  
.  

06:13:36.386 --> 06:13:37.404
.  
.  

06:13:37.405 --> 06:13:39.405
.

06:22:07.884 --> 06:22:10.173
Android Jetpack.  What's new in 
Android Support Library.  

06:29:07.789 --> 06:29:09.789
&gt;&gt; Good afternoon, everyone.  

06:29:11.879 --> 06:29:13.879
Thank you for joining us at 
Android I/O.

06:29:15.975 --> 06:29:19.422
You are looking at what's new in
the Android library.  If you 

06:29:19.423 --> 06:29:22.276
were looking for sandwiches, you
didn't go far enough.  And 

06:29:22.277 --> 06:29:24.277
everyone is still here.

06:29:27.325 --> 06:29:29.325
I'm Alan Viverette. 

06:29:32.297 --> 06:29:34.297
&gt;&gt; AURIMAS LIUTIKAS: I'm 
AurimasAurimas. 

06:29:37.011 --> 06:29:39.467
&gt;&gt; KATHY KAM: And I'm Kathy Kam.
&gt;&gt; ALAN VIVERETTE: We'll talk 

06:29:39.468 --> 06:29:43.347
about what you can look forward 
to in the future.  On this 

06:29:43.348 --> 06:29:45.597
beautiful day, we will talk 
about spring cleaning and talk 

06:29:45.598 --> 06:29:47.598
about technical debt building up
in the Support Library.  

06:29:54.853 --> 06:29:56.905
We're on Twitter, stock 
overflow, on reddit, maybe on 

06:29:56.906 --> 06:29:59.189
reddit a little too much.  We 
noticed basic aspects of the 

06:30:01.856 --> 06:30:04.081
Support Library that were a 
little bit messy.  So we reached

06:30:04.082 --> 06:30:06.082
out, spoken with developers, 
tried to find out ways to 

06:30:07.544 --> 06:30:10.380
improve the basics of Support 
Library and lay a strong 

06:30:10.381 --> 06:30:15.921
foundation for future work.  We 
got a lot of good feedback.  

06:30:15.922 --> 06:30:17.983
Some high level, some very 
specific, we know about the 

06:30:17.984 --> 06:30:19.984
issues with the 

06:30:21.264 --> 06:30:23.910
showing and hiding the I, me. 
We drilled down to the basics.

06:30:27.365 --> 06:30:28.777
We have got feedback on the 
maven packaging.  The artifact 

06:30:28.778 --> 06:30:33.472
package names.  The Java 
packages have become confusing 

06:30:33.473 --> 06:30:36.398
as Support Library has aged.  
In general, we built up a lot of

06:30:37.412 --> 06:30:42.124
technical debt.  So like last 
year, we will talk about what is

06:30:42.125 --> 06:30:47.024
old in the Android Support 
Library first.

06:30:50.893 --> 06:30:52.314
We 20ed on 2011 with -- started 
in 2011 with support before.  

06:30:59.493 --> 06:31:00.307
We provided backward support for
SD4, the first version.  

06:31:00.308 --> 06:31:02.308
We grew.

06:31:03.577 --> 06:31:05.577
We had watch components, car 

06:31:07.860 --> 06:31:09.860
components, testing, for SDK13, 
4, 11.

06:31:11.609 --> 06:31:12.614
We have a lot more than just 
backwards compatibility now.  

06:31:12.615 --> 06:31:18.157
But we still got the artifact 
names.  So we have support V4.

06:31:18.158 --> 06:31:20.796
Everyone is familiar with that 
V13.

06:31:25.481 --> 06:31:28.368
Who knows what is in support 
V13?  Literally less than 10 

06:31:28.369 --> 06:31:31.434
people.  Aurimas knows.  

06:31:35.295 --> 06:31:37.295
So support V13 at this moment 
contains nothing.

06:31:38.603 --> 06:31:43.098
Because the minimum SDK for 
everything is 14.  It redirects 

06:31:43.099 --> 06:31:47.378
to V4 and that redirects to 
other components.  These are 

06:31:47.379 --> 06:31:50.447
umbrella artifacts on maven.  
Why do we have all the weird 

06:31:50.448 --> 06:31:53.736
versioning names in the maven 
artifacts and package names?  

06:31:53.737 --> 06:31:58.850
They're kind of hard to change, 
but these are confusing.  It is 

06:31:58.851 --> 06:32:00.121
not a great place to start if 
you are new to Android 

06:32:00.122 --> 06:32:03.977
development.  We also have a lot
of versions of all of the 

06:32:03.978 --> 06:32:06.218
libraries.  
Recommendation is something that

06:32:06.219 --> 06:32:08.219
was 

06:32:09.232 --> 06:32:11.343
added in 2003 and hasn't 
changed.

06:32:14.414 --> 06:32:17.675
We have 30 versions of the 
basically exact same library.  

06:32:17.676 --> 06:32:19.676
What does the versioning scheme 
mean here?

06:32:23.366 --> 06:32:25.366
Well, 24, means it was released 
when SDK 24 came out.

06:32:27.035 --> 06:32:28.667
We had an Alpha one 
corresponding with the first 

06:32:28.668 --> 06:32:30.668
public release.

06:32:33.607 --> 06:32:35.607
Alpha 2, beta 1, DP3.

06:32:36.648 --> 06:32:39.083
It doesn't make sense to 
correspond to just the I/O 

06:32:39.084 --> 06:32:41.548
releases.  Wouldn't it be great 
to have Alpha and 

06:32:46.006 --> 06:32:48.851
beta releases for each and 
wouldn't it be great to not have

06:32:48.852 --> 06:32:50.852
to do that for 

06:32:51.924 --> 06:32:53.924
every library, even if it didn't
change?

06:32:56.130 --> 06:33:00.961
You may have seen a 24.00, that 
didn't have beta testing.  Maybe

06:33:00.962 --> 06:33:04.257
you found bugs that should have 
been in Alpha.  We have been 

06:33:04.258 --> 06:33:06.258
better with testing, 

06:33:08.134 --> 06:33:10.585
wouldn't it be great if the 
dot-zero releases wouldn't still

06:33:10.586 --> 06:33:13.448
Alpha quality?  
Today we will focus on fixing 

06:33:13.449 --> 06:33:18.124
how we structure our libraries, 
how we handle changes to them, 

06:33:18.125 --> 06:33:21.835
and how we shift them to 
developers.  We use this to form

06:33:21.836 --> 06:33:23.836
the foundation for 

06:33:25.726 --> 06:33:27.726
Jetpack, and we're calling it 
Android 

06:33:31.229 --> 06:33:33.229
extension libraries, or Android 
X for short.

06:33:34.304 --> 06:33:35.928
Welcome to what's new in 
AndroidX, we'll talk about 

06:33:35.929 --> 06:33:38.415
foundational changes, new 
features, what to expect from us

06:33:38.416 --> 06:33:40.893
in the future. 
First, I would like to talk 

06:33:40.894 --> 06:33:44.761
about the relationship between 
Jetpack, which everyone may 

06:33:44.762 --> 06:33:47.196
remember from the keynote and 
AndroidX.  

06:33:50.694 --> 06:33:52.928
So Jetpack is a set of guidance,
recommended libraries, tools and

06:33:52.929 --> 06:33:57.396
this is going to teach you how 
to create good apps.  This may 

06:33:57.397 --> 06:33:59.397
include libraries that are in 
AndroidX.

06:34:00.899 --> 06:34:04.379
This may eventually include 
libraries not in AndroidX.  As 

06:34:04.380 --> 06:34:07.246
guidance changes and evolves you
may see some things in AndroidX 

06:34:07.247 --> 06:34:09.706
are deprecated and no longer 
part of the Jetpack 

06:34:09.707 --> 06:34:12.369
recommendations.  Also it has 
this cute logo.  

06:34:13.806 --> 06:34:15.806
AndroidX on the other hand is 
the libraries themselves.  

06:34:19.135 --> 06:34:21.207
These are guaranties about 
versioning, API, dependency 

06:34:21.208 --> 06:34:26.300
structure, we do not have a cute
logo.  Let's dive into details. 

06:34:26.301 --> 06:34:28.301
What is going to be changing?

06:34:34.027 --> 06:34:36.259
We'll have logical, smaller, 
more scoped artifacts.  If you 

06:34:36.260 --> 06:34:39.103
are looking for view pager, it 
will be in the view pager 

06:34:39.104 --> 06:34:42.563
artifact rather than support V4.
You may remember the split last 

06:34:42.564 --> 06:34:45.870
year, where we split to core UI 
and a number of other artifacts.

06:34:48.119 --> 06:34:50.561
We have done that again this 
year, we have smaller artifacts,

06:34:50.562 --> 06:34:54.841
if you need view pager, just 
pull in view pager, not a bunch 

06:34:54.842 --> 06:34:56.842
of other widgets you may not 
need.

06:34:58.358 --> 06:35:00.358
This is nonbreaking, like the 
split we did last year.

06:35:04.325 --> 06:35:07.193
If you pull in support VV4, you 
get the core view libraries, and

06:35:07.194 --> 06:35:09.633
UI, you get everything else.  
But you have the option of 

06:35:09.634 --> 06:35:12.508
pulling in just exactly what you
need.  

06:35:14.154 --> 06:35:16.154
Here's a split of the libraries.
This is just a sample.

06:35:19.340 --> 06:35:21.393
You see that support compat is 
broken down into selections.  

06:35:21.394 --> 06:35:26.110
This is a pure Java library.  
This is a jar instead of AAR.  

06:35:26.111 --> 06:35:28.559
No resources, you can use it 
with host tests.  Because it 

06:35:28.560 --> 06:35:31.012
doesn't have any dependencies on
the Android package.

06:35:34.913 --> 06:35:37.363
Core is the backwards 
compatibility that you are used 

06:35:37.364 --> 06:35:40.027
to from support V4.  You will 
see less of the compat 

06:35:43.714 --> 06:35:45.566
moniker in the future, as 
AndroidX is becoming the primary

06:35:45.567 --> 06:35:48.017
development surface for a lot of
framework API.  

06:35:50.679 --> 06:35:52.679
So here you can see, if you need
swipe 

06:35:53.957 --> 06:35:56.426
refresh layout, you pull in 
exactly that, you don't get 

06:35:56.427 --> 06:35:58.241
anything you didn't need. 
We also move to versioning that 

06:35:58.242 --> 06:36:01.927
makes more sense.  
Instead of monolithic releases 

06:36:01.928 --> 06:36:03.928
tied to 

06:36:05.614 --> 06:36:07.666
Google I/O, we will reset from 
28 to 1.0.  And the major 

06:36:07.667 --> 06:36:09.667
version number now actually 
means something.

06:36:12.753 --> 06:36:13.971
So previously, we would break 
binary compatibility on any 

06:36:13.972 --> 06:36:17.862
minor version bump.  If you are 
using a library that depends on 

06:36:17.863 --> 06:36:20.501
a specific version of Support 
Library, this can be really 

06:36:20.502 --> 06:36:24.999
problematic.  You may not find 
out until run time that some 

06:36:25.000 --> 06:36:27.000
method signature that a 

06:36:28.118 --> 06:36:30.118
library depends on has changed 
or move 

06:36:31.181 --> 06:36:33.036
to strict semantic versioning, 
means you can expect the version

06:36:33.037 --> 06:36:35.037
number to indicate binary 
compatibility.  

06:36:36.095 --> 06:36:42.625
Anything in a 1.4 version of the
library -- anything with the 1.4

06:36:42.626 --> 06:36:44.626
dependency on a library, for 
example, 

06:36:48.692 --> 06:36:50.692
would be compatible to 1.

06:36:52.668 --> 06:36:54.328
5 up to 2.0.  
Instead of monolithic release, 

06:36:54.329 --> 06:36:56.329
if we 

06:36:58.018 --> 06:37:00.467
have a bug fix for recycler.  
You only pull in one new 

06:37:00.468 --> 06:37:02.468
artifact, and if you don't need 
it you don't have to pull it in.

06:37:04.585 --> 06:37:07.247
It will be low effort on the 
part of the developer.  

06:37:07.473 --> 06:37:10.949
All right.  We want to make it 
easy to know what is inside each

06:37:10.950 --> 06:37:12.950
artifact.

06:37:14.833 --> 06:37:16.833
As I mention, the maven 
artifacts are 

06:37:18.941 --> 06:37:21.379
finer scoped, correspond to 
features, rather than broad 

06:37:21.380 --> 06:37:23.380
swaths of -- for 

06:37:24.660 --> 06:37:26.660
example, all of support V4.

06:37:27.741 --> 06:37:29.582
We have consistent scheme of 
AndroidX feature, package and 

06:37:29.583 --> 06:37:31.583
class according to layer and 
functionality.

06:37:33.846 --> 06:37:35.846
The maven naming scheme reflects
this.  

06:37:36.909 --> 06:37:38.909
Group I.D.

06:37:41.230 --> 06:37:43.230
is the corresponding to the Java
package.

06:37:45.328 --> 06:37:46.338
If there is a subfeature, for 
example, recycler view 

06:37:46.339 --> 06:37:48.339
selection.  

06:37:50.242 --> 06:37:52.718
There is the recycler view, 
colon, recycler view, dash, 

06:37:52.719 --> 06:37:54.719
selection.

06:37:59.392 --> 06:38:01.529
We moved all the V7, V4 explicit
backwards compatible or 

06:38:06.585 --> 06:38:11.190
explicit combile SDK compiles.  
And we make the heavy use of the

06:38:15.098 --> 06:38:19.836
requires API annotation.  There 
may be a return new object.  May

06:38:19.837 --> 06:38:21.265
see something that returns 
compat and something with the 

06:38:21.266 --> 06:38:24.309
actual object and you can recall
that if you are on a newer 

06:38:24.310 --> 06:38:27.828
platform.  
All right.  So let's dive into 

06:38:27.829 --> 06:38:31.083
an example of that.  
Here's an example of some 

06:38:31.084 --> 06:38:33.084
libraries that you may already 
be using.

06:38:36.832 --> 06:38:38.861
Unifying UFRG on the AndroidX 
top level package.  Everything 

06:38:38.862 --> 06:38:40.862
that is under that support 

06:38:41.946 --> 06:38:43.946
is in the droid extension 
library.  

06:38:45.840 --> 06:38:48.702
Everything is that is in 
support, is in the Android 

06:38:48.703 --> 06:38:50.703
extension library.

06:38:52.369 --> 06:38:54.602
Android afternoon persistence 
room is just room.  When you are

06:38:54.603 --> 06:38:58.266
looking for room, you can find 
it quickly.  

06:39:02.151 --> 06:39:04.151
Dig down on support compat and 
cardboard specifically.  

06:39:06.824 --> 06:39:09.666
Build compat is moved from an 
explicit V4 support to Android 

06:39:09.667 --> 06:39:11.667
core OS build compat.

06:39:13.192 --> 06:39:15.192
In the future you will see less 
of the compat suffix on classes.

06:39:19.975 --> 06:39:22.210
Card V7 is card viewed widget, 
you will see other supporting 

06:39:22.211 --> 06:39:26.347
classes in card view dot utill, 
expect.  So hopefully this isn't

06:39:26.348 --> 06:39:28.348
too shocking.

06:39:30.247 --> 06:39:32.920
I think this is a very long 
awaited refactoring we have been

06:39:32.921 --> 06:39:36.182
wanting to do for a long time.  
You might wonder, how do we get 

06:39:36.183 --> 06:39:40.877
that?  We will hand over to 
Aurimas, he'll walk you through 

06:39:40.878 --> 06:39:43.326
what it looks like to migrate 
your application. 

06:39:44.557 --> 06:39:48.009
&gt;&gt; AURIMAS LIUTIKAS: Hello 
there.  Thanks, Alan.  I will 

06:39:48.010 --> 06:39:50.254
walk you through the migration 
story and how to get to the 

06:39:50.255 --> 06:39:52.255
AndroidX library usage.

06:39:54.167 --> 06:39:56.009
First things first, if you are 
using Android Studio, we will 

06:39:56.010 --> 06:39:58.010
provide an automated tool for 
migrating over.

06:40:02.336 --> 06:40:03.554
This tool is available starting 
with 3.2, canary 14 that shipped

06:40:03.555 --> 06:40:05.555
yesterday.

06:40:08.305 --> 06:40:10.305
The automated tool -- well ...

06:40:11.779 --> 06:40:13.779
this automated tool will be in 
the 

06:40:14.824 --> 06:40:17.468
existing refactory menu that you
probably, hopefully love, what 

06:40:17.469 --> 06:40:20.563
we added is a new option called 
refactored to AndroidX.

06:40:22.240 --> 06:40:24.502
This single click will go and 
identify all the usages of 

06:40:24.503 --> 06:40:26.971
Android Support Library, old 
classes and pull them up in 

06:40:30.650 --> 06:40:32.687
the review pane, where you can 
see what has changed, what we're

06:40:32.688 --> 06:40:34.688
about to migrate for you.

06:40:36.403 --> 06:40:39.897
After review, you click do 
refactor and we will refactor.  

06:40:39.898 --> 06:40:41.898
What this will handle, it will 
handle 

06:40:43.769 --> 06:40:45.480
your source code, encoding the 
classes, handle simple build 

06:40:45.481 --> 06:40:47.481
scripts, unless you have 
something more complex, in which

06:40:49.806 --> 06:40:51.806
case we will publish maps of old

06:40:53.090 --> 06:40:55.142
artifact to the new artifact, 
you can do migration in a more 

06:40:55.143 --> 06:40:59.823
manual way.  Migration will 
handle resources such as layout 

06:40:59.824 --> 06:41:01.824
files.

06:41:03.775 --> 06:41:05.775
And finally, but not least, what
you 

06:41:07.026 --> 06:41:09.026
will have is we will handle 
migration of 

06:41:11.296 --> 06:41:14.159
binary dependances, AR and JARs.
Many of you use third party 

06:41:14.160 --> 06:41:16.601
libraries that department on 
support, glide and many other 

06:41:16.602 --> 06:41:21.107
libraries.  To help you with 
that, we wrote a tool called 

06:41:21.108 --> 06:41:23.108
jetifier.

06:41:24.785 --> 06:41:27.219
This tool performs binary 
translation using ASM, which 

06:41:27.220 --> 06:41:29.220
jumps into the jar, 

06:41:30.297 --> 06:41:31.744
goes and rewrites the uses of 
the old Support Library to 

06:41:31.745 --> 06:41:34.821
become the new Support Library. 
This handles code inside of the 

06:41:34.822 --> 06:41:36.822
jar, 

06:41:39.732 --> 06:41:41.732
it handles XML and proprogard 
files and 

06:41:43.223 --> 06:41:45.251
we will publish a stand alone 
jar to run manually, if you 

06:41:45.252 --> 06:41:47.945
would like checked in versions 
of the prebuilds that you depend

06:41:47.946 --> 06:41:52.839
on.  Now let's jump to the 
laptop, where I will give you a 

06:41:52.840 --> 06:41:54.879
demo of how this tool works.
Hopefully the demo works 

06:41:54.880 --> 06:41:56.880
beautifully.

06:42:03.512 --> 06:42:06.167
Here we go.  Jump to the laptop.
Right.

06:42:10.858 --> 06:42:12.858
Here, you're looking at Topeka 
Android app.

06:42:13.756 --> 06:42:16.620
It is available on the Google 
samples Github page.  Nothing 

06:42:16.621 --> 06:42:19.268
super amazing, it is using 
standard components and showing 

06:42:19.269 --> 06:42:21.714
examples of how it works.  I am 
running this app.

06:42:23.347 --> 06:42:25.836
It works, you can click on 
things.  Now, what we will do, 

06:42:25.837 --> 06:42:27.837
we will jump 

06:42:29.323 --> 06:42:31.569
into the refactory menu, hit the
refactor to AndroidX.

06:42:34.639 --> 06:42:36.639
What it will do is jump in and 
find 

06:42:38.960 --> 06:42:40.589
uses of the old support classes 
and all the other places we 

06:42:40.590 --> 06:42:44.523
migrate.  After it is done 
searching, it will present all 

06:42:44.524 --> 06:42:47.818
the things that it will suggest 
for you to migrate.  In this 

06:42:47.819 --> 06:42:50.689
case, I am looking at the 
specific sign-in fragment class,

06:42:50.690 --> 06:42:54.409
you can see uses of Support 
Library.  What will happen when 

06:42:54.410 --> 06:42:56.410
I do refactor.

06:42:57.454 --> 06:42:59.115
It will rewrite all of these, 
including build script files, 

06:42:59.116 --> 06:43:01.116
everything.

06:43:03.447 --> 06:43:05.888
Of course, Gradle will need to 
sync again because we have the 

06:43:05.889 --> 06:43:07.889
dependences 

06:43:09.407 --> 06:43:11.407
and the clasp apps will be 
loaded.

06:43:13.317 --> 06:43:16.562
Twiddle your things, wait for 
studio notes to do its thing.  

06:43:16.563 --> 06:43:20.447
Now we have new stuff.  When I 
hit build and install, hopefully

06:43:20.448 --> 06:43:23.300
in a few seconds, at home you 
would grab a coffee, here we 

06:43:23.301 --> 06:43:27.015
can't do that on the stage, it 
will install it on the emulator.

06:43:27.016 --> 06:43:31.092
It will install later by saying 
other words.  Ta-da!  

06:43:33.535 --> 06:43:35.535
Now you see this is the same 
app, 

06:43:39.072 --> 06:43:41.072
usationion -- using a brand-new 
AndroidX library.  

06:43:43.362 --> 06:43:45.041
And the migration was fairly 
painless.  Let's jump back to 

06:43:45.042 --> 06:43:48.141
the slides.  
(Applause) .  

06:43:51.197 --> 06:43:54.662
All right, some of you are not 
usingusing Android Studio.

06:43:57.711 --> 06:43:59.555
For those we will provide a 
giant file for the mapping from 

06:43:59.556 --> 06:44:02.414
the old class to the new class. 
That with the jetifier tool, you

06:44:04.274 --> 06:44:06.274
should be able to hook up in the
build 

06:44:07.404 --> 06:44:08.833
system and IDE to do the 
migration manually if you are 

06:44:08.834 --> 06:44:11.712
using studio.  In summary, we're
providing the tools 

06:44:15.164 --> 06:44:17.164
in Android Studio 3.2, canary 
14, and jetifier is already in 

06:44:17.653 --> 06:44:19.653
Google maven.

06:44:21.134 --> 06:44:23.602
However, this is coming in 
really hot.  Even the demo that 

06:44:23.603 --> 06:44:28.514
I was using is actually not 
using canary 14, it is using 

06:44:28.515 --> 06:44:30.364
canary 15, shipping next week, 
because we found bugs when 

06:44:30.365 --> 06:44:33.673
trying to do the demo.  So 
please wait until canary 15 to 

06:44:34.500 --> 06:44:36.940
start using this.  But when you 
do, in canary 15, please 

06:44:40.841 --> 06:44:43.715
take a look at it, try to 
migrate your projects.  If you 

06:44:43.716 --> 06:44:47.861
find issues, file bugs.  We want
to make this as easy as possible

06:44:47.862 --> 06:44:49.900
and want you to migrate and 
start using all the new stuff.  

06:44:49.901 --> 06:44:51.948
However, you know migration 
takes time.

06:44:55.633 --> 06:44:58.093
We will still ship Android 
Support Library 28.0, alongside 

06:44:58.094 --> 06:45:00.724
AndroidX.  
However, note, this is the last 

06:45:00.725 --> 06:45:02.967
feature release.  This is kind 
of like a little bit of a 

06:45:06.433 --> 06:45:08.433
time line for you to kind of 
move forward.  

06:45:09.692 --> 06:45:11.736
If you want to know more about 
how this works behind the scenes

06:45:11.737 --> 06:45:13.839
inside of Android Studio, there 
will be a talk 

06:45:17.763 --> 06:45:21.032
about Android build system at 
6:30 in this room.  Hopefully 

06:45:21.033 --> 06:45:24.735
you can take a look at that.  
So it is not all about 

06:45:24.736 --> 06:45:27.820
refactoring, we added new 
features.  I will talk you -- 

06:45:27.821 --> 06:45:31.125
walk you through some of these. 
The first feature I want to talk

06:45:31.126 --> 06:45:35.210
about is the ricycler view 
selection.  This is a library 

06:45:35.211 --> 06:45:37.211
that will allow you to handle 
item selection easier.

06:45:39.941 --> 06:45:42.014
It will help you handle motion 
and touch events and convert 

06:45:42.015 --> 06:45:45.899
them into selection in the 
recycler view.  This is a 

06:45:45.900 --> 06:45:48.380
flexible library where it allows
for custom layout managers and 

06:45:49.612 --> 06:45:51.660
custom actions to do.  Let's 
jump through and see how you use

06:45:51.862 --> 06:45:53.862
it.

06:45:54.926 --> 06:45:57.599
As you can imagine, you have new
dependency to the build dot 

06:45:57.600 --> 06:46:00.453
Gradle file.  The important 
thing is we are using the 

06:46:00.454 --> 06:46:03.319
AndroidX artifact.  
This is the same stuff that Alan

06:46:03.320 --> 06:46:06.610
was talking about.  So for the 
set up, what you need to 

06:46:09.867 --> 06:46:11.867
do, you want to create a new 
layout and new adaptor.  

06:46:13.380 --> 06:46:15.380
The adaptor, important thing is 
use stable I.D.

06:46:16.681 --> 06:46:18.681
We are using a stock grid layout
manager.

06:46:19.794 --> 06:46:22.639
We set both of these are on the 
recycler view.  No selection 

06:46:22.640 --> 06:46:24.640
code yet, we're doing the basic 
recycler set up.

06:46:28.623 --> 06:46:30.623
The adaptor, as I said, nothing 
super exciting. 

06:46:30.694 --> 06:46:32.694
The important thing is doing 
stable I.D.

06:46:33.141 --> 06:46:35.141
This allows consistent mapping 
from the I.D. to the item.  

06:46:36.210 --> 06:46:38.210
Next, when we jump back to the 
activity, 

06:46:39.686 --> 06:46:41.970
we set up selections library key
provider.  This, in conjunction 

06:46:41.971 --> 06:46:44.860
with the stable I.D., will allow
for a quick mapping between the 

06:46:44.861 --> 06:46:48.930
I.D. and the items that will 
handle the selection by the 

06:46:48.931 --> 06:46:51.790
selection library.  And now, 
what we need to set up is the 

06:46:54.052 --> 06:46:55.698
selection tracker, which 
actually is the actual machinery

06:46:55.699 --> 06:46:57.699
behind the scenes.  

06:46:59.586 --> 06:47:01.447
And we pass in recycler view, 
the key provider, both of these 

06:47:01.448 --> 06:47:03.448
we created and my details look 
up.

06:47:06.128 --> 06:47:07.150
This my details look up is a 
simple class.  Override one 

06:47:07.151 --> 06:47:09.784
method.  
On the side of that one, you 

06:47:09.785 --> 06:47:12.854
return item details.  That 
returns the position and the 

06:47:16.958 --> 06:47:18.958
selection key for the item that 
is for the given motion event.

06:47:22.483 --> 06:47:24.483
Finally, recycler view has no 
default selection mechanism.

06:47:26.386 --> 06:47:28.386
What you have to do is handle it
on bind.  

06:47:28.803 --> 06:47:31.102
There you might want to change 
the background of the view or 

06:47:31.103 --> 06:47:34.834
use it by setting activated 
state.  To get activated state 

06:47:34.835 --> 06:47:38.773
working, you use background for 
the view.  And the background is

06:47:38.774 --> 06:47:43.253
a selectable drawable that has 
activated state, which will 

06:47:43.254 --> 06:47:47.130
allow to indicate to user that 
the item has been selected.  So 

06:47:47.131 --> 06:47:49.131
this is the basics.  This 
library has a lot more.

06:47:52.839 --> 06:47:54.496
You can set up band selection, 
you can add custom selection 

06:47:54.497 --> 06:47:56.497
areas.

06:47:57.576 --> 06:47:59.576
You can have items that are not 
square.

06:48:00.845 --> 06:48:02.845
You can have circular handling, 
stuff like that.  

06:48:03.505 --> 06:48:05.547
There is a lot you can do with 
this library.  The important 

06:48:05.548 --> 06:48:07.813
part of this slide, that is my 
dog Jack.  

06:48:08.242 --> 06:48:12.370
All right.  Another thing we 
added to recycler view is list 

06:48:12.371 --> 06:48:17.072
adapter.  What this does for you
is helps you to work the 

06:48:17.073 --> 06:48:19.600
recycler views that change the 
content over time.  What you 

06:48:19.601 --> 06:48:21.601
need to do, all you need to do 
is submit the new list.

06:48:25.923 --> 06:48:27.565
We run the dif utill tools in 
the background and run the 

06:48:27.566 --> 06:48:29.566
animation based on how the list 
is changed.

06:48:33.501 --> 06:48:35.518
This is handled simply via VI.  
I will walk you through. 

06:48:37.391 --> 06:48:39.391
You have the dif call back.  
It has to implement two methods.

06:48:41.262 --> 06:48:43.350
First, make sure the items are 
the same where you compare the 

06:48:43.351 --> 06:48:45.177
item I.D.
On the second one, check that 

06:48:45.178 --> 06:48:48.875
the content is the same, where 
you do a deeper comparison.  

06:48:48.876 --> 06:48:52.773
Essentially equals in Java.  
And in there, if there is a 

06:48:52.774 --> 06:48:56.070
change, we'll know how to 
process your item from one to 

06:48:56.071 --> 06:49:01.425
the next.  And then the adapter,
what you need to do is call get 

06:49:01.426 --> 06:49:03.426
item, and you do your regular 
binding.

06:49:05.142 --> 06:49:07.010
And that is all you need to do 
to get the animation working.  

06:49:07.011 --> 06:49:10.879
And then, a highly complex code 
in the activity.  Call submit 

06:49:10.880 --> 06:49:15.993
list.  The list.  That is it, 
you are done.  Note, this works 

06:49:15.994 --> 06:49:17.994
really well, the live 

06:49:20.276 --> 06:49:23.362
data and RX Java observables.  
So if you need to do slightly 

06:49:23.363 --> 06:49:25.363
more 

06:49:27.886 --> 06:49:30.317
advanced dapter, we have a base 
adapter called list adapter.  Go

06:49:30.318 --> 06:49:35.467
into that.  If you want to know 
about list dapter and similar 

06:49:35.468 --> 06:49:37.468
utilities, see managing 

06:49:38.769 --> 06:49:41.453
lists, the recycler page talk on
Thursday at 2:30.  

06:49:44.127 --> 06:49:46.127
Another thing we added is 
AndroidX web kit library.  

06:49:47.625 --> 06:49:50.459
What it allows you to do is get 
the API that we added in web 

06:49:50.460 --> 06:49:53.110
view on the older versions in 
the backwards compatible way.

06:49:57.745 --> 06:50:00.492
This library works on API and 
newer.

06:50:03.955 --> 06:50:06.854
Take an example of safe 
browsing, that we added this API

06:50:06.855 --> 06:50:08.855
27.

06:50:10.519 --> 06:50:11.745
This prevents loading of 
malicious URL in the web view.  

06:50:14.999 --> 06:50:17.641
Previously could only use it on 
API 27 and newer.  Now you can 

06:50:17.642 --> 06:50:19.642
use it on older devices.  

06:50:21.937 --> 06:50:22.963
So similarly, we will add a 
Gradle dependency to get it 

06:50:22.964 --> 06:50:27.047
working.  Again, looking at 
AndroidX artifacts.  Hopefully 

06:50:27.048 --> 06:50:29.137
you got this by now.  Then we 
will check if the feature is 

06:50:29.138 --> 06:50:31.138
available.

06:50:33.421 --> 06:50:37.949
If it is, we will start safe 
browsing.  As simple as that.  

06:50:37.950 --> 06:50:39.950
You get the experience of safe 
browsing.  

06:50:43.449 --> 06:50:45.449
Similarly, many other APIs we 
have added 

06:50:47.167 --> 06:50:50.827
will become backwards applicable
available to the application.  

06:50:50.828 --> 06:50:53.712
You will hopefully check this 
out. 

06:50:57.833 --> 06:51:01.494
Another library we real estate  
-- renamed is custom tabs.  This

06:51:01.495 --> 06:51:03.495
will work with browsers that 

06:51:05.598 --> 06:51:08.447
implement this, Chrome, Firefox,
Samsung, all of them use this.  

06:51:08.448 --> 06:51:10.448
If you use it, it will continue 
to work. 

06:51:10.896 --> 06:51:12.896
The cool thing, we added a 
feature 

06:51:14.991 --> 06:51:17.655
inside of the library, called 
browser actions.  It allows you 

06:51:17.656 --> 06:51:19.656
to hook into the context menu of
the browser.  

06:51:21.151 --> 06:51:23.151
For example, now your reddit app
can 

06:51:24.420 --> 06:51:26.420
finally open links in a cog 
nitto tab, which can be handy.

06:51:32.382 --> 06:51:33.394
It works in Chrome with 66 and 
other browsers when they adopt 

06:51:33.395 --> 06:51:36.493
it.  To use this, it is fairly 
simple.  

06:51:40.516 --> 06:51:42.516
You set up intents.

06:51:45.109 --> 06:51:47.574
Pending intents for browser 
action items.  This is optional,

06:51:47.575 --> 06:51:49.575
if you don't need 

06:51:52.336 --> 06:51:53.354
extra ones in the dig -- 
dialogue, you can skip this 

06:51:53.355 --> 06:51:58.873
part.  Another option to set up 
is browser action tracking.  So 

06:51:58.874 --> 06:52:01.712
what this allows you to do is 
see what user ended up selecting

06:52:01.713 --> 06:52:03.713
inside of the dialogue.

06:52:06.204 --> 06:52:08.853
And finally, you just fire up 
the browser action dialogue.  

06:52:08.854 --> 06:52:10.854
And you end up with something 
like this.  

06:52:10.910 --> 06:52:13.560
And you can do, you know, 
additional actions for yourself,

06:52:13.561 --> 06:52:15.561
or hook into the 

06:52:17.077 --> 06:52:19.544
browser, whereas previously, you
weren't able to do this via 

06:52:19.545 --> 06:52:21.545
simple attempts 

06:52:22.790 --> 06:52:24.790
because the

06:52:26.441 --> 06:52:28.441
browsers weren't interested in 
the functionality.

06:52:29.942 --> 06:52:31.942
This is HEIF writers.

06:52:33.407 --> 06:52:35.407
We introduced this in Android P.

06:52:37.635 --> 06:52:39.635
We are launching this

06:52:41.817 --> 06:52:46.749
library.  It is allowing the 
writing to the file.  It is not 

06:52:46.750 --> 06:52:48.818
super useful, but we're working 
on a back port to allow you to 

06:52:50.679 --> 06:52:52.679
use it on older versions.  
Again, usage is simple.

06:52:57.271 --> 06:52:59.271
Fire up the builder to create a 
new HEIF writer.

06:53:01.755 --> 06:53:03.755
You can set up options, image 
size, 

06:53:05.660 --> 06:53:09.373
quality, hit built, and once you
have it, write into it.  You put

06:53:09.374 --> 06:53:12.872
in bit maps, you write it out to
disk.  You call stop, the 

06:53:12.873 --> 06:53:17.585
time-out can be 0, if you want 
an indefinite wait.  The 

06:53:17.586 --> 06:53:19.586
important part here is you want 
to 

06:53:20.841 --> 06:53:23.722
do this work off the UI frame 
because you do a disk.  To tell 

06:53:23.723 --> 06:53:26.420
you more about other features in
AndroidX, I invite Kathy.  

06:53:26.421 --> 06:53:28.421
Thanks.  
(Applause) .  

06:53:32.185 --> 06:53:34.826
&gt;&gt; KATHY KAM: Thanks, Aurimas.
So the next feature I want to 

06:53:34.827 --> 06:53:36.827
talk about 

06:53:38.089 --> 06:53:40.089
that we added in AndroidX is 
slices.

06:53:41.193 --> 06:53:43.419
Slices is a feature to allow you
to display content outside of 

06:53:43.420 --> 06:53:45.420
the app.

06:53:47.346 --> 06:53:50.001
The goal here is to have one 
reuse able API that the system 

06:53:50.002 --> 06:53:52.500
and other apps can request 
content from your app.

06:53:56.868 --> 06:53:58.868
Today, we have already 
integrated a search.

06:54:02.237 --> 06:54:04.237
I will look in integration with 
-- 

06:54:04.682 --> 06:54:07.566
even home screen in the future. 
This content is templated and 

06:54:07.567 --> 06:54:09.628
interactive.  It is templated so
when you have kind 

06:54:14.570 --> 06:54:16.195
of live content, you can display
it in a rich and flexible 

06:54:16.196 --> 06:54:18.671
layout.  The content is 
interactive, because we 

06:54:25.368 --> 06:54:27.368
allow you to add existing 
controls like

06:54:28.513 --> 06:54:30.513
sliders, toggles, scroll viewer.

06:54:31.585 --> 06:54:33.585
And you can have live data or 
deep 

06:54:35.089 --> 06:54:37.089
links into your app.  

06:54:38.970 --> 06:54:40.970
You can choose to integrate your
slices with search.

06:54:44.718 --> 06:54:47.388
So a user can see -- display app
content by searching the app 

06:54:47.389 --> 06:54:51.473
name or even general terms that 
you register.  This is a win-win

06:54:51.474 --> 06:54:53.474
for users and the 

06:54:55.799 --> 06:54:57.799
apps because users can get rich 
live data immediately.

06:55:00.513 --> 06:55:02.991
And for your app to reach 
millions of users.  Because it 

06:55:02.992 --> 06:55:04.992
is implemented in AndroidX, 

06:55:06.050 --> 06:55:07.888
it is usable immediately up to 
API 19.  Let's look at how you 

06:55:07.889 --> 06:55:10.759
can use it.  
So as you would expect, we have 

06:55:10.760 --> 06:55:15.697
to first import the libraries.  
Three libraries to import.  Here

06:55:15.698 --> 06:55:18.335
we import from AndroidX.  The 
first is the slice builders, 

06:55:21.427 --> 06:55:24.271
includes methods to build 
content in a templated format.  

06:55:24.272 --> 06:55:26.272
The next library is the slice 
view.  

06:55:27.551 --> 06:55:29.551
This contents methods to present
the content.

06:55:30.597 --> 06:55:33.439
The last library to import is 
slices core, that contains 

06:55:33.440 --> 06:55:36.318
methods for permissions.  To 
build a slice, define a slice, 

06:55:39.193 --> 06:55:41.689
implement the slice, handle the 
slice action.  Let's look at how

06:55:41.690 --> 06:55:43.690
we can do it.

06:55:45.811 --> 06:55:47.650
The first thing to do is let the
plot system or other apps know 

06:55:47.651 --> 06:55:51.359
you have slices to provide.  
You do that by implementing your

06:55:51.360 --> 06:55:53.360
slice provider.

06:55:55.050 --> 06:55:57.050
You register your slice provider
in 

06:55:58.096 --> 06:56:00.373
the Android dot manifest file.  
Next, extend from the slice 

06:56:00.374 --> 06:56:02.374
provider and implement your 
slice provider.

06:56:05.541 --> 06:56:07.973
You can have multiple slices for
your app.  This is where the 

06:56:07.974 --> 06:56:09.974
business logic happens.

06:56:11.277 --> 06:56:13.277
When a platform or other app 
wants to 

06:56:14.948 --> 06:56:16.948
get your slices you get a call 
on unbind slice.

06:56:18.407 --> 06:56:20.222
There, you get a call with the 
URI of the slice being requested

06:56:20.223 --> 06:56:23.896
and you have to return your 
slice immediately.  So any 

06:56:23.897 --> 06:56:26.559
content that needs to be loaded 
should be kicked off.  You will 

06:56:26.560 --> 06:56:28.744
return it in build slice.  So 
let's take a deeper look.

06:56:33.741 --> 06:56:34.771
We will construct the slice 
here.

06:56:34.772 --> 06:56:36.772
And we are able to construct it 
with 

06:56:39.327 --> 06:56:41.353
several builder classes, 
including rope builder, red rope

06:56:41.354 --> 06:56:45.875
builder and list builder.  Take 
a look. 

06:56:49.174 --> 06:56:51.174
Here we'll use a list builder 
for a simple header.

06:56:53.800 --> 06:56:56.299
You will see it adds the header.
To build on top of it, we will 

06:56:56.300 --> 06:56:59.359
see the grid row builder.  
First the latest weather 

06:56:59.360 --> 06:57:01.998
information and we can loop 
through it, adding a cell to 

06:57:05.482 --> 06:57:08.407
the grid row builder, by calling
add grid row at the bottom, with

06:57:08.408 --> 06:57:10.408
the rest of the slice to the 
header.

06:57:13.729 --> 06:57:15.772
What you get here is that based 
on screen real estate, if it is 

06:57:15.773 --> 06:57:17.773
small, it will show a shortcut 
slice.

06:57:21.493 --> 06:57:24.739
With the shortcut slice pick up 
an image from the slice.  

06:57:24.740 --> 06:57:27.191
Because you have a weather image
it will pick it up, if you 

06:57:27.192 --> 06:57:29.192
didn't, it will show the app 
icon.

06:57:32.338 --> 06:57:35.005
If it is only a small slice, 
that is the head shown, finally,

06:57:35.006 --> 06:57:38.274
with enough space, it will show 
the full slice.  To learn more 

06:57:38.275 --> 06:57:40.923
about the slices, there was a 
topic this morning that you can 

06:57:40.924 --> 06:57:45.801
review.  But I only covered very
basic of it, you can learn more 

06:57:45.802 --> 06:57:47.870
about templates, permission, 
integrating search in the other 

06:57:47.871 --> 06:57:51.139
talk.  
You can also meet the team at 

06:57:51.140 --> 06:57:53.140
the office 

06:57:54.823 --> 06:57:56.887
hour tent tomorrow morning at 
10:30.  The next topic I want to

06:57:56.888 --> 06:57:58.888
talk about is material 
components.

06:58:01.175 --> 06:58:03.175
We launchlaunched material 
components 

06:58:04.861 --> 06:58:07.098
for Android in library 28.00 
Alpha in March and launched for 

06:58:07.504 --> 06:58:09.504
AndroidX yesterday.

06:58:11.994 --> 06:58:13.636
So as you know, material theming
is designed for great user 

06:58:13.637 --> 06:58:17.731
experience and made a lot of 
improvements since 0.  One of 

06:58:17.732 --> 06:58:19.732
the first things we have done 

06:58:22.223 --> 06:58:24.674
as part of the AndroidX 
refactoring is stead of just an 

06:58:24.675 --> 06:58:26.675
Android dot support 

06:58:28.384 --> 06:58:31.098
design, it is moved to Google 
material.  We have done a lot of

06:58:31.099 --> 06:58:33.099
extensive 

06:58:35.432 --> 06:58:38.922
usability studies on how to make
the widgets helpful.  We have 

06:58:38.923 --> 06:58:41.095
updated styling, so you can 
better express your brand and 

06:58:41.096 --> 06:58:43.929
include a new UI component.  
Let's take a look. 

06:58:46.596 --> 06:58:48.596
Here's an overview of the 
theming capability.

06:58:51.687 --> 06:58:53.687
On the right, a very brand 
agnostic baseline.

06:58:55.154 --> 06:58:57.592
On the left, the Google 
brandedbranded.  All the 

06:58:57.593 --> 06:58:59.593
components pull from the theme 

06:59:01.076 --> 06:59:02.925
to have the super easy app white
theming.  Let's walk through 

06:59:02.926 --> 06:59:05.590
some of the code.  As you 
expect, we have to import the 

06:59:05.591 --> 06:59:07.591
library.

06:59:10.693 --> 06:59:12.693
Here, note that it is coming 
from Google material.

06:59:15.990 --> 06:59:17.990
And to use a baseline theme, you

06:59:19.267 --> 06:59:21.289
define kind of set the theme to 
be material components dot 

06:59:21.290 --> 06:59:23.745
light.
This is for brand agnostic theme

06:59:23.746 --> 06:59:26.581
to start with.  Then we provide 
a bunch of attributes 

06:59:29.848 --> 06:59:31.270
that you can override so all the
widgets within the app can pick 

06:59:31.271 --> 06:59:33.271
up.

06:59:38.284 --> 06:59:43.175
Here, we're define primary 
color, text in theme dot XML.  

06:59:43.176 --> 06:59:47.046
On top of that define attributes
for different text styles.  With

06:59:47.047 --> 06:59:49.321
some that comes out of box but 
you can also define your own. 

06:59:49.322 --> 06:59:54.672
Although custom widgets, if you 
have those that use the 

06:59:54.673 --> 06:59:56.673
attributes, it can also pick up 
the theme.

07:00:00.026 --> 07:00:04.512
Look at the components updated. 
First up is text field.  We 

07:00:04.513 --> 07:00:06.513
improve the search and use the 

07:00:07.809 --> 07:00:10.267
touch target making it easier 
for input and more usable and 

07:00:10.268 --> 07:00:12.268
accessible.

07:00:14.933 --> 07:00:17.813
And add more states, focus, 
error and text counter.  We have

07:00:17.814 --> 07:00:20.244
kind of think through all of it 
from the start to make your life

07:00:20.245 --> 07:00:24.946
easier.  
Next up is button.  You can 

07:00:24.947 --> 07:00:27.394
tell, you can use button the way
you use today by setting the 

07:00:31.302 --> 07:00:33.133
material component light theme, 
it will inflate this to the 

07:00:33.134 --> 07:00:35.183
material button, to understand 
themes and pick up the 

07:00:36.604 --> 07:00:38.604
attributes you set previously in
the theme file. 

07:00:43.764 --> 07:00:46.448
You can use custom attributes 
with these and we provide two 

07:00:46.449 --> 07:00:50.522
updated bars for you.  The first
is the bottom app bar.  

07:00:55.007 --> 07:00:57.681
The bottom app bar allows 
actions into your app.  What we 

07:00:57.682 --> 07:00:59.682
have done here is allowed you 

07:01:00.940 --> 07:01:04.191
to -- we have done research and 
saw the phones are bigger.  We 

07:01:04.192 --> 07:01:06.653
want you to allow you to 
position your apps anywhere you 

07:01:06.654 --> 07:01:11.540
want on the app bar.  Here is a 
fab that is centered and can be 

07:01:11.541 --> 07:01:15.024
animated to be right aligned. 
The other bottom bar we have 

07:01:15.025 --> 07:01:18.077
updated is the bottom navigation
bar.  So just to clarify that.

07:01:22.374 --> 07:01:23.786
Bottom app bar for action and 
bottom navigation bar is for 

07:01:23.787 --> 07:01:27.326
different section in the app. 
We don't recommend mixing the 

07:01:27.327 --> 07:01:30.605
metaphors, we provide both to 
choose from to build your app.

07:01:31.219 --> 07:01:35.503
Pulling all of this together is 
the material card view that is a

07:01:35.504 --> 07:01:37.943
wrapper on the existing card 
view in the Support 

07:01:41.955 --> 07:01:43.989
Library or AndroidX.  
Simplified how it is built.  

07:01:43.990 --> 07:01:48.431
Less elevation, and shadow and 
pulls from the theme and color. 

07:01:48.432 --> 07:01:50.666
So here, you can see all the 
elements coming together with 

07:01:50.667 --> 07:01:52.667
the text button and 

07:01:54.355 --> 07:01:56.414
all of that in the material card
view.  With this component, you 

07:01:56.415 --> 07:01:58.415
have to 

07:01:59.906 --> 07:02:02.548
define the user material card 
view explicitly, looking to see 

07:02:02.549 --> 07:02:05.593
where we can integrate it as 
well.  With that, you can learn 

07:02:05.594 --> 07:02:07.594
more about 

07:02:10.315 --> 07:02:12.341
this in stage 8 at 4:30 at how 
to incur what's new with 

07:02:12.342 --> 07:02:14.342
material design in your code 
base.

07:02:17.684 --> 07:02:19.684
And AndroidX is only one part of
Jetpack.

07:02:20.946 --> 07:02:22.946
Jetpack is a set of components, 
tools, 

07:02:24.204 --> 07:02:26.204
guidance to help you build great
Android apps quickly and easily.

07:02:27.473 --> 07:02:32.554
So we're at this talk, but we 
have four more talks to learn 

07:02:32.555 --> 07:02:34.555
more about Jetpack.  With that, 
thank you.

07:02:36.837 --> 07:02:37.849
Alan, Aurimas and I will hang 
out at the Android tent over 

07:02:37.850 --> 07:02:40.305
there.  
Hope to see and talk to all of 

07:02:40.306 --> 07:02:44.313
you.  Thank you.  
(Applause)  

07:02:58.495 --> 07:03:00.758
&gt;&gt; Thank you for joining this 
session.  Brand ambassadors will

07:03:00.759 --> 07:03:03.289
assist with directing you 
through the designated exits. 

07:03:03.290 --> 07:03:06.335
We'll be making room for those 
who registered for the next 

07:03:06.336 --> 07:03:10.480
session.  If you registered for 
the next session in this room, 

07:03:10.481 --> 07:03:12.481
we ask that you please 

07:03:13.741 --> 07:03:14.972
clear the room and return via 
the registration line outside.

07:03:14.973 --> 07:03:16.973
Thank you.  

07:03:21.680 --> 07:03:23.680
(Session concluded)  

07:03:24.792 --> 07:03:25.219
.  
.  

07:03:25.220 --> 07:03:26.046
.  
.  

07:03:26.047 --> 07:03:26.646
.  
.  

07:03:26.647 --> 07:03:27.469
.  
.  

07:03:27.470 --> 07:03:30.127
.  
.  

07:03:30.128 --> 07:03:32.773
.  
.  

07:03:32.774 --> 07:03:34.398
.  
.  

07:03:34.399 --> 07:03:35.427
.  
.  

07:03:35.428 --> 07:03:38.413
. 

07:22:47.297 --> 07:22:49.297
ML kit, machine learning SDK for
mobile developers.  

07:25:15.716 --> 07:25:16.731
&gt;&gt; At this time, please find 
your seat.  Our session will 

07:25:16.732 --> 07:25:18.732
begin soon.  

07:29:07.634 --> 07:29:08.655
&gt;&gt; BRAHIM ELBOUCHIKHI: Good 
afternoon, everyone.  My name is

07:29:08.656 --> 07:29:10.656
Brahim Elbouchikhi.

07:29:11.920 --> 07:29:14.780
We, as a team are very excited 
to tell you about ML kit.  You 

07:29:14.781 --> 07:29:17.013
have heard about it from Dave at
the main keynote and probably 

07:29:17.014 --> 07:29:19.908
looked at our documentation.  In
this session, we'll tell you 

07:29:19.909 --> 07:29:22.970
more, some of the behind the 
scenes stuff we have been 

07:29:22.971 --> 07:29:26.619
working on.
So let me get started.  

07:29:28.261 --> 07:29:30.712
I think it is important to look 
back a couple years, look at 

07:29:30.713 --> 07:29:32.713
machine learning, what has been 
happening, the context.  

07:29:35.802 --> 07:29:37.802
And I try to quantify this the 
best way I could.

07:29:41.034 --> 07:29:43.034
One way is to look at goggle

07:29:44.189 --> 07:29:46.189
-- Google trends, the most 
reliable source of data.

07:29:49.661 --> 07:29:54.022
You can see there is a 50X 
increase in deep learning.  That

07:29:54.023 --> 07:29:58.698
is not a new technology.  That 
has been around since the 70s.  

07:29:58.699 --> 07:30:01.122
What has changed is we can 
deliver on the promise of deep 

07:30:01.123 --> 07:30:05.864
learning.  We have enough 
compute, memory and power on the

07:30:05.865 --> 07:30:07.714
devices to actually run the 
models that have been developed 

07:30:07.715 --> 07:30:09.715
for some 

07:30:10.762 --> 07:30:14.234
time.  
I want to give you, as a product

07:30:19.375 --> 07:30:21.375
manager, a simplified view of 
product management.  

07:30:21.615 --> 07:30:24.095
Essentially deep learning uses 
layers and tries to mimic how 

07:30:24.096 --> 07:30:27.811
the brain functions, tries to 
activate different neurons, 

07:30:27.812 --> 07:30:29.812
based on the specific input it 

07:30:30.899 --> 07:30:32.991
is getting so they can 
ultimately arrive at the answer 

07:30:32.992 --> 07:30:36.057
of whether this should a dog, 
cat or hot dog or not. 

07:30:39.319 --> 07:30:41.762
And in this case, if you can see
on the image, the output of the 

07:30:41.763 --> 07:30:45.038
particular outcome is dog.  What
we have before the source of 

07:30:48.916 --> 07:30:51.562
algorithms was 
rule-basedrule-based engines, 

07:30:51.563 --> 07:30:53.999
you had to configure the rules, 
if, this and this, and this, 

07:30:54.000 --> 07:30:56.000
that's a dog.  Which does not 
scale.  

07:30:58.172 --> 07:31:00.172
So because of that deep learning
has 

07:31:01.258 --> 07:31:03.258
allowed us to get into so many 
more use 

07:31:04.306 --> 07:31:06.306
cases and solve so many more 
problems 

07:31:10.893 --> 07:31:12.893
that we could before purely with
rules engines.  

07:31:13.751 --> 07:31:15.792
That's cool. 
In particular, over the past 

07:31:15.793 --> 07:31:20.291
seven years or so, our ability 
and the machine's ability to 

07:31:20.292 --> 07:31:22.292
perceive the world around it has
gotten good.

07:31:24.791 --> 07:31:27.464
In this case, 2011, a 26% error 
rate in identifying that animal 

07:31:27.465 --> 07:31:29.465
as a cheetah.

07:31:32.356 --> 07:31:34.596
On the right, as of now, 
essentially, the error rate is 

07:31:34.597 --> 07:31:36.597
less than 3%.

07:31:37.912 --> 07:31:39.121
Which is better than what a 
human can do.  That is pretty 

07:31:39.122 --> 07:31:41.122
awesome.

07:31:42.217 --> 07:31:44.480
The fact that an algorithm, a 
machine, can now perceive the 

07:31:44.481 --> 07:31:47.164
world in that way, opens up lots
of new use cases.

07:31:50.620 --> 07:31:52.866
But of course, as a team, our 
mission is about bringing 

07:31:52.867 --> 07:31:56.964
machine learning to mobile 
devices and mobile apps.  So 

07:31:56.965 --> 07:31:59.186
when we start researching this 
product, we went out there, we 

07:31:59.187 --> 07:32:01.187
talked to 

07:32:02.894 --> 07:32:04.529
many developers, both internally
at Google and externally to try 

07:32:04.530 --> 07:32:07.179
to understand what are you doing
with machine learning on 

07:32:07.180 --> 07:32:11.484
devices?  And how does it work 
today?  So I'm going to tell you

07:32:11.485 --> 07:32:13.485
a bit about that.

07:32:15.195 --> 07:32:16.424
The first thing, one of the 
first we talked about is Google 

07:32:16.425 --> 07:32:21.129
Translate.  Of course, you hear 
a lot about Google Translate 

07:32:21.130 --> 07:32:22.790
because it is a delightful 
experience, and incredibly 

07:32:22.791 --> 07:32:27.465
useful.  But what I like the 
most about Google Translate is 

07:32:27.466 --> 07:32:30.156
the fact that it strings 
together multiple types of deep 

07:32:32.201 --> 07:32:33.434
learning, machine learning 
models and technologies to 

07:32:33.435 --> 07:32:35.435
deliver this experience.

07:32:36.884 --> 07:32:38.923
So it does the on-screen 
character recognition to extract

07:32:38.924 --> 07:32:41.412
the text it is looking at.  It 
does the actual translation 

07:32:41.413 --> 07:32:45.274
itself and ultimately, it could 
do text to speech so it can 

07:32:45.275 --> 07:32:47.275
speak the results back to the 
user.

07:32:49.961 --> 07:32:52.185
And we think that when you can 
string these things together, 

07:32:52.186 --> 07:32:54.264
when you can use machine 
learning in multiple ways within

07:32:58.340 --> 07:32:59.560
a single experience, where 
relevant, obviously, really cool

07:32:59.561 --> 07:33:01.561
stuff happens.

07:33:02.625 --> 07:33:04.625
That is one example.

07:33:11.440 --> 07:33:13.440
The other one is the app called 
you CICIAN.

07:33:14.948 --> 07:33:16.388
It allows you to play an analog 
instrument, it listens while you

07:33:16.389 --> 07:33:21.099
play and tries to interpret how 
well you are doing.  It left 

07:33:21.100 --> 07:33:22.722
hands of to the notes you are 
playing, it is listening to how 

07:33:22.723 --> 07:33:24.723
well you 

07:33:26.601 --> 07:33:28.601
are playing them, timestamping 
them.

07:33:29.729 --> 07:33:31.760
Echo cancellation and noise 
cancellation and finally, 

07:33:31.761 --> 07:33:33.761
personalize in the learning 
experience.

07:33:36.236 --> 07:33:38.481
All of this is done with an 
on-device machine model, with 

07:33:38.482 --> 07:33:40.482
this team, they 

07:33:41.977 --> 07:33:43.809
built their own C++ run time to 
do the inference on the device 

07:33:43.810 --> 07:33:46.846
as efficiently as possible.  
This predated TensorFlow light 

07:33:46.847 --> 07:33:50.991
and other things we have now 
that could have helped with that

07:33:50.992 --> 07:33:53.622
particular process.  
The other folks we have talked 

07:33:53.623 --> 07:33:59.163
about, among the few others are 
ever note.  So ever note 

07:33:59.164 --> 07:34:02.815
launched a feature called ever 
note collect.  The insight 

07:34:02.816 --> 07:34:05.305
behind ever note collect is the 
fact that we collect so much of 

07:34:07.403 --> 07:34:09.403
our information in a visual 
manner.

07:34:10.460 --> 07:34:12.460
We're taking screen shots of 
things we care about.

07:34:13.369 --> 07:34:15.369
Pictures of receipts, of 
whiteboards 

07:34:17.223 --> 07:34:20.913
after the meeting, askingasking 
someone to transcribe them.  

07:34:20.914 --> 07:34:22.914
Ever note tries to avoid that.

07:34:25.452 --> 07:34:27.086
It tries to extract the text, 
tag that, and make it more 

07:34:27.087 --> 07:34:31.025
useful.  That is super cool.  
The overall theme that we heard 

07:34:33.490 --> 07:34:36.358
through many conversation was 
that it is doable.  On-device 

07:34:36.359 --> 07:34:38.359
machine learning is doable, but 
it is really hard.

07:34:40.900 --> 07:34:43.753
It is hard for three specific 
reasons.  The first is acquiring

07:34:43.754 --> 07:34:47.896
sufficient data in both the 
quantity and quality that you 

07:34:47.897 --> 07:34:49.897
need.  Think about it.

07:34:52.445 --> 07:34:55.242
Say you are training an OCR 
model, you can label the data 

07:34:55.243 --> 07:34:57.243
for your own language.

07:34:58.270 --> 07:34:59.295
You can get an actual training 
set, say I'm going to label what

07:34:59.296 --> 07:35:02.797
this data says myself because I 
understand that language.  But 

07:35:02.798 --> 07:35:05.244
in a global audience, when you 
have users all over the world, 

07:35:05.245 --> 07:35:09.314
how do you create an OCR model 
that actually works for all 

07:35:09.315 --> 07:35:11.957
those languages?  That's really 
hard.  

07:35:17.206 --> 07:35:19.206
Even harder, if you are a music

07:35:21.789 --> 07:35:23.623
music-learning app, you need to 
hire world-class musicians to 

07:35:23.624 --> 07:35:25.624
record the perfect note so you 
can train against it.  

07:35:26.469 --> 07:35:31.428
That is expensive.  The other 
aspect is developing models that

07:35:31.429 --> 07:35:33.302
are optimized for mobile 
inference.  This has many 

07:35:33.303 --> 07:35:35.753
dimensions.  This could be in 
terms of battery 

07:35:42.235 --> 07:35:44.235
life, in terms of compute, and 
in terms of size of the 

07:35:47.227 --> 07:35:49.227
model.  And what I have learned 
in machine

07:35:54.244 --> 07:35:57.910
learning is that these are 
always constant tradeoffs.  

07:35:54.244 --> 07:35:58.110
You can improve in one and 
decrease in the other one.  It 

07:35:54.244 --> 07:35:56.244
is a really hard challenge to 
solve.

07:36:08.237 --> 07:36:12.037
And finally, the deploying an 
ongoing experimentation is 

07:36:08.237 --> 07:36:08.268
essential to machine learning.  
You can't do one without the 

07:36:08.269 --> 07:36:12.202
other.  So, however, there 
aren't very many tools today to 

07:36:08.269 --> 07:36:10.269
help you do

07:36:14.242 --> 07:36:18.175
that.  So we set out ML kit to 
try to address all of these 

07:36:14.242 --> 07:36:14.256
issues.  
Of course, it is the beginning 

07:36:14.257 --> 07:36:17.320
of a long road and journey, but 
we think there is some exciting 

07:36:17.321 --> 07:36:19.321
stuff for you today. 

07:36:21.653 --> 07:36:24.347
I want to first talk about our 
machine learning SDK.  Our 

07:36:24.348 --> 07:36:26.348
machine learning stack.

07:36:28.056 --> 07:36:30.056
At this case, the very bottom is
the 

07:36:32.613 --> 07:36:34.613
Android neuronetworks, API and 
iOS is metal.

07:36:36.283 --> 07:36:38.283
On the neural network it is 
lunched 

07:36:42.157 --> 07:36:44.157
with ML1 and an hardware 
Internet extension case.

07:36:48.025 --> 07:36:50.468
We build drivers for the neural 
networks API.  I'm excited to 

07:36:50.469 --> 07:36:53.133
show you results.  With the P20 
series device, we're 

07:36:56.900 --> 07:36:59.347
seeing 10X improvement in 
latency, inference with 

07:36:59.348 --> 07:37:04.492
incention V3.  What is cool, if 
you don't know inception V3, it 

07:37:04.493 --> 07:37:07.371
is a large model.  It wasn't 
built for mobile devices at all.

07:37:10.215 --> 07:37:12.215
It will built for server side 
inference.  

07:37:13.081 --> 07:37:15.320
The fact that we can run that 
kind of model at 10X performance

07:37:15.321 --> 07:37:19.816
and run it efficiently on a 
mobile device that is not 

07:37:19.817 --> 07:37:21.855
connected to a power plant is 
actually super exciting.

07:37:25.146 --> 07:37:27.815
This means we have more headroom
to do more with machine learning

07:37:27.816 --> 07:37:29.816
on a device 

07:37:31.319 --> 07:37:33.344
top of course, there is another 
model of this where we have 

07:37:33.345 --> 07:37:35.345
models that are built for 
mobile, from the ground up, and 

07:37:37.885 --> 07:37:39.119
built to be highly efficient, 
all of that.  So that work 

07:37:39.120 --> 07:37:43.638
continues.  When you pair these 
up together, we think there will

07:37:43.639 --> 07:37:45.639
be a lot of cool stuff happening
here.  

07:37:46.705 --> 07:37:49.378
We're continuing to invest on 
Android neural networks API and 

07:37:49.379 --> 07:37:52.077
relying on metal on the iOS 
side.  

07:37:57.645 --> 07:38:00.080
The next aspect here is 
TensorFlow lite.  It was 

07:38:00.081 --> 07:38:02.081
announced last year, shipped 
around November.

07:38:03.751 --> 07:38:05.751
It is a machine learning set of 
tools and library.

07:38:07.451 --> 07:38:09.112
It works on both mobile devices 
and embedded devices and built 

07:38:09.113 --> 07:38:11.113
from the 

07:38:12.373 --> 07:38:15.218
ground up, as it says to be 
lightweight.  Now, I'm not going

07:38:15.219 --> 07:38:17.219
to steal any of the team's 
thunder.

07:38:19.103 --> 07:38:21.146
They have a session fully 
dedicated to TensorFlow lite 

07:38:21.147 --> 07:38:24.006
tomorrow, so I highly recommend 
to go see it if you are at all 

07:38:26.062 --> 07:38:28.062
interested in on-device machine 
learning.

07:38:30.832 --> 07:38:33.094
Which I assume you would be , if
you are here.  Then we get at 

07:38:33.095 --> 07:38:35.741
the application layer.  
This is where we looked around, 

07:38:35.742 --> 07:38:37.742
we said 

07:38:38.826 --> 07:38:41.323
there isn't really an easy way 
to access machine learning 

07:38:41.324 --> 07:38:43.324
technologies at that layer.

07:38:44.803 --> 07:38:46.260
You have to either go interface 
directly with the run time and 

07:38:46.261 --> 07:38:49.920
build your own models or you 
really had to build your own 

07:38:49.921 --> 07:38:51.921
step.  

07:38:53.394 --> 07:38:56.253
So that is where ML kit comes 
into the picture.  ML kit is in 

07:38:56.254 --> 07:38:58.725
beta, as of yesterday.  So you 
obviously all can go use it 

07:38:58.726 --> 07:39:00.726
today.

07:39:01.992 --> 07:39:03.992
And it is essentially Google's 
machine learning SDK.

07:39:06.896 --> 07:39:09.369
Our aim is to bring Google's 
15-plus years in machine 

07:39:09.370 --> 07:39:14.047
learning, all of the technology 
we developed, bring it to mobile

07:39:14.048 --> 07:39:16.103
developers through this SDK. 
So let me tell you more about 

07:39:16.104 --> 07:39:18.104
it.

07:39:19.186 --> 07:39:21.242
Well, first, let me show you the
stack again with some.

07:39:22.284 --> 07:39:24.284
L kit on the top.

07:39:27.185 --> 07:39:29.185
This is our on device machine 
learning stack.  

07:39:31.279 --> 07:39:33.570
Now, I hope I get to tell you 
about it.  Okay.  So the first 

07:39:33.571 --> 07:39:36.036
thing that is really important 
is that ML kit is both on iOS 

07:39:37.664 --> 07:39:39.664
and Android.

07:39:40.754 --> 07:39:42.966
This was really important to us 
because when we talk to 

07:39:42.967 --> 07:39:47.090
developers, we don't think about
Android machine learning and iOS

07:39:47.091 --> 07:39:49.091
machine learning.  We think 
about machine learning.

07:39:51.981 --> 07:39:53.629
We want to deploy similar models
to users on both platforms.  

07:39:53.630 --> 07:39:57.524
There is not a fork there.  
Say it was important that we 

07:39:57.525 --> 07:39:59.525
have a consistent SDK for both.

07:40:02.841 --> 07:40:04.841
And in fact, every one of our 
features 

07:40:06.953 --> 07:40:08.953
is available on both Android and
iOS.

07:40:11.527 --> 07:40:13.527
We offer two types of rough 
buckets of features.

07:40:16.272 --> 07:40:18.302
One is what we call base API.  
These are backed by Google 

07:40:18.303 --> 07:40:20.344
models.  
As far as we're concerned as a 

07:40:22.577 --> 07:40:25.255
developer, there is no machine 
learning involved.  The other is

07:40:25.256 --> 07:40:27.256
a set of features that 

07:40:28.368 --> 07:40:30.368
help you use your own 
custom-trained models.

07:40:32.844 --> 07:40:34.844
I will tell you more about that 
in a bit.

07:40:36.909 --> 07:40:39.759
ML kit offers on-device and 
Cloud-based API.  Again, this is

07:40:39.760 --> 07:40:41.760
important.

07:40:44.147 --> 07:40:46.147
On-device API give you the 
real-time and offline abilities.

07:40:47.833 --> 07:40:49.833
But they have limited accuracy 
in comparison to Cloud.

07:40:53.755 --> 07:40:55.755
However, on-device API are free 
of charge.

07:40:58.112 --> 07:41:00.813
But we also wanted to give you a
consistent interface for the 

07:41:00.814 --> 07:41:03.488
Cloud API.  
But in many cases you do need 

07:41:03.489 --> 07:41:07.612
that level of precision and that
level of scope.  We will talk 

07:41:07.613 --> 07:41:09.613
about the distinctions between 
the two in a little bit.

07:41:15.922 --> 07:41:19.933
And finally, ML kit is deeply 
integrated into Firebase.  This 

07:41:19.934 --> 07:41:22.794
is another important point for 
us.  We aim to make machine 

07:41:22.795 --> 07:41:26.749
learning to make it 
nonexceptional.  We don't want 

07:41:26.750 --> 07:41:28.750
it to be special.  

07:41:30.007 --> 07:41:32.007
We want it to be yet another 
tool, just 

07:41:34.733 --> 07:41:36.733
like you use analytics or crash 
lytics, 

07:41:37.983 --> 07:41:38.821
or performance monitoring, Cloud
storage, like you use any parts 

07:41:38.822 --> 07:41:41.906
of the Firebase, we want machine
learning to be right there, 

07:41:41.907 --> 07:41:46.247
right then.  What this also does
is works well with other 

07:41:46.248 --> 07:41:49.511
features on Firebase.  
Again, we'll tell you more 

07:41:49.512 --> 07:41:51.512
detail about that in a few 
minutes.

07:41:54.862 --> 07:41:56.862
So that's the high level about 
ML kit. 

07:41:58.336 --> 07:42:01.191
So what base API support today? 
First, text recognition.

07:42:05.108 --> 07:42:07.108
This is available both on Cloud 
and on device.

07:42:10.261 --> 07:42:12.261
The second is Malaysian 
labeling,s in 

07:42:14.971 --> 07:42:16.616
is bar code scanning, face 
detection and landmark 

07:42:16.617 --> 07:42:19.510
recognition.  The four API on 
the left are available on 

07:42:19.511 --> 07:42:24.426
device.  Meaning you can use 
them for free and in real-time 

07:42:24.427 --> 07:42:28.339
and offline.  
We also have two super-cool 

07:42:28.340 --> 07:42:30.340
features coming up soon.

07:42:32.668 --> 07:42:35.112
One is a high-density face 
contour feature.  This is over 

07:42:35.113 --> 07:42:38.601
100 points in real-time.  And 
the other is a smart reply API. 

07:42:38.602 --> 07:42:42.071
This is what we like to talk 
about at Google we work together

07:42:42.072 --> 07:42:44.072
really well.

07:42:45.962 --> 07:42:47.962
It is part of Android P, there 
is a 

07:42:49.243 --> 07:42:51.700
feature to now insert response 
suggestions within the 

07:42:51.701 --> 07:42:53.747
notification shade directly.  

07:42:58.243 --> 07:43:00.715
ML kits with the smart reply API
is something helpful in 

07:43:00.716 --> 07:43:02.716
populating the chips.

07:43:07.470 --> 07:43:09.470
This is same in iOS and not API.

07:43:12.805 --> 07:43:14.805
This is in where OS, Android 
messages, so that is cool.  

07:43:15.911 --> 07:43:18.366
Sometimes you simply need to 
build a custom model.  If you 

07:43:18.367 --> 07:43:20.665
are trying to detect that 
particular type of flower, you 

07:43:20.666 --> 07:43:25.188
can -- it is hard to build a 
generic model.  You can build 

07:43:25.189 --> 07:43:27.189
one, but it will be super large.

07:43:28.667 --> 07:43:29.915
As you detect every flower, 
every dog, every species of 

07:43:29.916 --> 07:43:31.916
everything.

07:43:33.198 --> 07:43:35.011
You have base custom models, 
sometimes.  We wanted to help 

07:43:35.012 --> 07:43:38.912
with that as well.  The first 
feature we have here is dynamic 

07:43:38.913 --> 07:43:40.913
model downloads.

07:43:42.018 --> 07:43:44.129
What this means is you can 
upload your model to the 

07:43:44.130 --> 07:43:46.569
Firebase console, and have it be
served to your users 

07:43:46.570 --> 07:43:49.227
dynamically.  
You don't have to bundle the 

07:43:49.228 --> 07:43:53.342
model into the APK.  This has a 
bunch of benefits.

07:43:57.007 --> 07:43:59.007
First, it reduces the APK size.

07:44:00.505 --> 07:44:03.147
You don't have to put that 5 or 
10 megabyte model into APK, 

07:44:03.148 --> 07:44:06.194
meaning you have to take a hit 
when the user is trying to 

07:44:06.195 --> 07:44:08.660
install the app.  The other 
important insight for us was 

07:44:11.703 --> 07:44:14.633
we decouple the process, the ML,
the release process from the 

07:44:14.634 --> 07:44:19.078
software kind of traditional app
release processes.  We learned 

07:44:19.079 --> 07:44:21.079
that the teams are typically 
slightly different teams.  

07:44:23.813 --> 07:44:25.856
Your machine learning team is 
probably a different set of 

07:44:25.857 --> 07:44:27.083
people than the ones building 
your core software experience.

07:44:27.084 --> 07:44:32.036
This gives you the flexibility 
to deploy each at different 

07:44:32.037 --> 07:44:35.896
times.  
Now, I really cool benefit of 

07:44:35.897 --> 07:44:41.383
this also is you can now do AB 
testing on different models with

07:44:41.384 --> 07:44:43.619
literally a single line of code.

07:44:48.223 --> 07:44:50.663
This is the coolest part for me.
If you were to do this today, 

07:44:50.664 --> 07:44:55.406
maybe before ML kit launched you
have to bundle two models into 

07:44:55.407 --> 07:44:59.687
your app, you are stuck with the
two same models for the duration

07:44:59.688 --> 07:45:01.938
of the app's life cycle and you 
have to upload all the metrics 

07:45:01.939 --> 07:45:07.258
back, do all of that work.  This
makes it trivial.  And given how

07:45:07.259 --> 07:45:09.490
important it is to experiment as
part of the machine 

07:45:13.594 --> 07:45:15.016
learning, this is we think, a 
real game-changer for the 

07:45:15.017 --> 07:45:17.017
ability to use machine learning 
models.

07:45:19.393 --> 07:45:21.264
And finally, we talked about the
optimization challenge of 

07:45:21.265 --> 07:45:25.340
building models that are made 
for model.  We're excited that 

07:45:25.341 --> 07:45:27.341
we'll have a feature that is 
coming soon that will 

07:45:31.021 --> 07:45:33.021
allow you to convert and 
compress full 

07:45:36.140 --> 07:45:37.786
TensorFlow models into 
lightweightlightweight 

07:45:37.787 --> 07:45:39.825
TensorFlow lite models.  We will
talk about the magic -- we 

07:45:43.072 --> 07:45:47.006
call it also technology -- 
behind the compression flow.  

07:45:47.007 --> 07:45:49.654
That is ML kit.  Google's 
machine learning SDK 

07:45:52.713 --> 07:45:56.804
available on Android and iOS.  
I want to take a moment, as 

07:45:56.805 --> 07:46:01.338
always to thank our partners. 
We've worked with every one of 

07:46:01.339 --> 07:46:06.241
these partners and many more to 
launch ML kit.  They worked 

07:46:06.242 --> 07:46:08.900
through so many bugs, so many 
challenges, given us so much 

07:46:10.535 --> 07:46:12.562
feedback and the product 
wouldn't be where it is today 

07:46:12.563 --> 07:46:16.013
without their help.  I want to 
thank them a lot.  And in 

07:46:16.014 --> 07:46:19.115
particular, I want to highlight 
a couple of things. 

07:46:25.069 --> 07:46:27.069
I worked with pics art and they 
deploy a 

07:46:28.357 --> 07:46:30.357
custom model to deploy the magic
effect.

07:46:32.230 --> 07:46:36.782
What is cool is they use ML kit 
on Android and iOS.  We also 

07:46:36.783 --> 07:46:38.783
work with intuit.  If you know 
U.S.

07:46:41.913 --> 07:46:43.757
tax dates, tax day is around 
April, so it is really pressed 

07:46:43.758 --> 07:46:45.758
for time to get the feature out.

07:46:48.510 --> 07:46:50.510
So we worked with them to 
integrate ML kit in record time.

07:46:52.163 --> 07:46:54.163
That was super-awesome as well. 
All right.

07:46:57.285 --> 07:46:59.304
So before I hand it over to 
Sachin to tell you more about ML

07:46:59.305 --> 07:47:02.778
kit, I wanted to make a 
commitment to you.  We're going 

07:47:02.779 --> 07:47:05.208
to go out there and we're going 
to knock on Google's research 

07:47:06.852 --> 07:47:09.344
teams' doors, every one of them.
We're going to go out there and 

07:47:09.345 --> 07:47:13.017
ask them to bring their 
technologies to you to be part 

07:47:13.018 --> 07:47:15.018
of ML kit.

07:47:17.938 --> 07:47:19.938
We will focus on vision, speech,
text models.  

07:47:22.264 --> 07:47:24.563
And we're also continue to make 
use of custom models as easy as 

07:47:24.564 --> 07:47:26.564
possible.  So that's it.

07:47:29.279 --> 07:47:31.279
I will invite Sachin to come up 
here 

07:47:36.176 --> 07:47:38.176
and tell you more about how ML 
kit works.  

07:47:40.812 --> 07:47:42.812
&gt;&gt; SACHIN KOTWANI: Thanks, 
Brahim.

07:47:45.912 --> 07:47:46.970
Hello everyone, my name is 
Sachin Kotwani.  I work on 

07:47:46.971 --> 07:47:48.971
Firebase.

07:47:50.041 --> 07:47:52.941
I was practicing at home with my
three EERLD.  Every time we 

07:47:52.942 --> 07:47:55.174
finish she would say again, I'm 
not sure if she was telling 

07:47:58.845 --> 07:48:01.693
me to practice more or if she 
enjoyed the content.  

07:48:02.519 --> 07:48:04.519
We'll find out.  

07:48:06.809 --> 07:48:08.809
When we set out to build ML kit,
we had 

07:48:10.497 --> 07:48:12.355
two main objectives, the first 
was to build something powerful 

07:48:12.356 --> 07:48:14.356
and useful, Brahim talked about 
about that.

07:48:18.683 --> 07:48:20.683
And if it is fun, I will tell 
you 

07:48:21.751 --> 07:48:23.751
about that if you use Firebase, 
you are 

07:48:24.827 --> 07:48:26.827
familiar with storage, remote 
config, 

07:48:28.930 --> 07:48:30.930
crash lytics, analytics, AV 
testing, more.  

07:48:31.202 --> 07:48:34.132
Now, there is a new addition to 
the family.  Starting with week 

07:48:34.133 --> 07:48:38.885
with our launch, if you head to 
the Firebase console, you will 

07:48:38.886 --> 07:48:41.560
see the ML kit.  
Clicking on that will take you 

07:48:41.561 --> 07:48:43.561
to the 

07:48:45.033 --> 07:48:48.285
main screen, with the Firebase 
API you will introduced to.  

07:48:48.286 --> 07:48:50.293
Mostly they're vision focused if
territory now, we will tend to 

07:48:50.294 --> 07:48:52.294
add to it in the future.

07:48:54.430 --> 07:48:56.430
Let's look at one specific use 
case.  

07:48:56.851 --> 07:48:58.851
Say I'm building an app.  It 
needs to determine what is the 

07:49:00.770 --> 07:49:04.191
content of an image.  What the 
theme is, what things are in it,

07:49:04.192 --> 07:49:06.663
how would you use the image 
labeling API.  As you can see 

07:49:06.664 --> 07:49:08.664
there are two icons here, this 
indicates the API is 

07:49:11.616 --> 07:49:12.829
available to run on device and 
in the Cloud.  On device is 

07:49:12.830 --> 07:49:14.830
free.

07:49:16.508 --> 07:49:18.161
It is low latency, no network 
required because everything runs

07:49:18.162 --> 07:49:21.011
on the phone. 
It supports roughly 400-plus 

07:49:21.012 --> 07:49:23.012
labels.  If you need something 
more powerful, 

07:49:25.731 --> 07:49:28.366
something to give you more high 
accuracy results, you would use 

07:49:28.367 --> 07:49:30.367
the Cloud-based API.

07:49:32.242 --> 07:49:34.492
That is free for the first 1,000
API calls per month and paid 

07:49:34.493 --> 07:49:37.607
after that, but it supports over
10,000 labels.  Let's look at an

07:49:37.608 --> 07:49:39.608
example.

07:49:42.364 --> 07:49:44.364
If you were to feed this image 
to the 

07:49:45.448 --> 07:49:47.292
on-device API, you get labels 
like fun, infrastructure, neon, 

07:49:47.293 --> 07:49:52.832
person, sky, if you feed it to 
the Cloud one, you get Ferris 

07:49:52.833 --> 07:49:55.467
while, amusement park, night, 
you can see it is more accurate.

07:49:56.297 --> 07:50:00.186
Right?  Okay. 
Remember, I told you it is not 

07:50:00.187 --> 07:50:02.493
just fun, it is easy to use.  
You have to hold me to it.

07:50:05.780 --> 07:50:08.021
Say I want to implement this API
on iOS.  I would just include 

07:50:08.022 --> 07:50:12.744
these three libraries in my pod 
file, similarly, if I do 

07:50:12.745 --> 07:50:15.622
Android, I would put the three 
libraries in the build dot 

07:50:15.623 --> 07:50:17.623
Gradle file.

07:50:22.930 --> 07:50:24.930
Next, if you am doing iOS 
on-device

07:50:26.301 --> 07:50:29.205
image labeling, I would 
insatiate, and get it back and 

07:50:29.206 --> 07:50:31.206
handle and handle the extracted 
entities.

07:50:32.279 --> 07:50:34.279
On Android, the pattern is very 
similar.

07:50:39.864 --> 07:50:43.359
You instantiate the detector, 
detector detect an image.  Pay 

07:50:43.360 --> 07:50:46.218
attention to the highlighted 
boxes in gray over there.  This 

07:50:46.219 --> 07:50:48.219
is on device.

07:50:49.308 --> 07:50:51.549
If I want to do the same thing 
but call the Cloud API instead. 

07:50:51.550 --> 07:50:55.013
Not much changes.  It is just a 
few class names.  The pattern is

07:50:55.014 --> 07:50:57.014
very similar.

07:50:58.425 --> 07:51:00.425
The

07:51:03.384 --> 07:51:05.225
detector, detect an image, 
handle, extract an image.  Demo 

07:51:05.226 --> 07:51:07.685
time. 
I was warned not to do a demo.

07:51:07.686 --> 07:51:09.740
But my wife says I don't listen.

07:51:15.406 --> 07:51:17.406
So here's me not listening.  
Let's see if this works. 

07:51:20.072 --> 07:51:22.520
I will show you the image 
labeling API.  This is typically

07:51:22.521 --> 07:51:25.216
used for things like tagging 
photos, if you want to know what

07:51:27.302 --> 07:51:30.382
is in the content of a picture, 
still picture, usually.  I 

07:51:30.383 --> 07:51:32.383
thought it would be cool to show
a 

07:51:34.061 --> 07:51:36.061
live dome --
demo with a live stream.

07:51:40.193 --> 07:51:42.836
It says toy, car, vehicle, tire,
bumper, is it picking out all 

07:51:42.837 --> 07:51:44.837
the pieces there.  Okay.

07:51:46.619 --> 07:51:48.619
Oh, it says crowd, too, event, I
didn't get to test this.  

07:51:50.500 --> 07:51:52.938
Because when I was practicing, 
it was no crowd, it was just 

07:51:52.939 --> 07:51:55.993
empty chairs.  Okay.  Face 
detection.  Switch to this.  

07:51:55.994 --> 07:52:01.581
Okay.  So there is a box around 
my face, as you can see.  There 

07:52:01.582 --> 07:52:03.582
is left eye, right eye.

07:52:04.852 --> 07:52:06.852
The numbers next to the left and
right eye are how open they are.

07:52:08.949 --> 07:52:12.601
So you can tell that I am awake.
Happiness is detected for the 

07:52:12.602 --> 07:52:14.881
smile.  So look at how that 
changes.

07:52:20.814 --> 07:52:22.885
And this works with multiple 
people, actually.  So just, you 

07:52:22.886 --> 07:52:25.544
know, again, you shouldn't trust
me, you should ask me to prove 

07:52:25.545 --> 07:52:27.545
it to you.

07:52:29.646 --> 07:52:34.159
So I need a few volunteers here.
Okay.  Multiple faces detected. 

07:52:34.160 --> 07:52:37.083
Eyes for everyone. 
Smiles for everyone.  Huh?  

07:52:37.714 --> 07:52:44.061
Pretty cool?  Right.  
(Applause) .  Okay.

07:52:47.771 --> 07:52:49.771
I have a couple more things.

07:52:51.238 --> 07:52:53.895
Lose it as mentioned is one of 
our partners.  They worked on 

07:52:53.896 --> 07:52:55.896
this really cool feature.  I 
will enter here.  

07:52:58.629 --> 07:53:00.629
Say I am logging what I had for 
breakfast.

07:53:02.343 --> 07:53:04.382
And, you know, normally, you can
select foods that are already in

07:53:04.383 --> 07:53:06.383
the application, you can enter 
it manually.

07:53:09.073 --> 07:53:11.129
Say you want to enter a new 
food.  Apparently this is not 

07:53:11.130 --> 07:53:13.800
considered food so I don't think
it is in the application.  I 

07:53:13.801 --> 07:53:15.801
will try it.  

07:53:18.112 --> 07:53:20.112
So like I said, you can enter it

07:53:21.171 --> 07:53:22.799
manually, let's -- ooh, it 
detected it faster than what I 

07:53:22.800 --> 07:53:27.506
expected.  Let me try that one 
more time.  There you go, 

07:53:27.507 --> 07:53:29.956
nutrition label found, here's 
all the information, the 

07:53:34.999 --> 07:53:39.137
calories, fats, saturated fats. 
All right.  You want one more?  

07:53:39.138 --> 07:53:43.666
Okay.  This is stuff that is not
available yet.  But I think it 

07:53:43.667 --> 07:53:45.667
is pretty cool.

07:53:46.964 --> 07:53:48.964
This is our face contours demo.

07:53:50.851 --> 07:53:52.851
It detects over 100 points, 
processes 

07:53:53.953 --> 07:53:56.823
them in 60 frames per second, 
you can see my lips, my eyes, 

07:53:56.824 --> 07:54:01.311
the entire face contour.  This 
will be coming soon.  A sign-up 

07:54:01.312 --> 07:54:04.288
link, if you are interested.  
You know, we look forward to 

07:54:04.289 --> 07:54:06.947
having it in your hands so you 
can play with it.

07:54:07.155 --> 07:54:09.155
All right.  
(Applause) .

07:54:13.014 --> 07:54:15.972
Thank you.  That was pretty 
cool.

07:54:20.245 --> 07:54:22.099
Hopefully you find the base APIs
useful.  There are use cases 

07:54:22.100 --> 07:54:23.517
that you might have that are 
very specific to your 

07:54:23.518 --> 07:54:25.759
application.  What if you wanted
to detect different 

07:54:32.842 --> 07:54:34.842
types of flowers or like you

07:54:37.204 --> 07:54:39.204
youSCICIA inspect you might want
your own custom model.

07:54:43.348 --> 07:54:45.348
M L kit helps with that as well.

07:54:47.229 --> 07:54:49.473
The first is the ML kit provides
a layerer to interact with the 

07:54:49.474 --> 07:54:52.523
TensorFlow model.  
You can get inputs and outputs.

07:54:56.412 --> 07:54:58.855
Second, upload the tensor lite 
model to the Firebase console.

07:55:02.303 --> 07:55:04.378
First, Brahim alluded to this 
earlier, you can bundle your 

07:55:04.379 --> 07:55:07.669
model with your application if 
you choose.  If it is big and 

07:55:07.670 --> 07:55:12.168
you want to reduce the install 
size, actually just leave it in 

07:55:12.169 --> 07:55:14.221
the Cloud and download it 
dynamically.  The initial 

07:55:14.222 --> 07:55:16.482
install size is smaller.  The 
third one, because it lives in 

07:55:16.483 --> 07:55:19.166
the Cloud, you can dynamically 
switch the model.

07:55:24.666 --> 07:55:26.919
You don't have to switch a new 
APK or bundle to the app store 

07:55:26.920 --> 07:55:31.438
or Play Store.  Here is a quick 
snippet on how to load that 

07:55:31.439 --> 07:55:36.540
model, how you refer to it.  
Let's say I called my model V1. 

07:55:36.541 --> 07:55:37.555
I would put this snippet and it 
would retrieve it from the 

07:55:37.556 --> 07:55:41.650
Cloud.  Let's take a step back. 
When I started, remember, I 

07:55:41.651 --> 07:55:45.360
mentioned that there are a lot 
of the Firebase products that 

07:55:45.361 --> 07:55:47.361
are very useful.

07:55:50.305 --> 07:55:52.305
And one of them, the favorite 
one is remote config.

07:55:54.417 --> 07:55:55.685
It allows you to dynamically 
switch values inside of your 

07:55:55.686 --> 07:55:59.975
app.  Typically used for 
switching the color, background,

07:55:59.976 --> 07:56:02.046
you can also use it to switch 
call to action strings.

07:56:08.856 --> 07:56:10.856
You know, it is really useful 
for that sort of thing.

07:56:12.725 --> 07:56:14.725
It turns out it is also useful 
for ML kit.

07:56:15.985 --> 07:56:18.860
I went to the Firebase console 
created my model.  I created 

07:56:18.861 --> 07:56:21.345
three different target 
populations.  One, for people 

07:56:21.346 --> 07:56:24.399
who speak English, another for 
people that speak Spanish and a 

07:56:24.400 --> 07:56:28.701
default value.  What I am trying
to do is targeting a different 

07:56:28.702 --> 07:56:30.702
model to the different 
populations.

07:56:32.219 --> 07:56:34.219
And once you do that, instead of
hard 

07:56:35.466 --> 07:56:37.466
coding a model name, like here, 
you just 

07:56:39.348 --> 07:56:42.203
change that static string for a 
call to remote config and every 

07:56:42.204 --> 07:56:45.452
device, depending on the 
population they belong to, they 

07:56:45.453 --> 07:56:47.710
will get the respective model.  
This is just a very simple 

07:56:47.711 --> 07:56:49.711
example.

07:56:52.942 --> 07:56:54.942
You can, you know, think of 
using AV 

07:56:56.860 --> 07:56:59.310
testing in analytics, you can 
test out models, pick the one 

07:56:59.311 --> 07:57:02.645
that performs best and choose 
that.  Experimentation, as 

07:57:02.646 --> 07:57:04.646
Brahim said earlier, is 
important in machine learning.

07:57:04.931 --> 07:57:06.931
All right.

07:57:08.309 --> 07:57:10.309
Before

07:57:14.656 --> 07:57:17.588
I wrap up and hand it over to 
Wei, I want to talk about the 

07:57:17.589 --> 07:57:19.589
models.

07:57:23.312 --> 07:57:26.800
You need a TensorFlow lite model
to run on a device.  We have a 

07:57:26.801 --> 07:57:30.879
feature for that.  It is coming 
soon.  You upload the TensorFlow

07:57:30.880 --> 07:57:36.021
model, with the data, once it is
done processing, you will get a 

07:57:36.022 --> 07:57:38.865
bunch of TensorFlow lite models 
to choose from.  You can see, 

07:57:38.866 --> 07:57:41.970
these are compressed.
They have tradeoff, different 

07:57:41.971 --> 07:57:46.092
accuracy, different inference 
latency and different sizes, 

07:57:46.093 --> 07:57:48.532
depending on what you are most 
sensitive to, you can pick your 

07:57:48.732 --> 07:57:53.428
needs.  This flow is only for 
image classification models, but

07:57:53.429 --> 07:57:55.671
we look forward to adding more 
in the future.  

07:57:57.703 --> 07:57:59.741
You pick the model that works 
best for you.  You publish it, 

07:57:59.742 --> 07:58:01.985
it is available like any other 
custom model that you would 

07:58:04.677 --> 07:58:08.260
upload on your own.  
I know I make this seem super 

07:58:08.261 --> 07:58:12.285
easy with beautiful UI and three
steps, but this is actually 

07:58:12.286 --> 07:58:14.286
really hard to do.  
It is an active area research.

07:58:14.521 --> 07:58:17.371
It is almost like magic, and to 
tell you 

07:58:20.593 --> 07:58:22.911
more about that magic, I would 
like to introduce our resident 

07:58:22.912 --> 07:58:28.738
wizard.
Wei, please come up on stage. 

07:58:32.849 --> 07:58:35.322
&gt;&gt; WEI CHAI: Thank you, Sachin. 
Hi, my name is Wei Chai.

07:58:39.182 --> 07:58:41.182
My team has mix motion learning 
experts and mobile developers.

07:58:43.044 --> 07:58:45.095
It is a lot of fun to be part of
it and build something we all 

07:58:45.096 --> 07:58:47.096
believe can 

07:58:48.775 --> 07:58:50.984
be useful, for example, model 
compression.  Now, I would like 

07:58:50.985 --> 07:58:54.856
to go deeper into the technology
behind the magic.  

07:58:57.298 --> 07:58:59.786
First of all, let me explain why
we want you to support model 

07:58:59.787 --> 07:59:01.787
compression.

07:59:02.839 --> 07:59:04.839
Running machine learning on the 
Cloud 

07:59:07.131 --> 07:59:09.131
versus on mobile, one big 
difference is 

07:59:15.655 --> 07:59:17.657
mobile environment has very 
limited computational resource. 

07:59:17.658 --> 07:59:19.299
This makes the model size and 
performance speed critical per 

07:59:19.300 --> 07:59:21.300
for 

07:59:22.375 --> 07:59:24.840
today's hardware limit, most 
mobile applications require very

07:59:24.841 --> 07:59:27.520
small models, ideally less than 
a couple megabytes.

07:59:33.333 --> 07:59:35.333
So for like -- so like -- um ...

07:59:42.047 --> 07:59:44.047
In hand, if we look at the

07:59:46.022 --> 07:59:48.504
model architectures, for 
limitation, to attain higher 

07:59:48.505 --> 07:59:50.505
accuracy the machine 

07:59:51.746 --> 07:59:53.746
learning models can go deeper 
and larger.

07:59:54.606 --> 07:59:56.606
Sometimes hundreds of megabytes 
for certain applications.

07:59:58.503 --> 08:00:00.952
After talking to a lot of the 
mobile developers, we realize 

08:00:00.953 --> 08:00:03.199
that how to make machine 
learning models small and 

08:00:05.644 --> 08:00:08.292
efficient enough to fit our 
mobile phones is one of the big 

08:00:08.293 --> 08:00:10.293
pinpoints.

08:00:13.258 --> 08:00:15.716
With ML kit, we would like to 
address this issue by providing 

08:00:15.717 --> 08:00:17.717
model 

08:00:19.746 --> 08:00:21.746
compression, tooling, and 
support.

08:00:23.702 --> 08:00:25.702
So a model compression service 
or tool 

08:00:29.251 --> 08:00:31.789
takes a large model as input and
automatically generate models 

08:00:31.790 --> 08:00:34.688
that are smaller in size, more 
memory efficient, 

08:00:38.787 --> 08:00:40.787
more power efficient, faster in 

08:00:41.850 --> 08:00:44.759
inference speed with minimal 
loss in accuracy.  As Sachin 

08:00:44.760 --> 08:00:46.760
just mentioned, this is 

08:00:48.636 --> 08:00:51.126
still an active mission learning
research area.  Our compression 

08:00:51.127 --> 08:00:54.974
service is based on learn to 
compression technology developed

08:00:54.975 --> 08:00:56.975
by Google research.

08:00:58.450 --> 08:01:00.450
And it combines various 

08:01:02.529 --> 08:01:04.529
state-of-the-art model 
compression techniques.  

08:01:08.451 --> 08:01:10.451
For example, one method called 
pruning 

08:01:11.725 --> 08:01:13.725
reduces the model size by 
removing the 

08:01:14.981 --> 08:01:16.981
last contributing ways and 
operations in the model.

08:01:20.520 --> 08:01:22.752
We found that for certain 
on-device compositional models, 

08:01:22.753 --> 08:01:24.753
pruning can 

08:01:26.429 --> 08:01:28.429
further reduce the model size by
up to 2X.

08:01:31.460 --> 08:01:33.460
Without too much drop in 
accuracy.

08:01:35.394 --> 08:01:37.394
So another method is trying to 
reduce 

08:01:42.747 --> 08:01:44.870
number of bids used for model 
weights and activation.

08:01:49.582 --> 08:01:51.411
For example, using eight-bit 
fixed point for model weights 

08:01:51.412 --> 08:01:57.184
and activation inside the flow, 
can make the model inference run

08:01:57.185 --> 08:01:59.185
much faster, use lower 

08:02:02.277 --> 08:02:04.277
power, and reduce the model size
by 4X.

08:02:06.207 --> 08:02:08.207
Specifically, with TensorFlow 
lite, 

08:02:11.178 --> 08:02:13.178
switching from mobile net to 
content 

08:02:15.823 --> 08:02:17.823
mobile net can speed up

08:02:20.649 --> 08:02:22.649
inference by 2X or more on Pixel
phones.

08:02:24.116 --> 08:02:26.742
The third model is a student 
model with distilled knowledge 

08:02:26.743 --> 08:02:29.199
from large model.  A teacher 
model.  

08:02:34.651 --> 08:02:36.651
So the student does not only 
learn from

08:02:38.628 --> 08:02:40.628
the ground labels, but from the 
teacher.  

08:02:41.893 --> 08:02:44.355
Typically, the student models 
are very small in size, with 

08:02:44.356 --> 08:02:47.010
much less waste in the model, 
and use more efficient 

08:02:51.293 --> 08:02:53.293
operations for the benefit of 
inference speed.

08:02:56.397 --> 08:02:59.269
For example, for image 
classification, the student 

08:02:59.270 --> 08:03:01.270
models can be chosen from 

08:03:03.560 --> 08:03:05.560
mobile net, squeeze net or any 
other 

08:03:06.637 --> 08:03:08.637
state-of-the-art model 
architectures 

08:03:10.333 --> 08:03:12.333
compact enough for mobile 
applications.

08:03:14.445 --> 08:03:16.895
We can further extend this 
distillation idea to 

08:03:16.896 --> 08:03:18.896
simultaneously 

08:03:22.039 --> 08:03:24.039
train the teacher model, and 
multiple 

08:03:25.244 --> 08:03:27.244
models with different sizes in a
single shot.

08:03:30.157 --> 08:03:32.157
One thing to mention is that 
very 

08:03:33.440 --> 08:03:36.306
often, for all of these 
techniques, we need a 

08:03:36.307 --> 08:03:39.147
fine-tuning step for the best 
accuracy.  So in this case, we 

08:03:39.148 --> 08:03:41.855
do not only need the original 
model for the compression 

08:03:46.543 --> 08:03:48.543
process, but also your training 
data.

08:03:51.452 --> 08:03:54.106
So for ML kit, we'll provide a 
Cloud service for model 

08:03:54.107 --> 08:03:56.107
compression.

08:03:57.634 --> 08:03:59.634
For now, we only support image 

08:04:00.940 --> 08:04:02.755
classification use cases, but 
will soon expand them to more.

08:04:06.430 --> 08:04:09.093
So the reason that we support 
model compression as a Cloud 

08:04:09.094 --> 08:04:14.804
service, as I just mentioned, 
model compression is still an 

08:04:14.805 --> 08:04:16.805
active research area with new 

08:04:17.856 --> 08:04:19.941
technologies and new model 
architectures, specifically for 

08:04:19.942 --> 08:04:23.845
mobile applications invented 
very fast.  

08:04:28.778 --> 08:04:31.473
For example, from mobile net V1 
to V2, it took less than one 

08:04:31.474 --> 08:04:33.474
year to invent.

08:04:34.925 --> 08:04:36.974
So our compression service will 
automatically incorporate the 

08:04:36.975 --> 08:04:38.975
latest advances in technology 
for you.

08:04:42.316 --> 08:04:44.316
Another reason, the compression 

08:04:45.359 --> 08:04:47.598
process typically takes quite 
some computational resource.

08:04:52.993 --> 08:04:54.993
It can grammatical hours on GPU.

08:04:56.303 --> 08:04:58.342
We will run our Cloud service on
Google Cloud to use the 

08:04:58.343 --> 08:05:00.343
computation 

08:05:01.544 --> 08:05:07.563
power there.  
So what we need from the 

08:05:07.564 --> 08:05:09.564
developers 

08:05:11.699 --> 08:05:13.729
include a pretrained TRENSor 
flow model in safe model or 

08:05:13.730 --> 08:05:16.637
checkpoint format.  And your 
training data in TensorFlow 

08:05:19.067 --> 08:05:21.067
example for that, for the fine 
tuning step I just mentioned.

08:05:24.408 --> 08:05:26.408
What we generate will be a set 
of 

08:05:27.907 --> 08:05:29.576
models with different size and 
accuracy tradeoffs for you to 

08:05:29.577 --> 08:05:31.577
choose from.

08:05:34.653 --> 08:05:37.142
Since ML kit is running on top 
of TensorFlow lite, all the 

08:05:37.143 --> 08:05:39.143
generated 

08:05:40.637 --> 08:05:42.637
models will already be in 
TensorFlow 

08:05:46.124 --> 08:05:48.124
lite format for you to download 
or  

08:05:49.227 --> 08:05:51.227
serve through our model hosting 
service.

08:05:53.956 --> 08:05:56.197
So with ML kit model compression
service, we're aiming to 

08:05:56.198 --> 08:05:58.198
compress a 

08:05:59.470 --> 08:06:01.470
model up to 100 times smaller, 
depending 

08:06:02.744 --> 08:06:04.744
on your use case and original 
model to 

08:06:06.405 --> 08:06:08.405
give you a real developer use 
case as example.

08:06:08.845 --> 08:06:11.541
Fish brain is a local fishing 
app.  They already have their 

08:06:11.542 --> 08:06:15.800
model to identify fish species 
and the model is currently 

08:06:15.801 --> 08:06:17.801
running on the Cloud.

08:06:19.540 --> 08:06:21.779
With our model compression 
service, the original model 

08:06:21.780 --> 08:06:23.780
provided by the 

08:06:28.249 --> 08:06:30.780
developer with 80 megabytes and 
92% accuracy can be compressed 

08:06:30.781 --> 08:06:32.781
to 

08:06:34.308 --> 08:06:36.172
much smaller models with 
different size and accuracy 

08:06:36.173 --> 08:06:38.173
shown here.

08:06:39.649 --> 08:06:41.649
As you can see, in this 
particular 

08:06:42.907 --> 08:06:45.772
case, the accuracies of the 
generated models were even 

08:06:45.773 --> 08:06:47.773
higher than the original model.

08:06:50.279 --> 08:06:52.279
Which is not always the case, 
but is 

08:06:54.509 --> 08:06:56.509
possible, and it is great.

08:07:01.045 --> 08:07:03.917
To summarize, with ML kit, we 
would like to make mission 

08:07:03.918 --> 08:07:05.918
learning accessible 

08:07:08.967 --> 08:07:10.967
to all mobile developers to 
achieve

08:07:12.091 --> 08:07:14.091
that we would like to help with 
every 

08:07:17.187 --> 08:07:20.044
step in the mission learn ing 
work flow on how to build the 

08:07:20.045 --> 08:07:22.045
model but to build 

08:07:23.335 --> 08:07:26.210
and optimize your model.  
Now, I would like to conclude 

08:07:26.211 --> 08:07:29.084
the talk with a summary of what 
we'll provide.

08:07:33.790 --> 08:07:35.790
We're launching in beta the base
APIs for both iOS and Android.

08:07:37.264 --> 08:07:42.554
Including text recognition, 
image labeling, bar code 

08:07:42.555 --> 08:07:45.029
scanning, face detection, and 
landmark recognition.

08:07:50.808 --> 08:07:53.078
We're also supporting custom 
APIs with TensorFlow lite model 

08:07:53.079 --> 08:07:55.079
serving.

08:07:57.177 --> 08:08:00.440
Please checkout these features 
at the Firebase website.  

08:08:00.441 --> 08:08:03.087
Meanwhile, we'll have a set of 
new features coming out soon, 

08:08:03.088 --> 08:08:05.739
including high-density face 
contour API, smart 

08:08:09.429 --> 08:08:12.698
reply API and model compression 
conversion service.  We'll soon 

08:08:12.699 --> 08:08:14.699
start to white list developers 
to try them out.

08:08:16.988 --> 08:08:21.093
If you are interested, please 
use this link here to sign up.  

08:08:24.598 --> 08:08:27.045
We're super-excited about ML kit
and how it potentially can help 

08:08:27.046 --> 08:08:29.499
developers build cool machine 
learning features.  

08:08:31.753 --> 08:08:33.753
Look forward to your feedback 
and we're 

08:08:35.782 --> 08:08:40.758
committed to making it great.  
Thanks for coming.  And if you 

08:08:40.759 --> 08:08:42.759
have questions, we'll be 

08:08:44.635 --> 08:08:46.635
available right after this talk 
at the 

08:08:49.728 --> 08:08:52.403
fair Sandbox Q&amp;A area and we're 
having relevant sessions and 

08:08:52.404 --> 08:08:54.847
talks for you to checkout.  
Finally, please leave your 

08:08:54.848 --> 08:08:56.848
feedback 

08:08:58.147 --> 08:09:01.191
about this session for us to 
improve for the future.  Thank 

08:09:01.192 --> 08:09:03.192
you.  
(Applause) .  

08:09:22.339 --> 08:09:24.411
&gt;&gt; Thank you for joining this 
session.  Brand ambassadors will

08:09:24.412 --> 08:09:26.660
assist with directing you 
through the designated exits. 

08:09:26.661 --> 08:09:29.533
We'll be making room for those 
who registered for the next 

08:09:29.534 --> 08:09:34.016
session.  If you have registered
for the next session in this 

08:09:34.017 --> 08:09:36.881
room, we ask that you please 
clear the room and return via 

08:09:36.882 --> 08:09:41.352
the registration line outside.  
Thank you.  

08:09:44.366 --> 08:09:46.366
(Session concluded)  

08:15:46.925 --> 08:15:47.334
.  
.  

08:15:47.335 --> 08:15:47.950
.  
.  

08:15:47.951 --> 08:15:48.782
.  
.  

08:15:48.783 --> 08:15:49.584
.  
.  

08:15:49.585 --> 08:15:51.450
.  
.  

08:15:51.451 --> 08:15:52.701
..
.  

08:15:52.702 --> 08:15:54.702
.  
.  

08:16:25.203 --> 08:16:25.403
use Lighthouse and Chrome UX 
report to optimize web app 

08:16:25.404 --> 08:16:27.404
performance.  

08:22:00.838 --> 08:22:02.838
..

08:26:16.576 --> 08:26:17.198
&gt;&gt; At this time, please find 
your seat.  Our session will 

08:26:17.199 --> 08:26:19.199
begin soon.  

08:29:11.200 --> 08:29:13.436
&gt;&gt; VINAMRATA SINGAL: Good 
afternoon, everyone.

08:29:16.918 --> 08:29:18.918
I've hellohello. 
&gt;&gt; VINAMRATA SINGAL: My name is 

08:29:19.749 --> 08:29:21.749
Vinamrata Singal, I work on 
Lighthouse 

08:29:28.805 --> 08:29:31.743
and other initiatives at Google 
I've my name is Rick Viscomi and

08:29:31.744 --> 08:29:33.744
I work on transparency tools and
the courtroom 

08:29:39.764 --> 08:29:42.753
experience reportreport. 
&gt;&gt; VINAMRATA SINGAL: Rick and 

08:29:42.754 --> 08:29:45.816
are here to tell you how to use 
Lighthouse and others for the 

08:29:45.817 --> 08:29:47.804
application.  I wanted to tell 
you about myself before we get 

08:29:47.805 --> 08:29:49.805
started so you know who you are 
talking to.  

08:29:49.942 --> 08:29:51.785
Fun fact about me, when I was 
growing up, I have grown-up in 

08:29:51.786 --> 08:29:54.222
four different countries, India,
Saudi Arabia, New Zealand, and 

08:29:54.223 --> 08:29:56.732
United States.  
What was interesting, as I was 

08:29:56.733 --> 08:30:00.827
growing up across the countries 
is having access to information 

08:30:00.828 --> 08:30:05.105
was really challenging.  Either 
because it was restricted for me

08:30:05.106 --> 08:30:07.106
and my family or because no one 

08:30:08.168 --> 08:30:10.844
around us had that information. 
That really changed when I 

08:30:10.845 --> 08:30:12.845
started learning how to use the 
web.  

08:30:15.185 --> 08:30:17.185
It made it so much easier to 
have access to that information.

08:30:19.079 --> 08:30:20.925
That is why I care about making 
sure the web is available for 

08:30:20.926 --> 08:30:23.175
everyone and is a great 
experience for all.

08:30:24.995 --> 08:30:26.995
But even as I was learning how 
to use 

08:30:28.063 --> 08:30:31.143
the web, there were pain points 
with that experience.  This is a

08:30:31.144 --> 08:30:33.194
picture of me as a kid in Saudi 
Arabia, on DSL Internet, if you 

08:30:34.841 --> 08:30:36.841
remember those days, learning 
how to use the Internet.

08:30:39.767 --> 08:30:41.767
It was really, really, really 
slow.

08:30:42.802 --> 08:30:44.644
What is interesting is the 
slowness and performance pain 

08:30:44.645 --> 08:30:48.336
hasn't go away for a lot of 
users.  At Google, we have seen 

08:30:48.337 --> 08:30:53.428
it has real implications for 
businesses as well.  So we have 

08:30:53.429 --> 08:30:55.429
been collecting a bunch of 

08:30:56.940 --> 08:30:57.749
data to show the impact 
performance can have for 

08:30:57.750 --> 08:31:02.845
businesses.  You might have seen
the study we did with double 

08:31:02.846 --> 08:31:05.327
click, for sites that load in 
less than five seconds, they 

08:31:05.328 --> 08:31:08.023
receive a bounce rate that is 
53% lower compared 

08:31:13.119 --> 08:31:15.119
to sites that load in more than 
five seconds.  

08:31:16.576 --> 08:31:19.012
Shoppers that have trouble with 
site performance, 79% don't come

08:31:19.013 --> 08:31:24.110
back.  Additionally for every 
second there is a delay in page 

08:31:24.111 --> 08:31:27.170
load time, there is a 7% drop in
conversion rate.  I want to 

08:31:27.171 --> 08:31:29.171
emphasize that again.

08:31:31.491 --> 08:31:33.546
For every extra second our site 
is slower, you can lose 7% of 

08:31:33.547 --> 08:31:35.824
your users. 
This is all to say that if you 

08:31:35.825 --> 08:31:38.281
are a business that is online, 
you should care about 

08:31:38.282 --> 08:31:40.282
performance.

08:31:42.958 --> 08:31:44.958
You might say to me,

08:31:46.507 --> 08:31:48.507
Vinamrata, I get it, what are 
the guidance, tools, and metric?

08:31:50.596 --> 08:31:52.596
For that, I say you have come to
the right place. 

08:31:55.063 --> 08:31:57.063
We hope to answer these 
questions and more.

08:31:58.543 --> 08:31:59.964
To give an overview, we will 
start off giving information 

08:31:59.965 --> 08:32:02.213
into performance metrics and 
kind of walk you through the 

08:32:04.242 --> 08:32:06.473
overall tooling and guidance 
landscape, Rick will take over, 

08:32:06.474 --> 08:32:10.334
tell you about the Chrome user 
experience support and I will 

08:32:10.335 --> 08:32:12.789
wrap us up with Lighthouse.  
Let's get started with 

08:32:12.790 --> 08:32:14.790
performance metrics.  

08:32:17.470 --> 08:32:19.321
When we talk about performance 
metrics, what we're talking 

08:32:19.322 --> 08:32:21.322
about is collecting data.

08:32:22.811 --> 08:32:24.811
There is two sources you want to
collect.  

08:32:26.016 --> 08:32:28.016
The

08:32:30.623 --> 08:32:33.085
first is lab data known as 
metrics from the lab.  This is 

08:32:33.086 --> 08:32:36.971
from a controlled environment.
It is useful for getting 

08:32:36.972 --> 08:32:38.972
granular 

08:32:40.793 --> 08:32:43.774
information from your site.  The
second type is field data, 

08:32:43.775 --> 08:32:45.775
metrics 

08:32:50.131 --> 08:32:54.034
from the dial or RUM, ownership 
-- or real user metrics.  This 

08:32:54.035 --> 08:32:56.035
is how real users experience the
performance of your site.  

08:32:56.677 --> 08:32:58.526
This is helpful in understanding
the ground truth of the 

08:32:58.527 --> 08:33:00.527
performance of your site.

08:33:02.585 --> 08:33:04.585
You might look

08:33:06.120 --> 08:33:08.120
at this image and think do I use
one or the other?

08:33:09.624 --> 08:33:11.624
In reality, you use them 
together. 

08:33:11.871 --> 08:33:12.886
You use field data to understand
the users, understand the 

08:33:12.887 --> 08:33:14.887
baseline performance of the 
site, where users are 

08:33:18.409 --> 08:33:19.858
coming from, what devices are 
they on?  What networks are they

08:33:19.859 --> 08:33:24.194
on?  That helps you calibrate 
the lab environment.  Once you 

08:33:24.195 --> 08:33:26.017
understand the baseline and 
whatever business or key 

08:33:26.018 --> 08:33:29.911
performance indicators you are 
trying to optimize for, then you

08:33:29.912 --> 08:33:32.067
can set goals around, you know, 
the targets for whatever you 

08:33:32.068 --> 08:33:35.930
want the performance to be.  
After you understand that, you 

08:33:35.931 --> 08:33:37.931
want to 

08:33:38.998 --> 08:33:40.626
start looking at the lab data, 
calibrated from what you saw in 

08:33:40.627 --> 08:33:44.688
the field to drill down, 
understand what parts of the 

08:33:44.689 --> 08:33:47.173
performance you need to improve,
as well as implement the 

08:33:48.812 --> 08:33:51.683
optimization to make the site 
faster.  Once you make 

08:33:51.684 --> 08:33:53.684
improvements in the lab, go back
to the field to make sure you 

08:33:56.189 --> 08:33:58.228
see the improvements in the lab,
in the wild and monitor the 

08:33:58.229 --> 08:34:00.229
performance of the site for 
regressions. 

08:34:01.942 --> 08:34:03.584
Now that we have spent time 
talking about where the 

08:34:03.585 --> 08:34:05.585
performance data comes 

08:34:08.219 --> 08:34:12.209
from, you might be asking, what 
data do I collect?  When we 

08:34:12.210 --> 08:34:15.051
think about the performance of a
site, we quantify how does the 

08:34:15.052 --> 08:34:17.107
real user experience the 
performance of the site?  

08:34:19.149 --> 08:34:21.000
There are two buckets of user 
experience.  The first bucket is

08:34:21.001 --> 08:34:24.103
what we call visual metrics.  
This is measuring how fast is 

08:34:24.104 --> 08:34:26.104
stuff getting painted on the 
screen?

08:34:28.627 --> 08:34:31.498
And there is the second bucket, 
which is interactivity metrics, 

08:34:31.499 --> 08:34:35.596
that is essentially measures, 
how quickly does your site 

08:34:35.597 --> 08:34:37.597
become usable for users?

08:34:40.542 --> 08:34:42.542
Under the bucks, we have 
specific metrics.

08:34:44.844 --> 08:34:46.844
We have metrics like

08:34:48.547 --> 08:34:50.547
first speed and pain index and 
time to interactive.

08:34:53.044 --> 08:34:55.044
To really understand what the 
metrics 

08:34:56.349 --> 08:35:00.880
mean, I think it is important to
visualize them in a time line.  

08:35:00.881 --> 08:35:04.350
We are trying to see how real 
users experience this.  In this 

08:35:04.351 --> 08:35:06.351
left, you have the first 
consent. 

08:35:06.614 --> 08:35:09.303
This means when the first piece 
of context appears on the 

08:35:09.304 --> 08:35:13.947
screen, text, image, SVG. 
This is pivotal in the user 

08:35:13.948 --> 08:35:18.924
experience.  This is where the 
user is like okay, the site is 

08:35:18.925 --> 08:35:23.847
using, doing something.  Very 
end is timed interactive.  For 

08:35:23.848 --> 08:35:25.523
the user, that means everything 
is loaded, they can interact 

08:35:25.524 --> 08:35:30.902
with any part of the page and it
just is responsive, it works.  

08:35:30.903 --> 08:35:32.534
And everywhere in the middle, 
you have what we call speed 

08:35:32.535 --> 08:35:34.535
index.

08:35:35.995 --> 08:35:38.459
Which is essentially measuring 
how quickly does the rest of the

08:35:38.460 --> 08:35:42.773
page load?  Speed index will 
reward pages that load a lot of 

08:35:42.774 --> 08:35:44.797
stuff earlier, because that is 
when the user feels very fast.

08:35:50.360 --> 08:35:51.582
We have actually seen a lot of 
developers have success with the

08:35:51.583 --> 08:35:53.583
tool kit of metrics.  

08:35:57.308 --> 08:35:59.374
I want to share an anecdote of 
users.  A lot of you heard of 

08:35:59.375 --> 08:36:01.375
Pinterest.

08:36:02.678 --> 08:36:05.535
We helped them upgrade the 
mobile web experience to 

08:36:05.536 --> 08:36:07.774
progressive web app and they 
wanted to improve the overall 

08:36:08.824 --> 08:36:10.824
interactivity of the experience.

08:36:12.378 --> 08:36:14.378
They improved the time from 26 
to 5.6 seconds.

08:36:16.622 --> 08:36:18.455
As a result of this, they saw a 
whole set of improvements across

08:36:18.456 --> 08:36:21.137
the business metrics.  So they 
saw an overall 40% increase in 

08:36:23.639 --> 08:36:24.861
the number of users who spend 
more than five minutes on the 

08:36:24.862 --> 08:36:27.293
site.
They saw 44% increase in the 

08:36:27.294 --> 08:36:29.294
amount of user generated ad 
revenue.

08:36:33.644 --> 08:36:35.681
They saw 50% increase in the ad 
click-through rate and 60% 

08:36:35.682 --> 08:36:38.545
increase in core engagement.  
All in all, this is awesome 

08:36:38.546 --> 08:36:43.104
work.  But what is interesting 
is I think we can still do 

08:36:43.105 --> 08:36:44.960
better to help developers 
understand interactivity 

08:36:44.961 --> 08:36:49.051
experience.  Specifically, I 
think the place to make a lot of

08:36:49.052 --> 08:36:50.889
impact is right now, time to 
interactive is only a lab 

08:36:50.890 --> 08:36:52.890
metric.

08:36:53.971 --> 08:36:56.039
I think we can do a better job 
of helping developers understand

08:36:56.871 --> 08:36:59.112
interactivity in the wild.  
How are users first starting to 

08:37:00.736 --> 08:37:02.570
understand the interactivity 
experience, especially when they

08:37:02.571 --> 08:37:04.571
come to your app for the first 
time.  

08:37:05.632 --> 08:37:07.711
I think in order to make this 
more concrete, I want to tell 

08:37:07.712 --> 08:37:09.712
you a story.

08:37:11.249 --> 08:37:14.336
Imagine for a second you are not
a developer, you are a user.  

08:37:14.337 --> 08:37:16.993
So pretend you just heard about 
this new 

08:37:21.279 --> 08:37:22.924
site, say it is Vinamrata cool 
store, you go to it on your 

08:37:22.925 --> 08:37:24.925
phone.

08:37:26.203 --> 08:37:27.850
It is loading, you are 
interacting with it, you click 

08:37:27.851 --> 08:37:31.753
on the button, nothing happens, 
you keep clicking on the button,

08:37:31.754 --> 08:37:34.026
nothing is happening.  Raise 
your hand if you ever had that 

08:37:34.850 --> 08:37:36.850
happen to you.  Yes, like 
everyone.

08:37:42.519 --> 08:37:44.519
KEER  -- keep your hands up.

08:37:46.251 --> 08:37:49.112
Keep your hand up if you felt 
frustrated by that experience.  

08:37:49.113 --> 08:37:51.365
It is like everyone, for those 
on the live stream.  Again, it 

08:37:51.366 --> 08:37:53.674
is a frustrating experience.  
Putting our user hat down, 

08:37:53.675 --> 08:37:57.985
again, putting a developer hat 
back on, we can probably 

08:37:57.986 --> 08:37:59.986
understand why something like 
this would happen.  

08:38:01.063 --> 08:38:03.063
One explanation for this is the 
browser 

08:38:05.596 --> 08:38:07.596
is done rendering, all the HTML,
SS, 

08:38:09.855 --> 08:38:11.855
because of the Javascript, you 
browser 

08:38:13.337 --> 08:38:15.574
is take time to input the 
browser script.  When the new 

08:38:15.575 --> 08:38:19.060
interaction is coming through, 
it doesn't have time to interact

08:38:19.061 --> 08:38:21.745
because of the Javascript it 
has.  This is the user 

08:38:21.746 --> 08:38:23.793
experience we want to minimize 
with the metric called first 

08:38:26.678 --> 08:38:29.117
input delay, which we are 
introducing today.  First input 

08:38:29.118 --> 08:38:31.118
delay is measuring the latency 
with the user's first 

08:38:31.361 --> 08:38:33.813
interaction with the page.  This
means that from the time the 

08:38:33.814 --> 08:38:38.511
user interacts with your page, 
the time when that happens to 

08:38:38.512 --> 08:38:40.512
the time when the code that you 
wrote to respond to that 

08:38:41.405 --> 08:38:44.460
interaction actually runs.  
And we think really focusing on 

08:38:44.461 --> 08:38:48.342
the first user experience is 
really critical.  As you saw a 

08:38:48.343 --> 08:38:50.438
couple of slides ago, a lot of 
users leave if the first 

08:38:51.688 --> 08:38:53.688
experience is terrible. 

08:38:54.767 --> 08:38:57.483
You want to optimize business 
metrics like bounce rate and 

08:38:57.484 --> 08:38:59.930
conversion rate, you want the 
first experience to be solid. 

08:38:59.931 --> 08:39:04.431
We're working on the definition 
of the metric and 

08:39:04.432 --> 08:39:06.432
messagemessaging.  We encourage 
you to give us feedback.

08:39:08.788 --> 08:39:10.788
There is a link to docks and 

08:39:11.884 --> 08:39:14.742
Javascript polyfill to use and 
put on the website.  Check it 

08:39:14.743 --> 08:39:17.812
out, please give us feedback on 
the polyfill repo.  

08:39:20.766 --> 08:39:22.825
Now that we spent a bunch of 
time talking about metrics, 

08:39:22.826 --> 08:39:24.893
let's transition to talking 
about the overall tooling and 

08:39:26.543 --> 08:39:31.868
guidance.  So this is an 
overview of all the tools 

08:39:31.869 --> 08:39:34.156
published on Google about site 
performance.  One of the most 

08:39:34.157 --> 08:39:36.157
common questions we 

08:39:37.638 --> 08:39:39.472
get is like, Google you put all 
the tools how, how do I navigate

08:39:39.473 --> 08:39:43.132
this?  How do I use this?  
What tool should I be using?  

08:39:43.133 --> 08:39:48.864
Great question.  
Ironically, we built a tool to 

08:39:48.865 --> 08:39:51.729
help you understand this.  
Not ironically, it is awesome.

08:39:57.655 --> 08:39:59.899
This is the e-tools -- speed 
tools overview.  It helps you 

08:39:59.900 --> 08:40:01.761
understand, for if I want to 
build a business case for 

08:40:01.762 --> 08:40:03.762
performance 

08:40:04.796 --> 08:40:06.796
so my company invests in it, to 
oh, 

08:40:08.800 --> 08:40:10.247
like, I want to get nitty-gritty
into performance or all the use 

08:40:10.248 --> 08:40:11.871
cases in between help you 
understand what tool to use.  

08:40:11.872 --> 08:40:15.323
I encourage you to check it out,
you know, give us feedback about

08:40:15.324 --> 08:40:18.613
things you think are missing.  
We're looking forward to hearing

08:40:18.614 --> 08:40:21.499
more from you.  
So now that we have covered a 

08:40:21.500 --> 08:40:26.388
little bit about tooling, 
metrics, we thought it would be 

08:40:26.389 --> 08:40:30.461
really helpful to do a deep-dive
into tools in particular.  I 

08:40:30.462 --> 08:40:33.141
will hand it off to Rick now, 
who will tell you about the 

08:40:33.142 --> 08:40:38.055
Chrome user experience report.  
&gt;&gt; RICK VISCOMI: Thank you.  

08:40:38.056 --> 08:40:42.366
So when we talk about metrics 
from the field, most people 

08:40:42.367 --> 08:40:44.367
think of traditional 

08:40:45.870 --> 08:40:48.126
real user measurement or RUM, 
where you measure things like 

08:40:48.127 --> 08:40:51.571
performance, page road, page 
views, conversion.  This is 

08:40:51.572 --> 08:40:53.572
great for understanding the 

08:40:55.851 --> 08:40:57.851
user experience on your own

08:40:59.998 --> 08:41:01.851
site, but how do we understand 
the user experience on the web 

08:41:01.852 --> 08:41:03.852
as a whole?

08:41:05.384 --> 08:41:08.842
How do we know if it is getting 
faster or usable?  How do we 

08:41:08.843 --> 08:41:10.843
know if the use is normal?

08:41:12.316 --> 08:41:13.554
For that, we need a different 
set that represent the web at 

08:41:13.555 --> 08:41:15.555
large.  

08:41:19.476 --> 08:41:21.309
The Chrome UX report, known as 
crux helps us understand the 

08:41:21.310 --> 08:41:23.310
web.

08:41:24.572 --> 08:41:25.801
It is data from real Chrome 
users.  Let's see how it works. 

08:41:28.806 --> 08:41:31.276
When you have a data set that 
covers the web at large, it 

08:41:31.277 --> 08:41:35.176
enables analyses that were never
before possible.  You can 

08:41:35.177 --> 08:41:37.430
compare real user performance 
across particular sites and see 

08:41:37.431 --> 08:41:42.255
how you stack up against 
competitors.  In this example, 

08:41:42.256 --> 08:41:44.288
we can see that competitor B is 
slightly faster than my website.

08:41:48.477 --> 08:41:52.277
This is a really good motivator 
for me to care about web 

08:41:48.477 --> 08:41:52.428
performance.  It is one thing to
know how fast my site is, but it

08:41:52.429 --> 08:41:54.886
is another to see how much 
faster or slower it is compared 

08:41:54.887 --> 08:42:00.032
to the competition.  
Additionally, the Chrome UX 

08:42:00.033 --> 08:42:03.336
report is updated monthly.  
You can track your performance 

08:42:04.590 --> 08:42:06.865
benchmarks over time.  As I 
optimize the performance of my 

08:42:08.711 --> 08:42:10.538
site, I can see the gains in 
each iteration of the report. 

08:42:13.619 --> 08:42:15.268
Alternatively, I can see my 
competitor is investing in 

08:42:15.269 --> 08:42:17.269
performance and I need to catch 
up approximate.

08:42:19.659 --> 08:42:21.659
So what exactly does the Chrome 
UX report measure?

08:42:24.549 --> 08:42:26.549
It includes visual metrics 
Vinamrata mentioned earlier.

08:42:30.212 --> 08:42:32.212
First first and first content 
pink. 

08:42:35.305 --> 08:42:37.305
And visual like on content and 
download.

08:42:38.774 --> 08:42:40.798
My download is first content and
paint.  It reflects the real 

08:42:40.799 --> 08:42:43.689
user experience of feeling like 
the page is loading.

08:42:46.978 --> 08:42:48.978
It includes useful dimensions 
for slicing the data.

08:42:51.693 --> 08:42:53.693
Like the form factor of the 
users 

08:42:54.983 --> 08:42:56.983
device, desktop, phone, tablet, 
and the 

08:42:59.752 --> 08:43:01.752
effective connection time,

08:43:03.513 --> 08:43:05.547
3G, 2G, 4G, this is the 
effective speed, not advertised 

08:43:05.548 --> 08:43:11.258
network.  A user on slow Wi-Fi 
would be considered 2G.  Another

08:43:11.259 --> 08:43:13.711
dimension that early users 
requested is the ability to 

08:43:13.712 --> 08:43:16.344
slice by country.  
With it, you can see how the 

08:43:16.345 --> 08:43:20.429
user experience varies by 
geography.  It can help you 

08:43:20.430 --> 08:43:23.095
understand how much slower the 
user experience is in places 

08:43:24.960 --> 08:43:26.960
farther away from the web 
service.

08:43:28.261 --> 08:43:30.728
There are two ways the data is 
aggregated, by URL and by 

08:43:30.729 --> 08:43:32.979
origin.  How does the origin 
differ from the URL?  

08:43:35.819 --> 08:43:37.044
It starts with the protocol, 
either it is secure or not 

08:43:37.045 --> 08:43:39.045
secure.

08:43:41.550 --> 08:43:45.217
The subdomain, for example, WWW,
mail, no subdomain at all.  And 

08:43:45.218 --> 08:43:47.218
of course, the domain, Google.
com or example.

08:43:52.589 --> 08:43:54.009
com which includes suffixes like
dot com, what it doesn't include

08:43:54.010 --> 08:43:56.010
is the path after the domain.

08:43:59.917 --> 08:44:01.917
Index, 

08:44:03.526 --> 08:44:05.526
productslash one, two, three.

08:44:07.870 --> 08:44:09.870
All of those are developed at 
the origin level.

08:44:15.406 --> 08:44:18.269
This has grown 400X since it was
first announced at the Chrome 

08:44:18.270 --> 08:44:23.394
dev center.  It is your website 
that may or may not be included,

08:44:23.395 --> 08:44:25.827
depending on popularity.  
Okay, you are probably wondering

08:44:25.828 --> 08:44:27.828
how do you start using it?

08:44:32.800 --> 08:44:34.800
The raw data is available on 
Google Vickary.  

08:44:37.516 --> 08:44:39.516
You can write queries for 
information 

08:44:41.987 --> 08:44:43.987
about specific origins or web as
a whole.  

08:44:44.718 --> 08:44:46.718
The first content full paint is 
less than one second.

08:44:49.226 --> 08:44:51.226
It is broken down by two 
hypothetical competitors.  

08:44:53.897 --> 08:44:56.613
Developers and 
Chrome.Google.com.  The results 

08:44:56.614 --> 08:44:59.910
are informative, but hard to 
understand by looking at it.  

08:44:59.911 --> 08:45:03.008
What we're trying to understand 
is which origin is faster?  How 

08:45:03.009 --> 08:45:05.009
are they trending?

08:45:06.689 --> 08:45:08.689
To help answer that, let's 
visualize the data. 

08:45:09.961 --> 08:45:11.961
We can integrate with two tools,
sheets and data studio.

08:45:15.078 --> 08:45:16.908
You will notice on the BigQuery 
results, there is a button to 

08:45:16.909 --> 08:45:20.563
sheets.  That will create a new 
sheet, populate it with a table 

08:45:20.564 --> 08:45:23.849
of data.  From there it is easy 
to create a simple chart to 

08:45:23.850 --> 08:45:26.934
visualize the performance data. 
It is clear from this chart that

08:45:29.384 --> 08:45:31.384
developers at Google.

08:45:34.855 --> 08:45:36.855
com, there is the first density 
of

08:45:39.382 --> 08:45:44.611
content full paint.  It 
fluctuates.  Why?  Not just 

08:45:44.612 --> 08:45:46.612
because it is faster or slower.

08:45:47.657 --> 08:45:49.657
It could be the user population.

08:45:50.711 --> 08:45:52.711
The users on faster or slower 
connections could be changing.

08:45:55.413 --> 08:45:58.045
You can integrate with with 
Google studio.  And you can 

08:45:58.046 --> 08:46:00.046
build interactive 

08:46:01.389 --> 08:46:03.678
dashboards, get data from the 
BigQuery.  This shows one way to

08:46:03.679 --> 08:46:07.131
monitor the distribution of 
performance metrics over time.  

08:46:07.132 --> 08:46:11.657
What if you don't want to work 
to get this data, you just want 

08:46:11.658 --> 08:46:13.658
high-level results now?

08:46:15.148 --> 08:46:17.388
There are a few Google tools 
built on the Chrome UX report to

08:46:17.389 --> 08:46:19.389
give you insights quickly.

08:46:21.929 --> 08:46:23.929
The first is page insights, used
to include the performance data.

08:46:27.501 --> 08:46:29.501
Alongside the performance 
population recommendations.

08:46:31.342 --> 08:46:33.342
The insights are built on the 
URL 

08:46:34.477 --> 08:46:36.477
aggregated dat app approximate  
-- data.

08:46:38.797 --> 08:46:41.264
This is more than you can get on
BigQuery.  Here is the UIL.

08:46:45.396 --> 08:46:47.484
This is the first down full 
paint and metrics and indicator 

08:46:47.485 --> 08:46:49.532
in how fast or slow it is in 
relation to the rest of the web.

08:46:52.500 --> 08:46:54.500
It

08:46:58.054 --> 08:47:00.538
turns out the IO web page is 
considered slow.  You can get a 

08:47:00.539 --> 08:47:02.539
sense for how skewed user 
experiences really are.

08:47:05.019 --> 08:47:07.019
In this case, we see most 
content full paints are fast.

08:47:09.313 --> 08:47:11.365
But 82% of down content loaded 
experiences are considered slow.

08:47:13.006 --> 08:47:16.700
Another Google tool built on the
Chrome UX report is the speed 

08:47:16.701 --> 08:47:18.701
scorecard.

08:47:20.971 --> 08:47:23.748
This tool allows you to enter 
multiple websites and stack rank

08:47:23.749 --> 08:47:25.749
their 

08:47:27.796 --> 08:47:29.800
performance and enables you to 
target specific geographic 

08:47:29.801 --> 08:47:31.801
regions to see how performance 
varies.

08:47:32.836 --> 08:47:33.038
It has something I love, a way 
to correlate performance metrics

08:47:33.039 --> 08:47:35.039
with business metrics like 
revenue.

08:47:37.132 --> 08:47:39.132
It estimates how much more 
revenue can 

08:47:41.468 --> 08:47:44.953
be earned if nothing else 
changed but site performance.  

08:47:44.954 --> 08:47:46.803
You use the slider for the 
performance and predicted effect

08:47:46.804 --> 08:47:49.254
on revenue.  
This is another great motivator 

08:47:49.255 --> 08:47:53.349
to invest in performance not 
just for developers, but 

08:47:53.350 --> 08:47:56.608
especially business leaders who 
think in dollars.  

08:47:59.246 --> 08:48:01.313
Last, I wanted to share a case 
study of how the Chrome UX 

08:48:01.314 --> 08:48:04.804
report is used outside of 
Google.  Impulse is a real user 

08:48:04.805 --> 08:48:06.805
measurement 

08:48:07.809 --> 08:48:09.809
product from ACMI.

08:48:14.610 --> 08:48:16.462
It is using the Chrome UX report
to care about real user 

08:48:16.463 --> 08:48:18.759
measurement.  For example, some 
companies don't have 

08:48:22.051 --> 08:48:23.684
any RUM tools and may be relying
on lab testing like web page 

08:48:23.685 --> 08:48:26.114
test which only gives them a 
narrow view of their 

08:48:26.115 --> 08:48:28.115
performance.

08:48:29.385 --> 08:48:32.286
ACMI can show the companies the 
real user performance in the 

08:48:32.287 --> 08:48:34.287
Chrome UX report which may be 
vastly different from the 

08:48:34.727 --> 08:48:36.727
performance in the lab.

08:48:38.398 --> 08:48:40.227
Just image the surprise to learn
that users experience your site 

08:48:40.228 --> 08:48:43.088
many times slower than your lab 
tests indicate.

08:48:46.542 --> 08:48:49.391
ACMI is looking to integrate 
this data with the M pulse 

08:48:49.392 --> 08:48:52.477
product.  
Recall with metrics from the web

08:48:52.478 --> 08:48:55.944
as a whole, it is possible to 
see performance of competitors.

08:49:00.827 --> 08:49:03.678
With M pulse, you can see the 
real user and competitor 

08:49:03.679 --> 08:49:07.950
performance alongside their own.
Site owners can understand how 

08:49:07.951 --> 08:49:10.398
they stack up in specific 
markets. 

08:49:13.871 --> 08:49:15.910
The charts shown here indicate 
how different sites perform, 

08:49:15.911 --> 08:49:17.911
especially on mobile.

08:49:19.222 --> 08:49:20.646
This is exactly the kind of 
thing that makes the Chrome UX 

08:49:20.647 --> 08:49:22.694
report so powerful.  
Understanding how your site's 

08:49:25.563 --> 08:49:27.197
performance fits in the larger 
picture of the performance on 

08:49:27.198 --> 08:49:29.680
the web as a whole.  This is a 
small taste of the power of 

08:49:35.608 --> 08:49:37.608
the Chrome UX pore  power 
setting.

08:49:38.689 --> 08:49:40.689
We had the April data set 
released 

08:49:42.992 --> 08:49:45.470
this week, looking to add more 
user inpit, like first input.  

08:49:45.471 --> 08:49:48.957
We're working with others to get
this integrated into more third 

08:49:48.958 --> 08:49:51.829
party tools.  I will hand it 
back to Vinamrata to 

08:49:54.909 --> 08:49:55.914
tell you about Lighthouse. 
&gt;&gt; VINAMRATA SINGAL: Thank you, 

08:49:55.915 --> 08:50:02.653
Rick.  You guys can clap.
(Applause) (Applause) .  

08:50:02.654 --> 08:50:06.338
Awesome.  More audience 
participation here.  Can you 

08:50:06.339 --> 08:50:08.339
raise your hand if you ever used
Lighthouse before?

08:50:10.790 --> 08:50:14.252
Oh, awesomeawesome yay!  Those 
that haven't, Lighthouse is a 

08:50:17.797 --> 08:50:19.034
developer tool you can run today
on your website.  It basically 

08:50:19.035 --> 08:50:20.874
gives you personalized advice 
about what you are doing well 

08:50:20.875 --> 08:50:23.724
and what you can do better 
across five different 

08:50:23.725 --> 08:50:26.989
categories.  
Performance, progressive web 

08:50:26.990 --> 08:50:31.735
apps, accessibility, best 
practices, search engine 

08:50:31.736 --> 08:50:34.185
optimization or SEO.  You can 
run it through four different 

08:50:34.186 --> 08:50:36.186
ways.

08:50:38.569 --> 08:50:41.219
You can run it as a stand-lone 
Lighthouse extension, in the 

08:50:41.220 --> 08:50:46.109
audit panel, Chrome developer 
tools, MPM module and the 

08:50:46.110 --> 08:50:48.110
command to install it, if you 
choose to. 

08:50:49.365 --> 08:50:51.365
And you can run it on web page 
test.  

08:50:52.041 --> 08:50:53.693
Now, I want to take a step back 
and tell you a little bit about 

08:50:53.694 --> 08:50:58.169
the journey we have taken on the
product side to give you a 

08:50:58.170 --> 08:51:00.170
little bit of context of where 
we're going. 

08:51:06.439 --> 08:51:08.439
This is a screen shot of Paul 
Irish a 

08:51:10.469 --> 08:51:13.721
tech lead announcing Lighthouse 
at developer summit.  We 

08:51:13.722 --> 08:51:16.374
understand there is information 
sent to developers on things to 

08:51:16.375 --> 08:51:18.375
do to create good web 
experiences.  

08:51:20.479 --> 08:51:23.280
We want it to be the one-stop 
shop to go to, to get all the 

08:51:23.281 --> 08:51:26.944
advice in one place.  We have 
been hard at work on making this

08:51:26.945 --> 08:51:29.598
tool as comprehensive as 
possible.  We have launched over

08:51:29.599 --> 08:51:32.856
100 audits into the report.  
Including a whole new section, 

08:51:32.857 --> 08:51:34.857
focused 

08:51:36.358 --> 08:51:38.358
on search engine optimization 
this year.

08:51:39.406 --> 08:51:41.406
You have seen a lot of doings in
the community.  

08:51:41.866 --> 08:51:43.866
Specifically in 2018 alone, you 
have 

08:51:47.611 --> 08:51:49.678
seen over 500,000 users running 
over two million-plus audits, 

08:51:49.679 --> 08:51:51.679
which is great.

08:51:53.551 --> 08:51:54.813
We hear stories from developers 
about success they're having on 

08:51:54.814 --> 08:51:56.814
house.  I want to share a 
favorite.  

08:51:57.080 --> 08:51:59.080
This is Milan.

08:52:00.590 --> 08:52:02.590
This is a fashion e-Commerce 
retailer, 

08:52:04.284 --> 08:52:07.147
based out of China they used 
Lighthouse to make performance 

08:52:07.148 --> 08:52:09.148
improvements and progressive 
app.

08:52:11.048 --> 08:52:15.968
They improved the Lighthouse PWA
score by 57 points to 100.  They

08:52:15.969 --> 08:52:18.846
improved the Lighthouse 
performance score by 35 points 

08:52:18.847 --> 08:52:21.554
to a 65.  
As a result of just making the 

08:52:21.555 --> 08:52:25.028
two improvements, they were able
to see a 10% increase in the 

08:52:25.029 --> 08:52:27.029
mobile conversion 

08:52:29.775 --> 08:52:32.430
rates as well as a 65% decrease 
in their ad bounce rate.  So 

08:52:32.431 --> 08:52:34.464
pretty awesome stuff.  We also 
know that on the Lighthouse 

08:52:36.700 --> 08:52:38.764
team, there is a lot to do to 
make the product even better for

08:52:38.765 --> 08:52:41.820
y'all to use.  So I will 
summarize this as the top user 

08:52:41.821 --> 08:52:45.909
request.  So the first user 
request we get especially from 

08:52:45.910 --> 08:52:48.204
people who are looking at the 
Lighthouse report for the first 

08:52:50.699 --> 08:52:51.949
time is hey, like, can you make 
this report easier to 

08:52:51.950 --> 08:52:55.026
understand?  Because it is kind 
of cluttered, kind of confusing.

08:52:57.072 --> 08:52:59.072
So that is one request we get.

08:53:00.148 --> 08:53:01.994
The other request we get is I 
love Lighthouse, but the 

08:53:01.995 --> 08:53:05.913
performance metrics and scores 
change from run to run, even if 

08:53:05.914 --> 08:53:08.766
I am running in the same way.  
Can you make Lighthouse more 

08:53:08.767 --> 08:53:14.116
stable?  And the third is I love
Lighthouse, it is awesome.  But 

08:53:14.117 --> 08:53:16.188
I don't want to run it on one 
site.  I want to run it on 

08:53:16.189 --> 08:53:18.189
hundreds of thousands of sites.

08:53:21.713 --> 08:53:23.713
Can I conduct a bolt analysis 
using Lighthouse?

08:53:25.394 --> 08:53:27.011
Today I will walk you through 
how to do all three of those 

08:53:27.012 --> 08:53:29.275
with stuff we're working on.  Go
to the first one, to make the 

08:53:30.745 --> 08:53:33.074
report easier to understand. 
We take this concern seriously 

08:53:33.075 --> 08:53:36.341
and we did an entire usability 
study earlier part of this year.

08:53:38.790 --> 08:53:40.860
Taking results from the study, 
we came up with the new UI, 

08:53:40.861 --> 08:53:43.316
which you can see today.  You 
can see this in the mobile web 

08:53:46.388 --> 08:53:48.388
Sandbox, if you try using 
Lighthouse there.

08:53:49.430 --> 08:53:51.430
The personal favorite did which 
you 

08:53:53.330 --> 08:53:55.330
can't see from the screen shot, 
when you 

08:53:57.806 --> 08:53:59.806
hover over the metrics, a tool 
comes up, 

08:54:01.790 --> 08:54:02.803
if you don't see first CPU idle,
you can get a better 

08:54:02.804 --> 08:54:05.845
understanding of what it is.  
This is launches with 3.0, which

08:54:05.846 --> 08:54:07.846
we are planning on releasing 
this week.

08:54:10.110 --> 08:54:15.294
You can get 3.0 today, through 
MPM, with Lighthouse at next.  

08:54:15.295 --> 08:54:16.725
It is the default way to run 
Lighthouse on the Chrome 

08:54:16.726 --> 08:54:21.849
extension, which we are 
releasing later this week and 

08:54:21.850 --> 08:54:23.503
coming to dev tools in Chrome 
68.  If you want more 

08:54:23.504 --> 08:54:25.504
information about 

08:54:26.990 --> 08:54:30.289
everything else coming in 3.0, 
checkout that doc over there.  I

08:54:30.290 --> 08:54:32.145
will run through more updates, 
but that has all the 

08:54:32.146 --> 08:54:35.024
information. 
Let's move on to talking about 

08:54:35.025 --> 08:54:38.326
the second concern folks have 
with Lighthouse which is around 

08:54:38.327 --> 08:54:40.547
the performance score. 
These are scores that I got for 

08:54:40.548 --> 08:54:44.884
a website that I will not name. 
For their performance score of 

08:54:44.885 --> 08:54:47.966
their site.  This was just 
consecutive runs one after the 

08:54:47.967 --> 08:54:51.045
other.  This is a problem we 
have known for a very long time.

08:54:54.126 --> 08:54:56.126
And there is -- we had a 
concerted 

08:54:57.216 --> 08:54:59.437
effort since last year to work 
on it, it is called project 

08:54:59.438 --> 08:55:01.438
lantern.

08:55:03.141 --> 08:55:06.416
It has the best logo ought of 
all the logos created.  To 

08:55:06.417 --> 08:55:08.646
understand what it does, I want 
to tell you how Lighthouse 

08:55:08.647 --> 08:55:11.108
computes metrics today.  When 
Lighthouse is computing the 

08:55:13.568 --> 08:55:16.461
performance metrics of the site,
it is throttling your page, 

08:55:16.462 --> 08:55:19.349
trying to emulate it as if it 
were a user on a mobile 

08:55:23.370 --> 08:55:25.905
device on a 3G  network and 
computing it.

08:55:29.393 --> 08:55:31.631
Landern changes this, it tries 
to estimate based on the inputs 

08:55:31.632 --> 08:55:35.572
you give it based on what 
network and device the user is 

08:55:35.573 --> 08:55:37.573
on to compute the performance 
metrics itself.

08:55:39.535 --> 08:55:41.160
Using this approach, we have 
seen a 50% reduction in the 

08:55:41.161 --> 08:55:43.611
amount of variability in the 
Lighthouse 

08:55:47.271 --> 08:55:49.271
performance score while 
maintaining 

08:55:51.400 --> 08:55:53.880
accuracy with the dev tools 
throttling.  It reduce the 

08:55:53.881 --> 08:55:55.881
amount of time to warm 

08:55:58.190 --> 08:55:58.997
up and run Lighthouse by 50%, 
which is annoying to some 

08:55:58.998 --> 08:56:00.998
people.

08:56:02.475 --> 08:56:06.572
You might ask, how does lantern 
do this stuff?  I will give you 

08:56:06.573 --> 08:56:09.477
a high, broad level walk through
of how it does what it does. 

08:56:09.478 --> 08:56:13.567
The first thing lantern does is 
gets a static list of the assets

08:56:13.568 --> 08:56:18.461
that are necessary in order to 
render your page.  In this 

08:56:18.462 --> 08:56:20.462
extremely contrived example, 

08:56:25.405 --> 08:56:27.680
it is the index in HTML, along 
with the blocking, Java script, 

08:56:27.681 --> 08:56:33.030
it knows the weight, it takes 
into act the RTT, the time to 

08:56:33.031 --> 08:56:37.133
transport one packet based -- in
this case 150 milliseconds.  

08:56:37.134 --> 08:56:39.769
This number is estimated based 
on two variables on the right, 

08:56:39.770 --> 08:56:41.770
which it is the 

08:56:42.881 --> 08:56:44.881
network throughput and CPU 
throttling.

08:56:46.571 --> 08:56:49.020
Using the RTT and knowing the 
size of the assets required to 

08:56:49.021 --> 08:56:51.021
be transferred in 

08:56:53.743 --> 08:56:54.752
order to render the site, 
lantern can predict the 

08:56:54.753 --> 08:56:56.784
performance metrics.  You can 
see the things to occur in 

08:57:00.074 --> 08:57:02.074
order to open the network are 
taken into account.

08:57:04.200 --> 08:57:06.473
It gives a high level of how 
lantern works.  It is the 

08:57:06.474 --> 08:57:08.474
default for Lighthouse starting 
with 3.0. 

08:57:09.964 --> 08:57:11.964
If you want to get started on 

08:57:13.829 --> 08:57:15.262
understanding lantern and using 
it, get 3.0, the way I showed 

08:57:15.263 --> 08:57:18.141
you earlier. 
I want to move on to talking 

08:57:18.142 --> 08:57:21.811
about scale.  Specifically 
scaling Lighthouse.  And today, 

08:57:21.812 --> 08:57:24.716
I'm happy to announce that we've
been working on an API, the 

08:57:28.872 --> 08:57:31.945
Lighthouse API, an API to get 
results from any URL.  I am 

08:57:31.946 --> 08:57:35.487
excited.  I think it unlocks use
cases people have been talking 

08:57:35.488 --> 08:57:37.488
to us about.

08:57:39.168 --> 08:57:40.601
The first is it allows you to 
build dashboards, contract your 

08:57:40.602 --> 08:57:43.090
home page, landing page and site
pages you might have.

08:57:45.595 --> 08:57:47.494
Second, you can build tools on 
top of Lighthouse and integrate 

08:57:47.495 --> 08:57:50.782
Lighthouse into whatever 
continuous integration test feed

08:57:50.783 --> 08:57:52.783
that you might have.

08:57:54.729 --> 08:57:56.784
Finally, conduct large-scale 
data analysis using Lighthouse 

08:57:56.785 --> 08:58:00.442
itself.  This is an overview of 
what the API currently looks 

08:58:00.443 --> 08:58:02.488
like, for those of you who use 
Lighthouse on the command line, 

08:58:04.552 --> 08:58:06.781
you can see it is pretty similar
to what the command line would 

08:58:06.782 --> 08:58:08.782
give you, except 

08:58:10.676 --> 08:58:12.676
we made it more ergonomic for 
people's use.

08:58:13.964 --> 08:58:16.849
The current status of the API is
it is in private beta.  We are 

08:58:16.850 --> 08:58:18.705
working with a couple of 
partners to iterate on the 

08:58:18.706 --> 08:58:23.826
definition.  If you are 
interested in intrigued by the 

08:58:23.827 --> 08:58:26.702
API I will have more information
later on in the talk on for the 

08:58:26.703 --> 08:58:29.881
access.
We're planning to launch it as a

08:58:29.882 --> 08:58:32.276
free public Google service very 
soon. 

08:58:34.346 --> 08:58:36.002
I want to take a little bit of 
time why I am personally excited

08:58:36.003 --> 08:58:40.705
about I API.  One of the things 
I was mentioning earlier, we 

08:58:40.706 --> 08:58:42.793
have all the tools and we're 
trying to align our tooling 

08:58:42.794 --> 08:58:45.450
story together, but one of the 
problems we've 

08:58:48.744 --> 08:58:50.744
had in that is we don't have a 
common 

08:58:51.788 --> 08:58:54.745
infrastructure that all the 
tools can rely upon in order to 

08:58:54.746 --> 08:58:56.817
align the tools.  I think that 
Lighthouse API gets us one step 

08:58:56.818 --> 08:58:58.633
closer, because it kind of 
creates a pipeline that a bunch 

08:58:58.634 --> 08:59:00.912
of other tools can use in order 
to align all the tools together.

08:59:03.166 --> 08:59:04.808
I'm sure you will see more 
tooling alignment initiatives in

08:59:04.809 --> 08:59:06.809
the future.  

08:59:09.150 --> 08:59:11.386
So now you might be wondering, 
as an external developer, who 

08:59:11.387 --> 08:59:15.073
can Lighthouse do for me?  I 
want to tell you what two 

08:59:15.074 --> 08:59:17.074
partners 

08:59:18.368 --> 08:59:20.638
did with the Lighthouse API.  
The first is mobify.

08:59:24.702 --> 08:59:25.719
That is a platform to build 
customer first shopping 

08:59:25.720 --> 08:59:27.720
experiences through apps and 
mobile pages.

08:59:30.042 --> 08:59:32.042
Some include can comb, car 
parts.

08:59:36.034 --> 08:59:37.441
As part of the lan comb, and the
analytics dashboard for business

08:59:37.442 --> 08:59:41.176
leaders and retailers to monitor
performance and customer 

08:59:41.177 --> 08:59:43.177
engagement. 

08:59:45.494 --> 08:59:47.955
In order to make this process 
easier in monitoring customer 

08:59:47.956 --> 08:59:49.956
performance they 

08:59:51.571 --> 08:59:53.704
integrated API into the dash
board, this is what it looks 

08:59:53.705 --> 08:59:58.650
like.  This helps the business 
leaders to get an understanding 

08:59:58.651 --> 09:00:00.651
of the metrics reported to what 
they might care about.

09:00:02.765 --> 09:00:04.765
This is a live example of how 
one of 

09:00:06.034 --> 09:00:08.702
mobify's clients, a letting 
British retailer actually uses 

09:00:08.703 --> 09:00:13.046
the data provided by the API to 
correlate the scores with bounce

09:00:13.047 --> 09:00:15.047
rate, a metric they care about.

09:00:16.315 --> 09:00:18.185
I'm excited for this use case 
because I think it helps 

09:00:18.186 --> 09:00:20.186
business leaders understand the 
return of investment that 

09:00:21.922 --> 09:00:23.922
they're getting for putting work
into 

09:00:24.986 --> 09:00:26.986
performance and makes it that 
much more obvious.  

09:00:28.699 --> 09:00:30.699
So the second partner that I 
want to 

09:00:32.759 --> 09:00:34.759
talk about is duda.  

09:00:36.546 --> 09:00:40.014
They're currently over 12 
million sites built using duda. 

09:00:40.015 --> 09:00:42.267
Duda wants to make sure whatever
sites are being built that 

09:00:42.268 --> 09:00:45.582
they're fast.  Especially as 
they add new functionality to 

09:00:45.583 --> 09:00:50.462
the platform.  They're actually 
using Lighthouse to add 

09:00:50.463 --> 09:00:52.463
progressive web app functional 
to the platform.  

09:00:54.774 --> 09:00:56.850
Now with API this is easy 
because they integrate 

09:00:56.851 --> 09:00:58.851
Lighthouse into the continuous 
integration pipeline.

09:01:03.196 --> 09:01:05.443
Duda uses check ins to do the 
continuous integration test.  

09:01:05.444 --> 09:01:07.701
They added Lighthouse as a 
component.

09:01:10.793 --> 09:01:12.419
They're able to set threshold 
for the developer, if it doesn't

09:01:12.420 --> 09:01:15.920
meet the threshold, they fail to
build, in this case, a build is 

09:01:15.921 --> 09:01:20.236
failed and they dig into the 
report to understand what audits

09:01:20.237 --> 09:01:22.055
are passing, what are failing.  
Again, this unlocks a use case 

09:01:22.056 --> 09:01:26.772
we heard from a lot of 
developers with Lighthouse, 

09:01:26.773 --> 09:01:29.447
which is once you do all the 
work, to make your site fast and

09:01:29.448 --> 09:01:31.448
how do you keep it that way?

09:01:34.180 --> 09:01:36.180
I think API makes it easy, 
because you 

09:01:38.201 --> 09:01:40.201
can integrate it into whatever 

09:01:41.265 --> 09:01:42.787
continuous integration system 
you have, duda planned once it 

09:01:42.788 --> 09:01:44.788
is launched to 

09:01:46.872 --> 09:01:48.485
release the plug in to the 
checkins it is that much easier 

09:01:48.486 --> 09:01:50.486
to get started from Lighthouse.

09:01:51.986 --> 09:01:53.839
I want to thank duda and mobify 
for all the work to pull the 

09:01:53.840 --> 09:01:55.880
demos together.  They're 
awesome.

09:01:58.803 --> 09:02:00.803
I'm even more excited to see 
what you do with the API. 

09:02:02.075 --> 09:02:04.809
If you are intrigued to the 
demos and you want early access 

09:02:04.810 --> 09:02:06.810
to the API, sign up on the 
interest form over here.  

09:02:08.095 --> 09:02:09.917
A member of the team will be in 
touch with you very, very 

09:02:09.918 --> 09:02:11.918
shortly.

09:02:13.256 --> 09:02:16.113
I wait until the phones go down.
Oh, okay.  

09:02:16.935 --> 09:02:20.812
Still going.  Awesome. 
Okay.  So I'm going to wrap up 

09:02:20.813 --> 09:02:23.260
the talk.  Rick and I talked 
about a lot of stuff.

09:02:26.263 --> 09:02:28.723
I want to wrap it up with some 
key take aways, of which there 

09:02:28.724 --> 09:02:32.808
is only one.  But the main take 
away that I hope you get is that

09:02:32.809 --> 09:02:34.443
there are two kinds of 
performance data that we care 

09:02:34.444 --> 09:02:39.986
about.  There is lab data and 
field data.  Lab data is 

09:02:39.987 --> 09:02:42.442
essentially data that you 
collect in a control lab-like 

09:02:44.685 --> 09:02:46.343
environment, helpful for 
drilling down into specific 

09:02:46.344 --> 09:02:48.344
performance information 

09:02:50.019 --> 09:02:52.724
and getting granular and 
nitty-gritty.  Field data is 

09:02:52.725 --> 09:02:54.725
useful if you want to understand
the source of truth about the 

09:02:54.763 --> 09:02:57.403
performance of the site.  It is 
essentially data you collect to 

09:02:59.044 --> 09:03:00.478
understand how real users are 
experiencing the performance of 

09:03:00.479 --> 09:03:02.300
the site.  
Lighthouse is a tool that can 

09:03:02.301 --> 09:03:04.301
give you 

09:03:07.491 --> 09:03:09.737
lab data and the Chrome user 
experience report Rick talked 

09:03:09.738 --> 09:03:12.818
about can give you field data.  
A talk by a project manager 

09:03:12.819 --> 09:03:15.270
wouldn't be complete without 
action items.

09:03:16.316 --> 09:03:20.612
I will list four.  Take out your
phone, take pictures, I will go 

09:03:20.613 --> 09:03:23.489
through this quickly. 
The first action item is about 

09:03:23.490 --> 09:03:25.490
input 

09:03:26.751 --> 09:03:28.751
delay, the main activity input 
in the wild.  

09:03:30.455 --> 09:03:32.506
If you are interested in how 
real users are dealing with the 

09:03:32.507 --> 09:03:34.539
interactivity of the website, 
check first input delay.

09:03:37.599 --> 09:03:39.831
Here is a link to the dock and 
the polyfill.  Give us feedback.

09:03:42.925 --> 09:03:44.925
The second is around speed tools
interview.

09:03:45.945 --> 09:03:47.175
This is a tool to help you 
understand what tool to use when

09:03:47.176 --> 09:03:50.509
you think about the performance 
of your site.  

09:03:52.380 --> 09:03:52.983
Finally, the Chrome user 
experience report Rick talked 

09:03:52.984 --> 09:03:57.473
about.  If you want to 
understand how to baseline your 

09:03:57.474 --> 09:03:59.474
performance statistics, do 

09:04:01.136 --> 09:04:03.136
competitor analyses and all the 
really 

09:04:04.901 --> 09:04:08.366
cool use cases, checkout Chrome 
experience report.  And always 

09:04:08.367 --> 09:04:10.611
making it better. 
Finally, Lighthouse, you can run

09:04:10.612 --> 09:04:12.612
it on 

09:04:15.359 --> 09:04:18.898
the browse if you use Chrome.
Here's the early interest form. 

09:04:18.899 --> 09:04:23.452
And that's it.  So thank you so 
much, everyone, for coming.  I 

09:04:23.453 --> 09:04:26.918
know it is like 5:00 p.m. on a 
Wednesday.  So really appreciate

09:04:26.919 --> 09:04:29.577
all your time.  
We are going to stick around for

09:04:29.578 --> 09:04:34.479
a little bit if you have 
additional questions, but you 

09:04:34.480 --> 09:04:36.762
can find us at Sandbox G.  
We'll be there most of tomorrow.

09:04:38.386 --> 09:04:40.386
Come say I had.  

09:04:44.738 --> 09:04:46.772
I'm Vinamrata, have a great rest
of your I/O.  Thank you so much.

09:04:49.028 --> 09:04:51.057
&gt;&gt; RICK VISCOMI: Thank you.  
(Applause) .  

09:05:34.074 --> 09:05:36.567
&gt;&gt; Thank you for joining this 
session.  Brand ambassadors will

09:05:36.568 --> 09:05:38.568
assist with 

09:05:40.017 --> 09:05:42.017
directing you through the 
designated exits. 

09:05:42.255 --> 09:05:44.255
We'll make room for those who 
registered for the next session.

09:05:44.532 --> 09:05:46.385
If you registered for the next 
session in this room, we ask 

09:05:46.386 --> 09:05:49.451
that you please clear the room 
and return via the registration 

09:05:49.452 --> 09:05:52.324
line outside.
Thank you.  

09:05:55.793 --> 09:05:57.793
(Session concluded)  

09:12:12.157 --> 09:12:12.572
.  
.  

09:12:12.573 --> 09:12:13.192
.  
.  

09:12:13.193 --> 09:12:14.021
.  
.  

09:12:14.022 --> 09:12:14.619
.  
.  

09:12:14.620 --> 09:12:15.444
.  
.  

09:12:15.445 --> 09:12:16.273
.  
.  

09:12:16.274 --> 09:12:17.293
.  
.  

09:12:17.294 --> 09:12:19.294
.
.

09:12:59.863 --> 09:13:04.768
Droid Jetpack easy background 
processing with Work Manager. 

09:25:35.412 --> 09:25:38.100
&gt;&gt; At this time, please find 
your seat.  Our session will 

09:25:38.101 --> 09:25:40.101
begin soon.  

09:29:10.383 --> 09:29:12.383
&gt;&gt; SUMIR KATARIA: Hi, everyone.

09:29:13.655 --> 09:29:17.128
My name is Sumir Kataria and 
work on the Android team.  I 

09:29:17.129 --> 09:29:19.129
work with Architecture 
Components 

09:29:21.028 --> 09:29:23.918
and I want to talk about 
WorkManager and background 

09:29:23.919 --> 09:29:25.919
processing in general on 
Android.  

09:29:28.226 --> 09:29:30.495
Let's talk about background 
processing in 2018.  What are we

09:29:30.496 --> 09:29:32.496
trying to do these days.  

09:29:34.148 --> 09:29:37.037
This morning, I was trying to 
send a picture of my lovely wife

09:29:37.038 --> 09:29:39.506
and beautiful son to the rest of
my family.  That is an example.

09:29:43.165 --> 09:29:45.165
We're syncing logs, processing 
data, syncing data.

09:29:46.000 --> 09:29:47.829
That is work being done in the 
background.  In Android, there 

09:29:47.830 --> 09:29:50.280
are a lot of different ways to 
do this work.  Here's a lot of 

09:29:50.281 --> 09:29:52.281
them.

09:29:53.764 --> 09:29:55.764
You can do things on threads, 

09:29:59.503 --> 09:30:03.017
executors, using job scheduler, 
async tasks, et cetera.  What 

09:30:03.018 --> 09:30:05.018
should you use, when should you 
use it?  

09:30:06.272 --> 09:30:07.511
There is a lot of Android 
battery optimizations we used 

09:30:07.512 --> 09:30:09.512
over the last couple of years.

09:30:14.261 --> 09:30:16.261
We introduced doze mode and 
Marshmallow.

09:30:18.482 --> 09:30:21.119
We have had app stand by 
buckets.  In Oreo we restricted 

09:30:21.120 --> 09:30:23.348
background services.  All of 
these have to be taken care of 

09:30:24.005 --> 09:30:26.005
as a developer.

09:30:27.316 --> 09:30:29.316
Finally, we always have to worry
about backwards compatibility.

09:30:33.680 --> 09:30:35.680
If you want to reach 90% of 
Android 

09:30:36.753 --> 09:30:39.186
devices you need to have at 
least Kit Kat.  Given all of 

09:30:39.187 --> 09:30:42.694
this, what tools do you use, 
when do you use them?  And the 

09:30:42.695 --> 09:30:44.316
trick behind this is that you 
have to look at the types of 

09:30:44.317 --> 09:30:46.317
background 

09:30:48.277 --> 09:30:52.229
work you are doing.
I like to split this up in two 

09:30:52.230 --> 09:30:56.568
axes.  The vertical is the 
timing of the work.  Does the 

09:30:56.569 --> 09:30:59.247
work need to be done right when 
specified or can it wait for a 

09:31:02.126 --> 09:31:04.159
little bit so if your device 
enters doze mode, you can still 

09:31:04.160 --> 09:31:08.236
do it after that.  
Also, on the horizontal axis 

09:31:08.237 --> 09:31:11.913
here, how important is the work?
Does the work only need to be 

09:31:11.914 --> 09:31:16.828
done while your apps in the 
foreground, or does it 

09:31:16.829 --> 09:31:18.829
absolutely need to be done at 
some point?

09:31:21.150 --> 09:31:23.788
So for example, if you're taking
a bit map and you decide you 

09:31:23.789 --> 09:31:25.789
want to extract a 

09:31:26.843 --> 09:31:28.886
color from it and update your UI
with it, that is an example of 

09:31:28.887 --> 09:31:31.349
foreground only work.  You don't
care once the user hits home 

09:31:34.439 --> 09:31:37.090
or back, the work is irrelevant.
If you are sending logs, you 

09:31:37.091 --> 09:31:39.959
always want that to happen, that
is an example of guaranteed 

09:31:39.960 --> 09:31:44.702
execution.  So for things that 
are best effort, you really want

09:31:44.703 --> 09:31:46.703
to use things like 

09:31:47.763 --> 09:31:49.763
thread pools, RX Java, core 
routines.

09:31:50.792 --> 09:31:53.065
For things that require exact 
timing and guaranteed execution,

09:31:53.066 --> 09:31:55.775
you want to use a foreground 
service.  So an example of this 

09:31:55.776 --> 09:31:58.415
would be that the user hits a 
button and you want to 

09:32:03.348 --> 09:32:05.213
process a transaction and update
the UI and the state of the app 

09:32:05.214 --> 09:32:09.317
based on that.  That needs a 
foreground service.  That cannot

09:32:09.318 --> 09:32:11.590
be killed by the system while 
that's happening.  

09:32:13.221 --> 09:32:15.465
This fourth category is very 
interesting.  You want 

09:32:15.466 --> 09:32:19.746
guaranteed execution, but you're
okay if it happens later.  Doze 

09:32:19.747 --> 09:32:21.747
mode can kick in.

09:32:23.219 --> 09:32:25.219
There is a variety of ways to 
solve it.

09:32:26.691 --> 09:32:28.691
On your API you will use job 
scheduler.

09:32:31.028 --> 09:32:33.266
If you want to go farther back, 
use Firebase job descriptor.  

09:32:33.267 --> 09:32:36.728
You will probably use alarm 
managers and broadcast 

09:32:36.729 --> 09:32:38.729
receivers.

09:32:39.804 --> 09:32:42.274
If you want to target all of 
those things you will use a mix 

09:32:42.275 --> 09:32:45.529
of those things and that is a 
lot of API.  A lot of work to be

09:32:45.530 --> 09:32:47.530
done.  
WorkManager falls here.

09:32:50.657 --> 09:32:52.657
It is guaranteed execution 
that's deferrable.  

09:32:55.132 --> 09:32:57.192
So WorkManager let's talk about 
its features.  I mentioned 

09:32:57.193 --> 09:32:59.193
guaranteed execution is also 
constrained aware.

09:33:01.262 --> 09:33:03.486
So if I want to upload that 
photo I talked about, I want to 

09:33:03.487 --> 09:33:05.487
do it only when I have a 
network.

09:33:06.163 --> 09:33:08.411
That is the constraint.  It is 
also respectful of the system 

09:33:09.642 --> 09:33:11.642
background restrictions.

09:33:12.731 --> 09:33:14.760
If your app is in doze mode, it 
won't execute.  It won't wake up

09:33:14.761 --> 09:33:16.761
the phone just to do this work.

09:33:19.286 --> 09:33:21.286
It is backwards compatible, with
or without Google Play services.

09:33:22.790 --> 09:33:25.427
The API is per able.  If you 
have queued some work, you can 

09:33:26.443 --> 09:33:29.103
check what is the state?  Is it 
running?  Has it succeeded or 

09:33:29.104 --> 09:33:33.999
failed?  These are things you 
can find out with WorkManager.  

09:33:34.000 --> 09:33:36.000
It is also chainable.

09:33:37.065 --> 09:33:39.526
You can create graphs of work.  
You can have work A depending on

09:33:39.527 --> 09:33:41.527
work 

09:33:42.733 --> 09:33:44.733
A and

09:33:45.857 --> 09:33:48.496
C, which depends on work D.  
It is opportunistic, it will 

09:33:48.497 --> 09:33:53.419
execute the work in the process 
when the constraints are met 

09:33:53.420 --> 09:33:55.674
without needing job scheduler to
intervene or call you and wake 

09:33:55.675 --> 09:34:00.628
you up.  It doesn't work for job
scheduler to batch your work if 

09:34:00.629 --> 09:34:04.156
your process is up and running 
already.  Let's talk about the 

09:34:04.157 --> 09:34:06.157
basics and talk through the 
code.

09:34:07.854 --> 09:34:11.524
So I just described the example 
I want to upload that photo.  So

09:34:11.525 --> 09:34:13.338
how would I do that using 
WorkManager?  Let's talk about 

09:34:13.339 --> 09:34:16.592
the core classes.  There is the 
worker class.  This is the class

09:34:16.593 --> 09:34:19.244
that does the work. 
This is where you will write 

09:34:19.245 --> 09:34:21.494
most of the business logic and 
there is a work 

09:34:24.726 --> 09:34:25.272
request class, which comes in 
two flavors one-time work 

09:34:25.273 --> 09:34:28.190
request or things that need to 
be done once and periodic 

09:34:32.214 --> 09:34:36.759
work request for recurring work.
These will both take a worker.  

09:34:36.760 --> 09:34:38.760
I will show you now. 

09:34:40.305 --> 09:34:44.171
So here's the upload photo 
worker.  It extends the worker 

09:34:40.305 --> 09:34:42.495
class.  It overrides the do work
method.  This is a method that 

09:34:42.496 --> 09:34:44.686
will run in the background.  
We'll take care of that on the 

09:34:45.919 --> 09:34:47.541
background thread, you don't 
need to put it in the background

09:34:47.542 --> 09:34:49.542
thread.  

09:34:53.109 --> 09:34:55.176
See, simply do your work, this 
is done photo synchronously.  

09:34:58.903 --> 09:35:00.903
In this case, let's say we 
succeeded.

09:35:02.356 --> 09:35:04.356
The worker has three values, 
success, 

09:35:06.034 --> 09:35:07.257
failure, fairly obvious and 
retry says I encountered a 

09:35:07.258 --> 09:35:09.258
transient error.

09:35:11.167 --> 09:35:13.465
The device lost network connect 
so retry me in a little bit.

09:35:16.545 --> 09:35:18.371
Now that I have this, I can 
create a one-time work request 

09:35:18.372 --> 09:35:20.372
using the upload 

09:35:23.847 --> 09:35:26.004
photo worker and then I can 
queue it using WorkManager in 

09:35:26.005 --> 09:35:28.845
get instance in queue.  Soon 
after it is queued, it is 

09:35:30.893 --> 09:35:32.116
running, you will upload your 
photo. 

09:35:32.117 --> 09:35:34.571
I just talked about this.  
What if you lose connectivity 

09:35:34.572 --> 09:35:38.245
before this, or whatever if you 
never had connectivity, you want

09:35:38.246 --> 09:35:41.305
to use constraints in this case.
An example of the constraint 

09:35:41.306 --> 09:35:46.070
here you want to use is make a 
constraints builder and you say 

09:35:46.071 --> 09:35:49.334
set required network to be 
connected.  You need a connected

09:35:49.335 --> 09:35:52.185
network.  
Connection, you build, it you 

09:35:52.186 --> 09:35:56.085
also set the constraints on the 
request that you just built.

09:35:59.188 --> 09:36:01.232
By simply doing this and queuing
it, you make sure it runs only 

09:36:01.233 --> 09:36:03.233
when your network is connected.

09:36:05.935 --> 09:36:07.592
So let's say we want to absorb 
the work now that we have done 

09:36:07.593 --> 09:36:12.299
it.  I want to show a spinner 
while this work is executing and

09:36:12.300 --> 09:36:14.961
I want to hide the spinner when 
it is done.  How would I do 

09:36:14.962 --> 09:36:16.962
that?  

09:36:19.242 --> 09:36:21.242
As I said, I will enqueue this 
request.

09:36:22.533 --> 09:36:24.533
Then I can say get status by 
I.D.

09:36:26.035 --> 09:36:27.650
on WorkManager using the request
I.D.

09:36:27.651 --> 09:36:29.651
Each request has an I.D.

09:36:31.987 --> 09:36:34.016
This is a live data of the work 
status.  If you Architecture 

09:36:34.017 --> 09:36:36.017
Components, live 

09:36:38.090 --> 09:36:40.334
data is a life cycle aware 
observable.  Now you can hook 

09:36:40.335 --> 09:36:42.568
into the observable.  You can 
say when the work is finished, 

09:36:44.812 --> 09:36:48.930
hide the progress bar.  
So what is the work status 

09:36:48.931 --> 09:36:52.029
object you were looking at, at 
the live data?  It has an I.D.

09:36:52.216 --> 09:36:55.085
The same as a request.  And it 
has a state.

09:36:58.731 --> 09:37:00.731
The state is the current state 
of execution.  

09:37:01.580 --> 09:37:04.434
There are six values here in 
queue, running, succeeded, 

09:37:04.435 --> 09:37:06.435
failed, locked, canceled.  

09:37:08.467 --> 09:37:11.630
We'll talk about the last two 
later.  So let's move a step up 

09:37:11.631 --> 09:37:15.301
in concept here.  Let's talk 
about chaining work.  I promise 

09:37:15.302 --> 09:37:17.302
that you can actually make 

09:37:18.782 --> 09:37:21.645
directed graphs of work. 
How would you do that?  Let's 

09:37:21.646 --> 09:37:24.321
say this is the problem.  I'm 
uploading a video.  It is a huge

09:37:24.322 --> 09:37:26.322
video.

09:37:30.018 --> 09:37:32.018
I want to compress it and upload
it.  

09:37:32.467 --> 09:37:34.467
These are time-intensive things.

09:37:35.927 --> 09:37:38.568
Say I have two workers compress 
photo worker, upload photo 

09:37:38.569 --> 09:37:42.500
worker, both defined to the do 
the things I said.  You can make

09:37:42.501 --> 09:37:44.744
work requests from them, you can
say WorkManager, begin with 

09:37:47.199 --> 09:37:50.275
compressed work, then upload 
work and enqueue it.  It ensures

09:37:50.276 --> 09:37:53.562
the compressed work executes 
first.  Once it is successful, 

09:37:53.563 --> 09:37:58.486
then upload work goes.  
If you were to write this out, 

09:37:58.487 --> 09:38:02.338
because that was a very fluent 
way of writing it, what happens 

09:38:02.339 --> 09:38:04.339
behind the scenes here 

09:38:05.417 --> 09:38:07.446
is that begin with returns of 
work continuation.  And work 

09:38:07.447 --> 09:38:09.889
continuation has a method called
then, that also returns a work 

09:38:12.217 --> 09:38:14.854
continuation, a different one.  
So you're using that to create 

09:38:14.855 --> 09:38:21.082
the fluent API.  You can use the
work continuation and pass them 

09:38:21.083 --> 09:38:25.154
around, if you want, et cetera. 
So let's say I'm uploading 

09:38:25.155 --> 09:38:27.155
multiple photos.

09:38:28.240 --> 09:38:30.240
No one takes only one photo of 
their child.

09:38:31.299 --> 09:38:33.299
How would I upload all of these 
in parallel?

09:38:34.560 --> 09:38:36.560
Well, say I've got work request 
for all of them.

09:38:41.529 --> 09:38:45.421
I can literally say dot enqueue 
and upload all of them.  These 

09:38:45.422 --> 09:38:47.422
are all eligible for running in 
parallel.

09:38:48.911 --> 09:38:50.911
They may not actually run in 
parallel 

09:38:52.131 --> 09:38:55.881
and the executor being used, all
of that, but they could be.  

09:38:55.882 --> 09:38:59.556
Let's choose a more complex 
example.  You want to filter 

09:38:59.557 --> 09:39:04.705
your photo.  You want to apply 
some gray scale filter or some 

09:39:04.706 --> 09:39:06.968
filter to them, you want to 
compress them, then upload them.

09:39:08.238 --> 09:39:11.086
How do you do this?  
WorkManager makes it simple.  

09:39:14.354 --> 09:39:16.354
First you say do all the filter 
works in parallel.  

09:39:16.999 --> 09:39:18.856
After those have all completed 
successfully, then do the 

09:39:18.857 --> 09:39:20.857
compression work.

09:39:22.156 --> 09:39:24.395
After those have completed, and 
that completed successfully, 

09:39:24.396 --> 09:39:27.873
then you do the upload work and 
don't forget to enqueue at the 

09:39:27.874 --> 09:39:30.520
end.  
So we have talked about all of 

09:39:30.521 --> 09:39:33.793
that, but there is a key concept
I want to cover that is very 

09:39:33.794 --> 09:39:35.794
much related to chaining.

09:39:37.075 --> 09:39:39.916
This is inputs and outputs.  So 
let's talk about this problem 

09:39:39.917 --> 09:39:42.398
that I have here.
It is a map reduce.

09:39:46.065 --> 09:39:47.891
It is really a good way of 
explaining a map reduce is to 

09:39:47.892 --> 09:39:49.892
give an example.  I love 
reading.

09:39:54.443 --> 09:39:56.458
I have loved reading Sherlock 
Holmes novels since I was a kid.

09:39:59.267 --> 09:40:03.067
I was thinking the other day, 
there is a specific way of 

09:39:59.267 --> 09:40:03.517
writing.  What are the top 10 
words he uses in his books?  How

09:40:03.518 --> 09:40:05.518
would I figure that out.

09:40:06.568 --> 09:40:09.413
I would go through each book, 
count the occurrence of each 

09:40:09.414 --> 09:40:12.272
word, combine the data, sort it 
to find the top 10 of those.  

09:40:17.781 --> 09:40:19.789
This is a distributed problem 
that we can call a map reduce.

09:40:24.802 --> 09:40:29.068
And for inputs and outputs, the 
common unit of operation here is

09:40:24.802 --> 09:40:28.606
a data.  The data is a simple 
class that is a key value map 

09:40:28.607 --> 09:40:30.607
under the hood.

09:40:31.916 --> 09:40:34.161
The keys are strings, the values
are primitives and strings and 

09:40:34.162 --> 09:40:36.162
the array versions of each.  

09:40:41.191 --> 09:40:43.191
This is a bundle or parsable, 
but it's its own thing.

09:40:45.526 --> 09:40:47.782
It is limited to 10 kilobytes in
size.  We'll go more into that 

09:40:47.783 --> 09:40:49.783
part later. 
How do we create a data?

09:40:54.723 --> 09:40:56.723
In cogland, you can make a map. 

09:40:59.003 --> 09:41:01.472
You map the -- that is the novel
I will look at.  I will convert 

09:41:01.473 --> 09:41:03.473
it to a work data.  

09:41:05.568 --> 09:41:10.923
This is a data object.  Once a 
create the work request builder,

09:41:10.924 --> 09:41:12.924
I can set the input data on it.

09:41:14.340 --> 09:41:16.660
This is the input data on that 
map.

09:41:20.380 --> 09:41:22.862
Inside the worker, I can 
retrieve this by getting the 

09:41:22.863 --> 09:41:24.863
input method, and I can 

09:41:26.120 --> 09:41:28.120
get the string for the file 
names, now I have the file name.

09:41:29.857 --> 09:41:31.471
I can say count all the word 
occurrences in this file name, 

09:41:31.472 --> 09:41:35.165
that is a method I have written 
somewhere else.  I can return my

09:41:35.166 --> 09:41:39.477
success.  You don't want to do 
just that, you actually want to 

09:41:39.478 --> 09:41:41.128
have outputs, right?  
You have done all this work.  

09:41:41.129 --> 09:41:44.420
It should do something.  It 
should be an output for it.  

09:41:44.421 --> 09:41:49.306
Say that method that we have 
returns a map of words to their 

09:41:49.307 --> 09:41:51.307
occurrences.

09:41:53.180 --> 09:41:55.797
We can convert that map to a 
work data and we can call a 

09:41:55.798 --> 09:41:57.798
method called set output data 
that sets this data.

09:42:05.063 --> 09:42:07.159
So get input data, set output 
data.  

09:42:10.946 --> 09:42:13.411
The key observation to know here
is the worker output is the 

09:42:13.412 --> 09:42:16.296
output for its children.  
What happens is the five top 10 

09:42:16.297 --> 09:42:18.297
words 

09:42:19.343 --> 09:42:20.766
worker, which goes next, its 
input data is coming from the 

09:42:20.767 --> 09:42:22.767
previous worker.

09:42:24.039 --> 09:42:26.039
So in this case, you can pass 
the data 

09:42:27.119 --> 09:42:31.974
all the way through, find the 
top 10 words and return out.  

09:42:31.975 --> 09:42:33.991
The data flow for one book 
becomes like this.  Count all 

09:42:33.992 --> 09:42:36.434
the word occurrences in that 
book.  I will pass it to the 

09:42:36.435 --> 09:42:39.340
find top 10 words worker. 
Its input data will be whatever 

09:42:39.341 --> 09:42:42.622
I pass through and it will do 
the sorting or whatever it needs

09:42:42.623 --> 09:42:44.871
to do.  But here's a really 
tricky thing. 

09:42:46.502 --> 09:42:48.502
What happens when you have 
multiple books?

09:42:50.378 --> 09:42:52.378
What is the input for find top 
10 words worker?

09:42:54.593 --> 09:42:57.438
You are passing multiple pieces 
of data, but I have only been 

09:42:57.439 --> 09:42:59.872
able to get one input data.  
What happens to the rest of 

09:42:59.873 --> 09:43:01.873
them?  How do they combine?

09:43:04.341 --> 09:43:06.341
For that, you want to look at 
input mergers.  

09:43:06.774 --> 09:43:09.710
Input merger is a class that 
combines data for multiple 

09:43:09.711 --> 09:43:12.015
sources into one data object. 
And we provide two 

09:43:12.016 --> 09:43:17.143
implementations out of the box, 
overriding input merger, which 

09:43:17.144 --> 09:43:19.177
is the default and array 
creating input merger.  You can 

09:43:19.178 --> 09:43:23.270
also create your own.  
Let's talk about these two.  

09:43:23.271 --> 09:43:28.361
First, overriding input mergers.
We have two data objects here.  

09:43:28.362 --> 09:43:31.229
Each with their own keys and 
values.  And what does 

09:43:31.230 --> 09:43:33.918
overriding input merger do?  It 
first takes the first piece of 

09:43:33.919 --> 09:43:35.919
data 

09:43:37.611 --> 09:43:39.248
and just puts everything in a 
new data object.  It is an exact

09:43:39.249 --> 09:43:42.718
copy of this.  It takes a second
piece of data and copies it 

09:43:42.719 --> 09:43:45.563
over.  So overriding anything 
that is the same key.

09:43:49.453 --> 09:43:51.453
So in this case, the name Alice 

09:43:54.136 --> 09:43:57.001
becomes Bob and the age of 30 
becomes three days.  Not that 

09:43:57.002 --> 09:43:58.625
the date changed type.  The 
number became a string here.  

09:44:02.310 --> 09:44:04.754
The scores key was new, it just 
got added.  Note if we did this 

09:44:04.755 --> 09:44:07.844
in reverse, instead of Bob, you 
would have Alice as the final 

09:44:07.845 --> 09:44:11.250
output.  So this is something a 
little tricky. 

09:44:13.297 --> 09:44:14.356
You want to make sure overriding
input merger is the right tool 

09:44:14.357 --> 09:44:18.029
for the job, but it is very 
simple.  What about array 

09:44:18.030 --> 09:44:20.717
creating input merger?  
This is the one that takes care 

09:44:20.718 --> 09:44:23.798
of the collision case.  
So in this case, let's go 

09:44:23.799 --> 09:44:25.799
through this key by key.

09:44:28.322 --> 09:44:30.322
The name becomes an array of 
Alice and 

09:44:32.867 --> 09:44:34.693
Bob, color becomes Singleton 
array of blue because it is only

09:44:34.694 --> 09:44:36.694
defined in one of them.

09:44:38.202 --> 09:44:40.202
Scores, notice that there is one

09:44:41.314 --> 09:44:44.235
integer and one array of 
integers, these combine and 

09:44:44.236 --> 09:44:46.679
order is not specified, all the 
values come through.  What 

09:44:46.680 --> 09:44:48.680
happens for age?

09:44:50.276 --> 09:44:52.317
There is an integer and there is
a spring.  -- string.

09:44:54.364 --> 09:44:56.000
This is an exception, we expect 
it to be the same basic value 

09:44:56.001 --> 09:44:59.467
type.  
So let's go back to that example

09:44:59.468 --> 09:45:03.565
I was telling you about Sherlock
Holmes.  

09:45:06.806 --> 09:45:08.887
Implicitly, there is an input 
merger before this stage.  We 

09:45:08.888 --> 09:45:10.888
combine all of that data.  

09:45:11.938 --> 09:45:14.247
Which input merger do we want to
use.  We don't want to throw 

09:45:14.248 --> 09:45:17.520
away the calculation we have 
done.  We want to use an array 

09:45:17.521 --> 09:45:22.399
creating merger to preserve all 
of the data and get it through. 

09:45:22.400 --> 09:45:25.319
How do we do that?  We say set 
input merger on the request 

09:45:28.824 --> 09:45:31.051
builder off the find top 10 
words and it creates the array 

09:45:31.052 --> 09:45:36.800
data input merger.  You say 
begin with account words worker,

09:45:36.801 --> 09:45:38.801
do the top 10 words worker and 
then enqueue.

09:45:42.359 --> 09:45:44.359
For example, if the first book 
had 10 

09:45:47.467 --> 09:45:49.879
instances of the word Sherlock, 
five Watson, 30 of elementary, 

09:45:49.880 --> 09:45:51.880
you will get arrays like this.

09:45:56.100 --> 09:45:58.100
10, 12, Sherlock, elementary, 
30, 5.

09:46:01.633 --> 09:46:03.633
You would sum that up, sort 
them, find the top 10.  

09:46:03.670 --> 09:46:06.226
That is the output.  I just said
that is your output.

09:46:09.498 --> 09:46:11.341
You can actually observe the 
output in the work status using 

09:46:11.342 --> 09:46:13.981
the live data.  You can get that
output data.

09:46:18.070 --> 09:46:20.738
That is super useful because you
can put it in the UI.  How do 

09:46:20.739 --> 09:46:25.640
you cancel work?  I decided to 
send up a picture, I am like 

09:46:25.641 --> 09:46:27.641
wait this is not the picture I 
meant to send up.

09:46:32.292 --> 09:46:34.806
How do you cancel that upload?  
Very simple.  You say cancel 

09:46:34.807 --> 09:46:36.429
work by I.D. but do note 
cancellation is best effort.  

09:46:36.430 --> 09:46:38.430
The work may have already 
finished.

09:46:41.600 --> 09:46:43.418
These are all asynchronous 
things that may be happening in 

09:46:43.419 --> 09:46:48.604
the background before you have 
the chance to do the cancel work

09:46:48.605 --> 09:46:50.605
it may be already running or 
finished.  

09:46:50.880 --> 09:46:55.300
It is best effort. 
Okay.  Let's talk more about 

09:46:55.301 --> 09:46:57.301
tags.

09:47:00.810 --> 09:47:02.810
Tags are solving this problem.  
I.D.

09:47:06.210 --> 09:47:08.210
s are auto generated not human 
readable. 

09:47:08.251 --> 09:47:10.884
They're under the hood.  You 
can't understand them.  

09:47:14.158 --> 09:47:16.185
They're not useful for 
debugging.  What work is 

09:47:16.186 --> 09:47:18.636
running, I don't know a big 
number.  I don't know what that 

09:47:18.637 --> 09:47:20.637
is.  Tags solve this issue.

09:47:24.370 --> 09:47:27.063
Tags are readable ways to 
identify your work.  Tags are 

09:47:27.064 --> 09:47:29.309
strings identified by you.
Each request can have zero or 

09:47:29.310 --> 09:47:32.782
more tags.  You can query or 
cancel work by tag.  

09:47:33.803 --> 09:47:35.803
Look at an example.

09:47:37.066 --> 09:47:39.066
So I used to work on the G plus 
team here.

09:47:43.336 --> 09:47:46.236
The G plus apps are multilog in.
Each user could do several kinds

09:47:46.237 --> 09:47:48.275
of background work.  You can get
favors, preferences.

09:47:52.404 --> 09:47:55.061
So if you have three users 
logged in on your phone, they're

09:47:55.062 --> 09:47:58.736
doing two kinds of work, you 
have six things happening, how 

09:47:58.737 --> 09:48:00.364
do you identify what you are 
looking at, at any given time?

09:48:00.365 --> 09:48:02.365
You can use tags.

09:48:06.095 --> 09:48:07.933
So for example, in this work 
request builder, you can add 

09:48:07.934 --> 09:48:09.934
tags to say this is 

09:48:12.306 --> 09:48:14.306
user one, this is the get 
favorites operation.  

09:48:14.335 --> 09:48:16.335
You can actually identify that 
work.

09:48:18.028 --> 09:48:20.464
If you want to look at the 
status, you can say give me the 

09:48:20.465 --> 09:48:23.184
work for user one.  
This will return a list of work 

09:48:23.185 --> 09:48:27.283
statuses as a live data. 
Each tag will correspond to more

09:48:27.284 --> 09:48:29.323
than one work request.  
This is a list of work statuses.

09:48:31.772 --> 09:48:33.772
Similarly, you can also cancel 
all work by tag.  

09:48:34.661 --> 09:48:36.707
Cancellation is best effort, 
again.  Cancel all of one 

09:48:36.708 --> 09:48:38.708
particular kind of 

09:48:40.175 --> 09:48:42.175
work in this case.

09:48:43.472 --> 09:48:45.472
Tags are also useful for a 
couple of other reasons.

09:48:47.578 --> 09:48:51.265
Tags, name space your type of 
work, like I told you.  You can 

09:48:51.266 --> 09:48:53.502
have tags for the kinds of 
operations you're doing, get 

09:48:53.503 --> 09:48:55.503
favorites, get preferences, et 
cetera.

09:48:58.223 --> 09:49:00.223
But they also name space 
libraries and modules.

09:49:01.921 --> 09:49:03.921
A library owner or module owner,
you 

09:49:06.616 --> 09:49:08.616
should tag your work so you can 
get it later. 

09:49:08.978 --> 09:49:09.996
So you have a library and you 
move to a new library in the 

09:49:09.997 --> 09:49:14.723
app.  Maybe you can cancel all 
the work you had, you can cancel

09:49:14.724 --> 09:49:17.206
all the work by your tag.  
Always use tags when using a 

09:49:17.207 --> 09:49:19.873
library.  Work status also has 
tags available.

09:49:22.925 --> 09:49:25.379
So if you are looking at a work 
status you can get the tags for 

09:49:25.380 --> 09:49:29.704
that work and see what you 
yourself called it in the past 

09:49:29.705 --> 09:49:32.978
when you enqueued it.  
One more thing I wanted to talk 

09:49:32.979 --> 09:49:34.979
about is unique work.  

09:49:39.089 --> 09:49:41.813
Unique work solves a few 
different problems.

09:49:47.508 --> 09:49:49.508
One problem apps have is 
syncing. 

09:49:50.167 --> 09:49:50.976
You want to sync 12 to 24 hours 
and sync when the language 

09:49:50.977 --> 09:49:52.977
changes.

09:49:56.077 --> 09:49:59.541
Maybe you have a version of your
data in a different language.  

09:49:59.542 --> 09:50:02.056
You want to sync at that point, 
too.  You are doing all the 

09:50:02.057 --> 09:50:04.057
syncing, but you 

09:50:05.537 --> 09:50:08.410
want one sync active at a time. 
You don't want four running.  

09:50:08.411 --> 09:50:11.883
Which one wins?  You don't know.
You just want one.  Unique work 

09:50:11.884 --> 09:50:16.202
can solve this.  It is a chain 
of work that can be given a 

09:50:16.203 --> 09:50:21.522
unique name.  You can enqueue 
query, cancel using that name 

09:50:21.523 --> 09:50:24.390
and there can only be one chain 
of work with that name. 

09:50:26.030 --> 09:50:28.030
Take a look at sync example.  

09:50:31.679 --> 09:50:33.679
If I say begin you

09:50:36.429 --> 09:50:39.685
-- unique work, with my name, 
say sync in this case.  The next

09:50:39.686 --> 09:50:41.686
argument is the existing work 
policy.

09:50:43.774 --> 09:50:45.774
If there is work with this name,
"sync" what should I do with it?

09:50:47.257 --> 09:50:49.917
In this case, I say keep it.  I 
want to keep the existing work, 

09:50:51.557 --> 09:50:53.834
ignore what I am doing now.  The
next argument is actually the 

09:50:53.835 --> 09:50:59.554
work request, in this case a 
sync go.  You enqueue it.  If 

09:50:59.555 --> 09:51:01.402
you there is work with the name 
sync already in flight, it will 

09:51:01.403 --> 09:51:05.068
keep that.  If there isn't, it 
will enqueue this and execute 

09:51:05.069 --> 09:51:07.069
it.

09:51:10.609 --> 09:51:12.855
This is how you do your syncs.  
Here at Google, we love chat 

09:51:12.856 --> 09:51:15.140
apps.  
Maybe you are updating your chat

09:51:15.141 --> 09:51:17.141
status.  You say I am bored.

09:51:22.783 --> 09:51:22.907
And 10 seconds later, I'm 
watching TV.  I'm bored again, 

09:51:22.908 --> 09:51:24.908
I'm going to sleep.  

09:51:27.036 --> 09:51:29.665
You are in a bad network 
connection state.  You have bad 

09:51:29.666 --> 09:51:31.666
Wi-Fi, maybe the first thing 
hasn't gone through.  

09:51:34.748 --> 09:51:35.763
The second one should win and 
the third one should win over 

09:51:35.764 --> 09:51:40.120
that.  You want to make sure the
last one wins.  How do you solve

09:51:40.121 --> 09:51:42.345
this?  
This is a simple function, you 

09:51:42.346 --> 09:51:45.460
don't need to read the rest of 
it.  It is the last line you 

09:51:45.461 --> 09:51:49.785
care about.  It is begin unique 
work.  It is your name is update

09:51:49.786 --> 09:51:52.856
status and you choose the 
replace option.  

09:51:56.515 --> 09:52:00.798
Replace cancels and deletes any 
in-flight options of the name.  

09:52:00.799 --> 09:52:04.284
The last one does win. 
If you have two update status 

09:52:04.285 --> 09:52:10.312
calls, the last one will win. 
Finally, I love music, I love 

09:52:10.313 --> 09:52:12.313
the food fighters.  I was 
building a playlist with all 

09:52:14.997 --> 09:52:18.233
their songs, there is a lot of 
songs.  150 or 200 sounds.  I 

09:52:18.234 --> 09:52:20.234
was doing all of this.

09:52:21.725 --> 09:52:23.184
I was adding a song, shuffling 
two songs around, moving 

09:52:23.185 --> 09:52:26.285
something from the bottom of the
list, deleting a song because I 

09:52:26.286 --> 09:52:28.286
had it somewhere else.

09:52:29.345 --> 09:52:31.401
These are all things I want to 
do using WorkManager, but how 

09:52:31.402 --> 09:52:33.639
would I do that?  These all have
to execute in order.

09:52:36.693 --> 09:52:38.693
So since the order is important,
we 

09:52:40.827 --> 09:52:43.461
provide the ability to use the 
append existing work policy that

09:52:43.462 --> 09:52:45.462
says do this 

09:52:47.337 --> 09:52:51.413
work at the end of the list of 
update playlist operations.  So 

09:52:51.414 --> 09:52:53.681
just append this to the end of 
the thing, so everything else 

09:52:53.682 --> 09:52:55.682
must successfully execute before
this executes.

09:52:58.625 --> 09:53:00.625
So you can add operations to the
end.

09:53:01.865 --> 09:53:03.865
So existing work policy, as a 
summary, there are three types.

09:53:09.248 --> 09:53:11.248
Keep, replace, append.

09:53:15.267 --> 09:53:15.298
A few notes about periodic work.
It works similarly to everything

09:53:15.299 --> 09:53:17.284
you have seen so far.  Just a 
couple of notes on it.  The 

09:53:17.285 --> 09:53:19.114
minimum period length is the 
same as job scheduler.  It is 15

09:53:19.115 --> 09:53:21.115
minutes. 

09:53:24.438 --> 09:53:26.438
It is still subject to doze mode
and OS 

09:53:27.933 --> 09:53:28.938
background rec STRIKZs -- 
restrictions like other work we 

09:53:28.939 --> 09:53:32.044
talk about.  We can't have 
delays.  That makes good API 

09:53:32.045 --> 09:53:36.120
sense.  It is much more 
reasonable to think of it in 

09:53:36.121 --> 09:53:40.894
those terms.  
All right.  So we have talked a 

09:53:40.895 --> 09:53:44.775
lot about code.  Let's talk 
about how it all works under the

09:53:44.776 --> 09:53:46.776
hood.

09:53:49.263 --> 09:53:50.919
So you have got a work you 
enqueue it, we store it in the 

09:53:50.920 --> 09:53:53.998
database.  What happens after 
that?  Well, if the work is 

09:53:53.999 --> 09:53:57.517
eligible for execution, we send 
it to the executor right away.

09:54:00.590 --> 09:54:02.473
This executor, you can specify 
it, but we provide one that is 

09:54:02.474 --> 09:54:06.135
default.  But let's say that 
your process gets killed.  

09:54:08.214 --> 09:54:10.214
Well, what happens then?

09:54:13.748 --> 09:54:15.748
How is it work woken up, how 
does it run again.

09:54:18.014 --> 09:54:20.918
API plus, send it to scheduler, 
you wake up the process, go to 

09:54:20.919 --> 09:54:22.919
the same executor, that is where
it runs.

09:54:26.861 --> 09:54:29.321
If it is an older device, and 
you use Firebase job dispatcher 

09:54:29.322 --> 09:54:33.187
and use optional dependency, you
can send it to Firebase job 

09:54:33.188 --> 09:54:35.188
dispatcher, same thing, 

09:54:36.274 --> 09:54:39.158
invokeinvokes IPC, runs it on 
the executor.  If you don't have

09:54:39.159 --> 09:54:43.197
that or not using a Google Play 
service device, you are using 

09:54:43.198 --> 09:54:45.198
something else, we have a custom

09:54:47.259 --> 09:54:49.548
alarm manager and broadcast 
receiver implexation.  Same 

09:54:49.549 --> 09:54:52.198
thing, using IPC, wakes up the 
app when the time is right and 

09:54:52.199 --> 09:54:55.042
runs the job.  
A couple implementation details.

09:54:58.741 --> 09:55:00.610
Job scheduler, Firebase job 
dispatcher through Google Play, 

09:55:00.611 --> 09:55:02.611
they provide 

09:55:04.138 --> 09:55:06.138
central load balancing manager 
for execution.

09:55:08.223 --> 09:55:10.770
If every app on the device is 
trying to run jobs they'll load 

09:55:10.771 --> 09:55:12.771
balance them 

09:55:14.818 --> 09:55:18.551
and make sure you are not 
running too much work on your 

09:55:14.818 --> 09:55:16.985
device and burning up your 
battery.  The alarm manager 

09:55:16.986 --> 09:55:18.986
implementation 

09:55:20.460 --> 09:55:22.358
cannot do that because it is 
only a variation of your own 

09:55:22.359 --> 09:55:24.359
app.

09:55:27.298 --> 09:55:29.314
Your concepts like content URI 
are only available at the levels

09:55:29.315 --> 09:55:31.315
they're introduced at.

09:55:34.644 --> 09:55:39.139
Those manages will be marked 
with the appropriate API level. 

09:55:39.140 --> 09:55:41.830
We have pending wake locks.  
This is true for the alarm 

09:55:41.831 --> 09:55:44.083
manager.
Don't take wake locks in your 

09:55:44.084 --> 09:55:47.549
workers you don't need to do 
that, we take care of it for 

09:55:47.550 --> 09:55:49.550
you.

09:55:50.834 --> 09:55:52.657
Finally, let's talk about 
testing.  You want to test this 

09:55:52.658 --> 09:55:56.952
app.  We provide a testing 
library.  It has a synchronous 

09:55:56.953 --> 09:55:58.953
executor.

09:56:00.429 --> 09:56:04.353
Use WorkManager as normal to 
enqueue your requests.  We 

09:56:04.354 --> 09:56:06.354
provide a class called test 
driver 

09:56:07.827 --> 09:56:09.827
which executes enqueued work 
with constraints.

09:56:10.917 --> 09:56:12.917
We can pretend the constraint is
met.

09:56:15.038 --> 09:56:16.066
Periodic and display measures 
are coming.  We don't have them 

09:56:16.067 --> 09:56:20.725
yet.  If you want to look at the
code, you can use the task force

09:56:20.726 --> 09:56:22.726
manager and get the test driver.

09:56:25.089 --> 09:56:26.295
Create and enenqueue your work 
as you would with a constraint 

09:56:26.296 --> 09:56:28.967
in this case.  You can tell the 
test driver, hey, all 

09:56:30.592 --> 09:56:32.592
constraints are met for this 
work.

09:56:34.437 --> 09:56:36.272
Your work executes at that 
point, synchronously and you can

09:56:36.273 --> 09:56:41.425
verify the state of your app and
make sure everything is right.  

09:56:41.426 --> 09:56:44.081
I will want to talk about best 
practices before I end here.

09:56:47.959 --> 09:56:51.621
It is very important to know 
when to use WorkManager.  

09:56:51.622 --> 09:56:53.622
WorkManager is for tasks that 
can 

09:56:55.487 --> 09:56:57.487
survive process death, it can 
wake up 

09:56:59.197 --> 09:57:01.197
your app and your app's process 
to do the work.

09:57:03.309 --> 09:57:05.774
It is okay to use it to upload 
media to the server also okay to

09:57:05.775 --> 09:57:09.232
parse data and store it in the 
database.  It is not okay for 

09:57:09.233 --> 09:57:11.233
the example I gave 

09:57:13.518 --> 09:57:16.160
earlier, extracting the pallet 
color from an image, and 

09:57:16.161 --> 09:57:18.161
uploading an image.  That is 
foreground only.

09:57:21.274 --> 09:57:23.274
It is not only when you parse 
data and update a view. 

09:57:24.580 --> 09:57:27.449
It is not work that needs to use
WorkManager.  It doesn't need to

09:57:27.450 --> 09:57:30.094
survive process death.
It is not okay to process 

09:57:30.095 --> 09:57:33.179
payment transactions in it, if 
they care about timing right 

09:57:33.180 --> 09:57:35.180
then.  

09:57:37.483 --> 09:57:40.139
If you click bye and you want to
update the state of the app, 

09:57:40.140 --> 09:57:43.189
that needs something else.  The 
last one needs a foreground 

09:57:45.687 --> 09:57:47.687
service, the other two may use 
thread 

09:57:48.896 --> 09:57:50.896
pools or RX.

09:57:52.514 --> 09:57:55.389
Also WorkManager is not your 
DataStore.

09:57:59.321 --> 09:58:01.321
Instances are limited to 10 
kilobytes.

09:58:02.372 --> 09:58:03.182
It is meant for light, 
intermediate transportation of 

09:58:03.183 --> 09:58:05.183
information.

09:58:06.852 --> 09:58:08.852
You can file your eyes or key 
database if you want.

09:58:10.948 --> 09:58:12.948
Put simple information to update
your UI.

09:58:14.076 --> 09:58:15.690
If you want to use full 
DataStore, I recommend using 

09:58:15.691 --> 09:58:20.622
room.  They would be happy I'm 
saying this.  It is an awesome 

09:58:20.623 --> 09:58:22.623
database.  

09:58:25.133 --> 09:58:27.880
Finally, be opportunistic with 
your work.  The filter compress 

09:58:27.881 --> 09:58:30.351
upload example again.
The reason these are not one big

09:58:30.352 --> 09:58:32.352
job is because they all have 
different constraints.  

09:58:34.012 --> 09:58:36.012
So they can execute at different
times.

09:58:37.116 --> 09:58:39.807
Say I'm getting on an airplane 
and I upload a bunch of images 

09:58:39.808 --> 09:58:43.777
and running this chain of work. 
I go into airplane mode, maybe I

09:58:43.778 --> 09:58:47.459
don't have network for the next 
12 hours because I'm flying 

09:58:47.460 --> 09:58:50.128
across the world.  The other 
work can still execute and it 

09:58:50.129 --> 09:58:55.288
should.  If you architect like 
this, you can do that.  This 

09:58:55.289 --> 09:58:57.961
also, by the way, makes your 
code more testable.  You can 

09:58:57.962 --> 09:59:00.610
write a test for filtering that 
isn't conflated with compression

09:59:02.240 --> 09:59:05.757
and upload.  
All right.  I want to talk about

09:59:05.758 --> 09:59:07.758
a few next steps for you.

09:59:09.661 --> 09:59:11.661
If you need to reach us and talk
about 

09:59:13.345 --> 09:59:15.345
WorkManager, we are in the 
Android 

09:59:17.849 --> 09:59:20.716
Sandbox, just behind us, I 
think, over here.  That is more 

09:59:20.717 --> 09:59:23.232
information on the official 
developer website about 

09:59:23.233 --> 09:59:25.233
WorkManager.

09:59:26.700 --> 09:59:28.133
These are all the Gradle 
dependencies.  The first one is 

09:59:28.134 --> 09:59:30.134
required.

09:59:31.184 --> 09:59:32.399
The second one is if you use 
Firebase job dispatcher include 

09:59:32.400 --> 09:59:34.400
that.

09:59:35.704 --> 09:59:37.745
A testing library and of course 
cogland extensions as well. 

09:59:40.588 --> 09:59:41.405
WorkManager is part of the 
Architecture Components in 

09:59:41.406 --> 09:59:45.151
Android Jetpack.  And we have a 
bunch of talks here.  

09:59:47.823 --> 09:59:49.885
Tomorrow, navigation controller 
8:30 a.m.  I hope you make it 

09:59:49.886 --> 09:59:51.886
there.

09:59:53.837 --> 09:59:55.837
And thanks for being part of 
this talk.  

09:59:56.713 --> 09:59:58.743
We look forward to hearing back 
from you soon.  Thank you.  

09:59:58.955 --> 10:00:01.953
(Applause) .  

10:00:19.262 --> 10:00:21.519
&gt;&gt; Thank you for joining this 
session.

10:00:25.631 --> 10:00:27.631
Brand ambassadors will assist in

10:00:29.139 --> 10:00:31.139
helping you exit through the 
designated exits.

10:00:32.825 --> 10:00:34.825
We are making room for those 
registered for the next session.

10:00:38.140 --> 10:00:40.158
If you are registered for the 
next session, we ask that you 

10:00:40.159 --> 10:00:43.772
clear the room and return via 
the registration line outside.  

10:00:43.773 --> 10:00:45.773
Thank you.   

10:00:51.292 --> 10:00:53.292
(Session concluded)   

10:10:31.219 --> 10:10:31.621
.  
.  

10:10:31.622 --> 10:10:32.235
.  
.  

10:10:32.236 --> 10:10:33.054
.  
.  

10:10:33.055 --> 10:10:33.879
.  
.  

10:10:33.880 --> 10:10:34.893
.  
.  

10:10:34.894 --> 10:10:35.942
.  
.  

10:10:35.943 --> 10:10:37.407
.  
.  

10:10:37.408 --> 10:10:39.408
.

10:11:10.824 --> 10:11:12.824
What's new with the Android 
build system.  

10:25:56.283 --> 10:25:57.123
&gt;&gt; At this time, please find 
your seat.  Our session will 

10:25:57.124 --> 10:25:59.124
begin soon.  

10:29:07.336 --> 10:29:09.336
&gt;&gt; XAVIER DUCROHET: Good 
afternoon, my 

10:29:11.873 --> 10:29:13.961
name is Xavier Ducrohet. 
&gt;&gt; JEROME DOCHEZ: My name is 

10:29:13.962 --> 10:29:15.962
Jerome Dochez.

10:29:18.019 --> 10:29:20.106
SOID we'll talk about the 
improvements in Android since 

10:29:20.107 --> 10:29:22.107
last year.  It shipped out in 
the fall.

10:29:24.814 --> 10:29:26.814
The whole concept is all of the 

10:29:28.095 --> 10:29:30.142
variants of the module can 
depend on other modules.  

10:29:34.467 --> 10:29:36.467
Debugs on debugs and release on 
release.

10:29:40.316 --> 10:29:42.316
It is working well with it on 
each side.

10:29:44.331 --> 10:29:46.331
We have seen a lot of 
developers, over 

10:29:48.030 --> 10:29:49.892
the last six, nine months, see 
an enormous stage like this and 

10:29:49.893 --> 10:29:52.977
don't know what to do with it.  
We want to explain what is going

10:29:52.978 --> 10:29:54.978
on, 

10:29:57.206 --> 10:30:01.202
help you solve such a problem.  
First thing to look at, this 

10:30:01.203 --> 10:30:06.332
line does not publish library.
It is the project that is 

10:30:06.333 --> 10:30:08.333
consuming it 

10:30:10.589 --> 10:30:12.589
is in record by project

10:30:19.976 --> 10:30:21.976
app the name of the 
configuration.

10:30:23.916 --> 10:30:25.916
It is the run time plus pass.

10:30:27.845 --> 10:30:29.680
The error is able to find a 
matching configuration.  The way

10:30:29.681 --> 10:30:31.681
it is working really, the 

10:30:33.572 --> 10:30:35.572
library project is publishing a 
bunch of 

10:30:37.047 --> 10:30:39.047
artifact for different buy in at
the integrations.

10:30:40.548 --> 10:30:44.459
It has attributes associated 
with it so it can match it.  It 

10:30:44.460 --> 10:30:47.141
is a request with similar 
attributes, trying to do a 

10:30:47.142 --> 10:30:51.699
mapping and needs one exact map.
Here it can't find a match.  If 

10:30:51.700 --> 10:30:54.148
you go through the 
configuration, you know, you can

10:30:54.149 --> 10:30:57.070
look at all the attributes and 
basically, by process of 

10:30:58.714 --> 10:31:00.714
elimination find out what it 
needs.

10:31:04.639 --> 10:31:06.639
What we see is two have an API 
used by 

10:31:07.908 --> 10:31:09.908
combile test and the other two 
are run time.

10:31:11.424 --> 10:31:13.424
The attribute, they request Java
run 

10:31:14.459 --> 10:31:16.459
time, some use Java API, so we 
can 

10:31:17.483 --> 10:31:19.483
ignore them.

10:31:22.674 --> 10:31:25.136
If you more atribe tributes -- 
it is on both sides, we can 

10:31:25.137 --> 10:31:27.188
ignore it, we use to match 
different type of plug in, 

10:31:29.431 --> 10:31:31.431
versus library and features, 
just so ignore it.  

10:31:33.874 --> 10:31:35.874
The other

10:31:41.003 --> 10:31:43.003
one buy out attribute.  It is 
one you can ignore.

10:31:48.796 --> 10:31:51.258
We find final attribute, which 
is incompatible, we ask for 

10:31:51.259 --> 10:31:53.259
staging, it is finding other 
values.

10:31:56.395 --> 10:31:58.046
The name of type of attribute 
here, it is, you know, the key 

10:31:58.047 --> 10:32:00.047
part.

10:32:01.128 --> 10:32:03.201
It is basically 
self-explanatory, this is the 

10:32:03.202 --> 10:32:05.076
build type attribute, we are 
request being staging, it is not

10:32:05.077 --> 10:32:12.835
finding it.  It means the 
library does not have the build 

10:32:12.836 --> 10:32:14.836
type, you can train it there or 

10:32:17.122 --> 10:32:19.568
use the DSL to cradle for that. 
You say if the staging is not 

10:32:19.569 --> 10:32:23.732
found, use debug.  
You have the same exact 

10:32:23.733 --> 10:32:25.733
principle if you 

10:32:27.425 --> 10:32:30.759
have a missing dimension value. 
Here, the error message is 

10:32:30.760 --> 10:32:32.760
different 

10:32:35.679 --> 10:32:37.679
because there are multiple 
flavors, this 

10:32:39.436 --> 10:32:41.436
is the flavor dimension, same 
problem.

10:32:45.278 --> 10:32:50.332
Not finding trial when you look 
for it the fix is the same.  We 

10:32:50.333 --> 10:32:53.408
do that on the consuming side, 
the app side of the library.  If

10:32:53.409 --> 10:32:55.409
it is a library that depend on 
the 

10:32:58.458 --> 10:33:00.458
library, you can have the 
consuming

10:33:03.112 --> 10:33:05.375
side another type of problem, it
says cannot choose between the 

10:33:05.376 --> 10:33:07.376
following configuration.

10:33:08.678 --> 10:33:10.678
It will find compatible matches.

10:33:11.772 --> 10:33:14.033
It will only show the two 
configuration that are not 

10:33:14.034 --> 10:33:18.359
matching, tell hide the others. 
That is easier.  If you look at 

10:33:18.360 --> 10:33:21.040
it, there are attributes that 
are compatible, you signal them.

10:33:24.094 --> 10:33:26.094
You are down to the two.

10:33:27.613 --> 10:33:30.483
It says it found an attribute on
the library side, but not 

10:33:30.484 --> 10:33:32.484
consumed by the consumer.  

10:33:35.603 --> 10:33:37.603
What happen is the library has a

10:33:39.295 --> 10:33:41.721
dimension not defined in the app
of the consuming module and 

10:33:41.722 --> 10:33:45.460
doesn't know how to choose this 
one.  It has the flavor 

10:33:45.461 --> 10:33:47.299
dimension in the app or 
consuming model or go and say, 

10:33:47.300 --> 10:33:49.300
you 

10:33:50.325 --> 10:33:51.337
know, missing dimension 
strategy, name of the flavor 

10:33:51.338 --> 10:33:53.338
dimension, name of the value. 

10:33:57.035 --> 10:33:58.053
All it is doing, really, is 
adding the attribute to the 

10:33:58.054 --> 10:34:00.054
request.

10:34:01.957 --> 10:34:03.957
You can add this either to the 
default 

10:34:05.647 --> 10:34:07.647
config, which is all the buy 
ins.

10:34:09.769 --> 10:34:13.454
To a specific flavor or to a 
particular variant.  

10:34:14.661 --> 10:34:16.966
&gt;&gt; JEROME DOCHEZ: Thank you.  
Talk about some of the notable 

10:34:16.967 --> 10:34:18.967
changes 

10:34:20.033 --> 10:34:22.033
we have introduced in the 
variation pipeline.

10:34:23.104 --> 10:34:25.104
The first thing we have changed 
lately is aapt2.

10:34:30.011 --> 10:34:34.986
This is a new incremental 
divider.  This is dividing into 

10:34:34.987 --> 10:34:36.987
the two phases.

10:34:38.271 --> 10:34:40.271
The phase where it changes 
resources into binary format.

10:34:42.768 --> 10:34:44.811
And there is a final linking 
phase where it will have the 

10:34:44.812 --> 10:34:50.078
final I.D. 
If you want to use the latest 

10:34:50.079 --> 10:34:52.079
platform features, use aapt2. 

10:34:56.655 --> 10:34:58.655
In theory, it is compatible with
AAPT1.  It is stricter.  

10:35:01.217 --> 10:35:04.094
You might run into issues from 1
to aapt2.  We have given you a 

10:35:04.095 --> 10:35:06.095
flag so you can use it if you 
have issues.

10:35:09.469 --> 10:35:11.278
You should be aware the issues 
may not be in aapt2 itself.  It 

10:35:11.279 --> 10:35:14.230
may be in your project.  So you 
should find bugs, if you find 

10:35:16.481 --> 10:35:18.759
issues with aapt2, but you 
should do your homework first, 

10:35:18.760 --> 10:35:21.412
look into maybe the problem is 
in my project, so let's look, 

10:35:24.477 --> 10:35:27.970
maybe you have invalid 
resources, and reference stuff. 

10:35:27.971 --> 10:35:29.971
Aapt2 will catch those.

10:35:32.273 --> 10:35:34.150
So we're going to phase ought 
AAPT1 soon, so it is important 

10:35:34.151 --> 10:35:36.151
that you switch 

10:35:38.096 --> 10:35:40.349
and find bugs, if you still find
some.  

10:35:41.772 --> 10:35:43.772
Next thing is desugar.

10:35:46.116 --> 10:35:48.116
This is a tool to use old 
synthetic 

10:35:49.807 --> 10:35:51.882
sugar that was in Java 8.  We 
have two different versions.  

10:35:51.883 --> 10:35:54.760
The first version was external 
process.

10:36:00.758 --> 10:36:02.758
It used a lot of resource, was 
slow.

10:36:04.249 --> 10:36:06.087
With V8, it is integrated into 
the pipeline.  It is better.  It

10:36:06.088 --> 10:36:11.006
is faster.  Again, we're going 
to phase out the old version in 

10:36:11.007 --> 10:36:13.049
theory, you should all be 
switching to the integrated 

10:36:13.050 --> 10:36:15.050
version, shouldn't be seeing any
difference.

10:36:17.539 --> 10:36:20.188
If you do, please file a bug.  
It is probably our fault this 

10:36:20.189 --> 10:36:22.189
time, probably not your fault.  
File a bug.

10:36:25.304 --> 10:36:27.304
We will phase out of the old 
external 

10:36:28.798 --> 10:36:36.002
process version soon. 
Talking about dex.  It is 

10:36:36.003 --> 10:36:38.003
interested in 3.

10:36:39.014 --> 10:36:41.014
1

10:36:45.186 --> 10:36:47.186
.  It is default from

10:36:48.560 --> 10:36:50.560
3.1.

10:36:51.883 --> 10:36:53.883
The bugs are responsive at 
fixing issues.

10:36:57.471 --> 10:37:00.121
Again, we're phasing out old DX 
soon.  We would like you to be 

10:37:00.122 --> 10:37:02.601
capable of building your 
applications, file bugs.

10:37:06.884 --> 10:37:08.884
We introduced 8, which is the 

10:37:10.157 --> 10:37:12.157
shrinker, but it is like a 
different 

10:37:14.389 --> 10:37:16.389
thing than it used to

10:37:21.509 --> 10:37:24.409
be, 8 takes over the entire 
pipeline from class files to dex

10:37:24.410 --> 10:37:26.410
files.

10:37:29.253 --> 10:37:31.253
It is the desugar,

10:37:35.802 --> 10:37:37.802
minimization and dex fall  
files.

10:37:39.212 --> 10:37:42.114
If you use it, see if it works 
well.  File bugs, we will stop 

10:37:42.115 --> 10:37:44.115
supporting the 

10:37:45.380 --> 10:37:47.380
old shrinkers, not soon, but 
midterm, I would say. 

10:37:48.256 --> 10:37:50.256
These are the flags you can use 
to 

10:37:51.351 --> 10:37:54.204
enable or disable R8 and D8.  
Use this if you run into 

10:37:54.205 --> 10:37:56.252
trouble, also file bug, okay?

10:38:01.627 --> 10:38:04.485
Let's talk about the performance
we know well it is a subject you

10:38:04.486 --> 10:38:08.591
are extremely interested in, so 
are we.  One of the problem we 

10:38:08.592 --> 10:38:13.315
have is that we have a lot of 
trouble reproducing issues that 

10:38:13.316 --> 10:38:15.316
may happen in the (?).

10:38:16.427 --> 10:38:19.505
We don't have that many 
applications internally to use. 

10:38:19.506 --> 10:38:21.506
However, here is an example 
using the nest mobile app.

10:38:24.255 --> 10:38:26.255
You can see a net will build as 

10:38:28.901 --> 10:38:30.901
improved about 13%

10:38:33.710 --> 10:38:37.202
from 3 to 3.1.  And then from 
3.2.  This is if the keep the 

10:38:37.203 --> 10:38:40.063
same features.  Not changing the
application, just the plug in.

10:38:45.199 --> 10:38:47.199
If you have the Java A, things 
vary, obviously.  

10:38:49.746 --> 10:38:51.394
Now, if you look a little deeper
at performance, things are more 

10:38:51.395 --> 10:38:56.115
complicated.  In particular, 
when you look at incremental 

10:38:56.116 --> 10:38:58.116
builds you can see Java C 

10:38:59.598 --> 10:39:01.598
for the full build was 10 to 15%
of the build.

10:39:02.850 --> 10:39:04.850
In incremental build, it jumps 
to a 

10:39:06.312 --> 10:39:08.312
really bad 38% of the overall 
build type.

10:39:10.255 --> 10:39:12.255
Really, we can see that in 
incremental 

10:39:16.411 --> 10:39:18.469
scenario, Java is the dominating
vactor.  It is not incremental 

10:39:18.470 --> 10:39:23.471
because people are using 
annotation processors and so far

10:39:23.472 --> 10:39:25.472
they're not incremental capable.

10:39:32.565 --> 10:39:35.222
So we started a joint 
application with an note, it is 

10:39:35.223 --> 10:39:37.223
called incap.

10:39:42.419 --> 10:39:44.478
It is ready, shaped shipped in 
4.7.  Now we're trying to make 

10:39:44.479 --> 10:39:46.479
all the 

10:39:48.418 --> 10:39:50.418
annotation process tors to be 
incap capable.

10:39:51.676 --> 10:39:54.546
If you have the processes, make 
them incap capable.  It is not 

10:39:54.547 --> 10:39:56.547
complicated.

10:39:58.044 --> 10:40:00.091
For the simple processors, it 
will generate something from one

10:40:00.092 --> 10:40:02.092
source, it 

10:40:03.148 --> 10:40:04.977
is a need to see the entire 
world, adding few manifest 

10:40:04.978 --> 10:40:08.219
entries.  That is simple.  
That will eventually, in all of 

10:40:08.220 --> 10:40:10.500
the annotation processes are 
incap capable, 

10:40:14.191 --> 10:40:16.191
we'll be able to switch the 
compilation 

10:40:17.442 --> 10:40:19.442
to be incremental, that will 
have a huge 

10:40:21.161 --> 10:40:23.161
impact on the performance of the
incremental builds.  

10:40:24.845 --> 10:40:26.845
(Applause) .  
&gt;&gt; Thank you.

10:40:30.191 --> 10:40:33.089
Let's talk about Jetpack.  You 
have heard about it a lot.  How 

10:40:33.090 --> 10:40:35.090
does it work?

10:40:36.397 --> 10:40:38.397
Let's take the first example -- 
if you 

10:40:39.877 --> 10:40:42.112
have to the pure AndroidX 
project.  It has the old 

10:40:42.113 --> 10:40:44.113
support, what you do is 

10:40:49.319 --> 10:40:51.365
use the refactoring tool in 
studio to move the new stuff. 

10:40:51.366 --> 10:40:54.233
One issue is we add some 
dependency to 

10:40:57.322 --> 10:40:59.322
the project, you use legacy, 
data 

10:41:01.282 --> 10:41:02.941
binding, we will add 
automatically, the multidex to 

10:41:02.942 --> 10:41:04.942
elaborate.

10:41:06.426 --> 10:41:08.426
If you move to the pure AndroidX
world 

10:41:09.682 --> 10:41:11.910
where you now suddenly have the 
AndroidX constraint instead of 

10:41:11.911 --> 10:41:13.911
the old support, 

10:41:15.804 --> 10:41:17.804
we need to know that we must use
the 

10:41:18.823 --> 10:41:22.003
AndroidX multidex library.
We need an indication of which 

10:41:22.004 --> 10:41:24.004
one we want to inject.

10:41:26.293 --> 10:41:28.530
You need to tell the plug in, 
this is for this flag, which 

10:41:28.531 --> 10:41:30.531
version you want us to use.  

10:41:32.644 --> 10:41:34.644
So if you want to move to 
AndroidX world, use this flag.

10:41:38.181 --> 10:41:40.002
If you are in a hybrid world, 
which is who most likely will 

10:41:40.003 --> 10:41:42.003
happen to most people.

10:41:43.091 --> 10:41:45.091
Yes, you moved your application,
all 

10:41:47.985 --> 10:41:50.111
the projects to use the AndroidX
stuff, you use an external 

10:41:50.112 --> 10:41:54.406
library that you have no control
over, it uses the old libraries,

10:41:54.407 --> 10:41:56.247
you have no choice or control 
about the sources, what can you 

10:41:56.248 --> 10:42:00.943
do?  We will provide a build 
time translation facility that 

10:42:00.944 --> 10:42:03.415
will just basically change 
automatically the 

10:42:06.491 --> 10:42:08.491
dependency from the old support 
to the new one.

10:42:11.865 --> 10:42:14.511
And will change the collaborate 
itself by changing all the 

10:42:14.512 --> 10:42:16.512
import statements to the new 
ones.

10:42:19.674 --> 10:42:21.674
This is not like we will publish
the 

10:42:22.931 --> 10:42:24.571
library, but locally you can 
have the illusion of the pure 

10:42:24.572 --> 10:42:27.454
world where everybody is 
depending on the AndroidX 

10:42:27.455 --> 10:42:29.455
library.

10:42:31.291 --> 10:42:33.291
There is a flag

10:42:35.302 --> 10:42:37.302
jetifyjetifier. 

10:42:39.218 --> 10:42:42.520
&gt;&gt; XAVIER DUCROHET: Let's talk 
about the app bundle.  We'll 

10:42:42.521 --> 10:42:45.027
tell you some greater things. 
The first thing on the 

10:42:45.028 --> 10:42:50.373
application plug in, not the 
library or feature plug in, but 

10:42:50.374 --> 10:42:52.835
the application plug in, on top 
of the tasks you see here, we 

10:42:52.836 --> 10:42:54.836
have bundle tasks.  

10:42:56.804 --> 10:42:58.804
You can quickly without change, 
go and 

10:43:01.742 --> 10:43:04.425
build a bundle, remember the, 
bundle is a way to apply to the 

10:43:04.426 --> 10:43:06.426
Play Store, get 

10:43:12.797 --> 10:43:15.865
out of the bugs, with the API 
and smaller (?) Time.  

10:43:21.007 --> 10:43:22.651
Locally, you can build an APK 
the way the Play Store does it 

10:43:22.652 --> 10:43:26.164
in the APK.  If you want to 
verify something, saying I have 

10:43:26.165 --> 10:43:28.165
a device, I don't want to build 
an APK directly.

10:43:32.302 --> 10:43:33.760
I want to build an APK the way 
the Play Store would from the 

10:43:33.761 --> 10:43:37.044
bundle.  You can do that.  The 
site is more involved than 

10:43:38.332 --> 10:43:41.005
directly building the APK.  
You first build a bundle, then 

10:43:41.006 --> 10:43:43.006
use the 

10:43:46.561 --> 10:43:49.427
bund will -- bundle tool to 
build a bundle, and then based 

10:43:49.428 --> 10:43:53.349
on the device configuration, we 
can create the APK.  In general,

10:43:53.350 --> 10:43:55.350
we don't necessarily want 

10:43:56.620 --> 10:43:58.904
you to create that, you know, 
manually using the greater task,

10:43:58.905 --> 10:44:00.905
however, a lot 

10:44:02.394 --> 10:44:04.234
of studio Android cannot use 
that flow when you need it.  

10:44:10.438 --> 10:44:12.438
For example, the instant task, 
if you 

10:44:13.762 --> 10:44:15.762
have the features it will build 
the Pacific.

10:44:18.082 --> 10:44:19.335
If you create I can nammic 
features -- dynamic feature, 

10:44:19.336 --> 10:44:21.401
which we will talk about upon it
will go through the bundle 

10:44:24.479 --> 10:44:26.479
to make sure we can install on 
on any device.

10:44:27.755 --> 10:44:29.755
If you have a dynamic feature 
and you 

10:44:32.067 --> 10:44:34.067
install on device, with the API 
less 

10:44:35.370 --> 10:44:38.036
than 21, it needs to be done 
together to install it.  We 

10:44:38.037 --> 10:44:40.037
don't want to be different than 
the Play Store.

10:44:40.072 --> 10:44:42.072
We want to be the same as the 
Play Store.

10:44:43.761 --> 10:44:46.230
If you try to run tests from the
line, the coding check, it will 

10:44:46.231 --> 10:44:48.231
go to the APK.

10:44:50.585 --> 10:44:53.061
It will work later to add the 
ability to run the test in the 

10:44:53.062 --> 10:44:55.105
bundle to simulate better 
exactly the type of APK 

10:44:59.448 --> 10:45:01.448
that are created by the Play 
StoreStore. 

10:45:02.988 --> 10:45:05.446
Deploying from studio, you have 
a choice, directly from APK or 

10:45:05.447 --> 10:45:07.447
APK from the vendor.  

10:45:10.353 --> 10:45:11.577
Here the run configuration 
inside studio has a check box to

10:45:11.578 --> 10:45:15.282
check.  We recommend to not 
check it when you do your 

10:45:15.283 --> 10:45:18.006
regular development.  You know, 
as we saw earlier, building 

10:45:21.293 --> 10:45:22.738
an APK from the bundle is much 
more complicated than building 

10:45:22.739 --> 10:45:27.069
it directly.  When you deploy 
from studio, we look at the 

10:45:27.070 --> 10:45:29.070
device you want to target, and 

10:45:32.486 --> 10:45:34.486
then we inject that information 
into Gradle.

10:45:36.178 --> 10:45:38.178
And if you have the X, to take a
while 

10:45:39.659 --> 10:45:42.318
to build, when to device 21 or 
above, we will use the index 

10:45:42.319 --> 10:45:44.319
that is faster.

10:45:45.388 --> 10:45:47.388
We can't take that shock yet 
when we build a bundle.

10:45:50.546 --> 10:45:52.546
You have two, create one with 
and one without the option.

10:45:54.243 --> 10:45:56.088
You the APK as often as you can.
Use the other one only when you 

10:45:56.089 --> 10:45:59.574
have to, when you want to use 
the APK developed by the Play 

10:45:59.575 --> 10:46:04.528
Store.  If you push to a device 
that is pre-21, we're going to 

10:46:04.529 --> 10:46:06.529
use that option anyway and 
always going through the 

10:46:09.270 --> 10:46:11.270
bundle, as soon as you have 
dynamic features. 

10:46:16.466 --> 10:46:18.466
So you may may doing manual APK 
and the DSL and the (?

10:46:20.966 --> 10:46:23.814
) To compete conversion feet for
the APK that is generated.  If 

10:46:23.815 --> 10:46:26.788
you are doing that now and you 
want to switch to the bundle, 

10:46:26.789 --> 10:46:29.450
you can erase all of the DSL. 
It is unnecessary.

10:46:32.343 --> 10:46:33.777
Nothing to do, you call the 
bundle task, get your bundle, 

10:46:33.778 --> 10:46:36.030
you are done.  On the service 
side we will do all of 

10:46:39.307 --> 10:46:41.307
this by density, API by default.

10:46:42.793 --> 10:46:45.049
We have a DSL to allow to 
disable it, if you are running 

10:46:45.050 --> 10:46:47.050
into problem.

10:46:48.159 --> 10:46:49.772
We expect that would be very few
case where you need to do that, 

10:46:49.773 --> 10:46:54.681
but you have the able, if you 
really have to, if you have that

10:46:54.682 --> 10:46:56.682
also file a bug and talk to 

10:46:58.948 --> 10:47:00.948
the Play Store team, see if you 
can sort it with them. 

10:47:03.249 --> 10:47:05.938
I mentioned dynamic feature 
earlier.  What are dynamic 

10:47:05.939 --> 10:47:07.939
features?

10:47:10.799 --> 10:47:13.728
They're small APK installed on 
demand.

10:47:17.216 --> 10:47:19.216
It is no need to install for 
90%, have it for on-demand.

10:47:22.786 --> 10:47:26.297
The way you organize the code, 
it is in Gradle.  You have a 

10:47:26.298 --> 10:47:29.011
plug in called dynamic feature. 
The layout is different compared

10:47:29.012 --> 10:47:31.012
to 

10:47:32.315 --> 10:47:33.536
the library, normally in the 
library, the application depend 

10:47:33.537 --> 10:47:37.297
on the library and refer to the 
code of the library.  Here, the 

10:47:37.298 --> 10:47:42.802
features are actually sitting on
top and depend on the base.  We 

10:47:42.803 --> 10:47:44.803
can see horror the two base 

10:47:45.880 --> 10:47:47.880
feature, the two dynamic feature
in pluapply to dynamic feature.

10:47:51.243 --> 10:47:53.243
Have a dependence on the project
app.  That is base one.

10:47:56.991 --> 10:47:58.421
Those have to refer to the 
dynamic feature.  It needs to 

10:47:58.422 --> 10:48:03.016
list them.  I will show you it, 
it is complicated.  It is 

10:48:03.017 --> 10:48:08.124
unusual.  You need to list the 
features.  It is the greater 

10:48:08.125 --> 10:48:10.125
path for all of the dynamic 
features.  

10:48:13.841 --> 10:48:15.302
If you used instant app since 
last year, it probably looks 

10:48:15.303 --> 10:48:17.303
similar.

10:48:18.387 --> 10:48:20.424
It is you know, the feature plug
in, used for the features and 

10:48:20.425 --> 10:48:22.425
base feature, 

10:48:23.765 --> 10:48:25.424
except you have a small flag 
using base feature equal true.

10:48:25.425 --> 10:48:29.913
The base feature have to refer 
to all of the features, using a 

10:48:29.914 --> 10:48:31.914
slightly different 

10:48:33.368 --> 10:48:35.040
DSL, which will probably migrate
to the dynamic feature version 

10:48:35.041 --> 10:48:37.041
soon, but you do 

10:48:38.136 --> 10:48:40.136
it now using the feature 
configuration. 

10:48:41.618 --> 10:48:43.618
You probably heard about, you 
know in 

10:48:45.706 --> 10:48:47.603
the future you can instance 
enable that to have the caps 

10:48:47.604 --> 10:48:49.604
with the bundle.  
This is why.

10:48:51.890 --> 10:48:54.179
The feature plug in and dynamic 
feature plug in are similar.

10:48:57.661 --> 10:48:58.902
The features share probably over
95% of the code.  Extremely 

10:48:58.903 --> 10:49:00.903
similar.

10:49:03.469 --> 10:49:05.717
So if you are architecturing 
your app, switching would be the

10:49:05.718 --> 10:49:07.784
same architecture with slightly 
different plug ins.  

10:49:10.654 --> 10:49:12.926
If you are doing dynamic feature
now, allowing that to be in 

10:49:12.927 --> 10:49:17.411
instant app would be similar in 
the future. 

10:49:20.281 --> 10:49:22.587
I mention bidirectional 
dependancy where they need to 

10:49:22.588 --> 10:49:24.588
know about the base app 

10:49:25.842 --> 10:49:27.842
needs to know about the feature,
you 

10:49:28.916 --> 10:49:30.956
have the two module before, if 
you are building APK, look no 

10:49:30.957 --> 10:49:32.957
more.

10:49:34.026 --> 10:49:36.026
There is a bunch in each module.

10:49:37.096 --> 10:49:39.096
What happens is the bundle task 

10:49:40.189 --> 10:49:42.189
belongs to the app bundle, the 
app you use.  

10:49:44.424 --> 10:49:47.184
When you build the bundle, we 
have to feature from the base 

10:49:50.918 --> 10:49:53.418
module and we need all the 
dependency of the base module.

10:49:59.176 --> 10:50:01.176
If you don't add to the base it 
won't 

10:50:02.283 --> 10:50:04.283
show up in the bundle at all. 

10:50:05.302 --> 10:50:07.302
&gt;&gt; XAVIER DUCROHET: So when 
developing 

10:50:09.359 --> 10:50:11.234
dynamic features, it is 
penitentiary to understand 

10:50:11.235 --> 10:50:13.235
differents in the building.

10:50:14.541 --> 10:50:17.008
There is differences in the 
variant which won't change 

10:50:17.009 --> 10:50:21.078
between the base module, the 
application I.D., version code, 

10:50:21.079 --> 10:50:23.334
version name, all of those 
should be set in the base module

10:50:25.616 --> 10:50:27.616
and we'll publish them back to 
the features.

10:50:28.897 --> 10:50:30.335
So they can be used in the task 
when for instance, generating 

10:50:30.336 --> 10:50:32.776
the manifest or whatever.  It is
important to understand that you

10:50:35.027 --> 10:50:38.726
set them in the base, you do not
repeat them in the features.  We

10:50:38.727 --> 10:50:40.368
will automatically transfer 
them.  

10:50:40.369 --> 10:50:45.492
Okay. 
Let's talk about multidex.  

10:50:48.191 --> 10:50:50.191
So you are in a situation, not 
using 

10:50:51.463 --> 10:50:53.522
features but doing the bundle 
thing.  It is the same behavior.

10:50:57.219 --> 10:50:59.902
Instead of shifting into MPK, it
is into a bundle which is 

10:50:59.903 --> 10:51:05.059
uploaded.  The dynamic delivery 
will not do much.  It will take 

10:51:05.060 --> 10:51:07.121
the dex files and store them on 
the device before execution.

10:51:11.007 --> 10:51:13.683
So same behavior.  If you have 
feature, not a lot of 

10:51:13.684 --> 10:51:15.684
difference.

10:51:17.358 --> 10:51:19.358
Basically each feature can 
develop and 

10:51:20.618 --> 10:51:23.077
goal can become itself a 
multiple dex files.  Everything 

10:51:23.078 --> 10:51:25.078
is merged on to the base 

10:51:26.145 --> 10:51:30.059
module and you get all package 
inside the bundle again.  Same 

10:51:30.060 --> 10:51:32.290
thing with our feature, it is 
delivered on the phone, not a 

10:51:32.291 --> 10:51:34.291
big difference.

10:51:36.815 --> 10:51:38.815
But default we enable the 
multidexing.  

10:51:42.908 --> 10:51:44.908
Things get more complicated if 
your

10:51:47.566 --> 10:51:49.566
SDK is less than 21.

10:51:50.830 --> 10:51:53.075
You need the multidex if you are
deploying on a device that is 

10:51:53.076 --> 10:51:55.076
25, but if 

10:51:56.163 --> 10:51:58.163
you are targeting and deploying 
on 15, 

10:52:00.275 --> 10:52:02.275
we need to do something specific
for that.

10:52:03.344 --> 10:52:05.804
What will happen is a dynamic 
delivery will fuse all of the 

10:52:05.805 --> 10:52:07.805
text files into a 

10:52:09.269 --> 10:52:11.269
single one that will be 
delivered.

10:52:13.725 --> 10:52:15.335
This is important to realize, 
even if none of the modules, 

10:52:15.336 --> 10:52:20.040
including the base module or 
feature modules, if none of them

10:52:20.041 --> 10:52:22.921
use multidexing itself, because 
we combine those into a single 

10:52:22.922 --> 10:52:24.922
one, this 

10:52:26.159 --> 10:52:27.404
may actually go over the dex 
limit and may require 

10:52:27.405 --> 10:52:29.405
multidexing.

10:52:31.674 --> 10:52:32.695
So you need to manually enable 
multidex in the base 

10:52:32.696 --> 10:52:34.696
application.

10:52:37.625 --> 10:52:39.625
What that will do is basically 
create the (?

10:52:42.150 --> 10:52:45.008
) That it will ship along with 
the dex files to the bundle.  

10:52:45.009 --> 10:52:47.435
The dynamic delivery will take 
the bundle and be capable, if 

10:52:47.436 --> 10:52:49.436
you are trying 

10:52:51.771 --> 10:52:53.771
to deploy this on the 15 device,
it will 

10:52:55.878 --> 10:52:58.733
use the multimultidex for 
diffusing and use the extended 

10:52:58.734 --> 10:53:02.850
dex correctly.  
All right?  Shrinking and 

10:53:02.851 --> 10:53:05.515
obfusication.  It is the same as
before. 

10:53:08.472 --> 10:53:11.111
You set it on the base module 
like the application.  You say 

10:53:11.112 --> 10:53:13.112
identify, enable, not a lot of 
changes.

10:53:14.181 --> 10:53:16.433
But how we implement it is 
really, really different.  So 

10:53:16.434 --> 10:53:18.434
let's go through the motion 
here.  

10:53:19.315 --> 10:53:21.315
First of all, this is only 
supported 

10:53:22.869 --> 10:53:25.710
with R8, which is the shrinker I
talked about earlier.  What we 

10:53:25.711 --> 10:53:28.172
do, we take all the rules that 
will be defined close to the 

10:53:28.173 --> 10:53:30.173
classes 

10:53:31.230 --> 10:53:32.658
they're applied to, the rules 
and the features, we merge all 

10:53:32.659 --> 10:53:34.659
of them into a single one.  

10:53:36.544 --> 10:53:38.544
With the class files we field 
this into R8.

10:53:41.729 --> 10:53:43.729
R8 will create a combined dex, 
big dex file is everything.

10:53:48.480 --> 10:53:51.330
We will feed that dex file into 
a dex leader which will split 

10:53:51.331 --> 10:53:54.209
the dex for the features and the
base.  It is a different 

10:53:54.210 --> 10:53:56.210
mechanism as before.

10:53:57.515 --> 10:53:59.176
Now we have again, this dex is 
shrinked, obfuse indicated.  

10:53:59.177 --> 10:54:03.911
It is two scenarios possible. 
You are using the bundle or the 

10:54:03.912 --> 10:54:05.912
APK.

10:54:07.219 --> 10:54:09.219
If you are using the bundle, it 
is simple.

10:54:10.503 --> 10:54:12.353
They're automatically 
transferred into the bundle as 

10:54:12.354 --> 10:54:14.354
we saw earlier. 

10:54:17.456 --> 10:54:19.731
If you are using feature, it is 
like the dex file published back

10:54:19.732 --> 10:54:21.732
to the feature.

10:54:23.872 --> 10:54:25.088
Then they will be packaged into 
the APK.  

10:54:25.089 --> 10:54:28.744
All right.  It is a slightly 
different mechanism as we have 

10:54:28.745 --> 10:54:31.432
seen in the past.  A lot of 
going back and forth, we need 

10:54:35.884 --> 10:54:39.021
the dependency between features 
and app.  

10:54:40.261 --> 10:54:42.930
&gt;&gt; XAVIER DUCROHET: We wanted to
talk about things that are not 

10:54:42.931 --> 10:54:45.188
introducted in 2.  We have been 
working on it for a while.

10:54:49.421 --> 10:54:51.421
We expect they will

10:54:55.858 --> 10:54:57.858
ship soon.

10:54:59.135 --> 10:54:59.955
We want to give you a heads up 
and feedback as soon as 

10:54:59.956 --> 10:55:02.008
possible.  This is how we 
process resources.

10:55:06.233 --> 10:55:08.233
If you have a library

10:55:09.599 --> 10:55:11.626
2, in the flow, the processing 
of resources and just generate 

10:55:11.627 --> 10:55:13.627
another Java and nothing else.

10:55:17.752 --> 10:55:19.752
So when this is consumed

10:55:20.923 --> 10:55:23.800
by on or about library, library 
1, it may be referring sources 

10:55:23.801 --> 10:55:27.890
from library 2.  To validate all
the resources references and 

10:55:27.891 --> 10:55:29.891
also with the overlimit 

10:55:31.266 --> 10:55:34.259
mechanism, we will merge the two
resource folder into a single 

10:55:34.260 --> 10:55:37.161
resource folder and process it, 
generate another R class.  We 

10:55:37.162 --> 10:55:40.473
generate two.  One is for the 
library itself, which everyone, 

10:55:40.474 --> 10:55:43.806
which contain all the resources 
from library 1 to library 2.  

10:55:43.807 --> 10:55:45.807
And then we have another one, 
which is 

10:55:47.264 --> 10:55:49.948
just a new version of the R 
class generated by library two, 

10:55:49.949 --> 10:55:53.214
which is in case you want to 
have tests you need the final 

10:55:53.215 --> 10:55:56.081
I.D. version of it.  
That is consumed by an 

10:55:56.082 --> 10:55:59.156
application.  We cannot ask you 
to do the same thing again.

10:56:02.838 --> 10:56:04.075
We will remerge the app, library
one, library 2 and process all 

10:56:04.076 --> 10:56:06.770
of that.  And then generate the 
final resource 

10:56:09.781 --> 10:56:11.636
binary format as well as all the
final classes that are needed by

10:56:11.637 --> 10:56:15.953
the code from the app library 1 
and 2.  As you can see, this is 

10:56:15.954 --> 10:56:18.028
not exactly efficient.  This is 
probably one of the last 

10:56:21.778 --> 10:56:24.660
things that is very inefficient 
in the way we build things.  The

10:56:24.661 --> 10:56:26.088
resources from library 2 is 
merged and processed three 

10:56:26.089 --> 10:56:30.209
times.  We generate a lot of 
classes.  In fact, we're seeing 

10:56:30.210 --> 10:56:32.682
project with a few hundred 
modules generating several 

10:56:36.916 --> 10:56:39.667
thousands of classes, which is 
too many.

10:56:40.919 --> 10:56:43.853
We need to fix this.  This is 
the new flow we're working on 

10:56:45.482 --> 10:56:47.482
and what it looks like.

10:56:50.409 --> 10:56:52.409
When we compile library 2, there
is binary resources.

10:56:55.128 --> 10:56:57.128
We can't make it work with 
aapt2.

10:56:58.627 --> 10:57:00.627
We need aapt2 is the future.

10:57:01.723 --> 10:57:03.723
We create the R class.

10:57:05.987 --> 10:57:07.613
Rather than the source code so 
we don't have to compile it.  

10:57:07.614 --> 10:57:11.732
When we depend on it, consume it
in library one, what we will do 

10:57:11.733 --> 10:57:13.733
is only process the resources of
that module.  

10:57:15.448 --> 10:57:17.896
Then we'll use the output of the
previous module, the same way, 

10:57:22.201 --> 10:57:24.201
basically, you use during Java 
C.

10:57:27.169 --> 10:57:29.417
It is mostly there to validate 
the resource, and use the 

10:57:29.418 --> 10:57:32.058
packages that only contain the 
resources.  There is no longer a

10:57:32.059 --> 10:57:34.752
merge.  And the R class only of 
that library.  

10:57:36.800 --> 10:57:38.273
That library R class only 
contain the resources of that 

10:57:38.274 --> 10:57:42.366
library.  It does not contain 
the resource I.D. of the 

10:57:42.367 --> 10:57:44.407
previous library and this one.
We don't merge those anymore.

10:57:59.392 --> 10:58:01.392
When the app depends on library 
1 and 2, it is the same.

10:58:02.873 --> 10:58:04.873
It needs to merge to the final 
one.  Create the final class.

10:58:10.617 --> 10:58:12.617
You can see a lot less classes 
and efficient.

10:58:14.337 --> 10:58:16.337
You can see in the library 2 by 
editing a string.

10:58:18.430 --> 10:58:20.457
There is no reason to compile 
library 1 again.  It is the 

10:58:20.458 --> 10:58:23.927
least of I.D.s that I need to 
change against for reference is 

10:58:23.928 --> 10:58:27.006
exactly the same one.  No 
changes.  So we can use the same

10:58:27.007 --> 10:58:29.308
thing, like compilation 
avoidance that we used and 

10:58:32.461 --> 10:58:34.894
we don't need to recompile 
library 1 or the app, all we 

10:58:34.895 --> 10:58:36.895
have to do is the final link and
that's it.

10:58:39.043 --> 10:58:41.313
We can do that also because the 
R class for the app does not use

10:58:41.314 --> 10:58:44.837
final I.D. any more.  
Let's look at some of the impact

10:58:44.838 --> 10:58:46.838
of the change.

10:58:47.905 --> 10:58:50.804
So first, I said that the R 
class of each module only 

10:58:50.805 --> 10:58:53.484
contained the (?) Of that 
module, it doesn't contain all 

10:58:53.905 --> 10:58:56.633
of them.  
If you want to reference another

10:58:59.497 --> 10:59:01.497
resources from another module, 
use the R 

10:59:02.559 --> 10:59:07.522
class from that module instead 
of the R class from your app.  

10:59:07.523 --> 10:59:09.523
You are likely to impart more 
than one R class.

10:59:12.461 --> 10:59:14.952
We are looking at ways to make 
that work.  It is not reason for

10:59:14.953 --> 10:59:16.953
the R class to be R, it could be
whatever else.

10:59:20.315 --> 10:59:22.389
Each library could define its 
own name to reduce the amount of

10:59:22.390 --> 10:59:24.390
conflicts.

10:59:25.476 --> 10:59:27.932
The R class are not final, even 
in the app, which means you 

10:59:27.933 --> 10:59:31.463
can't use Java switch cases any 
more.  

10:59:34.126 --> 10:59:36.126
I mentioned we're not doing 
resource merger any more.

10:59:38.644 --> 10:59:40.299
If you have a module that 
redefined a resource presented 

10:59:40.300 --> 10:59:43.635
in the library, that won't work 
any more.  There is good reason 

10:59:43.636 --> 10:59:47.991
for that.  We definitely want to
hear from you if you are using 

10:59:47.992 --> 10:59:49.992
that in a strange way.

10:59:51.722 --> 10:59:54.602
If what you are doing is well in
debug in the app I want to 

10:59:54.603 --> 10:59:56.603
everride an icon 

10:59:58.774 --> 11:00:01.262
coming from my library, you can 
use that (?) In my library, have

11:00:01.263 --> 11:00:04.776
a version of the debug in the 
icon.  The app will contain the 

11:00:04.777 --> 11:00:06.777
debug, which was not the case 
before 3.0.  

11:00:07.239 --> 11:00:09.239
That solves that problem.

11:00:10.978 --> 11:00:12.606
If you have another use case, 
talk to us, we definitely want 

11:00:12.607 --> 11:00:14.607
to hear about it. 

11:00:19.309 --> 11:00:20.554
So I mention name space and I 
talked about the name space.  

11:00:20.555 --> 11:00:27.986
I said we don't have a resource 
merger or resource available.  

11:00:27.987 --> 11:00:29.987
The application depend on a 
third party here and here.

11:00:32.494 --> 11:00:33.726
And both have the same resource,
same name with a different 

11:00:33.727 --> 11:00:35.727
value.

11:00:38.270 --> 11:00:40.270
A string may be a layout or 
night or something like that.

11:00:42.221 --> 11:00:44.699
In the past the resource merger 
takes one physically.  The first

11:00:44.700 --> 11:00:46.542
one defined has a higher 
priority and merge on top of the

11:00:46.543 --> 11:00:50.045
other one and replace another 
one, which is probably not what 

11:00:50.046 --> 11:00:53.115
you want. 
So here what's happening if you 

11:00:53.116 --> 11:00:55.116
want to package both.  

11:00:57.285 --> 11:00:59.285
Both are going to be compiled in
their own name space.

11:01:01.427 --> 11:01:03.071
We will package that internally,
the R class from those libraries

11:01:03.072 --> 11:01:05.072
will have 

11:01:07.207 --> 11:01:09.069
different -- would have the same
string, with the different 

11:01:09.070 --> 11:01:11.070
values but interestingly they 
will point to two 

11:01:13.379 --> 11:01:16.304
different resources, which is 
much better.  When you reference

11:01:16.305 --> 11:01:19.963
to a resource from the library, 
you have to use the name space 

11:01:19.964 --> 11:01:21.964
of the library.

11:01:23.253 --> 11:01:25.253
Using the R class of that is to 
classify it.

11:01:26.552 --> 11:01:28.552
You don't have a single R class 
with all the I.D.

11:01:29.068 --> 11:01:31.068
When you do that, it is 
different.

11:01:35.128 --> 11:01:37.410
You have to use the manifest -- 
the XML, you have to use the 

11:01:37.411 --> 11:01:39.411
name space directly in the 
resources.

11:01:46.012 --> 11:01:48.012
So at dot comlibrary one/X, 
which is 

11:01:49.624 --> 11:01:51.896
very similar when you name an 
Android.  Android column 

11:01:51.897 --> 11:01:53.897
something.

11:01:55.304 --> 11:01:57.304
You have

11:01:58.560 --> 11:02:01.440
atribattributes you probably do 
the same thing.  Now you have to

11:02:01.441 --> 11:02:03.441
case what the name space is.  
This is out.

11:02:06.210 --> 11:02:08.256
This is -- you know, this SML 
constraint is that name space of

11:02:08.257 --> 11:02:10.946
the library.  And I can use the 
attributes. 

11:02:17.564 --> 11:02:19.564
So we are hoping to bring this  
-- that in 3.3 Canary.  

11:02:20.301 --> 11:02:23.014
We will enable that with a flag.
We will include refractoring in 

11:02:23.015 --> 11:02:28.781
the studio, so all of those will
be changed for you.  We will 

11:02:28.782 --> 11:02:30.782
want a lot of feedback, it 

11:02:32.297 --> 11:02:34.297
will not be turned on in 3.3 or 
redot.  

11:02:36.598 --> 11:02:38.598
There is a revision where there 
is 

11:02:40.151 --> 11:02:42.151
changes, but we want a lot of 
feedback.  

11:02:42.833 --> 11:02:45.559
&gt;&gt; JEROME DOCHEZ: Thank you.  
Last thing we want to talk about

11:02:45.560 --> 11:02:47.560
is the public API.

11:02:50.456 --> 11:02:54.416
We are painfully aware that the 
public API we provide is not 

11:02:54.417 --> 11:02:56.417
very good.

11:02:59.577 --> 11:03:01.577
The plug in is bad not specific 
to the module type.

11:03:03.668 --> 11:03:05.668
It is not set in different 
modules, but it is still there.

11:03:08.411 --> 11:03:10.655
There is no access to the merge 
man vest, class files, dex files

11:03:10.656 --> 11:03:12.917
you name it, you can't do it in 
a nice way.

11:03:17.839 --> 11:03:19.492
The varying modal doesn't give 
information coming from the 

11:03:19.493 --> 11:03:21.743
properties.  
You only have access to part of 

11:03:21.744 --> 11:03:26.499
the truth.  This is too many 
things that require internal PI,

11:03:26.500 --> 11:03:30.660
hacking tasks, the separation 
between public and internal API 

11:03:30.661 --> 11:03:32.788
is not well defined.  You don't 
know when you switch from one to

11:03:32.789 --> 11:03:37.360
the other.  It is a mess.  And 
to give you an example, this is 

11:03:39.219 --> 11:03:41.219
how the configuration works 
today.

11:03:43.463 --> 11:03:47.552
So we have the DSL passing first
and create the variant, right.  

11:03:47.553 --> 11:03:49.785
That variant is created, then we
create all the tasks for the 

11:03:49.786 --> 11:03:51.786
variants 

11:03:54.799 --> 11:03:58.242
and eventually we have the RTPI.
This is where the scripts are 

11:03:58.243 --> 11:04:01.739
running.  The problem is there 
in front of you, it is happening

11:04:01.740 --> 11:04:03.740
after the tasks have been 
created.

11:04:05.571 --> 11:04:08.078
So there is no way to change 
anything that will influence 

11:04:08.079 --> 11:04:10.079
tasks creation.

11:04:13.225 --> 11:04:15.225
Say you want to switch from 
legacy 

11:04:17.972 --> 11:04:20.112
multidex to regular multidesk, 
you can't do that because we 

11:04:20.113 --> 11:04:22.113
have changed to legacy multidex.

11:04:24.213 --> 11:04:26.295
You want DSL, you can't do that 
either because we created the 

11:04:26.296 --> 11:04:28.296
task and chances 

11:04:30.038 --> 11:04:32.038
are that the input have already 
been finalized.  

11:04:33.585 --> 11:04:36.045
So it is happening too late and 
eventually, it creeps into the 

11:04:36.046 --> 11:04:38.931
system running later.  
There is no way to do a lot of 

11:04:38.932 --> 11:04:40.932
things here.

11:04:43.511 --> 11:04:46.157
So people do is excise the task,
try to find out the generator.  

11:04:46.158 --> 11:04:51.738
It is a mess. 
What we would like to do is have

11:04:51.739 --> 11:04:53.739
a 

11:04:58.178 --> 11:05:01.097
simple Gradle API interface that
is the one to depend on.  If you

11:05:01.098 --> 11:05:03.981
depend on older ones, you should
talk to us, tell us what are 

11:05:03.982 --> 11:05:05.982
your needs, why are you doing 
this?

11:05:07.677 --> 11:05:10.207
Don't think that we're not 
listening.  We are interested in

11:05:10.208 --> 11:05:14.302
it figuring out why you need to 
customize things and interested 

11:05:14.303 --> 11:05:16.774
in providing you a good 
solution.  So one of the things 

11:05:16.775 --> 11:05:19.480
we're looking for, for instance,
is to give you access 

11:05:23.186 --> 11:05:25.638
to all of the intermediate 
files.  All of the intermediate 

11:05:25.639 --> 11:05:27.704
files are really a type.

11:05:32.088 --> 11:05:34.088
Classes, merge manifest, text 
files, resources.

11:05:35.827 --> 11:05:39.358
All of those should be accessed 
and capable of being replaced.  

11:05:39.359 --> 11:05:42.258
You should be able to say give 
me the merge manifest, change it

11:05:42.259 --> 11:05:45.765
a little bit and I give you back
the new version.  That is the 

11:05:45.766 --> 11:05:49.503
one you should use to continue 
the build process.  It should be

11:05:49.504 --> 11:05:52.999
replaceable.  Dependable.  
Maybe you want to add class 

11:05:53.000 --> 11:05:55.000
files directly.

11:05:56.082 --> 11:05:57.908
Eventually, all of this should 
be done through well defined 

11:05:57.909 --> 11:06:01.206
extension points.  We started 
working on it.  We would like to

11:06:01.207 --> 11:06:05.835
have feedback on this. 
Proposed phases would be 

11:06:05.836 --> 11:06:07.836
different.

11:06:10.221 --> 11:06:12.221
DSL parsing, invoke the custom 
code there. 

11:06:13.746 --> 11:06:15.746
You have the ability to stop 
changing 

11:06:17.941 --> 11:06:21.219
the DSL program atatally before 
we create variants.  Then we 

11:06:21.220 --> 11:06:25.109
lock them up.  You can't change 
any more.  Once it runs, it is 

11:06:25.110 --> 11:06:29.771
locked up.  We create a variance
from the information.

11:06:31.834 --> 11:06:34.564
From the variant we can code 
from variant to API.  That is 

11:06:34.565 --> 11:06:36.422
the ability for you to change 
variant related information.  

11:06:36.423 --> 11:06:39.921
Now, be aware that this is 
happening now before the task 

11:06:39.922 --> 11:06:43.577
creation.  There is no task 
created yet.  This is really the

11:06:43.578 --> 11:06:45.578
ability to say it 

11:06:46.912 --> 11:06:48.912
was using multidex, now I want 
it to use 

11:06:52.276 --> 11:06:53.503
legacy multidex one these have 
run, we will lockup the variant 

11:06:53.504 --> 11:06:55.504
object.

11:06:57.182 --> 11:06:59.182
So again, if you use this later 
on, 

11:07:00.193 --> 11:07:02.193
after

11:07:03.658 --> 11:07:05.658
evaluate, it is too on late.  It
will throw an exception.

11:07:08.426 --> 11:07:11.686
Then we create a task, we will 
lock them up immediately.  We 

11:07:11.687 --> 11:07:13.687
will not allow you to modify the
task any more.

11:07:15.844 --> 11:07:18.094
You have to go through the 
buildable artifact, to inject, 

11:07:18.095 --> 11:07:20.175
replace, append, not with the 
task, because we replace 

11:07:24.055 --> 11:07:26.960
them, we merge them, we delete 
them, we split them to make 

11:07:26.961 --> 11:07:28.961
features or make things more 
efficient.  

11:07:31.771 --> 11:07:33.771
Eventually, it will run.

11:07:35.085 --> 11:07:37.085
The compatibility will be a 
painful subject.

11:07:38.796 --> 11:07:42.144
We will try to make use of the 
DSL mostly unchanged.  We will 

11:07:42.145 --> 11:07:44.839
make an effort to be more 
content friendly, and 

11:07:44.840 --> 11:07:48.959
unfortunately, we think the 
variant API will change heavily,

11:07:48.960 --> 11:07:50.790
since we realize it was not so 
great, hopefully you will be 

11:07:50.791 --> 11:07:55.522
sympathetic to the idea that you
will have to change the script 

11:07:55.523 --> 11:07:57.523
using the variant API. 

11:08:00.622 --> 11:08:01.844
So we want to hear from you it 
is important that we get 

11:08:01.845 --> 11:08:04.364
feedback from the community for 
us.  I want to thank you for 

11:08:04.365 --> 11:08:06.365
coming tonight.  I know it is a 
late session.

11:08:09.730 --> 11:08:12.665
It was very nice to see so many 
people here tonight.  Thank 

11:08:12.666 --> 11:08:13.071
youyou. 
&gt;&gt; XAVIER DUCROHET: Thank you.

11:08:17.320 --> 11:08:19.320
(Applause) 

11:08:40.320 --> 11:08:42.320
&gt;&gt; Thank you there joining this 
session.

11:08:43.823 --> 11:08:45.930
Brand ambassadors will assist 
you with -- 

11:08:49.767 --> 11:08:51.767
(Session concluded)  

