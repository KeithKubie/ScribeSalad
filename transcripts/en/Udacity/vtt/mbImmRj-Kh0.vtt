WEBVTT
Kind: captions
Language: en

00:00:00.190 --> 00:00:02.719
Since Android Wear devices
are worn by the users,

00:00:02.719 --> 00:00:05.390
they're the ideal platform to
implement fitness applications.

00:00:05.390 --> 00:00:08.930
These types of applications
typically use sensors on the device

00:00:08.930 --> 00:00:11.710
to measure step counts,
acceleration, and position.

00:00:11.710 --> 00:00:15.470
The good news is that Android Wear
uses exactly the same sensor API

00:00:15.470 --> 00:00:17.790
as regular Android phones and
tablet's, so

00:00:17.790 --> 00:00:21.420
you can use all your existing
knowledge about sensors here as well.

00:00:21.420 --> 00:00:23.490
Let's look at a sample
to see how it works.

00:00:23.490 --> 00:00:25.020
A good one is called jumping jack.

00:00:25.020 --> 00:00:28.080
So let's create a project
around that and test it.

00:00:28.080 --> 00:00:31.000
In this case, I'm going to use
a real watch to test it out and

00:00:31.000 --> 00:00:32.290
show you how it works.

00:00:32.290 --> 00:00:35.700
Right now, it has zero on
the counter shown in the activity.

00:00:35.700 --> 00:00:37.116
So let's do a few jumping jacks.

00:00:37.116 --> 00:00:44.930
One, two, three and now, you can see
that it's counted the values correctly.

00:00:44.930 --> 00:00:47.880
So what is different about working
with sensors on Android Wear?

00:00:47.880 --> 00:00:51.240
Well, the main differences come
down to saving battery power, and

00:00:51.240 --> 00:00:53.450
not doing too much processing
on the wearable device.

00:00:53.450 --> 00:00:57.090
Let's go through some best practices for
sensors on Android Wear.

00:00:57.090 --> 00:00:59.050
You want to do as little
work as possible.

00:00:59.050 --> 00:01:01.860
So unregister your listener
when you don't need it.

00:01:01.860 --> 00:01:02.830
For a running app,

00:01:02.830 --> 00:01:07.030
we only want to log steps when the user
is running the actual activity.

00:01:07.030 --> 00:01:09.680
For the rest of the day when the
activity is not running, we should put

00:01:09.680 --> 00:01:13.170
the device to sleep and use
the standard watch face saving power.

00:01:13.170 --> 00:01:15.940
The next things is to select
an appropriate update rate.

00:01:15.940 --> 00:01:17.940
If you're going to refresh
the display every minute,

00:01:17.940 --> 00:01:20.830
then there's no point getting
updates ten times per second.

00:01:20.830 --> 00:01:23.880
And you might also want to request
that the results are batched up

00:01:23.880 --> 00:01:27.350
over this time period, so that the CPU
can stay asleep the whole time.

00:01:27.350 --> 00:01:31.000
The registerListener method allows
you to control these factors.

00:01:31.000 --> 00:01:33.510
Also, make sure if you
need to process the data,

00:01:33.510 --> 00:01:36.170
try to do as much on
the phone as possible.

00:01:36.170 --> 00:01:39.630
Remember, the phone has a huge battery
compared to the little wearable here.

00:01:39.630 --> 00:01:40.570
So take advantage of that.

00:01:40.570 --> 00:01:43.480
If you're trying to measure
the bumpiness of a car ride, and

00:01:43.480 --> 00:01:46.550
you know the Wearable user has
their phone with them, why not use

00:01:46.550 --> 00:01:49.670
the accelerometer on the phone to do
the logging instead of the Wearable?

00:01:49.670 --> 00:01:52.810
The GPS feature in Android Wear
does exactly this.

00:01:52.810 --> 00:01:54.070
If you have the phone and

00:01:54.070 --> 00:01:58.640
the Wearable in close proximity, it
will actually use the phone's GPS unit.

00:01:58.640 --> 00:02:01.760
If the wearable goes out on a run
while the phone stays at home and

00:02:01.760 --> 00:02:05.900
if the device has a GPS built in,
it'll use the GPS from the wearable.

00:02:05.900 --> 00:02:08.190
There's a sample for
this called speed tracker.

00:02:08.190 --> 00:02:11.038
Check it out for yourself and
see how it's implemented.

00:02:11.038 --> 00:02:13.640
When you sensor that was
introduced in KitKat phones and

00:02:13.640 --> 00:02:16.200
available on all Wearables
is the step counter.

00:02:16.200 --> 00:02:18.990
This is really useful for
fitness applications and

00:02:18.990 --> 00:02:21.285
is a low power sensor you can use often.

00:02:21.285 --> 00:02:24.150
It's also a lot more efficient than
trying to build your own step counter by

00:02:24.150 --> 00:02:25.540
reading the accelerometers.

00:02:25.540 --> 00:02:28.350
The Android step counter is
provided by dedicated hardware.

00:02:28.350 --> 00:02:31.881
You'll notice in the documentation
there is a TYPE_STEP_DETECTOR,

00:02:31.881 --> 00:02:33.820
and a TYPE_STEP_COUNTER.

00:02:33.820 --> 00:02:37.340
The detector is configured to trigger
every time a step is made, but

00:02:37.340 --> 00:02:40.910
it's possible that you'll not receive
the events if the device is sleeping.

00:02:40.910 --> 00:02:42.580
You also don't want to have
the device wake up and

00:02:42.580 --> 00:02:46.500
run your code after every single step,
like at these points here.

00:02:46.500 --> 00:02:49.230
Especially if you only refresh
the display every minute.

00:02:49.230 --> 00:02:52.380
So the step counter here
is a much better idea.

00:02:52.380 --> 00:02:53.970
It gives you an absolute value, so

00:02:53.970 --> 00:02:55.890
your code does not need
to wake up on every step.

00:02:55.890 --> 00:02:57.820
And you cannot miss any steps,

00:02:57.820 --> 00:03:00.020
because you always get
the absolute value each time.

