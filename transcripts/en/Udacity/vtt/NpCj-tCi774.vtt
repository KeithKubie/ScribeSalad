WEBVTT
Kind: captions
Language: en

00:00:00.590 --> 00:00:03.330
I want to tell you about a neat
variation on scans called

00:00:03.330 --> 00:00:05.580
Segmented Scans.

00:00:05.580 --> 00:00:06.960
Now, suppose I give you this array.

00:00:08.020 --> 00:00:12.180
And let's say that you want to perform
a scan not on the entire array, but

00:00:12.180 --> 00:00:16.660
you want to do a bunch of independent
scans on segments of the array.

00:00:16.660 --> 00:00:19.190
In this case the example is
broken up into four segments.

00:00:20.440 --> 00:00:23.280
Now suppose to tell you where
the boundaries start and

00:00:23.280 --> 00:00:25.320
end I give you an array of flags.

00:00:26.530 --> 00:00:30.920
Flags are Boolean with a true
value wherever a segment begins.

00:00:30.920 --> 00:00:34.360
Were you doing things sequentially you
might use the following algorithm.

00:00:34.360 --> 00:00:38.280
So the algorithm iterates over all
elements and it looks at the flag array.

00:00:39.370 --> 00:00:43.710
If the flag is set, meaning it's true,
then the algorithm does nothing,

00:00:43.710 --> 00:00:46.970
basically leaves
the value A sub i alone.

00:00:46.970 --> 00:00:49.910
Otherwise, it does a scan.

00:00:49.910 --> 00:00:53.490
This computation looks tantalizingly
like a scan, except for

00:00:53.490 --> 00:00:54.950
this pesky conditional check.

00:00:56.000 --> 00:00:57.210
So what if we did the following?

00:00:58.270 --> 00:01:01.570
I'm going to define a new kind of value,
which I've labeled here as Xi.

00:01:02.750 --> 00:01:07.220
This Xi is basically a two pole,
or in this case a pair.

00:01:07.220 --> 00:01:11.740
The pair consists of one value from
the array and the corresponding flag.

00:01:11.740 --> 00:01:13.310
Now from this new data type,

00:01:13.310 --> 00:01:17.430
let's define a new funny
operator that I'll call op.

00:01:17.430 --> 00:01:20.360
Op takes two pairs and
basically implements something

00:01:20.360 --> 00:01:22.940
that looks a heck of a lot like
the body of this for loop.

00:01:23.950 --> 00:01:26.482
It checks the flag of
this second object.

00:01:26.482 --> 00:01:29.460
Now if that flag is false,

00:01:29.460 --> 00:01:34.580
meaning we don't take the if,
then it just returns the second value.

00:01:34.580 --> 00:01:38.155
Otherwise, it returns a special
value that combines the two inputs.

00:01:38.155 --> 00:01:42.900
Now notice this is the usual addition,
which we would see in a scan.

00:01:42.900 --> 00:01:48.402
And this is a logical or operation,
since we're operating on Boolean flags.

00:01:48.402 --> 00:01:51.840
Now I claim, if you have this operator
you can re-write the segmented

00:01:51.840 --> 00:01:54.550
ad scan from before in a different way.

00:01:54.550 --> 00:01:55.930
Let's see how.

00:01:55.930 --> 00:01:57.450
Here's our operator from before,

00:01:57.450 --> 00:02:01.250
and here's the new implementation
of segmented add scan.

00:02:01.250 --> 00:02:04.930
First, we'll declare a new
array to hold these pairs.

00:02:04.930 --> 00:02:07.250
And notice it starts at
zero instead of one, so

00:02:07.250 --> 00:02:10.210
they're actually N plus one such pairs.

00:02:10.210 --> 00:02:13.970
This next snippet of code
actually builds the array X.

00:02:13.970 --> 00:02:15.500
You'll notice it builds the pairs but

00:02:15.500 --> 00:02:20.370
it also builds a special initial value,
which is set to zero and false.

00:02:20.370 --> 00:02:23.670
And fact, zero and
false are the identity elements for

00:02:23.670 --> 00:02:28.660
the two operators,
addition and logical or.

00:02:28.660 --> 00:02:32.740
Once X is all set up, we can do
a scan using our funny new operator.

00:02:33.890 --> 00:02:37.630
And finally the routine only needs
to return the updated scan values.

00:02:37.630 --> 00:02:40.300
So there's a final little
loop here to extract

00:02:40.300 --> 00:02:42.980
the left most element of each pair.

00:02:42.980 --> 00:02:44.430
The left most element being this guy.

00:02:45.930 --> 00:02:49.620
Now you should compare this new
segmented scan with the old one and

00:02:49.620 --> 00:02:53.360
convince yourself that this new
implementation computes the same thing.

