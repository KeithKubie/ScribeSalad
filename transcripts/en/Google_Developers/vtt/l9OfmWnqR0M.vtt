WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.840
BASHEER TOME: Hi, everyone.

00:00:01.840 --> 00:00:02.942
Welcome to our session.

00:00:02.942 --> 00:00:05.150
If you're here to learn
about the Daydream controller

00:00:05.150 --> 00:00:07.450
and how to design and
develop for it, then,

00:00:07.450 --> 00:00:10.350
well, you're in the right place.

00:00:10.350 --> 00:00:13.500
We're going to be doing this
session in three main chapters,

00:00:13.500 --> 00:00:15.560
how, why, and what.

00:00:15.560 --> 00:00:17.910
We'll dive briefly into the
design of the controller

00:00:17.910 --> 00:00:18.772
itself.

00:00:18.772 --> 00:00:20.980
We'll then walk through the
technical concepts on how

00:00:20.980 --> 00:00:24.012
to implement the controller,
support, and Unity in C++,

00:00:24.012 --> 00:00:26.470
and then we're going to bring
Ryan Francisco on from Schell

00:00:26.470 --> 00:00:28.720
Games to share what they've
learned and showcase over

00:00:28.720 --> 00:00:31.190
a dozen mini games that they've
built in the past few weeks

00:00:31.190 --> 00:00:34.640
that really help show what
this new input device can do.

00:00:34.640 --> 00:00:36.890
So let's get started.

00:00:36.890 --> 00:00:37.390
Hi.

00:00:37.390 --> 00:00:38.440
I'm Basheer.

00:00:38.440 --> 00:00:40.070
I'm a hardware
interface designer here

00:00:40.070 --> 00:00:42.600
on the Google VR team and the
design lead for the Daydream

00:00:42.600 --> 00:00:43.390
controller.

00:00:43.390 --> 00:00:46.594
I'll be walking you
through the first part.

00:00:46.594 --> 00:00:48.010
What are the most
important things

00:00:48.010 --> 00:00:49.440
that we have learned
from Cardboard?

00:00:49.440 --> 00:00:51.380
As you might have heard
in our other sessions

00:00:51.380 --> 00:00:53.490
is that while VR
is great for gaming

00:00:53.490 --> 00:00:55.970
and we've had so much fun
with a lot of the games

00:00:55.970 --> 00:00:57.830
that we've played
so far, we really

00:00:57.830 --> 00:01:00.630
believe that VR is going to be
great for so many other things

00:01:00.630 --> 00:01:03.530
as well and has a ton of
potential as a computing

00:01:03.530 --> 00:01:04.959
platform.

00:01:04.959 --> 00:01:07.815
And that is what makes it
such a compelling experience

00:01:07.815 --> 00:01:09.840
to a huge breadth of people.

00:01:09.840 --> 00:01:12.340
And for many of these
people, the applications

00:01:12.340 --> 00:01:14.110
that you're building
right now are

00:01:14.110 --> 00:01:17.040
going to be some of their
first experiences in VR.

00:01:17.040 --> 00:01:19.200
And so the more we
thought about that,

00:01:19.200 --> 00:01:21.480
the more we realized
that we needed

00:01:21.480 --> 00:01:24.170
to build a better, more
immersive, longer form

00:01:24.170 --> 00:01:27.990
way for people to interact in
VR that didn't involve them

00:01:27.990 --> 00:01:30.520
keeping their hand
up here on their head

00:01:30.520 --> 00:01:32.080
on one singular
button like they do

00:01:32.080 --> 00:01:34.990
with the more snackable
experiences of Cardboard.

00:01:34.990 --> 00:01:37.610
So we made the
Daydream controller.

00:01:37.610 --> 00:01:39.900
While it doesn't
literally float in the air

00:01:39.900 --> 00:01:42.070
like it does on this
slide, it is something

00:01:42.070 --> 00:01:43.778
that you can hold in
your hand that we've

00:01:43.778 --> 00:01:45.920
been creating for our
new Daydream platform

00:01:45.920 --> 00:01:49.660
to help connect people to
their environment in mobile VR.

00:01:49.660 --> 00:01:52.400
It enables you to explore and
manipulate things naturally

00:01:52.400 --> 00:01:55.470
in a 3D VR environment by
letting you directly point at

00:01:55.470 --> 00:01:58.960
and click on objects, hold
a tool in the virtual world,

00:01:58.960 --> 00:02:01.510
and navigate menus.

00:02:01.510 --> 00:02:03.440
We've spent a lot
of time and energy

00:02:03.440 --> 00:02:06.150
in order to create something
that is accessible and simple

00:02:06.150 --> 00:02:10.419
enough for new users and people
of all kinds of interests that

00:02:10.419 --> 00:02:13.390
enables everyone to express
themselves creatively,

00:02:13.390 --> 00:02:16.210
directly, precisely,
intricately,

00:02:16.210 --> 00:02:18.210
and that doesn't force
them to lug around

00:02:18.210 --> 00:02:19.930
something huge and unwieldy.

00:02:19.930 --> 00:02:23.540
The ultimate goal was
a powerful, simple tool

00:02:23.540 --> 00:02:26.070
that fits right in your pocket.

00:02:26.070 --> 00:02:28.160
So let's start from the top.

00:02:28.160 --> 00:02:31.200
The Daydream controller has
a curved clickable touchpad

00:02:31.200 --> 00:02:34.300
that allows people to make
both fine-grained manipulations

00:02:34.300 --> 00:02:37.290
and quick swipes for
scrolling while still enabling

00:02:37.290 --> 00:02:40.840
them to make click selections
without lifting their thumb.

00:02:40.840 --> 00:02:41.960
How does that work?

00:02:41.960 --> 00:02:44.530
Well, if you look closely at
the side of the controller,

00:02:44.530 --> 00:02:47.860
we've achieved this by embedding
a tactile, clickable switch

00:02:47.860 --> 00:02:51.030
directly beneath the touchpad
that allows the top housing

00:02:51.030 --> 00:02:54.122
to elegantly flex when you
apply pressure with your finger.

00:02:54.122 --> 00:02:55.580
And that's something
that shouldn't

00:02:55.580 --> 00:02:59.830
be too unfamiliar for a
laptop touchpad users.

00:02:59.830 --> 00:03:02.330
Then reachable just
below the touchpad

00:03:02.330 --> 00:03:05.860
are two buttons, the Home
button and the Up button.

00:03:05.860 --> 00:03:08.420
The recessed Home button
is reserved entirely

00:03:08.420 --> 00:03:09.332
for the system.

00:03:09.332 --> 00:03:11.040
Pressing it takes
people immediately back

00:03:11.040 --> 00:03:13.660
to the Home world, while holding
it down for just a little

00:03:13.660 --> 00:03:16.570
bit longer lets them
reorient their view.

00:03:16.570 --> 00:03:19.390
The App button, as you
can guess from the name,

00:03:19.390 --> 00:03:22.720
has its functionality reserved
entirely for app developers.

00:03:22.720 --> 00:03:24.690
For example, you
could use it to enable

00:03:24.690 --> 00:03:28.810
switching from a hammer to
a saw, more often than not,

00:03:28.810 --> 00:03:31.720
to open up a menu,
or in some cases,

00:03:31.720 --> 00:03:35.150
undoing a failed pancake flip.

00:03:35.150 --> 00:03:38.330
And since your phone is
inside the viewer and audio

00:03:38.330 --> 00:03:40.930
is such an important
part of VR, we've

00:03:40.930 --> 00:03:42.790
got hardware volume
buttons directly

00:03:42.790 --> 00:03:45.000
in your hand to make it so
that people can reach them

00:03:45.000 --> 00:03:47.940
conveniently and quickly.

00:03:47.940 --> 00:03:50.880
However, the most important
and foundational aspect

00:03:50.880 --> 00:03:53.490
of the controller is its
ability to directly point

00:03:53.490 --> 00:03:55.500
in 3D space around you.

00:03:55.500 --> 00:03:58.460
We use a highly
calibrated 9-axis IMU

00:03:58.460 --> 00:04:01.100
that combines and fuses
data from an accelerometer,

00:04:01.100 --> 00:04:03.650
gyroscope, and
magnetometer to output

00:04:03.650 --> 00:04:07.590
an absolute rotation
value in space.

00:04:07.590 --> 00:04:11.050
This means that instead of
relying entirely on a touchpad

00:04:11.050 --> 00:04:13.200
to scroll through lists
locked to your viewport

00:04:13.200 --> 00:04:14.870
or turning your head
in every direction

00:04:14.870 --> 00:04:18.730
to click on something, instead
you just point directly at it

00:04:18.730 --> 00:04:20.959
with your hand and click.

00:04:20.959 --> 00:04:22.887
And because it's
done on a chip, you

00:04:22.887 --> 00:04:24.470
can do that anywhere
around you would,

00:04:24.470 --> 00:04:26.010
be it straight
ahead, to your right,

00:04:26.010 --> 00:04:28.910
or behind you and all
that without having

00:04:28.910 --> 00:04:31.270
any need to lug around and
set up an external camera

00:04:31.270 --> 00:04:34.100
or tracking system.

00:04:34.100 --> 00:04:37.150
And because of this took both
leaps in design as well as

00:04:37.150 --> 00:04:38.810
in hardware and
software, we've been

00:04:38.810 --> 00:04:41.880
developing both in parallel
as a team together.

00:04:41.880 --> 00:04:45.390
Here is one of our hacky,
early prototypes that we

00:04:45.390 --> 00:04:48.180
had been using in development,
which because of its similarity

00:04:48.180 --> 00:04:52.150
and its size, we lovingly
call the garage door opener.

00:04:52.150 --> 00:04:53.970
And we and our various
teams around Google

00:04:53.970 --> 00:04:57.000
had been using these to test and
prototype a lot of our software

00:04:57.000 --> 00:04:58.420
and hardware stack.

00:04:58.420 --> 00:05:00.930
But as we got deeper
into the project,

00:05:00.930 --> 00:05:03.560
we realized we couldn't just
mail one of these to everyone

00:05:03.560 --> 00:05:06.480
out there and we'd really
love for both everyone

00:05:06.480 --> 00:05:09.170
here in person as well
as every other developer

00:05:09.170 --> 00:05:11.710
out there to be able to
intimately incorporate

00:05:11.710 --> 00:05:14.200
this input into your
development process

00:05:14.200 --> 00:05:17.020
while creating your new VR apps.

00:05:17.020 --> 00:05:19.510
So Bruno, [INAUDIBLE], and
I and a handful of others

00:05:19.510 --> 00:05:22.080
found a scrappier, cheaper,
and more accessible way.

00:05:22.080 --> 00:05:23.780
It's in your pocket.

00:05:23.780 --> 00:05:26.640
Most modern mobile phones today
contain almost all the hardware

00:05:26.640 --> 00:05:29.560
you need to replicate the
controller minus the click.

00:05:29.560 --> 00:05:32.560
So we created an app, which
you'll be able to download soon

00:05:32.560 --> 00:05:35.430
called shockingly, the
Controller Emulator.

00:05:35.430 --> 00:05:38.040
And although the orientation
sensors might not

00:05:38.040 --> 00:05:41.360
be as precise or as calibrated
as in our final hardware spec,

00:05:41.360 --> 00:05:43.170
it should be a great
alternative to get off

00:05:43.170 --> 00:05:45.580
the prototyping fast.

00:05:45.580 --> 00:05:48.080
So with a second
phone, you'll be

00:05:48.080 --> 00:05:51.420
able to start up the, app which
creates a hotspot and connects

00:05:51.420 --> 00:05:54.890
to your viewer to broadcast
its input in real time.

00:05:54.890 --> 00:05:58.070
And that said, because we're
working in a VR world that's

00:05:58.070 --> 00:05:59.885
only tracked by a
rotation, you're

00:05:59.885 --> 00:06:01.760
essentially blindfolded
while you're in there

00:06:01.760 --> 00:06:03.650
and you're likely
holding a phone that's

00:06:03.650 --> 00:06:07.030
way bigger than the
hardware controller specs.

00:06:07.030 --> 00:06:08.690
So we've created
a sticker overlay

00:06:08.690 --> 00:06:10.184
to help guide your fingers.

00:06:10.184 --> 00:06:10.850
It's capacitive.

00:06:10.850 --> 00:06:12.360
It comes off
cleanly, but it still

00:06:12.360 --> 00:06:14.485
gives you just the right
amount of tactile feedback

00:06:14.485 --> 00:06:18.350
to find the now real-sized
touchpad and buttons on screen.

00:06:18.350 --> 00:06:21.200
We've got printable PDFs
for scissors and paper

00:06:21.200 --> 00:06:23.260
as well as laser cutable
vector files and a link

00:06:23.260 --> 00:06:24.330
to the sticker material.

00:06:24.330 --> 00:06:26.030
And all of that
will be in the SDK

00:06:26.030 --> 00:06:29.270
download itself as well as
online under developer site.

00:06:29.270 --> 00:06:31.350
I've also got a batch of
them pre-made with me,

00:06:31.350 --> 00:06:33.610
so after this talk I'll be
standing outside the tent

00:06:33.610 --> 00:06:36.550
if you want to come grab
one or ask questions.

00:06:36.550 --> 00:06:38.640
And Bruno, in the next
chapter, will show you

00:06:38.640 --> 00:06:41.140
how to implement the
SDK and how to enable

00:06:41.140 --> 00:06:44.410
you to use both this emulator
and the final hardware

00:06:44.410 --> 00:06:46.534
in your apps and
switching between the two

00:06:46.534 --> 00:06:47.950
should actually
be pretty seamless

00:06:47.950 --> 00:06:52.470
and require almost
no code change.

00:06:52.470 --> 00:06:54.840
But before I go, I
wanted to leave you

00:06:54.840 --> 00:06:56.582
with a pretty simple question.

00:06:56.582 --> 00:06:58.040
With the Daydream
controller, we're

00:06:58.040 --> 00:06:59.790
incredibly excited
about the possibilities

00:06:59.790 --> 00:07:00.831
that you'll come up with.

00:07:00.831 --> 00:07:03.910
You could be holding a tennis
racket, a whisk, a Frisbee,

00:07:03.910 --> 00:07:06.840
a steering wheel, and so
much more right your pocket.

00:07:06.840 --> 00:07:08.500
So what will you make in VR?

00:07:08.500 --> 00:07:11.340
Thanks.

00:07:11.340 --> 00:07:14.328
[APPLAUSE]

00:07:17.470 --> 00:07:18.553
BRUNO OLIVEIRA: All right.

00:07:18.553 --> 00:07:20.310
In my section of the
talk, we're going

00:07:20.310 --> 00:07:22.970
to be speaking a lot about code.

00:07:22.970 --> 00:07:25.210
But what exactly is code?

00:07:25.210 --> 00:07:27.020
Well, the way I like
to think about it

00:07:27.020 --> 00:07:30.570
is that from the left
side, you have the user,

00:07:30.570 --> 00:07:33.500
and say on the right side, you
have some abstract concept,

00:07:33.500 --> 00:07:35.360
say, happiness.

00:07:35.360 --> 00:07:39.390
Then the only thing that's
standing between those two

00:07:39.390 --> 00:07:41.130
is the code that we write.

00:07:41.130 --> 00:07:43.960
So that's why code
is such a big deal.

00:07:43.960 --> 00:07:46.000
But before we talk
about code, let's

00:07:46.000 --> 00:07:49.170
go briefly into the things
that you'll need to write code

00:07:49.170 --> 00:07:50.370
for the controller.

00:07:50.370 --> 00:07:52.330
So if you have the
controller on one side

00:07:52.330 --> 00:07:54.600
and you have your
phone on the other,

00:07:54.600 --> 00:07:56.340
how do these two
things communicate?

00:07:56.340 --> 00:07:58.581
Does anybody have a guess?

00:07:58.581 --> 00:07:59.080
Bluetooth?

00:07:59.080 --> 00:08:01.260
Yeah, that's a great guess.

00:08:01.260 --> 00:08:03.460
Yeah, more specifically it
is Bluetooth low energy.

00:08:03.460 --> 00:08:04.460
So the phone talks
to the controller

00:08:04.460 --> 00:08:06.440
to be able to flow
energy, and your app

00:08:06.440 --> 00:08:08.430
is there sitting on the phone.

00:08:08.430 --> 00:08:11.610
Now, if you're not exactly the
type of developer who wakes up

00:08:11.610 --> 00:08:13.110
every morning
thinking, yeah, let's

00:08:13.110 --> 00:08:15.925
write some low-level
Bluetooth code, don't worry,

00:08:15.925 --> 00:08:17.050
you won't actually have to.

00:08:19.650 --> 00:08:22.710
Because the Google VR
services is a layer

00:08:22.710 --> 00:08:24.800
on the system that talks
to Bluetooth directly

00:08:24.800 --> 00:08:27.630
to the controller so that
your app doesn't have to.

00:08:27.630 --> 00:08:29.710
Instead, your app
interacts directly

00:08:29.710 --> 00:08:31.163
with the Google VR SDK.

00:08:31.163 --> 00:08:33.520
And the Google VR SDK
does all the hard work

00:08:33.520 --> 00:08:35.909
of actually communicating
to Google VR services

00:08:35.909 --> 00:08:39.120
and ultimately to
the controller.

00:08:39.120 --> 00:08:41.870
The controllers are going to be
available later on in the year,

00:08:41.870 --> 00:08:44.926
but if you want to start
developing it right now,

00:08:44.926 --> 00:08:45.426
you can.

00:08:45.426 --> 00:08:48.750
All you have to do is
assemble your own DevKit.

00:08:48.750 --> 00:08:51.450
And your DevKit
consists of a viewer,

00:08:51.450 --> 00:08:56.174
you also need a Nexus
6P as the phone,

00:08:56.174 --> 00:08:58.590
and you'll need to install the
Android N Developer Preview

00:08:58.590 --> 00:09:01.760
3 on that phone.

00:09:01.760 --> 00:09:05.040
Instead of a real controller,
you can use a secondary phone

00:09:05.040 --> 00:09:06.700
as a controller emulator.

00:09:06.700 --> 00:09:10.960
So you need one viewer,
and you need two phones.

00:09:10.960 --> 00:09:13.570
From the perspective of
development, not much changes.

00:09:13.570 --> 00:09:14.480
You might be
worried though, do I

00:09:14.480 --> 00:09:16.771
have to write code especially
for the emulator and then

00:09:16.771 --> 00:09:18.400
will I have to
change everything?

00:09:18.400 --> 00:09:20.980
No, because the
Google VR Service

00:09:20.980 --> 00:09:23.560
deals with the
code that actually

00:09:23.560 --> 00:09:26.030
speaks to the controller,
so in terms of SDK,

00:09:26.030 --> 00:09:26.870
it's the same thing.

00:09:26.870 --> 00:09:28.953
You don't have to worry
about whether or not using

00:09:28.953 --> 00:09:31.100
the emulator or view controller

00:09:31.100 --> 00:09:35.460
SDK comes in several
flavors and you can go today

00:09:35.460 --> 00:09:38.100
to developets.google.com/vr
if you want to get started

00:09:38.100 --> 00:09:39.087
developing right away.

00:09:39.087 --> 00:09:41.170
So you don't need to wait
for the real controller,

00:09:41.170 --> 00:09:42.852
you can start right away today.

00:09:42.852 --> 00:09:44.810
Now, let's talk a little
bit about the features

00:09:44.810 --> 00:09:47.330
of the controller which are
common regardless of the SDK

00:09:47.330 --> 00:09:48.560
that you are using.

00:09:48.560 --> 00:09:50.920
The controller has
five main features--

00:09:50.920 --> 00:09:53.210
orientation, gyroscope,
accelerometer,

00:09:53.210 --> 00:09:55.980
and it also has a touchpad,
and several buttons.

00:09:55.980 --> 00:09:58.590
So let's go into a
little bit of detail

00:09:58.590 --> 00:10:00.490
about each of those
features starting

00:10:00.490 --> 00:10:03.706
with orientation, which is
perhaps the most intuitive one.

00:10:03.706 --> 00:10:05.830
Orientation just means it's
where the controller is

00:10:05.830 --> 00:10:09.420
pointing in space, in 3D space.

00:10:09.420 --> 00:10:11.690
We like to call it
a 3 DoF controller,

00:10:11.690 --> 00:10:14.570
not only because DoF
it's kind of a cool word,

00:10:14.570 --> 00:10:17.600
but also because it means
3 degrees of freedom.

00:10:17.600 --> 00:10:20.310
And which 3 degrees
of freedom are those?

00:10:20.310 --> 00:10:23.130
That is the yaw, so
where you're pointing

00:10:23.130 --> 00:10:25.360
the controller, the pitch,
also called elevation,

00:10:25.360 --> 00:10:28.100
and the roll, which is
also called twist or bang.

00:10:28.100 --> 00:10:30.010
So those three angles
are the 3 degrees

00:10:30.010 --> 00:10:31.870
of freedom of the controller.

00:10:31.870 --> 00:10:35.520
We represent those
using a quaternion.

00:10:35.520 --> 00:10:39.490
And quaternions are interesting,
mathematical [INAUDIBLE].

00:10:39.490 --> 00:10:43.300
In most cases, if you're using
a math library or a game engine,

00:10:43.300 --> 00:10:44.675
you can treat them
as a black box

00:10:44.675 --> 00:10:47.940
or more specifically a
blue box in this case,

00:10:47.940 --> 00:10:51.520
because they essentially
encode a rotation

00:10:51.520 --> 00:10:53.097
that you can apply to a vector.

00:10:53.097 --> 00:10:54.930
But if you now looking
inside of quaternion,

00:10:54.930 --> 00:10:56.096
it's not actually that hard.

00:10:56.096 --> 00:10:59.960
It has a vector component
made up of x, y and z.

00:10:59.960 --> 00:11:03.380
It also has a scalar component,
and it has a fifth component.

00:11:03.380 --> 00:11:07.420
Does anybody know what the fifth
component of a quaternion is?

00:11:07.420 --> 00:11:08.220
No?

00:11:08.220 --> 00:11:09.990
It's magic.

00:11:09.990 --> 00:11:13.811
Because that's the only way I
can believe in how they work.

00:11:13.811 --> 00:11:15.310
Well, actually, at
least that's what

00:11:15.310 --> 00:11:18.170
I thought in the beginning,
but then as I studied them,

00:11:18.170 --> 00:11:20.570
I realized that the
scientific truth is

00:11:20.570 --> 00:11:25.850
that they are only about 60%
magic, the rest of it is not.

00:11:25.850 --> 00:11:27.441
We represent all
of our coordinates

00:11:27.441 --> 00:11:28.940
in the right-hand
coordinate system,

00:11:28.940 --> 00:11:31.520
so you have the x-axis
pointing towards the right,

00:11:31.520 --> 00:11:33.370
you have the y-axis
pointing up, and you

00:11:33.370 --> 00:11:34.930
have the z-axis pointing back.

00:11:34.930 --> 00:11:38.410
So this is just a standard
textbook coordinate system.

00:11:38.410 --> 00:11:40.080
Next we have the gyroscope.

00:11:40.080 --> 00:11:41.840
The gyroscope
doesn't have anything

00:11:41.840 --> 00:11:44.190
to do with where the
control is pointing,

00:11:44.190 --> 00:11:46.240
it has to do with
how it's moving.

00:11:46.240 --> 00:11:49.710
In particular, it encodes
the angular velocity

00:11:49.710 --> 00:11:52.602
of the controller about
each of its local axis.

00:11:52.602 --> 00:11:54.060
So just to give an
example, suppose

00:11:54.060 --> 00:11:56.810
that you have the controller
sitting flat on your table

00:11:56.810 --> 00:11:59.260
and it's rotating
counterclockwise slowly at one

00:11:59.260 --> 00:12:01.300
revolution every 2 seconds.

00:12:01.300 --> 00:12:04.030
So what would you read from
the gyroscope in this case?

00:12:04.030 --> 00:12:06.940
Well, the x and z would
be 0 because it's not

00:12:06.940 --> 00:12:09.280
rotating there, but
about the y-axis, what

00:12:09.280 --> 00:12:12.570
would be the rotational
speed in radians per second?

00:12:12.570 --> 00:12:15.260
If you guessed pi,
that is correct.

00:12:15.260 --> 00:12:18.180
Now, did I choose these numbers
just to make this terrible pun?

00:12:18.180 --> 00:12:19.670
No, not in any way.

00:12:19.670 --> 00:12:21.720
That's a coincidence.

00:12:21.720 --> 00:12:23.860
The accelerometer, of
course, measures the force

00:12:23.860 --> 00:12:25.390
of acceleration
on the controller

00:12:25.390 --> 00:12:28.700
about each of its local axes.

00:12:28.700 --> 00:12:31.780
It is combined with gravity
just as on the smartphone.

00:12:31.780 --> 00:12:34.570
So normally if a controller
is sitting on a desktop,

00:12:34.570 --> 00:12:36.444
you're probably going
to be reading something

00:12:36.444 --> 00:12:38.460
like 0.0, 9.8, 0.0 because
the force of gravity

00:12:38.460 --> 00:12:41.100
is 9.8 along the y-axis.

00:12:41.100 --> 00:12:44.270
If you ever read 0.0, 0.0,
0.0, you should be concerned

00:12:44.270 --> 00:12:47.240
because it means that the
user is in outer space

00:12:47.240 --> 00:12:49.820
or there is no gravity or
worse, that the user tossed

00:12:49.820 --> 00:12:51.320
a controller out
the window and it's

00:12:51.320 --> 00:12:54.580
in free fall towards the ground
in which case you might say,

00:12:54.580 --> 00:12:55.560
rage was detected.

00:12:55.560 --> 00:12:58.170
Would you like to
play an easier level?

00:12:58.170 --> 00:13:01.800
Also order me a new controller.

00:13:01.800 --> 00:13:03.270
And lastly, we
have the touchpad.

00:13:03.270 --> 00:13:04.860
The touchpad is
that circular area

00:13:04.860 --> 00:13:06.620
on the top of the controller.

00:13:06.620 --> 00:13:08.770
It is a two-dimensional
surface, so we

00:13:08.770 --> 00:13:11.350
chose to use x and
y very creatively

00:13:11.350 --> 00:13:15.854
to represent the position of
the finger on that surface.

00:13:15.854 --> 00:13:17.270
In order to represent
coordinates,

00:13:17.270 --> 00:13:21.110
we think of it as a square and
we map 0, 0 to the top left

00:13:21.110 --> 00:13:23.960
and 1, 1 to the bottom right.

00:13:23.960 --> 00:13:26.060
It's important to notice
that the touchpad also

00:13:26.060 --> 00:13:26.850
has a clicker.

00:13:26.850 --> 00:13:29.090
So the user can both
touch the touch pad

00:13:29.090 --> 00:13:31.670
and also apply some pressure
on it to make it click

00:13:31.670 --> 00:13:34.595
and those two things
are different.

00:13:34.595 --> 00:13:35.970
And the buttons
on the controller

00:13:35.970 --> 00:13:38.136
are the Click button, which
is precisely this button

00:13:38.136 --> 00:13:41.870
that the user presses when they
apply pressure on the touchpad.

00:13:41.870 --> 00:13:43.587
And you also have
the App button.

00:13:43.587 --> 00:13:45.170
The App button can
be used by your app

00:13:45.170 --> 00:13:47.820
to do anything you want with
the menu or switching tools

00:13:47.820 --> 00:13:49.204
or anything else you want.

00:13:49.204 --> 00:13:51.370
We also have the Home button
on the controller which

00:13:51.370 --> 00:13:52.690
is reserved for the system use.

00:13:52.690 --> 00:13:54.148
For example, that's
how the user go

00:13:54.148 --> 00:13:57.403
it goes back to the Home screen,
that little thing on the side

00:13:57.403 --> 00:14:02.190
out of the Volume buttons, which
is also reserved to the system.

00:14:02.190 --> 00:14:05.110
So the Click and the App buttons
are available to your app

00:14:05.110 --> 00:14:06.520
and you can implement
anything you want with them.

00:14:06.520 --> 00:14:08.478
Typically, a clicker will
be the primary action

00:14:08.478 --> 00:14:11.710
in your app like painting,
drawing, shooting, selecting,

00:14:11.710 --> 00:14:13.620
grabbing, or anything like that.

00:14:13.620 --> 00:14:16.130
And the App button will
be some secondary action

00:14:16.130 --> 00:14:17.780
or to be up a menu.

00:14:17.780 --> 00:14:19.910
So once again, touch is
different from click,

00:14:19.910 --> 00:14:21.480
and this is a very
important point.

00:14:21.480 --> 00:14:23.521
And on the emulator, since
there is no such thing

00:14:23.521 --> 00:14:26.410
as clicking a smartphone
screen, you actually

00:14:26.410 --> 00:14:28.730
double tap to emulate the click.

00:14:28.730 --> 00:14:31.690
And we're going to give you
these little stickers that you

00:14:31.690 --> 00:14:33.140
can put on the
controller emulator

00:14:33.140 --> 00:14:35.770
to get more of a tactile
feel of how it works.

00:14:35.770 --> 00:14:40.010
Let's briefly go
into the C++ SDK.

00:14:40.010 --> 00:14:41.260
Well, C++ is a great language.

00:14:41.260 --> 00:14:42.582
It's my favorite language.

00:14:42.582 --> 00:14:45.310
And the thing is, it's
a powerful language that

00:14:45.310 --> 00:14:47.720
has some responsibilities
that come with it.

00:14:47.720 --> 00:14:48.970
How does the sentence end?

00:14:48.970 --> 00:14:53.080
With great power comes-- great
stack traces that you sometimes

00:14:53.080 --> 00:14:54.250
have to debug.

00:14:54.250 --> 00:14:57.081
But that's C++ and I like C++.

00:14:57.081 --> 00:14:58.580
Hopefully, that
won't happen to you.

00:14:58.580 --> 00:15:00.880
When your app is
talking to our C++ API,

00:15:00.880 --> 00:15:05.550
it is actually talking to our
C API that lives in libgvr.so.

00:15:05.550 --> 00:15:08.590
And the reason why we do a C
API instead of a C++ API is

00:15:08.590 --> 00:15:11.490
because it's difficult to get
two compilers to agree on how

00:15:11.490 --> 00:15:13.310
to compile C++.

00:15:13.310 --> 00:15:16.720
So instead, the C++ API
lives entirely on your space

00:15:16.720 --> 00:15:18.590
and it's just a wrapper
around the C API.

00:15:18.590 --> 00:15:21.700
So you can use it without
worrying about compiler API

00:15:21.700 --> 00:15:23.650
incompatibilities,
which is good.

00:15:23.650 --> 00:15:25.115
Now, let's look at code.

00:15:25.115 --> 00:15:27.240
If you have experience in
C++, you're thinking, oh,

00:15:27.240 --> 00:15:30.130
that's a funny dialect of
C++, but no, it's Java.

00:15:30.130 --> 00:15:32.380
It's because in Android,
everything begins in Java.

00:15:32.380 --> 00:15:34.900
So on your onCreate function,
first thing you're going to do

00:15:34.900 --> 00:15:36.610
is set the VR mode
enabled because that's

00:15:36.610 --> 00:15:38.530
going to enable all
of the other nice VR

00:15:38.530 --> 00:15:40.840
optimizations for your app.

00:15:40.840 --> 00:15:42.610
Next, you have your
GVR layout, what

00:15:42.610 --> 00:15:45.210
used to be called
a Cardboard layout.

00:15:45.210 --> 00:15:49.150
You set the Presentation view
as you are used to doing.

00:15:49.150 --> 00:15:51.010
And next, and this is
the important part,

00:15:51.010 --> 00:15:53.200
you get the GVR native context.

00:15:53.200 --> 00:15:55.090
So the GVR native
context is just

00:15:55.090 --> 00:15:57.122
an opaque pointer
to a GVR context,

00:15:57.122 --> 00:15:58.580
which is something
that you'll need

00:15:58.580 --> 00:16:00.450
to initialize to control API.

00:16:00.450 --> 00:16:02.539
When you're down
into the C++ land,

00:16:02.539 --> 00:16:04.830
all you have to do is get
the pointer and then store it

00:16:04.830 --> 00:16:09.300
somewhere because you'll need
it while initializing the API.

00:16:09.300 --> 00:16:12.962
Speaking of which, after you
set your default options,

00:16:12.962 --> 00:16:15.420
that's where you pass in the
pointer, on the init function.

00:16:15.420 --> 00:16:17.492
Press the Options
and that pointer.

00:16:17.492 --> 00:16:19.200
And then you can forget
about the pointer

00:16:19.200 --> 00:16:21.520
because it's only being
used to synchronize

00:16:21.520 --> 00:16:25.067
the controller and the headset.

00:16:25.067 --> 00:16:26.900
After that, it's a very
low-maintenance API.

00:16:26.900 --> 00:16:29.420
You just have to do some
oil changes once in a while,

00:16:29.420 --> 00:16:32.020
and by oil changes, I mean
just call Pause and Resume

00:16:32.020 --> 00:16:35.150
when your application
gets paused or resumed.

00:16:35.150 --> 00:16:37.690
And next, you can view
the controller state.

00:16:37.690 --> 00:16:39.940
Now, controller state is
probably the most complicated

00:16:39.940 --> 00:16:42.990
part because it encodes all of
the states of the controller

00:16:42.990 --> 00:16:44.700
at any given time.

00:16:44.700 --> 00:16:47.442
So we put together a team
of very creative engineers

00:16:47.442 --> 00:16:48.900
and told them to
come up with a way

00:16:48.900 --> 00:16:51.860
to represent a structure that
would include the controller

00:16:51.860 --> 00:16:53.100
state.

00:16:53.100 --> 00:16:57.050
And what we came up with
is struct ControllerState.

00:16:57.050 --> 00:17:00.360
It's just a struct
and it has data in it.

00:17:00.360 --> 00:17:04.030
Also we made the creatively
named ReadState method

00:17:04.030 --> 00:17:05.765
that reads the state.

00:17:05.765 --> 00:17:07.390
And it's that simple
because it doesn't

00:17:07.390 --> 00:17:08.556
need to be more complicated.

00:17:08.556 --> 00:17:12.097
On your draw a frame method,
on your rendering logic,

00:17:12.097 --> 00:17:14.180
you're going to call
ReadState, and that gives you

00:17:14.180 --> 00:17:16.940
the latest known state
of the controller,

00:17:16.940 --> 00:17:19.869
and then you can process
that state in render.

00:17:19.869 --> 00:17:20.660
How do you do that?

00:17:20.660 --> 00:17:25.130
Well, the state has a few such
as orientation, gyro, accel,

00:17:25.130 --> 00:17:29.380
and those just mean the current
readings of the various answers

00:17:29.380 --> 00:17:31.560
in the controller.

00:17:31.560 --> 00:17:33.639
For a touchpad, we have
an is_touching Boolean

00:17:33.639 --> 00:17:36.180
that tells you if the user is
currently touching the touchpad

00:17:36.180 --> 00:17:37.230
or not.

00:17:37.230 --> 00:17:39.290
And we also have what
we call the event

00:17:39.290 --> 00:17:40.946
Booleans or the
transient Booleans,

00:17:40.946 --> 00:17:42.570
and those of the
Booleans that tell you

00:17:42.570 --> 00:17:44.580
that a certain
event just happened.

00:17:44.580 --> 00:17:46.440
And those are true
for only one frame,

00:17:46.440 --> 00:17:48.900
so when you render your frame,
that's going to be true.

00:17:48.900 --> 00:17:49.950
Next time you render
your frame, it's

00:17:49.950 --> 00:17:51.880
going to be false,
because it just represents

00:17:51.880 --> 00:17:53.088
something that just happened.

00:17:53.088 --> 00:17:55.710
The user has just started
to touch the touchpad

00:17:55.710 --> 00:17:57.360
or just stopped
touching the touchpad.

00:17:57.360 --> 00:18:00.450
And of course, you also have
the touch position in x and y

00:18:00.450 --> 00:18:02.170
as we explained before.

00:18:02.170 --> 00:18:04.590
Button states work in
a very similar way.

00:18:04.590 --> 00:18:06.630
So you have the Click
button and the App button.

00:18:06.630 --> 00:18:10.190
You also have the state and
you also have the event.

00:18:10.190 --> 00:18:11.620
Recentering is
what the user does

00:18:11.620 --> 00:18:13.786
when they notice that the
headset and the controller

00:18:13.786 --> 00:18:15.960
are drifting apart, so
they're no longer centered

00:18:15.960 --> 00:18:17.540
or when they have just
picked up the headset

00:18:17.540 --> 00:18:18.870
and it's facing the wrong way.

00:18:18.870 --> 00:18:22.100
So there's a gesture that they
can do to make both of them

00:18:22.100 --> 00:18:24.007
recenter and that's
holding the Home button,

00:18:24.007 --> 00:18:26.340
pointing forward for about 1
second, and then releasing.

00:18:26.340 --> 00:18:29.460
And then both the headset
and the controller

00:18:29.460 --> 00:18:32.750
will be recentered to the
same coordinate system.

00:18:32.750 --> 00:18:35.390
So before and after.

00:18:35.390 --> 00:18:37.410
Basically, if before
the coordinate system

00:18:37.410 --> 00:18:39.020
had diverged,
after, they're both

00:18:39.020 --> 00:18:41.390
going to be pointing forward.

00:18:41.390 --> 00:18:42.770
And you can know
that the user is

00:18:42.770 --> 00:18:45.111
recentering by looking at
recentering or recentered

00:18:45.111 --> 00:18:45.610
variable.

00:18:45.610 --> 00:18:47.730
You don't actually
need to do anything

00:18:47.730 --> 00:18:51.060
because the coordinate systems
are handled by the SDK,

00:18:51.060 --> 00:18:54.035
but if you want to, you can
have access to those variables.

00:18:54.035 --> 00:18:55.410
You might want to
pause the game,

00:18:55.410 --> 00:18:57.770
for example, when the
user is recentering.

00:18:57.770 --> 00:18:59.520
Next we have API status.

00:18:59.520 --> 00:19:02.460
API status just tells you about
the general health of the API.

00:19:02.460 --> 00:19:05.610
SO we have kControllerApiOK
means everything's going well.

00:19:05.610 --> 00:19:08.170
There's ApiUnavailable if
the service is unavailable,

00:19:08.170 --> 00:19:10.650
ClientObsolete if the
client is obsolete,

00:19:10.650 --> 00:19:13.360
ServiceObsolete if the
service is obsolete,

00:19:13.360 --> 00:19:16.470
and ZombieApocalypse if
there's a zombie apocalypse

00:19:16.470 --> 00:19:19.150
and the undead are
taking over the planet.

00:19:19.150 --> 00:19:19.950
Just kidding.

00:19:19.950 --> 00:19:21.010
That one doesn't exist.

00:19:21.010 --> 00:19:22.509
The controller will
continue to work

00:19:22.509 --> 00:19:25.026
in case of a zombie apocalypse.

00:19:25.026 --> 00:19:26.650
Connection state is
just whether or not

00:19:26.650 --> 00:19:28.775
the controller is connected
to the phone right now.

00:19:28.775 --> 00:19:31.820
So there's disconnected,
there's scanning, connecting,

00:19:31.820 --> 00:19:33.030
and connected.

00:19:33.030 --> 00:19:35.440
The best state is connected.

00:19:35.440 --> 00:19:37.900
And I'll tell you how
later, but this has

00:19:37.900 --> 00:19:39.880
to do with saving the world.

00:19:39.880 --> 00:19:41.815
More on that later.

00:19:41.815 --> 00:19:43.190
And you can download
the demo app

00:19:43.190 --> 00:19:46.790
and look at code that actually
does all of those things.

00:19:46.790 --> 00:19:48.950
Let's quickly look
at the Unity SDK.

00:19:48.950 --> 00:19:51.680
In Unity, just as you did
before with the Cardboard SDK,

00:19:51.680 --> 00:19:54.541
you import unitypackage
into your Unity Project.

00:19:54.541 --> 00:19:56.290
Once you do that,
you'll notice that there

00:19:56.290 --> 00:19:59.630
is a prefab under Assets,
Prefabs, Controller

00:19:59.630 --> 00:20:01.610
called GvrControllerMain.

00:20:01.610 --> 00:20:04.300
And all you have to do is drag
that prefab into your scene

00:20:04.300 --> 00:20:06.720
and then have access
to the controller API.

00:20:06.720 --> 00:20:09.130
In Unity, you normally
edit things in the editor

00:20:09.130 --> 00:20:11.090
and then only after
you're happy with it,

00:20:11.090 --> 00:20:12.790
we actually deployed
it to the device.

00:20:12.790 --> 00:20:14.100
And we support that
use case because you

00:20:14.100 --> 00:20:15.710
can plug in the
controller emulator

00:20:15.710 --> 00:20:18.460
directly to your
computer via a USB cable

00:20:18.460 --> 00:20:20.720
and have it work
during the Edit mode.

00:20:20.720 --> 00:20:23.220
And then once you're happy, you
can deploy it to your phone,

00:20:23.220 --> 00:20:25.739
and then it's going
to work via Wi-Fi.

00:20:25.739 --> 00:20:27.280
Let's take a look
at an example code.

00:20:27.280 --> 00:20:28.738
Let's suppose that
I have an object

00:20:28.738 --> 00:20:31.670
and I want that object to match
the pose of the controller.

00:20:31.670 --> 00:20:34.806
All I need to do is set
the object's local rotation

00:20:34.806 --> 00:20:36.430
to the controller's
rotation by calling

00:20:36.430 --> 00:20:38.540
a Gvr.Controller.Rotation.

00:20:38.540 --> 00:20:40.465
It's that simple.

00:20:40.465 --> 00:20:41.840
Suppose now that
you want to have

00:20:41.840 --> 00:20:45.540
a vector that represents where
the control is pointing at.

00:20:45.540 --> 00:20:48.900
Again, we just have to multiply
something by Vector3.forward

00:20:48.900 --> 00:20:53.366
and that something is just
GvrController.Orientation.

00:20:53.366 --> 00:20:54.740
That's what you
multiply and then

00:20:54.740 --> 00:20:56.823
you get a vector that
points in the same direction

00:20:56.823 --> 00:20:58.740
that the control is
going to be pointing at.

00:20:58.740 --> 00:20:59.870
Now, let's do some raycasting.

00:20:59.870 --> 00:21:01.640
Suppose you have a game
where the user is trying

00:21:01.640 --> 00:21:03.940
to select an object in 3D
space using the controller

00:21:03.940 --> 00:21:05.800
as if it was a laser pointer.

00:21:05.800 --> 00:21:07.800
Again, you just get a
vector from the controller

00:21:07.800 --> 00:21:10.080
and then do the
usual Unity Raycast

00:21:10.080 --> 00:21:12.000
to figure out which
object was hit.

00:21:12.000 --> 00:21:14.490
So the API is very
straightforward.

00:21:14.490 --> 00:21:17.200
Lastly, we also have a
Gyro and Accelerometer,

00:21:17.200 --> 00:21:19.590
and those are just
reporting that format

00:21:19.590 --> 00:21:22.000
that we described before.

00:21:22.000 --> 00:21:24.921
And you have the touch, which
works just like the C++ SDK.

00:21:24.921 --> 00:21:27.420
IsTouching is whether or not
the user is touching currently,

00:21:27.420 --> 00:21:30.420
and there's TouchDown
and there's TouchUp.

00:21:30.420 --> 00:21:33.230
Same thing for buttons, all
the same logic ClickButton,

00:21:33.230 --> 00:21:34.690
ClickButtonDown, ClickButtonUp.

00:21:34.690 --> 00:21:37.980
Yes, Click is the name of
the button, the App button,

00:21:37.980 --> 00:21:41.040
AppButtonDown and Up.

00:21:41.040 --> 00:21:45.220
And then we have, of course,
the GvrController.State.

00:21:45.220 --> 00:21:47.360
Same thing, Disconnected,
Scanning, Connecting,

00:21:47.360 --> 00:21:48.370
and Connected.

00:21:48.370 --> 00:21:51.130
Oh, yeah, and I had
promised to tell you

00:21:51.130 --> 00:21:54.682
why that has anything to
do with saving the world.

00:21:54.682 --> 00:21:56.390
Imagine that you have
a game where you're

00:21:56.390 --> 00:21:59.750
trying to save that nice
little planet there,

00:21:59.750 --> 00:22:01.960
that is just exactly like Earth.

00:22:01.960 --> 00:22:04.370
And suppose that there
is this evil enemy.

00:22:04.370 --> 00:22:07.460
Let's say you're trying to
defend it from the moon.

00:22:07.460 --> 00:22:08.770
That makes no sense.

00:22:08.770 --> 00:22:11.480
Let's say it's something
that's definitely not a moon.

00:22:11.480 --> 00:22:13.860
So you're trying to
save it from that enemy.

00:22:13.860 --> 00:22:15.950
And just as you are in
the final boss battle,

00:22:15.950 --> 00:22:19.520
the player is about to deal that
final blow and save the planet.

00:22:19.520 --> 00:22:20.470
Then what happens?

00:22:20.470 --> 00:22:23.209
Of course, the controller
disconnects, and then

00:22:23.209 --> 00:22:25.750
they are sitting there, and they
are not able to do anything,

00:22:25.750 --> 00:22:28.560
and that's the end of
humanity as we know it.

00:22:28.560 --> 00:22:31.330
And because we like
humanity and we should,

00:22:31.330 --> 00:22:34.200
this is how you save it.

00:22:34.200 --> 00:22:37.670
Any time the Gvrcontroller.State
is anything other

00:22:37.670 --> 00:22:39.860
than
GvrConnectionState.Connected,

00:22:39.860 --> 00:22:42.220
that's when you should,
for example, pause the game

00:22:42.220 --> 00:22:44.261
and let the user reconnect
the controller instead

00:22:44.261 --> 00:22:46.030
of continuing to play.

00:22:46.030 --> 00:22:48.320
So we talked a whole bunch
about all the features

00:22:48.320 --> 00:22:49.150
of the controller.

00:22:49.150 --> 00:22:51.860
We talked about our
SDKs, and again,

00:22:51.860 --> 00:22:55.870
you can go to
developers.google.com/vr right

00:22:55.870 --> 00:22:58.400
now and you can download the
SDKs and the emulator app

00:22:58.400 --> 00:23:01.670
if you want so you can get
started developing today.

00:23:01.670 --> 00:23:04.169
In the beginning,
I showed you this,

00:23:04.169 --> 00:23:05.460
but actually lied a little bit.

00:23:05.460 --> 00:23:07.074
That's not 100% true.

00:23:07.074 --> 00:23:09.490
The only thing that's standing
between user and happiness,

00:23:09.490 --> 00:23:11.160
it's not just code.

00:23:11.160 --> 00:23:14.330
There's more to happiness
than code, surprisingly.

00:23:14.330 --> 00:23:16.457
You actually need design.

00:23:16.457 --> 00:23:18.790
And if you're asking, what's
the difference between code

00:23:18.790 --> 00:23:20.680
and design, the way I
like to think about it

00:23:20.680 --> 00:23:25.530
is that code is when you're
doing the thing right,

00:23:25.530 --> 00:23:28.187
and design is when you're
doing the right thing.

00:23:28.187 --> 00:23:30.020
So in order to talk to
you a little bit more

00:23:30.020 --> 00:23:31.580
about how to do
the right thing, I

00:23:31.580 --> 00:23:34.754
would like to welcome Ryan and
Francisco from Schell Games.

00:23:34.754 --> 00:23:35.742
[APPLAUSE]

00:23:35.742 --> 00:23:39.200
FRANCISCO SOUKI:
Thanks very much.

00:23:39.200 --> 00:23:41.150
Hello, everyone.

00:23:41.150 --> 00:23:42.150
Name is Francisco Souki.

00:23:42.150 --> 00:23:43.744
I'm a Game designer
at Schell Games

00:23:43.744 --> 00:23:44.910
in Pittsburgh, Pennsylvania.

00:23:44.910 --> 00:23:46.284
RYAN HIPPLE: And
I'm Ryan Hipple.

00:23:46.284 --> 00:23:48.212
I'm a programmer
at Schell Games.

00:23:48.212 --> 00:23:49.920
FRANCISCO SOUKI: And
we've spent a little

00:23:49.920 --> 00:23:54.100
over a month just making cool
stuff for the controller.

00:23:54.100 --> 00:23:56.337
We've made 17
demos, and our goal

00:23:56.337 --> 00:23:58.170
was to just play around
with the controller,

00:23:58.170 --> 00:23:59.940
see what feels
right, and we were

00:23:59.940 --> 00:24:02.200
using the same tools that
would be available to you

00:24:02.200 --> 00:24:05.210
today if you were to
develop right on Nexus 6P

00:24:05.210 --> 00:24:08.840
and the headset and an emulator
controller and on Nexus 5

00:24:08.840 --> 00:24:10.774
and using Unity to
make all of our games.

00:24:10.774 --> 00:24:12.940
So we're going to take you
through some of the demos

00:24:12.940 --> 00:24:14.523
that we made and we
learned a lot from

00:24:14.523 --> 00:24:17.320
and tell you a little bit
about the design on my side

00:24:17.320 --> 00:24:19.990
and the code on Ryan's side.

00:24:19.990 --> 00:24:25.010
And to start, I will say that
like you heard these guys say,

00:24:25.010 --> 00:24:28.124
this controller has a lot of
sensors, it has a lot of data,

00:24:28.124 --> 00:24:29.290
it gives you a lot of power.

00:24:29.290 --> 00:24:31.780
And me, as a designer,
when I saw this,

00:24:31.780 --> 00:24:33.870
I was like, this
looks cool, I guess.

00:24:33.870 --> 00:24:37.130
Ryan, you know how to
interpret all this stuff,

00:24:37.130 --> 00:24:40.620
so my vision for this is, I
have a controller in my hand.

00:24:40.620 --> 00:24:43.849
Can we just make something
that feels to the player

00:24:43.849 --> 00:24:45.640
like they're holding
something like they're

00:24:45.640 --> 00:24:46.945
holding the controller?

00:24:46.945 --> 00:24:48.400
RYAN HIPPLE: Of course.

00:24:48.400 --> 00:24:51.300
How about a game of tennis
or brick-breaking game

00:24:51.300 --> 00:24:52.800
or what if we just
combine those two

00:24:52.800 --> 00:24:54.570
and made a tennis
brick-breaking game?

00:24:54.570 --> 00:24:57.560
So our Tennis demo, we're using
the orientation quaternion

00:24:57.560 --> 00:25:00.520
from the controller to control
the rotation of a tennis racket

00:25:00.520 --> 00:25:02.697
that pivots around the
body of the player.

00:25:02.697 --> 00:25:05.280
And we have a very natural range
of the tennis racket that way

00:25:05.280 --> 00:25:07.196
where you can do your
forehands and backhands,

00:25:07.196 --> 00:25:09.912
and it's always rotated
around the right spot.

00:25:09.912 --> 00:25:11.720
On the more game
design side of this,

00:25:11.720 --> 00:25:15.380
we are focusing on leveraging
the very accurate orientation

00:25:15.380 --> 00:25:17.940
we get from the SDK and using
that to make sure that when you

00:25:17.940 --> 00:25:20.440
hit the balls, you're either
directing them upward if you're

00:25:20.440 --> 00:25:22.760
tilting your wrist up or down if
you're tilting your wrist down,

00:25:22.760 --> 00:25:25.047
and you can make them go
to the left or the right.

00:25:25.047 --> 00:25:26.630
So in order to do
that, we're actually

00:25:26.630 --> 00:25:28.420
cheating the collisions
in this game a lot

00:25:28.420 --> 00:25:30.419
to make the game easy to
hit, and we're actually

00:25:30.419 --> 00:25:32.390
putting the game
challenge in there

00:25:32.390 --> 00:25:35.570
by forcing the player to use
that accurate aim in order

00:25:35.570 --> 00:25:38.180
to twist their wrist to get
the ball exactly at the panel

00:25:38.180 --> 00:25:39.490
that they want to smash.

00:25:39.490 --> 00:25:40.364
FRANCISCO SOUKI: Yes.

00:25:40.364 --> 00:25:42.660
So like Ryan said, in this
game, it's all in the wrist.

00:25:42.660 --> 00:25:45.596
We did a little bit of timing
so that if you swing early,

00:25:45.596 --> 00:25:47.220
it will go that way,
if you swing late,

00:25:47.220 --> 00:25:48.210
it will go that way.

00:25:48.210 --> 00:25:50.050
But you don't have to worry
about the position of the ball

00:25:50.050 --> 00:25:52.230
and how to hit the ball,
it's more about your

00:25:52.230 --> 00:25:53.390
aiming with the wrist.

00:25:53.390 --> 00:25:54.120
It was very fun.

00:25:54.120 --> 00:25:56.237
The playtesters
loved it or shall

00:25:56.237 --> 00:25:59.490
I say the playtesters that
love skill games loved it.

00:25:59.490 --> 00:26:01.452
The playtesters who maybe
aren't fond of tennis

00:26:01.452 --> 00:26:03.660
or don't like skill games,
they weren't so hot on it.

00:26:03.660 --> 00:26:07.400
So my immediate thought
there was, well, why don't we

00:26:07.400 --> 00:26:10.790
try some more traditional motion
kind of like gesture detection

00:26:10.790 --> 00:26:12.580
and see how they
feel about that.

00:26:12.580 --> 00:26:13.590
RYAN HIPPLE: Of course.

00:26:13.590 --> 00:26:15.755
So in our more traditional
motion control game,

00:26:15.755 --> 00:26:18.380
we have our warrior game, which
you can see in this video here,

00:26:18.380 --> 00:26:22.590
players try to slash at objects
before they hit a warrior

00:26:22.590 --> 00:26:23.590
avatar.

00:26:23.590 --> 00:26:25.630
And we're using this by
actually just detecting

00:26:25.630 --> 00:26:27.570
a few simple gestures
with the controller,

00:26:27.570 --> 00:26:29.940
and we're using the
gyroscope readings here.

00:26:29.940 --> 00:26:31.820
The gyroscope readings
are the perfect thing

00:26:31.820 --> 00:26:33.528
for this because
they're going to tell us

00:26:33.528 --> 00:26:35.880
how fast the player is
moving the controller.

00:26:35.880 --> 00:26:38.380
So once their movement speed
is exceeding some threshold

00:26:38.380 --> 00:26:40.410
that we need to use,
we'll figure out

00:26:40.410 --> 00:26:41.910
exactly what direction
that's going,

00:26:41.910 --> 00:26:43.550
and we'll quantized
that into a left,

00:26:43.550 --> 00:26:46.590
right, up or down slash
and use that to power

00:26:46.590 --> 00:26:50.326
an avatar that has a sword
and gets to break stuff.

00:26:50.326 --> 00:26:51.950
FRANCISCO SOUKI: So
this works, but you

00:26:51.950 --> 00:26:55.460
do get a little bit of that
kind of like I'm standing here

00:26:55.460 --> 00:26:58.440
swiping effect, which is how
every other sword game before

00:26:58.440 --> 00:27:01.100
has been made in a
gesture-based motion control.

00:27:01.100 --> 00:27:04.980
And our players who had
tried the tennis first

00:27:04.980 --> 00:27:06.489
were like, I want
that one to one.

00:27:06.489 --> 00:27:07.780
Why are you giving me gestures?

00:27:07.780 --> 00:27:10.320
So Ryan, is there anything
we can do to this game

00:27:10.320 --> 00:27:12.322
to get some of that
one to one back but not

00:27:12.322 --> 00:27:13.530
compromise the core mechanic?

00:27:13.530 --> 00:27:15.290
RYAN HIPPLE: Yes, there is.

00:27:15.290 --> 00:27:17.860
This is where we can one up
traditional motion control

00:27:17.860 --> 00:27:20.500
games because we have
that accurate orientation

00:27:20.500 --> 00:27:21.310
quaternion.

00:27:21.310 --> 00:27:23.550
So by maintaining the
gameplay that we already

00:27:23.550 --> 00:27:27.590
have with the slash gestures,
we can use the orientation

00:27:27.590 --> 00:27:30.430
to power the animation on
this character in the scene.

00:27:30.430 --> 00:27:33.500
And we use that to blend
between several animations

00:27:33.500 --> 00:27:37.340
or several poses, and the
sword on this warrior character

00:27:37.340 --> 00:27:39.840
should always be reflecting the
orientation that a player is

00:27:39.840 --> 00:27:41.440
holding the controller.

00:27:41.440 --> 00:27:44.880
Additionally, one issue
with our first approach

00:27:44.880 --> 00:27:46.890
was if you would
swipe to the left,

00:27:46.890 --> 00:27:49.244
you would do a sword
slash to the left,

00:27:49.244 --> 00:27:51.160
but if you're twisting
your controller, that's

00:27:51.160 --> 00:27:52.400
now an upward swipe.

00:27:52.400 --> 00:27:54.330
So you can get around
that by multiplying

00:27:54.330 --> 00:27:58.390
or by transforming
your gyroscope readings

00:27:58.390 --> 00:28:00.890
by the orientation,
which will give you

00:28:00.890 --> 00:28:03.500
something that's more of a
world space slash detection.

00:28:03.500 --> 00:28:05.590
So no matter how they're
twisting the controller,

00:28:05.590 --> 00:28:07.090
it's always going
to slash according

00:28:07.090 --> 00:28:08.550
to the movement of the player.

00:28:08.550 --> 00:28:09.125
FRANCISCO SOUKI: Yes.

00:28:09.125 --> 00:28:11.166
So you can definitely take
those gesture controls

00:28:11.166 --> 00:28:12.965
to the next level.

00:28:12.965 --> 00:28:16.220
But I wanted to go back
to that one to one,

00:28:16.220 --> 00:28:17.670
that holding an
object in my hand

00:28:17.670 --> 00:28:20.100
and examining it
and trying it out,

00:28:20.100 --> 00:28:22.920
and I was hoping maybe
instead of aiming far away,

00:28:22.920 --> 00:28:25.700
we could give them, the players,
something that's a little more

00:28:25.700 --> 00:28:28.155
close range to play with.

00:28:28.155 --> 00:28:31.140
RYAN HIPPLE: So in
our Xylophone demo,

00:28:31.140 --> 00:28:33.340
we let players play
a massive xylophone

00:28:33.340 --> 00:28:34.500
with a massive hammer.

00:28:34.500 --> 00:28:35.670
Why not?

00:28:35.670 --> 00:28:37.420
Here we're actually
taking the orientation

00:28:37.420 --> 00:28:38.890
and splitting it up into
different components

00:28:38.890 --> 00:28:40.770
and treating each of
those axes differently.

00:28:40.770 --> 00:28:43.030
So swinging the
hammer up and down,

00:28:43.030 --> 00:28:46.040
we're using the pitch
axis or the x-axis,

00:28:46.040 --> 00:28:50.250
and that's powering the position
or the rotation of the hammer.

00:28:50.250 --> 00:28:52.500
And we keep a little bit of
a constraint on that so it

00:28:52.500 --> 00:28:55.440
doesn't clip through the keys
and it doesn't break immersion.

00:28:55.440 --> 00:28:57.230
We're using the
ability to point,

00:28:57.230 --> 00:29:00.950
so this would be the heading
or the yaw of the controller,

00:29:00.950 --> 00:29:03.170
in order to aim at
what keys the player is

00:29:03.170 --> 00:29:05.700
going to hit to play what
notes they want to play.

00:29:05.700 --> 00:29:07.430
On top of that, we're
using a little bit

00:29:07.430 --> 00:29:09.160
of the camera's rotation.

00:29:09.160 --> 00:29:12.470
So you'll notice in the video
here that the field of play

00:29:12.470 --> 00:29:15.414
is much broader than what you
can see with just one screen.

00:29:15.414 --> 00:29:17.330
So turning your head,
you can look to the left

00:29:17.330 --> 00:29:20.307
or to the right, and were using
that to cheat a little bit

00:29:20.307 --> 00:29:21.890
and make sure that
the player is going

00:29:21.890 --> 00:29:24.170
to hit the thing that they're
focusing on so that when

00:29:24.170 --> 00:29:25.586
they're moving
their hand quickly,

00:29:25.586 --> 00:29:28.210
they don't end up throwing off
the direction of the hammer.

00:29:28.210 --> 00:29:30.755
So we're doing a little bit
of aim assist in this game.

00:29:30.755 --> 00:29:31.760
FRANCISCO SOUKI: Yeah.

00:29:31.760 --> 00:29:34.450
And in this demo, you can
tell the players are starting

00:29:34.450 --> 00:29:36.710
to feel, things start to gel.

00:29:36.710 --> 00:29:39.350
They love manipulating
a closely-held object,

00:29:39.350 --> 00:29:42.690
and you can usually [INAUDIBLE]
watching them play, watching

00:29:42.690 --> 00:29:44.110
them go through three stages.

00:29:44.110 --> 00:29:46.684
The first stage is,
they jump in the world,

00:29:46.684 --> 00:29:48.100
they see they're
holding a hammer,

00:29:48.100 --> 00:29:50.530
and they do the wrist thing, and
the hammer does the wrist thing

00:29:50.530 --> 00:29:51.613
for them, so that's great.

00:29:51.613 --> 00:29:53.620
The controller is
working perfectly there.

00:29:53.620 --> 00:29:56.240
Then they realize the keys
are in a curved shape,

00:29:56.240 --> 00:29:57.470
so they look around.

00:29:57.470 --> 00:30:01.850
So they're using that sort of
VR space, looking all around.

00:30:01.850 --> 00:30:05.100
And then they identify
any key they want to play,

00:30:05.100 --> 00:30:08.230
and they go for the
boop, and it works.

00:30:08.230 --> 00:30:10.510
So it's a combination
of where you're looking

00:30:10.510 --> 00:30:13.980
and how you're swinging,
and when that feels right,

00:30:13.980 --> 00:30:16.445
when the world holds up to what
they want to do as players,

00:30:16.445 --> 00:30:17.820
it feels great
for them, and then

00:30:17.820 --> 00:30:19.515
that's where the
platform really shines.

00:30:19.515 --> 00:30:21.140
So that combination
of head orientation

00:30:21.140 --> 00:30:23.820
and controller action helped
improve their perceived

00:30:23.820 --> 00:30:24.640
accuracy.

00:30:24.640 --> 00:30:26.290
And so I'm thinking,
well, can we

00:30:26.290 --> 00:30:28.620
use that combination
of that aiming

00:30:28.620 --> 00:30:33.160
and that closely-held object
to maybe let them do something

00:30:33.160 --> 00:30:37.199
that they wished they could do,
but they can't do in real life.

00:30:37.199 --> 00:30:39.240
RYAN HIPPLE: If anybody
who's here actually tried

00:30:39.240 --> 00:30:41.130
to throw a boomerang--
has anybody ever tried

00:30:41.130 --> 00:30:42.210
to throw a boomerang?

00:30:42.210 --> 00:30:44.740
It's incredibly disappointing.

00:30:44.740 --> 00:30:47.570
There's a very, very, I
guess, powerful technique

00:30:47.570 --> 00:30:49.364
that is only mastered by a few.

00:30:49.364 --> 00:30:50.030
It's really sad.

00:30:50.030 --> 00:30:51.240
You throw it, it
doesn't come back.

00:30:51.240 --> 00:30:52.240
It doesn't go where
you want it to go,

00:30:52.240 --> 00:30:53.900
it just kind of wobbles around.

00:30:53.900 --> 00:30:56.190
But there's this expectation
of what a boomerang does.

00:30:56.190 --> 00:30:57.700
You see that shape
and you feel like, I

00:30:57.700 --> 00:30:58.550
should be able to throw this.

00:30:58.550 --> 00:31:00.633
It should be able to go
exactly where I want it to

00:31:00.633 --> 00:31:02.230
and have it snap
right back to me.

00:31:02.230 --> 00:31:04.460
So this is where we
take the orientation

00:31:04.460 --> 00:31:06.060
that we get from
the headset, again,

00:31:06.060 --> 00:31:07.520
and we use this
as an aim assist.

00:31:07.520 --> 00:31:09.970
So where the player is
looking in this demo

00:31:09.970 --> 00:31:15.080
is going to drive where the
curve of this boomerang goes.

00:31:15.080 --> 00:31:17.720
And the goal here is to break as
many of these floating targets

00:31:17.720 --> 00:31:20.362
at once with a single throw to
kind of get that ideal path.

00:31:20.362 --> 00:31:22.070
So since we're using
the head for aiming,

00:31:22.070 --> 00:31:24.270
we now have the controller
free to do our throwing.

00:31:24.270 --> 00:31:25.645
And we're using
the similar thing

00:31:25.645 --> 00:31:27.400
we did for the
sword slashes here

00:31:27.400 --> 00:31:29.210
where we're using the
gyroscope readings

00:31:29.210 --> 00:31:30.490
and if it's above a
certain threshold,

00:31:30.490 --> 00:31:31.920
it's going to trigger the throw.

00:31:31.920 --> 00:31:33.545
So just looking where
you want to throw

00:31:33.545 --> 00:31:35.390
and doing your throw
gesture is going

00:31:35.390 --> 00:31:37.166
to get that boomerang out there.

00:31:37.166 --> 00:31:39.540
Additionally, to maintain a
little bit of immersion here,

00:31:39.540 --> 00:31:43.490
we're using the orientation to
make sure the boomerang rotates

00:31:43.490 --> 00:31:45.500
to reflect the rotation
of the controller

00:31:45.500 --> 00:31:46.530
at least when it's
in your hands.

00:31:46.530 --> 00:31:47.946
And you can see
that in the videos

00:31:47.946 --> 00:31:50.040
here, just that little
bit of ambient movement

00:31:50.040 --> 00:31:53.730
just is keeping it grounding the
player between the two worlds.

00:31:53.730 --> 00:31:55.500
FRANCISCO SOUKI:
So like Ryan said

00:31:55.500 --> 00:31:57.580
this video is about
empowering the player

00:31:57.580 --> 00:32:00.360
and about letting them
experience their boomerang

00:32:00.360 --> 00:32:04.390
fantasy, how they feel throwing
the boomerang should feel like.

00:32:04.390 --> 00:32:07.595
So it's all about like, boom, I
want to put in that exit sign,

00:32:07.595 --> 00:32:09.280
bam, it's going there.

00:32:09.280 --> 00:32:16.950
So less about very precise
one-to-one matching of thing

00:32:16.950 --> 00:32:19.460
they're pointing or
the exact hand movement

00:32:19.460 --> 00:32:21.916
and more about the precise
matching and the boomerang

00:32:21.916 --> 00:32:24.090
in their hand
combined with the aim

00:32:24.090 --> 00:32:28.030
assist that the gaze
is providing us.

00:32:28.030 --> 00:32:31.910
So it's all about interpret
all of that data that we get

00:32:31.910 --> 00:32:35.090
and letting the player
sort of fulfill what

00:32:35.090 --> 00:32:37.290
they think it should play like.

00:32:37.290 --> 00:32:39.490
What we realized at
this point though is,

00:32:39.490 --> 00:32:41.360
we hadn't touched
touchpad at all.

00:32:41.360 --> 00:32:44.110
It was all about the swinging
and all about the pointing

00:32:44.110 --> 00:32:48.980
and the head, and touchpads
are just the number one thing

00:32:48.980 --> 00:32:51.440
you usually use in
games, whether it's

00:32:51.440 --> 00:32:53.120
a joystick or a
virtual touchpad.

00:32:53.120 --> 00:32:57.160
So we use touchpads all the
time for all of our games.

00:32:57.160 --> 00:33:00.000
Can't we just put
something we normally

00:33:00.000 --> 00:33:02.640
make in a normal platform, a
different platform, or a non VR

00:33:02.640 --> 00:33:05.650
platform in this special
place with this touchpad?

00:33:05.650 --> 00:33:06.390
Does it hold up?

00:33:06.390 --> 00:33:08.327
RYAN HIPPLE: Of course, we can.

00:33:08.327 --> 00:33:10.410
Using the touchpad that
we have on the controller,

00:33:10.410 --> 00:33:12.770
we can use that as a
traditional D-pad controls.

00:33:12.770 --> 00:33:14.191
And this is something
that players

00:33:14.191 --> 00:33:16.440
are going to be immediately
familiar with because it's

00:33:16.440 --> 00:33:18.980
the type of games that
had existed since, well,

00:33:18.980 --> 00:33:20.720
almost the beginning of games.

00:33:20.720 --> 00:33:23.320
So in our Adventure
Game demo, the player

00:33:23.320 --> 00:33:25.020
controls a little
character walking

00:33:25.020 --> 00:33:26.395
around using that D-pad.

00:33:26.395 --> 00:33:27.770
And the nice thing
about this is,

00:33:27.770 --> 00:33:30.740
it frees up-- the headset
now, functions as your camera

00:33:30.740 --> 00:33:32.430
control, which is
generally a little bit

00:33:32.430 --> 00:33:35.016
of a problematic control
scheme in Adventure Game.

00:33:35.016 --> 00:33:36.640
So you can look around
the world and it

00:33:36.640 --> 00:33:38.620
adds the sense of
exploration that you

00:33:38.620 --> 00:33:41.350
can see more than you would
be able to if you had to have

00:33:41.350 --> 00:33:43.790
this automatic follow camera.

00:33:43.790 --> 00:33:45.610
Those controls
then, also we have

00:33:45.610 --> 00:33:49.130
them a little bit specialized
for the layout here.

00:33:49.130 --> 00:33:51.670
We were able to have this
character in an environment.

00:33:51.670 --> 00:33:54.230
It circles the player
and their perspective.

00:33:54.230 --> 00:33:56.600
So when you want to move the
character along that path,

00:33:56.600 --> 00:33:58.808
we have it so that it's
almost a circular-based path.

00:33:58.808 --> 00:34:00.440
You hold it to the
right on the D-pad

00:34:00.440 --> 00:34:04.200
and the character
will trace a circle

00:34:04.200 --> 00:34:06.750
around the player making
it much easier to navigate,

00:34:06.750 --> 00:34:08.790
making it easier to make
the player move forward

00:34:08.790 --> 00:34:09.929
through the world.

00:34:09.929 --> 00:34:11.500
And of course, in
this demo, we have

00:34:11.500 --> 00:34:13.940
it end up with
the player meeting

00:34:13.940 --> 00:34:16.860
the character they've been
controlling this entire time.

00:34:16.860 --> 00:34:19.290
We also use a little
bit of the gesture

00:34:19.290 --> 00:34:22.070
controls that we talked
about before and the click

00:34:22.070 --> 00:34:24.870
pad in order to use abilities
that can trigger things

00:34:24.870 --> 00:34:27.170
in this environment and
have some light puzzles

00:34:27.170 --> 00:34:29.580
and some collection
mechanics, as you can see.

00:34:29.580 --> 00:34:31.530
FRANCISCO SOUKI: So
boy, does it hold up.

00:34:31.530 --> 00:34:33.659
When you're making your
own adventure games,

00:34:33.659 --> 00:34:36.090
you will realize that you can
use a touchpad for movement.

00:34:36.090 --> 00:34:36.620
No problem.

00:34:36.620 --> 00:34:37.805
It's going to feel great.

00:34:37.805 --> 00:34:39.679
And it's going to free
up all the other stuff

00:34:39.679 --> 00:34:43.070
in the controller for you
to explore that space.

00:34:43.070 --> 00:34:46.219
So this is the extent of
the demo that we made.

00:34:46.219 --> 00:34:48.449
Everything you're seeing
here is the totality

00:34:48.449 --> 00:34:50.330
of the spaces we explored.

00:34:50.330 --> 00:34:53.139
So what that leaves is a whole
lot of open space for you guys

00:34:53.139 --> 00:34:54.630
to sort of take it to
the next level however

00:34:54.630 --> 00:34:55.713
you feel like you want to.

00:34:55.713 --> 00:35:00.360
So in this case, the click,
the gestures, the pointing, all

00:35:00.360 --> 00:35:01.520
that is still freed up.

00:35:01.520 --> 00:35:03.880
It's not something
that you need to use.

00:35:03.880 --> 00:35:06.470
And the touchpad feels
familiar to the players.

00:35:06.470 --> 00:35:08.247
It's recognizable,
so you truly can

00:35:08.247 --> 00:35:10.580
use all of those interactions
because the player doesn't

00:35:10.580 --> 00:35:13.450
need to think twice about
how to use a touchpad

00:35:13.450 --> 00:35:15.510
to move a character.

00:35:15.510 --> 00:35:18.145
Ryan, where did we take
it after we figured out

00:35:18.145 --> 00:35:20.020
that the touchpad was
good for one character?

00:35:20.020 --> 00:35:21.490
RYAN HIPPLE: Well, if
it's good for one player,

00:35:21.490 --> 00:35:24.100
let's see if we can use it to
control multiple characters.

00:35:24.100 --> 00:35:26.710
So in our Real-time
Strategy Style demo,

00:35:26.710 --> 00:35:29.530
we're using the
orientation quaternion

00:35:29.530 --> 00:35:31.610
that we get from the
controller, from the SDK

00:35:31.610 --> 00:35:33.410
and using that to
recast into the world.

00:35:33.410 --> 00:35:36.290
And you can use this to
point to select a character

00:35:36.290 --> 00:35:38.090
and then point to
direct them somewhere,

00:35:38.090 --> 00:35:42.260
and you can also drag select
to select multiple characters

00:35:42.260 --> 00:35:45.360
in the world and give them
instructions at the same time.

00:35:45.360 --> 00:35:48.254
You can also use the
gyroscope gestures, again,

00:35:48.254 --> 00:35:50.170
like we did for the sword
slash and like we've

00:35:50.170 --> 00:35:51.544
been doing for a
lot of the games

00:35:51.544 --> 00:35:54.280
to trigger multiple actions
that these characters can do.

00:35:54.280 --> 00:35:57.050
And in this, we have a few
simple puzzle mechanics

00:35:57.050 --> 00:35:58.960
that lets the player
explore this world.

00:35:58.960 --> 00:36:01.320
And again, you're using the
orientation from the headset

00:36:01.320 --> 00:36:04.640
and taking control of the
camera very naturally with just

00:36:04.640 --> 00:36:06.634
the player's look vector.

00:36:06.634 --> 00:36:08.550
FRANCISCO SOUKI: And
boy, does point and click

00:36:08.550 --> 00:36:10.430
feel good in this platform.

00:36:10.430 --> 00:36:11.820
We love this demo.

00:36:11.820 --> 00:36:13.170
Playtesters love this demo.

00:36:13.170 --> 00:36:15.360
People couldn't put it
down until they figured out

00:36:15.360 --> 00:36:18.920
the puzzle that we had,
and the interaction,

00:36:18.920 --> 00:36:21.174
we're just empowering
them to control

00:36:21.174 --> 00:36:23.590
the characters, how they wanted
to control the characters.

00:36:23.590 --> 00:36:25.899
We also draw a line from
the assumed control position

00:36:25.899 --> 00:36:27.440
to the target, and
that keeps players

00:36:27.440 --> 00:36:31.370
aware of the orientation of
their controller at every time.

00:36:31.370 --> 00:36:33.260
And that interfaces
make it really easy

00:36:33.260 --> 00:36:35.980
for you to control one
character or several characters

00:36:35.980 --> 00:36:38.987
and similar to
the adventure game

00:36:38.987 --> 00:36:40.820
that you just saw before,
the touchpad game,

00:36:40.820 --> 00:36:43.370
it frees up a lot of the
controller especially

00:36:43.370 --> 00:36:46.280
because you can also use the
whole world, the whole 360

00:36:46.280 --> 00:36:49.120
around the player to sort
of pace out your level

00:36:49.120 --> 00:36:51.960
and to control where the
player is going to be looking

00:36:51.960 --> 00:36:52.710
at any given time.

00:36:52.710 --> 00:36:54.210
So that camera
movement doesn't need

00:36:54.210 --> 00:36:55.970
to be tied to the
controller in every way.

00:36:55.970 --> 00:36:58.250
So if your mind right
now is going, man,

00:36:58.250 --> 00:37:01.339
how can you use a
mechanic to make an RTS

00:37:01.339 --> 00:37:02.880
or to make a strategy
game, a tactics

00:37:02.880 --> 00:37:05.200
game, any sort of
multi-character control game,

00:37:05.200 --> 00:37:07.345
to that drag to select,
all that, that's

00:37:07.345 --> 00:37:09.970
exactly where we should be going
because the platform is really

00:37:09.970 --> 00:37:10.790
good for it.

00:37:10.790 --> 00:37:14.420
What we thought was,
well, we'll figure out

00:37:14.420 --> 00:37:16.910
how to sort of get the most
of those orientation controls,

00:37:16.910 --> 00:37:18.870
how to get the most of
the character control.

00:37:18.870 --> 00:37:20.669
Can we marry those two together?

00:37:20.669 --> 00:37:21.960
RYAN HIPPLE: Of course, we can.

00:37:21.960 --> 00:37:26.781
In our Skyship demo, the players
control a gliding airship

00:37:26.781 --> 00:37:28.280
through an environment
where they're

00:37:28.280 --> 00:37:31.840
dodging obstacles and trying
to pick up coins along the way.

00:37:31.840 --> 00:37:33.850
This is actually pretty
simple on the input side

00:37:33.850 --> 00:37:36.310
where we're just using the
orientation that we get.

00:37:36.310 --> 00:37:39.090
This lets us essentially
just point and click--

00:37:39.090 --> 00:37:40.980
or I'm sorry, no
clicking-- point

00:37:40.980 --> 00:37:42.970
to guide this glider
around the environment

00:37:42.970 --> 00:37:45.329
and using the yaw, the
pitch, and the roll

00:37:45.329 --> 00:37:47.120
just like you would
with an actual aircraft

00:37:47.120 --> 00:37:49.590
to get it to move
around this environment.

00:37:49.590 --> 00:37:54.380
Having the roll or the twist
as well is really nice for this

00:37:54.380 --> 00:37:57.367
because should the mood strike
you, you can do a barrel roll.

00:37:57.367 --> 00:37:58.530
FRANCISCO SOUKI: Yep.

00:37:58.530 --> 00:38:01.609
And Ryan said no clicking
because, again, the clicking

00:38:01.609 --> 00:38:03.650
is freed up here for you
to do whatever you might

00:38:03.650 --> 00:38:05.260
want to do on a flying ship.

00:38:05.260 --> 00:38:06.730
When you play this,
it really feels

00:38:06.730 --> 00:38:08.563
like you're kind of
handling a toy airplane.

00:38:08.563 --> 00:38:11.160
You're kind of like
threading it through space

00:38:11.160 --> 00:38:12.540
all through these rings.

00:38:12.540 --> 00:38:15.210
The hand shake in this
is not a big problem here

00:38:15.210 --> 00:38:18.650
because you control
how wide the gaps are

00:38:18.650 --> 00:38:20.440
with the rings or the
spaces that you're

00:38:20.440 --> 00:38:22.930
trying to fit the space ship
through or the ship through.

00:38:22.930 --> 00:38:26.340
So that kind of counters
a lot of the imprecision

00:38:26.340 --> 00:38:31.290
that your own hand translates
into the world, and it does

00:38:31.290 --> 00:38:33.420
allow you to orient the
ship sort of however you

00:38:33.420 --> 00:38:35.930
want as you're flying with it.

00:38:35.930 --> 00:38:40.350
This is another one that
playtesters couldn't put down.

00:38:40.350 --> 00:38:43.560
We just keep the rings coming,
and they will keep playing.

00:38:43.560 --> 00:38:46.202
And so unless you give them
a goal of like elect 10 coins

00:38:46.202 --> 00:38:47.660
and then please
pass it along, they

00:38:47.660 --> 00:38:50.160
will just like stay in
there doing it all the time.

00:38:50.160 --> 00:38:51.050
It feels good.

00:38:51.050 --> 00:38:53.510
The pillars are there so that
you don't get that motion

00:38:53.510 --> 00:38:54.420
sickness from moving forward.

00:38:54.420 --> 00:38:56.836
You're stationary and the world
is moving in front of you,

00:38:56.836 --> 00:38:57.490
so you're fine.

00:38:57.490 --> 00:38:58.980
You don't get that
motion sickness.

00:38:58.980 --> 00:39:01.750
And at that point, we're
feeling pretty confident

00:39:01.750 --> 00:39:03.810
and we're like,
all right, we seem

00:39:03.810 --> 00:39:05.450
to have this flying
thing figured out.

00:39:05.450 --> 00:39:07.800
It's constrained to
a plane, but maybe we

00:39:07.800 --> 00:39:09.210
can break out of that plane.

00:39:09.210 --> 00:39:10.860
Maybe we could go
a little bigger.

00:39:10.860 --> 00:39:13.140
What I want to do is,
I want to feel like,

00:39:13.140 --> 00:39:15.250
not like I'm flying
a kite, but like I'm

00:39:15.250 --> 00:39:20.020
controlling this giant
creature that I just summoned.

00:39:20.020 --> 00:39:22.740
RYAN HIPPLE: Here
be the dragons.

00:39:22.740 --> 00:39:25.430
In our Dragon demo, the player
controls a massive dragon

00:39:25.430 --> 00:39:27.272
using, again, the
controller orientation,

00:39:27.272 --> 00:39:29.730
and they're pointing this, the
controller, in the direction

00:39:29.730 --> 00:39:31.063
that they want the dragon to go.

00:39:31.063 --> 00:39:33.410
To give a little bit of
an immediate feedback,

00:39:33.410 --> 00:39:35.970
we have a little dollar, a
statue of the dragon positioned

00:39:35.970 --> 00:39:37.942
in front of the camera
so the player can see

00:39:37.942 --> 00:39:39.150
what the goal orientation is.

00:39:39.150 --> 00:39:40.250
And this is another
thing that we've

00:39:40.250 --> 00:39:42.070
learned in the
other demos where we

00:39:42.070 --> 00:39:44.400
want to maintain a relationship
between the controller

00:39:44.400 --> 00:39:46.880
and some physical object
in the environment.

00:39:46.880 --> 00:39:48.500
Then in order to
make the dragon feel

00:39:48.500 --> 00:39:50.640
like it's this
massive entity, we

00:39:50.640 --> 00:39:52.630
have that point
towards that vector

00:39:52.630 --> 00:39:54.300
that you're guiding
it towards and have

00:39:54.300 --> 00:39:57.500
it sort of lumber along in
this long, twisting path,

00:39:57.500 --> 00:40:01.065
collecting and destroying
those floating objects.

00:40:01.065 --> 00:40:03.940
FRANCISCO SOUKI: Yeah, but
this one feels really good.

00:40:03.940 --> 00:40:06.210
When you get the source
to play with all of these,

00:40:06.210 --> 00:40:09.510
just fire up this Dragon demo,
point the controller yourself,

00:40:09.510 --> 00:40:10.886
and watch the
dragon come at you.

00:40:10.886 --> 00:40:12.551
And we've got a bunch
of things in there

00:40:12.551 --> 00:40:14.320
to sort of take
advantage of that VR.

00:40:14.320 --> 00:40:16.486
There's a slight
camera shake, which

00:40:16.486 --> 00:40:17.860
sounds kind of
like, what, you're

00:40:17.860 --> 00:40:19.170
shaking the player's camera?

00:40:19.170 --> 00:40:21.890
But don't let anyone ever tell
you what you can't do in VR.

00:40:21.890 --> 00:40:24.440
Try it and see if it works
or not because it works here.

00:40:24.440 --> 00:40:25.920
It's a slight shake.

00:40:25.920 --> 00:40:28.800
It's combined with the
positional audio of the dragon

00:40:28.800 --> 00:40:30.880
so that you really feel
like you're sharing

00:40:30.880 --> 00:40:32.585
a space with this big creature.

00:40:32.585 --> 00:40:34.530
And you're kind of doing
this dance with it.

00:40:34.530 --> 00:40:36.230
It's big and it's
heavy and it handles

00:40:36.230 --> 00:40:37.540
like a big, heavy creature.

00:40:37.540 --> 00:40:39.760
So you're kind of like
dancing with it through space,

00:40:39.760 --> 00:40:42.401
and you're trying to eat up
all these big structures.

00:40:42.401 --> 00:40:44.650
Then you point it at yourself,
and it's coming at you.

00:40:44.650 --> 00:40:46.490
And there's this thing next
to you and it tries to eat,

00:40:46.490 --> 00:40:47.656
and you're like, oh, my god.

00:40:47.656 --> 00:40:48.320
It's great.

00:40:48.320 --> 00:40:49.670
It feels really good.

00:40:49.670 --> 00:40:53.580
This is really, I think,
showcasing what Daydream

00:40:53.580 --> 00:40:56.720
can do, which is a lot,
especially when you combine

00:40:56.720 --> 00:40:59.870
the headset with the
controller and you

00:40:59.870 --> 00:41:02.640
get those epic fly overs with
the dragon, it feels great.

00:41:02.640 --> 00:41:04.920
So at this point,
we're like, all right,

00:41:04.920 --> 00:41:06.930
we did the dragon thing,
the boomerang thing,

00:41:06.930 --> 00:41:09.590
the xylophone to play the
music, a bunch of other stuff.

00:41:09.590 --> 00:41:12.595
We have 17 in total and
what's left for us to do?

00:41:12.595 --> 00:41:14.470
Should we really give
the people what they've

00:41:14.470 --> 00:41:15.920
been asking for all along?

00:41:15.920 --> 00:41:16.850
RYAN HIPPLE: You've
seen it already.

00:41:16.850 --> 00:41:17.766
You've seen it plenty.

00:41:17.766 --> 00:41:20.930
Here be the pancakes.

00:41:20.930 --> 00:41:23.950
In this demo, we're actually
using the orientation

00:41:23.950 --> 00:41:24.910
to flip these pancakes.

00:41:24.910 --> 00:41:27.430
Then we have a very advanced
pancake physics engine

00:41:27.430 --> 00:41:30.030
that we're running to make sure
the pancakes are moving around

00:41:30.030 --> 00:41:31.710
as they should.

00:41:31.710 --> 00:41:35.130
In reality, it's actually just
using the basic game physics

00:41:35.130 --> 00:41:36.150
system here.

00:41:36.150 --> 00:41:38.560
And having a pan that
has the lip on it

00:41:38.560 --> 00:41:40.530
as the collision
structure, it actually

00:41:40.530 --> 00:41:41.810
works really, really well.

00:41:41.810 --> 00:41:44.884
This orientation gives you
that really nice flip gesture

00:41:44.884 --> 00:41:45.550
that you can do.

00:41:45.550 --> 00:41:47.270
And we're not really
doing a gesture detection.

00:41:47.270 --> 00:41:49.144
When I say gesture, it's
just sort of natural

00:41:49.144 --> 00:41:51.740
how the physics
simulation pairs up

00:41:51.740 --> 00:41:55.450
with having this raw
orientation input.

00:41:55.450 --> 00:41:57.990
And it turns out to be a
very, very fun thing to do.

00:41:57.990 --> 00:42:00.422
We did do a little
bit of active pancake

00:42:00.422 --> 00:42:02.380
assist here to make sure
the pancakes don't get

00:42:02.380 --> 00:42:04.430
with out of reach,
but overall, it's

00:42:04.430 --> 00:42:05.864
just a very natural fun demo.

00:42:05.864 --> 00:42:06.780
FRANCISCO SOUKI: Yeah.

00:42:06.780 --> 00:42:08.700
I do think the
Pancakes sort of fit

00:42:08.700 --> 00:42:13.530
what is awesome about Daydream,
which is, you see the Pancakes

00:42:13.530 --> 00:42:16.004
demo, you've been reading like
people are tweeting about it

00:42:16.004 --> 00:42:17.045
from the Keynote and all.

00:42:17.045 --> 00:42:19.500
It's like oh, my god, I
want to flip pancakes in VR.

00:42:19.500 --> 00:42:21.630
And you get in there and
you flip pancakes in VR

00:42:21.630 --> 00:42:22.980
and it plays how it looks.

00:42:22.980 --> 00:42:26.210
You're flipping pancakes in VR
and you're like, yes, got it.

00:42:26.210 --> 00:42:29.110
So when the platform
allows you to do

00:42:29.110 --> 00:42:33.740
exactly what it looks like, it
feels like what it looks like

00:42:33.740 --> 00:42:36.690
and what it should feel like,
that's when it's a big win.

00:42:36.690 --> 00:42:39.160
So forward to Ryan for
some final thoughts

00:42:39.160 --> 00:42:41.352
on developing all
these awesome demos.

00:42:41.352 --> 00:42:43.393
RYAN HIPPLE: What if we
could eat pancakes in VR?

00:42:43.393 --> 00:42:44.980
FRANCISCO SOUKI:
That's the next step.

00:42:44.980 --> 00:42:47.646
RYAN HIPPLE: Francisco mentioned
at the beginning of our section

00:42:47.646 --> 00:42:50.380
that we built 17 demos,
so 17 demos like these,

00:42:50.380 --> 00:42:52.870
and we did that in a
little over a month.

00:42:52.870 --> 00:42:54.900
All of the tools that
we had to do this

00:42:54.900 --> 00:42:58.215
were the SDK that Bruno and
Basheer talked about and using

00:42:58.215 --> 00:43:00.090
the controller emulator
where you're actually

00:43:00.090 --> 00:43:04.160
using a phone as your input
device and a Nexus 6P.

00:43:04.160 --> 00:43:06.090
We were using a Cardboard
to develop with.

00:43:06.090 --> 00:43:07.240
So all of these
things are out there

00:43:07.240 --> 00:43:08.323
and they're available now.

00:43:08.323 --> 00:43:11.840
And the source code for all
of the demos that we've built

00:43:11.840 --> 00:43:13.510
should be available
soon for people

00:43:13.510 --> 00:43:15.468
to play around with and
use as a starting point

00:43:15.468 --> 00:43:19.217
to jump in and start making
great games with this platform.

00:43:19.217 --> 00:43:20.800
We really feel like
the things that we

00:43:20.800 --> 00:43:22.966
put together only really
scratch the surface of what

00:43:22.966 --> 00:43:25.120
we can do with Daydream
and what we can do

00:43:25.120 --> 00:43:26.810
with this amazing controller.

00:43:26.810 --> 00:43:29.190
So what will you build?

00:43:29.190 --> 00:43:29.960
Thank you.

00:43:29.960 --> 00:43:32.060
[APPLAUSE]

00:43:32.060 --> 00:43:37.210
[MUSIC PLAYING]

