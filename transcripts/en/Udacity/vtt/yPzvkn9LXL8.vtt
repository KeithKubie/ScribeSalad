WEBVTT
Kind: captions
Language: en

00:00:00.360 --> 00:00:02.780
Naturally, once you've
initialized a dictionary,

00:00:02.780 --> 00:00:04.760
you're going to want to add items to it.

00:00:04.760 --> 00:00:07.790
To add a key value pair to a dictionary,
set the value for

00:00:07.790 --> 00:00:10.780
the key using subscript syntax.

00:00:10.780 --> 00:00:14.500
Here we're adding a couple entries
to our animal groups dictionary.

00:00:14.500 --> 00:00:16.338
A group of crows is called a murder.

00:00:16.338 --> 00:00:18.390
I always thought that was a strange one.

00:00:18.390 --> 00:00:20.029
And a group of monkeys
is called a troop.

00:00:21.110 --> 00:00:22.770
And if we use the count method,

00:00:22.770 --> 00:00:26.820
which has the same syntax as the array
structs count method, we can see where,

00:00:26.820 --> 00:00:30.890
as before we had three entries in
our dictionary, now we have five.

00:00:30.890 --> 00:00:34.480
Removing a value from a dictionary
looks very similar to adding a value,

00:00:34.480 --> 00:00:38.890
but in this case, the value for
the key is assigned to nil.

00:00:38.890 --> 00:00:41.550
And after we assign the value for
crows to nil,

00:00:41.550 --> 00:00:45.600
we can see that the crows murder pair
has been removed from the dictionary.

00:00:45.600 --> 00:00:49.010
What if we want to change
the value associated with a key?

00:00:49.010 --> 00:00:51.110
For this, we have a couple options.

00:00:51.110 --> 00:00:55.390
We can keep using the same versatile
subscript syntax like this.

00:00:55.390 --> 00:01:01.740
Here, let's change the monkeys value
to be barrel instead of troop.

00:01:02.830 --> 00:01:06.540
Or we can use the method
updateValue forKey.

00:01:06.540 --> 00:01:10.390
This method is interesting because
it returns an optional value.

00:01:10.390 --> 00:01:13.630
This is good because if you try to
update a value that's not in your

00:01:13.630 --> 00:01:15.800
dictionary, your program won't crash.

00:01:15.800 --> 00:01:19.114
The updateValue method will just
return nil and go ahead and

00:01:19.114 --> 00:01:21.639
add the new key value
pair to the dictionary.

00:01:21.639 --> 00:01:26.670
And here you can see we've added a crash
of rhinoceroses to our dictionary.

00:01:26.670 --> 00:01:30.200
If the dictionary does contain
the value you try to update,

00:01:30.200 --> 00:01:33.520
the updateValue forKey method
returns the former value,

00:01:33.520 --> 00:01:37.680
the old value, like we saw here
when the method returned flock.

00:01:37.680 --> 00:01:41.710
If you want to retrieve the value for
a particular key, you can use,

00:01:41.710 --> 00:01:45.380
you guessed it, subscript syntax,
in other words,

00:01:45.380 --> 00:01:49.320
the dictionary name followed
by the key in square brackets.

00:01:49.320 --> 00:01:53.129
One has to be a little bit careful when
retrieving values from dictionaries

00:01:53.129 --> 00:01:54.700
because retrieving a value for

00:01:54.700 --> 00:01:57.312
a given key from a dictionary
returns an optional.

00:01:57.312 --> 00:02:00.278
Why would a dictionary
return an optional?

00:02:00.278 --> 00:02:02.919
I'm just going to pause for a few
seconds and let you think about it.

00:02:06.073 --> 00:02:09.681
It returns an optional because there's
always a chance that the key value pair

00:02:09.681 --> 00:02:12.590
you're looking for
isn't in the dictionary.

00:02:12.590 --> 00:02:15.190
There are many cases in which
a program might ask for

00:02:15.190 --> 00:02:18.820
a value from a dictionary, not knowing
whether it will be there or not.

00:02:18.820 --> 00:02:23.560
So it returns an optional, and naturally
that optional needs to be unwrapped.

00:02:23.560 --> 00:02:26.724
We unwrap a value returned from
a dictionary using if let,

00:02:26.724 --> 00:02:29.123
just like we'd unwrap
any other optional.

00:02:29.123 --> 00:02:32.703
In this example, we want to retrieve
the value for a group of whale and

00:02:32.703 --> 00:02:35.760
use that value in this print statement.

00:02:35.760 --> 00:02:41.080
So we unwrap it like so, and here you
can see the optional has a value, pod.

00:02:41.080 --> 00:02:43.800
So what happens if the key isn't found?

00:02:43.800 --> 00:02:46.820
No problem, we're covered,
like in this example.

00:02:46.820 --> 00:02:49.220
Sasquatches are not in our dictionary.

00:02:49.220 --> 00:02:50.810
The optional has a nil value.

00:02:50.810 --> 00:02:54.900
But that's okay because we've specified
exactly what we want the program to do

00:02:54.900 --> 00:02:55.920
in case of a nil value.

