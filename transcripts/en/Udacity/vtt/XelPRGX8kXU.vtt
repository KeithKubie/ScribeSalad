WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
Assume you have this big, big program with no runtime checks at all

00:00:05.000 --> 00:00:07.000
and you suppose to do the debugging.

00:00:07.000 --> 00:00:10.000
Where in that program should you start?

00:00:10.000 --> 00:00:14.000
I would suggest the first thing to do is to define data invariants.

00:00:14.000 --> 00:00:20.000
This will immediately cover large parts of the program state and catch lots and lots of defects.

00:00:20.000 --> 00:00:24.000
The next thing is to provide preconditions which check the data invariants, of course,

00:00:24.000 --> 00:00:29.000
but which also check specific preconditions for the functions at hand.

00:00:29.000 --> 00:00:33.000
Finally, provide post condition in any method you find suspect.

00:00:33.000 --> 00:00:37.000
Start with the partial conditions and then you expand them further and further

00:00:37.000 --> 00:00:40.000
to capture more and more of the correct behavior.

00:00:40.000 --> 00:00:43.000
Why do we start with data invariants in preconditions?

00:00:43.000 --> 00:00:47.000
Well, because they usually way easier to write, catch lots of bugs,

00:00:47.000 --> 00:00:51.000
and because we only care about whether a method works or not

00:00:51.000 --> 00:00:56.000
if it actually gets the correct argument and gets a correct state to begin with.

00:00:56.000 --> 00:01:01.000
On top of that, if you are using C or C++, run a system invariant check up.

00:01:01.000 --> 00:01:03.000
You should run the system invariant check up for the simple reason

00:01:03.000 --> 00:01:06.000
that it will check for all sorts of memory corruption,

00:01:06.000 --> 00:01:10.000
and if your program does have any issues with memory corruption,

00:01:10.000 --> 00:01:14.000
then all of these other assertions are totally nulled because they will come up with random results.

00:01:14.000 --> 00:01:19.000
Running a tool like Valgrind can detect lots and lots of memory issues

00:01:19.000 --> 00:01:23.000
and all it takes is to run your program once, with Valgrind enabled.

00:01:23.000 --> 00:01:28.000
A colleague of mine recently transfer from academia to an oil and gas company

00:01:28.000 --> 00:01:30.000
and he was in charge of testing.

00:01:30.000 --> 00:01:34.000
He introduced the first assertion ever in their code

00:01:34.000 --> 00:01:38.000
and immediately, this one single assertion, uncovered dozens of bugs.

00:01:38.000 --> 00:01:40.000
The engineers were amazed.

00:01:40.000 --> 00:01:44.000
They have never seen anything like this before and this is an experience.

00:01:44.000 --> 00:01:47.000
Well, I'm not exactly sure whether you should have that experience too,

00:01:47.000 --> 00:01:51.000
but if you come along with code that has no assertion at all,

00:01:51.000 --> 00:01:53.000
start adding some and you will be surprised.

00:01:53.000 --> 00:01:57.000
Why should we start with data invariants? This is a quiz.

00:01:57.000 --> 00:02:03.000
First option, they cover much of the state. Second option, they are frequently checked.

00:02:03.000 --> 00:02:06.000
They form implicit pre- and post conditions

00:02:06.000 --> 00:02:12.000
because data invariants should hold at the beginning and at the end of each public method.

00:02:12.000 --> 00:02:15.000
Final option, they provide helpful documentation

00:02:15.000 --> 00:02:20.000
because they document exactly how the data structure is organized

00:02:20.000 --> 00:02:22.000
in which assumptions programers should not violate.

00:02:22.000 --> 00:02:26.000
Check all that apply. Over to you.

