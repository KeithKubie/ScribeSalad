WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.856
[MUSIC PLAYING]

00:00:07.150 --> 00:00:11.830
DAVE BURKE: Hey, everyone, and
welcome to the 2018 Android

00:00:11.830 --> 00:00:15.160
Developers Summit here at
the historic Computer History

00:00:15.160 --> 00:00:17.470
Museum in California.

00:00:17.470 --> 00:00:21.010
This is an event for
developers by developers

00:00:21.010 --> 00:00:24.310
with tons of in-depth content
and, most importantly,

00:00:24.310 --> 00:00:28.360
direct access to the engineers
that actually build Android.

00:00:28.360 --> 00:00:30.370
In fact, we have so many
of them here this week

00:00:30.370 --> 00:00:34.690
that I'm pretty sure Android
development is going to stop.

00:00:34.690 --> 00:00:36.430
In the audience,
we have attendees

00:00:36.430 --> 00:00:39.430
from over 70 countries,
both in-person

00:00:39.430 --> 00:00:40.840
and on the livestream.

00:00:40.840 --> 00:00:43.250
We're glad to have you
all with us here today.

00:00:43.250 --> 00:00:47.350
Now, speaking of history,
we're about to celebrate

00:00:47.350 --> 00:00:49.420
our 10th anniversary of Android.

00:00:49.420 --> 00:00:51.820
And, in fact, it was
about 10 years ago

00:00:51.820 --> 00:00:56.350
that the very first customers
were unboxing their G1 devices.

00:00:56.350 --> 00:00:58.820
And CNET's review
at the time said,

00:00:58.820 --> 00:01:01.300
"Thanks to the openness
of the operating system,

00:01:01.300 --> 00:01:05.230
there's huge potential for
the G1 and any Android devices

00:01:05.230 --> 00:01:09.130
after it to become powerful
minicomputers as developers

00:01:09.130 --> 00:01:12.550
create more applications
for Google Android."

00:01:12.550 --> 00:01:16.960
The G1 did OK, but
it's what came next

00:01:16.960 --> 00:01:19.780
and what you built on
Android that fundamentally

00:01:19.780 --> 00:01:22.960
changed the mobile industry.

00:01:22.960 --> 00:01:24.880
10 years ago, the
mobile landscape

00:01:24.880 --> 00:01:26.470
looked very different.

00:01:26.470 --> 00:01:28.660
Mobile platforms at
the time were not

00:01:28.660 --> 00:01:32.470
friendly to developers,
with severely limited APIs

00:01:32.470 --> 00:01:33.730
and tools.

00:01:33.730 --> 00:01:36.820
But even more problematic
was that each OS

00:01:36.820 --> 00:01:41.480
required completely different
and non-transferable skills.

00:01:41.480 --> 00:01:45.240
So it was simply impossible to
build a mobile app at scale.

00:01:45.240 --> 00:01:48.630
Now, at the same time,
off in a corner of Google,

00:01:48.630 --> 00:01:52.670
in building 44, a small
team of dedicated engineers

00:01:52.670 --> 00:01:54.640
were quietly working
on what, at the time,

00:01:54.640 --> 00:01:56.740
seemed like a crazy project.

00:01:56.740 --> 00:01:58.270
The idea was bold--

00:01:58.270 --> 00:02:01.690
to build a new open
source operating system

00:02:01.690 --> 00:02:05.440
that any device maker could
use with a powerful SDK that

00:02:05.440 --> 00:02:07.540
put developers first.

00:02:07.540 --> 00:02:11.830
And to many at the time, this
seemed like a harebrained idea.

00:02:11.830 --> 00:02:14.570
What did Google know
about telecommunications,

00:02:14.570 --> 00:02:16.300
and how could it
possibly influence

00:02:16.300 --> 00:02:18.680
this established industry?

00:02:18.680 --> 00:02:22.070
It was an intense time
for the Android team.

00:02:22.070 --> 00:02:24.190
And to add to the
drama, while getting

00:02:24.190 --> 00:02:28.710
close to launching version 1.0,
Apple announced the iPhone.

00:02:28.710 --> 00:02:29.740
And it looked awesome.

00:02:29.740 --> 00:02:31.780
They brought their A game.

00:02:31.780 --> 00:02:33.770
So what were we going to do?

00:02:33.770 --> 00:02:35.530
Well, we had two
hardware programs

00:02:35.530 --> 00:02:39.080
at the time, the Sooner device,
with a physical keyboard

00:02:39.080 --> 00:02:42.380
and the Dream device, which
included a touch screen.

00:02:42.380 --> 00:02:44.860
So we had no choice
but to accelerate

00:02:44.860 --> 00:02:47.470
the schedule of the Dream.

00:02:47.470 --> 00:02:49.780
We felt like we had
a window to deliver

00:02:49.780 --> 00:02:54.320
on our vision of the smartphone
before it was too late.

00:02:54.320 --> 00:02:56.320
We were racing to
launch, and the team

00:02:56.320 --> 00:02:58.640
was incredibly motivated.

00:02:58.640 --> 00:03:00.610
So we started a
tradition of putting

00:03:00.610 --> 00:03:04.510
on a huge breakfast on Sundays
in building 44 for anyone

00:03:04.510 --> 00:03:05.800
who wanted to come in--

00:03:05.800 --> 00:03:07.420
bacon, eggs, pastries.

00:03:07.420 --> 00:03:08.530
You name it.

00:03:08.530 --> 00:03:10.810
And it was super productive.

00:03:10.810 --> 00:03:13.690
No meetings, just
coding, and in parallel,

00:03:13.690 --> 00:03:15.790
bug triaging and
release planning.

00:03:15.790 --> 00:03:18.130
Clearly, these cats do not
know that Android Studio

00:03:18.130 --> 00:03:20.170
has code completion.

00:03:20.170 --> 00:03:22.990
In the morning, you'd have
a previous week's version

00:03:22.990 --> 00:03:23.920
of Android.

00:03:23.920 --> 00:03:27.040
But by the evening, some amazing
new piece of functionality

00:03:27.040 --> 00:03:28.720
would appear, like
the notification

00:03:28.720 --> 00:03:31.060
shade or a new home screen.

00:03:31.060 --> 00:03:35.420
It was like watching the OS
come alive before your eyes.

00:03:35.420 --> 00:03:39.580
Now, one of the big challenges
in creating a new platform

00:03:39.580 --> 00:03:41.400
is the bootstrapping problem.

00:03:41.400 --> 00:03:44.380
So how do you motivate anyone
to write an application

00:03:44.380 --> 00:03:46.720
for a platform with zero users?

00:03:46.720 --> 00:03:50.650
And why would a user buy a
phone with no applications?

00:03:50.650 --> 00:03:52.360
So we did two things.

00:03:52.360 --> 00:03:55.990
First, the core Android team
wrote mobile app versions

00:03:55.990 --> 00:03:59.470
of Google's desktop services,
everything from Gmail

00:03:59.470 --> 00:04:01.430
to Maps to YouTube.

00:04:01.430 --> 00:04:03.340
And it worked out
well because it

00:04:03.340 --> 00:04:07.570
let us experience our APIs
in framework at the same time

00:04:07.570 --> 00:04:09.730
as developing the applications.

00:04:09.730 --> 00:04:12.720
And it's something that I like
to encourage we do to this day.

00:04:12.720 --> 00:04:15.190
But, to make the
platform shine, we

00:04:15.190 --> 00:04:18.260
needed apps from
across the industry.

00:04:18.260 --> 00:04:22.930
So we launched an early
look SDK in November 2007

00:04:22.930 --> 00:04:25.750
and announced the Android
Developer Challenge

00:04:25.750 --> 00:04:29.820
with $20 million to be
awarded to the top 100 apps.

00:04:29.820 --> 00:04:33.940
And developers around the world
responded, and by April 2008,

00:04:33.940 --> 00:04:38.520
just six months later, we
had over 2,000 submissions.

00:04:38.520 --> 00:04:41.710
And it was amazing, given that
there were no physical devices

00:04:41.710 --> 00:04:45.070
to use for development--
just the emulator.

00:04:45.070 --> 00:04:47.140
The apps were
surprisingly diverse,

00:04:47.140 --> 00:04:50.260
from games to social
networking and from utilities

00:04:50.260 --> 00:04:52.120
to productivity tools.

00:04:52.120 --> 00:04:55.720
And location and GPS were
the top used features,

00:04:55.720 --> 00:04:58.700
along with camera and
media and messaging.

00:04:58.700 --> 00:05:01.960
So it really showed this
pent-up demand for developers

00:05:01.960 --> 00:05:05.320
to be creative on mobile and
to use features that we're,

00:05:05.320 --> 00:05:07.620
up to now, locked down to them.

00:05:07.620 --> 00:05:10.200
Some of the winning apps
are still around today,

00:05:10.200 --> 00:05:15.330
like Life360, and several paved
the way for apps and businesses

00:05:15.330 --> 00:05:17.050
that would come years later.

00:05:17.050 --> 00:05:20.910
The T-Mobile G1
launched in October 2008

00:05:20.910 --> 00:05:22.450
with Android Market.

00:05:22.450 --> 00:05:24.780
This was the predecessor
to Google Play,

00:05:24.780 --> 00:05:28.340
and it had just over
50 apps on day one.

00:05:28.340 --> 00:05:32.580
One week later, we opened the
store for developer uploads,

00:05:32.580 --> 00:05:35.460
and advanced capabilities
like in-app purchases

00:05:35.460 --> 00:05:38.580
and direct carrier billing and
just broader country support

00:05:38.580 --> 00:05:40.522
were yet to be built.

00:05:40.522 --> 00:05:44.540
The following 10 years was
one of rapid evolution.

00:05:44.540 --> 00:05:48.560
In the early days, we were
doing two big releases a year,

00:05:48.560 --> 00:05:50.510
and our lead program
manager at the time

00:05:50.510 --> 00:05:52.160
made this offhand
suggestion that we

00:05:52.160 --> 00:05:55.600
codename the releases after
desserts in alphabetical order.

00:05:55.600 --> 00:05:59.000
And that idea stuck, and
here's what came next.

00:05:59.000 --> 00:06:01.730
So Android 1.5, Cupcake--

00:06:01.730 --> 00:06:03.770
we were eating a lot of
cupcakes at the time--

00:06:03.770 --> 00:06:06.140
added virtual keyboard
support so we'd

00:06:06.140 --> 00:06:09.260
no longer require that physical
keyboard like on the first G1

00:06:09.260 --> 00:06:10.350
device.

00:06:10.350 --> 00:06:12.605
We also added the copy
and paste clipboard.

00:06:12.605 --> 00:06:15.710
Android 1.6, Donut,
followed, introducing support

00:06:15.710 --> 00:06:18.620
for different screen
densities and sizes,

00:06:18.620 --> 00:06:21.484
thereby laying the foundation
for a variety of phone sizes

00:06:21.484 --> 00:06:23.900
and form factors that were
going to come a couple of years

00:06:23.900 --> 00:06:24.770
later.

00:06:24.770 --> 00:06:26.390
And that was Dianne
Hackborn's idea.

00:06:26.390 --> 00:06:29.490
She's generally about five
years ahead of the rest of us.

00:06:29.490 --> 00:06:33.110
Android 2, Eclair, introduced
powerful speech recognition

00:06:33.110 --> 00:06:37.940
and changed driving forever
with Google Maps navigation.

00:06:37.940 --> 00:06:41.420
Android 2.2, Froyo, took
the speech capabilities

00:06:41.420 --> 00:06:44.060
to the next level
with voice actions,

00:06:44.060 --> 00:06:46.490
which lets you perform key
functions on your phone

00:06:46.490 --> 00:06:49.430
like getting directions and
taking notes and setting

00:06:49.430 --> 00:06:50.535
alarms.

00:06:50.535 --> 00:06:52.280
And that, of course,
was the precursor

00:06:52.280 --> 00:06:54.560
to today's Google Assistant.

00:06:54.560 --> 00:06:57.320
Android 2.3, Gingerbread,
was, in many ways,

00:06:57.320 --> 00:06:59.740
the first mainstream
version of Android,

00:06:59.740 --> 00:07:02.450
and it was the one that
started to get serious scale

00:07:02.450 --> 00:07:04.830
with hardware manufacturers.

00:07:04.830 --> 00:07:08.300
With Android 3, Honeycomb,
we added support for tablets

00:07:08.300 --> 00:07:09.730
with the Holo theme.

00:07:09.730 --> 00:07:12.050
But now we had a
problem because phones

00:07:12.050 --> 00:07:14.180
were shipping on
Gingerbread and tablets

00:07:14.180 --> 00:07:15.860
were shipping on Honeycomb.

00:07:15.860 --> 00:07:19.430
So we merged both form factors
with Android 4, Ice Cream

00:07:19.430 --> 00:07:20.570
Sandwich.

00:07:20.570 --> 00:07:23.000
And in that release, we also
introduced more intuitive

00:07:23.000 --> 00:07:25.130
navigation with
the use of gestures

00:07:25.130 --> 00:07:28.055
to dismiss notifications
and recent apps.

00:07:28.055 --> 00:07:32.330
And that release was also the
arrival of Quick Settings.

00:07:32.330 --> 00:07:34.670
Android Jelly Bean was
an incremental release

00:07:34.670 --> 00:07:37.220
that included Project
Butter to optimize

00:07:37.220 --> 00:07:41.150
graphics to get a buttery
smooth vsync locked animations.

00:07:41.150 --> 00:07:43.460
And smooth animations are
something that I personally

00:07:43.460 --> 00:07:45.305
obsess about to this day.

00:07:45.305 --> 00:07:49.340
Android KitKat came with Project
Svelte that reduced the memory

00:07:49.340 --> 00:07:52.170
footprint to 512 megabytes.

00:07:52.170 --> 00:07:54.880
And it also included
DSP-offloaded OK Google

00:07:54.880 --> 00:07:56.206
hotword.

00:07:56.206 --> 00:07:57.890
I heard a beep.

00:07:57.890 --> 00:07:59.086
It works.

00:07:59.086 --> 00:08:01.280
Android 5, Lollipop,
followed and was

00:08:01.280 --> 00:08:03.710
the mother of all releases.

00:08:03.710 --> 00:08:05.660
It brought material
design to Android

00:08:05.660 --> 00:08:08.820
in giving it entirely
new look and feel.

00:08:08.820 --> 00:08:12.260
And so between Project
Butter and material design,

00:08:12.260 --> 00:08:14.210
we changed the
narrative on Android,

00:08:14.210 --> 00:08:18.050
giving it a beautiful,
refined user experience.

00:08:18.050 --> 00:08:21.440
Lollipop also introduced
support for new categories

00:08:21.440 --> 00:08:25.580
of computing, including
wearables and auto and TV.

00:08:25.580 --> 00:08:27.170
And Lollipop was
the first release

00:08:27.170 --> 00:08:29.840
with enterprise features,
such as the work profile,

00:08:29.840 --> 00:08:32.659
which we've been
building on ever since.

00:08:32.659 --> 00:08:35.120
Lollipop was such
an epic release

00:08:35.120 --> 00:08:38.330
that we, frankly, needed to
spend our energy on Android 6,

00:08:38.330 --> 00:08:40.770
Marshmallow, on
improving quality.

00:08:40.770 --> 00:08:43.820
We also made a major overhaul
of privacy in that release

00:08:43.820 --> 00:08:46.410
with the introduction
of runtime permissions.

00:08:46.410 --> 00:08:50.010
Android 7, Nougat, brought
significant new capabilities,

00:08:50.010 --> 00:08:53.950
including multi-window support,
virtual reality, and new emoji.

00:08:53.950 --> 00:08:56.810
Android 8, Oreo, introduced
the Android Go profile

00:08:56.810 --> 00:08:58.940
for entry-level smartphones.

00:08:58.940 --> 00:09:02.090
And it also came with Project
Treble, a massive overhaul

00:09:02.090 --> 00:09:05.900
of the hardware interface layer
to help speed up and reduce

00:09:05.900 --> 00:09:07.940
the cost of doing upgrades.

00:09:07.940 --> 00:09:11.000
Finally, this year, we
launched Android Pie,

00:09:11.000 --> 00:09:14.760
which starts our journey
on an AI-first experience.

00:09:14.760 --> 00:09:17.030
It also contains tons
of UI improvements

00:09:17.030 --> 00:09:19.820
and simplifications and
introduces the concept

00:09:19.820 --> 00:09:21.630
of digital well-being.

00:09:21.630 --> 00:09:24.780
So that was a very quick
trip down memory lane.

00:09:24.780 --> 00:09:27.800
I think it's pretty incredible
to see just how far we have all

00:09:27.800 --> 00:09:31.610
come in a decade of
smartphone development.

00:09:31.610 --> 00:09:34.130
And while we're solving
different problems today,

00:09:34.130 --> 00:09:36.020
it's clear the
principles upon which

00:09:36.020 --> 00:09:38.600
we built Android are just
as true today as they

00:09:38.600 --> 00:09:40.210
were 10 years ago.

00:09:40.210 --> 00:09:42.020
So principles like
giving developers

00:09:42.020 --> 00:09:46.400
a powerful SDK so their apps can
run everywhere or open source

00:09:46.400 --> 00:09:49.070
code to enable device
makers from entry level

00:09:49.070 --> 00:09:52.700
to high end and an ever
improving UX that delights

00:09:52.700 --> 00:09:54.810
users around the world.

00:09:54.810 --> 00:09:58.820
So what does the next 10 years
have in store for Android?

00:09:58.820 --> 00:10:01.170
Well, I obviously don't
have a crystal ball.

00:10:01.170 --> 00:10:03.530
But there are three trends
that I want to call out

00:10:03.530 --> 00:10:04.970
that I think are important.

00:10:04.970 --> 00:10:08.120
One, smartphones
are getting smarter.

00:10:08.120 --> 00:10:11.030
Two, multi-screen
computing is becoming

00:10:11.030 --> 00:10:14.450
pervasive with exciting new
form factors on the horizon.

00:10:14.450 --> 00:10:16.340
And three, our phones
are going to be

00:10:16.340 --> 00:10:19.520
able to help us with safety
and digital well-being.

00:10:19.520 --> 00:10:22.790
So first, our smartphones
are about to get a whole lot

00:10:22.790 --> 00:10:23.820
smarter.

00:10:23.820 --> 00:10:25.940
AI will enable your
phone to get to know

00:10:25.940 --> 00:10:29.620
you better, to adapt to you,
and to become more personal.

00:10:29.620 --> 00:10:33.050
And you can already see glimpses
of this in Android Pie running

00:10:33.050 --> 00:10:34.610
on Google Pixel.

00:10:34.610 --> 00:10:36.980
For example, the screen
brightness automatically

00:10:36.980 --> 00:10:39.890
learns your preferences,
and the next apps to launch

00:10:39.890 --> 00:10:43.020
are predicted with high
accuracy to save you time.

00:10:43.020 --> 00:10:45.845
And the camera is able to
recognize objects in real time

00:10:45.845 --> 00:10:47.240
with Google Lens.

00:10:47.240 --> 00:10:51.110
And the phone can screen
calls with an intelligent AI.

00:10:51.110 --> 00:10:53.900
For developers wanting
to tap into AI,

00:10:53.900 --> 00:10:56.910
we announced ML Kit
earlier this year.

00:10:56.910 --> 00:10:58.505
So whether you're
new or experienced

00:10:58.505 --> 00:11:01.610
in machine learning, ML
Kit enables everything

00:11:01.610 --> 00:11:05.312
from image labeling to
face detection and more.

00:11:05.312 --> 00:11:08.870
ML Kit builds on Android's
neural networks API,

00:11:08.870 --> 00:11:11.630
which provides hardware
acceleration by DSPs

00:11:11.630 --> 00:11:14.460
and net neural processing
units, or NPUs.

00:11:14.460 --> 00:11:16.220
And it's supported on
the latest flagship

00:11:16.220 --> 00:11:19.850
devices from Huawei,
[INAUDIBLE],, OnePlus, Google,

00:11:19.850 --> 00:11:21.250
and more.

00:11:21.250 --> 00:11:24.240
And then API boosts
performance considerably.

00:11:24.240 --> 00:11:25.940
So, for example,
MobileNet, which

00:11:25.940 --> 00:11:29.240
is a family of vision
models for TensorFlow,

00:11:29.240 --> 00:11:33.122
runs eight times faster using an
API on the Qualcomm Snapdragon

00:11:33.122 --> 00:11:36.055
845 compared to the CPU.

00:11:36.055 --> 00:11:38.330
And you can expect
NPUs to become standard

00:11:38.330 --> 00:11:42.500
on all smartphones' silicon
in the next few years.

00:11:42.500 --> 00:11:45.630
The second trend
goes beyond phones.

00:11:45.630 --> 00:11:49.340
We're investing heavily in
a multi-screen experience.

00:11:49.340 --> 00:11:52.550
This means a great Android
experience across TVs,

00:11:52.550 --> 00:11:55.190
wearables, cars, and Chromebox.

00:11:55.190 --> 00:11:58.440
And we're seeing user growth
in all of these form factors.

00:11:58.440 --> 00:12:01.580
For example, user
engagement on Android TV

00:12:01.580 --> 00:12:05.030
has grown to three hours
per device per day.

00:12:05.030 --> 00:12:10.010
And this year, Android Auto
has seen 250% user growth.

00:12:10.010 --> 00:12:14.740
And our partners launched 19
new watches running Wear OS.

00:12:14.740 --> 00:12:18.270
And just when you thought you'd
seen everything in phones,

00:12:18.270 --> 00:12:21.860
we're about to see a whole new
form factor idea from Android

00:12:21.860 --> 00:12:22.880
device makers.

00:12:22.880 --> 00:12:24.860
Foldables.

00:12:24.860 --> 00:12:28.400
They take advantage of new
flexible display technology

00:12:28.400 --> 00:12:31.910
so the screen can
literally bend and fold.

00:12:31.910 --> 00:12:33.650
And you can think
of the device really

00:12:33.650 --> 00:12:36.520
as both a phone and a tablet.

00:12:36.520 --> 00:12:38.410
And broadly, we're
seeing two variants.

00:12:38.410 --> 00:12:42.225
There's the two-screen devices
and the one-screen devices.

00:12:42.225 --> 00:12:44.000
When folded, it
looks like a phone,

00:12:44.000 --> 00:12:46.330
so it fits in your
pocket or purse.

00:12:46.330 --> 00:12:49.580
And the defining feature
for this form factor

00:12:49.580 --> 00:12:52.580
is something we call
screen continuity.

00:12:52.580 --> 00:12:54.650
For example, you
might start a video

00:12:54.650 --> 00:12:57.650
on the folded smaller
screen while on the go

00:12:57.650 --> 00:13:00.920
but later sit down and want
a more immersive experience.

00:13:00.920 --> 00:13:02.480
So you can simply
unfold the device

00:13:02.480 --> 00:13:05.390
to get a larger
tablet-sized screen.

00:13:05.390 --> 00:13:07.700
And as you unfold,
the app seamlessly

00:13:07.700 --> 00:13:11.990
transfers to the bigger
screen without missing a beat.

00:13:11.990 --> 00:13:14.210
It's an exciting
concept, and we expect

00:13:14.210 --> 00:13:17.960
to see foldable devices from
several Android manufacturers.

00:13:17.960 --> 00:13:20.120
In fact, we're already
working closely

00:13:20.120 --> 00:13:22.490
with Samsung on
a new device they

00:13:22.490 --> 00:13:24.650
plan to launch early
next year, which

00:13:24.650 --> 00:13:26.860
you'll hear about later today.

00:13:26.860 --> 00:13:29.230
For our part, we're
enhancing Android

00:13:29.230 --> 00:13:31.540
to take advantage of
this new form factor

00:13:31.540 --> 00:13:34.430
with as little work
as possible from you.

00:13:34.430 --> 00:13:36.720
For example, we're
adding resizable flags

00:13:36.720 --> 00:13:40.150
so your app can respond
to folding and unfolding.

00:13:40.150 --> 00:13:42.040
And we expect to see
a lot of innovation

00:13:42.040 --> 00:13:43.945
in foldable hardware
over the next few years.

00:13:43.945 --> 00:13:47.080
And we're excited to see
what you come up with.

00:13:47.080 --> 00:13:50.490
The third trend is
safety and well-being.

00:13:50.490 --> 00:13:53.130
Smartphones have gone
from non-existent

00:13:53.130 --> 00:13:56.289
to indispensable
in just 10 years.

00:13:56.289 --> 00:13:58.080
In fact, the very idea
of leaving your home

00:13:58.080 --> 00:14:00.210
without your smartphone
literally sends shivers

00:14:00.210 --> 00:14:01.955
down people's spines.

00:14:01.955 --> 00:14:05.370
And at Google, we like to build
products that give you utility,

00:14:05.370 --> 00:14:06.960
whether that's
putting the world's

00:14:06.960 --> 00:14:10.020
information at your
fingertips or navigating you

00:14:10.020 --> 00:14:13.530
to where you need to be or
translating a foreign language.

00:14:13.530 --> 00:14:16.620
But beyond utility, we
feel a responsibility

00:14:16.620 --> 00:14:18.840
to your safety and well-being.

00:14:18.840 --> 00:14:22.140
As one example, more
than 80% of emergency

00:14:22.140 --> 00:14:24.990
calls originate
from mobile phones.

00:14:24.990 --> 00:14:27.480
However, locating these
phones in an emergency

00:14:27.480 --> 00:14:30.600
can be challenging since
traditional emergency location

00:14:30.600 --> 00:14:32.970
technologies often
fail indoors or have

00:14:32.970 --> 00:14:36.150
a radius that's too large.

00:14:36.150 --> 00:14:39.150
In a serious emergency,
minutes can mean the difference

00:14:39.150 --> 00:14:41.286
between life and death.

00:14:41.286 --> 00:14:46.390
We launched Android's emergency
location service, ELS, in 2016

00:14:46.390 --> 00:14:49.360
and just recently announced
bringing it to the US.

00:14:49.360 --> 00:14:53.380
With ELS, when you dial 911,
or your country's equivalent,

00:14:53.380 --> 00:14:56.080
your location is
accurately calculated

00:14:56.080 --> 00:14:58.870
through a combination
of Wi-Fi cell towers

00:14:58.870 --> 00:15:00.970
and GPS signals
and sent directly

00:15:00.970 --> 00:15:03.142
to the emergency provider.

00:15:03.142 --> 00:15:06.250
ELS is built into
99% of Android phones

00:15:06.250 --> 00:15:08.560
all the way back to
version 4, and we're

00:15:08.560 --> 00:15:10.210
continuing to look
at new ways to help

00:15:10.210 --> 00:15:14.080
improve your safety with
lots of ideas in the works.

00:15:14.080 --> 00:15:17.800
Now, having a smartphone
with you all day is awesome,

00:15:17.800 --> 00:15:20.020
but we also want to make
sure you're in control

00:15:20.020 --> 00:15:21.810
of your digital well-being.

00:15:21.810 --> 00:15:24.790
And we know from our
research that 72% of people

00:15:24.790 --> 00:15:28.530
are concerned with the amount
of time they spend on tech.

00:15:28.530 --> 00:15:31.930
So with Android Pie this
year, we introduced new tools

00:15:31.930 --> 00:15:35.560
to let you control your usage
with things like app limits,

00:15:35.560 --> 00:15:37.960
grayscale Wind Down,
and do not disturb

00:15:37.960 --> 00:15:40.480
that blocks all distractions.

00:15:40.480 --> 00:15:43.540
Of course, like most features,
we've added developer hooks.

00:15:43.540 --> 00:15:46.400
So you can now tell if
do not disturb is enabled

00:15:46.400 --> 00:15:48.730
or if your app is
temporarily limited.

00:15:48.730 --> 00:15:50.890
And you can implement
an intent filter

00:15:50.890 --> 00:15:53.410
so your app has its
own usage dashboard.

00:15:53.410 --> 00:15:55.090
We're continuing to
invest in this space

00:15:55.090 --> 00:15:57.632
with lots of
enhancements planned.

00:15:57.632 --> 00:15:59.350
OK, so let's wrap up.

00:15:59.350 --> 00:16:03.160
Android, from the beginning,
was conceived as a platform

00:16:03.160 --> 00:16:05.170
built around developers.

00:16:05.170 --> 00:16:08.380
We've poured a ton of energy
into growing this ecosystem

00:16:08.380 --> 00:16:11.150
and community from
the ground up.

00:16:11.150 --> 00:16:13.090
I see our developer
tools and frameworks

00:16:13.090 --> 00:16:14.380
as living, breathing things.

00:16:14.380 --> 00:16:17.120
So we're constantly
striving to be better.

00:16:17.120 --> 00:16:19.870
And in return, you've
been an amazing community,

00:16:19.870 --> 00:16:22.360
building incredible
apps and services

00:16:22.360 --> 00:16:25.090
that enable and delight
users the world over.

00:16:25.090 --> 00:16:28.810
We simply could not do this
without you, so thank you.

00:16:28.810 --> 00:16:31.180
So with that, let's
get down to business.

00:16:31.180 --> 00:16:32.680
I'm excited to
hand over to Steph

00:16:32.680 --> 00:16:35.350
and team to talk about
some of the recent work

00:16:35.350 --> 00:16:37.120
we've been doing to
increase developer

00:16:37.120 --> 00:16:38.800
productivity on Android.

00:16:38.800 --> 00:16:39.653
Thank you.

00:16:39.653 --> 00:16:42.431
[APPLAUSE]

00:16:42.431 --> 00:16:43.820
[MUSIC PLAYING]

00:16:43.820 --> 00:16:46.170
RAHUL GANJOO: Zomato
started as an app which

00:16:46.170 --> 00:16:49.110
lets you browse digital menus.

00:16:49.110 --> 00:16:50.900
Now we are this big
full-tech company

00:16:50.900 --> 00:16:53.250
that in operation
in 24 countries.

00:16:53.250 --> 00:16:56.565
More than 150 million users
visit the platform every month.

00:16:56.565 --> 00:16:58.460
We are available
in 10 languages.

00:16:58.460 --> 00:17:00.000
And on the delivery
side, we have

00:17:00.000 --> 00:17:02.532
a fleet of around
60,000 delivery riders.

00:17:02.532 --> 00:17:04.740
PRATEEK SHARMA: After all
the buzz in the development

00:17:04.740 --> 00:17:07.200
community about
Kotlin, I was intrigued

00:17:07.200 --> 00:17:11.614
by how Kotlin was able to uphold
the object-oriented paradigm

00:17:11.614 --> 00:17:14.040
and solve many of the
architectural flaws

00:17:14.040 --> 00:17:16.072
in the combined [INAUDIBLE].

00:17:16.072 --> 00:17:18.630
I almost instantly
recognized that Kotlin

00:17:18.630 --> 00:17:21.960
will enable me to develop
more architecturally-sound

00:17:21.960 --> 00:17:23.940
applications.

00:17:23.940 --> 00:17:27.390
Almost all the new SDKs and
APIs that Google is releasing

00:17:27.390 --> 00:17:30.900
right now has Kotlin support.

00:17:30.900 --> 00:17:33.240
If you converted
Java class to Kotlin,

00:17:33.240 --> 00:17:38.090
there will be about 15% to 20%
decrease in the line of code.

00:17:38.090 --> 00:17:39.620
But if you did
data classes, there

00:17:39.620 --> 00:17:42.670
is a drastic
improvement of about 55%

00:17:42.670 --> 00:17:45.330
decrease in the lines of code.

00:17:45.330 --> 00:17:48.380
Switching to Kotlin is
efficient and really exciting.

00:17:48.380 --> 00:17:51.210
On Zomato now, almost
every new feature

00:17:51.210 --> 00:17:54.640
is being developed in Kotlin.

00:17:54.640 --> 00:17:56.620
I would recommend
switching to Kotlin

00:17:56.620 --> 00:17:59.760
because of its
interoperability with Java.

00:17:59.760 --> 00:18:01.690
With recent updates,
Android Studio

00:18:01.690 --> 00:18:04.482
has drastically
improve Kotlin support.

00:18:04.482 --> 00:18:06.523
It is almost frictionless.

00:18:10.387 --> 00:18:13.285
[MUSIC PLAYING]

00:18:13.285 --> 00:18:16.183
[APPLAUSE]

00:18:18.529 --> 00:18:20.070
STEPHANIE CUTHBERTSON:
Hey, everyone.

00:18:20.070 --> 00:18:20.760
I'm Steph.

00:18:20.760 --> 00:18:22.470
I'm on the Android team.

00:18:22.470 --> 00:18:25.020
And Dave is right.

00:18:25.020 --> 00:18:26.610
Developers influence
the platform.

00:18:26.610 --> 00:18:28.080
You're not on top of it.

00:18:28.080 --> 00:18:29.820
You're a part of what we do.

00:18:29.820 --> 00:18:31.000
Kotlin's a great example.

00:18:31.000 --> 00:18:33.270
It's not a
Google-designed language.

00:18:33.270 --> 00:18:36.000
It was not, maybe,
the obvious choice.

00:18:36.000 --> 00:18:39.330
But it was the best
choice, as you made clear.

00:18:39.330 --> 00:18:41.640
We could see developers
voting with their feet

00:18:41.640 --> 00:18:45.870
in the adoption in the months
before we announced support.

00:18:45.870 --> 00:18:48.480
Like Kotlin, our
developer investments

00:18:48.480 --> 00:18:51.780
come down to two
things at heart.

00:18:51.780 --> 00:18:55.410
Number one, your
feedback, and number two,

00:18:55.410 --> 00:18:58.990
Google engineers using
Android and thinking,

00:18:58.990 --> 00:19:02.250
how do I make something
people will love?

00:19:02.250 --> 00:19:05.340
So the past several years,
we've been investing deeply

00:19:05.340 --> 00:19:07.410
in Android's
developer experience.

00:19:07.410 --> 00:19:09.000
It's been guided
by your feedback.

00:19:09.000 --> 00:19:10.054
We'll talk about that.

00:19:10.054 --> 00:19:11.970
We're also going to talk
about some new things

00:19:11.970 --> 00:19:14.380
that we have to share.

00:19:14.380 --> 00:19:16.020
So each year we've
been investing.

00:19:16.020 --> 00:19:17.190
Let's start with IDEs.

00:19:17.190 --> 00:19:20.460
In 2013, we first
demoed Android Studio

00:19:20.460 --> 00:19:23.610
at I/O. It was a new
IDE built on InteliJ

00:19:23.610 --> 00:19:26.430
designed to accelerate
Android development.

00:19:26.430 --> 00:19:29.700
Over five years, we've
progressively built it out,

00:19:29.700 --> 00:19:31.800
based on the features
you asked for most--

00:19:31.800 --> 00:19:35.760
completely new emulators, a new
compile tool chain, profilers,

00:19:35.760 --> 00:19:39.270
mobile layout tools, like
constraint layout, better C++,

00:19:39.270 --> 00:19:42.120
inspectors for things
like layouts and app size,

00:19:42.120 --> 00:19:44.730
and tools for every
dessert release.

00:19:44.730 --> 00:19:46.800
We also wanted to
add the little things

00:19:46.800 --> 00:19:49.170
that make a big difference,
whether that's Maven

00:19:49.170 --> 00:19:51.400
integration to lint checks.

00:19:51.400 --> 00:19:53.940
Second, APIs.

00:19:53.940 --> 00:19:58.170
In 2016, Dianne Hackborn
wrote a famous post

00:19:58.170 --> 00:20:01.920
on app architecture saying,
we're not opinionated,

00:20:01.920 --> 00:20:06.310
to which you replied,
please be opinionated.

00:20:06.310 --> 00:20:08.310
So we created
architecture components,

00:20:08.310 --> 00:20:11.520
and we've refined them with
feedback over many EAPs

00:20:11.520 --> 00:20:14.520
and expanded them now
into Android Jetpack.

00:20:14.520 --> 00:20:18.330
We see Jetpack as the
future of our mobile APIs.

00:20:18.330 --> 00:20:21.070
They are opinionated
and easy to use,

00:20:21.070 --> 00:20:25.020
intuitive APIs that
work on 95% of devices.

00:20:25.020 --> 00:20:27.870
We want them to integrate
seamlessly with Android's core

00:20:27.870 --> 00:20:31.050
primitives so you get the
best possible combination

00:20:31.050 --> 00:20:36.510
of efficiency everyday
and also deep control.

00:20:36.510 --> 00:20:40.472
Expect to see us continue
expanding Jetpack every year.

00:20:40.472 --> 00:20:42.100
Third was languages.

00:20:42.100 --> 00:20:45.940
In 2017, we announced
support for Kotlin.

00:20:45.940 --> 00:20:49.360
We've added since then
IDE support, API support,

00:20:49.360 --> 00:20:53.050
docs, samples, and moved it
into the Kotlin Foundation,

00:20:53.050 --> 00:20:56.350
working with the wonderful
language authors.

00:20:56.350 --> 00:20:58.360
Fourth, app delivery.

00:20:58.360 --> 00:21:00.910
So developers have always
loved the Play Store

00:21:00.910 --> 00:21:02.425
for the fast delivery times.

00:21:02.425 --> 00:21:05.500
That's great when you want
to launch and innovate fast.

00:21:05.500 --> 00:21:08.650
But you told us app
size is way too big,

00:21:08.650 --> 00:21:10.190
and that really hurts install.

00:21:10.190 --> 00:21:12.280
So this year, we
announced the App Bundle

00:21:12.280 --> 00:21:13.720
and dynamic delivery.

00:21:13.720 --> 00:21:15.880
Developers using this
are slimming down apps

00:21:15.880 --> 00:21:21.580
worldwide with most apps
saving up to and over 30%.

00:21:21.580 --> 00:21:23.710
Finally, security.

00:21:23.710 --> 00:21:26.920
Android was built with
security in mind from day one

00:21:26.920 --> 00:21:28.940
with application sandboxing.

00:21:28.940 --> 00:21:32.890
As Android's matured, we've
expanded our mobile security

00:21:32.890 --> 00:21:33.770
services.

00:21:33.770 --> 00:21:38.800
Today 99% of abusive
apps are taken down

00:21:38.800 --> 00:21:40.660
before anyone can install.

00:21:40.660 --> 00:21:44.080
And after you install, we
use Google Play Protect

00:21:44.080 --> 00:21:47.260
to scan over 50
billion apps per day.

00:21:47.260 --> 00:21:50.350
That's every kind of app
on every connected device.

00:21:50.350 --> 00:21:52.570
When we find a
potentially harmful app,

00:21:52.570 --> 00:21:55.510
we disable it or we remove it.

00:21:55.510 --> 00:21:59.980
But let's say you're
doing everything right,

00:21:59.980 --> 00:22:02.800
and you accidentally
get caught in this net

00:22:02.800 --> 00:22:05.252
without someone to talk to.

00:22:05.252 --> 00:22:08.007
This is a place I think
we need to do better.

00:22:08.007 --> 00:22:09.590
We need to make it
much easier for you

00:22:09.590 --> 00:22:11.190
to reach us in these cases.

00:22:11.190 --> 00:22:15.440
So our engineering director
will be here tomorrow

00:22:15.440 --> 00:22:17.720
at the fireside chat to
talk with you about it

00:22:17.720 --> 00:22:19.732
and get your feedback.

00:22:19.732 --> 00:22:21.440
Now, another way we
protect the ecosystem

00:22:21.440 --> 00:22:25.760
is moving apps to target current
APIs, like API 26 by November.

00:22:25.760 --> 00:22:27.770
And you told us,
OK, makes sense,

00:22:27.770 --> 00:22:30.030
but please give us a
long notice period.

00:22:30.030 --> 00:22:32.420
So that's why we gave
almost a year's notice.

00:22:32.420 --> 00:22:34.550
We think of you as
a part of how we

00:22:34.550 --> 00:22:37.820
work, whether it's early
ideas, to advisory boards,

00:22:37.820 --> 00:22:42.210
reading Reddit threads, beta,
and iterating after launch.

00:22:42.210 --> 00:22:43.920
We really want to
be trustworthy.

00:22:43.920 --> 00:22:45.545
And we've definitely
heard about things

00:22:45.545 --> 00:22:49.170
that you loved like architecture
components and Kotlin.

00:22:49.170 --> 00:22:52.150
Sometimes we have
underestimated the time

00:22:52.150 --> 00:22:55.330
it takes to get things
right, like Instant Run.

00:22:55.330 --> 00:22:58.660
What we've heard is you
want from us open sharing,

00:22:58.660 --> 00:23:00.880
so you're can see
things that are early--

00:23:00.880 --> 00:23:03.220
as long as we're
clear this is early--

00:23:03.220 --> 00:23:05.410
as well as things that
are ready for production.

00:23:05.410 --> 00:23:07.840
So that's what we'll do today.

00:23:07.840 --> 00:23:08.830
Let's shift gears.

00:23:08.830 --> 00:23:11.410
Today, I'm going to share
a range of early ideas all

00:23:11.410 --> 00:23:12.850
the way to stable releases.

00:23:12.850 --> 00:23:15.370
I want to walk you through
two big themes for Android

00:23:15.370 --> 00:23:16.090
development.

00:23:16.090 --> 00:23:20.650
First, foundations, using
languages and libraries

00:23:20.650 --> 00:23:22.564
to work smarter.

00:23:22.564 --> 00:23:26.920
Second, productivity,
using mobile IDEs,

00:23:26.920 --> 00:23:30.040
console in distribution,
to develop easier,

00:23:30.040 --> 00:23:34.950
have higher quality apps,
and to grow adoption.

00:23:34.950 --> 00:23:38.150
We're going to start with
foundations and Kotlin.

00:23:38.150 --> 00:23:40.850
Throughout, I wanted
you to hear from some

00:23:40.850 --> 00:23:44.314
of the people who have been
instrumental in these projects.

00:23:44.314 --> 00:23:45.980
So we're going to
start with someone who

00:23:45.980 --> 00:23:48.600
was key in the Kotlin decision.

00:23:48.600 --> 00:23:50.240
He's a huge
contributor to Android,

00:23:50.240 --> 00:23:52.220
both while he was
in the community,

00:23:52.220 --> 00:23:53.720
now on the Google team.

00:23:53.720 --> 00:23:56.804
It's a privilege to turn
things over to Jake Wharton.

00:23:56.804 --> 00:23:57.788
[MUSIC PLAYING]

00:23:57.788 --> 00:24:00.740
[APPLAUSE]

00:24:05.660 --> 00:24:07.210
JAKE WHARTON: Hey, everyone.

00:24:07.210 --> 00:24:07.970
So I'm Jake.

00:24:07.970 --> 00:24:10.830
I'm part of the team working
on Kotlin for Android.

00:24:10.830 --> 00:24:13.030
And it's been 18 months
since Steph was onstage

00:24:13.030 --> 00:24:14.780
at Google I/O just
down the road from here

00:24:14.780 --> 00:24:16.550
announcing that Kotlin
would be supported

00:24:16.550 --> 00:24:18.770
as a new first-class language.

00:24:18.770 --> 00:24:21.730
So something that had never been
done in the history of Android.

00:24:21.730 --> 00:24:24.589
But based on positive feedback
from developers like you

00:24:24.589 --> 00:24:26.630
and the growing adoption
that we've seen in apps,

00:24:26.630 --> 00:24:29.780
it's clear that this
was the right choice.

00:24:29.780 --> 00:24:31.670
According to GitHub's
yearly stats,

00:24:31.670 --> 00:24:34.040
Kotlin is the number one
fastest-growing language

00:24:34.040 --> 00:24:36.450
in terms of contributors.

00:24:36.450 --> 00:24:38.330
Stack Overflow's
yearly survey places

00:24:38.330 --> 00:24:40.940
Kotlin as number two
most-loved programming language

00:24:40.940 --> 00:24:43.060
by those who participated.

00:24:43.060 --> 00:24:46.940
For Android, 46% of
pro Android developers

00:24:46.940 --> 00:24:49.760
are now using Kotlin
to build their apps.

00:24:49.760 --> 00:24:51.890
This was according to a
survey of those visiting

00:24:51.890 --> 00:24:54.470
developer.android.com.

00:24:54.470 --> 00:24:59.730
In October, we had 118,000
seven-day active projects using

00:24:59.730 --> 00:25:01.320
Kotlin and Android Studio.

00:25:01.320 --> 00:25:04.710
This is based on those who
opt in to reporting analytics.

00:25:04.710 --> 00:25:08.430
That's a 10x increase from
the numbers last year.

00:25:08.430 --> 00:25:10.150
Now when Kotlin
support was announced,

00:25:10.150 --> 00:25:12.358
there already were a bunch
of apps that were using it

00:25:12.358 --> 00:25:13.190
in the Play Store.

00:25:13.190 --> 00:25:16.270
And that group continues to
grow and includes new apps

00:25:16.270 --> 00:25:20.880
like WeChat, Amazon
Kindle, and Twitter.

00:25:20.880 --> 00:25:23.140
Just prior to Google
I/O this year,

00:25:23.140 --> 00:25:26.144
the Kotlin language moved
into the Kotlin Foundation.

00:25:26.144 --> 00:25:28.060
And we're fortunate to
partner with JetBrains,

00:25:28.060 --> 00:25:30.460
who spent a tremendous
amount of resources

00:25:30.460 --> 00:25:32.680
on improving the
language itself.

00:25:32.680 --> 00:25:34.870
Just last week, they
released the newest version

00:25:34.870 --> 00:25:39.100
of Kotlin, 1.3, with new
language features, APIs,

00:25:39.100 --> 00:25:42.480
bug fixes, and
performance improvements.

00:25:42.480 --> 00:25:45.959
For example, inline classes,
which, in most cases,

00:25:45.959 --> 00:25:47.750
don't actually allocate
like a normal class

00:25:47.750 --> 00:25:49.130
would unless they're boxed.

00:25:49.130 --> 00:25:52.460
For constrained
devices that we target,

00:25:52.460 --> 00:25:55.220
avoiding allocation while
still retaining type safety

00:25:55.220 --> 00:25:57.086
is a big one.

00:25:57.086 --> 00:25:59.320
The Kotlin Standard
Library now includes

00:25:59.320 --> 00:26:03.620
a set of unsigned numbers,
such as uint, ubyte, and ulong.

00:26:03.620 --> 00:26:08.055
And these are built using
that inline class feature.

00:26:08.055 --> 00:26:11.790
And in addition to Kotlin code
targeting Android or the JVM,

00:26:11.790 --> 00:26:16.080
you can now target JavaScript
or now Native code as well.

00:26:16.080 --> 00:26:18.840
This unlocks the possibility of
reusing parts of your code base

00:26:18.840 --> 00:26:21.260
on more platforms.

00:26:21.260 --> 00:26:23.930
And finally, the long-awaited
coroutine support

00:26:23.930 --> 00:26:27.140
is now stable in 1.3, which
is a lighter-weight version

00:26:27.140 --> 00:26:28.430
of threading.

00:26:28.430 --> 00:26:30.860
The language and library
support for coroutines

00:26:30.860 --> 00:26:34.400
combine and simplify how you
do asynchronous operations

00:26:34.400 --> 00:26:37.400
or perform concurrent
work, things that are

00:26:37.400 --> 00:26:39.850
essential to every Android app.

00:26:39.850 --> 00:26:42.710
And, as I'm sure you are,
we're looking forward

00:26:42.710 --> 00:26:45.350
to using these new Kotlin
features in the Kotlin-specific

00:26:45.350 --> 00:26:47.294
APIs that we provide.

00:26:47.294 --> 00:26:48.710
So far, the majority
of those have

00:26:48.710 --> 00:26:50.450
been through the
Kotlin extensions,

00:26:50.450 --> 00:26:53.750
which are part of Jetpack.

00:26:53.750 --> 00:26:56.960
This year at I/O, we announced
that the Kotlin extensions were

00:26:56.960 --> 00:26:59.900
expanding from just
core KTX to seven KTX

00:26:59.900 --> 00:27:02.870
libraries for common artifacts
that you use from Jetpack,

00:27:02.870 --> 00:27:05.700
like Fragments,
SQLite, Lifecycle.

00:27:05.700 --> 00:27:09.470
And all of these are now
available as stable releases.

00:27:09.470 --> 00:27:12.770
Since then, though, as new APIs
are added to existing libraries

00:27:12.770 --> 00:27:15.260
or new libraries are
added to Jetpack,

00:27:15.260 --> 00:27:18.510
the KTX extensions are
being built alongside.

00:27:18.510 --> 00:27:22.220
So things like navigation,
paging, and Slices

00:27:22.220 --> 00:27:24.650
are all new libraries
that each have extensions

00:27:24.650 --> 00:27:26.980
being built with them.

00:27:26.980 --> 00:27:29.830
And we're starting to go beyond
just providing extensions.

00:27:29.830 --> 00:27:32.947
So Lifecycle is going to
support a coroutine scope

00:27:32.947 --> 00:27:34.780
so you can easily launch
coroutines and have

00:27:34.780 --> 00:27:36.310
automatic cancellation.

00:27:36.310 --> 00:27:39.010
And WorkManager will be
offering a work object

00:27:39.010 --> 00:27:40.530
based on coroutines.

00:27:40.530 --> 00:27:42.940
And we're always on the
lookout for integrations

00:27:42.940 --> 00:27:48.270
like these that provide
more close interoperability.

00:27:48.270 --> 00:27:51.920
If you want to get started with,
say, coroutines on Android,

00:27:51.920 --> 00:27:54.200
there's a new code lab
that you can work through.

00:27:54.200 --> 00:27:56.960
It covers performing
asynchronous work, testing

00:27:56.960 --> 00:28:00.870
of coroutines, and the
WorkManager integration.

00:28:00.870 --> 00:28:03.180
Since Kotlin isn't just a
language for building Android

00:28:03.180 --> 00:28:06.900
apps, Google Cloud Platform
now offers samples, tutorials,

00:28:06.900 --> 00:28:09.607
and their own code lab so you
can build your application back

00:28:09.607 --> 00:28:11.940
end using Kotlin.

00:28:11.940 --> 00:28:14.560
And finally, new
Udacity courses are

00:28:14.560 --> 00:28:17.590
available in preview today,
which cover app development

00:28:17.590 --> 00:28:19.130
entirely in Kotlin.

00:28:19.130 --> 00:28:23.320
And they use both Jetpack and
popular third-party libraries.

00:28:23.320 --> 00:28:25.360
To speak more about
Jetpack as a whole,

00:28:25.360 --> 00:28:27.110
I'd like to turn it
over to Romain Guy.

00:28:27.110 --> 00:28:28.523
[MUSIC PLAYING]

00:28:28.523 --> 00:28:31.349
[APPLAUSE]

00:28:34.655 --> 00:28:35.280
ROMAIN GUY: Hi.

00:28:35.280 --> 00:28:35.820
I'm Romain.

00:28:35.820 --> 00:28:37.490
I work on the Androids
framework team.

00:28:37.490 --> 00:28:38.880
So a few months
ago, we announced

00:28:38.880 --> 00:28:41.650
Jetpack, the next generation
of Android tools and APIs

00:28:41.650 --> 00:28:44.465
to accelerate Android
application development.

00:28:44.465 --> 00:28:46.960
Jetpack builds on the
foundation that we laid out

00:28:46.960 --> 00:28:49.390
with support library and net
architectural components.

00:28:49.390 --> 00:28:51.700
But we also add new tools
and libraries to the mix.

00:28:51.700 --> 00:28:53.680
Jetpack is about
writing less code

00:28:53.680 --> 00:28:55.425
and targeting more devices.

00:28:55.425 --> 00:28:59.320
All Jetpack libraries
are backwards compatible

00:28:59.320 --> 00:29:03.050
and target up to 95% of
existing Android devices.

00:29:03.050 --> 00:29:05.260
We first started running
early-access programs

00:29:05.260 --> 00:29:08.450
on architectural components
about two years ago,

00:29:08.450 --> 00:29:11.900
and our first public beta was 18
months ago at Google I/O 2017.

00:29:11.900 --> 00:29:14.550
Today, out of the top
1,000 applications

00:29:14.550 --> 00:29:16.900
in active development
on Play Store,

00:29:16.900 --> 00:29:19.480
798 are already using Jetpack.

00:29:19.480 --> 00:29:22.830
This is up from about 560
at Google I/O this year.

00:29:22.830 --> 00:29:24.790
Jetpack is used in
many applications,

00:29:24.790 --> 00:29:28.630
like New York Times, KakaoTalk,
Duolingo, Evernote, Uber,

00:29:28.630 --> 00:29:32.680
SoundCloud, Pandora, Twitter,
Dropbox, Viber, and many more.

00:29:32.680 --> 00:29:37.690
Apps built all over the world in
India, Germany, France, Korea,

00:29:37.690 --> 00:29:41.290
Israel, China, the US, and more.

00:29:41.290 --> 00:29:43.540
Also, at I/O, we
announced new libraries

00:29:43.540 --> 00:29:47.350
for paging, navigation,
WorkManager, Slices, and Kotlin

00:29:47.350 --> 00:29:49.291
extensions we just talked about.

00:29:49.291 --> 00:29:51.790
Although these are still in the
early phases of development,

00:29:51.790 --> 00:29:55.150
they are already being used
in over 38,000 applications

00:29:55.150 --> 00:29:56.240
worldwide.

00:29:56.240 --> 00:29:58.497
And the evolution of
those AndroidX libraries

00:29:58.497 --> 00:30:00.580
is driven in large part
by the feedback we receive

00:30:00.580 --> 00:30:01.667
from you, the community.

00:30:01.667 --> 00:30:03.250
But we know that
many of you have long

00:30:03.250 --> 00:30:06.790
expressed a desire to do
more than simply be feedback.

00:30:06.790 --> 00:30:10.720
So that's why, this summer, we
moved all AndroidX development

00:30:10.720 --> 00:30:11.980
to public airway speed.

00:30:11.980 --> 00:30:15.250
You can now see features and bug
fixes implemented in real-time,

00:30:15.250 --> 00:30:18.040
and you can contribute to any
of the AndroidX libraries.

00:30:18.040 --> 00:30:21.740
All you need is Android
Studio and the public SDK.

00:30:21.740 --> 00:30:23.830
And we also want to
use AOSP as a place

00:30:23.830 --> 00:30:26.690
where we can experiment
and prototype new ideas.

00:30:26.690 --> 00:30:29.470
And our hope is that early
access to Android features

00:30:29.470 --> 00:30:32.950
will help us refine and help
shape even better libraries.

00:30:32.950 --> 00:30:34.600
So please join us.

00:30:34.600 --> 00:30:38.190
With Jetpack, we introduced
two architectural component

00:30:38.190 --> 00:30:40.640
libraries-- navigation
and WorkManager.

00:30:40.640 --> 00:30:42.990
The navigation architectural
component library

00:30:42.990 --> 00:30:46.020
offers a simplified way to
implement Android's navigation

00:30:46.020 --> 00:30:49.200
principles in your application
using a single activity.

00:30:49.200 --> 00:30:51.240
This solution gives you
consistent animations

00:30:51.240 --> 00:30:54.090
across devices, atomic
navigation operations,

00:30:54.090 --> 00:30:56.790
and easier animated transitions.

00:30:56.790 --> 00:30:59.910
WorkManager makes it easy
to perform background tasks

00:30:59.910 --> 00:31:01.680
in the most efficient
manner possible.

00:31:01.680 --> 00:31:03.221
You do not need to
wonder whether you

00:31:03.221 --> 00:31:06.780
should be using JobDispatcher,
JobScheduler, or AlarmManager.

00:31:06.780 --> 00:31:09.270
WorkManager will
figure out which

00:31:09.270 --> 00:31:11.460
is the best solution
given the application

00:31:11.460 --> 00:31:13.610
state and the device API level.

00:31:13.610 --> 00:31:16.510
These two libraries will
become beta later this month.

00:31:16.510 --> 00:31:18.990
So if you have any
feedback about those APIs,

00:31:18.990 --> 00:31:20.970
the Android teams are
here today and tomorrow.

00:31:20.970 --> 00:31:24.440
So now is the time to
give us that feedback.

00:31:24.440 --> 00:31:27.240
We also introduced
Android Slices, a new way

00:31:27.240 --> 00:31:29.090
to bring users to
your applications.

00:31:29.090 --> 00:31:31.950
Slices are like a [INAUDIBLE]
to surface content outside

00:31:31.950 --> 00:31:32.920
of your application.

00:31:32.920 --> 00:31:35.640
It's going to help users
book a flight, play video,

00:31:35.640 --> 00:31:37.640
call a ride, and so on.

00:31:37.640 --> 00:31:40.780
Slices are another example where
we want to be open very early,

00:31:40.780 --> 00:31:43.440
but we want to take the
time to get things right.

00:31:43.440 --> 00:31:45.830
After working with several
of you on the APIs,

00:31:45.830 --> 00:31:49.830
we're moving into public
EAP at the end of the month

00:31:49.830 --> 00:31:52.560
with [? Doist, ?] KAYAK,
and many other applications.

00:31:52.560 --> 00:31:55.140
We will run experiments
surfacing Slices

00:31:55.140 --> 00:31:56.410
in Google search results.

00:31:56.410 --> 00:31:58.159
And there's a session
today with more info

00:31:58.159 --> 00:32:01.980
on best practices about building
Slices, so please check it out.

00:32:01.980 --> 00:32:03.750
Our team has also
been hard at work

00:32:03.750 --> 00:32:07.470
bringing numerous improvements
to existing AndroidX libraries.

00:32:07.470 --> 00:32:09.790
For instance, in Paging
2.0, you have more control

00:32:09.790 --> 00:32:12.720
over memory usage, and it offers
better Kotlin integration.

00:32:12.720 --> 00:32:16.260
Room 2.1 is our biggest
feature launch since 1.0.

00:32:16.260 --> 00:32:18.930
We added full-text search
tables, database views, better

00:32:18.930 --> 00:32:21.626
[INAUDIBLE] in the
two-value integration.

00:32:21.626 --> 00:32:24.270
Data binding 3.2
brings much faster,

00:32:24.270 --> 00:32:26.850
multimodule compilation, and
we expect further improvements

00:32:26.850 --> 00:32:28.080
in 3.4.

00:32:28.080 --> 00:32:32.010
And, finally, ViewModel
let's you save state in AOSP.

00:32:32.010 --> 00:32:33.810
One thing you told
us worked pretty well

00:32:33.810 --> 00:32:36.240
was deeply integrating
libraries and tools in Android.

00:32:36.240 --> 00:32:38.430
[INAUDIBLE] was one example.

00:32:38.430 --> 00:32:40.580
But a new great example
of this is navigation.

00:32:40.580 --> 00:32:44.230
So in Android Studio 3.3, we
have a new navigation editor

00:32:44.230 --> 00:32:48.810
to help you easily understand,
visualize, and build navigation

00:32:48.810 --> 00:32:50.140
flow in your application.

00:32:50.140 --> 00:32:53.416
So let's go straight to a
demo of the navigation editor.

00:32:53.416 --> 00:32:55.460
So here, I have an
application that

00:32:55.460 --> 00:32:56.710
was already partially written.

00:32:56.710 --> 00:32:58.626
And you can already see
the flow of navigation

00:32:58.626 --> 00:33:00.890
through the different
screens of the application.

00:33:00.890 --> 00:33:04.470
So if I run the demo
on the emulator--

00:33:04.470 --> 00:33:07.390
and we wait for
Gradle to do its job--

00:33:07.390 --> 00:33:08.912
I can click on leaderboards.

00:33:08.912 --> 00:33:10.120
I can see different profiles.

00:33:10.120 --> 00:33:13.080
But if I click on the
profile, nothing happens.

00:33:13.080 --> 00:33:16.330
I can go back to the
editor, add a new screen--

00:33:16.330 --> 00:33:20.800
so I just select the Fragments
to view user profiles.

00:33:20.800 --> 00:33:24.940
And then I link the leaderboard
screen to the user profile.

00:33:24.940 --> 00:33:27.980
I also need to add [INAUDIBLE]
for the selected user.

00:33:30.968 --> 00:33:37.550
It's a string and
just rerun the app.

00:33:37.550 --> 00:33:40.420
Wait for Gradle.

00:33:40.420 --> 00:33:41.870
The tools team
will probably want

00:33:41.870 --> 00:33:42.994
to chat with me after this.

00:33:42.994 --> 00:33:45.080
[LAUGHTER]

00:33:45.080 --> 00:33:47.910
We go back to leaderboards, and
if I click on the profile now,

00:33:47.910 --> 00:33:49.362
I can see the profile.

00:33:49.362 --> 00:33:51.570
But as I go back and forth
between those two screens,

00:33:51.570 --> 00:33:54.240
you can see that there are no
animations, no transitions.

00:33:54.240 --> 00:33:57.150
So if I go back to the editor
and I select this navigation

00:33:57.150 --> 00:34:00.370
flow, I can choose
which animations I want.

00:34:00.370 --> 00:34:05.300
So I'm going to choose the
enter animations and the exit

00:34:05.300 --> 00:34:05.990
animations.

00:34:08.978 --> 00:34:14.239
And now, if I reruns
the app one last time--

00:34:14.239 --> 00:34:16.590
go back to leaderboards,
and now you

00:34:16.590 --> 00:34:19.886
can see the sliding transition.

00:34:19.886 --> 00:34:21.719
So if you want to play
with the navigation--

00:34:21.719 --> 00:34:24.129
[APPLAUSE]

00:34:25.656 --> 00:34:27.989
So if you want to play with
the navigation [INAUDIBLE],,

00:34:27.989 --> 00:34:30.530
all you have to do is download
Android Studio from the better

00:34:30.530 --> 00:34:32.920
channel today and get started.

00:34:32.920 --> 00:34:35.429
And as we expand the Android
Jetpack libraries and tools

00:34:35.429 --> 00:34:38.100
together, we're focused on your
feedback about the [INAUDIBLE]

00:34:38.100 --> 00:34:39.280
that you encounter.

00:34:39.280 --> 00:34:40.540
So please let us know.

00:34:40.540 --> 00:34:42.210
We want to know
about animations, UI,

00:34:42.210 --> 00:34:44.010
themes and styles,
camera, anything else.

00:34:44.010 --> 00:34:44.760
We are here today.

00:34:44.760 --> 00:34:45.635
We are here tomorrow.

00:34:45.635 --> 00:34:47.556
You can tell us what
you need from us.

00:34:47.556 --> 00:34:49.139
And with that, I
would to turn it over

00:34:49.139 --> 00:34:52.300
to Karen, who will let you know
about our plans for Android

00:34:52.300 --> 00:34:52.800
Studio.

00:34:52.800 --> 00:34:53.299
Thanks.

00:34:53.299 --> 00:34:54.190
[MUSIC PLAYING]

00:34:54.190 --> 00:34:57.010
[APPLAUSE]

00:34:58.819 --> 00:34:59.360
KAREN NG: Hi.

00:34:59.360 --> 00:35:00.030
I'm Karen.

00:35:00.030 --> 00:35:02.010
I'm on the team that builds
Android Studio and Android

00:35:02.010 --> 00:35:02.510
Jetpack.

00:35:02.510 --> 00:35:04.110
So Romain and Jake
just talked to you

00:35:04.110 --> 00:35:06.010
through the language
and library experiences.

00:35:06.010 --> 00:35:07.426
To build on top
of that, I'm going

00:35:07.426 --> 00:35:08.800
to talk to you
about productivity

00:35:08.800 --> 00:35:10.640
and what we're doing
with Android Studio.

00:35:10.640 --> 00:35:13.230
For three two, we
asked ourselves,

00:35:13.230 --> 00:35:16.170
what can we do to have
a meaningful impact

00:35:16.170 --> 00:35:17.850
on productivity,
and where do you

00:35:17.850 --> 00:35:19.560
spend the most of your time?

00:35:19.560 --> 00:35:20.980
We heard loud and clear--

00:35:20.980 --> 00:35:23.610
thanks, Romain-- that
it's build speed.

00:35:23.610 --> 00:35:26.130
It's something that
you do every day.

00:35:26.130 --> 00:35:27.740
He set me up.

00:35:27.740 --> 00:35:30.090
It's something you do every
day, multiple times a day.

00:35:30.090 --> 00:35:31.589
And every minute
that you're waiting

00:35:31.589 --> 00:35:34.770
for that build to finish, we
know it's a minute wasted.

00:35:34.770 --> 00:35:37.750
So we took a deep look at our
data to see what was going on.

00:35:37.750 --> 00:35:40.000
And we actually found
two things to be true.

00:35:40.000 --> 00:35:42.425
The first thing we found
was that build speeds

00:35:42.425 --> 00:35:46.180
in our opt-in data is actually
getting slower over time.

00:35:46.180 --> 00:35:49.200
The second thing we found is
that new releases of Studio

00:35:49.200 --> 00:35:51.390
are actually
improving build times.

00:35:51.390 --> 00:35:54.180
In the last year and a half,
we saw build speeds get faster

00:35:54.180 --> 00:35:56.640
by 42% on fresh projects.

00:35:56.640 --> 00:36:00.900
So something's going on, and
we had to take a deeper look.

00:36:00.900 --> 00:36:03.320
Code bases are just
getting larger.

00:36:03.320 --> 00:36:05.800
Custom plugins are
adding to build times.

00:36:05.800 --> 00:36:08.990
Annotation processors
that people use

00:36:08.990 --> 00:36:12.320
are negating the benefit
of incremental build.

00:36:12.320 --> 00:36:14.900
New languages could add
to compilation times.

00:36:14.900 --> 00:36:17.180
And if you have many
modules, resource management

00:36:17.180 --> 00:36:18.620
can add time as well.

00:36:18.620 --> 00:36:20.660
The ecosystem and
project growth are

00:36:20.660 --> 00:36:23.120
kind of outgrowing our
build improvements.

00:36:23.120 --> 00:36:25.580
We are committed to
making build faster.

00:36:25.580 --> 00:36:29.210
You'll find a large part of the
team on build here this week

00:36:29.210 --> 00:36:30.710
to listen and learn
and to tell you

00:36:30.710 --> 00:36:32.120
more about what we're doing.

00:36:32.120 --> 00:36:35.512
We want to get this right, and
we need your help to do it.

00:36:35.512 --> 00:36:38.030
We're giving ourselves
stretch goals.

00:36:38.030 --> 00:36:39.620
We're working on
attribution tools

00:36:39.620 --> 00:36:41.600
to help you better
understand what's impacting

00:36:41.600 --> 00:36:43.550
your build in your projects.

00:36:43.550 --> 00:36:48.460
And we're making Gradle and
our first-party plugins faster.

00:36:48.460 --> 00:36:49.980
We also know that
iteration speed

00:36:49.980 --> 00:36:51.549
is super important
to app development

00:36:51.549 --> 00:36:53.715
because it's all about
trying things out, iterating,

00:36:53.715 --> 00:36:56.730
and then failing fast
and then doing it again.

00:36:56.730 --> 00:36:59.610
With Instant Run, we want
to fix what we started

00:36:59.610 --> 00:37:01.620
and quickly apply
changes without losing

00:37:01.620 --> 00:37:03.090
the state of your app.

00:37:03.090 --> 00:37:06.330
Part of that apply changes
is around deployment times.

00:37:06.330 --> 00:37:07.952
So we know they
play a huge part,

00:37:07.952 --> 00:37:10.410
and we've just shipped an update
in Android Pie where we're

00:37:10.410 --> 00:37:13.530
seeing a big difference in
real-world and sample projects

00:37:13.530 --> 00:37:15.390
between Pie and [INAUDIBLE].

00:37:15.390 --> 00:37:19.060
If you're using USB
3.0 versus USB 2.0,

00:37:19.060 --> 00:37:23.494
we've seen some times that seem
close to that emulator speed.

00:37:23.494 --> 00:37:25.660
Please let us know if you're
interested in giving us

00:37:25.660 --> 00:37:28.000
early feedback to get
apply changes right.

00:37:28.000 --> 00:37:30.532
We're starting an EAP very soon.

00:37:30.532 --> 00:37:32.400
That takes us to emulators.

00:37:32.400 --> 00:37:34.530
Because we want to make
iteration speed faster,

00:37:34.530 --> 00:37:36.840
we're investing in
emulators for every OS.

00:37:36.840 --> 00:37:39.150
At I/O, we showed
the ability to save

00:37:39.150 --> 00:37:41.820
a snapshot of your current
state of your emulator and boot

00:37:41.820 --> 00:37:46.060
up and switch to any snapshot
in under two seconds.

00:37:46.060 --> 00:37:47.890
Productivity is
also about making

00:37:47.890 --> 00:37:49.600
the hard problems easier.

00:37:49.600 --> 00:37:52.330
We heard that it's
really hard to see

00:37:52.330 --> 00:37:55.480
how your app is impacting
battery life on the phone.

00:37:55.480 --> 00:37:58.090
So we built the new
energy profiler in 3.2

00:37:58.090 --> 00:38:01.270
You can now see WakeLocks,
visualize the estimated battery

00:38:01.270 --> 00:38:04.690
usage of system components, and
inspect background events that

00:38:04.690 --> 00:38:07.410
contribute to battery drain.

00:38:07.410 --> 00:38:09.770
The new beta for
Android Studio 3.3

00:38:09.770 --> 00:38:14.300
is available today and was
just released moments ago.

00:38:14.300 --> 00:38:17.160
We know that in order for
an IDE to be delightful

00:38:17.160 --> 00:38:19.980
and to keep you productive,
it has to be not just stable,

00:38:19.980 --> 00:38:23.310
but it has to be rock-solid
stable because of the number

00:38:23.310 --> 00:38:25.050
of hours that you spend there.

00:38:25.050 --> 00:38:27.450
The main focus for
our next few releases

00:38:27.450 --> 00:38:30.150
will be quality, which we're
calling Project Marble,

00:38:30.150 --> 00:38:33.240
reducing the number of crashes,
hangs, and memory leaks,

00:38:33.240 --> 00:38:36.060
fixing user-impacting bugs, and
investing in our infrastructure

00:38:36.060 --> 00:38:37.380
and tools.

00:38:37.380 --> 00:38:39.660
We know that sometimes
we've missed memory leaks

00:38:39.660 --> 00:38:41.350
before we shipped.

00:38:41.350 --> 00:38:44.010
So we're building tools to help
detect those leaks before they

00:38:44.010 --> 00:38:46.000
even happen.

00:38:46.000 --> 00:38:48.370
Dave mentioned how
millions of Android apps

00:38:48.370 --> 00:38:49.690
already run on Chromebooks.

00:38:49.690 --> 00:38:52.180
We're bringing the full
power of Android Studio

00:38:52.180 --> 00:38:56.474
as an officially supported IDE
to Chrome OS early next year.

00:38:56.474 --> 00:38:58.390
You'd like to try it
today, you can learn more

00:38:58.390 --> 00:39:00.492
at developer.android.com.

00:39:00.492 --> 00:39:02.200
Now, I'd like to invite
Matt Henderson up

00:39:02.200 --> 00:39:04.180
to share more about app
size and what we're doing

00:39:04.180 --> 00:39:05.346
with the Android App Bundle.

00:39:05.346 --> 00:39:06.660
[MUSIC PLAYING]

00:39:06.660 --> 00:39:09.540
[APPLAUSE]

00:39:10.500 --> 00:39:12.850
MATT HENDERSON: Thanks,
Karen, and hi, everybody.

00:39:12.850 --> 00:39:16.750
So I work on developer
tools like the Play console,

00:39:16.750 --> 00:39:19.240
and I wanted to start by
talking about app size.

00:39:19.240 --> 00:39:22.090
Apps have grown
dramatically in size.

00:39:22.090 --> 00:39:27.880
The average is up
five times since 2012.

00:39:27.880 --> 00:39:31.300
But larger size carries a cost.

00:39:31.300 --> 00:39:34.420
It reduces the install
conversion rate,

00:39:34.420 --> 00:39:37.314
and it increases uninstall rate.

00:39:37.314 --> 00:39:41.890
Now, you told us that using
multi APK to configure

00:39:41.890 --> 00:39:47.020
different app versions was a
painful way to reduce app size.

00:39:47.020 --> 00:39:51.730
So the Android App Bundle
makes it much simpler.

00:39:51.730 --> 00:39:54.770
Using the App Bundle,
we reduce size

00:39:54.770 --> 00:39:58.670
by generating an APK for
the languages, the screen

00:39:58.670 --> 00:40:03.560
density, the CPU architecture
that each user needs.

00:40:03.560 --> 00:40:05.380
And it's working.

00:40:05.380 --> 00:40:08.600
While size reductions
vary, on average,

00:40:08.600 --> 00:40:12.680
apps are seeing a
35% reduction in size

00:40:12.680 --> 00:40:16.680
compared to a universal APK.

00:40:16.680 --> 00:40:22.090
Now, with the recent stable
release of Android Studio 3.2,

00:40:22.090 --> 00:40:25.310
app bundles in production
have taken off.

00:40:25.310 --> 00:40:27.410
They're up 10 times.

00:40:27.410 --> 00:40:31.100
Thousands of developers
have embraced App Bundles,

00:40:31.100 --> 00:40:33.350
and the number of
bundles in production

00:40:33.350 --> 00:40:36.860
now total billions of installs.

00:40:36.860 --> 00:40:39.950
And Google's apps,
they're switching too.

00:40:39.950 --> 00:40:44.330
YouTube, Google Maps,
Photos, Google News

00:40:44.330 --> 00:40:47.780
are all in production
with App Bundles today.

00:40:47.780 --> 00:40:52.600
Photos, for example,
is now 40% smaller.

00:40:52.600 --> 00:40:57.290
So we're really excited about
the App Bundles' potential.

00:40:57.290 --> 00:41:02.160
We sign APKs for
delivery to the end user.

00:41:02.160 --> 00:41:04.620
This is highly secure.

00:41:04.620 --> 00:41:08.690
We protect your key
in the same memory,

00:41:08.690 --> 00:41:12.420
in the same storage we
protect Google's own keys.

00:41:12.420 --> 00:41:15.220
This signing step is critical.

00:41:15.220 --> 00:41:18.210
It allows us to process
the App Bundle in order

00:41:18.210 --> 00:41:21.270
to generate the optimized APKs.

00:41:21.270 --> 00:41:24.090
And this, in turn,
allows you to benefit

00:41:24.090 --> 00:41:29.500
from additional optimizations in
the future, starting right now.

00:41:29.500 --> 00:41:32.820
So I'm happy to announce that
the App Bundle now supports

00:41:32.820 --> 00:41:35.400
uncompressed Native libraries.

00:41:35.400 --> 00:41:39.240
This utilizes an existing
Android platform feature

00:41:39.240 --> 00:41:42.550
that was little used
because, in the past,

00:41:42.550 --> 00:41:45.180
you would have had
to use multi APK

00:41:45.180 --> 00:41:49.000
for pre-M and post-M devices.

00:41:49.000 --> 00:41:51.140
Now, we just do it for you.

00:41:51.140 --> 00:41:53.880
With no additional
developer work needed,

00:41:53.880 --> 00:41:57.210
the App Bundle now makes
apps using Native libraries

00:41:57.210 --> 00:42:00.540
an average of 8%
smaller to download

00:42:00.540 --> 00:42:06.350
and 16% smaller on
disc for MPlus devices.

00:42:06.350 --> 00:42:11.160
By adding dynamic feature
modules to your app bundle,

00:42:11.160 --> 00:42:14.370
you can load any app
functionality on demand

00:42:14.370 --> 00:42:16.960
instead of at install time.

00:42:16.960 --> 00:42:21.060
For example, you don't need
to send that same big feature

00:42:21.060 --> 00:42:24.050
to 100% of your users
if it's only going

00:42:24.050 --> 00:42:26.810
to be used by 10% of them.

00:42:26.810 --> 00:42:30.060
And you don't need to
keep big features that

00:42:30.060 --> 00:42:32.010
are only used once.

00:42:32.010 --> 00:42:35.910
Dynamic features can be
installed and uninstalled

00:42:35.910 --> 00:42:39.150
dynamically when your
app requests them,

00:42:39.150 --> 00:42:43.680
or you can choose to defer
installing to a later time

00:42:43.680 --> 00:42:47.180
when the app goes
to the background.

00:42:47.180 --> 00:42:50.570
Facebook was one of
our launch partners,

00:42:50.570 --> 00:42:53.000
and they are using
dynamic features

00:42:53.000 --> 00:42:55.220
in production in the
main Facebook app

00:42:55.220 --> 00:42:57.400
and in Facebook Lite.

00:42:57.400 --> 00:43:00.420
For example, card
scanning is a feature

00:43:00.420 --> 00:43:04.350
that only a small percentage of
Facebook's user base is using,

00:43:04.350 --> 00:43:06.810
so moving it to
a dynamic feature

00:43:06.810 --> 00:43:09.990
avoids it taking up
almost two megabytes

00:43:09.990 --> 00:43:13.600
on each user's device.

00:43:13.600 --> 00:43:18.340
Within an App Bundle,
installed and instant apps

00:43:18.340 --> 00:43:22.540
can share the same base module
and the same dynamic feature

00:43:22.540 --> 00:43:23.620
modules.

00:43:23.620 --> 00:43:27.370
So separating out functionality
as a dynamic feature

00:43:27.370 --> 00:43:30.490
is a great way to get
your base small enough

00:43:30.490 --> 00:43:34.328
to offer an instant
app experience.

00:43:34.328 --> 00:43:36.630
Now you can stop
building and testing

00:43:36.630 --> 00:43:40.680
dynamic features using
Android Studio 3.2 today,

00:43:40.680 --> 00:43:44.070
and you can join our beta and
become white-listed to publish

00:43:44.070 --> 00:43:45.800
them to production.

00:43:45.800 --> 00:43:49.180
Now, I'd like to
invite Aurash Mahbod up

00:43:49.180 --> 00:43:51.400
to tell us more
about app updates.

00:43:51.400 --> 00:43:53.900
[MUSIC PLAYING]

00:43:53.900 --> 00:43:55.400
[APPLAUSE]

00:43:55.400 --> 00:43:58.900
AURASH MAHBOD: Good job.

00:43:58.900 --> 00:43:59.900
Awesome.

00:43:59.900 --> 00:44:00.940
Thanks, Matt.

00:44:00.940 --> 00:44:03.060
So, yeah, we've
heard your feedback,

00:44:03.060 --> 00:44:04.800
that you'd like more
control to ensure

00:44:04.800 --> 00:44:07.049
that users are running the
latest and greatest version

00:44:07.049 --> 00:44:08.310
of your app.

00:44:08.310 --> 00:44:11.590
To address this, I'm excited
to announce the Google Play

00:44:11.590 --> 00:44:13.456
in-app update API.

00:44:13.456 --> 00:44:15.900
The update API has two variants.

00:44:15.900 --> 00:44:19.020
The first is an
immediate update flow

00:44:19.020 --> 00:44:21.921
where the user is presented
with a full-screen experience.

00:44:21.921 --> 00:44:24.420
They can accept the update,
have it downloaded and installed

00:44:24.420 --> 00:44:26.442
immediately before proceeding.

00:44:26.442 --> 00:44:28.650
Many of you have already
implemented similar variants

00:44:28.650 --> 00:44:30.270
of this in your app.

00:44:30.270 --> 00:44:32.700
But this new streamlined
implementation

00:44:32.700 --> 00:44:36.108
is less error prone and
super easy to integrate.

00:44:36.108 --> 00:44:39.430
Next is flexible updates.

00:44:39.430 --> 00:44:42.190
Flexible updates are really
cool because they actually

00:44:42.190 --> 00:44:46.000
allow the update experience to
be integrated into your app,

00:44:46.000 --> 00:44:48.080
and it feels far
more customized.

00:44:48.080 --> 00:44:50.410
As an example, Google
Chrome has opted

00:44:50.410 --> 00:44:54.016
to nudge users to update
with a small affordance.

00:44:54.016 --> 00:44:57.016
If the user accepts that
update, the download

00:44:57.016 --> 00:44:58.640
happens in the
background, and the user

00:44:58.640 --> 00:45:00.710
can continue to use your app.

00:45:00.710 --> 00:45:02.780
When the download
is complete, it's

00:45:02.780 --> 00:45:05.720
up to use the developer to
decide if you'd like the update

00:45:05.720 --> 00:45:08.270
to be applied immediately
by presenting an affordance,

00:45:08.270 --> 00:45:09.890
or if you'd simply
like the update

00:45:09.890 --> 00:45:13.781
to be applied the next time
the app is in the background.

00:45:13.781 --> 00:45:15.877
Google Chrome is
testing this now,

00:45:15.877 --> 00:45:17.960
and we're excited to be
expanding the early access

00:45:17.960 --> 00:45:20.850
program coming soon.

00:45:20.850 --> 00:45:24.750
Next, instant apps.

00:45:24.750 --> 00:45:28.750
Instant apps are now available
on over 1.3 billion devices,

00:45:28.750 --> 00:45:32.060
helping more users
discover your apps.

00:45:32.060 --> 00:45:34.340
We've been hard at work on
simplifying the development

00:45:34.340 --> 00:45:36.170
experience for instant apps.

00:45:36.170 --> 00:45:39.380
Earlier this year, we increased
the size limit for instant apps

00:45:39.380 --> 00:45:41.810
from four megabytes
to 10 megabytes.

00:45:41.810 --> 00:45:44.630
And what we found is that
just by using the Android App

00:45:44.630 --> 00:45:46.460
Bundle, many
developers are already

00:45:46.460 --> 00:45:50.170
able to get under that size
limit without additional work.

00:45:50.170 --> 00:45:51.900
Additionally, the
dynamic features

00:45:51.900 --> 00:45:54.300
that Matt mentioned earlier
are also instant compatible,

00:45:54.300 --> 00:45:57.236
so you get two-for-one savings.

00:45:57.236 --> 00:46:00.310
We've also made it possible
to now upload and test

00:46:00.310 --> 00:46:02.970
instant apps of any size.

00:46:02.970 --> 00:46:05.140
This allows you to both
iterate on the user

00:46:05.140 --> 00:46:09.580
experience at the same time
that you're optimizing for size.

00:46:09.580 --> 00:46:12.402
And we've also made
web URLs optional.

00:46:12.402 --> 00:46:13.860
What this means is
that you can now

00:46:13.860 --> 00:46:16.620
just take your existing
Play Store deep link traffic

00:46:16.620 --> 00:46:18.810
and reroute those users
into your instant experience

00:46:18.810 --> 00:46:21.398
automatically.

00:46:21.398 --> 00:46:24.630
And lastly, I'm excited
to announce that today,

00:46:24.630 --> 00:46:27.190
in the Android
Studio 3.3 beta, you

00:46:27.190 --> 00:46:28.840
can now have a
single Android Studio

00:46:28.840 --> 00:46:31.889
project that houses both your
instant and installed apps.

00:46:31.889 --> 00:46:34.180
This dramatically simplifies
the development experience

00:46:34.180 --> 00:46:35.740
for instant apps.

00:46:35.740 --> 00:46:39.070
And additionally, the app bundle
that's emitted by this project

00:46:39.070 --> 00:46:40.870
can be uploaded once
to the Play Developer

00:46:40.870 --> 00:46:43.480
console, dramatically
simplifying release management

00:46:43.480 --> 00:46:44.410
as well.

00:46:44.410 --> 00:46:45.852
We're super excited about it.

00:46:45.852 --> 00:46:47.060
And with that, back to Steph.

00:46:47.060 --> 00:46:49.004
[MUSIC PLAYING]

00:46:49.004 --> 00:46:52.406
[APPLAUSE]

00:46:56.790 --> 00:46:59.310
STEPHANIE CUTHBERTSON:
Android's open source and scale

00:46:59.310 --> 00:47:02.160
means it's incredible to
watch what you're building

00:47:02.160 --> 00:47:04.170
on top of the platform.

00:47:04.170 --> 00:47:10.200
With over two billion devices,
3/4 of a trillion apps

00:47:10.200 --> 00:47:12.600
downloaded every
year, and developers

00:47:12.600 --> 00:47:15.870
in 194 countries, Android's
developer community

00:47:15.870 --> 00:47:17.400
is growing hugely.

00:47:17.400 --> 00:47:19.810
In countries like
India and Brazil,

00:47:19.810 --> 00:47:23.370
we saw it more than double
just in the past few years.

00:47:23.370 --> 00:47:27.422
So we're seeing innovation
on Android worldwide.

00:47:27.422 --> 00:47:30.330
Android's not a conventional
operating system

00:47:30.330 --> 00:47:31.980
in how we work with developers.

00:47:31.980 --> 00:47:35.130
We want to get your input
in our GDE community,

00:47:35.130 --> 00:47:38.160
in open source collaborations,
like the Kotlin Foundation.

00:47:38.160 --> 00:47:40.500
And we want to be
open in new places

00:47:40.500 --> 00:47:42.420
like our medium
developer channel.

00:47:42.420 --> 00:47:45.030
It's by developers
for developers

00:47:45.030 --> 00:47:48.300
to share more technical
behind the scenes.

00:47:48.300 --> 00:47:53.380
Today and tomorrow, about 500
members of the team are here.

00:47:53.380 --> 00:47:56.130
We'll have over 30 sessions
of technical content.

00:47:56.130 --> 00:47:58.560
It's livestreamed
and on YouTube,

00:47:58.560 --> 00:48:00.570
so the whole community
can participate.

00:48:00.570 --> 00:48:03.830
We feel lucky to
be a part of it.

00:48:03.830 --> 00:48:05.610
So that's it for the keynote.

00:48:05.610 --> 00:48:06.390
Thank you.

00:48:06.390 --> 00:48:08.200
I hope you enjoy
Android Dev Summit.

00:48:08.200 --> 00:48:11.550
[MUSIC PLAYING]

