WEBVTT
Kind: captions
Language: en

00:00:00.510 --> 00:00:02.860
Okay, so one.

00:00:02.860 --> 00:00:05.046
&gt;&gt; See, now that was mean. So right, one is an

00:00:05.046 --> 00:00:07.443
epsilon, no because epsilon has to be less than or equal

00:00:07.443 --> 00:00:09.908
to half, we already said that, but you're right. In a

00:00:09.908 --> 00:00:13.076
sense setting epsilon to one, is always a valid answer to

00:00:13.076 --> 00:00:16.904
the question, find an epsilon set that we've epsilon exhausted the

00:00:16.904 --> 00:00:20.540
version space. Because all it's saying is, that there is nothing

00:00:20.540 --> 00:00:23.330
left in the set that has an error greater than one.

00:00:23.330 --> 00:00:25.590
And since the error is defined to be the probability, it can't

00:00:25.590 --> 00:00:29.040
be greater than one. So that was kind of you know, kind of rude.

00:00:29.040 --> 00:00:31.680
&gt;&gt; All right, I, I thought I just answered the

00:00:31.680 --> 00:00:33.636
question. But I guess you want me to give you [CROSSTALK]

00:00:33.636 --> 00:00:34.630
&gt;&gt; Yeah but you, but you prob-, what you probably should

00:00:34.630 --> 00:00:36.780
have pointed out is that I left out the word smallest.

00:00:36.780 --> 00:00:40.460
&gt;&gt; Oh! Yes, yes. Okay. Well, so, I don't know the answer

00:00:40.460 --> 00:00:43.650
to that but, I think I could walk through it very quickly.

00:00:43.650 --> 00:00:43.830
&gt;&gt; Okay.

00:00:43.830 --> 00:00:47.510
&gt;&gt; Okay, so you saying the ones that are

00:00:47.510 --> 00:00:50.550
in green are the training examples that we see, right?

00:00:50.550 --> 00:00:51.090
&gt;&gt; Right.

00:00:51.090 --> 00:00:53.210
&gt;&gt; So we should be able to use that

00:00:53.210 --> 00:00:56.070
to figure out what the version space actually is.

00:00:56.070 --> 00:00:58.430
&gt;&gt; Right, which we did in a previous question.

00:00:58.430 --> 00:01:01.030
&gt;&gt; Right, although I don't remember [LAUGH] what the answer was.

00:01:01.030 --> 00:01:01.500
&gt;&gt; I'll remind you.

00:01:01.500 --> 00:01:03.185
&gt;&gt; I'll remind you,It's okay. So it was x1

00:01:03.185 --> 00:01:03.641
&gt;&gt; Mh-hm.

00:01:03.641 --> 00:01:08.280
&gt;&gt; Right, because the x1 matches, it was, or and x or.

00:01:08.280 --> 00:01:09.043
&gt;&gt; Mh-hm.

00:01:09.043 --> 00:01:10.330
&gt;&gt; I think that was it.

00:01:10.330 --> 00:01:13.400
&gt;&gt; Yeah, I think that's right. Okay, so, then what we can do is

00:01:13.400 --> 00:01:14.660
given that those are the three things

00:01:14.660 --> 00:01:16.940
that we've done. We could actually compute,

00:01:16.940 --> 00:01:21.930
what the error is according to this distribution for each of those three.

00:01:21.930 --> 00:01:23.200
&gt;&gt; Yes, exactly so.

00:01:23.200 --> 00:01:27.700
&gt;&gt; So let's, let's start with X1. So which one, x1, so all three

00:01:27.700 --> 00:01:31.660
of those are going to get the first one and the third one correct, right?

00:01:31.660 --> 00:01:33.610
&gt;&gt; All of them are going to get the first

00:01:33.610 --> 00:01:35.850
one and the third one correct. Yes, by design.

00:01:35.850 --> 00:01:36.530
&gt;&gt; By design.

00:01:36.530 --> 00:01:38.000
&gt;&gt; Right, to be in the version space.

00:01:38.000 --> 00:01:42.020
&gt;&gt; So now we can ask which ones will get the second one wrong?

00:01:42.020 --> 00:01:45.310
The fourth one doesn't matter because it has zero probability of showing up.

00:01:45.310 --> 00:01:47.630
&gt;&gt; That's right. So, it doesn't matter if you get this one

00:01:47.630 --> 00:01:50.650
right or wrong, it's not going to contribute to this true error measure.

00:01:50.650 --> 00:01:54.220
&gt;&gt; Okay. So let's look at x one. So x one will in fact get the

00:01:54.220 --> 00:01:59.760
second one wrong, because the output Is not the same as the value for x one.

00:01:59.760 --> 00:02:04.010
&gt;&gt; Good. And so what;s the probablity that x one, this hypothesis

00:02:04.010 --> 00:02:06.520
x one, is going to give a wrong answer on a randomly drawn input?

00:02:06.520 --> 00:02:07.180
&gt;&gt; Well,

00:02:07.180 --> 00:02:09.419
half the time it will get the second answer,

00:02:09.419 --> 00:02:11.700
and so the error is, in fact, one half.

00:02:11.700 --> 00:02:15.210
&gt;&gt; Yes. Exaclty. Good. All right. Let's move on to the or.

00:02:15.210 --> 00:02:18.830
&gt;&gt; Okay. So, we can do an easy one actually. We can do x or. Since we know

00:02:18.830 --> 00:02:20.890
x or is the right answer, we know It

00:02:20.890 --> 00:02:23.020
will has a probablity of being wrong of zero.

00:02:23.020 --> 00:02:23.950
&gt;&gt; Oh, good point.

00:02:23.950 --> 00:02:27.670
&gt;&gt; Okay. And so for or we can do the same thing. So is, we know it's going to

00:02:27.670 --> 00:02:29.900
get the first and the third ones right. So

00:02:29.900 --> 00:02:32.460
now we can ask whether it's going to get the

00:02:32.460 --> 00:02:36.690
second one, right. And zero or one is in fact true.

00:02:36.690 --> 00:02:38.920
Or one. So in fact it also has an error of zero.

00:02:38.920 --> 00:02:40.670
&gt;&gt; Okay.

00:02:40.670 --> 00:02:42.420
&gt;&gt; Which is kind of interesting. So and so,

00:02:42.420 --> 00:02:44.770
even though the function is xor, if we can

00:02:44.770 --> 00:02:47.210
get to the point where we have or or

00:02:47.210 --> 00:02:50.410
xor left, we actually will get zero true error.

00:02:50.410 --> 00:02:51.200
&gt;&gt; That's right.

00:02:51.200 --> 00:02:53.730
&gt;&gt; But in the meantime, because x1 has still

00:02:53.730 --> 00:02:57.560
survived the two examples that we have. Epsilon is

00:02:57.560 --> 00:02:58.620
therefore 0.5.

00:02:58.620 --> 00:03:01.580
&gt;&gt; Right, in particular, we're saying that, this

00:03:01.580 --> 00:03:04.250
is, if, if epsilon were smaller than 0.5,

00:03:04.250 --> 00:03:06.640
then it wouldn't be epsilon exhausted because you'd

00:03:06.640 --> 00:03:08.740
have a hypothesis that has error that's too high.

00:03:08.740 --> 00:03:09.070
&gt;&gt; Right.

00:03:09.070 --> 00:03:10.910
&gt;&gt; So this is the smallest epsilon that we can use.

00:03:10.910 --> 00:03:14.026
And in fact, we let you through if if it was anything

00:03:14.026 --> 00:03:16.960
0.5 to, to one, but this is the, this is the

00:03:16.960 --> 00:03:19.730
value that I was really hoping you'd be able to reason out.

00:03:19.730 --> 00:03:21.300
&gt;&gt; Okay, well that all made sense.

00:03:21.300 --> 00:03:22.500
&gt;&gt; Good, nice work.

00:03:22.500 --> 00:03:23.640
&gt;&gt; Thanks.

