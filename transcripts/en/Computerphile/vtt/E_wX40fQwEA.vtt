WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.799
when you're building this web page and
you go the content and banner across

00:00:04.799 --> 00:00:07.799
the top and a banner across the bottom
ads down the side

00:00:07.799 --> 00:00:11.940
content is being fetched from different
servers to fill in all the chunks of

00:00:11.940 --> 00:00:17.130
that page you might be asked for example
and if your isp can replace one of these

00:00:17.130 --> 00:00:22.199
with the ISPs and server then they've
essentially kicked out this ad network

00:00:22.199 --> 00:00:25.650
from the process so that ad network
thinks that they're serving up and out

00:00:25.650 --> 00:00:29.189
the I the isp is replacing that with
their own out which means the and that

00:00:29.189 --> 00:00:32.160
was kind of paying for something which
they're not getting it also means that

00:00:32.160 --> 00:00:35.610
the isp is getting the benefit of this
very popular page for exactly this might

00:00:35.610 --> 00:00:39.930
be the CNN from page for example and
this ISP ad is now being inserted there

00:00:39.930 --> 00:00:42.480
in place and so everybody is going to
see CNN web page

00:00:42.480 --> 00:00:46.649
they're getting the app that the ISPs insert it going so surely that

00:00:46.649 --> 00:00:48.780
Pope few people's noses out of joint it

00:00:48.780 --> 00:00:54.539
yes whoohoo yes it will and it with it's
something that's yeah I i guess it's not

00:00:54.539 --> 00:00:57.539
really considered good practice but
something that does happen

00:00:59.730 --> 00:01:00.450
the problem

00:01:00.450 --> 00:01:02.670
the lot of the original protocols used
for the web is that they're completely

00:01:02.670 --> 00:01:03.960
insecure

00:01:03.960 --> 00:01:07.530
so then either confidential so all the
data that you're transferring can be

00:01:07.530 --> 00:01:11.370
seen observed by anybody who happens to
be in the able to sit in the network and

00:01:11.370 --> 00:01:14.460
see that they're completely
unauthenticated

00:01:14.460 --> 00:01:17.850
even if you encrypt all the data so that
nobody can sell tell what it is that as

00:01:17.850 --> 00:01:21.150
it's being transmitted and received and
you might not have any idea that you're

00:01:21.150 --> 00:01:24.270
sending it to the right person receiving
it from the right person so that does

00:01:24.270 --> 00:01:25.830
no authentication either

00:01:25.830 --> 00:01:28.890
and as a result of this

00:01:29.520 --> 00:01:33.780
it's possible to do a whole variety of
attacks on traditional web protocols

00:01:33.780 --> 00:01:39.960
where you can intercept communications
for example and maybe insert bad data

00:01:39.960 --> 00:01:46.440
into that that sequence of exchanges or
you could the redirect somebody to a

00:01:46.440 --> 00:01:50.280
different website and they thought they
were getting too because there's no the

00:01:50.280 --> 00:01:53.160
essential to the person who's making the
communication the person who's running

00:01:53.160 --> 00:01:56.160
the web browser has no way to check that
they're actually getting it from the

00:01:56.160 --> 00:01:59.190
real side that they thought and TLS kind
of fixes a lot of that by providing

00:01:59.190 --> 00:02:03.630
means both to encrypt the data in the
communication but also provide the means to

00:02:03.630 --> 00:02:07.350
authenticate the sender and receiver so
that you can tell that you're actually

00:02:07.350 --> 00:02:09.240
getting it the website you thought you
were getting it from

00:02:09.240 --> 00:02:14.640
I remember doing a video where we looked
at how a website isn't just what you get

00:02:14.640 --> 00:02:18.270
from one page is made up of all sorts of
things so does not further complicating

00:02:18.270 --> 00:02:21.720
that complicates things in the sense
that when you get the original page the

00:02:21.720 --> 00:02:22.950
original page will

00:02:22.950 --> 00:02:26.130
so the first place to go to the URL you
go to will have some kind of base page

00:02:26.130 --> 00:02:30.240
and then you'll fetch the data from that
web server and your web browser will

00:02:30.240 --> 00:02:33.300
start rendering our data and putting it
up on the screen for you and it will

00:02:33.300 --> 00:02:37.200
then be filling in holes in our data
which have references to other objects

00:02:37.200 --> 00:02:41.130
on the web so they might be simple
images they might be complex subpages

00:02:41.130 --> 00:02:43.709
there might be adverts from an
advertising so I don't we all saw all

00:02:43.709 --> 00:02:48.030
sorts of things that are necessary to
fill in the gaps in that base page and

00:02:48.030 --> 00:02:52.980
because of that sort of complexity of
that structure you end up relying on a

00:02:52.980 --> 00:02:56.580
lot of other servers all doing the right
thing and all behaving appropriately and

00:02:56.580 --> 00:02:59.190
those servers or networks which are not
the network to which were initially

00:02:59.190 --> 00:03:00.120
connected

00:03:00.120 --> 00:03:03.959
you might be fetching data from all over
the planet in order to build that the

00:03:03.959 --> 00:03:04.530
page

00:03:04.530 --> 00:03:07.740
that's going to be rendered and because
of that just because of that complexity

00:03:07.740 --> 00:03:10.690
and diversity that becomes a lot of
weaklings a lot of potential

00:03:10.690 --> 00:03:14.320
the weak links in that if you use TLS to
encrypt all those connections you've got

00:03:14.320 --> 00:03:16.750
a better chance and authenticate all
those connections

00:03:16.750 --> 00:03:20.500
you got a better chance that data you're
getting is the data you intended to get

00:03:20.500 --> 00:03:25.600
another data that somebody who was in
the middle of those networks inserted

00:03:25.600 --> 00:03:28.600
you've got the symbol for web browser

00:03:28.600 --> 00:03:32.680
let's go old school yeah this is your
web browser and you got the first server

00:03:32.680 --> 00:03:35.620
that you go to have no imagination today
sever.com

00:03:35.620 --> 00:03:40.420
so you're going to make a connection to
that server to send a request and you're

00:03:40.420 --> 00:03:45.130
going to get some page that comes back
and then you might have more requests to

00:03:45.130 --> 00:03:46.150
go to that server

00:03:46.150 --> 00:03:49.570
you might have requests to go to other
servers out there

00:03:49.570 --> 00:03:52.780
as a result that's the set of
connections is one and then you might

00:03:52.780 --> 00:03:56.740
have a bunch of other requests that all
get sent out to a bunch of different

00:03:56.740 --> 00:04:00.460
networks possibly multiple to the same
then you have a bunch of things come

00:04:00.460 --> 00:04:04.870
back and images come back and has come
back and this is what happens is the

00:04:04.870 --> 00:04:06.880
page is slowly slowly they built

00:04:06.880 --> 00:04:10.450
if you look at a web page where I know
this hasn't been fully thought through

00:04:10.450 --> 00:04:13.450
or maybe you're accessing from a network
that's a bit slower than normal you

00:04:13.450 --> 00:04:17.380
might see this happening so as the page
renders things move around a bit because

00:04:17.380 --> 00:04:20.919
it's a bit of being filled in as the
responses come back for the different

00:04:20.919 --> 00:04:23.320
servers causing everything else to jump
event of it

00:04:23.320 --> 00:04:27.100
the problem is that any of these
connections and these are all using HTTP

00:04:27.100 --> 00:04:34.870
then there's no way for the browser to
verify the data that's coming back here

00:04:34.920 --> 00:04:42.500
is actually coming from this server they
could be coming from somebody else instead

00:04:42.500 --> 00:04:46.030
and there's nothing inherently that
stops that being the case there's a bit of

00:04:46.030 --> 00:04:49.990
work that needs to be done for this
attack to happen if this guy just starts

00:04:49.990 --> 00:04:52.870
any bad data to the browser the browser
is not expecting in the browser will just bin

00:04:52.870 --> 00:04:56.140
it and nothing happened about the
operating system just bin it but if

00:04:56.140 --> 00:04:59.410
this guy happens to be able to observe
this initial request going out

00:04:59.410 --> 00:05:02.350
it might be able to observe enough of
the information out in order to be able

00:05:02.350 --> 00:05:06.940
to insert data before the response comes
back from the real server for example

00:05:06.940 --> 00:05:08.919
which could significantly confuse things

00:05:08.919 --> 00:05:12.850
so this is the sort of attack that will
happen if you've got an isp doing this

00:05:12.850 --> 00:05:15.910
kind of thing for example so your
network provider chooses to try and

00:05:15.910 --> 00:05:19.450
insert data onto the web pages you're
visiting then instead of you getting the

00:05:19.450 --> 00:05:20.830
data that comes back

00:05:20.830 --> 00:05:24.640
the server what happens is this is all
going through the ISPs network is

00:05:24.640 --> 00:05:27.790
simplistic to say we just ask a server
for stuff because there are all sorts of

00:05:27.790 --> 00:05:29.170
computers in the way on them

00:05:29.170 --> 00:05:32.470
yeah so leave these packets that are
flowing to make the request and the

00:05:32.470 --> 00:05:35.500
packets of the flowing to come back the
response each of those packets can be

00:05:35.500 --> 00:05:38.740
manipulated and interfered with in some
way and so what can happen is that the

00:05:38.740 --> 00:05:42.700
the package come through here and then
the isp redirect those packets to the

00:05:42.700 --> 00:05:46.030
isp server and then you see these
responses coming back for you nice piece

00:05:46.030 --> 00:05:50.170
over and there was no way for the
originator of the request to tell that

00:05:50.170 --> 00:05:52.990
was what they expected to happen at
least in the default case and set the

00:05:52.990 --> 00:05:58.120
HTTP if you have a tts which means that
you're using the protocol called TLS

00:05:58.120 --> 00:06:02.320
then what happens is that there's an
initial connection setup that happens

00:06:02.320 --> 00:06:07.600
and so the isp tries to redirect these
connections down there then there will

00:06:07.600 --> 00:06:10.690
be an exchange that takes place before
the request is sent

00:06:10.690 --> 00:06:15.520
which means that this computer here will
attempt to authenticate that computer

00:06:15.520 --> 00:06:19.030
there and it will say no no that's not
the right one that's not what I expect

00:06:19.030 --> 00:06:27.070
to https is basically HTT P being
carried on top of layered over TLS which

00:06:27.070 --> 00:06:35.320
is then led over tcp normally speaking
HTTP is layered on top of TCP/IP all the way down

00:06:35.320 --> 00:06:40.060
then what happens is with HTTPS is if
I'm going to

00:06:40.060 --> 00:06:44.920
example.com I expect to get the right
and back for yet so if that was what

00:06:44.920 --> 00:06:50.110
roughly speaking you have an exchange of
certificates so the connection is made

00:06:50.110 --> 00:06:54.910
and then past the initial negotiation
that happens is that this server

00:06:54.910 --> 00:06:58.630
presents information to the client
saying this is all the information that

00:06:58.630 --> 00:07:01.840
i could only have if I had access to
this certificate

00:07:01.840 --> 00:07:05.410
so go and check it against a certificate
and the client will say okay so I need

00:07:05.410 --> 00:07:08.020
to go to find it's certificate to check it
against there's actually a hierarchy

00:07:08.020 --> 00:07:10.330
that will sort of bubble back up to the
top

00:07:10.330 --> 00:07:12.730
so you're you're so that might be down
here and your client trying to access

00:07:12.730 --> 00:07:16.630
that and they may have to check against
multiple points to keep checking that

00:07:16.630 --> 00:07:19.240
has been signed with the right
certificate to get back up to the top

00:07:19.240 --> 00:07:23.050
and at the top that certificate will be
something is actually embedded inside

00:07:23.050 --> 00:07:26.380
the browser and so the client can then
check against that which is already has

00:07:26.380 --> 00:07:28.420
and it's already it doesn't have to rely
on anything

00:07:28.420 --> 00:07:32.440
network to get that it's got that built
in and if that checks out then it knows

00:07:32.440 --> 00:07:35.830
that this sequence of signatures has
been validated at every step

00:07:35.830 --> 00:07:39.160
and so it can trust this server to be
the server that he claims to be the

00:07:39.160 --> 00:07:43.360
fundamental thing behind all that is the
idea that this server can only respond

00:07:43.360 --> 00:07:46.390
currently provide that information if it
has access to this secret and that

00:07:46.390 --> 00:07:48.670
secret has been signed by another secret

00:07:48.670 --> 00:07:51.760
and so you go back up the chain of the
secret signing of the secret signing on

00:07:51.760 --> 00:07:55.480
the secrets to get to what you already
knew at that point you there then you

00:07:55.480 --> 00:07:58.960
can be certain of that chain is not
infinitely it's a trust thing isn't it

00:07:58.960 --> 00:08:04.270
based upon somebody you know you trust -
they trust who they trust it is yeah and

00:08:04.270 --> 00:08:07.300
and ultimately get back to what thats
built into the browser itself

00:08:07.300 --> 00:08:10.270
one of the things that happens then it
becomes a big deal when another entity

00:08:10.270 --> 00:08:13.690
is allowed to put another certificate
inside the browser so you have a bunch

00:08:13.690 --> 00:08:17.260
of these that are embedded in the
browser for these root certificates and

00:08:17.260 --> 00:08:19.900
if you got one of those root
certificates it means you can sign other

00:08:19.900 --> 00:08:23.320
people certificates and they can sign
other people certificates and so you

00:08:23.320 --> 00:08:24.850
can end up if you let you know

00:08:24.850 --> 00:08:27.820
did you sign the wrong certificates
for somebody they can go and create

00:08:27.820 --> 00:08:29.500
stuff which they will say okay -

00:08:29.500 --> 00:08:33.070
when they should I think we touched on
this briefly when we did a superfish

00:08:33.070 --> 00:08:37.150
video tom scott but what's happening now with this ISP then also what's

00:08:37.150 --> 00:08:40.570
happening for example is you can have
this other service called let's encrypt

00:08:40.570 --> 00:08:43.900
it started when you can get your own
certificates relatively lightweight

00:08:43.900 --> 00:08:46.390
fashion from this which is a good thing
in many ways because it means it's

00:08:46.390 --> 00:08:47.710
easier for you to do this

00:08:47.710 --> 00:08:50.860
on the other hand one of the things they
have to do in order to make that service

00:08:50.860 --> 00:08:54.040
really viable was get their root
certificate embedded in all these

00:08:54.040 --> 00:08:56.830
browsers and so that means that these
certificates no longer pop up and throw

00:08:56.830 --> 00:08:59.140
an exception so we don't know where this
one comes from

00:08:59.140 --> 00:09:03.880
it's about it you have a you have a
problem a similar problem in it without

00:09:03.880 --> 00:09:06.130
involving let's encrypt where you just
have people doing what i call

00:09:06.130 --> 00:09:08.830
self-signed certificates so the
certificate that gets checked

00:09:08.830 --> 00:09:11.050
essentially doesn't have this hierarchy

00:09:11.050 --> 00:09:15.520
it's just a significant onto itself and
so the browser

00:09:15.520 --> 00:09:19.600
look at that it goes well this is signed
by itself essentially so it was signed

00:09:19.600 --> 00:09:22.600
by the same entity that issued the
certificate which means that on the one

00:09:22.600 --> 00:09:25.780
hand this is going to be an encrypted
connection so it's all gonna be fine and

00:09:25.780 --> 00:09:27.340
it checks out as far as i know

00:09:27.340 --> 00:09:30.550
on the other hand I haven't been able to
ask anybody else to verify this for me

00:09:30.550 --> 00:09:33.840
so it's still just you claim to be
whoever you claim to be

00:09:33.840 --> 00:09:36.180
and I've got another way of checking
that out which is why lot of browsers

00:09:36.180 --> 00:09:39.150
increasingly browsers will start to
chant at you and say this is a

00:09:39.150 --> 00:09:40.470
self-signed certificate

00:09:40.470 --> 00:09:43.290
do you really want to trust this watch
your back yeah because there's no

00:09:43.290 --> 00:09:47.670
there's no external validation that
actually the identity is done that

00:09:47.670 --> 00:09:51.180
really is the entity who says that they
say they're so you can have this sort of

00:09:51.180 --> 00:09:51.840
thing happening

00:09:51.840 --> 00:09:55.920
you can actually have this kind of
attack wait not quite yet attack where

00:09:55.920 --> 00:09:57.990
the browser is trying to get to the
server

00:09:57.990 --> 00:10:03.480
the ISP servers used to intercept that
can happen with TLS as well because you

00:10:03.480 --> 00:10:08.550
can essentially have the connection gets
routed down to the isp server and then

00:10:08.550 --> 00:10:12.570
the isp server will manufacturers
certificate with which to claim

00:10:12.570 --> 00:10:17.490
ownership of the address of the name
that the client is trying to access and

00:10:17.490 --> 00:10:21.240
if it presents that back and the client
believes for example in self-signed

00:10:21.240 --> 00:10:26.940
certificates all the isp controls enough
of the chain of trust that they can

00:10:26.940 --> 00:10:30.450
produce a certificate for the ice that
the client browser will trust then at

00:10:30.450 --> 00:10:31.380
that point

00:10:31.380 --> 00:10:36.090
this server to all intents and purposes
even on HTTPS connection appears to be

00:10:36.090 --> 00:10:37.020
the right server

00:10:37.020 --> 00:10:40.650
so one piece of advice for your humble
user out there who's got all this

00:10:40.650 --> 00:10:41.970
happening behind the scenes

00:10:41.970 --> 00:10:45.330
what would it be a humble user out there

00:10:46.230 --> 00:10:49.230
shields up on your browser right listen
to the warnings

00:10:49.830 --> 00:10:54.120
so if you've got different things near
padlocks are not being closed and they

00:10:54.120 --> 00:10:58.980
should be or the deposit in red we got a
warning pop up saying this is a self

00:10:58.980 --> 00:11:00.480
certificate, are you really sure?

00:11:00.480 --> 00:11:04.170
don't just click yes and accept
everything all right it's trying to the

00:11:04.170 --> 00:11:05.670
system is trying to tell you something

00:11:05.670 --> 00:11:08.160
unfortunately a lot of the time it's
telling you something which is

00:11:08.160 --> 00:11:10.950
irrelevant or is telling you something
you can do nothing about

00:11:10.950 --> 00:11:14.190
so it's either visit the site with don't
visit the site but it is actually trying

00:11:14.190 --> 00:11:16.590
to tell you something and you should pay
attention to it

00:11:16.590 --> 00:11:19.770
you might just get in the habit of
looking yeah yeah whatever

00:11:19.770 --> 00:11:23.850
you shouldn't really do that if you really
care then you pay attention to that and

00:11:23.850 --> 00:11:24.360
you

00:11:24.360 --> 00:11:27.060
we don't go through when it systems
warning that something you don't go

00:11:27.060 --> 00:11:27.810
through that

00:11:27.810 --> 00:11:30.780
the problem is that a lot of the time as
warnings or rather irrelevant or you can

00:11:30.780 --> 00:11:34.020
do nothing about it other than stop
whatever you're doing which is often

00:11:34.020 --> 00:11:37.590
not acceptable to people is it is a way
you could circumvent any of those

00:11:37.590 --> 00:11:39.490
problems are in private browsing if you

00:11:39.490 --> 00:11:44.649
that private browsing stop it attempts
to stop information leaking between

00:11:44.649 --> 00:11:48.880
browsing sessions but fundamentally
private browsing or not you're going to

00:11:48.880 --> 00:11:52.779
the website and it's the wrong website
and it's got malware on it then your

00:11:52.779 --> 00:11:56.740
browser is still going to get owned. alright, or you know if you type in your bank

00:11:56.740 --> 00:12:00.160
details and you type them into the wrong
website then you still type them into

00:12:00.160 --> 00:12:00.910
the wrong website

00:12:00.910 --> 00:12:03.910
private browsing doesn't help with that

00:12:06.250 --> 00:12:10.000
along with his state and the operations
around it and this can represent the

00:12:10.000 --> 00:12:14.290
other paddle so we got two objects world
on your everyday physical experience

00:12:14.290 --> 00:12:16.060
let's get the google glass in there
there it is

00:12:16.060 --> 00:12:18.910
i think i'd be tempted to position it a
bit further along the line here

