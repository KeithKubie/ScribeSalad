WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:01.170
Good applications and

00:00:01.170 --> 00:00:04.840
user interfaces, incorporate feedback
throughout the user experience.

00:00:04.840 --> 00:00:07.013
If the user does not get enough
feedback they'll probably,

00:00:07.013 --> 00:00:08.590
end up hating the application.

00:00:08.590 --> 00:00:09.545
We should add a feature,

00:00:09.545 --> 00:00:13.305
that explicitly notifies the user that
the system has responded to their input.

00:00:13.305 --> 00:00:17.030
Flask provides a really simple
way to give feedback to a user.

00:00:17.030 --> 00:00:20.020
Message Flashing is a feature that
will prompt a message to the user

00:00:20.020 --> 00:00:22.780
immediately, after a certain
action has taken place, and

00:00:22.780 --> 00:00:25.110
then disappear the next
time the page is requested.

00:00:25.110 --> 00:00:28.070
We can use our templates to reveal
a flash message, wherever and

00:00:28.070 --> 00:00:30.460
however we want,
from within the application.

00:00:30.460 --> 00:00:34.140
To get started, let's import
flash from our Flask module.

00:00:34.140 --> 00:00:37.520
Flashing works in Flask by using
a concept, called sessions.

00:00:37.520 --> 00:00:39.690
This course does not go too,
in depth with sessions.

00:00:39.690 --> 00:00:43.100
But just know that sessions are a way,
a server can store information across

00:00:43.100 --> 00:00:46.740
multiple Web pages, to create a more
personalized user experience.

00:00:46.740 --> 00:00:50.400
In the bottom of our project.pi file,
let's first add a secret key,

00:00:50.400 --> 00:00:53.080
which flask will use to create
sessions for our users.

00:00:53.080 --> 00:00:55.020
Normally, this should be
a very secure password,

00:00:55.020 --> 00:00:57.190
if our application was live
on the Internet but for

00:00:57.190 --> 00:01:01.100
development purposes, let's just
set our key to super_secret_key.

00:01:01.100 --> 00:01:03.140
To flash the message
within our application,

00:01:03.140 --> 00:01:05.407
we simply use the flash
function like this.

00:01:05.407 --> 00:01:10.715
To get a hold of all of the flash
messages, we can use get_flash_messages,

00:01:10.715 --> 00:01:12.885
which will also work from
within our templates.

00:01:12.885 --> 00:01:14.515
So, from within my new menu item method,

00:01:14.515 --> 00:01:18.115
I will create a flash message,
right after I call, session.commit.

00:01:18.115 --> 00:01:21.893
I will add the message,
("new" menu item created!") now,

00:01:21.893 --> 00:01:26.290
in my newmenuitem.html template,
I will add the following code.

00:01:26.290 --> 00:01:29.720
If you are not familiar, with this
with construct in Python, don't worry.

00:01:29.720 --> 00:01:31.720
It's just a block that does
some automatic clean-up,

00:01:31.720 --> 00:01:34.730
when the block is exited, that we don't
really have to concern ourselves with.

00:01:34.730 --> 00:01:36.660
If you are curious about
the with method in Python,

00:01:36.660 --> 00:01:39.160
I will provide some resources
in the instructor notes.

00:01:39.160 --> 00:01:41.881
The get_flashed_messages,
is returning an array of messages,

00:01:41.881 --> 00:01:44.980
that's going to get stored in
this variable, called messages.

00:01:44.980 --> 00:01:48.070
We then loop through the array of
message, if it's not empty, and

00:01:48.070 --> 00:01:51.130
print it out to our HTML document
inside an Unordered List.

00:01:51.130 --> 00:01:53.205
Now, when I save my code,
and try making a new item,

00:01:53.205 --> 00:01:56.272
and flashed with a new confirmation
message on my main menu screen.

