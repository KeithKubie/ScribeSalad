WEBVTT
Kind: captions
Language: en

00:00:02.570 --> 00:00:07.070
 
hello my name is Xavier Juke hi my name

00:00:07.070 --> 00:00:07.080
hello my name is Xavier Juke hi my name
 

00:00:07.080 --> 00:00:07.970
hello my name is Xavier Juke hi my name
is Nick haben dog Skiba

00:00:07.970 --> 00:00:07.980
is Nick haben dog Skiba
 

00:00:07.980 --> 00:00:11.570
is Nick haben dog Skiba
and I'm Jerome do--she and let us tell

00:00:11.570 --> 00:00:11.580
and I'm Jerome do--she and let us tell
 

00:00:11.580 --> 00:00:12.499
and I'm Jerome do--she and let us tell
you about the Android build system

00:00:12.499 --> 00:00:12.509
you about the Android build system
 

00:00:12.509 --> 00:00:14.150
you about the Android build system
especially a couple of features that you

00:00:14.150 --> 00:00:14.160
especially a couple of features that you
 

00:00:14.160 --> 00:00:16.279
especially a couple of features that you
might not know about so let me start

00:00:16.279 --> 00:00:16.289
might not know about so let me start
 

00:00:16.289 --> 00:00:18.620
might not know about so let me start
with the performance checklist that is

00:00:18.620 --> 00:00:18.630
with the performance checklist that is
 

00:00:18.630 --> 00:00:20.120
with the performance checklist that is
that is all the things that you should

00:00:20.120 --> 00:00:20.130
that is all the things that you should
 

00:00:20.130 --> 00:00:22.279
that is all the things that you should
make sure are in order when you're

00:00:22.279 --> 00:00:22.289
make sure are in order when you're
 

00:00:22.289 --> 00:00:24.140
make sure are in order when you're
trying to improve your build times so

00:00:24.140 --> 00:00:24.150
trying to improve your build times so
 

00:00:24.150 --> 00:00:26.029
trying to improve your build times so
first of all please make sure to use the

00:00:26.029 --> 00:00:26.039
first of all please make sure to use the
 

00:00:26.039 --> 00:00:28.580
first of all please make sure to use the
daemon that is already the case if

00:00:28.580 --> 00:00:28.590
daemon that is already the case if
 

00:00:28.590 --> 00:00:30.439
daemon that is already the case if
you're building from Studio but if for

00:00:30.439 --> 00:00:30.449
you're building from Studio but if for
 

00:00:30.449 --> 00:00:31.609
you're building from Studio but if for
some reason you're building from the

00:00:31.609 --> 00:00:31.619
some reason you're building from the
 

00:00:31.619 --> 00:00:33.290
some reason you're building from the
command line like for example when

00:00:33.290 --> 00:00:33.300
command line like for example when
 

00:00:33.300 --> 00:00:34.580
command line like for example when
you're trying to merge your build times

00:00:34.580 --> 00:00:34.590
you're trying to merge your build times
 

00:00:34.590 --> 00:00:36.830
you're trying to merge your build times
make sure use the Dodge dodge demon flag

00:00:36.830 --> 00:00:36.840
make sure use the Dodge dodge demon flag
 

00:00:36.840 --> 00:00:39.350
make sure use the Dodge dodge demon flag
or enable it permanently using the

00:00:39.350 --> 00:00:39.360
or enable it permanently using the
 

00:00:39.360 --> 00:00:42.319
or enable it permanently using the
Gradle properties secondly please make

00:00:42.319 --> 00:00:42.329
Gradle properties secondly please make
 

00:00:42.329 --> 00:00:43.729
Gradle properties secondly please make
sure to give the demon enough memory

00:00:43.729 --> 00:00:43.739
sure to give the demon enough memory
 

00:00:43.739 --> 00:00:46.040
sure to give the demon enough memory
that is especially important when using

00:00:46.040 --> 00:00:46.050
that is especially important when using
 

00:00:46.050 --> 00:00:48.049
that is especially important when using
the in process texting support the

00:00:48.049 --> 00:00:48.059
the in process texting support the
 

00:00:48.059 --> 00:00:50.630
the in process texting support the
desert machine tell you today you can

00:00:50.630 --> 00:00:50.640
desert machine tell you today you can
 

00:00:50.640 --> 00:00:53.450
desert machine tell you today you can
use the old Gradle JVM Arc's property to

00:00:53.450 --> 00:00:53.460
use the old Gradle JVM Arc's property to
 

00:00:53.460 --> 00:00:55.510
use the old Gradle JVM Arc's property to
set the heap size that the demo values

00:00:55.510 --> 00:00:55.520
set the heap size that the demo values
 

00:00:55.520 --> 00:00:58.760
set the heap size that the demo values
on the other hand if you find that your

00:00:58.760 --> 00:00:58.770
on the other hand if you find that your
 

00:00:58.770 --> 00:01:00.200
on the other hand if you find that your
builds are making that your computer

00:01:00.200 --> 00:01:00.210
builds are making that your computer
 

00:01:00.210 --> 00:01:02.420
builds are making that your computer
unresponsive you may want to limit the

00:01:02.420 --> 00:01:02.430
unresponsive you may want to limit the
 

00:01:02.430 --> 00:01:03.920
unresponsive you may want to limit the
total number of threads that you will

00:01:03.920 --> 00:01:03.930
total number of threads that you will
 

00:01:03.930 --> 00:01:06.410
total number of threads that you will
use and you can use the Android fred

00:01:06.410 --> 00:01:06.420
use and you can use the Android fred
 

00:01:06.420 --> 00:01:10.010
use and you can use the Android fred
pool size property to do that next make

00:01:10.010 --> 00:01:10.020
pool size property to do that next make
 

00:01:10.020 --> 00:01:11.380
pool size property to do that next make
sure you use the latest build tools

00:01:11.380 --> 00:01:11.390
sure you use the latest build tools
 

00:01:11.390 --> 00:01:14.359
sure you use the latest build tools
specifically 23:02 is the latest one

00:01:14.359 --> 00:01:14.369
specifically 23:02 is the latest one
 

00:01:14.369 --> 00:01:16.190
specifically 23:02 is the latest one
currently and it's very important to use

00:01:16.190 --> 00:01:16.200
currently and it's very important to use
 

00:01:16.200 --> 00:01:18.200
currently and it's very important to use
it because of the fixed text merger

00:01:18.200 --> 00:01:18.210
it because of the fixed text merger
 

00:01:18.210 --> 00:01:20.920
it because of the fixed text merger
that's also mentioned earlier get an SSD

00:01:20.920 --> 00:01:20.930
that's also mentioned earlier get an SSD
 

00:01:20.930 --> 00:01:24.170
that's also mentioned earlier get an SSD
the sad truth is that building can read

00:01:24.170 --> 00:01:24.180
the sad truth is that building can read
 

00:01:24.180 --> 00:01:25.730
the sad truth is that building can read
applications requires a lot of i/o

00:01:25.730 --> 00:01:25.740
applications requires a lot of i/o
 

00:01:25.740 --> 00:01:28.130
applications requires a lot of i/o
operations which means they actually run

00:01:28.130 --> 00:01:28.140
operations which means they actually run
 

00:01:28.140 --> 00:01:30.980
operations which means they actually run
a lot faster on a fast drive and lastly

00:01:30.980 --> 00:01:30.990
a lot faster on a fast drive and lastly
 

00:01:30.990 --> 00:01:32.810
a lot faster on a fast drive and lastly
make sure you don't use timestamps or

00:01:32.810 --> 00:01:32.820
make sure you don't use timestamps or
 

00:01:32.820 --> 00:01:35.060
make sure you don't use timestamps or
commit numbers in your build files or at

00:01:35.060 --> 00:01:35.070
commit numbers in your build files or at
 

00:01:35.070 --> 00:01:36.890
commit numbers in your build files or at
least not for your debug builds I'll

00:01:36.890 --> 00:01:36.900
least not for your debug builds I'll
 

00:01:36.900 --> 00:01:38.899
least not for your debug builds I'll
come back to it later in the

00:01:38.899 --> 00:01:38.909
come back to it later in the
 

00:01:38.909 --> 00:01:39.469
come back to it later in the
presentation

00:01:39.469 --> 00:01:39.479
presentation
 

00:01:39.479 --> 00:01:41.450
presentation
but it's really easy to make your builds

00:01:41.450 --> 00:01:41.460
but it's really easy to make your builds
 

00:01:41.460 --> 00:01:43.249
but it's really easy to make your builds
non-incremental if things are too

00:01:43.249 --> 00:01:43.259
non-incremental if things are too
 

00:01:43.259 --> 00:01:47.569
non-incremental if things are too
dynamic okay as mentioned please try the

00:01:47.569 --> 00:01:47.579
dynamic okay as mentioned please try the
 

00:01:47.579 --> 00:01:50.030
dynamic okay as mentioned please try the
decks in process flag Ethan it's not

00:01:50.030 --> 00:01:50.040
decks in process flag Ethan it's not
 

00:01:50.040 --> 00:01:52.190
decks in process flag Ethan it's not
enabled by default in 2.0 but it

00:01:52.190 --> 00:01:52.200
enabled by default in 2.0 but it
 

00:01:52.200 --> 00:01:53.480
enabled by default in 2.0 but it
actually makes a huge difference so

00:01:53.480 --> 00:01:53.490
actually makes a huge difference so
 

00:01:53.490 --> 00:01:55.460
actually makes a huge difference so
please try it and let us know if it

00:01:55.460 --> 00:01:55.470
please try it and let us know if it
 

00:01:55.470 --> 00:01:59.569
please try it and let us know if it
works for you also consider having a

00:01:59.569 --> 00:01:59.579
works for you also consider having a
 

00:01:59.579 --> 00:02:01.700
works for you also consider having a
dedicated development flavor with mini

00:02:01.700 --> 00:02:01.710
dedicated development flavor with mini
 

00:02:01.710 --> 00:02:04.730
dedicated development flavor with mini
ZK version 21 the API level 21

00:02:04.730 --> 00:02:04.740
ZK version 21 the API level 21
 

00:02:04.740 --> 00:02:06.740
ZK version 21 the API level 21
introduced some features that we try to

00:02:06.740 --> 00:02:06.750
introduced some features that we try to
 

00:02:06.750 --> 00:02:08.830
introduced some features that we try to
emulate at Build time for older devices

00:02:08.830 --> 00:02:08.840
emulate at Build time for older devices
 

00:02:08.840 --> 00:02:11.660
emulate at Build time for older devices
like multi decks but also vector

00:02:11.660 --> 00:02:11.670
like multi decks but also vector
 

00:02:11.670 --> 00:02:13.830
like multi decks but also vector
drawables if the me nezzie case

00:02:13.830 --> 00:02:13.840
drawables if the me nezzie case
 

00:02:13.840 --> 00:02:16.140
drawables if the me nezzie case
2:21 then we have to do less at bill

00:02:16.140 --> 00:02:16.150
2:21 then we have to do less at bill
 

00:02:16.150 --> 00:02:17.910
2:21 then we have to do less at bill
time which means the bills are faster

00:02:17.910 --> 00:02:17.920
time which means the bills are faster
 

00:02:17.920 --> 00:02:20.400
time which means the bills are faster
now as we mentioned earlier studio will

00:02:20.400 --> 00:02:20.410
now as we mentioned earlier studio will
 

00:02:20.410 --> 00:02:23.610
now as we mentioned earlier studio will
soon start to infer the min SDK number

00:02:23.610 --> 00:02:23.620
soon start to infer the min SDK number
 

00:02:23.620 --> 00:02:25.949
soon start to infer the min SDK number
based on the device you're targeting but

00:02:25.949 --> 00:02:25.959
based on the device you're targeting but
 

00:02:25.959 --> 00:02:27.600
based on the device you're targeting but
for now having such a flavor is probably

00:02:27.600 --> 00:02:27.610
for now having such a flavor is probably
 

00:02:27.610 --> 00:02:29.820
for now having such a flavor is probably
a good idea alright let's talk about

00:02:29.820 --> 00:02:29.830
a good idea alright let's talk about
 

00:02:29.830 --> 00:02:33.210
a good idea alright let's talk about
testing now I hope you already know that

00:02:33.210 --> 00:02:33.220
testing now I hope you already know that
 

00:02:33.220 --> 00:02:35.039
testing now I hope you already know that
we support unit tests that execute

00:02:35.039 --> 00:02:35.049
we support unit tests that execute
 

00:02:35.049 --> 00:02:37.740
we support unit tests that execute
locally on your development computer but

00:02:37.740 --> 00:02:37.750
locally on your development computer but
 

00:02:37.750 --> 00:02:39.479
locally on your development computer but
just to reiterate there is a dedicated

00:02:39.479 --> 00:02:39.489
just to reiterate there is a dedicated
 

00:02:39.489 --> 00:02:41.789
just to reiterate there is a dedicated
tests or set where you can put your unit

00:02:41.789 --> 00:02:41.799
tests or set where you can put your unit
 

00:02:41.799 --> 00:02:44.160
tests or set where you can put your unit
tests there is a matching test compile

00:02:44.160 --> 00:02:44.170
tests there is a matching test compile
 

00:02:44.170 --> 00:02:46.170
tests there is a matching test compile
configuration for all your test

00:02:46.170 --> 00:02:46.180
configuration for all your test
 

00:02:46.180 --> 00:02:48.780
configuration for all your test
dependencies and we support all the

00:02:48.780 --> 00:02:48.790
dependencies and we support all the
 

00:02:48.790 --> 00:02:50.699
dependencies and we support all the
usual testing frameworks although we

00:02:50.699 --> 00:02:50.709
usual testing frameworks although we
 

00:02:50.709 --> 00:02:52.920
usual testing frameworks although we
recommend you use Unit four and there's

00:02:52.920 --> 00:02:52.930
recommend you use Unit four and there's
 

00:02:52.930 --> 00:02:54.870
recommend you use Unit four and there's
a separate session purely about testing

00:02:54.870 --> 00:02:54.880
a separate session purely about testing
 

00:02:54.880 --> 00:02:56.880
a separate session purely about testing
right after this one so I recommend you

00:02:56.880 --> 00:02:56.890
right after this one so I recommend you
 

00:02:56.890 --> 00:03:00.089
right after this one so I recommend you
attend or watch the recording later let

00:03:00.089 --> 00:03:00.099
attend or watch the recording later let
 

00:03:00.099 --> 00:03:02.280
attend or watch the recording later let
me just say that what you currently aim

00:03:02.280 --> 00:03:02.290
me just say that what you currently aim
 

00:03:02.290 --> 00:03:04.140
me just say that what you currently aim
at supporting is to allow you to test

00:03:04.140 --> 00:03:04.150
at supporting is to allow you to test
 

00:03:04.150 --> 00:03:06.300
at supporting is to allow you to test
your business logic that is the part of

00:03:06.300 --> 00:03:06.310
your business logic that is the part of
 

00:03:06.310 --> 00:03:08.369
your business logic that is the part of
your app that is naturally specific to

00:03:08.369 --> 00:03:08.379
your app that is naturally specific to
 

00:03:08.379 --> 00:03:10.860
your app that is naturally specific to
Android any Android code that you end up

00:03:10.860 --> 00:03:10.870
Android any Android code that you end up
 

00:03:10.870 --> 00:03:12.569
Android any Android code that you end up
calling cool from exceptions so you'll

00:03:12.569 --> 00:03:12.579
calling cool from exceptions so you'll
 

00:03:12.579 --> 00:03:14.039
calling cool from exceptions so you'll
have to refactor your code to either

00:03:14.039 --> 00:03:14.049
have to refactor your code to either
 

00:03:14.049 --> 00:03:16.350
have to refactor your code to either
avoid it or mock those parts using a

00:03:16.350 --> 00:03:16.360
avoid it or mock those parts using a
 

00:03:16.360 --> 00:03:19.470
avoid it or mock those parts using a
library like mojito for example okay

00:03:19.470 --> 00:03:19.480
library like mojito for example okay
 

00:03:19.480 --> 00:03:21.539
library like mojito for example okay
when running unit tests from the command

00:03:21.539 --> 00:03:21.549
when running unit tests from the command
 

00:03:21.549 --> 00:03:24.059
when running unit tests from the command
line it's important to remember that the

00:03:24.059 --> 00:03:24.069
line it's important to remember that the
 

00:03:24.069 --> 00:03:26.520
line it's important to remember that the
test task you may know from Grado in

00:03:26.520 --> 00:03:26.530
test task you may know from Grado in
 

00:03:26.530 --> 00:03:28.650
test task you may know from Grado in
android projects is actually an uncle

00:03:28.650 --> 00:03:28.660
android projects is actually an uncle
 

00:03:28.660 --> 00:03:31.470
android projects is actually an uncle
task that triggers the real testing

00:03:31.470 --> 00:03:31.480
task that triggers the real testing
 

00:03:31.480 --> 00:03:34.470
task that triggers the real testing
tasks for each variant independently so

00:03:34.470 --> 00:03:34.480
tasks for each variant independently so
 

00:03:34.480 --> 00:03:35.940
tasks for each variant independently so
for example that will trigger test

00:03:35.940 --> 00:03:35.950
for example that will trigger test
 

00:03:35.950 --> 00:03:37.770
for example that will trigger test
release mean test and test the back unit

00:03:37.770 --> 00:03:37.780
release mean test and test the back unit
 

00:03:37.780 --> 00:03:40.319
release mean test and test the back unit
test unless your business logic does

00:03:40.319 --> 00:03:40.329
test unless your business logic does
 

00:03:40.329 --> 00:03:41.729
test unless your business logic does
something different depending on the

00:03:41.729 --> 00:03:41.739
something different depending on the
 

00:03:41.739 --> 00:03:43.830
something different depending on the
variant is probably enough for you to

00:03:43.830 --> 00:03:43.840
variant is probably enough for you to
 

00:03:43.840 --> 00:03:49.409
variant is probably enough for you to
just run Gradle test debug right if you

00:03:49.409 --> 00:03:49.419
just run Gradle test debug right if you
 

00:03:49.419 --> 00:03:51.479
just run Gradle test debug right if you
need to configure your test runs like

00:03:51.479 --> 00:03:51.489
need to configure your test runs like
 

00:03:51.489 --> 00:03:54.870
need to configure your test runs like
for example you may want to increase the

00:03:54.870 --> 00:03:54.880
for example you may want to increase the
 

00:03:54.880 --> 00:03:56.610
for example you may want to increase the
heap size of your for the test runner

00:03:56.610 --> 00:03:56.620
heap size of your for the test runner
 

00:03:56.620 --> 00:03:59.460
heap size of your for the test runner
you can use the test options unit tests

00:03:59.460 --> 00:03:59.470
you can use the test options unit tests
 

00:03:59.470 --> 00:04:02.220
you can use the test options unit tests
all block that will apply the given

00:04:02.220 --> 00:04:02.230
all block that will apply the given
 

00:04:02.230 --> 00:04:04.530
all block that will apply the given
configuration closure to all the variant

00:04:04.530 --> 00:04:04.540
configuration closure to all the variant
 

00:04:04.540 --> 00:04:06.659
configuration closure to all the variant
specific test tasks I mentioned earlier

00:04:06.659 --> 00:04:06.669
specific test tasks I mentioned earlier
 

00:04:06.669 --> 00:04:08.309
specific test tasks I mentioned earlier
and it's important to remember that

00:04:08.309 --> 00:04:08.319
and it's important to remember that
 

00:04:08.319 --> 00:04:10.379
and it's important to remember that
these settings are not picked up by

00:04:10.379 --> 00:04:10.389
these settings are not picked up by
 

00:04:10.389 --> 00:04:12.479
these settings are not picked up by
studio currently so this is only useful

00:04:12.479 --> 00:04:12.489
studio currently so this is only useful
 

00:04:12.489 --> 00:04:14.759
studio currently so this is only useful
if you're invoking test through Gradle

00:04:14.759 --> 00:04:14.769
if you're invoking test through Gradle
 

00:04:14.769 --> 00:04:16.500
if you're invoking test through Gradle
like for example in a continuous

00:04:16.500 --> 00:04:16.510
like for example in a continuous
 

00:04:16.510 --> 00:04:20.640
like for example in a continuous
integration server okay another testing

00:04:20.640 --> 00:04:20.650
integration server okay another testing
 

00:04:20.650 --> 00:04:22.140
integration server okay another testing
feature you may not know about our

00:04:22.140 --> 00:04:22.150
feature you may not know about our
 

00:04:22.150 --> 00:04:25.320
feature you may not know about our
separate dedicated test projects which

00:04:25.320 --> 00:04:25.330
separate dedicated test projects which
 

00:04:25.330 --> 00:04:26.940
separate dedicated test projects which
allow you to keep your main code and

00:04:26.940 --> 00:04:26.950
allow you to keep your main code and
 

00:04:26.950 --> 00:04:27.120
allow you to keep your main code and
your

00:04:27.120 --> 00:04:27.130
your
 

00:04:27.130 --> 00:04:29.640
your
test code separately which can be useful

00:04:29.640 --> 00:04:29.650
test code separately which can be useful
 

00:04:29.650 --> 00:04:31.470
test code separately which can be useful
if you need this additional flexibility

00:04:31.470 --> 00:04:31.480
if you need this additional flexibility
 

00:04:31.480 --> 00:04:33.660
if you need this additional flexibility
and also if your code is already

00:04:33.660 --> 00:04:33.670
and also if your code is already
 

00:04:33.670 --> 00:04:35.780
and also if your code is already
organized this way from the Eclipse days

00:04:35.780 --> 00:04:35.790
organized this way from the Eclipse days
 

00:04:35.790 --> 00:04:38.520
organized this way from the Eclipse days
the easiest way to get started with this

00:04:38.520 --> 00:04:38.530
the easiest way to get started with this
 

00:04:38.530 --> 00:04:40.920
the easiest way to get started with this
feature is probably to copy the template

00:04:40.920 --> 00:04:40.930
feature is probably to copy the template
 

00:04:40.930 --> 00:04:43.140
feature is probably to copy the template
from the Android testing templates

00:04:43.140 --> 00:04:43.150
from the Android testing templates
 

00:04:43.150 --> 00:04:45.360
from the Android testing templates
repository but let me give you a brief

00:04:45.360 --> 00:04:45.370
repository but let me give you a brief
 

00:04:45.370 --> 00:04:48.510
repository but let me give you a brief
overview of what's involved so the first

00:04:48.510 --> 00:04:48.520
overview of what's involved so the first
 

00:04:48.520 --> 00:04:50.850
overview of what's involved so the first
step is to set the publish no default

00:04:50.850 --> 00:04:50.860
step is to set the publish no default
 

00:04:50.860 --> 00:04:52.500
step is to set the publish no default
flag on the applica on your main

00:04:52.500 --> 00:04:52.510
flag on the applica on your main
 

00:04:52.510 --> 00:04:55.110
flag on the applica on your main
application project and then you create

00:04:55.110 --> 00:04:55.120
application project and then you create
 

00:04:55.120 --> 00:04:57.150
application project and then you create
a separate project that uses come

00:04:57.150 --> 00:04:57.160
a separate project that uses come
 

00:04:57.160 --> 00:05:00.240
a separate project that uses come
Android test plug-in you specify which

00:05:00.240 --> 00:05:00.250
Android test plug-in you specify which
 

00:05:00.250 --> 00:05:01.950
Android test plug-in you specify which
project you want to test and which

00:05:01.950 --> 00:05:01.960
project you want to test and which
 

00:05:01.960 --> 00:05:04.200
project you want to test and which
variant you want to test most likely you

00:05:04.200 --> 00:05:04.210
variant you want to test most likely you
 

00:05:04.210 --> 00:05:06.690
variant you want to test most likely you
also want to specify the testing test

00:05:06.690 --> 00:05:06.700
also want to specify the testing test
 

00:05:06.700 --> 00:05:08.400
also want to specify the testing test
instrumentation runner to be the one

00:05:08.400 --> 00:05:08.410
instrumentation runner to be the one
 

00:05:08.410 --> 00:05:11.580
instrumentation runner to be the one
from test support library then you put

00:05:11.580 --> 00:05:11.590
from test support library then you put
 

00:05:11.590 --> 00:05:14.010
from test support library then you put
your testing code in the main source set

00:05:14.010 --> 00:05:14.020
your testing code in the main source set
 

00:05:14.020 --> 00:05:16.410
your testing code in the main source set
of your test project that's something to

00:05:16.410 --> 00:05:16.420
of your test project that's something to
 

00:05:16.420 --> 00:05:19.470
of your test project that's something to
remember and currently you still have to

00:05:19.470 --> 00:05:19.480
remember and currently you still have to
 

00:05:19.480 --> 00:05:22.110
remember and currently you still have to
put an instrumentation tag in your test

00:05:22.110 --> 00:05:22.120
put an instrumentation tag in your test
 

00:05:22.120 --> 00:05:24.240
put an instrumentation tag in your test
project manifest to specify the the

00:05:24.240 --> 00:05:24.250
project manifest to specify the the
 

00:05:24.250 --> 00:05:26.040
project manifest to specify the the
package of the application to test

00:05:26.040 --> 00:05:26.050
package of the application to test
 

00:05:26.050 --> 00:05:28.410
package of the application to test
although we hope to get rid of this step

00:05:28.410 --> 00:05:28.420
although we hope to get rid of this step
 

00:05:28.420 --> 00:05:32.190
although we hope to get rid of this step
up soon and once all of this setup is

00:05:32.190 --> 00:05:32.200
up soon and once all of this setup is
 

00:05:32.200 --> 00:05:34.890
up soon and once all of this setup is
done you can run the usual connected

00:05:34.890 --> 00:05:34.900
done you can run the usual connected
 

00:05:34.900 --> 00:05:39.080
done you can run the usual connected
Android test task on your test project

00:05:39.080 --> 00:05:39.090
Android test task on your test project
 

00:05:39.090 --> 00:05:41.520
Android test task on your test project
ok another issue that shows up quite

00:05:41.520 --> 00:05:41.530
ok another issue that shows up quite
 

00:05:41.530 --> 00:05:43.650
ok another issue that shows up quite
often when people write testing code is

00:05:43.650 --> 00:05:43.660
often when people write testing code is
 

00:05:43.660 --> 00:05:48.600
often when people write testing code is
the dependency version conflict which

00:05:48.600 --> 00:05:48.610
the dependency version conflict which
 

00:05:48.610 --> 00:05:51.300
the dependency version conflict which
like shows up when you're using the same

00:05:51.300 --> 00:05:51.310
like shows up when you're using the same
 

00:05:51.310 --> 00:05:53.850
like shows up when you're using the same
library in your main and test code so

00:05:53.850 --> 00:05:53.860
library in your main and test code so
 

00:05:53.860 --> 00:05:55.860
library in your main and test code so
what exactly is the problem there the

00:05:55.860 --> 00:05:55.870
what exactly is the problem there the
 

00:05:55.870 --> 00:05:57.990
what exactly is the problem there the
problem is that at runtime your main apk

00:05:57.990 --> 00:05:58.000
problem is that at runtime your main apk
 

00:05:58.000 --> 00:05:59.910
problem is that at runtime your main apk
and your test apk share the same process

00:05:59.910 --> 00:05:59.920
and your test apk share the same process
 

00:05:59.920 --> 00:06:02.100
and your test apk share the same process
and the same class path which means they

00:06:02.100 --> 00:06:02.110
and the same class path which means they
 

00:06:02.110 --> 00:06:03.630
and the same class path which means they
have to use the same version of every

00:06:03.630 --> 00:06:03.640
have to use the same version of every
 

00:06:03.640 --> 00:06:05.610
have to use the same version of every
library even if some of those libraries

00:06:05.610 --> 00:06:05.620
library even if some of those libraries
 

00:06:05.620 --> 00:06:07.740
library even if some of those libraries
were pulled in as transitive

00:06:07.740 --> 00:06:07.750
were pulled in as transitive
 

00:06:07.750 --> 00:06:11.280
were pulled in as transitive
dependencies of other libraries like a

00:06:11.280 --> 00:06:11.290
dependencies of other libraries like a
 

00:06:11.290 --> 00:06:12.930
dependencies of other libraries like a
common example is support annotations in

00:06:12.930 --> 00:06:12.940
common example is support annotations in
 

00:06:12.940 --> 00:06:15.240
common example is support annotations in
your mind apk and an older version of

00:06:15.240 --> 00:06:15.250
your mind apk and an older version of
 

00:06:15.250 --> 00:06:17.070
your mind apk and an older version of
support annotations that is pulled in by

00:06:17.070 --> 00:06:17.080
support annotations that is pulled in by
 

00:06:17.080 --> 00:06:20.910
support annotations that is pulled in by
some of the test dependencies so in this

00:06:20.910 --> 00:06:20.920
some of the test dependencies so in this
 

00:06:20.920 --> 00:06:22.440
some of the test dependencies so in this
case we choose to be very explicit about

00:06:22.440 --> 00:06:22.450
case we choose to be very explicit about
 

00:06:22.450 --> 00:06:24.210
case we choose to be very explicit about
what's going on and we force you to make

00:06:24.210 --> 00:06:24.220
what's going on and we force you to make
 

00:06:24.220 --> 00:06:26.970
what's going on and we force you to make
a decision whether we want to change the

00:06:26.970 --> 00:06:26.980
a decision whether we want to change the
 

00:06:26.980 --> 00:06:28.650
a decision whether we want to change the
version of the library that's used by

00:06:28.650 --> 00:06:28.660
version of the library that's used by
 

00:06:28.660 --> 00:06:31.260
version of the library that's used by
your main apk or the or the version used

00:06:31.260 --> 00:06:31.270
your main apk or the or the version used
 

00:06:31.270 --> 00:06:33.540
your main apk or the or the version used
by the test apk which in theory may

00:06:33.540 --> 00:06:33.550
by the test apk which in theory may
 

00:06:33.550 --> 00:06:35.909
by the test apk which in theory may
cause some of the libraries in this

00:06:35.909 --> 00:06:35.919
cause some of the libraries in this
 

00:06:35.919 --> 00:06:37.950
cause some of the libraries in this
example runner to misbehave although in

00:06:37.950 --> 00:06:37.960
example runner to misbehave although in
 

00:06:37.960 --> 00:06:39.490
example runner to misbehave although in
practice we

00:06:39.490 --> 00:06:39.500
practice we
 

00:06:39.500 --> 00:06:42.430
practice we
usually they don't so the easiest way to

00:06:42.430 --> 00:06:42.440
usually they don't so the easiest way to
 

00:06:42.440 --> 00:06:43.690
usually they don't so the easiest way to
solve this problem when you actually

00:06:43.690 --> 00:06:43.700
solve this problem when you actually
 

00:06:43.700 --> 00:06:45.910
solve this problem when you actually
encounter it is to add another test

00:06:45.910 --> 00:06:45.920
encounter it is to add another test
 

00:06:45.920 --> 00:06:48.070
encounter it is to add another test
dependency to your build.gradle file

00:06:48.070 --> 00:06:48.080
dependency to your build.gradle file
 

00:06:48.080 --> 00:06:50.050
dependency to your build.gradle file
that explicitly depends on the same

00:06:50.050 --> 00:06:50.060
that explicitly depends on the same
 

00:06:50.060 --> 00:06:52.870
that explicitly depends on the same
version of your library as your

00:06:52.870 --> 00:06:52.880
version of your library as your
 

00:06:52.880 --> 00:06:56.320
version of your library as your
production code okay

00:06:56.320 --> 00:06:56.330
production code okay
 

00:06:56.330 --> 00:06:57.820
production code okay
and now stuff will tell about native

00:06:57.820 --> 00:06:57.830
and now stuff will tell about native
 

00:06:57.830 --> 00:07:01.810
and now stuff will tell about native
support okay so starting with the new

00:07:01.810 --> 00:07:01.820
support okay so starting with the new
 

00:07:01.820 --> 00:07:03.070
support okay so starting with the new
version of the plug-in that we just

00:07:03.070 --> 00:07:03.080
version of the plug-in that we just
 

00:07:03.080 --> 00:07:04.510
version of the plug-in that we just
released we have better than that if

00:07:04.510 --> 00:07:04.520
released we have better than that if
 

00:07:04.520 --> 00:07:07.810
released we have better than that if
support that we need before and i/o I

00:07:07.810 --> 00:07:07.820
support that we need before and i/o I
 

00:07:07.820 --> 00:07:09.460
support that we need before and i/o I
mentioned a new plug-in that we're

00:07:09.460 --> 00:07:09.470
mentioned a new plug-in that we're
 

00:07:09.470 --> 00:07:11.170
mentioned a new plug-in that we're
working on the model based plug-in which

00:07:11.170 --> 00:07:11.180
working on the model based plug-in which
 

00:07:11.180 --> 00:07:13.060
working on the model based plug-in which
is new API in the Gradle build system

00:07:13.060 --> 00:07:13.070
is new API in the Gradle build system
 

00:07:13.070 --> 00:07:17.110
is new API in the Gradle build system
and part of the API is the ability to

00:07:17.110 --> 00:07:17.120
and part of the API is the ability to
 

00:07:17.120 --> 00:07:20.530
and part of the API is the ability to
build natively native code so without

00:07:20.530 --> 00:07:20.540
build natively native code so without
 

00:07:20.540 --> 00:07:21.909
build natively native code so without
going through the make file that we have

00:07:21.909 --> 00:07:21.919
going through the make file that we have
 

00:07:21.919 --> 00:07:24.880
going through the make file that we have
right now in the indian DK so we met

00:07:24.880 --> 00:07:24.890
right now in the indian DK so we met
 

00:07:24.890 --> 00:07:26.590
right now in the indian DK so we met
some additional progress not a whole lot

00:07:26.590 --> 00:07:26.600
some additional progress not a whole lot
 

00:07:26.600 --> 00:07:29.500
some additional progress not a whole lot
but you know we're progressing so the

00:07:29.500 --> 00:07:29.510
but you know we're progressing so the
 

00:07:29.510 --> 00:07:31.150
but you know we're progressing so the
first thing that you think about if you

00:07:31.150 --> 00:07:31.160
first thing that you think about if you
 

00:07:31.160 --> 00:07:33.340
first thing that you think about if you
want to use it and try it is that we

00:07:33.340 --> 00:07:33.350
want to use it and try it is that we
 

00:07:33.350 --> 00:07:34.810
want to use it and try it is that we
have different plugins right normally

00:07:34.810 --> 00:07:34.820
have different plugins right normally
 

00:07:34.820 --> 00:07:36.820
have different plugins right normally
it's commented application and commented

00:07:36.820 --> 00:07:36.830
it's commented application and commented
 

00:07:36.830 --> 00:07:39.400
it's commented application and commented
library and now we have you know to

00:07:39.400 --> 00:07:39.410
library and now we have you know to
 

00:07:39.410 --> 00:07:41.080
library and now we have you know to
replace them to use the new plug-in API

00:07:41.080 --> 00:07:41.090
replace them to use the new plug-in API
 

00:07:41.090 --> 00:07:43.150
replace them to use the new plug-in API
you have to use common trade model

00:07:43.150 --> 00:07:43.160
you have to use common trade model
 

00:07:43.160 --> 00:07:45.250
you have to use common trade model
application library and then we have a

00:07:45.250 --> 00:07:45.260
application library and then we have a
 

00:07:45.260 --> 00:07:48.250
application library and then we have a
third plug-in which is a plug-in that

00:07:48.250 --> 00:07:48.260
third plug-in which is a plug-in that
 

00:07:48.260 --> 00:07:50.440
third plug-in which is a plug-in that
only generates an S so it doesn't

00:07:50.440 --> 00:07:50.450
only generates an S so it doesn't
 

00:07:50.450 --> 00:07:52.180
only generates an S so it doesn't
generate anything specific Android I

00:07:52.180 --> 00:07:52.190
generate anything specific Android I
 

00:07:52.190 --> 00:07:53.530
generate anything specific Android I
mean that SEO is meant to work on

00:07:53.530 --> 00:07:53.540
mean that SEO is meant to work on
 

00:07:53.540 --> 00:07:55.150
mean that SEO is meant to work on
Android but it just you know there's no

00:07:55.150 --> 00:07:55.160
Android but it just you know there's no
 

00:07:55.160 --> 00:07:57.820
Android but it just you know there's no
Android packaging around it in all three

00:07:57.820 --> 00:07:57.830
Android packaging around it in all three
 

00:07:57.830 --> 00:08:01.090
Android packaging around it in all three
cases we directly use the Gradle API to

00:08:01.090 --> 00:08:01.100
cases we directly use the Gradle API to
 

00:08:01.100 --> 00:08:03.190
cases we directly use the Gradle API to
build native code but we configure them

00:08:03.190 --> 00:08:03.200
build native code but we configure them
 

00:08:03.200 --> 00:08:05.860
build native code but we configure them
with the native tool chain coming from

00:08:05.860 --> 00:08:05.870
with the native tool chain coming from
 

00:08:05.870 --> 00:08:08.590
with the native tool chain coming from
the NDK so the arm to chain the x86 to

00:08:08.590 --> 00:08:08.600
the NDK so the arm to chain the x86 to
 

00:08:08.600 --> 00:08:11.560
the NDK so the arm to chain the x86 to
chain and all of that so if you're using

00:08:11.560 --> 00:08:11.570
chain and all of that so if you're using
 

00:08:11.570 --> 00:08:14.440
chain and all of that so if you're using
that plug-in the DSL a little bit

00:08:14.440 --> 00:08:14.450
that plug-in the DSL a little bit
 

00:08:14.450 --> 00:08:16.210
that plug-in the DSL a little bit
different right I think we mentioned

00:08:16.210 --> 00:08:16.220
different right I think we mentioned
 

00:08:16.220 --> 00:08:17.890
different right I think we mentioned
that I also and there's some

00:08:17.890 --> 00:08:17.900
that I also and there's some
 

00:08:17.900 --> 00:08:19.330
that I also and there's some
documentation here you should go to that

00:08:19.330 --> 00:08:19.340
documentation here you should go to that
 

00:08:19.340 --> 00:08:22.659
documentation here you should go to that
link and we carat but basically most the

00:08:22.659 --> 00:08:22.669
link and we carat but basically most the
 

00:08:22.669 --> 00:08:23.920
link and we carat but basically most the
biggest different is that everything is

00:08:23.920 --> 00:08:23.930
biggest different is that everything is
 

00:08:23.930 --> 00:08:26.530
biggest different is that everything is
under the model element and then here

00:08:26.530 --> 00:08:26.540
under the model element and then here
 

00:08:26.540 --> 00:08:28.780
under the model element and then here
you can see indicators with again the

00:08:28.780 --> 00:08:28.790
you can see indicators with again the
 

00:08:28.790 --> 00:08:30.280
you can see indicators with again the
dot wit is something we want to get rid

00:08:30.280 --> 00:08:30.290
dot wit is something we want to get rid
 

00:08:30.290 --> 00:08:32.649
dot wit is something we want to get rid
of at some point you just define the

00:08:32.649 --> 00:08:32.659
of at some point you just define the
 

00:08:32.659 --> 00:08:33.909
of at some point you just define the
module name and then it will create a

00:08:33.909 --> 00:08:33.919
module name and then it will create a
 

00:08:33.919 --> 00:08:35.409
module name and then it will create a
library with that name and it will just

00:08:35.409 --> 00:08:35.419
library with that name and it will just
 

00:08:35.419 --> 00:08:38.110
library with that name and it will just
take care of everything basically and

00:08:38.110 --> 00:08:38.120
take care of everything basically and
 

00:08:38.120 --> 00:08:40.000
take care of everything basically and
then under that any key element you can

00:08:40.000 --> 00:08:40.010
then under that any key element you can
 

00:08:40.010 --> 00:08:42.010
then under that any key element you can
also configure your C flag your linker

00:08:42.010 --> 00:08:42.020
also configure your C flag your linker
 

00:08:42.020 --> 00:08:47.050
also configure your C flag your linker
flag and all of that and something new

00:08:47.050 --> 00:08:47.060
flag and all of that and something new
 

00:08:47.060 --> 00:08:48.699
flag and all of that and something new
so some of that was already present in

00:08:48.699 --> 00:08:48.709
so some of that was already present in
 

00:08:48.709 --> 00:08:50.440
so some of that was already present in
an earlier version something that was

00:08:50.440 --> 00:08:50.450
an earlier version something that was
 

00:08:50.450 --> 00:08:52.270
an earlier version something that was
not present before was the ability to do

00:08:52.270 --> 00:08:52.280
not present before was the ability to do
 

00:08:52.280 --> 00:08:52.890
not present before was the ability to do
intermode

00:08:52.890 --> 00:08:52.900
intermode
 

00:08:52.900 --> 00:08:55.019
intermode
dependencies so we're not hooking up

00:08:55.019 --> 00:08:55.029
dependencies so we're not hooking up
 

00:08:55.029 --> 00:08:56.910
dependencies so we're not hooking up
with again the new dependency management

00:08:56.910 --> 00:08:56.920
with again the new dependency management
 

00:08:56.920 --> 00:09:00.450
with again the new dependency management
that this new Gradle plug-in API brings

00:09:00.450 --> 00:09:00.460
that this new Gradle plug-in API brings
 

00:09:00.460 --> 00:09:02.400
that this new Gradle plug-in API brings
so you'll be able to do dependencies

00:09:02.400 --> 00:09:02.410
so you'll be able to do dependencies
 

00:09:02.410 --> 00:09:04.530
so you'll be able to do dependencies
like that as you can see it's a very

00:09:04.530 --> 00:09:04.540
like that as you can see it's a very
 

00:09:04.540 --> 00:09:06.690
like that as you can see it's a very
different DSL from before where before

00:09:06.690 --> 00:09:06.700
different DSL from before where before
 

00:09:06.700 --> 00:09:09.269
different DSL from before where before
you had the dependencies block under as

00:09:09.269 --> 00:09:09.279
you had the dependencies block under as
 

00:09:09.279 --> 00:09:12.150
you had the dependencies block under as
a root element here it's under each

00:09:12.150 --> 00:09:12.160
a root element here it's under each
 

00:09:12.160 --> 00:09:15.480
a root element here it's under each
element each source element so it's

00:09:15.480 --> 00:09:15.490
element each source element so it's
 

00:09:15.490 --> 00:09:17.160
element each source element so it's
really different and there's some option

00:09:17.160 --> 00:09:17.170
really different and there's some option
 

00:09:17.170 --> 00:09:19.290
really different and there's some option
right you see that it's not compile or

00:09:19.290 --> 00:09:19.300
right you see that it's not compile or
 

00:09:19.300 --> 00:09:20.820
right you see that it's not compile or
debug compile or anything you just say

00:09:20.820 --> 00:09:20.830
debug compile or anything you just say
 

00:09:20.830 --> 00:09:23.340
debug compile or anything you just say
what you want to depend on but you can

00:09:23.340 --> 00:09:23.350
what you want to depend on but you can
 

00:09:23.350 --> 00:09:25.019
what you want to depend on but you can
have some options on that like if you

00:09:25.019 --> 00:09:25.029
have some options on that like if you
 

00:09:25.029 --> 00:09:26.490
have some options on that like if you
want to do a static linkage you would do

00:09:26.490 --> 00:09:26.500
want to do a static linkage you would do
 

00:09:26.500 --> 00:09:28.290
want to do a static linkage you would do
project library and then linkage static

00:09:28.290 --> 00:09:28.300
project library and then linkage static
 

00:09:28.300 --> 00:09:29.430
project library and then linkage static
things like that

00:09:29.430 --> 00:09:29.440
things like that
 

00:09:29.440 --> 00:09:32.420
things like that
I recommend evilly that you look at the

00:09:32.420 --> 00:09:32.430
I recommend evilly that you look at the
 

00:09:32.430 --> 00:09:34.740
I recommend evilly that you look at the
documentation for Gradle itself to see

00:09:34.740 --> 00:09:34.750
documentation for Gradle itself to see
 

00:09:34.750 --> 00:09:36.510
documentation for Gradle itself to see
all the things because it's an area that

00:09:36.510 --> 00:09:36.520
all the things because it's an area that
 

00:09:36.520 --> 00:09:38.460
all the things because it's an area that
moves a lot so you should definitely

00:09:38.460 --> 00:09:38.470
moves a lot so you should definitely
 

00:09:38.470 --> 00:09:41.579
moves a lot so you should definitely
look at that and then I want to talk

00:09:41.579 --> 00:09:41.589
look at that and then I want to talk
 

00:09:41.589 --> 00:09:44.160
look at that and then I want to talk
about extending the android plug-in we

00:09:44.160 --> 00:09:44.170
about extending the android plug-in we
 

00:09:44.170 --> 00:09:45.840
about extending the android plug-in we
know a lot of you do a lot of things in

00:09:45.840 --> 00:09:45.850
know a lot of you do a lot of things in
 

00:09:45.850 --> 00:09:48.630
know a lot of you do a lot of things in
there some of you even create plug-ins

00:09:48.630 --> 00:09:48.640
there some of you even create plug-ins
 

00:09:48.640 --> 00:09:50.880
there some of you even create plug-ins
for other people to use and we you know

00:09:50.880 --> 00:09:50.890
for other people to use and we you know
 

00:09:50.890 --> 00:09:52.650
for other people to use and we you know
every time we update the plug-in we see

00:09:52.650 --> 00:09:52.660
every time we update the plug-in we see
 

00:09:52.660 --> 00:09:54.750
every time we update the plug-in we see
people using third-party plug-in being

00:09:54.750 --> 00:09:54.760
people using third-party plug-in being
 

00:09:54.760 --> 00:09:56.790
people using third-party plug-in being
broken up because the new version of our

00:09:56.790 --> 00:09:56.800
broken up because the new version of our
 

00:09:56.800 --> 00:09:58.260
broken up because the new version of our
plug-in is not compatible with some

00:09:58.260 --> 00:09:58.270
plug-in is not compatible with some
 

00:09:58.270 --> 00:10:00.210
plug-in is not compatible with some
third-party plug-in and it's an area

00:10:00.210 --> 00:10:00.220
third-party plug-in and it's an area
 

00:10:00.220 --> 00:10:01.800
third-party plug-in and it's an area
that we know is becoming more and more

00:10:01.800 --> 00:10:01.810
that we know is becoming more and more
 

00:10:01.810 --> 00:10:05.040
that we know is becoming more and more
painful and we want to solve the problem

00:10:05.040 --> 00:10:05.050
painful and we want to solve the problem
 

00:10:05.050 --> 00:10:06.120
painful and we want to solve the problem
it's not something that we're going to

00:10:06.120 --> 00:10:06.130
it's not something that we're going to
 

00:10:06.130 --> 00:10:08.460
it's not something that we're going to
solve super quickly but you know there's

00:10:08.460 --> 00:10:08.470
solve super quickly but you know there's
 

00:10:08.470 --> 00:10:09.630
solve super quickly but you know there's
a few things to look at when you're

00:10:09.630 --> 00:10:09.640
a few things to look at when you're
 

00:10:09.640 --> 00:10:12.360
a few things to look at when you're
doing that so the first thing is we see

00:10:12.360 --> 00:10:12.370
doing that so the first thing is we see
 

00:10:12.370 --> 00:10:14.540
doing that so the first thing is we see
a lot of plug-in just trying to access

00:10:14.540 --> 00:10:14.550
a lot of plug-in just trying to access
 

00:10:14.550 --> 00:10:17.190
a lot of plug-in just trying to access
tasks by name you know the the plug-in

00:10:17.190 --> 00:10:17.200
tasks by name you know the the plug-in
 

00:10:17.200 --> 00:10:19.740
tasks by name you know the the plug-in
wants to hook up in some tasks and then

00:10:19.740 --> 00:10:19.750
wants to hook up in some tasks and then
 

00:10:19.750 --> 00:10:22.050
wants to hook up in some tasks and then
just do a get task by name and that's

00:10:22.050 --> 00:10:22.060
just do a get task by name and that's
 

00:10:22.060 --> 00:10:24.090
just do a get task by name and that's
just like a problem because we're not

00:10:24.090 --> 00:10:24.100
just like a problem because we're not
 

00:10:24.100 --> 00:10:25.769
just like a problem because we're not
guaranteeing that those names are not

00:10:25.769 --> 00:10:25.779
guaranteeing that those names are not
 

00:10:25.779 --> 00:10:27.630
guaranteeing that those names are not
going to change this is not part of our

00:10:27.630 --> 00:10:27.640
going to change this is not part of our
 

00:10:27.640 --> 00:10:30.570
going to change this is not part of our
official API even studio does not use

00:10:30.570 --> 00:10:30.580
official API even studio does not use
 

00:10:30.580 --> 00:10:32.250
official API even studio does not use
those names directly right part of the

00:10:32.250 --> 00:10:32.260
those names directly right part of the
 

00:10:32.260 --> 00:10:33.840
those names directly right part of the
information that's really exported by

00:10:33.840 --> 00:10:33.850
information that's really exported by
 

00:10:33.850 --> 00:10:36.750
information that's really exported by
Gradle through the tooling API part of

00:10:36.750 --> 00:10:36.760
Gradle through the tooling API part of
 

00:10:36.760 --> 00:10:38.490
Gradle through the tooling API part of
that information contains the name of

00:10:38.490 --> 00:10:38.500
that information contains the name of
 

00:10:38.500 --> 00:10:40.050
that information contains the name of
the task to call so that in case we

00:10:40.050 --> 00:10:40.060
the task to call so that in case we
 

00:10:40.060 --> 00:10:42.300
the task to call so that in case we
change it in the plug-in studio doesn't

00:10:42.300 --> 00:10:42.310
change it in the plug-in studio doesn't
 

00:10:42.310 --> 00:10:43.470
change it in the plug-in studio doesn't
need to be change it just reads the

00:10:43.470 --> 00:10:43.480
need to be change it just reads the
 

00:10:43.480 --> 00:10:44.699
need to be change it just reads the
information from the malaria so you

00:10:44.699 --> 00:10:44.709
information from the malaria so you
 

00:10:44.709 --> 00:10:46.530
information from the malaria so you
should do the same do not do that now if

00:10:46.530 --> 00:10:46.540
should do the same do not do that now if
 

00:10:46.540 --> 00:10:48.420
should do the same do not do that now if
you do that for your own build script

00:10:48.420 --> 00:10:48.430
you do that for your own build script
 

00:10:48.430 --> 00:10:49.890
you do that for your own build script
you know that's fine you're not going

00:10:49.890 --> 00:10:49.900
you know that's fine you're not going
 

00:10:49.900 --> 00:10:51.630
you know that's fine you're not going
you know it's your problem to fix when

00:10:51.630 --> 00:10:51.640
you know it's your problem to fix when
 

00:10:51.640 --> 00:10:53.280
you know it's your problem to fix when
we break you but if you're publishing

00:10:53.280 --> 00:10:53.290
we break you but if you're publishing
 

00:10:53.290 --> 00:10:55.620
we break you but if you're publishing
problem for other people to use then you

00:10:55.620 --> 00:10:55.630
problem for other people to use then you
 

00:10:55.630 --> 00:10:58.890
problem for other people to use then you
should be very aware of that another

00:10:58.890 --> 00:10:58.900
should be very aware of that another
 

00:10:58.900 --> 00:11:00.660
should be very aware of that another
thing to be aware of really is how the

00:11:00.660 --> 00:11:00.670
thing to be aware of really is how the
 

00:11:00.670 --> 00:11:02.250
thing to be aware of really is how the
after evaluate work we see a lot of

00:11:02.250 --> 00:11:02.260
after evaluate work we see a lot of
 

00:11:02.260 --> 00:11:04.760
after evaluate work we see a lot of
people who are very confused about that

00:11:04.760 --> 00:11:04.770
people who are very confused about that
 

00:11:04.770 --> 00:11:06.680
people who are very confused about that
and you know after evaluate is just

00:11:06.680 --> 00:11:06.690
and you know after evaluate is just
 

00:11:06.690 --> 00:11:08.780
and you know after evaluate is just
basically a callback that is called

00:11:08.780 --> 00:11:08.790
basically a callback that is called
 

00:11:08.790 --> 00:11:11.900
basically a callback that is called
after the main DSL is passed and and you

00:11:11.900 --> 00:11:11.910
after the main DSL is passed and and you
 

00:11:11.910 --> 00:11:15.830
after the main DSL is passed and and you
know executed and so we register one you

00:11:15.830 --> 00:11:15.840
know executed and so we register one you
 

00:11:15.840 --> 00:11:17.180
know executed and so we register one you
know as soon as you do apply plug in

00:11:17.180 --> 00:11:17.190
know as soon as you do apply plug in
 

00:11:17.190 --> 00:11:19.340
know as soon as you do apply plug in
Android we actually register one and

00:11:19.340 --> 00:11:19.350
Android we actually register one and
 

00:11:19.350 --> 00:11:20.630
Android we actually register one and
that's where we're going to create all

00:11:20.630 --> 00:11:20.640
that's where we're going to create all
 

00:11:20.640 --> 00:11:23.630
that's where we're going to create all
of your tasks and so if you try to

00:11:23.630 --> 00:11:23.640
of your tasks and so if you try to
 

00:11:23.640 --> 00:11:26.330
of your tasks and so if you try to
manipulate tasks before even though I

00:11:26.330 --> 00:11:26.340
manipulate tasks before even though I
 

00:11:26.340 --> 00:11:27.320
manipulate tasks before even though I
said you shouldn't but if you're doing

00:11:27.320 --> 00:11:27.330
said you shouldn't but if you're doing
 

00:11:27.330 --> 00:11:29.090
said you shouldn't but if you're doing
it then you should definitely do it in

00:11:29.090 --> 00:11:29.100
it then you should definitely do it in
 

00:11:29.100 --> 00:11:32.420
it then you should definitely do it in
after evaluate and because it's not

00:11:32.420 --> 00:11:32.430
after evaluate and because it's not
 

00:11:32.430 --> 00:11:34.370
after evaluate and because it's not
working but you can't actually

00:11:34.370 --> 00:11:34.380
working but you can't actually
 

00:11:34.380 --> 00:11:36.320
working but you can't actually
manipulate other things in after

00:11:36.320 --> 00:11:36.330
manipulate other things in after
 

00:11:36.330 --> 00:11:38.630
manipulate other things in after
evaluate than tasks if you want too many

00:11:38.630 --> 00:11:38.640
evaluate than tasks if you want too many
 

00:11:38.640 --> 00:11:40.790
evaluate than tasks if you want too many
change you know build types or you know

00:11:40.790 --> 00:11:40.800
change you know build types or you know
 

00:11:40.800 --> 00:11:43.160
change you know build types or you know
do some custom logic that's going to

00:11:43.160 --> 00:11:43.170
do some custom logic that's going to
 

00:11:43.170 --> 00:11:44.630
do some custom logic that's going to
change product flavor or it's kind of

00:11:44.630 --> 00:11:44.640
change product flavor or it's kind of
 

00:11:44.640 --> 00:11:44.990
change product flavor or it's kind of
too late

00:11:44.990 --> 00:11:45.000
too late
 

00:11:45.000 --> 00:11:46.730
too late
because you can only your own after

00:11:46.730 --> 00:11:46.740
because you can only your own after
 

00:11:46.740 --> 00:11:49.640
because you can only your own after
evaluate happens after hours and so you

00:11:49.640 --> 00:11:49.650
evaluate happens after hours and so you
 

00:11:49.650 --> 00:11:50.750
evaluate happens after hours and so you
know it's too late you already created

00:11:50.750 --> 00:11:50.760
know it's too late you already created
 

00:11:50.760 --> 00:11:52.400
know it's too late you already created
the balance we already created the task

00:11:52.400 --> 00:11:52.410
the balance we already created the task
 

00:11:52.410 --> 00:11:56.210
the balance we already created the task
and it's kind of late so the right way

00:11:56.210 --> 00:11:56.220
and it's kind of late so the right way
 

00:11:56.220 --> 00:11:58.550
and it's kind of late so the right way
really to you know access our tasks is

00:11:58.550 --> 00:11:58.560
really to you know access our tasks is
 

00:11:58.560 --> 00:12:01.450
really to you know access our tasks is
through the variant API so we have this

00:12:01.450 --> 00:12:01.460
through the variant API so we have this
 

00:12:01.460 --> 00:12:04.490
through the variant API so we have this
DSL where you can do application by on -

00:12:04.490 --> 00:12:04.500
DSL where you can do application by on -
 

00:12:04.500 --> 00:12:07.880
DSL where you can do application by on -
all and then you get a closure and that

00:12:07.880 --> 00:12:07.890
all and then you get a closure and that
 

00:12:07.890 --> 00:12:09.800
all and then you get a closure and that
gives you access to the bottom out its

00:12:09.800 --> 00:12:09.810
gives you access to the bottom out its
 

00:12:09.810 --> 00:12:11.630
gives you access to the bottom out its
tasks and all of that now the trick here

00:12:11.630 --> 00:12:11.640
tasks and all of that now the trick here
 

00:12:11.640 --> 00:12:13.550
tasks and all of that now the trick here
is you know I just said hey you need to

00:12:13.550 --> 00:12:13.560
is you know I just said hey you need to
 

00:12:13.560 --> 00:12:15.140
is you know I just said hey you need to
access test and after evaluate but

00:12:15.140 --> 00:12:15.150
access test and after evaluate but
 

00:12:15.150 --> 00:12:16.880
access test and after evaluate but
that's not enough to evaluate that code

00:12:16.880 --> 00:12:16.890
that's not enough to evaluate that code
 

00:12:16.890 --> 00:12:19.700
that's not enough to evaluate that code
the trick here is that all it's

00:12:19.700 --> 00:12:19.710
the trick here is that all it's
 

00:12:19.710 --> 00:12:21.800
the trick here is that all it's
something specific to grader on the

00:12:21.800 --> 00:12:21.810
something specific to grader on the
 

00:12:21.810 --> 00:12:24.380
something specific to grader on the
Gradle collection and that basically it

00:12:24.380 --> 00:12:24.390
Gradle collection and that basically it
 

00:12:24.390 --> 00:12:25.880
Gradle collection and that basically it
registered the closure you pass it and

00:12:25.880 --> 00:12:25.890
registered the closure you pass it and
 

00:12:25.890 --> 00:12:28.220
registered the closure you pass it and
it will apply that to your existing and

00:12:28.220 --> 00:12:28.230
it will apply that to your existing and
 

00:12:28.230 --> 00:12:30.830
it will apply that to your existing and
future item in the collection so by the

00:12:30.830 --> 00:12:30.840
future item in the collection so by the
 

00:12:30.840 --> 00:12:32.420
future item in the collection so by the
time you call that the collection will

00:12:32.420 --> 00:12:32.430
time you call that the collection will
 

00:12:32.430 --> 00:12:34.460
time you call that the collection will
be empty but every time we create a

00:12:34.460 --> 00:12:34.470
be empty but every time we create a
 

00:12:34.470 --> 00:12:35.720
be empty but every time we create a
valiant and it's task and we add it to

00:12:35.720 --> 00:12:35.730
valiant and it's task and we add it to
 

00:12:35.730 --> 00:12:37.130
valiant and it's task and we add it to
the collection then your closure gets

00:12:37.130 --> 00:12:37.140
the collection then your closure gets
 

00:12:37.140 --> 00:12:39.470
the collection then your closure gets
called okay so what can you do with that

00:12:39.470 --> 00:12:39.480
called okay so what can you do with that
 

00:12:39.480 --> 00:12:42.200
called okay so what can you do with that
object you can do some basic things like

00:12:42.200 --> 00:12:42.210
object you can do some basic things like
 

00:12:42.210 --> 00:12:43.370
object you can do some basic things like
you know creating the name for example

00:12:43.370 --> 00:12:43.380
you know creating the name for example
 

00:12:43.380 --> 00:12:45.290
you know creating the name for example
now that name is unique so it's very

00:12:45.290 --> 00:12:45.300
now that name is unique so it's very
 

00:12:45.300 --> 00:12:47.630
now that name is unique so it's very
useful if you want to create per valiant

00:12:47.630 --> 00:12:47.640
useful if you want to create per valiant
 

00:12:47.640 --> 00:12:49.910
useful if you want to create per valiant
task you should use that name as part

00:12:49.910 --> 00:12:49.920
task you should use that name as part
 

00:12:49.920 --> 00:12:51.650
task you should use that name as part
you know like foo plus you know get name

00:12:51.650 --> 00:12:51.660
you know like foo plus you know get name
 

00:12:51.660 --> 00:12:52.970
you know like foo plus you know get name
and then you know that it's going to be

00:12:52.970 --> 00:12:52.980
and then you know that it's going to be
 

00:12:52.980 --> 00:12:57.650
and then you know that it's going to be
unique for every bind the DNA M is one

00:12:57.650 --> 00:12:57.660
unique for every bind the DNA M is one
 

00:12:57.660 --> 00:13:00.320
unique for every bind the DNA M is one
or more segments of folders very useful

00:13:00.320 --> 00:13:00.330
or more segments of folders very useful
 

00:13:00.330 --> 00:13:02.780
or more segments of folders very useful
to you know again store your custom test

00:13:02.780 --> 00:13:02.790
to you know again store your custom test
 

00:13:02.790 --> 00:13:05.390
to you know again store your custom test
data you know do build D or slash

00:13:05.390 --> 00:13:05.400
data you know do build D or slash
 

00:13:05.400 --> 00:13:08.150
data you know do build D or slash
intermediate /foo slash get your name

00:13:08.150 --> 00:13:08.160
intermediate /foo slash get your name
 

00:13:08.160 --> 00:13:09.440
intermediate /foo slash get your name
and you know it's unique for all the

00:13:09.440 --> 00:13:09.450
and you know it's unique for all the
 

00:13:09.450 --> 00:13:11.630
and you know it's unique for all the
different types you can also get other

00:13:11.630 --> 00:13:11.640
different types you can also get other
 

00:13:11.640 --> 00:13:13.210
different types you can also get other
information like the application ID

00:13:13.210 --> 00:13:13.220
information like the application ID
 

00:13:13.220 --> 00:13:15.470
information like the application ID
that's computed you know it's a merger

00:13:15.470 --> 00:13:15.480
that's computed you know it's a merger
 

00:13:15.480 --> 00:13:17.340
that's computed you know it's a merger
of the product flavor and this

00:13:17.340 --> 00:13:17.350
of the product flavor and this
 

00:13:17.350 --> 00:13:18.750
of the product flavor and this
fixing the build type and things like

00:13:18.750 --> 00:13:18.760
fixing the build type and things like
 

00:13:18.760 --> 00:13:21.570
fixing the build type and things like
that you can also get access to the bill

00:13:21.570 --> 00:13:21.580
that you can also get access to the bill
 

00:13:21.580 --> 00:13:23.660
that you can also get access to the bill
types product flavor

00:13:23.660 --> 00:13:23.670
types product flavor
 

00:13:23.670 --> 00:13:27.780
types product flavor
those are read-only we've seen people

00:13:27.780 --> 00:13:27.790
those are read-only we've seen people
 

00:13:27.790 --> 00:13:30.030
those are read-only we've seen people
change them and so a few years ago we

00:13:30.030 --> 00:13:30.040
change them and so a few years ago we
 

00:13:30.040 --> 00:13:31.110
change them and so a few years ago we
actually now give you a read-only

00:13:31.110 --> 00:13:31.120
actually now give you a read-only
 

00:13:31.120 --> 00:13:32.460
actually now give you a read-only
version of them you should not change

00:13:32.460 --> 00:13:32.470
version of them you should not change
 

00:13:32.470 --> 00:13:34.410
version of them you should not change
them they are shared across all the

00:13:34.410 --> 00:13:34.420
them they are shared across all the
 

00:13:34.420 --> 00:13:36.420
them they are shared across all the
different variants so you know if you're

00:13:36.420 --> 00:13:36.430
different variants so you know if you're
 

00:13:36.430 --> 00:13:37.740
different variants so you know if you're
trying to change them you need to change

00:13:37.740 --> 00:13:37.750
trying to change them you need to change
 

00:13:37.750 --> 00:13:39.960
trying to change them you need to change
them before you access the valent API

00:13:39.960 --> 00:13:39.970
them before you access the valent API
 

00:13:39.970 --> 00:13:42.080
them before you access the valent API
you need to change that in the regular

00:13:42.080 --> 00:13:42.090
you need to change that in the regular
 

00:13:42.090 --> 00:13:45.270
you need to change that in the regular
DSL we also give you access to the test

00:13:45.270 --> 00:13:45.280
DSL we also give you access to the test
 

00:13:45.280 --> 00:13:47.100
DSL we also give you access to the test
name so that's where you know you want

00:13:47.100 --> 00:13:47.110
name so that's where you know you want
 

00:13:47.110 --> 00:13:48.690
name so that's where you know you want
to go and create the task rather than

00:13:48.690 --> 00:13:48.700
to go and create the task rather than
 

00:13:48.700 --> 00:13:51.090
to go and create the task rather than
doing it by name and we know that a lot

00:13:51.090 --> 00:13:51.100
doing it by name and we know that a lot
 

00:13:51.100 --> 00:13:52.500
doing it by name and we know that a lot
of you are trying to get those tasks in

00:13:52.500 --> 00:13:52.510
of you are trying to get those tasks in
 

00:13:52.510 --> 00:13:53.760
of you are trying to get those tasks in
order to do things like you know

00:13:53.760 --> 00:13:53.770
order to do things like you know
 

00:13:53.770 --> 00:13:55.380
order to do things like you know
inserting steps in between two different

00:13:55.380 --> 00:13:55.390
inserting steps in between two different
 

00:13:55.390 --> 00:13:57.720
inserting steps in between two different
tasks and things like that and you have

00:13:57.720 --> 00:13:57.730
tasks and things like that and you have
 

00:13:57.730 --> 00:13:59.100
tasks and things like that and you have
to be very careful about what you're

00:13:59.100 --> 00:13:59.110
to be very careful about what you're
 

00:13:59.110 --> 00:14:02.940
to be very careful about what you're
doing there all right I'll go back in a

00:14:02.940 --> 00:14:02.950
doing there all right I'll go back in a
 

00:14:02.950 --> 00:14:05.070
doing there all right I'll go back in a
little bit about the tasks API but you

00:14:05.070 --> 00:14:05.080
little bit about the tasks API but you
 

00:14:05.080 --> 00:14:07.680
little bit about the tasks API but you
know there's some things that you want

00:14:07.680 --> 00:14:07.690
know there's some things that you want
 

00:14:07.690 --> 00:14:09.420
know there's some things that you want
to do for example if you're trying to

00:14:09.420 --> 00:14:09.430
to do for example if you're trying to
 

00:14:09.430 --> 00:14:10.920
to do for example if you're trying to
generate what we consider to be source

00:14:10.920 --> 00:14:10.930
generate what we consider to be source
 

00:14:10.930 --> 00:14:12.930
generate what we consider to be source
code whether that's you know Java source

00:14:12.930 --> 00:14:12.940
code whether that's you know Java source
 

00:14:12.940 --> 00:14:15.990
code whether that's you know Java source
code or Android resources you know you

00:14:15.990 --> 00:14:16.000
code or Android resources you know you
 

00:14:16.000 --> 00:14:17.520
code or Android resources you know you
shouldn't try to go in and hook that

00:14:17.520 --> 00:14:17.530
shouldn't try to go in and hook that
 

00:14:17.530 --> 00:14:19.770
shouldn't try to go in and hook that
manually yourself we have some points

00:14:19.770 --> 00:14:19.780
manually yourself we have some points
 

00:14:19.780 --> 00:14:22.170
manually yourself we have some points
some entry point in the variant API call

00:14:22.170 --> 00:14:22.180
some entry point in the variant API call
 

00:14:22.180 --> 00:14:24.210
some entry point in the variant API call
register Java generating task there's

00:14:24.210 --> 00:14:24.220
register Java generating task there's
 

00:14:24.220 --> 00:14:25.620
register Java generating task there's
actually some parameter to that like

00:14:25.620 --> 00:14:25.630
actually some parameter to that like
 

00:14:25.630 --> 00:14:28.890
actually some parameter to that like
your tasks and you should basically have

00:14:28.890 --> 00:14:28.900
your tasks and you should basically have
 

00:14:28.900 --> 00:14:32.850
your tasks and you should basically have
your plug-in add a new source folder to

00:14:32.850 --> 00:14:32.860
your plug-in add a new source folder to
 

00:14:32.860 --> 00:14:34.860
your plug-in add a new source folder to
the regular Java source folder list

00:14:34.860 --> 00:14:34.870
the regular Java source folder list
 

00:14:34.870 --> 00:14:36.150
the regular Java source folder list
right it's like it's multiple source

00:14:36.150 --> 00:14:36.160
right it's like it's multiple source
 

00:14:36.160 --> 00:14:38.100
right it's like it's multiple source
folder not just one so you can add a new

00:14:38.100 --> 00:14:38.110
folder not just one so you can add a new
 

00:14:38.110 --> 00:14:39.720
folder not just one so you can add a new
one to that collection and then have

00:14:39.720 --> 00:14:39.730
one to that collection and then have
 

00:14:39.730 --> 00:14:41.520
one to that collection and then have
your test just write to that register

00:14:41.520 --> 00:14:41.530
your test just write to that register
 

00:14:41.530 --> 00:14:44.040
your test just write to that register
your task with that and then we'll call

00:14:44.040 --> 00:14:44.050
your task with that and then we'll call
 

00:14:44.050 --> 00:14:45.660
your task with that and then we'll call
it what it needs to be called studio

00:14:45.660 --> 00:14:45.670
it what it needs to be called studio
 

00:14:45.670 --> 00:14:48.180
it what it needs to be called studio
will know about it and then you know it

00:14:48.180 --> 00:14:48.190
will know about it and then you know it
 

00:14:48.190 --> 00:14:49.920
will know about it and then you know it
will work on to and rather than having

00:14:49.920 --> 00:14:49.930
will work on to and rather than having
 

00:14:49.930 --> 00:14:51.810
will work on to and rather than having
you kind of trying to find the test

00:14:51.810 --> 00:14:51.820
you kind of trying to find the test
 

00:14:51.820 --> 00:14:53.580
you kind of trying to find the test
manually and hooking things up together

00:14:53.580 --> 00:14:53.590
manually and hooking things up together
 

00:14:53.590 --> 00:14:55.770
manually and hooking things up together
that's you know do you definitely don't

00:14:55.770 --> 00:14:55.780
that's you know do you definitely don't
 

00:14:55.780 --> 00:14:57.540
that's you know do you definitely don't
want to go into the Java Sea task and

00:14:57.540 --> 00:14:57.550
want to go into the Java Sea task and
 

00:14:57.550 --> 00:14:59.010
want to go into the Java Sea task and
try to give it additional source folder

00:14:59.010 --> 00:14:59.020
try to give it additional source folder
 

00:14:59.020 --> 00:15:00.180
try to give it additional source folder
there all right just tell us what the

00:15:00.180 --> 00:15:00.190
there all right just tell us what the
 

00:15:00.190 --> 00:15:02.190
there all right just tell us what the
source folder is give us your tasks and

00:15:02.190 --> 00:15:02.200
source folder is give us your tasks and
 

00:15:02.200 --> 00:15:03.770
source folder is give us your tasks and
then we'll take care of things for you

00:15:03.770 --> 00:15:03.780
then we'll take care of things for you
 

00:15:03.780 --> 00:15:05.910
then we'll take care of things for you
now if you look at some of the tasks you

00:15:05.910 --> 00:15:05.920
now if you look at some of the tasks you
 

00:15:05.920 --> 00:15:07.770
now if you look at some of the tasks you
know we don't really have a proper API

00:15:07.770 --> 00:15:07.780
know we don't really have a proper API
 

00:15:07.780 --> 00:15:09.870
know we don't really have a proper API
so you may have looked at our source

00:15:09.870 --> 00:15:09.880
so you may have looked at our source
 

00:15:09.880 --> 00:15:11.430
so you may have looked at our source
code and seen something like that it's

00:15:11.430 --> 00:15:11.440
code and seen something like that it's
 

00:15:11.440 --> 00:15:12.660
code and seen something like that it's
like hey you know here's some public

00:15:12.660 --> 00:15:12.670
like hey you know here's some public
 

00:15:12.670 --> 00:15:14.220
like hey you know here's some public
stuff and here's some private stuff

00:15:14.220 --> 00:15:14.230
stuff and here's some private stuff
 

00:15:14.230 --> 00:15:16.140
stuff and here's some private stuff
don't use the products that fit will

00:15:16.140 --> 00:15:16.150
don't use the products that fit will
 

00:15:16.150 --> 00:15:17.790
don't use the products that fit will
break we will break you

00:15:17.790 --> 00:15:17.800
break we will break you
 

00:15:17.800 --> 00:15:21.030
break we will break you
that's why it's just private the public

00:15:21.030 --> 00:15:21.040
that's why it's just private the public
 

00:15:21.040 --> 00:15:23.910
that's why it's just private the public
stuff may break anyway because we have

00:15:23.910 --> 00:15:23.920
stuff may break anyway because we have
 

00:15:23.920 --> 00:15:26.490
stuff may break anyway because we have
we haven't been very good about you know

00:15:26.490 --> 00:15:26.500
we haven't been very good about you know
 

00:15:26.500 --> 00:15:29.700
we haven't been very good about you know
really considering that public API I

00:15:29.700 --> 00:15:29.710
really considering that public API I
 

00:15:29.710 --> 00:15:30.310
really considering that public API I
definitely

00:15:30.310 --> 00:15:30.320
definitely
 

00:15:30.320 --> 00:15:31.600
definitely
is something we want to do in the future

00:15:31.600 --> 00:15:31.610
is something we want to do in the future
 

00:15:31.610 --> 00:15:35.410
is something we want to do in the future
and you know we know that a lot of

00:15:35.410 --> 00:15:35.420
and you know we know that a lot of
 

00:15:35.420 --> 00:15:37.300
and you know we know that a lot of
people want to inject stuff between two

00:15:37.300 --> 00:15:37.310
people want to inject stuff between two
 

00:15:37.310 --> 00:15:39.640
people want to inject stuff between two
particular steps and as between Java C

00:15:39.640 --> 00:15:39.650
particular steps and as between Java C
 

00:15:39.650 --> 00:15:42.190
particular steps and as between Java C
and M DX right we know about that and so

00:15:42.190 --> 00:15:42.200
and M DX right we know about that and so
 

00:15:42.200 --> 00:15:44.230
and M DX right we know about that and so
we've been looking at ways of solving

00:15:44.230 --> 00:15:44.240
we've been looking at ways of solving
 

00:15:44.240 --> 00:15:46.870
we've been looking at ways of solving
that problem rather than having you go

00:15:46.870 --> 00:15:46.880
that problem rather than having you go
 

00:15:46.880 --> 00:15:48.190
that problem rather than having you go
and look at the source code and see hey

00:15:48.190 --> 00:15:48.200
and look at the source code and see hey
 

00:15:48.200 --> 00:15:50.110
and look at the source code and see hey
what does the DX test do and how do I

00:15:50.110 --> 00:15:50.120
what does the DX test do and how do I
 

00:15:50.120 --> 00:15:53.170
what does the DX test do and how do I
inject it additional jobs or whatever so

00:15:53.170 --> 00:15:53.180
inject it additional jobs or whatever so
 

00:15:53.180 --> 00:15:54.640
inject it additional jobs or whatever so
if you look at it here you know that's

00:15:54.640 --> 00:15:54.650
if you look at it here you know that's
 

00:15:54.650 --> 00:15:56.290
if you look at it here you know that's
the default project you create just go

00:15:56.290 --> 00:15:56.300
the default project you create just go
 

00:15:56.300 --> 00:15:57.820
the default project you create just go
straight from Java C to D X and that's

00:15:57.820 --> 00:15:57.830
straight from Java C to D X and that's
 

00:15:57.830 --> 00:16:00.880
straight from Java C to D X and that's
easy but in reality well you have

00:16:00.880 --> 00:16:00.890
easy but in reality well you have
 

00:16:00.890 --> 00:16:03.460
easy but in reality well you have
additional optional steps already you

00:16:03.460 --> 00:16:03.470
additional optional steps already you
 

00:16:03.470 --> 00:16:05.170
additional optional steps already you
know jacoco which could or could not run

00:16:05.170 --> 00:16:05.180
know jacoco which could or could not run
 

00:16:05.180 --> 00:16:07.450
know jacoco which could or could not run
then program which could opt to not run

00:16:07.450 --> 00:16:07.460
then program which could opt to not run
 

00:16:07.460 --> 00:16:09.940
then program which could opt to not run
and then we just added instant run so

00:16:09.940 --> 00:16:09.950
and then we just added instant run so
 

00:16:09.950 --> 00:16:12.490
and then we just added instant run so
imagine you trying to add you know a

00:16:12.490 --> 00:16:12.500
imagine you trying to add you know a
 

00:16:12.500 --> 00:16:14.590
imagine you trying to add you know a
couple of other you know bytecode

00:16:14.590 --> 00:16:14.600
couple of other you know bytecode
 

00:16:14.600 --> 00:16:16.540
couple of other you know bytecode
manipulation thing and trying to have to

00:16:16.540 --> 00:16:16.550
manipulation thing and trying to have to
 

00:16:16.550 --> 00:16:19.210
manipulation thing and trying to have to
all of that together you know hey what

00:16:19.210 --> 00:16:19.220
all of that together you know hey what
 

00:16:19.220 --> 00:16:21.220
all of that together you know hey what
if I plug in a and you know it's plug in

00:16:21.220 --> 00:16:21.230
if I plug in a and you know it's plug in
 

00:16:21.230 --> 00:16:22.990
if I plug in a and you know it's plug in
B so that can hook myself separately so

00:16:22.990 --> 00:16:23.000
B so that can hook myself separately so
 

00:16:23.000 --> 00:16:24.330
B so that can hook myself separately so
we just wanted to fix all of that time

00:16:24.330 --> 00:16:24.340
we just wanted to fix all of that time
 

00:16:24.340 --> 00:16:28.270
we just wanted to fix all of that time
so starting in 1/5 actually we

00:16:28.270 --> 00:16:28.280
so starting in 1/5 actually we
 

00:16:28.280 --> 00:16:30.490
so starting in 1/5 actually we
introduced a transform API that you know

00:16:30.490 --> 00:16:30.500
introduced a transform API that you know
 

00:16:30.500 --> 00:16:33.070
introduced a transform API that you know
the goal is to solve that problem so

00:16:33.070 --> 00:16:33.080
the goal is to solve that problem so
 

00:16:33.080 --> 00:16:35.740
the goal is to solve that problem so
it's just a pipeline of transforms it's

00:16:35.740 --> 00:16:35.750
it's just a pipeline of transforms it's
 

00:16:35.750 --> 00:16:38.050
it's just a pipeline of transforms it's
not a pipeline it's it's a very static

00:16:38.050 --> 00:16:38.060
not a pipeline it's it's a very static
 

00:16:38.060 --> 00:16:40.000
not a pipeline it's it's a very static
pipeline it's mostly helping us set up

00:16:40.000 --> 00:16:40.010
pipeline it's mostly helping us set up
 

00:16:40.010 --> 00:16:42.640
pipeline it's mostly helping us set up
those different optional steps you know

00:16:42.640 --> 00:16:42.650
those different optional steps you know
 

00:16:42.650 --> 00:16:44.470
those different optional steps you know
we want the API to be very simple in

00:16:44.470 --> 00:16:44.480
we want the API to be very simple in
 

00:16:44.480 --> 00:16:47.140
we want the API to be very simple in
terms of adding a new transform and so

00:16:47.140 --> 00:16:47.150
terms of adding a new transform and so
 

00:16:47.150 --> 00:16:48.370
terms of adding a new transform and so
it's not something that you can

00:16:48.370 --> 00:16:48.380
it's not something that you can
 

00:16:48.380 --> 00:16:52.030
it's not something that you can
manipulate after the after the fact the

00:16:52.030 --> 00:16:52.040
manipulate after the after the fact the
 

00:16:52.040 --> 00:16:55.180
manipulate after the after the fact the
API doesn't talk at all about tasks we

00:16:55.180 --> 00:16:55.190
API doesn't talk at all about tasks we
 

00:16:55.190 --> 00:16:56.080
API doesn't talk at all about tasks we
don't want you to think about

00:16:56.080 --> 00:16:56.090
don't want you to think about
 

00:16:56.090 --> 00:16:59.170
don't want you to think about
manipulating tasks you know handling you

00:16:59.170 --> 00:16:59.180
manipulating tasks you know handling you
 

00:16:59.180 --> 00:17:00.850
manipulating tasks you know handling you
know the dependencies between them all

00:17:00.850 --> 00:17:00.860
know the dependencies between them all
 

00:17:00.860 --> 00:17:02.470
know the dependencies between them all
you have to tell us is you know hey what

00:17:02.470 --> 00:17:02.480
you have to tell us is you know hey what
 

00:17:02.480 --> 00:17:03.910
you have to tell us is you know hey what
do you want to transform you know and

00:17:03.910 --> 00:17:03.920
do you want to transform you know and
 

00:17:03.920 --> 00:17:05.980
do you want to transform you know and
things like that we take care of the

00:17:05.980 --> 00:17:05.990
things like that we take care of the
 

00:17:05.990 --> 00:17:08.710
things like that we take care of the
rest for you we do support different

00:17:08.710 --> 00:17:08.720
rest for you we do support different
 

00:17:08.720 --> 00:17:11.560
rest for you we do support different
types so from now on the public API we

00:17:11.560 --> 00:17:11.570
types so from now on the public API we
 

00:17:11.570 --> 00:17:14.079
types so from now on the public API we
support you know Java bytecode classes

00:17:14.079 --> 00:17:14.089
support you know Java bytecode classes
 

00:17:14.089 --> 00:17:17.500
support you know Java bytecode classes
and non Android resources right things

00:17:17.500 --> 00:17:17.510
and non Android resources right things
 

00:17:17.510 --> 00:17:19.630
and non Android resources right things
that you would find in a jar and it's

00:17:19.630 --> 00:17:19.640
that you would find in a jar and it's
 

00:17:19.640 --> 00:17:20.920
that you would find in a jar and it's
important because for example Tahlia

00:17:20.920 --> 00:17:20.930
important because for example Tahlia
 

00:17:20.930 --> 00:17:23.319
important because for example Tahlia
manipulates those and we also support

00:17:23.319 --> 00:17:23.329
manipulates those and we also support
 

00:17:23.329 --> 00:17:24.819
manipulates those and we also support
dex file though it's not available

00:17:24.819 --> 00:17:24.829
dex file though it's not available
 

00:17:24.829 --> 00:17:27.250
dex file though it's not available
through the public API we might change

00:17:27.250 --> 00:17:27.260
through the public API we might change
 

00:17:27.260 --> 00:17:28.840
through the public API we might change
that a little bit in the future but for

00:17:28.840 --> 00:17:28.850
that a little bit in the future but for
 

00:17:28.850 --> 00:17:31.480
that a little bit in the future but for
now that's not the case we also like the

00:17:31.480 --> 00:17:31.490
now that's not the case we also like the
 

00:17:31.490 --> 00:17:33.550
now that's not the case we also like the
way we package and resource libraries is

00:17:33.550 --> 00:17:33.560
way we package and resource libraries is
 

00:17:33.560 --> 00:17:34.570
way we package and resource libraries is
actually also going through that

00:17:34.570 --> 00:17:34.580
actually also going through that
 

00:17:34.580 --> 00:17:36.760
actually also going through that
pipeline and then we support different

00:17:36.760 --> 00:17:36.770
pipeline and then we support different
 

00:17:36.770 --> 00:17:39.670
pipeline and then we support different
scopes so for example jacoco we only run

00:17:39.670 --> 00:17:39.680
scopes so for example jacoco we only run
 

00:17:39.680 --> 00:17:41.110
scopes so for example jacoco we only run
it on the project scope right only the

00:17:41.110 --> 00:17:41.120
it on the project scope right only the
 

00:17:41.120 --> 00:17:43.600
it on the project scope right only the
main app project module

00:17:43.600 --> 00:17:43.610
main app project module
 

00:17:43.610 --> 00:17:45.310
main app project module
instant run also right now on that

00:17:45.310 --> 00:17:45.320
instant run also right now on that
 

00:17:45.320 --> 00:17:47.200
instant run also right now on that
project but you add the sub-module to it

00:17:47.200 --> 00:17:47.210
project but you add the sub-module to it
 

00:17:47.210 --> 00:17:48.520
project but you add the sub-module to it
so you'd be able to say here when I run

00:17:48.520 --> 00:17:48.530
so you'd be able to say here when I run
 

00:17:48.530 --> 00:17:51.250
so you'd be able to say here when I run
on those two scopes ProGuard will run on

00:17:51.250 --> 00:17:51.260
on those two scopes ProGuard will run on
 

00:17:51.260 --> 00:17:52.960
on those two scopes ProGuard will run on
all of the scopes because it really want

00:17:52.960 --> 00:17:52.970
all of the scopes because it really want
 

00:17:52.970 --> 00:17:54.310
all of the scopes because it really want
to look at all the source code of all of

00:17:54.310 --> 00:17:54.320
to look at all the source code of all of
 

00:17:54.320 --> 00:17:58.000
to look at all the source code of all of
it so to implement a transform we have a

00:17:58.000 --> 00:17:58.010
it so to implement a transform we have a
 

00:17:58.010 --> 00:18:00.460
it so to implement a transform we have a
abstract class called transform you know

00:18:00.460 --> 00:18:00.470
abstract class called transform you know
 

00:18:00.470 --> 00:18:01.960
abstract class called transform you know
there's a few method to implement get

00:18:01.960 --> 00:18:01.970
there's a few method to implement get
 

00:18:01.970 --> 00:18:03.940
there's a few method to implement get
name it has to be unique we actually use

00:18:03.940 --> 00:18:03.950
name it has to be unique we actually use
 

00:18:03.950 --> 00:18:07.720
name it has to be unique we actually use
that to generate the test name get input

00:18:07.720 --> 00:18:07.730
that to generate the test name get input
 

00:18:07.730 --> 00:18:09.760
that to generate the test name get input
type is what you want to transform you

00:18:09.760 --> 00:18:09.770
type is what you want to transform you
 

00:18:09.770 --> 00:18:12.340
type is what you want to transform you
know classes or decks so content type is

00:18:12.340 --> 00:18:12.350
know classes or decks so content type is
 

00:18:12.350 --> 00:18:13.540
know classes or decks so content type is
actually an interface but there's a

00:18:13.540 --> 00:18:13.550
actually an interface but there's a
 

00:18:13.550 --> 00:18:16.180
actually an interface but there's a
separate Union default content type that

00:18:16.180 --> 00:18:16.190
separate Union default content type that
 

00:18:16.190 --> 00:18:19.060
separate Union default content type that
contains the type you can change because

00:18:19.060 --> 00:18:19.070
contains the type you can change because
 

00:18:19.070 --> 00:18:20.410
contains the type you can change because
we have a private a name for the

00:18:20.410 --> 00:18:20.420
we have a private a name for the
 

00:18:20.420 --> 00:18:23.740
we have a private a name for the
internal only types scope is an idiom

00:18:23.740 --> 00:18:23.750
internal only types scope is an idiom
 

00:18:23.750 --> 00:18:25.150
internal only types scope is an idiom
and get scope will give you the scope

00:18:25.150 --> 00:18:25.160
and get scope will give you the scope
 

00:18:25.160 --> 00:18:27.580
and get scope will give you the scope
you want to manipulate is incremental

00:18:27.580 --> 00:18:27.590
you want to manipulate is incremental
 

00:18:27.590 --> 00:18:28.960
you want to manipulate is incremental
whether your test can or cannot be

00:18:28.960 --> 00:18:28.970
whether your test can or cannot be
 

00:18:28.970 --> 00:18:31.210
whether your test can or cannot be
increment or if you can't really tell us

00:18:31.210 --> 00:18:31.220
increment or if you can't really tell us
 

00:18:31.220 --> 00:18:33.190
increment or if you can't really tell us
force and will optimize something so we

00:18:33.190 --> 00:18:33.200
force and will optimize something so we
 

00:18:33.200 --> 00:18:34.720
force and will optimize something so we
won't do some work when we call you and

00:18:34.720 --> 00:18:34.730
won't do some work when we call you and
 

00:18:34.730 --> 00:18:37.780
won't do some work when we call you and
then finally the transform method so you

00:18:37.780 --> 00:18:37.790
then finally the transform method so you
 

00:18:37.790 --> 00:18:38.920
then finally the transform method so you
get a context to get some information

00:18:38.920 --> 00:18:38.930
get a context to get some information
 

00:18:38.930 --> 00:18:40.990
get a context to get some information
about radar not the task but a few

00:18:40.990 --> 00:18:41.000
about radar not the task but a few
 

00:18:41.000 --> 00:18:43.990
about radar not the task but a few
things you get your inputs you get some

00:18:43.990 --> 00:18:44.000
things you get your inputs you get some
 

00:18:44.000 --> 00:18:45.460
things you get your inputs you get some
reference inputs right when we run

00:18:45.460 --> 00:18:45.470
reference inputs right when we run
 

00:18:45.470 --> 00:18:49.180
reference inputs right when we run
ProGuard if it's an a test app that's

00:18:49.180 --> 00:18:49.190
ProGuard if it's an a test app that's
 

00:18:49.190 --> 00:18:50.800
ProGuard if it's an a test app that's
testing something it needs to have

00:18:50.800 --> 00:18:50.810
testing something it needs to have
 

00:18:50.810 --> 00:18:56.110
testing something it needs to have
access to the tested code and so greater

00:18:56.110 --> 00:18:56.120
access to the tested code and so greater
 

00:18:56.120 --> 00:18:58.810
access to the tested code and so greater
the greater transform actually could ask

00:18:58.810 --> 00:18:58.820
the greater transform actually could ask
 

00:18:58.820 --> 00:19:00.460
the greater transform actually could ask
part of the scope that it asks it does a

00:19:00.460 --> 00:19:00.470
part of the scope that it asks it does a
 

00:19:00.470 --> 00:19:02.800
part of the scope that it asks it does a
get reference scope that's not an

00:19:02.800 --> 00:19:02.810
get reference scope that's not an
 

00:19:02.810 --> 00:19:04.990
get reference scope that's not an
abstract method but you can implement it

00:19:04.990 --> 00:19:05.000
abstract method but you can implement it
 

00:19:05.000 --> 00:19:06.580
abstract method but you can implement it
anyway and you can say that's a scope

00:19:06.580 --> 00:19:06.590
anyway and you can say that's a scope
 

00:19:06.590 --> 00:19:08.410
anyway and you can say that's a scope
that's called a tested code so you can

00:19:08.410 --> 00:19:08.420
that's called a tested code so you can
 

00:19:08.420 --> 00:19:10.360
that's called a tested code so you can
ask for that to get access to it you're

00:19:10.360 --> 00:19:10.370
ask for that to get access to it you're
 

00:19:10.370 --> 00:19:11.350
ask for that to get access to it you're
not supposed to touch it you're not

00:19:11.350 --> 00:19:11.360
not supposed to touch it you're not
 

00:19:11.360 --> 00:19:12.580
not supposed to touch it you're not
supposed to write it but you can get

00:19:12.580 --> 00:19:12.590
supposed to write it but you can get
 

00:19:12.590 --> 00:19:14.410
supposed to write it but you can get
access to it to read it and then

00:19:14.410 --> 00:19:14.420
access to it to read it and then
 

00:19:14.420 --> 00:19:16.450
access to it to read it and then
transform a good provider allows you to

00:19:16.450 --> 00:19:16.460
transform a good provider allows you to
 

00:19:16.460 --> 00:19:18.190
transform a good provider allows you to
create different type of outputs and

00:19:18.190 --> 00:19:18.200
create different type of outputs and
 

00:19:18.200 --> 00:19:20.110
create different type of outputs and
then whether that particular one is

00:19:20.110 --> 00:19:20.120
then whether that particular one is
 

00:19:20.120 --> 00:19:21.820
then whether that particular one is
incremented or not and there's some

00:19:21.820 --> 00:19:21.830
incremented or not and there's some
 

00:19:21.830 --> 00:19:23.800
incremented or not and there's some
additional features on it like secondary

00:19:23.800 --> 00:19:23.810
additional features on it like secondary
 

00:19:23.810 --> 00:19:25.600
additional features on it like secondary
file inputs secondary file output for

00:19:25.600 --> 00:19:25.610
file inputs secondary file output for
 

00:19:25.610 --> 00:19:27.640
file inputs secondary file output for
example program outputs it's mapping

00:19:27.640 --> 00:19:27.650
example program outputs it's mapping
 

00:19:27.650 --> 00:19:29.920
example program outputs it's mapping
file as a similarly output things like

00:19:29.920 --> 00:19:29.930
file as a similarly output things like
 

00:19:29.930 --> 00:19:32.680
file as a similarly output things like
that I encourage you to look at the Java

00:19:32.680 --> 00:19:32.690
that I encourage you to look at the Java
 

00:19:32.690 --> 00:19:36.100
that I encourage you to look at the Java
log so to use it you know just do a

00:19:36.100 --> 00:19:36.110
log so to use it you know just do a
 

00:19:36.110 --> 00:19:37.780
log so to use it you know just do a
dependency on the transform API artifact

00:19:37.780 --> 00:19:37.790
dependency on the transform API artifact
 

00:19:37.790 --> 00:19:39.880
dependency on the transform API artifact
you know either in your own plugins or

00:19:39.880 --> 00:19:39.890
you know either in your own plugins or
 

00:19:39.890 --> 00:19:41.620
you know either in your own plugins or
directly in your build script and then

00:19:41.620 --> 00:19:41.630
directly in your build script and then
 

00:19:41.630 --> 00:19:44.820
directly in your build script and then
you know there's a global for now

00:19:44.820 --> 00:19:44.830
you know there's a global for now
 

00:19:44.830 --> 00:19:47.020
you know there's a global for now
hundred point in the DSL register

00:19:47.020 --> 00:19:47.030
hundred point in the DSL register
 

00:19:47.030 --> 00:19:48.580
hundred point in the DSL register
transform and then give us the instance

00:19:48.580 --> 00:19:48.590
transform and then give us the instance
 

00:19:48.590 --> 00:19:50.950
transform and then give us the instance
if you give it an instance like that

00:19:50.950 --> 00:19:50.960
if you give it an instance like that
 

00:19:50.960 --> 00:19:52.750
if you give it an instance like that
it's a single instance that will be used

00:19:52.750 --> 00:19:52.760
it's a single instance that will be used
 

00:19:52.760 --> 00:19:54.460
it's a single instance that will be used
for all the variants so make it

00:19:54.460 --> 00:19:54.470
for all the variants so make it
 

00:19:54.470 --> 00:19:55.899
for all the variants so make it
stateless

00:19:55.899 --> 00:19:55.909
stateless
 

00:19:55.909 --> 00:19:59.379
stateless
but you know it's fairly easy to do so

00:19:59.379 --> 00:19:59.389
but you know it's fairly easy to do so
 

00:19:59.389 --> 00:20:02.139
but you know it's fairly easy to do so
all of those are using the transform

00:20:02.139 --> 00:20:02.149
all of those are using the transform
 

00:20:02.149 --> 00:20:04.720
all of those are using the transform
right now since 1.5 as I mentioned you

00:20:04.720 --> 00:20:04.730
right now since 1.5 as I mentioned you
 

00:20:04.730 --> 00:20:06.220
right now since 1.5 as I mentioned you
know jacoco Prague out the new shrinker

00:20:06.220 --> 00:20:06.230
know jacoco Prague out the new shrinker
 

00:20:06.230 --> 00:20:10.330
know jacoco Prague out the new shrinker
instant run decks and because Dex is now

00:20:10.330 --> 00:20:10.340
instant run decks and because Dex is now
 

00:20:10.340 --> 00:20:12.460
instant run decks and because Dex is now
transformed we kind of like remove the

00:20:12.460 --> 00:20:12.470
transformed we kind of like remove the
 

00:20:12.470 --> 00:20:15.490
transformed we kind of like remove the
regular Dex tasks so if you're currently

00:20:15.490 --> 00:20:15.500
regular Dex tasks so if you're currently
 

00:20:15.500 --> 00:20:18.490
regular Dex tasks so if you're currently
trying to use accessing the desktops

00:20:18.490 --> 00:20:18.500
trying to use accessing the desktops
 

00:20:18.500 --> 00:20:19.690
trying to use accessing the desktops
you're going to have problem and we want

00:20:19.690 --> 00:20:19.700
you're going to have problem and we want
 

00:20:19.700 --> 00:20:22.450
you're going to have problem and we want
to fix that it's not technically gone

00:20:22.450 --> 00:20:22.460
to fix that it's not technically gone
 

00:20:22.460 --> 00:20:25.509
to fix that it's not technically gone
but it will throw an exception so in

00:20:25.509 --> 00:20:25.519
but it will throw an exception so in
 

00:20:25.519 --> 00:20:27.159
but it will throw an exception so in
term of order this is the order in which

00:20:27.159 --> 00:20:27.169
term of order this is the order in which
 

00:20:27.169 --> 00:20:30.759
term of order this is the order in which
we will run the transform and there's no

00:20:30.759 --> 00:20:30.769
we will run the transform and there's no
 

00:20:30.769 --> 00:20:33.070
we will run the transform and there's no
way right now to change that it's really

00:20:33.070 --> 00:20:33.080
way right now to change that it's really
 

00:20:33.080 --> 00:20:35.110
way right now to change that it's really
interim of the third-party one you know

00:20:35.110 --> 00:20:35.120
interim of the third-party one you know
 

00:20:35.120 --> 00:20:36.310
interim of the third-party one you know
that could be more than one but it's

00:20:36.310 --> 00:20:36.320
that could be more than one but it's
 

00:20:36.320 --> 00:20:37.899
that could be more than one but it's
really first-come first-serve right it's

00:20:37.899 --> 00:20:37.909
really first-come first-serve right it's
 

00:20:37.909 --> 00:20:40.090
really first-come first-serve right it's
like as you apply custom plugins that

00:20:40.090 --> 00:20:40.100
like as you apply custom plugins that
 

00:20:40.100 --> 00:20:42.539
like as you apply custom plugins that
will drive the order of those transforms

00:20:42.539 --> 00:20:42.549
will drive the order of those transforms
 

00:20:42.549 --> 00:20:45.039
will drive the order of those transforms
so we have some limitations so as I

00:20:45.039 --> 00:20:45.049
so we have some limitations so as I
 

00:20:45.049 --> 00:20:46.210
so we have some limitations so as I
mentioned our global they're not pure

00:20:46.210 --> 00:20:46.220
mentioned our global they're not pure
 

00:20:46.220 --> 00:20:47.680
mentioned our global they're not pure
volumes but we do want to fix that

00:20:47.680 --> 00:20:47.690
volumes but we do want to fix that
 

00:20:47.690 --> 00:20:49.419
volumes but we do want to fix that
hopefully for to the dough for the final

00:20:49.419 --> 00:20:49.429
hopefully for to the dough for the final
 

00:20:49.429 --> 00:20:51.129
hopefully for to the dough for the final
version and you cannot change the order

00:20:51.129 --> 00:20:51.139
version and you cannot change the order
 

00:20:51.139 --> 00:20:52.539
version and you cannot change the order
through the API and it's something we

00:20:52.539 --> 00:20:52.549
through the API and it's something we
 

00:20:52.549 --> 00:20:53.830
through the API and it's something we
need to figure out because there's some

00:20:53.830 --> 00:20:53.840
need to figure out because there's some
 

00:20:53.840 --> 00:20:55.960
need to figure out because there's some
issues right like ProGuard will merge

00:20:55.960 --> 00:20:55.970
issues right like ProGuard will merge
 

00:20:55.970 --> 00:20:57.820
issues right like ProGuard will merge
all the scope together into a single jar

00:20:57.820 --> 00:20:57.830
all the scope together into a single jar
 

00:20:57.830 --> 00:20:59.110
all the scope together into a single jar
I talked about that in my other talk

00:20:59.110 --> 00:20:59.120
I talked about that in my other talk
 

00:20:59.120 --> 00:21:01.000
I talked about that in my other talk
about high generator now to a single jar

00:21:01.000 --> 00:21:01.010
about high generator now to a single jar
 

00:21:01.010 --> 00:21:03.039
about high generator now to a single jar
file the new shrinker doesn't the new

00:21:03.039 --> 00:21:03.049
file the new shrinker doesn't the new
 

00:21:03.049 --> 00:21:05.409
file the new shrinker doesn't the new
shrinker outputs one you know it five

00:21:05.409 --> 00:21:05.419
shrinker outputs one you know it five
 

00:21:05.419 --> 00:21:06.789
shrinker outputs one you know it five
every scope that it reads it outputs a

00:21:06.789 --> 00:21:06.799
every scope that it reads it outputs a
 

00:21:06.799 --> 00:21:09.190
every scope that it reads it outputs a
single output so if you have something

00:21:09.190 --> 00:21:09.200
single output so if you have something
 

00:21:09.200 --> 00:21:10.870
single output so if you have something
that needs to read just one scope and

00:21:10.870 --> 00:21:10.880
that needs to read just one scope and
 

00:21:10.880 --> 00:21:12.220
that needs to read just one scope and
something that merge all the scope

00:21:12.220 --> 00:21:12.230
something that merge all the scope
 

00:21:12.230 --> 00:21:14.350
something that merge all the scope
together then the other would fail so we

00:21:14.350 --> 00:21:14.360
together then the other would fail so we
 

00:21:14.360 --> 00:21:16.720
together then the other would fail so we
need to solve that somehow they appear

00:21:16.720 --> 00:21:16.730
need to solve that somehow they appear
 

00:21:16.730 --> 00:21:18.759
need to solve that somehow they appear
at some point okay so that's the

00:21:18.759 --> 00:21:18.769
at some point okay so that's the
 

00:21:18.769 --> 00:21:21.549
at some point okay so that's the
transform API again the doc is there the

00:21:21.549 --> 00:21:21.559
transform API again the doc is there the
 

00:21:21.559 --> 00:21:23.590
transform API again the doc is there the
Java lock go look at it give us feedback

00:21:23.590 --> 00:21:23.600
Java lock go look at it give us feedback
 

00:21:23.600 --> 00:21:25.629
Java lock go look at it give us feedback
you know the API is marked as beta right

00:21:25.629 --> 00:21:25.639
you know the API is marked as beta right
 

00:21:25.639 --> 00:21:27.430
you know the API is marked as beta right
now because we want to be able to change

00:21:27.430 --> 00:21:27.440
now because we want to be able to change
 

00:21:27.440 --> 00:21:30.039
now because we want to be able to change
it you know please use it and let us

00:21:30.039 --> 00:21:30.049
it you know please use it and let us
 

00:21:30.049 --> 00:21:33.970
it you know please use it and let us
know if you run into trouble okay I want

00:21:33.970 --> 00:21:33.980
know if you run into trouble okay I want
 

00:21:33.980 --> 00:21:36.190
know if you run into trouble okay I want
to go very quickly through inspecting

00:21:36.190 --> 00:21:36.200
to go very quickly through inspecting
 

00:21:36.200 --> 00:21:38.980
to go very quickly through inspecting
your builds we know that this is

00:21:38.980 --> 00:21:38.990
your builds we know that this is
 

00:21:38.990 --> 00:21:40.240
your builds we know that this is
something that some people have a lot of

00:21:40.240 --> 00:21:40.250
something that some people have a lot of
 

00:21:40.250 --> 00:21:41.289
something that some people have a lot of
issues they don't really understand

00:21:41.289 --> 00:21:41.299
issues they don't really understand
 

00:21:41.299 --> 00:21:42.909
issues they don't really understand
what's going on with their build and so

00:21:42.909 --> 00:21:42.919
what's going on with their build and so
 

00:21:42.919 --> 00:21:44.470
what's going on with their build and so
there's actually a few tasks in red or

00:21:44.470 --> 00:21:44.480
there's actually a few tasks in red or
 

00:21:44.480 --> 00:21:46.600
there's actually a few tasks in red or
that only do to do that the dependencies

00:21:46.600 --> 00:21:46.610
that only do to do that the dependencies
 

00:21:46.610 --> 00:21:49.090
that only do to do that the dependencies
one is it's not a task you know it's not

00:21:49.090 --> 00:21:49.100
one is it's not a task you know it's not
 

00:21:49.100 --> 00:21:51.519
one is it's not a task you know it's not
provided by our plugin it gives you your

00:21:51.519 --> 00:21:51.529
provided by our plugin it gives you your
 

00:21:51.529 --> 00:21:53.620
provided by our plugin it gives you your
actual dependencies so you can see all

00:21:53.620 --> 00:21:53.630
actual dependencies so you can see all
 

00:21:53.630 --> 00:21:55.180
actual dependencies so you can see all
the transitive dependencies and all of

00:21:55.180 --> 00:21:55.190
the transitive dependencies and all of
 

00:21:55.190 --> 00:21:56.470
the transitive dependencies and all of
that it has some interesting features

00:21:56.470 --> 00:21:56.480
that it has some interesting features
 

00:21:56.480 --> 00:21:58.470
that it has some interesting features
like showing you which one gets promoted

00:21:58.470 --> 00:21:58.480
like showing you which one gets promoted
 

00:21:58.480 --> 00:22:01.180
like showing you which one gets promoted
you know to a new version just because

00:22:01.180 --> 00:22:01.190
you know to a new version just because
 

00:22:01.190 --> 00:22:02.649
you know to a new version just because
you have two version of it in your graph

00:22:02.649 --> 00:22:02.659
you have two version of it in your graph
 

00:22:02.659 --> 00:22:03.850
you have two version of it in your graph
and one is higher than the other one

00:22:03.850 --> 00:22:03.860
and one is higher than the other one
 

00:22:03.860 --> 00:22:06.100
and one is higher than the other one
well in the path that lower

00:22:06.100 --> 00:22:06.110
well in the path that lower
 

00:22:06.110 --> 00:22:07.330
well in the path that lower
you would still see that you know even

00:22:07.330 --> 00:22:07.340
you would still see that you know even
 

00:22:07.340 --> 00:22:08.980
you would still see that you know even
though it says 2301 it's actually using

00:22:08.980 --> 00:22:08.990
though it says 2301 it's actually using
 

00:22:08.990 --> 00:22:11.260
though it says 2301 it's actually using
23 1 1 because somewhere else you do the

00:22:11.260 --> 00:22:11.270
23 1 1 because somewhere else you do the
 

00:22:11.270 --> 00:22:14.440
23 1 1 because somewhere else you do the
panel 23 1 1 and then you know if you

00:22:14.440 --> 00:22:14.450
panel 23 1 1 and then you know if you
 

00:22:14.450 --> 00:22:15.730
panel 23 1 1 and then you know if you
have multiple version of the same

00:22:15.730 --> 00:22:15.740
have multiple version of the same
 

00:22:15.740 --> 00:22:17.289
have multiple version of the same
dependency in your graph so it will show

00:22:17.289 --> 00:22:17.299
dependency in your graph so it will show
 

00:22:17.299 --> 00:22:19.299
dependency in your graph so it will show
that to you so for example here support

00:22:19.299 --> 00:22:19.309
that to you so for example here support
 

00:22:19.309 --> 00:22:21.940
that to you so for example here support
v4 is used twice and so the first time

00:22:21.940 --> 00:22:21.950
v4 is used twice and so the first time
 

00:22:21.950 --> 00:22:23.410
v4 is used twice and so the first time
it shows you its transitive dependency

00:22:23.410 --> 00:22:23.420
it shows you its transitive dependency
 

00:22:23.420 --> 00:22:24.820
it shows you its transitive dependency
the second time that the smallest error

00:22:24.820 --> 00:22:24.830
the second time that the smallest error
 

00:22:24.830 --> 00:22:26.020
the second time that the smallest error
is saying hey you know you've seen that

00:22:26.020 --> 00:22:26.030
is saying hey you know you've seen that
 

00:22:26.030 --> 00:22:27.700
is saying hey you know you've seen that
before and it won't show you the

00:22:27.700 --> 00:22:27.710
before and it won't show you the
 

00:22:27.710 --> 00:22:29.410
before and it won't show you the
transitive dependencies so that's what

00:22:29.410 --> 00:22:29.420
transitive dependencies so that's what
 

00:22:29.420 --> 00:22:33.280
transitive dependencies so that's what
that little Asterix mean now this will

00:22:33.280 --> 00:22:33.290
that little Asterix mean now this will
 

00:22:33.290 --> 00:22:35.650
that little Asterix mean now this will
show you for a configuration object and

00:22:35.650 --> 00:22:35.660
show you for a configuration object and
 

00:22:35.660 --> 00:22:37.630
show you for a configuration object and
if you build your debug violent for

00:22:37.630 --> 00:22:37.640
if you build your debug violent for
 

00:22:37.640 --> 00:22:39.789
if you build your debug violent for
example we actually take the compiled

00:22:39.789 --> 00:22:39.799
example we actually take the compiled
 

00:22:39.799 --> 00:22:41.770
example we actually take the compiled
configuration we take the debug compile

00:22:41.770 --> 00:22:41.780
configuration we take the debug compile
 

00:22:41.780 --> 00:22:43.810
configuration we take the debug compile
configuration and we kind of put them

00:22:43.810 --> 00:22:43.820
configuration and we kind of put them
 

00:22:43.820 --> 00:22:46.330
configuration and we kind of put them
together and resolve them at one right

00:22:46.330 --> 00:22:46.340
together and resolve them at one right
 

00:22:46.340 --> 00:22:48.880
together and resolve them at one right
so even though here it's the compile

00:22:48.880 --> 00:22:48.890
so even though here it's the compile
 

00:22:48.890 --> 00:22:50.950
so even though here it's the compile
configuration and we're resolving to you

00:22:50.950 --> 00:22:50.960
configuration and we're resolving to you
 

00:22:50.960 --> 00:22:54.220
configuration and we're resolving to you
know support annotation 23 1 1 if in

00:22:54.220 --> 00:22:54.230
know support annotation 23 1 1 if in
 

00:22:54.230 --> 00:22:56.560
know support annotation 23 1 1 if in
debug compile I'm using 24 then

00:22:56.560 --> 00:22:56.570
debug compile I'm using 24 then
 

00:22:56.570 --> 00:22:58.480
debug compile I'm using 24 then
ultimately it will use 24 so you really

00:22:58.480 --> 00:22:58.490
ultimately it will use 24 so you really
 

00:22:58.490 --> 00:23:00.250
ultimately it will use 24 so you really
want to look at it at the bank level

00:23:00.250 --> 00:23:00.260
want to look at it at the bank level
 

00:23:00.260 --> 00:23:02.230
want to look at it at the bank level
like globally and so we have this

00:23:02.230 --> 00:23:02.240
like globally and so we have this
 

00:23:02.240 --> 00:23:04.120
like globally and so we have this
Android dependencies task that does just

00:23:04.120 --> 00:23:04.130
Android dependencies task that does just
 

00:23:04.130 --> 00:23:06.100
Android dependencies task that does just
that it's at the global you know that

00:23:06.100 --> 00:23:06.110
that it's at the global you know that
 

00:23:06.110 --> 00:23:10.180
that it's at the global you know that
debug here is actually a full line so

00:23:10.180 --> 00:23:10.190
debug here is actually a full line so
 

00:23:10.190 --> 00:23:13.090
debug here is actually a full line so
you can use that we have one for sauce

00:23:13.090 --> 00:23:13.100
you can use that we have one for sauce
 

00:23:13.100 --> 00:23:14.860
you can use that we have one for sauce
set so I know that sometimes developers

00:23:14.860 --> 00:23:14.870
set so I know that sometimes developers
 

00:23:14.870 --> 00:23:16.120
set so I know that sometimes developers
are adding sauce set and not sure

00:23:16.120 --> 00:23:16.130
are adding sauce set and not sure
 

00:23:16.130 --> 00:23:17.500
are adding sauce set and not sure
whether or not it's actually adding the

00:23:17.500 --> 00:23:17.510
whether or not it's actually adding the
 

00:23:17.510 --> 00:23:19.780
whether or not it's actually adding the
sauce sets and not knowing which are the

00:23:19.780 --> 00:23:19.790
sauce sets and not knowing which are the
 

00:23:19.790 --> 00:23:21.909
sauce sets and not knowing which are the
folders just look at it and then for

00:23:21.909 --> 00:23:21.919
folders just look at it and then for
 

00:23:21.919 --> 00:23:23.350
folders just look at it and then for
each you know you see the saw set you

00:23:23.350 --> 00:23:23.360
each you know you see the saw set you
 

00:23:23.360 --> 00:23:25.030
each you know you see the saw set you
see the actual compiled configuration

00:23:25.030 --> 00:23:25.040
see the actual compiled configuration
 

00:23:25.040 --> 00:23:28.000
see the actual compiled configuration
associated with it you see the actual

00:23:28.000 --> 00:23:28.010
associated with it you see the actual
 

00:23:28.010 --> 00:23:29.289
associated with it you see the actual
sauce set object that you can manipulate

00:23:29.289 --> 00:23:29.299
sauce set object that you can manipulate
 

00:23:29.299 --> 00:23:30.820
sauce set object that you can manipulate
in your blood grade also it's very

00:23:30.820 --> 00:23:30.830
in your blood grade also it's very
 

00:23:30.830 --> 00:23:34.450
in your blood grade also it's very
convenient and then finally we have the

00:23:34.450 --> 00:23:34.460
convenient and then finally we have the
 

00:23:34.460 --> 00:23:36.549
convenient and then finally we have the
report signing task if you're

00:23:36.549 --> 00:23:36.559
report signing task if you're
 

00:23:36.559 --> 00:23:37.840
report signing task if you're
configuring you're signing through it

00:23:37.840 --> 00:23:37.850
configuring you're signing through it
 

00:23:37.850 --> 00:23:40.210
configuring you're signing through it
you can just do that report you have if

00:23:40.210 --> 00:23:40.220
you can just do that report you have if
 

00:23:40.220 --> 00:23:41.770
you can just do that report you have if
you provide with the password somehow

00:23:41.770 --> 00:23:41.780
you provide with the password somehow
 

00:23:41.780 --> 00:23:43.900
you provide with the password somehow
then we can show the fingerprint that

00:23:43.900 --> 00:23:43.910
then we can show the fingerprint that
 

00:23:43.910 --> 00:23:46.320
then we can show the fingerprint that
can be useful and and things like that

00:23:46.320 --> 00:23:46.330
can be useful and and things like that
 

00:23:46.330 --> 00:23:49.440
can be useful and and things like that
all right and with that thank you

00:23:49.440 --> 00:23:49.450
all right and with that thank you
 

00:23:49.450 --> 00:23:51.850
all right and with that thank you
alright so let's talk a little bit about

00:23:51.850 --> 00:23:51.860
alright so let's talk a little bit about
 

00:23:51.860 --> 00:23:54.490
alright so let's talk a little bit about
instant run I'm not going to give a very

00:23:54.490 --> 00:23:54.500
instant run I'm not going to give a very
 

00:23:54.500 --> 00:23:56.140
instant run I'm not going to give a very
deep technical description on how it

00:23:56.140 --> 00:23:56.150
deep technical description on how it
 

00:23:56.150 --> 00:23:58.480
deep technical description on how it
works but I think it's important that

00:23:58.480 --> 00:23:58.490
works but I think it's important that
 

00:23:58.490 --> 00:24:00.220
works but I think it's important that
you understand some of its concepts

00:24:00.220 --> 00:24:00.230
you understand some of its concepts
 

00:24:00.230 --> 00:24:02.409
you understand some of its concepts
because it may impact you during your

00:24:02.409 --> 00:24:02.419
because it may impact you during your
 

00:24:02.419 --> 00:24:05.950
because it may impact you during your
alternative development cycles so what

00:24:05.950 --> 00:24:05.960
alternative development cycles so what
 

00:24:05.960 --> 00:24:07.240
alternative development cycles so what
happened with instant run is that you

00:24:07.240 --> 00:24:07.250
happened with instant run is that you
 

00:24:07.250 --> 00:24:08.620
happened with instant run is that you
start with a class that you've loaded

00:24:08.620 --> 00:24:08.630
start with a class that you've loaded
 

00:24:08.630 --> 00:24:10.450
start with a class that you've loaded
inside your vehicle machine and that

00:24:10.450 --> 00:24:10.460
inside your vehicle machine and that
 

00:24:10.460 --> 00:24:11.810
inside your vehicle machine and that
class as many feel

00:24:11.810 --> 00:24:11.820
class as many feel
 

00:24:11.820 --> 00:24:14.900
class as many feel
and a couple of methods slow dude and as

00:24:14.900 --> 00:24:14.910
and a couple of methods slow dude and as
 

00:24:14.910 --> 00:24:16.850
and a couple of methods slow dude and as
your application is running most likely

00:24:16.850 --> 00:24:16.860
your application is running most likely
 

00:24:16.860 --> 00:24:18.140
your application is running most likely
you start having instances of that class

00:24:18.140 --> 00:24:18.150
you start having instances of that class
 

00:24:18.150 --> 00:24:20.690
you start having instances of that class
around and this has been created at that

00:24:20.690 --> 00:24:20.700
around and this has been created at that
 

00:24:20.700 --> 00:24:22.070
around and this has been created at that
point to your application is running but

00:24:22.070 --> 00:24:22.080
point to your application is running but
 

00:24:22.080 --> 00:24:23.420
point to your application is running but
you realize that it's not running the

00:24:23.420 --> 00:24:23.430
you realize that it's not running the
 

00:24:23.430 --> 00:24:26.420
you realize that it's not running the
way you want it so you go back to the

00:24:26.420 --> 00:24:26.430
way you want it so you go back to the
 

00:24:26.430 --> 00:24:28.730
way you want it so you go back to the
IDE and you start writing code to change

00:24:28.730 --> 00:24:28.740
IDE and you start writing code to change
 

00:24:28.740 --> 00:24:30.470
IDE and you start writing code to change
the behavior of that particular class

00:24:30.470 --> 00:24:30.480
the behavior of that particular class
 

00:24:30.480 --> 00:24:33.350
the behavior of that particular class
once you hit the button insert run we're

00:24:33.350 --> 00:24:33.360
once you hit the button insert run we're
 

00:24:33.360 --> 00:24:34.520
once you hit the button insert run we're
going to be compiling just this

00:24:34.520 --> 00:24:34.530
going to be compiling just this
 

00:24:34.530 --> 00:24:35.810
going to be compiling just this
particular class we're going to be

00:24:35.810 --> 00:24:35.820
particular class we're going to be
 

00:24:35.820 --> 00:24:37.460
particular class we're going to be
dexing just this particular class and

00:24:37.460 --> 00:24:37.470
dexing just this particular class and
 

00:24:37.470 --> 00:24:38.810
dexing just this particular class and
we're going to be delivering just these

00:24:38.810 --> 00:24:38.820
we're going to be delivering just these
 

00:24:38.820 --> 00:24:40.970
we're going to be delivering just these
particular classes to the runtime so

00:24:40.970 --> 00:24:40.980
particular classes to the runtime so
 

00:24:40.980 --> 00:24:43.370
particular classes to the runtime so
that's why it's super fast so at the

00:24:43.370 --> 00:24:43.380
that's why it's super fast so at the
 

00:24:43.380 --> 00:24:45.230
that's why it's super fast so at the
runtime level we're going to create a

00:24:45.230 --> 00:24:45.240
runtime level we're going to create a
 

00:24:45.240 --> 00:24:47.030
runtime level we're going to create a
new class loader and in that class

00:24:47.030 --> 00:24:47.040
new class loader and in that class
 

00:24:47.040 --> 00:24:48.500
new class loader and in that class
loader we're going to call what we're

00:24:48.500 --> 00:24:48.510
loader we're going to call what we're
 

00:24:48.510 --> 00:24:50.420
loader we're going to call what we're
going to load what we call the overwrite

00:24:50.420 --> 00:24:50.430
going to load what we call the overwrite
 

00:24:50.430 --> 00:24:52.760
going to load what we call the overwrite
class so first thing to realize is that

00:24:52.760 --> 00:24:52.770
class so first thing to realize is that
 

00:24:52.770 --> 00:24:55.550
class so first thing to realize is that
we never actually reload the full class

00:24:55.550 --> 00:24:55.560
we never actually reload the full class
 

00:24:55.560 --> 00:24:57.980
we never actually reload the full class
the full class has only been loaded once

00:24:57.980 --> 00:24:57.990
the full class has only been loaded once
 

00:24:57.990 --> 00:25:01.640
the full class has only been loaded once
it will be always loaded once never we

00:25:01.640 --> 00:25:01.650
it will be always loaded once never we
 

00:25:01.650 --> 00:25:04.940
it will be always loaded once never we
load it instead we will be loading as

00:25:04.940 --> 00:25:04.950
load it instead we will be loading as
 

00:25:04.950 --> 00:25:06.560
load it instead we will be loading as
many overwrite class as we want because

00:25:06.560 --> 00:25:06.570
many overwrite class as we want because
 

00:25:06.570 --> 00:25:07.580
many overwrite class as we want because
we use a new class loader

00:25:07.580 --> 00:25:07.590
we use a new class loader
 

00:25:07.590 --> 00:25:09.800
we use a new class loader
if you continue writing more code and

00:25:09.800 --> 00:25:09.810
if you continue writing more code and
 

00:25:09.810 --> 00:25:11.330
if you continue writing more code and
this foo class will just ditch the

00:25:11.330 --> 00:25:11.340
this foo class will just ditch the
 

00:25:11.340 --> 00:25:12.860
this foo class will just ditch the
previous version of the class loader

00:25:12.860 --> 00:25:12.870
previous version of the class loader
 

00:25:12.870 --> 00:25:15.170
previous version of the class loader
with this override version and we'll

00:25:15.170 --> 00:25:15.180
with this override version and we'll
 

00:25:15.180 --> 00:25:16.880
with this override version and we'll
have a new one coming in place replacing

00:25:16.880 --> 00:25:16.890
have a new one coming in place replacing
 

00:25:16.890 --> 00:25:19.700
have a new one coming in place replacing
the food so once we have set up this

00:25:19.700 --> 00:25:19.710
the food so once we have set up this
 

00:25:19.710 --> 00:25:21.410
the food so once we have set up this
class loader we loaded the override

00:25:21.410 --> 00:25:21.420
class loader we loaded the override
 

00:25:21.420 --> 00:25:23.720
class loader we loaded the override
inside it as you can see all the methods

00:25:23.720 --> 00:25:23.730
inside it as you can see all the methods
 

00:25:23.730 --> 00:25:26.450
inside it as you can see all the methods
of the original class have been moved to

00:25:26.450 --> 00:25:26.460
of the original class have been moved to
 

00:25:26.460 --> 00:25:28.880
of the original class have been moved to
static methods on the override and the

00:25:28.880 --> 00:25:28.890
static methods on the override and the
 

00:25:28.890 --> 00:25:31.280
static methods on the override and the
new code is actually implemented within

00:25:31.280 --> 00:25:31.290
new code is actually implemented within
 

00:25:31.290 --> 00:25:34.970
new code is actually implemented within
these methods now we just have to do one

00:25:34.970 --> 00:25:34.980
these methods now we just have to do one
 

00:25:34.980 --> 00:25:37.070
these methods now we just have to do one
more thing it's to redirect so we

00:25:37.070 --> 00:25:37.080
more thing it's to redirect so we
 

00:25:37.080 --> 00:25:38.660
more thing it's to redirect so we
redirect from the original foo class

00:25:38.660 --> 00:25:38.670
redirect from the original foo class
 

00:25:38.670 --> 00:25:41.060
redirect from the original foo class
every method implementation to the new

00:25:41.060 --> 00:25:41.070
every method implementation to the new
 

00:25:41.070 --> 00:25:44.900
every method implementation to the new
one okay so that's how it works at a

00:25:44.900 --> 00:25:44.910
one okay so that's how it works at a
 

00:25:44.910 --> 00:25:46.760
one okay so that's how it works at a
very high level very simplistic

00:25:46.760 --> 00:25:46.770
very high level very simplistic
 

00:25:46.770 --> 00:25:48.770
very high level very simplistic
demonstration but very things to

00:25:48.770 --> 00:25:48.780
demonstration but very things to
 

00:25:48.780 --> 00:25:50.930
demonstration but very things to
understand is this concept of this

00:25:50.930 --> 00:25:50.940
understand is this concept of this
 

00:25:50.940 --> 00:25:52.550
understand is this concept of this
original class which never changes and

00:25:52.550 --> 00:25:52.560
original class which never changes and
 

00:25:52.560 --> 00:25:54.740
original class which never changes and
the override class which we can't change

00:25:54.740 --> 00:25:54.750
the override class which we can't change
 

00:25:54.750 --> 00:25:56.390
the override class which we can't change
many times one of the thing which is

00:25:56.390 --> 00:25:56.400
many times one of the thing which is
 

00:25:56.400 --> 00:25:58.130
many times one of the thing which is
important again is that if you create

00:25:58.130 --> 00:25:58.140
important again is that if you create
 

00:25:58.140 --> 00:26:00.560
important again is that if you create
more instances of this foo class we're

00:26:00.560 --> 00:26:00.570
more instances of this foo class we're
 

00:26:00.570 --> 00:26:02.540
more instances of this foo class we're
going to be using the original class so

00:26:02.540 --> 00:26:02.550
going to be using the original class so
 

00:26:02.550 --> 00:26:04.340
going to be using the original class so
the instances will all be coming from

00:26:04.340 --> 00:26:04.350
the instances will all be coming from
 

00:26:04.350 --> 00:26:05.690
the instances will all be coming from
the exact same class and it's

00:26:05.690 --> 00:26:05.700
the exact same class and it's
 

00:26:05.700 --> 00:26:07.220
the exact same class and it's
particularly important if you store them

00:26:07.220 --> 00:26:07.230
particularly important if you store them
 

00:26:07.230 --> 00:26:09.020
particularly important if you store them
in a you know collection you want them

00:26:09.020 --> 00:26:09.030
in a you know collection you want them
 

00:26:09.030 --> 00:26:11.600
in a you know collection you want them
to be of the same type right so again

00:26:11.600 --> 00:26:11.610
to be of the same type right so again
 

00:26:11.610 --> 00:26:13.250
to be of the same type right so again
remember that the foo class will remain

00:26:13.250 --> 00:26:13.260
remember that the foo class will remain
 

00:26:13.260 --> 00:26:15.110
remember that the foo class will remain
and all of the instances that will ever

00:26:15.110 --> 00:26:15.120
and all of the instances that will ever
 

00:26:15.120 --> 00:26:17.600
and all of the instances that will ever
be created will be from the original

00:26:17.600 --> 00:26:17.610
be created will be from the original
 

00:26:17.610 --> 00:26:21.170
be created will be from the original
class what does that mean first of all

00:26:21.170 --> 00:26:21.180
class what does that mean first of all
 

00:26:21.180 --> 00:26:24.290
class what does that mean first of all
the override class will appear in stack

00:26:24.290 --> 00:26:24.300
the override class will appear in stack
 

00:26:24.300 --> 00:26:25.340
the override class will appear in stack
traces

00:26:25.340 --> 00:26:25.350
traces
 

00:26:25.350 --> 00:26:28.159
traces
if you generate a stack trace and let's

00:26:28.159 --> 00:26:28.169
if you generate a stack trace and let's
 

00:26:28.169 --> 00:26:29.539
if you generate a stack trace and let's
have a nullpointerexception which is my

00:26:29.539 --> 00:26:29.549
have a nullpointerexception which is my
 

00:26:29.549 --> 00:26:32.360
have a nullpointerexception which is my
own favorite burg you will see the

00:26:32.360 --> 00:26:32.370
own favorite burg you will see the
 

00:26:32.370 --> 00:26:33.889
own favorite burg you will see the
override class in your stack tracer so

00:26:33.889 --> 00:26:33.899
override class in your stack tracer so
 

00:26:33.899 --> 00:26:35.299
override class in your stack tracer so
you shouldn't be surprised to see these

00:26:35.299 --> 00:26:35.309
you shouldn't be surprised to see these
 

00:26:35.309 --> 00:26:38.120
you shouldn't be surprised to see these
clusters appearing we could potentially

00:26:38.120 --> 00:26:38.130
clusters appearing we could potentially
 

00:26:38.130 --> 00:26:39.950
clusters appearing we could potentially
remove them but we decided that it's

00:26:39.950 --> 00:26:39.960
remove them but we decided that it's
 

00:26:39.960 --> 00:26:41.659
remove them but we decided that it's
probably better to not try to mess too

00:26:41.659 --> 00:26:41.669
probably better to not try to mess too
 

00:26:41.669 --> 00:26:43.909
probably better to not try to mess too
much with the stack tracing and and

00:26:43.909 --> 00:26:43.919
much with the stack tracing and and
 

00:26:43.919 --> 00:26:45.409
much with the stack tracing and and
leave it so we but you must be aware

00:26:45.409 --> 00:26:45.419
leave it so we but you must be aware
 

00:26:45.419 --> 00:26:49.039
leave it so we but you must be aware
that it may appear the more subtle thing

00:26:49.039 --> 00:26:49.049
that it may appear the more subtle thing
 

00:26:49.049 --> 00:26:52.999
that it may appear the more subtle thing
that may happen is that new method calls

00:26:52.999 --> 00:26:53.009
that may happen is that new method calls
 

00:26:53.009 --> 00:26:56.149
that may happen is that new method calls
only generate the only the new code is

00:26:56.149 --> 00:26:56.159
only generate the only the new code is
 

00:26:56.159 --> 00:26:58.100
only generate the only the new code is
only invoked through new method calls

00:26:58.100 --> 00:26:58.110
only invoked through new method calls
 

00:26:58.110 --> 00:27:00.769
only invoked through new method calls
that means that if you are you know

00:27:00.769 --> 00:27:00.779
that means that if you are you know
 

00:27:00.779 --> 00:27:02.930
that means that if you are you know
running a particular method and you have

00:27:02.930 --> 00:27:02.940
running a particular method and you have
 

00:27:02.940 --> 00:27:05.539
running a particular method and you have
a while loop or a for loop inside it and

00:27:05.539 --> 00:27:05.549
a while loop or a for loop inside it and
 

00:27:05.549 --> 00:27:08.379
a while loop or a for loop inside it and
you change that class implementation

00:27:08.379 --> 00:27:08.389
you change that class implementation
 

00:27:08.389 --> 00:27:12.049
you change that class implementation
it's not going to change the thread

00:27:12.049 --> 00:27:12.059
it's not going to change the thread
 

00:27:12.059 --> 00:27:13.490
it's not going to change the thread
which is actually running the current

00:27:13.490 --> 00:27:13.500
which is actually running the current
 

00:27:13.500 --> 00:27:15.379
which is actually running the current
version of the code right only when

00:27:15.379 --> 00:27:15.389
version of the code right only when
 

00:27:15.389 --> 00:27:16.580
version of the code right only when
somebody else is going to call that

00:27:16.580 --> 00:27:16.590
somebody else is going to call that
 

00:27:16.590 --> 00:27:19.850
somebody else is going to call that
method will the new code kicking so

00:27:19.850 --> 00:27:19.860
method will the new code kicking so
 

00:27:19.860 --> 00:27:21.110
method will the new code kicking so
that's particularly tricky when you

00:27:21.110 --> 00:27:21.120
that's particularly tricky when you
 

00:27:21.120 --> 00:27:23.629
that's particularly tricky when you
think about recursive calls so a first

00:27:23.629 --> 00:27:23.639
think about recursive calls so a first
 

00:27:23.639 --> 00:27:25.730
think about recursive calls so a first
recursive call say is going to call it

00:27:25.730 --> 00:27:25.740
recursive call say is going to call it
 

00:27:25.740 --> 00:27:27.499
recursive call say is going to call it
self hundred times the first ten times

00:27:27.499 --> 00:27:27.509
self hundred times the first ten times
 

00:27:27.509 --> 00:27:29.450
self hundred times the first ten times
it call its himself it's the old version

00:27:29.450 --> 00:27:29.460
it call its himself it's the old version
 

00:27:29.460 --> 00:27:31.460
it call its himself it's the old version
of the class now suddenly you're going

00:27:31.460 --> 00:27:31.470
of the class now suddenly you're going
 

00:27:31.470 --> 00:27:33.320
of the class now suddenly you're going
to swap the class and it's going to

00:27:33.320 --> 00:27:33.330
to swap the class and it's going to
 

00:27:33.330 --> 00:27:35.119
to swap the class and it's going to
start calling the method that's again

00:27:35.119 --> 00:27:35.129
start calling the method that's again
 

00:27:35.129 --> 00:27:36.499
start calling the method that's again
and because it's a new call of a method

00:27:36.499 --> 00:27:36.509
and because it's a new call of a method
 

00:27:36.509 --> 00:27:38.180
and because it's a new call of a method
it's going to kick in into the new

00:27:38.180 --> 00:27:38.190
it's going to kick in into the new
 

00:27:38.190 --> 00:27:40.249
it's going to kick in into the new
implementation you just provided so it's

00:27:40.249 --> 00:27:40.259
implementation you just provided so it's
 

00:27:40.259 --> 00:27:41.840
implementation you just provided so it's
going to call itself 90 times with this

00:27:41.840 --> 00:27:41.850
going to call itself 90 times with this
 

00:27:41.850 --> 00:27:44.180
going to call itself 90 times with this
new code but then as it will come back

00:27:44.180 --> 00:27:44.190
new code but then as it will come back
 

00:27:44.190 --> 00:27:46.399
new code but then as it will come back
and unwind the tail of your recursive

00:27:46.399 --> 00:27:46.409
and unwind the tail of your recursive
 

00:27:46.409 --> 00:27:48.049
and unwind the tail of your recursive
calls it's going to come back to the

00:27:48.049 --> 00:27:48.059
calls it's going to come back to the
 

00:27:48.059 --> 00:27:50.690
calls it's going to come back to the
original method implementation so you

00:27:50.690 --> 00:27:50.700
original method implementation so you
 

00:27:50.700 --> 00:27:52.220
original method implementation so you
can see here this is getting into really

00:27:52.220 --> 00:27:52.230
can see here this is getting into really
 

00:27:52.230 --> 00:27:54.560
can see here this is getting into really
muddy territory and you should be aware

00:27:54.560 --> 00:27:54.570
muddy territory and you should be aware
 

00:27:54.570 --> 00:27:56.749
muddy territory and you should be aware
that you know you could have surprising

00:27:56.749 --> 00:27:56.759
that you know you could have surprising
 

00:27:56.759 --> 00:27:58.369
that you know you could have surprising
results when you start missing obviously

00:27:58.369 --> 00:27:58.379
results when you start missing obviously
 

00:27:58.379 --> 00:28:01.460
results when you start missing obviously
the implementations the best way when

00:28:01.460 --> 00:28:01.470
the implementations the best way when
 

00:28:01.470 --> 00:28:02.930
the implementations the best way when
you think this kind of stuff happening

00:28:02.930 --> 00:28:02.940
you think this kind of stuff happening
 

00:28:02.940 --> 00:28:05.570
you think this kind of stuff happening
is just to force a code with start which

00:28:05.570 --> 00:28:05.580
is just to force a code with start which
 

00:28:05.580 --> 00:28:06.529
is just to force a code with start which
is basically you stop the application

00:28:06.529 --> 00:28:06.539
is basically you stop the application
 

00:28:06.539 --> 00:28:09.289
is basically you stop the application
and you restart it I don't expect this

00:28:09.289 --> 00:28:09.299
and you restart it I don't expect this
 

00:28:09.299 --> 00:28:10.460
and you restart it I don't expect this
is going to happen very often because

00:28:10.460 --> 00:28:10.470
is going to happen very often because
 

00:28:10.470 --> 00:28:12.470
is going to happen very often because
there's not that many recursive calls or

00:28:12.470 --> 00:28:12.480
there's not that many recursive calls or
 

00:28:12.480 --> 00:28:14.330
there's not that many recursive calls or
stuff like that happening in Android

00:28:14.330 --> 00:28:14.340
stuff like that happening in Android
 

00:28:14.340 --> 00:28:16.009
stuff like that happening in Android
world but something you should be aware

00:28:16.009 --> 00:28:16.019
world but something you should be aware
 

00:28:16.019 --> 00:28:21.110
world but something you should be aware
of again I already touched it methods

00:28:21.110 --> 00:28:21.120
of again I already touched it methods
 

00:28:21.120 --> 00:28:23.119
of again I already touched it methods
are replaced not really

00:28:23.119 --> 00:28:23.129
are replaced not really
 

00:28:23.129 --> 00:28:25.549
are replaced not really
classes are reloaded right we do not

00:28:25.549 --> 00:28:25.559
classes are reloaded right we do not
 

00:28:25.559 --> 00:28:27.110
classes are reloaded right we do not
reload classes I know it sounds like we

00:28:27.110 --> 00:28:27.120
reload classes I know it sounds like we
 

00:28:27.120 --> 00:28:28.789
reload classes I know it sounds like we
are reloading classes but we really are

00:28:28.789 --> 00:28:28.799
are reloading classes but we really are
 

00:28:28.799 --> 00:28:30.860
are reloading classes but we really are
not we are replacing method

00:28:30.860 --> 00:28:30.870
not we are replacing method
 

00:28:30.870 --> 00:28:33.619
not we are replacing method
implementations so classes already wants

00:28:33.619 --> 00:28:33.629
implementations so classes already wants
 

00:28:33.629 --> 00:28:35.330
implementations so classes already wants
what does that mean that means the class

00:28:35.330 --> 00:28:35.340
what does that mean that means the class
 

00:28:35.340 --> 00:28:37.370
what does that mean that means the class
initializer is only

00:28:37.370 --> 00:28:37.380
initializer is only
 

00:28:37.380 --> 00:28:40.310
initializer is only
run once and if you change your class

00:28:40.310 --> 00:28:40.320
run once and if you change your class
 

00:28:40.320 --> 00:28:43.160
run once and if you change your class
initializer we will flag this as an

00:28:43.160 --> 00:28:43.170
initializer we will flag this as an
 

00:28:43.170 --> 00:28:44.840
initializer we will flag this as an
incompatible change as you know by now

00:28:44.840 --> 00:28:44.850
incompatible change as you know by now
 

00:28:44.850 --> 00:28:46.640
incompatible change as you know by now
the instant run technology is on is

00:28:46.640 --> 00:28:46.650
the instant run technology is on is
 

00:28:46.650 --> 00:28:48.110
the instant run technology is on is
reporting basically changing method

00:28:48.110 --> 00:28:48.120
reporting basically changing method
 

00:28:48.120 --> 00:28:50.330
reporting basically changing method
implementations but if you change a

00:28:50.330 --> 00:28:50.340
implementations but if you change a
 

00:28:50.340 --> 00:28:52.040
implementations but if you change a
field or if you add or remove a method

00:28:52.040 --> 00:28:52.050
field or if you add or remove a method
 

00:28:52.050 --> 00:28:53.210
field or if you add or remove a method
we will actually restart the application

00:28:53.210 --> 00:28:53.220
we will actually restart the application
 

00:28:53.220 --> 00:28:55.280
we will actually restart the application
for you same thing for the class

00:28:55.280 --> 00:28:55.290
for you same thing for the class
 

00:28:55.290 --> 00:28:56.720
for you same thing for the class
initializer if it changes we will

00:28:56.720 --> 00:28:56.730
initializer if it changes we will
 

00:28:56.730 --> 00:28:58.190
initializer if it changes we will
restart to the application because

00:28:58.190 --> 00:28:58.200
restart to the application because
 

00:28:58.200 --> 00:29:00.010
restart to the application because
because it's an incompatible change

00:29:00.010 --> 00:29:00.020
because it's an incompatible change
 

00:29:00.020 --> 00:29:02.390
because it's an incompatible change
static variables are not relational is

00:29:02.390 --> 00:29:02.400
static variables are not relational is
 

00:29:02.400 --> 00:29:04.670
static variables are not relational is
easier so if you have a class and you

00:29:04.670 --> 00:29:04.680
easier so if you have a class and you
 

00:29:04.680 --> 00:29:06.140
easier so if you have a class and you
have some static variables which are not

00:29:06.140 --> 00:29:06.150
have some static variables which are not
 

00:29:06.150 --> 00:29:07.850
have some static variables which are not
final and you started changing their

00:29:07.850 --> 00:29:07.860
final and you started changing their
 

00:29:07.860 --> 00:29:09.080
final and you started changing their
values through the code

00:29:09.080 --> 00:29:09.090
values through the code
 

00:29:09.090 --> 00:29:11.960
values through the code
suddenly you add swap that particular

00:29:11.960 --> 00:29:11.970
suddenly you add swap that particular
 

00:29:11.970 --> 00:29:14.540
suddenly you add swap that particular
class version to a new version even if

00:29:14.540 --> 00:29:14.550
class version to a new version even if
 

00:29:14.550 --> 00:29:16.750
class version to a new version even if
the code that was actually initializing

00:29:16.750 --> 00:29:16.760
the code that was actually initializing
 

00:29:16.760 --> 00:29:20.090
the code that was actually initializing
this these values in the run it's not

00:29:20.090 --> 00:29:20.100
this these values in the run it's not
 

00:29:20.100 --> 00:29:21.530
this these values in the run it's not
going to change the values of those

00:29:21.530 --> 00:29:21.540
going to change the values of those
 

00:29:21.540 --> 00:29:23.120
going to change the values of those
static fields all right so you should

00:29:23.120 --> 00:29:23.130
static fields all right so you should
 

00:29:23.130 --> 00:29:26.690
static fields all right so you should
not expect things to be reinitialized

00:29:26.690 --> 00:29:26.700
not expect things to be reinitialized
 

00:29:26.700 --> 00:29:28.460
not expect things to be reinitialized
again you know the class has already

00:29:28.460 --> 00:29:28.470
again you know the class has already
 

00:29:28.470 --> 00:29:30.740
again you know the class has already
been loaded it's just going to continue

00:29:30.740 --> 00:29:30.750
been loaded it's just going to continue
 

00:29:30.750 --> 00:29:33.950
been loaded it's just going to continue
living its life same thing for instances

00:29:33.950 --> 00:29:33.960
living its life same thing for instances
 

00:29:33.960 --> 00:29:36.590
living its life same thing for instances
you may have already created instances

00:29:36.590 --> 00:29:36.600
you may have already created instances
 

00:29:36.600 --> 00:29:37.910
you may have already created instances
of the class that you are going to

00:29:37.910 --> 00:29:37.920
of the class that you are going to
 

00:29:37.920 --> 00:29:40.490
of the class that you are going to
update and we are not like destroying

00:29:40.490 --> 00:29:40.500
update and we are not like destroying
 

00:29:40.500 --> 00:29:42.170
update and we are not like destroying
those instances or trying to extract

00:29:42.170 --> 00:29:42.180
those instances or trying to extract
 

00:29:42.180 --> 00:29:43.610
those instances or trying to extract
their fields values and putting them

00:29:43.610 --> 00:29:43.620
their fields values and putting them
 

00:29:43.620 --> 00:29:46.340
their fields values and putting them
into some new objects no those instances

00:29:46.340 --> 00:29:46.350
into some new objects no those instances
 

00:29:46.350 --> 00:29:49.220
into some new objects no those instances
stays around and the instances fields

00:29:49.220 --> 00:29:49.230
stays around and the instances fields
 

00:29:49.230 --> 00:29:51.470
stays around and the instances fields
remain at the same values that your

00:29:51.470 --> 00:29:51.480
remain at the same values that your
 

00:29:51.480 --> 00:29:53.320
remain at the same values that your
application that already said them

00:29:53.320 --> 00:29:53.330
application that already said them
 

00:29:53.330 --> 00:29:55.910
application that already said them
that's also very true of course for

00:29:55.910 --> 00:29:55.920
that's also very true of course for
 

00:29:55.920 --> 00:29:57.500
that's also very true of course for
singleton objects again that's kind of a

00:29:57.500 --> 00:29:57.510
singleton objects again that's kind of a
 

00:29:57.510 --> 00:29:59.900
singleton objects again that's kind of a
situation where you could expect or you

00:29:59.900 --> 00:29:59.910
situation where you could expect or you
 

00:29:59.910 --> 00:30:02.660
situation where you could expect or you
possibly would expect that because it's

00:30:02.660 --> 00:30:02.670
possibly would expect that because it's
 

00:30:02.670 --> 00:30:04.100
possibly would expect that because it's
a singleton object somehow we're going

00:30:04.100 --> 00:30:04.110
a singleton object somehow we're going
 

00:30:04.110 --> 00:30:06.170
a singleton object somehow we're going
to recreate it with the new version of

00:30:06.170 --> 00:30:06.180
to recreate it with the new version of
 

00:30:06.180 --> 00:30:08.750
to recreate it with the new version of
the class no we are not it's going to be

00:30:08.750 --> 00:30:08.760
the class no we are not it's going to be
 

00:30:08.760 --> 00:30:10.400
the class no we are not it's going to be
the same singleton object the only

00:30:10.400 --> 00:30:10.410
the same singleton object the only
 

00:30:10.410 --> 00:30:12.080
the same singleton object the only
difference is that all of its method

00:30:12.080 --> 00:30:12.090
difference is that all of its method
 

00:30:12.090 --> 00:30:13.550
difference is that all of its method
implementation would be redirected to

00:30:13.550 --> 00:30:13.560
implementation would be redirected to
 

00:30:13.560 --> 00:30:16.100
implementation would be redirected to
the new code so if you are initializing

00:30:16.100 --> 00:30:16.110
the new code so if you are initializing
 

00:30:16.110 --> 00:30:17.450
the new code so if you are initializing
the fields of your selection of your

00:30:17.450 --> 00:30:17.460
the fields of your selection of your
 

00:30:17.460 --> 00:30:19.580
the fields of your selection of your
singleton object a certain way don't

00:30:19.580 --> 00:30:19.590
singleton object a certain way don't
 

00:30:19.590 --> 00:30:22.520
singleton object a certain way don't
expect it to be reset just because you

00:30:22.520 --> 00:30:22.530
expect it to be reset just because you
 

00:30:22.530 --> 00:30:24.800
expect it to be reset just because you
change the constructor in the new

00:30:24.800 --> 00:30:24.810
change the constructor in the new
 

00:30:24.810 --> 00:30:26.240
change the constructor in the new
version of the class sure the

00:30:26.240 --> 00:30:26.250
version of the class sure the
 

00:30:26.250 --> 00:30:28.040
version of the class sure the
constructor would set the fields to the

00:30:28.040 --> 00:30:28.050
constructor would set the fields to the
 

00:30:28.050 --> 00:30:30.170
constructor would set the fields to the
new values if it was to be executive but

00:30:30.170 --> 00:30:30.180
new values if it was to be executive but
 

00:30:30.180 --> 00:30:31.910
new values if it was to be executive but
because it's a singleton it's not going

00:30:31.910 --> 00:30:31.920
because it's a singleton it's not going
 

00:30:31.920 --> 00:30:33.740
because it's a singleton it's not going
to be executed therefore you're going to

00:30:33.740 --> 00:30:33.750
to be executed therefore you're going to
 

00:30:33.750 --> 00:30:36.320
to be executed therefore you're going to
get the old fields values so it's

00:30:36.320 --> 00:30:36.330
get the old fields values so it's
 

00:30:36.330 --> 00:30:39.740
get the old fields values so it's
important to understand all of this at

00:30:39.740 --> 00:30:39.750
important to understand all of this at
 

00:30:39.750 --> 00:30:40.910
important to understand all of this at
the end of the day you should not worry

00:30:40.910 --> 00:30:40.920
the end of the day you should not worry
 

00:30:40.920 --> 00:30:42.440
the end of the day you should not worry
too much about it but it's possible that

00:30:42.440 --> 00:30:42.450
too much about it but it's possible that
 

00:30:42.450 --> 00:30:43.700
too much about it but it's possible that
sometimes your application does not

00:30:43.700 --> 00:30:43.710
sometimes your application does not
 

00:30:43.710 --> 00:30:45.830
sometimes your application does not
really behave that the way you think it

00:30:45.830 --> 00:30:45.840
really behave that the way you think it
 

00:30:45.840 --> 00:30:49.190
really behave that the way you think it
should go and that's most likely because

00:30:49.190 --> 00:30:49.200
should go and that's most likely because
 

00:30:49.200 --> 00:30:50.700
should go and that's most likely because
maybe the code you've just modify

00:30:50.700 --> 00:30:50.710
maybe the code you've just modify
 

00:30:50.710 --> 00:30:52.830
maybe the code you've just modify
does not work well with the state of the

00:30:52.830 --> 00:30:52.840
does not work well with the state of the
 

00:30:52.840 --> 00:30:54.539
does not work well with the state of the
application it's in you should just

00:30:54.539 --> 00:30:54.549
application it's in you should just
 

00:30:54.549 --> 00:30:59.250
application it's in you should just
restart in such cases all right we also

00:30:59.250 --> 00:30:59.260
restart in such cases all right we also
 

00:30:59.260 --> 00:31:00.690
restart in such cases all right we also
want to talk a little bit about recipes

00:31:00.690 --> 00:31:00.700
want to talk a little bit about recipes
 

00:31:00.700 --> 00:31:03.029
want to talk a little bit about recipes
so these are important things that we

00:31:03.029 --> 00:31:03.039
so these are important things that we
 

00:31:03.039 --> 00:31:04.919
so these are important things that we
would like to raise awareness about and

00:31:04.919 --> 00:31:04.929
would like to raise awareness about and
 

00:31:04.929 --> 00:31:10.019
would like to raise awareness about and
the first one is no way of generating

00:31:10.019 --> 00:31:10.029
the first one is no way of generating
 

00:31:10.029 --> 00:31:13.169
the first one is no way of generating
multi-apk switch IBI specifics so in the

00:31:13.169 --> 00:31:13.179
multi-apk switch IBI specifics so in the
 

00:31:13.179 --> 00:31:14.700
multi-apk switch IBI specifics so in the
past when you wanted to have to reduce

00:31:14.700 --> 00:31:14.710
past when you wanted to have to reduce
 

00:31:14.710 --> 00:31:16.740
past when you wanted to have to reduce
the size of your apks one of the trick

00:31:16.740 --> 00:31:16.750
the size of your apks one of the trick
 

00:31:16.750 --> 00:31:18.810
the size of your apks one of the trick
was to say I want to have an apk which

00:31:18.810 --> 00:31:18.820
was to say I want to have an apk which
 

00:31:18.820 --> 00:31:20.700
was to say I want to have an apk which
is specific to a particular ABI and I'm

00:31:20.700 --> 00:31:20.710
is specific to a particular ABI and I'm
 

00:31:20.710 --> 00:31:23.010
is specific to a particular ABI and I'm
only going to be supporting the 86 in

00:31:23.010 --> 00:31:23.020
only going to be supporting the 86 in
 

00:31:23.020 --> 00:31:24.810
only going to be supporting the 86 in
this particular case where I'm going to

00:31:24.810 --> 00:31:24.820
this particular case where I'm going to
 

00:31:24.820 --> 00:31:26.490
this particular case where I'm going to
be shipping only the daughter so far

00:31:26.490 --> 00:31:26.500
be shipping only the daughter so far
 

00:31:26.500 --> 00:31:28.200
be shipping only the daughter so far
that I'm running for this particular ABI

00:31:28.200 --> 00:31:28.210
that I'm running for this particular ABI
 

00:31:28.210 --> 00:31:31.740
that I'm running for this particular ABI
and in this example you can also specify

00:31:31.740 --> 00:31:31.750
and in this example you can also specify
 

00:31:31.750 --> 00:31:33.450
and in this example you can also specify
that you want to the full which would

00:31:33.450 --> 00:31:33.460
that you want to the full which would
 

00:31:33.460 --> 00:31:36.289
that you want to the full which would
have the ability to run on any possible

00:31:36.289 --> 00:31:36.299
have the ability to run on any possible
 

00:31:36.299 --> 00:31:39.799
have the ability to run on any possible
devices irrespective of its particular

00:31:39.799 --> 00:31:39.809
devices irrespective of its particular
 

00:31:39.809 --> 00:31:43.169
devices irrespective of its particular
ABI however it would be obviously a very

00:31:43.169 --> 00:31:43.179
ABI however it would be obviously a very
 

00:31:43.179 --> 00:31:46.110
ABI however it would be obviously a very
big apk so in the newer version you

00:31:46.110 --> 00:31:46.120
big apk so in the newer version you
 

00:31:46.120 --> 00:31:47.970
big apk so in the newer version you
should use product letters for that you

00:31:47.970 --> 00:31:47.980
should use product letters for that you
 

00:31:47.980 --> 00:31:49.260
should use product letters for that you
should use pull up forevers to define

00:31:49.260 --> 00:31:49.270
should use pull up forevers to define
 

00:31:49.270 --> 00:31:51.269
should use pull up forevers to define
your applications and not how we package

00:31:51.269 --> 00:31:51.279
your applications and not how we package
 

00:31:51.279 --> 00:31:53.940
your applications and not how we package
the resulting apk in the new way of

00:31:53.940 --> 00:31:53.950
the resulting apk in the new way of
 

00:31:53.950 --> 00:31:55.500
the resulting apk in the new way of
doing things is by using these new

00:31:55.500 --> 00:31:55.510
doing things is by using these new
 

00:31:55.510 --> 00:31:58.860
doing things is by using these new
splits declarations inside your your

00:31:58.860 --> 00:31:58.870
splits declarations inside your your
 

00:31:58.870 --> 00:32:01.470
splits declarations inside your your
model inside the DSL and the way to do

00:32:01.470 --> 00:32:01.480
model inside the DSL and the way to do
 

00:32:01.480 --> 00:32:04.710
model inside the DSL and the way to do
that is by either using ABI densities or

00:32:04.710 --> 00:32:04.720
that is by either using ABI densities or
 

00:32:04.720 --> 00:32:07.110
that is by either using ABI densities or
language depending on which type of apk

00:32:07.110 --> 00:32:07.120
language depending on which type of apk
 

00:32:07.120 --> 00:32:08.730
language depending on which type of apk
you'd like and what it's going to

00:32:08.730 --> 00:32:08.740
you'd like and what it's going to
 

00:32:08.740 --> 00:32:10.919
you'd like and what it's going to
generate in this particular case is for

00:32:10.919 --> 00:32:10.929
generate in this particular case is for
 

00:32:10.929 --> 00:32:13.470
generate in this particular case is for
apks 3d case will be specific to a

00:32:13.470 --> 00:32:13.480
apks 3d case will be specific to a
 

00:32:13.480 --> 00:32:17.220
apks 3d case will be specific to a
particular ABI 86 arm mips and one will

00:32:17.220 --> 00:32:17.230
particular ABI 86 arm mips and one will
 

00:32:17.230 --> 00:32:18.600
particular ABI 86 arm mips and one will
be the universal one again which

00:32:18.600 --> 00:32:18.610
be the universal one again which
 

00:32:18.610 --> 00:32:23.659
be the universal one again which
contains all the possible ABI XO files

00:32:23.659 --> 00:32:23.669
contains all the possible ABI XO files
 

00:32:23.669 --> 00:32:27.149
contains all the possible ABI XO files
this way you will get a much smaller apk

00:32:27.149 --> 00:32:27.159
this way you will get a much smaller apk
 

00:32:27.159 --> 00:32:28.980
this way you will get a much smaller apk
each time and you do not pollute your

00:32:28.980 --> 00:32:28.990
each time and you do not pollute your
 

00:32:28.990 --> 00:32:30.630
each time and you do not pollute your
project the Claridge the products flavor

00:32:30.630 --> 00:32:30.640
project the Claridge the products flavor
 

00:32:30.640 --> 00:32:34.680
project the Claridge the products flavor
declaration as you had to do before next

00:32:34.680 --> 00:32:34.690
declaration as you had to do before next
 

00:32:34.690 --> 00:32:37.139
declaration as you had to do before next
one is the rest of chancre so from many

00:32:37.139 --> 00:32:37.149
one is the rest of chancre so from many
 

00:32:37.149 --> 00:32:39.240
one is the rest of chancre so from many
years we've had the ability to shrink

00:32:39.240 --> 00:32:39.250
years we've had the ability to shrink
 

00:32:39.250 --> 00:32:42.269
years we've had the ability to shrink
the code using ProGuard and that's

00:32:42.269 --> 00:32:42.279
the code using ProGuard and that's
 

00:32:42.279 --> 00:32:43.710
the code using ProGuard and that's
particularly useful when you import a

00:32:43.710 --> 00:32:43.720
particularly useful when you import a
 

00:32:43.720 --> 00:32:46.260
particularly useful when you import a
library and you may be only using 5% of

00:32:46.260 --> 00:32:46.270
library and you may be only using 5% of
 

00:32:46.270 --> 00:32:49.019
library and you may be only using 5% of
the library facilities you don't want to

00:32:49.019 --> 00:32:49.029
the library facilities you don't want to
 

00:32:49.029 --> 00:32:50.549
the library facilities you don't want to
ship all the code associated with that

00:32:50.549 --> 00:32:50.559
ship all the code associated with that
 

00:32:50.559 --> 00:32:52.409
ship all the code associated with that
library so you use log out and you kind

00:32:52.409 --> 00:32:52.419
library so you use log out and you kind
 

00:32:52.419 --> 00:32:53.730
library so you use log out and you kind
of strip all the code that you're not

00:32:53.730 --> 00:32:53.740
of strip all the code that you're not
 

00:32:53.740 --> 00:32:55.799
of strip all the code that you're not
using however it was not stripping the

00:32:55.799 --> 00:32:55.809
using however it was not stripping the
 

00:32:55.809 --> 00:32:57.330
using however it was not stripping the
resources associated with that

00:32:57.330 --> 00:32:57.340
resources associated with that
 

00:32:57.340 --> 00:32:59.279
resources associated with that
particular code that is being stripped

00:32:59.279 --> 00:32:59.289
particular code that is being stripped
 

00:32:59.289 --> 00:33:02.279
particular code that is being stripped
so we now have the ability to have a

00:33:02.279 --> 00:33:02.289
so we now have the ability to have a
 

00:33:02.289 --> 00:33:03.430
so we now have the ability to have a
resource anchor

00:33:03.430 --> 00:33:03.440
resource anchor
 

00:33:03.440 --> 00:33:06.039
resource anchor
that you can get that can be key back on

00:33:06.039 --> 00:33:06.049
that you can get that can be key back on
 

00:33:06.049 --> 00:33:08.799
that you can get that can be key back on
the actual program pile to figure out

00:33:08.799 --> 00:33:08.809
the actual program pile to figure out
 

00:33:08.809 --> 00:33:10.180
the actual program pile to figure out
what are the classes that are really

00:33:10.180 --> 00:33:10.190
what are the classes that are really
 

00:33:10.190 --> 00:33:12.220
what are the classes that are really
necessary for the application and which

00:33:12.220 --> 00:33:12.230
necessary for the application and which
 

00:33:12.230 --> 00:33:15.009
necessary for the application and which
are not necessary and make educated

00:33:15.009 --> 00:33:15.019
are not necessary and make educated
 

00:33:15.019 --> 00:33:17.230
are not necessary and make educated
decisions about whether or not some

00:33:17.230 --> 00:33:17.240
decisions about whether or not some
 

00:33:17.240 --> 00:33:19.539
decisions about whether or not some
resources are necessary so when you use

00:33:19.539 --> 00:33:19.549
resources are necessary so when you use
 

00:33:19.549 --> 00:33:21.580
resources are necessary so when you use
ProGuard to release your your

00:33:21.580 --> 00:33:21.590
ProGuard to release your your
 

00:33:21.590 --> 00:33:23.379
ProGuard to release your your
application you should most likely

00:33:23.379 --> 00:33:23.389
application you should most likely
 

00:33:23.389 --> 00:33:25.299
application you should most likely
always think your resources and it's

00:33:25.299 --> 00:33:25.309
always think your resources and it's
 

00:33:25.309 --> 00:33:27.730
always think your resources and it's
going to result in a much smaller apk

00:33:27.730 --> 00:33:27.740
going to result in a much smaller apk
 

00:33:27.740 --> 00:33:31.619
going to result in a much smaller apk
size which is great for for for users

00:33:31.619 --> 00:33:31.629
size which is great for for for users
 

00:33:31.629 --> 00:33:34.180
size which is great for for for users
next one I think is back to Michael

00:33:34.180 --> 00:33:34.190
next one I think is back to Michael
 

00:33:34.190 --> 00:33:38.019
next one I think is back to Michael
thank you thank you oh yeah this one

00:33:38.019 --> 00:33:38.029
thank you thank you oh yeah this one
 

00:33:38.029 --> 00:33:39.909
thank you thank you oh yeah this one
most of you probably already figured out

00:33:39.909 --> 00:33:39.919
most of you probably already figured out
 

00:33:39.919 --> 00:33:42.299
most of you probably already figured out
but let me just talk about it real quick

00:33:42.299 --> 00:33:42.309
but let me just talk about it real quick
 

00:33:42.309 --> 00:33:44.740
but let me just talk about it real quick
if your project has multiple sub

00:33:44.740 --> 00:33:44.750
if your project has multiple sub
 

00:33:44.750 --> 00:33:46.539
if your project has multiple sub
projects it's a very good idea to share

00:33:46.539 --> 00:33:46.549
projects it's a very good idea to share
 

00:33:46.549 --> 00:33:48.669
projects it's a very good idea to share
the same versions of dependencies and

00:33:48.669 --> 00:33:48.679
the same versions of dependencies and
 

00:33:48.679 --> 00:33:51.340
the same versions of dependencies and
your SDK levels and tools version

00:33:51.340 --> 00:33:51.350
your SDK levels and tools version
 

00:33:51.350 --> 00:33:53.409
your SDK levels and tools version
between all those projects so the way we

00:33:53.409 --> 00:33:53.419
between all those projects so the way we
 

00:33:53.419 --> 00:33:55.119
between all those projects so the way we
recommend you do it is using the Gradle

00:33:55.119 --> 00:33:55.129
recommend you do it is using the Gradle
 

00:33:55.129 --> 00:33:57.549
recommend you do it is using the Gradle
extensions mechanism that is used the

00:33:57.549 --> 00:33:57.559
extensions mechanism that is used the
 

00:33:57.559 --> 00:33:59.950
extensions mechanism that is used the
ext block in your root top-level

00:33:59.950 --> 00:33:59.960
ext block in your root top-level
 

00:33:59.960 --> 00:34:03.190
ext block in your root top-level
Gradle file and then inside this block

00:34:03.190 --> 00:34:03.200
Gradle file and then inside this block
 

00:34:03.200 --> 00:34:05.440
Gradle file and then inside this block
you can create properties to call the

00:34:05.440 --> 00:34:05.450
you can create properties to call the
 

00:34:05.450 --> 00:34:07.299
you can create properties to call the
constants you want to share you may want

00:34:07.299 --> 00:34:07.309
constants you want to share you may want
 

00:34:07.309 --> 00:34:09.520
constants you want to share you may want
to use the groovy syntax for defining

00:34:09.520 --> 00:34:09.530
to use the groovy syntax for defining
 

00:34:09.530 --> 00:34:12.190
to use the groovy syntax for defining
Maps like I did here for depth and then

00:34:12.190 --> 00:34:12.200
Maps like I did here for depth and then
 

00:34:12.200 --> 00:34:13.839
Maps like I did here for depth and then
you can reference those values using the

00:34:13.839 --> 00:34:13.849
you can reference those values using the
 

00:34:13.849 --> 00:34:16.629
you can reference those values using the
root project prefix in the other you

00:34:16.629 --> 00:34:16.639
root project prefix in the other you
 

00:34:16.639 --> 00:34:20.020
root project prefix in the other you
know in all your other build files ok

00:34:20.020 --> 00:34:20.030
know in all your other build files ok
 

00:34:20.030 --> 00:34:22.149
know in all your other build files ok
another tricky part that sometimes

00:34:22.149 --> 00:34:22.159
another tricky part that sometimes
 

00:34:22.159 --> 00:34:23.589
another tricky part that sometimes
people are surprised about is the

00:34:23.589 --> 00:34:23.599
people are surprised about is the
 

00:34:23.599 --> 00:34:26.260
people are surprised about is the
scoping crawls in in build files so as

00:34:26.260 --> 00:34:26.270
scoping crawls in in build files so as
 

00:34:26.270 --> 00:34:28.450
scoping crawls in in build files so as
much as groovy scoping has its edge

00:34:28.450 --> 00:34:28.460
much as groovy scoping has its edge
 

00:34:28.460 --> 00:34:30.579
much as groovy scoping has its edge
cases the basics are the same as you

00:34:30.579 --> 00:34:30.589
cases the basics are the same as you
 

00:34:30.589 --> 00:34:33.159
cases the basics are the same as you
know from Java so the dependencies block

00:34:33.159 --> 00:34:33.169
know from Java so the dependencies block
 

00:34:33.169 --> 00:34:35.800
know from Java so the dependencies block
in the current plugins I've mentioned

00:34:35.800 --> 00:34:35.810
in the current plugins I've mentioned
 

00:34:35.810 --> 00:34:37.300
in the current plugins I've mentioned
the things are actually bit different in

00:34:37.300 --> 00:34:37.310
the things are actually bit different in
 

00:34:37.310 --> 00:34:38.919
the things are actually bit different in
the new plugin but in the current plugin

00:34:38.919 --> 00:34:38.929
the new plugin but in the current plugin
 

00:34:38.929 --> 00:34:40.960
the new plugin but in the current plugin
the dependencies block is a top-level

00:34:40.960 --> 00:34:40.970
the dependencies block is a top-level
 

00:34:40.970 --> 00:34:43.389
the dependencies block is a top-level
property of the overall project context

00:34:43.389 --> 00:34:43.399
property of the overall project context
 

00:34:43.399 --> 00:34:45.970
property of the overall project context
so the fact that you reference it from

00:34:45.970 --> 00:34:45.980
so the fact that you reference it from
 

00:34:45.980 --> 00:34:47.950
so the fact that you reference it from
some nested call deep within the hundred

00:34:47.950 --> 00:34:47.960
some nested call deep within the hundred
 

00:34:47.960 --> 00:34:49.809
some nested call deep within the hundred
block doesn't really change the meaning

00:34:49.809 --> 00:34:49.819
block doesn't really change the meaning
 

00:34:49.819 --> 00:34:52.809
block doesn't really change the meaning
of the call so that even if you would

00:34:52.809 --> 00:34:52.819
of the call so that even if you would
 

00:34:52.819 --> 00:34:55.569
of the call so that even if you would
expect this code on the screen to add a

00:34:55.569 --> 00:34:55.579
expect this code on the screen to add a
 

00:34:55.579 --> 00:34:57.550
expect this code on the screen to add a
dependency only to the given flavor the

00:34:57.550 --> 00:34:57.560
dependency only to the given flavor the
 

00:34:57.560 --> 00:34:59.440
dependency only to the given flavor the
free flavor it doesn't actually do that

00:34:59.440 --> 00:34:59.450
free flavor it doesn't actually do that
 

00:34:59.450 --> 00:35:00.880
free flavor it doesn't actually do that
why should what you should be doing

00:35:00.880 --> 00:35:00.890
why should what you should be doing
 

00:35:00.890 --> 00:35:03.250
why should what you should be doing
instead is put the dependencies block at

00:35:03.250 --> 00:35:03.260
instead is put the dependencies block at
 

00:35:03.260 --> 00:35:05.290
instead is put the dependencies block at
the very bottom at the top level to make

00:35:05.290 --> 00:35:05.300
the very bottom at the top level to make
 

00:35:05.300 --> 00:35:07.150
the very bottom at the top level to make
it clear what's going on and if you want

00:35:07.150 --> 00:35:07.160
it clear what's going on and if you want
 

00:35:07.160 --> 00:35:08.859
it clear what's going on and if you want
to add the dependency only to a given

00:35:08.859 --> 00:35:08.869
to add the dependency only to a given
 

00:35:08.869 --> 00:35:11.490
to add the dependency only to a given
flavor you should use the specific

00:35:11.490 --> 00:35:11.500
flavor you should use the specific
 

00:35:11.500 --> 00:35:13.270
flavor you should use the specific
configuration that we have for this

00:35:13.270 --> 00:35:13.280
configuration that we have for this
 

00:35:13.280 --> 00:35:16.630
configuration that we have for this
flavor okay let's talk about flavors in

00:35:16.630 --> 00:35:16.640
flavor okay let's talk about flavors in
 

00:35:16.640 --> 00:35:17.109
flavor okay let's talk about flavors in
general

00:35:17.109 --> 00:35:17.119
general
 

00:35:17.119 --> 00:35:18.819
general
I hope you already know that flavors are

00:35:18.819 --> 00:35:18.829
I hope you already know that flavors are
 

00:35:18.829 --> 00:35:20.200
I hope you already know that flavors are
a good way for you to create different

00:35:20.200 --> 00:35:20.210
a good way for you to create different
 

00:35:20.210 --> 00:35:22.239
a good way for you to create different
variants of your application other than

00:35:22.239 --> 00:35:22.249
variants of your application other than
 

00:35:22.249 --> 00:35:24.700
variants of your application other than
build types in the next talk cause I may

00:35:24.700 --> 00:35:24.710
build types in the next talk cause I may
 

00:35:24.710 --> 00:35:26.019
build types in the next talk cause I may
actually talk about how you can use

00:35:26.019 --> 00:35:26.029
actually talk about how you can use
 

00:35:26.029 --> 00:35:30.249
actually talk about how you can use
flavors for testing but how like what

00:35:30.249 --> 00:35:30.259
flavors for testing but how like what
 

00:35:30.259 --> 00:35:31.480
flavors for testing but how like what
should you do if you want to

00:35:31.480 --> 00:35:31.490
should you do if you want to
 

00:35:31.490 --> 00:35:33.130
should you do if you want to
differentiate your app in more than the

00:35:33.130 --> 00:35:33.140
differentiate your app in more than the
 

00:35:33.140 --> 00:35:35.529
differentiate your app in more than the
more way than one so let's imagine you

00:35:35.529 --> 00:35:35.539
more way than one so let's imagine you
 

00:35:35.539 --> 00:35:36.819
more way than one so let's imagine you
have a free version of your app and a

00:35:36.819 --> 00:35:36.829
have a free version of your app and a
 

00:35:36.829 --> 00:35:38.680
have a free version of your app and a
premium version but you also want to

00:35:38.680 --> 00:35:38.690
premium version but you also want to
 

00:35:38.690 --> 00:35:41.319
premium version but you also want to
sell it in blue and red flavors because

00:35:41.319 --> 00:35:41.329
sell it in blue and red flavors because
 

00:35:41.329 --> 00:35:42.670
sell it in blue and red flavors because
you believe that will actually increase

00:35:42.670 --> 00:35:42.680
you believe that will actually increase
 

00:35:42.680 --> 00:35:45.489
you believe that will actually increase
the sales so instead of creating all the

00:35:45.489 --> 00:35:45.499
the sales so instead of creating all the
 

00:35:45.499 --> 00:35:47.799
the sales so instead of creating all the
combinations manually what we suggest

00:35:47.799 --> 00:35:47.809
combinations manually what we suggest
 

00:35:47.809 --> 00:35:50.349
combinations manually what we suggest
you do is use the built-in support for

00:35:50.349 --> 00:35:50.359
you do is use the built-in support for
 

00:35:50.359 --> 00:35:52.749
you do is use the built-in support for
flavor dimensions that we have in the

00:35:52.749 --> 00:35:52.759
flavor dimensions that we have in the
 

00:35:52.759 --> 00:35:54.970
flavor dimensions that we have in the
android plug-in so you can define well

00:35:54.970 --> 00:35:54.980
android plug-in so you can define well
 

00:35:54.980 --> 00:35:56.859
android plug-in so you can define well
named dimensions like price and color in

00:35:56.859 --> 00:35:56.869
named dimensions like price and color in
 

00:35:56.869 --> 00:35:59.620
named dimensions like price and color in
this case then for every flavor you

00:35:59.620 --> 00:35:59.630
this case then for every flavor you
 

00:35:59.630 --> 00:36:01.690
this case then for every flavor you
specify which dimension this flavor

00:36:01.690 --> 00:36:01.700
specify which dimension this flavor
 

00:36:01.700 --> 00:36:04.120
specify which dimension this flavor
belongs to and the additional advantage

00:36:04.120 --> 00:36:04.130
belongs to and the additional advantage
 

00:36:04.130 --> 00:36:06.220
belongs to and the additional advantage
of doing it this way is that you get

00:36:06.220 --> 00:36:06.230
of doing it this way is that you get
 

00:36:06.230 --> 00:36:08.680
of doing it this way is that you get
dedicated source sets for for example

00:36:08.680 --> 00:36:08.690
dedicated source sets for for example
 

00:36:08.690 --> 00:36:09.609
dedicated source sets for for example
read-only

00:36:09.609 --> 00:36:09.619
read-only
 

00:36:09.619 --> 00:36:11.759
read-only
resources and blue only resources and

00:36:11.759 --> 00:36:11.769
resources and blue only resources and
 

00:36:11.769 --> 00:36:14.230
resources and blue only resources and
premium only code that is shared between

00:36:14.230 --> 00:36:14.240
premium only code that is shared between
 

00:36:14.240 --> 00:36:15.819
premium only code that is shared between
the premium rate and premium blue

00:36:15.819 --> 00:36:15.829
the premium rate and premium blue
 

00:36:15.829 --> 00:36:20.410
the premium rate and premium blue
variants so that's very convenient okay

00:36:20.410 --> 00:36:20.420
variants so that's very convenient okay
 

00:36:20.420 --> 00:36:24.130
variants so that's very convenient okay
but what happens if not if not all the

00:36:24.130 --> 00:36:24.140
but what happens if not if not all the
 

00:36:24.140 --> 00:36:26.319
but what happens if not if not all the
combinations of bill types and flavors

00:36:26.319 --> 00:36:26.329
combinations of bill types and flavors
 

00:36:26.329 --> 00:36:28.569
combinations of bill types and flavors
make sense at the start of the

00:36:28.569 --> 00:36:28.579
make sense at the start of the
 

00:36:28.579 --> 00:36:30.339
make sense at the start of the
presentation I mentioned a development

00:36:30.339 --> 00:36:30.349
presentation I mentioned a development
 

00:36:30.349 --> 00:36:32.739
presentation I mentioned a development
on the flavor it probably doesn't make

00:36:32.739 --> 00:36:32.749
on the flavor it probably doesn't make
 

00:36:32.749 --> 00:36:34.690
on the flavor it probably doesn't make
much sense to ever combine it with a

00:36:34.690 --> 00:36:34.700
much sense to ever combine it with a
 

00:36:34.700 --> 00:36:36.640
much sense to ever combine it with a
release build type because we never

00:36:36.640 --> 00:36:36.650
release build type because we never
 

00:36:36.650 --> 00:36:38.019
release build type because we never
really want to distribute the

00:36:38.019 --> 00:36:38.029
really want to distribute the
 

00:36:38.029 --> 00:36:40.089
really want to distribute the
development variant and so what we want

00:36:40.089 --> 00:36:40.099
development variant and so what we want
 

00:36:40.099 --> 00:36:42.789
development variant and so what we want
what we can do is use the variant filter

00:36:42.789 --> 00:36:42.799
what we can do is use the variant filter
 

00:36:42.799 --> 00:36:45.339
what we can do is use the variant filter
method on the Android block which allows

00:36:45.339 --> 00:36:45.349
method on the Android block which allows
 

00:36:45.349 --> 00:36:48.489
method on the Android block which allows
you to register a closure and the

00:36:48.489 --> 00:36:48.499
you to register a closure and the
 

00:36:48.499 --> 00:36:50.829
you to register a closure and the
closure will be called for every about

00:36:50.829 --> 00:36:50.839
closure will be called for every about
 

00:36:50.839 --> 00:36:52.960
closure will be called for every about
to be created variant and will be passed

00:36:52.960 --> 00:36:52.970
to be created variant and will be passed
 

00:36:52.970 --> 00:36:55.299
to be created variant and will be passed
a variant filter object you can use this

00:36:55.299 --> 00:36:55.309
a variant filter object you can use this
 

00:36:55.309 --> 00:36:57.099
a variant filter object you can use this
object to inspect the build types and

00:36:57.099 --> 00:36:57.109
object to inspect the build types and
 

00:36:57.109 --> 00:36:59.349
object to inspect the build types and
the flavors of the variant in question

00:36:59.349 --> 00:36:59.359
the flavors of the variant in question
 

00:36:59.359 --> 00:37:01.569
the flavors of the variant in question
and you can also set the ignore flock on

00:37:01.569 --> 00:37:01.579
and you can also set the ignore flock on
 

00:37:01.579 --> 00:37:01.930
and you can also set the ignore flock on
it

00:37:01.930 --> 00:37:01.940
it
 

00:37:01.940 --> 00:37:03.400
it
to indicate that this particular

00:37:03.400 --> 00:37:03.410
to indicate that this particular
 

00:37:03.410 --> 00:37:06.309
to indicate that this particular
combination should be skipped so I can

00:37:06.309 --> 00:37:06.319
combination should be skipped so I can
 

00:37:06.319 --> 00:37:08.289
combination should be skipped so I can
think of the variant filter object of an

00:37:08.289 --> 00:37:08.299
think of the variant filter object of an
 

00:37:08.299 --> 00:37:10.059
think of the variant filter object of an
instance such an interface when there's

00:37:10.059 --> 00:37:10.069
instance such an interface when there's
 

00:37:10.069 --> 00:37:11.950
instance such an interface when there's
one setter for the ignore flag and there

00:37:11.950 --> 00:37:11.960
one setter for the ignore flag and there
 

00:37:11.960 --> 00:37:13.930
one setter for the ignore flag and there
are Gators for Bill types flavors and

00:37:13.930 --> 00:37:13.940
are Gators for Bill types flavors and
 

00:37:13.940 --> 00:37:16.630
are Gators for Bill types flavors and
the shared settings from the default

00:37:16.630 --> 00:37:16.640
the shared settings from the default
 

00:37:16.640 --> 00:37:19.349
the shared settings from the default
config shared between all the variants

00:37:19.349 --> 00:37:19.359
config shared between all the variants
 

00:37:19.359 --> 00:37:21.249
config shared between all the variants
all right let's talk about vector

00:37:21.249 --> 00:37:21.259
all right let's talk about vector
 

00:37:21.259 --> 00:37:22.779
all right let's talk about vector
drawables which is a feature with

00:37:22.779 --> 00:37:22.789
drawables which is a feature with
 

00:37:22.789 --> 00:37:26.349
drawables which is a feature with
additive 1.5 so what vector drawable

00:37:26.349 --> 00:37:26.359
additive 1.5 so what vector drawable
 

00:37:26.359 --> 00:37:27.880
additive 1.5 so what vector drawable
support does at Build time is whenever

00:37:27.880 --> 00:37:27.890
support does at Build time is whenever
 

00:37:27.890 --> 00:37:29.359
support does at Build time is whenever
we find

00:37:29.359 --> 00:37:29.369
we find
 

00:37:29.369 --> 00:37:31.370
we find
an Android vectordrawable XML file in

00:37:31.370 --> 00:37:31.380
an Android vectordrawable XML file in
 

00:37:31.380 --> 00:37:34.309
an Android vectordrawable XML file in
your drawables directory we will rename

00:37:34.309 --> 00:37:34.319
your drawables directory we will rename
 

00:37:34.319 --> 00:37:37.370
your drawables directory we will rename
this file to be within the any dpi v21

00:37:37.370 --> 00:37:37.380
this file to be within the any dpi v21
 

00:37:37.380 --> 00:37:39.829
this file to be within the any dpi v21
directory and we will also generate a

00:37:39.829 --> 00:37:39.839
directory and we will also generate a
 

00:37:39.839 --> 00:37:42.289
directory and we will also generate a
number of PNG images one for each

00:37:42.289 --> 00:37:42.299
number of PNG images one for each
 

00:37:42.299 --> 00:37:45.279
number of PNG images one for each
density for all their devices to pick up

00:37:45.279 --> 00:37:45.289
density for all their devices to pick up
 

00:37:45.289 --> 00:37:48.140
density for all their devices to pick up
you can control the set of densities

00:37:48.140 --> 00:37:48.150
you can control the set of densities
 

00:37:48.150 --> 00:37:50.180
you can control the set of densities
that we generate so if you don't want to

00:37:50.180 --> 00:37:50.190
that we generate so if you don't want to
 

00:37:50.190 --> 00:37:53.299
that we generate so if you don't want to
package low dpi images in your apk you

00:37:53.299 --> 00:37:53.309
package low dpi images in your apk you
 

00:37:53.309 --> 00:37:55.519
package low dpi images in your apk you
can choose to do so this setting is

00:37:55.519 --> 00:37:55.529
can choose to do so this setting is
 

00:37:55.529 --> 00:37:56.180
can choose to do so this setting is
perforator

00:37:56.180 --> 00:37:56.190
perforator
 

00:37:56.190 --> 00:37:58.459
perforator
so you can have a default a set of

00:37:58.459 --> 00:37:58.469
so you can have a default a set of
 

00:37:58.469 --> 00:37:59.900
so you can have a default a set of
densities in default config and then

00:37:59.900 --> 00:37:59.910
densities in default config and then
 

00:37:59.910 --> 00:38:02.089
densities in default config and then
override it for a particular flavor and

00:38:02.089 --> 00:38:02.099
override it for a particular flavor and
 

00:38:02.099 --> 00:38:05.209
override it for a particular flavor and
you can also set the set of generator

00:38:05.209 --> 00:38:05.219
you can also set the set of generator
 

00:38:05.219 --> 00:38:08.269
you can also set the set of generator
densities to an empty list set which

00:38:08.269 --> 00:38:08.279
densities to an empty list set which
 

00:38:08.279 --> 00:38:09.799
densities to an empty list set which
will disable the whole the feature all

00:38:09.799 --> 00:38:09.809
will disable the whole the feature all
 

00:38:09.809 --> 00:38:13.459
will disable the whole the feature all
together ok lastly since we have some

00:38:13.459 --> 00:38:13.469
together ok lastly since we have some
 

00:38:13.469 --> 00:38:16.069
together ok lastly since we have some
more time left let's just mention real

00:38:16.069 --> 00:38:16.079
more time left let's just mention real
 

00:38:16.079 --> 00:38:18.319
more time left let's just mention real
quick buildconfig buildconfig is a class

00:38:18.319 --> 00:38:18.329
quick buildconfig buildconfig is a class
 

00:38:18.329 --> 00:38:19.789
quick buildconfig buildconfig is a class
that we generated build time for each

00:38:19.789 --> 00:38:19.799
that we generated build time for each
 

00:38:19.799 --> 00:38:22.519
that we generated build time for each
and every variant you can use it to

00:38:22.519 --> 00:38:22.529
and every variant you can use it to
 

00:38:22.529 --> 00:38:25.849
and every variant you can use it to
inspect which a build type and flavor

00:38:25.849 --> 00:38:25.859
inspect which a build type and flavor
 

00:38:25.859 --> 00:38:27.829
inspect which a build type and flavor
were used to actually compile your given

00:38:27.829 --> 00:38:27.839
were used to actually compile your given
 

00:38:27.839 --> 00:38:29.870
were used to actually compile your given
variant you can use it to at runtime

00:38:29.870 --> 00:38:29.880
variant you can use it to at runtime
 

00:38:29.880 --> 00:38:32.809
variant you can use it to at runtime
execute different code depending on a

00:38:32.809 --> 00:38:32.819
execute different code depending on a
 

00:38:32.819 --> 00:38:35.719
execute different code depending on a
given flavor so for example you you may

00:38:35.719 --> 00:38:35.729
given flavor so for example you you may
 

00:38:35.729 --> 00:38:36.769
given flavor so for example you you may
want to write an if statement that

00:38:36.769 --> 00:38:36.779
want to write an if statement that
 

00:38:36.779 --> 00:38:39.920
want to write an if statement that
checks if flavor is premium and you can

00:38:39.920 --> 00:38:39.930
checks if flavor is premium and you can
 

00:38:39.930 --> 00:38:41.690
checks if flavor is premium and you can
also add additional fields to the

00:38:41.690 --> 00:38:41.700
also add additional fields to the
 

00:38:41.700 --> 00:38:44.059
also add additional fields to the
buildconfig class by using a build

00:38:44.059 --> 00:38:44.069
buildconfig class by using a build
 

00:38:44.069 --> 00:38:46.789
buildconfig class by using a build
config field method on build types but

00:38:46.789 --> 00:38:46.799
config field method on build types but
 

00:38:46.799 --> 00:38:49.969
config field method on build types but
also flavors so in this case if I really

00:38:49.969 --> 00:38:49.979
also flavors so in this case if I really
 

00:38:49.979 --> 00:38:52.759
also flavors so in this case if I really
want to hard-code the build date into my

00:38:52.759 --> 00:38:52.769
want to hard-code the build date into my
 

00:38:52.769 --> 00:38:54.709
want to hard-code the build date into my
build config class I can do it at the

00:38:54.709 --> 00:38:54.719
build config class I can do it at the
 

00:38:54.719 --> 00:38:56.059
build config class I can do it at the
mention of the start I will only do it

00:38:56.059 --> 00:38:56.069
mention of the start I will only do it
 

00:38:56.069 --> 00:38:58.099
mention of the start I will only do it
for the release builds so for any in the

00:38:58.099 --> 00:38:58.109
for the release builds so for any in the
 

00:38:58.109 --> 00:38:59.719
for the release builds so for any in the
release builder I'll put a string field

00:38:59.719 --> 00:38:59.729
release builder I'll put a string field
 

00:38:59.729 --> 00:39:03.259
release builder I'll put a string field
called build date in my class the values

00:39:03.259 --> 00:39:03.269
called build date in my class the values
 

00:39:03.269 --> 00:39:06.739
called build date in my class the values
are put pasted as as is into the build

00:39:06.739 --> 00:39:06.749
are put pasted as as is into the build
 

00:39:06.749 --> 00:39:10.309
are put pasted as as is into the build
configure a source file which means you

00:39:10.309 --> 00:39:10.319
configure a source file which means you
 

00:39:10.319 --> 00:39:12.709
configure a source file which means you
have to make sure this the quotes are in

00:39:12.709 --> 00:39:12.719
have to make sure this the quotes are in
 

00:39:12.719 --> 00:39:15.950
have to make sure this the quotes are in
place here I assume there is a format

00:39:15.950 --> 00:39:15.960
place here I assume there is a format
 

00:39:15.960 --> 00:39:17.299
place here I assume there is a format
time function somewhere in the build

00:39:17.299 --> 00:39:17.309
time function somewhere in the build
 

00:39:17.309 --> 00:39:19.519
time function somewhere in the build
script so that will allow me to actually

00:39:19.519 --> 00:39:19.529
script so that will allow me to actually
 

00:39:19.529 --> 00:39:21.229
script so that will allow me to actually
reference the build date in my release

00:39:21.229 --> 00:39:21.239
reference the build date in my release
 

00:39:21.239 --> 00:39:22.999
reference the build date in my release
builds for debug builds I want to

00:39:22.999 --> 00:39:23.009
builds for debug builds I want to
 

00:39:23.009 --> 00:39:27.859
builds for debug builds I want to
hard-code a constant value so so that my

00:39:27.859 --> 00:39:27.869
hard-code a constant value so so that my
 

00:39:27.869 --> 00:39:29.569
hard-code a constant value so so that my
bills are actually up to date you can

00:39:29.569 --> 00:39:29.579
bills are actually up to date you can
 

00:39:29.579 --> 00:39:31.039
bills are actually up to date you can
imagine that if format time actually

00:39:31.039 --> 00:39:31.049
imagine that if format time actually
 

00:39:31.049 --> 00:39:33.289
imagine that if format time actually
changed every second my bills would

00:39:33.289 --> 00:39:33.299
changed every second my bills would
 

00:39:33.299 --> 00:39:35.029
changed every second my bills would
never be up to date because every time I

00:39:35.029 --> 00:39:35.039
never be up to date because every time I
 

00:39:35.039 --> 00:39:37.910
never be up to date because every time I
learn unruhe I run Gradle build config

00:39:37.910 --> 00:39:37.920
learn unruhe I run Gradle build config
 

00:39:37.920 --> 00:39:39.859
learn unruhe I run Gradle build config
source would be different which means I

00:39:39.859 --> 00:39:39.869
source would be different which means I
 

00:39:39.869 --> 00:39:41.509
source would be different which means I
would have to compile it which means I

00:39:41.509 --> 00:39:41.519
would have to compile it which means I
 

00:39:41.519 --> 00:39:42.420
would have to compile it which means I
would have to read that

00:39:42.420 --> 00:39:42.430
would have to read that
 

00:39:42.430 --> 00:39:44.460
would have to read that
entire application every time just

00:39:44.460 --> 00:39:44.470
entire application every time just
 

00:39:44.470 --> 00:39:46.380
entire application every time just
because this value changed which is why

00:39:46.380 --> 00:39:46.390
because this value changed which is why
 

00:39:46.390 --> 00:39:47.910
because this value changed which is why
we recommend to do this kind of stuff

00:39:47.910 --> 00:39:47.920
we recommend to do this kind of stuff
 

00:39:47.920 --> 00:39:49.710
we recommend to do this kind of stuff
only for release builds never debug

00:39:49.710 --> 00:39:49.720
only for release builds never debug
 

00:39:49.720 --> 00:39:52.140
only for release builds never debug
builds and if you need to you can also

00:39:52.140 --> 00:39:52.150
builds and if you need to you can also
 

00:39:52.150 --> 00:39:54.299
builds and if you need to you can also
define the res values which would do the

00:39:54.299 --> 00:39:54.309
define the res values which would do the
 

00:39:54.309 --> 00:39:56.339
define the res values which would do the
same thing but it would put the values

00:39:56.339 --> 00:39:56.349
same thing but it would put the values
 

00:39:56.349 --> 00:40:01.079
same thing but it would put the values
in the as a value resource to the string

00:40:01.079 --> 00:40:01.089
in the as a value resource to the string
 

00:40:01.089 --> 00:40:04.559
in the as a value resource to the string
resource okay yeah that's it that's all

00:40:04.559 --> 00:40:04.569
resource okay yeah that's it that's all
 

00:40:04.569 --> 00:40:06.750
resource okay yeah that's it that's all
we have for you today let's go into the

00:40:06.750 --> 00:40:06.760
we have for you today let's go into the
 

00:40:06.760 --> 00:40:09.510
we have for you today let's go into the
Q&amp;A session there's two mics in the back

00:40:09.510 --> 00:40:09.520
Q&amp;A session there's two mics in the back
 

00:40:09.520 --> 00:40:11.609
Q&amp;A session there's two mics in the back
if you want to ask questions please go

00:40:11.609 --> 00:40:11.619
if you want to ask questions please go
 

00:40:11.619 --> 00:40:13.920
if you want to ask questions please go
there we have time probably for just a

00:40:13.920 --> 00:40:13.930
there we have time probably for just a
 

00:40:13.930 --> 00:40:17.819
there we have time probably for just a
handful of them yep I have a question

00:40:17.819 --> 00:40:17.829
handful of them yep I have a question
 

00:40:17.829 --> 00:40:21.359
handful of them yep I have a question
about shrink resources I see my PNG

00:40:21.359 --> 00:40:21.369
about shrink resources I see my PNG
 

00:40:21.369 --> 00:40:25.559
about shrink resources I see my PNG
files are not in the built apk but the

00:40:25.559 --> 00:40:25.569
files are not in the built apk but the
 

00:40:25.569 --> 00:40:27.960
files are not in the built apk but the
IDS are still in the art of Java file

00:40:27.960 --> 00:40:27.970
IDS are still in the art of Java file
 

00:40:27.970 --> 00:40:30.210
IDS are still in the art of Java file
and it's causing weight crisis on and

00:40:30.210 --> 00:40:30.220
and it's causing weight crisis on and
 

00:40:30.220 --> 00:40:34.650
and it's causing weight crisis on and
send some devices and I saw a solution

00:40:34.650 --> 00:40:34.660
send some devices and I saw a solution
 

00:40:34.660 --> 00:40:39.660
send some devices and I saw a solution
was to replace those PNG files alike one

00:40:39.660 --> 00:40:39.670
was to replace those PNG files alike one
 

00:40:39.670 --> 00:40:42.809
was to replace those PNG files alike one
pixel resources okay can you say

00:40:42.809 --> 00:40:42.819
pixel resources okay can you say
 

00:40:42.819 --> 00:40:46.859
pixel resources okay can you say
something about that about so the way

00:40:46.859 --> 00:40:46.869
something about that about so the way
 

00:40:46.869 --> 00:40:48.390
something about that about so the way
the shrinker works is that it looks for

00:40:48.390 --> 00:40:48.400
the shrinker works is that it looks for
 

00:40:48.400 --> 00:40:51.599
the shrinker works is that it looks for
code that uses those IDs right but it it

00:40:51.599 --> 00:40:51.609
code that uses those IDs right but it it
 

00:40:51.609 --> 00:40:55.859
code that uses those IDs right but it it
is not removing the DR class I would be

00:40:55.859 --> 00:40:55.869
is not removing the DR class I would be
 

00:40:55.869 --> 00:40:58.349
is not removing the DR class I would be
surprised why on some devices they

00:40:58.349 --> 00:40:58.359
surprised why on some devices they
 

00:40:58.359 --> 00:41:00.240
surprised why on some devices they
actually like if your code does not

00:41:00.240 --> 00:41:00.250
actually like if your code does not
 

00:41:00.250 --> 00:41:02.640
actually like if your code does not
reference that ID and we were trying to

00:41:02.640 --> 00:41:02.650
reference that ID and we were trying to
 

00:41:02.650 --> 00:41:04.380
reference that ID and we were trying to
be very conservative you know we just

00:41:04.380 --> 00:41:04.390
be very conservative you know we just
 

00:41:04.390 --> 00:41:06.270
be very conservative you know we just
you know some cases where we don't

00:41:06.270 --> 00:41:06.280
you know some cases where we don't
 

00:41:06.280 --> 00:41:07.770
you know some cases where we don't
remove stuff that could be removed

00:41:07.770 --> 00:41:07.780
remove stuff that could be removed
 

00:41:07.780 --> 00:41:09.420
remove stuff that could be removed
because we are not sure it's difficult

00:41:09.420 --> 00:41:09.430
because we are not sure it's difficult
 

00:41:09.430 --> 00:41:10.859
because we are not sure it's difficult
right we just look at the bytecode we

00:41:10.859 --> 00:41:10.869
right we just look at the bytecode we
 

00:41:10.869 --> 00:41:12.299
right we just look at the bytecode we
don't know the actual code we just say

00:41:12.299 --> 00:41:12.309
don't know the actual code we just say
 

00:41:12.309 --> 00:41:14.400
don't know the actual code we just say
hey thoughty2 okay maybe that's a

00:41:14.400 --> 00:41:14.410
hey thoughty2 okay maybe that's a
 

00:41:14.410 --> 00:41:17.039
hey thoughty2 okay maybe that's a
resource ID so when we assure that that

00:41:17.039 --> 00:41:17.049
resource ID so when we assure that that
 

00:41:17.049 --> 00:41:19.829
resource ID so when we assure that that
ID is not available anywhere we remove

00:41:19.829 --> 00:41:19.839
ID is not available anywhere we remove
 

00:41:19.839 --> 00:41:22.470
ID is not available anywhere we remove
it so I'm not sure why that would still

00:41:22.470 --> 00:41:22.480
it so I'm not sure why that would still
 

00:41:22.480 --> 00:41:25.230
it so I'm not sure why that would still
be called on some device simply either

00:41:25.230 --> 00:41:25.240
be called on some device simply either
 

00:41:25.240 --> 00:41:28.579
be called on some device simply either
but there's a bug report for that so

00:41:28.579 --> 00:41:28.589
but there's a bug report for that so
 

00:41:28.589 --> 00:41:30.900
but there's a bug report for that so
remember that Samsung was pre-caching

00:41:30.900 --> 00:41:30.910
remember that Samsung was pre-caching
 

00:41:30.910 --> 00:41:32.520
remember that Samsung was pre-caching
and the idea would find in the

00:41:32.520 --> 00:41:32.530
and the idea would find in the
 

00:41:32.530 --> 00:41:37.829
and the idea would find in the
application something like that yeah I

00:41:37.829 --> 00:41:37.839
application something like that yeah I
 

00:41:37.839 --> 00:41:39.630
application something like that yeah I
don't have a good solution for you in

00:41:39.630 --> 00:41:39.640
don't have a good solution for you in
 

00:41:39.640 --> 00:41:40.890
don't have a good solution for you in
that case I think the good solution for

00:41:40.890 --> 00:41:40.900
that case I think the good solution for
 

00:41:40.900 --> 00:41:44.670
that case I think the good solution for
now is shrink resources fools I mean we

00:41:44.670 --> 00:41:44.680
now is shrink resources fools I mean we
 

00:41:44.680 --> 00:41:46.890
now is shrink resources fools I mean we
could we could also rewrite the the

00:41:46.890 --> 00:41:46.900
could we could also rewrite the the
 

00:41:46.900 --> 00:41:49.349
could we could also rewrite the the
r-class to remove things the thing also

00:41:49.349 --> 00:41:49.359
r-class to remove things the thing also
 

00:41:49.359 --> 00:41:50.339
r-class to remove things the thing also
that you are doing is you are just

00:41:50.339 --> 00:41:50.349
that you are doing is you are just
 

00:41:50.349 --> 00:41:51.809
that you are doing is you are just
removing the assets right we are not

00:41:51.809 --> 00:41:51.819
removing the assets right we are not
 

00:41:51.819 --> 00:41:53.400
removing the assets right we are not
actually removing them from the resource

00:41:53.400 --> 00:41:53.410
actually removing them from the resource
 

00:41:53.410 --> 00:41:54.550
actually removing them from the resource
table so it

00:41:54.550 --> 00:41:54.560
table so it
 

00:41:54.560 --> 00:41:55.810
table so it
I thought it was a mirror I would put

00:41:55.810 --> 00:41:55.820
I thought it was a mirror I would put
 

00:41:55.820 --> 00:42:00.010
I thought it was a mirror I would put
the smallest possible PNG to replace the

00:42:00.010 --> 00:42:00.020
the smallest possible PNG to replace the
 

00:42:00.020 --> 00:42:01.300
the smallest possible PNG to replace the
actual one

00:42:01.300 --> 00:42:01.310
actual one
 

00:42:01.310 --> 00:42:03.340
actual one
so that Samson would be happy would find

00:42:03.340 --> 00:42:03.350
so that Samson would be happy would find
 

00:42:03.350 --> 00:42:07.360
so that Samson would be happy would find
it so but it still doesn't work I don't

00:42:07.360 --> 00:42:07.370
it so but it still doesn't work I don't
 

00:42:07.370 --> 00:42:08.860
it so but it still doesn't work I don't
believe that that thing is happening

00:42:08.860 --> 00:42:08.870
believe that that thing is happening
 

00:42:08.870 --> 00:42:10.480
believe that that thing is happening
right now so okay we should we should

00:42:10.480 --> 00:42:10.490
right now so okay we should we should
 

00:42:10.490 --> 00:42:12.400
right now so okay we should we should
talk about that because I thought it was

00:42:12.400 --> 00:42:12.410
talk about that because I thought it was
 

00:42:12.410 --> 00:42:16.600
talk about that because I thought it was
already a decision okay is there a is

00:42:16.600 --> 00:42:16.610
already a decision okay is there a is
 

00:42:16.610 --> 00:42:21.430
already a decision okay is there a is
there any development on native via

00:42:21.430 --> 00:42:21.440
there any development on native via
 

00:42:21.440 --> 00:42:24.160
there any development on native via
native dependencies that would actually

00:42:24.160 --> 00:42:24.170
native dependencies that would actually
 

00:42:24.170 --> 00:42:26.410
native dependencies that would actually
also bundle headers in the case of

00:42:26.410 --> 00:42:26.420
also bundle headers in the case of
 

00:42:26.420 --> 00:42:28.000
also bundle headers in the case of
native dependencies that would be

00:42:28.000 --> 00:42:28.010
native dependencies that would be
 

00:42:28.010 --> 00:42:32.100
native dependencies that would be
deployed to MPN repository for example

00:42:32.100 --> 00:42:32.110
deployed to MPN repository for example
 

00:42:32.110 --> 00:42:35.470
deployed to MPN repository for example
no I actually don't know a that probably

00:42:35.470 --> 00:42:35.480
no I actually don't know a that probably
 

00:42:35.480 --> 00:42:37.570
no I actually don't know a that probably
more question for greater right like if

00:42:37.570 --> 00:42:37.580
more question for greater right like if
 

00:42:37.580 --> 00:42:39.730
more question for greater right like if
you if you have a module that only

00:42:39.730 --> 00:42:39.740
you if you have a module that only
 

00:42:39.740 --> 00:42:42.100
you if you have a module that only
outputs a dot a so and I know you can

00:42:42.100 --> 00:42:42.110
outputs a dot a so and I know you can
 

00:42:42.110 --> 00:42:44.290
outputs a dot a so and I know you can
have you know headers because you the

00:42:44.290 --> 00:42:44.300
have you know headers because you the
 

00:42:44.300 --> 00:42:46.510
have you know headers because you the
the inter module dependencies you box

00:42:46.510 --> 00:42:46.520
the inter module dependencies you box
 

00:42:46.520 --> 00:42:49.570
the inter module dependencies you box
that at the greater level but I don't

00:42:49.570 --> 00:42:49.580
that at the greater level but I don't
 

00:42:49.580 --> 00:42:51.160
that at the greater level but I don't
know what happened if you try to publish

00:42:51.160 --> 00:42:51.170
know what happened if you try to publish
 

00:42:51.170 --> 00:42:53.170
know what happened if you try to publish
that to any sort of repository you would

00:42:53.170 --> 00:42:53.180
that to any sort of repository you would
 

00:42:53.180 --> 00:42:55.810
that to any sort of repository you would
have to check with Gradle itself I've

00:42:55.810 --> 00:42:55.820
have to check with Gradle itself I've
 

00:42:55.820 --> 00:43:00.010
have to check with Gradle itself I've
seen hands somewhere so is it possible

00:43:00.010 --> 00:43:00.020
seen hands somewhere so is it possible
 

00:43:00.020 --> 00:43:03.490
seen hands somewhere so is it possible
to debug why instant run decided not to

00:43:03.490 --> 00:43:03.500
to debug why instant run decided not to
 

00:43:03.500 --> 00:43:04.750
to debug why instant run decided not to
do an instant run on a particular

00:43:04.750 --> 00:43:04.760
do an instant run on a particular
 

00:43:04.760 --> 00:43:07.210
do an instant run on a particular
instance like if you change the feel

00:43:07.210 --> 00:43:07.220
instance like if you change the feel
 

00:43:07.220 --> 00:43:08.920
instance like if you change the feel
that can tell you like it's because you

00:43:08.920 --> 00:43:08.930
that can tell you like it's because you
 

00:43:08.930 --> 00:43:10.020
that can tell you like it's because you
changed this field

00:43:10.020 --> 00:43:10.030
changed this field
 

00:43:10.030 --> 00:43:13.900
changed this field
yes if you change to if you add a field

00:43:13.900 --> 00:43:13.910
yes if you change to if you add a field
 

00:43:13.910 --> 00:43:15.610
yes if you change to if you add a field
and the instant when I decided that he

00:43:15.610 --> 00:43:15.620
and the instant when I decided that he
 

00:43:15.620 --> 00:43:16.870
and the instant when I decided that he
needs to be stopped is that what you

00:43:16.870 --> 00:43:16.880
needs to be stopped is that what you
 

00:43:16.880 --> 00:43:17.320
needs to be stopped is that what you
asked

00:43:17.320 --> 00:43:17.330
asked
 

00:43:17.330 --> 00:43:18.700
asked
yeah but like I just wondering is there

00:43:18.700 --> 00:43:18.710
yeah but like I just wondering is there
 

00:43:18.710 --> 00:43:20.140
yeah but like I just wondering is there
some sort of logging that I'll tell you

00:43:20.140 --> 00:43:20.150
some sort of logging that I'll tell you
 

00:43:20.150 --> 00:43:24.130
some sort of logging that I'll tell you
I yes why IDE will tell you application

00:43:24.130 --> 00:43:24.140
I yes why IDE will tell you application
 

00:43:24.140 --> 00:43:26.470
I yes why IDE will tell you application
we started because you added a field or

00:43:26.470 --> 00:43:26.480
we started because you added a field or
 

00:43:26.480 --> 00:43:27.610
we started because you added a field or
because the static initializer a

00:43:27.610 --> 00:43:27.620
because the static initializer a
 

00:43:27.620 --> 00:43:29.170
because the static initializer a
stranger because we added a method it

00:43:29.170 --> 00:43:29.180
stranger because we added a method it
 

00:43:29.180 --> 00:43:30.490
stranger because we added a method it
will tell you is that the balloon eyes

00:43:30.490 --> 00:43:30.500
will tell you is that the balloon eyes
 

00:43:30.500 --> 00:43:32.260
will tell you is that the balloon eyes
it's a balloon when you when you run

00:43:32.260 --> 00:43:32.270
it's a balloon when you when you run
 

00:43:32.270 --> 00:43:34.030
it's a balloon when you when you run
there will be a balloon that tells you

00:43:34.030 --> 00:43:34.040
there will be a balloon that tells you
 

00:43:34.040 --> 00:43:39.790
there will be a balloon that tells you
we started because of their way when you

00:43:39.790 --> 00:43:39.800
we started because of their way when you
 

00:43:39.800 --> 00:43:42.070
we started because of their way when you
build a debug bill to make it have a

00:43:42.070 --> 00:43:42.080
build a debug bill to make it have a
 

00:43:42.080 --> 00:43:44.800
build a debug bill to make it have a
different package name as release film

00:43:44.800 --> 00:43:44.810
different package name as release film
 

00:43:44.810 --> 00:43:47.080
different package name as release film
yes in bill type there's something

00:43:47.080 --> 00:43:47.090
yes in bill type there's something
 

00:43:47.090 --> 00:43:50.350
yes in bill type there's something
called application ID suffix so if you

00:43:50.350 --> 00:43:50.360
called application ID suffix so if you
 

00:43:50.360 --> 00:43:52.840
called application ID suffix so if you
do any suffix that and it happens that

00:43:52.840 --> 00:43:52.850
do any suffix that and it happens that
 

00:43:52.850 --> 00:43:54.520
do any suffix that and it happens that
to your regular package name so if you

00:43:54.520 --> 00:43:54.530
to your regular package name so if you
 

00:43:54.530 --> 00:43:56.650
to your regular package name so if you
put debug then the debug build will

00:43:56.650 --> 00:43:56.660
put debug then the debug build will
 

00:43:56.660 --> 00:43:58.270
put debug then the debug build will
contain that new package name and you

00:43:58.270 --> 00:43:58.280
contain that new package name and you
 

00:43:58.280 --> 00:43:59.620
contain that new package name and you
can start it side by side with the

00:43:59.620 --> 00:43:59.630
can start it side by side with the
 

00:43:59.630 --> 00:44:02.050
can start it side by side with the
release okay you have like custom views

00:44:02.050 --> 00:44:02.060
release okay you have like custom views
 

00:44:02.060 --> 00:44:02.630
release okay you have like custom views
in

00:44:02.630 --> 00:44:02.640
in
 

00:44:02.640 --> 00:44:06.259
in
no files to those upgrade no then you

00:44:06.259 --> 00:44:06.269
no files to those upgrade no then you
 

00:44:06.269 --> 00:44:09.200
no files to those upgrade no then you
would have to make a copy of that

00:44:09.200 --> 00:44:09.210
would have to make a copy of that
 

00:44:09.210 --> 00:44:11.180
would have to make a copy of that
particular layout put it in the source

00:44:11.180 --> 00:44:11.190
particular layout put it in the source
 

00:44:11.190 --> 00:44:13.309
particular layout put it in the source
debug res folder so that you would have

00:44:13.309 --> 00:44:13.319
debug res folder so that you would have
 

00:44:13.319 --> 00:44:14.870
debug res folder so that you would have
a custom version of that we know that

00:44:14.870 --> 00:44:14.880
a custom version of that we know that
 

00:44:14.880 --> 00:44:16.700
a custom version of that we know that
it's something that people want to have

00:44:16.700 --> 00:44:16.710
it's something that people want to have
 

00:44:16.710 --> 00:44:18.380
it's something that people want to have
place order in those and to replace them

00:44:18.380 --> 00:44:18.390
place order in those and to replace them
 

00:44:18.390 --> 00:44:19.970
place order in those and to replace them
on the fly and something we will

00:44:19.970 --> 00:44:19.980
on the fly and something we will
 

00:44:19.980 --> 00:44:21.769
on the fly and something we will
probably do at some point okay thank you

00:44:21.769 --> 00:44:21.779
probably do at some point okay thank you
 

00:44:21.779 --> 00:44:24.500
probably do at some point okay thank you
I think we're running out of time we

00:44:24.500 --> 00:44:24.510
I think we're running out of time we
 

00:44:24.510 --> 00:44:25.970
I think we're running out of time we
will be at the office hours all

00:44:25.970 --> 00:44:25.980
will be at the office hours all
 

00:44:25.980 --> 00:44:27.769
will be at the office hours all
afternoon so feel free to come and talk

00:44:27.769 --> 00:44:27.779
afternoon so feel free to come and talk
 

00:44:27.779 --> 00:44:29.839
afternoon so feel free to come and talk
to us and five sachet also this

00:44:29.839 --> 00:44:29.849
to us and five sachet also this
 

00:44:29.849 --> 00:44:31.009
to us and five sachet also this
afternoon if you want to ask question

00:44:31.009 --> 00:44:31.019
afternoon if you want to ask question
 

00:44:31.019 --> 00:44:33.589
afternoon if you want to ask question
thank you

