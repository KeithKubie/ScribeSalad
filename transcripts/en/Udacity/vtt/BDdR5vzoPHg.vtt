WEBVTT
Kind: captions
Language: en

00:00:00.580 --> 00:00:06.590
In a para virtualized setting on the other hand the operating system knows that

00:00:06.590 --> 00:00:10.130
its physical memory is not contiguous. And

00:00:10.130 --> 00:00:14.480
there for this burden of efficient mapping

00:00:14.480 --> 00:00:16.930
can be shifted into the guest operating

00:00:16.930 --> 00:00:19.730
system itself. So now the guest operating

00:00:19.730 --> 00:00:22.590
system is going to maintain. Contiguous physical

00:00:22.590 --> 00:00:25.740
memory makes it simpler in terms of

00:00:25.740 --> 00:00:31.830
all the other subsystems to do that. But it is also going to know that its

00:00:31.830 --> 00:00:37.460
notion of physical memory, is not the same as machine memory, and so it will map

00:00:37.460 --> 00:00:40.870
the discontiguous physical memory to real hardware

00:00:40.870 --> 00:00:45.820
pages. So that burden of doing the PPN

00:00:45.820 --> 00:00:48.160
to MPN mapping can be pushed into the

00:00:48.160 --> 00:00:51.510
guest operating system in a very virtualized setting.

00:00:51.510 --> 00:00:57.200
So on an architecture like Intel, where the page table is a data

00:00:57.200 --> 00:01:02.600
structure of the operating system. And it is also used by the hardware to do

00:01:02.600 --> 00:01:07.910
the address translation. The responsibility of allocating

00:01:07.910 --> 00:01:10.890
and managing the hardware page table data

00:01:10.890 --> 00:01:13.440
structure can be shifted into the guest

00:01:13.440 --> 00:01:16.540
operating system. In a fully virtualized setting,

00:01:16.540 --> 00:01:19.110
it's not possible to do that because the

00:01:19.110 --> 00:01:21.930
operating system in a fully virtualized setting is

00:01:21.930 --> 00:01:24.510
unaware of the fact that it is not

00:01:24.510 --> 00:01:27.530
running on bare metal. But in a paravirtualized

00:01:27.530 --> 00:01:29.560
setting, since it is possible to do that,

00:01:29.560 --> 00:01:33.280
it is more efficient to push this efficient

00:01:33.280 --> 00:01:37.080
mapping handling into the guest operating system. For

00:01:37.080 --> 00:01:42.580
example, in Xen, which is a paravirtualized hypervisor

00:01:42.580 --> 00:01:48.850
it provides a set of Hypercalls for the guest operating system to tell the

00:01:48.850 --> 00:01:51.870
Hypervisor about changes to the hardware page

00:01:51.870 --> 00:01:54.540
table. So, for instance, there is a call

00:01:54.540 --> 00:02:00.720
that says create page table and this allows a guest operating system to allocate

00:02:00.720 --> 00:02:04.440
and initialize a page frame that it

00:02:04.440 --> 00:02:07.610
has previously acquired a real page frame that

00:02:07.610 --> 00:02:13.360
it is previously acquired from the hypervisor as a hardware resource. It can

00:02:13.360 --> 00:02:20.190
target that physical page frame as a page table data structure. Recall that

00:02:20.190 --> 00:02:25.690
each guest operating system, would have gotten a bunch of physical memory from

00:02:25.690 --> 00:02:29.000
the hypervisor at the beginning of

00:02:29.000 --> 00:02:32.700
establishing its foot print on the hypervisor.

00:02:32.700 --> 00:02:38.680
And so it can use one of those real physical memories to host a pay stable

00:02:38.680 --> 00:02:41.410
data structure, on behalf of a new process

00:02:41.410 --> 00:02:45.230
that it launches now. So anytime a new process

00:02:45.230 --> 00:02:48.080
starts up in the guest operating system, the

00:02:48.080 --> 00:02:51.470
guest operating system will make a hypercall to xen

00:02:51.470 --> 00:02:55.090
saying. Please create a page table for me,

00:02:55.090 --> 00:02:57.980
and this is the page frame that I'm giving

00:02:57.980 --> 00:03:03.320
you to use as the page table. So, when the guest operating system has to operate

00:03:03.320 --> 00:03:07.420
this particular process which got launched, then it

00:03:07.420 --> 00:03:11.530
can make another hypercall to the hypervisor saying

00:03:11.530 --> 00:03:14.400
please switch to page table, and here is

00:03:14.400 --> 00:03:17.560
the location of the page table. The hypervisor

00:03:17.560 --> 00:03:19.640
doesn't know about all these processes. All it

00:03:19.640 --> 00:03:23.240
understands is that there's a hypercall that says change

00:03:23.240 --> 00:03:28.020
the page table from whatever it used to be to this new page table. And

00:03:28.020 --> 00:03:31.940
that essentially results in this guest operating system,

00:03:31.940 --> 00:03:36.220
switching the address space. Of the currently running

00:03:36.220 --> 00:03:41.970
process on the the bare hardware on the bare metal to P1 by this switch page

00:03:41.970 --> 00:03:45.070
table hypercall. Xen will do that appropriate thing,

00:03:45.070 --> 00:03:48.640
of setting the hardware register of the processor

00:03:48.640 --> 00:03:51.620
to point to this page table data structure.

00:03:51.620 --> 00:03:54.430
In response to this hypercall from the guest operating

00:03:54.430 --> 00:03:57.630
system. If the process P1 one were to page

00:03:57.630 --> 00:03:59.920
fault at some point of time, the page fault

00:03:59.920 --> 00:04:03.000
would be handled by the guest operating system. We'll

00:04:03.000 --> 00:04:05.350
talk about how it does that later on. But

00:04:05.350 --> 00:04:08.820
once it handles that page fault for P1 and

00:04:08.820 --> 00:04:14.310
says, oh, this particular virtual page of this process

00:04:14.310 --> 00:04:19.810
is now going to correspond to a physical frame that I own. I'm going to tell the

00:04:19.810 --> 00:04:27.230
hypervisor that the mapping in the page table, has to be set for

00:04:27.230 --> 00:04:30.670
this translation that I just established for

00:04:30.670 --> 00:04:33.550
the faulted page for this process. So

00:04:33.550 --> 00:04:36.750
there's another hypercall that's available for updating

00:04:36.750 --> 00:04:39.490
a given page table data structure. And using

00:04:39.490 --> 00:04:42.750
this the guest operating system can deal

00:04:42.750 --> 00:04:46.190
with modifications to the base table data structure.

00:04:46.190 --> 00:04:52.565
All the things that an operating system would have to do in a normal setting on

00:04:52.565 --> 00:04:58.030
bare metal. You have to be able to do in the setting where you have the

00:04:58.030 --> 00:05:01.940
hypervisor sitting between the real hardware and the

00:05:01.940 --> 00:05:04.560
guest operating system. And the three things that

00:05:04.560 --> 00:05:06.740
are required to be done in the conflicts of

00:05:06.740 --> 00:05:10.660
memory management, in a para virtualized setting, is being able

00:05:10.660 --> 00:05:14.870
to create a brand new hardware address space for

00:05:14.870 --> 00:05:18.460
a newly launched process which involves creating a page table.

00:05:18.460 --> 00:05:20.980
That's a hypercall that's available. When you do a

00:05:20.980 --> 00:05:24.320
conflict switch, you want to switch the page table. That's a

00:05:24.320 --> 00:05:26.710
hypercall that's available when you do a conflict switch in

00:05:26.710 --> 00:05:29.690
the guest operating system from P1 to P2, the guest

00:05:29.690 --> 00:05:35.050
can tell the hypervisor that the page table to use from now on is such and so.

00:05:35.050 --> 00:05:38.150
That's the way the guest can do a contact

00:05:38.150 --> 00:05:42.820
switch from one process to another. And, thirdly, since

00:05:42.820 --> 00:05:45.310
not all of the address space or the

00:05:45.310 --> 00:05:49.060
memory footprint of a process would be physical memory,

00:05:49.060 --> 00:05:52.600
if the currently running process were to incur at

00:05:52.600 --> 00:05:54.760
page four, that has to be handled by the

00:05:54.760 --> 00:05:57.520
guest operating system. In handling that, it

00:05:57.520 --> 00:06:01.520
establishes a mapping between the messy virtual page

00:06:01.520 --> 00:06:05.880
for this process and the physical frame in which the contents of the page is

00:06:05.880 --> 00:06:09.840
now contained. That mapping has been put

00:06:09.840 --> 00:06:12.340
into the page table for this particular process.

00:06:12.340 --> 00:06:17.020
Again that's something that only the hypervisor can

00:06:17.020 --> 00:06:20.640
do, because it is a privileged operation happening

00:06:20.640 --> 00:06:24.000
inside the hardware. And for that purpose, the

00:06:24.000 --> 00:06:27.250
hypervisor provides a hyper call that allows a

00:06:27.250 --> 00:06:30.028
guest operating system to update the base table

00:06:30.028 --> 00:06:32.360
data structure. So at the outset I said that

00:06:32.360 --> 00:06:35.560
handling virtual memory is a thorny issue. Doing

00:06:35.560 --> 00:06:38.590
the mapping from virtual to physical on every

00:06:38.590 --> 00:06:42.880
memory access, with all the intervention of the

00:06:42.880 --> 00:06:47.140
guest operating system is the key to good performance.

00:06:47.140 --> 00:06:51.010
And it can be done both in fully virtualized and

00:06:51.010 --> 00:06:54.170
paravirtualized setting by the tricks that we talked about just now.

