WEBVTT
Kind: captions
Language: en

00:00:04.990 --> 00:00:09.040
Hi, I'm Chet Haas, an engineer
on the Android Team at Google.

00:00:09.040 --> 00:00:11.610
So I saw a talk recently at
Google I/O where they were

00:00:11.610 --> 00:00:15.470
showing some example animation
code, which I always like.

00:00:15.470 --> 00:00:19.010
And I saw something curious
there, which was someone said,

00:00:19.010 --> 00:00:21.340
well, we need to animate a
couple of properties at the

00:00:21.340 --> 00:00:23.410
same time on the same
target object.

00:00:23.410 --> 00:00:25.650
And we can't do that directly
with Object Animator.

00:00:25.650 --> 00:00:28.000
So we're going to use the Value
Animator Object and do

00:00:28.000 --> 00:00:29.220
it more manually.

00:00:29.220 --> 00:00:31.865
And I thought, hm, that's
not actually correct.

00:00:34.530 --> 00:00:35.520
So I realized at that point--

00:00:35.520 --> 00:00:37.590
I thought this was obvious,
how to do this.

00:00:37.590 --> 00:00:40.720
And I realized maybe it would
be good if I actually

00:00:40.720 --> 00:00:42.200
explained how to do
this in general.

00:00:42.200 --> 00:00:46.710
There's a class called Property
Values Holder that

00:00:46.710 --> 00:00:49.930
you might want to know about if
you need to do this on your

00:00:49.930 --> 00:00:51.890
own targets and properties.

00:00:51.890 --> 00:00:55.240
So I have a demo to show you
here with four simple buttons

00:00:55.240 --> 00:00:57.450
on it, all of which want
to be animated.

00:00:57.450 --> 00:00:58.940
And you'll notice
that all of them

00:00:58.940 --> 00:01:00.980
animate remarkably similarly.

00:01:00.980 --> 00:01:03.720
In fact, it's effectively the
same animation happening on

00:01:03.720 --> 00:01:04.900
all of them.

00:01:04.900 --> 00:01:07.440
But the code for doing
it is very different.

00:01:07.440 --> 00:01:10.630
So for the first button,
we use a

00:01:10.630 --> 00:01:12.290
Value Animator animation.

00:01:12.290 --> 00:01:15.740
And the example that I saw in
this particular talk said, OK,

00:01:15.740 --> 00:01:17.050
we're going to use
Value Animator.

00:01:17.050 --> 00:01:19.150
And this will return a value
between 0 and 1.

00:01:19.150 --> 00:01:22.880
And then we take this value,
and we figure out what the

00:01:22.880 --> 00:01:26.190
target value should be on the
target object that we're

00:01:26.190 --> 00:01:27.300
trying to animate.

00:01:27.300 --> 00:01:27.990
So I do that here.

00:01:27.990 --> 00:01:30.610
So the approach to doing this
with the Value Animator is you

00:01:30.610 --> 00:01:34.740
create your Value Animator
between start and end values.

00:01:34.740 --> 00:01:38.400
Here, it doesn't actually matter
what those values are,

00:01:38.400 --> 00:01:39.160
because we're going
to be using the

00:01:39.160 --> 00:01:41.100
animated fraction anyway.

00:01:41.100 --> 00:01:43.720
And then we add an Update
Listener so that we get a call

00:01:43.720 --> 00:01:45.530
back on every single
animation frame.

00:01:45.530 --> 00:01:48.500
And then during that frame, we
get the animated fraction.

00:01:48.500 --> 00:01:51.920
This gives us a value between
0 and 1 to tell us where, in

00:01:51.920 --> 00:01:54.220
the course of this animation,
the animation is.

00:01:54.220 --> 00:01:56.350
And then we can take that
value and use it to

00:01:56.350 --> 00:02:00.220
interpolate the value of
our end targets and end

00:02:00.220 --> 00:02:00.990
properties.

00:02:00.990 --> 00:02:03.130
So here we simply set the
translation x and the

00:02:03.130 --> 00:02:06.160
translation y values directly
on the object with a simple

00:02:06.160 --> 00:02:07.530
linear interpolation.

00:02:07.530 --> 00:02:09.009
And then we start
the animation.

00:02:09.009 --> 00:02:10.350
Very straightforward.

00:02:10.350 --> 00:02:14.420
But there are easier ways to do
this with a lot less code.

00:02:14.420 --> 00:02:17.140
The second one is probably the
easiest way to do this.

00:02:17.140 --> 00:02:19.960
An important point to note here
is I would always use

00:02:19.960 --> 00:02:22.990
View Property Animator in this
particular situation.

00:02:22.990 --> 00:02:26.010
I'm animating properties on
a view, translation x and

00:02:26.010 --> 00:02:26.550
translation y.

00:02:26.550 --> 00:02:29.680
And this is exactly why View
Property Animator was created.

00:02:29.680 --> 00:02:31.280
The code is very simple
and streamlined.

00:02:31.280 --> 00:02:34.100
You can do things in parallel
in the same animation.

00:02:34.100 --> 00:02:37.000
And it's very efficient at
animating multiple things,

00:02:37.000 --> 00:02:40.250
because it has intrinsic
knowledge about views that

00:02:40.250 --> 00:02:43.520
make its invalidation and
rendering and update system

00:02:43.520 --> 00:02:45.040
very efficient internally.

00:02:45.040 --> 00:02:46.420
So it's the right
thing to use.

00:02:46.420 --> 00:02:48.490
But sometimes you're animating
things that aren't simply

00:02:48.490 --> 00:02:51.560
properties on a view, in which
case you couldn't use View

00:02:51.560 --> 00:02:52.650
Property Animator.

00:02:52.650 --> 00:02:55.570
And you'll need to use one of
the techniques that I show a

00:02:55.570 --> 00:02:56.580
little bit later.

00:02:56.580 --> 00:02:58.810
So if you can use View Property
Animator, here's how

00:02:58.810 --> 00:02:59.270
it would work.

00:02:59.270 --> 00:03:01.230
You would call Animate
on the View.

00:03:01.230 --> 00:03:04.100
That returns a View Property
Animator object.

00:03:04.100 --> 00:03:05.290
And then it would
say translation

00:03:05.290 --> 00:03:06.680
x to the end value.

00:03:06.680 --> 00:03:09.190
Translation y to
the end value.

00:03:09.190 --> 00:03:09.830
And you're done.

00:03:09.830 --> 00:03:10.960
Don't need to call start.

00:03:10.960 --> 00:03:12.890
Don't need to do these in
separate statements.

00:03:12.890 --> 00:03:15.030
You're basically just building
up the animation.

00:03:15.030 --> 00:03:17.320
And when you're done building
it, it automatically starts in

00:03:17.320 --> 00:03:18.250
the next frame.

00:03:18.250 --> 00:03:20.080
And you're good to go.

00:03:20.080 --> 00:03:20.890
Straightforward.

00:03:20.890 --> 00:03:21.340
Easy to use.

00:03:21.340 --> 00:03:22.880
Use View Property Animator.

00:03:22.880 --> 00:03:24.710
But if you can't--

00:03:24.710 --> 00:03:27.650
maybe you're looking at using
Object Animators instead.

00:03:27.650 --> 00:03:31.410
So this is what the example
that I saw was trying to

00:03:31.410 --> 00:03:34.200
avoid, was creating multiple
Object Animators, even though

00:03:34.200 --> 00:03:35.650
you're only animating
one object.

00:03:35.650 --> 00:03:38.910
We all know that creating more
and more objects, especially

00:03:38.910 --> 00:03:40.770
during animations, may
be a bad thing.

00:03:40.770 --> 00:03:42.500
So maybe you want
to avoid this.

00:03:42.500 --> 00:03:44.340
But it's fairly straightforward.

00:03:44.340 --> 00:03:47.210
This is maybe the trivial
approach to solving this

00:03:47.210 --> 00:03:49.770
problem with an Object Animator,
which is I want one

00:03:49.770 --> 00:03:53.620
Object Animator that animates
the values for translation x.

00:03:53.620 --> 00:03:56.460
I want another Object Animator
that animates the values for

00:03:56.460 --> 00:03:57.640
translation y.

00:03:57.640 --> 00:03:59.280
And I want you to start
both of them.

00:03:59.280 --> 00:04:00.170
Pretty simple.

00:04:00.170 --> 00:04:02.640
If you need to choreograph it
a little more carefully, you

00:04:02.640 --> 00:04:04.050
can use an Animator Set.

00:04:04.050 --> 00:04:06.770
Add these things into play
sequentially or play together

00:04:06.770 --> 00:04:08.540
or play with other animators.

00:04:08.540 --> 00:04:10.080
All very straightforward.

00:04:10.080 --> 00:04:11.290
Not a big deal.

00:04:11.290 --> 00:04:13.630
But you are creating a couple
of Object Animators that are

00:04:13.630 --> 00:04:15.770
sort of running without
knowledge of each other.

00:04:15.770 --> 00:04:18.839
And maybe that's just not as
efficient at what you really

00:04:18.839 --> 00:04:19.380
wanted to do.

00:04:19.380 --> 00:04:21.740
What you really wanted to
do was the following.

00:04:21.740 --> 00:04:23.660
You want to use property
values holders.

00:04:23.660 --> 00:04:26.390
This is actually what Object
Animator uses internally.

00:04:26.390 --> 00:04:28.590
But you can access it
on the outside too.

00:04:28.590 --> 00:04:31.380
In this case, we're animating
the same object, but we're

00:04:31.380 --> 00:04:33.330
animating multiple
properties on the

00:04:33.330 --> 00:04:34.910
same object in parallel.

00:04:34.910 --> 00:04:36.780
So what we're going to do is
set up a property's value

00:04:36.780 --> 00:04:38.930
holder to animate our
translation x

00:04:38.930 --> 00:04:40.680
property to the end value.

00:04:40.680 --> 00:04:43.550
Another property values holder
to animate the translation y

00:04:43.550 --> 00:04:46.200
property on the same object.

00:04:46.200 --> 00:04:48.220
And then we're going to set
up the Object Animator.

00:04:48.220 --> 00:04:51.370
And this is what associates the
property values holders

00:04:51.370 --> 00:04:54.410
with the actual target
object of our view.

00:04:54.410 --> 00:04:56.320
So now that we've set up the
property values holder, we

00:04:56.320 --> 00:04:59.100
come down here, and we create
a single Object Animator.

00:04:59.100 --> 00:05:02.400
And we say, OK, on our target
view I want you to use this

00:05:02.400 --> 00:05:05.580
property value holder for
translation x, the other

00:05:05.580 --> 00:05:08.100
property values holder for
translation y, and I want you

00:05:08.100 --> 00:05:09.000
to start it.

00:05:09.000 --> 00:05:10.010
And bang.

00:05:10.010 --> 00:05:10.670
You're done.

00:05:10.670 --> 00:05:12.940
So animating multiple properties
in parallel on the

00:05:12.940 --> 00:05:15.490
same target object, View
Property Animator

00:05:15.490 --> 00:05:16.270
if you can use it.

00:05:16.270 --> 00:05:18.820
Property Values Holder
if you can't.

00:05:18.820 --> 00:05:20.070
Thanks.

