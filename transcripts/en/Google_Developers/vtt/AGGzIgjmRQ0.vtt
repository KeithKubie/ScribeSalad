WEBVTT
Kind: captions
Language: en

00:00:04.500 --> 00:00:05.030
All right.

00:00:05.030 --> 00:00:05.850
Thank you all for coming.

00:00:05.850 --> 00:00:06.470
I'm Craig.

00:00:06.470 --> 00:00:09.264
I work in the Google Enterprise
team on the Cloud Platform.

00:00:09.264 --> 00:00:11.180
And what I want to spend
a bit of time telling

00:00:11.180 --> 00:00:12.560
you about today is
some of the things

00:00:12.560 --> 00:00:14.143
that we've announced
recently and some

00:00:14.143 --> 00:00:16.870
of the new advances that we feel
will be leading the industry

00:00:16.870 --> 00:00:21.292
over the next months
in the area of Cloud.

00:00:21.292 --> 00:00:23.000
So another quote from
Snapchat, they just

00:00:23.000 --> 00:00:25.956
had a great release yesterday
of a video product which

00:00:25.956 --> 00:00:27.330
is powered by the
Cloud Platform.

00:00:27.330 --> 00:00:29.470
So you can just hold your
finger down and video chat

00:00:29.470 --> 00:00:31.511
to someone for the period
that you're doing that.

00:00:31.511 --> 00:00:34.530
So still very much
in the original idea

00:00:34.530 --> 00:00:36.840
of ephemeral conversation
based around pictures,

00:00:36.840 --> 00:00:39.530
but now much more
throughput, much more

00:00:39.530 --> 00:00:42.950
capacity required Easy to
do on the Cloud Platform.

00:00:42.950 --> 00:00:44.726
They've got about
25 engineers now.

00:00:44.726 --> 00:00:47.100
They have a couple people who
do a little bit of op stuff

00:00:47.100 --> 00:00:47.891
every now and then.

00:00:47.891 --> 00:00:50.530
But in general, by
picking Google App Engine,

00:00:50.530 --> 00:00:53.230
they can have the developers
focus on new features.

00:00:53.230 --> 00:00:55.666
You don't have to worry
about provisioning servers,

00:00:55.666 --> 00:00:58.040
load balances, all the stuff
[? Riff ?] mentioned before.

00:00:58.040 --> 00:00:58.870
It's very easy.

00:00:58.870 --> 00:00:59.780
You write code.

00:00:59.780 --> 00:01:01.010
You give it to us to run.

00:01:01.010 --> 00:01:03.770
We have a team of site
reliability engineers

00:01:03.770 --> 00:01:06.410
who look after everything
for the platform,

00:01:06.410 --> 00:01:10.520
so all you have to think about
is writing your own code.

00:01:10.520 --> 00:01:12.725
Even though we've got
this, we believe at Google

00:01:12.725 --> 00:01:14.427
that Cloud is still too hard.

00:01:14.427 --> 00:01:16.260
There's two main areas
that we're attacking.

00:01:16.260 --> 00:01:18.827
The first one is the
complexity of pricing.

00:01:18.827 --> 00:01:21.410
So if you've used Cloud before,
you're familiar with the idea.

00:01:21.410 --> 00:01:23.010
You pay a little bit
for your service.

00:01:23.010 --> 00:01:24.380
You pay a little
bit for your disks.

00:01:24.380 --> 00:01:25.830
You pay a little bit
for your networking.

00:01:25.830 --> 00:01:27.246
All together,
you'll get something

00:01:27.246 --> 00:01:29.970
that is a lot cheaper than doing
things the traditional way,

00:01:29.970 --> 00:01:32.730
but you quite often need to have
a Ph.D. In statistics to figure

00:01:32.730 --> 00:01:36.390
out pricing models and what
the best thing to do is.

00:01:36.390 --> 00:01:38.470
Second area is
the current clouds

00:01:38.470 --> 00:01:40.840
force you to make
trade offs in decision.

00:01:40.840 --> 00:01:43.720
So if you've chosen
to adopt a platform,

00:01:43.720 --> 00:01:45.570
you might find that
you outgrow that.

00:01:45.570 --> 00:01:48.390
And a number of famous
apps-- Twitter, for example,

00:01:48.390 --> 00:01:50.227
built on Ruby on
Rails-- got to a point

00:01:50.227 --> 00:01:52.810
where you were seeing the whale
all the time because they just

00:01:52.810 --> 00:01:54.060
couldn't handle the load.

00:01:54.060 --> 00:01:54.910
They had to stop.

00:01:54.910 --> 00:01:55.956
That had to re-engineer.

00:01:55.956 --> 00:01:57.830
And they've got a really
great service today,

00:01:57.830 --> 00:01:59.996
but they had to bring on a
completely different team

00:01:59.996 --> 00:02:01.320
in order to be able to do that.

00:02:01.320 --> 00:02:03.997
We think you should be
able to start here and get

00:02:03.997 --> 00:02:06.330
to here without having to
change anything along the way.

00:02:06.330 --> 00:02:10.460
And some announcements that
we've made talk about that.

00:02:10.460 --> 00:02:11.990
So first of all,
the price of Cloud

00:02:11.990 --> 00:02:15.020
has fallen over
the last few years,

00:02:15.020 --> 00:02:18.341
but the price of hardware has
fallen at a far greater rate.

00:02:18.341 --> 00:02:20.090
So when you think about
Moore's law, which

00:02:20.090 --> 00:02:22.890
says that compute power
should double every 18 months,

00:02:22.890 --> 00:02:25.140
it goes to say that
the price of running

00:02:25.140 --> 00:02:26.700
a standard unit
of compute should

00:02:26.700 --> 00:02:29.530
halve about every 18 months.

00:02:29.530 --> 00:02:31.170
So we've done two
things in order

00:02:31.170 --> 00:02:34.100
to equalize the market around
this idea of Moore's law.

00:02:34.100 --> 00:02:36.790
First is the on demand
price reductions,

00:02:36.790 --> 00:02:38.620
and second is an
innovative new model

00:02:38.620 --> 00:02:41.420
for pricing around
sustained use.

00:02:41.420 --> 00:02:43.450
So with on demand
price reductions,

00:02:43.450 --> 00:02:45.830
we've dropped the price 32%.

00:02:45.830 --> 00:02:48.000
All the other vendors
dropped their price

00:02:48.000 --> 00:02:50.692
to match pretty much the next
day, but only on the things

00:02:50.692 --> 00:02:51.650
that they compete with.

00:02:51.650 --> 00:02:53.090
So we're really
setting the market

00:02:53.090 --> 00:02:54.800
to trend for where
prices should be.

00:02:54.800 --> 00:02:56.460
So that goes across
every compute thing

00:02:56.460 --> 00:03:00.940
we run, all regions,
all sizes, all classes.

00:03:00.940 --> 00:03:03.700
Cloud storage, other
vendors dropped their price

00:03:03.700 --> 00:03:05.752
not quite as ambitiously
as this, but now

00:03:05.752 --> 00:03:07.210
everything you
store on the Cloud--

00:03:07.210 --> 00:03:09.880
it was previously around
7 or 8 cents a gigabyte,

00:03:09.880 --> 00:03:12.440
and you'd have tiering
down to about $0.05-- we've

00:03:12.440 --> 00:03:15.670
dropped that to a flat
2.6 cents per gigabyte.

00:03:15.670 --> 00:03:17.220
I don't think you
can buy hard drives

00:03:17.220 --> 00:03:19.110
for that price on
the common market.

00:03:19.110 --> 00:03:22.070
If you want what we call
durable reduced availability,

00:03:22.070 --> 00:03:24.810
we back it up in a small
number of data centers,

00:03:24.810 --> 00:03:27.420
it's now only 2 cents per
gigabyte rather than 2.6 cents

00:03:27.420 --> 00:03:30.430
So great for archive data.

00:03:30.430 --> 00:03:32.410
We have a big data
product called BigQuery.

00:03:32.410 --> 00:03:34.701
And we probably won't have
time to talk about it today,

00:03:34.701 --> 00:03:36.230
but as it's been
mentioned, it lets

00:03:36.230 --> 00:03:38.080
you query across all
of the information

00:03:38.080 --> 00:03:39.450
that you might have.

00:03:39.450 --> 00:03:42.680
Petabyte scale, every event
that's ever been generated,

00:03:42.680 --> 00:03:44.690
every edit in Wikipedia,
you can do a query

00:03:44.690 --> 00:03:47.080
over that in 5 or 10
seconds, something

00:03:47.080 --> 00:03:49.270
that traditional
databases can't do.

00:03:49.270 --> 00:03:52.620
It was previously $35.00
per terabyte processed.

00:03:52.620 --> 00:03:54.680
We want to democratize
this capability

00:03:54.680 --> 00:03:56.290
that we use
internally at Google.

00:03:56.290 --> 00:03:58.200
We want to make it
available to everybody.

00:03:58.200 --> 00:04:01.290
So the price has been dropped
to $5.00 per terabyte.

00:04:01.290 --> 00:04:02.710
And at the end,
we'll have a chat

00:04:02.710 --> 00:04:04.251
about how we can
give you some credit

00:04:04.251 --> 00:04:07.012
to get involved with this.

00:04:07.012 --> 00:04:10.267
We have great
opportunities for if you

00:04:10.267 --> 00:04:11.350
outgrow the need for this.

00:04:11.350 --> 00:04:13.141
If you need to do
streaming stuff, probably

00:04:13.141 --> 00:04:16.200
not the initial scale, but you
can purchase reserve capacity

00:04:16.200 --> 00:04:18.589
for BigQuery.

00:04:18.589 --> 00:04:21.220
And effectively, it'll
cost you four times as much

00:04:21.220 --> 00:04:24.902
to do what you do on
BigQuery with industry

00:04:24.902 --> 00:04:26.610
pricing for other
vendors that don't even

00:04:26.610 --> 00:04:27.860
let you perform it as quickly.

00:04:30.490 --> 00:04:33.420
So to recap, end
of March we reset

00:04:33.420 --> 00:04:34.580
the pricing on the market.

00:04:34.580 --> 00:04:38.310
We found that a number other
vendors made several cuts,

00:04:38.310 --> 00:04:40.790
but they're really just paying
lip service to the idea.

00:04:40.790 --> 00:04:42.770
Google have been running
this kind of scale

00:04:42.770 --> 00:04:44.902
internally for 15
years and we want

00:04:44.902 --> 00:04:46.360
to make this
available to everyone.

00:04:46.360 --> 00:04:48.510
We want to make it available
to all developers who

00:04:48.510 --> 00:04:51.639
want to come along
and use our platform.

00:04:51.639 --> 00:04:53.430
That was the original
promise of the Cloud,

00:04:53.430 --> 00:04:55.080
is you could say well, I
want some of this today

00:04:55.080 --> 00:04:56.480
and I want some
of that tomorrow,

00:04:56.480 --> 00:04:58.250
and you can balance things.

00:04:58.250 --> 00:05:01.255
But the model that
got adopted was well,

00:05:01.255 --> 00:05:02.880
I've got to buy a
reservation and it'll

00:05:02.880 --> 00:05:05.034
grant me the right to
run this at this price.

00:05:05.034 --> 00:05:06.700
And it really doesn't
go along with what

00:05:06.700 --> 00:05:08.980
we thought the
original model was.

00:05:08.980 --> 00:05:11.350
This is what I talked about
before about pricing models.

00:05:11.350 --> 00:05:14.100
You say well, if we just
use it, we'll pay this much.

00:05:14.100 --> 00:05:16.640
But we can buy reservations
which allow different things

00:05:16.640 --> 00:05:20.047
and the idea of having
to model your pricing,

00:05:20.047 --> 00:05:22.005
and then well that doesn't
really go with well,

00:05:22.005 --> 00:05:23.588
I don't know what I
need to use today.

00:05:23.588 --> 00:05:26.080
And if I'm lucky, then I
might have this problem.

00:05:26.080 --> 00:05:28.390
Or if I want to fail fast
and try a lot of things,

00:05:28.390 --> 00:05:29.530
then that what do I do?

00:05:29.530 --> 00:05:31.710
Is it worth taking
the upfront discount

00:05:31.710 --> 00:05:36.500
in order to be able to
potentially succeed over time?

00:05:36.500 --> 00:05:39.650
So we think what you should get
is the best price, regardless.

00:05:39.650 --> 00:05:42.710
No upfront payments, no
lock in, no complexity.

00:05:42.710 --> 00:05:44.770
So what we've launched is
sustained use discounts

00:05:44.770 --> 00:05:46.430
on our pricing.

00:05:46.430 --> 00:05:48.390
So that was our old
on demand, right.

00:05:48.390 --> 00:05:50.140
You'd pay 10.5 cents an hour.

00:05:50.140 --> 00:05:52.510
So let's say 32% drop
to start with that.

00:05:52.510 --> 00:05:54.420
That's our new on demand rate.

00:05:54.420 --> 00:05:57.620
And the more you use,
the less you pay.

00:05:57.620 --> 00:05:59.940
And so overall, it averages
out at the same rate

00:05:59.940 --> 00:06:02.810
that other people
offer reservations.

00:06:02.810 --> 00:06:05.890
But if you use 100%
of a month-- so

00:06:05.890 --> 00:06:08.800
if you run a server full time
over the course of the month--

00:06:08.800 --> 00:06:14.360
the rate is effectively 20%
lower than it was beforehand.

00:06:14.360 --> 00:06:16.830
So that works out
to a 53% price drop

00:06:16.830 --> 00:06:18.280
if you're using
sustained compute

00:06:18.280 --> 00:06:19.530
over the course of that month.

00:06:22.340 --> 00:06:23.920
So that's just a
little recap of what

00:06:23.920 --> 00:06:26.190
we've done to the
pricing in the industry.

00:06:28.890 --> 00:06:32.970
We hope that will help you
realize the initial promise

00:06:32.970 --> 00:06:36.000
of cloud computing, which
is predictable low pricing

00:06:36.000 --> 00:06:37.915
and aligned with Moore's law.

00:06:37.915 --> 00:06:41.530
But Cloud's still too hard.

00:06:41.530 --> 00:06:44.300
You have to make tradeoffs
to work around the weaknesses

00:06:44.300 --> 00:06:46.760
and limitations that
Cloud vendors offer.

00:06:49.420 --> 00:06:51.412
You have to choose
between a quick time

00:06:51.412 --> 00:06:53.120
to market, like we
mentioned with Twitter

00:06:53.120 --> 00:06:55.970
before, or scalability.

00:06:55.970 --> 00:06:58.270
You have to choose
between flexibility

00:06:58.270 --> 00:07:01.020
or automatic management,
so the scales

00:07:01.020 --> 00:07:03.500
that Alex was talking about
before between a managed

00:07:03.500 --> 00:07:06.742
service and a lower
level compute service.

00:07:06.742 --> 00:07:08.200
And when you're
doing big data, you

00:07:08.200 --> 00:07:09.740
have to choose
between do you want

00:07:09.740 --> 00:07:13.480
to be able to query in
a lot of information,

00:07:13.480 --> 00:07:16.852
or do you want to be able
to access it in real time?

00:07:16.852 --> 00:07:18.310
And what we're
doing here at Google

00:07:18.310 --> 00:07:21.980
is changing the or to the
and in all of these cases.

00:07:21.980 --> 00:07:24.860
And let's just quickly talk you
through what we're doing here.

00:07:24.860 --> 00:07:27.020
Developer productivity,
we don't want

00:07:27.020 --> 00:07:32.010
you to have to choose between
time to market and scale.

00:07:32.010 --> 00:07:34.430
We want you to be able to
use the tools that you love.

00:07:34.430 --> 00:07:36.530
We want you to be able to
do deployments quickly.

00:07:36.530 --> 00:07:38.870
We want you just to be
able to push code to us,

00:07:38.870 --> 00:07:40.980
and then we'll worry
about everything else.

00:07:40.980 --> 00:07:42.890
We want to be able
to offer an ability

00:07:42.890 --> 00:07:46.500
to look across the logs for
all the applications you're

00:07:46.500 --> 00:07:48.420
running, find and fix
errors in production

00:07:48.420 --> 00:07:51.007
quickly, let you get out
there, let you put test

00:07:51.007 --> 00:07:52.590
environments up, and
more importantly,

00:07:52.590 --> 00:07:53.990
let you see when
things are going

00:07:53.990 --> 00:07:59.130
wrong in the real production
environment, and change them.

00:07:59.130 --> 00:08:00.436
Now I'll try my little demo.

00:08:09.212 --> 00:08:10.920
The easiest way to do
this might actually

00:08:10.920 --> 00:08:12.170
be just to look at the screen.

00:08:20.884 --> 00:08:24.870
If I can-- nope.

00:08:24.870 --> 00:08:28.180
So I've come up with a
completely original idea

00:08:28.180 --> 00:08:30.070
for a mobile
application which is

00:08:30.070 --> 00:08:32.150
in no way derivative
of anything whatsoever.

00:08:32.150 --> 00:08:34.659
[LAUGHTER]

00:08:34.659 --> 00:08:37.720
So I've got my little app
running in production.

00:08:37.720 --> 00:08:42.510
And the great news is,
I'm not very good at it.

00:08:42.510 --> 00:08:45.250
You're welcome to give it
a go and say, oop, one.

00:08:45.250 --> 00:08:45.930
All right.

00:08:45.930 --> 00:08:51.420
So see here, I probably
don't have a very high score.

00:08:51.420 --> 00:08:53.870
So I go and look at
the high score table

00:08:53.870 --> 00:08:58.195
and see that my score of one
is being registered, obviously.

00:09:01.810 --> 00:09:03.850
Turns out that my
broken demo possibly

00:09:03.850 --> 00:09:07.720
isn't as broken as
I hoped it would be.

00:09:07.720 --> 00:09:11.240
But what we did is actually
introduced a bug in this

00:09:11.240 --> 00:09:14.110
that we want to demonstrate.

00:09:14.110 --> 00:09:17.280
So all of the logs generated
by this application

00:09:17.280 --> 00:09:19.762
are available here
in our log console.

00:09:19.762 --> 00:09:21.720
And if we have a look at
this one, for example,

00:09:21.720 --> 00:09:24.060
you can see here that
there's an error message.

00:09:24.060 --> 00:09:26.890
It says there was an error
uploading a high score.

00:09:26.890 --> 00:09:29.765
And so, in the
action of refactoring

00:09:29.765 --> 00:09:31.140
our code and we've
made a change,

00:09:31.140 --> 00:09:33.140
we pushed it into production,
and we've actually

00:09:33.140 --> 00:09:33.990
got an error.

00:09:33.990 --> 00:09:36.900
And what you can do now
is you can click through

00:09:36.900 --> 00:09:39.910
from the production log
console to the actual source

00:09:39.910 --> 00:09:41.420
repository.

00:09:41.420 --> 00:09:43.040
So I can come in
here and I can see

00:09:43.040 --> 00:09:45.547
the code that's in the Git
repository that we provide.

00:09:45.547 --> 00:09:47.130
And you could also
link this to GitHub

00:09:47.130 --> 00:09:49.850
if you're using that
for collaboration.

00:09:49.850 --> 00:09:53.020
And we can see the error that's
generated here is to say,

00:09:53.020 --> 00:09:57.230
if the user is not an admin,
then throw an exception.

00:09:57.230 --> 00:10:00.530
And we obviously want everyone
to be able to participate.

00:10:00.530 --> 00:10:04.680
So what we can do is just go
into the Edit button there,

00:10:04.680 --> 00:10:07.600
and we can actually
make changes to this.

00:10:07.600 --> 00:10:09.590
So we don't need
that line of code.

00:10:09.590 --> 00:10:12.615
So what I'll do is
comment that out.

00:10:12.615 --> 00:10:14.241
Now that might be
something that you're

00:10:14.241 --> 00:10:15.989
familiar with doing
if you're a developer,

00:10:15.989 --> 00:10:17.096
is logging onto a machine.

00:10:17.096 --> 00:10:18.470
And then what you
obviously do is

00:10:18.470 --> 00:10:19.680
you're setting up a situation.

00:10:19.680 --> 00:10:20.805
Well, it's out of sync now.

00:10:20.805 --> 00:10:23.000
I've made a change and
it's not in my repository.

00:10:23.000 --> 00:10:24.670
What this is actually
doing is this

00:10:24.670 --> 00:10:26.865
is committing code
to our repository.

00:10:34.540 --> 00:10:36.280
And this gives me a
chance to introduce

00:10:36.280 --> 00:10:38.680
our new build test
pipeline to you.

00:10:44.950 --> 00:10:50.760
So under Cloud Development
in that Cloud Console,

00:10:50.760 --> 00:10:52.890
we have a connected
Git repository.

00:10:52.890 --> 00:10:54.650
And this app's
written in Java and it

00:10:54.650 --> 00:10:56.570
uses the Maven build system.

00:10:56.570 --> 00:10:58.770
So that fix that
I've just committed,

00:10:58.770 --> 00:11:01.430
that's actually being sent off
to a virtual machine running

00:11:01.430 --> 00:11:04.110
at Google, which is
connected to your account.

00:11:04.110 --> 00:11:07.560
It's built, so it's
pulling that code down.

00:11:07.560 --> 00:11:09.090
It's compiling it for you.

00:11:09.090 --> 00:11:10.480
It runs all your unit tests.

00:11:10.480 --> 00:11:12.150
You see that's just gone past.

00:11:12.150 --> 00:11:13.280
And then it's deploying it.

00:11:13.280 --> 00:11:14.830
So this is exactly
the same pipeline

00:11:14.830 --> 00:11:16.960
that your developer would use
if it were developing locally

00:11:16.960 --> 00:11:17.668
on their machine.

00:11:17.668 --> 00:11:19.900
They'd commit a
change, they'd push it,

00:11:19.900 --> 00:11:21.350
and then it would deploy.

00:11:21.350 --> 00:11:23.554
And that's available for
you to do collaboratively

00:11:23.554 --> 00:11:24.220
through the web.

00:11:27.500 --> 00:11:29.520
For any of these changes,
you can go through

00:11:29.520 --> 00:11:31.810
and look at the differences.

00:11:31.810 --> 00:11:35.490
So that one they changed the
logo, so it's not too exciting.

00:11:35.490 --> 00:11:43.010
But if I go back to one with
some source-- so previously,

00:11:43.010 --> 00:11:44.720
we had a unit test here.

00:11:44.720 --> 00:11:47.060
The unit test, if we
do a longer example,

00:11:47.060 --> 00:11:48.930
will show you that
making that change

00:11:48.930 --> 00:11:50.180
actually breaks the unit test.

00:11:50.180 --> 00:11:53.110
So you can go through
and change that as well.

00:11:53.110 --> 00:11:54.710
And so now, having
made that change

00:11:54.710 --> 00:11:57.370
and changed the source
for that function,

00:11:57.370 --> 00:11:59.630
it will let you save
your high scores.

00:11:59.630 --> 00:12:01.130
Seeing as I can't
get much past one,

00:12:01.130 --> 00:12:03.920
that's probably not
worth me trying.

00:12:03.920 --> 00:12:06.290
But there's an example of
some of the devops tooling

00:12:06.290 --> 00:12:08.830
that we've made available in
the Google Cloud Platform.

00:12:16.960 --> 00:12:20.600
So flexibility and management,
Alex touched on this before.

00:12:20.600 --> 00:12:22.360
You have the choice
to run anything

00:12:22.360 --> 00:12:26.125
you want if you run it
on a traditional server,

00:12:26.125 --> 00:12:28.020
or you have the
choice to write code

00:12:28.020 --> 00:12:31.462
for App Engine, which lets
us scale it very quickly,

00:12:31.462 --> 00:12:33.920
make it available through the
log viewer and all the things

00:12:33.920 --> 00:12:35.170
you just saw there.

00:12:35.170 --> 00:12:37.330
We want to make that
available to everyone

00:12:37.330 --> 00:12:40.300
coming from both ends of
the problem of serving.

00:12:40.300 --> 00:12:43.250
So we've made available
managed virtual machines.

00:12:43.250 --> 00:12:44.870
And the idea here
is that it lets

00:12:44.870 --> 00:12:47.910
you use the flexibility
of Compute Engine,

00:12:47.910 --> 00:12:50.370
but still have the
productivity of being able just

00:12:50.370 --> 00:12:52.420
to write code and push it to us.

00:12:52.420 --> 00:12:54.890
So what you can do-- I don't
have time to give you a demo

00:12:54.890 --> 00:12:58.670
now-- but you can take
a module of your code

00:12:58.670 --> 00:13:01.010
and say I want to
run this on a VM

00:13:01.010 --> 00:13:02.870
rather than running
it in App Engine.

00:13:02.870 --> 00:13:04.330
And what that does
is it lets you

00:13:04.330 --> 00:13:05.750
install other software on there.

00:13:05.750 --> 00:13:07.686
So with App Engine,
for example--

00:13:07.686 --> 00:13:09.310
sorry if I'm going
too deep for people,

00:13:09.310 --> 00:13:12.030
but you can't use module.

00:13:12.030 --> 00:13:14.630
So if you have some
PHP code and you

00:13:14.630 --> 00:13:18.110
want to install an extension
to PHP that's written in C,

00:13:18.110 --> 00:13:20.660
we don't let you run
arbitrary native code.

00:13:20.660 --> 00:13:22.310
But if you want to
use a VM to do this,

00:13:22.310 --> 00:13:24.670
you can say just
install this module.

00:13:24.670 --> 00:13:26.990
So a great example
of this is we have

00:13:26.990 --> 00:13:30.490
a demo which you can
look online the URL

00:13:30.490 --> 00:13:33.060
at the end, which
is a Sudoku solver.

00:13:33.060 --> 00:13:35.080
And it uses a computer
graphics library.

00:13:35.080 --> 00:13:37.670
So you can point a
camera at a Sudoku,

00:13:37.670 --> 00:13:41.670
and then it uses a C++ library
to do image recognition of that

00:13:41.670 --> 00:13:44.170
Sudoku, and then
read the numbers,

00:13:44.170 --> 00:13:45.920
feed that back into
a python algorithm,

00:13:45.920 --> 00:13:49.370
and then give you
the solved Sudoku.

00:13:49.370 --> 00:13:51.350
So that lets you have
high availability.

00:13:51.350 --> 00:13:52.720
We look after those machines.

00:13:52.720 --> 00:13:55.050
We have them come and
go as they need to.

00:13:55.050 --> 00:13:56.030
We instantiate them.

00:13:56.030 --> 00:13:57.530
They're managed
through the console.

00:13:57.530 --> 00:14:00.200
The logs go into the same
place that you saw before.

00:14:00.200 --> 00:14:02.450
We will make sure that
they're security patched.

00:14:02.450 --> 00:14:05.149
So we will take your code,
deploy it onto those machines,

00:14:05.149 --> 00:14:06.565
and then manage
them as necessary.

00:14:09.090 --> 00:14:11.940
So this is the slides that
Alex started presenting before.

00:14:11.940 --> 00:14:14.020
We want to be able
to go as a spectrum.

00:14:14.020 --> 00:14:16.730
And you can't quite see the
gray boxes with the projector,

00:14:16.730 --> 00:14:19.336
unfortunately, but
at the lowest level

00:14:19.336 --> 00:14:20.710
you have Compute
Engine, which is

00:14:20.710 --> 00:14:23.290
just you have to look
after your own servers.

00:14:23.290 --> 00:14:25.040
A level up there, we
offer a tool called

00:14:25.040 --> 00:14:27.630
Replica Pools, where you can
say, I have a bunch of servers

00:14:27.630 --> 00:14:29.090
that all do the same thing.

00:14:29.090 --> 00:14:32.700
And I'm just going to say as
long as they respond this way,

00:14:32.700 --> 00:14:33.890
then they're healthy.

00:14:33.890 --> 00:14:35.710
And so you can just
take your server image

00:14:35.710 --> 00:14:38.090
and expose an endpoint
to say I'm healthy.

00:14:38.090 --> 00:14:39.904
And then if they
stop being healthy,

00:14:39.904 --> 00:14:41.570
Google will automatically
terminate them

00:14:41.570 --> 00:14:44.450
and turn on another one.

00:14:44.450 --> 00:14:47.170
Managed VMs, I just mentioned,
sits on top of that.

00:14:47.170 --> 00:14:49.822
And then these traditional
App Engine managed runtimes.

00:14:49.822 --> 00:14:51.280
So we're really
trying to make this

00:14:51.280 --> 00:14:53.650
a spectrum between
flexibility and agility

00:14:53.650 --> 00:14:55.466
where you can choose
where you want to be.

00:14:55.466 --> 00:14:57.590
And that's not a choice
you have to make initially.

00:14:57.590 --> 00:15:00.716
You can say upfront today,
App Engine is great for me,

00:15:00.716 --> 00:15:02.090
but then if you
want to do things

00:15:02.090 --> 00:15:05.020
that it doesn't allow you to
do, we'd call it breaking glass.

00:15:05.020 --> 00:15:07.311
And you could move further
down the stack and introduce

00:15:07.311 --> 00:15:11.550
lower level components
over time, as you need.

00:15:11.550 --> 00:15:14.560
And it's as easy as just
pushing-- again, using

00:15:14.560 --> 00:15:17.790
either Git or gcloud SDK
to say this is my app.

00:15:17.790 --> 00:15:19.100
I want to update it.

00:15:19.100 --> 00:15:21.870
Send it to the Cloud.

00:15:21.870 --> 00:15:24.570
So under the hood, I'll just
give you a quick overview.

00:15:24.570 --> 00:15:27.980
A load balancer will
turn on the machines,

00:15:27.980 --> 00:15:30.490
run your application survey,
any third party libraries

00:15:30.490 --> 00:15:33.480
that you specify and the code
that's in your repository.

00:15:33.480 --> 00:15:35.190
We look after everything
else over here,

00:15:35.190 --> 00:15:36.890
so monitoring and
health checking.

00:15:36.890 --> 00:15:38.890
If you want to use
services like Task Queues,

00:15:38.890 --> 00:15:43.037
Memcache, and sitting on top
of our Cloud, Cloud Datastore.

00:15:43.037 --> 00:15:44.620
You don't have to
worry about anything

00:15:44.620 --> 00:15:47.106
other than your own
code and specifying

00:15:47.106 --> 00:15:48.980
if you want to use any
third party libraries.

00:15:48.980 --> 00:15:50.688
Those parts in yellow
are the only things

00:15:50.688 --> 00:15:51.810
that you need to provide.

00:15:51.810 --> 00:15:56.240
Google will manage
all the rest for you.

00:15:56.240 --> 00:15:59.280
Big data, real time.

00:15:59.280 --> 00:16:03.711
With BigQuery, we can ingest
100,000 rows per second.

00:16:03.711 --> 00:16:05.460
So this is obviously
of interest to people

00:16:05.460 --> 00:16:07.220
who are doing
hardware start ups.

00:16:07.220 --> 00:16:09.200
So if you're doing
sensor information,

00:16:09.200 --> 00:16:11.280
we have a partner
in Seattle who've

00:16:11.280 --> 00:16:14.540
got electricity
meters in 40,000 homes

00:16:14.540 --> 00:16:16.900
that once a minute
send a ping of usage

00:16:16.900 --> 00:16:18.120
back to the electric company.

00:16:18.120 --> 00:16:20.650
And it lets them graph
outages on a map.

00:16:20.650 --> 00:16:23.060
So they can see the power's
gone offline in these areas,

00:16:23.060 --> 00:16:24.020
or they can predict problems.

00:16:24.020 --> 00:16:26.050
So there's all sorts of
interesting problems.

00:16:26.050 --> 00:16:28.480
You don't have to
wait until tomorrow I

00:16:28.480 --> 00:16:30.030
can look at yesterday's
information.

00:16:30.030 --> 00:16:31.406
You can see that in real time.

00:16:31.406 --> 00:16:32.780
You can go back
and say, what was

00:16:32.780 --> 00:16:35.590
the state of my
data six hours ago?

00:16:35.590 --> 00:16:38.217
You can say, how
have things changed?

00:16:38.217 --> 00:16:40.050
So we have some great
visualization partners

00:16:40.050 --> 00:16:41.320
which help you look at this.

00:16:44.880 --> 00:16:47.680
There's just one more
slide there on things

00:16:47.680 --> 00:16:52.900
that we think are really
driving the growth in big data.

00:16:52.900 --> 00:16:56.350
Census, low cost of ingestion,
new programming models that

00:16:56.350 --> 00:16:59.290
will let you do parallel
data processing, and being

00:16:59.290 --> 00:17:01.540
able to use open
source software,

00:17:01.540 --> 00:17:04.099
and being able to pay as
you use with the Cloud.

00:17:04.099 --> 00:17:06.230
Today, when you're
looking at a new business,

00:17:06.230 --> 00:17:09.740
you should say every single
piece of information I ever

00:17:09.740 --> 00:17:12.950
collect, every event a user
generates on my app, everything

00:17:12.950 --> 00:17:14.579
that happens on
my mobile website,

00:17:14.579 --> 00:17:16.079
I'm going to store that.

00:17:16.079 --> 00:17:19.369
Big data doesn't necessarily
mean big in the small company,

00:17:19.369 --> 00:17:20.660
it might just mean everything.

00:17:20.660 --> 00:17:22.890
Store every single
piece of information,

00:17:22.890 --> 00:17:24.389
every bit of
intelligence you can.

00:17:24.389 --> 00:17:26.430
Then later on, you might
think all right, well, I

00:17:26.430 --> 00:17:27.980
can think of insights.

00:17:27.980 --> 00:17:30.150
I can think of a
way to track users

00:17:30.150 --> 00:17:31.870
went through this
particular flow.

00:17:31.870 --> 00:17:33.766
What percentage of
people bought a product

00:17:33.766 --> 00:17:35.140
after having looked
at this page?

00:17:35.140 --> 00:17:36.989
What percentage of
people dropped off

00:17:36.989 --> 00:17:38.030
after getting to a point?

00:17:38.030 --> 00:17:40.580
How many people played one
level of Fluttery Bird and then

00:17:40.580 --> 00:17:42.060
gave up because it was too hard?

00:17:42.060 --> 00:17:43.890
All that kind of
insight you can get.

00:17:43.890 --> 00:17:45.681
And you don't need to
think about it today.

00:17:45.681 --> 00:17:48.480
You can store that and
then query it in real time

00:17:48.480 --> 00:17:50.740
whenever you need.

00:17:50.740 --> 00:17:51.370
So that's me.

00:17:51.370 --> 00:17:52.710
Thank you very much.

00:17:52.710 --> 00:17:54.800
I just want to announce
my colleague, [INAUDIBLE]

00:17:54.800 --> 00:17:56.660
down the back who's
going to give us a wave.

00:17:56.660 --> 00:17:59.510
If you're interested in
$20,000 worth of credit

00:17:59.510 --> 00:18:01.100
for use of the Google
Cloud Platform,

00:18:01.100 --> 00:18:03.700
we have a pack for startups.

00:18:03.700 --> 00:18:06.410
Qualification is
based on-- basically

00:18:06.410 --> 00:18:08.740
for new companies who have
not been around too long

00:18:08.740 --> 00:18:10.300
and have not taken
too much funding.

00:18:10.300 --> 00:18:12.716
So if you're interested in
finding out if you're eligible,

00:18:12.716 --> 00:18:14.860
he'll be around on the
break to have a chat.

00:18:14.860 --> 00:18:18.180
Are we all right for
questions, or how are we for--

