WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.446
[MUSIC PLAYING]

00:00:02.446 --> 00:00:03.820
So you're a studious
person who's

00:00:03.820 --> 00:00:06.590
watched every episode of
Android Performance Patterns.

00:00:06.590 --> 00:00:08.749
OK, not every one-- Colt
does a lot of videos,

00:00:08.749 --> 00:00:10.290
and he usually just
says things like,

00:00:10.290 --> 00:00:12.070
don't use up too much battery.

00:00:12.070 --> 00:00:13.870
Make efficient HTTP requests.

00:00:13.870 --> 00:00:15.370
ENUMs are like gremlins.

00:00:15.370 --> 00:00:17.400
You know, all that
normal perf stuff.

00:00:17.400 --> 00:00:20.201
So by now you know that you
don't want a bloated APK.

00:00:20.201 --> 00:00:22.200
You don't just let unneeded
resources sit around

00:00:22.200 --> 00:00:23.220
in your build.

00:00:23.220 --> 00:00:26.160
But despite knowing this, you
may still have a bloated APK.

00:00:26.160 --> 00:00:27.327
So how's that even possible?

00:00:27.327 --> 00:00:28.951
I'm David East, and
just because you're

00:00:28.951 --> 00:00:30.730
being frugal your
resources doesn't

00:00:30.730 --> 00:00:33.700
mean that the libraries you've
included will do the same.

00:00:33.700 --> 00:00:35.006
Take this common scenario.

00:00:35.006 --> 00:00:36.880
You're using the Google
Play services library

00:00:36.880 --> 00:00:40.050
to build an app that just
uses a single API like Maps.

00:00:40.050 --> 00:00:42.810
But your code is not using it
in a logging functionality.

00:00:42.810 --> 00:00:45.740
Well, the library still includes
all the assets and layouts

00:00:45.740 --> 00:00:47.257
that allow someone to log in.

00:00:47.257 --> 00:00:49.590
Even though you may only like
the way this button looks,

00:00:49.590 --> 00:00:51.374
you don't need the
resource in your APK.

00:00:51.374 --> 00:00:53.290
So, as you can't manually
purge this resource,

00:00:53.290 --> 00:00:56.100
it gets included in your
final package application.

00:00:56.100 --> 00:00:59.360
And it's stuff like this
that leads to bloated APKs.

00:00:59.360 --> 00:01:02.034
Well, we have the Gradle tool
chain, and it's here to help.

00:01:02.034 --> 00:01:03.950
Gradle can statically
analyze all of your code

00:01:03.950 --> 00:01:06.080
to find the assets that
aren't being reference

00:01:06.080 --> 00:01:08.610
and then automatically pull
them out of your build.

00:01:08.610 --> 00:01:10.420
And the party doesn't
just stop there.

00:01:10.420 --> 00:01:12.100
Gradle will also go
through and analyze strings

00:01:12.100 --> 00:01:13.558
in your code for
cases where you're

00:01:13.558 --> 00:01:15.937
doing things like constructing
a path name at run time

00:01:15.937 --> 00:01:17.520
and scrape through
your assets folder,

00:01:17.520 --> 00:01:19.450
opening up text,
CSS, and JavaScript

00:01:19.450 --> 00:01:22.330
files to check there as well.

00:01:22.330 --> 00:01:24.840
To get this started, just
enable the shrink resources flag

00:01:24.840 --> 00:01:26.130
in your Gradle configuration.

00:01:26.130 --> 00:01:28.150
You'll also need to
set minify enabled.

00:01:28.150 --> 00:01:29.640
This will turn on
proguard, which

00:01:29.640 --> 00:01:31.190
just removes code
from link libraries

00:01:31.190 --> 00:01:33.080
that your app is it using.

00:01:33.080 --> 00:01:35.770
Know, though, that this
needs to be done first.

00:01:35.770 --> 00:01:37.642
Otherwise, Gradle
gets super confused

00:01:37.642 --> 00:01:39.100
because it still
think that there's

00:01:39.100 --> 00:01:41.050
pass-referencing assets.

00:01:41.050 --> 00:01:43.300
Once you've done this,
though, our earlier scenario

00:01:43.300 --> 00:01:44.830
is looking a lot better.

00:01:44.830 --> 00:01:46.630
After Google Play
services is linked in,

00:01:46.630 --> 00:01:49.230
Gradle sees that no paths
use the login resources

00:01:49.230 --> 00:01:51.780
and exclude it from
your APK, which

00:01:51.780 --> 00:01:53.820
is exactly what we wanted.

00:01:53.820 --> 00:01:55.600
A little bit of a
warning, though, there

00:01:55.600 --> 00:01:58.030
might be some false
positives or false negatives.

00:01:58.030 --> 00:01:59.230
You might find that
some of your assets

00:01:59.230 --> 00:02:01.390
are getting cut when you wanted
them kept and some of them

00:02:01.390 --> 00:02:03.360
are getting kept when
you wanted them cut.

00:02:03.360 --> 00:02:05.370
We can fix this, though,
with the tools keep

00:02:05.370 --> 00:02:08.789
and the tools discard attributes
to set up the desired behavior.

00:02:08.789 --> 00:02:11.009
But before you get all
resource-cutting crazy,

00:02:11.009 --> 00:02:12.710
it's important to
understand that Gradle

00:02:12.710 --> 00:02:14.190
has its limitations.

00:02:14.190 --> 00:02:15.940
Gradle won't ditch
your resolution folders

00:02:15.940 --> 00:02:17.527
or multiple language folders.

00:02:17.527 --> 00:02:20.110
These may be needed at run time,
and the compiler can't really

00:02:20.110 --> 00:02:23.256
know ahead of time what the
end user is going to need.

00:02:23.256 --> 00:02:25.380
So managing your resources
requires some extra work

00:02:25.380 --> 00:02:28.260
on your part, but it's a big
performance gain for the user.

00:02:28.260 --> 00:02:32.035
And experiences for the user is
what performance is all about.

00:02:32.035 --> 00:02:34.410
Find out more by watching the
rest of Android Performance

00:02:34.410 --> 00:02:36.707
Patterns content,
AKA the Colt Show.

00:02:36.707 --> 00:02:39.040
And don't forget to join our
Google+ community for other

00:02:39.040 --> 00:02:41.200
great content as well.

00:02:41.200 --> 00:02:43.500
So sweat the small stuff,
but don't freak out.

00:02:43.500 --> 00:02:45.250
And remember that perf matters.

00:02:45.250 --> 00:02:47.700
[MUSIC PLAYING]

