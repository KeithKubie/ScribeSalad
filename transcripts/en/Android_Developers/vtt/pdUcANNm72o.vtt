WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.550
[MUSIC PLAYING]

00:00:08.550 --> 00:00:09.215
Hi.

00:00:09.215 --> 00:00:11.290
I'm Richard Hyndman, an engineer
on the Android

00:00:11.290 --> 00:00:13.390
Developer Relations team.

00:00:13.390 --> 00:00:16.000
With the launch of Android
Jellybean 4.3, we've seen some

00:00:16.000 --> 00:00:19.270
great new features for users and
developers alike, and I'm

00:00:19.270 --> 00:00:23.000
going to run you through
restricted profiles.

00:00:23.000 --> 00:00:25.490
In Jellybean, we announced
multiple users so you could

00:00:25.490 --> 00:00:28.070
share your tablet easily with
your family members.

00:00:28.070 --> 00:00:30.075
Everyone would create their
own profile, sign in with

00:00:30.075 --> 00:00:31.760
their own Google accounts,
install their apps, and just

00:00:31.760 --> 00:00:33.820
use it as if it was
their own tablet.

00:00:33.820 --> 00:00:35.790
But if you were sharing your
tablet with a child, this

00:00:35.790 --> 00:00:37.835
sometimes got a little
bit complicated.

00:00:37.835 --> 00:00:39.792
You'd probably create them a
profile, but then sign in with

00:00:39.792 --> 00:00:42.300
your own Google account, install
some apps, maybe put a

00:00:42.300 --> 00:00:45.640
PIN code on the Play store,
change the synchronization

00:00:45.640 --> 00:00:48.540
settings, maybe disable some
apps-- just really try and

00:00:48.540 --> 00:00:50.990
make it a restricted,
safe environment for

00:00:50.990 --> 00:00:53.370
that child to use.

00:00:53.370 --> 00:00:57.060
With restricted profiles, this
has become a whole lot easier.

00:00:57.060 --> 00:00:59.940
Restricted profiles are based on
the primary user's profile.

00:00:59.940 --> 00:01:02.790
They share the Google account
and the applications of that

00:01:02.790 --> 00:01:05.740
primary user, but in a
restricted manner.

00:01:05.740 --> 00:01:07.930
The restricted users don't
get access to your Gmail,

00:01:07.930 --> 00:01:11.216
Calendar, Play Store,
or in-app purchases.

00:01:11.216 --> 00:01:13.980
The primary user can choose
which apps they can access,

00:01:13.980 --> 00:01:15.810
and whether those
apps can access

00:01:15.810 --> 00:01:18.180
things like device location.

00:01:18.180 --> 00:01:21.820
As a developer, the Restricted
Profile API allows you to

00:01:21.820 --> 00:01:25.280
offer up fine-grain control over
your application and your

00:01:25.280 --> 00:01:26.860
application's restrictions.

00:01:26.860 --> 00:01:28.990
And the user manager has also
been extended so your

00:01:28.990 --> 00:01:31.230
application can find out
what restrictions are

00:01:31.230 --> 00:01:34.530
being imposed on it.

00:01:34.530 --> 00:01:36.340
Application restrictions
are managed under

00:01:36.340 --> 00:01:37.420
the Device User Settings.

00:01:37.420 --> 00:01:39.650
So when you create a new
restricted profile, you'll see

00:01:39.650 --> 00:01:41.110
a list of all the applications,
and you can

00:01:41.110 --> 00:01:42.590
choose which ones
are available.

00:01:42.590 --> 00:01:44.220
And your application
will automatically

00:01:44.220 --> 00:01:45.780
appear in this list.

00:01:45.780 --> 00:01:48.140
But if you have specific
settings, you're going to want

00:01:48.140 --> 00:01:49.870
to let the platform
know about them.

00:01:49.870 --> 00:01:51.470
So how do you do that?

00:01:51.470 --> 00:01:54.450
You add the intent-filter into
Android Manifest for the

00:01:54.450 --> 00:01:56.610
GET_RESTRICTION_ENTRIES.

00:01:56.610 --> 00:01:58.600
This is going to prepare Android
to add that Settings

00:01:58.600 --> 00:02:02.060
button in the Settings
screen like this.

00:02:02.060 --> 00:02:03.910
So here we've got the
Settings button.

00:02:03.910 --> 00:02:06.250
And when you press it, it's
going to populate with your

00:02:06.250 --> 00:02:06.870
restrictions.

00:02:06.870 --> 00:02:09.120
Here we've got some example
restrictions,

00:02:09.120 --> 00:02:10.340
Full Restriction Enabled.

00:02:10.340 --> 00:02:13.200
In this particular app, you can
choose whether or not the

00:02:13.200 --> 00:02:15.490
child user, the restricted user,
can change the language

00:02:15.490 --> 00:02:18.680
or access any in-app items.

00:02:18.680 --> 00:02:20.770
So to populate these settings,
the system is going to

00:02:20.770 --> 00:02:23.810
broadcast the action
GetRestrictions intent to your

00:02:23.810 --> 00:02:24.720
application.

00:02:24.720 --> 00:02:28.480
And it's going to expect that
you return with an array list

00:02:28.480 --> 00:02:31.320
of restriction entries
in the bundle.

00:02:31.320 --> 00:02:34.250
So in the broadcast receiver,
when you get the broadcast,

00:02:34.250 --> 00:02:38.060
the first thing you want to
do is call goAsync on the

00:02:38.060 --> 00:02:39.480
broadcast receiver.

00:02:39.480 --> 00:02:41.280
This is going to keep it active,
and also give you a

00:02:41.280 --> 00:02:44.540
PendingResult object to return
your restrictions in.

00:02:44.540 --> 00:02:47.680
Then you create an array list of
restriction entries and put

00:02:47.680 --> 00:02:50.300
it in the bundle
and return it.

00:02:50.300 --> 00:02:52.760
We've got three different types
of restriction entry.

00:02:52.760 --> 00:02:54.500
We have the Boolean type,
just on and off.

00:02:54.500 --> 00:02:58.540
We've got the check box, single
select from a list, and

00:02:58.540 --> 00:03:02.570
we have multiple selection
from a list.

00:03:02.570 --> 00:03:03.240
Three different types.

00:03:03.240 --> 00:03:06.240
And looking at those in code,
we have three different

00:03:06.240 --> 00:03:08.190
constructors for those
different types

00:03:08.190 --> 00:03:09.020
of restriction entry.

00:03:09.020 --> 00:03:12.530
And all of those constructions
take a key so that later on

00:03:12.530 --> 00:03:16.320
you can retrieve the setting
from the system, and also a

00:03:16.320 --> 00:03:18.950
default, or current value.

00:03:18.950 --> 00:03:21.680
Here we've got the Boolean
type, and then the single

00:03:21.680 --> 00:03:22.850
choice type.

00:03:22.850 --> 00:03:25.850
Maybe in the single choice type,
you want to use it for

00:03:25.850 --> 00:03:28.050
content rating of the
content available to

00:03:28.050 --> 00:03:29.360
a restricted user.

00:03:29.360 --> 00:03:30.950
So you could have single
choice of under

00:03:30.950 --> 00:03:32.930
12, 15 plus, whatever.

00:03:32.930 --> 00:03:34.510
And then you could just choose
one of those and make the

00:03:34.510 --> 00:03:37.440
content in your application
relevant for the user.

00:03:37.440 --> 00:03:39.210
And then the multiple choice
type is going to take an array

00:03:39.210 --> 00:03:41.850
list of strings for
the default.

00:03:41.850 --> 00:03:43.860
So now, the system's asked you
for your restrictions.

00:03:43.860 --> 00:03:46.010
You've returned them in this
bundle, an array list of

00:03:46.010 --> 00:03:47.350
restriction entries.

00:03:47.350 --> 00:03:49.470
And then the device owner has
been and set the exact

00:03:49.470 --> 00:03:51.250
restrictions for their child.

00:03:51.250 --> 00:03:53.430
So the final step, of course,
is going to be to retrieve

00:03:53.430 --> 00:03:56.100
those restrictions
from the system.

00:03:56.100 --> 00:03:58.830
So onResume in your application,
you can recall

00:03:58.830 --> 00:04:02.590
the restriction set by getting
hold of the system service for

00:04:02.590 --> 00:04:05.720
user service, and then get the
application restrictions for

00:04:05.720 --> 00:04:07.120
your package.

00:04:07.120 --> 00:04:08.510
Of course, this may come
back without any

00:04:08.510 --> 00:04:09.210
restrictions in it.

00:04:09.210 --> 00:04:11.020
In that case, you'll be running
in the device owner's,

00:04:11.020 --> 00:04:12.920
or an unrestricted profile.

00:04:12.920 --> 00:04:14.530
But if you're in a restricted
profile, you'll see all the

00:04:14.530 --> 00:04:15.210
restrictions.

00:04:15.210 --> 00:04:18.290
You can collect them back from
the keys that you specified

00:04:18.290 --> 00:04:21.640
earlier and find out the
settings that there are.

00:04:21.640 --> 00:04:24.360
If you don't want any specific
settings, but you just want to

00:04:24.360 --> 00:04:26.160
find out if you're in a
restricted profile at the

00:04:26.160 --> 00:04:28.890
moment, you can call
GetUserRestrictions and just

00:04:28.890 --> 00:04:31.100
check if that bundle
is empty or not.

00:04:31.100 --> 00:04:32.630
If it's empty, you're
not restricted.

00:04:32.630 --> 00:04:33.870
And if it's not, you're
almost certainly in

00:04:33.870 --> 00:04:37.110
a restricted profile.

00:04:37.110 --> 00:04:39.720
So that's how restricted
profile works.

00:04:39.720 --> 00:04:42.100
But there is, of course,
just one more thing.

00:04:42.100 --> 00:04:45.400
If you'd rather have your own
nice, tidy UI inside your

00:04:45.400 --> 00:04:48.090
application, a single place to
manage all your restrictions

00:04:48.090 --> 00:04:49.920
that when the device owner is
running your app, they can see

00:04:49.920 --> 00:04:53.740
it, and then when they go
through settings and press it,

00:04:53.740 --> 00:04:57.420
it launches your activity
instead of showing the

00:04:57.420 --> 00:04:59.780
settings directly in the
Settings screen, you can have

00:04:59.780 --> 00:05:01.200
custom restrictions.

00:05:01.200 --> 00:05:03.110
So when the
GET_RESTRICTION_ENTRIES

00:05:03.110 --> 00:05:06.480
broadcast is broadcast out to
your app, instead of returning

00:05:06.480 --> 00:05:09.270
an array list of restriction
entries, you can return an

00:05:09.270 --> 00:05:11.990
intent to launch your
custom activity.

00:05:11.990 --> 00:05:14.020
This is similar to the way it
works for battery users, data

00:05:14.020 --> 00:05:16.790
users, things like this, where
you can launch an intent into

00:05:16.790 --> 00:05:20.210
your application to show
you around the screen.

00:05:20.210 --> 00:05:21.856
So that should be all
you need to know

00:05:21.856 --> 00:05:23.240
about restricted profiles.

00:05:23.240 --> 00:05:25.520
They're especially useful for
content-based applications,

00:05:25.520 --> 00:05:27.540
and I'm looking forward
to seeing what use

00:05:27.540 --> 00:05:29.020
cases you come up with.

00:05:29.020 --> 00:05:30.290
Thank you very much.

