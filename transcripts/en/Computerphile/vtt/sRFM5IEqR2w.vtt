WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.400
In the last video we talked about sobel edge detection.

00:00:02.400 --> 00:00:05.100
Okay. Sobel operator is a kernal convolution process we can use

00:00:05.100 --> 00:00:10.100
and it returns a high
response where there's a sharp change in gradient image

00:00:10.120 --> 00:00:12.720
and low response where there isn't.

00:00:12.720 --> 00:00:14.200
it's generally well on grayscale images

00:00:14.200 --> 00:00:16.160
that we first blurred just to make sure things are
nice and smooth

00:00:16.160 --> 00:00:19.820
it also handily produces an orientation at every point

00:00:19.820 --> 00:00:20.600
ya know with which tells us

00:00:20.600 --> 00:00:23.420
from north in image, upwards to  downwards, left and right

00:00:23.720 --> 00:00:25.720
what direction is our edge facing

00:00:26.220 --> 00:00:30.660
and that can be really useful for
post-processing this image so that's

00:00:30.660 --> 00:00:36.219
what we gonna talk about now the canny edge
detector is essentially takes a Sobel

00:00:36.219 --> 00:00:41.660
operator and makes it just a step better ,a step more
useful perhaps. For edge analysis which is to get

00:00:41.660 --> 00:00:44.230
rid of the edges that we're not really
interested and keep only the really good stuff

00:00:46.900 --> 00:00:54.860
the Canny edge detector was published in 1986 and the input of a Canny operator is simply the output of Sobel.

00:00:55.000 --> 00:00:57.540
Okay, so we've taken over image we've converted to grayscale

00:00:57.800 --> 00:01:03.880
We've ran our Gaussian blur.
And then we've run our Sobel operator in both the X&amp;Y directions.

00:01:03.880 --> 00:01:07.250
We've calculated the gradient and the
orientation of those and that's when were

00:01:07.260 --> 00:01:12.119
ready for canny's process. okay it's
fairly simple but of course it's also

00:01:12.119 --> 00:01:17.900
effective and so it still sees a lot of use.
There are other newer edge detectors ,and there are certainly a

00:01:17.900 --> 00:01:23.549
lot of newer filters , that are using Sobel.
Sobel still sees a lot of  use.

00:01:23.549 --> 00:01:30.259
Canny works by taking the image from the Sobel output. Thinning all the edges so they are 1 pixel wide.

00:01:30.259 --> 00:01:32.619
Because thick edges doesn't really help us.

00:01:32.760 --> 00:01:35.020
What we really care about is:
Where are the edges?
 Not: 
How thick are they?

00:01:35.020 --> 00:01:39.220
imagine we're trying to find the center line of a root because we want to find where the root is.

00:01:39.220 --> 00:01:41.760
if we do a Sobel edge detection its

00:01:41.780 --> 00:01:44.729
it's gonna find gradients at both left
and the right side of the root, it's going to be

00:01:44.729 --> 00:01:50.520
bit messy.
But also its not resolution
independent if we've got a really high

00:01:50.520 --> 00:01:55.060
resolution image the gradient is going to be spread
over many pixels in a low resolution

00:01:55.060 --> 00:01:58.259
image you can have a Sharpish gradient
because that's the best that we can do

00:01:58.259 --> 00:02:02.340
with those pixels.
What a Canny edge detector does is get rid of all that and

00:02:02.340 --> 00:02:05.490
just say this is where your edge is because
I've got rid of all that stuff on the outside of it.

00:02:05.490 --> 00:02:10.060
Canny works by first finding the edges and then
use a process called hysteresis thresholding

00:02:10.060 --> 00:02:11.819
which sees use in other

00:02:11.819 --> 00:02:14.959
areas which is essentially a
two-level threshold which we'll talk

00:02:14.959 --> 00:02:21.560
about ok so the first thing to do for
every pixel is try find out if its a

00:02:21.560 --> 00:02:26.599
local maximum ok that means that is
bigger than its neighbors ok sounds easy

00:02:26.600 --> 00:02:30.969
but we also bear in mind the orientation
that was produced by Sobel for every part

00:02:30.969 --> 00:02:34.469
of the image if this our image and
we're examining let's say this pixel

00:02:34.469 --> 00:02:35.040
here

00:02:35.040 --> 00:02:40.480
okay we've run our Sobel X and Y operators on it, and we've got a value of gX and gY

00:02:40.480 --> 00:02:44.569
and we've got a value of magnitude of
this edge.
Now the magnitude of this edge

00:02:44.569 --> 00:02:48.400
might be smaller or larger and what we want to do is try to find out if X is

00:02:48.400 --> 00:02:53.120
bigger than its neighbors.
we really only care
about whether X is bigger than its neighbors

00:02:53.120 --> 00:02:57.500
across the edge, right?
If along the edge, yes it might be
getting larger or smaller but that's not really

00:02:57.500 --> 00:03:01.069
what we're concerned with.
So basically if the edges traveling down this direction

00:03:01.069 --> 00:03:06.269
then we really care if
 X is bigger than this one(diagonal edge neighbor ) 
and this one(other diagonal edge neighbor ).
 Okay

00:03:06.269 --> 00:03:08.449
if the edge is traveling in this direction(parrallel to edge)
then we really care

00:03:08.449 --> 00:03:10.749
if X is bigger than this one and this one
(parrallel neighbors)

00:03:10.749 --> 00:03:13.560
So what Canny does is say
what's the orientation of our edge

00:03:14.340 --> 00:03:19.009
based on the output of Sobel operator.
We use inverse Tan to find that.

00:03:19.009 --> 00:03:22.629
And then given that:  Is it bigger than it's neighbors and
doing that over the whole image will

00:03:22.629 --> 00:03:26.349
produce lots of very nice thin edges
right at the peaks of the center of our response.

00:03:26.349 --> 00:03:32.209
[Moderator off camera] So if you've got a gradient on your roots or on your whatever the edge of the

00:03:32.209 --> 00:03:35.709
flower, the petal or whatever it's basically just gonna find the strongest [..unintelligble]

00:03:35.709 --> 00:03:40.120
So, if we imagine 
looking at the gradient from the side then you might find a Sobel

00:03:40.120 --> 00:03:45.109
response looks a bit like that, okay.
Because it's a kind of shallow edge, you know.

00:03:45.109 --> 00:03:48.519
It's brightest where it is mostly
but because a photograph or something maybe

00:03:48.519 --> 00:03:56.179
it's not completely steep, okay.
And what Canny does is scrap all this and just get an edge right in the center, okay.

00:03:56.200 --> 00:03:58.180
And that's really what we want, okay.

00:03:58.180 --> 00:03:59.880
So that's the first process.

00:03:59.880 --> 00:04:04.740
The second stage is to remove the edges that even though we weren't over maximum,

00:04:04.740 --> 00:04:07.520
There still not very useful to use because maybe they're really weak response,

00:04:07.530 --> 00:04:09.330
So noise basically.

00:04:09.330 --> 00:04:13.290
We want to create an image of the dominate edges.

00:04:13.290 --> 00:04:14.820
And preserve only the dominate edges.

00:04:14.820 --> 00:04:17.820
For that we use a process 
called hysteresis thresholding.

00:04:17.829 --> 00:04:21.290
So let's imagine that we've run our maximum suppression

00:04:21.290 --> 00:04:26.010
over the whole image ok so we have lots
of nice individual lines of pixels, okay.

00:04:26.010 --> 00:04:30.940
That's great, but how do we threshold them to decide what edge is important and which edge isn't?

00:04:30.940 --> 00:04:35.710
So if we pick just a threshold let's
say all the edges go from naught to 255

00:04:35.710 --> 00:04:41.380
So naught is no edge, 255 is about the stronges t edge you can imagine, okay.

00:04:41.380 --> 00:04:44.420
What value do we pick that's a good edge ,alright?

00:04:44.420 --> 00:04:48.020
If we pick a value of twenty
most of the edges are going to be in, right?

00:04:48.020 --> 00:04:51.020
Which means your gonna get a lot of noise, a lot of nonsense, and if you're looking

00:04:51.020 --> 00:04:55.920
for the football in your picture, there's gonna be a lot of
other stuff you have to weed out before you can work out where the ball is

00:04:55.920 --> 00:04:58.800
But then if we pick a high threshold like 200, we're gonna get the

00:04:58.800 --> 00:05:03.270
edge of the ball maybe, 
but we might start to lose some of it because not all of the edges are

00:05:03.270 --> 00:05:05.510
gonna be as strong, just that's how it is! alright.

00:05:05.510 --> 00:05:07.510
So they lets say you hysterisis thresholding in one dimension first ,

00:05:08.010 --> 00:05:12.200
and then you'll see how it applies
to an edge so if this is are one

00:05:12.200 --> 00:05:16.160
dimensional image ok and we have an edge response over here that is pretty good and we

00:05:16.160 --> 00:05:19.280
have an edge response here which is
really good and they no edge response

00:05:19.280 --> 00:05:23.920
over here now if we were thresholding
just by a single level then we can put this level here

00:05:23.920 --> 00:05:28.600
there were gonna get this top area , but we're not gonna
get this area,  or this area. And that might be OK but we

00:05:28.600 --> 00:05:32.630
might want this one okay because this is kind of part of the same object perhaps that we want

00:05:32.630 --> 00:05:35.300
to try and preserve. 
So hysteresis th resholding will have a threshold here and a threshold here

00:05:35.300 --> 00:05:40.570
anything above the
top threshold is automatically okay[valid] so we take

00:05:40.570 --> 00:05:44.870
all this and this is already ok anything
below the bottom threshold is automatically

00:05:44.870 --> 00:05:48.110
discounted it's not strong enough response
that's probably not an edge we're interested in

00:05:48.110 --> 00:05:53.100
ok so we take off here and this is all got rid of. And then  anything  between the two thresholds

00:05:53.120 --> 00:05:57.880
is only preserved if it's connected to
something above the top threshold, ok .

00:05:57.880 --> 00:06:01.800
So we're trying to sort of continue along edges where we've already had a high

00:06:01.800 --> 00:06:06.350
responses at some point, ok.
So maybe the side the football is really good and the

00:06:06.350 --> 00:06:11.580
other side is not so good, but because
it's connected you think 'yeah that's probably okay.'
Part of the same edge really.

00:06:11.580 --> 00:06:16.100
So this stuff gets included simply by
being connected to this high threshold.

00:06:16.100 --> 00:06:19.490
In two dimensions it works the same way.
We look around the image and we search for edges.

00:06:19.490 --> 00:06:24.060
And any edge that's above our top threshold we automatically include.

00:06:24.080 --> 00:06:28.800
And any edge that's connected to it by pixel traversal we automatically include

00:06:28.800 --> 00:06:29.840
Anything else we scrap.

00:06:29.840 --> 00:06:33.860
And that really preserves only the sort of the core edges of the image the  stuff

00:06:33.860 --> 00:06:37.240
that really shows you what shape
everything is and there you could maybe do

00:06:37.240 --> 00:06:40.500
some other post-processing to find
objects or something like that.

00:06:40.500 --> 00:06:42.680
So I should probably show you some images now.

00:06:42.680 --> 00:06:45.240
I've got my [unintelligble] .
I haven't coded up Canny because there's

00:06:45.270 --> 00:06:50.060
a lot of good implementations of Canny out there. Takes a little bit of time to traverse an image. okay.

00:06:50.060 --> 00:06:53.340
If you looking for an implementation, the OpenCV one is very good

00:06:53.470 --> 00:06:59.330
okay and you can use OpenCV in Java and C++ and Python as far as i know.
ok.

00:06:59.330 --> 00:07:05.790
So what Canny does is it takes our Sobel operator and using
the orientation of each edge it thins it,

00:07:05.790 --> 00:07:10.540
and then it does hysteresis thresholding to
find the sort of duller edges and you get a picture that

00:07:10.540 --> 00:07:14.020
looks much like what it did before
but now we really just got the outline of the flower

00:07:14.020 --> 00:07:16.660
almost the entire edge of
the flower and it's  leaf have been preserved

00:07:16.660 --> 00:07:18.480
But we've lost a lot of stuff between the petals.

00:07:18.480 --> 00:07:22.560
So we can obviously adjust both the lower and upper thresholds of the hysteresis thresholding,

00:07:22.560 --> 00:07:29.680
and the sort of noiseness of the Sobel operater by blurring,
 and both of those will have an effect.

00:07:29.680 --> 00:07:31.700
And we can really control what edges come out of Canny.

00:07:31.700 --> 00:07:37.160
We can have just a few really dominant edges or [unintelligle] edges if that's what we want.

00:07:37.620 --> 00:07:43.780
Here is an edge,
 fairly obviously we can see that but a computer can't.
 So if we put our Sobel operator here

00:07:44.060 --> 00:07:50.440
then what we're essentially doing is
doing a hundred times one plus a hundred times two plus a hundred times.

