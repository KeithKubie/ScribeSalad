WEBVTT
Kind: captions
Language: en

00:00:05.430 --> 00:00:07.110
So in our last lesson,
we were learning

00:00:07.110 --> 00:00:09.170
all about REST services.

00:00:09.170 --> 00:00:13.160
And I suppose in theory now, you
have enough information to

00:00:13.160 --> 00:00:14.850
write your own REST library.

00:00:14.850 --> 00:00:17.890
You could probably figure out,
in your language, how to make

00:00:17.890 --> 00:00:19.880
a call over HTTP.

00:00:19.880 --> 00:00:22.690
You could remember to take your
access token and append

00:00:22.690 --> 00:00:24.935
it on to any call that--

00:00:24.935 --> 00:00:27.290
you know, and you can use your
JSON parser to get back that

00:00:27.290 --> 00:00:29.050
data and do fun things
with it.

00:00:29.050 --> 00:00:31.070
But generally speaking,
you shouldn't do that.

00:00:31.070 --> 00:00:33.840
Just about every major language
out there has a

00:00:33.840 --> 00:00:35.430
library to deal with

00:00:35.430 --> 00:00:37.240
interacting with REST services.

00:00:37.240 --> 00:00:39.700
And they, in general, have dealt
with all the difficult

00:00:39.700 --> 00:00:42.200
corner cases that you probably
haven't dealt with yet.

00:00:42.200 --> 00:00:44.440
What happens if the
network goes down?

00:00:44.440 --> 00:00:46.710
Or what happens if
the token is no

00:00:46.710 --> 00:00:48.980
longer valid or is expired?

00:00:48.980 --> 00:00:50.300
How can we make sure
we trap that

00:00:50.300 --> 00:00:53.240
information instead of crashing?

00:00:53.240 --> 00:00:55.430
So you should definitely
use these libraries.

00:00:55.430 --> 00:00:58.460
And typically, they come
in three types.

00:00:58.460 --> 00:01:00.810
The first type of library
basically abstracts out all

00:01:00.810 --> 00:01:01.970
the networking bits.

00:01:01.970 --> 00:01:04.720
You still have to have a pretty
good understanding of

00:01:04.720 --> 00:01:06.590
the REST calls you're
going to make.

00:01:06.590 --> 00:01:10.670
This is an example from the
PHP client library, where

00:01:10.670 --> 00:01:15.220
we're just using the Google HTTP
request method to take

00:01:15.220 --> 00:01:16.870
care of some of the networking
details.

00:01:16.870 --> 00:01:19.870
But you'll notice I still have
to supply the full address of

00:01:19.870 --> 00:01:21.810
the endpoint that we want.

00:01:21.810 --> 00:01:24.280
I have to specify that
this is a post call.

00:01:24.280 --> 00:01:26.110
And I have to supply
the values to this

00:01:26.110 --> 00:01:28.060
post call in an array.

00:01:28.060 --> 00:01:30.790
What this library does for me
is it remembers the OAuth to

00:01:30.790 --> 00:01:33.350
bearer token that I
passed to it in an

00:01:33.350 --> 00:01:35.210
initialization step somewhere.

00:01:35.210 --> 00:01:38.010
And then it just deals with
making the call, getting the

00:01:38.010 --> 00:01:42.000
response, and returning it back
in this bottom line here.

00:01:42.000 --> 00:01:43.350
So pretty low level.

00:01:43.350 --> 00:01:45.300
Still close to the metal.

00:01:45.300 --> 00:01:47.990
The second type of library takes
advantage of something

00:01:47.990 --> 00:01:50.840
that Google does, and maybe
other companies as well.

00:01:50.840 --> 00:01:53.670
Which is we create this thing
called a discovery document,

00:01:53.670 --> 00:01:57.160
which is a very, very detailed
description of everything that

00:01:57.160 --> 00:01:58.940
goes on in our REST service.

00:01:58.940 --> 00:02:01.850
We have various tools that
analyze our REST service,

00:02:01.850 --> 00:02:04.640
produce these very detailed
discovery documents.

00:02:04.640 --> 00:02:07.490
And then within each of
our languages, we have

00:02:07.490 --> 00:02:11.000
corresponding tools that read in
this discovery document and

00:02:11.000 --> 00:02:15.530
essentially convert that into
native objects and calls that

00:02:15.530 --> 00:02:17.230
can be made within
that language.

00:02:17.230 --> 00:02:19.570
This sounds confusing and
abstract, so let's just show

00:02:19.570 --> 00:02:20.690
you an example.

00:02:20.690 --> 00:02:22.920
This is the exact same
call that I made on

00:02:22.920 --> 00:02:23.950
the previous slide.

00:02:23.950 --> 00:02:28.120
The big difference is this PHP
library has a Google game

00:02:28.120 --> 00:02:31.000
service .PHP file that
is generated by

00:02:31.000 --> 00:02:32.640
one of these tools.

00:02:32.640 --> 00:02:34.100
It's analyzed our
REST service.

00:02:34.100 --> 00:02:38.290
It's realized that I have a
score slash submit call that

00:02:38.290 --> 00:02:41.060
is a post that takes two
values-- the leaderboard ID

00:02:41.060 --> 00:02:42.360
and the score value--

00:02:42.360 --> 00:02:45.190
and basically turns
that into a method

00:02:45.190 --> 00:02:46.880
that I can call directly.

00:02:46.880 --> 00:02:50.070
So I'm basically accessing
this variable called game

00:02:50.070 --> 00:02:54.860
service, which is a Google Game
Service object, that then

00:02:54.860 --> 00:02:57.960
allows me to submit a score to
leaderboard just by calling a

00:02:57.960 --> 00:02:59.660
couple of public
methods on it.

00:02:59.660 --> 00:03:03.010
I don't have to know that this
is a post call, although I can

00:03:03.010 --> 00:03:04.090
probably guess.

00:03:04.090 --> 00:03:07.230
And thanks to the magic of
code hinting, my ID can

00:03:07.230 --> 00:03:09.920
probably tell me what values
I should be supplying here.

00:03:09.920 --> 00:03:13.460
I don't need to look it up in
the REST call or the reference

00:03:13.460 --> 00:03:16.110
documentation and look up what
the actual key is for each of

00:03:16.110 --> 00:03:18.110
these values, or anything
like that.

00:03:18.110 --> 00:03:20.620
It's nicely integrated.

00:03:20.620 --> 00:03:23.310
And then the third type of
library is the "Hey, let's

00:03:23.310 --> 00:03:26.130
completely abstract this stuff
out for you." And this is what

00:03:26.130 --> 00:03:28.800
the Play Games library
for iOS does.

00:03:28.800 --> 00:03:32.620
So here I'm creating a score
object by calling the GPGScore

00:03:32.620 --> 00:03:35.330
class method score with
leaderboard ID.

00:03:35.330 --> 00:03:36.860
I'm assigning it a value.

00:03:36.860 --> 00:03:39.180
And then I'm telling
the score value,

00:03:39.180 --> 00:03:40.470
hey, go submit yourself.

00:03:40.470 --> 00:03:42.810
And here's the completion
handler that you can call when

00:03:42.810 --> 00:03:44.470
you're all done submitting
yourself.

00:03:44.470 --> 00:03:47.320
And in this completion handler,
I'll have some

00:03:47.320 --> 00:03:50.320
information about the score I
submitted, as well as any

00:03:50.320 --> 00:03:52.270
errors that need
to be surfaced.

00:03:52.270 --> 00:03:55.270
And so you'll notice here,
unlike the PHP library, I'm

00:03:55.270 --> 00:03:57.730
not even kicking off
a network call.

00:03:57.730 --> 00:04:01.070
I'm passing it onto the library
to say hey, start this

00:04:01.070 --> 00:04:02.890
up at an appropriate moment.

00:04:02.890 --> 00:04:06.330
And so what the library does is
first, it takes these tasks

00:04:06.330 --> 00:04:08.340
that you want to perform and
converts it into the

00:04:08.340 --> 00:04:10.190
appropriate REST calls.

00:04:10.190 --> 00:04:13.720
It also deals with all the
networking auth junk for me.

00:04:13.720 --> 00:04:16.579
At some point, I had to
initialize this with my GPP

00:04:16.579 --> 00:04:17.560
sign-in object.

00:04:17.560 --> 00:04:19.769
And you'll see that coming up.

00:04:19.769 --> 00:04:22.685
But at that point, the library
takes care of managing my

00:04:22.685 --> 00:04:24.110
access token for me.

00:04:24.110 --> 00:04:26.520
I don't have to actually
know my users' access

00:04:26.520 --> 00:04:28.440
token at any point.

00:04:28.440 --> 00:04:31.310
It does some smart things, like
intelligently cache data

00:04:31.310 --> 00:04:34.500
for me and deal with situations,
for instance,

00:04:34.500 --> 00:04:36.220
where I'm offline.

00:04:36.220 --> 00:04:39.790
In this case, actually, I can
still submit a score with

00:04:39.790 --> 00:04:40.910
completion handler.

00:04:40.910 --> 00:04:43.860
And if the user is offline,
the library will be smart

00:04:43.860 --> 00:04:47.170
enough to hold onto that score
and wait until I come back

00:04:47.170 --> 00:04:48.120
online again.

00:04:48.120 --> 00:04:49.810
And then I will attempt to
submit the score in the

00:04:49.810 --> 00:04:50.800
background.

00:04:50.800 --> 00:04:53.480
What's even better is, by the
way, if I submit a better

00:04:53.480 --> 00:04:55.980
score with the same leaderboard
ID, the library

00:04:55.980 --> 00:04:58.830
will be smart enough to
disregard this first score and

00:04:58.830 --> 00:05:01.080
just use the second one once
I come back online.

00:05:01.080 --> 00:05:03.120
So there's a lot of extra
logic that this library

00:05:03.120 --> 00:05:06.520
handles behind the scenes for me
when it takes all this and

00:05:06.520 --> 00:05:09.660
converts it to REST calls,
which is great.

00:05:09.660 --> 00:05:11.520
Except that it doesn't
really do that.

00:05:11.520 --> 00:05:13.360
And I guess this
is the big lie.

00:05:13.360 --> 00:05:15.360
I've been talking all
about REST services.

00:05:15.360 --> 00:05:18.070
It turns out that right now, the
Objective C client library

00:05:18.070 --> 00:05:21.450
uses a completely different
service called JSON-RPC.

00:05:21.450 --> 00:05:25.730
And JSON-RPC is another set of
rules that can be used to talk

00:05:25.730 --> 00:05:27.140
to back-end services.

00:05:27.140 --> 00:05:28.670
In some ways it's
similar to REST.

00:05:28.670 --> 00:05:30.490
In some ways it's different.

00:05:30.490 --> 00:05:33.760
I think one of the biggest
advantages of JSON-RPC is that

00:05:33.760 --> 00:05:37.470
it's a little simpler to make
batch calls all at once.

00:05:37.470 --> 00:05:39.790
On the other hand, I think
with REST, it's easier to

00:05:39.790 --> 00:05:42.390
cache data you get back
from a get call, and

00:05:42.390 --> 00:05:43.600
that sort of thing.

00:05:43.600 --> 00:05:45.200
And if you're wondering
hey, wait a minute.

00:05:45.200 --> 00:05:47.360
Why did you just spent the last
10 minutes teaching me

00:05:47.360 --> 00:05:49.090
about REST when the
client library

00:05:49.090 --> 00:05:51.270
does something different?

00:05:51.270 --> 00:05:53.830
The answer is that I would
actually like you to forget

00:05:53.830 --> 00:05:57.350
this technicality and pretend
that the Play Games library

00:05:57.350 --> 00:06:00.620
for iOS is also using REST
behind the scenes.

00:06:00.620 --> 00:06:02.750
And there's a couple
reasons for it.

00:06:02.750 --> 00:06:05.080
Number one, just about every
other client library

00:06:05.080 --> 00:06:06.650
already uses REST.

00:06:06.650 --> 00:06:10.040
So Android, all of the server
libraries, Java,

00:06:10.040 --> 00:06:12.270
PHP, Python, Ruby.

00:06:12.270 --> 00:06:15.030
And I'm pretty sure at some
unspecified point in the

00:06:15.030 --> 00:06:18.040
future, we'll actually be
changing things on the back

00:06:18.040 --> 00:06:21.940
end so that even the Objective
C library is using REST

00:06:21.940 --> 00:06:23.700
instead of JSON-RPC.

00:06:23.700 --> 00:06:25.720
And frankly, this change
should be completely

00:06:25.720 --> 00:06:28.400
transparent to you if using
these libraries, which you

00:06:28.400 --> 00:06:31.990
should be for all the reasons
we just went over.

00:06:31.990 --> 00:06:34.420
So for the sake of keeping
things simple, let's just

00:06:34.420 --> 00:06:38.830
pretend that the Play Games
library for iOS also uses REST

00:06:38.830 --> 00:06:40.280
in the back end.

00:06:40.280 --> 00:06:43.150
And if somebody wants to tell
you otherwise, it's like that

00:06:43.150 --> 00:06:45.340
guy who tells you, hey, peanuts
aren't really nuts.

00:06:45.340 --> 00:06:46.460
They're actually legumes.

00:06:46.460 --> 00:06:46.740
You know what?

00:06:46.740 --> 00:06:47.580
Shut up.

00:06:47.580 --> 00:06:48.010
They're nuts.

00:06:48.010 --> 00:06:48.840
Nobody cares.

00:06:48.840 --> 00:06:50.970
And the Objective C library,
it uses REST

00:06:50.970 --> 00:06:52.590
as far as I'm concerned.

00:06:52.590 --> 00:06:55.580
So now that we have a better
handle on the Games library

00:06:55.580 --> 00:06:58.850
and what it does underneath the
hood, let's actually add

00:06:58.850 --> 00:07:00.190
it to our project.

00:07:00.190 --> 00:07:01.790
And we're going to do that
in the next lesson.

