WEBVTT
Kind: captions
Language: en

00:00:00.539 --> 00:00:04.550 align:start position:0%
 
ah<00:00:02.360><c> threading</c><00:00:03.360><c> so</c><00:00:03.720><c> powerful</c><00:00:04.230><c> that</c><00:00:04.259><c> you</c><00:00:04.380><c> can</c>

00:00:04.550 --> 00:00:04.560 align:start position:0%
ah threading so powerful that you can
 

00:00:04.560 --> 00:00:06.230 align:start position:0%
ah threading so powerful that you can
fold<00:00:04.740><c> genomes</c><00:00:05.250><c> with</c><00:00:05.460><c> it</c><00:00:05.580><c> but</c><00:00:05.730><c> so</c><00:00:05.879><c> difficult</c>

00:00:06.230 --> 00:00:06.240 align:start position:0%
fold genomes with it but so difficult
 

00:00:06.240 --> 00:00:08.030 align:start position:0%
fold genomes with it but so difficult
that<00:00:06.569><c> it</c><00:00:06.720><c> can</c><00:00:06.810><c> drive</c><00:00:06.990><c> the</c><00:00:07.170><c> average</c><00:00:07.350><c> programmer</c>

00:00:08.030 --> 00:00:08.040 align:start position:0%
that it can drive the average programmer
 

00:00:08.040 --> 00:00:10.640 align:start position:0%
that it can drive the average programmer
insane<00:00:08.700><c> my</c><00:00:09.330><c> name</c><00:00:09.510><c> is</c><00:00:09.660><c> Colt</c><00:00:09.900><c> McAnlis</c><00:00:09.929><c> and</c><00:00:10.559><c> as</c>

00:00:10.640 --> 00:00:10.650 align:start position:0%
insane my name is Colt McAnlis and as
 

00:00:10.650 --> 00:00:12.470 align:start position:0%
insane my name is Colt McAnlis and as
far<00:00:10.860><c> as</c><00:00:10.920><c> Android</c><00:00:11.460><c> development</c><00:00:11.940><c> is</c><00:00:12.120><c> concerned</c>

00:00:12.470 --> 00:00:12.480 align:start position:0%
far as Android development is concerned
 

00:00:12.480 --> 00:00:14.060 align:start position:0%
far as Android development is concerned
threading<00:00:13.080><c> is</c><00:00:13.170><c> one</c><00:00:13.259><c> of</c><00:00:13.349><c> the</c><00:00:13.410><c> most</c><00:00:13.530><c> important</c>

00:00:14.060 --> 00:00:14.070 align:start position:0%
threading is one of the most important
 

00:00:14.070 --> 00:00:15.890 align:start position:0%
threading is one of the most important
and<00:00:14.190><c> most</c><00:00:14.219><c> confusing</c><00:00:15.030><c> things</c><00:00:15.450><c> that</c><00:00:15.660><c> you</c><00:00:15.750><c> can</c>

00:00:15.890 --> 00:00:15.900 align:start position:0%
and most confusing things that you can
 

00:00:15.900 --> 00:00:17.450 align:start position:0%
and most confusing things that you can
deal<00:00:16.109><c> with</c><00:00:16.139><c> which</c><00:00:16.740><c> means</c><00:00:16.980><c> if</c><00:00:17.130><c> you</c><00:00:17.190><c> want</c><00:00:17.369><c> to</c>

00:00:17.450 --> 00:00:17.460 align:start position:0%
deal with which means if you want to
 

00:00:17.460 --> 00:00:19.250 align:start position:0%
deal with which means if you want to
write<00:00:17.580><c> the</c><00:00:17.730><c> fastest</c><00:00:18.180><c> out</c><00:00:18.359><c> possible</c><00:00:18.869><c> you've</c>

00:00:19.250 --> 00:00:19.260 align:start position:0%
write the fastest out possible you've
 

00:00:19.260 --> 00:00:21.050 align:start position:0%
write the fastest out possible you've
got<00:00:19.529><c> to</c><00:00:19.710><c> take</c><00:00:19.890><c> a</c><00:00:19.920><c> minute</c><00:00:20.039><c> and</c><00:00:20.369><c> understand</c><00:00:20.910><c> the</c>

00:00:21.050 --> 00:00:21.060 align:start position:0%
got to take a minute and understand the
 

00:00:21.060 --> 00:00:22.880 align:start position:0%
got to take a minute and understand the
subtle<00:00:21.539><c> art</c><00:00:21.750><c> that</c><00:00:22.109><c> is</c><00:00:22.230><c> multi-threaded</c>

00:00:22.880 --> 00:00:22.890 align:start position:0%
subtle art that is multi-threaded
 

00:00:22.890 --> 00:00:24.650 align:start position:0%
subtle art that is multi-threaded
programming<00:00:23.369><c> remember</c><00:00:24.180><c> that</c><00:00:24.300><c> in</c><00:00:24.390><c> the</c><00:00:24.480><c> vast</c>

00:00:24.650 --> 00:00:24.660 align:start position:0%
programming remember that in the vast
 

00:00:24.660 --> 00:00:26.179 align:start position:0%
programming remember that in the vast
world<00:00:24.960><c> of</c><00:00:25.109><c> Android</c><00:00:25.410><c> functions</c><00:00:25.920><c> there's</c><00:00:26.130><c> a</c>

00:00:26.179 --> 00:00:26.189 align:start position:0%
world of Android functions there's a
 

00:00:26.189 --> 00:00:28.130 align:start position:0%
world of Android functions there's a
whole<00:00:26.400><c> boatload</c><00:00:26.820><c> of</c><00:00:27.060><c> operations</c><00:00:27.720><c> that</c><00:00:27.869><c> only</c>

00:00:28.130 --> 00:00:28.140 align:start position:0%
whole boatload of operations that only
 

00:00:28.140 --> 00:00:30.830 align:start position:0%
whole boatload of operations that only
execute<00:00:28.949><c> on</c><00:00:29.070><c> the</c><00:00:29.160><c> main</c><00:00:29.279><c> thread</c><00:00:29.580><c> system</c><00:00:30.420><c> events</c>

00:00:30.830 --> 00:00:30.840 align:start position:0%
execute on the main thread system events
 

00:00:30.840 --> 00:00:32.690 align:start position:0%
execute on the main thread system events
input<00:00:31.199><c> events</c><00:00:31.590><c> application</c><00:00:32.279><c> callback</c>

00:00:32.690 --> 00:00:32.700 align:start position:0%
input events application callback
 

00:00:32.700 --> 00:00:35.690 align:start position:0%
input events application callback
services<00:00:33.450><c> and</c><00:00:33.690><c> even</c><00:00:34.079><c> alarms</c><00:00:34.950><c> and</c><00:00:35.160><c> for</c><00:00:35.640><c> the</c>

00:00:35.690 --> 00:00:35.700 align:start position:0%
services and even alarms and for the
 

00:00:35.700 --> 00:00:37.400 align:start position:0%
services and even alarms and for the
most<00:00:35.850><c> part</c><00:00:35.969><c> any</c><00:00:36.239><c> code</c><00:00:36.480><c> that</c><00:00:36.510><c> you</c><00:00:37.079><c> write</c>

00:00:37.400 --> 00:00:37.410 align:start position:0%
most part any code that you write
 

00:00:37.410 --> 00:00:39.530 align:start position:0%
most part any code that you write
execute<00:00:38.250><c> inside</c><00:00:38.640><c> one</c><00:00:38.940><c> of</c><00:00:38.969><c> these</c><00:00:39.120><c> operations</c>

00:00:39.530 --> 00:00:39.540 align:start position:0%
execute inside one of these operations
 

00:00:39.540 --> 00:00:41.840 align:start position:0%
execute inside one of these operations
which<00:00:39.960><c> means</c><00:00:39.989><c> it</c><00:00:40.410><c> also</c><00:00:40.649><c> runs</c><00:00:41.219><c> on</c><00:00:41.460><c> the</c><00:00:41.670><c> right</c>

00:00:41.840 --> 00:00:41.850 align:start position:0%
which means it also runs on the right
 

00:00:41.850 --> 00:00:43.850 align:start position:0%
which means it also runs on the right
main<00:00:42.059><c> thread</c><00:00:42.329><c> now</c><00:00:42.899><c> if</c><00:00:43.020><c> you</c><00:00:43.110><c> recall</c><00:00:43.260><c> work</c><00:00:43.710><c> that</c>

00:00:43.850 --> 00:00:43.860 align:start position:0%
main thread now if you recall work that
 

00:00:43.860 --> 00:00:45.200 align:start position:0%
main thread now if you recall work that
executes<00:00:44.250><c> on</c><00:00:44.370><c> the</c><00:00:44.430><c> main</c><00:00:44.550><c> thread</c><00:00:44.730><c> gets</c><00:00:45.059><c> there</c>

00:00:45.200 --> 00:00:45.210 align:start position:0%
executes on the main thread gets there
 

00:00:45.210 --> 00:00:46.940 align:start position:0%
executes on the main thread gets there
after<00:00:45.450><c> being</c><00:00:45.570><c> pulled</c><00:00:45.899><c> from</c><00:00:46.140><c> the</c><00:00:46.289><c> front</c><00:00:46.590><c> of</c><00:00:46.770><c> a</c>

00:00:46.940 --> 00:00:46.950 align:start position:0%
after being pulled from the front of a
 

00:00:46.950 --> 00:00:49.400 align:start position:0%
after being pulled from the front of a
work<00:00:47.190><c> queue</c><00:00:47.640><c> so</c><00:00:48.090><c> blocks</c><00:00:48.450><c> of</c><00:00:48.660><c> work</c><00:00:48.840><c> are</c><00:00:49.020><c> done</c><00:00:49.050><c> in</c>

00:00:49.400 --> 00:00:49.410 align:start position:0%
work queue so blocks of work are done in
 

00:00:49.410 --> 00:00:51.020 align:start position:0%
work queue so blocks of work are done in
order<00:00:49.920><c> and</c><00:00:50.100><c> the</c><00:00:50.190><c> next</c><00:00:50.430><c> block</c><00:00:50.579><c> of</c><00:00:50.610><c> work</c><00:00:50.850><c> isn't</c>

00:00:51.020 --> 00:00:51.030 align:start position:0%
order and the next block of work isn't
 

00:00:51.030 --> 00:00:52.729 align:start position:0%
order and the next block of work isn't
processed<00:00:51.420><c> until</c><00:00:51.989><c> the</c><00:00:52.079><c> current</c><00:00:52.260><c> one</c><00:00:52.530><c> is</c>

00:00:52.729 --> 00:00:52.739 align:start position:0%
processed until the current one is
 

00:00:52.739 --> 00:00:54.860 align:start position:0%
processed until the current one is
completed<00:00:53.370><c> which</c><00:00:53.520><c> means</c><00:00:53.789><c> if</c><00:00:54.059><c> there's</c><00:00:54.390><c> a</c><00:00:54.480><c> large</c>

00:00:54.860 --> 00:00:54.870 align:start position:0%
completed which means if there's a large
 

00:00:54.870 --> 00:00:57.080 align:start position:0%
completed which means if there's a large
chunk<00:00:55.350><c> of</c><00:00:55.530><c> work</c><00:00:55.800><c> between</c><00:00:56.160><c> an</c><00:00:56.280><c> input</c><00:00:56.460><c> event</c><00:00:56.910><c> and</c>

00:00:57.080 --> 00:00:57.090 align:start position:0%
chunk of work between an input event and
 

00:00:57.090 --> 00:00:58.970 align:start position:0%
chunk of work between an input event and
its<00:00:57.239><c> callback</c><00:00:57.719><c> then</c><00:00:58.230><c> the</c><00:00:58.379><c> user</c><00:00:58.559><c> will</c><00:00:58.649><c> have</c><00:00:58.800><c> to</c>

00:00:58.970 --> 00:00:58.980 align:start position:0%
its callback then the user will have to
 

00:00:58.980 --> 00:01:00.889 align:start position:0%
its callback then the user will have to
wait<00:00:59.100><c> longer</c><00:00:59.399><c> than</c><00:00:59.520><c> expected</c><00:01:00.120><c> to</c><00:01:00.149><c> see</c><00:01:00.390><c> results</c>

00:01:00.889 --> 00:01:00.899 align:start position:0%
wait longer than expected to see results
 

00:01:00.899 --> 00:01:02.720 align:start position:0%
wait longer than expected to see results
and<00:01:01.079><c> don't</c><00:01:01.710><c> forget</c><00:01:01.920><c> that</c><00:01:02.010><c> the</c><00:01:02.100><c> main</c><00:01:02.219><c> thread</c><00:01:02.579><c> is</c>

00:01:02.720 --> 00:01:02.730 align:start position:0%
and don't forget that the main thread is
 

00:01:02.730 --> 00:01:04.820 align:start position:0%
and don't forget that the main thread is
also<00:01:03.090><c> where</c><00:01:03.239><c> most</c><00:01:03.539><c> of</c><00:01:03.780><c> the</c><00:01:03.930><c> screen</c><00:01:04.290><c> rendering</c>

00:01:04.820 --> 00:01:04.830 align:start position:0%
also where most of the screen rendering
 

00:01:04.830 --> 00:01:06.950 align:start position:0%
also where most of the screen rendering
occurs<00:01:05.189><c> while</c><00:01:05.760><c> an</c><00:01:05.880><c> animation</c><00:01:06.270><c> or</c><00:01:06.540><c> screen</c>

00:01:06.950 --> 00:01:06.960 align:start position:0%
occurs while an animation or screen
 

00:01:06.960 --> 00:01:08.719 align:start position:0%
occurs while an animation or screen
update<00:01:07.380><c> is</c><00:01:07.500><c> occurring</c><00:01:08.010><c> the</c><00:01:08.159><c> system</c><00:01:08.460><c> will</c><00:01:08.549><c> try</c>

00:01:08.719 --> 00:01:08.729 align:start position:0%
update is occurring the system will try
 

00:01:08.729 --> 00:01:10.820 align:start position:0%
update is occurring the system will try
to<00:01:08.760><c> draw</c><00:01:09.060><c> the</c><00:01:09.119><c> screen</c><00:01:09.479><c> every</c><00:01:09.720><c> 16</c><00:01:10.140><c> milliseconds</c>

00:01:10.820 --> 00:01:10.830 align:start position:0%
to draw the screen every 16 milliseconds
 

00:01:10.830 --> 00:01:13.399 align:start position:0%
to draw the screen every 16 milliseconds
or<00:01:10.890><c> so</c><00:01:10.920><c> to</c><00:01:11.520><c> achieve</c><00:01:11.610><c> smooth</c><00:01:12.360><c> 60</c><00:01:12.960><c> frames</c><00:01:12.990><c> per</c>

00:01:13.399 --> 00:01:13.409 align:start position:0%
or so to achieve smooth 60 frames per
 

00:01:13.409 --> 00:01:15.740 align:start position:0%
or so to achieve smooth 60 frames per
second<00:01:14.070><c> the</c><00:01:14.460><c> problem</c><00:01:14.970><c> is</c><00:01:15.180><c> that</c><00:01:15.390><c> this</c><00:01:15.689><c> is</c>

00:01:15.740 --> 00:01:15.750 align:start position:0%
second the problem is that this is
 

00:01:15.750 --> 00:01:17.210 align:start position:0%
second the problem is that this is
happening<00:01:16.020><c> while</c><00:01:16.439><c> the</c><00:01:16.560><c> thread</c><00:01:16.770><c> is</c><00:01:16.890><c> also</c>

00:01:17.210 --> 00:01:17.220 align:start position:0%
happening while the thread is also
 

00:01:17.220 --> 00:01:19.850 align:start position:0%
happening while the thread is also
responding<00:01:17.549><c> to</c><00:01:17.790><c> app</c><00:01:17.970><c> input</c><00:01:18.600><c> events</c><00:01:19.200><c> so</c><00:01:19.619><c> if</c>

00:01:19.850 --> 00:01:19.860 align:start position:0%
responding to app input events so if
 

00:01:19.860 --> 00:01:20.810 align:start position:0%
responding to app input events so if
your<00:01:19.979><c> app</c><00:01:20.130><c> is</c><00:01:20.310><c> in</c><00:01:20.400><c> the</c><00:01:20.460><c> middle</c><00:01:20.640><c> of</c><00:01:20.700><c> an</c>

00:01:20.810 --> 00:01:20.820 align:start position:0%
your app is in the middle of an
 

00:01:20.820 --> 00:01:22.609 align:start position:0%
your app is in the middle of an
animation<00:01:20.909><c> and</c><00:01:21.450><c> some</c><00:01:21.600><c> random</c><00:01:21.900><c> work</c><00:01:22.229><c> packet</c>

00:01:22.609 --> 00:01:22.619 align:start position:0%
animation and some random work packet
 

00:01:22.619 --> 00:01:24.230 align:start position:0%
animation and some random work packet
takes<00:01:22.799><c> longer</c><00:01:23.070><c> than</c><00:01:23.189><c> expected</c><00:01:23.280><c> you'll</c><00:01:24.000><c> miss</c>

00:01:24.230 --> 00:01:24.240 align:start position:0%
takes longer than expected you'll miss
 

00:01:24.240 --> 00:01:25.730 align:start position:0%
takes longer than expected you'll miss
your<00:01:24.390><c> chance</c><00:01:24.600><c> to</c><00:01:24.750><c> render</c><00:01:25.110><c> that</c><00:01:25.259><c> next</c><00:01:25.530><c> frame</c>

00:01:25.730 --> 00:01:25.740 align:start position:0%
your chance to render that next frame
 

00:01:25.740 --> 00:01:27.560 align:start position:0%
your chance to render that next frame
within<00:01:26.100><c> the</c><00:01:26.310><c> 16</c><00:01:26.670><c> millisecond</c><00:01:27.150><c> window</c><00:01:27.270><c> and</c>

00:01:27.560 --> 00:01:27.570 align:start position:0%
within the 16 millisecond window and
 

00:01:27.570 --> 00:01:29.899 align:start position:0%
within the 16 millisecond window and
that<00:01:28.080><c> frame</c><00:01:28.439><c> will</c><00:01:28.590><c> be</c><00:01:28.619><c> delayed</c><00:01:29.009><c> this</c><00:01:29.579><c> is</c><00:01:29.759><c> what</c>

00:01:29.899 --> 00:01:29.909 align:start position:0%
that frame will be delayed this is what
 

00:01:29.909 --> 00:01:32.179 align:start position:0%
that frame will be delayed this is what
we<00:01:30.030><c> call</c><00:01:30.270><c> a</c><00:01:30.479><c> dropped</c><00:01:30.960><c> frame</c><00:01:31.650><c> and</c><00:01:31.950><c> when</c><00:01:32.070><c> this</c>

00:01:32.179 --> 00:01:32.189 align:start position:0%
we call a dropped frame and when this
 

00:01:32.189 --> 00:01:34.789 align:start position:0%
we call a dropped frame and when this
happens<00:01:32.549><c> users</c><00:01:33.119><c> start</c><00:01:33.509><c> to</c><00:01:33.689><c> notice</c><00:01:33.900><c> the</c><00:01:34.229><c> direct</c>

00:01:34.789 --> 00:01:34.799 align:start position:0%
happens users start to notice the direct
 

00:01:34.799 --> 00:01:36.289 align:start position:0%
happens users start to notice the direct
solution<00:01:34.979><c> here</c><00:01:35.280><c> is</c><00:01:35.310><c> to</c><00:01:35.369><c> move</c><00:01:35.640><c> anything</c><00:01:36.150><c> that</c>

00:01:36.289 --> 00:01:36.299 align:start position:0%
solution here is to move anything that
 

00:01:36.299 --> 00:01:38.330 align:start position:0%
solution here is to move anything that
might<00:01:36.509><c> upset</c><00:01:36.750><c> the</c><00:01:37.200><c> 16</c><00:01:37.619><c> millisecond</c><00:01:38.189><c> window</c>

00:01:38.330 --> 00:01:38.340 align:start position:0%
might upset the 16 millisecond window
 

00:01:38.340 --> 00:01:41.300 align:start position:0%
might upset the 16 millisecond window
over<00:01:39.329><c> somewhere</c><00:01:39.720><c> else</c><00:01:39.930><c> like</c><00:01:40.229><c> to</c><00:01:40.530><c> a</c><00:01:40.560><c> different</c>

00:01:41.300 --> 00:01:41.310 align:start position:0%
over somewhere else like to a different
 

00:01:41.310 --> 00:01:43.460 align:start position:0%
over somewhere else like to a different
thread<00:01:41.729><c> this</c><00:01:42.240><c> way</c><00:01:42.479><c> it</c><00:01:42.689><c> won't</c><00:01:42.780><c> be</c><00:01:42.899><c> contesting</c>

00:01:43.460 --> 00:01:43.470 align:start position:0%
thread this way it won't be contesting
 

00:01:43.470 --> 00:01:44.810 align:start position:0%
thread this way it won't be contesting
with<00:01:43.560><c> the</c><00:01:43.649><c> UI</c><00:01:43.829><c> thread</c><00:01:44.159><c> for</c><00:01:44.369><c> work</c><00:01:44.490><c> to</c><00:01:44.610><c> be</c><00:01:44.640><c> done</c>

00:01:44.810 --> 00:01:44.820 align:start position:0%
with the UI thread for work to be done
 

00:01:44.820 --> 00:01:46.760 align:start position:0%
with the UI thread for work to be done
and<00:01:45.060><c> won't</c><00:01:45.360><c> be</c><00:01:45.509><c> interrupting</c><00:01:46.020><c> the</c><00:01:46.200><c> drawing</c><00:01:46.500><c> of</c>

00:01:46.760 --> 00:01:46.770 align:start position:0%
and won't be interrupting the drawing of
 

00:01:46.770 --> 00:01:49.429 align:start position:0%
and won't be interrupting the drawing of
the<00:01:46.920><c> screen</c><00:01:47.189><c> which</c><00:01:47.670><c> is</c><00:01:47.820><c> the</c><00:01:47.970><c> whole</c><00:01:48.420><c> point</c><00:01:49.170><c> of</c>

00:01:49.429 --> 00:01:49.439 align:start position:0%
the screen which is the whole point of
 

00:01:49.439 --> 00:01:51.499 align:start position:0%
the screen which is the whole point of
threading<00:01:49.829><c> on</c><00:01:49.920><c> Android</c><00:01:50.310><c> in</c><00:01:50.520><c> a</c><00:01:50.610><c> nutshell</c><00:01:50.820><c> so</c>

00:01:51.499 --> 00:01:51.509 align:start position:0%
threading on Android in a nutshell so
 

00:01:51.509 --> 00:01:53.359 align:start position:0%
threading on Android in a nutshell so
the<00:01:51.600><c> question</c><00:01:51.869><c> at</c><00:01:51.960><c> hand</c><00:01:51.990><c> what's</c><00:01:52.649><c> the</c><00:01:52.799><c> best</c><00:01:53.100><c> way</c>

00:01:53.359 --> 00:01:53.369 align:start position:0%
the question at hand what's the best way
 

00:01:53.369 --> 00:01:55.130 align:start position:0%
the question at hand what's the best way
to<00:01:53.399><c> offload</c><00:01:54.000><c> this</c><00:01:54.210><c> work</c><00:01:54.540><c> and</c><00:01:54.780><c> how</c><00:01:54.930><c> do</c><00:01:54.990><c> you</c>

00:01:55.130 --> 00:01:55.140 align:start position:0%
to offload this work and how do you
 

00:01:55.140 --> 00:01:56.959 align:start position:0%
to offload this work and how do you
choose<00:01:55.409><c> what</c><00:01:55.680><c> types</c><00:01:56.009><c> of</c><00:01:56.189><c> work</c><00:01:56.430><c> to</c><00:01:56.579><c> offload</c>

00:01:56.959 --> 00:01:56.969 align:start position:0%
choose what types of work to offload
 

00:01:56.969 --> 00:01:58.969 align:start position:0%
choose what types of work to offload
thankfully<00:01:57.810><c> the</c><00:01:57.990><c> android</c><00:01:58.439><c> framework</c><00:01:58.649><c> has</c>

00:01:58.969 --> 00:01:58.979 align:start position:0%
thankfully the android framework has
 

00:01:58.979 --> 00:02:00.830 align:start position:0%
thankfully the android framework has
provided<00:01:59.250><c> a</c><00:01:59.549><c> handful</c><00:02:00.060><c> of</c><00:02:00.149><c> classes</c><00:02:00.299><c> to</c><00:02:00.689><c> help</c>

00:02:00.830 --> 00:02:00.840 align:start position:0%
provided a handful of classes to help
 

00:02:00.840 --> 00:02:02.840 align:start position:0%
provided a handful of classes to help
make<00:02:00.990><c> this</c><00:02:01.140><c> a</c><00:02:01.200><c> bit</c><00:02:01.619><c> easier</c><00:02:01.770><c> for</c><00:02:02.040><c> you</c><00:02:02.430><c> for</c>

00:02:02.840 --> 00:02:02.850 align:start position:0%
make this a bit easier for you for
 

00:02:02.850 --> 00:02:05.690 align:start position:0%
make this a bit easier for you for
example<00:02:03.180><c> the</c><00:02:03.299><c> async</c><00:02:03.899><c> task</c><00:02:04.290><c> class</c><00:02:04.829><c> is</c><00:02:05.070><c> ideal</c>

00:02:05.690 --> 00:02:05.700 align:start position:0%
example the async task class is ideal
 

00:02:05.700 --> 00:02:07.490 align:start position:0%
example the async task class is ideal
for<00:02:05.729><c> helping</c><00:02:06.180><c> you</c><00:02:06.270><c> get</c><00:02:06.420><c> work</c><00:02:06.659><c> on</c><00:02:06.869><c> and</c><00:02:07.170><c> off</c><00:02:07.290><c> the</c>

00:02:07.490 --> 00:02:07.500 align:start position:0%
for helping you get work on and off the
 

00:02:07.500 --> 00:02:09.800 align:start position:0%
for helping you get work on and off the
UI<00:02:07.680><c> thread</c><00:02:07.920><c> the</c><00:02:08.190><c> right</c><00:02:08.340><c> way</c><00:02:08.550><c> handler</c><00:02:09.479><c> threads</c>

00:02:09.800 --> 00:02:09.810 align:start position:0%
UI thread the right way handler threads
 

00:02:09.810 --> 00:02:11.510 align:start position:0%
UI thread the right way handler threads
are<00:02:10.020><c> great</c><00:02:10.349><c> when</c><00:02:10.560><c> you</c><00:02:10.649><c> need</c><00:02:10.739><c> a</c><00:02:10.800><c> dedicated</c>

00:02:11.510 --> 00:02:11.520 align:start position:0%
are great when you need a dedicated
 

00:02:11.520 --> 00:02:13.670 align:start position:0%
are great when you need a dedicated
thread<00:02:11.879><c> for</c><00:02:12.120><c> callbacks</c><00:02:12.480><c> to</c><00:02:12.629><c> land</c><00:02:12.810><c> on</c><00:02:12.959><c> thread</c>

00:02:13.670 --> 00:02:13.680 align:start position:0%
thread for callbacks to land on thread
 

00:02:13.680 --> 00:02:15.410 align:start position:0%
thread for callbacks to land on thread
pools<00:02:13.980><c> work</c><00:02:14.220><c> best</c><00:02:14.489><c> when</c><00:02:14.700><c> you</c><00:02:14.819><c> can</c><00:02:14.849><c> break</c><00:02:15.209><c> your</c>

00:02:15.410 --> 00:02:15.420 align:start position:0%
pools work best when you can break your
 

00:02:15.420 --> 00:02:16.970 align:start position:0%
pools work best when you can break your
work<00:02:15.569><c> up</c><00:02:15.690><c> into</c><00:02:15.810><c> really</c><00:02:16.080><c> small</c><00:02:16.230><c> packets</c><00:02:16.860><c> and</c>

00:02:16.970 --> 00:02:16.980 align:start position:0%
work up into really small packets and
 

00:02:16.980 --> 00:02:18.860 align:start position:0%
work up into really small packets and
then<00:02:17.280><c> toss</c><00:02:17.520><c> them</c><00:02:17.550><c> to</c><00:02:18.000><c> a</c><00:02:18.030><c> bunch</c><00:02:18.270><c> of</c><00:02:18.450><c> threads</c><00:02:18.720><c> and</c>

00:02:18.860 --> 00:02:18.870 align:start position:0%
then toss them to a bunch of threads and
 

00:02:18.870 --> 00:02:21.380 align:start position:0%
then toss them to a bunch of threads and
intent<00:02:19.470><c> services</c><00:02:19.950><c> are</c><00:02:20.129><c> really</c><00:02:20.489><c> ideal</c><00:02:20.879><c> for</c>

00:02:21.380 --> 00:02:21.390 align:start position:0%
intent services are really ideal for
 

00:02:21.390 --> 00:02:23.600 align:start position:0%
intent services are really ideal for
background<00:02:22.020><c> tasks</c><00:02:22.500><c> or</c><00:02:22.590><c> when</c><00:02:23.190><c> you</c><00:02:23.280><c> need</c><00:02:23.430><c> to</c><00:02:23.459><c> get</c>

00:02:23.600 --> 00:02:23.610 align:start position:0%
background tasks or when you need to get
 

00:02:23.610 --> 00:02:25.910 align:start position:0%
background tasks or when you need to get
intent<00:02:23.910><c> work</c><00:02:24.060><c> off</c><00:02:24.239><c> the</c><00:02:24.569><c> UI</c><00:02:24.720><c> thread</c><00:02:25.110><c> and</c><00:02:25.260><c> like</c>

00:02:25.910 --> 00:02:25.920 align:start position:0%
intent work off the UI thread and like
 

00:02:25.920 --> 00:02:27.589 align:start position:0%
intent work off the UI thread and like
everything<00:02:26.370><c> else</c><00:02:26.489><c> there's</c><00:02:26.879><c> not</c><00:02:27.150><c> a</c><00:02:27.180><c> silver</c>

00:02:27.589 --> 00:02:27.599 align:start position:0%
everything else there's not a silver
 

00:02:27.599 --> 00:02:29.600 align:start position:0%
everything else there's not a silver
bullet<00:02:27.720><c> here</c><00:02:28.020><c> but</c><00:02:28.410><c> knowing</c><00:02:29.010><c> which</c><00:02:29.160><c> primitive</c>

00:02:29.600 --> 00:02:29.610 align:start position:0%
bullet here but knowing which primitive
 

00:02:29.610 --> 00:02:31.850 align:start position:0%
bullet here but knowing which primitive
is<00:02:29.760><c> best</c><00:02:30.120><c> for</c><00:02:30.390><c> what</c><00:02:30.599><c> situation</c><00:02:31.170><c> can</c><00:02:31.379><c> save</c><00:02:31.620><c> you</c>

00:02:31.850 --> 00:02:31.860 align:start position:0%
is best for what situation can save you
 

00:02:31.860 --> 00:02:34.009 align:start position:0%
is best for what situation can save you
a<00:02:31.890><c> lot</c><00:02:32.010><c> of</c><00:02:32.220><c> headaches</c><00:02:32.489><c> but</c><00:02:33.269><c> note</c><00:02:33.510><c> that</c><00:02:33.540><c> having</c>

00:02:34.009 --> 00:02:34.019 align:start position:0%
a lot of headaches but note that having
 

00:02:34.019 --> 00:02:35.900 align:start position:0%
a lot of headaches but note that having
all<00:02:34.140><c> those</c><00:02:34.290><c> fancy</c><00:02:34.560><c> helper</c><00:02:35.190><c> classes</c><00:02:35.400><c> doesn't</c>

00:02:35.900 --> 00:02:35.910 align:start position:0%
all those fancy helper classes doesn't
 

00:02:35.910 --> 00:02:38.030 align:start position:0%
all those fancy helper classes doesn't
hide<00:02:36.030><c> the</c><00:02:36.180><c> big</c><00:02:36.360><c> problem</c><00:02:36.750><c> memory</c><00:02:37.560><c> see</c>

00:02:38.030 --> 00:02:38.040 align:start position:0%
hide the big problem memory see
 

00:02:38.040 --> 00:02:40.160 align:start position:0%
hide the big problem memory see
threading<00:02:38.459><c> and</c><00:02:38.580><c> memory</c><00:02:38.819><c> have</c><00:02:39.060><c> never</c><00:02:39.569><c> really</c>

00:02:40.160 --> 00:02:40.170 align:start position:0%
threading and memory have never really
 

00:02:40.170 --> 00:02:41.869 align:start position:0%
threading and memory have never really
played<00:02:40.500><c> well</c><00:02:40.860><c> and</c><00:02:41.129><c> on</c><00:02:41.250><c> the</c><00:02:41.280><c> Android</c><00:02:41.849><c> platform</c>

00:02:41.869 --> 00:02:41.879 align:start position:0%
played well and on the Android platform
 

00:02:41.879 --> 00:02:44.690 align:start position:0%
played well and on the Android platform
it's<00:02:42.629><c> no</c><00:02:43.080><c> different</c><00:02:43.620><c> for</c><00:02:44.129><c> example</c><00:02:44.190><c> if</c><00:02:44.580><c> you</c>

00:02:44.690 --> 00:02:44.700 align:start position:0%
it's no different for example if you
 

00:02:44.700 --> 00:02:46.610 align:start position:0%
it's no different for example if you
declare<00:02:45.030><c> one</c><00:02:45.209><c> of</c><00:02:45.330><c> those</c><00:02:45.480><c> fancy</c><00:02:46.110><c> threading</c>

00:02:46.610 --> 00:02:46.620 align:start position:0%
declare one of those fancy threading
 

00:02:46.620 --> 00:02:49.100 align:start position:0%
declare one of those fancy threading
primitives<00:02:47.099><c> inside</c><00:02:47.730><c> of</c><00:02:47.940><c> an</c><00:02:48.030><c> activity</c><00:02:48.300><c> it</c><00:02:48.690><c> now</c>

00:02:49.100 --> 00:02:49.110 align:start position:0%
primitives inside of an activity it now
 

00:02:49.110 --> 00:02:51.199 align:start position:0%
primitives inside of an activity it now
contains<00:02:49.349><c> an</c><00:02:49.739><c> implicit</c><00:02:50.280><c> reference</c><00:02:50.640><c> to</c><00:02:51.090><c> the</c>

00:02:51.199 --> 00:02:51.209 align:start position:0%
contains an implicit reference to the
 

00:02:51.209 --> 00:02:53.930 align:start position:0%
contains an implicit reference to the
outer<00:02:51.450><c> activity</c><00:02:52.440><c> which</c><00:02:52.920><c> can</c><00:02:53.099><c> cause</c><00:02:53.340><c> a</c><00:02:53.370><c> memory</c>

00:02:53.930 --> 00:02:53.940 align:start position:0%
outer activity which can cause a memory
 

00:02:53.940 --> 00:02:55.670 align:start position:0%
outer activity which can cause a memory
leak<00:02:54.090><c> if</c><00:02:54.269><c> the</c><00:02:54.390><c> activity</c><00:02:54.870><c> is</c><00:02:54.900><c> destroyed</c><00:02:55.290><c> but</c>

00:02:55.670 --> 00:02:55.680 align:start position:0%
leak if the activity is destroyed but
 

00:02:55.680 --> 00:02:58.460 align:start position:0%
leak if the activity is destroyed but
the<00:02:55.830><c> threaded</c><00:02:56.129><c> work</c><00:02:56.310><c> is</c><00:02:56.519><c> still</c><00:02:56.849><c> alive</c><00:02:57.300><c> or</c><00:02:57.569><c> what</c>

00:02:58.460 --> 00:02:58.470 align:start position:0%
the threaded work is still alive or what
 

00:02:58.470 --> 00:03:00.500 align:start position:0%
the threaded work is still alive or what
happens<00:02:58.830><c> when</c><00:02:59.010><c> the</c><00:02:59.069><c> user</c><00:02:59.099><c> rotates</c><00:02:59.730><c> the</c><00:03:00.209><c> device</c>

00:03:00.500 --> 00:03:00.510 align:start position:0%
happens when the user rotates the device
 

00:03:00.510 --> 00:03:02.780 align:start position:0%
happens when the user rotates the device
destroying<00:03:01.349><c> an</c><00:03:01.500><c> activity</c><00:03:01.980><c> that</c><00:03:02.010><c> spawned</c><00:03:02.519><c> a</c>

00:03:02.780 --> 00:03:02.790 align:start position:0%
destroying an activity that spawned a
 

00:03:02.790 --> 00:03:04.580 align:start position:0%
destroying an activity that spawned a
bunch<00:03:02.819><c> of</c><00:03:03.239><c> threaded</c><00:03:03.629><c> work</c><00:03:03.840><c> I</c><00:03:03.989><c> mean</c><00:03:04.110><c> chances</c>

00:03:04.580 --> 00:03:04.590 align:start position:0%
bunch of threaded work I mean chances
 

00:03:04.590 --> 00:03:06.229 align:start position:0%
bunch of threaded work I mean chances
are<00:03:04.890><c> that</c><00:03:05.069><c> those</c><00:03:05.220><c> work</c><00:03:05.519><c> packets</c><00:03:06.000><c> would</c><00:03:06.090><c> have</c>

00:03:06.229 --> 00:03:06.239 align:start position:0%
are that those work packets would have
 

00:03:06.239 --> 00:03:08.030 align:start position:0%
are that those work packets would have
references<00:03:06.720><c> back</c><00:03:06.930><c> to</c><00:03:07.080><c> various</c><00:03:07.349><c> UI</c><00:03:07.530><c> objects</c>

00:03:08.030 --> 00:03:08.040 align:start position:0%
references back to various UI objects
 

00:03:08.040 --> 00:03:10.550 align:start position:0%
references back to various UI objects
that<00:03:08.250><c> don't</c><00:03:08.760><c> really</c><00:03:08.879><c> exist</c><00:03:09.239><c> anymore</c><00:03:09.510><c> and</c><00:03:10.170><c> the</c>

00:03:10.550 --> 00:03:10.560 align:start position:0%
that don't really exist anymore and the
 

00:03:10.560 --> 00:03:12.080 align:start position:0%
that don't really exist anymore and the
truth<00:03:10.769><c> is</c><00:03:10.920><c> that</c><00:03:10.950><c> the</c><00:03:11.190><c> Android</c><00:03:11.550><c> platform</c><00:03:11.970><c> is</c>

00:03:12.080 --> 00:03:12.090 align:start position:0%
truth is that the Android platform is
 

00:03:12.090 --> 00:03:14.839 align:start position:0%
truth is that the Android platform is
flooded<00:03:12.870><c> with</c><00:03:13.129><c> threads</c><00:03:14.129><c> if</c><00:03:14.340><c> you</c><00:03:14.640><c> need</c><00:03:14.819><c> a</c>

00:03:14.839 --> 00:03:14.849 align:start position:0%
flooded with threads if you need a
 

00:03:14.849 --> 00:03:16.880 align:start position:0%
flooded with threads if you need a
reminder<00:03:15.000><c> that</c><00:03:15.450><c> grab</c><00:03:15.810><c> a</c><00:03:15.840><c> cyst</c><00:03:16.200><c> rate</c><00:03:16.409><c> capture</c>

00:03:16.880 --> 00:03:16.890 align:start position:0%
reminder that grab a cyst rate capture
 

00:03:16.890 --> 00:03:18.500 align:start position:0%
reminder that grab a cyst rate capture
and<00:03:17.069><c> check</c><00:03:17.370><c> out</c><00:03:17.550><c> all</c><00:03:17.760><c> the</c><00:03:17.879><c> cool</c><00:03:18.030><c> stuff</c><00:03:18.269><c> that's</c>

00:03:18.500 --> 00:03:18.510 align:start position:0%
and check out all the cool stuff that's
 

00:03:18.510 --> 00:03:19.729 align:start position:0%
and check out all the cool stuff that's
going<00:03:18.720><c> on</c><00:03:18.840><c> underneath</c><00:03:19.140><c> the</c><00:03:19.230><c> hood</c><00:03:19.379><c> that</c><00:03:19.500><c> you</c>

00:03:19.729 --> 00:03:19.739 align:start position:0%
going on underneath the hood that you
 

00:03:19.739 --> 00:03:21.710 align:start position:0%
going on underneath the hood that you
never<00:03:20.069><c> really</c><00:03:20.310><c> knew</c><00:03:20.580><c> about</c><00:03:20.610><c> see</c><00:03:21.450><c> at</c><00:03:21.540><c> the</c><00:03:21.629><c> end</c>

00:03:21.710 --> 00:03:21.720 align:start position:0%
never really knew about see at the end
 

00:03:21.720 --> 00:03:23.479 align:start position:0%
never really knew about see at the end
of<00:03:21.840><c> the</c><00:03:21.900><c> day</c><00:03:22.019><c> threading</c><00:03:22.560><c> is</c><00:03:22.680><c> critical</c><00:03:23.310><c> to</c>

00:03:23.479 --> 00:03:23.489 align:start position:0%
of the day threading is critical to
 

00:03:23.489 --> 00:03:25.309 align:start position:0%
of the day threading is critical to
ensure<00:03:23.760><c> high</c><00:03:24.000><c> performance</c><00:03:24.569><c> of</c><00:03:24.690><c> your</c><00:03:24.870><c> Android</c>

00:03:25.309 --> 00:03:25.319 align:start position:0%
ensure high performance of your Android
 

00:03:25.319 --> 00:03:26.990 align:start position:0%
ensure high performance of your Android
app<00:03:25.530><c> but</c><00:03:25.950><c> there's</c><00:03:26.040><c> lots</c><00:03:26.340><c> of</c><00:03:26.489><c> other</c><00:03:26.700><c> problems</c>

00:03:26.990 --> 00:03:27.000 align:start position:0%
app but there's lots of other problems
 

00:03:27.000 --> 00:03:28.490 align:start position:0%
app but there's lots of other problems
that<00:03:27.239><c> you</c><00:03:27.390><c> have</c><00:03:27.659><c> to</c><00:03:27.690><c> worry</c><00:03:27.930><c> about</c><00:03:28.170><c> as</c><00:03:28.319><c> well</c>

00:03:28.490 --> 00:03:28.500 align:start position:0%
that you have to worry about as well
 

00:03:28.500 --> 00:03:29.809 align:start position:0%
that you have to worry about as well
which<00:03:28.980><c> is</c><00:03:29.129><c> why</c><00:03:29.250><c> you</c><00:03:29.370><c> should</c><00:03:29.519><c> check</c><00:03:29.640><c> out</c><00:03:29.760><c> the</c>

00:03:29.809 --> 00:03:29.819 align:start position:0%
which is why you should check out the
 

00:03:29.819 --> 00:03:31.130 align:start position:0%
which is why you should check out the
rest<00:03:29.879><c> of</c><00:03:30.060><c> the</c><00:03:30.120><c> Android</c><00:03:30.510><c> performance</c><00:03:30.750><c> patterns</c>

00:03:31.130 --> 00:03:31.140 align:start position:0%
rest of the Android performance patterns
 

00:03:31.140 --> 00:03:33.320 align:start position:0%
rest of the Android performance patterns
videos<00:03:31.440><c> and</c><00:03:31.890><c> also</c><00:03:32.340><c> don't</c><00:03:32.580><c> forget</c><00:03:32.700><c> to</c><00:03:32.940><c> join</c><00:03:33.120><c> our</c>

00:03:33.320 --> 00:03:33.330 align:start position:0%
videos and also don't forget to join our
 

00:03:33.330 --> 00:03:35.119 align:start position:0%
videos and also don't forget to join our
Google+<00:03:33.989><c> community</c><00:03:34.200><c> so</c><00:03:34.769><c> you</c><00:03:34.830><c> can</c><00:03:35.010><c> ask</c>

00:03:35.119 --> 00:03:35.129 align:start position:0%
Google+ community so you can ask
 

00:03:35.129 --> 00:03:37.699 align:start position:0%
Google+ community so you can ask
questions<00:03:35.250><c> when</c><00:03:36.120><c> you</c><00:03:36.299><c> run</c><00:03:36.540><c> into</c><00:03:36.780><c> problems</c><00:03:37.230><c> so</c>

00:03:37.699 --> 00:03:37.709 align:start position:0%
questions when you run into problems so
 

00:03:37.709 --> 00:03:39.500 align:start position:0%
questions when you run into problems so
keep<00:03:37.920><c> calm</c><00:03:38.099><c> profile</c><00:03:38.819><c> your</c><00:03:38.849><c> code</c><00:03:38.970><c> and</c><00:03:39.180><c> always</c>

00:03:39.500 --> 00:03:39.510 align:start position:0%
keep calm profile your code and always
 

00:03:39.510 --> 00:03:42.709 align:start position:0%
keep calm profile your code and always
remember<00:03:39.720><c> perf</c><00:03:40.080><c> matters</c>

