WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.020
We've so far talked about the IBM 9020 which is this big beast up here

00:00:04.020 --> 00:00:07.680
and that really had two functions, we've talked about flight data processing

00:00:07.680 --> 00:00:10.800
which is the information about what the aircraft intends to do

00:00:10.800 --> 00:00:13.840
but the other major facet of this is radar data processing

00:00:13.840 --> 00:00:18.480
so you can look at it from the point of view that the flight plan tells us what the aircraft intended to do

00:00:18.480 --> 00:00:20.900
the radar tells us what it's actually doing

00:00:20.900 --> 00:00:24.460
and they're not necessarily the same thing, there's all sorts of reasons why the flight

00:00:24.460 --> 00:00:26.560
doesn't actually follow the original flight plan

00:00:26.560 --> 00:00:30.700
it can be due to weather it can be due to congestion, there's all sorts of reasons.

00:00:33.600 --> 00:00:36.020
This was the first time we were able to bring the two together

00:00:36.020 --> 00:00:37.880
flight and radar data processing

00:00:37.880 --> 00:00:40.300
but that was all this did, it just did the processing

00:00:40.300 --> 00:00:42.480
somehow we have to display all of that lot

00:00:42.480 --> 00:00:44.140
so we'll now toddle over here

00:00:44.520 --> 00:00:48.680
and this is an early example of a radar data processing system.

00:00:48.680 --> 00:00:53.620
It's called the process radar display system, and essentially what happened was

00:00:53.620 --> 00:00:58.860
the radar information which is a pure radar plot of this particular aircraft

00:00:58.860 --> 00:01:01.200
with no other real information associated with it

00:01:01.200 --> 00:01:04.540
woud then be routed to this equipment, which would then

00:01:04.540 --> 00:01:09.160
be responsible for determining which controller needed to see it

00:01:09.160 --> 00:01:10.880
so effectively doing the routing

00:01:10.880 --> 00:01:14.900
but then also, down the bottom here, one of the worlds earliest graphics cards!

00:01:14.900 --> 00:01:20.320
the pdp1134, which was just simply there to take the radar data

00:01:20.320 --> 00:01:23.860
and actually work out how to paint that onto the radar screen

00:01:23.860 --> 00:01:27.060
vector graphics drawn rather then raster drawn

00:01:27.060 --> 00:01:30.840
and a very early example of a graphics card

00:01:30.840 --> 00:01:34.240
and that in turn, down a jolly great long cable

00:01:34.240 --> 00:01:36.440
would feed to this kind of display here...

00:01:36.440 --> 00:01:40.160
this is actually a later display but it's the same type of display

00:01:40.320 --> 00:01:47.320
all that's in here is really the technology that is required to take the graphics generated posistional data

00:01:47.320 --> 00:01:48.980
and actually paint it onto the screen.

00:01:49.500 --> 00:01:52.160
These screens were outrageously expensive,

00:01:52.160 --> 00:01:55.180
I think that they were in the tens of thousands of pounds back in the nineteen seventies

00:01:55.180 --> 00:01:57.640
and they were also rather easy to break aswell

00:01:57.640 --> 00:01:59.420
so we were always very very careful with these.

00:01:59.540 --> 00:02:02.400
These are all different radars that can feed in

00:02:02.400 --> 00:02:04.660
so you've actually got a switch up here that selects all the different radars

00:02:04.660 --> 00:02:08.060
and because this could be running what is called bypass mode

00:02:08.060 --> 00:02:12.200
and this is how he used to do it in the old days, the control would select whichever radar gave the best

00:02:12.200 --> 00:02:14.880
image for the area that he was trying to work on

00:02:14.880 --> 00:02:17.020
and those are the various en-route radars

00:02:17.020 --> 00:02:20.760
so you'd have at least two of these screens, sometimes more of them, for each sector

00:02:20.920 --> 00:02:22.940
so this is a sector display.

00:02:22.960 --> 00:02:24.560
How big is a sector then?

00:02:24.560 --> 00:02:27.220
a sector varies in size depending on what's going on

00:02:27.220 --> 00:02:30.460
there's some sectors like for example the london TMA, terminal moving area

00:02:30.460 --> 00:02:31.960
which is really quite small

00:02:31.960 --> 00:02:34.140
because there's an aweful lot of stuff going on

00:02:34.140 --> 00:02:37.240
as you get further and further afield the sectors get larger and larger.

00:02:37.240 --> 00:02:42.020
The other thing that can happen is the sectors can change shape between different times of day and so on

00:02:42.020 --> 00:02:46.680
so for example at night there is much less air traffic and therfore controlling it is much easier

00:02:46.680 --> 00:02:51.100
so you can make the sectors bigger, and then as the traffic starts building up in the early morning

00:02:51.100 --> 00:02:53.160
as the flights start coming in from across the states

00:02:53.160 --> 00:02:54.860
you make the sectors back smaller again

00:02:54.860 --> 00:02:59.460
and that's something else we were able to do as a result of introducing computers into it,

00:02:59.460 --> 00:03:04.860
this idea of dynamic allocation of sector size, which before then had been really quite difficult

00:03:04.860 --> 00:03:09.860
you might have heard of a few occasions when there's been a few hiccups with the air traffic control centers

00:03:09.860 --> 00:03:14.120
and usually it's to do with changing the size of these sectors

00:03:14.120 --> 00:03:17.960
but again, the code has been in there for a long time now

00:03:17.960 --> 00:03:19.700
I think we've got pretty well all the bugs out of it.

00:03:19.700 --> 00:03:24.520
The controller would use this roller ball to, for example, highlight a particular aircraft

00:03:24.520 --> 00:03:30.300
and draw a vector to indicate how far away he would be in five minutes time or something like that

00:03:30.300 --> 00:03:34.580
this predates the mouse really, but in fact, in some respects it's probably a better system

00:03:34.580 --> 00:03:39.040
they are still using roller ball technology for radar display systems even to this day

00:03:39.040 --> 00:03:42.040
because, it's in one place, it never moves

00:03:42.040 --> 00:03:44.760
I was up at prestwick control center just about a year ago

00:03:44.760 --> 00:03:46.580
and watched them using this to work out

00:03:46.580 --> 00:03:50.180
so they've got a radar paint showing that the aircraft is such and such

00:03:50.180 --> 00:03:53.880
and we know what speed he's going at, so we can then draw a vector which says

00:03:53.880 --> 00:03:55.220
that's where he's going to be in five minutes time

00:03:55.220 --> 00:04:00.040
which allows him to see if he's got any issues with collision avoidance or anything like that

00:04:00.280 --> 00:04:07.280
and also just to get the timing sorted out, the controller is trying to vector this aircraft onto the instrument landing system

00:04:07.280 --> 00:04:11.340
so it's a useful idea to say, it'll be at such and such place in five minutes time

00:04:11.340 --> 00:04:12.840
or two minutes time or whatever.

00:04:12.840 --> 00:04:19.400
So, this is a very early example of the radar display using the data from IBM 9020

00:04:19.400 --> 00:04:22.480
that sounds ever so easy, there was actually lots and lots of steps along the way

00:04:22.480 --> 00:04:28.140
in fact it took many years before the radar data was eally being processed by the IBM 9020

00:04:28.180 --> 00:04:31.700
and displayed in native form on this type of display,

00:04:31.700 --> 00:04:37.080
there was also bypass systems because, well like all of these systems we don't want it failing

00:04:37.080 --> 00:04:42.260
so there's always standby systems and standby systems to the standby systems and so on

00:04:42.260 --> 00:04:46.380
and a lot of that had to be implemented for the radar side of things as well.

00:04:46.380 --> 00:04:50.440
What's the sort of refresh on something like that, how often does it refresh?

00:04:50.440 --> 00:04:54.180
Well it's effectively being refreshed all the time because it's a vector graphics drawn system

00:04:54.180 --> 00:04:58.880
but the radars typically rotate one rotation every four seconds

00:04:58.880 --> 00:05:02.640
so you're only going to get an update in terms of the radar data about every four seconds

00:05:02.640 --> 00:05:07.600
and what you actually see is, like a little, you see a blob where the aircraft is

00:05:07.600 --> 00:05:12.740
and coming off that, there's a line, and then a box and in that box you've got information about the aircraft

00:05:12.740 --> 00:05:19.960
its altitude, the aircraft call sign, its type, where it's going from, where it's going to, whether it's accending or decending

00:05:19.960 --> 00:05:23.120
if you've looked at FlightRadar24 they do a very similar thing

00:05:23.120 --> 00:05:24.640
it's actually using a thing called ADSB

00:05:24.640 --> 00:05:28.660
which is a broadcast posistional information system from commercial aircraft

00:05:28.660 --> 00:05:33.000
and effectively plotting that using servers and then you can pick that up on the internet

00:05:33.000 --> 00:05:39.220
and what they've done is they've more or less followed the same kind of radar display appearance

00:05:39.220 --> 00:05:41.000
as you would have at a control center.

00:05:41.000 --> 00:05:46.020
Going back to our early graphics card, how many of those would there be in an air traffic control center?

00:05:46.020 --> 00:05:50.240
I think it was something in the order of one hundred so it was quite a big investment and a lot of real estate as well

00:05:51.120 --> 00:05:54.140
Well how much were those sorts of things costing them?

00:05:54.140 --> 00:05:59.880
I don't know to be honest, I think they were probably in the, quite a few thousand pounds each, type of category

00:05:59.880 --> 00:06:04.180
so there would have been large chunks of a million pounds worth of equipment there

00:06:04.180 --> 00:06:07.900
but back in those days hardware was very expensive.

00:06:07.900 --> 00:06:09.260
Safety first as well.

00:06:09.260 --> 00:06:12.820
Ah yes, the whole idea was that everything was resilliant, so

00:06:12.820 --> 00:06:15.300
and of course this wasn't the only place we were using computers,

00:06:15.300 --> 00:06:20.140
computers were coming into air traffic control in just about every sort of capacity.

00:06:20.580 --> 00:06:22.980
This is the kind of radar display that we have today

00:06:22.980 --> 00:06:27.340
and essentially all the hardware that is required, all the computing and processing that's required

00:06:27.340 --> 00:06:30.300
for this sector, is actually built into the display

00:06:30.300 --> 00:06:34.280
now everything is connected together with fibre optic, networking isn't a problem anymore

00:06:34.280 --> 00:06:38.000
so we can actually afford to have the processing out in the display

00:06:38.000 --> 00:06:42.480
other than that, it's more or less the same type of display, it's a vector graphics display

00:06:42.480 --> 00:06:44.980
because that gives you a better quality of image

00:06:44.980 --> 00:06:48.340
and the screens are still outragously expensive.

00:06:48.340 --> 00:06:51.900
This is the sort of thing that they'll be sitting in front of at swanwick

00:06:51.900 --> 00:06:57.260
there's also a brand new control center up at prestwick as well which does from 55 degrees north

00:06:57.260 --> 00:06:58.940
broadly speaking the scottish border.

00:06:58.940 --> 00:07:02.860
What's interesting to note is, as another exaple of resilliance, is that the

00:07:02.860 --> 00:07:09.000
prestwick, with a certain amount of hassle, could do all the work that is being done at swanick

00:07:09.000 --> 00:07:11.440
and swanick could do all the work that is being done at prestwick.

00:07:11.440 --> 00:07:17.560
It would take a bit of doing, but if one or other of the control centers was unable to function,

00:07:17.560 --> 00:07:21.620
then the whole of the air traffic in the UK could be run from one or the other.

00:07:25.180 --> 00:07:27.180
One of the things that I decided I would try and do

00:07:27.180 --> 00:07:29.340
was to write a game where the computer played Monopoly

00:07:29.480 --> 00:07:31.960
And you can see here the high-speed

00:07:31.960 --> 00:07:34.460
these printers would run at 600 lines per minute.

00:07:34.460 --> 00:07:36.460
I wrote this whole thing in assembler,

00:07:36.460 --> 00:07:37.620
the computer would make a move

00:07:37.620 --> 00:07:39.800
and it would then print the monopoly board

00:07:39.800 --> 00:07:41.800
so this thing was throwing up pages like mad.

