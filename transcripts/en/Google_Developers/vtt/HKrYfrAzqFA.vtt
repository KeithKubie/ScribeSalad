WEBVTT
Kind: captions
Language: en

00:00:00.920 --> 00:00:03.896
ROB DODSON: So this is going
to be a higher level talk.

00:00:03.896 --> 00:00:05.770
I'm not going to go into
the specifics of how

00:00:05.770 --> 00:00:07.370
Polymer itself works.

00:00:07.370 --> 00:00:09.480
I think Eric and
Matt have already

00:00:09.480 --> 00:00:12.539
done a really awesome
job covering that.

00:00:12.539 --> 00:00:14.080
Instead, what I want
to do, is I want

00:00:14.080 --> 00:00:17.550
to cover some of the elements
sets that we're shipping today.

00:00:17.550 --> 00:00:20.250
And I'm going to give you enough
information so that all of you

00:00:20.250 --> 00:00:21.410
can get up and running.

00:00:21.410 --> 00:00:24.850
You can start playing with these
things in your own projects.

00:00:24.850 --> 00:00:27.100
For those of you don't know
me, my name is Rob Dodson.

00:00:27.100 --> 00:00:29.440
I'm a developer
advocate here at Google.

00:00:29.440 --> 00:00:31.770
I work on the open web
platform, but I primarily

00:00:31.770 --> 00:00:34.520
work on the Polymer project.

00:00:34.520 --> 00:00:38.060
And I am especially excited to
be working on Polymer today,

00:00:38.060 --> 00:00:41.630
because I really think it's
going to fundamentally change

00:00:41.630 --> 00:00:45.740
the way that we build and
design our web applications.

00:00:45.740 --> 00:00:48.870
Now, right now we're in
a very interesting moment

00:00:48.870 --> 00:00:52.120
in web development, where
we're moving from the desktop

00:00:52.120 --> 00:00:56.170
over to this new,
multi-device landscape.

00:00:56.170 --> 00:01:01.030
And with that, comes a lot of
challenges and expectations,

00:01:01.030 --> 00:01:03.300
where the things
that we build are

00:01:03.300 --> 00:01:05.615
expected to be very app-like.

00:01:08.200 --> 00:01:12.104
But HTML itself
doesn't always give us

00:01:12.104 --> 00:01:13.770
the best tools for
completing that task.

00:01:13.770 --> 00:01:15.880
It wasn't designed
to be app-like.

00:01:15.880 --> 00:01:19.530
It was designed for more of
a document-centric model.

00:01:19.530 --> 00:01:22.190
So the HTML elements that
you have to work with today

00:01:22.190 --> 00:01:26.130
are for things like creating
headers, bulleted lists,

00:01:26.130 --> 00:01:28.327
paragraphs, things like that.

00:01:28.327 --> 00:01:30.660
And don't get me wrong, I'm
not trying to knock on HTML.

00:01:30.660 --> 00:01:31.590
I think it's awesome.

00:01:31.590 --> 00:01:34.640
I think it is the
greatest publishing

00:01:34.640 --> 00:01:37.720
platform in the history
of the human race, OK.

00:01:37.720 --> 00:01:39.867
So I think the web is
amazing, but I just

00:01:39.867 --> 00:01:41.200
think it has a lot of potential.

00:01:41.200 --> 00:01:43.110
It's got a lot of
room to grow into.

00:01:43.110 --> 00:01:47.900
And if we had the opportunity
to redesign HTML today, knowing

00:01:47.900 --> 00:01:51.240
what we know about the whole
multi-device landscape,

00:01:51.240 --> 00:01:53.870
I think it would probably
look a bit more like this.

00:01:53.870 --> 00:01:56.490
We'd probably have some
more elements like this

00:01:56.490 --> 00:01:59.110
that we could use for
transitioning from one state

00:01:59.110 --> 00:02:00.020
to another.

00:02:00.020 --> 00:02:01.520
Maybe having nice
responsive drawers

00:02:01.520 --> 00:02:05.771
so we could slide
on and off screen.

00:02:05.771 --> 00:02:07.270
And this is really
what we're trying

00:02:07.270 --> 00:02:09.220
to accomplish with Polymer.

00:02:09.220 --> 00:02:12.450
We want to give developers the
tools so that they can actually

00:02:12.450 --> 00:02:14.850
extend HTML, and
then together we

00:02:14.850 --> 00:02:17.140
can build a new
ecosystem of elements

00:02:17.140 --> 00:02:20.430
which are responsive by default,
and performant, by default,

00:02:20.430 --> 00:02:21.210
and accessible.

00:02:21.210 --> 00:02:25.675
And do all of these app-like
things that we want.

00:02:25.675 --> 00:02:27.800
So that's what we're going
to be touching on today.

00:02:27.800 --> 00:02:29.466
We're going to look
at two element sets.

00:02:29.466 --> 00:02:31.770
We're going to start by
looking at the core elements.

00:02:31.770 --> 00:02:33.300
These are released now.

00:02:33.300 --> 00:02:36.910
They are very general
purpose, sort of utilitarian.

00:02:36.910 --> 00:02:38.290
They're not highly stylized.

00:02:38.290 --> 00:02:41.730
They're meant to be kind of like
bedrock that you build upon.

00:02:41.730 --> 00:02:43.710
And we split these
into two categories.

00:02:43.710 --> 00:02:46.414
We've got visual elements
and non-visual elements.

00:02:46.414 --> 00:02:47.830
The visual elements
are for things

00:02:47.830 --> 00:02:50.860
like creating toolbars,
header panels, menus,

00:02:50.860 --> 00:02:52.370
and things like that.

00:02:52.370 --> 00:02:54.050
Non-visual elements
are for doing things

00:02:54.050 --> 00:02:56.260
like working with
Ajax or local storage,

00:02:56.260 --> 00:02:57.712
or even the file system.

00:02:57.712 --> 00:02:59.920
And I know it might seem
weird to think about working

00:02:59.920 --> 00:03:02.850
with Ajax in the file system
using an HTML element,

00:03:02.850 --> 00:03:05.670
but I promise you, when you
start using these elements,

00:03:05.670 --> 00:03:07.370
and you start composing
them together,

00:03:07.370 --> 00:03:08.870
and binding things
together, you're

00:03:08.870 --> 00:03:11.640
going to find that this is
an amazing workflow that you

00:03:11.640 --> 00:03:13.124
really enjoy.

00:03:13.124 --> 00:03:14.290
So that's the core elements.

00:03:14.290 --> 00:03:17.050
We're also going to be touching
on the paper elements, which

00:03:17.050 --> 00:03:20.160
I think you've probably heard
a lot about at this point.

00:03:20.160 --> 00:03:22.780
The paper elements are
going to be more stylized.

00:03:22.780 --> 00:03:25.150
They're part of that
material design system,

00:03:25.150 --> 00:03:27.980
and they're really designed to
push the envelope of what we've

00:03:27.980 --> 00:03:32.740
come to expect in the browser
in terms of animation, lighting,

00:03:32.740 --> 00:03:35.121
shadow, and spatial
relationships.

00:03:35.121 --> 00:03:37.120
So those are the things
we're going to touch on.

00:03:37.120 --> 00:03:38.450
These are the major
categories that we're

00:03:38.450 --> 00:03:39.670
going to try and cover.

00:03:39.670 --> 00:03:41.750
We're not going to
cover everything,

00:03:41.750 --> 00:03:43.810
because there's just
way too many elements

00:03:43.810 --> 00:03:45.322
to touch upon in one talk.

00:03:45.322 --> 00:03:47.780
But we are going to give you
enough information so that you

00:03:47.780 --> 00:03:50.730
can get rolling and
get up and running.

00:03:50.730 --> 00:03:52.840
The first place I want
to start is with layout.

00:03:55.740 --> 00:03:59.390
Now this is where most of us
begin our applications anyway.

00:03:59.390 --> 00:04:02.120
I'm just trying to block
some stuff out on the screen,

00:04:02.120 --> 00:04:04.950
figure out where it's
going to live on the page.

00:04:04.950 --> 00:04:08.360
And a very common starting
point is with navigation.

00:04:08.360 --> 00:04:10.200
And so to aid in
this process we've

00:04:10.200 --> 00:04:12.630
created an element
called core-toolbar,

00:04:12.630 --> 00:04:15.780
which is a very basic
HTML element for holding

00:04:15.780 --> 00:04:21.284
controls such as buttons
or tabs or title.

00:04:21.284 --> 00:04:23.700
I think this is a great place
to start with web components

00:04:23.700 --> 00:04:25.940
if you're just getting up
and running using Polymer,

00:04:25.940 --> 00:04:28.730
because it's a very
simple element.

00:04:28.730 --> 00:04:31.900
All it does is it just lays out
its children in space, right.

00:04:31.900 --> 00:04:35.270
It doesn't do
anything too crazy.

00:04:35.270 --> 00:04:36.890
And as Matt spoke
about before, if you

00:04:36.890 --> 00:04:40.440
want to get started
using a custom element,

00:04:40.440 --> 00:04:43.440
all you've got to do
is import it, and then

00:04:43.440 --> 00:04:46.210
start working with the tag,
just like it's any other HTML

00:04:46.210 --> 00:04:47.580
element.

00:04:47.580 --> 00:04:49.030
So I'll run that by you again.

00:04:49.030 --> 00:04:51.488
If you want to use any Polymer
element, any custom element,

00:04:51.488 --> 00:04:54.755
you first need to
import its definition.

00:04:54.755 --> 00:04:56.630
And then you just start
working with it, just

00:04:56.630 --> 00:04:59.487
like any other HTML tag.

00:04:59.487 --> 00:05:01.070
What we've done here
is we've actually

00:05:01.070 --> 00:05:03.300
thrown a div inside
of our toolbar,

00:05:03.300 --> 00:05:05.410
to give us a little
title up there.

00:05:05.410 --> 00:05:07.814
And because custom elements
are all about composability,

00:05:07.814 --> 00:05:09.230
we can throw an
additional assets.

00:05:09.230 --> 00:05:11.314
We can throw in an
icon button, which

00:05:11.314 --> 00:05:13.480
will give us little hamburger
menu we can play with.

00:05:16.070 --> 00:05:18.170
We can also style this thing.

00:05:18.170 --> 00:05:21.220
We can throw a tall class on it.

00:05:21.220 --> 00:05:24.350
And the toolbar knows that it
should expand once that class

00:05:24.350 --> 00:05:25.860
is on there, and
we can do something

00:05:25.860 --> 00:05:29.540
like include an image
background at this point.

00:05:29.540 --> 00:05:31.876
Now what's really awesome
is that to get all of this

00:05:31.876 --> 00:05:33.500
that you're seeing
on screen right now,

00:05:33.500 --> 00:05:37.310
I haven't had to go in
and write a bunch of CSS.

00:05:37.310 --> 00:05:39.070
It's just baked
into the element.

00:05:39.070 --> 00:05:41.190
And as I'm just composing
these things together,

00:05:41.190 --> 00:05:42.190
it lays out properly.

00:05:45.330 --> 00:05:48.570
Now a very common pattern is to
take a core-toolbar and nest it

00:05:48.570 --> 00:05:51.540
inside of another element
called a core-header-panel

00:05:51.540 --> 00:05:54.780
And a core-header-panel is a
really simple container, which

00:05:54.780 --> 00:05:57.950
just has a toolbar
area up at the top,

00:05:57.950 --> 00:06:02.600
and then a main content
section down below.

00:06:02.600 --> 00:06:04.270
And the core-header-panel's
sole job

00:06:04.270 --> 00:06:07.064
is to manage the
scrolling of the page.

00:06:07.064 --> 00:06:09.230
So as you see here, when
the user starts interacting

00:06:09.230 --> 00:06:12.950
with our device, it's going to
keep our core-toolbar pinned

00:06:12.950 --> 00:06:15.310
to the top of the document,
and allow the content

00:06:15.310 --> 00:06:17.060
to scroll underneath it.

00:06:17.060 --> 00:06:20.800
So that's the default mode
for core-header-panel.

00:06:20.800 --> 00:06:22.760
Now, because custom
elements are configurable,

00:06:22.760 --> 00:06:23.760
we can change that mode.

00:06:23.760 --> 00:06:24.869
We can set it to scroll.

00:06:24.869 --> 00:06:27.285
And what that's going to do,
is going to take our toolbar,

00:06:27.285 --> 00:06:29.060
and it's going to
fuse it with the rest

00:06:29.060 --> 00:06:31.094
of the content on the page.

00:06:31.094 --> 00:06:33.010
So as you see, when the
user is scrolling now,

00:06:33.010 --> 00:06:35.520
it's actually going to slide
the toolbar off the screen,

00:06:35.520 --> 00:06:37.686
and it's going to move with
the rest of the content.

00:06:39.720 --> 00:06:42.260
And if we want to kind of
riff on that taller toolbar

00:06:42.260 --> 00:06:44.157
that we had before,
we have another mode

00:06:44.157 --> 00:06:45.990
which is waterfall tall,
which will actually

00:06:45.990 --> 00:06:49.290
do this cool sort of
condensing animation

00:06:49.290 --> 00:06:52.090
as it collapses the toolbar
down and the user scrolls around

00:06:52.090 --> 00:06:53.770
on screen.

00:06:53.770 --> 00:06:56.470
And again, I'm not writing a
bunch CSS to get these effects.

00:06:56.470 --> 00:06:57.600
I'm not running a
bunch of JavaScript

00:06:57.600 --> 00:06:58.933
to make all these things happen.

00:06:58.933 --> 00:07:01.390
I'm getting these effects
by composing these elements

00:07:01.390 --> 00:07:02.050
together.

00:07:02.050 --> 00:07:04.190
They're smarter, more
powerful, HTML elements

00:07:04.190 --> 00:07:05.540
that know how to work together.

00:07:09.470 --> 00:07:13.030
Now, an interesting variation
of the core-header-panel is

00:07:13.030 --> 00:07:16.060
another element called a
core-scroll-header-panel.

00:07:16.060 --> 00:07:18.660
And it basically has all
the same capabilities

00:07:18.660 --> 00:07:21.191
as the header-panel, but it
adds this really neat condenses

00:07:21.191 --> 00:07:21.690
attribute.

00:07:21.690 --> 00:07:24.880
And what that's going to do
is as the user is scrolling,

00:07:24.880 --> 00:07:27.090
it's actually going to
do this cross-fade effect

00:07:27.090 --> 00:07:29.450
between our background
image and our toolbar.

00:07:29.450 --> 00:07:31.540
And as they start to
come back up the page,

00:07:31.540 --> 00:07:34.550
it'll slide the toolbar back in
until they reach the top where

00:07:34.550 --> 00:07:37.140
it will do a cross-fade again.

00:07:37.140 --> 00:07:40.350
Again, this is a really
sophisticated effect.

00:07:40.350 --> 00:07:43.730
This is the kind of app-like
behavior that I want to have,

00:07:43.730 --> 00:07:46.415
but I'm not having to write a
mountain of CSS and JavaScript

00:07:46.415 --> 00:07:47.290
to get to this point.

00:07:47.290 --> 00:07:49.081
I'm just composing
these elements together.

00:07:52.652 --> 00:07:55.110
All right, so we talked a bit
about sort of general layout.

00:07:55.110 --> 00:07:57.810
Because the
multi-device web is sort

00:07:57.810 --> 00:07:59.900
of the major theme
of this event,

00:07:59.900 --> 00:08:01.950
we've got to talk about
responsive layout.

00:08:01.950 --> 00:08:05.406
And we've created some elements
to help out with this as well.

00:08:05.406 --> 00:08:06.780
So we've got a
core-drawer-panel,

00:08:06.780 --> 00:08:09.240
which is a responsive
container which will lay out

00:08:09.240 --> 00:08:11.540
its children in a sidebar,
either on the left

00:08:11.540 --> 00:08:15.470
or the right, and in
a main content area.

00:08:15.470 --> 00:08:17.430
So if I have a child of
the core-drawer-panel,

00:08:17.430 --> 00:08:19.570
and I give it this
drawer attribute,

00:08:19.570 --> 00:08:21.620
the content that I place
inside of that drawer

00:08:21.620 --> 00:08:24.580
is going to show in my sidebar.

00:08:24.580 --> 00:08:27.981
And if I place content in an
element with a main attribute,

00:08:27.981 --> 00:08:30.480
then all that content is going
to display in my main content

00:08:30.480 --> 00:08:32.397
area.

00:08:32.397 --> 00:08:34.480
Now what's really cool
about the core-drawer-panel

00:08:34.480 --> 00:08:37.330
is that it knows,
on a smaller screen,

00:08:37.330 --> 00:08:40.299
that it needs to collapse
down and move that sidebar out

00:08:40.299 --> 00:08:40.990
of the way.

00:08:40.990 --> 00:08:44.140
So we're only going to focus
on the main content area

00:08:44.140 --> 00:08:46.000
when we're on a smaller device.

00:08:46.000 --> 00:08:49.280
But it's very easy to rig it up
so that it slides that drawer

00:08:49.280 --> 00:08:51.154
back out, and the
user can then start

00:08:51.154 --> 00:08:52.945
interacting with those
additional controls.

00:08:59.171 --> 00:09:00.670
Now what I've shown
up to this point

00:09:00.670 --> 00:09:04.420
has been very general
layout elements.

00:09:04.420 --> 00:09:07.045
They're sort of
one size fits all.

00:09:07.045 --> 00:09:08.420
But there are
going to come times

00:09:08.420 --> 00:09:10.650
when you need more
granular control

00:09:10.650 --> 00:09:13.350
over the layout in
your application.

00:09:13.350 --> 00:09:15.730
And so, to help
out with that we've

00:09:15.730 --> 00:09:19.180
created what we call layout
attributes, which basically add

00:09:19.180 --> 00:09:23.320
declarative support for CSS
flexbox to your application.

00:09:23.320 --> 00:09:25.150
And the way we do this
is, under the hood,

00:09:25.150 --> 00:09:28.480
when you import Polymer, we
also include an additional style

00:09:28.480 --> 00:09:32.830
sheet that has these flexbox CSS
selectors kind of ready to go.

00:09:32.830 --> 00:09:34.830
And that means that you
can use these attributes

00:09:34.830 --> 00:09:36.870
inside of a Polymer
element definition,

00:09:36.870 --> 00:09:39.190
or just outside
anywhere in your page.

00:09:39.190 --> 00:09:41.240
Any page that's
using Polymer, you

00:09:41.240 --> 00:09:42.611
can use these layout attributes.

00:09:42.611 --> 00:09:44.360
And let me show you
some examples of that.

00:09:44.360 --> 00:09:47.510
So what I've got here is
just some divs, right?

00:09:47.510 --> 00:09:49.540
I'm not inside of a
Polymer element definition.

00:09:49.540 --> 00:09:50.748
I'm not doing anything crazy.

00:09:50.748 --> 00:09:52.620
I've just got a
collection of divs.

00:09:52.620 --> 00:09:55.510
And on that parent
div, I've told it

00:09:55.510 --> 00:09:58.500
that I would like it to lay
out its children horizontally

00:09:58.500 --> 00:10:00.830
using flexbox.

00:10:00.830 --> 00:10:03.880
If I want, I can specify
that any of those children

00:10:03.880 --> 00:10:08.071
should flex to try and take
up as much space as it can.

00:10:08.071 --> 00:10:10.070
And this also works in
the vertical orientation.

00:10:10.070 --> 00:10:12.420
I can just change that direction
attribute from horizontal

00:10:12.420 --> 00:10:13.810
to vertical, and
now everything's

00:10:13.810 --> 00:10:15.610
laying out top to bottom.

00:10:15.610 --> 00:10:20.220
And again, flexing works in
this orientation as well.

00:10:20.220 --> 00:10:22.390
We've also added
support for flex ratios.

00:10:22.390 --> 00:10:24.580
So if you want to specify
that a child should

00:10:24.580 --> 00:10:27.460
be three times the size
of one of its siblings,

00:10:27.460 --> 00:10:28.460
you can do that as well.

00:10:31.409 --> 00:10:32.950
And because we're
working in flexbox,

00:10:32.950 --> 00:10:34.610
we've always got
two axes that we've

00:10:34.610 --> 00:10:36.160
got to kind of keep in mind.

00:10:36.160 --> 00:10:38.200
We've got our main
axis, which flows

00:10:38.200 --> 00:10:40.440
in the direction of
our primary layout.

00:10:40.440 --> 00:10:42.630
Since we are doing
layout horizontal,

00:10:42.630 --> 00:10:45.110
that main axis
flows left to right.

00:10:45.110 --> 00:10:47.840
So if I want to center justify
something in that main axis,

00:10:47.840 --> 00:10:50.320
I can pass in the center
justified attribute,

00:10:50.320 --> 00:10:52.490
or start justify to have
it at the beginning,

00:10:52.490 --> 00:10:55.840
or end justify to
have it at the end.

00:10:55.840 --> 00:10:57.640
I've also got a cross
axis, which is always

00:10:57.640 --> 00:11:00.610
going to be flowing
perpendicular to my main axis.

00:11:00.610 --> 00:11:03.430
And if I'd like to center
a child in the cross axis,

00:11:03.430 --> 00:11:06.440
I just pass a center attribute.

00:11:06.440 --> 00:11:08.990
Now, if I combine these
attributes, center justified

00:11:08.990 --> 00:11:13.610
and center, I get the
holy grail of layout,

00:11:13.610 --> 00:11:16.410
which is vertical and
horizontal centering.

00:11:16.410 --> 00:11:19.320
And I don't have to write
any CSS to do this, OK.

00:11:19.320 --> 00:11:22.898
I just get that from using
attributes, which is awesome.

00:11:22.898 --> 00:11:24.770
[APPLAUSE]

00:11:29.890 --> 00:11:34.387
In my opinion this is one of
the coolest things in the world.

00:11:34.387 --> 00:11:35.970
It just happens to
be part of Polymer,

00:11:35.970 --> 00:11:38.320
but I don't want
to go back to doing

00:11:38.320 --> 00:11:40.030
web design without
these attributes,

00:11:40.030 --> 00:11:42.080
because they make my
life so much easier.

00:11:42.080 --> 00:11:45.670
So I think you guys are
really going to enjoy that.

00:11:45.670 --> 00:11:47.170
OK, we've talked a
lot about layout.

00:11:47.170 --> 00:11:47.630
Let's move on.

00:11:47.630 --> 00:11:49.421
Let's talk about the
material design stuff,

00:11:49.421 --> 00:11:50.790
because it's pretty exciting.

00:11:50.790 --> 00:11:53.205
It's a big part of the keynote.

00:11:53.205 --> 00:11:55.830
What we've been doing is, we've
been creating material elements

00:11:55.830 --> 00:11:58.790
which are really aimed at
pushing the boundaries of what

00:11:58.790 --> 00:12:02.480
we expect in terms of
animation, lighting, and spatial

00:12:02.480 --> 00:12:05.114
relationships in the browser.

00:12:05.114 --> 00:12:07.280
And so that means taking
things that we kind of take

00:12:07.280 --> 00:12:10.370
for granted on the web,
like your typical checkbox,

00:12:10.370 --> 00:12:13.260
and re-imagining it for 2014.

00:12:13.260 --> 00:12:16.354
So this is a paper-checkbox
element, and as you see here,

00:12:16.354 --> 00:12:18.020
it's got some really
stand out features.

00:12:18.020 --> 00:12:20.040
It's got these really
fluid animations,

00:12:20.040 --> 00:12:22.600
and it's also got these
cool reactive ink effects

00:12:22.600 --> 00:12:25.200
anytime a user clicks on
something with their mouse,

00:12:25.200 --> 00:12:27.700
or taps on it on a touch device.

00:12:27.700 --> 00:12:30.550
So it's really good, because
the user on a touch device

00:12:30.550 --> 00:12:33.250
is going to get some really
specific feedback about what

00:12:33.250 --> 00:12:34.677
they've just interacted with.

00:12:37.329 --> 00:12:39.620
And these elements are meant
to be drop-in replacements

00:12:39.620 --> 00:12:41.486
for a lot of the tags
that we use every day.

00:12:41.486 --> 00:12:42.610
So this is another example.

00:12:42.610 --> 00:12:43.986
This is paper-toggle-button.

00:12:43.986 --> 00:12:45.360
And as you can
see, it's about as

00:12:45.360 --> 00:12:48.520
straightforward to use as
anything you could imagine.

00:12:48.520 --> 00:12:50.920
It's just simple HTML,
and that's by design.

00:12:50.920 --> 00:12:52.710
We want it to be really
easy for you guys

00:12:52.710 --> 00:12:54.780
to bring these things
into your projects,

00:12:54.780 --> 00:12:56.341
and just start
working with them.

00:12:59.170 --> 00:13:01.380
Now text input, probably
only one of the most

00:13:01.380 --> 00:13:03.390
commonly used
controls on the web,

00:13:03.390 --> 00:13:04.860
and it's gotten a
lot of attention

00:13:04.860 --> 00:13:06.980
in the material design system.

00:13:06.980 --> 00:13:09.450
So this is a paper input
element, and as you see here

00:13:09.450 --> 00:13:11.491
there's a lot of really
interesting effects going

00:13:11.491 --> 00:13:12.800
on as were interacting with it.

00:13:12.800 --> 00:13:14.830
We've got a floating
label attribute here,

00:13:14.830 --> 00:13:17.890
and what that does is it
actually jumps our label up

00:13:17.890 --> 00:13:20.940
above the text input area
as the user is typing.

00:13:20.940 --> 00:13:23.290
Which is really good on a
space-constrained device

00:13:23.290 --> 00:13:25.360
like a mobile phone when you
don't always have a great place

00:13:25.360 --> 00:13:27.109
to put the label, but
you do want the user

00:13:27.109 --> 00:13:29.340
to still know what
they're working with.

00:13:29.340 --> 00:13:31.110
And I've also got some other
interesting attributes here.

00:13:31.110 --> 00:13:32.651
We've got a validate
attribute, so we

00:13:32.651 --> 00:13:34.510
can validate what
the user is typing

00:13:34.510 --> 00:13:37.440
using regular expression,
and we get this error state

00:13:37.440 --> 00:13:38.540
basically for free.

00:13:38.540 --> 00:13:40.200
That red bar and
the icon, that's

00:13:40.200 --> 00:13:41.340
all built into the element.

00:13:41.340 --> 00:13:43.548
And we can just kind of
figure what the error message

00:13:43.548 --> 00:13:45.160
is by passing an
error attribute.

00:13:49.029 --> 00:13:51.320
One more element I want to
touch upon real quick-- this

00:13:51.320 --> 00:13:53.260
is paper-tabs.

00:13:53.260 --> 00:13:55.440
If you've ever
built tabs before,

00:13:55.440 --> 00:13:57.240
just on HTML, CSS,
and JavaScript,

00:13:57.240 --> 00:14:01.890
you know that it's often
times just like div soup.

00:14:01.890 --> 00:14:03.820
You just write a
bunch of markup,

00:14:03.820 --> 00:14:06.664
you shellac it with CSS
until it looks right,

00:14:06.664 --> 00:14:08.330
and then you hit it
with some JavaScript

00:14:08.330 --> 00:14:11.460
so it'll do the sort of like
toggle state that you want.

00:14:11.460 --> 00:14:13.010
And what I love
about paper-tabs,

00:14:13.010 --> 00:14:18.420
is just that it's just using so
much less markup, and less CSS.

00:14:18.420 --> 00:14:22.287
And overall there's just
less clutter in my document.

00:14:22.287 --> 00:14:24.870
And when I have an idea that I'm
trying to get out of my head,

00:14:24.870 --> 00:14:26.740
onto the page, I
don't want to have

00:14:26.740 --> 00:14:28.680
to invent everything
from scratch.

00:14:28.680 --> 00:14:31.110
I want HTML to be
expressive for me.

00:14:31.110 --> 00:14:34.230
I want to be able to use
these new tags and just say,

00:14:34.230 --> 00:14:38.030
I want some tabs and I get it.

00:14:38.030 --> 00:14:40.310
Now one thing that you
notice about probably a lot

00:14:40.310 --> 00:14:43.180
of these elements is this cool
sort of reactive ink effect

00:14:43.180 --> 00:14:47.070
as the user is
tapping on the screen.

00:14:47.070 --> 00:14:49.610
Now we wanted other
developers to be

00:14:49.610 --> 00:14:52.360
able to use the cool effects
that are in the material design

00:14:52.360 --> 00:14:55.000
system in their own elements.

00:14:55.000 --> 00:14:58.240
And so what we've done is we've
actually broken those effects

00:14:58.240 --> 00:15:01.200
out into standalone
elements that anyone

00:15:01.200 --> 00:15:03.970
can drop into an element
that they're working on.

00:15:07.830 --> 00:15:10.897
So this is a
paper-ripple element.

00:15:10.897 --> 00:15:13.480
This is how we actually generate
that cool reactive ink effect

00:15:13.480 --> 00:15:17.200
that you see in all
of the paper elements.

00:15:17.200 --> 00:15:19.510
And all I've done here
is I've nested it inside

00:15:19.510 --> 00:15:22.460
of a div tag with an
image, and then I've

00:15:22.460 --> 00:15:24.630
told the paper element
that I want it to fit,

00:15:24.630 --> 00:15:27.380
so it's going to try and cover
the surface area of that div

00:15:27.380 --> 00:15:30.140
tag when the user taps on it.

00:15:30.140 --> 00:15:31.870
And what's great about
this is that it's

00:15:31.870 --> 00:15:36.970
a very, very small bit of effort
to add a bit more visual punch

00:15:36.970 --> 00:15:38.500
through your UI.

00:15:38.500 --> 00:15:41.716
And especially if your
user is on a touch device,

00:15:41.716 --> 00:15:43.840
they're going to get a lot
more feedback about what

00:15:43.840 --> 00:15:45.339
it is that they're
interacting with.

00:15:49.000 --> 00:15:50.779
Another example is paper-shadow.

00:15:50.779 --> 00:15:52.570
So we wanted to give
developers the ability

00:15:52.570 --> 00:15:55.725
to create realistic shadows
in their applications.

00:15:55.725 --> 00:15:57.350
And what paper-shadow
does is it allows

00:15:57.350 --> 00:15:59.366
you to set a visual
z-depth on your element.

00:15:59.366 --> 00:16:01.740
So as you see here, as we're
interacting with this thing,

00:16:01.740 --> 00:16:04.740
it's going to kind of jump
off of the page, which is nice

00:16:04.740 --> 00:16:07.052
because as your user is
working with this element,

00:16:07.052 --> 00:16:09.510
it can start to feel a little
bit more alive and a bit more

00:16:09.510 --> 00:16:10.670
tactile.

00:16:10.670 --> 00:16:14.990
Feel like they're actually
interacting with a real thing.

00:16:14.990 --> 00:16:17.910
Now, under the hood,
paper-shadow is actually

00:16:17.910 --> 00:16:21.180
generating two shadows so it
looks a bit more realistic

00:16:21.180 --> 00:16:24.815
and lifelike, and it's an
improvement on the basic CSS

00:16:24.815 --> 00:16:25.560
box shadow.

00:16:29.281 --> 00:16:31.530
OK, so I don't have time to
touch on all the elements,

00:16:31.530 --> 00:16:33.172
because there's
a whole lot more,

00:16:33.172 --> 00:16:35.630
and they're all really amazing
and fun to play around with.

00:16:35.630 --> 00:16:38.129
What I will suggest is that you
had over the Polymer project

00:16:38.129 --> 00:16:38.830
website.

00:16:38.830 --> 00:16:41.112
We've actually just
thrown up a sampler

00:16:41.112 --> 00:16:42.320
of all of our paper elements.

00:16:42.320 --> 00:16:44.685
You can get to it
from the homepage.

00:16:44.685 --> 00:16:46.550
Play around with
all these things.

00:16:46.550 --> 00:16:48.760
See some examples of
them, grab some code,

00:16:48.760 --> 00:16:52.010
and start dropping them
into your own application.

00:16:52.010 --> 00:16:54.050
I want to move on from
paper for a second,

00:16:54.050 --> 00:16:56.040
and I want to talk about
theming, because it's

00:16:56.040 --> 00:16:58.970
a topic that comes up a lot.

00:16:58.970 --> 00:17:01.632
How do you take these elements--
now that you've got them,

00:17:01.632 --> 00:17:03.340
and now that you're
excited to use them--

00:17:03.340 --> 00:17:06.200
how do you take them, bring
them into your own application,

00:17:06.200 --> 00:17:11.540
and make them feel like
they belong to your project?

00:17:11.540 --> 00:17:14.060
And so we've got a few
new tools in the toolbox

00:17:14.060 --> 00:17:15.520
to do the theming.

00:17:15.520 --> 00:17:18.420
And the first is the new
shadow psuedo-element.

00:17:18.420 --> 00:17:21.750
And this is part of
the CSS shadow dom.

00:17:21.750 --> 00:17:23.240
And the new shadow
psuedo-element

00:17:23.240 --> 00:17:26.640
is going to allow you to
pierce an element's shadow

00:17:26.640 --> 00:17:30.160
boundary, and style
its immediate children.

00:17:30.160 --> 00:17:31.730
And so, as you see
in this example,

00:17:31.730 --> 00:17:33.750
I've got a paper slider
element, and it's

00:17:33.750 --> 00:17:37.180
got this really dark blue knob
that the user is currently

00:17:37.180 --> 00:17:39.380
dragging across the screen.

00:17:39.380 --> 00:17:42.070
So if I want to change
the color of that knob,

00:17:42.070 --> 00:17:43.570
I can use the shadow
psuedo-element,

00:17:43.570 --> 00:17:46.500
I can pierce the paper
slider, and I can specifically

00:17:46.500 --> 00:17:48.960
target that one child
element inside of there

00:17:48.960 --> 00:17:51.950
and change its color.

00:17:51.950 --> 00:17:54.000
Now this is good if you
know specifically what

00:17:54.000 --> 00:17:57.130
you want to target, or you just
want to tweak a few things,

00:17:57.130 --> 00:17:59.605
shadow is really great for that.

00:17:59.605 --> 00:18:02.230
But if you want to do something
that's a bit more far reaching,

00:18:02.230 --> 00:18:04.920
we also have the
new deep-combinator,

00:18:04.920 --> 00:18:07.470
which will pierce
all shadow boundaries

00:18:07.470 --> 00:18:12.360
and allow you to style any
child in the shadow dom.

00:18:12.360 --> 00:18:15.490
And a really common
theme, is to do something

00:18:15.490 --> 00:18:20.700
like put a class on your
body, something like red beam,

00:18:20.700 --> 00:18:23.510
use a deep-combinator,
and then pierce

00:18:23.510 --> 00:18:25.350
all of your element's
shadow boundaries

00:18:25.350 --> 00:18:27.112
to update something
inside of them.

00:18:27.112 --> 00:18:29.570
Now I know that all of these
elements that I'm showing here

00:18:29.570 --> 00:18:30.361
are paper elements.

00:18:30.361 --> 00:18:33.030
I know that they all have
paper ripples inside of them,

00:18:33.030 --> 00:18:35.840
and I want to change
the ink color to red.

00:18:35.840 --> 00:18:37.680
So what I'm doing
here is, I'm just

00:18:37.680 --> 00:18:40.220
applying that red theme
to my body, using deep

00:18:40.220 --> 00:18:41.940
to dive into all
of those elements

00:18:41.940 --> 00:18:43.840
and update their ink
in one fell swoop.

00:18:49.730 --> 00:18:52.110
Now just using
shadow and deep, you

00:18:52.110 --> 00:18:54.810
can get pretty far
with theming your site.

00:18:54.810 --> 00:18:57.560
This is an example that
Eric Bidelman put together.

00:18:57.560 --> 00:19:00.080
This is from his
material playground.

00:19:00.080 --> 00:19:02.114
And what you're
seeing here is, he's

00:19:02.114 --> 00:19:04.030
got a whole bunch of
paper elements on screen.

00:19:04.030 --> 00:19:05.738
He's interacting with
them, and then he's

00:19:05.738 --> 00:19:08.950
going to hit the switch, and
change all of their colors

00:19:08.950 --> 00:19:11.160
over to green from purple.

00:19:11.160 --> 00:19:13.150
And you can do this
with typography.

00:19:13.150 --> 00:19:15.810
You can use it with padding and
spacing, and things like that.

00:19:15.810 --> 00:19:18.780
So with just those two tools,
you can get pretty far.

00:19:22.025 --> 00:19:23.650
And developers often
see this, and they

00:19:23.650 --> 00:19:24.810
start to freak out a little bit.

00:19:24.810 --> 00:19:26.520
And they're like, hey
you're breaking the style

00:19:26.520 --> 00:19:27.103
encapsulation.

00:19:27.103 --> 00:19:29.000
I thought the whole
idea of shadow dom

00:19:29.000 --> 00:19:31.487
was that we weren't
going to do that.

00:19:31.487 --> 00:19:32.820
And I want to make a point here.

00:19:32.820 --> 00:19:35.700
So the shadow
boundary is intended

00:19:35.700 --> 00:19:39.220
to prevent accidental
styling in the shadow dom.

00:19:39.220 --> 00:19:41.170
We don't want a developer
to accidentally turn

00:19:41.170 --> 00:19:41.810
everything red.

00:19:41.810 --> 00:19:43.460
That is bad.

00:19:43.460 --> 00:19:44.900
But we do want to
give developers

00:19:44.900 --> 00:19:47.780
the final say over what
their site looks like,

00:19:47.780 --> 00:19:50.700
and that means giving them
the tools and the flexibility

00:19:50.700 --> 00:19:52.590
to reach inside of
something and specifically

00:19:52.590 --> 00:19:55.810
say, no that thing should look
this way because it's my site

00:19:55.810 --> 00:19:57.490
and I say so.

00:19:57.490 --> 00:19:59.490
So that's the intention there.

00:19:59.490 --> 00:20:01.700
But also, we get it.

00:20:01.700 --> 00:20:05.322
Preserving style encapsulation
is a good thing to do.

00:20:05.322 --> 00:20:07.280
And so we've been
experimenting with an element

00:20:07.280 --> 00:20:09.800
called core-style,
which allows you

00:20:09.800 --> 00:20:12.580
to share styles
between elements,

00:20:12.580 --> 00:20:16.452
but also preserve
encapsulation at the same time.

00:20:16.452 --> 00:20:18.660
And I'm going to put this
experimental badge on this,

00:20:18.660 --> 00:20:20.076
because it's
definitely still kind

00:20:20.076 --> 00:20:22.581
of in that developer preview,
we're working on it phase,

00:20:22.581 --> 00:20:24.330
but it's also so
interesting that I wanted

00:20:24.330 --> 00:20:26.460
to talk about today, so
you guys could get up

00:20:26.460 --> 00:20:29.000
and running and start
playing with it.

00:20:29.000 --> 00:20:31.610
The way core-style works is
you have a core-style element,

00:20:31.610 --> 00:20:34.680
which is going to act
as your style producer.

00:20:34.680 --> 00:20:37.460
And inside of this
element you can put in CSS

00:20:37.460 --> 00:20:43.160
that you intend to end up inside
of someone else's shadow dom.

00:20:43.160 --> 00:20:45.820
Then, inside of your
Polymer element definition,

00:20:45.820 --> 00:20:48.300
I've got an x-foo tag
that I'm creating here.

00:20:48.300 --> 00:20:50.600
I've got another
core-style element there,

00:20:50.600 --> 00:20:52.100
with a reference attribute.

00:20:52.100 --> 00:20:54.640
I'm actually targeting
the core-style element

00:20:54.640 --> 00:20:56.850
that's above it-- that
tomato-theme core-style

00:20:56.850 --> 00:20:59.820
producer.

00:20:59.820 --> 00:21:01.560
So we create this
little relationship

00:21:01.560 --> 00:21:03.730
between producer and consumer.

00:21:03.730 --> 00:21:06.452
You can have multiple
consumers all

00:21:06.452 --> 00:21:07.660
pointed at the same producer.

00:21:07.660 --> 00:21:10.300
You can have multiple
producers and a consumer

00:21:10.300 --> 00:21:11.930
changing which one
it's looking at.

00:21:11.930 --> 00:21:14.250
You can mix and match
those any way you want,

00:21:14.250 --> 00:21:17.570
but the overall effect is
that we end up with a themed

00:21:17.570 --> 00:21:22.320
element, and we didn't have to
specifically go in and target

00:21:22.320 --> 00:21:23.320
that item.

00:21:26.320 --> 00:21:28.210
Now another really cool,
interesting feature

00:21:28.210 --> 00:21:31.250
of core-style is style binding.

00:21:31.250 --> 00:21:32.720
So maybe you're
working on a theme,

00:21:32.720 --> 00:21:35.210
and maybe you don't know
exactly what color you

00:21:35.210 --> 00:21:37.610
want to use for a
particular aspect,

00:21:37.610 --> 00:21:40.290
but you do want to
expose a hook to the user

00:21:40.290 --> 00:21:42.840
so that they can set
that value later.

00:21:42.840 --> 00:21:45.130
So using a style
binding here, we're

00:21:45.130 --> 00:21:46.410
just using mustache syntax.

00:21:46.410 --> 00:21:49.140
We've got myColor
set up as a binding.

00:21:49.140 --> 00:21:52.490
And then later on in the
script, in their document,

00:21:52.490 --> 00:21:55.840
the user can set the
value for myColor,

00:21:55.840 --> 00:21:58.040
and they can do it on
a per-instance basis,

00:21:58.040 --> 00:21:59.490
or they can do it
globally, which

00:21:59.490 --> 00:22:03.990
is what we're doing here,
using the CoreStyle.g object.

00:22:03.990 --> 00:22:06.570
And again, this gives us the
effect of a styled element,

00:22:06.570 --> 00:22:09.360
and we didn't have to
specifically go in and target

00:22:09.360 --> 00:22:12.680
anything using shadow or deep.

00:22:12.680 --> 00:22:15.510
So this is a lot of good stuff
here in the world of theming.

00:22:15.510 --> 00:22:17.870
It's all still sort
of exploratory,

00:22:17.870 --> 00:22:20.390
but I'm excited by
where this is heading.

00:22:20.390 --> 00:22:23.990
I think we're definitely
getting there.

00:22:23.990 --> 00:22:27.020
The last thing I want to
touch on are transitions.

00:22:27.020 --> 00:22:31.240
How do I move from one state
of my application to the next?

00:22:31.240 --> 00:22:35.110
And we've been doing
some work here as well.

00:22:35.110 --> 00:22:37.180
This is an element called
core-animated-pages,

00:22:37.180 --> 00:22:39.810
which is also still kind of in
that developer preview phase.

00:22:39.810 --> 00:22:41.226
We're still kind
of working on it,

00:22:41.226 --> 00:22:44.110
but it's so cool I
wanted to show it today.

00:22:44.110 --> 00:22:45.720
And core-animated-pages,
as it says,

00:22:45.720 --> 00:22:48.220
is a pluggable system
for creating transitions

00:22:48.220 --> 00:22:50.990
from one state of
your app to the next.

00:22:50.990 --> 00:22:52.700
So I've got a
core-animated-pages element

00:22:52.700 --> 00:22:53.610
here.

00:22:53.610 --> 00:22:55.320
Inside I've got some sections.

00:22:55.320 --> 00:22:57.920
That's what you're seeing
on the phone there.

00:22:57.920 --> 00:23:00.020
And I've got a selected
index, and then I've

00:23:00.020 --> 00:23:01.470
got a list of the
transitions that

00:23:01.470 --> 00:23:04.380
are going to play as
that index is updated.

00:23:04.380 --> 00:23:07.340
So as the user is interacting
with these tabs, all I'm doing

00:23:07.340 --> 00:23:10.110
is updating the index
and it's sliding

00:23:10.110 --> 00:23:12.210
over the different
sections, using

00:23:12.210 --> 00:23:14.790
the transition
that was provided.

00:23:14.790 --> 00:23:17.364
Now, because this is
a pluggable system,

00:23:17.364 --> 00:23:19.530
it means you can do some
pretty wild things with it.

00:23:19.530 --> 00:23:21.250
And if any of you
have seen Topeka,

00:23:21.250 --> 00:23:24.340
which is our sort of flagship
app kind of demonstrating

00:23:24.340 --> 00:23:26.210
a lot of the core
and paper elements,

00:23:26.210 --> 00:23:28.930
you've probably seen a lot
of these really awesome hero

00:23:28.930 --> 00:23:31.910
transitions that happen as
you answer different quiz

00:23:31.910 --> 00:23:33.420
questions.

00:23:33.420 --> 00:23:36.140
And what's going on
here is all of these

00:23:36.140 --> 00:23:40.190
are animations that were created
using core-animated-pages.

00:23:40.190 --> 00:23:43.180
So there's a lot
that you can do here.

00:23:43.180 --> 00:23:45.330
But instead of just
talking about this,

00:23:45.330 --> 00:23:51.340
I can actually show you a brief
demo using our designer tool.

00:23:51.340 --> 00:23:55.720
Now some of you may have seen
our designer tool before.

00:23:55.720 --> 00:23:59.641
It's kind of like
a drag and drop

00:23:59.641 --> 00:24:01.265
editor for working
with web components.

00:24:03.930 --> 00:24:05.980
And what we're
going to do is we're

00:24:05.980 --> 00:24:08.810
going to try to build a
little piece of Topeka

00:24:08.810 --> 00:24:10.530
using this tool.

00:24:10.530 --> 00:24:14.100
And so we're going to start
by grabbing a card out

00:24:14.100 --> 00:24:15.445
at this pallet here.

00:24:15.445 --> 00:24:16.820
And what we're
doing right now is

00:24:16.820 --> 00:24:20.387
we're just dropping Polymer
elements into a canvas.

00:24:20.387 --> 00:24:21.970
So I'm going to drop
a card on screen.

00:24:24.580 --> 00:24:26.840
And we're going to grab
some paper elements as well.

00:24:26.840 --> 00:24:30.350
So we grab paper input,
throw that in there,

00:24:30.350 --> 00:24:32.751
grab another paper input.

00:24:32.751 --> 00:24:35.000
And as you can see right
now, it's kind of laying out,

00:24:35.000 --> 00:24:36.660
but it's not
exactly what I want.

00:24:36.660 --> 00:24:40.550
I'd like it to have a
little bit more padding.

00:24:40.550 --> 00:24:44.560
So I can go over to my
properties inspector here,

00:24:44.560 --> 00:24:48.080
from a card, I can
switch to the styles,

00:24:48.080 --> 00:24:51.910
and I can go down
to padding, and just

00:24:51.910 --> 00:24:53.360
add a tiny bit of padding.

00:24:53.360 --> 00:24:56.216
And that looks a
little bit nicer.

00:24:56.216 --> 00:24:58.340
And right now these labels
are kind of nondescript.

00:24:58.340 --> 00:24:59.715
They just say type something.

00:24:59.715 --> 00:25:01.340
So I can go to my
properties inspector,

00:25:01.340 --> 00:25:04.070
and I could update them
here, but I can also

00:25:04.070 --> 00:25:05.860
hop into the code.

00:25:05.860 --> 00:25:08.830
If I want, I can just
change the label value here

00:25:08.830 --> 00:25:13.100
from type something to
first name and last name.

00:25:16.440 --> 00:25:18.730
And then save that,
and switch back,

00:25:18.730 --> 00:25:21.840
and now my labels have updated.

00:25:21.840 --> 00:25:24.230
And if we want to go as
far as adding validation,

00:25:24.230 --> 00:25:26.250
we can do that as well.

00:25:26.250 --> 00:25:29.560
So we can say that we only
want to accept letters and not

00:25:29.560 --> 00:25:30.060
numbers.

00:25:34.140 --> 00:25:37.950
So I'll say yeah, only give me
capital and lowercase letters

00:25:37.950 --> 00:25:40.270
and no numbers please.

00:25:40.270 --> 00:25:42.797
So as the user is typing,
they can type in some letters.

00:25:42.797 --> 00:25:45.130
That works, but as soon as
they start typing in numbers,

00:25:45.130 --> 00:25:47.449
it's going to start
yelling at them.

00:25:47.449 --> 00:25:49.990
And if I want, I can throw an
error message in there as well.

00:25:49.990 --> 00:25:54.304
I can be like, yo,
only letters dude.

00:25:54.304 --> 00:25:56.220
And then I can give them
a little frowny face,

00:25:56.220 --> 00:25:58.330
so they know I
mean business here.

00:26:03.190 --> 00:26:04.620
So let's add some
more stuff here.

00:26:04.620 --> 00:26:08.600
Let's throw in some icons, so
the user can pick their avatar.

00:26:11.480 --> 00:26:13.300
Drop those in there.

00:26:13.300 --> 00:26:15.450
Let's also throw in
an action button,

00:26:15.450 --> 00:26:20.957
so when the user is done, they
can navigate out of the screen.

00:26:20.957 --> 00:26:23.540
And this action button right now
is kind of laid out far left.

00:26:23.540 --> 00:26:25.985
I'd like it to lay
out to the far right,

00:26:25.985 --> 00:26:28.360
and I can use some of those
layout attributes to do that.

00:26:28.360 --> 00:26:31.940
So I can tell it to
justify to the end,

00:26:31.940 --> 00:26:35.300
and just slide it over.

00:26:35.300 --> 00:26:39.122
Now, really quickly, I've
created my sign-in form.

00:26:39.122 --> 00:26:40.580
And it didn't take
a lot of effort,

00:26:40.580 --> 00:26:43.730
and the code underneath is
pretty straightforward as well.

00:26:43.730 --> 00:26:46.810
But I said I was going to
show off core-animated-pages.

00:26:46.810 --> 00:26:52.540
So let's actually grab
a little scaffold.

00:26:52.540 --> 00:26:55.800
Just drop this on the screen.

00:26:55.800 --> 00:26:57.030
You guys see that OK?

00:26:57.030 --> 00:27:03.750
[INAUDIBLE] and over
in core-animated-ages,

00:27:03.750 --> 00:27:06.770
drop this element in there.

00:27:06.770 --> 00:27:08.880
So we just dropped a
core-animated-pages element

00:27:08.880 --> 00:27:11.171
into our scaffold, and the
last thing we're going to do

00:27:11.171 --> 00:27:12.994
is just drop our
card on top of it.

00:27:12.994 --> 00:27:14.660
And now this is
starting to kind of look

00:27:14.660 --> 00:27:16.860
like a mobile application.

00:27:16.860 --> 00:27:18.360
And what I want to
do next is I want

00:27:18.360 --> 00:27:21.960
to bind the core-animated-pages
selected index to these tabs.

00:27:21.960 --> 00:27:23.460
So as I click on
the different tabs,

00:27:23.460 --> 00:27:26.010
it changes which
page is showing.

00:27:26.010 --> 00:27:31.080
So over my tree-view, I'm going
to select core-animated-pages,

00:27:31.080 --> 00:27:33.240
go to its properties,
and we're going

00:27:33.240 --> 00:27:34.810
to hook up a data binding.

00:27:34.810 --> 00:27:39.250
And we're going to bind to the
selected property of our paper

00:27:39.250 --> 00:27:41.420
tabs.

00:27:41.420 --> 00:27:44.150
So now as we click from
item one to item two,

00:27:44.150 --> 00:27:46.670
it's going to attempt
to show two pages.

00:27:46.670 --> 00:27:49.030
But we don't have a
second page at the moment.

00:27:49.030 --> 00:27:50.520
We can change that.

00:27:50.520 --> 00:27:54.280
We can kind of cheat, and we
can do like a cooking show,

00:27:54.280 --> 00:27:55.860
pull out the turkey fully baked.

00:27:55.860 --> 00:27:57.243
Ah yeah look at that.

00:28:00.010 --> 00:28:03.400
And now that I've
got these two pages,

00:28:03.400 --> 00:28:05.167
I want to animate between them.

00:28:05.167 --> 00:28:06.750
I want to fire up
core-animated-pages.

00:28:06.750 --> 00:28:08.208
And so what I'm
going to do, is I'm

00:28:08.208 --> 00:28:10.930
going to tell each
element which animation

00:28:10.930 --> 00:28:14.070
it should use as we transition.

00:28:14.070 --> 00:28:16.450
So for all of these
tiles here, I'm

00:28:16.450 --> 00:28:18.915
going to tell them
to do a tile cascade,

00:28:18.915 --> 00:28:22.810
and I'm also going to
tell them to fade out.

00:28:22.810 --> 00:28:27.190
For our header here, I'm going
to tell it to slide down.

00:28:27.190 --> 00:28:30.570
And then, we switch
over here for our card,

00:28:30.570 --> 00:28:33.702
and tell it to slide up.

00:28:33.702 --> 00:28:35.160
And the last thing
we need to do is

00:28:35.160 --> 00:28:37.440
we need to tell
core-animated-pages

00:28:37.440 --> 00:28:39.810
all of the animation targets
that we just created.

00:28:39.810 --> 00:28:46.270
So we got slide up, slide
down, fade, and tile cascade.

00:28:46.270 --> 00:28:48.630
And now, the demo
gods are smiling.

00:28:48.630 --> 00:28:52.910
When I click on item two, whoa,
we get some nice transitions.

00:28:52.910 --> 00:28:54.898
[APPLAUSE]

00:29:04.450 --> 00:29:06.850
So that's pretty exciting.

00:29:06.850 --> 00:29:08.044
So that's really awesome.

00:29:08.044 --> 00:29:09.960
If you want to play
around with Designer more,

00:29:09.960 --> 00:29:11.830
it is up on the project
Polymer website,

00:29:11.830 --> 00:29:13.229
but it's also up on GitHub.

00:29:13.229 --> 00:29:15.020
So that means you take
it, you can fork it,

00:29:15.020 --> 00:29:17.390
you can play around with it.

00:29:17.390 --> 00:29:19.200
And what's really
cool, is that it

00:29:19.200 --> 00:29:22.817
means anyone can take this and
add their own components to it.

00:29:22.817 --> 00:29:25.150
And that's exactly what the
team at Salesforce has done.

00:29:25.150 --> 00:29:28.090
So a group led by Eugene
Oksman and Akhilesh Gupta

00:29:28.090 --> 00:29:30.620
from the Salesforce
mobile SDK team

00:29:30.620 --> 00:29:33.840
has actually taken Designer,
they've extended it,

00:29:33.840 --> 00:29:35.510
they've created
Salesforce elements

00:29:35.510 --> 00:29:39.635
using Polymer-- these are
UI and data elements--

00:29:39.635 --> 00:29:41.260
and they've added
them to the Designer.

00:29:41.260 --> 00:29:42.860
So what you're seeing
here is Akhilesh

00:29:42.860 --> 00:29:45.200
is actually building a
Salesforce mobile app

00:29:45.200 --> 00:29:46.817
using these components.

00:29:46.817 --> 00:29:48.900
And what's really awesome
is that these Salesforce

00:29:48.900 --> 00:29:52.370
components are already set up
to connect to the Salesforce

00:29:52.370 --> 00:29:53.310
backend.

00:29:53.310 --> 00:29:57.120
So for things like identity,
and APIs, and offline sink,

00:29:57.120 --> 00:29:58.780
and storage, like
all that stuff,

00:29:58.780 --> 00:30:01.190
it's already built
into their elements.

00:30:01.190 --> 00:30:03.580
Which is really super cool.

00:30:03.580 --> 00:30:07.070
So by combining Salesforce
API and Polymer,

00:30:07.070 --> 00:30:09.370
their developers get
the best of both worlds.

00:30:09.370 --> 00:30:10.870
And I think what
you're going to see

00:30:10.870 --> 00:30:13.370
here is in a second Akhilesh
is going to grab the code.

00:30:13.370 --> 00:30:14.953
And i think he throws
it into Cordova,

00:30:14.953 --> 00:30:18.042
and he's going to preview it
in the iOS simulator, and also

00:30:18.042 --> 00:30:19.250
the Android device simulator.

00:30:21.930 --> 00:30:25.210
How cool is that.

00:30:25.210 --> 00:30:25.710
OK.

00:30:25.710 --> 00:30:27.618
[APPLAUSE]

00:30:32.967 --> 00:30:34.550
All right, so what
did we learn today?

00:30:34.550 --> 00:30:35.270
Hopefully a lot.

00:30:35.270 --> 00:30:37.395
Hopefully you guys are
leaving here really excited,

00:30:37.395 --> 00:30:39.540
because we covered
a lot of ground.

00:30:39.540 --> 00:30:42.260
These are the major categories
that we started off with.

00:30:42.260 --> 00:30:45.850
And to summarize, if you want
to scaffold your app together,

00:30:45.850 --> 00:30:47.980
you want some good
bedrock to build upon,

00:30:47.980 --> 00:30:52.240
you can use these core elements
that are out there today.

00:30:52.240 --> 00:30:54.286
We've also shipped the
paper elements, which

00:30:54.286 --> 00:30:55.910
are part of the
material design system,

00:30:55.910 --> 00:30:58.010
so if you want to create
some really beautiful,

00:30:58.010 --> 00:31:01.750
interactive UIs, we've
got that as well.

00:31:01.750 --> 00:31:06.140
We've got new tools like
shadow, and deep, and core-style

00:31:06.140 --> 00:31:06.809
for theming.

00:31:06.809 --> 00:31:08.350
And there's a lot
of good exploration

00:31:08.350 --> 00:31:11.337
that's happening in that space.

00:31:11.337 --> 00:31:13.670
And lastly, if you want to
move between different states

00:31:13.670 --> 00:31:14.520
in your application,
and you want

00:31:14.520 --> 00:31:17.320
to generate some really amazing,
eye-catching transitions,

00:31:17.320 --> 00:31:18.653
you can use core-animated-pages.

00:31:21.425 --> 00:31:23.550
Now if you don't take
anything else from this talk,

00:31:23.550 --> 00:31:25.133
the one thing that
I ask of all of you

00:31:25.133 --> 00:31:27.310
is to head over to the
Polymer project website,

00:31:27.310 --> 00:31:29.410
download Polymer,
and give it a shot.

00:31:29.410 --> 00:31:32.230
We've just completely
revamped the website.

00:31:32.230 --> 00:31:34.200
We've got all new
getting started guides.

00:31:34.200 --> 00:31:35.787
We've got the paper
sandbox up there.

00:31:35.787 --> 00:31:36.870
We've got element catalog.

00:31:36.870 --> 00:31:38.301
We've got Designer.

00:31:38.301 --> 00:31:40.425
A bunch of new documentation
for things like icons,

00:31:40.425 --> 00:31:43.690
and gestures, tons of
stuff to cover there.

00:31:43.690 --> 00:31:47.470
So please, hit up the Polymer
website and check it out.

00:31:47.470 --> 00:31:50.830
Also, check out the Google
Developers channel on YouTube.

00:31:50.830 --> 00:31:52.970
We've recorded a whole
bunch of DevBytes

00:31:52.970 --> 00:31:57.400
on Polymer, building elements,
building accessible elements,

00:31:57.400 --> 00:32:01.290
connecting with Google services
through web components.

00:32:01.290 --> 00:32:03.970
Lots of really awesome stuff

00:32:03.970 --> 00:32:06.991
I'm personally just like super
excited by where all of this

00:32:06.991 --> 00:32:07.490
is heading.

00:32:07.490 --> 00:32:09.600
I hope you are as well.

00:32:09.600 --> 00:32:11.560
I really do believe
that together we

00:32:11.560 --> 00:32:15.380
can build a new ecosystem
of amazing HTML elements,

00:32:15.380 --> 00:32:18.255
and we can revolutionize
the mobile web.

00:32:18.255 --> 00:32:28.770
So thank you all so much
for coming and enjoy I/O.

00:32:28.770 --> 00:32:30.640
And we have time for questions.

00:32:30.640 --> 00:32:31.880
There's microphones up here.

00:32:31.880 --> 00:32:33.963
Please come up to the
microphone to ask questions,

00:32:33.963 --> 00:32:35.880
because otherwise the
video won't pick you up.

00:32:35.880 --> 00:32:37.963
AUDIENCE: Hey Rob, thanks
for all the awesome work

00:32:37.963 --> 00:32:38.740
on Polymer.

00:32:38.740 --> 00:32:41.104
I notice that you're using
attributes for the things

00:32:41.104 --> 00:32:43.020
that classes have been
traditionally used for,

00:32:43.020 --> 00:32:44.060
and I was wondering
if you could speak

00:32:44.060 --> 00:32:45.360
to the motivation behind that?

00:32:48.766 --> 00:32:51.510
ROB DODSON: I think that
configuring things through

00:32:51.510 --> 00:32:56.090
attributes, it feels like
how you work with other HTML

00:32:56.090 --> 00:32:57.740
elements, typically.

00:32:57.740 --> 00:33:01.230
And that is probably why we
are heading in that direction.

00:33:01.230 --> 00:33:02.817
You can still use
classes if you like,

00:33:02.817 --> 00:33:04.650
if you kind of prefer
to do things that way.

00:33:04.650 --> 00:33:07.880
But with Polymer
itself, there's a lot

00:33:07.880 --> 00:33:09.865
of built in niceties
to using attributes.

00:33:09.865 --> 00:33:13.230
So if you change an
attribute in Polymer,

00:33:13.230 --> 00:33:14.820
you've got automatic
change hammers,

00:33:14.820 --> 00:33:18.890
which are going to detect when
that thing has been changed.

00:33:18.890 --> 00:33:23.680
So really the framework itself
is adding some more sugaring

00:33:23.680 --> 00:33:25.640
to that particular
area, so that's

00:33:25.640 --> 00:33:26.944
why we're supporting that.

00:33:26.944 --> 00:33:29.110
AUDIENCE: And do the order
of the attributes matter,

00:33:29.110 --> 00:33:31.602
like when you say, float
left or layout horizontal,

00:33:31.602 --> 00:33:32.560
or something like that.

00:33:32.560 --> 00:33:33.930
Do they talk to each other,
or how does that work?

00:33:33.930 --> 00:33:35.810
ROB DODSON: That layout
should not matter.

00:33:35.810 --> 00:33:38.650
The order of the attributes--
sorry-- should not matter.

00:33:38.650 --> 00:33:43.660
AUDIENCE: Thanks

00:33:43.660 --> 00:33:47.330
So using JavaScript from
the global of the app,

00:33:47.330 --> 00:33:49.142
like say, jquery or
something like that,

00:33:49.142 --> 00:33:50.850
to interact with these,
does that change,

00:33:50.850 --> 00:33:53.870
or is that sort of the
same as it always was?

00:33:53.870 --> 00:33:56.600
ROB DODSON: Interacting
with them from the outside

00:33:56.600 --> 00:34:01.040
is totally the same, because
to jquery, or like a framework,

00:34:01.040 --> 00:34:03.890
it just looks like an HTML
element on the outside

00:34:03.890 --> 00:34:05.704
when you create
a custom element.

00:34:05.704 --> 00:34:07.370
When you're on the
inside of an element,

00:34:07.370 --> 00:34:09.909
like if you're trying to use
jquery inside of your element

00:34:09.909 --> 00:34:11.699
definition, you've got
to be careful there

00:34:11.699 --> 00:34:13.115
because jquery
doesn't necessarily

00:34:13.115 --> 00:34:17.460
know about the shadow dom So you
can run into weird situations.

00:34:17.460 --> 00:34:21.020
So we typically just
use vanilla JavaScript.

00:34:21.020 --> 00:34:23.929
And to be honest, like
with create selector

00:34:23.929 --> 00:34:27.190
and forEach, and like a handful
of other things, that gets you

00:34:27.190 --> 00:34:30.199
like 90% of what
you need usually.

00:34:30.199 --> 00:34:32.820
AUDIENCE: Is that JavaScript
sandboxed inside the shadow dom

00:34:32.820 --> 00:34:34.980
or is it--

00:34:34.980 --> 00:34:38.880
ROB DODSON: No, JavaScript
is part of the page.

00:34:42.750 --> 00:34:45.190
AUDIENCE: So my question
is kind of similar to his.

00:34:45.190 --> 00:34:48.422
I've been using Angular
for the last year or so,

00:34:48.422 --> 00:34:50.755
and I was just wondering how
well it plays with Angular.

00:34:53.671 --> 00:34:55.920
ROB DODSON: The one, I guess,
big distinction to make,

00:34:55.920 --> 00:34:58.030
is to also keep in
mind that Polymer

00:34:58.030 --> 00:34:59.920
is kind of meant to
be like a new thing.

00:34:59.920 --> 00:35:01.420
It's built on top
of web components,

00:35:01.420 --> 00:35:04.000
and it's kind of trying
to head in that direction.

00:35:04.000 --> 00:35:06.190
But if you are trying
to mix the two together,

00:35:06.190 --> 00:35:09.760
like anecdotally, I've
dropped paper elements even

00:35:09.760 --> 00:35:12.112
in to an Angular
project, and had

00:35:12.112 --> 00:35:14.320
Angular kind of like poking
at them and driving them,

00:35:14.320 --> 00:35:18.160
and everything, and it
generally seems to work out OK.

00:35:18.160 --> 00:35:21.300
There may be some issues around
data binding complex data

00:35:21.300 --> 00:35:21.800
objects.

00:35:21.800 --> 00:35:23.210
I'm not sure.

00:35:23.210 --> 00:35:25.480
I don't know for certain.

00:35:25.480 --> 00:35:29.420
But in general, a framework
that knows how to work with HTML

00:35:29.420 --> 00:35:31.010
can work OK with
Polymer elements,

00:35:31.010 --> 00:35:34.650
because it is just HTML.

00:35:34.650 --> 00:35:37.960
AUDIENCE: So thanks for
the great presentation.

00:35:37.960 --> 00:35:39.410
What about accessibility?

00:35:39.410 --> 00:35:41.030
So for instance,
the checkboxes, I

00:35:41.030 --> 00:35:44.380
saw was using canvas
elements, and I

00:35:44.380 --> 00:35:48.150
tried to navigate with my
tab around in the browser,

00:35:48.150 --> 00:35:49.740
but I wasn't really
able to do that.

00:35:49.740 --> 00:35:53.270
So is there any talking to that?

00:35:53.270 --> 00:35:54.824
Is that in a road map or--?

00:35:54.824 --> 00:35:55.490
ROB DODSON: Yes.

00:35:55.490 --> 00:35:57.130
Absolutely.

00:35:57.130 --> 00:36:00.760
So accessibility is
a big concern for us.

00:36:00.760 --> 00:36:04.830
We want to make accessibility
easier on the web.

00:36:04.830 --> 00:36:06.970
We want to give developers
better primitives

00:36:06.970 --> 00:36:10.404
so that it's not such a
chore to add accessibility

00:36:10.404 --> 00:36:11.070
to your project.

00:36:11.070 --> 00:36:13.450
So we've been working
with Alice Boxhall,

00:36:13.450 --> 00:36:15.920
and I believe she's actually
going to be doing a sandbox

00:36:15.920 --> 00:36:17.544
session, if she hasn't
already-- but it

00:36:17.544 --> 00:36:19.970
might be tomorrow-- on building
accessible web components,

00:36:19.970 --> 00:36:22.620
and she also has a DevByte
that she has recorded,

00:36:22.620 --> 00:36:28.250
which is already on YouTube,
which goes into great detail

00:36:28.250 --> 00:36:30.120
how to do accessible
web components.

00:36:30.120 --> 00:36:32.060
So yes it's definitely
on the road map.

00:36:32.060 --> 00:36:34.270
We are totally going to
do it and support it.

00:36:34.270 --> 00:36:36.530
For I/O it's a bit of a
crunch, there last minute.

00:36:36.530 --> 00:36:38.130
But it's coming for sure.

00:36:38.130 --> 00:36:40.670
AUDIENCE: Thanks

00:36:40.670 --> 00:36:42.279
ROB DODSON: Hello again

00:36:42.279 --> 00:36:44.570
AUDIENCE: One of the cool
visions behind web components

00:36:44.570 --> 00:36:47.470
is the idea that everything is
composable, in that you expose

00:36:47.470 --> 00:36:49.470
a public API, and then
you have this private API

00:36:49.470 --> 00:36:51.170
to do whatever you like with.

00:36:51.170 --> 00:36:53.230
And then, when I see
the angry developers

00:36:53.230 --> 00:36:54.950
bit that you posted
earlier about how

00:36:54.950 --> 00:36:58.590
you can pierce the shadow dom, I
wonder what the story is as far

00:36:58.590 --> 00:37:01.381
as maintaining
that separation of,

00:37:01.381 --> 00:37:02.880
I'm the guy who
makes the component,

00:37:02.880 --> 00:37:04.213
and I'm the guy who consumes it.

00:37:04.213 --> 00:37:06.830
And it doesn't really matter
what the guy who makes it

00:37:06.830 --> 00:37:09.260
does without breaking
the other person's site.

00:37:09.260 --> 00:37:11.710
If there's a story that's
like how versioning works,

00:37:11.710 --> 00:37:13.865
or if there are best practices
as to when you pierce a shadow

00:37:13.865 --> 00:37:15.365
dom, or how you
expose things should

00:37:15.365 --> 00:37:17.040
be pierced versus not pierced.

00:37:17.040 --> 00:37:19.060
ROB DODSON: Yeah.

00:37:19.060 --> 00:37:20.900
I don't think we've
actually done a ton

00:37:20.900 --> 00:37:23.150
to codify when you should
and shouldn't pierce things.

00:37:23.150 --> 00:37:25.960
I think, in general,
if you give something

00:37:25.960 --> 00:37:28.900
like an ID or a class, that's
kind of been one of the ways

00:37:28.900 --> 00:37:31.272
that we've been thinking about
saying, if I specifically

00:37:31.272 --> 00:37:33.730
name something, if I give it
a name that's sort of intended

00:37:33.730 --> 00:37:35.470
for the world and
I document that,

00:37:35.470 --> 00:37:38.300
and I say in my
documentation, OK that knob

00:37:38.300 --> 00:37:40.540
is called slider knob and
I'm telling you its name,

00:37:40.540 --> 00:37:44.090
and if you need to get
in, that's how you do it.

00:37:44.090 --> 00:37:46.909
It's kind of a bit of like an
agreement between the person

00:37:46.909 --> 00:37:48.700
creating the thing and
the person using it,

00:37:48.700 --> 00:37:50.741
that they're going to
document the bits that they

00:37:50.741 --> 00:37:53.170
are cool with people changing.

00:37:53.170 --> 00:37:55.380
And as for versioning
stuff, I mean

00:37:55.380 --> 00:37:58.050
we've been just following
semantic versioning rules.

00:37:58.050 --> 00:38:01.552
So you just need to
keep an eye on things.

00:38:01.552 --> 00:38:03.510
I saw someone mention
the other day on Twitter,

00:38:03.510 --> 00:38:07.880
they were like, well, what if I
want to just add like a border

00:38:07.880 --> 00:38:09.870
and like some additional
UI to an element.

00:38:09.870 --> 00:38:11.370
Isn't that going
to break everybody?

00:38:11.370 --> 00:38:13.328
And if you think it's
going to break everybody,

00:38:13.328 --> 00:38:16.180
then that needs to
be a major version

00:38:16.180 --> 00:38:18.764
update in your
semantic versioning.

00:38:18.764 --> 00:38:20.430
Because if it's going
to break somebody,

00:38:20.430 --> 00:38:21.888
then it's not
backwards compatible.

00:38:21.888 --> 00:38:22.870
It is API breaking.

00:38:22.870 --> 00:38:25.520
So that needs to be a
major version uptick.

00:38:25.520 --> 00:38:28.810
AUDIENCE: Thank you

00:38:28.810 --> 00:38:33.000
You showed a video demonstrating
someone using Cordova.

00:38:33.000 --> 00:38:37.634
How well does Polymer perform
in legacy webview on Android?

00:38:37.634 --> 00:38:38.800
ROB DODSON: Android Browser?

00:38:41.097 --> 00:38:42.930
AUDIENCE: If I have an
app with the webview,

00:38:42.930 --> 00:38:48.270
and I'm showing a
Polymer display--

00:38:48.270 --> 00:38:50.020
ROB DODSON: So right
now, my understanding

00:38:50.020 --> 00:38:55.190
is that the webview in
KitKat is the one that

00:38:55.190 --> 00:38:57.810
is going to work with Polymer.

00:38:57.810 --> 00:39:00.580
Older webviews-- basically stuff
that's not based on Chromium,

00:39:00.580 --> 00:39:05.040
is not going to work

00:39:05.040 --> 00:39:09.250
AUDIENCE: Quick question, CSS
is so much simpler and cleaner.

00:39:09.250 --> 00:39:12.070
But how does it work on
something other than Chrome,

00:39:12.070 --> 00:39:14.500
such as some of those other
evil browsers, like IE--

00:39:14.500 --> 00:39:17.150
ROB DODSON: Hey,
they're our friends.

00:39:17.150 --> 00:39:20.360
It works good on
the other browsers.

00:39:20.360 --> 00:39:23.070
So we test on all of
the other browsers.

00:39:23.070 --> 00:39:25.290
We make sure that
we're doing our best

00:39:25.290 --> 00:39:32.110
to work in Firefox, Safari, IE.

00:39:32.110 --> 00:39:34.504
Our support-- sorry,
I'm just nervous,

00:39:34.504 --> 00:39:35.920
that was not meant
to be a slight.

00:39:39.050 --> 00:39:41.390
We support the last two
versions of every browser.

00:39:41.390 --> 00:39:43.640
That's kind of our target.

00:39:43.640 --> 00:39:45.665
AUDIENCE: Thanks.

00:39:45.665 --> 00:39:47.040
ROB DODSON: All
right, that's it.

00:39:47.040 --> 00:39:47.956
Thank you all so much.

00:39:47.956 --> 00:39:50.670
Enjoy-- oh, sorry,
one more, one more.

00:39:50.670 --> 00:39:52.550
AUDIENCE: [INAUDIBLE].

00:39:52.550 --> 00:39:57.220
So how does this compare
to replacing the Bootstrap?

00:39:57.220 --> 00:39:58.100
ROB DODSON: Yeah.

00:39:58.100 --> 00:40:02.069
So the thing about Bootstrap
is, Bootstrap is awesome.

00:40:02.069 --> 00:40:04.110
And the reason why it's
awesome and so successful

00:40:04.110 --> 00:40:06.710
is because it gave us guidance.

00:40:06.710 --> 00:40:09.210
And we were like, I get
components and I can use them,

00:40:09.210 --> 00:40:10.210
these awesome.

00:40:10.210 --> 00:40:13.780
But there's just a lot of markup
that goes in to Bootstrap.

00:40:13.780 --> 00:40:15.850
Their navbar is like
blah, it's crazy.

00:40:15.850 --> 00:40:21.190
So my hope is that you can
take Bootstrap and evolve it

00:40:21.190 --> 00:40:22.550
to this world.

00:40:22.550 --> 00:40:24.230
That in the future
Bootstrap is going

00:40:24.230 --> 00:40:25.900
to be a collection
of custom elements.

00:40:25.900 --> 00:40:26.890
And that's what
we've tried to do

00:40:26.890 --> 00:40:28.806
with the core elements
and the paper elements,

00:40:28.806 --> 00:40:30.800
is to start heading
in that direction.

00:40:30.800 --> 00:40:33.660
And when I'm talking about sort
of like the ecosystem of shared

00:40:33.660 --> 00:40:36.725
elements, that's
really what I want.

00:40:36.725 --> 00:40:38.100
The thing about
Bootstrap is, you

00:40:38.100 --> 00:40:39.840
can't use Bootstrap
with foundation,

00:40:39.840 --> 00:40:41.365
or another CSS framework.

00:40:41.365 --> 00:40:44.270
But with web components
you can, and that's huge.

00:40:44.270 --> 00:40:46.880
So that's what I'm
hoping we head to.

00:40:46.880 --> 00:40:48.130
AUDIENCE: All right, thank you

00:40:48.130 --> 00:40:49.434
ROB DODSON: Yep, thank you.

00:40:49.434 --> 00:40:51.100
AUDIENCE: So at what
point in the future

00:40:51.100 --> 00:40:53.990
do you expect that these will
start to appear mainstream,

00:40:53.990 --> 00:40:55.880
that a mainstream app
will start using this?

00:40:55.880 --> 00:41:00.127
Is this three months out, or
can I use it now and sort of--

00:41:00.127 --> 00:41:01.460
ROB DODSON: The time is now man.

00:41:01.460 --> 00:41:05.610
We're like talking about it
in the keynote let's do this.

00:41:05.610 --> 00:41:08.290
Yeah.

00:41:08.290 --> 00:41:12.660
The thing is, it's
future facing.

00:41:12.660 --> 00:41:16.540
So you've got to
make sure that you're

00:41:16.540 --> 00:41:19.470
cool supporting the
modern Evergreen Browsers.

00:41:19.470 --> 00:41:23.770
But if that's your major
user base then do it.

00:41:23.770 --> 00:41:26.980
Go for it.

00:41:26.980 --> 00:41:29.000
Thank you guys so much.

