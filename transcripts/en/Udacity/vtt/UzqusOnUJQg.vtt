WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
Since both HTML and JavaScript have some essential ambiguity,

00:00:05.000 --> 00:00:10.000
we needed to handle that before we could move farther with our web browser.

00:00:10.000 --> 00:00:13.000
But now that we know a bit more about grammars and ambiguity,

00:00:13.000 --> 00:00:17.000
we can actually move onto making grammars for HTML and JavaScript.

00:00:17.000 --> 00:00:21.000
Just to remind you, here's an example HTML utterance,

00:00:21.000 --> 00:00:24.000
"Welcome to my webpage!"

00:00:24.000 --> 00:00:27.000
Here I've drawn a relatively simple grammar

00:00:27.000 --> 00:00:31.000
for a surprisingly large subset of HTML.

00:00:31.000 --> 00:00:34.000
One of the first challenges that we'll have to deal with

00:00:34.000 --> 00:00:40.000
is that a webpage can have a list of words, like "welcome to my webpage."

00:00:40.000 --> 00:00:46.000
Our starting nonterminal, HTML, has a recursive structure.

00:00:46.000 --> 00:00:52.000
Using this rule, HTML goes to element HTML, we can apply rule one

00:00:52.000 --> 00:00:55.000
over and over again to get as many elements as we need.

00:00:55.000 --> 00:01:00.000
Maybe one, two, three, four for welcome to my webpage.

00:01:00.000 --> 00:01:03.000
Then eventually when we're done replace with epsilon or the empty set.

00:01:03.000 --> 00:01:08.000
Element can either be a word, like "welcome to my webpage,"

00:01:08.000 --> 00:01:13.000
or the beginning of a nested tag.

00:01:13.000 --> 00:01:20.000
Here tag-open and tag-close are a lot like open parenthesis and close parenthesis.

00:01:20.000 --> 00:01:23.000
Whenever we make one, we're going to make the other.

00:01:23.000 --> 00:01:34.000
Then in here tag_open is &lt;word&gt; and tag_close is &lt;/word&gt;.

00:01:34.000 --> 00:01:41.000
For example, this part matches a tag_open, and this text matches a tax_closed.

00:01:41.000 --> 00:01:47.000
Actually, as it stands, I'm only allowing a single word to be inside any tag.

00:01:47.000 --> 00:01:52.000
Inside these bold tags, we've got quite a lot of stuff going on.

00:01:52.000 --> 00:01:58.000
I'll show you the power of a recursive grammar. Watch this trick.

00:01:58.000 --> 00:02:04.000
Now at the top level, an HTML document is a list of elements, as many as you like.

00:02:04.000 --> 00:02:08.000
Each one of those elements may themselves be a tag,

00:02:08.000 --> 00:02:15.000
and inside tags we have another list of elements--another, in essence, entire webpage.

00:02:15.000 --> 00:02:21.000
Here at the top level, we just have one--tag_open for bold.

00:02:21.000 --> 00:02:25.000
But inside it there are four elements--the word welcome, the word to,

00:02:25.000 --> 00:02:28.000
the tag_open for my, and the word for webpage.

00:02:28.000 --> 00:02:34.000
I'm going to draw the parse tree for this utterance using our grammar.

00:02:34.000 --> 00:02:38.000
I'm going to use "elt" to abbreviate for element.

00:02:38.000 --> 00:02:42.000
I'm going to use "to" for tag_open and "tc" for tag_close.

00:02:42.000 --> 00:02:48.000
Now, I've only drawn or sketched out a small portion, maybe about half, of this parse tree,

00:02:48.000 --> 00:02:52.000
but we're still going to be able to see things match up by comparing the leaves--

00:02:52.000 --> 00:02:55.000
remember a leaf is an node without any children--

00:02:55.000 --> 00:02:57.000
to what we saw in the original string.

00:02:57.000 --> 00:03:01.000
Here my first leaf, working my way down and to the left,

00:03:01.000 --> 00:03:05.000
is this open left angle bracket, and that matches up here.

00:03:05.000 --> 00:03:09.000
My next is this b, which matches up here--match up there.

00:03:09.000 --> 00:03:15.000
Then after that tag_open, there is an HTML, which is an element list,

00:03:15.000 --> 00:03:20.000
and the first one is the word "welcome." The next one is the word "to."

00:03:20.000 --> 00:03:23.000
Now, although this tree structure is cumbersome for us,

00:03:23.000 --> 00:03:29.000
it's very convenient for computers, because it tells us exactly which part of the tree

00:03:29.000 --> 00:03:32.000
to draw or to apply in a certain manner.

00:03:32.000 --> 00:03:36.000
It might not be obvious which word should be bolded or which word should be italicized,

00:03:36.000 --> 00:03:45.000
but if I have a tag_open and a tag_close, this entire subtree is influenced by this tag.

00:03:45.000 --> 00:03:50.000
How much of the webpage is bolded? Exactly this part over here.

00:03:50.000 --> 00:03:54.000
The bold's great, great uncle or something like that.

00:03:54.000 --> 00:03:57.000
Go up a few, over one to the right, and then back down.

00:03:57.000 --> 09:59:59.000
We're going to use this special structuring to help write our web browser.

