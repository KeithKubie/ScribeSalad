WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.000
&gt;&gt; ANDREW BOWERS: So as you've seen, we've--these are
just few of the ways that we've evolved the

00:00:07.140 --> 00:00:11.580
development cycle in Google Web toolkit and
the productivity side of the equation. So

00:00:11.580 --> 00:00:16.840
first, we have to declare to view the UIBinder
increasing the speed in which you can iterate

00:00:16.840 --> 00:00:21.900
the plug-in for Eclipse error checking earlier
on and also, you know, we can be a little

00:00:21.900 --> 00:00:28.490
lazier by typing less code, and then third,
the developer plug-in allowing that multi-browser

00:00:28.490 --> 00:00:35.490
debugging during that development cycle. So,
I think--I actually think I got the development

00:00:35.550 --> 00:00:40.510
side of the presentation because I like demos
and being able to show multi-browser debugging.

00:00:40.510 --> 00:00:45.700
But if you've ever been stuck in the car with
Bruce Johnson, you know that he's very fascinated

00:00:45.700 --> 00:00:52.329
with optimizations. And so, luckily, you're
all stuck with me tonight as well. So we're

00:00:52.329 --> 00:00:56.629
going to spend--the next part we're going
to talk about is the development time--excuse

00:00:56.629 --> 00:01:01.379
me--deployment time, and the optimizations
that go on with Google Web toolkit and performance,

00:01:01.379 --> 00:01:05.430
making apps faster. So with that, I'd like
to invite up Bruce Johnson, the co-creator

00:01:05.430 --> 00:01:12.149
and tech lead of Google Web toolkit.
&gt;&gt; JOHNSON: Thank you, Andrew. And now you're

00:01:12.149 --> 00:01:19.149
stuck with me. Well, I'll try to make it interesting,
anyway. Again, to reiterate back in terms

00:01:21.250 --> 00:01:28.250
of this big picture diagram. Andrew showed
you the development process, faster refresh

00:01:28.670 --> 00:01:33.410
cycle; I'm going to be talking about what
happens when it's actually time to think about

00:01:33.410 --> 00:01:40.380
deploying your app and running compiler, and
so on. So, it's really often the case that

00:01:40.380 --> 00:01:46.039
people call GWT a compiler, but it is important
to note that really the compiler is only one

00:01:46.039 --> 00:01:51.099
small tool within the larger toolkit. As a
matter of fact, one thing you haven't seen

00:01:51.099 --> 00:01:55.660
of all the demos that you've been shown so
far is you have not seen the compiler run.

00:01:55.660 --> 00:01:59.429
What you saw again was the development mode.
The whole point is to not have to run the

00:01:59.429 --> 00:02:04.390
compiler. If you stay in development mode
during most of your development cycle, most

00:02:04.390 --> 00:02:08.610
of your time is spent making edits to your
Java code and refreshing the browser. That's

00:02:08.610 --> 00:02:13.610
a really productive way to work, and a slow
compiler doesn't slow you down at all. But

00:02:13.610 --> 00:02:17.670
at some point, it is time to start compiling
into the JavaScript and seeing what it's like

00:02:17.670 --> 00:02:22.000
to, you know, start to think about deploying
your application. Well, I should mention too

00:02:22.000 --> 00:02:27.610
that JavaScript that gets produced by the
compiler is just a standard, stand alone static

00:02:27.610 --> 00:02:33.230
JavaScript files that you can serve up over
any HTTP web server. But anyway, at this point

00:02:33.230 --> 00:02:37.100
when you compile we've added some things that
are really interesting from a performance

00:02:37.100 --> 00:02:44.100
perspective. So, if we move to the next slide,
I'm going to drill down into that even more.

00:02:48.200 --> 00:02:55.200
First to understand that the GWT compiler
is not a simple Java to JavaScript source

00:02:55.530 --> 00:03:01.180
transliterator. Okay? It's a whole program
optimizing compiler, I say whole program because

00:03:01.180 --> 00:03:07.010
it literally sees every single line of source
code in your project when it goes to optimizing

00:03:07.010 --> 00:03:12.680
compiler. Because it can see every line of
code that means it can trace all the connections

00:03:12.680 --> 00:03:17.130
between. It's all the dependencies, where
methods are called and what fields are referenced

00:03:17.130 --> 00:03:21.819
and so on. In that kind of environment, it
can do really, really aggressive and effective

00:03:21.819 --> 00:03:25.740
thorough optimizations to make sure that the
JavaScript that is produced and as small and

00:03:25.740 --> 00:03:31.430
as fast as possible. I'll walk you through
the pipeline, at least the simplified version

00:03:31.430 --> 00:03:36.850
of it in this diagram here. So starting at
the left, the first thing the compiler does

00:03:36.850 --> 00:03:41.350
is it prunes out dead code. The way it does
that is it starts with the entry point, which

00:03:41.350 --> 00:03:46.959
is the first method that runs when your web
application can load, and it is able to see

00:03:46.959 --> 00:03:53.740
all the methods that could be called transitively
from that entry point methods. It can determine

00:03:53.740 --> 00:03:57.290
that certain methods would never be called.
In large libraries, that's often the case

00:03:57.290 --> 00:04:02.650
that you only use a subset of the code, right.
So, it trims all the methods that are not

00:04:02.650 --> 00:04:08.110
called in your project and completely discards
that code, it never runs up in your JavaScript.

00:04:08.110 --> 00:04:13.990
But it's not just methods it's, you know,
fields that never get read or if you'd declare

00:04:13.990 --> 00:04:19.540
local variables or parameters that never get
referenced, it trims those out as well. Even

00:04:19.540 --> 00:04:24.970
entire classes, no matter how much code you
write, if the classes never instantiated and

00:04:24.970 --> 00:04:30.120
are never used, it goes away. It's kind of
an interesting contrast to the way that you

00:04:30.120 --> 00:04:34.540
normally think about JavaScript development
where there's a library that you include on

00:04:34.540 --> 00:04:39.030
the page, right, and it's got a certain size
and that's just the price of entry. This works

00:04:39.030 --> 00:04:42.780
exactly the opposite. You only pay for the
code that you actually use, no matter how

00:04:42.780 --> 00:04:47.530
large the set of libraries that you compile
against, only the code that you actually need

00:04:47.530 --> 00:04:51.490
is included. Okay, so that's dead code removal.
Moving on to devirtualization, so what does

00:04:51.490 --> 00:04:56.030
that mean? In large code bases of the sort
that we're talking about tonight, you need

00:04:56.030 --> 00:05:00.750
to use object-oriented design patterns and
that involves multiple levels of abstraction,

00:05:00.750 --> 00:05:06.000
class hierarchies and so on. Well, that's
great from a maintainability standpoint and

00:05:06.000 --> 00:05:11.690
a design standpoint. But those concepts, those
abstractions have some runtime costs, but

00:05:11.690 --> 00:05:16.150
not if you're using the GWT compiler, well
because it can go through and tighten the

00:05:16.150 --> 00:05:20.710
types of things. So you declare a variable
as a shape but the compiler sees, it's ever

00:05:20.710 --> 00:05:26.070
only assigned a circle object. So it tightens
the type from shape to circle and therefore

00:05:26.070 --> 00:05:29.900
methods that are called on that object are
not polymorphic, they're actually known to

00:05:29.900 --> 00:05:34.000
be calling a particular implementation of
that method. And as a result, we can move

00:05:34.000 --> 00:05:39.770
on to the next box which is inlining. Many
of these methods typically getters and setters

00:05:39.770 --> 00:05:44.139
or other small confrontational methods are
small enough that it's actually very effective

00:05:44.139 --> 00:05:49.290
to simply inline the bodies of those methods
with the call sites. Sometimes that even means

00:05:49.290 --> 00:05:55.110
the JavaScript is smaller because very small
function bodies when you inline them, it saves

00:05:55.110 --> 00:05:59.840
you the actual characters of the word function.
Where you know, in JavaScript every character

00:05:59.840 --> 00:06:04.229
that you include in your script actually costs
you download time, right. So sometimes inline,

00:06:04.229 --> 00:06:10.400
you can actually make the code smaller too,
and of course it makes it faster. Then, once

00:06:10.400 --> 00:06:15.930
you've inlined all these call sites, you end
up with expressions like two plus two, it

00:06:15.930 --> 00:06:20.820
really happens a lot, or a string concatenation
were you're appending a string literal to

00:06:20.820 --> 00:06:26.639
another string literal. In which case the
compiler can do static expression evaluation.

00:06:26.639 --> 00:06:31.820
So, if it sees two plus two for example, it
simply replaces that with the literal four.

00:06:31.820 --> 00:06:38.820
And you can easily see why that's a good thing,
four is less JavaScript to download, it's

00:06:39.260 --> 00:06:43.510
less operation that needs to be done at runtime.
So it's just basically nothing but a total

00:06:43.510 --> 00:06:49.949
win as far as you're concerned. And that's
not all, as we moved through this pipeline

00:06:49.949 --> 00:06:55.210
once, we've unlocked additional optimizations,
so we go, start at the beginning again and

00:06:55.210 --> 00:06:59.100
we go back to the pipeline. And at typical
project, the large project like, again, like

00:06:59.100 --> 00:07:04.650
the ones we're talking about tonight may go
through this cycle seven to ten times, after

00:07:04.650 --> 00:07:09.509
which there's just nothing else that you can
improve from a logical standpoint, and it's

00:07:09.509 --> 00:07:14.490
time to generate JavaScript. And of course,
when we generate the JavaScript, we eke out

00:07:14.490 --> 00:07:20.550
every little bit of size improvement that
we can, so you have minified JavaScript which

00:07:20.550 --> 00:07:25.820
means you don't have comments in the output,
you don't have extraneous spaces, you can

00:07:25.820 --> 00:07:30.419
even read the JavaScript spec which I do not
advise. But if you read it, you'll se there's

00:07:30.419 --> 00:07:34.919
things you can leave out semicolons in certain
places and so on, and we try to do all of

00:07:34.919 --> 00:07:39.389
that so that you don't download, your users
don't download a single byte that they don't

00:07:39.389 --> 00:07:46.139
have to. And then we can obfuscate the identifiers,
shorten names, again smaller script, downloads

00:07:46.139 --> 00:07:50.960
faster and actually connect to the faster
[INDISTINCT]. So, that's what it's like to

00:07:50.960 --> 00:07:57.030
be locked in the car with me. But, thank you
for your patience, so we'll take a step back,

00:07:57.030 --> 00:08:02.100
I'll be geekified for a second. And this is
the one I want you to actually remember, the

00:08:02.100 --> 00:08:09.100
compiler smushes the heck out of your code.
So the diagram, the diagram shows on the left

00:08:09.889 --> 00:08:16.100
the complete source for a java project that
you can compile [INDISTINCT] 2 point font.

00:08:16.100 --> 00:08:20.880
On the right side is the JavaScript code that
was produced by the compiler, also 2 point

00:08:20.880 --> 00:08:27.830
font. The main thing to remember is, it's
okay for your java source to be bigger because

00:08:27.830 --> 00:08:32.800
the compiler will make it smaller. And actually
this has pretty big implications for how you

00:08:32.800 --> 00:08:38.889
work to develop a large sophisticated application,
right? You want to be able to write the java

00:08:38.889 --> 00:08:42.809
code that you want, you've got a whole team
working on this, you need design patterns,

00:08:42.809 --> 00:08:48.619
you need to be able to have, you know, modular
code, maintainable code, testable code. You

00:08:48.619 --> 00:08:54.059
don't want to have to be sweating performance
with every single line of code that you write.

00:08:54.059 --> 00:08:58.600
And you can work that way with GWT, you can
know that the compiler has your back because

00:08:58.600 --> 00:09:01.610
it's going to take all that java source that
you write and because it's going to take all

00:09:01.610 --> 00:09:07.829
that Java source that you write and smush
it down as small as they can go. Another exciting,

00:09:07.829 --> 00:09:14.829
and Matt alluded to this earlier and GWT existing
users have always been excited about this

00:09:16.920 --> 00:09:23.429
as the team. When you have a GWT project and
you upgrade to the new version, we add new

00:09:23.429 --> 00:09:28.999
compiler optimizations every time. You simply
upgrade, recompile and your application gets

00:09:28.999 --> 00:09:33.540
smaller and faster. So, we've already talked
to teams who have used the release candidate

00:09:33.540 --> 00:09:39.649
of 2.0 and they've reported 3% of reduction
and size all the way to 20% reductions and

00:09:39.649 --> 00:09:46.649
even more in some cases. Again, you heard
Matt say they got a 20% size reduction. So

00:09:46.779 --> 00:09:51.740
if we're doing our job right, you never have
to think about any of this stuff ever again

00:09:51.740 --> 00:09:55.629
after tonight. You just write the code that
you want and you can be sure the compiler

00:09:55.629 --> 00:10:01.009
is going to optimize it well for you. But
as you continue to build larger and larger

00:10:01.009 --> 00:10:05.050
applications, you know, it just takes a lot
of code, right? Lots of features, it means

00:10:05.050 --> 00:10:11.819
lots of code. Even the best compiler optimizations
can't make that free although we will try.

00:10:11.819 --> 00:10:15.889
But you know, eventually the JavaScript gets
big and the initial download starts take too

00:10:15.889 --> 00:10:22.889
long and that's not what we want. We do not
want users using web applications to feel

00:10:22.959 --> 00:10:27.199
as if they are having to install something
in order to install your application. Right,

00:10:27.199 --> 00:10:32.040
these are web applications, you should click
a hyperlink and they should start immediately.

00:10:32.040 --> 00:10:36.040
So there's obviously some tension here. You
want rich full-featured applications but you

00:10:36.040 --> 00:10:41.589
want them to start immediately so what do
you do. I'm happy to say that in GWT 2.0,

00:10:41.589 --> 00:10:48.470
we have a solution to this. You can get incremental
app downloads using a technology we call Developer

00:10:48.470 --> 00:10:55.470
Guided Code Splitting. It's available in GWT
2.0. We think about it like watching a movie

00:10:55.649 --> 00:10:59.959
online. You obviously don't want to have to
download the entire movie before you can start

00:10:59.959 --> 00:11:04.179
watching the first bit of it, right? You want
the movie to start immediately and download

00:11:04.179 --> 00:11:09.970
the rest as you go, that's the idea of behind
code splitting. A real world example just

00:11:09.970 --> 00:11:16.970
came from Google Wave who last October, got
in touch with us to say, "Hey guys, you know,

00:11:17.829 --> 00:11:23.699
we love GWT but you know, we have an awful
lot of functionality planned for Wave." And

00:11:23.699 --> 00:11:28.449
this is what our—the size of our initial
download looks like as we continue developing.

00:11:28.449 --> 00:11:34.639
Don't know if you can see this in the back
of Y-axis has this curve starting to approach

00:11:34.639 --> 00:11:41.410
one and a half megabytes of uncompressed JavaScript.
Well, that starts to get to a size that is

00:11:41.410 --> 00:11:45.290
really too large to download quickly and that
would really harm the user experience and

00:11:45.290 --> 00:11:52.290
that is no good. So, I admit I kind of laughed
nervously as the tech lead, Adam Shook mentioned

00:11:54.329 --> 00:12:01.329
something about having to ship Wave on a CD
rom. And, which I use that joke every opportunity

00:12:02.220 --> 00:12:08.299
I get because actually, it's kind of an interesting
reminder that the world has really changed

00:12:08.299 --> 00:12:13.529
in the last few years, right? When shipping
software on a CD ROM is literally a joke,

00:12:13.529 --> 00:12:20.529
anyway, this is how it works. You have the
entry point method in your project which I

00:12:21.879 --> 00:12:27.129
discussed earlier. That's the top of this
tree, okay. The entry point method calls other

00:12:27.129 --> 00:12:31.579
methods which in turn call yet other methods.
It's not important that you read the names

00:12:31.579 --> 00:12:35.389
of these methods, but I just wanted to make
the point that it is shaped like a tree, in

00:12:35.389 --> 00:12:41.869
other words like, sort of a triangle. Now,
we can zoom out and the point is the size

00:12:41.869 --> 00:12:46.559
of the initial download is proportional to
the area of this triangle essentially. So

00:12:46.559 --> 00:12:52.929
the more code that is reachable from your
entry point, the bigger your initial download.

00:12:52.929 --> 00:12:59.189
What we want to do is find portions of code
within this triangle, sub-triangles if you

00:12:59.189 --> 00:13:06.189
will, that we can chop out, that we can defer
so that we don't have to load them immediately.

00:13:07.290 --> 00:13:13.350
So, in this example, the triangle I'm showing
you is the mail sample application. And I

00:13:13.350 --> 00:13:17.139
think a good thing to chop out is that silly,
about dialogue box that Andrew showed you

00:13:17.139 --> 00:13:21.850
earlier. I mean, you know, it's nice to have
it but, how often do you click on the about

00:13:21.850 --> 00:13:26.170
dialogue box, right. Why would you make the
initial download take longer just to have

00:13:26.170 --> 00:13:31.449
this kind of low value feature at the (red)--it'd
be better if you can defer the dialogue box

00:13:31.449 --> 00:13:36.199
code until you actually have someone click
on the about link. So, I'm going to show you

00:13:36.199 --> 00:13:43.199
what that looks like in eclipse. All right.
So, the first thing you do is you find the

00:13:55.670 --> 00:14:01.829
place in the code that you think you'd like
to do some chopping. So, in my case, it's

00:14:01.829 --> 00:14:07.339
the spot at which we have an event handler
here. Okay. This is one of those UI handler

00:14:07.339 --> 00:14:11.829
base event handlers that Andrew showed you
earlier. It's nice and succinct, and it's

00:14:11.829 --> 00:14:17.480
really clear. That, if this method could be
deferred then everything it depends on could

00:14:17.480 --> 00:14:21.509
also be deferred. In other words, the compiler
would have an opportunity to cleave out that

00:14:21.509 --> 00:14:27.299
subtree that I showed you in the diagram.
Really, a point of this demo is just to show

00:14:27.299 --> 00:14:34.139
you how few lines of code it takes to pull
that off. There's a new magic method in GWT

00:14:34.139 --> 00:14:41.139
2.0 called runAsync. And you just turn--what
was a method call into a callback. Okay. So,

00:14:48.709 --> 00:14:55.709
what happens is, one of two things when this--what
we call split point occurs. The necessary

00:14:58.119 --> 00:15:03.040
additional code is fetched successfully in
which case execution continues. All right.

00:15:03.040 --> 00:15:08.859
That's--that was the original method or it
is possible, that if the network has a problem

00:15:08.859 --> 00:15:13.829
of some sort then, you know, the code might
fail to work, in which case you want to do

00:15:13.829 --> 00:15:20.829
some really world class error handling, and
that's it. I'm done. I'm not even going to

00:15:24.100 --> 00:15:29.350
show you the, the thing in action because
the point is, it's exactly the same. It'll

00:15:29.350 --> 00:15:36.350
feel exactly the same. But, if we go back
to the slides, I'll show you what I did. That

00:15:38.239 --> 00:15:43.199
smaller triangle, I dropped it out with, I
guess, when you exclude braces and blank lines

00:15:43.199 --> 00:15:48.929
in the sample code I showed you. that's maybe
three or four lines of code. Three or four

00:15:48.929 --> 00:15:54.529
lines of code, I reduced the startup by 13
percent, and I did that in about a minute.

00:15:54.529 --> 00:16:00.679
So, now imagine what happened when we gave
code splitting to the Wave team. Okay, which

00:16:00.679 --> 00:16:06.619
we did, and moving on to the next slide. This
is what happened to the startup size a few

00:16:06.619 --> 00:16:12.379
weeks after we gave it to them. So, in several
weeks, they were able to--in preparation for

00:16:12.379 --> 00:16:17.299
the launch at IO this, earlier this year.
They reduced their startup size by a factor

00:16:17.299 --> 00:16:24.299
of seven. And so, went from 1400K uncompressed
to 200K uncompressed. You actually serve this

00:16:25.879 --> 00:16:31.799
JavaScript, of course, you compress it, right?
So, 200K Gzip is about 80K which is about

00:16:31.799 --> 00:16:37.379
the size of a typical graphic, you know, a
jpeg that you would include into any old HTML

00:16:37.379 --> 00:16:43.970
page without thinking twice about it. In other
words, this is, you know, very rich functionality,

00:16:43.970 --> 00:16:50.970
and a very small download. That is what I
call a bargain. So, that's the Wave example.

