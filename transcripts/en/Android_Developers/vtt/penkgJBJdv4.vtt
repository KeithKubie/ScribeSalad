WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:01.740
HOI LAM: Wear OS
by Google supports

00:00:01.740 --> 00:00:04.090
many cross-platform
development options

00:00:04.090 --> 00:00:06.600
by default, such as
phone notifications

00:00:06.600 --> 00:00:08.380
and Actions on Google.

00:00:08.380 --> 00:00:10.650
But what if you want
to do more and tailor

00:00:10.650 --> 00:00:13.100
your experience for the rest?

00:00:13.100 --> 00:00:16.070
I'm Hoi Lam, and I will walk you
through the development options

00:00:16.070 --> 00:00:18.360
for Wear OS, a
wearable operating

00:00:18.360 --> 00:00:21.390
system by Google for everyone.

00:00:21.390 --> 00:00:24.660
Before we begin, it's important
to note that Wear OS by Google

00:00:24.660 --> 00:00:26.040
is based on Android.

00:00:26.040 --> 00:00:29.110
So many of the things that you
know about Android development,

00:00:29.110 --> 00:00:32.070
such as the concept of
activity or services,

00:00:32.070 --> 00:00:36.300
the use of Android Studio, or
the distribution for the Google

00:00:36.300 --> 00:00:39.192
Play Store should
be familiar to you.

00:00:39.192 --> 00:00:40.650
There are three
options if you want

00:00:40.650 --> 00:00:43.290
to tailor your app for Wear OS.

00:00:43.290 --> 00:00:47.550
Wear apps, watch faces, and
complication data provider.

00:00:47.550 --> 00:00:49.200
It is not an either/or choice.

00:00:49.200 --> 00:00:53.070
You can package one or more
of these within the same APK.

00:00:53.070 --> 00:00:55.430
So let's briefly go
through them in turn.

00:00:55.430 --> 00:00:58.140
A Wear app is a good
development option

00:00:58.140 --> 00:01:00.840
if the user's journey can
function better on the wrist

00:01:00.840 --> 00:01:02.550
rather than on their phone.

00:01:02.550 --> 00:01:05.790
Great examples of this includes
exercising, contactless

00:01:05.790 --> 00:01:07.950
payment, and messaging.

00:01:07.950 --> 00:01:11.160
Creating a Wear app is just
like creating a mobile Android

00:01:11.160 --> 00:01:15.210
app, with a few enhancements
for the wearable form factor.

00:01:15.210 --> 00:01:18.030
This includes round screen
support for our resource

00:01:18.030 --> 00:01:20.580
qualifiers, or [? round ?]
[? aware ?] classes,

00:01:20.580 --> 00:01:22.950
such as boxings and layout.

00:01:22.950 --> 00:01:25.500
In addition, for longer
user interactions,

00:01:25.500 --> 00:01:29.430
such as shopping lists,
exercising, or travel apps,

00:01:29.430 --> 00:01:32.280
Wear OS supports ambient
mode, which reduces

00:01:32.280 --> 00:01:35.020
battery use and screen burn-in.

00:01:35.020 --> 00:01:39.000
Another way to develop for Wear
OS is to create watch faces.

00:01:39.000 --> 00:01:40.380
If you are interested
in creating

00:01:40.380 --> 00:01:44.280
beautiful and functional
timepieces, this is for you.

00:01:44.280 --> 00:01:47.690
Showing the time is one of
the core aspects of a watch.

00:01:47.690 --> 00:01:50.800
And as a developer, you can
bring your unique style right

00:01:50.800 --> 00:01:52.830
to the watch face.

00:01:52.830 --> 00:01:56.340
By overriding the onDraw
method in the canvas watch face

00:01:56.340 --> 00:02:00.450
service, you can draw lines,
shapes, or render bitmaps

00:02:00.450 --> 00:02:02.800
through the canvas
objects provided.

00:02:02.800 --> 00:02:05.760
If you have created a
custom Android view before,

00:02:05.760 --> 00:02:08.300
this should be familiar to you.

00:02:08.300 --> 00:02:11.070
What if your user wanted
more than just the time?

00:02:11.070 --> 00:02:14.520
For example, what if they wanted
the latest news, the battery

00:02:14.520 --> 00:02:17.340
level or even the weather?

00:02:17.340 --> 00:02:20.590
Being a connected device, and
with the user's permission,

00:02:20.590 --> 00:02:23.220
Wear OS can supply
data from Google

00:02:23.220 --> 00:02:26.460
or other third-party
apps to your watch face.

00:02:26.460 --> 00:02:28.360
These extra pieces
of information

00:02:28.360 --> 00:02:31.680
are known as complications,
a traditional watchmaking

00:02:31.680 --> 00:02:34.370
term describing areas
of the watch face

00:02:34.370 --> 00:02:38.040
that are showing information
other than the time.

00:02:38.040 --> 00:02:41.040
Watch face developers can take
advantage of the complication's

00:02:41.040 --> 00:02:44.550
framework to make their watch
faces not just beautiful

00:02:44.550 --> 00:02:46.900
but highly functional as well.

00:02:46.900 --> 00:02:49.890
Lastly, developers can choose
to implement a complication data

00:02:49.890 --> 00:02:53.070
provider, which allows
the app to share data

00:02:53.070 --> 00:02:54.600
with the watch face.

00:02:54.600 --> 00:02:56.520
This is especially
suitable for apps

00:02:56.520 --> 00:02:59.040
that have key information
the user would like

00:02:59.040 --> 00:03:02.850
to see on the watch face, such
as share prices or weather

00:03:02.850 --> 00:03:04.590
information.

00:03:04.590 --> 00:03:07.950
This is a great way to dip your
toe into Wear OS development

00:03:07.950 --> 00:03:10.230
if you already
have a mobile app.

00:03:10.230 --> 00:03:13.450
Development of a complication
data provider is simple.

00:03:13.450 --> 00:03:16.110
Just think about one
key piece of information

00:03:16.110 --> 00:03:17.900
you would want to show.

00:03:17.900 --> 00:03:21.510
To get started, create a
complication provider service,

00:03:21.510 --> 00:03:24.900
and supply the data
requested on demand.

00:03:24.900 --> 00:03:26.940
You can also ask the
system to request

00:03:26.940 --> 00:03:30.490
an update when new
information becomes available,

00:03:30.490 --> 00:03:35.000
such as a new chat message,
or a piece of breaking news.

00:03:35.000 --> 00:03:39.210
To conserve battery, Wear OS
may reduce the update frequency.

00:03:39.210 --> 00:03:42.120
A good rule of thumb is to
think of the complication update

00:03:42.120 --> 00:03:46.500
intervals being on the order
of minutes rather than seconds.

00:03:46.500 --> 00:03:48.060
As I said at the
beginning, there

00:03:48.060 --> 00:03:52.220
are a number of development
options available on Wear OS.

00:03:52.220 --> 00:03:55.170
From cross-platform support
for notifications and Actions

00:03:55.170 --> 00:03:58.890
on Google, to Wear
applications, watch faces,

00:03:58.890 --> 00:04:01.080
and complication data provider.

00:04:01.080 --> 00:04:03.150
The choice is yours,

00:04:03.150 --> 00:04:05.640
If you're looking to enhance
your existing mobile app,

00:04:05.640 --> 00:04:08.310
create a complication
data provider is probably

00:04:08.310 --> 00:04:10.560
the simplest way to get started.

00:04:10.560 --> 00:04:12.990
Just follow this code lab.

00:04:12.990 --> 00:04:16.769
For more information, check out
the Wear OS developer sites.

00:04:16.769 --> 00:04:17.310
Happy coding.

00:04:17.310 --> 00:04:20.660
[MUSIC PLAYING]

