WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.840
[MUSIC PLAYING]

00:00:02.840 --> 00:00:03.750
Congratulations.

00:00:03.750 --> 00:00:06.380
You've got a great,
new social application

00:00:06.380 --> 00:00:07.982
that seems to be all the rage.

00:00:07.982 --> 00:00:10.190
But you keep getting reports
that when users download

00:00:10.190 --> 00:00:12.320
a new horde of
profile thumbnails,

00:00:12.320 --> 00:00:15.162
the application crawls
along and feels slow.

00:00:15.162 --> 00:00:17.120
My name is Colt McAnlis,
and even though you're

00:00:17.120 --> 00:00:20.310
in a managed memory environment,
improperly using memory

00:00:20.310 --> 00:00:23.080
can still kick off a load
of performance problems.

00:00:23.080 --> 00:00:25.810
And allocating too many
objects in a short time frame

00:00:25.810 --> 00:00:28.720
is a clear problem that
you should be aware of.

00:00:28.720 --> 00:00:31.520
You have to remember that
the memory heap in Android

00:00:31.520 --> 00:00:34.030
is segmented up
into separate spaces

00:00:34.030 --> 00:00:36.890
based upon what type of
allocation is occurring.

00:00:36.890 --> 00:00:39.710
And as allocations in
any of the spaces grow,

00:00:39.710 --> 00:00:41.940
a GC event can be
kicked off in order

00:00:41.940 --> 00:00:44.720
to make more room for
future allocations.

00:00:44.720 --> 00:00:46.680
And depending on what
runtime you're using,

00:00:46.680 --> 00:00:49.680
GC events can be
stop-the-world events,

00:00:49.680 --> 00:00:52.610
meaning that any managed code
that's in flight on any thread

00:00:52.610 --> 00:00:53.440
will stop.

00:00:53.440 --> 00:00:56.020
The GC event will run, and
then only when it's done

00:00:56.020 --> 00:00:58.100
will execution continue.

00:00:58.100 --> 00:01:00.740
Now, halted execution
from a GC event

00:01:00.740 --> 00:01:03.942
isn't really normally a
noticeable performance problem.

00:01:03.942 --> 00:01:05.900
However, a lot of them,
occurring over and over

00:01:05.900 --> 00:01:09.420
and over and over again, can
quickly eat up your frame time.

00:01:09.420 --> 00:01:11.360
The more time you're
spending doing GCs,

00:01:11.360 --> 00:01:14.000
the less time you have to
do other interesting stuff,

00:01:14.000 --> 00:01:16.560
like rendering or
streaming audio.

00:01:16.560 --> 00:01:19.270
Now, the number one
cause of GC cascades

00:01:19.270 --> 00:01:22.640
like this is something
called memory churn.

00:01:22.640 --> 00:01:25.290
Effectively, memory churn is
when a high number of objects

00:01:25.290 --> 00:01:27.160
are allocated and
potentially freed

00:01:27.160 --> 00:01:29.220
in a really small
amount of time.

00:01:29.220 --> 00:01:31.460
You know, like that new
function that you've just

00:01:31.460 --> 00:01:34.090
written that checks if a
movie director for a new movie

00:01:34.090 --> 00:01:36.510
has been swayed by public
opinion yet, and, if not,

00:01:36.510 --> 00:01:38.530
allocates a horde
of social posts

00:01:38.530 --> 00:01:40.490
that pushes them up
to the inter-tubes.

00:01:40.490 --> 00:01:41.080
Yeah.

00:01:41.080 --> 00:01:42.280
Just like that.

00:01:42.280 --> 00:01:44.050
First off, you should calm down.

00:01:44.050 --> 00:01:46.280
This actually isn't
really that big of a deal.

00:01:46.280 --> 00:01:48.910
Secondly, the quick
allocation of so many objects

00:01:48.910 --> 00:01:51.220
effectively pollutes
the recently allocated

00:01:51.220 --> 00:01:54.330
objects space with a flood
of reserved memory blocks.

00:01:54.330 --> 00:01:56.540
Once you reach a threshold
of reserved memory,

00:01:56.540 --> 00:01:59.490
a GC event will be kicked
off to clear up space.

00:01:59.490 --> 00:02:02.810
Even if the memory allocations
are tiny, the volume of them

00:02:02.810 --> 00:02:05.750
creates pressure on your heap
to kick off more GC events

00:02:05.750 --> 00:02:08.479
over time, which can eat
into your precious frame time

00:02:08.479 --> 00:02:10.560
and cause the user to
notice a performance

00:02:10.560 --> 00:02:12.280
difference since
you'll eventually

00:02:12.280 --> 00:02:14.570
be slipping past your
16-millisecond rendering

00:02:14.570 --> 00:02:15.400
barrier.

00:02:15.400 --> 00:02:17.030
Now, fixing these
types of problems

00:02:17.030 --> 00:02:19.020
are actually pretty
straightforward.

00:02:19.020 --> 00:02:22.040
To start, if you're noticing,
in the Memory Monitor,

00:02:22.040 --> 00:02:24.160
that you're getting
a flood of GC events

00:02:24.160 --> 00:02:27.510
in a very short time frame, then
this points to a high chance

00:02:27.510 --> 00:02:29.960
that you've got a lot of
memory churn going on here.

00:02:29.960 --> 00:02:32.960
You can then dig a little deeper
using the Allocation Tracker

00:02:32.960 --> 00:02:35.620
tool in Android Studio
to identify any areas

00:02:35.620 --> 00:02:38.750
where you may be seeing a horde
of similar object types coming

00:02:38.750 --> 00:02:43.120
from roughly the same call stack
in a very short period of time.

00:02:43.120 --> 00:02:45.440
This is a classic sign
of memory thrashing,

00:02:45.440 --> 00:02:47.320
and easy to see that
it's the right place

00:02:47.320 --> 00:02:48.866
to start your investigation.

00:02:48.866 --> 00:02:50.490
And once you've
identified the culprit,

00:02:50.490 --> 00:02:52.770
it's time to start
moving around your code

00:02:52.770 --> 00:02:56.846
to fix the problem, which itself
is also pretty straightforward.

00:02:56.846 --> 00:02:59.220
For example, make sure that
you're not allocating objects

00:02:59.220 --> 00:03:02.050
in inner loops for
obvious reasons.

00:03:02.050 --> 00:03:04.700
Try to push those allocations
outside of the loop

00:03:04.700 --> 00:03:06.930
or avoid them
entirely if you can.

00:03:06.930 --> 00:03:08.960
The same advice goes
for allocating objects

00:03:08.960 --> 00:03:12.037
in the onDraw functions
of your views.

00:03:12.037 --> 00:03:14.370
This is, effectively, the
same problem as an inner loop.

00:03:14.370 --> 00:03:16.460
Any time the screen
needs to be redrawn

00:03:16.460 --> 00:03:18.170
or an animation is
occurring, you'll

00:03:18.170 --> 00:03:19.920
end up with calls
to these functions

00:03:19.920 --> 00:03:22.270
every single frame,
which can quickly add up,

00:03:22.270 --> 00:03:24.310
adding pressure to your heaps.

00:03:24.310 --> 00:03:26.980
Now, for situations where
you can't remove the need

00:03:26.980 --> 00:03:28.910
to create new objects
in these scenarios,

00:03:28.910 --> 00:03:31.590
consider using an
object pool pattern.

00:03:31.590 --> 00:03:33.540
Effectively, you have
an object pool that

00:03:33.540 --> 00:03:35.190
allocates a group of objects.

00:03:35.190 --> 00:03:38.070
And rather than having your
code go to the heap each time,

00:03:38.070 --> 00:03:42.210
it instead grabs available
objects from your memory pool.

00:03:42.210 --> 00:03:43.900
Of course, the downside
to this pattern

00:03:43.900 --> 00:03:46.664
is that you're now responsible
for freeing objects back

00:03:46.664 --> 00:03:48.830
to the memory pool when
you're done with them, which

00:03:48.830 --> 00:03:50.490
means that for
high-churn objects,

00:03:50.490 --> 00:03:52.970
there's going to be a bit
of a mental overhead needed

00:03:52.970 --> 00:03:55.380
to properly manage when
these objects are created

00:03:55.380 --> 00:03:56.460
and destroyed.

00:03:56.460 --> 00:03:58.690
But that's just the
tip of the iceberg.

00:03:58.690 --> 00:04:01.000
The rest of the Android
Performance Patterns content

00:04:01.000 --> 00:04:03.840
has other great tips and
tricks to solve and address

00:04:03.840 --> 00:04:04.720
these problems.

00:04:04.720 --> 00:04:07.730
And don't forget to join our
Google+ community for other

00:04:07.730 --> 00:04:09.880
insights from fellow developers.

00:04:09.880 --> 00:04:13.000
So keep calm, profile your
code, and always remember,

00:04:13.000 --> 00:04:13.600
perf matters.

00:04:13.600 --> 00:04:16.650
[MUSIC PLAYING]

