WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.200
Today we're going to talk about sorting.
And in particular, we're going to talk

00:00:04.200 --> 00:00:09.330
about two very well-known sorting methods.
One is called Selection Sort; the

00:00:09.330 --> 00:00:14.969
other one is called Insertion Sort. And
when people learn about sorting methods

00:00:14.969 --> 00:00:19.080
they usually learn about these as being
two completely different ideas. You have

00:00:19.080 --> 00:00:22.650
selection sort on the one hand and insertion
sort on the other hand. And what I'm going

00:00:22.650 --> 00:00:26.550
to show you today is that these are
actually the same; you can regard them as

00:00:26.550 --> 00:00:34.350
being equal. The trick is that you just
draw pictures of them. You don't need any

00:00:34.350 --> 00:00:37.380
coding to see this; you don't need to
know any fancy stuff. In fact, you don't

00:00:37.380 --> 00:00:40.260
need to know anything about computer
science at all. If you just draw a

00:00:40.260 --> 00:00:44.219
picture of selection sort in the right
way, and a picture of insertion sort in

00:00:44.219 --> 00:00:48.180
the right way, you see that they're
actually the same thing. And this is kind

00:00:48.180 --> 00:00:51.660
of a secret about sorting methods that
even people like me, who have been doing

00:00:51.660 --> 00:00:55.320
computer science for many years - most
people - or hardly anybody - actually

00:00:55.320 --> 00:00:59.850
knows this little trick. We'll start off
by kind of refreshing ourselves with

00:00:59.850 --> 00:01:04.799
pictures about what sorting actually is.
So, let me draw a box. What we're going to

00:01:04.799 --> 00:01:08.460
do is put some numbers into this box.  It
doesn't matter how many numbers - everything

00:01:08.460 --> 00:01:10.710
which I'm going to show you is completely
general - but we'll do it with five.

00:01:10.710 --> 00:01:18.270
So suppose we do a 5 and a 2 and a 3 and a 1
and a 4. These are the first five numbers, in

00:01:18.270 --> 00:01:21.420
some kind of random order here. But the key
thing is they're not sorted, they're not in

00:01:21.420 --> 00:01:25.020
ascending order. What we'd like
our sorting box to do is

00:01:25.020 --> 00:01:30.479
give us the same numbers out, but in
sorted order. So we'd like to have 1,

00:01:30.479 --> 00:01:35.070
2, 3, 4 and 5 coming out.  Let's
start to think about how we might

00:01:35.070 --> 00:01:39.750
construct a little program which
implemented this kind of sorting

00:01:39.750 --> 00:01:44.100
procedure here. The most basic building
block which you can think of is just a

00:01:44.100 --> 00:01:48.840
little box with four sides. What this box
is going to do is on the left-hand side

00:01:48.840 --> 00:01:53.430
and on the top side you're going to have
two numbers come in. And then, at the

00:01:53.430 --> 00:01:58.229
bottom, the smallest number is going to
pop out. And on the right-hand side the

00:01:58.229 --> 00:02:01.229
largest number is going to pop out. So
you can think of this as being like

00:02:01.229 --> 00:02:06.479
little sorting box for only two numbers.
So, for example, if we put the number 1

00:02:06.479 --> 00:02:11.640
in on the left-hand side and the number
2 in on the top, then what our little

00:02:11.640 --> 00:02:15.079
sorting box would do is give us
the smallest one out the bottom

00:02:15.079 --> 00:02:19.129
and it will give us the biggest one out
the right-hand side. So, this is a sorting

00:02:19.129 --> 00:02:23.030
box for two numbers. And it doesn't matter
the order in which the two numbers come in.

00:02:23.030 --> 00:02:27.680
So if I swap this around and if I had the
2 coming in here and a 1 coming in

00:02:27.680 --> 00:02:29.450
here, it doesn't make any difference. The

00:02:29.450 --> 00:02:33.079
smallest one is going to pop out the
bottom, and the biggest one is going to

00:02:33.079 --> 00:02:37.459
pop out the right-hand side. So the game here
is we've got this basic building block

00:02:37.459 --> 00:02:41.060
and we want to kind of plug these
together, just with pictures, and see

00:02:41.060 --> 00:02:43.430
how you can build a little sorting program

00:02:43.430 --> 00:02:47.120
The trick is that you just build a little
triangle of these boxes. So let's

00:02:47.120 --> 00:02:50.930
put a bunch of these things together.
There's a little triangle of these boxes

00:02:50.930 --> 00:02:54.739
and we're going to just wire them
together in a very straightforward way

00:02:54.739 --> 00:02:58.579
We'll just draw the obvious little links
between them. And each of these boxes

00:02:58.579 --> 00:03:03.230
just sorts two numbers, like we saw a few
moments ago. So let's take our little

00:03:03.230 --> 00:03:06.769
example and just push it through this
little sorting network and actually

00:03:06.769 --> 00:03:12.019
see what happens.  So I think the
numbers we had were 5, 2, 3, 1

00:03:12.019 --> 00:03:18.530
and 4. So, out the bottom, we hope to get
12345. So let's see what happens.

00:03:18.530 --> 00:03:22.819
So we're going to treat the first column
first of all and we'll see what happens.

00:03:22.819 --> 00:03:26.449
So it's really simple. So, you've got the
2 and the 5 coming into the first box.

00:03:26.449 --> 00:03:31.400
So the smallest number pops out the bottom.
So that's the 2, and the biggest

00:03:31.400 --> 00:03:35.479
number comes out the right-hand side - so
that's the 5. And then we do the same with

00:03:35.479 --> 00:03:38.989
the second box in the column. So we've
got 2 coming in, and a 3 coming in, so

00:03:38.989 --> 00:03:42.500
the smallest number pops out the bottom.
And the biggest number comes out

00:03:42.500 --> 00:03:46.220
the right-hand side. And we just do the same
again. Then we got a 1 and a 2 - so the 1

00:03:46.220 --> 00:03:49.939
comes out the bottom, and the 2 comes out
the right-hand side. And then we've got 4

00:03:49.939 --> 00:03:54.139
and a 1 - the 1 pops out the bottom and
the 4 comes out the right-hand side.

00:03:54.139 --> 00:03:59.150
So what you see is that the smallest
number, which in this case is 1, has

00:03:59.150 --> 00:04:03.500
kind of rippled its way down to the
bottom. So what's happened is this first

00:04:03.500 --> 00:04:08.419
column has selected the smallest number.
And it's quite easy to see that that's

00:04:08.419 --> 00:04:12.139
the case, because the top box selects the
smallest from the two numbers it's given,

00:04:12.139 --> 00:04:14.780
and then the second box selects the
smallest numbers from the two numbers

00:04:14.780 --> 00:04:18.229
it's given, and so on and so on.  So kind
of - the smallest number is going to

00:04:18.229 --> 00:04:22.340
ripple its way down to the bottom - so
selecting the smallest one. Then we do

00:04:22.340 --> 00:04:24.760
the same with the remaining columns, and

00:04:24.760 --> 00:04:28.600
we won't be surprised with what happens.
So we've got a 3 coming in and a 5

00:04:28.600 --> 00:04:33.040
coming in. So the 3 will pop out and
the 5 will pop out here. Then we got a 2

00:04:33.040 --> 00:04:38.500
and the 3, so the 2 is smaller so it pops out.
And the 3 comes out here. And then we got 2 and

00:04:38.500 --> 00:04:42.220
a 4, and the 2 is the smallest. And then
the 4 pops out the other side. You see

00:04:42.220 --> 00:04:47.620
what's happened again: from the remaining
numbers 5, 3, 2 and 4, the second column

00:04:47.620 --> 00:04:51.550
has selected the smallest one. And then, if
we just complete this, it's obvious what's

00:04:51.550 --> 00:04:57.460
going to happen. We get a 3 here and a 5
here. 3,4,4,5. So what you see is that

00:04:57.460 --> 00:05:02.410
our little sorting grid has taken five
numbers, in a mixed-up order, and just by

00:05:02.410 --> 00:05:06.640
pushing them through, one column at a
time, we've ended up with the numbers in

00:05:06.640 --> 00:05:11.170
the correct order. And this is known as
Selection Sort, because each column just

00:05:11.170 --> 00:05:15.070
selects the smallest number from what is left.

00:05:15.070 --> 00:05:18.100
OK? So nice and easy. You don't need to know
anything about computer science, anything

00:05:18.100 --> 00:05:21.340
about algorithms, anyone can understand
what's going on with selection sort here.

00:05:21.340 --> 00:05:27.850
But, you can actually view this picture
in another way. So let me re-draw the same

00:05:27.850 --> 00:05:32.500
picture. So I just wire it up, in exactly
the same way as before. And we'll push

00:05:32.500 --> 00:05:39.640
exactly the same five numbers through. So
we started off with a 5,2,3,1 and a 4.

00:05:39.640 --> 00:05:44.320
So, what we did last time is we treated it
in terms of the columns. But actually you

00:05:44.320 --> 00:05:47.890
can do exactly the same thing in terms
of the rows. So we'll do one row at a

00:05:47.890 --> 00:05:51.910
time, and actually see what happens.  So,
if we consider the first row, it's the

00:05:51.910 --> 00:05:55.420
same as before. We get the 2 and the
5 coming in. And the 2 pops out here,

00:05:55.420 --> 00:05:59.620
and 5 pops out on the right-hand side,
because the 2 is the smallest one.

00:05:59.620 --> 00:06:03.460
So we'll do the second row. So what happens?
So, we've got a 2 and a 3 coming in.

00:06:03.460 --> 00:06:07.930
So the 2 is the smallest; it'll come out the
bottom. And 3 is the biggest so it comes

00:06:07.930 --> 00:06:11.650
out on the right-hand side. And then we
go over to this box in the row. We've got

00:06:11.650 --> 00:06:16.030
a 3 and a 5. So, the 3 comes out the
bottom, and the 5 comes out the

00:06:16.030 --> 00:06:18.820
right-hand side. So what's
actually happened is the

00:06:18.820 --> 00:06:22.420
second row has taken the 2 and the 5,
which are already in the right

00:06:22.420 --> 00:06:26.230
order, because the first box did that
for us.  And it's taken the 3 and it's

00:06:26.230 --> 00:06:29.530
put 3 into the correct place. So maybe
if I use a different colour here,

00:06:29.530 --> 00:06:33.580
you can see this. So I've got
a 2 and a 5 here.  And then

00:06:33.580 --> 00:06:37.500
I've got a 3 coming in on the
left-hand side. And what the second row

00:06:37.500 --> 00:06:43.680
does, is it puts the 3 into the right place.
So, out the bottom, you get 2, 3 and 5.

00:06:43.680 --> 00:06:47.550
So what the second row has done is
inserted this number into the right

00:06:47.550 --> 00:06:50.940
place. And let's see what happens with
the next row. So then we've got a 1 and a 2

00:06:50.940 --> 00:06:54.210
coming in. So the 1 comes out the bottom,
because it's the smallest. And then the

00:06:54.210 --> 00:06:59.130
2 comes out here. And we've got a 2 and a 3
Se we get the 2 and the 3. And then we've got

00:06:59.130 --> 00:07:03.330
a 3 and a 5. And the 3 is the smallest, so
it comes out here. What you see is exactly

00:07:03.330 --> 00:07:07.740
the same thing has happened again. We
had a 1 here and then we had 2, 3

00:07:07.740 --> 00:07:13.200
and 5, which has already being sorted
by the grid above us. And then this row

00:07:13.200 --> 00:07:15.840
here is just going to put
the 1 into the right place.

00:07:15.840 --> 00:07:20.400
What's popped out the bottom of this grid
is 1, 2, 3 and 5. So we just complete

00:07:20.400 --> 00:07:24.570
the picture. We'll get the expected results.
So we've got a 1 and a 4. So, the 1 is the

00:07:24.570 --> 00:07:28.290
smallest so it pops out the bottom. And the
4 goes around here. And we've got a 2 and

00:07:28.290 --> 00:07:33.450
a 4. So the 2 pops out and the 4.  And the
3 and the 4. So the 3 is smallest and then

00:07:33.450 --> 00:07:37.260
we get the 4 and the 5. This sorting
method, when you think about the

00:07:37.260 --> 00:07:42.120
rows rather than the columns, is called
Insertion Sort. And it's called

00:07:42.120 --> 00:07:47.669
insertion sort because each of these
rows just inserts a number into the

00:07:47.669 --> 00:07:51.750
correct position in a sorted sequence. So,
for example, if we look at the bottom row

00:07:51.750 --> 00:07:56.820
here, the input on the top is a
sorted sequence - 1, 2, 3 and 5 -

00:07:56.820 --> 00:08:00.510
those are in the right order. And all the
bottom row is doing, is putting this 4

00:08:00.510 --> 00:08:04.440
into the correct position so that we
get 1, 2, 3, 4 and 5.

00:08:04.440 --> 00:08:09.510
Previously, we had exactly the same picture,
and we said that's selection sort,

00:08:09.510 --> 00:08:15.090
if you view it in terms of the columns. And
if you take the same picture now, and

00:08:15.090 --> 00:08:20.850
view it in terms of the rows, this way
around, then we get insertion sort. So, for

00:08:20.850 --> 00:08:24.900
me this is a bit of magic. I've been in
computer science for a long, long time.

00:08:24.900 --> 00:08:27.780
I was thinking about how to teach sorting
algorithms to my students a few years ago,

00:08:27.780 --> 00:08:33.180
and came up with this pictorial idea, and
I didn't realize until then that

00:08:33.180 --> 00:08:37.229
insertion sort and selection sort are
exactly the same thing. But you only see

00:08:37.229 --> 00:08:40.530
this if you look at it in the
right way using the pictures.

00:08:40.530 --> 00:08:44.370
&gt;&gt; Sean: Basically it all comes down to perspective, right? 
&gt;&gt; Graham: Yes, exactly, it's ...

00:08:44.370 --> 00:08:47.610
if you look at stuff in the right way
then you can see things that you

00:08:47.610 --> 00:08:50.279
couldn't see before. So, if
you write programs to do

00:08:50.279 --> 00:08:53.519
insertion sort or selection sort, the
kind of structure here, which is the same,

00:08:53.519 --> 00:08:56.999
is being kind of hidden from you.
But if you just draw some simple

00:08:56.999 --> 00:09:00.600
pictures and forget all your fancy
computing, then you end up with an

00:09:00.600 --> 00:09:04.170
observation which is quite interesting.
&gt;&gt; Sean: Have you come across anything else that

00:09:04.170 --> 00:09:07.529
that is kind of similar? Have you gone
through other sort of algorithms and

00:09:07.529 --> 00:09:11.850
thought about them this way?
&gt;&gt; Graham: Yes a colleague of mine from Oxford a

00:09:11.850 --> 00:09:15.449
few years ago, I was showing him this to
him. And he said: "Oh! we can write a paper

00:09:15.449 --> 00:09:19.559
about this!" So we tried to look at, like,
Quicksort and Merge Sort, and see if they

00:09:19.559 --> 00:09:23.430
had the same kind of duality. But it
didn't quite work out at the time. And we

00:09:23.430 --> 00:09:27.569
kind of gave up writing the paper about
it. But, I think this is just a simple

00:09:27.569 --> 00:09:34.420
observation in its own right here.

