WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Let's build a better tool.

00:00:02.000 --> 00:00:08.000
Here I built a function called "timedcalls" with the plural s rather than a single timedcall,

00:00:08.000 --> 00:00:12.000
and it takes a number N, saying repeat this timing N times.

00:00:12.000 --> 00:00:15.000
Then it takes the function and the arguments to apply to.

00:00:15.000 --> 00:00:18.000
It builds up a list of the timed calls.

00:00:18.000 --> 00:00:21.000
It throws away the results and just takes the time.

00:00:21.000 --> 00:00:24.000
Then it returns three values, the minimum of the times,

00:00:24.000 --> 00:00:27.000
the average of the times, and the maximum of the times.

00:00:27.000 --> 00:00:32.000
From those you can do whatever statistical analysis you want to do in order

00:00:32.000 --> 00:00:35.000
to get a better feeling for what the timing is like.

00:00:35.000 --> 00:00:37.000
Now, if the function runs very quickly--

00:00:37.000 --> 00:00:40.000
say, if the function took 100th of a second

00:00:40.000 --> 00:00:44.000
then you might want to give an N of 1000 or so.

00:00:44.000 --> 00:00:48.000
If the function takes about a second to run, maybe you don't want to wait that long

00:00:48.000 --> 00:00:50.000
or maybe you want to give a smaller value of N.

00:00:50.000 --> 00:00:53.000
Part of the problem is if you have a good idea how long the function takes,

00:00:53.000 --> 00:00:56.000
then you can be precise about what a good value of N is.

00:00:56.000 --> 00:00:58.000
If you don't, you don't know.

00:00:58.000 --> 00:01:01.000
I'm going to propose a different version of timedcalls.

00:01:01.000 --> 00:01:05.000
This version has the same signature as the three inputs

00:01:05.000 --> 00:01:08.000
and returns the min, average, and max,

00:01:08.000 --> 00:01:11.000
but this time it treats N two different ways.

00:01:11.000 --> 00:01:16.000
What we're going to do is say if N is an integer, then do the same thing we did before,

00:01:16.000 --> 00:01:20.000
but if N is a floating point number, then what we want to do is keep on

00:01:20.000 --> 00:01:24.000
repeatedly call timedcalls for the number of trials it takes until we've

00:01:24.000 --> 00:01:26.000
added up to that number of seconds.

00:01:26.000 --> 00:01:29.000
If N is equal to the integer 10, we repeat 10 timedcalls.

00:01:29.000 --> 00:01:34.000
If N is equal to the floating point number 10.0,

00:01:34.000 --> 00:01:37.000
then we repeat it until 10.0 seconds have elapsed.

00:01:37.000 --> 00:01:42.000
Here is a hint. We can ask if N is an integer and then do one thing.

00:01:42.000 --> 09:59:59.000
If N is not an integer, then to the other. See if you can fill in that code.

