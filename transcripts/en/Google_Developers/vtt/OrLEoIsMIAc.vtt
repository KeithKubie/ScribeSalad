WEBVTT
Kind: captions
Language: en

00:00:02.470 --> 00:00:06.330
what's great about the Android runtime
is that most of the stress of memory

00:00:06.330 --> 00:00:08.290
reclamation is done for you

00:00:08.290 --> 00:00:11.150
the system will track what you're doing
and when it sees that an object is in

00:00:11.150 --> 00:00:11.920
need anymore

00:00:11.920 --> 00:00:15.530
it will free it on your behalf now while
this is great for your general health

00:00:15.530 --> 00:00:19.279
and blood pressure this doesn't exclude
performance problems from happening here

00:00:19.279 --> 00:00:22.439
my name's Colt McAnlis and it's a good
idea for you to know

00:00:22.439 --> 00:00:26.340
what types a performance Paul's work
under the hood of your managed memory

00:00:26.340 --> 00:00:30.099
environment as see when the amount of
memory you have allocated reaches an

00:00:30.099 --> 00:00:30.730
upper limit

00:00:30.730 --> 00:00:35.010
a garbage collection event we kicked off
to free any resources that might not be

00:00:35.010 --> 00:00:36.140
needed any longer

00:00:36.140 --> 00:00:40.719
freeing up space for future allocations
and depending on what runtime using a GC

00:00:40.719 --> 00:00:43.170
event can stop application code from
executing

00:00:43.170 --> 00:00:46.700
in order to properly clean up any
resources that are being used anymore

00:00:46.700 --> 00:00:51.739
now I G seas are a common and natural
part of the management environment

00:00:51.739 --> 00:00:55.410
and the garbage collection events in
Android har really pretty fast

00:00:55.410 --> 00:00:59.629
performance problems here come from the
fact that misusing the memory in your

00:00:59.629 --> 00:01:00.500
application

00:01:00.500 --> 00:01:04.119
can cause a cascade of these events to
kick off that's heating up your free

00:01:04.119 --> 00:01:04.600
time

00:01:04.600 --> 00:01:08.330
anytime your frame drips about the 16 no
second barrier

00:01:08.330 --> 00:01:11.680
users are going to start to notice so
any your code that

00:01:11.680 --> 00:01:14.869
forces allocated memory to spike above
this threshold

00:01:14.869 --> 00:01:18.170
can cause problems memory leaks are one
such example

00:01:18.170 --> 00:01:22.619
basically your code allocate memory for
a large number objects and never freeze

00:01:22.619 --> 00:01:23.280
that memory

00:01:23.280 --> 00:01:26.909
over time these objects act as a large
immovable block a memory

00:01:26.909 --> 00:01:30.470
forcing the referee application to
operate in what's left up the heat

00:01:30.470 --> 00:01:33.840
member can also become tighter
allocating and freeing a large amount of

00:01:33.840 --> 00:01:35.900
objects in a short period of time

00:01:35.900 --> 00:01:39.700
saturating your heat with temporary
objects and again kicking off a GC

00:01:39.700 --> 00:01:43.630
as a result for example allocating new
objects in the middle the nested loops

00:01:43.630 --> 00:01:44.579
or in the on

00:01:44.579 --> 00:01:48.579
draw functions are your views now the
solution here is pretty simple:

00:01:48.579 --> 00:01:52.899
picture code but in order to do that you
need to know where exactly things are

00:01:52.899 --> 00:01:53.680
going wrong

00:01:53.680 --> 00:01:57.420
for chilling entrance to do you have
some great tools to help with this

00:01:57.420 --> 00:02:01.399
firstly using memory monitor tool will
give you a sense of how your memory

00:02:01.399 --> 00:02:02.619
allocations are working

00:02:02.619 --> 00:02:06.259
over the lifetime of your application
every time you see a dip in the

00:02:06.259 --> 00:02:07.200
allocated memory

00:02:07.200 --> 00:02:11.750
that see a GC event occurring lots of
dips in a really short time frame

00:02:11.750 --> 00:02:13.120
signals a huge problem

00:02:13.120 --> 00:02:16.780
long and for more detailed look at what
portions have your coat or specifically

00:02:16.780 --> 00:02:17.769
allocating memory

00:02:17.769 --> 00:02:22.170
you can use the allocation tracker tab
in Android studio or

00:02:22.170 --> 00:02:26.180
use the Heat have an Android studio to
see if there's a spike in a certain type

00:02:26.180 --> 00:02:26.840
of object

00:02:26.840 --> 00:02:30.010
or if that object-type isn't being freed
when it should be

00:02:30.010 --> 00:02:34.590
well those are really bad things so for
every garbage collection event that you

00:02:34.590 --> 00:02:35.200
can avoid

00:02:35.200 --> 00:02:39.680
your app has more time per frame to do
interesting things which allow you to

00:02:39.680 --> 00:02:41.470
create a smooth beautiful

00:02:41.470 --> 00:02:45.450
user experience which is why I need to
check out the rest at the tip that

00:02:45.450 --> 00:02:49.379
Android performance patterns and don't
forget to join our Google+ community to

00:02:49.379 --> 00:02:49.950
get more

00:02:49.950 --> 00:02:54.160
in the trenches advice from other
developers so as always keep calm

00:02:54.160 --> 00:02:56.120
profile your code to remember perhaps

