WEBVTT
Kind: captions
Language: en

00:00:09.940 --> 00:00:12.110
PAUL SAXMAN: Hello, and welcome
to another episode of

00:00:12.110 --> 00:00:14.720
"Google Maps Developer
Shortcuts." I'm Paul Saxman.

00:00:14.720 --> 00:00:18.380
And today I'm going to talk
about getting data from Google

00:00:18.380 --> 00:00:22.470
Drive onto Android and into
a Google Map on Android.

00:00:22.470 --> 00:00:26.790
And that's using the Google
Drive web services, JSON

00:00:26.790 --> 00:00:31.380
processing in Android, and the
Google Maps Android API v2.

00:00:31.380 --> 00:00:34.150
So to show you what I'm talking
about here, if we go

00:00:34.150 --> 00:00:37.130
over to the tablet I have
an application here.

00:00:37.130 --> 00:00:38.140
It's just a very simple map.

00:00:38.140 --> 00:00:40.240
And I actually have a bunch
of markers on here.

00:00:40.240 --> 00:00:42.310
Each of these markers, if I
touch it, you can see it's a

00:00:42.310 --> 00:00:43.960
city and a population.

00:00:43.960 --> 00:00:45.610
So this is actually the natural
earth data that we

00:00:45.610 --> 00:00:48.660
talked about in a previous
episode on getting

00:00:48.660 --> 00:00:49.670
Drive data in a map.

00:00:49.670 --> 00:00:53.350
If you haven't seen that
episode, definitely watch it.

00:00:53.350 --> 00:00:56.055
Because that actually sets the
premise for actually serving

00:00:56.055 --> 00:01:00.280
JSON data from Google Drive.

00:01:00.280 --> 00:01:01.740
I actually added quite
a bit more data here.

00:01:01.740 --> 00:01:05.630
So there's, I think, about 50
to 100 points on this map.

00:01:05.630 --> 00:01:07.220
So not too exciting.

00:01:07.220 --> 00:01:09.580
It's just a bunch of markers
with info windows.

00:01:09.580 --> 00:01:11.820
This is pretty simple stuff
to do in Android.

00:01:11.820 --> 00:01:17.570
But what I'm going to show you
now, if we go over to the

00:01:17.570 --> 00:01:20.590
Chromebook, is-- gonna go
back over to my data.

00:01:20.590 --> 00:01:21.890
You can see, like
I said before, I

00:01:21.890 --> 00:01:22.880
added a lot more data.

00:01:22.880 --> 00:01:24.290
About 100 points.

00:01:24.290 --> 00:01:25.640
These are actually
all the cities.

00:01:25.640 --> 00:01:27.200
We have the lat, longs,
population.

00:01:27.200 --> 00:01:29.740
So if you saw the other episode,
this should all look

00:01:29.740 --> 00:01:31.790
pretty familiar to you.

00:01:31.790 --> 00:01:34.310
I tweaked the script a
little bit this time.

00:01:34.310 --> 00:01:37.180
Instead of actually-- what I did
last time was taking the

00:01:37.180 --> 00:01:38.880
values out of the spreadsheet.

00:01:38.880 --> 00:01:41.960
And JSON is stringifying it.

00:01:41.960 --> 00:01:44.770
So the JSON was an array
of an array.

00:01:44.770 --> 00:01:47.420
So it was rows by columns.

00:01:47.420 --> 00:01:49.450
What I did now, though, is
a little bit different.

00:01:49.450 --> 00:01:52.730
Is I'm actually using object
literal notation to actually

00:01:52.730 --> 00:01:55.840
create an object.

00:01:55.840 --> 00:01:58.060
It's going to be a JavaScript
object, or, in this case, a

00:01:58.060 --> 00:02:00.030
Google script object.

00:02:00.030 --> 00:02:03.390
And then putting that into
a collection, an array.

00:02:03.390 --> 00:02:05.240
And then stringifying
that array.

00:02:05.240 --> 00:02:09.630
So the end result with that is
if I call this web service--

00:02:09.630 --> 00:02:11.550
and setting up the web service
was in that previous show--

00:02:11.550 --> 00:02:14.740
but if I call the service now,
you can see that I have array.

00:02:14.740 --> 00:02:16.580
And then I have key
value pairs now.

00:02:16.580 --> 00:02:17.530
Name, Tokyo.

00:02:17.530 --> 00:02:17.840
Lat.

00:02:17.840 --> 00:02:18.590
Long.

00:02:18.590 --> 00:02:21.445
This is actually an
array itself of

00:02:21.445 --> 00:02:22.770
the lat, long points.

00:02:22.770 --> 00:02:26.240
And population, which is an
integer of very large size.

00:02:29.190 --> 00:02:30.930
So seeing this actually
in Drive.

00:02:30.930 --> 00:02:33.110
So this is actually in an index,
that HTML file, that

00:02:33.110 --> 00:02:36.010
I'm actually serving from using
Google Drive hosting.

00:02:36.010 --> 00:02:37.560
You can see all this data
plotted on here.

00:02:37.560 --> 00:02:39.310
Same idea.

00:02:39.310 --> 00:02:42.610
The very cool thing about this,
though, is that this

00:02:42.610 --> 00:02:45.400
data is fully editable.

00:02:45.400 --> 00:02:47.640
If I want to share this
information or share editing

00:02:47.640 --> 00:02:51.740
rights to this script or this
spreadsheet, we can actually

00:02:51.740 --> 00:02:55.700
modify this data live, and it'll
actually be represented

00:02:55.700 --> 00:02:58.850
in our web app and in
our Android app.

00:02:58.850 --> 00:03:00.110
So getting this into--

00:03:00.110 --> 00:03:02.810
like I said before, this show's
more about getting it

00:03:02.810 --> 00:03:03.810
in Android.

00:03:03.810 --> 00:03:05.350
Show you how that's done.

00:03:05.350 --> 00:03:07.840
We're going to go over
to GitHub here.

00:03:07.840 --> 00:03:10.500
I set up a gist just to
capture this data.

00:03:10.500 --> 00:03:11.520
Everything up above here.

00:03:11.520 --> 00:03:12.950
So we have a lot
of information.

00:03:12.950 --> 00:03:15.230
So I have all my
imports set up.

00:03:15.230 --> 00:03:18.320
This is kind of standard
Android stuff.

00:03:18.320 --> 00:03:21.460
If you actually use
the Hello--

00:03:21.460 --> 00:03:22.320
what was it?

00:03:22.320 --> 00:03:23.090
Hello, Map.

00:03:23.090 --> 00:03:25.800
Actually, Chris Broadfoot did a
show a couple weeks ago that

00:03:25.800 --> 00:03:28.510
was a five minute getting up
and running with Android

00:03:28.510 --> 00:03:31.870
development with the Google
Maps Android API v2.

00:03:31.870 --> 00:03:33.650
If you run that, you'll actually
pretty much start

00:03:33.650 --> 00:03:36.790
with an activity that just has
the map and doesn't really

00:03:36.790 --> 00:03:39.050
render much in it.

00:03:39.050 --> 00:03:41.900
So definitely run through that
application if you want to

00:03:41.900 --> 00:03:43.110
repeat what I showed here.

00:03:43.110 --> 00:03:45.500
Run through that application
or that show.

00:03:45.500 --> 00:03:46.700
Get that application set up.

00:03:46.700 --> 00:03:50.260
And then just paste in what I'm
going to show you here.

00:03:50.260 --> 00:03:53.670
So what I did is, in the
set up map operation.

00:03:53.670 --> 00:03:57.510
So this is your own method that
you maintain yourself.

00:03:57.510 --> 00:03:59.120
I'm actually running
a new thread.

00:03:59.120 --> 00:04:01.970
And I'm calling this method
retrieve and add cities.

00:04:01.970 --> 00:04:04.260
This is another method that
I've set up as well.

00:04:04.260 --> 00:04:06.410
The reason I'm doing it in a
separate thread is because

00:04:06.410 --> 00:04:07.650
it's a network operation.

00:04:07.650 --> 00:04:09.740
I'm actually doing a web service
call, getting the

00:04:09.740 --> 00:04:12.290
data, processing it, and then
plotting on the map.

00:04:12.290 --> 00:04:16.589
If we got down to the retrieve
and add cities method, JSON

00:04:16.589 --> 00:04:20.690
processing in Android,
truthfully, makes my eyes hurt

00:04:20.690 --> 00:04:21.360
just little bit.

00:04:21.360 --> 00:04:23.440
But it's not too bad.

00:04:23.440 --> 00:04:26.565
All you really have to do is set
up your HTTP connections.

00:04:26.565 --> 00:04:27.950
So I have a URL.

00:04:27.950 --> 00:04:30.810
From the URL I'm getting the
HTTP-URL connection out.

00:04:30.810 --> 00:04:32.540
And then getting a reader.

00:04:32.540 --> 00:04:35.570
From there, I actually have to
get the data out in a string

00:04:35.570 --> 00:04:38.480
so I can actually send it
to the JSON library.

00:04:38.480 --> 00:04:39.450
So here I'm actually
just appending

00:04:39.450 --> 00:04:41.740
it to a string builder.

00:04:41.740 --> 00:04:43.690
And then later, what
I'm doing-- so I

00:04:43.690 --> 00:04:44.720
have another method.

00:04:44.720 --> 00:04:46.400
So this is actually
going the inverse.

00:04:46.400 --> 00:04:49.040
Since I'm running in a worker
thread, now I have to actually

00:04:49.040 --> 00:04:51.750
do the UI work back
on the UI thread.

00:04:51.750 --> 00:04:53.240
The UI work is actually
plotting the

00:04:53.240 --> 00:04:54.700
markers on the map.

00:04:54.700 --> 00:04:57.100
Because that's a UI operation.

00:04:57.100 --> 00:04:59.700
So from here, I have a method
that I called create

00:04:59.700 --> 00:05:00.520
markers from JSON.

00:05:00.520 --> 00:05:02.080
And then just string--

00:05:02.080 --> 00:05:03.640
taking that string builder
and converting

00:05:03.640 --> 00:05:04.960
it back to a string.

00:05:04.960 --> 00:05:10.700
So this method is being called
on the UI thread.

00:05:10.700 --> 00:05:13.440
And I'm just passing
it the JSON string.

00:05:13.440 --> 00:05:17.180
And then last method, this is
where the JSON processing

00:05:17.180 --> 00:05:18.050
comes into play.

00:05:18.050 --> 00:05:20.750
Like I said, this isn't nearly
as clean as actually doing

00:05:20.750 --> 00:05:27.205
JSON processing in JavaScript,
just because it's JavaScript

00:05:27.205 --> 00:05:30.860
object notation and not JSON
or Java object notation.

00:05:30.860 --> 00:05:33.890
But you can see here-- so I'm
just iterating over that array

00:05:33.890 --> 00:05:36.740
that we showed earlier
on JSON objects.

00:05:36.740 --> 00:05:40.840
And for each one of those, I'm
just calling map.admarker,

00:05:40.840 --> 00:05:43.620
calling the marker options or
setting up the marker options,

00:05:43.620 --> 00:05:47.040
applying the title snippet
and position.

00:05:47.040 --> 00:05:49.810
And these three or four things
are actually just coming

00:05:49.810 --> 00:05:51.930
directly out of the
JSON object.

00:05:51.930 --> 00:05:55.095
So JSON object get string
from the name to string.

00:05:55.095 --> 00:05:57.210
Then I'm getting the
population out.

00:05:57.210 --> 00:05:58.030
The lat long.

00:05:58.030 --> 00:05:59.980
That was an array of arrays.

00:05:59.980 --> 00:06:00.770
And one more time.

00:06:00.770 --> 00:06:04.570
If we go back to the Nexus
10 here, the end result

00:06:04.570 --> 00:06:05.920
is pretty much this.

00:06:05.920 --> 00:06:06.930
Could show you--

00:06:06.930 --> 00:06:10.690
if I do tweak the data in the
My Awesome Data spreadsheet,

00:06:10.690 --> 00:06:14.010
you'd actually see the data
manipulated here.

00:06:14.010 --> 00:06:15.460
But you get the idea.

00:06:15.460 --> 00:06:16.860
So thanks for joining
us this week.

00:06:16.860 --> 00:06:20.200
Again, if you want to watch the
two prior episodes, it's

00:06:20.200 --> 00:06:23.810
Kickstarting Maps Android
Development using the Hello,

00:06:23.810 --> 00:06:27.080
Map Android application.

00:06:27.080 --> 00:06:29.900
And Getting Drive Data
into Google Maps.

00:06:29.900 --> 00:06:33.325
And then this will get that
data into Android.

00:06:33.325 --> 00:06:34.410
So thanks for joining us.

00:06:34.410 --> 00:06:39.600
And if you have any questions
or comments, let us know in

00:06:39.600 --> 00:06:41.920
YouTube or on Google+.

00:06:41.920 --> 00:06:44.980
And with that, thanks
for joining us.

00:06:44.980 --> 00:06:46.900
And all the links are
in the description.

00:06:46.900 --> 00:06:48.150
So enjoy.

