WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:03.790
So that brings us to Lamport's Physical Clock,

00:00:03.790 --> 00:00:06.120
and the notation we're going to use for that is

00:00:06.120 --> 00:00:08.340
this funny symbol here. So, this is saying

00:00:08.340 --> 00:00:12.690
that in physical time, in real time, event a

00:00:12.690 --> 00:00:15.730
in the distributed system happened before b. So

00:00:15.730 --> 00:00:17.810
if I want to make sure that, that an

00:00:17.810 --> 00:00:21.240
event a in the distributed system anywhere happened in

00:00:21.240 --> 00:00:25.110
absolute, real time before b, so Pi, there's a

00:00:25.110 --> 00:00:32.100
process Pj. Event a is happening on Pi and event b is happening on Pj. And what

00:00:32.100 --> 00:00:34.550
we want to make sure is that the time

00:00:34.550 --> 00:00:38.440
stamp associated with a has to be less than

00:00:38.440 --> 00:00:41.620
the time stamp associate with b. If I want

00:00:41.620 --> 00:00:45.310
to guarantee that a, in real time, happened before

00:00:45.310 --> 00:00:48.270
b, so, a in real time happened before b,

00:00:48.270 --> 00:00:50.610
that is how you have to read this notation,

00:00:50.610 --> 00:00:53.930
that, in real time, the event a happened before

00:00:53.930 --> 00:00:57.180
b. And in order to satisfy that, the condition

00:00:57.180 --> 00:00:59.990
is, the time stamp associated with a has to

00:00:59.990 --> 00:01:02.970
be less than the time stamp associated with b.

00:01:02.970 --> 00:01:05.280
So to guarantee this, and we are talking about

00:01:05.280 --> 00:01:07.940
real time here, so real time stamp associated with

00:01:07.940 --> 00:01:11.330
a and b. In order to ensure that the

00:01:11.330 --> 00:01:15.800
real time associated with these events give you this guarantee,

00:01:15.800 --> 00:01:19.200
you have to have certain conditions associated with the

00:01:19.200 --> 00:01:23.330
clocks that are on the machines Pi and Pj.

00:01:23.330 --> 00:01:26.330
And the first condition, which I'll call PC1, I'll

00:01:26.330 --> 00:01:29.220
refer to that as PC1 later on, the condition

00:01:29.220 --> 00:01:32.680
is a bound on individual clock drift. So PC1

00:01:32.680 --> 00:01:35.850
is a condition which gives a bound on individual

00:01:35.850 --> 00:01:38.650
clock drift. Informally, what this condition is going to tell

00:01:38.650 --> 00:01:41.310
you, is that the clocks don't drift that much.

00:01:41.310 --> 00:01:47.670
So let's talk about this. If, what is the time that is read on process P1 at

00:01:47.670 --> 00:01:54.200
time t? If t is the real time, at time t, real time t, I look at the clock on

00:01:54.200 --> 00:01:57.440
my machine and that is Ci of t, what

00:01:57.440 --> 00:02:00.230
should it read? Well, it should read t. Now, if

00:02:00.230 --> 00:02:02.640
it doesn't, that's when we are saying it is

00:02:02.640 --> 00:02:06.710
drifting with respect to t. And so what this equation

00:02:06.710 --> 00:02:12.930
is saying is dci over dt is the clock drift. The absolute value of that drift is

00:02:12.930 --> 00:02:17.700
a very, very small. So in other words, what we are saying is, all the

00:02:17.700 --> 00:02:22.570
clocks in the distributed system, whether we are talking about Ci on Pi or

00:02:22.570 --> 00:02:27.650
Cj on Pi all these clocks are running approximately

00:02:27.650 --> 00:02:31.900
correctly. So that the clock individual drift, is very

00:02:31.900 --> 00:02:35.330
very small. So k is the individual clock drift, and

00:02:35.330 --> 00:02:37.720
we are hoping that it is very, very small. And you

00:02:37.720 --> 00:02:40.880
can see that if Ci of t is equal to t.

00:02:40.880 --> 00:02:44.170
Then dCi of dt should be equal to 1 and therefore

00:02:44.170 --> 00:02:46.280
this would be a 0. So, the left hand side of

00:02:46.280 --> 00:02:48.950
this will be a zero and so that's why we're saying

00:02:48.950 --> 00:02:51.900
that k has to be a very small number. The second

00:02:51.900 --> 00:02:57.080
condition is that the mutual drift between the clocks on different

00:02:57.080 --> 00:03:00.250
nodes of the distributed system should be very small.

00:03:00.250 --> 00:03:02.940
Should, there should be a bound on mutual clock drift,

00:03:02.940 --> 00:03:06.370
so that is captured in this condition saying that.

00:03:06.370 --> 00:03:09.580
For all ij, any pair of nodes in the entire

00:03:09.580 --> 00:03:12.630
distributed system, the difference between the time that I

00:03:12.630 --> 00:03:16.180
read on my clock and the time that I read

00:03:16.180 --> 00:03:19.100
on somebody else's clock is very, very small. because

00:03:19.100 --> 00:03:22.030
this is the mutual clock drift. As I said earlier,

00:03:22.030 --> 00:03:25.020
at real time t, my clock should also

00:03:25.020 --> 00:03:27.848
be reading t. This guy also should be reading

00:03:27.848 --> 00:03:29.630
t. If it doesn't, that's when you have

00:03:29.630 --> 00:03:32.400
a drift. What we're seeing is the mutual clock

00:03:32.400 --> 00:03:35.170
drift between any two nodes in the entire

00:03:35.170 --> 00:03:39.700
distributed system is bound by a small quantity, epsilon.

00:03:39.700 --> 00:03:43.150
So k and epsilon are the two important parameters

00:03:43.150 --> 00:03:47.084
In the physical clock condition. Intuitively, we're going to

00:03:47.084 --> 00:03:52.880
argue that these values, the absolute values of these individual clock drift and

00:03:52.880 --> 00:03:54.980
mutual clock drift, has to be

00:03:54.980 --> 00:03:59.750
negligible compared to the inter-process communication time.

