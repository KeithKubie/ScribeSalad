WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:04.050
One idea for this virtualization framework

00:00:04.050 --> 00:00:06.740
is what is called full virtualization, and

00:00:06.740 --> 00:00:09.580
in full virtualization the idea is to

00:00:09.580 --> 00:00:13.160
leave the operating system pretty much untouched.

00:00:13.160 --> 00:00:18.200
So you can run the unchanged binary of the operating system on top of

00:00:18.200 --> 00:00:21.700
the hypervisor. This is called full virtualization

00:00:21.700 --> 00:00:25.240
because the operating system is completely untouched.

00:00:25.240 --> 00:00:29.820
Nothing has been changed. Not even a single line of code is modified in these

00:00:29.820 --> 00:00:33.210
operating systems in order to run on the

00:00:33.210 --> 00:00:36.530
hypervisor simultaneously. But we have to be a

00:00:36.530 --> 00:00:38.860
little bit clever to get this to work,

00:00:38.860 --> 00:00:42.630
however. Operating systems running on top of the

00:00:42.630 --> 00:00:47.600
hypervisor are run as user-level processes. They're not

00:00:47.600 --> 00:00:51.430
running at the same level of privilege as

00:00:51.430 --> 00:00:53.240
a Linux operating system that is running

00:00:53.240 --> 00:00:55.820
on bare metal. But if the operating system

00:00:55.820 --> 00:00:59.380
code is unchanged, it doesn't know that it

00:00:59.380 --> 00:01:01.710
does not have the privilege for doing certain

00:01:01.710 --> 00:01:06.610
things that it would do normally on bare metal hardware. In

00:01:06.610 --> 00:01:11.900
other words, when the operating system executes some privileged

00:01:11.900 --> 00:01:16.850
instructions, meaning they have to be, in a privileged mode or kernel

00:01:16.850 --> 00:01:19.500
mode to run on bare metal in

00:01:19.500 --> 00:01:23.970
order to execute those instructions. Those instructions

00:01:23.970 --> 00:01:26.360
will create a trap that goes into

00:01:26.360 --> 00:01:30.050
the hypervisor and the hypervisor will then emulate

00:01:30.050 --> 00:01:33.958
the intended functionality of the operating system.

00:01:33.958 --> 00:01:35.780
And this is what is called the

00:01:35.780 --> 00:01:40.150
trap and emulate strategy. Essentially, each operating

00:01:40.150 --> 00:01:42.810
system thinks it is running on bare metal.

00:01:42.810 --> 00:01:45.500
And therefore, it does exactly what it

00:01:45.500 --> 00:01:49.790
would have done on a bare-metal processor, meaning

00:01:49.790 --> 00:01:53.360
that it'll try to execute certain privileged instructions

00:01:53.360 --> 00:01:56.140
thinking it has the right privilege. But it

00:01:56.140 --> 00:01:57.910
does not have the right privilege, because

00:01:57.910 --> 00:02:01.090
it's run as a user-level process on top

00:02:01.090 --> 00:02:04.290
of the hypervisor. And therefore, when they try

00:02:04.290 --> 00:02:08.160
to do something that requires. A high level

00:02:08.160 --> 00:02:13.020
of privilege than the user level, it will result in a trap into

00:02:13.020 --> 00:02:16.470
the hypervisor, and the hypervisor will then

00:02:16.470 --> 00:02:20.100
emulate the intended functionality of the particular

00:02:20.100 --> 00:02:23.490
operating system. There are some thorny issues

00:02:23.490 --> 00:02:25.960
with this trap and emulate strategy of

00:02:25.960 --> 00:02:28.740
full virtualization, and that is. In some

00:02:28.740 --> 00:02:33.980
architectures, some privilege instructions may fail silently.

00:02:33.980 --> 00:02:36.410
What that means is, you would think

00:02:36.410 --> 00:02:39.030
that the instruction actually succeeded, but it

00:02:39.030 --> 00:02:43.580
did not. And you may never know about it. And in order to get around

00:02:43.580 --> 00:02:48.640
this problem, in fully virtualized systems, the hypervisor will resort

00:02:48.640 --> 00:02:54.170
to a binary translation strategy, meaning. It knows what

00:02:54.170 --> 00:02:59.030
are the things that might fail silently in the architecture.

00:02:59.030 --> 00:03:06.440
Look for those gotchas in each of these individual binaries of the unmodified

00:03:06.440 --> 00:03:13.330
guest operating systems. And through binary editing strategy. They will ensure

00:03:13.330 --> 00:03:19.970
that those instructions are dealt with careful, so that if those instructions

00:03:19.970 --> 00:03:24.670
fail silently, the hypervisor can catch it and take the appropriate action.

00:03:24.670 --> 00:03:30.360
And this was a problem in early instances of Intel architecture. Both Intel and

00:03:30.360 --> 00:03:34.200
AMD have since started adding virtualization support

00:03:34.200 --> 00:03:37.040
to the hardware, so that such problems

00:03:37.040 --> 00:03:43.490
don't exist any more. But in the early going, when virtualization technology was

00:03:43.490 --> 00:03:50.520
experimented with, in the late 90's and the early 2000s. This was a problem that

00:03:50.520 --> 00:03:53.690
virtualization technology had to overcome in order to make

00:03:53.690 --> 00:03:57.820
sure that you can run operating systems as unchanged

00:03:57.820 --> 00:04:03.540
binaries on a fully virtualized hypervisor. Full virtualization is

00:04:03.540 --> 00:04:06.910
the technology that is employed in the vmware system.

