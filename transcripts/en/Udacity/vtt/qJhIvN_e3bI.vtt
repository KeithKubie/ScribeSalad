WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:02.990
Now that you've tried out the watch
face sample code, it's time to do

00:00:02.990 --> 00:00:06.980
a deep dive to understand the different
parts of making a watch face.

00:00:06.980 --> 00:00:08.550
If you look at the project
in Android Studio,

00:00:08.550 --> 00:00:12.180
you'll see it shares a lot in common
with a regular Android Wear App

00:00:12.180 --> 00:00:16.010
in that it has a phone project
application and a wearable project.

00:00:16.010 --> 00:00:19.170
So they're built into an APK in
the same way as a wearable app.

00:00:19.170 --> 00:00:22.180
You can even bundle a watch
face in with an existing app or

00:00:22.180 --> 00:00:26.240
multiple watch faces into the same
APK like we're doing here.

00:00:26.240 --> 00:00:30.080
However one key difference is that
watch faces are actually a service,

00:00:30.080 --> 00:00:31.470
they're not activities.

00:00:31.470 --> 00:00:33.750
If we look at DigitalWatchFaceService,

00:00:33.750 --> 00:00:37.150
you'll see that it extends
CanvasWatchFaceService.

00:00:37.150 --> 00:00:39.700
You will also see that we
define an Engine class

00:00:39.700 --> 00:00:42.760
which extends
CanvasWatchFaceService.Engine.

00:00:42.760 --> 00:00:45.700
These classes are both defined
in the Wearable support library

00:00:45.700 --> 00:00:47.320
that you've seen earlier.

00:00:47.320 --> 00:00:49.560
The first method of
interest is onCreate,

00:00:49.560 --> 00:00:51.970
which is called to
initialize your service.

00:00:51.970 --> 00:00:54.780
The first thing we do is
call setWatchFaceStyle, and

00:00:54.780 --> 00:00:58.460
provide a builder of the attributes
that we want to set for our watch face.

00:00:58.460 --> 00:01:01.570
You can see that we've selected
variable size PeekCards here.

00:01:01.570 --> 00:01:03.660
We also only want PeekCards to show for

00:01:03.660 --> 00:01:08.250
interruptive notifications and
finally we disable the SystemUiTime

00:01:08.250 --> 00:01:11.630
since our WatchFace is doing it's
own time representation for us.

00:01:11.630 --> 00:01:14.490
The next part of onCreate
is initializing resources.

00:01:14.490 --> 00:01:17.000
It's very important that you do
as much of your allocation and

00:01:17.000 --> 00:01:18.810
initialization here as possible.

00:01:18.810 --> 00:01:20.950
So setting paint styles and loading and

00:01:20.950 --> 00:01:23.350
resizing large bitmaps
should be done here.

00:01:23.350 --> 00:01:26.110
You definitely don't want to be doing
expensive operations in the main

00:01:26.110 --> 00:01:27.870
draw code for your watch face.

00:01:27.870 --> 00:01:28.750
Nor allocating and

00:01:28.750 --> 00:01:32.670
freeing objects since that will cause
the refresh performance to suffer.

00:01:32.670 --> 00:01:35.060
The next step is the onTimeTick method.

00:01:35.060 --> 00:01:38.040
This method is called in
ambient mode once every minute.

00:01:38.040 --> 00:01:40.980
This is the only time that Android
wear will call you code to update your

00:01:40.980 --> 00:01:41.900
watch face.

00:01:41.900 --> 00:01:44.330
We'll talk more about
faster updates later.

00:01:44.330 --> 00:01:47.970
When your on time tick is called,
you need to invalidate the canvas.

00:01:47.970 --> 00:01:51.120
This tells the framework that your
canvas needs to be redrawn, and

00:01:51.120 --> 00:01:54.230
this is done in the onDraw method,
which will be called later.

00:01:54.230 --> 00:01:57.430
The onDraw method is where all
the drawing happens for your watch face.

00:01:57.430 --> 00:02:00.210
You need to run this code very
quickly since it'll be called a lot.

00:02:00.210 --> 00:02:03.170
So hopefully, you did all your
prep work earlier in onCreate.

00:02:03.170 --> 00:02:06.240
You can see that we start by setting
our pre-created calendar object to

00:02:06.240 --> 00:02:07.710
the current system time.

00:02:07.710 --> 00:02:09.310
Then we start drawing things.

00:02:09.310 --> 00:02:11.330
We filled the background
with a solid color.

00:02:11.330 --> 00:02:14.270
And then use the bounds object
to provide the dimensions.

00:02:14.270 --> 00:02:17.680
You should always use the bounds object
to calculate the width, height, or

00:02:17.680 --> 00:02:19.180
center of the display, and

00:02:19.180 --> 00:02:22.730
it will work properly even on devices
with an inset chin at the bottom.

00:02:22.730 --> 00:02:25.650
This is important in an analog watch
faces where the hands must come

00:02:25.650 --> 00:02:27.320
from the center of the display.

00:02:27.320 --> 00:02:28.960
The canvas object has many methods for

00:02:28.960 --> 00:02:33.850
drawing, drawRect here draws rectangles,
drawText draws text for you.

00:02:33.850 --> 00:02:37.350
You can control how this drawing is
done with the paint object provided as

00:02:37.350 --> 00:02:38.310
the last argument.

00:02:38.310 --> 00:02:40.230
These were configured in onCreate.

00:02:40.230 --> 00:02:42.660
You'll notice this use
of isInAmbientMode.

00:02:42.660 --> 00:02:46.250
This is used to decide whether we'll
render the seconds value, or put AM or

00:02:46.250 --> 00:02:48.650
PM afterwards when in ambient mode.

00:02:48.650 --> 00:02:51.290
Here we have
the onPropertiesChanged method.

00:02:51.290 --> 00:02:54.890
This method is called to provide to you
information about very special display

00:02:54.890 --> 00:02:57.240
support that you might
need to implement.

00:02:57.240 --> 00:02:59.720
You can see here
PROPERTY_BURN_IN_PROTECTION.

00:02:59.720 --> 00:03:02.340
We do not use bold font on
displays that have burn-in issues,

00:03:02.340 --> 00:03:05.570
since the thick text will be wider
than the shifting pattern applied

00:03:05.570 --> 00:03:07.320
to move the watch face around.

00:03:07.320 --> 00:03:10.390
You can see here we call
setTypeface to implement this.

00:03:10.390 --> 00:03:12.360
And here we have
PROPERTY_LOW_BIT_AMBIENT.

00:03:12.360 --> 00:03:15.240
This tells us if the display can
only render simple colors when

00:03:15.240 --> 00:03:16.730
in low power mode.

00:03:16.730 --> 00:03:19.310
So what else is happening for
interactive versus ambient mode?

00:03:19.310 --> 00:03:22.930
The onAmbientModeChanged method is
called whenever a switch is made

00:03:22.930 --> 00:03:24.310
between modes.

00:03:24.310 --> 00:03:26.520
In the code, you can see it's
changing the paint styles so

00:03:26.520 --> 00:03:29.200
they have different colors
depending on the mode we're in.

00:03:29.200 --> 00:03:31.800
We also detect if the watch
supports low bit mode.

00:03:31.800 --> 00:03:35.020
If it does we toggle the anti
aliasing flags since that is

00:03:35.020 --> 00:03:37.700
not allowed on these
watches in ambient mode.

00:03:37.700 --> 00:03:40.992
In here we call invalidate to
force a refresh after the change.

00:03:40.992 --> 00:03:43.170
Otherwise we'll be stuck with
the previous display and

00:03:43.170 --> 00:03:45.150
will not match the mode we just entered.

00:03:45.150 --> 00:03:47.210
Finally you will notice
an updateTimer call.

00:03:47.210 --> 00:03:49.990
This is important because we need to
refresh the watch quickly when in

00:03:49.990 --> 00:03:53.160
interactive mode but
once permitted in ambient mode.

00:03:53.160 --> 00:03:56.140
Let's go to the definition
of mUpdateTimeHandler.

00:03:56.140 --> 00:03:58.140
You can see we defined
a Handler earlier.

00:03:58.140 --> 00:04:00.600
We call invalidate to
force a refresh and

00:04:00.600 --> 00:04:03.950
then decide if we should
schedule another update later on.

00:04:03.950 --> 00:04:07.950
If we do, we set an update to occur
in a fixed number of milliseconds.

00:04:07.950 --> 00:04:12.153
If we follow the dependency, we can
see it as NORMAL_UPDATE_RATE_MS and

00:04:12.153 --> 00:04:14.180
this 0.5 seconds.

00:04:14.180 --> 00:04:16.510
So the CP will sleep between updates.

00:04:16.510 --> 00:04:19.110
The code is written in
onDraw to draw colons for

00:04:19.110 --> 00:04:22.530
the first half of each second,
giving a blinking effect.

00:04:22.530 --> 00:04:24.910
If you look at other samples
like the Suite Watch Face,

00:04:24.910 --> 00:04:28.910
it does not use a timer, and just calls
in validate directly from onDraw.

00:04:28.910 --> 00:04:32.720
This uses a lot more CPU power, but
gives smoothly moving watch hands.

00:04:32.720 --> 00:04:35.660
Some of the other interesting
features are support for time zones.

00:04:35.660 --> 00:04:37.910
We register a broadcast receiver so

00:04:37.910 --> 00:04:40.540
that our service will be notified
when we change time zones.

00:04:40.540 --> 00:04:42.360
This happens more often than you think,

00:04:42.360 --> 00:04:45.200
such as when our user arrives
in a new city on an airplane.

00:04:45.200 --> 00:04:48.070
You can see the code changes the time
zone of our calendar object.

00:04:48.070 --> 00:04:51.628
It then calls invalidate so that Android
will refresh the clock immediately.

00:04:51.628 --> 00:04:54.773
Android Wear automatically propagates
the time zone change that the phone

00:04:54.773 --> 00:04:56.220
discovered to the wearable.

00:04:56.220 --> 00:04:58.730
So what we need to do is
register the broadcast receiver

00:04:58.730 --> 00:05:00.810
to find out when other
changes have been made.

00:05:00.810 --> 00:05:03.560
The time zone is retrieved here
with the getDefault method.

00:05:03.560 --> 00:05:06.690
One other thing to note is that you'll
also need to deal with any localization

00:05:06.690 --> 00:05:10.585
issues such as drawing the time and date
appropriately for different languages.

00:05:10.585 --> 00:05:14.245
In the same way that you'd have to deal
with this on Android phones and tablet's.

00:05:14.245 --> 00:05:16.035
Let's now go to onDataChanged.

00:05:16.035 --> 00:05:18.195
You'll notice that this service
implements a listener for

00:05:18.195 --> 00:05:21.745
changes in data items, just like
we talked about for wearable apps.

00:05:21.745 --> 00:05:25.095
This is designed to handle updates
from the configuration activities and

00:05:25.095 --> 00:05:27.385
change the UI to reflect
the desired colors.

