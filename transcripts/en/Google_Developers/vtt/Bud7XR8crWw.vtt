WEBVTT
Kind: captions
Language: en

00:00:06.318 --> 00:00:07.600
EMILY: Hello again.

00:00:07.600 --> 00:00:10.200
Welcome back to the
"Flutter Boring Show."

00:00:10.200 --> 00:00:13.200
We're going to be adding
caching to the Hacker News

00:00:13.200 --> 00:00:15.780
App, a much requested feature.

00:00:15.780 --> 00:00:17.282
FILIP: True.

00:00:17.282 --> 00:00:20.040
EMILY: Actually
before that, I'm going

00:00:20.040 --> 00:00:25.320
to jump in and add right now
when you tap on these stories,

00:00:25.320 --> 00:00:26.910
you just see story.

00:00:26.910 --> 00:00:30.360
I think in an earlier
iteration we had it

00:00:30.360 --> 00:00:31.740
display the number of comments.

00:00:31.740 --> 00:00:34.620
And we got rid of that
when we were no longer hard

00:00:34.620 --> 00:00:36.130
coding things.

00:00:36.130 --> 00:00:38.850
So we're going to add
it the proper way.

00:00:38.850 --> 00:00:43.805
And I pulled up the Hacker
News API up on GitHub.

00:00:43.805 --> 00:00:46.410
And this has all the fields.

00:00:46.410 --> 00:00:50.370
And here you can see
that Descendence,

00:00:50.370 --> 00:00:53.183
in the case of stories or
polls, shows the total comment

00:00:53.183 --> 00:00:54.379
count, which is--

00:00:54.379 --> 00:00:54.920
FILIP: Handy.

00:00:54.920 --> 00:00:58.440
EMILY: Yes, conveniently named
Descendence, but you know.

00:00:58.440 --> 00:01:01.890
So let us-- let's see.

00:01:01.890 --> 00:01:06.330
That is in here.

00:01:06.330 --> 00:01:08.330
I think it's like raw item.

00:01:08.330 --> 00:01:09.370
Build item, there we go.

00:01:13.680 --> 00:01:19.580
Article type, we want to
do article.descendence.

00:01:19.580 --> 00:01:22.600
Oh, and that's an
int, so we want--

00:01:22.600 --> 00:01:28.090
actually let's make that text.

00:01:28.090 --> 00:01:30.880
It's the number of comments.

00:01:30.880 --> 00:01:34.290
And that'll just say comments.

00:01:34.290 --> 00:01:35.216
Great.

00:01:35.216 --> 00:01:35.758
Look at that.

00:01:35.758 --> 00:01:36.674
FILIP: That's awesome.

00:01:36.674 --> 00:01:37.480
EMILY: 98 comments.

00:01:37.480 --> 00:01:39.720
FILIP: Can you show another--

00:01:39.720 --> 00:01:41.880
oh, nice.

00:01:41.880 --> 00:01:44.971
EMILY: This blog has moved.

00:01:44.971 --> 00:01:45.470
Yes.

00:01:48.030 --> 00:01:51.030
OK, so and then,
we actually noticed

00:01:51.030 --> 00:01:54.460
we had a bug that
we just implemented.

00:01:54.460 --> 00:01:59.550
So Filip added
pulling in the stories

00:01:59.550 --> 00:02:05.760
from the Hacker News API, from
the top and the news stories.

00:02:05.760 --> 00:02:07.910
And right now, if you
tap between them--

00:02:07.910 --> 00:02:08.410
oh, wait.

00:02:08.410 --> 00:02:09.330
FILIP: Yeah.

00:02:09.330 --> 00:02:11.640
It's just, I think,
it does show.

00:02:11.640 --> 00:02:13.890
But it's so slow
because we're not

00:02:13.890 --> 00:02:18.030
caching that it looks like
it's not changing sometimes.

00:02:18.030 --> 00:02:19.940
If you like click
back and forth to--

00:02:19.940 --> 00:02:20.820
EMILY: I see.

00:02:20.820 --> 00:02:23.500
FILIP: So we should
probably implement--

00:02:23.500 --> 00:02:25.470
EMILY: Maybe we should
implement some caching.

00:02:25.470 --> 00:02:26.910
OK.

00:02:26.910 --> 00:02:31.330
So to do that, let's
go into our block.

00:02:31.330 --> 00:02:40.775
And so what we're doing is
we're pulling up, reading this--

00:02:40.775 --> 00:02:41.400
let's see.

00:02:41.400 --> 00:02:45.940
This is a list.

00:02:45.940 --> 00:02:52.560
So what we want to
do is we can make a--

00:02:52.560 --> 00:02:57.450
I was going to make a
hash map of article ID

00:02:57.450 --> 00:03:00.630
to Article that has been parsed.

00:03:00.630 --> 00:03:02.220
But, no?

00:03:02.220 --> 00:03:02.760
FILIP: No.

00:03:02.760 --> 00:03:03.000
Yeah.

00:03:03.000 --> 00:03:03.210
Yeah.

00:03:03.210 --> 00:03:03.560
Sure.

00:03:03.560 --> 00:03:04.060
No, no, no.

00:03:04.060 --> 00:03:07.940
I'm saying hm because I
thought we would just like put

00:03:07.940 --> 00:03:11.250
the articles through some list.

00:03:11.250 --> 00:03:13.362
And then we use it, or--

00:03:13.362 --> 00:03:15.120
EMILY: Sure.

00:03:15.120 --> 00:03:20.570
What I was thinking is
like so this takes the top,

00:03:20.570 --> 00:03:22.265
say, 10 stories.

00:03:22.265 --> 00:03:26.490
What if someone
posts another one?

00:03:26.490 --> 00:03:29.580
If you get one updated
one, were you just going

00:03:29.580 --> 00:03:30.990
to invalidate the whole list?

00:03:30.990 --> 00:03:31.852
FILIP: Hm.

00:03:31.852 --> 00:03:33.145
Good point.

00:03:33.145 --> 00:03:36.150
EMILY: So if we put in a
hash map, we get one new one

00:03:36.150 --> 00:03:39.614
and all the others
are still cached.

00:03:39.614 --> 00:03:41.280
And so we can look
them up individually.

00:03:41.280 --> 00:03:44.430
So yes, yours is quicker
for like a whole block.

00:03:44.430 --> 00:03:49.200
But I think for 10 articles,
it's not going to be that bad.

00:03:49.200 --> 00:03:54.030
So I was trying to
remember now, so in what--

00:03:54.030 --> 00:03:54.690
actually, yeah.

00:03:54.690 --> 00:04:01.200
Do we-- I was sitting
there watching you code it

00:04:01.200 --> 00:04:04.040
and now I need to orient myself.

00:04:04.040 --> 00:04:09.670
We are calling getting the
IDs, we take this list.

00:04:09.670 --> 00:04:13.580
Where does this-- where
does this get called?

00:04:13.580 --> 00:04:15.931
FILIP: In many places, actually.

00:04:15.931 --> 00:04:16.430
Three.

00:04:23.041 --> 00:04:27.400
EMILY: OK, so how about
instead, let's get rid of that.

00:04:32.760 --> 00:04:38.350
How about we write
this to a list.

00:04:38.350 --> 00:04:42.240
Or sorry, we'll take this
and store it in the hash map,

00:04:42.240 --> 00:04:43.510
once we get those IDs.

00:04:43.510 --> 00:04:44.050
No, no, no.

00:04:44.050 --> 00:04:48.690
Actually, we're going to,
once we get the articles,

00:04:48.690 --> 00:04:53.110
store that in the hash map.

00:04:53.110 --> 00:04:55.470
So let's go to
definition of that.

00:04:55.470 --> 00:04:56.230
FILIP: Right.

00:04:56.230 --> 00:04:56.760
So, yeah.

00:04:56.760 --> 00:04:57.260
OK.

00:04:57.260 --> 00:04:57.810
So I was--

00:04:57.810 --> 00:04:58.020
EMILY: You see what I'm saying?

00:04:58.020 --> 00:04:58.590
FILIP: Yes.

00:04:58.590 --> 00:05:04.103
I was thinking that the delay
is because just the first call,

00:05:04.103 --> 00:05:06.180
but it's actually
because of all the 10

00:05:06.180 --> 00:05:07.890
other calls for the articles.

00:05:07.890 --> 00:05:09.700
Right?

00:05:09.700 --> 00:05:10.200
Yes.

00:05:10.200 --> 00:05:11.640
That's perfectly reasonable.

00:05:11.640 --> 00:05:14.570
So yeah, what I wanted to
cache is like everything.

00:05:14.570 --> 00:05:17.685
But Emily has a
much better point.

00:05:17.685 --> 00:05:21.990
And like always
getting the latest IDs

00:05:21.990 --> 00:05:28.410
and then reusing whatever
we have for the articles

00:05:28.410 --> 00:05:28.920
themselves.

00:05:28.920 --> 00:05:29.370
That's great.

00:05:29.370 --> 00:05:29.870
Yes.

00:05:29.870 --> 00:05:33.236
EMILY: So I'm
writing a hash map.

00:05:33.236 --> 00:05:42.700
Hash map and article, and
then when we have that

00:05:42.700 --> 00:05:45.134
update articles-- no, wait.

00:05:45.134 --> 00:05:46.607
I was just there.

00:05:46.607 --> 00:05:48.580
Where was it?

00:05:48.580 --> 00:05:49.320
I apologize.

00:05:49.320 --> 00:05:53.627
My font size is bigger
than I like it with this.

00:05:56.609 --> 00:05:57.860
Get articles and update.

00:05:57.860 --> 00:05:58.970
Here we go.

00:05:58.970 --> 00:06:05.601
So now we have the list of IDs.

00:06:05.601 --> 00:06:06.100
We have--

00:06:09.716 --> 00:06:15.360
FILIP: I just checked that
article is a built thing.

00:06:15.360 --> 00:06:17.190
So it will have good hash.

00:06:17.190 --> 00:06:18.475
So that's good.

00:06:18.475 --> 00:06:21.851
EMILY: Thank you for checking.

00:06:21.851 --> 00:06:22.350
Sorry.

00:06:22.350 --> 00:06:24.640
I just need to find--

00:06:24.640 --> 00:06:27.460
we have initialize
articles, update articles,

00:06:27.460 --> 00:06:30.105
I'm just like oh.

00:06:30.105 --> 00:06:34.270
FILIP: We can rename initialize
articles with something

00:06:34.270 --> 00:06:36.714
like kickstart or something.

00:06:36.714 --> 00:06:38.880
Because that's only called
once in the [INAUDIBLE]..

00:06:38.880 --> 00:06:39.910
EMILY: Well, I think
initialize has that--

00:06:39.910 --> 00:06:40.860
what I'm just going
to do is I'm just

00:06:40.860 --> 00:06:42.151
going to organize these things.

00:06:42.151 --> 00:06:46.230
So I'm going to put
initialize kind of near--

00:06:46.230 --> 00:06:52.780
well, we'll put it after our
declarations but near this.

00:06:52.780 --> 00:06:55.540
Oh, and here's another
little bit of cleanup.

00:06:55.540 --> 00:06:59.090
We have some declarations
here and some here.

00:06:59.090 --> 00:06:59.590
Wait, no.

00:06:59.590 --> 00:07:00.340
Those are getters.

00:07:00.340 --> 00:07:02.600
Never mind.

00:07:02.600 --> 00:07:09.880
So getter, getter, initialize,
close, get article.

00:07:09.880 --> 00:07:12.340
So here's where we
want, in get article.

00:07:12.340 --> 00:07:18.280
We want to say if our
cached articles contains

00:07:18.280 --> 00:07:21.730
key of this ID--

00:07:21.730 --> 00:07:27.200
actually, we could just
say, if it doesn't contain,

00:07:27.200 --> 00:07:27.870
do the thing.

00:07:31.390 --> 00:07:34.230
FILIP: A thing with
a throw as well.

00:07:34.230 --> 00:07:34.870
EMILY: Yes.

00:07:34.870 --> 00:07:35.560
Thank you.

00:07:43.020 --> 00:07:51.450
And then, and if here we want
to say cached articles ID

00:07:51.450 --> 00:07:53.890
equals results.

00:07:53.890 --> 00:07:59.772
And then we'll say,
return cached articles.

00:07:59.772 --> 00:08:01.060
FILIP: Oh, OK.

00:08:01.060 --> 00:08:01.630
Interesting.

00:08:01.630 --> 00:08:04.750
And then in this case, you'll
need else for the throw.

00:08:04.750 --> 00:08:06.826
Otherwise you'll always throw.

00:08:06.826 --> 00:08:07.380
EMILY: Oh.

00:08:07.380 --> 00:08:08.132
Thank you.

00:08:08.132 --> 00:08:10.060
Yep.

00:08:10.060 --> 00:08:13.588
That would be sad.

00:08:13.588 --> 00:08:15.932
FILIP: You would throw
my favorite error.

00:08:15.932 --> 00:08:18.080
EMILY: Oh, yes, the
excellent error.

00:08:18.080 --> 00:08:19.330
FILIP: But still.

00:08:19.330 --> 00:08:20.290
OK.

00:08:20.290 --> 00:08:21.860
Yeah, that was quick.

00:08:21.860 --> 00:08:29.830
EMILY: OK, so now
hooray, an exception.

00:08:32.555 --> 00:08:33.679
Oh, actually, you know why?

00:08:33.679 --> 00:08:38.450
It's because I need to do
a hot restart because I

00:08:38.450 --> 00:08:39.740
declared something.

00:08:44.050 --> 00:08:45.985
FILIP: Contains key--
try calling null.

00:08:45.985 --> 00:08:47.244
EMILY: What?

00:08:47.244 --> 00:08:48.750
FILIP: Is it null?

00:08:48.750 --> 00:08:51.360
FILIP: So, OK,
actually, I think my--

00:08:51.360 --> 00:08:52.830
I'm going to restart this.

00:08:52.830 --> 00:08:54.544
This is a new machine.

00:08:54.544 --> 00:08:56.460
And I think maybe this
code is a little wonky.

00:08:56.460 --> 00:08:59.780
I was noticing hot restart
was not quite happy with me.

00:08:59.780 --> 00:09:00.280
Try again.

00:09:00.280 --> 00:09:01.738
If this doesn't
work, then we can--

00:09:05.799 --> 00:09:06.810
FILIP: Yes.

00:09:06.810 --> 00:09:07.571
It's weird.

00:09:07.571 --> 00:09:08.320
Cache [INAUDIBLE].

00:09:08.320 --> 00:09:10.000
EMILY: Because it should
be-- it's like right here.

00:09:10.000 --> 00:09:11.666
FILIP: Yeah, it
shouldn't be null, ever.

00:09:13.831 --> 00:09:15.330
EMILY: That's funny,
though, that it

00:09:15.330 --> 00:09:17.640
thought it was there but
then-- well, whatever.

00:09:17.640 --> 00:09:20.450
So here.

00:09:20.450 --> 00:09:21.580
FILIP: Yeah.

00:09:21.580 --> 00:09:22.430
Nice.

00:09:22.430 --> 00:09:23.480
EMILY: All right.

00:09:23.480 --> 00:09:25.656
FILIP: All right.

00:09:25.656 --> 00:09:26.670
EMILY: Great.

00:09:26.670 --> 00:09:27.890
So there you have it.

00:09:27.890 --> 00:09:30.390
That is how you do caching.

00:09:30.390 --> 00:09:35.730
Basically in summary,
it's all within the block.

00:09:35.730 --> 00:09:38.520
It's all hidden from the UI
because the UI doesn't care

00:09:38.520 --> 00:09:39.920
how you get the information.

00:09:39.920 --> 00:09:41.190
And it's just under
the covers, we're

00:09:41.190 --> 00:09:43.565
return the data faster because
we have a little hash map.

00:09:43.565 --> 00:09:44.110
FILIP: Yeah.

00:09:44.110 --> 00:09:45.030
So that's great.

00:09:45.030 --> 00:09:47.550
So I think that's been great.

00:09:47.550 --> 00:09:49.230
What's next?

00:09:49.230 --> 00:09:51.000
Do we say?

00:09:51.000 --> 00:09:54.581
I think it's almost ready
to publish it to Play Store.

00:09:54.581 --> 00:09:55.080
EMILY: Yeah.

00:09:55.080 --> 00:09:55.960
So stay tuned.

00:09:55.960 --> 00:10:00.900
And you can learn how to
publish your beautiful new app

00:10:00.900 --> 00:10:03.050
to the Google Play Store.

