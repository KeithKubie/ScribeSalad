WEBVTT
Kind: captions
Language: en

00:00:04.230 --> 00:00:05.460
FILIP HRACEK: Oh, hi.

00:00:05.460 --> 00:00:08.370
I'm Filip from the Flutter team,
and this is the third video

00:00:08.370 --> 00:00:10.800
in Flutter Widgets 101.

00:00:10.800 --> 00:00:14.450
Previously, you learned about
stateless and stateful widgets.

00:00:14.450 --> 00:00:18.240
In this video, I'll be
talking about InheritedWidget.

00:00:18.240 --> 00:00:20.790
When your app gets larger
and your widget tree

00:00:20.790 --> 00:00:24.210
gets more complex,
passing and accessing data

00:00:24.210 --> 00:00:26.460
can get cumbersome.

00:00:26.460 --> 00:00:30.540
If you have four or five widgets
nested one after the other

00:00:30.540 --> 00:00:33.180
and there is a piece of data
you need to get from the top

00:00:33.180 --> 00:00:38.070
to the bottom, you're adding
it to all those constructors

00:00:38.070 --> 00:00:40.710
and all those build methods.

00:00:40.710 --> 00:00:42.210
Ugh.

00:00:42.210 --> 00:00:45.720
I just want to reach up
the tree to get that data.

00:00:45.720 --> 00:00:49.050
Fortunately, there's a widget
type that allows just that.

00:00:49.050 --> 00:00:51.510
It's called InheritedWidget.

00:00:51.510 --> 00:00:53.940
When you put this
widget in your tree,

00:00:53.940 --> 00:00:58.090
you can get a reference to
it from any widget below it.

00:00:58.090 --> 00:01:00.990
This is why we call
it an InheritedWidget.

00:01:00.990 --> 00:01:02.640
Think about a family tree.

00:01:02.640 --> 00:01:05.730
For example, I
inherited my big nose

00:01:05.730 --> 00:01:08.910
from both my dad
and my grandfather.

00:01:08.910 --> 00:01:11.430
They're both above me
in the family tree,

00:01:11.430 --> 00:01:13.770
so I can inherit from them.

00:01:13.770 --> 00:01:15.810
So to be clear, this
is not inherited

00:01:15.810 --> 00:01:18.240
as in a class
hierarchy but inherited

00:01:18.240 --> 00:01:20.880
as in a widget hierarchy.

00:01:20.880 --> 00:01:25.210
Let's see how we would implement
one of those inherited widgets.

00:01:25.210 --> 00:01:29.160
We'll create a class
called inherited notes that

00:01:29.160 --> 00:01:31.740
extends InheritedWidget.

00:01:31.740 --> 00:01:35.250
We need our widget to accept
at least one parameter,

00:01:35.250 --> 00:01:37.770
and that's the child.

00:01:37.770 --> 00:01:40.320
This is already a
valid InheritedWidget,

00:01:40.320 --> 00:01:42.120
but it's useless.

00:01:42.120 --> 00:01:43.980
Let's give it a nose.

00:01:43.980 --> 00:01:48.840
In this case, the nose will
be an image asset of a nose.

00:01:48.840 --> 00:01:52.650
We'll just add that as a
field of the InheritedWidget.

00:01:52.650 --> 00:01:55.470
Now any descendant
of our inherited nose

00:01:55.470 --> 00:01:58.200
can get access to it
in its build method

00:01:58.200 --> 00:02:03.300
by calling context dot
InheritWidget of exact type.

00:02:03.300 --> 00:02:06.210
By calling this method
with a type of your custom

00:02:06.210 --> 00:02:08.430
InheritedWidget,
you tell Flutter

00:02:08.430 --> 00:02:12.180
to go up the tree, starting
from the build context

00:02:12.180 --> 00:02:15.780
and look for a widget
that matches that type.

00:02:15.780 --> 00:02:18.450
But to make things
simpler and more readable,

00:02:18.450 --> 00:02:23.070
InheritedWidgets often include
a static method called of,

00:02:23.070 --> 00:02:27.900
which calls the InheritWidget
of exact type method for you.

00:02:27.900 --> 00:02:30.990
Now we can rewrite our
code in the descendant

00:02:30.990 --> 00:02:36.540
to read InheritedNose dot
of context, and that's nice.

00:02:36.540 --> 00:02:39.420
If this of complex
business seems familiar,

00:02:39.420 --> 00:02:43.120
that's because it is used by
the Flutter framework itself.

00:02:43.120 --> 00:02:45.610
For example, you may
know that the way to get

00:02:45.610 --> 00:02:47.970
the global theme
of a material app,

00:02:47.970 --> 00:02:50.610
you do theme dot of context.

00:02:50.610 --> 00:02:54.630
Theme is in fact a type
of InheritedWidget.

00:02:54.630 --> 00:02:59.140
So is Scaffold, Focus
Scope, and many others.

00:02:59.140 --> 00:03:00.900
One thing about
the InheritedWidget

00:03:00.900 --> 00:03:02.670
is that it is immutable.

00:03:02.670 --> 00:03:06.910
That is why our image
asset is smart as final.

00:03:06.910 --> 00:03:09.930
You can only replace an
InheritedWidget's field

00:03:09.930 --> 00:03:12.990
by rebuilding the whole widget.

00:03:12.990 --> 00:03:14.650
Keep that in mind.

00:03:14.650 --> 00:03:17.070
Many InheritedWidgets
will stay unchanged

00:03:17.070 --> 00:03:20.340
for the whole lifecycle
of the app, and that's OK.

00:03:20.340 --> 00:03:22.650
But the fact that
something is final

00:03:22.650 --> 00:03:25.290
only means it can't
be reassigned.

00:03:25.290 --> 00:03:28.980
It does not mean it
cannot change internally.

00:03:28.980 --> 00:03:33.040
For example, instead of a value,
you can attach a service object

00:03:33.040 --> 00:03:34.950
to the InheritedWidget.

00:03:34.950 --> 00:03:37.560
It can be a wrapper
around your database,

00:03:37.560 --> 00:03:42.180
a proxy for your web API,
or a provider of assets.

00:03:42.180 --> 00:03:46.020
The service object can have
its own internal state.

00:03:46.020 --> 00:03:49.650
It can initiate network
calls, anything.

00:03:49.650 --> 00:03:52.410
In our case, no
service will provide

00:03:52.410 --> 00:03:55.680
various nose-related services.

00:03:55.680 --> 00:03:58.470
Each descendant of the
InheritedNose widget

00:03:58.470 --> 00:04:00.840
can easily get
hold of the service

00:04:00.840 --> 00:04:05.310
through InheritedNose
dot of context.

00:04:05.310 --> 00:04:06.450
It can call methods on it--

00:04:06.450 --> 00:04:07.560
[NOSE BLOWS]

00:04:07.560 --> 00:04:08.580
Subscribe to streams--

00:04:08.580 --> 00:04:09.690
[SNEEZES]

00:04:09.690 --> 00:04:11.070
And so on.

00:04:11.070 --> 00:04:15.000
To summarize,
InheritedWidget is very neat.

00:04:15.000 --> 00:04:18.570
It lets you access state
from way above in the tree.

00:04:18.570 --> 00:04:20.910
So in the past three
episodes, we've

00:04:20.910 --> 00:04:23.430
covered three really
useful widgets--

00:04:23.430 --> 00:04:26.850
stateless, stateful,
and inherited.

00:04:26.850 --> 00:04:29.860
Next time, we're going to talk
about something very different

00:04:29.860 --> 00:04:32.690
but equally important--

00:04:32.690 --> 00:04:34.360
keys.

00:04:34.360 --> 00:04:37.090
Also be sure to
head to flutter.io

00:04:37.090 --> 00:04:39.750
to see all of our widgets.

