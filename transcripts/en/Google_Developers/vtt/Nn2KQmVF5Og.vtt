WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.500
&gt;&gt; PARLANTE: All right, so I'll draw you back.
So, now, you may want to keep working on that

00:00:02.500 --> 00:00:05.290
a little bit. But I just want to--going to
cut you short. I just want to show a few last

00:00:05.290 --> 00:00:07.970
things and then open up more time to [INDISTINCT]
where you can keep working on this one, you

00:00:07.970 --> 00:00:08.970
can work in that corner or come what everyone.
So--yeah, question.

00:00:08.970 --> 00:00:11.130
&gt;&gt; I have a general question.
&gt;&gt; PARLANTE: Okay, question.

00:00:11.130 --> 00:00:20.740
&gt;&gt; How do you find things? And here's what
I mean, all right. I didn't realize we've

00:00:20.740 --> 00:00:25.920
had in the handout additional information
about this topic. So now I'm trying to find

00:00:25.920 --> 00:00:26.920
information about the OS file.
&gt;&gt; PARLANTE: Yeah. So the question, I'm going

00:00:26.920 --> 00:00:30.780
to say, very much it was like, well, how do
you find definition about Python modules?

00:00:30.780 --> 00:00:34.790
So, probably, I think with Google Search,
it's like-- for I'm about to show you the

00:00:34.790 --> 00:00:42.550
urllib module. And I suspect, if you do a
Google Search for like Python URL Library

00:00:42.550 --> 00:00:47.540
or Python URL Module, the--you might say the
hits are pretty good. So that's the free-form

00:00:47.540 --> 00:00:54.090
answer. The other answer is that python.org
is the sort of official maintain sort of [INDISTINCT]

00:00:54.090 --> 00:00:56.740
and there's, you know, it's very browsable,
there's a lot of organization modules there.

00:00:56.740 --> 00:01:03.960
So I think those are two pretty good answer.
&gt;&gt; But, here is the problem. All right, just

00:01:03.960 --> 00:01:09.030
search under OS and they don't show you that
there is os.path in there that you should

00:01:09.030 --> 00:01:10.320
actually be looking at. You get like...
&gt;&gt; PARLANTE: Yes. So the problem is if you

00:01:10.320 --> 00:01:15.170
just do DIR on OS, it's hard to know that
you need to look in os.path especially because

00:01:15.170 --> 00:01:19.670
[INDISTINCT]. So I think DIR, it's kind of
a nice quick-and-dirty solution, but maybe

00:01:19.670 --> 00:01:23.130
doing a real Google Search and really looking
at python.org. If you really want to browse

00:01:23.130 --> 00:01:27.780
is the more rich experience because DIR is
like pretty [INDISTINCT], but it's attractive

00:01:27.780 --> 00:01:33.910
for like quick-and-dirty. So, I don't have--there's
no--yeah, I don't have [INDISTINCT]. But--I

00:01:33.910 --> 00:01:38.290
mean why--this is progress in software, right,
that it used to be in C. I mean you just had

00:01:38.290 --> 00:01:42.490
to write everything yourself. And now, with
like Python and Perl and Java, whatever like,

00:01:42.490 --> 00:01:45.090
in a sense, you do have these libraries, I
mean, it is a tremendous improvement. And,

00:01:45.090 --> 00:01:47.990
now--but there's this cost to like, "Well,
we have to kind of do around and find them."

00:01:47.990 --> 00:01:53.590
So, oh well, progress. Okay. So what I want
to show here is, you know, a couple--just

00:01:53.590 --> 00:01:57.939
mattering of things and then one more module
and then get to this last exercise. So first

00:01:57.939 --> 00:02:02.229
of, I want to show you--this is just totally
optional. Okay. You do not need to know this,

00:02:02.229 --> 00:02:08.269
but I just feel like it's something that's
useful to know. I'm going to go back to my--there's

00:02:08.269 --> 00:02:17.269
"hello.py"--okay, yes. Here, you see the beautiful
blue screen showing nothing. So earlier, I

00:02:17.269 --> 00:02:24.390
had written "hello.py" to be kind of a Cat
utility. And so I've recreated that. And I

00:02:24.390 --> 00:02:29.389
want to just talk about this a little bit
in particular to talk about exceptions. The

00:02:29.389 --> 00:02:33.450
need--you do not need to know exceptions through
the exercise today, but I just think it's

00:02:33.450 --> 00:02:36.590
something that's useful to kind of have seen
and so I want to spend a few minutes just

00:02:36.590 --> 00:02:44.260
mentioning how these works. So what this code
does is--here's this function called Cat and

00:02:44.260 --> 00:02:49.049
it takes the filename argument. And all it
does is it just, you know, it tries to read

00:02:49.049 --> 00:02:54.540
it and then it prints out--here, I had a print
like "---" and the filename and then it prints

00:02:54.540 --> 00:02:58.319
the text from the file. And then down here
at the main, well, it's very much like the

00:02:58.319 --> 00:03:02.909
main, you guys have--it just takes any number
of command line arguments and it just tries

00:03:02.909 --> 00:03:10.099
the Cat also. So I guess I'll go with my two.
I'll leave that text up there. I go to the

00:03:10.099 --> 00:03:17.949
other one. There's the other one. It just
goes down here. All right, so if I go up here,

00:03:17.949 --> 00:03:23.950
so I could run hello and I could say, "Oh,
please, Cat"--if I say "small.text", it prints

00:03:23.950 --> 00:03:27.879
that one. But I could list multiple files.
So I'll have it print itself. So I'd list

00:03:27.879 --> 00:03:32.599
multiple files and then there's the--so if
I just scroll up, it printed--here, it printed

00:03:32.599 --> 00:03:36.790
"small.text", and then here, it printed "hello.py."
So any number I give, it's just going to--it's

00:03:36.790 --> 00:03:42.769
going to give. So here's the problem I want
to deal with, which is errors at runtime.

00:03:42.769 --> 00:03:51.059
What if I give this thing a file first in
line here of like, you know, "nosuch.text".

00:03:51.059 --> 00:03:56.829
So now, what's going to happen is, it's going
to run the loop. And it's going to try and

00:03:56.829 --> 00:04:01.299
Cat that first one. And what's going to happen
is--and of course, yeah, you may have seen

00:04:01.299 --> 00:04:05.229
one or two of these over the last couple of
days. Right, this is a stack trace exception.

00:04:05.229 --> 00:04:09.569
And what I said yesterday is like, well, you
want to kind of care about the stuff at the

00:04:09.569 --> 00:04:13.129
bottom. It's sort of the most interesting
things. So what it says is there was an "IOError,

00:04:13.129 --> 00:04:16.320
there's no such file or directory, nosuch"--you
know. Hey, that's almost English. I think

00:04:16.320 --> 00:04:19.570
that's pretty helpful. And then here, it's
giving us, "Well here's the line where that

00:04:19.570 --> 00:04:25.250
happened. So you can see it was my open call
on that file name, it failed. And then up

00:04:25.250 --> 00:04:29.750
above, these are the lines that--this is the
call sequence. So if I read this from top

00:04:29.750 --> 00:04:35.380
to bottom, well, it started at main line 24
and that called Cat on line 20 and then that

00:04:35.380 --> 00:04:40.220
went down to line 10. So it's kind of going
from the past up to the present and then the

00:04:40.220 --> 00:04:45.370
failure. Now, the mechanism--and I'm going
to give you just a little bit of detail here.

00:04:45.370 --> 00:04:52.950
What's going on here is called an exception.
And what's happened is that this line, "f=open(filename)"

00:04:52.950 --> 00:04:57.760
is said to have thrown an exception object
representing a runtime failure like, "Okay,

00:04:57.760 --> 00:05:03.190
this is not going to work." And the default
behavior of an exception is that it goes all

00:05:03.190 --> 00:05:06.632
the way out to main and exits the program.
It just unwinds the whole thing, and like,

00:05:06.632 --> 00:05:10.170
"Okay, we're done." And you know what? That's
actually kind of a fine default, right? You

00:05:10.170 --> 00:05:13.370
might use list wrong or make all sorts of
errors and, you know, kind of what you want

00:05:13.370 --> 00:05:17.010
to do is exit the program, print some kind
of error message. So like as at default, that's

00:05:17.010 --> 00:05:22.540
fine. But what I want to show here is how
might you intercept the error, print a message,

00:05:22.540 --> 00:05:25.700
and keep going. In particular, I think it
would be really nice if that first one being

00:05:25.700 --> 00:05:28.870
wrong didn't crash the whole thing. It would
be nice that it would print a little error

00:05:28.870 --> 00:05:32.370
message but actually continue to print small
notes. So if I could just hold your questions,

00:05:32.370 --> 00:05:38.080
all right, let me fix this. Now, exceptions
are kind of, you know, a deep topic, and so

00:05:38.080 --> 00:05:41.280
I'm--by no means am I telling you everything,
there's [INDISTINCT]. I'm just showing you

00:05:41.280 --> 00:05:45.030
like the most simple thing possible. All right,
so the way to do this is I'm going to say

00:05:45.030 --> 00:05:53.820
try. And so that's a little--it's called the--a
try block, and I'll say except, and then I'm

00:05:53.820 --> 00:05:59.670
going to say "IOError." So if I go back over
here, the exception that was thrown to here

00:05:59.670 --> 00:06:09.000
is an "IOError", so I'm going to catch that
"IOError". And I'll say--I print, you know,

00:06:09.000 --> 00:06:14.370
something--how about IOError, but at least,
I'll mention the file. So save that, comma--what

00:06:14.370 --> 00:06:18.330
was the filename here? It's filename. All
right, so here's what the--here's the dynamic

00:06:18.330 --> 00:06:22.720
here. What this try-except does is very dynamic.
It's going to--in the try, it's going to try

00:06:22.720 --> 00:06:25.560
and do each one of these lines. So it tries
to do that one, tries to do that one, tries

00:06:25.560 --> 00:06:29.940
to do that one. And if anyone of them, at
runtime, could throw an error and that's going

00:06:29.940 --> 00:06:35.000
to interrupt the usual series of execution,
and it's going to jump from there and it's

00:06:35.000 --> 00:06:39.210
going to pop to down here. So it's kind of
a--normally, code is very linear, right? It

00:06:39.210 --> 00:06:44.020
just goes top to bottom. This interrupts--it
interrupts it and jumps down here to the--if

00:06:44.020 --> 00:06:49.460
the exception matches, it jumps to here. And
so what's going to happen is either this will

00:06:49.460 --> 00:06:54.790
read--well, okay, let's see if I did it right.
My intention here is that if this executes

00:06:54.790 --> 00:06:58.950
normally, we'll see the regular output. But
if it's bad, it'll just print this line. But

00:06:58.950 --> 00:07:02.540
in either case, the function will then just
exit normally and we're back at main and the

00:07:02.540 --> 00:07:06.860
loop could just continue. So rather than the
default kind of kill the whole program behavior,

00:07:06.860 --> 00:07:10.470
I'm at least scratching the surface of exceptions
to kind of control it, print something and

00:07:10.470 --> 00:07:15.970
keep going. All right, so now let's see--you
know, other languages have a--have the same

00:07:15.970 --> 00:07:19.650
feature, it's called exceptions in other languages
just Python just has it's own syntax for it.

00:07:19.650 --> 00:07:28.990
So if I do this one, all right, that is actually
good. So there's the first one failing, says

00:07:28.990 --> 00:07:36.240
IOError and then the loop continued and did
the other two. So there's a question over

00:07:36.240 --> 00:07:39.060
here.
&gt;&gt; Does Python run through the entire program

00:07:39.060 --> 00:07:42.510
before outputting anything?
&gt;&gt; PARLANTE: So the question is, does Python

00:07:42.510 --> 00:07:47.240
run through the entire program before outputting
anything? Python does when you--that's [INDISTINCT],

00:07:47.240 --> 00:07:50.780
I'm about to do a thing which a little bit
shows this, but when you first load the module,

00:07:50.780 --> 00:07:57.550
Python does a linear pass to kind of tokenize
and read in the code, but it does almost no

00:07:57.550 --> 00:08:02.560
analysis. It's really superficial. So it is
then, when the execution actually runs over

00:08:02.560 --> 00:08:05.630
the lines that more semantic stuff actually
happens.

00:08:05.630 --> 00:08:14.100
&gt;&gt; [INDISTINCT] a non-variable error like
without even--I mean you just have like print

00:08:14.100 --> 00:08:17.491
hello and then print like blah, blah, and
you didn't define blah, blah, it wouldn't

00:08:17.491 --> 00:08:18.491
print hello.
&gt;&gt; PARLANTE: That's right. That's right. And

00:08:18.491 --> 00:08:22.270
so to sort of summarize it, for example, if
I had--oh, this is maybe an excellent example.

00:08:22.270 --> 00:08:28.270
So let's say here, I called some full function
like handle error or whatever, would--and

00:08:28.270 --> 00:08:33.079
I forgot to define it, like, there is no such
function, this code will compile and run fine

00:08:33.079 --> 00:08:36.539
so long as the exception doesn't happen. I
mean this kind of what you're saying. So [INDISTINCT]

00:08:36.539 --> 00:08:41.719
still this, when you load a Python file, pretty
much nothing is checked, errors, you know,

00:08:41.719 --> 00:08:45.920
typos, some variable names, functions wrong,
just most totally errors that have not checked.

00:08:45.920 --> 00:08:49.470
It is only when the code actually executes
over those lines; that's when it's checked.

00:08:49.470 --> 00:08:51.389
And that, you know, I'm sure you've noticed
that for the last couple of days. All right,

00:08:51.389 --> 00:08:57.080
so let me get back the main theme here. All
right, so that's just--exceptions is a deep

00:08:57.080 --> 00:08:59.829
topic. I just felt like I should show you
just, you know, six minutes for just a little

00:08:59.829 --> 00:09:04.320
how they work. Yes.
&gt;&gt; I think what he's asking is reverse from

00:09:04.320 --> 00:09:10.709
the concept because in this case, I think
it's saying that he's actually still on error

00:09:10.709 --> 00:09:12.889
without [INDISTINCT].
&gt;&gt; PARLANTE: Well, let me--I'm not really

00:09:12.889 --> 00:09:16.809
following, but let me just [INDISTINCT] your
head. And there's more stuff I want to show

00:09:16.809 --> 00:09:22.029
you and we can talk after class. All right,
so let me--all right, so that was the basic

00:09:22.029 --> 00:09:27.639
exception stuff. So I want to show you this
other thing. I want to talk about modularity

00:09:27.639 --> 00:09:32.992
a little bit. So we go down to the baby name
structure here. So modularity refers to this

00:09:32.992 --> 00:09:39.279
idea that you have code, you know, any projects
starts off. At first, it's just some engineers,

00:09:39.279 --> 00:09:42.260
some person working on something for their
personal-like headache, right? They're sort

00:09:42.260 --> 00:09:44.690
of solving it. And then pretty soon, they're
teammates' here about, "Oh, like, hey, can

00:09:44.690 --> 00:09:50.850
I use that?" And, you know, then, pretty soon,
it's like, you know, [INDISTINCT]. So just

00:09:50.850 --> 00:09:54.519
for good design using Python, you want to
think a little bit about modularity. And by

00:09:54.519 --> 00:09:59.449
that, I mean, like, well, something was built
to solve one problem, can it grow or be reuse

00:09:59.449 --> 00:10:04.079
by other people over time so like--so they
can use it as well. So just code reuse just

00:10:04.079 --> 00:10:10.790
within a project. And we'll talk about this
at two levels. The simplest level is just

00:10:10.790 --> 00:10:18.189
having a program take command line flags.
This is just totally primitive technique and

00:10:18.189 --> 00:10:21.720
yet it's actually very effective, and it's
used within Google a ton. So you'll notice

00:10:21.720 --> 00:10:26.190
in our programs we write today, like, I didn't
assume, "Well, it's going to write this directory.

00:10:26.190 --> 00:10:29.889
It's always going to read that file," or whatever.
Instead, I was conscious of always trying

00:10:29.889 --> 00:10:34.040
to feed in what you read and what you write
into the program through command line flags.

00:10:34.040 --> 00:10:38.290
And so, you know, clearly Python supports
that. We've been doing sort of primitive command

00:10:38.290 --> 00:10:42.639
line parsing. You know, I sort of do it by
hand, that's fine for simple things. There

00:10:42.639 --> 00:10:46.000
are also our command line flag parsing libraries,
you know. You can go find the module for it

00:10:46.000 --> 00:10:49.779
if you wanted like more rich flags for it.
So that's a very basic thing to get right,

00:10:49.779 --> 00:10:54.180
but certainly, you know, step one for modularity,
you would want to get that right. The next

00:10:54.180 --> 00:11:00.670
layer up would be, if you want to reuse someone
else's module and instead of calling their

00:11:00.670 --> 00:11:04.699
program as like a program and passing a flag,
you would want to call their Python functions.

00:11:04.699 --> 00:11:07.600
So someone, you know, not some officemate
of yours wrote a function, and you want to

00:11:07.600 --> 00:11:10.079
call it. I'm going to just going to scratch
the surface a little bit of how that would

00:11:10.079 --> 00:11:14.550
work because Python has pretty good support
for this case. So what I want to do is I'm

00:11:14.550 --> 00:11:22.623
going to look at my baby names program here
and, you know, let's get this back on screen.

00:11:22.623 --> 00:11:25.779
All right, I'm sorry. Is this the solution?
No, I'm going to go and hit my solution for

00:11:25.779 --> 00:11:31.740
baby names. It's a little more interesting.
And I'm going to do something that you should

00:11:31.740 --> 00:11:40.619
never do, which is, I'm going to put a print
statement. I was going to say, "Hi, there,"

00:11:40.619 --> 00:11:47.800
right at the outer level. Now, I haven't talk
about this a lot before, but when you run--when

00:11:47.800 --> 00:11:54.839
you load a Python module, really what it does--what
Python does is it executes it from top to

00:11:54.839 --> 00:11:59.920
bottom and this prints data. What that's going
to do is it's going to print whatever. And

00:11:59.920 --> 00:12:02.839
in executing this def, what that does is it
sort of looks its code and then, you know,

00:12:02.839 --> 00:12:07.160
it binds it to the symbol extract names. And
then it just [INDISTINCT]. So--and it's only

00:12:07.160 --> 00:12:12.329
when we get down to the bottom--oops, get
down, oops, get down, uh-oh, what did I just

00:12:12.329 --> 00:12:19.590
do? Here we go. All right, let me undo out
of this. All right, only when I get down here

00:12:19.590 --> 00:12:24.410
to the bottom, then, when it gets to this
"if" statement, then it actually calls main,

00:12:24.410 --> 00:12:31.709
and that [INDISTINCT] thing off. All right,
so I'm just going to save. Uh-oh, did I undo

00:12:31.709 --> 00:12:35.279
my--my print notes' still there. Okay. So
I'm just going to CTRL+Z out of there. So

00:12:35.279 --> 00:12:42.999
that's--I edit it, and I'm going to fire up
the Python Interpreter. Now, we've done import

00:12:42.999 --> 00:12:47.790
re and import an OS, write all this idea of
modules you've seen a lot. Now Python, the

00:12:47.790 --> 00:12:52.649
word module is really [INDISTINCT] in Python
with just a ".py" file, right. And a '.py"

00:12:52.649 --> 00:12:55.779
file, you could think all name, space, and
just have some stuff defining it. So it's

00:12:55.779 --> 00:13:03.089
kind of crazier. I want to show you is I can
say import baby names. And what that did is

00:13:03.089 --> 00:13:08.560
that loaded the file, took all of its depths.
And then that sort of print that I put in

00:13:08.560 --> 00:13:15.129
that you should never do, that--it ran it.
So, when you load a Python file, it sort of

00:13:15.129 --> 00:13:18.240
executes it. And then because I put that print
in there, it kind of shows that that's what

00:13:18.240 --> 00:13:22.029
was going on. So, now this will kind of--now,
I'm going to kind of connect code you've written

00:13:22.029 --> 00:13:28.959
with like the way we've used the OS module,
so its data is like, I can do a "dir(babynames)".

00:13:28.959 --> 00:13:33.790
And what I'm going to see is there's this
"__" things, those are kind of like internals

00:13:33.790 --> 00:13:37.060
that you probably don't want to mess with
too much. But then like there's "main", there's

00:13:37.060 --> 00:13:41.930
my main function, and check it out, "ExtractNames."
There's like that function I wrote. And in

00:13:41.930 --> 00:13:48.339
fact, if I say "help(babynames.ExtractNames)",
it's like I get this little main page. And

00:13:48.339 --> 00:13:54.170
I'm going to quit right here. I'm going to
CTRL+Z, so I'm going to get a little fancy.

00:13:54.170 --> 00:13:57.779
I'm going to go back to the other real quick--oops!
Oops! Oops! Wrong editor. All right. Okay,

00:13:57.779 --> 00:14:07.029
let's just look at baby names. So here, I've
been talking about the slot for your solutions,

00:14:07.029 --> 00:14:12.649
but here's my depth of baby names, and then
there's this big string, all right? So with

00:14:12.649 --> 00:14:16.170
the triple quoted string, so it--just starts
with three quotes that it's just a string

00:14:16.170 --> 00:14:19.680
constant but it's just a lot of the spam lines,
all right. So it's just a way of having a

00:14:19.680 --> 00:14:22.949
big string constant. And then this is a little
bit like Javadoc, if you've seen that before.

00:14:22.949 --> 00:14:26.350
So it's--what's happening is it understands.
Well, this big string, that's the first line,

00:14:26.350 --> 00:14:29.509
that's probably the documentation for this
function. So when you call help that's how

00:14:29.509 --> 00:14:33.360
help works, all right. So, I mean, it's really
trivial system. But that's how--it's, you

00:14:33.360 --> 00:14:37.889
know, pulling up little bits of docs of like
what this function does. All right. So, now,

00:14:37.889 --> 00:14:43.410
where's my Python interpreter, this one, all
right. All right, so here I am in Python and

00:14:43.410 --> 00:14:49.360
I've imported baby names. So, now, what I
want to show you is I can call--what is it

00:14:49.360 --> 00:14:56.189
called to extract names? I can call "ExtracNames"
here from the Python interpreter. So, I could

00:14:56.189 --> 00:15:06.449
say "babynames.ExtractNames", and what does
it take? A name of baby file, it's going to

00:15:06.449 --> 00:15:08.930
be like "../baby1998.html", of course--I think
that's right, so let's just try it. So, here,

00:15:08.930 --> 00:15:14.249
what I--this returns a list, right? Yeah,
there it is. All right. So, this--I mean,

00:15:14.249 --> 00:15:18.489
the stuff I've kind of said, but like--so,
for example, if extract names, like printed

00:15:18.489 --> 00:15:22.839
to stand it out directly, I couldn't reuse
it here, right? But because, I mean, the way

00:15:22.839 --> 00:15:27.279
the functions work, it took its arguments
in as inputs, it computes whatever it returns,

00:15:27.279 --> 00:15:32.079
and it returns to the caller, you know, whatever
[INDISTINCT] it means that now I can just

00:15:32.079 --> 00:15:35.920
reuse it. I can sort of pluck it out of this
program and reuse it for like who knows what?

00:15:35.920 --> 00:15:40.339
Some other purpose. So, obviously, this is
a deep topic, but I'm kind of putting you

00:15:40.339 --> 00:15:44.600
in the direction a little bit of like what
it would mean to have kind of a well-designed

00:15:44.600 --> 00:15:50.470
program, well-designed function and how modules
could share code to build sort of bigger systems.

00:15:50.470 --> 00:15:55.279
And that's, you know. Yeah, that's what big
software systems look like. All right. So

00:15:55.279 --> 00:15:59.939
let me show you--so that's--that's our--that's
the style discussion for this section. So

00:15:59.939 --> 00:16:02.709
the other thing I want to show you--all right,
because I need the Python interpreter back,

00:16:02.709 --> 00:16:08.700
because I want to show you another module.
All right, I mean, in every lecture section

00:16:08.700 --> 00:16:12.449
today, I just keep showing you more modules
of building code that you might want to work.

00:16:12.449 --> 00:16:17.959
The one I want to talk about today on this
section is called a "urllib" and this one

00:16:17.959 --> 00:16:23.050
has nice support for messing with URL, you
know, you'll never guess what it does. All

00:16:23.050 --> 00:16:28.420
right, so the--what--first thing I'm going
to do here is there's a "urllib.urlopen",

00:16:28.420 --> 00:16:39.180
and I'll just give a URL like, say, "http://google.com".
And what "urllib" does, let's see, it takes

00:16:39.180 --> 00:16:46.779
a URL and it tries to make it look like a
file. And so when I say "urllib.urlopen",

00:16:46.779 --> 00:16:50.910
it's trying to kind of look like that open
command that we've used to open files and

00:16:50.910 --> 00:16:55.069
it returns--I've named my verbal UF there,
it returns those thing that's--it's kind of

00:16:55.069 --> 00:16:59.939
like a file object like the "F", but really
it's pointing over the network to this thing.

00:16:59.939 --> 00:17:09.000
So, in particular, I can say "uf.read", and
what that's going to do is it does the networking

00:17:09.000 --> 00:17:12.730
and, like, gets all the data and, like, here
it is. And so, I could, you know, say, for

00:17:12.730 --> 00:17:17.060
example, I don't know, regular expressions
or something like you could do on this. So,

00:17:17.060 --> 00:17:21.202
"urllib", it has like a lot of features. You
can set cookies and all sort of that kind

00:17:21.202 --> 00:17:26.210
of stuff. And I'm just doing like the most
simple sort of URL retrieval here. So the

00:17:26.210 --> 00:17:32.180
other thing I want to show you here, man,
look at all this. Does anyone ever look at

00:17:32.180 --> 00:17:37.301
the source code of our homepage. All right,
so I'm going to look for ".gif" in here. There

00:17:37.301 --> 00:17:46.670
you go, okay. So there, "/intl/m" blah, blah,
okay, so that--I'm going to copy that. That's

00:17:46.670 --> 00:17:51.540
the URL of the GIF that's on today's homepage
currently. So I'm going to show you another

00:17:51.540 --> 00:18:03.380
"urllib" function which is "urlretrieve".
What that takes is a URL, so I'm going to

00:18:03.380 --> 00:18:09.130
say "google.com" and I'm going to paste in
that. So, I believe that is the full URL path

00:18:09.130 --> 00:18:16.640
of today's GIF. I'm going to say "," and what
"urlretrieve" does is it does a download.

00:18:16.640 --> 00:18:23.160
So there's a GIF and I'm going to say let's
call this like "blah.gif". And if I run that,

00:18:23.160 --> 00:18:33.231
okay. So, now, if I CTRL+Z out of here, I
do an "ls". Check it out, "blah.gif". This

00:18:33.231 --> 00:18:40.950
may prove to be handy in our next exercise.
So, I've just showed you two functions there,

00:18:40.950 --> 00:18:45.164
yes, I mean, in fact, there's a huge amount
of stuff there for parsing URLs, I mean, you

00:18:45.164 --> 00:18:49.520
can meet all sorts of stuff with URLs and
HTTP, whatever. Yeah, of course, there's like

00:18:49.520 --> 00:18:54.110
tons of built in behaviors that I'm just--I've
just showed you like my favorites. But if

00:18:54.110 --> 00:18:57.270
you want to do some URL thing, you certainly
want to look at that. All right, so let me

00:18:57.270 --> 00:19:05.280
go up and show you our next--our last exercise,
the best exercise ever. All right, so this

00:19:05.280 --> 00:19:10.450
exercise is actually in the form of a puzzle.
When you solve this coding exercise, you will

00:19:10.450 --> 00:19:13.780
know the name of the puzzle or know the name
of the puzzle but I'm just not going to show

00:19:13.780 --> 00:19:17.000
you the answer, like, you just have to figure
it out. There's two parts, there's Part A

00:19:17.000 --> 00:19:19.940
and Part B. If you just solve Part A, you
don't--that's kind of good enough, you do

00:19:19.940 --> 00:19:27.110
Part B if you wanted. That's okay. Okay, so
here's the idea, I had to think of some highly

00:19:27.110 --> 00:19:32.870
motivated and incredibly realistic puzzle
situation. So what I've done, I'm going to

00:19:32.870 --> 00:19:41.610
look in this file "happy_www.corp.google.com".
This is an Apache log file. And I'm going

00:19:41.610 --> 00:19:46.510
to look inside of there. I'm sorry. I have
to tell you the back story. The back story

00:19:46.510 --> 00:19:50.980
is that there's this image. The solution to
this puzzle is an image, and it's an image

00:19:50.980 --> 00:19:56.300
for the first part of something or someone
that is very happy. And in order to solve

00:19:56.300 --> 00:20:00.950
the puzzle, I want you to tell me what--what
is happy? What is that an image of? Now, what's

00:20:00.950 --> 00:20:05.640
happened is some evil person has taken that
image and they've shattered it like pinstripes

00:20:05.640 --> 00:20:09.830
into a bunch of little vertical stripes of
images. And so if you just have one stripe,

00:20:09.830 --> 00:20:12.610
you can't really tell what it is. You got
to really put it all together. And they've

00:20:12.610 --> 00:20:16.690
taken these stripes and they have scattered
them over the internet, somewhere. And each

00:20:16.690 --> 00:20:24.610
stripe has a URL that points to it. And what's
happened is if we look in this "happy_..."

00:20:24.610 --> 00:20:32.740
blah, blah, Apache log file, we started--there's
just all of this junk in here. But--and I

00:20:32.740 --> 00:20:38.040
should mention you for scary reasons, this
is not a real Apache log file. I took some

00:20:38.040 --> 00:20:41.610
Apache log files and I anonymized them and
I wrote a program that kind of put the pieces

00:20:41.610 --> 00:20:44.370
together, kind of like some Frankenstein thing.
So, if you look right--it doesn't really make

00:20:44.370 --> 00:20:49.880
a ton of sense, but syntactically it's accurate,
it looks like one, all right. So, if we look

00:20:49.880 --> 00:20:54.970
inside here, some--most of these URLs, so
you don't have to know anything about Apache

00:20:54.970 --> 00:20:59.750
log files, but this is--that's the client
URL, this is when it happened, this is the

00:20:59.750 --> 00:21:04.950
GET request that the client sent. So there
is a client asking for just "/" which is like

00:21:04.950 --> 00:21:10.680
a very common thing to want. And I'm going
to search for the word puzzle here. Here we

00:21:10.680 --> 00:21:18.640
go. Some of the GET requests have the word
puzzle in them. See where--that's "~nparlante/puzzle

00:21:18.640 --> 00:21:24.700
[INDISTINCT] whatever. So, the ones with "/puzzle"
in them, those are the ones that point to

00:21:24.700 --> 00:21:33.360
the image slices. And so your first job is
process the entire log file, find all the

00:21:33.360 --> 00:21:37.780
puzzle URLs; and there's duplicates, so you've
got to eliminate duplicates and then sort

00:21:37.780 --> 00:21:42.730
them alphabetically. And I want to just see
the output nice and nice. Now, just for kind

00:21:42.730 --> 00:21:48.240
of regular expression purposes, you know,
without getting a lot of detail about HTTP,

00:21:48.240 --> 00:21:52.590
the word "GET" is going to be here and then
there's going to be a space, and then there's

00:21:52.590 --> 00:21:56.630
going to be a bunch of character of whatever
it is that they've requested, and then there's

00:21:56.630 --> 00:22:01.440
going to be a space. And then the characters
that go inside of the URL is like kind of

00:22:01.440 --> 00:22:06.430
a mess. There's the" ~", "%" or whatever.
So, when you're writing the regular expression

00:22:06.430 --> 00:22:11.771
for this, I'd say look--look for the two spaces,
like the two spaces are for sure, and then

00:22:11.771 --> 00:22:16.190
just try and collect, [INDISTINCT] all the
garbage that's in between them. Okay, so let

00:22:16.190 --> 00:22:23.980
me, you know, for example, back--I'm just
going "\S", looms is like the nice way to

00:22:23.980 --> 00:22:27.320
grab that. Okay, so let me try running those
things, so I'll go down to my search directory.

00:22:27.320 --> 00:22:36.250
So, I'm going to say log puzzle and I'm going
to give it that happy file, and so on the

00:22:36.250 --> 00:22:41.920
simplest case what it's going to do is it
pulled out all the puzzle URLs, it eliminated

00:22:41.920 --> 00:22:44.650
duplicates, and it just prints them one per
line in alphabetical order.

00:22:44.650 --> 00:22:45.650
&gt;&gt; But you appear to have stolen all of them.
&gt;&gt; PARLANTE: Excuse me?

00:22:45.650 --> 00:22:46.730
&gt;&gt; You personally appear to have stolen all
of them.

00:22:46.730 --> 00:22:58.120
&gt;&gt; PARLANTE: Stolen? No, no, no, no, I create
it. Anyway, all right, so, oh, yes, yes, what--who

00:22:58.120 --> 00:23:03.240
is the evil genius behind this--who's on this
exercise? All right, no one knows. All right.

00:23:03.240 --> 00:23:11.750
Well, also, yeah, so that's the first part,
you got them. Now, what I want you to do is

00:23:11.750 --> 00:23:22.680
[INDISTINCT] I'm going to say "--todir", I'm
going to say "output". So what I wanted to

00:23:22.680 --> 00:23:29.450
do is if the todir option is specified, I
want you to find all the URLs and I want you

00:23:29.450 --> 00:23:33.961
to download them all. I want you to retrieve
all the little slices and I want you to write

00:23:33.961 --> 00:23:41.390
them into this output directory, right? Each
URL has a slice, I showed you "url.urlretrieve"

00:23:41.390 --> 00:23:45.970
so just grab them, just pull them. So I'm
going to go look into the output directory

00:23:45.970 --> 00:23:53.200
here and I want you to just give them names,
like discard their original names and just

00:23:53.200 --> 00:23:56.720
give them the name: image 0, image 1, image
2, image 3 and so on, all right? Now, we've

00:23:56.720 --> 00:24:01.180
got those problem, each one of those, if I
show it to you, is like--it's a vertical slice.

00:24:01.180 --> 00:24:06.010
If you just look at it in isolation, you can't
tell what it is. And so what we need to do

00:24:06.010 --> 00:24:10.631
is put the slices together, right? So, like
reform the original image, so then you can

00:24:10.631 --> 00:24:15.310
look at it, you can say, "Ah, I see what that
is. I've solved the puzzle." Now, the hard

00:24:15.310 --> 00:24:18.630
way to do this, the way I first thought about
it is like, "Oh, I guess I could get a Python

00:24:18.630 --> 00:24:22.461
imaging library," which, of course, there
is a bunch. And in the Python imaging library

00:24:22.461 --> 00:24:26.391
I can kind of composite these things together,
oh, in alphabetical order, that's correct.

00:24:26.391 --> 00:24:29.850
So, alphabetical order will do the slices
left to right the way you want for Part A.

00:24:29.850 --> 00:24:35.250
So that would be--but then I thought of an
easier way, the totally easy way to do this

00:24:35.250 --> 00:24:40.540
is to just have Firefox put the images together
for you. And the way you're going to do that

00:24:40.540 --> 00:24:47.200
is let me just show you the contents of this
"index.html", let's look inside of there,

00:24:47.200 --> 00:24:51.500
and what I've done, what you're going to do
is just put a bunch of image text together,

00:24:51.500 --> 00:24:56.400
just--and just with no space between whatever,
just lay it together, and then Firefox will

00:24:56.400 --> 00:25:01.850
just put those thing together, you're all
set. So that will actually solve the thing.

00:25:01.850 --> 00:25:05.650
So that is part--I guess, that's Parts A and
B, that's just solving the first puzzle. And

00:25:05.650 --> 00:25:09.200
if you can get through that, that's great.
There is a later part, that's a little more

00:25:09.200 --> 00:25:13.790
complicated where you can't just sort images
alphabetically. There's a slightly more complicated

00:25:13.790 --> 00:25:17.220
scheme how to descramble the left to right
order and so that's, you know, for slight

00:25:17.220 --> 00:25:20.460
additional difficulty that's the inaccessible
account. So what I'd like you to--guys to

00:25:20.460 --> 00:25:26.020
do is work on this for like a nice long time
and then some time, I mean around 3:30 or

00:25:26.020 --> 00:25:30.120
so I'll interrupt you one last time for a
few closing remarks and show you like a little

00:25:30.120 --> 00:25:32.591
bit of, you know, slightly advanced optional
things you might want think about, tech stuff.

00:25:32.591 --> 00:25:36.150
And then you're welcome to stay and work on
any of today's exercise. Kind of as long as

00:25:36.150 --> 00:25:39.180
you want and I--you know, some time after
four you can kind of wander off and do your

00:25:39.180 --> 00:25:41.269
regular job. Okay, so off to the code.

