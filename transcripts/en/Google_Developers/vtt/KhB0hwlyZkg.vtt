WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.916
[MUSIC PLAYING]

00:00:07.776 --> 00:00:10.250
TIMOTHY: Hi, I'm Timothy, and
I'm here at Google Cloud Next

00:00:10.250 --> 00:00:11.255
London 2018.

00:00:11.255 --> 00:00:13.280
And I'm standing with
Deepti, who just gave

00:00:13.280 --> 00:00:14.780
a session on a Cloud Spanner.

00:00:14.780 --> 00:00:16.219
Now, what's one
feature you talked

00:00:16.219 --> 00:00:18.678
about today for the first time
you're really excited about?

00:00:18.678 --> 00:00:20.469
DEEPTI SRIVASTAVA: So
today at London Next,

00:00:20.469 --> 00:00:23.000
we launched DML, which is Data
Manipulation Language, which

00:00:23.000 --> 00:00:25.010
is basically SQL Insert,
Update, and Deletes,

00:00:25.010 --> 00:00:28.490
and I demoed that at my
session, which is very exciting.

00:00:28.490 --> 00:00:33.020
And this feature basically
makes it look and smell and feel

00:00:33.020 --> 00:00:36.230
a lot more like traditional
relational databases,

00:00:36.230 --> 00:00:38.307
so they're very excited
to have the feature.

00:00:38.307 --> 00:00:39.890
TIMOTHY: I imagine
that really reduces

00:00:39.890 --> 00:00:42.140
the complexity of the Getting
Started experience with Cloud

00:00:42.140 --> 00:00:42.740
Spanner.

00:00:42.740 --> 00:00:44.390
DEEPTI SRIVASTAVA:
That's exactly it.

00:00:44.390 --> 00:00:46.814
Spanner is basically a
no compromise database,

00:00:46.814 --> 00:00:48.230
and our customers
love it for that

00:00:48.230 --> 00:00:50.188
because you get horizontal
scalability, as well

00:00:50.188 --> 00:00:52.610
as relational
semantics, transactions,

00:00:52.610 --> 00:00:55.890
and strong consistency across
the globe that nobody else has.

00:00:55.890 --> 00:00:57.524
However, this was
the one key feature

00:00:57.524 --> 00:00:58.940
that was missing
for our customers

00:00:58.940 --> 00:01:02.120
because they wanted to use
existing ORMs, existing

00:01:02.120 --> 00:01:03.920
tooling, et cetera,
with Cloud Spanner,

00:01:03.920 --> 00:01:06.890
which becomes a lot
easier to do now with DML,

00:01:06.890 --> 00:01:08.510
with SQL Insert,
Update, Deletes,

00:01:08.510 --> 00:01:10.220
and you can use JDBC drivers.

00:01:10.220 --> 00:01:12.950
We're launching the database
driver with this capability

00:01:12.950 --> 00:01:14.870
today as well, so
it just much easier

00:01:14.870 --> 00:01:16.730
for you to use ORMs,
existing tooling,

00:01:16.730 --> 00:01:20.226
and to migrate existing apps
or create new apps with this.

00:01:20.226 --> 00:01:21.350
TIMOTHY: Thank you, Deepti.

00:01:21.350 --> 00:01:23.920
DEEPTI SRIVASTAVA:
Thank you, Tim.

00:01:23.920 --> 00:01:25.670
I'm sitting here
with Robert Saxbey,

00:01:25.670 --> 00:01:29.597
who gave a session yesterday
on-- was it blobs to tables?

00:01:29.597 --> 00:01:30.180
Is that right?

00:01:30.180 --> 00:01:30.810
ROBERT SAXBY: Blobs to table--

00:01:30.810 --> 00:01:32.260
you got it absolutely
right, yeah.

00:01:32.260 --> 00:01:33.800
TIMOTHY: Robert, what
was that session about?

00:01:33.800 --> 00:01:35.870
ROBERT SAXBY: So that session
was about the different storage

00:01:35.870 --> 00:01:37.310
types that we have
at Google Cloud

00:01:37.310 --> 00:01:39.524
and how to choose which
one for your use case.

00:01:39.524 --> 00:01:41.690
TIMOTHY: If you were to
choose one as your favorite,

00:01:41.690 --> 00:01:42.450
what would it be?

00:01:42.450 --> 00:01:44.755
ROBERT SAXBY: Oh, I have
at least three favorites.

00:01:44.755 --> 00:01:45.630
TIMOTHY: Give me two.

00:01:45.630 --> 00:01:46.170
ROBERT SAXBY: Give you two?

00:01:46.170 --> 00:01:47.086
OK, I'll give you two.

00:01:47.086 --> 00:01:48.260
One is Bigtable.

00:01:48.260 --> 00:01:52.160
I love our ability to be
able to actually random read

00:01:52.160 --> 00:01:55.400
a single row of data,
a single digit latency,

00:01:55.400 --> 00:01:57.800
and scale that up
to infinite size.

00:01:57.800 --> 00:01:59.810
We have customers
really reading 10s

00:01:59.810 --> 00:02:01.550
of millions of rows
per second, and they

00:02:01.550 --> 00:02:03.090
can scale that up
on demand to be

00:02:03.090 --> 00:02:05.510
able to address their use case.

00:02:05.510 --> 00:02:07.340
The second one has
to be BigQuery.

00:02:07.340 --> 00:02:09.050
I'm a data analytics
guy, I mean,

00:02:09.050 --> 00:02:11.077
so I'm heavily involved--
heavily invested.

00:02:11.077 --> 00:02:13.410
So BigQuery-- first of all,
it's a common misconception,

00:02:13.410 --> 00:02:15.820
say, BigQuery, they think,
oh, it's just this one thing?

00:02:15.820 --> 00:02:16.820
Yeah, it is one thing.

00:02:16.820 --> 00:02:19.100
It's our data warehouse,
but our data warehouse

00:02:19.100 --> 00:02:20.430
consists of two parts.

00:02:20.430 --> 00:02:22.627
It consists of the storage,
which is capacitor,

00:02:22.627 --> 00:02:24.710
and it consists of the
serving tree, the part that

00:02:24.710 --> 00:02:25.997
actually runs your SQL query.

00:02:25.997 --> 00:02:27.830
Now, from that serving
tree, that seat where

00:02:27.830 --> 00:02:30.260
you run your SQL,
you can actually

00:02:30.260 --> 00:02:31.940
query our native
storage capacitor

00:02:31.940 --> 00:02:35.210
or you can query storage which
is federated to Google Cloud

00:02:35.210 --> 00:02:35.804
Storage.

00:02:35.804 --> 00:02:37.220
But when it's that
native storage,

00:02:37.220 --> 00:02:39.080
we get absolutely
phenomenal performance.

00:02:39.080 --> 00:02:41.540
Think about, you have a
petabyte of data in a table.

00:02:41.540 --> 00:02:43.222
How long does it
take to query that?

00:02:43.222 --> 00:02:43.930
TIMOTHY: Forever.

00:02:43.930 --> 00:02:45.390
ROBERT SAXBY:
Forever, absolutely.

00:02:45.390 --> 00:02:47.660
So what we do, we partition
it, and we cluster it.

00:02:47.660 --> 00:02:49.520
So there was another
talk yesterday,

00:02:49.520 --> 00:02:52.000
a talk on BigQuery
performance [INAUDIBLE]..

00:02:52.000 --> 00:02:54.490
Then he showed how we can
actually query that data

00:02:54.490 --> 00:02:56.780
and get it within a
few seconds by applying

00:02:56.780 --> 00:02:59.140
the right partitions and
clusters to your data.

00:02:59.140 --> 00:03:00.140
TIMOTHY: That's amazing.

00:03:00.140 --> 00:03:02.270
And it actually goes a
lot quicker than forever.

00:03:02.270 --> 00:03:04.520
ROBERT SAXBY: Yeah, that's
a lot quicker than forever.

00:03:08.370 --> 00:03:10.580
TIMOTHY: I'm standing
next to Henry Bell, who

00:03:10.580 --> 00:03:12.290
gave a session on Kubernetes.

00:03:12.290 --> 00:03:15.260
Henry, what was the one part
of the session that gets you

00:03:15.260 --> 00:03:16.850
most excited about Kubernetes?

00:03:16.850 --> 00:03:17.330
HENRY BELL: Right, sure.

00:03:17.330 --> 00:03:18.860
So we're doing
quite a lot of work

00:03:18.860 --> 00:03:22.940
to integrate the native
Kubernetes world with JCP,

00:03:22.940 --> 00:03:24.770
services so thinking
about things

00:03:24.770 --> 00:03:27.100
like Cloud Armor
for DDoS protection,

00:03:27.100 --> 00:03:30.470
the Identityware proxy
for strong authentication,

00:03:30.470 --> 00:03:33.680
and the integrations with
our global load balancer.

00:03:33.680 --> 00:03:35.750
So this is a globally
distributed system

00:03:35.750 --> 00:03:38.590
that allows us to provide a
single any cost IP address,

00:03:38.590 --> 00:03:41.390
and this means that we can
route users to resources

00:03:41.390 --> 00:03:42.510
that are near to them.

00:03:42.510 --> 00:03:44.450
So for example, you
might have an application

00:03:44.450 --> 00:03:45.930
running in two
Kubernetes clusters

00:03:45.930 --> 00:03:48.590
in two different regions, which
means that users are routed

00:03:48.590 --> 00:03:51.650
to the cluster that's nearest
to them, which means that we can

00:03:51.650 --> 00:03:54.800
improve on latency and offer
the best user experience we

00:03:54.800 --> 00:03:56.780
possibly can, as well
as being able to provide

00:03:56.780 --> 00:03:58.770
nice things really
strong, solid [INAUDIBLE]

00:03:58.770 --> 00:04:00.240
redundancy, for example.

00:04:00.240 --> 00:04:01.250
TIMOTHY: That's awesome.

00:04:01.250 --> 00:04:02.291
Thank you so much, Henry.

00:04:02.291 --> 00:04:04.832
HENRY BELL: Thank you.

00:04:04.832 --> 00:04:07.290
TIMOTHY: I'm sitting with Oliver
Madden, who gave a session

00:04:07.290 --> 00:04:09.000
today about the Chrome browser.

00:04:09.000 --> 00:04:11.340
Oliver, could you tell us
what's your favorite feature

00:04:11.340 --> 00:04:14.940
of the Chrome browser that,
say, you use in Enterprise,

00:04:14.940 --> 00:04:16.959
but average users
might not know about?

00:04:16.959 --> 00:04:19.899
OLIVER MADDEN: I'd probably
have to go with legacy browser

00:04:19.899 --> 00:04:20.399
support.

00:04:20.399 --> 00:04:21.070
TIMOTHY: Tell me about that.

00:04:21.070 --> 00:04:21.570
What is it?

00:04:21.570 --> 00:04:23.361
OLIVER MADDEN: Basically,
it's an extension

00:04:23.361 --> 00:04:28.320
that allows admins to populate
URLs that specifically

00:04:28.320 --> 00:04:31.510
need legacy technology, so
Silverlight, ActiveX, et

00:04:31.510 --> 00:04:32.010
cetera.

00:04:32.010 --> 00:04:33.960
So you can help
your users when they

00:04:33.960 --> 00:04:36.450
need that particular
technology, Chrome

00:04:36.450 --> 00:04:39.270
will flip into your
designated browser,

00:04:39.270 --> 00:04:42.990
probably IE in this case,
just for the duration of that.

00:04:42.990 --> 00:04:44.490
And then when they
need or when they

00:04:44.490 --> 00:04:47.790
can use a more modern browser,
and they key in the URL,

00:04:47.790 --> 00:04:50.470
I don't know, Gmail.com, it will
flip back into Chrome for them.

00:04:50.470 --> 00:04:51.120
TIMOTHY: That's amazing.

00:04:51.120 --> 00:04:51.810
OLIVER MADDEN: Seamless.

00:04:51.810 --> 00:04:52.260
TIMOTHY: Awesome.

00:04:52.260 --> 00:04:53.010
Thanks so much, Oliver.

00:04:53.010 --> 00:04:54.051
OLIVER MADDEN: Thank you.

00:04:56.404 --> 00:04:59.220
TIMOTHY: Now, Lee's doing a
demo in the Demo Derby later.

00:04:59.220 --> 00:05:01.721
Lee, could you give us a quick
synopsis of what the demo is?

00:05:01.721 --> 00:05:02.511
LEE BOONSTRA: Sure.

00:05:02.511 --> 00:05:04.530
So I'm building this
customer care application

00:05:04.530 --> 00:05:07.080
where I'm using Dialogflow
and other Google Cloud

00:05:07.080 --> 00:05:10.110
components to create a
real chatbot experience.

00:05:10.110 --> 00:05:12.270
TIMOTHY: That's awesome,
and what I really

00:05:12.270 --> 00:05:13.770
like about the
demo is that you're

00:05:13.770 --> 00:05:15.660
using a bunch of
different JCP components

00:05:15.660 --> 00:05:17.910
so that you can create
a complete solution

00:05:17.910 --> 00:05:18.990
for this customer care.

00:05:18.990 --> 00:05:20.320
LEE BOONSTRA: Oh,
yeah, I'm using a lot.

00:05:20.320 --> 00:05:22.470
So actually, I'm using
Kubernetes first of all,

00:05:22.470 --> 00:05:24.184
so I create a
front end container

00:05:24.184 --> 00:05:25.350
and then back end container.

00:05:25.350 --> 00:05:27.440
The back end container
that talks to Dialogflow

00:05:27.440 --> 00:05:28.500
through the SDK.

00:05:28.500 --> 00:05:30.270
Then every time
when customers, they

00:05:30.270 --> 00:05:33.399
type something in the chatbot,
we pass it also to Pub/Sub,

00:05:33.399 --> 00:05:35.190
and from Pub/Sub, there
is a cloud function

00:05:35.190 --> 00:05:36.273
that captures the message.

00:05:36.273 --> 00:05:40.200
It goes into the LP API to
remove sensitive information.

00:05:40.200 --> 00:05:43.560
Then we move it to a third LP
API to detect the sentiment,

00:05:43.560 --> 00:05:46.150
so people can really figure
out what people are thinking

00:05:46.150 --> 00:05:47.800
and if they're happy or not.

00:05:47.800 --> 00:05:51.470
And then we pass it into the
data warehouse like BigQuery

00:05:51.470 --> 00:05:53.140
so we can push it
into a dashboard,

00:05:53.140 --> 00:05:55.590
and then you can really
see some awesome things

00:05:55.590 --> 00:05:57.702
and start to optimize
your chatbot.

00:05:57.702 --> 00:05:58.785
TIMOTHY: What a cool flow.

00:05:58.785 --> 00:05:59.100
LEE BOONSTRA: Yeah.

00:05:59.100 --> 00:06:01.200
TIMOTHY: What's your what's your
favorite technology in there?

00:06:01.200 --> 00:06:02.490
LEE BOONSTRA:
Definitely Dialogflow.

00:06:02.490 --> 00:06:03.220
TIMOTHY: Why is that?

00:06:03.220 --> 00:06:05.250
LEE BOONSTRA: Because it's
so easy to create a chatbot.

00:06:05.250 --> 00:06:07.440
You don't need to be
technical to set up a chatbot,

00:06:07.440 --> 00:06:10.140
but same time, you can go
very deep and use the SDK

00:06:10.140 --> 00:06:11.910
and do all crazy stuff.

00:06:11.910 --> 00:06:12.670
TIMOTHY: Awesome.

00:06:12.670 --> 00:06:14.160
Well, if you want to
find out some more,

00:06:14.160 --> 00:06:15.820
click the links in
the description below.

00:06:15.820 --> 00:06:16.320
Thanks, Lee.

00:06:16.320 --> 00:06:17.970
LEE BOONSTRA: Thank you.

