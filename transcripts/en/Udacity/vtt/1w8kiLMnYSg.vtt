WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.640
For this problem, we're about the claim the spaceships.

00:00:02.640 --> 00:00:07.520
Actually, we're dealing with the Apollo 13 mission. We should go from 1970.

00:00:07.520 --> 00:00:11.090
They were supposed to take astronauts from the earth and land them on the moon.

00:00:11.090 --> 00:00:14.080
However, at some point during the trip, they encountered a problem

00:00:14.080 --> 00:00:18.300
with one of their oxygen tanks and they had to abort their mission of landing on the moon

00:00:18.300 --> 00:00:21.970
and instead figure out how to get the crew back to the earth safely.

00:00:21.970 --> 00:00:24.960
Well in this problem, we're going to show how changing the velocity of the ship

00:00:24.960 --> 00:00:30.720
using boost rockets can change the trajectory of the ship to make it loop around the earth

00:00:30.720 --> 00:00:34.620
instead of landing on the moon and bring it back to where it started on the earth.

00:00:34.620 --> 00:00:38.550
This is definitely the most complex part that we've given you so far.

00:00:38.550 --> 00:00:41.390
So don't worry if it seems a little bit complicated at first.

00:00:41.390 --> 00:00:45.640
I'm going to help you out by continuing to chunk and giving you some hints.

00:00:45.640 --> 00:00:48.710
As always, we told you some important information to start up with.

00:00:48.710 --> 00:00:51.680
We have some information about the earth and gravity,

00:00:51.680 --> 00:00:55.410
and also significant information about the moon including the period of the moon

00:00:55.410 --> 00:00:58.260
or the time that it takes the moon to orbit around the earth.

00:00:58.260 --> 00:01:02.100
Well, once you have unique value that you see here is no initial angle

00:01:02.100 --> 00:01:05.630
and this is just the angle at which the moon is initially placed from the earth.

00:01:05.630 --> 00:01:10.240
This is a zero degree or 0 radian line and the angle between this line

00:01:10.240 --> 00:01:15.250
and the position vector of the moon is equal to moon initial angle.

00:01:15.250 --> 00:01:19.830
Let's have the total duration of the flight that we're considering in the times measured in meters

00:01:19.830 --> 00:01:23.710
which has resulted to local truncation air that we're going to allow the flight path to have.

00:01:23.710 --> 00:01:25.440
Well, Jorn mentioned this brief in the unit,

00:01:25.440 --> 00:01:27.970
and I'll give you little bit more explanation about it in a minute.

00:01:27.970 --> 00:01:32.260
We've laid out five tasks for you to complete to make it fundamental as a cohesive halt.

00:01:32.260 --> 00:01:35.050
The first one, which you can see right here, is to find

00:01:35.050 --> 00:01:37.240
the moon's position vector as a function of time.

00:01:37.240 --> 00:01:39.730
And here we're going to consider the earth is the origin here,

00:01:39.730 --> 00:01:44.030
as the position vector of the moon is just the vector from the earth to the moon.

00:01:44.030 --> 00:01:46.290
Now remember this is dependent on time.

00:01:46.290 --> 00:01:49.900
You can also say that the moon is going to move in counter clockwise around the earth

00:01:49.900 --> 00:01:52.550
or at least that's how it looks in this picture.

00:01:52.550 --> 00:01:54.050
Then the next thing that you need to figure out

00:01:54.050 --> 00:01:57.590
is how to calculate this spaceship's acceleration to the gravity.

00:01:57.590 --> 00:02:00.530
Well the input here is time and position.

00:02:00.530 --> 00:02:06.290
The position right here is not the same as position that you just computed in the task above.

00:02:06.290 --> 00:02:11.400
Instead, this position is a position of the spacecraft and not of the moon.

00:02:11.400 --> 00:02:17.160
So the second task is going to define the position of the spaceship depending on time

00:02:17.160 --> 00:02:20.150
and then you need to figure out how the gravitational attraction

00:02:20.150 --> 00:02:23.950
to the earth and to the moon affected deceleration.

00:02:23.950 --> 00:02:27.650
You think about how you can use vectors to do this and also as I said earlier,

00:02:27.650 --> 00:02:29.420
pretend that the earth is not the origin.

00:02:29.420 --> 00:02:33.730
Well, each of the first two tasks notice what your return values are

00:02:33.730 --> 00:02:38.600
and make sure that you define variables with the event in their proper places and it's function.

00:02:38.600 --> 00:02:41.170
So now you come to the slightly trickier part.

00:02:41.170 --> 00:02:45.250
In order to adjust the spaceship's trajectory to make it go around the moon,

00:02:45.250 --> 00:02:48.020
and then back in the right spot on the earth.

00:02:48.020 --> 00:02:52.400
It would be helpful if the crew had some control over it's velocity during the flight,

00:02:52.400 --> 00:02:55.150
lucky for them and lucky for us too.

00:02:55.150 --> 00:03:00.670
Those spaceship has rocket mechanisms that will allow to reduce it's speed on the way to the moon

00:03:00.670 --> 00:03:03.210
and increase it's speed on the way back to the earth.

00:03:03.210 --> 00:03:07.990
And we applied boost function right here. We've created two variant variables for you.

00:03:07.990 --> 00:03:11.620
And now I'm going to help you program some of these changes in velocity.

00:03:11.620 --> 00:03:15.830
This first one first two mid course correction or MCC

00:03:15.830 --> 00:03:19.440
and this task is whether or not the initial deceleration has occurred.

00:03:19.440 --> 00:03:22.960
Right now, it's set to false since at the beginning of the flight, this hasn't happened yet.

00:03:22.960 --> 00:03:28.280
Similarly, we have a second variable which at first does descent propulsion system or TPS.

00:03:28.280 --> 00:03:30.410
And this represents a second change in velocity.

00:03:30.410 --> 00:03:34.060
And the amount of which we're going to change the velocity at this point

00:03:34.060 --> 00:03:36.820
is what we're going to call the variable boost.

00:03:36.820 --> 00:03:40.830
Now, at these two moments, remember that we want to change just the management of the velocity.

00:03:40.830 --> 00:03:44.410
We don't want to mess with the direction at all. That would deal with itself.

00:03:44.410 --> 00:03:48.470
So, if your task is going to be to include these two velocities shifts

00:03:48.470 --> 00:03:53.610
and of course include them at the right times which I listed in the code.

00:03:53.610 --> 00:03:56.750
You can notice in the setup position of velocity vectors for you right here

00:03:56.750 --> 00:04:00.570
and plugged the initial values as well; however, it's up to you to figure out

00:04:00.570 --> 00:04:05.820
how to adjust their values with each step using Jorn's method and adapt a step size.

00:04:05.820 --> 00:04:08.760
You're going to that down here in this while loop.

00:04:08.760 --> 00:04:11.690
Here's Jorn's for you just to help you out a little bit.

00:04:11.690 --> 00:04:14.760
Once you calculated position and velocity using Heun's method.

00:04:14.760 --> 00:04:18.190
We also need to adjust the step size of the end of the while loop

00:04:18.190 --> 00:04:22.260
to reset it was a new value for the next time that we go to the loop.

00:04:22.260 --> 00:04:27.770
Now, just as we did in section 12 of the unit, we're going to store whatever the present step size is as h.

00:04:27.770 --> 00:04:31.710
And whatever the step size that would be in the next step of h new.

00:04:31.710 --> 00:04:35.110
To figure out the relationship between h and h new,

00:04:35.110 --> 00:04:38.130
you need to calculate the local truncation error or LTE.

00:04:38.130 --> 00:04:41.650
We also use basically the error that is made in a single time step.

00:04:41.650 --> 00:04:45.510
The difference after each time step between exact quantity

00:04:45.510 --> 00:04:48.890
and the quantity estimated by the approximation method that we're using.

00:04:48.890 --> 00:04:52.990
So new step size, h new is going to depend on the current step size,

00:04:52.990 --> 00:04:56.760
the tolerance, which we gave you earlier and the LTE.

00:04:56.760 --> 00:05:00.210
So consider calculating a local truncation error takes into account

00:05:00.210 --> 00:05:04.960
the difference between the values of position calculated by Euler and by Heun

00:05:04.960 --> 00:05:08.070
and the difference in values of velocity.

00:05:08.070 --> 00:05:11.660
T right here is the total duration of the flight so far.

00:05:11.660 --> 00:05:16.370
This needs to be here to let all of the units line up and LTE to be measured in length.

00:05:16.370 --> 00:05:20.510
Once you filled everything in, we're going back to the top of the applied boost function

00:05:20.510 --> 00:05:24.700
and figure out what the proper value of the constant boost is.

00:05:24.700 --> 00:05:28.070
Remember that our goal is to get the spaceship all the way around the moon

00:05:28.070 --> 00:05:31.580
and then have it just as it touches the earth when it comes back.

00:05:31.580 --> 00:05:36.520
Once you filled in everything down here, go back to the top of the applied boost function

00:05:36.520 --> 00:05:40.110
and figure out what the proper value for the constant boost is.

00:05:40.110 --> 00:05:46.260
We've given you just an initial value of zero, but we've also given you some other values to try out.

00:05:46.260 --> 00:05:48.760
So try plugging each these in and see what happens.

00:05:48.760 --> 00:05:52.470
Remember that our goal is put the spaceship all the way around the moon

00:05:52.470 --> 00:05:58.080
and then come back the earth and just touch the place where it initially took off.

00:05:58.080 --> 00:06:01.130
And because of the total time that we set at the top of our code,

00:06:01.130 --> 00:06:06.430
the shoot trajectory is not actually going to stop in the plot right initially when the ship gets to the earth.

00:06:06.430 --> 00:06:09.090
Instead, it's going to continue out in the earth as the spaceship

00:06:09.090 --> 00:06:11.840
is going to go back to the moon the second time.

00:06:11.840 --> 00:06:15.120
And the reason we did this was to try to make it a little bit easier for you

00:06:15.120 --> 00:06:17.780
to tell which value of the boost you should use.

00:06:17.780 --> 00:06:21.470
The correct value of boost will have the tail of it's trajectory

00:06:21.470 --> 00:06:25.250
reaching just back to the radius of the moon's orbit.

00:06:25.250 --> 00:06:30.030
Incorrect values of these could make the trajectory end short, go off in the wrong direction,

00:06:30.030 --> 00:06:34.240
but even if the spaceship crash into the earth which we definitely don't want to happen.

00:06:34.240 --> 00:06:36.010
And I'm sure the crew doesn't either.

00:06:36.010 --> 00:06:40.740
Well, now that this is a complex problem, but I'm sure you'll be able to return the crew safely home.

00:06:40.740 --> 09:59:59.000
If you need any help, just come to the front

