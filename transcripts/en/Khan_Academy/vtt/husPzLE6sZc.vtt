WEBVTT
Kind: captions
Language: en

00:00:00.254 --> 00:00:02.170
What I want to do in
this video is really just

00:00:02.170 --> 00:00:05.030
expose you and introduce
you to the idea

00:00:05.030 --> 00:00:07.859
of even what a
computer program is.

00:00:07.859 --> 00:00:09.650
And just in case you
want to follow along--

00:00:09.650 --> 00:00:11.670
and I highly recommend you
do that, because the real way

00:00:11.670 --> 00:00:14.044
to learn computer science is
to really fiddle with things

00:00:14.044 --> 00:00:17.740
yourself-- this is a
Python environment.

00:00:17.740 --> 00:00:20.380
So I'm going to be doing a lot
of the programming in Python.

00:00:20.380 --> 00:00:23.520
And right here, the environment
is called pyscriptor,

00:00:23.520 --> 00:00:27.800
P-Y-S-C-R-I-P-T-O-R. It's free.

00:00:27.800 --> 00:00:29.730
It's an open-source
piece of software.

00:00:29.730 --> 00:00:34.260
And I'm using Python, I believe
I'm using Python 2.6 or 2.7.

00:00:34.260 --> 00:00:36.380
As long as you're
using Python 2,

00:00:36.380 --> 00:00:38.477
your examples will
be the same as mine.

00:00:38.477 --> 00:00:39.560
They'll work the same way.

00:00:39.560 --> 00:00:41.250
If you use Python
3, you're going

00:00:41.250 --> 00:00:43.660
to have to use slightly
different variations every now

00:00:43.660 --> 00:00:45.160
and then to make
it work properly.

00:00:45.160 --> 00:00:48.640
And I'll try to make notes
for those when they occur.

00:00:48.640 --> 00:00:51.099
So let's just start writing
ourselves the computer program.

00:00:51.099 --> 00:00:53.723
And what's cool about this is we
can write our computer program

00:00:53.723 --> 00:00:54.580
right here.

00:00:54.580 --> 00:00:57.720
And really, we're just
editing text in a file.

00:00:57.720 --> 00:00:58.580
That's all it is.

00:00:58.580 --> 00:01:00.030
It's a set of instructions.

00:01:00.030 --> 00:01:02.610
And the computer is just going
to start, for the most part,

00:01:02.610 --> 00:01:04.060
at the top of this file.

00:01:04.060 --> 00:01:06.471
And just go down and
read the instructions.

00:01:06.471 --> 00:01:08.220
Although, you'll see
later on that there's

00:01:08.220 --> 00:01:11.054
ways to tell the computer to
jump around and loop around

00:01:11.054 --> 00:01:13.470
within the instructions, so
it can do things over and over

00:01:13.470 --> 00:01:15.530
again, or skip other things.

00:01:15.530 --> 00:01:18.747
But with that said, let's write
ourselves a simple program.

00:01:18.747 --> 00:01:20.580
And while we do this,
we'll expose ourselves

00:01:20.580 --> 00:01:22.200
to some of the
core concepts that

00:01:22.200 --> 00:01:24.250
exist within a computer program.

00:01:24.250 --> 00:01:26.250
So one of the main--
so let me just

00:01:26.250 --> 00:01:29.510
write a very, very, very
simple computer program.

00:01:29.510 --> 00:01:31.600
So one very simple
computer program

00:01:31.600 --> 00:01:34.140
would literally just
be an expression.

00:01:34.140 --> 00:01:40.990
So three-- So let me just
write, print 3 plus 7.

00:01:40.990 --> 00:01:44.050
So it's, literally, just going
to take 3 plus 7 and print it.

00:01:44.050 --> 00:01:46.640
So it's going to pass it to
the print function, which

00:01:46.640 --> 00:01:47.680
comes with Python.

00:01:47.680 --> 00:01:51.510
And maybe I'll write it
like this, print 3 plus 7.

00:01:51.510 --> 00:01:52.890
And so let's save this file.

00:01:52.890 --> 00:01:55.050
So there's, literally, only,
if you think about it, only one

00:01:55.050 --> 00:01:56.300
command here, at the top line.

00:01:56.300 --> 00:01:57.480
It says print 3 plus 7.

00:01:57.480 --> 00:01:58.980
Actually, let's add
another command,

00:01:58.980 --> 00:02:01.810
just so you can see that it's
going to go from the top down.

00:02:01.810 --> 00:02:07.050
And then let me add another
one, print 2 minus 1.

00:02:07.050 --> 00:02:15.290
And then, let's do, print,
this is a chunk of text.

00:02:15.290 --> 00:02:18.140
And let's see what this
computer programmer, right here,

00:02:18.140 --> 00:02:19.820
is going to do.

00:02:19.820 --> 00:02:21.035
So let me save it.

00:02:23.726 --> 00:02:25.350
I've saved it as the
file, testarea.py.

00:02:28.460 --> 00:02:32.020
The .py signifies that
it is a Python file.

00:02:32.020 --> 00:02:33.630
And now, let me run the program.

00:02:33.630 --> 00:02:35.838
And what's nice about these
development environments,

00:02:35.838 --> 00:02:38.420
these IDE, Integrated
Development Environments,

00:02:38.420 --> 00:02:40.757
is that you can
kind of type and run

00:02:40.757 --> 00:02:42.090
your programs in the same place.

00:02:42.090 --> 00:02:43.506
And it also color
codes your text.

00:02:43.506 --> 00:02:45.272
So you can see what's
a function, what's

00:02:45.272 --> 00:02:46.980
not a function, the
different data types.

00:02:46.980 --> 00:02:49.105
And we'll talk more about
data types in the future.

00:02:49.105 --> 00:02:51.706
But let's just run this
program to see what happens.

00:02:51.706 --> 00:02:52.330
So there we go.

00:02:52.330 --> 00:02:52.920
We ran it.

00:02:52.920 --> 00:02:55.730
So it printed 10,
then it printed 1,

00:02:55.730 --> 00:02:58.200
then it printed, this
is a chunk of text.

00:02:58.200 --> 00:02:59.856
So it did exactly
what we told to do.

00:02:59.856 --> 00:03:00.980
And it did it in the order.

00:03:00.980 --> 00:03:01.970
It started up here.

00:03:01.970 --> 00:03:05.312
It printed-- it evaluated
3 plus 7 as equal to 10,

00:03:05.312 --> 00:03:06.270
and then it printed it.

00:03:06.270 --> 00:03:07.680
It printed 10 here.

00:03:07.680 --> 00:03:10.020
Then it printed 2 minus 1.

00:03:10.020 --> 00:03:11.000
Then it did that there.

00:03:11.000 --> 00:03:13.121
And then it printed,
this is a chunk of text.

00:03:13.121 --> 00:03:14.870
Now, one thing I want
to introduce you to,

00:03:14.870 --> 00:03:17.394
fairly early on, is
the idea of data types.

00:03:17.394 --> 00:03:18.810
So even when you
saw this example,

00:03:18.810 --> 00:03:20.840
you might have had the
gut feeling that look,

00:03:20.840 --> 00:03:23.830
there's something kind of
different about a 3 or a 2,

00:03:23.830 --> 00:03:26.950
or a 1, or a 7, and
this chunk of text.

00:03:26.950 --> 00:03:27.850
This is a number.

00:03:27.850 --> 00:03:31.610
I can kind of just, I feel like
I can just kind of add numbers.

00:03:31.610 --> 00:03:34.320
They're representing
some type of quantity.

00:03:34.320 --> 00:03:36.480
While this, over here,
is representing-- well,

00:03:36.480 --> 00:03:38.410
it's representing
a chunk of text.

00:03:38.410 --> 00:03:40.090
And your intuition
would be right.

00:03:40.090 --> 00:03:42.240
These are different data types.

00:03:42.240 --> 00:03:45.940
The 3's and the 7's and the
1's, these are numeric literals.

00:03:45.940 --> 00:03:48.850
And in this particular
case, they are integers.

00:03:48.850 --> 00:03:51.190
And you can-- this
right over here,

00:03:51.190 --> 00:03:52.936
this is actually
a string, which is

00:03:52.936 --> 00:03:54.810
a word you'll hear a
lot in computer science.

00:03:54.810 --> 00:03:58.720
And it's really referring
to a string of characters.

00:03:58.720 --> 00:04:00.470
And in Python, we
can actually ask

00:04:00.470 --> 00:04:02.630
it, what are the
types of these things.

00:04:02.630 --> 00:04:04.880
So you can pass them
to the function type.

00:04:04.880 --> 00:04:10.310
And so now it should print the
type of 3 plus 7, not just 10.

00:04:10.310 --> 00:04:11.072
So let's try that.

00:04:11.072 --> 00:04:13.030
And I'll just print 2
minus 1, to just show you

00:04:13.030 --> 00:04:13.700
the difference.

00:04:13.700 --> 00:04:17.970
And then I'll print the
type of this chunk of text.

00:04:21.260 --> 00:04:23.110
And so, let's save it.

00:04:23.110 --> 00:04:26.600
I'll just type Control S.
That's a shortcut to save this.

00:04:26.600 --> 00:04:29.760
And then, I'll try
to run this program.

00:04:29.760 --> 00:04:30.959
So there you go.

00:04:30.959 --> 00:04:32.125
It evaluated this statement.

00:04:32.125 --> 00:04:34.990
And to evaluate this, it starts
on the inner parentheses,

00:04:34.990 --> 00:04:37.150
3 plus 7 is 10.

00:04:37.150 --> 00:04:40.400
Then it tries to take the type
of 10, which is a type int,

00:04:40.400 --> 00:04:42.047
and then it prints
that type int.

00:04:42.047 --> 00:04:43.130
And you see it right here.

00:04:43.130 --> 00:04:44.240
It says, type int.

00:04:44.240 --> 00:04:46.600
Int is short for integer.

00:04:46.600 --> 00:04:47.989
Then it says print 2 minus 1.

00:04:47.989 --> 00:04:49.530
It does that on this
line right here.

00:04:49.530 --> 00:04:50.790
It prints 1.

00:04:50.790 --> 00:04:53.610
And then it prints the
type of this whole thing

00:04:53.610 --> 00:04:54.360
right over here.

00:04:54.360 --> 00:04:55.735
So instead of
printing it itself,

00:04:55.735 --> 00:04:56.850
it just printed its type.

00:04:56.850 --> 00:04:59.892
And its type is a string.

00:04:59.892 --> 00:05:01.850
Now, the next thing I
want to introduce you to,

00:05:01.850 --> 00:05:04.660
as we just fiddle our way,
experimenting with programs,

00:05:04.660 --> 00:05:07.080
is the idea of a variable.

00:05:07.080 --> 00:05:08.790
Because one of the
things is, we're

00:05:08.790 --> 00:05:11.730
going to want to store these
things in different places.

00:05:11.730 --> 00:05:13.230
And as we'll learn
in future videos,

00:05:13.230 --> 00:05:14.729
in Python it's more
of like, we want

00:05:14.729 --> 00:05:16.480
to have labels on these things.

00:05:16.480 --> 00:05:17.571
And the labels can change.

00:05:17.571 --> 00:05:19.070
But let's see-- or
we could put them

00:05:19.070 --> 00:05:20.650
in different types of labels.

00:05:20.650 --> 00:05:22.990
So let's write a completely
different program over here,

00:05:22.990 --> 00:05:25.420
and I'll do it using variables.

00:05:25.420 --> 00:05:27.270
So let's-- and what's
cool about Python,

00:05:27.270 --> 00:05:32.720
or some people don't like it,
is you can put any type of data

00:05:32.720 --> 00:05:34.190
in any type of variables.

00:05:34.190 --> 00:05:40.560
So you could say, a
is equal to 3 plus 5.

00:05:40.560 --> 00:05:52.950
And then we can say b is equal
to a times a, minus a, minus 1.

00:05:52.950 --> 00:06:02.860
And then you can say, c
is equal to a times b.

00:06:02.860 --> 00:06:04.290
And then, you could
have something

00:06:04.290 --> 00:06:06.810
like-- I'll put some
space here, just

00:06:06.810 --> 00:06:12.050
to make it look a
little bit cleaner--

00:06:12.050 --> 00:06:13.940
c is equal to a times b.

00:06:13.940 --> 00:06:19.980
And then we can
say, let's print c.

00:06:19.980 --> 00:06:21.536
And so if you want,
you can go ahead

00:06:21.536 --> 00:06:23.660
and try to figure out what
c is going to look like,

00:06:23.660 --> 00:06:25.339
or we can just run this program.

00:06:25.339 --> 00:06:26.630
So let's run the program first.

00:06:26.630 --> 00:06:28.730
And then we can go back
to see that it actually

00:06:28.730 --> 00:06:29.670
did the right thing.

00:06:29.670 --> 00:06:31.610
So I'm just going to
save this program.

00:06:31.610 --> 00:06:34.510
And now I'm going to run it.

00:06:34.510 --> 00:06:36.380
Well, I got 440 for c.

00:06:36.380 --> 00:06:38.270
So let's see if
that makes sense.

00:06:38.270 --> 00:06:40.850
So 3 plus 5 is 8.

00:06:40.850 --> 00:06:43.400
And so, the label
a will refer to 8.

00:06:43.400 --> 00:06:45.330
So any place in the
program, until we redefine

00:06:45.330 --> 00:06:49.460
a, any time you use a, it's
going to say, whoa, a is an 8,

00:06:49.460 --> 00:06:50.980
a is referring to 8.

00:06:50.980 --> 00:06:53.170
So when you go down over
here, and we're defining b,

00:06:53.170 --> 00:06:54.600
it'll say, OK, a times 8.

00:06:54.600 --> 00:06:56.570
It uses order of operations.

00:06:56.570 --> 00:06:59.540
So in order of operations, you
do your multiplication first.

00:06:59.540 --> 00:07:01.735
And so a times-- especially
when you're comparing it

00:07:01.735 --> 00:07:05.490
against subtraction-- so a
times a, that's going to be 64.

00:07:05.490 --> 00:07:07.420
And then we have 64 minus a.

00:07:07.420 --> 00:07:13.820
So 64 minus 8 is
56, minus 1 is 55.

00:07:13.820 --> 00:07:20.770
So b is 55, and then c is going
to be a, which is 8, times 55.

00:07:20.770 --> 00:07:26.020
And 8 times 55 is indeed 440.

00:07:26.020 --> 00:07:27.890
So it all worked out.

00:07:27.890 --> 00:07:31.260
And so maybe you want to--
you've defined these things,

00:07:31.260 --> 00:07:33.760
and you want to see what happens
when you get different a's.

00:07:33.760 --> 00:07:34.801
And you can try that out.

00:07:34.801 --> 00:07:37.630
You can just change what happens
here for the different a's.

00:07:37.630 --> 00:07:41.020
So maybe we'll have
a is equal to-- let's

00:07:41.020 --> 00:07:44.325
make it equal to negative 6.

00:07:44.325 --> 00:07:48.450
Now let's run our program
and see what happens.

00:07:48.450 --> 00:07:50.122
We get negative 246.

00:07:50.122 --> 00:07:51.580
And you can verify
it for yourself.

00:07:51.580 --> 00:07:53.770
You go line-by-line,
and have these variables

00:07:53.770 --> 00:07:56.220
refer to what they're
defined to be referring to,

00:07:56.220 --> 00:07:59.890
and see if you get this
response right over here.

00:07:59.890 --> 00:08:02.300
Now, if programs were
just a bunch of commands

00:08:02.300 --> 00:08:04.680
that you just always
go straight through,

00:08:04.680 --> 00:08:07.306
you wouldn't be able to do
really interesting things.

00:08:07.306 --> 00:08:08.930
And so to do really
interesting things,

00:08:08.930 --> 00:08:10.388
you're going to
start seeing things

00:08:10.388 --> 00:08:12.232
like conditionals and loops.

00:08:12.232 --> 00:08:13.940
And a conditional and
a loop is something

00:08:13.940 --> 00:08:17.930
like-- let's do it like this.

00:08:17.930 --> 00:08:20.730
So I'll just leave that stuff
over there-- and we'll say,

00:08:20.730 --> 00:08:34.880
if a is less than 0,
maybe we will print c.

00:08:34.880 --> 00:08:49.560
And if, or else,
we'll print c minus a.

00:08:49.560 --> 00:08:50.609
So this is interesting.

00:08:50.609 --> 00:08:52.400
And you might already
have a gut for what's

00:08:52.400 --> 00:08:54.100
going to happen here,
but let's save it.

00:08:54.100 --> 00:08:55.475
And it's amazing
how much you can

00:08:55.475 --> 00:08:57.460
get done with just
these conditionals.

00:08:57.460 --> 00:09:00.370
So this is saying, if a
is less than 0, do this.

00:09:00.370 --> 00:09:03.514
Otherwise, if a is not less
than 0, do this over here.

00:09:03.514 --> 00:09:05.680
So notice, we're not just
going to go straight down.

00:09:05.680 --> 00:09:09.150
Depending on whether a
is less than 0 or not,

00:09:09.150 --> 00:09:11.670
it's going to either
execute this line,

00:09:11.670 --> 00:09:13.770
or it's going to
execute this line.

00:09:13.770 --> 00:09:16.020
And the way that
Python, you'd only

00:09:16.020 --> 00:09:20.880
execute this line if a is less
than 0, is it's indented here.

00:09:20.880 --> 00:09:22.910
And the indent, it's
part of this clause.

00:09:22.910 --> 00:09:25.451
And the way it knows that there
are new clauses forming right

00:09:25.451 --> 00:09:27.270
here is this colon
right over here.

00:09:27.270 --> 00:09:30.890
And then the way to know what
to execute if none of this

00:09:30.890 --> 00:09:33.750
happens, or if a is
not less than 0, it's

00:09:33.750 --> 00:09:35.320
within this else clause.

00:09:35.320 --> 00:09:37.560
And if you want to do
something else after this,

00:09:37.560 --> 00:09:40.270
regardless of whether a
is less than 0 or not,

00:09:40.270 --> 00:09:41.700
you just take it
out of the clause

00:09:41.700 --> 00:09:43.840
by getting rid of
the indentations.

00:09:43.840 --> 00:09:46.080
So now we can just print.

00:09:46.080 --> 00:09:50.260
We are done with the program.

00:09:50.260 --> 00:09:52.990
Actually, let's add some
other stuff in this clause.

00:09:52.990 --> 00:09:57.770
So let's print,
a is less than 0.

00:09:57.770 --> 00:10:00.110
So notice, this is not
going to be evaluated.

00:10:00.110 --> 00:10:02.110
We have this inside of a string.

00:10:02.110 --> 00:10:04.080
So it's just going
to print that thing.

00:10:04.080 --> 00:10:13.370
And then over here, we'll say,
print a is not less than 0.

00:10:13.370 --> 00:10:14.930
So this is an
interesting program.

00:10:14.930 --> 00:10:17.250
And let's just run it now.

00:10:17.250 --> 00:10:19.140
All right, let's hope it runs.

00:10:19.140 --> 00:10:20.380
All right, so I saved it.

00:10:20.380 --> 00:10:22.610
And now, let's run the program.

00:10:22.610 --> 00:10:26.210
And it says, it printed
a is less than 0.

00:10:26.210 --> 00:10:29.630
So we could scroll
up a little bit.

00:10:29.630 --> 00:10:32.100
It printed-- so this is,
we ran the program-- it

00:10:32.100 --> 00:10:33.290
printed a is less than 0.

00:10:33.290 --> 00:10:36.800
So it shows that we're
inside of this clause.

00:10:36.800 --> 00:10:38.870
So it printed this,
then it printed

00:10:38.870 --> 00:10:41.380
c, which is negative 246.

00:10:41.380 --> 00:10:43.480
It does not execute
this, because this

00:10:43.480 --> 00:10:46.207
needed to be executed only
if a is not less than 0.

00:10:46.207 --> 00:10:47.790
But then it breaks
out of that clause,

00:10:47.790 --> 00:10:49.248
and it prints this,
no matter what.

00:10:49.248 --> 00:10:51.050
We are done with the program.

00:10:51.050 --> 00:10:53.052
And let's just change
a to try to see

00:10:53.052 --> 00:10:54.760
if we can get this
other clause to print.

00:10:54.760 --> 00:10:56.820
So let's make a greater than 0.

00:10:56.820 --> 00:10:59.940
So let's make a equal to 9.

00:10:59.940 --> 00:11:01.245
And now, let's run the program.

00:11:04.320 --> 00:11:06.150
And so there, a is 9.

00:11:06.150 --> 00:11:08.220
So it says, is a less than 0?

00:11:08.220 --> 00:11:09.514
Well, 9 isn't less than 0.

00:11:09.514 --> 00:11:10.930
So it's not going
to execute this.

00:11:10.930 --> 00:11:12.897
It's going to go
to the else clause.

00:11:12.897 --> 00:11:14.980
And so, it's going to
print, a is not less than 0,

00:11:14.980 --> 00:11:16.200
which it did over here.

00:11:16.200 --> 00:11:20.284
Then it printed c
minus a, which is 630.

00:11:20.284 --> 00:11:21.700
Then it breaks out
of that clause.

00:11:21.700 --> 00:11:24.820
And regardless of whether a is
less than 0 or not, it prints,

00:11:24.820 --> 00:11:27.529
we are done with the program.

