WEBVTT
Kind: captions
Language: en

00:00:15.690 --> 00:00:16.890
AMY UNRUH: Hi, everyone.

00:00:16.890 --> 00:00:19.990
Welcome to an App
Engine Hangout.

00:00:19.990 --> 00:00:25.680
So this week, we have with us
Robert, who is an App Engine

00:00:25.680 --> 00:00:29.260
Test Engineer, Software
Engineer in Test.

00:00:29.260 --> 00:00:33.870
And this is really a great
opportunity to--

00:00:33.870 --> 00:00:38.360
he's going to talk about some
of the test beds and test

00:00:38.360 --> 00:00:40.810
runners that he uses, and that
you can use as well.

00:00:40.810 --> 00:00:42.260
And he's going to talk
a little bit about

00:00:42.260 --> 00:00:43.270
what he does too.

00:00:43.270 --> 00:00:49.310
So this is a really great window
into the job of one of

00:00:49.310 --> 00:00:51.480
the people who helps
App Engine work

00:00:51.480 --> 00:00:54.040
as great as it does.

00:00:54.040 --> 00:00:59.250
And so I just want to do a
little plug before we switch

00:00:59.250 --> 00:01:02.550
to the studio for what's
coming up next week.

00:01:02.550 --> 00:01:05.120
We're going to have a
chat with one of our

00:01:05.120 --> 00:01:06.380
big App Engine customers.

00:01:06.380 --> 00:01:08.950
And we'll announce a little bit
more about that a little

00:01:08.950 --> 00:01:11.310
bit later in the week.

00:01:11.310 --> 00:01:14.420
OK, and I want to apologize.

00:01:14.420 --> 00:01:19.220
We said earlier that we could
invite some people who might

00:01:19.220 --> 00:01:21.590
be interested in joining the
Hangout just to chat with us.

00:01:21.590 --> 00:01:23.020
But we had some technical
issues.

00:01:23.020 --> 00:01:24.580
Sorry, we got started
a little late.

00:01:24.580 --> 00:01:27.850
And so we're unfortunately not
able to do that this time,

00:01:27.850 --> 00:01:28.740
really wanted to.

00:01:28.740 --> 00:01:33.590
And we hope to be able to do
it in future Hangouts.

00:01:33.590 --> 00:01:36.180
OK, so let's switch to
the studio, where we

00:01:36.180 --> 00:01:40.500
have Robert and Danny.

00:01:40.500 --> 00:01:44.800
And what I'd like to do is this
just to get started, just

00:01:44.800 --> 00:01:51.860
ask Robert a few questions
about what he does, just

00:01:51.860 --> 00:01:56.515
because I think it'd be of
interest to everyone watching.

00:01:56.515 --> 00:01:57.285
DANNY HERMES: Hopefully,
you don't catch

00:01:57.285 --> 00:01:58.942
him off guard, huh?

00:01:58.942 --> 00:01:59.926
AMY UNRUH: Yeah.

00:01:59.926 --> 00:02:02.370
No, this is this not
a big grilling.

00:02:02.370 --> 00:02:04.640
But I think everyone would be
interested, before we start

00:02:04.640 --> 00:02:07.210
with what you actually have
planned to demo, just tell us

00:02:07.210 --> 00:02:10.400
a little bit about what you do
in your day-to-day work.

00:02:10.400 --> 00:02:14.300
And maybe how a little bit about
how you got started with

00:02:14.300 --> 00:02:17.375
it, too, if you think people
would like to hear that.

00:02:17.375 --> 00:02:20.950
ROBERT SCHUPPENIES: OK, so I
joined Google and App Engine

00:02:20.950 --> 00:02:24.620
three and a half years
ago as an SET,

00:02:24.620 --> 00:02:25.570
Software Engineer in Test.

00:02:25.570 --> 00:02:29.080
And my job is basically to write
software that helps with

00:02:29.080 --> 00:02:33.320
testing for the three
major user groups.

00:02:33.320 --> 00:02:35.670
For one, App Engine
developers--

00:02:35.670 --> 00:02:40.280
so people who write App Engine,
to help them make sure

00:02:40.280 --> 00:02:41.860
App Engine doesn't break
when we push a new

00:02:41.860 --> 00:02:43.200
release, for example--

00:02:43.200 --> 00:02:47.780
then the external developers,
like everyone who's watching,

00:02:47.780 --> 00:02:50.670
who write applications that
run on App Engine.

00:02:50.670 --> 00:02:53.280
And we want to provide tools
so that when you write your

00:02:53.280 --> 00:02:55.390
application, you can
test them easily.

00:02:55.390 --> 00:02:59.780
And the third group are internal
developers at Google

00:02:59.780 --> 00:03:01.750
who also write App Engine
applications.

00:03:01.750 --> 00:03:04.480
And they also want to make sure
that the applications

00:03:04.480 --> 00:03:06.920
they write are testable.

00:03:06.920 --> 00:03:11.640
And because Google has some
special infrastructure, I also

00:03:11.640 --> 00:03:14.150
work on making this
infrastructure usable for

00:03:14.150 --> 00:03:15.200
tests for App Engine.

00:03:15.200 --> 00:03:16.310
DANNY HERMES: So are
you a polyglot in

00:03:16.310 --> 00:03:17.270
your day-to-day life?

00:03:17.270 --> 00:03:20.060
Are you targeting
every runtime?

00:03:20.060 --> 00:03:22.000
Or is it just one specific
runtime?

00:03:22.000 --> 00:03:22.650
ROBERT SCHUPPENIES:
Mostly Python.

00:03:22.650 --> 00:03:23.165
DANNY HERMES: Mostly Python.

00:03:23.165 --> 00:03:23.700
OK.

00:03:23.700 --> 00:03:25.460
I knew today, we were mostly
talked about Python.

00:03:25.460 --> 00:03:28.880
But I wasn't sure in your day
job in Test, if you're

00:03:28.880 --> 00:03:32.710
targeting all the runtimes, or
if you have specialists for

00:03:32.710 --> 00:03:33.220
each individual one.

00:03:33.220 --> 00:03:33.880
DANNY HERMES: So
we split it up.

00:03:33.880 --> 00:03:37.220
We have other Software
Engineers in Test.

00:03:37.220 --> 00:03:39.810
Another colleague, Dave
[INAUDIBLE], he writes on

00:03:39.810 --> 00:03:41.070
Java, works in Java.

00:03:41.070 --> 00:03:42.220
ROBERT SCHUPPENIES: Sure.

00:03:42.220 --> 00:03:43.870
Cool.

00:03:43.870 --> 00:03:44.950
Back to Amy.

00:03:44.950 --> 00:03:46.200
You have some more questions,
I'm sure.

00:03:49.170 --> 00:03:52.050
AMY UNRUH: Well, I didn't
want to subject

00:03:52.050 --> 00:03:54.480
Robert to a big grilling.

00:03:54.480 --> 00:03:59.400
So actually, let's just
start with what he

00:03:59.400 --> 00:04:00.550
had planned to demo.

00:04:00.550 --> 00:04:05.700
And just for everyone watching,
if we have a little

00:04:05.700 --> 00:04:10.380
bit of time at the end, we'll
go to the moderator queue.

00:04:10.380 --> 00:04:13.550
So we hope to answer just a few
of your general questions.

00:04:13.550 --> 00:04:16.890
And if we have a bit of extra
time at the end, we can also

00:04:16.890 --> 00:04:19.740
sort of make this a bit of a
general Office Hours, as well.

00:04:22.450 --> 00:04:25.630
ROBERT SCHUPPENIES: So what I
want to walk through today are

00:04:25.630 --> 00:04:29.280
three test tools we use and
also have available for

00:04:29.280 --> 00:04:30.500
external developers.

00:04:30.500 --> 00:04:33.800
And one of them is
for unit testing.

00:04:33.800 --> 00:04:35.870
Then I want to talk about
handler testing, which was

00:04:35.870 --> 00:04:39.190
also a question from the page,
the Moderator page.

00:04:43.150 --> 00:04:45.570
And then I want to talk about
end-to-end testing, which was

00:04:45.570 --> 00:04:46.240
also a question.

00:04:46.240 --> 00:04:49.720
How can you test your
whole stack?

00:04:49.720 --> 00:04:52.720
And finally, if we have time,
talk about library testing.

00:04:52.720 --> 00:04:55.382
If you write libraries for App
Engine, how can you test that?

00:04:55.382 --> 00:04:56.740
DANNY HERMES: Right.

00:04:56.740 --> 00:04:57.750
ROBERT SCHUPPENIES: So just
go ahead and do it?

00:04:57.750 --> 00:04:59.865
DANNY HERMES: Yeah.

00:04:59.865 --> 00:05:01.100
ROBERT SCHUPPENIES: Can
you see the screen?

00:05:01.100 --> 00:05:03.141
Is it big enough?

00:05:03.141 --> 00:05:05.790
DANNY HERMES: You probably want
to pump the size up by

00:05:05.790 --> 00:05:07.426
one or two.

00:05:07.426 --> 00:05:07.894
ROBERT SCHUPPENIES: OK.

00:05:07.894 --> 00:05:09.300
AMY UNRUH: You might want
it a bit bigger.

00:05:09.300 --> 00:05:10.350
DANNY HERMES: OK.

00:05:10.350 --> 00:05:11.696
DANNY HERMES: Maybe
a couple more.

00:05:11.696 --> 00:05:13.320
ROBERT SCHUPPENIES: Wow,
that's going to be--

00:05:13.320 --> 00:05:13.870
DANNY HERMES: It will be.

00:05:13.870 --> 00:05:16.180
But it's more than 80
characters, right?

00:05:16.180 --> 00:05:17.690
ROBERT SCHUPPENIES:
Yeah, let's see.

00:05:17.690 --> 00:05:21.960
DANNY HERMES: You can reset your
PS1 to something shorter,

00:05:21.960 --> 00:05:24.040
export PS1 equals.

00:05:24.040 --> 00:05:24.820
ROBERT SCHUPPENIES: I'm
going to leave it now.

00:05:24.820 --> 00:05:28.100
Otherwise, I mess up my bash
and then maybe not even--

00:05:28.100 --> 00:05:28.910
DANNY HERMES: It's just PS1.

00:05:28.910 --> 00:05:32.320
You can just close it
and restart bash.

00:05:32.320 --> 00:05:34.950
PS1 equals and--

00:05:34.950 --> 00:05:38.260
you don't need the
dollar sign.

00:05:38.260 --> 00:05:39.840
Well, you don't want that.

00:05:39.840 --> 00:05:40.980
ROBERT SCHUPPENIES:
So what do I want?

00:05:40.980 --> 00:05:43.920
DANNY HERMES: PS1 equals say,
demo and then dollar sign and

00:05:43.920 --> 00:05:45.680
then a space.

00:05:45.680 --> 00:05:46.930
ROBERT SCHUPPENIES:
OK, this one died.

00:05:49.820 --> 00:05:53.780
Export PS1 equals--

00:05:53.780 --> 00:05:55.030
like this?

00:05:57.480 --> 00:05:59.280
DANNY HERMES: Well, put
it in quotes and put

00:05:59.280 --> 00:06:01.940
a space after it.

00:06:01.940 --> 00:06:02.906
Yeah, like that.

00:06:02.906 --> 00:06:03.242
It should be fine.

00:06:03.242 --> 00:06:05.380
There you go, a lot
more space, right?

00:06:05.380 --> 00:06:06.980
ROBERT SCHUPPENIES: Now
I'm getting lost in my

00:06:06.980 --> 00:06:10.290
directories, but that's--

00:06:10.290 --> 00:06:11.340
OK, so what I want to do--

00:06:11.340 --> 00:06:13.590
DANNY HERMES: Whatever.

00:06:13.590 --> 00:06:14.310
ROBERT SCHUPPENIES:
Three things.

00:06:14.310 --> 00:06:16.310
The first thing--

00:06:16.310 --> 00:06:17.800
I think I can increase
that, too--

00:06:17.800 --> 00:06:18.870
is the testbed.

00:06:18.870 --> 00:06:23.080
Testbed is a library we have for
unit testing and Python in

00:06:23.080 --> 00:06:23.690
particular.

00:06:23.690 --> 00:06:26.980
There's also an equivalent for
Java that helps you test your

00:06:26.980 --> 00:06:29.920
Java applications on
a unit test level.

00:06:29.920 --> 00:06:33.820
And unit testing is important
because software, if it's not

00:06:33.820 --> 00:06:36.590
trivial, it's made up
of lots of pieces.

00:06:36.590 --> 00:06:39.770
And you want to test those
individual pieces because if

00:06:39.770 --> 00:06:42.370
you can identify the piece,
the particular piece that

00:06:42.370 --> 00:06:45.630
failed, it's easier for you
to debug it and fix it.

00:06:45.630 --> 00:06:47.130
So unit testing.

00:06:47.130 --> 00:06:49.410
And for Python, it's
called testbed.

00:06:49.410 --> 00:06:54.860
For Java, I don't even know if
it has an explicit name.

00:06:54.860 --> 00:06:59.110
But you can always just
do a Google search--

00:06:59.110 --> 00:07:03.420
or whatever your favorite
search engine is--

00:07:03.420 --> 00:07:08.870
App Engine and then
local unit test.

00:07:08.870 --> 00:07:11.530
And that will either bring
you to the Python

00:07:11.530 --> 00:07:13.050
or to the Java site.

00:07:13.050 --> 00:07:15.070
And I'm going to talk
about Python today.

00:07:15.070 --> 00:07:18.492
And all the information I'm
going to talk about, you will

00:07:18.492 --> 00:07:20.850
also find on this page.

00:07:20.850 --> 00:07:24.250
So let's see.

00:07:24.250 --> 00:07:28.370
For Python, since I don't
see the path I'm in--

00:07:28.370 --> 00:07:30.318
DANNY HERMES: PWD will tell you
the path, if you want it.

00:07:30.318 --> 00:07:33.710
ROBERT SCHUPPENIES:
OK, testbed.

00:07:33.710 --> 00:07:36.380
So I just set up a demo here.

00:07:36.380 --> 00:07:40.320
And I will use a run script
to run the tests.

00:07:40.320 --> 00:07:42.710
And the run script is
also available on

00:07:42.710 --> 00:07:44.060
the page I just showed.

00:07:44.060 --> 00:07:46.940
So you can just download
it and use it.

00:07:46.940 --> 00:07:47.920
DANNY HERMES: And what are
you going to be testing?

00:07:47.920 --> 00:07:50.260
Just the basic hello world
app or something else?

00:07:50.260 --> 00:07:51.990
ROBERT SCHUPPENIES: No, we're
just going to test

00:07:51.990 --> 00:07:53.720
the units of an app.

00:07:53.720 --> 00:07:56.540
So we're not going to test an
actual app, but only pieces.

00:07:56.540 --> 00:08:00.650
And for App Engine, when you
write an application, you will

00:08:00.650 --> 00:08:02.330
use services of App Engine.

00:08:02.330 --> 00:08:04.070
You will use Datastore,
Memcache,

00:08:04.070 --> 00:08:05.620
[INAUDIBLE], things like that.

00:08:05.620 --> 00:08:08.160
And often for unit tests
you want to mock that.

00:08:08.160 --> 00:08:09.520
DANNY HERMES: Right,
using stubs or

00:08:09.520 --> 00:08:10.930
some other local mock.

00:08:10.930 --> 00:08:11.500
ROBERT SCHUPPENIES: Right.

00:08:11.500 --> 00:08:14.900
And for App Engine, we now have
this test library that

00:08:14.900 --> 00:08:16.030
provides those stubs.

00:08:16.030 --> 00:08:17.800
DANNY HERMES: So the
test runner--

00:08:17.800 --> 00:08:19.045
are you going to talk
about the app that

00:08:19.045 --> 00:08:19.750
you're running it on?

00:08:19.750 --> 00:08:22.900
Or are you just going to run it
and talk about how it's--

00:08:22.900 --> 00:08:23.570
ROBERT SCHUPPENIES:
This is just going

00:08:23.570 --> 00:08:25.360
to run in the shell.

00:08:25.360 --> 00:08:28.890
And I'm going to show you the
tests we have and then how to

00:08:28.890 --> 00:08:30.660
run it, and what the
dependencies

00:08:30.660 --> 00:08:31.570
are, and how it looks.

00:08:31.570 --> 00:08:32.450
DANNY HERMES: Cool.

00:08:32.450 --> 00:08:35.280
ROBERT SCHUPPENIES: OK, so as I
mentioned, we have the test

00:08:35.280 --> 00:08:37.740
script, which is
just this one.

00:08:42.244 --> 00:08:45.890
Let me set up the path,
PYTHONPATH equals--

00:08:51.200 --> 00:08:53.250
and I'll put this.

00:08:53.250 --> 00:08:57.340
The test runner, what it does,
it uses unittest2, which is a

00:08:57.340 --> 00:09:01.936
Python library, which is similar
to unittest, which is

00:09:01.936 --> 00:09:03.310
in the standard library.

00:09:03.310 --> 00:09:06.630
But it has extra features like
finding tests in directories.

00:09:06.630 --> 00:09:08.610
So what you can do is you
say, give me all the

00:09:08.610 --> 00:09:09.490
tests in this directory.

00:09:09.490 --> 00:09:11.240
And then it will just go through
the directory and find

00:09:11.240 --> 00:09:12.090
all the tests.

00:09:12.090 --> 00:09:14.130
So that's why I use unittest2.

00:09:14.130 --> 00:09:19.010
And as you can see here, it
expects two input values in

00:09:19.010 --> 00:09:20.010
the SDK panel.

00:09:20.010 --> 00:09:23.540
So the SDK, the Python App
Engine SDK, you want to use

00:09:23.540 --> 00:09:26.040
and the root of the test bed.

00:09:26.040 --> 00:09:27.000
DANNY HERMES: Which is
probably just current

00:09:27.000 --> 00:09:27.530
directory here.

00:09:27.530 --> 00:09:29.370
ROBERT SCHUPPENIES:
Which is, yeah--

00:09:29.370 --> 00:09:35.710
and as I mentioned, we have a
couple of dependencies, which

00:09:35.710 --> 00:09:37.340
for this case, are unittest2.

00:09:37.340 --> 00:09:38.610
I already mentioned that.

00:09:38.610 --> 00:09:39.720
And then webtest.

00:09:39.720 --> 00:09:41.620
I'm going to talk about
webtest later.

00:09:41.620 --> 00:09:43.940
But it's important if you
want to test handlers.

00:09:43.940 --> 00:09:46.670
Handlers are the pieces that
actually render the website

00:09:46.670 --> 00:09:48.130
and serve it to the user.

00:09:48.130 --> 00:09:51.990
So this is also something you
want to make sure that

00:09:51.990 --> 00:09:53.930
actually works with the test.

00:09:53.930 --> 00:09:56.710
So those are the two
dependencies we have.

00:09:56.710 --> 00:10:01.500
And we have tests in the
tests directory.

00:10:01.500 --> 00:10:03.290
Here we have three tests--

00:10:03.290 --> 00:10:06.270
Datastore, logs, and handlers
for modules for

00:10:06.270 --> 00:10:07.560
three types of tests.

00:10:07.560 --> 00:10:09.800
And as an example,
I'm just going to

00:10:09.800 --> 00:10:10.420
look through the Datastore.

00:10:10.420 --> 00:10:12.670
DANNY HERMES: Emacs, man
after my own heart.

00:10:12.670 --> 00:10:13.870
ROBERT SCHUPPENIES:
There's a--

00:10:13.870 --> 00:10:14.780
AMY UNRUH: Me, too.

00:10:14.780 --> 00:10:15.640
ROBERT SCHUPPENIES: --small
followed by--

00:10:15.640 --> 00:10:19.040
DANNY HERMES: All three of us,
Emacs users, wonderful.

00:10:19.040 --> 00:10:20.290
ROBERT SCHUPPENIES: OK, so
what are we going to do?

00:10:20.290 --> 00:10:21.140
First, we input unittests.

00:10:21.140 --> 00:10:24.510
We say, hey, we want to use
the unittest mode, because

00:10:24.510 --> 00:10:26.900
want unittest.

00:10:26.900 --> 00:10:28.850
Then we import the modules.

00:10:28.850 --> 00:10:30.630
We're going to use the App
Engine services-- in this

00:10:30.630 --> 00:10:36.090
case, Memcache, database, db,
and then testbed, which allows

00:10:36.090 --> 00:10:39.160
us to use the [? steps ?].

00:10:39.160 --> 00:10:43.050
And testbed comes from
the ext package.

00:10:43.050 --> 00:10:47.670
In this particular case, we
have a TestModel, which is

00:10:47.670 --> 00:10:50.230
just a simple model that has
an IntegerProperty, text

00:10:50.230 --> 00:10:52.260
property to hold some data.

00:10:52.260 --> 00:10:55.520
And we also have a function
here that's called

00:10:55.520 --> 00:10:59.450
GetEntityViaMemcache that if you
retrieve an entity through

00:10:59.450 --> 00:11:02.820
that function it will first
look it up in Memcache.

00:11:02.820 --> 00:11:03.510
If it's not there--

00:11:03.510 --> 00:11:04.105
DANNY HERMES: So
in other words,

00:11:04.105 --> 00:11:05.590
what NDB does by default.

00:11:05.590 --> 00:11:06.660
ROBERT SCHUPPENIES: Yes.

00:11:06.660 --> 00:11:08.620
Now that we have NDB,
we should use NDB.

00:11:08.620 --> 00:11:10.480
But it's a good example
for this.

00:11:10.480 --> 00:11:11.410
DANNY HERMES: Yeah,
definitely.

00:11:11.410 --> 00:11:13.620
Except there's one level of
caching not even included

00:11:13.620 --> 00:11:15.900
there, which is the
instance-level cache.

00:11:15.900 --> 00:11:18.440
But that's a conversation
for another day.

00:11:18.440 --> 00:11:19.820
That's what we're
testing here.

00:11:19.820 --> 00:11:23.100
ROBERT SCHUPPENIES: But
NDB is a nice library.

00:11:23.100 --> 00:11:24.120
[? Gigoed ?] is best.

00:11:24.120 --> 00:11:25.960
So what do we do?

00:11:25.960 --> 00:11:29.450
We write a unittest, the usual
unittest or test case as a

00:11:29.450 --> 00:11:30.620
base class.

00:11:30.620 --> 00:11:32.630
And then we set up our test.

00:11:32.630 --> 00:11:37.085
So default thing is you say,
hey, setUp-- this is what is

00:11:37.085 --> 00:11:39.490
done before every single
test you do.

00:11:39.490 --> 00:11:42.460
And the counterpart for this
is tearDown, which is done

00:11:42.460 --> 00:11:44.490
after every single
test you execute.

00:11:44.490 --> 00:11:46.350
DANNY HERMES: So I notice
you have in your setUp,

00:11:46.350 --> 00:11:48.500
init_datastore_v3_stub.

00:11:48.500 --> 00:11:51.060
Can talk a little bit about
what that v3 is doing?

00:11:51.060 --> 00:11:55.740
And how people can know what
stubs and what stub names

00:11:55.740 --> 00:11:58.270
correspond to the services
they're going to use?

00:11:58.270 --> 00:12:00.150
If you're going to talk about
this later, by all means, hold

00:12:00.150 --> 00:12:00.690
off until then.

00:12:00.690 --> 00:12:01.930
ROBERT SCHUPPENIES: I'm
just going to--

00:12:01.930 --> 00:12:03.200
we are two steps
away from that.

00:12:03.200 --> 00:12:03.480
DANNY HERMES: Oh, OK.

00:12:03.480 --> 00:12:04.010
Cool.

00:12:04.010 --> 00:12:04.840
We'll wait til then.

00:12:04.840 --> 00:12:05.780
We'll wait two steps.

00:12:05.780 --> 00:12:06.820
My bad.

00:12:06.820 --> 00:12:09.790
ROBERT SCHUPPENIES: So first
we instantiate a Testbed

00:12:09.790 --> 00:12:14.330
object, which is an object that
will create the stubs for

00:12:14.330 --> 00:12:17.915
you and then mock out certain
capabilities so you can use

00:12:17.915 --> 00:12:19.050
them for testing.

00:12:19.050 --> 00:12:20.650
Once you've done that, you
say, hey, activate

00:12:20.650 --> 00:12:21.340
the Testbed for me.

00:12:21.340 --> 00:12:24.130
This is the step where you say,
whatever has been there

00:12:24.130 --> 00:12:28.920
before, save it, so when we
deactivate it later on, you

00:12:28.920 --> 00:12:30.630
can restore it.

00:12:30.630 --> 00:12:33.960
And then we say init stub.

00:12:33.960 --> 00:12:36.460
And we have different
services.

00:12:36.460 --> 00:12:37.710
Each service has a name.

00:12:37.710 --> 00:12:40.210
And then it's init service
name stub.

00:12:40.210 --> 00:12:42.660
So init_memcache_stub's
obvious.

00:12:42.660 --> 00:12:44.820
Then there's
init_taskqueue_stub, init_

00:12:44.820 --> 00:12:48.320
[? make  ?] stub, and then
datastore_v3_stub, which is

00:12:48.320 --> 00:12:49.240
not that obvious.

00:12:49.240 --> 00:12:50.850
Why is it v3, right?

00:12:50.850 --> 00:12:51.420
So that's--

00:12:51.420 --> 00:12:52.880
DANNY HERMES: And was there
a v2, et cetera?

00:12:52.880 --> 00:12:54.890
ROBERT SCHUPPENIES: Yeah, it's
just an iteration of the

00:12:54.890 --> 00:12:56.490
Datastore versions we had.

00:12:56.490 --> 00:12:57.480
And this is v3.

00:12:57.480 --> 00:13:01.080
I'm sure at some point
there will be a v4.

00:13:01.080 --> 00:13:05.800
Because we don't want to have
you deal with regressions when

00:13:05.800 --> 00:13:07.670
we switch to a new dadaists.

00:13:07.670 --> 00:13:09.490
We'd rather be explicit--

00:13:09.490 --> 00:13:11.070
rather be explicit
than implicit.

00:13:11.070 --> 00:13:13.600
DANNY HERMES: So I actually
know a bit of the history

00:13:13.600 --> 00:13:14.580
behind the naming there.

00:13:14.580 --> 00:13:15.740
I was just--

00:13:15.740 --> 00:13:18.040
for the viewers' sake.

00:13:18.040 --> 00:13:20.990
But the question more that I
had to ask was how would we

00:13:20.990 --> 00:13:26.430
know that from
google.appengine.api.importdb

00:13:26.430 --> 00:13:29.220
would correspond to a stub
that's Datastore?

00:13:29.220 --> 00:13:30.780
Is there any explicit
way to do this?

00:13:30.780 --> 00:13:33.520
Or is it just knowing
what's there?

00:13:33.520 --> 00:13:34.400
ROBERT SCHUPPENIES: Two
things you can do.

00:13:34.400 --> 00:13:38.163
You either look it up on the
website, which says, hey, here

00:13:38.163 --> 00:13:39.850
are all the supported stubs.

00:13:39.850 --> 00:13:44.830
Or if you just say, whatever,
I don't care init_all_stubs.

00:13:44.830 --> 00:13:46.280
DANNY HERMES: Oh, OK.

00:13:46.280 --> 00:13:46.382
ROBERT SCHUPPENIES: OK.

00:13:46.382 --> 00:13:46.700
So that's--

00:13:46.700 --> 00:13:48.220
DANNY HERMES: But that will make
the test a little slower

00:13:48.220 --> 00:13:50.310
and certainly less
explicit, right?

00:13:50.310 --> 00:13:50.730
ROBERT SCHUPPENIES: Yeah.

00:13:50.730 --> 00:13:51.420
DANNY HERMES: OK.

00:13:51.420 --> 00:13:54.900
ROBERT SCHUPPENIES: So
you can do both.

00:13:54.900 --> 00:13:56.150
OK, restored.

00:13:56.150 --> 00:13:58.900
Now the first test is really
straightforward.

00:13:58.900 --> 00:14:04.570
We just create an entity, put
it into Datastore, and then

00:14:04.570 --> 00:14:07.870
try to retrieve two entities.

00:14:07.870 --> 00:14:12.250
But the test says, hey, check
that it's only one entity.

00:14:12.250 --> 00:14:16.390
And now that we use Testbed and
activate it before every

00:14:16.390 --> 00:14:20.730
test run, tearDown after every
test run, we will work on an

00:14:20.730 --> 00:14:21.970
empty Datastore.

00:14:21.970 --> 00:14:24.720
So this test will actually pass
because no matter how

00:14:24.720 --> 00:14:28.210
many times you run it, you
tear down the Datastore,

00:14:28.210 --> 00:14:29.350
create a new one.

00:14:29.350 --> 00:14:31.980
So that's what it does.

00:14:31.980 --> 00:14:36.100
The next test is really just
checking hey, create a key,

00:14:36.100 --> 00:14:39.900
delete the entity, see if when
I retrieve that key, I don't

00:14:39.900 --> 00:14:41.790
get anything returned.

00:14:41.790 --> 00:14:46.350
And this also already uses the
GetEntityViaMemcache function,

00:14:46.350 --> 00:14:47.660
which just looks
into Datastore,

00:14:47.660 --> 00:14:48.980
and if it finds it--

00:14:48.980 --> 00:14:49.870
OK.

00:14:49.870 --> 00:14:53.350
Then I'm just going
to skip here.

00:14:53.350 --> 00:14:56.990
This one [INAUDIBLE]

00:14:56.990 --> 00:15:00.740
entity then retrieves the
entity via Memcache.

00:15:00.740 --> 00:15:03.530
And we want to check that's
actually the entity returned

00:15:03.530 --> 00:15:04.600
we have created.

00:15:04.600 --> 00:15:08.500
So it's just again testing the
path for that function.

00:15:08.500 --> 00:15:09.680
DANNY HERMES: Sorry, I don't
want to hijack--

00:15:09.680 --> 00:15:10.660
ROBERT SCHUPPENIES:
No, go ahead.

00:15:10.660 --> 00:15:13.430
DANNY HERMES: So I notice one
thing, which made me think.

00:15:13.430 --> 00:15:16.130
We have two runtimes supported
in Python--

00:15:16.130 --> 00:15:17.670
2.5 and 2.7.

00:15:17.670 --> 00:15:20.370
And unittest actually
changed between--

00:15:20.370 --> 00:15:22.150
well, it changes every
version of Python.

00:15:22.150 --> 00:15:26.320
But there was initially
assertEqual, assertNotEqual,

00:15:26.320 --> 00:15:28.670
assertTrue, assertFalse,
and that was about it.

00:15:28.670 --> 00:15:31.150
But in 2.7, there were like six
more asserts added, one of

00:15:31.150 --> 00:15:32.520
which is assertNone.

00:15:32.520 --> 00:15:35.360
Now I see you're doing an
assertEqual with a none.

00:15:35.360 --> 00:15:39.420
So is this written with
both runtimes in mind?

00:15:39.420 --> 00:15:44.930
Or are there separate test cases
or separate ways you're

00:15:44.930 --> 00:15:46.340
going to write it for the
different runtimes?

00:15:46.340 --> 00:15:47.030
ROBERT SCHUPPENIES:
So this is really

00:15:47.030 --> 00:15:49.140
up to the app developer.

00:15:49.140 --> 00:15:52.240
If he says, my app will only run
on Python 2.7 because it's

00:15:52.240 --> 00:15:55.320
the future, and Python 2.5 is
going to go away at some

00:15:55.320 --> 00:15:59.950
point, you can use the test
functionality that is

00:15:59.950 --> 00:16:01.260
available in Python 2.7--

00:16:01.260 --> 00:16:04.610
so assertNone and all those
extra fancy features.

00:16:04.610 --> 00:16:08.950
DANNY HERMES: But Testbed
itself will run on both.

00:16:08.950 --> 00:16:09.620
ROBERT SCHUPPENIES:
Is agnostic, yeah.

00:16:09.620 --> 00:16:11.480
It really just uses--

00:16:11.480 --> 00:16:13.950
it's really just a utility.

00:16:13.950 --> 00:16:16.280
It doesn't depend on unittest.

00:16:16.280 --> 00:16:20.550
It will just provide additional
tools for your unit

00:16:20.550 --> 00:16:21.350
testing [INAUDIBLE].

00:16:21.350 --> 00:16:23.523
DANNY HERMES: Like making
these stubs.

00:16:23.523 --> 00:16:24.270
Cool.

00:16:24.270 --> 00:16:24.985
Sorry.

00:16:24.985 --> 00:16:26.770
ROBERT SCHUPPENIES:
No, that's fine.

00:16:26.770 --> 00:16:31.720
Also, Python 2.7 actually
includes unittest2, which I

00:16:31.720 --> 00:16:33.310
specifically included
here as a library--

00:16:33.310 --> 00:16:33.820
DANNY HERMES: As part of
the standard library.

00:16:33.820 --> 00:16:34.345
ROBERT SCHUPPENIES: Yes.

00:16:34.345 --> 00:16:36.580
DANNY HERMES: OK, great.

00:16:36.580 --> 00:16:38.320
ROBERT SCHUPPENIES: And then
the last one, the last

00:16:38.320 --> 00:16:41.240
function I'm testing here,
or the last piece of

00:16:41.240 --> 00:16:45.980
functionality, I create an
entity then get the entity

00:16:45.980 --> 00:16:49.650
key, delete that entity,
and see, if I use

00:16:49.650 --> 00:16:52.200
GetEntityViaMemcache, it's
still available.

00:16:52.200 --> 00:16:56.240
Because GetEntityViaMemcache
is not aware of Datastore

00:16:56.240 --> 00:16:58.260
deletes, but it cached it.

00:16:58.260 --> 00:17:00.285
It would find it in cache and
then [? return ?] it.

00:17:00.285 --> 00:17:02.380
DANNY HERMES: One of the two
hardest problems in computer

00:17:02.380 --> 00:17:03.670
science, right-- cache
and [INAUDIBLE].

00:17:03.670 --> 00:17:05.390
[LAUGHING]

00:17:05.390 --> 00:17:06.990
ROBERT SCHUPPENIES: Yeah, so
this is a simple example.

00:17:06.990 --> 00:17:09.119
Don't use that in your
application.

00:17:09.119 --> 00:17:10.049
DANNY HERMES: Please.

00:17:10.049 --> 00:17:11.910
ROBERT SCHUPPENIES: Please.

00:17:11.910 --> 00:17:12.869
DANNY HERMES: Pretty,
pretty please.

00:17:12.869 --> 00:17:16.880
ROBERT SCHUPPENIES: Yeah, and
so this is what's done.

00:17:16.880 --> 00:17:18.650
Now if we--

00:17:18.650 --> 00:17:19.410
where are we?

00:17:19.410 --> 00:17:20.470
We're here.

00:17:20.470 --> 00:17:28.480
If we use the run script and
point it to the SDK, because

00:17:28.480 --> 00:17:30.340
that's one of the parameters
and point it into the test

00:17:30.340 --> 00:17:34.610
directory, it would go through
all the tests, execute them,

00:17:34.610 --> 00:17:35.720
and then this [INAUDIBLE]

00:17:35.720 --> 00:17:37.200
what we see here.

00:17:37.200 --> 00:17:39.710
DANNY HERMES: Great.

00:17:39.710 --> 00:17:42.430
Another side question-- are
you on the newest 1.7.3?

00:17:42.430 --> 00:17:44.200
Or are you using 1.7.2?

00:17:44.200 --> 00:17:45.230
ROBERT SCHUPPENIES: That's
actually 1.7.2.

00:17:45.230 --> 00:17:46.570
DANNY HERMES: Aw, come on.

00:17:46.570 --> 00:17:49.970
If people didn't see, 1.7.3 was
just released yesterday.

00:17:49.970 --> 00:17:52.020
So if you haven't upgraded
yet, go ahead and do it.

00:17:52.020 --> 00:17:54.120
But apparently we can't
even get our own test

00:17:54.120 --> 00:17:55.210
engineers to do it.

00:17:55.210 --> 00:17:56.290
ROBERT SCHUPPENIES: Well,
actually, I've worked already

00:17:56.290 --> 00:17:57.960
with 1.7.4 but I didn't
want to use it.

00:17:57.960 --> 00:18:00.620
DANNY HERMES: Oh!

00:18:00.620 --> 00:18:02.890
ROBERT SCHUPPENIES: Better
to be safe than sorry.

00:18:02.890 --> 00:18:04.222
AMY UNRUH: Robert?

00:18:04.222 --> 00:18:07.890
Just for fun, why don't you
edit one of those tests to

00:18:07.890 --> 00:18:09.990
have an [? inclusion ?] break
and show what it looks like,

00:18:09.990 --> 00:18:11.240
if that's the case?

00:18:14.430 --> 00:18:22.390
ROBERT SCHUPPENIES: So we can
just introduce a simple

00:18:22.390 --> 00:18:23.640
test_fail--

00:18:27.982 --> 00:18:31.070
DANNY HERMES: Contrasting
styles there.

00:18:31.070 --> 00:18:31.540
ROBERT SCHUPPENIES:
What do we want?

00:18:31.540 --> 00:18:33.140
False.

00:18:33.140 --> 00:18:34.790
OK, so we now [INAUDIBLE]

00:18:34.790 --> 00:18:35.440
DANNY HERMES: There we go.

00:18:35.440 --> 00:18:38.190
ROBERT SCHUPPENIES: We fail.

00:18:38.190 --> 00:18:39.916
And here's what you get--

00:18:39.916 --> 00:18:43.790
so just failing test.

00:18:43.790 --> 00:18:49.520
And one thing we don't provide
is, for this particular case,

00:18:49.520 --> 00:18:53.620
integration into a tool, like
Eclipse or PyDev for Eclipse.

00:18:53.620 --> 00:18:56.980
Because often, people have
different sets of tools and

00:18:56.980 --> 00:18:59.620
just to support all of
them is really hard.

00:18:59.620 --> 00:19:02.572
So we just give you the basics
and then you can hook it up.

00:19:02.572 --> 00:19:04.550
DANNY HERMES: And, I mean, as
far as what we're talking

00:19:04.550 --> 00:19:07.230
about today, the Python
community isn't necessarily

00:19:07.230 --> 00:19:11.360
married to one or a few set
of tool [? chains ?].

00:19:11.360 --> 00:19:12.740
There's--

00:19:12.740 --> 00:19:12.920
ROBERT SCHUPPENIES: [INAUDIBLE]

00:19:12.920 --> 00:19:14.030
tests, for example.

00:19:14.030 --> 00:19:14.860
DANNY HERMES: Right.

00:19:14.860 --> 00:19:19.410
So we live in harmony
in that way.

00:19:19.410 --> 00:19:20.670
ROBERT SCHUPPENIES: Another
thing I wanted to talk about,

00:19:20.670 --> 00:19:22.120
and there was also
a question--

00:19:22.120 --> 00:19:24.510
how can you test webapp2?

00:19:24.510 --> 00:19:31.336
Webapp2 is a library, again,
that runs on App Engine and

00:19:31.336 --> 00:19:36.170
helps you to render
HTTP response.

00:19:36.170 --> 00:19:38.330
DANNY HERMES: And create WSGI
handlers and things.

00:19:38.330 --> 00:19:38.830
ROBERT SCHUPPENIES: Yes.

00:19:38.830 --> 00:19:41.840
So let's have a look at this.

00:19:41.840 --> 00:19:43.090
What we have--

00:19:48.160 --> 00:19:55.320
a simple handler here that uses
webapp2 and does nothing

00:19:55.320 --> 00:19:59.140
other than writing header word
and setting the content type.

00:19:59.140 --> 00:19:59.930
So it's really simple.

00:19:59.930 --> 00:20:00.900
If you run that in your app--

00:20:00.900 --> 00:20:02.530
DANNY HERMES: It's the Python
2.7 hello, world.

00:20:02.530 --> 00:20:03.600
ROBERT SCHUPPENIES:
Hello, world.

00:20:03.600 --> 00:20:09.350
And what you also see here,
we use testbed because we

00:20:09.350 --> 00:20:10.170
want to test it.

00:20:10.170 --> 00:20:13.090
And that's actually--

00:20:13.090 --> 00:20:14.410
ignore that.

00:20:14.410 --> 00:20:14.940
DANNY HERMES: OK.

00:20:14.940 --> 00:20:17.010
ROBERT SCHUPPENIES: This
is the test part.

00:20:17.010 --> 00:20:18.540
We're going to use webtest.

00:20:18.540 --> 00:20:23.370
And the test itself again
is just a [? check ?]

00:20:23.370 --> 00:20:25.100
class of test case.

00:20:25.100 --> 00:20:28.436
And then in the setUp, we first
create the app, the WSGI

00:20:28.436 --> 00:20:31.660
app, we're going to test, which
is the handler we have

00:20:31.660 --> 00:20:34.540
and then some path that works.

00:20:34.540 --> 00:20:35.720
And then we use webtest2.

00:20:35.720 --> 00:20:40.720
Webtest2 is a great library for
testing web applications

00:20:40.720 --> 00:20:41.660
for Python.

00:20:41.660 --> 00:20:44.690
And it really makes sense to
use that in the App Engine

00:20:44.690 --> 00:20:46.660
context as well.

00:20:46.660 --> 00:20:49.400
DANNY HERMES: Is this a best
practice for our Python

00:20:49.400 --> 00:20:51.320
developers for their
local testing?

00:20:51.320 --> 00:20:54.390
Or is it just something that
we are big fans of?

00:20:54.390 --> 00:20:56.930
ROBERT SCHUPPENIES: You
mean using webtest?

00:20:56.930 --> 00:20:58.230
We are a big fan of it.

00:20:58.230 --> 00:20:59.550
DANNY HERMES: OK.

00:20:59.550 --> 00:21:00.950
We're not going to
make you use it.

00:21:00.950 --> 00:21:01.810
But--

00:21:01.810 --> 00:21:02.290
OK.

00:21:02.290 --> 00:21:03.320
ROBERT SCHUPPENIES: It
makes it really easy.

00:21:03.320 --> 00:21:06.150
DANNY HERMES: So is there some
reason the import of webtest

00:21:06.150 --> 00:21:07.930
happened after the definition
of the class?

00:21:07.930 --> 00:21:08.700
Or that's just--

00:21:08.700 --> 00:21:10.030
ROBERT SCHUPPENIES: Oh, this
is really just-- so it's--

00:21:10.030 --> 00:21:10.570
DANNY HERMES: Just
thrown together.

00:21:10.570 --> 00:21:10.680
ROBERT SCHUPPENIES: --focus.

00:21:10.680 --> 00:21:11.430
DANNY HERMES: Gotcha.

00:21:11.430 --> 00:21:12.872
OK, great.

00:21:12.872 --> 00:21:13.570
ROBERT SCHUPPENIES:
So you know what--

00:21:13.570 --> 00:21:14.900
DANNY HERMES: So it's not that
it's just thrown together.

00:21:14.900 --> 00:21:16.500
It's important that you
draw your eye to.

00:21:16.500 --> 00:21:17.360
ROBERT SCHUPPENIES: It
was intentional.

00:21:17.360 --> 00:21:17.760
DANNY HERMES: Got it.

00:21:17.760 --> 00:21:19.460
That's why you broke
PEP8, huh?

00:21:19.460 --> 00:21:21.160
ROBERT SCHUPPENIES: Yeah.

00:21:21.160 --> 00:21:22.990
And I don't run Pylot here.

00:21:22.990 --> 00:21:24.795
So what we do now--

00:21:24.795 --> 00:21:25.983
DANNY HERMES: We don't
run Pylot here.

00:21:25.983 --> 00:21:26.950
All right.

00:21:26.950 --> 00:21:27.840
ROBERT SCHUPPENIES:
On this demo code.

00:21:27.840 --> 00:21:28.710
We do it at Google.

00:21:28.710 --> 00:21:29.370
DANNY HERMES: Yes.

00:21:29.370 --> 00:21:31.900
ROBERT SCHUPPENIES: OK,
so now that we have--

00:21:31.900 --> 00:21:34.370
DANNY HERMES: So [INAUDIBLE]
your code everyone.

00:21:34.370 --> 00:21:35.760
ROBERT SCHUPPENIES: Now that we
have the app, we're going

00:21:35.760 --> 00:21:38.260
to wrap it in a test app that
is provided by webtest.

00:21:38.260 --> 00:21:41.450
So we say, webtest or test
app, please wrap this.

00:21:41.450 --> 00:21:45.650
And this test wrapper allows
us to easily make requests

00:21:45.650 --> 00:21:47.710
like get posts-- whatever
we want.

00:21:47.710 --> 00:21:54.280
So in this example, we say
testapp.get, which is making a

00:21:54.280 --> 00:21:57.290
get request to the app and
will give us a response.

00:21:57.290 --> 00:22:01.420
The response object is also a
webtest [? wrapper ?] object.

00:22:01.420 --> 00:22:06.630
And this one allows us to easily
query this status code,

00:22:06.630 --> 00:22:09.510
the body, or the content
type, for example.

00:22:09.510 --> 00:22:11.350
So the three things we
want to check for

00:22:11.350 --> 00:22:13.690
our very simple handler.

00:22:13.690 --> 00:22:16.280
And that's basically it.

00:22:16.280 --> 00:22:18.020
So if we--

00:22:18.020 --> 00:22:27.150
we can also, for example, just
copy this, and we'll make this

00:22:27.150 --> 00:22:28.900
a post request.

00:22:28.900 --> 00:22:32.160
And then just say hey, instead
of get, do post.

00:22:32.160 --> 00:22:33.320
So it works the same way.

00:22:33.320 --> 00:22:35.530
DANNY HERMES: Or we could set a
header and check that, also?

00:22:35.530 --> 00:22:38.940
ROBERT SCHUPPENIES: You can
do whatever you want.

00:22:38.940 --> 00:22:43.660
And something you often do on
App Engine is use App Engine

00:22:43.660 --> 00:22:45.690
services, like you use Memcache,
for example, when

00:22:45.690 --> 00:22:48.440
you want to retrieve
your stuff faster.

00:22:48.440 --> 00:22:52.830
So how do we merge the two
tests things here--

00:22:52.830 --> 00:22:56.740
the webtest and service
testing?

00:22:56.740 --> 00:23:00.210
So the testbed thing we
talked about earlier.

00:23:00.210 --> 00:23:04.990
Well, again, a simple handler
that would just, on a post

00:23:04.990 --> 00:23:09.630
request, parse the key and the
value from the URL parameters

00:23:09.630 --> 00:23:12.130
and put them into Memcache,
[? some other thing ?]

00:23:12.130 --> 00:23:13.400
big here.

00:23:13.400 --> 00:23:17.920
And the test now uses testbed
again, what we had before.

00:23:17.920 --> 00:23:19.870
And before we also
used Memcache.

00:23:19.870 --> 00:23:23.640
And we just do the same
thing we saw before.

00:23:23.640 --> 00:23:26.240
We create an app in the
testbed wrapper.

00:23:26.240 --> 00:23:29.495
Then we instantiate testbed
and initialize

00:23:29.495 --> 00:23:31.310
the Memcache stub.

00:23:31.310 --> 00:23:35.340
And for tearDown, we're just
going to deactivate it.

00:23:35.340 --> 00:23:38.750
So what we do now in the test,
we say this is the key, and

00:23:38.750 --> 00:23:41.100
this is the value.

00:23:41.100 --> 00:23:42.470
[INTERPOSING VOICES]

00:23:42.470 --> 00:23:47.960
And we're going to pass
this to the handler.

00:23:47.960 --> 00:23:51.330
And then the test itself checks,
hey, if I [? query ?]

00:23:51.330 --> 00:23:55.850
Memcache now, is the key set
and does it return a value

00:23:55.850 --> 00:23:56.770
[? assigned ?]?

00:23:56.770 --> 00:23:57.760
So straightforward.

00:23:57.760 --> 00:23:59.830
DANNY HERMES: So first
we saw services only.

00:23:59.830 --> 00:24:01.310
Then we saw webtest only.

00:24:01.310 --> 00:24:04.130
Now we see both of them used
at the same time, which is

00:24:04.130 --> 00:24:06.460
probably what most of your web
apps are going to look like.

00:24:06.460 --> 00:24:10.250
ROBERT SCHUPPENIES: Yes,
most web apps use

00:24:10.250 --> 00:24:12.430
some App Engine services.

00:24:12.430 --> 00:24:16.570
OK, yeah, that's pretty much
what testbed allows you to do.

00:24:16.570 --> 00:24:19.030
So it allows you to
write unit tests.

00:24:19.030 --> 00:24:20.600
And unit tests really--

00:24:20.600 --> 00:24:23.170
the greatest benefit is that
they run fast, or that they

00:24:23.170 --> 00:24:24.450
should run fast.

00:24:24.450 --> 00:24:26.820
So you can run them whenever
you save or whenever you

00:24:26.820 --> 00:24:27.890
commit code.

00:24:27.890 --> 00:24:32.490
And you get instant feedback,
which is a good segue into the

00:24:32.490 --> 00:24:35.490
second type of test, end-to-end
test, which allow

00:24:35.490 --> 00:24:36.200
large tests.

00:24:36.200 --> 00:24:39.150
They test the whole stack,
from top to bottom.

00:24:39.150 --> 00:24:41.990
And because of that, they're
really slow and they take a

00:24:41.990 --> 00:24:45.750
while to set up, and then
also a while to execute.

00:24:45.750 --> 00:24:50.440
But it's so important to do
end-to-end tests because while

00:24:50.440 --> 00:24:52.750
you may trust the units, you
don't know whether the whole

00:24:52.750 --> 00:24:55.430
setup will work, whether the
whole configuration, wiring

00:24:55.430 --> 00:24:57.720
you have done, actually
is correct.

00:24:57.720 --> 00:24:58.752
DANNY HERMES: Sure.

00:24:58.752 --> 00:25:00.010
ROBERT SCHUPPENIES: And part
of App Engine for--

00:25:00.010 --> 00:25:00.200
AMY UNRUH: Robert?

00:25:00.200 --> 00:25:02.370
ROBERT SCHUPPENIES: Yes?

00:25:02.370 --> 00:25:03.400
AMY UNRUH: Sorry to
derail you there.

00:25:03.400 --> 00:25:07.800
I thought before we moved on
from testbed, one thing that

00:25:07.800 --> 00:25:10.720
might be of interest to a lot of
people, because I see a lot

00:25:10.720 --> 00:25:16.910
of questions about this, is
testing with HRD when you have

00:25:16.910 --> 00:25:21.100
issues of the eventual
consistency.

00:25:21.100 --> 00:25:23.230
Would you be willing to
say a few words of

00:25:23.230 --> 00:25:25.760
advice about that?

00:25:25.760 --> 00:25:26.940
ROBERT SCHUPPENIES: So like
a particular issue

00:25:26.940 --> 00:25:27.560
I should talk about.

00:25:27.560 --> 00:25:31.310
So one thing I can mention,
but you I think

00:25:31.310 --> 00:25:33.680
you know, on the--

00:25:33.680 --> 00:25:34.470
AMY UNRUH: People might know.

00:25:34.470 --> 00:25:37.910
There's a setting to
indicate this.

00:25:37.910 --> 00:25:39.560
ROBERT SCHUPPENIES: If you go
to the website, [INAUDIBLE]

00:25:39.560 --> 00:25:42.050
world, describes [? to ?] you
exactly what you need to do.

00:25:42.050 --> 00:25:46.300
So here you say, hey, we're
going to use the PseudoRandom

00:25:46.300 --> 00:25:49.340
HRD Consistency Policy.

00:25:49.340 --> 00:25:52.502
And if you enable that in your
tests, your tests will

00:25:52.502 --> 00:25:56.800
actually work with HRD
similar behavior.

00:25:56.800 --> 00:26:02.390
So that is not consistent
by the way.

00:26:02.390 --> 00:26:04.500
You have some certain
random [INAUDIBLE]--

00:26:04.500 --> 00:26:06.170
DANNY HERMES: It stimulates
the network latency,

00:26:06.170 --> 00:26:08.750
effectively.

00:26:08.750 --> 00:26:11.000
AMY UNRUH: And you can turn
that on for some tests and

00:26:11.000 --> 00:26:12.190
turn it off for others.

00:26:12.190 --> 00:26:16.690
DANNY HERMES: Also people who
are testing their apps just by

00:26:16.690 --> 00:26:19.370
running them and playing around
with them by clicking,

00:26:19.370 --> 00:26:24.450
keep in mind, dev app server by
default right now is still

00:26:24.450 --> 00:26:25.580
master-slave.

00:26:25.580 --> 00:26:27.870
So you're going to have to pass
in a flag to actually

00:26:27.870 --> 00:26:30.490
make it be HRD when you're
just running

00:26:30.490 --> 00:26:31.340
your development server.

00:26:31.340 --> 00:26:33.610
And that's also something that
people don't always know,

00:26:33.610 --> 00:26:35.810
don't always realize.

00:26:35.810 --> 00:26:41.930
ROBERT SCHUPPENIES: Yeah,
any other questions?

00:26:41.930 --> 00:26:46.600
OK, then I'm going to go back
to the end-to-end tests--

00:26:46.600 --> 00:26:49.510
and hope I find where
my directory is.

00:26:49.510 --> 00:26:50.950
So end-to-end tests--

00:26:50.950 --> 00:26:53.250
as I mentioned, you want to
test the whole stack.

00:26:53.250 --> 00:26:55.270
And to test the whole stack,
you need to run the

00:26:55.270 --> 00:26:56.660
application in some way.

00:26:56.660 --> 00:27:00.880
An example is you have app.yaml
configured and say

00:27:00.880 --> 00:27:05.270
this handler should work on
this path, and this path

00:27:05.270 --> 00:27:07.370
should be treated
by this handler.

00:27:07.370 --> 00:27:09.690
And this is something you cannot
test in the unit test.

00:27:09.690 --> 00:27:11.940
You want to check that your
app.yaml configuration

00:27:11.940 --> 00:27:14.600
actually is working.

00:27:14.600 --> 00:27:19.240
So for this, you have to
run your application.

00:27:19.240 --> 00:27:21.560
So one thing you can do is start
your application with

00:27:21.560 --> 00:27:22.940
dev app server and
start clicking.

00:27:22.940 --> 00:27:23.560
DANNY HERMES: Sure.

00:27:23.560 --> 00:27:24.926
ROBERT SCHUPPENIES: Hey,
is this thing working?

00:27:24.926 --> 00:27:25.420
Which is--

00:27:25.420 --> 00:27:27.820
DANNY HERMES: it's hard to
automate your finger.

00:27:27.820 --> 00:27:28.690
ROBERT SCHUPPENIES:
Insidious, right?

00:27:28.690 --> 00:27:29.790
You can have one of
those click--

00:27:29.790 --> 00:27:32.560
I don't know what they're
called-- sipping birds, right?

00:27:32.560 --> 00:27:34.100
DANNY HERMES: You can also use
something like Selenium.

00:27:34.100 --> 00:27:35.420
ROBERT SCHUPPENIES: You could
use something like Selenium

00:27:35.420 --> 00:27:36.170
web driver.

00:27:36.170 --> 00:27:39.890
But you still need something
that starts up your app.

00:27:39.890 --> 00:27:42.610
And in order to automate
that, there's a

00:27:42.610 --> 00:27:44.140
library called gaedriver.

00:27:44.140 --> 00:27:46.750
And gaedriver basically
does exactly that.

00:27:46.750 --> 00:27:49.980
It takes an application and some
other configuration input

00:27:49.980 --> 00:27:52.890
and says, now based on that,
we'll start your app with dev

00:27:52.890 --> 00:27:56.380
app server, or we'll deploy
it to App Engine.

00:27:56.380 --> 00:28:00.630
And this can be done
with an API.

00:28:00.630 --> 00:28:02.720
So it can be part of
your test setup.

00:28:02.720 --> 00:28:06.410
So you say, hey, please deploy
this app and then run the

00:28:06.410 --> 00:28:08.280
following tests.

00:28:08.280 --> 00:28:10.030
And this is what I'm going
to demonstrate now.

00:28:12.760 --> 00:28:19.610
Let me see, I need to set
up the path again.

00:28:19.610 --> 00:28:23.030
So let's look at the
app at first.

00:28:23.030 --> 00:28:25.520
The app is just the standard
app.yaml main.

00:28:25.520 --> 00:28:31.655
And it also has a static
directory, which just has a

00:28:31.655 --> 00:28:33.990
static file, nothing special.

00:28:33.990 --> 00:28:41.830
And then what we also have in
here is the configuration file

00:28:41.830 --> 00:28:49.450
we're going to use for
this test run, main.

00:28:49.450 --> 00:28:53.070
And this one includes
the app ID.

00:28:53.070 --> 00:28:56.580
So if you want to deploy, the
library needs to know

00:28:56.580 --> 00:28:57.860
where to put it.

00:28:57.860 --> 00:29:02.510
And it also needs an SDK so
it can actually deploy it.

00:29:02.510 --> 00:29:06.310
It also knows where the
application is located.

00:29:06.310 --> 00:29:10.680
And in this case, cluster host
name is set to local host,

00:29:10.680 --> 00:29:13.531
which the library will take as,
OK, use dev app server to

00:29:13.531 --> 00:29:14.780
run the tests.

00:29:14.780 --> 00:29:18.910
If you use appspot.com, it
will deploy the app to

00:29:18.910 --> 00:29:19.960
appspot.com.

00:29:19.960 --> 00:29:22.830
And in that case, you would
also need credentials.

00:29:22.830 --> 00:29:25.040
DANNY HERMES: And I'm assuming
that it's going to parse the

00:29:25.040 --> 00:29:26.740
port from this and pass it
into dev app server--

00:29:26.740 --> 00:29:27.000
ROBERT SCHUPPENIES: Yes.

00:29:27.000 --> 00:29:27.610
DANNY HERMES: --when
it runs it?

00:29:27.610 --> 00:29:28.860
OK, cool.

00:29:31.110 --> 00:29:34.200
So let's look at the
test module.

00:29:37.690 --> 00:29:41.100
Here we have, again, unit tests,
some unit test library

00:29:41.100 --> 00:29:44.320
and then gaedriver, which
library we use, and then the

00:29:44.320 --> 00:29:49.300
config file I just showed, which
has the crucial config

00:29:49.300 --> 00:29:50.680
information.

00:29:50.680 --> 00:29:53.550
Two things we're going
to do here.

00:29:53.550 --> 00:29:56.820
We will work with an app token,
which is something

00:29:56.820 --> 00:30:01.320
gaedriver will give you to
shut down the app again.

00:30:01.320 --> 00:30:02.610
For example, when you
started with dev app

00:30:02.610 --> 00:30:03.800
server, it's started.

00:30:03.800 --> 00:30:06.310
But you need some way to tear it
down, otherwise the process

00:30:06.310 --> 00:30:07.100
keeps running.

00:30:07.100 --> 00:30:10.090
So you need to close
it appropriately.

00:30:10.090 --> 00:30:13.100
And then a config object, which
is basically the config

00:30:13.100 --> 00:30:16.430
file parsed and then given to
you as an object so you can

00:30:16.430 --> 00:30:16.880
use it in--

00:30:16.880 --> 00:30:18.503
DANNY HERMES: The config
file in app--

00:30:18.503 --> 00:30:20.550
excuse me, the config
file in app.yaml?

00:30:20.550 --> 00:30:22.470
ROBERT SCHUPPENIES: The
gaedriver config file we just

00:30:22.470 --> 00:30:22.770
[INAUDIBLE].

00:30:22.770 --> 00:30:23.560
DANNY HERMES: Oh, OK.

00:30:23.560 --> 00:30:24.020
ROBERT SCHUPPENIES:
The app ID--

00:30:24.020 --> 00:30:24.360
DANNY HERMES: OK.

00:30:24.360 --> 00:30:24.770
Gotcha.

00:30:24.770 --> 00:30:25.260
ROBERT SCHUPPENIES: And
cluster hose name

00:30:25.260 --> 00:30:27.170
and things like that.

00:30:27.170 --> 00:30:30.510
Because enter-enters are
expensive, you only want to do

00:30:30.510 --> 00:30:33.330
the setup once, or
as few times as

00:30:33.330 --> 00:30:35.140
possible, as necessary.

00:30:35.140 --> 00:30:43.170
And for this we use setUpClass,
which tells the

00:30:43.170 --> 00:30:47.310
unittest runner only do that
once per testclass.

00:30:47.310 --> 00:30:49.480
So if we have five test
[? members ?] in the class, it

00:30:49.480 --> 00:30:51.130
will still only do it once.

00:30:51.130 --> 00:30:53.980
And we're saying for
tearDown class.

00:30:53.980 --> 00:30:55.210
So what are we do here?

00:30:55.210 --> 00:30:58.140
At first, we retrieve
the config object.

00:30:58.140 --> 00:31:01.350
So we read basically the config
file and then have an

00:31:01.350 --> 00:31:02.630
object that contains all
the information.

00:31:05.150 --> 00:31:06.710
DANNY HERMES: This setUpClass
method, this

00:31:06.710 --> 00:31:08.300
is not part of unittest.

00:31:08.300 --> 00:31:09.550
This is some extension
of unittest--

00:31:09.550 --> 00:31:10.690
ROBERT SCHUPPENIES: No, it's
actually unittest.

00:31:10.690 --> 00:31:11.900
DANNY HERMES: Wow, great.

00:31:11.900 --> 00:31:15.380
So what you're doing, you're
making a custom test case.

00:31:15.380 --> 00:31:17.260
And unittest--

00:31:17.260 --> 00:31:23.090
well, unittest.TestCase and
unittest2.TestCase both

00:31:23.090 --> 00:31:27.120
support this, having a class
method called setUpClass?

00:31:27.120 --> 00:31:28.570
ROBERT SCHUPPENIES: Unittest2
supports it.

00:31:28.570 --> 00:31:32.140
Since unittest2 is part of
Python 2.7, you can assume

00:31:32.140 --> 00:31:33.510
Python supports it.

00:31:33.510 --> 00:31:34.580
DANNY HERMES: Right,
right, right.

00:31:34.580 --> 00:31:35.106
ROBERT SCHUPPENIES: OK?

00:31:35.106 --> 00:31:35.920
Good.

00:31:35.920 --> 00:31:41.220
So in the second step, in the
setUp classes, just gaedriver

00:31:41.220 --> 00:31:44.710
setUp app, and based on the
cluster host name, which we

00:31:44.710 --> 00:31:47.960
have set to local host, it will
start the app dev app

00:31:47.960 --> 00:31:52.800
server and then return
to the control flow.

00:31:52.800 --> 00:31:55.220
And that's pretty much all you
need to do to set up your

00:31:55.220 --> 00:31:56.720
application for testing.

00:31:56.720 --> 00:32:00.370
And then let's look at one of
the tests here, test_homepage,

00:32:00.370 --> 00:32:04.410
where you build the URL from
the config object, in this

00:32:04.410 --> 00:32:09.970
case config.app_hostname,
would tell you, OK,

00:32:09.970 --> 00:32:11.800
local host port 8080.

00:32:11.800 --> 00:32:14.880
For when you deploy your
app, it would be the

00:32:14.880 --> 00:32:17.170
foo.appspot.com

00:32:17.170 --> 00:32:21.990
So you build your URL, then you
make a request to it, and

00:32:21.990 --> 00:32:23.330
you just check the
response, whether

00:32:23.330 --> 00:32:25.390
it's what you expected.

00:32:25.390 --> 00:32:35.200
And if we look at the
application, hello world, and

00:32:35.200 --> 00:32:38.890
this is what we want
to see, and the

00:32:38.890 --> 00:32:40.990
same for dynamic content.

00:32:40.990 --> 00:32:45.480
Oh and then, sorry, forgot to
mention that this test also

00:32:45.480 --> 00:32:47.080
checks ETag headers.

00:32:47.080 --> 00:32:51.040
ETag headers are HTTP headers
that are set to indicate to a

00:32:51.040 --> 00:32:54.180
client, cache this content
or don't cache it.

00:32:54.180 --> 00:32:57.720
And if it has an ETag header,
it will actually cache it.

00:32:57.720 --> 00:33:00.750
And for dynamic content, like
what is generated with a

00:33:00.750 --> 00:33:05.200
handler, App Engine will not
send an ETag header, because

00:33:05.200 --> 00:33:07.910
dynamic content is generated
dynamically, so you don't want

00:33:07.910 --> 00:33:08.740
anyone to cache it.

00:33:08.740 --> 00:33:12.110
On the other hand, if you have
static content like whatever

00:33:12.110 --> 00:33:13.010
you serve--

00:33:13.010 --> 00:33:14.030
DANNY HERMES: Static.txt

00:33:14.030 --> 00:33:14.980
ROBERT SCHUPPENIES: Yes.

00:33:14.980 --> 00:33:17.490
App Engine will set an
ETag header for you.

00:33:17.490 --> 00:33:21.290
And then a browser queries
it once, fetches it once.

00:33:21.290 --> 00:33:22.800
And for the second request,
it would just

00:33:22.800 --> 00:33:25.560
reshow the same file.

00:33:25.560 --> 00:33:27.160
And here we just check that.

00:33:27.160 --> 00:33:32.300
We build the URL again, make a
request, and check whether the

00:33:32.300 --> 00:33:35.040
ETag header's in the response
and the same for the static

00:33:35.040 --> 00:33:38.070
content where we actually
expect it.

00:33:38.070 --> 00:33:40.555
And let's run it.

00:33:44.420 --> 00:33:45.430
DANNY HERMES: Now you said
it's going to take a long

00:33:45.430 --> 00:33:46.190
time, yeah?

00:33:46.190 --> 00:33:48.880
ROBERT SCHUPPENIES: Well, let's
see how long it takes.

00:33:48.880 --> 00:33:51.610
DANNY HERMES: Obviously, longer
than 0.0051 seconds?

00:33:51.610 --> 00:33:52.380
ROBERT SCHUPPENIES:
Definitely.

00:33:52.380 --> 00:33:53.640
Longer than the past.

00:33:53.640 --> 00:33:54.380
But we're done.

00:33:54.380 --> 00:33:55.690
So it took five seconds.

00:33:55.690 --> 00:33:59.240
Five seconds to start the app
dev app server, make the

00:33:59.240 --> 00:34:02.070
request, and then tear down
dev app server again.

00:34:02.070 --> 00:34:05.400
For appspot.com it will take
longer because deployments

00:34:05.400 --> 00:34:07.690
usually take longer.

00:34:07.690 --> 00:34:09.130
So that's end-to-end testing.

00:34:09.130 --> 00:34:12.389
And this is something we also
use as part of the App Engine

00:34:12.389 --> 00:34:16.139
development, because one thing
we want to test is that all

00:34:16.139 --> 00:34:19.719
the APIs work on the
entire stack.

00:34:19.719 --> 00:34:24.239
So we have, for example,
applications built from tests

00:34:24.239 --> 00:34:25.330
from Memcache.

00:34:25.330 --> 00:34:29.020
So we check, OK, if I use
Memcache, does it go all the

00:34:29.020 --> 00:34:31.960
way through to the Memcache
back-end, come back and have

00:34:31.960 --> 00:34:33.256
the correct response?

00:34:33.256 --> 00:34:38.520
So this is part of what we use
internally, but then open

00:34:38.520 --> 00:34:40.630
source because it's useful
to others as well.

00:34:40.630 --> 00:34:43.269
DANNY HERMES: Now, is there some
equivalent search term in

00:34:43.269 --> 00:34:47.120
your favorite search engine for
gaedriver, like there was

00:34:47.120 --> 00:34:48.870
for webtest?

00:34:48.870 --> 00:34:51.870
ROBERT SCHUPPENIES: The search
term is basically gaedriver,

00:34:51.870 --> 00:34:55.719
which will bring you to a Google
project code page.

00:34:55.719 --> 00:34:58.470
And if you want to install it on
your machine, you can just

00:34:58.470 --> 00:35:00.140
do a pip install gaedriver--

00:35:00.140 --> 00:35:01.150
DANNY HERMES: From PyPI.

00:35:01.150 --> 00:35:02.870
ROBERT SCHUPPENIES: --which
will fetch it.

00:35:02.870 --> 00:35:05.420
OK.

00:35:05.420 --> 00:35:10.860
And yes, since this is an API,
it's easy to integrate that

00:35:10.860 --> 00:35:13.420
into continuous test
setUps you have.

00:35:13.420 --> 00:35:17.030
Because I saw a question
on the--

00:35:17.030 --> 00:35:17.690
DANNY HERMES: Moderator--

00:35:17.690 --> 00:35:19.390
ROBERT SCHUPPENIES:
--Moderator page.

00:35:19.390 --> 00:35:20.460
DANNY HERMES: --about
continuous

00:35:20.460 --> 00:35:21.790
deployments and testing.

00:35:21.790 --> 00:35:24.010
ROBERT SCHUPPENIES: So you could
use gaedriver for that

00:35:24.010 --> 00:35:26.290
to say, OK, deploy
the app, run your

00:35:26.290 --> 00:35:27.450
tests, see if it works.

00:35:27.450 --> 00:35:29.110
DANNY HERMES: Sure.

00:35:29.110 --> 00:35:31.210
ROBERT SCHUPPENIES: OK.

00:35:31.210 --> 00:35:36.550
And then that brings me to the
last part, which is library

00:35:36.550 --> 00:35:40.850
testing, where we also want to
support developers who write

00:35:40.850 --> 00:35:43.690
libraries for App Engine that
are then used for App Engine

00:35:43.690 --> 00:35:44.910
applications.

00:35:44.910 --> 00:35:45.770
and--

00:35:45.770 --> 00:35:47.990
DANNY HERMES: NDB is actually
a good case for this, right,

00:35:47.990 --> 00:35:50.970
because it started outside
and then made it in.

00:35:50.970 --> 00:35:53.030
But it's still an
ext, so maybe--

00:35:53.030 --> 00:35:54.705
ROBERT SCHUPPENIES: But it's
a nice development model, I

00:35:54.705 --> 00:35:57.870
think, because it allows you
to get feedback quick from

00:35:57.870 --> 00:36:00.980
users, which is what
you really want.

00:36:00.980 --> 00:36:04.510
So let's see where we are.

00:36:04.510 --> 00:36:09.410
So for this, I'm going to use
a library called aeta.

00:36:09.410 --> 00:36:13.090
Aeta also started out as
an internal project.

00:36:13.090 --> 00:36:18.760
And this summer our intern,
Jacob Taylor, actually

00:36:18.760 --> 00:36:21.110
polished it and made it an
open source project.

00:36:21.110 --> 00:36:24.090
So again, you can
just search it--

00:36:24.090 --> 00:36:26.050
aeta App Engine.

00:36:26.050 --> 00:36:27.375
DANNY HERMES: What's
the acronym for it?

00:36:27.375 --> 00:36:28.660
Or is this something else?

00:36:28.660 --> 00:36:30.530
ROBERT SCHUPPENIES: It's App
Engine Test Appendix.

00:36:30.530 --> 00:36:34.450
DANNY HERMES: OK, appendix,
appendix, got it.

00:36:34.450 --> 00:36:37.065
ROBERT SCHUPPENIES: And the
name came from Guido.

00:36:37.065 --> 00:36:38.465
So I just wanted
[? to do that. ?]

00:36:38.465 --> 00:36:40.030
DANNY HERMES: A benevolent
name.

00:36:40.030 --> 00:36:41.990
ROBERT SCHUPPENIES: Yes.

00:36:41.990 --> 00:36:43.160
OK, let's look at this.

00:36:43.160 --> 00:36:46.040
Again, we have an app here.

00:36:46.040 --> 00:36:49.030
In this app, app.yaml,
main.py.

00:36:49.030 --> 00:36:51.060
And it then has a
tests directory.

00:36:51.060 --> 00:36:54.060
And it includes the
aeta library.

00:36:54.060 --> 00:37:00.860
So if we look at app.yaml, we
see whatever comes to tests/

00:37:00.860 --> 00:37:02.970
is handled by aeta.

00:37:02.970 --> 00:37:08.950
And if we look at the tests
directory, we just see a bunch

00:37:08.950 --> 00:37:11.770
of tests there, fail tests,
for instance.

00:37:11.770 --> 00:37:22.970
And now, let's start this
app and see what

00:37:22.970 --> 00:37:24.220
it would look like.

00:37:27.860 --> 00:37:31.780
So the app, the app itself
doesn't tell anything, but it

00:37:31.780 --> 00:37:33.680
knows where the tests is.

00:37:33.680 --> 00:37:35.560
So it points you there.

00:37:35.560 --> 00:37:38.990
And this is now handled
by aeta.

00:37:38.990 --> 00:37:42.690
And aeta will go through the
tests directory and look for

00:37:42.690 --> 00:37:43.390
all the tests.

00:37:43.390 --> 00:37:46.530
So this is a list of all
the tests it found.

00:37:46.530 --> 00:37:47.320
This is the package.

00:37:47.320 --> 00:37:50.190
This is the test module, and
then it found those tests

00:37:50.190 --> 00:37:52.210
classes with those
test methods.

00:37:52.210 --> 00:37:53.750
And then it allows
you to run them.

00:37:53.750 --> 00:37:57.330
And we would just basically
say run them all.

00:37:57.330 --> 00:38:00.230
DANNY HERMES: And are these
happening asynchronous via

00:38:00.230 --> 00:38:01.640
HTTP calls?

00:38:01.640 --> 00:38:04.110
They're not some sub-process
running on App Engine or

00:38:04.110 --> 00:38:04.900
anything like that?

00:38:04.900 --> 00:38:07.040
ROBERT SCHUPPENIES: Oh, this
one-- so what happens this

00:38:07.040 --> 00:38:13.400
front-end on the website talks
to the handler from aeta and

00:38:13.400 --> 00:38:14.375
says, give me all the tests.

00:38:14.375 --> 00:38:15.870
And then it responses
to all the tests.

00:38:15.870 --> 00:38:16.740
DANNY HERMES: And then
it renders it

00:38:16.740 --> 00:38:17.705
based on what it receives.

00:38:17.705 --> 00:38:18.690
ROBERT SCHUPPENIES: Yes.

00:38:18.690 --> 00:38:20.240
So it's kind of AJAX-y.

00:38:20.240 --> 00:38:20.990
DANNY HERMES: Yes--

00:38:20.990 --> 00:38:21.430
ROBERT SCHUPPENIES:
And then we saw--

00:38:21.430 --> 00:38:23.800
DANNY HERMES: --kind
of, kind of.

00:38:23.800 --> 00:38:25.080
ROBERT SCHUPPENIES: --one test
that failed, which is

00:38:25.080 --> 00:38:29.750
test_fail, which is expected
because it even says so.

00:38:29.750 --> 00:38:30.290
DANNY HERMES: Cool.

00:38:30.290 --> 00:38:36.100
ROBERT SCHUPPENIES: OK, and all
you need to do to use aeta

00:38:36.100 --> 00:38:44.170
is basically go to, let's see,
aeta.googlecode.com, which

00:38:44.170 --> 00:38:47.030
describes how to use aeta and
all that stuff, and put it in

00:38:47.030 --> 00:38:51.070
your app directory, set up
app.yaml, and then set up a

00:38:51.070 --> 00:38:51.610
test directory.

00:38:51.610 --> 00:38:53.630
DANNY HERMES: It's
not yet on PyPI

00:38:53.630 --> 00:38:54.540
ready to be pip installed?

00:38:54.540 --> 00:38:54.910
ROBERT SCHUPPENIES: No.

00:38:54.910 --> 00:38:55.836
DANNY HERMES: Someday, huh?

00:38:55.836 --> 00:38:57.700
ROBERT SCHUPPENIES:
It will be.

00:38:57.700 --> 00:39:03.800
And one thing that's also useful
in the context of aeta,

00:39:03.800 --> 00:39:06.220
you don't want to, again, go
to a website, click on

00:39:06.220 --> 00:39:08.680
something, pass the
test results.

00:39:08.680 --> 00:39:13.280
It's manual, expensive, and just
like a drag basically.

00:39:13.280 --> 00:39:20.110
So what we're going to do is
we're going to start the

00:39:20.110 --> 00:39:23.154
application on dev app
server, and then--

00:39:23.154 --> 00:39:25.760
oh, that's small--

00:39:25.760 --> 00:39:27.410
we can use a local client.

00:39:27.410 --> 00:39:33.945
And this local client takes
just a URL, test--

00:39:33.945 --> 00:39:35.950
I think it was this one.

00:39:35.950 --> 00:39:40.390
And then go to the
aeta handler and

00:39:40.390 --> 00:39:43.220
then query all the--

00:39:43.220 --> 00:39:44.470
let me just see what's--

00:39:49.980 --> 00:39:52.176
tests, OK, wrong path.

00:39:52.176 --> 00:39:53.485
So it's going to work.

00:39:53.485 --> 00:39:55.112
This should work--

00:39:55.112 --> 00:39:58.370
goes to the aeta handler and
then queries, say, give me all

00:39:58.370 --> 00:40:00.340
the tests and then we'll
run all the tests.

00:40:00.340 --> 00:40:05.780
And why do we want this
in this wrapper?

00:40:05.780 --> 00:40:09.650
Because we want to test code
within an App Engine

00:40:09.650 --> 00:40:10.430
environment.

00:40:10.430 --> 00:40:13.900
So we want to test it within
either the app server

00:40:13.900 --> 00:40:14.390
[? environment, ?]

00:40:14.390 --> 00:40:17.410
so the production environment,
or within the SDK.

00:40:17.410 --> 00:40:18.810
Also--

00:40:18.810 --> 00:40:19.790
OK, that failed.

00:40:19.790 --> 00:40:22.700
DANNY HERMES: Maybe you need to
be super user or something?

00:40:22.700 --> 00:40:24.060
ROBERT SCHUPPENIES: Let's see.

00:40:24.060 --> 00:40:25.730
DANNY HERMES: That's not
a hammer for every

00:40:25.730 --> 00:40:27.306
nail, by the way.

00:40:27.306 --> 00:40:32.452
I'm just postulating there.

00:40:32.452 --> 00:40:32.920
AMY UNRUH: Maybe--

00:40:32.920 --> 00:40:33.420
I'm sorry.

00:40:33.420 --> 00:40:34.600
ROBERT SCHUPPENIES: It
just said local.

00:40:34.600 --> 00:40:36.890
DANNY HERMES: There we go.

00:40:36.890 --> 00:40:38.010
Typo.

00:40:38.010 --> 00:40:39.120
ROBERT SCHUPPENIES: Typo.

00:40:39.120 --> 00:40:42.590
And so now we know,
OK, it passed.

00:40:42.590 --> 00:40:46.170
And you can put this together
with gaedriver to start your

00:40:46.170 --> 00:40:48.450
app automatically.

00:40:48.450 --> 00:40:52.220
And then use aeta, the local
client, to run the test.

00:40:52.220 --> 00:40:57.470
DANNY HERMES: So you're running
it from the main

00:40:57.470 --> 00:40:58.930
directory of this application.

00:40:58.930 --> 00:40:59.710
ROBERT SCHUPPENIES: Yeah.

00:40:59.710 --> 00:41:02.860
DANNY HERMES: So where does
local client come from?

00:41:02.860 --> 00:41:04.030
It comes distributed
with aeta?

00:41:04.030 --> 00:41:05.430
ROBERT SCHUPPENIES: Yeah,
it comes with aeta.

00:41:05.430 --> 00:41:07.570
It's a local standalone
client.

00:41:07.570 --> 00:41:10.850
DANNY HERMES: OK, so is there
a reason it's at the root of

00:41:10.850 --> 00:41:11.880
the directory, rather than--

00:41:11.880 --> 00:41:12.060
ROBERT SCHUPPENIES: Oh, no.

00:41:12.060 --> 00:41:14.510
Oh, actually it's not the
root of the directory.

00:41:14.510 --> 00:41:16.150
It's just random.

00:41:16.150 --> 00:41:17.400
We're actually outside
of the directory.

00:41:17.400 --> 00:41:18.040
DANNY HERMES: I see.

00:41:18.040 --> 00:41:18.780
OK, I got ya.

00:41:18.780 --> 00:41:22.820
Just so you just put it so it
was below the application, so

00:41:22.820 --> 00:41:24.930
you could actually hit the
application or what?

00:41:24.930 --> 00:41:27.160
ROBERT SCHUPPENIES: So the
application, the local client

00:41:27.160 --> 00:41:30.060
has nothing to do with the
application or with a--

00:41:30.060 --> 00:41:31.240
DANNY HERMES: I realize this.

00:41:31.240 --> 00:41:34.520
I'm just curious about why we
didn't just go into the aeta

00:41:34.520 --> 00:41:38.570
directory in the application
to run local client?

00:41:38.570 --> 00:41:39.210
ROBERT SCHUPPENIES: Probably
what you--

00:41:39.210 --> 00:41:39.970
DANNY HERMES: Semantics,
folks.

00:41:39.970 --> 00:41:41.400
Really irrelevant but--

00:41:41.400 --> 00:41:43.340
ROBERT SCHUPPENIES: What you
will do at some point is--

00:41:43.340 --> 00:41:47.440
and what our test setup also
looks like is-- we have a

00:41:47.440 --> 00:41:48.670
bunch of unit tests.

00:41:48.670 --> 00:41:53.280
We put them in an app wrapper,
then deploy those apps with an

00:41:53.280 --> 00:41:56.780
automated script, based on
gaedriver, run the tests with

00:41:56.780 --> 00:41:59.850
the local client, and then
integrate the feedback into

00:41:59.850 --> 00:42:01.210
our test framework.

00:42:01.210 --> 00:42:06.530
So it's really totally separate
from the app.

00:42:06.530 --> 00:42:12.710
And one thing we also do is
we test it with different

00:42:12.710 --> 00:42:13.190
environments.

00:42:13.190 --> 00:42:15.320
So we use it to test it
against Python 2.5

00:42:15.320 --> 00:42:18.210
environment, Python
2.7, different

00:42:18.210 --> 00:42:19.690
dev app server setups.

00:42:19.690 --> 00:42:21.880
So yeah, this is basically
where we use aeta.

00:42:24.580 --> 00:42:27.530
And those are the three things
I wanted to talk about.

00:42:27.530 --> 00:42:29.400
DANNY HERMES: Super helpful
demos, right?

00:42:29.400 --> 00:42:32.570
If nothing else, just seeing
them all together and seeing

00:42:32.570 --> 00:42:34.140
the quick mocks you can make.

00:42:34.140 --> 00:42:36.780
It's pretty big.

00:42:36.780 --> 00:42:39.860
As you could tell with some
of my questions, Robert's

00:42:39.860 --> 00:42:43.610
test_foo is completely superior
to my test_foo, even

00:42:43.610 --> 00:42:46.160
though I consider myself to be
something of a Python nut.

00:42:46.160 --> 00:42:50.730
But these things are actually
pretty important if you have a

00:42:50.730 --> 00:42:52.760
production application, and
you're running a business off

00:42:52.760 --> 00:42:56.060
of it, which hopefully plenty
of people watching are.

00:42:56.060 --> 00:42:58.830
So Amy, what next?

00:42:58.830 --> 00:43:01.180
What else are we going to do?

00:43:01.180 --> 00:43:02.750
AMY UNRUH: So thanks
so much, Robert.

00:43:02.750 --> 00:43:04.540
That was great.

00:43:04.540 --> 00:43:09.770
And if you're like me and put
off writing your tests until

00:43:09.770 --> 00:43:14.440
the end of your app building,
maybe this will inspire you,

00:43:14.440 --> 00:43:17.402
because you can see how easy
it is and how great some of

00:43:17.402 --> 00:43:18.530
this stuff is.

00:43:18.530 --> 00:43:22.800
So I think we've got a few more
questions coming in on

00:43:22.800 --> 00:43:25.620
the Moderator that
are test related.

00:43:25.620 --> 00:43:28.380
So I want to apologize in
advance to the few questions

00:43:28.380 --> 00:43:31.520
that are not test related, which
I think we might need to

00:43:31.520 --> 00:43:32.530
get to next time.

00:43:32.530 --> 00:43:36.510
We'll propagate them along.

00:43:36.510 --> 00:43:37.730
Let's see.

00:43:37.730 --> 00:43:41.180
So we've covered the
one about webapp2.

00:43:44.630 --> 00:43:47.540
And you sort of covered
this one.

00:43:47.540 --> 00:43:51.220
But I'll let you answer it
further if you want to.

00:43:51.220 --> 00:43:54.460
For functional tests, is there
any recommended setup--

00:43:54.460 --> 00:43:57.500
BDD, Selenium, any built-in
feature in

00:43:57.500 --> 00:43:59.380
App Engine for this?

00:43:59.380 --> 00:44:00.630
ROBERT SCHUPPENIES: There's
no built-in feature in App

00:44:00.630 --> 00:44:05.000
Engine, because, like the
webtest library we use to do

00:44:05.000 --> 00:44:07.620
handler testing, there are
really great open source

00:44:07.620 --> 00:44:10.970
projects to do functional
testing, so [? drive ?]

00:44:10.970 --> 00:44:11.080
[? your ?]

00:44:11.080 --> 00:44:12.900
[? website ?], for example.

00:44:12.900 --> 00:44:15.350
My personal preference
is WebDriver.

00:44:15.350 --> 00:44:17.310
It has a great API.

00:44:17.310 --> 00:44:19.070
And it allows you to
use different types

00:44:19.070 --> 00:44:20.450
of browsers as well.

00:44:20.450 --> 00:44:23.650
And if you use, for example,
gaedriver, you can start your

00:44:23.650 --> 00:44:26.440
app or deploy it and then
integrate that with the

00:44:26.440 --> 00:44:29.830
WebDriver test that hits certain
URLs, certain elements

00:44:29.830 --> 00:44:31.800
on the page and then
checks the output.

00:44:34.430 --> 00:44:36.540
DANNY HERMES: It's a bit
of a tough question.

00:44:36.540 --> 00:44:38.570
We certainly want to help
people with this.

00:44:38.570 --> 00:44:42.290
But a lot of the things we're
providing are server side.

00:44:42.290 --> 00:44:47.230
And when you're talking about
testing JavaScript and user

00:44:47.230 --> 00:44:52.670
interfaces and things like, it
starts to leave the scope.

00:44:52.670 --> 00:44:54.650
I guess if you're talking about
things like the channel

00:44:54.650 --> 00:44:57.800
API, it's always within our
scope and things like that.

00:44:57.800 --> 00:45:02.770
But it's hard to try to
cover all of this.

00:45:02.770 --> 00:45:05.565
But like he said, it's something
that we're aware of.

00:45:05.565 --> 00:45:09.230
And we certainly use.

00:45:09.230 --> 00:45:11.010
ROBERT SCHUPPENIES: So there are
really great resources but

00:45:11.010 --> 00:45:13.480
because it's much bigger
than App Engine.

00:45:13.480 --> 00:45:15.060
It's really web testing,
right--

00:45:15.060 --> 00:45:17.790
web application testing-- which
you can write on Tomcat,

00:45:17.790 --> 00:45:20.330
or whatever you want, right?

00:45:20.330 --> 00:45:24.160
We don't cover it
in particular.

00:45:24.160 --> 00:45:25.410
DANNY HERMES: Sorry.

00:45:27.450 --> 00:45:30.010
AMY UNRUH: OK, here's
another one.

00:45:30.010 --> 00:45:31.450
And again, you've touched
on it a bit.

00:45:31.450 --> 00:45:35.900
How do you set up your test
environments, especially CI

00:45:35.900 --> 00:45:41.170
with a packaging format that
App Engine is delivered in?

00:45:41.170 --> 00:45:41.920
ROBERT SCHUPPENIES: I'm
not sure I quite

00:45:41.920 --> 00:45:43.710
understand the question.

00:45:43.710 --> 00:45:45.372
What's CI?

00:45:45.372 --> 00:45:46.760
AMY UNRUH: So Continuous
Integration.

00:45:50.800 --> 00:45:53.490
ROBERT SCHUPPENIES: So what we
do as part of App Engine is

00:45:53.490 --> 00:45:57.600
also we have applications that
are checked in and then we

00:45:57.600 --> 00:46:01.280
use, for example, gaedriver
to, whenever there's

00:46:01.280 --> 00:46:03.260
a change, run them.

00:46:03.260 --> 00:46:05.940
For example, with the SDK,
run all the tests like

00:46:05.940 --> 00:46:09.740
WebDriver-based tests and then
see whether they still pass.

00:46:09.740 --> 00:46:13.600
And the same you should be doing
probably both for the

00:46:13.600 --> 00:46:15.550
SDK, but also before
you deploy.

00:46:15.550 --> 00:46:19.350
Because the SDK tries to be as
close as possible to the

00:46:19.350 --> 00:46:22.970
production environment, but
it's not quite there.

00:46:22.970 --> 00:46:24.370
DANNY HERMES: It's
not equivalent.

00:46:24.370 --> 00:46:27.220
ROBERT SCHUPPENIES: It's not
equivalent, but close.

00:46:27.220 --> 00:46:29.700
So it really makes sense--
and we do the same--

00:46:29.700 --> 00:46:33.910
to test our applications both
on the SDK and in the

00:46:33.910 --> 00:46:37.570
production environment by using
tools like gaedriver to

00:46:37.570 --> 00:46:41.480
deploy them automatically with
an API and by using tools like

00:46:41.480 --> 00:46:45.700
WebDriver to do the functional
testing.

00:46:45.700 --> 00:46:51.960
And since those have APIs, it's
easy to write scripts

00:46:51.960 --> 00:46:54.000
that do that for you, so
you can automate it.

00:46:59.790 --> 00:47:03.020
DANNY HERMES: Also, I guess
the second part of this

00:47:03.020 --> 00:47:05.060
question asked about
the packaging.

00:47:05.060 --> 00:47:08.980
But as we saw with things like
gaedriver, you can actually

00:47:08.980 --> 00:47:13.300
deal with that in your
config file.

00:47:13.300 --> 00:47:17.110
So it's something that as long
as you're putting it in the

00:47:17.110 --> 00:47:19.920
same place, or as long as you
know where you put it, you'll

00:47:19.920 --> 00:47:21.170
to be able to set that
in your config.

00:47:26.840 --> 00:47:27.620
Next question?

00:47:27.620 --> 00:47:28.870
Anything else?

00:47:30.910 --> 00:47:34.510
AMY UNRUH: That is actually
the last testing-related

00:47:34.510 --> 00:47:37.620
question, although I'll briefly
address one that's

00:47:37.620 --> 00:47:39.340
easy to address.

00:47:39.340 --> 00:47:41.840
Are there plans for a Dart
runtime environment?

00:47:41.840 --> 00:47:46.560
So this, I'm afraid, is our
stock answer, that we can't

00:47:46.560 --> 00:47:50.250
comment on things that aren't
on the roadmap.

00:47:50.250 --> 00:47:51.010
Sorry about that.

00:47:51.010 --> 00:47:52.240
DANNY HERMES: I can answer more
questions [? if you ?]

00:47:52.240 --> 00:47:53.580
can't comment, if you want.

00:47:53.580 --> 00:47:57.940
[LAUGHING]

00:47:57.940 --> 00:47:59.270
AMY UNRUH: Well, it's been
sitting there for a while.

00:47:59.270 --> 00:48:07.120
And there's also a good question
about Eclipse, that

00:48:07.120 --> 00:48:07.920
we hope to--

00:48:07.920 --> 00:48:12.220
we've been having Python-heavy
Hangouts recently.

00:48:12.220 --> 00:48:14.350
So we hope to have some
in the future that

00:48:14.350 --> 00:48:15.370
focus more on Java.

00:48:15.370 --> 00:48:20.510
So I think we'll propagate that
discussion question to an

00:48:20.510 --> 00:48:23.963
upcoming Hangout, since we're
running a bit short of time.

00:48:26.750 --> 00:48:31.400
Robert, if people were
interested in getting this

00:48:31.400 --> 00:48:35.350
code, just to play around with
it, would it be easy to make

00:48:35.350 --> 00:48:36.430
it available to people?

00:48:36.430 --> 00:48:39.830
I mean, would it be easy to
give it to me, and I could

00:48:39.830 --> 00:48:40.880
work on making it available?

00:48:40.880 --> 00:48:41.800
ROBERT SCHUPPENIES:
We can do that.

00:48:41.800 --> 00:48:45.540
Also, gaedriver and aeta
both have demo apps

00:48:45.540 --> 00:48:46.710
that come with them.

00:48:46.710 --> 00:48:49.980
So once you download those
libraries, you can

00:48:49.980 --> 00:48:51.500
just work with them.

00:48:51.500 --> 00:48:53.090
AMY UNRUH: OK, that's
probably sufficient.

00:48:53.090 --> 00:48:54.360
DANNY HERMES: Are there wikis
on these projects?

00:48:54.360 --> 00:48:56.210
If not, then I would be
happy to write it up.

00:48:56.210 --> 00:48:59.890
ROBERT SCHUPPENIES: Just, again,
go to the aeta project

00:48:59.890 --> 00:49:02.710
page and the gaedriver page.

00:49:02.710 --> 00:49:04.550
They also have stuff.

00:49:04.550 --> 00:49:05.490
DANNY HERMES: And they've
got wikis.

00:49:05.490 --> 00:49:07.610
Awesome.

00:49:07.610 --> 00:49:08.960
Great.

00:49:08.960 --> 00:49:10.490
AMY UNRUH: OK, great.

00:49:10.490 --> 00:49:11.220
Thanks so much.

00:49:11.220 --> 00:49:12.262
DANNY HERMES: Go
forth and test.

00:49:12.262 --> 00:49:15.430
AMY UNRUH: It's really
wonderful.

00:49:15.430 --> 00:49:17.220
All right, see everyone
next time.

00:49:17.220 --> 00:49:19.430
We'll have another one next
week, another Hangout.

00:49:19.430 --> 00:49:22.540
So watch for the announcement
on that.

00:49:22.540 --> 00:49:23.120
DANNY HERMES: Thanks,
everyone.

00:49:23.120 --> 00:49:24.370
ROBERT SCHUPPENIES: Bye.

