WEBVTT
Kind: captions
Language: en

00:00:03.615 --> 00:00:04.490
DANIEL BUCHNER: Cool.

00:00:04.490 --> 00:00:05.900
So Daniel Buchner.

00:00:05.900 --> 00:00:08.140
I was formerly in Brazil
for about five years.

00:00:08.140 --> 00:00:10.870
I led all of our initiatives
surrounding Web Components

00:00:10.870 --> 00:00:12.890
for everything from
spec interactions

00:00:12.890 --> 00:00:15.960
to how we actually would use
the components for things

00:00:15.960 --> 00:00:19.070
like making Firefox OS
app development easier.

00:00:19.070 --> 00:00:21.200
One of my 20% projects
while was there

00:00:21.200 --> 00:00:24.280
was actually writing
X-Tag library.

00:00:24.280 --> 00:00:26.720
Weird for a PM, I guess.

00:00:26.720 --> 00:00:27.320
It's awesome.

00:00:27.320 --> 00:00:29.500
It's our version of
Polymer essentially.

00:00:29.500 --> 00:00:31.806
It does a little bit
less, less than Polymer.

00:00:31.806 --> 00:00:33.180
No data binding,
stuff like that.

00:00:33.180 --> 00:00:35.080
It's simply about
Custom Elements.

00:00:35.080 --> 00:00:37.310
But I'll walk through
what it does do.

00:00:37.310 --> 00:00:39.230
So interesting
point, we actually

00:00:39.230 --> 00:00:41.890
use the same polyfill
layer that Polymer does.

00:00:41.890 --> 00:00:44.050
So if you already were
to be using Polymer

00:00:44.050 --> 00:00:46.750
and you wanted to use any
Web Component from X-Tag that

00:00:46.750 --> 00:00:49.220
was built with this library,
all you would need to include

00:00:49.220 --> 00:00:51.440
is a small-- the
actual library itself,

00:00:51.440 --> 00:00:54.580
which is 12k, instead of
redundantly loading everything

00:00:54.580 --> 00:00:55.887
that Polymer loads.

00:00:55.887 --> 00:00:57.720
It takes care of most
of the platform stuff.

00:00:57.720 --> 00:00:59.220
If you wanted to
use a part, you can

00:00:59.220 --> 00:01:01.950
include that platform JS and
include X-Tag, the library,

00:01:01.950 --> 00:01:03.560
on top of that as well.

00:01:03.560 --> 00:01:06.120
And it will operate just
fine in the presence

00:01:06.120 --> 00:01:09.050
of only the native
Web Component APIs.

00:01:09.050 --> 00:01:10.859
It also enhances those APIs.

00:01:10.859 --> 00:01:13.150
It gives you an interface
that's just a little bit more

00:01:13.150 --> 00:01:14.630
ergonomic.

00:01:14.630 --> 00:01:18.207
It links your custom attributes,
getters and setters, together.

00:01:18.207 --> 00:01:19.290
You saw that with Polymer.

00:01:19.290 --> 00:01:20.710
So we have our own
little dialect,

00:01:20.710 --> 00:01:22.560
our own way of declaring that.

00:01:22.560 --> 00:01:24.480
But we do the same thing there.

00:01:24.480 --> 00:01:27.260
Also it provides some
great event features,

00:01:27.260 --> 00:01:29.950
stuff I'll show you in the
demo, as well as hooking up

00:01:29.950 --> 00:01:33.170
a pseudo system and a mixin API.

00:01:33.170 --> 00:01:35.710
So that if you create
something like maybe-- iframe

00:01:35.710 --> 00:01:38.440
and image have source attributes
and you want to just have

00:01:38.440 --> 00:01:41.640
the source attribute able to be
applied to multiple elements,

00:01:41.640 --> 00:01:43.510
we have a mixin called SRC.

00:01:43.510 --> 00:01:45.190
And you mix that
into any component.

00:01:45.190 --> 00:01:47.750
And when you change source,
downloads your data.

00:01:47.750 --> 00:01:48.890
Makes it available to you.

00:01:48.890 --> 00:01:50.950
So it's awesome.

00:01:50.950 --> 00:01:53.090
Let's just jump
right in the demo.

00:01:53.090 --> 00:01:54.370
So you can click.

00:01:54.370 --> 00:01:56.180
If anyone's following
along, I will--oops.

00:01:56.180 --> 00:01:58.030
Actually, it's already loaded.

00:01:58.030 --> 00:02:00.292
So here we have our code.

00:02:00.292 --> 00:02:01.750
I'm going to walk
through it really

00:02:01.750 --> 00:02:03.920
quickly just so we
understand what we're doing.

00:02:03.920 --> 00:02:13.260
This is what an X-Tag
created element looks like.

00:02:13.260 --> 00:02:14.395
So xtag.register.

00:02:14.395 --> 00:02:17.324
This is all maps that document
that register element.

00:02:17.324 --> 00:02:18.740
You'll see some
of the same things

00:02:18.740 --> 00:02:20.910
you are used to-- lifecycle.

00:02:20.910 --> 00:02:23.160
Obviously those APIs map
straight to Web Components.

00:02:23.160 --> 00:02:25.600
Created, that's for when
element instantiates

00:02:25.600 --> 00:02:27.190
any way that it may happen.

00:02:27.190 --> 00:02:29.380
Insert and Removed--
this is when the element

00:02:29.380 --> 00:02:33.910
is removed from the DOM
and inserted in the DOM.

00:02:33.910 --> 00:02:37.540
Accessors-- This is how we
actually link up our attributes

00:02:37.540 --> 00:02:38.930
to setters and getters.

00:02:38.930 --> 00:02:42.270
So we have a Super Mario
attribute, or Super Mario

00:02:42.270 --> 00:02:42.830
getter.

00:02:42.830 --> 00:02:45.880
So if you say
this.supermario, you're

00:02:45.880 --> 00:02:48.770
going to be able to access it
there or through the attribute

00:02:48.770 --> 00:02:50.550
super-mario.

00:02:50.550 --> 00:02:53.130
This is also declaring it
as a Boolean attribute.

00:02:53.130 --> 00:02:55.099
So it doesn't
actually have a value.

00:02:55.099 --> 00:02:56.390
But X-Tag handles that for you.

00:02:56.390 --> 00:02:59.200
So if you say
this.super-mario=true,

00:02:59.200 --> 00:03:02.600
it knows to put that attribute
on your element without

00:03:02.600 --> 00:03:04.786
a value.

00:03:04.786 --> 00:03:05.660
We also have methods.

00:03:05.660 --> 00:03:07.410
So if you want to say,
here's some methods

00:03:07.410 --> 00:03:09.210
that are going to go
on my custom element,

00:03:09.210 --> 00:03:12.800
you can see we have jump and
play sound as well as an events

00:03:12.800 --> 00:03:14.990
object that does
some nice wrapping.

00:03:14.990 --> 00:03:17.990
So what tap is
actually an event that

00:03:17.990 --> 00:03:19.840
wraps click and
touch for you, so you

00:03:19.840 --> 00:03:22.410
don't have to worry
about where you're at.

00:03:22.410 --> 00:03:23.810
It just works.

00:03:23.810 --> 00:03:25.930
As well as animation end
and some other things.

00:03:25.930 --> 00:03:28.480
You know, animation end is
still prefixed in some browsers.

00:03:28.480 --> 00:03:29.750
We go ahead and take
care of that for you.

00:03:29.750 --> 00:03:31.750
So all you say is I want
an [? animation end ?]

00:03:31.750 --> 00:03:34.410
event on this element,
and we'll make sure

00:03:34.410 --> 00:03:37.540
that the right
events are handled.

00:03:37.540 --> 00:03:39.890
So let's check it out.

00:03:39.890 --> 00:03:40.840
Looks pretty familiar.

00:03:40.840 --> 00:03:42.242
People are probably
used to this.

00:03:42.242 --> 00:03:43.450
Let's put Mario into the DOM.

00:03:43.450 --> 00:03:44.980
MARIO: It's me, Mario.

00:03:44.980 --> 00:03:48.440
DANIEL BUCHNER: So
when he enters the DOM,

00:03:48.440 --> 00:03:52.110
we have this part of the demos
playing here inserted, right?

00:03:52.110 --> 00:03:53.610
So that's actually
what's happening.

00:03:53.610 --> 00:03:55.484
It's going and saying,
let's play this sound,

00:03:55.484 --> 00:03:58.600
which is a function that's
on your custom element.

00:03:58.600 --> 00:04:00.180
Let's do some other stuff.

00:04:00.180 --> 00:04:04.283
That jump, that tap that we
had and the jump function.

00:04:04.283 --> 00:04:04.782
Yeah.

00:04:04.782 --> 00:04:06.180
Let's do that.

00:04:06.180 --> 00:04:07.650
So that's all there.

00:04:07.650 --> 00:04:10.720
And Mario, he's
feeling a little low.

00:04:10.720 --> 00:04:13.040
He might want to become super.

00:04:13.040 --> 00:04:15.920
So you can do that.

00:04:15.920 --> 00:04:16.779
You can go back.

00:04:16.779 --> 00:04:18.404
And remember, it's
a Boolean attribute.

00:04:18.404 --> 00:04:20.619
So I can say zero, falsy.

00:04:20.619 --> 00:04:22.410
X-Tag handles all this
for you, converts it

00:04:22.410 --> 00:04:23.670
to truthy and falsy.

00:04:23.670 --> 00:04:24.970
So I can say zero.

00:04:24.970 --> 00:04:26.290
It's going to go back.

00:04:26.290 --> 00:04:28.740
Also, just to show you the
power of getters and setters,

00:04:28.740 --> 00:04:31.340
let's say plus plus also works.

00:04:31.340 --> 00:04:31.840
Right?

00:04:31.840 --> 00:04:32.600
This is just JS.

00:04:32.600 --> 00:04:34.650
It's just the platform,
the DOM, stuff

00:04:34.650 --> 00:04:36.941
you're going to be used to
more and more now that we're

00:04:36.941 --> 00:04:39.012
returning back to that platform.

00:04:39.012 --> 00:04:41.030
And let's say I'm
done with my demo

00:04:41.030 --> 00:04:42.330
and I really want him to leave.

00:04:42.330 --> 00:04:44.490
MARIO: Hey, you very good.

00:04:44.490 --> 00:04:45.705
See you next time.

00:04:45.705 --> 00:04:46.580
DANIEL BUCHNER: Yeah.

00:04:46.580 --> 00:04:48.788
So this is all stuff you
can do with custom elements.

00:04:48.788 --> 00:04:50.940
I would encourage you, no
matter what you get into,

00:04:50.940 --> 00:04:54.790
what library around custom
elements-- X-Tag, Polymer,

00:04:54.790 --> 00:04:56.590
both-- just get into them.

00:04:56.590 --> 00:05:01.920
I mean, the web is the Napoleon
Dynamite of the platform,

00:05:01.920 --> 00:05:05.240
then surely web
components are Pedro.

00:05:05.240 --> 00:05:08.642
Your wildest dreams
are going to come true.

00:05:08.642 --> 00:05:10.600
Just to give you one
quick demo because I think

00:05:10.600 --> 00:05:13.210
we have a couple more minutes.

00:05:13.210 --> 00:05:15.230
When they talk about
non-visual text--

00:05:15.230 --> 00:05:18.200
this is really important--
think outside the box.

00:05:18.200 --> 00:05:20.340
Not everything has
to be a UI element.

00:05:20.340 --> 00:05:22.700
Here we've actually created
something really cool

00:05:22.700 --> 00:05:23.659
to do element queries.

00:05:23.659 --> 00:05:25.950
So I don't know if you are
familiar with media queries.

00:05:25.950 --> 00:05:27.950
Think about what if you
could have media queries

00:05:27.950 --> 00:05:30.960
scope to just a certain element
so that max width wasn't

00:05:30.960 --> 00:05:33.545
300 pixels of the
whole window, it

00:05:33.545 --> 00:05:36.390
was 300 pixels of
a specific element.

00:05:36.390 --> 00:05:39.480
This is a non-visual element
that we have that actually--

00:05:39.480 --> 00:05:41.500
see how they're morphing?

00:05:41.500 --> 00:05:46.544
I'm able to drag them and
get different queries.

00:05:46.544 --> 00:05:47.460
They're just changing.

00:05:47.460 --> 00:05:48.140
Right?

00:05:48.140 --> 00:05:51.530
This is all done through
a non-visual tag.

00:05:51.530 --> 00:05:53.030
And it's handled
by the Shadow DOMs.

00:05:53.030 --> 00:05:54.630
So all the mechanisms
to allow you

00:05:54.630 --> 00:05:57.020
that functionality are
baked into a non-visual tag.

00:05:57.020 --> 00:05:58.080
Explore the DOM.

00:05:58.080 --> 00:06:00.470
Explore tags, no matter
if they're visual or not.

00:06:00.470 --> 00:06:01.470
Thank you for your time.

00:06:01.470 --> 00:06:04.580
And questions welcome.

00:06:04.580 --> 00:06:08.230
[APPLAUSE]

