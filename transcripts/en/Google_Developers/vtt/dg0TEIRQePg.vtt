WEBVTT
Kind: captions
Language: en

00:00:00.560 --> 00:00:01.560
&gt;&gt;Sean Lynch: Hey, guys.

00:00:01.560 --> 00:00:02.560
My name is Sean Lynch.

00:00:02.560 --> 00:00:04.740
I'm the Product Manager on Google App Engine.

00:00:04.740 --> 00:00:10.480
And today, I have with me a sort of fairly
complete cross section of the App Engine Engineering

00:00:10.480 --> 00:00:11.480
team.

00:00:11.480 --> 00:00:20.369
Before I go on, do you guys want to introduce
yourselves and say which component you're

00:00:20.369 --> 00:00:22.220
working on?

00:00:22.220 --> 00:00:25.929
&gt;&gt;Taylor: Hey, I'm Taylor.

00:00:25.929 --> 00:00:33.000
I work on a number of things, mainly Task
Queue and Chrome systems.

00:00:33.000 --> 00:00:34.000
&gt;&gt;Kevin Gibbs: And I'm Kevin Gibbs.

00:00:34.000 --> 00:00:35.000
I'm the Tech Lead and Manager for the App
Engine Team.

00:00:35.000 --> 00:00:36.000
Do a little bit of everything.

00:00:36.000 --> 00:00:38.200
And I’ll also mention this is a fireside
chat which I think is a great thing about

00:00:38.200 --> 00:00:39.200
Google I/O.

00:00:39.200 --> 00:00:42.360
It means that you guys are just here to ask
questions and we're gonna answer them and

00:00:42.360 --> 00:00:43.360
hang out.

00:00:43.360 --> 00:00:48.230
So, of course, use Moderator, but also, don't
hesitate to ask questions, or keep it real,

00:00:48.230 --> 00:00:50.380
or ask us the hardest questions you can think
of because we just wanna connect with you

00:00:50.380 --> 00:00:51.380
guys and help out.

00:00:51.380 --> 00:00:52.380
&gt;&gt;Alfred Fuller: Hi, I'm Alfred Fuller.

00:00:52.380 --> 00:01:00.090
I work on the Datastore and I do a lot of
the query stuff and, yeah, if you wanna have

00:01:00.090 --> 00:01:03.500
y-, to know a lot about that, there’s a
talk tomorrow about the query stuff but I

00:01:03.500 --> 00:01:15.829
will answer any questions you have now and
hopefully not to give too much of it away.

00:01:15.829 --> 00:01:16.829
[Alfred laughs]

00:01:16.829 --> 00:01:17.829
&gt;&gt;Max Ross: That's it, Alfred is the query
planner.

00:01:17.829 --> 00:01:18.829
My name is Max Ross--

00:01:18.829 --> 00:01:19.829
&gt;&gt;Kevin: [inaudible] gets better--

00:01:19.829 --> 00:01:26.090
&gt;&gt;Max: I work on the Datastore with Alfred
and I do anything else that's related to Java.

00:01:26.090 --> 00:01:27.749
&gt;&gt;Brett Slatikin: Brett-, Brett Slatkin.

00:01:27.749 --> 00:01:30.369
I work on the Runtime and APIs team.

00:01:30.369 --> 00:01:32.770
&gt;&gt;Guido van Rossen: Guido van Rossen.

00:01:32.770 --> 00:01:38.119
Anything Python related, the admin console,
the domain console, and then App Engine for

00:01:38.119 --> 00:01:43.040
business that was demoed this morning during
the keynote.

00:01:43.040 --> 00:01:44.060
[pause]

00:01:44.060 --> 00:01:46.840
&gt;&gt;Dan Sanderson: I'm Dan Sanderson.

00:01:46.840 --> 00:01:49.310
I'm the Technical Writer Lead for App Engine.

00:01:49.310 --> 00:01:51.899
I also wrote that book that's upstairs.

00:01:51.899 --> 00:01:55.869
&gt;&gt;Brett: For sale in your local bookstore.

00:01:55.869 --> 00:01:58.469
&gt;&gt;Sean: And there's actually, I think, one
or two other app engineers floating around

00:01:58.469 --> 00:02:05.090
in the crowd there so you may see them join
us up on stage if you ask a particularly hot

00:02:05.090 --> 00:02:07.350
button question.

00:02:07.350 --> 00:02:09.340
So, that's, that's it.

00:02:09.340 --> 00:02:12.220
Oh, two quick things, yeah -- there's a microphone
there.

00:02:12.220 --> 00:02:14.799
Please feel free to line up and ask questions.

00:02:14.799 --> 00:02:17.849
It's probably if you're going to, you can,
if you're going to ask a particularly interesting

00:02:17.849 --> 00:02:19.150
one, then that's a great place to do it.

00:02:19.150 --> 00:02:24.950
If you do come up and ask, it would be great
if you could give us just your name and your

00:02:24.950 --> 00:02:25.950
company.

00:02:25.950 --> 00:02:41.840
I suspect that we've worked with a couple
of you on email, or on the groups, or on IRC

00:02:41.840 --> 00:02:48.930
over the last few years.

00:02:48.930 --> 00:02:59.439
So, so it would be really cool if we could
put the name to the face.

00:02:59.439 --> 00:03:12.860
Otherwise, I think, yeah, I'm just going to
be reading questions from the Moderator and

00:03:12.860 --> 00:03:16.349
we'll be taking questions from the mic.

00:03:16.349 --> 00:03:17.349
&gt;&gt;Kevin: [inaudible]

00:03:17.349 --> 00:03:25.480
&gt;&gt;Sean: And there's a, there's a couple of
empty seats up here in the front that's got

00:03:25.480 --> 00:03:27.239
the placards on that.

00:03:27.239 --> 00:03:29.450
Feel free, yeah, come join us.

00:03:29.450 --> 00:03:30.450
&gt;&gt;Kevin: [inaudible]

00:03:30.450 --> 00:03:38.239
&gt;&gt;maleaudience: Do you know the Moderator
URL?

00:03:38.239 --> 00:03:51.459
&gt;&gt;Sean: It should be, if you go to the Session
page on I/O, it should be embedded in the

00:03:51.459 --> 00:03:52.459
Wave.

00:03:52.459 --> 00:03:56.840
But I'll, I'll try and post it up as well
here.

00:03:56.840 --> 00:03:58.379
Yeah, I know.

00:03:58.379 --> 00:03:59.379
[laughs]

00:03:59.379 --> 00:04:03.180
&gt;&gt;Kevin: Why don't you read the question,
Sean?

00:04:03.180 --> 00:04:06.439
&gt;&gt;Sean: Actually, we've got one up front.

00:04:06.439 --> 00:04:09.700
&gt;&gt;Max1: Hi, I'm Max from IBM Research.

00:04:09.700 --> 00:04:18.320
Do -- is your Sequel support gonna be full
Sequel or will it include transactions?

00:04:18.320 --> 00:04:22.580
&gt;&gt;Kevin: Read the question.

00:04:22.580 --> 00:04:34.130
&gt;&gt;Sean: Sure. So, the question if I heard
correctly was, is the Sequel support gonna

00:04:34.130 --> 00:04:37.069
be full Sequel or just--

00:04:37.069 --> 00:04:40.610
&gt;&gt;Max1: and will it support transactions?

00:04:40.610 --> 00:04:44.020
&gt;&gt;Sean: Will it support transactions?

00:04:44.020 --> 00:04:48.340
&gt;&gt;Max1: I guess, elaborate a little bit on
the Sequel support that you're planning.

00:04:48.340 --> 00:04:51.280
&gt;&gt;Sean: Yeah. Full Sequel support will include
transactions.

00:04:51.280 --> 00:04:53.970
&gt;&gt;Max1: I mean, is it gonna be like a Google
Sequel--

00:04:53.970 --> 00:04:54.970
&gt;&gt;Kevin: Yes.

00:04:54.970 --> 00:04:55.970
&gt;&gt;Max1: as well?

00:04:55.970 --> 00:04:56.970
&gt;&gt;Kevin: Definitely.

00:04:56.970 --> 00:05:01.230
So, you know that, that support's really coming
together right now and I don't have a lot

00:05:01.230 --> 00:05:03.039
of details about it.

00:05:03.039 --> 00:05:06.849
We don't know what all the details will be.

00:05:06.849 --> 00:05:18.360
But, what I can tell you is it is based on
real Sequel databases, real Sequel servers,

00:05:18.360 --> 00:05:19.360
and the features that you expect from Sequel.

00:05:19.360 --> 00:05:21.020
It's not just a query language or just in
a tiny feature.

00:05:21.020 --> 00:05:27.310
It's really, what I think you guys would all
believe is very familiar Sequel.

00:05:27.310 --> 00:05:35.270
Now, I can't guarantee that like, every esoteric
feature, if you've used it there and some

00:05:35.270 --> 00:05:38.270
may be particularly challenging, things like
triggers, things like that.

00:05:38.270 --> 00:05:47.780
But, I think that it's something that any
of you would definitely recognize as a standard,

00:05:47.780 --> 00:05:51.160
traditional Sequel database server.

00:05:51.160 --> 00:05:56.090
&gt;&gt;Max1: Will it scale like a Datastore?

00:05:56.090 --> 00:06:01.750
&gt;&gt;Sean: Will it scale like a Datastore?

00:06:01.750 --> 00:06:07.680
&gt;&gt;Kevin: As much as Sequel scales. So I mean--

00:06:07.680 --> 00:06:08.750
[audience laughs]

00:06:08.750 --> 00:06:11.440
&gt;&gt;Kevin: what I just said.

00:06:11.440 --> 00:06:25.650
I would be lying to you if I said that it
 -- I could also magically scale because the

00:06:25.650 --> 00:06:31.000
reasons why Sequel databases have trouble
scaling are natural reasons based on their

00:06:31.000 --> 00:06:32.000
design.

00:06:32.000 --> 00:06:36.250
It's not that Sequel database programmers
didn't write it well.

00:06:36.250 --> 00:06:44.470
It's, it's just that those are the limitations
of a design like that.

00:06:44.470 --> 00:06:53.280
So, I would expect that you would have the
same set of issues you might have with the

00:06:53.280 --> 00:06:57.030
standard Sequel database that you would run
yourself.

00:06:57.030 --> 00:07:05.319
I think the differences are that you don't
have to run it yourself.

00:07:05.319 --> 00:07:17.570
Well, keep it running will make it available
to you and if you need to scale that, you

00:07:17.570 --> 00:07:20.900
probably would use similar strategies that
you use today in other hosting environments;

00:07:20.900 --> 00:07:22.910
sharding, using multiple Sequel databases,
and things like that.

00:07:22.910 --> 00:07:33.430
&gt;&gt;Max1: But we don't, will we have to manage
this or you manage this in RBF?

00:07:33.430 --> 00:07:36.879
&gt;&gt;Sean: Will we have to manage it ourselves?

00:07:36.879 --> 00:07:44.889
&gt;&gt;Kevin: Because some of those are getting
a little, it's a little too soon for me to

00:07:44.889 --> 00:07:56.000
say because management can mean a lot of different
things. So, I don't want to overpromise--

00:07:56.000 --> 00:07:57.670
&gt;&gt;Max1: Well, like sharding.

00:07:57.670 --> 00:07:59.750
It's, it's -- you mentioned sharding.

00:07:59.750 --> 00:08:02.740
So, will, will it go through a shard?

00:08:02.740 --> 00:08:10.479
&gt;&gt;Kevin: Oh, no I don't believe that there
will be anything that does the sharding automatically

00:08:10.479 --> 00:08:11.479
for you.

00:08:11.479 --> 00:08:15.080
I think that's something that's too natural,
what you're actually doing.

00:08:15.080 --> 00:08:18.460
But, being perfectly honest with you, I think
it's too soon to say about some of this.

00:08:18.460 --> 00:08:25.050
But, I think the best way for you to think
about it is that it's a Sequel server that

00:08:25.050 --> 00:08:27.500
you can turn on and use.

00:08:27.500 --> 00:08:33.021
But I mean -- Max maybe there’s something
you want to say about it?

00:08:33.021 --> 00:08:34.390
&gt;&gt;Max: This microphone's working.

00:08:34.390 --> 00:08:39.659
The only, the only thing that I would add
is, I, I definitely recognize that there's

00:08:39.659 --> 00:08:45.570
lots of pain points associated with sharding
and I don't feel like anybody has really addressed

00:08:45.570 --> 00:08:50.830
those in a way that, that removes all those
pain points yet.

00:08:50.830 --> 00:08:58.980
And that's something we should certainly look
at but I think, as Kevin said, we don't want

00:08:58.980 --> 00:09:01.600
to get ahead of ourselves here.

00:09:01.600 --> 00:09:07.300
Right now, we don't have a Sequel offering
that you can use today.

00:09:07.300 --> 00:09:19.140
And so, the first step for us is to do the
work to make that happen so that you have

00:09:19.140 --> 00:09:36.450
a basic Sequel offering that you can use today.

00:09:36.450 --> 00:09:53.470
And then, for the more advanced stuff, we'll
take it as far as we can go.

00:09:53.470 --> 00:10:05.290
But, the other thing I would add is if you
find yourself in a position with your Sequel

00:10:05.290 --> 00:10:16.640
database where it's not scaling for you, you
do have this other thing called the Datastore,

00:10:16.640 --> 00:10:30.130
which has been around for a couple years now
and works really well and scales really well.

00:10:30.130 --> 00:10:38.329
So, you have more options at your disposal
than you otherwise would.

00:10:38.329 --> 00:10:46.970
&gt;&gt;Max1: I'm taking a lot of time, but this
is my last comment.

00:10:46.970 --> 00:10:49.740
So, there's a lot of criticism about this.

00:10:49.740 --> 00:10:59.800
I mean, I'm coming from a, a company that
provides a solution in Sequel so, and I'm

00:10:59.800 --> 00:11:07.920
not trying to defend this because I, I'm from
research and I can tell you that part of the

00:11:07.920 --> 00:11:35.480
reason why you're probably doing it is because
customer's asking for it, and it's because

00:11:35.480 --> 00:12:12.540
they have existing application, and it's because
it works.

00:12:12.540 --> 00:12:23.680
It doesn't scale, maybe, to the extent that
Datastore does, but it provides certain guarantees,

00:12:23.680 --> 00:12:24.680
and why?

00:12:24.680 --> 00:12:28.070
Because it has a solid mathematical foundation
behind it and 20 years of research.

00:12:28.070 --> 00:12:36.699
So, there is advantages to a model like this
and, and I thought what, what you were getting

00:12:36.699 --> 00:12:41.760
at is something more like Sequel Azure, where
you would try to provide some level of, of

00:12:41.760 --> 00:12:45.230
scaling with that, but, that's fine.

00:12:45.230 --> 00:12:46.230
Just a comment.

00:12:46.230 --> 00:12:52.820
&gt;&gt;Sean: Just before we go on, I want to get
our two new additions to introduce themselves.

00:12:52.820 --> 00:12:58.329
&gt;&gt;Don Schwartz: Hi, I'm Don Schwartz. I work
on App Engine, primarily Java support.

00:12:58.329 --> 00:13:03.410
&gt;&gt;Toby Reyelts: Hi, I'm Toby Reyelts and I
do the same.

00:13:03.410 --> 00:13:05.260
&gt;&gt;maleaudience2: Good timing, then.

00:13:05.260 --> 00:13:12.380
So, I was very excited last year when you
guys announced the Java support on App Engine,

00:13:12.380 --> 00:13:18.050
and been advocating it to many people as a
solution.

00:13:18.050 --> 00:13:23.310
At the same time, I'm embracing the, the Groovy
and Grails metaphor because I'm kind of jealous

00:13:23.310 --> 00:13:25.970
of the Ruby guys.

00:13:25.970 --> 00:13:33.029
So, we built this entire thing on Groovy on
Grails for the App Engine, but it doesn't

00:13:33.029 --> 00:13:46.800
work because there's a 30 second time limit
in there that by the time that the, the Grails

00:13:46.800 --> 00:13:54.459
initializes, you basically run out of time.

00:13:54.459 --> 00:14:03.810
And I know in the roadmap, there's plans for
having a ability to reserve instance or keep

00:14:03.810 --> 00:14:13.709
it running, which would be very, very useful
except I just don't see you guys implementing

00:14:13.709 --> 00:14:14.709
it.

00:14:14.709 --> 00:14:24.952
And it keep -- seems like you're going to
tangents and now you have this App Engine

00:14:24.952 --> 00:14:29.949
enterprise, which to me is a bad news because
to me it sounds like it's distraction rather

00:14:29.949 --> 00:14:35.820
than finishing that and doing it really, really
well for the Java people.

00:14:35.820 --> 00:14:44.459
Now you're kind of expanding and you're kind
of making yourself very thin.

00:14:44.459 --> 00:14:49.520
And I see it now the trend is agains-, across
all the Google different things. You do so

00:14:49.520 --> 00:15:00.100
many different things and do you half good;
you're not doing any of them great.

00:15:00.100 --> 00:15:07.800
So, I guess my point is what's your plan for
the Java support?

00:15:07.800 --> 00:15:19.560
Are you gonna be able to support it, or should
we just leave and go to Amazon or some other

00:15:19.560 --> 00:15:20.560
solution?

00:15:20.560 --> 00:15:21.560
Thank you.

00:15:21.560 --> 00:15:22.560
[audience boos]

00:15:22.560 --> 00:15:23.699
&gt;&gt;Sean: We said, "Ask the tough ones."

00:15:23.699 --> 00:15:24.699
[audience laughs]

00:15:24.699 --> 00:15:30.710
&gt;&gt;Sean: So, is it fair to say your question
is are we gonna continue to add the, or additional

00:15:30.710 --> 00:15:31.970
support for Java with reserved instances--

00:15:31.970 --> 00:15:32.970
&gt;&gt;maleaudience2: [inaudible]

00:15:32.970 --> 00:15:36.360
&gt;&gt;Sean: I, I, I completely hear you. Do you
want to tackle this one?

00:15:36.360 --> 00:15:37.360
&gt;&gt;Kevin: [inaudible]

00:15:37.360 --> 00:15:38.360
[audience laughs]

00:15:38.360 --> 00:15:41.269
&gt;&gt;Sean: Are we focusing on reserved instances
in Java?

00:15:41.269 --> 00:15:43.670
I think, I, I'll jump on it.

00:15:43.670 --> 00:15:51.490
We have probably just an equal, equivalent
representation up here on stage between Python

00:15:51.490 --> 00:15:52.490
and Java.

00:15:52.490 --> 00:16:04.940
So, in terms of language support, I don't
think that we're spreading ourselves too thin.

00:16:04.940 --> 00:16:12.500
I think that we've actually got it very covered.

00:16:12.500 --> 00:16:24.320
We definitely hear that reserved instances,
or the, or the feature that we have on our

00:16:24.320 --> 00:16:28.259
roadmap there is, is particularly painful.

00:16:28.259 --> 00:16:38.399
Not just for the guys who are trying to go
beyond Java and use other JVM based languages,

00:16:38.399 --> 00:16:48.880
but even on the Python side, the guys are
running into it using particular frameworks.

00:16:48.880 --> 00:17:01.160
So, it's, it's a pain point that we definitely
see and we're working hard to address it.

00:17:01.160 --> 00:17:02.600
&gt;&gt;maleaudience2: [inaudible]

00:17:02.600 --> 00:17:04.050
&gt;&gt;Sean: Right.

00:17:04.050 --> 00:17:15.130
I, I think we would probably have something
to show you before the year is out.

00:17:15.130 --> 00:17:16.130
[pause]

00:17:16.130 --> 00:17:19.260
&gt;&gt;Kevin: I, I echo what Sean said.

00:17:19.260 --> 00:17:22.110
It is a very acute problem.

00:17:22.110 --> 00:17:25.331
We're very aware of it.

00:17:25.331 --> 00:17:40.980
We are working on multiple solutions and that's
the big problem.

00:17:40.980 --> 00:17:49.030
Some of them are already working internally;
some are being coded right now internally,

00:17:49.030 --> 00:17:54.770
so I don't like to make predictions stronger
than that.

00:17:54.770 --> 00:18:07.930
But,
I do know when we're got the code working

00:18:07.930 --> 00:18:25.150
and ready, we try to get it out there as soon
as we can.

00:18:25.150 --> 00:18:44.840
And believe me, I know, these guys know, Don
and Toby knows, it hurts right now.

00:18:44.840 --> 00:18:51.410
It's a problem and so we, we know we have
to do something better and get it out there.

00:18:51.410 --> 00:18:55.170
So, we're working on it as best we can.

00:18:55.170 --> 00:19:01.220
&gt;&gt;Sean: One thing to point out is the stuff
on our roadmap is things that we're actually

00:19:01.220 --> 00:19:03.920
working on, we are actively working on.

00:19:03.920 --> 00:19:10.110
It doesn't make it onto the roadmap if we
just got a lot of feature requests about it.

00:19:10.110 --> 00:19:12.970
They’re just things that we're actually
trying to build.

00:19:12.970 --> 00:19:13.970
&gt;&gt;maleaudience2: [inaudible]

00:19:13.970 --> 00:19:14.970
&gt;&gt;Sean: Oh.

00:19:14.970 --> 00:19:15.970
[Sean laughs]

00:19:15.970 --> 00:19:16.970
&gt;&gt;maleaudience2: [inaudible]

00:19:16.970 --> 00:19:19.110
&gt;&gt;Sean: Well, I'm, I'm, I apologize.

00:19:19.110 --> 00:19:20.110
[Sean laughs]

00:19:20.110 --> 00:19:21.110
&gt;&gt;audiencemember3: [inaudible]

00:19:21.110 --> 00:19:27.410
&gt;&gt;Sean: I, I think, so the question was basically,
"Are we walking away?"

00:19:27.410 --> 00:19:28.630
Oh, you got it.

00:19:28.630 --> 00:19:29.630
&gt;&gt;Kevin: Sorry, I got it.

00:19:29.630 --> 00:19:41.380
I'm a little hard of hearing so it's some
trouble with the questions.

00:19:41.380 --> 00:19:44.100
I definitely hear what you're saying.

00:19:44.100 --> 00:19:45.700
And, you know what?

00:19:45.700 --> 00:19:47.740
I was concerned about that in our messaging,
too.

00:19:47.740 --> 00:19:52.420
Because I wanted you guys to know that both
of these things are really, critically important.

00:19:52.420 --> 00:20:00.630
If you read what it says on the App Engine
for Business site, if you look at our FAQ,

00:20:00.630 --> 00:20:07.780
if you look at some of the stuff, we emphasize
in the strongest words that we can -- how

00:20:07.780 --> 00:20:12.250
committed we are both to App Engines that
exist today for highly scalable Internet consumer

00:20:12.250 --> 00:20:17.380
sites for the platform that you guys have
all used, as well as the enterprise stuff

00:20:17.380 --> 00:20:18.850
we're getting into now.

00:20:18.850 --> 00:20:23.980
And what you heard me talk about today was
largely focused on intranet apps.

00:20:23.980 --> 00:20:30.871
But, we also plan to, just in the same way,
and this is mentioned more in the docs, have

00:20:30.871 --> 00:20:37.070
that same set of tools, that same thing that
we're building there appropriate for ISVs;

00:20:37.070 --> 00:20:44.220
for people who are resigned, for people who
are just building businesses on App Engine

00:20:44.220 --> 00:20:45.740
but want those same things.

00:20:45.740 --> 00:20:48.460
Now, we, we're trying to take over the world.

00:20:48.460 --> 00:20:54.330
We're trying to take on everything, every
single thing we can but we have to do it in

00:20:54.330 --> 00:20:55.330
steps.

00:20:55.330 --> 00:20:56.920
[audience chuckles]

00:20:56.920 --> 00:21:05.560
So, we, it's something that we really care
about and particularly there is some language

00:21:05.560 --> 00:21:06.560
about this.

00:21:06.560 --> 00:21:11.960
There is some stuff you can read that I hope
it will instill you with confidence, but I

00:21:11.960 --> 00:21:19.160
promise you that we are committed to both
of those sides and we're doing the best we

00:21:19.160 --> 00:21:20.560
can to connect them.

00:21:20.560 --> 00:21:22.550
&gt;&gt;Sean: All right -- third question now?

00:21:22.550 --> 00:21:24.700
Is that what we're up to?

00:21:24.700 --> 00:21:25.700
[Sean laughs]

00:21:25.700 --> 00:21:29.740
&gt;&gt;audience3: This is the first question, I'm
sorry.

00:21:29.740 --> 00:21:31.930
&gt;&gt;Sean: No, no.

00:21:31.930 --> 00:21:33.380
It's fine.

00:21:33.380 --> 00:21:39.630
&gt;&gt;audience3: Ok, this question is about Google
App Engines take on transactional installation

00:21:39.630 --> 00:21:40.630
limits.

00:21:40.630 --> 00:21:49.860
I, I understand that you, you say that you
support read committed, but typically in ACID-complaint

00:21:49.860 --> 00:21:59.060
database, when you have read committed, when
you start a transaction and when you do updates,

00:21:59.060 --> 00:22:06.670
when you read the same entity again what you
get is a modified entity.

00:22:06.670 --> 00:22:07.670
Right?

00:22:07.670 --> 00:22:18.601
But in the case of Google App Engine, after
you modify within a transaction's code, you

00:22:18.601 --> 00:22:26.530
get the older entity, right, perhaps because
of distributed data's, too.

00:22:26.530 --> 00:22:33.470
How do you, question number one, how do you
claim that this is read committed?

00:22:33.470 --> 00:22:37.800
Number two, if you're building business applications
of some kind--

00:22:37.800 --> 00:22:39.110
[audience member coughs]

00:22:39.110 --> 00:22:45.970
of real-world application, how do you come
across, or how do you overcome this problem?

00:22:45.970 --> 00:22:52.600
&gt;&gt;Max: So to answer the, to answer the first
part, correct me if I'm wrong, I believe we've

00:22:52.600 --> 00:22:59.060
been careful in our language to say that the
closest isolation, or, sorry, the closest

00:22:59.060 --> 00:23:03.540
thing to the existing, what are they?

00:23:03.540 --> 00:23:08.630
The closest, the closest identifier to what
the Datastore has is read committed--

00:23:08.630 --> 00:23:09.630
&gt;&gt;audience3: Right.

00:23:09.630 --> 00:23:14.370
&gt;&gt;Max: But, it is not read committed in the
absolute sort of most generally agreed upon

00:23:14.370 --> 00:23:17.720
sense and what you're describing is the way
in which it differs slightly.

00:23:17.720 --> 00:23:22.450
We offer strong consistency, which means that
if in a transaction, you write your data,

00:23:22.450 --> 00:23:28.340
you commit that transaction, you read it back,
you're going to get your data.

00:23:28.340 --> 00:23:34.200
But, what you describe is a quirk and it is
an artifact of the implementation of, of how

00:23:34.200 --> 00:23:46.610
we do things and I realize that it differs
a little bit from what you expect when you

00:23:46.610 --> 00:23:49.240
say read committed.

00:23:49.240 --> 00:23:58.270
But, read committed is the closest thing out
there to what we're doing.

00:23:58.270 --> 00:24:00.340
So, I can, I, I sleep ok with that.

00:24:00.340 --> 00:24:11.120
I apologize if it has confused you but I think
we've tried to be careful about not saying,

00:24:11.120 --> 00:24:18.260
"Yes, this is read committed and that's all
you need to understand."

00:24:18.260 --> 00:24:20.610
&gt;&gt;audience3: All right.

00:24:20.610 --> 00:24:28.430
[Brett and Max talk back and forth without
microphones – inaudible]

00:24:28.430 --> 00:24:31.550
&gt;&gt;Max: Yeah, that's fair.

00:24:31.550 --> 00:24:37.081
So, I mean, how does, does, how does, how
does this impact you?

00:24:37.081 --> 00:24:44.680
Did this, did this bite you in an unexpected
way?

00:24:44.680 --> 00:24:46.670
&gt;&gt;audience3: Yeah.

00:24:46.670 --> 00:25:01.150
For example, if you, if you're trying to build
up the system application, for example, and

00:25:01.150 --> 00:25:11.110
let's say you have an inventory and you have
line items, you add a quantity for the particular

00:25:11.110 --> 00:25:12.110
inventory.

00:25:12.110 --> 00:25:17.360
Now, you do a sum of, or you credit all the
list of line items--

00:25:17.360 --> 00:25:18.360
&gt;&gt;Max: Yeah.

00:25:18.360 --> 00:25:25.500
&gt;&gt;audience3: within the same transaction,
what you get is a wrong number against a number

00:25:25.500 --> 00:25:31.820
which is, I mean, I, I understand if it's
three-third ‘til you commit if you query

00:25:31.820 --> 00:25:38.090
for a word like "Google IO", its ok to miss
that until commit happens, right?

00:25:38.090 --> 00:25:47.371
But, if you are running a business transaction
and you want to do a sum and then based on

00:25:47.371 --> 00:25:55.380
that, you want to do the next transaction,
whether the quantity has exceeded or not,

00:25:55.380 --> 00:26:04.780
then you run into a problem, especially if
you're, if you're trying to uphold the same

00:26:04.780 --> 00:26:11.201
JDO implementation, I think you will run into
the problem, right?

00:26:11.201 --> 00:26:17.800
Am I making sense?

00:26:17.800 --> 00:26:25.390
&gt;&gt;Max: Yeah I, yeah, I, I understand the scenario
you're talking about but I don't, I don't

00:26:25.390 --> 00:26:29.010
have a magic bullet for you.

00:26:29.010 --> 00:26:36.730
We can say, we can say things like you can
write your data and then you can do your querying

00:26:36.730 --> 00:26:51.130
in a separate transaction and then you're
guaranteed you're gonna see that sort of thing,

00:26:51.130 --> 00:27:16.560
but I realize that's not the most natural
way to approach that problem, especially if

00:27:16.560 --> 00:27:24.770
you've been doing it with a relational database.

00:27:24.770 --> 00:27:32.901
It's, it's one of those "gotchas" that's out
there and I'm, and I'm sorry that it bit you.

00:27:32.901 --> 00:27:39.540
&gt;&gt;audience3: Can I ask a second question?

00:27:39.540 --> 00:27:40.540
I'm sorry.

00:27:40.540 --> 00:27:45.310
&gt;&gt;Kevin: I think it's not fair to everyone
else.

00:27:45.310 --> 00:27:47.040
So, I'm sorry.

00:27:47.040 --> 00:27:56.410
But back, Sean, you want to read two of the
highest voted Moderator questions?

00:27:56.410 --> 00:27:59.400
&gt;&gt;Sean: Yeah, absolutely.

00:27:59.400 --> 00:28:13.860
So, the first one is for you guys, "What would
say has been the biggest lesson learned since

00:28:13.860 --> 00:28:18.560
GAs launched two years ago?"

00:28:18.560 --> 00:28:30.780
What, what was the biggest lesson learned
since GAs launch two years ago?

00:28:30.780 --> 00:28:42.100
&gt;&gt;Kevin: Oh! Well, that's a fun one.

00:28:42.100 --> 00:28:53.830
I'll pass the mic around for that one.

00:28:53.830 --> 00:28:56.470
Well I'll think.

00:28:56.470 --> 00:29:06.120
You guys have an answer off the top of your
head you wanna say?

00:29:06.120 --> 00:29:07.820
This is Alon.

00:29:07.820 --> 00:29:11.790
&gt;&gt;Alon: Hi, hi my name is Alon.

00:29:11.790 --> 00:29:20.570
I'd say one of the biggest lessons that we've
learned in terms of, the way we gen-, generate

00:29:20.570 --> 00:29:26.040
our infrastructure and things is to keep everything
configurable because you never know how things

00:29:26.040 --> 00:29:36.860
are going to be used, or where the pain points
are gonna be.

00:29:36.860 --> 00:29:46.430
So, being able to have more knobs and, and
buttons to push and turn is really helpful.

00:29:46.430 --> 00:29:47.430
[pause]

00:29:47.430 --> 00:29:55.970
&gt;&gt;Taylor: On, on a similar note, I think one
of the things that I've picked up, compared

00:29:55.970 --> 00:30:02.310
last year was that transparency is really
key.

00:30:02.310 --> 00:30:08.040
So, it's really important for the developer
to able to see what's going on with their,

00:30:08.040 --> 00:30:09.040
with their system.

00:30:09.040 --> 00:30:10.040
[pause]

00:30:10.040 --> 00:30:16.280
&gt;&gt;Kevin: I think something that is a lesson
learned, one that we saw a little bit coming,

00:30:16.280 --> 00:30:23.600
but sometimes the, the hardest lessons are
the ones that you saw coming but you didn't

00:30:23.600 --> 00:30:39.900
realize that it wasn't, it wasn't a cat running
at you; it was a tiger running at you in terms

00:30:39.900 --> 00:30:51.010
of the scale of the problem and how bad, and
how acute the situation was.

00:30:51.010 --> 00:31:03.100
It's in terms of the limits in App Engine.
I know a lot of these, especially in our first

00:31:03.100 --> 00:31:15.080
year developing the App Engine, ma-, man,
those really stung and they were really hard

00:31:15.080 --> 00:31:25.830
to work with whether it was ICP requests or
hitting quotas too soon or those sort of things.

00:31:25.830 --> 00:31:36.410
And I hope you've seen, we've worked really
hard to clear those up and if you look at

00:31:36.410 --> 00:31:43.750
our roadmap to the platform, we're working
really hard to clear out the rest of them,

00:31:43.750 --> 00:31:44.750
too.

00:31:44.750 --> 00:31:45.750
We knew those were gonna be bad.

00:31:45.750 --> 00:31:52.590
I don't think it was apparent, at least to
me, just how bad some of those were.

00:31:52.590 --> 00:31:59.320
So, we're trying to do everything we can to
make it better.

00:31:59.320 --> 00:32:00.320
[pause]

00:32:00.320 --> 00:32:01.320
[door squeak]

00:32:01.320 --> 00:32:12.830
&gt;&gt;Brett: I guess the biggest thing I've learned
is the ridiculously crazy things you can build

00:32:12.830 --> 00:32:21.540
with various, small amounts of tools.

00:32:21.540 --> 00:32:28.490
Basically, I can use memcache to do almost
anything now I feel like.

00:32:28.490 --> 00:32:30.090
[audience member laughs]

00:32:30.090 --> 00:32:35.020
You can come to my talk tomorrow; I'll tell
you about it.

00:32:35.020 --> 00:32:42.200
But, they're very small constructs – it
kind of goes along with what Alon was saying

00:32:42.200 --> 00:32:45.080
about having more buttons and knobs.

00:32:45.080 --> 00:32:54.740
There's a few very low-level constructs that
you can supply, like Task Queue, or a certain

00:32:54.740 --> 00:33:00.030
level of transactionality, or massively parallel
gets, or list properties that give you a huge

00:33:00.030 --> 00:33:04.760
amount of power with just some very small
tools.

00:33:04.760 --> 00:33:15.840
And you can combine them together to create
even more complicated constructs in user space.

00:33:15.840 --> 00:33:23.940
So, it's been really cool seeing what we can
build in user space, like Linux has futexes

00:33:23.940 --> 00:33:28.690
and we have all of our other crazy stuff that's
kind of like that.

00:33:28.690 --> 00:33:32.500
And we'll be showing a lot of it tomorrow
from some of the talks from me and Mike Aizatsky.

00:33:32.500 --> 00:33:35.040
So, you should come check those out.

00:33:35.040 --> 00:33:36.040
&gt;&gt;Sean: Yeah.

00:33:36.040 --> 00:33:41.040
The next one is, "App Engine for Business
will support as itself for custom, top-level,

00:33:41.040 --> 00:33:42.040
top-level domains.

00:33:42.040 --> 00:33:46.280
It seems primarily geared towards enterprise
applications. Will it be available for non-enterprise

00:33:46.280 --> 00:33:47.280
applications?

00:33:47.280 --> 00:33:48.280
Public."

00:33:48.280 --> 00:33:49.280
&gt;&gt;Kevin: Yes.

00:33:49.280 --> 00:33:50.780
[audience laughs]

00:33:50.780 --> 00:34:03.020
These features may be part of App Engine for
Business, but there will be a part about Engine

00:34:03.020 --> 00:34:09.530
for Business that you can use for your business
applications that are for inside your company,

00:34:09.530 --> 00:34:12.230
and for outside of your company.

00:34:12.230 --> 00:34:17.390
So, you'll be able to use these in the situations
that you need.

00:34:17.390 --> 00:34:19.980
The pricing for these features may be different
for you.

00:34:19.980 --> 00:34:29.780
All of that is still being developed.

00:34:29.780 --> 00:34:41.550
We don't have those things figured out, but
will you be able to use this to build the

00:34:41.550 --> 00:34:48.040
sort of apps that you want to do?

00:34:48.040 --> 00:34:49.040
Yes.

00:34:49.040 --> 00:34:50.040
[pause]

00:34:50.040 --> 00:34:54.190
&gt;&gt;Sean: Ok. Actually, let's grab another mic.

00:34:54.190 --> 00:35:03.180
&gt;&gt;audience4: Hi. My question is about the
best approach for delivering sort of real-time

00:35:03.180 --> 00:35:11.520
notifications to a Web application, especially
with new standards coming along, like WebSocket.

00:35:11.520 --> 00:35:15.020
I know that might be somewhat at odds with
the model of how App Engine works, where you

00:35:15.020 --> 00:35:19.150
can't have a socket open waiting for data
to flow.

00:35:19.150 --> 00:35:37.530
And I saw a demo this morning with some of
the new GWT Widgets, the data presentation

00:35:37.530 --> 00:35:48.540
widgets, and one thing I noticed that caught
my attention is they had sort of data pop-up

00:35:48.540 --> 00:35:52.200
sort of on demand and that was running on
App Engine.

00:35:52.200 --> 00:35:56.720
I wonder if you can talk about if there's
anything special going on there and how--

00:35:56.720 --> 00:35:57.720
&gt;&gt;Sean: Yeah, sure.

00:35:57.720 --> 00:35:59.760
&gt;&gt;audience4: and what's the best approach
to do that.

00:35:59.760 --> 00:36:02.380
&gt;&gt;Sean: Thanks for your question; I'm really
happy you asked that.

00:36:02.380 --> 00:36:06.090
I'll give you 5 dollars later.

00:36:06.090 --> 00:36:07.320
[audience laughs]

00:36:07.320 --> 00:36:14.500
&gt;&gt;Brett: So, tomorrow we have a session with
Brett Bavar and Moishe Lettvin on the App

00:36:14.500 --> 00:36:21.010
Engine channel API, which is commenter browser
push as an API, the, and it reuses a lot of

00:36:21.010 --> 00:36:29.280
the same structure we use at Google for long
polling or Comet in applications like Buzz

00:36:29.280 --> 00:36:30.370
and Gmail.

00:36:30.370 --> 00:36:44.540
And this is the idea of, with our XMPP API
you have a JID that you send messages to,

00:36:44.540 --> 00:36:57.620
you'll be able to have an addressable channel
that you can send messages to in a deferred

00:36:57.620 --> 00:37:04.450
manner, either during a request from a task
queue request, or however you want to address

00:37:04.450 --> 00:37:05.450
it.

00:37:05.450 --> 00:37:12.260
So, you can do all kinds of broadcast mechanisms
or direct messages between users and, basically,

00:37:12.260 --> 00:37:15.680
everything you can wanna do like that.

00:37:15.680 --> 00:37:33.190
The plan, so we're, so we're gonna be, we
talked about on the blog a little bit and

00:37:33.190 --> 00:37:43.260
it's gonna be atrust the tester thing at first,
but we're getting along, along with getting

00:37:43.260 --> 00:37:45.780
it out for everybody.

00:37:45.780 --> 00:37:59.800
And the plan is to get it implemented in such
a way that under the covers we could replace

00:37:59.800 --> 00:38:07.790
it with WebSockets, with absolutely no knowledge
from the application developer standpoint.

00:38:07.790 --> 00:38:15.080
So, once the browser is capable of doing WebSockets,
instead of long polling over some weird, bidirectional

00:38:15.080 --> 00:38:16.900
HTTP channel, it would just happen.

00:38:16.900 --> 00:38:19.010
So, that's yes, yes, yes, and yes.

00:38:19.010 --> 00:38:27.150
We're doing all those things and so you should
definitely come to Moishe's talk at 1 tomorrow

00:38:27.150 --> 00:38:34.950
and you can also, and their talk, and basically
everyone is showing this off because it's

00:38:34.950 --> 00:38:35.950
so great.

00:38:35.950 --> 00:38:36.980
We all want it.

00:38:36.980 --> 00:38:37.980
So, yes?

00:38:37.980 --> 00:38:38.980
[applause]

00:38:38.980 --> 00:38:41.760
&gt;&gt;Brett: Moishe's in the back if you want
to put his hand up.

00:38:41.760 --> 00:38:43.480
That's, he's your man -- don't hurt him.

00:38:43.480 --> 00:38:44.480
[audience chuckles]

00:38:44.480 --> 00:38:45.480
&gt;&gt;Dave: So, hi, I'm Dave Peck,

00:38:45.480 --> 00:38:46.480
I work with wallsquare.com.

00:38:46.480 --> 00:38:47.640
And we love the URL fetch API.

00:38:47.640 --> 00:38:51.610
We've been making heavy use of asynchronous
URL fetch but, unfortunately, it still doesn't

00:38:51.610 --> 00:38:55.370
go far enough for us in some cases.

00:38:55.370 --> 00:39:02.790
We run into the reality of systems that take
a very long time to respond, even with small

00:39:02.790 --> 00:39:04.090
amounts of data.

00:39:04.090 --> 00:39:10.330
So, we're wondering if you have plans to support
on your roadmap URL fetch with callba-, Webbook

00:39:10.330 --> 00:39:11.330
style callbacks.

00:39:11.330 --> 00:39:18.730
And sort of flip-side to that, URL fetch to
 -- directly to the Blobstore.

00:39:18.730 --> 00:39:19.730
[pause]

00:39:19.730 --> 00:39:20.730
&gt;&gt;Sean: Sure.

00:39:20.730 --> 00:39:26.970
So, the question was, do we ha-, are we planning
on support for URL fetch with some sort of

00:39:26.970 --> 00:39:27.970
asynchronous callback?

00:39:27.970 --> 00:39:28.970
&gt;&gt;Dave: Yes.

00:39:28.970 --> 00:39:34.340
&gt;&gt;Sean: After it's complete, for long running,
minute, hour, however long it runs.

00:39:34.340 --> 00:39:35.340
[pause]

00:39:35.340 --> 00:39:37.650
&gt;&gt;Kevin: It's definitely something that we
are interested in.

00:39:37.650 --> 00:39:46.110
We know it's an acute problem right now that
just doing URL fetch requests that go over

00:39:46.110 --> 00:39:54.340
ten seconds, which, I mean, to me it doesn't
seem quite like a good idea that web services

00:39:54.340 --> 00:39:59.620
often take longer than that, but the reality
is they do.

00:39:59.620 --> 00:40:06.450
And some of them, I've, I've seen some that
like, they're supposedly take 30 minutes,

00:40:06.450 --> 00:40:10.860
an hour, to return and that's a normal operation--

00:40:10.860 --> 00:40:11.860
&gt;&gt;Dave: But

00:40:11.860 --> 00:40:17.200
&gt;&gt;Kevin: which is unusual to me, but that's
how the way the world works.

00:40:17.200 --> 00:40:18.200
&gt;&gt;Dave: Unfortunately--

00:40:18.200 --> 00:40:25.640
&gt;&gt;Kevin: Both on the case of doing ones that
are just lon-, just a little bit longer, we

00:40:25.640 --> 00:40:31.940
just need a little bit more room to grow and
ones that are a lot longer.

00:40:31.940 --> 00:40:37.820
We're very aware of this, it's very much on
our mind and we're trying to do something

00:40:37.820 --> 00:40:38.820
about it.

00:40:38.820 --> 00:40:45.380
I think we might see some things in the sooner,
like the new return feature to help you get

00:40:45.380 --> 00:40:47.680
a little bit further--

00:40:47.680 --> 00:40:48.820
&gt;&gt;Dave: Okay.

00:40:48.820 --> 00:40:56.280
&gt;&gt;Kevin: help you get more into the 30 second,
minute sort of range.

00:40:56.280 --> 00:41:05.630
We also wanna do some stuff further out that
could allow it to be entirely indefinite for

00:41:05.630 --> 00:41:07.420
whatever you're doing.

00:41:07.420 --> 00:41:16.060
&gt;&gt;Dave: Right, and as far as URL fetching
directly to the Blobstore, is that something

00:41:16.060 --> 00:41:19.970
that's on your radar screen, too?

00:41:19.970 --> 00:41:25.300
We're talking the services that are handing
us data back that's in the dozens to hundreds

00:41:25.300 --> 00:41:26.330
of megabytes.

00:41:26.330 --> 00:41:33.540
&gt;&gt;Sean: So, you wanna URL fetch a blob out
of the Blobstore and keep it?

00:41:33.540 --> 00:41:39.140
&gt;&gt;Dave: No, I'd like to URL fetch, perform
a URL fetch to a remote service and have its

00:41:39.140 --> 00:41:42.320
results, assuming they're valid, end up directly
in the Blobstore.

00:41:42.320 --> 00:41:45.720
&gt;&gt;Sean: Interesting. Will we support URL fetch
with the results directly into the Blobstore?

00:41:45.720 --> 00:41:46.720
&gt;&gt;Dave: Yeah.

00:41:46.720 --> 00:41:47.720
[stage chatter]

00:41:47.720 --> 00:41:52.350
&gt;&gt;Brett: I mean, the, the gist of his answer
is that we're trying to figure out a way to

00:41:52.350 --> 00:41:53.780
pipe everything into everything else.

00:41:53.780 --> 00:41:54.780
&gt;&gt;Dave: Sure.

00:41:54.780 --> 00:41:55.780
[audience laughs]

00:41:55.780 --> 00:42:00.350
&gt;&gt;Brett: So, just take the combinatorial expansion,
every possible thing, yes we're trying to

00:42:00.350 --> 00:42:01.350
do that.

00:42:01.350 --> 00:42:02.350
&gt;&gt;Dave: Great.

00:42:02.350 --> 00:42:05.350
&gt;&gt;Brett: I know, we want to do that ‘cause
it's natural and makes sense.

00:42:05.350 --> 00:42:10.870
So, can I save the result of a Task-Queue-Task
in the Blob-, in the Blobstore?

00:42:10.870 --> 00:42:12.070
Same question, right?

00:42:12.070 --> 00:42:13.070
&gt;&gt;Dave: Right.

00:42:13.070 --> 00:42:19.650
&gt;&gt;Brett: So, yeah, we're totally aware and
so we have nothing to say yet, but we know.

00:42:19.650 --> 00:42:20.650
&gt;&gt;Dave: Great.

00:42:20.650 --> 00:42:21.650
Thanks.

00:42:21.650 --> 00:42:22.650
I won't ask about all the other permutations.

00:42:22.650 --> 00:42:23.650
[audience chuckles]

00:42:23.650 --> 00:42:24.650
[pause]

00:42:24.650 --> 00:42:25.650
&gt;&gt;Chris: Hi.

00:42:25.650 --> 00:42:28.950
Chris Handley, Space Telescope Science Institute.

00:42:28.950 --> 00:42:51.640
As a heavy user and sometimes committer to
Numpy, I was wondering what we could do to

00:42:51.640 --> 00:43:17.790
convince you to add it to the list of acceptable
Python libraries that we could use.

00:43:17.790 --> 00:43:23.930
&gt;&gt;Sean: The question was, "Can we support
Numpy?"

00:43:23.930 --> 00:43:27.540
&gt;&gt;Kevin: You know we get that question from
time to time.

00:43:27.540 --> 00:43:28.540
We would like to.

00:43:28.540 --> 00:43:33.610
It is difficult for us to support each one
of those libraries so it comes along like

00:43:33.610 --> 00:43:34.610
that.

00:43:34.610 --> 00:43:37.990
So, we don't have any plans at the moment
right now.

00:43:37.990 --> 00:43:46.010
But, it's something that we need to hear more
from you guys so that we can find ways to

00:43:46.010 --> 00:43:51.240
either get libraries like that working for
you, or to do something that allows you to

00:43:51.240 --> 00:43:56.160
work around it; to give you another way to
achieve the same thing.

00:43:56.160 --> 00:44:02.770
But, I know how popular Numpy is in the scientific
community and a lot of things that are going

00:44:02.770 --> 00:44:03.770
on there.

00:44:03.770 --> 00:44:06.520
And so, I think it's some-, it's something
that we need to hear more often.

00:44:06.520 --> 00:44:16.710
So, the reality of, of the matter is that
things get done by engineering teams when,

00:44:16.710 --> 00:44:24.870
when we're made aware of how important this
is to you and how acute it is.

00:44:24.870 --> 00:44:26.990
So, please keep, keep asking.

00:44:26.990 --> 00:44:31.651
I've heard it from you, and try to, try to
get us hearing more about that library and

00:44:31.651 --> 00:44:34.260
others so we can get it together for you.

00:44:34.260 --> 00:44:40.910
&gt;&gt;Chris: Well, I was gonna say, it's pretty
much critical to any of the scientific community

00:44:40.910 --> 00:44:45.930
that, and we're resistant to work at getting
it into the core.

00:44:45.930 --> 00:44:54.740
And I mean, we've, Guido has come out and
said that he doesn't even think it should

00:44:54.740 --> 00:45:04.600
be in the core just because of the, the development
time frame of Numpy versus the core libraries

00:45:04.600 --> 00:45:05.730
for Python.

00:45:05.730 --> 00:45:14.930
So, I guess I'll just advocate for it being
added and tell all my friends to say, "Me,

00:45:14.930 --> 00:45:17.450
too" on the plug list.

00:45:17.450 --> 00:45:18.450
[pause]

00:45:18.450 --> 00:45:20.480
&gt;&gt;Guido: We certainly hear you.

00:45:20.480 --> 00:45:21.490
[audience laughs]

00:45:21.490 --> 00:45:24.560
&gt;&gt;audience6: This question is on 2 best practices
that you recommend.

00:45:24.560 --> 00:45:29.140
One, one the denormalization portion, where
you recommend--

00:45:29.140 --> 00:45:30.180
&gt;&gt;Brett: [inaudible]

00:45:30.180 --> 00:45:31.750
&gt;&gt;Sean: Yeah, sorry.

00:45:31.750 --> 00:45:43.550
&gt;&gt;audience6: Two best practices that you recommend,
one on the denormalized key mine in bit table

00:45:43.550 --> 00:45:49.910
and the other one is read performance better
than write performance?

00:45:49.910 --> 00:45:53.940
Recommending more of reads rather than writes,
but, but I think the reality is when you have

00:45:53.940 --> 00:45:59.540
a denormalized key mine, you repeat the data
and therefore, when one, when one entity changes,

00:45:59.540 --> 00:46:02.520
you pretty much change the data in multiple
entities.

00:46:02.520 --> 00:46:05.500
Which essentially means you'll have to write
more.

00:46:05.500 --> 00:46:11.850
So, how do you deal with this conflict when,
when you, when you build real world applications?

00:46:11.850 --> 00:46:16.310
&gt;&gt;Sean: So, let me see if I heard the question
right.

00:46:16.310 --> 00:46:18.450
It was the best practices around eNom based
data?

00:46:18.450 --> 00:46:19.790
&gt;&gt;audience6: de-, de-, denormalized data.

00:46:19.790 --> 00:46:22.320
&gt;&gt;Sean: Denormalized data and, and I missed
the first part.

00:46:22.320 --> 00:46:23.620
&gt;&gt;audience6: So, that's one.

00:46:23.620 --> 00:46:26.860
The second one being write performance being
slower than read.

00:46:26.860 --> 00:46:27.860
So-

00:46:27.860 --> 00:46:32.080
&gt;&gt;Sean: And, and, and how to handle that when
your application is just realistically more

00:46:32.080 --> 00:46:33.080
write-focused?

00:46:33.080 --> 00:46:35.500
&gt;&gt;audience6: And not just that.

00:46:35.500 --> 00:46:40.040
In a normal application, if your application
becomes more and more denormalized, --

00:46:40.040 --> 00:46:41.170
&gt;&gt;Sean: I see.

00:46:41.170 --> 00:46:46.470
&gt;&gt;audience6: then one, when one entity changes,
you essentially have to change in multiple

00:46:46.470 --> 00:46:48.900
entities and therefore, you're essentially
increasing the number of writes.

00:46:48.900 --> 00:46:49.900
&gt;&gt;Sean: Right.

00:46:49.900 --> 00:46:51.670
So, the, the question is what are the best
practices around denormalized data and because

00:46:51.670 --> 00:46:56.091
we're recommending denormalized, that causes
more writes, that's sort of in conflict with

00:46:56.091 --> 00:46:59.250
our reads are better performance than writes.

00:46:59.250 --> 00:47:01.960
What do you have to say?

00:47:01.960 --> 00:47:09.770
&gt;&gt;Max: [laughs] So, it's a, it's a, it's a
tough spot if you want to, the more ways you

00:47:09.770 --> 00:47:16.280
want to query your data, then the more ways
that you're gonna need to duplicate that data,

00:47:16.280 --> 00:47:22.090
whether you're using our built-in indexes
in order to be able to get those scans or

00:47:22.090 --> 00:47:23.910
whether you're building your own.

00:47:23.910 --> 00:47:29.300
The denormalized data are basically you're
building indexes that you can scan yourself.

00:47:29.300 --> 00:47:41.230
So, the more ways that you wanna slice and
dice your data, the more expensive your writes

00:47:41.230 --> 00:47:43.660
are gonna become because that's more stuff
to maintain.

00:47:43.660 --> 00:47:52.210
That's the trade off. I don't have any; I
don't have any magic for you with the Datastore,

00:47:52.210 --> 00:47:53.210
right?

00:47:53.210 --> 00:47:57.940
If you really need really, really flexible
querying, then you're probably looking forward

00:47:57.940 --> 00:47:59.580
to our Sequel offering.

00:47:59.580 --> 00:48:06.680
Alfred is, in his talk tomorrow, is gonna
show you ways that we are planning to make

00:48:06.680 --> 00:48:07.850
querying on the Datastore much, much, much
better.

00:48:07.850 --> 00:48:08.850
It's gonna reduce the number of indexes.

00:48:08.850 --> 00:48:10.700
I don't wanna, I don't wanna spoil anything
but if you're--

00:48:10.700 --> 00:48:11.700
[audience chuckles]

00:48:11.700 --> 00:48:12.700
&gt;&gt;Max: you, you need to be at his talk. Ok?

00:48:12.700 --> 00:48:13.700
[audience chuckles]

00:48:13.700 --> 00:48:14.700
&gt;&gt;Alfred: It's the last one tomorrow.

00:48:14.700 --> 00:48:15.700
&gt;&gt;Max: But, it's the last talk tomorrow.

00:48:15.700 --> 00:48:16.700
&gt;&gt;audience6: But, is, it--

00:48:16.700 --> 00:48:18.650
&gt;&gt;Max: You should definitely come to his talk
tomorrow.

00:48:18.650 --> 00:48:20.210
He's gonna, he's gonna shatter myths.

00:48:20.210 --> 00:48:21.210
&gt;&gt;audience6: Ok.

00:48:21.210 --> 00:48:22.210
[laughter]

00:48:22.210 --> 00:48:24.650
&gt;&gt;Max: But the, the thing that you're running
up against is, is, is a fundamental limitation

00:48:24.650 --> 00:48:29.070
of the guarantees that we give you with the
datastore, which is that we're not gonna pull

00:48:29.070 --> 00:48:33.300
entire results that's in the memory, we're
not gonna do joins in memory.

00:48:33.300 --> 00:48:38.830
There needs to be an efficient scan and in
order to line up those efficient scans, somebody

00:48:38.830 --> 00:48:40.540
has to write the data.

00:48:40.540 --> 00:48:44.390
And it's either going to be us on your behalf
through composite indexes or it's gonna be

00:48:44.390 --> 00:48:46.000
you writing the data yourself when you're
denormalizing.

00:48:46.000 --> 00:48:47.000
[pause]

00:48:47.000 --> 00:48:51.690
&gt;&gt;Toby: I'm not a Datastore expert like Max,
but I was just gonna say quickly, that still

00:48:51.690 --> 00:48:55.360
the number of reads compared to the number
of writes are like, usually, typically, order

00:48:55.360 --> 00:48:59.900
of magnitude, like a thou-, several orders
of magnitude, like a thousand times or something.

00:48:59.900 --> 00:49:05.800
And you can, and you can do your writes off
in like, task queues or things like, things

00:49:05.800 --> 00:49:06.850
asynchronously or whatever.

00:49:06.850 --> 00:49:09.330
And, whereas, like your reads, are often pretty
much a blocking in requests and whatnot.

00:49:09.330 --> 00:49:13.910
So, usually still, you can optimize for your
reads and have your reads be very fast and

00:49:13.910 --> 00:49:16.830
have your writes take longer, but off asynchronously.

00:49:16.830 --> 00:49:17.830
[pause]

00:49:17.830 --> 00:49:21.430
&gt;&gt;Sean: The next one is, "Can you guys talk
about what you learned from the downtime in

00:49:21.430 --> 00:49:26.330
February? It was impressively handled."

00:49:26.330 --> 00:49:28.290
Thank you.

00:49:28.290 --> 00:49:36.130
"And would like some insight from your experience."

00:49:36.130 --> 00:49:37.130
[pause]

00:49:37.130 --> 00:49:39.070
Yeah, yeah.

00:49:39.070 --> 00:49:42.010
&gt;&gt;Kevin: What was?

00:49:42.010 --> 00:49:49.610
&gt;&gt;Sean: What did we learn from the downtime
in February?

00:49:49.610 --> 00:49:52.330
&gt;&gt;Kevin: That's a good question.

00:49:52.330 --> 00:50:16.820
I think, if you look at the post mortems that
we published, I hope they give you a hint

00:50:16.820 --> 00:50:25.650
as the sort of stuff that we've learned from
that.

00:50:25.650 --> 00:50:36.550
I think that's probably the best thing that
I can say.

00:50:36.550 --> 00:50:42.060
There's, there's a lot in all of them.

00:50:42.060 --> 00:51:00.910
And we, I think eat and breathe them so much
that it's, it's hard for me to suss them all

00:51:00.910 --> 00:51:01.910
apart.

00:51:01.910 --> 00:51:13.720
I think that one thing we have learned in
general, from a lot of these things are that

00:51:13.720 --> 00:51:18.680
the more prepared we can be for however esoteric
a situation, the better we can build tools,

00:51:18.680 --> 00:51:22.420
the better we can do everything.

00:51:22.420 --> 00:51:27.610
It's something that always helps people who
administer systems, so, we're, we work on

00:51:27.610 --> 00:51:33.860
that hard for preparedness, various disasters,
doing drills, simulating failures, a lot of

00:51:33.860 --> 00:51:34.860
that.

00:51:34.860 --> 00:51:40.460
I know Alfred was working on some of that
stuff earlier this week.

00:51:40.460 --> 00:51:44.420
So, may-, that's one lesson that comes to
mind.

00:51:44.420 --> 00:51:49.540
Anybody else wanna throw in something?

00:51:49.540 --> 00:51:51.530
I, I would suggest, if you haven't already,
reading our post mortems.

00:51:51.530 --> 00:51:54.040
We really try to share this with you so you
can see what it's like for us and how we're

00:51:54.040 --> 00:51:55.080
trying to do that.

00:51:55.080 --> 00:51:56.080
[pause]

00:51:56.080 --> 00:51:57.080
Yeah, another question?

00:51:57.080 --> 00:52:01.960
&gt;&gt;audience7: Hi, my company is just about
to embark on moving some applications to Google

00:52:01.960 --> 00:52:09.610
Apps, and running them in parallel in fact
with our existing ones.

00:52:09.610 --> 00:52:17.330
We have a fairly large number of rather hairy
Lotus Notes applications that we've been developing

00:52:17.330 --> 00:52:18.710
for some time.

00:52:18.710 --> 00:52:25.680
Now, so there are a couple of issues that
come up from that.

00:52:25.680 --> 00:52:30.990
The first is, have you guys had an experience
with complicated app migration from Notes

00:52:30.990 --> 00:52:38.790
or perhaps anyone else in the room who may
have some tools that we can use without having

00:52:38.790 --> 00:52:39.870
to build ourselves?

00:52:39.870 --> 00:52:48.880
And, if I can cram in a second part -- I hope
it's not divisive, my developers seem to think

00:52:48.880 --> 00:52:53.369
they want to program in, in Java.

00:52:53.369 --> 00:53:02.690
I, on the other hand, prefer the concision
and elegance of Python and I was wondering

00:53:02.690 --> 00:53:09.090
if maybe there's at least one person on the
panel who might be willing to express some,

00:53:09.090 --> 00:53:14.730
some views as to why Python might, might be
superior.

00:53:14.730 --> 00:53:16.150
[audience laughs and claps]

00:53:16.150 --> 00:53:18.030
&gt;&gt;Sean: So, let's tackle your first one.

00:53:18.030 --> 00:53:19.030
[audience laughs]

00:53:19.030 --> 00:53:20.530
Advice on migration from Lotus Notes applications.

00:53:20.530 --> 00:53:21.530
Do we have any?

00:53:21.530 --> 00:53:22.530
Yes.

00:53:22.530 --> 00:53:23.530
&gt;&gt;Kevin: Oh, I don't know.

00:53:23.530 --> 00:53:26.330
A part of the, I guess the interesting part
of our job is we don't know what apps most

00:53:26.330 --> 00:53:27.330
of you guys have written about here.

00:53:27.330 --> 00:53:29.060
The way we find out about apps are people
post in the groups, they tell us about it,

00:53:29.060 --> 00:53:33.010
we hear from someone, a partner contacts us.

00:53:33.010 --> 00:53:37.610
Occasionally we see apps if there's a, a problem
and we're helping someone with that.

00:53:37.610 --> 00:53:43.490
So, I don't know, I mean, out of all the ones
that work I bet there have been some people,

00:53:43.490 --> 00:53:45.810
but I don't really have a lot of data on it.

00:53:45.810 --> 00:53:46.810
So--

00:53:46.810 --> 00:53:51.920
&gt;&gt;Sean: Just out of curiosity, how many of
you in the crowd are dealing with Lotus Notes

00:53:51.920 --> 00:53:54.440
applications that you really want to get rid
of?

00:53:54.440 --> 00:53:55.700
Ok, so, a few of you.

00:53:55.700 --> 00:53:56.700
All right.

00:53:56.700 --> 00:53:57.700
And then the second question.

00:53:57.700 --> 00:53:58.700
Oh, ok.

00:53:58.700 --> 00:54:02.110
&gt;&gt;Brett: So, I know that they've done, I think
the Gmail guys have done some stuff with pulling

00:54:02.110 --> 00:54:03.610
data out of Domino.

00:54:03.610 --> 00:54:09.270
So, maybe you could track down a Gmail guy
and ask him what they've got.

00:54:09.270 --> 00:54:18.540
Maybe they've got a parser in API or something
to just migrate data in and out of the, the

00:54:18.540 --> 00:54:19.869
Domino server.

00:54:19.869 --> 00:54:26.810
&gt;&gt;audience7: It's, it's not so much the data;
we can write that piece.

00:54:26.810 --> 00:54:30.790
It's a, a somewhat painless migration of the
applications themselves--

00:54:30.790 --> 00:54:32.850
&gt;&gt;Brett: Yeah, yeah, ok.

00:54:32.850 --> 00:54:33.850
I don't have the answer to that.

00:54:33.850 --> 00:54:35.870
[audience laughs and claps]

00:54:35.870 --> 00:54:39.070
&gt;&gt;Guido: Rewrite the applications in Python.

00:54:39.070 --> 00:54:40.140
[audience laughs]

00:54:40.140 --> 00:54:42.400
I was actually gonna refer to Brett because
he wrote one of the fastest applications,

00:54:42.400 --> 00:54:46.960
one of the most popular applications that
currently runs on App Engine, with the unpronounceable

00:54:46.960 --> 00:54:49.530
name "PubSubHubbub" and guess which language
he used?

00:54:49.530 --> 00:54:51.230
&gt;&gt;Brett: Yeah, I used Python.

00:54:51.230 --> 00:54:53.131
I like, I like Python a lot.

00:54:53.131 --> 00:55:01.770
I mean, Java people swear by Java, and I understand
the, why people write in Java.

00:55:01.770 --> 00:55:07.930
Personally, I really like Python because it's
so brief and I write almost all my apps on

00:55:07.930 --> 00:55:19.730
App Engine in Python, and I really try to
write my example code for talks in Java, but

00:55:19.730 --> 00:55:26.170
then it doesn't fit on the slide and so--

00:55:26.170 --> 00:55:27.600
[audience laughs]

00:55:27.600 --> 00:55:34.430
and so, this talk this time, I really made
sure that you could implement everything in

00:55:34.430 --> 00:55:38.660
Java if you wanted to, so there's no extra
missing bit.

00:55:38.660 --> 00:55:44.950
But, but yeah, just, I still, I just, I can't,
I can't do it, now whereas Max--

00:55:44.950 --> 00:55:45.950
[audience chuckles]

00:55:45.950 --> 00:55:46.950
breathes Java all the time.

00:55:46.950 --> 00:55:47.950
I think Don does, too.

00:55:47.950 --> 00:55:48.950
I think Toby, also.

00:55:48.950 --> 00:55:49.950
But, yeah, we got at least two advocates on
the team for Python.

00:55:49.950 --> 00:55:50.950
&gt;&gt;audience7: Thank you.

00:55:50.950 --> 00:55:51.950
&gt;&gt;Max: We all, we all get along really nicely.

00:55:51.950 --> 00:55:52.950
[audience laughs]

00:55:52.950 --> 00:55:53.950
It's kind of boring, actually.

00:55:53.950 --> 00:55:54.950
&gt;&gt;Sean: Go ahead.

00:55:54.950 --> 00:55:55.950
&gt;&gt;Mike: Hi, Mike Koss from a Seattle start-up,
called StartPad.

00:55:55.950 --> 00:55:56.950
I have just, wonder if you could rate yourselves
on your overall service reliability over the

00:55:56.950 --> 00:55:57.950
last year and I think when I, when I was very
eagerly one of your first adopters after the

00:55:57.950 --> 00:55:58.950
first Campfire and, after the first year we
very much understood like, this is a Beta

00:55:58.950 --> 00:56:02.520
program and scheduled maintenance outages,
and, and long query times and things like

00:56:02.520 --> 00:56:03.520
that that occasionally popped up were kind
of expected.

00:56:03.520 --> 00:56:04.520
But, I, I think I've been, I think when I've
been recommending App Engine to other people,

00:56:04.520 --> 00:56:05.520
I love every aspect of it except I do have
to qualify I think when I, when I talk to

00:56:05.520 --> 00:56:06.520
people, I say, "You know what? It's kind of
still feels a little Beta. It still feels

00:56:06.520 --> 00:56:07.520
like it's not gonna be as reliable as you
might need for your application."

00:56:07.520 --> 00:56:08.520
I'd, I'd like to bet-, to be someday not have
to be a qualified answer.

00:56:08.520 --> 00:56:09.520
&gt;&gt;Sean: So, I think the question was, can
we give a rating of how our reliability has

00:56:09.520 --> 00:56:10.520
been over the last, say, year?

00:56:10.520 --> 00:56:11.520
And probably, as well, what are we doing to
address that?

00:56:11.520 --> 00:56:12.520
&gt;&gt;Kevin: Well, that's a tough one.

00:56:12.520 --> 00:56:13.520
I mean, a rating, I don't know how we would,
what we would say.

00:56:13.520 --> 00:56:14.520
But, I guess the things that come to mind
for me are one, please bear with us.

00:56:14.520 --> 00:56:15.520
These things, the first year as, like I heard
from you it was understandable.

00:56:15.520 --> 00:56:16.520
Well, the second year we've grown a lot more.

00:56:16.520 --> 00:56:17.520
So, it's, there's a lot for us to do and we
are trying our very best and we're, we're

00:56:17.520 --> 00:56:18.520
all professionals here and, and we're trying
to do the best that we can about it.

00:56:18.520 --> 00:56:19.520
With that said, I'm actually pretty proud
of our reliability.

00:56:19.520 --> 00:56:20.520
It's terrible and it's hard raining for all
of us.

00:56:20.520 --> 00:56:21.520
So, as you guys as users, and us as the people
who run the system, when we have an outage

00:56:21.520 --> 00:56:22.520
and we have a problem, when you compare to
the typical things you might encounter in

00:56:22.520 --> 00:56:23.520
standard hosting environments, I'm not sure
that we're all that much worse, if worse.

00:56:23.520 --> 00:56:27.770
It's hard to say because there are no central
statistics collected on a dis-, dis-, distribution

00:56:27.770 --> 00:56:28.990
of apps, right?

00:56:28.990 --> 00:56:31.290
Let's say I was to take like a hundred thousand
apps used every week, out of the random cross

00:56:31.290 --> 00:56:32.290
section in the Internet, how often do they
have errors, how often do they have problems?

00:56:32.290 --> 00:56:35.830
How would we compare? I can't calculate that
number and I can't tell you so you can each

00:56:35.830 --> 00:56:38.570
only reach your own conclusions.

00:56:38.570 --> 00:56:48.590
So, it, sometimes part of the problem might
be that you see them a lot more with App Engine.

00:56:48.590 --> 00:56:51.670
I, because we're under scrutiny. Google's
a big company, so you know about it, you can

00:56:51.670 --> 00:56:52.670
read about it.

00:56:52.670 --> 00:56:53.670
And, of course, I'm happy about that.

00:56:53.670 --> 00:56:54.670
I, I partly don't like it, but I'm also happy
about it because I want to be honest, I want

00:56:54.670 --> 00:56:55.670
to be transparent, so you guys know what's
going on.

00:56:55.670 --> 00:56:56.670
But with other things, other systems, other
sites, smaller sites, other smaller hosting

00:56:56.670 --> 00:56:57.670
providers, you might not know as much either.
So--

00:56:57.670 --> 00:56:58.670
&gt;&gt;audience8: [inaudible]

00:56:58.670 --> 00:56:59.670
&gt;&gt;Sean: How would you compare App Engine to
the search site or Gmail?

00:56:59.670 --> 00:57:00.670
&gt;&gt;Kevin: Well, it's different than the search
site, I can tell you that.

00:57:00.670 --> 00:57:01.670
[audience laughs]

00:57:01.670 --> 00:57:02.670
I-, there are, there are big, different, I'm
sorry.

00:57:02.670 --> 00:57:04.460
Big, order of magnitude scale differences
between the world's biggest Web product, right?

00:57:04.460 --> 00:57:06.030
And what we're doing here with App Engine.

00:57:06.030 --> 00:57:07.900
So, some of those things are different.

00:57:07.900 --> 00:57:12.750
Of course, fundamentally, the problem that
we're trying to solve is a bit different,

00:57:12.750 --> 00:57:13.750
too.

00:57:13.750 --> 00:57:15.430
WebSearch is a single very, very tuned product.

00:57:15.430 --> 00:57:18.240
A lot of us, in various forms, have contributed
to WebSearch before we worked on App Engine.

00:57:18.240 --> 00:57:19.240
And when you're doing a very specific thing,
there's a lot of things that you can do to

00:57:19.240 --> 00:57:20.240
sort of boost the reliability to make it better
that may be domain specific.

00:57:20.240 --> 00:57:21.240
Nothing that we can do in App Engine is necessarily
domain specific.

00:57:21.240 --> 00:57:22.240
We try to get you guys the tools to do that,
but I completely understand that it's hard

00:57:22.240 --> 00:57:23.240
to spend a lot of engineering time on a tool
that'll help you for I, one-tenth of a percent

00:57:23.240 --> 00:57:24.240
of the time that your app runs to handle those
situations. We do things like that for WebSearch,

00:57:24.240 --> 00:57:25.240
though.

00:57:25.240 --> 00:57:26.240
So, for instance, you guys know about the
capabilities API, or read-only periods, you

00:57:26.240 --> 00:57:27.240
know about that.

00:57:27.240 --> 00:57:28.240
We might have more things like that in the
future but I know it can be a lot of work

00:57:28.240 --> 00:57:29.240
to add that functionality to your app to work
in those settings.

00:57:29.240 --> 00:57:30.240
So, I'd say that might be something to compare
with, too.

00:57:30.240 --> 00:57:31.240
We don't code your app; we can only host it.

00:57:31.240 --> 00:57:32.240
So, some of those other features, we are not
in as much control as a single vertical.

00:57:32.240 --> 00:57:33.240
&gt;&gt;audience8: [inaudible]

00:57:33.240 --> 00:57:34.240
&gt;&gt;Kevin: I, well, I, I, I don't mean to be
rude but I just see all the other questions

00:57:34.240 --> 00:57:35.240
coming, so I hate to see someone get interrupted.

00:57:35.240 --> 00:57:36.240
&gt;&gt;audience9: [inaudible]

00:57:36.240 --> 00:57:37.240
&gt;&gt;Max: Thank you.

00:57:37.240 --> 00:57:38.240
&gt;&gt;Alon: Thanks.

00:57:38.240 --> 00:57:39.240
&gt;&gt;Sean: I'm just gonna grab a question off
the Moderator and then we'll get you--

00:57:39.240 --> 00:57:40.240
&gt;&gt;audiencemember: You should.

00:57:40.240 --> 00:57:41.240
You should.

00:57:41.240 --> 00:57:42.240
&gt;&gt;Sean: So, with the new pricing model what
are, let me see here, what are the approximate

00:57:42.240 --> 00:57:43.240
limits on monthly bandwidth and storage?

00:57:43.240 --> 00:57:44.240
And they give an example, "Can I upload five
terabytes on my data domain?"

00:57:44.240 --> 00:57:45.240
&gt;&gt;Kevin: Sure.

00:57:45.240 --> 00:57:46.240
So, you can read a lot more about this online.

00:57:46.240 --> 00:57:47.240
There is a site published and hopefully it
has a lot of good answers to your questions.

00:57:47.240 --> 00:57:48.240
To sort of piece apart your question a little
bit, you mentioned the limits on usage and

00:57:48.240 --> 00:57:49.240
then you mentioned storage, I believe.

00:57:49.240 --> 00:57:50.240
Storage is separate and so all of this is
still coming together now.

00:57:50.240 --> 00:57:51.240
But when, when I spoke today about unlimited
and when we talk about that through usage,

00:57:51.240 --> 00:57:52.240
what we're generally talk about is your online
usage.

00:57:52.240 --> 00:57:53.240
Things, since many of you are very familiar
App Engine developers, things like your CPU

00:57:53.240 --> 00:57:54.240
time and the bandwidth used, storage is a
separate resource.

00:57:54.240 --> 00:57:55.240
We're still hammering out the details on exactly
how that will work, but it is not something

00:57:55.240 --> 00:57:56.240
that we anticipate to be fully unlimited because
it, it just functions a little bit differently

00:57:56.240 --> 00:57:57.240
in that setting.

00:57:57.240 --> 00:57:58.240
&gt;&gt;Sean: Cool.

00:57:58.240 --> 00:57:59.240
Go ahead.

00:57:59.240 --> 00:58:00.240
&gt;&gt;Max: Oh, I'm Max.

00:58:00.240 --> 00:58:01.240
So, it's somewhat related to the question
before this question, and it's, it's sort

00:58:01.240 --> 00:58:02.240
of made-up question.

00:58:02.240 --> 00:58:03.240
In, in, bear with me.

00:58:03.240 --> 00:58:04.240
So, in, you, you guys are famous for dogfooding,
what this were, inventing this word for coining

00:58:04.240 --> 00:58:05.240
it.

00:58:05.240 --> 00:58:06.240
And it seems to me that App Engine is not
being dogfooded to the extent that, like for

00:58:06.240 --> 00:58:07.240
instance, what you were saying before that
Gmail is sort of independent, I don't know

00:58:07.240 --> 00:58:08.240
if it's running on App Engine, or if you want
to admit that or not admit that.

00:58:08.240 --> 00:58:09.240
And it seemed that it's a lot of good frameworks
that, or, or systems are extracted based on

00:58:09.240 --> 00:58:10.240
usage that you've had and then you realize
that it’s important maybe to generalize

00:58:10.240 --> 00:58:11.240
a little bit.

00:58:11.240 --> 00:58:12.240
And I thought you were doing this with App
Engine.

00:58:12.240 --> 00:58:13.240
But, from the struggle from last year and
all the issues that you're finding, and all

00:58:13.240 --> 00:58:14.240
the missteps and so on, I have a feeling that
maybe that's not what's happening, it's a

00:58:14.240 --> 00:58:15.240
new product you're inventing, which is cool;
nothing wrong with that, but its, it, it creates

00:58:15.240 --> 00:58:16.240
a whole set of issues because you'll make
missteps and you'll have to backtrace and

00:58:16.240 --> 00:58:17.240
so on.

00:58:17.240 --> 00:58:18.240
Am I, am I correct in saying this, or, or
am I wrong?

00:58:18.240 --> 00:58:19.240
&gt;&gt;Sean: The question is, is Google being dogfooding
Google App Engine, essentially.

00:58:19.240 --> 00:58:20.240
&gt;&gt;Max: And it, was it extracted, also? Was
it, was it something that was internally being

00:58:20.240 --> 00:58:21.240
used, like for instance, Amazon, a lot of
their web service products were being used

00:58:21.240 --> 00:58:22.240
internally, and then they exposed them.

00:58:22.240 --> 00:58:23.240
&gt;&gt;Sean: Did, did App Engine, as a service,
come up organically or was it put together

00:58:23.240 --> 00:58:24.240
as a separate service?

00:58:24.240 --> 00:58:25.240
&gt;&gt;Kevin: Oh, well that's a fun background
question.

00:58:25.240 --> 00:58:26.240
The App Engine service, the original project
came together organically.

00:58:26.240 --> 00:58:27.240
There were some of us who worked at Google,
some of us who knew each other, some we had

00:58:27.240 --> 00:58:28.240
a shared interest.

00:58:28.240 --> 00:58:29.240
And we were interested in doing what App Engine
is, basically what you saw when it initially

00:58:29.240 --> 00:58:30.240
launched.

00:58:30.240 --> 00:58:31.240
So, we got together and sort of put it together
ourselves, started working on it and until,

00:58:31.240 --> 00:58:32.240
and much later it, it was an actual product
and it launched.

00:58:32.240 --> 00:58:33.240
And I think that's something really great
about Google.

00:58:33.240 --> 00:58:34.240
Google really, I, I've been at Google for
a long time now.

00:58:34.240 --> 00:58:35.240
It combines what I think in some cases, is
the best of both worlds in terms of top-down

00:58:35.240 --> 00:58:36.240
and bottom-up.

00:58:36.240 --> 00:58:37.240
So, there are a lot of great ideas that just
filter up from engineers who think of them

00:58:37.240 --> 00:58:38.240
and what they want to do, and a great culture
saying, "Hey, well, you got an idea, make

00:58:38.240 --> 00:58:39.240
a prototype."

00:58:39.240 --> 00:58:40.240
If people like your prototype, you run with
it.

00:58:40.240 --> 00:58:41.240
But there's also some things where we try
to from the top down say, "Hey, this seems

00:58:41.240 --> 00:58:42.240
like an important space to be in and an important
thing to do."

00:58:42.240 --> 00:58:43.240
So, I think App Engine though, when it got
started, it was one of the first ones.

00:58:43.240 --> 00:58:44.240
&gt;&gt;Brett: I, I think also that it, it codifies
a lot of the internal best practices that

00:58:44.240 --> 00:58:45.240
Googlers, like Kevin, who've been at the company
for a long time and, and a lot of our other

00:58:45.240 --> 00:58:46.240
infrastructure engineers.

00:58:46.240 --> 00:58:47.240
The best practices that they've gained over
time, we’ve taken those and applied them

00:58:47.240 --> 00:58:48.240
to the infrastructure and then, now there's
a lot of internal apps and even external products

00:58:48.240 --> 00:58:49.240
like Google Moderator and Fast Flip and PubSubHubbub
and more, that are being built on top of App

00:58:49.240 --> 00:58:50.240
Engine by Googlers as Google products.

00:58:50.240 --> 00:58:51.240
So, it’s, it's basically its like, it's
not just an extraction, like you were saying,

00:58:51.240 --> 00:58:52.240
but it was extracting a, a set of best practices.

00:58:52.240 --> 00:58:53.240
&gt;&gt;Max: But why is it so bad and Gmail is so
great?

00:58:53.240 --> 00:58:54.240
[audience laughs]

00:58:54.240 --> 00:58:55.240
I mean, I hate to say it that way, but it
seems like Gmail fails every now and then

00:58:55.240 --> 00:58:56.240
but there's so many people using Gmail.

00:58:56.240 --> 00:58:57.240
I love it, right?

00:58:57.240 --> 00:58:58.240
But App Engine, I, I can't say that.

00:58:58.240 --> 00:58:59.240
And I know it's a different thing, but if
I ran Gmail on top of App Engine, I imagine

00:58:59.240 --> 00:59:00.240
it would fail also.

00:59:00.240 --> 00:59:01.240
&gt;&gt;Brett: So that's a really difficult question,
like the way to phrase it.

00:59:01.240 --> 00:59:02.240
I mean, I think that we do share a lot of
the same backend infrastructure, the same

00:59:02.240 --> 00:59:03.240
datacenters, the same network infrastructure,
so a lot of the benefits, you know, it's a

00:59:03.240 --> 00:59:04.240
big table and so like, a lot us we share a
lot of the same infrastructure.

00:59:04.240 --> 00:59:05.240
So, a lot of the benefits you see in the speed
and scalability and distribution and isolation

00:59:05.240 --> 00:59:06.240
of the problems and stuff like that, we get
kind of the same benefits.

00:59:06.240 --> 00:59:07.240
Where you see some of the other kind of issues,
was what Kevin was getting back to which is

00:59:07.240 --> 00:59:08.240
if you have a single vertical product, you
can really focus on a lot of tricks to make

00:59:08.240 --> 00:59:09.240
sure that it has a higher level of reliability.

00:59:09.240 --> 00:59:10.240
And so with App Engine, we have this, this
difficulty of saying, "We need to let you

00:59:10.240 --> 00:59:11.240
do anything but also provide you with reliability."

00:59:11.240 --> 00:59:12.240
And that's, it's the same trade-off where
it's not, it's not perfect, right?

00:59:12.240 --> 00:59:13.240
And we started off with penalizing you if
you went more than three seconds on a request

00:59:13.240 --> 00:59:14.240
and now you can burn 30 seconds, right?

00:59:14.240 --> 00:59:15.240
So, we've taken, we've gone a long way to
give you more functionality to let you do

00:59:15.240 --> 00:59:16.240
even more stuff whereas, we could have just
said, "Every request, when we started and

00:59:16.240 --> 00:59:17.240
we launched, every request has to be less
than a second on average."

00:59:17.240 --> 00:59:18.240
And, that's it; because that was the way we
could control the scalability and reliability,

00:59:18.240 --> 00:59:19.240
right?

00:59:19.240 --> 00:59:20.240
So, these things are at odds with each other
and I'm, I'm very happy with how far we've

00:59:20.240 --> 00:59:21.240
come in the last two years to give, to give
more and more functionality while also increasing

00:59:21.240 --> 00:59:22.240
our reliability.

00:59:22.240 --> 00:59:23.240
So, I hope that's a good answer.

00:59:23.240 --> 00:59:24.240
&gt;&gt;Troy: And, and to that point, it only has
been two years for us.

00:59:24.240 --> 00:59:25.240
Sorry, I'm Troy Trimble.

00:59:25.240 --> 00:59:26.240
I, I work on App Engine.

00:59:26.240 --> 00:59:27.240
I'm a software developer.

00:59:27.240 --> 00:59:28.240
Gmail's been out for six years now?

00:59:28.240 --> 00:59:29.240
I think it was like April 2004 or something
like that?

00:59:29.240 --> 00:59:30.240
So, I mean, time, you know?

00:59:30.240 --> 00:59:31.240
Like, time in developers.

00:59:31.240 --> 00:59:32.240
Give me three years -- I'll build something.

00:59:32.240 --> 00:59:33.240
&gt;&gt;Max: Is it still in Beta, Gmail?

00:59:33.240 --> 00:59:34.240
&gt;&gt;Troy: No, they're no longer in Beta.

00:59:34.240 --> 00:59:35.240
[audience laughs]

00:59:35.240 --> 00:59:36.240
&gt;&gt;Brian: On the dogfooding question, there
was an hour long talk on [inaudible] at 12:30

00:59:36.240 --> 00:59:37.240
today.

00:59:37.240 --> 00:59:38.240
&gt;&gt;Brett: That's Brian Berry, everybody. That's
all the team [inaudible]

00:59:38.240 --> 00:59:39.240
[laughter]

00:59:39.240 --> 00:59:40.240
&gt;&gt;audience8: I apologize if this was already
asked.

00:59:40.240 --> 00:59:41.240
On the App Engine for Business, we're really
excited about just hearing the words SLA and

00:59:41.240 --> 00:59:42.240
Sequel – it’s really just enough to make
the trip worthwhile.

00:59:42.240 --> 00:59:43.240
But, the question is what you demonstrated
was an intranet based application platform

00:59:43.240 --> 00:59:44.240
and most of the apps that we build have intranet
in different role components, but also have

00:59:44.240 --> 00:59:45.240
customer facing components that we-, would
not authenticate to.

00:59:45.240 --> 00:59:46.240
Is there a, a model where you can be able
to comingle in that space?

00:59:46.240 --> 00:59:47.240
&gt;&gt;Sean: So, the, the question is will App
Engine for Business support external facing

00:59:47.240 --> 00:59:48.240
applications?

00:59:48.240 --> 00:59:49.240
You're correct.

00:59:49.240 --> 00:59:50.240
It was asked before but not a problem.

00:59:50.240 --> 00:59:51.240
Yes, is the answer to your question and we
can talk a little bit more afterwards.

00:59:51.240 --> 00:59:52.240
I just don't wanna go into it too much.

00:59:52.240 --> 00:59:53.240
&gt;&gt;audience9: This is for the –

00:59:53.240 --> 00:59:54.240
So, the question I had was actually related
to a start-up request versus a normal request.

00:59:54.240 --> 00:59:55.240
So, the question, actually, why can't a start-up
request actually happen even before the first

00:59:55.240 --> 00:59:56.240
call to an instance is made.

00:59:56.240 --> 00:59:57.240
For example, now a case like we have now heavy
Java spring applications and only the start-up

00:59:57.240 --> 00:59:58.240
request usually exceed the first 30 second
deadline in the exception.

00:59:58.240 --> 00:59:59.240
&gt;&gt;Sean: So the, the question is why do we,
why don't we initialize runtimes before we

00:59:59.240 --> 01:00:00.240
actually send a user request to them?

01:00:00.240 --> 01:00:01.240
Why is the user request also the loading request?

01:00:01.240 --> 01:00:02.240
&gt;&gt;Kevin: So, I guess the, the quickest answer
to it is we serve a lot of apps.

01:00:02.240 --> 01:00:03.240
If we need to initialize something for you
for your request, you're gonna wait one way

01:00:03.240 --> 01:00:04.240
or the other because your app is different
from all the other apps.

01:00:04.240 --> 01:00:05.240
So, that happens a lot and we are working
on some of the things I was mentioning before.

01:00:05.240 --> 01:00:06.240
We're working on ways to make this better;
ways to hide that time from you.

01:00:06.240 --> 01:00:07.240
But, a lot of those things will, or, have
to do with reserving things for you, bulking

01:00:07.240 --> 01:00:08.240
things in advance, so that, that work has
been done in advance for you.

01:00:08.240 --> 01:00:09.240
That changes a bit about the platforms so
that's why some of these changes are taking

01:00:09.240 --> 01:00:10.240
a while to get to you.

01:00:10.240 --> 01:00:11.240
&gt;&gt;audience9: Ok, thanks.

01:00:11.240 --> 01:00:12.240
[pause]

01:00:12.240 --> 01:00:13.240
&gt;&gt;Burke: I'm Burke Floyd.

01:00:13.240 --> 01:00:14.240
I work for Jardon Howard Technologies.

01:00:14.240 --> 01:00:15.240
I had two quick questions.

01:00:15.240 --> 01:00:16.240
One is, do you guys plan on adding support
for say NetBeans, plugins for other developer

01:00:16.240 --> 01:00:17.240
tools to make it easier to work in those environments?

01:00:17.240 --> 01:00:18.240
And the second question is, is, has there
been any new work for, maybe related to his

01:00:18.240 --> 01:00:19.240
question, migrating some Google Apps or Google
products towards using App Engine?

01:00:19.240 --> 01:00:20.240
Is that in the progress, like any major tools
or major apps that you might be moving that

01:00:20.240 --> 01:00:21.240
way, or have we seen some other than maybe
PubSubHubbub or something like that?

01:00:21.240 --> 01:00:22.240
&gt;&gt;Sean: So, the first question, can you repeat
that again, I, I--

01:00:22.240 --> 01:00:23.240
&gt;&gt;Burke: The NetBeans, maybe NetBeans support
or other development tools?

01:00:23.240 --> 01:00:24.240
&gt;&gt;Sean: Plugins for other, yeah.

01:00:24.240 --> 01:00:25.240
&gt;&gt;Max: For NetBeans, we don't, we don't have
any specific plans for that.

01:00:25.240 --> 01:00:26.240
We have, we, we developed the Eclipse plugin.

01:00:26.240 --> 01:00:27.240
There's an IntelliJ plugin which works great,
which I use all the time which was developed

01:00:27.240 --> 01:00:28.240
by the the IntelliJ folks.

01:00:28.240 --> 01:00:29.240
Our approach, our general approach so far
has been we do, we do the, you know, we're

01:00:29.240 --> 01:00:30.240
invested in the Eclipse platform and we do
the development there and we're happy for

01:00:30.240 --> 01:00:31.240
other, other development teams to, to, to
match us and exceed us wherever they feel

01:00:31.240 --> 01:00:32.240
it's necessary.

01:00:32.240 --> 01:00:33.240
&gt;&gt;Don: There is actually a NetBeans plugin
that, that someone, I think someone at Sun

01:00:33.240 --> 01:00:34.240
implemented, right?

01:00:34.240 --> 01:00:35.240
&gt;&gt;Toby: I'm not, I'm not sure about Sun, but--

01:00:35.240 --> 01:00:36.240
&gt;&gt;Don: Yeah, yeah.

01:00:36.240 --> 01:00:37.240
Or Oracle, whatever.

01:00:37.240 --> 01:00:38.240
At the time it was called Oracle.

01:00:38.240 --> 01:00:39.240
So, there's one and w-, we haven't talked
to the person.

01:00:39.240 --> 01:00:40.240
I personally haven't tried it.

01:00:40.240 --> 01:00:41.240
We can't, I think we actually mention it in
our documentation now.

01:00:41.240 --> 01:00:42.240
So, but yeah, it's, it's out there and was
done completely without our help because we've

01:00:42.240 --> 01:00:43.240
made this public tools API that any tools
developer can take advantage of.

01:00:43.240 --> 01:00:44.240
&gt;&gt;Toby: Right, yeah, so I was gonna say the
same thing.

01:00:44.240 --> 01:00:45.240
We actually have a tools API and, and they
have gone out and that's what the IntelliJ

01:00:45.240 --> 01:00:46.240
plugin is based off of.

01:00:46.240 --> 01:00:47.240
That's what the NetBeans plugin is based off
of.

01:00:47.240 --> 01:00:48.240
But, but we're actually even going a step
further in that we have a plan, like we've

01:00:48.240 --> 01:00:49.240
been talking about taking the, the code that
we have for the Eclipse plugin and making

01:00:49.240 --> 01:00:50.240
that open source and even, and even going
a step further on top of that and trying to

01:00:50.240 --> 01:00:51.240
orient that code for the Eclipse plugin such
that it could be used like, used from other,

01:00:51.240 --> 01:00:52.240
for, for other plugins and other IDEs.

01:00:52.240 --> 01:00:53.240
So, so yeah, we're not directly doing anything
for NetBeans, but we're indirectly trying

01:00:53.240 --> 01:00:54.240
to make more and more of our code usable by
other IDEs.

01:00:54.240 --> 01:00:55.240
&gt;&gt;Max: So, what was the second question, again?

01:00:55.240 --> 01:00:56.240
&gt;&gt;Burke: Basically, have you guys seen anything
over the last year, let's say--

01:00:56.240 --> 01:00:57.240
&gt;&gt;Max: Internal apps.

01:00:57.240 --> 01:00:58.240
&gt;&gt;Burke: The major projects

01:00:58.240 --> 01:00:59.240
&gt;&gt;Max: Or the Googlers using App Engine for,
for Google stuff, right?

01:00:59.240 --> 01:01:00.240
&gt;&gt;Burke: Right.

01:01:00.240 --> 01:01:01.240
&gt;&gt;Max: So, I think, I think what Ryan was
saying before--

01:01:01.240 --> 01:01:02.240
&gt;&gt;unknown: [inaudible]

01:01:02.240 --> 01:01:03.240
&gt;&gt;Max: Yeah, migrations.

01:01:03.240 --> 01:01:04.240
So, I think you should definitely find the
video of the talk that Ben Fried, our CIO,

01:01:04.240 --> 01:01:05.240
gave today.

01:01:05.240 --> 01:01:06.240
It was earlier in the day and he talks about
the apps they're building and migrating, specifically

01:01:06.240 --> 01:01:07.240
internal apps.

01:01:07.240 --> 01:01:08.240
And that's the, been, the first focus on a
lot of these things.

01:01:08.240 --> 01:01:09.240
So, I would definitely check that out and,
and, I don't remember if he talks about externalized

01:01:09.240 --> 01:01:10.240
products also, but that's like, probably the
best resource for that.

01:01:10.240 --> 01:01:11.240
&gt;&gt;Sean: I'm gonna grab one of the, the Moderator.

01:01:11.240 --> 01:01:12.240
So, how does up-, App Engine uptake over the
last few years in terms of types of scale

01:01:12.240 --> 01:01:13.240
of application, fit with your original expectations
of App Engine?

01:01:13.240 --> 01:01:14.240
&gt;&gt;Kevin: Well, I don't know. I'll just give
an answer.

01:01:14.240 --> 01:01:15.240
[pause]

01:01:15.240 --> 01:01:16.240
I think App Engine has grown a lot more than
we thought.

01:01:16.240 --> 01:01:17.240
As, as I mentioned in the keynote today, half
a billion page views, if you count page views,

01:01:17.240 --> 01:01:18.240
that, that's daily page views, if you count
page views, that's a lot.

01:01:18.240 --> 01:01:19.240
So, that's been more growth than I expected
or I think a lot of us would have expected

01:01:19.240 --> 01:01:20.240
and that happened pretty quickly.

01:01:20.240 --> 01:01:21.240
In terms of number of apps, we see all sorts.

01:01:21.240 --> 01:01:22.240
We see a lot of really big apps, we see a
lot of medium size apps, we see a lot of apps

01:01:22.240 --> 01:01:23.240
that based on how we think about things at
Google, how we measure scale, which is in

01:01:23.240 --> 01:01:24.240
these crazy big numbers because Google tends
to do these really big products that we don't

01:01:24.240 --> 01:01:25.240
think about enough.

01:01:25.240 --> 01:01:26.240
But we have a huge middle ground of these
apps that just have a lot of regular usage.

01:01:26.240 --> 01:01:27.240
And so, that's been a little surprising to
me.

01:01:27.240 --> 01:01:28.240
There's been a lot more of sort of the long
tail than I would've thought.

01:01:28.240 --> 01:01:29.240
What about you guys, any thoughts?

01:01:29.240 --> 01:01:30.240
&gt;&gt;Max: I was just gonna say that in general;
we don't know what you're doing with us.

01:01:30.240 --> 01:01:31.240
Your apps are out there and most of the time,
unless you're driving like huge numbers of

01:01:31.240 --> 01:01:32.240
traffic, or you're getting errors and your
posting on the message groups, if you're a

01:01:32.240 --> 01:01:33.240
happy customer, we don't generally know what
you're doing.

01:01:33.240 --> 01:01:34.240
We don't know what domain your application
is running in.

01:01:34.240 --> 01:01:35.240
We don't know how much data you're storing.

01:01:35.240 --> 01:01:36.240
We don't have a good sense of how much traffic
it's driving, unless it's really sort of at

01:01:36.240 --> 01:01:37.240
the upper end of things.

01:01:37.240 --> 01:01:38.240
So, I don't know.

01:01:38.240 --> 01:01:39.240
I think, I think that's a nice attribute of
it; that we’ve just got a big melting pot

01:01:39.240 --> 01:01:40.240
of applications.

01:01:40.240 --> 01:01:41.240
&gt;&gt;Brett: I'd say all that's true, and then
mobile, mobile games, I just keep hearing

01:01:41.240 --> 01:01:42.240
from developers they're building backends
for mobile apps and mobile games on top of

01:01:42.240 --> 01:01:43.240
App Engine because it has these great scaling
properties.

01:01:43.240 --> 01:01:44.240
And, more and more people we run into are
doing that and finding success with it, which

01:01:44.240 --> 01:01:45.240
is really great because they see the problem,
they, a lot of them are bootstrap startups,

01:01:45.240 --> 01:01:46.240
finally got their stuff to the App Store,
don't have a hundred thousand dollars to sink

01:01:46.240 --> 01:01:47.240
on servers and need to support 30 thousand
users tomorrow.

01:01:47.240 --> 01:01:48.240
And then, so it, it's great to be able to
solve this problem for them of, of really

01:01:48.240 --> 01:01:49.240
quickly scaling.

01:01:49.240 --> 01:01:50.240
&gt;&gt;Kevin: And now, I, I think that we have
to wrap up now because the sessions over.

01:01:50.240 --> 01:01:51.240
But, let me tell you this, we're all here.

01:01:51.240 --> 01:01:52.240
We've got a big office space that's right
up the escalator and we're around for the

01:01:52.240 --> 01:01:53.240
whole conference.

01:01:53.240 --> 01:01:54.240
I would love to answer every single question.

01:01:54.240 --> 01:01:55.240
I know all of these guys would, too.

01:01:55.240 --> 01:01:56.240
So please track us down, come to the office
space, ask us your questions, and I'd love

01:01:56.240 --> 01:01:57.240
to talk to all you guys more.

01:01:57.240 --> 01:01:58.240
Thank you for your time.

01:01:58.240 --> 01:01:58.241
[applause]

