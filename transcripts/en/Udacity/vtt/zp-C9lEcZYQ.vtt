WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:01.200
I'd like to take a moment and

00:00:01.200 --> 00:00:03.610
show you the process of
creating an object diagram.

00:00:03.610 --> 00:00:08.280
You might also hear this process
referred to as object decomposition.

00:00:08.280 --> 00:00:11.230
That is, we're taking something
that's a big object, like an app,

00:00:11.230 --> 00:00:13.740
and we're breaking it down into
its individual components.

00:00:13.740 --> 00:00:16.800
Now, there's no right or
wrong way to do this.

00:00:16.800 --> 00:00:19.110
If 100 people create
an object diagram for an app,

00:00:19.110 --> 00:00:22.570
there might be 100 completely
different diagrams.

00:00:22.570 --> 00:00:26.260
Also there are some informal and
formal ways to create them.

00:00:26.260 --> 00:00:30.390
A formal way might be creating an object
diagram using the universal modeling

00:00:30.390 --> 00:00:32.350
language or UML.

00:00:32.350 --> 00:00:35.940
And an example object diagram's
given here on the left.

00:00:35.940 --> 00:00:39.660
Now UML as a modeling language contains
a bunch of standard symbols and

00:00:39.660 --> 00:00:43.450
icons that are helpful for
laying out the components of a project.

00:00:43.450 --> 00:00:47.580
But for many UML can be
really bulky to work with.

00:00:47.580 --> 00:00:48.810
And I fall into that category.

00:00:48.810 --> 00:00:52.080
I'm more of a fan of an informal
approach that takes some ideas from UML,

00:00:52.080 --> 00:00:56.250
but it doesn't get bogged down
in the nitty gritty details.

00:00:56.250 --> 00:01:00.920
And an example of a more informal object
diagram is given here on the right.

00:01:00.920 --> 00:01:01.740
So for this example,

00:01:01.740 --> 00:01:05.410
I'm going to take an app that you'll
see later called Alien Adventure.

00:01:05.410 --> 00:01:06.740
This is the main screen for the app and

00:01:06.740 --> 00:01:09.960
I can interact with it by
tapping on the screen.

00:01:09.960 --> 00:01:13.390
And we can see that this robot
will animate across the screen and

00:01:13.390 --> 00:01:14.660
there's an alien.

00:01:14.660 --> 00:01:17.180
There's actually multiple aliens,
and the robot and

00:01:17.180 --> 00:01:20.900
the alien will have a discussion and
will go back and forth.

00:01:20.900 --> 00:01:24.580
And if the robot answers the aliens
question correctly then these little

00:01:24.580 --> 00:01:28.340
badges will appear in the lower
left hand corner of the screen.

00:01:28.340 --> 00:01:29.800
I'm going to stop right here.

00:01:29.800 --> 00:01:33.280
At this point, we've already seen
enough of this app to actually start

00:01:33.280 --> 00:01:35.270
the object decomposition process.

00:01:35.270 --> 00:01:38.820
So I'm going to open a Google
drawing to build the diagram.

00:01:38.820 --> 00:01:42.100
But you could use a piece of paper,
a napkin,

00:01:42.100 --> 00:01:46.780
a tool like draw.io, which I have that
opened up in this other tab here.

00:01:46.780 --> 00:01:49.860
This is a draw io diagram or really just

00:01:49.860 --> 00:01:54.200
any tool that gives you the ability
to put your ideas into a diagram.

00:01:54.200 --> 00:01:58.570
Personally, I'm a big fan of napkins and
then I can say from personal experience

00:01:58.570 --> 00:02:01.430
that a lot of great ideas
I've diagrammed on napkins.

00:02:01.430 --> 00:02:04.490
Idling to say that there's probably some
other amazing apps out there that have

00:02:04.490 --> 00:02:08.400
been diagramed on napkins but,
that's a different story.

00:02:08.400 --> 00:02:11.060
The first thing will start with
is the first big object which is

00:02:11.060 --> 00:02:12.250
the app itself.

00:02:12.250 --> 00:02:16.070
Now, the app is an actual object and
code but that's okay.

00:02:16.070 --> 00:02:18.880
We're going to use that
as our starting point and

00:02:18.880 --> 00:02:22.080
if we think about what we saw when
you're playing around with the app,

00:02:22.080 --> 00:02:24.960
we can start adding those
objects to the diagram.

00:02:24.960 --> 00:02:28.540
So we know that there's a robot and
that there were aliens, so

00:02:28.540 --> 00:02:31.790
I'm going to go ahead make some
rectangles to represent those and

00:02:31.790 --> 00:02:35.060
we'll add labels for
the robot object and the alien object.

00:02:35.060 --> 00:02:38.820
You'll notice that I'm using the
singular form of alien and not aliens,

00:02:38.820 --> 00:02:41.680
even though there are multiple
aliens in the app

00:02:41.680 --> 00:02:43.830
if we were to continue playing it.

00:02:43.830 --> 00:02:47.480
And this is a personal preference,
and it's one of those aspects of UML

00:02:47.480 --> 00:02:50.290
that I'm blending with
this informal approach.

00:02:50.290 --> 00:02:54.090
In UML you typically refer to
objects in their singular form.

00:02:54.090 --> 00:02:56.890
Also if I was using a more
formal process I might use

00:02:56.890 --> 00:03:00.010
a certain type of symbol for
an object, maybe a rectangle and

00:03:00.010 --> 00:03:04.740
then a certain type of symbol for
a struct like a rounded rectangle.

00:03:04.740 --> 00:03:07.110
But again because we're
keeping it pretty informal,

00:03:07.110 --> 00:03:09.090
I'm just going to use rectangles for
everything.

00:03:10.120 --> 00:03:11.810
Now what else did we notice in the app?

00:03:11.810 --> 00:03:15.770
What else seemed to stand out in our
mind as a self-contained entity?

00:03:15.770 --> 00:03:19.140
What else could be considered
part of the application.

00:03:19.140 --> 00:03:21.860
Some of the things that I can
think of are the background.

00:03:21.860 --> 00:03:25.170
We also had badges that appeared
in the lower left hand corner.

00:03:25.170 --> 00:03:27.620
And there was a dialogue
bubble at the top and

00:03:27.620 --> 00:03:30.360
it consisted of multiple lines of text.

00:03:30.360 --> 00:03:32.620
This is a pretty good set
of objects to start with.

00:03:32.620 --> 00:03:36.150
These were all things that we
could clearly see with our eyes.

00:03:36.150 --> 00:03:38.890
But there could also be objects
that are behind the scenes.

00:03:38.890 --> 00:03:43.640
Things that we can't see, but still make
up some part of the application itself.

00:03:43.640 --> 00:03:46.860
For example,
what about the concept of a game world.

00:03:46.860 --> 00:03:48.630
Maybe the aliens, the robot and

00:03:48.630 --> 00:03:52.630
everything within it could be
thought as parts of a game world.

00:03:52.630 --> 00:03:56.430
So I'm going to go ahead and add a
symbol for world to our object diagram.

00:03:56.430 --> 00:03:59.380
In adding world here is just another
example of what I really want to

00:03:59.380 --> 00:04:00.440
stress to you.

00:04:00.440 --> 00:04:03.240
This process is not exact science.

00:04:03.240 --> 00:04:06.920
It's a very creative abstract
thinking type of process.

00:04:06.920 --> 00:04:10.395
No two people probably create
the same object diagram.

00:04:10.395 --> 00:04:12.385
Now, I'm going to go ahead stop here.

00:04:12.385 --> 00:04:14.595
In just a moment we're
going to refine this diagram.

00:04:14.595 --> 00:04:17.765
We're going to think about how
the objects are interconnected and

00:04:17.765 --> 00:04:20.535
we're also going to look to see if any
of the objects have similarities because

00:04:20.535 --> 00:04:22.865
that's a big deal when designing apps.

00:04:22.865 --> 00:04:27.155
That some of the objects share traits
and other similar functionality,

00:04:27.155 --> 00:04:29.925
then we can take advantage of that
later when we start writing code.

