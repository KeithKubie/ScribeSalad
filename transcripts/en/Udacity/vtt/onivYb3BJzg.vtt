WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:02.630
Back in lesson four we learned
that the Android runtime

00:00:02.630 --> 00:00:04.650
will kill apps with
no visible activities

00:00:04.650 --> 00:00:07.760
in order to free resources 
needed by the foreground app.

00:00:07.760 --> 00:00:10.350
But what if your app has tasks
that need to continue

00:00:10.350 --> 00:00:12.380
when the activity isn't visible?

00:00:12.380 --> 00:00:16.440
Things like downloading files,
uploading photos, or playing music.

00:00:16.440 --> 00:00:18.841
Well, there's an application
component for that.

00:00:18.851 --> 00:00:20.312
Services.

00:00:20.442 --> 00:00:23.884
We've already introduced 
activities, content providers,

00:00:23.884 --> 00:00:26.096
broadcast receivers and intents.

00:00:26.118 --> 00:00:29.970
Services are the final piece 
to the Android app component puzzle.

00:00:29.970 --> 00:00:32.479
You start services 
much like you do activities,

00:00:32.479 --> 00:00:36.390
by passing in an intent
to a startService call.

00:00:36.390 --> 00:00:38.482
And you can stop 
services the same way.

00:00:38.482 --> 00:00:40.340
By calling stopService
and passing in the name

00:00:40.340 --> 00:00:42.222
of the service
you want to stop.

00:00:42.222 --> 00:00:45.494
Unlike activities, services have
no user interface

00:00:45.494 --> 00:00:48.747
and they run at a higher priority
than background activities.

00:00:48.747 --> 00:00:50.811
This means that an app 
with a running service,

00:00:50.811 --> 00:00:52.890
is less likely to be killed
by the runtime

00:00:52.890 --> 00:00:55.350
in order to free resources
for the foreground activities.

00:00:55.350 --> 00:00:58.750
In fact, by default, the system
will attempt to restart services

00:00:58.750 --> 00:01:01.630
that are terminated before
they are stopped from within the app.

00:01:01.630 --> 00:01:04.858
This is reflected in 
this simplified lifecycle.

00:01:04.858 --> 00:01:07.550
Compared to activities, 
services are designed

00:01:07.550 --> 00:01:10.943
to execute longer running tasks
that shouldn't be interrupted.

00:01:10.943 --> 00:01:14.046
Typically, you'll only need to
override the onStartCommad handler,

00:01:14.046 --> 00:01:16.180
which is where you begin
the background task

00:01:16.180 --> 00:01:17.780
you wish to execute.

00:01:17.780 --> 00:01:21.000
But notice that there are no handlers
for monitoring changes in state,

00:01:21.000 --> 00:01:23.320
to reflect the app moving
to the background.

00:01:23.320 --> 00:01:25.216
This is because the
running service itself,

00:01:25.216 --> 00:01:26.772
sends a signal to the framework,

00:01:26.772 --> 00:01:29.900
that the containing app should 
be considered higher priority

00:01:29.900 --> 00:01:33.420
than other apps in the background
that don't have running services.

00:01:33.420 --> 00:01:36.230
In some cases your service 
may performing a task,

00:01:36.230 --> 00:01:39.036
that while not having UI, 
can't be interrupted

00:01:39.036 --> 00:01:41.112
without interfering 
with the user experience.

00:01:41.112 --> 00:01:44.670
For example, playing music
or helping with in car navigation.

00:01:45.490 --> 00:01:47.720
In these cases you can
indicate that your server

00:01:47.760 --> 00:01:50.360
should be considered to be
running in the foreground

00:01:50.360 --> 00:01:53.010
by calling startForeground.

00:01:53.010 --> 00:01:55.640
You'll notice that this call
takes in a notification.

00:01:55.640 --> 00:01:57.820
This will be displayed, 
and can't be dismissed

00:01:57.820 --> 00:02:01.170
until the service has stopped 
or you call stopForeground.

00:02:01.170 --> 00:02:04.680
You'll learn more about notifications
a little later, with Dan.

00:02:04.680 --> 00:02:09.340
But for now, note that a foreground
service runs at the same priority

00:02:09.340 --> 00:02:10.970
as a foreground activity.

00:02:10.970 --> 00:02:13.870
Making it nearly impossible 
for the runtime to kill

00:02:13.870 --> 00:02:15.440
in order to free resources.

00:02:15.440 --> 00:02:18.660
Now you may be thinking to yourself, 
I could save a lot of trouble

00:02:18.660 --> 00:02:21.390
dealing with lifecycles, 
just by creating long running

00:02:21.390 --> 00:02:23.750
or even foreground services.

00:02:23.750 --> 00:02:26.050
Well, I grew up along 
the coast in Australia,

00:02:26.050 --> 00:02:29.450
so I learned young that
swimming against the current

00:02:29.450 --> 00:02:31.960
is exhausting and ultimately futile.

00:02:31.960 --> 00:02:34.310
In this case, that means 
making it more difficult

00:02:34.310 --> 00:02:35.840
for the system to manage resources,

00:02:35.840 --> 00:02:38.133
ultimately leading to
a worse user experience.

00:02:38.143 --> 00:02:39.836
Swim with the current.

00:02:39.836 --> 00:02:43.317
Use foreground services 
only when and for as long as

00:02:43.317 --> 00:02:45.148
absolutely necessary.

00:02:45.148 --> 00:02:48.570
And stop all service
as as quickly as possible.

00:02:48.570 --> 00:02:51.800
It's also important to note
that like activities and receivers,

00:02:51.800 --> 00:02:53.570
services run on the main thread.

00:02:53.570 --> 00:02:56.740
So you'll need to use
a background thread or think task

00:02:56.740 --> 00:03:00.730
to execute the long running tasks
you wish to do within your service.

00:03:00.730 --> 00:03:04.010
To make life easier, you can
use the intent service class.

00:03:04.010 --> 00:03:07.250
Which implements the most common
best practice pattern, for using intents,

00:03:07.250 --> 00:03:09.170
which are executed within a service.

00:03:09.170 --> 00:03:14.290
It creates a queue of incoming intents, 
passed in when start service is called.

00:03:14.290 --> 00:03:17.890
These are then processed sequentially
on a background thread,

00:03:17.890 --> 00:03:22.530
within the onHandleIntent handler, 
within your intent service implementation.

00:03:22.530 --> 00:03:25.840
When the queue is empty,
the service self terminates

00:03:25.840 --> 00:03:29.110
until a new intent is received,
and the process begins again,

00:03:29.110 --> 00:03:31.640
Services are a powerful tool
and it's important to understand

00:03:31.640 --> 00:03:33.090
how you can use them,

00:03:33.180 --> 00:03:36.250
but in practice there's often
a framework alternative

00:03:36.250 --> 00:03:38.283
to rolling your own
service implementation.

00:03:38.283 --> 00:03:41.636
Whether that be an intent service
for executing background tasks

00:03:41.636 --> 00:03:44.840
or the sync adapter which you'll
learn about later in this lesson.

00:03:44.840 --> 00:03:47.820
Perfect for performing background
data synchronization.

