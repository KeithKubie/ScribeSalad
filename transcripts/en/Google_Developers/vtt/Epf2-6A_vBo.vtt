WEBVTT
Kind: captions
Language: en

00:00:08.510 --> 00:00:10.745
NASIR KAHN: Hello and welcome
to another episode of Google

00:00:10.745 --> 00:00:12.520
Wallet Developers Live.

00:00:12.520 --> 00:00:14.310
We're going to talk about
Instant Buy today.

00:00:14.310 --> 00:00:16.520
We have had previous sessions
on Instant Buy.

00:00:16.520 --> 00:00:18.390
This is another session.

00:00:18.390 --> 00:00:19.420
My name is Nasir Kahn.

00:00:19.420 --> 00:00:22.010
I'm a developer advocate with
Google Wallet team.

00:00:22.010 --> 00:00:24.280
And I have with me Nagesh
Susarta, who is a developer

00:00:24.280 --> 00:00:26.490
programs engineer on our team.

00:00:26.490 --> 00:00:28.390
We also have a partner
from Tagstand.

00:00:28.390 --> 00:00:31.560
His name is Joshua Krohn,
joining us on Google Hangout.

00:00:31.560 --> 00:00:32.408
Hi, Josh.

00:00:32.408 --> 00:00:34.380
JOSHUA KROHN: Hi, guys.

00:00:34.380 --> 00:00:36.290
NASIR KAHN: So as I said,
Tagstand is one of our Instant

00:00:36.290 --> 00:00:37.440
Buy partners.

00:00:37.440 --> 00:00:39.885
And in this show, we're going
to talk about the app that

00:00:39.885 --> 00:00:41.720
they have developed
with Instant Buy.

00:00:41.720 --> 00:00:44.310
So, Josh, let me just start
with you first.

00:00:44.310 --> 00:00:46.230
I know that you have
a few apps.

00:00:46.230 --> 00:00:48.860
Tell us what Tagstand
does and what have

00:00:48.860 --> 00:00:50.970
you been doing recently.

00:00:50.970 --> 00:00:54.170
JOSHUA KROHN: So we're working
on developing software that

00:00:54.170 --> 00:00:57.440
allows your device to use its
knowledge of where it is and

00:00:57.440 --> 00:01:00.610
what you're doing, respond to
its current context, and do

00:01:00.610 --> 00:01:03.630
things like change settings
or perform actions on your

00:01:03.630 --> 00:01:06.950
behalf, rather than requiring
the user to take out their

00:01:06.950 --> 00:01:09.000
device and interact with
it to perform all of

00:01:09.000 --> 00:01:10.170
these routine tasks.

00:01:10.170 --> 00:01:11.960
NASIR KAHN: OK, nice.

00:01:11.960 --> 00:01:13.600
And I know that you
have a few apps.

00:01:13.600 --> 00:01:17.690
We have one app called NFC Task
Launcher, with which we

00:01:17.690 --> 00:01:19.770
have the Instant Buy
integration.

00:01:19.770 --> 00:01:21.310
So, Nagesh, I think you
had a plan to show

00:01:21.310 --> 00:01:23.010
the demo to our viewers.

00:01:23.010 --> 00:01:26.370
NAGESH SUSARTA: So I'm bringing
up the NFC Task

00:01:26.370 --> 00:01:27.240
Launcher here.

00:01:27.240 --> 00:01:28.780
It has a few tabs.

00:01:28.780 --> 00:01:31.360
If you can see, there's Buy
tags, obviously-- but that's

00:01:31.360 --> 00:01:32.620
the first thing you
want to do--

00:01:32.620 --> 00:01:37.630
My Tasks, and Examples, which
has a custom list of tasks.

00:01:37.630 --> 00:01:40.630
So the first thing you want to
do with the NFC Task Launcher,

00:01:40.630 --> 00:01:44.670
if you don't have the tags,
is to buy them.

00:01:44.670 --> 00:01:47.460
And this is where the Instant
Buy integration comes in.

00:01:47.460 --> 00:01:51.750
And let's say I like the
black NFC tags here.

00:01:51.750 --> 00:01:53.770
So I can actually program
them once I have them.

00:01:53.770 --> 00:01:54.640
NASIR KAHN: So let
me ask this.

00:01:54.640 --> 00:01:55.490
What is an NFC tag?

00:01:55.490 --> 00:01:57.650
What are we buying
here with this?

00:01:57.650 --> 00:02:01.680
NAGESH SUSARTA: So what an NFC
tag is is that it's actually a

00:02:01.680 --> 00:02:06.560
small tag, which can be
programmed by using the NFC

00:02:06.560 --> 00:02:07.270
Task Launcher.

00:02:07.270 --> 00:02:07.750
NASIR KAHN: OK.

00:02:07.750 --> 00:02:10.229
NAGESH SUSARTA: It can be
programmed to do a set of

00:02:10.229 --> 00:02:14.700
tasks, which can vary from
starting Wi-Fi, stopping

00:02:14.700 --> 00:02:18.390
Wi-Fi, launching an application,
starting media.

00:02:18.390 --> 00:02:19.910
And I'll show you an
example of that.

00:02:19.910 --> 00:02:21.110
NASIR KAHN: OK.

00:02:21.110 --> 00:02:22.530
NAGESH SUSARTA: I mean
through the demo.

00:02:22.530 --> 00:02:25.495
But first, let me
buy the tags.

00:02:25.495 --> 00:02:26.140
NASIR KAHN: Excellent.

00:02:26.140 --> 00:02:29.400
NAGESH SUSARTA: And so they have
integrated Instant Buy.

00:02:29.400 --> 00:02:32.360
So I click on it, and it shows
me my masked wallet

00:02:32.360 --> 00:02:36.720
information, which is exactly
which card I want to use for

00:02:36.720 --> 00:02:37.950
this transaction.

00:02:37.950 --> 00:02:41.730
I say, OK, I want to use
this particular card.

00:02:41.730 --> 00:02:45.410
And then I go through the
flow, and it shows me my

00:02:45.410 --> 00:02:48.990
masked wallet information, my
shipping address, in case I

00:02:48.990 --> 00:02:49.870
wanted to change it.

00:02:49.870 --> 00:02:52.320
There is an ability for
me to change it.

00:02:52.320 --> 00:02:54.410
And it also shows me the
card I've chosen.

00:02:54.410 --> 00:02:59.200
I have the ability to even
change that option right now.

00:02:59.200 --> 00:03:00.720
NASIR KAHN: So, Nagesh, when you
did that, and you clicked

00:03:00.720 --> 00:03:02.780
on the Buy with Google button,
is that when you were

00:03:02.780 --> 00:03:05.180
interacting with the
Google Wallet APIs?

00:03:05.180 --> 00:03:05.650
NAGESH SUSARTA: Yes.

00:03:05.650 --> 00:03:08.866
NASIR KAHN: And you're getting
the card, or the masked card

00:03:08.866 --> 00:03:10.620
at least, and the shipping
information.

00:03:10.620 --> 00:03:11.960
NAGESH SUSARTA: Yeah, the
first step is to get the

00:03:11.960 --> 00:03:13.470
masked information.

00:03:13.470 --> 00:03:16.450
And then once you have the
masked information, typically

00:03:16.450 --> 00:03:18.500
you would show it to the user.

00:03:18.500 --> 00:03:21.750
And Josh has done a great job
by showing it to the user.

00:03:21.750 --> 00:03:26.610
And then when the user is ready,
like when I'm now ready

00:03:26.610 --> 00:03:29.640
to buy the tags, I confirm
the order.

00:03:29.640 --> 00:03:32.670
And this is where I'm actually
getting the virtual proxy

00:03:32.670 --> 00:03:35.610
card, which is sent to
my payment network.

00:03:35.610 --> 00:03:41.040
So I confirm the order, and then
I get a particular proxy

00:03:41.040 --> 00:03:44.180
card and the CVV associated
with it.

00:03:44.180 --> 00:03:46.090
And I send it back.

00:03:46.090 --> 00:03:51.770
I mean, Josh sends it back to
his servers and completes the

00:03:51.770 --> 00:03:52.760
transaction.

00:03:52.760 --> 00:03:56.677
Now since I've already completed
my transaction and I

00:03:56.677 --> 00:04:00.610
selected super fast delivery,
I already have

00:04:00.610 --> 00:04:01.590
the tags with me.

00:04:01.590 --> 00:04:05.300
I mean, Josh, I should say
you guys have an awesome

00:04:05.300 --> 00:04:07.430
fulfillment going on there.

00:04:07.430 --> 00:04:10.370
But I mean, jokes aside, I
already bought the tags

00:04:10.370 --> 00:04:12.770
because I'm a fan of NFC tags.

00:04:12.770 --> 00:04:16.110
And what I'm going to show
you is an example tag.

00:04:16.110 --> 00:04:20.440
Now, since I like listening to
music in my car, what I did

00:04:20.440 --> 00:04:27.490
was I built a small little task
list that launches the

00:04:27.490 --> 00:04:29.440
Play Music application.

00:04:29.440 --> 00:04:32.040
Now this is an app that I'm
already subscribed to.

00:04:32.040 --> 00:04:34.200
I'm already subscribed
to Google Play Music.

00:04:34.200 --> 00:04:38.200
You can replace it with any
other app that also provides

00:04:38.200 --> 00:04:39.450
music in this case.

00:04:39.450 --> 00:04:43.640
And then the second task is to
actually start media playback.

00:04:43.640 --> 00:04:48.770
So once I created this task, I
can go ahead and get ready to

00:04:48.770 --> 00:04:51.320
write this on a particular
tag.

00:04:51.320 --> 00:04:53.106
So once it's written
that's it.

00:04:53.106 --> 00:04:57.020
That's what it takes to actually
write on a tag.

00:04:57.020 --> 00:04:59.440
Now once I've done this,
I take this,

00:04:59.440 --> 00:05:00.750
stick it in my car--

00:05:00.750 --> 00:05:04.440
I mean, on the central console
or something like that.

00:05:04.440 --> 00:05:13.590
And when I just get into my car,
I tap my NFC and there

00:05:13.590 --> 00:05:14.790
comes my play list.

00:05:14.790 --> 00:05:16.200
And you know that
I'm listening to

00:05:16.200 --> 00:05:18.030
Maroon Five right now.

00:05:18.030 --> 00:05:22.640
That's how easy it is to
integrate NFC Task Launcher

00:05:22.640 --> 00:05:26.900
and the NFC tags, which
are very useful.

00:05:26.900 --> 00:05:29.850
Now that aside, coming back
to the actual Instant Buy

00:05:29.850 --> 00:05:35.080
integration, I should ask Josh,
how was the integration

00:05:35.080 --> 00:05:37.330
from your side?

00:05:37.330 --> 00:05:40.220
JOSHUA KROHN: So from our side,
the integration was

00:05:40.220 --> 00:05:42.360
pretty easy.

00:05:42.360 --> 00:05:45.410
We saw two main benefits
from our side.

00:05:45.410 --> 00:05:48.060
One was the reduction
in complexity for

00:05:48.060 --> 00:05:50.080
payments for the users.

00:05:50.080 --> 00:05:52.450
And the other was the ability to
get some information about

00:05:52.450 --> 00:05:54.620
the users, so we could really
tailor the checkout

00:05:54.620 --> 00:05:56.750
experience for them.

00:05:56.750 --> 00:05:59.590
Previously, we'd been using
Google Wallet because--

00:05:59.590 --> 00:06:01.330
or I'm sorry, Google Checkout.

00:06:01.330 --> 00:06:03.730
Because we know no one likes to
enter billing information,

00:06:03.730 --> 00:06:06.120
shipping information, and
card information.

00:06:06.120 --> 00:06:08.660
But there were some real
limitations with that.

00:06:08.660 --> 00:06:12.110
The Instant Buy API removed
those limitations.

00:06:12.110 --> 00:06:16.070
So now once the user clicks
Purchase, they

00:06:16.070 --> 00:06:16.830
select their card.

00:06:16.830 --> 00:06:17.830
They select their address.

00:06:17.830 --> 00:06:19.830
We have all of that
information.

00:06:19.830 --> 00:06:22.430
We can then call back out to
our servers and dynamically

00:06:22.430 --> 00:06:25.810
get them the best shipping
rates, any current promotions

00:06:25.810 --> 00:06:28.770
we have, like free shipping
for some items.

00:06:28.770 --> 00:06:30.990
And we can give them effectively
the lowest price

00:06:30.990 --> 00:06:33.010
possible very easily.

00:06:33.010 --> 00:06:36.170
And then from the user end, as
soon as they hit Buy, we're

00:06:36.170 --> 00:06:39.880
able to process that payment,
send that order directly to

00:06:39.880 --> 00:06:42.210
fulfillment, and it's processed
right away.

00:06:42.210 --> 00:06:44.990
So we don't have to worry about
queueing up orders and

00:06:44.990 --> 00:06:46.760
sending them nightly.

00:06:46.760 --> 00:06:48.380
It's very easy.

00:06:48.380 --> 00:06:52.060
To do that, we had to do the
integration in the app, as

00:06:52.060 --> 00:06:53.905
well as build the back-end
system itself.

00:06:56.410 --> 00:06:57.900
NASIR KAHN: Now would you
elaborate on the back-end?

00:06:57.900 --> 00:07:00.700
So when you said back-end, did
you have to create some

00:07:00.700 --> 00:07:01.800
fulfillment of your own?

00:07:01.800 --> 00:07:03.580
Is that what you did?

00:07:03.580 --> 00:07:06.900
JOSHUA KROHN: We had to create
an order management system.

00:07:06.900 --> 00:07:09.500
We had to write the actual
payment processing, which

00:07:09.500 --> 00:07:11.580
we've worked with Braintree
to do that.

00:07:11.580 --> 00:07:15.410
And then we had to work with our
fulfiller to create an API

00:07:15.410 --> 00:07:17.350
to push orders to
them directly.

00:07:17.350 --> 00:07:18.450
NASIR KAHN: OK

00:07:18.450 --> 00:07:20.150
JOSHUA KROHN: We had one
developer doing that.

00:07:20.150 --> 00:07:23.020
And all of those tests
were completed in

00:07:23.020 --> 00:07:23.992
less than one week.

00:07:23.992 --> 00:07:28.680
And so even creating from the
ground up, it wasn't this huge

00:07:28.680 --> 00:07:30.450
upscale effort that
we had to do.

00:07:30.450 --> 00:07:30.740
NASIR KAHN: OK.

00:07:30.740 --> 00:07:33.920
Now If there is a merchant who
already has a back-end payment

00:07:33.920 --> 00:07:36.380
processor set up, and they have
some kind of fulfillment

00:07:36.380 --> 00:07:39.420
in place already, integrating
just the Google

00:07:39.420 --> 00:07:40.610
Wallet Instant Buy API--

00:07:40.610 --> 00:07:42.260
that piece alone is that--

00:07:42.260 --> 00:07:45.158
how long did it take
you to do that?

00:07:45.158 --> 00:07:47.605
JOSHUA KROHN: That part of
it took us about a day.

00:07:47.605 --> 00:07:49.156
NASIR KAHN: Oh, OK.

00:07:49.156 --> 00:07:52.210
JOSHUA KROHN: Instant Buy APIs
are very modular and worked

00:07:52.210 --> 00:07:55.530
really well with our checkout
outflow, the way we have the

00:07:55.530 --> 00:07:57.500
items set up.

00:07:57.500 --> 00:07:59.020
It was really simple
to integrate.

00:07:59.020 --> 00:08:00.450
The sample code was very good.

00:08:00.450 --> 00:08:05.040
It demonstrated the actual flow,
the logic flow, in cases

00:08:05.040 --> 00:08:06.630
to handle very well.

00:08:06.630 --> 00:08:10.560
So very easy for us
in retrospect.

00:08:10.560 --> 00:08:12.440
NASIR KAHN: And for the benefit
of our viewers who are

00:08:12.440 --> 00:08:14.830
interested in getting more
detail about Instant Buy, we

00:08:14.830 --> 00:08:17.180
have had previous shows in
which we have gone into

00:08:17.180 --> 00:08:18.660
details of the flow--

00:08:18.660 --> 00:08:19.790
masked wallet and full
wallet as you

00:08:19.790 --> 00:08:21.020
heard Nagesh talk about.

00:08:21.020 --> 00:08:24.110
We have much more details there
So feel free to go ahead

00:08:24.110 --> 00:08:27.350
and check out those videos
to get more detail.

00:08:27.350 --> 00:08:31.040
But while we have you here Josh,
could you would show us

00:08:31.040 --> 00:08:34.720
a little bit of a code snippet
or something that our viewers

00:08:34.720 --> 00:08:37.880
would be interested in looking
at to see how the integration

00:08:37.880 --> 00:08:39.385
actually looks like?

00:08:39.385 --> 00:08:40.635
JOSHUA KROHN: Yeah, sure.

00:08:46.060 --> 00:08:50.470
So here is, this is the fragment
that displays after

00:08:50.470 --> 00:08:51.525
the item is loaded.

00:08:51.525 --> 00:08:54.660
So you see the images and the
item description and the Buy

00:08:54.660 --> 00:08:55.980
Now button.

00:08:55.980 --> 00:08:59.660
So this extends a base
WalletFragment that handles

00:08:59.660 --> 00:09:04.480
making the connection to the
Wallet client, disconnecting,

00:09:04.480 --> 00:09:07.010
handles some basic error cases,
resolving errors,

00:09:07.010 --> 00:09:08.110
things like that.

00:09:08.110 --> 00:09:10.460
And that was really useful
to reuse as we go

00:09:10.460 --> 00:09:11.520
through this process.

00:09:11.520 --> 00:09:15.233
Because it makes the individual
fragments and

00:09:15.233 --> 00:09:17.940
activity through [? the flow ?]
much easier.

00:09:17.940 --> 00:09:21.930
So you can see here that when
this loads, immediately we

00:09:21.930 --> 00:09:24.870
check for pre-authorization.

00:09:24.870 --> 00:09:28.360
We ensure that we have a Wallet
request ready, to get

00:09:28.360 --> 00:09:30.500
that masked wallet
from the user.

00:09:30.500 --> 00:09:32.150
And [? you can see ?]

00:09:32.150 --> 00:09:35.920
we're using the item itself,
getting the price, and then

00:09:35.920 --> 00:09:38.110
padding it a little bit.

00:09:38.110 --> 00:09:39.710
And then right away
we make a call to

00:09:39.710 --> 00:09:41.480
load the masked wallet.

00:09:41.480 --> 00:09:43.810
And this is done so that as soon
as the user clicks the

00:09:43.810 --> 00:09:46.810
Buy button, they're either
presented with the chooser

00:09:46.810 --> 00:09:50.560
dialogue, or they go right to
the confirmation, if it loads

00:09:50.560 --> 00:09:52.900
successfully the first time.

00:09:52.900 --> 00:09:54.390
There's no waiting.

00:09:54.390 --> 00:09:55.295
And that's what we
really liked.

00:09:55.295 --> 00:09:58.995
It's a very quick experience.

00:09:58.995 --> 00:10:02.790
So in that fragment itself, we
have to deal with some changes

00:10:02.790 --> 00:10:05.340
in the masked wallet possibly.

00:10:05.340 --> 00:10:09.820
So if it's successful, we check
to see if we're ready to

00:10:09.820 --> 00:10:12.970
go, effectively, if the user
has clicked Buy or not.

00:10:12.970 --> 00:10:15.200
If we are, we launch right into
the confirmation page.

00:10:15.200 --> 00:10:17.750
And all that data is ready
for us to use.

00:10:17.750 --> 00:10:22.180
If not, we store the connection
result for later

00:10:22.180 --> 00:10:25.610
and just wait.

00:10:25.610 --> 00:10:27.340
NASIR KAHN: You wait for the
user to click on the button

00:10:27.340 --> 00:10:29.680
and then you resolve the
connection result.

00:10:29.680 --> 00:10:31.220
JOSHUA KROHN: So as soon as
I hit Buy, we have this

00:10:31.220 --> 00:10:33.070
convenient method, Buy
with Google Wallet.

00:10:33.070 --> 00:10:34.060
NASIR KAHN: Um-hum.

00:10:34.060 --> 00:10:35.060
JOSHUA KROHN: We'll
check to make sure

00:10:35.060 --> 00:10:36.910
Wallet's not disabled.

00:10:36.910 --> 00:10:40.030
If they have the Wallet
previously loaded, we go right

00:10:40.030 --> 00:10:41.910
into the confirmation page.

00:10:41.910 --> 00:10:45.140
And then if there's any
outstanding issue, we don't

00:10:45.140 --> 00:10:48.010
have a valid connection result,
or Wallet is connected

00:10:48.010 --> 00:10:51.550
but we don't have a masked
wallet, we dropped back into a

00:10:51.550 --> 00:10:55.280
shared method to resolve
unsuccessful connections.

00:10:55.280 --> 00:10:58.130
And that's going to fall back
into that MaskedWalletLoaded

00:10:58.130 --> 00:11:00.910
method, so that as soon as we
get a valid result, they're

00:11:00.910 --> 00:11:03.970
immediately sent to
the confirmation.

00:11:03.970 --> 00:11:05.795
So it's all very easy.

00:11:05.795 --> 00:11:06.720
NAGESH SUSARTA: Yeah, perfect.

00:11:06.720 --> 00:11:09.090
NASIR KAHN: Very nice.

00:11:09.090 --> 00:11:12.600
JOSHUA KROHN: So here is the
actual confirmation screen

00:11:12.600 --> 00:11:14.460
that gets displayed.

00:11:14.460 --> 00:11:16.560
And again, we're extending the
same Wallet fragments.

00:11:16.560 --> 00:11:19.410
You don't have to worry about
managing the connection, for

00:11:19.410 --> 00:11:21.640
start or pause or anything
like that.

00:11:21.640 --> 00:11:25.660
And all we have to do is
onCreate, we're going to pull

00:11:25.660 --> 00:11:30.135
the masked wallet out of the
intent that we sent.

00:11:30.135 --> 00:11:34.350
This is a async task that we set
up that's going to go get

00:11:34.350 --> 00:11:39.830
shipping data for the user,
based on their country, their

00:11:39.830 --> 00:11:42.560
localities, their state--

00:11:42.560 --> 00:11:45.360
or if they're foreign,
other locality--

00:11:45.360 --> 00:11:47.790
and return all valid shipping
options for that item

00:11:47.790 --> 00:11:48.600
specifically.

00:11:48.600 --> 00:11:50.500
So we can give them their
rate-based shipping and only

00:11:50.500 --> 00:11:53.190
give them only relevant
cheap options.

00:11:53.190 --> 00:11:55.010
NASIR KAHN: Very nice.

00:11:55.010 --> 00:11:57.300
JOSHUA KROHN: So at this point,
as Nagesh showed, you

00:11:57.300 --> 00:11:59.260
can change your payment
method.

00:11:59.260 --> 00:12:01.340
You can change your address.

00:12:01.340 --> 00:12:03.590
So we have to listen
for these changes.

00:12:03.590 --> 00:12:07.720
So when you click that button,
we call changeMaskedWallet.

00:12:07.720 --> 00:12:11.060
And then we handle
these results.

00:12:11.060 --> 00:12:14.280
When that comes back, we'll get
it, pull the wallet out of

00:12:14.280 --> 00:12:18.240
the intent, and repopulate
the data on the screen.

00:12:18.240 --> 00:12:21.200
I've taken that out because
there's a lot of code there.

00:12:21.200 --> 00:12:23.490
NASIR KAHN: Yeah, yeah.

00:12:23.490 --> 00:12:25.660
JOSHUA KROHN: So then that's
all we have to do.

00:12:25.660 --> 00:12:28.010
At that point, once we get that
masked wallet back, it

00:12:28.010 --> 00:12:30.390
dynamically populates
everything for us.

00:12:30.390 --> 00:12:31.890
And we're just waiting
for the user to

00:12:31.890 --> 00:12:33.580
confirm their purchase.

00:12:33.580 --> 00:12:37.210
Once they hit Confirm, we make
a call to getFullWallet.

00:12:37.210 --> 00:12:39.060
We show them a loading
dialogue while it

00:12:39.060 --> 00:12:42.970
does that and wait.

00:12:42.970 --> 00:12:44.620
But when we call getFullWallet,
we're just

00:12:44.620 --> 00:12:48.020
going to grab their state and
country again from the masked

00:12:48.020 --> 00:12:51.660
wallet, so that we can get
shipping and taxes, so we can

00:12:51.660 --> 00:12:54.310
calculate an accurate total.

00:12:54.310 --> 00:12:57.980
We're going to use the
createFullWallet method that

00:12:57.980 --> 00:13:04.090
we have to create that
request and load it.

00:13:04.090 --> 00:13:06.260
So at that point, all
we do is wait.

00:13:06.260 --> 00:13:09.790
And once we get a successful
result, we can make a call out

00:13:09.790 --> 00:13:13.050
to process the payment or handle
any incoming errors.

00:13:13.050 --> 00:13:16.110
And again, it all calls
back into itself.

00:13:16.110 --> 00:13:18.400
So if they have to reload the
full wallet for any reason,

00:13:18.400 --> 00:13:20.560
it'll call back
onFullWalletLoaded.

00:13:20.560 --> 00:13:22.400
We'll get the success, and then
it'll hit the process

00:13:22.400 --> 00:13:24.600
payment again.

00:13:24.600 --> 00:13:28.125
Processing the payment is as
easy as grabbing the full

00:13:28.125 --> 00:13:30.970
wallet, pulling the
info out here.

00:13:30.970 --> 00:13:33.280
You can see some of the
info in here that

00:13:33.280 --> 00:13:35.190
we're pulling out.

00:13:35.190 --> 00:13:38.550
At that point, we build a
simple name-value pair

00:13:38.550 --> 00:13:44.820
document and post that payment
out to our servers.

00:13:44.820 --> 00:13:48.830
So you see here's our simple
async task that takes in that

00:13:48.830 --> 00:13:51.220
list of params.

00:13:51.220 --> 00:13:55.100
We're going to use HTTPPost to
post that out, receive the

00:13:55.100 --> 00:13:58.116
result that we get back
from Braintree--

00:13:58.116 --> 00:13:59.620
that's our payment processor--

00:13:59.620 --> 00:14:03.950
and then the subsequent order
processing on our end, set the

00:14:03.950 --> 00:14:09.040
transaction status based on that
response, and then send

00:14:09.040 --> 00:14:13.340
it up to notify Google Wallet
what the status was, and then

00:14:13.340 --> 00:14:14.810
alert the user.

00:14:14.810 --> 00:14:17.410
So you'll see here there's a
utility method in the Wallet

00:14:17.410 --> 00:14:20.280
client to post back
to Google Wallet.

00:14:20.280 --> 00:14:22.670
We send the transaction ID and
the status we got back from

00:14:22.670 --> 00:14:24.610
our server.

00:14:24.610 --> 00:14:27.540
And then we start the
OrderCompleteActivity to show

00:14:27.540 --> 00:14:30.490
the user either their order
data, or if there was an

00:14:30.490 --> 00:14:33.250
error, we push the
error to there.

00:14:33.250 --> 00:14:35.926
And that's the whole flow.

00:14:35.926 --> 00:14:37.600
NASIR KAHN: Very nice.

00:14:37.600 --> 00:14:39.240
JOSHUA KROHN: Their order's
been placed.

00:14:39.240 --> 00:14:40.120
It's in our system.

00:14:40.120 --> 00:14:42.360
And it's already been dispatched
to our fulfillment

00:14:42.360 --> 00:14:43.410
at that point.

00:14:43.410 --> 00:14:45.080
So they should get an
email very quickly.

00:14:45.080 --> 00:14:48.820
And it will be fulfilled same
business day usually.

00:14:48.820 --> 00:14:49.580
NASIR KAHN: This is awesome.

00:14:49.580 --> 00:14:50.180
This is awesome.

00:14:50.180 --> 00:14:52.760
So, Josh, you just walked
through the entire Instant Buy

00:14:52.760 --> 00:14:55.140
flow in what, about five
minutes or so?

00:14:55.140 --> 00:14:55.510
NAGESH SUSARTA: Yeah.

00:14:55.510 --> 00:14:56.380
NASIR KAHN: That's
pretty much it.

00:14:56.380 --> 00:14:56.760
So this is--

00:14:56.760 --> 00:14:58.320
NAGESH SUSARTA: You've condensed
it very, very---

00:14:58.320 --> 00:14:59.120
NASIR KAHN: Nicely.

00:14:59.120 --> 00:15:03.510
NAGESH SUSARTA: And I should
ask you this question.

00:15:03.510 --> 00:15:07.020
Which other APIs in Google Play
services are you using?

00:15:07.020 --> 00:15:10.530
Because I saw a task, which was
like create a Geofence.

00:15:10.530 --> 00:15:13.320
And I was very excited
to use it.

00:15:13.320 --> 00:15:17.560
And I would love to know what
other APIs are you using from

00:15:17.560 --> 00:15:19.020
Google Play Services.

00:15:19.020 --> 00:15:21.700
JOSHUA KROHN: We really like
Google Play Services, because

00:15:21.700 --> 00:15:27.080
it lets us use new APIs on all
the devices we target.

00:15:27.080 --> 00:15:29.850
We target from API
level 10 and up.

00:15:29.850 --> 00:15:31.810
And I think Google Play Services
goes back to API

00:15:31.810 --> 00:15:33.950
level eight.

00:15:33.950 --> 00:15:36.940
So effectively every one of our
users can use all of the

00:15:36.940 --> 00:15:39.290
new features that
gets introduced.

00:15:39.290 --> 00:15:42.490
So at this point, we are
using Google+ sign-in.

00:15:42.490 --> 00:15:45.320
We use that for cloud backups
and restores.

00:15:45.320 --> 00:15:47.810
And we're looking at it
enhancing that pretty soon to

00:15:47.810 --> 00:15:51.200
add +1 support and shared
app activities.

00:15:51.200 --> 00:15:53.810
We're also using the new
location-based APIs--

00:15:53.810 --> 00:15:56.730
the Fused Location Provider that
was demo'ed at I/O this

00:15:56.730 --> 00:16:01.690
year, the Activity Recognition
client, and then the Geofences

00:16:01.690 --> 00:16:02.990
themselves.

00:16:02.990 --> 00:16:05.300
The Geofences is something
that's been really popular

00:16:05.300 --> 00:16:09.600
with people, because it lets
them go hands off.

00:16:09.600 --> 00:16:11.030
NAGESH SUSARTA: So what can
I do with it exactly?

00:16:11.030 --> 00:16:12.850
Can you give an example?

00:16:12.850 --> 00:16:13.130
JOSHUA KROHN: Yeah.

00:16:13.130 --> 00:16:17.260
So we let you select a location,
either via search or

00:16:17.260 --> 00:16:21.030
selecting it on the map, and
then define a radius for that,

00:16:21.030 --> 00:16:23.390
obviously, to create
your fence.

00:16:23.390 --> 00:16:25.460
Then you can set your conditions
so that when you go

00:16:25.460 --> 00:16:29.310
into or leave that place, a
defined series of actions is

00:16:29.310 --> 00:16:30.830
run for you.

00:16:30.830 --> 00:16:35.630
So you can use it to say, when
you get to work, you can make

00:16:35.630 --> 00:16:36.810
sure Wi-Fi's on.

00:16:36.810 --> 00:16:38.370
Maybe you're using Bluetooth
in your car.

00:16:38.370 --> 00:16:39.210
You can turn it off.

00:16:39.210 --> 00:16:41.190
And you can send a text to your
wife to let her know you

00:16:41.190 --> 00:16:42.150
got there safely.

00:16:42.150 --> 00:16:43.540
NAGESH SUSARTA: Nice.

00:16:43.540 --> 00:16:45.105
JOSHUA KROHN: These things
all happen automatically.

00:16:45.105 --> 00:16:47.890
And that's something that we're
really excited about.

00:16:47.890 --> 00:16:49.090
And we use quite a bit.

00:16:49.090 --> 00:16:52.380
And we've got a lot of really
good feedback from users on.

00:16:52.380 --> 00:16:54.060
NASIR KAHN: Fantastic.

00:16:54.060 --> 00:16:54.790
All right, great.

00:16:54.790 --> 00:16:55.630
Thank you so much, Josh.

00:16:55.630 --> 00:16:59.340
Thanks for a nice demo and
walk through of the code.

00:16:59.340 --> 00:17:02.230
For our viewers, I would
recommend them to go ahead and

00:17:02.230 --> 00:17:05.099
check the NFC Task Launcher
app from Play.

00:17:05.099 --> 00:17:07.190
Play around with it and
see how it looks.

00:17:07.190 --> 00:17:09.950
If you are a developer or a
merchant who is selling

00:17:09.950 --> 00:17:13.040
physical goods or services
on Android, then this

00:17:13.040 --> 00:17:14.150
is the API for you.

00:17:14.150 --> 00:17:16.470
I would recommend
you go to a URL,

00:17:16.470 --> 00:17:17.720
getInstantBuy.withgoogle.com.

00:17:19.624 --> 00:17:22.932
One more time,
getInstantBuy.withgoogle.com.

00:17:22.932 --> 00:17:24.720
It's actually an
interest form.

00:17:24.720 --> 00:17:26.200
This is a closed beta as yet.

00:17:26.200 --> 00:17:29.081
So just fill out this form and
somebody from Google will get

00:17:29.081 --> 00:17:30.910
in touch with you.

00:17:30.910 --> 00:17:32.410
And you can start
out from there.

00:17:32.410 --> 00:17:35.900
And you might as well have an
app, just like Josh's app.

00:17:35.900 --> 00:17:38.420
And we'll be more than happy
to show it to our viewers.

00:17:38.420 --> 00:17:40.580
Thank you so much for
listening to us.

00:17:40.580 --> 00:17:41.070
NAGESH SUSARTA: Thank you.

00:17:41.070 --> 00:17:41.560
NASIR KAHN: Bye.

00:17:41.560 --> 00:17:42.810
NAGESH SUSARTA: Bye.

