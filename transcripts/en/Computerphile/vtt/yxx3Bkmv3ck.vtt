WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.589
Having first of all been to Bletchley
Park -  I hope most of you have seen that

00:00:04.589 --> 00:00:09.969
episode which is out there already. We also
recorded some stuff about how the

00:00:09.969 --> 00:00:15.790
listening services, the Y stations, got
onto this new type of traffic which

00:00:15.790 --> 00:00:21.350
eventually needed Colossus to help the
decoding of. This was what later

00:00:21.350 --> 00:00:25.560
became called the Lorenz cipher traffic.
We covered that it was an

00:00:25.560 --> 00:00:27.779
Exclusive-OR kind of cipher

00:00:27.779 --> 00:00:32.000
and that lots of it was picked up at
listening stations and sent back to

00:00:32.000 --> 00:00:41.250
Bletchley Park. They knew that this kind of cipher was 
very vulnerable to attack if any of the German

00:00:41.250 --> 00:00:47.730
operators ever disobeyed orders and sent
out more than one message using exactly

00:00:47.730 --> 00:00:53.280
the same key settings on this Lorenz
cipher machine. And preferably it would

00:00:53.280 --> 00:01:00.000
be good if the naughty German operator
sent out two long messages with the same

00:01:00.000 --> 00:01:05.110
key because then a very special
technique could be used to try and

00:01:05.110 --> 00:01:10.650
disentangle what these messages were, without
even needing to know the key at all. Now

00:01:10.650 --> 00:01:13.369
that's an amazing property of Exclusive-OR.

00:01:13.369 --> 00:01:18.180
You could perhaps even say it was a
weakness or a flaw but in wanting to

00:01:18.180 --> 00:01:22.950
explain to you exactly how this worked I
thought we'd better do it, first of all,

00:01:22.950 --> 00:01:28.920
with a simple example. If I take the
letter 'A' - and don't forget we're using 

00:01:28.920 --> 00:01:36.400
5-hole teleprinter code, as discussed in our
video on 5-hole paper tape. Let us take

00:01:36.400 --> 00:01:46.030
the letter 'A' and add to it the letter 'Q'.
'A' is 11000

00:01:46.030 --> 00:01:54.190
'Q' is 11101.  And remember the plus inside a
circle means "do a bitwise Exclusive-OR".

00:01:54.190 --> 00:01:58.610
So what we'll get is the
following, that 1 Exclusive OR'd

00:01:58.610 --> 00:02:05.850
with that 1. Exclusive-OR  says if it's the same thing 
you're combining, then the answer is 0. If they're 

00:02:05.850 --> 00:02:19.350
different it's a 1. So what this comes out to be then:
1 with 1 - another zero - 0 with a 1 and that's  1 ... 0 ... 1 

00:02:19.350 --> 00:02:25.280
So in fact what's actually happened - and at this stage 
you have to look back in your handy teleprinter code

00:02:25.280 --> 00:02:31.310
sheet - which we'll be putting out a link
to this.  What on earth is 00101 and the answer is

00:02:31.310 --> 00:02:36.980
yes that's right, it's  'H'. That then, if
you like, that's one of your plaintext

00:02:36.980 --> 00:02:41.720
characters. This could be a key character
supplied by the Lorenz machine. It's

00:02:41.720 --> 00:02:45.540
been randomly generated somehow. It goes
without saying that people at Bletchley

00:02:45.540 --> 00:02:50.420
Park doing this stuff didn't even need
to deliberately commit this stuff to

00:02:50.420 --> 00:02:55.500
memory, they just knew it. After hours and
hours and hours they just knew that 'T'

00:02:55.500 --> 00:03:01.320
combined with 'Z' gave you 'E'.  What's
happening then here, as you take

00:03:01.320 --> 00:03:06.299
successive plaintext letters, successive
randomly generated - you hope - key letters

00:03:06.299 --> 00:03:10.920
is that you're ending up with a sequence
of plaintext letters. I'll call this the

00:03:10.920 --> 00:03:16.739
plaintext stream. This, of course, is the key
stream. In the case of the Lorenz cipher

00:03:16.739 --> 00:03:22.970
machine it's pseudo-randomly generated.
It was not mathematically totally random,

00:03:22.970 --> 00:03:27.579
of course, there would be a repeat cycle,
but good enough to be called pseudo-random.

00:03:27.579 --> 00:03:36.440
Out here, of course, you end up with a ciphertext
stream. One thing that perhaps I should remind you of,

00:03:36.440 --> 00:03:37.970
if you're not aware of it already,

00:03:37.970 --> 00:03:46.560
is the sort of self-reciprocal nature of
an Exclusive-OR system and an Exclusive-OR 

00:03:46.560 --> 00:03:50.710
cipher. We've generated a ciphertext
character called 'E'

00:03:50.710 --> 00:03:55.350
by adding together, under Exclusive-OR
conditions, a character 'T' with a character 'Z'.

00:03:55.350 --> 00:04:03.710
And you might say well what would happen
if I were to add the key character 'Z'

00:04:03.710 --> 00:04:10.370
to that once again? OK, so you've got the
ciphertext character but deliberately again you

00:04:10.370 --> 00:04:18.299
re-key it with the same character 'Z'.
You will end up back with 00001 which, of

00:04:18.299 --> 00:04:20.420
course, is 'T'.

00:04:20.420 --> 00:04:24.470
So in other words this thing almost
cycles around. You get 'T' Exclusive-OR'd

00:04:24.470 --> 00:04:30.919
with 'Z' gives you an 'E'. 'E' Exclusive-OR'd with 'Z' 
will give you back 'T', and so on. What we can

00:04:30.919 --> 00:04:36.070
now say is; "Let's try and find the
weakness in this cipher" because it's been

00:04:36.070 --> 00:04:40.669
known about ever since Victorian times 
- since the late 19th century. You start

00:04:40.669 --> 00:04:46.000
off saying the following: "I'm just going to 
call the plaintext stream of characters P".

00:04:46.000 --> 00:04:53.660
It's not the character 'P' - it's not in single quotes - 
It's just the plaintext stream: 'A', 'B', 'C', 'T' whatever 

00:04:53.660 --> 00:05:03.830
- that gets Exclusive-OR'd with the key stream, 
which I'm going to call K. and we get C, the 
ciphertext stream. Now - special cases within those

00:05:03.830 --> 00:05:08.410
streams that you have to bear in mind:
when you come to look at the detail for any

00:05:08.410 --> 00:05:13.220
particular plaintext stream, key stream
ciphertext stream - one or two very special

00:05:13.220 --> 00:05:18.410
cases are so important and here's one of
them. If you take any plaintext

00:05:18.410 --> 00:05:23.669
character - I'll take 'A' but it could be 
anything - and you Exclusive-OR it with itself.

00:05:23.669 --> 00:05:33.340
Anything Exclusive-OR'd with itself, if it matches,
gives zero. 'A' with 'A', or 'B' with 'B, or 'Z' with 'Z'
will always give you five beautiful zeroes,

00:05:33.340 --> 00:05:40.740
That, nowadays is called the NUL character. Many of 
you will know even ASCII has got a NUL character.
What happens to your terminal if

00:05:40.740 --> 00:05:45.600
you send it a NUL character? Well mine just ignores it  
and I think that's the way most terminals are set up these

00:05:45.600 --> 00:05:50.000
days but, yeah, NUL characters were there in 
teleprinter streams as well. Bletchley

00:05:50.000 --> 00:05:54.440
Park certainly did not want a NUL
character that was generated to be

00:05:54.440 --> 00:06:02.430
ignored and so they invented their own notation, 
which you have to remember, which says the NUL 
character is always signalled  by a

00:06:02.430 --> 00:06:07.280
forward slash. What's the other special
case then?  The other special case is if

00:06:07.280 --> 00:06:15.100
you ever get to a situation of combining,
shall we say, the letter 'A' with the /

00:06:15.100 --> 00:06:21.229
character, the NUL. If you think about it 
- Exclusive-ORing any of those zeros with

00:06:21.229 --> 00:06:29.850
whatever pattern 'A' is - it's like adding 0. In other 
words it leaves the 'A' totally unchanged. So 'A' added

00:06:29.850 --> 00:06:35.280
onto the NUL character is 'A' ; 'K' added on to 
the NUL character is 'K'. Anything added onto the

00:06:35.280 --> 00:06:40.150
NUL character remains itself. So, I'll put a box 
around these and let's just bear those in mind

00:06:40.150 --> 00:06:46.160
for later on. Where's the problem come then?
OK - let's first of all take

00:06:46.160 --> 00:06:53.070
this equation - Numberphile stuff this! Hope we're 
not allergic to equations. What I

00:06:53.070 --> 00:06:57.270
can do, look, is this: treat it just like a
mathematical equation.  P + K, on the

00:06:57.270 --> 00:07:03.520
left. I'm now going to add on another K
to that and that doesn't matter - it won't

00:07:03.520 --> 00:07:08.840
change anything so long as I also add on
K to the right. Basically like your teacher

00:07:08.840 --> 00:07:18.530
used to say "Add x to both sides", or whatever.  So, fine,
but look what we've just found: any individual

00:07:18.530 --> 00:07:21.350
character Exclusive-OR'd with itself gives a NUL.

00:07:21.350 --> 00:07:26.960
Any time you combine a NUL with any character 
- it gives 'any character' back again.

00:07:26.960 --> 00:07:33.270
In the more general case, therefore, K
plus K - adding together identical cipher-key

00:07:33.270 --> 00:07:37.930
letters - will give you a stream of NULs
Those stream of NULs, when added to the

00:07:37.930 --> 00:07:42.760
plaintext just gives you back the plaintext.
It doesn't alter anything in the plaintext.

00:07:42.760 --> 00:07:50.240
So it's almost like - Exclusive-OR's like a minus
sometimes It's like K minus K, it's a zero, it  cancels

00:07:50.240 --> 00:07:56.070
out. Yeah, Exclusive-OR is weird like that.
It's like addition without carry; it's like

00:07:56.070 --> 00:08:02.590
subtraction without borrowing. It's symmetric.
So, fine, the  K + K cancels out, so in other

00:08:02.590 --> 00:08:07.050
words what we can say is if you add the
key back to the ciphertext you get the

00:08:07.050 --> 00:08:14.300
plaintext. We did an example of that, So far what
could be wrong with this? Haha! here's the problem:

00:08:14.300 --> 00:08:22.670
suppose Sean sends me the first plaintext
message, P1. So instead of P = C + K

00:08:22.670 --> 00:08:28.860
I'm gonna write P1 gives me ciphertext 
one [C1] plus K, and if there was a

00:08:28.860 --> 00:08:32.660
second plaintext then that, when added onto K,

00:08:32.660 --> 00:08:38.880
gives the second ciphertext.  So I'm just
rearranging the equation like that P1, P2,

00:08:38.880 --> 00:08:45.880
ciphertext one [C1] ciphertext two [C2] gives
K on that side. Now do yet another Exclusive-OR

00:08:45.880 --> 00:08:55.860
addition between left-hand sides and
right-hand sides and what you get is P1 + P2

00:08:55.860 --> 00:09:10.070
- Exclusive-OR plus - equals C1 Exclusive-OR'd with
C2, Exclusive-OR'd with K, Exclusive-OR'd with K. 

00:09:10.070 --> 00:09:13.910
Now as we've just discovered that cancels out

00:09:13.910 --> 00:09:21.040
K + K - you can ignore it. So the net result of
all of this is as follows: if you send

00:09:21.040 --> 00:09:28.030
two separate messages using exactly the
same key, the key cancels out and what you

00:09:28.030 --> 00:09:32.790
end up with is something where, if you
were to take the ciphertext that

00:09:32.790 --> 00:09:37.960
you received and intercepted - don't worry
about the key, so long as you know it's the same

00:09:37.960 --> 00:09:42.910
key, somehow or other. Just Exclusive-OR
the two pieces of ciphertext together.

00:09:42.910 --> 00:09:54.340
We'll do that - let's call it D.  So C1 Exclusive-OR'd 
with C2 is D and that must be exactly the same as the two

00:09:54.340 --> 00:10:00.870
plaintexts Exclusive-OR'd with each other.
So essentially then, it's like a mashup

00:10:00.870 --> 00:10:06.340
It's like an Exclusive-OR mashup of two ciphertexts
give you exactly the same mashed-up

00:10:06.340 --> 00:10:11.910
characters as you would have got by mashing
up the two plaintexts together with

00:10:11.910 --> 00:10:20.110
Exclusive-OR. Therefore it follows if P1 + P2
is the same as this D, I've invented,

00:10:20.110 --> 00:10:26.240
then by shuffling around and adding
P2 to both sides, what I'm saying is

00:10:26.240 --> 00:10:32.410
if I can guess a piece of plaintext called P2 
and I push it through Exclusive-OR with 

00:10:32.410 --> 00:10:37.890
this D thing - which I'll do for you in a minute -
I get a piece of P1 back. So if I get some

00:10:37.890 --> 00:10:42.880
plausible plaintext from message number
two and if it gives me plausible

00:10:42.880 --> 00:10:47.630
plaintext from message number one, then I'm
winning because, although they might be

00:10:47.630 --> 00:10:52.220
slightly different, a piece of good sense
in one of them might give you something

00:10:52.220 --> 00:10:53.910
you recognize in the other.

00:10:53.910 --> 00:10:57.270
Well there's nothing like a real-life
example to make this come alive and make

00:10:57.270 --> 00:10:58.180
you believe it really does work.

00:10:58.180 --> 00:11:05.960
Sean sent me a 21-character email message
with the challenge to break this top

00:11:05.960 --> 00:11:10.770
secret cipher but I knew he'd done it like
this and I experienced just like in the

00:11:10.770 --> 00:11:17.230
war-time incidents - sort of phone him up and say: "Sean 
my reception apparatus, and my program, wasn't working properly

00:11:17.230 --> 00:11:21.560
that ciphertext you just sent me didn't
seem to work at all. Something's gone

00:11:21.560 --> 00:11:28.910
wrong. Can you send it to me again?" And once
again you hope, like before, that Sean does

00:11:28.910 --> 00:11:32.720
not send exactly the same message again
but sends a slightly different one,

00:11:32.720 --> 00:11:38.170
because that makes things much much simpler, 
as we'll see later. So if we concentrate

00:11:38.170 --> 00:11:42.260
now on this top block of stuff here. Here is

00:11:42.260 --> 00:11:47.100
ciphertext one just as in good old
wartime Morse code tradition I'm

00:11:47.100 --> 00:11:51.990
breaking this string of characters up
into blocks of five. That was

00:11:51.990 --> 00:11:55.180
traditional because, of course, it makes it so
much easier to read things if it's

00:11:55.180 --> 00:11:59.709
broken up in this way, So these spaces
that you see, between every five, they're not

00:11:59.709 --> 00:12:05.470
really there. They're just to help you read. If
you ever do get a genuine word-space

00:12:05.470 --> 00:12:10.000
character, and that does exist in the
5-hole code, then Bletchley Park had their

00:12:10.000 --> 00:12:16.740
teletypes all wired up to display a 9.
And that 9 meant a word-space. Here's the first

00:12:16.740 --> 00:12:23.740
ciphertext "W + X A E  blah, blah blah blah". Twenty-one 
characters of it and then I say to Sean "Ooh! Ooh!, I didn't

00:12:23.740 --> 00:12:25.110
get it - send it again"

00:12:25.110 --> 00:12:31.660
W M J O G D W O  and so on. What I
can tell from that, straight away, is

00:12:31.660 --> 00:12:36.350
that since both ciphertexts started with
a 'W' - and since they use the same key -

00:12:36.350 --> 00:12:41.290
then I don't, at the moment, know what the plaintext
letter was that started them, but I know it was

00:12:41.290 --> 00:12:49.459
the same, in both cases. Now I've shown, of course, that 'W' 
Exclusive-OR'd with 'W' - a thing with itself -  gives the forward 

00:12:49.459 --> 00:12:54.550
slash [/], the  NUL character, So what I've done
here between C1 and C2 is what I've just been through

00:12:54.550 --> 00:13:01.010
on the theory. Exclusive-OR them and get this
magical thing called D - the mashup

00:13:01.010 --> 00:13:08.160
that's what I always call it -  of the two ciphertexts.
Now successively on either side of the

00:13:08.160 --> 00:13:13.519
mashed-up ciphertexts, write down what
you think is a plausible piece of plain-

00:13:13.519 --> 00:13:21.589
text and push that back with Exclusive-OR
through the D string and see if anything

00:13:21.589 --> 00:13:26.510
sensible comes out for the other plain
text.  Now, I'm going to start here on this

00:13:26.510 --> 00:13:33.120
second block down on P2 - plaintext 2. 
I'm assuming that Sean was really fed up

00:13:33.120 --> 00:13:37.769
with plaintext two, when he had to
re-transmit it, and all of his politeness will

00:13:37.769 --> 00:13:44.300
have left him. He will have started the
second email message with either a grunt or

00:13:44.300 --> 00:13:49.230
maybe just a brief "Hi!" -  that's my guess
anyway. So, I'm guessing that in plaintext

00:13:49.230 --> 00:13:55.910
two he might have said "Hi space Dave" or something 
like that. So here you see the 9 for the word-space, 

00:13:55.910 --> 00:14:01.800
H I 9 D A V. Push all of that line upwards
through the corresponding character

00:14:01.800 --> 00:14:07.970
combining them with Exclusive-OR. What comes
out?  And the answer is HELLO - Oh! I like

00:14:07.970 --> 00:14:13.760
that!  Now you see this is where the cryptographers, 
y'know, heartbreak and joy .... If you get it

00:14:13.760 --> 00:14:17.690
right it's wonderful but if you make the
wrong guess you've got to back off and try

00:14:17.690 --> 00:14:18.500
something different.

00:14:18.500 --> 00:14:24.620
Very frustrating. Strangely in this example I seem 
to be making all the right guesses :-), so HI9DAV

00:14:24.620 --> 00:14:30.839
comes back as being HELLO9 in other words HELLO 
followed by a space. Ah! so in the first one he probably

00:14:30.839 --> 00:14:37.240
calls me DAVE as well?  Maybe? Not sure - but
we can at least take the DAV here and

00:14:37.240 --> 00:14:40.279
promote it to the top line and next time

00:14:40.279 --> 00:14:48.240
around we say if P1 is HELLO9DAV push that
through the Exclusive-OR and the answer is then

00:14:48.240 --> 00:14:54.980
P2 will be HI9 - HI, DAVE, 9 - another space  
This is looking good so he

00:14:54.980 --> 00:15:00.189
was being all informal! He said "Hi Dave" in
plaintext 2 and it looks like the start of another

00:15:00.189 --> 00:15:03.430
word here - S,  But we don't know anything about that yet.

00:15:03.430 --> 00:15:09.199
Right, now you have - well, in the 1940s - several 
cigarettes, many more cups of coffee. Now

00:15:09.199 --> 00:15:10.809
where do we go from here ?

00:15:10.809 --> 00:15:16.139
Could it be the case that Sean is
using formal language in plaintext 1 ?

00:15:16.139 --> 00:15:18.389
"Hello David" -  how about that.  So we do that -

00:15:18.389 --> 00:15:24.100
Hey! look at this! The bottom then comes
out to be HI DAVE SEE - S double E

00:15:24.100 --> 00:15:29.339
Could it be  "See you soon" ? "See you later" ?
Who knows? But what we can do is, if we believe

00:15:29.339 --> 00:15:36.870
the SEE is right, and is a correct word,  we promote that
up to the top line and make it be: HELLO DAVID SEE

00:15:36.870 --> 00:15:42.319
put through an Exclusive-OR it comes down on
the lower line, on the second plaintext line 

00:15:42.319 --> 00:15:51.759
HI DAVE SEE YOU  Wahay!! Bingo! "YOU"  He did, he said:
HI DAVE SEE YOU. Now there's a well-known

00:15:51.759 --> 00:15:57.040
English phrase "See you later" so we try, of course, LATE
down here,

00:15:57.040 --> 00:16:01.750
propagate that back up through Exclusive-OR
and you get the word YOU, separated with spaces

00:16:01.750 --> 00:16:06.250
This is a fabulous method - of course it
will only work for as long as the shorter

00:16:06.250 --> 00:16:10.509
message doesn't run out. I can only guess that at the top

00:16:10.509 --> 00:16:14.670
message, which is a bit longer, it starts
with L so almost certainly that one

00:16:14.670 --> 00:16:19.290
would have said LATER as well. But we've triumphed! 
And where the real triumph comes, is for

00:16:19.290 --> 00:16:24.800
these 21 characters, you can now go back
to one of the equations I wrote down for

00:16:24.800 --> 00:16:30.379
you and say we've got ciphertext 2. We've
worked out plaintext 2,  Plaintext 2

00:16:30.379 --> 00:16:37.889
plus ciphertext 2 will give you the key. And here it is. 
Was it generated by a machine? No - I made it up! 

00:16:37.889 --> 00:16:43.730
But here it is and that's the moment at which you
say "That's fantastic, we can start to work out.

00:16:43.730 --> 00:16:48.839
now, exactly what that wretched machine
might be doing that's generating this

00:16:48.839 --> 00:16:57.100
pseudo-random key."

