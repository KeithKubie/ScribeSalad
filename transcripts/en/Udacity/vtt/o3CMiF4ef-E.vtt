WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:04.703
In this section, we'll be talking about some common algorithms. I'll explain to

00:00:04.703 --> 00:00:08.135
you the problem that we want to solve. I'll explain to you the general

00:00:08.135 --> 00:00:11.349
algorithm and then I'll leave it to you to implement it in Java and then we'll

00:00:11.349 --> 00:00:16.432
talk together about the implementation. Let's start with the algorithm to

00:00:16.432 --> 00:00:21.655
compute the sum of values in an ArrayList. Suppose we have a bunch of pictures

00:00:21.655 --> 00:00:25.880
that we want to arrange horizontally, the total width of all of them depends on

00:00:25.880 --> 00:00:32.278
the sum of the widths of all of the individual ones. To compute the sum, we'll

00:00:32.278 --> 00:00:36.908
of course need a variable to hold it. And I'll just write it in a pseudo-code

00:00:36.908 --> 00:00:41.209
here. Now for each element in the array, add to the sum to measure of that

00:00:41.209 --> 00:00:46.281
element. And I'm writing it in this generic form so that you can reuse the

00:00:46.281 --> 00:00:51.670
algorithm for other situations. In our case, the element is a picture in the

00:00:51.670 --> 00:00:56.590
ArrayList of pictures. And the measure is the width, and here we're summing up

00:00:56.590 --> 00:01:01.100
the various widths. But in other situations you may be, if wanting to compute

00:01:01.100 --> 00:01:05.630
some other things, maybe the prices of some articles. So that's the general

00:01:05.630 --> 00:01:09.830
algorithm, now your job will be to complete code for the specific case of

00:01:09.830 --> 00:01:14.453
summing the width of pictures. So here I've have set up the ArrayList of

00:01:14.453 --> 00:01:19.048
pictures for you. Here is a statement to print the result and your job will be

00:01:19.048 --> 00:01:25.522
to put in the Java code for the algorithm that I've just described. Have a go

00:01:25.522 --> 00:01:27.270
at it and then we'll compare notes.

