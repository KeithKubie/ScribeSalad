WEBVTT
Kind: captions
Language: en

00:00:01.160 --> 00:00:03.410
SAM DUTTON: These days,
more and more of us

00:00:03.410 --> 00:00:07.070
are experiencing the web
on phones and tablets.

00:00:07.070 --> 00:00:10.050
But the mobile web isn't
just same old thing,

00:00:10.050 --> 00:00:11.440
different devices.

00:00:11.440 --> 00:00:14.040
What we do on the
web is changing.

00:00:14.040 --> 00:00:17.500
In particular, we're using
video on the go more and more

00:00:17.500 --> 00:00:22.140
for entertainment, information,
and real time communication.

00:00:22.140 --> 00:00:23.390
People love video.

00:00:23.390 --> 00:00:26.190
It's estimate that within
three years, more than 80%

00:00:26.190 --> 00:00:29.020
of traffic on the
internet will be video.

00:00:29.020 --> 00:00:31.520
But video takes bandwidth
and doesn't always

00:00:31.520 --> 00:00:34.920
work the same way
across every platform.

00:00:34.920 --> 00:00:38.370
I'm going to show you how to add
video capability to your site

00:00:38.370 --> 00:00:42.090
and ensure the best
experience on any device.

00:00:42.090 --> 00:00:45.630
So how do you get
video on a web page?

00:00:45.630 --> 00:00:48.230
How do you do that on mobile?

00:00:48.230 --> 00:00:50.630
Well, for that we have
the video element.

00:00:50.630 --> 00:00:53.010
And the video element is
a thing of simple beauty.

00:00:53.010 --> 00:00:57.670
Download, decode, and play
video in a few lines of code.

00:00:57.670 --> 00:01:00.510
And because it's just
another DOM element,

00:01:00.510 --> 00:01:04.810
you can do things like change
opacity, add CSS filters,

00:01:04.810 --> 00:01:08.000
and put other elements on top.

00:01:08.000 --> 00:01:12.110
The video element is supported
by over 85% of browsers,

00:01:12.110 --> 00:01:16.990
including all current browsers
on desktop and mobile.

00:01:16.990 --> 00:01:20.320
It's simple to set a
start time and an end

00:01:20.320 --> 00:01:23.760
time for video playback by
adding a fragment to the source

00:01:23.760 --> 00:01:24.700
URL.

00:01:24.700 --> 00:01:26.800
This is useful for
providing multiple views

00:01:26.800 --> 00:01:29.390
on the same video, and
potentially reducing

00:01:29.390 --> 00:01:31.660
download requirements.

00:01:31.660 --> 00:01:37.940
Here we're playing the video
from five to 10 seconds only.

00:01:37.940 --> 00:01:41.340
Now, to ensure your site
can serve segments of video

00:01:41.340 --> 00:01:43.940
without having to
download the whole file,

00:01:43.940 --> 00:01:48.300
make sure Range Requests are
supported on your web server.

00:01:48.300 --> 00:01:51.400
Range requests are enabled
by default on most servers,

00:01:51.400 --> 00:01:55.290
but some hosting services
may turn them off.

00:01:55.290 --> 00:01:58.200
You can check with
the cURL utility.

00:01:58.200 --> 00:02:02.310
This should return a response
that includes an Accept-Ranges

00:02:02.310 --> 00:02:06.310
byte header just like this.

00:02:06.310 --> 00:02:07.050
OK.

00:02:07.050 --> 00:02:09.490
Now, that simple
example is nice,

00:02:09.490 --> 00:02:12.450
but it only points
to one video source.

00:02:12.450 --> 00:02:17.370
And of course, not all browsers
support the same video formats.

00:02:17.370 --> 00:02:21.590
The good news is that MP4 and
WebM cover all modern browsers,

00:02:21.590 --> 00:02:24.450
including all mobile browsers.

00:02:24.450 --> 00:02:27.220
Use the source element
to enable browsers

00:02:27.220 --> 00:02:29.970
to choose from multiple
available formats.

00:02:29.970 --> 00:02:33.200
You can specify video sources
in order of preference.

00:02:33.200 --> 00:02:38.410
Here, Chrome chooses the WebM
file, Safari chooses the MP4.

00:02:38.410 --> 00:02:42.610
No server-side detection
or JavaScript required.

00:02:42.610 --> 00:02:44.800
A quick word about
the video formats.

00:02:44.800 --> 00:02:47.590
MP4 and WebM are
container formats.

00:02:47.590 --> 00:02:49.580
You could think of these
a bit like zip files,

00:02:49.580 --> 00:02:54.000
containing both audio
and video components.

00:02:54.000 --> 00:02:59.250
Most commonly, MP4 stores audio
using AAC compression and video

00:02:59.250 --> 00:03:01.960
using H.264.

00:03:01.960 --> 00:03:07.000
WebM uses VP8 video and Vorbis
audio, or more recently, VP9

00:03:07.000 --> 00:03:09.090
and Opus.

00:03:09.090 --> 00:03:12.410
Now, specifying video
types on the source element

00:03:12.410 --> 00:03:14.970
can really improve performance.

00:03:14.970 --> 00:03:16.860
Let's take a look
at network activity

00:03:16.860 --> 00:03:18.760
for the current example.

00:03:18.760 --> 00:03:21.150
You'll see that
Safari has to download

00:03:21.150 --> 00:03:23.480
a little bit of metadata
from the WebM file

00:03:23.480 --> 00:03:25.610
to sniff the format
to check if it's

00:03:25.610 --> 00:03:27.650
supported, which it is not.

00:03:27.650 --> 00:03:29.990
Now, that requires
one more request,

00:03:29.990 --> 00:03:32.820
a little more processing,
a little more latency,

00:03:32.820 --> 00:03:37.310
which is not good anywhere,
particularly on mobile.

00:03:37.310 --> 00:03:39.600
Adding a type attribute
to a source element

00:03:39.600 --> 00:03:43.530
enables the browser to select
a video source without having

00:03:43.530 --> 00:03:46.760
to download any of
the video to check.

00:03:46.760 --> 00:03:50.670
Let's see how that looks from
the Safari Web Inspector.

00:03:50.670 --> 00:03:51.690
Excellent.

00:03:51.690 --> 00:03:56.880
As you can see, Safari now
only downloads the MP4.

00:03:56.880 --> 00:04:00.280
Now here's another tip for you,
thinking about video types.

00:04:00.280 --> 00:04:02.910
You need to make sure
your server reports

00:04:02.910 --> 00:04:04.820
the right MIME type.

00:04:04.820 --> 00:04:08.840
Otherwise, video source
type checks won't work.

00:04:08.840 --> 00:04:12.600
This should be set correctly,
but you may want to check.

00:04:12.600 --> 00:04:14.920
Here you can see from
the Chrome Dev Tools

00:04:14.920 --> 00:04:19.110
that video WebM was the type
returned for a WebM video,

00:04:19.110 --> 00:04:20.760
just as it should be.

00:04:20.760 --> 00:04:24.500
Want to know what formats are
supported by your browser?

00:04:24.500 --> 00:04:27.950
Try the video
canPlayType method.

00:04:27.950 --> 00:04:30.300
Now, in this
example, canPlayType

00:04:30.300 --> 00:04:34.000
returns an empty string
for the nonsense value Foo,

00:04:34.000 --> 00:04:37.390
maybe for video
WebM, and probably

00:04:37.390 --> 00:04:41.330
for the full container
codec combination.

00:04:41.330 --> 00:04:44.670
Want to know which source
was actually chosen?

00:04:44.670 --> 00:04:47.130
Use the current source property.

00:04:47.130 --> 00:04:50.020
While we're there, let's get
the actual height and width

00:04:50.020 --> 00:04:54.650
of the video using video
width and video height.

00:04:54.650 --> 00:04:57.310
These sizes might be
different from the dimensions

00:04:57.310 --> 00:04:59.530
of the video element
as it's displayed

00:04:59.530 --> 00:05:02.440
on the page in the same way
that images can be displayed

00:05:02.440 --> 00:05:06.860
larger or smaller than
their original size.

00:05:06.860 --> 00:05:09.630
Notice here that the video
dimensions as sized by CSS

00:05:09.630 --> 00:05:13.320
are different from the
original height and width.

00:05:13.320 --> 00:05:15.940
On the subject of
size, a simple point.

00:05:15.940 --> 00:05:18.820
Don't use videos
that are too big.

00:05:18.820 --> 00:05:20.730
Make sure to save
videos with a frame

00:05:20.730 --> 00:05:23.580
size appropriate
to the platform.

00:05:23.580 --> 00:05:25.040
Here's one I got wrong.

00:05:25.040 --> 00:05:29.050
I saved a video screencast
at its original size, 1080

00:05:29.050 --> 00:05:31.330
by 1920 pixels.

00:05:31.330 --> 00:05:32.440
It's enormous.

00:05:32.440 --> 00:05:36.240
Over five megabytes in file
size, and much bigger in frame

00:05:36.240 --> 00:05:39.030
size than it needs
to be for mobile.

00:05:39.030 --> 00:05:41.180
Now, my first impulse
was just to tweak

00:05:41.180 --> 00:05:43.440
the size of the video element.

00:05:43.440 --> 00:05:45.230
But that's a bad idea.

00:05:45.230 --> 00:05:47.380
Much better to save
the video close

00:05:47.380 --> 00:05:49.890
to display size in
the first place.

00:05:49.890 --> 00:05:52.640
Here's the same,
360 by 640 pixels.

00:05:52.640 --> 00:05:57.300
It looks great and it's less
than a third of the file size.

00:05:57.300 --> 00:05:59.650
Now, if it makes sense,
you can use media queries

00:05:59.650 --> 00:06:01.470
to choose a different
video depending

00:06:01.470 --> 00:06:03.940
on the viewport dimensions.

00:06:03.940 --> 00:06:06.380
With a bigger viewport,
you get the bigger video.

00:06:06.380 --> 00:06:09.050
This one's 1280 by 720 pixels.

00:06:09.050 --> 00:06:10.950
Looks good.

00:06:10.950 --> 00:06:13.780
On a phone, you get
the smaller video.

00:06:13.780 --> 00:06:17.500
As you can see, this
one's 480 by 270 pixels.

00:06:17.500 --> 00:06:18.820
Also looks good.

00:06:18.820 --> 00:06:22.460
And again, it's about a
third of the file size.

00:06:22.460 --> 00:06:24.920
Working with
display size in CSS,

00:06:24.920 --> 00:06:30.150
a simple technique for video
is to specify a width and a max

00:06:30.150 --> 00:06:31.310
width.

00:06:31.310 --> 00:06:33.060
That way you get
a preferred size,

00:06:33.060 --> 00:06:37.120
but the video never
overflows its container.

00:06:37.120 --> 00:06:38.590
Don't specify a height.

00:06:38.590 --> 00:06:41.570
The browser will work
that out automatically.

00:06:41.570 --> 00:06:44.280
That way you'll keep
the right aspect ratio.

00:06:44.280 --> 00:06:47.130
It's much easier and less
error prone than trying

00:06:47.130 --> 00:06:49.790
to calculate it manually.

00:06:49.790 --> 00:06:52.470
There are similar techniques
available for embedded YouTube

00:06:52.470 --> 00:06:53.800
videos.

00:06:53.800 --> 00:06:56.460
Compare the unresponsive
sample here--

00:06:56.460 --> 00:06:59.930
bleh-- with the
responsive version.

00:06:59.930 --> 00:07:01.020
Nice.

00:07:01.020 --> 00:07:05.530
All done with some pretty
simple HTML and CSS.

00:07:05.530 --> 00:07:10.090
Now, given that mobile usage is
growing at an explosive rate,

00:07:10.090 --> 00:07:13.410
it's crucial to think about
how video works differently

00:07:13.410 --> 00:07:17.210
on mobile devices versus
desktop or laptop.

00:07:17.210 --> 00:07:19.580
In particular,
device orientation

00:07:19.580 --> 00:07:23.430
is not an issue on desktop
monitors or laptops,

00:07:23.430 --> 00:07:26.860
but is hugely important
when considering web page

00:07:26.860 --> 00:07:29.470
design for mobile and tablets.

00:07:29.470 --> 00:07:32.780
Safari on iPhone does a good job
of switching between portrait

00:07:32.780 --> 00:07:35.200
and landscape orientation.

00:07:35.200 --> 00:07:38.750
Device orientation on an
iPad and Chrome on Android

00:07:38.750 --> 00:07:41.750
is different, because
video is played back right

00:07:41.750 --> 00:07:44.290
in the video
element on the page.

00:07:44.290 --> 00:07:46.860
For example, without
any customization,

00:07:46.860 --> 00:07:50.670
a video playing on an iPad
in landscape orientation

00:07:50.670 --> 00:07:53.370
looks like this.

00:07:53.370 --> 00:07:56.120
On Android and
desktop browsers, you

00:07:56.120 --> 00:07:59.210
can use the JavaScript
full screen API.

00:07:59.210 --> 00:08:01.160
In this example, there's
a thumbnail image

00:08:01.160 --> 00:08:02.630
for each of two videos.

00:08:02.630 --> 00:08:05.600
You can tap on either to
play back full screen.

00:08:05.600 --> 00:08:08.400
And that's a nice way to
include video in a page

00:08:08.400 --> 00:08:11.480
without the user having to
download the video until they

00:08:11.480 --> 00:08:13.920
want to play it.

00:08:13.920 --> 00:08:16.150
Thinking about what
does and doesn't work,

00:08:16.150 --> 00:08:18.940
you need to consider your
users who have difficulty

00:08:18.940 --> 00:08:20.700
with vision or hearing.

00:08:20.700 --> 00:08:23.590
Or who speak a
different language.

00:08:23.590 --> 00:08:26.820
Accessibility, it
isn't just a feature.

00:08:26.820 --> 00:08:31.170
And thankfully, it's really easy
to make media more accessible

00:08:31.170 --> 00:08:33.850
by adding a track element.

00:08:33.850 --> 00:08:35.520
The source of a
track element points

00:08:35.520 --> 00:08:40.080
to a file consisting of timed
cues in plain text like this.

00:08:40.080 --> 00:08:42.980
The format is called WebVTT.

00:08:42.980 --> 00:08:46.460
Track is now supported by all
modern browsers on desktop

00:08:46.460 --> 00:08:48.650
and mobile, so make
the most of it.

00:08:48.650 --> 00:08:52.750
You can use tracks to add
descriptions and captions.

00:08:52.750 --> 00:08:56.900
And the track element is
also great for subtitles.

00:08:56.900 --> 00:09:00.500
And finally, to give your
users a better experience,

00:09:00.500 --> 00:09:03.380
don't forget the humble
poster attribute.

00:09:03.380 --> 00:09:05.170
The poster attribute
points to an image

00:09:05.170 --> 00:09:08.580
to be displayed in place of
a video before it's loaded.

00:09:08.580 --> 00:09:12.050
Including a poster gives viewers
a meaningful idea of content

00:09:12.050 --> 00:09:16.330
without having to download
any video or start playback.

00:09:16.330 --> 00:09:18.860
Without a poster, nah.

00:09:18.860 --> 00:09:22.130
And with one, nice.

00:09:22.130 --> 00:09:24.810
The only downside is
that using a poster image

00:09:24.810 --> 00:09:27.660
incurs an additional
file request, which

00:09:27.660 --> 00:09:29.330
consumes a little
bit of bandwidth

00:09:29.330 --> 00:09:31.560
and requires rendering.

00:09:31.560 --> 00:09:32.580
So that's it.

00:09:32.580 --> 00:09:36.030
But there is one more
really amazing thing

00:09:36.030 --> 00:09:38.500
you can do with video on mobile.

00:09:38.500 --> 00:09:41.840
You can now make video
calls using WebRTC.

00:09:41.840 --> 00:09:45.390
That's real time
communication in the browser.

00:09:45.390 --> 00:09:48.010
So I can speak to
my friend Matt.

00:09:48.010 --> 00:09:48.870
Hey, Matt.

00:09:48.870 --> 00:09:51.220
MATT: Hey, Sam.

00:09:51.220 --> 00:09:52.930
SAM DUTTON: How's it going?

00:09:52.930 --> 00:09:55.840
You're in Hawaii?

00:09:55.840 --> 00:09:57.404
So thanks for watching.

00:09:57.404 --> 00:09:58.820
If you follow the
suggestions here

00:09:58.820 --> 00:10:00.970
you'll be able to
create and use videos

00:10:00.970 --> 00:10:03.800
that work well
across every device.

00:10:03.800 --> 00:10:05.950
To find out more, take
a look at our guidance

00:10:05.950 --> 00:10:08.420
on Web Fundamentals.

00:10:08.420 --> 00:10:10.410
See you there.

