WEBVTT
Kind: captions
Language: en

00:00:01.020 --> 00:00:02.130
MALE SPEAKER: Shanghai
GDG is a very

00:00:02.130 --> 00:00:04.200
interesting developer community.

00:00:04.200 --> 00:00:05.040
FEMALE SPEAKER: I'm
glad somebody

00:00:05.040 --> 00:00:06.300
has asked this question.

00:00:06.300 --> 00:00:07.460
MALE SPEAKER: This is where
the magic happens.

00:00:07.460 --> 00:00:08.760
FEMALE SPEAKER: This is
primarily a questions and

00:00:08.760 --> 00:00:09.280
answer show.

00:00:09.280 --> 00:00:11.650
So, if any of you out there
would like to ask questions--

00:00:17.380 --> 00:00:18.670
IDO GREEN: GDL Israel.

00:00:18.670 --> 00:00:21.210
GDL-IL.

00:00:21.210 --> 00:00:23.520
Today we're going to focus
on the Google Cloud

00:00:23.520 --> 00:00:25.570
Endpoint and HTML5.

00:00:25.570 --> 00:00:30.940
And before we jump into the
few slides I've prepared,

00:00:30.940 --> 00:00:36.930
let's speak real briefly on
the news from yesterday.

00:00:36.930 --> 00:00:38.675
Google + have a new sign-in.

00:00:41.440 --> 00:00:44.080
And, I guess, if you are a
front-end developer and you

00:00:44.080 --> 00:00:48.070
want to check out how to
leverage it and use it in your

00:00:48.070 --> 00:00:53.850
websites, web apps, and even
on mobile apps on Android,

00:00:53.850 --> 00:00:58.730
just search on
Googledevelopers.com/live.

00:00:58.730 --> 00:01:03.280
There are a few other episodes
that are dedicated for it, and

00:01:03.280 --> 00:01:07.470
it will give you a great summary
of how you could tap

00:01:07.470 --> 00:01:13.480
into it, and use it more
effectively and easier.

00:01:13.480 --> 00:01:17.970
Let me share my screen
with you.

00:01:17.970 --> 00:01:23.810
Let's jump real quick here.

00:01:23.810 --> 00:01:34.330
And even before that, let's have
this nice Hangout shared

00:01:34.330 --> 00:01:35.580
with others.

00:01:41.030 --> 00:01:44.470
And we're done.

00:01:44.470 --> 00:01:46.510
OK, so without further
ado, let me share

00:01:46.510 --> 00:01:48.100
my screen with you.

00:01:48.100 --> 00:01:53.340
And we could tap into some of
the slides that I've created.

00:01:53.340 --> 00:01:57.280
So, this is basically a talk
that I gave during the last

00:01:57.280 --> 00:01:59.640
DevCon Tel Aviv, which was
a great conference.

00:01:59.640 --> 00:02:03.550
If you are a web developer,
front-end developer located in

00:02:03.550 --> 00:02:07.880
Israel, I highly recommend you
to check out DevCon it's a

00:02:07.880 --> 00:02:10.660
really, really great
conference.

00:02:10.660 --> 00:02:14.080
One nice tweak that you have in
this slide is-- by the way,

00:02:14.080 --> 00:02:19.650
you could watch the slides
later on here,

00:02:19.650 --> 00:02:26.100
ido-green.appspot.com and it's
the first slide basically.

00:02:26.100 --> 00:02:27.830
All those fields are editable.

00:02:27.830 --> 00:02:33.400
So, this is basically where you
could see those slides,

00:02:33.400 --> 00:02:38.420
and if you want, you basically
just do whatever you like with

00:02:38.420 --> 00:02:41.160
those tiny fields.

00:02:41.160 --> 00:02:44.940
So, to the ones that don't
know me, I'm acting as

00:02:44.940 --> 00:02:49.100
Developer Advocate here at
Google focusing Chrome HTML5,

00:02:49.100 --> 00:02:50.900
Google Cloud.

00:02:50.900 --> 00:02:54.110
I'm mainly active these
days on G+.

00:02:54.110 --> 00:02:57.530
And you could search Ido
Green or on Twitter.

00:02:57.530 --> 00:02:59.770
Or on my blog just feel free.

00:02:59.770 --> 00:03:03.950
We do have this episode of
GDL-IL, GDL Israel, every

00:03:03.950 --> 00:03:09.650
Wednesday at 2:00 PM Israel time
for 25, 30 minutes, so

00:03:09.650 --> 00:03:10.930
just feel free to join us.

00:03:10.930 --> 00:03:16.260
And if you have questions,
we'll love to try and

00:03:16.260 --> 00:03:18.810
help you with them.

00:03:18.810 --> 00:03:21.650
By the way, if you're joining
the Hangout, please try to

00:03:21.650 --> 00:03:26.000
start with mute, and only if you
have question just ping me

00:03:26.000 --> 00:03:30.380
on the chat and I will be happy
to try and answer them.

00:03:30.380 --> 00:03:33.280
So, let's try and jump into what
we're going to do today.

00:03:33.280 --> 00:03:36.640
We are going speak, basically,
about Mobile App Engine

00:03:36.640 --> 00:03:39.830
Backends, which we called
Google Cloud Endpoints.

00:03:39.830 --> 00:03:42.900
And see how you, as a developer,
can leverage them,

00:03:42.900 --> 00:03:45.410
use them, and be more effective
when you are writing

00:03:45.410 --> 00:03:50.350
your code, maintaining it, and
later on consuming it from

00:03:50.350 --> 00:03:55.020
other platforms like Android,
iOS, and, of course, the web.

00:03:55.020 --> 00:03:57.040
Then we're going to define
real quick what is

00:03:57.040 --> 00:03:57.840
a modern web app.

00:03:57.840 --> 00:03:59.560
What are the main characteristic
that we want

00:03:59.560 --> 00:04:01.100
see in a web app.

00:04:01.100 --> 00:04:04.750
And, then, that real briefly
we'll speak about some of the

00:04:04.750 --> 00:04:09.685
tools and the APIs that I find
very exciting these days.

00:04:09.685 --> 00:04:13.500
Last, but not least, I'll try to
open Chrome DevTools, which

00:04:13.500 --> 00:04:15.020
I'm really passionate about.

00:04:15.020 --> 00:04:17.320
And give you some tips to make
you more productive when

00:04:17.320 --> 00:04:20.620
you're working with it.

00:04:20.620 --> 00:04:22.490
This is thanks to our
sponsors, but we

00:04:22.490 --> 00:04:24.500
don't need it today.

00:04:24.500 --> 00:04:27.680
Google Cloud Endpoint
is basically based

00:04:27.680 --> 00:04:28.740
on Google App Engine.

00:04:28.740 --> 00:04:31.590
Now, what is Google
App Engine?

00:04:31.590 --> 00:04:34.980
Very similar to Chrome, which
is based on three S's--

00:04:34.980 --> 00:04:37.840
security, speed,
and simplicity.

00:04:37.840 --> 00:04:40.590
On Google App Engine, we have
three other things.

00:04:40.590 --> 00:04:44.270
It's easy to build and develop
your specific app on it.

00:04:44.270 --> 00:04:46.350
It's easy to scale it because
you don't have

00:04:46.350 --> 00:04:47.630
to worry about it.

00:04:47.630 --> 00:04:49.310
And it's easy to maintain it.

00:04:49.310 --> 00:04:53.440
Its platform is a service,
and you are doing

00:04:53.440 --> 00:04:54.800
what you're best at.

00:04:54.800 --> 00:04:57.330
Meaning, you're developing
your unique app.

00:04:57.330 --> 00:05:02.230
And let Google App Engine scale,
and maintain, and use

00:05:02.230 --> 00:05:06.440
all the benefits that we're
giving you as a platform.

00:05:06.440 --> 00:05:10.670
As you can see from this slide,
even in Google metrics,

00:05:10.670 --> 00:05:12.825
App Engine is pretty
big these days.

00:05:12.825 --> 00:05:16.470
It's passed 7.5 billion
daily hits.

00:05:16.470 --> 00:05:18.350
And you can see here on the
timeline that it's growing

00:05:18.350 --> 00:05:22.370
pretty fast, up and
to the right.

00:05:22.370 --> 00:05:24.350
Some core features that
we have today.

00:05:24.350 --> 00:05:26.600
Of course, you could read all of
them from the slide, but I

00:05:26.600 --> 00:05:31.490
would just focus on a few things
that are roughly new.

00:05:31.490 --> 00:05:33.930
It's not brand new,
but it's something

00:05:33.930 --> 00:05:35.030
in the past 12 months.

00:05:35.030 --> 00:05:38.850
And if you haven't been
following, probably, you

00:05:38.850 --> 00:05:41.430
missed it or haven't seen it.

00:05:41.430 --> 00:05:43.210
I will focus first on
what start-ups are

00:05:43.210 --> 00:05:45.170
keeping asking me.

00:05:45.170 --> 00:05:48.210
It's great that we have the
largest No SQL database in the

00:05:48.210 --> 00:05:52.320
world, but if I'm working with
My SQL, do I have any option

00:05:52.320 --> 00:05:54.430
to work with it on top
of Google App Engine?

00:05:54.430 --> 00:05:55.930
And the answer is yes.

00:05:55.930 --> 00:05:58.660
We do have Cloud SQL, which
basically giving you

00:05:58.660 --> 00:06:00.950
My SQL in the Cloud.

00:06:00.950 --> 00:06:03.590
And, of course, you could check
the water with data

00:06:03.590 --> 00:06:05.840
storage, which basically
giving you a

00:06:05.840 --> 00:06:08.010
very nice No SQL option.

00:06:08.010 --> 00:06:09.270
We also have Memcache.

00:06:09.270 --> 00:06:12.490
That's another hot topic.

00:06:12.490 --> 00:06:15.890
And in terms of your compute,
we have lots of different

00:06:15.890 --> 00:06:21.440
types of features and abilities
to give you the

00:06:21.440 --> 00:06:25.060
ability to run jobs that are
faster than 30 seconds or

00:06:25.060 --> 00:06:28.665
immediate request that you will
do to any rest API or

00:06:28.665 --> 00:06:30.620
your web app.

00:06:30.620 --> 00:06:35.550
We have large set off APIs.

00:06:35.550 --> 00:06:39.300
And we'll see later on how you
could tap into them, play with

00:06:39.300 --> 00:06:42.840
them through the API Explorer,
and get the feel to them even

00:06:42.840 --> 00:06:45.420
before you are writing
one line of code.

00:06:45.420 --> 00:06:47.970
And, of course, huge
amount of services.

00:06:47.970 --> 00:06:51.810
Some of them are your own
proprietary service that you

00:06:51.810 --> 00:06:54.050
could run from, or on
top of, App Engine.

00:06:54.050 --> 00:06:58.670
And some are just APIs and
services that Google is

00:06:58.670 --> 00:06:59.920
offering you.

00:07:02.100 --> 00:07:04.700
As you can see, a month in the
life of an App Engine.

00:07:04.700 --> 00:07:06.130
Lots of big names there--

00:07:06.130 --> 00:07:09.010
Gigya, Khan Academy, Best Buy.

00:07:09.010 --> 00:07:11.840
All of them are running on true

00:07:11.840 --> 00:07:14.030
production mode in App Engine.

00:07:14.030 --> 00:07:17.180
And I highly encourage you to
check out the blog post that

00:07:17.180 --> 00:07:21.460
Khan Academy did that summarizes
what they had in

00:07:21.460 --> 00:07:26.500
terms of experience of a large
spike in traffic after a "60

00:07:26.500 --> 00:07:31.150
Minutes" interview that
they did Sal Khan.

00:07:31.150 --> 00:07:34.320
A type of storage, as we said,
a fully-managed no SQL

00:07:34.320 --> 00:07:38.075
solution that basically holding
the largest no SQL

00:07:38.075 --> 00:07:40.850
database in the world--

00:07:40.850 --> 00:07:42.460
two trillion operations
per month.

00:07:42.460 --> 00:07:46.920
So, even if you have a really
hot app that is flourishing on

00:07:46.920 --> 00:07:51.350
the Play marketplace, you
are in good hands.

00:07:51.350 --> 00:07:55.260
You don't need to worry about
sharding, and scaling, and

00:07:55.260 --> 00:07:59.160
some reverse proxying, and SQIDs
and vernish, and all of

00:07:59.160 --> 00:08:02.250
the good stuff that if you ever
been in another platform

00:08:02.250 --> 00:08:04.470
you need to master it.

00:08:04.470 --> 00:08:10.340
Here, all the work is done for
you with the best practices.

00:08:10.340 --> 00:08:12.340
Yeah, basically we
know what to do.

00:08:12.340 --> 00:08:16.180
How to split and make sure that
you are up and running.

00:08:16.180 --> 00:08:19.270
And, yeah, it's spread between
few data centers.

00:08:19.270 --> 00:08:23.610
A very nice, compelling example
is Get Around, which

00:08:23.610 --> 00:08:25.830
after they won, their
[INAUDIBLE].

00:08:25.830 --> 00:08:27.510
You can see the graph there.

00:08:27.510 --> 00:08:31.060
Pretty huge and they were up
and running all the time.

00:08:31.060 --> 00:08:33.940
The main motivation, here, is
that in these days, basically,

00:08:33.940 --> 00:08:37.640
what you want to do is create
your secret sauce, and have a

00:08:37.640 --> 00:08:41.110
nice rest API that later on that
you could consume from

00:08:41.110 --> 00:08:42.299
multiple platforms.

00:08:42.299 --> 00:08:45.000
Of course, the web is the
biggest out there, but let's

00:08:45.000 --> 00:08:47.480
no deceive ourselves,
we do have a very

00:08:47.480 --> 00:08:50.360
big, flourishing ecosystem.

00:08:50.360 --> 00:08:54.100
And Android is a huge
these days.

00:08:54.100 --> 00:08:56.660
And then you have to scale it.

00:08:56.660 --> 00:09:00.380
Especially if you are on Android
and your app is in the

00:09:00.380 --> 00:09:05.670
top 10 list somewhere, you do
want to be in safe water.

00:09:05.670 --> 00:09:08.660
When we come in to check what
we want to do in terms of

00:09:08.660 --> 00:09:14.160
design this encapsulates
basically what you see again

00:09:14.160 --> 00:09:16.100
and again in start-up lines.

00:09:16.100 --> 00:09:18.740
Basically, you want some shared
stake in the back-end,

00:09:18.740 --> 00:09:22.250
some 1 source of true that you
hold all your data in state

00:09:22.250 --> 00:09:23.600
about your user.

00:09:23.600 --> 00:09:25.780
Maybe, in the future, you'll
want to use some other

00:09:25.780 --> 00:09:28.710
services like search,
mail, et cetera.

00:09:28.710 --> 00:09:31.570
And then on top of them, you'll
want the application

00:09:31.570 --> 00:09:34.640
logic that is creating your
secret sauce and giving your

00:09:34.640 --> 00:09:36.810
specific service.

00:09:36.810 --> 00:09:40.280
And, of course, these days you
need to create some kind of

00:09:40.280 --> 00:09:42.500
API that all your
different client

00:09:42.500 --> 00:09:47.140
could consume and leverage.

00:09:47.140 --> 00:09:48.910
And then you start
to implement it.

00:09:48.910 --> 00:09:51.560
And like we know in life, it
starting simple and quite

00:09:51.560 --> 00:09:54.540
quickly you get into more
and more features.

00:09:54.540 --> 00:09:57.850
You need to share the database
because you have a huge amount

00:09:57.850 --> 00:09:59.620
of data in it.

00:09:59.620 --> 00:10:03.190
You want authentication,
authorization, login,

00:10:03.190 --> 00:10:07.510
compression, performance, and
lots of goodness to build into

00:10:07.510 --> 00:10:11.430
the API that you started and
thought it would be just,

00:10:11.430 --> 00:10:16.070
let's say, crude application
with very different or very

00:10:16.070 --> 00:10:19.080
simple set of APIs endpoints.

00:10:19.080 --> 00:10:22.100
Usually quite quickly you're
ending up with quite a lot of

00:10:22.100 --> 00:10:23.710
things to manage.

00:10:23.710 --> 00:10:26.880
And, then, let's not forget, you
do need to write some sort

00:10:26.880 --> 00:10:29.620
of API wrapper per platform.

00:10:29.620 --> 00:10:33.780
So, here, in our case, you need
to do it once in Java,

00:10:33.780 --> 00:10:36.390
then in Objective C, and of
course in JavaScript so you

00:10:36.390 --> 00:10:39.190
can consume it from the web.

00:10:39.190 --> 00:10:43.340
And then after launch, and
hopefully a successful one,

00:10:43.340 --> 00:10:50.395
you need to start being in the
head of the administrator or

00:10:50.395 --> 00:10:53.910
slash ops that know how to
maintain the middle-ware, know

00:10:53.910 --> 00:10:57.610
how to add features on time,
and make sure that all the

00:10:57.610 --> 00:11:01.580
engines will work while
the plane is flying.

00:11:01.580 --> 00:11:04.320
And then in Google Cloud
Endpoints, basically, we

00:11:04.320 --> 00:11:06.760
saving you, again,
lot of leg works.

00:11:06.760 --> 00:11:10.880
So, the secret sauce here, or
the proof is in the pudding,

00:11:10.880 --> 00:11:14.680
is actually being built and
used inside Google and--

00:11:14.680 --> 00:11:17.150
luckily for us and I'm
really glad to see

00:11:17.150 --> 00:11:18.260
it again and again--

00:11:18.260 --> 00:11:21.560
being open to the world to
other developers in other

00:11:21.560 --> 00:11:24.730
companies to leverage and
enjoy it and use it.

00:11:24.730 --> 00:11:26.140
You can see similar
examples like

00:11:26.140 --> 00:11:28.470
Angular.js and other projects.

00:11:28.470 --> 00:11:31.260
And now in this one, basically
we're giving you the goodness

00:11:31.260 --> 00:11:35.680
of App Engine, but then with
the dedicated option to

00:11:35.680 --> 00:11:39.710
leverage the benefits of what
we already baked in Google

00:11:39.710 --> 00:11:40.840
Cloud Endpoints.

00:11:40.840 --> 00:11:43.580
So basically, you have the
shared state that you want.

00:11:43.580 --> 00:11:44.970
You have the data store.

00:11:44.970 --> 00:11:47.520
You're focusing on your
application logic.

00:11:47.520 --> 00:11:50.930
And from the minute you're
starting to run with it, you

00:11:50.930 --> 00:11:57.820
have already there is the case
that we have to Google APIs

00:11:57.820 --> 00:12:00.920
that you could leverage and
use in your own APIs.

00:12:00.920 --> 00:12:03.140
Let's see how does it look
more thoroughly.

00:12:05.680 --> 00:12:09.670
When we are speaking about how
it's related, we have the

00:12:09.670 --> 00:12:13.550
ability to discover, and
actually have the glue between

00:12:13.550 --> 00:12:15.610
the front-end and
the back-end.

00:12:15.610 --> 00:12:20.560
In this example, you could see
the Google API Explorer giving

00:12:20.560 --> 00:12:25.120
you the ability to go to any
service basically that we have

00:12:25.120 --> 00:12:28.880
on Google-- and I'll try to make
it a bit bigger-- and you

00:12:28.880 --> 00:12:31.340
could see a huge amount
of services.

00:12:31.340 --> 00:12:36.630
In each service, I could play
with it and see what are the

00:12:36.630 --> 00:12:40.500
main endpoints that I could
leverage and use.

00:12:40.500 --> 00:12:43.420
Let's go just quickly for
the simplicity with

00:12:43.420 --> 00:12:44.860
the example of G+.

00:12:44.860 --> 00:12:47.420
You could see immediately
what I could do in

00:12:47.420 --> 00:12:48.970
each and every endpoint.

00:12:48.970 --> 00:12:51.880
And let's say that I'm going
to the activity.

00:12:51.880 --> 00:12:53.430
I need to have some ID.

00:12:53.430 --> 00:12:56.310
But, then, if I'm executing,
immediately you're getting a

00:12:56.310 --> 00:12:59.380
response with this specific
get command.

00:12:59.380 --> 00:13:03.130
And, of course, I don't have
here a certain value so I'm

00:13:03.130 --> 00:13:05.160
not getting the right
information.

00:13:05.160 --> 00:13:07.370
But I can see exactly what's
happening here.

00:13:07.370 --> 00:13:10.800
And it's really easy to hold and
have the glue between the

00:13:10.800 --> 00:13:13.640
front-end and the back-end
developer when we speaking

00:13:13.640 --> 00:13:17.380
about a new ability
to discover.

00:13:17.380 --> 00:13:20.310
Basically everything will be
backed in adjacent format,

00:13:20.310 --> 00:13:23.430
which is very easy to run tests
against and to check

00:13:23.430 --> 00:13:27.230
what we need to get from
that back-end.

00:13:27.230 --> 00:13:29.870
And, of course, very,
very easy to

00:13:29.870 --> 00:13:30.980
consume it from the web.

00:13:30.980 --> 00:13:35.400
You are, basically, loading
Google API Client in

00:13:35.400 --> 00:13:36.320
JavaScript.

00:13:36.320 --> 00:13:40.300
And then, in this example, for
instance, you're loading the

00:13:40.300 --> 00:13:42.970
URL shortener, and you
can work with it.

00:13:42.970 --> 00:13:47.530
And, of course, we are
supporting I would say quite a

00:13:47.530 --> 00:13:50.100
lot of main languages
and technologies.

00:13:50.100 --> 00:13:53.340
So every developer could choose
the ones that they are

00:13:53.340 --> 00:13:54.590
most productive with.

00:13:57.250 --> 00:14:00.100
The great things about it is
basically you could create

00:14:00.100 --> 00:14:04.630
your own API and get the same
service or level of

00:14:04.630 --> 00:14:06.920
discoverability, and later
on maintainability.

00:14:10.226 --> 00:14:15.170
In this example, and I highly
encourage you to check other

00:14:15.170 --> 00:14:19.520
Google Developer Live episodes
that are dedicated to Google

00:14:19.520 --> 00:14:24.220
Cloud Endpoints, which giving
you a great example of live

00:14:24.220 --> 00:14:27.760
coding in the Python App
Engine environment.

00:14:27.760 --> 00:14:31.500
And basically they gave the
great example of the

00:14:31.500 --> 00:14:33.860
tic-tac-toe game.

00:14:33.860 --> 00:14:37.050
But you could take it and
just think about your

00:14:37.050 --> 00:14:38.350
own specific scenario.

00:14:38.350 --> 00:14:41.740
In this case, you're writing
your back-end code, you

00:14:41.740 --> 00:14:44.490
decorate the API method
very easily

00:14:44.490 --> 00:14:46.830
both in Java and Python.

00:14:46.830 --> 00:14:50.620
Then, generating the client
libraries for you.

00:14:50.620 --> 00:14:53.720
And you're writing your client
app based on the platform that

00:14:53.720 --> 00:14:54.880
you want to target--

00:14:54.880 --> 00:14:58.170
Android, the web,
iOS, et cetera.

00:14:58.170 --> 00:15:00.730
Here is the URL that you
could play with.

00:15:00.730 --> 00:15:03.870
And, basically, I could show
you real quick how

00:15:03.870 --> 00:15:05.120
does it look like.

00:15:08.520 --> 00:15:12.290
So, as you could see, it's
a very simple, nice game.

00:15:12.290 --> 00:15:13.390
Hopefully, I'll win.

00:15:13.390 --> 00:15:14.280
Yeah.

00:15:14.280 --> 00:15:16.940
And you could do view source
later and just see exactly

00:15:16.940 --> 00:15:19.490
what's going on there.

00:15:19.490 --> 00:15:21.730
And of course, who's
is next playing?

00:15:21.730 --> 00:15:23.480
And this is our API.

00:15:23.480 --> 00:15:26.580
And here if you want to run it
on mobile, of course it will

00:15:26.580 --> 00:15:28.800
run on the major platforms
out there.

00:15:28.800 --> 00:15:34.680
And here are two links to the
tic-tac-toe game and Birra

00:15:34.680 --> 00:15:37.250
demo app that I did
in the last iO.

00:15:37.250 --> 00:15:40.530
And you could see our Birra
rating app and actually all

00:15:40.530 --> 00:15:43.670
the good things that you could
check with it live.

00:15:43.670 --> 00:15:47.320
In terms of search for good
beers, insert a new beer, get

00:15:47.320 --> 00:15:49.090
a list of beers, et cetera.

00:15:49.090 --> 00:15:52.120
Let's, just for fun, see
what's happening here.

00:15:52.120 --> 00:15:57.360
And right now it's down, but
hopefully it will be up and

00:15:57.360 --> 00:16:01.230
running again after I
finish this episode.

00:16:01.230 --> 00:16:02.730
Let's jump real quick
to the web.

00:16:02.730 --> 00:16:06.000
So usually this is the face that
I see on new developers

00:16:06.000 --> 00:16:11.710
in terms of speaking on some
specific, new ways to leverage

00:16:11.710 --> 00:16:13.790
and utilize HTML5.

00:16:17.690 --> 00:16:20.165
When we speaking about modern
web app, what we want to see

00:16:20.165 --> 00:16:24.500
is the power of HTML5, the new
APIs, new capability that is

00:16:24.500 --> 00:16:26.570
harnessing front-end
developers.

00:16:26.570 --> 00:16:29.280
Read what the user are expecting
to get so basically

00:16:29.280 --> 00:16:32.500
the native or the desktop
experience, which is mainly

00:16:32.500 --> 00:16:35.810
smoothness, responsiveness, and
all the good features of

00:16:35.810 --> 00:16:38.940
being close to all of the rich
APIs that we have on each and

00:16:38.940 --> 00:16:40.040
every platform.

00:16:40.040 --> 00:16:42.530
When we're combining the two,
basically, we're getting

00:16:42.530 --> 00:16:44.380
modern web apps.

00:16:44.380 --> 00:16:47.560
Here are some bold examples for
great modern web apps--

00:16:47.560 --> 00:16:51.680
The "New York Times" reader,
Gmail offline, Angry Bird,

00:16:51.680 --> 00:16:55.340
chrome.angrybirds.com, and
Hipmunk, which is a travel

00:16:55.340 --> 00:16:56.420
search engine.

00:16:56.420 --> 00:17:01.430
All of them are sharing
some very basic set of

00:17:01.430 --> 00:17:02.990
skills, if you like.

00:17:02.990 --> 00:17:05.780
And here I'll just note that
all of them are coming with

00:17:05.780 --> 00:17:07.310
offline first methodologies.

00:17:07.310 --> 00:17:09.849
So they will work nicely even
when you don't have any

00:17:09.849 --> 00:17:11.160
connection.

00:17:11.160 --> 00:17:14.010
They will do the right things
like Google Doc is doing today

00:17:14.010 --> 00:17:15.440
in terms of syncing.

00:17:15.440 --> 00:17:18.940
And syncing when you are online
and getting the most

00:17:18.940 --> 00:17:21.440
important things for you when
you are offline so you could

00:17:21.440 --> 00:17:24.560
be productive on a long flight
or if you are in a submarine,

00:17:24.560 --> 00:17:27.200
for instance.

00:17:27.200 --> 00:17:29.590
When we see more and more logic
being passed to the

00:17:29.590 --> 00:17:33.810
client side we want to work with
MV* Framework so we won't

00:17:33.810 --> 00:17:36.070
have the case of a
spaghetti code.

00:17:36.070 --> 00:17:38.040
All of these apps are
device aware.

00:17:38.040 --> 00:17:41.840
So they're using responsive
design to make the most out of

00:17:41.840 --> 00:17:45.020
the real estate that their
certain mobile phone, or

00:17:45.020 --> 00:17:48.220
tablet, or desktop, or laptop
computer will give them in

00:17:48.220 --> 00:17:49.510
terms of screen size.

00:17:49.510 --> 00:17:51.850
And when we're saying 60 frames
per second, and meaning

00:17:51.850 --> 00:17:54.790
that we want to achieve 60
frames per second so the

00:17:54.790 --> 00:17:58.030
response is there, and
smoothness, and the speed in

00:17:58.030 --> 00:18:02.020
terms of performance of the app
will be as fast as we can.

00:18:02.020 --> 00:18:04.490
Above 60, we don't
gain anything.

00:18:04.490 --> 00:18:06.380
It's just a waste because
the eye can't catch it.

00:18:06.380 --> 00:18:07.490
And below?

00:18:07.490 --> 00:18:11.790
We do want to achieve the best
for our users, don't we?

00:18:11.790 --> 00:18:15.170
Three bold examples to what
we are meaning when we say

00:18:15.170 --> 00:18:16.920
client-side frameworks.

00:18:16.920 --> 00:18:19.670
Angular.js which is open source
project that started in

00:18:19.670 --> 00:18:24.390
Google, looking at HTML5 as
if it was a dynamic markup

00:18:24.390 --> 00:18:27.510
language and not for static
sites like HTML

00:18:27.510 --> 00:18:28.980
was invented to.

00:18:28.980 --> 00:18:32.170
And there are some very nice
bold things in this framework

00:18:32.170 --> 00:18:35.240
that I highly encourage you
to check like dependency

00:18:35.240 --> 00:18:38.190
injection, unit tests from
the ground up, and

00:18:38.190 --> 00:18:39.600
other of good things.

00:18:39.600 --> 00:18:43.610
Backbone.js which is by far
that most popular MVC

00:18:43.610 --> 00:18:44.910
framework today.

00:18:44.910 --> 00:18:48.710
I think it deserves the
popularity because it's the

00:18:48.710 --> 00:18:51.860
most simple one and giving you
lots of freedom to do whatever

00:18:51.860 --> 00:18:55.010
you like or whatever you need
in your specific case.

00:18:55.010 --> 00:18:58.720
And Ember.js, which Yehuda Katz
and Tom Dell are doing

00:18:58.720 --> 00:19:02.310
and a great ambition
framework.

00:19:02.310 --> 00:19:05.520
If you're thinking about a web
app which your user are

00:19:05.520 --> 00:19:08.680
spending the vast majority of
their time with reach set of

00:19:08.680 --> 00:19:13.580
features, I highly encourage you
the check Ember, as well.

00:19:13.580 --> 00:19:19.610
Addy Osmani did a great working
in his Todo MVC, 4

00:19:19.610 --> 00:19:21.100
which you have the link here.

00:19:21.100 --> 00:19:24.940
So if afterwards you click on
it you could gain all the

00:19:24.940 --> 00:19:28.640
compressions between the leading
MV* Frameworks today.

00:19:28.640 --> 00:19:31.650
And here you have a link to the
full tutorial that I did

00:19:31.650 --> 00:19:36.060
in terms of leveraging Google
Cloud Endpoint with backbone

00:19:36.060 --> 00:19:37.430
in our b-wrap.

00:19:37.430 --> 00:19:39.750
Why we need offline?

00:19:39.750 --> 00:19:42.710
Well, I guess, the first and
foremost is just because users

00:19:42.710 --> 00:19:45.960
will gain better performance
and will like your app or

00:19:45.960 --> 00:19:47.160
service better.

00:19:47.160 --> 00:19:50.670
All the other good reasons
are also valid here.

00:19:50.670 --> 00:19:51.890
How to achieve offline.

00:19:51.890 --> 00:19:54.120
We have, luckily, today
lots of different

00:19:54.120 --> 00:19:55.990
ways to achieve it.

00:19:55.990 --> 00:19:59.730
From AppCache to save the basic
building blocks of our

00:19:59.730 --> 00:20:03.310
web app like the HTML,
JavaScript, and CSS and up to

00:20:03.310 --> 00:20:06.260
local Storage, indexdb and file
API, which letting us

00:20:06.260 --> 00:20:09.640
save data locally on the client
side and work with it

00:20:09.640 --> 00:20:12.190
like we will work with files
in any other platform.

00:20:12.190 --> 00:20:16.600
Or like having a full blown No
SQL DB on the client side,

00:20:16.600 --> 00:20:18.700
which is indexdb.

00:20:18.700 --> 00:20:23.300
LocalStorage, by the way, is a
very well adopted and most of

00:20:23.300 --> 00:20:27.130
the modern web browser out
there are supporting it.

00:20:27.130 --> 00:20:30.770
When you going to store that
on the client side, I

00:20:30.770 --> 00:20:33.520
encourage you to check libraries
like CloudShare,

00:20:33.520 --> 00:20:37.450
which basically giving you the
ability to use modernizer,

00:20:37.450 --> 00:20:41.820
check what the specific client
supports, and then use the

00:20:41.820 --> 00:20:44.680
best tool for the job.

00:20:44.680 --> 00:20:47.190
How we detecting if we're
offline or online.

00:20:47.190 --> 00:20:53.570
With simple one liner
navigator.online or window

00:20:53.570 --> 00:20:57.160
will know when to do are syncing
and when just to work

00:20:57.160 --> 00:20:58.700
in an offline mode.

00:20:58.700 --> 00:21:04.100
Some of the cool API that I'll
run over them real quick.

00:21:04.100 --> 00:21:05.580
So CSS.

00:21:05.580 --> 00:21:10.140
2012 was the flourishing
year for CSS specs.

00:21:10.140 --> 00:21:13.130
And one of the main things that
we learned to appreciate

00:21:13.130 --> 00:21:16.760
is that the vast the majority
of our users are coming with

00:21:16.760 --> 00:21:19.130
different devices, different
scale sizes.

00:21:19.130 --> 00:21:24.525
And we want the ability to have
the holy grail of our app

00:21:24.525 --> 00:21:28.350
in terms of the main focus of
the center point of the

00:21:28.350 --> 00:21:30.990
article, or the main focus
on the app itself.

00:21:30.990 --> 00:21:35.940
And then a nice side bar or
footer header and with all the

00:21:35.940 --> 00:21:40.600
abilities of CSS like fixed
position or floats or tables

00:21:40.600 --> 00:21:41.630
it didn't work.

00:21:41.630 --> 00:21:46.390
Luckily for us we have a few new
ways to achieve it and I

00:21:46.390 --> 00:21:49.010
would encourage you to
check those two--

00:21:49.010 --> 00:21:53.440
the new Flexbox layout and
the grid layout manager.

00:21:53.440 --> 00:21:55.130
Basically, we're
achieving this.

00:21:55.130 --> 00:21:58.300
That's what I tried to describe,
but a picture worth

00:21:58.300 --> 00:21:59.460
a thousand words.

00:21:59.460 --> 00:22:01.540
Here it's very true.

00:22:01.540 --> 00:22:06.320
And here, there's a link for a
page that eg., my colleague,

00:22:06.320 --> 00:22:09.460
did, which basically giving you
the ability to test the

00:22:09.460 --> 00:22:13.470
Flexbox, create what you want,
and then just copy paste that

00:22:13.470 --> 00:22:15.276
CSS that will do it.

00:22:15.276 --> 00:22:18.970
Here you could see nicely that
all the poly fields are being

00:22:18.970 --> 00:22:20.610
achieved by the plus sign.

00:22:20.610 --> 00:22:25.210
And simple things, like do even
space between elements,

00:22:25.210 --> 00:22:29.470
or making sure that they have
the same space around, or

00:22:29.470 --> 00:22:35.490
started at the top or the bottom
are just one line here.

00:22:35.490 --> 00:22:39.850
Sleek things like stretching
your elements and just making

00:22:39.850 --> 00:22:43.140
sure they will be in the same
place are being achieved very,

00:22:43.140 --> 00:22:44.650
very easily.

00:22:44.650 --> 00:22:47.260
And you know here that when
you writing code--

00:22:47.260 --> 00:22:49.210
basically you're reading your
code much more often than

00:22:49.210 --> 00:22:51.460
you're writing it so
shorter is better.

00:22:51.460 --> 00:22:55.145
And this is just a nice thing to
show you how this short CSS

00:22:55.145 --> 00:22:58.670
code is very maintainable.

00:22:58.670 --> 00:23:01.700
One other thing is that you
could play when your phone,

00:23:01.700 --> 00:23:05.520
let's say, is horizontal and
then it's suddenly vertical--

00:23:05.520 --> 00:23:09.610
very, very easily you
could just switch it

00:23:09.610 --> 00:23:11.190
with this one liner.

00:23:11.190 --> 00:23:13.560
You could also control
the order.

00:23:13.560 --> 00:23:17.960
And if here we want the B after
the C, all we need to do

00:23:17.960 --> 00:23:21.310
is just say to the Flexbox that
the second child, the B,

00:23:21.310 --> 00:23:24.630
which is here will be
in order of one.

00:23:24.630 --> 00:23:26.055
And you could see they
change their order.

00:23:28.810 --> 00:23:32.710
We could do other nice things
like controlling the B here

00:23:32.710 --> 00:23:35.670
and making sure it will be three
times the size of the

00:23:35.670 --> 00:23:36.970
other components.

00:23:36.970 --> 00:23:40.430
And again, just try and think
and imagine how much more

00:23:40.430 --> 00:23:43.880
lines it will cost you if you
want to do it in CSS without

00:23:43.880 --> 00:23:44.890
that Flexbox.

00:23:44.890 --> 00:23:47.580
It's great here because
basically we're communicating

00:23:47.580 --> 00:23:50.570
to the browser exactly what we
want to achieve from it.

00:23:50.570 --> 00:23:53.520
And it will do the right thing
even if we are now on a

00:23:53.520 --> 00:23:57.340
different screen size,
a different device.

00:23:57.340 --> 00:23:58.310
Who is supporting it.

00:23:58.310 --> 00:24:03.110
So, luckily, for us it's Chrome,
1 Safari, and IE 10.

00:24:03.110 --> 00:24:05.570
And to the ones that doesn't
know Opera just announced two

00:24:05.570 --> 00:24:07.470
weeks ago that are moving
to WebKits.

00:24:07.470 --> 00:24:10.700
So it's great news because
hopefully soon we'll see it

00:24:10.700 --> 00:24:13.200
there, as well.

00:24:13.200 --> 00:24:19.600
Dynamic CSS is another fun, very
productive way to create

00:24:19.600 --> 00:24:23.070
or basically calculate on the
fly what you want the element

00:24:23.070 --> 00:24:24.010
to look like.

00:24:24.010 --> 00:24:27.390
And in this case, you can see
that I'm calculating the width

00:24:27.390 --> 00:24:31.945
and height and basically giving
it the 100% minus the

00:24:31.945 --> 00:24:34.860
element so it work on
different devices.

00:24:34.860 --> 00:24:37.180
And basically when I'm hovering
it's just border rad

00:24:37.180 --> 00:24:41.100
is zero so you're getting
this nice effect.

00:24:41.100 --> 00:24:43.570
And it's supported on all major
browsers as you can see.

00:24:43.570 --> 00:24:45.690
And Opera will join the
party soon, hopefully.

00:24:48.240 --> 00:24:49.140
Data Binding.

00:24:49.140 --> 00:24:52.430
So Data Binding is another cool
way that let's you be

00:24:52.430 --> 00:24:56.640
more productive and saves state
and data in the dump.

00:24:56.640 --> 00:24:59.500
And in this example I just
wanted to show you how easy

00:24:59.500 --> 00:25:01.830
and trivial it is to do
it with Angular.js.

00:25:01.830 --> 00:25:05.430
Even if you've never saw
Angular.js code, you could

00:25:05.430 --> 00:25:08.580
probably understand that here we
are defining a new Angular

00:25:08.580 --> 00:25:12.360
app when we are adding this
meta tag the our div.

00:25:12.360 --> 00:25:16.200
And here we're just defining
that our model, basically the

00:25:16.200 --> 00:25:18.250
component that will hold
our data, will

00:25:18.250 --> 00:25:19.740
be part of the input.

00:25:19.740 --> 00:25:24.860
And then we're just rendering it
here with this handle box.

00:25:24.860 --> 00:25:27.520
And you could see that I
achieved this nice event of

00:25:27.520 --> 00:25:32.200
binding the slider to the value
on the side with this

00:25:32.200 --> 00:25:33.160
four lines of code.

00:25:33.160 --> 00:25:36.020
Basically, it's three.

00:25:36.020 --> 00:25:39.530
Of course, you don't need any
JavaScript framework in order

00:25:39.530 --> 00:25:40.480
to achieve it.

00:25:40.480 --> 00:25:44.880
We have from the jQuery days the
data attributes that allow

00:25:44.880 --> 00:25:49.380
us to actually to have fun and
put one way data binding.

00:25:49.380 --> 00:25:51.930
Here it's the poor man's
one, but it's very

00:25:51.930 --> 00:25:53.090
productive and it's nice.

00:25:53.090 --> 00:25:56.430
Don't get poor in their
wrong context here.

00:25:56.430 --> 00:25:58.560
Here you could see that what we
achieved we're just using

00:25:58.560 --> 00:26:02.820
the slider element after and
basically calculating the

00:26:02.820 --> 00:26:04.630
content of this elements.

00:26:04.630 --> 00:26:08.050
And basically after we are
touching this event listener

00:26:08.050 --> 00:26:11.910
the data again between the input
slider and the value

00:26:11.910 --> 00:26:16.400
that we'll put on this side
will be the same.

00:26:16.400 --> 00:26:19.000
One way data binding that's
basically supported on all

00:26:19.000 --> 00:26:21.410
major browser is
the data list.

00:26:21.410 --> 00:26:25.475
So you could see this really
nice simple markup that

00:26:25.475 --> 00:26:27.980
letting us have auto-complete.

00:26:27.980 --> 00:26:30.560
And we could do like that.

00:26:30.560 --> 00:26:34.420
Or we could start typing and it
will auto-complete for us.

00:26:34.420 --> 00:26:38.410
And the good news here is that
it's very useful and supported

00:26:38.410 --> 00:26:39.460
on all browsers.

00:26:39.460 --> 00:26:43.524
So go ahead and please use it.

00:26:43.524 --> 00:26:46.460
Multi-thread programming is
basically something that's

00:26:46.460 --> 00:26:48.270
very dear to my heart.

00:26:48.270 --> 00:26:53.410
I basically got so excited about
it that in 2011 I wrote

00:26:53.410 --> 00:26:57.740
a book about it, "Web Workers."
And you are most

00:26:57.740 --> 00:26:58.940
welcome to check it out.

00:26:58.940 --> 00:27:02.430
And if not, all of the demos of
the book are on my GitHub.

00:27:02.430 --> 00:27:04.850
So feel free to download them
and play with them.

00:27:04.850 --> 00:27:08.930
It's a very nice simple API that
lets you construct a new

00:27:08.930 --> 00:27:11.990
worker, which basically would
contain a new JavaScript code

00:27:11.990 --> 00:27:13.730
that you want to run.

00:27:13.730 --> 00:27:18.800
But not on the main thread that
will block the client

00:27:18.800 --> 00:27:23.890
painting and do some ugly things
to your user or to your

00:27:23.890 --> 00:27:26.420
product responsiveness.

00:27:26.420 --> 00:27:30.230
After we declaring or using
the constructor of a new

00:27:30.230 --> 00:27:34.250
worker, we're just attaching
to it a new Event listener.

00:27:34.250 --> 00:27:39.830
So we'll use postMessage in
order to communicate to the

00:27:39.830 --> 00:27:41.420
worker and from the worker.

00:27:41.420 --> 00:27:44.320
And in this example, we
just passing it for

00:27:44.320 --> 00:27:46.760
the start a few settings.

00:27:46.760 --> 00:27:51.110
In the worker, itself, we'll
need, again, to add a listener

00:27:51.110 --> 00:27:52.780
so we'll have the
channel open.

00:27:52.780 --> 00:27:57.230
And then not all the window.API
are available in

00:27:57.230 --> 00:28:00.050
the worker, of course, for
security reasons, but you do

00:28:00.050 --> 00:28:04.000
have some nice ways to import
scripts from other places in

00:28:04.000 --> 00:28:08.360
[INAUDIBLE], get some offloads,
get some call backs,

00:28:08.360 --> 00:28:10.580
and handle the work and
communicate them

00:28:10.580 --> 00:28:12.710
back to your parent.

00:28:12.710 --> 00:28:16.610
Mainly the page that
created you.

00:28:16.610 --> 00:28:18.120
You do want to use Modernizr.

00:28:18.120 --> 00:28:21.880
Modernizr, which Paul Irish and
some other great cool guys

00:28:21.880 --> 00:28:26.520
are maintaining, lets you have
feature detection and not some

00:28:26.520 --> 00:28:29.290
other ugly browser sniffing
out things like that.

00:28:29.290 --> 00:28:32.410
And with one line of
Modernizr.webworkers you'll

00:28:32.410 --> 00:28:35.640
know if you could leverage the
browser capability or not.

00:28:35.640 --> 00:28:40.240
Another very nice aspect that I
wish to see more developers

00:28:40.240 --> 00:28:42.310
leveraging is Shared Workers.

00:28:42.310 --> 00:28:44.710
With Shared Workers, basically,
you have a worker

00:28:44.710 --> 00:28:47.110
which will be shared between
all the tabs or

00:28:47.110 --> 00:28:48.480
windows of your app.

00:28:48.480 --> 00:28:51.950
So think about Gmail, where
you're opening it in a few

00:28:51.950 --> 00:28:55.660
windows or tabs and you want one
source of true that will

00:28:55.660 --> 00:28:58.590
communicate to the server
or will act with your

00:28:58.590 --> 00:29:01.570
local No SQL DB.

00:29:01.570 --> 00:29:04.060
As I mentioned before, all the
examples are on my Github.

00:29:04.060 --> 00:29:08.640
So please feel free to check
them out and give me feedback.

00:29:08.640 --> 00:29:13.920
One of the things that I
assuming held back leveraging

00:29:13.920 --> 00:29:17.730
web workers and seeing then more
and more is it was pretty

00:29:17.730 --> 00:29:20.780
hard to debug them.

00:29:20.780 --> 00:29:24.350
But, luckily to us, I think it's
from Chrome 18-- and now

00:29:24.350 --> 00:29:30.300
we are way on-- currently on
27 soon, you have this nice

00:29:30.300 --> 00:29:34.270
check box, which basically if
you and check it you'll get

00:29:34.270 --> 00:29:36.280
DevTools to the worker itself.

00:29:36.280 --> 00:29:40.630
And you could play with each,
run with it, and inspect, and

00:29:40.630 --> 00:29:43.970
do all the other things that
you're doing in order to debug

00:29:43.970 --> 00:29:47.260
your worker.

00:29:47.260 --> 00:29:48.180
Filesystem.

00:29:48.180 --> 00:29:52.160
So like any other platform, yes,
we do have Filesystem.

00:29:52.160 --> 00:29:57.410
And you could work with binary
files and text files,

00:29:57.410 --> 00:29:59.350
everything is kosher.

00:29:59.350 --> 00:30:03.750
And how you are basically
requesting the file system to

00:30:03.750 --> 00:30:07.920
allocate your storage,
this is the syntax.

00:30:07.920 --> 00:30:12.090
You have three things that you
need to pay attention here,

00:30:12.090 --> 00:30:14.430
but because we don't have
too much time I

00:30:14.430 --> 00:30:15.410
won't dive into it.

00:30:15.410 --> 00:30:18.535
There's a great article on HTML5
Rocks that Eric Bidelman

00:30:18.535 --> 00:30:22.090
wrote, which basically will
dive into all the nits and

00:30:22.090 --> 00:30:25.475
grits of Filesystem API.

00:30:25.475 --> 00:30:27.900
Of course, for security reasons
it will be buying

00:30:27.900 --> 00:30:31.190
device and not just floating
there on your hard disk under

00:30:31.190 --> 00:30:32.790
whatever you think they are.

00:30:32.790 --> 00:30:36.820
But they basically located under
the installation of your

00:30:36.820 --> 00:30:39.980
browser and there are Send-box
to the origin, meaning the

00:30:39.980 --> 00:30:43.420
protocol, the domain,
and the port.

00:30:43.420 --> 00:30:46.830
And you could think about lots
of great things that you could

00:30:46.830 --> 00:30:48.050
do with files.

00:30:48.050 --> 00:30:53.240
Just like native apps got the
ability to access files on any

00:30:53.240 --> 00:30:56.710
other platform, we see more
and more being used and

00:30:56.710 --> 00:31:00.320
leveraged in dynamically cashed
assets for games.

00:31:00.320 --> 00:31:04.760
For instance, Angry Birds are
using it and they have north

00:31:04.760 --> 00:31:08.980
to 100 megabytes of assets.

00:31:08.980 --> 00:31:12.360
Basically, one of the great
things about this new API is

00:31:12.360 --> 00:31:14.680
that you don't need to
learn anything new.

00:31:14.680 --> 00:31:20.460
They're still using the source
of the href in this

00:31:20.460 --> 00:31:21.960
example of the image.

00:31:21.960 --> 00:31:25.620
And you could get
the toURL here.

00:31:25.620 --> 00:31:30.130
And basically get this resource
address, which is

00:31:30.130 --> 00:31:33.720
like you would think of a URL on
the web but locally on your

00:31:33.720 --> 00:31:34.920
Filesystem.

00:31:34.920 --> 00:31:40.100
And with this you just
resolved it.

00:31:40.100 --> 00:31:44.410
What's even better is
that all the code is

00:31:44.410 --> 00:31:46.170
being handed to us.

00:31:46.170 --> 00:31:51.750
And you have this nice library
filer.js on GitHub that lets

00:31:51.750 --> 00:31:54.860
you work with files like you
work with files on Unix--

00:31:54.860 --> 00:31:56.190
on Linux.

00:31:56.190 --> 00:31:57.230
So just check it out.

00:31:57.230 --> 00:31:57.820
Very easy.

00:31:57.820 --> 00:32:02.010
Your .init the filer with the
amount of memory that you want

00:32:02.010 --> 00:32:04.510
to consume on the disk,
the amount of storage.

00:32:04.510 --> 00:32:08.030
And then you could do things
like ls or cp and

00:32:08.030 --> 00:32:09.040
just work with them.

00:32:09.040 --> 00:32:14.230
Here is the example of working
with binary, et cetera.

00:32:14.230 --> 00:32:16.790
Yeah, so one of the
things, but OK but

00:32:16.790 --> 00:32:18.320
it's only on Chrome.

00:32:18.320 --> 00:32:20.840
Well with this shim it
will work on IE 10

00:32:20.840 --> 00:32:24.725
and Firefox, as well.

00:32:24.725 --> 00:32:28.240
Efficiency data transfer.

00:32:28.240 --> 00:32:33.760
Well, one of the main things
were for complex sites like

00:32:33.760 --> 00:32:39.520
File, Blob, Array type using
post message wasn't too

00:32:39.520 --> 00:32:42.120
productive because it's
not very efficient.

00:32:42.120 --> 00:32:43.690
We doing a copy command.

00:32:43.690 --> 00:32:48.880
And if you think about, I don't
know, 50 Megs of objects

00:32:48.880 --> 00:32:51.350
it won't be too efficient.

00:32:51.350 --> 00:32:54.520
And we do have a better way
to do it today with

00:32:54.520 --> 00:32:56.070
transferable objects.

00:32:56.070 --> 00:32:59.650
Basically, we just copying a
pointer and not everything is

00:32:59.650 --> 00:33:00.340
being copied.

00:33:00.340 --> 00:33:04.800
So its more of a just a move
operation, and with this test

00:33:04.800 --> 00:33:07.230
that we'll have in the next
slide you could see that they

00:33:07.230 --> 00:33:11.176
improved their results
50 times.

00:33:11.176 --> 00:33:15.320
All we need to do is just have
this second argument here.

00:33:17.830 --> 00:33:22.340
And in this case just
try and run it.

00:33:22.340 --> 00:33:28.020
As you can see here, I'm running
it inside Chrome.

00:33:28.020 --> 00:33:30.580
So I'm getting a response of
three milliseconds, five

00:33:30.580 --> 00:33:31.700
milliseconds.

00:33:31.700 --> 00:33:39.770
When I try to run the same test
on other browsers you see

00:33:39.770 --> 00:33:42.760
measurements of to 150
milliseconds, 300

00:33:42.760 --> 00:33:45.410
milliseconds, this
sort of things.

00:33:45.410 --> 00:33:46.860
How to do the feature
detection.

00:33:46.860 --> 00:33:50.210
Well, with this simple code,
you'll know exactly if the

00:33:50.210 --> 00:33:53.810
browser is supported
transferable objects or not.

00:33:53.810 --> 00:33:58.255
And right now, it's supported
only on Chrome.

00:33:58.255 --> 00:34:00.460
Native hardware.

00:34:00.460 --> 00:34:05.120
So, we have a flourishing
ability of HTML5 to expose to

00:34:05.120 --> 00:34:09.969
us API's native hardware or
basically bringing us closer

00:34:09.969 --> 00:34:11.900
to the metal.

00:34:11.900 --> 00:34:15.679
The source of true is
of course on W3C.

00:34:15.679 --> 00:34:18.310
And we have some really nice
things today in terms of Geo

00:34:18.310 --> 00:34:23.580
APIs, device orientation, WebGL
on the GPU, Filesystem

00:34:23.580 --> 00:34:25.580
we spoke, network

00:34:25.580 --> 00:34:29.070
connectivity, Battery, Gamepad.

00:34:29.070 --> 00:34:32.219
Basically, both USB
and Bluetooth are

00:34:32.219 --> 00:34:33.600
encapsulated here.

00:34:33.600 --> 00:34:37.150
And WebRTC, which basically
giving you the ability to

00:34:37.150 --> 00:34:42.139
attach the video and audio
inputs of the browser.

00:34:42.139 --> 00:34:45.540
There's a really cool demo
that Sam Dutton did which

00:34:45.540 --> 00:34:49.310
basically show you how Chrome
is speaking with Firefox

00:34:49.310 --> 00:34:52.355
through using WebRTC.

00:34:52.355 --> 00:34:54.820
Please Google it and enjoy it.

00:34:54.820 --> 00:34:56.360
Here is one of the cool
things that I want

00:34:56.360 --> 00:34:59.480
to show you on DevTools.

00:34:59.480 --> 00:35:03.180
If we go, mark it, and
click on inspect,

00:35:03.180 --> 00:35:04.210
DevTools will be open.

00:35:04.210 --> 00:35:05.470
Oh, nice.

00:35:05.470 --> 00:35:08.660
Let's open it again.

00:35:08.660 --> 00:35:12.060
Let's make it to
a bit smaller.

00:35:12.060 --> 00:35:16.510
And what I want to share with
you here is, basically, the

00:35:16.510 --> 00:35:24.650
ability to go to the Web Tools
and override the user agent

00:35:24.650 --> 00:35:28.830
and see how our slides will look
like on the Android Nexus

00:35:28.830 --> 00:35:31.680
S. So, immediately
you could see--

00:35:31.680 --> 00:35:33.595
let me make it even bigger--

00:35:33.595 --> 00:35:37.350
that once I am clicking on the
user agent, I having for free

00:35:37.350 --> 00:35:40.790
the device metrics that
are changing for me.

00:35:40.790 --> 00:35:42.610
So, I can test it on
different devices.

00:35:42.610 --> 00:35:45.340
Let's take, for example,
I don't know, iPhone 5.

00:35:45.340 --> 00:35:48.670
So I can see it immediately.

00:35:48.670 --> 00:35:51.610
Maybe BlackBerry PlayBook.

00:35:51.610 --> 00:35:54.650
Again, so I have all the devices
I have the user agent

00:35:54.650 --> 00:35:56.470
and I could do nice things
like over ride the Geo

00:35:56.470 --> 00:36:01.720
Location, or the device
orientation, or even emulate

00:36:01.720 --> 00:36:02.550
touch event.

00:36:02.550 --> 00:36:06.540
So if I want to make sure that,
in this case slides,

00:36:06.540 --> 00:36:11.220
will run nicely on your tablet
or mobile device I could call

00:36:11.220 --> 00:36:13.380
it a touch event-- and, by the
way, it's working nicely on

00:36:13.380 --> 00:36:17.320
mobile devices so please feel
free to consume these slides

00:36:17.320 --> 00:36:18.750
from any mobile device.

00:36:18.750 --> 00:36:21.620
If you're done with your tests,
you could just click it

00:36:21.620 --> 00:36:24.496
and it will return
to the old state.

00:36:30.330 --> 00:36:35.480
So, let's make it even be
so it will be easier.

00:36:35.480 --> 00:36:37.650
So we saw how you could
mimic some of

00:36:37.650 --> 00:36:38.900
the things in DevTools.

00:36:38.900 --> 00:36:41.900
It's not replacing your
simulator, but it's definitely

00:36:41.900 --> 00:36:46.270
something that you could use
while you are developing.

00:36:46.270 --> 00:36:49.750
The first step for speech
enabled apps are

00:36:49.750 --> 00:36:51.330
already here in WebKit.

00:36:51.330 --> 00:36:55.160
So just feel free to
try and use it.

00:36:55.160 --> 00:36:58.180
Let's give it a try.

00:36:58.180 --> 00:37:00.880
New York.

00:37:00.880 --> 00:37:03.900
And, yeah, you saw that's one of
the things that I know how

00:37:03.900 --> 00:37:05.280
to say correctly.

00:37:05.280 --> 00:37:10.020
So we have 100% of
success here.

00:37:10.020 --> 00:37:16.060
As we spoke about WebRTC, it's
all done through getUserMedia

00:37:16.060 --> 00:37:21.850
API and here you could see how
easy it is to just get the

00:37:21.850 --> 00:37:26.070
stream from your video
or web-cam.

00:37:26.070 --> 00:37:28.930
Here are some really impressive
demos that are just

00:37:28.930 --> 00:37:32.930
showing you the tip
of the iceberg.

00:37:32.930 --> 00:37:35.970
Please feel free to play
with some of them.

00:37:35.970 --> 00:37:37.225
How you recording content.

00:37:39.790 --> 00:37:44.170
Basically, with this one liner
we attaching to our object

00:37:44.170 --> 00:37:48.380
recorder, the local media
stream, and then later on we

00:37:48.380 --> 00:37:53.220
could just use XHR2 in order to
send the information to be

00:37:53.220 --> 00:37:57.670
processed or be shared
on the web.

00:37:57.670 --> 00:38:01.560
It's supported on Chrome,
Firefox, and Opera.

00:38:01.560 --> 00:38:04.060
Hopefully soon on
other browsers.

00:38:04.060 --> 00:38:07.530
When we speaking about this
we can't ignore streaming

00:38:07.530 --> 00:38:09.130
multimedia these days.

00:38:09.130 --> 00:38:16.150
And, luckily for us, web sockets
are now enjoying the

00:38:16.150 --> 00:38:20.240
same benefits that web
workers are enjoying.

00:38:20.240 --> 00:38:23.060
Basically vice versa on the
first bullet point here.

00:38:23.060 --> 00:38:25.540
And you could use a binary
data on them.

00:38:25.540 --> 00:38:30.460
And this short example just
showing you how you slicing

00:38:30.460 --> 00:38:36.850
Blob and sending it to WebSocket
service to being

00:38:36.850 --> 00:38:39.870
manipulated over there.

00:38:39.870 --> 00:38:40.850
Chrome Frame.

00:38:40.850 --> 00:38:45.680
For the ones that got the a user
base that is still using

00:38:45.680 --> 00:38:51.800
IE, maybe IE6, 7, 8,
even 9, we have now

00:38:51.800 --> 00:38:53.160
Chrome Frame which--

00:38:53.160 --> 00:38:55.990
now, for the past few years--

00:38:55.990 --> 00:38:59.130
which basically allows your
users to enjoy all the great

00:38:59.130 --> 00:39:04.510
benefits that we saw in HTML5,
drag and drop, WebGL, Geo

00:39:04.510 --> 00:39:09.110
information, offline
capabilities, Local Storage,

00:39:09.110 --> 00:39:12.460
indexedDB, and more and
more, inside IE.

00:39:12.460 --> 00:39:16.200
Now, if you don't have any
control on your server just

00:39:16.200 --> 00:39:19.550
add this one meta tag
to your HTML.

00:39:19.550 --> 00:39:22.770
And if you have control of your
server, you just need to

00:39:22.770 --> 00:39:24.900
send this one HTTP header.

00:39:24.900 --> 00:39:27.120
I highly encourage you to check
it out because your

00:39:27.120 --> 00:39:28.280
users will thank you.

00:39:28.280 --> 00:39:31.760
They could still be, and work,
with the IE, but they will

00:39:31.760 --> 00:39:35.830
gain huge improvement in
performance not only on your

00:39:35.830 --> 00:39:39.180
app, but on any other app for
popular service like Maps,

00:39:39.180 --> 00:39:41.770
Gmail, Docs, that is
supporting it.

00:39:44.370 --> 00:39:48.310
Web audio is another very
exciting new API in HTML5.

00:39:48.310 --> 00:39:51.030
We don't have time to get into
it, but here are some really

00:39:51.030 --> 00:39:54.840
bold examples that just blew my
mind when I looked at them

00:39:54.840 --> 00:39:56.390
the first time.

00:39:56.390 --> 00:39:58.390
Please feel free to
check them out.

00:39:58.390 --> 00:40:02.390
And, as we saw, the web can do
amazing things these days.

00:40:02.390 --> 00:40:05.780
And the nice thing about it is
it's just the beginning.

00:40:05.780 --> 00:40:10.150
So the base is getting faster
and we're seeing that HTML5 is

00:40:10.150 --> 00:40:11.500
basically flourishing
everywhere.

00:40:15.490 --> 00:40:18.410
So the web is basically what you
will make out of it and I

00:40:18.410 --> 00:40:23.230
can't wait to see new demos that
will showcase and seeing

00:40:23.230 --> 00:40:26.070
this iO this year.

00:40:26.070 --> 00:40:30.150
Some resources from the talk,
which, basically, one of the

00:40:30.150 --> 00:40:32.380
most interesting one is here.

00:40:32.380 --> 00:40:36.800
Cloud Endpoint is out of the
Trusted Tester period and if

00:40:36.800 --> 00:40:40.020
you want test the water just
feel free to click here and

00:40:40.020 --> 00:40:43.230
give it a ride.

00:40:43.230 --> 00:40:44.420
Thank you very much.

00:40:44.420 --> 00:40:48.570
And if we have any questions
this is a

00:40:48.570 --> 00:40:50.020
great time to ask them.

00:41:06.960 --> 00:41:10.433
So we had one question in the
chat, but I can't understand.

00:41:13.600 --> 00:41:15.935
Do you want to ask it or--

00:41:21.770 --> 00:41:22.610
OK.

00:41:22.610 --> 00:41:23.450
OK.

00:41:23.450 --> 00:41:25.880
So, thank you very much
for being with us.

00:41:25.880 --> 00:41:33.770
Next week we're going to have
Eze Vidra from Campus London.

00:41:33.770 --> 00:41:40.810
And we are going to speak with
Eze on some new cool Start-ups

00:41:40.810 --> 00:41:45.340
that are focusing
on making better

00:41:45.340 --> 00:41:47.580
consumption by sharing it.

00:41:47.580 --> 00:41:49.450
So this is just that teaser.

00:41:49.450 --> 00:41:53.780
If you want to dive deeper and
see what are the new trends

00:41:53.780 --> 00:41:57.760
that we see both here in Israel
and up there in cold

00:41:57.760 --> 00:42:01.790
London, just be with us next
Wednesday at 2:00 PM.

00:42:01.790 --> 00:42:03.160
Bye and thank you very much.

