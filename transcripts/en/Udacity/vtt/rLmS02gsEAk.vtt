WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:04.280
So let's look at the write-update
snooping coherence first,

00:00:04.280 --> 00:00:09.590
let's look at two caches only, each of
which has two blocks, with a single

00:00:09.590 --> 00:00:15.400
valid bit per block in the tag, and
then the data, and both of these caches

00:00:15.400 --> 00:00:20.580
are connected to the same bus,
to which we also connect the memory.

00:00:20.580 --> 00:00:23.500
So now let's say that the caches
are initially empty, so

00:00:23.500 --> 00:00:28.860
the value bits are all zero, and this
processor reads something in block A.

00:00:28.860 --> 00:00:33.180
We have a cache miss here,
we send the request to memory.

00:00:33.180 --> 00:00:36.570
This cache is always monitoring
what's going on, on the bus, but

00:00:36.570 --> 00:00:38.960
it's only interested in writes.

00:00:38.960 --> 00:00:42.540
So this read is really going to be
seen and ignored by this cache.

00:00:42.540 --> 00:00:47.280
The data for A comes back from memory
and now we put this block in the cache,

00:00:47.280 --> 00:00:49.390
and the block becomes valid and

00:00:49.390 --> 00:00:52.400
the title message just indicates
that's this is the block A.

00:00:52.400 --> 00:00:55.540
Now let's say that this
processor writes to A.

00:00:55.540 --> 00:00:58.530
So now we have a situation,
where this processor,

00:00:58.530 --> 00:01:01.780
even if it does a write through
access directly to memory,

00:01:01.780 --> 00:01:06.320
a read on this processor would
still read the stale value of A.

00:01:06.320 --> 00:01:09.420
Let's say that the value
we read here was 0.

00:01:09.420 --> 00:01:13.830
Now let's say that this
processor writes 1 to A.

00:01:13.830 --> 00:01:17.530
This write, even if we made
it go all the way to memory,

00:01:17.530 --> 00:01:21.800
would not result in coherent
behavior for this cache,

00:01:21.800 --> 00:01:25.820
because a subsequent read here will
still hit in the cache and get the 0.

00:01:25.820 --> 00:01:30.560
So this is when write update and
snooping come into the picture.

00:01:30.560 --> 00:01:35.890
We have a cache miss, but
because it's a write we send

00:01:35.890 --> 00:01:40.830
a request for the block along with
an indication that it's a write, and

00:01:40.830 --> 00:01:43.210
what is the value and
what's the address.

00:01:43.210 --> 00:01:49.830
So now what happens is this request goes
to memory, and the memory writes 1 to A.

00:01:49.830 --> 00:01:53.420
But more importantly this cache
is monitoring the bus and

00:01:53.420 --> 00:01:56.990
sees that block A is being updated.

00:01:56.990 --> 00:02:00.850
It checks its internal state and
sees that it has block A, and

00:02:00.850 --> 00:02:03.250
then it takes the value
that is being written.

00:02:03.250 --> 00:02:07.040
So this part is the snooping part where
we see what's going on on the bus.

00:02:07.040 --> 00:02:10.310
So we cannot miss any of the writes
happening on another core,

00:02:10.310 --> 00:02:14.010
because we are monitoring the bus, and
all writes have to go through the bus.

00:02:14.010 --> 00:02:15.480
That's the snooping part.

00:02:15.480 --> 00:02:18.380
The right update part is
that when we see a write,

00:02:18.380 --> 00:02:23.060
we update our copy of the data with
the value that is being written.

00:02:23.060 --> 00:02:28.751
So this cache now gets a 1 here,
if we read A after this,

00:02:28.751 --> 00:02:33.870
we're going to get this one, so
this ensures correct behavior.

00:02:33.870 --> 00:02:37.800
If there are multiple cores, they can
not disagree about which right happened

00:02:37.800 --> 00:02:42.520
first, which one happened last because
all of the rights are sent through

00:02:42.520 --> 00:02:47.330
the bus and because it's a single
brotecuz bus, it happens one at a time.

00:02:47.330 --> 00:02:48.890
So all of them see rights,

00:02:48.890 --> 00:02:53.690
in exactly the same order, in the order
in which writes go to the bus.

00:02:53.690 --> 00:02:57.050
Now let's see what happens
if both of these processors

00:02:57.050 --> 00:03:00.110
tried to write to A at
about the same time.

00:03:00.110 --> 00:03:04.100
So this is a situation where they
might disagree about whose write

00:03:04.100 --> 00:03:05.270
happened first.

00:03:05.270 --> 00:03:07.660
Let's say that this one
is trying to write 2 and

00:03:07.660 --> 00:03:09.330
this one is trying to write 3.

00:03:09.330 --> 00:03:13.450
Well there is a single bus, so there
is a single set of wires that can carry

00:03:13.450 --> 00:03:15.690
the value and the address and so on.

00:03:15.690 --> 00:03:18.900
So processors, when they want
to send something on the bus,

00:03:18.900 --> 00:03:22.700
first have to arbitrate for
it, and this arbitration for

00:03:22.700 --> 00:03:25.340
the bus basically decides
who gets the bus next.

00:03:26.340 --> 00:03:31.370
If this core won,
then it sends its write first,

00:03:31.370 --> 00:03:33.640
now both of the caches will have two.

00:03:33.640 --> 00:03:36.100
This one because this is
where the write happened.

00:03:36.100 --> 00:03:40.800
This one because this is what
we pick up from snooping, and

00:03:40.800 --> 00:03:45.600
only then, after this is complete,
this right here gets to occur, so

00:03:45.600 --> 00:03:50.200
now we go to 3, broadcast that here,
and it gets here.

00:03:50.200 --> 00:03:53.490
So as you can see, both of them
agree which write was first and

00:03:53.490 --> 00:03:55.080
which was second.

00:03:55.080 --> 00:03:57.470
Obviously, the one that
wrote 3 was the second one,

00:03:57.470 --> 00:03:59.226
because that's the last value we kept.

00:03:59.226 --> 00:04:04.170
So the write update is
ensuring that writes are seen

00:04:04.170 --> 00:04:09.260
by reads on all cores, and
the snooping of the common bus and

00:04:09.260 --> 00:04:13.050
the serialization on that bus, basically
going one at a time to the bus is

00:04:13.050 --> 00:04:15.870
guaranteeing that everybody
sees the same order of writes.

