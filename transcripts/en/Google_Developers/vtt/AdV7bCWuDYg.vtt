WEBVTT
Kind: captions
Language: en

00:00:16.180 --> 00:00:17.160
MANO MARKS: Hi, I'm
Mano Marks.

00:00:17.160 --> 00:00:19.840
I'm a Developer Advocate on
the Google Maps Developer

00:00:19.840 --> 00:00:21.150
Relations team.

00:00:21.150 --> 00:00:23.820
I'm going to talk to you today
about putting driving

00:00:23.820 --> 00:00:29.600
directions in your Google Maps
iOS app using the Google Maps

00:00:29.600 --> 00:00:34.460
SDK for iOS and also the
Google Geocoding API.

00:00:34.460 --> 00:00:37.300
So you'll take a look
here at my screen.

00:00:37.300 --> 00:00:41.750
You'll see that what I've got
is an iPad simulator.

00:00:41.750 --> 00:00:46.020
And I'm just going to click
on two different points.

00:00:46.020 --> 00:00:48.880
And you'll see that
it drew a polyline

00:00:48.880 --> 00:00:51.490
between the two of them.

00:00:51.490 --> 00:00:55.050
So what we're going to do is
walk through that demo.

00:00:55.050 --> 00:00:59.400
Now before I do that, I just
want to give you a pointer to

00:00:59.400 --> 00:01:03.460
all the things that this
is going to depend on.

00:01:03.460 --> 00:01:07.420
We are going to be getting
an NSData object from

00:01:07.420 --> 00:01:09.060
dataWithContentsOfURL.

00:01:09.060 --> 00:01:11.220
So this is a standard way
of pulling in JSON.

00:01:11.220 --> 00:01:14.210
And we're going to do
that to pull in the

00:01:14.210 --> 00:01:17.340
Google Geocoding API.

00:01:17.340 --> 00:01:20.920
We're going to get back an
NSJSONSerialization object,

00:01:20.920 --> 00:01:23.210
which we are then going
to walk through

00:01:23.210 --> 00:01:25.710
pulling out data from.

00:01:25.710 --> 00:01:28.050
Another piece of this that
we're going to use is

00:01:28.050 --> 00:01:29.840
mapView:didTapAtCoordinate.

00:01:29.840 --> 00:01:34.690
This is just a way to trap the
events for when you click,

00:01:34.690 --> 00:01:37.350
which is what you saw
me do in the demo.

00:01:37.350 --> 00:01:40.740
And we're going to use
GMSPolylineWithPath.

00:01:40.740 --> 00:01:43.510
We're going to do this
all very quickly.

00:01:43.510 --> 00:01:48.530
So if you've seen before the
shortcut that I did on

00:01:48.530 --> 00:01:55.830
geocoding and also the one I did
on an earthquake tracker,

00:01:55.830 --> 00:01:58.200
some of this is going to
be familiar to you.

00:01:58.200 --> 00:02:00.710
And you'll see how when I
walk through the code.

00:02:04.370 --> 00:02:09.539
So what I've got here
is a standards app.

00:02:09.539 --> 00:02:13.600
I prefixed everything MD
for Maps Directions.

00:02:13.600 --> 00:02:19.150
I had a little storyboard for
putting up my application.

00:02:19.150 --> 00:02:23.340
And then you'll see I've got an
MD view controller and MD

00:02:23.340 --> 00:02:24.630
direction service.

00:02:24.630 --> 00:02:30.340
So I farmed out to a separate
class the MD direction service

00:02:30.340 --> 00:02:36.060
for trapping in the directions
just to make that code a

00:02:36.060 --> 00:02:38.020
little bit more reusable.

00:02:38.020 --> 00:02:41.030
And by the way, any code that I
show you today I'm going to

00:02:41.030 --> 00:02:45.920
put up in GitHub under
my personal account.

00:02:45.920 --> 00:02:48.230
So here we're in the
view controller.

00:02:48.230 --> 00:02:52.930
And you can see what I did here
is I created a map view,

00:02:52.930 --> 00:02:55.830
a dib map at coordinate.

00:02:55.830 --> 00:03:02.450
And what that does is it takes a
coordinate that results from

00:03:02.450 --> 00:03:03.680
the tap on the map.

00:03:03.680 --> 00:03:08.830
And from there, you can
pull out a position.

00:03:08.830 --> 00:03:11.900
And then I created a marker
based on that.

00:03:11.900 --> 00:03:16.300
So the position is just a
CLLocation coordinate, 2D.

00:03:19.568 --> 00:03:25.230
And I add that marker to
the waypoints array.

00:03:25.230 --> 00:03:30.510
And I create a position string
from each coordinate.

00:03:30.510 --> 00:03:33.350
So as I tap it, coordinate,
latitude coordinate,

00:03:33.350 --> 00:03:36.630
longitude, I just create a
string that I then store in

00:03:36.630 --> 00:03:40.280
the waypoint strings because
that's going to be easier for

00:03:40.280 --> 00:03:45.080
constructing a Google
geocoding URL.

00:03:45.080 --> 00:03:48.940
Then I check and see if the
count of the number of objects

00:03:48.940 --> 00:03:52.460
in the waypoint string array
is greater than one.

00:03:52.460 --> 00:03:57.220
And if it is, I then pass in
some parameters to the

00:03:57.220 --> 00:03:59.430
geocoding request.

00:03:59.430 --> 00:04:02.440
So you see here, I'm
creating a sensor.

00:04:02.440 --> 00:04:05.030
And I'm just going to default
this to be false because the

00:04:05.030 --> 00:04:07.380
position that's being detected
is not being

00:04:07.380 --> 00:04:09.310
detected from a sensor.

00:04:09.310 --> 00:04:13.740
And just to point out, most of
you know, sensor in this case

00:04:13.740 --> 00:04:17.690
doesn't actually give you
any additional benefits.

00:04:17.690 --> 00:04:19.790
It's just our way of tracking
whether or not you're using a

00:04:19.790 --> 00:04:24.140
sensor so we can report that
to our data providers.

00:04:24.140 --> 00:04:26.410
Then if you look here--

00:04:26.410 --> 00:04:31.540
I'm creating a parameters array
in which I created with

00:04:31.540 --> 00:04:35.180
objects sensor and the waypoint
strings, so all the

00:04:35.180 --> 00:04:37.800
strings that have been created
up to that point.

00:04:37.800 --> 00:04:43.410
And then I create a keys object,
a keys array rather.

00:04:43.410 --> 00:04:46.750
Array with objects sensor and
waypoints being the two keys.

00:04:46.750 --> 00:04:50.490
And I pass that as a dictionary
to an object called

00:04:50.490 --> 00:04:53.285
query to MD directions
service.

00:04:56.190 --> 00:05:04.240
I also passed to it a selector
add directions, which is going

00:05:04.240 --> 00:05:10.210
to take care of adding the
directions to the map once I'm

00:05:10.210 --> 00:05:12.000
done getting the directions.

00:05:12.000 --> 00:05:13.670
And I add pass in the
delegate self.

00:05:13.670 --> 00:05:19.280
This is a standard messaging
model in iOS.

00:05:19.280 --> 00:05:26.560
So what we've got here then is
I'm creating the service.

00:05:26.560 --> 00:05:30.960
And you see here I've got the
set directions query with

00:05:30.960 --> 00:05:32.770
selector and with delegate.

00:05:32.770 --> 00:05:37.140
And by the way, the reason I'm
doing this sort of selector

00:05:37.140 --> 00:05:41.660
delegate model for messaging
is so that I can do an

00:05:41.660 --> 00:05:46.200
asynchronous call to our
geocoding services.

00:05:46.200 --> 00:05:49.540
This is a little bit different
from my last shortcut where I

00:05:49.540 --> 00:05:52.240
did a synchronous call to
the geocoding service.

00:05:52.240 --> 00:05:53.720
Just want to show you
a different way.

00:05:53.720 --> 00:05:56.140
And generally, when you're
calling to web services, you

00:05:56.140 --> 00:06:03.720
want to do an asynchronous call
because that gives your

00:06:03.720 --> 00:06:06.980
application the opportunity to
keep going if the web service

00:06:06.980 --> 00:06:11.460
takes a while to populate.

00:06:11.460 --> 00:06:17.020
So here I create an array of
waypoints just from the query

00:06:17.020 --> 00:06:19.240
object pulling out
the waypoints.

00:06:19.240 --> 00:06:22.840
I get the origin, which
is the first one.

00:06:22.840 --> 00:06:24.950
I count the number
of waypoints.

00:06:24.950 --> 00:06:28.310
And I get the destination,
which is the last one.

00:06:28.310 --> 00:06:30.890
And then I pull out
the sensor.

00:06:30.890 --> 00:06:35.090
Then I create a URL string,
which is basically the base

00:06:35.090 --> 00:06:37.200
URL, which is this here.

00:06:37.200 --> 00:06:42.290
This is the geocoding
API's base URL.

00:06:42.290 --> 00:06:46.270
And you notice I've used
the JSON version of it.

00:06:46.270 --> 00:06:48.910
You can also use an XML
based version of it.

00:06:48.910 --> 00:06:52.030
Most developers these days are
preferring to use JSON because

00:06:52.030 --> 00:06:56.510
it's really easy to work with.

00:06:56.510 --> 00:06:56.890
OK.

00:06:56.890 --> 00:07:03.060
So then I'm basically creating
a new URL string with origin

00:07:03.060 --> 00:07:07.480
destination sensor and if the
waypoint count is more than

00:07:07.480 --> 00:07:09.980
two, additional waypoints.

00:07:09.980 --> 00:07:18.390
So you can pass to the
directions API, the ability to

00:07:18.390 --> 00:07:21.850
track multiple waypoints in
directions, that is saying

00:07:21.850 --> 00:07:26.410
pass through all these points
between the origin and the

00:07:26.410 --> 00:07:29.630
destination and then optimize
the route or not--

00:07:29.630 --> 00:07:31.820
your choice.

00:07:31.820 --> 00:07:33.500
So then I'm just adding
in additional

00:07:33.500 --> 00:07:35.560
waypoints to the string.

00:07:35.560 --> 00:07:45.740
And then here I'm basically
URL encoding the string.

00:07:45.740 --> 00:07:53.680
And then once it's done, I
retrieve the directions with a

00:07:53.680 --> 00:07:56.220
particular selector
and delegate.

00:07:56.220 --> 00:08:01.150
So retrieve directions
is the next function.

00:08:01.150 --> 00:08:06.090
So retrieve directions I pass
in the selector and delegate

00:08:06.090 --> 00:08:09.120
and basically say, create
this data object.

00:08:09.120 --> 00:08:12.910
And then pass it to the selector
and delegate that

00:08:12.910 --> 00:08:16.980
I've chosen, which brings us
back to add directions.

00:08:16.980 --> 00:08:23.530
So add directions returns this
object, this JSON object.

00:08:23.530 --> 00:08:28.070
And I'm grabbing the
objectForKey routes.

00:08:28.070 --> 00:08:31.910
So if you look at the direction
response, that's

00:08:31.910 --> 00:08:33.480
where the core--

00:08:33.480 --> 00:08:36.200
the root object.

00:08:36.200 --> 00:08:41.590
And then I'm finding the route,
which is objectForKey

00:08:41.590 --> 00:08:43.200
overview polyline.

00:08:43.200 --> 00:08:49.700
Now an overview polyline is a
way of encoding the directions

00:08:49.700 --> 00:08:55.540
into a polyline-- into a string,
which compresses the

00:08:55.540 --> 00:09:00.540
string greatly over simply
creating coordinates for each

00:09:00.540 --> 00:09:02.640
point along the string.

00:09:02.640 --> 00:09:06.370
It describes it in a highly
dense format.

00:09:06.370 --> 00:09:13.590
And then GMS path, which is how
you create a path in the

00:09:13.590 --> 00:09:19.590
Maps SDK, then can read that
encoded polyline into it and

00:09:19.590 --> 00:09:23.690
create a path out of it.

00:09:23.690 --> 00:09:28.950
Then finally, I create a
polyline from that path object

00:09:28.950 --> 00:09:31.910
and put it onto the map.

00:09:31.910 --> 00:09:35.300
And that's it.

00:09:35.300 --> 00:09:38.690
Now you can see the optimization
happens when I

00:09:38.690 --> 00:09:43.030
add in additional points
along the map.

00:09:43.030 --> 00:09:45.960
So that's it for this
map shortcut.

00:09:45.960 --> 00:09:49.430
Thank you very much for
joining us this week.

00:09:49.430 --> 00:09:51.020
And we'll see you next week.

