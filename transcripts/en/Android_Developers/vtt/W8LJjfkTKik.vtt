WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.808
[MUSIC PLAYING]

00:00:06.560 --> 00:00:09.440
When you first enter the
world of automated testing,

00:00:09.440 --> 00:00:12.730
you might be overwhelmed with
some of the terminology-- unit

00:00:12.730 --> 00:00:15.350
tests, instrumented
tests, mocking.

00:00:15.350 --> 00:00:17.280
It can be a little
daunting to even start

00:00:17.280 --> 00:00:18.870
to learn about testing.

00:00:18.870 --> 00:00:20.470
If you're watching
this video, you're

00:00:20.470 --> 00:00:23.390
probably looking for an answer
to one simple question--

00:00:23.390 --> 00:00:26.010
how do I start adding
tests to my app?

00:00:26.010 --> 00:00:27.680
Don't worry, that's
what's Android

00:00:27.680 --> 00:00:29.310
testing patterns is all about.

00:00:29.310 --> 00:00:30.670
But please, bear with me.

00:00:30.670 --> 00:00:32.710
Let's start with some basics.

00:00:32.710 --> 00:00:34.670
This is the testing pyramid.

00:00:34.670 --> 00:00:36.850
It represents the
various levels or types

00:00:36.850 --> 00:00:39.030
of tests you can
add to your app.

00:00:39.030 --> 00:00:41.860
Unit tests are perhaps the
most basic type of tests,

00:00:41.860 --> 00:00:44.720
but basic is not the
same as unimportant.

00:00:44.720 --> 00:00:47.700
In fact, they should form the
foundation of your whole test

00:00:47.700 --> 00:00:48.750
strategy.

00:00:48.750 --> 00:00:51.837
That's why they sit at
the bottom of the pyramid.

00:00:51.837 --> 00:00:53.920
Unit tests verify the
correctness are the smallest

00:00:53.920 --> 00:00:56.730
units of your code, such
as methods and classes,

00:00:56.730 --> 00:00:58.940
in isolation from the
rest of the code base

00:00:58.940 --> 00:01:01.900
or even the platform
they will be running on.

00:01:01.900 --> 00:01:05.500
In fact, you can actually run
unit tests for Android apps

00:01:05.500 --> 00:01:08.050
on your computer thanks to
support from Android Studio

00:01:08.050 --> 00:01:09.450
and Gradle.

00:01:09.450 --> 00:01:11.120
If it's unclear to
you why you should

00:01:11.120 --> 00:01:14.470
test code in isolation from
Android, think of it this way--

00:01:14.470 --> 00:01:16.640
how can you even begin
to check if your banking

00:01:16.640 --> 00:01:19.430
app, for example, runs
on an Android device

00:01:19.430 --> 00:01:21.630
without first making
sure that basic business

00:01:21.630 --> 00:01:23.360
logic, such as
currency conversions

00:01:23.360 --> 00:01:26.660
or calculating an account
balance, work correctly?

00:01:26.660 --> 00:01:29.430
But you are writing an
Android app, after all.

00:01:29.430 --> 00:01:32.230
So you need to be able to
test how your code behaves

00:01:32.230 --> 00:01:34.500
on a real device or emulator.

00:01:34.500 --> 00:01:38.140
And that's when you'd want
to use instrumentation tests.

00:01:38.140 --> 00:01:39.760
Why do we call them
instrumentation

00:01:39.760 --> 00:01:41.580
or instrumented tests?

00:01:41.580 --> 00:01:44.280
Instrumentation is an
Android framework component

00:01:44.280 --> 00:01:46.620
that provides additional
monitoring and control

00:01:46.620 --> 00:01:48.880
over the application
Android test.

00:01:48.880 --> 00:01:50.560
For the use of
instrumentation, we

00:01:50.560 --> 00:01:53.020
can run tests on a
real device or emulator

00:01:53.020 --> 00:01:55.010
alongside your app's code.

00:01:55.010 --> 00:01:56.380
How does that work?

00:01:56.380 --> 00:01:58.120
Well, the test
that you write will

00:01:58.120 --> 00:02:00.920
be packaged into a
separate APK and installed

00:02:00.920 --> 00:02:03.570
as part of the connected
Android test Gradle task

00:02:03.570 --> 00:02:06.210
or when running tests
in Android Studio.

00:02:06.210 --> 00:02:08.850
They will then be executed
in your app's process

00:02:08.850 --> 00:02:10.660
by an instrumentation runner.

00:02:10.660 --> 00:02:12.520
We provide a runner
implementation

00:02:12.520 --> 00:02:15.690
that is compatible with JUnit4
tests as part of the Android

00:02:15.690 --> 00:02:18.250
Testing Support
Library, or ATSL.

00:02:18.250 --> 00:02:20.720
To use it, make sure you
have the newest version

00:02:20.720 --> 00:02:24.660
of Android Support Repository
installed within your SDK.

00:02:24.660 --> 00:02:27.610
The ATSL comes with a
great UI testing framework

00:02:27.610 --> 00:02:29.680
called Espresso
that I will focus on

00:02:29.680 --> 00:02:32.660
in the next few episodes of
Android Testing Patterns.

00:02:32.660 --> 00:02:34.740
It also contains
JUnit4 rules that

00:02:34.740 --> 00:02:37.200
can automatically start
activities and services

00:02:37.200 --> 00:02:38.720
for your tests.

00:02:38.720 --> 00:02:41.580
Now, I'm sure you're all eager
to see some testing in action.

00:02:41.580 --> 00:02:44.260
So be sure to click through
to the next video, where

00:02:44.260 --> 00:02:47.430
I show you how to run
your first Espresso test.

00:02:47.430 --> 00:02:50.480
[MUSIC PLAYING]

