WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.871
Final thought on histogram--it's certainly possible, even desirable to combine these methods.

00:00:04.918 --> 00:00:07.770
For instance, the disadvantage of the atomic method is that a large number

00:00:07.770 --> 00:00:10.704
of threads are trying to get simultaneous access to bins,

00:00:10.704 --> 00:00:12.989
so most threads end up waiting around.

00:00:13.012 --> 00:00:16.201
If we could reduce the number of threads trying to simultaneously

00:00:16.201 --> 00:00:18.474
access an atomic, that would remove the bottleneck.

00:00:18.481 --> 00:00:21.516
So, we might choose to use the reduction technique within a block

00:00:21.516 --> 00:00:26.719
to combine all the individual histogram operations from each thread in that block into a single histogram,

00:00:26.719 --> 00:00:31.805
then use a single thread within that block to add that per-block histogram into the global histogram.

00:00:31.812 --> 00:00:37.330
For instance, if we have 256 threads in our block and 8 bins in our histogram,

00:00:37.353 --> 00:00:39.889
we might choose to do our implementation 1 of 2 ways.

00:00:39.912 --> 00:00:44.866
One is that each individual thread within our block atomically increments a global bin.

00:00:44.866 --> 00:00:50.516
Another is that we can take the 256 threads that we have, each one containing a single measurement,

00:00:50.516 --> 00:00:54.862
and then reduce them within the block, locally, to produce one 8-element histogram.

00:00:54.885 --> 00:01:00.350
Then, use that 8-element histogram to update the global histogram.

00:01:00.373 --> 00:01:04.308
For each of these, how many atomic adds are we going to need to do?

