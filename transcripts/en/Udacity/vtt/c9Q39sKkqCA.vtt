WEBVTT
Kind: captions
Language: en

00:00:00.450 --> 00:00:04.590
I'm back in Xcode again and we're paused
at the handleSingleTap method for

00:00:04.590 --> 00:00:07.160
the BreakpointBugViewController.

00:00:07.160 --> 00:00:09.496
And I'll go ahead and
run our first command that we saw.

00:00:09.496 --> 00:00:16.570
So, breakpoint set --file,
we'll use BugFactory.swift.

00:00:16.570 --> 00:00:20.970
And a line, line 26, and hit Enter.

00:00:20.970 --> 00:00:24.090
And when I hit Enter, you'll notice
that it assigns the breakpoint a number.

00:00:24.090 --> 00:00:28.090
This is going to be Breakpoint 2, but
it doesn't change anything in Xcode UI.

00:00:28.090 --> 00:00:34.200
If we actually go to Debug Factory, we
don't see a breakpoint here on line 26.

00:00:34.200 --> 00:00:38.520
And that's okay,
the breakpoint actually does exist.

00:00:38.520 --> 00:00:42.900
It just exists in the console
session and the UI does not update.

00:00:42.900 --> 00:00:44.910
Maybe that's something
they'll add later.

00:00:44.910 --> 00:00:48.190
But, for now, just know that
your breakpoint does exist, and

00:00:48.190 --> 00:00:51.040
if we hit continue, and
continue the application,

00:00:51.040 --> 00:00:54.007
we can see that we've dropped in,
and that we've hit Breakpoint 2.

00:00:55.470 --> 00:00:59.890
Now, for the next command, we'll do our,
here, let me clear out again.

00:00:59.890 --> 00:01:02.860
We'll use breakpoint set, and

00:01:02.860 --> 00:01:08.510
this time we'll pass the selector
option, and viewDidLoad.

00:01:08.510 --> 00:01:10.960
So this is a little strange.

00:01:10.960 --> 00:01:13.790
It says that our Breakpoint
3 is 23 locations.

00:01:13.790 --> 00:01:16.260
And that's a lot of breakpoints.

00:01:16.260 --> 00:01:17.380
But that's kind of the point.

00:01:17.380 --> 00:01:21.220
Setting breakpoints on selectors
manually would be very tedious.

00:01:21.220 --> 00:01:26.267
So, you can imagine if we had, say,
23 view controllers, we would have

00:01:26.267 --> 00:01:31.317
to click through each file, so print,
see the PrintBugViewController,

00:01:31.317 --> 00:01:36.390
and go to viewDidLoad and set it here,
but I'm not going to do that right now.

00:01:36.390 --> 00:01:39.470
We'd have to do it for this one,
and so on, and so forth.

00:01:39.470 --> 00:01:41.730
So this saves us a lot of time.

00:01:41.730 --> 00:01:45.520
And this is another good reason to
know how to use the command line.

00:01:45.520 --> 00:01:49.613
So let's continue the app and see if
we reach one of the 23 breakpoints.

00:01:49.613 --> 00:01:51.213
We're still stuck in createBug.

00:01:51.213 --> 00:01:56.150
Oh that's right, that's because
we're creating way too many bugs.

00:01:56.150 --> 00:01:59.380
So before we can continue,
we need to disable this or

00:01:59.380 --> 00:02:02.580
else I'm going to have to
hit play a bunch of times.

00:02:02.580 --> 00:02:06.110
So since there's no UI element
to actually disable this,

00:02:06.110 --> 00:02:08.280
we're going to have to do it
through the command line.

00:02:08.280 --> 00:02:10.479
So I'll type breakpoint.

00:02:10.479 --> 00:02:12.960
And there's a subcommand disable.

00:02:12.960 --> 00:02:15.510
And then we pass in
the number of the breakpoint.

00:02:15.510 --> 00:02:17.240
So breakpoint 2.

00:02:17.240 --> 00:02:19.620
And this should disable our breakpoint.

00:02:19.620 --> 00:02:21.380
And now we'll hit play.

00:02:21.380 --> 00:02:23.160
And should be back, there we go.

00:02:23.160 --> 00:02:25.460
So we're back at the running state.

00:02:25.460 --> 00:02:28.930
And, so to trigger any of
the viewDidLoad breakpoints that we set,

00:02:28.930 --> 00:02:31.250
we're going to have to load a new view.

00:02:31.250 --> 00:02:34.210
So let's go back to the main view, and

00:02:34.210 --> 00:02:37.460
then go to the Breakpoint Bugging
to view again.

00:02:37.460 --> 00:02:40.820
And it's stopped us on Breakpoint 3.

00:02:40.820 --> 00:02:44.180
And if we pull back a little bit we
can see that stack frame one is that

00:02:44.180 --> 00:02:45.430
viewDidLoad.

00:02:45.430 --> 00:02:48.750
It indeed did drop us in into
a viewDidLoad breakpoint.

00:02:49.820 --> 00:02:53.190
So let's demonstrate the last
two from this exercise.

00:02:53.190 --> 00:02:57.436
We'll go back to the breakpoint
BugViewController and

00:02:57.436 --> 00:03:01.510
let's add a breakpoint to
the addBugToView method.

00:03:01.510 --> 00:03:02.540
We'll hit play.

00:03:04.240 --> 00:03:04.800
There we go.

00:03:04.800 --> 00:03:05.615
Let's clear this out.

00:03:05.615 --> 00:03:09.576
So now we'll do breakpoint list.

00:03:09.576 --> 00:03:11.470
Breakpoint list.

00:03:11.470 --> 00:03:14.330
Let's drag this up,
see everything we're looking at.

00:03:14.330 --> 00:03:16.138
So our first breakpoint.

00:03:16.138 --> 00:03:20.470
Set and BreakpointBugViewController
on handleSingleTap.

00:03:20.470 --> 00:03:23.741
Then we have the line breakpoint
that we set from line 26.

00:03:23.741 --> 00:03:28.481
And then here's the viewDidLoad selector
so we can see that it's set a bunch.

00:03:28.481 --> 00:03:30.692
We have a bunch of
different viewDidLoads for

00:03:30.692 --> 00:03:32.505
all these different UI kit classes.

00:03:32.505 --> 00:03:34.245
So that's pretty cool.

00:03:34.245 --> 00:03:35.805
And oops.
There's one other thing I want to show.

00:03:35.805 --> 00:03:39.930
This is actually another really
neat thing you can see, hit count.

00:03:39.930 --> 00:03:43.610
So it actually shows us how many times
we've reached a certain breakpoint.

00:03:43.610 --> 00:03:45.685
So this could be really
useful information,

00:03:45.685 --> 00:03:48.695
you can imagine that in certain
cases you might want to know this.

00:03:48.695 --> 00:03:56.430
And for the last command we'll
do thread backtrace all.

00:03:56.430 --> 00:04:00.810
And this is the command-line equivalent
of all the stack trace information that

00:04:00.810 --> 00:04:03.490
we have available to us
over here in the navigator.

00:04:03.490 --> 00:04:08.103
So we can see for thread 1, we have,
there should be frame 0, 1, 2, and

00:04:08.103 --> 00:04:08.840
then 17.

00:04:08.840 --> 00:04:11.510
Oh wow,
it shows us even more information.

00:04:11.510 --> 00:04:13.580
Okay.
Maybe that's because I don't have all

00:04:13.580 --> 00:04:14.290
our options here.

00:04:14.290 --> 00:04:16.610
Nope, wrong option.

00:04:16.610 --> 00:04:19.800
So I believe there's an option to show,
there we go.

00:04:19.800 --> 00:04:23.820
This will show only stack frames with
debug symbols and between libraries.

00:04:23.820 --> 00:04:28.590
So, we don't have symbols for these
particular frames, but we can see way

00:04:28.590 --> 00:04:34.245
more information with this
particular icon unclicked.

00:04:34.245 --> 00:04:36.865
And then for thread 2, open him up.

00:04:36.865 --> 00:04:38.815
We have frames 0, 1, and 2.

00:04:38.815 --> 00:04:41.975
And the next thread, thread 8,
we have 0, 1, and 2 as well.

00:04:41.975 --> 00:04:44.465
I think that's going to be the same,
yep, for thread 9.

