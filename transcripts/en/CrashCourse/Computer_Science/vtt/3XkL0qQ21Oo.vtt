WEBVTT
Kind: captions
Language: en

00:00:03.020 --> 00:00:05.899
Hi, I’m Carrie Anne, and welcome to CrashCourse
Computer Science!

00:00:05.899 --> 00:00:07.620
Today we’re going to talk about robots.

00:00:07.620 --> 00:00:11.480
The first image that jumps to your mind is
probably a humanoid robot, like we usually

00:00:11.480 --> 00:00:13.050
see in shows or movies.

00:00:13.050 --> 00:00:17.350
Sometimes they’re our friends and colleagues,
but more often, they’re sinister, apathetic

00:00:17.350 --> 00:00:18.540
and battle-hardened.

00:00:18.540 --> 00:00:21.840
We also tend to think of robots as a technology
of the future.

00:00:21.840 --> 00:00:25.710
But the reality is: they’re already here
– by the millions – and they’re our

00:00:25.710 --> 00:00:29.220
workmates, helping us to do things harder,
better, faster, and stronger.

00:00:29.220 --> 00:00:38.240
INTRO

00:00:38.240 --> 00:00:41.980
There are many definitions for robots, but
in general, these are machines capable of

00:00:41.980 --> 00:00:46.489
carrying out a series of actions automatically,
guided by computer control.

00:00:46.489 --> 00:00:50.359
How they look isn’t part of the equation
– robots can be industrial arms that spray

00:00:50.359 --> 00:00:55.870
paint cars, drones that fly, snake-like medical
robots that assist surgeons, as well as humanoid

00:00:55.870 --> 00:00:56.870
robotic assistants.

00:00:56.870 --> 00:01:01.059
Although the term “robot” is sometimes
applied to interactive virtual characters,

00:01:01.059 --> 00:01:04.770
it’s more appropriate to call these “bots”,
or even better, “agents.”

00:01:04.770 --> 00:01:09.220
That’s because the term “robot” carries
a physical connotation a machine that lives

00:01:09.220 --> 00:01:10.870
in and acts on the real world.

00:01:10.870 --> 00:01:15.970
The word “robot” was first used in a 1920
Czech play to denote artificial, humanoid

00:01:15.970 --> 00:01:16.800
characters.

00:01:16.800 --> 00:01:21.140
The word was derived from “robota”, the
slavic-language word for a forced laborer,

00:01:21.150 --> 00:01:24.900
indicating peasants in compulsory service
in feudal, nineteenth century Europe.

00:01:24.910 --> 00:01:27.670
The play didn’t go too much into technological
details.

00:01:27.670 --> 00:01:32.720
But, even a century later, it’s still a
common portrayal: mass-produced, efficient,

00:01:32.720 --> 00:01:36.980
tireless creatures that look human-esque,
but are emotionless, indifferent to self-preservation

00:01:36.980 --> 00:01:38.350
and lack creativity.

00:01:38.350 --> 00:01:43.800
The more general idea of self-operating machines
goes back even further than the 1920s.

00:01:43.800 --> 00:01:48.740
Many ancient inventors created mechanical
devices that performed functions automatically,

00:01:48.740 --> 00:01:51.320
like keeping the time and striking bells on
the hour.

00:01:51.320 --> 00:01:55.620
There are plenty of examples of automated
animal and humanoid figures, that would perform

00:01:55.620 --> 00:01:59.020
dances, sing songs, strike drums and do other
physical actions.

00:01:59.020 --> 00:02:02.900
These non-electrical and certainly non-electronic
machines were called automatons.

00:02:02.900 --> 00:02:08.879
For instance, an early automaton created in
1739 by the Frenchman Jacques de Vaucanson

00:02:08.880 --> 00:02:13.700
was the Canard Digerateur or Digesting Duck,
a machine in the shape of a duck that appeared

00:02:13.700 --> 00:02:15.660
to eat grain and then defecate.

00:02:15.660 --> 00:02:17.900
In 1739 Voltaire wrote,

00:02:17.900 --> 00:02:22.319
“Without the voice of le Maure and Vaucanson’s
duck, you would have nothing to remind you

00:02:22.320 --> 00:02:23.880
of the glory of France.”

00:02:23.880 --> 00:02:28.340
One of the most infamous examples was the
“Mechanical Turk”: a chess-playing, humanoid

00:02:28.349 --> 00:02:29.340
automaton.

00:02:29.349 --> 00:02:34.480
After construction in 1770, it toured all
over Europe, wowing audiences with its surprisingly

00:02:34.480 --> 00:02:35.480
good chess-playing.

00:02:35.480 --> 00:02:38.790
It appeared to be a mechanical, artificial
intelligence.

00:02:38.790 --> 00:02:43.340
Unfortunately, it was a hoax – there was
a dainty human stuffed inside the machine.

00:02:43.340 --> 00:02:47.360
The first machines controlled by computers
emerged in the late 1940s.

00:02:47.360 --> 00:02:52.000
These Computer Numerical Control, or CNC,
machines, could run programs that instructed

00:02:52.000 --> 00:02:54.420
a machine to perform a series of operations.

00:02:54.420 --> 00:02:59.099
This level of control also enabled the creation
of new manufactured goods, like milling a

00:02:59.099 --> 00:03:02.579
complex propellor design out of a block of
aluminum – something that was difficult

00:03:02.580 --> 00:03:07.180
to do using standard machine tools, and with
tolerances too small to be done by hand.

00:03:07.180 --> 00:03:12.340
CNC machines were a huge boon to industry,
not just due to increased capability and precision,

00:03:12.340 --> 00:03:16.610
but also in terms of reducing labor costs
by automating human jobs – a topic we’ll

00:03:16.610 --> 00:03:18.159
revisit in a later episode.

00:03:18.160 --> 00:03:22.680
The first commercial deployment was a programmable
industrial robot called the Unimate, sold

00:03:22.680 --> 00:03:27.760
to General Motors in 1960 to lift hot pieces
of metal from a die casting machine and stack

00:03:27.760 --> 00:03:28.360
them.

00:03:28.360 --> 00:03:30.800
This was the start of the robotics industry.

00:03:30.810 --> 00:03:34.860
Soon, robots were stacking pallets, welding
parts, painting cars and much more.

00:03:34.870 --> 00:03:38.700
For simple motions – like a robotic gripper
that moves back and forth on a track – a

00:03:38.700 --> 00:03:42.780
robot can be instructed to move to a particular
position, and it’ll keep moving in that

00:03:42.780 --> 00:03:47.230
direction until the desired position is reached,
at which point it’ll stop.

00:03:47.230 --> 00:03:50.300
This behavior can be achieved through a simple
control loop.

00:03:50.300 --> 00:03:52.380
First, sense the robot position.

00:03:52.380 --> 00:03:53.680
Are we there yet?

00:03:53.680 --> 00:03:54.380
Nope.

00:03:54.380 --> 00:03:55.680
So keep moving.

00:03:55.680 --> 00:03:56.680
Now sense position again.

00:03:56.680 --> 00:03:57.980
Are we there yet?

00:03:57.980 --> 00:03:59.109
Nope, so keep moving.

00:03:59.109 --> 00:04:00.529
Are we there yet?

00:04:00.529 --> 00:04:01.120
Yes!

00:04:01.120 --> 00:04:03.600
So we can stop moving, and also please be
quiet!

00:04:03.600 --> 00:04:07.360
Because we’re trying to minimize the distance
between the sensed position and the desired

00:04:07.370 --> 00:04:11.480
position, this control loop is, more specifically,
a negative feedback loop.

00:04:11.480 --> 00:04:14.439
A negative feedback control loop has three
key pieces.

00:04:14.439 --> 00:04:18.400
There’s a sensor, that measures things in
the real world, like water pressure, motor

00:04:18.400 --> 00:04:21.400
position, air temperature, or whatever you’re
trying to control.

00:04:21.400 --> 00:04:25.760
From this measurement, we calculate how far
we are from where we want to be – the error.

00:04:25.760 --> 00:04:29.940
The error is then interpreted by a controller,
which decides how to instruct the system to

00:04:29.949 --> 00:04:31.270
minimize that error.

00:04:31.270 --> 00:04:35.590
Then, the system acts on the world though
pumps, motors, heating elements, and other

00:04:35.590 --> 00:04:36.639
physical actuators.

00:04:36.639 --> 00:04:40.750
In tightly controlled environments, simple
control loops, like this, work OK.

00:04:40.750 --> 00:04:45.020
But in many real world applications, things
are a tad more complicated.

00:04:45.020 --> 00:04:49.259
Imagine that our gripper is really heavy,
and even when the control loop says to stop,

00:04:49.260 --> 00:04:52.500
momentum causes the gripper to overshoot the
desired position.

00:04:52.500 --> 00:04:57.100
That would cause the control loop to take
over again, this time backing the gripper up.

00:04:57.100 --> 00:05:01.580
A badly tuned control loop might overshoot
and overshoot and overshoot, and maybe even

00:05:01.580 --> 00:05:02.580
wobble forever.

00:05:02.590 --> 00:05:06.330
To make matters worse, in real world settings,
there are typically external and variable

00:05:06.330 --> 00:05:10.919
forces acting on a robot, like friction, wind
and items of different weight.

00:05:10.920 --> 00:05:14.380
To handle this gracefully, more sophisticated
control logic is needed.

00:05:14.380 --> 00:05:19.760
A widely used control-loop, feedback mechanism is a proportional–integral–derivative cotnroller.

00:05:19.780 --> 00:05:23.260
That’s a bit of a mouthful, so people call
them PID controllers.

00:05:23.260 --> 00:05:26.880
These used to be mechanical devices, but now
it’s all done in software.

00:05:26.880 --> 00:05:29.330
Let’s imagine a robot that delivers coffee.

00:05:29.330 --> 00:05:33.021
Its goal is to travel between customers at
two meters per second, which has been determined

00:05:33.021 --> 00:05:36.629
to be the ideal speed that’s both safe and
expedient.

00:05:36.629 --> 00:05:39.020
Of course, the environment doesn’t always
cooperate.

00:05:39.020 --> 00:05:43.220
Sometimes there’s wind, and sometimes there's
uphills and downhills and all sorts of things

00:05:43.220 --> 00:05:44.620
that affect the speed of the robot.

00:05:44.620 --> 00:05:49.760
So, it’s going to have to increase and decrease power to its motors to maintain the desired speed.

00:05:49.800 --> 00:05:54.720
Using the robot's speed sensor, we can keep
track of its actual speed and plot that alongside

00:05:54.720 --> 00:05:56.180
its desired speed.

00:05:56.180 --> 00:05:59.580
PID controllers calculate three values from
this data.

00:05:59.580 --> 00:06:03.439
First is the proportional value, which is
the difference between the desired value and

00:06:03.439 --> 00:06:07.330
the actual value at the most recent instant
in time or the present.

00:06:07.330 --> 00:06:09.949
This is what our simpler control loop used
before.

00:06:09.949 --> 00:06:14.300
The bigger the gap between actual and desired,
the harder you'll push towards your target.

00:06:14.300 --> 00:06:16.250
In other words, it’s proportional control.

00:06:16.250 --> 00:06:20.919
Next, the integral value is computed, which
is the sum of error over a window of time,

00:06:20.919 --> 00:06:22.680
like the last few seconds.

00:06:22.680 --> 00:06:26.590
This look back helps compensate for steady
state errors, resulting from things like motoring

00:06:26.590 --> 00:06:27.889
up a long hill.

00:06:27.889 --> 00:06:31.970
If this value is large, it means proportional
control is not enough, and we have to push

00:06:31.970 --> 00:06:32.970
harder still.

00:06:32.970 --> 00:06:37.020
Finally, there’s the derivative value, which
is the rate of change between the desired

00:06:37.020 --> 00:06:38.340
and actual values.

00:06:38.340 --> 00:06:43.080
This helps account for possible future error,
and is sometimes called "anticipatory control".

00:06:43.080 --> 00:06:46.840
For example, if you are screaming in towards
your goal too fast, you’ll need to ease

00:06:46.840 --> 00:06:48.880
up a little to prevent overshoot.

00:06:48.880 --> 00:06:52.860
These three values are summed together, with
different relative weights, to produce a controller

00:06:52.860 --> 00:06:54.900
output that’s passed to the system.

00:06:54.900 --> 00:06:59.700
PID controllers are everywhere, from the cruise
control in your car, to drones that automatically

00:06:59.720 --> 00:07:04.210
adjust their rotor speeds to maintain level
flight, as well as more exotic robots, like

00:07:04.210 --> 00:07:06.780
this one that balances on a ball to move around.

00:07:06.780 --> 00:07:11.729
Advanced robots often require many control
loops running in parallel, working together,

00:07:11.729 --> 00:07:14.729
managing everything from robot balance to
limb position.

00:07:14.729 --> 00:07:19.060
As we’ve discussed, control loops are responsible
for getting robot attributes like location

00:07:19.060 --> 00:07:20.290
to desired values.

00:07:20.290 --> 00:07:23.500
So, you may be wondering where these values
come from.

00:07:23.500 --> 00:07:27.910
This is the responsibility of higher-level
robot software, which plans and executes robot

00:07:27.910 --> 00:07:32.560
actions, like plotting a path around sensed
obstacles, or breaking down physical tasks,

00:07:32.560 --> 00:07:35.460
like picking up a ball, into simple, sequential
motions.

00:07:35.460 --> 00:07:39.000
Using these techniques, robots have racked
up some impressive achievements – they’ve

00:07:39.000 --> 00:07:43.740
been to the deepest depths of Earth’s oceans
and roved around on Mars for over a decade.

00:07:43.740 --> 00:07:47.360
But interestingly, lots of problems that are
trivial for many humans have turned out to

00:07:47.360 --> 00:07:52.370
be devilishly difficult for robots: like walking
on two legs, opening a door, picking up objects

00:07:52.370 --> 00:07:55.320
without crushing them, putting on a t-shirt,
or petting a dog.

00:07:55.320 --> 00:07:59.400
These are tasks you may be able to do without
thinking, but a supercomputer-powered robot

00:07:59.400 --> 00:08:01.040
fails at spectacularly.

00:08:01.040 --> 00:08:04.400
These sorts of tasks are all active areas
of robotics research.

00:08:04.400 --> 00:08:08.220
Artificial intelligence techniques, which
we discussed a few episodes ago, are perhaps

00:08:08.220 --> 00:08:10.970
the most promising avenue to overcome these
challenges.

00:08:10.970 --> 00:08:15.409
For example, Google has been running an experiment
with a series of robotic arms that spend their

00:08:15.409 --> 00:08:20.490
days moving miscellaneous objects from one
box to another, learning from trial and error.

00:08:20.490 --> 00:08:24.660
After thousands of hours of practice, the
robots had cut their error rate in half.

00:08:24.660 --> 00:08:29.780
Of course, unlike humans, robots can run twenty-four
hours a day and practice with many arms at

00:08:29.780 --> 00:08:30.780
the same time.

00:08:30.780 --> 00:08:34.599
So, it may just be a matter of time until
they become adept at grasping things.

00:08:34.599 --> 00:08:37.599
But, for the time being, toddlers can out-grasp
them.

00:08:37.599 --> 00:08:42.089
One of the biggest and most visible robotic
breakthrough in recent years has been self-driving,

00:08:42.089 --> 00:08:43.089
autonomous cars.

00:08:43.089 --> 00:08:47.310
If you think about it, cars don’t have too
many system inputs – you can speed up or

00:08:47.310 --> 00:08:49.100
slow down, and you can steer left or right.

00:08:49.100 --> 00:08:54.639
The tough part is sensing lanes, reading signs,
and anticipating and navigating traffic, pedestrians,

00:08:54.639 --> 00:08:56.480
bicyclists, and a whole host of obstacles.

00:08:56.480 --> 00:09:01.200
In addition to being studded with proximity
sensors, these robotic vehicles heavily rely

00:09:01.200 --> 00:09:04.990
on Computer Vision algorithms, which we discussed
in Episode 35.

00:09:04.990 --> 00:09:09.920
We’re also seeing the emergence of very
primitive androids – robots that look and

00:09:09.920 --> 00:09:10.560
act like humans.

00:09:10.560 --> 00:09:14.100
Arguably, we’re not close on either of those
goals, as they tend to look pretty weird and

00:09:14.110 --> 00:09:15.410
act even weirder.

00:09:15.410 --> 00:09:17.230
At least we’ll always have Westworld.

00:09:17.230 --> 00:09:21.250
But anyway, these remain a tantalizing goal
for roboticists that combine many computer

00:09:21.250 --> 00:09:25.959
science topics we’ve touched on over the
last few episodes, like artificial intelligence,

00:09:25.959 --> 00:09:27.940
computer vision and natural language processing.

00:09:27.940 --> 00:09:32.930
As for why humans are so fascinated by creating
artificial embodiments of ourselves...you’ll

00:09:32.930 --> 00:09:35.220
have to go to Crash Course Philosophy for
that.

00:09:35.220 --> 00:09:38.889
And for the foreseeable future, realistic
androids will continue to be the stuff of

00:09:38.889 --> 00:09:39.970
science fiction.

00:09:39.970 --> 00:09:44.760
Militaries also have a great interest in robots
– they’re not only replaceable, but can

00:09:44.760 --> 00:09:48.960
surpass humans in attributes like strength,
endurance, attention, and accuracy.

00:09:48.960 --> 00:09:52.740
Bomb disposal robots and reconnaissance drones
are fairly common today.

00:09:52.740 --> 00:09:58.040
But fully autonomous, armed-to-the-teeth robots
are slowly appearing, like the Samsung SGR-A1

00:09:58.040 --> 00:10:00.260
sentry gun deployed by South Korea.

00:10:00.260 --> 00:10:05.080
Robots with the intelligence and capability
to take human lives are called lethal autonomous weapons.

00:10:05.160 --> 00:10:07.820
And they’re widely considered a complex
and thorny issue.

00:10:07.820 --> 00:10:12.060
Without doubt, these systems could save soldiers
lives by taking them off the battlefield and

00:10:12.080 --> 00:10:13.209
out of harm’s way.

00:10:13.209 --> 00:10:15.459
It might even discourage war all together.

00:10:15.459 --> 00:10:19.209
Though it’s worth noting that people said
the same thing about dynamite and nuclear

00:10:19.209 --> 00:10:20.209
weapons.

00:10:20.209 --> 00:10:23.981
On the flip side, we might be creating ruthlessly
efficient killing machines that don’t apply

00:10:23.981 --> 00:10:27.320
human judgment or compassion to complex situations.

00:10:27.320 --> 00:10:30.100
And the fog of war is about as complex and
murky as they come.

00:10:30.100 --> 00:10:34.780
These robots would be taking orders and executing
them as efficiently as they can and sometimes

00:10:34.790 --> 00:10:37.040
human orders turn out to be really bad.

00:10:37.040 --> 00:10:41.230
This debate is going to continue for a long
time, and pundits on both sides will grow

00:10:41.230 --> 00:10:43.529
louder as robotic technology improves.

00:10:43.529 --> 00:10:48.500
It’s also an old debate – the danger was
obvious to science fiction writer Isaac Asimov,

00:10:48.500 --> 00:10:53.930
who introduced a fictional “Three Laws of
Robotics” in his 1942 short story "Runaround".

00:10:53.930 --> 00:10:56.100
And then, later he added a zeroth rule.

00:10:56.100 --> 00:10:59.899
In short, it’s a code of conduct or moral
compass for robots – guiding them to do

00:10:59.899 --> 00:11:02.000
no harm, especially to humans.

00:11:02.000 --> 00:11:06.510
It’s pretty inadequate for practical application
and it leaves plenty of room for equivocation.

00:11:06.510 --> 00:11:11.440
But still, Asimov’s laws inspired a ton
of science fiction and academic discussion,

00:11:11.440 --> 00:11:14.200
and today there are whole conferences on robot
ethics.

00:11:14.200 --> 00:11:18.440
Importantly, Asimov crafted his fictional
rules as a way to push back on “Robot as

00:11:18.460 --> 00:11:21.970
a Menace” memes common in fiction from his
childhood.

00:11:21.970 --> 00:11:26.040
These were stories where robots went off the
rails, harming or even destroying their creators

00:11:26.040 --> 00:11:27.329
in the process.

00:11:27.329 --> 00:11:32.500
Asimov, on the other hand, envisioned robots
as useful, reliable, and even loveable machines.

00:11:32.500 --> 00:11:35.740
And it’s this duality I want to leave you
thinking about today.

00:11:35.740 --> 00:11:39.290
Like many of the technologies we’ve discussed
throughout this series, there are benevolent

00:11:39.290 --> 00:11:40.680
and malicious uses.

00:11:40.680 --> 00:11:45.060
Our job is to carefully reflect on computing's
potential and peril, and wield our inventive

00:11:45.070 --> 00:11:47.500
talents to improve the state of the world.

00:11:47.500 --> 00:11:51.360
And robots are one of the most potent reminders
of this responsibility.

00:11:51.360 --> 00:11:53.120
I’ll see you next week.

