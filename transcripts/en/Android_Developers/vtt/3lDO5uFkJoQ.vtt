WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:01.880
YACINE REZGUI:
Android Studio 3.4

00:00:01.880 --> 00:00:04.880
is now available for download
on the stable channel,

00:00:04.880 --> 00:00:08.390
along with version 3.4 of the
Android plugin for Gradle.

00:00:08.390 --> 00:00:11.720
This version of Android Studio
fixes a number of issues

00:00:11.720 --> 00:00:14.900
and add few new features,
a resource manager,

00:00:14.900 --> 00:00:17.500
new capabilities to the
project structure dialogue,

00:00:17.500 --> 00:00:21.380
and enables R8, our new
[INAUDIBLE] by default.

00:00:21.380 --> 00:00:23.990
This release is an
incremental quality release

00:00:23.990 --> 00:00:25.700
as part of Project Marble.

00:00:25.700 --> 00:00:27.860
And it's specifically
light on new features

00:00:27.860 --> 00:00:31.190
in order to fix primarily
on bug fixes and quality.

00:00:31.190 --> 00:00:33.620
Stay tuned for even
more on Project Marble

00:00:33.620 --> 00:00:36.380
updates in the 3.5 release.

00:00:36.380 --> 00:00:38.000
The resource manager
is a new tool

00:00:38.000 --> 00:00:40.700
that helps you manage your
application in drawable colors

00:00:40.700 --> 00:00:41.930
and layouts.

00:00:41.930 --> 00:00:44.750
You can bulk import resource
files in your project,

00:00:44.750 --> 00:00:47.540
convert SVGs into
vector drawables,

00:00:47.540 --> 00:00:50.630
visualize your resource
without having to open them,

00:00:50.630 --> 00:00:53.720
and even drag and drop drawables
from the resource manager

00:00:53.720 --> 00:00:55.880
onto the Layout Editor.

00:00:55.880 --> 00:00:58.970
Coinciding with the navigation
library stable release,

00:00:58.970 --> 00:01:00.860
the navigation editor
in Android Studio

00:01:00.860 --> 00:01:03.110
now supports all
type of arguments,

00:01:03.110 --> 00:01:05.870
which mean no need to
manually edit your navigation

00:01:05.870 --> 00:01:09.040
file for previously
unsupported types.

00:01:09.040 --> 00:01:11.470
The project structure
dialog has been redesigned

00:01:11.470 --> 00:01:13.450
and includes many
new improvements

00:01:13.450 --> 00:01:16.540
to help reconfigure project
properties without manually

00:01:16.540 --> 00:01:20.290
editing your vl-gradle files,
and includes rich UI support

00:01:20.290 --> 00:01:23.200
for working with
module variables.

00:01:23.200 --> 00:01:25.930
You can explore the dependency
graph of your project

00:01:25.930 --> 00:01:28.270
within your resolve
dependencies view,

00:01:28.270 --> 00:01:31.720
and use the suggestion page
to manage dependency conflicts

00:01:31.720 --> 00:01:33.490
and updates.

00:01:33.490 --> 00:01:36.850
If you start Jetpack and
Firebase classes in your code,

00:01:36.850 --> 00:01:38.770
we added the new
intention action

00:01:38.770 --> 00:01:41.500
that suggests adding the
required Gradle library

00:01:41.500 --> 00:01:45.100
dependency to your project, if
you haven't already done so.

00:01:45.100 --> 00:01:47.170
On the build side,
we have now made

00:01:47.170 --> 00:01:49.690
R8 the default code
optimizer for Android

00:01:49.690 --> 00:01:52.180
builds replacing ProGuard.

00:01:52.180 --> 00:01:54.310
Previously, separated
tools were used

00:01:54.310 --> 00:01:57.520
to handle different stages
of compilation, desugaring

00:01:57.520 --> 00:01:59.990
of Java class
files, dexing, code

00:01:59.990 --> 00:02:03.130
shrinking, and optimizations
making the build process

00:02:03.130 --> 00:02:04.420
longer.

00:02:04.420 --> 00:02:08.139
Android Studio 3.1 introduced
D8, a new code dexer

00:02:08.139 --> 00:02:10.820
that takes on desugaring
and transforming class

00:02:10.820 --> 00:02:12.780
files into Dalvik Bytecode.

00:02:12.780 --> 00:02:16.030
With Android Gradle
plugin 3.4 and higher,

00:02:16.030 --> 00:02:18.790
we are replacing of the
last part, code shrinking

00:02:18.790 --> 00:02:21.580
and optimization with
R8, a single tool that

00:02:21.580 --> 00:02:24.370
combines the functionality
D8 and ProGuard,

00:02:24.370 --> 00:02:27.940
resulting in noticeable build
performance improvements.

00:02:27.940 --> 00:02:31.030
Keep in mind, R8 is designed
to work with your existing

00:02:31.030 --> 00:02:32.210
ProGuard rules.

00:02:32.210 --> 00:02:36.370
So you should not need to make
any changes to start using R8.

00:02:36.370 --> 00:02:39.400
We tested against the
center tracker project,

00:02:39.400 --> 00:02:43.030
and the shrinking plus
dexing time was nearly 50%

00:02:43.030 --> 00:02:45.310
faster than using ProGuard.

00:02:45.310 --> 00:02:48.780
R8 supports Android
library project as well.

00:02:48.780 --> 00:02:52.770
If you experience issues
using R8 when building AARs,

00:02:52.770 --> 00:02:55.350
please report a
bug on our tracker.

00:02:55.350 --> 00:02:59.220
You can also disable R8 for
only Android library projects

00:02:59.220 --> 00:03:02.000
with this code in
your Gradle file.

00:03:02.000 --> 00:03:04.880
By default, R8 works as
a drop-in replacement

00:03:04.880 --> 00:03:08.090
for ProGuard by running
in a compatibility mode.

00:03:08.090 --> 00:03:09.980
There is also a
full mode available

00:03:09.980 --> 00:03:13.070
which enables more optimization,
but the compatibility

00:03:13.070 --> 00:03:15.560
with ProGuard is
no longer assured.

00:03:15.560 --> 00:03:18.350
You can enable the full mode by
adding this line to your Gradle

00:03:18.350 --> 00:03:19.770
property file.

00:03:19.770 --> 00:03:22.310
If you're still using the
com.Android feature plug-in

00:03:22.310 --> 00:03:25.610
to build your instant app,
Android Gradle plug-in 3.4

00:03:25.610 --> 00:03:27.770
will show you a
deprecation warning.

00:03:27.770 --> 00:03:30.020
To make sure you can still
build your instant app

00:03:30.020 --> 00:03:32.030
on future versions
of the plugin,

00:03:32.030 --> 00:03:35.300
migrate your Instant App to
the dynamic feature plugin.

00:03:35.300 --> 00:03:38.930
Doing so allows you to build
and publish a single instant

00:03:38.930 --> 00:03:40.850
enabled Android
App Bundle for both

00:03:40.850 --> 00:03:44.360
the instant and installed
versions of your app.

00:03:44.360 --> 00:03:48.680
When building native libraries,
ndkCompile is now deprecated.

00:03:48.680 --> 00:03:52.040
And it will produce a build
error if you try to use it.

00:03:52.040 --> 00:03:55.880
You should instead use either
CMake or ndk-build to add C

00:03:55.880 --> 00:03:58.340
and C++ code to your project.

00:03:58.340 --> 00:04:00.530
Enjoy Android Studio
3.4, and remember

00:04:00.530 --> 00:04:03.380
that we are listening to your
feedback on our bug tracker.

00:04:03.380 --> 00:04:06.320
You can test early builds
of Android Studio 3.5

00:04:06.320 --> 00:04:07.618
on the [INAUDIBLE] channel.

00:04:07.618 --> 00:04:08.160
See you soon.

00:04:08.160 --> 00:04:11.210
[MUSIC PLAYING]

