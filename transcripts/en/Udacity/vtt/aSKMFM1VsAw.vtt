WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
[Andy:] On the forums, we saw a lot of confusion about homeworks 2.5 and 2.6.

00:00:06.000 --> 00:00:10.000
Specifically, questions about what was going on with the linear algebra.

00:00:10.000 --> 00:00:15.000
I want to talk about some of that today, and I want to do it by comparing the 2D case --

00:00:15.000 --> 00:00:18.000
and that's the case we talked about in lecture--

00:00:18.000 --> 00:00:22.000
with the 4D case, which is what you're asked about on the homework.

00:00:22.000 --> 00:00:26.000
So in the 2-dimensional case, I want to first talk about this f matrix

00:00:26.000 --> 00:00:30.000
that Sebastian was calling the "state transition matrix."

00:00:30.000 --> 00:00:34.000
The idea behind this matrix was that we wanted to take some old beliefs,

00:00:34.000 --> 00:00:39.000
some old state, which in the 2-dimensional case was represented by x and ẋ

00:00:39.000 --> 00:00:42.000
where ẋ is our velocity and x is our position,

00:00:42.000 --> 00:00:46.000
and from that we want to extract our predict some new state,

00:00:46.000 --> 00:00:50.000
which was called x-prime and ẋ-prime.

00:00:50.000 --> 00:00:57.000
The question was what do we fill in here to get the proper values for x-prime and ẋ-prime.

00:00:57.000 --> 00:00:59.000
Let's think.

00:00:59.000 --> 00:01:04.000
What should our position be--our predicted position after some time has elapsed?

00:01:04.000 --> 00:01:07.000
Well, we want to include our old position, right?

00:01:07.000 --> 00:01:10.000
let's first write out these formulas.

00:01:10.000 --> 00:01:15.000
We expect that x-prime will be composed of our old position

00:01:15.000 --> 00:01:19.000
plus whatever motion was occurring due to the velocity.

00:01:19.000 --> 00:01:24.000
That is going to be dt--the time elapsed--times our velocity.

00:01:24.000 --> 00:01:28.000
This is just velocity times time, which tells us how much our position has changed.

00:01:28.000 --> 00:01:31.000
Now, in matrix terms how do we express that?

00:01:31.000 --> 00:01:36.000
We're talking about x-prime, so that means we're going to think about this top row here.

00:01:36.000 --> 00:01:39.000
We want to keep x, which means a 1 goes here.

00:01:39.000 --> 00:01:44.000
We want to multiply ẋ by dt, so that means dt goes here.

00:01:44.000 --> 00:01:47.000
Just like that we figured out the first row of our F matrix.

00:01:47.000 --> 00:01:50.000
I'll label it here--F. Now what about the second row?

00:01:50.000 --> 00:01:55.000
Let's do a similar thing for ẋ prime to figure out where we should go in the second row.

00:01:55.000 --> 00:01:58.000
After our prediction, we said that we're just

00:01:58.000 --> 00:02:01.000
going to assume that the velocity hasn't changed.

00:02:01.000 --> 00:02:04.000
Velocity after equals velocity before.

00:02:04.000 --> 00:02:07.000
That means we don't want to have anything to do with this x, meaning a 0 goes here.

00:02:07.000 --> 00:02:12.000
We want everything to do with this ẋ--we want to keep this--so we put a 1 here.

00:02:12.000 --> 00:02:18.000
Okay. This kind of gives us some intuition for how this works in 2 dimensions.

00:02:18.000 --> 00:02:21.000
Let's see if we can generalize to 4.

00:02:21.000 --> 00:02:26.000
Now, again, we're going to some new state,

00:02:26.000 --> 00:02:33.000
and we're doing that by multiplying a state-transition matrix by some old belief.

00:02:33.000 --> 00:02:36.000
But now instead of x and ẋ, we also have y coordinates.

00:02:36.000 --> 00:02:40.000
So we have x, y, ẋ, and ẏ.

00:02:40.000 --> 00:02:47.000
Here we're going to, of course, get x, y, ẋ, ẏ, and all of those are prime,

00:02:47.000 --> 00:02:49.000
because they indicate after our prediction.

00:02:49.000 --> 00:02:52.000
Now, I'm not going to fill in this 4 x 4 matrix for you,

00:02:52.000 --> 00:02:56.000
but I think using similar reasoning to what we did in the 2-dimensional case,

00:02:56.000 --> 00:02:59.000
you can come up with what these formulas should be,

00:02:59.000 --> 00:03:02.000
and from that fill in this matrix appropriately,

00:03:02.000 --> 00:03:05.000
remembering that this entry corresponds to the first row,

00:03:05.000 --> 99:59:59.999
this entry the second, and so on. Good luck.

