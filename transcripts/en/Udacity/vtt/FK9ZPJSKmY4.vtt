WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.600
In the last unit, we have talked about how if we encounter a problem

00:00:03.600 --> 00:00:07.850
that is NP-complete, we can often, using very advanced algorithms,

00:00:07.850 --> 00:00:11.610
still hope to find a solution for those problems, at least in practice.

00:00:11.610 --> 00:00:16.180
Because you learned about techniques such as intelligent search trees and preprocessing.

00:00:16.180 --> 00:00:19.060
Now, in this unit we're going to investigate something different.

00:00:19.060 --> 00:00:24.420
So consider a challenging problem such as measuring the length of an elephant.

00:00:24.420 --> 00:00:29.280
Now, doing that exactly is actually not that easy because the elephant might be moving

00:00:29.280 --> 00:00:31.570
and it might not like the ruler down here.

00:00:31.570 --> 00:00:37.500
So finding an exact solution such as the elephant has a length of 5.107 meters

00:00:37.500 --> 00:00:40.290
might actually be quite a difficult thing to do.

00:00:40.290 --> 00:00:43.630
On the other hand, if you allow for a bit of sloppiness, and say,

00:00:43.630 --> 00:00:46.490
"Well, let's just estimate it at about 5 meters,"

00:00:46.490 --> 00:00:48.490
then you can get a solution much faster.

00:00:48.490 --> 00:00:50.990
What we're going to look at in this unit is if sloppiness,

00:00:50.990 --> 00:00:54.090
or at least allowing for a bit of leeway, can actually help us solve

00:00:54.090 --> 00:00:56.730
NP-complete problems more efficiently.

00:00:56.730 --> 00:01:01.030
And what I mean by sloppiness is the following: Let's say we wanted to solve shortest tour.

00:01:01.030 --> 00:01:05.360
What we always asked was, very demandingly, what is the shortest tour?

00:01:05.360 --> 00:01:08.960
No excuses, no leeway, no sloppiness. What is the shortest tour?

00:01:08.960 --> 00:01:12.840
And what would happen now if we didn't ask what is the shortest tour,

00:01:12.840 --> 00:01:17.280
but rather asked the following: What is a pretty short tour?

00:01:17.280 --> 00:01:20.810
So for example, 20% within the optimum.

00:01:20.810 --> 00:01:24.590
Then we become less demanding on what the algorithm is supposed to produce.

00:01:24.590 --> 00:01:29.990
And now, of course, the question is, will this allow us to construct faster algorithms?

00:01:29.990 --> 00:01:34.510
Now, before we dive into this, I would like you to quickly think about this approach for a bit.

00:01:34.510 --> 00:01:38.850
In which scenarios might a sloppy, or not-exact solution be acceptable?

00:01:38.850 --> 00:01:41.590
So what I would like you to think about for a little bit is,

00:01:41.590 --> 00:01:46.370
in what scenarios approximation to the best possible solutions would be acceptable?

00:01:46.370 --> 00:01:49.880
So approximations is the more formal term for sloppiness,

00:01:49.880 --> 00:01:52.320
and, of course, just to be precise, in this unit we're

00:01:52.320 --> 00:01:55.010
going to be dealing with optimization problems.

00:01:55.010 --> 00:01:57.910
You can also talk about approximations to decision problems,

00:01:57.910 --> 00:02:00.440
but that's a bit of a different scenario, and, actually,

00:02:00.440 --> 00:02:03.140
we'll get into that when we talk about randomization.

00:02:03.140 --> 00:02:05.230
But this is not part of this unit here.

00:02:05.230 --> 00:02:08.639
So would we be content with approximations if the stakes are low,

00:02:08.639 --> 00:02:13.030
so we're solving an approximation problem where nothing is really critical?

00:02:13.030 --> 00:02:15.170
I mean, you might spend a little bit more money,

00:02:15.170 --> 00:02:17.910
but it's not going to mess up research or anything like that.

00:02:17.910 --> 00:02:20.880
Would it be acceptable if the algorithm kind of sounds good?

00:02:20.880 --> 00:02:24.100
We do not have a provable guarantee, but it still appears

00:02:24.100 --> 00:02:26.290
to yield good solutions and make sense in general.

00:02:26.290 --> 00:02:29.220
And would using an approximation be acceptable

00:02:29.220 --> 00:02:32.460
if we find that exact solutions are simply out of the question?

00:02:32.460 --> 00:02:34.920
We're using the best search tree; we're using preprocessing,

00:02:34.920 --> 00:02:38.640
but still our instances are so large, and they behave so badly

00:02:38.640 --> 99:59:59.000
that we just cannot find an exact solution.

