WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:03.880
So now, a key thing here is

00:00:05.020 --> 00:00:10.038
that we have to also make sure
of another important property.

00:00:10.038 --> 00:00:14.250
And I don't recall you saying exactly
that the contents of the output has

00:00:14.250 --> 00:00:17.540
to be the same as
the contents of the input.

00:00:17.540 --> 00:00:21.353
So, if we had input which was three,
two, one, and

00:00:21.353 --> 00:00:26.700
we had output which was four,
five, six, that is in order, okay?

00:00:26.700 --> 00:00:28.080
And it is integers.

00:00:29.160 --> 00:00:32.850
But I don't think it's what we would
mean by saying that the output

00:00:32.850 --> 00:00:34.345
was a sorted version of input.

00:00:34.345 --> 00:00:36.444
&gt;&gt; Okay.
&gt;&gt; So you want to try again here?

00:00:36.444 --> 00:00:41.190
&gt;&gt; Yeah, let me make sure I have what
you just said, correct in my head.

00:00:41.190 --> 00:00:44.831
So, given a input vector of three,
two, one.

00:00:44.831 --> 00:00:45.514
&gt;&gt; Right.

00:00:45.514 --> 00:00:49.040
&gt;&gt; We're going to map that to four,
five, six.

00:00:49.040 --> 00:00:52.710
&gt;&gt; So,
is that a legitimate output of the sort,

00:00:52.710 --> 00:00:56.480
what we're trying to do
in the sort routine?

00:00:56.480 --> 00:00:57.420
&gt;&gt; No, it's not.

00:00:57.420 --> 00:01:02.840
So we need to say something along
the lines of that for every

00:01:02.840 --> 00:01:08.400
element in the output vector y, that
element exists in the input vector x.

00:01:08.400 --> 00:01:09.370
&gt;&gt; So it better be the case.

00:01:09.370 --> 00:01:11.600
We're not allowed to
have that 456 there.

00:01:11.600 --> 00:01:13.340
So once again if we started with three,
two,

00:01:13.340 --> 00:01:16.399
one, how about an output that is one,
one, one, two, three?

00:01:18.530 --> 00:01:23.100
Okay, so we have three two one, and

00:01:23.100 --> 00:01:26.620
that's going to map to one one,
did you say two three?

00:01:26.620 --> 00:01:28.750
Something like that.

00:01:28.750 --> 00:01:29.550
&gt;&gt; Yeah sure.
&gt;&gt; Okay.

00:01:29.550 --> 00:01:33.150
All right so, we also need to say
something then about, I guess,

00:01:33.150 --> 00:01:38.610
the cardinality, or the, how many
times the elements appear in the input

00:01:38.610 --> 00:01:42.390
vector x, they need to appear that same
number of times in the output vector y.

00:01:43.390 --> 00:01:49.060
&gt;&gt; Okay, so for
everything in the input it's got to, for

00:01:49.060 --> 00:01:51.250
every individual item in the input,

00:01:51.250 --> 00:01:55.170
it has to show up as a separate
individual item than in the output.

00:01:55.170 --> 00:01:57.560
Well how about if we then take three,
two,

00:01:57.560 --> 00:02:01.934
one, and map it to one,
two, three, four?

00:02:01.934 --> 00:02:04.840
So it satisfies your specification.

00:02:04.840 --> 00:02:06.050
&gt;&gt; Right, so

00:02:06.050 --> 00:02:11.770
we can't have any new elements appear
either in the output vector y.

00:02:11.770 --> 00:02:14.260
It sounds like we're getting
a little verbose with our

00:02:14.260 --> 00:02:15.790
original definition here.

00:02:15.790 --> 00:02:19.180
&gt;&gt; So you're not comfortable that we've
captured what seems to be a simple

00:02:19.180 --> 00:02:21.290
concept of sorting, okay,

00:02:21.290 --> 00:02:27.230
in a similarly simple expression
of what the specification is.

00:02:27.230 --> 00:02:30.960
Okay, and If you think about it for
a minute, sorting is pretty simple.

00:02:30.960 --> 00:02:33.460
If you imagine trying to
specify the software on

00:02:33.460 --> 00:02:37.550
the International Space Station or
something you'd better get right or

00:02:37.550 --> 00:02:40.480
if doesn't work there are safety issues,
it

00:02:40.480 --> 00:02:44.450
makes sense to spend some time in trying
to state precisely what's going on here.

