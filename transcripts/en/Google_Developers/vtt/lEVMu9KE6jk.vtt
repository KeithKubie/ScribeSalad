WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:01:03.744
[MUSIC PLAYING]

00:01:12.898 --> 00:01:15.510
ARUN NAGARAJAN: Hello and
welcome to an exciting episode

00:01:15.510 --> 00:01:16.900
of Google Developers Live.

00:01:16.900 --> 00:01:18.520
My name is Arun Nagarajan.

00:01:18.520 --> 00:01:20.270
DAN LAZIN: And my name, too.

00:01:20.270 --> 00:01:23.620
No, actually, I'm Dan Lazin
I'm a tech writer here.

00:01:23.620 --> 00:01:26.130
And my job is to make Arun's
life difficult.

00:01:26.130 --> 00:01:26.510
ARUN NAGARAJAN: Yeah.

00:01:26.510 --> 00:01:29.060
And in fact, he's going to be
very involved with some of the

00:01:29.060 --> 00:01:30.950
stuff we're talking
about today.

00:01:30.950 --> 00:01:34.840
Today it's a crash course, which
is all about diving deep

00:01:34.840 --> 00:01:37.240
into a topic, an
exciting topic.

00:01:37.240 --> 00:01:39.130
And today's topic, it
may be a little

00:01:39.130 --> 00:01:40.120
cryptic for some of you.

00:01:40.120 --> 00:01:43.100
And I did notice a lot of you
+1ed it and really were

00:01:43.100 --> 00:01:45.880
excited about it, and some of
you probably was not clear.

00:01:45.880 --> 00:01:49.080
It's called Apps Script
Import/Export.

00:01:49.080 --> 00:01:52.050
We're going to be talking about
ways to get at your

00:01:52.050 --> 00:01:54.110
source code from outside
of Apps Script

00:01:54.110 --> 00:01:55.080
using the Drive API.

00:01:55.080 --> 00:01:56.020
The Drive SDK.

00:01:56.020 --> 00:01:56.210
DAN LAZIN: Yeah.

00:01:56.210 --> 00:01:57.070
I think a lot of people
are going to

00:01:57.070 --> 00:01:58.100
find this really useful.

00:01:58.100 --> 00:02:00.720
When we were at Google I/O just
a few weeks ago, had a

00:02:00.720 --> 00:02:02.400
lot of developers come up and
say they really loved the

00:02:02.400 --> 00:02:04.710
power of Apps Script, but
they're more comfortable

00:02:04.710 --> 00:02:07.965
working in a code environment
that's familiar to them, with

00:02:07.965 --> 00:02:09.320
their own favorite
editor, their own

00:02:09.320 --> 00:02:10.750
version control system.

00:02:10.750 --> 00:02:13.370
This allows you to get access
to your Apps Script code and

00:02:13.370 --> 00:02:15.340
keep it in your own
environment.

00:02:15.340 --> 00:02:17.700
So it's a big new feature.

00:02:17.700 --> 00:02:19.450
ARUN NAGARAJAN: I could totally
see why developers

00:02:19.450 --> 00:02:21.970
want to run stuff in the cloud,
but they still want to

00:02:21.970 --> 00:02:25.550
write the code on the laptops,
on their desktops, or

00:02:25.550 --> 00:02:28.070
whichever workstation
that they have.

00:02:28.070 --> 00:02:29.360
So really excited.

00:02:29.360 --> 00:02:30.220
So let's get started.

00:02:30.220 --> 00:02:32.020
Let's start taking a look
at what we've done.

00:02:32.020 --> 00:02:34.990
So let's go here
to My Computer.

00:02:34.990 --> 00:02:37.670
And the first thing that we're
going to talk about is where

00:02:37.670 --> 00:02:40.510
you can find more information
about this API.

00:02:40.510 --> 00:02:45.100
Let's go here to my screen,
and we'll say go to the

00:02:45.100 --> 00:02:46.950
development environment.

00:02:46.950 --> 00:02:50.280
So on the left-side panel,
you'll now see Development

00:02:50.280 --> 00:02:53.250
Environment Guide section, which
was available before.

00:02:53.250 --> 00:02:55.800
But what we've done is we've
added a new section.

00:02:55.800 --> 00:02:57.360
And you wouldn't have
seen this unless you

00:02:57.360 --> 00:02:59.340
refreshed just now.

00:02:59.340 --> 00:03:03.600
It's importing and exporting
projects, and it's a great new

00:03:03.600 --> 00:03:06.720
guide that we've added that'll
talk all about the stuff we'll

00:03:06.720 --> 00:03:07.710
show you today.

00:03:07.710 --> 00:03:11.090
And the idea is that with the
Drive SDK, which has been

00:03:11.090 --> 00:03:15.470
around for quite a while now,
you will have APIs, the Files

00:03:15.470 --> 00:03:18.170
API specifically, that will
allow you to get at your

00:03:18.170 --> 00:03:18.850
source code.

00:03:18.850 --> 00:03:22.090
So you can import it, you can
export it, you can do

00:03:22.090 --> 00:03:24.750
interesting analysis with it,
integrate it with your source

00:03:24.750 --> 00:03:27.540
control system using the tools
you write, or edit it in other

00:03:27.540 --> 00:03:28.580
IDEs as well.

00:03:28.580 --> 00:03:30.400
DAN LAZIN: And the reason we're
using the Drive SDK here

00:03:30.400 --> 00:03:32.760
is that, as you're of course
all familiar with, your app

00:03:32.760 --> 00:03:34.200
script code lives
in Google Drive.

00:03:34.200 --> 00:03:37.340
It's a first-class file in
Google Drive just like a

00:03:37.340 --> 00:03:41.930
Google Doc, a Google sheet, a
Google presentation, any of

00:03:41.930 --> 00:03:43.870
those kinds of guys.

00:03:43.870 --> 00:03:44.170
ARUN NAGARAJAN: Yeah.

00:03:44.170 --> 00:03:47.200
And we specifically call this
out not to be confused with

00:03:47.200 --> 00:03:49.190
the Drive service that's
in Apps Script.

00:03:49.190 --> 00:03:52.460
I know the terminology may
get a little confusing.

00:03:52.460 --> 00:03:55.070
But I think if you pay attention
to some of things

00:03:55.070 --> 00:03:58.120
we're doing here, a lot of this
will become pretty clear.

00:03:58.120 --> 00:03:59.670
DAN LAZIN: And really,
everything we're showing you

00:03:59.670 --> 00:04:01.370
today is about Apps Script.

00:04:01.370 --> 00:04:02.810
It's not in Apps Script.

00:04:02.810 --> 00:04:04.510
All the calls that Arun's going
to be show you, these

00:04:04.510 --> 00:04:09.110
are through the Drive SDK,
mostly through HTTP requests.

00:04:09.110 --> 00:04:11.040
So don't think this is
code that you can

00:04:11.040 --> 00:04:12.640
write in Apps Script.

00:04:12.640 --> 00:04:14.540
Think of it as a way to
work with Apps Script

00:04:14.540 --> 00:04:15.450
through the Drive SDK.

00:04:15.450 --> 00:04:16.430
ARUN NAGARAJAN: Yeah.

00:04:16.430 --> 00:04:16.910
All right.

00:04:16.910 --> 00:04:20.360
So let's talk about all the
different parts of this

00:04:20.360 --> 00:04:21.540
document right here.

00:04:21.540 --> 00:04:24.290
So the first part is just
letting you know that we're

00:04:24.290 --> 00:04:25.480
using the Drive SDK.

00:04:25.480 --> 00:04:27.730
So if you aren't familiar
with it, it's actually

00:04:27.730 --> 00:04:29.050
a really nice API.

00:04:29.050 --> 00:04:32.160
You may find yourself using it
for getting at other files--

00:04:32.160 --> 00:04:34.180
PDFs, Google Docs, et cetera.

00:04:34.180 --> 00:04:36.310
I think it's a pretty
cool API.

00:04:36.310 --> 00:04:38.510
In this case specifically,
we're going to be very

00:04:38.510 --> 00:04:40.290
interested in the Files API.

00:04:40.290 --> 00:04:43.840
And it's a REST-based API,
as Dan alluded to.

00:04:43.840 --> 00:04:46.270
The first thing, though,
is that it does require

00:04:46.270 --> 00:04:47.130
authorization.

00:04:47.130 --> 00:04:50.850
So like a lot of Google APIs,
this uses OAuth 2.

00:04:50.850 --> 00:04:53.320
And the Google Drive
documentation's got really

00:04:53.320 --> 00:04:56.690
good samples to walk you
through how this works.

00:04:56.690 --> 00:04:59.170
On top of that, the reason I
think this is really fun to

00:04:59.170 --> 00:05:01.860
work with is they've given you
a lot of the tools, like

00:05:01.860 --> 00:05:04.970
Inline API Explorer, that allows
you to get started

00:05:04.970 --> 00:05:08.420
without having to know all
the details of OAuth.

00:05:08.420 --> 00:05:11.110
And I think we'll get that
point across very soon.

00:05:11.110 --> 00:05:12.770
DAN LAZIN: Like Apps Script,
you can try it out right in

00:05:12.770 --> 00:05:14.725
your browser, make sure it's all
working before you go and

00:05:14.725 --> 00:05:16.560
build your application.

00:05:16.560 --> 00:05:18.300
ARUN NAGARAJAN: That's
really true.

00:05:18.300 --> 00:05:20.280
Just like Apps Script, where you
can go to a Script Editor

00:05:20.280 --> 00:05:22.590
and just start testing stuff
out, I think the API Explorer

00:05:22.590 --> 00:05:24.590
gives you that flexibility.

00:05:24.590 --> 00:05:29.000
Now, those of you that are
familiar with the OAuth, the

00:05:29.000 --> 00:05:32.340
key point here is that there's
a new scope that we've added.

00:05:32.340 --> 00:05:34.960
It's Drive.Scripts.

00:05:34.960 --> 00:05:37.520
And in fact, this has
been out there for I

00:05:37.520 --> 00:05:38.910
think a few weeks now.

00:05:38.910 --> 00:05:40.610
And some people have
already noticed it.

00:05:40.610 --> 00:05:43.780
And I've seen them refer to
this in Stack Overflow and

00:05:43.780 --> 00:05:45.150
other forums.

00:05:45.150 --> 00:05:46.970
And now you know what
it's there for.

00:05:46.970 --> 00:05:50.110
This is to allow you to get
access to your actual source

00:05:50.110 --> 00:05:53.250
in Apps Script, rather than
just the project file.

00:05:53.250 --> 00:05:54.650
So this scope is really
important.

00:05:54.650 --> 00:05:57.430
Without this scope, all you can
see is the existence of a

00:05:57.430 --> 00:05:59.510
project, but you cannot
actually look at

00:05:59.510 --> 00:06:00.830
the code in a project.

00:06:00.830 --> 00:06:04.780
Because we think this new scope
will protect the user

00:06:04.780 --> 00:06:07.270
further, because the
source may contain

00:06:07.270 --> 00:06:09.860
sensitive data and so on.

00:06:09.860 --> 00:06:12.510
So we want to make sure that
the user knows that an

00:06:12.510 --> 00:06:14.540
application's doing this.

00:06:14.540 --> 00:06:15.740
So let's get started.

00:06:15.740 --> 00:06:18.880
The very first thing you may
want to do with your list of

00:06:18.880 --> 00:06:20.170
projects that you may have--

00:06:20.170 --> 00:06:21.570
and if you're like
us, you probably

00:06:21.570 --> 00:06:23.070
have dozens of projects.

00:06:23.070 --> 00:06:23.810
DAN LAZIN: Hundreds.

00:06:23.810 --> 00:06:25.560
ARUN NAGARAJAN: Hundreds of
projects in some cases.

00:06:25.560 --> 00:06:27.330
I try to keep it a little bit
more neat than Dan, I guess.

00:06:27.330 --> 00:06:27.757
DAN LAZIN: [LAUGHS]

00:06:27.757 --> 00:06:30.580
A cluttered desk is good.

00:06:30.580 --> 00:06:32.510
ARUN NAGARAJAN: I guess, yeah.

00:06:32.510 --> 00:06:35.630
So the very first thing you'll
probably want to do is have an

00:06:35.630 --> 00:06:40.020
API call available that lists
all your Apps Script projects.

00:06:40.020 --> 00:06:42.320
So let's get started
with that.

00:06:42.320 --> 00:06:46.460
From a technical standpoint,
what it is is an HTTP Get Call

00:06:46.460 --> 00:06:48.390
with a authorization header
that includes

00:06:48.390 --> 00:06:49.620
your OAuth 2 token.

00:06:49.620 --> 00:06:52.900
And that will return back and
really nice JSON response that

00:06:52.900 --> 00:06:55.800
lists items which represent
the projects.

00:06:55.800 --> 00:06:58.830
And that'll give you-- and for
this example, you can see that

00:06:58.830 --> 00:07:03.420
there's a mail merge project
with a MIME type of this

00:07:03.420 --> 00:07:05.770
particular type, which is
vendor.google-apps.script.

00:07:09.050 --> 00:07:12.140
So that's a really specific
MIME type that identifies

00:07:12.140 --> 00:07:13.260
Google Apps Script.

00:07:13.260 --> 00:07:15.900
And then you can see all sorts
of other things that include

00:07:15.900 --> 00:07:19.350
things like the dates that it
was last viewed, a lot of

00:07:19.350 --> 00:07:21.530
really useful metadata.

00:07:21.530 --> 00:07:25.510
DAN LAZIN: To be clear, what the
end user is sending is the

00:07:25.510 --> 00:07:28.540
very first of the code
snippets up there.

00:07:28.540 --> 00:07:32.580
They're just sending that one
line broken across here--

00:07:32.580 --> 00:07:33.300
oh, two lines, actually.

00:07:33.300 --> 00:07:33.800
ARUN NAGARAJAN: Yeah,
the header.

00:07:33.800 --> 00:07:35.640
Yup.

00:07:35.640 --> 00:07:37.040
DAN LAZIN: HTTP Get request.

00:07:37.040 --> 00:07:39.014
This large block of
JSON here is what

00:07:39.014 --> 00:07:40.100
they get back in response.

00:07:40.100 --> 00:07:40.470
ARUN NAGARAJAN: Yup.

00:07:40.470 --> 00:07:41.110
I should be clear.

00:07:41.110 --> 00:07:41.430
Yeah.

00:07:41.430 --> 00:07:42.730
The request and response.

00:07:42.730 --> 00:07:44.350
You can see there's a request.

00:07:44.350 --> 00:07:46.550
Thankfully, because of things
like REST, it's really

00:07:46.550 --> 00:07:46.955
straightforward.

00:07:46.955 --> 00:07:50.530
You just encode your request and
then you get back a really

00:07:50.530 --> 00:07:54.550
nice, detailed JSON response
that your application can do a

00:07:54.550 --> 00:07:55.990
lot of useful things with.

00:07:55.990 --> 00:07:59.990
And you can even see that this
has things like the owners.

00:07:59.990 --> 00:08:01.040
All sorts of good stuff.

00:08:01.040 --> 00:08:06.320
The important thing here is this
Export link, which we'll

00:08:06.320 --> 00:08:07.780
talk about in just a minute.

00:08:07.780 --> 00:08:10.900
So let's first make this simple
request, which just

00:08:10.900 --> 00:08:13.410
lists our Google Apps
Script projects.

00:08:13.410 --> 00:08:16.850
So to do that, what we'll do
is we'll go to the Google

00:08:16.850 --> 00:08:18.900
Drive SDK reference.

00:08:18.900 --> 00:08:22.240
And as I mentioned, this is
a really useful resource.

00:08:22.240 --> 00:08:25.720
If you go to
developers.google.com/Drive,

00:08:25.720 --> 00:08:27.970
you'll find all these things
that we're talking about here.

00:08:27.970 --> 00:08:32.590
In fact, I think people that
want to write things like a

00:08:32.590 --> 00:08:37.110
source control integration
example or exporting and

00:08:37.110 --> 00:08:39.340
having it available in some
interesting syntax

00:08:39.340 --> 00:08:41.210
highlighter.

00:08:41.210 --> 00:08:43.570
There's some quick starts
available in different

00:08:43.570 --> 00:08:45.840
languages that I think you'll
find really valuable here.

00:08:45.840 --> 00:08:48.580
DAN LAZIN: So this Files
page here, how does a

00:08:48.580 --> 00:08:49.460
person get to this page?

00:08:49.460 --> 00:08:49.730
ARUN NAGARAJAN: Yup.

00:08:49.730 --> 00:08:52.870
So if you go to
developers.google.com/Drive,

00:08:52.870 --> 00:08:55.930
on the left-hand panel they've
got a really nice organization

00:08:55.930 --> 00:08:57.360
much like Apps Script.

00:08:57.360 --> 00:09:00.750
If you go to API Reference
and go to Files--

00:09:00.750 --> 00:09:03.420
that's the very first API that
you'll often deal with--

00:09:03.420 --> 00:09:04.780
and go to List.

00:09:04.780 --> 00:09:09.600
So it matches the verbs
that you end up

00:09:09.600 --> 00:09:11.000
dealing with in the API.

00:09:11.000 --> 00:09:15.730
So List returns multiple
files back.

00:09:15.730 --> 00:09:17.550
In our case, the Files
a project.

00:09:17.550 --> 00:09:19.900
So the terminology, just
be careful with that.

00:09:19.900 --> 00:09:21.620
DAN LAZIN: And just to be clear
on that terminology.

00:09:21.620 --> 00:09:26.722
When we talk about a "project,"
we mean a single

00:09:26.722 --> 00:09:31.100
entity that you save as one
unit in Google Drive.

00:09:31.100 --> 00:09:34.080
The files are each of the
tabs within the project.

00:09:34.080 --> 00:09:35.860
So you might have multiple code
files within a single

00:09:35.860 --> 00:09:37.870
project in Apps Script, or you
might have a code file and an

00:09:37.870 --> 00:09:40.100
HTML file if you're
serving a web app.

00:09:40.100 --> 00:09:41.060
ARUN NAGARAJAN: Yeah.

00:09:41.060 --> 00:09:45.210
A file in Drive term is what
shows up in the Drive Explorer

00:09:45.210 --> 00:09:47.990
view, where you go to
drive.google.com, which

00:09:47.990 --> 00:09:50.300
happens to be a project
in our world.

00:09:50.300 --> 00:09:53.660
So the terminology is important
to understand there.

00:09:53.660 --> 00:09:54.520
So let's go back here.

00:09:54.520 --> 00:09:56.680
So let's make a call.

00:09:56.680 --> 00:09:59.370
And they also really nicely
document all the different

00:09:59.370 --> 00:10:02.050
parameters that the
API accepts.

00:10:02.050 --> 00:10:04.760
So the very first thing we'll
do is we'll make a call.

00:10:04.760 --> 00:10:07.320
And you can see that they have
a lot of quick start guides,

00:10:07.320 --> 00:10:09.830
as far as in different
languages as well.

00:10:09.830 --> 00:10:12.180
So we'll go here and
we'll say, we want

00:10:12.180 --> 00:10:14.020
to now get our projects.

00:10:14.020 --> 00:10:16.650
So thankfully, we have really
good samples that you can just

00:10:16.650 --> 00:10:18.330
literally copy and paste.

00:10:18.330 --> 00:10:21.440
So we want to copy
this guy here.

00:10:21.440 --> 00:10:25.880
And we'll say go back to
my-- oh, there it is.

00:10:25.880 --> 00:10:29.640
If I say MIME type
equals to that.

00:10:29.640 --> 00:10:32.310
I do need to put
quotes around.

00:10:32.310 --> 00:10:33.870
And you need to authorize it.

00:10:33.870 --> 00:10:38.520
So this is how, like I said,
you need to write code to

00:10:38.520 --> 00:10:40.430
handle this, or you can just
use their tools, which is

00:10:40.430 --> 00:10:41.160
really nice.

00:10:41.160 --> 00:10:45.450
And you can just check
this box for Google

00:10:45.450 --> 00:10:47.550
Apps Script's behavior.

00:10:47.550 --> 00:10:48.180
All right.

00:10:48.180 --> 00:10:49.430
So I'm going to authorize
this.

00:10:49.430 --> 00:10:50.820
The toggle is on.

00:10:50.820 --> 00:10:53.210
I've already logged in,
so I don't need to

00:10:53.210 --> 00:10:54.540
authorize it again.

00:10:54.540 --> 00:10:58.210
If I hit Execute, what's going
to happen in just a couple

00:10:58.210 --> 00:11:02.940
seconds here is the response
comes back from the API.

00:11:02.940 --> 00:11:05.690
And you can see that it's
basically a Get followed by

00:11:05.690 --> 00:11:08.500
the authorization header, which
is exactly what we show.

00:11:08.500 --> 00:11:12.300
The user agent and all that
is really optional.

00:11:12.300 --> 00:11:15.720
And then here is the list of
all the different projects

00:11:15.720 --> 00:11:16.600
that I care for.

00:11:16.600 --> 00:11:19.590
So you can see that
I have My Web App.

00:11:19.590 --> 00:11:22.400
And then if I keep going down,
I'll see the next project,

00:11:22.400 --> 00:11:25.710
which happens to be a dashboard
app that I built.

00:11:25.710 --> 00:11:26.180
And so on.

00:11:26.180 --> 00:11:28.790
So gets you the idea
that this is now a

00:11:28.790 --> 00:11:31.990
functional sample request.

00:11:31.990 --> 00:11:35.390
On top of that, since the Drive
SDK has a lot of really

00:11:35.390 --> 00:11:40.760
nice features, like you
can say, only show me

00:11:40.760 --> 00:11:41.960
the top five results.

00:11:41.960 --> 00:11:46.220
Or you could say, only show
me where I am the owner.

00:11:46.220 --> 00:11:51.240
So a really nice, simple thing
you could do is say "and 'me'

00:11:51.240 --> 00:11:55.260
in owners." It kind of sounds
weird, but the API is

00:11:55.260 --> 00:11:58.050
actually, I think when you
execute it, the results make a

00:11:58.050 --> 00:11:58.800
lot of sense.

00:11:58.800 --> 00:12:01.980
"And 'me'" is a special
keyword for the person

00:12:01.980 --> 00:12:02.920
authenticated.

00:12:02.920 --> 00:12:06.160
So that way, you can write a
generic filter that works for

00:12:06.160 --> 00:12:09.490
whoever's at the keyboard rather
than have them type in

00:12:09.490 --> 00:12:11.010
their email address or
something like that.

00:12:11.010 --> 00:12:12.730
DAN LAZIN: And the reason you'd
want to add this me and

00:12:12.730 --> 00:12:17.040
owners parameter is that when
you search Google Drive, it's

00:12:17.040 --> 00:12:18.620
just like going to Google
Drive and typing

00:12:18.620 --> 00:12:19.500
in the search box.

00:12:19.500 --> 00:12:21.870
If you have other people who've
shared files with you--

00:12:21.870 --> 00:12:24.280
Arun's sharing sample code
with me all the time--

00:12:24.280 --> 00:12:27.980
I'm going to see Arun's projects
in my Google Drive

00:12:27.980 --> 00:12:29.770
search results.

00:12:29.770 --> 00:12:31.580
Realistically, I don't care
about this guy's code.

00:12:31.580 --> 00:12:32.220
I want to see my stuff.

00:12:32.220 --> 00:12:33.410
ARUN NAGARAJAN: That's right.

00:12:33.410 --> 00:12:36.290
Depending on you tools and use
cases, those filters may make

00:12:36.290 --> 00:12:39.700
a lot of difference in
what comes back.

00:12:39.700 --> 00:12:42.150
So now we have the same
response back.

00:12:42.150 --> 00:12:45.870
You can see that the HTTP
request now has the additional

00:12:45.870 --> 00:12:47.380
parameters in the URL.

00:12:47.380 --> 00:12:49.170
So really straightforward.

00:12:49.170 --> 00:12:52.280
What we've done so far is only
demonstrate to you that Apps

00:12:52.280 --> 00:12:55.830
Script projects are accessible
through the Drive SDK.

00:12:55.830 --> 00:12:56.570
All right.

00:12:56.570 --> 00:12:59.290
DAN LAZIN: Let's go over that
query term just one more time.

00:12:59.290 --> 00:12:59.550
ARUN NAGARAJAN: Sure.

00:12:59.550 --> 00:13:00.370
DAN LAZIN: In case
people missed it.

00:13:00.370 --> 00:13:00.880
ARUN NAGARAJAN: Yeah.

00:13:00.880 --> 00:13:06.860
So Q is there, the query
string, where a lot of

00:13:06.860 --> 00:13:10.170
different useful fields
of features can go in.

00:13:10.170 --> 00:13:12.560
In fact, they have a really nice
documentation page for

00:13:12.560 --> 00:13:14.410
that as well somewhere
up here.

00:13:14.410 --> 00:13:15.310
Searching for Files.

00:13:15.310 --> 00:13:16.490
You should take a
look at that.

00:13:16.490 --> 00:13:17.970
And that'll talk about
all the different

00:13:17.970 --> 00:13:19.260
properties you could use.

00:13:19.260 --> 00:13:22.720
And then in our case, since
we're saying only give us

00:13:22.720 --> 00:13:25.810
Google Apps Script projects,
it's really important to

00:13:25.810 --> 00:13:27.475
specify that through
the MIME type.

00:13:27.475 --> 00:13:33.240
DAN LAZIN: So just Q MIME type
equals application/VND/ and

00:13:33.240 --> 00:13:35.590
then the Google Apps
Script MIME type.

00:13:35.590 --> 00:13:39.020
And then in this optional case,
we added "me" in owners.

00:13:39.020 --> 00:13:39.910
That's all you need to
fill in is the Q

00:13:39.910 --> 00:13:41.890
field here after you've--

00:13:41.890 --> 00:13:43.526
ARUN NAGARAJAN: Zoom in a little
bit more. --and then

00:13:43.526 --> 00:13:44.990
click the OAuth button.

00:13:44.990 --> 00:13:45.520
ARUN NAGARAJAN: Yep.

00:13:45.520 --> 00:13:46.240
Really straightforward.

00:13:46.240 --> 00:13:49.620
So that ought to give you the
confidence that your projects

00:13:49.620 --> 00:13:51.640
now are accessible
through an API.

00:13:51.640 --> 00:13:55.470
And in our example here, we're
just using the API Explorer.

00:13:55.470 --> 00:13:58.670
But thankfully, the Drive SDK
has some really good quick

00:13:58.670 --> 00:14:03.660
start code snippets that you can
use to get used to calling

00:14:03.660 --> 00:14:07.992
it from the command line, or
writing a web app in Java, or

00:14:07.992 --> 00:14:11.920
in PHP to grab the same thing.

00:14:11.920 --> 00:14:14.410
And in our example, in fact, for
the very next thing that

00:14:14.410 --> 00:14:16.600
we're going to show you,
we're going to use a

00:14:16.600 --> 00:14:17.710
simple Python app.

00:14:17.710 --> 00:14:20.610
And I'm not a Python whiz, but
thankfully, because there's a

00:14:20.610 --> 00:14:23.400
lot of really good sample code
for me to get started,

00:14:23.400 --> 00:14:26.100
including some companion videos,
this is actually

00:14:26.100 --> 00:14:27.410
really straightforward to do.

00:14:27.410 --> 00:14:32.070
So what we'll do next is we'll
use a simple Python command

00:14:32.070 --> 00:14:35.580
line app that given
a project ID--

00:14:35.580 --> 00:14:39.490
I should say, a file ID of
the Drive response--

00:14:39.490 --> 00:14:43.350
it'll fetch that project and
mimic that structure in my

00:14:43.350 --> 00:14:44.700
local file system.

00:14:44.700 --> 00:14:45.460
DAN LAZIN: Cool.

00:14:45.460 --> 00:14:46.870
ARUN NAGARAJAN: Wouldn't
that be great.

00:14:46.870 --> 00:14:48.150
Let's go take a look.

00:14:48.150 --> 00:14:51.150
DAN LAZIN: And that's all you're
going to need to then

00:14:51.150 --> 00:14:54.720
hook up that local file to
either your local code

00:14:54.720 --> 00:14:59.150
repository, maybe your GitHub
repo, plug it into the code

00:14:59.150 --> 00:15:01.330
editor of your choice.

00:15:01.330 --> 00:15:02.710
ARUN NAGARAJAN: Do all sorts
of things with it.

00:15:02.710 --> 00:15:04.940
DAN LAZIN: Cool.

00:15:04.940 --> 00:15:07.550
ARUN NAGARAJAN: So let me
just show you the code.

00:15:07.550 --> 00:15:09.330
I used the quick start.

00:15:09.330 --> 00:15:12.550
And we're going to be sharing
this with this you, so we want

00:15:12.550 --> 00:15:15.280
to clean this up and make
sure that its shareable.

00:15:15.280 --> 00:15:17.880
DAN LAZIN: This Python sample
isn't available on the page

00:15:17.880 --> 00:15:19.260
that we're showing
you quite yet.

00:15:19.260 --> 00:15:23.420
We'll have it up there maybe
in a couple days, and we'll

00:15:23.420 --> 00:15:26.380
update this YouTube video's
description with a link to

00:15:26.380 --> 00:15:27.660
this Python app as well.

00:15:27.660 --> 00:15:29.040
ARUN NAGARAJAN: We definitely
want to make this available.

00:15:29.040 --> 00:15:33.270
And this example I started based
on this quick start.

00:15:33.270 --> 00:15:36.360
So you'll see a lot of
similarity in that code.

00:15:36.360 --> 00:15:39.990
And in fact, I would recommend
just watching this video just

00:15:39.990 --> 00:15:43.310
a few minutes to get a sense for
all the steps required to

00:15:43.310 --> 00:15:45.650
get to the point where I'm at--
which I'm going to skip

00:15:45.650 --> 00:15:46.900
in the interest of time.

00:15:46.900 --> 00:15:48.530
But the very first thing
you need do is

00:15:48.530 --> 00:15:50.310
enable the Drive API.

00:15:50.310 --> 00:15:52.970
You need to install a couple
of libraries so that the

00:15:52.970 --> 00:15:55.430
Python app can work
really seamlessly.

00:15:55.430 --> 00:15:59.560
And then there's this process
of getting the OAuth token

00:15:59.560 --> 00:16:00.480
established.

00:16:00.480 --> 00:16:03.040
And that's a one-time process,
because the library actually

00:16:03.040 --> 00:16:06.370
takes care of refreshing it
and keeping it up-to-date.

00:16:06.370 --> 00:16:07.670
So it's actually really nice.

00:16:07.670 --> 00:16:10.370
And the process requires
basically you authorizing a

00:16:10.370 --> 00:16:14.340
URL once, and copying
and pasting a token

00:16:14.340 --> 00:16:15.630
into a command line.

00:16:15.630 --> 00:16:16.940
And it's good to
go from there.

00:16:16.940 --> 00:16:20.830
So you can actually schedule
this app to run every hour,

00:16:20.830 --> 00:16:25.560
you can run it on a keyboard
shortcut, and so on.

00:16:25.560 --> 00:16:28.180
So the run the sample, and
that's what we're going to do.

00:16:28.180 --> 00:16:30.200
So let's go take a
look at the code.

00:16:30.200 --> 00:16:33.350
So we're going to do is I have
a couple of functions.

00:16:33.350 --> 00:16:35.580
One is called Download
Project.

00:16:35.580 --> 00:16:37.760
You can imagine what
that does.

00:16:37.760 --> 00:16:39.960
And one called Update Project,
which we'll get

00:16:39.960 --> 00:16:41.040
to in a little bit.

00:16:41.040 --> 00:16:43.280
Let's start with Download
Project.

00:16:43.280 --> 00:16:47.300
So this is the project that
I want to download.

00:16:47.300 --> 00:16:49.340
How did I get the project ID?

00:16:49.340 --> 00:16:51.540
The safest way to get
the project ID is

00:16:51.540 --> 00:16:52.960
back from the API.

00:16:52.960 --> 00:16:57.210
So this ID will match the
ID that you'll see here.

00:16:57.210 --> 00:16:58.600
So the 1TU.

00:16:58.600 --> 00:17:02.250
If I just copy this guy and
paste this in here, they're

00:17:02.250 --> 00:17:04.170
the same exact thing.

00:17:04.170 --> 00:17:06.260
And before I run, but
let's actually take

00:17:06.260 --> 00:17:08.839
a look at the code.

00:17:08.839 --> 00:17:12.970
So what I have here is basically
a very simple sample

00:17:12.970 --> 00:17:17.109
that is two files and says
"Hello world." But this could

00:17:17.109 --> 00:17:20.940
be half a dozen files, or all
the code can be in one file.

00:17:20.940 --> 00:17:23.250
Really however you want
to organize it.

00:17:23.250 --> 00:17:26.700
So let's go and take a look
at the sample here.

00:17:26.700 --> 00:17:31.980
So what we're going to do is go
into my command prompt, and

00:17:31.980 --> 00:17:33.830
let me just make sure the right
code is initialized.

00:17:33.830 --> 00:17:37.140
So we're going to run Download
Project when I run this code.

00:17:37.140 --> 00:17:41.350
So I'm going to say Python,
and I think it's

00:17:41.350 --> 00:17:42.980
drivefiles.py.

00:17:42.980 --> 00:17:44.980
I'm going to run it.

00:17:44.980 --> 00:17:46.290
And it's not going to do much.

00:17:46.290 --> 00:17:47.950
It's going to very
quickly run.

00:17:47.950 --> 00:17:52.550
But then you can see that behind
the scenes this folder

00:17:52.550 --> 00:17:55.470
was created without me having
to do anything.

00:17:55.470 --> 00:17:57.890
If I go in there, there's
three files.

00:17:57.890 --> 00:18:01.160
The code.js, index.html,
and something called

00:18:01.160 --> 00:18:02.420
manifest.json.

00:18:02.420 --> 00:18:03.890
I'll explain that in a second.

00:18:03.890 --> 00:18:06.300
But these are the two things
that I really care for.

00:18:06.300 --> 00:18:11.620
And let's actually go into
my Sublime editor here.

00:18:11.620 --> 00:18:13.520
And you can see that
I have this code

00:18:13.520 --> 00:18:14.350
available right there.

00:18:14.350 --> 00:18:14.910
DAN LAZIN: That's awesome.

00:18:14.910 --> 00:18:17.410
ARUN NAGARAJAN: Zoom in there
and zoom in there.

00:18:17.410 --> 00:18:18.680
You can see that that's
the code.

00:18:18.680 --> 00:18:20.430
DAN LAZIN: So helpful
to so many people.

00:18:20.430 --> 00:18:23.010
ARUN NAGARAJAN: And just the
fact that I can come in here

00:18:23.010 --> 00:18:25.705
and Sublime does a really good
job of syntax highlighting,

00:18:25.705 --> 00:18:28.460
and they have some really nice
macros that you can run that

00:18:28.460 --> 00:18:32.150
allow you to do auto-completion
to a lot of

00:18:32.150 --> 00:18:35.120
useful JavaScript syntaxes that
I think sometimes are

00:18:35.120 --> 00:18:36.140
hard to type.

00:18:36.140 --> 00:18:38.630
And let's do a quick example
where we actually flip this

00:18:38.630 --> 00:18:41.440
back and send it back, and then
we'll review the code.

00:18:41.440 --> 00:18:46.490
So I'll just say, let's say
that I want a logger.log.

00:18:46.490 --> 00:18:48.230
You can see that it's trying
to help me, but it doesn't

00:18:48.230 --> 00:18:49.900
know the API that well.

00:18:49.900 --> 00:18:54.360
So I'll say "hi dan!"
and save this.

00:18:54.360 --> 00:18:55.275
DAN LAZIN: Semicolon, Arun!

00:18:55.275 --> 00:18:56.524
ARUN NAGARAJAN: Ah,
you don't need it.

00:18:56.524 --> 00:18:58.990
[LAUGHTER]

00:18:58.990 --> 00:19:02.130
ARUN NAGARAJAN: And then I go
back into my Python sample.

00:19:02.130 --> 00:19:04.970
And instead of downloading it,
what I'll do is I'll actually

00:19:04.970 --> 00:19:06.410
upload that.

00:19:06.410 --> 00:19:09.840
And for this, I just need the
folder name as well, because

00:19:09.840 --> 00:19:11.480
that's what's important.

00:19:11.480 --> 00:19:14.690
And I'll go back to my command
prompt, and I'll say run that

00:19:14.690 --> 00:19:15.280
same thing.

00:19:15.280 --> 00:19:17.090
And you can make this much
more configurable.

00:19:17.090 --> 00:19:19.250
And that's one of the reasons
we're not publishing the code

00:19:19.250 --> 00:19:22.610
right away, because it should
be a command line parameter.

00:19:22.610 --> 00:19:25.040
We figure it's more important
to get the documentation out

00:19:25.040 --> 00:19:27.970
to you so that you can start
doing some really cool things.

00:19:27.970 --> 00:19:29.620
And I ran the code again.

00:19:29.620 --> 00:19:31.860
And now let's go [INAUDIBLE]
with the script editor.

00:19:31.860 --> 00:19:34.430
And we do need to reload
the script editor.

00:19:34.430 --> 00:19:37.500
Unfortunately, it doesn't
update live like

00:19:37.500 --> 00:19:38.550
it would for Docs.

00:19:38.550 --> 00:19:39.660
But there it is.

00:19:39.660 --> 00:19:45.290
The code that I edited in my
offline editor, after I ran a

00:19:45.290 --> 00:19:48.890
little tool that was pretty
immediate, I'm able to see

00:19:48.890 --> 00:19:52.270
that code on my script editor
as if another person on

00:19:52.270 --> 00:19:55.470
another browser somewhere
is typing in that code.

00:19:55.470 --> 00:19:57.067
DAN LAZIN: You're your
own collaborator now.

00:19:57.067 --> 00:19:58.470
ARUN NAGARAJAN: [LAUGHS]

00:19:58.470 --> 00:20:01.200
So that's really powerful
to be able to do that.

00:20:01.200 --> 00:20:03.470
Now you can start really
thinking about all sorts of

00:20:03.470 --> 00:20:04.650
really cool use cases.

00:20:04.650 --> 00:20:07.600
Hopefully you're seeing that the
fact that I can edit this

00:20:07.600 --> 00:20:09.420
code is really nice,
in Sublime.

00:20:09.420 --> 00:20:11.680
But really, I thing where the
power comes in is if you start

00:20:11.680 --> 00:20:14.750
thinking about, OK, now I can
write a little synchronization

00:20:14.750 --> 00:20:18.830
tool that just copies all my
folders of projects for all

00:20:18.830 --> 00:20:19.910
backup purposes.

00:20:19.910 --> 00:20:23.850
Or automatically publishers to a
GitHub repo every hour after

00:20:23.850 --> 00:20:24.720
checking for updates.

00:20:24.720 --> 00:20:27.830
Or something along
those lines.

00:20:27.830 --> 00:20:30.100
And this is purely a
developer feature.

00:20:30.100 --> 00:20:34.750
So this is great for all you
developers that really want to

00:20:34.750 --> 00:20:37.030
use the tools that you have.

00:20:37.030 --> 00:20:40.160
If you have some Apps Script
code calling App Engine code,

00:20:40.160 --> 00:20:43.550
and you're used to using a
particular eclipse set up,

00:20:43.550 --> 00:20:45.750
maybe there's some interesting
things you could do here to

00:20:45.750 --> 00:20:47.140
make that all work.

00:20:47.140 --> 00:20:49.930
DAN LAZIN: Now from what I
understand, this is only going

00:20:49.930 --> 00:20:53.410
to work for Apps Script files
that are standalone in Drive.

00:20:53.410 --> 00:20:54.000
ARUN NAGARAJAN: That's right.

00:20:54.000 --> 00:20:54.340
That's right.

00:20:54.340 --> 00:20:56.240
DAN LAZIN: You can't use
this to get access to a

00:20:56.240 --> 00:20:58.210
container-bound script like
one that's embedded in the

00:20:58.210 --> 00:20:59.570
spreadsheet or embedded
in Google Docs.

00:20:59.570 --> 00:21:00.020
ARUN NAGARAJAN: That's right.

00:21:00.020 --> 00:21:04.570
The simple rule of thumb is if
you can see the script project

00:21:04.570 --> 00:21:10.060
in your Drive, those projects
are exportable and importable.

00:21:10.060 --> 00:21:13.710
At this point, there's no way
to get at the project that's

00:21:13.710 --> 00:21:16.730
associated to a particular
document or form or

00:21:16.730 --> 00:21:18.660
spreadsheet.

00:21:18.660 --> 00:21:20.950
But if you have a library,
that is shared.

00:21:20.950 --> 00:21:24.060
Hopefully this also improves
some of the resuability

00:21:24.060 --> 00:21:26.720
patterns around libraries.

00:21:26.720 --> 00:21:26.850
Yeah.

00:21:26.850 --> 00:21:28.190
That is the case today.

00:21:28.190 --> 00:21:31.220
And we look forward to hearing
your feedback to see what

00:21:31.220 --> 00:21:34.130
makes sense and how we can
improve this further.

00:21:34.130 --> 00:21:37.450
By way of limitations, there's
a couple of other limitations

00:21:37.450 --> 00:21:39.290
I'd like to quickly
point out as well.

00:21:39.290 --> 00:21:42.280
So in our API section in the
API guide, the very last

00:21:42.280 --> 00:21:43.930
section is called Limitations.

00:21:43.930 --> 00:21:46.390
Like any good API, we
want to be honest.

00:21:46.390 --> 00:21:49.410
And there are a few things that
we can do right away.

00:21:49.410 --> 00:21:53.790
But hopefully by us explaining
this all makes sense.

00:21:53.790 --> 00:21:56.580
The very first thing, like I
mentioned, container-bound

00:21:56.580 --> 00:22:01.035
scripts cannot be accessed
through the API at this point.

00:22:01.035 --> 00:22:04.350
You can only get at the source
code, not the project

00:22:04.350 --> 00:22:04.940
properties.

00:22:04.940 --> 00:22:08.190
And certain actions, like
publishing and versioning, are

00:22:08.190 --> 00:22:09.700
not quite available
at this point.

00:22:09.700 --> 00:22:11.510
DAN LAZIN: So you can't get your
ScriptDb as part of this,

00:22:11.510 --> 00:22:11.970
for example.

00:22:11.970 --> 00:22:12.730
ARUN NAGARAJAN: At
this point, yeah.

00:22:12.730 --> 00:22:12.980
Yeah.

00:22:12.980 --> 00:22:15.570
So it's only the source
code that's--

00:22:15.570 --> 00:22:17.360
DAN LAZIN: But if you were
using, for example, a

00:22:17.360 --> 00:22:20.820
spreadsheet as a data source,
because the spreadsheet lives

00:22:20.820 --> 00:22:24.270
in Google Drive, you can
actually use a variation of

00:22:24.270 --> 00:22:27.170
this technique to grab a copy
of your spreadsheet.

00:22:27.170 --> 00:22:28.230
ARUN NAGARAJAN: You could
do some pretty

00:22:28.230 --> 00:22:29.860
cool things like that.

00:22:29.860 --> 00:22:30.870
DAN LAZIN: You'd have
to export it first.

00:22:30.870 --> 00:22:32.230
Not live Google Drive--

00:22:32.230 --> 00:22:33.710
ARUN NAGARAJAN: [LAUGHS]

00:22:33.710 --> 00:22:35.400
Dan's the one with
the crazy ideas.

00:22:35.400 --> 00:22:36.340
DAN LAZIN: Yeah, yeah.

00:22:36.340 --> 00:22:37.910
Let's not confuse people.

00:22:37.910 --> 00:22:40.020
Back to Arun.

00:22:40.020 --> 00:22:41.660
ARUN NAGARAJAN: So let's take
a look at what some of the

00:22:41.660 --> 00:22:43.170
things that happened behind
the scenes are.

00:22:43.170 --> 00:22:46.200
So we showed you what can be
done, a quick demo of that.

00:22:46.200 --> 00:22:48.620
We showed you some of the
limitations that you have to

00:22:48.620 --> 00:22:49.510
be aware of.

00:22:49.510 --> 00:22:52.080
Now let's talk about some of
the details of how this all

00:22:52.080 --> 00:22:52.810
worked out.

00:22:52.810 --> 00:22:54.950
So before I show you the Python
code, let me show you

00:22:54.950 --> 00:22:58.820
the APIs that behind the
scenes were exchanged.

00:22:58.820 --> 00:23:01.710
The very first thing to
keep in mind is the--

00:23:01.710 --> 00:23:03.480
let me just come back here.

00:23:03.480 --> 00:23:04.180
OK.

00:23:04.180 --> 00:23:07.570
So I talked about how you could
list your projects.

00:23:07.570 --> 00:23:10.120
Once you listed your project,
one of the things that you get

00:23:10.120 --> 00:23:12.130
back that's really
important is this

00:23:12.130 --> 00:23:14.650
concept for Export Links.

00:23:14.650 --> 00:23:17.570
Export Links is actually a
generic Google Drive feature.

00:23:17.570 --> 00:23:20.410
So for instance, a Google
document can be

00:23:20.410 --> 00:23:22.460
exported to a PDF.

00:23:22.460 --> 00:23:25.600
That link is described within
the export links for that

00:23:25.600 --> 00:23:27.640
document object in
the response.

00:23:27.640 --> 00:23:33.050
So for a Google Apps Script
project, the only export link

00:23:33.050 --> 00:23:35.760
is a JSON file.

00:23:35.760 --> 00:23:37.980
So that's something that
you have to know about.

00:23:37.980 --> 00:23:40.330
So if you have an
already-existing Google Drive

00:23:40.330 --> 00:23:42.830
integration, taking advantage
of some of the things that

00:23:42.830 --> 00:23:44.350
we're doing here with Apps
Script is actually really

00:23:44.350 --> 00:23:45.030
straightforward.

00:23:45.030 --> 00:23:48.460
So we didn't invent anything
brand new there.

00:23:48.460 --> 00:23:52.170
What we did have to make up
here, because it's a brand-new

00:23:52.170 --> 00:23:57.830
capability, is the URL where the
export link points to is a

00:23:57.830 --> 00:24:02.450
new URL that you'll see under
script.google.com/Feeds.

00:24:02.450 --> 00:24:06.520
And that has an export end
point, where it'll essentially

00:24:06.520 --> 00:24:11.140
get the ID of the file, followed
by the format.

00:24:11.140 --> 00:24:13.200
And only supported
format is JSON.

00:24:13.200 --> 00:24:16.000
So if you're trying other
formats, you'll get an error.

00:24:16.000 --> 00:24:19.490
And you'll use the same
authorization header, the same

00:24:19.490 --> 00:24:22.350
OAuth credentials, to
get at this content.

00:24:22.350 --> 00:24:24.760
And the response you'll
get back is a new

00:24:24.760 --> 00:24:26.850
type of JSON response.

00:24:26.850 --> 00:24:29.420
This one essentially is
an array of files.

00:24:29.420 --> 00:24:30.760
And it's a pretty extensible
format.

00:24:30.760 --> 00:24:33.550
And hopefully we'll
keep pushing the

00:24:33.550 --> 00:24:34.730
capabilities of this.

00:24:34.730 --> 00:24:37.250
But for now, it's a file
object that is

00:24:37.250 --> 00:24:39.150
made up of four things--

00:24:39.150 --> 00:24:42.100
the ID, the internal identifier
of this file.

00:24:42.100 --> 00:24:44.310
This is the file within
the project.

00:24:44.310 --> 00:24:47.260
The type of file, whether
it's a JavaScript

00:24:47.260 --> 00:24:49.380
file or an HTML file.

00:24:49.380 --> 00:24:55.240
The name of the file, code.gs,
or index.html.

00:24:55.240 --> 00:24:59.590
And then really, the most
important part, which is the

00:24:59.590 --> 00:25:00.720
actual source code.

00:25:00.720 --> 00:25:04.190
So we encode this to make
it friendly with JSON.

00:25:04.190 --> 00:25:06.580
And we'll describe some
the details of--

00:25:06.580 --> 00:25:09.190
the client libraries take
care of parsing that.

00:25:09.190 --> 00:25:12.010
But if you are hand-parsing
these things, just make sure

00:25:12.010 --> 00:25:14.200
your accounting for
the JSON-friendly

00:25:14.200 --> 00:25:16.180
encoding that we do.

00:25:16.180 --> 00:25:18.030
And you can actually eyeball
this, and you can see what

00:25:18.030 --> 00:25:18.680
it's doing.

00:25:18.680 --> 00:25:21.260
So you can see that
there's the doGet.

00:25:21.260 --> 00:25:22.910
There's the quotes.

00:25:22.910 --> 00:25:25.000
And then here's the HTML.

00:25:25.000 --> 00:25:26.360
We encoded again.

00:25:26.360 --> 00:25:29.320
So actually, pretty easy
to look at this.

00:25:29.320 --> 00:25:32.200
And we actually describe what
they are as well down here.

00:25:32.200 --> 00:25:36.380
The only two types you'll see
today are ServerJS and HTML.

00:25:36.380 --> 00:25:40.750
And this will mimic what
you can do from here.

00:25:40.750 --> 00:25:44.730
So that's how I was able
to get the file.

00:25:44.730 --> 00:25:47.790
As far sending it back
up, now this has

00:25:47.790 --> 00:25:49.740
some of its own nuances.

00:25:49.740 --> 00:25:53.150
We do what's called an
HTTP Put request.

00:25:53.150 --> 00:25:56.020
And that's updating something
in place.

00:25:56.020 --> 00:25:59.650
And the important thing here
is to specify the type of

00:25:59.650 --> 00:26:04.190
content you're, putting HTTP
header of content type.

00:26:04.190 --> 00:26:07.510
And this is an important thing
to remember if you're

00:26:07.510 --> 00:26:08.770
handwriting this.

00:26:08.770 --> 00:26:13.090
So the fact that it is
a VND Google Apps

00:26:13.090 --> 00:26:15.090
Script, plus JSON--

00:26:15.090 --> 00:26:20.500
the plus is a normal way we
describe the alternative type

00:26:20.500 --> 00:26:21.490
we're uploading that.

00:26:21.490 --> 00:26:23.660
Because we're not actually
uploading this.

00:26:23.660 --> 00:26:26.850
We're uploading this in
the format of JSON.

00:26:26.850 --> 00:26:28.490
That's what that signifies.

00:26:28.490 --> 00:26:31.720
And again, this will look like
what you downloaded.

00:26:31.720 --> 00:26:34.670
Now, there are a lot of things
that probably comes to mind.

00:26:34.670 --> 00:26:36.500
You're probably asking,
how do I delete a

00:26:36.500 --> 00:26:37.810
file within a project?

00:26:37.810 --> 00:26:38.760
How do I rename them?

00:26:38.760 --> 00:26:40.610
How do I create a new one?

00:26:40.610 --> 00:26:43.190
And it's all based on state.

00:26:43.190 --> 00:26:44.070
Well, not state.

00:26:44.070 --> 00:26:46.080
It's based on IDs,
I should say.

00:26:46.080 --> 00:26:51.760
If you send us a file without
an ID or an ID that we don't

00:26:51.760 --> 00:26:54.080
know, that means create
a new file.

00:26:54.080 --> 00:26:56.635
So we'll just assume that you
want a new file created.

00:27:00.170 --> 00:27:02.950
If you don't send us a file
that we have on the server

00:27:02.950 --> 00:27:05.840
side, that means you don't
want that file retained.

00:27:05.840 --> 00:27:06.950
As in delete.

00:27:06.950 --> 00:27:09.310
DAN LAZIN: That means if you
have a multi-file project,

00:27:09.310 --> 00:27:12.080
you've got to send back every
file every time, not just the

00:27:12.080 --> 00:27:13.350
file you just updated
right now.

00:27:13.350 --> 00:27:13.950
ARUN NAGARAJAN: That's right.

00:27:13.950 --> 00:27:15.590
DAN LAZIN: Otherwise
you're [INAUDIBLE].

00:27:15.590 --> 00:27:18.280
ARUN NAGARAJAN: You should take
advantage of the GZIP

00:27:18.280 --> 00:27:20.380
compression that
the API offers.

00:27:20.380 --> 00:27:23.430
But it does mean that there is
a bunch of data that's going

00:27:23.430 --> 00:27:25.520
back and forth at this point.

00:27:25.520 --> 00:27:26.930
So be careful.

00:27:26.930 --> 00:27:30.670
Make sure that you're sending
back up the whole thing rather

00:27:30.670 --> 00:27:32.610
than just what you changed.

00:27:32.610 --> 00:27:35.710
The patch semantics are not
available at this point.

00:27:35.710 --> 00:27:40.000
And renaming, as you can
imagine, if you keep the ID

00:27:40.000 --> 00:27:43.280
the same and change the name,
we know that it's the same

00:27:43.280 --> 00:27:46.320
file, you're just calling
it something different.

00:27:46.320 --> 00:27:49.500
DAN LAZIN: If I try to keep the
same ID but change it from

00:27:49.500 --> 00:27:52.120
a ServerJS file to an HTML file,
is that going to work?

00:27:52.120 --> 00:27:52.900
ARUN NAGARAJAN: Nope.

00:27:52.900 --> 00:27:53.860
Doesn't work.

00:27:53.860 --> 00:27:56.720
I would've expected that to
work as well so I tried it

00:27:56.720 --> 00:27:58.760
out, but the UI doesn't
support it.

00:27:58.760 --> 00:28:00.820
So you cannot convert
a file here.

00:28:00.820 --> 00:28:02.230
So they can't change this.

00:28:02.230 --> 00:28:06.260
So a lot of ways it mimics
what the UI provides.

00:28:06.260 --> 00:28:08.170
So just keep that in mind.

00:28:08.170 --> 00:28:13.290
The API is not as foolproof
as the UI, for instance.

00:28:13.290 --> 00:28:17.510
If we block you from deleting
the last file, the API does

00:28:17.510 --> 00:28:18.610
give you error messages.

00:28:18.610 --> 00:28:20.920
So you'll have to look at it
and make sure that you're

00:28:20.920 --> 00:28:22.720
doing the appropriate things.

00:28:22.720 --> 00:28:26.820
The UI is much friendlier
towards mistakes and guides

00:28:26.820 --> 00:28:30.150
you to the right thing.

00:28:30.150 --> 00:28:32.820
And then the last thing
is creating a new

00:28:32.820 --> 00:28:34.470
project from scratch.

00:28:34.470 --> 00:28:37.420
So we didn't show you
this in the example.

00:28:37.420 --> 00:28:38.790
This is a bit more advanced.

00:28:38.790 --> 00:28:42.760
This is you want to have a new
file in your drive created

00:28:42.760 --> 00:28:46.230
without the user taking any
action at all as the user.

00:28:46.230 --> 00:28:50.060
And for this, you use what's
called a Post request.

00:28:50.060 --> 00:28:54.530
And again, it's the same
URL without any ID.

00:28:54.530 --> 00:28:57.360
So there's no file ID in this
case, because you're creating

00:28:57.360 --> 00:28:58.650
a brand new one.

00:28:58.650 --> 00:29:00.890
The important thing here
is this Convert

00:29:00.890 --> 00:29:02.590
Equal to True parameter.

00:29:02.590 --> 00:29:05.350
So that is, by default,
off in the API.

00:29:05.350 --> 00:29:09.030
Since you're sending up a JSON
and converting it to an Apps

00:29:09.030 --> 00:29:13.090
Script app, you do need
to sent that in.

00:29:13.090 --> 00:29:17.910
And the post parameters, the
post body, will look just like

00:29:17.910 --> 00:29:19.405
the other body that
you've seen.

00:29:19.405 --> 00:29:21.660
DAN LAZIN: Except there, you're
not sending IDs for the

00:29:21.660 --> 00:29:22.610
files [INAUDIBLE],
because they're

00:29:22.610 --> 00:29:23.630
all a brand new creation.

00:29:23.630 --> 00:29:24.050
ARUN NAGARAJAN: That's right.

00:29:24.050 --> 00:29:26.030
Exactly.

00:29:26.030 --> 00:29:29.140
And this will create a project
called Untitled in your drive.

00:29:29.140 --> 00:29:32.770
So there are ways where you can
include metadata in the

00:29:32.770 --> 00:29:34.080
creation part itself.

00:29:34.080 --> 00:29:36.310
And for that, we really
recommend

00:29:36.310 --> 00:29:37.700
using the client libraries.

00:29:37.700 --> 00:29:39.700
Because that's actually
two requests--

00:29:39.700 --> 00:29:41.960
one for the metadata and
one for the media.

00:29:41.960 --> 00:29:43.240
So just keep that in mind.

00:29:43.240 --> 00:29:45.210
DAN LAZIN: Or just write an app
scripts to find any new

00:29:45.210 --> 00:29:46.546
untitled projects [INAUDIBLE].

00:29:46.546 --> 00:29:47.012
ARUN NAGARAJAN: [LAUGHS]

00:29:47.012 --> 00:29:48.180
Yeah.

00:29:48.180 --> 00:29:50.390
That's another way to
solve that problem.

00:29:50.390 --> 00:29:51.640
Leave it to Dan.

00:29:53.970 --> 00:29:55.900
So now, let's take a look
at how we did this

00:29:55.900 --> 00:29:57.970
in the Python example.

00:29:57.970 --> 00:30:00.190
Zoom out a little bit.

00:30:00.190 --> 00:30:03.040
So again, this is something
that we'll clean up

00:30:03.040 --> 00:30:04.230
and share with you.

00:30:04.230 --> 00:30:06.320
But let's take a look at
the download part.

00:30:06.320 --> 00:30:07.360
Here's what we're doing.

00:30:07.360 --> 00:30:13.250
We're touching drive_service
is the wrapper that we get

00:30:13.250 --> 00:30:15.750
from the client library.

00:30:15.750 --> 00:30:20.450
And we're very easily able to
just say, get me all the files

00:30:20.450 --> 00:30:24.220
where this ID matches.

00:30:24.220 --> 00:30:25.815
So it's really straightforward
if you

00:30:25.815 --> 00:30:27.810
use the client libraries.

00:30:27.810 --> 00:30:30.810
In fact, none of the code here
will actually do any REST

00:30:30.810 --> 00:30:31.680
calls itself.

00:30:31.680 --> 00:30:34.130
We're just using the Python
Client libraries.

00:30:34.130 --> 00:30:35.790
And say Execute on it.

00:30:35.790 --> 00:30:40.160
And once I get the response
back, I can just say give me

00:30:40.160 --> 00:30:41.470
the export links.

00:30:41.470 --> 00:30:44.993
And then particularly, give me
the application/JSON link.

00:30:48.240 --> 00:30:52.070
And then you're able to very
quickly get the download URL.

00:30:52.070 --> 00:30:54.160
And then go ahead and
get that as well.

00:30:54.160 --> 00:30:57.490
So now I have my content
of the project.

00:30:57.490 --> 00:31:00.760
What we're doing next is
creating a folder if it

00:31:00.760 --> 00:31:03.310
doesn't exist.

00:31:03.310 --> 00:31:06.480
And deleting any files in the
folder if it's already there

00:31:06.480 --> 00:31:08.770
so that new files can
get copied over.

00:31:08.770 --> 00:31:10.810
Again, you might have
a lot of different

00:31:10.810 --> 00:31:12.580
optimization options here.

00:31:12.580 --> 00:31:13.840
We're storing the manifest.

00:31:13.840 --> 00:31:15.380
And I'll come back to
this, because it's

00:31:15.380 --> 00:31:17.090
required for the upload.

00:31:17.090 --> 00:31:18.960
And then I'm just iterating
through all the

00:31:18.960 --> 00:31:20.210
files that we get back.

00:31:20.210 --> 00:31:22.650
And then we're just creating the
file with the appropriate

00:31:22.650 --> 00:31:23.590
extension--

00:31:23.590 --> 00:31:25.410
.js or .html.

00:31:25.410 --> 00:31:28.930
Your rules apply here as well.

00:31:28.930 --> 00:31:32.420
The very last thing that we do
is make sure we write the

00:31:32.420 --> 00:31:34.660
source code into it.

00:31:34.660 --> 00:31:36.020
Ultimately do that.

00:31:36.020 --> 00:31:38.530
And since we're using the client
libraries and Python's

00:31:38.530 --> 00:31:41.870
JSON parsing capabilities,
it takes care of all the

00:31:41.870 --> 00:31:43.460
encoding/decoding stuff.

00:31:43.460 --> 00:31:50.430
So I get this nice look here
rather than this one-line

00:31:50.430 --> 00:31:52.620
representation of that.

00:31:52.620 --> 00:31:53.630
Which is great.

00:31:53.630 --> 00:31:57.270
And then the last part I'll
show is the upload part.

00:31:57.270 --> 00:31:59.350
What we're doing here
is we're actually

00:31:59.350 --> 00:32:00.610
opening up the manifest.

00:32:00.610 --> 00:32:02.760
And the manifest is important,
because I'm not storing the

00:32:02.760 --> 00:32:04.680
file IDs anywhere else.

00:32:04.680 --> 00:32:06.490
So I was thinking about
different ways to solve this.

00:32:06.490 --> 00:32:08.920
Potentially, I could have hidden
it in the first line of

00:32:08.920 --> 00:32:13.830
the file itself, or I could
name the file its ID, or

00:32:13.830 --> 00:32:15.430
something along those lines.

00:32:15.430 --> 00:32:17.990
But it's lot easier to
just have a manifest

00:32:17.990 --> 00:32:19.820
file for the demo.

00:32:19.820 --> 00:32:23.110
And again, this is where I feel
like the developers that

00:32:23.110 --> 00:32:26.160
are going to be building apps
will really shine and do

00:32:26.160 --> 00:32:28.630
something pretty cool
and creative.

00:32:28.630 --> 00:32:30.750
And what I'm doing here is I'm
just iterating through the

00:32:30.750 --> 00:32:35.150
manifest and copying back into
the manifest the source code

00:32:35.150 --> 00:32:36.500
to send back up.

00:32:36.500 --> 00:32:40.090
I'm storing it temporarily, and
then using the media file

00:32:40.090 --> 00:32:43.600
upload capability from the
client library, giving it the

00:32:43.600 --> 00:32:44.840
file to upload.

00:32:44.840 --> 00:32:49.090
What I'm also doing is including
the metadata about

00:32:49.090 --> 00:32:50.990
it, like the MIME type
and things like that.

00:32:50.990 --> 00:32:53.230
And here's where I could
potentially rename the project

00:32:53.230 --> 00:32:55.650
as well, which is a really
nice capability.

00:32:55.650 --> 00:32:58.930
And then ultimately, just
a single call to say

00:32:58.930 --> 00:33:03.090
files.update this particular
project.

00:33:03.090 --> 00:33:06.470
And then here's the body,
and here's the media.

00:33:06.470 --> 00:33:07.550
Really straightforward.

00:33:07.550 --> 00:33:10.260
We're talking about one
hundred-odd lines of code in

00:33:10.260 --> 00:33:12.790
Python, which is a pretty
succinct language to begin.

00:33:12.790 --> 00:33:16.180
With but even in Java or PHP,
you'll find yourself doing

00:33:16.180 --> 00:33:19.380
this in a lot less lines of
code than you'd expect.

00:33:19.380 --> 00:33:22.460
And this is just a very simple
synchronization utility for a

00:33:22.460 --> 00:33:24.560
particular folder
and a project.

00:33:24.560 --> 00:33:27.500
But we think that there's going
to be some really useful

00:33:27.500 --> 00:33:29.610
stuff that people will end
up building with this.

00:33:29.610 --> 00:33:31.000
DAN LAZIN: It's going to be a
race to see who can come up

00:33:31.000 --> 00:33:33.760
with the best implementation.

00:33:33.760 --> 00:33:35.340
ARUN NAGARAJAN: I think
we're out of time.

00:33:35.340 --> 00:33:38.240
We're really excited to see what
you can build with this.

00:33:38.240 --> 00:33:41.220
Find us on Stack Overflow, find
us on Google+, tell us

00:33:41.220 --> 00:33:43.130
what you're going to be
building, what you've tried,

00:33:43.130 --> 00:33:44.810
and any issues you have.

00:33:44.810 --> 00:33:47.190
Feel free to log it in
the issue tracker.

00:33:47.190 --> 00:33:51.110
We do ask you to figure out
whether it's a Drive issue or

00:33:51.110 --> 00:33:52.820
an Apps Script issue.

00:33:52.820 --> 00:33:55.110
And you can do that using all
the tools I described.

00:33:55.110 --> 00:33:57.550
The API's Explorer's
a really good tool.

00:33:57.550 --> 00:33:59.430
That will really make sure
that you get the right

00:33:59.430 --> 00:34:02.400
response from the right people,
rather than having to

00:34:02.400 --> 00:34:03.670
have us triage it.

00:34:03.670 --> 00:34:07.500
But I think with this video
and hopefully this

00:34:07.500 --> 00:34:10.000
documentation page with we will
keep updating and adding

00:34:10.000 --> 00:34:12.409
more content and samples to.

00:34:12.409 --> 00:34:13.620
I think that was all we
wanted to talk about.

00:34:13.620 --> 00:34:13.969
DAN LAZIN: Yeah.

00:34:13.969 --> 00:34:15.480
That looks really good.

00:34:15.480 --> 00:34:15.870
ARUN NAGARAJAN: Cool.

00:34:15.870 --> 00:34:16.260
Thank you very much.

00:34:16.260 --> 00:34:19.100
DAN LAZIN: Excited to see
what you guys do.

00:34:19.100 --> 00:34:20.520
Apps Script forever.

00:34:20.520 --> 00:35:21.118
[MUSIC PLAYING]

