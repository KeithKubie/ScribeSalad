WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:01.410
EMILY FORTUNA: Here
are the top five things

00:00:01.410 --> 00:00:02.840
people love about Flutter.

00:00:02.840 --> 00:00:05.490
MARTIN AGUINIS: First
off, stateful hot reload.

00:00:05.490 --> 00:00:07.320
This allows you to make
changes in your app

00:00:07.320 --> 00:00:10.110
and see them appear in
action in less than a second.

00:00:10.110 --> 00:00:11.850
Developers building
with Flutter complain

00:00:11.850 --> 00:00:14.310
that they don't have time
to go get coffee or make tea

00:00:14.310 --> 00:00:15.990
because their
builds are too fast.

00:00:15.990 --> 00:00:18.900
In the unlikely event that
hot reload is insufficient,

00:00:18.900 --> 00:00:22.050
a hot restart of your app
also only takes a few seconds

00:00:22.050 --> 00:00:23.500
and you're back in action.

00:00:23.500 --> 00:00:25.320
EMILY FORTUNA:
Writing a separate iOS

00:00:25.320 --> 00:00:26.940
and Android app
has the potential

00:00:26.940 --> 00:00:29.940
to introduce twice as many
bugs and results in twice as

00:00:29.940 --> 00:00:32.159
much code that you need
to test and maintain.

00:00:32.159 --> 00:00:34.380
It can be hard to also
ensure that each app has

00:00:34.380 --> 00:00:36.280
feature parity as it grows.

00:00:36.280 --> 00:00:38.700
With Flutter, all your
code for iOS and Android

00:00:38.700 --> 00:00:41.330
are in a single codebase,
speeding up development

00:00:41.330 --> 00:00:43.016
and making test coverage easier.

00:00:43.016 --> 00:00:44.640
MARTIN AGUINIS:
Flutter aims to provide

00:00:44.640 --> 00:00:46.950
60 frames per second
app performance

00:00:46.950 --> 00:00:49.260
with smooth
jank-free animations.

00:00:49.260 --> 00:00:51.180
Your code is compiled
ahead of time

00:00:51.180 --> 00:00:53.220
so there's no
interpretation happening,

00:00:53.220 --> 00:00:55.170
meaning that the Flutter
engine is executing

00:00:55.170 --> 00:00:57.150
machine instructions
for lightning

00:00:57.150 --> 00:00:58.970
fast native performance.

00:00:58.970 --> 00:01:00.720
EMILY FORTUNA: An app
written with Flutter

00:01:00.720 --> 00:01:02.850
has a great collection
of built-in components

00:01:02.850 --> 00:01:05.519
that are appropriate for the
platform you're developing on,

00:01:05.519 --> 00:01:07.860
so there's no need to learn
two completely different

00:01:07.860 --> 00:01:11.050
development systems to make your
app feel natural to your users.

00:01:11.050 --> 00:01:13.050
MARTIN AGUINIS: If it
looks good on this device,

00:01:13.050 --> 00:01:15.120
will it look good
on this other phone?

00:01:15.120 --> 00:01:17.700
If it's written using
Flutter, the answer is yes.

00:01:17.700 --> 00:01:19.800
Flutter uses its
own rendering engine

00:01:19.800 --> 00:01:22.240
to draw the entire UI to screen.

00:01:22.240 --> 00:01:24.800
This allows all components
of your app to be performant

00:01:24.800 --> 00:01:27.325
and provides consistency
from device to device.

00:01:27.325 --> 00:01:29.700
EMILY FORTUNA: Let us know
what your favorite feature is.

00:01:29.700 --> 00:01:32.750
[MUSIC PLAYING]

