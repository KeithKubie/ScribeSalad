WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.936
[LOGO MUSIC]

00:00:03.823 --> 00:00:06.115
FRANCESCO CARUCCI: Personally,
I'm a graphics engineer.

00:00:06.115 --> 00:00:12.590
I've been Making games
since 1999, give or take.

00:00:12.590 --> 00:00:16.970
And I always wrote
my graphics engines.

00:00:16.970 --> 00:00:20.570
The big takeaway for me
here is that, first, I

00:00:20.570 --> 00:00:22.410
don't have to do it anymore.

00:00:22.410 --> 00:00:24.350
I can just write the
shaders, I can just

00:00:24.350 --> 00:00:26.540
write the form part
because Unity helps me

00:00:26.540 --> 00:00:28.250
with all the legwork.

00:00:28.250 --> 00:00:32.720
And we're going to
talk about, first,

00:00:32.720 --> 00:00:35.420
all the editor and
workflow improvements

00:00:35.420 --> 00:00:40.130
that Unity is bringing
to the table recently.

00:00:40.130 --> 00:00:44.350
Unity has been
really, really good

00:00:44.350 --> 00:00:48.340
at presenting in the editor
how the game looks like.

00:00:48.340 --> 00:00:52.810
I worked on games where the
iteration time was something

00:00:52.810 --> 00:00:56.050
like, I make a change,
not me, but the actors

00:00:56.050 --> 00:00:59.320
make a change in the
level, compile lighting,

00:00:59.320 --> 00:01:01.360
two days later see
how it looks like.

00:01:01.360 --> 00:01:03.100
Well, in Unity, that's
not how it works.

00:01:03.100 --> 00:01:09.480
You can see immediately the
content creator is working on.

00:01:09.480 --> 00:01:12.450
But now, Unity is
getting better and better

00:01:12.450 --> 00:01:17.010
at also showing on device
how the game looks like.

00:01:17.010 --> 00:01:22.320
I'm a huge fan and I always
ask all my content creators

00:01:22.320 --> 00:01:23.940
to look at the
game on the device

00:01:23.940 --> 00:01:29.790
because a model texture and
level might look wonderful

00:01:29.790 --> 00:01:33.252
on your Photoshop or
on your 3D package

00:01:33.252 --> 00:01:34.710
might look wonderful
on the editor,

00:01:34.710 --> 00:01:37.050
but the device is a different
beast, different monitor,

00:01:37.050 --> 00:01:38.370
everything is different.

00:01:38.370 --> 00:01:42.150
Just check on device, and
Unity is helping here as well.

00:01:42.150 --> 00:01:44.100
Iteration is key.

00:01:44.100 --> 00:01:47.593
And Unity makes it
as fast as possible.

00:01:47.593 --> 00:01:49.260
Then we're going to
talk about graphics,

00:01:49.260 --> 00:01:51.600
which is my favorite subject
because I'm a graphics

00:01:51.600 --> 00:01:53.310
engineer.

00:01:53.310 --> 00:01:56.210
And here, Unity is
bringing to the table

00:01:56.210 --> 00:02:00.500
the possibility to address
the whole range of devices

00:02:00.500 --> 00:02:05.070
from low power devices,
low performance devices,

00:02:05.070 --> 00:02:06.400
to high end devices.

00:02:06.400 --> 00:02:16.460
It offers low quality renders
to address these low end devices

00:02:16.460 --> 00:02:20.600
and high fidelity renderings
to address the high end AAA

00:02:20.600 --> 00:02:23.640
kind of use case.

00:02:23.640 --> 00:02:27.170
And finally, at the end, we're
going to talk about Google

00:02:27.170 --> 00:02:29.780
Play support and
how we're writing

00:02:29.780 --> 00:02:32.930
as Google our own
plugins to help

00:02:32.930 --> 00:02:35.390
you develop a ship on Android.

00:02:35.390 --> 00:02:41.290
So I'm very excited to leave
the stage to JC from Unity.

00:02:41.290 --> 00:02:41.790
Thank you.

00:02:44.920 --> 00:02:46.300
JC CIMETIERE: Hello, everyone.

00:02:46.300 --> 00:02:48.700
So glad to be here today.

00:02:48.700 --> 00:02:52.950
So before, so my name is JC.

00:02:52.950 --> 00:02:54.750
I'm a product manager at Unity.

00:02:54.750 --> 00:02:58.440
I focus primarily
on mobile platforms.

00:02:58.440 --> 00:03:00.030
And, yeah.

00:03:00.030 --> 00:03:02.310
I'm going to talk about Unity.

00:03:02.310 --> 00:03:05.100
And before I get
into there, I just

00:03:05.100 --> 00:03:07.080
want to do a quick
raise of hands.

00:03:07.080 --> 00:03:09.120
So who's using Unity currently?

00:03:11.910 --> 00:03:14.050
I saw a few people who
didn't raise their hand.

00:03:14.050 --> 00:03:14.860
What are you doing?

00:03:14.860 --> 00:03:16.050
Come on.

00:03:16.050 --> 00:03:18.240
There's a free version to try.

00:03:18.240 --> 00:03:19.680
No commitment, just try.

00:03:19.680 --> 00:03:21.310
It's easy to get started.

00:03:21.310 --> 00:03:25.680
So, more seriously, Unity
started more than 10 years ago

00:03:25.680 --> 00:03:28.740
with a vision in
mind that we wanted

00:03:28.740 --> 00:03:33.240
to democratize game development,
really help creators

00:03:33.240 --> 00:03:34.920
to realize their vision.

00:03:34.920 --> 00:03:38.280
And since then, well,
a few million users

00:03:38.280 --> 00:03:41.880
have tried and use Unity
and keep using Unity,

00:03:41.880 --> 00:03:44.080
but also we've
gone beyond games.

00:03:44.080 --> 00:03:49.320
So Unity is also now powering
other industries, like film,

00:03:49.320 --> 00:03:53.500
automotive, simulation,
architecture, and many more.

00:03:53.500 --> 00:03:55.860
And this is because
basically our technology

00:03:55.860 --> 00:03:58.860
is a real time 3D engine,
3D development platform.

00:03:58.860 --> 00:04:00.200
You can do 2D if you want.

00:04:00.200 --> 00:04:01.720
It's just removing
one dimension,

00:04:01.720 --> 00:04:05.160
which is fairly easy.

00:04:05.160 --> 00:04:06.780
And Unity's focus
at the beginning

00:04:06.780 --> 00:04:09.180
was really on the
creator, helping

00:04:09.180 --> 00:04:11.280
you to realize your vision.

00:04:11.280 --> 00:04:13.350
We've always thought
that the world

00:04:13.350 --> 00:04:17.019
is a better world the
more creators we have.

00:04:17.019 --> 00:04:20.687
But we've also realized that
creating is only one thing.

00:04:20.687 --> 00:04:22.770
You want to go to the next
step, and the next step

00:04:22.770 --> 00:04:27.030
is when you create for serious,
you want to make it a business

00:04:27.030 --> 00:04:30.480
and you want to live from that.

00:04:30.480 --> 00:04:32.220
We're trying to enable success.

00:04:32.220 --> 00:04:36.450
And the way we do that we offer
additional options for Unity

00:04:36.450 --> 00:04:43.050
users to basically manage
the lifecycle of their games.

00:04:43.050 --> 00:04:46.830
And in particular, we offer a
service to manage multiplayer.

00:04:46.830 --> 00:04:49.830
So if you want to create
a multiplayer game,

00:04:49.830 --> 00:04:52.790
we have all the things
you need to do with Unity.

00:04:52.790 --> 00:04:55.080
And finally, on
mobile, if you choose

00:04:55.080 --> 00:04:57.850
to monetize through
advertising, for example,

00:04:57.850 --> 00:04:59.430
we have also a
very strong network

00:04:59.430 --> 00:05:03.250
that can be used to
help you be successful.

00:05:03.250 --> 00:05:06.750
So just a very quick intro
to give you a sense of Unity

00:05:06.750 --> 00:05:10.170
is not just a game engine, it's
actually way more than that.

00:05:10.170 --> 00:05:13.620
But to that, we're going to
focus on the creation path.

00:05:13.620 --> 00:05:15.810
And as Fran said
in the intro, we're

00:05:15.810 --> 00:05:20.170
going to stop looking
at workflow improvement.

00:05:20.170 --> 00:05:24.240
And I want to remind
some of the goals really

00:05:24.240 --> 00:05:25.770
that are critical to us.

00:05:25.770 --> 00:05:27.720
So, first of all, I
didn't mention it,

00:05:27.720 --> 00:05:31.560
but one of the key thing in
addition to democratizing game

00:05:31.560 --> 00:05:34.440
development is also to be
a cross-platform engine.

00:05:34.440 --> 00:05:38.100
Basically, you build once
and you deploy everywhere.

00:05:38.100 --> 00:05:40.140
And I'll be honest.

00:05:40.140 --> 00:05:43.500
Deploying everywhere requires
always a [INAUDIBLE] fork.

00:05:43.500 --> 00:05:48.280
But we're trying to make that
work as painless as possible.

00:05:48.280 --> 00:05:51.240
The second thing is about
general productivity.

00:05:51.240 --> 00:05:53.610
We want to give you the
tools that makes you go

00:05:53.610 --> 00:05:55.750
do things the
fastest as possible.

00:05:55.750 --> 00:05:58.740
And we'll go through a
few of those new things.

00:05:58.740 --> 00:06:01.650
And iteration on
device is really

00:06:01.650 --> 00:06:04.620
call to the investment
we're meeting these days

00:06:04.620 --> 00:06:09.000
to help you work in the editor,
do things really fast, but also

00:06:09.000 --> 00:06:11.730
being able to see the
result of your iteration,

00:06:11.730 --> 00:06:12.790
your work on device.

00:06:12.790 --> 00:06:16.680
Because, yes, mobile devices
are a little bit tricky

00:06:16.680 --> 00:06:19.530
and there are many, many kinds
of devices in the Android

00:06:19.530 --> 00:06:20.770
ecosystem.

00:06:20.770 --> 00:06:24.060
The diversity is so broad
that testing on device

00:06:24.060 --> 00:06:25.870
is definitely a must.

00:06:28.970 --> 00:06:32.990
So I'm going to go
through a list of features

00:06:32.990 --> 00:06:33.750
that are coming.

00:06:33.750 --> 00:06:38.280
Or just landing in Unity
and try to give you

00:06:38.280 --> 00:06:40.890
a sense of the latest
and greatest that

00:06:40.890 --> 00:06:42.870
are helping in those
areas that we mentioned.

00:06:42.870 --> 00:06:46.260
So, first of all,
in 19.1, we are now

00:06:46.260 --> 00:06:50.700
shipping with Unity the right,
the correct Android SDK,

00:06:50.700 --> 00:06:52.200
Android NDK.

00:06:52.200 --> 00:06:56.520
And actually,
starting with 18.2,

00:06:56.520 --> 00:06:59.190
starting with the
last version of 2018,

00:06:59.190 --> 00:07:02.190
we included the open JDK.

00:07:02.190 --> 00:07:05.107
Which means now when you
install Unity for Android

00:07:05.107 --> 00:07:06.690
and you've done with
the installation,

00:07:06.690 --> 00:07:08.670
you can actually build
and deploy right away.

00:07:08.670 --> 00:07:10.590
You won't have to do
any configuration.

00:07:10.590 --> 00:07:11.830
It's ready to go.

00:07:11.830 --> 00:07:14.470
And, if you're an advanced user,
you know what you're doing,

00:07:14.470 --> 00:07:19.155
you can actually do more
advanced configuration and set

00:07:19.155 --> 00:07:20.280
things up the way you want.

00:07:20.280 --> 00:07:23.100
But to get started
really fast, that's built

00:07:23.100 --> 00:07:28.500
in via the Hub, which is the
new way to install Unity and get

00:07:28.500 --> 00:07:31.210
all the different components.

00:07:31.210 --> 00:07:35.070
In 19.2, we're working
on a new feature

00:07:35.070 --> 00:07:38.250
to enable you to
manage notification

00:07:38.250 --> 00:07:39.850
from Unity directly.

00:07:39.850 --> 00:07:42.960
So you won't have to deal
with the low-level system

00:07:42.960 --> 00:07:43.980
operations.

00:07:43.980 --> 00:07:48.390
And that's a way to do cross
platform notification for iOS

00:07:48.390 --> 00:07:49.530
and Android.

00:07:49.530 --> 00:07:51.720
It's going to be
delivered as a package

00:07:51.720 --> 00:07:54.690
and it's in preview currently.

00:07:54.690 --> 00:08:00.060
So I didn't mention in 19.1
the safer and the notch

00:08:00.060 --> 00:08:02.860
because I have a
special slide for that.

00:08:02.860 --> 00:08:06.300
So starting with
Unity 19.2, we are

00:08:06.300 --> 00:08:10.860
adding the feature that enables
you to detect the cut-out area.

00:08:10.860 --> 00:08:15.240
And the safe area is where
you can safely place content.

00:08:15.240 --> 00:08:17.830
It's not going to
be behind a notch.

00:08:17.830 --> 00:08:20.160
And so now, via
code, it can actually

00:08:20.160 --> 00:08:22.040
detect what are the
different areas,

00:08:22.040 --> 00:08:24.600
the safe area, no problem.

00:08:24.600 --> 00:08:27.750
It tells you where
the cutout is,

00:08:27.750 --> 00:08:29.880
and then you know
where the space is.

00:08:29.880 --> 00:08:33.360
So by the way, do you
know what form that is?

00:08:33.360 --> 00:08:34.929
Nobody knows?

00:08:34.929 --> 00:08:36.480
Anybody want to guess?

00:08:36.480 --> 00:08:37.740
OK.

00:08:37.740 --> 00:08:40.140
So that's Pixel 3 XL.

00:08:40.140 --> 00:08:43.559
So, if you're running that
code, actually, exactly

00:08:43.559 --> 00:08:48.020
that code on a Pixel 3
XL, this is what happens.

00:08:48.020 --> 00:08:52.920
So the first thing, you start by
defining your screen safe area.

00:08:52.920 --> 00:08:56.980
And that's the red rectangle
that's been drawn here.

00:08:56.980 --> 00:09:02.730
And then, you define a
valuable that is the cutouts,

00:09:02.730 --> 00:09:04.800
and there can be
multiple cutouts.

00:09:04.800 --> 00:09:06.720
And you do a simple loop.

00:09:06.720 --> 00:09:09.100
You check that there's
at least one cutout,

00:09:09.100 --> 00:09:10.600
and there's one right here.

00:09:10.600 --> 00:09:12.730
We're drawing a green rectangle.

00:09:12.730 --> 00:09:15.900
So this is really super easy
to use and very convenient

00:09:15.900 --> 00:09:18.480
if you want to maximize
the space that you

00:09:18.480 --> 00:09:20.340
have on your phones.

00:09:20.340 --> 00:09:24.150
And, by the way, that
feature also works on iPhone.

00:09:24.150 --> 00:09:27.810
So you're going to get the same
code working across platform.

00:09:30.930 --> 00:09:31.990
Profiling.

00:09:31.990 --> 00:09:35.490
It's always challenging
when you make a game.

00:09:35.490 --> 00:09:39.180
It works well on one device,
and then on another device maybe

00:09:39.180 --> 00:09:40.660
it doesn't work that well.

00:09:40.660 --> 00:09:43.530
So there's a lot of
profiling option.

00:09:43.530 --> 00:09:46.080
Unity has a pretty
advanced profiler

00:09:46.080 --> 00:09:50.070
that allows you to look
inside the game from Unity's

00:09:50.070 --> 00:09:51.150
standpoint.

00:09:51.150 --> 00:09:53.670
But what we've done
is with Unity 19.1,

00:09:53.670 --> 00:09:57.880
we've actually instrumented
the build that we make.

00:09:57.880 --> 00:10:01.050
So, when you run a
Unity game on Android,

00:10:01.050 --> 00:10:04.830
Systrace, which is one of
the advanced profiling tool,

00:10:04.830 --> 00:10:08.650
will actually know inside the
Unity app what's going on.

00:10:08.650 --> 00:10:10.650
So, on that
screenshot, it shows,

00:10:10.650 --> 00:10:15.390
from Systrace, which is a native
Android profiling tool, what

00:10:15.390 --> 00:10:18.210
are the different thread in
Unity, what is the rendering

00:10:18.210 --> 00:10:21.510
thread, what is the main
thread, what is a choreographer.

00:10:21.510 --> 00:10:26.790
And so you can detect from
the outside what's going wrong

00:10:26.790 --> 00:10:29.370
or what are the
problems, potentially,

00:10:29.370 --> 00:10:32.670
that could be caused by some
interference with the other

00:10:32.670 --> 00:10:35.820
applications running on the
system or some weird thing that

00:10:35.820 --> 00:10:39.660
you cannot detect
from within Unity.

00:10:39.660 --> 00:10:42.600
So super useful and
that's available now.

00:10:42.600 --> 00:10:47.970
So another more advanced
way of debugging

00:10:47.970 --> 00:10:49.480
is using Android Logcat.

00:10:49.480 --> 00:10:54.120
It's a very powerful, very
verbose debugging tool.

00:10:54.120 --> 00:10:57.960
What we've done is actually we
brought Logcat inside Unity,

00:10:57.960 --> 00:11:01.020
so you don't have to do
any command line tool.

00:11:01.020 --> 00:11:03.480
And it's also super
useful because we give you

00:11:03.480 --> 00:11:06.210
a lot of information that you
can filter and look through.

00:11:06.210 --> 00:11:09.710
So I have a little
scenario here.

00:11:09.710 --> 00:11:13.120
So this is a Logcat window
running inside Unity.

00:11:13.120 --> 00:11:15.430
So once you've
connected a phone,

00:11:15.430 --> 00:11:18.040
you're going to start seeing
all the Logcat event coming

00:11:18.040 --> 00:11:19.600
to Unity.

00:11:19.600 --> 00:11:21.890
And of course, that's
maybe a little too much.

00:11:21.890 --> 00:11:24.760
So the first thing I
want to do is filter

00:11:24.760 --> 00:11:27.370
and I'm going to filter
by the application that's

00:11:27.370 --> 00:11:28.640
running on the device.

00:11:28.640 --> 00:11:30.520
So I've deployed
this little game,

00:11:30.520 --> 00:11:32.710
and so I'm going to
just select this one.

00:11:32.710 --> 00:11:37.060
And now, the Logcat
gives me only the events

00:11:37.060 --> 00:11:39.050
that are generated
by this application.

00:11:39.050 --> 00:11:42.220
So in this case, this
is the legal card game.

00:11:42.220 --> 00:11:44.920
And as you can see at the
bottom, the deck of cards

00:11:44.920 --> 00:11:48.670
is empty and obviously
something wrong happened.

00:11:48.670 --> 00:11:52.450
And yes, this is a game that's
using asset bundles that

00:11:52.450 --> 00:11:54.430
are hosted somewhere else.

00:11:54.430 --> 00:11:58.100
And I forgot to build my assets.

00:11:58.100 --> 00:12:01.220
So the game starts, tries
to download the assets,

00:12:01.220 --> 00:12:02.920
the assets are not here.

00:12:02.920 --> 00:12:06.670
It generates errors that you
can see directly in Logcat.

00:12:06.670 --> 00:12:10.330
So in that case, I can detect
very quickly what's going wrong

00:12:10.330 --> 00:12:12.530
and then fix it really quickly.

00:12:12.530 --> 00:12:14.440
And by the way, the
screenshot is also

00:12:14.440 --> 00:12:16.510
taken directly from Unity.

00:12:16.510 --> 00:12:19.482
There's the little button
here, Capture Screen.

00:12:19.482 --> 00:12:21.190
It's going to take a
screenshot of what's

00:12:21.190 --> 00:12:23.830
running on the device, and
you can save it locally

00:12:23.830 --> 00:12:25.210
on your machine.

00:12:25.210 --> 00:12:29.780
Small feature, but
super convenient.

00:12:29.780 --> 00:12:36.040
So, now, when you're
deploying to your device,

00:12:36.040 --> 00:12:38.450
you try and then you
want to make a change.

00:12:38.450 --> 00:12:41.410
So we've introduced
a new feature

00:12:41.410 --> 00:12:45.130
in Unity 19.1 for Android
that allows you to do

00:12:45.130 --> 00:12:48.470
super fast iteration on code.

00:12:48.470 --> 00:12:50.130
So here's the scenario.

00:12:50.130 --> 00:12:52.360
So the video just started.

00:12:52.360 --> 00:12:54.630
So we make a build.

00:12:54.630 --> 00:12:56.320
So we have a little sample game.

00:12:56.320 --> 00:12:58.090
You may have seen it
this is one we were

00:12:58.090 --> 00:13:00.730
using in our teaching material.

00:13:00.730 --> 00:13:03.040
It's Infinite Runner.

00:13:03.040 --> 00:13:05.950
So the first build
takes about a minute.

00:13:05.950 --> 00:13:07.400
It was a little fast.

00:13:07.400 --> 00:13:10.330
So the score starts at zero.

00:13:10.330 --> 00:13:13.060
And I like to cheat, so what
I'm going to do, I want to do,

00:13:13.060 --> 00:13:16.090
I want to change a code
and start the game at 10.

00:13:16.090 --> 00:13:20.390
So I'm go going to the code,
do a little quick change.

00:13:20.390 --> 00:13:23.883
And at this point, I don't
want to rebuild the whole game.

00:13:23.883 --> 00:13:25.300
So what I'm going
to do, I'm going

00:13:25.300 --> 00:13:27.530
to use this option,
script only, so I'm

00:13:27.530 --> 00:13:31.880
going to recompile just the
code, not touch any asset.

00:13:31.880 --> 00:13:35.460
I'm going to ask Unity,
OK, rebuild the code,

00:13:35.460 --> 00:13:38.730
recompile the code, and
just push the new library.

00:13:38.730 --> 00:13:42.280
And so in this case, I don't
even rebuild the new APK.

00:13:42.280 --> 00:13:45.310
I just recompile my library,
push it to the device,

00:13:45.310 --> 00:13:48.640
and it takes 18 seconds
instead of one minute.

00:13:48.640 --> 00:13:51.700
And as you can see, when
you restart the game,

00:13:51.700 --> 00:13:54.070
the game will look
for the new library

00:13:54.070 --> 00:13:55.630
and take it to an account.

00:13:55.630 --> 00:13:57.550
And then, as you
can see, I cheated,

00:13:57.550 --> 00:14:00.620
now I'm starting
with 10 points ahead.

00:14:00.620 --> 00:14:05.500
It's available in Unity
2019.1 that shipped last week.

00:14:05.500 --> 00:14:09.370
And that is really fast
when you want to do a code

00:14:09.370 --> 00:14:10.810
iteration on your code only.

00:14:15.500 --> 00:14:16.420
AR.

00:14:16.420 --> 00:14:20.130
So who's doing AR
development in the room?

00:14:20.130 --> 00:14:20.640
A few.

00:14:20.640 --> 00:14:21.490
Great.

00:14:21.490 --> 00:14:27.510
So one of the key thing is
very focused on our desire

00:14:27.510 --> 00:14:29.760
to provide cross
platform support.

00:14:29.760 --> 00:14:31.470
We've brought AI
foundation, which

00:14:31.470 --> 00:14:33.450
is a new layer and
Unity that really

00:14:33.450 --> 00:14:39.270
gives that cross platform
feature across iOS and Android.

00:14:39.270 --> 00:14:42.120
But, also, what we're
doing is, by giving you

00:14:42.120 --> 00:14:45.850
this kind of common APIs to
do all the common things,

00:14:45.850 --> 00:14:48.570
we're also providing
some extensions

00:14:48.570 --> 00:14:52.020
so that every platform that
has some specific features

00:14:52.020 --> 00:14:53.850
are brought directly to you.

00:14:53.850 --> 00:14:55.560
So you have them right in Unity.

00:14:55.560 --> 00:14:57.810
But for all the
common things, you

00:14:57.810 --> 00:14:59.760
don't have to worry
about the differences

00:14:59.760 --> 00:15:02.070
between those platforms.

00:15:02.070 --> 00:15:03.150
That's the first thing.

00:15:03.150 --> 00:15:09.040
Next, we are introducing
in 19.1 a set of features.

00:15:09.040 --> 00:15:13.420
The first one is the
possibility to record a session.

00:15:13.420 --> 00:15:16.800
So if you are playing with
your app that you've built

00:15:16.800 --> 00:15:19.710
and exploring the
world, you can record

00:15:19.710 --> 00:15:23.520
all the events that happen
and replay that session

00:15:23.520 --> 00:15:25.920
and use it, for
example, as the test

00:15:25.920 --> 00:15:31.050
script for further test if
you've made some changes

00:15:31.050 --> 00:15:32.440
to verify everything is OK.

00:15:35.010 --> 00:15:38.350
Next, in 19.2, we're working
on editor simulation.

00:15:38.350 --> 00:15:40.410
So in this case,
you don't even need

00:15:40.410 --> 00:15:44.400
to have a device connected
to the Unity Editor.

00:15:44.400 --> 00:15:48.460
You can actually simulate inputs
and a real world around you.

00:15:48.460 --> 00:15:50.700
So, again, that's a
way to iterate really

00:15:50.700 --> 00:15:54.490
fast even without having
a device connected.

00:15:54.490 --> 00:15:58.290
So I skip the AR remote
because I have a video.

00:15:58.290 --> 00:16:04.290
So the AR remote is a way to
combine the power of the Unity

00:16:04.290 --> 00:16:08.130
Editor, and having a phone
connected to your development

00:16:08.130 --> 00:16:08.980
machine.

00:16:08.980 --> 00:16:13.200
So in that case, the way it
works, you connect your phone

00:16:13.200 --> 00:16:14.610
to the Unity editor.

00:16:14.610 --> 00:16:17.370
And then, the phone
is streaming the world

00:16:17.370 --> 00:16:20.640
to the editor and all the
information, location,

00:16:20.640 --> 00:16:22.600
planning, detection,
and everything.

00:16:22.600 --> 00:16:26.640
And so you end up basically
working directly in the editor,

00:16:26.640 --> 00:16:29.270
but you have the phone that is
acting as a device capturing

00:16:29.270 --> 00:16:29.770
the world.

00:16:29.770 --> 00:16:32.490
So you can iterate
really fast and do

00:16:32.490 --> 00:16:35.200
a lot of testing
without having to build

00:16:35.200 --> 00:16:37.200
and then wait for the
build to be ready and play

00:16:37.200 --> 00:16:37.825
with the phone.

00:16:37.825 --> 00:16:40.620
So we can really combine that
and that's super powerful

00:16:40.620 --> 00:16:45.140
to iterate very fast.

00:16:45.140 --> 00:16:47.365
So let's talk about graphics.

00:16:53.050 --> 00:16:58.190
As I said earlier, Unity was
created more than 10 years ago.

00:16:58.190 --> 00:17:01.240
And when we made the
first iterations of Unity,

00:17:01.240 --> 00:17:04.630
we've built a really
powerful graphics engine,

00:17:04.630 --> 00:17:06.599
but we also built
it in a way that's

00:17:06.599 --> 00:17:09.819
fairly black box in the
sense that there's not

00:17:09.819 --> 00:17:14.290
a lot of hooks to tweak it
to really get the engine

00:17:14.290 --> 00:17:16.190
to go any direction you want.

00:17:16.190 --> 00:17:18.400
So a couple years
ago, we started

00:17:18.400 --> 00:17:21.040
thinking about a new
rendering engine,

00:17:21.040 --> 00:17:25.060
and we built this new
engine with the idea

00:17:25.060 --> 00:17:28.870
that we want to give you a lot
of power, a lot of control,

00:17:28.870 --> 00:17:30.410
and also a lot of flexibility.

00:17:30.410 --> 00:17:34.330
So what we've done is
basically created the core

00:17:34.330 --> 00:17:39.130
of the rendering pipeline
that is built in C++.

00:17:39.130 --> 00:17:42.040
And around that core,
we have a series

00:17:42.040 --> 00:17:44.410
of scripts that are
written in C Sharp that

00:17:44.410 --> 00:17:47.260
will take care of all the
steps that are happening

00:17:47.260 --> 00:17:48.920
in the rendering pipeline.

00:17:48.920 --> 00:17:51.640
So that would give you full
control of the rendering

00:17:51.640 --> 00:17:54.760
pipeline, but on the other
hand, your responsibility

00:17:54.760 --> 00:17:57.370
is limited to writing
code in C Sharp

00:17:57.370 --> 00:18:01.040
and having to choose the
different steps you want.

00:18:01.040 --> 00:18:04.070
So you can have a really
customized rendering process,

00:18:04.070 --> 00:18:08.870
you control resource usage,
you can control performance.

00:18:08.870 --> 00:18:12.220
And that is all great for
people like Francesco, who likes

00:18:12.220 --> 00:18:14.230
to create a rendering pipeline.

00:18:14.230 --> 00:18:18.580
But out of the box we give
you two rendering pipelines

00:18:18.580 --> 00:18:19.810
that are ready to use.

00:18:19.810 --> 00:18:24.100
And the first one that we call
lightweight render pipeline

00:18:24.100 --> 00:18:28.710
is actually out of preview,
so final in Unity 19.1.

00:18:28.710 --> 00:18:32.440
And this is basically the
more universal pipeline

00:18:32.440 --> 00:18:35.470
that is designed with
performance in mind

00:18:35.470 --> 00:18:38.710
and that will work really
well across all platforms.

00:18:38.710 --> 00:18:41.410
There's a big focus on
making that pipeline super

00:18:41.410 --> 00:18:44.140
efficient on mobile,
but also it's

00:18:44.140 --> 00:18:46.180
really easy to
configure this pipeline

00:18:46.180 --> 00:18:50.650
to add extra post-processing
or to remove post-processing

00:18:50.650 --> 00:18:54.190
or to add your
custom steps if you

00:18:54.190 --> 00:18:58.590
want to do special things
during the rendering pipeline.

00:18:58.590 --> 00:19:02.670
So this is the one that is
really recommended for mobile.

00:19:02.670 --> 00:19:04.450
And we have another
rendering pipeline

00:19:04.450 --> 00:19:07.180
which is called high definition
render pipeline, which

00:19:07.180 --> 00:19:11.530
is basically the one we use for
games that are designed to run

00:19:11.530 --> 00:19:13.460
on PC console exclusively.

00:19:13.460 --> 00:19:16.090
That's the pipeline that
is used in film when

00:19:16.090 --> 00:19:18.310
we want to do a simulation.

00:19:18.310 --> 00:19:20.720
So Unity has been used to do--

00:19:20.720 --> 00:19:26.230
we've shown some demo to
show a Lexus car in the world

00:19:26.230 --> 00:19:29.890
that you don't even know if
it's a real one or a fake one.

00:19:29.890 --> 00:19:31.840
And that's the
rendering pipeline

00:19:31.840 --> 00:19:33.010
that's being used for those.

00:19:33.010 --> 00:19:36.160
And the main difference is that
the high definition rendering

00:19:36.160 --> 00:19:40.030
pipeline is actually heavily
relying on the GPO compute

00:19:40.030 --> 00:19:44.410
processing, which is
somehow available on mobile

00:19:44.410 --> 00:19:47.140
but not on all mobile for sure,
and even on high end mobile

00:19:47.140 --> 00:19:49.670
has some limitation.

00:19:49.670 --> 00:19:53.360
So to drill down a little
bit on the graphics roadmap

00:19:53.360 --> 00:19:57.620
specifically for what applies
to mobile, so the few features

00:19:57.620 --> 00:20:00.740
that I wanted to discuss
today, the first one

00:20:00.740 --> 00:20:03.380
is one we call dynamic
resolution, which

00:20:03.380 --> 00:20:07.100
is available for the
lightweight render pipeline now.

00:20:07.100 --> 00:20:10.850
And what it enables you
is, basically, at runtime,

00:20:10.850 --> 00:20:14.360
you can decide to reduce a
little bit the resolution

00:20:14.360 --> 00:20:16.880
at which you are rendering
so that you can really

00:20:16.880 --> 00:20:21.320
save on bandwidth on the GPU,
on the CPU, and on memory.

00:20:21.320 --> 00:20:25.400
And you just reduce by a
few percent your resolution

00:20:25.400 --> 00:20:29.690
and you blip to the full
screen at the very last step.

00:20:29.690 --> 00:20:33.410
And this feature required
us to use Vulcan.

00:20:33.410 --> 00:20:35.180
I wanted to mention
the fact that we've

00:20:35.180 --> 00:20:40.010
been working a lot on Vulcan
with Google with all the OEMs

00:20:40.010 --> 00:20:42.540
to make sure Vulcan
gets better and better.

00:20:42.540 --> 00:20:45.450
And so with 19.1,
actually by default,

00:20:45.450 --> 00:20:47.330
when you create a
new project it's

00:20:47.330 --> 00:20:50.840
going to be Vulcan, the primary
graphic API that is selected.

00:20:50.840 --> 00:20:55.260
And, of course, you can decide
to choose something different.

00:20:55.260 --> 00:20:57.080
But we truly believe
that Vulcan is

00:20:57.080 --> 00:21:00.620
at the stage where
it is seriously

00:21:00.620 --> 00:21:06.080
a good solution, especially
for the latest devices.

00:21:06.080 --> 00:21:08.540
I wanted to mention
also a feature that is

00:21:08.540 --> 00:21:11.110
called optimized frame pacing.

00:21:11.110 --> 00:21:12.530
And that's a feature
that actually

00:21:12.530 --> 00:21:14.810
has been developed
by Google that we've

00:21:14.810 --> 00:21:16.670
integrated inside Unity.

00:21:16.670 --> 00:21:21.050
So what it does, basically, it
provides a better orchestration

00:21:21.050 --> 00:21:23.330
of the distribution
of the frames

00:21:23.330 --> 00:21:26.510
during the cycle of generating
the frames for the game.

00:21:26.510 --> 00:21:29.870
And Android is a pretty
complex operating system

00:21:29.870 --> 00:21:35.060
and this feature makes your game
frame rate even more smooth.

00:21:35.060 --> 00:21:37.760
And so that's for
me the opportunity

00:21:37.760 --> 00:21:42.830
to highlight the partnership
that Unity and Google have

00:21:42.830 --> 00:21:45.400
been having for four years now.

00:21:45.400 --> 00:21:47.750
And, really, we
work super closely

00:21:47.750 --> 00:21:50.600
to make sure Unity
works well on Android.

00:21:50.600 --> 00:21:56.870
But also Google is listening
to us game engine creators

00:21:56.870 --> 00:21:59.310
with the input we can
give to their team,

00:21:59.310 --> 00:22:01.620
so Android gets
better over time.

00:22:01.620 --> 00:22:04.160
So it's really a
rich collaboration,

00:22:04.160 --> 00:22:06.380
a rich discussion,
and hopefully you'll

00:22:06.380 --> 00:22:08.970
get the benefits as
game creators of all

00:22:08.970 --> 00:22:12.800
those collaborations.

00:22:12.800 --> 00:22:15.680
And I wanted to finish
on Shader Graph.

00:22:15.680 --> 00:22:18.650
So you mentioned you
like to write shaders,

00:22:18.650 --> 00:22:21.860
I hate-- actually, no,
I can't write a shader.

00:22:21.860 --> 00:22:22.760
I can't, I'm sorry.

00:22:22.760 --> 00:22:27.830
I used to be a developer, but
shaders is out of my league

00:22:27.830 --> 00:22:28.860
for many reasons.

00:22:28.860 --> 00:22:31.580
First of all, it's
pretty advanced math

00:22:31.580 --> 00:22:33.680
and you have to
have the capability

00:22:33.680 --> 00:22:36.310
of seeing the
pixels on the screen

00:22:36.310 --> 00:22:38.910
and translating that
vision into code and math.

00:22:38.910 --> 00:22:40.470
This is really hard.

00:22:40.470 --> 00:22:43.310
Some people can do
it, most cannot.

00:22:43.310 --> 00:22:46.280
And of course, from a
productivity standpoint writing

00:22:46.280 --> 00:22:49.700
a shader by hand is not
the most productive.

00:22:49.700 --> 00:22:53.430
So we have created this
new tool, Shader Graph,

00:22:53.430 --> 00:22:57.200
which is out of preview
with the 19.1, that really

00:22:57.200 --> 00:23:01.510
enables any artist to combine
using a node graph based

00:23:01.510 --> 00:23:02.750
system.

00:23:02.750 --> 00:23:06.930
A bunch of steps and it's a big
tool box with a lot of options,

00:23:06.930 --> 00:23:09.330
but it's really
super easy to use.

00:23:09.330 --> 00:23:10.190
You can unlock them.

00:23:10.190 --> 00:23:11.490
That's from the screenshot.

00:23:11.490 --> 00:23:15.200
You can take a model and put it
as the output the end result,

00:23:15.200 --> 00:23:17.150
and then you combine
all the different nodes

00:23:17.150 --> 00:23:19.570
to create the effect
that you want.

00:23:19.570 --> 00:23:23.040
And in 19.1, we've
added one feature,

00:23:23.040 --> 00:23:25.090
which is nestable graphs.

00:23:25.090 --> 00:23:27.710
So if we end up
having a giant graph,

00:23:27.710 --> 00:23:30.620
then you can actually
create subsections,

00:23:30.620 --> 00:23:33.380
make them a subgraph, and
then just connect them

00:23:33.380 --> 00:23:34.820
with the rest of
your graph, which

00:23:34.820 --> 00:23:40.220
makes it much more readable and
also makes some parts reusable.

00:23:40.220 --> 00:23:43.880
In 19.2, we are introducing
the half precision toggle.

00:23:43.880 --> 00:23:45.830
For example, in
this scenario, where

00:23:45.830 --> 00:23:47.510
you're planning to
make a game that

00:23:47.510 --> 00:23:51.680
will work not only on mobile,
but also on PC and console,

00:23:51.680 --> 00:23:53.660
you actually won't
have precision shaders

00:23:53.660 --> 00:23:57.920
on mobile and then full
precision on bigger platforms.

00:23:57.920 --> 00:24:01.070
But writing shader graphic
in a switch of a toggle

00:24:01.070 --> 00:24:04.100
so we can see the effect
of changing the precision

00:24:04.100 --> 00:24:05.330
level on your shader.

00:24:05.330 --> 00:24:07.910
So visually you get
the result to see

00:24:07.910 --> 00:24:10.220
if changing that
precision is not

00:24:10.220 --> 00:24:12.470
going to create any trouble.

00:24:12.470 --> 00:24:14.930
And much more is coming.

00:24:14.930 --> 00:24:18.020
At the end of the slide,
we have a little video

00:24:18.020 --> 00:24:21.860
with a series of cool
games made with Unity.

00:24:21.860 --> 00:24:24.620
But with that,
take it away, Ben.

00:24:31.195 --> 00:24:32.070
BEN GABLE: All right.

00:24:32.070 --> 00:24:33.286
Thanks, JC.

00:24:33.286 --> 00:24:34.440
Hello, everyone.

00:24:34.440 --> 00:24:37.650
My name is Ben Gable, I am
a developer advocate here

00:24:37.650 --> 00:24:39.630
at Google and game developer.

00:24:39.630 --> 00:24:41.520
I work with game
developers every day

00:24:41.520 --> 00:24:43.860
to help them make
awesome games on Android

00:24:43.860 --> 00:24:46.830
and I'm here today to talk a
little bit about Android app

00:24:46.830 --> 00:24:47.400
bundles.

00:24:47.400 --> 00:24:49.800
And specifically for
Unity developers,

00:24:49.800 --> 00:24:52.470
how you can utilize
this awesome tool

00:24:52.470 --> 00:24:54.390
and how you should
totally be using it

00:24:54.390 --> 00:24:56.050
on your production games.

00:24:56.050 --> 00:24:58.800
So to start off, I want to kind
of get a quick show of hands.

00:24:58.800 --> 00:25:03.080
How many of you are familiar
with Android app bundles?

00:25:03.080 --> 00:25:03.580
OK.

00:25:03.580 --> 00:25:04.300
That's a good number.

00:25:04.300 --> 00:25:06.250
And of those people that
are familiar with it,

00:25:06.250 --> 00:25:08.860
how many are actually using
Android app bundles instead

00:25:08.860 --> 00:25:10.810
of an APK?

00:25:10.810 --> 00:25:11.390
OK.

00:25:11.390 --> 00:25:12.890
There's a lot less
that time around.

00:25:12.890 --> 00:25:14.820
So hopefully at the
end of this talk,

00:25:14.820 --> 00:25:17.540
there's a lot more hands that
will go up in the near future.

00:25:17.540 --> 00:25:19.790
So what is an
Android app bundle?

00:25:19.790 --> 00:25:22.780
So Android app bundles
are an awesome tool

00:25:22.780 --> 00:25:26.320
that save you from having
to manage multiple APKs

00:25:26.320 --> 00:25:30.760
or from having to put all
of your stuff into one APK

00:25:30.760 --> 00:25:33.010
and keep it under some
kind of size limit

00:25:33.010 --> 00:25:35.830
to support all these different
device configurations.

00:25:35.830 --> 00:25:39.760
So, for example, you either
have to have multiple APKs, one

00:25:39.760 --> 00:25:43.960
for the different architectures
that are out there, x86, arm,

00:25:43.960 --> 00:25:46.330
you might have multiplied
because for high resolution

00:25:46.330 --> 00:25:49.302
assets, or an API gave
for low resolution assets,

00:25:49.302 --> 00:25:51.010
or you're trying to
fit all that together

00:25:51.010 --> 00:25:54.880
into one universal APK
that fits all devices.

00:25:54.880 --> 00:25:57.010
And so what app
bundles let you do

00:25:57.010 --> 00:26:00.910
is instead of building
these multiple APKs

00:26:00.910 --> 00:26:03.160
or splitting it
all into one, you

00:26:03.160 --> 00:26:05.380
build an app bundle
which has everything

00:26:05.380 --> 00:26:07.300
needed for your
game to run across

00:26:07.300 --> 00:26:09.320
all these different devices.

00:26:09.320 --> 00:26:12.100
And then, instead of uploading
an APK to Google Play,

00:26:12.100 --> 00:26:14.325
you just upload the app bundle.

00:26:14.325 --> 00:26:16.450
And what Google Play is
going to do on the back end

00:26:16.450 --> 00:26:18.610
is basically take
your app bundle

00:26:18.610 --> 00:26:21.850
and it's going to generate
and sign and distribute

00:26:21.850 --> 00:26:25.540
an optimized APK
specifically for the device

00:26:25.540 --> 00:26:27.427
that somebody is playing on.

00:26:27.427 --> 00:26:29.260
So, for example, if
somebody is coming along

00:26:29.260 --> 00:26:32.230
and they want to download
your game on an x86 device,

00:26:32.230 --> 00:26:35.020
they're only going to
get the x86 versions

00:26:35.020 --> 00:26:38.060
of your native libraries and
they won't get the arm versions

00:26:38.060 --> 00:26:38.560
there.

00:26:38.560 --> 00:26:43.390
So it saves a lot of space
on the users' end as well.

00:26:43.390 --> 00:26:45.610
And another cool
aspect of Android

00:26:45.610 --> 00:26:49.420
app bundles is that right now
on the app store on Google Play,

00:26:49.420 --> 00:26:54.730
if you upload an APK, you have
to keep it under 100 megabytes

00:26:54.730 --> 00:26:55.600
unless--

00:26:55.600 --> 00:26:57.400
if you're over
100 megabytes, you

00:26:57.400 --> 00:27:00.490
have to use expansion files.

00:27:00.490 --> 00:27:02.830
With app bundles, we've
increased that limit

00:27:02.830 --> 00:27:05.000
to 150 megabytes.

00:27:05.000 --> 00:27:07.510
So there's a lot of
benefits using app bundles.

00:27:07.510 --> 00:27:13.575
And I'm here to specifically how
easy it is in Unity to do this

00:27:13.575 --> 00:27:15.200
and why you should
be totally using it.

00:27:15.200 --> 00:27:18.850
So the idea behind app bundles
is all of these benefits

00:27:18.850 --> 00:27:20.410
and saving you the
hassle of managing

00:27:20.410 --> 00:27:23.720
all these multiple APKs
with none of the overhead.

00:27:23.720 --> 00:27:27.490
So if you're using
Unity 2018.3 and above,

00:27:27.490 --> 00:27:30.010
app bundles are super
simple to build.

00:27:30.010 --> 00:27:31.360
I'll show you in a second.

00:27:31.360 --> 00:27:34.630
Or if you're potentially
exporting to Android Studio,

00:27:34.630 --> 00:27:37.390
if using Android studio 3.2
and above, it's just the

00:27:37.390 --> 00:27:42.650
build option to build an app
bundle instead of an APK.

00:27:42.650 --> 00:27:45.170
So in Unity out of the box,
what you're going to get,

00:27:45.170 --> 00:27:47.750
as I mentioned before, is
when you build an Android app

00:27:47.750 --> 00:27:50.180
bundle, Unity is
going to generate it

00:27:50.180 --> 00:27:53.600
and it's going to allow
you to basically provide

00:27:53.600 --> 00:27:57.550
optimized builds for
different native library

00:27:57.550 --> 00:27:59.360
and running on
different architectures.

00:27:59.360 --> 00:28:02.660
So you're going to get 64
and 32-bit arm support,

00:28:02.660 --> 00:28:05.570
as well as x86 native
library support.

00:28:05.570 --> 00:28:07.550
Now, you can also
if you've set up

00:28:07.550 --> 00:28:09.920
your game to have your
localization files in kind

00:28:09.920 --> 00:28:13.880
of the standard layout, you
can use a post-build process

00:28:13.880 --> 00:28:16.760
to also build those files
into your app bundle,

00:28:16.760 --> 00:28:18.830
such that if somebody
is playing in Spanish,

00:28:18.830 --> 00:28:21.170
they'll only get the Spanish
localization files and vice

00:28:21.170 --> 00:28:22.040
versa.

00:28:22.040 --> 00:28:24.230
That's not supported out
of the box yet in Unity,

00:28:24.230 --> 00:28:27.910
but it's easy to
do after the fact.

00:28:27.910 --> 00:28:30.190
So, as I said, in Unity
it's super simple.

00:28:30.190 --> 00:28:33.180
You just-- in you Build
Settings, you just

00:28:33.180 --> 00:28:35.850
click that box right
there, Build an App Bundle,

00:28:35.850 --> 00:28:38.090
Unity is going to
generate the app bundle

00:28:38.090 --> 00:28:40.380
and you can upload that
directly to Google Play

00:28:40.380 --> 00:28:43.840
with no extra work
required on your end.

00:28:43.840 --> 00:28:46.480
If you click Build and Run,
what Unity is going to do

00:28:46.480 --> 00:28:48.340
is it's going to
generate that app bundle,

00:28:48.340 --> 00:28:51.130
and then it's going to generate
a temporary APK that you

00:28:51.130 --> 00:28:53.770
can test locally on your
machine or with a device that's

00:28:53.770 --> 00:28:54.610
attached.

00:28:54.610 --> 00:28:57.703
So, again, you're not losing
that fast iteration process,

00:28:57.703 --> 00:28:58.870
it all just magically works.

00:29:01.450 --> 00:29:03.250
Now, I kind of
mentioned something

00:29:03.250 --> 00:29:05.590
about the size limit
increasing from 100 megabytes

00:29:05.590 --> 00:29:06.910
to 150 megabytes.

00:29:06.910 --> 00:29:09.170
And Unity actually
goes above and beyond

00:29:09.170 --> 00:29:12.250
and gives you a really
awesome size warning tool.

00:29:12.250 --> 00:29:15.160
So what you can do is you
go into Player Settings,

00:29:15.160 --> 00:29:19.210
and you can enable
this size notification.

00:29:19.210 --> 00:29:21.340
And what Unity is
going to do is,

00:29:21.340 --> 00:29:23.890
if it detects your
app bundle is going

00:29:23.890 --> 00:29:26.650
to be over a certain
threshold that you define,

00:29:26.650 --> 00:29:30.160
it's going to warn you and it
suggests to basically generate

00:29:30.160 --> 00:29:32.110
an APK from that app bundle.

00:29:32.110 --> 00:29:36.130
And you can be able to view what
the size of that compressed APK

00:29:36.130 --> 00:29:38.290
is generated from
the app bundle.

00:29:38.290 --> 00:29:40.090
So it's a really
great tool to of keep

00:29:40.090 --> 00:29:43.090
you aware of any size limits
you might be going over

00:29:43.090 --> 00:29:45.740
for your game.

00:29:45.740 --> 00:29:47.570
Now, another great
tool with app bundles

00:29:47.570 --> 00:29:50.660
is once you upload the
app bundle to Google Play,

00:29:50.660 --> 00:29:53.780
inside of your Play Console
there's a new section called

00:29:53.780 --> 00:29:55.550
the App Bundle Explorer.

00:29:55.550 --> 00:29:58.130
And so you can see here this
screenshot is of an app bundle

00:29:58.130 --> 00:30:00.345
that I uploaded and I'm
taking a look at it.

00:30:00.345 --> 00:30:02.720
And it shows you a lot of
information about what your app

00:30:02.720 --> 00:30:05.390
bundle is currently
configured and things

00:30:05.390 --> 00:30:07.670
like the amount of
size you're saving

00:30:07.670 --> 00:30:11.600
using app bundles compared to
if you just uploaded an APK.

00:30:11.600 --> 00:30:14.500
And you can see here it's going
to show all the different APK

00:30:14.500 --> 00:30:17.750
configurations that this app
bundle is set up to generate.

00:30:17.750 --> 00:30:19.430
So here I basically
set it up such

00:30:19.430 --> 00:30:22.610
that the app bundle will be
able to generate APKs based

00:30:22.610 --> 00:30:24.120
on different screen densities.

00:30:24.120 --> 00:30:27.770
So, again, if somebody downloads
the game on a high density

00:30:27.770 --> 00:30:30.532
screen, they're only going to
get the high resolution assets

00:30:30.532 --> 00:30:31.240
and nothing else.

00:30:34.230 --> 00:30:37.130
Now, as you've seen,
it's really easy in Unity

00:30:37.130 --> 00:30:41.078
to build app bundles if you
have a custom build pipeline

00:30:41.078 --> 00:30:42.620
or something, it's
also really simple

00:30:42.620 --> 00:30:45.897
to use Griddle to build
an app on it as well.

00:30:45.897 --> 00:30:48.230
However, there is another
tool called Bundle Tool, which

00:30:48.230 --> 00:30:50.270
is an amazing product
you should check out,

00:30:50.270 --> 00:30:52.790
so it's available on
GitHub or it's actually

00:30:52.790 --> 00:30:55.760
comes with your Unity
editor installation.

00:30:55.760 --> 00:30:57.980
And what bundle
tool lets you do is

00:30:57.980 --> 00:30:59.480
you can use it from
the command line

00:30:59.480 --> 00:31:03.650
in your custom build scripts and
you can generate an app bundle.

00:31:03.650 --> 00:31:06.080
And then, additionally, what
you can do with bundle tool

00:31:06.080 --> 00:31:09.230
is you can use it
to generate APKs

00:31:09.230 --> 00:31:12.620
from that app bundle for
specific device configurations

00:31:12.620 --> 00:31:14.300
that you might want to test on.

00:31:14.300 --> 00:31:16.670
So you could generate
APKs from your app bundle

00:31:16.670 --> 00:31:20.030
to send your QA team, to your
automated testing solutions,

00:31:20.030 --> 00:31:21.740
so it makes it really,
really easy to,

00:31:21.740 --> 00:31:24.650
again, get all the benefits
of using app bundles

00:31:24.650 --> 00:31:26.360
while at the same
time not increasing

00:31:26.360 --> 00:31:29.150
your overhead of having to
generate both app bundles

00:31:29.150 --> 00:31:30.720
and APKs for testing.

00:31:30.720 --> 00:31:32.780
So it's really simple.

00:31:32.780 --> 00:31:36.230
And another really
tool to use with bundle

00:31:36.230 --> 00:31:39.740
tool is that if you happen to
be distributing in a region

00:31:39.740 --> 00:31:41.660
where the Google Play
Store is not available

00:31:41.660 --> 00:31:44.450
or if you're distributing on
a store that does not support

00:31:44.450 --> 00:31:48.500
app bundles, bundle tool, you
can add one extra step to also

00:31:48.500 --> 00:31:51.440
generate a universal
APK from the app bundle

00:31:51.440 --> 00:31:53.330
you've generated such
that you can then

00:31:53.330 --> 00:31:56.090
use that APK on the stores
where the app bundles are not

00:31:56.090 --> 00:31:57.000
supported.

00:31:57.000 --> 00:31:59.922
So, again, super easy to do
and not a lot of overhead

00:31:59.922 --> 00:32:00.755
to get the benefits.

00:32:03.350 --> 00:32:06.050
So that's my little bit
on Android app bundles.

00:32:06.050 --> 00:32:07.943
I hope you guys take a look.

00:32:07.943 --> 00:32:10.360
There's a lot more information
on the Unity documentation,

00:32:10.360 --> 00:32:13.310
as well as the Android
Developer documentation.

00:32:13.310 --> 00:32:15.010
So now going to hand
it back off to Fran

00:32:15.010 --> 00:32:16.870
to finish off with
some of the plugins

00:32:16.870 --> 00:32:20.080
that we've built for Unity,
for Google Play Feature Store

00:32:20.080 --> 00:32:20.854
Sport.

00:32:20.854 --> 00:32:21.354
Thanks.

00:32:24.560 --> 00:32:28.500
FRANCESCO CARUCCI: And some
of the plugins are, what?

00:32:28.500 --> 00:32:30.610
Play instant.

00:32:30.610 --> 00:32:34.270
We talked at length just before
this talk about play instant,

00:32:34.270 --> 00:32:36.430
so I'm not going to
go through it anymore.

00:32:36.430 --> 00:32:38.970
In a nutshell
it's, if you create

00:32:38.970 --> 00:32:43.090
a game that is less than 10
megabytes of the [INAUDIBLE]

00:32:43.090 --> 00:32:47.320
you have you can run
it very, very fast

00:32:47.320 --> 00:32:51.460
and basically run it
straight off a URL, which

00:32:51.460 --> 00:32:53.710
is also a great experience.

00:32:53.710 --> 00:32:58.360
To do it in Unity, we provide
the Play Instant plugin,

00:32:58.360 --> 00:33:02.320
which basically is as
simple as the screen,

00:33:02.320 --> 00:33:07.250
you say you want to generate
an instant build out

00:33:07.250 --> 00:33:11.040
of your big Unity
game, and off it goes.

00:33:11.040 --> 00:33:15.000
It does everything
that you normally

00:33:15.000 --> 00:33:17.820
would have done manually, to
generate an APK that you can

00:33:17.820 --> 00:33:21.300
upload straight into
the Google Play Instant

00:33:21.300 --> 00:33:24.360
track on Google Play.

00:33:24.360 --> 00:33:28.950
Google Play Instant was my first
job at Google two years ago.

00:33:28.950 --> 00:33:31.320
I'm pretty new, still.

00:33:31.320 --> 00:33:38.820
And I work with my
very good friends here,

00:33:38.820 --> 00:33:44.200
they are here on this game,
Panda Pop from Jam City.

00:33:44.200 --> 00:33:46.390
This is a hilarious story here.

00:33:46.390 --> 00:33:50.320
It was my first
job here at Google.

00:33:50.320 --> 00:33:54.220
I was having a meeting
with Vanessa from Jam City.

00:33:54.220 --> 00:33:57.000
And then I went back home
and my kid was playing,

00:33:57.000 --> 00:34:03.047
he's 3-year-old, Panda Pop,
talk about bringing work home.

00:34:03.047 --> 00:34:05.380
So I took a photo of him
playing with Panda Pop, sent it

00:34:05.380 --> 00:34:08.199
to Vanessa, she's like,
oh, my god, that's so cute.

00:34:08.199 --> 00:34:10.960
She sent him a plush
toy with a panda.

00:34:10.960 --> 00:34:13.909
My kid still use
it to go to sleep.

00:34:13.909 --> 00:34:17.199
And then he sends back
to Vanessa a video.

00:34:17.199 --> 00:34:18.650
Thank you.

00:34:18.650 --> 00:34:21.550
And then, now my kid
is five years old

00:34:21.550 --> 00:34:26.620
and he's having regular business
breakfast with Jam City.

00:34:26.620 --> 00:34:29.000
It's like he's fast tracked
into the game industry.

00:34:29.000 --> 00:34:31.000
I hope he doesn't follow me.

00:34:31.000 --> 00:34:34.190
But making this
game as a Unity game

00:34:34.190 --> 00:34:38.060
was pretty straightforward,
even if it was literally

00:34:38.060 --> 00:34:42.570
the first ever Unity game
to be released in Instant.

00:34:42.570 --> 00:34:44.592
And that was a great experience.

00:34:47.370 --> 00:34:49.429
Now we're going to show
you a bunch of games--

00:34:49.429 --> 00:34:53.630
this video is about a minute, a
bunch of games made with Unity.

00:34:53.630 --> 00:34:59.413
I worked with at least
one of the games here.

00:34:59.413 --> 00:35:00.330
And there's the video.

00:35:04.830 --> 00:35:08.330
[MUSIC PLAYING]

00:36:16.367 --> 00:36:18.640
Cool.

00:36:18.640 --> 00:36:19.140
That's it.

00:36:19.140 --> 00:36:21.310
We're done.

00:36:21.310 --> 00:36:23.210
Thank you.

00:36:23.210 --> 00:36:26.260
[LOGO MUSIC]

