WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Here is my solution for anagrams().

00:00:02.000 --> 00:00:06.000
I chose to write a helper function called find_anagrams().

00:00:06.000 --> 00:00:12.000
That takes the letters in the phrase with all the spaces removed.

00:00:12.000 --> 00:00:16.000
I'm calling find_anagrams() with the spaces replaces by nothing,

00:00:16.000 --> 00:00:19.000
so we get rid of the spaces in the original phrase,

00:00:19.000 --> 00:00:24.000
and then I want to make sure that the anagrams I find--the words are in alphabetical order.

00:00:24.000 --> 00:00:28.000
The way I'm going to do that is by passing into find_anagrams() the previous word

00:00:28.000 --> 00:00:30.000
on every recursive call.

00:00:30.000 --> 00:00:34.000
For the first call, we can just say the previous word was the empty string.

00:00:34.000 --> 00:00:38.000
Then I find I have to also pass in the shortest allowable word we're looking for.

00:00:38.000 --> 00:00:40.000
So what does find_anagrams() do?

00:00:40.000 --> 00:00:43.000
It's got the same kind of structure that we say before.

00:00:43.000 --> 00:00:46.000
We initialize an empty set. At the end we're going to return it.

00:00:46.000 --> 00:00:50.000
Then we use the previously defined find_words function.

00:00:50.000 --> 00:00:54.000
Remember for Scrabble, we take any letters in our hand and find all the possible words.

00:00:54.000 --> 00:00:57.000
Let's do that. For the words that come back, are they long enough?

00:00:57.000 --> 00:01:01.000
Are they greater than what were allowed for shortest,

00:01:01.000 --> 00:01:04.000
and are they in alphabetical order? Are they greater than the previous word?

00:01:04.000 --> 00:01:08.000
If so, then use the previously defined removed function to tell me what

00:01:08.000 --> 00:01:11.000
the remaining letters are.

00:01:11.000 --> 00:01:16.000
If there is no remainder, then let's just add that word into the results and we're done.

00:01:16.000 --> 00:01:21.000
Otherwise, let's recursively call find_anagrams() with the remainder

00:01:21.000 --> 00:01:25.000
and then add in that result with a space in between them.

00:01:25.000 --> 99:59:59.999
This is how we're finding anagrams that are longer than just one word long.

