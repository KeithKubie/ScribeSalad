WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.210
[Music]

00:00:07.210 --> 00:00:07.220
 

00:00:07.220 --> 00:00:09.440
it's great to see so many people here

00:00:09.440 --> 00:00:09.450
it's great to see so many people here
 

00:00:09.450 --> 00:00:12.709
it's great to see so many people here
interested in testing my name is

00:00:12.709 --> 00:00:12.719
interested in testing my name is
 

00:00:12.719 --> 00:00:14.450
interested in testing my name is
jonathan garish and together with my

00:00:14.450 --> 00:00:14.460
jonathan garish and together with my
 

00:00:14.460 --> 00:00:16.099
jonathan garish and together with my
colleague Yuki Hamada we're going to be

00:00:16.099 --> 00:00:16.109
colleague Yuki Hamada we're going to be
 

00:00:16.109 --> 00:00:18.980
colleague Yuki Hamada we're going to be
presenting a session on testing api's

00:00:18.980 --> 00:00:18.990
presenting a session on testing api's
 

00:00:18.990 --> 00:00:23.150
presenting a session on testing api's
today so just to get started just hands

00:00:23.150 --> 00:00:23.160
today so just to get started just hands
 

00:00:23.160 --> 00:00:26.150
today so just to get started just hands
up anyone who's written unit tests it's

00:00:26.150 --> 00:00:26.160
up anyone who's written unit tests it's
 

00:00:26.160 --> 00:00:27.380
up anyone who's written unit tests it's
not a trick question

00:00:27.380 --> 00:00:27.390
not a trick question
 

00:00:27.390 --> 00:00:30.950
not a trick question
good and what about integration tests

00:00:30.950 --> 00:00:30.960
good and what about integration tests
 

00:00:30.960 --> 00:00:34.270
good and what about integration tests
you can be honest awesome

00:00:34.270 --> 00:00:34.280
you can be honest awesome
 

00:00:34.280 --> 00:00:39.680
you can be honest awesome
ok let's get started so on Android

00:00:39.680 --> 00:00:39.690
ok let's get started so on Android
 

00:00:39.690 --> 00:00:41.690
ok let's get started so on Android
there's two kinds of tests you might be

00:00:41.690 --> 00:00:41.700
there's two kinds of tests you might be
 

00:00:41.700 --> 00:00:44.810
there's two kinds of tests you might be
familiar with there's local unit tests

00:00:44.810 --> 00:00:44.820
familiar with there's local unit tests
 

00:00:44.820 --> 00:00:47.000
familiar with there's local unit tests
and then there's instrumentation tests

00:00:47.000 --> 00:00:47.010
and then there's instrumentation tests
 

00:00:47.010 --> 00:00:50.779
and then there's instrumentation tests
so let's start by looking at local unit

00:00:50.779 --> 00:00:50.789
so let's start by looking at local unit
 

00:00:50.789 --> 00:00:54.049
so let's start by looking at local unit
tests so these are ones that these are

00:00:54.049 --> 00:00:54.059
tests so these are ones that these are
 

00:00:54.059 --> 00:00:55.819
tests so these are ones that these are
tests that are executed on your local

00:00:55.819 --> 00:00:55.829
tests that are executed on your local
 

00:00:55.829 --> 00:00:57.830
tests that are executed on your local
developers workstation on the local VM

00:00:57.830 --> 00:00:57.840
developers workstation on the local VM
 

00:00:57.840 --> 00:01:00.439
developers workstation on the local VM
running there and because they you don't

00:01:00.439 --> 00:01:00.449
running there and because they you don't
 

00:01:00.449 --> 00:01:02.420
running there and because they you don't
need to run the entire Android build

00:01:02.420 --> 00:01:02.430
need to run the entire Android build
 

00:01:02.430 --> 00:01:05.299
need to run the entire Android build
chain your void external and installing

00:01:05.299 --> 00:01:05.309
chain your void external and installing
 

00:01:05.309 --> 00:01:07.340
chain your void external and installing
on a device these tests are actually

00:01:07.340 --> 00:01:07.350
on a device these tests are actually
 

00:01:07.350 --> 00:01:10.520
on a device these tests are actually
really really fast

00:01:10.520 --> 00:01:10.530
really really fast
 

00:01:10.530 --> 00:01:12.410
on these kind of tests you can use a

00:01:12.410 --> 00:01:12.420
on these kind of tests you can use a
 

00:01:12.420 --> 00:01:14.750
on these kind of tests you can use a
tool like robolectric which comes with

00:01:14.750 --> 00:01:14.760
tool like robolectric which comes with
 

00:01:14.760 --> 00:01:17.600
tool like robolectric which comes with
its own set of testing api's for setting

00:01:17.600 --> 00:01:17.610
its own set of testing api's for setting
 

00:01:17.610 --> 00:01:19.460
its own set of testing api's for setting
up the state of your android environment

00:01:19.460 --> 00:01:19.470
up the state of your android environment
 

00:01:19.470 --> 00:01:21.770
up the state of your android environment
or you can use a tool like Marketo and

00:01:21.770 --> 00:01:21.780
or you can use a tool like Marketo and
 

00:01:21.780 --> 00:01:24.469
or you can use a tool like Marketo and
you can stub out the interactions with

00:01:24.469 --> 00:01:24.479
you can stub out the interactions with
 

00:01:24.479 --> 00:01:27.289
you can stub out the interactions with
the android framework and either way

00:01:27.289 --> 00:01:27.299
the android framework and either way
 

00:01:27.299 --> 00:01:32.330
the android framework and either way
they allow you to write tests setting up

00:01:32.330 --> 00:01:32.340
they allow you to write tests setting up
 

00:01:32.340 --> 00:01:33.910
they allow you to write tests setting up
the state of the environment that

00:01:33.910 --> 00:01:33.920
the state of the environment that
 

00:01:33.920 --> 00:01:36.499
the state of the environment that
satisfy the preconditions that you might

00:01:36.499 --> 00:01:36.509
satisfy the preconditions that you might
 

00:01:36.509 --> 00:01:40.880
satisfy the preconditions that you might
want in your test case the second kind

00:01:40.880 --> 00:01:40.890
want in your test case the second kind
 

00:01:40.890 --> 00:01:43.940
want in your test case the second kind
of tests are instrumentation tests now

00:01:43.940 --> 00:01:43.950
of tests are instrumentation tests now
 

00:01:43.950 --> 00:01:46.819
of tests are instrumentation tests now
these are the tests that will run on a

00:01:46.819 --> 00:01:46.829
these are the tests that will run on a
 

00:01:46.829 --> 00:01:49.670
these are the tests that will run on a
virtual or a real device a real device

00:01:49.670 --> 00:01:49.680
virtual or a real device a real device
 

00:01:49.680 --> 00:01:51.200
virtual or a real device a real device
could just be a phone connected to your

00:01:51.200 --> 00:01:51.210
could just be a phone connected to your
 

00:01:51.210 --> 00:01:53.929
could just be a phone connected to your
workstation or it could be a farm of

00:01:53.929 --> 00:01:53.939
workstation or it could be a farm of
 

00:01:53.939 --> 00:01:57.620
workstation or it could be a farm of
devices somewhere in the cloud these

00:01:57.620 --> 00:01:57.630
devices somewhere in the cloud these
 

00:01:57.630 --> 00:01:59.840
devices somewhere in the cloud these
kind of tests run slower because you

00:01:59.840 --> 00:01:59.850
kind of tests run slower because you
 

00:01:59.850 --> 00:02:01.880
kind of tests run slower because you
have to execute the whole build chain

00:02:01.880 --> 00:02:01.890
have to execute the whole build chain
 

00:02:01.890 --> 00:02:03.859
have to execute the whole build chain
and install an application onto the

00:02:03.859 --> 00:02:03.869
and install an application onto the
 

00:02:03.869 --> 00:02:07.160
and install an application onto the
device but they have the advantage of

00:02:07.160 --> 00:02:07.170
device but they have the advantage of
 

00:02:07.170 --> 00:02:09.859
device but they have the advantage of
being a lot more accurate because the

00:02:09.859 --> 00:02:09.869
being a lot more accurate because the
 

00:02:09.869 --> 00:02:13.230
being a lot more accurate because the
real or virtual device is a very similar

00:02:13.230 --> 00:02:13.240
real or virtual device is a very similar
 

00:02:13.240 --> 00:02:15.690
real or virtual device is a very similar
some cases identical to devices that

00:02:15.690 --> 00:02:15.700
some cases identical to devices that
 

00:02:15.700 --> 00:02:17.250
some cases identical to devices that
your users will be using out in the

00:02:17.250 --> 00:02:17.260
your users will be using out in the
 

00:02:17.260 --> 00:02:19.170
your users will be using out in the
field and this brings you the confidence

00:02:19.170 --> 00:02:19.180
field and this brings you the confidence
 

00:02:19.180 --> 00:02:21.360
field and this brings you the confidence
that your app is going to behave as you

00:02:21.360 --> 00:02:21.370
that your app is going to behave as you
 

00:02:21.370 --> 00:02:25.440
that your app is going to behave as you
expect one criticism we have heard is

00:02:25.440 --> 00:02:25.450
expect one criticism we have heard is
 

00:02:25.450 --> 00:02:27.510
expect one criticism we have heard is
that these kind of tests there's

00:02:27.510 --> 00:02:27.520
that these kind of tests there's
 

00:02:27.520 --> 00:02:29.070
that these kind of tests there's
actually a lack of testing API is

00:02:29.070 --> 00:02:29.080
actually a lack of testing API is
 

00:02:29.080 --> 00:02:31.560
actually a lack of testing API is
available which makes it difficult for

00:02:31.560 --> 00:02:31.570
available which makes it difficult for
 

00:02:31.570 --> 00:02:33.120
available which makes it difficult for
you to set up the state of your

00:02:33.120 --> 00:02:33.130
you to set up the state of your
 

00:02:33.130 --> 00:02:35.490
you to set up the state of your
environment in a way that satisfies

00:02:35.490 --> 00:02:35.500
environment in a way that satisfies
 

00:02:35.500 --> 00:02:38.100
environment in a way that satisfies
certain preconditions or edge cases that

00:02:38.100 --> 00:02:38.110
certain preconditions or edge cases that
 

00:02:38.110 --> 00:02:40.020
certain preconditions or edge cases that
you might want to be testing and so

00:02:40.020 --> 00:02:40.030
you might want to be testing and so
 

00:02:40.030 --> 00:02:41.970
you might want to be testing and so
we've heard you loud and clear and this

00:02:41.970 --> 00:02:41.980
we've heard you loud and clear and this
 

00:02:41.980 --> 00:02:45.290
we've heard you loud and clear and this
is something we're actively working on

00:02:45.290 --> 00:02:45.300
is something we're actively working on
 

00:02:45.300 --> 00:02:49.370
is something we're actively working on
it's a bit of a little history lesson on

00:02:49.370 --> 00:02:49.380
it's a bit of a little history lesson on
 

00:02:49.380 --> 00:02:52.530
it's a bit of a little history lesson on
2017 at Google i/o we presented what we

00:02:52.530 --> 00:02:52.540
2017 at Google i/o we presented what we
 

00:02:52.540 --> 00:02:54.990
2017 at Google i/o we presented what we
call the Android testing story say based

00:02:54.990 --> 00:02:55.000
call the Android testing story say based
 

00:02:55.000 --> 00:02:56.310
call the Android testing story say based
loosely around like the software

00:02:56.310 --> 00:02:56.320
loosely around like the software
 

00:02:56.320 --> 00:03:01.620
loosely around like the software
development pyramid and in this model we

00:03:01.620 --> 00:03:01.630
development pyramid and in this model we
 

00:03:01.630 --> 00:03:03.630
development pyramid and in this model we
encourage you to write lots and lots of

00:03:03.630 --> 00:03:03.640
encourage you to write lots and lots of
 

00:03:03.640 --> 00:03:06.720
encourage you to write lots and lots of
fast scalable unit tests that test all

00:03:06.720 --> 00:03:06.730
fast scalable unit tests that test all
 

00:03:06.730 --> 00:03:10.320
fast scalable unit tests that test all
your exhaustive conditions we encourage

00:03:10.320 --> 00:03:10.330
your exhaustive conditions we encourage
 

00:03:10.330 --> 00:03:12.410
your exhaustive conditions we encourage
you to write a smaller number of

00:03:12.410 --> 00:03:12.420
you to write a smaller number of
 

00:03:12.420 --> 00:03:15.330
you to write a smaller number of
instrumentation tests that will actually

00:03:15.330 --> 00:03:15.340
instrumentation tests that will actually
 

00:03:15.340 --> 00:03:17.790
instrumentation tests that will actually
prove that all these units assemble

00:03:17.790 --> 00:03:17.800
prove that all these units assemble
 

00:03:17.800 --> 00:03:20.040
prove that all these units assemble
together behave as you would expect on a

00:03:20.040 --> 00:03:20.050
together behave as you would expect on a
 

00:03:20.050 --> 00:03:23.040
together behave as you would expect on a
real device and in some ways this was

00:03:23.040 --> 00:03:23.050
real device and in some ways this was
 

00:03:23.050 --> 00:03:25.500
real device and in some ways this was
kind of a compromise it was a compromise

00:03:25.500 --> 00:03:25.510
kind of a compromise it was a compromise
 

00:03:25.510 --> 00:03:30.600
kind of a compromise it was a compromise
between the advantages of one set of one

00:03:30.600 --> 00:03:30.610
between the advantages of one set of one
 

00:03:30.610 --> 00:03:32.640
between the advantages of one set of one
kind of test and the trade-offs of

00:03:32.640 --> 00:03:32.650
kind of test and the trade-offs of
 

00:03:32.650 --> 00:03:34.350
kind of test and the trade-offs of
another so it brings you a like a

00:03:34.350 --> 00:03:34.360
another so it brings you a like a
 

00:03:34.360 --> 00:03:40.890
another so it brings you a like a
holistic way of testing your app and we

00:03:40.890 --> 00:03:40.900
holistic way of testing your app and we
 

00:03:40.900 --> 00:03:44.640
holistic way of testing your app and we
showed how this kind of approach can

00:03:44.640 --> 00:03:44.650
showed how this kind of approach can
 

00:03:44.650 --> 00:03:47.840
showed how this kind of approach can
lead to test rim development on Android

00:03:47.840 --> 00:03:47.850
lead to test rim development on Android
 

00:03:47.850 --> 00:03:50.160
lead to test rim development on Android
first of all you would start with a

00:03:50.160 --> 00:03:50.170
first of all you would start with a
 

00:03:50.170 --> 00:03:52.110
first of all you would start with a
failing UI test this would be an

00:03:52.110 --> 00:03:52.120
failing UI test this would be an
 

00:03:52.120 --> 00:03:53.910
failing UI test this would be an
instrumentation task probably written

00:03:53.910 --> 00:03:53.920
instrumentation task probably written
 

00:03:53.920 --> 00:03:56.820
instrumentation task probably written
with espresso and it would test the UI

00:03:56.820 --> 00:03:56.830
with espresso and it would test the UI
 

00:03:56.830 --> 00:03:59.940
with espresso and it would test the UI
of your of your component your feature

00:03:59.940 --> 00:03:59.950
of your of your component your feature
 

00:03:59.950 --> 00:04:03.170
of your of your component your feature
and then you would satisfy that feature

00:04:03.170 --> 00:04:03.180
and then you would satisfy that feature
 

00:04:03.180 --> 00:04:07.620
and then you would satisfy that feature
by a series of units classes coming

00:04:07.620 --> 00:04:07.630
by a series of units classes coming
 

00:04:07.630 --> 00:04:10.440
by a series of units classes coming
together their interactions and you

00:04:10.440 --> 00:04:10.450
together their interactions and you
 

00:04:10.450 --> 00:04:13.640
together their interactions and you
could test drive these as well using a

00:04:13.640 --> 00:04:13.650
could test drive these as well using a
 

00:04:13.650 --> 00:04:17.910
could test drive these as well using a
tool like robolectric or mojito running

00:04:17.910 --> 00:04:17.920
tool like robolectric or mojito running
 

00:04:17.920 --> 00:04:21.030
tool like robolectric or mojito running
on as a local test and this gives you

00:04:21.030 --> 00:04:21.040
on as a local test and this gives you
 

00:04:21.040 --> 00:04:23.460
on as a local test and this gives you
very fast development cycles finally

00:04:23.460 --> 00:04:23.470
very fast development cycles finally
 

00:04:23.470 --> 00:04:25.860
very fast development cycles finally
when you bring them all together you're

00:04:25.860 --> 00:04:25.870
when you bring them all together you're
 

00:04:25.870 --> 00:04:27.000
when you bring them all together you're
able to run

00:04:27.000 --> 00:04:27.010
able to run
 

00:04:27.010 --> 00:04:29.690
able to run
slower running but more faithful

00:04:29.690 --> 00:04:29.700
slower running but more faithful
 

00:04:29.700 --> 00:04:32.730
slower running but more faithful
instrumentation test and hopefully it

00:04:32.730 --> 00:04:32.740
instrumentation test and hopefully it
 

00:04:32.740 --> 00:04:38.970
instrumentation test and hopefully it
goes green and you're done well we enter

00:04:38.970 --> 00:04:38.980
goes green and you're done well we enter
 

00:04:38.980 --> 00:04:40.890
goes green and you're done well we enter
a refactoring cycle because maybe you

00:04:40.890 --> 00:04:40.900
a refactoring cycle because maybe you
 

00:04:40.900 --> 00:04:42.780
a refactoring cycle because maybe you
your code leaves a little to be desired

00:04:42.780 --> 00:04:42.790
your code leaves a little to be desired
 

00:04:42.790 --> 00:04:45.480
your code leaves a little to be desired
and you want to do some cleanup and so

00:04:45.480 --> 00:04:45.490
and you want to do some cleanup and so
 

00:04:45.490 --> 00:04:47.910
and you want to do some cleanup and so
you can spend some refactoring cycles

00:04:47.910 --> 00:04:47.920
you can spend some refactoring cycles
 

00:04:47.920 --> 00:04:52.140
you can spend some refactoring cycles
there before coming around to the

00:04:52.140 --> 00:04:52.150
there before coming around to the
 

00:04:52.150 --> 00:04:55.320
there before coming around to the
beginning of the cycle where if you have

00:04:55.320 --> 00:04:55.330
beginning of the cycle where if you have
 

00:04:55.330 --> 00:04:56.670
beginning of the cycle where if you have
any more work on the feature you might

00:04:56.670 --> 00:04:56.680
any more work on the feature you might
 

00:04:56.680 --> 00:04:57.720
any more work on the feature you might
add another test

00:04:57.720 --> 00:04:57.730
add another test
 

00:04:57.730 --> 00:04:59.460
add another test
test another aspect to that feature and

00:04:59.460 --> 00:04:59.470
test another aspect to that feature and
 

00:04:59.470 --> 00:05:01.650
test another aspect to that feature and
you'll keep iterating until you complete

00:05:01.650 --> 00:05:01.660
you'll keep iterating until you complete
 

00:05:01.660 --> 00:05:03.990
you'll keep iterating until you complete
at which time you're good to submit your

00:05:03.990 --> 00:05:04.000
at which time you're good to submit your
 

00:05:04.000 --> 00:05:09.150
at which time you're good to submit your
code and move on to the next task so at

00:05:09.150 --> 00:05:09.160
code and move on to the next task so at
 

00:05:09.160 --> 00:05:11.820
code and move on to the next task so at
Google i/o this year we realized there

00:05:11.820 --> 00:05:11.830
Google i/o this year we realized there
 

00:05:11.830 --> 00:05:14.220
Google i/o this year we realized there
was a somewhat of a test writing crisis

00:05:14.220 --> 00:05:14.230
was a somewhat of a test writing crisis
 

00:05:14.230 --> 00:05:17.670
was a somewhat of a test writing crisis
and because there's so many tools

00:05:17.670 --> 00:05:17.680
and because there's so many tools
 

00:05:17.680 --> 00:05:19.620
and because there's so many tools
available it's not always clear which

00:05:19.620 --> 00:05:19.630
available it's not always clear which
 

00:05:19.630 --> 00:05:24.480
available it's not always clear which
one to use and each of these tools all

00:05:24.480 --> 00:05:24.490
one to use and each of these tools all
 

00:05:24.490 --> 00:05:26.250
one to use and each of these tools all
have their own different styles and

00:05:26.250 --> 00:05:26.260
have their own different styles and
 

00:05:26.260 --> 00:05:30.180
have their own different styles and
api's and paradigms for these same

00:05:30.180 --> 00:05:30.190
api's and paradigms for these same
 

00:05:30.190 --> 00:05:35.460
api's and paradigms for these same
concepts that exist on Android and the

00:05:35.460 --> 00:05:35.470
concepts that exist on Android and the
 

00:05:35.470 --> 00:05:38.550
concepts that exist on Android and the
problem with this is that tests written

00:05:38.550 --> 00:05:38.560
problem with this is that tests written
 

00:05:38.560 --> 00:05:40.500
problem with this is that tests written
in different levels are not portable

00:05:40.500 --> 00:05:40.510
in different levels are not portable
 

00:05:40.510 --> 00:05:44.510
in different levels are not portable
across levels your test is kind of stuck

00:05:44.510 --> 00:05:44.520
across levels your test is kind of stuck
 

00:05:44.520 --> 00:05:47.790
across levels your test is kind of stuck
it's coupled to the testing tool and

00:05:47.790 --> 00:05:47.800
it's coupled to the testing tool and
 

00:05:47.800 --> 00:05:51.930
it's coupled to the testing tool and
environment that you've written it on so

00:05:51.930 --> 00:05:51.940
environment that you've written it on so
 

00:05:51.940 --> 00:05:53.220
environment that you've written it on so
this year at Google i/o we announced

00:05:53.220 --> 00:05:53.230
this year at Google i/o we announced
 

00:05:53.230 --> 00:05:57.330
this year at Google i/o we announced
beta of Android X tests it brings

00:05:57.330 --> 00:05:57.340
beta of Android X tests it brings
 

00:05:57.340 --> 00:05:59.370
beta of Android X tests it brings
testing as a first-class citizen as part

00:05:59.370 --> 00:05:59.380
testing as a first-class citizen as part
 

00:05:59.380 --> 00:06:03.300
testing as a first-class citizen as part
of the tool chain as part of jetpack did

00:06:03.300 --> 00:06:03.310
of the tool chain as part of jetpack did
 

00:06:03.310 --> 00:06:04.530
of the tool chain as part of jetpack did
we include some of the existing

00:06:04.530 --> 00:06:04.540
we include some of the existing
 

00:06:04.540 --> 00:06:07.710
we include some of the existing
libraries you've used before some new

00:06:07.710 --> 00:06:07.720
libraries you've used before some new
 

00:06:07.720 --> 00:06:10.170
libraries you've used before some new
API is full Kotlin support which allows

00:06:10.170 --> 00:06:10.180
API is full Kotlin support which allows
 

00:06:10.180 --> 00:06:11.970
API is full Kotlin support which allows
you to write really beautiful and

00:06:11.970 --> 00:06:11.980
you to write really beautiful and
 

00:06:11.980 --> 00:06:15.000
you to write really beautiful and
concise tests and it's available on and

00:06:15.000 --> 00:06:15.010
concise tests and it's available on and
 

00:06:15.010 --> 00:06:20.880
concise tests and it's available on and
off device well last week Android X

00:06:20.880 --> 00:06:20.890
off device well last week Android X
 

00:06:20.890 --> 00:06:23.340
off device well last week Android X
tests moved out of beta and tour the

00:06:23.340 --> 00:06:23.350
tests moved out of beta and tour the
 

00:06:23.350 --> 00:06:27.690
tests moved out of beta and tour the
first full and final release 1.0 it's

00:06:27.690 --> 00:06:27.700
first full and final release 1.0 it's
 

00:06:27.700 --> 00:06:31.530
first full and final release 1.0 it's
also as of last week fully open sourced

00:06:31.530 --> 00:06:31.540
also as of last week fully open sourced
 

00:06:31.540 --> 00:06:33.870
also as of last week fully open sourced
and so we look forward to welcoming your

00:06:33.870 --> 00:06:33.880
and so we look forward to welcoming your
 

00:06:33.880 --> 00:06:36.420
and so we look forward to welcoming your
contributions and all of the

00:06:36.420 --> 00:06:36.430
contributions and all of the
 

00:06:36.430 --> 00:06:40.090
contributions and all of the
documentation on developer.android.com

00:06:40.090 --> 00:06:40.100
documentation on developer.android.com
 

00:06:40.100 --> 00:06:42.940
documentation on developer.android.com
slash training slash testing there's all

00:06:42.940 --> 00:06:42.950
slash training slash testing there's all
 

00:06:42.950 --> 00:06:45.070
slash training slash testing there's all
been revamped to show you the new styles

00:06:45.070 --> 00:06:45.080
been revamped to show you the new styles
 

00:06:45.080 --> 00:06:49.410
been revamped to show you the new styles
of api's so please don't check that out

00:06:49.410 --> 00:06:49.420
of api's so please don't check that out
 

00:06:49.420 --> 00:06:52.470
of api's so please don't check that out
so let's take a look inside

00:06:52.470 --> 00:06:52.480
so let's take a look inside
 

00:06:52.480 --> 00:06:54.880
so let's take a look inside
the first module that we pulled across

00:06:54.880 --> 00:06:54.890
the first module that we pulled across
 

00:06:54.890 --> 00:06:57.760
the first module that we pulled across
was the existing je unit for support and

00:06:57.760 --> 00:06:57.770
was the existing je unit for support and
 

00:06:57.770 --> 00:06:59.320
was the existing je unit for support and
the runner and the roles that you may

00:06:59.320 --> 00:06:59.330
the runner and the roles that you may
 

00:06:59.330 --> 00:07:04.180
the runner and the roles that you may
have used before we've also added a new

00:07:04.180 --> 00:07:04.190
have used before we've also added a new
 

00:07:04.190 --> 00:07:07.180
have used before we've also added a new
module which we call core and this

00:07:07.180 --> 00:07:07.190
module which we call core and this
 

00:07:07.190 --> 00:07:10.810
module which we call core and this
includes some new api's application

00:07:10.810 --> 00:07:10.820
includes some new api's application
 

00:07:10.820 --> 00:07:13.390
includes some new api's application
provider as its name suggests it's a

00:07:13.390 --> 00:07:13.400
provider as its name suggests it's a
 

00:07:13.400 --> 00:07:16.540
provider as its name suggests it's a
quick and easy way to get a hold of the

00:07:16.540 --> 00:07:16.550
quick and easy way to get a hold of the
 

00:07:16.550 --> 00:07:19.900
quick and easy way to get a hold of the
application context activity scenario

00:07:19.900 --> 00:07:19.910
application context activity scenario
 

00:07:19.910 --> 00:07:23.400
application context activity scenario
which is a brand new API that provides

00:07:23.400 --> 00:07:23.410
which is a brand new API that provides
 

00:07:23.410 --> 00:07:25.780
which is a brand new API that provides
coarse and fine grained

00:07:25.780 --> 00:07:25.790
coarse and fine grained
 

00:07:25.790 --> 00:07:27.730
coarse and fine grained
api's for which you can test your

00:07:27.730 --> 00:07:27.740
api's for which you can test your
 

00:07:27.740 --> 00:07:30.610
api's for which you can test your
activities and fragment scenario which

00:07:30.610 --> 00:07:30.620
activities and fragment scenario which
 

00:07:30.620 --> 00:07:32.790
activities and fragment scenario which
was released actually just this week

00:07:32.790 --> 00:07:32.800
was released actually just this week
 

00:07:32.800 --> 00:07:35.650
was released actually just this week
providing this very similar set of

00:07:35.650 --> 00:07:35.660
providing this very similar set of
 

00:07:35.660 --> 00:07:41.080
providing this very similar set of
testing features for fragments we've

00:07:41.080 --> 00:07:41.090
testing features for fragments we've
 

00:07:41.090 --> 00:07:44.230
testing features for fragments we've
also brought espresso into the jetpack

00:07:44.230 --> 00:07:44.240
also brought espresso into the jetpack
 

00:07:44.240 --> 00:07:47.140
also brought espresso into the jetpack
Android X family espresso if you're not

00:07:47.140 --> 00:07:47.150
Android X family espresso if you're not
 

00:07:47.150 --> 00:07:51.910
Android X family espresso if you're not
aware is a set of view matching library

00:07:51.910 --> 00:07:51.920
aware is a set of view matching library
 

00:07:51.920 --> 00:07:53.440
aware is a set of view matching library
filled with a set of view matching api's

00:07:53.440 --> 00:07:53.450
filled with a set of view matching api's
 

00:07:53.450 --> 00:07:56.380
filled with a set of view matching api's
and a set of view actions it's allow you

00:07:56.380 --> 00:07:56.390
and a set of view actions it's allow you
 

00:07:56.390 --> 00:07:58.990
and a set of view actions it's allow you
to match and then in interact with those

00:07:58.990 --> 00:07:59.000
to match and then in interact with those
 

00:07:59.000 --> 00:08:01.750
to match and then in interact with those
UI elements it also includes some other

00:08:01.750 --> 00:08:01.760
UI elements it also includes some other
 

00:08:01.760 --> 00:08:04.720
UI elements it also includes some other
things like ability to capture and stub

00:08:04.720 --> 00:08:04.730
things like ability to capture and stub
 

00:08:04.730 --> 00:08:10.270
things like ability to capture and stub
intense for the system and finally we've

00:08:10.270 --> 00:08:10.280
intense for the system and finally we've
 

00:08:10.280 --> 00:08:13.420
intense for the system and finally we've
also released some truth Android

00:08:13.420 --> 00:08:13.430
also released some truth Android
 

00:08:13.430 --> 00:08:16.570
also released some truth Android
extensions and truth is Google's open

00:08:16.570 --> 00:08:16.580
extensions and truth is Google's open
 

00:08:16.580 --> 00:08:20.080
extensions and truth is Google's open
source fluent testing assertions library

00:08:20.080 --> 00:08:20.090
source fluent testing assertions library
 

00:08:20.090 --> 00:08:23.280
source fluent testing assertions library
and we brought in a bunch of components

00:08:23.280 --> 00:08:23.290
and we brought in a bunch of components
 

00:08:23.290 --> 00:08:25.870
and we brought in a bunch of components
for Android subjects which allow you to

00:08:25.870 --> 00:08:25.880
for Android subjects which allow you to
 

00:08:25.880 --> 00:08:28.570
for Android subjects which allow you to
test your Android objects in a way that

00:08:28.570 --> 00:08:28.580
test your Android objects in a way that
 

00:08:28.580 --> 00:08:32.700
test your Android objects in a way that
reads beautifully and concisely and

00:08:32.700 --> 00:08:32.710
reads beautifully and concisely and
 

00:08:32.710 --> 00:08:35.290
reads beautifully and concisely and
those have you been using robolectric

00:08:35.290 --> 00:08:35.300
those have you been using robolectric
 

00:08:35.300 --> 00:08:38.440
those have you been using robolectric
we'll know that we've had a version 4.0

00:08:38.440 --> 00:08:38.450
we'll know that we've had a version 4.0
 

00:08:38.450 --> 00:08:42.250
we'll know that we've had a version 4.0
and beta for a while and as of last week

00:08:42.250 --> 00:08:42.260
and beta for a while and as of last week
 

00:08:42.260 --> 00:08:45.040
and beta for a while and as of last week
we did a simultaneous release that's now

00:08:45.040 --> 00:08:45.050
we did a simultaneous release that's now
 

00:08:45.050 --> 00:08:48.340
we did a simultaneous release that's now
gone into final robolectric 4 fully

00:08:48.340 --> 00:08:48.350
gone into final robolectric 4 fully
 

00:08:48.350 --> 00:08:51.160
gone into final robolectric 4 fully
supports all of the unified API is that

00:08:51.160 --> 00:08:51.170
supports all of the unified API is that
 

00:08:51.170 --> 00:08:53.350
supports all of the unified API is that
are in Android X test as well as a

00:08:53.350 --> 00:08:53.360
are in Android X test as well as a
 

00:08:53.360 --> 00:08:54.050
are in Android X test as well as a
number of its

00:08:54.050 --> 00:08:54.060
number of its
 

00:08:54.060 --> 00:09:04.070
number of its
new features and improvements okay and

00:09:04.070 --> 00:09:04.080
new features and improvements okay and
 

00:09:04.080 --> 00:09:07.820
new features and improvements okay and
so I'd like to welcome you key onstage

00:09:07.820 --> 00:09:07.830
so I'd like to welcome you key onstage
 

00:09:07.830 --> 00:09:10.360
so I'd like to welcome you key onstage
who's gonna give you a deeper dive into

00:09:10.360 --> 00:09:10.370
who's gonna give you a deeper dive into
 

00:09:10.370 --> 00:09:27.230
who's gonna give you a deeper dive into
some of the api's available yuki $6

00:09:27.230 --> 00:09:27.240
some of the api's available yuki $6
 

00:09:27.240 --> 00:09:32.000
some of the api's available yuki $6
sound hi everyone so let me introduce

00:09:32.000 --> 00:09:32.010
sound hi everyone so let me introduce
 

00:09:32.010 --> 00:09:35.960
sound hi everyone so let me introduce
our new api's let's start with

00:09:35.960 --> 00:09:35.970
our new api's let's start with
 

00:09:35.970 --> 00:09:38.210
our new api's let's start with
application provider which is a new way

00:09:38.210 --> 00:09:38.220
application provider which is a new way
 

00:09:38.220 --> 00:09:40.640
application provider which is a new way
of accessing context from your test

00:09:40.640 --> 00:09:40.650
of accessing context from your test
 

00:09:40.650 --> 00:09:46.400
of accessing context from your test
board so when you work on Android

00:09:46.400 --> 00:09:46.410
board so when you work on Android
 

00:09:46.410 --> 00:09:49.000
board so when you work on Android
testing you need to handle two different

00:09:49.000 --> 00:09:49.010
testing you need to handle two different
 

00:09:49.010 --> 00:09:50.630
testing you need to handle two different
contexts object

00:09:50.630 --> 00:09:50.640
contexts object
 

00:09:50.640 --> 00:09:54.140
contexts object
the first one is come from come from

00:09:54.140 --> 00:09:54.150
the first one is come from come from
 

00:09:54.150 --> 00:09:57.350
the first one is come from come from
application sorry the first one is come

00:09:57.350 --> 00:09:57.360
application sorry the first one is come
 

00:09:57.360 --> 00:10:01.160
application sorry the first one is come
from application under your test and the

00:10:01.160 --> 00:10:01.170
from application under your test and the
 

00:10:01.170 --> 00:10:03.250
from application under your test and the
second one is come from the

00:10:03.250 --> 00:10:03.260
second one is come from the
 

00:10:03.260 --> 00:10:06.140
second one is come from the
instrumentation apk where your test code

00:10:06.140 --> 00:10:06.150
instrumentation apk where your test code
 

00:10:06.150 --> 00:10:12.650
instrumentation apk where your test code
is stored so with today's a today's

00:10:12.650 --> 00:10:12.660
is stored so with today's a today's
 

00:10:12.660 --> 00:10:16.100
is stored so with today's a today's
library we have two different methods to

00:10:16.100 --> 00:10:16.110
library we have two different methods to
 

00:10:16.110 --> 00:10:19.400
library we have two different methods to
access this context object and this

00:10:19.400 --> 00:10:19.410
access this context object and this
 

00:10:19.410 --> 00:10:21.140
access this context object and this
makes your test code harder to

00:10:21.140 --> 00:10:21.150
makes your test code harder to
 

00:10:21.150 --> 00:10:23.740
makes your test code harder to
understand because the library uses

00:10:23.740 --> 00:10:23.750
understand because the library uses
 

00:10:23.750 --> 00:10:27.320
understand because the library uses
library specific terminology target

00:10:27.320 --> 00:10:27.330
library specific terminology target
 

00:10:27.330 --> 00:10:30.380
library specific terminology target
context means context from your

00:10:30.380 --> 00:10:30.390
context means context from your
 

00:10:30.390 --> 00:10:34.490
context means context from your
instrumentation apk while sorry the

00:10:34.490 --> 00:10:34.500
instrumentation apk while sorry the
 

00:10:34.500 --> 00:10:36.260
instrumentation apk while sorry the
target context means the context from

00:10:36.260 --> 00:10:36.270
target context means the context from
 

00:10:36.270 --> 00:10:39.200
target context means the context from
your application while get get context

00:10:39.200 --> 00:10:39.210
your application while get get context
 

00:10:39.210 --> 00:10:40.880
your application while get get context
means the context from your

00:10:40.880 --> 00:10:40.890
means the context from your
 

00:10:40.890 --> 00:10:44.840
means the context from your
instrumentation apk also it is it is not

00:10:44.840 --> 00:10:44.850
instrumentation apk also it is it is not
 

00:10:44.850 --> 00:10:50.410
instrumentation apk also it is it is not
obviously which one to use for your test

00:10:50.410 --> 00:10:50.420
obviously which one to use for your test
 

00:10:50.420 --> 00:10:54.550
obviously which one to use for your test
so in our new API we hide the

00:10:54.550 --> 00:10:54.560
so in our new API we hide the
 

00:10:54.560 --> 00:10:57.470
so in our new API we hide the
instrumentation content from public API

00:10:57.470 --> 00:10:57.480
instrumentation content from public API
 

00:10:57.480 --> 00:11:01.460
instrumentation content from public API
and we only and only application

00:11:01.460 --> 00:11:01.470
and we only and only application
 

00:11:01.470 --> 00:11:03.950
and we only and only application
provider only provides application

00:11:03.950 --> 00:11:03.960
provider only provides application
 

00:11:03.960 --> 00:11:05.450
provider only provides application
context in the form over your

00:11:05.450 --> 00:11:05.460
context in the form over your
 

00:11:05.460 --> 00:11:08.299
context in the form over your
application graph

00:11:08.299 --> 00:11:08.309
 

00:11:08.309 --> 00:11:11.669
let's take a look at the example code so

00:11:11.669 --> 00:11:11.679
let's take a look at the example code so
 

00:11:11.679 --> 00:11:15.239
let's take a look at the example code so
here let's say we have a test for the

00:11:15.239 --> 00:11:15.249
here let's say we have a test for the
 

00:11:15.249 --> 00:11:18.299
here let's say we have a test for the
location tracker activity and in the

00:11:18.299 --> 00:11:18.309
location tracker activity and in the
 

00:11:18.309 --> 00:11:22.049
location tracker activity and in the
setup method we get that we get the

00:11:22.049 --> 00:11:22.059
setup method we get that we get the
 

00:11:22.059 --> 00:11:23.910
setup method we get that we get the
target context in the old-fashioned way

00:11:23.910 --> 00:11:23.920
target context in the old-fashioned way
 

00:11:23.920 --> 00:11:26.040
target context in the old-fashioned way
and we type just it to a location

00:11:26.040 --> 00:11:26.050
and we type just it to a location
 

00:11:26.050 --> 00:11:29.850
and we type just it to a location
tracker application so that we can

00:11:29.850 --> 00:11:29.860
tracker application so that we can
 

00:11:29.860 --> 00:11:32.160
tracker application so that we can
register a mock mock object for testing

00:11:32.160 --> 00:11:32.170
register a mock mock object for testing
 

00:11:32.170 --> 00:11:35.460
register a mock mock object for testing
and second line set the mock object for

00:11:35.460 --> 00:11:35.470
and second line set the mock object for
 

00:11:35.470 --> 00:11:40.049
and second line set the mock object for
that and this code is pretty simple and

00:11:40.049 --> 00:11:40.059
that and this code is pretty simple and
 

00:11:40.059 --> 00:11:43.319
that and this code is pretty simple and
it actually works but you could have

00:11:43.319 --> 00:11:43.329
it actually works but you could have
 

00:11:43.329 --> 00:11:46.489
it actually works but you could have
used our own context and face-to-face

00:11:46.489 --> 00:11:46.499
used our own context and face-to-face
 

00:11:46.499 --> 00:11:49.710
used our own context and face-to-face
terrain time at runtime error and ended

00:11:49.710 --> 00:11:49.720
terrain time at runtime error and ended
 

00:11:49.720 --> 00:11:55.280
terrain time at runtime error and ended
up with wasting your time for debugging

00:11:55.280 --> 00:11:55.290
 

00:11:55.290 --> 00:11:59.970
now with the new way a previous

00:11:59.970 --> 00:11:59.980
now with the new way a previous
 

00:11:59.980 --> 00:12:02.579
now with the new way a previous
application context provider provides

00:12:02.579 --> 00:12:02.589
application context provider provides
 

00:12:02.589 --> 00:12:05.730
application context provider provides
your context in a in your application

00:12:05.730 --> 00:12:05.740
your context in a in your application
 

00:12:05.740 --> 00:12:08.790
your context in a in your application
class so you can do the exactly the same

00:12:08.790 --> 00:12:08.800
class so you can do the exactly the same
 

00:12:08.800 --> 00:12:11.249
class so you can do the exactly the same
thing but there is much less chance for

00:12:11.249 --> 00:12:11.259
thing but there is much less chance for
 

00:12:11.259 --> 00:12:17.609
thing but there is much less chance for
our confusion or baggage okay listen let

00:12:17.609 --> 00:12:17.619
our confusion or baggage okay listen let
 

00:12:17.619 --> 00:12:19.559
our confusion or baggage okay listen let
me move on to the more complicated stuff

00:12:19.559 --> 00:12:19.569
me move on to the more complicated stuff
 

00:12:19.569 --> 00:12:23.999
me move on to the more complicated stuff
activity scenario actually before I we

00:12:23.999 --> 00:12:24.009
activity scenario actually before I we
 

00:12:24.009 --> 00:12:26.340
activity scenario actually before I we
dive into details I have a question for

00:12:26.340 --> 00:12:26.350
dive into details I have a question for
 

00:12:26.350 --> 00:12:29.189
dive into details I have a question for
you how many of you have written your

00:12:29.189 --> 00:12:29.199
you how many of you have written your
 

00:12:29.199 --> 00:12:32.609
you how many of you have written your
own activity and and handle the

00:12:32.609 --> 00:12:32.619
own activity and and handle the
 

00:12:32.619 --> 00:12:35.129
own activity and and handle the
lifecycle transitions by you up by

00:12:35.129 --> 00:12:35.139
lifecycle transitions by you up by
 

00:12:35.139 --> 00:12:37.439
lifecycle transitions by you up by
yourself please raise your hand if you

00:12:37.439 --> 00:12:37.449
yourself please raise your hand if you
 

00:12:37.449 --> 00:12:41.879
yourself please raise your hand if you
are cool and how many of you have

00:12:41.879 --> 00:12:41.889
are cool and how many of you have
 

00:12:41.889 --> 00:12:44.850
are cool and how many of you have
shipped to your activity with with the

00:12:44.850 --> 00:12:44.860
shipped to your activity with with the
 

00:12:44.860 --> 00:12:48.600
shipped to your activity with with the
bodies related to life cycles Oh

00:12:48.600 --> 00:12:48.610
bodies related to life cycles Oh
 

00:12:48.610 --> 00:12:52.079
bodies related to life cycles Oh
many of you and who didn't like a taste

00:12:52.079 --> 00:12:52.089
many of you and who didn't like a taste
 

00:12:52.089 --> 00:12:57.660
many of you and who didn't like a taste
for that as we did not write a test cool

00:12:57.660 --> 00:12:57.670
for that as we did not write a test cool
 

00:12:57.670 --> 00:13:00.660
for that as we did not write a test cool
well yeah I I see some 100 keeping up

00:13:00.660 --> 00:13:00.670
well yeah I I see some 100 keeping up
 

00:13:00.670 --> 00:13:03.289
well yeah I I see some 100 keeping up
and to be honest I do too and I agree

00:13:03.289 --> 00:13:03.299
and to be honest I do too and I agree
 

00:13:03.299 --> 00:13:06.929
and to be honest I do too and I agree
the writing test for the activity

00:13:06.929 --> 00:13:06.939
the writing test for the activity
 

00:13:06.939 --> 00:13:09.150
the writing test for the activity
activity lifecycle transition is pretty

00:13:09.150 --> 00:13:09.160
activity lifecycle transition is pretty
 

00:13:09.160 --> 00:13:13.379
activity lifecycle transition is pretty
hard and there is no such a good API in

00:13:13.379 --> 00:13:13.389
hard and there is no such a good API in
 

00:13:13.389 --> 00:13:17.159
hard and there is no such a good API in
testing library as now so that's why me

00:13:17.159 --> 00:13:17.169
testing library as now so that's why me
 

00:13:17.169 --> 00:13:19.799
testing library as now so that's why me
and the Jonathan and our team have

00:13:19.799 --> 00:13:19.809
and the Jonathan and our team have
 

00:13:19.809 --> 00:13:21.120
and the Jonathan and our team have
sought for a solution

00:13:21.120 --> 00:13:21.130
sought for a solution
 

00:13:21.130 --> 00:13:23.190
sought for a solution
and we develop the activity scenario

00:13:23.190 --> 00:13:23.200
and we develop the activity scenario
 

00:13:23.200 --> 00:13:26.040
and we develop the activity scenario
which you can use it for driving your

00:13:26.040 --> 00:13:26.050
which you can use it for driving your
 

00:13:26.050 --> 00:13:28.110
which you can use it for driving your
activity stay tuned arbitrary state for

00:13:28.110 --> 00:13:28.120
activity stay tuned arbitrary state for
 

00:13:28.120 --> 00:13:33.390
activity stay tuned arbitrary state for
testing so let's revisit the activities

00:13:33.390 --> 00:13:33.400
testing so let's revisit the activities
 

00:13:33.400 --> 00:13:36.750
testing so let's revisit the activities
activity state first so the creative

00:13:36.750 --> 00:13:36.760
activity state first so the creative
 

00:13:36.760 --> 00:13:39.210
activity state first so the creative
state is where an activity is created

00:13:39.210 --> 00:13:39.220
state is where an activity is created
 

00:13:39.220 --> 00:13:44.010
state is where an activity is created
I mean instantiated but it is but it is

00:13:44.010 --> 00:13:44.020
I mean instantiated but it is but it is
 

00:13:44.020 --> 00:13:46.920
I mean instantiated but it is but it is
not visible to users yet or activity

00:13:46.920 --> 00:13:46.930
not visible to users yet or activity
 

00:13:46.930 --> 00:13:50.400
not visible to users yet or activity
opportunity so it can be creative state

00:13:50.400 --> 00:13:50.410
opportunity so it can be creative state
 

00:13:50.410 --> 00:13:52.620
opportunity so it can be creative state
while it is running in background as

00:13:52.620 --> 00:13:52.630
while it is running in background as
 

00:13:52.630 --> 00:13:56.580
while it is running in background as
well and the study state is we are

00:13:56.580 --> 00:13:56.590
well and the study state is we are
 

00:13:56.590 --> 00:13:59.700
well and the study state is we are
activity is created in study it's

00:13:59.700 --> 00:13:59.710
activity is created in study it's
 

00:13:59.710 --> 00:14:02.220
activity is created in study it's
partially visible to users but not the

00:14:02.220 --> 00:14:02.230
partially visible to users but not the
 

00:14:02.230 --> 00:14:05.310
partially visible to users but not the
Frog on foreground activity activities

00:14:05.310 --> 00:14:05.320
Frog on foreground activity activities
 

00:14:05.320 --> 00:14:07.560
Frog on foreground activity activities
running in picture-in-picture mode is

00:14:07.560 --> 00:14:07.570
running in picture-in-picture mode is
 

00:14:07.570 --> 00:14:11.610
running in picture-in-picture mode is
also in this state and a reasonable

00:14:11.610 --> 00:14:11.620
also in this state and a reasonable
 

00:14:11.620 --> 00:14:14.250
also in this state and a reasonable
state if we are your activity is fully

00:14:14.250 --> 00:14:14.260
state if we are your activity is fully
 

00:14:14.260 --> 00:14:15.900
state if we are your activity is fully
visible to users and running in

00:14:15.900 --> 00:14:15.910
visible to users and running in
 

00:14:15.910 --> 00:14:21.510
visible to users and running in
foreground and in and under the

00:14:21.510 --> 00:14:21.520
foreground and in and under the
 

00:14:21.520 --> 00:14:23.970
foreground and in and under the
framework can change the lifecycle state

00:14:23.970 --> 00:14:23.980
framework can change the lifecycle state
 

00:14:23.980 --> 00:14:26.970
framework can change the lifecycle state
by anytime by the user user interactions

00:14:26.970 --> 00:14:26.980
by anytime by the user user interactions
 

00:14:26.980 --> 00:14:29.460
by anytime by the user user interactions
so your activity has to handle those

00:14:29.460 --> 00:14:29.470
so your activity has to handle those
 

00:14:29.470 --> 00:14:32.670
so your activity has to handle those
state transition property for a good

00:14:32.670 --> 00:14:32.680
state transition property for a good
 

00:14:32.680 --> 00:14:35.550
state transition property for a good
user experience otherwise you see some

00:14:35.550 --> 00:14:35.560
user experience otherwise you see some
 

00:14:35.560 --> 00:14:39.810
user experience otherwise you see some
bugs and activity scenario provides a

00:14:39.810 --> 00:14:39.820
bugs and activity scenario provides a
 

00:14:39.820 --> 00:14:42.150
bugs and activity scenario provides a
method movie to state which you can

00:14:42.150 --> 00:14:42.160
method movie to state which you can
 

00:14:42.160 --> 00:14:44.430
method movie to state which you can
drive your activities like circus like

00:14:44.430 --> 00:14:44.440
drive your activities like circus like
 

00:14:44.440 --> 00:14:46.230
drive your activities like circus like
cycle stay tuned arbitrary state for

00:14:46.230 --> 00:14:46.240
cycle stay tuned arbitrary state for
 

00:14:46.240 --> 00:14:48.420
cycle stay tuned arbitrary state for
testing let's take a look at an example

00:14:48.420 --> 00:14:48.430
testing let's take a look at an example
 

00:14:48.430 --> 00:14:51.570
testing let's take a look at an example
called here we have a test for a

00:14:51.570 --> 00:14:51.580
called here we have a test for a
 

00:14:51.580 --> 00:14:54.510
called here we have a test for a
location tracker activity and here we

00:14:54.510 --> 00:14:54.520
location tracker activity and here we
 

00:14:54.520 --> 00:14:57.570
location tracker activity and here we
want to verify that location listener is

00:14:57.570 --> 00:14:57.580
want to verify that location listener is
 

00:14:57.580 --> 00:14:59.820
want to verify that location listener is
properly unregistered from the system

00:14:59.820 --> 00:14:59.830
properly unregistered from the system
 

00:14:59.830 --> 00:15:03.380
properly unregistered from the system
when the activity becomes creative state

00:15:03.380 --> 00:15:03.390
when the activity becomes creative state
 

00:15:03.390 --> 00:15:06.440
when the activity becomes creative state
so at first we have to start activity

00:15:06.440 --> 00:15:06.450
so at first we have to start activity
 

00:15:06.450 --> 00:15:10.500
so at first we have to start activity
launch activity takes your activity your

00:15:10.500 --> 00:15:10.510
launch activity takes your activity your
 

00:15:10.510 --> 00:15:13.050
launch activity takes your activity your
activity class and start activity and

00:15:13.050 --> 00:15:13.060
activity class and start activity and
 

00:15:13.060 --> 00:15:15.690
activity class and start activity and
wait wait for it until it becomes

00:15:15.690 --> 00:15:15.700
wait wait for it until it becomes
 

00:15:15.700 --> 00:15:22.040
wait wait for it until it becomes
resuming the state and move it to state

00:15:22.040 --> 00:15:22.050
resuming the state and move it to state
 

00:15:22.050 --> 00:15:25.470
resuming the state and move it to state
initiated lifecycle transition and movie

00:15:25.470 --> 00:15:25.480
initiated lifecycle transition and movie
 

00:15:25.480 --> 00:15:27.180
initiated lifecycle transition and movie
star lifecycle state to the creative

00:15:27.180 --> 00:15:27.190
star lifecycle state to the creative
 

00:15:27.190 --> 00:15:31.110
star lifecycle state to the creative
state also the older method all the

00:15:31.110 --> 00:15:31.120
state also the older method all the
 

00:15:31.120 --> 00:15:32.970
state also the older method all the
activities module method works as a

00:15:32.970 --> 00:15:32.980
activities module method works as a
 

00:15:32.980 --> 00:15:34.620
activities module method works as a
blocking call so

00:15:34.620 --> 00:15:34.630
blocking call so
 

00:15:34.630 --> 00:15:37.079
blocking call so
after this after this methodical it is

00:15:37.079 --> 00:15:37.089
after this after this methodical it is
 

00:15:37.089 --> 00:15:40.230
after this after this methodical it is
guaranteed that the activities lifecycle

00:15:40.230 --> 00:15:40.240
guaranteed that the activities lifecycle
 

00:15:40.240 --> 00:15:44.430
guaranteed that the activities lifecycle
state to be created and then you can

00:15:44.430 --> 00:15:44.440
state to be created and then you can
 

00:15:44.440 --> 00:15:46.590
state to be created and then you can
inspect your activities internal state

00:15:46.590 --> 00:15:46.600
inspect your activities internal state
 

00:15:46.600 --> 00:15:49.800
inspect your activities internal state
by calling own activity method yes

00:15:49.800 --> 00:15:49.810
by calling own activity method yes
 

00:15:49.810 --> 00:15:54.749
by calling own activity method yes
that's easy now we have a API and also

00:15:54.749 --> 00:15:54.759
that's easy now we have a API and also
 

00:15:54.759 --> 00:15:56.999
that's easy now we have a API and also
you can use activity scenario for

00:15:56.999 --> 00:15:57.009
you can use activity scenario for
 

00:15:57.009 --> 00:16:03.019
you can use activity scenario for
testing the creation of your activity so

00:16:03.019 --> 00:16:03.029
testing the creation of your activity so
 

00:16:03.029 --> 00:16:06.210
testing the creation of your activity so
activity recreation happens when you are

00:16:06.210 --> 00:16:06.220
activity recreation happens when you are
 

00:16:06.220 --> 00:16:08.129
activity recreation happens when you are
your activity is running in background

00:16:08.129 --> 00:16:08.139
your activity is running in background
 

00:16:08.139 --> 00:16:10.230
your activity is running in background
for a long time and when you come back

00:16:10.230 --> 00:16:10.240
for a long time and when you come back
 

00:16:10.240 --> 00:16:15.210
for a long time and when you come back
it later and your activity has to save

00:16:15.210 --> 00:16:15.220
it later and your activity has to save
 

00:16:15.220 --> 00:16:17.220
it later and your activity has to save
its its internal state to establish

00:16:17.220 --> 00:16:17.230
its its internal state to establish
 

00:16:17.230 --> 00:16:21.150
its its internal state to establish
saved internal save this stable instance

00:16:21.150 --> 00:16:21.160
saved internal save this stable instance
 

00:16:21.160 --> 00:16:22.680
saved internal save this stable instance
a bundle before it is destroyed

00:16:22.680 --> 00:16:22.690
a bundle before it is destroyed
 

00:16:22.690 --> 00:16:25.579
a bundle before it is destroyed
otherwise you will lose the state and

00:16:25.579 --> 00:16:25.589
otherwise you will lose the state and
 

00:16:25.589 --> 00:16:29.999
otherwise you will lose the state and
activity study has a method recreate we

00:16:29.999 --> 00:16:30.009
activity study has a method recreate we
 

00:16:30.009 --> 00:16:31.559
activity study has a method recreate we
are you can use it for testing such a

00:16:31.559 --> 00:16:31.569
are you can use it for testing such a
 

00:16:31.569 --> 00:16:36.059
are you can use it for testing such a
scenario this see our example code so

00:16:36.059 --> 00:16:36.069
scenario this see our example code so
 

00:16:36.069 --> 00:16:38.189
scenario this see our example code so
here in this test we want to make sure

00:16:38.189 --> 00:16:38.199
here in this test we want to make sure
 

00:16:38.199 --> 00:16:40.740
here in this test we want to make sure
that input text is restore the property

00:16:40.740 --> 00:16:40.750
that input text is restore the property
 

00:16:40.750 --> 00:16:43.439
that input text is restore the property
after the activity is recreated after

00:16:43.439 --> 00:16:43.449
after the activity is recreated after
 

00:16:43.449 --> 00:16:48.120
after the activity is recreated after
destruction so first we have a some test

00:16:48.120 --> 00:16:48.130
destruction so first we have a some test
 

00:16:48.130 --> 00:16:50.960
destruction so first we have a some test
data like test user as an input and

00:16:50.960 --> 00:16:50.970
data like test user as an input and
 

00:16:50.970 --> 00:16:55.410
data like test user as an input and
again we start activity and then we

00:16:55.410 --> 00:16:55.420
again we start activity and then we
 

00:16:55.420 --> 00:16:59.009
again we start activity and then we
input we fill the text box by using the

00:16:59.009 --> 00:16:59.019
input we fill the text box by using the
 

00:16:59.019 --> 00:17:01.769
input we fill the text box by using the
espresso library as you can see the

00:17:01.769 --> 00:17:01.779
espresso library as you can see the
 

00:17:01.779 --> 00:17:03.629
espresso library as you can see the
activity scenario works pretty nicely

00:17:03.629 --> 00:17:03.639
activity scenario works pretty nicely
 

00:17:03.639 --> 00:17:06.840
activity scenario works pretty nicely
with espresso and then we call recreate

00:17:06.840 --> 00:17:06.850
with espresso and then we call recreate
 

00:17:06.850 --> 00:17:09.779
with espresso and then we call recreate
which actually leak with which actually

00:17:09.779 --> 00:17:09.789
which actually leak with which actually
 

00:17:09.789 --> 00:17:12.029
which actually leak with which actually
destroyed live activity and recreate the

00:17:12.029 --> 00:17:12.039
destroyed live activity and recreate the
 

00:17:12.039 --> 00:17:15.689
destroyed live activity and recreate the
new instance and waits waits for the

00:17:15.689 --> 00:17:15.699
new instance and waits waits for the
 

00:17:15.699 --> 00:17:18.600
new instance and waits waits for the
activity to be resumed in state and then

00:17:18.600 --> 00:17:18.610
activity to be resumed in state and then
 

00:17:18.610 --> 00:17:21.569
activity to be resumed in state and then
again using the espresso again and we

00:17:21.569 --> 00:17:21.579
again using the espresso again and we
 

00:17:21.579 --> 00:17:24.329
again using the espresso again and we
can make sure that the text is there

00:17:24.329 --> 00:17:24.339
can make sure that the text is there
 

00:17:24.339 --> 00:17:30.270
can make sure that the text is there
I'll be expected yes it's also simple ok

00:17:30.270 --> 00:17:30.280
I'll be expected yes it's also simple ok
 

00:17:30.280 --> 00:17:32.220
I'll be expected yes it's also simple ok
finally I'd like to show you one more

00:17:32.220 --> 00:17:32.230
finally I'd like to show you one more
 

00:17:32.230 --> 00:17:35.419
finally I'd like to show you one more
example from the truth tooth extension

00:17:35.419 --> 00:17:35.429
example from the truth tooth extension
 

00:17:35.429 --> 00:17:39.539
example from the truth tooth extension
in 10 subjects by use of intense subject

00:17:39.539 --> 00:17:39.549
in 10 subjects by use of intense subject
 

00:17:39.549 --> 00:17:44.060
in 10 subjects by use of intense subject
you can verify your you can verify your

00:17:44.060 --> 00:17:44.070
you can verify your you can verify your
 

00:17:44.070 --> 00:17:47.370
you can verify your you can verify your
intent values and

00:17:47.370 --> 00:17:47.380
intent values and
 

00:17:47.380 --> 00:17:49.529
intent values and
and it produces really good

00:17:49.529 --> 00:17:49.539
and it produces really good
 

00:17:49.539 --> 00:17:51.870
and it produces really good
human-friendly error messages if the

00:17:51.870 --> 00:17:51.880
human-friendly error messages if the
 

00:17:51.880 --> 00:17:54.630
human-friendly error messages if the
error happens let's see an example

00:17:54.630 --> 00:17:54.640
error happens let's see an example
 

00:17:54.640 --> 00:17:55.289
error happens let's see an example
called

00:17:55.289 --> 00:17:55.299
called
 

00:17:55.299 --> 00:17:58.260
called
in this time we want to again make sure

00:17:58.260 --> 00:17:58.270
in this time we want to again make sure
 

00:17:58.270 --> 00:18:00.659
in this time we want to again make sure
that intent we want to make sure our

00:18:00.659 --> 00:18:00.669
that intent we want to make sure our
 

00:18:00.669 --> 00:18:03.570
that intent we want to make sure our
data intent has a expected contact name

00:18:03.570 --> 00:18:03.580
data intent has a expected contact name
 

00:18:03.580 --> 00:18:07.590
data intent has a expected contact name
in it extras so first we create a bundle

00:18:07.590 --> 00:18:07.600
in it extras so first we create a bundle
 

00:18:07.600 --> 00:18:13.080
in it extras so first we create a bundle
of the data intent and then we assert by

00:18:13.080 --> 00:18:13.090
of the data intent and then we assert by
 

00:18:13.090 --> 00:18:16.740
of the data intent and then we assert by
three lines one is checking if that

00:18:16.740 --> 00:18:16.750
three lines one is checking if that
 

00:18:16.750 --> 00:18:19.470
three lines one is checking if that
intent has expected action and the

00:18:19.470 --> 00:18:19.480
intent has expected action and the
 

00:18:19.480 --> 00:18:21.840
intent has expected action and the
second one is type and the third one is

00:18:21.840 --> 00:18:21.850
second one is type and the third one is
 

00:18:21.850 --> 00:18:26.460
second one is type and the third one is
the extra bundles and if the value

00:18:26.460 --> 00:18:26.470
the extra bundles and if the value
 

00:18:26.470 --> 00:18:29.250
the extra bundles and if the value
doesn't match your expectation you see

00:18:29.250 --> 00:18:29.260
doesn't match your expectation you see
 

00:18:29.260 --> 00:18:32.490
doesn't match your expectation you see
this error as you can see like you can

00:18:32.490 --> 00:18:32.500
this error as you can see like you can
 

00:18:32.500 --> 00:18:36.539
this error as you can see like you can
immediately know the in this example the

00:18:36.539 --> 00:18:36.549
immediately know the in this example the
 

00:18:36.549 --> 00:18:39.360
immediately know the in this example the
intent action is not is not what you

00:18:39.360 --> 00:18:39.370
intent action is not is not what you
 

00:18:39.370 --> 00:18:44.789
intent action is not is not what you
expected and yellow lots of a component

00:18:44.789 --> 00:18:44.799
expected and yellow lots of a component
 

00:18:44.799 --> 00:18:48.299
expected and yellow lots of a component
come with under the x1 under the XS 1.0

00:18:48.299 --> 00:18:48.309
come with under the x1 under the XS 1.0
 

00:18:48.309 --> 00:18:50.990
come with under the x1 under the XS 1.0
and I can't show you everything today

00:18:50.990 --> 00:18:51.000
and I can't show you everything today
 

00:18:51.000 --> 00:18:54.090
and I can't show you everything today
well for example like we have more

00:18:54.090 --> 00:18:54.100
well for example like we have more
 

00:18:54.100 --> 00:18:56.730
well for example like we have more
assertions and we also have under the

00:18:56.730 --> 00:18:56.740
assertions and we also have under the
 

00:18:56.740 --> 00:18:59.130
assertions and we also have under the
builders we are you can create your

00:18:59.130 --> 00:18:59.140
builders we are you can create your
 

00:18:59.140 --> 00:19:01.830
builders we are you can create your
testing data easily and also scenarios

00:19:01.830 --> 00:19:01.840
testing data easily and also scenarios
 

00:19:01.840 --> 00:19:05.549
testing data easily and also scenarios
for activity and fragments and you can

00:19:05.549 --> 00:19:05.559
for activity and fragments and you can
 

00:19:05.559 --> 00:19:07.110
for activity and fragments and you can
take a look at this link or

00:19:07.110 --> 00:19:07.120
take a look at this link or
 

00:19:07.120 --> 00:19:09.299
take a look at this link or
documentation to see more I hope you to

00:19:09.299 --> 00:19:09.309
documentation to see more I hope you to
 

00:19:09.309 --> 00:19:16.110
documentation to see more I hope you to
try it out after the talk ok so this is

00:19:16.110 --> 00:19:16.120
try it out after the talk ok so this is
 

00:19:16.120 --> 00:19:18.090
try it out after the talk ok so this is
the our solution for the test writing

00:19:18.090 --> 00:19:18.100
the our solution for the test writing
 

00:19:18.100 --> 00:19:23.010
the our solution for the test writing
crisis so with unified API you no longer

00:19:23.010 --> 00:19:23.020
crisis so with unified API you no longer
 

00:19:23.020 --> 00:19:26.880
crisis so with unified API you no longer
need to you no longer consider video to

00:19:26.880 --> 00:19:26.890
need to you no longer consider video to
 

00:19:26.890 --> 00:19:29.370
need to you no longer consider video to
write instrumentation test or the

00:19:29.370 --> 00:19:29.380
write instrumentation test or the
 

00:19:29.380 --> 00:19:32.310
write instrumentation test or the
robolectric test because you can now

00:19:32.310 --> 00:19:32.320
robolectric test because you can now
 

00:19:32.320 --> 00:19:35.039
robolectric test because you can now
just write a under your test and that

00:19:35.039 --> 00:19:35.049
just write a under your test and that
 

00:19:35.049 --> 00:19:37.500
just write a under your test and that
test runs on both both grunt both

00:19:37.500 --> 00:19:37.510
test runs on both both grunt both
 

00:19:37.510 --> 00:19:42.779
test runs on both both grunt both
runtime environments nicely so with the

00:19:42.779 --> 00:19:42.789
runtime environments nicely so with the
 

00:19:42.789 --> 00:19:46.020
runtime environments nicely so with the
unified API you can focus on what to

00:19:46.020 --> 00:19:46.030
unified API you can focus on what to
 

00:19:46.030 --> 00:19:48.630
unified API you can focus on what to
test and you can forget about where and

00:19:48.630 --> 00:19:48.640
test and you can forget about where and
 

00:19:48.640 --> 00:19:53.340
test and you can forget about where and
how and to ensure the consistency of the

00:19:53.340 --> 00:19:53.350
how and to ensure the consistency of the
 

00:19:53.350 --> 00:19:56.399
how and to ensure the consistency of the
behavior of our API we have a

00:19:56.399 --> 00:19:56.409
behavior of our API we have a
 

00:19:56.409 --> 00:19:59.220
behavior of our API we have a
verification test and we run the same

00:19:59.220 --> 00:19:59.230
verification test and we run the same
 

00:19:59.230 --> 00:20:01.349
verification test and we run the same
test against

00:20:01.349 --> 00:20:01.359
test against
 

00:20:01.359 --> 00:20:04.379
test against
sorry we run the same test on locally

00:20:04.379 --> 00:20:04.389
sorry we run the same test on locally
 

00:20:04.389 --> 00:20:06.779
sorry we run the same test on locally
with robolectric and also we run our

00:20:06.779 --> 00:20:06.789
with robolectric and also we run our
 

00:20:06.789 --> 00:20:10.889
with robolectric and also we run our
tests on virtual devices from the AP

00:20:10.889 --> 00:20:10.899
tests on virtual devices from the AP
 

00:20:10.899 --> 00:20:13.379
tests on virtual devices from the AP
from the API level 15 to the latest

00:20:13.379 --> 00:20:13.389
from the API level 15 to the latest
 

00:20:13.389 --> 00:20:19.849
from the API level 15 to the latest
version and and this bug go back to the

00:20:19.849 --> 00:20:19.859
version and and this bug go back to the
 

00:20:19.859 --> 00:20:22.200
version and and this bug go back to the
workflow we showed you earlier in this

00:20:22.200 --> 00:20:22.210
workflow we showed you earlier in this
 

00:20:22.210 --> 00:20:25.560
workflow we showed you earlier in this
talk so we can execute the test

00:20:25.560 --> 00:20:25.570
talk so we can execute the test
 

00:20:25.570 --> 00:20:28.529
talk so we can execute the test
test-driven development much more

00:20:28.529 --> 00:20:28.539
test-driven development much more
 

00:20:28.539 --> 00:20:31.289
test-driven development much more
efficiently using the device agnostic

00:20:31.289 --> 00:20:31.299
efficiently using the device agnostic
 

00:20:31.299 --> 00:20:35.399
efficiently using the device agnostic
test with the Dostal test writing in a

00:20:35.399 --> 00:20:35.409
test with the Dostal test writing in a
 

00:20:35.409 --> 00:20:39.690
test with the Dostal test writing in a
unified API as our recommendation we

00:20:39.690 --> 00:20:39.700
unified API as our recommendation we
 

00:20:39.700 --> 00:20:42.239
unified API as our recommendation we
recommend that you run the you write the

00:20:42.239 --> 00:20:42.249
recommend that you run the you write the
 

00:20:42.249 --> 00:20:44.759
recommend that you run the you write the
test and a Rando test with the lab

00:20:44.759 --> 00:20:44.769
test and a Rando test with the lab
 

00:20:44.769 --> 00:20:48.359
test and a Rando test with the lab
electric and then until your code is

00:20:48.359 --> 00:20:48.369
electric and then until your code is
 

00:20:48.369 --> 00:20:51.899
electric and then until your code is
ready to submit and and then run doubt

00:20:51.899 --> 00:20:51.909
ready to submit and and then run doubt
 

00:20:51.909 --> 00:20:54.180
ready to submit and and then run doubt
run the same test but on the virtual

00:20:54.180 --> 00:20:54.190
run the same test but on the virtual
 

00:20:54.190 --> 00:20:56.849
run the same test but on the virtual
devices before actually you submit a

00:20:56.849 --> 00:20:56.859
devices before actually you submit a
 

00:20:56.859 --> 00:20:59.729
devices before actually you submit a
test to maximise your confidence also

00:20:59.729 --> 00:20:59.739
test to maximise your confidence also
 

00:20:59.739 --> 00:21:01.799
test to maximise your confidence also
you can run the same test as a

00:21:01.799 --> 00:21:01.809
you can run the same test as a
 

00:21:01.809 --> 00:21:04.200
you can run the same test as a
continuous integration test against the

00:21:04.200 --> 00:21:04.210
continuous integration test against the
 

00:21:04.210 --> 00:21:09.419
continuous integration test against the
nightly built binary with the upcoming

00:21:09.419 --> 00:21:09.429
nightly built binary with the upcoming
 

00:21:09.429 --> 00:21:12.899
nightly built binary with the upcoming
nitrogen to change you can set up such a

00:21:12.899 --> 00:21:12.909
nitrogen to change you can set up such a
 

00:21:12.909 --> 00:21:17.609
nitrogen to change you can set up such a
configuration easily if you if you want

00:21:17.609 --> 00:21:17.619
configuration easily if you if you want
 

00:21:17.619 --> 00:21:20.609
configuration easily if you if you want
to know more about the project nitrogen

00:21:20.609 --> 00:21:20.619
to know more about the project nitrogen
 

00:21:20.619 --> 00:21:24.419
to know more about the project nitrogen
we have a session tomorrow so and we

00:21:24.419 --> 00:21:24.429
we have a session tomorrow so and we
 

00:21:24.429 --> 00:21:28.560
we have a session tomorrow so and we
highly recommend attending it Kurt I

00:21:28.560 --> 00:21:28.570
highly recommend attending it Kurt I
 

00:21:28.570 --> 00:21:29.999
highly recommend attending it Kurt I
thank you very much for listening and

00:21:29.999 --> 00:21:30.009
thank you very much for listening and
 

00:21:30.009 --> 00:21:31.890
thank you very much for listening and
have a havi testing

00:21:31.890 --> 00:21:31.900
have a havi testing
 

00:21:31.900 --> 00:21:44.090
have a havi testing
[Applause]

00:21:44.090 --> 00:21:44.100
 

00:21:44.100 --> 00:21:50.529
[Music]

