WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.670
[MUSIC PLAYING]

00:00:01.670 --> 00:00:03.420
COLT MCANLIS: One of
the interesting parts

00:00:03.420 --> 00:00:05.190
about building an
Android application is

00:00:05.190 --> 00:00:08.130
all the awesome configurations
of screen sizes and form

00:00:08.130 --> 00:00:08.770
factors.

00:00:08.770 --> 00:00:10.728
And if you're a developer
who prides themselves

00:00:10.728 --> 00:00:13.240
on being available on the
most devices possible,

00:00:13.240 --> 00:00:16.120
then chances are you've got a
lot of your images and icons

00:00:16.120 --> 00:00:18.840
at each specific resolution
that you need to support.

00:00:18.840 --> 00:00:21.740
But be warned, this might
be causing a large issue

00:00:21.740 --> 00:00:24.130
with the size of your APKs.

00:00:24.130 --> 00:00:25.130
My name is Colt McAnlis.

00:00:25.130 --> 00:00:27.171
And if you're trying to
squeeze the last byte out

00:00:27.171 --> 00:00:30.320
of your APK file size,
then VectorDrawables

00:00:30.320 --> 00:00:32.000
are a handy solution.

00:00:32.000 --> 00:00:33.760
See, one of the big
problems with images

00:00:33.760 --> 00:00:36.120
that you include in your
APK is that you end up

00:00:36.120 --> 00:00:38.970
needing to have multiple
versions of the same image

00:00:38.970 --> 00:00:40.490
at various resolutions.

00:00:40.490 --> 00:00:43.320
And that's because file
types like PNG and JPEG

00:00:43.320 --> 00:00:45.690
are what we call
raster graphics.

00:00:45.690 --> 00:00:48.030
They define a 2D
grid of pixel data

00:00:48.030 --> 00:00:50.720
that's pretty much copy pasted
to the screen when it's drawn.

00:00:50.720 --> 00:00:52.410
So to get different
resolutions, you

00:00:52.410 --> 00:00:55.840
have to create an entirely
new file at that resolution

00:00:55.840 --> 00:00:57.309
and place it in your APK.

00:00:57.309 --> 00:00:59.600
The result is that the more
images you have to include,

00:00:59.600 --> 00:01:02.110
the larger APK size is.

00:01:02.110 --> 00:01:04.030
This is where
VectorDrawables come in.

00:01:04.030 --> 00:01:06.600
Rather than having to store
an image for each resolution

00:01:06.600 --> 00:01:09.970
you support, VectorDrawables
allow you to use one file

00:01:09.970 --> 00:01:13.590
and generate whatever
resolution you need on demand.

00:01:13.590 --> 00:01:14.689
It works like this.

00:01:14.689 --> 00:01:16.230
A VectorDrawable
file creates a bunch

00:01:16.230 --> 00:01:18.110
of shapes and their
visual properties--

00:01:18.110 --> 00:01:21.730
like type, the position, the
color, the rotation, et cetera,

00:01:21.730 --> 00:01:22.230
et cetera.

00:01:22.230 --> 00:01:24.530
When you load a
VectorDrawable file,

00:01:24.530 --> 00:01:26.950
the system draws each
shape to the screen,

00:01:26.950 --> 00:01:28.990
giving you your final image.

00:01:28.990 --> 00:01:30.700
And since it's just
drawing shapes,

00:01:30.700 --> 00:01:32.820
you can do this at
any size you'd like.

00:01:32.820 --> 00:01:36.010
Meaning, a single VD
file inside of your APK

00:01:36.010 --> 00:01:41.170
can let you generate MDPI,
HDTPI, and XXXHDPI images,

00:01:41.170 --> 00:01:43.860
greatly reducing your APK bloat.

00:01:43.860 --> 00:01:45.400
Oh, by the way,
another cool thing.

00:01:45.400 --> 00:01:48.240
You can define animations
on VectorDrawables,

00:01:48.240 --> 00:01:50.760
which means instead of keeping
each frame of your animation

00:01:50.760 --> 00:01:53.100
logged out at each
resolution you support,

00:01:53.100 --> 00:01:54.790
you can simply
set up an XML file

00:01:54.790 --> 00:01:57.140
that transforms the
graphic in the same way,

00:01:57.140 --> 00:02:00.860
giving a similar visual
result with much less resource

00:02:00.860 --> 00:02:01.517
overhead.

00:02:01.517 --> 00:02:03.600
Now, it's worth pointing
out while VectorDrawables

00:02:03.600 --> 00:02:06.740
can save you some size,
there's a few caveats

00:02:06.740 --> 00:02:08.330
you need to consider
when using them.

00:02:08.330 --> 00:02:11.400
Firstly, loading VectorDrawables
in your app at runtime

00:02:11.400 --> 00:02:13.450
isn't the same as
loading a JPEG.

00:02:13.450 --> 00:02:17.510
While JPEGs have hardware
decoders to help unpack things,

00:02:17.510 --> 00:02:19.570
VectorDrawables
need to be generated

00:02:19.570 --> 00:02:22.400
through successive draw
commands to the GPU.

00:02:22.400 --> 00:02:26.570
See, every shape in a VD file
has to be rendered to a texture

00:02:26.570 --> 00:02:29.107
before the final image
can be used on screen.

00:02:29.107 --> 00:02:31.190
This means that the bigger
the image that you have

00:02:31.190 --> 00:02:34.290
and your generating or the
more complex the drawable is,

00:02:34.290 --> 00:02:37.700
the more time it's going
to take to load your image.

00:02:37.700 --> 00:02:40.950
But just like JPEGs or PNGs, you
only pay that cost at runtime.

00:02:40.950 --> 00:02:44.830
Rendering a VD later is just
as cheap as any other graphics

00:02:44.830 --> 00:02:45.690
resource.

00:02:45.690 --> 00:02:47.560
Secondly, in order
for VectorDrawables

00:02:47.560 --> 00:02:49.940
to represent complex
images, you have

00:02:49.940 --> 00:02:52.010
to add a lot of complex shapes.

00:02:52.010 --> 00:02:54.850
This impacts both the size
of the VectorDrawable file

00:02:54.850 --> 00:02:57.480
and the amount of time it takes
to load the image at runtime.

00:02:57.480 --> 00:03:00.000
As such, it makes sense that
VectorDrawables are best

00:03:00.000 --> 00:03:03.100
used for images with
low amounts of details

00:03:03.100 --> 00:03:06.000
that are trivially simple to
represent which shape elements.

00:03:06.000 --> 00:03:09.220
While PNGs and JPEGs might be
able to compress those images

00:03:09.220 --> 00:03:12.180
quite well, the more simple
the image, the more savings

00:03:12.180 --> 00:03:13.710
that VDs will give you.

00:03:13.710 --> 00:03:16.470
Finally, make sure that you
keep an eye on the complexity

00:03:16.470 --> 00:03:18.213
of the paths in the file.

00:03:18.213 --> 00:03:19.690
See, most of the
time when you're

00:03:19.690 --> 00:03:22.340
creating shape information
from an external tool,

00:03:22.340 --> 00:03:24.260
it can go the extra
mile to insert

00:03:24.260 --> 00:03:27.950
lots of additional points or
path information which may not

00:03:27.950 --> 00:03:31.590
be required in order to produce
the desired visual output.

00:03:31.590 --> 00:03:34.347
By simplifying your
path data before adding

00:03:34.347 --> 00:03:35.930
the VectorDrawable
to your app, you'll

00:03:35.930 --> 00:03:38.470
reduce the amount of file
size these items take up

00:03:38.470 --> 00:03:40.002
in your final APK.

00:03:40.002 --> 00:03:42.210
And that's kind of the trick
with performance, right?

00:03:42.210 --> 00:03:43.780
I mean, catching
all the crazy stuff

00:03:43.780 --> 00:03:44.906
before it gets out of hand?

00:03:44.906 --> 00:03:47.280
Which is why you should check
out the rest of the Android

00:03:47.280 --> 00:03:48.490
Performance Patterns videos.

00:03:48.490 --> 00:03:51.310
And don't forget to join
our Google+ community to ask

00:03:51.310 --> 00:03:53.130
questions to the other experts.

00:03:53.130 --> 00:03:56.450
So keep calm; profile your
code; and always remember,

00:03:56.450 --> 00:03:57.350
perf matters.

00:03:57.350 --> 00:04:01.300
[MUSIC PLAYING]

