WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.964
[MUSIC PLAYING]

00:00:06.916 --> 00:00:08.650
MARIYA NAGORNA:
My name is Maria,

00:00:08.650 --> 00:00:11.630
and I am a technical program
manager here at Google.

00:00:11.630 --> 00:00:14.410
And with me is Krishna, who
does product management.

00:00:14.410 --> 00:00:16.600
We both work on a
developer platform

00:00:16.600 --> 00:00:18.520
called Actions on Google.

00:00:18.520 --> 00:00:20.560
And in this session,
we'll discuss

00:00:20.560 --> 00:00:24.340
how you can create actions for
your existing Android apps.

00:00:24.340 --> 00:00:25.780
And then we'll
talk about how you

00:00:25.780 --> 00:00:28.780
can leverage those actions
to build deeper integrations

00:00:28.780 --> 00:00:31.030
with the Google Assistant
so that you can reach

00:00:31.030 --> 00:00:34.305
more users on your devices.

00:00:34.305 --> 00:00:35.180
KRISHNA KUMAR: Great.

00:00:35.180 --> 00:00:37.460
Everybody is here bright and
energetic in the morning?

00:00:37.460 --> 00:00:37.960
All right.

00:00:37.960 --> 00:00:40.450
Let's have a quick
show of hands first.

00:00:40.450 --> 00:00:44.781
How many of you attended the
App Action session on Tuesday?

00:00:44.781 --> 00:00:45.280
All right.

00:00:45.280 --> 00:00:46.840
I see a few hands.

00:00:46.840 --> 00:00:49.450
So today, we are going
to talk a little bit

00:00:49.450 --> 00:00:53.440
about how you can enable
actions on your Android apps

00:00:53.440 --> 00:00:54.940
and how you can
make them surface

00:00:54.940 --> 00:00:58.180
across various touchpoints
on the Android platform.

00:00:58.180 --> 00:01:01.210
If that sounds interesting, we
had this very detailed session

00:01:01.210 --> 00:01:05.060
two days ago, which had a lot
of code samples, et cetera.

00:01:05.060 --> 00:01:08.350
So definitely I'd request you
to take a look at those code

00:01:08.350 --> 00:01:09.787
samples and that video.

00:01:09.787 --> 00:01:11.620
And we also have an
office hours immediately

00:01:11.620 --> 00:01:14.620
after that, so you can come
and ask us for questions.

00:01:14.620 --> 00:01:17.080
So we're going to provide a
quick recap on App Actions

00:01:17.080 --> 00:01:18.640
and Android apps.

00:01:18.640 --> 00:01:21.280
Then we're going to talk
a little bit about how

00:01:21.280 --> 00:01:24.580
you as Android developers
can use the same development

00:01:24.580 --> 00:01:27.160
mechanism that you
use for App Actions

00:01:27.160 --> 00:01:30.640
to basically create
conversational actions to take

00:01:30.640 --> 00:01:35.620
your services to the plethora
of new smart devices coming out.

00:01:35.620 --> 00:01:37.520
So that's the agenda for today.

00:01:37.520 --> 00:01:41.860
But let's start with,
what are actions?

00:01:41.860 --> 00:01:43.990
Our devices are our
portal to the world.

00:01:43.990 --> 00:01:45.250
We do everything with them.

00:01:45.250 --> 00:01:46.270
We watch videos.

00:01:46.270 --> 00:01:47.410
We consume content.

00:01:47.410 --> 00:01:50.320
We navigate the world
using our devices.

00:01:50.320 --> 00:01:53.260
And there are two primary
critical user needs

00:01:53.260 --> 00:01:55.490
for how people use devices.

00:01:55.490 --> 00:01:58.300
One is they actually
consume content.

00:01:58.300 --> 00:02:00.545
And that includes everything
from listening to music

00:02:00.545 --> 00:02:04.540
to watching videos to getting
your best recipes, et cetera.

00:02:04.540 --> 00:02:08.110
The other is we use our
devices to get things done.

00:02:08.110 --> 00:02:09.267
The world has changed.

00:02:09.267 --> 00:02:11.350
Like, you are no more
running back to your desktop

00:02:11.350 --> 00:02:16.180
to find maps or to book a
ticket or to purchase something

00:02:16.180 --> 00:02:16.750
online.

00:02:16.750 --> 00:02:17.680
You use your device.

00:02:17.680 --> 00:02:19.460
It's our single
portal to the world.

00:02:22.330 --> 00:02:25.350
However, there are something
like 2 million Android apps

00:02:25.350 --> 00:02:25.950
out there.

00:02:25.950 --> 00:02:29.190
And there's probably several
hundred millions of websites.

00:02:29.190 --> 00:02:29.880
That's awesome.

00:02:29.880 --> 00:02:33.480
That gives the users enormous
choice and possibilities.

00:02:33.480 --> 00:02:35.790
But that can also be a
little bit overwhelming.

00:02:35.790 --> 00:02:37.470
Just try thinking
immediately of,

00:02:37.470 --> 00:02:40.500
like, which app do I immediately
use to find the best fish

00:02:40.500 --> 00:02:42.090
taco in San Diego.

00:02:42.090 --> 00:02:43.950
There's just a lot
of apps out there.

00:02:43.950 --> 00:02:45.480
And for you, as
a developer, it's

00:02:45.480 --> 00:02:48.000
even more problematic
because it causes problems

00:02:48.000 --> 00:02:50.760
of discovery and re-engagement.

00:02:50.760 --> 00:02:55.470
So there was a statistic in
Android Authority in March 2016

00:02:55.470 --> 00:02:59.790
that 77% of users don't
use the app within three

00:02:59.790 --> 00:03:01.680
days of installation.

00:03:01.680 --> 00:03:02.850
Man, that's crazy.

00:03:02.850 --> 00:03:07.150
And that number goes up
to 90% within a month.

00:03:07.150 --> 00:03:09.240
So in this very
crowded space, it's

00:03:09.240 --> 00:03:11.880
hard to get this re-engagement.

00:03:11.880 --> 00:03:14.509
And you're developing all
these cool new features.

00:03:14.509 --> 00:03:16.800
But even though the user
might have installed your app,

00:03:16.800 --> 00:03:18.780
they just don't know
what's going on.

00:03:18.780 --> 00:03:21.720
They don't know what are the
new capabilities of the app.

00:03:21.720 --> 00:03:25.772
So we are providing a sneak peek
on what we call app actions.

00:03:25.772 --> 00:03:27.480
Dave Burke mentioned
this in the consumer

00:03:27.480 --> 00:03:30.750
keynote today, or a
couple of days ago.

00:03:30.750 --> 00:03:35.490
And App Actions is a way for
you, as Android developers,

00:03:35.490 --> 00:03:38.190
to surface the
capabilities of your app

00:03:38.190 --> 00:03:42.000
and bring that up so
that Google can surface

00:03:42.000 --> 00:03:45.450
your capabilities, your
actions, and your content

00:03:45.450 --> 00:03:47.850
across many different touch
points across the Android

00:03:47.850 --> 00:03:49.710
platform.

00:03:49.710 --> 00:03:54.450
As the Android platform
evolves to an AI first world,

00:03:54.450 --> 00:03:57.960
we are moving from just
predicting the next app

00:03:57.960 --> 00:04:01.260
to predicting the next action
that a user might take.

00:04:01.260 --> 00:04:03.510
And we will surface the
capabilities of your app

00:04:03.510 --> 00:04:05.760
at just the right
moment, either based

00:04:05.760 --> 00:04:08.610
on the user context,
the user routine,

00:04:08.610 --> 00:04:12.370
or based on things
like the user query.

00:04:12.370 --> 00:04:16.019
So this gives you instant
increase in both reach

00:04:16.019 --> 00:04:17.640
and re-engagement.

00:04:17.640 --> 00:04:19.089
But how does this all work?

00:04:19.089 --> 00:04:22.650
How does this show up
in the Android platform?

00:04:22.650 --> 00:04:24.830
Let's start with
Google Assistant, which

00:04:24.830 --> 00:04:27.970
everybody is interested in.

00:04:27.970 --> 00:04:31.670
With App Actions, you can
basically get your Android apps

00:04:31.670 --> 00:04:34.470
to have a basic integration
and shortcut with a Google

00:04:34.470 --> 00:04:37.900
Assistant for
task-based queries.

00:04:37.900 --> 00:04:39.835
So in this particular
scenario, the user

00:04:39.835 --> 00:04:42.690
is asked something
like, manage my budget.

00:04:42.690 --> 00:04:45.450
And that immediately
brings up the Mint app

00:04:45.450 --> 00:04:47.640
straight to the budget page.

00:04:47.640 --> 00:04:48.750
How is this done?

00:04:48.750 --> 00:04:51.960
It is because the Mint
app, in this example,

00:04:51.960 --> 00:04:55.170
has registered for an
intent of budget management

00:04:55.170 --> 00:04:57.780
in this file called actions.xml.

00:04:57.780 --> 00:05:00.589
And we'll go through a lot
more in detail of how exactly

00:05:00.589 --> 00:05:01.630
you register for intents.

00:05:04.190 --> 00:05:07.250
This also works for
content-based queries.

00:05:07.250 --> 00:05:10.400
So I have asked, what is
Lady Gaga's real name.

00:05:10.400 --> 00:05:13.300
And believe it or not, I
actually didn't know till now.

00:05:13.300 --> 00:05:14.950
Stefani, OK.

00:05:14.950 --> 00:05:17.690
We now try to
understand and predict,

00:05:17.690 --> 00:05:21.380
what is the next follow-on
action that the user might do?

00:05:21.380 --> 00:05:25.220
If I'm basically
searching for Lady Gaga,

00:05:25.220 --> 00:05:26.780
I think it's a
natural conclusion

00:05:26.780 --> 00:05:29.000
that I might want to
listen to her latest album

00:05:29.000 --> 00:05:32.780
or watch a video or buy
tickets for her concerts.

00:05:32.780 --> 00:05:35.210
So we try to predict
the next action

00:05:35.210 --> 00:05:39.410
and show that as suggestion
chips down on the bottom.

00:05:39.410 --> 00:05:41.040
Clicking on any of
those suggestion

00:05:41.040 --> 00:05:44.810
chips immediately opens
the appropriate Android app

00:05:44.810 --> 00:05:47.030
straight to the Lady Gaga page.

00:05:47.030 --> 00:05:49.490
Just think about what a good--

00:05:49.490 --> 00:05:51.590
how many steps you
are still saving here.

00:05:51.590 --> 00:05:53.520
You're not rummaging
through your app browser

00:05:53.520 --> 00:05:55.190
to find out the
app, then you're not

00:05:55.190 --> 00:05:57.542
typing Lady Gaga
there again, and then

00:05:57.542 --> 00:05:59.000
you're not trying
to find out what.

00:05:59.000 --> 00:06:02.510
All of this happens magically
so that it just surfaces up

00:06:02.510 --> 00:06:06.090
across the Android platform.

00:06:06.090 --> 00:06:08.820
We're also exploring
how we can actually

00:06:08.820 --> 00:06:13.440
surface apps that you use a
lot directly in Google search.

00:06:13.440 --> 00:06:15.130
So I use Fandango
to book tickets.

00:06:15.130 --> 00:06:17.670
So if I type a movie
like "Avengers,"

00:06:17.670 --> 00:06:21.510
it shows me various
suggestion chips for Fandango

00:06:21.510 --> 00:06:22.620
right at the bottom.

00:06:22.620 --> 00:06:25.350
So clicking on any of
those suggestion chips

00:06:25.350 --> 00:06:28.470
will basically take me directly
into Fandango, where I can

00:06:28.470 --> 00:06:29.740
immediately purchase a ticket.

00:06:32.450 --> 00:06:36.500
As Android evolves,
last year, in Android O,

00:06:36.500 --> 00:06:39.620
we brought up this concept
of predicting the next app

00:06:39.620 --> 00:06:45.860
that you might use, that is
the top row that you see there.

00:06:45.860 --> 00:06:49.220
This actually had a 60%
prediction accuracy rate

00:06:49.220 --> 00:06:51.580
and was wildly successful.

00:06:51.580 --> 00:06:53.300
Now what you're
doing is actually

00:06:53.300 --> 00:06:55.960
moving from predicting
the next app

00:06:55.960 --> 00:06:59.000
to predicting the next
action that you might do.

00:06:59.000 --> 00:07:01.790
So in this blue
highlighted column there,

00:07:01.790 --> 00:07:03.680
you see basically
two suggestions.

00:07:03.680 --> 00:07:07.130
And these are two suggestions
that happen in my phone

00:07:07.130 --> 00:07:10.070
at around 5:00 to
5:30 in the evening.

00:07:10.070 --> 00:07:13.580
And this is based on
the frequency of usage

00:07:13.580 --> 00:07:15.976
for various tasks
and actions I do.

00:07:15.976 --> 00:07:16.850
So here's my routine.

00:07:16.850 --> 00:07:19.010
At 5 o'clock, I call my spouse--

00:07:19.010 --> 00:07:21.770
Mona, wife-- and
then I argue with her

00:07:21.770 --> 00:07:23.490
as to who has to
pick up the kids.

00:07:23.490 --> 00:07:25.560
I inevitably lose that argument.

00:07:25.560 --> 00:07:29.270
And then I navigate to my kids'
school to pick up the kids.

00:07:29.270 --> 00:07:33.230
So those two suggestions, those
two actions happen very often.

00:07:33.230 --> 00:07:36.030
And therefore it is
shown up as suggestions.

00:07:36.030 --> 00:07:40.680
Now, these suggestions are
contextual and routine-based.

00:07:40.680 --> 00:07:43.400
So, for example, if you
live in San Francisco

00:07:43.400 --> 00:07:46.760
and you use a transit app
at the transit station,

00:07:46.760 --> 00:07:49.190
when you approach
the transit station,

00:07:49.190 --> 00:07:51.980
it knows that particular context
and it will automatically

00:07:51.980 --> 00:07:55.250
show a suggestion
for the transit app.

00:07:55.250 --> 00:07:57.320
And those are the
types of predictions

00:07:57.320 --> 00:08:00.980
that we can do based on many
different inputs of context

00:08:00.980 --> 00:08:01.605
and routines.

00:08:04.820 --> 00:08:09.090
We're also directly working
with App Actions and things

00:08:09.090 --> 00:08:11.470
like Smart Select.

00:08:11.470 --> 00:08:13.740
So in an email or
in the browser,

00:08:13.740 --> 00:08:17.070
if I choose a piece
of text, what happens

00:08:17.070 --> 00:08:22.650
is that Smart Text Selection,
uses machine learning

00:08:22.650 --> 00:08:25.300
to predict the full entity.

00:08:25.300 --> 00:08:28.620
So if I click on floor in
this particular example,

00:08:28.620 --> 00:08:31.260
it basically selects the
whole Floor and Water,

00:08:31.260 --> 00:08:33.330
which is a restaurant,
and shows me

00:08:33.330 --> 00:08:37.383
the action for reserving
a table using OpenTable.

00:08:37.383 --> 00:08:39.299
Now, when I click on
OpenTable, it immediately

00:08:39.299 --> 00:08:41.460
takes me to the
OpenTable's Floor and Water

00:08:41.460 --> 00:08:46.360
page, where basically I can
book the table immediately.

00:08:46.360 --> 00:08:50.490
So these are all ways in
which App Actions surface

00:08:50.490 --> 00:08:52.710
across many different
places for the apps

00:08:52.710 --> 00:08:56.010
that you have installed on
your device, which thus leads

00:08:56.010 --> 00:08:58.530
to more re-engagement
because we understand

00:08:58.530 --> 00:09:01.110
the type of capabilities
that your apps have

00:09:01.110 --> 00:09:03.810
and continue to expand upon.

00:09:03.810 --> 00:09:07.140
But what about apps
which are not installed?

00:09:07.140 --> 00:09:11.360
App Actions also shows up
on the Play Store page.

00:09:11.360 --> 00:09:16.320
In the Play Store page, if
I type in query "Lady Gaga,"

00:09:16.320 --> 00:09:19.260
you know, "flight
tickets," it shows

00:09:19.260 --> 00:09:22.380
me various actions
that apps have,

00:09:22.380 --> 00:09:26.100
both for apps that are installed
on my device and apps which

00:09:26.100 --> 00:09:27.810
are not installed.

00:09:27.810 --> 00:09:30.600
This allows for great
discovery, because you actually

00:09:30.600 --> 00:09:34.470
understand the capabilities
of the apps that can actually

00:09:34.470 --> 00:09:37.230
directly act upon the
query that you provided.

00:09:37.230 --> 00:09:39.150
In this case, of Lady
Gaga, you get a bunch

00:09:39.150 --> 00:09:41.460
of suggestions for apps
which can do everything

00:09:41.460 --> 00:09:43.950
from play music to show lyrics.

00:09:43.950 --> 00:09:48.050
And if that particular show
lyrics app is not installed,

00:09:48.050 --> 00:09:49.860
when I click on it
it will basically

00:09:49.860 --> 00:09:52.146
give me the option
to install that app,

00:09:52.146 --> 00:09:53.520
and then it will
directly take me

00:09:53.520 --> 00:09:55.050
to the deep link for Lady Gaga.

00:09:58.070 --> 00:10:00.880
Now, App Actions is
very interesting.

00:10:00.880 --> 00:10:05.040
This is part of the larger
actions on Google Framework.

00:10:05.040 --> 00:10:08.550
So we have created a common
development mechanism,

00:10:08.550 --> 00:10:11.902
which includes built-in intents,
which is how you actually show

00:10:11.902 --> 00:10:13.110
the capabilities of your app.

00:10:13.110 --> 00:10:15.900
That is the API to show the
capabilities of your app.

00:10:15.900 --> 00:10:18.720
And that same built-in
intent mechanism

00:10:18.720 --> 00:10:22.250
can be used for App Actions,
conversational actions,

00:10:22.250 --> 00:10:24.973
vertical programs, and
so on and so forth.

00:10:24.973 --> 00:10:27.030
You have created
a foundation layer

00:10:27.030 --> 00:10:28.950
that enables you
to create actions

00:10:28.950 --> 00:10:30.960
across multiple
platforms, operating

00:10:30.960 --> 00:10:32.490
systems, and surfaces.

00:10:32.490 --> 00:10:34.984
We'll go a lot more into that.

00:10:34.984 --> 00:10:35.900
MARIYA NAGORNA: Great.

00:10:35.900 --> 00:10:39.060
So those were some
really cool examples

00:10:39.060 --> 00:10:41.040
of how the actions
of your Android app

00:10:41.040 --> 00:10:45.630
can be featured in suggestions
across the Android surfaces.

00:10:45.630 --> 00:10:48.710
Now let's take a look at some
of the steps of creating app

00:10:48.710 --> 00:10:51.090
actions to achieve just that.

00:10:51.090 --> 00:10:54.030
So first, using tools you're
all familiar with for building

00:10:54.030 --> 00:10:55.680
and publishing Android apps--

00:10:55.680 --> 00:10:58.890
namely the Android studio and
the Play Developer console--

00:10:58.890 --> 00:11:01.320
you'll create an
actions.xml file.

00:11:01.320 --> 00:11:04.560
And this is the central
place for all of the actions

00:11:04.560 --> 00:11:07.140
that your Android
app can support.

00:11:07.140 --> 00:11:09.240
There are two key
pieces of information

00:11:09.240 --> 00:11:11.740
that you'll need her
provide for each action.

00:11:11.740 --> 00:11:13.620
And that is the intent
and the fulfillment,

00:11:13.620 --> 00:11:17.470
which describes the what
and the how of your actions.

00:11:17.470 --> 00:11:19.800
So let's dive deeper into
some of these concepts,

00:11:19.800 --> 00:11:22.410
and we'll start with built-in
intents, which is how you

00:11:22.410 --> 00:11:25.440
indicate what your action does.

00:11:25.440 --> 00:11:27.930
My team at Google has
built and published

00:11:27.930 --> 00:11:31.570
a catalog of built-in intents,
and as Krishna mentioned,

00:11:31.570 --> 00:11:34.200
this is one of the core
foundational elements

00:11:34.200 --> 00:11:35.790
of app actions.

00:11:35.790 --> 00:11:38.940
If you think about the way
users ask for information,

00:11:38.940 --> 00:11:41.400
there's a myriad of
linguistic variations

00:11:41.400 --> 00:11:43.770
that they can use to
construct their query.

00:11:43.770 --> 00:11:46.680
So for example, they can
say calming activities,

00:11:46.680 --> 00:11:48.720
or they can say
breathing exercises

00:11:48.720 --> 00:11:50.940
to relax about my presentation.

00:11:50.940 --> 00:11:54.750
Or they can ask for a 10-minute
meditation techniques.

00:11:54.750 --> 00:11:57.030
All of these queries,
they indicate

00:11:57.030 --> 00:11:59.160
that the user would
like to de-stress,

00:11:59.160 --> 00:12:01.380
or they'd like to calm down.

00:12:01.380 --> 00:12:03.600
So we've designed,
built-in intents

00:12:03.600 --> 00:12:06.330
in such a way that
they abstract away

00:12:06.330 --> 00:12:08.910
all of the natural
linguistic variations,

00:12:08.910 --> 00:12:12.780
and we pass on only the relevant
information to your application

00:12:12.780 --> 00:12:15.990
from the user's query
using parameters.

00:12:15.990 --> 00:12:18.930
And so to give Google a
deep understanding of what

00:12:18.930 --> 00:12:21.720
your Android app can
do, what you need to do

00:12:21.720 --> 00:12:24.810
is register for the
relevant built-in intents

00:12:24.810 --> 00:12:27.000
that are relevant to
your app, and this

00:12:27.000 --> 00:12:29.550
will help Google show
the right actions

00:12:29.550 --> 00:12:33.310
to users at the right time.

00:12:33.310 --> 00:12:36.170
Here are some of the intents
that we're working on now.

00:12:36.170 --> 00:12:37.920
And the ones that have
a star next to them

00:12:37.920 --> 00:12:41.100
are available for developers
to try out today and preview.

00:12:41.100 --> 00:12:43.290
And throughout the
remainder of the year,

00:12:43.290 --> 00:12:47.280
we'll be continuously extending
this catalog to cover as many

00:12:47.280 --> 00:12:49.570
of your use cases as we can.

00:12:49.570 --> 00:12:52.050
And if you have an Android
app where we're not

00:12:52.050 --> 00:12:54.930
covering the use case currently,
please do give us feedback.

00:12:54.930 --> 00:12:56.640
We take it very
seriously, and we'll

00:12:56.640 --> 00:13:00.770
show you how to do that
at the end of this talk.

00:13:00.770 --> 00:13:02.660
Now let's talk
about fulfillment,

00:13:02.660 --> 00:13:06.650
which describes how a user
would invoke a specific action

00:13:06.650 --> 00:13:08.580
within your app.

00:13:08.580 --> 00:13:10.580
So when users express an
action that they'd like

00:13:10.580 --> 00:13:14.390
to accomplish-- a task or
an intent that they have--

00:13:14.390 --> 00:13:18.110
you can help them fulfill that
action by specifying deep links

00:13:18.110 --> 00:13:19.890
into your Android apps.

00:13:19.890 --> 00:13:22.370
So in your actions.xml,
you can define

00:13:22.370 --> 00:13:26.330
the mapping between the built-in
intents and the deep link URL.

00:13:26.330 --> 00:13:28.970
And this will enable Google
to show the right content

00:13:28.970 --> 00:13:31.310
to your users from
your Android app

00:13:31.310 --> 00:13:34.010
and deep link them directly
into the experience

00:13:34.010 --> 00:13:37.820
that they seek in
that specific moment.

00:13:37.820 --> 00:13:40.430
So we have two models
for fulfillment.

00:13:40.430 --> 00:13:43.430
In the first model, which
is the URL template model,

00:13:43.430 --> 00:13:46.100
we can start the
deep link URL based

00:13:46.100 --> 00:13:48.710
on the user's query parameters.

00:13:48.710 --> 00:13:50.900
And your actions.xml
will tell us

00:13:50.900 --> 00:13:54.110
how to map the parameters
from the built-in intent

00:13:54.110 --> 00:13:56.060
to the URL parameters.

00:13:56.060 --> 00:13:59.540
And this model is ideal
for action-centric apps

00:13:59.540 --> 00:14:01.520
with deep link APIs.

00:14:01.520 --> 00:14:07.670
And in the content-driven model,
we discover the fulfillment URL

00:14:07.670 --> 00:14:10.100
through your web content
or the structured data

00:14:10.100 --> 00:14:11.330
that you give us.

00:14:11.330 --> 00:14:13.310
And then based on
the user's query,

00:14:13.310 --> 00:14:15.710
we find the relevant
content and then use

00:14:15.710 --> 00:14:18.740
your actions.xml to
connect the content

00:14:18.740 --> 00:14:22.110
to the appropriate intent.

00:14:22.110 --> 00:14:24.540
So let's see an example
of how this would work,

00:14:24.540 --> 00:14:26.760
and we'll use the
Coursera Android app,

00:14:26.760 --> 00:14:28.350
and we'll show you
how they registered

00:14:28.350 --> 00:14:30.764
for the action of TAKE_COURSE.

00:14:30.764 --> 00:14:32.430
And the reason that
they want to do this

00:14:32.430 --> 00:14:35.280
is so that when a user
comes to the Android

00:14:35.280 --> 00:14:38.730
and they want to know
information about courses

00:14:38.730 --> 00:14:42.780
or education, we can ensure
that the Coursera app is

00:14:42.780 --> 00:14:45.070
shown to them as a suggestion.

00:14:45.070 --> 00:14:47.010
And for this demo,
we'll also show you

00:14:47.010 --> 00:14:51.900
how the suggestion will show
up on the Google Assistant.

00:14:51.900 --> 00:14:54.140
So for the built-in
intent, we created one,

00:14:54.140 --> 00:14:58.470
and it's called TAKE_COURSE,
and it takes a single parameter

00:14:58.470 --> 00:15:00.090
of the type course.

00:15:00.090 --> 00:15:01.710
And this is the
parameter that if you

00:15:01.710 --> 00:15:06.090
were to implement-- to register
for this particular intent,

00:15:06.090 --> 00:15:09.030
you would need to handle
it from the user's query.

00:15:09.030 --> 00:15:11.790
And so for example, the user
might say, take a machine

00:15:11.790 --> 00:15:14.580
learning course with
Coursera, and the assistant

00:15:14.580 --> 00:15:19.890
will know that machine learning
is of type course.name.

00:15:19.890 --> 00:15:23.760
Or, if they ask for find data
science courses on Coursera,

00:15:23.760 --> 00:15:26.550
the assistant will match
the data science parameter

00:15:26.550 --> 00:15:27.574
to the correct type.

00:15:27.574 --> 00:15:29.490
Of course, it named that
about, because that's

00:15:29.490 --> 00:15:31.440
what the course is about.

00:15:31.440 --> 00:15:33.630
Now you might wonder
how does Google exactly

00:15:33.630 --> 00:15:36.450
know this particular mapping?

00:15:36.450 --> 00:15:40.720
So in Coursera's
case, each course page

00:15:40.720 --> 00:15:43.710
is annotated with
schema.org markup,

00:15:43.710 --> 00:15:45.880
and there is a page
called Machine Learning,

00:15:45.880 --> 00:15:49.390
and it is associated
with a specific URL.

00:15:49.390 --> 00:15:52.300
So this is an example of the
content-based fulfillment

00:15:52.300 --> 00:15:57.130
that we talked about a
couple of slides back.

00:15:57.130 --> 00:16:00.340
And so to bring these
two things together--

00:16:00.340 --> 00:16:05.080
we have our actions XML, and we
tie these two things together

00:16:05.080 --> 00:16:06.980
in a really simple way.

00:16:06.980 --> 00:16:11.170
So first, you register for the
built-in intent of TAKE_COURSE,

00:16:11.170 --> 00:16:14.050
and then we take the
course parameter,

00:16:14.050 --> 00:16:17.950
and map it to the main web page
URL for Coursera for learning.

00:16:17.950 --> 00:16:18.640
And that's it.

00:16:18.640 --> 00:16:21.430
It is that simple.

00:16:21.430 --> 00:16:24.910
So let's now see how this
app action will show up

00:16:24.910 --> 00:16:28.390
on my Pixel device
in the Assistant.

00:16:28.390 --> 00:16:32.260
So lets go to the Assistant.

00:16:32.260 --> 00:16:36.220
And we'll ask it about
machine learning.

00:16:36.220 --> 00:16:37.000
Machine learning.

00:16:42.920 --> 00:16:43.770
Great.

00:16:43.770 --> 00:16:47.990
So what we see here is a basic
card about machine learning

00:16:47.990 --> 00:16:51.680
from the Assistant, but now
below in the suggestions,

00:16:51.680 --> 00:16:55.850
we see the TAKE_COURSE
action that we just created,

00:16:55.850 --> 00:16:58.430
and we know that it's from
Coursera because of the Apps

00:16:58.430 --> 00:16:59.360
icon.

00:16:59.360 --> 00:17:01.340
Now let's see what happens
when I tap into it.

00:17:04.090 --> 00:17:04.589
Awesome.

00:17:04.589 --> 00:17:06.810
So it takes me to
the Coursera app,

00:17:06.810 --> 00:17:09.540
directly into the Machine
Learning course page

00:17:09.540 --> 00:17:11.160
that I just asked about.

00:17:11.160 --> 00:17:13.859
And from here, I can
do things like enroll,

00:17:13.859 --> 00:17:18.270
and I can also explore
the rest of my app.

00:17:18.270 --> 00:17:21.420
So as the user, that was
really [? refreshing ?]

00:17:21.420 --> 00:17:24.859
about how quick and simple
that experience was for me.

00:17:24.859 --> 00:17:28.170
In just two taps, I was
able to enroll for my course

00:17:28.170 --> 00:17:29.280
right away.

00:17:29.280 --> 00:17:31.950
And for Coursera, it was
also fairly simple, right?

00:17:31.950 --> 00:17:35.540
Just by creating a
single actions.xml file,

00:17:35.540 --> 00:17:38.910
Coursera can now get users
to discover and reengage

00:17:38.910 --> 00:17:41.340
with their Android app
across multiple touch

00:17:41.340 --> 00:17:43.630
points on the Android device.

00:17:43.630 --> 00:17:45.510
But there's one caveat here.

00:17:45.510 --> 00:17:48.730
This will only work
on Android devices.

00:17:48.730 --> 00:17:51.960
Today, we know that users
are beginning to increasingly

00:17:51.960 --> 00:17:56.010
turn to new device types to
accomplish their daily tasks.

00:17:56.010 --> 00:17:57.660
And so in this next
part, we'll talk

00:17:57.660 --> 00:18:00.030
about how you can
go beyond Android

00:18:00.030 --> 00:18:02.160
and how you can reach
these users that

00:18:02.160 --> 00:18:05.890
are using these new devices
that don't run the Android.

00:18:05.890 --> 00:18:07.140
KRISHNA KUMAR: Thanks, Mariya.

00:18:07.140 --> 00:18:08.490
That was very cool.

00:18:08.490 --> 00:18:09.780
Just a single file--

00:18:09.780 --> 00:18:12.720
actions.xml-- and you
can get your actions

00:18:12.720 --> 00:18:15.120
surfacing up in various
touch points across operating

00:18:15.120 --> 00:18:16.080
systems.

00:18:16.080 --> 00:18:19.620
Works great for Android
devices, and you

00:18:19.620 --> 00:18:22.930
can bring up the content and
capabilities of your app.

00:18:22.930 --> 00:18:25.110
But what about all these
other devices which

00:18:25.110 --> 00:18:26.400
are coming up in the market?

00:18:26.400 --> 00:18:29.670
You cannot go to an electronic
store without seeing smart

00:18:29.670 --> 00:18:33.630
speakers, smart TVs, smart
displays, smart whatever.

00:18:33.630 --> 00:18:34.350
Right?

00:18:34.350 --> 00:18:37.020
And all of these are
Google Assistant enabled,

00:18:37.020 --> 00:18:39.240
but these are not Android
devices, or at least many

00:18:39.240 --> 00:18:41.640
of them are not Android devices.

00:18:41.640 --> 00:18:44.820
How do you, as a
service provider,

00:18:44.820 --> 00:18:47.400
bring your services--
bring your functionality--

00:18:47.400 --> 00:18:49.560
to all these new devices?

00:18:49.560 --> 00:18:51.600
And first of all, as
an Android developer,

00:18:51.600 --> 00:18:53.710
why should you even
care about that?

00:18:53.710 --> 00:18:56.250
Let's talk a little
bit about that.

00:18:56.250 --> 00:18:59.400
So, Google has been doing
a bunch of user research

00:18:59.400 --> 00:19:03.030
on how people interact,
get information,

00:19:03.030 --> 00:19:06.270
and get their tasks
done throughout the day.

00:19:06.270 --> 00:19:10.290
And our research has shown
that the way people interact

00:19:10.290 --> 00:19:12.450
to accomplish their
tasks throughout the day

00:19:12.450 --> 00:19:13.860
are very different.

00:19:13.860 --> 00:19:17.380
And the type of tasks that
they do is also very different.

00:19:17.380 --> 00:19:20.160
For example, in the
morning when you're quickly

00:19:20.160 --> 00:19:22.650
cooking breakfast and
you're in a rush to get out,

00:19:22.650 --> 00:19:25.260
you might quickly catch up
on news, find the traffic,

00:19:25.260 --> 00:19:29.130
find the weather, check your
calendar, and then rush out.

00:19:29.130 --> 00:19:31.680
And when you're commuting, you
might be checking the news,

00:19:31.680 --> 00:19:34.380
or listening to
music, navigating,

00:19:34.380 --> 00:19:36.360
and that's very
different from when

00:19:36.360 --> 00:19:38.040
you're at home in the evening--

00:19:38.040 --> 00:19:41.940
relaxing, cooking,
dinner, or watching the TV

00:19:41.940 --> 00:19:45.040
with your family and you want
to find out the latest buzz

00:19:45.040 --> 00:19:46.530
Netflix show, right?

00:19:46.530 --> 00:19:50.080
The types of devices
you use is different.

00:19:50.080 --> 00:19:52.590
The types of information
that you want to get

00:19:52.590 --> 00:19:53.910
is very different.

00:19:53.910 --> 00:19:57.000
In the context that you're in--
you're relaxing on the couch,

00:19:57.000 --> 00:19:58.310
or you're driving.

00:19:58.310 --> 00:20:01.140
Those contexts are
also very different.

00:20:01.140 --> 00:20:02.910
And increasingly,
users are starting

00:20:02.910 --> 00:20:05.670
to use many different
types of devices.

00:20:05.670 --> 00:20:08.489
When you're cooking breakfast--

00:20:08.489 --> 00:20:10.530
when your hands are greasy,
you don't necessarily

00:20:10.530 --> 00:20:11.940
want to pull off your phone--

00:20:11.940 --> 00:20:15.090
your brand-new, spanking
new, costly phone.

00:20:15.090 --> 00:20:17.340
And when you're
commuting, you might

00:20:17.340 --> 00:20:21.450
want to get some information
on the latest score,

00:20:21.450 --> 00:20:23.872
how does your day look like,
but your hands are busy.

00:20:23.872 --> 00:20:26.080
Or at least you shouldn't
be using your Android phone

00:20:26.080 --> 00:20:27.980
in those contexts.

00:20:27.980 --> 00:20:30.180
When you are going
for a jog, you

00:20:30.180 --> 00:20:31.740
might want to check
your calories,

00:20:31.740 --> 00:20:34.380
or you might want to check
the steps that you've done.

00:20:34.380 --> 00:20:36.090
But again, you may
not necessarily

00:20:36.090 --> 00:20:38.319
be carrying out your phone.

00:20:38.319 --> 00:20:40.110
And finally, when you're
in front of the TV

00:20:40.110 --> 00:20:42.600
and want to get the
latest Netflix show,

00:20:42.600 --> 00:20:45.990
the phone may not be
necessarily the best context.

00:20:45.990 --> 00:20:49.680
Users are increasingly becoming
more sophisticated on how

00:20:49.680 --> 00:20:51.990
they interact with
devices, and they

00:20:51.990 --> 00:20:55.710
expect that the devices will
provide the right information

00:20:55.710 --> 00:20:57.870
to them, as well as
help them accomplish

00:20:57.870 --> 00:21:00.390
their tasks in the
most hassle-free,

00:21:00.390 --> 00:21:02.929
and the most natural
way possible.

00:21:02.929 --> 00:21:04.470
They don't want to
contort themselves

00:21:04.470 --> 00:21:06.100
into trying to
use a device where

00:21:06.100 --> 00:21:10.080
it's not right for that
particular context.

00:21:10.080 --> 00:21:12.240
And Google Assistant
has been spending

00:21:12.240 --> 00:21:15.630
a lot of time thinking of
these critical user journeys

00:21:15.630 --> 00:21:20.360
and being there for the user
in all of these contexts.

00:21:20.360 --> 00:21:22.530
Google Assistant
enables you to interact

00:21:22.530 --> 00:21:24.990
with users in
completely new ways

00:21:24.990 --> 00:21:30.530
using a combination of voice,
rich UI, cards UI, and many

00:21:30.530 --> 00:21:32.670
of these inter-modal behaviors.

00:21:32.670 --> 00:21:37.050
It enables you to create
fundamentally new experiences,

00:21:37.050 --> 00:21:39.960
thus reaching and engaging
your users in a different way

00:21:39.960 --> 00:21:43.170
for these different contexts.

00:21:43.170 --> 00:21:46.080
And the Google Assistant is
now on across 500 million

00:21:46.080 --> 00:21:47.160
plus devices.

00:21:47.160 --> 00:21:50.430
Everything from phones, to
smart speakers, to smart TVs,

00:21:50.430 --> 00:21:53.250
to smart displays
and headphones.

00:21:53.250 --> 00:21:57.690
So that you can reach your
user in the right context,

00:21:57.690 --> 00:22:00.230
in the right place that
where they are and so

00:22:00.230 --> 00:22:03.315
that increases your breath
for options of your services

00:22:03.315 --> 00:22:04.940
across all of these
different contexts.

00:22:07.480 --> 00:22:11.780
Now, making a conversational
response interaction

00:22:11.780 --> 00:22:15.800
seems complex, but we have built
a cutting-edge technology stack

00:22:15.800 --> 00:22:18.180
to take away a lot
of that complexity.

00:22:18.180 --> 00:22:20.060
We have built all
this natural language

00:22:20.060 --> 00:22:23.060
processing-- individual voice
recognition, machine learning

00:22:23.060 --> 00:22:27.320
algorithms for inflection, et
cetera, different voice types,

00:22:27.320 --> 00:22:32.090
and using Google's core assets
in the Knowledge Graph identity

00:22:32.090 --> 00:22:34.340
payments and put
together a technology

00:22:34.340 --> 00:22:39.026
stack so that we can make it
easier for you as developers.

00:22:39.026 --> 00:22:41.150
Can you imagine building
all of this infrastructure

00:22:41.150 --> 00:22:43.430
by yourself for
every single app?

00:22:43.430 --> 00:22:45.080
It's just not feasible.

00:22:45.080 --> 00:22:47.000
So we have built this
technology stack,

00:22:47.000 --> 00:22:49.460
and we invite you
to build upon--

00:22:49.460 --> 00:22:51.920
on top of our technology
stack and focus

00:22:51.920 --> 00:22:54.615
on building compelling new
experiences for your users.

00:22:57.380 --> 00:22:59.360
Conversational
actions are, again,

00:22:59.360 --> 00:23:01.860
part of the larger
Google framework.

00:23:01.860 --> 00:23:04.210
You will use the
same intents Mariya

00:23:04.210 --> 00:23:05.720
talked about the
built-in intents

00:23:05.720 --> 00:23:08.720
that Mariya talked about
that you use for app actions

00:23:08.720 --> 00:23:11.040
also for conversational actions.

00:23:11.040 --> 00:23:13.610
And during the rest
of this session,

00:23:13.610 --> 00:23:16.400
we will see some of the
foundational elements that

00:23:16.400 --> 00:23:18.830
enable your Android
apps and services

00:23:18.830 --> 00:23:23.090
to work more seamlessly with
your conversational actions.

00:23:23.090 --> 00:23:25.910
But you're probably thinking
now, oh, man, this Google.

00:23:25.910 --> 00:23:28.820
They're asking me to rebuild
my whole app for voice.

00:23:28.820 --> 00:23:29.530
Come on.

00:23:29.530 --> 00:23:32.150
OK, so I'm not asking you
to rebuild or replicate

00:23:32.150 --> 00:23:33.800
your whole app.

00:23:33.800 --> 00:23:37.160
I want to bring this concept
of a companion conversational

00:23:37.160 --> 00:23:38.200
action.

00:23:38.200 --> 00:23:41.300
A companion action is
basically providing

00:23:41.300 --> 00:23:44.900
a snippet of information,
or helping the user complete

00:23:44.900 --> 00:23:47.930
a specific task
that the user might

00:23:47.930 --> 00:23:51.620
use of your service in
a different context.

00:23:51.620 --> 00:23:55.790
The best way to think about
this is through an example.

00:23:55.790 --> 00:23:58.460
Let us take the
case of GoalAlert.

00:23:58.460 --> 00:24:01.470
GoalAlert is a pretty
popular soccer app,

00:24:01.470 --> 00:24:06.150
which has rich information on
teams in Europe, league tables,

00:24:06.150 --> 00:24:08.210
points, all of that good stuff.

00:24:08.210 --> 00:24:08.930
Fantastic.

00:24:08.930 --> 00:24:10.820
I use it every day
during the World Cup.

00:24:10.820 --> 00:24:11.930
All right.

00:24:11.930 --> 00:24:15.680
So what happens when I go to a
completely different context.

00:24:15.680 --> 00:24:17.810
I'm driving to work
and I just want

00:24:17.810 --> 00:24:20.030
to catch up with the
latest score as to what

00:24:20.030 --> 00:24:21.590
happened yesterday.

00:24:21.590 --> 00:24:24.260
Keep in mind, an Android
app such as this,

00:24:24.260 --> 00:24:26.450
which is not part of
messaging or media

00:24:26.450 --> 00:24:29.600
will not show full-screen
on Android Auto.

00:24:29.600 --> 00:24:32.600
So how do you actually get
this information to the user

00:24:32.600 --> 00:24:35.460
and extend that reach
to a new context?

00:24:35.460 --> 00:24:37.360
So what GoalAlert has done is--

00:24:37.360 --> 00:24:39.530
they found the piece
of their service,

00:24:39.530 --> 00:24:41.690
such as check the
latest score, which

00:24:41.690 --> 00:24:46.190
makes more sense for the user in
a completely different context,

00:24:46.190 --> 00:24:49.610
and they have created a simple
conversational action, which

00:24:49.610 --> 00:24:52.730
provides the response for what
are results of the Premier

00:24:52.730 --> 00:24:55.580
League, or what happened
to that match yesterday,

00:24:55.580 --> 00:24:57.480
or what are the scores?

00:24:57.480 --> 00:24:59.740
So they created a rich
conversational plus UYRS

00:24:59.740 --> 00:25:05.330
response, which can be used
across all Assistant devices.

00:25:05.330 --> 00:25:06.980
Let's take another example--

00:25:06.980 --> 00:25:08.330
Todoist.

00:25:08.330 --> 00:25:11.840
Todoist, as everybody knows,
is a popular, to-do app.

00:25:11.840 --> 00:25:14.780
It's a rich to-do app with
more than 10 million downloads.

00:25:14.780 --> 00:25:17.250
It has all sorts of
detailed task information,

00:25:17.250 --> 00:25:19.910
different ways you can
manipulate it, et cetera.

00:25:19.910 --> 00:25:21.170
Great.

00:25:21.170 --> 00:25:23.780
What do you do when
you're cooking breakfast,

00:25:23.780 --> 00:25:28.610
and you just want to find what
tasks do I have due today?

00:25:28.610 --> 00:25:31.880
Here again, Todoist has thought
through the critical user

00:25:31.880 --> 00:25:35.240
journeys that their users
have and figured out

00:25:35.240 --> 00:25:38.750
that what task do
I have due today is

00:25:38.750 --> 00:25:42.770
a service which goes
across multiple contexts,

00:25:42.770 --> 00:25:44.880
across multiple devices.

00:25:44.880 --> 00:25:46.940
So they've created a
conversational action

00:25:46.940 --> 00:25:49.370
to provide a single,
easy response to,

00:25:49.370 --> 00:25:53.250
what do I have due today?

00:25:53.250 --> 00:25:55.640
So as far as a developer
journey with actions

00:25:55.640 --> 00:25:59.980
goes for building these
conversational actions, for app

00:25:59.980 --> 00:26:01.900
actions, you're
familiar with this.

00:26:01.900 --> 00:26:04.240
You're created an
Android APK, you're

00:26:04.240 --> 00:26:08.720
going to add an actions.xml
file using Android Studio.

00:26:08.720 --> 00:26:10.930
You will test it out
in Android Studio,

00:26:10.930 --> 00:26:13.330
and you will publish it using
the standard Play console

00:26:13.330 --> 00:26:16.740
mechanisms for publishing
your Android app.

00:26:16.740 --> 00:26:19.680
Let's take that
for conversational.

00:26:19.680 --> 00:26:21.970
For conversational,
you're going to, again,

00:26:21.970 --> 00:26:25.060
use the same built-in
intent mechanism to build

00:26:25.060 --> 00:26:27.110
conversational actions.

00:26:27.110 --> 00:26:29.710
You will build simple
conversational actions

00:26:29.710 --> 00:26:33.340
using dialogue flow,
which is a tool provided

00:26:33.340 --> 00:26:35.320
by Actions on Google.

00:26:35.320 --> 00:26:38.440
And you'll go to the Actions
on Google Actions console--

00:26:38.440 --> 00:26:42.490
to manage, publish, your
conversational agent

00:26:42.490 --> 00:26:43.675
and conversational action.

00:26:46.290 --> 00:26:49.170
Let us see how all of this
works together from a high level

00:26:49.170 --> 00:26:51.240
architecture perspective.

00:26:51.240 --> 00:26:53.520
If I'm creating an
app, and let's say

00:26:53.520 --> 00:26:56.460
this is Krishna's To-Do App.

00:26:56.460 --> 00:26:58.800
It's a task-based app.

00:26:58.800 --> 00:27:01.420
What I'm going to do is I'm
going to put up a web server--

00:27:01.420 --> 00:27:04.890
node.js or Apache or whatever--
connect it to a database

00:27:04.890 --> 00:27:08.730
where all of my users'
to-do tasks are stored,

00:27:08.730 --> 00:27:11.610
then I'm going to create an
Android app, which basically

00:27:11.610 --> 00:27:13.920
talks to the web server
to get that user's

00:27:13.920 --> 00:27:17.550
information provided back to my
app, which will render it based

00:27:17.550 --> 00:27:20.160
on the UI design of my app.

00:27:20.160 --> 00:27:23.550
The same concept works for
our friends down the street,

00:27:23.550 --> 00:27:27.030
and it also works for
event-based interface

00:27:27.030 --> 00:27:29.500
to your app.

00:27:29.500 --> 00:27:32.214
When you you then go to
conversational agents, what

00:27:32.214 --> 00:27:33.630
you're going to
do is you're going

00:27:33.630 --> 00:27:37.410
to create a conversational
agent, which basically will

00:27:37.410 --> 00:27:40.410
talk to your web server
using the same API, same

00:27:40.410 --> 00:27:42.810
infrastructure that
you're provided.

00:27:42.810 --> 00:27:45.570
What happens is
for a query of what

00:27:45.570 --> 00:27:49.460
task do I have today, the
assistant will take care

00:27:49.460 --> 00:27:51.930
of all of the lateral
language processing,

00:27:51.930 --> 00:27:53.730
query understanding--

00:27:53.730 --> 00:27:56.880
it understands what the
query is, and then in walks

00:27:56.880 --> 00:27:58.680
your agent.

00:27:58.680 --> 00:28:04.249
Your agent will then basically
understand that query,

00:28:04.249 --> 00:28:05.790
and now your agent
has to actually do

00:28:05.790 --> 00:28:08.320
a fulfillment for that query.

00:28:08.320 --> 00:28:11.460
So to do the fulfillment, what
you're going to do, is you're

00:28:11.460 --> 00:28:13.950
going to use a web
hook, which will

00:28:13.950 --> 00:28:17.010
connect to the web
server on your back end,

00:28:17.010 --> 00:28:20.580
and then provide the
response back to the user.

00:28:20.580 --> 00:28:23.930
The key point here is
that you, as a developer,

00:28:23.930 --> 00:28:28.500
are using the exact same
infrastructure, API, identity

00:28:28.500 --> 00:28:31.440
mechanisms that you
already used for your apps,

00:28:31.440 --> 00:28:34.590
to also provide a
conversational response for all

00:28:34.590 --> 00:28:36.000
of Assistant enabled devices.

00:28:39.040 --> 00:28:40.830
Now, let's talk
a little bit more

00:28:40.830 --> 00:28:42.550
about this foundational layer.

00:28:42.550 --> 00:28:45.450
Mariya explained a little
bit about built-in intents,

00:28:45.450 --> 00:28:48.660
but we also provide a certain
set of foundational elements,

00:28:48.660 --> 00:28:51.970
which basically lets
you create easy,

00:28:51.970 --> 00:28:54.600
seamless interaction
between your Android apps,

00:28:54.600 --> 00:28:57.930
and your conversational agents.

00:28:57.930 --> 00:29:01.710
Let's, again, go back to
out Todoist, our to-do app,

00:29:01.710 --> 00:29:04.590
and let's think a little
bit about account linking.

00:29:04.590 --> 00:29:06.420
You probably as an
Android developer,

00:29:06.420 --> 00:29:09.240
especially if you have some
sort of service back end,

00:29:09.240 --> 00:29:13.470
have some form of an
account management system.

00:29:13.470 --> 00:29:17.430
Todoist uses various
identity mechanism, including

00:29:17.430 --> 00:29:19.080
Google as an identity.

00:29:19.080 --> 00:29:22.440
And as a user, when I start
using Todoist on Android,

00:29:22.440 --> 00:29:24.150
I can create my
identity using Google

00:29:24.150 --> 00:29:28.140
or through some other
identity mechanisms.

00:29:28.140 --> 00:29:32.430
When you go to the Assistant,
and when you set up

00:29:32.430 --> 00:29:35.910
Todoist do for the first
time on your Assistant,

00:29:35.910 --> 00:29:38.070
you will have to
link your Todoist

00:29:38.070 --> 00:29:41.080
identity to the Assistant.

00:29:41.080 --> 00:29:43.830
Once you do the
linking, you can use

00:29:43.830 --> 00:29:47.970
your conversational response
across any Assistant-enabled

00:29:47.970 --> 00:29:52.050
device without having to
log in into Todoist again.

00:29:52.050 --> 00:29:55.530
The key point here is
that in Actions console,

00:29:55.530 --> 00:29:59.640
you can link your accounts so
that things work seamlessly.

00:29:59.640 --> 00:30:03.040
And with one step of account
linking for the user,

00:30:03.040 --> 00:30:06.735
the user can use Todoist across
any Assistant-enabled device.

00:30:09.310 --> 00:30:10.690
That was account linking.

00:30:10.690 --> 00:30:13.420
Let us talk a little bit
about play, entitlements,

00:30:13.420 --> 00:30:16.150
and seamless digital
subscriptions.

00:30:16.150 --> 00:30:19.860
The interesting thing is that
both the Assistant and Android

00:30:19.860 --> 00:30:23.920
uses this Google Play for
inventory and order management,

00:30:23.920 --> 00:30:26.680
and entitlements management.

00:30:26.680 --> 00:30:28.480
Because of the fact
that both of them

00:30:28.480 --> 00:30:32.140
use the same Google Play
infrastructure, entitlements,

00:30:32.140 --> 00:30:36.400
subscriptions, in-app
purchases work seamlessly

00:30:36.400 --> 00:30:40.560
across both Assistant
and Android.

00:30:40.560 --> 00:30:44.150
Let us take the case
of Economist Espresso.

00:30:44.150 --> 00:30:47.200
"Economist" is a great
magazine, and they

00:30:47.200 --> 00:30:49.660
have an app called
Economist Espresso, which

00:30:49.660 --> 00:30:53.460
has a subscription feature to
get their premium articles.

00:30:53.460 --> 00:30:56.020
I went and logged
into my Android app,

00:30:56.020 --> 00:30:58.420
and paid the
subscription in Android.

00:30:58.420 --> 00:31:02.140
Now, when I go to the Assistant
and use Economist Espresso,

00:31:02.140 --> 00:31:05.740
I immediately get access to
all of their premium content,

00:31:05.740 --> 00:31:09.550
because the Assistant also
knows that I have a premium

00:31:09.550 --> 00:31:11.500
subscription to
Economist Espresso,

00:31:11.500 --> 00:31:16.660
and hence I'm eligible for
all of the premium content.

00:31:16.660 --> 00:31:18.490
And this works reverse, also.

00:31:18.490 --> 00:31:22.290
You can purchase subscriptions
in the Assistant,

00:31:22.290 --> 00:31:26.310
and it will work on
your Android app, also.

00:31:26.310 --> 00:31:28.250
And the way this works,
again, can be done

00:31:28.250 --> 00:31:30.560
and the Actions console.

00:31:30.560 --> 00:31:33.830
The Assistant first will
check whether you have access

00:31:33.830 --> 00:31:35.750
to these premium subscriptions.

00:31:35.750 --> 00:31:39.470
You can then purchase content
using the same Inventory

00:31:39.470 --> 00:31:41.210
and Order Management System.

00:31:41.210 --> 00:31:43.580
And then your
premium subscriptions

00:31:43.580 --> 00:31:45.620
work across the Assistant,
and, as mentioned,

00:31:45.620 --> 00:31:47.420
also across Android.

00:31:47.420 --> 00:31:51.230
So in all of these scenarios
about companion conversational

00:31:51.230 --> 00:31:54.710
actions, these
developers-- what they did

00:31:54.710 --> 00:31:58.220
is, they thought of this
very specific use case

00:31:58.220 --> 00:32:00.360
and built a
conversational action.

00:32:00.360 --> 00:32:02.990
So here are my principles
for building a companion

00:32:02.990 --> 00:32:05.630
conversational action.

00:32:05.630 --> 00:32:07.610
You're not just an app provider.

00:32:07.610 --> 00:32:09.410
You are a service provider.

00:32:09.410 --> 00:32:11.150
And as a service
provider, you want

00:32:11.150 --> 00:32:13.620
to take your service,
your functionality,

00:32:13.620 --> 00:32:15.780
to many new contexts.

00:32:15.780 --> 00:32:18.350
So think beyond the app
and think of the service

00:32:18.350 --> 00:32:20.270
that you're providing.

00:32:20.270 --> 00:32:23.890
Also, what is the critical
user journey for your service?

00:32:23.890 --> 00:32:27.440
Like, how do people actually
interact with your service?

00:32:27.440 --> 00:32:28.850
In what context?

00:32:28.850 --> 00:32:30.290
In what device?

00:32:30.290 --> 00:32:32.930
And can you think of
new contexts and devices

00:32:32.930 --> 00:32:38.490
in which your service actually
makes sense to the user?

00:32:38.490 --> 00:32:43.470
And also, you're going to
expand the reach of your service

00:32:43.470 --> 00:32:46.410
quite a bit, but please do
not think of just replicating

00:32:46.410 --> 00:32:48.154
your whole app for voice.

00:32:48.154 --> 00:32:50.070
You need to think of the
specific service that

00:32:50.070 --> 00:32:52.030
makes sense for the user.

00:32:52.030 --> 00:32:53.700
So my challenge to you is--

00:32:53.700 --> 00:32:55.920
what are the compelling
new experiences

00:32:55.920 --> 00:32:59.430
that you can create by
integrating with the Google

00:32:59.430 --> 00:33:01.830
Assistant?

00:33:01.830 --> 00:33:03.570
Please join these
number of providers

00:33:03.570 --> 00:33:05.370
who have already
created an Android app,

00:33:05.370 --> 00:33:07.350
but have also
expanded their reach

00:33:07.350 --> 00:33:09.510
to a number of
Google-enabled devices

00:33:09.510 --> 00:33:11.130
by building a
conversational agent.

00:33:13.817 --> 00:33:15.150
MARIYA NAGORNA: Thanks, Krishna.

00:33:15.150 --> 00:33:18.240
So that was a really
high-level overview

00:33:18.240 --> 00:33:21.180
for how you can think
about companion actions

00:33:21.180 --> 00:33:22.620
to your Android app.

00:33:22.620 --> 00:33:25.140
How to really think
about the experience

00:33:25.140 --> 00:33:28.140
that you can provide your users
for those times in their life

00:33:28.140 --> 00:33:30.810
when their Android device
just might not be handy.

00:33:30.810 --> 00:33:35.250
So there's two such times that
come to my mind right away.

00:33:35.250 --> 00:33:38.010
First of which is while I'm
driving and my full attention

00:33:38.010 --> 00:33:40.290
needs to be on the road,
and my Android device

00:33:40.290 --> 00:33:42.000
is usually in my pocket.

00:33:42.000 --> 00:33:44.190
And then the second
is while I'm cooking,

00:33:44.190 --> 00:33:47.160
and my hands are usually
either busy or they're dirty,

00:33:47.160 --> 00:33:49.110
and it's really
inconvenient to have

00:33:49.110 --> 00:33:52.950
to keep going back and forth
between washing my hands,

00:33:52.950 --> 00:33:56.790
unlocking my phone, reading
the recipe, making my food,

00:33:56.790 --> 00:33:59.130
washing my hands, unlocking
my phone-- you get the idea,

00:33:59.130 --> 00:33:59.629
right?

00:33:59.629 --> 00:34:01.680
This is a normal
cooking process.

00:34:01.680 --> 00:34:05.440
So I have two devices to
help me in these situations.

00:34:05.440 --> 00:34:07.560
I have the Assistant
in my car, and I

00:34:07.560 --> 00:34:11.739
have the Smart Display at home.

00:34:11.739 --> 00:34:14.050
So I'd like to go back
to the Coursera example

00:34:14.050 --> 00:34:16.900
that we introduced
earlier, and I'd

00:34:16.900 --> 00:34:19.239
like to show you how
we helped them take

00:34:19.239 --> 00:34:22.480
their app beyond Android so
that it could accompany me

00:34:22.480 --> 00:34:24.370
throughout my day
with the situations

00:34:24.370 --> 00:34:25.929
that I just described.

00:34:25.929 --> 00:34:28.929
So we all know machine
learning is a pretty hot topic

00:34:28.929 --> 00:34:29.870
right now.

00:34:29.870 --> 00:34:32.290
And so as we saw earlier,
I did register for it

00:34:32.290 --> 00:34:33.580
on for it on Coursera.

00:34:33.580 --> 00:34:36.639
And I like to go through
my courses after work.

00:34:36.639 --> 00:34:38.949
So I like to listen
to the course podcast

00:34:38.949 --> 00:34:42.010
while I'm driving in my car,
and then when I get home,

00:34:42.010 --> 00:34:44.800
I like to continue watching
the video for the course

00:34:44.800 --> 00:34:47.460
that I started to
listen to in the car.

00:34:47.460 --> 00:34:53.050
Now neither my car nor my smart
device at home run Android.

00:34:53.050 --> 00:34:57.740
Both of these devices, they only
work with the Google Assistant.

00:34:57.740 --> 00:35:00.880
And so let's see how we helped
build the Coursera companion

00:35:00.880 --> 00:35:04.460
app that works on
the Google Assistant.

00:35:04.460 --> 00:35:07.680
Here's the actions.xml
that we showed you earlier

00:35:07.680 --> 00:35:10.870
where they registered for the
TAKE_COURSE built-in intent.

00:35:10.870 --> 00:35:14.380
And now after their APK
was approved and published

00:35:14.380 --> 00:35:16.780
in the Play Developer
console, there now

00:35:16.780 --> 00:35:19.810
appeared an option
there to enhance actions

00:35:19.810 --> 00:35:21.760
with actions on Google.

00:35:21.760 --> 00:35:25.600
And clicking there lands us
in the Actions Console Project

00:35:25.600 --> 00:35:27.250
Claiming Page.

00:35:27.250 --> 00:35:30.190
Now, this console is
a really focused way

00:35:30.190 --> 00:35:33.370
to develop and manage your
companion action for the Google

00:35:33.370 --> 00:35:34.450
Assistant.

00:35:34.450 --> 00:35:36.550
And we're very excited
because this week, we

00:35:36.550 --> 00:35:39.040
announced a major
redesign of this console,

00:35:39.040 --> 00:35:42.840
and it basically helps
you do three main things.

00:35:42.840 --> 00:35:45.260
It first allows
you to configure,

00:35:45.260 --> 00:35:47.050
set up the metadata
and the directory

00:35:47.050 --> 00:35:50.440
listing information
for your companion app.

00:35:50.440 --> 00:35:54.070
And then it allows you to manage
the development, the testing,

00:35:54.070 --> 00:35:57.400
and the deployment process
in a very fine-grained way.

00:35:57.400 --> 00:35:59.650
And then once your
action is published,

00:35:59.650 --> 00:36:02.020
it gives you
analytics so that you

00:36:02.020 --> 00:36:04.960
can track how your
action is doing out there

00:36:04.960 --> 00:36:07.850
with real users
in the real world.

00:36:07.850 --> 00:36:10.120
Now, there's a lot of
magic that happens here

00:36:10.120 --> 00:36:12.310
during this project
claiming stage.

00:36:12.310 --> 00:36:15.910
For example, we automatically
import most of the information

00:36:15.910 --> 00:36:18.390
that you provided
in the actions.xml

00:36:18.390 --> 00:36:22.190
to make it easier for you to
develop your companion app.

00:36:22.190 --> 00:36:25.561
Now let's see with the Actions
console looks like for Coursera

00:36:25.561 --> 00:36:27.560
after they've gone through
the claiming process.

00:36:32.200 --> 00:36:34.230
So this is the Actions console.

00:36:34.230 --> 00:36:37.200
And we can see that it's already
set up with the Coursera demo

00:36:37.200 --> 00:36:38.490
app.

00:36:38.490 --> 00:36:40.350
Let's look into this
Actions section.

00:36:42.960 --> 00:36:46.380
And we see here the
TAKE_COURSE built-in intent

00:36:46.380 --> 00:36:48.960
that we had in Android
was automatically

00:36:48.960 --> 00:36:51.210
imported from
actions.xml when we went

00:36:51.210 --> 00:36:53.880
through that claiming process.

00:36:53.880 --> 00:36:58.870
And when we click
in, we'll hopefully

00:36:58.870 --> 00:37:01.900
see some magical
information show up here.

00:37:01.900 --> 00:37:02.800
There you go.

00:37:02.800 --> 00:37:05.460
So we see all of
the triggering--

00:37:05.460 --> 00:37:07.390
we see all of the
important information

00:37:07.390 --> 00:37:09.350
that you would want to
know about this action.

00:37:09.350 --> 00:37:12.820
So for example, the
triggering phrases up there,

00:37:12.820 --> 00:37:15.040
these are sample
invocations that users

00:37:15.040 --> 00:37:18.860
can use to invoke this
particular action.

00:37:18.860 --> 00:37:21.490
And we see the
parameters, as well as

00:37:21.490 --> 00:37:23.860
the fulfillment information
that you provided us

00:37:23.860 --> 00:37:26.350
in your actions.xml, and
that was automatically

00:37:26.350 --> 00:37:28.760
imported into here.

00:37:28.760 --> 00:37:31.750
Now that we have this basic
wiring set up, what we can do

00:37:31.750 --> 00:37:35.740
is we can create a rich response
using dialogue flow to cover

00:37:35.740 --> 00:37:37.900
those two cases that
I described I wanted

00:37:37.900 --> 00:37:39.540
to have earlier for Coursera.

00:37:39.540 --> 00:37:42.580
So to listen to my course
podcast while I'm driving

00:37:42.580 --> 00:37:46.180
and then to continue watching
my video when I get at home.

00:37:46.180 --> 00:37:48.310
And to do that,
you would just add

00:37:48.310 --> 00:37:50.680
the fulfillment of
conversational type here,

00:37:50.680 --> 00:37:52.960
and this will land
us in dialogue flow

00:37:52.960 --> 00:37:57.320
where you can specify the
details about the fulfillment.

00:37:57.320 --> 00:37:59.650
Now, because we're a
bit short on time today,

00:37:59.650 --> 00:38:02.830
I won't show you how you can
build fulfillment from scratch,

00:38:02.830 --> 00:38:05.440
but there are a
few key components

00:38:05.440 --> 00:38:07.540
that I'd like to walk
through so that you can see

00:38:07.540 --> 00:38:09.920
how you do this for yourself.

00:38:09.920 --> 00:38:13.300
So this is the dialogue flow
to, and this is the JavaScript

00:38:13.300 --> 00:38:15.760
for our fulfillment code.

00:38:15.760 --> 00:38:19.570
We see here that we first use
the TAKE_COURSE built-in intent

00:38:19.570 --> 00:38:21.880
that we walked through
earlier, and then

00:38:21.880 --> 00:38:25.270
we reference the
course parameter

00:38:25.270 --> 00:38:29.290
to understand what is the name
of the course that is coming

00:38:29.290 --> 00:38:32.500
in from the user's query.

00:38:32.500 --> 00:38:36.940
We also created a function that
calls the back end Coursera

00:38:36.940 --> 00:38:40.000
service to get the
details from the course

00:38:40.000 --> 00:38:42.550
that the user is asking about.

00:38:42.550 --> 00:38:45.130
And then when we get the
response, what we can do

00:38:45.130 --> 00:38:46.010
is parse it.

00:38:46.010 --> 00:38:48.310
And for this particular
example, we'll just

00:38:48.310 --> 00:38:51.670
create a simple card that
shows us all of the course

00:38:51.670 --> 00:38:57.730
information, and then we
use our media response API

00:38:57.730 --> 00:39:01.210
to return the audio or
the video of the course

00:39:01.210 --> 00:39:04.000
based on what device
I'm running on.

00:39:04.000 --> 00:39:10.180
Now, one really amazing
thing about dialogue flow

00:39:10.180 --> 00:39:14.680
is that it's simply integrated
with the Actions console.

00:39:14.680 --> 00:39:17.530
It has a really deep
integration with that console.

00:39:17.530 --> 00:39:21.130
And so this provides a really
nice development environment

00:39:21.130 --> 00:39:23.440
where you can do
things like test

00:39:23.440 --> 00:39:25.390
how this would work on
the Google Assistant

00:39:25.390 --> 00:39:27.940
directly from this
UI, just by simply

00:39:27.940 --> 00:39:29.900
clicking in this section.

00:39:29.900 --> 00:39:32.920
So let's see how this
basic card that I just

00:39:32.920 --> 00:39:35.300
showed you we created would
look like in the simulator.

00:39:38.340 --> 00:39:41.240
So this is the
simulator, and we also

00:39:41.240 --> 00:39:43.160
have a Test On
Device option so you

00:39:43.160 --> 00:39:45.950
can test during your
process to see how

00:39:45.950 --> 00:39:47.910
it would work on the device.

00:39:47.910 --> 00:39:51.590
But for now, let's see how
this would work when we

00:39:51.590 --> 00:39:53.210
invoke our Coursera demo app.

00:39:53.210 --> 00:40:00.780
So we'll say, ask Coursera demo
to start my machine learning

00:40:00.780 --> 00:40:01.280
course.

00:40:05.282 --> 00:40:07.240
GOOGLE ASSISTANT: Sure,
here's the test version

00:40:07.240 --> 00:40:09.214
of Coursera demo.

00:40:09.214 --> 00:40:10.630
SPEAKER 1: Here's
more information

00:40:10.630 --> 00:40:12.280
about machine learning.

00:40:12.280 --> 00:40:13.974
Do you want to start the course?

00:40:13.974 --> 00:40:14.890
MARIYA NAGORNA: Great.

00:40:14.890 --> 00:40:17.650
So what we see here is the
card that we created, right?

00:40:17.650 --> 00:40:21.280
So all of this description
information down here,

00:40:21.280 --> 00:40:24.760
the title of the card,
this image, the suggestion

00:40:24.760 --> 00:40:25.720
chips down there--

00:40:25.720 --> 00:40:27.940
they were all specified
in the fulfillment code

00:40:27.940 --> 00:40:30.170
that I showed you
in dialogue below.

00:40:30.170 --> 00:40:32.660
So now let's say yes to
start the course podcast.

00:40:35.580 --> 00:40:38.380
SPEAKER 1: Sure, here's your
course on machine learning.

00:40:38.380 --> 00:40:40.005
SPEAKER 2: Our first
learning algorithm

00:40:40.005 --> 00:40:41.534
will be linear aggression.

00:40:41.534 --> 00:40:42.450
MARIYA NAGORNA: Great.

00:40:42.450 --> 00:40:45.630
So this allows me to listen
to the course podcast

00:40:45.630 --> 00:40:46.710
while I'm driving.

00:40:46.710 --> 00:40:49.530
Now let's imagine that I
started doing that in my car,

00:40:49.530 --> 00:40:53.070
and then when I get home, I want
to continue watching my video

00:40:53.070 --> 00:40:55.420
on the Smart Display device.

00:40:55.420 --> 00:40:58.510
So let's try it here
and hopefully it works.

00:40:58.510 --> 00:41:01.680
OK, Google, continue my course.

00:41:05.404 --> 00:41:08.070
GOOGLE ASSISTANT: Sorry, I don't
know how to help with that yet.

00:41:08.070 --> 00:41:10.710
But I'm trying to learn.

00:41:10.710 --> 00:41:12.630
MARIYA NAGORNA: OK, Google.

00:41:12.630 --> 00:41:13.740
Continue my course.

00:41:16.560 --> 00:41:19.248
GOOGLE ASSISTANT: Sorry, I don't
know how to help with that.

00:41:19.248 --> 00:41:19.410
I'm still trying.

00:41:19.410 --> 00:41:20.580
KRISHNA KUMAR: Third try.

00:41:20.580 --> 00:41:26.220
MARIYA NAGORNA: OK Google,
continue my course.

00:41:26.220 --> 00:41:28.390
GOOGLE ASSISTANT: OK,
let's get Coursera.

00:41:28.390 --> 00:41:30.160
SPEAKER 1: Welcome
to Coursera, do you

00:41:30.160 --> 00:41:33.320
want to continue your
machine learning course?

00:41:33.320 --> 00:41:35.910
MARIYA NAGORNA: Yes.

00:41:35.910 --> 00:41:37.910
SPEAKER 1: Sure,
here is your course.

00:41:37.910 --> 00:41:40.697
SPEAKER 2: [INAUDIBLE].

00:41:40.697 --> 00:41:41.780
MARIYA NAGORNA: Thank you.

00:41:41.780 --> 00:41:45.600
[APPLAUSE]

00:41:45.600 --> 00:41:47.680
Thank you, demo gods.

00:41:47.680 --> 00:41:50.970
All right, so let me jump in on
a quick recap of what we just

00:41:50.970 --> 00:41:51.900
did.

00:41:51.900 --> 00:41:54.690
We showed you how to
create actions.xml

00:41:54.690 --> 00:41:57.900
and how to use built-in
intents to enable actions

00:41:57.900 --> 00:41:59.130
in your Android app.

00:41:59.130 --> 00:42:00.780
And then we showed
you how by doing

00:42:00.780 --> 00:42:02.940
so your app can
now be discovered

00:42:02.940 --> 00:42:05.430
across the many
surfaces on Android.

00:42:05.430 --> 00:42:07.500
Now, we briefly glossed
over these, too,

00:42:07.500 --> 00:42:09.810
but we had our colleagues
give a whole talk on how

00:42:09.810 --> 00:42:11.604
to build app actions
two days ago,

00:42:11.604 --> 00:42:13.020
and if you missed
it, don't worry,

00:42:13.020 --> 00:42:15.930
please do go ahead and
watch the video on YouTube.

00:42:15.930 --> 00:42:17.880
Now in the main
part of the demo,

00:42:17.880 --> 00:42:21.390
we walked through how to claim
your actions on Google Project

00:42:21.390 --> 00:42:25.810
so that you can enable your
actions to work on new devices.

00:42:25.810 --> 00:42:28.240
And finally, we showed
you how to build and test

00:42:28.240 --> 00:42:31.350
a simple companion app
that works great with audio

00:42:31.350 --> 00:42:33.330
and video on a Smart Display.

00:42:33.330 --> 00:42:35.190
Now, we certainly think
this is very cool.

00:42:35.190 --> 00:42:38.760
We're very excited, and we tried
to make it really easy for you

00:42:38.760 --> 00:42:42.420
so that a companion app like
this is just another interface

00:42:42.420 --> 00:42:44.310
to your existing service.

00:42:44.310 --> 00:42:46.950
Building experiences
that work on devices

00:42:46.950 --> 00:42:49.710
which don't run Android
is not about bringing up

00:42:49.710 --> 00:42:52.230
completely new
infrastructure from scratch.

00:42:52.230 --> 00:42:54.570
It's more about just
extending your apps

00:42:54.570 --> 00:42:58.110
to be more action centric and
more focused on connecting

00:42:58.110 --> 00:43:01.650
with your users throughout
their day, wherever they are--

00:43:01.650 --> 00:43:04.170
whether they're at home
or they're on the go.

00:43:04.170 --> 00:43:11.280
So with that, let me
invite you to visit our web

00:43:11.280 --> 00:43:14.130
page at actions.google.com
to learn more

00:43:14.130 --> 00:43:17.070
about the concepts and the
tools that we covered today.

00:43:17.070 --> 00:43:19.500
And we want to hear from
you, so please do sign up

00:43:19.500 --> 00:43:24.720
at g.co/AppActions so that
you can give us feedback

00:43:24.720 --> 00:43:26.580
on our built-in intent catalog.

00:43:26.580 --> 00:43:28.790
And also by signing up,
you'll get notified when

00:43:28.790 --> 00:43:31.000
app actions become available.

00:43:31.000 --> 00:43:33.930
But most importantly, what
we encourage you today

00:43:33.930 --> 00:43:36.360
is start thinking
about the experience

00:43:36.360 --> 00:43:39.600
you can provide your users
for those times in their life

00:43:39.600 --> 00:43:41.100
when their Android
device just might

00:43:41.100 --> 00:43:44.010
be impractical or just
inconvenient to use

00:43:44.010 --> 00:43:45.210
in that moment.

00:43:45.210 --> 00:43:48.420
Take the next step today
and build companion actions

00:43:48.420 --> 00:43:51.690
on devices that work for
the Google Assistant.

00:43:51.690 --> 00:43:53.620
We want to thank
you for joining us.

00:43:53.620 --> 00:43:56.500
And if you have any questions,
please come by our office hours

00:43:56.500 --> 00:43:58.140
in the sandbox area.

00:43:58.140 --> 00:44:00.820
Please enjoy the rest
of your time at I/O.

00:44:00.820 --> 00:44:06.415
[MUSIC PLAYING]

