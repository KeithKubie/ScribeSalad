WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.790
[MUSIC PLAYING]

00:00:08.790 --> 00:00:09.400
ADAM KOCH: Hi.

00:00:09.400 --> 00:00:11.970
My name's Adam Koch from the
Android Developer Relations

00:00:11.970 --> 00:00:13.550
team at Google.

00:00:13.550 --> 00:00:15.550
Today, I wanted to talk
to you about the new SMS

00:00:15.550 --> 00:00:19.080
APIs in Android 4.4 KitKat.

00:00:19.080 --> 00:00:20.900
So let's jump right in.

00:00:20.900 --> 00:00:23.330
Starting with
Android 4.4 KitKat,

00:00:23.330 --> 00:00:27.290
there's the new concept of
a default SMS application.

00:00:27.290 --> 00:00:30.460
Only the default SMS
application can write directly

00:00:30.460 --> 00:00:33.470
to the system ContentProvider.

00:00:33.470 --> 00:00:36.504
Other apps that try and
write will fail silently.

00:00:36.504 --> 00:00:38.545
Of course, any app can
still read from the system

00:00:38.545 --> 00:00:41.045
ContentProvider as long as they
have the correct permission.

00:00:43.564 --> 00:00:45.022
So you might be
thinking, why do we

00:00:45.022 --> 00:00:48.390
need this new concept
of a default SMS app?

00:00:48.390 --> 00:00:51.200
In previous versions
of Android, you

00:00:51.200 --> 00:00:55.190
could already assign some of the
SMS intents to any application.

00:00:55.190 --> 00:00:58.420
But the difference is, that
app had no unique privileges

00:00:58.420 --> 00:01:01.260
over any other
app on the system.

00:01:01.260 --> 00:01:04.370
With the new default
SMS app selection,

00:01:04.370 --> 00:01:07.070
that app will now have
additional privileges

00:01:07.070 --> 00:01:10.200
and be guaranteed to get
every single message.

00:01:10.200 --> 00:01:12.960
Another app cannot abort
the delivery of the SMS

00:01:12.960 --> 00:01:14.930
or interrupt that flow.

00:01:14.930 --> 00:01:17.880
This helps to
increase reliability.

00:01:17.880 --> 00:01:20.340
Additionally, no other app
can delete or alter messages

00:01:20.340 --> 00:01:22.440
out from underneath
the default app, which

00:01:22.440 --> 00:01:26.750
helps to decrease complexity
within the default SMS app.

00:01:26.750 --> 00:01:28.910
This, combined with
the fact that some

00:01:28.910 --> 00:01:32.420
of the previously private APIs
in earlier versions of Android

00:01:32.420 --> 00:01:36.540
are now public, means
that third-party SMS apps

00:01:36.540 --> 00:01:39.600
are supported first-class
citizens of the Android system.

00:01:44.480 --> 00:01:46.430
So let's talk about
implementation.

00:01:46.430 --> 00:01:48.690
To be eligible as
the default SMS app,

00:01:48.690 --> 00:01:52.480
you must support some
specific capabilities.

00:01:52.480 --> 00:01:54.480
In your AndroidManifest,
you have

00:01:54.480 --> 00:01:56.750
to define two
receivers to handle

00:01:56.750 --> 00:02:00.639
the receiving of
SMSes and MMSes.

00:02:00.639 --> 00:02:02.180
You can see here
that the actions are

00:02:02.180 --> 00:02:05.830
SMS_DELIVER and
WAP_PUSH_DELIVER You'll also

00:02:05.830 --> 00:02:08.030
note that these
receivers require

00:02:08.030 --> 00:02:10.410
an additional permission
on the actual receiver.

00:02:14.170 --> 00:02:17.130
Additionally, you have to
define an activity, a UI that

00:02:17.130 --> 00:02:21.500
can handle creation
of new SMSes.

00:02:21.500 --> 00:02:24.060
So here we've got a
ComposeSmsActivity.

00:02:24.060 --> 00:02:26.910
This might be triggered, say,
from the system people app

00:02:26.910 --> 00:02:29.785
when you go and create a new
SMS to a particular contact.

00:02:33.210 --> 00:02:35.940
And lastly, you
also need a service

00:02:35.940 --> 00:02:39.840
that can also respond to
creating and sending new SMSes.

00:02:39.840 --> 00:02:43.600
This is used by the system
when a phone call comes in.

00:02:43.600 --> 00:02:45.540
And if you can't take
it, you can quickly

00:02:45.540 --> 00:02:47.960
swipe up to send an
SMS in the background

00:02:47.960 --> 00:02:51.150
to the person saying the
reason why you can't actually

00:02:51.150 --> 00:02:51.930
take that call.

00:02:55.470 --> 00:02:57.510
Once you've defined
all of these things,

00:02:57.510 --> 00:03:00.900
you'll be eligible to show up
in a new system dialogue that

00:03:00.900 --> 00:03:04.570
lets you choose the
default SMS app.

00:03:04.570 --> 00:03:07.310
Additionally, you can
also display a dialogue

00:03:07.310 --> 00:03:10.170
that lets the user switch to
your application as the default

00:03:10.170 --> 00:03:11.360
SMS app.

00:03:11.360 --> 00:03:14.804
And I'll show you how to do
that shortly, after this.

00:03:14.804 --> 00:03:16.470
One thing worth noting
is that you still

00:03:16.470 --> 00:03:19.030
need to declare the same
application-wide permissions

00:03:19.030 --> 00:03:21.870
that you always did to
access SMS functionality,

00:03:21.870 --> 00:03:26.574
things like WRITE_SMS,
READ-SMS, SEND_SMS, RECEIVE_SMS,

00:03:26.574 --> 00:03:27.240
and RECEIVE_MMS.

00:03:30.092 --> 00:03:31.550
In some of the
previous slides, you

00:03:31.550 --> 00:03:33.920
will have seen that two
receivers we defined

00:03:33.920 --> 00:03:37.314
have two new KitKat delivery
actions, SMS_DELIVER_ACTION

00:03:37.314 --> 00:03:38.480
and WAP_PUSH_DELIVER_ACTION.

00:03:41.850 --> 00:03:46.510
These only get delivered to
the default SMS application.

00:03:46.510 --> 00:03:48.030
But in previous
versions of Android,

00:03:48.030 --> 00:03:50.460
there was actually
a private API that

00:03:50.460 --> 00:03:53.980
allowed you to also
receive these SMSes.

00:03:53.980 --> 00:03:56.470
These actions were
SMS_RECEIVED_ACTION

00:03:56.470 --> 00:03:58.970
and WAP_PUSH_RECEIVED_ACTION.

00:03:58.970 --> 00:04:02.830
And these still exist in KitKat
and are actually now public.

00:04:02.830 --> 00:04:04.540
And applications can
still listen to them

00:04:04.540 --> 00:04:06.970
as they did before.

00:04:06.970 --> 00:04:09.450
To distinguish the
difference between these two,

00:04:09.450 --> 00:04:15.260
think of SMS_RECEIVED_ACTION as
the system has received an SMS.

00:04:15.260 --> 00:04:17.610
Whereas the
SMS_DELIVER_ACTION says

00:04:17.610 --> 00:04:19.920
the system is delivering
your app and SMS

00:04:19.920 --> 00:04:24.250
because you are the
default SMS app.

00:04:24.250 --> 00:04:27.620
So let's talk about some
message receiver best practices.

00:04:27.620 --> 00:04:30.510
For apps that are not looking
to become the default,

00:04:30.510 --> 00:04:32.400
they should just carry
on as normal using

00:04:32.400 --> 00:04:34.630
the "message received" actions.

00:04:34.630 --> 00:04:36.310
These are the ones
that, as I mentioned,

00:04:36.310 --> 00:04:41.057
were private before KitKat,
but are now public in KitKat.

00:04:41.057 --> 00:04:42.890
For apps that do want
to become the default,

00:04:42.890 --> 00:04:44.265
they should probably
be listening

00:04:44.265 --> 00:04:47.200
to both the "message received"
and then new SMS delivered

00:04:47.200 --> 00:04:47.700
ones.

00:04:50.777 --> 00:04:52.860
So that means that when
they're running on KitKat,

00:04:52.860 --> 00:04:54.380
they should really
disabled the one

00:04:54.380 --> 00:04:57.720
that's not being used, the
"message received" actions.

00:04:57.720 --> 00:05:01.470
To do that, they should use the
 PackageManager.setComponentEnabledSetting

00:05:01.470 --> 00:05:02.856
method.

00:05:02.856 --> 00:05:04.230
That way, they
can disable these,

00:05:04.230 --> 00:05:06.770
and they won't be using
unnecessary resources

00:05:06.770 --> 00:05:09.995
and be triggered as
new SMSes come in.

00:05:09.995 --> 00:05:11.370
Another approach
to handling them

00:05:11.370 --> 00:05:14.440
is to use Boolean resource
files to automatically enable

00:05:14.440 --> 00:05:18.734
and disable the receivers
based on platform version.

00:05:18.734 --> 00:05:20.400
Really, the difference
between these two

00:05:20.400 --> 00:05:22.257
is that
setComponentEnabledSetting

00:05:22.257 --> 00:05:23.340
is a little more flexible.

00:05:23.340 --> 00:05:26.560
You can choose within code
when you want to change it.

00:05:26.560 --> 00:05:29.685
Whereas the Boolean resource
is simpler, but less flexible.

00:05:31.921 --> 00:05:34.420
So let's quickly look at how
you would implement the Boolean

00:05:34.420 --> 00:05:35.990
method.

00:05:35.990 --> 00:05:38.380
Here, you see we've
created two Boolean XML

00:05:38.380 --> 00:05:39.850
files in our
resource directories,

00:05:39.850 --> 00:05:43.630
one under the default res/values
directory, with two values,

00:05:43.630 --> 00:05:46.317
hasKitKat and preKitKat.

00:05:46.317 --> 00:05:47.900
We've additionally
created another one

00:05:47.900 --> 00:05:53.050
in values-v19, which means any
devices running on Android 4.4

00:05:53.050 --> 00:05:56.480
KitKat or above
will automatically

00:05:56.480 --> 00:05:58.010
load this resource file instead.

00:05:58.010 --> 00:06:00.210
And you can see we've
set hasKitKat to true

00:06:00.210 --> 00:06:02.600
and preKitKat to false.

00:06:02.600 --> 00:06:04.530
Then, in our
AndroidManifest file,

00:06:04.530 --> 00:06:08.000
in our receiver declarations,
we assign this Boolean

00:06:08.000 --> 00:06:10.397
to the Android-enabled
attribute.

00:06:10.397 --> 00:06:12.730
This has the effect that on
certain versions of Android,

00:06:12.730 --> 00:06:15.010
one will be enabled
and the other disabled,

00:06:15.010 --> 00:06:18.170
and the reverse on
the newer platforms.

00:06:18.170 --> 00:06:19.920
If you haven't seen
this technique before,

00:06:19.920 --> 00:06:22.520
follow the link here on
the right or the QR code

00:06:22.520 --> 00:06:24.390
to get more information.

00:06:24.390 --> 00:06:26.830
Another new API in
KitKat is the ability

00:06:26.830 --> 00:06:30.080
to check which is the default
SMS application, using

00:06:30.080 --> 00:06:33.770
the
 Telephony.Sms.getDefaultSmsPackage

00:06:33.770 --> 00:06:35.050
method.

00:06:35.050 --> 00:06:37.390
Here you can see,
we're checking to see

00:06:37.390 --> 00:06:39.120
if we're running
on KitKat or above,

00:06:39.120 --> 00:06:40.820
and then we're going
to use that method

00:06:40.820 --> 00:06:44.590
to work out if we're currently
the default SMS application.

00:06:44.590 --> 00:06:46.620
You can then call
this in your onResume

00:06:46.620 --> 00:06:50.820
of your key activities, hide
and show certain layouts as

00:06:50.820 --> 00:06:53.310
appropriate, and also
enable and disable

00:06:53.310 --> 00:06:55.290
certain functionality
as appropriate.

00:06:55.290 --> 00:06:57.900
For example, you may not
want to allow sending SMSes

00:06:57.900 --> 00:07:00.290
if you're not currently the
default SMS application.

00:07:03.080 --> 00:07:04.710
You can also open
a system dialogue

00:07:04.710 --> 00:07:07.910
to ask the user if they would
like to switch the default SMS

00:07:07.910 --> 00:07:10.590
application to be yours.

00:07:10.590 --> 00:07:14.980
To do this, you use a new intent
action, ACTION_CHANGE_DEFAULT,

00:07:14.980 --> 00:07:17.780
along with an extra
EXTRA_PACKAGE_NAME

00:07:17.780 --> 00:07:21.120
to pass your package name
to another activity, which

00:07:21.120 --> 00:07:23.620
opens a system dialogue that
looks something like this,

00:07:23.620 --> 00:07:25.770
that I showed you before.

00:07:25.770 --> 00:07:27.770
As soon as the user clicks
Yes, your application

00:07:27.770 --> 00:07:29.470
will now be the default.

00:07:29.470 --> 00:07:32.400
Your previous activity will
get a call to unresume,

00:07:32.400 --> 00:07:36.380
and it can adjust its layouts
and functionality as needed.

00:07:36.380 --> 00:07:38.690
Lastly, some additional notes.

00:07:38.690 --> 00:07:41.250
Messages can still be sent
by any application using

00:07:41.250 --> 00:07:44.520
the existing SmsManager
APIs, assuming, of course,

00:07:44.520 --> 00:07:47.140
they hold the send
SMS permission.

00:07:47.140 --> 00:07:49.970
However, for apps other
than the selected default,

00:07:49.970 --> 00:07:52.650
the system writes all
outgoing SMS messages

00:07:52.650 --> 00:07:55.100
to the system provider
automatically.

00:07:55.100 --> 00:07:58.760
It won't, however,
write outgoing MMS.

00:07:58.760 --> 00:08:02.120
This is particularly important
for auxiliary SMS apps that

00:08:02.120 --> 00:08:06.760
may work alongside another
app which is the default.

00:08:06.760 --> 00:08:09.140
One thing worth noting,
though, these auxiliary apps

00:08:09.140 --> 00:08:11.590
will no longer be able to
write to the system content

00:08:11.590 --> 00:08:12.514
provider themselves.

00:08:12.514 --> 00:08:13.930
So they won't be
able to do things

00:08:13.930 --> 00:08:16.540
like deleting messages
or marking messages

00:08:16.540 --> 00:08:19.600
as read or unread.

00:08:19.600 --> 00:08:22.740
On the flip side, the
default SMS application

00:08:22.740 --> 00:08:26.030
is responsible for writing its
outgoing messages to the system

00:08:26.030 --> 00:08:28.600
provider.

00:08:28.600 --> 00:08:32.530
Lastly, SMS backup apps will
need to temporarily become

00:08:32.530 --> 00:08:34.013
the default when
restoring messages

00:08:34.013 --> 00:08:36.679
so that they can write correctly
to the system content provider.

00:08:42.169 --> 00:08:45.534
For additional reference to
the new SMS APIs in KitKat,

00:08:45.534 --> 00:08:47.075
see the Android
Developer blog, where

00:08:47.075 --> 00:08:49.225
we have additional
information posted up.

00:08:49.225 --> 00:08:51.180
You can follow this
link or this QR code

00:08:51.180 --> 00:08:53.740
on the right side of the screen.

00:08:53.740 --> 00:08:56.760
We'll actually be posting some
sample code up and linking

00:08:56.760 --> 00:08:58.540
to it in the description
of this video

00:08:58.540 --> 00:09:00.770
and also on the blog post.

00:09:00.770 --> 00:09:03.320
Thanks for tuning
in to this DevByte.

