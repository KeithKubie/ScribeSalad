WEBVTT
Kind: captions
Language: en

00:00:08.429 --> 00:00:10.990
Welcome to
Google Developers Hackademy.

00:00:10.990 --> 00:00:13.561
This is the second part
of the course developed

00:00:13.561 --> 00:00:16.660
by Antonio Guzman,
from GDG Androidtitlan Mexico.

00:00:16.660 --> 00:00:18.891
If this is your first contact
with the course,

00:00:18.891 --> 00:00:20.825
I recommend you watch
the first part

00:00:20.825 --> 00:00:22.396
and do the exercises.

00:00:29.429 --> 00:00:31.495
Welcome to lesson two

00:00:31.495 --> 00:00:33.957
of the Google Apps Script
introduction course.

00:00:33.957 --> 00:00:35.396
I'm Antonio Guzman.

00:00:35.396 --> 00:00:37.330
This time we will see

00:00:37.330 --> 00:00:40.033
the six types of scripts
there are

00:00:40.033 --> 00:00:42.528
and two execution modes:

00:00:42.990 --> 00:00:45.066
manual and time-triggered modes.

00:00:45.396 --> 00:00:48.561
The scripts, apart from
the differences among them

00:00:48.561 --> 00:00:51.264
because of the implementation
we give them,

00:00:51.264 --> 00:00:53.330
we can also distinguish them

00:00:53.330 --> 00:00:55.330
by the type they belong to.

00:00:55.330 --> 00:00:58.726
Within Google Apps Script
we can identify 6 types of them.

00:00:59.264 --> 00:01:02.429
We will see which are
the characteristics

00:01:02.429 --> 00:01:04.066
and advantages of each one.

00:01:04.066 --> 00:01:05.297
Stand alone.

00:01:05.726 --> 00:01:08.132
This kind of scripts
are accessible

00:01:08.132 --> 00:01:09.627
from Google Drive.

00:01:09.891 --> 00:01:13.462
These ones are recommended
for one-time tasks

00:01:13.462 --> 00:01:16.264
and we can run them manually.

00:01:16.825 --> 00:01:19.627
The script we ran
in the previous lesson

00:01:19.627 --> 00:01:22.231
was a stand alone script.

00:01:22.429 --> 00:01:24.396
Container-bound scripts.

00:01:24.726 --> 00:01:27.033
This kind of scripts
are accessible

00:01:27.033 --> 00:01:29.528
from applications
such as Google Forms,

00:01:29.528 --> 00:01:30.891
Google Spreadsheet,

00:01:30.891 --> 00:01:32.264
Google Document,

00:01:32.264 --> 00:01:35.198
and are used to provide
extra functionality

00:01:35.198 --> 00:01:36.726
to these applications.

00:01:36.957 --> 00:01:39.627
Their behavior can be
considered

00:01:39.627 --> 00:01:40.891
as that of the macros.

00:01:40.891 --> 00:01:42.990
Spreadsheet custom function.

00:01:43.231 --> 00:01:46.066
This kind of scripts
are the ones used

00:01:46.066 --> 00:01:48.528
from the spreadsheets' cells,

00:01:48.528 --> 00:01:50.099
following the notation

00:01:50.099 --> 00:01:53.627
"=nameOfTheFunction()."

00:01:54.825 --> 00:01:55.957
Web apps.

00:01:55.957 --> 00:01:59.495
This type of scripts allow us
to expose our functionality

00:01:59.495 --> 00:02:00.990
in the Net.

00:02:00.990 --> 00:02:03.330
We expose it through an URL

00:02:03.330 --> 00:02:06.231
where we're getting
http requests.

00:02:06.231 --> 00:02:07.990
In this script concept

00:02:07.990 --> 00:02:10.429
we have to consider
permission management

00:02:10.429 --> 00:02:12.066
for execution modes

00:02:12.066 --> 00:02:15.099
and for users
with permission to call it.

00:02:15.396 --> 00:02:17.924
This is the kind of script
recommended

00:02:17.924 --> 00:02:21.264
to operate with other systems
beyond Google Apps.

00:02:21.561 --> 00:02:23.330
Google Site Gadgets.

00:02:23.330 --> 00:02:26.132
This is the kind
of scripts we use

00:02:26.132 --> 00:02:28.693
to publicly expose
a functionality,

00:02:28.693 --> 00:02:30.759
but in the context
of a Google Site.

00:02:30.759 --> 00:02:33.297
We build our script,
we use it as a gadget

00:02:33.297 --> 00:02:35.099
and we publish it on the site.

00:02:35.099 --> 00:02:36.660
Container extension.

00:02:36.660 --> 00:02:39.165
This type of scripts is used

00:02:39.165 --> 00:02:41.957
to add elements
to the user interface

00:02:41.957 --> 00:02:45.132
of applications such as
Document and Spreadsheet.

00:02:45.594 --> 00:02:47.462
Imagine you create a menu

00:02:47.462 --> 00:02:50.264
from which you can call
your script's functionality.

00:02:50.495 --> 00:02:52.495
These are the types of scripts

00:02:52.495 --> 00:02:54.726
that we can find
in Google Apps Script.

00:02:54.726 --> 00:02:57.858
In this lesson we'll work
with the Stand Alone type

00:02:57.858 --> 00:03:00.132
and we will execute it
in two modes:

00:03:00.132 --> 00:03:02.891
manually
and with a time trigger.

00:03:02.891 --> 00:03:04.462
What we're going to do

00:03:04.462 --> 00:03:07.297
is read information we have
in a spreadsheet,

00:03:07.297 --> 00:03:08.495
manipulate it,

00:03:08.495 --> 00:03:12.132
and we will write the result
on that same spreadsheet.

00:03:12.330 --> 00:03:13.825
LET'S GET TO WORK

00:03:14.495 --> 00:03:17.165
Now, in order to develop
our exercise,

00:03:17.165 --> 00:03:19.198
we'll enter Google Drive.

00:03:19.198 --> 00:03:22.924
From there we will create
a Spreadsheet-like document.

00:03:23.165 --> 00:03:26.594
In it, we will put
the aforementioned values,

00:03:26.594 --> 00:03:28.726
the ones we will manipulate,

00:03:28.726 --> 00:03:30.165
a group of products,

00:03:30.165 --> 00:03:34.066
but well, first,
we will name our spreadsheet

00:03:34.627 --> 00:03:36.264
with the following name:

00:03:36.594 --> 00:03:38.066
"LESSON 02"

00:03:38.660 --> 00:03:39.924
So...

00:03:41.858 --> 00:03:43.429
"LESSON 02."

00:03:43.429 --> 00:03:46.297
And now our document
has a name.

00:03:46.297 --> 00:03:49.363
Column A
will have our product names.

00:03:49.759 --> 00:03:51.957
Let's start with... shoes.

00:03:52.396 --> 00:03:55.660
Let's start
with a pair of shoes.

00:03:55.660 --> 00:03:57.528
Now, videogames.

00:03:58.099 --> 00:04:00.660
That will be our second product.

00:04:00.990 --> 00:04:03.792
We add that "o" we missed...

00:04:04.396 --> 00:04:07.033
and we'll add fruits.

00:04:07.726 --> 00:04:09.924
And then, medicine.

00:04:10.165 --> 00:04:12.396
Each one of these products

00:04:12.396 --> 00:04:16.099
will have a different
tax rate and price.

00:04:16.792 --> 00:04:19.297
We like 35 for the medicine,

00:04:19.297 --> 00:04:21.297
fruit is cheaper, 4...

00:04:22.198 --> 00:04:24.594
What would be fine?
70 for the videogame,

00:04:24.594 --> 00:04:27.363
and we'll put 115 for the shoes.

00:04:27.825 --> 00:04:31.528
Now, in column C
we'll put the tax rate:

00:04:31.528 --> 00:04:32.891
16...

00:04:35.462 --> 00:04:38.858
20 for the videogame;
0 for the fruits;

00:04:38.858 --> 00:04:40.957
and we'll leave 5
for the medicine.

00:04:40.957 --> 00:04:43.891
We have the prices
and the tax rates

00:04:43.891 --> 00:04:45.990
for our products.

00:04:46.231 --> 00:04:48.561
Now we go back to Google Drive

00:04:48.561 --> 00:04:50.957
to create a script.

00:04:50.957 --> 00:04:53.396
As I said last time,

00:04:53.396 --> 00:04:56.561
you don't need to enter
script.google.com anymore,

00:04:56.561 --> 00:04:59.297
now you can do it
directly from Drive.

00:04:59.528 --> 00:05:02.132
This is yet another choice
for the kind of documents

00:05:02.132 --> 00:05:03.660
you can create.

00:05:04.396 --> 00:05:07.132
We go back.
It's loading our script.

00:05:07.132 --> 00:05:10.297
Again we get
the welcome screen...

00:05:11.528 --> 00:05:15.066
Remember, this screen
will give us options

00:05:15.066 --> 00:05:18.792
such as templates,
we will pick the first one,

00:05:18.792 --> 00:05:21.231
because we're going to create
something from scratch.

00:05:21.231 --> 00:05:24.132
There we have the ones
we created previously,

00:05:24.561 --> 00:05:27.957
and we go with a blank one.

00:05:28.561 --> 00:05:30.264
Let's name it.

00:05:30.759 --> 00:05:33.891
We will call it "GAS 02."

00:05:34.363 --> 00:05:35.924
"GAS 02."

00:05:36.561 --> 00:05:39.627
We save and now
our script has a name.

00:05:41.132 --> 00:05:42.990
Now let's write our function.

00:05:42.990 --> 00:05:46.231
What did we want? To get
the values from those cells;

00:05:46.231 --> 00:05:49.528
we need to reference
our spreadsheet.

00:05:49.528 --> 00:05:52.264
Let's start with a variable...

00:05:53.528 --> 00:05:55.825
to which we'll assign

00:05:56.231 --> 00:05:58.792
the spreadsheet
we're going to use,

00:05:58.792 --> 00:06:01.957
which in this case
is the one called LESSON 02.

00:06:02.462 --> 00:06:05.990
And we use
the SpreadsheetApp,

00:06:06.330 --> 00:06:10.198
from which we have a method
called "openById".

00:06:11.396 --> 00:06:13.825
What's the ID of our document?

00:06:13.825 --> 00:06:15.759
How will we pass it?

00:06:15.759 --> 00:06:17.462
As in a text chain.

00:06:17.462 --> 00:06:19.363
Where do we get the ID from?

00:06:19.363 --> 00:06:22.693
By opening our document,
and on the browser bar,

00:06:22.693 --> 00:06:26.363
it's that text chain
from right after the "="

00:06:27.165 --> 00:06:30.066
and before "#."

00:06:30.066 --> 00:06:32.594
That's the key
of our document.

00:06:33.231 --> 00:06:34.957
We select it,

00:06:34.957 --> 00:06:36.363
then we copy it

00:06:36.363 --> 00:06:39.957
and we're going to paste it
in our editor

00:06:39.957 --> 00:06:43.330
as the element that
our openById method needs.

00:06:44.462 --> 00:06:48.231
We already have a reference
to our document.

00:06:49.990 --> 00:06:51.495
Let's continue.

00:06:51.495 --> 00:06:54.066
Now we will extract
the information

00:06:54.066 --> 00:06:56.858
that we have in the spreadsheet.

00:06:57.528 --> 00:06:59.330
The spreadsheet has

00:07:00.924 --> 00:07:04.132
different sheets.
In this case, it's just one,

00:07:04.132 --> 00:07:07.165
but we will bring along
all this arrangement.

00:07:08.231 --> 00:07:10.495
sps.getSheet

00:07:10.495 --> 00:07:14.429
and then we have the reference
to the sheets contained

00:07:14.429 --> 00:07:16.495
inside the spreadsheet.

00:07:17.660 --> 00:07:20.132
We'll keep going, and now

00:07:21.066 --> 00:07:24.759
we have to take
the information from the cells.

00:07:24.759 --> 00:07:27.429
Let's create a variable
called "data."

00:07:28.726 --> 00:07:32.396
With it we're going to store
the arrangement we set,

00:07:32.396 --> 00:07:35.957
which was the prices,
the product numbers

00:07:35.957 --> 00:07:37.858
and the tax rate.

00:07:37.858 --> 00:07:40.429
Now let's reference
that first sheet. How?

00:07:40.429 --> 00:07:41.957
With the index "0,"

00:07:41.957 --> 00:07:43.924
and then "getDataRange,"

00:07:43.924 --> 00:07:45.429
and "getValues."

00:07:45.924 --> 00:07:49.792
As we can see, it returns
a bidimensional arrangement.

00:07:49.792 --> 00:07:53.396
All the information we have in
that spreadsheet will be there.

00:07:54.231 --> 00:07:58.429
We're going to move
the arrangement with the info

00:07:58.429 --> 00:08:01.594
that we placed in the cells
of our spreadsheet,

00:08:02.066 --> 00:08:04.231
we're going to do it
with a "for",

00:08:04.231 --> 00:08:07.132
using the variable "i"
we're going to move "data"

00:08:07.594 --> 00:08:10.759
and associate the information
registration by registration

00:08:11.462 --> 00:08:13.495
in a variable called "row."

00:08:13.957 --> 00:08:15.792
Once we're there,

00:08:15.792 --> 00:08:17.693
you know, "data,"

00:08:17.693 --> 00:08:20.033
and we will manage it
with the index

00:08:20.033 --> 00:08:22.990
that "i" has
with each iteration.

00:08:23.693 --> 00:08:26.396
And what do we do next?

00:08:26.396 --> 00:08:29.693
We obtain the information
from each of the registrations.

00:08:29.693 --> 00:08:31.660
We have "price."

00:08:32.693 --> 00:08:36.594
Price was on the second column,
in other words,

00:08:37.132 --> 00:08:39.066
"row" with index "1."

00:08:41.264 --> 00:08:44.891
After that, we'll have
to extract the other values,

00:08:45.231 --> 00:08:48.726
which in this case
would be the tax rate.

00:08:49.033 --> 00:08:51.297
So we create
the variable "rate,"

00:08:51.297 --> 00:08:53.627
and again, using "row,"

00:08:53.924 --> 00:08:56.726
we will access that information.

00:08:56.726 --> 00:08:59.990
Row was in the other column,
the next one,

00:08:59.990 --> 00:09:02.066
so its index is "2."

00:09:04.495 --> 00:09:07.330
Once we have this information,

00:09:07.330 --> 00:09:09.792
we will be able to manage

00:09:09.792 --> 00:09:12.924
the total tax, which,
in this case,

00:09:14.099 --> 00:09:17.297
how do we determine
the tax amount?

00:09:17.297 --> 00:09:20.099
By multiplying the rate
by the price

00:09:20.099 --> 00:09:23.561
and dividing that by 100,
so we do:

00:09:23.561 --> 00:09:26.066
"price*rate"

00:09:27.528 --> 00:09:30.924
and divided by 100,

00:09:30.924 --> 00:09:32.594
as we just said.

00:09:34.066 --> 00:09:37.627
In this variable, "tax,"
we'll already have the amount

00:09:37.627 --> 00:09:40.858
that we will place
in the next cell.

00:09:41.957 --> 00:09:42.957
Now,

00:09:43.396 --> 00:09:46.825
what we're going to do
is go on with the development

00:09:46.825 --> 00:09:50.726
of our program
and we will set the information

00:09:51.528 --> 00:09:52.924
in the cell.

00:09:54.396 --> 00:09:57.693
In order to know how to do that,

00:09:57.693 --> 00:10:01.198
we need to reference
the position, so,

00:10:01.198 --> 00:10:04.231
we're going to use
a "startRow" variable

00:10:04.231 --> 00:10:06.924
that will also work as an index.

00:10:06.924 --> 00:10:09.528
That's "1" plus the value
it has there.

00:10:09.528 --> 00:10:11.561
Here we add a "+" there,

00:10:11.561 --> 00:10:13.561
we place it in front,

00:10:13.561 --> 00:10:16.198
so an arithmetic operation
occurs

00:10:16.198 --> 00:10:18.198
and not a concatenation.

00:10:18.198 --> 00:10:20.924
Let's remember the "+"
is overloaded

00:10:20.924 --> 00:10:23.033
and it is also to concatenate,

00:10:23.033 --> 00:10:24.429
not only to add.

00:10:24.429 --> 00:10:27.132
So now we insert the values,

00:10:27.132 --> 00:10:29.693
in this case, the first one
will be "tax."

00:10:29.693 --> 00:10:32.165
Where will we insert them?
In our sheet.

00:10:32.165 --> 00:10:34.891
We reference it: "sheet0,"

00:10:36.198 --> 00:10:39.759
and we'll bring a range.
What is that range?

00:10:40.429 --> 00:10:42.561
That range will allow us

00:10:42.561 --> 00:10:45.660
to insert the information
where we want it.

00:10:45.660 --> 00:10:49.363
The row number goes first
and then the column number.

00:10:49.957 --> 00:10:52.858
What is the row number?
"startRow", as we said,

00:10:52.858 --> 00:10:55.033
and which column?
Number four.

00:10:55.033 --> 00:10:57.495
And we do the "setValue."

00:10:57.495 --> 00:10:59.759
The method is already there,
we use it,

00:10:59.759 --> 00:11:03.198
and we pass it our variable
where we have stored

00:11:03.462 --> 00:11:04.957
the tax.

00:11:05.792 --> 00:11:09.297
We assign it and insert ";".
We finish our sentence,

00:11:09.297 --> 00:11:12.528
and we repeat the process,
but this time,

00:11:13.066 --> 00:11:15.858
what we do is insert
another variable:

00:11:16.627 --> 00:11:18.990
the result
of the other combination,

00:11:18.990 --> 00:11:21.627
but it's the same,
in the same sheet, "0,"

00:11:22.297 --> 00:11:25.792
we bring the range on which
we're going to operate,

00:11:25.792 --> 00:11:28.264
this time it's also "startRow",

00:11:28.264 --> 00:11:30.132
what's going to change
is the column,

00:11:30.132 --> 00:11:32.726
because we want it
in column number 5.

00:11:32.726 --> 00:11:35.033
So we use "startRow"

00:11:35.033 --> 00:11:38.495
and we change the column number
by putting "5,"

00:11:38.495 --> 00:11:41.231
for the rest, it's the same:
"setValue."

00:11:41.231 --> 00:11:43.627
Now, what were
we going to put there?

00:11:43.627 --> 00:11:46.396
What we're finally paying
for our product.

00:11:46.396 --> 00:11:49.693
We already have the tax
and the price,

00:11:49.693 --> 00:11:52.198
what we need to do
is add them up.

00:11:52.198 --> 00:11:56.396
"price + tax."

00:11:59.033 --> 00:12:02.495
This way we'd insert
the value we're interested in.

00:12:02.759 --> 00:12:05.561
We finish our sentence,
semicolon,

00:12:05.561 --> 00:12:09.066
and we're ready.
What are we missing?

00:12:09.363 --> 00:12:11.297
Saving and executing it.

00:12:12.462 --> 00:12:15.594
Then we'd be running
and testing our script,

00:12:16.264 --> 00:12:19.957
but before that, we're going
to use another similar method,

00:12:20.297 --> 00:12:22.825
inside SpreadsheetApp,

00:12:22.825 --> 00:12:24.462
called "flush."

00:12:24.462 --> 00:12:26.627
It will refresh the cells

00:12:26.627 --> 00:12:29.792
to make sure the information
we're sending

00:12:29.792 --> 00:12:32.330
is shown there
and that there's no problem

00:12:32.330 --> 00:12:34.165
with stream or anything.

00:12:34.165 --> 00:12:35.858
So we do our flush...

00:12:36.792 --> 00:12:40.594
";" and we finish our sentence.

00:12:41.330 --> 00:12:43.627
Now we can save it,

00:12:43.627 --> 00:12:47.462
and we're ready
to run our application.

00:12:48.099 --> 00:12:49.561
We hit "run..."

00:12:50.231 --> 00:12:52.693
it tells us
it's starting to run,

00:12:52.693 --> 00:12:56.033
and, once again,
it requests authorization.

00:12:56.033 --> 00:12:59.099
Remember, each script
we run requests authorization.

00:12:59.264 --> 00:13:02.495
It says it will access
our spreadsheets

00:13:02.495 --> 00:13:04.693
in Google Drive,
so we confirm.

00:13:05.264 --> 00:13:06.825
The script has run.

00:13:07.396 --> 00:13:10.726
Now let's go to our
spreadsheet, LESSON,

00:13:10.726 --> 00:13:13.660
and we see: column D and E

00:13:14.231 --> 00:13:16.363
have the expected values.

00:13:16.363 --> 00:13:19.462
"D" has the correspondent
tax according the rate

00:13:19.462 --> 00:13:21.462
to each one of the products,

00:13:21.462 --> 00:13:24.396
and "E" has
the total amount to be paid

00:13:24.396 --> 00:13:26.792
considering the calculated tax.

00:13:27.561 --> 00:13:31.165
So our program was able
to carry out the action

00:13:31.165 --> 00:13:32.924
as we expected.

00:13:32.924 --> 00:13:35.627
This was a manual execution.

00:13:35.627 --> 00:13:38.594
Let's delete the data
we have in those cells,

00:13:38.594 --> 00:13:41.396
because we said we were
also going to practice

00:13:41.396 --> 00:13:44.264
the time-triggered execution,
and that's next,

00:13:44.264 --> 00:13:47.165
and we want to see that
the data is put there again

00:13:47.165 --> 00:13:50.033
and that it's not the same
from the manual execution.

00:13:50.033 --> 00:13:52.792
So let's delete it,

00:13:52.792 --> 00:13:55.297
now columns D and E are empty.

00:13:55.297 --> 00:13:57.660
We go back to our script

00:13:57.660 --> 00:14:00.528
and we're going to click
on this icon

00:14:00.528 --> 00:14:03.660
that lists the triggers
associated to our script.

00:14:03.660 --> 00:14:05.759
It says there's none.

00:14:05.759 --> 00:14:07.825
So we're going to select one,

00:14:08.660 --> 00:14:11.462
that's going to be associated
to the function marked there

00:14:11.462 --> 00:14:14.759
if we want to create
a time-triggered one

00:14:15.396 --> 00:14:17.099
and there are several options.

00:14:17.099 --> 00:14:19.462
We can create it
for a specific hour,

00:14:19.462 --> 00:14:22.363
a day of the week,
an hour, a minute,

00:14:22.924 --> 00:14:25.132
and if we want to repeat it,

00:14:25.132 --> 00:14:28.825
we can use the last column.

00:14:29.462 --> 00:14:32.561
On that we can select
how frequently we want it

00:14:32.561 --> 00:14:34.099
to be repeating.

00:14:34.099 --> 00:14:36.891
The concept is very similar
to that of cron tasks,

00:14:36.891 --> 00:14:40.099
if you've worked on Linux,

00:14:40.099 --> 00:14:43.264
or any other Unix type system,

00:14:44.858 --> 00:14:46.132
with cron tasks.

00:14:46.132 --> 00:14:48.759
So now we select
a specific time set,

00:14:48.759 --> 00:14:50.561
a specific date and time.

00:14:50.561 --> 00:14:53.330
There you have the YYYY-MM-DD
and time format.

00:14:53.561 --> 00:14:56.297
So we set it to run
in a few minutes:

00:14:56.297 --> 00:14:59.033
2013-, we're in the 9th month,

00:14:59.033 --> 00:15:02.627
09-, 28th day...

00:15:04.396 --> 00:15:07.066
spacebar, the hour...

00:15:08.264 --> 00:15:11.726
it's... 12, no, it's not 12...

00:15:12.627 --> 00:15:14.396
it's 13...

00:15:15.165 --> 00:15:18.297
We'll set it to run
within two minutes

00:15:18.297 --> 00:15:20.990
and we're going to wait
for that time to pass

00:15:20.990 --> 00:15:24.099
and... we like 13:49, right?

00:15:24.099 --> 00:15:26.297
We set it like that,
then save it,

00:15:26.297 --> 00:15:28.858
and now we have a time trigger.

00:15:28.858 --> 00:15:32.792
And now we just have to wait
for those 2 minutes to pass.

00:15:34.165 --> 00:15:36.099
And after two minutes,

00:15:36.792 --> 00:15:39.396
we go back and see
what has happened

00:15:39.396 --> 00:15:41.957
and there's the information:
in columns D and E,

00:15:41.957 --> 00:15:44.033
the script executed correctly

00:15:44.033 --> 00:15:46.660
and we found the information
we expected.

00:15:46.660 --> 00:15:48.627
Now we go to the Manager

00:15:48.627 --> 00:15:51.396
and we can add one extra option,

00:15:51.396 --> 00:15:53.462
which is receiving notifications

00:15:53.462 --> 00:15:55.165
when our script fails.

00:15:55.627 --> 00:15:57.726
To what e-mail address?

00:15:57.726 --> 00:16:01.231
To the account's e-mail address
that's building the scripts,

00:16:01.231 --> 00:16:02.594
in this case, mine,

00:16:02.594 --> 00:16:05.363
and I ask it to notify me
right away.

00:16:05.759 --> 00:16:09.561
If the script happens to fail,
I will receive an e-mail

00:16:10.198 --> 00:16:11.396
letting me know.

00:16:11.396 --> 00:16:14.627
That way we've built a script

00:16:14.990 --> 00:16:18.627
executed by a time-trigger
and that saves the information.

00:16:18.627 --> 00:16:20.990
Remember this is
a stand alone script,

00:16:20.990 --> 00:16:23.726
that means that the information

00:16:24.066 --> 00:16:27.231
is available from Google Drive.

00:16:27.726 --> 00:16:29.792
We search it by name

00:16:29.792 --> 00:16:33.099
and now it's loading our script.

00:16:33.099 --> 00:16:34.825
There we have the results.

00:16:34.825 --> 00:16:37.825
So we open it. It's the script
we've just built.

00:16:38.132 --> 00:16:40.264
It is opening in another tab.

00:16:40.264 --> 00:16:42.297
See, it's the same script.

00:16:42.297 --> 00:16:44.264
We got it, and that's it,

00:16:44.627 --> 00:16:47.165
we have finished our exercise.

00:16:48.297 --> 00:16:50.660
LET'S DO AN EXERCISE

00:16:51.594 --> 00:16:54.759
To conclude and reaffirm
what we learnt in this lesson,

00:16:54.759 --> 00:16:57.033
I invite you to analyze
this scenario

00:16:57.033 --> 00:16:58.561
to do an exercise.

00:16:58.561 --> 00:17:01.165
Imagine the financing area
of a company,

00:17:01.165 --> 00:17:04.561
that records day by day
a seller's commissions

00:17:04.561 --> 00:17:06.528
who offers the products.

00:17:06.825 --> 00:17:08.528
There's a weekly cut-off

00:17:08.528 --> 00:17:12.462
to know what's the amount
of the cheque he will receive.

00:17:12.924 --> 00:17:14.825
What could we do

00:17:14.825 --> 00:17:16.858
so that, automatically,

00:17:16.858 --> 00:17:19.627
that amount is calculated
on Mondays

00:17:19.627 --> 00:17:22.726
and the result is written
on that same spreadsheet?

00:17:23.528 --> 00:17:25.330
RECAPITULATION

00:17:25.759 --> 00:17:26.891
Recapitulating,

00:17:26.891 --> 00:17:29.495
in this lesson we covered
types of scripts,

00:17:29.495 --> 00:17:32.462
execution modes:
manual and time-triggered.

00:17:32.462 --> 00:17:36.330
And in the next lesson we'll see
container-bound scripts.

00:17:36.660 --> 00:17:38.396
This is it for now.

00:17:38.396 --> 00:17:40.231
Keep on programming.

