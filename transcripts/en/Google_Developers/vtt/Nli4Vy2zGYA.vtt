WEBVTT
Kind: captions
Language: en

00:00:04.600 --> 00:00:06.700
PAUL SAXMAN: Welcome, everybody,
to our talk on

00:00:06.700 --> 00:00:09.340
building second screen apps that
integrate with Google TV.

00:00:09.340 --> 00:00:11.160
My name is Paul Saxman, and
I'm a senior developer

00:00:11.160 --> 00:00:13.920
advocate at Google on
the Google TV team.

00:00:13.920 --> 00:00:15.560
And with me today is--

00:00:15.560 --> 00:00:16.610
DAVE FISHER: I'm Dave Fisher.

00:00:16.610 --> 00:00:19.030
I'm actually a faculty member.

00:00:19.030 --> 00:00:21.950
I work at a college in Indiana,
and I'm on my

00:00:21.950 --> 00:00:22.600
sabbatical.

00:00:22.600 --> 00:00:25.130
I've been working at Google
for the last year or so.

00:00:25.130 --> 00:00:27.870
And in the fall, I'm going
to go back to teaching.

00:00:27.870 --> 00:00:28.230
PAUL SAXMAN: Cool.

00:00:28.230 --> 00:00:30.850
So Paul Saxman, Dr. Fisher.

00:00:30.850 --> 00:00:34.140
And if you guys want to follow
along today, we got the Go

00:00:34.140 --> 00:00:38.100
link up on the top there to
actually get to the slides.

00:00:38.100 --> 00:00:39.570
They're going to stay there
indefinitely, too, so if you

00:00:39.570 --> 00:00:40.760
want to check them out
afterwards, you can

00:00:40.760 --> 00:00:42.390
go check them out.

00:00:42.390 --> 00:00:45.890
So you're all probably familiar
with this type of

00:00:45.890 --> 00:00:48.750
TV-viewing experience here.

00:00:48.750 --> 00:00:49.960
For the sake of this
conversation, we're going to

00:00:49.960 --> 00:00:51.560
call him Mr. Leanback.

00:00:51.560 --> 00:00:54.400
I can see some of you today are
kind of in the leanback

00:00:54.400 --> 00:00:57.830
mode as well, probably because
it's second day, Google I/O,

00:00:57.830 --> 00:00:59.660
you guys had your lunch.

00:00:59.660 --> 00:01:02.350
So this is a fairly common
TV-viewing kind of

00:01:02.350 --> 00:01:03.430
arrangement.

00:01:03.430 --> 00:01:06.970
And so Mr. Leanback, let's say
he comes home from a long day

00:01:06.970 --> 00:01:10.440
at work, or he's been outside
with activities.

00:01:10.440 --> 00:01:13.590
And so he grabs his favorite
beverage, he grabs his remote

00:01:13.590 --> 00:01:16.900
control, and then he goes into
what we call the leanback

00:01:16.900 --> 00:01:20.880
mode, which is approximately
45 degree from the floor.

00:01:20.880 --> 00:01:24.240
If you're any more than 45 or
any less than a 45-degree

00:01:24.240 --> 00:01:26.250
angle from the floor, you're
no longer in leanback mode.

00:01:26.250 --> 00:01:27.540
That's laydown mode.

00:01:27.540 --> 00:01:31.500
And we're not going to talk
about laydown mode today.

00:01:31.500 --> 00:01:34.735
So the thing about the leanback
mode or what Mr.

00:01:34.735 --> 00:01:37.150
Leanback, the way he's watching
TV, is that this is a

00:01:37.150 --> 00:01:39.270
fairly common way to
watch television.

00:01:39.270 --> 00:01:42.090
This is exactly why, when we
talk about developing apps for

00:01:42.090 --> 00:01:46.490
Google TV, we give you UI
guidelines about kind of

00:01:46.490 --> 00:01:48.700
toning down the user
interface.

00:01:48.700 --> 00:01:49.880
Put less information.

00:01:49.880 --> 00:01:52.070
Make the interface a
lot easier to use.

00:01:52.070 --> 00:01:54.840
Support D-pad navigation,
because obviously Mr. Leanback

00:01:54.840 --> 00:01:57.760
is not going to want to put
his drink down to use the

00:01:57.760 --> 00:01:59.990
remote two-handed.

00:01:59.990 --> 00:02:03.440
And this is also why, when we
designed Google TV, we put

00:02:03.440 --> 00:02:07.920
apps on there, or we provided
services like Quick Search and

00:02:07.920 --> 00:02:10.729
the TV and Movies application,
which allows users to actually

00:02:10.729 --> 00:02:13.430
really quickly and easily
get access to content.

00:02:13.430 --> 00:02:16.900
Because they don't necessarily
need the overload of

00:02:16.900 --> 00:02:19.870
navigating through a list of
200+ channels to find what

00:02:19.870 --> 00:02:21.230
they want to watch.

00:02:21.230 --> 00:02:23.070
They can just search for it or
actually launch the app and

00:02:23.070 --> 00:02:25.360
browse for it.

00:02:25.360 --> 00:02:29.810
However, there's a lot of data
coming out recently that

00:02:29.810 --> 00:02:31.720
actually paints a slightly
different picture of the way

00:02:31.720 --> 00:02:33.510
that we interact with TVs.

00:02:33.510 --> 00:02:34.960
This is something
from Nielsen.

00:02:34.960 --> 00:02:39.130
It was actually just published
the end of last year.

00:02:39.130 --> 00:02:42.520
And they found that about
90% of tablet owners and

00:02:42.520 --> 00:02:45.660
smartphone owners actually use
their devices while watching

00:02:45.660 --> 00:02:46.740
television.

00:02:46.740 --> 00:02:49.050
And the way they did this
actually, they broke it down

00:02:49.050 --> 00:02:51.020
into how often they
use their device.

00:02:51.020 --> 00:02:54.150
They said, do they do it
monthly, daily, weekly,

00:02:54.150 --> 00:02:55.070
multiple times daily.

00:02:55.070 --> 00:02:58.120
And it was actually heavily
skewed towards daily usage.

00:02:58.120 --> 00:03:01.810
So most users, 90% of users or
more, actually use their

00:03:01.810 --> 00:03:03.830
devices while they're
watching TV.

00:03:03.830 --> 00:03:06.070
And I'm sure that's probably
the same with most of us.

00:03:08.630 --> 00:03:11.690
So the other interesting thing,
too, about smartphones

00:03:11.690 --> 00:03:15.270
now, is that as more people have
smartphones and tablet

00:03:15.270 --> 00:03:18.060
devices, they're actually
designed for pushing

00:03:18.060 --> 00:03:21.630
information to the user as
opposed to, let's say, other

00:03:21.630 --> 00:03:24.530
devices like computers or
laptops, where's it's more,

00:03:24.530 --> 00:03:25.860
the user actually is driving.

00:03:25.860 --> 00:03:28.860
So smartphones, for example, if
you're watching a movie and

00:03:28.860 --> 00:03:32.050
you get a text message that
comes in, or you go a Google

00:03:32.050 --> 00:03:34.580
Talk, or you get an email that
comes in, you're more likely

00:03:34.580 --> 00:03:36.760
nowadays to pick up your phone
and start interacting with it

00:03:36.760 --> 00:03:38.210
while you're watching TV.

00:03:38.210 --> 00:03:42.660
So this whole idea of like
multi-screen or second screen

00:03:42.660 --> 00:03:46.470
interaction is kind of new and
very much on the rise.

00:03:46.470 --> 00:03:49.110
So we actually conducted
a study, very recently.

00:03:49.110 --> 00:03:50.740
This was at the beginning
of this year.

00:03:50.740 --> 00:03:56.150
And we surveyed people that
actually have and actively use

00:03:56.150 --> 00:03:57.930
Google TV devices.

00:03:57.930 --> 00:04:02.040
And asked them, do you have
certain devices, other

00:04:02.040 --> 00:04:03.210
connected devices
in your home?

00:04:03.210 --> 00:04:07.190
So we found that actually 92%
of these homes have laptops.

00:04:07.190 --> 00:04:09.990
And a very large number, 90%,
also have smartphones.

00:04:09.990 --> 00:04:12.470
And actually, the large majority
of them also have

00:04:12.470 --> 00:04:16.060
desktop and tablet computers
as well.

00:04:16.060 --> 00:04:20.720
So we see there's actually
quite a few--

00:04:20.720 --> 00:04:23.080
given this data, with the data
in the previous slide, we can

00:04:23.080 --> 00:04:25.640
see that the probability of
somebody actually having and

00:04:25.640 --> 00:04:28.195
using a second screen device
in their living room while

00:04:28.195 --> 00:04:31.450
they're watching TV is actually
very, very high.

00:04:31.450 --> 00:04:34.660
I mean, it's well into the
majority of people.

00:04:34.660 --> 00:04:37.960
So there's actually--

00:04:37.960 --> 00:04:41.510
what you may think of now
is this situation here.

00:04:41.510 --> 00:04:45.140
We're going to call her
Ms. Multi-screen.

00:04:45.140 --> 00:04:48.350
So not only does Ms.
Multi-screen have her snack

00:04:48.350 --> 00:04:50.830
and her remote control, but also
now in the living room,

00:04:50.830 --> 00:04:52.680
she has her laptop
and smartphone.

00:04:52.680 --> 00:04:56.770
And most likely, actually, has
a tablet computer as well.

00:04:56.770 --> 00:04:58.590
And this whole idea of like
kind of multi-screen

00:04:58.590 --> 00:05:02.960
interaction, or actually, what
we'll call just multitasking,

00:05:02.960 --> 00:05:06.390
for lack of a better word, is
that this isn't a new idea.

00:05:06.390 --> 00:05:09.190
I mean, people have been doing
this for quite a few years.

00:05:09.190 --> 00:05:11.350
Just a few years back, instead
of a smartphone, she probably

00:05:11.350 --> 00:05:12.660
had a feature phone.

00:05:12.660 --> 00:05:14.700
Or even a few years before that,
she might have had a

00:05:14.700 --> 00:05:15.970
cordless phone.

00:05:15.970 --> 00:05:18.830
Or maybe if you're like my
family, you might have had a

00:05:18.830 --> 00:05:21.760
corded phone, but you had one of
those 20-foot curly cables

00:05:21.760 --> 00:05:24.035
on there that was kind of
stretched out, just so that

00:05:24.035 --> 00:05:26.500
you could sit in the living
room while you were

00:05:26.500 --> 00:05:28.670
talking on the phone.

00:05:28.670 --> 00:05:31.740
And so the interesting thing
about this, though, is that

00:05:31.740 --> 00:05:35.220
really, portable devices
are really on the rise.

00:05:35.220 --> 00:05:38.080
So smartphones are
on the rise.

00:05:38.080 --> 00:05:40.790
We see that laptop computer
usage, people are

00:05:40.790 --> 00:05:43.430
transitioning from desktop
computers to laptop computers.

00:05:43.430 --> 00:05:46.100
So really, this scenario of kind
of the multi-screen or

00:05:46.100 --> 00:05:50.200
multi-devices in the living
room is pretty much here.

00:05:50.200 --> 00:05:53.950
So in the same study that we
conducted before about what

00:05:53.950 --> 00:05:56.270
percentage of users actually
have other devices, we also

00:05:56.270 --> 00:05:58.740
asked them how many
devices they have.

00:05:58.740 --> 00:06:02.210
And we found some pretty
interesting numbers.

00:06:02.210 --> 00:06:04.600
On average, they have
about two laptops.

00:06:04.600 --> 00:06:07.510
Which is pretty surprising,
because most of these homes,

00:06:07.510 --> 00:06:09.610
they're about two and a
half to three people.

00:06:09.610 --> 00:06:14.560
So you can say that either most
of the adults in the home

00:06:14.560 --> 00:06:16.670
or most people in the home
actually have access to a

00:06:16.670 --> 00:06:17.850
laptop computer.

00:06:17.850 --> 00:06:19.470
Same thing with smartphones.

00:06:19.470 --> 00:06:22.700
Desktops and tablets, these are
actually one per home, on

00:06:22.700 --> 00:06:24.300
average, for people
that actively

00:06:24.300 --> 00:06:25.870
use Google TV devices.

00:06:25.870 --> 00:06:28.180
And we actually found that
there's a median of six

00:06:28.180 --> 00:06:29.770
connected devices
in these homes.

00:06:29.770 --> 00:06:32.110
And when I first read that,
I was kind of shocked.

00:06:32.110 --> 00:06:34.810
I was like, six devices
connected in the living room--

00:06:34.810 --> 00:06:36.980
or not just in the living room,
but in their homes--

00:06:36.980 --> 00:06:37.860
is pretty high.

00:06:37.860 --> 00:06:41.120
But when I started to count all
the connected devices that

00:06:41.120 --> 00:06:44.000
I have my home, it ended up
a lot higher than 12.

00:06:44.000 --> 00:06:45.040
Or, a lot higher than 6.

00:06:45.040 --> 00:06:49.650
It was actually around 12 to 15,
depending on if I had my

00:06:49.650 --> 00:06:51.600
work computer at home
or not, or my work

00:06:51.600 --> 00:06:53.890
devices at home as well.

00:06:53.890 --> 00:06:54.490
So yeah.

00:06:54.490 --> 00:06:57.390
There's a number of connected
devices that people can use to

00:06:57.390 --> 00:06:59.200
connect to their TVs.

00:06:59.200 --> 00:07:02.540
And this number, this median
number of six, it doesn't just

00:07:02.540 --> 00:07:06.750
include smartphones and
tablets, desktops, and

00:07:06.750 --> 00:07:09.570
laptops, but it also includes
things like set-top boxes,

00:07:09.570 --> 00:07:12.460
media devices, and that
type of thing.

00:07:12.460 --> 00:07:14.670
So I challenge you to actually
count the number of connected

00:07:14.670 --> 00:07:16.160
devices you have
in your homes.

00:07:16.160 --> 00:07:18.080
I think you've probably got
about four of them here at

00:07:18.080 --> 00:07:20.340
Google I/O, so you can add
those to your number.

00:07:20.340 --> 00:07:23.430
And you'll probably come
out to a pretty

00:07:23.430 --> 00:07:24.680
astronomical number.

00:07:27.100 --> 00:07:29.160
So given all these numbers that
I've presented, this is

00:07:29.160 --> 00:07:33.240
kind of maybe a slightly more
typical arrangement for being

00:07:33.240 --> 00:07:33.900
in the living room.

00:07:33.900 --> 00:07:36.890
I mean Ms. Multi-screen was a
little bit of an exaggeration.

00:07:36.890 --> 00:07:39.490
We're going to call this
Team More Typical.

00:07:39.490 --> 00:07:42.520
And what we kind of expect to
see in the living room these

00:07:42.520 --> 00:07:43.820
days is that--

00:07:43.820 --> 00:07:46.340
you have to remember that the
TV-viewing experience is a

00:07:46.340 --> 00:07:47.420
social experience.

00:07:47.420 --> 00:07:49.600
So chances are there's probably

00:07:49.600 --> 00:07:51.210
multiple people in there.

00:07:51.210 --> 00:07:53.630
It's not always the case where
people are having a shared

00:07:53.630 --> 00:07:57.390
TV-viewing experience, but
it commonly is the case.

00:07:57.390 --> 00:07:59.770
You can definitely expect
that there's one or

00:07:59.770 --> 00:08:01.100
more laptops available.

00:08:01.100 --> 00:08:03.540
For a group this size, there's
probably a couple.

00:08:03.540 --> 00:08:05.550
People don't always take their
laptops over to their friend's

00:08:05.550 --> 00:08:09.070
house if they're going to watch
a TV show, but that

00:08:09.070 --> 00:08:11.810
certainly does happen if they're
maybe doing some study

00:08:11.810 --> 00:08:12.940
work, and then they're
switching over

00:08:12.940 --> 00:08:14.190
to watching TV later.

00:08:14.190 --> 00:08:17.630
Or, if you're like me, when I
was in school, watching TV and

00:08:17.630 --> 00:08:19.520
using the computer at the
same time, which my

00:08:19.520 --> 00:08:20.890
parents always hated.

00:08:20.890 --> 00:08:24.270
But you also kind of expect that
people have at least one

00:08:24.270 --> 00:08:28.350
tablet per household, for people
that are Google TV

00:08:28.350 --> 00:08:29.620
users and owners.

00:08:29.620 --> 00:08:32.220
And for a group this size,
probably approximately three

00:08:32.220 --> 00:08:33.470
smartphones.

00:08:35.220 --> 00:08:37.370
So there's a number of
different types of

00:08:37.370 --> 00:08:39.730
configurations, a number of
different ways of people can

00:08:39.730 --> 00:08:42.150
use devices to interact
with the TV.

00:08:42.150 --> 00:08:46.010
So really, the opportunity for
developers like yourselves is

00:08:46.010 --> 00:08:49.040
that people really want to do
more than just watch TV.

00:08:49.040 --> 00:08:51.260
I mean, they really want to
start interacting with TV.

00:08:51.260 --> 00:08:53.860
And the way they can interact
with the TV is they can use

00:08:53.860 --> 00:08:56.090
their physical remote control,
which nowadays,

00:08:56.090 --> 00:08:57.100
they're pretty elaborate.

00:08:57.100 --> 00:08:58.330
They have keyboards on them.

00:08:58.330 --> 00:08:58.820
They have D-pads.

00:08:58.820 --> 00:09:01.510
Some of them have touchpads
or gyroscopic sensors.

00:09:01.510 --> 00:09:03.790
Or you can actually give them
the ability to actually use

00:09:03.790 --> 00:09:06.020
their devices that they have
and that they're using in

00:09:06.020 --> 00:09:09.050
their homes to actually
interact with the TV.

00:09:09.050 --> 00:09:11.660
So start thinking about how
you'd use their smartphones,

00:09:11.660 --> 00:09:14.441
their tablets, their
laptop computers.

00:09:14.441 --> 00:09:17.790
A number of different things
they can do to interact with

00:09:17.790 --> 00:09:18.960
TV nowadays.

00:09:18.960 --> 00:09:20.790
The other thing is that you can
also take advantage of the

00:09:20.790 --> 00:09:23.060
fact that both of
these markets--

00:09:23.060 --> 00:09:28.230
the Smart TV market and the
second screen, or let's say,

00:09:28.230 --> 00:09:30.810
the handheld portable device
markets-- are actually very,

00:09:30.810 --> 00:09:32.340
very much on the rise.

00:09:32.340 --> 00:09:35.920
As we heard yesterday, there's
I think 400 million Android

00:09:35.920 --> 00:09:38.240
activations now.

00:09:38.240 --> 00:09:39.680
That's a million activations
a day.

00:09:39.680 --> 00:09:42.800
So the number of people that
actually have access to second

00:09:42.800 --> 00:09:46.400
screen devices in the home is
constantly going up and is

00:09:46.400 --> 00:09:49.900
going up at a pretty
rapid rate.

00:09:49.900 --> 00:09:51.210
And the other thing
is that Smart TVs

00:09:51.210 --> 00:09:52.780
are also on the rise.

00:09:52.780 --> 00:09:55.440
It's projected that by about
2015, there's going to be 500

00:09:55.440 --> 00:09:59.240
million LCD TVs that have
shipped with internet

00:09:59.240 --> 00:10:00.540
connectivity.

00:10:00.540 --> 00:10:04.430
And that is just LCD TVs that
are shipped with connectivity.

00:10:04.430 --> 00:10:08.260
It doesn't include devices that
actually are connected to

00:10:08.260 --> 00:10:10.770
the internet with a set-top
box or another device.

00:10:10.770 --> 00:10:14.320
So the number of Smart TV
devices or connected-TV

00:10:14.320 --> 00:10:18.200
devices on the market in the
next few years are definitely

00:10:18.200 --> 00:10:20.700
going up, so this is definitely
a great time to

00:10:20.700 --> 00:10:24.320
take advantage of this
kind of arrangement.

00:10:24.320 --> 00:10:28.850
So to kind of pique your
creativity, I'll give you a

00:10:28.850 --> 00:10:30.810
few examples of developers
that are building second

00:10:30.810 --> 00:10:33.000
screen apps now, or applications
that are second

00:10:33.000 --> 00:10:35.830
screen apps.

00:10:35.830 --> 00:10:38.320
For example, this one here,
this is the Able remote.

00:10:38.320 --> 00:10:41.330
The developer of Able remote,
he took the Google TV remote

00:10:41.330 --> 00:10:42.670
control application
that we launched

00:10:42.670 --> 00:10:44.090
open-source last year.

00:10:44.090 --> 00:10:47.540
He added a number of really,
really great features.

00:10:47.540 --> 00:10:50.660
It still actually is a universal
remote control.

00:10:50.660 --> 00:10:53.380
It has all universal remote
control functionality, like

00:10:53.380 --> 00:10:55.020
the original application.

00:10:55.020 --> 00:10:59.390
But he added things like you
can favorite channels and

00:10:59.390 --> 00:11:01.750
actually quickly change channels
using the device.

00:11:01.750 --> 00:11:04.270
So if you're like me, you have
200 channels, but you really

00:11:04.270 --> 00:11:05.820
only watch about 5.

00:11:05.820 --> 00:11:09.140
This makes it kind of brainless
to actually get to

00:11:09.140 --> 00:11:11.110
your favorite shows.

00:11:11.110 --> 00:11:13.630
He has the same functionality
with applications and

00:11:13.630 --> 00:11:14.550
websites, as well.

00:11:14.550 --> 00:11:16.760
So if you have a favorite
application on the device, if

00:11:16.760 --> 00:11:19.220
you have a favorite website on
the device, you can actually

00:11:19.220 --> 00:11:21.670
get to it in just a few clicks
on your handheld device.

00:11:21.670 --> 00:11:23.760
And then he also built in some
really interesting integration

00:11:23.760 --> 00:11:24.910
with Google Music.

00:11:24.910 --> 00:11:27.130
It's a widget on your handheld
device that can actually

00:11:27.130 --> 00:11:30.790
control the playback
on Google Music.

00:11:30.790 --> 00:11:32.690
The Peel Smart Remote app--

00:11:32.690 --> 00:11:34.550
they're actually in the Sandbox
today, so if you

00:11:34.550 --> 00:11:36.950
haven't had a chance to
see their application,

00:11:36.950 --> 00:11:38.960
now's a good time.

00:11:38.960 --> 00:11:42.320
The Peel Smart Remote app is a
TV and movies discovery app

00:11:42.320 --> 00:11:45.920
with some ties into
social ties.

00:11:45.920 --> 00:11:47.990
So the integration, the way that
it integrates with Google

00:11:47.990 --> 00:11:50.590
TV, like the Able remote, they
actually give you the ability

00:11:50.590 --> 00:11:53.290
to control your TV with
your handheld device.

00:11:53.290 --> 00:11:57.480
So if you've actually launched
into a VOD service on Google

00:11:57.480 --> 00:12:02.690
TV, like Netflix, you actually
can get play controls.

00:12:02.690 --> 00:12:04.630
And you can actually can get
navigation controls as well.

00:12:04.630 --> 00:12:06.600
So if you're in the application,
you can navigate

00:12:06.600 --> 00:12:08.220
around, get more information
about

00:12:08.220 --> 00:12:09.400
the show you're watching.

00:12:09.400 --> 00:12:12.180
You can actually navigate out of
the application as well and

00:12:12.180 --> 00:12:16.390
use the Peel app to navigate
the Google TV interface.

00:12:16.390 --> 00:12:19.220
On the left-hand side, this
is actually their phone

00:12:19.220 --> 00:12:19.850
application.

00:12:19.850 --> 00:12:23.770
On the right-hand side is
the tablet version.

00:12:23.770 --> 00:12:25.970
Trivialist is actually a
little bit different.

00:12:25.970 --> 00:12:30.400
So Trivialist is not a remote
control application.

00:12:30.400 --> 00:12:33.810
So on the right-hand side is
actually the TV application.

00:12:33.810 --> 00:12:35.780
So what they've done is
they've built a trivia

00:12:35.780 --> 00:12:36.990
application.

00:12:36.990 --> 00:12:38.980
They're putting that on Google
TV devices and then putting

00:12:38.980 --> 00:12:41.940
those Google TV devices
in sports bars.

00:12:41.940 --> 00:12:43.840
You go into a sports bar.

00:12:43.840 --> 00:12:45.840
If you don't already have the
Trivialist app, you can see

00:12:45.840 --> 00:12:48.260
that you have the opportunity
to download it.

00:12:48.260 --> 00:12:50.440
You put it on your smartphone,
and then you can actually play

00:12:50.440 --> 00:12:54.080
trivia with other people
at the sports bar.

00:12:54.080 --> 00:12:55.900
The interesting thing about
this application on the

00:12:55.900 --> 00:12:58.300
technological side is that
they're not actually

00:12:58.300 --> 00:12:59.740
communicating from the
handheld device to

00:12:59.740 --> 00:13:01.070
the Google TV device.

00:13:01.070 --> 00:13:02.400
They're actually using
the cloud.

00:13:02.400 --> 00:13:05.330
So any command, or when you make
decisions on the phone,

00:13:05.330 --> 00:13:08.530
it actually sends
it up the cloud.

00:13:08.530 --> 00:13:11.360
And when it's time to change the
question, actually that's

00:13:11.360 --> 00:13:12.730
being pushed down to
your phone as well.

00:13:12.730 --> 00:13:14.680
So the communication's
not direct.

00:13:14.680 --> 00:13:17.370
And obviously, the reason for
that is that not all sports

00:13:17.370 --> 00:13:20.720
bars have open networks, so
you can't really rely on

00:13:20.720 --> 00:13:24.050
phone-to-device or phone-to-TV
communication directly.

00:13:24.050 --> 00:13:27.140
And last but not least, MOVL.

00:13:27.140 --> 00:13:29.870
MOVL actually was at Google
I/O last year with us.

00:13:29.870 --> 00:13:32.100
They're also at Google I/O
with us this year.

00:13:32.100 --> 00:13:34.800
I think they're in the
Google TV Lounge now.

00:13:34.800 --> 00:13:37.720
So they actually have Android
and web-based multi-screen

00:13:37.720 --> 00:13:41.860
applications and APIs that
integrate with Google TV.

00:13:41.860 --> 00:13:43.570
The applications that--

00:13:43.570 --> 00:13:45.520
on the right-hand side here,
this is the Poker Fun game,

00:13:45.520 --> 00:13:46.910
which is really cool.

00:13:46.910 --> 00:13:50.480
You can play poker with multiple
of your friends in

00:13:50.480 --> 00:13:51.600
your living room,
or actually--

00:13:51.600 --> 00:13:54.820
I think it actually works now
with people in other living

00:13:54.820 --> 00:13:56.080
rooms as well.

00:13:56.080 --> 00:13:58.430
And you have your personal
experience on your handheld

00:13:58.430 --> 00:14:00.700
device, and the TV actually has
a shared experience, which

00:14:00.700 --> 00:14:01.940
is the poker table.

00:14:01.940 --> 00:14:04.650
They have WeDraw and
WeTeli as well.

00:14:04.650 --> 00:14:07.140
These work with their APIs,
the Cloud Connect and the

00:14:07.140 --> 00:14:12.360
Direct Connect platforms or
APIS, for both cloud-based and

00:14:12.360 --> 00:14:14.800
direct communication with
the Google TV device.

00:14:14.800 --> 00:14:17.720
And they also have what they
call the Kontrol TV platform

00:14:17.720 --> 00:14:20.440
or the controller, which
actually puts all the apps

00:14:20.440 --> 00:14:23.600
into one handheld control.

00:14:23.600 --> 00:14:27.740
So the goal for us today, so
now that you hopefully are

00:14:27.740 --> 00:14:30.370
kind of inspired to build second
screen apps, we're

00:14:30.370 --> 00:14:32.050
going to teach you what you need
to know to start building

00:14:32.050 --> 00:14:33.630
these applications.

00:14:33.630 --> 00:14:35.920
And to do that, we're first
going to teach you how to

00:14:35.920 --> 00:14:38.900
share data, basically share
any data, between a second

00:14:38.900 --> 00:14:41.040
screen and a first
screen device.

00:14:41.040 --> 00:14:43.350
Then we're going to talk a
little bit about the Anymote

00:14:43.350 --> 00:14:46.740
Protocol and Library for
sending input events--

00:14:46.740 --> 00:14:48.260
input events specifically--

00:14:48.260 --> 00:14:51.760
from the second screen to the
first screen or to Google TV.

00:14:51.760 --> 00:14:54.920
And then we're going to show you
how to implement a Chrome

00:14:54.920 --> 00:14:56.540
extension using Anymote
for actually

00:14:56.540 --> 00:14:57.550
controlling Google TV.

00:14:57.550 --> 00:15:01.090
And that's Dave's specialty.

00:15:01.090 --> 00:15:03.530
So on to the technical
side of things.

00:15:03.530 --> 00:15:07.160
So like I said, I'm going to
tell you how to share any data

00:15:07.160 --> 00:15:08.710
between second screen
and first screen

00:15:08.710 --> 00:15:09.840
or Google TV devices.

00:15:09.840 --> 00:15:13.360
And to do that, I'm going to
do a quick demo to kind of

00:15:13.360 --> 00:15:15.000
show you what I mean.

00:15:15.000 --> 00:15:20.850
This demo, what we did is we put
together a few demos for

00:15:20.850 --> 00:15:22.450
using sensor information.

00:15:22.450 --> 00:15:26.290
So the handheld device actually
becomes kind of a

00:15:26.290 --> 00:15:29.450
sensor proxy for the TV.

00:15:29.450 --> 00:15:32.420
So what we'll do is we're going
to bring up the sensor

00:15:32.420 --> 00:15:34.790
application on the TV.

00:15:34.790 --> 00:15:35.630
These are just demos.

00:15:35.630 --> 00:15:38.110
I mean, they're very simple
applications.

00:15:38.110 --> 00:15:40.000
But hopefully it'll kind of
give you an idea of what's

00:15:40.000 --> 00:15:42.720
possible when you can just
basically pass any data

00:15:42.720 --> 00:15:44.675
between the two devices.

00:16:00.190 --> 00:16:02.010
So this is called the
remote sensor data.

00:16:02.010 --> 00:16:05.960
So basically, we took some of
the sensor demos that we had

00:16:05.960 --> 00:16:08.960
for Android, and we ported
them to Google TV.

00:16:08.960 --> 00:16:12.270
This is actually the ColorCube
Cube example that you can get

00:16:12.270 --> 00:16:15.090
for your Android devices.

00:16:15.090 --> 00:16:18.950
And so what I'm going to do now
is I'm going to pair my

00:16:18.950 --> 00:16:21.850
handheld device with
the Google TV.

00:16:21.850 --> 00:16:23.630
This pairing--

00:16:23.630 --> 00:16:25.540
it's a little bit dark, but
I hope you can see it.

00:16:28.180 --> 00:16:30.540
So the pairing process
can be automatic.

00:16:30.540 --> 00:16:34.180
There's technologies that
can make it automatic.

00:16:34.180 --> 00:16:37.650
Let's see if I'm
paired already.

00:16:37.650 --> 00:16:38.900
Nope.

00:16:41.850 --> 00:16:42.525
Find Google TVs.

00:16:42.525 --> 00:16:44.130
So what I'm going to do is--

00:16:44.130 --> 00:16:45.740
since we don't have auto-pairing
on this network,

00:16:45.740 --> 00:16:46.900
I'm actually just going
to enter the IP

00:16:46.900 --> 00:16:48.510
address real quick.

00:16:48.510 --> 00:16:51.700
And this is kind of a one-time
process, because next time I

00:16:51.700 --> 00:16:55.830
try to connect, it should
automatically be there.

00:16:55.830 --> 00:16:58.460
And we conveniently put the IP
address on the display so that

00:16:58.460 --> 00:16:59.915
you can quickly launch this.

00:17:08.579 --> 00:17:09.599
So now I'm going to--

00:17:09.599 --> 00:17:11.079
on the phone, I'm going
to launch the

00:17:11.079 --> 00:17:12.380
Colored Cube interface.

00:17:12.380 --> 00:17:15.099
You probably recognize this from
Android phones as one of

00:17:15.099 --> 00:17:16.680
the Android samples.

00:17:16.680 --> 00:17:18.439
And what we're doing now is
basically, the handheld device

00:17:18.439 --> 00:17:19.390
has become a proxy.

00:17:19.390 --> 00:17:21.900
So any of the sensor commands
on the handheld device are

00:17:21.900 --> 00:17:24.160
just sent directly across
to the television.

00:17:24.160 --> 00:17:25.390
So if I pick this
up, you won't be

00:17:25.390 --> 00:17:26.329
able to see it anymore.

00:17:26.329 --> 00:17:27.740
But as I rotate the
phone around, it

00:17:27.740 --> 00:17:29.350
actually rotates the cube.

00:17:29.350 --> 00:17:31.240
And the first time I actually
ran this demo, I was little

00:17:31.240 --> 00:17:34.080
bit confused, because as I
rotate the phone, let's say,

00:17:34.080 --> 00:17:36.480
to the left, actually, the cube
rotates to the right.

00:17:36.480 --> 00:17:38.190
It doesn't seem-- it seems
like the perspective's a

00:17:38.190 --> 00:17:39.290
little bit backwards.

00:17:39.290 --> 00:17:42.060
But what it's actually doing is
on the phone, since you're

00:17:42.060 --> 00:17:45.880
looking into the screen, when
you rotate the handheld

00:17:45.880 --> 00:17:49.240
device, you're actually kind of
rotating your perspective

00:17:49.240 --> 00:17:50.610
of the cube.

00:17:50.610 --> 00:17:53.030
And we actually maintain that
type of perspective.

00:17:53.030 --> 00:17:54.860
But you'd actually think when
I rotate the phone down, you

00:17:54.860 --> 00:17:56.820
might want to rotate
the cube down.

00:17:56.820 --> 00:17:59.710
Just a caveat if you try
to do this yourself.

00:17:59.710 --> 00:18:05.230
I'll give one more quick demo,
and then we'll move on.

00:18:05.230 --> 00:18:10.110
We also took the Sensor
Graph demo.

00:18:10.110 --> 00:18:12.290
And let's see if I
can click that.

00:18:14.870 --> 00:18:18.250
So this is also one of
the Android examples.

00:18:18.250 --> 00:18:20.820
We also ported it to TV.

00:18:20.820 --> 00:18:23.170
And this is kind of to show that
we're taking pretty much

00:18:23.170 --> 00:18:23.910
the main sensors--

00:18:23.910 --> 00:18:26.380
I think we're taking the
accelerometer, the gyroscope,

00:18:26.380 --> 00:18:28.570
and the orientation sensors--

00:18:28.570 --> 00:18:30.210
and we're just actually passing
all that information

00:18:30.210 --> 00:18:32.130
to the TV and rendering
it here.

00:18:32.130 --> 00:18:34.460
So you see, if I pick up the
phone, if I start to rotate

00:18:34.460 --> 00:18:36.500
it, move it around--

00:18:36.500 --> 00:18:37.750
all that information
is being sent

00:18:37.750 --> 00:18:39.210
back, pretty much real-time.

00:18:39.210 --> 00:18:41.410
We haven't necessarily
benchmarked it, because a lot

00:18:41.410 --> 00:18:44.390
of it depends really on the
nature of the network.

00:18:44.390 --> 00:18:48.170
But with the technology we're
using, I mean, it's really

00:18:48.170 --> 00:18:51.460
low-level UDP communication, you
can pretty much guarantee

00:18:51.460 --> 00:18:54.100
it's real-time communication.

00:18:54.100 --> 00:18:57.490
And actually, as the phone goes
to sleep, it actually

00:18:57.490 --> 00:18:58.720
sends the disconnect command.

00:18:58.720 --> 00:19:03.260
So that's why we just saw
it go away there.

00:19:03.260 --> 00:19:05.330
So now we'll talk a little bit
of how you can actually

00:19:05.330 --> 00:19:09.680
implement something like
that on Google TV.

00:19:09.680 --> 00:19:11.150
So back to the slides--

00:19:11.150 --> 00:19:12.400
oh, thanks Dave.

00:19:17.530 --> 00:19:19.210
OK, we've got the demo.

00:19:19.210 --> 00:19:22.910
So this is the do-it-yourself
version, so if you wanted to

00:19:22.910 --> 00:19:24.790
actually build pretty
much that same

00:19:24.790 --> 00:19:26.710
application from scratch.

00:19:26.710 --> 00:19:31.280
Like I said, Google TV devices
all broadcast using mDNS, and

00:19:31.280 --> 00:19:34.390
Anymote TCP local service.

00:19:34.390 --> 00:19:38.230
So if you want to find Google TV
devices on somebody's home

00:19:38.230 --> 00:19:40.780
network, all you really do
is you search for this

00:19:40.780 --> 00:19:44.010
_anymote._tcp.local
by using mDNS.

00:19:44.010 --> 00:19:47.610
Once you actually find it, you
can actually extract out the

00:19:47.610 --> 00:19:50.490
name of the device, the IP
address, and the port.

00:19:50.490 --> 00:19:52.390
The port is actually for the
Anymote service, which we'll

00:19:52.390 --> 00:19:53.860
talk about a little bit later.

00:19:53.860 --> 00:19:56.520
But this is actually a quick and
easy way to actually get

00:19:56.520 --> 00:20:00.270
access to the device or find
devices on the network.

00:20:00.270 --> 00:20:02.580
So the example code here,
this is actually

00:20:02.580 --> 00:20:05.350
using the JmDNS library.

00:20:05.350 --> 00:20:06.900
I would highly recommend
that you use the

00:20:06.900 --> 00:20:08.510
library to do this.

00:20:08.510 --> 00:20:12.310
Otherwise, you'd actually have
to build an mDNS client from

00:20:12.310 --> 00:20:14.520
scratch, which could be a lot of
fun, but it could also be a

00:20:14.520 --> 00:20:16.740
lot of work.

00:20:16.740 --> 00:20:20.490
So starting a service on a
device in Android world, or in

00:20:20.490 --> 00:20:24.220
Java in general, you can rely
on the java.net libraries.

00:20:24.220 --> 00:20:27.900
It's fairly straightforward to
open up a server socket, bind

00:20:27.900 --> 00:20:30.430
it to a port, and actually
start communication.

00:20:30.430 --> 00:20:31.770
So here, we have an example.

00:20:31.770 --> 00:20:34.990
We're starting the server
socket on port 1337.

00:20:34.990 --> 00:20:38.200
We have a loop here, because
what ends up happening is you

00:20:38.200 --> 00:20:40.010
block for communication.

00:20:40.010 --> 00:20:42.860
Once the connection is
made, you unblock.

00:20:42.860 --> 00:20:45.500
Once the socket is closed, or
you finish your communication,

00:20:45.500 --> 00:20:48.540
then you can go back to a reset
state, so you're waiting

00:20:48.540 --> 00:20:51.060
for communication again.

00:20:51.060 --> 00:20:54.450
So like I said, the opening of a
socket that blocks until the

00:20:54.450 --> 00:20:55.780
communication accepted.

00:20:55.780 --> 00:20:58.760
And then you have to implement
a couple of methods for

00:20:58.760 --> 00:21:01.010
reading data and writing
data from the

00:21:01.010 --> 00:21:03.860
input and output streams.

00:21:03.860 --> 00:21:06.100
Likewise, to connect to the
service using the java.net

00:21:06.100 --> 00:21:08.090
libraries is very
straightforward.

00:21:08.090 --> 00:21:09.080
You open up your socket.

00:21:09.080 --> 00:21:11.990
You pass it the IP address
and the port.

00:21:11.990 --> 00:21:13.860
You write and read your data.

00:21:13.860 --> 00:21:15.800
Writing and reading data, you're
streaming data back and

00:21:15.800 --> 00:21:19.070
forth using the input
and output ports.

00:21:19.070 --> 00:21:21.980
You close your socket.

00:21:21.980 --> 00:21:23.940
When you actually-- if you
want to port this to an

00:21:23.940 --> 00:21:26.530
Android application and
productize it, though, things

00:21:26.530 --> 00:21:28.100
get a lot more--

00:21:28.100 --> 00:21:30.140
we'll say serious.

00:21:30.140 --> 00:21:33.570
So when you open up the socket
communication, the port may

00:21:33.570 --> 00:21:34.440
already be used.

00:21:34.440 --> 00:21:36.130
Don't take this slide
too seriously.

00:21:36.130 --> 00:21:39.110
I actually went through and
tried this, built this

00:21:39.110 --> 00:21:41.820
application out from scratch
using the sensor APIs.

00:21:41.820 --> 00:21:45.350
So these are actually real
to-dos, but we'll get to the

00:21:45.350 --> 00:21:48.680
point of why I put this slide
up here in a minute.

00:21:48.680 --> 00:21:49.740
But you have to worry
about things--

00:21:49.740 --> 00:21:50.940
is the port already used?

00:21:50.940 --> 00:21:52.240
How do you handle
the exceptions?

00:21:52.240 --> 00:21:54.010
Because there's a lot of
exceptions that can be thrown

00:21:54.010 --> 00:21:55.260
at various places.

00:21:57.580 --> 00:22:02.520
With Android, you can't do any
network on the UI thread, so

00:22:02.520 --> 00:22:04.380
you obviously have to
spawn off threads.

00:22:04.380 --> 00:22:05.980
And in this situation, you
probably want to spawn off a

00:22:05.980 --> 00:22:07.020
couple of threads.

00:22:07.020 --> 00:22:11.150
One thread to actually do the
network off of the UI thread

00:22:11.150 --> 00:22:13.900
and another thread to actually
do I/O so that you can open up

00:22:13.900 --> 00:22:17.040
your communication for a second
device to communicate

00:22:17.040 --> 00:22:18.830
at the same time.

00:22:18.830 --> 00:22:21.330
Because they both use
the same socket.

00:22:21.330 --> 00:22:22.720
And a little bit more.

00:22:22.720 --> 00:22:25.240
So the another really important
thing to remember is

00:22:25.240 --> 00:22:26.840
that reading and
writing data--

00:22:26.840 --> 00:22:29.650
if you want to read and write
structured data, you need some

00:22:29.650 --> 00:22:32.400
way to actually serialize and
deserialize that data.

00:22:32.400 --> 00:22:35.530
And that actually has to be
the same on both sides.

00:22:35.530 --> 00:22:39.165
You have to have kind of a
mirroring of the serialization

00:22:39.165 --> 00:22:40.370
and deserialization.

00:22:40.370 --> 00:22:42.830
So if you're using one
technology to serialize the

00:22:42.830 --> 00:22:45.100
data on the handheld device,
you need to use the same

00:22:45.100 --> 00:22:48.220
technology or similar technology
to deserialize it.

00:22:48.220 --> 00:22:51.270
Likewise with actually opening
up the socket connection.

00:22:51.270 --> 00:22:53.600
When you port this to a
production Android device,

00:22:53.600 --> 00:22:56.180
there's a lot more work that
needs to go into it.

00:22:56.180 --> 00:22:59.480
The biggest one is actually,
sometimes mDNS doesn't work.

00:22:59.480 --> 00:23:00.700
For example, a lot of corporate

00:23:00.700 --> 00:23:03.540
networks, they block mDNS.

00:23:03.540 --> 00:23:06.340
Most users' home networks
don't, however.

00:23:06.340 --> 00:23:08.610
But you may want to give the
user the ability to enter an

00:23:08.610 --> 00:23:09.220
IP address.

00:23:09.220 --> 00:23:11.790
This requires you to open
up a dialogue or some

00:23:11.790 --> 00:23:13.980
type of user interface.

00:23:13.980 --> 00:23:16.520
You have to start the threads,
et cetera, to actually do the

00:23:16.520 --> 00:23:18.020
communication.

00:23:18.020 --> 00:23:19.230
So there's a lot more work.

00:23:19.230 --> 00:23:22.010
Socket communication
is a lot of fun.

00:23:22.010 --> 00:23:23.720
Like I said, I went through
building an application from

00:23:23.720 --> 00:23:26.720
scratch that does everything
in socket communication.

00:23:26.720 --> 00:23:28.680
I had something that was
reasonably well working after

00:23:28.680 --> 00:23:30.370
a couple hundred
lines of code.

00:23:30.370 --> 00:23:32.780
When I started to put a little
bit more of the Android

00:23:32.780 --> 00:23:36.160
framework in there about the UI
to allow people to actually

00:23:36.160 --> 00:23:39.290
manually enter, I was up to
maybe about 500 lines of code.

00:23:39.290 --> 00:23:41.590
It took me a couple of days
to actually get it in good

00:23:41.590 --> 00:23:43.180
working order.

00:23:43.180 --> 00:23:45.960
So to kind of help developers
not have to go through that,

00:23:45.960 --> 00:23:49.050
all of you to go through that
every time, what we've done is

00:23:49.050 --> 00:23:52.850
we've put together a Google TV
Data Sharing Android Library

00:23:52.850 --> 00:23:54.830
for Android developers.

00:23:54.830 --> 00:23:57.770
We're in the process of
launching this now.

00:23:57.770 --> 00:23:59.930
It's not quite out there, but
it will be out there in a

00:23:59.930 --> 00:24:00.440
couple days.

00:24:00.440 --> 00:24:03.240
We're waiting for one last
approval from open sourcing.

00:24:03.240 --> 00:24:05.670
So what the Google TV Data
Sharing Library does is it

00:24:05.670 --> 00:24:09.370
really simplifies for Android
developers the process of

00:24:09.370 --> 00:24:13.440
finding and sharing data
with Google TV.

00:24:13.440 --> 00:24:17.610
It's built on a client/server
infrastructure or

00:24:17.610 --> 00:24:18.590
architecture.

00:24:18.590 --> 00:24:20.640
And both libraries are actually
in one package.

00:24:20.640 --> 00:24:22.920
And they actually work
almost the same way.

00:24:22.920 --> 00:24:25.950
So actually, I'll go over a
little bit the code, but the

00:24:25.950 --> 00:24:28.600
code works on both sides
relatively the same way.

00:24:28.600 --> 00:24:30.820
So the library actually deals
with things like the service

00:24:30.820 --> 00:24:31.870
discovery and pairing.

00:24:31.870 --> 00:24:34.540
It includes the UI.

00:24:34.540 --> 00:24:37.050
The library's open source, so
if you don't like the UI the

00:24:37.050 --> 00:24:39.460
way it is, you can obviously
tweak it.

00:24:39.460 --> 00:24:41.330
It deals with the socket
communication, and that

00:24:41.330 --> 00:24:44.120
includes the threading and
the exception handling.

00:24:44.120 --> 00:24:47.730
That also deals with the
data serialization and

00:24:47.730 --> 00:24:50.440
deserialization using protocol
buffers, which is a really

00:24:50.440 --> 00:24:54.445
lightweight and
language-agnostic protocol for

00:24:54.445 --> 00:24:56.860
deserializing and serializing
data.

00:24:56.860 --> 00:24:58.860
It's part of the way that we
actually get the really

00:24:58.860 --> 00:25:01.420
low-latency communication.

00:25:01.420 --> 00:25:04.910
And in this library, we baked
in a few things, like the

00:25:04.910 --> 00:25:08.000
reference messages, which
include registration.

00:25:08.000 --> 00:25:10.810
That tells you when the device
connected, disconnected, and

00:25:10.810 --> 00:25:12.190
pinging the device.

00:25:12.190 --> 00:25:16.890
Sensor data, so the sensor demo
that I gave you, we have

00:25:16.890 --> 00:25:19.930
the protocol buffers in there
for sending sensor data.

00:25:19.930 --> 00:25:22.670
And it's not the entire suite,
because it seems like there's

00:25:22.670 --> 00:25:26.620
a new sensor almost every day
with Android, but we got most

00:25:26.620 --> 00:25:27.480
of the main ones.

00:25:27.480 --> 00:25:29.810
And if your favorite sensor's
not in there, you're

00:25:29.810 --> 00:25:31.310
absolutely free to
add it in there.

00:25:31.310 --> 00:25:34.190
And generic data, that's
basically just strings.

00:25:34.190 --> 00:25:37.050
So if you have serialized data
on your second screen device

00:25:37.050 --> 00:25:40.070
and you want to send, for
example, JSON or XML, and you

00:25:40.070 --> 00:25:42.260
want to send that your first
screen device, you can

00:25:42.260 --> 00:25:44.380
actually just package it into a
string, send it across, and

00:25:44.380 --> 00:25:48.290
actually deserialize your JSON
or XML or whatever your

00:25:48.290 --> 00:25:53.500
favorite string-based data
serialization format is.

00:25:53.500 --> 00:25:58.580
So really, implementing this
is pretty straightforward.

00:25:58.580 --> 00:26:00.555
And this is actually going to
be a lot of code in the next

00:26:00.555 --> 00:26:02.930
few sections.

00:26:02.930 --> 00:26:05.960
This was an advanced course,
so hopefully you're waiting

00:26:05.960 --> 00:26:08.160
for a little bit of code.

00:26:08.160 --> 00:26:11.260
So you actually implement this
CallbackListener, just two

00:26:11.260 --> 00:26:13.890
simple methods, one for dealing
with errors and one

00:26:13.890 --> 00:26:15.970
for dealing with the
data coming back.

00:26:15.970 --> 00:26:18.410
Oh, and by the way,
don't worry about

00:26:18.410 --> 00:26:19.170
copying all this down.

00:26:19.170 --> 00:26:21.720
This is all going to go out in
our documentation, so it's

00:26:21.720 --> 00:26:23.050
mostly cut-and-paste.

00:26:23.050 --> 00:26:25.490
And I think most of it's
actually in an activity that

00:26:25.490 --> 00:26:28.620
you can implement or extend
yourself, what we'll call the

00:26:28.620 --> 00:26:31.610
data-sharing activity, which
will simplify things.

00:26:31.610 --> 00:26:35.780
But if you wanted to use this
code the most flexible way,

00:26:35.780 --> 00:26:38.530
you want to implement
this activity.

00:26:38.530 --> 00:26:41.090
So you want to implement a
service connection so that you

00:26:41.090 --> 00:26:43.630
can attach your
CallbackListener, which was

00:26:43.630 --> 00:26:46.860
your activity, to the
data-sharing client.

00:26:46.860 --> 00:26:49.170
And that's basically this
line right here.

00:26:49.170 --> 00:26:53.280
So once the service is
connected, the service is

00:26:53.280 --> 00:26:56.510
actually what does the
communication, which you don't

00:26:56.510 --> 00:26:57.500
have to implement.

00:26:57.500 --> 00:27:00.430
But once the service is
connected, you attach your

00:27:00.430 --> 00:27:03.020
ClientListener to the data
service, and that's how you

00:27:03.020 --> 00:27:07.140
get these callbacks on error
and response data.

00:27:07.140 --> 00:27:09.260
And likewise, when the service
is disconnected, you want to

00:27:09.260 --> 00:27:13.530
shut things down so you're no
longer listening for results.

00:27:13.530 --> 00:27:18.340
And then you start the service,
and this actually

00:27:18.340 --> 00:27:19.050
gets things going.

00:27:19.050 --> 00:27:21.680
So this actually kicks off the
pairing process, which

00:27:21.680 --> 00:27:23.550
includes things like
the user interface

00:27:23.550 --> 00:27:25.450
for doing the pairing.

00:27:25.450 --> 00:27:29.710
It does the whole mDNS scanning
the network as well,

00:27:29.710 --> 00:27:31.180
and will give the user interface
if there's multiple

00:27:31.180 --> 00:27:33.150
devices on the network.

00:27:33.150 --> 00:27:34.450
So that's pretty much it.

00:27:34.450 --> 00:27:36.250
And from that point on, it's
just a matter of actually

00:27:36.250 --> 00:27:38.860
sending your messages
and your code.

00:27:38.860 --> 00:27:41.390
So protocol buffers, the way
it works is you take a

00:27:41.390 --> 00:27:45.690
protocol buffer definition, you
convert that into a Java

00:27:45.690 --> 00:27:47.320
class, if you're programming
Java.

00:27:47.320 --> 00:27:50.850
But it is language-agnostic,
so you can basically turn

00:27:50.850 --> 00:27:52.780
protocol buffer definition
into pretty much any

00:27:52.780 --> 00:27:55.810
programming language interface
implementation.

00:27:55.810 --> 00:27:59.370
But you create your protocol
buffer, you add your data to

00:27:59.370 --> 00:28:02.080
the protocol buffer message,
and then you just ship it,

00:28:02.080 --> 00:28:04.970
which is the last line here.

00:28:04.970 --> 00:28:08.170
So one last thing.

00:28:08.170 --> 00:28:10.430
So this is actually what the
protocol buffer looks like.

00:28:10.430 --> 00:28:12.740
And for the sensor data, we
actually made the protocol

00:28:12.740 --> 00:28:15.650
buffer look almost exactly like
the Android SensorEvent

00:28:15.650 --> 00:28:16.560
and sensor classes.

00:28:16.560 --> 00:28:20.140
So the SensorEvent in Android
has accuracy, the sensor

00:28:20.140 --> 00:28:22.230
information, the timestamp,
and the values.

00:28:22.230 --> 00:28:23.760
We basically did
the same thing.

00:28:23.760 --> 00:28:27.530
So on the receiver side, it
essentially looks like you're

00:28:27.530 --> 00:28:29.170
getting a sensor event.

00:28:29.170 --> 00:28:31.540
Instead of actually an Android
sensor event, that's going to

00:28:31.540 --> 00:28:37.650
be a data-sharing
library event.

00:28:37.650 --> 00:28:41.870
And then you actually can wire
that into your user interface,

00:28:41.870 --> 00:28:45.140
pretty much like you would with
a normal sensor event.

00:28:45.140 --> 00:28:47.630
Like I said, this Data Sharing
Library, it's actually going

00:28:47.630 --> 00:28:50.970
out relatively soon, if
it's not out already.

00:28:50.970 --> 00:28:53.180
I didn't check my email in
the last couple of hours.

00:28:53.180 --> 00:28:54.550
But it's going out at
code.google.com/

00:28:54.550 --> 00:28:55.800
p/googletv-data-sharing.

00:28:58.080 --> 00:29:02.390
The link will be on the Google
TV developer's documentation.

00:29:02.390 --> 00:29:04.740
And the two samples that I
showed you a moment ago,

00:29:04.740 --> 00:29:06.960
they're also both on there as
well, so you can actually run

00:29:06.960 --> 00:29:09.610
those out of the code
repository.

00:29:09.610 --> 00:29:11.870
Take them, extend them, do
whatever you want with them.

00:29:11.870 --> 00:29:16.170
They're pretty much your
guys' to play with.

00:29:16.170 --> 00:29:19.680
So that's actually sharing any
data between a second screen

00:29:19.680 --> 00:29:22.370
and a first screen device
or Google TV.

00:29:22.370 --> 00:29:25.120
And now I'll talk a little bit
about Anymote, which is a

00:29:25.120 --> 00:29:26.150
little different paradigm.

00:29:26.150 --> 00:29:30.130
So the Anymote protocol is
actually what we use for the

00:29:30.130 --> 00:29:33.220
Google TV Android remote control
and the iOS remote

00:29:33.220 --> 00:29:37.210
control that are available
for Google TV now.

00:29:37.210 --> 00:29:40.370
So basically, the idea is that
you turn your handheld device

00:29:40.370 --> 00:29:44.060
into a remote control for
sending key events, touch and

00:29:44.060 --> 00:29:46.560
mouse events, and
Android intents.

00:29:46.560 --> 00:29:48.660
And we'll talk a little bit
more about how that works.

00:29:48.660 --> 00:29:51.490
Dave's example really
kind of captures the

00:29:51.490 --> 00:29:52.980
benefit of all these.

00:29:52.980 --> 00:29:55.990
But so Anymote in itself,
though, is a protocol or a

00:29:55.990 --> 00:29:58.460
specification that defines how
apps can actually securely

00:29:58.460 --> 00:30:03.746
send these types of events from
a second screen device to

00:30:03.746 --> 00:30:06.880
a first screen device on
a user's home network.

00:30:06.880 --> 00:30:09.750
Every Google TV device has the
Anymote service running, so

00:30:09.750 --> 00:30:11.860
you don't have to worry about
implementing anything on the

00:30:11.860 --> 00:30:15.060
Google TV side, like you did
with the sensor information or

00:30:15.060 --> 00:30:17.200
the Data Sharing Library.

00:30:17.200 --> 00:30:18.690
So Anymote, actually,
the service is

00:30:18.690 --> 00:30:20.070
running on Google TV.

00:30:20.070 --> 00:30:21.310
You're just responsible
for what goes on the

00:30:21.310 --> 00:30:23.100
second screen device.

00:30:23.100 --> 00:30:25.670
And the interesting thing about
the Anymote protocol,

00:30:25.670 --> 00:30:28.790
the way it works on Google TV,
is that whichever app is in

00:30:28.790 --> 00:30:33.340
the foreground actually receives
the Anymote events.

00:30:33.340 --> 00:30:35.690
So basically, if you're familiar
with the Android

00:30:35.690 --> 00:30:39.080
remote control, I can use that
for navigating pretty much

00:30:39.080 --> 00:30:42.440
anything on the device, or
actually controlling any

00:30:42.440 --> 00:30:43.870
application on the device.

00:30:43.870 --> 00:30:46.460
And this is actually really
unique in the Android world,

00:30:46.460 --> 00:30:49.700
because generally, applications
cannot send key

00:30:49.700 --> 00:30:53.360
events or touch events to
another application.

00:30:53.360 --> 00:30:55.490
So this allows you to actually
build an application on the

00:30:55.490 --> 00:30:57.910
second screen that will actually
send these key events

00:30:57.910 --> 00:31:01.890
and touch events to another
application on

00:31:01.890 --> 00:31:05.120
the Google TV device.

00:31:05.120 --> 00:31:07.350
So again, this is a
client/server infrastructure,

00:31:07.350 --> 00:31:08.680
so the second screen
is the client.

00:31:08.680 --> 00:31:12.460
The first screen
is the server.

00:31:12.460 --> 00:31:14.500
Discovery is also via mDNS.

00:31:14.500 --> 00:31:16.940
That's the point of the mDNS
Anymote protocol that we're

00:31:16.940 --> 00:31:18.206
broadcasting.

00:31:18.206 --> 00:31:20.780
The pairing protocol,
since it is secure--

00:31:20.780 --> 00:31:22.980
and the reason for security is
since you're sending mouse

00:31:22.980 --> 00:31:24.540
events, and you're sending
touch events, and you're

00:31:24.540 --> 00:31:27.190
sending intents from the second
screen to the first

00:31:27.190 --> 00:31:31.330
screen, you don't want just
anybody sending that data

00:31:31.330 --> 00:31:34.200
across your network and
controlling your TV without

00:31:34.200 --> 00:31:37.800
some kind of authentication
and pairing process.

00:31:37.800 --> 00:31:39.290
The other thing is, too, is
that if you're using your

00:31:39.290 --> 00:31:42.490
handheld device and you're
sending key events, you don't

00:31:42.490 --> 00:31:44.460
want other people on your
network, necessarily, sniffing

00:31:44.460 --> 00:31:45.060
those key events.

00:31:45.060 --> 00:31:47.540
Because you could be entering
a password or sending

00:31:47.540 --> 00:31:50.130
confidential information from
your second screen to your

00:31:50.130 --> 00:31:51.230
first screen.

00:31:51.230 --> 00:31:54.340
So there's an authentication
and pairing dance they

00:31:54.340 --> 00:31:57.710
basically involves the second
screen sending a request to

00:31:57.710 --> 00:32:00.050
Google TV, saying hey,
I want to pair.

00:32:00.050 --> 00:32:01.590
The Google TV displays
a challenge to

00:32:01.590 --> 00:32:03.820
the user on the screen.

00:32:03.820 --> 00:32:06.770
The user enters the challenge
into the second screen device.

00:32:06.770 --> 00:32:07.960
The pairing happens.

00:32:07.960 --> 00:32:11.520
And then actually, Google TV
sends back a TLS certificate

00:32:11.520 --> 00:32:13.820
that the first screen
device can use for

00:32:13.820 --> 00:32:15.120
encrypting the message.

00:32:15.120 --> 00:32:16.765
And then from that point on,
once you have the certificate,

00:32:16.765 --> 00:32:20.850
you use it for just sending
your events.

00:32:20.850 --> 00:32:23.010
I'm going to give you another
quick demo, just to show you

00:32:23.010 --> 00:32:25.670
how the parent process works.

00:32:25.670 --> 00:32:27.630
If you have the Google TV
Android remote control, you've

00:32:27.630 --> 00:32:29.050
probably seen this before.

00:32:29.050 --> 00:32:32.290
But it's a pretty
straightforward process from a

00:32:32.290 --> 00:32:33.540
user's perspective.

00:32:36.080 --> 00:32:38.030
Make sure I'm on all the
appropriate networks.

00:32:38.030 --> 00:32:43.530
I unfortunately can't show the
auto-pairing, just because I'm

00:32:43.530 --> 00:32:52.120
not using a standard network.

00:32:52.120 --> 00:32:54.120
So I'm actually going to cancel
on the auto-pairing.

00:32:54.120 --> 00:32:56.930
I'm going to do a manual
pairing, which means that--

00:32:56.930 --> 00:32:58.450
oops, I have to get
out of this demo.

00:32:58.450 --> 00:33:00.406
DAVE FISHER: Do you want me
to bring it up for you?

00:33:00.406 --> 00:33:03.550
PAUL SAXMAN: Yes, please.

00:33:03.550 --> 00:33:06.210
Another cool thing about this
technology is that you can

00:33:06.210 --> 00:33:08.300
have any number of devices
connected to your TV.

00:33:08.300 --> 00:33:13.090
So actually, Dave is bringing up
all this information using

00:33:13.090 --> 00:33:14.490
his laptop, which he
will talk about.

00:33:14.490 --> 00:33:14.920
DAVE FISHER: Don't look.

00:33:14.920 --> 00:33:17.990
This is what I'm going
to talk about.

00:33:17.990 --> 00:33:18.540
PAUL SAXMAN: All right.

00:33:18.540 --> 00:33:21.700
So I'm going to do
a manual pairing.

00:33:21.700 --> 00:33:23.750
Like I said, the manual pairing
generally isn't

00:33:23.750 --> 00:33:25.832
required on a user's
home network.

00:33:25.832 --> 00:33:29.210
It's just because we're in
kind of a funky network

00:33:29.210 --> 00:33:30.460
configuration here.

00:33:33.870 --> 00:33:37.480
But this is really the discovery
process, where I'm

00:33:37.480 --> 00:33:40.310
actually finding the devices
on the network.

00:33:40.310 --> 00:33:41.450
I'm going to go ahead
and connect.

00:33:41.450 --> 00:33:43.280
And then this is the pairing
process itself.

00:33:43.280 --> 00:33:46.450
I'm sorry, I actually am kind
of in the front there.

00:33:46.450 --> 00:33:49.070
So the handheld device has
actually sent the command to

00:33:49.070 --> 00:33:50.390
say, I want to pair.

00:33:50.390 --> 00:33:53.700
Google TV actually displays
this to the user.

00:33:53.700 --> 00:33:55.180
I got a really easy
one this time.

00:33:58.060 --> 00:34:01.490
I enter that in the phone, I
hit my pairing, and then

00:34:01.490 --> 00:34:02.650
everything's done.

00:34:02.650 --> 00:34:04.140
The user is paired
to the device.

00:34:04.140 --> 00:34:07.450
So now when I actually use this
device here to actually

00:34:07.450 --> 00:34:09.760
navigate around, that's
actually sent across

00:34:09.760 --> 00:34:11.440
to the Google TV.

00:34:11.440 --> 00:34:12.510
I can go back.

00:34:12.510 --> 00:34:13.900
I can go home.

00:34:13.900 --> 00:34:16.949
Pretty much, in the Google TV
Android remote control, we

00:34:16.949 --> 00:34:19.139
have pretty much everything
for keyboard

00:34:19.139 --> 00:34:20.730
input, touch events.

00:34:20.730 --> 00:34:22.900
All the Android keys, et cetera,
are all captured on

00:34:22.900 --> 00:34:23.969
the device.

00:34:23.969 --> 00:34:26.679
Anybody implementing this can
actually send all the same

00:34:26.679 --> 00:34:29.210
events across as well.

00:34:29.210 --> 00:34:32.770
So that's pretty much
it for that.

00:34:32.770 --> 00:34:35.995
So if we go back to slides--

00:34:42.630 --> 00:34:46.420
So as I said, Anymote
is a specification.

00:34:46.420 --> 00:34:51.159
If you want to learn about how
Anymote works, you can

00:34:51.159 --> 00:34:54.060
actually go to our developer
site for TV remote.

00:34:54.060 --> 00:34:55.350
It talks about the
specification.

00:34:55.350 --> 00:34:57.540
And there's actually quite a
few libraries out there and

00:34:57.540 --> 00:34:58.880
open source codes.

00:34:58.880 --> 00:35:02.780
Discovery is generally handled
by the second screen

00:35:02.780 --> 00:35:04.310
application itself.

00:35:04.310 --> 00:35:05.530
That's not baked
into a library.

00:35:05.530 --> 00:35:08.510
But you can use something
like JmDNS.

00:35:08.510 --> 00:35:09.830
Pairing and authentication--

00:35:09.830 --> 00:35:12.210
we have a reference
implementation in Java that

00:35:12.210 --> 00:35:15.365
works on Android, and there's
also a C++ implementation that

00:35:15.365 --> 00:35:17.330
we released very recently.

00:35:17.330 --> 00:35:19.070
And for sending events, you
actually use the Anymote

00:35:19.070 --> 00:35:21.430
protocol reference
implementation, which is also

00:35:21.430 --> 00:35:23.990
Java and C++-based
applications.

00:35:23.990 --> 00:35:26.730
The libraries both use protocol
buffers, the same way

00:35:26.730 --> 00:35:28.470
the sensor demo did.

00:35:28.470 --> 00:35:31.270
Here's all the URLs.

00:35:31.270 --> 00:35:33.270
The important thing about this,
though, so there's a lot

00:35:33.270 --> 00:35:35.520
of things that you'd have to
do to actually get started.

00:35:35.520 --> 00:35:36.810
We recognized this.

00:35:36.810 --> 00:35:40.930
This code we actually launched
last year, the reference

00:35:40.930 --> 00:35:41.630
implementations.

00:35:41.630 --> 00:35:44.490
But there's still kind
of a high barrier

00:35:44.490 --> 00:35:45.790
to implement that.

00:35:45.790 --> 00:35:48.350
So what we did very recently, as
well, is we made the Google

00:35:48.350 --> 00:35:52.630
TV Anymote Library for Android
developers, which works really

00:35:52.630 --> 00:35:54.090
similar to the other
implementation

00:35:54.090 --> 00:35:56.720
that I showed you.

00:35:56.720 --> 00:35:58.660
Basically, the major steps
is you implement the

00:35:58.660 --> 00:36:02.480
ClientListener, you open up the
service connection, you

00:36:02.480 --> 00:36:04.380
bind to the
AnymoteClientService, you

00:36:04.380 --> 00:36:05.650
start sending events.

00:36:05.650 --> 00:36:06.940
I'm just going to kind of speed
through this a little

00:36:06.940 --> 00:36:11.290
bit so Dave has enough time
to give his demo.

00:36:11.290 --> 00:36:15.450
So the code is very
similar to before.

00:36:15.450 --> 00:36:16.365
You create an activity.

00:36:16.365 --> 00:36:18.370
You implement the
ClientListener.

00:36:18.370 --> 00:36:20.800
This time you have three
methods to implement.

00:36:20.800 --> 00:36:22.390
The most important one,
obviously, though, is the

00:36:22.390 --> 00:36:25.070
onConnected, where you actually
get an AnymoteSender.

00:36:25.070 --> 00:36:28.550
That's the class that you use
for sending the events.

00:36:28.550 --> 00:36:30.720
Same as before, you have a
service connection so you know

00:36:30.720 --> 00:36:32.900
when the Anymote service
has started.

00:36:32.900 --> 00:36:35.410
And that point is when you
actually pass your

00:36:35.410 --> 00:36:38.410
ClientListener to the service
so that you can

00:36:38.410 --> 00:36:39.660
receive those callbacks.

00:36:41.730 --> 00:36:44.170
Then you're responsible for
actually starting an intent.

00:36:44.170 --> 00:36:45.660
You can do that on your
onCreate method.

00:36:45.660 --> 00:36:47.035
You can do that whenever
you want, basically.

00:36:47.035 --> 00:36:50.770
You can have a pairing button
in your application.

00:36:50.770 --> 00:36:52.180
It's up to you.

00:36:52.180 --> 00:36:56.870
And for sending events,
basically what you get is you

00:36:56.870 --> 00:37:00.220
use this AnymoteSender to send
things like key presses.

00:37:00.220 --> 00:37:01.850
This one, I think,
is really cool.

00:37:01.850 --> 00:37:04.970
By the way, this is actually the
Android key events, so you

00:37:04.970 --> 00:37:07.750
just tell it what Android key
event you received, and you

00:37:07.750 --> 00:37:09.240
can pass that along.

00:37:09.240 --> 00:37:11.870
The TouchHandler is actually
a really cool class.

00:37:11.870 --> 00:37:15.000
Basically, you pass it any view,
and it turns that view

00:37:15.000 --> 00:37:17.720
into a touch surface.

00:37:17.720 --> 00:37:20.380
So I can use it to send
touch events across

00:37:20.380 --> 00:37:23.680
to the Google TV.

00:37:23.680 --> 00:37:24.650
You can send intents.

00:37:24.650 --> 00:37:26.950
And this is actually
a really powerful

00:37:26.950 --> 00:37:28.880
feature of the protocol.

00:37:28.880 --> 00:37:33.390
It allows you to start up
applications or actually go to

00:37:33.390 --> 00:37:36.450
URLs, so you can send view
intents for loading up Chrome,

00:37:36.450 --> 00:37:38.990
for example, or going to
the Android market.

00:37:38.990 --> 00:37:41.180
You can start applications, like
the YouTube application,

00:37:41.180 --> 00:37:43.390
and tune it to a particular
video.

00:37:43.390 --> 00:37:45.700
Or you can do things like start
your own application.

00:37:45.700 --> 00:37:47.780
So if you've gone through the
pairing process and you have

00:37:47.780 --> 00:37:51.020
an application on Google TV that
you want to control, you

00:37:51.020 --> 00:37:53.390
can send that intent, bring your
own application up on the

00:37:53.390 --> 00:37:55.445
device, and then start sending
the input events across.

00:37:58.030 --> 00:38:00.000
Like I said, this library
is also open source.

00:38:00.000 --> 00:38:02.700
It's also available for
you guys to use.

00:38:02.700 --> 00:38:05.990
Hopefully you saw really
simplifies how Anymote works.

00:38:05.990 --> 00:38:09.750
We have another sample
with that.

00:38:09.750 --> 00:38:12.710
We have another sample with
the Anymote library for

00:38:12.710 --> 00:38:14.120
playing Blackjack.

00:38:14.120 --> 00:38:17.750
Pretty simple, but you guys
are free to take it

00:38:17.750 --> 00:38:19.090
and run with it.

00:38:19.090 --> 00:38:21.950
And with that, I'm going
to pass it on to Dave.

00:38:21.950 --> 00:38:23.090
DAVE FISHER: Cool.

00:38:23.090 --> 00:38:24.320
PAUL SAXMAN: Thank you, Dave.

00:38:24.320 --> 00:38:25.770
DAVE FISHER: Four
minutes, huh?

00:38:25.770 --> 00:38:26.180
Nah.

00:38:26.180 --> 00:38:27.010
Twenty minutes.

00:38:27.010 --> 00:38:29.340
All right, so what I'm excited
about, Paul's been telling you

00:38:29.340 --> 00:38:32.440
about how you can use phones,
how you can use tablets.

00:38:32.440 --> 00:38:34.090
My world is about the
laptop, right?

00:38:34.090 --> 00:38:35.880
So this actually fits me
really well as a user.

00:38:35.880 --> 00:38:38.270
I'm sitting there, I'm watching
TV, I've almost

00:38:38.270 --> 00:38:39.470
always got my laptop out.

00:38:39.470 --> 00:38:42.170
Maybe that's not a good thing,
but that's how it is, right?

00:38:42.170 --> 00:38:44.040
So I'm talk to you
about Anymote.

00:38:44.040 --> 00:38:46.620
That's the communication
mechanism, communication from

00:38:46.620 --> 00:38:47.860
your laptop.

00:38:47.860 --> 00:38:51.140
And we're going to do it
via Chrome extensions.

00:38:51.140 --> 00:38:52.790
So first off, just to kind of
make sure we're all on the

00:38:52.790 --> 00:38:55.270
same page, Chrome extensions.

00:38:55.270 --> 00:38:58.460
Who here has made a Chrome
extension before?

00:38:58.460 --> 00:39:00.810
All right, like 10 of us, all
right, I raised my hand.

00:39:00.810 --> 00:39:03.605
How many people have used a
Chrome extension before?

00:39:03.605 --> 00:39:05.300
All right, excellent.

00:39:05.300 --> 00:39:07.280
So I know what my audience is.

00:39:07.280 --> 00:39:09.570
You're not really Chrome
extension developers.

00:39:09.570 --> 00:39:11.670
Hopefully this'll be
your first one.

00:39:11.670 --> 00:39:13.990
So just a little background
on what they are.

00:39:13.990 --> 00:39:15.810
You can download them from
the Chrome web store.

00:39:15.810 --> 00:39:17.590
They add functionality
to Chrome.

00:39:17.590 --> 00:39:20.100
There's a great developer site
where you can you learn more

00:39:20.100 --> 00:39:20.920
about making them.

00:39:20.920 --> 00:39:24.580
A couple things they can do--
they can be browser actions.

00:39:24.580 --> 00:39:28.170
A browser action is basically
like a small icon.

00:39:28.170 --> 00:39:32.580
So these little icons up here
are browser actions, which is

00:39:32.580 --> 00:39:33.830
a little separate program.

00:39:33.830 --> 00:39:36.200
Or they can be content scripts,
which add things to

00:39:36.200 --> 00:39:39.040
the page you're looking at.

00:39:39.040 --> 00:39:42.270
So there's two things I want
to talk about today, one

00:39:42.270 --> 00:39:44.490
user-facing and one
developer-facing.

00:39:44.490 --> 00:39:47.560
First, we're working on
a Chrome extension for

00:39:47.560 --> 00:39:48.970
communication.

00:39:48.970 --> 00:39:50.480
Not out or available yet.

00:39:50.480 --> 00:39:52.890
We're still working on it, kind
of brainstorming ideas.

00:39:52.890 --> 00:39:56.900
I asked if I give a demo today,
and they said, go nuts.

00:39:56.900 --> 00:39:59.580
So what this extension
does id I've already

00:39:59.580 --> 00:40:00.530
paired with this TV.

00:40:00.530 --> 00:40:02.880
So I did the pairing code that
Paul showed just a second ago.

00:40:02.880 --> 00:40:04.760
It's using Anymote.

00:40:04.760 --> 00:40:06.900
I can send key events.

00:40:06.900 --> 00:40:10.000
So if I wanted to send the
search command, you can see

00:40:10.000 --> 00:40:11.880
that the search box
will open up.

00:40:11.880 --> 00:40:15.980
If I hit the Back button, if
I hit the Home button--

00:40:15.980 --> 00:40:17.670
it's got all the functionality
that a remote

00:40:17.670 --> 00:40:19.030
does with the buttons.

00:40:19.030 --> 00:40:22.350
It's also using your keyboard,
which is really nice.

00:40:22.350 --> 00:40:25.690
So the arrow keys are probably
the most useful things.

00:40:25.690 --> 00:40:27.870
All of Google TV is D-pad
navigable, so the

00:40:27.870 --> 00:40:29.340
arrow keys are huge.

00:40:29.340 --> 00:40:30.970
You can also type.

00:40:30.970 --> 00:40:34.976
So if I say, Hello.

00:40:34.976 --> 00:40:36.080
Well, I can't type.

00:40:36.080 --> 00:40:38.750
But I could type,
if I knew how.

00:40:38.750 --> 00:40:41.420
So those are kind of the
basic keypress events

00:40:41.420 --> 00:40:42.440
that you can do.

00:40:42.440 --> 00:40:45.330
But since it lives in Chrome, it
actually travels along with

00:40:45.330 --> 00:40:47.440
you as you surf the web.

00:40:47.440 --> 00:40:50.220
So in this example, I'm
on a Google+ page.

00:40:50.220 --> 00:40:52.750
If I'm looking at things
on this Google+ page--

00:40:52.750 --> 00:40:57.520
here I got sent a link
to some funny site.

00:40:57.520 --> 00:40:59.750
You decide if it's
funny or not.

00:40:59.750 --> 00:41:02.860
And what I could do is, if I
wanted to share with the other

00:41:02.860 --> 00:41:05.520
people that are in the room with
me what I just found, I

00:41:05.520 --> 00:41:07.790
can actually fling
things to the TV.

00:41:07.790 --> 00:41:11.850
What it's actually doing is it's
sending an intent that

00:41:11.850 --> 00:41:16.170
opens up a web page, which opens
up Chrome on the TV.

00:41:16.170 --> 00:41:19.145
In addition to being able to use
your keyboard and to send

00:41:19.145 --> 00:41:21.530
these special keys, you can
also use your mouse.

00:41:21.530 --> 00:41:23.480
So you've got access to your
keyboard and mouse, which I

00:41:23.480 --> 00:41:25.980
think is really nice.

00:41:25.980 --> 00:41:29.620
Other things it can do-- go
back to the Google+ page.

00:41:29.620 --> 00:41:32.130
We can look at a page, and we
can say, is there anything on

00:41:32.130 --> 00:41:35.610
here that they might want
to have on their TV.

00:41:35.610 --> 00:41:38.620
So here's a YouTube video.

00:41:38.620 --> 00:41:41.680
So the best screen in your house
is probably your TV.

00:41:41.680 --> 00:41:44.530
So what we do is we look at the
page, and we say, is there

00:41:44.530 --> 00:41:46.905
anything on this page that a
user would be interested in

00:41:46.905 --> 00:41:48.040
having on their TV?

00:41:48.040 --> 00:41:50.530
And we give you links to make
those things quicker.

00:41:50.530 --> 00:41:52.980
So here we found this YouTube
video on our page.

00:41:52.980 --> 00:41:55.650
When we send it to the
TV, it just plays.

00:41:55.650 --> 00:41:57.020
You can share it with
anybody in the room,

00:41:57.020 --> 00:41:59.540
which is kind of neat.

00:41:59.540 --> 00:42:01.820
It actually works
wherever you go.

00:42:01.820 --> 00:42:06.120
So here, we've got YouTube
videos in a Gmail.

00:42:06.120 --> 00:42:07.460
You can see that it's
found those, and I

00:42:07.460 --> 00:42:09.730
can send those over.

00:42:09.730 --> 00:42:11.920
Didn't want to stop with just
YouTube videos, though.

00:42:11.920 --> 00:42:13.940
We actually wanted to make
this kind of like it's a

00:42:13.940 --> 00:42:15.850
companion that travels
along with you as you

00:42:15.850 --> 00:42:16.980
surf the web, right?

00:42:16.980 --> 00:42:20.100
That you can send things
to the TV.

00:42:20.100 --> 00:42:22.990
So here if you're looking at a
page that's related to a TV or

00:42:22.990 --> 00:42:27.050
movie entity, what we can do is
we can say, we found some

00:42:27.050 --> 00:42:29.570
TV programs on this site.

00:42:29.570 --> 00:42:31.660
And if you would like, you can
actually send those over to

00:42:31.660 --> 00:42:32.770
the TV as well.

00:42:32.770 --> 00:42:35.970
It's going to open up the
TV and Movies app.

00:42:35.970 --> 00:42:38.000
And then from the TV and Movies
app, you can do things

00:42:38.000 --> 00:42:39.830
like you can save it to your
queue if you think you want to

00:42:39.830 --> 00:42:41.120
watch it later.

00:42:41.120 --> 00:42:42.600
Or if you want to watch it
now, you can see what

00:42:42.600 --> 00:42:43.920
options there are.

00:42:43.920 --> 00:42:45.580
If you had Netflix, it would
show up in this list.

00:42:45.580 --> 00:42:47.450
Things like that.

00:42:47.450 --> 00:42:50.370
So that's the extension that
we're playing with.

00:42:50.370 --> 00:42:52.090
So what we're doing is great.

00:42:52.090 --> 00:42:54.085
And in making this tool, we're
going to open-source some

00:42:54.085 --> 00:42:55.700
things so that you
can do your own.

00:42:55.700 --> 00:42:57.770
So really, what the
developer-facing announcement

00:42:57.770 --> 00:43:00.540
is about is how can you make
your own extension.

00:43:00.540 --> 00:43:03.240
So we're going to show you the
tools that you can use.

00:43:03.240 --> 00:43:04.050
But first, why?

00:43:04.050 --> 00:43:05.540
Why would you want to do this?

00:43:05.540 --> 00:43:07.220
I've broken it up into
a few categories.

00:43:07.220 --> 00:43:09.200
Maybe you're a web developer,
and you want to get your

00:43:09.200 --> 00:43:11.080
content to Google TV easier.

00:43:11.080 --> 00:43:12.280
Maybe you're an Android
developer.

00:43:12.280 --> 00:43:14.145
How many Android developers
do we have?

00:43:14.145 --> 00:43:14.470
All right.

00:43:14.470 --> 00:43:15.060
That's my audience.

00:43:15.060 --> 00:43:16.640
That's what I thought.

00:43:16.640 --> 00:43:18.680
And you want to talk to your
Android app, this is a way you

00:43:18.680 --> 00:43:20.380
can make a customer
remote control.

00:43:20.380 --> 00:43:23.170
Or maybe you just have
some other idea.

00:43:23.170 --> 00:43:25.550
So I mean, if you're a web
developer, you can make things

00:43:25.550 --> 00:43:26.690
that you can fling.

00:43:26.690 --> 00:43:28.460
If you're an Android developer,
you can make a

00:43:28.460 --> 00:43:31.625
custom remote or something that
goes with your app, so

00:43:31.625 --> 00:43:34.850
it's kind of like a partner to
where you can play with your

00:43:34.850 --> 00:43:37.270
Chrome extension as well.

00:43:37.270 --> 00:43:39.290
Or if you have just some other
idea, there's all kinds of

00:43:39.290 --> 00:43:40.100
things you could do.

00:43:40.100 --> 00:43:41.410
Your computer knows
a lot, right?

00:43:41.410 --> 00:43:44.090
And it can share this
information with your TV.

00:43:44.090 --> 00:43:44.510
So how?

00:43:44.510 --> 00:43:46.000
How do you make this happen?

00:43:46.000 --> 00:43:49.330
We've got a code.google.com
project that

00:43:49.330 --> 00:43:50.560
you should go visit.

00:43:50.560 --> 00:43:53.980
It's just called
google-tv-chrome-extensions.

00:43:53.980 --> 00:43:56.370
There's an example in there for
how you go ahead and do

00:43:56.370 --> 00:43:58.890
this pairing and
communication.

00:43:58.890 --> 00:43:59.980
But there's actually
one more thing.

00:43:59.980 --> 00:44:01.620
So I said I'm a college
professor.

00:44:01.620 --> 00:44:03.670
I couldn't resist the
opportunity to give you a

00:44:03.670 --> 00:44:04.420
homework assignment.

00:44:04.420 --> 00:44:07.270
So you've all been assigned a
homework assignment, and that

00:44:07.270 --> 00:44:09.970
is the AnymoteLearningExercise.

00:44:09.970 --> 00:44:11.990
So the idea is you'll learn
how to use this Anymote

00:44:11.990 --> 00:44:13.610
communication.

00:44:13.610 --> 00:44:15.080
And so there are
two extensions.

00:44:15.080 --> 00:44:17.210
One is the example,
which is finished.

00:44:17.210 --> 00:44:19.280
And then the other is the
learning exercise, which is

00:44:19.280 --> 00:44:21.480
missing all the most important
pieces, right?

00:44:21.480 --> 00:44:23.840
So it's the same extension, but
it's missing everything

00:44:23.840 --> 00:44:26.020
that's useful.

00:44:26.020 --> 00:44:28.360
And we've broken it up into a
couple of different exercises

00:44:28.360 --> 00:44:30.500
to make it easier for you to
learn, just kind of go

00:44:30.500 --> 00:44:32.680
through each step.

00:44:32.680 --> 00:44:34.160
Let's take a quick look
at the example.

00:44:37.430 --> 00:44:42.210
So in the example here, what
I've got is it's another

00:44:42.210 --> 00:44:43.340
browser action.

00:44:43.340 --> 00:44:45.810
What I'm going to do is I'm
going to create a plug-in,

00:44:45.810 --> 00:44:47.680
which I'll talk about more in
a little bit, that's kind of

00:44:47.680 --> 00:44:50.440
initializing this
communication.

00:44:50.440 --> 00:44:52.930
Things you can do with Anymote,
is you can find TVs

00:44:52.930 --> 00:44:53.510
on the network.

00:44:53.510 --> 00:44:54.620
Here we've used discovery.

00:44:54.620 --> 00:44:56.200
We found this TV.

00:44:56.200 --> 00:44:58.700
I've listed by IP address.

00:44:58.700 --> 00:45:00.990
We show you how to begin the
pairing process, so you can

00:45:00.990 --> 00:45:03.310
see a pairing code
popped up here.

00:45:03.310 --> 00:45:04.560
So dbe1.

00:45:08.330 --> 00:45:09.780
And so now I'm paired
to this TV.

00:45:09.780 --> 00:45:11.140
You pair one time, right?

00:45:11.140 --> 00:45:13.280
So if you use an extension every
day for a month, you

00:45:13.280 --> 00:45:16.750
pair once at the start of the
month, or forever, and that's

00:45:16.750 --> 00:45:19.090
the one and only time you're
going to need to pair.

00:45:19.090 --> 00:45:21.000
And then to actually
communicate, you open an

00:45:21.000 --> 00:45:22.010
Anymote session.

00:45:22.010 --> 00:45:23.930
Anymote, you would have to
open every day, right?

00:45:23.930 --> 00:45:25.780
So every day, you would start
up a new Anymote session.

00:45:25.780 --> 00:45:28.100
This would do the
communication.

00:45:28.100 --> 00:45:30.640
And we've got examples in here
for how you can send keys,

00:45:30.640 --> 00:45:34.550
like the Home key,
the Search key.

00:45:34.550 --> 00:45:37.570
How you can send data, so here I
send the data "Hello World,"

00:45:37.570 --> 00:45:40.130
just because it's kind
of a Hello World app.

00:45:40.130 --> 00:45:44.030
How you can do YouTube flings,
which would be opening up the

00:45:44.030 --> 00:45:44.890
YouTube app.

00:45:44.890 --> 00:45:46.350
I should define the
word fling.

00:45:46.350 --> 00:45:49.460
Fling really just means to
send an Android intent.

00:45:49.460 --> 00:45:51.980
It doesn't mean Chrome.

00:45:51.980 --> 00:45:54.420
It just means to send
an Android intent.

00:45:54.420 --> 00:45:56.600
So here I did open Chrome, but
you could open YouTube.

00:45:56.600 --> 00:45:58.350
You could open the TV player.

00:45:58.350 --> 00:45:59.650
Really powerful.

00:45:59.650 --> 00:46:00.900
And then the last one
here is ping.

00:46:00.900 --> 00:46:03.300
This is just to test the health
of the connection.

00:46:03.300 --> 00:46:05.690
So that's the solution.

00:46:05.690 --> 00:46:07.740
And these are the steps that
you kind of went through in

00:46:07.740 --> 00:46:08.970
the solution.

00:46:08.970 --> 00:46:10.730
I should show you the starting
point as well.

00:46:10.730 --> 00:46:12.620
Way less exciting.

00:46:12.620 --> 00:46:14.960
So the starting point, if you
click on any button, it just

00:46:14.960 --> 00:46:19.265
says, I'm not implemented, so
that's what you should do.

00:46:19.265 --> 00:46:21.340
Not nearly as exciting.

00:46:21.340 --> 00:46:25.050
Extensions are made up of basic
web components, HTML,

00:46:25.050 --> 00:46:26.740
CSS, JavaScript.

00:46:26.740 --> 00:46:30.250
So you can see here that
we've got an HTML file.

00:46:30.250 --> 00:46:32.630
This is the HTML that's going
to get loaded if you click

00:46:32.630 --> 00:46:33.500
that button.

00:46:33.500 --> 00:46:35.740
So it's really like a local
bookmark, is another way to

00:46:35.740 --> 00:46:37.550
think about it.

00:46:37.550 --> 00:46:39.590
Some CSS, some JavaScript.

00:46:39.590 --> 00:46:41.370
Then the other thing that
extensions have

00:46:41.370 --> 00:46:42.900
is a manifest file.

00:46:42.900 --> 00:46:45.700
You're Android developers, so
you know the manifest file.

00:46:45.700 --> 00:46:47.970
And extensions, it's JSON
instead of XML.

00:46:47.970 --> 00:46:48.650
Same idea, though.

00:46:48.650 --> 00:46:52.710
You're configuring, hey, what
does this application do?

00:46:52.710 --> 00:46:55.110
So in this manifest file, I'm
saying things like, I'm a

00:46:55.110 --> 00:46:57.410
browser action, so that's
why I've got the icon.

00:46:57.410 --> 00:47:00.560
When you click me, you
open this popup.html.

00:47:00.560 --> 00:47:03.360
The other really important thing
is that this extension

00:47:03.360 --> 00:47:05.220
uses a plug-in.

00:47:05.220 --> 00:47:07.240
So depending on your platform,
it's going to load an

00:47:07.240 --> 00:47:09.440
appropriate plug-in.

00:47:09.440 --> 00:47:11.180
And it'll choose this based
on your system.

00:47:11.180 --> 00:47:11.920
You don't have to
worry about it.

00:47:11.920 --> 00:47:13.120
So really, there's
one plug-in.

00:47:13.120 --> 00:47:14.980
It will just pick
the right one.

00:47:14.980 --> 00:47:17.850
When we first realized we were
going to have to use a plug-in

00:47:17.850 --> 00:47:20.840
because Anymote requires
level security with SSL

00:47:20.840 --> 00:47:23.500
communication, we were initially
bummed, because we'd

00:47:23.500 --> 00:47:25.420
rather stick with the
web technologies.

00:47:25.420 --> 00:47:27.400
But if turned out really
nice for developers.

00:47:27.400 --> 00:47:31.170
So we were forced to make a
really well-encapsulated

00:47:31.170 --> 00:47:33.470
module that's really
easy to use.

00:47:33.470 --> 00:47:35.010
So that's what we're
giving you today.

00:47:35.010 --> 00:47:37.440
So really, this learning
exercise, it's all about how

00:47:37.440 --> 00:47:39.000
do you use the plug-in, right?

00:47:39.000 --> 00:47:40.190
So that's the main thing.

00:47:40.190 --> 00:47:41.200
And it's ready to go.

00:47:41.200 --> 00:47:43.530
You can just steal it,
and you can use it.

00:47:43.530 --> 00:47:45.640
So really, using
this plug-in--

00:47:45.640 --> 00:47:47.860
so this plug-in comes down
to 20 functions.

00:47:47.860 --> 00:47:49.910
So if you can call these 20
functions, you can do

00:47:49.910 --> 00:47:51.680
everything that you
need to do.

00:47:51.680 --> 00:47:52.110
Paul--

00:47:52.110 --> 00:47:53.560
[LAUGHS]

00:47:53.560 --> 00:47:55.000
DAVE FISHER: Awesome.

00:47:55.000 --> 00:47:56.890
Paul talked a lot about network

00:47:56.890 --> 00:47:58.210
communication, things like this.

00:47:58.210 --> 00:47:59.420
That's really exciting stuff.

00:47:59.420 --> 00:48:01.800
You should learn how to do it,
but you don't have to.

00:48:01.800 --> 00:48:04.500
So this makes it really
easy for you.

00:48:04.500 --> 00:48:06.880
And so we're going to use these
20 functions that are in

00:48:06.880 --> 00:48:08.980
the plug-ins to implement
these buttons.

00:48:08.980 --> 00:48:11.350
That's what the learning
exercise is all about, right?

00:48:11.350 --> 00:48:12.790
We're not going to go
through all of the

00:48:12.790 --> 00:48:13.600
learning exercise today.

00:48:13.600 --> 00:48:14.980
I'd hate to steal your fun.

00:48:14.980 --> 00:48:17.445
We're just going to show you
one of the steps so you can

00:48:17.445 --> 00:48:18.760
see how the flow works, right?

00:48:18.760 --> 00:48:20.930
This is going to increase the
likelihood of number of people

00:48:20.930 --> 00:48:21.890
that are doing it.

00:48:21.890 --> 00:48:25.720
It just went from
10% to like 15%.

00:48:25.720 --> 00:48:28.090
So we're going to show
you one button, the

00:48:28.090 --> 00:48:29.530
initialization button.

00:48:29.530 --> 00:48:31.860
What needs to happen in
initialization is you need to

00:48:31.860 --> 00:48:36.020
get this plug-in, which was
written in C++ and compiled,

00:48:36.020 --> 00:48:37.400
accessible in JavaScript.

00:48:37.400 --> 00:48:39.040
So that's kind of
the first step.

00:48:39.040 --> 00:48:41.350
And then once you make it
accessible in JavaScript,

00:48:41.350 --> 00:48:43.640
you're going to make three
clients, for discovery,

00:48:43.640 --> 00:48:44.320
pairing, and Anymote.

00:48:44.320 --> 00:48:47.430
So it's a really natural
breakdown.

00:48:47.430 --> 00:48:48.930
We'll go through the code
extremely quickly.

00:48:48.930 --> 00:48:51.170
So right now, that button
just says, hey, I'm not

00:48:51.170 --> 00:48:52.310
implemented.

00:48:52.310 --> 00:48:54.420
What you're going to have to do
to implement it is you're

00:48:54.420 --> 00:48:55.690
going to have to create
an embed--

00:48:55.690 --> 00:48:57.580
this is kind of our bridge--

00:48:57.580 --> 00:48:59.140
of a certain type.

00:48:59.140 --> 00:49:01.350
So you add that to the DOM.

00:49:01.350 --> 00:49:03.990
The embed, by the way, we've
actually made visible.

00:49:03.990 --> 00:49:07.140
So when you click on this
initialize button, the embed

00:49:07.140 --> 00:49:08.300
is this white square.

00:49:08.300 --> 00:49:10.410
So that is the embed.

00:49:10.410 --> 00:49:12.060
Usually you don't make them
visible, but we did for

00:49:12.060 --> 00:49:14.290
learning purposes.

00:49:14.290 --> 00:49:16.890
And then you've got an embed
element which essentially is

00:49:16.890 --> 00:49:17.610
the plug-in.

00:49:17.610 --> 00:49:20.260
You've got one crazy function
to call on it.

00:49:20.260 --> 00:49:22.990
That crazy function brings
you into JavaScript-land.

00:49:22.990 --> 00:49:23.640
So pretty simple.

00:49:23.640 --> 00:49:26.560
Kind of a crazy method name,
but pretty simple.

00:49:26.560 --> 00:49:28.770
Then you need to initialize.

00:49:28.770 --> 00:49:32.340
So the initialization step,
there's an init, and then the

00:49:32.340 --> 00:49:35.560
main thing that happens in
initialization is your

00:49:35.560 --> 00:49:36.750
certificates.

00:49:36.750 --> 00:49:39.240
Your certificate is how you're
identified to the TV.

00:49:39.240 --> 00:49:41.340
Once you're paired, it's that
certificate which says, hey, I

00:49:41.340 --> 00:49:42.560
trust this device.

00:49:42.560 --> 00:49:44.340
It's used for encryption.

00:49:44.340 --> 00:49:45.490
Some boilerplate
stuff in here.

00:49:45.490 --> 00:49:46.970
You don't have to worry
about the details.

00:49:46.970 --> 00:49:48.656
But once you've got that
certificate made, and once

00:49:48.656 --> 00:49:51.980
you're paired, you want to hang
on to that certificate.

00:49:51.980 --> 00:49:54.750
And then initialization
is ready to go.

00:49:54.750 --> 00:49:56.370
So you make these
three clients,

00:49:56.370 --> 00:49:58.040
discovery, pairing, Anymote.

00:49:58.040 --> 00:50:00.420
Say it a couple times there.

00:50:00.420 --> 00:50:02.520
So we're going to stop with the
exercise here, but that's

00:50:02.520 --> 00:50:04.150
kind of the first step.

00:50:04.150 --> 00:50:06.700
If you were to do discovery,
pairing, and Anymote, there

00:50:06.700 --> 00:50:10.460
are some API functions for
discovery, to start the

00:50:10.460 --> 00:50:14.060
pairing process, to send the
response, to start the Anymote

00:50:14.060 --> 00:50:16.280
session, and to stop it.

00:50:16.280 --> 00:50:18.360
And then the most important
slide is, once you're

00:50:18.360 --> 00:50:19.910
connected, what can you send?

00:50:19.910 --> 00:50:22.210
What can you tell the TV?

00:50:22.210 --> 00:50:24.080
Key events, obvious.

00:50:24.080 --> 00:50:25.860
Mouse events, which
I showed you.

00:50:25.860 --> 00:50:27.970
Mouse wheel events,
for scrolling.

00:50:27.970 --> 00:50:30.040
You can actually send arbitrary
data types.

00:50:30.040 --> 00:50:31.720
Right now that means
sending a string.

00:50:31.720 --> 00:50:34.580
That's how I did the
Hello World thing.

00:50:34.580 --> 00:50:35.600
Fling, I'll step over once.

00:50:35.600 --> 00:50:37.470
Ping is just to test
the health.

00:50:37.470 --> 00:50:39.170
Without a doubt, my favorite is

00:50:39.170 --> 00:50:41.250
definitely send fling, right?

00:50:41.250 --> 00:50:43.060
Just because if you think about
how Android works, how

00:50:43.060 --> 00:50:45.330
communication in Android works,
I mean, if you can send

00:50:45.330 --> 00:50:48.220
an intent somewhere, you
can do a lot, right?

00:50:48.220 --> 00:50:51.060
And this gives us the ability
to send intents.

00:50:51.060 --> 00:50:53.750
All kinds of intents
you can send.

00:50:53.750 --> 00:50:55.850
I showed you the code here for
flinging the page that you're

00:50:55.850 --> 00:50:57.060
currently on.

00:50:57.060 --> 00:50:58.820
Probably more fun than that
though, is if you wanted to

00:50:58.820 --> 00:51:01.740
fling YouTube, you can send a
URI that will open YouTube

00:51:01.740 --> 00:51:02.980
specifically.

00:51:02.980 --> 00:51:05.550
If you wanted to open the TV
player, you could send this.

00:51:05.550 --> 00:51:07.350
You could actually send
parameters, like channel and

00:51:07.350 --> 00:51:09.780
things like that, on
the TV player.

00:51:09.780 --> 00:51:13.680
If you had an app that you
wanted people to download on

00:51:13.680 --> 00:51:16.760
the TV, you could send a link to
Market to open up your app.

00:51:16.760 --> 00:51:18.570
So it's like, hey, download
the other half

00:51:18.570 --> 00:51:19.930
of this tool, right?

00:51:19.930 --> 00:51:22.100
So that one, I think, is
useful for people.

00:51:22.100 --> 00:51:25.360
And then it's kind of crazy, but
you're passing a string.

00:51:25.360 --> 00:51:27.150
But you can send almost
any intent.

00:51:27.150 --> 00:51:29.210
You can send extras, URIs.

00:51:29.210 --> 00:51:31.580
You can set the category.

00:51:31.580 --> 00:51:33.820
It is kind of a crazy
string format.

00:51:33.820 --> 00:51:35.890
There's a function
called toUri.

00:51:35.890 --> 00:51:38.920
Which creates a string if you're
on an Android platform.

00:51:38.920 --> 00:51:42.315
And really, what the receiving
end does is it calls parseUri.

00:51:42.315 --> 00:51:43.800
So you can send anything
you want.

00:51:43.800 --> 00:51:45.880
You just have to know how
to format the string.

00:51:45.880 --> 00:51:48.000
I've got some advice for
how you do that in a

00:51:48.000 --> 00:51:49.190
doc that I've made.

00:51:49.190 --> 00:51:51.370
But if you were developing your
own app, you would know

00:51:51.370 --> 00:51:52.960
your package name, right?

00:51:52.960 --> 00:51:54.740
You would know the names
of the activities

00:51:54.740 --> 00:51:55.900
that you want to launch.

00:51:55.900 --> 00:51:57.760
And you can explicitly
call those things,

00:51:57.760 --> 00:51:59.610
which is really great.

00:51:59.610 --> 00:52:02.120
So these are the 20 functions
that you have to learn to use

00:52:02.120 --> 00:52:03.000
this thing.

00:52:03.000 --> 00:52:05.510
I wanted to definitely give
credit to Dave Hawkey.

00:52:05.510 --> 00:52:07.490
He's my 20% hero.

00:52:07.490 --> 00:52:10.400
He wrote the C++ code that
all this is built on.

00:52:10.400 --> 00:52:14.400
He also open-sourced all the C++
code, which is really good

00:52:14.400 --> 00:52:16.370
if you're C++ developer.

00:52:16.370 --> 00:52:19.090
It's all out there, everything
that he used to make.

00:52:19.090 --> 00:52:20.730
C++ works on a lot
of platforms.

00:52:20.730 --> 00:52:24.060
I'd love to see somebody run
with it with iOS or to do

00:52:24.060 --> 00:52:27.620
their own thing with
the C++ code.

00:52:27.620 --> 00:52:31.050
And then your next step is to
go out there and do the

00:52:31.050 --> 00:52:32.480
learning exercise.

00:52:32.480 --> 00:52:33.210
Anybody going to do it?

00:52:33.210 --> 00:52:33.995
All right, show of hands.

00:52:33.995 --> 00:52:35.200
Come on.

00:52:35.200 --> 00:52:37.520
Everyone in the room just
raised their hand.

00:52:37.520 --> 00:52:39.670
This is great!

00:52:39.670 --> 00:52:42.020
So that's all we've got.

00:52:42.020 --> 00:52:42.800
Thank you for coming.

00:52:42.800 --> 00:52:45.030
[APPLAUSE]

