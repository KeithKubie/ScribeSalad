WEBVTT
Kind: captions
Language: en

00:00:07.910 --> 00:00:10.040
hi my name is reto Meier

00:00:10.040 --> 00:00:10.050
hi my name is reto Meier
 

00:00:10.050 --> 00:00:11.660
hi my name is reto Meier
I'm the tech lead for Google's Android

00:00:11.660 --> 00:00:11.670
I'm the tech lead for Google's Android
 

00:00:11.670 --> 00:00:14.299
I'm the tech lead for Google's Android
developer relations team every time your

00:00:14.299 --> 00:00:14.309
developer relations team every time your
 

00:00:14.309 --> 00:00:15.770
developer relations team every time your
app initiates a data connection no

00:00:15.770 --> 00:00:15.780
app initiates a data connection no
 

00:00:15.780 --> 00:00:17.480
app initiates a data connection no
matter how much data it transfers you

00:00:17.480 --> 00:00:17.490
matter how much data it transfers you
 

00:00:17.490 --> 00:00:19.550
matter how much data it transfers you
cause a typical 3G wireless radio to

00:00:19.550 --> 00:00:19.560
cause a typical 3G wireless radio to
 

00:00:19.560 --> 00:00:21.740
cause a typical 3G wireless radio to
continue drawing power for upwards of 20

00:00:21.740 --> 00:00:21.750
continue drawing power for upwards of 20
 

00:00:21.750 --> 00:00:23.960
continue drawing power for upwards of 20
seconds this efficient data transfers

00:00:23.960 --> 00:00:23.970
seconds this efficient data transfers
 

00:00:23.970 --> 00:00:25.790
seconds this efficient data transfers
devbyte we'll look at how you can use

00:00:25.790 --> 00:00:25.800
devbyte we'll look at how you can use
 

00:00:25.800 --> 00:00:27.560
devbyte we'll look at how you can use
tools like sync adapters to batch and

00:00:27.560 --> 00:00:27.570
tools like sync adapters to batch and
 

00:00:27.570 --> 00:00:29.509
tools like sync adapters to batch and
bundle your data transfers effectively

00:00:29.509 --> 00:00:29.519
bundle your data transfers effectively
 

00:00:29.519 --> 00:00:31.279
bundle your data transfers effectively
phase-shifting them to produce a highly

00:00:31.279 --> 00:00:31.289
phase-shifting them to produce a highly
 

00:00:31.289 --> 00:00:33.440
phase-shifting them to produce a highly
efficient defragmented network traffic

00:00:33.440 --> 00:00:33.450
efficient defragmented network traffic
 

00:00:33.450 --> 00:00:35.959
efficient defragmented network traffic
profile like this one the underlying

00:00:35.959 --> 00:00:35.969
profile like this one the underlying
 

00:00:35.969 --> 00:00:37.610
profile like this one the underlying
philosophy is to reduce the number of

00:00:37.610 --> 00:00:37.620
philosophy is to reduce the number of
 

00:00:37.620 --> 00:00:39.410
philosophy is to reduce the number of
transfer sessions by designing for a

00:00:39.410 --> 00:00:39.420
transfer sessions by designing for a
 

00:00:39.420 --> 00:00:41.810
transfer sessions by designing for a
small number of large downloads we can

00:00:41.810 --> 00:00:41.820
small number of large downloads we can
 

00:00:41.820 --> 00:00:43.459
small number of large downloads we can
do that by batching up all of our delay

00:00:43.459 --> 00:00:43.469
do that by batching up all of our delay
 

00:00:43.469 --> 00:00:45.020
do that by batching up all of our delay
tolerant transfers and bundling them

00:00:45.020 --> 00:00:45.030
tolerant transfers and bundling them
 

00:00:45.030 --> 00:00:46.729
tolerant transfers and bundling them
together with time-sensitive ones

00:00:46.729 --> 00:00:46.739
together with time-sensitive ones
 

00:00:46.739 --> 00:00:48.290
together with time-sensitive ones
potentially even pre-empting planned

00:00:48.290 --> 00:00:48.300
potentially even pre-empting planned
 

00:00:48.300 --> 00:00:51.439
potentially even pre-empting planned
future transfers for example if your app

00:00:51.439 --> 00:00:51.449
future transfers for example if your app
 

00:00:51.449 --> 00:00:53.540
future transfers for example if your app
uses analytics rather than uploading

00:00:53.540 --> 00:00:53.550
uses analytics rather than uploading
 

00:00:53.550 --> 00:00:55.130
uses analytics rather than uploading
data as it's collected you can bundle

00:00:55.130 --> 00:00:55.140
data as it's collected you can bundle
 

00:00:55.140 --> 00:00:56.840
data as it's collected you can bundle
the results together queuing them for

00:00:56.840 --> 00:00:56.850
the results together queuing them for
 

00:00:56.850 --> 00:00:58.790
the results together queuing them for
later upload when your app performs a

00:00:58.790 --> 00:00:58.800
later upload when your app performs a
 

00:00:58.800 --> 00:01:01.580
later upload when your app performs a
time-sensitive download similarly any

00:01:01.580 --> 00:01:01.590
time-sensitive download similarly any
 

00:01:01.590 --> 00:01:03.680
time-sensitive download similarly any
time-sensitive transfers should also pre

00:01:03.680 --> 00:01:03.690
time-sensitive transfers should also pre
 

00:01:03.690 --> 00:01:06.350
time-sensitive transfers should also pre
amp updates or prefetching scheduled to

00:01:06.350 --> 00:01:06.360
amp updates or prefetching scheduled to
 

00:01:06.360 --> 00:01:07.580
amp updates or prefetching scheduled to
occur in the near future

00:01:07.580 --> 00:01:07.590
occur in the near future
 

00:01:07.590 --> 00:01:09.560
occur in the near future
in each case you're attempting to

00:01:09.560 --> 00:01:09.570
in each case you're attempting to
 

00:01:09.570 --> 00:01:11.420
in each case you're attempting to
mitigate the cost of the transfer either

00:01:11.420 --> 00:01:11.430
mitigate the cost of the transfer either
 

00:01:11.430 --> 00:01:13.460
mitigate the cost of the transfer either
by either with a delay tolerant upload

00:01:13.460 --> 00:01:13.470
by either with a delay tolerant upload
 

00:01:13.470 --> 00:01:15.590
by either with a delay tolerant upload
or a planned future download by having

00:01:15.590 --> 00:01:15.600
or a planned future download by having
 

00:01:15.600 --> 00:01:17.660
or a planned future download by having
them key back on the time-sensitive ones

00:01:17.660 --> 00:01:17.670
them key back on the time-sensitive ones
 

00:01:17.670 --> 00:01:20.210
them key back on the time-sensitive ones
so now let's look at some techniques

00:01:20.210 --> 00:01:20.220
so now let's look at some techniques
 

00:01:20.220 --> 00:01:21.679
so now let's look at some techniques
that you can use to implement these best

00:01:21.679 --> 00:01:21.689
that you can use to implement these best
 

00:01:21.689 --> 00:01:24.230
that you can use to implement these best
practices you can start by creating a

00:01:24.230 --> 00:01:24.240
practices you can start by creating a
 

00:01:24.240 --> 00:01:26.060
practices you can start by creating a
batch queue to offset those delay

00:01:26.060 --> 00:01:26.070
batch queue to offset those delay
 

00:01:26.070 --> 00:01:29.719
batch queue to offset those delay
tolerant uploads this code snippet shows

00:01:29.719 --> 00:01:29.729
tolerant uploads this code snippet shows
 

00:01:29.729 --> 00:01:31.850
tolerant uploads this code snippet shows
a simple queue to which you can add

00:01:31.850 --> 00:01:31.860
a simple queue to which you can add
 

00:01:31.860 --> 00:01:33.950
a simple queue to which you can add
either upload or download transfers that

00:01:33.950 --> 00:01:33.960
either upload or download transfers that
 

00:01:33.960 --> 00:01:35.719
either upload or download transfers that
should occur in the future then whenever

00:01:35.719 --> 00:01:35.729
should occur in the future then whenever
 

00:01:35.729 --> 00:01:37.760
should occur in the future then whenever
you execute a time-sensitive on-demand

00:01:37.760 --> 00:01:37.770
you execute a time-sensitive on-demand
 

00:01:37.770 --> 00:01:40.039
you execute a time-sensitive on-demand
download or the next periodic update or

00:01:40.039 --> 00:01:40.049
download or the next periodic update or
 

00:01:40.049 --> 00:01:41.539
download or the next periodic update or
prefetch is initiated you can also

00:01:41.539 --> 00:01:41.549
prefetch is initiated you can also
 

00:01:41.549 --> 00:01:43.429
prefetch is initiated you can also
execute the transfers stored in your

00:01:43.429 --> 00:01:43.439
execute the transfers stored in your
 

00:01:43.439 --> 00:01:45.380
execute the transfers stored in your
queue this simple approach can be

00:01:45.380 --> 00:01:45.390
queue this simple approach can be
 

00:01:45.390 --> 00:01:47.480
queue this simple approach can be
effective but implemented naively if it

00:01:47.480 --> 00:01:47.490
effective but implemented naively if it
 

00:01:47.490 --> 00:01:49.340
effective but implemented naively if it
introduces the risk of transfers being

00:01:49.340 --> 00:01:49.350
introduces the risk of transfers being
 

00:01:49.350 --> 00:01:51.319
introduces the risk of transfers being
lost if your app is closed before the

00:01:51.319 --> 00:01:51.329
lost if your app is closed before the
 

00:01:51.329 --> 00:01:53.240
lost if your app is closed before the
queue is cleared that's fine if your

00:01:53.240 --> 00:01:53.250
queue is cleared that's fine if your
 

00:01:53.250 --> 00:01:54.980
queue is cleared that's fine if your
queue transfers are only relevant to the

00:01:54.980 --> 00:01:54.990
queue transfers are only relevant to the
 

00:01:54.990 --> 00:01:56.389
queue transfers are only relevant to the
current session but for things like

00:01:56.389 --> 00:01:56.399
current session but for things like
 

00:01:56.399 --> 00:01:58.760
current session but for things like
analytics or user created data you want

00:01:58.760 --> 00:01:58.770
analytics or user created data you want
 

00:01:58.770 --> 00:01:59.810
analytics or user created data you want
to make sure that you never lose

00:01:59.810 --> 00:01:59.820
to make sure that you never lose
 

00:01:59.820 --> 00:02:03.170
to make sure that you never lose
anything the best solution is using a

00:02:03.170 --> 00:02:03.180
anything the best solution is using a
 

00:02:03.180 --> 00:02:05.780
anything the best solution is using a
content provider this skeleton

00:02:05.780 --> 00:02:05.790
content provider this skeleton
 

00:02:05.790 --> 00:02:07.490
content provider this skeleton
implementation shows the basic query

00:02:07.490 --> 00:02:07.500
implementation shows the basic query
 

00:02:07.500 --> 00:02:09.469
implementation shows the basic query
insert delete and update methods that

00:02:09.469 --> 00:02:09.479
insert delete and update methods that
 

00:02:09.479 --> 00:02:11.809
insert delete and update methods that
you would need to implement a content

00:02:11.809 --> 00:02:11.819
you would need to implement a content
 

00:02:11.819 --> 00:02:13.250
you would need to implement a content
provider can be backed by any

00:02:13.250 --> 00:02:13.260
provider can be backed by any
 

00:02:13.260 --> 00:02:14.960
provider can be backed by any
stall but most commonly in SQLite

00:02:14.960 --> 00:02:14.970
stall but most commonly in SQLite
 

00:02:14.970 --> 00:02:17.750
stall but most commonly in SQLite
database now rather than implementing a

00:02:17.750 --> 00:02:17.760
database now rather than implementing a
 

00:02:17.760 --> 00:02:19.580
database now rather than implementing a
batch queue you can insert data into

00:02:19.580 --> 00:02:19.590
batch queue you can insert data into
 

00:02:19.590 --> 00:02:21.649
batch queue you can insert data into
your content provider and then when your

00:02:21.649 --> 00:02:21.659
your content provider and then when your
 

00:02:21.659 --> 00:02:23.899
your content provider and then when your
next transfer begins query it for

00:02:23.899 --> 00:02:23.909
next transfer begins query it for
 

00:02:23.909 --> 00:02:25.160
next transfer begins query it for
pending transfers and remove

00:02:25.160 --> 00:02:25.170
pending transfers and remove
 

00:02:25.170 --> 00:02:27.110
pending transfers and remove
successfully transmitted data from that

00:02:27.110 --> 00:02:27.120
successfully transmitted data from that
 

00:02:27.120 --> 00:02:29.660
successfully transmitted data from that
queue in this example I'm querying for

00:02:29.660 --> 00:02:29.670
queue in this example I'm querying for
 

00:02:29.670 --> 00:02:31.580
queue in this example I'm querying for
queue check-ins sending them to a server

00:02:31.580 --> 00:02:31.590
queue check-ins sending them to a server
 

00:02:31.590 --> 00:02:33.259
queue check-ins sending them to a server
and removing the successfully completed

00:02:33.259 --> 00:02:33.269
and removing the successfully completed
 

00:02:33.269 --> 00:02:35.240
and removing the successfully completed
ones from the queue I still need to

00:02:35.240 --> 00:02:35.250
ones from the queue I still need to
 

00:02:35.250 --> 00:02:36.920
ones from the queue I still need to
technique to bundle these delay tolerant

00:02:36.920 --> 00:02:36.930
technique to bundle these delay tolerant
 

00:02:36.930 --> 00:02:38.660
technique to bundle these delay tolerant
transfers with the time-sensitive ones

00:02:38.660 --> 00:02:38.670
transfers with the time-sensitive ones
 

00:02:38.670 --> 00:02:40.880
transfers with the time-sensitive ones
or possibly also reschedule those

00:02:40.880 --> 00:02:40.890
or possibly also reschedule those
 

00:02:40.890 --> 00:02:42.800
or possibly also reschedule those
transfers periodically to ensure that

00:02:42.800 --> 00:02:42.810
transfers periodically to ensure that
 

00:02:42.810 --> 00:02:45.559
transfers periodically to ensure that
they do eventually happen most simply I

00:02:45.559 --> 00:02:45.569
they do eventually happen most simply I
 

00:02:45.569 --> 00:02:47.270
they do eventually happen most simply I
can revisit the earlier approach of

00:02:47.270 --> 00:02:47.280
can revisit the earlier approach of
 

00:02:47.280 --> 00:02:49.130
can revisit the earlier approach of
creating a series of methods to execute

00:02:49.130 --> 00:02:49.140
creating a series of methods to execute
 

00:02:49.140 --> 00:02:50.869
creating a series of methods to execute
each transfer and then ensure that each

00:02:50.869 --> 00:02:50.879
each transfer and then ensure that each
 

00:02:50.879 --> 00:02:52.759
each transfer and then ensure that each
calls the other a much neater

00:02:52.759 --> 00:02:52.769
calls the other a much neater
 

00:02:52.769 --> 00:02:55.599
calls the other a much neater
alternative is to use a sync adapter

00:02:55.599 --> 00:02:55.609
alternative is to use a sync adapter
 

00:02:55.609 --> 00:02:57.740
alternative is to use a sync adapter
that's going to execute each of our

00:02:57.740 --> 00:02:57.750
that's going to execute each of our
 

00:02:57.750 --> 00:02:59.780
that's going to execute each of our
transfers within its own perform sync

00:02:59.780 --> 00:02:59.790
transfers within its own perform sync
 

00:02:59.790 --> 00:03:01.910
transfers within its own perform sync
method it's important to note that each

00:03:01.910 --> 00:03:01.920
method it's important to note that each
 

00:03:01.920 --> 00:03:03.470
method it's important to note that each
of the methods called should contain its

00:03:03.470 --> 00:03:03.480
of the methods called should contain its
 

00:03:03.480 --> 00:03:05.030
of the methods called should contain its
own logic for determining whether or not

00:03:05.030 --> 00:03:05.040
own logic for determining whether or not
 

00:03:05.040 --> 00:03:06.530
own logic for determining whether or not
it should actually perform an update

00:03:06.530 --> 00:03:06.540
it should actually perform an update
 

00:03:06.540 --> 00:03:08.720
it should actually perform an update
potentially skipping transfer sessions

00:03:08.720 --> 00:03:08.730
potentially skipping transfer sessions
 

00:03:08.730 --> 00:03:10.099
potentially skipping transfer sessions
if the radio hasn't already been

00:03:10.099 --> 00:03:10.109
if the radio hasn't already been
 

00:03:10.109 --> 00:03:12.369
if the radio hasn't already been
activated by a higher priority method

00:03:12.369 --> 00:03:12.379
activated by a higher priority method
 

00:03:12.379 --> 00:03:14.420
activated by a higher priority method
using a sync adapter to manage your

00:03:14.420 --> 00:03:14.430
using a sync adapter to manage your
 

00:03:14.430 --> 00:03:15.830
using a sync adapter to manage your
transfers has a number of advantages

00:03:15.830 --> 00:03:15.840
transfers has a number of advantages
 

00:03:15.840 --> 00:03:17.869
transfers has a number of advantages
including making it easy to centralize

00:03:17.869 --> 00:03:17.879
including making it easy to centralize
 

00:03:17.879 --> 00:03:20.180
including making it easy to centralize
all your taps data transfers in one

00:03:20.180 --> 00:03:20.190
all your taps data transfers in one
 

00:03:20.190 --> 00:03:22.189
all your taps data transfers in one
place so they all run at the same time

00:03:22.189 --> 00:03:22.199
place so they all run at the same time
 

00:03:22.199 --> 00:03:24.439
place so they all run at the same time
your data transfers can also be

00:03:24.439 --> 00:03:24.449
your data transfers can also be
 

00:03:24.449 --> 00:03:25.970
your data transfers can also be
scheduled with transfers from other apps

00:03:25.970 --> 00:03:25.980
scheduled with transfers from other apps
 

00:03:25.980 --> 00:03:27.770
scheduled with transfers from other apps
or working towards the goal of reducing

00:03:27.770 --> 00:03:27.780
or working towards the goal of reducing
 

00:03:27.780 --> 00:03:29.479
or working towards the goal of reducing
the number of times the system has to

00:03:29.479 --> 00:03:29.489
the number of times the system has to
 

00:03:29.489 --> 00:03:32.210
the number of times the system has to
switch on the radio sync adapter also

00:03:32.210 --> 00:03:32.220
switch on the radio sync adapter also
 

00:03:32.220 --> 00:03:34.460
switch on the radio sync adapter also
implements data transfer best practices

00:03:34.460 --> 00:03:34.470
implements data transfer best practices
 

00:03:34.470 --> 00:03:36.409
implements data transfer best practices
for you including checking for network

00:03:36.409 --> 00:03:36.419
for you including checking for network
 

00:03:36.419 --> 00:03:38.210
for you including checking for network
connectivity retrying downloads when

00:03:38.210 --> 00:03:38.220
connectivity retrying downloads when
 

00:03:38.220 --> 00:03:40.159
connectivity retrying downloads when
connectivity returns and automated

00:03:40.159 --> 00:03:40.169
connectivity returns and automated
 

00:03:40.169 --> 00:03:41.750
connectivity returns and automated
batching and time shifting on requests

00:03:41.750 --> 00:03:41.760
batching and time shifting on requests
 

00:03:41.760 --> 00:03:43.449
batching and time shifting on requests
that occur within the same time window

00:03:43.449 --> 00:03:43.459
that occur within the same time window
 

00:03:43.459 --> 00:03:45.500
that occur within the same time window
creating a sync adapter is actually

00:03:45.500 --> 00:03:45.510
creating a sync adapter is actually
 

00:03:45.510 --> 00:03:46.849
creating a sync adapter is actually
pretty straightforward start by

00:03:46.849 --> 00:03:46.859
pretty straightforward start by
 

00:03:46.859 --> 00:03:48.920
pretty straightforward start by
extending the abstract thread of the

00:03:48.920 --> 00:03:48.930
extending the abstract thread of the
 

00:03:48.930 --> 00:03:50.689
extending the abstract thread of the
sync adapter class and implementing your

00:03:50.689 --> 00:03:50.699
sync adapter class and implementing your
 

00:03:50.699 --> 00:03:52.520
sync adapter class and implementing your
own data transfer code within the on

00:03:52.520 --> 00:03:52.530
own data transfer code within the on
 

00:03:52.530 --> 00:03:55.599
own data transfer code within the on
perform sync handler as you can see here

00:03:55.599 --> 00:03:55.609
perform sync handler as you can see here
 

00:03:55.609 --> 00:03:58.849
perform sync handler as you can see here
when executed the sync adapter will

00:03:58.849 --> 00:03:58.859
when executed the sync adapter will
 

00:03:58.859 --> 00:04:01.099
when executed the sync adapter will
spawn a thread to invoke sync operation

00:04:01.099 --> 00:04:01.109
spawn a thread to invoke sync operation
 

00:04:01.109 --> 00:04:02.569
spawn a thread to invoke sync operation
so you don't need to worry about moving

00:04:02.569 --> 00:04:02.579
so you don't need to worry about moving
 

00:04:02.579 --> 00:04:04.580
so you don't need to worry about moving
your code into a background thread and

00:04:04.580 --> 00:04:04.590
your code into a background thread and
 

00:04:04.590 --> 00:04:06.289
your code into a background thread and
similarly multiple executions will be

00:04:06.289 --> 00:04:06.299
similarly multiple executions will be
 

00:04:06.299 --> 00:04:07.970
similarly multiple executions will be
rejected so you can write your transfer

00:04:07.970 --> 00:04:07.980
rejected so you can write your transfer
 

00:04:07.980 --> 00:04:09.409
rejected so you can write your transfer
code knowing that it won't be running

00:04:09.409 --> 00:04:09.419
code knowing that it won't be running
 

00:04:09.419 --> 00:04:11.809
code knowing that it won't be running
concurrently with itself in order to run

00:04:11.809 --> 00:04:11.819
concurrently with itself in order to run
 

00:04:11.819 --> 00:04:13.430
concurrently with itself in order to run
the sync adapter must be bound to a

00:04:13.430 --> 00:04:13.440
the sync adapter must be bound to a
 

00:04:13.440 --> 00:04:15.259
the sync adapter must be bound to a
service so you also need to create a

00:04:15.259 --> 00:04:15.269
service so you also need to create a
 

00:04:15.269 --> 00:04:16.879
service so you also need to create a
service that instantiate your sync

00:04:16.879 --> 00:04:16.889
service that instantiate your sync
 

00:04:16.889 --> 00:04:19.399
service that instantiate your sync
adapter and binds to it sync adapters

00:04:19.399 --> 00:04:19.409
adapter and binds to it sync adapters
 

00:04:19.409 --> 00:04:20.719
adapter and binds to it sync adapters
were originally designed to support

00:04:20.719 --> 00:04:20.729
were originally designed to support
 

00:04:20.729 --> 00:04:22.370
were originally designed to support
synchronization of a content provider

00:04:22.370 --> 00:04:22.380
synchronization of a content provider
 

00:04:22.380 --> 00:04:24.910
synchronization of a content provider
associated with an account for example

00:04:24.910 --> 00:04:24.920
associated with an account for example
 

00:04:24.920 --> 00:04:28.600
associated with an account for example
Gmail now as a result you need you also

00:04:28.600 --> 00:04:28.610
Gmail now as a result you need you also
 

00:04:28.610 --> 00:04:30.520
Gmail now as a result you need you also
need to associate each syncadapter with

00:04:30.520 --> 00:04:30.530
need to associate each syncadapter with
 

00:04:30.530 --> 00:04:31.960
need to associate each syncadapter with
an account type and a content provider

00:04:31.960 --> 00:04:31.970
an account type and a content provider
 

00:04:31.970 --> 00:04:34.270
an account type and a content provider
Authority if you don't use accounts for

00:04:34.270 --> 00:04:34.280
Authority if you don't use accounts for
 

00:04:34.280 --> 00:04:36.010
Authority if you don't use accounts for
your application you can create your own

00:04:36.010 --> 00:04:36.020
your application you can create your own
 

00:04:36.020 --> 00:04:38.260
your application you can create your own
mock account by extending the abstract

00:04:38.260 --> 00:04:38.270
mock account by extending the abstract
 

00:04:38.270 --> 00:04:40.270
mock account by extending the abstract
account authenticator in this

00:04:40.270 --> 00:04:40.280
account authenticator in this
 

00:04:40.280 --> 00:04:42.250
account authenticator in this
boilerplate you can you'll notice that

00:04:42.250 --> 00:04:42.260
boilerplate you can you'll notice that
 

00:04:42.260 --> 00:04:43.990
boilerplate you can you'll notice that
I'm overriding the Add Account method

00:04:43.990 --> 00:04:44.000
I'm overriding the Add Account method
 

00:04:44.000 --> 00:04:45.730
I'm overriding the Add Account method
here you would typically ask the user to

00:04:45.730 --> 00:04:45.740
here you would typically ask the user to
 

00:04:45.740 --> 00:04:47.500
here you would typically ask the user to
enter their authentication details for

00:04:47.500 --> 00:04:47.510
enter their authentication details for
 

00:04:47.510 --> 00:04:49.420
enter their authentication details for
your service but instead you can just

00:04:49.420 --> 00:04:49.430
your service but instead you can just
 

00:04:49.430 --> 00:04:51.190
your service but instead you can just
create a new stub account and explicitly

00:04:51.190 --> 00:04:51.200
create a new stub account and explicitly
 

00:04:51.200 --> 00:04:53.380
create a new stub account and explicitly
add it to the account manager take

00:04:53.380 --> 00:04:53.390
add it to the account manager take
 

00:04:53.390 --> 00:04:55.030
add it to the account manager take
particular note of the account type you

00:04:55.030 --> 00:04:55.040
particular note of the account type you
 

00:04:55.040 --> 00:04:57.280
particular note of the account type you
specify like the sync adapter the

00:04:57.280 --> 00:04:57.290
specify like the sync adapter the
 

00:04:57.290 --> 00:04:58.840
specify like the sync adapter the
account authenticator also needs a

00:04:58.840 --> 00:04:58.850
account authenticator also needs a
 

00:04:58.850 --> 00:05:00.640
account authenticator also needs a
service from which to run so create a

00:05:00.640 --> 00:05:00.650
service from which to run so create a
 

00:05:00.650 --> 00:05:02.020
service from which to run so create a
new service that binds to your

00:05:02.020 --> 00:05:02.030
new service that binds to your
 

00:05:02.030 --> 00:05:04.570
new service that binds to your
implementation then create a metadata

00:05:04.570 --> 00:05:04.580
implementation then create a metadata
 

00:05:04.580 --> 00:05:07.030
implementation then create a metadata
file for your account authenticator note

00:05:07.030 --> 00:05:07.040
file for your account authenticator note
 

00:05:07.040 --> 00:05:08.590
file for your account authenticator note
in particular the account type which

00:05:08.590 --> 00:05:08.600
in particular the account type which
 

00:05:08.600 --> 00:05:10.630
in particular the account type which
much must match the one which you

00:05:10.630 --> 00:05:10.640
much must match the one which you
 

00:05:10.640 --> 00:05:12.810
much must match the one which you
provided earlier in your implementation

00:05:12.810 --> 00:05:12.820
provided earlier in your implementation
 

00:05:12.820 --> 00:05:15.700
provided earlier in your implementation
the sync adapter also requires a content

00:05:15.700 --> 00:05:15.710
the sync adapter also requires a content
 

00:05:15.710 --> 00:05:17.920
the sync adapter also requires a content
provider as we described earlier a comp

00:05:17.920 --> 00:05:17.930
provider as we described earlier a comp
 

00:05:17.930 --> 00:05:19.660
provider as we described earlier a comp
content provider is an effective and

00:05:19.660 --> 00:05:19.670
content provider is an effective and
 

00:05:19.670 --> 00:05:21.010
content provider is an effective and
efficient way to store the data that

00:05:21.010 --> 00:05:21.020
efficient way to store the data that
 

00:05:21.020 --> 00:05:22.660
efficient way to store the data that
you're planning to transfer but if you

00:05:22.660 --> 00:05:22.670
you're planning to transfer but if you
 

00:05:22.670 --> 00:05:24.430
you're planning to transfer but if you
prefer not to use one you can create a

00:05:24.430 --> 00:05:24.440
prefer not to use one you can create a
 

00:05:24.440 --> 00:05:26.670
prefer not to use one you can create a
stubbed-out implementation like this

00:05:26.670 --> 00:05:26.680
stubbed-out implementation like this
 

00:05:26.680 --> 00:05:29.110
stubbed-out implementation like this
next create the metadata file for the

00:05:29.110 --> 00:05:29.120
next create the metadata file for the
 

00:05:29.120 --> 00:05:30.310
next create the metadata file for the
sync adapter that will be used to

00:05:30.310 --> 00:05:30.320
sync adapter that will be used to
 

00:05:30.320 --> 00:05:32.350
sync adapter that will be used to
associate a content provider and account

00:05:32.350 --> 00:05:32.360
associate a content provider and account
 

00:05:32.360 --> 00:05:35.650
associate a content provider and account
type with it no but here I'm marking the

00:05:35.650 --> 00:05:35.660
type with it no but here I'm marking the
 

00:05:35.660 --> 00:05:38.290
type with it no but here I'm marking the
sync adapter as not used visible so

00:05:38.290 --> 00:05:38.300
sync adapter as not used visible so
 

00:05:38.300 --> 00:05:39.910
sync adapter as not used visible so
users won't be able to disable syncing

00:05:39.910 --> 00:05:39.920
users won't be able to disable syncing
 

00:05:39.920 --> 00:05:42.430
users won't be able to disable syncing
from their global settings finally add

00:05:42.430 --> 00:05:42.440
from their global settings finally add
 

00:05:42.440 --> 00:05:44.350
from their global settings finally add
the new services and content providers

00:05:44.350 --> 00:05:44.360
the new services and content providers
 

00:05:44.360 --> 00:05:46.360
the new services and content providers
to the application manifest associating

00:05:46.360 --> 00:05:46.370
to the application manifest associating
 

00:05:46.370 --> 00:05:48.310
to the application manifest associating
the sync adapter metadata with the sync

00:05:48.310 --> 00:05:48.320
the sync adapter metadata with the sync
 

00:05:48.320 --> 00:05:49.840
the sync adapter metadata with the sync
adapter service the account

00:05:49.840 --> 00:05:49.850
adapter service the account
 

00:05:49.850 --> 00:05:52.060
adapter service the account
authenticator metadata with the account

00:05:52.060 --> 00:05:52.070
authenticator metadata with the account
 

00:05:52.070 --> 00:05:54.610
authenticator metadata with the account
authenticator service with your sync

00:05:54.610 --> 00:05:54.620
authenticator service with your sync
 

00:05:54.620 --> 00:05:56.260
authenticator service with your sync
adapter complete you can now start

00:05:56.260 --> 00:05:56.270
adapter complete you can now start
 

00:05:56.270 --> 00:05:57.520
adapter complete you can now start
thinking about how to trigger your

00:05:57.520 --> 00:05:57.530
thinking about how to trigger your
 

00:05:57.530 --> 00:05:59.140
thinking about how to trigger your
synchronization so you can configure

00:05:59.140 --> 00:05:59.150
synchronization so you can configure
 

00:05:59.150 --> 00:06:00.730
synchronization so you can configure
your sync adapter to run when server

00:06:00.730 --> 00:06:00.740
your sync adapter to run when server
 

00:06:00.740 --> 00:06:02.590
your sync adapter to run when server
data changes when the data on the device

00:06:02.590 --> 00:06:02.600
data changes when the data on the device
 

00:06:02.600 --> 00:06:04.600
data changes when the data on the device
changes when the framework sends a

00:06:04.600 --> 00:06:04.610
changes when the framework sends a
 

00:06:04.610 --> 00:06:06.280
changes when the framework sends a
network tickle or at predetermined

00:06:06.280 --> 00:06:06.290
network tickle or at predetermined
 

00:06:06.290 --> 00:06:09.130
network tickle or at predetermined
intervals or even on demand to be as

00:06:09.130 --> 00:06:09.140
intervals or even on demand to be as
 

00:06:09.140 --> 00:06:10.690
intervals or even on demand to be as
efficient as possible it's best practice

00:06:10.690 --> 00:06:10.700
efficient as possible it's best practice
 

00:06:10.700 --> 00:06:13.150
efficient as possible it's best practice
to rely primarily on server initiated

00:06:13.150 --> 00:06:13.160
to rely primarily on server initiated
 

00:06:13.160 --> 00:06:14.740
to rely primarily on server initiated
synchronizations and where possible

00:06:14.740 --> 00:06:14.750
synchronizations and where possible
 

00:06:14.750 --> 00:06:16.480
synchronizations and where possible
avoid starting syncs as the direct

00:06:16.480 --> 00:06:16.490
avoid starting syncs as the direct
 

00:06:16.490 --> 00:06:19.420
avoid starting syncs as the direct
result of the user action basically try

00:06:19.420 --> 00:06:19.430
result of the user action basically try
 

00:06:19.430 --> 00:06:21.880
result of the user action basically try
and eliminate the refresh button the

00:06:21.880 --> 00:06:21.890
and eliminate the refresh button the
 

00:06:21.890 --> 00:06:23.380
and eliminate the refresh button the
hardest part of the process is

00:06:23.380 --> 00:06:23.390
hardest part of the process is
 

00:06:23.390 --> 00:06:25.090
hardest part of the process is
determining which transfers are delay

00:06:25.090 --> 00:06:25.100
determining which transfers are delay
 

00:06:25.100 --> 00:06:26.830
determining which transfers are delay
tolerant and which will require a sync

00:06:26.830 --> 00:06:26.840
tolerant and which will require a sync
 

00:06:26.840 --> 00:06:28.780
tolerant and which will require a sync
to be initiated now this flow chart

00:06:28.780 --> 00:06:28.790
to be initiated now this flow chart
 

00:06:28.790 --> 00:06:31.420
to be initiated now this flow chart
gives an indication of the most common

00:06:31.420 --> 00:06:31.430
gives an indication of the most common
 

00:06:31.430 --> 00:06:33.250
gives an indication of the most common
initiators for possible syncs and I'll

00:06:33.250 --> 00:06:33.260
initiators for possible syncs and I'll
 

00:06:33.260 --> 00:06:35.410
initiators for possible syncs and I'll
go through each flow now demonstrating

00:06:35.410 --> 00:06:35.420
go through each flow now demonstrating
 

00:06:35.420 --> 00:06:36.910
go through each flow now demonstrating
how to trigger a sync adapter in each

00:06:36.910 --> 00:06:36.920
how to trigger a sync adapter in each
 

00:06:36.920 --> 00:06:37.360
how to trigger a sync adapter in each
case

00:06:37.360 --> 00:06:37.370
case
 

00:06:37.370 --> 00:06:40.150
case
the best approach is to rely on server

00:06:40.150 --> 00:06:40.160
the best approach is to rely on server
 

00:06:40.160 --> 00:06:42.190
the best approach is to rely on server
pings notifying your app that there is

00:06:42.190 --> 00:06:42.200
pings notifying your app that there is
 

00:06:42.200 --> 00:06:44.710
pings notifying your app that there is
new data to download using Google Cloud

00:06:44.710 --> 00:06:44.720
new data to download using Google Cloud
 

00:06:44.720 --> 00:06:46.150
new data to download using Google Cloud
messaging which I'll explore in more

00:06:46.150 --> 00:06:46.160
messaging which I'll explore in more
 

00:06:46.160 --> 00:06:48.040
messaging which I'll explore in more
detail in another dev byte you can

00:06:48.040 --> 00:06:48.050
detail in another dev byte you can
 

00:06:48.050 --> 00:06:49.720
detail in another dev byte you can
notify each installed instance of your

00:06:49.720 --> 00:06:49.730
notify each installed instance of your
 

00:06:49.730 --> 00:06:51.220
notify each installed instance of your
app that it needs to sync with the

00:06:51.220 --> 00:06:51.230
app that it needs to sync with the
 

00:06:51.230 --> 00:06:54.070
app that it needs to sync with the
server simply listen for an incoming GCM

00:06:54.070 --> 00:06:54.080
server simply listen for an incoming GCM
 

00:06:54.080 --> 00:06:56.260
server simply listen for an incoming GCM
message notifying you of new data

00:06:56.260 --> 00:06:56.270
message notifying you of new data
 

00:06:56.270 --> 00:06:58.300
message notifying you of new data
becoming available and call request sync

00:06:58.300 --> 00:06:58.310
becoming available and call request sync
 

00:06:58.310 --> 00:06:59.980
becoming available and call request sync
specifying the appropriate account and

00:06:59.980 --> 00:06:59.990
specifying the appropriate account and
 

00:06:59.990 --> 00:07:02.170
specifying the appropriate account and
authority this eliminates the need for

00:07:02.170 --> 00:07:02.180
authority this eliminates the need for
 

00:07:02.180 --> 00:07:03.580
authority this eliminates the need for
any client-side polling while

00:07:03.580 --> 00:07:03.590
any client-side polling while
 

00:07:03.590 --> 00:07:05.530
any client-side polling while
maintaining constantly up-to-date client

00:07:05.530 --> 00:07:05.540
maintaining constantly up-to-date client
 

00:07:05.540 --> 00:07:08.410
maintaining constantly up-to-date client
data conversely you may want to

00:07:08.410 --> 00:07:08.420
data conversely you may want to
 

00:07:08.420 --> 00:07:09.880
data conversely you may want to
synchronize changes on the client side

00:07:09.880 --> 00:07:09.890
synchronize changes on the client side
 

00:07:09.890 --> 00:07:11.500
synchronize changes on the client side
to the cloud and this could be anything

00:07:11.500 --> 00:07:11.510
to the cloud and this could be anything
 

00:07:11.510 --> 00:07:13.750
to the cloud and this could be anything
from analytics data to new email so you

00:07:13.750 --> 00:07:13.760
from analytics data to new email so you
 

00:07:13.760 --> 00:07:15.340
from analytics data to new email so you
want to be careful when deciding which

00:07:15.340 --> 00:07:15.350
want to be careful when deciding which
 

00:07:15.350 --> 00:07:17.440
want to be careful when deciding which
changes are sufficient to initiate an

00:07:17.440 --> 00:07:17.450
changes are sufficient to initiate an
 

00:07:17.450 --> 00:07:20.140
changes are sufficient to initiate an
actual transfer if you're using content

00:07:20.140 --> 00:07:20.150
actual transfer if you're using content
 

00:07:20.150 --> 00:07:21.670
actual transfer if you're using content
providers you can configure your sync

00:07:21.670 --> 00:07:21.680
providers you can configure your sync
 

00:07:21.680 --> 00:07:23.350
providers you can configure your sync
adapter to trigger whenever the content

00:07:23.350 --> 00:07:23.360
adapter to trigger whenever the content
 

00:07:23.360 --> 00:07:25.450
adapter to trigger whenever the content
provider changes by setting the supports

00:07:25.450 --> 00:07:25.460
provider changes by setting the supports
 

00:07:25.460 --> 00:07:27.790
provider changes by setting the supports
uploading attribute to true which

00:07:27.790 --> 00:07:27.800
uploading attribute to true which
 

00:07:27.800 --> 00:07:29.770
uploading attribute to true which
happens to be the default now when this

00:07:29.770 --> 00:07:29.780
happens to be the default now when this
 

00:07:29.780 --> 00:07:31.750
happens to be the default now when this
is set and upload only sync will be

00:07:31.750 --> 00:07:31.760
is set and upload only sync will be
 

00:07:31.760 --> 00:07:33.670
is set and upload only sync will be
requested whenever your content provider

00:07:33.670 --> 00:07:33.680
requested whenever your content provider
 

00:07:33.680 --> 00:07:36.040
requested whenever your content provider
executes a notify change call with the

00:07:36.040 --> 00:07:36.050
executes a notify change call with the
 

00:07:36.050 --> 00:07:38.440
executes a notify change call with the
sync to network parameter set to true as

00:07:38.440 --> 00:07:38.450
sync to network parameter set to true as
 

00:07:38.450 --> 00:07:43.030
sync to network parameter set to true as
shown yeah now within the on perform

00:07:43.030 --> 00:07:43.040
shown yeah now within the on perform
 

00:07:43.040 --> 00:07:44.800
shown yeah now within the on perform
sync handler you can detect these upload

00:07:44.800 --> 00:07:44.810
sync handler you can detect these upload
 

00:07:44.810 --> 00:07:46.810
sync handler you can detect these upload
only syncs by examining the sync extras

00:07:46.810 --> 00:07:46.820
only syncs by examining the sync extras
 

00:07:46.820 --> 00:07:49.090
only syncs by examining the sync extras
upload extra this can be useful if you

00:07:49.090 --> 00:07:49.100
upload extra this can be useful if you
 

00:07:49.100 --> 00:07:51.100
upload extra this can be useful if you
want to rate limit client initiated

00:07:51.100 --> 00:07:51.110
want to rate limit client initiated
 

00:07:51.110 --> 00:07:54.010
want to rate limit client initiated
transfers you can also configure your

00:07:54.010 --> 00:07:54.020
transfers you can also configure your
 

00:07:54.020 --> 00:07:55.210
transfers you can also configure your
sync adapter to sync

00:07:55.210 --> 00:07:55.220
sync adapter to sync
 

00:07:55.220 --> 00:07:56.920
sync adapter to sync
whenever the platform opens a connection

00:07:56.920 --> 00:07:56.930
whenever the platform opens a connection
 

00:07:56.930 --> 00:07:58.930
whenever the platform opens a connection
to keep the tcp/ip connection used for

00:07:58.930 --> 00:07:58.940
to keep the tcp/ip connection used for
 

00:07:58.940 --> 00:08:00.730
to keep the tcp/ip connection used for
things like Google Cloud messaging alive

00:08:00.730 --> 00:08:00.740
things like Google Cloud messaging alive
 

00:08:00.740 --> 00:08:03.909
things like Google Cloud messaging alive
by setting it to sync automatically now

00:08:03.909 --> 00:08:03.919
by setting it to sync automatically now
 

00:08:03.919 --> 00:08:06.219
by setting it to sync automatically now
this approach assures that your app is

00:08:06.219 --> 00:08:06.229
this approach assures that your app is
 

00:08:06.229 --> 00:08:07.750
this approach assures that your app is
regularly updated without having to

00:08:07.750 --> 00:08:07.760
regularly updated without having to
 

00:08:07.760 --> 00:08:09.550
regularly updated without having to
schedule your own client-side polling

00:08:09.550 --> 00:08:09.560
schedule your own client-side polling
 

00:08:09.560 --> 00:08:11.710
schedule your own client-side polling
now that said the frequency of network

00:08:11.710 --> 00:08:11.720
now that said the frequency of network
 

00:08:11.720 --> 00:08:13.300
now that said the frequency of network
tickles can lead to a large number of

00:08:13.300 --> 00:08:13.310
tickles can lead to a large number of
 

00:08:13.310 --> 00:08:15.159
tickles can lead to a large number of
transfers so this should only be enabled

00:08:15.159 --> 00:08:15.169
transfers so this should only be enabled
 

00:08:15.169 --> 00:08:16.659
transfers so this should only be enabled
when your app is in the foreground and

00:08:16.659 --> 00:08:16.669
when your app is in the foreground and
 

00:08:16.669 --> 00:08:18.490
when your app is in the foreground and
even then you may want to artificially

00:08:18.490 --> 00:08:18.500
even then you may want to artificially
 

00:08:18.500 --> 00:08:20.230
even then you may want to artificially
lower the frequency of syncs within your

00:08:20.230 --> 00:08:20.240
lower the frequency of syncs within your
 

00:08:20.240 --> 00:08:23.469
lower the frequency of syncs within your
on perform sync method now if you want

00:08:23.469 --> 00:08:23.479
on perform sync method now if you want
 

00:08:23.479 --> 00:08:25.090
on perform sync method now if you want
to perform regular thanks at a known

00:08:25.090 --> 00:08:25.100
to perform regular thanks at a known
 

00:08:25.100 --> 00:08:27.400
to perform regular thanks at a known
frequency you can use the add periodic

00:08:27.400 --> 00:08:27.410
frequency you can use the add periodic
 

00:08:27.410 --> 00:08:29.409
frequency you can use the add periodic
sync method well you can set any

00:08:29.409 --> 00:08:29.419
sync method well you can set any
 

00:08:29.419 --> 00:08:30.790
sync method well you can set any
frequency this approach is more

00:08:30.790 --> 00:08:30.800
frequency this approach is more
 

00:08:30.800 --> 00:08:32.440
frequency this approach is more
typically used to ensure at least one

00:08:32.440 --> 00:08:32.450
typically used to ensure at least one
 

00:08:32.450 --> 00:08:34.870
typically used to ensure at least one
sync happens every 12 to 24 hours

00:08:34.870 --> 00:08:34.880
sync happens every 12 to 24 hours
 

00:08:34.880 --> 00:08:36.600
sync happens every 12 to 24 hours
when the app isn't already running

00:08:36.600 --> 00:08:36.610
when the app isn't already running
 

00:08:36.610 --> 00:08:39.310
when the app isn't already running
typically with client and server changes

00:08:39.310 --> 00:08:39.320
typically with client and server changes
 

00:08:39.320 --> 00:08:40.750
typically with client and server changes
initiating most of those updates

00:08:40.750 --> 00:08:40.760
initiating most of those updates
 

00:08:40.760 --> 00:08:42.010
initiating most of those updates
particularly when the app is in the

00:08:42.010 --> 00:08:42.020
particularly when the app is in the
 

00:08:42.020 --> 00:08:44.829
particularly when the app is in the
foreground now finally if you need to

00:08:44.829 --> 00:08:44.839
foreground now finally if you need to
 

00:08:44.839 --> 00:08:46.480
foreground now finally if you need to
initiate a time-sensitive transfer

00:08:46.480 --> 00:08:46.490
initiate a time-sensitive transfer
 

00:08:46.490 --> 00:08:49.120
initiate a time-sensitive transfer
either when the app launches when the

00:08:49.120 --> 00:08:49.130
either when the app launches when the
 

00:08:49.130 --> 00:08:50.170
either when the app launches when the
use of browsers are something that

00:08:50.170 --> 00:08:50.180
use of browsers are something that
 

00:08:50.180 --> 00:08:50.740
use of browsers are something that
you've not

00:08:50.740 --> 00:08:50.750
you've not
 

00:08:50.750 --> 00:08:52.270
you've not
Fetchit or just a prefetch additional

00:08:52.270 --> 00:08:52.280
Fetchit or just a prefetch additional
 

00:08:52.280 --> 00:08:55.030
Fetchit or just a prefetch additional
data you can call request sink in cases

00:08:55.030 --> 00:08:55.040
data you can call request sink in cases
 

00:08:55.040 --> 00:08:56.610
data you can call request sink in cases
where an update must occur immediately

00:08:56.610 --> 00:08:56.620
where an update must occur immediately
 

00:08:56.620 --> 00:08:59.050
where an update must occur immediately
in order to avoid impacting the user

00:08:59.050 --> 00:08:59.060
in order to avoid impacting the user
 

00:08:59.060 --> 00:09:01.200
in order to avoid impacting the user
experience you can force a manual

00:09:01.200 --> 00:09:01.210
experience you can force a manual
 

00:09:01.210 --> 00:09:03.970
experience you can force a manual
expedited sync by setting the manual and

00:09:03.970 --> 00:09:03.980
expedited sync by setting the manual and
 

00:09:03.980 --> 00:09:05.710
expedited sync by setting the manual and
expedited flags within the settings

00:09:05.710 --> 00:09:05.720
expedited flags within the settings
 

00:09:05.720 --> 00:09:07.720
expedited flags within the settings
bundle these settings will ignore any

00:09:07.720 --> 00:09:07.730
bundle these settings will ignore any
 

00:09:07.730 --> 00:09:09.280
bundle these settings will ignore any
back offs and sync settings that might

00:09:09.280 --> 00:09:09.290
back offs and sync settings that might
 

00:09:09.290 --> 00:09:11.020
back offs and sync settings that might
delay the sync and attempt to execute it

00:09:11.020 --> 00:09:11.030
delay the sync and attempt to execute it
 

00:09:11.030 --> 00:09:13.480
delay the sync and attempt to execute it
immediately instead now you can find all

00:09:13.480 --> 00:09:13.490
immediately instead now you can find all
 

00:09:13.490 --> 00:09:15.100
immediately instead now you can find all
the details for creating and using sync

00:09:15.100 --> 00:09:15.110
the details for creating and using sync
 

00:09:15.110 --> 00:09:17.310
the details for creating and using sync
adapters in this Android training class

00:09:17.310 --> 00:09:17.320
adapters in this Android training class
 

00:09:17.320 --> 00:09:19.750
adapters in this Android training class
so having learned how to perform our

00:09:19.750 --> 00:09:19.760
so having learned how to perform our
 

00:09:19.760 --> 00:09:21.580
so having learned how to perform our
updates efficiently other devbytes will

00:09:21.580 --> 00:09:21.590
updates efficiently other devbytes will
 

00:09:21.590 --> 00:09:23.410
updates efficiently other devbytes will
look at ways to adjust our update

00:09:23.410 --> 00:09:23.420
look at ways to adjust our update
 

00:09:23.420 --> 00:09:25.870
look at ways to adjust our update
frequency reducing data payload sizes

00:09:25.870 --> 00:09:25.880
frequency reducing data payload sizes
 

00:09:25.880 --> 00:09:27.940
frequency reducing data payload sizes
and using a Google Cloud messaging in

00:09:27.940 --> 00:09:27.950
and using a Google Cloud messaging in
 

00:09:27.950 --> 00:09:30.670
and using a Google Cloud messaging in
more detail

