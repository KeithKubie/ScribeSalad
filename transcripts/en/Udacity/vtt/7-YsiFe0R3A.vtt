WEBVTT
Kind: captions
Language: en

00:00:00.510 --> 00:00:04.040
Sometimes in our apps, we want to have
certain elements at the top of the list,

00:00:04.040 --> 00:00:09.020
such as those which were edited most
recently or that were created first.

00:00:09.020 --> 00:00:14.480
So, when querying for records, there
are four ordering functions in Firebase.

00:00:14.480 --> 00:00:18.300
Firebase can sort by children or
grandchildren, keys,

00:00:18.300 --> 00:00:23.120
values of a named property, or
by its priority and key together.

00:00:23.120 --> 00:00:25.615
Here are how these functions work.

00:00:25.615 --> 00:00:30.600
OrderByChild)() allows us to order
by a specific descending key.

00:00:30.600 --> 00:00:34.870
For example, if we have an item called
desserts and it contains an attribute

00:00:34.870 --> 00:00:39.580
for types of sweeteners, we could order
all desserts based on the children.

00:00:39.580 --> 00:00:44.410
If your sweeteners were white sugar,
agave, Stevia, coconut sugar,

00:00:44.410 --> 00:00:49.770
honey, and molasses, this would allow
you to sort them alphabetically.

00:00:49.770 --> 00:00:54.260
So you'd have all the agave desserts
first, followed by the others,

00:00:54.260 --> 00:00:55.826
with white sugar last.

00:00:55.826 --> 00:01:00.070
Similarly, in the 2.4
release of the SDK,

00:01:00.070 --> 00:01:03.810
Firebase introduced what
it calls deep path queries.

00:01:03.810 --> 00:01:07.400
Put simply, it's the ability to
order by any descending key,

00:01:07.400 --> 00:01:09.190
not just direct children.

00:01:09.190 --> 00:01:12.550
So you could have desserts, and
a child could be ingredients, and

00:01:12.550 --> 00:01:16.570
within the ingredients object you could
have a property called sweeteners that

00:01:16.570 --> 00:01:17.771
you could then sort by.

00:01:17.771 --> 00:01:19.274
OrderByKey().

00:01:19.274 --> 00:01:23.826
OrderByKey() will order the key in
ascending order by key name to produce

00:01:23.826 --> 00:01:25.279
an alphabetical sort.

00:01:25.279 --> 00:01:29.100
OrderByValue() will order by
the value of the child nodes.

00:01:29.100 --> 00:01:32.005
This type of sort can be useful for
numeric values.

00:01:32.005 --> 00:01:33.690
OrderByPriority().

00:01:33.690 --> 00:01:36.530
The orderByPriority() method
can order by priority,

00:01:36.530 --> 00:01:41.130
however, while it is still a supported
method in Firebase, it's not suggested.

00:01:41.130 --> 00:01:44.690
It's a method that was used
before orderByChild() existed.

00:01:44.690 --> 00:01:46.540
For each of these query operations,

00:01:46.540 --> 00:01:50.470
there is a defined order by which
the values or keys are sorted.

00:01:50.470 --> 00:01:55.090
For orderByChild() and orderByValue(),
the sort order is the following.

00:01:55.090 --> 00:01:59.310
Return null, a value will be equal to
null if the property doesn't exist.

00:01:59.310 --> 00:02:01.880
This is more pertinent for
orderByChild().

00:02:01.880 --> 00:02:03.900
Then return false.

00:02:03.900 --> 00:02:04.730
True.

00:02:04.730 --> 00:02:05.970
Numeric values.

00:02:05.970 --> 00:02:07.070
Then strings.

00:02:07.070 --> 00:02:07.890
Then objects.

00:02:08.949 --> 00:02:12.520
Why differentiate that numeric
values come before strings?

00:02:12.520 --> 00:02:15.270
The Firebase database is
extremely flexible as to what

00:02:15.270 --> 00:02:16.360
type of data it contains.

00:02:17.590 --> 00:02:21.483
For example, there's nothing to say that
you can have a list of desserts all with

00:02:21.483 --> 00:02:25.032
a child sweetener where some of the
desserts have a sweetener value that is

00:02:25.032 --> 00:02:29.150
a number, others that have a boolean,
and still others have a string.

00:02:29.150 --> 00:02:32.400
It would be odd, but at least
you'd know how it would be sorted.

00:02:33.480 --> 00:02:37.540
For orderByKey(),
data is sorted in ascending order.

00:02:37.540 --> 00:02:40.810
With keys, they can be sorted
as 32-bit integers first,

00:02:40.810 --> 00:02:43.490
then keys with a string
value coming next.

00:02:43.490 --> 00:02:47.290
And, as you might expect,
when you use orderByPriority,

00:02:47.290 --> 00:02:51.730
the sort order is primarily
determined by the priority in key.

00:02:51.730 --> 00:02:54.940
One point to note when you're
implementing sorts is that queries can

00:02:54.940 --> 00:02:57.360
only order by one key at a time.

00:02:57.360 --> 00:03:00.870
For example,
if you are calling orderByChild

00:03:00.870 --> 00:03:04.390
multiple times on the same query,
an error will be thrown.

00:03:04.390 --> 00:03:08.740
This is to keep Firebase operation
snappy and get you the data fast.

00:03:08.740 --> 00:03:12.590
Now, you might be wondering, what
happens if I need to sort by two things?

00:03:12.590 --> 00:03:16.030
Since Firebase doesn't support this yet,
the best way to handle this

00:03:16.030 --> 00:03:19.760
is to use sorting to do
the first level of the sort and

00:03:19.760 --> 00:03:23.820
then sort the data client-side
with your own Android code.

00:03:23.820 --> 00:03:26.910
You should also consider sorting
client-side if you already

00:03:26.910 --> 00:03:30.540
have the data available to you, because
this will save you a query call to

00:03:30.540 --> 00:03:34.630
the Firebase database, which will save
your users money on their data plans and

00:03:34.630 --> 00:03:37.430
keep your database from
getting pinged as much.

00:03:37.430 --> 00:03:41.230
You won't be implementing client-side
sorting in this version of the app, but

00:03:41.230 --> 00:03:42.940
it's an option you should be aware of.

