WEBVTT
Kind: captions
Language: en

00:00:03.370 --> 00:00:06.099
many apps work with large sets of data

00:00:06.099 --> 00:00:06.109
many apps work with large sets of data
 

00:00:06.109 --> 00:00:08.320
many apps work with large sets of data
but only need to load and display a

00:00:08.320 --> 00:00:08.330
but only need to load and display a
 

00:00:08.330 --> 00:00:11.080
but only need to load and display a
small portion at any given time if

00:00:11.080 --> 00:00:11.090
small portion at any given time if
 

00:00:11.090 --> 00:00:12.580
small portion at any given time if
you're not careful you might request

00:00:12.580 --> 00:00:12.590
you're not careful you might request
 

00:00:12.590 --> 00:00:14.920
you're not careful you might request
data you don't actually need wasting

00:00:14.920 --> 00:00:14.930
data you don't actually need wasting
 

00:00:14.930 --> 00:00:17.590
data you don't actually need wasting
your users battery and bandwidth if the

00:00:17.590 --> 00:00:17.600
your users battery and bandwidth if the
 

00:00:17.600 --> 00:00:19.150
your users battery and bandwidth if the
data you're displaying is constantly

00:00:19.150 --> 00:00:19.160
data you're displaying is constantly
 

00:00:19.160 --> 00:00:21.130
data you're displaying is constantly
updating it can be difficult to keep

00:00:21.130 --> 00:00:21.140
updating it can be difficult to keep
 

00:00:21.140 --> 00:00:23.410
updating it can be difficult to keep
your UI in sync and still send only a

00:00:23.410 --> 00:00:23.420
your UI in sync and still send only a
 

00:00:23.420 --> 00:00:25.300
your UI in sync and still send only a
small amount of information over the

00:00:25.300 --> 00:00:25.310
small amount of information over the
 

00:00:25.310 --> 00:00:27.940
small amount of information over the
network the paging library part of just

00:00:27.940 --> 00:00:27.950
network the paging library part of just
 

00:00:27.950 --> 00:00:30.190
network the paging library part of just
packed tackles these problems enabling

00:00:30.190 --> 00:00:30.200
packed tackles these problems enabling
 

00:00:30.200 --> 00:00:31.630
packed tackles these problems enabling
you to load data gradually and

00:00:31.630 --> 00:00:31.640
you to load data gradually and
 

00:00:31.640 --> 00:00:34.299
you to load data gradually and
gracefully the library supports both

00:00:34.299 --> 00:00:34.309
gracefully the library supports both
 

00:00:34.309 --> 00:00:37.510
gracefully the library supports both
large but bounded lists as well as lists

00:00:37.510 --> 00:00:37.520
large but bounded lists as well as lists
 

00:00:37.520 --> 00:00:40.030
large but bounded lists as well as lists
of unbounded sites such as continuously

00:00:40.030 --> 00:00:40.040
of unbounded sites such as continuously
 

00:00:40.040 --> 00:00:43.000
of unbounded sites such as continuously
updating feeds it offers integration

00:00:43.000 --> 00:00:43.010
updating feeds it offers integration
 

00:00:43.010 --> 00:00:44.830
updating feeds it offers integration
with recyclerview which is typically

00:00:44.830 --> 00:00:44.840
with recyclerview which is typically
 

00:00:44.840 --> 00:00:46.780
with recyclerview which is typically
used to display large data sets and

00:00:46.780 --> 00:00:46.790
used to display large data sets and
 

00:00:46.790 --> 00:00:49.450
used to display large data sets and
place nicely with either live data or rx

00:00:49.450 --> 00:00:49.460
place nicely with either live data or rx
 

00:00:49.460 --> 00:00:52.290
place nicely with either live data or rx
Java for observing new data in your UI

00:00:52.290 --> 00:00:52.300
Java for observing new data in your UI
 

00:00:52.300 --> 00:00:54.760
Java for observing new data in your UI
the painting library is based on the

00:00:54.760 --> 00:00:54.770
the painting library is based on the
 

00:00:54.770 --> 00:00:56.950
the painting library is based on the
idea of sending lists to the UI with a

00:00:56.950 --> 00:00:56.960
idea of sending lists to the UI with a
 

00:00:56.960 --> 00:00:59.560
idea of sending lists to the UI with a
live data of a list that is observed by

00:00:59.560 --> 00:00:59.570
live data of a list that is observed by
 

00:00:59.570 --> 00:01:01.930
live data of a list that is observed by
the recyclerview adapter it then builds

00:01:01.930 --> 00:01:01.940
the recyclerview adapter it then builds
 

00:01:01.940 --> 00:01:04.420
the recyclerview adapter it then builds
up on this idea by adding paging so you

00:01:04.420 --> 00:01:04.430
up on this idea by adding paging so you
 

00:01:04.430 --> 00:01:07.480
up on this idea by adding paging so you
can load content gradually let's go over

00:01:07.480 --> 00:01:07.490
can load content gradually let's go over
 

00:01:07.490 --> 00:01:09.039
can load content gradually let's go over
the main components of the library and

00:01:09.039 --> 00:01:09.049
the main components of the library and
 

00:01:09.049 --> 00:01:10.779
the main components of the library and
see how they fit in your apps

00:01:10.779 --> 00:01:10.789
see how they fit in your apps
 

00:01:10.789 --> 00:01:14.260
see how they fit in your apps
architecture the core elements in the

00:01:14.260 --> 00:01:14.270
architecture the core elements in the
 

00:01:14.270 --> 00:01:16.809
architecture the core elements in the
paging library are the page list and the

00:01:16.809 --> 00:01:16.819
paging library are the page list and the
 

00:01:16.819 --> 00:01:19.599
paging library are the page list and the
data source a page list is a collection

00:01:19.599 --> 00:01:19.609
data source a page list is a collection
 

00:01:19.609 --> 00:01:22.889
data source a page list is a collection
that loads data in chunks known as pages

00:01:22.889 --> 00:01:22.899
that loads data in chunks known as pages
 

00:01:22.899 --> 00:01:26.319
that loads data in chunks known as pages
asynchronously a data source is the base

00:01:26.319 --> 00:01:26.329
asynchronously a data source is the base
 

00:01:26.329 --> 00:01:29.139
asynchronously a data source is the base
class for loading snapshots of data into

00:01:29.139 --> 00:01:29.149
class for loading snapshots of data into
 

00:01:29.149 --> 00:01:32.109
class for loading snapshots of data into
a given page list data sources can be

00:01:32.109 --> 00:01:32.119
a given page list data sources can be
 

00:01:32.119 --> 00:01:34.480
a given page list data sources can be
backed by the network database file orb

00:01:34.480 --> 00:01:34.490
backed by the network database file orb
 

00:01:34.490 --> 00:01:36.569
backed by the network database file orb
anywhere you want to retrieve data from

00:01:36.569 --> 00:01:36.579
anywhere you want to retrieve data from
 

00:01:36.579 --> 00:01:39.370
anywhere you want to retrieve data from
you create a data source using a data

00:01:39.370 --> 00:01:39.380
you create a data source using a data
 

00:01:39.380 --> 00:01:42.399
you create a data source using a data
source Factory object the paging library

00:01:42.399 --> 00:01:42.409
source Factory object the paging library
 

00:01:42.409 --> 00:01:44.739
source Factory object the paging library
also provides a page list adapter which

00:01:44.739 --> 00:01:44.749
also provides a page list adapter which
 

00:01:44.749 --> 00:01:46.899
also provides a page list adapter which
helps you present data from page lists

00:01:46.899 --> 00:01:46.909
helps you present data from page lists
 

00:01:46.909 --> 00:01:50.199
helps you present data from page lists
in a recycler view the pages adapter is

00:01:50.199 --> 00:01:50.209
in a recycler view the pages adapter is
 

00:01:50.209 --> 00:01:52.239
in a recycler view the pages adapter is
notified when pages are loaded and it

00:01:52.239 --> 00:01:52.249
notified when pages are loaded and it
 

00:01:52.249 --> 00:01:54.459
notified when pages are loaded and it
uses the few tail to compute fine-grain

00:01:54.459 --> 00:01:54.469
uses the few tail to compute fine-grain
 

00:01:54.469 --> 00:01:57.730
uses the few tail to compute fine-grain
updates as new data is received the

00:01:57.730 --> 00:01:57.740
updates as new data is received the
 

00:01:57.740 --> 00:01:59.830
updates as new data is received the
paging library provides the live page

00:01:59.830 --> 00:01:59.840
paging library provides the live page
 

00:01:59.840 --> 00:02:01.989
paging library provides the live page
list builder class for getting a live

00:02:01.989 --> 00:02:01.999
list builder class for getting a live
 

00:02:01.999 --> 00:02:05.499
list builder class for getting a live
data object of type page list to create

00:02:05.499 --> 00:02:05.509
data object of type page list to create
 

00:02:05.509 --> 00:02:08.080
data object of type page list to create
a live pages builder pass in the data

00:02:08.080 --> 00:02:08.090
a live pages builder pass in the data
 

00:02:08.090 --> 00:02:10.389
a live pages builder pass in the data
source Factory object and a paging

00:02:10.389 --> 00:02:10.399
source Factory object and a paging
 

00:02:10.399 --> 00:02:12.700
source Factory object and a paging
configuration if you prefer working with

00:02:12.700 --> 00:02:12.710
configuration if you prefer working with
 

00:02:12.710 --> 00:02:15.220
configuration if you prefer working with
our Java instead of live data then just

00:02:15.220 --> 00:02:15.230
our Java instead of live data then just
 

00:02:15.230 --> 00:02:15.949
our Java instead of live data then just
use the

00:02:15.949 --> 00:02:15.959
use the
 

00:02:15.959 --> 00:02:18.410
use the
page two this builder it's constructed

00:02:18.410 --> 00:02:18.420
page two this builder it's constructed
 

00:02:18.420 --> 00:02:20.990
page two this builder it's constructed
similarly to life page list builder but

00:02:20.990 --> 00:02:21.000
similarly to life page list builder but
 

00:02:21.000 --> 00:02:22.940
similarly to life page list builder but
instead of a live data object it will

00:02:22.940 --> 00:02:22.950
instead of a live data object it will
 

00:02:22.950 --> 00:02:24.830
instead of a live data object it will
return an observable or flowable

00:02:24.830 --> 00:02:24.840
return an observable or flowable
 

00:02:24.840 --> 00:02:27.410
return an observable or flowable
depending on what you need let's take a

00:02:27.410 --> 00:02:27.420
depending on what you need let's take a
 

00:02:27.420 --> 00:02:29.240
depending on what you need let's take a
look at some common scenarios uploading

00:02:29.240 --> 00:02:29.250
look at some common scenarios uploading
 

00:02:29.250 --> 00:02:31.910
look at some common scenarios uploading
data from a database or a retrofit based

00:02:31.910 --> 00:02:31.920
data from a database or a retrofit based
 

00:02:31.920 --> 00:02:33.890
data from a database or a retrofit based
network source and see how the paging

00:02:33.890 --> 00:02:33.900
network source and see how the paging
 

00:02:33.900 --> 00:02:37.309
network source and see how the paging
library helps so first case let's say

00:02:37.309 --> 00:02:37.319
library helps so first case let's say
 

00:02:37.319 --> 00:02:39.319
library helps so first case let's say
that the database is your data source

00:02:39.319 --> 00:02:39.329
that the database is your data source
 

00:02:39.329 --> 00:02:41.720
that the database is your data source
the room persistence library provides

00:02:41.720 --> 00:02:41.730
the room persistence library provides
 

00:02:41.730 --> 00:02:43.910
the room persistence library provides
native support for paging library data

00:02:43.910 --> 00:02:43.920
native support for paging library data
 

00:02:43.920 --> 00:02:46.879
native support for paging library data
sources for a given query room allows

00:02:46.879 --> 00:02:46.889
sources for a given query room allows
 

00:02:46.889 --> 00:02:48.740
sources for a given query room allows
you to return any data source factory

00:02:48.740 --> 00:02:48.750
you to return any data source factory
 

00:02:48.750 --> 00:02:50.780
you to return any data source factory
from the doll and handles the

00:02:50.780 --> 00:02:50.790
from the doll and handles the
 

00:02:50.790 --> 00:02:52.369
from the doll and handles the
implementation of the data source for

00:02:52.369 --> 00:02:52.379
implementation of the data source for
 

00:02:52.379 --> 00:02:55.190
implementation of the data source for
you second case let's say that the

00:02:55.190 --> 00:02:55.200
you second case let's say that the
 

00:02:55.200 --> 00:02:57.830
you second case let's say that the
database is a cache for data loaded from

00:02:57.830 --> 00:02:57.840
database is a cache for data loaded from
 

00:02:57.840 --> 00:03:00.409
database is a cache for data loaded from
network so here you would still return a

00:03:00.409 --> 00:03:00.419
network so here you would still return a
 

00:03:00.419 --> 00:03:02.569
network so here you would still return a
data source factory from the DAO but you

00:03:02.569 --> 00:03:02.579
data source factory from the DAO but you
 

00:03:02.579 --> 00:03:04.069
data source factory from the DAO but you
would also need to implement another

00:03:04.069 --> 00:03:04.079
would also need to implement another
 

00:03:04.079 --> 00:03:06.890
would also need to implement another
paging component a boundary call back

00:03:06.890 --> 00:03:06.900
paging component a boundary call back
 

00:03:06.900 --> 00:03:09.500
paging component a boundary call back
the battery callback loads more data

00:03:09.500 --> 00:03:09.510
the battery callback loads more data
 

00:03:09.510 --> 00:03:11.479
the battery callback loads more data
when the user gets near the end of the

00:03:11.479 --> 00:03:11.489
when the user gets near the end of the
 

00:03:11.489 --> 00:03:14.149
when the user gets near the end of the
data that's in the local cache after the

00:03:14.149 --> 00:03:14.159
data that's in the local cache after the
 

00:03:14.159 --> 00:03:15.920
data that's in the local cache after the
data is asserted the paging library

00:03:15.920 --> 00:03:15.930
data is asserted the paging library
 

00:03:15.930 --> 00:03:18.679
data is asserted the paging library
automatically updates the UI but don't

00:03:18.679 --> 00:03:18.689
automatically updates the UI but don't
 

00:03:18.689 --> 00:03:20.240
automatically updates the UI but don't
forget to associate the boundary call

00:03:20.240 --> 00:03:20.250
forget to associate the boundary call
 

00:03:20.250 --> 00:03:22.159
forget to associate the boundary call
back with a live page this builder you

00:03:22.159 --> 00:03:22.169
back with a live page this builder you
 

00:03:22.169 --> 00:03:24.710
back with a live page this builder you
created earlier that way it can be used

00:03:24.710 --> 00:03:24.720
created earlier that way it can be used
 

00:03:24.720 --> 00:03:28.009
created earlier that way it can be used
by the page list third case having only

00:03:28.009 --> 00:03:28.019
by the page list third case having only
 

00:03:28.019 --> 00:03:30.979
by the page list third case having only
the network as your data source here you

00:03:30.979 --> 00:03:30.989
the network as your data source here you
 

00:03:30.989 --> 00:03:32.330
the network as your data source here you
will have to create both your data

00:03:32.330 --> 00:03:32.340
will have to create both your data
 

00:03:32.340 --> 00:03:35.149
will have to create both your data
source and your data source factory but

00:03:35.149 --> 00:03:35.159
source and your data source factory but
 

00:03:35.159 --> 00:03:37.099
source and your data source factory but
when choosing which data source type to

00:03:37.099 --> 00:03:37.109
when choosing which data source type to
 

00:03:37.109 --> 00:03:39.110
when choosing which data source type to
extend consider what your back-end API

00:03:39.110 --> 00:03:39.120
extend consider what your back-end API
 

00:03:39.120 --> 00:03:41.629
extend consider what your back-end API
looks like if you need to request data

00:03:41.629 --> 00:03:41.639
looks like if you need to request data
 

00:03:41.639 --> 00:03:43.969
looks like if you need to request data
from your back-end based on a key you

00:03:43.969 --> 00:03:43.979
from your back-end based on a key you
 

00:03:43.979 --> 00:03:46.219
from your back-end based on a key you
will extend from item keyed data source

00:03:46.219 --> 00:03:46.229
will extend from item keyed data source
 

00:03:46.229 --> 00:03:48.890
will extend from item keyed data source
let's take an example you might need to

00:03:48.890 --> 00:03:48.900
let's take an example you might need to
 

00:03:48.900 --> 00:03:50.929
let's take an example you might need to
get the first 100 commits added to a

00:03:50.929 --> 00:03:50.939
get the first 100 commits added to a
 

00:03:50.939 --> 00:03:53.379
get the first 100 commits added to a
github repository after a certain date

00:03:53.379 --> 00:03:53.389
github repository after a certain date
 

00:03:53.389 --> 00:03:56.360
github repository after a certain date
then the date will be the key for your

00:03:56.360 --> 00:03:56.370
then the date will be the key for your
 

00:03:56.370 --> 00:03:59.780
then the date will be the key for your
data source item kids data source allows

00:03:59.780 --> 00:03:59.790
data source item kids data source allows
 

00:03:59.790 --> 00:04:01.429
data source item kids data source allows
you to define how to load the initial

00:04:01.429 --> 00:04:01.439
you to define how to load the initial
 

00:04:01.439 --> 00:04:03.559
you to define how to load the initial
page as well as how to load items both

00:04:03.559 --> 00:04:03.569
page as well as how to load items both
 

00:04:03.569 --> 00:04:07.670
page as well as how to load items both
after and before a kid entry if you're

00:04:07.670 --> 00:04:07.680
after and before a kid entry if you're
 

00:04:07.680 --> 00:04:09.439
after and before a kid entry if you're
back and expose is api's that work with

00:04:09.439 --> 00:04:09.449
back and expose is api's that work with
 

00:04:09.449 --> 00:04:12.409
back and expose is api's that work with
pages then you will extend from page key

00:04:12.409 --> 00:04:12.419
pages then you will extend from page key
 

00:04:12.419 --> 00:04:15.499
pages then you will extend from page key
to data source for example the search

00:04:15.499 --> 00:04:15.509
to data source for example the search
 

00:04:15.509 --> 00:04:17.210
to data source for example the search
repositories github API returns

00:04:17.210 --> 00:04:17.220
repositories github API returns
 

00:04:17.220 --> 00:04:20.060
repositories github API returns
paginated items in the github API

00:04:20.060 --> 00:04:20.070
paginated items in the github API
 

00:04:20.070 --> 00:04:21.890
paginated items in the github API
request you need to specify the query

00:04:21.890 --> 00:04:21.900
request you need to specify the query
 

00:04:21.900 --> 00:04:24.050
request you need to specify the query
which page you want and optionally the

00:04:24.050 --> 00:04:24.060
which page you want and optionally the
 

00:04:24.060 --> 00:04:26.790
which page you want and optionally the
number of items per page

00:04:26.790 --> 00:04:26.800
number of items per page
 

00:04:26.800 --> 00:04:28.390
number of items per page
independent on how you create your

00:04:28.390 --> 00:04:28.400
independent on how you create your
 

00:04:28.400 --> 00:04:30.430
independent on how you create your
network data source you will need to

00:04:30.430 --> 00:04:30.440
network data source you will need to
 

00:04:30.440 --> 00:04:32.589
network data source you will need to
implement a data source factory that

00:04:32.589 --> 00:04:32.599
implement a data source factory that
 

00:04:32.599 --> 00:04:34.990
implement a data source factory that
knows how to create your data source for

00:04:34.990 --> 00:04:35.000
knows how to create your data source for
 

00:04:35.000 --> 00:04:36.850
knows how to create your data source for
full examples of how to implement all of

00:04:36.850 --> 00:04:36.860
full examples of how to implement all of
 

00:04:36.860 --> 00:04:38.770
full examples of how to implement all of
these cases including how to handle

00:04:38.770 --> 00:04:38.780
these cases including how to handle
 

00:04:38.780 --> 00:04:41.469
these cases including how to handle
error cases or return mechanisms check

00:04:41.469 --> 00:04:41.479
error cases or return mechanisms check
 

00:04:41.479 --> 00:04:44.469
error cases or return mechanisms check
out our samples on github okay let's sum

00:04:44.469 --> 00:04:44.479
out our samples on github okay let's sum
 

00:04:44.479 --> 00:04:46.510
out our samples on github okay let's sum
it up here's what you'll need to do to

00:04:46.510 --> 00:04:46.520
it up here's what you'll need to do to
 

00:04:46.520 --> 00:04:48.430
it up here's what you'll need to do to
integrate paging you'll need to define

00:04:48.430 --> 00:04:48.440
integrate paging you'll need to define
 

00:04:48.440 --> 00:04:50.710
integrate paging you'll need to define
your data source create a boundary call

00:04:50.710 --> 00:04:50.720
your data source create a boundary call
 

00:04:50.720 --> 00:04:52.930
your data source create a boundary call
back if it's needed create the live data

00:04:52.930 --> 00:04:52.940
back if it's needed create the live data
 

00:04:52.940 --> 00:04:55.089
back if it's needed create the live data
of a page this with the help of a live

00:04:55.089 --> 00:04:55.099
of a page this with the help of a live
 

00:04:55.099 --> 00:04:58.119
of a page this with the help of a live
page list filter update your adapter to

00:04:58.119 --> 00:04:58.129
page list filter update your adapter to
 

00:04:58.129 --> 00:05:00.070
page list filter update your adapter to
be a page this adapter and then finally

00:05:00.070 --> 00:05:00.080
be a page this adapter and then finally
 

00:05:00.080 --> 00:05:02.409
be a page this adapter and then finally
observe the live data of a page list in

00:05:02.409 --> 00:05:02.419
observe the live data of a page list in
 

00:05:02.419 --> 00:05:04.330
observe the live data of a page list in
your UI and set the page list to the

00:05:04.330 --> 00:05:04.340
your UI and set the page list to the
 

00:05:04.340 --> 00:05:07.990
your UI and set the page list to the
adapter that's it just five steps check

00:05:07.990 --> 00:05:08.000
adapter that's it just five steps check
 

00:05:08.000 --> 00:05:09.969
adapter that's it just five steps check
out our documentation code samples and

00:05:09.969 --> 00:05:09.979
out our documentation code samples and
 

00:05:09.979 --> 00:05:12.070
out our documentation code samples and
call up and start using the paging

00:05:12.070 --> 00:05:12.080
call up and start using the paging
 

00:05:12.080 --> 00:05:14.020
call up and start using the paging
library to provide smooth performing

00:05:14.020 --> 00:05:14.030
library to provide smooth performing
 

00:05:14.030 --> 00:05:15.150
library to provide smooth performing
lists for your users

00:05:15.150 --> 00:05:15.160
lists for your users
 

00:05:15.160 --> 00:05:18.279
lists for your users
[Applause]

