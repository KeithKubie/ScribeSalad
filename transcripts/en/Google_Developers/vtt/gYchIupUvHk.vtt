WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:01:27.969
[MUSIC PLAYING]

00:01:38.100 --> 00:01:39.250
JOSH LIVNI: Hi, everybody.

00:01:39.250 --> 00:01:40.320
My name is Josh Livni.

00:01:40.320 --> 00:01:44.640
I have Paul Saxman here with me
at our Google Maps garage.

00:01:44.640 --> 00:01:47.140
Today, we have a couple
interesting topics.

00:01:47.140 --> 00:01:49.560
We're going to be talking about
bringing vector data

00:01:49.560 --> 00:01:52.250
into the Google Maps API,
and then making

00:01:52.250 --> 00:01:53.480
it look really great.

00:01:53.480 --> 00:01:55.620
Paul will be doing the
looking great part.

00:01:55.620 --> 00:01:57.690
So before we get started, I
wanted to have a couple

00:01:57.690 --> 00:01:59.040
announcements.

00:01:59.040 --> 00:02:03.150
Here on my screen, you can see
that we have our Tracks API--

00:02:03.150 --> 00:02:04.880
the Google Maps Tracks API.

00:02:04.880 --> 00:02:06.200
It's a pretty cool API.

00:02:06.200 --> 00:02:07.890
Over in the left-hand panel,
you can get an idea.

00:02:07.890 --> 00:02:11.680
It does nice things like
geofences, and basically lets

00:02:11.680 --> 00:02:13.550
you track assets of any kind.

00:02:13.550 --> 00:02:16.550
So if you have moving objects,
you want to be able to see

00:02:16.550 --> 00:02:18.850
where they're going, do some
sort of things like snap them

00:02:18.850 --> 00:02:20.480
to road automatically.

00:02:20.480 --> 00:02:23.840
It's a cool API to check out,
and an announcement is that we

00:02:23.840 --> 00:02:27.140
have 23 assets that
you can track.

00:02:27.140 --> 00:02:29.570
So if you want to get started,
just sign up, and you can

00:02:29.570 --> 00:02:33.150
track up to 20 objects moving
around for free.

00:02:33.150 --> 00:02:35.250
So that's a pretty cool API.

00:02:35.250 --> 00:02:37.030
Second announcement
of the day--

00:02:37.030 --> 00:02:39.750
some upcoming changes to the
way we're sending out the

00:02:39.750 --> 00:02:44.090
versions of the Maps
v3 JavaScript API.

00:02:44.090 --> 00:02:47.040
So starting in about a week,
we're going to change the

00:02:47.040 --> 00:02:50.640
default such that if you don't
specify a version, which you

00:02:50.640 --> 00:02:53.690
can always do-- if you want the,
for example, experimental

00:02:53.690 --> 00:02:58.050
version versus stable version,
the release version.

00:02:58.050 --> 00:03:00.600
Previously, by default, you got
the release version, and

00:03:00.600 --> 00:03:03.610
in the future, by default, if
you don't specify, you'll get

00:03:03.610 --> 00:03:05.620
the experimental version--

00:03:05.620 --> 00:03:07.830
unless you're a Maps for
Business customer, and with

00:03:07.830 --> 00:03:09.770
your client ID, in which
case, you'll still

00:03:09.770 --> 00:03:11.600
get the release version.

00:03:11.600 --> 00:03:16.310
So check out the Google Maps API
v3 Notify group for more

00:03:16.310 --> 00:03:17.590
info there.

00:03:17.590 --> 00:03:18.860
PAUL SAXMAN: And just a couple
quick notes on the version.

00:03:18.860 --> 00:03:21.450
So the versions, we
always have three.

00:03:21.450 --> 00:03:23.640
We have a frozen version, the
release version, and the

00:03:23.640 --> 00:03:25.000
experimental.

00:03:25.000 --> 00:03:26.670
So you can pick any one
of those three.

00:03:26.670 --> 00:03:31.930
And if you do V equals 3, I
think you get the release

00:03:31.930 --> 00:03:32.620
version, right?

00:03:32.620 --> 00:03:32.940
JOSH LIVNI: Correct.

00:03:32.940 --> 00:03:35.180
PAUL SAXMAN: So if you still
want to keep the release

00:03:35.180 --> 00:03:38.550
version, when you actually load
the JS library, specify V

00:03:38.550 --> 00:03:40.880
equals 3, and everything
will work exactly

00:03:40.880 --> 00:03:42.680
the way it does now.

00:03:42.680 --> 00:03:45.380
But if you don't specify, which
I usually don't, because

00:03:45.380 --> 00:03:49.630
I just like to rely on the
JavaScript library to do the

00:03:49.630 --> 00:03:52.840
work for me, you'll actually
switch over to experimental,

00:03:52.840 --> 00:03:54.800
which is probably a good
thing, because--

00:03:54.800 --> 00:03:55.170
JOSH LIVNI: Yep.

00:03:55.170 --> 00:03:57.977
You get the bleeding edge
features, and you can play

00:03:57.977 --> 00:03:59.380
around with the new stuff.

00:03:59.380 --> 00:04:00.670
PAUL SAXMAN: Very cool.

00:04:00.670 --> 00:04:01.380
JOSH LIVNI: OK, cool.

00:04:01.380 --> 00:04:02.450
That's our announcements.

00:04:02.450 --> 00:04:06.850
And today's topic is Let's Make
a Map, except for the

00:04:06.850 --> 00:04:08.030
Google Maps API.

00:04:08.030 --> 00:04:10.220
This is a really cool blog
post by this guy, Mike

00:04:10.220 --> 00:04:14.000
Bostock, who amongst many other
things that he's done,

00:04:14.000 --> 00:04:17.060
which are amazing, wrote
a library called D3.

00:04:17.060 --> 00:04:21.260
Very nice SVG graphics library
being used increasingly around

00:04:21.260 --> 00:04:23.345
the web to make cool looking
things, including maps.

00:04:23.345 --> 00:04:25.660
It has a very nice
geo extension.

00:04:25.660 --> 00:04:28.910
And in addition to that, he
came up with this kind of

00:04:28.910 --> 00:04:33.320
specification called TopoJSON,
which we'll talk about a

00:04:33.320 --> 00:04:34.300
little bit more.

00:04:34.300 --> 00:04:36.960
But basically, it's a great way
to kind of compress vector

00:04:36.960 --> 00:04:41.200
data and bring it into
a map of your choice.

00:04:41.200 --> 00:04:44.235
So this blog post that he wrote
a couple months ago, he

00:04:44.235 --> 00:04:46.980
kind of walks you through the
steps of how you might do it--

00:04:46.980 --> 00:04:49.160
find some data, convert the
data to the appropriate

00:04:49.160 --> 00:04:52.750
formats, such as GeoJSON, and
from there to TopoJSON.

00:04:52.750 --> 00:04:55.460
And part of that is installing
some software

00:04:55.460 --> 00:04:56.840
tools on your computer.

00:04:56.840 --> 00:04:59.020
And it's a really great step
by step walkthrough that I

00:04:59.020 --> 00:05:00.900
recommend you guys
read if you want.

00:05:00.900 --> 00:05:03.260
What we're going to do today
is show you a couple tools

00:05:03.260 --> 00:05:05.790
that makes it even easier to
get through some of these

00:05:05.790 --> 00:05:09.290
steps without installing your
own software, and talk a

00:05:09.290 --> 00:05:12.030
little bit about the different
kinds of formats that we have

00:05:12.030 --> 00:05:15.600
when we're working with geo
data, and how you want to get

00:05:15.600 --> 00:05:17.790
this data from around the web.

00:05:17.790 --> 00:05:20.900
So just to introduce a couple of
terms, there's this format

00:05:20.900 --> 00:05:23.140
called GeoJSON.

00:05:23.140 --> 00:05:27.200
And it's basically just a way
of storing vector data and

00:05:27.200 --> 00:05:29.700
sending it around the web,
if you feel so inclined.

00:05:29.700 --> 00:05:31.620
It's a legitimate
specification--

00:05:31.620 --> 00:05:33.140
lots of smart people
worked on it.

00:05:33.140 --> 00:05:36.020
It's used by lots of different
services around the web,

00:05:36.020 --> 00:05:39.500
including some of our own, like
Maps Engine, for example,

00:05:39.500 --> 00:05:45.070
will use GeoJSON in its API, if
you make a request to that.

00:05:45.070 --> 00:05:47.910
Fusion Tables similarly gives
you GeoJSON output.

00:05:47.910 --> 00:05:50.940
And so it's a very nice
interoperable way to send

00:05:50.940 --> 00:05:52.370
things around.

00:05:52.370 --> 00:05:54.260
PAUL SAXMAN: So geometry is--
a really nice thing about it

00:05:54.260 --> 00:05:57.430
is you can also put feature
information as well, right?

00:05:57.430 --> 00:06:01.230
So the geometries are things
like your polygons, polylines,

00:06:01.230 --> 00:06:02.600
and points on the map.

00:06:02.600 --> 00:06:07.320
And then also the feature data
is stuff like population,

00:06:07.320 --> 00:06:09.010
length of roads, names
of countries.

00:06:09.010 --> 00:06:10.150
JOSH LIVNI: All of
the attributes.

00:06:10.150 --> 00:06:10.610
PAUL SAXMAN: Exactly.

00:06:10.610 --> 00:06:11.990
JOSH LIVNI: Yeah, exactly.

00:06:11.990 --> 00:06:12.660
So good point.

00:06:12.660 --> 00:06:14.510
We have what we call a feature,
and a feature is a

00:06:14.510 --> 00:06:19.140
combination of the geometry and
the associated attributes.

00:06:19.140 --> 00:06:24.470
So anyway, that's a way that
you might see spatial data

00:06:24.470 --> 00:06:25.770
sort of transferred
around the web.

00:06:25.770 --> 00:06:27.520
But you don't see a lot
of it stored on the

00:06:27.520 --> 00:06:29.660
web in GeoJSON format.

00:06:29.660 --> 00:06:32.460
This new format I'm mentioning,
TopoJSON, is

00:06:32.460 --> 00:06:33.470
pretty cool.

00:06:33.470 --> 00:06:37.090
And it has some topology built
into it, which lets you do all

00:06:37.090 --> 00:06:39.230
kinds of stuff that I'm not
going to go into today.

00:06:39.230 --> 00:06:40.730
But it's nice.

00:06:40.730 --> 00:06:44.980
And it also allows you a little
bit smaller file size

00:06:44.980 --> 00:06:48.730
by generalizing the features,
sort of losing some of the

00:06:48.730 --> 00:06:52.330
accuracy of the geometries, and
it's up to you how you set

00:06:52.330 --> 00:06:55.170
how much accuracy you want for
your needs with the map.

00:06:55.170 --> 00:06:58.330
But you often end up with an
easy way to send a smaller

00:06:58.330 --> 00:06:59.770
file size around.

00:06:59.770 --> 00:07:02.030
PAUL SAXMAN: And it can be a
little or a lot smaller.

00:07:02.030 --> 00:07:04.110
Sometimes I've seen, if you get
rid of all of the feature

00:07:04.110 --> 00:07:07.140
data and just go with the
geometry data, like maybe 10%

00:07:07.140 --> 00:07:09.380
of the file size
of the GeoJSON.

00:07:09.380 --> 00:07:11.780
But it really depends on the
file, the complexity of the

00:07:11.780 --> 00:07:13.700
data you're dealing with.

00:07:13.700 --> 00:07:16.990
But it does things like
compresses, so shared borders

00:07:16.990 --> 00:07:20.360
on polygons get compressed into
just one line, and that

00:07:20.360 --> 00:07:20.860
type of thing.

00:07:20.860 --> 00:07:24.110
So it's a very nice
compact format.

00:07:24.110 --> 00:07:24.840
JOSH LIVNI: Indeed, yeah.

00:07:24.840 --> 00:07:27.290
So I definitely recommend
you guys read the

00:07:27.290 --> 00:07:29.500
wiki page on TopoJSON.

00:07:29.500 --> 00:07:32.760
It's licensed, I think, under
a BSD license, and

00:07:32.760 --> 00:07:34.550
everything's available
on GitHub.

00:07:34.550 --> 00:07:36.900
And there's great documentation
and so forth.

00:07:36.900 --> 00:07:39.820
So next thing I just want
to talk briefly

00:07:39.820 --> 00:07:42.680
about is the shapefile.

00:07:42.680 --> 00:07:45.500
This is a very common format
that you find when you're

00:07:45.500 --> 00:07:47.380
actually looking for spatial
data around the web.

00:07:47.380 --> 00:07:49.580
If you're like, oh, where do I
get zip codes, or where do I

00:07:49.580 --> 00:07:52.440
get partial boundaries for some
city, or whatever it is,

00:07:52.440 --> 00:07:56.270
it often comes in a shapefile,
which is--

00:07:56.270 --> 00:07:58.050
it's been around a while,
that format.

00:07:58.050 --> 00:08:00.100
And it's a confusing name.

00:08:00.100 --> 00:08:04.280
So here I am at the West
Sacramento GIS download site.

00:08:04.280 --> 00:08:06.990
And you can see that in the
description here, we have some

00:08:06.990 --> 00:08:08.520
polygons for the city limits.

00:08:08.520 --> 00:08:10.260
I'm going to go ahead and
download the Schools

00:08:10.260 --> 00:08:16.450
shapefile, which has
both polygons and

00:08:16.450 --> 00:08:17.520
points in the shapefile.

00:08:17.520 --> 00:08:19.080
Which is kind of an interesting
thing because

00:08:19.080 --> 00:08:23.610
shapefiles, unless you have a
multi-geometry, don't support

00:08:23.610 --> 00:08:25.840
different types of geometries
in the same thing.

00:08:25.840 --> 00:08:29.500
I'm going to go ahead and
open up this shapefile.

00:08:29.500 --> 00:08:31.450
And you'll see inside this
shapefile, there's actually

00:08:31.450 --> 00:08:32.909
like 10, 15 files.

00:08:32.909 --> 00:08:33.830
Kind of confusing.

00:08:33.830 --> 00:08:36.289
A shapefile is made up from
anywhere between, say, three

00:08:36.289 --> 00:08:38.010
and six files.

00:08:38.010 --> 00:08:39.610
Some of them you care about
more than others.

00:08:39.610 --> 00:08:43.770
Some are some metadata talking
about projections, and maybe

00:08:43.770 --> 00:08:45.940
other types of metadata about
the file, some are the

00:08:45.940 --> 00:08:47.860
geometries, some are
the attributes.

00:08:47.860 --> 00:08:50.820
This particular zipped archive,
you'll see there's

00:08:50.820 --> 00:08:52.240
actually two shapefiles--

00:08:52.240 --> 00:08:55.550
a point shapefile, and then
this polygon set of

00:08:55.550 --> 00:08:57.250
shapefiles, and they're
all zipped

00:08:57.250 --> 00:08:59.070
into this one shapefile.

00:08:59.070 --> 00:09:00.290
So how do we get
this on a map?

00:09:00.290 --> 00:09:01.540
That's kind of the
topic of the day.

00:09:01.540 --> 00:09:04.260
You come across this, you want
to get the school boundaries

00:09:04.260 --> 00:09:05.290
and points on a map.

00:09:05.290 --> 00:09:06.450
How do you do it?

00:09:06.450 --> 00:09:08.460
So you could follow that
article we previously

00:09:08.460 --> 00:09:09.760
mentioned on how
to make a map.

00:09:09.760 --> 00:09:11.540
It will walk you through it.

00:09:11.540 --> 00:09:15.660
What we have here is a tool I
put together about a year or

00:09:15.660 --> 00:09:18.120
two ago that takes
shapefiles--

00:09:18.120 --> 00:09:19.350
it's called Shape Escape--

00:09:19.350 --> 00:09:20.570
and converts them.

00:09:20.570 --> 00:09:23.510
Previously uploads them to
Fusion tables, and now I've

00:09:23.510 --> 00:09:25.590
added a feature that
converts them into

00:09:25.590 --> 00:09:27.450
either GeoJSON or TopoJSON.

00:09:27.450 --> 00:09:28.480
So let's walk through it here.

00:09:28.480 --> 00:09:29.795
You go to Shape Escape--
shpescape.com--

00:09:32.480 --> 00:09:37.000
click on the GeoJSON to TopoJSON
conversion, wait a

00:09:37.000 --> 00:09:38.410
little while.

00:09:38.410 --> 00:09:40.150
Beautiful UI here.

00:09:40.150 --> 00:09:40.905
Select your file.

00:09:40.905 --> 00:09:44.110
We'll go ahead and select the
zip file we just downloaded.

00:09:44.110 --> 00:09:47.920
I'll hit Upload.

00:09:47.920 --> 00:09:50.530
Wait a little while for it to
upload, parse, convert into

00:09:50.530 --> 00:09:51.470
their various formats.

00:09:51.470 --> 00:09:54.800
And you'll see on the left here,
in the panel, we have

00:09:54.800 --> 00:09:56.970
three files that came
out as a result.

00:09:56.970 --> 00:10:00.970
We have the polygon features,
which I can download in

00:10:00.970 --> 00:10:02.110
GeoJSON format.

00:10:02.110 --> 00:10:03.720
The point features, which I can

00:10:03.720 --> 00:10:05.900
download in GeoJSON format.

00:10:05.900 --> 00:10:08.990
And the TopoJSON, which is the
combination of these two

00:10:08.990 --> 00:10:11.180
together in one single
TopoJSON file,

00:10:11.180 --> 00:10:12.450
which is kind of cool.

00:10:12.450 --> 00:10:15.040
It makes it easy to merge lots
of different data sets.

00:10:15.040 --> 00:10:17.370
So if you had states and
counties, you could put them

00:10:17.370 --> 00:10:19.740
in one zip file, upload it to
this tool, and get a single

00:10:19.740 --> 00:10:22.390
TopoJSON out with all the
borders shared appropriately,

00:10:22.390 --> 00:10:23.400
and so forth.

00:10:23.400 --> 00:10:26.070
And then I can go ahead and
display one of these.

00:10:26.070 --> 00:10:28.630
And you can see that in this
particular case, it zooms at

00:10:28.630 --> 00:10:31.070
Sacramento, and you can see the
polygons and the points.

00:10:31.070 --> 00:10:33.980
So this is just a really easy
way, given a shapefile, that

00:10:33.980 --> 00:10:35.910
you can get it into Maps API.

00:10:35.910 --> 00:10:38.170
I'm not going to go too much
into the code behind this.

00:10:38.170 --> 00:10:39.540
It's open source.

00:10:39.540 --> 00:10:41.530
You can download the code,
that's what does the

00:10:41.530 --> 00:10:43.180
conversion and so forth.

00:10:43.180 --> 00:10:45.290
If you want, you can go
ahead and view source.

00:10:45.290 --> 00:10:48.980
Always a great idea to look at
how I displayed it on a map.

00:10:48.980 --> 00:10:51.590
I'll just very briefly walk
through how I made the map.

00:10:51.590 --> 00:10:53.910
First, of course, I styled
the map to make it a nice

00:10:53.910 --> 00:10:56.360
grayscale, so the base
map doesn't take

00:10:56.360 --> 00:10:57.580
away from my data.

00:10:57.580 --> 00:10:58.480
PAUL SAXMAN: Zoom in.

00:10:58.480 --> 00:10:58.900
JOSH LIVNI: Ah, yes.

00:10:58.900 --> 00:10:59.700
Zoom in.

00:10:59.700 --> 00:11:02.100
Thank you.

00:11:02.100 --> 00:11:05.160
I initialize my map, and then
I just have a couple real

00:11:05.160 --> 00:11:07.770
simple methods to display the
TopoJSON, and that's actually

00:11:07.770 --> 00:11:10.380
the entire thing right there,
these three methods.

00:11:10.380 --> 00:11:12.480
So it's about probably
30 lines of code to

00:11:12.480 --> 00:11:13.710
do that whole business.

00:11:13.710 --> 00:11:16.570
And the reason that it's so
quick is I am able to take

00:11:16.570 --> 00:11:19.370
advantage of this
other library--

00:11:19.370 --> 00:11:21.890
the GeoJSON to Google
Maps library.

00:11:21.890 --> 00:11:23.720
I just want to give a shout
out to Jason Sanford, who

00:11:23.720 --> 00:11:26.370
wrote this other cool library
that makes it super easy,

00:11:26.370 --> 00:11:29.440
given a GeoJSON file, to display
it into Google Maps.

00:11:29.440 --> 00:11:32.110
So that's the final piece
of the puzzle.

00:11:32.110 --> 00:11:35.370
We have shapefiles, convert them
to GeoJSON, convert them

00:11:35.370 --> 00:11:38.490
to TopoJSON, bring them into
Maps API using this great

00:11:38.490 --> 00:11:42.160
library, and if you use Shape
Escape, in 15 seconds, you

00:11:42.160 --> 00:11:45.350
have your shapefile on a map.

00:11:45.350 --> 00:11:47.970
On the other hand, the map does
not look super beautiful.

00:11:47.970 --> 00:11:49.520
I mean, it's fine.

00:11:49.520 --> 00:11:53.190
So Paul is going to show
us how to remedy that.

00:11:53.190 --> 00:11:53.850
PAUL SAXMAN: Yeah.

00:11:53.850 --> 00:11:56.560
So what I can do is just show
a couple examples of why you

00:11:56.560 --> 00:12:02.440
might want to pull shapefiles
into a map, and how you can

00:12:02.440 --> 00:12:04.300
actually style it and make it--
what you can do with it,

00:12:04.300 --> 00:12:04.940
essentially.

00:12:04.940 --> 00:12:08.350
So what I did here--

00:12:08.350 --> 00:12:10.960
so I actually went to
Natural Earth data.

00:12:10.960 --> 00:12:13.580
We've talked about Natural Earth
data quite a bit before.

00:12:13.580 --> 00:12:16.150
They have a lot of real
great geometry data.

00:12:16.150 --> 00:12:17.820
And then they also actually
pack in a bunch of feature

00:12:17.820 --> 00:12:19.370
data as well.

00:12:19.370 --> 00:12:24.820
So, for example, in their
populated places dataset, they

00:12:24.820 --> 00:12:27.180
include all the information
about populated places.

00:12:27.180 --> 00:12:30.270
These are cities or metropolitan
areas.

00:12:30.270 --> 00:12:34.970
But they also contain things
like population, area, that

00:12:34.970 --> 00:12:35.470
type of thing.

00:12:35.470 --> 00:12:39.410
So if you have that data, you
can actually pull the places

00:12:39.410 --> 00:12:43.750
into your map, but then also do
things like do some actual

00:12:43.750 --> 00:12:45.860
data analysis using your map.

00:12:45.860 --> 00:12:47.520
So what I did here--

00:12:47.520 --> 00:12:49.380
this is actually just a map.

00:12:49.380 --> 00:12:51.910
So I followed the technique that
Josh mentioned before.

00:12:51.910 --> 00:12:54.610
I went to the Natural Earth
data website, I downloaded

00:12:54.610 --> 00:12:56.700
their populated places
dataset for the--

00:12:56.700 --> 00:13:01.450
I think this is the 110
million dataset.

00:13:01.450 --> 00:13:06.430
Loaded it into Shape Escape, got
the TopoJSON file out, and

00:13:06.430 --> 00:13:08.080
then just started coding
things up.

00:13:08.080 --> 00:13:12.180
So I was re-importing the
TopoJSON into my map, and

00:13:12.180 --> 00:13:16.950
converting it to an object using
the TopoJSON library,

00:13:16.950 --> 00:13:19.720
using the GeoJSON library
to get the polygons out.

00:13:19.720 --> 00:13:21.960
It sounds like a lot of work,
but it's literally two lines

00:13:21.960 --> 00:13:26.490
of code to go from your file to
the TopoJSON, or the object

00:13:26.490 --> 00:13:29.490
format using the TopoJSON
library, and then another line

00:13:29.490 --> 00:13:36.820
of code to go from the objects
to polygons, or to geometry

00:13:36.820 --> 00:13:39.200
data that you can put
into Google Map.

00:13:39.200 --> 00:13:42.150
So yeah, pretty much what I did
is I just took that data,

00:13:42.150 --> 00:13:46.160
I sorted based on the
population, and plotted the

00:13:46.160 --> 00:13:47.530
top 100 on a map.

00:13:47.530 --> 00:13:50.350
I also did, obviously,
some map styling.

00:13:50.350 --> 00:13:52.860
A couple other things that I
added in here real quick--

00:13:52.860 --> 00:13:54.100
and I'll show you the
code in a moment.

00:13:54.100 --> 00:13:56.460
But I did things like
info windows.

00:13:56.460 --> 00:13:59.280
So you can pretty easily, since
these are Google Maps

00:13:59.280 --> 00:14:02.890
geometry objects, adding info
windows on top of them is

00:14:02.890 --> 00:14:04.310
really easy.

00:14:04.310 --> 00:14:09.750
Also, I should note that
these are actually not

00:14:09.750 --> 00:14:10.630
just standard markers.

00:14:10.630 --> 00:14:13.180
So these are actually
our vector markers--

00:14:13.180 --> 00:14:14.630
our symbols.

00:14:14.630 --> 00:14:16.550
So that's how I'm able
to kind of scale

00:14:16.550 --> 00:14:18.540
them relatively easily.

00:14:18.540 --> 00:14:20.050
And the other thing
about this--

00:14:20.050 --> 00:14:22.340
I scaled them based on the--

00:14:22.340 --> 00:14:28.170
so the areas are equivalent
to the population.

00:14:28.170 --> 00:14:33.500
So you can see pretty quickly on
this map, actually see the

00:14:33.500 --> 00:14:35.580
most populated places around
the world, where they're

00:14:35.580 --> 00:14:37.600
centered, that type of thing.

00:14:37.600 --> 00:14:41.430
So this is, literally, like I
said, it's maybe like 80 lines

00:14:41.430 --> 00:14:44.080
of code total to get all this
data in and actually get it

00:14:44.080 --> 00:14:45.790
styled the way I like it.

00:14:45.790 --> 00:14:46.700
We can take a look.

00:14:46.700 --> 00:14:50.430
And actually, a big chunk of
that is the map styling code.

00:14:50.430 --> 00:14:54.150
So this is the city's
.html file.

00:14:54.150 --> 00:14:56.240
So literally, it's just actually
loading all the

00:14:56.240 --> 00:14:59.360
scripts, all the relevant
information, and then setting

00:14:59.360 --> 00:15:01.300
up my map canvas.

00:15:01.300 --> 00:15:04.580
And so really, the code, or the
stuff that really matters,

00:15:04.580 --> 00:15:07.080
is in the JS file.

00:15:07.080 --> 00:15:11.250
So just to run through it real
quick, we have the style

00:15:11.250 --> 00:15:12.880
initialization.

00:15:12.880 --> 00:15:17.440
This is how I get the dark
look with the background.

00:15:17.440 --> 00:15:20.390
We've talked about the map
styling quite a bit in other

00:15:20.390 --> 00:15:22.990
shows, so I definitely recommend
you go back and

00:15:22.990 --> 00:15:25.510
check one of those out
if you're curious.

00:15:25.510 --> 00:15:27.940
But the trick to all this is
always using the Styled Maps

00:15:27.940 --> 00:15:31.460
Wizard, because the Styled Maps
Wizard is kind of just

00:15:31.460 --> 00:15:33.610
dragging some sliders around
to actually get

00:15:33.610 --> 00:15:34.620
the style you want.

00:15:34.620 --> 00:15:37.230
Setting up my map.

00:15:37.230 --> 00:15:40.960
So here, I'm just basically
setting up the map with pretty

00:15:40.960 --> 00:15:44.170
much standard settings, but then
applying my style to it.

00:15:44.170 --> 00:15:49.730
And this was a little bit
tricky, a little bit of code.

00:15:49.730 --> 00:15:51.060
This is kind of generalized.

00:15:51.060 --> 00:15:54.370
What I wanted to do
is the JSON file.

00:15:54.370 --> 00:15:59.750
So when you convert to TopoJSON,
it actually takes

00:15:59.750 --> 00:16:02.500
the geometry collection name and
actually assigns that to

00:16:02.500 --> 00:16:06.330
an object in your object
hierarchy, in

00:16:06.330 --> 00:16:07.350
the TopoJSON hierarchy.

00:16:07.350 --> 00:16:11.140
So if you don't know that name
ahead of time, like, for

00:16:11.140 --> 00:16:13.100
example, if you're swapping
files around, or swapping

00:16:13.100 --> 00:16:14.330
geometries around--

00:16:14.330 --> 00:16:17.740
for example, if you're going
from the 10 million to the 110

00:16:17.740 --> 00:16:20.520
million, you need to actually
change that in your code.

00:16:20.520 --> 00:16:22.870
This line of code actually just
generalizes it, so I'm

00:16:22.870 --> 00:16:26.670
just actually getting the
first property of the

00:16:26.670 --> 00:16:28.790
geometries object.

00:16:28.790 --> 00:16:31.160
And then basically going
through, using the TopoJSON

00:16:31.160 --> 00:16:36.030
library to do the conversion
from the

00:16:36.030 --> 00:16:39.520
TopoJSON back to GeoJSON.

00:16:39.520 --> 00:16:43.890
Next up, what I'm doing is I
want to go through the GeoJSON

00:16:43.890 --> 00:16:45.660
properties.

00:16:45.660 --> 00:16:48.250
No, so next thing I'm doing is
actually doing the sorting,

00:16:48.250 --> 00:16:52.090
because what I did is from
TopoJSON to GeoJSON, I

00:16:52.090 --> 00:16:54.430
preserved the feature
information.

00:16:54.430 --> 00:16:58.470
So I can actually sort before
I actually do the conversion

00:16:58.470 --> 00:17:01.370
to Google Maps geometry
objects.

00:17:01.370 --> 00:17:03.970
So I do the sorting on the data,
I trim down my list to

00:17:03.970 --> 00:17:07.310
the top 100 cities, and then
I actually call the GeoJSON

00:17:07.310 --> 00:17:11.660
library to convert the GeoJSON
to Google Maps geometries.

00:17:11.660 --> 00:17:15.430
The library actually has a
really nice feature, is that--

00:17:15.430 --> 00:17:16.700
well, actually, I didn't
use it here.

00:17:16.700 --> 00:17:18.839
You can specify features,
actually, when you do the

00:17:18.839 --> 00:17:22.880
conversion, so it'll just apply
styling guidelines to

00:17:22.880 --> 00:17:25.770
the geometries as it does
the conversion.

00:17:25.770 --> 00:17:28.089
I actually do it after the fact,
because I want to drop

00:17:28.089 --> 00:17:32.540
in kind of a fairly complex
icon, and that's where I'm

00:17:32.540 --> 00:17:37.560
doing the sizing
of the symbol.

00:17:37.560 --> 00:17:40.790
So here, I'm actually doing all
the styling, getting it to

00:17:40.790 --> 00:17:44.730
look like I want it to for the
symbol, and then here, I'm

00:17:44.730 --> 00:17:47.790
actually doing the scaling
to get to the right size.

00:17:47.790 --> 00:17:51.160
So at this point, this
geometries object just has a

00:17:51.160 --> 00:17:54.260
bunch of Google Maps geometries
or polygons.

00:17:54.260 --> 00:17:57.920
No, actually, in this
case it's markers.

00:17:57.920 --> 00:17:59.190
So now I'm going
to go through.

00:17:59.190 --> 00:18:01.240
Here's where I actually go
through and assign the info

00:18:01.240 --> 00:18:05.190
windows, and assign the
geometries to the map.

00:18:05.190 --> 00:18:06.240
And that's pretty much it.

00:18:06.240 --> 00:18:07.690
It's about 85 lines of code.

00:18:07.690 --> 00:18:10.970
If you took out the styling,
we're looking at relatively

00:18:10.970 --> 00:18:14.470
like, maybe 50 lines of code
to get all this done.

00:18:14.470 --> 00:18:15.640
And the map is--

00:18:15.640 --> 00:18:16.900
I think it's actually
compelling.

00:18:16.900 --> 00:18:18.760
I don't think it would be--

00:18:18.760 --> 00:18:20.760
I'd probably want to look at
this data a little bit more

00:18:20.760 --> 00:18:22.830
before I actually ship this,
because there are some

00:18:22.830 --> 00:18:24.330
interesting things.

00:18:24.330 --> 00:18:26.820
You can see, where was that?

00:18:26.820 --> 00:18:28.680
Oh, Osaka and Kyoto.

00:18:28.680 --> 00:18:32.430
It's debatable, I guess, whether
or not those are

00:18:32.430 --> 00:18:35.690
metropolitan areas
or a metroplex.

00:18:35.690 --> 00:18:38.850
And also things like
South Korea.

00:18:38.850 --> 00:18:39.860
You see the--

00:18:39.860 --> 00:18:42.620
Incheon actually is not
considered part of Seoul,

00:18:42.620 --> 00:18:45.220
which, depending on how you
slice the data, you may want

00:18:45.220 --> 00:18:47.750
to consider it to be
part of Seoul.

00:18:47.750 --> 00:18:52.020
So pretty quick and easy way to
get the data in your map.

00:18:52.020 --> 00:18:52.950
Pretty fun, I think.

00:18:52.950 --> 00:18:55.460
So there's a lot of other data
in there, like another

00:18:55.460 --> 00:18:58.460
visualization I was thinking
about doing would be to do

00:18:58.460 --> 00:18:59.480
population density.

00:18:59.480 --> 00:19:01.990
Like, rank the cities based on
population density, and then

00:19:01.990 --> 00:19:07.100
display size, or correlate
the size of the symbol to

00:19:07.100 --> 00:19:11.070
population density, which will
give you a quick way to see

00:19:11.070 --> 00:19:15.600
where everybody lives
in the world.

00:19:15.600 --> 00:19:16.450
So that's it with that map.

00:19:16.450 --> 00:19:18.290
I'm going to rattle through
just a couple more.

00:19:18.290 --> 00:19:22.510
So this one's actually a little
more complex, and a

00:19:22.510 --> 00:19:27.640
little more interesting from a
Google Maps and data story.

00:19:27.640 --> 00:19:31.050
So what I did here is I'm
pulling in the administrative.

00:19:31.050 --> 00:19:38.200
So it's the Natural Earth 10
million administrative data.

00:19:38.200 --> 00:19:39.870
So this is the country data.

00:19:39.870 --> 00:19:42.510
And that actually includes
income groups.

00:19:42.510 --> 00:19:45.150
So I think it has five or six
different income groups.

00:19:45.150 --> 00:19:48.580
So each country is assigned
an income group.

00:19:48.580 --> 00:19:51.860
And then I'm just loading in
the geometry, and coloring

00:19:51.860 --> 00:19:53.430
each country by its
income group.

00:19:53.430 --> 00:19:55.580
So you can pretty easily
see, I think it's

00:19:55.580 --> 00:19:56.730
kind of reverse color.

00:19:56.730 --> 00:19:58.720
So dark is actually
high income, and

00:19:58.720 --> 00:20:01.440
light is low income.

00:20:01.440 --> 00:20:05.150
So one interesting thing about
this is there are no Google

00:20:05.150 --> 00:20:06.380
Maps tiles in this map.

00:20:06.380 --> 00:20:09.290
So one thing that I did, because
I actually have my own

00:20:09.290 --> 00:20:12.860
geometry data for countries, I
just took off all the Google

00:20:12.860 --> 00:20:15.720
Maps geometries.

00:20:15.720 --> 00:20:17.150
Another really cool
thing about this--

00:20:17.150 --> 00:20:22.360
so essentially, I'm using the
Natural Earth data, but then

00:20:22.360 --> 00:20:25.280
just using the slippy map
interface from Google Maps.

00:20:25.280 --> 00:20:29.120
The thing that I like about
doing this technique is that

00:20:29.120 --> 00:20:31.310
we can zoom into any level.

00:20:31.310 --> 00:20:34.370
We can actually get into looking
at these countries in

00:20:34.370 --> 00:20:36.030
central Europe.

00:20:36.030 --> 00:20:37.715
Actually, it's not so
interesting in this map,

00:20:37.715 --> 00:20:42.240
because I think the smaller
countries in central Europe

00:20:42.240 --> 00:20:43.740
are all kind of homogeneous.

00:20:43.740 --> 00:20:44.990
If we go over to this map--

00:20:48.430 --> 00:20:51.590
what I did here is same
interface, same dataset.

00:20:51.590 --> 00:20:57.620
But instead, I'm actually doing
it by per capita GDP.

00:20:57.620 --> 00:21:01.120
So GDP for country divided
by the number of

00:21:01.120 --> 00:21:02.345
people in the country.

00:21:02.345 --> 00:21:05.870
And as you zoom in here, we
look in central Europe.

00:21:05.870 --> 00:21:12.120
We could see things like
Liechtenstein.

00:21:12.120 --> 00:21:12.920
JOSH LIVNI: Kind of
pops out there.

00:21:12.920 --> 00:21:14.900
PAUL SAXMAN: Yeah, it kind of
pops out really nicely as kind

00:21:14.900 --> 00:21:19.990
of a very high GDP, low
population country.

00:21:19.990 --> 00:21:20.780
You can also see--

00:21:20.780 --> 00:21:22.710
I think it's Qatar down
here, and Kuwait,

00:21:22.710 --> 00:21:24.190
kind of pop out nicely.

00:21:24.190 --> 00:21:26.690
And you see these very small
countries in this

00:21:26.690 --> 00:21:28.410
visualization, just because
you can zoom

00:21:28.410 --> 00:21:30.390
in relatively easily.

00:21:30.390 --> 00:21:33.440
This is all done using the
Google Maps API, does all the

00:21:33.440 --> 00:21:37.070
vector scaling as we
zoom in and out.

00:21:37.070 --> 00:21:38.540
Nothing.

00:21:38.540 --> 00:21:43.350
So another point was, so this
is actually the same data.

00:21:43.350 --> 00:21:46.100
Continent is also part of
the feature information.

00:21:46.100 --> 00:21:48.880
So you can really easily just
strip out whatever data you

00:21:48.880 --> 00:21:49.390
don't want.

00:21:49.390 --> 00:21:50.900
So if you just want to
do a visualization--

00:21:50.900 --> 00:21:53.940
the same visualization for
a particular country or

00:21:53.940 --> 00:21:56.620
continent, you can do that
relatively easily.

00:21:56.620 --> 00:21:59.190
So here, as I'm loading the
data, I'm just saying, like,

00:21:59.190 --> 00:22:03.240
if the continent isn't Africa,
I'm just not going to display

00:22:03.240 --> 00:22:05.160
it on the map.

00:22:05.160 --> 00:22:07.910
You can also, pretty
easily, I think--

00:22:07.910 --> 00:22:11.090
that was kind of a nice
feature of what we did

00:22:11.090 --> 00:22:14.690
recently, or what Luke did
recently with the Mercator

00:22:14.690 --> 00:22:16.000
projection puzzle.

00:22:16.000 --> 00:22:17.470
So you could actually move
these geometries

00:22:17.470 --> 00:22:18.260
around if you want.

00:22:18.260 --> 00:22:21.000
So I was thinking about doing
this as a demo is, instead of

00:22:21.000 --> 00:22:24.040
using Africa, I could display
the United States, and maybe

00:22:24.040 --> 00:22:30.345
grab Hawaii and--

00:22:30.345 --> 00:22:30.670
JOSH LIVNI: Alaska.

00:22:30.670 --> 00:22:30.940
PAUL SAXMAN: Alaska.

00:22:30.940 --> 00:22:31.960
Thank you very much.

00:22:31.960 --> 00:22:33.870
And move them over closer to the
map, so you can actually

00:22:33.870 --> 00:22:35.760
see them in context, as opposed
to actually having

00:22:35.760 --> 00:22:38.120
them separated out.

00:22:38.120 --> 00:22:40.140
So that's pretty much it.

00:22:40.140 --> 00:22:41.260
So two different techniques
here.

00:22:41.260 --> 00:22:45.060
So one, I'm actually just
pulling in the point

00:22:45.060 --> 00:22:45.610
information.

00:22:45.610 --> 00:22:48.840
So that's for the cities, using
the feature data from

00:22:48.840 --> 00:22:50.720
Natural Earth, and then
scaling the symbols.

00:22:50.720 --> 00:22:53.200
The other one, I'm actually just
getting rid of the map

00:22:53.200 --> 00:22:56.250
tile entirely, and using
somebody else's geometry data.

00:22:56.250 --> 00:22:57.620
Both work pretty easily.

00:22:57.620 --> 00:22:59.890
I think it's worth pointing out,
and I think it's worth to

00:22:59.890 --> 00:23:02.160
do, is always put in attribution
for where you're

00:23:02.160 --> 00:23:03.600
getting the data from.

00:23:03.600 --> 00:23:07.270
And also be careful about how
the data is licensed.

00:23:07.270 --> 00:23:09.460
I'll take a quick look at this
code, just to show you the one

00:23:09.460 --> 00:23:14.596
bit about how you can
filter out the--

00:23:14.596 --> 00:23:16.080
JOSH LIVNI: Other continents?

00:23:16.080 --> 00:23:18.910
PAUL SAXMAN: Yeah, so you can
get rid of the tiles.

00:23:18.910 --> 00:23:21.460
So what I just did is
I set up a map type.

00:23:21.460 --> 00:23:24.240
So with Google Maps API, you
can do the custom map type.

00:23:24.240 --> 00:23:27.090
So I basically just made
my own map type.

00:23:27.090 --> 00:23:29.240
So the general map types are
things like road map,

00:23:29.240 --> 00:23:32.810
satellite, hybrid,
and terrain map.

00:23:32.810 --> 00:23:35.220
So what I did is I just created
my own map type, I'm

00:23:35.220 --> 00:23:37.820
generating my own tiles, and
the tiles are just empty.

00:23:37.820 --> 00:23:42.420
And what that does is since I'm
using my own tiles, you

00:23:42.420 --> 00:23:44.580
won't see the Google Maps
attribution on the map,

00:23:44.580 --> 00:23:47.770
because there is no Google Maps
feature data actually

00:23:47.770 --> 00:23:51.200
displayed in the map.

00:23:51.200 --> 00:23:54.010
So what I had done previously,
and I thought was kind of an

00:23:54.010 --> 00:23:56.880
interesting technique, too, is
you can actually use map

00:23:56.880 --> 00:24:01.020
styling and just make everything
invisible.

00:24:01.020 --> 00:24:04.470
But if you do that, the actual
features are still coming

00:24:04.470 --> 00:24:06.690
across over the wire,
and I think they're

00:24:06.690 --> 00:24:07.890
just not being displayed.

00:24:07.890 --> 00:24:10.500
And you will still see the
Google Maps attribution, or

00:24:10.500 --> 00:24:13.410
the tile attribution, so it'll
say where the source of the

00:24:13.410 --> 00:24:15.540
information is-- the Google
Maps information.

00:24:15.540 --> 00:24:20.260
So this is just a really nice
way to actually get the Google

00:24:20.260 --> 00:24:24.360
Maps tiles out and display
your own geometry data.

00:24:24.360 --> 00:24:25.800
That's pretty much it.

00:24:25.800 --> 00:24:26.400
One other one--

00:24:26.400 --> 00:24:30.010
I've been playing around with
roads, so the cities are

00:24:30.010 --> 00:24:32.930
really a nice case for
points or markers.

00:24:32.930 --> 00:24:42.370
So the administrative is a nice
story around polygons or

00:24:42.370 --> 00:24:43.850
complex geometries.

00:24:43.850 --> 00:24:46.620
You can also load in-- so the
GeoJSON and TopoJSON also

00:24:46.620 --> 00:24:48.180
support polylines as well.

00:24:48.180 --> 00:24:50.540
So I've been playing around with
roads and trying to come

00:24:50.540 --> 00:24:54.170
up with a compelling or fun
visualization for roads.

00:24:54.170 --> 00:24:56.700
The other thing I was thinking
might be interesting would be

00:24:56.700 --> 00:24:57.820
do things like symbols.

00:24:57.820 --> 00:25:01.440
You could actually put symbols
on the road polylines that

00:25:01.440 --> 00:25:04.080
show the flow of traffic,
or something like that.

00:25:04.080 --> 00:25:05.670
JOSH LIVNI: Some arrows,
some dashes.

00:25:05.670 --> 00:25:06.490
PAUL SAXMAN: Yeah, yeah.

00:25:06.490 --> 00:25:08.940
So there's some fun stuff we
could do, and we'll see in the

00:25:08.940 --> 00:25:12.040
next couple weeks if we can come
up with something good.

00:25:12.040 --> 00:25:14.570
So we're putting some of this
data up, or some of these

00:25:14.570 --> 00:25:15.620
files up on Gist.

00:25:15.620 --> 00:25:19.460
So if you want to check it out,
this is actually-- just

00:25:19.460 --> 00:25:22.290
search for me, Saxman, and
the cities is the first

00:25:22.290 --> 00:25:23.560
one that I put up.

00:25:23.560 --> 00:25:26.250
We'll put the other
visualizations up so you can

00:25:26.250 --> 00:25:30.530
take a look and tweak
them to your liking.

00:25:30.530 --> 00:25:32.430
With that, I think that's
pretty much everything.

00:25:32.430 --> 00:25:33.920
Josh, you have anything?

00:25:33.920 --> 00:25:34.340
JOSH LIVNI: Nope.

00:25:34.340 --> 00:25:37.080
I mean, I think the summary is
that it should be really easy

00:25:37.080 --> 00:25:39.770
to grab some vector data that
you see around the web.

00:25:39.770 --> 00:25:42.530
Whatever the format is, if you
see it in GeoJSON, great.

00:25:42.530 --> 00:25:44.510
More likely, if you see it
in a shapefile, don't be

00:25:44.510 --> 00:25:45.180
intimidated.

00:25:45.180 --> 00:25:47.900
You can easily get it into a map
pretty quickly, and give

00:25:47.900 --> 00:25:49.190
it some nice styling.

00:25:49.190 --> 00:25:50.840
The whole thing shouldn't
take too long.

00:25:50.840 --> 00:25:53.810
So hopefully this helps some of
you guys get up to speed on

00:25:53.810 --> 00:25:56.070
what is a shapefile, how do I
get it in, and how do I make

00:25:56.070 --> 00:25:57.180
it look nice?

00:25:57.180 --> 00:25:59.730
And I look forward to seeing
you guys next week.

00:25:59.730 --> 00:26:00.500
PAUL SAXMAN: Yeah, definitely.

00:26:00.500 --> 00:26:03.420
And if you have any questions,
feel free to post them either

00:26:03.420 --> 00:26:06.040
in the YouTube channel or
Google+, and we'll try to get

00:26:06.040 --> 00:26:06.920
back to them.

00:26:06.920 --> 00:26:08.030
JOSH LIVNI: Yeah, absolutely.

00:26:08.030 --> 00:26:10.240
And if you have feature requests
for Shape Escape, or

00:26:10.240 --> 00:26:12.700
you want to see some more
examples online, I'd love to

00:26:12.700 --> 00:26:14.520
hear about it.

00:26:14.520 --> 00:26:15.970
PAUL SAXMAN: Thanks
for tuning in.

00:26:15.970 --> 00:26:17.220
JOSH LIVNI: Yep.

00:26:30.070 --> 00:27:59.685
[MUSIC PLAYING]

