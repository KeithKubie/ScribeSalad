WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:02.750
For this module you're going to
want to open the file.

00:00:02.750 --> 00:00:04.830
Lesson1_Constants&amp;Variables.

00:00:04.830 --> 00:00:06.850
It's another playground file.

00:00:06.850 --> 00:00:10.330
In Swift there are two different
ways to assign a name to a value.

00:00:10.330 --> 00:00:13.450
Values can be assigned to constants,
or variables.

00:00:13.450 --> 00:00:15.850
Constants are declared
using the keyword let and

00:00:15.850 --> 00:00:18.280
variables are declared
using the keyword var.

00:00:18.280 --> 00:00:22.700
Not surprisingly, once the value of a
constant is set, it can't be reassigned.

00:00:22.700 --> 00:00:24.980
The value remains constant.

00:00:24.980 --> 00:00:28.330
So one should use let, when assigning
a value that's not expected to change.

00:00:29.390 --> 00:00:32.090
Here, the encouragement
string stays the same.

00:00:32.090 --> 00:00:33.950
So it's declared as a constant.

00:00:33.950 --> 00:00:36.770
The personalizedEncouragement 
string changes.

00:00:36.770 --> 00:00:39.020
So it's declared as a variable.

00:00:39.020 --> 00:00:40.420
Here's another example.

00:00:40.420 --> 00:00:43.650
Birth year doesn't change, but
time keeps progressing forward, so

00:00:43.650 --> 00:00:46.650
current year does change, as does age,

00:00:46.650 --> 00:00:49.910
if age is defined as current
year minus birth year.

00:00:49.910 --> 00:00:53.780
But it's important to keep in mind
that context matters, as well.

00:00:53.780 --> 00:00:56.440
The previous example assumes
that the variable, age,

00:00:56.440 --> 00:00:59.120
is going to be calculated
multiple times.

00:00:59.120 --> 00:01:02.721
If age was only intended to be
calculated once, then we'd go ahead and

00:01:02.721 --> 00:01:04.989
declare age and
current year as constants.

00:01:09.781 --> 00:01:13.440
When in doubt,
declare a constant over a variable.

00:01:13.440 --> 00:01:16.460
Any time a value is altered
it should be explicit.

00:01:16.460 --> 00:01:19.310
This protects our code from
inadvertently changing values that we

00:01:19.310 --> 00:01:21.150
don't want changed.

00:01:21.150 --> 00:01:23.820
Let's do one more example for
good measure.

00:01:23.820 --> 00:01:28.160
Here, birthweight isn't going to change,
so we'll declare that as a constant.

00:01:28.160 --> 00:01:31.320
But currentWeight is going to change,
so we declare that as a variable.

