WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now let's get back to our simplification scheme.

00:00:03.000 --> 00:00:08.000
Obviously, simplification works, but if you as a human do simplification,

00:00:08.000 --> 00:00:11.000
you may not be entirely happy with it.

00:00:11.000 --> 00:00:15.000
That is because manual simplification is tedious and boring.

00:00:15.000 --> 00:00:24.000
That is tedious, because you have to run these tests manually again and again and again.

00:00:24.000 --> 00:00:28.000
Second, it's boring, because it's a rather mechanical activity

00:00:28.000 --> 00:00:30.000
without great intellectual challenge.

00:00:30.000 --> 00:00:32.000
I mean, we just keep on stripping away some input,

00:00:32.000 --> 00:00:37.000
invoke the program again and again and again.

00:00:37.000 --> 00:00:39.000
Who really wants to do this?

00:00:39.000 --> 00:00:41.000
Fortunately, there's an answer to that.

00:00:41.000 --> 00:00:47.000
We do have something that helps us specifically for tedious and boring activities.

00:00:47.000 --> 00:00:53.000
This is called a computer, because we invented automatic machines precisely

00:00:53.000 --> 00:00:56.000
to relieve us from tedious and boring tasks.

00:00:56.000 --> 00:01:02.000
So we're going to hand over the process of simplification over to a machine,

00:01:02.000 --> 00:01:06.000
resulting in automatic simplification. Can we do that?

00:01:06.000 --> 00:01:09.000
For automatic simplification, we need two ingredients.

00:01:09.000 --> 00:01:13.000
We need a strategy that does the simplification for us--

00:01:13.000 --> 00:01:16.000
basically that tells us how to simplify.

00:01:16.000 --> 00:01:23.000
And we need an automatic test that checks whether our simplification succeeded or not.

00:01:23.000 --> 00:01:25.000
Let's first start with the automatic test.

00:01:25.000 --> 00:01:30.000
For the Mozilla example, we would need a test that takes HTML input,

00:01:30.000 --> 00:01:36.000
starts the Mozilla web browser, feeds the HTML input into the browser,

00:01:36.000 --> 00:01:40.000
and then finally checks whether Mozilla fails or whether it succeeds.

00:01:40.000 --> 00:01:43.000
All of this needs to go into our automatic test.

00:01:43.000 --> 00:01:46.000
There is a number of ways to set up such tests.

00:01:46.000 --> 00:01:51.000
For instance, we could start Mozilla and then replay appropriate user events

00:01:51.000 --> 00:01:53.000
and see whether it crashes or not.

00:01:53.000 --> 00:01:58.000
We could also write JavaScript programs and have Mozilla execute them automatically.

00:01:58.000 --> 00:02:03.000
That is, we'd right a piece of JavaScript that would read the HTML input

00:02:03.000 --> 00:02:05.000
and then check whether this causes a crash or not.

00:02:05.000 --> 00:02:10.000
For this course, however, we'll set up a simulation that will do the very same thing,

00:02:10.000 --> 00:02:13.000
but actually without involving Mozilla.

00:02:13.000 --> 00:02:17.000
We will simply write a little Python function that does all the testing for us

00:02:17.000 --> 00:02:20.000
and all of this automatically on the machine.

