WEBVTT
Kind: captions
Language: en

00:00:08.625 --> 00:00:11.000
MARK MCDONALD: Hi, and welcome
to Google Developers Live.

00:00:11.000 --> 00:00:12.750
I'm Mark McDonald, and
I'm with Josh Livni

00:00:12.750 --> 00:00:16.140
here from the Maps
Developer Relations team.

00:00:16.140 --> 00:00:18.530
Today we're going to start
talking about Google Maps

00:00:18.530 --> 00:00:20.066
Engine and a couple
of new features

00:00:20.066 --> 00:00:21.190
we've got on the endpoints.

00:00:21.190 --> 00:00:22.020
Over to you, Josh.

00:00:22.020 --> 00:00:23.020
JOSH LIVNI: Thanks Mark.

00:00:23.020 --> 00:00:26.180
Yeah, so Google Maps Engine,
some of you might be familiar,

00:00:26.180 --> 00:00:30.100
is a kind of easy way to create,
share, publish maps, and put

00:00:30.100 --> 00:00:32.060
data into a Google Cloud.

00:00:32.060 --> 00:00:33.760
So what we're going
to cover today

00:00:33.760 --> 00:00:35.450
are a couple of
endpoints that create

00:00:35.450 --> 00:00:39.220
and upload endpoints to show
you how to programmatically get

00:00:39.220 --> 00:00:42.715
data in, and why don't we
start off by looking at a demo.

00:00:42.715 --> 00:00:44.090
MARK MCDONALD: So
this first demo

00:00:44.090 --> 00:00:47.600
is a Python sample that's hosted
using Google's App Engine.

00:00:47.600 --> 00:00:49.980
We'll load it up straight
away and get straight into it.

00:00:49.980 --> 00:00:52.850
We start off with
looking at some projects

00:00:52.850 --> 00:00:54.600
that you'll have
attached to your account,

00:00:54.600 --> 00:00:56.630
so you can group your
different mapping projects

00:00:56.630 --> 00:01:00.625
into logical groupings
called projects.

00:01:03.290 --> 00:01:05.400
With this demo, we simply
just upload a shapefile.

00:01:05.400 --> 00:01:07.340
A shapefile is a
zip file of a bunch

00:01:07.340 --> 00:01:10.160
of sort of component
files that form

00:01:10.160 --> 00:01:12.330
some vector data
in a table format.

00:01:12.330 --> 00:01:15.260
We can provide a
description and some tags

00:01:15.260 --> 00:01:18.200
to describe our table if
we want to find it later

00:01:18.200 --> 00:01:21.470
using the APIs, and then we can
just go ahead and upload it.

00:01:24.621 --> 00:01:26.120
JOSH LIVNI: OK, so
it turns out this

00:01:26.120 --> 00:01:27.370
is probably not about kittens.

00:01:27.370 --> 00:01:32.980
We'll just put state
borders, hit Upload, and what

00:01:32.980 --> 00:01:35.260
will happen in the
back end here is

00:01:35.260 --> 00:01:37.390
we're creating a sort
of skeleton asset,

00:01:37.390 --> 00:01:39.900
saying what files are going
to be involved in the upload,

00:01:39.900 --> 00:01:41.830
uploading the individual
files, and then

00:01:41.830 --> 00:01:43.540
getting back a status
for Maps Engine,

00:01:43.540 --> 00:01:44.831
which we can see on the screen.

00:01:47.160 --> 00:01:49.155
MARK MCDONALD: Once
that status is processed

00:01:49.155 --> 00:01:52.410
and we're ready to go,
we'll get a link showing us

00:01:52.410 --> 00:01:55.140
on the page, which can send
us back to the Maps Engine web

00:01:55.140 --> 00:01:57.810
interface, where we'll be able
to get a preview of the vector

00:01:57.810 --> 00:01:59.322
data that's been uploaded.

00:01:59.322 --> 00:02:01.780
As you can see here, there's
a couple little blue outlines,

00:02:01.780 --> 00:02:03.540
which show the data
that we did upload.

00:02:03.540 --> 00:02:05.320
Everything's been successful.

00:02:05.320 --> 00:02:06.551
So that's all good.

00:02:06.551 --> 00:02:08.009
JOSH LIVNI: Yeah,
and if I go ahead

00:02:08.009 --> 00:02:10.199
and refresh this
page over here, we

00:02:10.199 --> 00:02:12.530
should see that the
processing status is complete.

00:02:12.530 --> 00:02:16.330
It usually takes a few seconds,
gives us some metadata back

00:02:16.330 --> 00:02:18.590
about the data that we uploaded.

00:02:18.590 --> 00:02:20.340
So that's the kind
of example that you

00:02:20.340 --> 00:02:25.000
might want to build so that
people can use your workflow

00:02:25.000 --> 00:02:26.200
to get the data in.

00:02:26.200 --> 00:02:28.960
This code is available
on it GitHub.

00:02:28.960 --> 00:02:31.870
You can download it at the
link below, fork it, modify it,

00:02:31.870 --> 00:02:34.790
use it as a starting point
for working with App Engine

00:02:34.790 --> 00:02:38.207
and OAuth and the syntax for
uploading data to Maps Engine.

00:02:38.207 --> 00:02:40.290
MARK MCDONALD: And if
you've got any opportunities

00:02:40.290 --> 00:02:42.160
for improvement that you
think we'd like to know about,

00:02:42.160 --> 00:02:43.451
feel free to send them our way.

00:02:43.451 --> 00:02:44.860
We love getting pull requests.

00:02:44.860 --> 00:02:46.360
JOSH LIVNI: Indeed we do.

00:02:46.360 --> 00:02:48.318
So let's go ahead and
walk through a little bit

00:02:48.318 --> 00:02:51.200
more detail the code and kind
of the flow of getting data

00:02:51.200 --> 00:02:55.510
in with this second example
here, which you can download

00:02:55.510 --> 00:02:57.890
as part of our Python
Client Library.

00:02:57.890 --> 00:03:01.120
So if you go and look for
the Google API Python Client,

00:03:01.120 --> 00:03:02.320
there's a bunch of samples.

00:03:02.320 --> 00:03:04.430
And in the samples, there's
a Maps Engine sample

00:03:04.430 --> 00:03:05.430
that we'll walk through.

00:03:05.430 --> 00:03:08.030
You can just download the
zip or clone the project

00:03:08.030 --> 00:03:10.912
to get this sample.

00:03:10.912 --> 00:03:13.370
MARK MCDONALD: So on the first
run with a sample like this,

00:03:13.370 --> 00:03:15.350
it would walks
through an OAuth flow,

00:03:15.350 --> 00:03:17.035
just to find out
who you are and make

00:03:17.035 --> 00:03:19.260
sure you've got permission
to access the data.

00:03:19.260 --> 00:03:21.659
We'll skip straight past
that, but before you

00:03:21.659 --> 00:03:23.200
get started on your
own project, even

00:03:23.200 --> 00:03:24.800
if you're running
this sample, you'll

00:03:24.800 --> 00:03:26.900
need to go ahead
and get an API key

00:03:26.900 --> 00:03:29.160
and set up a project
on Google's API console

00:03:29.160 --> 00:03:30.660
before you'll be
able to start this.

00:03:30.660 --> 00:03:33.096
There's more docs on
developers.google.com,

00:03:33.096 --> 00:03:34.444
or you can ask in the comments.

00:03:34.444 --> 00:03:35.360
JOSH LIVNI: Excellent.

00:03:35.360 --> 00:03:39.360
So as part of setting up that
developer console project,

00:03:39.360 --> 00:03:41.960
you'll get an API key,
and you can at that point

00:03:41.960 --> 00:03:43.540
download the
client_secrets, which

00:03:43.540 --> 00:03:46.710
you can see that I have put
into my samples folder here.

00:03:46.710 --> 00:03:48.590
That's client_secrets.json.

00:03:48.590 --> 00:03:51.610
And once I have that in there, I
can go ahead and run my sample.

00:03:56.120 --> 00:03:59.060
And what it will do is
create an authorized request

00:03:59.060 --> 00:04:02.090
to the project's endpoint, get
me back a list of projects.

00:04:02.090 --> 00:04:04.280
I'm going to pick a
project here like this one

00:04:04.280 --> 00:04:07.980
that I have access to,
get the ID of the project,

00:04:07.980 --> 00:04:11.760
and pass that in as an
argument, projects argument.

00:04:11.760 --> 00:04:13.550
Run the script
again, and what you

00:04:13.550 --> 00:04:15.190
can see flying by
you on the screen

00:04:15.190 --> 00:04:18.690
up here is this skeleton
asset that we're creating.

00:04:18.690 --> 00:04:20.850
It's going through now,
uploading each file

00:04:20.850 --> 00:04:24.220
individually down here, and
then pulling for the processing

00:04:24.220 --> 00:04:27.577
status to see how
that upload is doing.

00:04:27.577 --> 00:04:29.660
MARK MCDONALD: And that's
exactly the same process

00:04:29.660 --> 00:04:32.080
that we went through
in the previous demo,

00:04:32.080 --> 00:04:33.640
just on the command line.

00:04:33.640 --> 00:04:34.500
JOSH LIVNI: Right.

00:04:34.500 --> 00:04:37.530
And now that we have a
little 5-second wait here,

00:04:37.530 --> 00:04:40.930
it would say successfully
processed, give us the table ID

00:04:40.930 --> 00:04:41.970
back.

00:04:41.970 --> 00:04:44.070
And now why don't we go
ahead and take a look

00:04:44.070 --> 00:04:46.010
at the actual code.

00:04:46.010 --> 00:04:48.705
MARK MCDONALD: When Josh
first ran the program earlier,

00:04:48.705 --> 00:04:51.650
it was just a list project,
which basically just

00:04:51.650 --> 00:04:56.022
uses this simple get request
of this URL you can see below.

00:04:56.022 --> 00:04:57.146
It's as simple as it looks.

00:04:57.146 --> 00:04:57.979
It is a get request.

00:04:57.979 --> 00:04:59.830
We don't need any parameters.

00:04:59.830 --> 00:05:02.010
We just take the JSON
response that comes back

00:05:02.010 --> 00:05:06.180
from the server, and we log
it straight to the output.

00:05:06.180 --> 00:05:08.430
Once we've done that, we
want to upload our shapefile,

00:05:08.430 --> 00:05:11.530
so that was the second
run through that Josh did.

00:05:11.530 --> 00:05:15.500
It takes the upload URL below,
which is a /tables endpoint.

00:05:15.500 --> 00:05:18.620
And basically, before we
can start uploading data,

00:05:18.620 --> 00:05:20.510
we need to create an
empty table asset.

00:05:20.510 --> 00:05:23.842
So down here, we go through
each of the shapefile suffixes

00:05:23.842 --> 00:05:25.550
that we're going to
use, which are mapped

00:05:25.550 --> 00:05:29.075
to each of the corresponding
shape component files that

00:05:29.075 --> 00:05:34.910
are in the zip file we used
and create an empty metadata

00:05:34.910 --> 00:05:36.520
structure, which
describes the table

00:05:36.520 --> 00:05:38.580
that we're about
to start uploading.

00:05:38.580 --> 00:05:40.700
Once we push this
to the server, we

00:05:40.700 --> 00:05:43.070
get back an ID which
corresponds to the table

00:05:43.070 --> 00:05:45.906
that we're going to
use to upload content

00:05:45.906 --> 00:05:47.280
when we do each
of the shapefiles

00:05:47.280 --> 00:05:51.230
and also when we go to
pull the server later.

00:05:51.230 --> 00:05:55.360
So then we go straight into the
file suffixes and upload them

00:05:55.360 --> 00:05:57.350
straight to the
endpoint we used before,

00:05:57.350 --> 00:06:02.810
just with a /files on the end,
and push those files straight

00:06:02.810 --> 00:06:04.540
up to the server.

00:06:04.540 --> 00:06:06.600
Once that's done, we
use the ID we got back

00:06:06.600 --> 00:06:09.770
from the original request
to check on the table status

00:06:09.770 --> 00:06:11.750
and make sure that
everything's all good.

00:06:11.750 --> 00:06:12.060
JOSH LIVNI: Awesome.

00:06:12.060 --> 00:06:13.185
Thanks for the walkthrough.

00:06:13.185 --> 00:06:14.710
That looks pretty
straightforward.

00:06:14.710 --> 00:06:16.085
Just to summarize
it, we're going

00:06:16.085 --> 00:06:18.340
to go ahead and go through
the OAuth workflow, which

00:06:18.340 --> 00:06:21.010
happens like magic in the
Python samples for you.

00:06:21.010 --> 00:06:24.130
But we end up with an
authorized HTTP request,

00:06:24.130 --> 00:06:28.601
and then we go ahead and post
a sort of skeleton asset, which

00:06:28.601 --> 00:06:30.850
says these are the files
we're going to be putting in,

00:06:30.850 --> 00:06:33.570
these are the different
tags, description,

00:06:33.570 --> 00:06:35.340
and name of the project.

00:06:35.340 --> 00:06:37.520
And once we post that,
we get back an ID.

00:06:37.520 --> 00:06:41.340
We use that ID to go ahead and
push the various files in, pole

00:06:41.340 --> 00:06:43.091
for the processing
status, and we're done.

00:06:43.091 --> 00:06:45.090
And the cool thing is,
this works very similarly

00:06:45.090 --> 00:06:45.860
for images.

00:06:45.860 --> 00:06:47.760
So, for example,
if you're uploading

00:06:47.760 --> 00:06:52.980
a georeferenced image, you can
have that PNG, for example,

00:06:52.980 --> 00:06:55.510
in the sidecar file that
has the world extent

00:06:55.510 --> 00:06:56.807
and do the exact same pattern.

00:06:56.807 --> 00:06:58.390
A couple other
details, like you might

00:06:58.390 --> 00:07:00.450
be including some
additional things

00:07:00.450 --> 00:07:05.010
like that date of the image,
but generally the same pattern.

00:07:05.010 --> 00:07:07.420
And then in addition, we
have a create endpoint,

00:07:07.420 --> 00:07:11.170
so you can create an
empty vector table

00:07:11.170 --> 00:07:14.270
without having to have an
existing shapefile, or CSV,

00:07:14.270 --> 00:07:16.960
or KML or anything like
that, and then just push data

00:07:16.960 --> 00:07:19.610
into it later using
the insert endpoint.

00:07:19.610 --> 00:07:23.069
So go ahead and check
out these code samples.

00:07:23.069 --> 00:07:25.110
MARK MCDONALD: Yeah,
they're available on GitHub,

00:07:25.110 --> 00:07:26.510
and if you've got any
questions about it,

00:07:26.510 --> 00:07:28.000
you can either ask
in the comments

00:07:28.000 --> 00:07:29.487
or jump on StackOverflow.

00:07:29.487 --> 00:07:31.070
There's a big community
of users there

00:07:31.070 --> 00:07:33.554
who are happy to help
you out, and good luck.

00:07:33.554 --> 00:07:35.220
If you have any more
questions, I guess,

00:07:35.220 --> 00:07:36.803
there's documentation
we can check out

00:07:36.803 --> 00:07:38.580
on developers.google.com.

00:07:38.580 --> 00:07:39.510
But have fun.

00:07:39.510 --> 00:07:42.390
JOSH LIVNI: Cheers,
guys, until next time.

