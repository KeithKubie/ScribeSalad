WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Welcome to the second office hours. I have Sebastian here and myself.

00:00:04.000 --> 00:00:06.000
We're going to do this the same way we did last time.

00:00:06.000 --> 00:00:08.000
First we're going to talk about some content,

00:00:08.000 --> 00:00:10.000
and then we're going to go into some applications,

00:00:10.000 --> 00:00:14.000
referring mostly to Kalman filters but also talking a little bit about Stanley and Junior.

00:00:14.000 --> 00:00:16.000
Okay, what's the first question?

00:00:16.000 --> 00:00:20.000
The first question--both of the content questions actually have to do with linear algebra.

00:00:20.000 --> 00:00:25.000
When we were talking about this state transition matrix F,

00:00:25.000 --> 00:00:29.000
we have this equation x' equals f times x plus U.

00:00:29.000 --> 00:00:32.000
You said that this U is the motion,

00:00:32.000 --> 00:00:35.000
but the motion seemed to be embedded in this F matrix in that

00:00:35.000 --> 00:00:40.000
the velocity was taken from the state with the F matrix.

00:00:40.000 --> 00:00:42.000
What exactly is going on with U?

00:00:42.000 --> 00:00:48.000
U allows you to apply a choice like when we just said

00:00:48.000 --> 00:00:51.000
the position is a function of velocity that's describing physics

00:00:51.000 --> 00:00:53.000
but doesn't give you a choice.

00:00:53.000 --> 00:00:56.000
When you want to insert a choice into the system, like for example,

00:00:56.000 --> 00:01:01.000
you might want to change accelerations and that affects velocity and affects state.

00:01:01.000 --> 00:01:04.000
That choice is expressed with the vector U

00:01:04.000 --> 00:01:07.000
We didn't really use it because we were tracking things.

00:01:07.000 --> 00:01:10.000
We didn't know how they were being actuated, so we set U to zero in our example.

00:01:10.000 --> 00:01:13.000
But if you have control over the system you're trying to track

00:01:13.000 --> 00:01:17.000
and you can insert like a motion yourself, then you use the vector U.

00:01:17.000 --> 00:01:23.000
Interesting--just one other piece of intuition we're hoping to get is

00:01:23.000 --> 00:01:28.000
a lot of the matrices we talked about either didn't have off-diagonal elements

00:01:28.000 --> 00:01:31.000
or we at least didn't initialize any off-diagonal elements.

00:01:31.000 --> 00:01:35.000
Specifically, in the covariance matrix and the r matrix,

00:01:35.000 --> 00:01:39.000
can you give us some intuition about what those off-diagonal elements would represent?

00:01:39.000 --> 00:01:42.000
We actually ran into an example that did have off-diagonal elements.

00:01:42.000 --> 00:01:46.000
We didn't initialize it, but then the velocity became correlated with the position,

00:01:46.000 --> 00:01:50.000
and we realized the faster we moved the further we are to the right.

00:01:50.000 --> 00:01:54.000
That was expressed by an off-diagonal element.

00:01:54.000 --> 00:01:57.000
They turn into correlations, so the largest these elements are,

00:01:57.000 --> 00:01:59.000
the more 2 variables are actually correlated.

00:01:59.000 --> 00:02:03.000
The more knowledge about one variable correlates itself with another variable.

00:02:03.000 --> 00:02:09.000
Now, let's get into some of the applications that the students seem especially interested in.

00:02:09.000 --> 00:02:13.000
Specifically, this r matrix. Where does it come from? How do we get it in real life?

00:02:13.000 --> 00:02:16.000
What are we doing with our sensors?

00:02:16.000 --> 00:02:22.000
So the noise matrices express how noisy your sensor is,

00:02:22.000 --> 00:02:25.000
and at first approximation you'd say let's just measure

00:02:25.000 --> 00:02:28.000
what the variation of the measurement is and then plug it in.

00:02:28.000 --> 00:02:33.000
But because these filters, a very subtle thing, assume conditional independence,

00:02:33.000 --> 00:02:39.000
they assume that noise is independent from one type to the next whereas in reality it isn't.

00:02:39.000 --> 00:02:43.000
Typically you start with a very large value, and you look a the result,

00:02:43.000 --> 00:02:46.000
and if the result looks good to you, you leave it that way.

00:02:46.000 --> 00:02:49.000
Unfortunately, there is no good science for it.

00:02:49.000 --> 00:02:52.000
Awhile back, together with Andrew Ng, I published a paper

00:02:52.000 --> 00:02:56.000
on how to learn the noise matrix, but that goes way beyond this class.

00:02:56.000 --> 00:03:02.000
You mentioned that Stanley and Junior both use laser and radar.

00:03:02.000 --> 00:03:07.000
Does each one offer something unique or are the both just doing the same thing?

00:03:07.000 --> 00:03:11.000
Either way, how do we incorporate measurements from 2 sources into our Kalman filter?

00:03:11.000 --> 00:03:13.000
These are two questions.

00:03:13.000 --> 00:03:15.000
First of all, laser and radar at first approximation do the same thing.

00:03:15.000 --> 00:03:17.000
They measure how far things are away.

00:03:17.000 --> 00:03:20.000
Radar also measures how fast they're moving for the Doppler effect,

00:03:20.000 --> 00:03:23.000
but their characteristics are very different. They measure different things.

00:03:23.000 --> 00:03:26.000
There are certain things that can only be measured by laser, others just by radar.

00:03:26.000 --> 00:03:30.000
In fact, laser tends to have much higher spatial resolution,

00:03:30.000 --> 00:03:32.000
but events become foggy.

00:03:32.000 --> 00:03:36.000
The wavelength of light tends not to be as good as a radar wavelength.

00:03:36.000 --> 00:03:38.000
So they're somewhat complementary.

00:03:38.000 --> 00:03:42.000
To incorporate both, Bayes rule allows you to incorporate sensor measurements one after another.

00:03:42.000 --> 00:03:47.000
If you have a laser and a radar, you just multiply both of them in, and that's just fine.

00:03:47.000 --> 00:03:49.000
Okay, great.

00:03:49.000 --> 00:03:52.000
The top-rated question, actually, was about

00:03:52.000 --> 00:03:56.000
the programming languages used in Stanley and Junior.

00:03:56.000 --> 00:04:00.000
Was it Python? Was it something else? &gt;&gt;It was not Python, honestly. &gt;&gt;Okay.

00:04:00.000 --> 00:04:05.000
At the time, we started out with C, but then C++ became very popular. I was popular.

00:04:05.000 --> 00:04:09.000
And it was the better choice, so almost all the code is written in C++/

00:04:09.000 --> 00:04:13.000
How do you make that decision when you're starting a project this big? Is there debate?

00:04:13.000 --> 00:04:15.000
There is always debate.

00:04:15.000 --> 00:04:19.000
The beauty of C++ is it is very efficient in execution,

00:04:19.000 --> 00:04:23.000
and when you use it right it can be very powerful. If you don't abuse it.

00:04:23.000 --> 00:04:28.000
It has way too many things built in, but some of the things like the classes are just really, really good.

00:04:28.000 --> 00:04:31.000
Then you hire people, and you work with students, and some of them like Java,

00:04:31.000 --> 00:04:36.000
so they write their code in Java, and others like C++ or Python or Ruby on Rails.

00:04:36.000 --> 00:04:39.000
Then you just bring all the stuff together.

00:04:39.000 --> 00:04:42.000
Okay--thinking of Stanley and Junior,

00:04:42.000 --> 00:04:46.000
what were the major hardware and software differences between the two vehicles?

00:04:46.000 --> 00:04:52.000
Stanley had about 6 embedded processors.

00:04:52.000 --> 00:04:58.000
Junior had 2 PCs with quad cores so there was a more integrated system.

00:04:58.000 --> 00:05:01.000
The biggest difference in the hardware was really the sensors.

00:05:01.000 --> 00:05:06.000
Stanley had very, very cheap and simple laser-range finders as the main sensor.

00:05:06.000 --> 00:05:09.000
We did have radars. We didn't use them much.

00:05:09.000 --> 00:05:11.000
Whereas Junior had a much more ranging sensor suite.

00:05:11.000 --> 00:05:14.000
Junior could look in all directions--we call this "surround sensing"--

00:05:14.000 --> 00:05:17.000
whereas Stanley could only look straight ahead.

00:05:17.000 --> 00:05:21.000
So that thing we saw spinning on the top of Stanley, that was the laser-range finder?

00:05:21.000 --> 00:05:24.000
What you saw spinning on the top of Stanley was actually on Junior.

00:05:24.000 --> 00:05:26.000
That was on Junior--okay.

00:05:26.000 --> 00:05:29.000
Yeah, you never saw anything on Stanley, because there's nothing spinning there.

00:05:29.000 --> 00:05:31.000
That was on Junior, and that was a laser-range finder.

00:05:31.000 --> 00:05:33.000
Right, and that one spins because it looks in all directions.

00:05:33.000 --> 00:05:37.000
That was important for city driving because what's behind you actually matters in cities

00:05:37.000 --> 00:05:41.000
whereas if you drive in desert terrain there is no traffic. You don't have to look back.

00:05:41.000 --> 00:05:45.000
That's a good segue into the next question, which is what's the next big challenge?

00:05:45.000 --> 00:05:47.000
We've done deserts. We've done urban driving.

00:05:47.000 --> 00:05:49.000
The next challenge is it'll take over our cars.

00:05:49.000 --> 00:05:53.000
Basically get this technology into every single car and make sure driving is safe.

00:05:53.000 --> 00:05:57.000
Every person has a special button that says, like I explained, my little chauffeur button.

00:05:57.000 --> 00:06:00.000
I want to just drive automatically,

00:06:00.000 --> 00:06:03.000
and then I'm just going to get home without having to pay attention.

00:06:03.000 --> 00:06:06.000
Finally, how comfortable is it?

00:06:06.000 --> 00:06:10.000
Do these cars drive similar to the way you or I would drive?

00:06:10.000 --> 00:06:16.000
When we first started out, I would say the driving is effective but not elegant.

00:06:16.000 --> 00:06:18.000
You would get in the car, and you'd know exactly what I mean.

00:06:18.000 --> 00:06:22.000
The steering wheel would go like this all the time, and it would make a lot of noise.

00:06:22.000 --> 00:06:24.000
It was pretty clear you were inside a robot.

00:06:24.000 --> 00:06:28.000
On the outside it looked pretty great, but on the inside it didn't.

00:06:28.000 --> 00:06:32.000
But as things moved on, if you get into a Google car right now,

00:06:32.000 --> 00:06:35.000
you won't be able to distinguish from a human driver. It's really rock solid.

00:06:35.000 --> 00:06:41.000
The steering wheel stays like this, but it turns it confidently drags it around,

00:06:41.000 --> 00:06:44.000
moves the right direction, comes back. It's actually come a long way.

00:06:44.000 --> 00:06:47.000
To get from what you said to where we are now--was it low-pass filtering?

00:06:47.000 --> 00:06:51.000
We will have a class on control,

00:06:51.000 --> 00:06:57.000
and the control techniques ended up to be very sophisticated but also very, very good.

00:06:57.000 --> 00:07:02.000
All the motion of the steering wheel are all related to inaccuracies.

00:07:02.000 --> 00:07:04.000
They came from multiple sources.

00:07:04.000 --> 00:07:09.000
Some of it was that we weren't processing our GPS date good enough yet to map data.

00:07:09.000 --> 00:07:12.000
Some of it was the map resolution--like if you have a 10-15 cm grid cell

00:07:12.000 --> 00:07:17.000
and your estimate jumps from 1 grid cell to the next or your particle filter jumps a little bit around.

00:07:17.000 --> 00:07:21.000
They might not look dramatic on a screen, but if you turned to steering motion

00:07:21.000 --> 00:07:24.000
in your steering wheel, it goes by 2 or 3 or 4 degrees. That's really bad.

00:07:24.000 --> 00:07:30.000
We had a sensor that tracks that angle of the steering wheel and the spatial resolution was about a degree.

00:07:30.000 --> 00:07:33.000
That means you couldn't quite know what the angle was,

00:07:33.000 --> 00:07:35.000
so you would drive a little blind--like up to a degree.

00:07:35.000 --> 00:07:38.000
A degree of steering wheel doesn't sound like much, but it's actually a lot.

00:07:38.000 --> 00:07:40.000
You can try this out.

00:07:40.000 --> 00:07:43.000
If you drive a car and you only move it by a degree, you feel a noticeable effect.

00:07:43.000 --> 00:07:47.000
You'd find out after a while we'll actually pulling in this direction. Let's drag it back.

00:07:47.000 --> 00:07:49.000
And all that stuff we kind of fixed.

00:07:49.000 --> 00:07:52.000
So we'll learn about that in, I think, Unit 5? PIT controllers? &gt;&gt;Yep.

00:07:52.000 --> 00:07:57.000
Excellent. I can't wait. &gt;&gt; All right. &gt;&gt;Thanks a lot. &gt;&gt;All right. Take care.

