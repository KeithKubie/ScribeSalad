WEBVTT
Kind: captions
Language: en

00:00:01.501 --> 00:00:03.801
Fryzel: Uh, my name is Vic.

00:00:03.801 --> 00:00:06.801
I am today going to be
talking to you about

00:00:06.801 --> 00:00:09.300
using the Google Docs APIs

00:00:09.300 --> 00:00:11.934
to store all of your data
in the cloud.

00:00:11.934 --> 00:00:14.934
Uh, so if you have any thoughts
about the talk,

00:00:14.934 --> 00:00:16.934
or if you want to get
ahold of me after the talk,

00:00:16.934 --> 00:00:18.601
or any--any of that, uh,

00:00:18.601 --> 00:00:21.033
you can get a hold of me
on Twitter or Buzz,

00:00:21.033 --> 00:00:23.534
and, uh, there's some
popular hash tags

00:00:23.534 --> 00:00:25.534
down there at the bottom.

00:00:25.534 --> 00:00:28.534
Actually, a lot of us,
uh, speakers this year

00:00:28.534 --> 00:00:31.701
have been, you know,
creating Androids of ourselves,

00:00:31.701 --> 00:00:33.501
and I think that was a bad idea,

00:00:33.501 --> 00:00:35.501
because I think I've spawned,
like, this--

00:00:35.501 --> 00:00:39.000
this, like, robot army
of ginger droids, uh, there--

00:00:39.000 --> 00:00:41.534
so the first one--
watch out.

00:00:41.534 --> 00:00:44.501
Okay, so the Google Docs APIs--

00:00:44.501 --> 00:00:46.501
what we're gonna do is start off

00:00:46.501 --> 00:00:48.501
with a pretty basic statement.

00:00:48.501 --> 00:00:51.534
After I tell you about, uh,
my SpeakerMeter--

00:00:51.534 --> 00:00:54.501
uh, so if you want to give me
feedback about the talk

00:00:54.501 --> 00:00:56.501
or feedback about, you know,

00:00:56.501 --> 00:00:58.501
how I spoke,
or something like that,

00:00:58.501 --> 00:01:00.501
just take a picture
of this QR code,

00:01:00.501 --> 00:01:02.300
um, with your device,

00:01:02.300 --> 00:01:05.300
and then you can submit feedback
with SpeakerMeter.

00:01:05.300 --> 00:01:07.300
Um,

00:01:07.300 --> 00:01:10.300
so have people been using
SpeakerMeter so far?

00:01:10.300 --> 00:01:12.300
Yes, no?
A couple people?

00:01:12.300 --> 00:01:14.300
Uh, it's really--
really useful,

00:01:14.300 --> 00:01:16.300
and I really appreciate
your feedback.

00:01:16.300 --> 00:01:19.300
Um, sorry--just see some people
taking pictures.

00:01:19.300 --> 00:01:21.300
Okay.

00:01:21.300 --> 00:01:24.334
So.. I'm sorry?

00:01:24.334 --> 00:01:26.300
It won't scan?

00:01:26.300 --> 00:01:29.300
All right, just hook up
with me afterward.

00:01:29.300 --> 00:01:32.300
Okay, so basic statement--

00:01:32.300 --> 00:01:35.300
I think that we can all agree
that cloud storage

00:01:35.300 --> 00:01:38.300
is really a revolution
in both the abundance

00:01:38.300 --> 00:01:40.467
and the availability
of user data.

00:01:40.467 --> 00:01:43.801
So nowadays, we have tons
and tons and tons of data,

00:01:43.801 --> 00:01:45.801
and it's really
highly available,

00:01:45.801 --> 00:01:48.467
like, we can access it
in milliseconds.

00:01:48.467 --> 00:01:50.467
Um, so that's huge, right?

00:01:50.467 --> 00:01:53.467
If you remember a decade ago,
we didn't have so much data,

00:01:53.467 --> 00:01:56.434
and it wasn't as available,

00:01:56.434 --> 00:01:59.434
so, um, even 20 years ago,
big mainframe systems,

00:01:59.434 --> 00:02:01.501
and the data
wasn't necessarily available.

00:02:01.501 --> 00:02:04.501
So as developers, uh,

00:02:04.501 --> 00:02:06.501
our job is really

00:02:06.501 --> 00:02:08.501
to, you know, assist users,

00:02:08.501 --> 00:02:10.567
um, in some way.

00:02:10.567 --> 00:02:13.567
Um, but it's really hard
to assist users

00:02:13.567 --> 00:02:16.133
when the information
that you need,

00:02:16.133 --> 00:02:18.634
um, is not readily available

00:02:18.634 --> 00:02:20.934
via something
like an API,

00:02:20.934 --> 00:02:22.934
so--and additionally,
you know,

00:02:22.934 --> 00:02:25.067
users need access
to their data, too,

00:02:25.067 --> 00:02:27.067
um, from more ways,

00:02:27.067 --> 00:02:29.334
more locations,
and more devices.

00:02:29.334 --> 00:02:31.968
Um, so, I mean,
you've all got tablets,

00:02:31.968 --> 00:02:34.667
I'm sure you're accessing things
like Google Docs right now,

00:02:34.667 --> 00:02:36.801
uh, because that's what
this talk is about.

00:02:36.801 --> 00:02:39.801
Um, and, you know, you couldn't
do that yesterday,

00:02:39.801 --> 00:02:41.801
um, or maybe five years ago,

00:02:41.801 --> 00:02:44.801
or ten years ago.

00:02:44.801 --> 00:02:47.801
Uh, so I think
what we're coming to

00:02:47.801 --> 00:02:50.801
is the fact that, uh,
a cloud storage API

00:02:50.801 --> 00:02:53.934
has pretty much a strong
set of requirements today,

00:02:53.934 --> 00:02:56.367
and these requirements
seem to evolve over time,

00:02:56.367 --> 00:02:59.000
but, uh, sharing
is really important.

00:02:59.000 --> 00:03:02.067
I think we can all agree
that sharing data,

00:03:02.067 --> 00:03:04.100
um, today,

00:03:04.100 --> 00:03:06.067
is as important
as it's ever been.

00:03:06.067 --> 00:03:09.067
Um, you should be able to easily
share your thoughts,

00:03:09.067 --> 00:03:12.067
share your working documents,

00:03:12.067 --> 00:03:14.067
things like that,
with other people.

00:03:14.067 --> 00:03:17.067
Um, and then once
you've shared that data,

00:03:17.067 --> 00:03:19.067
it's really got
to be consumable.

00:03:19.067 --> 00:03:23.334
Um, so data should be consumable
in a useful form.

00:03:23.334 --> 00:03:25.334
Being able to access your data

00:03:25.334 --> 00:03:28.868
on a disk-connected device
is nice,

00:03:28.868 --> 00:03:31.634
but also being able
to access it from

00:03:31.634 --> 00:03:34.434
different types of applications
or from a web browser,

00:03:34.434 --> 00:03:36.267
things like that--
in useful forms.

00:03:36.267 --> 00:03:38.267
And then that leads, really,

00:03:38.267 --> 00:03:41.033
into the requirement
for web UIs for applications.

00:03:41.033 --> 00:03:43.033
Um, so web UIs are needed.

00:03:43.033 --> 00:03:45.801
A lot of times, you know,
if a specific device application

00:03:45.801 --> 00:03:48.334
isn't working out
or you don't have access to it,

00:03:48.334 --> 00:03:50.334
or, um, you're on a, you know,

00:03:50.334 --> 00:03:53.033
just a generic work station
device--things like that.

00:03:53.033 --> 00:03:56.033
And then lastly, another
advent of the modern age

00:03:56.033 --> 00:03:59.033
is that we have more
computing power than ever.

00:03:59.033 --> 00:04:02.000
At Google, we have a ton
of computing power.

00:04:02.000 --> 00:04:04.000
And so there are ways, uh,

00:04:04.000 --> 00:04:07.467
that cloud's services can be
applied to this existing data,

00:04:07.467 --> 00:04:09.467
um, in ways that--

00:04:09.467 --> 00:04:12.701
that individual applications
or clients can never achieve.

00:04:12.701 --> 00:04:15.701
So the Google Documents
List API

00:04:15.701 --> 00:04:18.634
is just one such example,

00:04:18.634 --> 00:04:21.167
but you might be thinking
to yourself

00:04:21.167 --> 00:04:24.167
that the API
only stores documents,

00:04:24.167 --> 00:04:26.601
and that's actually not true.

00:04:26.601 --> 00:04:28.601
Um, the name
"Documents List API"

00:04:28.601 --> 00:04:31.334
is, uh, a little bit misleading,

00:04:31.334 --> 00:04:33.801
because the Documents List API

00:04:33.801 --> 00:04:35.801
actually stores, uh,

00:04:35.801 --> 00:04:38.801
all file types now,
for all accounts.

00:04:38.801 --> 00:04:40.801
So today, I'm announcing, uh,

00:04:40.801 --> 00:04:42.801
that arbitrary file type uploads

00:04:42.801 --> 00:04:44.834
are now enabled in the API,

00:04:44.834 --> 00:04:47.801
and you can now use the API for
general purpose cloud storage,

00:04:47.801 --> 00:04:49.801
uh, for all Google users,

00:04:49.801 --> 00:04:52.801
whereas previously,
this was only enabled for--

00:04:52.801 --> 00:04:55.667
[applause]
Fryzel: Thank you.

00:04:55.667 --> 00:04:57.667
Yeah, so a lot of users
in the community

00:04:57.667 --> 00:04:59.667
have been pretty excited
about this feature.

00:04:59.667 --> 00:05:01.734
Um, previously,
if you're unaware,

00:05:01.734 --> 00:05:03.734
uh, this was only enabled
for Google apps

00:05:03.734 --> 00:05:05.400
for business customers, um,

00:05:05.400 --> 00:05:07.901
but we decided it was time
to release it for everybody.

00:05:07.901 --> 00:05:10.901
Um, so here's just an example
of using the API

00:05:10.901 --> 00:05:12.901
for more than just Docs.

00:05:12.901 --> 00:05:14.901
So this is a view
of Google Docs,

00:05:14.901 --> 00:05:17.934
um, and up here, uh,
you can see some things,

00:05:17.934 --> 00:05:20.901
like, I've got my stocks
tracking spreadsheet,

00:05:20.901 --> 00:05:23.901
and, you know,
my bills tracking spreadsheet,

00:05:23.901 --> 00:05:27.000
but I've also got things like
a local backup tarball, okay?

00:05:27.000 --> 00:05:29.901
So for you nerds out there
who like .tar.gz,

00:05:29.901 --> 00:05:32.901
or maybe you're like, "Well, why
didn't you use a Vzip file?"

00:05:32.901 --> 00:05:35.501
Well, you know, you can now
store all of these things

00:05:35.501 --> 00:05:37.400
in, uh, in your Google Docs,

00:05:37.400 --> 00:05:39.400
and I've got other things
up here,

00:05:39.400 --> 00:05:41.400
like a recorded audio file,

00:05:41.400 --> 00:05:43.400
a video, which I can play
in Google Docs,

00:05:43.400 --> 00:05:45.033
uh, things like that.

00:05:45.033 --> 00:05:47.033
And then they're organized
in a really intuitive way,

00:05:47.033 --> 00:05:48.868
um, with collections.

00:05:48.868 --> 00:05:51.901
So this is different
than other storage APIs,

00:05:51.901 --> 00:05:53.868
and it's different
in a lot of ways.

00:05:53.868 --> 00:05:56.868
Firstly, the storage
is per user,

00:05:56.868 --> 00:05:59.868
um, and this is a very,
very significant distinction.

00:05:59.868 --> 00:06:03.567
So users control
their storage quota, okay?

00:06:03.567 --> 00:06:05.934
Whereas with
traditional cloud storage,

00:06:05.934 --> 00:06:07.934
what you're doing is,

00:06:07.934 --> 00:06:09.934
you as the developer
of an application,

00:06:09.934 --> 00:06:12.300
are renting out space
somewhere, okay?

00:06:12.300 --> 00:06:14.901
And then you are consuming
the user's data

00:06:14.901 --> 00:06:16.901
and storing it somewhere.

00:06:16.901 --> 00:06:18.901
Uh, with the Google Documents
list API,

00:06:18.901 --> 00:06:20.901
that's different here,

00:06:20.901 --> 00:06:23.901
where the user is giving you
their quota to use.

00:06:23.901 --> 00:06:26.434
So the actual up-front cost

00:06:26.434 --> 00:06:29.300
to starting developing with
the Google Documents List API,

00:06:29.300 --> 00:06:31.601
or the Google Docs cloud,

00:06:31.601 --> 00:06:33.834
is actually nothing, right?

00:06:33.834 --> 00:06:36.834
Because your users already
have their storage quota,

00:06:36.834 --> 00:06:39.334
and you just provide them
the application.

00:06:39.334 --> 00:06:41.834
So very, very easy
to get up and running.

00:06:41.834 --> 00:06:43.834
Uh, data is
inherently structured,

00:06:43.834 --> 00:06:45.501
uh, within the UI,

00:06:45.501 --> 00:06:47.501
so there are
built-in collections,

00:06:47.501 --> 00:06:49.501
there's, uh, built-in,

00:06:49.501 --> 00:06:51.501
um, hierarchies
in those collections,

00:06:51.501 --> 00:06:54.167
and we're gonna talk about those
a little bit more later.

00:06:54.167 --> 00:06:57.167
And then all entries
also have the same Metadata,

00:06:57.167 --> 00:07:00.167
so whereas you--in a traditional
cloud storage system,

00:07:00.167 --> 00:07:03.434
you might have to track
all of the Metadata yourself.

00:07:03.434 --> 00:07:06.434
Here, we at Google, track
a common subset of Metadata

00:07:06.434 --> 00:07:08.434
for each individual item.

00:07:08.434 --> 00:07:11.434
For instance, every single item
has a title.

00:07:11.434 --> 00:07:14.167
Um, and then lastly,

00:07:14.167 --> 00:07:17.167
currently, uh, Documents,
in the--

00:07:17.167 --> 00:07:19.167
in the, uh, Google Docs list

00:07:19.167 --> 00:07:21.968
occupy zero bytes of quota.

00:07:21.968 --> 00:07:24.968
So this might be something
that we change in the future,

00:07:24.968 --> 00:07:26.968
but it makes it
really, really easy

00:07:26.968 --> 00:07:28.968
for you to create
a lot of documents,

00:07:28.968 --> 00:07:30.968
and use up zero bytes
of the user's quota.

00:07:30.968 --> 00:07:33.467
So you get a lot for free,
with very little overhead,

00:07:33.467 --> 00:07:35.467
using the Documents List API.

00:07:35.467 --> 00:07:38.100
So all of those things are nice,

00:07:38.100 --> 00:07:40.100
but the real meat of this talk

00:07:40.100 --> 00:07:42.100
is, uh, in developing

00:07:42.100 --> 00:07:44.100
a real working application,

00:07:44.100 --> 00:07:46.100
so, uh, this talk

00:07:46.100 --> 00:07:49.100
is going to be, uh,
pretty technical.

00:07:49.100 --> 00:07:52.100
Um, we're going
to go through, um,

00:07:52.100 --> 00:07:55.100
building something similar
to one of these other,

00:07:55.100 --> 00:07:57.300
uh, existing real applications.

00:07:57.300 --> 00:08:00.501
So, uh, we have spanning backup
for Google Apps.

00:08:00.501 --> 00:08:02.567
Uh, they build a backup utility

00:08:02.567 --> 00:08:04.601
that, uh, backs up your Docs,

00:08:04.601 --> 00:08:06.934
contacts, and calendar
to the cloud.

00:08:06.934 --> 00:08:08.934
Uh, syncplicity

00:08:08.934 --> 00:08:11.934
builds a PC, Mac,
and file server syncing system,

00:08:11.934 --> 00:08:14.601
uh, to sync files
for your enterprise.

00:08:14.601 --> 00:08:18.033
Uh, memeo
builds memeo connects,

00:08:18.033 --> 00:08:20.434
uh, and memeo connects
pretty much allows you

00:08:20.434 --> 00:08:23.434
to sync, uh, your PC,
iPhone, or iPad,

00:08:23.434 --> 00:08:25.434
um, with Google Docs.

00:08:25.434 --> 00:08:28.434
And then lastly, we just
launched the Google Docs app

00:08:28.434 --> 00:08:30.767
for Android, and the Google Docs
app for Android

00:08:30.767 --> 00:08:33.767
allows you, obviously, to access
all of your documents and files

00:08:33.767 --> 00:08:35.767
from your Android device.

00:08:35.767 --> 00:08:38.300
So all of these
are really strong,

00:08:38.300 --> 00:08:41.267
well-implemented solutions,
that have many, many users,

00:08:41.267 --> 00:08:43.267
and they're already
implemented today

00:08:43.267 --> 00:08:45.267
using the Google Documents
List API.

00:08:45.267 --> 00:08:47.267
So this is a tried-and-true API,

00:08:47.267 --> 00:08:50.133
um, and we have people
developing on it actively.

00:08:50.133 --> 00:08:53.434
Um, actually, I think,
um, both Spanning Backup

00:08:53.434 --> 00:08:55.434
and, uh, syncplicity
are here today,

00:08:55.434 --> 00:08:58.467
so if you'd like to talk
to them, feel free to find them.

00:08:58.467 --> 00:09:01.501
Uh, so before we go into
the deep technical parts

00:09:01.501 --> 00:09:04.067
of the talk in developing
a real working application,

00:09:04.067 --> 00:09:06.567
we need to take some basic
information about the APIs.

00:09:06.567 --> 00:09:08.934
Uh, and that basic information

00:09:08.934 --> 00:09:11.567
really comes down
to terminology.

00:09:11.567 --> 00:09:14.534
So when you're working
with a Documents List API--

00:09:14.534 --> 00:09:16.534
actually, who here
has worked with

00:09:16.534 --> 00:09:19.534
a Documents List API before--
can you just raise your hand?

00:09:19.534 --> 00:09:21.534
Okay, so maybe
a third of the room.

00:09:21.534 --> 00:09:24.534
Uh, if you haven't yet worked
with a Documents List API,

00:09:24.534 --> 00:09:26.534
you need to know that Document

00:09:26.534 --> 00:09:28.534
means anything that you can edit

00:09:28.534 --> 00:09:31.033
in Google Docs, okay?

00:09:31.033 --> 00:09:33.033
So an example is a spreadsheet.

00:09:33.033 --> 00:09:34.701
If you create a spreadsheet,

00:09:34.701 --> 00:09:36.801
you can then edit that
in Google Docs,

00:09:36.801 --> 00:09:38.801
whereas a file is considered

00:09:38.801 --> 00:09:41.701
anything that you cannot
currently edit in Google Docs.

00:09:41.701 --> 00:09:44.734
So if you, for instance,
uh, upload a video,

00:09:44.734 --> 00:09:47.100
you currently cannot edit that
in Google Docs.

00:09:47.100 --> 00:09:50.100
It doesn't mean that we won't
implement that in the future,

00:09:50.100 --> 00:09:52.100
but, uh, right now,
it's just some arbitrary file

00:09:52.100 --> 00:09:54.100
that you upload to the cloud,

00:09:54.100 --> 00:09:56.100
and you don't intend
for a user to edit

00:09:56.100 --> 00:09:58.100
from the Google Docs interface.

00:09:58.100 --> 00:10:00.601
And then there's,
uh, a collection.

00:10:00.601 --> 00:10:02.601
So collections, uh,

00:10:02.601 --> 00:10:05.267
need a little bit
of an explanation.

00:10:05.267 --> 00:10:08.267
So collections are
like two things--

00:10:08.267 --> 00:10:11.267
they're like a folder,
and they're like a label.

00:10:11.267 --> 00:10:13.267
They're like a folder
in the sense

00:10:13.267 --> 00:10:15.934
that collections
have a hierarchy, right?

00:10:15.934 --> 00:10:17.934
So folders on
a hard drive, whatever,

00:10:17.934 --> 00:10:20.634
have a hierarchy,
so, you know,

00:10:20.634 --> 00:10:23.634
in the root folder,
you might have, uh,

00:10:23.634 --> 00:10:26.634
you know, My Documents, and then
My Photos, things like that,

00:10:26.634 --> 00:10:29.634
um, whereas a label

00:10:29.634 --> 00:10:32.634
can be applied to multiple
things at the same time.

00:10:32.634 --> 00:10:35.133
So you can apply multiple labels

00:10:35.133 --> 00:10:37.133
to the same objects.

00:10:37.133 --> 00:10:40.133
So a collection is like a label
with a hierarchy.

00:10:40.133 --> 00:10:43.133
You can put a hierarchy
within these labels,

00:10:43.133 --> 00:10:45.801
but also a document or a file
can have, uh,

00:10:45.801 --> 00:10:48.801
can belong to multiple
collections at the same time.

00:10:48.801 --> 00:10:51.834
So we actually, uh, have been
doing this for quite some time,

00:10:51.834 --> 00:10:54.467
and we realized that "folder"
wasn't really the right term,

00:10:54.467 --> 00:10:56.467
so we started calling them
"collections,"

00:10:56.467 --> 00:10:59.334
because they're very much more
powerful than a folder.

00:10:59.334 --> 00:11:01.400
And then lastly, uh,

00:11:01.400 --> 00:11:03.901
a resource is a document,
file, or collection.

00:11:03.901 --> 00:11:05.901
So if you hear me say the word
"resource" today,

00:11:05.901 --> 00:11:07.901
I'm just referring to one
of those three things,

00:11:07.901 --> 00:11:09.901
because, uh, in the API,

00:11:09.901 --> 00:11:11.901
we actually abstract out

00:11:11.901 --> 00:11:13.901
the way you work
with these things,

00:11:13.901 --> 00:11:15.901
so that if you wanted
to, for instance,

00:11:15.901 --> 00:11:17.901
change the title
of a collection,

00:11:17.901 --> 00:11:20.067
it's the same as changing
the title of a document,

00:11:20.067 --> 00:11:22.200
so that you have
to implement less code.

00:11:22.200 --> 00:11:25.234
So, uh, in building our
example real application,

00:11:25.234 --> 00:11:27.501
what technologies
should we use?

00:11:27.501 --> 00:11:29.267
Well, there's quite a few.

00:11:29.267 --> 00:11:32.267
The first thing we're gonna do
is use OAuth,

00:11:32.267 --> 00:11:34.267
which is open authorization,

00:11:34.267 --> 00:11:37.267
uh, to get a user's permission
to access their documents list.

00:11:37.267 --> 00:11:39.767
So really quick, I just wanted
to discuss the difference

00:11:39.767 --> 00:11:42.300
between authentication
and authorization.

00:11:42.300 --> 00:11:44.634
Authentication is, uh,

00:11:44.634 --> 00:11:47.300
the mechanism
of identifying a user,

00:11:47.300 --> 00:11:50.000
whereas authorization
is the mechanism

00:11:50.000 --> 00:11:52.000
of getting that user's
permission to do something,

00:11:52.000 --> 00:11:53.467
okay?

00:11:53.467 --> 00:11:56.734
So authentication happens when
you browse through Gmail.com,

00:11:56.734 --> 00:11:59.501
and have to enter
your username and password.

00:11:59.501 --> 00:12:02.067
Authorization happens
when Google asks you,

00:12:02.067 --> 00:12:04.067
"Would you like to allow
this application

00:12:04.067 --> 00:12:06.067
to access your Google Docs?"
okay?

00:12:06.067 --> 00:12:08.067
So those are two
very distinct terms,

00:12:08.067 --> 00:12:09.767
and people sometimes
mix them up.

00:12:09.767 --> 00:12:12.100
Here we're talking
about authorization only.

00:12:12.100 --> 00:12:15.100
We're not gonna worry about
any usernames or passwords.

00:12:15.100 --> 00:12:18.100
Um, so when we implement OAuth,
this is essentially a mechanism

00:12:18.100 --> 00:12:21.100
for us to get a user's
permission to access their Docs,

00:12:21.100 --> 00:12:23.567
and then do so with a token.

00:12:23.567 --> 00:12:26.567
We're going to use App Engine
to host the application.

00:12:26.567 --> 00:12:29.234
You could obviously
host the application

00:12:29.234 --> 00:12:32.567
on any provider you'd like,
including your own servers,

00:12:32.567 --> 00:12:35.467
um, but it's really easy to get
an application up and running

00:12:35.467 --> 00:12:37.501
in a short amount of time
in App Engine,

00:12:37.501 --> 00:12:40.801
so I'm going to just by chance
use App Engine today.

00:12:40.801 --> 00:12:43.801
We're also gonna use
JavaScript and HTML5,

00:12:43.801 --> 00:12:45.801
uh, to give a useable interface.

00:12:45.801 --> 00:12:48.300
Like I said,
this is a real application,

00:12:48.300 --> 00:12:50.801
so we're gonna implement
the full thing,

00:12:50.801 --> 00:12:53.167
from the App Engine app,
to OAuth,

00:12:53.167 --> 00:12:56.133
to--all the way up
to the user interface.

00:12:56.133 --> 00:12:58.133
Um, so there's a whole bunch
of other talks

00:12:58.133 --> 00:12:59.801
on JavaScript and HTML5.

00:12:59.801 --> 00:13:01.868
The things that I'm going to do
are not nearly as advanced

00:13:01.868 --> 00:13:03.501
as some of the things
in the other talks,

00:13:03.501 --> 00:13:05.100
and I recommend you attend those

00:13:05.100 --> 00:13:06.734
if you're more interested
in these topics.

00:13:06.734 --> 00:13:08.734
And then, of course, we're gonna
use the Documents List API

00:13:08.734 --> 00:13:10.300
to manage most of the data.

00:13:10.300 --> 00:13:12.501
Um, if your data
has a custom schema,

00:13:12.501 --> 00:13:15.434
I highly recommend you use
the spreadsheets API,

00:13:15.434 --> 00:13:18.501
so the way this would work is if
you needed, like, custom fields,

00:13:18.501 --> 00:13:20.501
you would use
the Documents List API

00:13:20.501 --> 00:13:23.267
to create a hidden spreadsheet
in the user's account,

00:13:23.267 --> 00:13:25.267
and then you would use
the spreadsheet's API

00:13:25.267 --> 00:13:26.934
to manipulate the data
in that spreadsheet

00:13:26.934 --> 00:13:29.501
and store arbitrary data
for your application--

00:13:29.501 --> 00:13:31.834
all within the user's control.

00:13:31.834 --> 00:13:33.834
So what does
the application do?

00:13:33.834 --> 00:13:36.067
Let's take a quick look.

00:13:36.067 --> 00:13:38.100
So, um,

00:13:38.100 --> 00:13:41.067
I've got this application
running on a local host,

00:13:41.067 --> 00:13:43.067
:8080,

00:13:43.067 --> 00:13:45.067
um, and it's just because I have

00:13:45.067 --> 00:13:47.567
the local App Engine
instance running.

00:13:47.567 --> 00:13:49.567
So if I browse here,
I'm immediately taken

00:13:49.567 --> 00:13:52.567
to the Google accounts page,
um, asking me to grant access

00:13:52.567 --> 00:13:55.567
to this application, uh,
for my Google Docs.

00:13:55.567 --> 00:13:58.234
So the application

00:13:58.234 --> 00:14:00.234
is immediately sending me here,

00:14:00.234 --> 00:14:02.801
uh, just to click grant access,
essentially,

00:14:02.801 --> 00:14:04.801
saying, yes, allow this
application access.

00:14:04.801 --> 00:14:07.801
And when I click "grant access,"
I'm taken to the application.

00:14:07.801 --> 00:14:10.300
So let me go
to full screen here.

00:14:10.300 --> 00:14:12.901
So here's the application.

00:14:12.901 --> 00:14:14.901
Uh, it's called Categorical.ly.

00:14:14.901 --> 00:14:17.901
I'm sorry, I couldn't think
of a better web 2.0 bad name.

00:14:17.901 --> 00:14:20.901
Uh, so the purpose
of the application

00:14:20.901 --> 00:14:22.901
is to allow us

00:14:22.901 --> 00:14:24.901
to easily, uh, update

00:14:24.901 --> 00:14:26.901
our Google Documents list

00:14:26.901 --> 00:14:29.400
with files from our desktop.

00:14:29.400 --> 00:14:32.534
So here, I have a folder
with some stuff in it.

00:14:32.534 --> 00:14:35.400
Here's an image I took
at Half Moon Bay,

00:14:35.400 --> 00:14:37.400
which is here in California.

00:14:37.400 --> 00:14:40.734
Here's another image of some
berries on a tree, I think.

00:14:40.734 --> 00:14:43.734
And then, uh,
I have a zip file

00:14:43.734 --> 00:14:46.000
of both of these images.

00:14:46.000 --> 00:14:48.968
So my goal here, really,
is to easily get these,

00:14:48.968 --> 00:14:50.968
uh, into Google Docs

00:14:50.968 --> 00:14:52.834
from our sample application.

00:14:52.834 --> 00:14:55.834
So the whole purpose of this
is to be able to, uh,

00:14:55.834 --> 00:14:58.834
drag one file from our, um,

00:14:58.834 --> 00:15:01.734
from our, uh, finder,

00:15:01.734 --> 00:15:03.734
and into a collection,

00:15:03.734 --> 00:15:05.734
uh, here,

00:15:05.734 --> 00:15:07.734
in our Google Docs.

00:15:07.734 --> 00:15:10.234
So let's see--
I'll drag this to my book--

00:15:10.234 --> 00:15:13.234
I'm not really writing a book.
I just created that folder.

00:15:13.234 --> 00:15:15.734
And so that's it--

00:15:15.734 --> 00:15:17.734
The application refreshes,
we're done.

00:15:17.734 --> 00:15:20.501
So where did the file go?
Well, if I pull up Google Docs--

00:15:20.501 --> 00:15:22.601
and I think I called it
Archive.zip.

00:15:22.601 --> 00:15:24.601
If I search for this,
here it is,

00:15:24.601 --> 00:15:26.300
and it's in
the correct collection,

00:15:26.300 --> 00:15:29.934
so let me zoom in here
so you can see this.

00:15:29.934 --> 00:15:32.934
So I actually uploaded it
to the My Book collection,

00:15:32.934 --> 00:15:34.934
and here it is on top.

00:15:34.934 --> 00:15:36.934
I've actually uploaded
this file before, to test,

00:15:36.934 --> 00:15:38.601
so that's why it exists twice.

00:15:38.601 --> 00:15:41.100
But, uh, My Book,
and then if I click on this,

00:15:41.100 --> 00:15:43.601
you'll notice that this
is an example of a file,

00:15:43.601 --> 00:15:46.734
and I cannot currently edit
zip files in Google Docs.

00:15:46.734 --> 00:15:49.300
So here, I'm taken
to a more generic page

00:15:49.300 --> 00:15:51.834
that describes some information
about this file.

00:15:51.834 --> 00:15:53.801
Um, for instance, like,
which collections it's in,

00:15:53.801 --> 00:15:55.400
or what size it is--

00:15:55.400 --> 00:15:58.400
it allows me to download it from
the web UI--things like that.

00:15:58.400 --> 00:16:01.467
So, uh, everybody understands
the general purpose

00:16:01.467 --> 00:16:03.801
of this application
is just to make it really easy

00:16:03.801 --> 00:16:05.801
to drag and drop files
from the desktop to here.

00:16:05.801 --> 00:16:07.934
Um, so how did we
implement this?

00:16:07.934 --> 00:16:10.200
This seems like a really
simple application,

00:16:10.200 --> 00:16:12.033
and there are a lot of parts,

00:16:12.033 --> 00:16:14.033
but I'm going
to go through today

00:16:14.033 --> 00:16:16.701
and show you just exactly
how all of this works together.

00:16:16.701 --> 00:16:20.133
So, um, when we walk
through the source code today,

00:16:20.133 --> 00:16:22.501
we're gonna walk through it
in a couple of steps.

00:16:22.501 --> 00:16:25.534
First, I'm gonna go through how
to create an App Engine app--

00:16:25.534 --> 00:16:27.501
specifically, a Python
App Engine app,

00:16:27.501 --> 00:16:29.400
but you could do
all of this in Java.

00:16:29.400 --> 00:16:32.467
Um, then I'm going to implement
3-legged OAuth,

00:16:32.467 --> 00:16:34.467
and when I implement
3-legged OAuth,

00:16:34.467 --> 00:16:36.467
that's gonna take a little bit
of explaining,

00:16:36.467 --> 00:16:39.467
because we have to do this thing
called the OAuth dance.

00:16:39.467 --> 00:16:41.467
Uh, we're going to implement
a JavaScript,

00:16:41.467 --> 00:16:43.467
an HTML5 user interface,
and then lastly, we're gonna use

00:16:43.467 --> 00:16:46.133
the Documents List API
to manage everything.

00:16:46.133 --> 00:16:48.133
So this is, uh,
this whole application

00:16:48.133 --> 00:16:51.467
comes out to be about 375 lines
of actual code.

00:16:51.467 --> 00:16:53.968
Um, so if you'd like
to follow along

00:16:53.968 --> 00:16:56.968
from your laptop,
uh, or at home,

00:16:56.968 --> 00:16:59.000
you can just follow
this Google link

00:16:59.000 --> 00:17:01.834
to the source code
for this entire application,

00:17:01.834 --> 00:17:04.834
which is all open source.

00:17:04.834 --> 00:17:07.834
Uh, so that's just, uh, NAkZM.

00:17:07.834 --> 00:17:10.501
So let's take a look
at the source code.

00:17:10.501 --> 00:17:13.167
Um, here first,

00:17:13.167 --> 00:17:15.834
I have this App Engine app
set up

00:17:15.834 --> 00:17:18.834
so that, uh, you know,
I have a ReadMe file,

00:17:18.834 --> 00:17:21.834
and I have an app.yaml file,
things like that.

00:17:21.834 --> 00:17:24.534
Uh, these are basic
App Engine appliances,

00:17:24.534 --> 00:17:27.033
and I'm not gonna go through
those specifically today,

00:17:27.033 --> 00:17:29.033
because there are separate talks
about App Engine.

00:17:29.033 --> 00:17:31.033
What I am going
to go through, though,

00:17:31.033 --> 00:17:33.534
is the app called
G Categorical.ly,

00:17:33.534 --> 00:17:36.534
and so here's all of the source
code for G Categorical.ly.

00:17:36.534 --> 00:17:39.000
So you can--if you're familiar
with Python,

00:17:39.000 --> 00:17:41.000
uh, here, we have an init
up high,

00:17:41.000 --> 00:17:43.334
which is pretty basic for
declaring a Python module.

00:17:43.334 --> 00:17:45.334
And then, uh, the handlers

00:17:45.334 --> 00:17:47.534
are the important bits
of information here.

00:17:47.534 --> 00:17:49.901
Um, so you can see,
we have an OAuth handler

00:17:49.901 --> 00:17:52.400
to handle the OAuth portion
of the application,

00:17:52.400 --> 00:17:54.934
a collection handler to handle,
um, you know,

00:17:54.934 --> 00:17:56.601
manipulating collections,

00:17:56.601 --> 00:17:59.100
pulling down the list of
collections, things like that.

00:17:59.100 --> 00:18:01.167
And then we have
a default handler,

00:18:01.167 --> 00:18:03.167
and all this really does
is render the main page.

00:18:03.167 --> 00:18:05.701
Um, it's a little bit difficult
to see on the screen here,

00:18:05.701 --> 00:18:07.667
but there's a directory
over here called "Static,"

00:18:07.667 --> 00:18:09.767
and a directory over here
called "Templates."

00:18:09.767 --> 00:18:12.767
So Static just includes all of
our JavaScript and CSS files,

00:18:12.767 --> 00:18:15.267
and then Templates
just includes an index

00:18:15.267 --> 00:18:18.400
of that HTML file, which we use
to render the main page.

00:18:18.400 --> 00:18:21.734
So let's start by taking a look
at default handler.

00:18:21.734 --> 00:18:24.667
And--anyway--

00:18:24.667 --> 00:18:28.267
so, uh, here,
pretty basic stuff.

00:18:28.267 --> 00:18:30.734
This is just a license
declaration, author--

00:18:30.734 --> 00:18:32.734
none of that's
really important.

00:18:32.734 --> 00:18:35.734
Down here is where we actually
get to the meat of the code.

00:18:35.734 --> 00:18:39.334
So, um, since this
is an App Engine application,

00:18:39.334 --> 00:18:41.200
the way uploading files works

00:18:41.200 --> 00:18:44.200
is with a blobstore handler,
so you can think of a blob

00:18:44.200 --> 00:18:46.267
as just some arbitrary
blob of bytes,

00:18:46.267 --> 00:18:48.267
and a blobstore upload handler

00:18:48.267 --> 00:18:50.767
just handles uploads
of these bytes,

00:18:50.767 --> 00:18:52.767
stores them somewhere
temporarily,

00:18:52.767 --> 00:18:54.767
waits for the application
to, uh, you know,

00:18:54.767 --> 00:18:56.434
use them in some way,

00:18:56.434 --> 00:18:58.767
and then you can just delete
the--the temporary file.

00:18:58.767 --> 00:19:01.834
Um, so again, with App Engine,
we create a handler,

00:19:01.834 --> 00:19:03.834
and then we define methods

00:19:03.834 --> 00:19:06.901
based on the HTTP, uh,
request method we're using.

00:19:06.901 --> 00:19:09.901
So there are a number
of different HTTP,

00:19:09.901 --> 00:19:11.901
uh, request types--

00:19:11.901 --> 00:19:14.400
we have, like, uh,
Get, Put, Post, and Delete.

00:19:14.400 --> 00:19:17.400
Those are the main ones
for a restful API.

00:19:17.400 --> 00:19:20.400
Um, and here, it's just really
easy to implement Get and Post,

00:19:20.400 --> 00:19:23.334
so when we run a Get request,

00:19:23.334 --> 00:19:25.534
uh, to the default handler,

00:19:25.534 --> 00:19:29.000
we're going to do
a couple of things.

00:19:29.000 --> 00:19:31.000
Our goal is to generally--

00:19:31.000 --> 00:19:33.501
or, to, uh, generally render
the main page,

00:19:33.501 --> 00:19:35.801
but we have a couple
of subgoals in here.

00:19:35.801 --> 00:19:38.601
We're going to create
an OAuth token handler,

00:19:38.601 --> 00:19:40.834
and then get
an authorized client.

00:19:40.834 --> 00:19:45.033
All this really allows us to do
is say,

00:19:45.033 --> 00:19:47.734
"Give me some abstract object

00:19:47.734 --> 00:19:49.501
that is authorized to work

00:19:49.501 --> 00:19:51.667
with the Google
Documents List API," okay?

00:19:51.667 --> 00:19:53.801
So it's just
those two lines of code.

00:19:53.801 --> 00:19:56.901
If a client comes back
as "none,"

00:19:56.901 --> 00:19:59.367
then we need
to authorize, okay?

00:19:59.367 --> 00:20:02.701
So just redirect the user
to the authorization page.

00:20:02.701 --> 00:20:06.400
But if it doesn't come back
as "none," continue.

00:20:06.400 --> 00:20:09.734
Uh, give the template
index.html,

00:20:09.734 --> 00:20:11.934
uh, an upload URL,

00:20:11.934 --> 00:20:14.100
where the user can upload
their files,

00:20:14.100 --> 00:20:16.601
and then, uh, render
that template

00:20:16.601 --> 00:20:18.767
to the screen, essentially.

00:20:18.767 --> 00:20:23.067
Um, post is, uh,
has a different goal.

00:20:23.067 --> 00:20:26.868
Its goal is to receive a file
from the user,

00:20:26.868 --> 00:20:29.334
and then send it away
to Google Docs

00:20:29.334 --> 00:20:31.701
in the appropriate
collection, okay?

00:20:31.701 --> 00:20:34.667
So again, when they come in,

00:20:34.667 --> 00:20:37.634
OAuth token handler,
get authorized client--

00:20:37.634 --> 00:20:41.167
um, so these two things
are just, you know, again,

00:20:41.167 --> 00:20:43.133
doing the authorization steps.

00:20:43.133 --> 00:20:44.968
We're getting the parent,

00:20:44.968 --> 00:20:47.167
which is the parameter being
passed in from the client.

00:20:47.167 --> 00:20:49.400
Uh, this is just telling us
where the user

00:20:49.400 --> 00:20:51.400
wants the file to go, okay?

00:20:51.400 --> 00:20:54.334
So the parent is just going
to be the resource identifier

00:20:54.334 --> 00:20:56.334
of a collection.

00:20:56.334 --> 00:21:00.834
Then the URI we want to post to,
uh, is documented

00:21:00.834 --> 00:21:03.067
in the Google Documents List API
documentation.

00:21:03.067 --> 00:21:06.167
Um, essentially here,
this is something--

00:21:06.167 --> 00:21:09.334
some predefined URL
with which we can, uh,

00:21:09.334 --> 00:21:12.968
upload documents and files
to a particular collection.

00:21:12.968 --> 00:21:16.534
And you can see here,
I do string substitution

00:21:16.534 --> 00:21:19.167
to replace the parent
that they gave us,

00:21:19.167 --> 00:21:21.167
um, into the URL,

00:21:21.167 --> 00:21:23.167
and you can see up here,
this is secure,

00:21:23.167 --> 00:21:26.300
because I do a "regex replace,"
uh, for malicious characters.

00:21:26.300 --> 00:21:28.968
So, uh, down here, uh,

00:21:28.968 --> 00:21:32.834
I'm going to get the files
uploaded from the user,

00:21:32.834 --> 00:21:34.834
and for each file,

00:21:34.834 --> 00:21:37.934
uh, if the client is "none,"

00:21:37.934 --> 00:21:39.601
then we need to authorize, okay?

00:21:39.601 --> 00:21:43.334
So back up here, if we got
no client that was authorized,

00:21:43.334 --> 00:21:46.267
then we need to send the user
to the authorization page.

00:21:46.267 --> 00:21:48.033
Does that make sense?

00:21:48.033 --> 00:21:51.100
So then we're going to use
this utility class

00:21:51.100 --> 00:21:53.100
called "resumable uploader,"

00:21:53.100 --> 00:21:55.167
and this allows us
to do a lot of things.

00:21:55.167 --> 00:21:57.167
in bandwidth-constrained
environments,

00:21:57.167 --> 00:22:00.133
uh, you usually want to use
a resumable uploader,

00:22:00.133 --> 00:22:01.834
because what that
allows you to do

00:22:01.834 --> 00:22:04.801
is send the file off in chunks,
and that's very important.

00:22:04.801 --> 00:22:07.334
So if you're working,
for instance, on a phone,

00:22:07.334 --> 00:22:09.133
and you have
a very limited connection,

00:22:09.133 --> 00:22:10.634
or limited bandwidth,

00:22:10.634 --> 00:22:12.634
I highly recommend you use
resumable uploader,

00:22:12.634 --> 00:22:15.167
because now you can split your,
for instance,

00:22:15.167 --> 00:22:18.367
10-megabyte file
into chunks of 256k,

00:22:18.367 --> 00:22:20.801
and send those chunks
individually.

00:22:20.801 --> 00:22:23.868
If the individual chunk fails,
you can resume from that point,

00:22:23.868 --> 00:22:26.801
uh, so very, very useful
to use the resumable uploader.

00:22:26.801 --> 00:22:31.234
It's also required to upload
files in the Documents List API,

00:22:31.234 --> 00:22:33.434
but you may as well just
use it for everything,

00:22:33.434 --> 00:22:37.167
because we have future plans
to just make it the default.

00:22:37.167 --> 00:22:41.167
Um, here, we're creating
a Documents List entry.

00:22:41.167 --> 00:22:44.133
This is just a wrapper class
that has some basic things

00:22:44.133 --> 00:22:46.901
like a title in it,
so here, you can actually see me

00:22:46.901 --> 00:22:49.601
set the title to the file name
of the file being uploaded.

00:22:49.601 --> 00:22:53.467
So in the demonstration before,
you saw me upload Archives.zip,

00:22:53.467 --> 00:22:55.267
and the title of the file

00:22:55.267 --> 00:22:57.200
was actually made
to be "Archives.zip."

00:22:57.200 --> 00:23:00.300
Lastly, I'm saying
to the helper class

00:23:00.300 --> 00:23:03.100
to upload the actual file, uh,

00:23:03.100 --> 00:23:05.067
to the Google
Documents List API.

00:23:05.067 --> 00:23:08.033
Um, down here,
this blobinfo.delete--

00:23:08.033 --> 00:23:09.868
that just deletes
the temporary file,

00:23:09.868 --> 00:23:12.133
because when you upload a file
from the client side

00:23:12.133 --> 00:23:14.133
to a web server,
it has to store it somewhere.

00:23:14.133 --> 00:23:16.133
So we're just deleting
the temporary file

00:23:16.133 --> 00:23:18.133
and doing good housekeeping.

00:23:18.133 --> 00:23:20.567
After that, we're redirecting
to the main page,

00:23:20.567 --> 00:23:22.434
so after they drop the file,

00:23:22.434 --> 00:23:24.434
we're just redirecting
the main page,

00:23:24.434 --> 00:23:26.434
showing the user interface
again,

00:23:26.434 --> 00:23:28.434
and they can upload more files
if they wish.

00:23:28.434 --> 00:23:30.434
Um, so that's pretty much it.

00:23:30.434 --> 00:23:33.200
The rest of this file is just
going to create

00:23:33.200 --> 00:23:35.200
a WSGI application.

00:23:35.200 --> 00:23:37.200
Um, if you're not
familiar with this,

00:23:37.200 --> 00:23:39.167
just read the App Engine
Python documentation.

00:23:39.167 --> 00:23:42.000
Um, setting this up is part
of the Hello World project.

00:23:42.000 --> 00:23:44.634
Um, this is just a basic way
to interface

00:23:44.634 --> 00:23:46.667
that handler that we just wrote

00:23:46.667 --> 00:23:49.968
with, uh,
App Engine's interpreters.

00:23:49.968 --> 00:23:52.601
So that's pretty much it
for the default handler,

00:23:52.601 --> 00:23:55.634
and that handles displaying
the main page,

00:23:55.634 --> 00:23:57.901
and receiving files.

00:23:57.901 --> 00:24:00.167
But we kind of skipped over
a lot of stuff.

00:24:00.167 --> 00:24:02.534
Um, one major thing
that we skipped over

00:24:02.534 --> 00:24:05.467
was all of that OAuth logic.

00:24:05.467 --> 00:24:08.367
So the way OAuth works,
essentially,

00:24:08.367 --> 00:24:11.000
is you have to,

00:24:11.000 --> 00:24:14.167
when a user, uh,
comes to you unauthorized,

00:24:14.167 --> 00:24:17.534
you have to generate
a request token,

00:24:17.534 --> 00:24:20.367
and then send that user
off to Google,

00:24:20.367 --> 00:24:22.901
or off to the OAuth
service provider--

00:24:22.901 --> 00:24:24.767
identity provider, excuse me.

00:24:24.767 --> 00:24:27.367
So the OAuth identity provider
is the pers--

00:24:27.367 --> 00:24:30.367
or the entity who's
going to say, "Yes,

00:24:30.367 --> 00:24:33.167
"this user is legitimate,
and, yes, this user

00:24:33.167 --> 00:24:36.067
gives your application
permission to do something."

00:24:36.067 --> 00:24:38.534
So in this particular case,
the identity provider

00:24:38.534 --> 00:24:40.300
is, uh, Google,

00:24:40.300 --> 00:24:43.300
so what we want to do

00:24:43.300 --> 00:24:46.467
is redirect the user to Google

00:24:46.467 --> 00:24:48.467
with a request token.

00:24:48.467 --> 00:24:51.067
Google will allow the user
to click, uh, you know,

00:24:51.067 --> 00:24:52.601
allow access,

00:24:52.601 --> 00:24:55.601
and then the application
will redirect the user back

00:24:55.601 --> 00:24:58.968
to our application with
a special parameter in the URL,

00:24:58.968 --> 00:25:01.033
Okay? That special parameter

00:25:01.033 --> 00:25:04.434
is an authorized request token,

00:25:04.434 --> 00:25:06.868
and then our application
is going to take

00:25:06.868 --> 00:25:08.868
that authorized request token

00:25:08.868 --> 00:25:11.400
and turn it
into an access token.

00:25:11.400 --> 00:25:14.968
All of this is--I agree with
you--a little bit complicated.

00:25:14.968 --> 00:25:17.400
That's why we write
sample applications,

00:25:17.400 --> 00:25:19.133
and you copy and paste.

00:25:19.133 --> 00:25:22.300
So what we're doing here
is we're creating

00:25:22.300 --> 00:25:26.067
a new OAuth token handler, um,
we're creating new client.

00:25:26.067 --> 00:25:28.634
Here, remember I used the term
"request token.

00:25:28.634 --> 00:25:30.534
So we're just getting
a request token,

00:25:30.534 --> 00:25:33.133
and then we're generating
a callback URL.

00:25:33.133 --> 00:25:35.200
This just says, "Hey, Google,
after you're done

00:25:35.200 --> 00:25:38.667
authorizing the user, uh,
send them back to this spot,"

00:25:38.667 --> 00:25:41.434
so that allows the user
to be bounced around

00:25:41.434 --> 00:25:43.601
in their browser
pretty seamlessly.

00:25:43.601 --> 00:25:47.167
Um, so here, uh, we're getting
a request token,

00:25:47.167 --> 00:25:49.567
and we're storing it temporarily

00:25:49.567 --> 00:25:51.734
while we send the user
off to Google.

00:25:51.734 --> 00:25:53.400
Because when they come back,

00:25:53.400 --> 00:25:55.400
they're gonna have
an authorized request token,

00:25:55.400 --> 00:25:57.400
and we need to be able
to look them up somehow.

00:25:57.400 --> 00:25:59.400
Um, after we
store it temporarily,

00:25:59.400 --> 00:26:01.467
here's the redirect,
uh, request,

00:26:01.467 --> 00:26:03.467
and the authorization URL,

00:26:03.467 --> 00:26:05.501
and then once they come back,

00:26:05.501 --> 00:26:08.334
uh, there's an authorized
request token,

00:26:08.334 --> 00:26:10.868
and we're going to upgrade that
to an access token,

00:26:10.868 --> 00:26:13.701
so this access token
is what allows us

00:26:13.701 --> 00:26:17.501
to make requests via the API.

00:26:17.501 --> 00:26:20.167
So your application
will store this access token,

00:26:20.167 --> 00:26:22.834
uh, for an indefinite
period of time,

00:26:22.834 --> 00:26:24.834
and then use it
to make requests

00:26:24.834 --> 00:26:28.501
that, you know, to perform your
application's basic functions.

00:26:28.501 --> 00:26:31.033
What's important about this
is that a user

00:26:31.033 --> 00:26:34.400
can revoke this token,
and what that means is,

00:26:34.400 --> 00:26:37.133
they can pretty much stop
allowing your application

00:26:37.133 --> 00:26:39.834
to access their data
for a number of reasons.

00:26:39.834 --> 00:26:42.567
Um, and if they revoke
this token,

00:26:42.567 --> 00:26:46.167
the access token will
no longer work with the API.

00:26:46.167 --> 00:26:48.667
You'll get a 401
unauthorized error,

00:26:48.667 --> 00:26:50.868
um, when this returns.

00:26:50.868 --> 00:26:53.334
So that's actually handled
in some other logic

00:26:53.334 --> 00:26:55.334
in this file, but that's
not really relevant.

00:26:55.334 --> 00:26:57.334
Um, this is just handling
the OAuth dance,

00:26:57.334 --> 00:26:59.367
and that's the important part.

00:26:59.367 --> 00:27:01.400
And the stuff up here is just,

00:27:01.400 --> 00:27:03.400
uh, used for basic
key management.

00:27:03.400 --> 00:27:06.567
It's important to note
that here, I'm using

00:27:06.567 --> 00:27:08.667
the Documents List API scope,

00:27:08.667 --> 00:27:10.767
so the token I get back
is scoped, uh,

00:27:10.767 --> 00:27:12.767
for the scopes that you request.

00:27:12.767 --> 00:27:14.834
So here, I'm requesting
docs.google.com/feeds--

00:27:14.834 --> 00:27:18.601
uh, that's the base URL of
the Google Documents List API.

00:27:18.601 --> 00:27:24.167
And when this scope comes
into the authorization logic,

00:27:24.167 --> 00:27:27.000
on Google's end, what we do is,
uh, look at these scopes,

00:27:27.000 --> 00:27:29.801
and then determine what we have
to ask the user permission for.

00:27:29.801 --> 00:27:31.734
So in this particular case,
it's Google Docs.

00:27:31.734 --> 00:27:35.567
Um, if this said something
like "contacts" in the URL,

00:27:35.567 --> 00:27:37.567
then the user would see,
you know,

00:27:37.567 --> 00:27:39.968
this application wants
to access your contacts.

00:27:39.968 --> 00:27:43.801
So, uh, that's pretty much it
for the OAuth logic.

00:27:43.801 --> 00:27:46.801
I highly recommend you just
come in here and copy exactly

00:27:46.801 --> 00:27:48.801
what I did, and not try
to implement this yourself,

00:27:48.801 --> 00:27:51.801
uh, because this is kind of
a pain to get working.

00:27:51.801 --> 00:27:53.801
Um,

00:27:53.801 --> 00:27:56.801
so that's the OAuth handler,
and then the last part,

00:27:56.801 --> 00:28:00.000
uh, starts to work with
the Documents List API.

00:28:00.000 --> 00:28:03.167
Um, so working with
the Documents List API,

00:28:03.167 --> 00:28:05.634
uh, there are a number
of best practices,

00:28:05.634 --> 00:28:08.868
and a lot of those are exposed
here in the collection handler.

00:28:08.868 --> 00:28:12.100
So you'll remember,
we have two general goals--

00:28:12.100 --> 00:28:14.634
uh, the first is to show
the user a page

00:28:14.634 --> 00:28:16.834
in which all of their
collections are available,

00:28:16.834 --> 00:28:18.634
uh, in a tree form,

00:28:18.634 --> 00:28:21.467
and the second goal is to,

00:28:21.467 --> 00:28:23.367
uh, be able to upload a file

00:28:23.367 --> 00:28:25.367
to one of those collections.

00:28:25.367 --> 00:28:27.367
So the first thing
we're going to do

00:28:27.367 --> 00:28:29.367
is look at this tree generation.

00:28:29.367 --> 00:28:32.634
So, uh, what we can do
with the collection handler

00:28:32.634 --> 00:28:35.467
is, uh, look at something

00:28:35.467 --> 00:28:38.334
like the generate
collections tree method.

00:28:38.334 --> 00:28:40.334
So what this does

00:28:40.334 --> 00:28:43.300
is it turns a flat
representation of a tree

00:28:43.300 --> 00:28:47.067
into a, uh, hierarchical
representation of a tree.

00:28:47.067 --> 00:28:50.067
So the Documents List API,

00:28:50.067 --> 00:28:52.067
when you make a request,

00:28:52.067 --> 00:28:54.067
sends back collections
in a flat list,

00:28:54.067 --> 00:28:56.834
so the, uh, root collection

00:28:56.834 --> 00:29:00.467
may be at the same--
the same place in the list

00:29:00.467 --> 00:29:02.534
as, uh, you know,

00:29:02.534 --> 00:29:04.968
the My Book collection,

00:29:04.968 --> 00:29:08.267
or the, uh, Photos collection,
something like that.

00:29:08.267 --> 00:29:10.267
So you've just got
this flat list--

00:29:10.267 --> 00:29:12.300
everything's the same level.

00:29:12.300 --> 00:29:14.267
Here, we use
a recursive traversal

00:29:14.267 --> 00:29:17.033
to turn this into a tree,

00:29:17.033 --> 00:29:20.767
uh, that we can later walk
to show something on the screen.

00:29:20.767 --> 00:29:24.267
So for instance, uh, when
we show this to the screen,

00:29:24.267 --> 00:29:27.734
we need to be able to
recursively generate this,

00:29:27.734 --> 00:29:30.767
right? Because, for instance,
here, protagonists

00:29:30.767 --> 00:29:33.367
is a subcollection of My Book.

00:29:33.367 --> 00:29:35.567
It's a subcollection of Home.

00:29:35.567 --> 00:29:38.567
So when we walk through this,
we're actually creating

00:29:38.567 --> 00:29:40.467
a new element for each
individual child,

00:29:40.467 --> 00:29:42.601
and then we're creating
the element for the parent,

00:29:42.601 --> 00:29:45.033
and so on, uh,
walking back up the tree.

00:29:45.033 --> 00:29:48.033
So let me go back.

00:29:48.033 --> 00:29:50.033
So this is just a recursive--

00:29:50.033 --> 00:29:52.234
a recursive call to do this.

00:29:52.234 --> 00:29:55.234
You can see here,
parent.subcollections.append,

00:29:55.234 --> 00:29:58.100
and then I actually called
the same method name again,

00:29:58.100 --> 00:30:01.901
um, to generate the sub-tree
of those collections.

00:30:01.901 --> 00:30:05.934
Um, there are some other
helper methods in here,

00:30:05.934 --> 00:30:08.801
but they're not really,
uh, that important

00:30:08.801 --> 00:30:12.334
if you read through them,
they're obvious in function.

00:30:12.334 --> 00:30:16.534
So before I call the method
to generate the tree,

00:30:16.534 --> 00:30:19.834
what I'm going to do is
say "Collections equals"--

00:30:19.834 --> 00:30:22.901
Remember, our authorized
client is here--

00:30:22.901 --> 00:30:24.901
".GetDocList,"

00:30:24.901 --> 00:30:27.467
so this is just a helper method
to make some HTTP requests

00:30:27.467 --> 00:30:30.400
and pull down, um,
a list of resources

00:30:30.400 --> 00:30:32.400
from the API.

00:30:32.400 --> 00:30:34.868
So here,
"feeds default private full"--

00:30:34.868 --> 00:30:37.901
you can ignore all of that.
Uh, hyphen, folder--

00:30:37.901 --> 00:30:41.801
This says, "Give me all of--
all of the folders,

00:30:41.801 --> 00:30:45.100
"or all of the collections
from the Documents List API,

00:30:45.100 --> 00:30:47.100
so that I can do something
with them."

00:30:47.100 --> 00:30:49.000
Uh, there's an important
parameter here

00:30:49.000 --> 00:30:51.234
called "showroot equals true,"

00:30:51.234 --> 00:30:53.234
so by default,

00:30:53.234 --> 00:30:55.868
uh, collections in Google Docs,

00:30:55.868 --> 00:31:00.167
uh, exist with, uh,
no understanding

00:31:00.167 --> 00:31:02.234
of a root collection, okay?

00:31:02.234 --> 00:31:04.133
So there's not, like,
a root collection

00:31:04.133 --> 00:31:06.133
that a user can go delete,
right?

00:31:06.133 --> 00:31:08.133
Because if they deleted
the root collection,

00:31:08.133 --> 00:31:10.133
that would be awkward, right?

00:31:10.133 --> 00:31:13.133
Um, so we don't expose that
in the API.

00:31:13.133 --> 00:31:15.067
We don't say,
"Here's a root collection

00:31:15.067 --> 00:31:17.701
that you can manipulate
just like other collections."

00:31:17.701 --> 00:31:20.701
You can't delete this,
so we don't even show it.

00:31:20.701 --> 00:31:22.701
Um, it's just assumed to exist,
uh, so here,

00:31:22.701 --> 00:31:24.701
when we say
"show root equals true,"

00:31:24.701 --> 00:31:27.868
what we're actually
doing is saying, um,

00:31:27.868 --> 00:31:31.200
for all of
the other collections, uh,

00:31:31.200 --> 00:31:33.200
give them a special label

00:31:33.200 --> 00:31:35.968
if they are in root, okay?

00:31:35.968 --> 00:31:38.634
So we still don't give you back
a root collection,

00:31:38.634 --> 00:31:40.634
but we say
for all of the other ones,

00:31:40.634 --> 00:31:43.767
if they happen to be at the top
level, say so, okay?

00:31:43.767 --> 00:31:46.534
Um, and then here, uh,

00:31:46.534 --> 00:31:48.534
for I.N. range collections,

00:31:48.534 --> 00:31:50.534
we're just iterating
through the number of--

00:31:50.534 --> 00:31:52.200
or, through each collection--

00:31:52.200 --> 00:31:55.801
we're generating
the collections tree, and, uh,

00:31:55.801 --> 00:31:59.200
you know, turning that
into a JSON form.

00:31:59.200 --> 00:32:01.234
So this Get request

00:32:01.234 --> 00:32:04.067
is actually gonna be used
via AJAX,

00:32:04.067 --> 00:32:07.067
and we're going to say,
you know, to JavaScript,

00:32:07.067 --> 00:32:09.400
"Here's a JSON
tree representation

00:32:09.400 --> 00:32:12.400
"of all of the collections
in this user's documents list.

00:32:12.400 --> 00:32:14.400
"Now it's up to you, JavaScript,
to turn that

00:32:14.400 --> 00:32:16.067
into a user interface, okay?"

00:32:16.067 --> 00:32:18.067
So this is server-side logic.

00:32:18.067 --> 00:32:20.067
We're doing the tree generation,
server-side,

00:32:20.067 --> 00:32:22.667
and then the client
is receiving that

00:32:22.667 --> 00:32:25.334
and turning that
into a UI representation.

00:32:25.334 --> 00:32:28.834
And then here,
you can see that we set

00:32:28.834 --> 00:32:31.834
the content type of the response
to text/JSON,

00:32:31.834 --> 00:32:34.901
and we write out, uh, the tree.

00:32:34.901 --> 00:32:38.434
So that was collection handler.

00:32:38.434 --> 00:32:40.434
Let's go back to the UI

00:32:40.434 --> 00:32:42.434
and review everything
that's happening.

00:32:42.434 --> 00:32:45.634
Uh, default handler
is generating this page.

00:32:45.634 --> 00:32:48.634
By default, though,
if I refresh, for instance--

00:32:48.634 --> 00:32:52.000
Whoops. Sorry, killed
my App Engine app.

00:32:55.968 --> 00:32:57.901
Whoops.

00:33:00.534 --> 00:33:02.601
So let me just
start this back up.

00:33:02.601 --> 00:33:05.367
Here. See? App Engine
is as simple as that.

00:33:05.367 --> 00:33:07.834
Here, you can see
the title loads first.

00:33:07.834 --> 00:33:10.200
Why does that happen?
There's a slight delay.

00:33:10.200 --> 00:33:13.200
Let's look again. Title
loads first, then the rest.

00:33:13.200 --> 00:33:15.701
It's because
the title loads first

00:33:15.701 --> 00:33:17.367
as part of the base template,

00:33:17.367 --> 00:33:21.534
and then an AJAX request is
being made to collections.JSON,

00:33:21.534 --> 00:33:23.801
that--that method
that we just looked at,

00:33:23.801 --> 00:33:27.067
um, to fetch this and then
generate it in the UI, okay?

00:33:27.067 --> 00:33:29.133
So why do we do it this way?

00:33:29.133 --> 00:33:31.234
There are a couple
of good reasons.

00:33:31.234 --> 00:33:34.901
Firstly, uh, in general,
for large numbers of objects,

00:33:34.901 --> 00:33:38.467
you don't want to do tree
generation client-side, okay?

00:33:38.467 --> 00:33:41.834
You don't want to iterate
a very, very large number

00:33:41.834 --> 00:33:45.634
of objects or do some recursive
generation in the browser.

00:33:45.634 --> 00:33:48.501
You would much rather
do that server-side,

00:33:48.501 --> 00:33:51.734
cache it, and then send it
to the browser, right?

00:33:51.734 --> 00:33:54.767
Because, you know,
our thousands of servers

00:33:54.767 --> 00:33:57.767
are frankly faster
than your MacBook Arrow.

00:33:57.767 --> 00:34:00.734
So, uh, let us do
the tree generation,

00:34:00.734 --> 00:34:03.701
and then, uh,
we'll just send it off

00:34:03.701 --> 00:34:05.701
to the client already generated,

00:34:05.701 --> 00:34:07.701
and then it just creates
a much faster experience,

00:34:07.701 --> 00:34:09.300
uh, for the user.

00:34:09.300 --> 00:34:12.300
It also allows us to do things
like caching, uh, server-side,

00:34:12.300 --> 00:34:14.300
so we can just spit out
the response

00:34:14.300 --> 00:34:16.300
without even bothering
to go re-fetch

00:34:16.300 --> 00:34:18.100
the whole collections list.

00:34:18.100 --> 00:34:21.100
And then we can do things like
cache expiration detection,

00:34:21.100 --> 00:34:23.534
where we just pull the Documents
List and look for a change,

00:34:23.534 --> 00:34:25.200
and if there's a change,

00:34:25.200 --> 00:34:27.200
we'll expire the cache
and then re-fetch.

00:34:27.200 --> 00:34:29.567
Um, so all of that should be
transparent to the user.

00:34:29.567 --> 00:34:31.400
So again, that's why you get
this delay here

00:34:31.400 --> 00:34:34.534
between the title and this,
and then what we could do is,

00:34:34.534 --> 00:34:38.133
for instance, cache this
browser-side, uh, you know,

00:34:38.133 --> 00:34:41.467
with local storage in HTML5.

00:34:41.467 --> 00:34:44.467
So, uh, what else
is going on here?

00:34:44.467 --> 00:34:47.934
Um, when we drop a file on,
something has to happen, right?

00:34:47.934 --> 00:34:49.868
There must be code in the world

00:34:49.868 --> 00:34:52.033
that handles
this file drop action,

00:34:52.033 --> 00:34:54.033
um, and we haven't
looked at it yet,

00:34:54.033 --> 00:34:56.033
so let's take a look at it now.

00:34:56.033 --> 00:34:59.667
Firstly, in Chrome, if you go to
"inspect element" on anything,

00:34:59.667 --> 00:35:01.734
you'll see
a whole bunch of stuff

00:35:01.734 --> 00:35:03.734
that we don't really care about,

00:35:03.734 --> 00:35:05.734
and then you'll see this
"input type equals file."

00:35:05.734 --> 00:35:07.734
Let me see if I can
zoom in here. Whoops.

00:35:07.734 --> 00:35:09.734
So "input type equals file,"

00:35:09.734 --> 00:35:12.734
uh, "name equals files,"
"multiple class equals file."

00:35:12.734 --> 00:35:15.234
Okay? So the word "file"
is probably used

00:35:15.234 --> 00:35:17.234
too many times there.

00:35:17.234 --> 00:35:20.234
Um, but essentially,
its type is "file,"

00:35:20.234 --> 00:35:22.234
so an input type of file means,

00:35:22.234 --> 00:35:24.501
uh, you can browse for a file,

00:35:24.501 --> 00:35:26.934
uh, select it, and then
click "upload" later on.

00:35:26.934 --> 00:35:29.934
And then its name is "files,"

00:35:29.934 --> 00:35:31.934
uh, so here, we're just saying

00:35:31.934 --> 00:35:34.667
we're going to accept
multiple files, um,

00:35:34.667 --> 00:35:36.434
at--to be dropped at once.

00:35:36.434 --> 00:35:38.434
So I could grab
all of my photos,

00:35:38.434 --> 00:35:40.434
drop them on--on a collection,

00:35:40.434 --> 00:35:42.434
and then just--boom,
they all get uploaded.

00:35:42.434 --> 00:35:44.434
And then, uh,
"class equals file"--

00:35:44.434 --> 00:35:46.434
this is important
for a different reason.

00:35:46.434 --> 00:35:48.601
So you don't see an "upload"
button here at all, right?

00:35:48.601 --> 00:35:51.400
So what we're doing is something
very, very sneaky.

00:35:51.400 --> 00:35:54.400
Uh, we are on this file object,

00:35:54.400 --> 00:35:57.801
setting its opacity to 0,

00:35:57.801 --> 00:36:00.868
and its position to absolute,

00:36:00.868 --> 00:36:03.167
and then making it 100%
width and height.

00:36:03.167 --> 00:36:06.000
So what we're actually doing
is hiding the button,

00:36:06.000 --> 00:36:08.200
and then we're expanding
the whole thing,

00:36:08.200 --> 00:36:10.534
uh, to fill this entire cell,

00:36:10.534 --> 00:36:12.767
so that if you drop
anywhere on this,

00:36:12.767 --> 00:36:16.667
we'll receive a drop action
on this, uh, file input.

00:36:16.667 --> 00:36:19.767
Once we receive the drop action
in JavaScript, we can--

00:36:19.767 --> 00:36:21.701
you know, we can work with it.

00:36:21.701 --> 00:36:24.300
So let's take a look
at the actual JavaScript

00:36:24.300 --> 00:36:27.300
that does this.

00:36:27.300 --> 00:36:30.300
Let me go to
G Categorical.ly again,

00:36:30.300 --> 00:36:33.300
and static/js.

00:36:33.300 --> 00:36:36.701
base.js.

00:36:36.701 --> 00:36:38.701
Okay, so more code.

00:36:38.701 --> 00:36:40.701
Whole bunch of stuff
is going on here.

00:36:40.701 --> 00:36:42.701
Uh, most of it is irrelevant.

00:36:42.701 --> 00:36:45.300
Um, "refresh collections"--

00:36:45.300 --> 00:36:47.300
all this really does

00:36:47.300 --> 00:36:50.934
is, uh, generates a--

00:36:50.934 --> 00:36:52.934
actually,
it takes a collection tree

00:36:52.934 --> 00:36:54.934
that was generated server-side,

00:36:54.934 --> 00:36:56.934
and it renders it to the screen.

00:36:56.934 --> 00:36:59.968
So here, you can see
"render collection tree,"

00:36:59.968 --> 00:37:02.534
so let's find
render collection tree.

00:37:05.000 --> 00:37:06.667
So here's the method.

00:37:06.667 --> 00:37:08.667
So you can see, a whole
lot of stuff is going on.

00:37:08.667 --> 00:37:10.667
Um, all this really does

00:37:10.667 --> 00:37:13.167
is generate some HTML elements,

00:37:13.167 --> 00:37:16.167
and then put them into
the--into the DOM, okay?

00:37:16.167 --> 00:37:18.801
So, uh, we're creating
a new cell,

00:37:18.801 --> 00:37:21.167
a cell being the thing
that contains the collection,

00:37:21.167 --> 00:37:23.167
like, uh, My Book,

00:37:23.167 --> 00:37:26.167
and then this is a div element,
so basic HTML here,

00:37:26.167 --> 00:37:29.067
and we're giving it
a special CSS class, okay?

00:37:29.067 --> 00:37:32.067
And then we're appending a form,

00:37:32.067 --> 00:37:34.100
and we're giving the form
some parameters.

00:37:34.100 --> 00:37:37.067
Then we're appending a label
and a couple of input fields.

00:37:37.067 --> 00:37:39.067
So all of these are important.

00:37:39.067 --> 00:37:41.067
The input field here
is called "parent."

00:37:41.067 --> 00:37:43.067
Remember, we have to say

00:37:43.067 --> 00:37:45.067
where this file should go
when you drop it?

00:37:45.067 --> 00:37:47.067
Uh, so "parent" here
is the resource identifier

00:37:47.067 --> 00:37:50.067
of this individual collection,
which is some, uh,

00:37:50.067 --> 00:37:52.067
arbitrary string
of characters, uh,

00:37:52.067 --> 00:37:54.067
just to identify
this particular collection.

00:37:54.067 --> 00:37:56.601
Uh, here, we have
a "submit" button.

00:37:56.601 --> 00:37:58.601
We're going to hide this
in the UI,

00:37:58.601 --> 00:38:00.601
because the user should never
have to click "submit."

00:38:00.601 --> 00:38:02.667
This is, like, the web 2.0 era,

00:38:02.667 --> 00:38:04.667
so submit buttons
are so obsolete.

00:38:04.667 --> 00:38:06.701
And then we have the, uh,

00:38:06.701 --> 00:38:08.968
file input that we
just took a look at.

00:38:08.968 --> 00:38:11.734
Um, and here, we're setting
those attributes

00:38:11.734 --> 00:38:13.767
that we--that we just saw.

00:38:13.767 --> 00:38:16.100
So let me go back
to the browser.

00:38:16.100 --> 00:38:18.868
Remember, um, these attributes,

00:38:18.868 --> 00:38:22.300
so we have, uh,
"input type equals submit,"

00:38:22.300 --> 00:38:24.334
"input type equals file."

00:38:24.334 --> 00:38:27.868
Those are actually generated,
uh, right here.

00:38:27.868 --> 00:38:29.868
So "input type equals submit,"

00:38:29.868 --> 00:38:31.868
"input type equals file."

00:38:31.868 --> 00:38:34.100
So in JavaScript, we're just
dynamically generating

00:38:34.100 --> 00:38:37.234
these elements, and then we
are appending them to the DOM.

00:38:37.234 --> 00:38:40.234
And then lastly, on this--

00:38:40.234 --> 00:38:43.300
on this, uh, on this form input,

00:38:43.300 --> 00:38:45.300
we are--sorry, I misspoke--

00:38:45.300 --> 00:38:48.300
on this file input--this one--

00:38:48.300 --> 00:38:51.300
what we are doing is binding it
to a change event,

00:38:51.300 --> 00:38:54.300
so the change event means,

00:38:54.300 --> 00:38:56.300
like, somebody
dropped a file on here,

00:38:56.300 --> 00:38:59.300
and then we're calling
the click method

00:38:59.300 --> 00:39:02.367
on the submit button.
So web 2.0 era--

00:39:02.367 --> 00:39:04.367
we can click buttons for users.

00:39:04.367 --> 00:39:06.801
So here,
we're just calling click

00:39:06.801 --> 00:39:09.801
on the submit button
that we created right here,

00:39:09.801 --> 00:39:11.801
uh, as soon as somebody drops

00:39:11.801 --> 00:39:13.801
one or more files
onto the input.

00:39:13.801 --> 00:39:15.801
Um, and then that's it.

00:39:15.801 --> 00:39:19.133
So, uh, that's how we're
handling the drop event.

00:39:19.133 --> 00:39:22.200
So again, if I come back here,

00:39:22.200 --> 00:39:24.634
essentially,

00:39:24.634 --> 00:39:28.167
the use case is,

00:39:28.167 --> 00:39:31.167
I take a file,

00:39:31.167 --> 00:39:33.167
I drop it on a collection,

00:39:33.167 --> 00:39:36.167
so, My Books,
and then the upload happens.

00:39:36.167 --> 00:39:38.133
So when that happened,
we're sending--

00:39:38.133 --> 00:39:41.133
we're just submitting the form--
the hidden form.

00:39:41.133 --> 00:39:43.133
The hidden form
is submitting off, uh,

00:39:43.133 --> 00:39:45.167
to the URL that
we provided earlier,

00:39:45.167 --> 00:39:48.300
and then we automatically
get, uh, rerouted back

00:39:48.300 --> 00:39:50.300
to the main page after
the file has been uploaded,

00:39:50.300 --> 00:39:52.567
and then the file shows up
something like this.

00:39:52.567 --> 00:39:55.167
Um, so that's--

00:39:55.167 --> 00:39:57.167
that's a pretty basic
introduction

00:39:57.167 --> 00:39:59.167
to what this code does,
but again,

00:39:59.167 --> 00:40:01.167
if you walk through it,
we just have a--

00:40:01.167 --> 00:40:03.167
a couple of different things
to manage,

00:40:03.167 --> 00:40:05.167
and most of the code
is marshaling data

00:40:05.167 --> 00:40:08.000
between, uh, two handlers.
It's a lot of helper methods.

00:40:08.000 --> 00:40:11.000
The meat of the application is
actually only a couple of lines

00:40:11.000 --> 00:40:14.100
of important things.

00:40:14.100 --> 00:40:16.534
So let's go back
to the presentation,

00:40:16.534 --> 00:40:18.701
if I can find that.

00:40:25.000 --> 00:40:28.934
And let me go full screen.

00:40:28.934 --> 00:40:30.868
Whoops.

00:40:35.200 --> 00:40:38.200
Okay, so let's go through
some best practices,

00:40:38.200 --> 00:40:40.200
because you're
all here to learn, uh,

00:40:40.200 --> 00:40:43.267
deep details on how to use
the API best.

00:40:43.267 --> 00:40:45.901
Firstly, use resumable upload
for everything.

00:40:45.901 --> 00:40:48.901
It's only a good thing,
and it's very easy to use.

00:40:48.901 --> 00:40:50.901
There's no barriers entry, um,

00:40:50.901 --> 00:40:53.968
and it allows you to use
the application

00:40:53.968 --> 00:40:56.234
in more environments
on more devices.

00:40:56.234 --> 00:40:59.234
Uh, you should fetch

00:40:59.234 --> 00:41:02.534
as many resources as possible
in a single request.

00:41:02.534 --> 00:41:05.033
Um, why--why is this good?

00:41:05.033 --> 00:41:07.734
Well, firstly, there's, uh,
there's a round-trip time

00:41:07.734 --> 00:41:09.734
for any HTTP request.

00:41:09.734 --> 00:41:12.434
I mean, we're Google. We serve
things really, really quickly.

00:41:12.434 --> 00:41:15.501
But, uh, there are networks in
between that don't go so fast,

00:41:15.501 --> 00:41:18.834
and so you want to reduce
the number of requests you make

00:41:18.834 --> 00:41:21.133
as much as possible,
so for instance,

00:41:21.133 --> 00:41:24.267
I want to pull all of the fold--
or all of the collections

00:41:24.267 --> 00:41:28.000
in a single request,
and then manipulate them, okay?

00:41:28.000 --> 00:41:31.100
I don't want to pull them
in multiple requests, uh,

00:41:31.100 --> 00:41:34.100
and have to, like,
just load up my list

00:41:34.100 --> 00:41:37.067
and then manipulate them.
That's a longer process.

00:41:37.067 --> 00:41:40.734
You should, uh, cache
each resource individually,

00:41:40.734 --> 00:41:42.868
so with the Documents List API,

00:41:42.868 --> 00:41:44.868
you get a list
of resources back.

00:41:44.868 --> 00:41:46.868
Each one should be
cached individually

00:41:46.868 --> 00:41:48.868
so that you can expire caches

00:41:48.868 --> 00:41:51.968
on an individual
resource basis, okay?

00:41:51.968 --> 00:41:53.968
So if one resource changes,

00:41:53.968 --> 00:41:55.968
why would you re-fetch
all of the other resources?

00:41:55.968 --> 00:41:57.968
That doesn't make any sense.

00:41:57.968 --> 00:41:59.968
so cache each resource
individually,

00:41:59.968 --> 00:42:02.033
and you will drastically improve

00:42:02.033 --> 00:42:04.033
the performance
of your application.

00:42:04.033 --> 00:42:05.701
Uh, I've already said

00:42:05.701 --> 00:42:07.701
perform collection tree
generation server-side,

00:42:07.701 --> 00:42:10.701
and then, uh, cache
the collection trees

00:42:10.701 --> 00:42:13.200
and their contents
server-side, as well,

00:42:13.200 --> 00:42:15.200
so that you're just sending
down to the client

00:42:15.200 --> 00:42:17.601
the processed data,
so the client doesn't

00:42:17.601 --> 00:42:19.601
have to do anything
on their end,

00:42:19.601 --> 00:42:23.467
especially if they have a device
with not a lot of power.

00:42:23.467 --> 00:42:25.968
Um, if you're
implementing something

00:42:25.968 --> 00:42:28.400
like a synchronization client,

00:42:28.400 --> 00:42:32.634
each resource has this field
called "app:edited,"

00:42:32.634 --> 00:42:36.100
and what that means is,
when that date changes,

00:42:36.100 --> 00:42:39.367
uh, it implies that the user

00:42:39.367 --> 00:42:42.267
has made some change
to the resource.

00:42:42.267 --> 00:42:45.234
So for instance,
if we take the, uh,

00:42:45.234 --> 00:42:49.300
example of a text document,
if the app edited date changes

00:42:49.300 --> 00:42:51.100
and your application notices,

00:42:51.100 --> 00:42:54.100
that would indicate that
the user has logged in

00:42:54.100 --> 00:42:56.567
to the Google Docs user
interface and changed something

00:42:56.567 --> 00:42:58.701
in the document,
so that something could be,

00:42:58.701 --> 00:43:01.501
you know, they bolded this word,
or they inserted this image--

00:43:01.501 --> 00:43:03.501
uh, anything.

00:43:03.501 --> 00:43:05.501
Um, some more best practices--

00:43:05.501 --> 00:43:08.501
um, when sharing,

00:43:08.501 --> 00:43:11.300
uh, resources
with the Documents List API,

00:43:11.300 --> 00:43:13.300
you can share with a key,

00:43:13.300 --> 00:43:15.400
and this is like
"a top-secret password,"

00:43:15.400 --> 00:43:17.400
uh, that gets appended to a URL.

00:43:17.400 --> 00:43:19.767
And then everybody you give
that URL to

00:43:19.767 --> 00:43:22.267
can now, uh, access
the document,

00:43:22.267 --> 00:43:24.267
so it's not really
that top-secret,

00:43:24.267 --> 00:43:26.267
because people can
just share the link,

00:43:26.267 --> 00:43:29.267
but it essentially restricts
access based on having a link.

00:43:29.267 --> 00:43:32.934
So, uh, one question
that I get a lot is,

00:43:32.934 --> 00:43:34.934
"How do you set the initial key,

00:43:34.934 --> 00:43:36.934
uh, for this URL?"

00:43:36.934 --> 00:43:39.934
And the answer is, uh,
you can't set the key.

00:43:39.934 --> 00:43:41.934
We just generate one for you.

00:43:41.934 --> 00:43:43.934
So when you set the initial key,

00:43:43.934 --> 00:43:45.934
it's going to automatically
be overridden, so you could put

00:43:45.934 --> 00:43:48.934
like, my super-secret password
in there,

00:43:48.934 --> 00:43:50.934
and we're just gonna
throw that out

00:43:50.934 --> 00:43:52.934
and use something
a little bit more secure

00:43:52.934 --> 00:43:54.934
than my super password, right?

00:43:54.934 --> 00:43:56.934
Um, also, uh, access control
list requests.

00:43:56.934 --> 00:43:58.934
So essentially,
sharing requests,

00:43:58.934 --> 00:44:01.934
uh, should be batched together
as much as possible.

00:44:01.934 --> 00:44:03.934
If you have
an enterprise domain,

00:44:03.934 --> 00:44:05.901
and you're trying to share
something with 1,000

00:44:05.901 --> 00:44:07.901
out of 8,000
of your employees,

00:44:07.901 --> 00:44:10.667
you should batch those requests,

00:44:10.667 --> 00:44:12.634
those individual share requests,

00:44:12.634 --> 00:44:16.634
uh, into single requests,
uh, into a single request

00:44:16.634 --> 00:44:18.634
to the Documents List API,
right?

00:44:18.634 --> 00:44:20.634
Um, so why send 8,000 requests

00:44:20.634 --> 00:44:22.968
to the API when you
can send one, right?

00:44:22.968 --> 00:44:25.968
Remember, a smaller number
of requests is better.

00:44:25.968 --> 00:44:28.634
Um, also, to share
a large number of items

00:44:28.634 --> 00:44:31.133
at once like that,
it's actually best

00:44:31.133 --> 00:44:33.133
to put them all in a collection,

00:44:33.133 --> 00:44:35.133
and then just share
the collection.

00:44:35.133 --> 00:44:38.133
And if you share a collection,
that will give view access

00:44:38.133 --> 00:44:40.501
to everything in the collection
by default,

00:44:40.501 --> 00:44:43.501
um, for every user
that you share it with.

00:44:43.501 --> 00:44:46.501
Um, we've also added
some features recently

00:44:46.501 --> 00:44:50.601
that allow you to easily back up
employees' Documents List

00:44:50.601 --> 00:44:52.601
using admin access

00:44:52.601 --> 00:44:56.400
on your Google Apps,
uh, for Business domain, okay?

00:44:56.400 --> 00:44:58.934
Um, so I'm not sure
how many people here

00:44:58.934 --> 00:45:00.934
work in the enterprise setting?

00:45:00.934 --> 00:45:03.000
So you develop apps
for your company.

00:45:03.000 --> 00:45:05.400
Uh, this is actually
important for you.

00:45:05.400 --> 00:45:08.968
Um, if you have a company--
or, I misspoke--

00:45:08.968 --> 00:45:10.968
if you have, for instance,
leave the company

00:45:10.968 --> 00:45:13.968
and you need to do some sort of
discovery on all of their Docs,

00:45:13.968 --> 00:45:17.601
or something like that,
a Google apps administrator only

00:45:17.601 --> 00:45:19.601
can access this

00:45:19.601 --> 00:45:23.200
and impersonate that user
just to do a backup,

00:45:23.200 --> 00:45:25.200
okay?

00:45:25.200 --> 00:45:28.200
So that just eases
a lot of hassles with, uh,

00:45:28.200 --> 00:45:31.200
Google Apps domains.

00:45:31.200 --> 00:45:33.200
Uh, my final best practice,

00:45:33.200 --> 00:45:35.200
uh, is to use OAuth

00:45:35.200 --> 00:45:38.200
whenever possible,
without exception.

00:45:38.200 --> 00:45:42.200
So if you have a choice
between using OAuth,

00:45:42.200 --> 00:45:44.200
AuthSub, client login,

00:45:44.200 --> 00:45:46.200
definitely use OAuth,

00:45:46.200 --> 00:45:50.000
even if you're writing
an application that is, uh,

00:45:50.000 --> 00:45:52.467
installed on a server, okay?

00:45:52.467 --> 00:45:55.467
So for an application that's
installed on a server, uh,

00:45:55.467 --> 00:45:58.701
where you can't, for instance,
uh, you know,

00:45:58.701 --> 00:46:00.701
show a browser

00:46:00.701 --> 00:46:03.067
and then authorize,
you know, this token,

00:46:03.067 --> 00:46:05.067
what you should do is,

00:46:05.067 --> 00:46:08.067
if you don't have a Google apps
for business domain,

00:46:08.067 --> 00:46:10.400
in which you can use
2-legged OAuth,

00:46:10.400 --> 00:46:12.734
that means you have to use
3-legged OAuth,

00:46:12.734 --> 00:46:15.234
and these terms again, are
discussed in other talks here,

00:46:15.234 --> 00:46:18.868
but 3-legged OAuth can be done
using a stored token.

00:46:18.868 --> 00:46:21.400
So what you would do
is, in a web browser,

00:46:21.400 --> 00:46:24.400
run through once and authorize
a single token,

00:46:24.400 --> 00:46:26.734
and then you would essentially
paste that token

00:46:26.734 --> 00:46:29.133
into your script
or into your program

00:46:29.133 --> 00:46:31.133
that's going to run
on the server,

00:46:31.133 --> 00:46:33.133
and now that program can make

00:46:33.133 --> 00:46:35.133
authorized requests
indefinitely, okay?

00:46:35.133 --> 00:46:37.133
So no web browser involved.

00:46:37.133 --> 00:46:39.968
That's kind of a way
to circumvent the need

00:46:39.968 --> 00:46:42.968
for 2-legged OAuth,
which skips the browser.

00:46:42.968 --> 00:46:46.334
Okay, so, you know, in closing,

00:46:46.334 --> 00:46:48.334
you should definitely
be considering

00:46:48.334 --> 00:46:51.334
the Documents List API
for any of your cloud storage,

00:46:51.334 --> 00:46:53.334
especially because
it's free to use,

00:46:53.334 --> 00:46:56.334
and your users are going
to pay for the quota, okay?

00:46:56.334 --> 00:46:59.834
Actually, not even pay. We're
just going to give it to them.

00:46:59.834 --> 00:47:03.200
Um, so this is
a much better solution

00:47:03.200 --> 00:47:05.200
than some other options,
and additionally,

00:47:05.200 --> 00:47:08.200
you get things like
a built-in web interface, uh,

00:47:08.200 --> 00:47:10.200
for all of these items,
built-in sharing,

00:47:10.200 --> 00:47:12.200
and built-in
resource management,

00:47:12.200 --> 00:47:15.200
um, from the user's end.

00:47:15.200 --> 00:47:17.901
So just for some more resources,

00:47:17.901 --> 00:47:20.501
you can take a look
at the documentation,

00:47:20.501 --> 00:47:22.501
which has a Google link there.

00:47:22.501 --> 00:47:24.501
Um, and also the forum,

00:47:24.501 --> 00:47:26.501
so if you have a question,

00:47:26.501 --> 00:47:29.501
and you, for some reason,
cannot find me

00:47:29.501 --> 00:47:31.501
on the internet,

00:47:31.501 --> 00:47:33.534
uh, you can post in the forum,

00:47:33.534 --> 00:47:36.501
and myself or one of our very
small team will respond to you.

00:47:36.501 --> 00:47:39.501
I mean, I was responding
to posts on the forum

00:47:39.501 --> 00:47:42.067
at, like, 4:00 a.m.
this morning, okay?

00:47:42.067 --> 00:47:44.501
I'm dedicated, right?

00:47:44.501 --> 00:47:46.501
So, uh, then also the code

00:47:46.501 --> 00:47:49.501
for the sample application
is right there.

00:47:49.501 --> 00:47:52.501
And, uh, I just wanted
to give a quick thanks, uh,

00:47:52.501 --> 00:47:54.501
to a couple members
of the team.

00:47:54.501 --> 00:47:56.501
That would be Rob, Russ, Ivan,

00:47:56.501 --> 00:47:58.501
and the rest
of the Google Docs team.

00:47:58.501 --> 00:48:00.834
Uh, so I feel pretty passionate
about this product,

00:48:00.834 --> 00:48:03.901
and you should, too,
because a whole lot of good,

00:48:03.901 --> 00:48:06.167
good work goes
into this product.

00:48:06.167 --> 00:48:09.167
When I look at where we were,
for instance, four years ago

00:48:09.167 --> 00:48:11.167
versus today, it's just
night and day different,

00:48:11.167 --> 00:48:13.167
and now we're providing
a really stable,

00:48:13.167 --> 00:48:15.868
uh, sustainable API
for your consumption.

00:48:15.868 --> 00:48:17.868
So a great thanks goes out
to those guys,

00:48:17.868 --> 00:48:19.868
who do a lot of great work.

00:48:19.868 --> 00:48:22.868
Um, lastly, if you wanted to
tweet or buzz about this talk,

00:48:22.868 --> 00:48:24.868
you can use these hash tags
down here,

00:48:24.868 --> 00:48:26.868
and if you want to give me
feedback, again,

00:48:26.868 --> 00:48:28.868
please use SpeakerMeter.
The QR code is here.

00:48:28.868 --> 00:48:30.868
Um, so that's it.

00:48:30.868 --> 00:48:33.868
Thank you very much for
your time. I appreciate it.

00:48:33.868 --> 00:48:36.868
[applause]

00:48:36.868 --> 00:48:39.868
Fryzel: So I just wanted to take
questions at the microphones,

00:48:39.868 --> 00:48:41.868
please.

00:48:41.868 --> 00:48:43.367
Hmm?

00:48:43.367 --> 00:48:46.367
Oh, yeah, let me get back
to the previous.

00:48:46.367 --> 00:48:48.601
Did you have a question?

00:48:48.601 --> 00:48:51.100
man: Yeah. Hey, how's it going?
Uh, thanks, great talk.

00:48:51.100 --> 00:48:53.100
I've been using Google Docs

00:48:53.100 --> 00:48:55.100
for a couple years, um, the API.
Fryzel: Okay.

00:48:55.100 --> 00:48:58.100
man: I guess I've implemented
something using Google Docs

00:48:58.100 --> 00:49:01.100
on--in, I guess, in the cloud,
and it's great,

00:49:01.100 --> 00:49:04.167
and I think there's other
opportunities to maybe do,

00:49:04.167 --> 00:49:06.167
like, there would
be opportunities

00:49:06.167 --> 00:49:08.968
for me to port the solution
I did in the cloud, and then,

00:49:08.968 --> 00:49:11.534
like, a closed enterprise
environment, if, like, uh,

00:49:11.534 --> 00:49:14.534
Google Docs appliance
was something that existed,

00:49:14.534 --> 00:49:17.033
and I guess I was wondering
if that's ever been

00:49:17.033 --> 00:49:19.033
on the road map?

00:49:19.033 --> 00:49:21.033
Fryzel: Uh, at this time,
I'm unaware

00:49:21.033 --> 00:49:23.033
of a Google Docs appliance,
unfortunately.

00:49:23.033 --> 00:49:26.467
Um, however, in
an enterprise setting, uh,

00:49:26.467 --> 00:49:29.133
you can actually do a lot
of things to restrict access,

00:49:29.133 --> 00:49:30.801
uh, to Google Docs.

00:49:30.801 --> 00:49:32.801
For instance, you could
implement SAML single sign-on,

00:49:32.801 --> 00:49:36.000
and then put the single sign-on
page behind a firewall

00:49:36.000 --> 00:49:39.000
in your organization,
and that would actually restrict

00:49:39.000 --> 00:49:42.000
a lot of access, uh,
to things like Google Docs,

00:49:42.000 --> 00:49:44.734
because now as the single
sign-on provider,

00:49:44.734 --> 00:49:46.868
you're telling us
who is authenticated,

00:49:46.868 --> 00:49:49.367
uh, and because of that reason,

00:49:49.367 --> 00:49:51.367
if the user cannot access

00:49:51.367 --> 00:49:53.367
the authentication page
where they enter

00:49:53.367 --> 00:49:55.834
their username and password,
they can't log in.

00:49:55.834 --> 00:49:57.834
So if you'd like
to talk to me after,

00:49:57.834 --> 00:49:59.834
I can tell you
how to implement that.

00:49:59.834 --> 00:50:03.000
man: Yeah, I'll--cool, thanks.
Fryzel: Yeah, yeah. Hello.

00:50:03.000 --> 00:50:04.601
man: Hi, thanks for the talk.

00:50:04.601 --> 00:50:07.334
Um, I was wondering
if there's--with a--

00:50:07.334 --> 00:50:10.000
it's a Google Docs API question
in general,

00:50:10.000 --> 00:50:13.000
um, in requesting a resource,

00:50:13.000 --> 00:50:16.000
or entities from
a specific collection,

00:50:16.000 --> 00:50:19.501
is there a way
to only ask for, uh, items

00:50:19.501 --> 00:50:21.667
within that collection
that have--

00:50:21.667 --> 00:50:24.501
only those items in the
collection that have changed?

00:50:24.501 --> 00:50:26.501
Say, a request, you know...
Fryzel: Yes.

00:50:26.501 --> 00:50:28.501
man: From a specific folder,
and it gives me everything

00:50:28.501 --> 00:50:30.067
in that folder,
um, but, I mean,

00:50:30.067 --> 00:50:33.000
I only want the things in that
folder that have changed?

00:50:33.000 --> 00:50:35.501
Fryzel: It's funny you would
ask that question to me,

00:50:35.501 --> 00:50:38.501
because my answer to you
is that--uh, not yet.

00:50:38.501 --> 00:50:41.000
man: Okay. [laughs]
That would be nice.

00:50:41.000 --> 00:50:43.000
Fryzel: That's something we're
definitely considering, though.

00:50:43.000 --> 00:50:46.000
man: Okay, thank you.
Fryzel: Yeah.

00:50:46.000 --> 00:50:49.601
Hello.
man: Hi. My question is, um,

00:50:49.601 --> 00:50:52.000
you said if you wanted
to store, like,

00:50:52.000 --> 00:50:54.200
your own document types
in there,

00:50:54.200 --> 00:50:56.734
like, use a spreadsheet API,
or anything like that--

00:50:56.734 --> 00:51:00.000
is there any way
that there will ever be

00:51:00.000 --> 00:51:03.067
a way to where you register
your own file types

00:51:03.067 --> 00:51:05.067
through the Google Docs
interface,

00:51:05.067 --> 00:51:07.067
it would launch out to your app,

00:51:07.067 --> 00:51:09.067
or do you really have to do
like you did,

00:51:09.067 --> 00:51:11.067
and put your own face
on top of it,

00:51:11.067 --> 00:51:13.067
and really just use Docs
for storage?

00:51:13.067 --> 00:51:15.067
Fryzel: Also a very
interesting question.

00:51:15.067 --> 00:51:17.067
Uh, that is something
we are considering.

00:51:17.067 --> 00:51:19.067
man: Okay.
Fryzel: Yeah.

00:51:19.067 --> 00:51:22.067
man: Hi. So you mentioned
that administrators

00:51:22.067 --> 00:51:25.133
can impersonate an employee,

00:51:25.133 --> 00:51:27.667
which is something
that our company,

00:51:27.667 --> 00:51:30.300
as a Google Docs user,
is very interested in--

00:51:30.300 --> 00:51:33.300
employees who leave--we want
to make sure we can get access

00:51:33.300 --> 00:51:34.934
to their documents--

00:51:34.934 --> 00:51:36.934
can we only back up a list
of their documents,

00:51:36.934 --> 00:51:39.934
or can we actually back up
the contents of each document?

00:51:39.934 --> 00:51:41.934
Fryzel: Actually, you can
fully impersonate the user,

00:51:41.934 --> 00:51:44.501
so anything else
you could do in the API,

00:51:44.501 --> 00:51:47.100
you could do, uh,
while impersonating them,

00:51:47.100 --> 00:51:50.033
as a--using a Google Apps
admin account.

00:51:50.033 --> 00:51:52.501
Um, yeah.
man: Great.

00:51:52.501 --> 00:51:55.501
Fryzel: Yeah. Hi.

00:51:55.501 --> 00:51:59.133
man: Hi. Is there a, uh,
like, a high-level

00:51:59.133 --> 00:52:02.200
G Docs API in the And--

00:52:02.200 --> 00:52:05.200
I'm building an Android
mobile phone app

00:52:05.200 --> 00:52:08.200
that I want to upload a file

00:52:08.200 --> 00:52:10.200
in the Android application

00:52:10.200 --> 00:52:12.200
into the user's G Docs...

00:52:12.200 --> 00:52:14.200
Fryzel: To a user's G Docs.

00:52:14.200 --> 00:52:17.200
man: GMAIL account--is there
kind of like a high level, or...

00:52:17.200 --> 00:52:20.200
Fryzel: So, uh, can you describe

00:52:20.200 --> 00:52:22.200
your ideal outcome?

00:52:22.200 --> 00:52:24.701
Would it be an e-mail
in their inbox with the file?

00:52:24.701 --> 00:52:27.701
man: No, we would like
to just have, like a button,

00:52:27.701 --> 00:52:30.701
and then an API that
we would take our file,

00:52:30.701 --> 00:52:32.701
and then just--

00:52:32.701 --> 00:52:34.734
it ends up in the G Docs user--

00:52:34.734 --> 00:52:37.701
Fryzel: Oh, the Google
Documents List--

00:52:37.701 --> 00:52:40.701
um, this API
can do that for you.

00:52:40.701 --> 00:52:42.701
man: This one?

00:52:42.701 --> 00:52:44.701
Fryzel: Uh, even from
an Android device.

00:52:44.701 --> 00:52:47.133
So, uh, the API itself,

00:52:47.133 --> 00:52:49.133
at its core,

00:52:49.133 --> 00:52:51.801
is an HTTP RESTful API,

00:52:51.801 --> 00:52:54.801
so you send off, essentially,
web requests to do stuff.

00:52:54.801 --> 00:52:57.801
Um, however, we implement,

00:52:57.801 --> 00:52:59.801
uh, a Java client library,

00:52:59.801 --> 00:53:02.868
a Python client library,
um, a .NET client library,

00:53:02.868 --> 00:53:05.868
and a PHP client library,
and the Java client library

00:53:05.868 --> 00:53:07.534
is ideal for your use case,

00:53:07.534 --> 00:53:09.200
because you would take
the Java client,

00:53:09.200 --> 00:53:10.734
drop it into an Android app,

00:53:10.734 --> 00:53:12.734
and then you could just, uh,
you know--

00:53:12.734 --> 00:53:14.734
you'd probably register
an intent, or something,

00:53:14.734 --> 00:53:18.000
to, uh, you know, just send
the file off to Google Docs.

00:53:18.000 --> 00:53:20.000
But, yeah, totally possible,
and, in fact, I mean,

00:53:20.000 --> 00:53:22.000
we did it, with the Google Docs
app for Android.

00:53:22.000 --> 00:53:24.000
man: Sure. Okay, thank you.

00:53:24.000 --> 00:53:26.934
Fryzel: Yeah, pleasure.

00:53:26.934 --> 00:53:28.534
Hello.

00:53:28.534 --> 00:53:30.534
man: Hi. Um, is there
any way to--

00:53:30.534 --> 00:53:32.534
Fryzel: I'm sorry, I can't
hear you. Can you come closer?

00:53:32.534 --> 00:53:36.534
man: Hi. Can you hear me now?
Hello?

00:53:36.534 --> 00:53:38.534
Can you hear me now?
Fryzel: Yes.

00:53:38.534 --> 00:53:41.067
man: Okay, sorry.
Um, I was wondering,

00:53:41.067 --> 00:53:43.200
is there a way to implement
version history

00:53:43.200 --> 00:53:44.801
when uploading files?

00:53:44.801 --> 00:53:47.000
Fryzel: Yes, we have full
revision history support.

00:53:47.000 --> 00:53:49.067
You can create, retrieve,
update, and delete revisions

00:53:49.067 --> 00:53:51.467
with the API today.
Um, if you're interested

00:53:51.467 --> 00:53:53.467
in seeing how to do that,
just let me know.

00:53:53.467 --> 00:53:55.067
man: Okay.

00:53:55.067 --> 00:53:57.067
Fryzel: Um, but you can do
arbitrary file revisioning

00:53:57.067 --> 00:53:58.934
of anything that you upload.
man: Okay.

00:53:58.934 --> 00:54:01.767
Fryzel: You can also consume
revisions from, uh, documents,

00:54:01.767 --> 00:54:03.767
so for instance,
in a text document,

00:54:03.767 --> 00:54:05.434
uh, as you're typing away,

00:54:05.434 --> 00:54:07.434
if there's, like,
a conflict or something,

00:54:07.434 --> 00:54:09.434
and you need to, uh, you know,
fork a new revision,

00:54:09.434 --> 00:54:11.434
you can access those
in the API today.

00:54:11.434 --> 00:54:14.934
man: Okay, thank you.
Fryzel: Sure.

00:54:14.934 --> 00:54:16.434
Hi.

00:54:16.434 --> 00:54:18.934
man: Hi there, and I'm sorry
if this question was answered--

00:54:18.934 --> 00:54:20.601
I missed the first half
of your talk--

00:54:20.601 --> 00:54:24.434
Um, what's the supportability,
SLI, backwards compatibility,

00:54:24.434 --> 00:54:27.067
API story for this stuff?

00:54:27.067 --> 00:54:28.067
Fryzel: I'm sorry,
I still can't hear you--

00:54:28.067 --> 00:54:30.067
Can you come closer to the mic?

00:54:30.067 --> 00:54:32.067
man: Sure. Yeah, I guess
the microphone's, uh--

00:54:32.067 --> 00:54:33.901
it's very loud right here--

00:54:33.901 --> 00:54:36.667
um, so the question was,
uh, given--

00:54:36.667 --> 00:54:39.667
what is the supportability,
SLI, backwards compatibility,

00:54:39.667 --> 00:54:42.667
deprecation, et cetera,
et cetera, et cetera, story

00:54:42.667 --> 00:54:44.667
for these APIs?

00:54:44.667 --> 00:54:46.667
We've done an integration
with our application

00:54:46.667 --> 00:54:48.667
with Google Docs,
and we've had great trouble

00:54:48.667 --> 00:54:51.567
with APIs changing
unexpectedly over time--

00:54:51.567 --> 00:54:54.567
now a lot of this work was done
8 months to 2 years ago,

00:54:54.567 --> 00:54:56.567
so maybe things have stabilized,

00:54:56.567 --> 00:54:59.234
but I know we were trying to get
some information from Google

00:54:59.234 --> 00:55:01.300
about just
backwards compatibility

00:55:01.300 --> 00:55:03.300
and deprecation changes.

00:55:03.300 --> 00:55:06.300
Can we be--can we rely
on the API for a period of time?

00:55:06.300 --> 00:55:07.801
Fryzel: Yeah.

00:55:07.801 --> 00:55:09.467
man: Do we need to be--
is there a blog,

00:55:09.467 --> 00:55:11.067
is there an RSS feed
we should monitor?

00:55:11.067 --> 00:55:12.567
Fryzel: Uh, there is a blog--

00:55:12.567 --> 00:55:14.567
it's called the Google apps
developer blog, uh,

00:55:14.567 --> 00:55:16.567
that will tell you
essentially all changes

00:55:16.567 --> 00:55:18.067
that happen with the API.

00:55:18.067 --> 00:55:21.133
There's also an RSS feed
in the documentation,

00:55:21.133 --> 00:55:23.133
uh, called release notes,

00:55:23.133 --> 00:55:25.634
and that tells you any changes
that we make.

00:55:25.634 --> 00:55:28.133
Um, I also wanted to point out
that sometimes

00:55:28.133 --> 00:55:31.133
my purpose in life is to make
sure that things don't change

00:55:31.133 --> 00:55:34.133
so that you don't have to
reimplement your application,

00:55:34.133 --> 00:55:36.133
and I--

00:55:36.133 --> 00:55:39.100
I mean, really, sometimes
I think I take it too far.

00:55:39.100 --> 00:55:42.934
So, uh, we try really,
really, really hard

00:55:42.934 --> 00:55:44.434
not to change something,

00:55:44.434 --> 00:55:46.267
but there are
particular circumstances

00:55:46.267 --> 00:55:49.434
in which we cannot avoid, uh,
breaking backwards compatibility

00:55:49.434 --> 00:55:51.100
that we feel for the--

00:55:51.100 --> 00:55:54.033
our users' benefit,
we must implement.

00:55:54.033 --> 00:55:56.767
Uh, and those are really
the only occasions

00:55:56.767 --> 00:55:59.767
in which we will break
backwards compatibility.

00:55:59.767 --> 00:56:01.834
Um, that said,

00:56:01.834 --> 00:56:04.834
our out-of-labs APIs,

00:56:04.834 --> 00:56:07.901
uh, have a 3-year
deprecation policy,

00:56:07.901 --> 00:56:10.901
in which, uh,
if we are going to,

00:56:10.901 --> 00:56:13.300
uh, break
backwards compatibility

00:56:13.300 --> 00:56:16.300
for, um,
for a non-important reason,

00:56:16.300 --> 00:56:19.300
we have to give you
three year's notice, okay?

00:56:19.300 --> 00:56:21.300
man: And are these APIs
in the labs,

00:56:21.300 --> 00:56:23.133
or are they out of labs?

00:56:23.133 --> 00:56:26.133
Fryzel: So the Documents List
API is actually in both--

00:56:26.133 --> 00:56:29.133
version 2 is out of labs,
stable for 3 years,

00:56:29.133 --> 00:56:31.634
and version 3,
we are actively developing it.

00:56:31.634 --> 00:56:33.634
We're adding features
left and right,

00:56:33.634 --> 00:56:35.634
and because of that, uh,

00:56:35.634 --> 00:56:37.634
we haven't brought it
out of labs yet.

00:56:37.634 --> 00:56:39.868
man: Great, thank you.
Fryzel: Yeah, pleasure.

00:56:39.868 --> 00:56:41.634
Hello.

00:56:41.634 --> 00:56:44.367
man: Hi, using Java API,
can we create labels?

00:56:44.367 --> 00:56:46.367
Fryzel: I'm sorry--deletes?

00:56:46.367 --> 00:56:49.367
man: Using Java API,
can we create labels, folders?

00:56:49.367 --> 00:56:52.367
Fryzel: Can it integrate
with folders--the Java API?

00:56:52.367 --> 00:56:53.868
man: Yeah.

00:56:53.868 --> 00:56:56.367
Fryzel: Yes, uh,
the Java client library

00:56:56.367 --> 00:56:59.367
implements every function
of the API,

00:56:59.367 --> 00:57:02.434
um, so you would
essentially call, um,

00:57:02.434 --> 00:57:06.434
you know, myclients.GetDocList,

00:57:06.434 --> 00:57:08.434
just like I showed onscreen--

00:57:08.434 --> 00:57:11.067
actually, the method is called
the same exact thing in Java,

00:57:11.067 --> 00:57:13.067
but I showed a Python sample,
so...

00:57:13.067 --> 00:57:14.400
man: Yeah.

00:57:14.400 --> 00:57:15.901
Fryzel: There's a Java
developer's guide

00:57:15.901 --> 00:57:17.901
you should definitely check out.
man: Thank you.

00:57:17.901 --> 00:57:19.501
Fryzel: Yep. Hello.

00:57:19.501 --> 00:57:23.067
man: Is there a way to get
the last modification date

00:57:23.067 --> 00:57:27.100
for the access security
settings on a document?

00:57:27.100 --> 00:57:29.100
Fryzel: For the access time?

00:57:29.100 --> 00:57:32.100
man: Yeah, so if, uh,
an user's been added,

00:57:32.100 --> 00:57:35.100
to tell if the ACL has changed?

00:57:35.100 --> 00:57:38.100
Fryzel: The--so, uh,

00:57:38.100 --> 00:57:41.100
talk to me afterward.

00:57:41.100 --> 00:57:44.100
I'm--it's a little bit
complicated to implement,

00:57:44.100 --> 00:57:47.100
but I'm happy to help you do it.
man: Okay, cool.

00:57:47.100 --> 00:57:49.501
Fryzel: Hello.
man: Hi.

00:57:49.501 --> 00:57:52.167
We use...
[speaking indistinctly]

00:57:52.167 --> 00:57:55.000
to integrate with Google Docs
and synchronize files

00:57:55.000 --> 00:57:56.767
with devices.
Fryzel: Yep.

00:57:56.767 --> 00:57:59.267
man: So you are able
to have those files from the...

00:57:59.267 --> 00:58:01.000
[speaking indistinctly]
from the device.

00:58:01.000 --> 00:58:03.501
It works really nice, okay?

00:58:03.501 --> 00:58:05.501
so the API works really well,

00:58:05.501 --> 00:58:08.033
but the problem is that
we would like to know

00:58:08.033 --> 00:58:10.234
if the local name
of the user had changed

00:58:10.234 --> 00:58:14.000
without having to pull
the Google talk system

00:58:14.000 --> 00:58:17.234
every time to know
if there is something new.

00:58:17.234 --> 00:58:20.067
So is there a way to know
that the file has been changed?

00:58:20.067 --> 00:58:22.067
Fryzel: Yes.
man: That there is a new file?

00:58:22.067 --> 00:58:24.067
Fryzel: Yes, uh, the--

00:58:24.067 --> 00:58:26.901
I think I mentioned this
in best practices--

00:58:26.901 --> 00:58:29.901
the app edited date--
the last point here--

00:58:29.901 --> 00:58:33.400
uh, this is provided for each
resource, uh, given by the API,

00:58:33.400 --> 00:58:35.067
man: Yep.

00:58:35.067 --> 00:58:37.567
Fryzel: So what you would do
is cache this date locally,

00:58:37.567 --> 00:58:39.567
on your server
or in your application,

00:58:39.567 --> 00:58:41.601
uh, along with
the resource identifier,

00:58:41.601 --> 00:58:44.400
and if you noticed that
this date changed...

00:58:44.400 --> 00:58:45.901
man: Mm-hmm.

00:58:45.901 --> 00:58:47.901
Fryzel: You would know
that the file changed.

00:58:47.901 --> 00:58:50.901
man: Yeah, but we have to pull
the servers to know that--

00:58:50.901 --> 00:58:52.400
Fryzel: Yes. So, uh--

00:58:52.400 --> 00:58:55.400
man: So there is a way to be
notified when something change?

00:58:55.400 --> 00:58:57.067
Fryzel: Yeah, I'm with you.

00:58:57.067 --> 00:58:59.567
So this goes back to a previous
question in which I said,

00:58:59.567 --> 00:59:01.634
that is definitely something
we are considering,

00:59:01.634 --> 00:59:03.634
uh, but I have no other
information at this time.

00:59:03.634 --> 00:59:04.968
man: Okay.

00:59:04.968 --> 00:59:06.300
Fryzel: Yeah. Sorry.

00:59:06.300 --> 00:59:07.968
man: Thank you very much.

00:59:07.968 --> 00:59:10.968
Fryzel: Any other questions?
Okay, thank you very much.

00:59:10.968 --> 00:59:13.901
[applause]

