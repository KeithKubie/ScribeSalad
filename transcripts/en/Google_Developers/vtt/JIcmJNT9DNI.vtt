WEBVTT
Kind: captions
Language: en

00:00:00.732 --> 00:00:01.940
PHIL QUITSLUND: Good morning.

00:00:01.940 --> 00:00:02.879
So I'm Phil.

00:00:02.879 --> 00:00:03.670
Jacob's over there.

00:00:03.670 --> 00:00:06.440
He's going to come on
stage in a few minutes.

00:00:06.440 --> 00:00:08.050
Welcome to DartConf day two.

00:00:08.050 --> 00:00:08.830
Congrats.

00:00:08.830 --> 00:00:10.900
This has been a real
pleasure so far,

00:00:10.900 --> 00:00:14.530
and it's a real honor to be up
here to show you some new work

00:00:14.530 --> 00:00:16.032
that we've been doing.

00:00:16.032 --> 00:00:17.740
So Jacob and I are
going to introduce you

00:00:17.740 --> 00:00:21.580
to the Flutter Widget
Inspector, a new tool

00:00:21.580 --> 00:00:26.470
for the IntelliJ plugin that
helps you visualize, explore,

00:00:26.470 --> 00:00:29.440
and debug Flutter UIs.

00:00:29.440 --> 00:00:31.300
And if you were at
Tim's talk yesterday,

00:00:31.300 --> 00:00:33.610
you may have remembered
him describing Dart

00:00:33.610 --> 00:00:36.970
as being the engine,
Flutter as the fuel.

00:00:36.970 --> 00:00:40.780
You can imagine a bit that what
we're going to show you today

00:00:40.780 --> 00:00:44.642
is like a diagnostic tool
that will help you understand

00:00:44.642 --> 00:00:46.600
the check engine light
in the unfortunate event

00:00:46.600 --> 00:00:49.780
that it turns on
for your Flutter UI.

00:00:49.780 --> 00:00:52.079
So as it turns out,
understanding the check engine

00:00:52.079 --> 00:00:53.620
light in a Flutter
UI is a little bit

00:00:53.620 --> 00:00:56.980
different than for
other UI frameworks.

00:00:56.980 --> 00:01:00.020
We're going to start by talking
a little bit about that.

00:01:00.020 --> 00:01:02.940
Then we're going
to give you some

00:01:02.940 --> 00:01:06.270
of the basics of the
inspector, how it works.

00:01:06.270 --> 00:01:09.990
We'll do a demo, which I
hope you'll find is awesome,

00:01:09.990 --> 00:01:13.080
and will inspire you to
give it a whirl yourselves.

00:01:13.080 --> 00:01:16.320
We'll wrap up with some
status and next steps.

00:01:16.320 --> 00:01:21.940
So what makes an inspector
for Flutter different?

00:01:21.940 --> 00:01:25.170
So the first thing that I
want to draw your attention to

00:01:25.170 --> 00:01:29.380
has to do with the
Flutter framework, itself.

00:01:29.380 --> 00:01:32.790
And if you look at this now
probably familiar picture

00:01:32.790 --> 00:01:35.370
of the Flutter Stack,
the salient bit

00:01:35.370 --> 00:01:40.270
here is how much is happening
up above the engine level.

00:01:40.270 --> 00:01:42.330
So what you'll notice,
it's not so interesting

00:01:42.330 --> 00:01:44.940
that it's layered as
much as how much is up

00:01:44.940 --> 00:01:46.530
in those upper layers.

00:01:46.530 --> 00:01:48.810
And you'll think from
the tooling perspective,

00:01:48.810 --> 00:01:51.180
the bit at the bottom,
the engine part,

00:01:51.180 --> 00:01:54.090
is fairly opaque to tooling.

00:01:54.090 --> 00:01:57.811
And what that means is it makes
our job a little bit harder,

00:01:57.811 --> 00:02:00.060
because it means that we
don't get to leverage a bunch

00:02:00.060 --> 00:02:02.100
of native low level tools.

00:02:02.100 --> 00:02:04.470
But it gives us the
distinct advantage

00:02:04.470 --> 00:02:06.030
of being able to
give you a tool that

00:02:06.030 --> 00:02:07.590
can describe quite
a lot of what's

00:02:07.590 --> 00:02:13.310
going on in a uniform
and consistent way.

00:02:13.310 --> 00:02:15.020
So the next bit
that I think bears

00:02:15.020 --> 00:02:18.740
attention has to do with a
fundamental design decision

00:02:18.740 --> 00:02:20.510
that the Flutter folks made.

00:02:20.510 --> 00:02:24.020
And the salient thing
here and fundamental bit

00:02:24.020 --> 00:02:26.990
about Flutter UIs is that
just about everything

00:02:26.990 --> 00:02:31.420
that you can imagine has
been modeled as a widget.

00:02:31.420 --> 00:02:34.640
So I'll go through
a few examples,

00:02:34.640 --> 00:02:37.340
in case you haven't
internalized that.

00:02:37.340 --> 00:02:39.890
So one example that
surprised me was

00:02:39.890 --> 00:02:43.730
to find out that things like
themes are modeled as widgets.

00:02:43.730 --> 00:02:46.520
Animations are also widgets.

00:02:46.520 --> 00:02:49.370
Apps show up in the
widget tree as well.

00:02:49.370 --> 00:02:51.500
Layout components,
and this turns out

00:02:51.500 --> 00:02:55.820
to be very powerful, although
at times, surprising,

00:02:55.820 --> 00:02:58.220
down to things much more
esoteric like like gesture

00:02:58.220 --> 00:02:59.970
detection.

00:02:59.970 --> 00:03:03.950
So this design makes for
some unique opportunities,

00:03:03.950 --> 00:03:07.710
and introduces also
some challenges.

00:03:07.710 --> 00:03:10.490
And in particular,
one of the challenges

00:03:10.490 --> 00:03:14.510
that's really fundamental
to understanding Flutter UIs

00:03:14.510 --> 00:03:17.900
is how deeply nested
these trees can become.

00:03:17.900 --> 00:03:20.010
Moreover, the trees
are not only nested.

00:03:20.010 --> 00:03:22.430
They tend to comingle concerns.

00:03:22.430 --> 00:03:25.190
So you'll notice at the very
top and at the very bottom

00:03:25.190 --> 00:03:28.010
of this tree snippet,
those are the widgets

00:03:28.010 --> 00:03:31.492
that you, as a user,
have invested interest

00:03:31.492 --> 00:03:33.200
in by defining them
in your build method.

00:03:33.200 --> 00:03:35.690
But everything else is
coming along for the ride

00:03:35.690 --> 00:03:36.740
from the framework.

00:03:36.740 --> 00:03:38.820
So that's quite a lot to manage.

00:03:38.820 --> 00:03:42.590
So what that suggests
is for a tool

00:03:42.590 --> 00:03:46.970
to help you successfully
navigate UI in Flutter,

00:03:46.970 --> 00:03:49.100
it's going to have to be
pretty good at moving you

00:03:49.100 --> 00:03:50.891
between different
neighborhoods of widgets,

00:03:50.891 --> 00:03:52.700
and also help you
distinguish where

00:03:52.700 --> 00:03:55.960
your stuff ends and
the framework begins,

00:03:55.960 --> 00:03:58.340
and hopefully get you
to move seamlessly

00:03:58.340 --> 00:04:01.800
back and forth between them.

00:04:01.800 --> 00:04:04.820
So another challenge,
although, I'd

00:04:04.820 --> 00:04:06.890
say this is just as
much an opportunity,

00:04:06.890 --> 00:04:10.100
is that widgets in
Flutter are defined

00:04:10.100 --> 00:04:12.230
in source, in Dart
source, and not

00:04:12.230 --> 00:04:13.970
in some kind of simpler
markup language.

00:04:13.970 --> 00:04:16.880
So that presents some
implementation challenges

00:04:16.880 --> 00:04:19.250
for us, because it means
that our tooling needs

00:04:19.250 --> 00:04:22.010
to be very robust with respect
to understanding Dart source.

00:04:22.010 --> 00:04:24.740
Now, the good news
is, we get to build

00:04:24.740 --> 00:04:28.250
and we have built on a
rich, open-ended extensible

00:04:28.250 --> 00:04:30.620
framework, which you've
learned quite a lot about,

00:04:30.620 --> 00:04:32.720
I suspect, here already.

00:04:32.720 --> 00:04:37.400
The analysis tooling
for Dart is great.

00:04:37.400 --> 00:04:41.360
So that brings us
to what we made.

00:04:41.360 --> 00:04:44.960
The Flutter Inspector s a tool
for visualizing Flutter widget

00:04:44.960 --> 00:04:47.180
trees.

00:04:47.180 --> 00:04:50.330
And the basic idea
is that it helps

00:04:50.330 --> 00:04:54.170
manage bidirectional mapping
between an active Flutter

00:04:54.170 --> 00:05:00.500
UI and the visualization of the
widget tree that corresponds

00:05:00.500 --> 00:05:04.190
with it, and notably also
the render tree, which we'll

00:05:04.190 --> 00:05:06.800
talk about in great detail.

00:05:06.800 --> 00:05:12.020
So further than that, you
can follow this mapping

00:05:12.020 --> 00:05:15.791
deeper into the source so that
you can see where in your code

00:05:15.791 --> 00:05:17.540
or in the framework
code these widgets are

00:05:17.540 --> 00:05:19.130
being created and configured.

00:05:19.130 --> 00:05:21.230
And it turns out
that's very powerful,

00:05:21.230 --> 00:05:22.790
and gives you a
lot of clues when

00:05:22.790 --> 00:05:27.550
you're trying to understand
a big UI or debug your own.

00:05:27.550 --> 00:05:31.280
So that's a lot of talking
without a lot of demoing.

00:05:31.280 --> 00:05:32.560
So let's bring Jacob up.

00:05:32.560 --> 00:05:36.220
And if we could switch
over to the demo machine.

00:05:39.720 --> 00:05:41.359
And Jacob's password.

00:05:41.359 --> 00:05:42.400
JACOB RICHMAN: All right.

00:05:42.400 --> 00:05:45.520
So now you've seen my password,
so we're all set here.

00:05:45.520 --> 00:05:49.040
So I've got IntelliJ running,
with the Flutter gallery

00:05:49.040 --> 00:05:51.520
app running in iOS simulator.

00:05:51.520 --> 00:05:54.070
All of this will work equally
well with the real device.

00:05:54.070 --> 00:05:57.365
This is just a setup that's
easier for me to demo here.

00:05:57.365 --> 00:06:01.000
And you'll notice currently, the
application's running normally.

00:06:01.000 --> 00:06:02.980
But I'll show the very
first thing you always

00:06:02.980 --> 00:06:04.480
want to do with the
Inspector, which

00:06:04.480 --> 00:06:08.080
is to select the widget
you're interested in.

00:06:08.080 --> 00:06:10.270
So I'll tile the Inspect Mode.

00:06:10.270 --> 00:06:12.790
And now when I interact
with the device,

00:06:12.790 --> 00:06:15.820
instead of interacting
with the app,

00:06:15.820 --> 00:06:18.760
it's showing me what which is
responsible for that position

00:06:18.760 --> 00:06:19.810
on the screen.

00:06:19.810 --> 00:06:23.380
So you can go around and see
how this app is structured.

00:06:23.380 --> 00:06:25.750
Let's go ahead and click
on a particular widget.

00:06:25.750 --> 00:06:29.260
Now as soon as I do that, now
you see the tree of widgets

00:06:29.260 --> 00:06:32.600
over on the right side here.

00:06:32.600 --> 00:06:33.540
PHIL QUITSLUND: Great.

00:06:33.540 --> 00:06:36.290
So for the purposes of
nudging this demo along,

00:06:36.290 --> 00:06:38.195
I'm going to play
the role of a newbie.

00:06:40.980 --> 00:06:43.430
While I have lots of experience
writing developer tools

00:06:43.430 --> 00:06:45.500
for Flutter, I
don't, in my day job,

00:06:45.500 --> 00:06:47.460
get to do a lot of
Flutter UI development.

00:06:47.460 --> 00:06:49.680
So this isn't actually
that much of a stretch.

00:06:49.680 --> 00:06:53.300
We're also going to
fold in a few episodes

00:06:53.300 --> 00:06:58.970
from some of our observations of
folks that are new to Flutter.

00:06:58.970 --> 00:07:03.680
And we're going to tackle
a couple of common puzzles.

00:07:03.680 --> 00:07:06.110
So to start with, Jacob,
why don't we drill in?

00:07:06.110 --> 00:07:08.337
And maybe you can make a
source modification to this.

00:07:08.337 --> 00:07:09.170
JACOB RICHMAN: Yeah.

00:07:09.170 --> 00:07:12.530
So you'll notice a couple of the
widgets in this tree are bold.

00:07:12.530 --> 00:07:14.900
And those are bold not
because of what kind of widget

00:07:14.900 --> 00:07:16.970
they are, but because of
where they were created.

00:07:16.970 --> 00:07:18.890
Those were widgets
created directly

00:07:18.890 --> 00:07:22.040
in the gallery application
instead of the framework.

00:07:22.040 --> 00:07:25.360
And now, you'll see if I select
one of those bold widgets,

00:07:25.360 --> 00:07:27.640
immediately, my
source window jumps

00:07:27.640 --> 00:07:30.560
to where I've created that
widget, right in the Flutter

00:07:30.560 --> 00:07:32.251
gallery home page.

00:07:32.251 --> 00:07:33.625
And so I'll go
over the text one.

00:07:33.625 --> 00:07:35.916
And here, you can see there's
where the Flutter gallery

00:07:35.916 --> 00:07:36.970
text is defined.

00:07:36.970 --> 00:07:39.365
I didn't have to go searching
for the text and source

00:07:39.365 --> 00:07:40.490
code or anything like that.

00:07:40.490 --> 00:07:41.164
There it is.

00:07:41.164 --> 00:07:42.080
PHIL QUITSLUND: Great.

00:07:42.080 --> 00:07:43.246
So can you maybe update it--

00:07:43.246 --> 00:07:43.779
[APPLAUSE]

00:07:43.779 --> 00:07:45.320
JACOB RICHMAN: So
it's very exciting.

00:07:45.320 --> 00:07:46.945
Amazing when this
works the first time.

00:07:46.945 --> 00:07:48.596
PHIL QUITSLUND: Woo!

00:07:48.596 --> 00:07:49.970
So while we're
here, why don't we

00:07:49.970 --> 00:07:51.830
update it to something
a little more topical?

00:07:51.830 --> 00:07:52.640
JACOB RICHMAN: All
right, let's make

00:07:52.640 --> 00:07:54.150
this something more exciting.

00:07:54.150 --> 00:07:57.801
DarkComf exclamation point.

00:07:57.801 --> 00:07:58.800
PHIL QUITSLUND: [LAUGHS]

00:07:58.800 --> 00:08:01.008
JACOB RICHMAN: And now you'll
see everything updated.

00:08:01.008 --> 00:08:02.190
I just did a hot reload.

00:08:02.190 --> 00:08:04.110
The inspector understands
hot reload as well,

00:08:04.110 --> 00:08:07.410
so our property values
changed there as well.

00:08:07.410 --> 00:08:08.960
And now we've got
our longer title.

00:08:08.960 --> 00:08:10.680
PHIL QUITSLUND: Right, cool.

00:08:10.680 --> 00:08:12.570
So I kind of know
where this is going.

00:08:12.570 --> 00:08:15.720
I'm curious, what happens
when you toggle the--

00:08:15.720 --> 00:08:17.460
so there's a nice
button at the top that

00:08:17.460 --> 00:08:19.374
allows us to toggle
our emulator mode,

00:08:19.374 --> 00:08:20.790
so we can get a
whiff of what this

00:08:20.790 --> 00:08:21.840
would look like an Android.

00:08:21.840 --> 00:08:23.785
We're currently looking at
this in the iOS simulator.

00:08:23.785 --> 00:08:25.530
JACOB RICHMAN: All right,
so let me toggle it.

00:08:25.530 --> 00:08:27.090
And we got a little
bit of a problem.

00:08:27.090 --> 00:08:31.320
That's not the most elegant
looking UI at this point.

00:08:31.320 --> 00:08:33.539
PHIL QUITSLUND: Right, so
what so what's going on

00:08:33.539 --> 00:08:35.940
is that the text there's
something about the text right

00:08:35.940 --> 00:08:38.289
it's sort of spilling
off the screen.

00:08:38.289 --> 00:08:42.892
So I'm going to guess there's
something about the text.

00:08:42.892 --> 00:08:45.100
JACOB RICHMAN: Yeah, so
let's get a look at the text.

00:08:45.100 --> 00:08:46.600
And now here, because
we're starting

00:08:46.600 --> 00:08:49.250
to ask text questions about
how this is rendering,

00:08:49.250 --> 00:08:51.234
we'll want to switch
over to the render tree.

00:08:51.234 --> 00:08:53.400
And just like you saw the
widgets in the source code

00:08:53.400 --> 00:08:55.691
are tightly linked, the render
tree and the widget tree

00:08:55.691 --> 00:08:56.580
are tightly linked.

00:08:56.580 --> 00:09:00.109
So if I just click on
the Render Tree tab here,

00:09:00.109 --> 00:09:01.650
now I see the render
tree information

00:09:01.650 --> 00:09:04.530
about exactly the same widget.

00:09:04.530 --> 00:09:07.265
So here I can see
how the text setup.

00:09:07.265 --> 00:09:08.640
And if I even go
to the children,

00:09:08.640 --> 00:09:10.590
I can see the font size.

00:09:10.590 --> 00:09:12.210
Now let me just
toggle back and forth

00:09:12.210 --> 00:09:14.460
to see if that
information changed.

00:09:14.460 --> 00:09:15.130
OK, it didn't.

00:09:15.130 --> 00:09:17.310
So the font size is the
same on iOS or Android.

00:09:17.310 --> 00:09:18.700
That's not the issue.

00:09:18.700 --> 00:09:20.970
And we can go back
up the paragraph,

00:09:20.970 --> 00:09:24.150
and notice that here,
the size of the widget

00:09:24.150 --> 00:09:25.130
didn't change either.

00:09:25.130 --> 00:09:26.250
So that's not the problem.

00:09:26.250 --> 00:09:30.120
We can see that we're
on the right track.

00:09:30.120 --> 00:09:33.600
If you look at the parent data
property, that did change.

00:09:33.600 --> 00:09:36.300
But in a way, that's not
immediately clear to me why.

00:09:36.300 --> 00:09:37.980
So let's go look
up the widget tree

00:09:37.980 --> 00:09:39.900
to see what might have
caused that parent data

00:09:39.900 --> 00:09:41.580
property to change.

00:09:41.580 --> 00:09:44.310
If we go up, go to
the align property,

00:09:44.310 --> 00:09:47.080
you'll notice that
on one platform,

00:09:47.080 --> 00:09:48.810
align is bottom center.

00:09:48.810 --> 00:09:52.491
Well if we go to Android,
alignment's now bottom left.

00:09:52.491 --> 00:09:54.740
So you'll see the property
value changing right there.

00:09:54.740 --> 00:09:58.320
So that's suggesting maybe
this was a intentional design

00:09:58.320 --> 00:10:02.400
decision where on iOS,
it's centered, on Android,

00:10:02.400 --> 00:10:03.480
it's aligned on the left.

00:10:03.480 --> 00:10:06.840
But it still doesn't explain
why it's going off the screen.

00:10:06.840 --> 00:10:09.450
Maybe that window's the
wrong size or something,

00:10:09.450 --> 00:10:10.330
I don't know yet.

00:10:10.330 --> 00:10:11.757
So let's keep going up.

00:10:11.757 --> 00:10:12.840
Now we get to the padding.

00:10:12.840 --> 00:10:14.298
And now you can
see on the padding,

00:10:14.298 --> 00:10:17.490
the padding is zero
pixels on one platform,

00:10:17.490 --> 00:10:18.970
and 72 pixels on the other.

00:10:18.970 --> 00:10:20.940
So that's where the problem was.

00:10:20.940 --> 00:10:23.070
The padding widget
is pushing the text

00:10:23.070 --> 00:10:24.554
off the edge on Android.

00:10:24.554 --> 00:10:25.470
PHIL QUITSLUND: Right.

00:10:25.470 --> 00:10:29.190
So from this, it feels like
this is a deliberate design

00:10:29.190 --> 00:10:30.900
decision.

00:10:30.900 --> 00:10:36.300
So on the Android side, we're
using a a default left inset,

00:10:36.300 --> 00:10:38.640
whereas on iOS, we're centering.

00:10:38.640 --> 00:10:42.720
Can you maybe show us
where this is being set,

00:10:42.720 --> 00:10:45.007
and maybe we can come up
with a clever way to work.

00:10:45.007 --> 00:10:45.840
JACOB RICHMAN: Yeah.

00:10:45.840 --> 00:10:47.298
And so when I first
had this issue,

00:10:47.298 --> 00:10:48.930
I actually didn't
have any idea myself

00:10:48.930 --> 00:10:50.200
why this was really happening.

00:10:50.200 --> 00:10:52.240
I could guess from poking
around that it was a platform

00:10:52.240 --> 00:10:53.700
difference, but I didn't know.

00:10:53.700 --> 00:10:56.110
But now that we can
jump to source locations

00:10:56.110 --> 00:10:58.990
for where your widgets
are created, it's obvious.

00:10:58.990 --> 00:11:03.960
Let's jump to where this align
widget was actually created.

00:11:03.960 --> 00:11:07.180
Even for the platform widgets,
you can still jump to source.

00:11:07.180 --> 00:11:10.440
And now I'm in the flexible
space bar widget, just the one

00:11:10.440 --> 00:11:11.550
you saw up here.

00:11:11.550 --> 00:11:15.210
Here's where, within that
widget, the alignment was set.

00:11:15.210 --> 00:11:20.100
And now I can just go follow
it back through the Dart code,

00:11:20.100 --> 00:11:21.840
just jumping to definition.

00:11:25.584 --> 00:11:28.712
Let me get back there, I just--

00:11:28.712 --> 00:11:31.020
I usually use a slightly
smaller font size.

00:11:31.020 --> 00:11:32.393
It makes it a little bit easier.

00:11:32.393 --> 00:11:35.159
PHIL QUITSLUND:
[LAUGHS] You think?

00:11:35.159 --> 00:11:36.200
JACOB RICHMAN: All right.

00:11:36.200 --> 00:11:37.070
So now here we are.

00:11:37.070 --> 00:11:38.930
We're still in the
flexible space bar class.

00:11:38.930 --> 00:11:41.120
And here is exactly
where that code

00:11:41.120 --> 00:11:44.330
is that says it should
be centered on iOS,

00:11:44.330 --> 00:11:46.220
but not centered on Android.

00:11:46.220 --> 00:11:47.250
And so it's great.

00:11:47.250 --> 00:11:50.780
I don't have to look at some
C++ code and the platform

00:11:50.780 --> 00:11:51.770
implementation details.

00:11:51.770 --> 00:11:54.530
It's right here
in this Dart code.

00:11:54.530 --> 00:11:57.020
And if I keep looking,
oh look, this widget

00:11:57.020 --> 00:11:59.300
has a property that lets
me override the default

00:11:59.300 --> 00:12:00.910
behavior if I want to.

00:12:00.910 --> 00:12:02.619
PHIL QUITSLUND: All right.

00:12:02.619 --> 00:12:04.160
So I'm going to
guess that maybe when

00:12:04.160 --> 00:12:06.980
we're setting up our
flexible space bar,

00:12:06.980 --> 00:12:09.110
we can maybe pass this value in.

00:12:09.110 --> 00:12:10.757
Maybe we can take
a look and see.

00:12:10.757 --> 00:12:12.340
JACOB RICHMAN: Yeah,
so let's do that.

00:12:12.340 --> 00:12:13.820
And once again, I'm
just going to navigate

00:12:13.820 --> 00:12:15.020
using the inspector,
because I don't

00:12:15.020 --> 00:12:17.570
want to try to remember where
all these source files are.

00:12:17.570 --> 00:12:21.410
If I click on that widget, I
see exactly where I created it.

00:12:21.410 --> 00:12:26.190
And I just need to add an extra
property to center the title.

00:12:26.190 --> 00:12:29.370
And now iOS and Android,
it's centered on both,

00:12:29.370 --> 00:12:30.298
and we're all set.

00:12:30.298 --> 00:12:31.506
PHIL QUITSLUND: Great, great.

00:12:31.506 --> 00:12:34.908
[APPLAUSE]

00:12:37.185 --> 00:12:38.810
So it's worth pointing
out in practice,

00:12:38.810 --> 00:12:40.650
it may not be the
right solution.

00:12:40.650 --> 00:12:44.060
But I think it's
perfectly good for a demo.

00:12:44.060 --> 00:12:46.010
So now let's let's move on.

00:12:46.010 --> 00:12:47.850
The next thing we're
going to look at

00:12:47.850 --> 00:12:53.510
is an actual layout puzzle
that we've presented to users,

00:12:53.510 --> 00:12:56.870
and has turned out to be kind of
tricky to resolve in practice.

00:12:56.870 --> 00:12:59.210
And our hypothesis
is that the inspector

00:12:59.210 --> 00:13:01.610
is going to help us with it.

00:13:01.610 --> 00:13:05.360
So here we have a
little demo app.

00:13:05.360 --> 00:13:07.490
And the puzzle is
that you'll notice

00:13:07.490 --> 00:13:10.880
that the text, the address
text, is really just spanning

00:13:10.880 --> 00:13:12.100
half the card.

00:13:12.100 --> 00:13:17.160
And what we'd like is for it
to extend to the entire width.

00:13:17.160 --> 00:13:21.390
So the puzzle was to
figure out how to do that.

00:13:21.390 --> 00:13:23.204
And it turns out,
as we found, it's

00:13:23.204 --> 00:13:24.370
harder than you might think.

00:13:24.370 --> 00:13:24.560
JACOB RICHMAN: Yeah.

00:13:24.560 --> 00:13:26.351
A lot of people actually
take a lot of time

00:13:26.351 --> 00:13:27.770
to solve this for
the first time.

00:13:27.770 --> 00:13:30.680
Let's go ahead and select this
widget with the inspector just

00:13:30.680 --> 00:13:33.202
to get to the right
code where it's defined.

00:13:33.202 --> 00:13:34.910
And you can see, this
UI's pretty simple.

00:13:34.910 --> 00:13:37.680
It's a card with a column,
and text inside it.

00:13:37.680 --> 00:13:40.280
And over in the tree
here, here is the column.

00:13:40.280 --> 00:13:42.220
And it's got text inside it.

00:13:42.220 --> 00:13:45.520
Now let's understand why
this column's the size it is.

00:13:45.520 --> 00:13:47.270
Once again, we'll go
with the render tree

00:13:47.270 --> 00:13:51.574
to get information about exactly
what the rendered sizes are.

00:13:51.574 --> 00:13:53.490
And here, we'll say,
yeah, on the render tree,

00:13:53.490 --> 00:13:56.290
the width is only
191 pixels, which

00:13:56.290 --> 00:14:00.220
is less than the 300 something
pixels that we're expecting.

00:14:00.220 --> 00:14:02.170
But if we look at
the constraints that

00:14:02.170 --> 00:14:04.330
were propagated into
this render object,

00:14:04.330 --> 00:14:06.010
the constraint
said the widget was

00:14:06.010 --> 00:14:09.340
allowed to be 360 pixels wide.

00:14:09.340 --> 00:14:10.450
So that's good news.

00:14:10.450 --> 00:14:13.180
That means we can probably solve
this problem pretty locally.

00:14:13.180 --> 00:14:14.920
The problem isn't
somewhere further

00:14:14.920 --> 00:14:19.070
up the tree, where we constrain
the size to be too small.

00:14:19.070 --> 00:14:21.310
So given that, let's go
back to the widget, itself,

00:14:21.310 --> 00:14:23.440
and see if any of
these properties

00:14:23.440 --> 00:14:25.460
tell us what's going on.

00:14:25.460 --> 00:14:27.370
So the first property
is the direction.

00:14:27.370 --> 00:14:28.744
That's actually
just because this

00:14:28.744 --> 00:14:29.890
is a column, and not a row.

00:14:29.890 --> 00:14:33.220
If it was a row, you'd see
the direction is horizontal.

00:14:33.220 --> 00:14:35.080
So then the main axis
properties, those

00:14:35.080 --> 00:14:36.882
are about the vertical axis.

00:14:36.882 --> 00:14:38.090
So we don't care about those.

00:14:38.090 --> 00:14:40.180
We're happy with
the vertical space.

00:14:40.180 --> 00:14:42.252
Very next one is
cross axis alignment.

00:14:42.252 --> 00:14:44.210
Now you'll notice, if I
mouseover the property,

00:14:44.210 --> 00:14:47.140
I can see what all the
other allowed values are.

00:14:47.140 --> 00:14:49.120
And looking at
this list, stretch

00:14:49.120 --> 00:14:50.620
looks like what we
want, because we

00:14:50.620 --> 00:14:53.900
want to stretch out the
column to fit the whole space.

00:14:53.900 --> 00:14:55.840
So let's go ahead and add that.

00:15:02.320 --> 00:15:03.790
Right now, the UI updates.

00:15:03.790 --> 00:15:06.370
And there is a
correct column size.

00:15:06.370 --> 00:15:07.780
Everything is the way we'd want.

00:15:07.780 --> 00:15:09.140
You can take a look at it.

00:15:09.140 --> 00:15:10.280
So we're all done.

00:15:10.280 --> 00:15:11.950
PHIL QUITSLUND: Great.

00:15:11.950 --> 00:15:15.072
[APPLAUSE]

00:15:15.752 --> 00:15:16.460
So this is great.

00:15:16.460 --> 00:15:22.300
So the inspector seems like a
tenable way to explore layouts.

00:15:22.300 --> 00:15:24.910
We're hoping that this
makes solving problems

00:15:24.910 --> 00:15:27.695
like this a lot easier
for folks in the future.

00:15:27.695 --> 00:15:32.380
But what about some of the
more advanced Flutter UI bits?

00:15:32.380 --> 00:15:35.530
If we go back to that
main landing page,

00:15:35.530 --> 00:15:36.700
there are a few animations.

00:15:36.700 --> 00:15:37.915
Can you-- Yeah, exactly.

00:15:37.915 --> 00:15:38.470
I wonder--

00:15:38.470 --> 00:15:39.490
JACOB RICHMAN: Yeah, so
this looks pretty slick.

00:15:39.490 --> 00:15:42.100
But I have no idea how I do
that in my own application.

00:15:42.100 --> 00:15:43.810
So let's poke
around a little bit,

00:15:43.810 --> 00:15:47.530
and see if we can understand
what the framework's doing.

00:15:47.530 --> 00:15:50.850
So once again, I'll go ahead
and just select that widget.

00:15:57.370 --> 00:15:58.270
All right.

00:15:58.270 --> 00:16:01.180
And now, we'll keep going up
the tree a little bit further.

00:16:01.180 --> 00:16:03.820
Notice there's a transform
that's applying to the widget.

00:16:03.820 --> 00:16:06.520
And I suspect the
transform's probably

00:16:06.520 --> 00:16:08.720
what's changing the size.

00:16:08.720 --> 00:16:11.210
But if I look at that
widget tree, I can't tell.

00:16:11.210 --> 00:16:13.370
So let me switch back
over to the render tree.

00:16:13.370 --> 00:16:15.910
And now, I can see information
on exactly how that transform

00:16:15.910 --> 00:16:17.380
is currently configured.

00:16:17.380 --> 00:16:21.970
Right now, it's scaling
the text by 1.5 times.

00:16:21.970 --> 00:16:24.280
And to see how this
animation's going along,

00:16:24.280 --> 00:16:27.150
and see as I change the
animation, that scale transform

00:16:27.150 --> 00:16:28.930
matrix is changing.

00:16:28.930 --> 00:16:31.240
So now I know exactly how
this affect's being achieved.

00:16:31.240 --> 00:16:33.440
It's being achieved
with a transform.

00:16:33.440 --> 00:16:35.470
And there's how the
transform's changing

00:16:35.470 --> 00:16:37.284
as I manipulate the app.

00:16:37.284 --> 00:16:38.200
PHIL QUITSLUND: Great.

00:16:38.200 --> 00:16:40.449
And then it's worth pointing
out that you can navigate

00:16:40.449 --> 00:16:42.730
to the source, and then
we can find the snippet

00:16:42.730 --> 00:16:43.900
where this was created.

00:16:43.900 --> 00:16:45.430
And we can just
use that ourselves.

00:16:45.430 --> 00:16:45.800
JACOB RICHMAN: Right.

00:16:45.800 --> 00:16:47.341
So even though this
transform's being

00:16:47.341 --> 00:16:49.810
defined in a library
in the framework,

00:16:49.810 --> 00:16:50.960
we can jump to definition.

00:16:50.960 --> 00:16:52.870
Now we can see
exactly where they're

00:16:52.870 --> 00:16:54.920
passing in a scale transform.

00:16:54.920 --> 00:16:57.090
And if we just jump to the
definition right there,

00:16:57.090 --> 00:16:59.530
there's where it's creating
a matrix with the scale

00:16:59.530 --> 00:17:03.640
value, which is tweening
between 1.5 and one,

00:17:03.640 --> 00:17:04.700
based on this value here.

00:17:04.700 --> 00:17:09.410
So now I get a feel for exactly
how the system is doing it.

00:17:09.410 --> 00:17:10.599
And this is just inside--

00:17:10.599 --> 00:17:12.849
it's a build method, So I
could feel pretty confident.

00:17:12.849 --> 00:17:15.940
I could make this same effect
work in my build method.

00:17:15.940 --> 00:17:18.190
PHIL QUITSLUND: Cool.

00:17:18.190 --> 00:17:19.990
So that's a pretty
simple transform,

00:17:19.990 --> 00:17:24.700
but I know there are some more
complicated animations going

00:17:24.700 --> 00:17:25.390
on.

00:17:25.390 --> 00:17:27.250
Maybe we can take a look at
a few of those, just to--

00:17:27.250 --> 00:17:29.583
JACOB RICHMAN: Yeah. let's
take a look at a couple more.

00:17:29.583 --> 00:17:32.230
There's a funny
animation demo here

00:17:32.230 --> 00:17:37.490
that has some more advanced
transformations happening.

00:17:37.490 --> 00:17:41.620
So let's go see if this aspect
would also help for those.

00:17:41.620 --> 00:17:44.500
Go ahead and select the widget.

00:17:44.500 --> 00:17:46.520
And once again,
I suspect there's

00:17:46.520 --> 00:17:48.100
some transform going on here.

00:17:48.100 --> 00:17:50.220
So just expand the
tree a little bit.

00:17:50.220 --> 00:17:51.510
I got to the transform.

00:17:51.510 --> 00:17:53.200
Go over the render tree.

00:17:53.200 --> 00:17:56.140
Now I'll switch modes again,
so I can manipulate the app.

00:17:56.140 --> 00:17:58.720
Now you can see the
transform matrix changing

00:17:58.720 --> 00:18:00.620
as the animation occurs.

00:18:00.620 --> 00:18:03.077
And of course, unless
you're a lot better

00:18:03.077 --> 00:18:04.660
than I am at matrix
math, you probably

00:18:04.660 --> 00:18:07.150
don't really know what that's
doing from that code there.

00:18:07.150 --> 00:18:10.466
But let's look at
the other property

00:18:10.466 --> 00:18:11.590
that's being animated here.

00:18:11.590 --> 00:18:15.332
The opacity's actually changing
as this animation occurs.

00:18:15.332 --> 00:18:17.290
And now this is something
that I could actually

00:18:17.290 --> 00:18:20.410
imagine I'd find useful,
tweaking this UI effect.

00:18:20.410 --> 00:18:24.610
So you want to see how
faded the widget gets right

00:18:24.610 --> 00:18:28.080
when it's about to go off
the edge of the screen.

00:18:28.080 --> 00:18:31.220
So now I can see that it's faded
to about 0.6 at that point.

00:18:31.220 --> 00:18:33.886
So that might be helpful for me.

00:18:33.886 --> 00:18:35.260
But so let's look
at another case

00:18:35.260 --> 00:18:38.850
where the widget
inspectors won't currently

00:18:38.850 --> 00:18:40.600
show you what's going
on in the animation,

00:18:40.600 --> 00:18:42.100
but at least they'll
tell you what's

00:18:42.100 --> 00:18:45.910
not happening in the animation
so you can know what to do.

00:18:45.910 --> 00:18:49.330
In this Pesto app, there's a
slick transition between pages

00:18:49.330 --> 00:18:52.360
here where it looks like
this image is just moving up

00:18:52.360 --> 00:18:53.906
the top of the screen.

00:18:53.906 --> 00:18:55.780
So we can find out if
that's really happening

00:18:55.780 --> 00:18:56.800
by using the inspector.

00:18:56.800 --> 00:18:58.990
Let me go ahead and
select the image.

00:18:58.990 --> 00:19:01.360
And now I'll go ahead and
trigger the animation.

00:19:01.360 --> 00:19:02.620
And the section disappeared.

00:19:02.620 --> 00:19:04.210
But as we saw before,
the inspection's

00:19:04.210 --> 00:19:06.670
pretty good at sticking
to the render object

00:19:06.670 --> 00:19:09.070
if the render object's
just animating.

00:19:09.070 --> 00:19:12.220
So this means something
more complicated's going on.

00:19:12.220 --> 00:19:13.750
And you could go
find out what that

00:19:13.750 --> 00:19:18.130
is by jumping to the
definition of the Hero class

00:19:18.130 --> 00:19:20.980
that's responsible for
performing this animation.

00:19:20.980 --> 00:19:22.930
And the excellent
documentation will

00:19:22.930 --> 00:19:26.260
tell you how this
Hero class is actually

00:19:26.260 --> 00:19:28.090
making it look like
it's moving the image,

00:19:28.090 --> 00:19:32.320
but is really creating a
new image at the location

00:19:32.320 --> 00:19:35.100
of the previous image, and
then moving that image over

00:19:35.100 --> 00:19:38.020
to the location it needs
to be for the final page,

00:19:38.020 --> 00:19:42.190
so that that final image you
see is part of the final page,

00:19:42.190 --> 00:19:44.470
instead of part of
the previous page.

00:19:44.470 --> 00:19:46.150
PHIL QUITSLUND: All right.

00:19:46.150 --> 00:19:51.400
Great So I think that
ends the demo part here.

00:19:51.400 --> 00:19:54.070
And to sum up, we've
done a few things.

00:19:54.070 --> 00:19:55.600
So one thing is
that I hope you've

00:19:55.600 --> 00:20:00.190
seen that the inspector lets
you navigate these neighborhoods

00:20:00.190 --> 00:20:01.990
of interest in the widget tree.

00:20:01.990 --> 00:20:04.990
We showed you that great,
big, scary nested tree.

00:20:04.990 --> 00:20:07.570
But you're not really
confronted by that,

00:20:07.570 --> 00:20:09.580
because this
bidirectional mapping

00:20:09.580 --> 00:20:11.860
is ensuring that your
focused only in the area

00:20:11.860 --> 00:20:13.780
that you're interested in.

00:20:13.780 --> 00:20:16.210
We've shown that you can do
a little bit of spelunking,

00:20:16.210 --> 00:20:21.200
and hopefully solve some
layout related issues.

00:20:21.200 --> 00:20:23.860
But you can also
learn quite a bit more

00:20:23.860 --> 00:20:27.130
about some of the more
advanced features in flutter,

00:20:27.130 --> 00:20:28.677
like animations.

00:20:28.677 --> 00:20:30.385
Can you bring us back
to the main slides?

00:20:34.610 --> 00:20:36.650
So it's worth
emphasizing that most

00:20:36.650 --> 00:20:39.980
of what Jacob showed you
is available for download

00:20:39.980 --> 00:20:41.997
today, with one caveat.

00:20:41.997 --> 00:20:42.830
JACOB RICHMAN: Yeah.

00:20:42.830 --> 00:20:47.390
That mapping between your source
code and the widget tree, that

00:20:47.390 --> 00:20:49.710
requires Kernel
Transformers that

00:20:49.710 --> 00:20:53.140
are only available with new
common frontend in Dart 2.

00:20:53.140 --> 00:20:56.000
So you'll have to wait until
Flutter runs with Dart 2

00:20:56.000 --> 00:20:56.780
to use those.

00:20:56.780 --> 00:20:58.446
You can try it with
a flag [INAUDIBLE],,

00:20:58.446 --> 00:21:01.280
but it's not ready
for general use.

00:21:01.280 --> 00:21:05.090
PHIL QUITSLUND: And we also, on
deck, have quite a few features

00:21:05.090 --> 00:21:08.030
that we'll be rolling
out pretty soon here.

00:21:08.030 --> 00:21:10.430
Yeah, this is just the minimum
we think will be useful.

00:21:10.430 --> 00:21:11.846
We're going to be
working hard now

00:21:11.846 --> 00:21:13.852
on letting you tweak
some widget properties

00:21:13.852 --> 00:21:16.310
right inside the inspector,
instead of going to your source

00:21:16.310 --> 00:21:17.190
code.

00:21:17.190 --> 00:21:19.170
It'll let you filter
the tree by category.

00:21:19.170 --> 00:21:22.190
So if you're only interested
in layout, you can filter it

00:21:22.190 --> 00:21:25.070
so you only see widgets that are
actually affecting your layout.

00:21:25.070 --> 00:21:27.590
It's going to make the trees
a bit smaller for those cases.

00:21:27.590 --> 00:21:29.840
And then we also want to
visualize some layout related

00:21:29.840 --> 00:21:31.050
properties like padding.

00:21:31.050 --> 00:21:32.420
You can think of the box
model you're probably

00:21:32.420 --> 00:21:33.640
familiar with on the web.

00:21:33.640 --> 00:21:35.098
We want to just
show that visually,

00:21:35.098 --> 00:21:36.830
instead of as a string of text.

00:21:36.830 --> 00:21:39.331
And then coming soon, we'll
provide support and other IDs

00:21:39.331 --> 00:21:39.830
as well.

00:21:39.830 --> 00:21:42.310
This currently works in
IntelliJ and Android studio.

00:21:44.344 --> 00:21:45.260
PHIL QUITSLUND: Great.

00:21:45.260 --> 00:21:49.460
So if you want to learn
more, the GitHub project page

00:21:49.460 --> 00:21:50.240
is up there.

00:21:50.240 --> 00:21:51.710
We have an issue tracker.

00:21:51.710 --> 00:21:54.440
Please feel free to
give us feedback there.

00:21:54.440 --> 00:21:57.980
Flutter IO is a great place
to learn more about Flutter.

00:21:57.980 --> 00:21:59.990
And the Flutter
developer community

00:21:59.990 --> 00:22:01.980
is really great,
and really engaged.

00:22:01.980 --> 00:22:05.050
So be sure to go to
Gitter or Stack Overflow

00:22:05.050 --> 00:22:06.480
if you want to engage with them.

00:22:06.480 --> 00:22:07.917
And by all means,
come talk to us.

00:22:07.917 --> 00:22:09.750
We'll be around for the
next couple of days.

00:22:09.750 --> 00:22:11.550
I don't know if we're going
to do an unconference or not,

00:22:11.550 --> 00:22:13.370
but we'll be around
in the courtyard

00:22:13.370 --> 00:22:16.850
and happy to talk about the
inspector and all things

00:22:16.850 --> 00:22:18.115
Flutter and Dart.

00:22:18.115 --> 00:22:20.490
JACOB RICHMAN: Yeah. so come
to our unconference section.

00:22:20.490 --> 00:22:22.550
You can play with this demo,
and see how it works for you.

00:22:22.550 --> 00:22:24.350
PHIL QUITSLUND: All
right, thanks a lot.

00:22:24.350 --> 00:22:25.250
[APPLAUSE]

00:22:25.250 --> 00:22:26.800
JACOB RICHMAN: Thank you.

