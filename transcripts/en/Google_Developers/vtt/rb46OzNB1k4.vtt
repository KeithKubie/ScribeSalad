WEBVTT
Kind: captions
Language: en

00:00:00.840 --> 00:00:01.830
Excellent.

00:00:01.830 --> 00:00:04.690
Hi, I'm Badri from TokBox.

00:00:04.690 --> 00:00:07.150
Thank you guys for
having me here.

00:00:07.150 --> 00:00:08.790
So what I want to
talk about today--

00:00:08.790 --> 00:00:11.050
I was originally going
to talk about building

00:00:11.050 --> 00:00:13.507
an MCU in the cloud, but
I decided not to do that.

00:00:13.507 --> 00:00:15.840
And I'm glad I did that,
because a whole bunch of people

00:00:15.840 --> 00:00:17.420
before me have spoken about it.

00:00:17.420 --> 00:00:22.090
But what I'd like to do today
is really talk about WebRTC

00:00:22.090 --> 00:00:24.100
and a whole bunch of
interesting applications

00:00:24.100 --> 00:00:27.830
which are being built
on top of WebRTC.

00:00:27.830 --> 00:00:30.210
I was talking to [? Serge ?]
from Google last week,

00:00:30.210 --> 00:00:32.830
and he was describing
these use cases

00:00:32.830 --> 00:00:35.470
and he was telling me about
how the magic of WebRTC

00:00:35.470 --> 00:00:36.550
is really in the moments.

00:00:36.550 --> 00:00:38.710
It's all of these
little scenarios,

00:00:38.710 --> 00:00:41.230
real-time communication
on the web enabled.

00:00:41.230 --> 00:00:44.130
So what I'd like to do
today is basically just

00:00:44.130 --> 00:00:47.880
talk about a whole slew of
interesting applications

00:00:47.880 --> 00:00:50.690
which has been
enabled by WebRTC,

00:00:50.690 --> 00:00:52.440
and give you guys
a flavor of what

00:00:52.440 --> 00:00:55.690
is happening in the
ecosystem out there.

00:00:55.690 --> 00:00:59.660
So far warning, I just picked
at random set of use cases.

00:00:59.660 --> 00:01:03.510
So please don't be offended
if your application or use

00:01:03.510 --> 00:01:06.695
case doesn't
prominently show up.

00:01:06.695 --> 00:01:09.370
Jumping along,
what I wanted to do

00:01:09.370 --> 00:01:12.390
is pick a full spectrum of
very interesting use cases

00:01:12.390 --> 00:01:14.890
and say, OK, these are the sorts
of interesting applications

00:01:14.890 --> 00:01:16.950
which are to being
built by WebRTC.

00:01:16.950 --> 00:01:20.170
And WebRTC is just
the technology.

00:01:20.170 --> 00:01:21.780
And what makes it
really interesting

00:01:21.780 --> 00:01:24.380
is all of these very
rich experiences

00:01:24.380 --> 00:01:26.930
which are being built.

00:01:26.930 --> 00:01:30.290
And the first
example I have here

00:01:30.290 --> 00:01:33.950
is this mobile application
which is called Valspar.

00:01:33.950 --> 00:01:36.520
And what Valspar
essentially does

00:01:36.520 --> 00:01:40.050
is-- it's sort of a
service application

00:01:40.050 --> 00:01:43.220
when you're painting your walls
of your home or what have you.

00:01:43.220 --> 00:01:46.210
You can actually schedule
a real-time appointment

00:01:46.210 --> 00:01:47.410
with a consultant.

00:01:47.410 --> 00:01:53.480
And then you can go and actually
have that wall or that area

00:01:53.480 --> 00:01:55.640
you're painting be viewed
by the consultant, who

00:01:55.640 --> 00:01:57.960
gives you real-time advice.

00:01:57.960 --> 00:02:01.910
And like Chris and [? Saheed ?]
mentioned, all of the code

00:02:01.910 --> 00:02:02.670
is open source.

00:02:02.670 --> 00:02:04.970
So you can easily
think about sort

00:02:04.970 --> 00:02:07.120
of compiling it into
your own platform

00:02:07.120 --> 00:02:09.949
and doing really interesting
things with the application

00:02:09.949 --> 00:02:11.020
itself.

00:02:11.020 --> 00:02:13.680
In the case of a mobile
device, you can easily

00:02:13.680 --> 00:02:17.750
think of intercepting the
media stream from the camera,

00:02:17.750 --> 00:02:20.010
or before it's being
rendered on the screen, how

00:02:20.010 --> 00:02:21.844
you can overlay the
right color combination.

00:02:21.844 --> 00:02:24.468
Let's say, if you wanted to know
what your walls look like when

00:02:24.468 --> 00:02:25.970
it was painted
yellow, go for it.

00:02:25.970 --> 00:02:28.360
The remote consultant
can actually do that.

00:02:28.360 --> 00:02:31.459
So this is a very
interesting use case

00:02:31.459 --> 00:02:34.000
which is being enabled by real
time communication on the web,

00:02:34.000 --> 00:02:38.780
and WebRTC specifically.

00:02:38.780 --> 00:02:40.020
Jumping on.

00:02:40.020 --> 00:02:42.800
I'm going to be showing a
whole slew of use cases.

00:02:42.800 --> 00:02:47.320
And I love developers that
have pet projects and hacks.

00:02:47.320 --> 00:02:50.650
Apologies for this slide,
cause it doesn't show properly

00:02:50.650 --> 00:02:51.340
over here.

00:02:51.340 --> 00:02:56.950
But what this is-- this is a
webcam controlled HTML5 slide

00:02:56.950 --> 00:02:59.040
operator by Luigi.

00:02:59.040 --> 00:03:03.660
And what it is, it basically
uses the getUserMedia API,

00:03:03.660 --> 00:03:08.260
and you can use gestures to
enable the slide transitions.

00:03:08.260 --> 00:03:10.800
So instead of using a clicker
or instead of using something

00:03:10.800 --> 00:03:13.710
like that, you could
essentially wave and actually

00:03:13.710 --> 00:03:15.700
make these transitions happen.

00:03:15.700 --> 00:03:17.780
Again, this is
not very apparent.

00:03:17.780 --> 00:03:20.020
A lot of people
think about WebRTC

00:03:20.020 --> 00:03:24.230
as being audio and video,
but that's only one half

00:03:24.230 --> 00:03:24.980
of the equation.

00:03:24.980 --> 00:03:28.920
One half of the equation is
to do what your phone already

00:03:28.920 --> 00:03:30.180
does on the web.

00:03:30.180 --> 00:03:31.980
But clearly, the other
half of the equation

00:03:31.980 --> 00:03:35.290
is all of these very interesting
use cases and applications,

00:03:35.290 --> 00:03:37.150
some of which we
don't know as yet,

00:03:37.150 --> 00:03:39.990
which are going to be
enabled by this technology

00:03:39.990 --> 00:03:43.130
by developers all over the map.

00:03:43.130 --> 00:03:45.940
So this is a very simple
but very interesting

00:03:45.940 --> 00:03:47.830
use case, which is sort of both.

00:03:47.830 --> 00:03:51.150
Yesterday we had a whole bunch
of fun, bobbing around at work,

00:03:51.150 --> 00:03:53.270
trying to make this
slide transition.

00:03:53.270 --> 00:03:56.740
We thought we'd try and actually
use this for my talk today,

00:03:56.740 --> 00:03:57.510
but you know.

00:03:57.510 --> 00:04:00.927
I couldn't get
my-- I was not that

00:04:00.927 --> 00:04:02.260
articulate in terms of gestures.

00:04:02.260 --> 00:04:03.600
I couldn't make that happen.

00:04:06.250 --> 00:04:10.300
Again one of the big things
WebRTC enables-- and we

00:04:10.300 --> 00:04:14.650
see this all the time-- is
redefining communication.

00:04:14.650 --> 00:04:16.779
All the time, we
communications as being

00:04:16.779 --> 00:04:18.570
sort of a [? siloed ?]
application.

00:04:18.570 --> 00:04:20.750
If I want to call somebody,
I pick up my telephone.

00:04:20.750 --> 00:04:23.700
If I want to send a
message to somebody,

00:04:23.700 --> 00:04:26.880
I use Google Chat or
WhatsApp or what have you.

00:04:26.880 --> 00:04:30.910
But what WebRTC
essentially has enabled

00:04:30.910 --> 00:04:36.040
is moved communications out of
a standalone concept in context.

00:04:36.040 --> 00:04:38.470
So, I need to be able
to communicate and use

00:04:38.470 --> 00:04:40.620
something around an
existing context,

00:04:40.620 --> 00:04:45.240
and not think of communications
as a standalone experience.

00:04:45.240 --> 00:04:47.440
Ustyme is a very
interesting example

00:04:47.440 --> 00:04:49.350
of an application out there.

00:04:49.350 --> 00:04:51.640
Again, it's a
mobile application.

00:04:51.640 --> 00:04:54.760
And what they have
done is try and engage

00:04:54.760 --> 00:04:57.510
or create very more
real-time communication

00:04:57.510 --> 00:05:00.130
experiences centered
around content.

00:05:00.130 --> 00:05:03.440
Imagine a grandparent
trying to talk

00:05:03.440 --> 00:05:08.620
to his or her grandchildren
using a pure video conference.

00:05:08.620 --> 00:05:10.510
That's not very engaging
to the children.

00:05:10.510 --> 00:05:13.190
So what they have
done is, they say,

00:05:13.190 --> 00:05:15.050
we can build all
these experience

00:05:15.050 --> 00:05:16.720
is centered around a content.

00:05:16.720 --> 00:05:18.650
This could be around a game.

00:05:18.650 --> 00:05:22.260
This could be around a book--
somebody who is travelling can

00:05:22.260 --> 00:05:24.450
actually read a bedtime
story to their child,

00:05:24.450 --> 00:05:26.250
and the child picks up an iPad.

00:05:26.250 --> 00:05:29.300
And we see all of these
very interesting, sort

00:05:29.300 --> 00:05:32.700
of visceral experiences when
people use these applications.

00:05:32.700 --> 00:05:36.150
So again this is
a very interesting

00:05:36.150 --> 00:05:38.940
content-centered
sort of use case.

00:05:41.870 --> 00:05:44.210
This is an example I wanted
to talk about, again,

00:05:44.210 --> 00:05:49.060
just to emphasize the fact that
WebRTC is not about pure audio

00:05:49.060 --> 00:05:49.600
and video.

00:05:49.600 --> 00:05:52.016
Although there are a lot of
whole bunch of interesting use

00:05:52.016 --> 00:05:55.330
cases, there are an
equal, if not greater,

00:05:55.330 --> 00:05:59.360
number of use cases that people
are using interesting features

00:05:59.360 --> 00:06:03.710
in WebRTC to accomplish
interesting things.

00:06:03.710 --> 00:06:05.600
Here's an example of Pipe.

00:06:05.600 --> 00:06:10.170
Pipe is this service which
enables people to share files.

00:06:10.170 --> 00:06:12.130
And if you were
my Facebook friend

00:06:12.130 --> 00:06:13.740
and I was your
Facebook friend, then

00:06:13.740 --> 00:06:16.400
we would be able to share
content and very large

00:06:16.400 --> 00:06:18.790
files across from each other.

00:06:18.790 --> 00:06:22.610
This was essentially enabled
by the data channels feature

00:06:22.610 --> 00:06:24.150
within WebRTC.

00:06:24.150 --> 00:06:27.220
So if you remember Chris'
slide from the morning,

00:06:27.220 --> 00:06:30.100
WebRTC is more than
just audio and video.

00:06:30.100 --> 00:06:32.600
It's about other forms of data.

00:06:32.600 --> 00:06:34.890
People have been working on
very interesting projects

00:06:34.890 --> 00:06:39.750
with the data channel
especially, creating

00:06:39.750 --> 00:06:42.960
annoymized file transfer or
creating content delivery

00:06:42.960 --> 00:06:45.320
networks and using the
peer-to-peer mechanism

00:06:45.320 --> 00:06:48.440
to speedup content
delivery networks.

00:06:48.440 --> 00:06:51.140
I see the guys from
[? Clear CDN. ?] So there's

00:06:51.140 --> 00:06:54.090
a lot of interesting
applications out there, which

00:06:54.090 --> 00:06:56.490
are not so much center
around audio and video,

00:06:56.490 --> 00:07:00.370
but are sort of
radical in how WebRTC

00:07:00.370 --> 00:07:04.200
has enabled them to happen.

00:07:04.200 --> 00:07:04.770
Moving on.

00:07:04.770 --> 00:07:09.190
Again, this is a
very interesting

00:07:09.190 --> 00:07:10.550
developer-center project.

00:07:10.550 --> 00:07:12.310
This is basically an AR Drone.

00:07:12.310 --> 00:07:13.550
It's the Parrot.

00:07:13.550 --> 00:07:16.930
It's essentially a quadcopter,
which has got a front-facing HD

00:07:16.930 --> 00:07:20.810
camera and a
down-facing HD camera.

00:07:20.810 --> 00:07:22.560
And Rohit, the
developer, basically

00:07:22.560 --> 00:07:25.770
built a very simple
web-based interface

00:07:25.770 --> 00:07:28.630
to be able to control
this quadcopter.

00:07:28.630 --> 00:07:32.260
Again, he used some
elements WebRTC to do that.

00:07:32.260 --> 00:07:36.060
And it's a fun exercise,
all these things

00:07:36.060 --> 00:07:37.822
people playing around with.

00:07:37.822 --> 00:07:40.030
We essentially want to get
a couple of these at work.

00:07:40.030 --> 00:07:42.200
And one of my pet
projects has been

00:07:42.200 --> 00:07:44.770
to have quadcopter
battles, but it's

00:07:44.770 --> 00:07:46.880
a pretty low priority on
the list at this point.

00:07:49.630 --> 00:07:51.740
So again, very
interesting use case

00:07:51.740 --> 00:07:56.520
of all sorts of things
that WebRTC enables.

00:07:56.520 --> 00:07:58.580
Again, there's a
whole host of interest

00:07:58.580 --> 00:08:02.520
which is happening in sort of
vertical-centric use cases.

00:08:02.520 --> 00:08:06.410
Like medical devices
and medical technology

00:08:06.410 --> 00:08:08.280
is an interesting
area where there's

00:08:08.280 --> 00:08:11.330
a lot of things which have
been enabled by WebRTC.

00:08:11.330 --> 00:08:14.310
This is an app by a company
called Net Medical Express.

00:08:14.310 --> 00:08:19.330
And what they do is they make
medical device trolleys which

00:08:19.330 --> 00:08:21.950
you can wheel to a
developing-- it's

00:08:21.950 --> 00:08:24.140
used in Brazil or any sort
of developing country--

00:08:24.140 --> 00:08:26.880
and it essentially
enables you to communicate

00:08:26.880 --> 00:08:30.710
to the doctor or the technician
using audio and video.

00:08:30.710 --> 00:08:34.140
And an interesting
extension to a use case

00:08:34.140 --> 00:08:37.190
such as this that you
can easily imagine

00:08:37.190 --> 00:08:39.419
is playing it out on
the different sorts

00:08:39.419 --> 00:08:41.860
of input devices.

00:08:41.860 --> 00:08:45.280
We see interesting use cases
where people are playing around

00:08:45.280 --> 00:08:49.450
with things like microscopes,
and intelligence telescopes,

00:08:49.450 --> 00:08:53.880
and sort of sensors to actually
pipe data using WebRTC data

00:08:53.880 --> 00:08:57.430
channels, and build a very
immersive experience where

00:08:57.430 --> 00:09:00.200
you can alternate
between audio and video

00:09:00.200 --> 00:09:03.512
and also what the
input device provides.

00:09:03.512 --> 00:09:05.220
For instance, if I'm
talking to a doctor,

00:09:05.220 --> 00:09:08.680
it can potentially alternate
between talking to the doctor,

00:09:08.680 --> 00:09:11.620
as well as seeing
an X-ray directly

00:09:11.620 --> 00:09:13.950
from an X-ray machine
or something like that.

00:09:13.950 --> 00:09:16.540
So again, WebRTC has
enabled a whole bunch

00:09:16.540 --> 00:09:19.190
of very interesting
applications which

00:09:19.190 --> 00:09:26.250
have sort of gained
traction in this area.

00:09:26.250 --> 00:09:28.450
This is, again, a little fun.

00:09:28.450 --> 00:09:32.030
I'm alternating, sort of serious
apps and then the fun apps.

00:09:32.030 --> 00:09:34.470
The Guitar Tuner-- there
are a bunch of guitar tuners

00:09:34.470 --> 00:09:36.900
which were
implemented in WebRTC,

00:09:36.900 --> 00:09:39.200
and it's a whole bunch of fun.

00:09:39.200 --> 00:09:41.150
Yesterday, somebody at
work was very curious,

00:09:41.150 --> 00:09:43.020
as I was playing
around with this app,

00:09:43.020 --> 00:09:45.520
as to why Lauren
and I are making

00:09:45.520 --> 00:09:47.704
high-pitched noises
in the corner.

00:09:47.704 --> 00:09:49.870
We were actually trying
this out to see if it works.

00:09:49.870 --> 00:09:53.960
And apparently Lauren can hold
the tune better than I can.

00:09:53.960 --> 00:09:56.450
But again, this is a very
interesting application,

00:09:56.450 --> 00:09:59.450
completely sort of
out of the box when

00:09:59.450 --> 00:10:03.740
you think about what
WebRTC has enabled.

00:10:10.050 --> 00:10:14.240
I might have-- there we go.

00:10:14.240 --> 00:10:16.280
Again, we truly
believe that there's

00:10:16.280 --> 00:10:19.440
a lot of interesting opportunity
in the services industry,

00:10:19.440 --> 00:10:22.220
as well as the
internet of things.

00:10:22.220 --> 00:10:24.870
For those of you
who know Fluke, they

00:10:24.870 --> 00:10:30.240
make multimeters and sort of
electrical devices and systems

00:10:30.240 --> 00:10:31.462
like that.

00:10:31.462 --> 00:10:33.170
They are sort of
working on a thing which

00:10:33.170 --> 00:10:35.880
is called Fluke Connect, which
essentially collaborates,

00:10:35.880 --> 00:10:40.604
or puts in touch, people in
sort of a services routine.

00:10:40.604 --> 00:10:42.020
And basically the
way it works is,

00:10:42.020 --> 00:10:44.030
if I were a junior
apprentice and I'm actually

00:10:44.030 --> 00:10:46.640
going and fixing an
electrical issue or whatever,

00:10:46.640 --> 00:10:48.610
and I'm not really
sure how to fix it,

00:10:48.610 --> 00:10:50.810
what it enables
you to do is-- It's

00:10:50.810 --> 00:10:55.240
a See What I See use case, where
I can point to the fried wiring

00:10:55.240 --> 00:10:58.290
circuit and call
the expert engineer,

00:10:58.290 --> 00:11:00.360
and he can actually
see what's going on

00:11:00.360 --> 00:11:03.420
and sort of help
debug that issue.

00:11:03.420 --> 00:11:05.720
And if you think about
this very simple See What

00:11:05.720 --> 00:11:09.450
I See model, which
WebRTC has enabled,

00:11:09.450 --> 00:11:13.050
it's essentially applicable
to most services.

00:11:13.050 --> 00:11:15.630
Most services--
whether it's plumbing,

00:11:15.630 --> 00:11:18.610
whether it's real estate
assessments, whether it's

00:11:18.610 --> 00:11:21.620
color consultants
for painting-- I

00:11:21.620 --> 00:11:23.930
think it's basically
opened up a whole raft

00:11:23.930 --> 00:11:28.060
of interesting opportunities
in the service industry.

00:11:28.060 --> 00:11:30.410
And an interesting
extension to that,

00:11:30.410 --> 00:11:34.947
again, is you can think about
different-- with the internet

00:11:34.947 --> 00:11:36.780
of things-- you can
actually think about all

00:11:36.780 --> 00:11:38.980
these other devices'
sensors actually

00:11:38.980 --> 00:11:42.090
encoding data into
this application

00:11:42.090 --> 00:11:45.390
while the real-time
conversation is happening.

00:11:45.390 --> 00:11:48.660
So again, this is
sort of a cool use

00:11:48.660 --> 00:11:52.780
case, which is being
enabled by WebRTC.

00:11:52.780 --> 00:11:54.280
And one of the
points I want to make

00:11:54.280 --> 00:11:56.310
as we're walking through
all of these here,

00:11:56.310 --> 00:11:59.760
is there's a lot of conversation
that generally happens

00:11:59.760 --> 00:12:01.980
about some of these are
supported by the standards,

00:12:01.980 --> 00:12:03.000
as it exists today.

00:12:03.000 --> 00:12:05.520
A lot of things are not
supported by the standards.

00:12:05.520 --> 00:12:07.090
But essentially,
because of the fact

00:12:07.090 --> 00:12:10.400
that WebRTC is an open
standard and protocol

00:12:10.400 --> 00:12:12.810
and all of the
source code is open,

00:12:12.810 --> 00:12:14.560
it actually opens
up a whole host

00:12:14.560 --> 00:12:17.920
of options or
opportunities for people

00:12:17.920 --> 00:12:20.520
to actually go beyond what
merely the standard exists

00:12:20.520 --> 00:12:21.020
today.

00:12:21.020 --> 00:12:24.460
There is no reason why somebody
cannot take the source code

00:12:24.460 --> 00:12:26.620
and sort of tweak it
very interesting ways--

00:12:26.620 --> 00:12:30.640
use the service provider, use
an open source software stack,

00:12:30.640 --> 00:12:33.850
what have you.

00:12:33.850 --> 00:12:37.480
Again, there's a lot of
online tutoring education

00:12:37.480 --> 00:12:41.760
sort of scenarios which
WebRTC apps are being built.

00:12:41.760 --> 00:12:45.000
But I thought this would be
another interesting application

00:12:45.000 --> 00:12:46.670
from that end.

00:12:46.670 --> 00:12:48.670
It's called Capiche.

00:12:48.670 --> 00:12:53.210
And what they want to do
is be able to crowd source

00:12:53.210 --> 00:12:56.670
or connect live
interpreters with people

00:12:56.670 --> 00:12:59.370
who want interpretation
services.

00:12:59.370 --> 00:13:01.700
If I were at an important
business meeting

00:13:01.700 --> 00:13:04.650
or what have you, and I wanted
interpretation services,

00:13:04.650 --> 00:13:08.110
I can actually use this app,
and actually set up this call

00:13:08.110 --> 00:13:12.110
and get access to a live
pool of interpreters.

00:13:12.110 --> 00:13:15.620
Again, this is a very simple,
yet interesting use case

00:13:15.620 --> 00:13:18.850
which WebRTC has opened up.

00:13:21.670 --> 00:13:23.590
This is one of my
favorite examples.

00:13:23.590 --> 00:13:27.150
It's not just about service
industries and things

00:13:27.150 --> 00:13:27.650
like that.

00:13:27.650 --> 00:13:30.730
This is called rapt.fm
and what they do

00:13:30.730 --> 00:13:33.870
is they hosted live rap battles.

00:13:33.870 --> 00:13:34.530
[LAUGHTER]

00:13:34.530 --> 00:13:36.930
I'm not kidding
you, this exists.

00:13:36.930 --> 00:13:38.107
And it's quite amazing.

00:13:38.107 --> 00:13:39.190
You can actually go there.

00:13:39.190 --> 00:13:42.270
You can watch all these people
sort of battle each other

00:13:42.270 --> 00:13:44.730
and there is live
voting and all of that.

00:13:44.730 --> 00:13:49.630
It's quite remarkable the sort
of creative applications which

00:13:49.630 --> 00:13:53.750
are being built,
centered around WebRTC.

00:13:53.750 --> 00:13:56.200
[INAUDIBLE]

00:13:56.200 --> 00:13:56.810
I wish.

00:13:56.810 --> 00:13:59.650
I wish.

00:13:59.650 --> 00:14:03.770
And sort of coming towards
the end of my presentation,

00:14:03.770 --> 00:14:06.380
but here is a very
interesting application.

00:14:06.380 --> 00:14:09.875
Again, it's sort of a
See What I See use case.

00:14:09.875 --> 00:14:11.250
But the point I
want to make here

00:14:11.250 --> 00:14:14.720
is it also extends
to all other areas

00:14:14.720 --> 00:14:16.350
where that scenario make sense.

00:14:16.350 --> 00:14:20.000
In this case, Be
My Eyes is actually

00:14:20.000 --> 00:14:22.580
based out of a
nonprofit in Denmark.

00:14:22.580 --> 00:14:25.550
It was started by a
visually-impaired person.

00:14:25.550 --> 00:14:29.490
Where oftentimes you have
a lot of trouble reading,

00:14:29.490 --> 00:14:32.000
like, nutrition labels and
different things like that.

00:14:32.000 --> 00:14:35.570
They're still not accessible
to majority of people.

00:14:35.570 --> 00:14:39.120
And what they are building-- or
they're using WebRTC to build--

00:14:39.120 --> 00:14:40.380
is to build this

00:14:40.380 --> 00:14:44.930
See What I See app which
puts visually-impaired people

00:14:44.930 --> 00:14:47.040
in touch with a
pool of volunteers.

00:14:47.040 --> 00:14:50.610
So, if I wanted to volunteer
three hours of my time,

00:14:50.610 --> 00:14:55.100
I could essentially register
and a person on the other end

00:14:55.100 --> 00:14:58.135
could flip on the phone,
put a request for my help.

00:14:58.135 --> 00:15:00.260
And then I can tell them,
or I can describe to them

00:15:00.260 --> 00:15:03.810
what exactly I'm seeing.

00:15:03.810 --> 00:15:06.680
So if you look at it
from that context,

00:15:06.680 --> 00:15:08.660
from a technology
point of view, it's

00:15:08.660 --> 00:15:10.500
a very simple app to build.

00:15:10.500 --> 00:15:12.190
But in terms of
the social impact

00:15:12.190 --> 00:15:15.400
it can have, in
terms of the good it

00:15:15.400 --> 00:15:18.990
can do, it's quite remarkable,
all of these use cases.

00:15:18.990 --> 00:15:21.690
And again, all of these
have been enabled by WebRTC.

00:15:21.690 --> 00:15:25.020
It's not that-- these were
possible to do in the past,

00:15:25.020 --> 00:15:26.370
but were very harder.

00:15:26.370 --> 00:15:28.900
Today, a web
developer can go look

00:15:28.900 --> 00:15:31.660
at the online tutorials,
the source code,

00:15:31.660 --> 00:15:34.190
and quickly write a
couple lines of JavaScript

00:15:34.190 --> 00:15:36.290
and actually have a live
video conference running.

00:15:40.590 --> 00:15:46.530
And finally-- The final
example is a whole bunch

00:15:46.530 --> 00:15:49.820
of robotics companies are
also embracing WebRTC.

00:15:49.820 --> 00:15:52.980
This is a company
called Double Robotics.

00:15:52.980 --> 00:15:57.350
What they do is they build
a telepresence robot, which

00:15:57.350 --> 00:15:59.320
is sort of a gyroscopically
controlled robot.

00:15:59.320 --> 00:16:03.790
You stick an iPad into
the head of the robot.

00:16:03.790 --> 00:16:07.010
It looks like Short Circuit V2.

00:16:07.010 --> 00:16:09.460
And you can remotely
control this robot

00:16:09.460 --> 00:16:12.470
and drive it around
from either a mobile app

00:16:12.470 --> 00:16:15.570
or from your browser,
from Chrome or Firefox.

00:16:15.570 --> 00:16:18.660
And it's quite possible to
have this robot go around

00:16:18.660 --> 00:16:22.000
and be part of remote
meetings and stuff like that.

00:16:22.000 --> 00:16:25.224
You can actually wheel
yourself into a conference.

00:16:25.224 --> 00:16:27.390
The screen can slide up and
down so you can actually

00:16:27.390 --> 00:16:28.870
see what's on the screen.

00:16:28.870 --> 00:16:34.620
There's also a
prism which enables

00:16:34.620 --> 00:16:37.320
you to see what's
underneath the robot,

00:16:37.320 --> 00:16:40.030
so that it doesn't trip and fall
over wires, or what have you.

00:16:40.030 --> 00:16:42.910
So, it's, again, a very
interesting use case

00:16:42.910 --> 00:16:47.020
which is being enabled
purely by advent of WebRTC.

00:16:49.690 --> 00:16:52.920
So that's the end
of my presentation,

00:16:52.920 --> 00:16:55.350
but what I'd like to
leave all of you with

00:16:55.350 --> 00:16:58.900
is hopefully a slice of
all of the applications

00:16:58.900 --> 00:17:03.860
which are being built and WebRTC
is essentially the technology.

00:17:03.860 --> 00:17:06.550
And truly for the
technology to be valuable

00:17:06.550 --> 00:17:09.450
it depends upon everybody
in this room and everybody

00:17:09.450 --> 00:17:13.390
beyond to build all
these rich, immersive,

00:17:13.390 --> 00:17:17.470
fun experiences, which actually
touch people's lives in a very

00:17:17.470 --> 00:17:18.569
tangible manner.

00:17:18.569 --> 00:17:21.609
So I encourage all of you
guys to actually use WebRTC.

00:17:21.609 --> 00:17:22.410
Play around.

00:17:22.410 --> 00:17:23.800
It's very simple.

00:17:23.800 --> 00:17:26.790
And come up with
interesting applications.

00:17:26.790 --> 00:17:27.570
Thank you.

00:17:27.570 --> 00:17:29.120
[APPLAUSE]

