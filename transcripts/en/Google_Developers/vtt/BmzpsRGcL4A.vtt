WEBVTT
Kind: captions
Language: en

00:00:00.880 --> 00:00:02.432
Welcome to this
episode of UXD, where

00:00:02.432 --> 00:00:04.390
I will talk about how to
create compelling user

00:00:04.390 --> 00:00:05.960
experiences that
will effectively

00:00:05.960 --> 00:00:08.290
engage your users
by understanding how

00:00:08.290 --> 00:00:10.850
visual attention and
memory actually work.

00:00:10.850 --> 00:00:13.070
This first episode of
this two-part series

00:00:13.070 --> 00:00:15.670
is all about understanding
visual attention.

00:00:15.670 --> 00:00:17.340
I'm your host, Nazmul
Idris, a developer

00:00:17.340 --> 00:00:19.800
advocate passionate
about design and mobile.

00:00:19.800 --> 00:00:21.920
I'll explain how
human attention works

00:00:21.920 --> 00:00:25.250
and how we can respect the
constraints around attention

00:00:25.250 --> 00:00:27.370
to deliver a really
good user experience.

00:00:27.370 --> 00:00:28.910
And if we violate
these constraints,

00:00:28.910 --> 00:00:30.701
there's a good chance
that a bad experience

00:00:30.701 --> 00:00:33.094
will be delivered to users
of your applications.

00:00:33.094 --> 00:00:35.010
Now, we've all experienced
moments of delight.

00:00:35.010 --> 00:00:37.370
And I'll explain why some
of these moments happen

00:00:37.370 --> 00:00:39.600
and how it's not random
and totally repeatable

00:00:39.600 --> 00:00:42.300
using real-world examples.

00:00:42.300 --> 00:00:44.730
Now as humans, we're just
actually a bag of sensors.

00:00:44.730 --> 00:00:47.560
We perceive our world
with these sensors.

00:00:47.560 --> 00:00:49.750
A key part of delivering
a good user experience

00:00:49.750 --> 00:00:51.450
is not violating
constraints around

00:00:51.450 --> 00:00:53.140
how we perceive our world.

00:00:53.140 --> 00:00:56.000
It's all about leveraging
how our sensors actually work

00:00:56.000 --> 00:00:57.790
and delivering
feedback to them that

00:00:57.790 --> 00:01:00.060
will match our expectations
and even delight us

00:01:00.060 --> 00:01:02.480
by exceeding our expectations.

00:01:02.480 --> 00:01:04.040
So let's talk about
visual attention,

00:01:04.040 --> 00:01:06.130
since sight is one
of the main senses

00:01:06.130 --> 00:01:08.630
that we use to perceive
our environment.

00:01:08.630 --> 00:01:10.637
Now as humans, we can
only process small chunks

00:01:10.637 --> 00:01:12.220
of visual information
that we take in.

00:01:12.220 --> 00:01:14.178
This is something that
we do so that we are not

00:01:14.178 --> 00:01:16.300
overwhelmed constantly
by the information that

00:01:16.300 --> 00:01:18.540
is being streamed into
our visual sensors

00:01:18.540 --> 00:01:20.232
from our environment.

00:01:20.232 --> 00:01:21.690
Now through evolution,
we've gotten

00:01:21.690 --> 00:01:23.286
really good at
selectively tuning out

00:01:23.286 --> 00:01:25.160
things that are not
important to our survival

00:01:25.160 --> 00:01:26.670
in the present moment.

00:01:26.670 --> 00:01:29.300
And as a consequence of getting
really good at tuning things

00:01:29.300 --> 00:01:32.450
out, we have something called
selective attention, which

00:01:32.450 --> 00:01:34.400
is if we focus on
one area, we tend

00:01:34.400 --> 00:01:36.219
to miss others in this process.

00:01:36.219 --> 00:01:38.510
Now, there's a great YouTube
video that showcases this.

00:01:38.510 --> 00:01:40.640
And I encourage you
watch this video.

00:01:40.640 --> 00:01:44.160
The QR code for the video
is on the screen below.

00:01:44.160 --> 00:01:46.980
Now, I won't ruin it for you if
you've not watched it already.

00:01:46.980 --> 00:01:49.900
But it will actually have
you go through an exercise

00:01:49.900 --> 00:01:52.460
where you'll see how easy it
is for us to ignore everything

00:01:52.460 --> 00:01:54.920
around us when we get
focused on something

00:01:54.920 --> 00:01:56.990
that's right in front of us.

00:01:56.990 --> 00:02:00.870
Another example is if you're
currently really involved

00:02:00.870 --> 00:02:03.140
composing an email in Gmail
on your Android phone,

00:02:03.140 --> 00:02:05.610
you might easily miss
system notifications.

00:02:05.610 --> 00:02:08.210
Now, the unique challenge in
creating a compelling user

00:02:08.210 --> 00:02:09.820
experience is
designing for something

00:02:09.820 --> 00:02:12.230
called attentional capture.

00:02:12.230 --> 00:02:14.010
So we just tune out
things that are not

00:02:14.010 --> 00:02:16.340
relevant to our
currently-executing task.

00:02:16.340 --> 00:02:18.240
This is a survival mechanism.

00:02:18.240 --> 00:02:20.090
And we've evolved
to do this in order

00:02:20.090 --> 00:02:23.210
to be able to process things
in our everyday blindness.

00:02:23.210 --> 00:02:25.460
Another way to say this
is change blindness.

00:02:25.460 --> 00:02:27.720
That's what it's called--
change blindness.

00:02:27.720 --> 00:02:32.549
And we can use this to deliver
compelling user experiences.

00:02:32.549 --> 00:02:35.090
For example, let's say you've
built a news reader application

00:02:35.090 --> 00:02:36.920
that has an article
reading view that

00:02:36.920 --> 00:02:38.500
shows the number
of unread articles

00:02:38.500 --> 00:02:40.490
that are available on
the top right-hand corner

00:02:40.490 --> 00:02:41.680
of the screen.

00:02:41.680 --> 00:02:44.179
And let's say it uses most of
the surface area of the screen

00:02:44.179 --> 00:02:46.040
to show the full content
of whatever article

00:02:46.040 --> 00:02:48.300
that your user is
currently reading.

00:02:48.300 --> 00:02:51.560
Now let's say a user is using
the app to read an article

00:02:51.560 --> 00:02:53.130
and is immersed in the content.

00:02:53.130 --> 00:02:55.790
If the unread count changes
on the top right-hand corner

00:02:55.790 --> 00:02:57.750
of the screen, they're
probably not going

00:02:57.750 --> 00:03:00.440
to notice that
change, which signals

00:03:00.440 --> 00:03:03.780
to them that new articles are
now available for them to read.

00:03:03.780 --> 00:03:07.520
So if your goal is to update
this unread count silently

00:03:07.520 --> 00:03:09.171
without getting the
user's attention,

00:03:09.171 --> 00:03:11.170
then you can just leave
things the way they are.

00:03:11.170 --> 00:03:13.640
And this will, essentially,
deemphasize that part

00:03:13.640 --> 00:03:15.855
of the user interface
to the user.

00:03:15.855 --> 00:03:17.480
Now, there's a valid
use case for this,

00:03:17.480 --> 00:03:19.170
since not every
single change really

00:03:19.170 --> 00:03:20.720
deserves your user's attention.

00:03:20.720 --> 00:03:22.690
So depending on what
your desired outcome is,

00:03:22.690 --> 00:03:26.340
you can leverage this, change
blindness to your benefit.

00:03:26.340 --> 00:03:29.254
Now, if your goal is to grab the
user's attention with the fact

00:03:29.254 --> 00:03:30.670
that the unread
count has changed,

00:03:30.670 --> 00:03:32.550
then you might consider
using an animation

00:03:32.550 --> 00:03:34.290
to draw their attention to it.

00:03:34.290 --> 00:03:37.050
Object animations draw
the user's attention

00:03:37.050 --> 00:03:39.060
to the change in
your user interface.

00:03:39.060 --> 00:03:40.950
And depending on how
you do the animation,

00:03:40.950 --> 00:03:43.280
it suggests what type
of change has actually

00:03:43.280 --> 00:03:45.757
occurred to that object.

00:03:45.757 --> 00:03:47.340
Another way to grab
a user's attention

00:03:47.340 --> 00:03:49.631
is to use something called
a flicker effect, which just

00:03:49.631 --> 00:03:51.910
means that people sense
differences in what they see

00:03:51.910 --> 00:03:54.510
if these changes happen
more rapidly than not.

00:03:54.510 --> 00:03:56.690
So if you want your
users to become aware

00:03:56.690 --> 00:03:58.409
of a specific
change in an object,

00:03:58.409 --> 00:04:00.450
you might consider showing
the old state and then

00:04:00.450 --> 00:04:02.610
the new state, but
do this quickly.

00:04:02.610 --> 00:04:04.110
And the quicker you
show the change,

00:04:04.110 --> 00:04:05.900
it's perceived as
a flicker, and that

00:04:05.900 --> 00:04:08.160
will capture their
attention more.

00:04:08.160 --> 00:04:10.690
So we've been talking about
selective attention, which

00:04:10.690 --> 00:04:13.570
gives us insight into how we've
become really good at ignoring

00:04:13.570 --> 00:04:16.190
things around us when we
get focused on something.

00:04:16.190 --> 00:04:18.740
So now let's switch gears and
talk about divided attention.

00:04:18.740 --> 00:04:21.600
So it puts a really
high cognitive load

00:04:21.600 --> 00:04:24.510
on a user to split their
selective attention

00:04:24.510 --> 00:04:27.850
between different items
or areas simultaneously.

00:04:27.850 --> 00:04:31.000
So multitasking is, cognitively,
a very expensive thing

00:04:31.000 --> 00:04:33.050
to do for any user.

00:04:33.050 --> 00:04:35.080
People don't actually multitask.

00:04:35.080 --> 00:04:37.150
People just perform
really expensive context

00:04:37.150 --> 00:04:39.480
switching between single tasks.

00:04:39.480 --> 00:04:42.570
So it's really important
to design for this reality.

00:04:42.570 --> 00:04:44.880
There's a great NPR
article on research

00:04:44.880 --> 00:04:46.990
done about how people
actually multitask.

00:04:46.990 --> 00:04:48.285
And I encourage you to read it.

00:04:48.285 --> 00:04:51.580
The QR code for this article
is on the screen below.

00:04:51.580 --> 00:04:55.250
And it's called, "Think
You're Multitasking?

00:04:55.250 --> 00:04:57.210
Think Again."

00:04:57.210 --> 00:04:59.660
You might have experienced
a scenario like this before.

00:04:59.660 --> 00:05:01.243
Let's say you're
editing a Google Doc,

00:05:01.243 --> 00:05:04.240
and people are pinging you
at the same time on Hangouts.

00:05:04.240 --> 00:05:05.990
It's probably distracted
you from the task

00:05:05.990 --> 00:05:08.251
you were performing
editing your Doc.

00:05:08.251 --> 00:05:10.500
And having to respond to
these IMs and work on the Doc

00:05:10.500 --> 00:05:12.890
at the same time, you
incur a high cognitive cost

00:05:12.890 --> 00:05:15.517
for doing each of these
relatively simple tasks,

00:05:15.517 --> 00:05:17.350
because of the expensive
context switch that

00:05:17.350 --> 00:05:19.580
occurs when you shift
your attention from one

00:05:19.580 --> 00:05:21.060
to the other.

00:05:21.060 --> 00:05:22.250
Here's another example.

00:05:22.250 --> 00:05:24.840
Let's say you're busy coding up
something and you get emails.

00:05:24.840 --> 00:05:26.890
If you read these
emails, you will

00:05:26.890 --> 00:05:29.860
tend to lose your
coding-related train of thought.

00:05:29.860 --> 00:05:32.430
So emails can be very
distracting for this reason,

00:05:32.430 --> 00:05:37.140
since they interrupt
the flow and cause

00:05:37.140 --> 00:05:39.010
you to switch context.

00:05:39.010 --> 00:05:40.680
So when you're in
the zone or the flow,

00:05:40.680 --> 00:05:42.346
these interruptions
bring you out of it,

00:05:42.346 --> 00:05:44.840
and these interruptions come
at a high cognitive cost.

00:05:44.840 --> 00:05:46.590
And at the end of
the day, it ends up

00:05:46.590 --> 00:05:48.950
costing more energy,
more cognitive energy,

00:05:48.950 --> 00:05:51.180
to accomplish a task
when you're constantly

00:05:51.180 --> 00:05:53.210
getting taken out of
the flow and having

00:05:53.210 --> 00:05:56.510
to switch context
between different tasks.

00:05:56.510 --> 00:05:58.560
Now on the flip
side, you might want

00:05:58.560 --> 00:06:02.050
to divide a user's attention and
have them split it differently

00:06:02.050 --> 00:06:04.219
between many different
items and areas.

00:06:04.219 --> 00:06:06.510
And a great example of this
is an immersive video game.

00:06:06.510 --> 00:06:07.680
So imagine you're
playing "Halo,"

00:06:07.680 --> 00:06:10.280
and you're focused on all kinds
of bad guys in front of you.

00:06:10.280 --> 00:06:12.410
And you also have
to take into account

00:06:12.410 --> 00:06:15.090
all other kinds of key
performance indicators

00:06:15.090 --> 00:06:18.450
in the periphery, like your
ammo, health, and shield,

00:06:18.450 --> 00:06:21.060
while you're moving around
in an alien environment

00:06:21.060 --> 00:06:23.780
and interacting with lots
of different objects.

00:06:23.780 --> 00:06:25.450
So immersive video
games actually

00:06:25.450 --> 00:06:28.270
train a user to have much
higher situational awareness.

00:06:28.270 --> 00:06:30.100
This actually is a good
thing in real life.

00:06:30.100 --> 00:06:33.750
So when you're walking on
a road or you're driving,

00:06:33.750 --> 00:06:36.250
you want to be aware of
oncoming traffic, pedestrians,

00:06:36.250 --> 00:06:37.070
and so on.

00:06:37.070 --> 00:06:41.660
And you actually need to keep
track of multiple objects

00:06:41.660 --> 00:06:43.890
at the same time.

00:06:43.890 --> 00:06:47.230
So at the end of the day, design
for what your use case actually

00:06:47.230 --> 00:06:47.900
is.

00:06:47.900 --> 00:06:50.060
If you need users to be
immersed in the flow,

00:06:50.060 --> 00:06:52.120
then design for
fewer interruptions.

00:06:52.120 --> 00:06:55.180
If you want users to have
higher situational awareness--

00:06:55.180 --> 00:06:56.750
like in an immersive
video game--

00:06:56.750 --> 00:06:58.550
then go ahead and
divide their tension,

00:06:58.550 --> 00:07:02.500
but understand that there's
a cost and a benefit

00:07:02.500 --> 00:07:05.500
to doing each of these things.

00:07:05.500 --> 00:07:07.180
Now, the unique
challenge we face

00:07:07.180 --> 00:07:09.040
is that we have to
design compelling user

00:07:09.040 --> 00:07:12.500
experiences that engage the
user given that they have

00:07:12.500 --> 00:07:15.020
selective attention
and change blindness.

00:07:15.020 --> 00:07:18.100
This is not easy,
but it can be done.

00:07:18.100 --> 00:07:19.809
So coming back to
animations, this

00:07:19.809 --> 00:07:21.350
is one of the main
reasons animations

00:07:21.350 --> 00:07:22.225
are really important.

00:07:22.225 --> 00:07:23.933
It's not just about
making something look

00:07:23.933 --> 00:07:24.840
pretty or polished.

00:07:24.840 --> 00:07:28.210
Transient changes-- which are
small movements, such as those

00:07:28.210 --> 00:07:29.810
in animations
between objects-- are

00:07:29.810 --> 00:07:32.461
more likely to capture
your user's attention.

00:07:32.461 --> 00:07:33.960
For example, if you
change the color

00:07:33.960 --> 00:07:36.490
of a button in your Android
app or a text field,

00:07:36.490 --> 00:07:38.500
the user might not
really notice that.

00:07:38.500 --> 00:07:41.270
But if you animate those
views, then the user

00:07:41.270 --> 00:07:43.990
will probably see that change.

00:07:43.990 --> 00:07:47.862
Now, one example is the
Hangouts app for Chrome.

00:07:47.862 --> 00:07:49.820
Let's say that you're
chatting with your friend

00:07:49.820 --> 00:07:52.770
and you've not received a
message from them in a while.

00:07:52.770 --> 00:07:54.570
The Hangout app
window is going to be

00:07:54.570 --> 00:07:55.847
minimized and out of the way.

00:07:55.847 --> 00:07:57.930
However, as soon as you
get pinged by your friend,

00:07:57.930 --> 00:07:59.450
the app will start to
vie for your attention

00:07:59.450 --> 00:08:01.908
by doing a subtle animation
and popping up partially to let

00:08:01.908 --> 00:08:03.830
you know the chat
window is active.

00:08:03.830 --> 00:08:06.700
And it also changes colors and
pulses to get your attention.

00:08:06.700 --> 00:08:08.431
This is very subtle,
but it's a great way

00:08:08.431 --> 00:08:10.680
to get your attention without
actually distracting you

00:08:10.680 --> 00:08:12.840
from whatever task you
might have been doing.

00:08:12.840 --> 00:08:15.920
So another example of this
is Google+ notifications

00:08:15.920 --> 00:08:16.980
in Android.

00:08:16.980 --> 00:08:19.760
When you're in Google+
application in Android and you

00:08:19.760 --> 00:08:22.082
get a notification, it just
animates that bell icon,

00:08:22.082 --> 00:08:24.290
the thing on the top right-hand
corner of the screen,

00:08:24.290 --> 00:08:27.160
to let you know that there's
something that might need

00:08:27.160 --> 00:08:28.130
your attention.

00:08:28.130 --> 00:08:29.150
So this is something
that you pick up

00:08:29.150 --> 00:08:30.650
in your peripheral
vision, which is

00:08:30.650 --> 00:08:32.224
taking advantage of
change blindness.

00:08:32.224 --> 00:08:33.890
It also puts the
number of notifications

00:08:33.890 --> 00:08:35.825
that are being stacked
up on the bell.

00:08:35.825 --> 00:08:37.700
So if you're in the
middle of doing something

00:08:37.700 --> 00:08:40.630
else at the time and you're
using selective attention,

00:08:40.630 --> 00:08:42.169
you can simply ignore this.

00:08:42.169 --> 00:08:44.744
However, you don't actually
lose these notifications,

00:08:44.744 --> 00:08:46.160
because they're
getting queued up.

00:08:46.160 --> 00:08:48.730
And you come back to
them later at any time.

00:08:48.730 --> 00:08:51.270
Also if you have
come back to them

00:08:51.270 --> 00:08:53.220
and you view the
notifications and you

00:08:53.220 --> 00:08:55.585
want to go back to them,
they're actually not lost.

00:08:55.585 --> 00:08:57.960
You can go back and look at
the history of notifications.

00:08:57.960 --> 00:08:59.376
So all these things
take advantage

00:08:59.376 --> 00:09:01.990
of change blindness and
selective attention.

00:09:01.990 --> 00:09:03.620
And rather than
work against them,

00:09:03.620 --> 00:09:06.750
it works with them to deliver
a really good user experience.

00:09:06.750 --> 00:09:08.500
So that's all the
time we have today.

00:09:08.500 --> 00:09:10.850
If you haven't already,
please be sure to join our UX

00:09:10.850 --> 00:09:12.030
community on Google+.

00:09:12.030 --> 00:09:15.050
It's a great place where we
can continue this discussion.

00:09:15.050 --> 00:09:18.090
And you can meet others who
are just as passionate about UX

00:09:18.090 --> 00:09:19.140
as you are.

00:09:19.140 --> 00:09:20.725
Thanks for watching and goodbye.

