WEBVTT
Kind: captions
Language: en

00:00:02.514 --> 00:00:03.930
ALEX DANILO: The
Android ecosystem

00:00:03.930 --> 00:00:05.530
is booming with devices.

00:00:05.530 --> 00:00:08.910
You've got phones, tablets,
wearables, casts, tangos,

00:00:08.910 --> 00:00:11.260
cardboards, and even cars.

00:00:11.260 --> 00:00:13.700
And savvy developers know
that the most important rule

00:00:13.700 --> 00:00:16.480
for creating stable, consistent
performance across all

00:00:16.480 --> 00:00:21.190
of these platforms has to do
with one simple thing-- memory.

00:00:21.190 --> 00:00:23.240
My name is Alex Danilo,
and the key to optimizing

00:00:23.240 --> 00:00:25.700
the usage of your apps
memory, and the performance

00:00:25.700 --> 00:00:27.300
that comes with
that, has everything

00:00:27.300 --> 00:00:29.590
to do with wielding the
Android SDK's memory

00:00:29.590 --> 00:00:32.310
tools like an awesome
performance ninja.

00:00:32.310 --> 00:00:34.790
So let's begin your training.

00:00:34.790 --> 00:00:37.070
Now, it's worth pointing
out that the ins and outs

00:00:37.070 --> 00:00:39.850
of application memory is
much more complex than simply

00:00:39.850 --> 00:00:42.240
allocating and releasing
objects, especially

00:00:42.240 --> 00:00:44.660
in a garbage-collected
language, like Java.

00:00:44.660 --> 00:00:46.880
See, garbage collection
events occur in your code

00:00:46.880 --> 00:00:48.800
any time that resources
need to be freed,

00:00:48.800 --> 00:00:50.390
which normally is a good thing.

00:00:50.390 --> 00:00:52.680
But if your code isn't
utilizing memory properly,

00:00:52.680 --> 00:00:54.480
then a flood of GC
events may occur,

00:00:54.480 --> 00:00:56.687
eating into your performance.

00:00:56.687 --> 00:00:58.270
You can get a sense
of how much memory

00:00:58.270 --> 00:01:00.560
your application is using
with the memory monitor

00:01:00.560 --> 00:01:02.670
tool inside Android Studio.

00:01:02.670 --> 00:01:05.390
This simple tool will display a
graph that updates every second

00:01:05.390 --> 00:01:07.710
or so, showing you how much
memory your application

00:01:07.710 --> 00:01:09.380
is currently using,
and how much is

00:01:09.380 --> 00:01:12.020
available to potentially use.

00:01:12.020 --> 00:01:14.080
Each time the dark blue
section of the bar dips,

00:01:14.080 --> 00:01:16.480
that's when a garbage
collection event has occurred,

00:01:16.480 --> 00:01:18.330
freeing up memory
for the application.

00:01:18.330 --> 00:01:21.399
And if you see lots of these
dips in a short period of time,

00:01:21.399 --> 00:01:23.190
chances are that you've
got something crazy

00:01:23.190 --> 00:01:25.800
going on in your code, that's
really eating into your app's

00:01:25.800 --> 00:01:26.980
performance.

00:01:26.980 --> 00:01:29.390
But sadly, the simplicity
of the memory monitor

00:01:29.390 --> 00:01:31.600
doesn't help you track down
where this madness might

00:01:31.600 --> 00:01:33.230
be coming from.

00:01:33.230 --> 00:01:35.020
If we want more
fine-grained knowledge

00:01:35.020 --> 00:01:37.670
of the state of our memory,
and what objects are actually

00:01:37.670 --> 00:01:39.860
taking up space, we
can use a handy tool

00:01:39.860 --> 00:01:42.302
called Heap Viewer inside DDMS.

00:01:42.302 --> 00:01:44.760
This tool allows you to view
how much heap memory a process

00:01:44.760 --> 00:01:47.710
is using, which is useful
in tracking down craziness

00:01:47.710 --> 00:01:50.030
in memory during various
parts of your application's

00:01:50.030 --> 00:01:51.570
execution.

00:01:51.570 --> 00:01:54.170
Once you open up DDMS and
have your phone connected,

00:01:54.170 --> 00:01:56.147
you can click on the
update heap button.

00:01:56.147 --> 00:01:57.730
This will turn on
the profiling system

00:01:57.730 --> 00:01:59.700
to start recording
heap information.

00:01:59.700 --> 00:02:01.950
Once that's done,
click on the heap tab,

00:02:01.950 --> 00:02:04.436
which will be where the
display of that data goes.

00:02:04.436 --> 00:02:06.810
You'll now be looking at the
Java heap memory information

00:02:06.810 --> 00:02:08.870
for the selected application.

00:02:08.870 --> 00:02:11.001
Now notice that text
at the top of the tab--

00:02:11.001 --> 00:02:12.750
the one that says heap
updates will happen

00:02:12.750 --> 00:02:14.810
after every GC for this client?

00:02:14.810 --> 00:02:17.599
Well, click on cause a
GC to update your data.

00:02:17.599 --> 00:02:19.390
You'll see that the
data table will quickly

00:02:19.390 --> 00:02:22.050
update, showing you what data
is currently available and alive

00:02:22.050 --> 00:02:23.067
on the heap.

00:02:23.067 --> 00:02:24.650
When you select one
of the data types,

00:02:24.650 --> 00:02:26.530
the bottom panel will
update, showing you

00:02:26.530 --> 00:02:28.290
a histogram for the
number of allocations

00:02:28.290 --> 00:02:30.720
with a specific memory size.

00:02:30.720 --> 00:02:32.470
For example, you can
see here that there's

00:02:32.470 --> 00:02:35.030
over 100 objects on the heap
that are one byte arrays,

00:02:35.030 --> 00:02:37.150
at a total size of 48 bytes.

00:02:37.150 --> 00:02:39.380
Meanwhile, it looks like
there's a one byte array

00:02:39.380 --> 00:02:41.750
object that's 3.8 megs.

00:02:41.750 --> 00:02:43.920
This tool is helpful to
see what types of objects

00:02:43.920 --> 00:02:46.170
your application has
allocated, as well as what

00:02:46.170 --> 00:02:47.640
their sizes are on the heap.

00:02:47.640 --> 00:02:50.290
For example, if you see three
megabytes of bitmap objects

00:02:50.290 --> 00:02:52.970
on the heap, even though
you've destroyed that activity,

00:02:52.970 --> 00:02:55.310
you might have a memory
leak to worry about.

00:02:55.310 --> 00:02:57.080
But sadly, that view
doesn't tell you

00:02:57.080 --> 00:02:59.600
where the data is being
allocated in your code.

00:02:59.600 --> 00:03:03.136
For that, we need a new tool
called Allocation Tracker.

00:03:03.136 --> 00:03:05.635
You can load up Android Studio,
and click on the Android tab

00:03:05.635 --> 00:03:07.190
at the bottom of the window.

00:03:07.190 --> 00:03:09.600
This will effectively bring
up a version of DDMS that

00:03:09.600 --> 00:03:11.580
runs docked inside your IDE.

00:03:11.580 --> 00:03:13.200
Once you've connected
to your device

00:03:13.200 --> 00:03:15.140
and selected a
debuggable application,

00:03:15.140 --> 00:03:18.110
you can click on the start
allocation tracking tab,

00:03:18.110 --> 00:03:21.050
and then start playing around
in your application for a while.

00:03:21.050 --> 00:03:23.750
When you're done, you can click
on the stop allocation tracking

00:03:23.750 --> 00:03:25.010
button.

00:03:25.010 --> 00:03:27.480
Now note, depending on how
long you've been doing stuff,

00:03:27.480 --> 00:03:29.320
this might take a
while to complete.

00:03:29.320 --> 00:03:31.495
So just hang out for a bit.

00:03:31.495 --> 00:03:32.870
You'll notice that
a new tab will

00:03:32.870 --> 00:03:34.630
appear at the top
of your IDE that

00:03:34.630 --> 00:03:36.200
lists out all the
allocations that

00:03:36.200 --> 00:03:39.470
occurred during the
duration of your sampling.

00:03:39.470 --> 00:03:42.730
Each row in this view represents
an allocation that occurred.

00:03:42.730 --> 00:03:44.510
The order column
tells you what order

00:03:44.510 --> 00:03:46.240
this allocation happened in.

00:03:46.240 --> 00:03:48.850
The allocated class column
tells you what type of data

00:03:48.850 --> 00:03:50.460
was allocated--
if it's an array,

00:03:50.460 --> 00:03:52.360
or a specific class object.

00:03:52.360 --> 00:03:55.040
The size column tells you how
big, in bytes, the allocation

00:03:55.040 --> 00:03:55.790
was.

00:03:55.790 --> 00:03:58.260
The thread ID column tells
you what thread allocated

00:03:58.260 --> 00:04:00.470
that data, and the
allocated site column

00:04:00.470 --> 00:04:02.850
tells you what function was
responsible for allocating

00:04:02.850 --> 00:04:04.367
that memory.

00:04:04.367 --> 00:04:06.700
When you click on an allocation,
the bottom of the panel

00:04:06.700 --> 00:04:08.283
will update, showing
you the full call

00:04:08.283 --> 00:04:09.720
stack for this allocation.

00:04:09.720 --> 00:04:11.470
This tool is super
handy for tracking down

00:04:11.470 --> 00:04:13.145
problems like memory churn.

00:04:13.145 --> 00:04:15.270
So if you see a bunch of
similar objects allocated,

00:04:15.270 --> 00:04:17.564
one after the other, so
their allocation order

00:04:17.564 --> 00:04:20.230
is close to each other,
then you found a great place

00:04:20.230 --> 00:04:22.000
to focus on optimization.

00:04:22.000 --> 00:04:24.537
But your performance ninja
training is far from complete.

00:04:24.537 --> 00:04:26.870
That's why you need to check
out the rest of the Android

00:04:26.870 --> 00:04:28.420
Performance Patterns resources.

00:04:28.420 --> 00:04:31.070
And don't forget to join the
Google+ community to get more

00:04:31.070 --> 00:04:33.840
tips and tricks from other
ninjas out there in the world.

00:04:33.840 --> 00:04:37.150
So as always, keep
calm, profile your code,

00:04:37.150 --> 00:04:40.050
and remember-- perf matters.

