WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:04.240
So, the answer is 3. Why is that? Well, here's the code. Let's take it step by

00:00:04.240 --> 00:00:07.920
step. First of all, every thread is setting a local variable equal to it's own

00:00:07.920 --> 00:00:12.400
thread index. Then in this line, we're declaring a shared variable, which is

00:00:12.400 --> 00:00:16.142
going to be shared by all of the threads in the thread block. I just hardcoded

00:00:16.142 --> 00:00:20.432
in 128 elements here. And now we're actually going to do something. We're going

00:00:20.432 --> 00:00:24.310
to write every thread is going to write into a single element of the array

00:00:24.310 --> 00:00:27.550
corresponding to it's thread index. And the thing that it's going to write into

00:00:27.550 --> 00:00:30.942
that element of the array happens to be its own thread index, okay? So, this is

00:00:30.942 --> 00:00:34.560
going to load up that array with one, two, three, four, and so on. And that's

00:00:34.560 --> 00:00:38.075
just to put something in the array that we can play with. This operation is

00:00:38.075 --> 00:00:42.380
right. So, we need a barrier after this write completes in order to make sure

00:00:42.380 --> 00:00:45.510
that nobody tries to read from the array until after all of the threads have

00:00:45.510 --> 00:00:49.650
finished the write operation. So, let's insert a barrier here. And now, all of

00:00:49.650 --> 00:00:53.930
the threads that pass this if statement are going to do this shift operation,

00:00:53.930 --> 00:00:57.520
right? They're going to set the array at their index to the array at their

00:00:57.520 --> 00:01:01.350
index plus one. But if you think about it, this is really a read and a write

00:01:01.350 --> 00:01:06.070
operation. Here was our first write operation. That was number 1. And now,

00:01:06.070 --> 00:01:10.630
we're doing a read operation. That's number 2. Okay, we're going to read from

00:01:10.630 --> 00:01:15.200
the array at index plus 1. And then, finally we're going to write to the array

00:01:15.200 --> 00:01:20.170
at index. And that's operation three. And the tricky thing about this is that

00:01:20.170 --> 00:01:25.180
all of these reads should complete before we allow any of these writes to

00:01:25.180 --> 00:01:28.160
finish. So, really we need to restructure this code. We'll make this read

00:01:28.160 --> 00:01:32.130
operation explicit, put in a local temporary variable. We'll call the same

00:01:32.130 --> 00:01:35.700
threads. We'll perform the write operation explicitly, and then just to be

00:01:35.700 --> 00:01:40.295
absolutely safe before anybody can use these written values. We needed another

00:01:40.295 --> 00:01:43.780
synchthreads to ensure that all of these write operations have completed before

00:01:43.780 --> 00:01:46.250
anybody attempts to do anything with this array value afterwards.

