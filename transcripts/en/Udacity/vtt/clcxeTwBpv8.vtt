WEBVTT
Kind: captions
Language: en

00:00:00.540 --> 00:00:02.960
So let's start with this
example program which,

00:00:02.960 --> 00:00:06.980
given an array A,
computes the sum of all of its elements.

00:00:06.980 --> 00:00:09.900
That sum will be returned
in this value s.

00:00:09.900 --> 00:00:13.920
This operation is actually an example
of a pattern called a reduction.

00:00:13.920 --> 00:00:16.990
Now let's suppose we only care
about the cost of addition and

00:00:16.990 --> 00:00:19.705
the cost of array access.

00:00:19.705 --> 00:00:23.620
That is, let's assume we can ignore
the cost of all these other operations.

00:00:23.620 --> 00:00:26.900
Like indexing operations,
branches, and so on.

00:00:26.900 --> 00:00:30.870
Here's how the DAG for
this computation might unfold.

00:00:30.870 --> 00:00:32.180
Let's start with iteration one.

00:00:32.180 --> 00:00:36.720
And we need to load A sub 1 and
then perform the addition.

00:00:36.720 --> 00:00:40.620
So in the DAG there would be a node for
A sub 1and a node for the addition.

00:00:40.620 --> 00:00:44.520
And there would also be a dependence
edge since the addition can't start

00:00:44.520 --> 00:00:46.670
until the load is complete.

00:00:46.670 --> 00:00:48.800
Now what about the second iteration?

00:00:48.800 --> 00:00:51.640
We'll repeat the process,
so they'll be a node for

00:00:51.640 --> 00:00:53.820
a sub 2 and a corresponding addition.

00:00:53.820 --> 00:00:58.050
Now in this case there will
be two dependence edges,

00:00:58.050 --> 00:01:00.190
one from A sub 2 to the plus.

00:01:01.340 --> 00:01:04.050
And the other one from the other plus.

00:01:04.050 --> 00:01:07.820
Now technically there's another
dependence which goes from this plus to

00:01:07.820 --> 00:01:09.180
this load.

00:01:09.180 --> 00:01:09.750
So why is that?

00:01:10.790 --> 00:01:13.690
The reason is that the code is
being executed sequentially so

00:01:13.690 --> 00:01:16.590
there's actually what's
called a control dependence

00:01:16.590 --> 00:01:19.660
between executions of
the body of the four loop.

00:01:20.720 --> 00:01:25.640
That is this statement that i = 2 can
not execute until the statement that i =

00:01:25.640 --> 00:01:27.840
1 has completed.

00:01:27.840 --> 00:01:30.569
For now we are going to ignore
these controlled dependencies.

00:01:31.720 --> 00:01:34.800
So if we ignore the control dependences
and we continue this process,

00:01:34.800 --> 00:01:37.530
then you'll get a DAG that
looks something like this.

00:01:37.530 --> 00:01:41.190
Now, suppose I give you
a PRAM with P processors.

00:01:41.190 --> 00:01:44.090
How long will it take
the PRAM to execute this DAG?

00:01:45.110 --> 00:01:48.850
Let's call that time Tp(n).

00:01:48.850 --> 00:01:52.510
Now, notice that the loads
have no input dependences.

00:01:52.510 --> 00:01:56.110
They're all ready to go so
you can take them as a group.

00:01:56.110 --> 00:02:00.080
Assign them to the P processors and
execute them in batch.

00:02:01.220 --> 00:02:06.390
So in our cost model that we take
c-ling of n divided by p units of time.

00:02:07.510 --> 00:02:12.150
That is their n loads which we
divide among the P processors.

00:02:12.150 --> 00:02:13.600
Each load takes one unit of time.

00:02:13.600 --> 00:02:16.570
And since we're dealing with integers,
we need this ceiling.

00:02:17.590 --> 00:02:19.840
So, what about the additions?

00:02:19.840 --> 00:02:21.710
These additions have
dependencies between them.

00:02:22.830 --> 00:02:25.350
So, it looks like I can't
ever execute a given addition

00:02:25.350 --> 00:02:27.610
until I've executed
the previous addition.

00:02:27.610 --> 00:02:30.620
And it doesn't matter how
many processors you have,

00:02:30.620 --> 00:02:32.540
you've got to execute these
additions one at a time.

00:02:33.680 --> 00:02:36.240
Therefore, you'll need at least

00:02:36.240 --> 00:02:39.690
n units of time to complete
all of the additions.

00:02:39.690 --> 00:02:41.570
Now both of these conditions
have to be true so

00:02:41.570 --> 00:02:43.510
we can write this in
a more compact form.

00:02:44.620 --> 00:02:47.650
Now p is always at least one since
presumably you're not going to run

00:02:47.650 --> 00:02:49.910
a machine with no processors.

00:02:49.910 --> 00:02:54.210
So that means the ceiling of n over
P is always going to be less than

00:02:54.210 --> 00:02:55.150
just plain old n.

00:02:56.240 --> 00:02:57.760
So, we can simplify the time.

00:02:59.240 --> 00:03:01.600
So, what we just showed is
exactly what we expected,

00:03:01.600 --> 00:03:05.625
which is that a sequential reduction
will take n units of time on a PRAM.

