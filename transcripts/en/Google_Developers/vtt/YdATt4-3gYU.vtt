WEBVTT
Kind: captions
Language: en

00:00:00.127 --> 00:00:02.210
LAURENCE MORONEY: With the
announcement of Kotlin,

00:00:02.210 --> 00:00:04.685
it's an exciting time to
be an Android developer.

00:00:04.685 --> 00:00:06.060
Today on "Coffee
with a Googler,"

00:00:06.060 --> 00:00:08.780
I'm chatting with one of the
people who made it happen,

00:00:08.780 --> 00:00:09.690
Jeffrey Van Gogh.

00:00:16.742 --> 00:00:19.420
So one of my favorite moments
at Google I/O this year

00:00:19.420 --> 00:00:21.022
was when we did
that Kotlin reveal,

00:00:21.022 --> 00:00:22.480
and it was the
Android lock screen.

00:00:22.480 --> 00:00:25.090
And they carved out the K in
it, and the crowd went crazy.

00:00:25.090 --> 00:00:28.150
And Jeffrey, I know you're
one of the guys behind this.

00:00:28.150 --> 00:00:30.080
What was it like to
bring Kotlin to Android?

00:00:30.080 --> 00:00:31.817
JEFFREY VAN GOGH:
Oh, it was amazing.

00:00:31.817 --> 00:00:33.400
I joined Android
Studio two years ago.

00:00:33.400 --> 00:00:35.400
And of course, we
talked out to customers.

00:00:35.400 --> 00:00:37.600
And we started hearing that
people thought that Java

00:00:37.600 --> 00:00:38.920
was not really moving forward.

00:00:38.920 --> 00:00:42.430
They wanted to get more
modern language features.

00:00:42.430 --> 00:00:44.120
And so as we started
looking into that,

00:00:44.120 --> 00:00:46.370
one of the things that came
up are these people really

00:00:46.370 --> 00:00:46.985
like Kotlin.

00:00:46.985 --> 00:00:49.110
And so about a year ago,
I started playing with it.

00:00:49.110 --> 00:00:50.990
And it's so much
more productive.

00:00:50.990 --> 00:00:52.030
It's so much fun.

00:00:52.030 --> 00:00:55.840
I had cut a lot of the things
that I really liked about C#,

00:00:55.840 --> 00:00:58.420
but still a lot of the
compatibility with existing

00:00:58.420 --> 00:00:59.045
Java libraries.

00:00:59.045 --> 00:01:01.003
And then they added a
whole bunch of new things

00:01:01.003 --> 00:01:02.210
on top of it as well.

00:01:02.210 --> 00:01:05.150
And so it just makes
programming a lot more fun.

00:01:05.150 --> 00:01:08.140
And so we need to get this
into our customer hands.

00:01:08.140 --> 00:01:11.871
And so the weeks, months,
leading up to I/O,

00:01:11.871 --> 00:01:13.370
we had a lot of
talks with JetBrains

00:01:13.370 --> 00:01:14.680
to see if we could get it done.

00:01:14.680 --> 00:01:16.270
And we got it done.

00:01:16.270 --> 00:01:19.330
And people really are excited,
and we are very excited.

00:01:19.330 --> 00:01:21.097
Of course, it's just a start.

00:01:21.097 --> 00:01:22.930
We need to do a lot
more hard technical work

00:01:22.930 --> 00:01:25.540
to really make it a first
class language for Android.

00:01:25.540 --> 00:01:28.896
And there's a lot more to
come over the next year.

00:01:28.896 --> 00:01:30.520
I think we can do a
lot of cool things.

00:01:30.520 --> 00:01:31.750
LAURENCE MORONEY: So why Kotlin?

00:01:31.750 --> 00:01:33.340
JEFFREY VAN GOGH:
It's a fun language.

00:01:33.340 --> 00:01:34.870
It's really fun to program.

00:01:34.870 --> 00:01:38.370
It's very little code you have
to write, compared to Java,

00:01:38.370 --> 00:01:41.710
you have to implement the whole
class with fields, getters,

00:01:41.710 --> 00:01:44.017
setters, hash codes, equals.

00:01:44.017 --> 00:01:46.392
LAURENCE MORONEY: Most of my
bugs are in POJOs like that.

00:01:46.392 --> 00:01:47.516
JEFFREY VAN GOGH: Oh, yeah.

00:01:47.516 --> 00:01:49.120
In Kotlin, it's
one line of code.

00:01:49.120 --> 00:01:51.710
And there's many more
examples like that.

00:01:51.710 --> 00:01:54.230
It's just a fun,
productive language

00:01:54.230 --> 00:01:56.920
that makes your whole
programming experience so much

00:01:56.920 --> 00:01:57.850
easier.

00:01:57.850 --> 00:01:58.510
LAURENCE MORONEY:
And can I still

00:01:58.510 --> 00:02:00.140
be productive as an
Android developer

00:02:00.140 --> 00:02:03.080
if I'm using, like, third party
libraries and open source Java

00:02:03.080 --> 00:02:03.580
stuff?

00:02:03.580 --> 00:02:04.955
JEFFREY VAN GOGH:
Oh, absolutely.

00:02:04.955 --> 00:02:08.300
Kotlin interrupts
with Java very simply.

00:02:08.300 --> 00:02:09.880
They both compile
to Java bytecode,

00:02:09.880 --> 00:02:12.050
which we then compile
to Dalvik bytecode

00:02:12.050 --> 00:02:13.480
for running on Android.

00:02:13.480 --> 00:02:15.250
And so it runs
the same on the OS

00:02:15.250 --> 00:02:17.229
and on the source language side.

00:02:17.229 --> 00:02:19.520
It has a really good interrupt
between Java and Kotlin.

00:02:19.520 --> 00:02:22.370
You can call Kotlin from
Java, Java from Kotlin.

00:02:22.370 --> 00:02:24.880
You can even have inheritance,
where your Java class

00:02:24.880 --> 00:02:28.700
is extended by Kotlin class and
extended by Java class again.

00:02:28.700 --> 00:02:29.770
It works very smoothly.

00:02:29.770 --> 00:02:30.070
LAURENCE MORONEY: Nice.

00:02:30.070 --> 00:02:32.710
And then from a tooling
perspective in Android Studio,

00:02:32.710 --> 00:02:34.044
do I get, like, file new Kotlin?

00:02:34.044 --> 00:02:35.168
JEFFREY VAN GOGH: Oh, yeah.

00:02:35.168 --> 00:02:37.760
You can, either in existing
project, add a new Kotlin file,

00:02:37.760 --> 00:02:39.100
or when you start a
new project, you just

00:02:39.100 --> 00:02:40.640
check the box and
the wizard saying,

00:02:40.640 --> 00:02:43.120
I want Kotlin enabled to
already create the default

00:02:43.120 --> 00:02:44.679
activities in Kotlin source.

00:02:44.679 --> 00:02:46.970
And it will set all the
settings in your Kotlin plugin,

00:02:46.970 --> 00:02:47.700
create a plugin.

00:02:47.700 --> 00:02:48.950
It's a very smooth experience.

00:02:48.950 --> 00:02:49.720
LAURENCE MORONEY: Cool.

00:02:49.720 --> 00:02:51.511
You know, this actually,
really, reminds me

00:02:51.511 --> 00:02:53.320
of when Swift first came out.

00:02:53.320 --> 00:02:55.279
And there were a lot of
Objective-C developers,

00:02:55.279 --> 00:02:56.278
and then Swift came out.

00:02:56.278 --> 00:02:57.880
But it had that level
of compatibility

00:02:57.880 --> 00:02:59.440
that, as a Swift
developer, I could

00:02:59.440 --> 00:03:01.679
consume Objective-C libraries
and that kind of stuff.

00:03:01.679 --> 00:03:02.970
And then Swift really took off.

00:03:02.970 --> 00:03:04.210
So hopefully, Kotlin
will take off,

00:03:04.210 --> 00:03:05.480
and Android in the same way.

00:03:05.480 --> 00:03:06.940
JEFFREY VAN GOGH:
Yeah, I hope so.

00:03:06.940 --> 00:03:07.850
I love the language.

00:03:07.850 --> 00:03:09.775
So I'd definitely like
to see it succeed.

00:03:09.775 --> 00:03:12.025
LAURENCE MORONEY: Now, so
if I'm an Android developer,

00:03:12.025 --> 00:03:14.220
and I've been using
Android Studio for a while,

00:03:14.220 --> 00:03:17.110
and if I've got a number
of third party libraries

00:03:17.110 --> 00:03:19.270
in Java that I'm using,
can I continue to use those

00:03:19.270 --> 00:03:19.880
if I'm using Kotlin?

00:03:19.880 --> 00:03:21.338
JEFFREY VAN GOGH:
Yeah, absolutely.

00:03:21.338 --> 00:03:23.255
So the way that Kotlin
works, it compiles down

00:03:23.255 --> 00:03:25.546
to Java bytecode, which is
the same thing that the Java

00:03:25.546 --> 00:03:26.230
compiler does.

00:03:26.230 --> 00:03:28.130
And then we take our tools--

00:03:28.130 --> 00:03:29.920
the dexer that takes
the Java bytecode

00:03:29.920 --> 00:03:31.570
and converts it to
Dalvik bytecode.

00:03:31.570 --> 00:03:31.900
LAURENCE MORONEY: OK.

00:03:31.900 --> 00:03:34.900
JEFFREY VAN GOGH: And so for the
Android OS, it's just the same.

00:03:34.900 --> 00:03:36.070
It's just Dalvik bytecode.

00:03:36.070 --> 00:03:37.600
It doesn't know any different.

00:03:37.600 --> 00:03:42.190
And so Kotlin, actually, has
a really good interrupt story

00:03:42.190 --> 00:03:43.120
with the Java code.

00:03:43.120 --> 00:03:46.000
And you can actually call
Kotlin code from Java,

00:03:46.000 --> 00:03:47.110
and Java code from Kotlin.

00:03:47.110 --> 00:03:49.450
And you can have inheritance
hierarchies in between.

00:03:49.450 --> 00:03:50.507
And it just works fine.

00:03:50.507 --> 00:03:52.090
Because in the end,
it's all bytecode.

00:03:52.090 --> 00:03:53.215
LAURENCE MORONEY: OK, cool.

00:03:53.215 --> 00:03:55.450
So now, like I've only
used Java in Android.

00:03:55.450 --> 00:03:57.420
It's on my to-do
list to learn Kotlin.

00:03:57.420 --> 00:03:59.290
But why all the love for Kotlin?

00:03:59.290 --> 00:04:01.955
Why this language in particular?

00:04:01.955 --> 00:04:04.330
JEFFREY VAN GOGH: So I think
if you look at the language,

00:04:04.330 --> 00:04:08.230
it's not a particularly
innovative language.

00:04:08.230 --> 00:04:10.472
There's not a lot of
new research going on.

00:04:10.472 --> 00:04:11.930
But they didn't
set out to do that.

00:04:11.930 --> 00:04:13.580
They wanted it to be
a productive language.

00:04:13.580 --> 00:04:15.330
So they looked at a
lot of other languages

00:04:15.330 --> 00:04:17.170
that have a lot of
modern features.

00:04:17.170 --> 00:04:19.600
And they figured, how can
we interrupt this with Java,

00:04:19.600 --> 00:04:21.310
without having to
break two worlds,

00:04:21.310 --> 00:04:23.474
and make developers
more productive?

00:04:23.474 --> 00:04:25.390
I think the area that
they are more innovative

00:04:25.390 --> 00:04:27.670
is that they started
from the tool side.

00:04:27.670 --> 00:04:29.170
Most languages,
they start, and they

00:04:29.170 --> 00:04:32.110
write a standard compiler,
batch compiler, which

00:04:32.110 --> 00:04:34.190
takes source input,
and run a command line,

00:04:34.190 --> 00:04:35.740
and produce output.

00:04:35.740 --> 00:04:37.177
JetBrains is a tool company.

00:04:37.177 --> 00:04:39.760
And they started, like, how do
we do this in the [INAUDIBLE]??

00:04:39.760 --> 00:04:41.600
How do we make sure
that refactoring works?

00:04:41.600 --> 00:04:43.457
How do we ensure that
static analysis works?

00:04:43.457 --> 00:04:45.790
I believe that they had the
frontend working before they

00:04:45.790 --> 00:04:47.470
had the backend working.

00:04:47.470 --> 00:04:49.069
So it's a very
different mindset.

00:04:49.069 --> 00:04:51.360
And I think the real innovation
area is in the tooling.

00:04:51.360 --> 00:04:53.640
And that's why you see that
people are so productive.

00:04:53.640 --> 00:04:55.900
The tooling works very
closely with the language,

00:04:55.900 --> 00:04:57.550
and that makes you
more productive

00:04:57.550 --> 00:04:58.572
than in other languages.

00:04:58.572 --> 00:05:00.280
LAURENCE MORONEY: Now
your role in Google

00:05:00.280 --> 00:05:01.690
is you work on the compiler
and the compilation.

00:05:01.690 --> 00:05:03.085
JEFFREY VAN GOGH: Yes.

00:05:03.085 --> 00:05:06.670
So I run several teams in
Android CO, and one of them

00:05:06.670 --> 00:05:08.650
is the compiler team.

00:05:08.650 --> 00:05:10.880
So we used to have the
Jack compiler, which

00:05:10.880 --> 00:05:13.420
converts Java source
code to Dalvik bytecode.

00:05:13.420 --> 00:05:16.040
And earlier this year, we
announced that we are no longer

00:05:16.040 --> 00:05:17.510
investing in that.

00:05:17.510 --> 00:05:20.220
And so we started investing
a couple of tools.

00:05:20.220 --> 00:05:23.240
We were doing Java 8
desugaring for people

00:05:23.240 --> 00:05:25.110
who want to use Java
8 language features.

00:05:25.110 --> 00:05:27.200
So if you say, Kotlin
isn't my thing,

00:05:27.200 --> 00:05:29.570
you can still use all
the new Java 8 features

00:05:29.570 --> 00:05:31.780
in Android security space.

00:05:31.780 --> 00:05:33.850
We're also investing
in the dexer.

00:05:33.850 --> 00:05:37.567
So the dexer converts your Java
bytecode to Dalvik bytecode.

00:05:37.567 --> 00:05:39.650
And we're doing more and
more optimizations there,

00:05:39.650 --> 00:05:41.380
making sure we use smaller code.

00:05:41.380 --> 00:05:43.010
We're also doing
work to make sure

00:05:43.010 --> 00:05:45.830
it works very
optimally with Kotlin,

00:05:45.830 --> 00:05:49.010
so that we can make sure that
your debugging scenarios work

00:05:49.010 --> 00:05:50.625
correctly, et cetera.

00:05:50.625 --> 00:05:52.250
And then the other
thing I'm working on

00:05:52.250 --> 00:05:55.790
is I'm working together
with JetBrains on the Kotlin

00:05:55.790 --> 00:05:57.890
Language Committee
to make sure that we

00:05:57.890 --> 00:05:59.830
evolve the language correctly.

00:05:59.830 --> 00:06:02.690
And so that mainly focuses
around breaking changes

00:06:02.690 --> 00:06:04.710
and deprecation policies.

00:06:04.710 --> 00:06:07.490
We want to make
sure that Kotlin is

00:06:07.490 --> 00:06:09.950
a language that people can
depend on for many years

00:06:09.950 --> 00:06:11.010
to come.

00:06:11.010 --> 00:06:12.890
And so there shouldn't
be any surprises

00:06:12.890 --> 00:06:14.431
that the features
no longer work when

00:06:14.431 --> 00:06:16.790
you want to compile your
app two years forward.

00:06:16.790 --> 00:06:17.150
LAURENCE MORONEY: Got it.

00:06:17.150 --> 00:06:19.670
So you're part of the language
committee steering Kotlin.

00:06:19.670 --> 00:06:20.580
JEFFREY VAN GOGH:
Yeah, correctly.

00:06:20.580 --> 00:06:21.140
LAURENCE MORONEY:
So we're not just

00:06:21.140 --> 00:06:23.095
investing in Kotlin
being part of our tools,

00:06:23.095 --> 00:06:24.470
but we're really
heavily invested

00:06:24.470 --> 00:06:25.428
in the language itself.

00:06:25.428 --> 00:06:27.580
JEFFREY VAN GOGH: Yeah.

00:06:27.580 --> 00:06:31.620
We announced at Google I/O there
is a foundation being formed.

00:06:31.620 --> 00:06:33.640
And as part of that,
there is a committee

00:06:33.640 --> 00:06:35.950
with one person from JetBrains,
one person from Google,

00:06:35.950 --> 00:06:37.100
and an independent.

00:06:37.100 --> 00:06:38.642
And so we are looking
at the language

00:06:38.642 --> 00:06:40.391
and making sure that
we don't break people

00:06:40.391 --> 00:06:42.080
as we are building
new, cool features.

00:06:42.080 --> 00:06:43.246
LAURENCE MORONEY: Excellent.

00:06:43.246 --> 00:06:44.660
That sounds really cool now.

00:06:44.660 --> 00:06:47.245
The one thing I hear about
Kotlin always is that it's fun.

00:06:47.245 --> 00:06:48.260
JEFFREY VAN GOGH: Yeah, it is.

00:06:48.260 --> 00:06:49.926
LAURENCE MORONEY:
It's fun to play with.

00:06:49.926 --> 00:06:51.295
What makes it so much fun?

00:06:51.295 --> 00:06:53.420
JEFFREY VAN GOGH: So for
me, it's particularly fun.

00:06:53.420 --> 00:06:56.750
I've been doing programming
languages for my whole career.

00:06:56.750 --> 00:06:59.900
I have been working on compilers
and static analysis tools

00:06:59.900 --> 00:07:00.820
for 15 years.

00:07:00.820 --> 00:07:01.740
LAURENCE MORONEY: Wow.

00:07:01.740 --> 00:07:02.360
JEFFREY VAN GOGH:
So I always like

00:07:02.360 --> 00:07:04.943
to see what cool things people
do with language and the tricks

00:07:04.943 --> 00:07:05.790
you can do with it.

00:07:05.790 --> 00:07:08.870
But I think even for people
who are just writing programs

00:07:08.870 --> 00:07:12.747
for a living, not necessarily
programming language geeks,

00:07:12.747 --> 00:07:14.330
it makes it a lot
more fun because you

00:07:14.330 --> 00:07:16.460
don't have to write all
the boilerplate code.

00:07:16.460 --> 00:07:17.460
LAURENCE MORONEY: I see.

00:07:17.460 --> 00:07:19.190
JEFFREY VAN GOGH:
Java is very verbose.

00:07:19.190 --> 00:07:21.260
When you write a--

00:07:21.260 --> 00:07:24.877
let's say you have a class
that's describing a customer.

00:07:24.877 --> 00:07:27.460
You have to write all the fields
and all the getter and setter

00:07:27.460 --> 00:07:30.994
methods, you're get
hash code, the equals.

00:07:30.994 --> 00:07:32.660
In Kotlin, that's
just one line of code.

00:07:32.660 --> 00:07:34.326
And it will generate
all the boilerplate

00:07:34.326 --> 00:07:36.380
and make sure it is correct.

00:07:36.380 --> 00:07:38.255
And so that's just one example.

00:07:38.255 --> 00:07:40.130
There are so many things
where they made sure

00:07:40.130 --> 00:07:44.415
that you have to write less
code, that it's less buggy.

00:07:44.415 --> 00:07:46.790
You don't have to worry as
much about null pointer issues

00:07:46.790 --> 00:07:49.282
because they track all the
null pointer information

00:07:49.282 --> 00:07:51.240
and give you compiler
errors if you mess it up.

00:07:51.240 --> 00:07:52.115
LAURENCE MORONEY: OK.

00:07:52.115 --> 00:07:54.260
And just going back
to that moment at I/O

00:07:54.260 --> 00:07:57.380
when we announced it,
it was such a surprise,

00:07:57.380 --> 00:08:00.170
not just for people outside
of Google, but many of us

00:08:00.170 --> 00:08:00.980
inside of Google.

00:08:00.980 --> 00:08:03.980
And it's like I sit really
close to you here at Kirkland,

00:08:03.980 --> 00:08:04.819
and I had no idea.

00:08:04.819 --> 00:08:07.110
I was sitting in the audience,
and it just blew my mind

00:08:07.110 --> 00:08:08.360
that you're supporting Kotlin.

00:08:08.360 --> 00:08:11.240
JEFFREY VAN GOGH: We really
wanted to keep it secret.

00:08:11.240 --> 00:08:13.180
We didn't want it to leak.

00:08:13.180 --> 00:08:15.010
We wanted a big surprise.

00:08:15.010 --> 00:08:17.352
And also, we needed
a time to make sure

00:08:17.352 --> 00:08:18.560
that everything went through.

00:08:18.560 --> 00:08:21.980
We wanted to make sure we had a
good deal set up that protects

00:08:21.980 --> 00:08:23.210
the future of the language.

00:08:23.210 --> 00:08:26.360
And so we wanted to make sure
that we did everything right

00:08:26.360 --> 00:08:28.052
before we announced it.

00:08:28.052 --> 00:08:29.760
LAURENCE MORONEY: It
was such a surprise,

00:08:29.760 --> 00:08:30.860
but such a great surprise.

00:08:30.860 --> 00:08:33.260
Because social media lit
up, as you probably saw,

00:08:33.260 --> 00:08:36.990
at I/O. What's the
feedback been like?

00:08:36.990 --> 00:08:39.320
JEFFREY VAN GOGH: A
lot of people love it.

00:08:39.320 --> 00:08:42.441
We heard a lot of
people saying, well,

00:08:42.441 --> 00:08:44.690
I was worrying that I had
to go argue with my manager.

00:08:44.690 --> 00:08:46.784
But now that Google supports
it, it's a done deal.

00:08:46.784 --> 00:08:48.200
LAURENCE MORONEY:
It's always good

00:08:48.200 --> 00:08:50.430
when we prevent people
arguing with their managers.

00:08:50.430 --> 00:08:51.680
JEFFREY VAN GOGH: Yeah, it is.

00:08:51.680 --> 00:08:52.580
LAURENCE MORONEY: As
a manager yourself,

00:08:52.580 --> 00:08:53.775
I'm sure you appreciate it.

00:08:53.775 --> 00:08:56.630
JEFFREY VAN GOGH: Yeah, although
a good technique argument--

00:08:56.630 --> 00:08:58.400
I like to have those.

00:08:58.400 --> 00:09:00.350
LAURENCE MORONEY: I'll
bear that in mind.

00:09:00.350 --> 00:09:02.962
So the feedback was
generally very positive.

00:09:02.962 --> 00:09:03.920
JEFFREY VAN GOGH: Yeah.

00:09:03.920 --> 00:09:05.630
I think there was some
worry about people

00:09:05.630 --> 00:09:08.300
thinking that now we're no
longer investing in Java.

00:09:08.300 --> 00:09:12.740
But as I said, we just added
a Java 8 support to enrich CO.

00:09:12.740 --> 00:09:14.580
And we'll keep
investing there as well.

00:09:14.580 --> 00:09:16.390
We understand that
it's not for everybody.

00:09:16.390 --> 00:09:17.390
LAURENCE MORONEY: Right.

00:09:17.390 --> 00:09:18.806
JEFFREY VAN GOGH:
So we fully plan

00:09:18.806 --> 00:09:20.473
to invest in Java
functionality as well.

00:09:20.473 --> 00:09:22.972
LAURENCE MORONEY: So if I'm a
new developer, and I'm getting

00:09:22.972 --> 00:09:24.920
started, and I'm
starting with Android,

00:09:24.920 --> 00:09:27.440
and I've heard all about
Kotlin and how much fun it

00:09:27.440 --> 00:09:29.634
is, how would I get
started building this?

00:09:29.634 --> 00:09:31.550
JEFFREY VAN GOGH: So
it's actually really easy

00:09:31.550 --> 00:09:33.909
to get started because it's
not a either/or choice.

00:09:33.909 --> 00:09:36.200
You don't have to say, well,
I'm going to either choose

00:09:36.200 --> 00:09:37.970
Java or Kotlin.

00:09:37.970 --> 00:09:39.740
You can just take an
existing Java project

00:09:39.740 --> 00:09:42.420
and add one Kotlin file and
write one function in Kotlin

00:09:42.420 --> 00:09:44.030
and keep the rest
of your app in Java.

00:09:44.030 --> 00:09:45.730
And everything keeps working.

00:09:45.730 --> 00:09:46.190
LAURENCE MORONEY: Cool.

00:09:46.190 --> 00:09:47.410
JEFFREY VAN GOGH: Or
you could go as extreme

00:09:47.410 --> 00:09:48.868
as writing your
whole app in Kotlin

00:09:48.868 --> 00:09:50.390
and never look again at Java.

00:09:50.390 --> 00:09:50.930
LAURENCE MORONEY: OK, nice.

00:09:50.930 --> 00:09:53.580
JEFFREY VAN GOGH: So you can
go anywhere in that spectrum.

00:09:53.580 --> 00:09:55.413
LAURENCE MORONEY: So
in Android Studio, will

00:09:55.413 --> 00:09:57.663
my file new project experience
other Kotlin templates?

00:09:57.663 --> 00:09:58.579
JEFFREY VAN GOGH: Yes.

00:09:58.579 --> 00:10:01.010
So either you can-- if you
have an existing project,

00:10:01.010 --> 00:10:02.572
you can just add
a new Kotlin file.

00:10:02.572 --> 00:10:04.280
Or if you want to
start with some project

00:10:04.280 --> 00:10:08.150
from scratch, in the wizard,
there will be a new check box.

00:10:08.150 --> 00:10:10.986
And I noticed you have 3.0 and
above, it says enable Kotlin.

00:10:10.986 --> 00:10:11.860
LAURENCE MORONEY: OK.

00:10:11.860 --> 00:10:14.443
JEFFREY VAN GOGH: And it will
do all the work of adding Kotlin

00:10:14.443 --> 00:10:17.980
to your Android griddle file
to load the Kotlin plugin.

00:10:17.980 --> 00:10:21.612
It will also create the first
activity in Kotlin source.

00:10:21.612 --> 00:10:22.820
LAURENCE MORONEY: Nice, nice.

00:10:22.820 --> 00:10:24.940
So then if I just want to
get started with Kotlin,

00:10:24.940 --> 00:10:26.590
Android Studio seems
to be the way to go.

00:10:26.590 --> 00:10:27.730
JEFFREY VAN GOGH: Yep, yep.

00:10:27.730 --> 00:10:29.813
And then if you're not
sure if you want to try it,

00:10:29.813 --> 00:10:31.720
there's also, on
kotlinlang.org, there

00:10:31.720 --> 00:10:34.670
is an online "hello
world" sandbox.

00:10:34.670 --> 00:10:36.020
And you can play there as well.

00:10:36.020 --> 00:10:36.760
LAURENCE MORONEY:
Oh, so the sandbox--

00:10:36.760 --> 00:10:39.130
I can start typing code in
my browser and testing it

00:10:39.130 --> 00:10:39.820
JEFFREY VAN GOGH: Yep.

00:10:39.820 --> 00:10:42.190
LAURENCE MORONEY: And this is
on the Android developers site?

00:10:42.190 --> 00:10:43.900
JEFFREY VAN GOGH: No,
it's on kotlinlang.org.

00:10:43.900 --> 00:10:45.233
LAURENCE MORONEY: Oh, I see, OK.

00:10:45.233 --> 00:10:47.660
But the Android Studio I get
from the Android developers,

00:10:47.660 --> 00:10:47.960
right?

00:10:47.960 --> 00:10:48.730
JEFFREY VAN GOGH: Yes.

00:10:48.730 --> 00:10:49.960
LAURENCE MORONEY: So if
I want to get started,

00:10:49.960 --> 00:10:51.680
it's worth playing
kotlinlang.org.

00:10:51.680 --> 00:10:53.965
And I go to
developer.android.com

00:10:53.965 --> 00:10:55.300
to download Android Studio.

00:10:55.300 --> 00:10:56.020
Cool.

00:10:56.020 --> 00:10:57.760
And is there any
words of advice you'd

00:10:57.760 --> 00:11:00.550
give to developers getting out
and starting with this stuff?

00:11:00.550 --> 00:11:01.550
JEFFREY VAN GOGH:
Just try it out.

00:11:01.550 --> 00:11:02.258
It's so much fun.

00:11:02.258 --> 00:11:04.457
You'll realize that
you don't have to write

00:11:04.457 --> 00:11:05.540
all your boilerplate code.

00:11:05.540 --> 00:11:07.150
And coding becomes
so much more fun.

00:11:07.150 --> 00:11:07.790
LAURENCE MORONEY: Sounds great.

00:11:07.790 --> 00:11:09.040
So thank you so much, Jeffrey.

00:11:09.040 --> 00:11:09.710
Thanks a lot.

00:11:09.710 --> 00:11:10.270
JEFFREY VAN GOGH: Thank you.

00:11:10.270 --> 00:11:10.870
LAURENCE MORONEY:
Thanks, everybody,

00:11:10.870 --> 00:11:13.078
for watching this episode
of "Coffee With a Googler,"

00:11:13.078 --> 00:11:14.650
and for Jeffrey being our guest.

00:11:14.650 --> 00:11:16.420
If you are like me,
and you are just

00:11:16.420 --> 00:11:18.190
itching to get
started with Kotlin,

00:11:18.190 --> 00:11:19.690
we've heard that's
the way to do it.

00:11:19.690 --> 00:11:21.654
The kotlinlang.org, right?

00:11:21.654 --> 00:11:22.570
JEFFREY VAN GOGH: Yep.

00:11:22.570 --> 00:11:24.100
LAURENCE MORONEY: And also
download Android Studio.

00:11:24.100 --> 00:11:25.750
And you can just do
file new experience

00:11:25.750 --> 00:11:28.220
and use the templates
and just start coding.

00:11:28.220 --> 00:11:30.800
So I'm really looking forward
to seeing the kind of things

00:11:30.800 --> 00:11:31.210
that you're going to build.

00:11:31.210 --> 00:11:32.344
So thank you very much.

00:11:32.344 --> 00:11:33.260
Thanks again, Jeffrey.

00:11:33.260 --> 00:11:35.110
JEFFREY VAN GOGH: Thank you.

