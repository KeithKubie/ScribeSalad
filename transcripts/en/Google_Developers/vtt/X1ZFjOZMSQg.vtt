WEBVTT
Kind: captions
Language: en

00:00:04.021 --> 00:00:05.396
JOEL WEINBERGER:
Anyway, so yeah,

00:00:05.396 --> 00:00:07.600
I'm Joel Weinberger,
as Parisa said.

00:00:07.600 --> 00:00:09.190
And I work on a
Chrome security team.

00:00:09.190 --> 00:00:10.480
I'm a software engineer.

00:00:10.480 --> 00:00:13.390
I focus on a bunch
of different issues,

00:00:13.390 --> 00:00:17.110
but tend to focus on user
experience, security, and tools

00:00:17.110 --> 00:00:19.420
for developers to help
web developers write

00:00:19.420 --> 00:00:22.404
more secure web applications.

00:00:22.404 --> 00:00:24.820
And I'm going to talk today
about three things you can do.

00:00:24.820 --> 00:00:26.486
So some of the things
we've talked today

00:00:26.486 --> 00:00:29.230
may have made you a little
sad, perhaps even a little

00:00:29.230 --> 00:00:31.010
depressed about the
state of the world,

00:00:31.010 --> 00:00:33.420
but it turns out there's
a lot of things we can do.

00:00:33.420 --> 00:00:35.780
And I'm going to talk about
three that I sort of view

00:00:35.780 --> 00:00:39.120
as sort of the most important
that we can do as a community

00:00:39.120 --> 00:00:43.550
in making our web
applications more secure.

00:00:43.550 --> 00:00:46.260
So I want to start at a sort of
basic question though, right?

00:00:46.260 --> 00:00:50.020
We have these web browsers that
are running web applications.

00:00:50.020 --> 00:00:52.120
And a common
question I get is why

00:00:52.120 --> 00:00:54.320
can't the browser just
solve all these problems?

00:00:54.320 --> 00:00:56.960
So what does it that
the browser can do?

00:00:56.960 --> 00:00:58.450
I work on browser security.

00:00:58.450 --> 00:00:59.680
We work on a lot of issues.

00:00:59.680 --> 00:01:02.230
There's a couple concrete
things we can do.

00:01:02.230 --> 00:01:03.543
We can work on web standards.

00:01:03.543 --> 00:01:04.959
And we can make
web standards that

00:01:04.959 --> 00:01:09.145
are going to be secure and
provide secure APIs for all web

00:01:09.145 --> 00:01:10.020
developers out there.

00:01:10.020 --> 00:01:12.340
And this is vitally important,
and we it constantly.

00:01:12.340 --> 00:01:14.950
We're Working with all the
other browser vendors out there.

00:01:14.950 --> 00:01:19.570
And you can build lots of
secure HTML5 APIs and tools.

00:01:19.570 --> 00:01:21.550
That's really vitally important.

00:01:21.550 --> 00:01:24.180
Another thing we do, that's
also really important,

00:01:24.180 --> 00:01:27.400
is that we actually harden
the web browser itself, right?

00:01:27.400 --> 00:01:31.040
And one example this is the
Chrome sandbox, for example.

00:01:31.040 --> 00:01:34.690
We harden the browser, so even
if the worst possible things

00:01:34.690 --> 00:01:39.740
imaginable happen and
potentially actual code

00:01:39.740 --> 00:01:42.450
execution on the machine, we
have this sandbox in place

00:01:42.450 --> 00:01:47.650
to make sure that arbitrary
code execution can't happen.

00:01:47.650 --> 00:01:51.520
And we try to protect
the users from that.

00:01:51.520 --> 00:01:54.700
We also build lots of tools,
both for users and developers,

00:01:54.700 --> 00:01:58.740
to help users have a more
secure experience on the web

00:01:58.740 --> 00:02:01.690
and try to allow them to
understand what's going on.

00:02:01.690 --> 00:02:04.980
We're constantly testing out
new features and web browsers

00:02:04.980 --> 00:02:09.181
to make sure users
know what's going on.

00:02:09.181 --> 00:02:13.490
This of course raises an
incredibly obvious question,

00:02:13.490 --> 00:02:14.940
what can't we do?

00:02:14.940 --> 00:02:15.680
Right?

00:02:15.680 --> 00:02:18.070
And the answer is
relatively simple actually,

00:02:18.070 --> 00:02:20.210
and yet incredibly complex.

00:02:20.210 --> 00:02:23.360
We can't stop bugs
and vulnerabilities

00:02:23.360 --> 00:02:25.581
in web applications
themselves, right?

00:02:25.581 --> 00:02:27.080
There's nothing we
can do in the end

00:02:27.080 --> 00:02:29.210
if you have a bug
in your application,

00:02:29.210 --> 00:02:31.180
because a bug in
your application

00:02:31.180 --> 00:02:33.980
is indistinguishable from
a well formed application

00:02:33.980 --> 00:02:35.800
from the browsers perspective.

00:02:35.800 --> 00:02:38.070
So I want to talk today
about some of the ways

00:02:38.070 --> 00:02:40.410
that, as web developers,
you can take advantage

00:02:40.410 --> 00:02:42.240
of some of the tools
that we give you,

00:02:42.240 --> 00:02:44.950
as well as take advantage of
things we can't help you with.

00:02:44.950 --> 00:02:46.540
And that will make
everybody's lives

00:02:46.540 --> 00:02:50.820
easier, but most
importantly for your users.

00:02:50.820 --> 00:02:52.630
So we're going to talk
about three things.

00:02:52.630 --> 00:02:54.171
We're going to talk
about first class

00:02:54.171 --> 00:02:56.560
sanitization in
your application.

00:02:56.560 --> 00:02:58.330
And this is actually
really playing off

00:02:58.330 --> 00:02:59.960
of what Eduardo was
just talking about,

00:02:59.960 --> 00:03:01.294
and I think is really important.

00:03:01.294 --> 00:03:03.418
We're then going to talk
about secure communication

00:03:03.418 --> 00:03:04.470
in your application.

00:03:04.470 --> 00:03:06.470
And it's something that
you may have heard of,

00:03:06.470 --> 00:03:08.762
you probably have heard
about, and I hope you have.

00:03:08.762 --> 00:03:11.220
But we're going to emphasize
why it's incredibly important.

00:03:11.220 --> 00:03:13.011
And then we're going
to talk about security

00:03:13.011 --> 00:03:14.870
policies for your
web application.

00:03:14.870 --> 00:03:16.650
And the key here is
that each of them

00:03:16.650 --> 00:03:21.430
talks about a slightly different
aspect of a web application.

00:03:21.430 --> 00:03:23.910
So we're going to first
talk about sanitization,

00:03:23.910 --> 00:03:27.150
which is about what happens
before your application leaves

00:03:27.150 --> 00:03:27.650
your server.

00:03:27.650 --> 00:03:29.566
We're going to talk about
communication, which

00:03:29.566 --> 00:03:31.920
is what happens as it goes
across over to the browser.

00:03:31.920 --> 00:03:33.545
And then finally,
we'll talk about what

00:03:33.545 --> 00:03:36.070
happens once it's
actually there.

00:03:36.070 --> 00:03:39.530
So let's get started and
talk about sanitization

00:03:39.530 --> 00:03:42.399
as a first class feature.

00:03:42.399 --> 00:03:44.940
Obviously we've been talking a
lot about cross site scripting

00:03:44.940 --> 00:03:47.710
tonight, and for good
reason, but let's just

00:03:47.710 --> 00:03:48.880
do a quick recap here.

00:03:48.880 --> 00:03:50.200
Really simple example.

00:03:50.200 --> 00:03:53.247
Imagine you're developing
a web forum, right?

00:03:53.247 --> 00:03:54.330
Really simple application.

00:03:54.330 --> 00:03:55.914
You expect comments
on your web forum.

00:03:55.914 --> 00:03:57.538
And you know it's
going to be just sort

00:03:57.538 --> 00:03:59.000
of simple textual
comments, which

00:03:59.000 --> 00:04:03.400
are going to come from
users who are untrusted.

00:04:03.400 --> 00:04:05.690
Naturally, you're
nightmare scenario is this.

00:04:05.690 --> 00:04:10.620
A comment ends up on your page,
which is just a script tag

00:04:10.620 --> 00:04:12.560
and is going to
execute arbitrarily

00:04:12.560 --> 00:04:16.089
bad things on your web page.

00:04:16.089 --> 00:04:19.230
So the fundamental problem
here, as a sort of alluded to,

00:04:19.230 --> 00:04:23.205
is that the web browser
has no idea what's bad

00:04:23.205 --> 00:04:24.430
and what's good.

00:04:24.430 --> 00:04:26.880
From the web
browser's perspective,

00:04:26.880 --> 00:04:29.730
this is all just content coming
from the web application.

00:04:29.730 --> 00:04:31.620
So the real secret here
is that you actually

00:04:31.620 --> 00:04:35.430
have to figure this out before
reaches the web browser,

00:04:35.430 --> 00:04:40.280
because the web browser won't
know the good from the bad.

00:04:40.280 --> 00:04:41.859
So this is a really
common pattern

00:04:41.859 --> 00:04:43.525
that I've seen in
many web applications.

00:04:43.525 --> 00:04:46.720
I've even written it for
myself at some point.

00:04:46.720 --> 00:04:48.870
You're writing your
web application,

00:04:48.870 --> 00:04:51.076
and as hopefully you got
a sense of from Eduardo,

00:04:51.076 --> 00:04:52.700
perhaps this is not
the right approach,

00:04:52.700 --> 00:04:55.500
but you're going to
have some content.

00:04:55.500 --> 00:04:58.150
It's going to have
some user data in it.

00:04:58.150 --> 00:05:00.870
And so let's make sure there's
no angle brackets in there,

00:05:00.870 --> 00:05:01.050
right?

00:05:01.050 --> 00:05:02.860
Because then we can be
sure that those script

00:05:02.860 --> 00:05:04.070
tags aren't going to appear.

00:05:04.070 --> 00:05:08.149
And indeed, if your user
data is a script tag,

00:05:08.149 --> 00:05:09.940
it's going to take all
those angle brackets

00:05:09.940 --> 00:05:11.630
and replace them,
and you'll get that

00:05:11.630 --> 00:05:13.296
as your output, which,
if you'll notice,

00:05:13.296 --> 00:05:15.401
is just some harmless text.

00:05:15.401 --> 00:05:16.650
That's a little messy looking.

00:05:16.650 --> 00:05:19.025
You probably don't want that
appearing in your web forum,

00:05:19.025 --> 00:05:20.959
but compared to
some of the trolling

00:05:20.959 --> 00:05:23.000
that happens in web forums
that's nothing, right?

00:05:23.000 --> 00:05:23.770
So we're happy.

00:05:23.770 --> 00:05:26.710
That's a good day.

00:05:26.710 --> 00:05:29.720
Another example, perhaps
you're taking URLs,

00:05:29.720 --> 00:05:32.150
and you're going to put
them on your web page.

00:05:32.150 --> 00:05:35.200
So we get some user data, and
it's an untrusted user data.

00:05:35.200 --> 00:05:36.710
You filter out the
angle brackets,

00:05:36.710 --> 00:05:38.660
and you ex output
it to your page.

00:05:38.660 --> 00:05:41.800
And you're good to-- rats!

00:05:41.800 --> 00:05:43.162
We missed it, right?

00:05:43.162 --> 00:05:44.870
In this case, there
was no angle bracket,

00:05:44.870 --> 00:05:47.290
because we're talking
about some content that's

00:05:47.290 --> 00:05:49.050
going to appear as URL.

00:05:49.050 --> 00:05:51.329
And that's a different
context from the original one

00:05:51.329 --> 00:05:53.870
we were talking about, which
was sort of in the PC data area,

00:05:53.870 --> 00:05:55.930
as it's called, which is
sort of the general area

00:05:55.930 --> 00:05:57.536
that HTML tags appear.

00:05:57.536 --> 00:06:00.160
And it turns out that, as we've
been discussing all night long,

00:06:00.160 --> 00:06:02.282
this is just so
incredibly complex.

00:06:02.282 --> 00:06:04.740
And if you're going to start
writing your own sanitization,

00:06:04.740 --> 00:06:08.190
as we were doing here by
replacing angle brackets,

00:06:08.190 --> 00:06:10.420
you're really going to have
to know a lot of details.

00:06:10.420 --> 00:06:13.870
And there's been a bunch of
academic research on this,

00:06:13.870 --> 00:06:15.670
and this is sort of
an academic model that

00:06:15.670 --> 00:06:18.880
was developed that explains
a lot of the details.

00:06:18.880 --> 00:06:20.794
And I don't to get
too technical on you,

00:06:20.794 --> 00:06:22.710
but if you want to roll
your own sanitizations

00:06:22.710 --> 00:06:24.460
you really are going
to have to understand

00:06:24.460 --> 00:06:27.220
that the relationship between
all these transducers and sub

00:06:27.220 --> 00:06:27.770
grammars.

00:06:27.770 --> 00:06:30.145
And you got to really understand
all these relationships,

00:06:30.145 --> 00:06:31.300
and-- no, no.

00:06:31.300 --> 00:06:32.260
You're doing it wrong.

00:06:32.260 --> 00:06:32.450
Right?

00:06:32.450 --> 00:06:34.170
If you ever have to think
about something like this

00:06:34.170 --> 00:06:36.410
in web design, you're
totally doing it wrong.

00:06:36.410 --> 00:06:38.868
You shouldn't ever have to
think about the model of the web

00:06:38.868 --> 00:06:39.710
browser.

00:06:39.710 --> 00:06:42.060
And so the real
answer is that you

00:06:42.060 --> 00:06:44.420
have to build this into
your web flow, right?

00:06:44.420 --> 00:06:47.050
You have to have this as
part of your development

00:06:47.050 --> 00:06:50.399
as you're going along.

00:06:50.399 --> 00:06:52.440
And it turns out that most
frameworks that you're

00:06:52.440 --> 00:06:54.670
using today probably
have tools that

00:06:54.670 --> 00:06:56.480
are already available to you.

00:06:56.480 --> 00:06:58.030
And you should be
using those tools,

00:06:58.030 --> 00:06:59.620
and taking full
advantage of them,

00:06:59.620 --> 00:07:02.020
and using them to the
best your ability.

00:07:02.020 --> 00:07:06.250
So just off the top my head,
there are tools in CodeIgniter,

00:07:06.250 --> 00:07:08.060
in Django, in C template.

00:07:08.060 --> 00:07:10.920
There's the XSS terminate
plug-in for Rails.

00:07:10.920 --> 00:07:12.764
And while none of
these cover every case,

00:07:12.764 --> 00:07:13.930
they're a really good start.

00:07:13.930 --> 00:07:16.280
And if you're doing any sort
of work with these frameworks,

00:07:16.280 --> 00:07:17.571
you really need to be doing it.

00:07:17.571 --> 00:07:21.977
And as Eduardo was talking
about, if it doesn't exist,

00:07:21.977 --> 00:07:23.810
you need to get on top
of that and make sure

00:07:23.810 --> 00:07:26.310
that the developers actually
build these tools in,

00:07:26.310 --> 00:07:29.290
because they're so important
for how this is going to work.

00:07:29.290 --> 00:07:32.440
So just taking a simple
example of to give

00:07:32.440 --> 00:07:33.990
an example of how
this could work.

00:07:33.990 --> 00:07:37.880
This comes from the GWT
SafeHtml templates library,

00:07:37.880 --> 00:07:39.555
which is one of my
favorite libraries.

00:07:39.555 --> 00:07:41.660
It just does a really great job.

00:07:41.660 --> 00:07:45.530
Full disclosure it's the
Google Web Toolkit library.

00:07:45.530 --> 00:07:49.140
And basically, if you just
take a look at this example,

00:07:49.140 --> 00:07:51.790
it's building a template,
which, at compile time,

00:07:51.790 --> 00:07:54.560
can sort of determine
safely where you're

00:07:54.560 --> 00:07:57.520
going to be outputting
untrusted data into.

00:07:57.520 --> 00:07:59.240
And in this really
simple example,

00:07:59.240 --> 00:08:01.370
you take the user data,
which is eventually

00:08:01.370 --> 00:08:05.330
going to go into this
template, and automagically it

00:08:05.330 --> 00:08:08.670
knows where this data
is going to here,

00:08:08.670 --> 00:08:11.310
and it knows the proper
sanitization to apply.

00:08:11.310 --> 00:08:13.330
So when the bad
guy actually takes

00:08:13.330 --> 00:08:17.080
one of these crazy URL
based attacks on you,

00:08:17.080 --> 00:08:18.910
instead just replacing
the angle brackets,

00:08:18.910 --> 00:08:22.147
it's going to replace
the correct thing.

00:08:22.147 --> 00:08:24.480
And it's going to know to
take out that JavaScript colon

00:08:24.480 --> 00:08:27.210
and make everything safe, right?

00:08:27.210 --> 00:08:28.950
And the whole thing
here is that you just

00:08:28.950 --> 00:08:32.677
had to sort of describe the
behavior of your web page.

00:08:32.677 --> 00:08:34.510
You didn't have to think
about sanitization.

00:08:34.510 --> 00:08:36.716
You want it just sort of
be a part of your workflow.

00:08:36.716 --> 00:08:38.799
And I think you'll find
that once you sort of make

00:08:38.799 --> 00:08:40.190
it a part of your
workflow, it'll

00:08:40.190 --> 00:08:41.689
make everything
you're doing easier.

00:08:41.689 --> 00:08:44.550
You just won't have to
think about it anymore.

00:08:44.550 --> 00:08:46.065
And really, the
whole point here is

00:08:46.065 --> 00:08:48.210
that you may make it
as easy as possible.

00:08:48.210 --> 00:08:49.130
It's simple.

00:08:49.130 --> 00:08:51.755
You're just describing what your
web page is going to look like

00:08:51.755 --> 00:08:54.170
and everything gets
taken care for you.

00:08:54.170 --> 00:08:56.170
So that's the first thing
you have to do, right?

00:08:56.170 --> 00:08:58.753
You have to make sure that stuff
that comes out of your server

00:08:58.753 --> 00:09:00.820
and goes to your user
will actually be safe.

00:09:00.820 --> 00:09:02.570
So try to take advantage
of the tools that

00:09:02.570 --> 00:09:03.566
are available to you.

00:09:03.566 --> 00:09:05.940
But let's talk about what
happens when your data actually

00:09:05.940 --> 00:09:07.810
leaves your web page.

00:09:07.810 --> 00:09:08.890
It goes to the wire.

00:09:08.890 --> 00:09:10.510
It's ready to go
to the web browser

00:09:10.510 --> 00:09:13.930
and have the user
interact with it.

00:09:13.930 --> 00:09:16.800
So I think most of us
have a model of how

00:09:16.800 --> 00:09:19.070
HTTP communication works, right?

00:09:19.070 --> 00:09:20.470
Sort of basic web traffic.

00:09:20.470 --> 00:09:23.120
We have a web browser,
and you have a server,

00:09:23.120 --> 00:09:25.060
and data goes back and
forth between the two,

00:09:25.060 --> 00:09:26.862
and they communicate.

00:09:26.862 --> 00:09:28.320
Except it turns
out that this isn't

00:09:28.320 --> 00:09:32.360
in any way how it
actually works, right?

00:09:32.360 --> 00:09:34.570
It's actually a
giant messy cloud.

00:09:34.570 --> 00:09:36.640
It's going through a
lot of different things.

00:09:36.640 --> 00:09:39.380
There's many web servers
between you and the other side.

00:09:39.380 --> 00:09:41.820
There are guys with
black hats on who

00:09:41.820 --> 00:09:43.210
are trying to steal your data.

00:09:43.210 --> 00:09:45.990
It goes through many types of
agencies and things like that.

00:09:45.990 --> 00:09:48.520
And there's all sorts of
other bad and horrible things

00:09:48.520 --> 00:09:49.950
in between.

00:09:49.950 --> 00:09:52.060
And the main thing
is you have no idea

00:09:52.060 --> 00:09:53.750
where it's going
between the two, right?

00:09:53.750 --> 00:09:55.170
You have no control over it.

00:09:55.170 --> 00:09:59.180
And that's sort of, actually,
the beauty of the internet.

00:09:59.180 --> 00:10:00.930
And so you're worried
about these attacks.

00:10:00.930 --> 00:10:02.555
And you're worried
about people sitting

00:10:02.555 --> 00:10:04.392
in between you and your users.

00:10:04.392 --> 00:10:06.100
Except that one of
the more common things

00:10:06.100 --> 00:10:08.430
I hear when talking to
web developers yeah,

00:10:08.430 --> 00:10:10.290
but that's sort of a
ridiculous scenario.

00:10:10.290 --> 00:10:13.620
No one's actually sitting
between me and my users.

00:10:13.620 --> 00:10:17.300
A couple years ago there
was this great demo

00:10:17.300 --> 00:10:19.652
that was given that
was-- calling it

00:10:19.652 --> 00:10:21.130
a demo is really
underselling it.

00:10:21.130 --> 00:10:23.650
It was a great example
application of an attack.

00:10:23.650 --> 00:10:25.285
It was called Firesheep.

00:10:25.285 --> 00:10:27.940
And what Firesheep
did was you could--

00:10:27.940 --> 00:10:29.820
it was an extension for Firefox.

00:10:29.820 --> 00:10:32.440
And you could go anywhere
you had access to Wi-Fi.

00:10:32.440 --> 00:10:35.639
Coffee shop, Google
guest, wherever.

00:10:35.639 --> 00:10:36.680
And you could sit around.

00:10:36.680 --> 00:10:38.320
You could turn on
this extension.

00:10:38.320 --> 00:10:41.100
And it would just
silently record

00:10:41.100 --> 00:10:44.110
all the data it's seeing,
and it would pull out

00:10:44.110 --> 00:10:46.660
all the authentication
tokens and login

00:10:46.660 --> 00:10:49.740
cookies for all the social
networking websites that

00:10:49.740 --> 00:10:52.300
were flying over in
the ether around you.

00:10:52.300 --> 00:10:54.670
And it gave you
this beautiful UI,

00:10:54.670 --> 00:10:56.570
where you could just
click on a button

00:10:56.570 --> 00:11:00.120
and log in as another user
and act on their behalf.

00:11:00.120 --> 00:11:02.510
This could not have
been more trivial.

00:11:02.510 --> 00:11:05.204
You just got a menu of
choices of different users

00:11:05.204 --> 00:11:06.870
that were in that
room with you, and you

00:11:06.870 --> 00:11:10.594
could be whoever you
wanted to be, right?

00:11:10.594 --> 00:11:12.260
And this was a really,
very real attack.

00:11:12.260 --> 00:11:14.218
And actually it was
happening pretty regularly.

00:11:14.218 --> 00:11:16.940
And of course, once
everybody got a handle on it,

00:11:16.940 --> 00:11:20.042
no coffee shop was safe.

00:11:20.042 --> 00:11:22.000
But the most common
retort I get to this

00:11:22.000 --> 00:11:24.620
is, but there's nothing
sensitive on my site, right?

00:11:27.130 --> 00:11:29.210
And for many websites
that's true, right?

00:11:29.210 --> 00:11:30.980
There's a lot of
websites that are just

00:11:30.980 --> 00:11:32.480
news websites, things like that.

00:11:32.480 --> 00:11:35.574
Or whatever, maybe you're just
not that worried about it.

00:11:35.574 --> 00:11:36.240
And that's fair.

00:11:36.240 --> 00:11:38.487
People aren't logging in.

00:11:38.487 --> 00:11:40.820
But let's talk about a different
problem you might have.

00:11:40.820 --> 00:11:45.200
So say your website-- I use
"The New York Times" regularly,

00:11:45.200 --> 00:11:48.140
so I always use
it in my examples.

00:11:48.140 --> 00:11:50.442
And you're delivering
your page to your user.

00:11:50.442 --> 00:11:52.900
But as we discussed, you're
not actually doing that, right?

00:11:52.900 --> 00:11:56.590
You're actually going through
a lot of guys in the middle.

00:11:56.590 --> 00:11:58.490
We call this a man
in the middle attack.

00:11:58.490 --> 00:12:01.030
And these people, if
you're using HTTP,

00:12:01.030 --> 00:12:04.140
can be modifying your page
however they see fit, right?

00:12:04.140 --> 00:12:06.210
So in this case, I'm
making up the silly example

00:12:06.210 --> 00:12:08.250
of their adding a
script to your page

00:12:08.250 --> 00:12:10.340
to add ads your
page, which means

00:12:10.340 --> 00:12:12.889
that when this page
actually reaches your user,

00:12:12.889 --> 00:12:15.180
they're not going to see the
add that you placed there.

00:12:15.180 --> 00:12:17.790
They're going to see some
other ad for some other website

00:12:17.790 --> 00:12:21.510
that they want to
control and appear there.

00:12:21.510 --> 00:12:24.060
I know it sounds like a
sort of silly example.

00:12:24.060 --> 00:12:26.630
Who's adding ads
on the fly, right?

00:12:26.630 --> 00:12:28.060
And that's a fair point.

00:12:28.060 --> 00:12:29.600
That's a fair point.

00:12:29.600 --> 00:12:32.480
So I was on the Southwest
Airlines the other day.

00:12:32.480 --> 00:12:34.201
I This could not have
been more perfect.

00:12:34.201 --> 00:12:36.700
I was on Southwest Airlines,
and I was working on this talk.

00:12:36.700 --> 00:12:38.719
I took a break to read
"The New York Times,"

00:12:38.719 --> 00:12:41.010
and I wanted to go to the
menu of "The New York Times,"

00:12:41.010 --> 00:12:43.165
and I wanted to get
back to the front page.

00:12:43.165 --> 00:12:45.040
For the life of me, I
couldn't find the menu.

00:12:45.040 --> 00:12:48.270
I couldn't figure out
what was going on.

00:12:48.270 --> 00:12:50.640
And after about two
minutes, I noticed

00:12:50.640 --> 00:12:52.295
that wonderful
Southwest banner add

00:12:52.295 --> 00:12:54.900
at the top was not a
Southwest banner ad.

00:12:54.900 --> 00:12:57.980
It was content that was
injected by Southwest Airlines.

00:12:57.980 --> 00:13:00.090
I was on the Southwest
Airlines Wi-Fi,

00:13:00.090 --> 00:13:01.960
and they were putting
this content my page.

00:13:01.960 --> 00:13:04.310
It had some helpful information
about the flight tracker

00:13:04.310 --> 00:13:06.580
or whatever, but I actually
couldn't navigate around

00:13:06.580 --> 00:13:08.330
the website.

00:13:08.330 --> 00:13:10.550
"The New York Times" was
in no way controlling

00:13:10.550 --> 00:13:12.955
the content that was
appearing on my page.

00:13:12.955 --> 00:13:13.580
Totally benign.

00:13:13.580 --> 00:13:15.840
But I sat there for
two minutes furious

00:13:15.840 --> 00:13:17.970
at "The New York
Times," not realizing

00:13:17.970 --> 00:13:20.560
that they weren't
at fault for this.

00:13:20.560 --> 00:13:22.400
And so really that's
sort of the key here.

00:13:22.400 --> 00:13:24.520
Is that this giant
banner at the top,

00:13:24.520 --> 00:13:26.280
in no way part of
"The New York Times."

00:13:26.280 --> 00:13:29.434
And integrity is really
important to your users.

00:13:29.434 --> 00:13:31.100
Hopefully it's important
to you as well,

00:13:31.100 --> 00:13:34.350
because you want your users
to get the content that you

00:13:34.350 --> 00:13:38.060
expect to appear on their page.

00:13:38.060 --> 00:13:39.790
Fortunately, there's an answer.

00:13:39.790 --> 00:13:41.047
And it's called HTTPS.

00:13:41.047 --> 00:13:42.880
Many of you are probably
familiar with this.

00:13:42.880 --> 00:13:45.310
It's what gives you that
wonderful green lock

00:13:45.310 --> 00:13:49.250
in many web browsers
on many websites.

00:13:49.250 --> 00:13:54.870
And HTTPS is HTTP plus privacy,
integrity, and authentication.

00:13:54.870 --> 00:13:57.040
And these are all
fancy terms that

00:13:57.040 --> 00:14:00.180
mean that they let the data that
you expect to get to your user

00:14:00.180 --> 00:14:03.360
without any of the bad
guys in between seeing it.

00:14:03.360 --> 00:14:06.250
And it does is using a bunch of
fancy cryptography primitives

00:14:06.250 --> 00:14:07.880
and fanciness that
nobody cares about.

00:14:07.880 --> 00:14:09.180
Doesn't matter.

00:14:09.180 --> 00:14:12.240
What matters is that provides
a guarantee of the content

00:14:12.240 --> 00:14:14.460
getting to your user
in a way you expect.

00:14:14.460 --> 00:14:18.920
And it is just absolutely vital
that your websites use this.

00:14:18.920 --> 00:14:22.717
There is no website that
shouldn't have HTTPS.

00:14:22.717 --> 00:14:24.300
I say that as a very
strong statement.

00:14:24.300 --> 00:14:25.230
If you want to
argue that with me,

00:14:25.230 --> 00:14:26.646
we could talk about
it afterwards,

00:14:26.646 --> 00:14:29.160
but I promise you're wrong.

00:14:29.160 --> 00:14:32.280
So at a very fundamental
level, just keep in mind

00:14:32.280 --> 00:14:35.670
that without HTTPS, you
don't control anything

00:14:35.670 --> 00:14:36.540
on your web page.

00:14:36.540 --> 00:14:38.710
This is the very
most basic point.

00:14:38.710 --> 00:14:41.150
There's nothing that's
getting to your user that

00:14:41.150 --> 00:14:44.480
is what you expect it to be.

00:14:44.480 --> 00:14:46.970
So I want to have a couple
really cool features

00:14:46.970 --> 00:14:52.010
that are a little more advanced
and only bad asses need apply.

00:14:52.010 --> 00:14:54.510
So let's have a basic
problem with HTTPS.

00:14:54.510 --> 00:14:56.559
You try to go to your page.

00:14:56.559 --> 00:14:58.350
In this case, let's
say is it's google.com,

00:14:58.350 --> 00:15:01.502
and we have this man in the
middle, between you and Google.

00:15:01.502 --> 00:15:02.960
And the man in the
middle, he's not

00:15:02.960 --> 00:15:04.060
going to try to
read your traffic,

00:15:04.060 --> 00:15:05.230
because you're over HTTPS.

00:15:05.230 --> 00:15:05.940
You're Superman.

00:15:05.940 --> 00:15:07.980
You can't have your
traffic be read, right?

00:15:07.980 --> 00:15:08.780
That's great.

00:15:08.780 --> 00:15:09.880
So he redirects you.

00:15:09.880 --> 00:15:11.840
And he says oh sorry.

00:15:11.840 --> 00:15:13.795
Sorry, user.

00:15:13.795 --> 00:15:17.010
I actually don't support HTTPS.

00:15:17.010 --> 00:15:21.240
You should really use
HTTP to access google.com.

00:15:21.240 --> 00:15:22.130
And what happens?

00:15:22.130 --> 00:15:25.670
Well, you happily
say OK, I'll use HTTP

00:15:25.670 --> 00:15:27.441
because I want to
get to my content.

00:15:27.441 --> 00:15:29.190
And then you go through
the man in middle,

00:15:29.190 --> 00:15:30.773
and then you eventually
to the server.

00:15:30.773 --> 00:15:33.840
But now you're going over
HTTP, and the man in middle

00:15:33.840 --> 00:15:35.720
can read all your
user's traffic, right?

00:15:35.720 --> 00:15:38.160
This is terrible.

00:15:38.160 --> 00:15:42.617
And we've lost all the
protections that HTTPS gave us.

00:15:42.617 --> 00:15:43.450
There is a solution.

00:15:43.450 --> 00:15:44.075
There is a way.

00:15:44.075 --> 00:15:49.475
And it's called HSTS, which is
HTTP strict transport security.

00:15:49.475 --> 00:15:51.850
And the basic notion is, if
we had an initial connection,

00:15:51.850 --> 00:15:54.320
let's assume it
gets to the server.

00:15:54.320 --> 00:15:55.830
And after that
initial connection,

00:15:55.830 --> 00:15:57.900
it returns some
content, but it also

00:15:57.900 --> 00:16:00.590
returns a signal to the
web browser that says,

00:16:00.590 --> 00:16:03.190
you know how you connected
to me over HTTPS?

00:16:03.190 --> 00:16:05.169
You should always
connect to me over HTTPS,

00:16:05.169 --> 00:16:06.460
and you should do that forever.

00:16:06.460 --> 00:16:07.376
Or sorry, not forever.

00:16:07.376 --> 00:16:09.520
You should do it for an
extended period of time.

00:16:09.520 --> 00:16:10.982
The browser takes
that information,

00:16:10.982 --> 00:16:12.440
and it stores it
to the side, along

00:16:12.440 --> 00:16:15.145
with some other important
information about its keys

00:16:15.145 --> 00:16:16.020
and things like that.

00:16:16.020 --> 00:16:18.270
Stuff that you don't
need to worry about.

00:16:18.270 --> 00:16:22.970
And it stores that information
going forward for a time

00:16:22.970 --> 00:16:24.020
that you specify.

00:16:24.020 --> 00:16:25.790
And you can do
this so trivially.

00:16:25.790 --> 00:16:29.390
You just have to specify an
HTTP header, strict transport

00:16:29.390 --> 00:16:31.680
security, where you
specify a max age for what

00:16:31.680 --> 00:16:34.320
you want to support
this in seconds.

00:16:34.320 --> 00:16:37.830
And the browsers will hold
onto this information.

00:16:37.830 --> 00:16:42.200
So that when we go back, and
we have this same attack where

00:16:42.200 --> 00:16:45.690
the man in the middle
tries to redirect you,

00:16:45.690 --> 00:16:47.795
the browser gets that redirect.

00:16:47.795 --> 00:16:52.550
And it checks against his
HSTS list, and it says nope.

00:16:52.550 --> 00:16:53.290
Sorry.

00:16:53.290 --> 00:16:55.050
I know that something's
going wrong.

00:16:55.050 --> 00:16:58.100
There's probably an
attack against me.

00:16:58.100 --> 00:17:00.910
And so the browser
stops, and you actually

00:17:00.910 --> 00:17:03.620
get a particularly nasty
page in most web browsers

00:17:03.620 --> 00:17:05.964
that support this that
doesn't let you click through

00:17:05.964 --> 00:17:07.200
or proceed.

00:17:07.200 --> 00:17:09.780
And this is really important,
because, in these cases,

00:17:09.780 --> 00:17:12.660
it almost always means
there's an attack going on.

00:17:12.660 --> 00:17:13.640
Almost always.

00:17:13.640 --> 00:17:16.800
And so this is a
really cool thing.

00:17:16.800 --> 00:17:18.500
You may have noticed
that I punted

00:17:18.500 --> 00:17:20.510
on something slightly,
which is that it requires

00:17:20.510 --> 00:17:23.030
an initial connection
to the server.

00:17:23.030 --> 00:17:25.720
And if the man in the middle
is there in the beginning,

00:17:25.720 --> 00:17:27.829
you're going to have a sad day.

00:17:27.829 --> 00:17:30.690
But wait, we have a
solution for that too.

00:17:30.690 --> 00:17:33.390
And it's called the
STS preload list.

00:17:33.390 --> 00:17:37.456
And it's currently supported
by Chrome and Firefox.

00:17:37.456 --> 00:17:38.830
And basically
there's a list that

00:17:38.830 --> 00:17:41.090
comes with your web
browser that gives you

00:17:41.090 --> 00:17:43.410
a list of a bunch of
websites that opt into this

00:17:43.410 --> 00:17:47.050
and say we want to
support STS, and here

00:17:47.050 --> 00:17:49.310
are the key that we use.

00:17:49.310 --> 00:17:52.869
And we expect to
always be over HTTPS.

00:17:52.869 --> 00:17:54.910
And this way it solves
the bootstrapping problem,

00:17:54.910 --> 00:17:56.409
because, the first
time you connect,

00:17:56.409 --> 00:17:59.460
you already know that
these websites support STS,

00:17:59.460 --> 00:18:03.340
and that's how you want
the website to operate.

00:18:03.340 --> 00:18:05.270
As a web developer,
it's really quite easy.

00:18:05.270 --> 00:18:08.010
You just have to contact Chrome.

00:18:08.010 --> 00:18:11.350
There's a proof of identity
kind of thing that goes on.

00:18:11.350 --> 00:18:13.970
And then your
website is actually

00:18:13.970 --> 00:18:17.790
hard coded onto the
STS list, preload list.

00:18:17.790 --> 00:18:20.710
And Chrome and
Firefox will get that.

00:18:20.710 --> 00:18:24.250
So this is a really,
really important mechanism

00:18:24.250 --> 00:18:25.760
for preventing these attacks.

00:18:25.760 --> 00:18:28.420
But even if you just do the
strict transport security

00:18:28.420 --> 00:18:30.480
header, that's a great start.

00:18:30.480 --> 00:18:34.150
It's a major improvement
over the status quo.

00:18:34.150 --> 00:18:39.080
So the real thing is you really
should be setting up HTTPS

00:18:39.080 --> 00:18:40.130
today if you haven't.

00:18:40.130 --> 00:18:43.120
It's the only way to
guarantee that your users get

00:18:43.120 --> 00:18:44.514
the content you expect.

00:18:44.514 --> 00:18:45.930
There's also this
bad rumor that's

00:18:45.930 --> 00:18:48.350
been going around
for years, years,

00:18:48.350 --> 00:18:51.740
that HTTPS is difficult to set
up and that it's expensive.

00:18:51.740 --> 00:18:54.974
So if you're a non commercial
website or, I believe actually

00:18:54.974 --> 00:18:56.390
including personal
websites, there

00:18:56.390 --> 00:18:58.490
are actually several
certificate vendors

00:18:58.490 --> 00:19:00.530
that will actually give
you a free certificate.

00:19:00.530 --> 00:19:03.096
I'm a really cheap guy, and
I have a personal website,

00:19:03.096 --> 00:19:04.720
but I got a free
certificate out of it,

00:19:04.720 --> 00:19:08.690
so I can attest to the
fact that this is possible.

00:19:08.690 --> 00:19:10.120
If you're a
commercial enterprise,

00:19:10.120 --> 00:19:11.450
there's varying levels of cost.

00:19:11.450 --> 00:19:12.550
They can be quite cheap.

00:19:12.550 --> 00:19:14.320
I forget what the
numbers run these days.

00:19:14.320 --> 00:19:15.403
But it's also really easy.

00:19:15.403 --> 00:19:17.330
I have some links here
to both the website

00:19:17.330 --> 00:19:19.260
that explains in
great detail how

00:19:19.260 --> 00:19:23.890
to set up HTTPS for your server,
as well as best practices

00:19:23.890 --> 00:19:26.610
to sort of help you avoid
making any common errors.

00:19:26.610 --> 00:19:29.349
So later on, hopefully you'll
check that out and do it,

00:19:29.349 --> 00:19:30.890
because there's just
really no reason

00:19:30.890 --> 00:19:32.005
not to be doing it today.

00:19:35.740 --> 00:19:38.280
So lets got to the
last part here.

00:19:38.280 --> 00:19:41.180
So far we've talked about making
sure that your content as safe

00:19:41.180 --> 00:19:43.082
as it leaves your server.

00:19:43.082 --> 00:19:45.290
Then we talked about what
happens while it's actually

00:19:45.290 --> 00:19:47.150
between your server
and the browser.

00:19:47.150 --> 00:19:50.050
But there's one
obvious part left.

00:19:50.050 --> 00:19:51.960
What happens once
it's in the browser?

00:19:51.960 --> 00:19:54.418
And that's why we're going to
talk about security policies.

00:19:56.170 --> 00:19:58.370
Let's take a look
at this guy here.

00:19:58.370 --> 00:20:00.640
Looks like a good
patriotic American.

00:20:00.640 --> 00:20:04.170
Looks like he's a wise man.

00:20:04.170 --> 00:20:06.380
But he's doing
something that is just

00:20:06.380 --> 00:20:09.650
vitally important from
a security perspective.

00:20:09.650 --> 00:20:12.650
And I want you to look
carefully here for a second.

00:20:12.650 --> 00:20:15.352
Really want to emphasize this.

00:20:15.352 --> 00:20:18.549
He has belt and suspenders.

00:20:18.549 --> 00:20:19.840
We believe in defense in depth.

00:20:19.840 --> 00:20:22.260
And I'm a security
guy, and I practice

00:20:22.260 --> 00:20:25.840
what I preach, so I always go
belt and suspenders myself,

00:20:25.840 --> 00:20:26.830
right?

00:20:26.830 --> 00:20:29.070
It's the only way to
be properly secure.

00:20:29.070 --> 00:20:31.870
It's the only way to
guarantee security.

00:20:31.870 --> 00:20:34.740
But seriously, from a
security perspective,

00:20:34.740 --> 00:20:37.170
we believe in defense in depth.

00:20:37.170 --> 00:20:40.480
You want to have multiple
layers of security.

00:20:40.480 --> 00:20:44.490
And you want to make sure
that that ultimate enemy is

00:20:44.490 --> 00:20:47.130
cascading failures, right?

00:20:47.130 --> 00:20:50.470
You want to make sure that
if you have any problems,

00:20:50.470 --> 00:20:54.830
that once you get
past that first level,

00:20:54.830 --> 00:20:58.830
you have something there to
defend yourself afterwards.

00:20:58.830 --> 00:21:01.720
So let's talk abut
content security policy,

00:21:01.720 --> 00:21:03.360
which is a relatively
new technology.

00:21:03.360 --> 00:21:04.860
It's been around
for a couple years,

00:21:04.860 --> 00:21:07.700
but it's really
gotten steam of late.

00:21:07.700 --> 00:21:09.314
So this is a basic
header that you

00:21:09.314 --> 00:21:10.480
can provide to your website.

00:21:10.480 --> 00:21:13.970
And it's going to allow you
to do some really cool things

00:21:13.970 --> 00:21:18.360
about telling the browser what
content should and should not

00:21:18.360 --> 00:21:19.942
be allowed on your website.

00:21:19.942 --> 00:21:20.900
So say your foobar.com.

00:21:20.900 --> 00:21:24.545
Note https://foobar.com,
of course.

00:21:27.317 --> 00:21:28.650
I can provide this header today.

00:21:28.650 --> 00:21:29.483
It's an HTTP header.

00:21:29.483 --> 00:21:32.330
And it's doing a couple things.

00:21:32.330 --> 00:21:34.770
The first is this
script source thing,

00:21:34.770 --> 00:21:37.500
which is a white list
of sources that I

00:21:37.500 --> 00:21:39.150
expect scripts to come from.

00:21:39.150 --> 00:21:40.210
Pretty straightforward.

00:21:40.210 --> 00:21:43.070
In particular in this
example, it expects scripts

00:21:43.070 --> 00:21:46.560
from self, which is the same
origin, so in this case,

00:21:46.560 --> 00:21:48.082
from foobar.com.

00:21:48.082 --> 00:21:49.800
And it also allows
scripts from, you

00:21:49.800 --> 00:21:52.690
can specify other
arbitrary sources as will.

00:21:52.690 --> 00:21:55.888
In this case, API is .googl.com.

00:21:55.888 --> 00:21:57.440
And what this is
basically telling

00:21:57.440 --> 00:22:00.970
us is taking this sort of
silly a web forum example

00:22:00.970 --> 00:22:03.750
from before, if we
have some user input,

00:22:03.750 --> 00:22:06.510
we're obviously expecting
something totally benign.

00:22:06.510 --> 00:22:08.250
But should something
somehow make it

00:22:08.250 --> 00:22:10.020
to our server, which
will never happen,

00:22:10.020 --> 00:22:12.020
because we're sanitizing
properly in the server.

00:22:12.020 --> 00:22:14.920
But just imagine it
gets through somehow.

00:22:14.920 --> 00:22:18.170
It's going to actually check to
see, before it runs the script,

00:22:18.170 --> 00:22:19.980
is this script on
the white list,

00:22:19.980 --> 00:22:22.370
and because it's
neither from foobar.com

00:22:22.370 --> 00:22:28.649
or from apis.google.com, the
browser actually stops it.

00:22:28.649 --> 00:22:30.190
So I fibbed a little
bit earlier when

00:22:30.190 --> 00:22:33.170
I said there's nothing a
browser can do in identifying

00:22:33.170 --> 00:22:35.040
good content from bad content.

00:22:35.040 --> 00:22:35.990
There is.

00:22:35.990 --> 00:22:38.930
If the web application
tells the browser

00:22:38.930 --> 00:22:41.900
what good content looks like
and what bad content looks like.

00:22:41.900 --> 00:22:44.530
And content security policy
is how you can do this today.

00:22:47.970 --> 00:22:50.100
So basically the
fundamental idea

00:22:50.100 --> 00:22:52.092
here is we have all these
bad things happening.

00:22:52.092 --> 00:22:54.050
And you'll note that even
in that silly example

00:22:54.050 --> 00:22:56.230
we'll stop that content
from appearing, which

00:22:56.230 --> 00:22:58.390
would make that website
look a little funky.

00:22:58.390 --> 00:23:01.380
But that's OK, because we've
taken this evil attack,

00:23:01.380 --> 00:23:03.120
and we just turned
it into a bug.

00:23:03.120 --> 00:23:05.780
And ultimately, that's a
happy place to be in, right?

00:23:05.780 --> 00:23:07.030
Mistakes happen.

00:23:07.030 --> 00:23:08.200
Things can go wrong.

00:23:08.200 --> 00:23:10.575
And that's why we're going to
have this defense in depth.

00:23:12.560 --> 00:23:15.580
So let's talk about how
this actually is working.

00:23:15.580 --> 00:23:18.270
I sort of breezed over it there.

00:23:18.270 --> 00:23:20.459
The basic idea is that
we have this white list

00:23:20.459 --> 00:23:21.250
of scripts sources.

00:23:23.990 --> 00:23:27.290
Like I said, in this case, we
have self, so the same origin,

00:23:27.290 --> 00:23:31.290
foobar.com, but also
apis.google.com.

00:23:31.290 --> 00:23:34.080
So when I try to load evil.js,
it's is coming from some source

00:23:34.080 --> 00:23:35.800
I don't recognize.

00:23:35.800 --> 00:23:38.160
We simply don't allow it.

00:23:38.160 --> 00:23:40.370
There's a couple other
things it has to do though.

00:23:40.370 --> 00:23:41.911
You might have
thought about the fact

00:23:41.911 --> 00:23:43.590
that we have these
inline scripts.

00:23:43.590 --> 00:23:45.500
And I didn't specify where
those are allowed to come from.

00:23:45.500 --> 00:23:47.920
And indeed, they sort of do
come from the same origin,

00:23:47.920 --> 00:23:50.810
but that's one of the more
common attack vectors.

00:23:50.810 --> 00:23:52.650
So we actually have
to stop inline scripts

00:23:52.650 --> 00:23:54.150
from executing as well.

00:23:54.150 --> 00:23:56.400
It's a little problematic
because, as you

00:23:56.400 --> 00:23:58.790
might have been able to
guess, the doEvil script

00:23:58.790 --> 00:24:00.240
from the browser's
perspective is

00:24:00.240 --> 00:24:03.230
indistinguishable from the
my legitimate code script.

00:24:03.230 --> 00:24:05.230
So we're going to have
to stop that one as well.

00:24:05.230 --> 00:24:06.870
We do have ways of
dealing with that.

00:24:06.870 --> 00:24:07.860
I'm not going to
get into that today,

00:24:07.860 --> 00:24:10.670
but there's some magical things
called script hast and script

00:24:10.670 --> 00:24:13.200
nonce, which actually do
allow inline scripts that you

00:24:13.200 --> 00:24:15.900
want to white list to execute.

00:24:15.900 --> 00:24:20.470
But just know that that's
sort of the minor detail here.

00:24:20.470 --> 00:24:21.570
There's one more detail.

00:24:21.570 --> 00:24:24.800
Everybody's favorite
friend, eval.

00:24:24.800 --> 00:24:27.040
If that input is
something you don't

00:24:27.040 --> 00:24:28.814
want, of course
that will execute.

00:24:28.814 --> 00:24:30.980
So we're going to have to
do-- from a security guy's

00:24:30.980 --> 00:24:32.550
perspective, what I've
always wanted to do.

00:24:32.550 --> 00:24:33.740
We're going to ban eval.

00:24:33.740 --> 00:24:34.980
No more eval.

00:24:34.980 --> 00:24:36.570
That's great.

00:24:36.570 --> 00:24:39.540
And these three things
combined, for the most part,

00:24:39.540 --> 00:24:42.070
in most traditional
XSS cases, will prevent

00:24:42.070 --> 00:24:47.980
XSS There are some corner cases,
but for most traditional XSS,

00:24:47.980 --> 00:24:48.980
it's gone.

00:24:48.980 --> 00:24:51.440
So even if you
sanitization falls apart.

00:24:51.440 --> 00:24:53.460
You'll have this
baseline of security

00:24:53.460 --> 00:24:57.507
ready to prevent things
from attacking your users.

00:24:57.507 --> 00:24:59.840
But there's a bunch of other
really cool things going on

00:24:59.840 --> 00:25:02.306
as well.

00:25:02.306 --> 00:25:03.680
What I described
as script source

00:25:03.680 --> 00:25:08.650
there sort of works-- we have
similar directives for style,

00:25:08.650 --> 00:25:10.280
images, and forms as well.

00:25:10.280 --> 00:25:13.400
So you can specify a
white list of the style

00:25:13.400 --> 00:25:15.600
that you expect to
be on your page,

00:25:15.600 --> 00:25:17.660
for images that you
expect to be on your page.

00:25:17.660 --> 00:25:19.362
All types of content.

00:25:19.362 --> 00:25:21.570
And this is just to give an
example of why this might

00:25:21.570 --> 00:25:24.730
matter, poor "New
York Times" again.

00:25:24.730 --> 00:25:28.320
If an ad comes along, and it
was expected to load content

00:25:28.320 --> 00:25:30.570
from one source, but
switches it at the end,

00:25:30.570 --> 00:25:32.210
"The New York Times"
would be very sad.

00:25:32.210 --> 00:25:34.293
And in fact, this has
happened a couple years ago.

00:25:34.293 --> 00:25:37.350
They actually had a case where
an ad switched the content

00:25:37.350 --> 00:25:39.610
that it was loading
before the ad was actually

00:25:39.610 --> 00:25:40.390
put on the pages.

00:25:40.390 --> 00:25:42.931
And instead of being a benign--
I forget what it was supposed

00:25:42.931 --> 00:25:45.080
to be for-- it ended up
being one of these giant,

00:25:45.080 --> 00:25:49.945
full screen fake
anti-virus attacks.

00:25:49.945 --> 00:25:52.195
So you really want to make
sure the content you expect

00:25:52.195 --> 00:25:57.180
on your pages is actually
what will appear.

00:25:57.180 --> 00:25:59.347
I also want to quickly
go CSP reporting, which

00:25:59.347 --> 00:26:00.930
I think is one of
the coolest features

00:26:00.930 --> 00:26:03.987
and certainly one of
the least talked about.

00:26:03.987 --> 00:26:06.320
So here we have this policy
that is very similar to what

00:26:06.320 --> 00:26:09.591
we have been talking
about the whole time.

00:26:09.591 --> 00:26:11.090
And basically what's
going to happen

00:26:11.090 --> 00:26:12.798
is that in addition
to the script source,

00:26:12.798 --> 00:26:14.000
we have a report uri.

00:26:14.000 --> 00:26:15.980
And if we have a
violation-- so this

00:26:15.980 --> 00:26:19.140
is script that's being
loaded by an attacker--

00:26:19.140 --> 00:26:21.060
it'll of course be
blocked by our policy,

00:26:21.060 --> 00:26:25.562
because we're not allowing stuff
from evil.com to be loaded.

00:26:25.562 --> 00:26:26.770
It's going to the report uri.

00:26:26.770 --> 00:26:28.890
And it's going to
return to your server

00:26:28.890 --> 00:26:32.880
a big JSON blob of all the
information about the failed

00:26:32.880 --> 00:26:33.949
attack.

00:26:33.949 --> 00:26:36.490
And you know we must be doing
something right, because I said

00:26:36.490 --> 00:26:38.030
JSON, and everyone
loves big data

00:26:38.030 --> 00:26:39.934
and analyzing lots
of JSON blobs.

00:26:39.934 --> 00:26:42.100
But it's going to give you
all this cool information

00:26:42.100 --> 00:26:44.810
about what was violated,
how it was violated,

00:26:44.810 --> 00:26:47.520
when it was violated,
so on and so forth.

00:26:47.520 --> 00:26:49.630
And I know this sounds
kind of trivial,

00:26:49.630 --> 00:26:51.877
but there's a couple
important things here.

00:26:51.877 --> 00:26:53.710
One, it's always of
course wonderful to know

00:26:53.710 --> 00:26:56.567
about what attacks are actually
being attempted in the wild.

00:26:56.567 --> 00:26:58.650
But the more important one
is that, even if you're

00:26:58.650 --> 00:27:00.691
afraid of turning on CSP,
you're afraid of if you

00:27:00.691 --> 00:27:02.460
got that white list
totally correct,

00:27:02.460 --> 00:27:05.700
there's no reason you can't
start reporting immediately.

00:27:05.700 --> 00:27:08.810
You can go into a report only
mode, where you don't actually

00:27:08.810 --> 00:27:12.256
enforce the directives, but you
just have the reporting happen.

00:27:12.256 --> 00:27:14.630
And you can use that to learn
about what sorts of attacks

00:27:14.630 --> 00:27:15.650
are actually happening.

00:27:15.650 --> 00:27:18.472
And Netflix has actually done
this on some of their sites.

00:27:18.472 --> 00:27:20.680
I forget exactly which sites,
but some of their sites

00:27:20.680 --> 00:27:21.420
that they run.

00:27:21.420 --> 00:27:24.440
Netflix has actually turned
on CSP in report mode

00:27:24.440 --> 00:27:27.570
to find out what's actually
been going on in the wild.

00:27:27.570 --> 00:27:29.130
And they actually
found a whole host

00:27:29.130 --> 00:27:30.921
of attacks that were
going on against them.

00:27:30.921 --> 00:27:32.390
They filtered out
the benign stuff,

00:27:32.390 --> 00:27:34.729
and they actually
found real attacks.

00:27:34.729 --> 00:27:36.270
Even just by being
in reporting mode,

00:27:36.270 --> 00:27:41.040
they were able to stop real
attacks on their users.

00:27:41.040 --> 00:27:43.080
And this is just the
tip of the iceberg.

00:27:43.080 --> 00:27:46.180
There's just a huge amount of
more that goes on with CSP.

00:27:46.180 --> 00:27:49.250
CSP has been growing a lot.

00:27:49.250 --> 00:27:53.320
There's a frame
busting prevention.

00:27:53.320 --> 00:27:55.580
Sandbox iframes is using CSP.

00:27:55.580 --> 00:27:58.970
We have some really cool stuff
that's in the standards bodies

00:27:58.970 --> 00:28:01.710
right now about guaranteeing
the integrity of resources

00:28:01.710 --> 00:28:02.640
that you're loading.

00:28:02.640 --> 00:28:05.930
And also we're working on
some stuff about sub origins

00:28:05.930 --> 00:28:09.060
and having more fine
grained origins.

00:28:09.060 --> 00:28:12.540
So I highly encourage you
to check out more about CSP.

00:28:12.540 --> 00:28:14.140
And this is sort of the line.

00:28:14.140 --> 00:28:18.317
You can turn on CSP today with
this one tiny HTTP header.

00:28:18.317 --> 00:28:20.900
Now for many sites it'll have
to be more complicated depending

00:28:20.900 --> 00:28:21.870
on what you're loading.

00:28:21.870 --> 00:28:24.230
But I highly encourage you
to, at the very least, look

00:28:24.230 --> 00:28:26.444
at report only
mode, so you can see

00:28:26.444 --> 00:28:27.860
what's going on
in the wild today.

00:28:27.860 --> 00:28:31.300
On html5rocks.com, there's
some great tutorials

00:28:31.300 --> 00:28:32.745
on content security policy.

00:28:32.745 --> 00:28:34.950
It's a great site for
other reasons too.

00:28:34.950 --> 00:28:38.020
But again, CSP,
super easy to use.

00:28:38.020 --> 00:28:40.040
And once it's on and
once you have a policy,

00:28:40.040 --> 00:28:42.331
you shouldn't really have to
think about it very often,

00:28:42.331 --> 00:28:42.840
if ever.

00:28:42.840 --> 00:28:44.429
It's all about easy.

00:28:44.429 --> 00:28:46.470
Perhaps you've seen that
as a theme of this talk,

00:28:46.470 --> 00:28:48.011
but security doesn't
have to be hard.

00:28:48.011 --> 00:28:51.270
It can be just a part
of your workflow.

00:28:51.270 --> 00:28:55.140
So just as a last thought,
I encourage you to go out.

00:28:55.140 --> 00:28:58.920
Just look at your tools that
you have in your workflow today.

00:28:58.920 --> 00:29:01.810
Think about how you actually
are preventing security today.

00:29:01.810 --> 00:29:03.580
And if you're not
doing everything

00:29:03.580 --> 00:29:05.390
you possibly can for
your users, at least

00:29:05.390 --> 00:29:07.080
go out and try these three.

00:29:07.080 --> 00:29:10.090
At least try to get
these three started.

00:29:10.090 --> 00:29:12.480
But thank you so much
for being here today,

00:29:12.480 --> 00:29:14.890
and I will be around
for questions later.

00:29:14.890 --> 00:29:20.340
[APPLAUSE]

