WEBVTT
Kind: captions
Language: en

00:00:00.870 --> 00:00:01.300
MICHAEL VAN
OUWERKERK: If you ask

00:00:01.300 --> 00:00:03.850
a room of developers what mobile
device features are missing

00:00:03.850 --> 00:00:06.680
from the web, push notifications
are always high on the list.

00:00:06.680 --> 00:00:07.960
And it makes sense.

00:00:07.960 --> 00:00:11.780
Push notifications are a great
way to reengage the user.

00:00:11.780 --> 00:00:13.980
Push notifications are now
available on the open web

00:00:13.980 --> 00:00:16.900
through a new set of web APIs.

00:00:16.900 --> 00:00:18.900
I'm Michael, and I'm an
engineer on the Push API

00:00:18.900 --> 00:00:19.802
team for Chrome.

00:00:19.802 --> 00:00:21.510
And I'm going to show
you how to add push

00:00:21.510 --> 00:00:23.310
notifications to your web app.

00:00:23.310 --> 00:00:25.230
To start with, you
take a normal web page

00:00:25.230 --> 00:00:26.830
and register a
service worker which

00:00:26.830 --> 00:00:29.140
will handle your push messages.

00:00:29.140 --> 00:00:31.840
Then you subscribe the
user to push messages,

00:00:31.840 --> 00:00:34.680
which will register the user
device with the Push service

00:00:34.680 --> 00:00:36.640
and give you some
information which you store

00:00:36.640 --> 00:00:38.870
on your application server.

00:00:38.870 --> 00:00:41.530
When your server is ready to
send a push message to users,

00:00:41.530 --> 00:00:43.270
you call an API on
the Push service

00:00:43.270 --> 00:00:45.590
to trigger a push message.

00:00:45.590 --> 00:00:47.870
The Push service will
then send a push message

00:00:47.870 --> 00:00:50.730
to the user device, which will
wake up your service worker

00:00:50.730 --> 00:00:52.470
and fire a push event.

00:00:52.470 --> 00:00:55.040
Then, in your event handler,
you show a notification.

00:00:55.040 --> 00:00:55.916
And done.

00:00:55.916 --> 00:00:57.540
The first thing we
need to do is set up

00:00:57.540 --> 00:00:59.410
a project on the Google
Developer Console.

00:00:59.410 --> 00:01:02.800
This is required to use push
notifications with Chrome,

00:01:02.800 --> 00:01:05.190
because there isn't a
standard API for push services

00:01:05.190 --> 00:01:06.920
to support yet.

00:01:06.920 --> 00:01:09.150
Hopefully, when the
standard is finalized,

00:01:09.150 --> 00:01:11.840
Chrome and GCM can support it.

00:01:11.840 --> 00:01:14.040
Go to Console at
developers.google.com

00:01:14.040 --> 00:01:18.280
to create a new project so
that you can use a GCM API.

00:01:18.280 --> 00:01:21.070
In your new project, enable
Google Cloud Messaging

00:01:21.070 --> 00:01:24.590
for Android and Google
Cloud Messaging for Chrome

00:01:24.590 --> 00:01:30.230
on the APIs and auth, and create
a new public API access key.

00:01:30.230 --> 00:01:32.070
Make a note of the
API key, as well as

00:01:32.070 --> 00:01:34.320
the project number, which
you can find on the overview

00:01:34.320 --> 00:01:36.570
page in your project.

00:01:36.570 --> 00:01:39.180
To let Chrome know about
your GCM project number,

00:01:39.180 --> 00:01:40.990
add a web app
manifest to your site.

00:01:40.990 --> 00:01:43.220
The web app manifest
is a simple JSON file

00:01:43.220 --> 00:01:47.190
that can be used to define icons
and the name of your web app.

00:01:47.190 --> 00:01:49.290
For Push, you need to
define a GCM sender

00:01:49.290 --> 00:01:51.940
ID in your manifest,
which is the project

00:01:51.940 --> 00:01:54.575
number we mentioned before.

00:01:54.575 --> 00:01:57.210
Add a link tag pointing
to your manifest

00:01:57.210 --> 00:01:59.320
so Chrome knows
where to find it.

00:01:59.320 --> 00:02:01.800
You can learn more
in this article.

00:02:01.800 --> 00:02:04.300
Now that the GCM bit
is done, the next step

00:02:04.300 --> 00:02:06.574
is to register a service
worker in your web page.

00:02:06.574 --> 00:02:08.449
Don't worry if you're
new to service workers.

00:02:08.449 --> 00:02:11.260
We'll be stepping through how
to use them for Push shortly.

00:02:11.260 --> 00:02:12.767
But for more
in-depth details, you

00:02:12.767 --> 00:02:14.100
can check Jake Archibald's talk.

00:02:14.100 --> 00:02:16.690
Call a navigator.servic
eWorker.register,

00:02:16.690 --> 00:02:20.000
passing in the location of
your service worker file.

00:02:20.000 --> 00:02:23.139
This will tie a service
worker to your page.

00:02:23.139 --> 00:02:25.180
Once it's registered, you
need to set up your UI.

00:02:25.180 --> 00:02:27.930
So let's imagine we
have a toggle switch

00:02:27.930 --> 00:02:30.610
to enable or disable Push.

00:02:30.610 --> 00:02:32.530
For browsers which
don't support Push,

00:02:32.530 --> 00:02:35.250
we should disable the switch
by checking if PushManager

00:02:35.250 --> 00:02:36.730
exists on the window.

00:02:36.730 --> 00:02:41.120
The next step is to subscribe
the user to the Push service.

00:02:41.120 --> 00:02:43.680
We do this when the user
toggles the switch on.

00:02:43.680 --> 00:02:45.606
Again, do
serviceWorkerRegistration,

00:02:45.606 --> 00:02:46.980
and with the
registration we call

00:02:46.980 --> 00:02:49.270
subscribe on the pushManager.

00:02:49.270 --> 00:02:51.120
We've pass in
(userVisibleOnly: true)

00:02:51.120 --> 00:02:52.500
because Chrome
only supports push

00:02:52.500 --> 00:02:54.770
messaging with a notification.

00:02:54.770 --> 00:02:57.450
In other words, you have
to show a notification when

00:02:57.450 --> 00:03:00.450
you receive a push message.

00:03:00.450 --> 00:03:02.350
When we call
subscribe, the browser

00:03:02.350 --> 00:03:03.660
will show a permission prompt.

00:03:03.660 --> 00:03:05.210
So make sure it's
obvious to the user

00:03:05.210 --> 00:03:07.004
why this prompt is being shown.

00:03:07.004 --> 00:03:08.545
The last thing you
want to do is show

00:03:08.545 --> 00:03:11.190
a permission dialog when the
user first lands on your page.

00:03:11.190 --> 00:03:13.730
They have no idea what it is.

00:03:13.730 --> 00:03:15.365
If the user gives
you permission,

00:03:15.365 --> 00:03:17.255
you will receive a
subscription object,

00:03:17.255 --> 00:03:19.330
and you'll need to send
the endpoint variable

00:03:19.330 --> 00:03:23.270
to your server, as this will be
needed to send a push message.

00:03:23.270 --> 00:03:24.987
Time to send a push message.

00:03:24.987 --> 00:03:27.070
Now that you have registered
with the Push service

00:03:27.070 --> 00:03:29.190
and have an endpoint,
you simply need

00:03:29.190 --> 00:03:32.450
to call this endpoint from
your application server.

00:03:32.450 --> 00:03:34.200
Here, we'll look at a
simple cURL command,

00:03:34.200 --> 00:03:36.491
but you'll need to implement
this in your chosen server

00:03:36.491 --> 00:03:37.940
language.

00:03:37.940 --> 00:03:41.570
For GCM, take the endpoint,
parse out the subscription ID,

00:03:41.570 --> 00:03:44.760
and make a RESTful API
call to the GCM endpoint,

00:03:44.760 --> 00:03:47.914
using your public API key
as an authorization header

00:03:47.914 --> 00:03:49.330
and passing in the
subscription ID

00:03:49.330 --> 00:03:52.670
inside the
registration_ids field.

00:03:52.670 --> 00:03:54.350
Right now, nothing's
going to happen yet

00:03:54.350 --> 00:03:56.016
when you send a push
message, because we

00:03:56.016 --> 00:03:59.616
don't have our service worker
set up to handle the event.

00:03:59.616 --> 00:04:00.990
Let's see what a
push event looks

00:04:00.990 --> 00:04:02.910
like in the service worker.

00:04:02.910 --> 00:04:04.910
For those of you who are
new to Service Workers,

00:04:04.910 --> 00:04:07.240
you can think of them as
special JavaScript files

00:04:07.240 --> 00:04:09.920
that the browser knows about
and executes in the background

00:04:09.920 --> 00:04:12.810
without needing the
web app to be open.

00:04:12.810 --> 00:04:14.800
The browser will start
up your service worker

00:04:14.800 --> 00:04:17.320
when it receives a push
message in the special push

00:04:17.320 --> 00:04:21.209
event, which you can listen
for it with an event listener.

00:04:21.209 --> 00:04:22.820
It's inside this event listener.

00:04:22.820 --> 00:04:25.500
We can display a notification.

00:04:25.500 --> 00:04:28.010
It's worth noting that, when
you receive a push message,

00:04:28.010 --> 00:04:29.372
you need to show a notification.

00:04:29.372 --> 00:04:31.830
Otherwise, Chrome will show
its own notification, which you

00:04:31.830 --> 00:04:34.690
won't have any control over.

00:04:34.690 --> 00:04:36.890
To create your own
notification, you

00:04:36.890 --> 00:04:38.620
need to call
showNotification, passing

00:04:38.620 --> 00:04:40.540
in a title and a
set of parameters

00:04:40.540 --> 00:04:44.590
to define the notification's
message and icon.

00:04:44.590 --> 00:04:46.390
Notification tag is optional.

00:04:46.390 --> 00:04:48.400
It can be used to
replace notifications

00:04:48.400 --> 00:04:50.960
with the same tag.

00:04:50.960 --> 00:04:54.470
One thing to really focus on
is the event.waitUntil method.

00:04:54.470 --> 00:04:56.130
You need to pass in
the return promise

00:04:56.130 --> 00:04:58.950
from showNotification,
as this tells the browser

00:04:58.950 --> 00:05:03.610
to keep the Service Worker alive
until the promise is settled.

00:05:03.610 --> 00:05:04.300
And that's it.

00:05:04.300 --> 00:05:08.890
You can now send push messages
and show notifications.

00:05:08.890 --> 00:05:10.680
There is one more thing.

00:05:10.680 --> 00:05:14.540
You need to allow your users to
unsubscribe from push messages.

00:05:14.540 --> 00:05:16.590
To unsubscribe
from Push, we need

00:05:16.590 --> 00:05:18.550
to get the subscription
object, which

00:05:18.550 --> 00:05:20.050
we can do by calling
getSubscription

00:05:20.050 --> 00:05:21.860
on a pushManager.

00:05:21.860 --> 00:05:24.840
Then call unsubscribe on
a subscription object.

00:05:24.840 --> 00:05:27.070
It's at this point you
want to remove the endpoint

00:05:27.070 --> 00:05:29.760
from your database.

00:05:29.760 --> 00:05:32.150
This has been a quick
introduction into the Push API.

00:05:32.150 --> 00:05:34.742
We look forward to seeing
what you will build.

00:05:34.742 --> 00:05:36.700
Please go check out these
articles, which cover

00:05:36.700 --> 00:05:38.800
all of this in more detail.

00:05:38.800 --> 00:05:40.560
Thanks for watching.

