WEBVTT
Kind: captions
Language: en

00:00:12.370 --> 00:00:12.490
MANO MARKS: Hi.

00:00:12.490 --> 00:00:14.830
I'm Mano Marks.

00:00:14.830 --> 00:00:17.210
Welcome to Google Maps Garage.

00:00:17.210 --> 00:00:20.790
This is a regular show that
we're doing on Google

00:00:20.790 --> 00:00:22.350
Developers Live.

00:00:22.350 --> 00:00:24.630
Google Maps Garage is where
we talk about some of the

00:00:24.630 --> 00:00:28.590
technical aspects of working
with the Google Maps API,

00:00:28.590 --> 00:00:32.479
delve into some code, and just
sort through some common

00:00:32.479 --> 00:00:36.390
design patterns and problems,
things that come up for

00:00:36.390 --> 00:00:38.240
developers.

00:00:38.240 --> 00:00:42.630
So this week, I'm going to
talk a little bit about

00:00:42.630 --> 00:00:49.300
working with some common JSON
objects, parsing through to

00:00:49.300 --> 00:00:52.270
get out some data, and some
gotchas that come up when

00:00:52.270 --> 00:00:55.650
people do that, and things that
we will often see people

00:00:55.650 --> 00:00:58.190
ask questions about
on Stack Overflow.

00:00:58.190 --> 00:01:03.720
This is the basic map here that
I'll be working with, or

00:01:03.720 --> 00:01:05.260
at least the basic data.

00:01:05.260 --> 00:01:11.010
So this is the Google West
Campus, which is a part of the

00:01:11.010 --> 00:01:15.420
main Googleplex here in Mountain
View, California.

00:01:15.420 --> 00:01:19.130
And I just highlighted three
buildings that have large

00:01:19.130 --> 00:01:22.250
numbers of geoengineers
in here.

00:01:22.250 --> 00:01:26.410
We fondly refer to this
as the Geoplex.

00:01:26.410 --> 00:01:29.420
And I'm just going to walk
through a little

00:01:29.420 --> 00:01:34.170
how I created that.

00:01:34.170 --> 00:01:37.110
First, though, I wanted to show
you my data source, very

00:01:37.110 --> 00:01:39.390
simple file here.

00:01:39.390 --> 00:01:43.500
This is the same data source I'm
going to use in every one

00:01:43.500 --> 00:01:46.790
of the examples today.

00:01:46.790 --> 00:01:51.330
So you see here, I just created
a file, WestCampus.js.

00:01:51.330 --> 00:01:53.700
I created a variable West
Campus, and then it has an

00:01:53.700 --> 00:01:56.440
array of JSON objects.

00:01:56.440 --> 00:01:58.620
Each has a name, latitude,
and longitude.

00:01:58.620 --> 00:02:05.540
It's a very common way for
people to create their data

00:02:05.540 --> 00:02:08.580
and load it into Google Maps
or any other kind of

00:02:08.580 --> 00:02:09.830
JavaScript application.

00:02:13.410 --> 00:02:17.780
And I'm just going to say here
that often, when we talk about

00:02:17.780 --> 00:02:20.270
common problems that happen
when building Google Maps

00:02:20.270 --> 00:02:23.490
applications, they're actually
common JavaScript problems.

00:02:23.490 --> 00:02:27.690
There are a few things that
are map-specific, but in

00:02:27.690 --> 00:02:32.620
general, this is basically good
JavaScript practice, so

00:02:32.620 --> 00:02:38.910
these things will help you out
with other things as well.

00:02:38.910 --> 00:02:43.430
So if you'll take a look here,
one thing you'll see that I

00:02:43.430 --> 00:02:48.960
loaded a style sheet, which I
do have created separately,

00:02:48.960 --> 00:02:52.930
the JavaScript loader for the
Google Maps API, and then

00:02:52.930 --> 00:02:57.640
WestCampus.js, which is the file
I was just showing you.

00:02:57.640 --> 00:03:01.920
I created this Initialize
function here

00:03:01.920 --> 00:03:02.890
in this script tag.

00:03:02.890 --> 00:03:08.150
Now, generally, best practice
is to create a separate file

00:03:08.150 --> 00:03:09.740
for all your JavaScripts.

00:03:09.740 --> 00:03:11.730
Just for purposes of this
video, I'm going to

00:03:11.730 --> 00:03:13.980
show it in this way.

00:03:13.980 --> 00:03:19.490
But basically, generally, best
practice is create an HTML

00:03:19.490 --> 00:03:23.280
file, create a CSS file, create
at least one JavaScript

00:03:23.280 --> 00:03:29.470
file for loading in
your JavaScript.

00:03:29.470 --> 00:03:36.110
That way, you get a separation
of presentation,

00:03:36.110 --> 00:03:42.720
styling, and your code.

00:03:42.720 --> 00:03:45.120
So standard stuff here.

00:03:45.120 --> 00:03:53.000
I create the map, and center it,
and set the road type and

00:03:53.000 --> 00:03:53.900
the zoom level.

00:03:53.900 --> 00:03:59.010
We talked about that a lot in
the last Google Maps Garage.

00:03:59.010 --> 00:04:04.090
And then here, what I'm doing
is I'm iterating over the

00:04:04.090 --> 00:04:11.330
WestCampus array of objects,
and so I do a for-in loop.

00:04:11.330 --> 00:04:20.120
So I'm just saying for x in
WestCampus, each time I loop,

00:04:20.120 --> 00:04:23.680
it's going to create a new
building object with

00:04:23.680 --> 00:04:28.070
WestCampus, that particular
reference to

00:04:28.070 --> 00:04:31.590
that particular object.

00:04:31.590 --> 00:04:35.360
Then I create a new Location
Object, GoogleMaps.long,

00:04:35.360 --> 00:04:39.140
building.lat, and
building.lng.

00:04:39.140 --> 00:04:42.560
And then I create a new marker
that has the location and the

00:04:42.560 --> 00:04:47.090
building name on it and
set it onto the map.

00:04:47.090 --> 00:04:52.470
And then you'll see here, a lot
of people use body on load

00:04:52.470 --> 00:04:59.790
to load their initialize
function, but I prefer to use

00:04:59.790 --> 00:05:03.960
a Google.Maps.events
addDOMListener to the window

00:05:03.960 --> 00:05:08.050
that waits for the page to
load and then runs the

00:05:08.050 --> 00:05:09.780
initialization.

00:05:09.780 --> 00:05:13.980
That way, your body can continue
to load, even if the

00:05:13.980 --> 00:05:16.850
map hasn't loaded
at that point.

00:05:16.850 --> 00:05:19.310
So that is what you
get right here.

00:05:19.310 --> 00:05:24.530
And you notice that I used
building.name for the title,

00:05:24.530 --> 00:05:29.430
which means that as I hover
over a particular one--

00:05:29.430 --> 00:05:31.340
hopefully, this will
show up on video--

00:05:31.340 --> 00:05:33.780
I get a little tool tip there.

00:05:33.780 --> 00:05:39.700
Not a very sophisticated one,
like using an Info window, but

00:05:39.700 --> 00:05:42.560
it gives you enough information
without clicking

00:05:42.560 --> 00:05:45.275
on it, just to see what
that object is.

00:05:49.350 --> 00:05:53.760
So I'm going to switch over
now to adding in an Info

00:05:53.760 --> 00:05:58.360
window and demonstrate at the
same time a common problem.

00:05:58.360 --> 00:06:00.960
So this looks the same.

00:06:00.960 --> 00:06:04.670
This is my slightly
different file.

00:06:04.670 --> 00:06:10.170
I'm going to click on one here,
and you'll see that

00:06:10.170 --> 00:06:17.500
whichever one I click on, it's
going to do West Campus 3 as

00:06:17.500 --> 00:06:21.720
the Info window and load
it up using that

00:06:21.720 --> 00:06:25.270
position as its location.

00:06:25.270 --> 00:06:30.280
So as I scroll through here, you
can see we're doing pretty

00:06:30.280 --> 00:06:32.360
much the same thing.

00:06:32.360 --> 00:06:37.160
Then we're creating an Info
window for each one, and for

00:06:37.160 --> 00:06:40.910
the content, we're setting the
content to the building name.

00:06:40.910 --> 00:06:45.420
And you'll notice that the last
one is West Campus 3, and

00:06:45.420 --> 00:06:48.860
that's the one it's picking up
for all the Info windows.

00:06:48.860 --> 00:06:54.590
And then I am adding an event
listener to each marker that

00:06:54.590 --> 00:06:58.630
says, when clicked on, open up
the Info window and set it to

00:06:58.630 --> 00:07:00.060
the map and the marker.

00:07:00.060 --> 00:07:03.820
Now, what were encountering here
is a common JavaScript

00:07:03.820 --> 00:07:05.480
scoping problem.

00:07:05.480 --> 00:07:10.000
The problem is here that yes,
you're creating a new Info

00:07:10.000 --> 00:07:15.130
window object each time, and you
would think that when you

00:07:15.130 --> 00:07:18.580
create the event listener,
you're actually telling it to

00:07:18.580 --> 00:07:23.490
open up the Info window that
you're creating in that loop.

00:07:23.490 --> 00:07:30.820
The problem is that what's
actually happening is that the

00:07:30.820 --> 00:07:36.950
event listener is only firing
when you click on the marker.

00:07:36.950 --> 00:07:40.050
So what happens is it's picking
up the last Info

00:07:40.050 --> 00:07:46.200
window that was created,
and that has the last

00:07:46.200 --> 00:07:50.450
name for its content.

00:07:50.450 --> 00:07:55.050
So that's a problem that's
fairly easily solved, but it's

00:07:55.050 --> 00:07:57.610
one that comes up because scope
just works a little bit

00:07:57.610 --> 00:08:02.540
differently than how you might
expect if you're used to

00:08:02.540 --> 00:08:07.340
working with some other
programming languages.

00:08:07.340 --> 00:08:11.610
So here's one way to fix
the problem here.

00:08:11.610 --> 00:08:17.400
What I've done is I've created a
separate addMarker function.

00:08:17.400 --> 00:08:20.330
And so I loop through in the
same way that I was doing

00:08:20.330 --> 00:08:25.170
before, and after I create
the location, I create an

00:08:25.170 --> 00:08:28.610
addMarker, where I pass the
building name, the map, and

00:08:28.610 --> 00:08:30.980
the location to that function.

00:08:30.980 --> 00:08:32.760
And then in that function--

00:08:32.760 --> 00:08:37.640
because this scope is by global
or by function here--

00:08:37.640 --> 00:08:42.510
what we're seeing is that
that actually works.

00:08:42.510 --> 00:08:46.210
So I create a new Info window
in that scope and that

00:08:46.210 --> 00:08:49.640
function, and the event listener
is created there, so

00:08:49.640 --> 00:08:52.370
it works just fine.

00:08:52.370 --> 00:08:57.440
So now as I load that, I click
on each one, and you'll see

00:08:57.440 --> 00:08:59.900
that I get a separate
Info window.

00:08:59.900 --> 00:09:03.370
Now, what's interesting to note
here is this doesn't work

00:09:03.370 --> 00:09:07.010
in a way that most Maps
applications you'll see out

00:09:07.010 --> 00:09:08.260
there work.

00:09:08.260 --> 00:09:14.420
Each Info window that's created
doesn't automatically

00:09:14.420 --> 00:09:17.210
close the other Info windows.

00:09:17.210 --> 00:09:23.510
So one solution to
that problem--

00:09:23.510 --> 00:09:26.000
and by the way, some people do
like to have multiple Info

00:09:26.000 --> 00:09:30.180
windows up, which is why we
allow you to do that.

00:09:30.180 --> 00:09:34.840
You may remember back to V2, I
believe the Google Maps API,

00:09:34.840 --> 00:09:38.640
you could only have one
Info window at a time.

00:09:38.640 --> 00:09:43.260
So now, if we look at this
function addMarker, what

00:09:43.260 --> 00:09:51.770
you'll see is when I click on
it, that's when I create the

00:09:51.770 --> 00:09:53.110
Info window.

00:09:53.110 --> 00:09:56.800
And I actually created a global
variable called Info

00:09:56.800 --> 00:10:01.420
Window, and then I check to see
if that exists, and if it

00:10:01.420 --> 00:10:02.670
does, then I close it.

00:10:05.940 --> 00:10:08.830
Regardless of whether it exists
at that point, once

00:10:08.830 --> 00:10:12.850
I've closed it, it's gone away,
and then I create a new

00:10:12.850 --> 00:10:15.460
Info window at that
location and pass

00:10:15.460 --> 00:10:17.280
it the map and marker.

00:10:17.280 --> 00:10:20.000
So the only time the
Info window is

00:10:20.000 --> 00:10:22.810
created is at event time.

00:10:22.810 --> 00:10:31.210
So we look here, and you'll see
it's closing existing Info

00:10:31.210 --> 00:10:33.990
windows and opening
up a new one.

00:10:33.990 --> 00:10:37.395
So that's one good solution
to this problem.

00:10:43.230 --> 00:10:45.820
So I just have a couple
more quick demos here.

00:10:45.820 --> 00:10:52.890
This is creating a polyline
using the same data set.

00:10:52.890 --> 00:10:59.760
And what you'll see here is as
I'm looping through, I create

00:10:59.760 --> 00:11:05.910
these new Google Maps Lat Long
objects, and then I push them

00:11:05.910 --> 00:11:10.010
into an array that I created
called Points, and then I

00:11:10.010 --> 00:11:18.530
create a polyline, pass it the
path at points and the map,

00:11:18.530 --> 00:11:21.710
and then it puts that
onto the map.

00:11:21.710 --> 00:11:28.490
Now, this is a standard
JavaScript array, and you'll

00:11:28.490 --> 00:11:29.790
see here, I've created
something that

00:11:29.790 --> 00:11:31.040
looks exactly the same.

00:11:33.850 --> 00:11:38.620
And what I've done instead of
creating a standard JavaScript

00:11:38.620 --> 00:11:42.175
array is create a Google
Maps MVC array.

00:11:42.175 --> 00:11:50.620
Now MVC, the Model View
Controller objects within

00:11:50.620 --> 00:11:53.970
Maps, that's something that
we'll go into probably in a

00:11:53.970 --> 00:11:56.380
later Google Maps Garage.

00:11:56.380 --> 00:11:59.930
But the MVC array is basically
an array object that's defined

00:11:59.930 --> 00:12:07.200
within the JavaScript API that
is much more optimized for use

00:12:07.200 --> 00:12:09.020
with the Google Maps API.

00:12:09.020 --> 00:12:15.050
And the reason you would want
to use that is when you are

00:12:15.050 --> 00:12:19.220
using large numbers of points,
you will find you'll get

00:12:19.220 --> 00:12:25.700
better performance using the
Google Maps MVC array versus

00:12:25.700 --> 00:12:28.260
the standard JavaScript array.

00:12:28.260 --> 00:12:33.850
So I just wanted to call that
out as a quick technique that

00:12:33.850 --> 00:12:36.360
you can use.

00:12:36.360 --> 00:12:40.410
And then finally today, I
actually have just a little

00:12:40.410 --> 00:12:41.480
trick for you.

00:12:41.480 --> 00:12:43.780
I've got Google Earth
open here.

00:12:43.780 --> 00:12:45.620
Now often, when I'm constructing
something by

00:12:45.620 --> 00:12:49.150
hand, I have a little bit of
trouble figuring out where

00:12:49.150 --> 00:12:51.040
exactly things go.

00:12:51.040 --> 00:13:02.160
So we can take a look here in
Google Earth, and I'll show

00:13:02.160 --> 00:13:09.980
you a little bit of
what I've done.

00:13:09.980 --> 00:13:12.930
When I was creating this, I
didn't have the latitude and

00:13:12.930 --> 00:13:17.813
longitude of the Google
buildings.

00:13:21.410 --> 00:13:28.630
What I did was I just went into
Google Earth and created

00:13:28.630 --> 00:13:30.090
a bunch of placemarks.

00:13:30.090 --> 00:13:36.080
Let's see, I have here the two
placemarks for these two

00:13:36.080 --> 00:13:39.790
buildings, and also for
the center here.

00:13:39.790 --> 00:13:45.760
And I do that pretty easily just
by centering Google Earth

00:13:45.760 --> 00:13:50.560
where I want it, creating a
placemark by pushing on the

00:13:50.560 --> 00:13:54.890
little push pin right there,
and then I can move that

00:13:54.890 --> 00:13:58.210
around to position it exactly
where I want.

00:13:58.210 --> 00:14:04.380
And then I click OK, and then I
just right click or control

00:14:04.380 --> 00:14:20.460
click, and pull up Copy, create
a new text document,

00:14:20.460 --> 00:14:23.280
and I've created a little
bit of KML here.

00:14:23.280 --> 00:14:25.790
And so then what I can do is
I can just go into the

00:14:25.790 --> 00:14:31.420
Coordinates Tag and pull out
the latitude and longitude

00:14:31.420 --> 00:14:34.570
that I need for my map.

00:14:34.570 --> 00:14:37.960
Now, the reason I am doing this
is it saves a round trip

00:14:37.960 --> 00:14:41.610
for geocoding if I wanted to
geocode, say, the Google West

00:14:41.610 --> 00:14:44.010
Campus one, two, and three.

00:14:47.910 --> 00:14:53.060
One thing to note is that in
Google Earth, there the

00:14:53.060 --> 00:14:56.850
latitude and longitude are
reversed from their positions

00:14:56.850 --> 00:15:02.770
in Google Maps, so longitude
comes first and then latitude.

00:15:02.770 --> 00:15:06.410
So when you copy and paste those
out, you need to just be

00:15:06.410 --> 00:15:07.480
aware of that.

00:15:07.480 --> 00:15:11.140
The other thing I do is Google
Earth will give you a very

00:15:11.140 --> 00:15:14.260
high level of precision
on the coordinates.

00:15:14.260 --> 00:15:17.910
I usually top that out at
six decimal points.

00:15:17.910 --> 00:15:26.320
So just copy the first six after
the decimal point, and

00:15:26.320 --> 00:15:29.730
take that and paste
that into my code.

00:15:29.730 --> 00:15:36.610
So that's just a neat little
trick that I use when I'm

00:15:36.610 --> 00:15:40.200
constructing my Google Maps apps
when I need a latitude

00:15:40.200 --> 00:15:42.790
and longitude right away.

00:15:42.790 --> 00:15:44.140
All right.

00:15:44.140 --> 00:15:47.660
That's all we have for you in
this week's episode of Google

00:15:47.660 --> 00:15:48.900
Maps Garage.

00:15:48.900 --> 00:15:51.050
Please join us next time.

00:15:51.050 --> 00:15:52.300
Thanks.

