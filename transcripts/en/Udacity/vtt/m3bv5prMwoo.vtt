WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.700
Now that we have
a good grasp on TLS,

00:00:02.700 --> 00:00:04.259
let's talk about signatures.

00:00:04.259 --> 00:00:06.359
I mentioned certificate
authorities earlier

00:00:06.360 --> 00:00:08.220
and the job is to
sign certificates.

00:00:08.220 --> 00:00:09.360
But what does it mean?

00:00:09.359 --> 00:00:12.149
And why would anyone want
a signed certificate?

00:00:12.150 --> 00:00:14.437
When we say someone
has signed a document,

00:00:14.436 --> 00:00:16.019
we mean that the
certificate authority

00:00:16.019 --> 00:00:19.469
has reviewed and verified the
contents of that document.

00:00:19.469 --> 00:00:21.839
The purpose is to have
some kind of proof

00:00:21.839 --> 00:00:24.809
that the document was seen, or
even created by that entity.

00:00:32.469 --> 00:00:34.390
Just like signing your
name on a document

00:00:34.390 --> 00:00:36.590
is legal proof that
you saw that document,

00:00:36.590 --> 00:00:40.510
a server can do the same thing
with a digital signature.

00:00:40.509 --> 00:00:43.239
When a server signs a
document and encrypts it

00:00:43.240 --> 00:00:45.910
with their private key,
they give that back

00:00:45.909 --> 00:00:47.589
as a signed document.

00:00:47.590 --> 00:00:49.750
Since only the holder
of the private key

00:00:49.750 --> 00:00:51.729
is able to encrypt
documents, you

00:00:51.729 --> 00:00:54.789
know the document you
received is exactly the same

00:00:54.789 --> 00:00:57.129
as the one the server sent.

00:00:57.130 --> 00:00:59.800
However, documents can
become fairly large.

00:00:59.799 --> 00:01:01.719
Think of DVD
images, for example.

00:01:01.719 --> 00:01:04.420
And encrypting and
decrypting takes a long time

00:01:04.420 --> 00:01:06.609
with asymmetric cyphers.

00:01:06.609 --> 00:01:10.000
That's why instead of encrypting
the entire document itself,

00:01:10.000 --> 00:01:13.069
just the hash of the
document is encrypted.

00:01:13.069 --> 00:01:15.729
If you want to check if
the signature is valid,

00:01:15.730 --> 00:01:17.980
you would decrypt the
signature and hash

00:01:17.980 --> 00:01:21.850
the document yourself to see
if those two values match.

00:01:21.849 --> 00:01:24.129
This way we know that
the document we received

00:01:24.129 --> 00:01:27.519
is exactly the same as
when the server sent it.

00:01:27.519 --> 00:01:29.890
If the document was
changed midflight,

00:01:29.890 --> 00:01:31.959
the hash would not
match the one provided

00:01:31.959 --> 00:01:33.879
by the server as a signature.

00:01:33.879 --> 00:01:37.079
This is called an
invalid signature.

