WEBVTT
Kind: captions
Language: en

00:00:00.934 --> 00:00:02.834
Aaron Goodman:
This talk is about

00:00:02.834 --> 00:00:09.033
the upcoming extension
system for Google Chrome.

00:00:09.033 --> 00:00:10.634
My name's Aaron Goodman.

00:00:10.634 --> 00:00:13.234
To give you a little bit
of background about myself,

00:00:13.234 --> 00:00:17.834
so you kind of know
who you're talking to...

00:00:17.834 --> 00:00:20.534
before I started working
at Google,

00:00:20.534 --> 00:00:24.334
I created the Greasemonkey
Firefox extension,

00:00:24.334 --> 00:00:26.667
which was about five years
ago now.

00:00:26.667 --> 00:00:30.467
And it was originally
intended to be a quick hack

00:00:30.467 --> 00:00:33.400
that only a few
of my friends would appreciate,

00:00:33.400 --> 00:00:35.667
the JavaScript hackers
that I knew.

00:00:35.667 --> 00:00:37.934
And I didn't really expect it
to be popular,

00:00:37.934 --> 00:00:39.934
but it became
extremely popular,

00:00:39.934 --> 00:00:42.567
much to my surprise.

00:00:42.567 --> 00:00:45.534
And that's kind of what
eventually to led me

00:00:45.534 --> 00:00:49.067
being interested in working on
extensions for Chrome.

00:00:49.067 --> 00:00:53.601
In between then and now,
I've been working on Gears

00:00:53.601 --> 00:00:58.501
which is another project
at Google, and Chrome.

00:00:58.501 --> 00:01:00.868
[clears throat]

00:01:00.868 --> 00:01:03.067
So before I dive in
and get started,

00:01:03.067 --> 00:01:06.200
I wanna make
a few quick caveats.

00:01:06.200 --> 00:01:09.200
What you're about to see here
is alpha code,

00:01:09.200 --> 00:01:10.901
pre-alpha code, even.

00:01:10.901 --> 00:01:14.400
This is a early
developer preview.

00:01:14.400 --> 00:01:16.601
We're not making any extensions
available

00:01:16.601 --> 00:01:18.601
to the general public today.

00:01:18.601 --> 00:01:22.334
Ever since...
since Chrome is open source,

00:01:22.334 --> 00:01:23.801
we do everything
in the open.

00:01:23.801 --> 00:01:25.501
We've done all our designing
in the open,

00:01:25.501 --> 00:01:27.467
and it's the same
with extensions.

00:01:27.467 --> 00:01:28.968
Since we started the project,

00:01:28.968 --> 00:01:32.133
we did all of our design
documents completely in the open

00:01:32.133 --> 00:01:33.801
and so it hasn't been
a secret

00:01:33.801 --> 00:01:36.200
that we're working on
extensions for Chrome.

00:01:36.200 --> 00:01:38.000
And since it's not a secret,

00:01:38.000 --> 00:01:40.601
we figured that since
this is a developer conference,

00:01:40.601 --> 00:01:43.400
it would be cool to come here
and give an update

00:01:43.400 --> 00:01:46.200
about where we're at with
the statuses of the project

00:01:46.200 --> 00:01:48.801
and sort of what
the focus of it is,

00:01:48.801 --> 00:01:52.200
how it works,
and what's cool about it.

00:01:52.200 --> 00:01:54.200
So the specific agenda today

00:01:54.200 --> 00:01:56.834
is that we're gonna build
an extension together.

00:01:56.834 --> 00:02:00.000
We're gonna start from scratch
from an empty page,

00:02:00.000 --> 00:02:01.567
build a simple extension

00:02:01.567 --> 00:02:03.501
up to something
that's moderately functional,

00:02:03.501 --> 00:02:05.701
and along the way,
I'm gonna show you

00:02:05.701 --> 00:02:07.901
three of what I think
are the coolest things

00:02:07.901 --> 00:02:10.634
about the design
of the Chrome Extension system.

00:02:13.834 --> 00:02:17.701
But first I want to step back
and give some context

00:02:17.701 --> 00:02:20.067
about why we're even doing
an extension system for Chrome.

00:02:20.067 --> 00:02:22.300
'Cause I think that kind of
will set the stage

00:02:22.300 --> 00:02:23.767
for some of the decisions
that we made

00:02:23.767 --> 00:02:27.000
about how it's implemented.

00:02:27.000 --> 00:02:28.634
There's some pretty good
reasons why

00:02:28.634 --> 00:02:30.100
you would not want to do

00:02:30.100 --> 00:02:32.267
an extension system
for a browser.

00:02:32.267 --> 00:02:35.601
And...if there's
any security people around,

00:02:35.601 --> 00:02:37.467
I'm sure you can think
of some of them.

00:02:37.467 --> 00:02:40.434
But there's quite a few.

00:02:40.434 --> 00:02:43.300
First of all,
it can be a security problem.

00:02:43.300 --> 00:02:45.467
The browser has become

00:02:45.467 --> 00:02:47.834
the most important
piece of software on computers,

00:02:47.834 --> 00:02:50.667
and it's the interface
through which you access

00:02:50.667 --> 00:02:53.067
all of your private
and sensitive data on the web.

00:02:53.067 --> 00:02:54.734
And so naturally
adding third-party code

00:02:54.734 --> 00:02:56.234
into that software

00:02:56.234 --> 00:02:59.667
is something that should be
thought about carefully.

00:02:59.667 --> 00:03:02.734
There's also...there can be
robustness issues.

00:03:02.734 --> 00:03:06.133
Application developers
are typically nervous

00:03:06.133 --> 00:03:07.934
about adding plugins,
extensions, whatever,

00:03:07.934 --> 00:03:09.701
to their system

00:03:09.701 --> 00:03:12.501
because if there's a problem
with a plugin or an extension,

00:03:12.501 --> 00:03:14.734
users don't typically
understand

00:03:14.734 --> 00:03:16.534
that the problem
is with the extension.

00:03:16.534 --> 00:03:18.734
They just think that
the application is busted,

00:03:18.734 --> 00:03:21.734
and they're just mad at
the application in general.

00:03:21.734 --> 00:03:24.334
So that can cause--
application vendors

00:03:24.334 --> 00:03:27.334
are typically reluctant
to add plugins because

00:03:27.334 --> 00:03:32.901
they end up getting blamed
for problems with the plugins.

00:03:32.901 --> 00:03:36.501
Another reason why not
to do an extension system

00:03:36.501 --> 00:03:38.701
is maintenance.

00:03:38.701 --> 00:03:42.133
Every time you add
an extension API to a product,

00:03:42.133 --> 00:03:45.100
you create a maintenance problem
for yourself.

00:03:45.100 --> 00:03:47.534
Because you can never take back
and extension API.

00:03:47.534 --> 00:03:49.601
Once you create one
and people start using it,

00:03:49.601 --> 00:03:51.868
you're married to it
and it exists forever,

00:03:51.868 --> 00:03:53.734
and you have to support it
forever.

00:03:53.734 --> 00:03:55.534
And this can become
a big problem.

00:03:55.534 --> 00:03:57.367
It can make it
so it's very difficult

00:03:57.367 --> 00:04:00.400
to upgrade your product
and add new features to it

00:04:00.400 --> 00:04:02.200
or change features

00:04:02.200 --> 00:04:04.501
because there's features that
are attached to extension APIs,

00:04:04.501 --> 00:04:06.300
and you can't modify
the extension APIs

00:04:06.300 --> 00:04:07.801
because it would break
all the extensions,

00:04:07.801 --> 00:04:09.601
and you don't wanna do that.

00:04:09.601 --> 00:04:11.100
So these are all reasons

00:04:11.100 --> 00:04:13.367
why you would not want to do
an extension system.

00:04:13.367 --> 00:04:16.934
But we are doing one.
So why is that?

00:04:16.934 --> 00:04:22.100
Well, the obvious reason
is that you made us.

00:04:22.100 --> 00:04:24.033
The very first day
we launched Chrome,

00:04:24.033 --> 00:04:25.701
it was September 2.

00:04:25.701 --> 00:04:27.701
The 18th bug that was reported

00:04:27.701 --> 00:04:30.167
was that Chrome does not
have an extension system.

00:04:30.167 --> 00:04:31.534
[chuckling]

00:04:31.534 --> 00:04:33.634
And...[laughs]

00:04:33.634 --> 00:04:35.667
There were a lot of bugs
created that day.

00:04:35.667 --> 00:04:37.033
So this was created,
you know,

00:04:37.033 --> 00:04:38.968
minutes
after we launched Chrome.

00:04:38.968 --> 00:04:41.067
[laughs]

00:04:41.067 --> 00:04:43.567
And within days,
800 people starred it

00:04:43.567 --> 00:04:45.567
and added such helpful
comments as,

00:04:45.567 --> 00:04:47.200
"Repose for me...

00:04:47.200 --> 00:04:48.534
There's no extension
system on my computer."

00:04:48.534 --> 00:04:50.534
[laughter]

00:04:50.534 --> 00:04:52.834
So thanks for helping us
track that down.

00:04:52.834 --> 00:04:55.000
[laughs]

00:04:55.000 --> 00:04:56.834
And we eventually
had to close the bug

00:04:56.834 --> 00:04:58.534
because it became
totally useless

00:04:58.534 --> 00:05:01.567
because there were
800 comments on it.

00:05:01.567 --> 00:05:05.400
So that's the obvious reason
is that...

00:05:05.400 --> 00:05:07.400
especially because
of the great work

00:05:07.400 --> 00:05:09.434
that Mozilla has done
with Firefox,

00:05:09.434 --> 00:05:13.701
they've really shown
how important and crucial

00:05:13.701 --> 00:05:16.868
a vibrant add-on
eco system is for a browser

00:05:16.868 --> 00:05:21.267
and since Firefox,
users just have come to expect

00:05:21.267 --> 00:05:24.067
that browsers have powerful
extension systems.

00:05:24.067 --> 00:05:27.434
So that's the obvious reason
why we're doing one.

00:05:27.434 --> 00:05:29.634
But there are
some other good reasons.

00:05:29.634 --> 00:05:32.701
And there are reasons
that sort of counterweight

00:05:32.701 --> 00:05:35.901
all the reasons
not to do one.

00:05:35.901 --> 00:05:37.801
And there are reasons
that the Chrome team,

00:05:37.801 --> 00:05:40.801
the Google Chrome team
is especially interested in.

00:05:40.801 --> 00:05:42.467
First of all,
an extension system

00:05:42.467 --> 00:05:44.300
helps keep Google Chrome
minimal.

00:05:44.300 --> 00:05:46.334
One of the cool features
of Chrome

00:05:46.334 --> 00:05:48.000
that we really like
and that we're proud of

00:05:48.000 --> 00:05:51.434
is that Chrome has this really
minimal slick interface,

00:05:51.434 --> 00:05:53.200
and we think that
this is a reason

00:05:53.200 --> 00:05:54.734
that people like
using Chrome,

00:05:54.734 --> 00:05:56.667
and we want
to keep it that way.

00:05:56.667 --> 00:05:59.501
But the problem is that
in order to keep it that way,

00:05:59.501 --> 00:06:01.033
we have to have a very high
bar for features

00:06:01.033 --> 00:06:02.734
that we'll add to Chrome.

00:06:02.734 --> 00:06:04.501
And we have a rule of thumb
on the project

00:06:04.501 --> 00:06:06.501
that we won't add a feature
to the main interface of Chrome

00:06:06.501 --> 00:06:07.901
unless we think that
it will be used

00:06:07.901 --> 00:06:10.501
by a vast majority
of users of Chrome.

00:06:10.501 --> 00:06:13.567
Not a simple majority.
Not a significant majority.

00:06:13.567 --> 00:06:15.467
Almost all users.

00:06:15.467 --> 00:06:17.167
And that creates
a huge problem,

00:06:17.167 --> 00:06:18.534
because there's
tons of features

00:06:18.534 --> 00:06:20.167
that a lot of users
would want--

00:06:20.167 --> 00:06:21.767
a majority of users would want--

00:06:21.767 --> 00:06:23.334
but we won't add them
to Chrome

00:06:23.334 --> 00:06:24.901
because we're trying
to keep it minimal.

00:06:24.901 --> 00:06:26.501
Extensions
help with this problem

00:06:26.501 --> 00:06:29.200
because ideally,
with a good extension system,

00:06:29.200 --> 00:06:32.234
we can create a customized
browser for every user.

00:06:32.234 --> 00:06:34.434
Every user can have
the features that they need

00:06:34.434 --> 00:06:36.267
and none of the features
they don't want.

00:06:36.267 --> 00:06:38.601
As an example of this,
a simple example,

00:06:38.601 --> 00:06:41.934
imagine a feature
that integrates with Skype.

00:06:41.934 --> 00:06:44.701
People who use Skype
would probably really like

00:06:44.701 --> 00:06:47.501
the ability to have phone
numbers on web pages highlighted

00:06:47.501 --> 00:06:49.734
so they could click on them
and it would dial in Skype.

00:06:49.734 --> 00:06:51.100
It's a great feature.

00:06:51.100 --> 00:06:52.734
People who use Skype
would love this.

00:06:52.734 --> 00:06:54.067
But people who don't use Skype

00:06:54.067 --> 00:06:55.901
would think this feature's
totally useless,

00:06:55.901 --> 00:06:57.934
and it would just be
noise to them.

00:06:57.934 --> 00:07:00.300
So this is just one example

00:07:00.300 --> 00:07:02.601
of all kinds of features
that come up like this

00:07:02.601 --> 00:07:04.968
that some users want,
some users don't,

00:07:04.968 --> 00:07:09.434
and extension systems
really help solve this problem.

00:07:09.434 --> 00:07:12.000
Another reason
that the Google Chrome team

00:07:12.000 --> 00:07:13.567
wants to do extensions

00:07:13.567 --> 00:07:15.534
is because it helps us prototype
new feature ideas.

00:07:15.534 --> 00:07:18.367
I mentioned that
we won't add something to Chrome

00:07:18.367 --> 00:07:20.801
unless it's gonna be used
by most users.

00:07:20.801 --> 00:07:22.701
But how do we know
that a feature will be used

00:07:22.701 --> 00:07:24.167
by most users?

00:07:24.167 --> 00:07:25.467
Sometimes it's not clear.

00:07:25.467 --> 00:07:26.968
There can be arguments
within the team

00:07:26.968 --> 00:07:28.567
about whether a feature's
important or not.

00:07:28.567 --> 00:07:32.601
And if we just add it
to the product and ship it,

00:07:32.601 --> 00:07:34.367
it will be hard for us
to take it away,

00:07:34.367 --> 00:07:35.968
because people get used to it

00:07:35.968 --> 00:07:37.400
and they don't want us
to remove it.

00:07:37.400 --> 00:07:39.000
So even if it's not
successful,

00:07:39.000 --> 00:07:40.634
it would be hard for us
to remove it later.

00:07:40.634 --> 00:07:42.400
Extension system
helps with this because

00:07:42.400 --> 00:07:44.567
we can implement a feature
as an extension,

00:07:44.567 --> 00:07:46.601
put it out there,
let people install it,

00:07:46.601 --> 00:07:48.601
and if it becomes
wildly successful,

00:07:48.601 --> 00:07:50.000
then we know
that it was a good idea

00:07:50.000 --> 00:07:51.601
and we add it
to the main Chrome UI.

00:07:51.601 --> 00:07:56.200
Otherwise,
it just stays an extension.

00:07:58.534 --> 00:08:01.968
So with that context...

00:08:01.968 --> 00:08:04.834
I'm gonna dive in and start
building up a sample extension.

00:08:04.834 --> 00:08:06.434
What you're gonna see here

00:08:06.434 --> 00:08:09.501
requires what's called the
Dev Channel release of Chrome.

00:08:09.501 --> 00:08:12.667
If you're not familiar,
Chrome has three releases.

00:08:12.667 --> 00:08:15.133
Three channels
is what we call them.

00:08:15.133 --> 00:08:19.767
And these channels
are available all the time,

00:08:19.767 --> 00:08:21.968
so there's always three
different releases of Chrome

00:08:21.968 --> 00:08:24.133
available at any given
point in time.

00:08:24.133 --> 00:08:25.634
There's the stable channel,

00:08:25.634 --> 00:08:26.968
which is what almost
everyone has.

00:08:26.968 --> 00:08:30.000
If you go to Google.com/Chrome
and you install Chrome,

00:08:30.000 --> 00:08:31.934
this is what you get,
the stable channel.

00:08:31.934 --> 00:08:33.801
There's also a beta channel

00:08:33.801 --> 00:08:36.534
which is released
much more frequently.

00:08:36.534 --> 00:08:40.033
It's released
about once a month, and...

00:08:40.033 --> 00:08:42.167
the beta channel
has all the features

00:08:42.167 --> 00:08:43.767
that are expected to become

00:08:43.767 --> 00:08:46.701
the next stable release
of Chrome.

00:08:46.701 --> 00:08:49.868
And since it's not yet stable,
it has a few more bugs,

00:08:49.868 --> 00:08:51.567
it may crash
more frequently,

00:08:51.567 --> 00:08:54.167
it may be a little bit slower--
things like that.

00:08:54.167 --> 00:08:56.334
And then finally,
there's the Dev Channel,

00:08:56.334 --> 00:08:58.367
and the Dev Channel
is like the Wild West.

00:08:58.367 --> 00:09:00.267
The Dev Channel
is released every week, and...

00:09:00.267 --> 00:09:02.601
unless there's some
major problem,

00:09:02.601 --> 00:09:04.834
and it has minimal testing,

00:09:04.834 --> 00:09:08.234
and it has all the features
that we're experimenting with.

00:09:08.234 --> 00:09:09.667
So some of these features

00:09:09.667 --> 00:09:11.434
may not ever make it
to the stable release.

00:09:11.434 --> 00:09:13.133
We may decide
that we don't like them

00:09:13.133 --> 00:09:15.467
or we may change them,
and it's a lot less stable.

00:09:15.467 --> 00:09:17.501
But the upside
is that the Dev Channel

00:09:17.501 --> 00:09:19.467
has all the newest work,

00:09:19.467 --> 00:09:22.334
and since extensions is on-going
and we're giving this talk

00:09:22.334 --> 00:09:25.334
in the middle of the development
of the extensions project,

00:09:25.334 --> 00:09:29.067
the Dev Channel's
what you need to use this stuff.

00:09:29.067 --> 00:09:32.067
You also need to add
a custom flag

00:09:32.067 --> 00:09:35.767
to your chrome.xe shortcut,

00:09:35.767 --> 00:09:39.601
and all of this is described
on a how-to document

00:09:39.601 --> 00:09:41.934
that we've put up
that you can read

00:09:41.934 --> 00:09:43.868
that will help you get started
writing an extension.

00:09:43.868 --> 00:09:46.267
So if you do a Google search
for Chrome Extensions HOWTO,

00:09:46.267 --> 00:09:48.767
click on the first result,
it'll take you to a page

00:09:48.767 --> 00:09:51.400
that details how to get started
writing your first extension.

00:09:51.400 --> 00:09:54.868
And it covers
these prerequisites.

00:10:03.100 --> 00:10:06.534
So we can finally get started
writing our extension.

00:10:06.534 --> 00:10:08.901
I said that we're gonna cover
three of the coolest things

00:10:08.901 --> 00:10:10.968
about the extension system,
and the first one,

00:10:10.968 --> 00:10:12.300
the most important one,

00:10:12.300 --> 00:10:14.167
and the one that we're most
excited about

00:10:14.167 --> 00:10:15.767
and is sort of the linchpin

00:10:15.767 --> 00:10:17.467
that the whole system
revolves around,

00:10:17.467 --> 00:10:19.634
is that in Chrome
extensions are web pages.

00:10:19.634 --> 00:10:22.167
What I mean by that
extensions in Chrome

00:10:22.167 --> 00:10:24.267
are written using
the exact same technologies

00:10:24.267 --> 00:10:26.234
that you use to write
web pages--

00:10:26.234 --> 00:10:27.901
HTML, CSS, and JavaScript.

00:10:27.901 --> 00:10:30.334
It's not inspired
by these technologies,

00:10:30.334 --> 00:10:32.901
but extensions actually are
web pages.

00:10:32.901 --> 00:10:34.334
So all the skills,

00:10:34.334 --> 00:10:36.133
all the tools that you use
to write web pages

00:10:36.133 --> 00:10:37.801
and that you're familiar with

00:10:37.801 --> 00:10:40.100
are immediately applicable
to writing extensions in Chrome,

00:10:40.100 --> 00:10:42.267
and you don't need
to relearn anything.

00:10:43.901 --> 00:10:48.100
What does that mean, to have
an extension be a web page?

00:10:48.100 --> 00:10:51.634
Well, let's take a look.

00:10:51.634 --> 00:10:54.467
In Chrome,
extensions are basically

00:10:54.467 --> 00:10:59.334
a package, a zip file,
of HTMLs, CSS, and JavaScript.

00:10:59.334 --> 00:11:01.934
And there can be as many
of these files as you want.

00:11:01.934 --> 00:11:03.767
And then there's one file
called a manifest

00:11:03.767 --> 00:11:05.300
that ties the whole thing
together

00:11:05.300 --> 00:11:07.467
and declares information
about the extension

00:11:07.467 --> 00:11:09.400
such as its name,
its description, its version,

00:11:09.400 --> 00:11:11.534
and the features
that it's using.

00:11:11.534 --> 00:11:14.868
So in this right window here,

00:11:14.868 --> 00:11:16.801
I have started
a basic extension.

00:11:16.801 --> 00:11:18.767
And right now the extension
is totally empty.

00:11:18.767 --> 00:11:21.267
It has nothing in it
except for my manifest file.

00:11:21.267 --> 00:11:23.400
I open this up in my editor,

00:11:23.400 --> 00:11:27.067
and...I'll make the screen font
a little bigger.

00:11:33.434 --> 00:11:36.234
And you can see that
this manifest is JSON.

00:11:36.234 --> 00:11:37.868
It's a format
that most web developers

00:11:37.868 --> 00:11:39.534
should be familiar with.

00:11:39.534 --> 00:11:40.868
And right now,
it has two keys,

00:11:40.868 --> 00:11:42.734
which is the bare minimum
required for an extension

00:11:42.734 --> 00:11:44.968
that just declares
this name and this version.

00:11:44.968 --> 00:11:46.300
And what I'm gonna do now

00:11:46.300 --> 00:11:48.701
is I'm gonna add my first
feature to my extension.

00:11:48.701 --> 00:11:50.300
And one of the features
that we support

00:11:50.300 --> 00:11:54.133
is called toolstrips,
so I'm gonna add one toolstrip.

00:11:54.133 --> 00:11:56.467
And...it's an HTML file.

00:11:56.467 --> 00:11:59.367
And I'll call it
my_toolstrip.html.

00:11:59.367 --> 00:12:02.934
So I save my manifest.

00:12:02.934 --> 00:12:06.300
I'll create a new HTML file...

00:12:09.067 --> 00:12:13.701
And I'll save that
as my_toolstrip.html.

00:12:17.100 --> 00:12:19.400
And now to do these demos,

00:12:19.400 --> 00:12:21.501
I'm gonna use a separate
instance of Chrome

00:12:21.501 --> 00:12:24.167
just so that I don't lose
my place in the presentation.

00:12:24.167 --> 00:12:26.434
Again, this works with the
development version of Chrome,

00:12:26.434 --> 00:12:28.534
so you don't need
a special build of it.

00:12:28.534 --> 00:12:35.033
So I start my Chrome.

00:12:35.033 --> 00:12:37.801
And you can see
that there's now a toolbar

00:12:37.801 --> 00:12:39.834
along the bottom part
of Chrome,

00:12:39.834 --> 00:12:42.100
and my extension,
my toolstrip

00:12:42.100 --> 00:12:43.634
shows up there.

00:12:43.634 --> 00:12:44.834
And it's not
too exciting yet,

00:12:44.834 --> 00:12:46.300
doesn't do anything.

00:12:46.300 --> 00:12:48.033
It just has some text.

00:12:48.033 --> 00:12:50.334
But I can prove that this
really is an extension

00:12:50.334 --> 00:12:51.868
by right-clicking on it.

00:12:51.868 --> 00:12:53.467
It brings up
Chrome's Inspector,

00:12:53.467 --> 00:12:56.267
which is exactly the same
inspector that you use

00:12:56.267 --> 00:12:58.400
to de-bug web pages.

00:12:58.400 --> 00:13:00.701
It works exactly the same way.
You can expand the elements.

00:13:00.701 --> 00:13:02.934
Oops. Aah.

00:13:02.934 --> 00:13:06.534
Let me try that again.
[laughs]

00:13:06.534 --> 00:13:08.300
And when you hover
over the elements,

00:13:08.300 --> 00:13:09.701
it highlights them

00:13:09.701 --> 00:13:11.901
just like the regular
web inspector does.

00:13:11.901 --> 00:13:14.701
And this highlights
a great reason why

00:13:14.701 --> 00:13:16.834
we want to use web pages
for extensions,

00:13:16.834 --> 00:13:19.067
because we didn't have to
write any new tools,

00:13:19.067 --> 00:13:21.167
and you don't have to learn
any new tools.

00:13:21.167 --> 00:13:22.901
Everything works exactly
the same way

00:13:22.901 --> 00:13:24.534
as it does when you're
writing web pages.

00:13:24.534 --> 00:13:26.567
So if you already know
how to use Chrome's Inspector,

00:13:26.567 --> 00:13:29.234
you know how to use it
for extensions too.

00:13:30.734 --> 00:13:34.467
Now, since this is HTML,
I can use any HTML features.

00:13:34.467 --> 00:13:36.100
It can actually do more

00:13:36.100 --> 00:13:38.133
than just print out
snarky comments.

00:13:38.133 --> 00:13:41.300
So I can add an icon,

00:13:41.300 --> 00:13:46.634
and it works exactly
the same way as HTML.

00:13:46.634 --> 00:13:51.100
I have an icon here
I'm gonna copy out of my...

00:13:51.100 --> 00:13:56.734
folder of samples
and into my extension.

00:13:56.734 --> 00:13:58.901
And also,
because it is a web page,

00:13:58.901 --> 00:14:01.934
the development cycle
is just like a web page.

00:14:01.934 --> 00:14:04.234
You can just reload it,
and you see the new content.

00:14:04.234 --> 00:14:05.968
Of course, the reload button
doesn't work

00:14:05.968 --> 00:14:07.634
because the reload button
is for the tab.

00:14:07.634 --> 00:14:09.868
But you can reload an extension
in multiple ways.

00:14:09.868 --> 00:14:11.734
One way is to just create
a new window,

00:14:11.734 --> 00:14:13.167
so I create a new window,

00:14:13.167 --> 00:14:15.400
and you can see
my icon showed up.

00:14:15.400 --> 00:14:19.200
Another way that I like to do
is I just use the console

00:14:19.200 --> 00:14:22.300
and use the JavaScript API
to do a reload.

00:14:22.300 --> 00:14:24.133
So I type location of reload

00:14:24.133 --> 00:14:27.934
and you can see
my toolstrip reloaded.

00:14:34.434 --> 00:14:38.367
So Chrome Extensions
are HTML, CSS, and JavaScript.

00:14:38.367 --> 00:14:41.968
To recap,
extensions are packages,

00:14:41.968 --> 00:14:44.767
zip files basically,
that contain these files.

00:14:44.767 --> 00:14:47.200
Each piece of UI
in your extension,

00:14:47.200 --> 00:14:49.968
such as toolstrips
that I just showed,

00:14:49.968 --> 00:14:51.968
sidebars, when we have those
in the future,

00:14:51.968 --> 00:14:54.968
all of these things are fully
functioning web pages,

00:14:54.968 --> 00:14:57.367
and so they work
exactly the same as web pages.

00:14:57.367 --> 00:14:59.567
You can use
the same debugging tools,

00:14:59.567 --> 00:15:01.634
the same JavaScript libraries,
the same techniques,

00:15:01.634 --> 00:15:03.634
all the CSS hacks that
you've learned over the years

00:15:03.634 --> 00:15:05.234
work exactly the same way.

00:15:05.234 --> 00:15:09.667
And if you prefer to use jQuery,
you can use jQuery.

00:15:09.667 --> 00:15:11.434
It will work the same way.

00:15:11.434 --> 00:15:13.234
If you like Prototype
or MochiKit,

00:15:13.234 --> 00:15:14.634
you can use those.

00:15:14.634 --> 00:15:16.634
They all work the same way
as they do on web pages

00:15:16.634 --> 00:15:19.634
because extensions
really are web pages.

00:15:19.634 --> 00:15:21.234
From the point of view
of the library,

00:15:21.234 --> 00:15:23.667
the library does not even know
that it's in an extension.

00:15:23.667 --> 00:15:26.033
So it's guaranteed to work.

00:15:26.033 --> 00:15:27.634
And just like web pages,

00:15:27.634 --> 00:15:29.634
there's an easy iterative
development cycle

00:15:29.634 --> 00:15:31.033
for extensions.

00:15:31.033 --> 00:15:34.033
All you do is reload
and you see your new content.

00:15:34.033 --> 00:15:38.968
There's no need to restart
or recompile anything.

00:15:38.968 --> 00:15:41.400
Now, you may have noticed
that when I

00:15:41.400 --> 00:15:44.567
put that simple HTML
in my HTML file,

00:15:44.567 --> 00:15:46.701
it did not look
like what you would expect

00:15:46.701 --> 00:15:48.601
if you loaded that into
a normal web page.

00:15:48.601 --> 00:15:50.033
It had a different style.

00:15:50.033 --> 00:15:51.667
It had blue text
instead of black.

00:15:51.667 --> 00:15:55.434
It was arial or sans-serif font
instead of serif.

00:15:55.434 --> 00:15:57.701
It had a blue background,
etcetera.

00:15:57.701 --> 00:15:59.901
The reason that
that happened

00:15:59.901 --> 00:16:02.234
is because we add default CSS
to the extensions

00:16:02.234 --> 00:16:04.834
to make them look good
with the Chrome UI.

00:16:04.834 --> 00:16:06.801
And we do that because,
again,

00:16:06.801 --> 00:16:09.300
one of the things that
we're most proud of in Chrome

00:16:09.300 --> 00:16:10.767
and that we really like

00:16:10.767 --> 00:16:12.767
is that it has this sleek,
modern interface

00:16:12.767 --> 00:16:14.400
and we didn't want extensions
to ruin that.

00:16:14.400 --> 00:16:17.100
We wanted extensions in Chrome

00:16:17.100 --> 00:16:19.634
to still have
that same aesthetic.

00:16:19.634 --> 00:16:20.834
And at the same time,

00:16:20.834 --> 00:16:22.868
we want extensions to be
really easy to write.

00:16:22.868 --> 00:16:25.067
And having every developer
have to worry about

00:16:25.067 --> 00:16:28.234
writing the right CSS
to fit in with Chrome's UI

00:16:28.234 --> 00:16:29.701
seemed really difficult

00:16:29.701 --> 00:16:31.534
and also seems like
it would result in

00:16:31.534 --> 00:16:33.100
everyone doing it
slightly differently...

00:16:33.100 --> 00:16:34.801
which wouldn't look good.

00:16:34.801 --> 00:16:39.033
So we inject this default CSS
into your extension

00:16:39.033 --> 00:16:41.667
so that by default
you don't have to do anything.

00:16:41.667 --> 00:16:43.334
Your extension
will just look good

00:16:43.334 --> 00:16:46.834
and fit in with
the Chrome UI.

00:16:46.834 --> 00:16:49.868
I can show you another
example of how that works.

00:16:49.868 --> 00:16:54.901
We have this...
we have some special CSS classes

00:16:54.901 --> 00:16:57.701
that you can use...

00:16:57.701 --> 00:16:59.300
to get effects

00:16:59.300 --> 00:17:02.968
to make it fit in better
with Chrome's UI.

00:17:06.033 --> 00:17:09.434
And one of them
is this toolstrip button class.

00:17:09.434 --> 00:17:12.901
So I can create a div
with that class name...

00:17:12.901 --> 00:17:15.901
and I'll restart my extension.

00:17:15.901 --> 00:17:17.968
And you can see now
that when I hover over this,

00:17:17.968 --> 00:17:21.267
is has this nice blue
rounded outline.

00:17:21.267 --> 00:17:23.901
The spacing is also
a little bit better.

00:17:23.901 --> 00:17:25.501
And actually,
you might notice

00:17:25.501 --> 00:17:27.701
that it's exactly
the same look and feel

00:17:27.701 --> 00:17:29.400
as the native bookmark buttons.

00:17:29.400 --> 00:17:31.067
So it looks exactly the same.

00:17:31.067 --> 00:17:33.100
You can't even tell
that it's HTML.

00:17:33.100 --> 00:17:35.767
And there's actually
a lot of little details

00:17:35.767 --> 00:17:37.367
that go into doing that.

00:17:37.367 --> 00:17:39.968
The corners of these are rounded
and anti-aliased.

00:17:39.968 --> 00:17:42.767
and there's a faint white
shadow on the blue text.

00:17:42.767 --> 00:17:44.367
And it would be hard
to do this.

00:17:44.367 --> 00:17:45.767
As an extension developer,

00:17:45.767 --> 00:17:47.834
it would take a lot of time
to get it right.

00:17:47.834 --> 00:17:49.634
And if we ever changed
the look of Chrome,

00:17:49.634 --> 00:17:51.567
your extension wouldn't
look right with the new look,

00:17:51.567 --> 00:17:54.400
and so this makes things
really easy.

00:17:54.400 --> 00:17:57.501
You just add this class.
You don't have to write any CSS.

00:17:57.501 --> 00:18:00.367
And your toolstrip
will fit in naturally.

00:18:03.200 --> 00:18:05.033
Another thing
you can do, of course,

00:18:05.033 --> 00:18:07.267
is if you...
what we're trying to do here

00:18:07.267 --> 00:18:08.734
is to make it easy

00:18:08.734 --> 00:18:10.667
to write extensions
that fit in with Chrome's UI

00:18:10.667 --> 00:18:12.300
without doing anything extra.

00:18:12.300 --> 00:18:13.801
But if you want to go
above and beyond

00:18:13.801 --> 00:18:15.367
and you want to do
something crazy,

00:18:15.367 --> 00:18:16.868
you can use the full power
of CSS,

00:18:16.868 --> 00:18:18.634
so you can do
whatever you want.

00:18:18.634 --> 00:18:20.000
If for some reason

00:18:20.000 --> 00:18:21.501
you want to have
an ugly, red background

00:18:21.501 --> 00:18:23.434
for your extension,
you're free to do that.

00:18:23.434 --> 00:18:25.501
We're not gonna
try and stop you.

00:18:25.501 --> 00:18:31.234
You can just add
any CSS you want...

00:18:31.234 --> 00:18:33.000
and you get a red background.

00:18:33.000 --> 00:18:35.234
Very exciting.

00:18:35.234 --> 00:18:37.133
I'm gonna remove that,
'cause it's ugly.

00:18:37.133 --> 00:18:42.467
But you can also do
more interesting things.

00:18:42.467 --> 00:18:45.701
WebKit is the rendering engine
that Chrome uses, of course,

00:18:45.701 --> 00:18:49.133
and WebKit has all these
really cool

00:18:49.133 --> 00:18:51.801
experimental CSS features.

00:18:51.801 --> 00:18:55.567
And some of them are animations,
filters, transformations.

00:18:55.567 --> 00:18:57.734
And you can use all of these
in extensions,

00:18:57.734 --> 00:18:59.400
and they work
exactly the same way

00:18:59.400 --> 00:19:01.567
because, again,
extensions are web pages.

00:19:01.567 --> 00:19:04.234
So I can...this is
a little bit of CSS

00:19:04.234 --> 00:19:06.167
that does a little animation.

00:19:06.167 --> 00:19:08.834
And I can add this
to my extension.

00:19:12.334 --> 00:19:15.100
And now when I start it,
if I hover over it,

00:19:15.100 --> 00:19:17.934
It does a little dance,
very fun.

00:19:17.934 --> 00:19:20.133
Didn't have to write
any JavaScript to do that.

00:19:20.133 --> 00:19:22.434
Just comes for free...

00:19:22.434 --> 00:19:25.100
by way of WebKit's
CSS features.

00:19:25.100 --> 00:19:26.501
So that's fun.

00:19:26.501 --> 00:19:28.501
And this is an example of how,
again,

00:19:28.501 --> 00:19:31.300
using webpage technology
to write extensions

00:19:31.300 --> 00:19:32.701
gives a lot of things
for free.

00:19:32.701 --> 00:19:37.934
Anything that works in web pages
will work in extensions.

00:19:41.267 --> 00:19:44.334
Oops.
[clears throat]

00:19:44.334 --> 00:19:45.968
So another important--

00:19:45.968 --> 00:19:47.601
You're gonna get tired
of hearing me saying,

00:19:47.601 --> 00:19:49.100
"It's just like a web page,"

00:19:49.100 --> 00:19:51.467
but this is something
that we're really excited about.

00:19:51.467 --> 00:19:52.968
So sorry about that.

00:19:52.968 --> 00:19:55.634
Another thing that web page
developers frequently use

00:19:55.634 --> 00:19:57.868
is called XMLHttpRequest.

00:19:57.868 --> 00:19:59.834
If you're a web developer
in the room,

00:19:59.834 --> 00:20:01.667
you probably know
what this does

00:20:01.667 --> 00:20:04.567
but for those who don't,
quick refresher is that

00:20:04.567 --> 00:20:08.133
XMLHttpRequest,
commonly called XHR,

00:20:08.133 --> 00:20:12.400
is basically the most important
API in web browsers today.

00:20:12.400 --> 00:20:15.868
This is the API
that makes it possible

00:20:15.868 --> 00:20:18.467
to do applications
like Gmail, Reader, and Maps.

00:20:18.467 --> 00:20:21.067
And what it allows you to do
as a web developer

00:20:21.067 --> 00:20:23.234
is request more data
from the server

00:20:23.234 --> 00:20:25.133
without reloading the page.

00:20:25.133 --> 00:20:27.434
So all of your applications
that you use,

00:20:27.434 --> 00:20:29.601
like Maps,
when you scroll the map

00:20:29.601 --> 00:20:31.868
and you see more tiles come in
dynamically

00:20:31.868 --> 00:20:33.067
without updating the page,

00:20:33.067 --> 00:20:35.501
this is the API
that makes that possible.

00:20:35.501 --> 00:20:36.901
And so it's very important.

00:20:36.901 --> 00:20:39.801
And since it's part of
a web page

00:20:39.801 --> 00:20:42.067
it of course works
automatically with extensions,

00:20:42.067 --> 00:20:43.501
and it works
exactly the same way.

00:20:43.501 --> 00:20:46.200
And if you use any wrapper
scripts to use XHR, usually,

00:20:46.200 --> 00:20:48.601
those will all work
exactly the same way.

00:20:48.601 --> 00:20:51.067
But we did make
one minor addition

00:20:51.067 --> 00:20:53.300
to XHR for extensions.

00:20:53.300 --> 00:20:55.801
We made it work cross-domain.

00:20:55.801 --> 00:20:59.434
So one of the main limitations
of XHR in regular web pages

00:20:59.434 --> 00:21:01.734
is that it's limited
to the same domain.

00:21:01.734 --> 00:21:03.701
If you serve a page
from google.com,

00:21:03.701 --> 00:21:05.901
you can only request resources
with XHR

00:21:05.901 --> 00:21:07.701
that are also on google.com.

00:21:07.701 --> 00:21:09.734
And this is an important
security limitation.

00:21:09.734 --> 00:21:11.167
It's there on purpose.

00:21:11.167 --> 00:21:13.734
For web pages, you don't want
any random web page

00:21:13.734 --> 00:21:15.834
that you happen
to browse across

00:21:15.834 --> 00:21:18.300
to be able to request
resources

00:21:18.300 --> 00:21:20.133
from gmail.com on your behalf.

00:21:20.133 --> 00:21:21.601
That doesn't make sense.

00:21:21.601 --> 00:21:23.701
But for extensions,
since you install extensions--

00:21:23.701 --> 00:21:25.901
it's a conscious decision
to install an extension--

00:21:25.901 --> 00:21:27.534
it does make sense

00:21:27.534 --> 00:21:29.601
for an extensions to be able
to do things like this.

00:21:29.601 --> 00:21:32.601
And so we enable this so that
extensions can do cool things,

00:21:32.601 --> 00:21:35.200
cool mashups like request data
from different web services

00:21:35.200 --> 00:21:39.767
and combine them and show you
interesting results.

00:21:39.767 --> 00:21:43.367
The way this works is that...

00:21:43.367 --> 00:21:45.000
in an extension,
you have to--

00:21:45.000 --> 00:21:47.167
In a Chrome Extension,
you declare in the manifest

00:21:47.167 --> 00:21:49.334
the domains
that you want to talk to.

00:21:49.334 --> 00:21:51.567
And then cross-origin XHR

00:21:51.567 --> 00:21:53.634
works exactly the same way
as regular XHR,

00:21:53.634 --> 00:21:57.467
and it makes it possible
to request them.

00:21:59.400 --> 00:22:03.968
So I can add this to my
extension that I'm building up.

00:22:07.901 --> 00:22:09.834
And I have some...
the rest of the demos

00:22:09.834 --> 00:22:13.834
in this...presentation...

00:22:13.834 --> 00:22:16.834
some of them I'm gonna use
pre-written code.

00:22:16.834 --> 00:22:18.434
The main reason
I'm doing this

00:22:18.434 --> 00:22:20.834
is just because the code
is pretty straightforward

00:22:20.834 --> 00:22:22.834
and it would be boring
for both of us,

00:22:22.834 --> 00:22:24.834
for me to sit here
and write it in front of you.

00:22:24.834 --> 00:22:27.434
So when the code is small
and I can write it live,

00:22:27.434 --> 00:22:28.634
I'll do that.

00:22:28.634 --> 00:22:30.567
But in this case,
there's about 20 lines,

00:22:30.567 --> 00:22:32.667
and I didn't want to do that
while you were sitting here.

00:22:32.667 --> 00:22:34.033
But there's no fooling here.

00:22:34.033 --> 00:22:36.000
I hope you can see that
this is pretty straightforward

00:22:36.000 --> 00:22:37.634
AJAX JavaScript code,

00:22:37.634 --> 00:22:41.234
and it works exactly
the same way as web pages.

00:22:41.234 --> 00:22:44.834
So what this code
is gonna do is...

00:22:44.834 --> 00:22:49.834
it's gonna hook my extension
up to the Google Reader API.

00:22:49.834 --> 00:22:51.234
And what I'm gonna do is

00:22:51.234 --> 00:22:53.834
right now my extension
just has this static text

00:22:53.834 --> 00:22:55.367
that says "oh, hai."

00:22:55.367 --> 00:22:57.100
But I'm gonna change it

00:22:57.100 --> 00:22:59.000
so that it connects
to the Google Reader API

00:22:59.000 --> 00:23:00.434
and figures out
how many items

00:23:00.434 --> 00:23:02.100
I have unread
in my reading list.

00:23:02.100 --> 00:23:04.501
And once it gets the number
of unread items,

00:23:04.501 --> 00:23:07.100
it's gonna update
my toolstrip,

00:23:07.100 --> 00:23:08.501
the display on my toolstrip,

00:23:08.501 --> 00:23:10.100
and show the number
of unread items.

00:23:10.100 --> 00:23:11.834
And so I will always know
at all times

00:23:11.834 --> 00:23:13.534
how many things
I'm waiting to read

00:23:13.534 --> 00:23:15.000
that need to be read
in Google Reader,

00:23:15.000 --> 00:23:16.501
which seems very useful.

00:23:16.501 --> 00:23:20.501
Um...

00:23:20.501 --> 00:23:22.901
one thing I want to call out
about this code, actually,

00:23:22.901 --> 00:23:24.300
before I paste it in.

00:23:24.300 --> 00:23:26.300
You may notice
that I'm using JSON here,

00:23:26.300 --> 00:23:29.100
but there's no JSON library
in this code.

00:23:29.100 --> 00:23:31.501
And the reason why
is because the V.18

00:23:31.501 --> 00:23:35.701
has recently added
native JSON to V8,

00:23:35.701 --> 00:23:39.133
so you no longer need to include
a JSON library in Chrome,

00:23:39.133 --> 00:23:40.501
which is very cool.

00:23:40.501 --> 00:23:42.901
And it's using a safe parser,

00:23:42.901 --> 00:23:47.100
so there's
no eval happening here.

00:23:47.100 --> 00:23:48.901
So the first thing
I'm gonna do

00:23:48.901 --> 00:23:50.334
is update my manifest

00:23:50.334 --> 00:23:54.367
to include the domain
that I want to talk to.

00:23:57.601 --> 00:23:59.801
So I tell it that I want
to talk to google.com

00:23:59.801 --> 00:24:03.934
because the Reader API
lives on google.com.

00:24:03.934 --> 00:24:07.167
And the next thing
I'm gonna do is...

00:24:07.167 --> 00:24:12.067
update my code
to call the Reader API.

00:24:12.067 --> 00:24:15.100
Oh, also I'll take out
this animation.

00:24:15.100 --> 00:24:17.501
Very fun but...

00:24:21.767 --> 00:24:24.167
Okay...oh, one last thing.

00:24:24.167 --> 00:24:25.934
I need to take out
my static text

00:24:25.934 --> 00:24:29.167
and put in a place holder.

00:24:31.367 --> 00:24:33.501
So you can see that
when the API call comes back,

00:24:33.501 --> 00:24:35.334
it's gonna call setCount,

00:24:35.334 --> 00:24:37.567
and setCount
will update the spam

00:24:37.567 --> 00:24:39.567
that has the unread-count ID

00:24:39.567 --> 00:24:42.334
with the number of items
in my...

00:24:42.334 --> 00:24:43.834
in my reading list.

00:24:43.834 --> 00:24:45.534
Make sure
that I spelled it right.

00:24:45.534 --> 00:24:48.567
Good. So now...

00:24:48.567 --> 00:24:50.567
I again restart my extension.

00:24:50.567 --> 00:24:53.701
Aha! I have 607 items to read.

00:24:53.701 --> 00:24:55.334
So...that's useful.

00:24:55.334 --> 00:24:57.767
It would be more useful if
I could actually click on this

00:24:57.767 --> 00:24:59.567
and have it do something.

00:24:59.567 --> 00:25:01.100
Right now I just have to know
to go to reader.google.

00:25:01.100 --> 00:25:02.567
That's not very good.

00:25:02.567 --> 00:25:04.834
So I can just fix that
really quick

00:25:04.834 --> 00:25:08.367
by just using regular
JavaScript.

00:25:17.667 --> 00:25:19.901
So start it up again.
I click on it.

00:25:19.901 --> 00:25:22.634
Hooray! Now I can go to Reader
and read the stuff.

00:25:22.634 --> 00:25:27.834
[applause]

00:25:27.834 --> 00:25:30.033
Now we're getting somewhere.

00:25:30.033 --> 00:25:33.234
We have a quicker way
to access time wasting.

00:25:33.234 --> 00:25:35.834
So, good.
[laughter]

00:25:35.834 --> 00:25:39.234
Um...

00:25:39.234 --> 00:25:42.400
So what else can you do?

00:25:42.400 --> 00:25:44.601
Well, a frequent thing

00:25:44.601 --> 00:25:48.267
that extension developers
want to do is store things.

00:25:48.267 --> 00:25:50.000
Imagine that your extension
has settings,

00:25:50.000 --> 00:25:51.968
and there's all these
different settings

00:25:51.968 --> 00:25:53.300
that you can choose

00:25:53.300 --> 00:25:55.334
about what things show up
in the extension.

00:25:55.334 --> 00:25:57.334
You would need to store these
in the extension

00:25:57.334 --> 00:25:58.667
when a user changes them

00:25:58.667 --> 00:26:00.267
so that the next time
your extension starts up,

00:26:00.267 --> 00:26:04.267
you can change the UI
in the right way.

00:26:04.267 --> 00:26:06.901
Now...one thing
that we could do

00:26:06.901 --> 00:26:09.868
in the design
of the extension system

00:26:09.868 --> 00:26:11.934
is to add a settings API

00:26:11.934 --> 00:26:14.801
that you could use
to store these things.

00:26:14.801 --> 00:26:16.200
And that would work.

00:26:16.200 --> 00:26:18.267
But what we realized
is that HTML5,

00:26:18.267 --> 00:26:21.033
the new version of HTML already
has a local storage API.

00:26:21.033 --> 00:26:24.300
It actually has two.
So...

00:26:24.300 --> 00:26:26.067
so there's no need
to add a settings API

00:26:26.067 --> 00:26:27.667
for Chrome Extensions,

00:26:27.667 --> 00:26:30.200
and we can just reuse the one
that's an HTML5.

00:26:30.200 --> 00:26:32.300
So this local storage
is not yet

00:26:32.300 --> 00:26:34.200
completely implemented
in Chrome.

00:26:34.200 --> 00:26:35.567
There's a team working on it.

00:26:35.567 --> 00:26:36.901
But when it shows up,

00:26:36.901 --> 00:26:39.100
you'll be able to use it
in extensions

00:26:39.100 --> 00:26:41.100
exactly the same way
as you use it in web pages.

00:26:41.100 --> 00:26:43.300
And so if you already know
how to use this API

00:26:43.300 --> 00:26:46.300
from experience with
other browsers that have it,

00:26:46.300 --> 00:26:48.100
you won't have to learn
anything new

00:26:48.100 --> 00:26:49.400
to use it in extensions.

00:26:49.400 --> 00:26:50.701
And if you've never
used it before

00:26:50.701 --> 00:26:52.300
and you learn it
for extensions,

00:26:52.300 --> 00:26:54.100
then it will just work
automatically with web pages.

00:26:54.100 --> 00:26:56.701
You'll be able to reuse
that knowledge in web pages

00:26:56.701 --> 00:26:58.701
all the time.

00:26:58.701 --> 00:26:59.901
And this is another example

00:26:59.901 --> 00:27:02.167
of why it's a cool idea,
I think,

00:27:02.167 --> 00:27:05.968
to use web page technology
for the extension system,

00:27:05.968 --> 00:27:08.734
because the web
is currently in a period

00:27:08.734 --> 00:27:10.300
where it's evolving
very rapidly.

00:27:10.300 --> 00:27:12.167
All the browser vendors
are doing great work

00:27:12.167 --> 00:27:13.834
and pushing things forward.

00:27:13.834 --> 00:27:15.167
And every time one of these
new features

00:27:15.167 --> 00:27:16.868
shows up in Chrome
for web pages,

00:27:16.868 --> 00:27:18.701
it will just automatically
show up for extensions,

00:27:18.701 --> 00:27:21.167
and it makes my job
a lot easier

00:27:21.167 --> 00:27:26.467
because there's
less work to do.

00:27:26.467 --> 00:27:29.367
Now, there are some APIs,
some features

00:27:29.367 --> 00:27:31.767
that we want to enable
extension developers to do

00:27:31.767 --> 00:27:35.434
that are not
part of HTML or CSS.

00:27:35.434 --> 00:27:37.000
Mostly, these revolve around

00:27:37.000 --> 00:27:39.033
things that we want extensions
to be able to control

00:27:39.033 --> 00:27:40.467
in the browser.

00:27:40.467 --> 00:27:42.467
So we want extensions to be able
to control the history system,

00:27:42.467 --> 00:27:45.434
the bookmark system,
the tabs and window system,

00:27:45.434 --> 00:27:47.267
to interact
with the omnibox.

00:27:47.267 --> 00:27:50.634
And all these features
don't really make sense

00:27:50.634 --> 00:27:52.200
to thumb through HTML,

00:27:52.200 --> 00:27:54.367
because they have
nothing to do with HTML,

00:27:54.367 --> 00:27:56.968
and they would be unlikely
to ever be standardized,

00:27:56.968 --> 00:27:58.801
so it doesn't make sense
to do that.

00:27:58.801 --> 00:28:01.634
And so we've added
extension browser APIs

00:28:01.634 --> 00:28:05.734
that you can access
when you're in an extension.

00:28:05.734 --> 00:28:07.734
And our philosophy
with these APIs

00:28:07.734 --> 00:28:09.934
is around two main points--

00:28:09.934 --> 00:28:11.400
that they should be
narrow and webby.

00:28:11.400 --> 00:28:13.467
What I mean by narrow is

00:28:13.467 --> 00:28:17.400
when you design an extension
system for a product,

00:28:17.400 --> 00:28:19.801
you have to make one
decision early on,

00:28:19.801 --> 00:28:21.434
one really important decision
which is

00:28:21.434 --> 00:28:23.934
how wide your
API surface area will be.

00:28:23.934 --> 00:28:26.133
How much functionality
will you expose?

00:28:26.133 --> 00:28:29.367
One approach
is that you just expose

00:28:29.367 --> 00:28:32.300
all of the internal functions
that make your product work

00:28:32.300 --> 00:28:33.868
directly to extensions.

00:28:33.868 --> 00:28:35.701
And that works really great.

00:28:35.701 --> 00:28:38.200
It has a lot of upsides
because it means

00:28:38.200 --> 00:28:40.501
that your extension system
will be very powerful.

00:28:40.501 --> 00:28:42.467
And it will have a lot of APIs.

00:28:42.467 --> 00:28:44.834
Because everything that you use
to build the product

00:28:44.834 --> 00:28:46.968
is automatically available
to extension developers,

00:28:46.968 --> 00:28:48.501
and so extension developers

00:28:48.501 --> 00:28:50.400
will be able to do
all those things too.

00:28:50.400 --> 00:28:52.534
And...that's good,

00:28:52.534 --> 00:28:55.200
But it also has a downside,
and the downside is that

00:28:55.200 --> 00:28:57.934
if you ever change the way
your product is implemented,

00:28:57.934 --> 00:29:00.067
you change
those internal functions.

00:29:00.067 --> 00:29:02.567
You automatically break the
extensions that were using it,

00:29:02.567 --> 00:29:04.601
and that's bad.

00:29:04.601 --> 00:29:07.667
And so in Chrome,
what we decided to do

00:29:07.667 --> 00:29:10.000
is instead do narrow APIs.

00:29:10.000 --> 00:29:12.934
So we go through each of
the major subsystems of Chrome

00:29:12.934 --> 00:29:14.334
that we want to allow

00:29:14.334 --> 00:29:16.300
extension developers
to interact with,

00:29:16.300 --> 00:29:18.367
and we look at them
and we try and decide

00:29:18.367 --> 00:29:20.234
what would be
an interesting API for this?

00:29:20.234 --> 00:29:22.067
And we design them
specifically,

00:29:22.067 --> 00:29:25.634
and the advantage of that
is that...

00:29:25.634 --> 00:29:27.400
we can commit
to supporting these.

00:29:27.400 --> 00:29:29.234
So we will never
have to, hopefully,

00:29:29.234 --> 00:29:31.234
turn off extensions,
disable them,

00:29:31.234 --> 00:29:32.901
because a future version
of Chrome

00:29:32.901 --> 00:29:34.801
doesn't support the APIs
that they use.

00:29:34.801 --> 00:29:36.400
We can commit to supporting
these APIs forever

00:29:36.400 --> 00:29:37.834
because they're not just things

00:29:37.834 --> 00:29:39.934
that are part of our
implementation internally.

00:29:39.934 --> 00:29:45.000
They're things that we
explicitly decided to expose.

00:29:45.000 --> 00:29:47.100
Another advantage
of the narrow APIs

00:29:47.100 --> 00:29:48.968
is that
we get to design them.

00:29:48.968 --> 00:29:50.834
If you just expose
all of your internal functions

00:29:50.834 --> 00:29:52.467
directly
to extension developers,

00:29:52.467 --> 00:29:53.834
they just get the interfaces,

00:29:53.834 --> 00:29:55.334
whatever internal functions
you use,

00:29:55.334 --> 00:29:57.501
and a lot of times, internal
code isn't really designed

00:29:57.501 --> 00:29:59.000
to be really nice
and really easy to use

00:29:59.000 --> 00:30:00.334
because it doesn't
really matter

00:30:00.334 --> 00:30:02.334
because it's only used
by the product team.

00:30:02.334 --> 00:30:04.501
But we wanted
our extension system

00:30:04.501 --> 00:30:07.400
to be really easy to use,
really accessible to developers,

00:30:07.400 --> 00:30:10.367
especially web developers,
and we wanted it to be webby.

00:30:10.367 --> 00:30:13.133
We wanted it to feel like
it fit in with the web platform.

00:30:13.133 --> 00:30:14.801
And so doing narrow APIs

00:30:14.801 --> 00:30:16.400
gives us an opportunity
to do this.

00:30:16.400 --> 00:30:17.901
We can design these things

00:30:17.901 --> 00:30:21.634
in a way that we think
makes sense to web developers.

00:30:26.067 --> 00:30:29.734
So...I got a few demos
about browser APIs.

00:30:29.734 --> 00:30:32.501
First, I'm just gonna do
a really quick one

00:30:32.501 --> 00:30:34.701
that isn't terribly useful

00:30:34.701 --> 00:30:39.100
but will give you a feel
for how it works.

00:30:39.100 --> 00:30:45.901
We'll create a bookmark
in the toolbar.

00:30:45.901 --> 00:30:52.367
So I'll call it
chrome.bookmarks.create.

00:30:52.367 --> 00:30:56.701
And its URL would be...
I don't know.

00:30:56.701 --> 00:30:58.901
What's a good site?

00:30:58.901 --> 00:31:03.868
Um...

00:31:03.868 --> 00:31:08.968
And parentID is the level
in the bookmark's hierarchy

00:31:08.968 --> 00:31:10.567
that we want the bookmark
to show up in,

00:31:10.567 --> 00:31:11.934
and I just happen to know

00:31:11.934 --> 00:31:13.767
that the parentID
of the toolstrip is 1.

00:31:13.767 --> 00:31:15.667
Or the bookmarks bar is 1.

00:31:15.667 --> 00:31:18.100
But you can also discover this
through the API

00:31:18.100 --> 00:31:21.367
with a few more lines of code.

00:31:21.367 --> 00:31:23.968
And so with just that one
line of code,

00:31:23.968 --> 00:31:27.767
I'm gonna add a bookmark
to the bookmark bar.

00:31:27.767 --> 00:31:31.067
So I restart my extension,
and there we go.

00:31:31.067 --> 00:31:33.400
Hooray.

00:31:35.701 --> 00:31:38.467
Now, that's not
terribly interesting.

00:31:38.467 --> 00:31:42.167
What if, instead,
we add one bookmark

00:31:42.167 --> 00:31:44.367
for every item that
I'm subscribed to in Reader?

00:31:44.367 --> 00:31:46.367
So we contact the Reader API,

00:31:46.367 --> 00:31:48.367
find all the feeds
that I'm subscribed to,

00:31:48.367 --> 00:31:50.167
and add a bookmark
for each one of those.

00:31:50.167 --> 00:31:52.167
That seems at least
somewhat useful,

00:31:52.167 --> 00:31:54.133
and that way,
if I really feel like reading

00:31:54.133 --> 00:31:55.767
one particular feed,

00:31:55.767 --> 00:31:59.968
I'll have a quick way
to access it.

00:31:59.968 --> 00:32:02.234
So I have some code
for that.

00:32:02.234 --> 00:32:04.434
And again, you can see
this is pretty short,

00:32:04.434 --> 00:32:07.033
about 65 lines of
pretty typical JavaScript.

00:32:07.033 --> 00:32:10.434
What it's gonna do is,
first step,

00:32:10.434 --> 00:32:12.634
it's gonna get the entire
hierarchy of bookmarks

00:32:12.634 --> 00:32:14.634
from the bookmark system.

00:32:14.634 --> 00:32:16.434
We're gonna put
all of the feed--

00:32:16.434 --> 00:32:19.033
all of the bookmarks
in one folder.

00:32:19.033 --> 00:32:20.434
So first we look for
that folder

00:32:20.434 --> 00:32:22.234
and see if it already
exists.

00:32:22.234 --> 00:32:24.234
And if it does,
we remove it.

00:32:24.234 --> 00:32:27.267
And then we create
a new folder.

00:32:27.267 --> 00:32:29.567
And then we fetch the feeds
that I'm subscribed to

00:32:29.567 --> 00:32:32.067
from Reader,
and then once we get the feeds,

00:32:32.067 --> 00:32:33.834
we parse the JSON.

00:32:33.834 --> 00:32:35.901
And then for each feed
that I'm subscribed to,

00:32:35.901 --> 00:32:38.467
create a bookmark
in the folder.

00:32:41.033 --> 00:32:44.767
So I'll paste this code
into my toolstrip.

00:32:54.634 --> 00:32:58.767
Once again,
I will start up Chrome.

00:33:01.300 --> 00:33:03.100
And there it is.

00:33:03.100 --> 00:33:07.067
So now I have this feeds folder,
and inside each one I have--

00:33:07.067 --> 00:33:09.734
In this account, I'm only
subscribed to two feeds.

00:33:09.734 --> 00:33:15.234
But if it was real life,
it would have a lot more.

00:33:15.234 --> 00:33:17.367
So that's cool.

00:33:21.334 --> 00:33:22.934
Now, the browser APIs,

00:33:22.934 --> 00:33:25.367
there's an obvious tradeoff
here with going with narrow.

00:33:25.367 --> 00:33:28.167
Obviously, it means
that we'll have less APIs

00:33:28.167 --> 00:33:32.033
than a system
that uses a wide approach.

00:33:32.033 --> 00:33:34.567
So that means that we're gonna
have to be really responsive

00:33:34.567 --> 00:33:37.634
to the development community
and listen very carefully

00:33:37.634 --> 00:33:42.033
and build things
that people need.

00:33:42.033 --> 00:33:44.501
As to the exact list,
we don't know yet.

00:33:44.501 --> 00:33:46.100
The list is to be determined.

00:33:46.100 --> 00:33:48.567
This is an area
that we're actively working on.

00:33:48.567 --> 00:33:52.067
And so it's still up in the air.

00:33:52.067 --> 00:33:54.901
But obviously, we want the
extension system to be powerful.

00:33:54.901 --> 00:33:56.234
We want people
to be able to do

00:33:56.234 --> 00:33:58.067
everything
that they want to do with it,

00:33:58.067 --> 00:33:59.968
and so there will be probably

00:33:59.968 --> 00:34:03.300
a pretty big list of these APIs
that we'll build out.

00:34:03.300 --> 00:34:05.934
And...so if you don't--

00:34:05.934 --> 00:34:08.234
obviously, the items on here
is very short,

00:34:08.234 --> 00:34:10.634
but if you don't see us
working on an API that you want,

00:34:10.634 --> 00:34:11.801
definitely let us know.

00:34:11.801 --> 00:34:13.267
Contact us
on Chromium-discuss,

00:34:13.267 --> 00:34:15.234
because we know that this is
one of the parts of the system

00:34:15.234 --> 00:34:17.567
that we need to listen
very carefully about

00:34:17.567 --> 00:34:19.367
and so we want to hear
your feedback

00:34:19.367 --> 00:34:21.567
about what APIs
you want to see.

00:34:21.567 --> 00:34:24.267
And further, if you're
interested in working on Chrome,

00:34:24.267 --> 00:34:27.501
if you're a C++ guy and you
wanna work on Google Chrome,

00:34:27.501 --> 00:34:28.968
it is an open source project,

00:34:28.968 --> 00:34:30.567
and this is an area in which

00:34:30.567 --> 00:34:32.968
it's very easy for people
to come and join and help

00:34:32.968 --> 00:34:35.567
because it's easy
to split these things up

00:34:35.567 --> 00:34:37.567
and have people
working on different ones

00:34:37.567 --> 00:34:40.934
without stepping on each other.

00:34:49.968 --> 00:34:52.033
So the second cool thing,
I think,

00:34:52.033 --> 00:34:53.567
about the extension system,

00:34:53.567 --> 00:34:54.968
the design
of the extension system,

00:34:54.968 --> 00:34:57.100
is its process model.

00:34:57.100 --> 00:35:00.067
As you might recall,
Chrome is multiprocess.

00:35:00.067 --> 00:35:04.100
It's one of the really cool
things about Chrome,

00:35:04.100 --> 00:35:05.901
the really innovative things,

00:35:05.901 --> 00:35:08.400
and one of
the key features of it.

00:35:08.400 --> 00:35:10.067
And just as a refresher,

00:35:10.067 --> 00:35:11.968
there's a lot of reasons
to do this,

00:35:11.968 --> 00:35:14.234
but mostly the reason
why Chrome is multiprocess

00:35:14.234 --> 00:35:16.834
is because web pages are
becoming more and more advanced,

00:35:16.834 --> 00:35:18.334
more and more complicated,

00:35:18.334 --> 00:35:20.234
and they become
a lot like applications.

00:35:20.234 --> 00:35:21.734
And so just like applications,

00:35:21.734 --> 00:35:23.601
it makes sense to run them
in separate processes

00:35:23.601 --> 00:35:25.334
to protect them
from each other.

00:35:25.334 --> 00:35:26.601
So if one web page crashes,

00:35:26.601 --> 00:35:27.934
it doesn't crash
the other web pages.

00:35:27.934 --> 00:35:29.334
It doesn't crash the browser.

00:35:29.334 --> 00:35:30.534
If a plugin crashes,

00:35:30.534 --> 00:35:32.000
it doesn't crash the browser,
etcetera.

00:35:32.000 --> 00:35:33.634
It just makes sense.

00:35:33.634 --> 00:35:35.634
There's also
security benefits for it.

00:35:35.634 --> 00:35:37.033
It turns out
it doesn't require

00:35:37.033 --> 00:35:39.033
a lot of operating
system permissions

00:35:39.033 --> 00:35:40.567
to render a web page.

00:35:40.567 --> 00:35:41.968
You don't really require
disc access,

00:35:41.968 --> 00:35:43.567
you don't really
require network access,

00:35:43.567 --> 00:35:44.934
all those things can be
abstracted away.

00:35:44.934 --> 00:35:46.968
And so you can lock down
the processes

00:35:46.968 --> 00:35:48.200
that render web pages

00:35:48.200 --> 00:35:50.601
so that they don't have
any capabilities.

00:35:50.601 --> 00:35:52.000
And what that means
is that

00:35:52.000 --> 00:35:54.167
if a web page process
is compromised,

00:35:54.167 --> 00:35:57.367
it can only get the permissions
that the original process had.

00:35:57.367 --> 00:36:01.400
So you kind of contain
exploits that way.

00:36:01.400 --> 00:36:03.133
It also sort of
counter-intuitively

00:36:03.133 --> 00:36:05.067
leads to better
resource allocation.

00:36:05.067 --> 00:36:06.534
Even though
a multiprocess browser

00:36:06.534 --> 00:36:08.701
obviously requires
a little bit more resources,

00:36:08.701 --> 00:36:11.901
it turns out that you get
better utilization,

00:36:11.901 --> 00:36:13.901
because the operating system
is very good

00:36:13.901 --> 00:36:16.701
at sharing resources fairly
amongst processes.

00:36:16.701 --> 00:36:19.300
So if you have one web page
that's using a lot of CPU

00:36:19.300 --> 00:36:20.901
or using a lot of memory,

00:36:20.901 --> 00:36:23.100
it's okay because
most modern browser--

00:36:23.100 --> 00:36:26.067
most modern operating systems
are very good at making sure

00:36:26.067 --> 00:36:30.501
that all processes get
a fair access to the resources.

00:36:30.501 --> 00:36:33.367
So extensions are multiprocess
for the exact same reason

00:36:33.367 --> 00:36:35.300
or the exact same reasons.

00:36:35.300 --> 00:36:37.767
Every extension in Chrome
has its own process,

00:36:37.767 --> 00:36:40.067
and you get
the same benefits.

00:36:40.067 --> 00:36:42.167
Extensions
can't crash each other,

00:36:42.167 --> 00:36:44.834
they can't crash the browser,
they can't crash web pages.

00:36:44.834 --> 00:36:48.634
If an extension is exploited,
the exploits are contained

00:36:48.634 --> 00:36:51.701
and the malicious code only
gets access to the permissions

00:36:51.701 --> 00:36:53.701
that the extension had itself,

00:36:53.701 --> 00:36:55.501
and you get
better resource sharing.

00:36:55.501 --> 00:36:58.033
So if an extension
is being badly behaved

00:36:58.033 --> 00:37:00.567
and using a lot of CPU,
using a lot of memory,

00:37:00.567 --> 00:37:02.534
it doesn't really affect
the rest of the browser

00:37:02.534 --> 00:37:03.968
or the web pages

00:37:03.968 --> 00:37:09.634
because the operating system
can share resources fairly.

00:37:09.634 --> 00:37:12.601
Now, inside one of these
extension processes,

00:37:12.601 --> 00:37:15.200
again, you have
multiple web pages.

00:37:15.200 --> 00:37:16.934
Because every part
of an extension

00:37:16.934 --> 00:37:18.767
is basically a web page.

00:37:18.767 --> 00:37:21.834
So you can imagine that...
I showed you toolstrips.

00:37:21.834 --> 00:37:23.901
An extension can have
multiple toolstrips.

00:37:23.901 --> 00:37:26.367
It could have a sidebar.
The sidebar would be a web page.

00:37:26.367 --> 00:37:28.868
You can open pop-up windows
in an extension,

00:37:28.868 --> 00:37:30.868
and those could be
web pages.

00:37:30.868 --> 00:37:33.200
You could have HTML
in the main tab area,

00:37:33.200 --> 00:37:35.467
which would, of course,
be a web page, and so on.

00:37:35.467 --> 00:37:37.834
So you can imagine,
a typical extension's

00:37:37.834 --> 00:37:40.734
gonna end up with many
web pages running in it.

00:37:40.734 --> 00:37:43.667
And additionally, if you have
multiple browser windows,

00:37:43.667 --> 00:37:45.767
every browser window's
gonna get its full complement

00:37:45.767 --> 00:37:48.601
of web pages
from each extension.

00:37:48.601 --> 00:37:53.167
And this might seem like it
would lead to slow performance,

00:37:53.167 --> 00:37:56.767
but remember that Chrome is,
like most modern browsers,

00:37:56.767 --> 00:37:59.634
is optimized to run many
web pages at once.

00:37:59.634 --> 00:38:02.634
Users of Chrome typically have
20, 30 tabs open at a time,

00:38:02.634 --> 00:38:05.934
and so having a few extra
pages open

00:38:05.934 --> 00:38:08.434
for an extension running
is not really that big a deal

00:38:08.434 --> 00:38:13.701
and it's something that
Chrome's already optimized for.

00:38:15.734 --> 00:38:18.901
Now...having
all these web pages

00:38:18.901 --> 00:38:21.467
as part of your extension
running at the same time

00:38:21.467 --> 00:38:24.567
leads naturally to the question
of how they can communicate.

00:38:24.567 --> 00:38:26.634
For example, going back
to the settings example,

00:38:26.634 --> 00:38:31.067
say you have the settings UI
where you...

00:38:31.067 --> 00:38:32.968
users get to choose
all the various settings

00:38:32.968 --> 00:38:34.033
for your extension,

00:38:34.033 --> 00:38:35.667
when a setting has changed,

00:38:35.667 --> 00:38:37.934
you probably want to tell
all the parts of your extension

00:38:37.934 --> 00:38:39.267
that the setting changed

00:38:39.267 --> 00:38:41.567
so they can update
their display.

00:38:41.567 --> 00:38:44.200
Now, if you've ever
used IFrames in a web page,

00:38:44.200 --> 00:38:46.234
you're familiar with the kind
of communication

00:38:46.234 --> 00:38:48.267
that we allow in extensions.

00:38:48.267 --> 00:38:50.734
When you use an IFrame,

00:38:50.734 --> 00:38:53.434
you can just call functions
directly inside that frame,

00:38:53.434 --> 00:38:55.334
assuming the frame
is in the same origin.

00:38:55.334 --> 00:38:57.634
And that's exactly the same way
it works in extensions.

00:38:57.634 --> 00:38:59.234
You can get a reference

00:38:59.234 --> 00:39:01.434
to all the different web pages
in your extension at any time,

00:39:01.434 --> 00:39:03.367
and you can just call
functions on them.

00:39:03.367 --> 00:39:06.501
So it works exactly
the same way as frames.

00:39:06.501 --> 00:39:09.634
I can--I have a sample of this.

00:39:12.567 --> 00:39:14.100
I have this configuration page

00:39:14.100 --> 00:39:17.501
that I'm gonna add
to my extension.

00:39:24.701 --> 00:39:26.901
And you can see that
it's a very simple web page.

00:39:26.901 --> 00:39:28.534
It just has one checkbox,

00:39:28.534 --> 00:39:30.567
and what this checkbox
is gonna do

00:39:30.567 --> 00:39:33.100
is when it's checked,
it's gonna show

00:39:33.100 --> 00:39:37.334
the number of unread items
in my reading list,

00:39:37.334 --> 00:39:39.300
and when it's unchecked,
it won't show them.

00:39:39.300 --> 00:39:41.300
So maybe this is useful
if people want to save space

00:39:41.300 --> 00:39:44.100
in their toolstrip or something.

00:39:44.100 --> 00:39:46.534
And you can see it works
just like a regular web page.

00:39:46.534 --> 00:39:48.100
There's an onchange
event handler.

00:39:48.100 --> 00:39:51.901
It calls this function,
and here's the interesting part.

00:39:51.901 --> 00:39:55.100
It calls chrome.self.getViews,
which gets a reference

00:39:55.100 --> 00:39:57.567
to all the pages
that are part of your extension.

00:39:57.567 --> 00:39:59.701
And it iterates through them.

00:39:59.701 --> 00:40:03.701
And...for each one,
it looks to see if it has

00:40:03.701 --> 00:40:05.901
that unread count span
that we added

00:40:05.901 --> 00:40:07.901
which would mean
it's a toolstrip.

00:40:07.901 --> 00:40:09.901
And if it is a toolstrip,

00:40:09.901 --> 00:40:11.901
then it sets the visibility
of that span,

00:40:11.901 --> 00:40:14.701
depending on whether
the checkmark is checked or not.

00:40:14.701 --> 00:40:16.701
So this is useful.

00:40:16.701 --> 00:40:21.701
So again,
I'll restart my extension.

00:40:21.701 --> 00:40:25.501
And you could, of course,
add UI to your extension

00:40:25.501 --> 00:40:27.467
to access
the configuration page.

00:40:27.467 --> 00:40:29.133
But I'm just,
for expediency,

00:40:29.133 --> 00:40:31.534
gonna type in the URL
directly.

00:40:31.534 --> 00:40:34.901
Every--

00:40:34.901 --> 00:40:36.567
Since extensions
are web pages,

00:40:36.567 --> 00:40:38.567
they have a URL,

00:40:38.567 --> 00:40:41.200
and it works exactly
the same way as regular URLs.

00:40:41.200 --> 00:40:44.067
And this long number here
is the extension's unique ID.

00:40:44.067 --> 00:40:46.501
And since I'm in development
mode right now,

00:40:46.501 --> 00:40:47.801
these IDs are just--

00:40:47.801 --> 00:40:49.400
they're just incrementing
numbers,

00:40:49.400 --> 00:40:51.701
so the first one is zero,
the second one's one, etcetera,

00:40:51.701 --> 00:40:53.901
just to explain what that is.

00:40:53.901 --> 00:40:56.501
And...so I have
my settings here,

00:40:56.501 --> 00:40:58.701
all my complex settings.

00:40:58.701 --> 00:41:00.000
And if I check this thing,

00:41:00.000 --> 00:41:02.501
you can see
that number goes away...

00:41:02.501 --> 00:41:05.000
comes back, and...

00:41:05.000 --> 00:41:08.567
if I had multiple
of these pages open...

00:41:08.567 --> 00:41:12.100
I don't know if I can fit...
let's see.

00:41:15.801 --> 00:41:17.601
Yeah. So now I have
three of these open,

00:41:17.601 --> 00:41:20.667
and you can see
they all come and go.

00:41:20.667 --> 00:41:28.000
So this is how communication
works inside of an extension.

00:41:28.000 --> 00:41:31.200
Now, some of you
may be thinking, that's cool,

00:41:31.200 --> 00:41:33.167
you can communicate
between pages.

00:41:33.167 --> 00:41:37.200
But if you've worked on
other systems like this before,

00:41:37.200 --> 00:41:39.801
you may be wondering--like
it would be really confusing

00:41:39.801 --> 00:41:41.968
to have all of these web pages
coming and going all the time

00:41:41.968 --> 00:41:44.133
whenever browser windows
open and close

00:41:44.133 --> 00:41:45.968
and whatever sidebars
open and close,

00:41:45.968 --> 00:41:47.701
and you have all this code
running all over the place,

00:41:47.701 --> 00:41:49.067
but there's no one in charge.

00:41:49.067 --> 00:41:50.167
There's no chunk of code

00:41:50.167 --> 00:41:51.567
that's in charge
of the entire extension.

00:41:51.567 --> 00:41:53.934
So it becomes a little bit
like distributed programming,

00:41:53.934 --> 00:41:56.701
because you have to manage
all these peers

00:41:56.701 --> 00:42:01.434
and get them to...
cooperate.

00:42:01.434 --> 00:42:02.834
And that can be really hard,

00:42:02.834 --> 00:42:04.467
and it's a frustrating way
to program.

00:42:04.467 --> 00:42:06.501
And it would be
much more easy

00:42:06.501 --> 00:42:09.200
if there was a single place
that you could run code

00:42:09.200 --> 00:42:10.634
in your extension

00:42:10.634 --> 00:42:12.901
that would exist for the entire
lifetime of the extension

00:42:12.901 --> 00:42:15.834
and wouldn't be attached
to any particular window.

00:42:15.834 --> 00:42:18.033
Oops.
And...yeah?

00:42:18.033 --> 00:42:21.234
[man speaking indistinctly]

00:42:21.234 --> 00:42:23.767
Goodman: Yeah.
It...yeah.

00:42:23.767 --> 00:42:26.200
Except for the--
the question is

00:42:26.200 --> 00:42:27.767
is there a same origin
restriction

00:42:27.767 --> 00:42:31.133
on the web pages
inside Chrome Extensions?

00:42:31.133 --> 00:42:34.000
And the answer is, yes,
the same origin policy applies

00:42:34.000 --> 00:42:38.667
except for
the cross-origin XHR.

00:42:38.667 --> 00:42:41.467
So...for this exact reason,

00:42:41.467 --> 00:42:43.434
we introduce the concept
of the background page.

00:42:43.434 --> 00:42:46.100
And the background page
is another web page.

00:42:46.100 --> 00:42:47.634
Again,
exactly the same thing

00:42:47.634 --> 00:42:49.133
as the other parts
of the system.

00:42:49.133 --> 00:42:50.734
It's just a web page.

00:42:50.734 --> 00:42:55.367
And the background page
is basically just a web page

00:42:55.367 --> 00:42:57.834
that is not attached
to any browser window

00:42:57.834 --> 00:42:59.334
and is not visible.

00:42:59.334 --> 00:43:01.000
So it's totally invisible,
you can't see it,

00:43:01.000 --> 00:43:02.133
but it's running.

00:43:02.133 --> 00:43:03.634
And the idea is

00:43:03.634 --> 00:43:05.968
that you put all the main part
of your extension code in here

00:43:05.968 --> 00:43:07.434
so that you don't have
to worry about it

00:43:07.434 --> 00:43:09.868
coming and going
as browser windows come and go.

00:43:09.868 --> 00:43:11.968
And then the UI
of your extension

00:43:11.968 --> 00:43:14.834
just becomes like a view,
a dumb view,

00:43:14.834 --> 00:43:16.667
and when it needs information
from your extension,

00:43:16.667 --> 00:43:18.167
it requests it
from the background page.

00:43:18.167 --> 00:43:20.934
And when your background page
notices some state change,

00:43:20.934 --> 00:43:22.701
it updates all the views.

00:43:22.701 --> 00:43:25.734
So this works out pretty well.

00:43:25.734 --> 00:43:28.701
And I can demonstrate, again,
with my extension,

00:43:28.701 --> 00:43:31.000
building up the complexity
of my extension here

00:43:31.000 --> 00:43:33.100
little bit by little bit.

00:43:33.100 --> 00:43:34.801
What we can do
with this extension

00:43:34.801 --> 00:43:36.300
is right now we have--

00:43:36.300 --> 00:43:40.534
every toolstrip is contacting
the Reader API itself,

00:43:40.534 --> 00:43:42.501
so whenever I create
a new window,

00:43:42.501 --> 00:43:44.901
I end up contacting
the Reader API twice.

00:43:44.901 --> 00:43:47.300
Which, besides just being
inconsiderate,

00:43:47.300 --> 00:43:49.901
is just not that good.

00:43:49.901 --> 00:43:53.234
So it would be better
if we moved all that code

00:43:53.234 --> 00:43:54.901
into the background page

00:43:54.901 --> 00:43:58.501
so that it only happens once
for the entire extension.

00:43:58.501 --> 00:44:00.567
So we can go ahead and do that.

00:44:00.567 --> 00:44:04.167
I'll just...very simply copy
all of my code from my toolstrip

00:44:04.167 --> 00:44:08.167
into the new background page.

00:44:08.167 --> 00:44:12.367
I'll save this
as background.html.

00:44:12.367 --> 00:44:15.167
Now, I'm not gonna need the UI
because, again,

00:44:15.167 --> 00:44:16.968
the background page
is invisible.

00:44:16.968 --> 00:44:18.567
So I'll delete that.

00:44:18.567 --> 00:44:22.901
And this setCount function,
right now what it's doing

00:44:22.901 --> 00:44:24.400
is it's for the toolstrip,

00:44:24.400 --> 00:44:26.167
so it's just updating the UI
directly.

00:44:26.167 --> 00:44:27.968
That's not gonna work because
it's a background page

00:44:27.968 --> 00:44:29.367
and it's invisible.

00:44:29.367 --> 00:44:31.200
So instead,
what we need to do

00:44:31.200 --> 00:44:36.968
is tell all the toolstrips
to update themselves.

00:44:36.968 --> 00:44:42.567
So I have a function here...

00:44:42.567 --> 00:44:45.167
so I'll replace the
implementation of this function

00:44:45.167 --> 00:44:47.634
to do something else.

00:44:47.634 --> 00:44:49.767
And again, it's gonna call it
chrome.self.getViews.

00:44:49.767 --> 00:44:51.167
It's gonna iterate
through all the views

00:44:51.167 --> 00:44:53.767
and look and see if they
have a particular function,

00:44:53.767 --> 00:44:55.167
and if they do,
it will call that function,

00:44:55.167 --> 00:44:56.367
basically telling the view,

00:44:56.367 --> 00:44:58.167
hey, the unread count
has changed.

00:44:58.167 --> 00:45:01.133
You need to update yourself.

00:45:01.133 --> 00:45:02.634
The other thing
I'm gonna do

00:45:02.634 --> 00:45:06.367
is add this global variable.

00:45:09.400 --> 00:45:13.033
And you'll see
what that's for in a second.

00:45:13.033 --> 00:45:17.033
Now I need to change
the actual toolstrip itself...

00:45:17.033 --> 00:45:19.167
because I no longer need
all this code

00:45:19.167 --> 00:45:21.234
that's in the toolstrip...

00:45:21.234 --> 00:45:23.834
because I moved it
to the background page.

00:45:23.834 --> 00:45:27.434
So my new toolstrip code
is very simple.

00:45:27.434 --> 00:45:29.300
It's just a few lines again.

00:45:29.300 --> 00:45:32.033
On load, it's gonna call
the function to update itself,

00:45:32.033 --> 00:45:34.033
and what that's gonna do
is go through all the views

00:45:34.033 --> 00:45:35.534
and look for
the background page.

00:45:35.534 --> 00:45:37.033
When it finds
the background page,

00:45:37.033 --> 00:45:39.634
it will use that global
variable that I created

00:45:39.634 --> 00:45:42.067
to update its count.

00:45:42.067 --> 00:45:43.968
And the same function
is the same one

00:45:43.968 --> 00:45:45.534
that's gonna get called

00:45:45.534 --> 00:45:49.834
when the background page notices
that things have changed.

00:45:53.467 --> 00:45:55.133
So the final thing
I need to do

00:45:55.133 --> 00:45:56.467
is register my background page,

00:45:56.467 --> 00:46:03.133
tell the extension system
that it exists...

00:46:03.133 --> 00:46:07.167
and then it should be
ready to go.

00:46:07.167 --> 00:46:09.100
So again, I'll start Chrome.

00:46:09.100 --> 00:46:12.434
You can see that it still works,
which is a good sign.

00:46:12.434 --> 00:46:14.901
If I create multiple windows,
it's still going.

00:46:14.901 --> 00:46:16.300
That's good.

00:46:16.300 --> 00:46:18.100
But other than that,
it's pretty much the same.

00:46:18.100 --> 00:46:20.100
You can tell
that something has happened

00:46:20.100 --> 00:46:21.901
by going to this
management page that we have.

00:46:21.901 --> 00:46:24.300
This will eventually--
this is obviously early UI.

00:46:24.300 --> 00:46:26.100
But this will become
the management UI

00:46:26.100 --> 00:46:27.934
for the extension system.

00:46:27.934 --> 00:46:31.300
And it shows you all the
extensions you have installed,

00:46:31.300 --> 00:46:33.934
and right now
I just have one.

00:46:33.934 --> 00:46:36.534
And it also shows you
all the views in your extension.

00:46:36.534 --> 00:46:38.000
And you can see there's two--

00:46:38.000 --> 00:46:40.100
the toolstrip
and the background page.

00:46:40.100 --> 00:46:43.934
And if I create another one,
another browser window,

00:46:43.934 --> 00:46:46.100
and refresh,
now I have two toolstrips.

00:46:46.100 --> 00:46:47.701
So that makes sense.

00:46:47.701 --> 00:46:50.167
And there's also a button here
to inspect them,

00:46:50.167 --> 00:46:51.901
so I can actually inspect
the background page.

00:46:51.901 --> 00:46:54.868
So you use the inspector
on the background page.

00:46:54.868 --> 00:46:56.868
And it might not seem
that useful

00:46:56.868 --> 00:46:58.734
to inspect an invisible page,

00:46:58.734 --> 00:47:00.934
but one thing you can do
is use

00:47:00.934 --> 00:47:03.901
Chrome's new fancy
visual de-bugger.

00:47:03.901 --> 00:47:06.734
So we now have a visual
JavaScript de-bugger for Chrome,

00:47:06.734 --> 00:47:08.367
which is fun.

00:47:08.367 --> 00:47:10.000
And it was written
for web pages,

00:47:10.000 --> 00:47:12.033
but again, since extensions
are web pages,

00:47:12.033 --> 00:47:13.567
it works for extensions too,

00:47:13.567 --> 00:47:15.567
so you can set break points
and stuff like that.

00:47:15.567 --> 00:47:19.901
Which is good.

00:47:23.200 --> 00:47:25.501
Another thing I can do
with this background page

00:47:25.501 --> 00:47:27.734
is maybe it would be useful

00:47:27.734 --> 00:47:31.767
to have a manual
refresh button...

00:47:31.767 --> 00:47:33.667
in my extension
so that I could--

00:47:33.667 --> 00:47:35.501
if I wanted to know
how many--

00:47:35.501 --> 00:47:38.200
like right now, my extension,
all it does at startup is

00:47:38.200 --> 00:47:40.367
it checks how many items
are in my reading list.

00:47:40.367 --> 00:47:43.634
It would be better if I could
refresh it whenever I wanted.

00:47:43.634 --> 00:47:50.100
So I can...update my toolstrip
really easily to support that.

00:47:54.167 --> 00:47:58.033
I'll add this function
that does the refresh...

00:47:58.033 --> 00:48:01.167
to my toolstrip.

00:48:04.000 --> 00:48:05.634
And again,
all this does is

00:48:05.634 --> 00:48:08.167
it goes through all the views,
finds the background page

00:48:08.167 --> 00:48:11.467
and calls the function
to refresh.

00:48:11.467 --> 00:48:16.434
And I will add a new button
to call the function,

00:48:16.434 --> 00:48:19.767
the refresh function.

00:48:27.634 --> 00:48:31.634
And...if I restart,

00:48:31.634 --> 00:48:33.234
I now have a refresh button.

00:48:33.234 --> 00:48:38.534
I can go to Google Reader.
Maybe I want to read some stuff.

00:48:38.534 --> 00:48:40.667
As I make the count
go down a little bit,

00:48:40.667 --> 00:48:43.834
you can see that
it still says 610.

00:48:43.834 --> 00:48:46.634
But I have actually only 600.

00:48:46.634 --> 00:48:50.834
If I press refresh...
it changes to 600.

00:48:50.834 --> 00:48:54.567
And if I have multiple pages...

00:48:57.734 --> 00:49:00.033
And I take it down to 590

00:49:00.033 --> 00:49:01.701
and I press refresh
in one of them,

00:49:01.701 --> 00:49:05.501
both of them update...
using the background page.

00:49:05.501 --> 00:49:08.400
So that's good.

00:49:14.567 --> 00:49:18.033
The last thing I want to point
out about the process model

00:49:18.033 --> 00:49:20.934
is the effect that it has
on the browser APIs.

00:49:20.934 --> 00:49:22.801
These are those narrow
browser APIs

00:49:22.801 --> 00:49:24.400
I talked about earlier.

00:49:24.400 --> 00:49:27.100
An interesting thing happens
when you try to do browser APIs

00:49:27.100 --> 00:49:29.634
in a multiprocess browser.

00:49:29.634 --> 00:49:34.200
The problem is that all the APIs
that you want to write

00:49:34.200 --> 00:49:36.701
are manipulating data
that exist in another process.

00:49:36.701 --> 00:49:38.934
So your extension
is running in one process,

00:49:38.934 --> 00:49:41.033
but the tab system
for the browser

00:49:41.033 --> 00:49:43.667
is running in a different
process from the extension.

00:49:43.667 --> 00:49:45.701
So at a low level,
fundamentally, what's happening

00:49:45.701 --> 00:49:47.300
is that the extension process

00:49:47.300 --> 00:49:49.267
has to send a message
to the browser process,

00:49:49.267 --> 00:49:51.534
asking it to create a tab.

00:49:51.534 --> 00:49:53.334
And then the browser process
has to send a message

00:49:53.334 --> 00:49:54.834
back to the extension process
saying,

00:49:54.834 --> 00:49:57.234
hey, I created the tab
you asked for--here it is.

00:49:57.234 --> 00:49:59.467
And so this is an asynchronous
environment,

00:49:59.467 --> 00:50:02.334
and fundamentally,
this is just the situation.

00:50:02.334 --> 00:50:05.100
And...
so we thought about

00:50:05.100 --> 00:50:06.701
how to deal with this,

00:50:06.701 --> 00:50:08.501
because async programming
can be difficult,

00:50:08.501 --> 00:50:11.701
and one thing that we
could potentially do

00:50:11.701 --> 00:50:13.701
is try to paper it over

00:50:13.701 --> 00:50:15.767
and make it look like
it's synchronous.

00:50:15.767 --> 00:50:19.701
But the problem with that
is that if you try to pretend

00:50:19.701 --> 00:50:22.701
that an asynchronous system
is really synchronous,

00:50:22.701 --> 00:50:25.300
you can end up
with conflicts and situations

00:50:25.300 --> 00:50:27.100
where the API tells you
the state is one thing,

00:50:27.100 --> 00:50:29.300
but in reality,
it's something else.

00:50:29.300 --> 00:50:31.834
And that ends up being
even more confusing.

00:50:31.834 --> 00:50:33.100
And so what we decided was

00:50:33.100 --> 00:50:34.901
instead of trying
to paper this over,

00:50:34.901 --> 00:50:36.868
we would use some of the idioms
and techniques

00:50:36.868 --> 00:50:38.934
that web developers
are already familiar with

00:50:38.934 --> 00:50:40.501
for working with
asynchronous systems

00:50:40.501 --> 00:50:44.033
and just use them
so that at least,

00:50:44.033 --> 00:50:46.667
although you have to use
asynchronous APIs,

00:50:46.667 --> 00:50:49.000
it's using a technique
that you're familiar with

00:50:49.000 --> 00:50:51.701
and using patterns that
you're familiar with.

00:50:51.701 --> 00:50:54.934
So if you just think
of the browser as the server

00:50:54.934 --> 00:50:58.000
for your extension web page,
it works pretty much the same.

00:50:58.000 --> 00:50:59.467
We've designed the APIs

00:50:59.467 --> 00:51:02.033
so that they look very similar
to AJAX APIs.

00:51:02.033 --> 00:51:05.667
You pass in an object
that is a JSON-style object,

00:51:05.667 --> 00:51:08.200
and you get back results
that are JSON-style objects.

00:51:08.200 --> 00:51:10.701
So if you're familiar with
doing AJAX programming,

00:51:10.701 --> 00:51:15.868
this should look
pretty similar to you.

00:51:15.868 --> 00:51:18.334
So the last cool thing
about the extension system

00:51:18.334 --> 00:51:21.100
that I want to talk about
is packaging and distribution.

00:51:21.100 --> 00:51:24.300
So I've convinced you
that this is really cool,

00:51:24.300 --> 00:51:25.968
and you go and you write
your extension

00:51:25.968 --> 00:51:28.367
and now you want to let
your friends use it

00:51:28.367 --> 00:51:31.767
or let your users
or customers use it.

00:51:31.767 --> 00:51:34.534
I mentioned earlier
that extensions are zip files,

00:51:34.534 --> 00:51:35.934
and that's true.

00:51:35.934 --> 00:51:38.767
But they also have two
special pieces of information

00:51:38.767 --> 00:51:40.834
stuck onto the front of them.

00:51:40.834 --> 00:51:43.367
And because they have these
extra pieces of information,

00:51:43.367 --> 00:51:45.567
we package them
as special files

00:51:45.567 --> 00:51:47.467
with a special extension
called CRX,

00:51:47.467 --> 00:51:49.167
which stands for
Chrome Extension.

00:51:49.167 --> 00:51:51.834
The first piece of information
that's tacked onto the front

00:51:51.834 --> 00:51:53.534
is the signature.

00:51:53.534 --> 00:51:56.801
And all extensions in Chrome
are digitally signed.

00:51:56.801 --> 00:51:58.534
And the reason for that

00:51:58.534 --> 00:52:00.501
is it prevents against
a really common attack

00:52:00.501 --> 00:52:01.901
called a Man-in-the-Middle
attack

00:52:01.901 --> 00:52:06.067
where basically
the signature tells you,

00:52:06.067 --> 00:52:09.400
tells Chrome that when you
update an extension

00:52:09.400 --> 00:52:11.033
that the person
who wrote the update

00:52:11.033 --> 00:52:13.501
is the same person who wrote
the original extension.

00:52:13.501 --> 00:52:15.901
So it can't be substituted
with malicious code.

00:52:15.901 --> 00:52:19.267
And we also tack a manifest
onto the front,

00:52:19.267 --> 00:52:21.767
and the manifest
is the exact same manifest

00:52:21.767 --> 00:52:23.767
that is inside the zip file,

00:52:23.767 --> 00:52:25.901
which might seem kind of funny
to have the same data twice,

00:52:25.901 --> 00:52:27.801
but we do it for a good reason.

00:52:27.801 --> 00:52:30.534
And the reason is
we want to show UI right away

00:52:30.534 --> 00:52:32.200
when you install an extension.

00:52:32.200 --> 00:52:34.167
Again, we want the experience
of using extensions

00:52:34.167 --> 00:52:37.033
to be really polished
and fit with Chrome.

00:52:37.033 --> 00:52:39.634
And so when you click
on an extension on the web,

00:52:39.634 --> 00:52:41.434
we don't want to have to wait
for the entire extension

00:52:41.434 --> 00:52:43.234
to download to show UI.

00:52:43.234 --> 00:52:45.868
We want to show UI right away,
and we want to show UI that says

00:52:45.868 --> 00:52:48.467
this is extension blah,
it has this description,

00:52:48.467 --> 00:52:50.434
here's its icon,
here's what it wants to do, etc.

00:52:50.434 --> 00:52:52.434
And so we put the manifest
on the front

00:52:52.434 --> 00:52:55.634
so that as soon as we get this
first few packets of data,

00:52:55.634 --> 00:52:58.400
we can start displaying UI.

00:52:58.400 --> 00:53:00.234
Now, I'm just bringing this up

00:53:00.234 --> 00:53:01.868
because I think
it's an interesting detail,

00:53:01.868 --> 00:53:03.501
but you don't have to worry
about this.

00:53:03.501 --> 00:53:05.300
As an extension developer,

00:53:05.300 --> 00:53:08.067
typically, you won't deal
with CRX files directly.

00:53:08.067 --> 00:53:09.901
Goggle is going to provide
a service

00:53:09.901 --> 00:53:12.501
that does the packaging,
a web service.

00:53:12.501 --> 00:53:14.501
And you'll just upload
a zip file,

00:53:14.501 --> 00:53:16.901
and it will be packaged
into a CRX file for you,

00:53:16.901 --> 00:53:21.567
and that's the end of the story.

00:53:21.567 --> 00:53:24.701
So once you have your CRX file,
you want to deploy it.

00:53:24.701 --> 00:53:27.567
You want to put it someplace
so people can install it.

00:53:27.567 --> 00:53:30.567
Deployment of Chrome Extensions
is trivial.

00:53:30.567 --> 00:53:32.501
You copy the CRX file
to your web server,

00:53:32.501 --> 00:53:34.167
and that's pretty much it.

00:53:34.167 --> 00:53:36.334
Or you mail it
or whatever you need to do.

00:53:36.334 --> 00:53:38.934
Installation
of Chrome Extensions is instant.

00:53:38.934 --> 00:53:41.000
There's no restart.
They show up immediately.

00:53:41.000 --> 00:53:42.501
And we're so proud of this,

00:53:42.501 --> 00:53:45.000
'cause it just got finished
recently.

00:53:45.000 --> 00:53:46.701
Then I'm gonna show it off.

00:53:46.701 --> 00:53:52.300
So you can do a Google search
for Chrome Extensions samples

00:53:52.300 --> 00:53:55.534
and...there's a bunch
of sample extensions

00:53:55.534 --> 00:53:57.601
that we've posted
on our developer's site

00:53:57.601 --> 00:53:59.367
that you can install.

00:53:59.367 --> 00:54:04.434
Let's see...I'll do...

00:54:04.434 --> 00:54:08.567
the buildbot one.

00:54:08.567 --> 00:54:12.167
So the little dialog comes up,
and it shows up immediately.

00:54:12.167 --> 00:54:14.200
And this one has
this cool feature

00:54:14.200 --> 00:54:15.767
where, if you hover over it,

00:54:15.767 --> 00:54:18.167
it like expands
and shows you more information.

00:54:18.167 --> 00:54:21.167
Ha. If you're not familiar
with what a buildbot is,

00:54:21.167 --> 00:54:24.567
it's basically a system that
lets the developers of Chrome

00:54:24.567 --> 00:54:26.567
know what the status
of the Chrome source code is

00:54:26.567 --> 00:54:27.767
at any given time.

00:54:27.767 --> 00:54:29.567
So this is telling me that

00:54:29.567 --> 00:54:31.400
Chrome source code
is in a good state right now,

00:54:31.400 --> 00:54:33.767
but there is
one red breakage.

00:54:33.767 --> 00:54:35.367
So this one broke something.

00:54:35.367 --> 00:54:40.367
Anyway, um...
so installation is instant.

00:54:40.367 --> 00:54:44.200
And similarly,
un-installation is also instant.

00:54:44.200 --> 00:54:50.133
If I go to that same
management page...

00:54:50.133 --> 00:54:51.968
now I have two extensions.

00:54:51.968 --> 00:54:56.801
I uninstall the buildbot one.
It goes away immediately.

00:54:58.934 --> 00:55:01.434
And again, you don't have
to worry about hosting.

00:55:01.434 --> 00:55:03.434
If you don't want to host
your own CRX files,

00:55:03.434 --> 00:55:06.033
Google will provide
a web service that you can use

00:55:06.033 --> 00:55:07.834
to host your CRX files.

00:55:07.834 --> 00:55:12.534
You just upload them,
and nothing to it.

00:55:12.534 --> 00:55:14.434
Once you get your extension
deployed

00:55:14.434 --> 00:55:16.567
and people are using it
and it's pop--yes?

00:55:16.567 --> 00:55:17.868
[man speaking indistinctly]

00:55:17.868 --> 00:55:20.567
Goodman: Oh. Okay.

00:55:20.567 --> 00:55:27.067
[man continues indistinctly]

00:55:27.067 --> 00:55:29.234
Goodman: Right.

00:55:29.234 --> 00:55:31.033
The question is,
will there be a warning

00:55:31.033 --> 00:55:32.834
if you host it
from your own site

00:55:32.834 --> 00:55:35.834
versus hosting it from
the official site?

00:55:35.834 --> 00:55:39.434
We haven't figured out
the details of the UI there.

00:55:39.434 --> 00:55:41.434
It's something that we're
still trying to design,

00:55:41.434 --> 00:55:43.434
so I can't answer that question
specifically.

00:55:43.434 --> 00:55:45.033
It's definitely something
that we've considered

00:55:45.033 --> 00:55:48.033
because...there's definite
security risks

00:55:48.033 --> 00:55:51.834
from installing extensions
from arbitrary websites.

00:55:51.834 --> 00:55:54.067
man: Can you use
the CRX generating service

00:55:54.067 --> 00:55:59.167
in an automated tool
like...you know,

00:55:59.167 --> 00:56:04.267
just upload and automatically
then download onto your site?

00:56:04.267 --> 00:56:07.267
I mean, if you wanted
to deploy something

00:56:07.267 --> 00:56:08.901
in a script?

00:56:08.901 --> 00:56:10.100
Goodman: The question is,

00:56:10.100 --> 00:56:12.300
will you be able to use
the packaging tool

00:56:12.300 --> 00:56:14.033
in a automated script?

00:56:14.033 --> 00:56:15.367
man: Yeah.
Goodman: Okay.

00:56:15.367 --> 00:56:16.801
That's not something
we've thought about--

00:56:16.801 --> 00:56:18.400
like making it a web service.

00:56:18.400 --> 00:56:20.334
But one thing
I forgot to mention

00:56:20.334 --> 00:56:22.901
is that the format of CRX
is completely open,

00:56:22.901 --> 00:56:24.701
and we'll have Python scripts
that you can use.

00:56:24.701 --> 00:56:27.534
We already have a Python script
that you can use to create them.

00:56:27.534 --> 00:56:29.801
And the format is trivial--
it's like a zip file

00:56:29.801 --> 00:56:32.901
with some extra bytes
appendaged to the front, so...

00:56:32.901 --> 00:56:34.701
And, of course,
Chrome is open source,

00:56:34.701 --> 00:56:36.901
so you could look at
the source code too.

00:56:36.901 --> 00:56:38.367
So basically
what I'm getting at

00:56:38.367 --> 00:56:40.501
is you may not be able to use
our web service to do that,

00:56:40.501 --> 00:56:42.300
but if you're willing
to write code,

00:56:42.300 --> 00:56:47.100
you could easily write code
to create CRX files.

00:56:47.100 --> 00:56:50.634
So you have your extension.
People are using it.

00:56:50.634 --> 00:56:52.734
And then you discover
there's a bug in it,

00:56:52.734 --> 00:56:54.400
so you want to update it.

00:56:54.400 --> 00:56:57.367
You could do a blog post,
telling people, hey,

00:56:57.367 --> 00:56:59.634
you should get the new
version of my extension.

00:56:59.634 --> 00:57:00.801
But it would be better
if you could update

00:57:00.801 --> 00:57:02.968
all the existing users
of your extension.

00:57:02.968 --> 00:57:05.601
And the extension system
in Chrome

00:57:05.601 --> 00:57:07.100
works exactly the same way

00:57:07.100 --> 00:57:10.634
as the update system
for Chrome itself.

00:57:10.634 --> 00:57:13.000
Updates of Chrome Extensions
are automatic.

00:57:13.000 --> 00:57:14.968
There's no work required
by users.

00:57:14.968 --> 00:57:16.634
There's no manual update step.

00:57:16.634 --> 00:57:19.100
There's never a prompt that
tells users they need to update

00:57:19.100 --> 00:57:21.133
or restart
when they get the update.

00:57:21.133 --> 00:57:23.234
And users always have
the latest version.

00:57:23.234 --> 00:57:25.200
And we think this is
a great feature for users

00:57:25.200 --> 00:57:28.367
and it helps
with security too.

00:57:28.367 --> 00:57:32.133
Additionally, updates in Chrome,
as I mentioned before,

00:57:32.133 --> 00:57:33.968
because of those narrow APIs,

00:57:33.968 --> 00:57:35.801
Chrome Extensions
are forward-compatible.

00:57:35.801 --> 00:57:38.367
So you never have to declare
in your extension

00:57:38.367 --> 00:57:39.567
what versions of Chrome

00:57:39.567 --> 00:57:41.367
that your extension
is compatible with.

00:57:41.367 --> 00:57:42.567
Because once you use an API

00:57:42.567 --> 00:57:44.567
that we have released
to the stable channel,

00:57:44.567 --> 00:57:46.167
we guarantee
that we won't break you.

00:57:46.167 --> 00:57:49.167
So you don't have to worry
about updating your extension

00:57:49.167 --> 00:57:51.801
when new versions
of Chrome come out.

00:57:51.801 --> 00:57:53.167
And again,
like the other things,

00:57:53.167 --> 00:57:55.167
Google is going to provide
an update service

00:57:55.167 --> 00:57:58.167
that takes care of the
auto-update protocol for you

00:57:58.167 --> 00:58:00.200
so you won't have to do it
yourself,

00:58:00.200 --> 00:58:03.200
but again, the update protocol
is going to be open

00:58:03.200 --> 00:58:04.434
and all the formats are open,

00:58:04.434 --> 00:58:06.367
so if you want to do it
yourself,

00:58:06.367 --> 00:58:10.200
you'll be able to.

00:58:10.200 --> 00:58:12.968
Finally, we're gonna...
I mentioned

00:58:12.968 --> 00:58:15.968
that we're gonna have services
for packaging

00:58:15.968 --> 00:58:17.467
for hosting and for update,

00:58:17.467 --> 00:58:19.367
and similarly,
we'll have a gallery service

00:58:19.367 --> 00:58:21.400
where users can go
to find extensions

00:58:21.400 --> 00:58:23.100
that they might want
to install

00:58:23.100 --> 00:58:24.701
and where developers
can post their extensions

00:58:24.701 --> 00:58:26.667
if they want people
to install them.

00:58:26.667 --> 00:58:28.267
We don't have any--

00:58:28.267 --> 00:58:30.634
we're still working on
the design for this right now.

00:58:30.634 --> 00:58:32.133
It's a work in progress,

00:58:32.133 --> 00:58:33.868
so we don't have
anything to show you.

00:58:33.868 --> 00:58:37.033
But we hope to be able
to show this really soon.

00:58:37.033 --> 00:58:39.067
And, uh, that's it.

00:58:39.067 --> 00:58:41.067
So I hope this has been
informative

00:58:41.067 --> 00:58:42.567
and piqued your interest

00:58:42.567 --> 00:58:44.634
and that you'll get started
building Chrome Extensions.

00:58:44.634 --> 00:58:46.033
If you want to learn
how to do it again,

00:58:46.033 --> 00:58:49.067
do a Google search for
Chrome Extensions HOWTO.

00:58:49.067 --> 00:58:51.000
It'll take you to
a really simple tutorial

00:58:51.000 --> 00:58:53.834
that walks you through it.

00:58:53.834 --> 00:58:55.234
You can talk to--

00:58:55.234 --> 00:58:57.133
there's a bunch of extension
developers here today--

00:58:57.133 --> 00:58:58.400
not extension developers,

00:58:58.400 --> 00:59:00.634
but people who work
on the extension system.

00:59:00.634 --> 00:59:02.701
And we're gonna be having
something called a Sandbox

00:59:02.701 --> 00:59:05.000
at 1:00 today

00:59:05.000 --> 00:59:07.000
and office hours tomorrow
from 1:00 to 3:00,

00:59:07.000 --> 00:59:08.701
so you can talk to us then.

00:59:08.701 --> 00:59:10.701
You can obviously
talk to me after this.

00:59:10.701 --> 00:59:13.300
Or you can email us
at chromium-discuss

00:59:13.300 --> 00:59:15.300
at googlegroups.com.

00:59:15.300 --> 00:59:17.901
And with that,
I will open it up to questions.

00:59:17.901 --> 00:59:24.100
[applause]

00:59:24.100 --> 00:59:26.501
For the questions,
please go to the microphones,

00:59:26.501 --> 00:59:28.100
because we're recording this,

00:59:28.100 --> 00:59:31.701
and that way people
who watch it later on YouTube

00:59:31.701 --> 00:59:34.634
will be able
to hear the questions.

00:59:34.634 --> 00:59:39.067
man: For the cross...
cross-origin XHR...

00:59:39.067 --> 00:59:40.334
Goodman: Yeah.

00:59:40.334 --> 00:59:43.667
man: Will the Chrome
Extension honor

00:59:43.667 --> 00:59:47.601
the W3C HTTP header
properties?

00:59:47.601 --> 00:59:49.467
Goodman: Yes.
The question is will Chrome--

00:59:49.467 --> 00:59:51.000
man: From the server.
Goodman: Right.

00:59:51.000 --> 00:59:55.634
Will Chrome Extensions
support the opt-in W3C header

00:59:55.634 --> 00:59:57.000
for cross-origin XHR?

00:59:57.000 --> 00:59:58.467
And the answer is yes,

00:59:58.467 --> 01:00:00.200
because Chrome Extensions
are web pages.

01:00:00.200 --> 01:00:02.868
They just inherit
all the features of Chrome.

01:00:02.868 --> 01:00:06.067
And Chrome itself
already supports that,

01:00:06.067 --> 01:00:08.234
and so Chrome Extensions
do too.

01:00:08.234 --> 01:00:11.801
The cross-origin XHR
that extensions have

01:00:11.801 --> 01:00:14.467
is more powerful
than the W3C one,

01:00:14.467 --> 01:00:16.567
because it allows you
to talk to servers

01:00:16.567 --> 01:00:19.634
that have not opted in
to receiving cross-origin--

01:00:19.634 --> 01:00:21.801
man: So it's a way
for the web page author

01:00:21.801 --> 01:00:24.334
to bypass the...

01:00:24.334 --> 01:00:26.200
Goodman: It's a way
for extensions to--

01:00:26.200 --> 01:00:30.901
man: External servers...
HTTP headers is...

01:00:30.901 --> 01:00:33.534
Goodman: Right.
It allows Chrome Extensions

01:00:33.534 --> 01:00:36.534
to access web servers
on other origins

01:00:36.534 --> 01:00:38.200
regardless of the header.

01:00:38.200 --> 01:00:39.767
Exactly.
man: Oh, okay. Thank you.

01:00:39.767 --> 01:00:42.067
Goodman: Yep.
man: Is there, uh...

01:00:42.067 --> 01:00:44.200
is there any thought
or concern

01:00:44.200 --> 01:00:47.634
about the security risks
involved in extensions

01:00:47.634 --> 01:00:50.434
that, uh...

01:00:50.434 --> 01:00:52.667
is there any concern about

01:00:52.667 --> 01:00:54.434
the transparent update
of extensions

01:00:54.434 --> 01:00:55.801
in terms of the security,

01:00:55.801 --> 01:00:58.400
like somebody making
a simple little extension

01:00:58.400 --> 01:01:01.734
and then transparently
updating it with malicious code?

01:01:01.734 --> 01:01:03.200
It would be difficult
maybe for users

01:01:03.200 --> 01:01:06.234
to even figure out
which extensions caused--

01:01:06.234 --> 01:01:07.901
Goodman: Right.
Great question.

01:01:07.901 --> 01:01:09.801
The question is
is there any concern about,

01:01:09.801 --> 01:01:11.534
with the transparent update,

01:01:11.534 --> 01:01:13.200
that an extension
starts out BIN again,

01:01:13.200 --> 01:01:14.834
but then it becomes malicious?

01:01:14.834 --> 01:01:16.534
And, yes, there is
concern about that.

01:01:16.534 --> 01:01:18.834
In the talk,
there's a lot of cool things

01:01:18.834 --> 01:01:20.701
about the system that
we just didn't have time

01:01:20.701 --> 01:01:22.267
to put in the talk.

01:01:22.267 --> 01:01:24.434
But one of them is that

01:01:24.434 --> 01:01:26.133
we have this opt-in
permission system

01:01:26.133 --> 01:01:27.534
where extensions
have to declare

01:01:27.534 --> 01:01:28.968
which permissions they want.

01:01:28.968 --> 01:01:32.033
And if an update of
an extension changes the list,

01:01:32.033 --> 01:01:33.400
then you have to go through

01:01:33.400 --> 01:01:34.968
a proper installation phase
again.

01:01:34.968 --> 01:01:36.567
So it brings up UI
that asks the user,

01:01:36.567 --> 01:01:38.200
"Hey, do you want to install
this thing?"

01:01:38.200 --> 01:01:40.267
and shows the permissions
and things like that.

01:01:40.267 --> 01:01:41.968
man: Excellent. Thank you.
Goodman: Yep.

01:01:41.968 --> 01:01:44.767
man: I love Greasemonkey,
by the way.

01:01:44.767 --> 01:01:47.434
So I'm just curious...

01:01:47.434 --> 01:01:49.267
would you say that

01:01:49.267 --> 01:01:53.133
we'll be able to do
a Greasemonkey-like extension

01:01:53.133 --> 01:01:55.501
on Chrome soon?

01:01:55.501 --> 01:01:57.467
Goodman: The question is,
will you be able to do

01:01:57.467 --> 01:01:58.934
Greasemonkey-like things
on Chrome?

01:01:58.934 --> 01:02:01.267
Yes, the extension system
currently includes

01:02:01.267 --> 01:02:03.033
Greasemonkey-like functionality.

01:02:03.033 --> 01:02:06.367
That's another thing that I
wasn't able to fit in the talk.

01:02:06.367 --> 01:02:08.734
We're still trying to figure out
the details

01:02:08.734 --> 01:02:10.501
of exactly
how it's gonna work.

01:02:10.501 --> 01:02:12.801
There's a lot of different ideas
that we're throwing around.

01:02:12.801 --> 01:02:15.334
But the current
developer builds of Chrome

01:02:15.334 --> 01:02:16.968
already include
this functionality.

01:02:16.968 --> 01:02:19.667
And if you go to
the Chrome Extensions HOWTO,

01:02:19.667 --> 01:02:21.567
it shows you how to do that.

01:02:21.567 --> 01:02:26.000
man: Cool. I know you guys
can't talk about specific dates,

01:02:26.000 --> 01:02:28.400
but--and I'll leave
after this--

01:02:28.400 --> 01:02:32.801
but as a developer that's
actually shipping product,

01:02:32.801 --> 01:02:35.234
it really helps to have
some kind of time window

01:02:35.234 --> 01:02:37.434
even without a specific date.
Goodman: Yeah.

01:02:37.434 --> 01:02:39.100
man: You know, 'cause I mean,

01:02:39.100 --> 01:02:41.133
I don't want to develop
something that's a year out.

01:02:41.133 --> 01:02:42.334
Goodman: Yep.

01:02:42.334 --> 01:02:44.601
man: But can you give me
even like a window of...

01:02:44.601 --> 01:02:46.167
If you were developing today

01:02:46.167 --> 01:02:48.667
and you had to ship something
in six months,

01:02:48.667 --> 01:02:50.601
would it make sense
to be using this now?

01:02:50.601 --> 01:02:54.400
Goodman: Unfortunately,
I, of course, haven't--

01:02:54.400 --> 01:02:56.200
The question is,
when are we gonna ship it?

01:02:56.200 --> 01:02:58.400
The answer is
yes, I have an idea

01:02:58.400 --> 01:03:00.701
of when we're gonna ship it,
but no, I can't tell you.

01:03:00.701 --> 01:03:02.267
Sorry.
man: I'll talk to you later.

01:03:02.267 --> 01:03:04.133
I'll talk to you later
when it's not being recorded.

01:03:04.133 --> 01:03:06.234
[laughing]

01:03:06.234 --> 01:03:07.234
Goodman: Sorry--

01:03:07.234 --> 01:03:08.734
[woman speaking indistinctly]

01:03:08.734 --> 01:03:10.200
Goodman: Okay, so I can't
answer any more questions.

01:03:10.200 --> 01:03:11.767
[continues indistinctly]
Goodman: Okay, all right.

01:03:11.767 --> 01:03:13.701
So I'm told that
we can talk outside.

01:03:13.701 --> 01:03:15.400
Thank you, everyone,
for coming.

01:03:15.400 --> 01:03:18.434
[applause]

