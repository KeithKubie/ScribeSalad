WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So, here we are back with our broken formality test.

00:00:03.000 --> 00:00:06.000
And what I have done is I've changed the input a little bit so let's run these new inputs.

00:00:06.000 --> 00:00:09.000
And what we can see is the function has not made a couple of mistakes.

00:00:09.000 --> 00:00:15.000
For example, it is indicated that 9 is prime, and it is indicated that 25 is prime

00:00:15.000 --> 00:00:17.000
or of course neither of those numbers is prime.

00:00:17.000 --> 00:00:20.000
So, let's go back to the code and look the mistake. The algorithm here is generally a valid one.

00:00:20.000 --> 00:00:24.000
It's fine to first of all special case the even numbers,

00:00:24.000 --> 00:00:28.000
and it's fine then to loop between 3 and the square root of the number.

00:00:28.000 --> 00:00:31.000
So, the problem is that Python's range function

00:00:31.000 --> 00:00:35.000
does not loop through 3 and the square of the input number

00:00:35.000 --> 00:00:40.000
rather it loops between 3 and 1 less than the square of the input number.

00:00:40.000 --> 00:00:45.000
So, we can fix this, of course, easily by adding 1 to the square root

00:00:45.000 --> 00:00:47.000
causing it to actually test against the full range that it needs to test

00:00:47.000 --> 00:00:50.000
in order to have a successful formality test.

00:00:50.000 --> 00:00:52.000
So, let us run this code and see what happens.

00:00:52.000 --> 00:00:57.000
So, 6 is not prime, 7 is. None of the rest of these numbers are prime except for 29.

00:00:57.000 --> 00:01:01.000
So, the question is what happened here? Why did test coverage fail to identify the bug?

00:01:01.000 --> 00:01:04.000
And the answer is sort of simple--statement coverage is a rather crude metric

00:01:04.000 --> 00:01:07.000
that only checks whether each statement executes once.

00:01:07.000 --> 00:01:11.000
Each statement executes at least once that let's a lot of bugs slip through.

00:01:11.000 --> 00:01:16.000
For example, we can have a statement execute, but it computes the wrong numerical answer

00:01:16.000 --> 00:01:19.000
or what happened here a loop executed,

00:01:19.000 --> 00:01:22.000
but it executed for the wrong number of times computing the wrong result.

00:01:22.000 --> 00:01:27.000
The lesson here is we should not let complete coverage plus a number of successful test cases

00:01:27.000 --> 00:01:30.000
fool as into thinking that a piece of code of right.

00:01:30.000 --> 99:59:59.999
It's often the case that deeper analysis is necessary.

