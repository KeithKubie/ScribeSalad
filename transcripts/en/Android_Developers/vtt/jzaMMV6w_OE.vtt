WEBVTT
Kind: captions
Language: en

00:00:07.160 --> 00:00:08.410
ROMAIN GUY: Welcome, everyone.

00:00:08.410 --> 00:00:09.882
LUCY ABRAMYAN: Welcome.

00:00:09.882 --> 00:00:12.340
ROMAIN GUY: I'm Romain Guy from
the Android Framework Team,

00:00:12.340 --> 00:00:14.464
and now I can finally reveal
some of the stuff I've

00:00:14.464 --> 00:00:15.539
been working on.

00:00:15.539 --> 00:00:17.080
LUCY ABRAMYAN: And
I'm Lucy Abramyan.

00:00:17.080 --> 00:00:21.070
I'm an engineer on
the AR and VR team.

00:00:21.070 --> 00:00:23.680
I'm actually going to
start off by telling you

00:00:23.680 --> 00:00:27.190
something very personal
to me and that I'm

00:00:27.190 --> 00:00:29.710
very passionate about.

00:00:29.710 --> 00:00:31.970
But it's not just one thing.

00:00:31.970 --> 00:00:35.870
It's actually a combination
of things that I love.

00:00:35.870 --> 00:00:41.710
Ever since I was a child,
I've been marveled by space.

00:00:41.710 --> 00:00:42.910
Isn't it amazing?

00:00:42.910 --> 00:00:44.980
Just think about
it for a second.

00:00:44.980 --> 00:00:47.620
The diversity of the
planets, everything

00:00:47.620 --> 00:00:51.070
that's going on around the
solar system right now.

00:00:51.070 --> 00:00:56.170
Wouldn't it be amazing if we
could just see it up close?

00:00:56.170 --> 00:00:58.300
There's just one
problem, though.

00:00:58.300 --> 00:01:00.310
Humans can't go
to another planet.

00:01:00.310 --> 00:01:02.860
Not even Mars, just yet.

00:01:02.860 --> 00:01:06.380
Or can we?

00:01:06.380 --> 00:01:09.830
And this starts the
second part of my passion.

00:01:09.830 --> 00:01:13.940
Augmented reality is delightful.

00:01:13.940 --> 00:01:17.390
It helps you interact
with a world that

00:01:17.390 --> 00:01:20.000
is within a whole
new experience that

00:01:20.000 --> 00:01:23.720
is catered to your environment.

00:01:23.720 --> 00:01:28.910
ARCore is Google's platform for
augmented reality applications.

00:01:28.910 --> 00:01:31.850
But even if we
use ARCore to help

00:01:31.850 --> 00:01:35.900
us understand the environment,
what do we do about 3D

00:01:35.900 --> 00:01:36.877
rendering?

00:01:39.500 --> 00:01:43.260
OK, so while it's not
exactly rocket science,

00:01:43.260 --> 00:01:47.390
today, 3D rendering has
a steep learning curve.

00:01:47.390 --> 00:01:49.810
But if you're like
me, you're still

00:01:49.810 --> 00:01:55.000
really passionate about space
and AR and 3D and rendering

00:01:55.000 --> 00:01:57.310
and graphics and matrix
math, so you just

00:01:57.310 --> 00:02:02.140
start coding and coding
and coding and coding.

00:02:02.140 --> 00:02:05.599
And then you quickly realize
there's a lot of code.

00:02:05.599 --> 00:02:07.390
ROMAIN GUY: Yeah,
actually, how many of you

00:02:07.390 --> 00:02:10.490
have written openGL
in the developer life?

00:02:10.490 --> 00:02:13.566
So first of all, I'm so sorry.

00:02:13.566 --> 00:02:15.940
And second of all, you probably
know how difficult it is.

00:02:15.940 --> 00:02:18.314
I've been doing this kind of
stuff for basically 10 years

00:02:18.314 --> 00:02:22.250
at Google, and it's a pain.

00:02:22.250 --> 00:02:25.010
LUCY ABRAMYAN: This proves
my point right here.

00:02:25.010 --> 00:02:27.520
It's difficult.
And we've noticed

00:02:27.520 --> 00:02:31.510
that there's so much in
common throughout all AR apps,

00:02:31.510 --> 00:02:34.000
things like streaming the
camera image to the background,

00:02:34.000 --> 00:02:37.420
or even just making an
object appear on the screen.

00:02:37.420 --> 00:02:39.290
So we wanted to
take care of that

00:02:39.290 --> 00:02:41.165
so you don't have to go
through all the pain.

00:02:41.165 --> 00:02:44.250
ROMAIN GUY: No, I
go through the pain.

00:02:44.250 --> 00:02:46.660
LUCY ABRAMYAN: That's why
we built the Sceneform SDK,

00:02:46.660 --> 00:02:49.660
to make AR development
quick, simple,

00:02:49.660 --> 00:02:51.760
and familiar to any
Android developer.

00:02:56.200 --> 00:02:59.250
Sceneform is a 3D framework
that makes it easy

00:02:59.250 --> 00:03:01.510
for you to build ARCore apps.

00:03:01.510 --> 00:03:03.750
It includes an
Android Studio plugin

00:03:03.750 --> 00:03:08.550
that allows you to import,
view, and even edit 3D models.

00:03:08.550 --> 00:03:12.750
The API offers a high-level
way of working with 3D,

00:03:12.750 --> 00:03:15.180
and it's tightly
integrated with ARCore,

00:03:15.180 --> 00:03:18.300
so that makes it especially
easy to build AR apps.

00:03:18.300 --> 00:03:21.150
Because it integrates with
the Android view framework,

00:03:21.150 --> 00:03:26.280
you can easily add AR
into an existing app

00:03:26.280 --> 00:03:27.540
or create one from scratch.

00:03:35.730 --> 00:03:38.640
The New York Times used
Sceneform in their new AR

00:03:38.640 --> 00:03:39.690
articles.

00:03:39.690 --> 00:03:42.630
You can download the New York
Times app today and search

00:03:42.630 --> 00:03:47.490
for augmented reality, and not
only read about David Bowie,

00:03:47.490 --> 00:03:50.720
but also walk around a
mannequin wearing his costumes.

00:03:54.120 --> 00:03:56.850
Otto, the online
furnishing retailer,

00:03:56.850 --> 00:03:59.000
used Sceneform to
allow customers

00:03:59.000 --> 00:04:02.750
to see what a piece of furniture
looks like in their living room

00:04:02.750 --> 00:04:04.310
before they buy it.

00:04:04.310 --> 00:04:06.300
If you're from a
European country,

00:04:06.300 --> 00:04:08.780
you'll be able to download
the app and try it out.

00:04:08.780 --> 00:04:10.196
ROMAIN GUY: And
actually, a couple

00:04:10.196 --> 00:04:13.030
of the engineers from Otto
are in the audience somewhere,

00:04:13.030 --> 00:04:14.780
and I just want to
thank them because they

00:04:14.780 --> 00:04:17.480
were very patient with us when
we were working on Sceneform.

00:04:17.480 --> 00:04:20.130
They went through all the
early versions of the API,

00:04:20.130 --> 00:04:21.880
and it wasn't always
working right.

00:04:21.880 --> 00:04:22.734
So thank you.

00:04:22.734 --> 00:04:24.400
LUCY ABRAMYAN: Thanks
for your patience.

00:04:24.400 --> 00:04:26.000
Well, thanks for
helping us build it.

00:04:26.000 --> 00:04:26.889
ROMAIN GUY: Yes.

00:04:26.889 --> 00:04:27.680
LUCY ABRAMYAN: Yes.

00:04:27.680 --> 00:04:31.490
I'm going to play this video
again, because I love it.

00:04:31.490 --> 00:04:33.590
Remember that solar
system I was talking about

00:04:33.590 --> 00:04:35.690
that I wanted to bring to you?

00:04:35.690 --> 00:04:38.090
Here it is, right
inside your living room.

00:04:38.090 --> 00:04:39.710
And trust me,
without the thousands

00:04:39.710 --> 00:04:41.630
of lines of rendering code.

00:04:41.630 --> 00:04:44.210
You can see this
code online right now

00:04:44.210 --> 00:04:47.090
by going to our
GitHub repo linked

00:04:47.090 --> 00:04:49.860
at the end of the presentation.

00:04:49.860 --> 00:04:52.820
So let's walk through
how we built this app.

00:04:55.725 --> 00:04:57.850
So first, we'll start out
with some common concepts

00:04:57.850 --> 00:05:01.990
of AR apps, and then show you
code snippets using Sceneform.

00:05:01.990 --> 00:05:03.695
After we've covered
the basics, Romain

00:05:03.695 --> 00:05:07.120
will go into detail about
physically based materials

00:05:07.120 --> 00:05:11.050
and give you all sorts
of rendering knowledge

00:05:11.050 --> 00:05:14.620
to help you optimize
and make beautiful 3D

00:05:14.620 --> 00:05:16.292
objects in your app.

00:05:19.600 --> 00:05:23.100
The Sceneform API
consists of two concepts--

00:05:23.100 --> 00:05:24.430
the scene and the view.

00:05:27.400 --> 00:05:30.450
The scene represents the objects
you are adding to the world,

00:05:30.450 --> 00:05:36.240
like the 3D models that you
want to place in your AR app.

00:05:36.240 --> 00:05:39.170
The view is where your
scene will be drawn.

00:05:39.170 --> 00:05:41.150
In this case, it's
your device screen

00:05:41.150 --> 00:05:42.720
and where the device
is in the world.

00:05:45.330 --> 00:05:50.490
The renderer will draw the
scene from this perspective.

00:05:50.490 --> 00:05:54.070
The view ties into the Android
view framework or system,

00:05:54.070 --> 00:05:56.740
and that's your
hook into the app.

00:05:56.740 --> 00:06:00.400
As a developer, you
will build your scene

00:06:00.400 --> 00:06:04.805
by defining the spatial
relationships of objects.

00:06:09.590 --> 00:06:11.990
To do this, Sceneform
provides a high level

00:06:11.990 --> 00:06:14.870
SceneGraph API for defining
the hierarchy of objects

00:06:14.870 --> 00:06:18.260
and their spatial relationships.

00:06:18.260 --> 00:06:21.140
One analogy that I like to
think about is the Android view

00:06:21.140 --> 00:06:24.880
hierarchy, but instead of--

00:06:24.880 --> 00:06:26.090
obviously, in 3D.

00:06:26.090 --> 00:06:29.970
And instead of views,
we use graph nodes.

00:06:29.970 --> 00:06:32.130
Each node contains
all the information

00:06:32.130 --> 00:06:36.750
that Sceneform needs to render
it and to interact with it.

00:06:36.750 --> 00:06:39.390
And finally, nodes can
be added to other nodes,

00:06:39.390 --> 00:06:42.360
forming a parent-child
relationship.

00:06:42.360 --> 00:06:46.620
In our solar system
example, planets

00:06:46.620 --> 00:06:51.480
orbit around the sun, and
moons of these planets orbit

00:06:51.480 --> 00:06:53.040
around the planets.

00:06:53.040 --> 00:06:57.960
A natural way to define the
solar system in a SceneGraph

00:06:57.960 --> 00:07:02.160
is to make the sun the
root node and add planets

00:07:02.160 --> 00:07:07.290
as the sun's children and add
the moons as their children.

00:07:07.290 --> 00:07:11.970
That way, if you want to animate
the Earth orbiting the sun,

00:07:11.970 --> 00:07:14.970
the moon will just
follow the Earth.

00:07:14.970 --> 00:07:17.610
You don't have to do the
complicated math to figure out

00:07:17.610 --> 00:07:19.950
the moon's
relationship to the sun

00:07:19.950 --> 00:07:21.330
while the Earth is orbiting it.

00:07:25.570 --> 00:07:28.480
In this video, it's the
same solar system example

00:07:28.480 --> 00:07:31.150
that we saw a little
bit ago, but we've also

00:07:31.150 --> 00:07:33.490
added touch interaction.

00:07:33.490 --> 00:07:37.660
Nodes can become interactive by
adding touch listeners to them,

00:07:37.660 --> 00:07:38.800
obviously.

00:07:38.800 --> 00:07:42.040
And we propagate touch
events through the SceneGraph

00:07:42.040 --> 00:07:44.350
the same way Android touch
events are propagated

00:07:44.350 --> 00:07:46.700
through the view hierarchy.

00:07:46.700 --> 00:07:49.270
Nodes can contain 3D
models like the planets

00:07:49.270 --> 00:07:53.170
or the sun or 2D Android views.

00:07:53.170 --> 00:07:55.420
You can create an
Android view just

00:07:55.420 --> 00:07:57.520
as you would in
your layout editor

00:07:57.520 --> 00:08:00.460
and put it in the world
and interact with it

00:08:00.460 --> 00:08:02.770
like you would
with any other app.

00:08:02.770 --> 00:08:07.390
It's a first-class
citizen of our scene.

00:08:07.390 --> 00:08:11.110
So how does an Android
developer usually get started?

00:08:11.110 --> 00:08:12.590
With Android Studio, of course.

00:08:15.810 --> 00:08:19.290
I won't go too deep into this
because there is another talk

00:08:19.290 --> 00:08:22.980
tomorrow morning called
Build, Iterate, and Launch

00:08:22.980 --> 00:08:25.060
that will show you
all of these steps,

00:08:25.060 --> 00:08:27.630
but I want to note that we have
built a plug-in for Android

00:08:27.630 --> 00:08:30.930
Studio that allows you to drop
in 3D models that are built

00:08:30.930 --> 00:08:34.860
with standard modeling
tools like Maya,

00:08:34.860 --> 00:08:37.950
or you can download
them from Poly.

00:08:37.950 --> 00:08:42.299
You go through the import flow,
and that converts the models

00:08:42.299 --> 00:08:44.850
into an SFA and SFB format.

00:08:44.850 --> 00:08:48.510
These formats are
particular to Sceneform,

00:08:48.510 --> 00:08:51.390
and the SFA is what's
bundled into your app.

00:08:51.390 --> 00:08:57.750
So drop the SFA file into the
[? resara ?] folder, the source

00:08:57.750 --> 00:09:03.300
assets folder, and you
can ship it with your app.

00:09:03.300 --> 00:09:07.110
One thing we wanted to note--

00:09:07.110 --> 00:09:09.570
yes, you can view
and edit your models

00:09:09.570 --> 00:09:11.084
right there in Android Studio.

00:09:11.084 --> 00:09:12.750
ROMAIN GUY: And what's
important to note

00:09:12.750 --> 00:09:15.960
is that we use the same
renderer on the device

00:09:15.960 --> 00:09:18.510
and inside Android Studio,
so what you see in Studio

00:09:18.510 --> 00:09:22.073
will be what you
see on the device.

00:09:22.073 --> 00:09:23.614
One other thing to
note, again, there

00:09:23.614 --> 00:09:25.920
are going to be more
details tomorrow--

00:09:25.920 --> 00:09:28.410
the importer acts
as a gradle plugin,

00:09:28.410 --> 00:09:31.230
so for every asset that you
import inside your project,

00:09:31.230 --> 00:09:33.450
you're going to get a
new gradle task, which

00:09:33.450 --> 00:09:35.190
means that if your
designers give you

00:09:35.190 --> 00:09:37.380
a new version of the
asset, all you have to do

00:09:37.380 --> 00:09:39.200
is replace the file
in your project,

00:09:39.200 --> 00:09:41.970
and the next time you build,
we will reconvert the asset

00:09:41.970 --> 00:09:43.670
automatically and
you'll be up to date.

00:09:43.670 --> 00:09:46.714
So you won't have to worry about
going through a manual wizard

00:09:46.714 --> 00:09:48.630
every time you get a new
version of the asset.

00:09:52.741 --> 00:09:54.157
LUCY ABRAMYAN:
Let's start coding?

00:09:54.157 --> 00:09:55.410
Yeah.

00:09:55.410 --> 00:09:57.930
Let's start off with
our onCreate method

00:09:57.930 --> 00:10:00.930
and your activity,
just as you would.

00:10:00.930 --> 00:10:03.450
Find the AR fragment--

00:10:03.450 --> 00:10:05.490
find Sceneform's AR fragment.

00:10:05.490 --> 00:10:08.970
This takes care of setting
up the ARCore session for you

00:10:08.970 --> 00:10:12.760
and also manages the
lifecycle of Sceneform.

00:10:12.760 --> 00:10:15.910
And naturally, it will
contain the AR view,

00:10:15.910 --> 00:10:18.010
and the view holds a
reference to the scene.

00:10:18.010 --> 00:10:20.920
I want to note here that you
don't have to use our fragment.

00:10:20.920 --> 00:10:23.367
You can use the view, and
therefore the scene, directly.

00:10:23.367 --> 00:10:25.450
ROMAIN GUY: And this is
one of the powerful things

00:10:25.450 --> 00:10:26.290
about Sceneform.

00:10:26.290 --> 00:10:28.750
Because it's just using a
regular Android view that

00:10:28.750 --> 00:10:30.460
happens to be a
surface view, you

00:10:30.460 --> 00:10:32.560
can drop it wherever you
want in your application.

00:10:32.560 --> 00:10:34.300
It doesn't have
to be full screen.

00:10:34.300 --> 00:10:36.080
And more importantly, we don't
take over your application.

00:10:36.080 --> 00:10:38.540
If you try to do something
like Unity, for instance.

00:10:38.540 --> 00:10:40.590
Unity becomes your application.

00:10:40.590 --> 00:10:43.990
It's a very easy way to embed
AR inside an Android application

00:10:43.990 --> 00:10:45.130
that already exists.

00:10:45.130 --> 00:10:46.720
And the New York
Times, for instance,

00:10:46.720 --> 00:10:49.300
is a great example of how
far you can push this,

00:10:49.300 --> 00:10:53.680
because they show AR
through a web view.

00:10:53.680 --> 00:10:56.750
So they just put an AR view
behind a transparent web view.

00:10:56.750 --> 00:10:58.260
And as you scroll
the web view, they

00:10:58.260 --> 00:10:59.700
load content into the AR view.

00:10:59.700 --> 00:11:01.430
So you can do pretty
complex things.

00:11:01.430 --> 00:11:03.430
It doesn't have to be just
a simple full screen example

00:11:03.430 --> 00:11:04.429
like you're seeing here.

00:11:08.587 --> 00:11:10.920
LUCY ABRAMYAN: So let's start
loading all of our models.

00:11:10.920 --> 00:11:13.230
And in this case, I
have to-do for you

00:11:13.230 --> 00:11:15.240
to load the rest of them.

00:11:15.240 --> 00:11:20.580
But I'll show you how
to build a 3D model.

00:11:20.580 --> 00:11:24.780
In Sceneform, we have
two types of models.

00:11:24.780 --> 00:11:26.880
We call-- not models, sorry.

00:11:26.880 --> 00:11:27.500
Renderables.

00:11:27.500 --> 00:11:29.220
Renderables are the
things that are going

00:11:29.220 --> 00:11:30.550
to be rendered on the screen.

00:11:30.550 --> 00:11:33.990
I know we're very
creative with the naming.

00:11:33.990 --> 00:11:36.270
In this case, we
want to load the sun

00:11:36.270 --> 00:11:39.480
model, which was dropped
into our [? resara ?] folder.

00:11:39.480 --> 00:11:42.150
And so you set the
source and build.

00:11:42.150 --> 00:11:46.980
I also want to point out that
these are completable futures.

00:11:46.980 --> 00:11:49.740
So it will do the loading
in the background,

00:11:49.740 --> 00:11:52.590
and you can accept and
handle as you would

00:11:52.590 --> 00:11:54.360
with a completable future.

00:11:54.360 --> 00:11:56.400
I should also
mention Kotlin here.

00:11:56.400 --> 00:11:58.530
We could do all
of this in Kotlin,

00:11:58.530 --> 00:12:01.832
but all of the code
snippets will be in Java.

00:12:01.832 --> 00:12:03.540
ROMAIN GUY: One thing
we haven't done yet

00:12:03.540 --> 00:12:06.620
is build Kotlin
extensions for Sceneform,

00:12:06.620 --> 00:12:08.520
but if you are
inclined to do so,

00:12:08.520 --> 00:12:09.770
I would love to see your code.

00:12:12.877 --> 00:12:14.460
LUCY ABRAMYAN: So
remember earlier, we

00:12:14.460 --> 00:12:16.740
showed you this
graph representing

00:12:16.740 --> 00:12:18.270
the sun and the planets.

00:12:18.270 --> 00:12:21.420
Keep the structure in
mind, because we're

00:12:21.420 --> 00:12:25.170
going to be loading and
creating the SceneGraph.

00:12:25.170 --> 00:12:27.420
We've loaded all
the models, so now

00:12:27.420 --> 00:12:30.220
let's build the solar system.

00:12:30.220 --> 00:12:33.460
We start off with the sun node.

00:12:33.460 --> 00:12:36.190
Create a new node,
and set its renderable

00:12:36.190 --> 00:12:40.830
to be the sun model
that you had loaded.

00:12:40.830 --> 00:12:43.650
Next, we create the Earth node.

00:12:43.650 --> 00:12:47.040
We said its parent to the
Sun, therefore building

00:12:47.040 --> 00:12:49.920
the SceneGraph, starting
to build the SceneGraph.

00:12:49.920 --> 00:12:54.960
Notice here that I have set the
Sun to Earth meter as constant.

00:12:54.960 --> 00:12:57.870
In this case, I've
used 0.5 meters,

00:12:57.870 --> 00:13:01.790
because I wanted to fit the
solar system inside the living

00:13:01.790 --> 00:13:03.480
room.

00:13:03.480 --> 00:13:06.810
But we set the Earth's
local position relative

00:13:06.810 --> 00:13:08.670
to its parent, the Sun.

00:13:08.670 --> 00:13:11.040
Set the renderable, that
we loaded, and continue.

00:13:13.690 --> 00:13:15.570
Now, the Moon.

00:13:15.570 --> 00:13:18.540
Create the node, set
the parent to Earth,

00:13:18.540 --> 00:13:22.350
and notice here now that the
local position of the Moon

00:13:22.350 --> 00:13:24.810
is Earth to moon in meters.

00:13:24.810 --> 00:13:27.540
I think I've set it to be 0.1.

00:13:27.540 --> 00:13:30.800
It has nothing to
do with the Sun.

00:13:30.800 --> 00:13:35.310
Set the renderable as a moon
renderable, and you're set.

00:13:35.310 --> 00:13:38.910
Now, to animate their orbit, you
can just use Android's property

00:13:38.910 --> 00:13:40.230
animation system.

00:13:40.230 --> 00:13:44.450
We've created some
evaluators for you to use.

00:13:44.450 --> 00:13:46.910
Once we return the
root node, we now

00:13:46.910 --> 00:13:49.130
have the entire graph,
our solar system.

00:13:52.220 --> 00:13:55.660
So let's bring the solar
system into the scene.

00:13:55.660 --> 00:13:59.560
All we have to do is
parent it to the scene.

00:13:59.560 --> 00:14:02.980
And that's it-- or parent
the sun to the scene.

00:14:02.980 --> 00:14:06.580
And the solar system
is now in your room.

00:14:06.580 --> 00:14:09.820
Or we could do something else.

00:14:09.820 --> 00:14:12.550
Anchors-- I don't know if you
know about ARCore anchors,

00:14:12.550 --> 00:14:15.990
but they are how you attach
your content to the world,

00:14:15.990 --> 00:14:20.960
and ARCore makes sure that
they are anchored to the world.

00:14:20.960 --> 00:14:23.960
You can get anchors
from ARCore's hit test,

00:14:23.960 --> 00:14:26.630
based on the user's
touch events,

00:14:26.630 --> 00:14:29.240
or, with our new
cloud anchors, you

00:14:29.240 --> 00:14:32.060
can use an anchor that
another friend has

00:14:32.060 --> 00:14:35.250
created on another device.

00:14:35.250 --> 00:14:38.760
For using anchors, we've
created an extension to node,

00:14:38.760 --> 00:14:41.080
called the anchor node,
that just takes an anchor

00:14:41.080 --> 00:14:44.890
and now brings that anchor
into our SceneGraph.

00:14:44.890 --> 00:14:49.550
Set the anchor node's parent
easily, just to the scene,

00:14:49.550 --> 00:14:52.850
and then set the Sun's
parent to the anchor node.

00:14:52.850 --> 00:14:54.950
Notice how we've
rearranged it a little bit.

00:14:54.950 --> 00:14:58.580
First we had the scene with
the Sun as a root node,

00:14:58.580 --> 00:15:02.540
but now we've created the
scene, the anchor node, and then

00:15:02.540 --> 00:15:04.330
the Sun and the rest
of the solar system.

00:15:07.590 --> 00:15:09.630
I was mentioning model
renderables before.

00:15:09.630 --> 00:15:13.210
So now, we'll talk about
the 2D view renderables.

00:15:13.210 --> 00:15:17.270
To add 2D into your
app, in this case,

00:15:17.270 --> 00:15:19.540
I've used a little
info card that

00:15:19.540 --> 00:15:25.290
pops up about a quarter of
a meter above a planet, say,

00:15:25.290 --> 00:15:28.930
and you want it to display
some information on it.

00:15:28.930 --> 00:15:34.735
So I've created this node that
would hold the view renderable.

00:15:34.735 --> 00:15:37.480
I've set it to a
planet, and it will now

00:15:37.480 --> 00:15:40.420
float a quarter of a meter
above the planet, wherever

00:15:40.420 --> 00:15:42.660
that planet is.

00:15:42.660 --> 00:15:45.420
Start off by building
a view renderable.

00:15:45.420 --> 00:15:48.330
But notice here that
instead of the [? resara ?]

00:15:48.330 --> 00:15:53.730
source for the model renderable,
I've set it to the view ID,

00:15:53.730 --> 00:15:56.650
and that's all there is to it.

00:15:56.650 --> 00:15:59.460
Now you have the 2D
view, just as you

00:15:59.460 --> 00:16:02.290
would have in any
other application,

00:16:02.290 --> 00:16:05.400
and you could do things with
that view like set the text.

00:16:08.851 --> 00:16:13.050
And finally, if you want
to drag, scale, and rotate

00:16:13.050 --> 00:16:15.120
objects, we've made
that really easy

00:16:15.120 --> 00:16:18.150
for you by creating
a transformable node.

00:16:18.150 --> 00:16:20.700
The transformable node
is an extension to node,

00:16:20.700 --> 00:16:24.930
but it also understands
touch events and gestures,

00:16:24.930 --> 00:16:27.940
like dragging and scaling
and rotating objects.

00:16:27.940 --> 00:16:30.990
So in this case, if, instead
of creating a sun node,

00:16:30.990 --> 00:16:34.080
I created a
transformable sun node,

00:16:34.080 --> 00:16:37.530
I would just do everything
else that I did before,

00:16:37.530 --> 00:16:43.210
but now we can actually drag
and move the solar system.

00:16:43.210 --> 00:16:47.500
I should mention that there
was a talk earlier today

00:16:47.500 --> 00:16:50.110
about UX interactions in AR.

00:16:50.110 --> 00:16:52.420
So if you want to know
more about the best

00:16:52.420 --> 00:16:58.646
practices for UX, please go
back and look at that talk.

00:16:58.646 --> 00:17:00.080
I'll hand it over to Romain.

00:17:00.080 --> 00:17:01.871
ROMAIN GUY: Let's talk
about the materials.

00:17:01.871 --> 00:17:06.450
So this is a deceivingly
simple part of Sceneform,

00:17:06.450 --> 00:17:08.089
but before you
can understand how

00:17:08.089 --> 00:17:09.630
to create your own
material, you have

00:17:09.630 --> 00:17:13.560
to understand the concept behind
physically-based rendering.

00:17:13.560 --> 00:17:15.916
So after important assets
through the Android Studio

00:17:15.916 --> 00:17:18.290
plugin, like [INAUDIBLE] said,
you end up with two files,

00:17:18.290 --> 00:17:20.069
there's a dot sfa and a dot sfb.

00:17:20.069 --> 00:17:24.300
So the dot sfb is the binary
that goes into your application

00:17:24.300 --> 00:17:26.010
and that would
load that run time.

00:17:26.010 --> 00:17:31.590
The dot sfa is, effectively, a
json description of the asset.

00:17:31.590 --> 00:17:33.640
It looks a little bit
something like this.

00:17:33.640 --> 00:17:36.600
So this is the sfa
from the Moon, the moon

00:17:36.600 --> 00:17:38.790
of the Earth from our example.

00:17:38.790 --> 00:17:40.950
And you can see this
attribute's called baseColor

00:17:40.950 --> 00:17:42.970
normal and metallicRoughness.

00:17:42.970 --> 00:17:46.350
So those point to
textures that are defined

00:17:46.350 --> 00:17:49.830
somewhere else in the sfa file.

00:17:49.830 --> 00:17:52.350
I'm not going to go into
details about the syntax

00:17:52.350 --> 00:17:54.240
and the structure
of the sfa file,

00:17:54.240 --> 00:17:56.600
mostly because there is
excellent documentation that's

00:17:56.600 --> 00:17:57.390
available online.

00:17:57.390 --> 00:17:59.670
There's also the talk
tomorrow morning,

00:17:59.670 --> 00:18:01.120
so you should check that out.

00:18:01.120 --> 00:18:05.370
But what I want to talk about
is, what kind of textures

00:18:05.370 --> 00:18:08.530
do we need to create to be
meaningful for the color,

00:18:08.530 --> 00:18:11.070
the normal, and there's
two real ones, the metallic

00:18:11.070 --> 00:18:13.650
and the roughness textures?

00:18:13.650 --> 00:18:15.750
But again, before
we do this, we have

00:18:15.750 --> 00:18:17.560
to talk about physically
based rendering.

00:18:17.560 --> 00:18:19.735
So physically
based rendering has

00:18:19.735 --> 00:18:22.630
started becoming quite popular
over the past, I would say,

00:18:22.630 --> 00:18:23.930
three or four years.

00:18:23.930 --> 00:18:25.590
Starting in the
VFX industry is now

00:18:25.590 --> 00:18:28.200
using a lot of triple A games.

00:18:28.200 --> 00:18:30.930
It's still fairly
uncommon on mobile,

00:18:30.930 --> 00:18:33.720
and the basic idea
behind it is that we

00:18:33.720 --> 00:18:36.480
are relying on
physical principles

00:18:36.480 --> 00:18:39.600
to define all the behaviors
and all the equations

00:18:39.600 --> 00:18:42.030
that we use in the
rendering system.

00:18:42.030 --> 00:18:45.150
So that includes things like
separating the lighting code

00:18:45.150 --> 00:18:48.060
from the code that defines the
surface and that doesn't impact

00:18:48.060 --> 00:18:49.650
on the measures themselves.

00:18:49.650 --> 00:18:53.460
It means that we have to take
into account laws of physics,

00:18:53.460 --> 00:18:55.470
like the energy conservation.

00:18:55.470 --> 00:18:58.080
We use physical light
units, so for instance,

00:18:58.080 --> 00:19:01.770
when we declare a sun
as a dynamic [INAUDIBLE]

00:19:01.770 --> 00:19:03.490
we use the unit called lux.

00:19:03.490 --> 00:19:05.865
If you were to
lighten your scene,

00:19:05.865 --> 00:19:09.280
in your AR scene, that's
just a light bulb,

00:19:09.280 --> 00:19:14.260
you can use watts
lumens as the unit.

00:19:14.260 --> 00:19:15.760
So it's a number
of things like this

00:19:15.760 --> 00:19:20.250
that are grounded in reality
that will help us validate

00:19:20.250 --> 00:19:22.920
our rendering, which also makes
our life easier, because those

00:19:22.920 --> 00:19:27.089
are things we deal with everyday
and that feel natural to us.

00:19:27.089 --> 00:19:28.630
And I'm going to
show you an example.

00:19:28.630 --> 00:19:29.940
So this is an example--

00:19:29.940 --> 00:19:31.480
it's not in AR,
but this has been

00:19:31.480 --> 00:19:33.930
rendered using a
rendering engine, just

00:19:33.930 --> 00:19:35.190
a very simple sphere.

00:19:35.190 --> 00:19:38.840
And you can see that there
are reflections on the sphere.

00:19:38.840 --> 00:19:40.730
What you are seeing
here in action

00:19:40.730 --> 00:19:44.070
it is a physical effect
called the Fresnel effect

00:19:44.070 --> 00:19:47.550
after a 19th century physicist.

00:19:47.550 --> 00:19:50.260
And the closer you are to
the edge of the sphere,

00:19:50.260 --> 00:19:52.140
the more you can
see the reflections.

00:19:52.140 --> 00:19:55.000
And this is a natural phenomenon
that you can see everywhere.

00:19:55.000 --> 00:19:57.589
So this is a photo I
took in Lake Tahoe,

00:19:57.589 --> 00:20:00.130
and you can see that, close to
the edge where I was standing,

00:20:00.130 --> 00:20:01.830
you can see through the water.

00:20:01.830 --> 00:20:04.710
And the further away
you get, the more

00:20:04.710 --> 00:20:06.570
you can see the
reflections of the water.

00:20:06.570 --> 00:20:08.790
And, again, you can see
this on every object.

00:20:08.790 --> 00:20:11.430
Every object around you
follows this principle.

00:20:11.430 --> 00:20:14.070
Might not be obvious at first,
but this is what happens.

00:20:14.070 --> 00:20:16.650
And we recreate this kind
of physical behaviors

00:20:16.650 --> 00:20:18.810
in our rendering
engine to make things

00:20:18.810 --> 00:20:22.720
look as realistic as possible.

00:20:22.720 --> 00:20:27.040
So we follow a work flow format
called the metallic roughness

00:20:27.040 --> 00:20:27.790
workflow.

00:20:27.790 --> 00:20:28.780
If you look that
up, you're going

00:20:28.780 --> 00:20:30.760
to see there's a lot of
information out there.

00:20:30.760 --> 00:20:32.290
The metallic
roughness workflow is

00:20:32.290 --> 00:20:34.660
available in a lot
of popular tools.

00:20:34.660 --> 00:20:38.020
If you've used Unity 5,
you have access to it.

00:20:38.020 --> 00:20:40.150
Unreal Engine 4 uses it.

00:20:40.150 --> 00:20:43.480
Blender, recent versions, has
access to metallic workflow,

00:20:43.480 --> 00:20:44.320
as well.

00:20:44.320 --> 00:20:47.830
So the way it works is, when you
want to define a new material,

00:20:47.830 --> 00:20:50.860
you're actually trying
to describe it and define

00:20:50.860 --> 00:20:52.030
a surface.

00:20:52.030 --> 00:20:54.550
And to define a surface, you're
going to need three things,

00:20:54.550 --> 00:20:56.350
and we're going to take them
in this order for a very

00:20:56.350 --> 00:20:57.790
specific reason, and we're
going to explain them

00:20:57.790 --> 00:20:58.960
in a little bit.

00:20:58.960 --> 00:21:02.020
The first one is you need to
define the metallic property

00:21:02.020 --> 00:21:03.940
of the surface.

00:21:03.940 --> 00:21:05.380
Often, we talk
about metallicness,

00:21:05.380 --> 00:21:06.610
but it's not even a word.

00:21:06.610 --> 00:21:09.370
So metallic, you
know, at a high level,

00:21:09.370 --> 00:21:11.890
is whether or not the
object is a metal.

00:21:11.890 --> 00:21:14.830
And we're going to see why
this is very important to us.

00:21:14.830 --> 00:21:17.260
Then you're going to define
the color of the object,

00:21:17.260 --> 00:21:19.330
and we call it the
base color, as opposed

00:21:19.330 --> 00:21:21.502
to the diffuse color
or the specular color.

00:21:21.502 --> 00:21:22.960
Those are terms
that you might have

00:21:22.960 --> 00:21:25.210
seen if you use older
engines, and, again,

00:21:25.210 --> 00:21:26.650
there's a reason for that.

00:21:26.650 --> 00:21:29.860
Finally, you need to define
something called a roughness.

00:21:29.860 --> 00:21:32.900
Roughly, it means how
shiny the object is.

00:21:32.900 --> 00:21:34.400
And if you want to
go further, there

00:21:34.400 --> 00:21:35.920
are two other things
you can define

00:21:35.920 --> 00:21:40.000
to give your surface
more details and a more

00:21:40.000 --> 00:21:41.210
natural appearance.

00:21:41.210 --> 00:21:43.810
So the first one is the
normal or the normal map.

00:21:43.810 --> 00:21:47.200
It just helps break the
evenness of the surface.

00:21:47.200 --> 00:21:51.970
And the second one is called the
ambient occlusion or occlusion.

00:21:51.970 --> 00:21:55.060
So, first, what is in non-metal?

00:21:55.060 --> 00:21:56.890
I'll spare you the equation.

00:21:56.890 --> 00:21:58.480
This is actually fairly simple.

00:21:58.480 --> 00:22:01.470
So here at the bottom, we have
an object-- an orange object.

00:22:01.470 --> 00:22:04.700
It's drawn in gray to make
the diagram easier to read.

00:22:04.700 --> 00:22:06.670
But we have light coming
from a light source

00:22:06.670 --> 00:22:09.050
and hitting the
surface of the object.

00:22:09.050 --> 00:22:11.560
And the light that
hits the object

00:22:11.560 --> 00:22:13.670
gets split into two components.

00:22:13.670 --> 00:22:16.610
The first one in the white
is the reflected part.

00:22:16.610 --> 00:22:18.400
So those are all
the reflections.

00:22:18.400 --> 00:22:21.580
So in that orange ball that
we saw before, at the edges,

00:22:21.580 --> 00:22:23.080
you could see those reflections.

00:22:23.080 --> 00:22:25.690
That's this part of the light.

00:22:25.690 --> 00:22:27.190
And then the other
part of the light

00:22:27.190 --> 00:22:30.100
is refracted into the object.

00:22:30.100 --> 00:22:33.040
And most objects around us,
they absorb some of the light.

00:22:33.040 --> 00:22:34.255
The light enters the object.

00:22:34.255 --> 00:22:37.570
It gets scattered, bounces
around inside the object.

00:22:37.570 --> 00:22:39.040
And, eventually,
some of the light

00:22:39.040 --> 00:22:41.090
will come out,
but not all of it.

00:22:41.090 --> 00:22:43.150
And this is what
gives object colors.

00:22:43.150 --> 00:22:46.360
In that particular case, because
the object appears orange,

00:22:46.360 --> 00:22:49.570
it just means that green and
blue components of the light

00:22:49.570 --> 00:22:51.930
have been absorbed
inside the object,

00:22:51.930 --> 00:22:53.430
and that orange
light that comes out

00:22:53.430 --> 00:22:55.425
is called the diffuse light.

00:22:55.425 --> 00:22:57.820
The white light is called
the specular light.

00:22:57.820 --> 00:23:00.040
So specular is for
the reflections,

00:23:00.040 --> 00:23:03.860
and diffuse is for
everything else.

00:23:03.860 --> 00:23:07.000
So this is an example of a
non-metallic orange ball,

00:23:07.000 --> 00:23:09.490
and you can see
these reflections.

00:23:09.490 --> 00:23:11.326
If you look at the
reflections here,

00:23:11.326 --> 00:23:12.700
this is simulating
an environment

00:23:12.700 --> 00:23:15.847
inside the classroom where we
have overhead white lights.

00:23:15.847 --> 00:23:17.680
And you can see that,
even though the object

00:23:17.680 --> 00:23:21.281
itself is orange, the
lights appear white.

00:23:21.281 --> 00:23:22.780
That's because they
just bounce off.

00:23:22.780 --> 00:23:23.946
They don't enter the object.

00:23:23.946 --> 00:23:28.510
They don't take the color
of the object into account.

00:23:28.510 --> 00:23:31.450
And then the rest of the object,
the non-reflective parts,

00:23:31.450 --> 00:23:33.980
are orange as expected.

00:23:33.980 --> 00:23:37.810
Now, when you have a metallic
object, metals are conductors,

00:23:37.810 --> 00:23:40.660
and they're called conductors
because, when that energy hits

00:23:40.660 --> 00:23:43.240
them-- in this case, light--

00:23:43.240 --> 00:23:46.090
the part of the energy that's
reflected into the surface

00:23:46.090 --> 00:23:47.220
gets absorbed.

00:23:47.220 --> 00:23:49.300
It just gets transmitted
into the object

00:23:49.300 --> 00:23:51.050
and does not get
scattered outside,

00:23:51.050 --> 00:23:52.300
so there's no diffused light.

00:23:52.300 --> 00:23:53.990
You only get reflections.

00:23:53.990 --> 00:23:56.350
However, what happens
with these reflections

00:23:56.350 --> 00:23:59.780
is that they get to take
the color of the object.

00:23:59.780 --> 00:24:01.780
So you don't get the
white reflections anymore.

00:24:01.780 --> 00:24:03.910
You get the orange
reflections instead.

00:24:03.910 --> 00:24:06.970
So if we take the same ball
that we just saw, and we turn it

00:24:06.970 --> 00:24:10.930
into metal, look again
at the overhead lights

00:24:10.930 --> 00:24:12.010
of that classroom.

00:24:12.010 --> 00:24:14.060
You can see that they
now appear orange,

00:24:14.060 --> 00:24:17.590
and this is because the
rest of the specular light

00:24:17.590 --> 00:24:20.450
was absorbed inside the object.

00:24:20.450 --> 00:24:25.476
You can also see another side
effect of this Fresnel law

00:24:25.476 --> 00:24:26.600
that we just talked about--

00:24:26.600 --> 00:24:28.440
at the edges of
the sphere, you can

00:24:28.440 --> 00:24:30.440
see that the reflections
are not orange anymore.

00:24:30.440 --> 00:24:32.700
They take on the color
of the environment.

00:24:32.700 --> 00:24:34.610
And this is, again, a
very natural effect.

00:24:34.610 --> 00:24:36.651
It feels weird when you
see it for the first time

00:24:36.651 --> 00:24:40.980
in the rendering engine, but
rendering engineers like me who

00:24:40.980 --> 00:24:43.776
are obsessed about their
work, come Christmastime,

00:24:43.776 --> 00:24:46.400
they look at the Christmas tree,
and they take a picture of one

00:24:46.400 --> 00:24:47.450
of the ornaments.

00:24:47.450 --> 00:24:50.240
I was holding one of
my phones on the side,

00:24:50.240 --> 00:24:52.640
I was lighting this
green metallic ball

00:24:52.640 --> 00:24:55.104
with an orange light from
the wallpaper on my phone,

00:24:55.104 --> 00:24:57.020
and you can see that,
on the edge of the ball,

00:24:57.020 --> 00:24:59.010
suddenly the reflections
are not green anymore.

00:24:59.010 --> 00:25:02.360
They take on the orange light
coming from that light source.

00:25:02.360 --> 00:25:05.316
So what we just saw
here can appear weird

00:25:05.316 --> 00:25:07.440
when you see it on the
computer for the first time.

00:25:07.440 --> 00:25:10.070
But this is an effect that's
perfectly natural that happens

00:25:10.070 --> 00:25:13.190
everywhere around you.

00:25:13.190 --> 00:25:14.595
So the metallic property--

00:25:14.595 --> 00:25:17.646
I mentioned that this is the
first thing you should decide,

00:25:17.646 --> 00:25:19.370
and you've now seen
why, because when

00:25:19.370 --> 00:25:21.786
you define the color of the
object, when you find the base

00:25:21.786 --> 00:25:26.270
color, depending on whether
the product is metallic or not,

00:25:26.270 --> 00:25:27.680
it's going to
dramatically change

00:25:27.680 --> 00:25:28.935
the aspect of the surface.

00:25:28.935 --> 00:25:30.310
So you should
always decide first

00:25:30.310 --> 00:25:33.320
whether you're dealing
with metal or non-metal.

00:25:33.320 --> 00:25:35.780
So when it comes time to
create the actual texture,

00:25:35.780 --> 00:25:38.504
the metallicness
of the object can

00:25:38.504 --> 00:25:39.920
be defined as a
grayscale texture,

00:25:39.920 --> 00:25:42.530
so that uses between 0 and 255.

00:25:42.530 --> 00:25:46.610
At 0, the object is not a metal,
and at 255 when it's white,

00:25:46.610 --> 00:25:48.570
the object is a metal.

00:25:48.570 --> 00:25:52.640
Most of the time, the value
should be either 0 or either 1.

00:25:52.640 --> 00:25:54.330
All the venues in
between are mostly

00:25:54.330 --> 00:25:58.010
used for anti-aliasing
purposes, because, you know,

00:25:58.010 --> 00:26:01.160
your texture could contain
maybe a metal that's painted,

00:26:01.160 --> 00:26:03.020
and the paint itself
is not a metal,

00:26:03.020 --> 00:26:06.350
so, at the edges of the paint,
you want nice transitions

00:26:06.350 --> 00:26:08.300
from metal to non-metal.

00:26:08.300 --> 00:26:11.930
Certain alloys in real life
happens to be a mixture,

00:26:11.930 --> 00:26:14.190
and you can use intermediate
values, as well.

00:26:14.190 --> 00:26:16.231
But most of them, you
won't have to deal with it.

00:26:16.231 --> 00:26:18.590
You don't have to
worry about it.

00:26:18.590 --> 00:26:21.650
Very quickly, when
a metal gets rusty,

00:26:21.650 --> 00:26:24.020
the texture becomes nonmetallic.

00:26:24.020 --> 00:26:26.690
So if you are trying to
create a surface that's rusty,

00:26:26.690 --> 00:26:30.660
the rust stains
will be non-metal.

00:26:30.660 --> 00:26:33.740
Yeah-- oh, yeah, so that's
something that, again, you'll

00:26:33.740 --> 00:26:34.550
see tomorrow.

00:26:34.550 --> 00:26:36.466
You don't have to use
textures for everything.

00:26:36.466 --> 00:26:37.700
You can also use constants.

00:26:37.700 --> 00:26:39.560
And very often, you
can get away with not

00:26:39.560 --> 00:26:41.780
having a texture for the
metallicness of the object.

00:26:41.780 --> 00:26:44.240
You can just say either
it's a metal or it's not.

00:26:44.240 --> 00:26:44.740
OK.

00:26:44.740 --> 00:26:46.790
Next step, you have to
define the base color, so

00:26:46.790 --> 00:26:48.550
the color of the object.

00:26:48.550 --> 00:26:51.260
It defines either
the diffuse color

00:26:51.260 --> 00:26:53.450
of the object for
nonmetals, or the specular

00:26:53.450 --> 00:26:55.370
color, or the color
of the reflections,

00:26:55.370 --> 00:26:57.610
for metallic objects.

00:26:57.610 --> 00:27:01.220
And what's quite difficult to
do when you create a base color

00:27:01.220 --> 00:27:03.350
or texture is that
it must be completely

00:27:03.350 --> 00:27:05.957
devoid of any lighting
information or in shadowing,

00:27:05.957 --> 00:27:07.540
and we're going to
look at an example.

00:27:07.540 --> 00:27:09.380
And it can be hard
because, as human beings,

00:27:09.380 --> 00:27:11.840
we never see the actual
color of an object.

00:27:11.840 --> 00:27:14.340
We only see objects
through lighting.

00:27:14.340 --> 00:27:16.340
So it's difficult to
imagine what it looks like,

00:27:16.340 --> 00:27:18.620
but you can quickly
get used to it.

00:27:18.620 --> 00:27:21.530
And whenever you use a tool
like Photoshop or Affinity Photo

00:27:21.530 --> 00:27:23.090
to build your
textures, make sure

00:27:23.090 --> 00:27:26.331
that you're working in the
sRGB color space, which

00:27:26.331 --> 00:27:28.580
is what this tool should be
doing by default, but just

00:27:28.580 --> 00:27:30.690
in case, make sure
you and your artists

00:27:30.690 --> 00:27:33.300
work in that color space.

00:27:33.300 --> 00:27:37.850
So this is a quick guide of how
to build colors for objects.

00:27:37.850 --> 00:27:42.620
Based on real world data,
most of nonmetallic objects

00:27:42.620 --> 00:27:44.840
use most of the range
of the brightness,

00:27:44.840 --> 00:27:47.960
so whenever you pick a
color in the color picker

00:27:47.960 --> 00:27:50.690
for a nonmetallic object,
the values of your RGB colors

00:27:50.690 --> 00:27:53.060
should be between 10 and 240.

00:27:53.060 --> 00:27:55.160
And there's nothing
as dark as 0,

00:27:55.160 --> 00:27:58.640
there's nothing as bright as
255 when we deal with nonmetals.

00:27:58.640 --> 00:28:00.930
In metals, on the
other hand, they're

00:28:00.930 --> 00:28:02.390
are always fairly bright.

00:28:02.390 --> 00:28:05.420
So dark metals
basically don't exist.

00:28:05.420 --> 00:28:07.940
So you should stay in the
range that's shown up here.

00:28:07.940 --> 00:28:09.440
It was mentioned
that you should not

00:28:09.440 --> 00:28:11.990
have any lighting
information inside your base

00:28:11.990 --> 00:28:13.400
color of the object.

00:28:13.400 --> 00:28:16.970
And you can see here a set of
swatches taken from real world

00:28:16.970 --> 00:28:19.140
observation.

00:28:19.140 --> 00:28:22.060
And you can see that gold, for
instance, that, in real life,

00:28:22.060 --> 00:28:24.140
appears quite yellow
and saturated,

00:28:24.140 --> 00:28:26.130
the base color is actually
not that saturated.

00:28:26.130 --> 00:28:27.920
All the colors in
the base color tend

00:28:27.920 --> 00:28:31.910
to be they pale compared to
what you actually perceive.

00:28:31.910 --> 00:28:33.680
So here's another example.

00:28:33.680 --> 00:28:38.364
On the right, you can see a
material to represent bricks,

00:28:38.364 --> 00:28:40.530
and on the left, you can
see the base color texture.

00:28:40.530 --> 00:28:41.810
And you see the difference.

00:28:41.810 --> 00:28:44.930
Once we light the object, all
the contrast and saturation

00:28:44.930 --> 00:28:45.500
appears.

00:28:45.500 --> 00:28:48.860
But all of that information
is not in the original texture

00:28:48.860 --> 00:28:51.410
that we're using to
create this material.

00:28:51.410 --> 00:28:53.600
So, again, if you
work with your artist,

00:28:53.600 --> 00:28:56.330
make sure they're familiar
with the metallic roughness

00:28:56.330 --> 00:28:57.900
workflow, or make
sure that they just

00:28:57.900 --> 00:29:01.540
understand that the base
color map should not contain

00:29:01.540 --> 00:29:03.770
any lighting or shadowing.

00:29:03.770 --> 00:29:06.620
Now, I mentioned the
[INAUDIBLE] parameter

00:29:06.620 --> 00:29:09.620
is called the roughness, and it
defines how shiny an object is.

00:29:09.620 --> 00:29:12.410
So a simple way to
define a surface

00:29:12.410 --> 00:29:15.000
is like this-- it's
infinitely smooth.

00:29:15.000 --> 00:29:18.470
There's no object in
the world that's smooth.

00:29:18.470 --> 00:29:21.830
And what happens when
you have a smooth object,

00:29:21.830 --> 00:29:25.580
rays of light that are coming
parallel to each other bounce

00:29:25.580 --> 00:29:28.210
off parallel to
each other, as well,

00:29:28.210 --> 00:29:30.130
so you get very
sharp reflections.

00:29:30.130 --> 00:29:32.660
Rough objects, on
the other hand,

00:29:32.660 --> 00:29:35.260
have what we call
microfacets at the surface.

00:29:35.260 --> 00:29:38.350
You can think of those
as very tiny mirrors

00:29:38.350 --> 00:29:40.750
that may not be oriented
in the same directions.

00:29:40.750 --> 00:29:44.380
So when light comes in, you
have these rays of light

00:29:44.380 --> 00:29:46.540
that can bounce off
in random directions,

00:29:46.540 --> 00:29:51.390
and that creates
blurry reflections.

00:29:51.390 --> 00:29:52.510
And those are examples.

00:29:52.510 --> 00:29:56.830
At the top, you can see
a ball of yellow metal,

00:29:56.830 --> 00:30:00.160
and we increased the
roughness from 0 to 1.

00:30:00.160 --> 00:30:02.299
And at the bottom, we
have a nonmetallic ball,

00:30:02.299 --> 00:30:04.090
and we increased the
roughness from 0 to 1.

00:30:04.090 --> 00:30:05.650
And you can see the effect here.

00:30:05.650 --> 00:30:07.630
We start with very
sharp reflection,

00:30:07.630 --> 00:30:09.610
and as we get closer
and closer to 1,

00:30:09.610 --> 00:30:12.697
the reflections become so blurry
that we can't even perceive

00:30:12.697 --> 00:30:13.780
that they are reflections.

00:30:13.780 --> 00:30:15.970
They're there, but they're
spread over, basically,

00:30:15.970 --> 00:30:17.290
the entire surface--

00:30:17.290 --> 00:30:18.980
the entire visible surface.

00:30:18.980 --> 00:30:21.940
So this is a very
powerful feature,

00:30:21.940 --> 00:30:23.800
because it lets you,
again, create things

00:30:23.800 --> 00:30:27.310
like polished metals
or plastic that

00:30:27.310 --> 00:30:30.750
has been used for quite
a while, and it's become,

00:30:30.750 --> 00:30:31.630
basically, rough.

00:30:34.380 --> 00:30:38.309
So roughness is very similar
to the metallic property.

00:30:38.309 --> 00:30:39.350
It's a grayscale texture.

00:30:39.350 --> 00:30:41.790
Use values between 0 and 255.

00:30:41.790 --> 00:30:45.502
At 0, your surface is going
to be glossy or a bit shiny.

00:30:45.502 --> 00:30:47.210
At 255, it's going to
be extremely rough.

00:30:47.210 --> 00:30:50.329
You're not going to be able to
see the reflections anymore.

00:30:50.329 --> 00:30:52.370
And just be aware that
there might be differences

00:30:52.370 --> 00:30:53.790
between different tools.

00:30:53.790 --> 00:30:57.599
So if you specify roughness
of 100 that's in Blender,

00:30:57.599 --> 00:30:59.390
that same roughness
might look a little bit

00:30:59.390 --> 00:31:00.820
different in a different
engine, because there

00:31:00.820 --> 00:31:03.184
are different ways of
doing those computations.

00:31:03.184 --> 00:31:04.850
You shouldn't worry
too much about this.

00:31:04.850 --> 00:31:06.710
Just tweak the
asset until it looks

00:31:06.710 --> 00:31:08.240
right instead of [INAUDIBLE].

00:31:08.240 --> 00:31:11.480
Sometimes, the roughness will
be called glossiness instead,

00:31:11.480 --> 00:31:13.265
and glossiness is just
the opposite value,

00:31:13.265 --> 00:31:15.860
so you can just invert
the texture in Photoshop,

00:31:15.860 --> 00:31:19.585
for instance, to get
the roughness map.

00:31:19.585 --> 00:31:20.960
Next, we want to
add some detail,

00:31:20.960 --> 00:31:24.710
so to save on
performance and memory,

00:31:24.710 --> 00:31:27.110
we try to use smooth
surfaces, so when

00:31:27.110 --> 00:31:28.750
you build your mesh
made of triangles,

00:31:28.750 --> 00:31:29.750
you use smooth surfaces.

00:31:29.750 --> 00:31:31.250
So here we have an
example of bricks

00:31:31.250 --> 00:31:33.530
that are completely smooth.

00:31:33.530 --> 00:31:35.570
To add some details, we
can use a normal map.

00:31:35.570 --> 00:31:37.040
A normal map looks like this.

00:31:37.040 --> 00:31:39.230
When you apply it to
the object, suddenly you

00:31:39.230 --> 00:31:42.594
get a little bit of shadowing
and more information,

00:31:42.594 --> 00:31:43.760
more details on the surface.

00:31:43.760 --> 00:31:46.321
I'm not going to go into too
much details about normal maps,

00:31:46.321 --> 00:31:48.570
because there's a ton of
information available online,

00:31:48.570 --> 00:31:51.260
so we're going to skip that
before we run out of time.

00:31:51.260 --> 00:31:54.110
The only thing to know is
that the colors instead

00:31:54.110 --> 00:31:57.100
the normal map encode a vector.

00:31:57.100 --> 00:31:58.130
It's a direction.

00:31:58.130 --> 00:31:59.150
It's not a color.

00:32:02.460 --> 00:32:03.840
Next one is ambient occlusion.

00:32:03.840 --> 00:32:06.000
So here we have we
have our bricks,

00:32:06.000 --> 00:32:07.542
and they have been
textured properly.

00:32:07.542 --> 00:32:08.458
They have a roughness.

00:32:08.458 --> 00:32:09.270
They have metallic.

00:32:09.270 --> 00:32:10.730
They are normal map.

00:32:10.730 --> 00:32:13.920
But we are lacking what we
call macro scale shadowing

00:32:13.920 --> 00:32:18.510
information, because a
brick has depth, so it

00:32:18.510 --> 00:32:20.250
will create shadows on itself.

00:32:20.250 --> 00:32:22.967
Like, the surface should be
casting shadows on itself.

00:32:22.967 --> 00:32:25.050
But because we don't have
access to the triangles,

00:32:25.050 --> 00:32:27.591
instead, what we've created is
just a black and white texture

00:32:27.591 --> 00:32:29.670
that tells us where
the shadows should be.

00:32:29.670 --> 00:32:33.270
So, again, that's called
ambient occlusion.

00:32:33.270 --> 00:32:35.670
Let's see the before and after.

00:32:35.670 --> 00:32:38.410
That's after, before, after.

00:32:38.410 --> 00:32:42.370
So, again, adds a lot of detail
and depth to your object.

00:32:42.370 --> 00:32:45.180
And the ambient occlusion map
is just a grayscale texture.

00:32:45.180 --> 00:32:48.570
When the values are 0, the
pixel is completely in the dark.

00:32:48.570 --> 00:32:51.100
You should never have
value set exactly to 0.

00:32:51.100 --> 00:32:54.450
At 255, there's going
to be no shadowing.

00:32:54.450 --> 00:32:56.010
It doesn't affect
all the lighting.

00:32:56.010 --> 00:32:57.930
I'm not going to go into
too much detail here.

00:32:57.930 --> 00:32:59.471
So any time you
create an object that

00:32:59.471 --> 00:33:02.610
has cracks or crevices,
that kind of stuff,

00:33:02.610 --> 00:33:05.340
you should be using the
ambient occlusion map.

00:33:05.340 --> 00:33:07.177
So in the end, we have
our five textures.

00:33:07.177 --> 00:33:09.510
We have the metallicness, the
base color, the roughness,

00:33:09.510 --> 00:33:11.490
the normal, and the
ambient collusion.

00:33:11.490 --> 00:33:14.222
And if we get them all together
in this particular example,

00:33:14.222 --> 00:33:15.930
you can create an
object where everything

00:33:15.930 --> 00:33:17.310
varies from pixel to pixel.

00:33:17.310 --> 00:33:20.059
So here we have a metal
ball, but for some reason,

00:33:20.059 --> 00:33:22.350
some of the tiles are missing,
and those are not metals

00:33:22.350 --> 00:33:22.850
anymore.

00:33:22.850 --> 00:33:24.240
Their reflections are just gone.

00:33:24.240 --> 00:33:26.290
So you can see we just--
the smooth textures,

00:33:26.290 --> 00:33:29.220
we can create very impressive
variations from pixel

00:33:29.220 --> 00:33:32.250
to pixel and create most
real world materials

00:33:32.250 --> 00:33:34.860
in a photorealistic manner.

00:33:34.860 --> 00:33:36.970
One thing you can do to
optimize your materials,

00:33:36.970 --> 00:33:39.664
especially if use use the
three format called GLTF, which

00:33:39.664 --> 00:33:41.830
I'm sure they're going to
talk about more in details

00:33:41.830 --> 00:33:45.690
tomorrow, you can pack the
channels into a single texture.

00:33:45.690 --> 00:33:48.470
So ambient occlusion,
roughness, and metallicness

00:33:48.470 --> 00:33:50.970
are grayscale
images, so they can

00:33:50.970 --> 00:33:53.560
each fit in one of the channels
of a [INAUDIBLE] image.

00:33:53.560 --> 00:33:55.890
You can do this easily
in any good photo editor,

00:33:55.890 --> 00:34:00.215
like Gimp or Affinity
Photo here or Photoshop,

00:34:00.215 --> 00:34:02.340
and you can have only one
texture instead of three.

00:34:02.340 --> 00:34:03.965
It's going to speed
up your load times.

00:34:03.965 --> 00:34:06.761
Going to speed up your
rendering, as well.

00:34:06.761 --> 00:34:08.969
So now I want to talk about
performance a little bit.

00:34:08.969 --> 00:34:11.427
So one of the features that we
have inside of our rendering

00:34:11.427 --> 00:34:13.449
engine is something
called dynamic resolution.

00:34:13.449 --> 00:34:17.100
What we do is we always watch
the time spent on the GPU

00:34:17.100 --> 00:34:18.780
to render every frame.

00:34:18.780 --> 00:34:20.790
And instead of dropping
frames when there's

00:34:20.790 --> 00:34:25.260
too much to render, we adapt
the resolution of the rendering,

00:34:25.260 --> 00:34:27.540
so we smoothly adapt
the resolution, both

00:34:27.540 --> 00:34:29.760
on the vertical and
horizontal axis,

00:34:29.760 --> 00:34:31.679
sometimes with that
first one axis,

00:34:31.679 --> 00:34:33.969
then the other, sometimes
both at the same time.

00:34:33.969 --> 00:34:35.427
So what this means
for you is that,

00:34:35.427 --> 00:34:36.940
as you're building
a narrow scene,

00:34:36.940 --> 00:34:39.481
if you make it too complicated,
if you have too many objects,

00:34:39.481 --> 00:34:41.469
if you have materials
that are too complex,

00:34:41.469 --> 00:34:42.760
we're not going to drop frames.

00:34:42.760 --> 00:34:46.050
We're always going to favor
performance over anything else.

00:34:46.050 --> 00:34:49.929
But we are going to lower
the resolution of your scene.

00:34:49.929 --> 00:34:51.570
It works really
well on our phones,

00:34:51.570 --> 00:34:53.790
because we have really
high density displays,

00:34:53.790 --> 00:34:56.052
so it's really hard to
tell when this is going on.

00:34:56.052 --> 00:34:58.010
And I'm sure that most
of you won't even notice

00:34:58.010 --> 00:34:59.250
as you are using the app.

00:34:59.250 --> 00:35:01.290
But, basically,
it boils down to,

00:35:01.290 --> 00:35:04.170
do you want to see a complex
scene at lower resolution,

00:35:04.170 --> 00:35:06.990
or do you want to see a simple
scene at higher resolution?

00:35:06.990 --> 00:35:08.730
The maximum resolution
we currently

00:35:08.730 --> 00:35:12.764
use is 1080 p, even though on
devices like the Pixel 2 XL,

00:35:12.764 --> 00:35:15.180
we're not going to use the
full resolution of the display,

00:35:15.180 --> 00:35:17.130
because it's just
way too many pixels

00:35:17.130 --> 00:35:19.527
to be able to drive
physically based rendering.

00:35:19.527 --> 00:35:22.110
LUCY ABRAMYAN: Romain, I want
to call out that the render does

00:35:22.110 --> 00:35:23.250
this automatically.

00:35:23.250 --> 00:35:24.410
ROMAIN GUY: Yes, it's
done automatically.

00:35:24.410 --> 00:35:25.450
You don't have to
worry about it.

00:35:25.450 --> 00:35:27.290
We take care of
performance, in this case.

00:35:27.290 --> 00:35:29.620
[? Measures, ?] when
you create your object,

00:35:29.620 --> 00:35:32.750
it can be really tempting,
especially for your artist,

00:35:32.750 --> 00:35:37.770
to add a lot of triangles to
create really smooth surfaces.

00:35:37.770 --> 00:35:40.560
But we're running all
this on mobile phones,

00:35:40.560 --> 00:35:43.260
so we should be careful with
the complexity of the objects.

00:35:43.260 --> 00:35:46.980
To give you a rough idea of
what we call a hero object,

00:35:46.980 --> 00:35:49.080
so an object you can
get pretty close to,

00:35:49.080 --> 00:35:51.810
should have maybe, at
most, 10,000 triangles.

00:35:51.810 --> 00:35:54.880
But even that, if you can avoid
using that many triangles,

00:35:54.880 --> 00:35:55.860
it would be great.

00:35:55.860 --> 00:35:58.380
And if you use 10,000
triangles in one object,

00:35:58.380 --> 00:36:00.920
make sure there's only one
of them and not 100 of them.

00:36:00.920 --> 00:36:03.099
Otherwise, performance
is going to suffer.

00:36:03.099 --> 00:36:05.640
And this is already-- with some
of our early access partners,

00:36:05.640 --> 00:36:08.880
this is one of the common
issues that we've seen.

00:36:08.880 --> 00:36:11.220
Really tell your artist
to simplify the models

00:36:11.220 --> 00:36:12.060
as much as possible.

00:36:12.060 --> 00:36:14.310
And it's particularly important
because, every time we

00:36:14.310 --> 00:36:16.730
have a triangle that's
smaller than the Pixel,

00:36:16.730 --> 00:36:20.401
the GPU is going to
do way too much work.

00:36:20.401 --> 00:36:21.900
I'm not going to
go into the details

00:36:21.900 --> 00:36:23.610
here, because you
probably don't care.

00:36:23.610 --> 00:36:26.310
But, basically, we might end
up doing the work four times,

00:36:26.310 --> 00:36:29.160
and we really don't
want to do that.

00:36:29.160 --> 00:36:31.697
The complexity of the
scene, thankfully, in AR,

00:36:31.697 --> 00:36:33.780
you're probably not going
to add a lot of objects,

00:36:33.780 --> 00:36:36.440
but if you create
in the art scene,

00:36:36.440 --> 00:36:39.790
for instance, where you
have a model of a city,

00:36:39.790 --> 00:36:42.420
you might be tempted to put a
lot of objects in that city.

00:36:42.420 --> 00:36:45.960
You know, every building or
every car, every pedestrian.

00:36:45.960 --> 00:36:47.790
What we're recommending
is that, at most,

00:36:47.790 --> 00:36:50.610
you should have maybe
100 objects visible

00:36:50.610 --> 00:36:52.390
at a time on screen.

00:36:52.390 --> 00:36:54.060
And the reason here
is because we're

00:36:54.060 --> 00:36:56.980
going to run into-- the CPU is
going to become a bottleneck.

00:36:56.980 --> 00:36:59.220
So this is not something
that dynamic resolution

00:36:59.220 --> 00:37:00.330
can help with.

00:37:00.330 --> 00:37:03.120
We avoid rendering anything
that's not on the screen.

00:37:03.120 --> 00:37:05.010
We have a lot of
optimizations around that.

00:37:05.010 --> 00:37:07.482
But if we have too
many objects on screen,

00:37:07.482 --> 00:37:08.940
we're going to be
bound by the CPU,

00:37:08.940 --> 00:37:10.260
and there's not much
we can do about it,

00:37:10.260 --> 00:37:12.010
and you're going to
start dropping frames.

00:37:12.010 --> 00:37:15.850
And dropping frames is
particularly bad in AR.

00:37:15.850 --> 00:37:17.970
I mentioned the
format called GLTF.

00:37:17.970 --> 00:37:20.000
We support OBJ and FBX.

00:37:20.000 --> 00:37:22.760
GLTF is a new standard
driven by Chronos.

00:37:22.760 --> 00:37:26.640
Chronos is the committee
behind Open GL and Vulcan.

00:37:26.640 --> 00:37:29.180
A lot of tools support GLTF.

00:37:29.180 --> 00:37:31.410
Web sites like Sketchpad
and a lot of assets

00:37:31.410 --> 00:37:32.700
are in the GLTF format.

00:37:32.700 --> 00:37:34.650
And one of the reasons
why I like GLTF

00:37:34.650 --> 00:37:37.560
is because, in the
standard [INAUDIBLE],,

00:37:37.560 --> 00:37:40.230
the occlusion, the roughness,
and the metallic instead

00:37:40.230 --> 00:37:42.540
a single RGB texture,
which is something

00:37:42.540 --> 00:37:45.010
you should be doing for
performance reasons.

00:37:45.010 --> 00:37:48.810
So if you can ask your artist
to give you GLTF models,

00:37:48.810 --> 00:37:51.660
it's going to make, by default,
your models a little more

00:37:51.660 --> 00:37:54.400
efficient to render.

00:37:54.400 --> 00:37:57.430
One thing we didn't show you
how to do with the [? IPIs, ?]

00:37:57.430 --> 00:37:59.430
you can do lights in your
scene, and you can add

00:37:59.430 --> 00:38:01.510
many, many, many, many lights.

00:38:01.510 --> 00:38:04.050
This is an example of an
early demo of our rendering

00:38:04.050 --> 00:38:06.096
engine running on my Pixel 2.

00:38:06.096 --> 00:38:07.470
So here, I think
we had something

00:38:07.470 --> 00:38:10.540
like 128 lights in the scene.

00:38:10.540 --> 00:38:12.880
So you see that you can
have many, many of them,

00:38:12.880 --> 00:38:15.400
and you can still run
at 60 frames per second.

00:38:15.400 --> 00:38:17.070
What is very important
is that, if you

00:38:17.070 --> 00:38:19.910
add many lights in your scene,
make sure they don't overlap

00:38:19.910 --> 00:38:22.584
or they don't overlap
too much, because if you

00:38:22.584 --> 00:38:24.000
have two lights
on the same pixel,

00:38:24.000 --> 00:38:25.650
so we have to do the work twice.

00:38:25.650 --> 00:38:27.690
So you have 100
lights on one pixel,

00:38:27.690 --> 00:38:29.910
we're basically
rendering 100 frames.

00:38:29.910 --> 00:38:31.980
So use a lot of
lights if you want.

00:38:31.980 --> 00:38:33.810
Make sure that
they don't overlap.

00:38:33.810 --> 00:38:35.370
And to do this in
[? IPIs, ?] you can

00:38:35.370 --> 00:38:40.750
give us a maximum sphere of
influence for each lights.

00:38:40.750 --> 00:38:42.580
Finally, if you use
the view renderables,

00:38:42.580 --> 00:38:43.760
it's extremely convenient.

00:38:43.760 --> 00:38:45.655
You can create views
the way you do it

00:38:45.655 --> 00:38:47.000
in the rest of your application.

00:38:47.000 --> 00:38:48.250
You can put them in the scene.

00:38:48.250 --> 00:38:49.440
Super useful.

00:38:49.440 --> 00:38:52.970
But every view is rendered in
software, and for every view,

00:38:52.970 --> 00:38:55.810
we have to allocate what's
called a surface texture,

00:38:55.810 --> 00:38:57.370
and this is going
to cost memory,

00:38:57.370 --> 00:39:00.520
it's going to cost CPU time,
and it's going to cost GPU time.

00:39:00.520 --> 00:39:02.900
So try to reuse the views
as much as possible.

00:39:02.900 --> 00:39:04.900
Don't try to put too many
of them on the screen,

00:39:04.900 --> 00:39:08.210
and don't try to allocate too
many of them at the same time.

00:39:08.210 --> 00:39:10.810
And, finally, all
the usual advice

00:39:10.810 --> 00:39:14.230
that we give you for performance
inside Android applications

00:39:14.230 --> 00:39:15.610
applies to AR, obviously.

00:39:15.610 --> 00:39:18.220
So doesn't allocate
in the render loop.

00:39:18.220 --> 00:39:19.450
Don't do too much work.

00:39:19.450 --> 00:39:22.590
Be mindful of the size of your
APK and all that good stuff.

00:39:22.590 --> 00:39:25.530
With that, we're out of time.

00:39:25.530 --> 00:39:28.180
There's a talk tomorrow morning,
build, iterate and launch

00:39:28.180 --> 00:39:28.881
your apps.

00:39:28.881 --> 00:39:30.380
There's another one
called designing

00:39:30.380 --> 00:39:31.630
AR applications that was--

00:39:31.630 --> 00:39:32.180
LUCY ABRAMYAN: Today.

00:39:32.180 --> 00:39:32.560
ROMAIN GUY: Yeah.

00:39:32.560 --> 00:39:33.940
Today, earlier this afternoon.

00:39:33.940 --> 00:39:35.900
So come back two hours ago.

00:39:35.900 --> 00:39:37.270
We also have office hours.

00:39:37.270 --> 00:39:39.130
There's a code lab
available online

00:39:39.130 --> 00:39:41.780
to create a similar
scene to what you saw.

00:39:41.780 --> 00:39:43.710
And that's it.

00:39:43.710 --> 00:39:45.460
And if you have
questions, you can find us

00:39:45.460 --> 00:39:46.930
after this talk or tomorrow.

00:39:46.930 --> 00:39:50.648
We'll be around to answer
all your questions.

