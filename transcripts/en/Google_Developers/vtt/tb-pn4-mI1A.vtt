WEBVTT
Kind: captions
Language: en

00:00:09.891 --> 00:00:13.066
Welcome to our project
Google Developers Hackademy,

00:00:13.066 --> 00:00:16.825
where Spanish-speaking experts
from Latin America

00:00:16.825 --> 00:00:19.132
will show you
some of our tools,

00:00:19.132 --> 00:00:22.561
developer products,
APIs and new tricks.

00:00:22.561 --> 00:00:24.924
This course is divided
into five parts.

00:00:24.924 --> 00:00:27.462
We invite you to watch it
and learn along.

00:00:27.462 --> 00:00:28.924
Let's get it started.

00:00:35.198 --> 00:00:38.066
Hello. Welcome back to the
HTML5 web development

00:00:38.066 --> 00:00:40.957
on Google Drive
introduction course.

00:00:40.957 --> 00:00:42.660
My name is
Cesar Anton Dorantes,

00:00:42.660 --> 00:00:45.693
Google Developer Expert
for the Google Drive platform.

00:00:45.693 --> 00:00:48.330
In this lesson we will see
the following subjects:

00:00:48.330 --> 00:00:50.264
introduction to Google Charts,

00:00:50.264 --> 00:00:52.858
my first chart
with Google Table Charts,

00:00:52.858 --> 00:00:54.396
Google Pie Charts,

00:00:54.396 --> 00:00:56.792
and finally, a practice
in which we'll build

00:00:56.792 --> 00:00:59.693
your first HTML5 app
with Google Charts.

00:00:59.693 --> 00:01:01.990
You ready? Here we go!

00:01:03.099 --> 00:01:06.726
Google Charts offers a simple
and professional way

00:01:06.726 --> 00:01:09.990
to visualize the data
on a website or web app.

00:01:09.990 --> 00:01:13.198
Google Charts has
an extended library

00:01:13.198 --> 00:01:16.198
that offers charts to cover
all important points

00:01:16.198 --> 00:01:17.528
and a bit more,

00:01:17.528 --> 00:01:20.429
from line charts,
bar charts or pie charts,

00:01:20.429 --> 00:01:22.396
to powerful dashboards,

00:01:22.396 --> 00:01:24.792
and the very popular geocharts.

00:01:25.396 --> 00:01:28.297
The most common way
to develop with Google Charts

00:01:28.297 --> 00:01:29.693
is using JavaScript.

00:01:29.693 --> 00:01:32.231
In order to do this,
we load the libraries

00:01:32.231 --> 00:01:34.825
according to the type of chart
we wish to use,

00:01:34.825 --> 00:01:37.858
we introduce the data
we wish to show,

00:01:37.858 --> 00:01:41.792
we customize the charts the way
they best adapt to our needs,

00:01:42.099 --> 00:01:44.693
and we finally create
a chart object

00:01:44.693 --> 00:01:46.660
with an ID we choose.

00:01:46.660 --> 00:01:48.792
We will use it to call the chart

00:01:48.792 --> 00:01:50.858
from our HTML code.

00:01:50.858 --> 00:01:53.396
Pretty soon you'll see
how easy it is to do this

00:01:53.396 --> 00:01:56.363
thanks to the incredible
Visualization API.

00:01:57.099 --> 00:02:00.198
Charts are declared
as classes in JavaScript

00:02:00.198 --> 00:02:02.462
and Google Charts has
an extended library

00:02:02.462 --> 00:02:04.495
so you can always
represent your data

00:02:04.495 --> 00:02:05.825
in the best way.

00:02:05.825 --> 00:02:09.033
Usually, the by-default
appearance will be enough

00:02:09.033 --> 00:02:11.231
but we can customize it
to adjust it

00:02:11.231 --> 00:02:13.594
more precisely to our data

00:02:13.594 --> 00:02:16.231
and to our page
or web app style.

00:02:16.231 --> 00:02:18.594
Google Charts generates
interactive charts

00:02:18.594 --> 00:02:20.924
capable of triggering
different types of events

00:02:20.924 --> 00:02:23.693
that allow us to connect
several visualizations

00:02:23.693 --> 00:02:25.957
so we can create
powerful dashboards,

00:02:25.957 --> 00:02:29.363
and we can also connect it
with our own code

00:02:29.363 --> 00:02:31.495
to give a very
dynamic experience

00:02:31.495 --> 00:02:33.759
from our website or web app.

00:02:33.759 --> 00:02:36.396
All charts receive their data
by using a class

00:02:36.396 --> 00:02:38.033
called dataTable,

00:02:38.033 --> 00:02:40.891
which allows us to easily
change the chart type

00:02:40.891 --> 00:02:44.132
until finally finding the one
that adjusts to our data.

00:02:44.132 --> 00:02:46.363
It also lets us represent
the same data

00:02:46.363 --> 00:02:48.231
by using several graphs.

00:02:48.231 --> 00:02:50.792
A quite common example
would be showing a chart

00:02:50.792 --> 00:02:53.363
and a pie graph
to represent our data

00:02:53.363 --> 00:02:55.528
in the clearest way possible.

00:02:55.528 --> 00:02:56.990
Incredible, right?

00:02:56.990 --> 00:02:59.759
Let's move on
to programming our first app

00:02:59.759 --> 00:03:01.099
in Google Charts.

00:03:01.099 --> 00:03:03.759
Let's start by declaring
the necessary HTML

00:03:03.759 --> 00:03:05.429
for our presentation.

00:03:05.429 --> 00:03:08.891
I recommend you recycle
the code you built last time.

00:03:09.726 --> 00:03:12.231
MY FIRST CHART
WITH GOOGLE TABLE CHARTS

00:03:13.132 --> 00:03:15.858
First, we need to import
Google's API

00:03:15.858 --> 00:03:19.132
and then select the library
that we will be needing.

00:03:19.132 --> 00:03:21.660
We'll start with the most
common representation,

00:03:21.660 --> 00:03:23.066
Table Charts.

00:03:23.066 --> 00:03:26.891
All this with just 4
very simple code lines.

00:03:26.891 --> 00:03:29.528
Time to start using JavaScript.

00:03:29.528 --> 00:03:33.363
In this example, we'll name
our file charts.js.

00:03:33.363 --> 00:03:36.825
We'll start by declaring the data
we will represent

00:03:36.825 --> 00:03:38.627
within the variable data,

00:03:38.627 --> 00:03:41.726
contained in a function
called drawVisualization.

00:03:41.726 --> 00:03:44.858
For our example, we'll show
how we usually distribute

00:03:44.858 --> 00:03:47.132
the hours throughout our day.

00:03:47.132 --> 00:03:48.990
Notice we introduce the data

00:03:48.990 --> 00:03:51.033
using a JSON ordered array,

00:03:51.033 --> 00:03:53.957
within a method called
arrayToDataTable.

00:03:53.957 --> 00:03:57.462
The first line corresponds
to the headings in the table

00:03:57.462 --> 00:03:59.924
and the rest are
the subsequent lines.

00:03:59.924 --> 00:04:03.198
Now we need to declare
a TableChart-type visualization

00:04:03.198 --> 00:04:05.528
to which we will assign
the ID "chart",

00:04:05.528 --> 00:04:07.825
which we'll use later on
to designate

00:04:07.825 --> 00:04:11.066
in which part of the app
we're going to show the chart.

00:04:11.660 --> 00:04:14.726
We also need to put,
always at the end of the code,

00:04:14.726 --> 00:04:18.528
the method
google.setOnLoadCallback

00:04:18.528 --> 00:04:20.561
and put the name
of our function

00:04:20.561 --> 00:04:21.957
in the parenthesis.

00:04:21.957 --> 00:04:25.429
What this does is wait for
everything to correctly load

00:04:25.429 --> 00:04:27.726
before ordering
the drawing of the graphs.

00:04:27.726 --> 00:04:29.594
Turn for the CSS.

00:04:29.594 --> 00:04:31.363
Let's remember that CSS

00:04:31.363 --> 00:04:33.726
allows us to declare
the visual characteristics

00:04:33.726 --> 00:04:36.891
for the elements
in our HTML5 projects.

00:04:36.891 --> 00:04:40.660
In this case we'll use it
to determine the chart's area.

00:04:40.660 --> 00:04:43.330
For this we create a class
named charts

00:04:43.330 --> 00:04:46.396
and we assign the width
and height for our chart.

00:04:46.396 --> 00:04:49.330
Time to go back
to our HTML code.

00:04:49.330 --> 00:04:51.396
Let's start by indicating
the route to the files

00:04:51.396 --> 00:04:52.759
we just created.

00:04:52.759 --> 00:04:56.594
Remember to do this in the
G section of your HTML code.

00:04:56.594 --> 00:04:58.957
Remember the ID
we assigned the chart

00:04:58.957 --> 00:05:00.495
in the JavaScript code?

00:05:00.495 --> 00:05:02.561
Now it's time to use it
to declare

00:05:02.561 --> 00:05:05.066
in which part we want
this chart to be shown.

00:05:05.066 --> 00:05:08.627
We will also use the class
we declared in our CSS

00:05:08.627 --> 00:05:11.165
to determine the area
it will occupy.

00:05:11.165 --> 00:05:13.066
Did you notice something
very important

00:05:13.066 --> 00:05:15.594
is missing in the HTML5?
That's right!

00:05:15.594 --> 00:05:18.462
The "article" tag we saw
in last lesson,

00:05:18.462 --> 00:05:21.363
which indicates the main
contents in our page.

00:05:21.363 --> 00:05:24.660
This time we'll also use
the "header" tag

00:05:24.660 --> 00:05:27.396
to point the heading
for our application.

00:05:27.396 --> 00:05:29.528
Though this is totally optional,

00:05:29.528 --> 00:05:32.198
it's a recommended practice
in HTML5

00:05:32.198 --> 00:05:33.891
and is particularly useful

00:05:33.891 --> 00:05:37.165
when we're embellishing
our code with CS3.

00:05:41.429 --> 00:05:43.924
In the beginning of this lesson
we said you can use

00:05:43.924 --> 00:05:46.858
the same Data Table to draw
different presentations

00:05:46.858 --> 00:05:48.858
of the data at the same time.

00:05:48.858 --> 00:05:50.891
And now it's time
to put this to the test

00:05:50.891 --> 00:05:53.759
by adding a pie chart
to our app.

00:05:53.759 --> 00:05:56.198
The first thing to do is
to declare a new visualization

00:05:56.198 --> 00:05:58.528
in our file charts.js,

00:05:58.528 --> 00:06:01.990
but this time we will use
PieChart instead of Table.

00:06:01.990 --> 00:06:04.165
To give it a little
more presentation,

00:06:04.165 --> 00:06:06.363
we'll add a title that says:

00:06:06.363 --> 00:06:08.297
"How do you use your day?"

00:06:08.297 --> 00:06:10.891
Let's go back to our HTML code.

00:06:10.891 --> 00:06:13.462
In order to add the pie chart,
we first need

00:06:13.462 --> 00:06:16.528
to add the corechart library
alongside to the table one

00:06:16.528 --> 00:06:18.693
in section G of our code.

00:06:18.693 --> 00:06:21.891
Then, we just select
in which part we wish

00:06:21.891 --> 00:06:24.858
the chart to be drawn
by using the ID we chose,

00:06:24.858 --> 00:06:27.330
in this case, pie,
and that's it,

00:06:27.330 --> 00:06:30.132
we already have an app
that shows our data

00:06:30.132 --> 00:06:31.792
in two different ways.

00:06:31.792 --> 00:06:33.858
It was really easy, right?

00:06:35.429 --> 00:06:37.627
I invite you to watch
this lesson again,

00:06:37.627 --> 00:06:39.792
this time making pauses
to follow the steps

00:06:39.792 --> 00:06:41.792
and copying the code
that is shown.

00:06:41.792 --> 00:06:43.924
For a comparison,
you can see an example

00:06:43.924 --> 00:06:46.231
in the website shown on screen.

00:06:51.396 --> 00:06:53.495
This will be it for now.

00:06:53.495 --> 00:06:55.165
See you next time with:

00:06:55.165 --> 00:06:57.495
"Connecting your app
with Google Spreadsheets,"

00:06:57.495 --> 00:07:00.231
where we'll learn to import
data in real time

00:07:00.231 --> 00:07:01.792
from Google Spreadsheets.

00:07:01.792 --> 00:07:04.792
And if you liked this lesson,
you'll just love next one.

00:07:04.792 --> 00:07:07.264
I say goodbye for now
and remember:

00:07:07.264 --> 00:07:08.858
keep on programming!

