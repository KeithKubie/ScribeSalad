WEBVTT
Kind: captions
Language: en

00:35:03.996 --> 00:35:12.912
What's new in Google's IoT 
PlatformPlatform? 

00:35:14.364 --> 00:35:19.160
 Ubiquitous computing at Google 

00:35:25.617 --> 00:35:27.617
Stage 3 

00:35:31.110 --> 00:35:33.110
5-17-17

00:37:40.410 --> 00:37:43.288
 .   

00:53:09.785 --> 00:53:12.971
 High everyone, this morning.  
It's really excited to see you 

00:53:12.972 --> 00:53:18.381
all here.  So my name is Wayne 
Piekarski, and I'm a developer 

00:53:18.382 --> 00:53:21.702
advocate at Google and today I'm
 excited to talk about all the 

00:53:21.703 --> 00:53:24.915
cool new things we're doing on 
the Internet of Things.  This 

00:53:24.916 --> 00:53:28.008
enables what we refer to 
ubiquitous computing.  There's a

00:53:28.823 --> 00:53:32.094
 lot of new and interesting 
products and tools of interest 

00:53:32.302 --> 00:53:36.432
to develop that I'm going to 
highlight in the talk, and them 

00:53:36.433 --> 00:53:40.786
released today right now.  a 
bunch of new announcements 

00:53:40.787 --> 00:53:44.691
during the keynotes.  There's 
all kinds of new things.  We'll 

00:53:44.692 --> 00:53:48.560
do a whirlwind tour of all of 
Google's products related to so 

00:53:49.102 --> 00:53:52.048
that you can find out more what 
you can do for yourself.  So 

00:53:52.709 --> 00:53:58.657
importantly, here at I/O we have
 interesting engineers and PMs 

00:53:59.295 --> 00:54:01.643
and leaders from different teams
 that work on products I'm 

00:54:02.046 --> 00:54:04.411
talking about.  Take advantage 
of that and go and see them in 

00:54:04.412 --> 00:54:09.902
the sandboxes and so forth.  So 
let's get started with our tour.

00:54:10.408 --> 00:54:14.071
 we know, computing has evolved 
over the years, so we started 

00:54:14.072 --> 00:54:16.909
from mainframes and then we 
moved to desktops and laptops 

00:54:16.910 --> 00:54:22.802
and then phones, and so every 
decade or so we shrink our 

00:54:22.938 --> 00:54:26.511
electronics.  Now we're at 
wearables.  If we go any smaller

00:54:26.683 --> 00:54:30.882
 of a wearable, humans can't 
interact with them anymore 

00:54:30.883 --> 00:54:35.232
because our fingers can't touch 
it.  There's a limit to what we 

00:54:35.596 --> 00:54:39.336
can do with shrinking 
electronics.  What's happening 

00:54:39.337 --> 00:54:43.189
now is that computers are 
embedded into everyday  use 

00:54:43.190 --> 00:54:46.124
different devices depending on 
what we try to do, so we use a 

00:54:46.125 --> 00:54:49.942
laptop to write documents or 
e-mails, a TV for videos, a 

00:54:49.943 --> 00:54:53.439
phone for things away from home 
and a wearable when running and 

00:54:53.440 --> 00:54:56.127
something when we're driving.  
So there's all these different 

00:54:56.128 --> 00:54:58.608
computing experiences that are 
suitable for what you're doing 

00:54:58.609 --> 00:55:00.609
at the

00:55:02.788 --> 00:55:04.469
 time.  Now we're at a point 
where we have thermostats and 

00:55:04.470 --> 00:55:07.754
light bulbs and basic 
electronics Internet-enabled, 

00:55:07.755 --> 00:55:11.228
but we can do more than that.  
We're moving to a world where 

00:55:11.229 --> 00:55:13.936
computing is going to be 
everywhere, assisting users with

00:55:14.609 --> 00:55:18.950
 their day and solving problems 
we didn't realize existed and we

00:55:19.103 --> 00:55:22.631
 look back and go, wow, this 
really changed everything.  So 

00:55:22.632 --> 00:55:27.496
while phones were bigger than PC
s, Internet of Things is going 

00:55:27.497 --> 00:55:31.624
to be even bigger than phones.  
It's going to be incredible.  We

00:55:32.160 --> 00:55:34.484
 use the term ubiquitous 
computing to describe this.  

00:55:34.485 --> 00:55:39.362
It's technology accessible to 
the user wherever they are and 

00:55:39.363 --> 00:55:42.572
whenever they are trying to do. 
 Today we talk about what 

00:55:42.573 --> 00:55:46.207
platforms Google provides, and 
what developer tools Google 

00:55:46.208 --> 00:55:53.628
provides to help support this.  
 in the past we trained users to

00:55:53.760 --> 00:55:57.568
 install apps on other phones 
with icons.  You click an icon 

00:55:57.793 --> 00:56:00.634
for each app.  Now we have 
devices that don't have screens,

00:56:00.903 --> 00:56:04.603
 so we need to think differently
 about computing and what it 

00:56:04.982 --> 00:56:07.853
means.  Take the user's context 
into consideration.  What time 

00:56:07.854 --> 00:56:11.584
is it?  What's the user's 
location?  What are they doing? 

00:56:12.169 --> 00:56:15.608
 need to make good decisions 
based on those kinds of things. 

00:56:15.908 --> 00:56:19.412
 need to think of your platform 
as a view into your service now,

00:56:19.572 --> 00:56:24.079
 so it's no longer a single app 
or single website.  service 

00:56:24.080 --> 00:56:26.242
needs to be ubiquitous and 
everywhere and it needs to work 

00:56:26.243 --> 00:56:31.914
on all platforms.  we want a 
single, seamless experience to 

00:56:31.915 --> 00:56:35.233
keep the users happy.  With that
 in mind, a little intro, let's 

00:56:35.234 --> 00:56:39.968
get started talking about what 
consumer products are provided 

00:56:39.969 --> 00:56:44.567
that consumers have right now.  
We'll start talking with 

00:56:44.829 --> 00:56:46.829
Android. 

00:56:49.239 --> 00:56:53.220
 Android, they announced 2 
billion devices run Android, so 

00:56:53.221 --> 00:56:58.438
that's incredible.  We have 
Android phones, tablets, 

00:56:58.439 --> 00:57:01.370
wearables and TV.  They also 
involve the same infrastructure,

00:57:02.017 --> 00:57:06.072
 so they all work on Google 
Play, and you build your apps 

00:57:06.073 --> 00:57:09.085
using Android Studio, and the 
apps run on the device.  We do 

00:57:09.086 --> 00:57:12.121
things like that right now, but 
many have only written a phone 

00:57:12.122 --> 00:57:17.539
app before.  One thing you might
 want to consider is extending 

00:57:17.540 --> 00:57:24.784
your app to wear or Android TV. 
 year I gave a talk to Google 

00:57:25.027 --> 00:57:27.860
I/O.  There's a few tweaks and 
change the UI a little bit, and 

00:57:27.861 --> 00:57:31.227
it runs on those devices as 
well.  These are new 

00:57:31.228 --> 00:57:34.112
opportunities to have different 
kinds of users looking at your 

00:57:34.497 --> 00:57:37.027
application, because there are 
times looking at something on a 

00:57:37.028 --> 00:57:41.271
TV is better and sometimes other
 things are better, and you need

00:57:41.449 --> 00:57:44.823
 to take advantage of those 
things.  Now, phones can do -- 

00:57:45.100 --> 00:57:48.017
sorry.  Android in general does 
interesting things.  They do 

00:57:48.018 --> 00:57:54.232
apps, games, sensor processing, 
3D graphics and audio.  There's 

00:57:54.233 --> 00:57:56.995
interesting capabilities we get 
to talk about later on.  I'm 

00:57:56.996 --> 00:58:01.634
just going to highlight Android 
Auto as well.  It's different in

00:58:01.837 --> 00:58:05.388
 that it's a templated user 
interface in that you can build 

00:58:05.389 --> 00:58:07.699
messaging and media apps as 
well.  So if you're a company 

00:58:07.700 --> 00:58:12.109
that makes media or messaging 
apps, you add some extensions to

00:58:12.311 --> 00:58:15.269
 your Android app, and then it 
will work when the user plugs in

00:58:15.370 --> 00:58:18.685
 their phone into a vehicle or 
when they install it into one of

00:58:18.904 --> 00:58:22.929
 those cars that you can see out
 in the demo area.  So we have 

00:58:22.930 --> 00:58:27.716
this big eco-system of Android 
devices that solve different 

00:58:27.858 --> 00:58:31.444
needs.   there's no one device 
perfect for everything.  Some 

00:58:32.250 --> 00:58:34.853
are better than others, 
depending on the context the 

00:58:35.037 --> 00:58:37.712
user is in, but they all solve 
different problems depending on 

00:58:37.713 --> 00:58:41.350
the time, where the user is, 
whether they're at home or in 

00:58:42.064 --> 00:58:45.017
the living room.  So that's 
Android.  Now, you may have also

00:58:45.424 --> 00:58:47.424
 heard at the

00:58:49.475 --> 00:58:54.243
 keynote about Google Home and 
Google Assistant.  We'll cover 

00:58:54.244 --> 00:59:01.559
those today and how that is 
ubiquitous computing.  The 

00:59:01.560 --> 00:59:04.635
Assistant is now available.  It 
was available on Google Home, 

00:59:04.636 --> 00:59:07.422
but we announce it's available 
on a lot of Android phones out 

00:59:07.815 --> 00:59:12.505
there, and also it's coming soon
 on wear, TV, and auto.  So 

00:59:12.506 --> 00:59:18.652
we're bringing the Assistant to 
different platforms, and it 

00:59:18.653 --> 00:59:21.136
allows the user to have a 
conversation with it to get 

00:59:21.137 --> 00:59:24.925
things done.  So the basic 
Google Assistant is you talking 

00:59:24.926 --> 00:59:28.621
to Google, but there's a 
third-party library that allows 

00:59:28.807 --> 00:59:31.817
you to build your own extensions
 as well.  The Google Assistant 

00:59:32.329 --> 00:59:34.953
is interesting because it 
supports both text and 

00:59:36.199 --> 00:59:38.972
voice-based audio inputs and 
outputs.  Once again, that 

00:59:38.973 --> 00:59:41.416
depends on the context of what 
the user is doing.  If they're 

00:59:41.417 --> 00:59:44.593
in a movie theater, they can 
type on their phone.  If they're

00:59:45.137 --> 00:59:47.032
 driving, they can speak.  If 
they stand in the kitchen with 

00:59:47.033 --> 00:59:50.253
their hands dirty, they can 
speak as well.  So you use a 

00:59:50.254 --> 00:59:54.576
different input and output 
modality depending on what the 

00:59:54.577 --> 00:59:57.867
user is doing.  As we can see, 
context is important, and that's

00:59:58.001 --> 01:00:03.083
 going to help us with all these
 platforms.  So these were the 

01:00:03.084 --> 01:00:06.149
consumer platforms, and now 
we're going to talk about the 

01:00:06.150 --> 01:00:09.202
possibilities for you as a 
developer and how to extend 

01:00:09.338 --> 01:00:12.885
them.  Consumers have these 
devices already.  There's 

01:00:12.886 --> 01:00:17.066
billions of phones and TVs and 
wearables and so forth out 

01:00:17.248 --> 01:00:19.852
there.  You want to be able to 
take advantage of them, and how 

01:00:20.037 --> 01:00:22.572
can you doing that?  There's a 
bunch of new options you'll find

01:00:22.707 --> 01:00:26.254
 very interesting.  So the first
 thing that's really cool is 

01:00:26.255 --> 01:00:32.827
that we announced recently the 
developer preview for Android 

01:00:33.105 --> 01:00:36.475
Things.  It's Google's new Platt
 to remember so support the 

01:00:37.118 --> 01:00:39.454
development of IoT devices based
 on Android.  One of the really 

01:00:42.971 --> 01:00:46.598
interesting things about Android
 Things is the use of a SoM 

01:00:46.599 --> 01:00:50.033
which you see on the slides over
 there.  A SoM is a tiny board 

01:00:50.034 --> 01:00:56.117
with a CPU, memory, wireless and
 all the important things that 

01:00:56.118 --> 01:01:00.787
make the device do what it does.
 a single board with a common 

01:01:00.788 --> 01:01:05.545
set of software.  These SoMs are
 made in bulk quantities to you 

01:01:05.546 --> 01:01:09.472
can pay reasonable prices for 
them.  You plug them into your 

01:01:09.473 --> 01:01:13.055
own custom developer board to 
test them, but you can build 

01:01:13.056 --> 01:01:15.728
your own custom development 
boards depending on your needs 

01:01:15.729 --> 01:01:18.948
for the kind of application 
you're building, because you 

01:01:18.949 --> 01:01:22.748
don't want to embed a full 
development board into a product

01:01:23.027 --> 01:01:27.642
 you're selling.  The SoM 
contains hard-to-design 

01:01:27.737 --> 01:01:30.183
components.  When you do 
electronic manufacturing, there 

01:01:30.804 --> 01:01:35.022
are high-speed electronics and 
low-speed electronics.   require

01:01:35.310 --> 01:01:37.631
 really skilled design people 
who really know how to build 

01:01:37.632 --> 01:01:43.724
things that run at 1 gigahertz 
and there's a lot to take into 

01:01:43.925 --> 01:01:48.259
place.   we can build at home.  
going to talk tomorrow where we 

01:01:48.260 --> 01:01:54.995
go through how to make your own 
boards for an Android Things 

01:01:54.996 --> 01:01:57.614
device at home.  We'll talk 
about that tomorrow.  The nice 

01:01:57.958 --> 01:02:02.463
thing about SoMs is it's our 
initiative to Democrat ties 

01:02:02.606 --> 01:02:05.286
hardware development.  We make 
it fun for prototyping.  You can

01:02:05.412 --> 01:02:08.126
 take a board and build 
something, but there's a road to

01:02:08.425 --> 01:02:11.111
 production.  You don't have to 
switch hardware and SWECH your 

01:02:11.112 --> 01:02:14.254
software platform.  You can use 
the same hardware and software 

01:02:14.255 --> 01:02:16.774
for the prototype and the 
commercial product that you can 

01:02:16.775 --> 01:02:20.390
sell in quantities.  That's one 
of the really important things 

01:02:20.391 --> 01:02:24.606
about Android Things and our 
architecture based on SoMs.  So 

01:02:24.894 --> 01:02:27.628
the way you get started with 
Android Things is you start with

01:02:27.721 --> 01:02:31.102
 one of these developer boards, 
so I've got samples on the slide

01:02:31.482 --> 01:02:34.993
 here.  You can see that the 
developer board is quite large. 

01:02:35.622 --> 01:02:39.776
 SoM is plugged into it.  The 
SoM is the really small 

01:02:39.777 --> 01:02:42.613
component on the bottom left, 
and it's on the top left of the 

01:02:42.813 --> 01:02:45.813
other one as well.  So the SoM 
just plugs in, but the developer

01:02:46.124 --> 01:02:49.611
 board has breakout pins for 
every interface you need as a 

01:02:49.612 --> 01:02:53.817
hacker or a maker making 
prototypes.  So there's USB 

01:02:53.925 --> 01:03:00.158
ports, audio, GPIO pins, I2C 
buses and things like that.   

01:03:00.159 --> 01:03:04.269
you build your prototype and you
 put a bread board next to it 

01:03:04.270 --> 01:03:07.602
and run jumper wires across.  
When you finish, take that 

01:03:07.603 --> 01:03:11.152
custom board and shrink it down.
  But it's nice because you can 

01:03:11.153 --> 01:03:17.472
test both and use the same SoM. 
 So in tomorrow's talk, we're 

01:03:17.473 --> 01:03:21.160
going through an example so my 
colleague Dave actually built 

01:03:21.161 --> 01:03:28.181
this L.E.D. candle project.  We 
wanted to test how hard it would

01:03:28.483 --> 01:03:32.903
 be.  On the left Dave built a 
prototype which had a large 

01:03:32.904 --> 01:03:36.380
board with the LEDs and 
resistors and wires on it 

01:03:36.381 --> 01:03:39.864
plugged into the Edison 
debugging board.  We tested it. 

01:03:40.296 --> 01:03:46.172
 we're happy with it, then we 
used PCB software and designed 

01:03:46.173 --> 01:03:49.657
the schematic and had it 
fabricated.  We had it 

01:03:49.959 --> 01:03:53.795
fabricated cheaply.  A lot of 
places will fab boards quickly 

01:03:53.796 --> 01:03:58.368
and easily.  You can see on the 
right that we have our LED 

01:03:58.369 --> 01:04:01.142
prototype sitting in the plastic
 shell, and then there's a lid 

01:04:01.143 --> 01:04:04.437
we put on top of it.  The board 
we built is almost the size of 

01:04:04.438 --> 01:04:08.345
the SoM, and that's an example 
of how you can build a cheap 

01:04:09.094 --> 01:04:12.804
board, build it in with a SoM 
and embed and sell it.  I was 

01:04:12.805 --> 01:04:16.380
quite excited we could hand 
solder this and build the 

01:04:16.624 --> 01:04:19.607
prototypes.  helps to increase 
the time to do for prototyping, 

01:04:19.608 --> 01:04:23.049
because you don't want to wait a
 month every time you want to 

01:04:23.050 --> 01:04:25.356
iterate on something because 
electronics can be hard to do 

01:04:25.357 --> 01:04:27.357
compared to

01:11:22.451 --> 01:11:26.869
 Now, the one thing about 
working with that

01:11:39.620 --> 01:11:41.756
 if you had to write code that 
processed the strings 

01:11:41.951 --> 01:11:45.410
separately, you would have a 
hard time doing it.  We have a 

01:11:45.411 --> 01:11:53.410
tool called API.AI that we use 
to build nice conversation 

01:11:53.610 --> 01:11:58.932
actions.  Let's talk about APIA.
 has a simple user interface and

01:11:59.106 --> 01:12:02.390
 don't need to be a programmer 
to use it.  What you do is give 

01:12:02.391 --> 01:12:05.142
it example sentences of things 
that you want the system to 

01:12:05.262 --> 01:12:08.712
process.  So there's a video I 
made a couple of months ago 

01:12:08.713 --> 01:12:13.884
before we built this personal 
chef example.  You can say I'm 

01:12:13.885 --> 01:12:16.870
hungry and I want a hot soup 
because it's cold outside and 

01:12:16.871 --> 01:12:19.944
chicken sounds good to me and 
I'd like a cold dessert and want

01:12:20.141 --> 01:12:25.420
 it right now.  You could give 
complex sentences and APII could

01:12:25.949 --> 01:12:28.946
 extract out the key phrases of 
sentences and pass it to your 

01:12:28.947 --> 01:12:32.123
web hooks so you can do 
something with it. 

01:12:37.070 --> 01:12:40.009
 They use Machine Learning 
techniques you program by typing

01:12:40.196 --> 01:12:43.405
 in these examples sentences.  
It learns from you, and then as 

01:12:43.406 --> 01:12:46.634
users use your action, it then 
learns from that as well, and if

01:12:46.840 --> 01:12:49.491
 there's mistakes you can 
correct it and it trains this 

01:12:49.492 --> 01:12:51.444
model to understands the 
different phrases that people 

01:12:51.445 --> 01:12:55.261
are going to give you.  So it's 
a really neat of way of building

01:12:58.447 --> 01:13:05.342
conversations and makes it 
really easy.  MRENT offy of 

01:13:05.343 --> 01:13:08.273
people build their own assistant
 app.  It's cool what you can do

01:13:08.772 --> 01:13:14.923
 with it.  We have great samples
 on how to do that. if you're 

01:13:15.063 --> 01:13:18.760
beginner, start with that.  
Finally, we mentioned in the 

01:13:18.761 --> 01:13:24.643
keynote today that the Assistant
 runs on phones and the Google 

01:13:24.644 --> 01:13:27.671
Home device and we have other 
platforms coming seen, but the 

01:13:27.672 --> 01:13:30.330
key thing to remember.  I've had
 a few people ask me this.  If 

01:13:30.331 --> 01:13:34.135
it runs on the phone, how do I 
build an APK around that?  The 

01:13:34.136 --> 01:13:38.618
answer is all of the actions on 
Google is hosted in the cloud 

01:13:38.885 --> 01:13:41.700
somewhere.  You can use whatever
 cloud provider you want, but 

01:13:41.701 --> 01:13:45.341
the action lives in the cloud 
somewhere because it's available

01:13:45.521 --> 01:13:50.606
 to every device, Google Home, 
portable devices and so forth.  

01:13:52.268 --> 01:13:55.329
 device can install apps on the 
device itself.  Look at the 

01:13:55.330 --> 01:13:57.796
document takes.  It's something 
if you're interested in building

01:13:58.243 --> 01:14:00.056
 a conversational interaction 
with your service, because 

01:14:00.057 --> 01:14:04.172
people are driving, their 
walking, doing things.  not 

01:14:04.173 --> 01:14:07.108
always at a phone or computer, 
and this is a way to enable more

01:14:08.052 --> 01:14:11.980
 capabilities for your service 
or platform.  So one thing we're

01:14:14.114 --> 01:14:20.591
 announcing at Google I/O this 
year is a new contest.  We want 

01:14:20.592 --> 01:14:23.851
to see the cool assistant 
appears that you build, so we 

01:14:23.852 --> 01:14:28.596
launch this contest at I/O to 
encourage that.  We have over 20

01:14:28.724 --> 01:14:33.322
 different prizes and one is a 
trip to Google I/O next year.  

01:14:33.323 --> 01:14:36.393
You don't have to wait in line 
for a ticket.  a prize.  We want

01:14:36.551 --> 01:14:39.826
 to encourage you to go out 
there and build a system action 

01:14:39.827 --> 01:14:43.564
and submit them and try them out
 and see how it goes.  There's a

01:14:44.237 --> 01:14:50.358
 link G.CO DZ actions challenge 
to learn more about this. 

01:14:58.976 --> 01:15:02.333
 This is the Google Assistant 
that you build into devices 

01:15:02.637 --> 01:15:08.156
yourself.  not limited to a 
phone or Google Home.  Make your

01:15:08.378 --> 01:15:12.396
 own crazy device.  In the 
sandbox area we have deep local,

01:15:12.600 --> 01:15:15.457
 who is a partner of ours and 
they made a drink making machine

01:15:15.611 --> 01:15:18.269
 and press a button and tell it 
what you want and have a 

01:15:18.270 --> 01:15:22.721
conversation with it.  Say 
things like I'm thirsty and I 

01:15:22.722 --> 01:15:27.272
feel like whatever the drink is.
  With the power the APII, we 

01:15:27.273 --> 01:15:30.133
understand what you ask for, and
 it helps to tell you and helps 

01:15:30.134 --> 01:15:32.134
to understand

01:15:34.280 --> 01:15:40.647
 what you want.  It's really 
amazing what they can do.  So 

01:15:40.648 --> 01:15:48.971
recently we announced in the 
magpie magazine a kit that's 

01:15:48.972 --> 01:15:52.726
that cardboard bock at the top 
there. a nice kit because it's a

01:15:53.037 --> 01:15:57.189
 cardboard box with a button, 
speaker, microphone and wraps 

01:15:57.190 --> 01:16:01.314
around it.  We gave the kits 
away to tens of thousands of 

01:16:01.544 --> 01:16:05.881
people, and every one of them 
has the Google assistant built 

01:16:06.031 --> 01:16:10.957
into it.  You push the button 
and talk to it and do stuff to 

01:16:11.338 --> 01:16:14.377
it.  I'm curious to see what we 
do with this stuff because the 

01:16:14.378 --> 01:16:18.181
possibilities are endless.  You 
can talk to your cocktail 

01:16:18.182 --> 01:16:20.375
machine or whatever.  It's quite
 fun.  How can you

01:16:24.164 --> 01:16:26.335
 embed the Google Assistant to 
work in your project.  We have a

01:16:27.182 --> 01:16:30.356
 dedicated sec about embedded 
the Google Assistant in.  The 

01:16:30.357 --> 01:16:34.775
engineers go through code 
samples in a lot of detail with 

01:16:35.283 --> 01:16:40.869
demos, but it's a quick summary 
here.  If you look in the box of

01:16:40.870 --> 01:16:45.424
 the API project, it has 
speakers and a button so it's 

01:16:45.425 --> 01:16:52.485
very simple.  We run on any any 
Linux or Android Things device. 

01:16:52.848 --> 01:16:57.867
 The nice thing is that the 
software, the API users to talk 

01:16:57.868 --> 01:17:03.569
to Google is based on GRPC, 
which is an OpenSource portable 

01:17:03.570 --> 01:17:06.751
library to do this interaction. 
 a week of launching this, we 

01:17:06.752 --> 01:17:10.137
had people popping up with 
contributed projects with 

01:17:10.138 --> 01:17:13.458
different kinds of platforms.  I
 was excited to see the huge 

01:17:13.459 --> 01:17:17.361
interest in this and the porting
 to many different platforms.  

01:17:17.362 --> 01:17:20.031
really easy.  You can run on 
anything.  The next thing is 

01:17:20.032 --> 01:17:24.472
that you can use a button press 
to activate it, because you 

01:17:24.473 --> 01:17:29.623
don't want to use a hot word.  
provide a library that adds 

01:17:29.624 --> 01:17:33.455
hardware support too, so you can
 trigger like we do on consumer 

01:17:33.456 --> 01:17:36.200
Google Home devices.  Hey, 
Google, talk to it, and it does 

01:17:36.201 --> 01:17:39.581
the recognition and then it does
 everything like you do on a 

01:17:39.582 --> 01:17:43.304
Google Home.  Basically you show
 up with your hardware, speaker 

01:17:43.305 --> 01:17:46.051
and microphone, and then you 
hook it altogether and then you 

01:17:46.052 --> 01:17:49.137
use actions on Google to 
implement the rest of your 

01:17:49.283 --> 01:17:52.937
functionality.  The actions on 
Google that you build work on 

01:17:53.243 --> 01:17:57.118
either the device you've made, 
BHUT it works on any device that

01:17:57.119 --> 01:17:59.119
 the

01:18:02.826 --> 01:18:06.183
 user had their logged into.  a 
crazy idea, and I'm interested 

01:18:06.184 --> 01:18:09.178
to see what other crazy ideas 
people come up with and see it 

01:18:09.179 --> 01:18:11.179
online and so forth. 

01:18:15.805 --> 01:18:22.454
 that was a little tour on 
Google's stint and the actions 

01:18:23.732 --> 01:18:29.879
on Google and the Assistant SDK.
 do more for that for your 

01:18:30.068 --> 01:18:32.190
users.  Connect up your devices 
and coordinate them, and now 

01:18:32.191 --> 01:18:34.191
we're going to talk about how we
 go about doing that. 

01:18:39.811 --> 01:18:47.028
  Google I/O we announced this 
smart home initiative.  So we 

01:18:47.029 --> 01:18:49.707
supported consumer devices for a
 while, but now we open it up to

01:18:49.882 --> 01:18:54.250
 third-party developers so 
anyone can build a device that 

01:18:54.251 --> 01:19:00.774
integrates with our Smart Home. 
 you go to the tent over there, 

01:19:00.775 --> 01:19:05.118
you can see a variety of things 
we have with commercial things 

01:19:05.119 --> 01:19:08.285
available but now you can build 
your own and you can integrate 

01:19:08.286 --> 01:19:11.886
them into the home graph.  The 
home graph is a diagram of sorts

01:19:12.375 --> 01:19:15.362
 that knows the state of all of 
the devices that are in your 

01:19:15.654 --> 01:19:19.383
house.  Your light bulbs, your 
thermostats and doors.  It 

01:19:19.384 --> 01:19:22.647
remembers how bright your lights
 are at any particular time and 

01:19:22.648 --> 01:19:25.787
what color they're set to.  With
 the home graph storing this 

01:19:26.099 --> 01:19:28.765
information, you then have the 
ability to speak to the Google 

01:19:28.766 --> 01:19:32.077
Assistant and to make changes to
 it.  You can say things like, 

01:19:32.078 --> 01:19:36.607
make it warmer, or turn off all 
the lights.  Or turn -- dim the 

01:19:36.608 --> 01:19:39.925
lights just a little bit.  Dim 
the lights just a little bit 

01:19:40.599 --> 01:19:42.599
requires knowledge of the 
current brightness and then what

01:19:42.765 --> 01:19:48.676
 a little bit means, and so 
Google handles all of the 

01:19:48.677 --> 01:19:52.555
parsing of the language to 
extract out what to do.  It goes

01:19:52.695 --> 01:19:55.449
 to the home graph and makes 
changes and sends commands to 

01:19:55.450 --> 01:19:58.479
the devices to change the state 
so it matches what the user 

01:19:58.480 --> 01:20:02.554
desires here.  So device makers 
can now build these things 

01:20:03.475 --> 01:20:05.502
really easily, whereas before it
 required a separate app running

01:20:05.697 --> 01:20:08.233
 on your phone that you would 
have to press, but now you can 

01:20:08.234 --> 01:20:11.675
be sitting back on your couch 
and you can just speak to your 

01:20:12.014 --> 01:20:13.770
Google Home device that does 
everything for you.  It's kind 

01:20:13.771 --> 01:20:17.403
of cool.  So how do you do this?
 going to quickly go through an 

01:20:17.606 --> 01:20:20.975
example.  There's a talk that 
goes through this in complete 

01:20:20.976 --> 01:20:24.029
detail where they're going to 
show demos and go through the 

01:20:24.030 --> 01:20:27.804
examples line by line.  what 
happens is we provided a sample,

01:20:28.274 --> 01:20:33.372
 which is on our developer's 
Google.com/action/spothome, and 

01:20:33.373 --> 01:20:38.281
there's a sample we provided.  
spin up the example on your 

01:20:38.875 --> 01:20:41.618
cloud server of your choice, and
 then you submit an action 

01:20:41.619 --> 01:20:46.281
package that tells the Google 
Home that that demo exists.  The

01:20:46.444 --> 01:20:49.564
 next step is you go to your 
phone and you have to register 

01:20:49.887 --> 01:20:54.518
the devices that you own.  So 
you click on your smart home 

01:20:54.519 --> 01:20:59.034
integration and type in the user
 name and password for that 

01:20:59.035 --> 01:21:04.180
particular OEM's service, and it
 returns the credentials to the 

01:21:04.181 --> 01:21:10.318
Google Home.  So the Assistant. 
 the Assistant has a log in 

01:21:10.319 --> 01:21:14.070
token to control your devices.  
it comes time for the user when 

01:21:14.071 --> 01:21:16.923
they say dim the lights a little
 bit, now everything springs in 

01:21:17.130 --> 01:21:21.150
action.  So dim the lights a 
little bit go to the home graph.

01:21:21.151 --> 01:21:24.999
  The home graph decides how 
much to lower the dimness of the

01:21:25.161 --> 01:21:30.306
 light bulb by.  then the light 
bulb is center command that's 

01:21:30.307 --> 01:21:34.313
through the API that we show 
you, and then the command 

01:21:34.314 --> 01:21:37.336
arrives at your cloud service, 
and then you can send the 

01:21:37.337 --> 01:21:39.740
command to your light bulbs 
however it's implemented and 

01:21:39.741 --> 01:21:42.995
change the light bulb state. 
really designed to integrate 

01:21:42.996 --> 01:21:46.486
with existing infrastructures, 
because lots of companies have 

01:21:46.487 --> 01:21:49.366
different light bulbs out there,
 and we want to make it easy.  

01:21:49.367 --> 01:21:52.542
It hooks into cloud 
infrastructure very easily.  You

01:21:52.543 --> 01:21:55.694
 have a really small cloud 
service and hook it all in, and 

01:21:55.695 --> 01:21:58.240
it just works.  Now,

01:22:02.425 --> 01:22:07.355
 one of the very nice things 
about this is we integrate it in

01:22:08.037 --> 01:22:13.770
 different OEMs so you don't 
need to mention the name of the 

01:22:13.904 --> 01:22:16.234
manufacturer.  It tells all of 
them connected to the home 

01:22:16.484 --> 01:22:19.472
graph.  The other thing you can 
do is you can embed the Google 

01:22:19.473 --> 01:22:22.577
Assistant SDK into a device like
 a light bulb, and then you can 

01:22:23.339 --> 01:22:26.489
talk to the light bulb itself.  
when you speak to it light bulb,

01:22:26.648 --> 01:22:30.459
 you can say turn off, and the 
light bulb will turn off.   turn

01:22:30.629 --> 01:22:33.082
 on all the lights in the house,
 and it will send the command 

01:22:33.218 --> 01:22:36.244
everywhere.  So you have the 
ability to embed the Assistant 

01:22:36.245 --> 01:22:42.047
into the devices itself, and 
there's all kinds of 

01:22:42.048 --> 01:22:44.680
combinations to do here.  The 
cocktail machine example is an 

01:22:44.681 --> 01:22:48.505
example of a device that has the
 Assistant built in, and it's a 

01:22:48.506 --> 01:22:52.975
device of its own that hooks 
into the eco-system of things.  

01:22:52.976 --> 01:22:56.759
that's the really nice thing 
about the Google Assistant SDK. 

01:22:57.412 --> 01:23:00.932
 brings embedding devices and 
the smart home initiative 

01:23:01.056 --> 01:23:03.467
together.  So definitely go 
check that out in the sandbox 

01:23:03.625 --> 01:23:06.304
area.  There's a bunch of really
 nice demos, and we have 

01:23:06.305 --> 01:23:11.334
examples to play with to sort of
 see how they work.  As a few 

01:23:11.335 --> 01:23:14.156
other developer products, let's 
go through them quickly.  We 

01:23:14.157 --> 01:23:18.728
have Firebase, so Firebase is an
 SDK that many are familiar with

01:23:19.004 --> 01:23:22.565
 for writing Android apps.  It 
works on the web, Android, iOS. 

01:23:23.007 --> 01:23:26.885
 It's a portable library that 
runs any.  Firebase cloud 

01:23:26.886 --> 01:23:30.646
messages is part of that, and it
 allows you to deliver quick, 

01:23:30.647 --> 01:23:34.875
reliable messages to devices to 
wake them up.  Normally when you

01:23:35.828 --> 01:23:41.046
 build IoT devices the quick and
 dirty way is to see polling, 

01:23:41.047 --> 01:23:44.755
where you poll every five 
minutes.  That's not efficient, 

01:23:44.756 --> 01:23:48.538
because if someone says change 
the lights, it will take five 

01:23:48.727 --> 01:23:53.518
minutes.  It's a great way to 
deliver messages in your 

01:23:53.519 --> 01:23:55.776
products between your devices if
 that's something you want to 

01:23:55.996 --> 01:24:00.805
do.  It provides fast updates 
and it's available currently 

01:24:00.806 --> 01:24:03.699
everywhere.  Because Android 
Things supports Google Play 

01:24:04.015 --> 01:24:07.916
services, it then supports all 
of the cool features of Firebase

01:24:08.219 --> 01:24:12.442
 as well.  Firebase also has a 
realtime database capability.  

01:24:12.443 --> 01:24:17.994
So it's cloud-hosted and based 
on NoSQL and let us you store 

01:24:17.995 --> 01:24:21.459
and sync data realtime as well. 
 Maybe the smart home is not for

01:24:21.460 --> 01:24:26.459
 you, and you want to do 
synchronizing between devices 

01:24:26.460 --> 01:24:30.041
and you can do that.  Because 
Android Things supports all 

01:24:30.042 --> 01:24:33.604
Firebase out of the box, you can
 use this stuff for free without

01:24:33.803 --> 01:24:37.955
 doing extra work.  engineers on
 the team made a sample where he

01:24:37.956 --> 01:24:43.057
 put Firebase to work on devices
 as well.  There's a UL there to

01:24:43.058 --> 01:24:46.335
 do that.  That's useful for 
cheap devices to embed Firebase 

01:24:46.336 --> 01:24:50.050
into that.  The nice thing about
 Firebase, the database, is that

01:24:50.717 --> 01:24:55.326
 it -- you don't need your own 
server.  If you want to 

01:24:55.327 --> 01:25:00.200
synchronize between devices, you
 don't need cloud hosting and we

01:25:00.585 --> 01:25:02.585
 handle 

01:25:04.626 --> 01:25:08.826
it.  We provided a whole bunch 
of samples for that, so check it

01:25:04.626 --> 01:25:07.235
 out if you're interested.  
Finally, for Firebase, we also 

01:25:07.236 --> 01:25:15.086
have the ability to store user 
generated cone tent,- content, 

01:25:15.087 --> 01:25:17.745
and it takes a photo and you 
want to synchronize it over to a

01:25:17.978 --> 01:25:20.401
 device running an app you've 
got.  This is great because you 

01:25:20.402 --> 01:25:23.388
can take that photo, and it will
 store it in Firebase for you 

01:25:23.389 --> 01:25:26.053
and make it available to all the
 other devices that are part of 

01:25:26.054 --> 01:25:29.989
your eco-system.  So you can 
store photos, videos, large 

01:25:30.155 --> 01:25:35.712
files.   of nice for things like
 this.  Once again, it works on 

01:25:35.713 --> 01:25:39.584
Android Things.  Some of the 
things to use on Android TV as 

01:25:40.191 --> 01:25:42.483
well.  They're full Android 
devices with the same 

01:25:42.484 --> 01:25:47.507
capabilities as phones, so you 
can use it there as well.  And 

01:25:47.508 --> 01:25:50.803
then just yesterday we released 
a blog post where we announced a

01:25:50.979 --> 01:25:56.737
 new initiative called cloud IoT
 core, which is a fully managed 

01:25:57.988 --> 01:25:59.988
service on the

01:26:01.698 --> 01:26:04.745
 Google Cloud Platform that 
allows to connect multiple 

01:26:04.746 --> 01:26:09.148
devices to Google Cloud.  The 
reason it's cool is it scales 

01:26:09.149 --> 01:26:12.634
automatically and works anywhere
 in the world.  We provide 

01:26:12.635 --> 01:26:15.151
Endpoints everywhere you don't 
have to worry about.  You upload

01:26:15.274 --> 01:26:18.541
 the data and it works 
everywhere in the world and 

01:26:18.542 --> 01:26:23.517
handles millions of devices.  a 
scenario where you have an 

01:26:23.518 --> 01:26:27.194
enterprise building millions of 
thermostats or power meters for 

01:26:27.195 --> 01:26:30.449
the power company or something. 
 Every meter logs data every 

01:26:30.834 --> 01:26:33.179
minute, and there's millions of 
them.  Imagine millions of 

01:26:33.180 --> 01:26:37.290
devices logging data every 
minute.  You end up with 

01:26:37.291 --> 01:26:40.146
terabytes of data really, really
 quickly.  Google Cloud is ideal

01:26:40.384 --> 01:26:45.372
 for this thing because it's 
built to run really megalarge 

01:26:46.283 --> 01:26:48.839
applications.  So we support the
 ability to use standardized 

01:26:49.553 --> 01:26:53.149
MQTT messages, so we support 
lots of different protocols like

01:26:53.455 --> 01:26:58.257
 that.   all the data very 
easily, and the nice thing is 

01:26:58.373 --> 01:27:02.102
you can use cloud services like 
BigQuery to analyze the data and

01:27:03.024 --> 01:27:05.195
 extract out really useful 
information that you might not 

01:27:05.196 --> 01:27:08.175
be able to see the small 
datasets.  Once again, we have a

01:27:08.307 --> 01:27:13.895
 bunch of talks about cloud IoT 
as well, we have two.  One is a 

01:27:14.396 --> 01:27:16.840
combo session about county and 
another one is about cloud IoT 

01:27:16.841 --> 01:27:20.682
and all the concepts.   out 
those two talks.  They have 

01:27:20.683 --> 01:27:25.413
demos and samples and so forth 
you can learn more about.  So 

01:27:25.414 --> 01:27:28.576
we're almost out of time.  So 
that was a quick whirlwind tour 

01:27:28.577 --> 01:27:31.399
of some of the things that 
Google provides to support 

01:27:31.400 --> 01:27:35.374
ubiquitous computing and the 
Internet of Things, and we think

01:27:35.498 --> 01:27:38.752
 they're really useful for 
making amazing, powerful, and 

01:27:38.753 --> 01:27:42.811
secure products that scale to a 
worldwide audience, because you 

01:27:42.812 --> 01:27:47.150
can't just build things small.  
to build big because there's 

01:27:47.151 --> 01:27:52.838
lots of THIPGs outs there.  
Every thing has a dedicated deep

01:27:53.033 --> 01:27:56.223
 dive session at IO.  Check it 
out.  The talks are recorded so 

01:27:56.224 --> 01:28:01.770
you can catch up on them later. 
 The other point of our Google 

01:28:01.771 --> 01:28:04.278
I/O is it's about meeting people
 and talking to the engineers 

01:28:04.279 --> 01:28:07.075
that work on the products.  If 
you look at the top of the map, 

01:28:07.076 --> 01:28:12.398
there's a co-lab area.  Not 
everybody has been to the 

01:28:13.122 --> 01:28:15.770
co-labs before, but you can sit 
down and try the products out 

01:28:15.907 --> 01:28:18.375
yourself.  We have devices 
plugged in and it's a lot of 

01:28:18.534 --> 01:28:21.123
fun.  We have engineers that 
work on the products standing 

01:28:21.124 --> 01:28:24.875
around to answer questions and 
help you out.  We have office 

01:28:24.876 --> 01:28:28.703
hours in the bottom right where 
you can show up.  We have three 

01:28:28.704 --> 01:28:30.704
sessions for Android Things 
where you can meet the engineers

01:28:34.616 --> 01:28:38.616
 and ask questions and also 
we're around.  So if you see any

01:28:34.616 --> 01:28:36.625
 walking around, come and talk 
to us and tell us what the idea 

01:28:36.802 --> 01:28:39.409
is, if you have any problems or 
whatever.  We look forward to 

01:28:39.410 --> 01:28:43.729
hearing from you.  Finally, 
what's next?  If you want to 

01:28:43.730 --> 01:28:47.272
learn more, join our Google+ 
communities, and we have three 

01:28:47.273 --> 01:28:54.195
for IoT, actions, and Assistant 
and do a lot of postings to keep

01:28:54.416 --> 01:29:00.436
 people up-to-date.  I'm a 
developer, so follow me on 

01:29:00.437 --> 01:29:03.722
Google+ and Twitter to keep up 
to date with what I'm working 

01:29:03.893 --> 01:29:07.060
on.  What can you do with all of
 this?  There are all kinds of 

01:29:07.061 --> 01:29:09.879
possibilities for IoT and 
Internet of Things.  Think about

01:29:11.143 --> 01:29:13.497
 cool ideas you can build, but 
also I want everyone to think 

01:29:13.629 --> 01:29:15.629
about what things you can

01:29:17.835 --> 01:29:20.861
 of people with accessibility 
issues and people who could 

01:29:20.862 --> 01:29:23.532
benefit from more computing in 
their lives to perform tasks 

01:29:23.533 --> 01:29:27.896
they can't currently perform.  
This technology is changing the 

01:29:27.897 --> 01:29:29.897
world and I look forward to 
building it with 

01:29:40.924 --> 01:29:44.926
      LT. 

01:48:01.077 --> 01:48:03.077
 Well

01:48:05.837 --> 01:48:12.002
 here to talk today about 
accessibility.  So my name is 

01:48:12.003 --> 01:48:14.223
Patrick Clary.  I'm a product 
manager on accessibility here at

01:48:14.396 --> 01:48:18.225
 Google, and I'll be kicking 
things off.  a great group of 

01:48:18.404 --> 01:48:21.321
presenters from different areas 
across Google with me here 

01:48:21.560 --> 01:48:24.082
today.  There's a few things 
that I want you to take away 

01:48:24.395 --> 01:48:31.265
with you as you leave today.  
first one is why designing for 

01:48:31.266 --> 01:48:33.570
accessibility is so important 
and benefits our users, and this

01:48:33.739 --> 01:48:37.110
 isn't just users with a 
disability or an accessibility 

01:48:37.549 --> 01:48:42.014
need.  I want to get across that
 this actually helps all users. 

01:48:42.181 --> 01:48:44.181
 The second thing you learn 
about is

01:48:47.105 --> 01:48:51.761
 accessible on Android and hear 
about what's comng on Android O!

01:48:51.762 --> 01:48:56.631
 And see new demos of these 
things.  Tips for user research 

01:48:56.632 --> 01:48:59.862
for users with an accessibility 
need.  You see an inside look 

01:48:59.863 --> 01:49:03.744
with a couple of examples on 
things we have done at Google 

01:49:04.050 --> 01:49:07.742
and performed research on a 
couple of different products. 

01:49:07.743 --> 01:49:13.110
very exciting.  First, why 
accessibility?  So accessibility

01:49:13.666 --> 01:49:17.371
 is something that, you know, is
 near and dear to my heart, but 

01:49:17.372 --> 01:49:20.255
I want to give you a few reasons
 why it's important.  I'm 

01:49:20.837 --> 01:49:23.986
speaking to the developers.  Why
 it's important for developers 

01:49:23.987 --> 01:49:29.010
to consider as well.  So here's 
a metric I find very compelling,

01:49:29.432 --> 01:49:35.651
 right?  1 in 5 people will have
 a disability in their lifetime.

01:49:35.652 --> 01:49:40.316
  a staggering number, so 
addressing accessibility has a 

01:49:40.317 --> 01:49:43.641
direct benefit on these users.  
a huge benefit.  It's a 

01:49:44.132 --> 01:49:48.070
life-changing benefit, so for 
these users it means the 

01:49:48.507 --> 01:49:52.153
difference with connecting to 
friends, families, really taking

01:49:52.313 --> 01:49:54.910
 advantage of the technology 
that mainstream users really use

01:49:55.475 --> 01:50:01.289
 and enjoy.  The second, as I 
mentioned, is that designing for

01:50:02.215 --> 01:50:05.091
 accessibility really benefits 
all users.  Let me give you a 

01:50:05.237 --> 01:50:08.561
couple of examples.  First, 
think about designing a product 

01:50:08.562 --> 01:50:12.482
that's meant for a blind or a 
low-vision user.  When you do 

01:50:12.733 --> 01:50:17.298
this, you're actually helping 
users that might have their eyes

01:50:18.343 --> 01:50:21.139
 occupied.  Perhaps they're 
driving and looking at another 

01:50:21.140 --> 01:50:26.391
screen and not looking directly 
at their Android device.   is 

01:50:26.392 --> 01:50:30.349
designing for a user with a 
motor impairment, like a tremor.

01:50:30.350 --> 01:50:33.757
  It affects the use of a touch 
screen and makes it difficult to

01:50:34.075 --> 01:50:37.652
 use a touch screen.  Designing 
effectively for these users 

01:50:37.653 --> 01:50:41.292
actually benefits mainstream 
users who otherwise can't use 

01:50:41.293 --> 01:50:45.669
the touch screen.  Maybe they're
 holding groceries or cooking 

01:50:45.670 --> 01:50:49.878
but they can't use the touch 
screen effectively.  When you 

01:50:49.879 --> 01:50:53.920
think about this way, designing 
for accessible is about designs 

01:50:53.921 --> 01:50:57.997
for the widest possibility range
 of abilities within the widest 

01:50:57.998 --> 01:51:00.321
range of situations.  It's not 
about designing for 

01:51:00.655 --> 01:51:02.655
disabilities, it's about 
designing for all

01:51:06.035 --> 01:51:11.768
 users.  So where does Android 
fit in?  In Android we have a 

01:51:11.769 --> 01:51:20.083
series of settings and APIst.  
It allow them to customize how 

01:51:20.084 --> 01:51:25.516
it looks and feels, right?  APIs
 allow developers to build out 

01:51:25.517 --> 01:51:29.867
apps that meet the needs of 
users with accessibility needs 

01:51:29.868 --> 01:51:34.344
and accessibility services.  So 
an accessibility service is a 

01:51:34.830 --> 01:51:37.903
long-running privileged program 
that runs on your device that 

01:51:37.904 --> 01:51:41.449
changes the way users consume 
the content of your device or 

01:51:41.450 --> 01:51:44.468
changes the way they interact 
with their device.  We have a 

01:51:44.469 --> 01:51:48.746
few here.  These are four that 
Google has developed.  TalkBack,

01:51:49.079 --> 01:51:51.079
 BrailleBack, Switch Access and 
Voice Access. 

01:51:53.102 --> 01:51:55.721
 So TalkBack and BrailleBack are
 services designed for users who

01:51:55.722 --> 01:51:59.854
 are blind or have low vision.  
TalkBack is our screen reader.  

01:51:59.855 --> 01:52:04.222
This allows users to basically 
interpret the content of their 

01:52:04.223 --> 01:52:07.905
device through an audio stream. 
 So users will listen to what's 

01:52:07.906 --> 01:52:12.238
on the device using TalkBack.  
BrailleBack is similar, but 

01:52:12.239 --> 01:52:16.807
instead of an audio stream, want
 content going to refreshable 

01:52:16.808 --> 01:52:20.159
Braille display.  a handheld 
Braille device where a user can 

01:52:20.160 --> 01:52:23.772
scan their fingers across it and
 interpret the content on the 

01:52:24.001 --> 01:52:27.005
screen.  We also have Switch 
Access and Voice Access.  These 

01:52:27.006 --> 01:52:29.942
are two services targeted to 
users with motor impairments, so

01:52:30.105 --> 01:52:33.593
 for example, as I mentioned, 
users that have a tremor.  These

01:52:33.696 --> 01:52:37.694
 are users that typically can't 
use a touch screen, so it's 

01:52:37.695 --> 01:52:40.696
Switch Access and Voice Access, 
we provide full Android control 

01:52:40.827 --> 01:52:45.371
without having to touch the 
screen.  So with Switch Access, 

01:52:45.984 --> 01:52:49.651
users typically use an adaptive 
switch device.  You see an 

01:52:49.652 --> 01:52:52.791
example later, but this is a 
physical hardware switch that a 

01:52:52.792 --> 01:52:55.815
user might have mounted in front
 of them and mounted to a 

01:52:56.147 --> 01:52:59.962
wheelchair, and they'll tap on 
the switch to linearly scroll 

01:52:59.963 --> 01:53:05.184
through things on their device. 
 actually allows users to 

01:53:05.185 --> 01:53:09.478
control the device purely by 
voice.  You issue voice commands

01:53:09.637 --> 01:53:12.796
 that correspond to touch 
controls like scroll up, scroll 

01:53:12.909 --> 01:53:19.372
down, tap, Gmail, go home, et 
cetera.  So that's what we have 

01:53:19.373 --> 01:53:23.343
on Android.  For a deeper look 
into the upcoming version of 

01:53:23.476 --> 01:53:29.078
Android, I'll hand it over to 
Maya and Victor. 

01:53:37.228 --> 01:53:42.928
 you, Patrick.  Maimcy victor 
SaaS ran, and I'm a technical 

01:53:42.929 --> 01:53:49.110
program manager on the Android 
accessibility processes team.  

01:53:49.111 --> 01:53:52.275
Android O! Our major focus was 
to increase productivity for 

01:53:52.276 --> 01:53:57.461
users of accessibility services.
 particular, we looked at users 

01:53:57.462 --> 01:54:01.055
blind and vision impaired and 
used the TalkBack screen reader.

01:54:01.056 --> 01:54:06.374
  We introduce accessibility API
s to help developers to develop 

01:54:06.375 --> 01:54:09.782
services for people with 
physical disabilities.  You have

01:54:09.952 --> 01:54:13.280
 a service called Switch Access.
  but not least, we're 

01:54:13.281 --> 01:54:16.218
introducing the new 
accessibility service, which 

01:54:16.891 --> 01:54:19.306
will help people with print and 
learning disabilities to read 

01:54:19.307 --> 01:54:25.519
information on the screen.  Let 
me start with new features for 

01:54:25.924 --> 01:54:29.766
TalkBack.  The first feature I 
would like to talk about is 

01:54:31.847 --> 01:54:35.910
called accessibility volume.  
the fancy words is an ability 

01:54:35.911 --> 01:54:40.172
for someone who is blind or 
vision-impaired or specifically 

01:54:40.173 --> 01:54:45.410
using a TalkBack screen reader 
to adjust the volume of speech 

01:54:45.411 --> 01:54:48.029
independently from the volume of
 media.  For example, when 

01:54:48.030 --> 01:54:53.199
watching a YouTube video or 
listening to music.   this by 

01:54:53.200 --> 01:54:58.649
introducing a new audio stream 
in O called accessibility 

01:54:58.807 --> 01:55:02.441
stream.  As a developer of an 
accessibility service, what that

01:55:03.183 --> 01:55:07.479
 means to you is that you will 
have to request this feature 

01:55:07.480 --> 01:55:11.538
when writing your accessibility 
service.   it is not available 

01:55:11.539 --> 01:55:13.633
to you.  So let me show you how 
this feature works. 

01:55:24.980 --> 01:55:29.785
    SPEAKER:   Go home.   
Overview.  Settin

01:55:32.861 --> 01:55:42.070
 Open YouTube.   Showing items 1
 to 2.  the developer 

01:55:42.967 --> 01:55:52.806
show.  Up developer show TL069, 
11K views. This is

01:55:53.105 --> 01:55:55.575
 a typical situation.  I'm 
trying to listen to TalkBack and

01:55:55.730 --> 01:55:58.672
 it's talking back to me.  I 
can't hear anything.  What I can

01:55:58.881 --> 01:56:02.303
 do right now is completely shut
 off the volume of the video, 

01:56:02.304 --> 01:56:04.304
and I can still hear TalkBack. 

01:56:09.691 --> 01:56:13.177
 So this is essentially how it 
works.  The TalkBack user is now

01:56:13.349 --> 01:56:16.557
 able to adjust the speech of 
the -- the volume of the speech 

01:56:16.558 --> 01:56:18.558
independently from the media 
volume. 

01:56:22.528 --> 01:56:29.703
 More details and links.  You 
also notice there's a new 

01:56:29.846 --> 01:56:31.846
accessibility volume slider at 
the top of the screen.  That, 

01:56:31.935 --> 01:56:36.868
again, allows you if you're a 
visual user, you can adjust this

01:56:37.225 --> 01:56:42.608
 slider as well from the volume 
tray. Rewind.  Pause video.  

01:56:42.609 --> 01:56:49.841
Play video.  Home screen 1 of 2.
  The next feature I would like 

01:56:49.842 --> 01:56:55.321
to talk about is -- has to do 
with new gestures for TalkBack. 

01:56:55.740 --> 01:56:59.960
 Many of the new Android devices
 use a fingerprint sensor at the

01:57:00.553 --> 01:57:05.459
 back of their device, so we 
decided why not utilize the 

01:57:05.460 --> 01:57:08.345
fingerprint sensor for 
additional gestures to allow 

01:57:08.346 --> 01:57:13.269
TalkBack users to activate some 
of the favorites of their 

01:57:13.582 --> 01:57:17.828
features.  So we're introducing 
the ability for an accessibility

01:57:17.985 --> 01:57:21.965
 service such as TalkBack to 
utilize the fingerprint sensors.

01:57:21.966 --> 01:57:25.715
  The gestures available to the 
user are swiping left, right, up

01:57:25.918 --> 01:57:31.374
 or down.  These gestures are 
unsignable, so you can decide 

01:57:31.375 --> 01:57:34.373
which TalkBack feature each

01:57:38.295 --> 01:57:41.313
 gesture will launch.  You have 
to request a special flag to 

01:57:41.314 --> 01:57:45.147
take advantage of fingerprint 
gestures.  Fingerprint gestures 

01:57:45.334 --> 01:57:51.228
work, again, only on O devices. 
 to point that out.  Let me show

01:57:51.338 --> 01:57:53.979
 you how this works. 

01:57:57.658 --> 01:58:04.430
 3:10 p.m.  Home speed.  Chrome.
  I'm going to attempt something

01:58:04.995 --> 01:58:12.894
 very brave.   a selfie.  
Camera.  Camera.  I use 

01:58:13.819 --> 01:58:18.710
fingerprint gestures to do that.
 Photo gallery, shutter, switch 

01:58:18.711 --> 01:58:25.853
to front camera. to back camera.
  Right.   of screen.  Very 

01:58:25.976 --> 01:58:34.858
close.  faces.  Shutter.  Photo 
taken.  Photo gallery.  One 

01:58:35.381 --> 01:58:37.381
face.  Centered.  

01:58:42.782 --> 01:58:49.233
 )    SPEAKER:   Home screen 1 
of 2.  These are the fingerprint

01:58:50.047 --> 01:58:54.673
 gestures in Android O! For 
accessibility.  I would like to 

01:58:54.674 --> 01:58:57.599
talk about multilingual support.
  One of the things we realized 

01:58:57.600 --> 01:59:00.492
since Android has been used so 
much outside of the U.S., we 

01:59:00.493 --> 01:59:05.462
badly need to support 
international users.  In O we're

01:59:06.823 --> 01:59:11.454
 introducing the Google 
Text-to-Speech engine to 

01:59:11.455 --> 01:59:15.068
recognize languages appearing on
 the screen and switch 

01:59:15.069 --> 01:59:17.993
Text-to-Speech to speak in that 
particular language.  If you're 

01:59:17.994 --> 01:59:22.961
a developer and you would like 
to trigger language automatic 

01:59:24.468 --> 01:59:29.885
switching, you can use 
LocaleSpan to trigger the 

01:59:30.035 --> 01:59:33.787
change.  Before you get excited,
 let me show you actually how 

01:59:33.788 --> 01:59:41.246
the language switch and feature 
 Device unlocked.   Overview.  

01:59:41.674 --> 01:59:51.128
Overview.  home.  Home.  Home 
screen inbox.  Pick messages.   

01:59:51.447 --> 01:59:57.819
Inbox.  Remember subject 
beautiful day, remember two.  

01:59:58.334 --> 02:00:07.750
11.  More menu.  Hi there.   my 
wife, lovely wife likes to pull 

02:00:07.751 --> 02:00:10.837
little jokes at me.  Well, in 
this particular case this is not

02:00:10.964 --> 02:00:16.458
 a joke.  She sent me a message 
a few days ago to try and invite

02:00:16.645 --> 02:00:21.080
 me for dinner.  She does a 
little thing in style.  This is 

02:00:21.081 --> 02:00:24.949
no exception.  She sent me a 
message in four languages 

02:00:24.950 --> 02:00:30.458
because we're so cool, right?   
deals with this particular 

02:00:30.609 --> 02:00:34.302
situation.  More menu.  Hi 
there. 

02:00:49.203 --> 02:00:51.490
Speaking in non-English )

02:00:58.750 --> 02:01:05.607
    SPEAKER:   Let's have dinner
 tonight.  Thank you.  So that's

02:01:06.622 --> 02:01:11.250
 likely both of us can speak 
both the languages, and I was 

02:01:11.251 --> 02:01:15.829
able to understand what she 
said.  It was French, Polish, 

02:01:15.830 --> 02:01:20.212
Ukrainian and Chinese for your 
information.  The last thing I 

02:01:20.213 --> 02:01:23.885
want to talk about is the new 
accessibility shortcut.  quite a

02:01:23.886 --> 02:01:27.892
 bit of time users ask us for an
 ability to turn off the 

02:01:27.893 --> 02:01:30.380
favorite accessibility service 
regardless of which screen 

02:01:30.381 --> 02:01:33.472
they're on.  They wanted a 
shortcut key to press and the 

02:01:33.473 --> 02:01:36.645
service will toggle on and off. 
example, if a blind person 

02:01:37.180 --> 02:01:40.617
walked into the store that sold 
Android phones, they wanted to 

02:01:40.618 --> 02:01:47.476
be able to launch TalkBack and 
start exploring the phone to 

02:01:47.477 --> 02:01:53.172
decide where they want to 
purchase or not.  We introduced 

02:01:53.173 --> 02:01:57.090
in accessibility shortcut, and 
it's configured to launch 

02:01:57.217 --> 02:02:01.497
TalkBack, but it can launch any 
available accessibility services

02:02:01.582 --> 02:02:05.551
 on the device.  I want to point
 out that this works on any 

02:02:06.407 --> 02:02:11.616
screen, even after you exit the 
Setup Wizard.  Once the shortcut

02:02:11.847 --> 02:02:14.103
 is configured, it will be 
available to the user at all 

02:02:14.468 --> 02:02:18.357
times.  As a developer of an 
accessibility service, you have 

02:02:18.358 --> 02:02:22.390
to request this feature at this 
time when you service it.   it's

02:02:22.658 --> 02:02:26.581
 not available to use.  It's 
unavailable to accessibility 

02:02:26.859 --> 02:02:30.609
services.  As you can guess, the
 demo is pretty simple.  I'll 

02:02:30.610 --> 02:02:37.751
show you how this works.  Home. 
 All I have to do right now is 

02:02:37.752 --> 02:02:39.752
press two volume keys at the 
same time. 

02:02:43.092 --> 02:02:47.694
 And the accessibility service 
is off.  I press them again,

02:02:52.164 --> 02:02:56.385
 that's it.  That's how 
accessibility shortcut works.  

02:03:02.656 --> 02:03:05.293
    VICTOR TSARAN:  So as you 
can imagine, I just scratched 

02:03:05.294 --> 02:03:10.029
the surface.  There's much more 
coming up.  I would like Maya to

02:03:10.162 --> 02:03:18.542
 talk about this other exciting 
services and APIs.  Thank you.  

02:03:18.683 --> 02:03:20.683
victor. 

02:03:23.847 --> 02:03:28.690
 Thank you for the lovely demos.
  My name is mara Ben Ari.  I'm 

02:03:28.691 --> 02:03:31.648
a product manager on Android 
accessibility.  The next set of 

02:03:31.649 --> 02:03:37.609
features we're going to talk 
about are new APIs to support 

02:03:37.610 --> 02:03:40.894
new framework support 
functionality.  We're adding 

02:03:40.895 --> 02:03:46.832
continuous gesture API.  In 
every nougat we added an API to 

02:03:46.833 --> 02:03:51.325
allow performing gestures on 
behalf of the user.  In Android 

02:03:52.426 --> 02:03:56.365
O! We are extending this API to 
make it easier to perform 

02:03:56.366 --> 02:04:00.126
continuous gestures.  What does 
it mean?  It means that, for 

02:04:00.257 --> 02:04:05.880
example, it will be easier for 
users using a wheelchair mouse 

02:04:05.881 --> 02:04:12.338
or hat tracker to perform 
gestures such as drop, text 

02:04:12.686 --> 02:04:15.435
selection, answering phone calls
 and zooming in and out of

02:04:19.536 --> 02:04:23.885
 next feature I'm very excited 
about is called the 

02:04:23.886 --> 02:04:28.309
accessibility button in the 
navigation bar.  What we added 

02:04:28.310 --> 02:04:32.081
here is a new button, 
accessibility button to the 

02:04:32.082 --> 02:04:38.624
right of the navigation bar to 
quickly invoke context-dependent

02:04:38.625 --> 02:04:42.637
 accessibility features.  Let's 
give an example.  Right now we 

02:04:43.691 --> 02:04:48.171
have magnification.  So a user 
using magnification can triple 

02:04:48.172 --> 02:04:53.314
tap to magnify the screen.   
some users find it challenging 

02:04:53.315 --> 02:04:59.484
to perform the triple-tap 
gestures.  In Android O we're 

02:04:59.485 --> 02:05:05.138
adding an alternative to invoke 
magnification.  Let me show you 

02:05:05.139 --> 02:05:07.338
how this works. 

02:05:13.288 --> 02:05:16.445
 So I have that accessibility 
button on the bottom right of 

02:05:16.446 --> 02:05:19.600
the screen.  I can simply tap 
the button, and if I tap 

02:05:19.916 --> 02:05:25.397
anywhere on this screen, I will 
magnify the content.  Now, I can

02:05:25.803 --> 02:05:29.403
 move this around using two 
fingers, and if I want to 

02:05:30.087 --> 02:05:32.762
demagnify it, I will just press 
the accessibility button again. 

02:05:35.569 --> 02:05:43.856
 Back to the slides.  Now, this 
is optionally supported by 

02:05:43.857 --> 02:05:49.400
developers for devices with 
software navigation bar.  The 

02:05:49.401 --> 02:05:52.693
button will be shown there only 
if there is an accessibility 

02:05:52.694 --> 02:06:01.130
service or feature that supports
 it and it is turned on.  The 

02:06:01.131 --> 02:06:06.781
next set of features are for 
people with disabilities.  There

02:06:06.782 --> 02:06:10.521
 are people who have difficulty 
reading text.  Those include 

02:06:10.522 --> 02:06:15.858
people with dyslexia, 
far-sighted, low vision, 

02:06:15.859 --> 02:06:17.927
illiterate or even people that 
want to learn a new 

02:06:21.521 --> 02:06:24.856
language.  We recently launched 
a service called Select to 

02:06:25.144 --> 02:06:31.224
Speak.  Select to Speak is part 
of TalkBack 5.2.  What the 

02:06:31.225 --> 02:06:34.961
service does is it vocalizes 
content on the screen by a

02:06:35.703 --> 02:06:38.675
llowing the user to select 
elements to read.  Now, this 

02:06:38.676 --> 02:06:43.373
service is available for 
Lollipop MRI and 

02:06:49.456 --> 02:06:49.979
up.  Now, this is an example of 
how Select to Speak works.  You 

02:06:49.980 --> 02:06:54.519
can see a floating action 
button.  Then the user can 

02:06:54.520 --> 02:06:58.884
either tap an element or select 
-- marquee select elements to 

02:06:59.130 --> 02:07:08.995
read, and the content will be 
read out loud.   We're adding 

02:07:08.996 --> 02:07:13.346
additional functionality for 
Select to Speak, including 

02:07:13.347 --> 02:07:17.745
reading the whole page, advance 
controller to move backwards or 

02:07:17.746 --> 02:07:22.785
adjust the speed.  We add 
lighting and we integrated this 

02:07:22.923 --> 02:07:26.015
service into the Setup Wizard.  
me show you how it works. 

02:07:31.669 --> 02:07:36.467
 I have here the accessibility 
button, and if I press on the 

02:07:36.874 --> 02:07:40.231
accessibility button, I can show
 that also I have a service 

02:07:40.232 --> 02:07:45.296
which uses this button called 
Select to Speak.  I will select 

02:07:45.297 --> 02:07:50.335
that one, and if I will tap the 
button again, then I will be 

02:07:50.336 --> 02:07:54.785
shown a controller bar.  At this
 point I can drag and drop or 

02:07:54.786 --> 02:07:56.786
move the controller bar on the 
screen. 

02:08:00.611 --> 02:08:04.183
 Now I can either support the 
functionality I already have, 

02:08:04.184 --> 02:08:10.856
for example, I can marquee 
select or tap an element.  Maps.

02:08:10.857 --> 02:08:15.906
  And it will be read out loud. 
 I can also have continuous 

02:08:16.320 --> 02:08:20.808
reading.  69 degrees Fahrenheit,
 Wednesday may 17th, maps, play 

02:08:21.089 --> 02:08:28.000
store, Chrome, drive,    MAYA 
BEN ARI:  I'll stop that one.  

02:08:28.122 --> 02:08:33.573
Now, we also have the Select to 
Speak that can read the whole 

02:08:33.850 --> 02:08:37.734
page, and it can read the whole 
sentences.  I can go backwards 

02:08:37.735 --> 02:08:42.533
and forwards with the sentences 
and also increase and decrease 

02:08:42.534 --> 02:08:45.720
the speed by pressing the plus 
and minus button.  Let me show 

02:08:45.721 --> 02:08:54.958
you how it works.  NAF gate out.
 Speak.  Settings on.  tap 

02:08:54.959 --> 02:08:59.133
specific items on your screen 
and then you can tap a specific 

02:08:59.263 --> 02:09:02.927
item.  Drag your finger across 
the screen to select multiple 

02:09:03.284 --> 02:09:05.284
items.  Tap the play button to 
hear everything. 

02:09:13.633 --> 02:09:17.637
 Select to Speak available in 
Android O! And with TalkBack 

02:09:19.723 --> 02:09:24.901
5.2.  The next section is about 
testing.  We'd like to make 

02:09:24.902 --> 02:09:29.683
Android more accessible for 
everyone.  Developers are a 

02:09:30.150 --> 02:09:33.827
crucial part of this mission.  
develop better experience for 

02:09:33.828 --> 02:09:38.065
people with disabilities, but a 
lot of it has to do with how you

02:09:38.578 --> 02:09:44.754
 test your app for 
accessibility.  If in the next 

02:09:44.755 --> 02:09:49.267
section I'm going to talk about 
manual and automated testing for

02:09:49.871 --> 02:09:53.138
 accessibility.  start with 
manual testing. first thing that

02:09:53.298 --> 02:09:56.664
 you want to do is you want to 
get familiar

02:09:59.936 --> 02:10:05.241
 with it and understand how the 
experience works with Android 

02:10:05.242 --> 02:10:11.182
accessibility services like 
switch talk and access.  Cover 

02:10:12.087 --> 02:10:14.087
your eyes and try to go through 
the experience in your app. 

02:10:17.475 --> 02:10:24.234
 like to notice whether your app
 is representing correcting -- 

02:10:24.235 --> 02:10:26.872
correctly the content for 
TalkBack.  For example, maybe 

02:10:26.873 --> 02:10:31.501
you have unlabeled bottles or 
maybe you're missing a 

02:10:31.502 --> 02:10:35.360
description or maybe you have 
controls that are hard to 

02:10:35.361 --> 02:10:40.079
interact with.  Pay special 
attention for issues that may 

02:10:40.080 --> 02:10:42.080
impact users

02:10:44.697 --> 02:10:47.729
 efficiencies while performing 
common flows.  If it works well 

02:10:47.730 --> 02:10:53.216
with TalkBack, it will also 
likely work well with 

02:10:53.217 --> 02:10:56.410
BrailleBack and Select to Speak,
 because what you are doing is 

02:10:56.411 --> 02:11:01.626
you're actually testing your 
app's output.  Your testing 

02:11:01.627 --> 02:11:05.344
whether you're representing 
correctly your content to the 

02:11:05.345 --> 02:11:08.009
accessibility service.  It's 
this.  The next thing that you 

02:11:08.010 --> 02:11:14.155
want to test is you want to test
 with Switch Access.  As Patrick

02:11:14.646 --> 02:11:19.420
 mentioned, Switch Access is a 
service started for users with 

02:11:20.004 --> 02:11:21.973
motor impairment who has 
difficulty interacting with 

02:11:21.974 --> 02:11:25.560
their device.  In that case, the
 user connects something, which 

02:11:25.561 --> 02:11:30.288
is called an adaptive switch.  
an example of an adaptive 

02:11:30.470 --> 02:11:35.162
switch.  An adaptive switch can 
contain two buttons or less or 

02:11:35.543 --> 02:11:43.571
more.  In that case the user 
could use one  you don't have an

02:11:44.368 --> 02:11:52.355
 adaptive switch, you can just 
connect an external key board 

02:11:52.356 --> 02:11:57.355
and map the certain keyboard 
buttons to certain activities in

02:11:57.858 --> 02:12:00.465
 Switch Access.  After you do 
that, you want to go through 

02:12:00.466 --> 02:12:04.536
common flow, and you want to 
note whether Switch Access 

02:12:04.537 --> 02:12:09.925
interacts correctly with your 
app UI.  If it works well with 

02:12:09.926 --> 02:12:14.216
Switch Access, it will also 
likely work well with Voice 

02:12:14.372 --> 02:12:17.048
Access, because what you do at 
that point, you're testing your 

02:12:17.049 --> 02:12:26.867
app input.  SICH  Switch Access 
and TalkBack, you test the app 

02:12:26.868 --> 02:12:31.462
output and input.  Testing 
Switch Access and TalkBack is 

02:12:31.616 --> 02:12:34.536
the best way for you to 
understand the experience that 

02:12:35.137 --> 02:12:39.953
you are providing for users with
 different needs.  But this is 

02:12:40.230 --> 02:12:42.915
not all, because there are 
multiple other features 

02:12:42.916 --> 02:12:46.960
available on the platform 
including magnification, 

02:12:48.021 --> 02:12:52.246
enlarged text.  To facilitate 
accessibility testing, we also 

02:12:52.247 --> 02:12:54.555
provide a tool which is called 
Accessibility Scanner. 

02:13:00.024 --> 02:13:07.359
 is the stand alone app you can 
downlead free from the play 

02:13:07.438 --> 02:13:12.493
store.  It's targeted for app 
developer and QA testers, and 

02:13:12.494 --> 02:13:20.269
it's a way for you to improve 
the accessibility of your app.  

02:13:20.270 --> 02:13:26.946
How you can use it?  Download it
 and turn it on. see a floating 

02:13:26.947 --> 02:13:29.180
button on the screen.  You are 
interesting into the foreground,

02:13:29.504 --> 02:13:34.859
 and press the button, and then 
Accessibility Scanner will 

02:13:35.101 --> 02:13:38.393
analyze the UI and will show 
some suggestion of how to 

02:13:38.935 --> 02:13:44.472
improve your accessibility and 
in this example, an example for 

02:13:44.715 --> 02:13:50.946
improving the text contrast.  We
 shipped this app in March of 

02:13:50.947 --> 02:13:57.081
last year, and we're very happy 
to announce that in the last 

02:13:58.990 --> 02:14:01.973
year accessibility users used 
the Accessibility Scanner to 

02:14:02.671 --> 02:14:06.272
find over 1 million 
opportunities for improving 

02:14:06.273 --> 02:14:11.770
their app accessibility.  check 
it out and download 

02:14:11.771 --> 02:14:13.771
Accessibility Scanner from the 
play store. 

02:14:17.405 --> 02:14:23.706
 A bit about automated testing. 
 We also created accessibility 

02:14:23.707 --> 02:14:29.888
testing framework to allow you 
to perform out of meta testing. 

02:14:31.276 --> 02:14:36.368
 framework is an OpenSource 
library that provides runtime 

02:14:36.369 --> 02:14:40.523
evaluation on real Android UI 
constructs.  We integrated this 

02:14:40.524 --> 02:14:46.140
testing framework into two -- 
into two common test frameworks 

02:14:46.141 --> 02:14:48.141
called

02:14:51.518 --> 02:14:55.217
 Roboelectric and Espresso.  If 
you already use those, you can 

02:14:55.218 --> 02:14:59.473
simply turn on accessibility 
test functionality within those 

02:14:59.673 --> 02:15:04.345
frameworks, and then you might 
see some of your tests start to 

02:15:04.346 --> 02:15:06.346
fail because they could have an 
improved accessibility. 

02:15:09.908 --> 02:15:14.948
 Lastly, we launch a new section
 about accessibility on 

02:15:17.283 --> 02:15:19.155
developer.Android.com.  This can
 help you guide to better 

02:15:19.156 --> 02:15:21.156
understand how to

02:15:26.543 --> 02:15:30.441
 implement accessibility in your
 app.   we have a page about 

02:15:30.442 --> 02:15:34.479
testing your app accessibility. 
 In general, we recommend a 

02:15:34.480 --> 02:15:37.802
balance between manual testing 
and automated testing for making

02:15:37.924 --> 02:15:43.947
 your app accessible.  With this
 page, the page summarizes how 

02:15:43.948 --> 02:15:51.655
you can develop a holistic test 
strategy to improve manual and 

02:15:51.656 --> 02:15:55.651
automated testing.  With all 
this testing, there is no better

02:15:55.821 --> 02:16:00.314
 way than interacting with 
actual users and conducting user

02:16:01.195 --> 02:16:06.418
 research. For that, Astrid and 
Melissa are going to tell you 

02:16:06.419 --> 02:16:08.862
all about that.  Applause )

02:16:14.867 --> 02:16:18.038
    ASTRID WEBER:  Thank you, 
Maya.  I'm Astrid Weber and I 

02:16:18.039 --> 02:16:23.124
work on user experience research
 for accessibility engineeringal

02:16:23.328 --> 02:16:33.226
 Google.   Melissa Barnhart.  
What is UX research and why do 

02:16:33.227 --> 02:16:37.536
we need it?  you have a dream of
 opening a bar.  How many of us 

02:16:37.537 --> 02:16:41.847
haven't had it at some point in 
our lives.  You have these cool 

02:16:41.848 --> 02:16:45.023
designer deals for the interior 
of your bar, and you know 

02:16:45.024 --> 02:16:48.095
exactly what you want to serve 
on the drinking menu.  You 

02:16:48.096 --> 02:16:52.359
really know that the music 
you're going to play is what you

02:16:53.660 --> 02:17:00.164
 basically have at home and you 
play yourself.  Basically while 

02:17:00.359 --> 02:17:04.519
you're building your bar, you're
 imagining how perfect a bar 

02:17:04.520 --> 02:17:09.087
could be if it would just be the
 perfect place for someone with 

02:17:09.088 --> 02:17:12.841
exactly the same tastes like 
yourself.  Basically, your users

02:17:13.185 --> 02:17:19.191
 are just like yourself, right? 
 are, unfortunately, that your 

02:17:19.192 --> 02:17:23.936
bar might be empty.  Your 
business idea might be failing, 

02:17:23.937 --> 02:17:28.808
like over 50% of all bars and 
restaurants are failing within 

02:17:28.809 --> 02:17:32.897
the first year of their 
existence.  I'm pretty sure that

02:17:32.898 --> 02:17:36.944
 all the owners of these bars 
and restaurants really wanted to

02:17:37.366 --> 02:17:42.129
 create a good experience and 
really made choices that they 

02:17:42.513 --> 02:17:46.919
would have taken themselves.  
brings us up to the importance 

02:17:46.920 --> 02:17:50.707
of user experience research and 
design.  For restaurants and 

02:17:50.708 --> 02:17:56.591
bars and also for technology 
development.   the failure rate 

02:17:56.592 --> 02:18:02.976
amongst start-ups is at 90%, 
which is much higher than 

02:18:02.977 --> 02:18:06.278
running a bar or restaurant.  At
 the same time, research shows 

02:18:06.810 --> 02:18:11.640
that if you are testing your own
 assumptions and your user needs

02:18:11.823 --> 02:18:16.010
 often and early, your chances 
increase so much more that you 

02:18:16.011 --> 02:18:22.847
will end up with a rated app and
 satisfied users.  That brings 

02:18:22.848 --> 02:18:28.394
us very close to the definition 
of actual and objective UX 

02:18:28.749 --> 02:18:33.336
research, which really is all 
about changing your own 

02:18:33.750 --> 02:18:36.397
perspective to that of your 
users to understand their needs 

02:18:36.539 --> 02:18:43.256
including all the accessibility 
needs.  User research focuses on

02:18:43.582 --> 02:18:46.545
 understanding user behaviors, 
needs and motivations for 

02:18:46.546 --> 02:18:51.936
various research techniques, 
it's the process of 

02:18:51.937 --> 02:18:54.439
understanding the impact of 
design on an audience.  Now that

02:18:54.994 --> 02:18:58.949
 we have a common understanding 
of the concept of UX research, 

02:18:58.950 --> 02:19:04.741
what does it actually entail?   
is a set of research methods 

02:19:04.742 --> 02:19:09.001
that can help you during the 
whole process of your product 

02:19:09.002 --> 02:19:14.244
development cycle.  UX research 
methods such as field studies, 

02:19:14.358 --> 02:19:17.671
interviews, or competitive 
analyses are very well-suited in

02:19:17.672 --> 02:19:21.684
 the beginning of your product 
development work, because they 

02:19:21.685 --> 02:19:26.166
are especially useful in order 
to understand how technology 

02:19:26.167 --> 02:19:30.827
usage works and how new 
innovative fields work.  you 

02:19:30.828 --> 02:19:34.803
have decided what to build and 
you have a first prototype, 

02:19:34.804 --> 02:19:40.447
research methods such as 
usability studies, participatory

02:19:40.607 --> 02:19:44.217
 design exercises or remote 
research actually really are 

02:19:44.218 --> 02:19:46.497
useful for you to understand 
what works and what doesn't work

02:19:47.325 --> 02:19:50.232
 in the hands of your users.  
Lastly, once your product is out

02:19:50.620 --> 02:19:53.649
 there in the market, you really
 want to understand how it's 

02:19:54.415 --> 02:19:59.728
doing, right?  Research methods 
such as cognitive walk-throughs,

02:20:02.717 --> 02:20:10.547
- no.  methods such as analysis 
and studies as well as remote 

02:20:10.548 --> 02:20:13.743
testing really help you at that 
stage of your product 

02:20:13.744 --> 02:20:16.609
development to understand how 
the app is doing in the market 

02:20:16.610 --> 02:20:20.582
and if people really like it.  
that, I hand it over to Melissa,

02:20:20.787 --> 02:20:25.737
 who has a very concrete example
 for you from our recent 

02:20:25.738 --> 02:20:32.246
accessibility Android 
development on O.   All right.

02:20:32.551 --> 02:20:39.213
you, Astrid.  Today I'd like to 
show you exactly how 

02:20:39.370 --> 02:20:42.970
accessibility resource has 
informed the design process for 

02:20:43.241 --> 02:20:45.279
Android.  Let's take the 
examples of settings.  We want 

02:20:45.677 --> 02:20:49.009
all users to easily access and 
understand settings relevant to 

02:20:49.333 --> 02:20:52.156
them, including users with 
accessibility needs.  Here we 

02:20:52.157 --> 02:20:57.184
have a screenshot of the 
accessibility settings page for 

02:20:57.185 --> 02:21:02.674
Android N.  When planning for 
Android O, we had assumptions 

02:21:02.675 --> 02:21:07.113
about this page.  We felt it was
 a big unorganized making it 

02:21:07.114 --> 02:21:11.397
hard for users to find what they
 need.  We questioned whether 

02:21:12.041 --> 02:21:14.914
services and system had any real
 meaning to users, so we turned 

02:21:14.915 --> 02:21:18.322
to research to check our 
assumptions and make more 

02:21:18.323 --> 02:21:24.504
informed design decisions.  We 
used two research methods, 

02:21:25.159 --> 02:21:27.757
usability studies and 
intercepts.  As Astrid 

02:21:28.047 --> 02:21:32.339
mentioned, they're well-suited 
for design develop stage.  So we

02:21:32.758 --> 02:21:36.434
 started with usability studies.
  these studies we invited 

02:21:37.135 --> 02:21:39.126
people with visual impairments 
to our offices and prompted them

02:21:39.127 --> 02:21:42.320
 to interact with the 
accessibilities settings page 

02:21:42.321 --> 02:21:45.814
you just saw.  We immediately 
observed some issues, 

02:21:45.815 --> 02:21:47.872
specifically the participants 
could not always find the 

02:21:48.050 --> 02:21:51.552
settings we asked them to find, 
and even when they did, they 

02:21:51.553 --> 02:21:54.033
weren't sure what those settings
 would do.  Our approach to this

02:21:54.701 --> 02:21:58.076
 research was iterative.  So we 
learned things in one study, 

02:21:58.077 --> 02:22:01.057
adjust the design and then 
retest the adjusted design in 

02:22:01.058 --> 02:22:07.297
the next study.  We wanted to 
hear from a wider, more diverse 

02:22:07.899 --> 02:22:10.439
audience.  We went to a 
conference.  In January we 

02:22:10.440 --> 02:22:13.068
attended the assistive 
technology industry association 

02:22:13.069 --> 02:22:17.490
conference in Orlando, Florida 
with just a clipboard, pen, 

02:22:17.491 --> 02:22:22.097
paper and phone, we approached 
conference attendees and asked 

02:22:22.098 --> 02:22:26.414
them for 10 minutes of feedback 
on the latest designs.  These 

02:22:26.415 --> 02:22:30.556
intercepts allowed us to gather 
a lot of feedback in a 

02:22:30.557 --> 02:22:33.850
relatively short time frame.  In
 two days we talked to 15 people

02:22:34.000 --> 02:22:36.943
 with visual, cognitive and 
motor impairments as well as AT 

02:22:36.944 --> 02:22:40.523
professionals and educators.  As
 a result of this research, we 

02:22:40.524 --> 02:22:45.675
verified a lot of our 
assumptions, and fine tuned our 

02:22:45.942 --> 02:22:50.050
designs.  And here's a sneak 
peek at the accessibility 

02:22:50.051 --> 02:22:54.164
settings page for Android O!.  
right you see that we're 

02:22:55.300 --> 02:22:57.158
introducing categorizations by 
utility.  Instead of categories 

02:22:57.159 --> 02:23:01.034
like services and system, you'll
 find categories like screen 

02:23:01.666 --> 02:23:05.707
readers and display.  Also, we 
added powerful icons to make 

02:23:05.708 --> 02:23:10.318
Android services pop.  Lastly, 
below each setting we included a

02:23:10.616 --> 02:23:13.413
 short description to explain 
what the setting does.  Now, 

02:23:13.414 --> 02:23:17.119
accessibility research helped 
guy this design approach and it 

02:23:17.120 --> 02:23:22.995
can help you, too.  So if you 
want to build products for the 

02:23:23.362 --> 02:23:26.694
widest possible audience and 
genuinely improve people's 

02:23:26.815 --> 02:23:29.892
lives, consider incorporating 
accessibility research into your

02:23:30.034 --> 02:23:33.053
 current process.  I promise you
 don't need fancy equipment or a

02:23:33.291 --> 02:23:38.616
 big budget to get started.   
about how you can talk to users 

02:23:38.617 --> 02:23:41.739
with accessibility needs.  Make 
you attend a conference like we 

02:23:42.099 --> 02:23:46.880
did. you reach out to a local 
organization or university.  you

02:23:46.881 --> 02:23:51.881
 have a friend with dyslexia or 
color blindness who would be 

02:23:51.882 --> 02:23:55.147
willing to try the app and give 
you 15 minutes of feedback.  Try

02:23:55.433 --> 02:23:58.117
 to include one person with 
accessibility needs in your next

02:23:58.918 --> 02:24:02.628
 research study and see what you
 learn.  The difference between 

02:24:02.629 --> 02:24:06.035
zero and a little data is 
astounding.  With that I hand it

02:24:06.249 --> 02:24:15.920
 back over to Astrid.  Thanks, 
Melissa.  Those of you works on

02:24:16.709 --> 02:24:19.438
 consumer-facing apps hopefully 
already mark your calendars now 

02:24:19.575 --> 02:24:24.145
to conduct some accessibility 
research as soon as we're back 

02:24:24.146 --> 02:24:29.408
in the office.  Those of you who
 work on developing facing 

02:24:29.409 --> 02:24:33.660
applications might wonder, what 
about my target group?  The good

02:24:34.277 --> 02:24:37.864
 news is they can also benefit 
from UX research, and we have an

02:24:38.614 --> 02:24:42.296
 example of our very own 
Accessibility Scanner app about 

02:24:42.297 --> 02:24:45.316
how the UX research really 
helped us to develop a better 

02:24:45.424 --> 02:24:49.214
application.  We tested abbing 
Accessibility Scanner with 

02:24:49.384 --> 02:24:53.545
designers, test engineers, 
developers, and product 

02:24:53.685 --> 02:24:57.937
managers.  We did the early 
stage prototypes with some paper

02:24:58.402 --> 02:25:01.386
 marks, and in addition to that,
 we also tested the name itself.

02:25:01.387 --> 02:25:07.657
  you heard correctly.  was not 
born with that name.  We had a 

02:25:07.658 --> 02:25:12.460
long list of options, but rather
 just following our own 

02:25:12.679 --> 02:25:16.327
preference, we asked our users 
in interviews because we wanted 

02:25:16.328 --> 02:25:19.615
to understand which name would 
be most memorable and what 

02:25:19.616 --> 02:25:21.637
people are associating with each
 of the options. 

02:25:24.861 --> 02:25:28.551
 Thanks to UX research we made 
visual and interaction design 

02:25:28.552 --> 02:25:33.181
changes to the application.  One
 of the visual design changes 

02:25:33.182 --> 02:25:36.092
entails that we do not use 
colors anymore to distinguish 

02:25:36.093 --> 02:25:42.532
the kind of issues being 
detected.  a diverse sample of 

02:25:42.533 --> 02:25:46.023
users helped us there, because 
the colorblind participants of 

02:25:46.024 --> 02:25:49.964
our study clearly signaled to us
 that they felt left out of the 

02:25:49.965 --> 02:25:53.701
experience if you use color 
because they could not 

02:25:53.854 --> 02:25:57.871
necessarily distinguish the 
elements based on that factor.  

02:25:58.568 --> 02:26:02.538
 improved the overall flow of 
the application by making it 

02:26:02.539 --> 02:26:06.258
easy to click on any element of 
detection and then get a short 

02:26:06.259 --> 02:26:10.716
description of the issue.  This 
way the application became 

02:26:10.717 --> 02:26:15.353
especially useful and useable to
 those new to accessibility 

02:26:15.495 --> 02:26:18.900
testing.  On that note, I will 
hand it back to Patrick with our

02:26:19.456 --> 02:26:21.456
 final thoughts and an outlook 
on

02:26:28.873 --> 02:26:35.432
 All right. you, Astrid.  So I 
hope everyone's inspired to go 

02:26:35.806 --> 02:26:39.774
home, no work, look at own 
products and apps and think 

02:26:39.775 --> 02:26:43.535
about the accessibility and the 
benefit it has on these users.  

02:26:43.536 --> 02:26:46.234
Along those lines,ive a few 
challenges to the developers in 

02:26:46.235 --> 02:26:49.960
the audience.  first one is 
familiarize yourself with 

02:26:49.961 --> 02:26:52.955
accessibility services and these
 APIs that were mentioned so 

02:26:52.956 --> 02:26:57.012
when you go home, turn on 
TalkBack, turn on Switch Access,

02:26:57.336 --> 02:27:01.178
 put yourself in the shoes of 
these users and run through your

02:27:01.471 --> 02:27:06.507
 apps to see what you uncover.  
The second is to download 

02:27:06.508 --> 02:27:09.543
Accessibility Scanner, right?  
Download it.  It's very easy.  

02:27:09.544 --> 02:27:12.862
You can get it and test your 
app.  Very easy to find 

02:27:13.449 --> 02:27:16.520
low-hanging fruit and quick and 
easy ways to improve the 

02:27:16.649 --> 02:27:19.941
accessibility of your app.   
think about performing user 

02:27:19.942 --> 02:27:23.244
research with users that have an
 accessibility need, so find a 

02:27:23.245 --> 02:27:27.388
family member, a friend, someone
 in your community, go to a 

02:27:27.389 --> 02:27:30.451
conference and sit with them as 
the user app, and I bet you'll 

02:27:30.452 --> 02:27:34.651
be surprised what things you 
learn.  We have a few other 

02:27:35.048 --> 02:27:39.410
really interesting things happen
 at Google I/O for 

02:27:39.690 --> 02:27:43.081
accessibility. we have a couple 
other sessions, designing for 

02:27:43.082 --> 02:27:48.184
the next billion yours and 
pragmatic accessibility.  We 

02:27:48.185 --> 02:27:52.501
have a sandbox back here.  This 
is your chance to learn more 

02:27:52.502 --> 02:27:55.659
about accessibility and see the 
demos and speak to a Google or 

02:27:55.660 --> 02:28:03.404
one on one and get more 
information.  also have the -- 

02:28:03.405 --> 02:28:08.891
on Thursday at 6:30 we have the 
Google Play awards and there's 

02:28:08.892 --> 02:28:11.961
an awesome award for the best 
accessibility experience.  I 

02:28:11.962 --> 02:28:15.491
recommend you check it out.  I'd
 like to thank you, and keep in 

02:28:16.025 --> 02:28:21.019
touch.  Use our Twitter handle 
@Google

02:48:08.448 --> 02:48:15.380
 Welcome everyone.  I'm Venkat 
Rapaka.   of the Android team, 

02:48:15.381 --> 02:48:19.467
this is one of my favorite times
 of year.  You get to come to 

02:48:19.468 --> 02:48:21.795
I/O and interact with the 
community and a number of our 

02:48:21.796 --> 02:48:25.558
partners attend so we meet all 
of them.  This year is exciting 

02:48:25.559 --> 02:48:31.486
for me because this is the first
 time we get to talk at I/O 

02:48:31.487 --> 02:48:35.276
about Android Things and how to 
bring it to more people.  You 

02:48:35.277 --> 02:48:40.782
probably heard earlier today at 
the keynote that kicked it off, 

02:48:40.783 --> 02:48:44.075
Android now has incredible 
momentum across a number of 

02:48:44.320 --> 02:48:47.953
verticals up here.  There are 2 
billion devices, 2 billion 

02:48:47.954 --> 02:48:52.530
monthly active devices that run 
Android across these four 

02:48:52.650 --> 02:48:55.292
factors.  Joining this family is
 now Android Things.  Android 

02:48:55.883 --> 02:49:00.128
Things is designed to extends 
Android beyond these four 

02:49:00.261 --> 02:49:03.346
vertical, mobile, wear, TV and 
auto to a lot more exciting new 

02:49:03.347 --> 02:49:08.215
product categories within the 
space of IoT.  At Google, it's a

02:49:08.503 --> 02:49:11.895
 very interesting area for us 
with all the innovation 

02:49:11.896 --> 02:49:15.689
happening now, and we also see 
that there's an opportunity and 

02:49:15.690 --> 02:49:22.565
a real need to enable us to 
build high quality devices 

02:49:22.566 --> 02:49:26.750
quickly and easily.  There's an 
opportunity to Democrat ties IoT

02:49:27.216 --> 02:49:30.945
 development and make it more 
accessible to peoples.  Android 

02:49:30.946 --> 02:49:35.301
Things was created last year as 
an acknowledgment of this 

02:49:35.302 --> 02:49:39.471
potential ahead of us.  Android 
Things was released in December 

02:49:39.472 --> 02:49:42.462
last year, and it's been great 
to see the excitement so far and

02:49:42.463 --> 02:49:46.392
 the momentum we've built up.  
In fact, in the keynote this 

02:49:46.393 --> 02:49:49.127
morning already in the five 
months up until now there are 

02:49:49.777 --> 02:49:52.715
thousands of developers in more 
than 60 countries who are 

02:49:52.716 --> 02:49:55.647
actively trying Android Things, 
so thank you very much for 

02:49:55.648 --> 02:50:00.519
investing your time and all the 
feedback you've given us.  So 

02:50:00.855 --> 02:50:04.485
IoT, of course, is very broad 
and diverse.  Within this large 

02:50:04.797 --> 02:50:07.893
space, Android Things is 
targeted one of the most 

02:50:07.894 --> 02:50:11.905
exciting things for us, one of 
the most exciting areas.  

02:50:11.906 --> 02:50:14.978
devices that sit at the edge and
 bring in device intelligence, 

02:50:14.979 --> 02:50:19.403
and these devices span many use 
cases old and new. see examples 

02:50:19.404 --> 02:50:24.594
on the screen.  The security 
systems, Reuters, they've been 

02:50:24.595 --> 02:50:29.091
around for as long as we 
remember.  There are new 

02:50:29.092 --> 02:50:33.296
interesting device types with 
cameras believe into them.  

02:50:33.297 --> 02:50:36.717
retail increasingly you see 
point of sale machines, vending 

02:50:36.718 --> 02:50:39.848
machine that have this place and
 can interact with the 

02:50:40.272 --> 02:50:43.240
customer's mobile device at the 
point of sale and do some very 

02:50:43.241 --> 02:50:47.253
interesting things.  When you 
think of smart buildings, which 

02:50:47.459 --> 02:50:51.800
we talk about a lot, you have 
cameras in there, and these 

02:50:51.801 --> 02:50:55.380
cameras cannot only detect 
occupancy but can be a headcount

02:50:55.553 --> 02:50:59.393
 and say how many people are in 
a given space at any point of 

02:50:59.394 --> 02:51:02.716
time and interact intelligently 
with other systems in the 

02:51:02.717 --> 02:51:06.308
building like the HVAC system 
and do something smart with the 

02:51:06.853 --> 02:51:10.091
knowledge.  Truly mobile IoT 
applications like asset 

02:51:10.492 --> 02:51:14.242
tracking, fleet management, this
 is becoming much better every 

02:51:14.509 --> 02:51:16.938
day with the ability to pull 
context from the cloud and do 

02:51:16.939 --> 02:51:21.609
something smart with it locally.
 you look at all of these 

02:51:21.849 --> 02:51:24.855
categories, you see very 
interesting, common things 

02:51:27.480 --> 02:51:29.787
emerge.  One is powerful devices
 that sit at the edge with 

02:51:29.788 --> 02:51:33.081
complex operations, image 
processing, audio processing and

02:51:33.215 --> 02:51:36.536
 they do it all locally.  
There's a lot of home device 

02:51:36.715 --> 02:51:39.040
intelligence, and this is for a 
number of different reasons or 

02:51:39.181 --> 02:51:44.912
combination of reasons.   the 
low latency that wants to react 

02:51:44.913 --> 02:51:49.393
quickly and other times it's the
 tolerance.  all have a need for

02:51:49.721 --> 02:51:53.987
 deep security.  Both at the 
device level, but also how they 

02:51:53.988 --> 02:51:56.933
interact with the cloud.   
today, I think to build a 

02:51:57.196 --> 02:52:00.614
device, any of these types of 
devices is not easy, so let's 

02:52:00.615 --> 02:52:08.502
talk about a few challenges that
 we see in this spacespace, the 

02:52:08.503 --> 02:52:12.183
I/O developer space.  talk about
 the software part of it.  If 

02:52:12.184 --> 02:52:19.133
you're a software developer, the
 complexity that confronts you 

02:52:19.134 --> 02:52:24.852
is massive.  The you IoT devices
 are built on Linux or Android, 

02:52:24.853 --> 02:52:29.212
so it's very difficult to get a 
consistent and reliable API that

02:52:29.506 --> 02:52:32.474
 you can depend on.  It's hard 
to find robust tools that you 

02:52:32.475 --> 02:52:36.392
can use, and it's also very hard
 to find a community of 

02:52:36.393 --> 02:52:40.022
developers that can reach out to
 when you run into trouble.  

02:52:40.023 --> 02:52:43.464
Think of all the basic building 
blocks when you build a product.

02:52:43.465 --> 02:52:46.546
  To build a product for a 
consumer application, even 

02:52:46.547 --> 02:52:49.899
something as simple as the 
reliable setup flow so that the 

02:52:49.900 --> 02:52:53.539
consumer can use the mobile 
device to set up the product 

02:52:53.540 --> 02:52:57.079
you're selling them as well as 
an app that you can use to build

02:52:57.080 --> 02:53:03.929
 your own app.  If you think of 
an enterprise use case, having 

02:53:03.930 --> 02:53:06.901
zero touch and having a fleet of
 devices that may not be coming 

02:53:06.902 --> 02:53:10.616
from you but a combination of 
devices from everybody.  In some

02:53:11.048 --> 02:53:15.389
 cases providing them APIs so 
they can integrate into the 

02:53:15.390 --> 02:53:19.421
console they use.  You have to 
build it from scratch to get 

02:53:19.505 --> 02:53:23.934
started.   it's really hard to 
get -- it's really hard to get 

02:53:23.935 --> 02:53:28.567
access to third-party -- I'm 
sorry.  I'm going too fast.  

02:53:28.568 --> 02:53:32.181
really hard to get access to 
third-party services like the 

02:53:32.182 --> 02:53:34.671
Google Assistant and getting 
them working out of the box, 

02:53:34.955 --> 02:53:37.088
especially if you build multiple
 products in the space.  That's 

02:53:37.089 --> 02:53:39.191
the software part of the 
problem.  When you get to 

02:53:39.192 --> 02:53:41.192
hardware SHS

02:53:43.190 --> 02:53:47.004
 things are more complicated, 
right?  You have to pick them to

02:53:47.222 --> 02:53:50.693
 build a cohesive system, get 
your code running on it.  You do

02:53:50.842 --> 02:53:54.406
 that to get to the prototype 
stage and do a PROF of concept. 

02:53:54.540 --> 02:53:58.637
 As you do this, you need to be 
careful to make sure you pick 

02:53:58.638 --> 02:54:02.446
components that can have high 
volumes when you hit high 

02:54:02.660 --> 02:54:04.854
production.  If you don't do 
that, you have a bunch of work 

02:54:04.855 --> 02:54:07.855
you did before to adapt in the 
new confidence you replaced them

02:54:08.111 --> 02:54:12.583
 with.  This is not a problem 
that's unique to small or medium

02:54:13.106 --> 02:54:16.375
 companies.  Some of our largest
 partners tell us how difficult 

02:54:16.376 --> 02:54:22.926
it is for them even if the scale
 they're at, especially the 

02:54:22.927 --> 02:54:25.569
space with diversity of product 
categories and portfolio, they 

02:54:25.570 --> 02:54:29.097
also started with this the same 
way that a small company would 

02:54:29.312 --> 02:54:37.050
struggle.   security.  I think 
given the amount of news --  

02:54:37.051 --> 02:54:40.243
news we see today, I don't need 
to belabor the point of how 

02:54:40.244 --> 02:54:43.185
important security is in this 
space, but I think especially in

02:54:43.186 --> 02:54:46.059
 the IoT scenario, it's harder 
to deliver that security because

02:54:46.568 --> 02:54:52.995
 of the scale and diversity of 
the types of devices.  To build 

02:54:52.996 --> 02:54:58.508
a really secure device or keep 
it secure is incredibly hard.  

02:54:58.509 --> 02:55:03.639
So with Android Things our goal 
is to try and SOFL solve all of 

02:55:03.640 --> 02:55:06.916
these problems for the 
developers.   by bringing the 

02:55:06.917 --> 02:55:09.653
power of Android to help with 
software development.  The 

02:55:09.654 --> 02:55:13.985
second one is is to provide a 
choice of hardware solutions 

02:55:13.986 --> 02:55:16.011
that let you scale from 
prototype to production with the

02:55:16.136 --> 02:55:20.231
 confidence you can do that in a
 quick and easy way.  Finally, 

02:55:20.232 --> 02:55:24.380
you want to help keep your 
devices secure.   talk a little 

02:55:24.381 --> 02:55:28.893
bit about what I mean by the 
power of Android.  It cuts 

02:55:28.894 --> 02:55:33.016
across all three themes.  I 
mentioned the 2 billion monthly 

02:55:33.017 --> 02:55:37.433
active users that Dave mentioned
 today.  What makes that 

02:55:37.434 --> 02:55:40.287
possible is a number of things. 
 The most important of those is 

02:55:40.288 --> 02:55:43.584
the people that are in this 
room, the developer community.  

02:55:43.585 --> 02:55:46.499
The rich community that we have 
of Android app developers that 

02:55:46.500 --> 02:55:50.105
make a lot of this possible.  
Also, we have a number of 

02:55:50.106 --> 02:55:55.406
commercial entities and a supply
 chain composed of silicone 

02:55:56.185 --> 02:55:59.360
providers, people that make 
components, device 

02:55:59.554 --> 02:56:03.656
manufacturers, retailers, and 
cellular operators, and it's a 

02:56:03.657 --> 02:56:07.419
collection of all of these, all 
of you that makes Android what 

02:56:07.420 --> 02:56:11.898
it is.  It's a very, rich, 
diverse, vibrant eco-system, and

02:56:12.166 --> 02:56:18.107
 that's what we want to bring to
 the world of IoT.  Let's talk 

02:56:18.108 --> 02:56:20.632
first about the developer 
experience and discuss how 

02:56:20.633 --> 02:56:22.595
Android Things can make this 
very consistent and familiar to 

02:56:22.596 --> 02:56:30.053
a lot more people.  What you see
 here is the typical Android 

02:56:30.054 --> 02:56:36.019
mobile device, the form.  Going 
from bottom to top, the kernel 

02:56:36.020 --> 02:56:39.541
in the libraries focus on 
hardware driver support.  The 

02:56:39.542 --> 02:56:46.032
middle stack, the application 
framework provides the apps with

02:56:46.159 --> 02:56:51.391
 a number of partners and Google
 builds to deliver a variety of 

02:56:51.392 --> 02:56:57.413
services and use cases.  This is
 designed for devices of a 

02:56:57.414 --> 02:57:01.929
specific kind.  All of them have
 a display.  They all expect 

02:57:01.930 --> 02:57:05.369
users to install apps, so 
there's a very specific notion 

02:57:05.613 --> 02:57:10.280
that's built into these.  We 
know that IoT devices don't 

02:57:10.281 --> 02:57:15.582
exactly fit this mold.  So we 
set out to create a variant of 

02:57:15.825 --> 02:57:18.535
Android that's designed for IoT,
 which is what Android Things 

02:57:18.695 --> 02:57:22.741
is. first things they do is they
 used most of the user-facing 

02:57:22.742 --> 02:57:26.142
applications and a lot of visual
 framework components.  Just as 

02:57:26.143 --> 02:57:31.496
an example, you don't need a 
text messages app on most IoT 

02:57:31.497 --> 02:57:36.676
devices or on any of them.  
While we did this to remove 

02:57:36.926 --> 02:57:41.571
unnecessary complexity that 
developers face, one of the 

02:57:41.572 --> 02:57:47.357
happy side effects is we reduced
 the footprint which makes it 

02:57:47.708 --> 02:57:52.008
scalable downward with IoT 
devices.  Then we added a number

02:57:52.145 --> 02:58:00.959
 of new capabilities for IoT 
devices.  Let me start with the 

02:58:01.165 --> 02:58:04.134
I/O.  It's part of the Android 
Things library, and it provides 

02:58:04.135 --> 02:58:09.920
new APIs that allow applications
 you would build that interface 

02:58:09.921 --> 02:58:16.141
using industrial standard 
protocols like GPOI and IPS and 

02:58:16.142 --> 02:58:20.923
so on on the screen.  What this 
enables is the APIs, your 

02:58:20.924 --> 02:58:24.481
application and code can 
interpret with simple things 

02:58:24.482 --> 02:58:30.873
like buttons, relays, proximity 
sensors and displays and 

02:58:30.874 --> 02:58:33.898
speakers and high-speed.  Over 
time we have things like bar 

02:58:33.899 --> 02:58:40.336
code scanners, modified readers 
and so on.  The second thing is 

02:58:40.337 --> 02:58:44.300
something -- the second thing is
 user drivers, which enables an 

02:58:44.454 --> 02:58:47.656
interesting use case for us.  In
 a lot of cases, your 

02:58:48.500 --> 02:58:51.923
applications can just use the 
I/O, but in some cases you might

02:58:52.099 --> 02:58:58.151
 want to integrate your hardware
 with the framework so you can 

02:58:58.152 --> 02:59:03.017
manage the call-backs and expose
 the components thereof to other

02:59:03.018 --> 02:59:06.579
 applications that sit on your 
product from a third-party, for 

02:59:07.050 --> 02:59:10.465
example.  Again, there's a few 
quick examples.  Input devices 

02:59:10.466 --> 02:59:14.308
that generate key events or 
motion events inject them into 

02:59:14.309 --> 02:59:18.413
the framework.  Think of the GPS
 or other location sources that 

02:59:18.414 --> 02:59:22.314
are attacked to your product, 
and this can be integrated with 

02:59:22.315 --> 02:59:25.729
the location framework.  Once 
you do that, location updates 

02:59:25.730 --> 02:59:29.964
from these sources will then be 
delivered through the location 

02:59:29.965 --> 02:59:35.082
manager and the providers.  So 
over the last five months at 

02:59:35.083 --> 02:59:40.548
Google we added drivers on the 
OpenSource community get hub 

02:59:40.806 --> 02:59:44.591
page, and we have noticed that a
 lot of our developing partners 

02:59:44.592 --> 02:59:48.194
are contributing as well, which 
is really awesome to see.  some 

02:59:48.195 --> 02:59:52.202
of our partners are also getting
 into the act now just as an 

02:59:52.203 --> 02:59:54.845
example until recently added 
support for Android Things with 

02:59:54.846 --> 02:59:58.486
their use of packages and 
modules and MRA, which brings 

02:59:58.487 --> 03:00:01.681
with it about 200 very 
interesting components and 

03:00:01.682 --> 03:00:05.471
profiles that now work on (?) 
you use Android Things. 

03:00:09.169 --> 03:00:14.163
 I mentioned we moved a lot of 
visual framework components, and

03:00:14.469 --> 03:00:20.319
 we did it because a lot of IoT 
devices don't have displays, but

03:00:20.440 --> 03:00:23.317
 quite a few have displays, 
sometimes more than one.  This 

03:00:23.489 --> 03:00:25.489
display support is 

03:00:26.848 --> 03:00:30.441
optional, right?  It's the same 
UI tool kit in all other Android

03:00:31.003 --> 03:00:34.726
 factors, so it relies on the 
same framework.  If you build a 

03:00:34.963 --> 03:00:37.569
device with a display, the 
entire display, the control for 

03:00:37.570 --> 03:00:40.374
the entire display is handed to 
your application that you build.

03:00:41.272 --> 03:00:45.748
 we did is we got the system out
 of the way.  So no more systems

03:00:46.177 --> 03:00:52.460
 status bar, navigation buttons,
 we eliminated a lot of APIs 

03:00:52.461 --> 03:00:58.874
that don't make sense.  system 
notifications and we removed all

03:00:59.022 --> 03:01:04.517
 of this, and we believe this 
more closely mimicking the types

03:01:04.645 --> 03:01:09.784
 of devices in the IoT space.  
They're fixed purpose and the 

03:01:09.785 --> 03:01:15.123
users interacting with the 
Internet purpose as eposed to 

03:01:15.124 --> 03:01:18.672
adding new functionality on the 
device.   connecting with it a 

03:01:18.673 --> 03:01:21.410
little bit.  Today in the 
developer previews that we see 

03:01:21.411 --> 03:01:26.240
so far, we support WiFi and 
Bluetooth.  We'll bring in NFC 

03:01:26.241 --> 03:01:31.185
later this year, but the one I'm
 excited about is cellular.  

03:01:31.186 --> 03:01:34.297
cellular capabilities unlocks a 
variety of very exciting new use

03:01:34.815 --> 03:01:38.481
 cases, but adding cellular 
support is nontrivial, as anyone

03:01:38.649 --> 03:01:43.141
 has tried to connect us to.  
What you find is that half the 

03:01:43.142 --> 03:01:46.584
challenge is actually enabling 
the functionality and makes sure

03:01:46.836 --> 03:01:50.459
 it works.  You have to make 
sure it works on carrier 

03:01:50.632 --> 03:01:55.542
networks, especially with a 
geographic footprint in one 

03:01:55.738 --> 03:02:01.320
country.  The challenge goes up 
dramatically.  core Android 

03:02:01.321 --> 03:02:04.433
teamworks with a number of 
silicon partners in the context 

03:02:04.434 --> 03:02:07.756
of mobile phones to deliver the 
capability.  As it turns out 

03:02:07.757 --> 03:02:10.412
WEESHGS working with some of the
 same partners very closely as 

03:02:10.531 --> 03:02:19.961
well.  So we're going to LEFRM a
  leverage a lot of work on 

03:02:19.962 --> 03:02:24.688
Android Things over the course 
of the this DWREER.  support 

03:02:24.689 --> 03:02:27.302
Android Things on the processor 
that has

03:02:30.561 --> 03:02:33.828
 modem capability.  I talked 
about the changes we made and 

03:02:33.829 --> 03:02:37.607
what we added.  Let's talk about
 what we did not change, which 

03:02:37.608 --> 03:02:41.932
is the core eco-system that 
Android brings with it.  You can

03:02:42.352 --> 03:02:47.219
 continue to leverage the 
Android SDK to develop your use 

03:02:47.220 --> 03:02:50.402
cases and AP case on top and all
 the development tools that they

03:02:50.625 --> 03:02:54.947
 provide you.  You can continue 
to use the existing third-party 

03:02:54.948 --> 03:02:58.822
Android libraries, and you can 
continue to tap into the rich 

03:02:58.823 --> 03:03:03.152
community of Android app 
developers for support and also 

03:03:03.153 --> 03:03:05.823
re-use things other built, 
right?  That's one of the excite

03:03:06.933 --> 03:03:10.972
 things that Android can bring 
to Android Things.  Play 

03:03:11.119 --> 03:03:14.725
services.  Google Play services 
has a number of very interesting

03:03:15.458 --> 03:03:21.098
 APIs people rely on.  This is 
currently only available in 

03:03:21.099 --> 03:03:21.937
Android Things and developer 
preview.  What we're working on 

03:03:21.938 --> 03:03:30.115
is an optimized, much lighter 
weight version of services at 

03:03:30.116 --> 03:03:33.668
IoT devices later this year.  We
 didn't move a number of APIs we

03:03:34.008 --> 03:03:38.060
 didn't think were useful in 
this case.  Things that enabled 

03:03:38.061 --> 03:03:41.274
user input or account 
management, which don't make 

03:03:41.275 --> 03:03:46.938
sense in IoT.   the footprint by
 a Lowell.  We used APIs like 

03:03:46.939 --> 03:03:48.939
five base, and we

03:03:52.149 --> 03:03:55.243
 add enhanced APIs that support 
development on the device.  I 

03:03:55.244 --> 03:04:02.529
mentioned Firebase.  valuable 
tool in this case.  The ability 

03:04:02.530 --> 03:04:04.530
to access

03:04:06.796 --> 03:04:13.375
 goingplot farm and we make it 
seamless as well, that gee  

03:04:13.647 --> 03:04:16.529
integration.  The system would 
be launched in a sample 

03:04:16.530 --> 03:04:21.562
yesterday that lets you build a 
Google Assistant prototype 

03:04:21.563 --> 03:04:24.900
usings Android Things.  You'll 
see more Google services and 

03:04:24.901 --> 03:04:28.303
apps that we will bring in 
Android Things in a modular way 

03:04:28.304 --> 03:04:32.847
to pick the ones you want.  So 
when we put all of this together

03:04:33.071 --> 03:04:36.512
 what you get is if you're an 
Android app developer, this 

03:04:36.766 --> 03:04:40.203
opens up the world of IoT 
devices to you and you can set 

03:04:40.409 --> 03:04:44.663
out on a path to be an IoT 
developer yourself.  If someone 

03:04:44.664 --> 03:04:47.741
has an idea and you want to 
build a device, you can tap into

03:04:48.007 --> 03:04:51.327
 this community of app 
developers and you don't have to

03:04:51.328 --> 03:04:55.438
 build a full team any longer to
 get started.  You can pick some

03:04:56.376 --> 03:05:00.056
 things you build and tap into 
the large community and get 

03:05:00.510 --> 03:05:04.663
going.  Finally, we did talk 
about devices getting 

03:05:04.664 --> 03:05:06.783
increasingly smaller.  We'll 
talk about how we make it 

03:05:07.118 --> 03:05:11.697
happen.  So on device 
intelligence is going to be 

03:05:11.698 --> 03:05:14.250
critically important in IoT over
 time, and this is for a number 

03:05:14.251 --> 03:05:18.804
of reasons.  One is latency.  
might want a quick response 

03:05:19.126 --> 03:05:22.100
time.  You might have bandwidth 
constraints.  It's expensive 

03:05:22.362 --> 03:05:26.502
times.  The connectivity might 
be unreliable and so on, right? 

03:05:27.011 --> 03:05:29.011
 Android, the core Android 
platform itself

03:05:32.235 --> 03:05:34.085
 and with Android Things, we're 
making as a collective deep 

03:05:34.086 --> 03:05:37.591
investments to bring device 
capabilities in a deeply 

03:05:37.592 --> 03:05:41.077
integrated fashion into the 
distributions we're going to 

03:05:41.078 --> 03:05:46.402
provide you.  We added support 
for Tensor Flow on Android 

03:05:46.549 --> 03:05:49.452
Things.  It's awesome to see the
 creative things our community 

03:05:49.453 --> 03:05:54.344
is building so far.  The most 
space you can see Tensor Flow in

03:05:54.570 --> 03:05:57.659
 action, is one that our team 
built and another one someone in

03:05:57.660 --> 03:06:01.313
 the community built using the 
companies that delivered 

03:06:01.676 --> 03:06:04.638
already.  There's also a core 
Tensor Flow that you can get 

03:06:04.639 --> 03:06:09.712
your hands on it.  So I'm going 
to switch gears a bit now and 

03:06:09.713 --> 03:06:16.210
move from so the  -- software to
 hardware and how Android Things

03:06:17.171 --> 03:06:21.134
 will simplify the prototyping 
process as well.  If you're 

03:06:21.670 --> 03:06:26.051
getting started on a new device,
 you need to assemble the right 

03:06:26.052 --> 03:06:28.815
components and make sure they 
work together and the proof of 

03:06:28.816 --> 03:06:34.239
concept works and it's at scale 
at a price you're able to pay.  

03:06:34.240 --> 03:06:38.257
when you get to mass production,
 and there's a lot of complexity

03:06:38.410 --> 03:06:42.766
 involved in this and time as 
well.  To help with this, it 

03:06:42.767 --> 03:06:47.360
uses the sum architecture.  I 
think a lot of here in the 

03:06:47.361 --> 03:06:53.089
audience are familiar with this 
concept.  A SoM basically has a 

03:06:53.090 --> 03:06:55.691
core computing model.  It 
computes connectivities, storage

03:06:56.127 --> 03:07:00.506
 and many other core competence 
in a small package.  When you 

03:07:00.507 --> 03:07:05.112
build an IoT device, some of the
 most complex device is 

03:07:05.113 --> 03:07:09.115
encapsulated in the SoM itself. 
 What you see here on the left 

03:07:09.337 --> 03:07:15.447
side, my left, are two modules, 
one from Intel and one from 

03:07:15.448 --> 03:07:18.488
Expedia we already launched.  In
 close collaboration with our 

03:07:18.489 --> 03:07:25.627
silicon partners, we will 
provide a BSP, a Board Support 

03:07:25.628 --> 03:07:31.109
Package for your code to reside 
on top of it.  portable to other

03:07:31.787 --> 03:07:34.993
 platforms as you build out a 
portfolio of lower capable 

03:07:34.994 --> 03:07:39.222
devices in the same category or 
you switch to a new category and

03:07:39.636 --> 03:07:43.323
 want something quite different.
  Let's see how a SoM is in 

03:07:43.324 --> 03:07:47.431
action.  It's pretty hard to see
 on the slide how big these SoMs

03:07:47.801 --> 03:07:51.083
 are.  The small image up there 
is this.  This is what a SoM 

03:07:51.084 --> 03:07:57.047
looks like.  It's about an inch 
and a half on the side, roughly 

03:07:57.048 --> 03:08:03.725
a square.  The larger image 
there is the baseboard that we 

03:08:03.726 --> 03:08:10.056
use internally.  It's a (?) That
 we use internally.  It has the 

03:08:10.057 --> 03:08:13.084
kitchen sink of all the 
connections we need our internal

03:08:14.598 --> 03:08:19.342
 prototyping and development and
 testing.  Of course, the 

03:08:19.343 --> 03:08:25.425
product you build won't require 
all of these XEN components so 

03:08:25.426 --> 03:08:29.256
you would have a baseboard 
simpler and what you need for 

03:08:29.257 --> 03:08:32.939
your product.  This tends to be 
a lot less expensive to produce 

03:08:32.940 --> 03:08:36.743
at lower volumes, so the 
prototyping is easier once you 

03:08:36.744 --> 03:08:40.908
use a SoM.  The SoM model, we 
believe, offers key advantages. 

03:08:42.000 --> 03:08:46.574
 is to get to the prototype 
stage much faster taking off the

03:08:46.749 --> 03:08:51.087
 shelf components.  The 
precertified hardware takes 

03:08:51.088 --> 03:08:54.068
development costs and taking 
technology risk inHARNTS as you 

03:08:54.069 --> 03:08:59.079
build the prototypes.  Of 
course, as you scale to larger 

03:08:59.933 --> 03:09:02.316
commercial volumes, you can be 
confident you can procure this 

03:09:02.317 --> 03:09:07.599
in high volume.  If you hit high
 volumes, you can collapse the 

03:09:07.600 --> 03:09:11.109
baseboard and a SoM into one 
board.  You can get a custom 

03:09:11.110 --> 03:09:13.800
board built for you.  It has a 
couple of advantages.  One is it

03:09:14.018 --> 03:09:16.221
 can reduce your cost, and 
another thing you can then lay 

03:09:16.386 --> 03:09:20.812
it out in a way that matches the
 XY dimensions of your product, 

03:09:21.128 --> 03:09:24.869
right?  So you can optimize it 
to fit exactly clearly into the 

03:09:25.238 --> 03:09:29.561
product I.D. you want to build. 
 you use the same BSP, you don't

03:09:29.891 --> 03:09:33.499
 have to rewrite any code you 
already built.  If you want to 

03:09:33.500 --> 03:09:37.629
learn more about SoMs and how to
 build custom space for your 

03:09:37.630 --> 03:09:41.059
custom boards, I think there's 
more detailed talk at 9:30 a.m. 

03:09:44.691 --> 03:09:48.027
 So, of course, you need SoMs 
that match the price and power 

03:09:48.028 --> 03:09:51.588
and performance and connectivity
 needs that your product has.  

03:09:51.589 --> 03:09:53.556
So to do this, we're working 
with a number of industry 

03:09:53.557 --> 03:09:59.009
leaders to make sure you have 
plenty of hardware choices.  

03:09:59.010 --> 03:10:05.931
Today we support Intel and 
RaspberryPi and Qualcomm and 

03:10:05.932 --> 03:10:12.821
we're working on the snapdragon 
210 line and working with media 

03:10:12.822 --> 03:10:17.925
tech with Android Things 
supports on it.  Finally, I'll 

03:10:17.926 --> 03:10:21.569
talk about security.  Thankfully
 there is now an increasing 

03:10:21.570 --> 03:10:28.012
focus on security in IoT.  In 
IoT space, the challenge is 

03:10:28.013 --> 03:10:31.192
dramatically higher for a number
 of reasons.  One is just the 

03:10:31.313 --> 03:10:33.494
diversity of the device types, 
the diversity of the operating 

03:10:33.495 --> 03:10:37.711
systems and the had wear that's 
underneath in the use cases.   

03:10:37.712 --> 03:10:40.861
how the devices are used today, 
right?  A lot of them operate 

03:10:40.862 --> 03:10:44.484
with no user intervention or 
interaction.   display where you

03:10:44.485 --> 03:10:47.272
 can say something to the user, 
and a lot of them are out of 

03:10:47.273 --> 03:10:50.028
sight out of mind.  I can't 
remember the last time I looked 

03:10:51.375 --> 03:10:58.725
at my WiFi router sitting in a 
closet in my stairs.  It's also 

03:10:58.726 --> 03:11:02.814
hard to keep the device secure 
over a period of time.  Android 

03:11:03.303 --> 03:11:06.514
Things has been designed for 
security from the ground up.   

03:11:06.515 --> 03:11:12.576
see here is two separate parts 
of the code.  One is the OS 

03:11:12.577 --> 03:11:17.765
that's provided by Google in 
close collaboration with our 

03:11:17.766 --> 03:11:20.969
Silicon partners.  This is 
created by the app developers.  

03:11:20.970 --> 03:11:26.855
This is your apps and your user 
drivers and so on. two is a very

03:11:26.976 --> 03:11:33.254
 clean Android API layer.  We 
can update either two partitions

03:11:33.721 --> 03:11:37.777
 independent of the other 
without compromising the 

03:11:37.778 --> 03:11:42.252
functionality of the product.  
It allows us to push that up.  

03:11:42.253 --> 03:11:47.120
So I talked about security 
updates just now.  So the 

03:11:47.121 --> 03:11:51.551
Android is a part of investing a
 lot of energy into delivering 

03:11:51.552 --> 03:11:55.440
monthly security updates, which 
we bring to the IoT space to 

03:11:55.441 --> 03:12:00.248
Android Things.  partitions are 
signed by a trusted source for 

03:12:00.833 --> 03:12:05.461
security.  suspects verified 
good so your devices are 

03:12:05.462 --> 03:12:07.529
protected against things you 
download and it will block your 

03:12:07.530 --> 03:12:11.840
device from booting into an 
unknown state with an image or 

03:12:11.841 --> 03:12:15.376
signal you don't trust or the 
contents you cannot verify.  

03:12:15.377 --> 03:12:19.527
also updates.  You roll back, so
 if you push something out by 

03:12:20.168 --> 03:12:24.085
accident, that compromises the 
functionality.  always a good 

03:12:24.086 --> 03:12:27.257
image on the devices so without 
having to do something in the 

03:12:27.563 --> 03:12:31.836
field, they went back to that 
and put the device back up and 

03:12:31.837 --> 03:12:35.291
recover from there.  To push all
 of these updates and to give 

03:12:35.292 --> 03:12:39.541
you the control on rollbacks and
 also monitor your devices, 

03:12:39.542 --> 03:12:43.880
we're building currently a 
developer console we give you 

03:12:43.881 --> 03:12:48.201
access to soon.  This same 
console built on Google 

03:12:48.484 --> 03:12:52.069
infrastructure, you can use that
 to push updates as well.  As 

03:12:52.070 --> 03:12:55.161
you come up with security 
patches and extend the features 

03:12:55.162 --> 03:12:57.832
and functionality of your 
partition, you can use them to 

03:12:57.833 --> 03:13:03.162
push updates.  It gives you the 
ability to make your devices 

03:13:03.163 --> 03:13:07.466
better using the Google back 
end.  To quickly summarize, with

03:13:07.614 --> 03:13:10.666
 Android Things we're going to 
bring the power of Android to 

03:13:10.667 --> 03:13:13.329
simplify software development.  
 to provide you a choice of 

03:13:13.330 --> 03:13:18.243
hardware solutions that allow 
you to scale from prototype to 

03:13:18.244 --> 03:13:23.788
production easily and quickly.  
We EP had  -- we will help you 

03:13:23.789 --> 03:13:26.361
keep your devices safe and 
secure.  Let me talk a bit about

03:13:26.655 --> 03:13:33.973
 where we are.  preview (?) 
Yesterday. added I2S support 

03:13:33.974 --> 03:13:38.304
that lets you connect up audio 
external devices like speakers, 

03:13:38.305 --> 03:13:42.787
for example.  We added a new 
SoM, dynamic 7D that delivers 

03:13:42.788 --> 03:13:47.925
higher performance than the 6UL 
we have support for.  I 

03:13:47.926 --> 03:13:50.950
mentioned that sample that we 
delivered so you can prototype a

03:13:52.047 --> 03:13:55.695
 Google Assistant, a Google 
Home-like product for yourself 

03:13:55.696 --> 03:13:59.929
using one of the SoM Z in our 
Android Things.  In July we hit 

03:13:59.930 --> 03:14:05.354
developer preview 5, and rebase 
2.0 at this time.  We have a 

03:14:05.355 --> 03:14:08.209
number of new features and we 
will launch the developer 

03:14:08.210 --> 03:14:12.132
console into preview mode at 
that time.  And later this year 

03:14:12.566 --> 03:14:15.739
we're going to have a number of 
new features coming.  We'll have

03:14:17.119 --> 03:14:20.008
 updates, developer updates 
every six to eight weeks.  We'll

03:14:20.208 --> 03:14:25.578
 have the GMS code for IoT.  
We're going to have new features

03:14:25.733 --> 03:14:30.170
 like support and smart setup 
with matching apps.  We have a 

03:14:30.171 --> 03:14:35.347
lot more SoMs coming from other 
partners you saw just now.   

03:14:35.348 --> 03:14:38.009
towards the very end of the 
year, we're going to release 

03:14:38.010 --> 03:14:41.089
Android Things to long-term 
support, and it's going to be 

03:14:41.090 --> 03:14:46.327
based on O at the time, so you 
have (?)

03:14:52.535 --> 03:14:55.409
.  We'll use them as well.  
Tomorrow we have a number of 

03:14:55.410 --> 03:14:58.850
interesting sessions coming up 
that go a lot more into depth on

03:14:59.027 --> 03:15:01.786
 some of the topics I briefly 
touched upon.  These are all the

03:15:02.076 --> 03:15:04.606
 sessions coming up.  If you 
want to learn more, please go 

03:15:04.607 --> 03:15:11.231
attend them.  We also have a 
demo area in the IoT sandbox 

03:15:11.232 --> 03:15:13.942
dome where you can Tensor Flow 
in action and we have several 

03:15:13.943 --> 03:15:19.567
labs where you can get your 
hands dirty and how it works 

03:15:19.568 --> 03:15:22.138
well with the Google Cloud.  You
 can see what they're up to and 

03:15:22.139 --> 03:15:27.485
where we're going.  The 
additional resources beyond I/O,

03:15:27.672 --> 03:15:33.648
 I'll go in order.  top link is 
a link to our Google+ community 

03:15:33.649 --> 03:15:36.655
of developers where our 
community can come to us to get 

03:15:36.971 --> 03:15:40.970
updates from us, to get support 
from each other as well as our 

03:15:41.302 --> 03:15:45.464
team.  We're pretty active in 
the community now and answer 

03:15:45.465 --> 03:15:52.041
questions when needed.   link is
 a Ling to Google broader IoT 

03:15:52.179 --> 03:15:54.961
page.  The last one is our 
developer documentation page, 

03:15:54.962 --> 03:15:57.943
and it has a number of resources
 including core samples that you

03:15:57.944 --> 03:16:02.554
 can try out.  So this concludes
 our talk.  Thank you, everyone,

03:16:02.824 --> 03:16:05.865
 for coming.Applause )

03:16:20.820 --> 03:16:24.968
    VENKAT RAPAKA:  Do we have 
any Q &amp; A? 

03:16:28.388 --> 03:16:33.622
 We can do Q &amp; A if anyone has 
questions. 

03:16:36.753 --> 03:16:41.420
 Let me introduce the folks on 
the team. Wayne and this is SAM,

03:16:42.119 --> 03:16:47.763
 Lee Campbell, who was one of 
the core TLs on the team and (?)

03:16:48.391 --> 03:16:51.266
 of the developer relations 
team.  These four gentlemen have

03:16:51.267 --> 03:16:54.411
 been part of the team well 
before I joined from the early 

03:16:54.412 --> 03:16:58.321
part of Android Things.  They're
 giving me time to answer 

03:16:58.322 --> 03:17:02.716
questions now.  If anyone has a 
question, come up to the 

03:17:02.717 --> 03:17:06.705
microphone here.  I have a 
question, please.  What to do 

03:17:06.706 --> 03:17:11.047
with existing devices?  There 
are like a billion devices in 

03:17:11.314 --> 03:17:15.005
the Internet of Things around 
the world that are secured and 

03:17:16.715 --> 03:17:22.160
unsecured and compatible and 
uncompatible.  What do you do 

03:17:22.161 --> 03:17:26.666
with them?  I think at this 
stage, Android Things is more 

03:17:27.753 --> 03:17:33.519
forward-looking.  To the extent 
the SoMs are compatible, you can

03:17:33.520 --> 03:17:36.841
 look at them.  Look at 
OpenSource to also deliver more 

03:17:36.842 --> 03:17:41.333
security to the devices that 
already shipped out there.   

03:17:41.334 --> 03:17:45.538
Android Things itself, the way 
we deliver this as a binary, 

03:17:45.539 --> 03:17:50.857
it's more designed for the SoMs 
and very forward-looking.  Okay.

03:17:50.858 --> 03:17:59.588
 you.  Sure.  Will things be 
OpenSource fully or kind of 

03:17:59.850 --> 03:18:03.793
OpenSource?   OpenSource for 
OSP, so it's part of that by the

03:18:03.893 --> 03:18:11.177
 end of the year when we're 
ready.  Cool. you.  All right. 

03:18:11.178 --> 03:18:16.134
any suggested strategies on 
creating actual production 

03:18:16.322 --> 03:18:21.207
hardware?  Obviously, you can't 
have an SD card that can be 

03:18:21.308 --> 03:18:27.407
removed.  So yeah.  I'm not sure
 I quite got it.  You're asking 

03:18:27.544 --> 03:18:30.361
about production hardware?  The 
thing with the SoMs is the SoM 

03:18:30.362 --> 03:18:35.058
itself is something you buy.  
board that it plugs into you 

03:18:35.059 --> 03:18:38.012
custom-build yourself.  You 
don't have to build an SD card 

03:18:38.342 --> 03:18:42.573
into it.  You think about the 
RaspberryPi that includes one.  

03:18:42.574 --> 03:18:48.526
other boards don't include them.
  The storage is in the SoM 

03:18:48.527 --> 03:18:51.310
itself.  You can customize that 
board with whatever you want, 

03:18:52.064 --> 03:18:57.300
and there doesn't have to be an 
SD card unless you put one on.  

03:18:57.301 --> 03:19:01.911
Do you suggest using the SoMs in
 like a developer setting, or 

03:19:01.912 --> 03:19:07.842
will you guys provide support 
for creating integrated 

03:19:07.843 --> 03:19:13.498
components that hobbyists and 
small companies can use?  We do 

03:19:13.799 --> 03:19:17.529
already.  provide a developer 
board in the co-lab area.  

03:19:17.530 --> 03:19:20.511
There's a SoM and a board 
everything plugs into.  So there

03:19:20.512 --> 03:19:24.143
 are developer kits you can 
experiment with a board and 

03:19:24.144 --> 03:19:28.234
things like that.  You can try 
RaspberryPi as well.  what works

03:19:28.397 --> 03:19:31.693
 for you.  The SoM-based 
developers have a developer kit 

03:19:31.694 --> 03:19:35.661
as well.  I'll add, I think as 
we go to the more interesting 

03:19:36.104 --> 03:19:39.750
categories, you will see us do a
 lot more to provide nor turn 

03:19:39.751 --> 03:19:43.755
key solutions for that category 
with the competence we can 

03:19:43.955 --> 03:19:47.976
support.   do you see Android 
Things fitting into use cases 

03:19:47.977 --> 03:19:53.619
where you might otherwise use 
the realtime SO that's time 

03:19:53.771 --> 03:19:59.939
critical?  Lee, do you want to 
take that?  At the moment 

03:19:59.940 --> 03:20:05.132
Android or any Linux system 
isn't ideal for realtime 

03:20:05.133 --> 03:20:10.414
operations.  Normally people do 
a realtime coprocessor.  You see

03:20:10.636 --> 03:20:14.797
 people doing it and putting a U
 in between them.  We're looking

03:20:15.016 --> 03:20:18.787
 into how we can provide an 
obstruction for that so we can 

03:20:19.272 --> 03:20:24.916
provide realtime code inside an 
APK on chip or off chip.  So 

03:20:26.102 --> 03:20:30.588
watch the space.  Thank you. You
 menninged about Bluetooth and 

03:20:30.726 --> 03:20:36.982
cellular, and is there any plan 
to add zigby support?  Not at 

03:20:36.983 --> 03:20:40.749
this stage.  We're looking at 
it.  No plan on the roadmap yet.

03:20:40.750 --> 03:20:46.914
  The focus is on controllers.  
Is there any plan for a (?) 

03:20:46.915 --> 03:20:52.638
Lightweight one with sensors 
themselves?  No, Android Things 

03:20:52.639 --> 03:20:59.358
is designed for something more 
capable.  A lot of those Edge 

03:20:59.359 --> 03:21:02.194
devices require our solutions, 
so we're looking at it.  No 

03:21:02.195 --> 03:21:08.828
plans as of now.  You can find 
controllers on the breakout 

03:21:09.269 --> 03:21:13.758
boards.  So you can essentially 
communicate because ZB uses one 

03:21:14.225 --> 03:21:20.565
of the articles that we support.
 Thank you. They mentioned over 

03:21:20.566 --> 03:21:24.388
there the hardware.  What other 
boards will be coming in?  Is it

03:21:24.646 --> 03:21:28.632
 possible to use our own 
hardware that we built and use 

03:21:28.633 --> 03:21:33.444
the SDK with Android Things?  
Assuming that we build our own 

03:21:33.817 --> 03:21:36.832
boards, so is it possible to use
 that customized

03:21:40.834 --> 03:21:45.403
 hardware?  If you build your 
own board, it won't work.  You 

03:21:45.797 --> 03:21:49.666
need to pick a supported one 
precertified by us.  That's 

03:21:50.169 --> 03:21:54.172
good.  Thank you.  Hello.  
curious whether there's a time 

03:21:54.173 --> 03:21:58.070
line for using Android Things 
for live video trans coding and 

03:21:58.071 --> 03:22:02.615
video processing.  like the 
media coded API with the surface

03:22:02.965 --> 03:22:06.627
 based encoder and whether 
there's a time line for that 

03:22:06.628 --> 03:22:10.593
with camera module support or 
we'll be bound to camera modules

03:22:10.719 --> 03:22:17.475
 you select and most drivers are
 not user space drivers?  The 

03:22:17.476 --> 03:22:21.514
media staff depends on the 
hardware.  As we bring on the 

03:22:21.515 --> 03:22:28.008
more powerful chips from 
Qualcomm and media tech, they 

03:22:28.009 --> 03:22:33.200
support the harder based 
co-decks on your phone.  The low

03:22:33.550 --> 03:22:36.579
 end hardware doesn't have it as
 you expect.  With regard to 

03:22:36.710 --> 03:22:41.060
cameras, at the moment we do it 
with an accredited list of 

03:22:41.061 --> 03:22:46.196
sensors that work with that chip
 to see.  This is pretty typical

03:22:46.675 --> 03:22:51.216
 anyway if you buy a Qualcomm 
chip, they give you a list of 

03:22:51.217 --> 03:22:54.273
sensors they accredited for that
 device.  We piggyback on the 

03:22:55.021 --> 03:22:59.223
same list.  If you want to take 
a sensor that isn't supported 

03:22:59.559 --> 03:23:02.680
with Android Things, you have to
 work and get it supported.   

03:23:02.681 --> 03:23:04.557
same situation with Android 
Things.  You need to make that 

03:23:04.558 --> 03:23:08.580
match and do the ISP work and 
all those things.   get on the 

03:23:08.717 --> 03:23:13.635
list, we'll naturally support 
it.  Steps back for a second, 

03:23:13.777 --> 03:23:19.719
cameras are a very important 
category, stand-alone cameras or

03:23:20.053 --> 03:23:24.113
 other devices.  You see us 
invest very deeply in the area. 

03:23:24.625 --> 03:23:29.706
 from a hardware point of view, 
hardware and software and also 

03:23:29.707 --> 03:23:31.707
the (?) 

03:23:34.006 --> 03:23:38.549
Capabilities.   two questions.  
If you have some kind of plan to

03:23:38.550 --> 03:23:44.476
 have them later, if I develop 
one that won't connect and do it

03:23:44.792 --> 03:23:46.792
 later? 

03:23:49.355 --> 03:23:54.100
  we're working on it internally
 at the moment.  debate is how 

03:23:54.101 --> 03:23:59.553
useful it will be to developers 
because most of the fun of using

03:23:59.958 --> 03:24:03.800
 Android Things is you can 
interact with real hardware.  On

03:24:03.801 --> 03:24:07.445
 emulator you can't.  You can 
run an Android app in software 

03:24:07.446 --> 03:24:10.561
without any embedded 
peripherals, and that's not much

03:24:10.728 --> 03:24:14.295
 different than how it stands 
today.  Running on a normal 

03:24:14.467 --> 03:24:18.443
phone, to be honest with you.  
We'll be doing emulate targets 

03:24:18.444 --> 03:24:21.463
for things like continuous 
integration and testing, but 

03:24:21.464 --> 03:24:25.689
we're debating how many value it
 is inside Android Studio 

03:24:26.353 --> 03:24:31.204
itself.  you. second question is
 about somebody already asked it

03:24:31.488 --> 03:24:36.363
 but I still want to ask.  FIPT 
to create a custom board, is 

03:24:36.364 --> 03:24:39.670
there any way in your future 
plan to generate this code to 

03:24:39.671 --> 03:24:43.868
some kind of byte code so I can 
load it on my custom board?  

03:24:43.869 --> 03:24:49.415
Like a byte code of my program 
to load to my custom board? 

03:24:55.417 --> 03:25:03.919
 (?).  If you take our full 
operating system, if you take 

03:25:03.920 --> 03:25:11.213
parts of Android that's AOSP.   
the code is that, but in terms 

03:25:11.214 --> 03:25:14.663
of long-SMENT and security 
updates, that's only for the 

03:25:14.664 --> 03:25:20.559
certified boards.  About the 
emulator, if you have any 

03:25:20.560 --> 03:25:25.346
concrete use case, we would love
 to hear.  We can talk offline. 

03:25:25.894 --> 03:25:29.046
 We want to hear how useful that
 will be. 

03:25:32.052 --> 03:25:34.782
 So our appear indication is 
cellular, and the question is, 

03:25:34.783 --> 03:25:41.273
what's the shortest path to 
cellular connectivity with this 

03:25:41.274 --> 03:25:44.760
on the Verizon network, 
including the challenges of 

03:25:44.761 --> 03:25:49.750
carrier certification?  RAPAKA: 
 You're two steps ahead of us.  

03:25:49.751 --> 03:25:56.812
We want to deliver that.  Step 1
 is a SoM with leader 

03:25:56.945 --> 03:26:00.382
capabilities.  what they're 
working on right here.  We're 

03:26:00.383 --> 03:26:04.082
seeing how we can make it easy 
to not just get the board and 

03:26:04.083 --> 03:26:07.338
use the right network with 
precertification, and also to 

03:26:07.339 --> 03:26:14.017
get access to data.  do you buy 
data in the right granularity 

03:26:14.018 --> 03:26:18.643
you want in the fleet.  That's 
what we're working on.  Time 

03:26:18.644 --> 03:26:24.895
frame on some of these carrier 
boards? are you thinking?    

03:26:24.896 --> 03:26:32.205
hard to say right now.  I'm 
sorry.   long time away?  

03:26:32.206 --> 03:26:39.836
Hopefully not, but yes.  I have 
a question about Android Things 

03:26:40.215 --> 03:26:42.924
Tensor Flow.  Is there any place
 to share things they're 

03:26:42.925 --> 03:26:46.688
building outside of the play 
store, which are both hardware 

03:26:46.689 --> 03:26:51.636
drivers and models with Tensor 
Flow?  Absolutely.  you know 

03:26:51.637 --> 03:26:56.121
better than I do all the 
resources.   to share drivers, 

03:26:56.122 --> 03:27:01.395
you have two options.  We have 
the complete drivers on

03:27:05.484 --> 03:27:09.991
 GitHub.  You can send PR 
requests for us.  wondering if 

03:27:09.992 --> 03:27:12.452
there are people doing something
 with Tensor Flow, and that 

03:27:12.453 --> 03:27:19.586
might reshare their depositores 
for other things they're doing? 

03:27:20.860 --> 03:27:27.168
 For now if you have it on 
GitHub you can publish it on on 

03:27:27.169 --> 03:27:29.718
the Google+ community.  That's 
where we share it and it's 

03:27:29.719 --> 03:27:34.055
useful to developers.  With that
 we're out of time.  Maybe we 

03:27:34.056 --> 03:27:36.620
can answer questions separately 
on the side if that's okay so we

03:27:36.621 --> 03:27:39.796
 can clear out the space.  Thank
 you.  Applause )

