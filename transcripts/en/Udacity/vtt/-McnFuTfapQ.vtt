WEBVTT
Kind: captions
Language: en

00:00:00.040 --> 00:00:01.920
We'll start by adding 
our callback functions

00:00:01.920 --> 00:00:03.810
to our ForecastFragment.

00:00:03.810 --> 00:00:05.613
Now know we have 
two different options here

00:00:05.613 --> 00:00:06.886
for loader callbacks.

00:00:06.886 --> 00:00:10.700
We want to make sure we're choosing 
the android.support.v4 callback

00:00:10.700 --> 00:00:12.670
so we're compatible with Gingerbread.

00:00:12.670 --> 00:00:14.543
These take generic type.

00:00:14.543 --> 00:00:17.196
We're going to want to use Cursor.

00:00:17.196 --> 00:00:21.000
And yes, that is andriod.database.cursor.

00:00:21.000 --> 00:00:24.350
Now, let's move down to where 
we want to actually insert this code.

00:00:24.350 --> 00:00:28.040
Here at the bottom, and of course, 
we use CTRL+I to actually insert.

00:00:28.040 --> 00:00:31.920
And there we have it beautifully, 
our loader pattern with cursor.

00:00:31.920 --> 00:00:34.446
Now, let's do some work 
that will help us out.

00:00:34.446 --> 00:00:36.374
First we're going to add 
an array of columns

00:00:36.374 --> 00:00:38.022
to the top of our ForecastFragment.

00:00:38.022 --> 00:00:41.300
These are the columns that are going 
to be used in our query.

00:00:41.300 --> 00:00:43.830
Note, that since both 
WeatherEntry and LocationEntry

00:00:43.830 --> 00:00:47.010
have the underscore ID field, 
we must fully qualify

00:00:47.010 --> 00:00:49.980
which ID we want in our projection 
for this query to work.

00:00:49.980 --> 00:00:53.730
And in fact this query requires 
a projection to work at all,

00:00:53.730 --> 00:00:55.870
otherwise [inaudible].

00:00:55.870 --> 00:00:59.590
Next, here are indices
that are tied to these columns.

00:00:59.590 --> 00:01:02.486
This will make some 
of our work easier, later on.

00:01:02.486 --> 00:01:05.182
Note, that these actually must match.

00:01:05.182 --> 00:01:08.480
Then we create some public indices 
for us to use in our adapter.

00:01:08.480 --> 00:01:11.720
This allows us to make our code
tiny and efficient in the adapter,

00:01:11.720 --> 00:01:13.880
but it means we must 
maintain the relationship

00:01:13.880 --> 00:01:16.940
between these column indices
and the projection.

00:01:16.940 --> 00:01:19.093
Each loader has an ID.

00:01:19.093 --> 00:01:22.366
It allows a fragment to have 
multiple loaders active at once.

00:01:22.366 --> 00:01:25.080
We're goint to place this,
along with an instance variable

00:01:25.080 --> 00:01:28.000
to stave off our location here 
at the top of our class.

00:01:28.000 --> 00:01:31.625
Next we're going to override
onActivityCreated.

00:01:31.625 --> 00:01:34.190
Loaders are initialized
in onActivity Created

00:01:34.190 --> 00:01:37.020
because their lifecycle
is actually bound to the activity

00:01:37.020 --> 00:01:38.746
not the fragment.

00:01:38.772 --> 00:01:42.200
Note the use of the loader ID:
FORECAST_LOADER.

00:01:42.200 --> 00:01:45.330
Then we return 
to the onCreateLoader function.

00:01:45.330 --> 00:01:48.063
We add a new CursorLoader.

00:01:48.063 --> 00:01:50.306
This CursorLoader has our query,

00:01:50.306 --> 00:01:54.210
including start date, 
columns, and sort order.

00:01:54.210 --> 00:01:57.030
Our start date is actually in our URI.

00:01:57.030 --> 00:01:59.760
Our columns are the ones 
we defined earlier.

00:01:59.760 --> 00:02:04.580
And our sort order is going to be based 
upon COLUMN_DATETEXT ascending ("ASC").

00:02:04.580 --> 00:02:06.310
Let's do one last check.

00:02:06.310 --> 00:02:08.580
We want to make sure we're using 
the support library version

00:02:08.580 --> 00:02:10.184
of all of these classes,

00:02:10.184 --> 00:02:13.684
otherwise we won't get 
Android 2.3 compatibility.

