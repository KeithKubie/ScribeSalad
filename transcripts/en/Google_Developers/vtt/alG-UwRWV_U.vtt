WEBVTT
Kind: captions
Language: en

00:00:02.000 --> 00:00:04.059
PETE LEPAGE: All right,
welcome, everybody.

00:00:04.059 --> 00:00:05.140
My name's Pete LePage.

00:00:05.140 --> 00:00:07.860
I'm a developer advocate on
the Chrome team at Google.

00:00:07.860 --> 00:00:09.160
JOHN MELLOR: And I'm
John Mellor.

00:00:09.160 --> 00:00:12.070
I work on Chrome for Android
web browser in London.

00:00:12.070 --> 00:00:12.820
PETE LEPAGE: Awesome.

00:00:12.820 --> 00:00:15.850
Today we're going to be talking
about High DPI and how

00:00:15.850 --> 00:00:18.400
we make the web beautiful.

00:00:18.400 --> 00:00:20.950
Everybody here got a
Pixel yesterday,

00:00:20.950 --> 00:00:22.980
and it's pretty awesome.

00:00:22.980 --> 00:00:25.330
You've all probably been surfing
around a little bit on

00:00:25.330 --> 00:00:28.230
it, and you've seen that some
websites look pretty

00:00:28.230 --> 00:00:33.320
fantastic, and other sites, uh,
they don't look so good.

00:00:33.320 --> 00:00:36.560
So we're going to talk about how
to make all websites look

00:00:36.560 --> 00:00:37.810
pretty fantastic.

00:00:37.810 --> 00:00:42.140
Now, how many people have
an HDTV at home?

00:00:42.140 --> 00:00:45.480
Yeah, pretty much everybody,
right?

00:00:45.480 --> 00:00:46.630
It looks beautiful up here.

00:00:46.630 --> 00:00:48.510
If you're a sports fan,
everything looks sharp.

00:00:48.510 --> 00:00:48.980
It's clear.

00:00:48.980 --> 00:00:51.290
You can see all the little
balls, you can see the pucks,

00:00:51.290 --> 00:00:53.250
whatever it happens to be.

00:00:53.250 --> 00:00:56.840
But every once in a while, you
come across a TV show that's

00:00:56.840 --> 00:00:58.420
broadcast in standard def.

00:00:58.420 --> 00:01:02.070
And you kind of go, wow,
this looks like--

00:01:02.070 --> 00:01:03.320
well, it just looks
bad, right?

00:01:03.320 --> 00:01:05.420
It just doesn't look
very good.

00:01:05.420 --> 00:01:11.800
We're at the same point with
high DPI displays as we are

00:01:11.800 --> 00:01:15.160
with HDTVs five years ago.

00:01:15.160 --> 00:01:20.710
For the most part, it's up to
the broadcasters to send out

00:01:20.710 --> 00:01:21.730
high def channels.

00:01:21.730 --> 00:01:27.540
Well, now it's up to us, as web
developers, to send out

00:01:27.540 --> 00:01:30.760
the high def content
to our users.

00:01:30.760 --> 00:01:34.340
So we're going to talk about
how we get there.

00:01:34.340 --> 00:01:38.110
So let's just sort of think a
little bit about how an HDTV

00:01:38.110 --> 00:01:43.420
works and how the high
DPI displays work.

00:01:43.420 --> 00:01:47.700
So with a high def TV,
it's got about 1080

00:01:47.700 --> 00:01:49.090
pixels high, right?

00:01:49.090 --> 00:01:54.780
Well, a standard def image is
only about 480 pixels high.

00:01:54.780 --> 00:01:57.070
So you've got two options.

00:01:57.070 --> 00:02:02.120
One, you can display the image
at a one-to-one pixel ratio.

00:02:02.120 --> 00:02:03.580
So it's not expanded out.

00:02:03.580 --> 00:02:04.480
Everything looks sharp.

00:02:04.480 --> 00:02:05.750
It looks good.

00:02:05.750 --> 00:02:08.330
But you've got all those black
borders around everything, and

00:02:08.330 --> 00:02:11.240
it just looks, meh,
not so good.

00:02:11.240 --> 00:02:15.050
Or you can blow it up so it fits
the full resolution of

00:02:15.050 --> 00:02:16.340
your screen.

00:02:16.340 --> 00:02:18.650
And then it starts to
get a little blurry.

00:02:18.650 --> 00:02:22.530
And that's what's happening
on high DPI displays.

00:02:22.530 --> 00:02:24.150
That's what happens
on your phone.

00:02:24.150 --> 00:02:25.620
That's what happens
on the Pixel.

00:02:25.620 --> 00:02:29.676
The browser blows those images
up to fit on screen.

00:02:32.420 --> 00:02:35.580
So John, there's so many
pixel types that

00:02:35.580 --> 00:02:36.270
we got to deal with.

00:02:36.270 --> 00:02:38.890
Why don't we talk about
those for a sec.

00:02:38.890 --> 00:02:40.740
JOHN MELLOR: So there are
essentially three kinds of

00:02:40.740 --> 00:02:43.920
pixels that web developers
need to worry about.

00:02:43.920 --> 00:02:46.790
The first kind, it's
a device pixel.

00:02:46.790 --> 00:02:50.240
This is one physical hardware
pixel, a single RGP unit in

00:02:50.240 --> 00:02:51.330
the display.

00:02:51.330 --> 00:02:53.970
And it's the smallest unit,

00:02:53.970 --> 00:02:55.620
So then there's a
second kind--

00:02:55.620 --> 00:02:58.260
device independent pixel, or
DIP, as we're going to call it

00:02:58.260 --> 00:02:59.520
from now on.

00:02:59.520 --> 00:03:01.000
It's an abstract unit.

00:03:01.000 --> 00:03:03.580
It's a fixed multiple
of device pixels.

00:03:03.580 --> 00:03:07.170
So once they're a 2x device,
each device independent pixel,

00:03:07.170 --> 00:03:11.520
DIP, is a two-by-two vector
angle of device pixels.

00:03:11.520 --> 00:03:12.270
OK,

00:03:12.270 --> 00:03:15.570
And the third kind
is CSS pixels.

00:03:15.570 --> 00:03:17.540
These are the ones we're all
familiar with from CSS--

00:03:17.540 --> 00:03:20.710
the px unit.

00:03:20.710 --> 00:03:23.522
And so if you want to follow
best practices, and you've got

00:03:23.522 --> 00:03:27.050
a width=devi viewport-- we'll go
into what it means later--

00:03:27.050 --> 00:03:31.530
a CSS pixel and a DIP are
initially the same thing,

00:03:31.530 --> 00:03:33.520
until you zoom in.

00:03:33.520 --> 00:03:36.910
When you zoom in, the CSS
pixels gets scaled up.

00:03:36.910 --> 00:03:40.000
But the DIP is a physical
thing, and so that

00:03:40.000 --> 00:03:42.910
stays the same size.

00:03:42.910 --> 00:03:45.535
OK, so this leads to some
confusion, because they do

00:03:45.535 --> 00:03:47.650
seem quite similar,
ultimately.

00:03:47.650 --> 00:03:51.130
And in fact, if you read the
specs like CSS and HTML,

00:03:51.130 --> 00:03:53.850
you'll notice the specs never
actually refer to these DIPs.

00:03:53.850 --> 00:03:55.590
They always talk about
CSS pixels.

00:03:55.590 --> 00:03:59.120
And they use that term, CSS
pixels, to refer to both DIPs

00:03:59.120 --> 00:04:00.980
and CSS pixels.

00:04:00.980 --> 00:04:03.820
So you have to be a little
bit careful.

00:04:03.820 --> 00:04:06.280
As web developers, we're most
concerned about CSS pixels,

00:04:06.280 --> 00:04:09.230
because that's what we actually
use in our layouts,

00:04:09.230 --> 00:04:12.460
and this mysterious device
pixel ratio.

00:04:12.460 --> 00:04:16.399
So let's go into a practical
example.

00:04:16.399 --> 00:04:18.130
So this is a Nexus Four.

00:04:18.130 --> 00:04:22.210
It's a 2x device, and we'll put
on [? developer ?] hats in

00:04:22.210 --> 00:04:24.250
a minute to look at what that
actually means and how we

00:04:24.250 --> 00:04:25.560
calculate it.

00:04:25.560 --> 00:04:27.860
But all you need to know for now
is it's a fixed value for

00:04:27.860 --> 00:04:29.306
the device.

00:04:29.306 --> 00:04:32.250
The Nexus Four is
also 768 device

00:04:32.250 --> 00:04:34.790
pixels wide in portrait.

00:04:34.790 --> 00:04:38.940
And to get the mobile device
independent pixels of width,

00:04:38.940 --> 00:04:44.890
you divide this by the device
pixel ratio, and you get 384.

00:04:44.890 --> 00:04:47.960
The width for this device in CSS
pixels, well, that varies.

00:04:47.960 --> 00:04:49.700
So it varies based on the
viewport, which we'll go into

00:04:49.700 --> 00:04:52.910
later, and it varies
on the zoom level.

00:04:52.910 --> 00:04:55.140
On the mobile site, it'll
often start off

00:04:55.140 --> 00:04:56.690
as being 384 pixels.

00:04:56.690 --> 00:04:58.200
It'll match them with DIPs.

00:04:58.200 --> 00:05:01.220
But on a desktop site, it'll
often start out being 980

00:05:01.220 --> 00:05:02.540
pixels wide.

00:05:02.540 --> 00:05:06.590
And as you zoom in, the
page is scaled up.

00:05:06.590 --> 00:05:09.410
It stays the same width, but
because you can see less of

00:05:09.410 --> 00:05:12.720
the page on screen at one time,
the number of CSS pixels

00:05:12.720 --> 00:05:18.400
across the width of the screen
decreases when you zoom in.

00:05:18.400 --> 00:05:21.160
So Pete, how does the DPI
vary across devices?

00:05:21.160 --> 00:05:23.780
PETE LEPAGE: So it's really
one of those fun things.

00:05:23.780 --> 00:05:27.040
The device pixel ratio can go
anywhere from one for a simple

00:05:27.040 --> 00:05:32.410
1x device, all the way up to
3 with the new Galaxy S IV.

00:05:32.410 --> 00:05:35.910
And it's everything
in between.

00:05:35.910 --> 00:05:38.560
The Nexus S is a 1.5x device.

00:05:38.560 --> 00:05:41.210
The Nexus is a 1.3.

00:05:41.210 --> 00:05:44.310
Before this session, John and
I did a little bit of math,

00:05:44.310 --> 00:05:47.210
and we figured out, we think
for people sitting in the

00:05:47.210 --> 00:05:52.330
front row, that projector
is about a 0.5x display.

00:05:52.330 --> 00:05:55.510
But for the people in the
back, it's a 2x display.

00:05:55.510 --> 00:05:58.400
And we'll talk about
that in a sec.

00:05:58.400 --> 00:06:03.720
So notice that the different
DPIs between the Nexus S and

00:06:03.720 --> 00:06:08.230
the Chromebook Pixel is only
four DPI different, right?

00:06:08.230 --> 00:06:12.430
Four DPI should not matter
on how much it goes

00:06:12.430 --> 00:06:14.500
from a 1.5 to a 2.

00:06:14.500 --> 00:06:18.350
It shouldn't matter going back
and forth between the front

00:06:18.350 --> 00:06:19.190
row and the back row.

00:06:19.190 --> 00:06:22.710
It has to do with the distance
that you're sitting away from

00:06:22.710 --> 00:06:24.560
the device.

00:06:24.560 --> 00:06:27.400
So I want everybody to do a
little experiment for me.

00:06:27.400 --> 00:06:28.220
Take your hand.

00:06:28.220 --> 00:06:30.110
Hold it out in front of your
face, just like this.

00:06:30.110 --> 00:06:32.830
All right, now look at the
size of your hand.

00:06:32.830 --> 00:06:34.980
All right, now bring your hand
right up to your nose, like

00:06:34.980 --> 00:06:36.360
right up to your nose.

00:06:36.360 --> 00:06:37.880
Notice how your hand
got bigger?

00:06:37.880 --> 00:06:39.100
You can take your
hand down now.

00:06:39.100 --> 00:06:41.030
Right, your hand got
a lot bigger.

00:06:41.030 --> 00:06:44.660
But your hand didn't change
size at all, right?

00:06:44.660 --> 00:06:47.390
It comes down to the visual
angle that you're

00:06:47.390 --> 00:06:49.600
looking at your hand.

00:06:49.600 --> 00:06:51.540
So the device pixel
ratio is really

00:06:51.540 --> 00:06:53.850
about that visual angle.

00:06:53.850 --> 00:07:03.440
The CSS spec defines a pixel as
the visual angle of a pixel

00:07:03.440 --> 00:07:08.640
at 28 inches for a
96 DPI display.

00:07:08.640 --> 00:07:12.720
So they've said, all right, a
1x display should have about

00:07:12.720 --> 00:07:16.150
96 pixels at 28 inches.

00:07:16.150 --> 00:07:21.840
So for a phone, which we hold
much closer, we need it to

00:07:21.840 --> 00:07:23.880
have a higher pixel density.

00:07:23.880 --> 00:07:28.520
So instead of having a 96 DPI
display, it needs at least

00:07:28.520 --> 00:07:31.060
about 160 DPI.

00:07:31.060 --> 00:07:35.340
So actually, when we did the
math, this projector is about

00:07:35.340 --> 00:07:39.410
a 0.16 DPI, if you ever
want to do this.

00:07:39.410 --> 00:07:42.770
Now, if you want to calculate
these out, the formula's here.

00:07:42.770 --> 00:07:43.780
You can do this on your own.

00:07:43.780 --> 00:07:46.780
It's not really that hard, and
it's kind of fun just to

00:07:46.780 --> 00:07:47.830
figure this out.

00:07:47.830 --> 00:07:51.410
In fact, your TV at home, if
you've got an HDTV and you're

00:07:51.410 --> 00:07:54.050
sitting about six feet away from
it, you've got a high DPI

00:07:54.050 --> 00:07:55.320
display at home.

00:07:55.320 --> 00:07:58.530
I bet you didn't realize you
probably have multiple high

00:07:58.530 --> 00:08:01.570
DPI displays at home.

00:08:01.570 --> 00:08:04.890
So we've talked about a lot
of the theoretical stuff.

00:08:04.890 --> 00:08:07.540
Let's jump in and talk about the
practical stuff, like how

00:08:07.540 --> 00:08:09.930
we actually do this.

00:08:09.930 --> 00:08:10.860
JOHN MELLOR: So let's say
you want to build a

00:08:10.860 --> 00:08:12.670
high DPI phone site.

00:08:12.670 --> 00:08:15.030
OK, so you're looking on Nexus
7 or whatever, and you see

00:08:15.030 --> 00:08:19.830
that's 768 device pixels wide.

00:08:19.830 --> 00:08:21.240
That's what the spec
sheet says.

00:08:21.240 --> 00:08:23.710
You go online, you look at
google.com at Nexus 4 tech

00:08:23.710 --> 00:08:25.920
specs, and that's
what you see.

00:08:25.920 --> 00:08:28.476
So you want to build a
pixel perfect design.

00:08:28.476 --> 00:08:31.650
The natural thing to do is to
want a one-to-one ratio

00:08:31.650 --> 00:08:34.740
between device pixels
and CSS pixels.

00:08:34.740 --> 00:08:36.495
So how about this viewport?

00:08:36.495 --> 00:08:39.090
You said your width is 768,
and that's how wide

00:08:39.090 --> 00:08:40.380
your page will be.

00:08:40.380 --> 00:08:43.700
Well, this is actually
a really bad idea.

00:08:43.700 --> 00:08:46.120
If you look at what actually
happens, on the left hand

00:08:46.120 --> 00:08:50.250
screen shot, that's what you
want to happen, and on the

00:08:50.250 --> 00:08:51.960
right hand screen shot, that's
what actually happens.

00:08:51.960 --> 00:08:53.360
It looks tiny.

00:08:53.360 --> 00:08:56.510
Because the page is so wide, the
browser has zoomed out the

00:08:56.510 --> 00:08:59.410
page so that it fits
fully on screen.

00:08:59.410 --> 00:09:01.860
And as a result, everything's
gone really small.

00:09:01.860 --> 00:09:04.130
You can compensate for this,
but you have to go through

00:09:04.130 --> 00:09:08.000
every single width, height, font
size, margin, in every

00:09:08.000 --> 00:09:10.440
single CSS file of
your entire site.

00:09:10.440 --> 00:09:11.410
It's a maintenance nightmare.

00:09:11.410 --> 00:09:13.240
It's not worth it.

00:09:13.240 --> 00:09:15.440
It's also not even possible.

00:09:15.440 --> 00:09:18.955
In current browsers, when you
use that kind of viewport,

00:09:18.955 --> 00:09:22.070
they'll mess up your font sizes,
zooming will go weird,

00:09:22.070 --> 00:09:24.670
and it's because they'll think
you're a desktop site, even

00:09:24.670 --> 00:09:28.320
though you actually meant
it to be a mobile site.

00:09:28.320 --> 00:09:30.360
There was also a way of doing
this in the past with target

00:09:30.360 --> 00:09:32.910
density DPI in your viewport.

00:09:32.910 --> 00:09:33.810
That's been deprecated.

00:09:33.810 --> 00:09:36.230
It doesn't work in Chrome,
Safari, Firefox, et cetera,

00:09:36.230 --> 00:09:40.130
and never will, so ignore it.

00:09:40.130 --> 00:09:43.010
So instead of a really wide
viewport, how about a

00:09:43.010 --> 00:09:46.215
fixed-width viewport of a width
that's more similar to

00:09:46.215 --> 00:09:47.860
the width of a phone?

00:09:47.860 --> 00:09:50.960
I've heard that 320 is common.

00:09:50.960 --> 00:09:56.410
So this is OK for legacy
fixed-width, phone-only sites.

00:09:56.410 --> 00:09:58.160
But never use this
for new sites or

00:09:58.160 --> 00:10:00.770
sites aimed at tablets.

00:10:00.770 --> 00:10:01.450
Why?

00:10:01.450 --> 00:10:05.400
Well, again, look at this
site on Nexus 4.

00:10:05.400 --> 00:10:08.890
Nexus 4 was 384 DIPs
wide, and so it's

00:10:08.890 --> 00:10:11.330
scaled from 320 to 384.

00:10:11.330 --> 00:10:12.250
That's OK.

00:10:12.250 --> 00:10:14.270
It looks decent.

00:10:14.270 --> 00:10:15.430
But a real killer is
when you rotate

00:10:15.430 --> 00:10:17.470
your phone to landscape.

00:10:17.470 --> 00:10:18.640
And look at this.

00:10:18.640 --> 00:10:21.090
The toolbar is blown
out of proportion.

00:10:21.090 --> 00:10:22.620
It's enormous.

00:10:22.620 --> 00:10:24.600
You can't even see the search
box on screen because it's

00:10:24.600 --> 00:10:29.005
been pushed so far down as
the page is scaled up.

00:10:29.005 --> 00:10:31.470
And if you try this on a tablet,
can you imagine what's

00:10:31.470 --> 00:10:32.840
going to happen now?

00:10:32.840 --> 00:10:36.170
We're going to scale this up
from 320 to 1280, and it's

00:10:36.170 --> 00:10:38.840
enormous now.

00:10:38.840 --> 00:10:43.750
So yeah, the only valid way to
make a mobile website is to

00:10:43.750 --> 00:10:47.620
design your site with flexible
width layout, even if you're

00:10:47.620 --> 00:10:51.260
making a dedicated mobile
site, and use a

00:10:51.260 --> 00:10:53.270
width=device-width viewport.

00:10:53.270 --> 00:10:55.860
That one, in fact.

00:10:55.860 --> 00:10:59.180
So you'll see initial
scale here.

00:10:59.180 --> 00:11:03.710
That's there to fix a feature
in iOS where, in landscape,

00:11:03.710 --> 00:11:05.650
while often making your viewport
wider, it'll zoom in

00:11:05.650 --> 00:11:09.020
on your page, which
looks a bit weird.

00:11:09.020 --> 00:11:11.430
But the important thing is, this
viewport allows you just

00:11:11.430 --> 00:11:13.690
to zoom in and out, which
is recommended for

00:11:13.690 --> 00:11:16.010
accessibility reasons.

00:11:16.010 --> 00:11:19.490
If you must disallow pinch
zoom, which happens on a

00:11:19.490 --> 00:11:21.570
couple of sites-- say you're
doing a multi-finger touch

00:11:21.570 --> 00:11:23.880
painting app or you're building
Google Maps, or

00:11:23.880 --> 00:11:25.560
something like that--

00:11:25.560 --> 00:11:27.590
then you can use a
second viewport.

00:11:27.590 --> 00:11:30.280
But try to avoid it, because
letting users zoom in is a

00:11:30.280 --> 00:11:32.950
nice thing to do.

00:11:32.950 --> 00:11:36.920
And so these two viewports give
you the ideal page width

00:11:36.920 --> 00:11:39.660
on all devices.

00:11:39.660 --> 00:11:44.860
Use one of those for all mobile
or responsive sites.

00:11:44.860 --> 00:11:47.630
Now, the device width, which
he mentioned here, it's

00:11:47.630 --> 00:11:49.050
actually in DIPs.

00:11:49.050 --> 00:11:52.310
So this means you get the same
width of your page in CSS

00:11:52.310 --> 00:11:57.050
pixels whether you're on a low
DPI or a high DPI device.

00:11:57.050 --> 00:11:58.290
This is good.

00:11:58.290 --> 00:12:00.990
This means the CSS and
JavaScript you wrote for your

00:12:00.990 --> 00:12:05.600
low DPI device will just work
for your high DPI device.

00:12:05.600 --> 00:12:08.960
It's like what Pete was
saying about HDTV.

00:12:08.960 --> 00:12:11.100
Basically, [? it allows you ?]
to scale your site up, and

00:12:11.100 --> 00:12:15.410
it'll all look in proportion,
like an HDTV playing SD video.

00:12:15.410 --> 00:12:16.610
Except that [? bell's ?]
is a bit smarter.

00:12:16.610 --> 00:12:20.130
Like for text and CSS features
like border-radius, it'll

00:12:20.130 --> 00:12:23.770
render it all crisply, taking
full advantage of the

00:12:23.770 --> 00:12:26.020
available pixels.

00:12:26.020 --> 00:12:28.200
So the same widths, font sizes,
borders, and so on

00:12:28.200 --> 00:12:31.560
work, but a few things you
might want to tweak.

00:12:31.560 --> 00:12:32.810
So Pete--

00:12:35.135 --> 00:12:38.700
PETE LEPAGE: All right, so if
we want to display high DPI

00:12:38.700 --> 00:12:41.540
assets in our markup or in our
CSS, there's a couple of

00:12:41.540 --> 00:12:42.910
things that we can do.

00:12:42.910 --> 00:12:46.530
For CSS, we need
to use a rather

00:12:46.530 --> 00:12:49.570
large media query today.

00:12:49.570 --> 00:12:54.280
This is going to get a lot
easier, and most browsers are

00:12:54.280 --> 00:12:56.620
standardizing on
this line here.

00:12:56.620 --> 00:13:03.240
So you can see that we say,
min resolution 1.5 DPPX.

00:13:03.240 --> 00:13:05.980
Whoever chose those set of
letters right next to each

00:13:05.980 --> 00:13:07.750
other, I'd like to
just hit, because

00:13:07.750 --> 00:13:08.820
they're not fun to say.

00:13:08.820 --> 00:13:14.240
But in any event, 1.5
DPPX will do that.

00:13:14.240 --> 00:13:16.810
But for today, you need
to include all

00:13:16.810 --> 00:13:17.690
four of those lines.

00:13:17.690 --> 00:13:20.950
So you need the one for
WebKit, for Opera.

00:13:20.950 --> 00:13:23.920
But I want to point out the
third line there, the min

00:13:23.920 --> 00:13:26.960
resolution 144 DPI, because
that's also going to work in

00:13:26.960 --> 00:13:27.750
the future.

00:13:27.750 --> 00:13:33.430
Now, you'd think that this
device, which is 326, or 236,

00:13:33.430 --> 00:13:36.780
or something like that, this
should classify as that.

00:13:36.780 --> 00:13:43.290
What that number is is that's
the number of pixels at the

00:13:43.290 --> 00:13:44.910
standard level.

00:13:44.910 --> 00:13:47.550
So the CSS specs says
it should be

00:13:47.550 --> 00:13:50.820
at 96 for a 1x device.

00:13:50.820 --> 00:13:53.940
So we want this to work on a
1.5x device, so we take that

00:13:53.940 --> 00:13:56.270
96, multiply it by 1.5.

00:13:56.270 --> 00:13:58.930
That's where the 144
is coming from.

00:13:58.930 --> 00:14:02.210
So if we wanted it to be a 2x
device, we'd need to do just

00:14:02.210 --> 00:14:05.510
96 times 2.

00:14:05.510 --> 00:14:09.740
So that's going to work great
for displaying background

00:14:09.740 --> 00:14:11.650
images and stuff
in our markup.

00:14:11.650 --> 00:14:15.700
If we want to query this in
JavaScript, we've got the

00:14:15.700 --> 00:14:19.050
ability to be able to say
window.devicePixelRatio and

00:14:19.050 --> 00:14:22.120
we'll get our device pixel ratio
back from the browser.

00:14:22.120 --> 00:14:24.830
Now, this works pretty much
across all browsers.

00:14:24.830 --> 00:14:28.730
The only place where it doesn't
work today is IE.

00:14:28.730 --> 00:14:31.040
They're aware of it, so
hopefully we'll see that in

00:14:31.040 --> 00:14:32.300
the near future.

00:14:32.300 --> 00:14:35.950
But the nice thing about both of
these is if you specify the

00:14:35.950 --> 00:14:43.970
markup in your CSS or you have
this and it fails, it's going

00:14:43.970 --> 00:14:46.840
to work, because you've
already got

00:14:46.840 --> 00:14:49.950
fallbacks in there.

00:14:49.950 --> 00:14:53.520
Now, most browsers today are
pretty awesome at sub-pixel

00:14:53.520 --> 00:14:54.250
layout, right?

00:14:54.250 --> 00:14:56.410
You can say, hey, I want
something to be half a pixel

00:14:56.410 --> 00:14:58.540
wide, and it'll go
do that thing.

00:14:58.540 --> 00:15:02.100
So that should mean I should be
able to, on a high def or a

00:15:02.100 --> 00:15:05.200
high DPI display, I can go do
something like this, where I

00:15:05.200 --> 00:15:10.740
say, on a 1x display, I want
a border of one CSS pixel.

00:15:10.740 --> 00:15:14.870
And on a 1x display, one CSS
pixel is going to be one

00:15:14.870 --> 00:15:16.380
hardware pixel.

00:15:16.380 --> 00:15:22.210
But on a 2x display, I want a
half a CSS pixel, which is a

00:15:22.210 --> 00:15:25.770
one device pixel line.

00:15:25.770 --> 00:15:27.740
You think this works?

00:15:27.740 --> 00:15:28.793
Yeah, no.

00:15:28.793 --> 00:15:32.170
Of course not.

00:15:32.170 --> 00:15:43.970
On Firefox and IE, they round
up, and they're always going

00:15:43.970 --> 00:15:46.960
to give you a one
pixel border.

00:15:46.960 --> 00:15:52.080
But on WebKit browsers,
they round down.

00:15:52.080 --> 00:15:53.760
So you get no border.

00:15:53.760 --> 00:15:58.090
So you want to really test
exhaustively if you want to

00:15:58.090 --> 00:15:59.270
use something like this.

00:15:59.270 --> 00:16:02.340
But realistically, if you want
to have something that thin,

00:16:02.340 --> 00:16:04.130
I'd avoid it right now.

00:16:04.130 --> 00:16:06.850
It's going to be a little bit
more of a pain in the butt

00:16:06.850 --> 00:16:08.100
than you want to deal with.

00:16:11.090 --> 00:16:13.040
JOHN MELLOR: So now
some better news.

00:16:13.040 --> 00:16:16.870
If we're doing text,
text is great.

00:16:16.870 --> 00:16:20.010
You've got a mobile optimized
site with width=device-width,

00:16:20.010 --> 00:16:21.960
your text is going to
be the same size

00:16:21.960 --> 00:16:24.850
in DIPs on all devices.

00:16:24.850 --> 00:16:26.260
You don't have to do anything.

00:16:26.260 --> 00:16:28.640
So if you get out your ruler
now and you measured the

00:16:28.640 --> 00:16:31.690
actual physical size, it will
differ slightly going from,

00:16:31.690 --> 00:16:34.130
say, a phone to a desktop
or something.

00:16:34.130 --> 00:16:36.660
But that's because of what Pete
was saying earlier about

00:16:36.660 --> 00:16:38.100
the viewing distance.

00:16:38.100 --> 00:16:41.280
And you'll find that the visual
angle of the characters

00:16:41.280 --> 00:16:46.440
of your text will be the same,
even on the phone and desktop.

00:16:46.440 --> 00:16:49.010
So your text will be
similarly legible.

00:16:49.010 --> 00:16:51.190
It'll just be rendered slightly
more crisply on high

00:16:51.190 --> 00:16:53.375
DPI devices, [INAUDIBLE] taking
full advantage on the

00:16:53.375 --> 00:16:54.970
extra pixels.

00:16:54.970 --> 00:16:55.820
You're done here.

00:16:55.820 --> 00:16:58.100
Don't change a thing.

00:16:58.100 --> 00:17:01.650
Now, if you got the misfortune
of serving a desktop site to

00:17:01.650 --> 00:17:05.690
mobile browsers, now you're
in for a world of pain.

00:17:05.690 --> 00:17:08.089
So yeah, it's tricky.

00:17:08.089 --> 00:17:11.690
Desktop sites are 1,000 pixels
wide, give or take a bit.

00:17:11.690 --> 00:17:13.990
The browser's going to zoom them
out to fit the full page

00:17:13.990 --> 00:17:16.300
width on the screen.

00:17:16.300 --> 00:17:20.430
So on a portrait phone, which is
about 300 to 400 DIPs wide,

00:17:20.430 --> 00:17:23.465
this means your site's going to
be scaled down by a factor

00:17:23.465 --> 00:17:24.675
of three or so.

00:17:24.675 --> 00:17:26.300
And it's going to be tiny.

00:17:26.300 --> 00:17:27.390
But that's OK.

00:17:27.390 --> 00:17:30.930
You can zoom in, and by zooming
in, text will become

00:17:30.930 --> 00:17:33.220
legible again, right?

00:17:33.220 --> 00:17:37.810
Well, there's a slight problem
with this, as always.

00:17:37.810 --> 00:17:41.950
So when you got wide columns of
text, suddenly everything

00:17:41.950 --> 00:17:42.990
breaks down.

00:17:42.990 --> 00:17:46.500
Once you've zoomed in such that
the text is legible, the

00:17:46.500 --> 00:17:49.540
text is now wider than the
screen, which means you have

00:17:49.540 --> 00:17:52.140
to pan from side to side
for every line

00:17:52.140 --> 00:17:53.200
of text you're reading.

00:17:53.200 --> 00:17:54.090
PETE LEPAGE: Oh, come on.

00:17:54.090 --> 00:17:55.850
Who doesn't love that?

00:17:55.850 --> 00:17:56.220
JOHN MELLOR: Woo!

00:17:56.220 --> 00:17:57.155
Look I'm [? scrolling! ?]

00:17:57.155 --> 00:17:58.310
PETE LEPAGE: Yeah, no.

00:17:58.310 --> 00:17:59.980
JOHN MELLOR: It's just
not practical.

00:17:59.980 --> 00:18:03.220
So to combat this, when viewing
desktop sites with

00:18:03.220 --> 00:18:07.040
wide columns, many mobile
browsers reformat the text

00:18:07.040 --> 00:18:08.600
using a text auto-sizing
algorithm.

00:18:13.070 --> 00:18:15.670
So on the left, you see this
page as it was originally

00:18:15.670 --> 00:18:18.490
designed, and on the right, you
see how it gets rendered

00:18:18.490 --> 00:18:21.790
in Chrome for Android
on a phone.

00:18:21.790 --> 00:18:24.600
You'll notice that the wide
left hand column has

00:18:24.600 --> 00:18:26.270
changed text size.

00:18:26.270 --> 00:18:32.350
The header has gone from 24 to
32 pixels, and the main body

00:18:32.350 --> 00:18:35.650
text has gone from 15
pixels to 26 pixels.

00:18:35.650 --> 00:18:39.856
But, in the meantime, the narrow
right hand column has

00:18:39.856 --> 00:18:44.990
stayed a constant 13 pixels
in font size.

00:18:44.990 --> 00:18:48.230
So why are narrow columns
different from wide columns?

00:18:48.230 --> 00:18:51.230
Well, this is what text
auto-sizing does.

00:18:51.230 --> 00:18:54.900
It permanently scales the CSS
font size of any wide columns

00:18:54.900 --> 00:18:58.960
of text, such that when you
double tap to zoom in on that

00:18:58.960 --> 00:19:03.230
block of text, which fits the
block to the screen width, the

00:19:03.230 --> 00:19:05.600
text will then be legible.

00:19:05.600 --> 00:19:08.590
This is used on mobile by
Chrome, Safari, Firefox,

00:19:08.590 --> 00:19:12.080
Internet Explorer, notable
exceptions being Opera and

00:19:12.080 --> 00:19:13.330
[INAUDIBLE].

00:19:14.770 --> 00:19:16.420
You'll notice that not even the
font size nor the layout

00:19:16.420 --> 00:19:18.470
change when you zoom
in and out.

00:19:18.470 --> 00:19:21.840
This all happens when the
page is first laid out.

00:19:21.840 --> 00:19:25.800
So it's used by four browsers,
and you'll find that all of

00:19:25.800 --> 00:19:27.985
them have different
exciting quirks.

00:19:27.985 --> 00:19:30.290
PETE LEPAGE: Yay!

00:19:30.290 --> 00:19:32.380
JOHN MELLOR: So by now you're
probably wondering, how do I

00:19:32.380 --> 00:19:34.340
avoid text auto-sizing?

00:19:34.340 --> 00:19:35.220
It's kind of a fallback.

00:19:35.220 --> 00:19:37.380
The browser does it because
it has [? two  bits. ?]

00:19:37.380 --> 00:19:39.950
You never want it to happen.

00:19:39.950 --> 00:19:44.050
So because it triggers on wide
columns, by far the best thing

00:19:44.050 --> 00:19:49.020
to do is just make your
page narrower, OK?

00:19:49.020 --> 00:19:52.290
So ideally, you use responsive
web design techniques to

00:19:52.290 --> 00:19:56.390
reformat your page for mobile
device sizes, or, if you must,

00:19:56.390 --> 00:19:57.860
use a dedicated mobile site.

00:19:57.860 --> 00:20:01.620
But whatever you do, just make
sure it's a width=device-width

00:20:01.620 --> 00:20:04.640
narrow page.

00:20:04.640 --> 00:20:07.000
If you're stuck serving a
desktop page to mobile

00:20:07.000 --> 00:20:10.555
browsers, well, there's still
a bit you can do.

00:20:10.555 --> 00:20:13.770
You can split up your wide
columns of text into multiple

00:20:13.770 --> 00:20:17.400
narrower columns side by side.

00:20:17.400 --> 00:20:18.460
And that way, because
they're narrow,

00:20:18.460 --> 00:20:21.700
they won't get modified.

00:20:21.700 --> 00:20:25.270
So it sort of works, but
it's not great either.

00:20:25.270 --> 00:20:28.430
And then finally, there are some
ways you can disable text

00:20:28.430 --> 00:20:33.690
auto-sizing, but use this
only as a last resort.

00:20:33.690 --> 00:20:36.890
It'll disable it for the subtree
under that selector,

00:20:36.890 --> 00:20:40.590
but only use it for quirks like
a menu being auto-sized

00:20:40.590 --> 00:20:42.760
or other strange things
going on.

00:20:42.760 --> 00:20:46.010
Don't use it for wide columns of
text, or else, when you pan

00:20:46.010 --> 00:20:48.570
from side to side, users are
going to have the problem that

00:20:48.570 --> 00:20:51.160
we had earlier before and
are just going to

00:20:51.160 --> 00:20:52.410
give up on your site.

00:20:56.000 --> 00:20:58.040
PETE LEPAGE: So we've talked
about text, we've talked about

00:20:58.040 --> 00:20:58.490
other stuff.

00:20:58.490 --> 00:21:02.840
But images really are one of the
most important things on

00:21:02.840 --> 00:21:04.160
our websites today.

00:21:04.160 --> 00:21:06.720
Talked yesterday during the
keynote that images are up to

00:21:06.720 --> 00:21:10.720
60%, or average about 60%
of the weight of a page.

00:21:10.720 --> 00:21:15.330
So let's talk about the web
images and the stuff that

00:21:15.330 --> 00:21:17.500
we're doing there.

00:21:17.500 --> 00:21:19.870
JOHN MELLOR: So it depends on
type of graphic what happens.

00:21:19.870 --> 00:21:23.420
For vector images, they'll
seamlessly get crisper on high

00:21:23.420 --> 00:21:25.310
DPI displays.

00:21:25.310 --> 00:21:27.380
The same thing happens for
text-- the browser just does

00:21:27.380 --> 00:21:29.050
everything for you.

00:21:29.050 --> 00:21:32.690
But with raster images, they'll
get stretched, usually

00:21:32.690 --> 00:21:36.325
using bilinear interpolation,
and you'll find they'll start

00:21:36.325 --> 00:21:38.760
looking really crap.

00:21:38.760 --> 00:21:42.900
So an obvious and future-proof
solution is to replace as many

00:21:42.900 --> 00:21:46.250
raster images as possible
with vector images.

00:21:46.250 --> 00:21:48.014
So how can you do that?

00:21:48.014 --> 00:21:50.450
PETE LEPAGE: Well, it would be
nice if we could use vector

00:21:50.450 --> 00:21:54.340
images for everything, but
obviously we can't.

00:21:54.340 --> 00:21:58.200
For graphics that have text on
it and if you want a specific

00:21:58.200 --> 00:22:02.380
font, using something like
Google Fonts or other web font

00:22:02.380 --> 00:22:05.360
services, or Unicode
characters, is

00:22:05.360 --> 00:22:06.250
a really good way.

00:22:06.250 --> 00:22:09.580
You can use Unicode characters
very easily for bullets as

00:22:09.580 --> 00:22:10.990
you're going through.

00:22:10.990 --> 00:22:13.090
If you're looking for a couple
of symbols, it works well for

00:22:13.090 --> 00:22:14.140
that as well.

00:22:14.140 --> 00:22:18.130
There's a bunch of really great
icon fonts that you can

00:22:18.130 --> 00:22:20.790
use that give you really
easy access to lots

00:22:20.790 --> 00:22:22.420
of different icons.

00:22:22.420 --> 00:22:25.420
But one of the problems with
icon fonts is that they're

00:22:25.420 --> 00:22:26.500
single color, right?

00:22:26.500 --> 00:22:30.550
You can't change the color of
one part of an icon and have

00:22:30.550 --> 00:22:32.690
another part some
different color.

00:22:32.690 --> 00:22:34.740
So that's where SVG works
really well--

00:22:34.740 --> 00:22:36.150
Scalable Vector Graphics.

00:22:36.150 --> 00:22:38.650
Because you can have it whatever
color you want, and

00:22:38.650 --> 00:22:42.560
because it's a vector graphic,
it can get bigger and smaller

00:22:42.560 --> 00:22:45.440
as easily as you want it to.

00:22:45.440 --> 00:22:48.870
And then finally, using CSS3,
if you've got gradients,

00:22:48.870 --> 00:22:52.290
backgrounds, rounded corners,
anything like that, it works

00:22:52.290 --> 00:22:55.920
really well for that
kind of stuff

00:22:55.920 --> 00:22:58.860
Now, we've talked a little bit
about background images

00:22:58.860 --> 00:23:01.720
already, so we won't spend too
much time on this, but just

00:23:01.720 --> 00:23:05.500
want to call out again, you need
to have these four lines.

00:23:05.500 --> 00:23:07.870
Now, this is great
for the 1.5x.

00:23:07.870 --> 00:23:09.830
If you want to have a
2x, you'd need to

00:23:09.830 --> 00:23:11.750
have another one.

00:23:11.750 --> 00:23:15.060
Now, the 2x will work on this,
and it'll get all the 1.5x.

00:23:15.060 --> 00:23:17.270
But you may want to
go and do a 2x.

00:23:17.270 --> 00:23:20.350
You may decide that 1.5x, it's
not worth my trouble.

00:23:20.350 --> 00:23:22.160
I'm just going to do the 2x.

00:23:22.160 --> 00:23:25.280
You may decide that you want
to do one for everybody.

00:23:25.280 --> 00:23:26.960
And then one other thing--
always having

00:23:26.960 --> 00:23:28.410
that fallback there.

00:23:28.410 --> 00:23:33.040
If you decide to use the
background shorthand, don't

00:23:33.040 --> 00:23:35.240
forget to reset the
size on an image.

00:23:35.240 --> 00:23:38.040
Because the background
shorthand will reset

00:23:38.040 --> 00:23:41.000
this size on that.

00:23:41.000 --> 00:23:43.950
Another technique you can
use is using highly

00:23:43.950 --> 00:23:46.370
compressed 2x images.

00:23:46.370 --> 00:23:49.320
And this actually works
fantastically well.

00:23:49.320 --> 00:23:52.730
You can see those two
images there.

00:23:52.730 --> 00:23:55.820
They both came from the
same original image.

00:23:55.820 --> 00:23:57.720
On the left is a 1x JPEG.

00:23:57.720 --> 00:24:01.840
So it's JPEG at 300 pixels
by 300 pixels.

00:24:01.840 --> 00:24:05.320
I saved it as a quality
90 in Photoshop.

00:24:05.320 --> 00:24:07.830
And then on the right hand side,
I did the same thing.

00:24:07.830 --> 00:24:10.360
I took the original image,
but I rescaled it.

00:24:10.360 --> 00:24:14.570
Instead of going to 300 by 300
pixels, I set it to 600 pixels

00:24:14.570 --> 00:24:19.550
by 600 pixels, and I set
the JPEG quality to 30.

00:24:19.550 --> 00:24:22.090
So I went from 90 all
the way down to 30--

00:24:22.090 --> 00:24:23.480
cranked it way down.

00:24:23.480 --> 00:24:26.485
The file size difference
is huge, right?

00:24:26.485 --> 00:24:31.390
I went from a 62K file
down to a 36K file.

00:24:31.390 --> 00:24:34.870
Saved like 30 some odd percent
on that file size.

00:24:34.870 --> 00:24:37.970
So great from a file
size perspective.

00:24:37.970 --> 00:24:41.280
And when we actually zoom in
and look at the image, it

00:24:41.280 --> 00:24:43.240
looks really good.

00:24:43.240 --> 00:24:48.680
In fact, even on a 1x display,
I think it looks better than

00:24:48.680 --> 00:24:50.850
the original image.

00:24:50.850 --> 00:24:53.280
Even look at the bow of the
ship, look at the little bulb,

00:24:53.280 --> 00:24:54.380
look at the cranes--

00:24:54.380 --> 00:24:56.800
everything is just
much sharper.

00:24:56.800 --> 00:25:01.570
Now, this is great for most
images, but there are a few

00:25:01.570 --> 00:25:04.340
places where this doesn't work,
where you need to test

00:25:04.340 --> 00:25:05.240
this a little bit.

00:25:05.240 --> 00:25:08.310
If you have a lot of color
gradients, you may see some

00:25:08.310 --> 00:25:11.960
banding in your colors.

00:25:11.960 --> 00:25:14.520
If that's really important and
you want to make sure that you

00:25:14.520 --> 00:25:18.610
don't hit that, you can use WebP
as another technique to

00:25:18.610 --> 00:25:21.060
make sure that your
images look great.

00:25:21.060 --> 00:25:25.170
On the left is a 2x JPEG
saved at quality 80.

00:25:25.170 --> 00:25:27.380
So I cranked the quality
up, and I made them

00:25:27.380 --> 00:25:28.940
both the same size.

00:25:28.940 --> 00:25:33.670
And on the right is
a 2x WebP image.

00:25:33.670 --> 00:25:35.310
So the quality level
is the same.

00:25:35.310 --> 00:25:37.350
They're both the same
physical size.

00:25:37.350 --> 00:25:43.050
And it went from a 145K all the
way down to a 38K file.

00:25:43.050 --> 00:25:45.530
So huge file savings.

00:25:45.530 --> 00:25:49.270
Now, the one disadvantage that
we have with WebP is that it's

00:25:49.270 --> 00:25:51.790
not supported across
all browsers.

00:25:51.790 --> 00:25:53.600
So that means you're going to
need to do some type of

00:25:53.600 --> 00:25:57.540
feature detection, either
JavaScript, which there are

00:25:57.540 --> 00:26:00.180
some pretty significant
disadvantages to that, or

00:26:00.180 --> 00:26:01.490
server side.

00:26:01.490 --> 00:26:04.200
Or you can use some services
like PageSpeed, which is

00:26:04.200 --> 00:26:05.920
available as a Google service.

00:26:05.920 --> 00:26:11.260
You can download an Apache
or a plug-in for nginx.

00:26:11.260 --> 00:26:16.960
Yesterday, Ilija Gregoric did
a session on PageSpeed, and

00:26:16.960 --> 00:26:19.470
tomorrow he's doing
one on WebP.

00:26:19.470 --> 00:26:21.960
So if this is an interesting
thing to you, which it should

00:26:21.960 --> 00:26:25.130
be to every developer in here,
I really would recommend

00:26:25.130 --> 00:26:26.360
checking that out.

00:26:26.360 --> 00:26:30.740
WebP can save you upwards of
30% in your file sizes, and

00:26:30.740 --> 00:26:31.990
that's huge.

00:26:34.420 --> 00:26:36.670
JOHN MELLOR: OK, so
Peter [INAUDIBLE]

00:26:36.670 --> 00:26:39.530
resolution switching, swapping
out images for high resolution

00:26:39.530 --> 00:26:41.370
images today.

00:26:41.370 --> 00:26:43.960
In CSS, use media queries
to swap them out.

00:26:43.960 --> 00:26:46.740
And in HTML, well, there's
actually no easy way, and so

00:26:46.740 --> 00:26:49.390
you'll just provide a highly
compressed 2x image, and it

00:26:49.390 --> 00:26:50.660
seems to work well.

00:26:50.660 --> 00:26:52.912
In the near future, there are
some new features which make

00:26:52.912 --> 00:26:55.270
this slightly easier.

00:26:55.270 --> 00:26:56.990
In the CSS, there's the
image-set function.

00:26:56.990 --> 00:26:58.640
This is part of CSS 4.

00:26:58.640 --> 00:27:02.040
It's currently implemented in
Chrome and Safari and provide

00:27:02.040 --> 00:27:02.860
a [INAUDIBLE]

00:27:02.860 --> 00:27:06.570
list of several image URLs
wherever you [INAUDIBLE]

00:27:06.570 --> 00:27:07.910
a single one.

00:27:07.910 --> 00:27:11.310
And you annotate each one with a
device pixel ratio for which

00:27:11.310 --> 00:27:14.050
it is designed.

00:27:14.050 --> 00:27:14.560
This is cool.

00:27:14.560 --> 00:27:16.930
The browser will automatically
choose the most appropriate

00:27:16.930 --> 00:27:20.200
image based on the device's
device pixel ratio.

00:27:20.200 --> 00:27:23.220
And in future, browsers might
be even slightly cleverer.

00:27:23.220 --> 00:27:26.440
So a browser on a 2x device
might still choose to download

00:27:26.440 --> 00:27:29.890
the 1x image if it's on a very
poor bandwidth constrained

00:27:29.890 --> 00:27:31.740
connection.

00:27:31.740 --> 00:27:34.150
Another nice thing is the
browser will scale down the

00:27:34.150 --> 00:27:36.840
image to fit within the
same original size.

00:27:36.840 --> 00:27:40.253
So you don't need a separate
background size property as in

00:27:40.253 --> 00:27:41.503
the media queries approach.

00:27:46.430 --> 00:27:49.080
But other browsers will
ignore image-sets.

00:27:49.080 --> 00:27:50.390
They don't know about
it at the moment.

00:27:50.390 --> 00:27:52.465
So make sure to always provide
a fallback image

00:27:52.465 --> 00:27:54.780
like that top one.

00:27:54.780 --> 00:27:58.500
So there's an analogous thing
for HTML, the srcset attribute

00:27:58.500 --> 00:28:00.456
for the image element.

00:28:00.456 --> 00:28:01.900
This is still under
discussion.

00:28:01.900 --> 00:28:03.510
It's not really implemented
yet.

00:28:03.510 --> 00:28:05.120
But you can do the same thing.

00:28:05.120 --> 00:28:06.290
You provide a [INAUDIBLE]

00:28:06.290 --> 00:28:09.840
list of different files with
their device pixel ratio.

00:28:09.840 --> 00:28:11.390
There's an additional
feature--

00:28:11.390 --> 00:28:13.855
you can also provide width-based
break points, a

00:28:13.855 --> 00:28:16.250
bit like you get in
media queries.

00:28:16.250 --> 00:28:18.240
So you can serve different
images to mobile devices as to

00:28:18.240 --> 00:28:21.004
desktops and so on.

00:28:21.004 --> 00:28:24.680
So OK, we still have to do
resolution switching for

00:28:24.680 --> 00:28:29.090
fixed-width images, both
now and in the future.

00:28:29.090 --> 00:28:31.960
What about for flexible-width
images?

00:28:31.960 --> 00:28:33.520
So by a fixed-width image,
we mean something like

00:28:33.520 --> 00:28:34.840
a logo or an icon.

00:28:34.840 --> 00:28:37.860
It stays the same size in CSS
pixels on all devices.

00:28:37.860 --> 00:28:39.725
But a flexible-width image is
something which you say went

00:28:39.725 --> 00:28:43.990
to 100% and will actually scale
with the page size.

00:28:43.990 --> 00:28:46.270
Unfortunately, these are much
harder, and there are no good

00:28:46.270 --> 00:28:47.580
solutions today.

00:28:47.580 --> 00:28:50.890
But let's go through
them quickly.

00:28:50.890 --> 00:28:53.790
JavaScript image replacement
is quite popular.

00:28:53.790 --> 00:28:56.890
Typically, there'll be some
script that runs and replaces

00:28:56.890 --> 00:28:58.780
images at runtime based on the
screen [INAUDIBLE] width

00:28:58.780 --> 00:29:01.770
properties of the device.

00:29:01.770 --> 00:29:04.880
You have to be careful of this
because many of them don't

00:29:04.880 --> 00:29:07.570
load any images at all
until the [INAUDIBLE]

00:29:07.570 --> 00:29:09.620
loaded event of your page
or when you reach the

00:29:09.620 --> 00:29:12.140
bottom of your HTML.

00:29:12.140 --> 00:29:14.840
But by that point, about a third
of the content of your

00:29:14.840 --> 00:29:16.730
page is already downloaded.

00:29:16.730 --> 00:29:18.370
And so what this means is that
the images are going to start

00:29:18.370 --> 00:29:20.640
showing up really late.

00:29:20.640 --> 00:29:24.180
You can adjust image replacement
more efficiently

00:29:24.180 --> 00:29:28.730
if you embed the image [? SSE ?]
in your HTML

00:29:28.730 --> 00:29:30.890
pointing to a very low
resolution version of the

00:29:30.890 --> 00:29:34.710
image, which is always loaded,
and then users will get an

00:29:34.710 --> 00:29:35.690
instant feedback.

00:29:35.690 --> 00:29:37.170
They'll see an image.

00:29:37.170 --> 00:29:39.990
And later on, you replace it
with a high resolution image.

00:29:39.990 --> 00:29:41.670
So users don't have to wait,
but they still get the full

00:29:41.670 --> 00:29:43.080
quality eventually.

00:29:43.080 --> 00:29:45.710
And you do a double download,
but the first download is very

00:29:45.710 --> 00:29:48.470
small, because it's a low
resolution image.

00:29:48.470 --> 00:29:51.730
So it's not so bad.

00:29:51.730 --> 00:29:53.950
You can also switch between
images using lots of media

00:29:53.950 --> 00:29:56.040
queries if you combine
the width and

00:29:56.040 --> 00:29:57.870
resolution media queries.

00:29:57.870 --> 00:30:01.330
But this gets really complicated
really quickly.

00:30:01.330 --> 00:30:03.590
If you do this by hand, you're
going to get it wrong.

00:30:03.590 --> 00:30:05.780
You need like 10 different
lines duplicating

00:30:05.780 --> 00:30:07.360
images and so on.

00:30:07.360 --> 00:30:09.390
It's tricky.

00:30:09.390 --> 00:30:11.270
There are some server-side
solutions.

00:30:11.270 --> 00:30:14.530
You can sniff to use an agent
of the device, and based on

00:30:14.530 --> 00:30:16.710
that, serve an appropriate
image.

00:30:16.710 --> 00:30:20.150
The problem is Apple decided
that iOS devices should have

00:30:20.150 --> 00:30:25.460
the same user agent both for
retina and non-retina devices.

00:30:25.460 --> 00:30:27.560
So you can't actually
tell how many pixels

00:30:27.560 --> 00:30:30.830
need to serve them.

00:30:30.830 --> 00:30:34.290
Another server-side solution is
set cookies on the client,

00:30:34.290 --> 00:30:37.010
as the first thing in your
head or something.

00:30:37.010 --> 00:30:40.070
And then when the browser
requests images, it'll

00:30:40.070 --> 00:30:42.480
probably send those cookies,
and the server can use the

00:30:42.480 --> 00:30:45.475
cookie, while you're within the
screen width and height

00:30:45.475 --> 00:30:49.860
and so on, to serve an
appropriate image.

00:30:49.860 --> 00:30:52.620
This sort of works, but the
first few images might be

00:30:52.620 --> 00:30:55.500
requested without the cookie,
because browsers use a

00:30:55.500 --> 00:30:56.180
pre-load scanner.

00:30:56.180 --> 00:30:58.680
And so they'll start downloading
images before you

00:30:58.680 --> 00:31:01.460
actually run the JavaScript
to set the cookie.

00:31:01.460 --> 00:31:05.320
You can also set the base href
of your page such that any

00:31:05.320 --> 00:31:08.270
images with relative paths
will be downloaded from a

00:31:08.270 --> 00:31:09.800
particular directory.

00:31:09.800 --> 00:31:13.840
If that directory includes
a screen width and DPR,

00:31:13.840 --> 00:31:17.115
[INAUDIBLE] ratio, then the
server can similarly use URL

00:31:17.115 --> 00:31:18.970
rewriting to serve an
appropriate image for each

00:31:18.970 --> 00:31:21.430
type of device.

00:31:21.430 --> 00:31:24.280
So that's actually a reasonable
approach, but it's

00:31:24.280 --> 00:31:25.550
quite invasive.

00:31:25.550 --> 00:31:28.740
You have to modify your servers
so they understand

00:31:28.740 --> 00:31:30.840
things being open to different
directories.

00:31:30.840 --> 00:31:33.080
So it's not perfect,

00:31:33.080 --> 00:31:35.890
So what's coming up
in the future?

00:31:35.890 --> 00:31:38.190
I mentioned [INAUDIBLE] image
srcset attributes.

00:31:38.190 --> 00:31:40.350
There's also a picture element
that's being proposed as

00:31:40.350 --> 00:31:44.620
another way of specifying
different images to HTML.

00:31:44.620 --> 00:31:47.420
But with both of those, you get
the same problems you had

00:31:47.420 --> 00:31:49.820
with the media queries above
in that you get this

00:31:49.820 --> 00:31:52.470
complicated tangled mess of
width-based break points and

00:31:52.470 --> 00:31:54.480
resolution-based break points.

00:31:54.480 --> 00:31:56.115
And it's really hard to actually
serve the right

00:31:56.115 --> 00:31:59.066
images to the right devices.

00:31:59.066 --> 00:32:01.250
The Client Hint header
is interesting.

00:32:01.250 --> 00:32:04.390
It's a proposal that browsers
might in the future send the

00:32:04.390 --> 00:32:07.570
device pixel ratio and the
device width along with every

00:32:07.570 --> 00:32:09.700
HTTP request.

00:32:09.700 --> 00:32:11.250
This would allow servers
to serve the

00:32:11.250 --> 00:32:13.250
perfect image reliably--

00:32:13.250 --> 00:32:15.450
none of this user agent sniffing
or cookies or base

00:32:15.450 --> 00:32:17.550
href stuff.

00:32:17.550 --> 00:32:20.420
And my personal favorite choice
is using progressive

00:32:20.420 --> 00:32:25.250
image formats coupled with
smarter browsers.

00:32:25.250 --> 00:32:28.090
The idea is that when browsers
see a wide image, they would

00:32:28.090 --> 00:32:31.495
download enough bytes to
make that high quality.

00:32:31.495 --> 00:32:34.880
But If they see a narrow image
or they're on a narrow device,

00:32:34.880 --> 00:32:36.180
they would stop downloading
the rest of the

00:32:36.180 --> 00:32:38.350
image part way through.

00:32:38.350 --> 00:32:40.630
And so they would get enough
quality for the size it's

00:32:40.630 --> 00:32:43.160
actually being displayed at,
because they're never going to

00:32:43.160 --> 00:32:45.680
show it bigger.

00:32:45.680 --> 00:32:47.820
So that's under discussion, and
we'll see how that goes.

00:32:50.970 --> 00:32:52.050
PETE LEPAGE: Cool.

00:32:52.050 --> 00:32:55.450
Canvas images are another
interesting one.

00:32:55.450 --> 00:32:57.950
Drawing on a canvas effectively
is just a raster

00:32:57.950 --> 00:32:58.520
image, right?

00:32:58.520 --> 00:33:00.330
You're not doing anything
different.

00:33:00.330 --> 00:33:02.300
It's not a vector image
or anything like that.

00:33:02.300 --> 00:33:05.270
So if we want to draw on a
canvas image, we need to make

00:33:05.270 --> 00:33:09.360
sure that it's scaled
appropriately, that we've got

00:33:09.360 --> 00:33:11.390
the right number of pixels.

00:33:11.390 --> 00:33:15.510
So when we actually say, hey,
browser, give me a canvas, it

00:33:15.510 --> 00:33:18.180
creates this thing called
the backing store.

00:33:18.180 --> 00:33:21.890
And the backing store is what
actually stores the pixels and

00:33:21.890 --> 00:33:23.850
says, OK, this should be this.

00:33:23.850 --> 00:33:25.840
And this is where we want to
make sure that we've got the

00:33:25.840 --> 00:33:27.520
right size.

00:33:27.520 --> 00:33:30.990
So we want to make sure that
on a 2x display or 1.5x

00:33:30.990 --> 00:33:34.910
display, that we scale that
backing store to be the

00:33:34.910 --> 00:33:39.240
appropriate size so that our
images appear sharp.

00:33:39.240 --> 00:33:41.780
Now, there's a couple of times
when we might not want to

00:33:41.780 --> 00:33:44.410
scale our canvas
backing store.

00:33:44.410 --> 00:33:46.510
Think resource-constrained
devices--

00:33:46.510 --> 00:33:48.060
some phones, some tablets.

00:33:48.060 --> 00:33:51.600
We don't necessarily want to
go and scale those canvases

00:33:51.600 --> 00:33:55.710
bigger, because every single
canvas we could be using four

00:33:55.710 --> 00:33:58.020
times the memory that
we'd be normally

00:33:58.020 --> 00:34:00.200
using for a 1x canvas.

00:34:00.200 --> 00:34:03.000
So we want to be a little
bit careful with that.

00:34:03.000 --> 00:34:05.990
So in order to scale our canvas,
you'd think we could

00:34:05.990 --> 00:34:07.490
use something like
this, right?

00:34:07.490 --> 00:34:10.340
We could say, hey, here's our
canvas, and we're going to

00:34:10.340 --> 00:34:12.350
check our device pixel ratio.

00:34:12.350 --> 00:34:15.130
And if we want to scale it,
we're going to say, OK, if

00:34:15.130 --> 00:34:18.870
it's bigger than one, let's go
ahead and we'll change the CSS

00:34:18.870 --> 00:34:23.130
size and we'll set the CSS size
to its original size.

00:34:23.130 --> 00:34:27.520
And we'll set the canvas size to
be whenever that ratio is,

00:34:27.520 --> 00:34:29.530
and then we'll do a little
scale, right?

00:34:29.530 --> 00:34:31.760
That's going to work,
isn't it?

00:34:31.760 --> 00:34:34.710
Yeah, no.

00:34:34.710 --> 00:34:37.909
WebKit browsers introduced
this thing called the

00:34:37.909 --> 00:34:39.159
webkitBackingStorePixelRatio.

00:34:41.400 --> 00:34:43.610
Say that 10 times fast.

00:34:43.610 --> 00:34:47.360
And the
WebkitBackingStorePixelRatio

00:34:47.360 --> 00:34:53.100
always will return one, except
in Safari on the desktop on a

00:34:53.100 --> 00:34:56.284
Mac Pro Retina.

00:34:56.284 --> 00:34:59.990
So it's literally one case that
we need to deal with this

00:34:59.990 --> 00:35:04.590
on, where it returns two,
because it's a 2x display.

00:35:04.590 --> 00:35:06.690
They say, oh, hey, this
is a big device.

00:35:06.690 --> 00:35:08.450
We should be able
to automatically

00:35:08.450 --> 00:35:09.780
scale it for you.

00:35:09.780 --> 00:35:11.430
So they scale it for us.

00:35:11.430 --> 00:35:13.990
So we just want to double check
what that value is so

00:35:13.990 --> 00:35:16.890
that we don't have to
go scale it again.

00:35:16.890 --> 00:35:19.240
Because we don't want to
necessarily scale it to four

00:35:19.240 --> 00:35:22.630
times as big and use four
times as much memory.

00:35:22.630 --> 00:35:26.520
Now, the good thing here is that
Apple just checked in a

00:35:26.520 --> 00:35:28.300
change a couple of weeks ago--

00:35:28.300 --> 00:35:30.750
in fact, just at the
end of April--

00:35:30.750 --> 00:35:32.490
that changes this behavior.

00:35:32.490 --> 00:35:37.530
So we won't have to deal with
this in the near future.

00:35:37.530 --> 00:35:42.060
But for now, this is something
that we need to check.

00:35:42.060 --> 00:35:44.550
So there's one last thing I want
to cover before we start

00:35:44.550 --> 00:35:46.260
to wrap up a little bit.

00:35:46.260 --> 00:35:49.070
And that's just making sure that
you serve high res icon

00:35:49.070 --> 00:35:53.060
files on all of your websites.

00:35:53.060 --> 00:35:55.350
All of you have been probably
playing on your Pixels, and

00:35:55.350 --> 00:35:58.465
you've noticed some of those
icon files look like--

00:35:58.465 --> 00:36:00.970
yeah, it's not pretty, right?

00:36:00.970 --> 00:36:04.230
So making sure that in your ICO
file, the multi-resolution

00:36:04.230 --> 00:36:09.400
file, you've got a 32 pixel by
32 pixel and a 16 by 16 pixel.

00:36:09.400 --> 00:36:11.900
And if you're serving up PNG,
you want to make sure that

00:36:11.900 --> 00:36:15.500
you're serving a 32
pixel as well.

00:36:15.500 --> 00:36:22.200
So John and I went through and
spent a lot of time as we were

00:36:22.200 --> 00:36:22.910
preparing for this.

00:36:22.910 --> 00:36:26.330
We realized that there were
really seven things.

00:36:26.330 --> 00:36:30.515
You can boil this whole talk
down to seven main points.

00:36:30.515 --> 00:36:31.670
JOHN MELLOR: Mmhmm.

00:36:31.670 --> 00:36:34.200
So yes, if you set
width=device-width on your

00:36:34.200 --> 00:36:37.470
viewports, your CSS pixels will
initially be the same

00:36:37.470 --> 00:36:40.670
size as your DIPs, your Device
Independent Pixels.

00:36:40.670 --> 00:36:43.620
And so you won't have to worry
about the two kinds of pixels

00:36:43.620 --> 00:36:44.230
until you zoom in.

00:36:44.230 --> 00:36:46.660
But even then, you don't need
to care about that too much.

00:36:46.660 --> 00:36:48.420
So life will be easier.

00:36:48.420 --> 00:36:52.350
If instead you set no viewports
at all, or you try

00:36:52.350 --> 00:36:54.766
to set a fixed-width viewport or
something, you're going to

00:36:54.766 --> 00:36:56.060
be in a world of hurt.

00:36:56.060 --> 00:36:57.930
Your fonts are going to
get scaled weirdly.

00:36:57.930 --> 00:36:58.900
Your site may get
scaled weirdly.

00:36:58.900 --> 00:37:00.716
Your zoom's going to
be a bit weird.

00:37:00.716 --> 00:37:02.490
Yeah, try and stick to
width=device-width

00:37:02.490 --> 00:37:03.740
whenever you can.

00:37:07.330 --> 00:37:10.140
PETE LEPAGE: I'm going
to show you two.

00:37:10.140 --> 00:37:15.550
That device pixel ratio varies
anywhere from 1.3 up to 3.

00:37:15.550 --> 00:37:18.100
Somebody's probably before
4 at some point.

00:37:18.100 --> 00:37:20.050
John laughs at me when I say
somebody's probably going to

00:37:20.050 --> 00:37:22.720
do 5 or 7 or 10, because
somebody's just got to

00:37:22.720 --> 00:37:24.310
outclass somebody else,
but it's true.

00:37:27.590 --> 00:37:28.890
JOHN MELLOR: So whenever
possible, use

00:37:28.890 --> 00:37:30.360
vector image formats.

00:37:30.360 --> 00:37:33.495
They'll automatically scale and
rendered more crisply on

00:37:33.495 --> 00:37:35.755
the high DPI devices using
the appropriate pixels.

00:37:38.640 --> 00:37:40.830
PETE LEPAGE: Use the media
queries whenever you can.

00:37:40.830 --> 00:37:44.200
It's a real easy way to specify

00:37:44.200 --> 00:37:46.886
the appropriate images.

00:37:46.886 --> 00:37:49.590
JOHN MELLOR: For images in your
HTML, it's a reasonable

00:37:49.590 --> 00:37:53.520
option to serve highly
compressed 2x images and not

00:37:53.520 --> 00:37:57.730
worry about serving different
images to different devices.

00:37:57.730 --> 00:37:59.860
PETE LEPAGE: And finally for
canvas, just beware of that

00:37:59.860 --> 00:38:02.390
webkitBackingStorePixelRatio.

00:38:02.390 --> 00:38:04.880
You don't want to end up scaling
stuff multiple times

00:38:04.880 --> 00:38:07.010
and going from there.

00:38:07.010 --> 00:38:10.870
Now, the other thing that we
wanted to mention was that the

00:38:10.870 --> 00:38:14.050
I/O organizers were like, you
must have a call to action at

00:38:14.050 --> 00:38:14.910
the end of every session.

00:38:14.910 --> 00:38:16.470
They were sort of adamant
about it.

00:38:16.470 --> 00:38:18.860
Well, ours is really simple.

00:38:18.860 --> 00:38:20.460
Go build beautiful.

00:38:20.460 --> 00:38:23.280
Go make the web look
pretty, please.

00:38:23.280 --> 00:38:24.660
You guys all have Pixels.

00:38:24.660 --> 00:38:27.010
You all have friends with
high DPI displays.

00:38:27.010 --> 00:38:30.480
Just go make the
web look nice.

00:38:30.480 --> 00:38:35.120
So with that, I want to say
thank you guys very much.

00:38:35.120 --> 00:38:36.020
JOHN MELLOR: Thank you all.

00:38:36.020 --> 00:38:37.990
PETE LEPAGE: Our slides
are linked up there.

00:38:37.990 --> 00:38:41.290
John and I are going to head up
to the Four Questions Bar,

00:38:41.290 --> 00:38:43.230
and like good bartenders,
we're going

00:38:43.230 --> 00:38:44.840
to answer your questions.

00:38:44.840 --> 00:38:47.430
Sadly, we're not going to be
that good bartenders and won't

00:38:47.430 --> 00:38:48.220
be serving you booze.

00:38:48.220 --> 00:38:49.430
That was last night.

00:38:49.430 --> 00:38:52.230
But we'll do our best to answer
all your questions and

00:38:52.230 --> 00:38:54.200
provide anything else
that we can for you.

00:38:54.200 --> 00:38:55.340
So thanks everybody.

00:38:55.340 --> 00:38:58.342
[APPLAUSE]

