WEBVTT
Kind: captions
Language: en

00:00:06.530 --> 00:00:09.070
ALI AFSHAR: Everyone, my name
is Ali, and this is Ivan.

00:00:09.070 --> 00:00:10.720
And today we're going to be
talking to you about the

00:00:10.720 --> 00:00:14.600
Google Drive API, the new
Google Drive API.

00:00:14.600 --> 00:00:18.420
It was launched at I/O, and
we're going to take you right

00:00:18.420 --> 00:00:20.410
down under the water to see all
the beautiful things we

00:00:20.410 --> 00:00:23.620
can find in this API.

00:00:23.620 --> 00:00:27.630
So this year we launched
Google Drive.

00:00:27.630 --> 00:00:30.370
Very proud of that.

00:00:30.370 --> 00:00:33.770
And with Google Drive, which is
our cloud storage solution,

00:00:33.770 --> 00:00:36.220
allows you to store files in
a safe place, allows you to

00:00:36.220 --> 00:00:39.530
access them anywhere, and
brings to you the

00:00:39.530 --> 00:00:42.000
collaborative features of Google
Docs, so you can use

00:00:42.000 --> 00:00:44.180
them on your files
in Google Drive.

00:00:44.180 --> 00:00:48.400
And with that, we launched
the Google Drive SDK.

00:00:48.400 --> 00:00:52.890
This SDK allows you to put your
application in front of

00:00:52.890 --> 00:00:54.430
all of our users.

00:00:54.430 --> 00:00:56.450
So if they like your
application, they can install

00:00:56.450 --> 00:00:58.820
it, they can use it
in Google Drive.

00:00:58.820 --> 00:01:02.120
And that very much enhances our
product, but at the same

00:01:02.120 --> 00:01:04.019
time allows you to put
your product in front

00:01:04.019 --> 00:01:05.470
of all these people.

00:01:05.470 --> 00:01:08.610
The other part of this is we've
tried to make this API

00:01:08.610 --> 00:01:12.770
as easy to use as possible, as
effortless to use as possible.

00:01:12.770 --> 00:01:16.460
So you get all the features of
Google Drive, but you get them

00:01:16.460 --> 00:01:20.600
programmatically, and you can
use them in your applications.

00:01:20.600 --> 00:01:22.130
So what is the API?

00:01:22.130 --> 00:01:24.700
How does the API relate
to the SDK?

00:01:24.700 --> 00:01:28.020
The API is part of the SDK that
is responsible for making

00:01:28.020 --> 00:01:30.760
programmatic calls against
Google Drive.

00:01:30.760 --> 00:01:33.600
The other bits are little user
interface snippets and that

00:01:33.600 --> 00:01:34.050
kind of thing.

00:01:34.050 --> 00:01:36.780
You may have heard of them in
the other talks we've had.

00:01:36.780 --> 00:01:39.960
So programmatically manage
a user's Google Drive.

00:01:39.960 --> 00:01:43.780
Whatever you can do with Google
Drive, you can do with

00:01:43.780 --> 00:01:45.060
the Google Drive API.

00:01:45.060 --> 00:01:46.320
We're going to talk a
few of those things.

00:01:46.320 --> 00:01:49.250
Well, the first one is
uploading files.

00:01:49.250 --> 00:01:50.270
That's the main use case.

00:01:50.270 --> 00:01:51.360
Of course, you have
to get your files

00:01:51.360 --> 00:01:54.360
somehow into Google Drive.

00:01:54.360 --> 00:01:57.150
We allow you to organize your
files into folders.

00:01:57.150 --> 00:01:59.180
Again, you can do that in Drive,
but you can do that

00:01:59.180 --> 00:02:01.300
programmatically
using the API.

00:02:01.300 --> 00:02:03.430
You can search for files.

00:02:03.430 --> 00:02:06.220
All the powerful search features
of Google Drive come

00:02:06.220 --> 00:02:08.449
to you from the API.

00:02:08.449 --> 00:02:10.020
Once your files are
in, you should be

00:02:10.020 --> 00:02:11.590
able to download them.

00:02:11.590 --> 00:02:13.400
We give you a list of changes.

00:02:13.400 --> 00:02:16.340
That means a sequential list
of all the things that have

00:02:16.340 --> 00:02:20.220
changed in a user's
Google Drive.

00:02:20.220 --> 00:02:21.700
There is a revision history.

00:02:21.700 --> 00:02:25.660
So much like a version control
system, we allow you to manage

00:02:25.660 --> 00:02:27.840
these revisions
programmatically.

00:02:27.840 --> 00:02:29.730
There is full sharing support.

00:02:29.730 --> 00:02:32.440
One of our favorite features,
sharing and collaboration.

00:02:32.440 --> 00:02:35.260
You can perform all of this
sharing programmatically on

00:02:35.260 --> 00:02:37.920
behalf of a user.

00:02:37.920 --> 00:02:41.350
We have some user information
bits that we think that's very

00:02:41.350 --> 00:02:44.030
useful for applications that
want to personalize

00:02:44.030 --> 00:02:45.290
themselves.

00:02:45.290 --> 00:02:47.860
For example, displaying an image
of the user in the top

00:02:47.860 --> 00:02:49.650
right hand corner, or displaying
their email

00:02:49.650 --> 00:02:54.160
address, just so the user
knows exactly that your

00:02:54.160 --> 00:02:56.380
application knows
who they are.

00:02:56.380 --> 00:02:58.960
And then we've got these two
really cool features of

00:02:58.960 --> 00:03:01.990
processing files when
you upload them.

00:03:01.990 --> 00:03:03.910
And they are OCR and
translation.

00:03:03.910 --> 00:03:06.000
Now, OCR is optical character
recognition--

00:03:06.000 --> 00:03:07.490
I'm sure you all know--

00:03:07.490 --> 00:03:12.200
and that allows us to extract
text from non-textual files.

00:03:12.200 --> 00:03:14.520
So if you have a PDF, you have
an image that has textual

00:03:14.520 --> 00:03:18.240
content, that can be extracted
by the API when you upload or

00:03:18.240 --> 00:03:19.530
update files.

00:03:19.530 --> 00:03:20.720
Similarly, translation.

00:03:20.720 --> 00:03:22.230
That's human language
translation.

00:03:22.230 --> 00:03:24.690
If you have a document in French
and you'd like it to

00:03:24.690 --> 00:03:27.440
appear in your drive translated
into English or any

00:03:27.440 --> 00:03:30.590
other language, you specify the
query parameters and that

00:03:30.590 --> 00:03:31.050
happens there.

00:03:31.050 --> 00:03:35.530
So you can see here that this
is a very large feature set

00:03:35.530 --> 00:03:36.580
for an API.

00:03:36.580 --> 00:03:40.210
There's a lot of,
lot of things.

00:03:40.210 --> 00:03:44.550
Important for me to tell you now
is that your integrations

00:03:44.550 --> 00:03:47.190
with the API can be small
integrations--

00:03:47.190 --> 00:03:48.720
you can just have a
bit of sharing--

00:03:48.720 --> 00:03:50.560
or they can be large
integrations--

00:03:50.560 --> 00:03:53.740
you can have uploads, downloads,
file management.

00:03:53.740 --> 00:03:58.300
It really depends on your
type of application.

00:03:58.300 --> 00:04:00.250
Some applications are more
suited than others.

00:04:00.250 --> 00:04:02.600
But really, any application
that involves

00:04:02.600 --> 00:04:04.090
files of some kind.

00:04:04.090 --> 00:04:05.830
They don't even have
to be actual files.

00:04:05.830 --> 00:04:09.510
Something that looks like a file
is a good fit to have a

00:04:09.510 --> 00:04:10.860
Google Drive API integration.

00:04:13.720 --> 00:04:16.320
Some of you have used the
Documents List API--

00:04:16.320 --> 00:04:18.360
one of the three previous
versions.

00:04:18.360 --> 00:04:21.300
And really, the Drive API
aims to replace the

00:04:21.300 --> 00:04:22.765
Documents List API.

00:04:22.765 --> 00:04:25.620
It should provide all
the functionality.

00:04:25.620 --> 00:04:29.330
The point about this is the
Documents List API is

00:04:29.330 --> 00:04:31.910
something that's been around
for a long time, and it's a

00:04:31.910 --> 00:04:34.340
mature, well-tested
piece of software.

00:04:34.340 --> 00:04:36.250
A lot of people use it.

00:04:36.250 --> 00:04:39.150
So we've really taken this
infrastructure, and we've

00:04:39.150 --> 00:04:40.380
upgraded it.

00:04:40.380 --> 00:04:42.360
We tried to make it
easier to use.

00:04:42.360 --> 00:04:45.500
And part of that is by using the
latest and greatest Google

00:04:45.500 --> 00:04:48.340
API technologies which gives
you really good client

00:04:48.340 --> 00:04:50.640
libraries, which gives
you really excellent

00:04:50.640 --> 00:04:52.830
documentation.

00:04:52.830 --> 00:04:56.280
And the final thing we've done
is we've tried to improve some

00:04:56.280 --> 00:04:58.600
of the things we didn't
really like about the

00:04:58.600 --> 00:04:59.710
Documents List API.

00:04:59.710 --> 00:05:02.650
And one of them is the security
scoping model, which

00:05:02.650 --> 00:05:03.760
I'll talk about now.

00:05:03.760 --> 00:05:08.740
In the Documents List API, the
user used to have to grant

00:05:08.740 --> 00:05:12.150
access to their complete
drive.

00:05:12.150 --> 00:05:15.060
So you couldn't just say, I
want this application to

00:05:15.060 --> 00:05:18.310
access just this type of file
or just these few files.

00:05:18.310 --> 00:05:19.640
You'd have to give access
to everything.

00:05:19.640 --> 00:05:21.370
Now that can be a bit
of a nightmare.

00:05:21.370 --> 00:05:25.480
Users traditionally don't really
read those warnings

00:05:25.480 --> 00:05:27.670
when they say they're about
to access the whole drive.

00:05:27.670 --> 00:05:29.750
But people who do
care are domain

00:05:29.750 --> 00:05:31.280
administrators, for example.

00:05:31.280 --> 00:05:34.940
You don't want corporate
documents to be in the hand of

00:05:34.940 --> 00:05:36.660
third party applications
if you can help it.

00:05:36.660 --> 00:05:38.950
You can have private
applications and private

00:05:38.950 --> 00:05:41.110
documents in your drive-- for
example, tax returns, that

00:05:41.110 --> 00:05:43.640
kind of thing-- that you don't
want people to have.

00:05:43.640 --> 00:05:47.410
And so for that reason, we've
added different scoping levels

00:05:47.410 --> 00:05:49.590
to try and improve this.

00:05:49.590 --> 00:05:52.620
Of course, we still provide the
full scope, which allows

00:05:52.620 --> 00:05:54.510
an application to have full
access to your drive.

00:05:54.510 --> 00:05:56.700
This is very useful for
some use cases.

00:05:56.700 --> 00:05:59.640
For example, if you want to
back up an entire user's

00:05:59.640 --> 00:06:00.730
drive, you need that.

00:06:00.730 --> 00:06:02.890
But we've added these
other scopes.

00:06:02.890 --> 00:06:05.310
Two read-only scopes, one which
allows downloading and

00:06:05.310 --> 00:06:07.330
one which doesn't allow
downloading.

00:06:07.330 --> 00:06:11.050
And then what we call the per
app per file scope that is

00:06:11.050 --> 00:06:13.800
very unique to this API.

00:06:13.800 --> 00:06:18.000
This scope allows an application
to access only

00:06:18.000 --> 00:06:21.140
files that have been
specifically and explicitly

00:06:21.140 --> 00:06:23.410
allowed by the user.

00:06:23.410 --> 00:06:26.140
So if a user says, I want your
application to access just

00:06:26.140 --> 00:06:29.870
this file, your application will
access it, but will not

00:06:29.870 --> 00:06:31.850
be able to access other files.

00:06:31.850 --> 00:06:34.710
And we think this is very,
very unique and a great

00:06:34.710 --> 00:06:37.430
feature, because it means you
don't have to provide access

00:06:37.430 --> 00:06:38.650
to your whole drive.

00:06:38.650 --> 00:06:40.660
And lastly, we have the
anonymous scope, and that is

00:06:40.660 --> 00:06:42.170
the scope you get given
if you're not a

00:06:42.170 --> 00:06:43.720
logged-in user at the time.

00:06:43.720 --> 00:06:47.760
Useful for things like
public sharing.

00:06:47.760 --> 00:06:49.200
What is the API itself?

00:06:49.200 --> 00:06:51.600
Well, it's a standard
web-based API.

00:06:51.600 --> 00:06:56.560
We use JSON, we use HTTPS, and
OAuth 2.0 is the recommended

00:06:56.560 --> 00:06:58.110
authorization method.

00:06:58.110 --> 00:06:59.030
What does that mean?

00:06:59.030 --> 00:07:02.400
Well, really it means you can
use almost whatever you like

00:07:02.400 --> 00:07:03.710
to access the API.

00:07:03.710 --> 00:07:07.040
Any programming language that
can make HTTPS calls, any

00:07:07.040 --> 00:07:09.880
programming language that can
pass JSON, you can use.

00:07:09.880 --> 00:07:11.780
But of course, we would
recommend you use one of our

00:07:11.780 --> 00:07:16.170
client libraries, and we have
a number, and they're there.

00:07:16.170 --> 00:07:18.520
There are others as well.

00:07:18.520 --> 00:07:21.720
If your favorite language isn't
on there, I recommend

00:07:21.720 --> 00:07:24.840
you write your own API client
and get back to us, because

00:07:24.840 --> 00:07:29.120
it's really much more fun than
making direct HTTP calls.

00:07:29.120 --> 00:07:30.860
So what is the data model?

00:07:30.860 --> 00:07:34.920
Well, Google Drive obviously
is based around files.

00:07:34.920 --> 00:07:37.880
And when I say it's based around
files, everything in

00:07:37.880 --> 00:07:40.450
Google Drive is a file.

00:07:40.450 --> 00:07:42.110
We've already spoken
about folders.

00:07:42.110 --> 00:07:44.860
But, in fact, folders
are files too.

00:07:44.860 --> 00:07:45.880
How does that work?

00:07:45.880 --> 00:07:49.610
Well, folders have a specific
MIME type, and that's the MIME

00:07:49.610 --> 00:07:54.130
type we look at to see is
this a file or a folder.

00:07:54.130 --> 00:07:55.590
This is really nice--

00:07:55.590 --> 00:07:58.670
we think this is really nice--
because it allows you to write

00:07:58.670 --> 00:08:01.510
one code path to handle
files and folders.

00:08:01.510 --> 00:08:02.910
Because they're mostly
the same thing.

00:08:02.910 --> 00:08:03.560
They have titles.

00:08:03.560 --> 00:08:04.640
They have descriptions.

00:08:04.640 --> 00:08:06.380
And we'll see exactly
how they look.

00:08:06.380 --> 00:08:09.900
But it means you don't really
have to special case folders,

00:08:09.900 --> 00:08:11.810
which we think is
really useful.

00:08:11.810 --> 00:08:13.270
So what is in a file?

00:08:13.270 --> 00:08:16.000
Well, a file has
two components.

00:08:16.000 --> 00:08:17.870
All files have metadata.

00:08:17.870 --> 00:08:21.380
Now, the metadata for a file
involves its title, its

00:08:21.380 --> 00:08:23.980
description, the MIME
type, those kind of

00:08:23.980 --> 00:08:24.710
things that are tagged.

00:08:24.710 --> 00:08:26.480
And we'll see how that looks.

00:08:26.480 --> 00:08:29.850
Some files have binary data.

00:08:29.850 --> 00:08:33.740
Now the astute people in the
audience will know an example

00:08:33.740 --> 00:08:35.780
of a file that has no binary
data, and that is

00:08:35.780 --> 00:08:38.120
a folder, of course.

00:08:38.120 --> 00:08:40.390
Folders don't have any binary
data associated with them.

00:08:40.390 --> 00:08:42.659
But most files do.

00:08:42.659 --> 00:08:45.330
So you have an image, it has
the title, the description,

00:08:45.330 --> 00:08:46.020
those kind of things.

00:08:46.020 --> 00:08:47.310
And then there's
the binary data

00:08:47.310 --> 00:08:49.900
associated with that image.

00:08:49.900 --> 00:08:52.370
Other kinds of file that don't
have binary data, of course,

00:08:52.370 --> 00:08:55.610
are the Google Docs types of
files that are actually more

00:08:55.610 --> 00:08:57.430
like a shortcut.

00:08:57.430 --> 00:09:01.880
This entire hierarchy is built
up into the top level folder,

00:09:01.880 --> 00:09:04.080
which we call the root folder.

00:09:04.080 --> 00:09:06.070
And that has an alias
that you can access.

00:09:06.070 --> 00:09:09.120
But again, that is just
a file as well.

00:09:09.120 --> 00:09:11.190
It's slightly special,
but it's just a file.

00:09:11.190 --> 00:09:15.220
So you have drive, root folder,
folders amongst that,

00:09:15.220 --> 00:09:18.180
and then files underneath
those.

00:09:18.180 --> 00:09:19.790
What does a file actually
look like?

00:09:19.790 --> 00:09:22.190
Well, this is the representation
that comes back

00:09:22.190 --> 00:09:24.240
to you when you make
API calls.

00:09:24.240 --> 00:09:26.800
And I just want to point out
a couple of fields here.

00:09:26.800 --> 00:09:29.260
The first one is the ID.

00:09:29.260 --> 00:09:34.190
That is a consistent ID that
will be the ID of that file

00:09:34.190 --> 00:09:35.970
for the lifetime of that file.

00:09:35.970 --> 00:09:38.490
So you can store that in your
database, and you can use it

00:09:38.490 --> 00:09:40.590
to fetch the file
at a later date.

00:09:40.590 --> 00:09:42.620
Other important things.

00:09:42.620 --> 00:09:45.220
There is the title, the
MIME type as I said.

00:09:45.220 --> 00:09:46.905
If you look there, that
is the MIME type for

00:09:46.905 --> 00:09:48.130
a spreadsheet file.

00:09:48.130 --> 00:09:50.060
And there are other things,
labels, which are Boolean

00:09:50.060 --> 00:09:53.250
attributes, for example,
trashed or hidden.

00:09:53.250 --> 00:09:54.610
And then there's some dates--

00:09:54.610 --> 00:09:55.760
which can be useful--

00:09:55.760 --> 00:09:59.200
some links, some permission
information,

00:09:59.200 --> 00:10:00.340
and other stuff there.

00:10:00.340 --> 00:10:01.980
I've snipped out quite
a bit of stuff.

00:10:01.980 --> 00:10:05.090
But if you've used any JSON API,
this is the kind of thing

00:10:05.090 --> 00:10:06.110
you can expect.

00:10:06.110 --> 00:10:07.570
The important one, the ID.

00:10:07.570 --> 00:10:11.630
Remember, you can store that
and use it at a later date.

00:10:11.630 --> 00:10:13.320
So great, you've seen
a bunch of JSON.

00:10:13.320 --> 00:10:14.940
But why does it matter to you?

00:10:14.940 --> 00:10:16.580
Well, we've thought
of a use case.

00:10:16.580 --> 00:10:20.240
As I've said before, you can
use this API a lot in your

00:10:20.240 --> 00:10:22.280
application, or you can use
it a little bit in your

00:10:22.280 --> 00:10:23.040
application.

00:10:23.040 --> 00:10:25.590
And we wanted an application
that used it a lot.

00:10:25.590 --> 00:10:28.140
And if you can imagine a photo
album application.

00:10:28.140 --> 00:10:30.400
So you have a bunch of photos,
and you want to store them in

00:10:30.400 --> 00:10:32.480
your Google Drive, and you want
an application to be able

00:10:32.480 --> 00:10:35.740
to manage these.

00:10:35.740 --> 00:10:38.710
Conveniently, the feature set
that's required by this

00:10:38.710 --> 00:10:40.960
application is the exact
feature set that

00:10:40.960 --> 00:10:41.800
Google Drive has.

00:10:41.800 --> 00:10:43.920
You want to upload the images,
you want to download them, you

00:10:43.920 --> 00:10:45.870
want to organize them, you want
to be able to search for

00:10:45.870 --> 00:10:47.450
them, you want to be
able to share them.

00:10:47.450 --> 00:10:50.530
And we're going to go through
each of these in detail, and

00:10:50.530 --> 00:10:51.910
Ivan's going to show
you how to do them.

00:10:54.600 --> 00:10:56.550
But before we start,
Ivan, I just want

00:10:56.550 --> 00:10:57.930
to ask you a question.

00:10:57.930 --> 00:11:02.320
Why do spicy peppers like
uploads so much?

00:11:02.320 --> 00:11:03.410
IVAN LEE: I have no idea.

00:11:03.410 --> 00:11:03.995
ALI AFSHAR: No idea?

00:11:03.995 --> 00:11:05.950
You want to try?

00:11:05.950 --> 00:11:06.660
IVAN LEE: Completely blank.

00:11:06.660 --> 00:11:07.160
ALI AFSHAR: Really?

00:11:07.160 --> 00:11:08.170
Nothing?

00:11:08.170 --> 00:11:09.870
So they can get jalapeno
drive.

00:11:13.080 --> 00:11:13.280
No?

00:11:13.280 --> 00:11:13.940
IVAN LEE: I don't get it.

00:11:13.940 --> 00:11:15.210
Sorry.

00:11:15.210 --> 00:11:17.000
ALI AFSHAR: Hell up
in your drive?

00:11:17.000 --> 00:11:17.623
Jalapeno--

00:11:17.623 --> 00:11:18.550
IVAN LEE: I--

00:11:18.550 --> 00:11:19.120
ALI AFSHAR: Tough crowd.

00:11:19.120 --> 00:11:21.140
Let's talk about uploads.

00:11:21.140 --> 00:11:23.010
There are three types
of ways of uploading

00:11:23.010 --> 00:11:23.980
files to Google Drive.

00:11:23.980 --> 00:11:27.000
We provide these three different
mechanisms for

00:11:27.000 --> 00:11:29.150
different use cases.

00:11:29.150 --> 00:11:32.020
Fortunately, the client
libraries handle all of it for

00:11:32.020 --> 00:11:33.050
you, all of the logic for you.

00:11:33.050 --> 00:11:34.660
So really, it's just a
matter of specifying

00:11:34.660 --> 00:11:35.730
which type you want.

00:11:35.730 --> 00:11:38.420
But it's worth knowing what they
are and how they work, so

00:11:38.420 --> 00:11:42.470
you can choose the appropriate
one for yourself.

00:11:42.470 --> 00:11:45.860
Every time you upload a file
to Google Drive, you can

00:11:45.860 --> 00:11:48.240
specify what kind of
processing you

00:11:48.240 --> 00:11:48.730
would like on it.

00:11:48.730 --> 00:11:51.310
And I've mentioned OCR.

00:11:51.310 --> 00:11:55.180
You just add these parameters,
and your file will be OCR'd.

00:11:55.180 --> 00:11:56.830
Again, converting
to Google Docs.

00:11:56.830 --> 00:12:00.195
Now people who have used the
Documents List API know that

00:12:00.195 --> 00:12:02.930
this is a place where
we've moved away.

00:12:02.930 --> 00:12:05.840
The previous default for
Documents List API was

00:12:05.840 --> 00:12:07.030
convert=true.

00:12:07.030 --> 00:12:09.360
Now we don't convert
files unless you

00:12:09.360 --> 00:12:10.990
explicitly ask us to do.

00:12:10.990 --> 00:12:11.670
And the third one is

00:12:11.670 --> 00:12:13.290
translation, which I've mentioned.

00:12:13.290 --> 00:12:16.270
So adding these parameters
would translate a French

00:12:16.270 --> 00:12:18.100
document to an English
document.

00:12:20.740 --> 00:12:23.820
The next bit of processing we
do always on files that are

00:12:23.820 --> 00:12:26.760
uploaded that they can be is
Google Goggles Integration.

00:12:26.760 --> 00:12:30.310
Now those of you who have used
Google Goggles know that it's

00:12:30.310 --> 00:12:31.320
pretty amazing.

00:12:31.320 --> 00:12:33.020
I love it because it's something
I always show my

00:12:33.020 --> 00:12:37.860
family, and they get to realize
how amazing Google is.

00:12:37.860 --> 00:12:38.640
Here's an example.

00:12:38.640 --> 00:12:42.370
This is actually a photo that
Ivan took while he was on a--

00:12:42.370 --> 00:12:44.180
working holiday?

00:12:44.180 --> 00:12:45.440
Working holiday?

00:12:45.440 --> 00:12:46.390
Working holiday in Australia.

00:12:46.390 --> 00:12:48.050
We'll call it that.

00:12:48.050 --> 00:12:49.050
Now, he took that photo.

00:12:49.050 --> 00:12:52.140
Now, when that's uploaded to
Google Drive you may recognize

00:12:52.140 --> 00:12:55.390
it, this rock formation.

00:12:55.390 --> 00:12:58.500
When that's uploaded to Google
Drive, that is indexed by the

00:12:58.500 --> 00:13:02.440
Google Goggles back-end, and
we know what that is.

00:13:02.440 --> 00:13:04.850
So if you search Google Drive--
and again, if you

00:13:04.850 --> 00:13:07.130
search using the API--

00:13:07.130 --> 00:13:09.520
searching for any of these three
terms, whether it be

00:13:09.520 --> 00:13:14.470
Three Sisters, Katoomba, or
Australia, will show this

00:13:14.470 --> 00:13:17.300
image in the search results.

00:13:17.300 --> 00:13:18.900
Now, we think that's pretty
cool because there's no

00:13:18.900 --> 00:13:21.090
metadata, there's no file name,
it doesn't use that.

00:13:21.090 --> 00:13:22.810
It actually uses the
image itself.

00:13:22.810 --> 00:13:27.040
And this is a feature you get
for free with the Drive API.

00:13:27.040 --> 00:13:29.170
So back to uploads.

00:13:29.170 --> 00:13:30.930
The first type is the
simple upload.

00:13:30.930 --> 00:13:34.540
Now, a simple upload is where
you would just want to upload

00:13:34.540 --> 00:13:36.760
a single file.

00:13:36.760 --> 00:13:38.240
And you see there are
some limits there.

00:13:38.240 --> 00:13:40.670
The first one is you have a
two megabyte size limit.

00:13:40.670 --> 00:13:43.130
Now, that's pretty good for
small files, but there aren't

00:13:43.130 --> 00:13:45.750
really any images these days
that you take with your camera

00:13:45.750 --> 00:13:47.450
that can fit in two megabytes.

00:13:47.450 --> 00:13:52.090
The other limitation is that
you can't specify metadata.

00:13:52.090 --> 00:13:52.890
Why is it simple?

00:13:52.890 --> 00:13:56.170
Well, it's just a post request
with the correct content type,

00:13:56.170 --> 00:13:57.730
and you send the binary data.

00:13:57.730 --> 00:14:00.190
The differentiator here
is you setting

00:14:00.190 --> 00:14:02.050
the upload type parameter.

00:14:02.050 --> 00:14:04.520
And when the upload type
parameter is set to media,

00:14:04.520 --> 00:14:06.900
then we know that that's
a simple upload.

00:14:06.900 --> 00:14:09.540
And you'll see this upload
type parameter is how the

00:14:09.540 --> 00:14:13.240
client libraries choose
how to do the upload.

00:14:13.240 --> 00:14:16.500
So you get a 201 Created
response, and an echo of the

00:14:16.500 --> 00:14:18.660
data you sent.

00:14:18.660 --> 00:14:20.630
So that's fine if you don't need
metadata, and you have

00:14:20.630 --> 00:14:22.170
files less than two megabytes.

00:14:22.170 --> 00:14:26.100
If you have bigger files, you
can use the multipart upload.

00:14:26.100 --> 00:14:30.190
Now that is a MIME multipart
request, this time with the

00:14:30.190 --> 00:14:32.590
upload type set to multipart.

00:14:32.590 --> 00:14:36.010
And you send, in the first part
of the multipart, you

00:14:36.010 --> 00:14:37.960
send the JSON--

00:14:37.960 --> 00:14:41.730
in this case, title, "Funny
Photo." That's the metadata,

00:14:41.730 --> 00:14:43.740
you can put any metadata
you want.

00:14:43.740 --> 00:14:47.070
And in the second part, you
send the binary data.

00:14:47.070 --> 00:14:48.820
So this is great.

00:14:48.820 --> 00:14:52.770
The file size limit is 10
gigabytes, so you can really

00:14:52.770 --> 00:14:54.570
send as much as you like
there, and whatever

00:14:54.570 --> 00:14:55.740
metadata you want.

00:14:55.740 --> 00:14:58.990
There is one major problem here,
and that is what do we

00:14:58.990 --> 00:15:00.710
do in the case of failure?

00:15:00.710 --> 00:15:02.630
We don't expect our
API to fail.

00:15:02.630 --> 00:15:03.940
We obviously don't expect
your excellent

00:15:03.940 --> 00:15:05.140
applications to fail.

00:15:05.140 --> 00:15:07.180
But what could fail is the
network connection.

00:15:07.180 --> 00:15:09.270
So if you're uploading--

00:15:09.270 --> 00:15:10.820
not even a 10 gigabyte file.

00:15:10.820 --> 00:15:13.420
Say you're uploading a 1
gigabyte file, and three

00:15:13.420 --> 00:15:14.470
quarters of the way
through it, the

00:15:14.470 --> 00:15:15.830
network connection dies.

00:15:15.830 --> 00:15:17.960
Really, you have to
upload that again.

00:15:17.960 --> 00:15:20.760
And for that reason, we provide
the next mechanism,

00:15:20.760 --> 00:15:24.830
the third, which is the
resumable upload mechanism.

00:15:24.830 --> 00:15:25.810
So how does that work?

00:15:25.810 --> 00:15:28.270
Well, this is based
around a session.

00:15:28.270 --> 00:15:30.650
You will have a minimum
of two requests.

00:15:30.650 --> 00:15:33.110
The first request kicks
it all off.

00:15:33.110 --> 00:15:37.450
So you initiate that, and
you send the metadata.

00:15:37.450 --> 00:15:40.430
Once you've sent the metadata,
you get a response back which

00:15:40.430 --> 00:15:43.790
contains a URL for which we
expect you to send the

00:15:43.790 --> 00:15:45.690
remainder of the data.

00:15:45.690 --> 00:15:47.650
And once you've sent the
remainder of the data, then

00:15:47.650 --> 00:15:51.460
you get your 201 response
back, and that's that.

00:15:51.460 --> 00:15:53.500
You may think, well, what's
the point in that?

00:15:53.500 --> 00:15:55.150
I've just done two requests
when I could have done one

00:15:55.150 --> 00:15:56.010
with the multipart.

00:15:56.010 --> 00:15:59.150
Well, the beauty of it is, in
a situation of failure, when

00:15:59.150 --> 00:16:04.550
the network dies, you can ask
the API, how much have I

00:16:04.550 --> 00:16:06.050
already uploaded?

00:16:06.050 --> 00:16:07.810
Exactly how many bytes
have I uploaded?

00:16:07.810 --> 00:16:09.720
And when you make that request,
if it's not a

00:16:09.720 --> 00:16:14.490
completed file, you get a 308
Resume Incomplete response,

00:16:14.490 --> 00:16:18.340
which contains information
on where to restart.

00:16:18.340 --> 00:16:23.230
So you can restart the upload
only from where you left off,

00:16:23.230 --> 00:16:26.420
and you upload the remainder
of the file.

00:16:26.420 --> 00:16:28.570
What does it look like
in HTTP terms?

00:16:28.570 --> 00:16:32.800
Well, this is the initiation
of the session.

00:16:32.800 --> 00:16:33.730
You do a post.

00:16:33.730 --> 00:16:37.270
Again, we'll see this is the
upload type of resumable, and

00:16:37.270 --> 00:16:38.560
you just send the metadata.

00:16:38.560 --> 00:16:42.700
We do ask you to add these
two extra headers, the

00:16:42.700 --> 00:16:45.700
X-Upload-Content-Type and the
X-Upload-Content-Length, that

00:16:45.700 --> 00:16:48.610
specify the size and the content
type of the file you

00:16:48.610 --> 00:16:51.500
are going to be sending in the
remainder of the session.

00:16:51.500 --> 00:16:53.650
This time, you'll get
a 200 response back.

00:16:53.650 --> 00:16:56.330
And remember I said you'll get
the URI to send the rest of

00:16:56.330 --> 00:16:57.230
the data to.

00:16:57.230 --> 00:16:58.430
There it is.

00:16:58.430 --> 00:17:00.230
It's the session URL,
and it comes back

00:17:00.230 --> 00:17:01.500
in a location header.

00:17:01.500 --> 00:17:04.800
So you should pass this header
and see where to send it to.

00:17:04.800 --> 00:17:08.670
Then you perform a PUT to
that URI containing

00:17:08.670 --> 00:17:11.109
the rest of the data.

00:17:11.109 --> 00:17:14.780
And that data should be the
correct content type.

00:17:14.780 --> 00:17:16.650
You set a special Content-Range
header that

00:17:16.650 --> 00:17:18.390
tells how much you're sending.

00:17:18.390 --> 00:17:20.940
In the successful situation,
you'll get a 201 response

00:17:20.940 --> 00:17:23.480
back, and that's all
you need to do.

00:17:23.480 --> 00:17:27.000
In the situation of failure,
remember I said you can query

00:17:27.000 --> 00:17:29.630
the API to find out how much
you've already uploaded.

00:17:29.630 --> 00:17:31.700
Well, here's how.

00:17:31.700 --> 00:17:34.590
You send it a PUT request which
is an empty body, but

00:17:34.590 --> 00:17:37.320
has this header Content-Range
that is just slash.

00:17:37.320 --> 00:17:39.280
That means how much
have I uploaded?

00:17:39.280 --> 00:17:43.470
And we'll return the 308
response back with a range of

00:17:43.470 --> 00:17:44.480
how many bytes.

00:17:44.480 --> 00:17:48.620
So we can see that when we
restart this upload, we start

00:17:48.620 --> 00:17:53.320
from the 524,288th byte, and we
continue to send the rest

00:17:53.320 --> 00:17:55.410
of the data.

00:17:55.410 --> 00:17:57.480
So really good.

00:17:57.480 --> 00:17:59.610
These days a lot of applications
are on mobile

00:17:59.610 --> 00:18:01.150
platforms, and, really,
people have to

00:18:01.150 --> 00:18:02.010
pay for this bandwidth.

00:18:02.010 --> 00:18:04.930
So we'll talk about these
efficiency measures later.

00:18:04.930 --> 00:18:07.020
But really, just remember,
this is one of those ways

00:18:07.020 --> 00:18:08.170
where you can save bandwidth.

00:18:08.170 --> 00:18:11.930
You can save uploading
the same file twice.

00:18:11.930 --> 00:18:14.420
Of course, as I said, you can
just use our client libraries.

00:18:14.420 --> 00:18:18.810
And this is the Java example
of how to perform that.

00:18:18.810 --> 00:18:21.670
So I won't walk through it,
because it's simple Java.

00:18:21.670 --> 00:18:24.110
But you can see it's just a few
lines, and that makes it

00:18:24.110 --> 00:18:25.300
very, very easy.

00:18:25.300 --> 00:18:27.780
Resumable upload is the default
mechanism for the Java

00:18:27.780 --> 00:18:30.690
library, so without knowing it,
you would use this, the

00:18:30.690 --> 00:18:31.760
best method.

00:18:31.760 --> 00:18:34.910
So that's how to get your
files up into Drive--

00:18:34.910 --> 00:18:36.900
jalapeno drive.

00:18:36.900 --> 00:18:39.520
And to get them out and to
show you all the other

00:18:39.520 --> 00:18:40.880
beautiful features of the
API, I'm going to

00:18:40.880 --> 00:18:41.810
hand over to Ivan.

00:18:41.810 --> 00:18:42.622
IVAN LEE: Great.

00:18:42.622 --> 00:18:43.434
Thanks, Ali.

00:18:43.434 --> 00:18:45.130
Hey, everyone, I'm Ivan Lee.

00:18:45.130 --> 00:18:48.370
I'm a member of the Drive
SDK team here at Google.

00:18:48.370 --> 00:18:52.120
And now that Ali showed us how
to get all these files into

00:18:52.120 --> 00:18:55.310
your drive, I'd like to show
you some of the compelling

00:18:55.310 --> 00:18:58.120
operations that you can perform
on these drives.

00:18:58.120 --> 00:19:00.910
So for example here, obviously,
you're going to

00:19:00.910 --> 00:19:02.710
probably want to get your photos
back out of your photo

00:19:02.710 --> 00:19:05.750
album, so you're going to want
to be able to download it.

00:19:05.750 --> 00:19:08.160
In that case, all you have to
do is take the download URL

00:19:08.160 --> 00:19:10.580
that's available in the metadata
four file, and

00:19:10.580 --> 00:19:12.690
perform a GET on that
download URL.

00:19:12.690 --> 00:19:15.850
So you perform the GET, provide
the authorization

00:19:15.850 --> 00:19:18.240
headers just as you did with all
the other requests so that

00:19:18.240 --> 00:19:21.110
we know what scope you have, and
you'll get the binary data

00:19:21.110 --> 00:19:23.630
just as you'd expect.

00:19:23.630 --> 00:19:27.310
Just as Ali had talked about
performing a resumable upload,

00:19:27.310 --> 00:19:29.030
we do honor the Content-Range
headers.

00:19:29.030 --> 00:19:31.190
So that if you want to
effectively perform a

00:19:31.190 --> 00:19:33.390
resumable download, you
can just specify those

00:19:33.390 --> 00:19:34.780
bytes that you want.

00:19:34.780 --> 00:19:37.710
This is great in terms
of if you'd like to

00:19:37.710 --> 00:19:39.530
chunk up the download.

00:19:39.530 --> 00:19:43.120
So if you're on a spotty
connection, and you want to

00:19:43.120 --> 00:19:45.740
resume from where you were
before, or if you want to

00:19:45.740 --> 00:19:48.140
actually download different
parts of the file in parallel

00:19:48.140 --> 00:19:51.950
at the same time and reassemble
them on your side.

00:19:51.950 --> 00:19:55.140
So here, for example, we specify
the Content-Range

00:19:55.140 --> 00:19:59.890
header from the 512 kilobytes
to 1 megabyte range, and

00:19:59.890 --> 00:20:01.840
you'll just get that
chunk back.

00:20:01.840 --> 00:20:03.150
Those bytes in the

00:20:03.150 --> 00:20:07.100
Content-Range header are inclusive.

00:20:07.100 --> 00:20:10.350
We also give our users the
ability to restrict download

00:20:10.350 --> 00:20:12.190
for a file.

00:20:12.190 --> 00:20:15.790
So what this will do is it'll
allow the user to control who

00:20:15.790 --> 00:20:17.250
can download this file.

00:20:17.250 --> 00:20:21.150
So anybody that is a reader for
a file and they don't have

00:20:21.150 --> 00:20:24.400
write or owner permissions,
they won't be

00:20:24.400 --> 00:20:25.110
able to download it.

00:20:25.110 --> 00:20:28.450
So in this response here, you
can see that the file has been

00:20:28.450 --> 00:20:32.230
marked as restricted, and
whoever made this request does

00:20:32.230 --> 00:20:33.960
not have edit permissions.

00:20:33.960 --> 00:20:36.730
In this case, the download URL
does not show up, and they

00:20:36.730 --> 00:20:38.010
can't perform a download.

00:20:38.010 --> 00:20:41.190
Even if they did have a download
URL from before, and

00:20:41.190 --> 00:20:43.920
maybe the user has marked it as
restricted since then, the

00:20:43.920 --> 00:20:45.540
download URL will
stop working.

00:20:48.350 --> 00:20:51.450
So we also talked about
converting a file into a

00:20:51.450 --> 00:20:52.280
Google document.

00:20:52.280 --> 00:20:54.310
So this will give you all
that collaborative

00:20:54.310 --> 00:20:56.480
goodness that we provide.

00:20:56.480 --> 00:20:59.900
And in order to actually get
that file back out of Drive,

00:20:59.900 --> 00:21:01.790
we need to export it.

00:21:01.790 --> 00:21:03.470
The original binary
file has changed.

00:21:03.470 --> 00:21:06.790
So we have all these various
forms of exporting a file.

00:21:06.790 --> 00:21:10.680
So for example here, a Google
document can be exported into

00:21:10.680 --> 00:21:16.240
an HTML file or a PDF, and
there's four or five other

00:21:16.240 --> 00:21:17.850
formats that we support.

00:21:17.850 --> 00:21:20.580
In which case, you just need to
select the MIME type that

00:21:20.580 --> 00:21:23.710
you would like to export to
and take the link that's

00:21:23.710 --> 00:21:25.370
associated with that
MIME type.

00:21:25.370 --> 00:21:28.080
Perform a GET on it using the
authorization headers as you

00:21:28.080 --> 00:21:31.650
did with the download, and
you'll just get the binary

00:21:31.650 --> 00:21:33.690
data as you'd expect.

00:21:33.690 --> 00:21:36.010
Now, this really closes the loop
in terms of uploading a

00:21:36.010 --> 00:21:38.530
file, converting it into a
Google Document, and being

00:21:38.530 --> 00:21:41.610
able to collaborate, share,
view, all that good stuff, and

00:21:41.610 --> 00:21:44.810
then be able to export it into
a more common format that

00:21:44.810 --> 00:21:47.990
maybe some other applications
might be more familiar with.

00:21:47.990 --> 00:21:50.870
Not only are these desktop
applications, but these can

00:21:50.870 --> 00:21:52.040
actually be cloud
applications.

00:21:52.040 --> 00:21:55.520
So if you had seen one of the
talks before, we had mentioned

00:21:55.520 --> 00:21:59.920
how you can actually perform an
open with a Google document

00:21:59.920 --> 00:22:02.670
in the drive, and your app
will actually be able to

00:22:02.670 --> 00:22:05.580
perform an operation on that
file, since you will actually

00:22:05.580 --> 00:22:08.020
export it as a read-only
snapshot.

00:22:08.020 --> 00:22:13.510
So for example, if HelloFax
wanted to fax a file, it would

00:22:13.510 --> 00:22:18.280
just have to say, open this
document as a PDF.

00:22:18.280 --> 00:22:21.170
And it would just be able to use
that PDF as if it were a

00:22:21.170 --> 00:22:24.790
regular binary file.

00:22:24.790 --> 00:22:27.250
So now you have been able to
download your file, and maybe

00:22:27.250 --> 00:22:28.360
you want to make some
touch-ups to it.

00:22:28.360 --> 00:22:31.710
Maybe you want to do some red
eye reduction, or put

00:22:31.710 --> 00:22:34.790
moustaches on everybody, then
you can do that with your app.

00:22:34.790 --> 00:22:37.090
But now we have to get it back
into your drive so that

00:22:37.090 --> 00:22:39.220
everybody else can see
those changes.

00:22:39.220 --> 00:22:40.730
You actually have two options
when you do this.

00:22:40.730 --> 00:22:43.480
You can actually completely
replace the file, or you can

00:22:43.480 --> 00:22:47.080
actually update it, but create
a revision at the same time.

00:22:47.080 --> 00:22:49.290
By creating a revision, you
actually get to see the

00:22:49.290 --> 00:22:52.880
history of all the changes
you've made along the way, and

00:22:52.880 --> 00:22:56.560
users will probably appreciate
being able to take those

00:22:56.560 --> 00:23:00.360
snapshots as you add
those revisions.

00:23:00.360 --> 00:23:03.780
So to choose the behavior that
you'd like to exhibit, all you

00:23:03.780 --> 00:23:06.500
have to do is specify this new
revision query parameter.

00:23:06.500 --> 00:23:09.030
So in this case, we've said,
newRevision=true.

00:23:09.030 --> 00:23:10.740
And when you update it,
you'll get a new

00:23:10.740 --> 00:23:12.920
revision for that file.

00:23:12.920 --> 00:23:16.930
You'll be able to list those
revisions in the actual web UI

00:23:16.930 --> 00:23:18.080
that we have.

00:23:18.080 --> 00:23:20.450
And not only that, but we have
a revisions collection, so

00:23:20.450 --> 00:23:22.670
you'll be able to perform
that listing.

00:23:22.670 --> 00:23:25.770
You'll be able to delete,
update, download specific

00:23:25.770 --> 00:23:29.160
revisions, and be able to
get all that history.

00:23:33.720 --> 00:23:36.000
If you saw one of the other
talks, we really encouraged

00:23:36.000 --> 00:23:40.270
auto-saving files
for your users.

00:23:40.270 --> 00:23:43.030
The majority of users expect
cloud apps nowadays to perform

00:23:43.030 --> 00:23:45.670
the auto-saving, and it almost
feels antiquated to have to

00:23:45.670 --> 00:23:48.010
actually perform a save.

00:23:48.010 --> 00:23:51.080
Now when you do this, if you
create a new revision every

00:23:51.080 --> 00:23:52.670
time, that's great.

00:23:52.670 --> 00:23:54.540
That provides a lot of
flexibility to your users,

00:23:54.540 --> 00:23:57.550
lets them undo operations,
and maybe roll back.

00:23:57.550 --> 00:24:01.340
However, this can get expensive
in terms of storage.

00:24:01.340 --> 00:24:03.180
So from time to time, we
actually perform a little bit

00:24:03.180 --> 00:24:04.390
of a clean up.

00:24:04.390 --> 00:24:06.900
We delete older revisions, or
maybe if there's a certain

00:24:06.900 --> 00:24:09.790
file that has had an excessive
number of revisions, we'll

00:24:09.790 --> 00:24:12.500
start cleaning up those earlier
ones and leave the

00:24:12.500 --> 00:24:13.950
more recent ones.

00:24:13.950 --> 00:24:17.100
If you're uploading a revision
that you know it's important--

00:24:17.100 --> 00:24:21.630
maybe it's a milestone, or the
user said, hey, really, really

00:24:21.630 --> 00:24:23.330
hold on to this revision--

00:24:23.330 --> 00:24:25.270
you can actually mark
it as pinned.

00:24:25.270 --> 00:24:27.370
This way, it won't actually be
subject to that automatic

00:24:27.370 --> 00:24:32.520
clean up, and it'll always be
available for your users.

00:24:32.520 --> 00:24:34.450
They'll still have the same
properties in terms of being

00:24:34.450 --> 00:24:38.860
able to delete, and update, and
download those revisions.

00:24:38.860 --> 00:24:41.880
Do note that pinning a revision
will actually count

00:24:41.880 --> 00:24:44.210
against your user's quota,
just because we can

00:24:44.210 --> 00:24:44.770
never delete it.

00:24:44.770 --> 00:24:47.210
So do be wary of that.

00:24:47.210 --> 00:24:50.040
Make sure that it is a valuable
thing that you would

00:24:50.040 --> 00:24:51.290
like to provide for
your users.

00:24:54.230 --> 00:24:57.190
So let's say you want to
make a copy of a photo.

00:24:57.190 --> 00:24:59.110
And you want to run a red
filter, and then a blue

00:24:59.110 --> 00:25:02.370
filter, and a green filter, and
have these various copies.

00:25:02.370 --> 00:25:05.910
Well, with our new move to this
new API architecture,

00:25:05.910 --> 00:25:09.380
we're actually able to provide
you with custom endpoints.

00:25:09.380 --> 00:25:11.670
So we can take a lot of the
pain points away from the

00:25:11.670 --> 00:25:14.830
developer and perform them
on the server side.

00:25:14.830 --> 00:25:19.220
This was a common complaint that
we had with our previous

00:25:19.220 --> 00:25:22.250
API, was being able
to perform a copy,

00:25:22.250 --> 00:25:24.110
especially for binary files.

00:25:24.110 --> 00:25:26.320
So what we've done here is we've
actually provided you

00:25:26.320 --> 00:25:27.730
with a copy endpoint.

00:25:27.730 --> 00:25:31.630
So you can copy a binary file,
specify the metadata-- in this

00:25:31.630 --> 00:25:34.890
case, we specified that the
title is "Fancier Photo."

00:25:34.890 --> 00:25:37.500
And you can specify all the
other metadata that you would

00:25:37.500 --> 00:25:38.980
on a normal upload.

00:25:38.980 --> 00:25:41.460
In that case, it will actually
take that binary file, create

00:25:41.460 --> 00:25:42.530
a copy of it.

00:25:42.530 --> 00:25:44.490
You don't have to download
and re-upload.

00:25:44.490 --> 00:25:46.800
You don't have to waste all that
bandwidth not only for

00:25:46.800 --> 00:25:49.440
us, but for you and
your users.

00:25:49.440 --> 00:25:52.310
You might be curious, OK, I
can specify the metadata.

00:25:52.310 --> 00:25:54.830
Can I also specify some
query parameters?

00:25:54.830 --> 00:25:56.560
And of course, yes.

00:25:56.560 --> 00:25:58.860
So just as you were able to
say, convert this into a

00:25:58.860 --> 00:26:03.240
Google document, or perform OCR,
or perform a translation,

00:26:03.240 --> 00:26:05.240
you can do that exact same
thing on a copy.

00:26:05.240 --> 00:26:07.220
It's just like an upload.

00:26:07.220 --> 00:26:11.330
And it really lets you take away
a lot of the processing

00:26:11.330 --> 00:26:13.510
power that you would normally
have to do in your server or

00:26:13.510 --> 00:26:15.020
your application.

00:26:15.020 --> 00:26:16.390
And we can do it on our
server since we

00:26:16.390 --> 00:26:19.960
already have the bytes.

00:26:19.960 --> 00:26:24.440
So maybe there are some photos
that went into your album that

00:26:24.440 --> 00:26:26.510
shouldn't quite make
the final cut.

00:26:26.510 --> 00:26:28.640
In which case, we actually
provide a couple different

00:26:28.640 --> 00:26:31.310
ways to remove that photo.

00:26:31.310 --> 00:26:34.750
The safer operation is
to perform a trash.

00:26:34.750 --> 00:26:37.120
So what this will do is actually
move the file into

00:26:37.120 --> 00:26:38.020
the user's trash.

00:26:38.020 --> 00:26:39.560
It'll be fully recoverable.

00:26:39.560 --> 00:26:42.080
All they have to do
is un-trash it.

00:26:42.080 --> 00:26:44.480
This is great because it
actually delegates the

00:26:44.480 --> 00:26:47.470
responsibility for permanently
deleting a user's file to the

00:26:47.470 --> 00:26:48.200
actual users.

00:26:48.200 --> 00:26:51.600
So they have a little more
ownership of it.

00:26:51.600 --> 00:26:56.980
And the only difference that
shows up here is in the

00:26:56.980 --> 00:26:59.290
metadata for the file that comes
back, it will be that

00:26:59.290 --> 00:27:02.860
this trashed bit
is set to true.

00:27:02.860 --> 00:27:05.310
However, there are situations
where you might want to

00:27:05.310 --> 00:27:06.160
actually delete the file.

00:27:06.160 --> 00:27:08.070
You don't want it to
go in the trash.

00:27:08.070 --> 00:27:11.670
So for example, if your
application maybe creates some

00:27:11.670 --> 00:27:15.680
temporary files to keep track of
how far it is along a whole

00:27:15.680 --> 00:27:17.150
bunch of processing.

00:27:17.150 --> 00:27:20.220
In that case, that would be a
great situation where you

00:27:20.220 --> 00:27:23.600
wouldn't want to have to pollute
your user's trash with

00:27:23.600 --> 00:27:25.470
a whole bunch of files that
they never even created or

00:27:25.470 --> 00:27:27.530
even know what they are.

00:27:27.530 --> 00:27:29.950
So in that case, we just have
this delete endpoint on the

00:27:29.950 --> 00:27:33.580
file itself, just the regular
HTTP DELETE method.

00:27:33.580 --> 00:27:36.270
And that'll just skip the trash
as you would expect.

00:27:39.380 --> 00:27:41.310
Now that we have files in your
drive, you've cleaned up all

00:27:41.310 --> 00:27:45.930
the old ones that you don't want
anymore, you'd like to

00:27:45.930 --> 00:27:46.450
organize them.

00:27:46.450 --> 00:27:48.870
Maybe organize them by
event, or by date,

00:27:48.870 --> 00:27:50.000
or by friend groups.

00:27:50.000 --> 00:27:54.210
Or even all three, since we
support multi-inclusion.

00:27:54.210 --> 00:27:57.730
In that case, we just have the
children's collection in which

00:27:57.730 --> 00:28:01.840
case you perform operations on
the actual folder itself.

00:28:01.840 --> 00:28:06.460
And in the body, you just
specify various IDs for the

00:28:06.460 --> 00:28:08.680
files that you would like
to put in that folder.

00:28:08.680 --> 00:28:10.770
Conversely, we also have
a parent's collection.

00:28:10.770 --> 00:28:16.150
So if you'd like to add a parent
to a certain file, then

00:28:16.150 --> 00:28:18.700
you can do that multiple times
and just always be working on

00:28:18.700 --> 00:28:19.950
that individual file.

00:28:23.290 --> 00:28:27.170
Since we'd like you to make
as few requests as

00:28:27.170 --> 00:28:29.720
possible, just because--

00:28:29.720 --> 00:28:32.080
for both sides, we would
like to do that.

00:28:32.080 --> 00:28:35.250
In that case, we allow you to
specify the IDs of the parents

00:28:35.250 --> 00:28:38.180
in the actual metadata when you
upload a file, as Ali had

00:28:38.180 --> 00:28:39.930
described before.

00:28:39.930 --> 00:28:41.840
The great thing about this is
you can specify multiple

00:28:41.840 --> 00:28:44.210
parents here, which was another
common pain point with

00:28:44.210 --> 00:28:46.150
our previous API.

00:28:46.150 --> 00:28:50.070
So here, if you specify 10
folders, normally, before,

00:28:50.070 --> 00:28:52.720
you'd have to actually perform
10 different requests.

00:28:52.720 --> 00:28:55.510
Here you can just perform one
request, and we'll add them to

00:28:55.510 --> 00:28:56.760
all the folders for you.

00:28:59.190 --> 00:29:01.440
So now that these photos are
just sitting in your drive,

00:29:01.440 --> 00:29:02.860
they're pretty boring there.

00:29:02.860 --> 00:29:05.580
I mean, one of the greatest
features of Google Drive is

00:29:05.580 --> 00:29:07.080
the ability to share.

00:29:07.080 --> 00:29:10.070
And not only just share
with one or two users.

00:29:10.070 --> 00:29:12.020
There's various different types
of audiences that you

00:29:12.020 --> 00:29:13.200
can share with.

00:29:13.200 --> 00:29:16.730
So for example, if I had this
picture of me working hard on

00:29:16.730 --> 00:29:21.390
the beach in Australia, and I
want to show it off to Ali

00:29:21.390 --> 00:29:25.250
who's apparently stuck on an
escalator, I can just share it

00:29:25.250 --> 00:29:27.100
directly with him as a user.

00:29:27.100 --> 00:29:31.510
If I'd like to share it with
this group of people that

00:29:31.510 --> 00:29:34.275
dress up as silhouettes, I can
share it with the group.

00:29:34.275 --> 00:29:38.370
If I want to show off to my
coworkers and say, hey, I'm

00:29:38.370 --> 00:29:40.786
not really working, but you guys
are, then I could share

00:29:40.786 --> 00:29:41.780
it with the domain.

00:29:41.780 --> 00:29:43.930
Or if I just want to completely
make it public,

00:29:43.930 --> 00:29:47.270
since this is such a gorgeous
photo, then I can

00:29:47.270 --> 00:29:51.500
just set it to anyone.

00:29:51.500 --> 00:29:55.180
Now to actually add this
permission, all you have to do

00:29:55.180 --> 00:29:57.100
is specify a few different
pieces of data.

00:29:57.100 --> 00:29:59.960
So here you can specify the
type, just as I had discussed

00:29:59.960 --> 00:30:00.950
in the last slide.

00:30:00.950 --> 00:30:05.500
The role is the familiar role
that you see in our UI, either

00:30:05.500 --> 00:30:07.920
reader, writer, or owner.

00:30:07.920 --> 00:30:11.580
And reader isn't able to
actually edit the file.

00:30:11.580 --> 00:30:13.880
Writer can edit the file,
and owner can

00:30:13.880 --> 00:30:15.130
actually delete the file.

00:30:21.100 --> 00:30:23.300
You might want to specify owner
in a case where you'd

00:30:23.300 --> 00:30:24.320
like to transfer ownership.

00:30:24.320 --> 00:30:26.770
So for example, maybe somebody
is retiring from the company,

00:30:26.770 --> 00:30:29.980
and you would like to transfer
their documents from them to

00:30:29.980 --> 00:30:31.910
somebody else that's in the
company, so you don't lose

00:30:31.910 --> 00:30:32.920
that information.

00:30:32.920 --> 00:30:35.800
That'd be a valid case
where you'd like

00:30:35.800 --> 00:30:38.060
to specify an owner.

00:30:38.060 --> 00:30:40.640
And for value, you just specify
either the email

00:30:40.640 --> 00:30:43.200
address for the user of the
group or the domain, such as

00:30:43.200 --> 00:30:46.310
google.com in the example
I showed before.

00:30:46.310 --> 00:30:48.470
The main thing that I wanted to
highlight on this slide was

00:30:48.470 --> 00:30:50.600
that the ID you get
back is actually

00:30:50.600 --> 00:30:53.220
a key that we generate.

00:30:53.220 --> 00:30:55.270
A big thing that we want to
address was we wanted to

00:30:55.270 --> 00:30:57.310
provide better privacy
for our users.

00:30:57.310 --> 00:31:00.510
So just because somebody's
shared something with me

00:31:00.510 --> 00:31:03.600
doesn't mean everybody else that
is on the permissions for

00:31:03.600 --> 00:31:06.530
that file should be able to know
what my email address is.

00:31:06.530 --> 00:31:08.700
We really wanted to support
a better privacy

00:31:08.700 --> 00:31:10.050
model for our users.

00:31:10.050 --> 00:31:13.250
So the key that you get back
will just be a generated key.

00:31:13.250 --> 00:31:17.110
You use that to perform various
operations with that

00:31:17.110 --> 00:31:19.210
permission from now on.

00:31:19.210 --> 00:31:22.125
We realize that it might be
convenient to be able to use

00:31:22.125 --> 00:31:26.820
the email address just because
maybe it's just a little more

00:31:26.820 --> 00:31:27.385
human readable.

00:31:27.385 --> 00:31:30.520
We provide some convenience
methods, such as being able to

00:31:30.520 --> 00:31:34.760
specify the current user,
exposing what this generated

00:31:34.760 --> 00:31:39.730
key would be for a user in our
about collection, and so on.

00:31:42.680 --> 00:31:45.090
So I guess a couple
years ago--

00:31:45.090 --> 00:31:47.940
well, more than that-- a couple
guys started a search

00:31:47.940 --> 00:31:49.090
company, and that
became Google.

00:31:49.090 --> 00:31:52.410
And we thought that it would
be very valuable to include

00:31:52.410 --> 00:31:54.080
Search with our API.

00:31:54.080 --> 00:31:57.950
So to perform search, all you
need to do is specify the

00:31:57.950 --> 00:32:01.210
query parameter, q.

00:32:01.210 --> 00:32:05.010
And we have a special query
language here, such as being

00:32:05.010 --> 00:32:07.950
able to search for any file
where the title contains

00:32:07.950 --> 00:32:08.970
"birthday."

00:32:08.970 --> 00:32:13.110
Notice that the string
is in single quotes.

00:32:13.110 --> 00:32:15.830
And this isn't the only
query that we support.

00:32:15.830 --> 00:32:19.580
So for example, you can search
for exact title queries.

00:32:19.580 --> 00:32:24.150
So anything that exactly matches
"Anniversary 2012."

00:32:24.150 --> 00:32:26.420
You can search for various
labels, so for example,

00:32:26.420 --> 00:32:27.980
starred or trashed.

00:32:27.980 --> 00:32:30.260
You can search for time
ranges, modified time.

00:32:30.260 --> 00:32:33.020
We also support last
viewed time.

00:32:33.020 --> 00:32:38.250
Full text is probably one of the
most powerful values that

00:32:38.250 --> 00:32:38.940
you can search on.

00:32:38.940 --> 00:32:42.510
Because that not only brings
in the title and the

00:32:42.510 --> 00:32:46.070
description, it actually uses
that indexable text that we

00:32:46.070 --> 00:32:49.310
had seen before in the example
where Ali had uploaded that

00:32:49.310 --> 00:32:52.780
photo from the Three Sisters.

00:32:52.780 --> 00:32:57.640
We also provide searching by
various levels of permission.

00:32:57.640 --> 00:33:03.080
So if I knew that John Smith
was shared as a writer on a

00:33:03.080 --> 00:33:06.390
file, then I can perform that
search just like that.

00:33:06.390 --> 00:33:09.160
We also support owners
and readers.

00:33:09.160 --> 00:33:10.830
And also being able to
search by MIME type.

00:33:10.830 --> 00:33:12.660
Maybe your application only
works on a certain type of

00:33:12.660 --> 00:33:14.960
MIME type, and that's the only
one that you care about.

00:33:14.960 --> 00:33:18.390
Then you can just, in this
case, search for PDFs.

00:33:18.390 --> 00:33:22.100
And also keep in mind that this
list continues to grow.

00:33:22.100 --> 00:33:24.140
We always try to support
more and more fields.

00:33:24.140 --> 00:33:28.360
So we actually have an entire
page on our documentation that

00:33:28.360 --> 00:33:29.190
talks about searching.

00:33:29.190 --> 00:33:33.760
So I highly recommend checking
back there from time to time

00:33:33.760 --> 00:33:36.810
in case we do start supporting
other fields.

00:33:39.660 --> 00:33:45.110
So finally, a very common use
case is that people want to

00:33:45.110 --> 00:33:46.450
see what's been going on.

00:33:46.450 --> 00:33:47.850
What kind of activity
do I have?

00:33:47.850 --> 00:33:50.000
In our example, the
photo album.

00:33:50.000 --> 00:33:52.750
So maybe has somebody uploaded
something new to the shared

00:33:52.750 --> 00:33:55.210
folder that we've created?

00:33:55.210 --> 00:33:58.105
Or has somebody started editing
some of these photos?

00:33:58.105 --> 00:34:00.635
Since this is such a common use
case, we'd kind of like to

00:34:00.635 --> 00:34:06.300
step through probably the best
practice in terms of syncing

00:34:06.300 --> 00:34:11.210
these changes to a photo album
or whatever you're monitoring.

00:34:11.210 --> 00:34:14.469
So in this case, all you see
here is we have four files.

00:34:14.469 --> 00:34:16.880
They each have a change ID
associated with them.

00:34:16.880 --> 00:34:18.000
We haven't synced
anything yet.

00:34:18.000 --> 00:34:22.900
Maybe the user's just installed
your application, in

00:34:22.900 --> 00:34:25.270
which case we haven't
synced anything.

00:34:25.270 --> 00:34:31.070
Keep in mind here that nine is
our largest change ID, and

00:34:31.070 --> 00:34:32.980
we're just about to
start syncing.

00:34:32.980 --> 00:34:37.810
So now we actually sync those
files, perform maybe a list on

00:34:37.810 --> 00:34:39.580
the files collection.

00:34:39.580 --> 00:34:42.570
You can use a query in case
you're only interested in a

00:34:42.570 --> 00:34:45.429
certain subset of those files.

00:34:45.429 --> 00:34:50.480
Once you do that, you'll be
waiting for any changes that

00:34:50.480 --> 00:34:51.570
might be happening.

00:34:51.570 --> 00:34:54.620
You'll probably be polling every
couple minutes or so.

00:34:54.620 --> 00:34:57.470
In the meantime, maybe
somebody's been updating your

00:34:57.470 --> 00:35:01.580
files or deleting some of these
photos, in which case

00:35:01.580 --> 00:35:04.170
these changes will start
to accumulate.

00:35:04.170 --> 00:35:06.730
Now the next time you want to
see what's changed since the

00:35:06.730 --> 00:35:09.770
last time you checked, all you
have to do is start from

00:35:09.770 --> 00:35:11.040
change ID 10.

00:35:11.040 --> 00:35:13.790
And you'll see everything that's
changed since then,

00:35:13.790 --> 00:35:16.380
rather than having to sync the
entire drive over and over,

00:35:16.380 --> 00:35:19.450
and perform the diffs
yourself.

00:35:19.450 --> 00:35:21.250
So how does this look
with our API?

00:35:21.250 --> 00:35:23.230
Well, we have this about
collection, which provides a

00:35:23.230 --> 00:35:25.880
whole bunch of different
information to

00:35:25.880 --> 00:35:27.170
you about the user.

00:35:27.170 --> 00:35:29.950
So for example, there's quota
information, display name,

00:35:29.950 --> 00:35:33.540
profile, URL, but what we're
concerned with here is the

00:35:33.540 --> 00:35:35.680
largest change ID, in which
case the largest

00:35:35.680 --> 00:35:36.940
change ID is 9.

00:35:36.940 --> 00:35:41.100
We store that somewhere just to
keep track of where we are

00:35:41.100 --> 00:35:42.710
in a snapshot in time.

00:35:42.710 --> 00:35:45.340
We go ahead and sync the files
using the files collection

00:35:45.340 --> 00:35:48.450
just as we talked
about before.

00:35:48.450 --> 00:35:51.060
And now when we want to see, OK,
what's changed since the

00:35:51.060 --> 00:35:54.760
last time I took a snapshot, all
we have to do is hit the

00:35:54.760 --> 00:35:59.550
changes collection and specify
the start Change ID to be 10.

00:35:59.550 --> 00:36:01.510
You'll notice in the
response that each

00:36:01.510 --> 00:36:03.350
change has an ID number.

00:36:03.350 --> 00:36:06.280
So in this case, the
first one is 10.

00:36:06.280 --> 00:36:07.980
And this will be a monotonically
increasing

00:36:07.980 --> 00:36:12.940
number, so you can keep track
of the changes as they go.

00:36:12.940 --> 00:36:16.100
We also specify the file
ID that the change

00:36:16.100 --> 00:36:17.090
is associated with.

00:36:17.090 --> 00:36:20.090
So if you create a new file,
update it, delete it, that's

00:36:20.090 --> 00:36:22.820
what that file ID points to.

00:36:22.820 --> 00:36:25.740
Now there's also this
deleted flag.

00:36:25.740 --> 00:36:31.492
So if you were to have deleted
this file, that's what that

00:36:31.492 --> 00:36:32.300
flag tells you.

00:36:32.300 --> 00:36:34.420
In this case, we see that
deleted is false.

00:36:34.420 --> 00:36:37.240
So this is maybe just either a
create or an update in which

00:36:37.240 --> 00:36:40.850
case we specify the file
metadata just as you would

00:36:40.850 --> 00:36:43.210
expect if you were to hit
the files collection.

00:36:43.210 --> 00:36:46.240
This saves you a round trip, so
you don't have to get the

00:36:46.240 --> 00:36:47.940
file ID, and then just turn
right back around,

00:36:47.940 --> 00:36:49.580
and ask us for it.

00:36:49.580 --> 00:36:52.530
However, if the deleted was
true, that means that the file

00:36:52.530 --> 00:36:54.590
has been completely deleted
from the user's drive, not

00:36:54.590 --> 00:36:55.960
just moved to the trash.

00:36:55.960 --> 00:36:58.950
In which case, we don't have
any information about that

00:36:58.950 --> 00:37:02.510
metadata, so we can't actually
provide you with that

00:37:02.510 --> 00:37:03.040
information.

00:37:03.040 --> 00:37:05.260
So that file field will
actually not be

00:37:05.260 --> 00:37:06.510
there in the response.

00:37:08.750 --> 00:37:11.240
So those are just a few of the
operations that you can do

00:37:11.240 --> 00:37:11.930
with our API.

00:37:11.930 --> 00:37:14.210
There's actually a few more
that we couldn't touch on

00:37:14.210 --> 00:37:14.940
because of time.

00:37:14.940 --> 00:37:18.710
But we thought it would be most
valuable if Ali talked

00:37:18.710 --> 00:37:20.990
about some best practices
that you can use

00:37:20.990 --> 00:37:23.510
when using our API.

00:37:23.510 --> 00:37:24.540
So, Ali?

00:37:24.540 --> 00:37:25.630
ALI AFSHAR: Thanks, Ivan.

00:37:25.630 --> 00:37:29.330
So as Ivan said, that's not the
whole API, but bits of it.

00:37:29.330 --> 00:37:32.290
And you can pick and choose
the parts that you want.

00:37:32.290 --> 00:37:35.160
I just want to talk about a
couple of best practices--

00:37:35.160 --> 00:37:37.720
we'll go into them
in some detail--

00:37:37.720 --> 00:37:39.940
on how we would prefer
you use the API.

00:37:39.940 --> 00:37:41.640
It's good for us, and
it's good for you.

00:37:41.640 --> 00:37:44.470
But overall, it's good for
the user if you do these.

00:37:44.470 --> 00:37:49.270
The first one is what to
do in case of failure

00:37:49.270 --> 00:37:50.360
when you make calls.

00:37:50.360 --> 00:37:53.410
Now, the main cause for that
will be you're making API

00:37:53.410 --> 00:37:55.470
calls too quickly.

00:37:55.470 --> 00:37:58.790
We have a few layers of denial
of service protection.

00:37:58.790 --> 00:38:02.610
So we don't want you to
get stuck by this.

00:38:02.610 --> 00:38:06.020
If you do make a request too
quickly, what we return to you

00:38:06.020 --> 00:38:09.010
is a 403 response.

00:38:09.010 --> 00:38:10.800
That just means rate
limits exceeded.

00:38:10.800 --> 00:38:12.710
And what should you do
in that circumstance?

00:38:12.710 --> 00:38:14.680
Well, you should do exponential
back off.

00:38:14.680 --> 00:38:18.240
So you should wait for a second
and then try again.

00:38:18.240 --> 00:38:21.060
And if you still get the 403
response again, you should

00:38:21.060 --> 00:38:24.480
wait for two seconds, double the
interval, and try again.

00:38:24.480 --> 00:38:26.880
Of course, we recommend you add
a little jitter to stop

00:38:26.880 --> 00:38:29.630
you making bursts of requests
all at the same time.

00:38:29.630 --> 00:38:30.970
That won't help anything.

00:38:30.970 --> 00:38:34.570
So keep increasing the time, and
eventually you'll get to a

00:38:34.570 --> 00:38:37.240
point where you've hit the nice
equilibrium, and you can

00:38:37.240 --> 00:38:39.080
get your responses back.

00:38:39.080 --> 00:38:43.080
If, of course, you're using this
and you're still hitting

00:38:43.080 --> 00:38:45.920
an absolute quota ceiling,
that's when you need to get in

00:38:45.920 --> 00:38:46.450
touch with us.

00:38:46.450 --> 00:38:49.410
We're keen that developers, if
they're doing it in the right

00:38:49.410 --> 00:38:52.350
way, have as much quota as they
need to perform their

00:38:52.350 --> 00:38:54.150
application, obviously
within reason.

00:38:54.150 --> 00:38:55.520
But we're keen for that.

00:38:55.520 --> 00:38:57.160
So we'll check it out,
make sure you're

00:38:57.160 --> 00:38:57.970
doing everything right.

00:38:57.970 --> 00:39:00.020
And if you are hitting that
ceiling, then get back in

00:39:00.020 --> 00:39:00.530
touch with us.

00:39:00.530 --> 00:39:02.770
So that's what to do in
the case of retrying.

00:39:02.770 --> 00:39:05.180
Exponential back off and it
really will help your

00:39:05.180 --> 00:39:07.270
applications.

00:39:07.270 --> 00:39:09.960
The other side of this-- and
we've touched upon it--

00:39:09.960 --> 00:39:14.650
is making sure that you
treat the user's

00:39:14.650 --> 00:39:16.670
bandwidth as sacred.

00:39:16.670 --> 00:39:18.770
Really, I've said here
every byte is sacred.

00:39:18.770 --> 00:39:20.420
Some of you may get
the reference.

00:39:20.420 --> 00:39:22.360
But there are a few ways
that you can do this.

00:39:22.360 --> 00:39:24.050
Just reduce the amount
of data you're using.

00:39:24.050 --> 00:39:26.490
On a mobile platform, people
have to pay for this.

00:39:26.490 --> 00:39:28.690
And really, you don't want to
be the cause of costing them

00:39:28.690 --> 00:39:30.420
bandwidth and costing
them money.

00:39:30.420 --> 00:39:34.840
So the first two, fields and
PATCH, are ways in which you

00:39:34.840 --> 00:39:37.760
can reduce either the request
you're sending or the response

00:39:37.760 --> 00:39:39.450
you're getting back.

00:39:39.450 --> 00:39:43.760
fields is a query parameter that
you specify that tells

00:39:43.760 --> 00:39:46.550
the API that you only want
a certain subset of

00:39:46.550 --> 00:39:48.450
fields to be returned.

00:39:48.450 --> 00:39:50.520
So you're only interested
in the title.

00:39:50.520 --> 00:39:52.410
You don't care what the
description is, what the MIME

00:39:52.410 --> 00:39:54.980
type is, what the links are,
any of those other things.

00:39:54.980 --> 00:39:57.860
So you just ask for the title
field, and that's

00:39:57.860 --> 00:39:58.610
all you'll get back.

00:39:58.610 --> 00:40:02.860
So immediately you've returned a
quarter of the response or a

00:40:02.860 --> 00:40:05.080
10th of the response that you
would have done before.

00:40:05.080 --> 00:40:08.380
The converse of that is
the PATCH operation.

00:40:08.380 --> 00:40:12.040
Now, when you do a PUT, when you
do an UPDATE, you can send

00:40:12.040 --> 00:40:12.510
all the data.

00:40:12.510 --> 00:40:16.110
But if you'd like to just
send the title, or--

00:40:16.110 --> 00:40:19.330
a really useful case-- just
send one of those binary

00:40:19.330 --> 00:40:21.220
labels that I've been
mentioning, you just want to

00:40:21.220 --> 00:40:23.920
send the starred label, this
is how you can do that.

00:40:23.920 --> 00:40:26.700
You send a PATCH request, and
that frees you up from sending

00:40:26.700 --> 00:40:28.920
all the other data, and
only the field you

00:40:28.920 --> 00:40:30.400
send will be updated.

00:40:30.400 --> 00:40:32.180
So PATCH and fields.

00:40:32.180 --> 00:40:34.680
Send what you need, receive
what you need.

00:40:34.680 --> 00:40:35.850
Send no more.

00:40:35.850 --> 00:40:37.880
Now the other two-- well,
resumable upload

00:40:37.880 --> 00:40:39.990
we've spoken about.

00:40:39.990 --> 00:40:41.370
Use resumable upload.

00:40:41.370 --> 00:40:43.890
It helps in the case of failure,
but why does that

00:40:43.890 --> 00:40:44.980
help your user's bandwidth?

00:40:44.980 --> 00:40:47.090
Well, it ensures that
you never upload

00:40:47.090 --> 00:40:49.280
the same byte twice.

00:40:49.280 --> 00:40:50.400
Every byte is sacred.

00:40:50.400 --> 00:40:52.050
Never upload the same
byte twice.

00:40:52.050 --> 00:40:55.400
Start off exactly from where
you left off, and continue.

00:40:55.400 --> 00:40:57.900
Fortunately, resumable upload
is the default upload

00:40:57.900 --> 00:40:59.150
mechanism in most of
the libraries.

00:40:59.150 --> 00:41:01.200
So you would just be using
that without knowing.

00:41:01.200 --> 00:41:02.500
So that's really great.

00:41:02.500 --> 00:41:05.710
And lastly, as Ivan's just
mentioned, the changes feed.

00:41:05.710 --> 00:41:09.370
There's no need to get a whole
list of all the files,

00:41:09.370 --> 00:41:12.480
download them all, see which
ones have changed, get the

00:41:12.480 --> 00:41:13.830
metadata, see if the
title's changed.

00:41:13.830 --> 00:41:15.630
We can return that
feed for you.

00:41:15.630 --> 00:41:19.340
And as long as you poll that
sensibly, then that will save

00:41:19.340 --> 00:41:22.180
you, again, making a whole
number of requests, save you

00:41:22.180 --> 00:41:24.350
downloading files when you
just don't need to.

00:41:24.350 --> 00:41:26.960
So those four simple
best practices to

00:41:26.960 --> 00:41:28.260
save your user's bandwidth.

00:41:28.260 --> 00:41:30.230
They will appreciate
you for it.

00:41:30.230 --> 00:41:32.850
We will appreciate you for it
because they will be happy.

00:41:32.850 --> 00:41:34.970
So those are our
best practices.

00:41:34.970 --> 00:41:36.980
And I'd like to just focus
a bit on where we're

00:41:36.980 --> 00:41:38.480
going with this API.

00:41:38.480 --> 00:41:41.550
We started to tell you that
this API replaces the

00:41:41.550 --> 00:41:42.840
Documents List API.

00:41:42.840 --> 00:41:45.070
Well, of course, it's not
just a static thing.

00:41:45.070 --> 00:41:47.490
We're always looking at
improving our APIs and

00:41:47.490 --> 00:41:50.140
especially this one.

00:41:50.140 --> 00:41:52.160
Here's a list of features that
we're looking to improve.

00:41:52.160 --> 00:41:57.480
The first one is a way for your
application to store its

00:41:57.480 --> 00:42:02.050
custom metadata against our
files in Google Drive.

00:42:02.050 --> 00:42:04.430
That's a very, very
requested feature.

00:42:04.430 --> 00:42:05.210
And it's pretty cool.

00:42:05.210 --> 00:42:07.670
Imagine if you have your own
ID for the file in your

00:42:07.670 --> 00:42:10.710
database, you just store
it in Google Drive.

00:42:10.710 --> 00:42:12.890
And then you can access
and get that later.

00:42:12.890 --> 00:42:15.606
So you can just tag any
arbitrary data you want on to

00:42:15.606 --> 00:42:18.290
your file, and that will
be really useful.

00:42:18.290 --> 00:42:21.090
Batching, that's something the
Documents List API has.

00:42:21.090 --> 00:42:24.880
You put a number of requests
together in a single request,

00:42:24.880 --> 00:42:26.550
you send that to the API.

00:42:26.550 --> 00:42:29.570
The Drive API will be
responsible for splitting each

00:42:29.570 --> 00:42:32.270
of those requests up into their
individual operations,

00:42:32.270 --> 00:42:34.890
performing each of those
operations, and then

00:42:34.890 --> 00:42:37.920
aggregating the results, and
sending them back to you.

00:42:37.920 --> 00:42:40.690
If you had to make 100 requests,
all very similar,

00:42:40.690 --> 00:42:42.730
you could just send them as a
single batch request, and that

00:42:42.730 --> 00:42:48.510
will save a huge amount
of network for you.

00:42:48.510 --> 00:42:51.490
When you upload media files
to Google Drive, we know a

00:42:51.490 --> 00:42:52.740
certain amount about them.

00:42:52.740 --> 00:42:55.840
Obviously, images have Exif
data, movies have other kind

00:42:55.840 --> 00:42:59.390
of data, transcoding
and subtitles,

00:42:59.390 --> 00:43:00.120
these kind of things.

00:43:00.120 --> 00:43:01.830
And we do all of that.

00:43:01.830 --> 00:43:04.360
So we're trying to get
better at exposing

00:43:04.360 --> 00:43:05.200
these things for you.

00:43:05.200 --> 00:43:07.910
That would really help our
photo album application.

00:43:07.910 --> 00:43:09.850
Because you'd have all the Exif
data, and you wouldn't

00:43:09.850 --> 00:43:11.560
have to do any of that
processing yourself.

00:43:11.560 --> 00:43:12.920
Really useful.

00:43:12.920 --> 00:43:16.190
The other two features I've got
there, the first one is

00:43:16.190 --> 00:43:17.330
push notifications.

00:43:17.330 --> 00:43:20.310
Now, we've recommended you
use the changes feed.

00:43:20.310 --> 00:43:21.440
Of course, that's great.

00:43:21.440 --> 00:43:24.670
But why poll in a situation
where you're going to get a

00:43:24.670 --> 00:43:26.750
push notification?

00:43:26.750 --> 00:43:28.710
Obviously, this will
be different

00:43:28.710 --> 00:43:29.700
for different platforms.

00:43:29.700 --> 00:43:32.360
But every time a change happens,
we will send a

00:43:32.360 --> 00:43:34.210
notification to your
application, whether it be a

00:43:34.210 --> 00:43:36.970
web server, whether it be a
mobile device, whether it be a

00:43:36.970 --> 00:43:38.760
client application
on a desktop.

00:43:38.760 --> 00:43:41.690
They use different mechanisms,
but there will be a way that

00:43:41.690 --> 00:43:45.750
we can send a notification to
your application to say

00:43:45.750 --> 00:43:46.790
something's changed.

00:43:46.790 --> 00:43:49.360
So no longer will you have to
be doing repeated polling.

00:43:49.360 --> 00:43:51.960
Again, this will save a
huge amount of data.

00:43:51.960 --> 00:43:55.190
And finally is our collaboration
engine.

00:43:55.190 --> 00:43:58.250
One of my favorite features
about Google Docs and Google

00:43:58.250 --> 00:44:00.800
Drive is that more than
one person can use the

00:44:00.800 --> 00:44:01.900
file at the same time.

00:44:01.900 --> 00:44:02.730
I mean, it's incredible.

00:44:02.730 --> 00:44:04.030
You've seen it, you've
used it.

00:44:04.030 --> 00:44:06.430
5 people, 10 people can use
it at the same time.

00:44:06.430 --> 00:44:09.750
You see all the cursors, you see
what everyone's writing at

00:44:09.750 --> 00:44:11.560
the same time.

00:44:11.560 --> 00:44:14.610
This will no longer be limited
to our applications.

00:44:14.610 --> 00:44:17.190
This is a JavaScript library
that you will be able to put

00:44:17.190 --> 00:44:20.350
in your applications to
provide this amazing

00:44:20.350 --> 00:44:22.290
collaborative functionality.

00:44:22.290 --> 00:44:28.070
We had a talk on this by Josh
and John called "Launching the

00:44:28.070 --> 00:44:30.180
New Google Drive SDK,"
and they actually

00:44:30.180 --> 00:44:31.100
have a demo of this.

00:44:31.100 --> 00:44:34.150
And if you can check that video
out on YouTube, it's

00:44:34.150 --> 00:44:35.750
pretty cool, we think.

00:44:35.750 --> 00:44:38.410
So those are our future
features.

00:44:38.410 --> 00:44:39.665
These are in the immediate
future.

00:44:39.665 --> 00:44:42.230
You know we're busy.

00:44:42.230 --> 00:44:48.490
But the important thing here is
that we are guided by you.

00:44:48.490 --> 00:44:52.350
So we want to know what features
you want in the API,

00:44:52.350 --> 00:44:54.990
and we will implement them.

00:44:54.990 --> 00:44:56.490
You're thinking, wow,
what a nice guy.

00:44:56.490 --> 00:44:58.270
It's not because
I'm a nice guy.

00:44:58.270 --> 00:45:03.990
The people we care about most
are the users of Google Drive.

00:45:03.990 --> 00:45:08.850
Your applications enhance their
experience, improve

00:45:08.850 --> 00:45:09.730
their experience.

00:45:09.730 --> 00:45:12.600
Your excellent applications
enhance their

00:45:12.600 --> 00:45:14.840
experience a lot.

00:45:14.840 --> 00:45:17.980
And so if you can make them
happy, if you can improve

00:45:17.980 --> 00:45:20.980
their experience in Google
Drive, then that makes us

00:45:20.980 --> 00:45:21.770
extremely happy.

00:45:21.770 --> 00:45:22.960
Makes everyone happy.

00:45:22.960 --> 00:45:24.600
So that's why we love you.

00:45:24.600 --> 00:45:25.830
That's why we love developers.

00:45:25.830 --> 00:45:28.340
And that's why we really
care what you think.

00:45:28.340 --> 00:45:30.370
So star those issues.

00:45:30.370 --> 00:45:32.950
Send me an email telling me we
have to have this feature, we

00:45:32.950 --> 00:45:34.970
have to have this feature.

00:45:34.970 --> 00:45:36.860
Send us an email saying,
wow, you're so great.

00:45:36.860 --> 00:45:39.050
But really, get in
touch with us.

00:45:39.050 --> 00:45:42.820
Tell us what you need, and
we will be guided by you.

00:45:42.820 --> 00:45:46.280
Happy user, happy developer,
happy Google.

00:45:46.280 --> 00:45:47.530
Thank you very much
for listening.

