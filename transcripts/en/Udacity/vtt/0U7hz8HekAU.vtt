WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
So this is an optional unit.

00:00:02.000 --> 00:00:07.000
I want you to program what you just learned in the previous units,

00:00:07.000 --> 00:00:10.000
and to me, this is an enormous amount of fun.

00:00:10.000 --> 00:00:14.000
It's challenging, especially if you don't have programming experience,

00:00:14.000 --> 00:00:19.000
but it's also the moment where you can really exercise and deeply understand

00:00:19.000 --> 00:00:22.000
some of the very basic concepts we talked about before.

00:00:22.000 --> 00:00:25.000
Of course these concepts weren't particularly hard.

00:00:25.000 --> 00:00:27.000
Really important is this is optional.

00:00:27.000 --> 00:00:30.000
This is not required for completing the class.

00:00:30.000 --> 00:00:32.000
This is really just a fun exercise,

00:00:32.000 --> 00:00:35.000
so feel free to go to the next unit

00:00:35.000 --> 00:00:37.000
if you don't want to program.

00:00:37.000 --> 00:00:41.000
So in the first exercise, we will calculate the mean of data.

00:00:41.000 --> 00:00:44.000
So we'll define what "mean" means.

00:00:44.000 --> 00:00:47.000
This means define mean, and mean is computed of something.

00:00:47.000 --> 00:00:49.000
So it's computed of data,

00:00:49.000 --> 00:00:51.000
and there's this funny notion of return,

00:00:51.000 --> 00:00:53.000
where you put the mathematic expression for the mean.

00:00:53.000 --> 00:00:58.000
So when you want to print, say, the mean of this specific data set here--

00:00:58.000 --> 00:01:00.000
let's call this "data 1"--

00:01:00.000 --> 00:01:03.000
you would say print mean of data 1.

00:01:03.000 --> 00:01:05.000
Now this is a little bit more complicated

00:01:05.000 --> 00:01:08.000
than the kind of instructions we did before.

00:01:08.000 --> 00:01:11.000
I'm actually defining what's called a function,

00:01:11.000 --> 00:01:15.000
and the reason why I do this is it allows us to test your function

00:01:15.000 --> 00:01:18.000
with different data examples to make sure it's really correct.

00:01:18.000 --> 00:01:21.000
But the key thing is you have to return the correct thing over here.

00:01:21.000 --> 00:01:23.000
I'll give you a hint:

00:01:23.000 --> 00:01:26.000
In Python, there are special commands.

00:01:26.000 --> 00:01:28.000
One is called "sum."

00:01:28.000 --> 00:01:30.000
Sum applies to lists like this one over here.

00:01:30.000 --> 00:01:33.000
It gives you the sum of all the elements.

00:01:33.000 --> 00:01:36.000
In this case, sum of data should give you

00:01:36.000 --> 00:01:38.000
the sum of those numbers over here,

00:01:38.000 --> 00:01:41.000
which will be 2 if you add them all up.

00:01:41.000 --> 00:01:43.000
The other convenient function

00:01:43.000 --> 00:01:46.000
that is part of the programming system of Python

00:01:46.000 --> 00:01:48.000
that you should just know it exists

00:01:48.000 --> 00:01:50.000
is called "len," short for length.

00:01:50.000 --> 00:01:52.000
How long is this thing?

00:01:52.000 --> 00:01:55.000
This thing here is 5 elements. One, two, three, four, five.

00:01:55.000 --> 00:01:57.000
So that'll give you 5.

00:01:57.000 --> 00:02:01.000
So let's dive in. Here's our programming environment with a data sequence.

00:02:01.000 --> 00:02:04.000
I'm setting up the mean function right over here.

00:02:04.000 --> 00:02:06.000
You are to return something.

00:02:06.000 --> 00:02:08.000
This is where you put your code.

00:02:08.000 --> 00:02:10.000
And then for testing, I just say

00:02:10.000 --> 00:02:14.000
let's run this function and print up what it returns. That's the syntax.

00:02:14.000 --> 00:02:16.000
So let me give you an example:

00:02:16.000 --> 00:02:18.000
Suppose you put a fixed value over in here,

00:02:18.000 --> 00:02:21.000
like 12 in this case.

00:02:21.000 --> 00:02:23.000
Now we hit the run button.

00:02:23.000 --> 00:02:26.000
Then the output would be 12, which is not the correct answer,

00:02:26.000 --> 00:02:29.000
but you can play with that.

00:02:29.000 --> 00:02:32.000
If you say return sum of data,

00:02:32.000 --> 00:02:37.000
which is the command I've just given you, and hit the run button,

00:02:37.000 --> 00:02:43.000
then for this specific data sequence you get 8 and not 16.0 as the answer.

00:02:43.000 --> 99:59:59.000
Now the job is yours to plug in the right answer over in here.

