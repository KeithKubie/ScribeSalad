WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.410
 in this capsule we will see a 

00:00:02.159 --> 00:00:08.220
 description and a premium for 

00:00:04.410 --> 00:00:09.719
 the star algorithm then we are 

00:00:08.220 --> 00:00:11.639
 in the context of research 

00:00:09.719 --> 00:00:13.080
 heuristic we want to use the 

00:00:11.639 --> 00:00:15.120
 heuristic search to solve a 

00:00:13.080 --> 00:00:18.090
 problem that we formulated as a 

00:00:15.120 --> 00:00:19.590
 search problem in a serious so 

00:00:18.090 --> 00:00:22.050
 the heuristic search is actually 

00:00:19.590 --> 00:00:25.890
 an approach that is very very popular 

00:00:22.050 --> 00:00:28.429
 in artificial legs particles 

00:00:25.890 --> 00:00:31.619
 and classical artificial intelligence 

00:00:28.429 --> 00:00:33.000
 and in this case what's new by 

00:00:31.619 --> 00:00:36.750
 report to search in a graph 

00:00:33.000 --> 00:00:38.640
 that we already know the taitra is 

00:00:36.750 --> 00:00:41.640
 we will add a tic nurse who 

00:00:38.640 --> 00:00:44.219
 is used to guide research to 

00:00:41.640 --> 00:00:46.200
 from a priori knowledge that we have 

00:00:44.219 --> 00:00:47.550
 in relation to the fields of application 

00:00:46.200 --> 00:00:49.550
 so that's a way for us as 

00:00:47.550 --> 00:00:51.660
 user to insert 

00:00:49.550 --> 00:00:53.190
 domain-specific knowledge 

00:00:51.660 --> 00:00:54.480
 application for which we will do 

00:00:53.190 --> 00:00:57.360
 a search in a serious 

00:00:54.480 --> 00:00:59.370
 note that in this case graffiti it 

00:00:57.360 --> 00:01:01.260
 is actually defined recurrently 

00:00:59.370 --> 00:01:04.470
 and you implied that our 

00:01:01.260 --> 00:01:06.150
 transition function if we apply it from 

00:01:04.470 --> 00:01:07.920
 recurring way came would generate 

00:01:06.150 --> 00:01:10.860
 the whole graph hell your pockets 

00:01:07.920 --> 00:01:12.540
 generate the graffiti or complete before 

00:01:10.860 --> 00:01:14.820
 start the search we will generate 

00:01:12.540 --> 00:01:17.570
 recursively to the needs during 

00:01:14.820 --> 00:01:17.570
 our exploration 

00:01:17.689 --> 00:01:23.189
 so what is the star algorithm 

00:01:20.909 --> 00:01:25.530
 a way to understand green algae 

00:01:23.189 --> 00:01:28.380
 to stars it's like an extension of 

00:01:25.530 --> 00:01:32.540
 the size 3 flu is actually it's 

00:01:28.380 --> 00:01:34.290
 an extension that basically goes 

00:01:32.540 --> 00:01:36.450
 incorporated the addition of a logistics 

00:01:34.290 --> 00:01:38.700
 precisely to guide the search for 

00:01:36.450 --> 00:01:41.640
 we hope to speed up the search 

00:01:38.700 --> 00:01:44.399
 compared to astra and in fact one 

00:01:41.640 --> 00:01:49.890
 will see that I'm dealing with a particular case 

00:01:44.399 --> 00:01:51.869
 of 1 star so a ristic 

00:01:49.890 --> 00:01:55.590
 we will define it specifically as 

00:01:51.869 --> 00:01:58.860
 being a function h2n2 n is in us and 

00:01:55.590 --> 00:02:03.990
 which returns us an estimate of the cost 

00:01:58.860 --> 00:02:04.619
 staying between them n is the goal to 

00:02:03.990 --> 00:02:06.960
 reach 

00:02:04.619 --> 00:02:08.670
 so it's a kind of prediction of 

00:02:06.960 --> 00:02:12.180
 cost that remains to be paid from a 

00:02:08.670 --> 00:02:14.790
 hate to get by bus from the 

00:02:12.180 --> 00:02:17.430
 path that will be optimal to troll and the 

00:02:14.790 --> 00:02:18.600
 wall purpose obviously this is a prediction 

00:02:17.430 --> 00:02:20.130
 that is, we do not have this 

00:02:18.600 --> 00:02:22.050
 information there since we do not know the 

00:02:20.130 --> 00:02:23.190
 optimal path but via the risk is 

00:02:22.050 --> 00:02:24.890
 that we can influence the 

00:02:23.190 --> 00:02:27.209
 research 

00:02:24.890 --> 00:02:28.800
 pointing to paths that are more 

00:02:27.209 --> 00:02:31.500
 promising because according to others 

00:02:28.800 --> 00:02:34.620
 estimates the cost still to be paid for 

00:02:31.500 --> 00:02:36.600
 what we had goal would be smaller the 

00:02:34.620 --> 00:02:37.200
 and rustic then the development of 

00:02:36.600 --> 00:02:38.489
 ristic 

00:02:37.200 --> 00:02:39.540
 it's something we often see 

00:02:38.489 --> 00:02:42.180
 in the works in intelligence 

00:02:39.540 --> 00:02:45.420
 artificial either via a 

00:02:42.180 --> 00:02:47.310
 very advanced definition of 

00:02:45.420 --> 00:02:48.450
 logistics or via algorithms that 

00:02:47.310 --> 00:02:51.739
 may try to learn 

00:02:48.450 --> 00:02:54.959
 automatically and the restic is so 

00:02:51.739 --> 00:02:58.260
 here in this capture we will see a 

00:02:54.959 --> 00:03:01.080
 relatively general algorithm a pure 

00:02:58.260 --> 00:03:03.540
 the code for which a little more generic 

00:03:01.080 --> 00:03:06.110
 and for which 1 star is going to be a case 

00:03:03.540 --> 00:03:06.110
 particular 

00:03:06.900 --> 00:03:10.019
 before watching the boycott of their 

00:03:08.310 --> 00:03:11.190
 star I'll all talked about two 

00:03:10.019 --> 00:03:12.900
 variables that are important in 

00:03:11.190 --> 00:03:15.150
 writing web execution 

00:03:12.900 --> 00:03:17.640
 the first is the open variable which 

00:03:15.150 --> 00:03:19.680
 actually goes to a list that 

00:03:17.640 --> 00:03:22.230
 contains the walls that have not been 

00:03:19.680 --> 00:03:24.360
 treated and specifically that fits 

00:03:22.230 --> 00:03:27.480
 on the border of the graffl 

00:03:24.360 --> 00:03:29.910
 explored until now has more to see 

00:03:27.480 --> 00:03:32.060
 another variable claude who she's going 

00:03:29.910 --> 00:03:34.350
 contain the nodes that have been processed 

00:03:32.060 --> 00:03:37.170
 which is inside the 

00:03:34.350 --> 00:03:39.750
 boundary delimited by open so by 

00:03:37.170 --> 00:03:42.209
 example when running two stars 

00:03:39.750 --> 00:03:45.360
 we could find a certain moment 

00:03:42.209 --> 00:03:48.480
 an open list that would contain it's 

00:03:45.360 --> 00:03:49.350
 three draws also in which cola 

00:03:48.480 --> 00:03:52.470
 variable close 

00:03:49.350 --> 00:03:56.040
 it would contain the knots here since 

00:03:52.470 --> 00:03:58.130
 it's worthless we had to be 

00:03:56.040 --> 00:04:00.600
 to be daring but he also 

00:03:58.130 --> 00:04:03.060
 offered finally measure of execution 

00:04:00.600 --> 00:04:06.030
 stars we will insert open stripping 

00:04:03.060 --> 00:04:07.799
 withdrew then the nails go out and who 

00:04:06.030 --> 00:04:10.350
 are treated will go to end up by 

00:04:07.799 --> 00:04:11.790
 following in plos what will keep him 

00:04:10.350 --> 00:04:15.829
 a list finally of all the nodes 

00:04:11.790 --> 00:04:15.829
 who have already been treated 

00:04:18.560 --> 00:04:24.480
 the knots in open on will keep them 

00:04:22.110 --> 00:04:26.130
 sort they will be sorted according to 

00:04:24.480 --> 00:04:28.230
 balleure f2m java is a species 

00:04:26.130 --> 00:04:33.060
 destination of the potential value 

00:04:28.230 --> 00:04:35.940
 one hour f2 so the function f on 

00:04:33.060 --> 00:04:38.160
 call it the evaluations function and 

00:04:35.940 --> 00:04:42.060
 this function of its purpose is to 

00:04:38.160 --> 00:04:45.390
 to estimate the cost of the best path that 

00:04:42.060 --> 00:04:49.700
 part of an initial increase that goes through 

00:04:45.390 --> 00:04:52.920
 reindeer and who finally gets to the point 

00:04:49.700 --> 00:04:55.980
 so fdn sadoine oath is a number 

00:04:52.920 --> 00:04:57.750
 is it positive or zero since the 

00:04:55.980 --> 00:04:59.640
 costs associated with the arts has been positive 

00:04:57.750 --> 00:05:02.280
 minutes so uncertain an estimate 

00:04:59.640 --> 00:05:03.960
 which is going to be positive or zero and that's 

00:05:02.280 --> 00:05:05.880
 in some way an evaluation of the 

00:05:03.960 --> 00:05:09.630
 potential of an honor to be part 

00:05:05.880 --> 00:05:12.180
 to be part of the optimal path 

00:05:09.630 --> 00:05:15.510
 in the graph 

00:05:12.180 --> 00:05:17.220
 so as I said in open on 

00:05:15.510 --> 00:05:19.500
 keep the knots in one order 

00:05:17.220 --> 00:05:21.210
 growing in their value 

00:05:19.500 --> 00:05:23.610
 fdn their function value 

00:05:21.210 --> 00:05:26.580
 of evaluations and to do that we have 

00:05:23.610 --> 00:05:28.470
 just to sort through insert to 

00:05:26.580 --> 00:05:31.530
 the purchase every time we insert a 

00:05:28.470 --> 00:05:33.390
 node in open so like that one 

00:05:31.530 --> 00:05:37.080
 ensures that the list is 

00:05:33.390 --> 00:05:38.580
 today and finally to take 

00:05:37.080 --> 00:05:40.140
 the most promising nude at each 

00:05:38.580 --> 00:05:41.670
 iteration of the star but we will have 

00:05:40.140 --> 00:05:45.740
 simply learn the first we 

00:05:41.670 --> 00:05:45.740
 in the red list 

00:05:49.040 --> 00:05:53.360
 now definition a little better the 

00:05:51.050 --> 00:05:54.500
 evaluation function so as I say 

00:05:53.360 --> 00:05:56.000
 at the assessments function as much 

00:05:54.500 --> 00:05:58.580
 to estimate the cost of the optimal path 

00:05:56.000 --> 00:06:02.570
 between the novitiate the initial name by 

00:05:58.580 --> 00:06:04.970
 whose purpose is specifically brain 

00:06:02.570 --> 00:06:07.250
 head for the path that goes through the n 

00:06:04.970 --> 00:06:09.800
 on the other hand obviously we do not know 

00:06:07.250 --> 00:06:12.050
 does this shot there since for the 

00:06:09.800 --> 00:06:14.750
 to know should actually know the 

00:06:12.050 --> 00:06:16.070
 the optimal path will actually make known 

00:06:14.750 --> 00:06:18.260
 the optimal path that goes everywhere 

00:06:16.070 --> 00:06:19.550
 Lenin what we do not know about these offices 

00:06:18.260 --> 00:06:24.530
 which is partly what we are looking for 

00:06:19.550 --> 00:06:26.450
 so at any time by cons there is 

00:06:24.530 --> 00:06:31.520
 something we know who is for 

00:06:26.450 --> 00:06:36.410
 the part already explored that it is in 

00:06:31.520 --> 00:06:39.860
 makes the optimal cost to get to this 

00:06:36.410 --> 00:06:41.150
 we hockey so that's something 

00:06:39.860 --> 00:06:42.800
 thing we know given the the 

00:06:41.150 --> 00:06:44.240
 part of the globe that have explored one is 

00:06:42.800 --> 00:06:47.300
 able to say what is the cost 

00:06:44.240 --> 00:06:50.330
 associate as low as possible for the 

00:06:47.300 --> 00:06:53.650
 explored part of getting to go 

00:06:50.330 --> 00:06:57.020
 an initial as has not explored it m 

00:06:53.650 --> 00:06:59.180
 so in the paintings what are we going to do 

00:06:57.020 --> 00:07:01.520
 the party is that the function 

00:06:59.180 --> 00:07:03.710
 of ebden assessments we will separate them into 

00:07:01.520 --> 00:07:05.960
 two by the first part that we 

00:07:03.710 --> 00:07:07.790
 was calling me jdn who's going to be the cost 

00:07:05.960 --> 00:07:11.380
 precisely the best path that led 

00:07:07.790 --> 00:07:14.170
 to this not since the original name 

00:07:11.380 --> 00:07:16.460
 so it's really the best way 

00:07:14.170 --> 00:07:19.010
 find until now to get 

00:07:16.460 --> 00:07:23.030
 return to reindeer from the node 

00:07:19.010 --> 00:07:24.950
 initial and then we will study 

00:07:23.030 --> 00:07:27.320
 also the logistics function h of 

00:07:24.950 --> 00:07:30.650
 hate who she will estimate the rest of the 

00:07:27.320 --> 00:07:32.840
 So that's our function 

00:07:30.650 --> 00:07:36.530
 logistics and its role is to try 

00:07:32.840 --> 00:07:39.620
 to estimate the rest of the cost of the path 

00:07:36.530 --> 00:07:41.840
 optimal who would leave hatred and who would 

00:07:39.620 --> 00:07:44.450
 would make it to the end so we 

00:07:41.840 --> 00:07:47.780
 could get a cost estimate 

00:07:44.450 --> 00:07:49.430
 who is talking about an initial that goes from 

00:07:47.780 --> 00:07:51.310
 shot of the path that speaks of an initial 

00:07:49.430 --> 00:07:55.310
 which goes through reindeer and that ends 

00:07:51.310 --> 00:07:59.690
 honor i'll goal by adding up 

00:07:55.310 --> 00:08:02.310
 just gdn more hd and so in 

00:07:59.690 --> 00:08:04.320
 the star is the structure that 

00:08:02.310 --> 00:08:06.420
 learn our function from our 

00:08:04.320 --> 00:08:10.410
 evaluations function savate lgdn plus 

00:08:06.420 --> 00:08:14.280
 h 2 m and we will again assume 

00:08:10.410 --> 00:08:18.390
 that hd n is always negative and that in 

00:08:14.280 --> 00:08:22.170
 the more we have the property than if I evaluate h 

00:08:18.390 --> 00:08:25.020
 of hate for the goal node so if n is 

00:08:22.170 --> 00:08:27.120
 the nephew hd n is going to be zero 

00:08:25.020 --> 00:08:28.740
 fectively scoci the way for himself 

00:08:27.120 --> 00:08:31.980
 to make a bus from a view 

00:08:28.740 --> 00:08:37.440
 logical it makes sense to return a 

00:08:31.980 --> 00:08:39.840
 value of 0 looking at some examples 

00:08:37.440 --> 00:08:41.520
 ristic functions for maybe 

00:08:39.840 --> 00:08:43.680
 make the concept a little more tangible 

00:08:41.520 --> 00:08:47.520
 so we speak the logistics function h 

00:08:43.680 --> 00:08:48.930
 of hate in one application we had to 

00:08:47.520 --> 00:08:51.240
 find the shortest way between 

00:08:48.930 --> 00:08:53.010
 two cities we could use the 

00:08:51.240 --> 00:08:54.690
 Euclidean distance on the map is 

00:08:53.010 --> 00:08:59.340
 to say the final but the flying distance 

00:08:54.690 --> 00:09:00.210
 of bird between a city n and the city 

00:08:59.340 --> 00:09:02.910
 of destination 

00:09:00.210 --> 00:09:04.860
 so it's actually we can 

00:09:02.910 --> 00:09:07.500
 would be a way to estimate how much 

00:09:04.860 --> 00:09:08.880
 our naughty by which we passed 

00:09:07.500 --> 00:09:10.880
 to get to the city of 

00:09:08.880 --> 00:09:14.280
 destination will allow us to 

00:09:10.880 --> 00:09:19.260
 get as close as possible to our 

00:09:14.280 --> 00:09:20.790
 city ​​of distance for puzzle game 

00:09:19.260 --> 00:09:22.890
 like the top npws we could use 

00:09:20.790 --> 00:09:24.120
 the number of tiles that are 

00:09:22.890 --> 00:09:26.000
 currently misplaced 

00:09:24.120 --> 00:09:29.520
 comparatively the configuration 

00:09:26.000 --> 00:09:30.780
 final goal so actually this 

00:09:29.520 --> 00:09:32.940
 are all tiles that will have to 

00:09:30.780 --> 00:09:34.770
 be moved so we'll at least have had one 

00:09:32.940 --> 00:09:38.490
 move to do for each of these 

00:09:34.770 --> 00:09:41.820
 tiles da then in general if we have 

00:09:38.490 --> 00:09:43.680
 a game makes the idea behind the 

00:09:41.820 --> 00:09:45.060
 logistics function cdh estimates of a 

00:09:43.680 --> 00:09:47.280
 somehow the quality of the 

00:09:45.060 --> 00:09:49.110
 game configuration versus a 

00:09:47.280 --> 00:09:51.030
 configuration that is winning 

00:09:49.110 --> 00:09:52.530
 ok so that's what kind of notions there 

00:09:51.030 --> 00:09:58.470
 we want to introduce in the 

00:09:52.530 --> 00:10:00.870
 functions and ristic so let's look in 

00:09:58.470 --> 00:10:03.510
 the detail the pseudo code for a 

00:10:00.870 --> 00:10:06.840
 generic search algorithm in 

00:10:03.510 --> 00:10:08.670
 a graph for which we did as 

00:10:06.840 --> 00:10:11.810
 special cases when f corresponds to 

00:10:08.670 --> 00:10:14.220
 the sum of j2h the star algorithm 

00:10:11.810 --> 00:10:15.300
 so at the very beginning what we do is 

00:10:14.220 --> 00:10:18.360
 we declare 

00:10:15.300 --> 00:10:21.180
 a hate and as a bonus we will not be the 

00:10:18.360 --> 00:10:23.940
 wall currently treated and prints vote 

00:10:21.180 --> 00:10:27.450
 ific be one of the leading children of 

00:10:23.940 --> 00:10:31.380
 hate declared our two lists to punk 

00:10:27.450 --> 00:10:33.060
 lost and we will insert the initial name that 

00:10:31.380 --> 00:10:35.670
 we passed there an argument our 

00:10:33.060 --> 00:10:37.380
 function also we're going to insert the 

00:10:35.670 --> 00:10:39.959
 initial name in open so does a 

00:10:37.380 --> 00:10:42.779
 list with only one of his one's going 

00:10:39.959 --> 00:10:44.579
 see a loop here that goes only 

00:10:42.779 --> 00:10:47.070
 completed when a certain condition is 

00:10:44.579 --> 00:10:50.850
 output will be detected in the 

00:10:47.070 --> 00:10:53.070
 loop and at each iteration of the 

00:10:50.850 --> 00:10:54.149
 loop we will do the operations 

00:10:53.070 --> 00:10:56.970
 following 

00:10:54.149 --> 00:11:00.180
 clearly so open obvious then in this 

00:10:56.970 --> 00:11:02.490
 In this case, we'll go out and we'll get out of the 

00:11:00.180 --> 00:11:04.709
 boucan returns to failure so we 

00:11:02.490 --> 00:11:07.200
 would give a signal that would determine 

00:11:04.709 --> 00:11:11.570
 that in fact there is no way to leave 

00:11:07.200 --> 00:11:14.070
 of the initial name is to go to the beginning 

00:11:11.570 --> 00:11:16.440
 so if this condition is not true 

00:11:14.070 --> 00:11:20.100
 we can go here where she is going to be 

00:11:16.440 --> 00:11:22.950
 assigned honor which at the beginning of the open 

00:11:20.100 --> 00:11:26.399
 of Switzerland and the most promising draw 

00:11:22.950 --> 00:11:28.140
 then we will remove m2 open then in 

00:11:26.399 --> 00:11:30.630
 do we all go right now add it 

00:11:28.140 --> 00:11:32.790
 in claude so the rest of the bo 

00:11:30.630 --> 00:11:34.680
 the iteration of this iteration there in 

00:11:32.790 --> 00:11:35.040
 the loop will do the treatment of 

00:11:34.680 --> 00:11:36.930
 hatred 

00:11:35.040 --> 00:11:38.579
 and then at the very end we could 

00:11:36.930 --> 00:11:40.910
 add it to the very end but as long as 

00:11:38.579 --> 00:11:46.380
 do we go add it to everything said 

00:11:40.910 --> 00:11:49.829
 then if n matches so if we have 

00:11:46.380 --> 00:11:52.440
 managed to get to our destination 

00:11:49.829 --> 00:11:55.320
 an ubu but when if we go out of the 

00:11:52.440 --> 00:11:57.930
 loop and we will return the path that 

00:11:55.320 --> 00:12:00.360
 brought us to this draw at m 

00:11:57.930 --> 00:12:01.589
 so it will be involved that's a little bit 

00:12:00.360 --> 00:12:04.199
 as said otherwise we do not have all the 

00:12:01.589 --> 00:12:06.720
 details but it implies from 1 

00:12:04.199 --> 00:12:08.880
 it's possible to trace what was it 

00:12:06.720 --> 00:12:11.490
 his parent to this one is the godfather of 

00:12:08.880 --> 00:12:12.800
 his godfather is located until 

00:12:11.490 --> 00:12:15.060
 initial name 

00:12:12.800 --> 00:12:17.100
 if it's not our goal, well, what are we going to 

00:12:15.060 --> 00:12:19.079
 do is add in open 

00:12:17.100 --> 00:12:20.850
 leaders and this one it'll be the 

00:12:19.079 --> 00:12:23.910
 successor leaders for the duds finally 

00:12:20.850 --> 00:12:25.470
 of hate so essentially with the 

00:12:23.910 --> 00:12:26.760
 new premiums that belong to the 

00:12:25.470 --> 00:12:28.000
 list that we go back by 

00:12:26.760 --> 00:12:31.090
 transition from 

00:12:28.000 --> 00:12:33.370
 m enough of that for each of his 

00:12:31.090 --> 00:12:36.850
 successors the un finally we're going 

00:12:33.370 --> 00:12:42.370
 initialize the value for the value of 

00:12:36.850 --> 00:12:45.310
 j2m premium a g2 n plus the cost associated with 

00:12:42.370 --> 00:12:48.970
 go from nkm premium so we remember 

00:12:45.310 --> 00:12:51.130
 that j2m is actually the cost 

00:12:48.970 --> 00:12:52.330
 associate of the best path find 

00:12:51.130 --> 00:12:53.020
 until now to get to 

00:12:52.330 --> 00:12:58.540
 the n 

00:12:53.020 --> 00:13:01.690
 so among others here I had to do initial 

00:12:58.540 --> 00:13:03.460
 they have blue skin n 0 it would be equal 

00:13:01.690 --> 00:13:05.920
 to zero so that will give us our 

00:13:03.460 --> 00:13:09.250
 initial conditions and as and when 

00:13:05.920 --> 00:13:10.930
 how far are we going to explore from 

00:13:09.250 --> 00:13:13.320
 new paths by adding nude 

00:13:10.930 --> 00:13:16.450
 successor well see essentially 

00:13:13.320 --> 00:13:18.160
 get premium j2m values ​​that go 

00:13:16.450 --> 00:13:20.740
 increase since each time we go 

00:13:18.160 --> 00:13:23.410
 add the cost associated with the path of 

00:13:20.740 --> 00:13:27.400
 spend an hour an hour we finally 

00:13:23.410 --> 00:13:29.680
 when an anonymous then enters that 

00:13:27.400 --> 00:13:32.620
 we will put so we will keep 

00:13:29.680 --> 00:13:35.200
 the information that n premiums are our 

00:13:32.620 --> 00:13:38.860
 parents who of the way who led 

00:13:35.200 --> 00:13:40.660
 to a crime knew as a bonus the cee n 

00:13:38.860 --> 00:13:43.540
 so we will assign if we want them 

00:13:40.660 --> 00:13:47.200
 kind of variables chaparral 2nd 

00:13:43.540 --> 00:13:50.830
 bonus to m then we'll check 

00:13:47.200 --> 00:13:53.410
 does klose or open contain in 

00:13:50.830 --> 00:13:56.560
 already makes a bonus that does not contain an em 

00:13:53.410 --> 00:13:59.440
 prime bonus that equals a coin 

00:13:56.560 --> 00:14:02.560
 we've already been to where we already 

00:13:59.440 --> 00:14:05.800
 generated this successor before in 

00:14:02.560 --> 00:14:07.060
 the execution of the algorithm is therefore 

00:14:05.800 --> 00:14:09.490
 this is the first condition the second 

00:14:07.060 --> 00:14:11.230
 condition is what is not appropriate to 

00:14:09.490 --> 00:14:13.870
 generate a premium is actually more 

00:14:11.230 --> 00:14:14.610
 promising that the node we generated 

00:14:13.870 --> 00:14:16.930
 previously 

00:14:14.610 --> 00:14:19.150
 if the most promising so 6th 

00:14:16.930 --> 00:14:22.720
 to print smaller to pebbles f2m 

00:14:19.150 --> 00:14:25.120
 bonuses premium and we will remove m premiums 

00:14:22.720 --> 00:14:30.030
 premium of klose or open according to louis 

00:14:25.120 --> 00:14:32.890
 was and we will insert a premium tower 

00:14:30.030 --> 00:14:36.040
 now if subsequently 6th premium 

00:14:32.890 --> 00:14:38.640
 is not in open so we are not in 

00:14:36.040 --> 00:14:38.640
 added here 

00:14:38.870 --> 00:14:44.029
 so 6th premium is not in open and 

00:14:41.210 --> 00:14:45.920
 is not in close also well 

00:14:44.029 --> 00:14:48.140
 it's a new path that we found 

00:14:45.920 --> 00:14:51.470
 to get to this draw then we go there 

00:14:48.140 --> 00:14:53.450
 i'll insert a bonus in opel and 

00:14:51.470 --> 00:14:59.120
 noticed that the two times we insert 

00:14:53.450 --> 00:15:01.430
 a node in open here here we insert in 

00:14:59.120 --> 00:15:04.279
 gold growth said we place so 

00:15:01.430 --> 00:15:06.850
 to maintain a growing order of 10 

00:15:04.279 --> 00:15:09.410
 f2m values ​​for all the nudes in ok 

00:15:06.850 --> 00:15:09.710
 so here we continue to draw as 

00:15:09.410 --> 00:15:11.690
 it 

00:15:09.710 --> 00:15:15.260
 maybe we'll go back 

00:15:11.690 --> 00:15:17.420
 the path that leads that will lead to a 

00:15:15.260 --> 00:15:19.120
 ubu either we'll go back a failure 

00:15:17.420 --> 00:15:21.410
 because we will not have identified 

00:15:19.120 --> 00:15:23.230
 we are not going to find a way that we 

00:15:21.410 --> 00:15:25.279
 get to the destination 

00:15:23.230 --> 00:15:27.560
 if they finally found that the 

00:15:25.279 --> 00:15:30.320
 destination is not connected none 

00:15:27.560 --> 00:15:31.720
 path between the initial name and another 

00:15:30.320 --> 00:15:34.240
 destination 

00:15:31.720 --> 00:15:38.180
 so that's the description of 

00:15:34.240 --> 00:15:39.650
 two-star premium is so time 

00:15:38.180 --> 00:15:42.020
 next capture let's do an example 

00:15:39.650 --> 00:15:45.820
 to see exactly how you are this 

00:15:42.020 --> 00:15:45.820
 that this algorithm runs it 

