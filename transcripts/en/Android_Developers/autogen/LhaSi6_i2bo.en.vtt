WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.090 align:start position:0%
 
we<00:00:00.570><c> know</c><00:00:00.719><c> developers</c><00:00:01.260><c> don't</c><00:00:01.500><c> like</c><00:00:01.680><c> standing</c>

00:00:02.090 --> 00:00:02.100 align:start position:0%
we know developers don't like standing
 

00:00:02.100 --> 00:00:04.400 align:start position:0%
we know developers don't like standing
still<00:00:02.370><c> and</c><00:00:02.550><c> want</c><00:00:03.060><c> access</c><00:00:03.510><c> to</c><00:00:03.659><c> the</c><00:00:03.780><c> latest</c><00:00:04.170><c> and</c>

00:00:04.400 --> 00:00:04.410 align:start position:0%
still and want access to the latest and
 

00:00:04.410 --> 00:00:06.470 align:start position:0%
still and want access to the latest and
greatest<00:00:04.440><c> features</c><00:00:05.310><c> in</c><00:00:05.490><c> the</c><00:00:05.759><c> tools</c><00:00:06.000><c> they</c><00:00:06.240><c> use</c>

00:00:06.470 --> 00:00:06.480 align:start position:0%
greatest features in the tools they use
 

00:00:06.480 --> 00:00:08.750 align:start position:0%
greatest features in the tools they use
and<00:00:06.750><c> that</c><00:00:07.350><c> includes</c><00:00:07.740><c> programming</c><00:00:08.280><c> languages</c>

00:00:08.750 --> 00:00:08.760 align:start position:0%
and that includes programming languages
 

00:00:08.760 --> 00:00:11.480 align:start position:0%
and that includes programming languages
with<00:00:09.690><c> Android</c><00:00:10.019><c> studio</c><00:00:10.200><c> 3</c><00:00:10.590><c> though</c><00:00:10.800><c> we're</c><00:00:11.340><c> not</c>

00:00:11.480 --> 00:00:11.490 align:start position:0%
with Android studio 3 though we're not
 

00:00:11.490 --> 00:00:13.730 align:start position:0%
with Android studio 3 though we're not
only<00:00:11.790><c> shipping</c><00:00:12.090><c> Kotlin</c><00:00:12.570><c> as</c><00:00:12.719><c> an</c><00:00:13.049><c> official</c><00:00:13.590><c> new</c>

00:00:13.730 --> 00:00:13.740 align:start position:0%
only shipping Kotlin as an official new
 

00:00:13.740 --> 00:00:15.589 align:start position:0%
only shipping Kotlin as an official new
language<00:00:14.099><c> for</c><00:00:14.280><c> Android</c><00:00:14.580><c> but</c><00:00:15.210><c> we're</c><00:00:15.389><c> also</c>

00:00:15.589 --> 00:00:15.599 align:start position:0%
language for Android but we're also
 

00:00:15.599 --> 00:00:17.570 align:start position:0%
language for Android but we're also
making<00:00:16.080><c> life</c><00:00:16.260><c> easier</c><00:00:16.680><c> for</c><00:00:16.949><c> those</c><00:00:17.130><c> of</c><00:00:17.310><c> you</c><00:00:17.430><c> who</c>

00:00:17.570 --> 00:00:17.580 align:start position:0%
making life easier for those of you who
 

00:00:17.580 --> 00:00:20.179 align:start position:0%
making life easier for those of you who
prefer<00:00:17.730><c> to</c><00:00:17.970><c> code</c><00:00:18.300><c> in</c><00:00:18.420><c> Java</c><00:00:18.690><c> by</c><00:00:19.590><c> introducing</c>

00:00:20.179 --> 00:00:20.189 align:start position:0%
prefer to code in Java by introducing
 

00:00:20.189 --> 00:00:21.950 align:start position:0%
prefer to code in Java by introducing
support<00:00:20.520><c> for</c><00:00:20.670><c> Java</c><00:00:20.880><c> 8</c><00:00:21.060><c> language</c><00:00:21.420><c> features</c><00:00:21.779><c> in</c>

00:00:21.950 --> 00:00:21.960 align:start position:0%
support for Java 8 language features in
 

00:00:21.960 --> 00:00:24.380 align:start position:0%
support for Java 8 language features in
the<00:00:22.199><c> default</c><00:00:22.560><c> tool</c><00:00:22.740><c> chain</c><00:00:23.150><c> starting</c><00:00:24.150><c> with</c><00:00:24.300><c> the</c>

00:00:24.380 --> 00:00:24.390 align:start position:0%
the default tool chain starting with the
 

00:00:24.390 --> 00:00:26.870 align:start position:0%
the default tool chain starting with the
Android<00:00:24.720><c> Gradle</c><00:00:25.050><c> plug-in</c><00:00:25.289><c> version</c><00:00:25.590><c> 3</c><00:00:26.010><c> you</c><00:00:26.699><c> can</c>

00:00:26.870 --> 00:00:26.880 align:start position:0%
Android Gradle plug-in version 3 you can
 

00:00:26.880 --> 00:00:28.990 align:start position:0%
Android Gradle plug-in version 3 you can
freely<00:00:27.180><c> use</c><00:00:27.330><c> lambdas</c><00:00:28.080><c> method</c><00:00:28.619><c> references</c>

00:00:28.990 --> 00:00:29.000 align:start position:0%
freely use lambdas method references
 

00:00:29.000 --> 00:00:32.240 align:start position:0%
freely use lambdas method references
default<00:00:30.000><c> and</c><00:00:30.210><c> static</c><00:00:30.539><c> interface</c><00:00:31.050><c> methods</c><00:00:31.500><c> try</c>

00:00:32.240 --> 00:00:32.250 align:start position:0%
default and static interface methods try
 

00:00:32.250 --> 00:00:34.459 align:start position:0%
default and static interface methods try
with<00:00:32.430><c> resources</c><00:00:32.460><c> and</c><00:00:33.210><c> repeating</c><00:00:33.870><c> annotations</c>

00:00:34.459 --> 00:00:34.469 align:start position:0%
with resources and repeating annotations
 

00:00:34.469 --> 00:00:37.760 align:start position:0%
with resources and repeating annotations
on<00:00:34.649><c> all</c><00:00:35.340><c> Android</c><00:00:35.880><c> API</c><00:00:36.210><c> levels</c><00:00:36.630><c> if</c><00:00:37.530><c> you</c>

00:00:37.760 --> 00:00:37.770 align:start position:0%
on all Android API levels if you
 

00:00:37.770 --> 00:00:39.110 align:start position:0%
on all Android API levels if you
previously<00:00:38.100><c> switched</c><00:00:38.550><c> to</c><00:00:38.760><c> using</c><00:00:38.790><c> the</c>

00:00:39.110 --> 00:00:39.120 align:start position:0%
previously switched to using the
 

00:00:39.120 --> 00:00:41.569 align:start position:0%
previously switched to using the
experimental<00:00:39.570><c> Jack</c><00:00:40.110><c> compiler</c><00:00:40.649><c> to</c><00:00:41.219><c> be</c><00:00:41.309><c> able</c><00:00:41.430><c> to</c>

00:00:41.569 --> 00:00:41.579 align:start position:0%
experimental Jack compiler to be able to
 

00:00:41.579 --> 00:00:43.580 align:start position:0%
experimental Jack compiler to be able to
use<00:00:41.879><c> these</c><00:00:42.030><c> features</c><00:00:42.350><c> please</c><00:00:43.350><c> note</c><00:00:43.559><c> that</c>

00:00:43.580 --> 00:00:43.590 align:start position:0%
use these features please note that
 

00:00:43.590 --> 00:00:45.709 align:start position:0%
use these features please note that
there<00:00:43.980><c> are</c><00:00:44.040><c> now</c><00:00:44.219><c> many</c><00:00:44.640><c> benefits</c><00:00:45.180><c> when</c><00:00:45.539><c> using</c>

00:00:45.709 --> 00:00:45.719 align:start position:0%
there are now many benefits when using
 

00:00:45.719 --> 00:00:48.260 align:start position:0%
there are now many benefits when using
the<00:00:45.960><c> default</c><00:00:46.320><c> tool</c><00:00:46.530><c> chain</c><00:00:46.739><c> Jack</c><00:00:47.610><c> offered</c><00:00:48.000><c> more</c>

00:00:48.260 --> 00:00:48.270 align:start position:0%
the default tool chain Jack offered more
 

00:00:48.270 --> 00:00:50.270 align:start position:0%
the default tool chain Jack offered more
restricted<00:00:48.870><c> Java</c><00:00:49.110><c> eight</c><00:00:49.289><c> support</c><00:00:49.739><c> that</c>

00:00:50.270 --> 00:00:50.280 align:start position:0%
restricted Java eight support that
 

00:00:50.280 --> 00:00:52.760 align:start position:0%
restricted Java eight support that
worked<00:00:50.520><c> only</c><00:00:50.760><c> for</c><00:00:51.210><c> API</c><00:00:51.480><c> 24</c><00:00:52.050><c> and</c><00:00:52.199><c> above</c><00:00:52.440><c> it</c>

00:00:52.760 --> 00:00:52.770 align:start position:0%
worked only for API 24 and above it
 

00:00:52.770 --> 00:00:55.369 align:start position:0%
worked only for API 24 and above it
wasn't<00:00:53.699><c> as</c><00:00:53.820><c> fast</c><00:00:54.090><c> when</c><00:00:54.420><c> compiling</c><00:00:54.840><c> code</c><00:00:54.960><c> and</c>

00:00:55.369 --> 00:00:55.379 align:start position:0%
wasn't as fast when compiling code and
 

00:00:55.379 --> 00:00:57.709 align:start position:0%
wasn't as fast when compiling code and
it<00:00:55.739><c> created</c><00:00:56.039><c> problems</c><00:00:56.579><c> for</c><00:00:56.670><c> developers</c><00:00:57.360><c> using</c>

00:00:57.709 --> 00:00:57.719 align:start position:0%
it created problems for developers using
 

00:00:57.719 --> 00:01:00.010 align:start position:0%
it created problems for developers using
tools<00:00:57.989><c> that</c><00:00:58.230><c> depend</c><00:00:58.949><c> on</c><00:00:59.070><c> the</c><00:00:59.160><c> class</c><00:00:59.370><c> format</c>

00:01:00.010 --> 00:01:00.020 align:start position:0%
tools that depend on the class format
 

00:01:00.020 --> 00:01:02.869 align:start position:0%
tools that depend on the class format
that's<00:01:01.020><c> why</c><00:01:01.199><c> we</c><00:01:01.350><c> deprecated</c><00:01:01.980><c> Jack</c><00:01:02.219><c> and</c><00:01:02.460><c> will</c>

00:01:02.869 --> 00:01:02.879 align:start position:0%
that's why we deprecated Jack and will
 

00:01:02.879 --> 00:01:04.490 align:start position:0%
that's why we deprecated Jack and will
no<00:01:03.090><c> longer</c><00:01:03.120><c> support</c><00:01:03.539><c> it</c><00:01:03.899><c> in</c><00:01:04.049><c> Android</c><00:01:04.470><c> studio</c>

00:01:04.490 --> 00:01:04.500 align:start position:0%
no longer support it in Android studio
 

00:01:04.500 --> 00:01:07.219 align:start position:0%
no longer support it in Android studio
and<00:01:04.949><c> tools</c><00:01:05.360><c> the</c><00:01:06.360><c> good</c><00:01:06.600><c> news</c><00:01:06.810><c> is</c><00:01:07.020><c> that</c>

00:01:07.219 --> 00:01:07.229 align:start position:0%
and tools the good news is that
 

00:01:07.229 --> 00:01:09.800 align:start position:0%
and tools the good news is that
switching<00:01:08.070><c> back</c><00:01:08.220><c> is</c><00:01:08.430><c> very</c><00:01:08.700><c> simple</c><00:01:09.150><c> just</c>

00:01:09.800 --> 00:01:09.810 align:start position:0%
switching back is very simple just
 

00:01:09.810 --> 00:01:11.600 align:start position:0%
switching back is very simple just
delete<00:01:10.170><c> these</c><00:01:10.320><c> lines</c><00:01:10.380><c> from</c><00:01:11.010><c> your</c><00:01:11.100><c> build</c><00:01:11.369><c> file</c>

00:01:11.600 --> 00:01:11.610 align:start position:0%
delete these lines from your build file
 

00:01:11.610 --> 00:01:13.880 align:start position:0%
delete these lines from your build file
if<00:01:11.850><c> you're</c><00:01:12.780><c> using</c><00:01:12.960><c> one</c><00:01:13.229><c> of</c><00:01:13.260><c> the</c><00:01:13.439><c> popular</c>

00:01:13.880 --> 00:01:13.890 align:start position:0%
if you're using one of the popular
 

00:01:13.890 --> 00:01:15.800 align:start position:0%
if you're using one of the popular
third-party<00:01:14.250><c> solutions</c><00:01:15.119><c> for</c><00:01:15.360><c> Java</c><00:01:15.600><c> 8</c>

00:01:15.800 --> 00:01:15.810 align:start position:0%
third-party solutions for Java 8
 

00:01:15.810 --> 00:01:18.050 align:start position:0%
third-party solutions for Java 8
language<00:01:16.170><c> features</c><00:01:16.560><c> you</c><00:01:17.280><c> might</c><00:01:17.490><c> find</c><00:01:17.759><c> that</c>

00:01:18.050 --> 00:01:18.060 align:start position:0%
language features you might find that
 

00:01:18.060 --> 00:01:19.789 align:start position:0%
language features you might find that
they<00:01:18.180><c> lack</c><00:01:18.420><c> some</c><00:01:18.720><c> of</c><00:01:18.750><c> the</c><00:01:18.869><c> functionality</c><00:01:19.619><c> of</c>

00:01:19.789 --> 00:01:19.799 align:start position:0%
they lack some of the functionality of
 

00:01:19.799 --> 00:01:21.920 align:start position:0%
they lack some of the functionality of
the<00:01:20.130><c> default</c><00:01:20.490><c> tool</c><00:01:20.700><c> chain</c><00:01:20.939><c> such</c><00:01:21.540><c> as</c><00:01:21.689><c> being</c>

00:01:21.920 --> 00:01:21.930 align:start position:0%
the default tool chain such as being
 

00:01:21.930 --> 00:01:23.810 align:start position:0%
the default tool chain such as being
able<00:01:22.140><c> to</c><00:01:22.320><c> seamlessly</c><00:01:22.680><c> process</c><00:01:23.369><c> libraries</c>

00:01:23.810 --> 00:01:23.820 align:start position:0%
able to seamlessly process libraries
 

00:01:23.820 --> 00:01:26.330 align:start position:0%
able to seamlessly process libraries
that<00:01:24.030><c> use</c><00:01:24.210><c> Java</c><00:01:24.479><c> 8</c><00:01:24.689><c> code</c><00:01:24.960><c> if</c><00:01:25.200><c> you</c><00:01:25.950><c> want</c><00:01:26.100><c> to</c><00:01:26.189><c> make</c>

00:01:26.330 --> 00:01:26.340 align:start position:0%
that use Java 8 code if you want to make
 

00:01:26.340 --> 00:01:28.370 align:start position:0%
that use Java 8 code if you want to make
the<00:01:26.490><c> switch</c><00:01:26.610><c> you'll</c><00:01:27.420><c> have</c><00:01:27.600><c> to</c><00:01:27.720><c> remove</c><00:01:27.960><c> retro</c>

00:01:28.370 --> 00:01:28.380 align:start position:0%
the switch you'll have to remove retro
 

00:01:28.380 --> 00:01:30.140 align:start position:0%
the switch you'll have to remove retro
lambda<00:01:28.740><c> or</c><00:01:28.920><c> dexguard</c><00:01:29.310><c> from</c><00:01:29.759><c> your</c><00:01:29.909><c> build</c>

00:01:30.140 --> 00:01:30.150 align:start position:0%
lambda or dexguard from your build
 

00:01:30.150 --> 00:01:32.390 align:start position:0%
lambda or dexguard from your build
otherwise<00:01:31.079><c> the</c><00:01:31.380><c> built-in</c><00:01:31.740><c> support</c><00:01:31.890><c> will</c>

00:01:32.390 --> 00:01:32.400 align:start position:0%
otherwise the built-in support will
 

00:01:32.400 --> 00:01:34.819 align:start position:0%
otherwise the built-in support will
remain<00:01:32.700><c> disabled</c><00:01:33.240><c> other</c><00:01:33.810><c> than</c><00:01:34.140><c> that</c><00:01:34.320><c> make</c>

00:01:34.819 --> 00:01:34.829 align:start position:0%
remain disabled other than that make
 

00:01:34.829 --> 00:01:36.260 align:start position:0%
remain disabled other than that make
sure<00:01:34.860><c> you</c><00:01:35.130><c> have</c><00:01:35.159><c> the</c><00:01:35.430><c> following</c><00:01:35.670><c> lines</c><00:01:36.030><c> in</c>

00:01:36.260 --> 00:01:36.270 align:start position:0%
sure you have the following lines in
 

00:01:36.270 --> 00:01:38.480 align:start position:0%
sure you have the following lines in
build.gradle<00:01:36.659><c> and</c><00:01:37.170><c> that</c><00:01:37.740><c> you're</c><00:01:37.979><c> using</c><00:01:38.220><c> at</c>

00:01:38.480 --> 00:01:38.490 align:start position:0%
build.gradle and that you're using at
 

00:01:38.490 --> 00:01:40.600 align:start position:0%
build.gradle and that you're using at
least<00:01:38.520><c> Android</c><00:01:39.210><c> Gradle</c><00:01:39.570><c> plug-in</c><00:01:39.810><c> version</c><00:01:40.140><c> 3</c>

00:01:40.600 --> 00:01:40.610 align:start position:0%
least Android Gradle plug-in version 3
 

00:01:40.610 --> 00:01:43.010 align:start position:0%
least Android Gradle plug-in version 3
for<00:01:41.610><c> important</c><00:01:42.150><c> plug-in</c><00:01:42.540><c> migration</c>

00:01:43.010 --> 00:01:43.020 align:start position:0%
for important plug-in migration
 

00:01:43.020 --> 00:01:45.710 align:start position:0%
for important plug-in migration
instructions<00:01:43.649><c> refer</c><00:01:44.430><c> to</c><00:01:44.610><c> our</c><00:01:44.729><c> other</c><00:01:44.939><c> video</c><00:01:45.329><c> or</c>

00:01:45.710 --> 00:01:45.720 align:start position:0%
instructions refer to our other video or
 

00:01:45.720 --> 00:01:47.179 align:start position:0%
instructions refer to our other video or
the<00:01:46.020><c> documentation</c><00:01:46.500><c> linked</c><00:01:47.009><c> in</c><00:01:47.100><c> the</c>

00:01:47.179 --> 00:01:47.189 align:start position:0%
the documentation linked in the
 

00:01:47.189 --> 00:01:49.880 align:start position:0%
the documentation linked in the
description<00:01:48.110><c> so</c><00:01:49.110><c> now</c><00:01:49.470><c> that</c><00:01:49.530><c> you</c><00:01:49.770><c> have</c>

00:01:49.880 --> 00:01:49.890 align:start position:0%
description so now that you have
 

00:01:49.890 --> 00:01:51.800 align:start position:0%
description so now that you have
everything<00:01:50.280><c> set</c><00:01:50.640><c> up</c><00:01:50.670><c> what</c><00:01:51.329><c> can</c><00:01:51.479><c> you</c><00:01:51.600><c> actually</c>

00:01:51.800 --> 00:01:51.810 align:start position:0%
everything set up what can you actually
 

00:01:51.810 --> 00:01:54.530 align:start position:0%
everything set up what can you actually
do<00:01:52.200><c> with</c><00:01:52.380><c> the</c><00:01:52.500><c> new</c><00:01:52.619><c> features</c><00:01:53.329><c> lambdas</c><00:01:54.329><c> are</c><00:01:54.509><c> a</c>

00:01:54.530 --> 00:01:54.540 align:start position:0%
do with the new features lambdas are a
 

00:01:54.540 --> 00:01:56.719 align:start position:0%
do with the new features lambdas are a
really<00:01:54.899><c> nice</c><00:01:55.079><c> short</c><00:01:55.619><c> hand</c><00:01:55.799><c> foundation</c><00:01:56.369><c> for</c>

00:01:56.719 --> 00:01:56.729 align:start position:0%
really nice short hand foundation for
 

00:01:56.729 --> 00:01:59.330 align:start position:0%
really nice short hand foundation for
implementing<00:01:57.240><c> functional</c><00:01:57.750><c> interfaces</c><00:01:58.290><c> or</c><00:01:58.680><c> in</c>

00:01:59.330 --> 00:01:59.340 align:start position:0%
implementing functional interfaces or in
 

00:01:59.340 --> 00:02:01.520 align:start position:0%
implementing functional interfaces or in
other<00:01:59.549><c> words</c><00:01:59.960><c> interfaces</c><00:02:00.960><c> that</c><00:02:01.170><c> have</c><00:02:01.320><c> only</c>

00:02:01.520 --> 00:02:01.530 align:start position:0%
other words interfaces that have only
 

00:02:01.530 --> 00:02:04.520 align:start position:0%
other words interfaces that have only
one<00:02:01.860><c> abstract</c><00:02:02.399><c> method</c><00:02:02.869><c> many</c><00:02:03.869><c> times</c><00:02:04.170><c> when</c><00:02:04.439><c> you</c>

00:02:04.520 --> 00:02:04.530 align:start position:0%
one abstract method many times when you
 

00:02:04.530 --> 00:02:06.590 align:start position:0%
one abstract method many times when you
pass<00:02:04.740><c> a</c><00:02:04.770><c> runnable</c><00:02:05.310><c> or</c><00:02:05.579><c> a</c><00:02:05.729><c> listener</c><00:02:06.180><c> to</c><00:02:06.210><c> another</c>

00:02:06.590 --> 00:02:06.600 align:start position:0%
pass a runnable or a listener to another
 

00:02:06.600 --> 00:02:08.690 align:start position:0%
pass a runnable or a listener to another
method<00:02:06.869><c> you</c><00:02:07.649><c> need</c><00:02:07.799><c> all</c><00:02:08.009><c> this</c><00:02:08.280><c> boilerplate</c>

00:02:08.690 --> 00:02:08.700 align:start position:0%
method you need all this boilerplate
 

00:02:08.700 --> 00:02:11.360 align:start position:0%
method you need all this boilerplate
just<00:02:09.479><c> to</c><00:02:09.569><c> run</c><00:02:09.690><c> a</c><00:02:09.720><c> few</c><00:02:10.020><c> lines</c><00:02:10.170><c> of</c><00:02:10.349><c> code</c><00:02:10.410><c> when</c><00:02:11.160><c> all</c>

00:02:11.360 --> 00:02:11.370 align:start position:0%
just to run a few lines of code when all
 

00:02:11.370 --> 00:02:12.949 align:start position:0%
just to run a few lines of code when all
you<00:02:11.489><c> could</c><00:02:11.670><c> write</c><00:02:11.940><c> is</c><00:02:12.120><c> this</c>

00:02:12.949 --> 00:02:12.959 align:start position:0%
you could write is this
 

00:02:12.959 --> 00:02:15.080 align:start position:0%
you could write is this
Android<00:02:13.620><c> studio</c><00:02:13.650><c> lets</c><00:02:14.189><c> you</c><00:02:14.310><c> easily</c><00:02:14.519><c> convert</c>

00:02:15.080 --> 00:02:15.090 align:start position:0%
Android studio lets you easily convert
 

00:02:15.090 --> 00:02:17.569 align:start position:0%
Android studio lets you easily convert
between<00:02:15.269><c> lambdas</c><00:02:15.870><c> and</c><00:02:16.049><c> anonymous</c><00:02:16.590><c> classes</c><00:02:16.859><c> so</c>

00:02:17.569 --> 00:02:17.579 align:start position:0%
between lambdas and anonymous classes so
 

00:02:17.579 --> 00:02:19.789 align:start position:0%
between lambdas and anonymous classes so
you<00:02:17.670><c> can</c><00:02:17.819><c> learn</c><00:02:17.969><c> the</c><00:02:18.180><c> syntax</c><00:02:18.359><c> quickly</c><00:02:19.019><c> with</c>

00:02:19.789 --> 00:02:19.799 align:start position:0%
you can learn the syntax quickly with
 

00:02:19.799 --> 00:02:21.920 align:start position:0%
you can learn the syntax quickly with
method<00:02:20.189><c> references</c><00:02:20.400><c> you</c><00:02:21.150><c> can</c><00:02:21.180><c> sometimes</c><00:02:21.780><c> even</c>

00:02:21.920 --> 00:02:21.930 align:start position:0%
method references you can sometimes even
 

00:02:21.930 --> 00:02:24.319 align:start position:0%
method references you can sometimes even
avoid<00:02:22.439><c> creating</c><00:02:22.890><c> a</c><00:02:22.980><c> lambda</c><00:02:23.189><c> by</c><00:02:23.879><c> directly</c>

00:02:24.319 --> 00:02:24.329 align:start position:0%
avoid creating a lambda by directly
 

00:02:24.329 --> 00:02:25.759 align:start position:0%
avoid creating a lambda by directly
passing<00:02:24.750><c> a</c><00:02:24.810><c> method</c><00:02:25.170><c> with</c><00:02:25.379><c> a</c><00:02:25.409><c> correct</c>

00:02:25.759 --> 00:02:25.769 align:start position:0%
passing a method with a correct
 

00:02:25.769 --> 00:02:28.339 align:start position:0%
passing a method with a correct
signature<00:02:26.129><c> as</c><00:02:26.430><c> a</c><00:02:26.459><c> parameter</c><00:02:26.870><c> use</c><00:02:27.870><c> the</c><00:02:28.049><c> double</c>

00:02:28.339 --> 00:02:28.349 align:start position:0%
signature as a parameter use the double
 

00:02:28.349 --> 00:02:31.190 align:start position:0%
signature as a parameter use the double
colon<00:02:28.530><c> syntax</c><00:02:28.920><c> like</c><00:02:29.400><c> this</c><00:02:29.609><c> if</c><00:02:29.959><c> you</c><00:02:30.959><c> want</c><00:02:31.109><c> to</c>

00:02:31.190 --> 00:02:31.200 align:start position:0%
colon syntax like this if you want to
 

00:02:31.200 --> 00:02:33.289 align:start position:0%
colon syntax like this if you want to
put<00:02:31.379><c> utility</c><00:02:31.920><c> methods</c><00:02:32.310><c> in</c><00:02:32.489><c> your</c><00:02:32.639><c> interfaces</c>

00:02:33.289 --> 00:02:33.299 align:start position:0%
put utility methods in your interfaces
 

00:02:33.299 --> 00:02:35.770 align:start position:0%
put utility methods in your interfaces
you<00:02:33.900><c> can</c><00:02:34.049><c> now</c><00:02:34.260><c> do</c><00:02:34.319><c> it</c><00:02:34.620><c> with</c><00:02:34.739><c> a</c><00:02:34.769><c> static</c><00:02:35.280><c> keyword</c>

00:02:35.770 --> 00:02:35.780 align:start position:0%
you can now do it with a static keyword
 

00:02:35.780 --> 00:02:38.000 align:start position:0%
you can now do it with a static keyword
moreover<00:02:36.780><c> you</c><00:02:36.930><c> can</c><00:02:37.109><c> have</c><00:02:37.290><c> methods</c><00:02:37.560><c> with</c>

00:02:38.000 --> 00:02:38.010 align:start position:0%
moreover you can have methods with
 

00:02:38.010 --> 00:02:40.190 align:start position:0%
moreover you can have methods with
default<00:02:38.489><c> implementations</c><00:02:39.269><c> that</c><00:02:39.480><c> will</c><00:02:39.959><c> not</c>

00:02:40.190 --> 00:02:40.200 align:start position:0%
default implementations that will not
 

00:02:40.200 --> 00:02:42.140 align:start position:0%
default implementations that will not
require<00:02:40.560><c> you</c><00:02:40.829><c> to</c><00:02:40.859><c> change</c><00:02:41.010><c> any</c><00:02:41.489><c> subclasses</c>

00:02:42.140 --> 00:02:42.150 align:start position:0%
require you to change any subclasses
 

00:02:42.150 --> 00:02:43.970 align:start position:0%
require you to change any subclasses
when<00:02:42.599><c> you</c><00:02:42.689><c> add</c><00:02:42.840><c> them</c><00:02:43.019><c> to</c><00:02:43.170><c> the</c><00:02:43.260><c> base</c><00:02:43.409><c> interface</c>

00:02:43.970 --> 00:02:43.980 align:start position:0%
when you add them to the base interface
 

00:02:43.980 --> 00:02:46.399 align:start position:0%
when you add them to the base interface
try<00:02:44.909><c> with</c><00:02:45.090><c> resources</c><00:02:45.659><c> is</c><00:02:45.840><c> a</c><00:02:45.870><c> great</c><00:02:46.169><c> way</c><00:02:46.349><c> to</c>

00:02:46.399 --> 00:02:46.409 align:start position:0%
try with resources is a great way to
 

00:02:46.409 --> 00:02:48.470 align:start position:0%
try with resources is a great way to
deal<00:02:46.739><c> with</c><00:02:46.919><c> closable</c><00:02:47.459><c> resources</c><00:02:48.030><c> such</c><00:02:48.329><c> as</c>

00:02:48.470 --> 00:02:48.480 align:start position:0%
deal with closable resources such as
 

00:02:48.480 --> 00:02:51.020 align:start position:0%
deal with closable resources such as
files<00:02:49.129><c> previously</c><00:02:50.129><c> you</c><00:02:50.250><c> had</c><00:02:50.370><c> to</c><00:02:50.519><c> be</c><00:02:50.609><c> extra</c>

00:02:51.020 --> 00:02:51.030 align:start position:0%
files previously you had to be extra
 

00:02:51.030 --> 00:02:52.970 align:start position:0%
files previously you had to be extra
careful<00:02:51.450><c> to</c><00:02:51.810><c> catch</c><00:02:51.959><c> exceptions</c><00:02:52.560><c> and</c><00:02:52.769><c> close</c>

00:02:52.970 --> 00:02:52.980 align:start position:0%
careful to catch exceptions and close
 

00:02:52.980 --> 00:02:55.819 align:start position:0%
careful to catch exceptions and close
any<00:02:53.220><c> open</c><00:02:53.340><c> streams</c><00:02:53.909><c> in</c><00:02:54.150><c> a</c><00:02:54.239><c> finally</c><00:02:54.599><c> block</c><00:02:54.829><c> now</c>

00:02:55.819 --> 00:02:55.829 align:start position:0%
any open streams in a finally block now
 

00:02:55.829 --> 00:02:57.379 align:start position:0%
any open streams in a finally block now
when<00:02:56.040><c> you</c><00:02:56.129><c> declare</c><00:02:56.280><c> a</c><00:02:56.489><c> resource</c><00:02:56.909><c> in</c><00:02:57.090><c> that</c><00:02:57.120><c> try</c>

00:02:57.379 --> 00:02:57.389 align:start position:0%
when you declare a resource in that try
 

00:02:57.389 --> 00:02:59.360 align:start position:0%
when you declare a resource in that try
block<00:02:57.599><c> opening</c><00:02:58.079><c> statement</c><00:02:58.590><c> it</c><00:02:59.010><c> will</c><00:02:59.219><c> be</c>

00:02:59.360 --> 00:02:59.370 align:start position:0%
block opening statement it will be
 

00:02:59.370 --> 00:03:01.129 align:start position:0%
block opening statement it will be
automatically<00:03:00.060><c> cleaned</c><00:03:00.480><c> up</c><00:03:00.629><c> for</c><00:03:00.840><c> you</c><00:03:00.959><c> after</c>

00:03:01.129 --> 00:03:01.139 align:start position:0%
automatically cleaned up for you after
 

00:03:01.139 --> 00:03:03.379 align:start position:0%
automatically cleaned up for you after
that<00:03:01.500><c> block</c><00:03:01.769><c> exits</c><00:03:02.280><c> the</c><00:03:02.939><c> new</c><00:03:03.060><c> language</c>

00:03:03.379 --> 00:03:03.389 align:start position:0%
that block exits the new language
 

00:03:03.389 --> 00:03:04.940 align:start position:0%
that block exits the new language
features<00:03:03.689><c> are</c><00:03:03.900><c> provided</c><00:03:04.049><c> by</c><00:03:04.439><c> transforming</c>

00:03:04.940 --> 00:03:04.950 align:start position:0%
features are provided by transforming
 

00:03:04.950 --> 00:03:06.429 align:start position:0%
features are provided by transforming
byte<00:03:05.310><c> code</c><00:03:05.579><c> into</c><00:03:05.909><c> a</c><00:03:05.969><c> representation</c>

00:03:06.429 --> 00:03:06.439 align:start position:0%
byte code into a representation
 

00:03:06.439 --> 00:03:09.379 align:start position:0%
byte code into a representation
compatible<00:03:07.439><c> with</c><00:03:07.590><c> other</c><00:03:07.829><c> platforms</c><00:03:08.159><c> a</c><00:03:08.700><c> step</c>

00:03:09.379 --> 00:03:09.389 align:start position:0%
compatible with other platforms a step
 

00:03:09.389 --> 00:03:12.020 align:start position:0%
compatible with other platforms a step
which<00:03:09.659><c> we</c><00:03:09.810><c> call</c><00:03:10.019><c> the</c><00:03:10.169><c> sugaring</c><00:03:10.609><c> this</c><00:03:11.609><c> is</c><00:03:11.790><c> not</c><00:03:12.000><c> a</c>

00:03:12.020 --> 00:03:12.030 align:start position:0%
which we call the sugaring this is not a
 

00:03:12.030 --> 00:03:14.360 align:start position:0%
which we call the sugaring this is not a
backboard<00:03:12.510><c> of</c><00:03:12.750><c> Java</c><00:03:13.049><c> eight</c><00:03:13.260><c> packages</c><00:03:13.799><c> and</c><00:03:14.010><c> as</c>

00:03:14.360 --> 00:03:14.370 align:start position:0%
backboard of Java eight packages and as
 

00:03:14.370 --> 00:03:16.670 align:start position:0%
backboard of Java eight packages and as
such<00:03:14.609><c> many</c><00:03:15.000><c> SDK</c><00:03:15.419><c> restrictions</c><00:03:15.989><c> still</c><00:03:16.379><c> apply</c>

00:03:16.670 --> 00:03:16.680 align:start position:0%
such many SDK restrictions still apply
 

00:03:16.680 --> 00:03:19.129 align:start position:0%
such many SDK restrictions still apply
for<00:03:16.709><c> using</c><00:03:17.190><c> newer</c><00:03:17.400><c> api's</c><00:03:17.909><c> like</c><00:03:18.659><c> java.lang</c>

00:03:19.129 --> 00:03:19.139 align:start position:0%
for using newer api's like java.lang
 

00:03:19.139 --> 00:03:22.039 align:start position:0%
for using newer api's like java.lang
stream<00:03:19.590><c> in</c><00:03:19.799><c> your</c><00:03:20.069><c> code</c><00:03:20.340><c> one</c><00:03:21.209><c> last</c><00:03:21.419><c> thing</c><00:03:21.599><c> as</c>

00:03:22.039 --> 00:03:22.049 align:start position:0%
stream in your code one last thing as
 

00:03:22.049 --> 00:03:23.839 align:start position:0%
stream in your code one last thing as
part<00:03:22.409><c> of</c><00:03:22.470><c> our</c><00:03:22.560><c> continuing</c><00:03:23.069><c> investment</c><00:03:23.609><c> into</c>

00:03:23.839 --> 00:03:23.849 align:start position:0%
part of our continuing investment into
 

00:03:23.849 --> 00:03:26.030 align:start position:0%
part of our continuing investment into
the<00:03:23.970><c> tool</c><00:03:24.180><c> chain</c><00:03:24.419><c> with</c><00:03:25.049><c> Android</c><00:03:25.440><c> studio</c><00:03:25.470><c> 3</c>

00:03:26.030 --> 00:03:26.040 align:start position:0%
the tool chain with Android studio 3
 

00:03:26.040 --> 00:03:28.490 align:start position:0%
the tool chain with Android studio 3
we're<00:03:26.519><c> introducing</c><00:03:26.970><c> a</c><00:03:27.209><c> new</c><00:03:27.239><c> Dexter</c><00:03:27.750><c> called</c><00:03:28.079><c> d8</c>

00:03:28.490 --> 00:03:28.500 align:start position:0%
we're introducing a new Dexter called d8
 

00:03:28.500 --> 00:03:31.069 align:start position:0%
we're introducing a new Dexter called d8
that<00:03:29.310><c> is</c><00:03:29.430><c> available</c><00:03:29.849><c> for</c><00:03:30.030><c> you</c><00:03:30.180><c> to</c><00:03:30.359><c> preview</c><00:03:30.750><c> at</c>

00:03:31.069 --> 00:03:31.079 align:start position:0%
that is available for you to preview at
 

00:03:31.079 --> 00:03:33.379 align:start position:0%
that is available for you to preview at
this<00:03:31.739><c> line</c><00:03:31.949><c> in</c><00:03:32.129><c> your</c><00:03:32.250><c> Gradle</c><00:03:32.639><c> properties</c><00:03:33.120><c> file</c>

00:03:33.379 --> 00:03:33.389 align:start position:0%
this line in your Gradle properties file
 

00:03:33.389 --> 00:03:35.719 align:start position:0%
this line in your Gradle properties file
and<00:03:33.629><c> the</c><00:03:33.989><c> build</c><00:03:34.229><c> process</c><00:03:34.379><c> will</c><00:03:34.889><c> use</c><00:03:35.069><c> d8</c><00:03:35.459><c> for</c>

00:03:35.719 --> 00:03:35.729 align:start position:0%
and the build process will use d8 for
 

00:03:35.729 --> 00:03:37.789 align:start position:0%
and the build process will use d8 for
converting<00:03:36.209><c> class</c><00:03:36.479><c> files</c><00:03:36.750><c> to</c><00:03:37.019><c> Dex</c><00:03:37.260><c> bytecode</c>

00:03:37.789 --> 00:03:37.799 align:start position:0%
converting class files to Dex bytecode
 

00:03:37.799 --> 00:03:40.699 align:start position:0%
converting class files to Dex bytecode
in<00:03:38.040><c> our</c><00:03:38.939><c> tests</c><00:03:39.389><c> the</c><00:03:39.689><c> eight</c><00:03:39.780><c> compiles</c><00:03:40.290><c> faster</c>

00:03:40.699 --> 00:03:40.709 align:start position:0%
in our tests the eight compiles faster
 

00:03:40.709 --> 00:03:43.369 align:start position:0%
in our tests the eight compiles faster
and<00:03:40.889><c> produces</c><00:03:41.519><c> smaller</c><00:03:41.879><c> files</c><00:03:42.209><c> and</c><00:03:42.479><c> can</c><00:03:42.989><c> even</c>

00:03:43.369 --> 00:03:43.379 align:start position:0%
and produces smaller files and can even
 

00:03:43.379 --> 00:03:46.339 align:start position:0%
and produces smaller files and can even
improve<00:03:43.620><c> runtime</c><00:03:44.129><c> performance</c><00:03:44.669><c> as</c><00:03:45.199><c> an</c><00:03:46.199><c> app</c>

00:03:46.339 --> 00:03:46.349 align:start position:0%
improve runtime performance as an app
 

00:03:46.349 --> 00:03:48.349 align:start position:0%
improve runtime performance as an app
developer<00:03:46.889><c> you</c><00:03:47.069><c> shouldn't</c><00:03:47.699><c> have</c><00:03:47.819><c> to</c><00:03:47.970><c> make</c><00:03:48.090><c> any</c>

00:03:48.349 --> 00:03:48.359 align:start position:0%
developer you shouldn't have to make any
 

00:03:48.359 --> 00:03:50.390 align:start position:0%
developer you shouldn't have to make any
changes<00:03:48.840><c> to</c><00:03:48.900><c> your</c><00:03:49.109><c> usual</c><00:03:49.290><c> workflow</c><00:03:49.949><c> when</c>

00:03:50.390 --> 00:03:50.400 align:start position:0%
changes to your usual workflow when
 

00:03:50.400 --> 00:03:53.149 align:start position:0%
changes to your usual workflow when
using<00:03:50.579><c> d8</c><00:03:50.970><c> however</c><00:03:51.870><c> tool</c><00:03:52.290><c> developers</c><00:03:52.799><c> need</c><00:03:53.129><c> to</c>

00:03:53.149 --> 00:03:53.159 align:start position:0%
using d8 however tool developers need to
 

00:03:53.159 --> 00:03:55.759 align:start position:0%
using d8 however tool developers need to
be<00:03:53.400><c> aware</c><00:03:53.639><c> that</c><00:03:53.849><c> d8</c><00:03:54.540><c> moves</c><00:03:54.930><c> the</c><00:03:55.079><c> de</c><00:03:55.199><c> sugar</c><00:03:55.409><c> step</c>

00:03:55.759 --> 00:03:55.769 align:start position:0%
be aware that d8 moves the de sugar step
 

00:03:55.769 --> 00:03:58.159 align:start position:0%
be aware that d8 moves the de sugar step
after<00:03:56.009><c> any</c><00:03:56.549><c> custom</c><00:03:57.030><c> bytecode</c><00:03:57.419><c> transforms</c><00:03:57.989><c> as</c>

00:03:58.159 --> 00:03:58.169 align:start position:0%
after any custom bytecode transforms as
 

00:03:58.169 --> 00:04:00.890 align:start position:0%
after any custom bytecode transforms as
such<00:03:59.099><c> your</c><00:03:59.340><c> transformation</c><00:04:00.000><c> tools</c><00:04:00.269><c> might</c>

00:04:00.890 --> 00:04:00.900 align:start position:0%
such your transformation tools might
 

00:04:00.900 --> 00:04:03.170 align:start position:0%
such your transformation tools might
begin<00:04:01.109><c> to</c><00:04:01.379><c> see</c><00:04:01.409><c> Java</c><00:04:01.829><c> eight</c><00:04:02.040><c> byte</c><00:04:02.250><c> codes</c><00:04:02.519><c> when</c>

00:04:03.170 --> 00:04:03.180 align:start position:0%
begin to see Java eight byte codes when
 

00:04:03.180 --> 00:04:04.699 align:start position:0%
begin to see Java eight byte codes when
using<00:04:03.359><c> D</c><00:04:03.599><c> eight</c><00:04:03.750><c> and</c><00:04:03.989><c> have</c><00:04:04.290><c> to</c><00:04:04.439><c> be</c><00:04:04.560><c> made</c>

00:04:04.699 --> 00:04:04.709 align:start position:0%
using D eight and have to be made
 

00:04:04.709 --> 00:04:07.339 align:start position:0%
using D eight and have to be made
compatible<00:04:05.329><c> so</c><00:04:06.329><c> have</c><00:04:06.659><c> fun</c><00:04:06.840><c> writing</c><00:04:07.049><c> more</c>

00:04:07.339 --> 00:04:07.349 align:start position:0%
compatible so have fun writing more
 

00:04:07.349 --> 00:04:09.289 align:start position:0%
compatible so have fun writing more
expressive<00:04:07.769><c> code</c><00:04:08.069><c> and</c><00:04:08.310><c> please</c><00:04:08.790><c> let</c><00:04:09.000><c> us</c><00:04:09.030><c> know</c>

00:04:09.289 --> 00:04:09.299 align:start position:0%
expressive code and please let us know
 

00:04:09.299 --> 00:04:10.969 align:start position:0%
expressive code and please let us know
on<00:04:09.479><c> the</c><00:04:09.569><c> bug</c><00:04:09.750><c> tracker</c><00:04:09.959><c> if</c><00:04:10.259><c> you</c><00:04:10.560><c> run</c><00:04:10.709><c> into</c><00:04:10.859><c> any</c>

00:04:10.969 --> 00:04:10.979 align:start position:0%
on the bug tracker if you run into any
 

00:04:10.979 --> 00:04:12.920 align:start position:0%
on the bug tracker if you run into any
issues<00:04:11.370><c> when</c><00:04:11.729><c> trying</c><00:04:12.030><c> the</c><00:04:12.150><c> new</c><00:04:12.299><c> dax-ur</c><00:04:12.540><c> and</c>

00:04:12.920 --> 00:04:12.930 align:start position:0%
issues when trying the new dax-ur and
 

00:04:12.930 --> 00:04:15.259 align:start position:0%
issues when trying the new dax-ur and
check<00:04:13.829><c> out</c><00:04:13.949><c> the</c><00:04:14.129><c> other</c><00:04:14.250><c> videos</c><00:04:14.609><c> about</c><00:04:14.819><c> Android</c>

00:04:15.259 --> 00:04:15.269 align:start position:0%
check out the other videos about Android
 

00:04:15.269 --> 00:04:17.500 align:start position:0%
check out the other videos about Android
studio<00:04:15.509><c> 3</c><00:04:15.930><c> Dalal</c><00:04:16.199><c> features</c>

00:04:17.500 --> 00:04:17.510 align:start position:0%
studio 3 Dalal features
 

00:04:17.510 --> 00:04:28.870 align:start position:0%
studio 3 Dalal features
[Music]

