WEBVTT
Kind: captions
Language: en

00:00:00.338 --> 00:00:02.969
So now let's look at the whole pipeline of how we would go for

00:00:02.969 --> 00:00:05.689
an image, to extract an edge image out of it.

00:00:05.689 --> 00:00:08.440
Again an edge image would be basically showcasing where most of

00:00:08.440 --> 00:00:11.120
the contrast changes are in an image and

00:00:11.120 --> 00:00:16.059
best represents the changes in the spatial x and y of an image like this.

00:00:17.780 --> 00:00:20.852
As we noticed before first thing we want to do is we want to suppress noise.

00:00:20.852 --> 00:00:24.710
You want to run some sort of a smoothing operation, a blur kernel

00:00:24.710 --> 00:00:29.650
using a Gaussian kernel to be able to get rid of some of the information because

00:00:29.650 --> 00:00:33.930
as we noticed, the gradient image calculation is really sensitive to noise.

00:00:35.120 --> 00:00:39.640
Of course, next step is we compute the gradient image after the image has been

00:00:39.640 --> 00:00:41.100
smoothed out a little bit.

00:00:41.100 --> 00:00:44.500
And you would get something like this where all of the intensity information,

00:00:44.500 --> 00:00:50.060
basically where the gradient is the largest, is shown by the white lines here.

00:00:50.060 --> 00:00:52.180
And this is a gradient magnitude image.

00:00:52.180 --> 00:00:55.180
Third step is we apply some sort of edge enhancement,

00:00:55.180 --> 00:00:58.930
which basically means is that we will filter this image for contrast.

00:00:58.930 --> 00:01:02.270
Bring out the most value of where the gradients are much,

00:01:02.270 --> 00:01:04.849
much more higher than anything else.

00:01:04.849 --> 00:01:07.380
Otherwise, if you notice, this image is basically just black and

00:01:07.380 --> 00:01:09.390
white, with lot less white.

00:01:09.390 --> 00:01:12.230
We want to bring out the white information here to actually have

00:01:12.230 --> 00:01:14.580
more local information around the whites.

00:01:14.580 --> 00:01:17.760
because we don't want to lose any information because we've just linearly

00:01:17.760 --> 00:01:19.694
looked at the space between zero to 255.

00:01:19.694 --> 00:01:23.520
So we want to kind of enhance this data structure,

00:01:23.520 --> 00:01:26.560
which is basically an intermediate one from here to there so

00:01:26.560 --> 00:01:29.350
we can actually start looking for edges more carefully.

00:01:29.350 --> 00:01:32.140
Next thing we want to do is we want to start localizing edges.

00:01:32.140 --> 00:01:37.190
Which basically means is we need to determine which local maximum from

00:01:37.190 --> 00:01:42.770
any filter output is actually referring to edges as opposed to noise.

00:01:42.770 --> 00:01:44.640
So in essence we want to kind of look for

00:01:44.640 --> 00:01:49.010
filter responses, and start attracting it various types of ways.

00:01:49.010 --> 00:01:52.780
A differential that let's us get rid of noise and pay attention to edges.

00:01:52.780 --> 00:01:54.370
Many different methods for this exist.

00:01:54.370 --> 00:01:56.390
I recommend you to look at the text for this.

00:01:56.390 --> 00:01:58.530
I'll just showcase one of them in a bit.

00:01:58.530 --> 00:02:02.450
Finally, the last step is, we want to threshold information after we've done all

00:02:02.450 --> 00:02:06.280
of this, and also sometimes do something which is referred to as thinning,

00:02:06.280 --> 00:02:10.080
which is a morphological operator on images that basically let's you

00:02:10.080 --> 00:02:15.190
combine pixels and close bytes into a much more thinner representation.

00:02:15.190 --> 00:02:16.522
because in essence we're looking for

00:02:16.522 --> 00:02:21.510
a fine resolution image where the edges are likely to be in this, image.

00:02:22.550 --> 00:02:25.970
The output of course is a image like this, which looks similar but

00:02:25.970 --> 00:02:30.480
if you notice now it's mostly just one pixels of lines everywhere.

00:02:30.480 --> 00:02:33.550
It's very hard to see because again the way it's represented here,

00:02:33.550 --> 00:02:34.390
in black and white.

00:02:34.390 --> 00:02:38.890
But you'll see many examples of this as you do this work yourself.

00:02:38.890 --> 00:02:41.600
But, this is one of the best ways to look for an edge image.

