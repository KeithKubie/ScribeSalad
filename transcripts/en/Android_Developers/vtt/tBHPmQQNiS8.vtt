WEBVTT
Kind: captions
Language: en

00:00:02.160 --> 00:00:04.680
As much as we'd like to focus
on creating and managing

00:00:04.680 --> 00:00:06.160
threads and work
packets, we tend

00:00:06.160 --> 00:00:09.550
to ignore the biggest, hardest
problem in threading, memory.

00:00:09.550 --> 00:00:10.550
My name is Colt McAnlis.

00:00:10.550 --> 00:00:12.008
And while threading
and memory have

00:00:12.008 --> 00:00:14.180
a long, complicated
history in programming,

00:00:14.180 --> 00:00:16.129
there are some specific
nuances on Android

00:00:16.129 --> 00:00:17.940
that you need to be aware of.

00:00:17.940 --> 00:00:19.940
You gotta remember that
memory in computing

00:00:19.940 --> 00:00:21.690
isn't really thread safe.

00:00:21.690 --> 00:00:24.250
When two threads are operating
on the same block of memory,

00:00:24.250 --> 00:00:25.227
weird things happen.

00:00:25.227 --> 00:00:27.560
I mean, you can get memory
contention problems with read

00:00:27.560 --> 00:00:29.580
write access order,
ABA problems,

00:00:29.580 --> 00:00:31.930
rips in the fabric
of space time.

00:00:31.930 --> 00:00:33.920
OK, maybe not-- maybe
not the last one.

00:00:33.920 --> 00:00:37.300
But anyhow, fixing these means
restricting memory access

00:00:37.300 --> 00:00:39.950
from threads using locking,
which is a whole separate video

00:00:39.950 --> 00:00:41.800
series that we're not going
to get into right now.

00:00:41.800 --> 00:00:43.800
But most important to
understand is that Android

00:00:43.800 --> 00:00:45.260
isn't immune to these problems.

00:00:45.260 --> 00:00:47.230
For the most part,
the same techniques

00:00:47.230 --> 00:00:50.040
you use to deal with these
issues on other platforms

00:00:50.040 --> 00:00:51.610
can be applied here, too.

00:00:51.610 --> 00:00:53.450
But there are a
few specific cases

00:00:53.450 --> 00:00:55.300
that you need to be aware of.

00:00:55.300 --> 00:00:58.370
Let's start with the fact that
by design, UI objects are not

00:00:58.370 --> 00:00:59.195
thread safe.

00:00:59.195 --> 00:01:01.720
UI objects are expected
to be created, used,

00:01:01.720 --> 00:01:03.570
and destroyed all
on the UI thread,

00:01:03.570 --> 00:01:07.377
and not guaranteed to behave
properly on any other threads.

00:01:07.377 --> 00:01:09.710
Trying to modify or even
reference them on other threads

00:01:09.710 --> 00:01:12.260
can throw exceptions, cause
silent failures, crashes,

00:01:12.260 --> 00:01:14.420
and just general weirdness.

00:01:14.420 --> 00:01:17.580
In fact, just holding a direct
reference to a UI object

00:01:17.580 --> 00:01:20.040
on a worker thread
can be a problem.

00:01:20.040 --> 00:01:22.360
For example, your work object
may contain a reference

00:01:22.360 --> 00:01:22.960
to a view.

00:01:22.960 --> 00:01:25.906
But before your work completes
on the worker thread,

00:01:25.906 --> 00:01:27.280
the view is removed
from the view

00:01:27.280 --> 00:01:29.230
hierarchy on the main thread.

00:01:29.230 --> 00:01:30.594
So what do you do here?

00:01:30.594 --> 00:01:33.010
I mean, you can't trust any
of the properties of that view

00:01:33.010 --> 00:01:34.167
since the data has changed.

00:01:34.167 --> 00:01:36.000
And updating those
properties doesn't really

00:01:36.000 --> 00:01:38.950
mean anything, since it's not
part of the hierarchy anymore

00:01:38.950 --> 00:01:41.240
and won't be drawn
to the screen.

00:01:41.240 --> 00:01:42.850
And this gets
crazy really quick.

00:01:42.850 --> 00:01:45.130
Now remember, views
contain references

00:01:45.130 --> 00:01:46.290
to their owning activity.

00:01:46.290 --> 00:01:49.230
I mean, we did a whole video
on how leaking those views

00:01:49.230 --> 00:01:51.100
can cause all sorts
of memory problems.

00:01:51.100 --> 00:01:53.810
But this gets even worse
when threading is involved.

00:01:53.810 --> 00:01:55.970
If an activity is
destroyed but there still

00:01:55.970 --> 00:01:58.630
exists a threaded block of
work that references it,

00:01:58.630 --> 00:02:01.681
the activity won't get collected
until that work finishes.

00:02:01.681 --> 00:02:04.180
So if you kick off some work
and the user rotates the screen

00:02:04.180 --> 00:02:06.520
three times in a row
before that work completes,

00:02:06.520 --> 00:02:09.380
you could end up with three
instances of that activity

00:02:09.380 --> 00:02:11.260
object resident in memory.

00:02:11.260 --> 00:02:14.054
And to be clear, it's not
just explicit references

00:02:14.054 --> 00:02:15.845
to UI objects that you
need to worry about.

00:02:15.845 --> 00:02:20.030
You also have to be cautious of
implicit references, as well.

00:02:20.030 --> 00:02:22.850
Check out this very common
seen-all-the-time coding

00:02:22.850 --> 00:02:24.280
pattern in Android apps.

00:02:24.280 --> 00:02:26.080
You've got some
threading object that's

00:02:26.080 --> 00:02:29.180
declared as an inner
class of an activity.

00:02:29.180 --> 00:02:32.000
The problem here is that
the async task object

00:02:32.000 --> 00:02:35.489
now has an implicit reference
to the enclosing activity

00:02:35.489 --> 00:02:37.280
and will keep that
reference until the work

00:02:37.280 --> 00:02:39.000
object has been destroyed.

00:02:39.000 --> 00:02:41.090
The result is the same problem.

00:02:41.090 --> 00:02:43.090
Until this work
completes, the activity

00:02:43.090 --> 00:02:44.540
stays around in memory.

00:02:44.540 --> 00:02:46.510
And by the way,
this type of pattern

00:02:46.510 --> 00:02:50.580
also leads to common types of
crashes seen in Android apps.

00:02:50.580 --> 00:02:52.840
Some block of threading
work has kicked off.

00:02:52.840 --> 00:02:55.240
But the user hits Back or
does something else to change

00:02:55.240 --> 00:02:56.710
the top-most activity.

00:02:56.710 --> 00:02:58.580
Later, when the
threaded work completes,

00:02:58.580 --> 00:03:02.440
it tries to make updates to a
state that's no longer valid.

00:03:02.440 --> 00:03:05.010
The result is a dialog
box notifying me

00:03:05.010 --> 00:03:07.920
that an app I haven't used
for 10 minutes has crashed,

00:03:07.920 --> 00:03:10.989
which is kind of
awkward for everybody.

00:03:10.989 --> 00:03:13.280
The takeaway here is that
you shouldn't hold references

00:03:13.280 --> 00:03:16.050
to any types of UI
specific objects

00:03:16.050 --> 00:03:18.630
in any of your threading
scenarios, which

00:03:18.630 --> 00:03:20.600
leads to the natural
question, how

00:03:20.600 --> 00:03:23.610
are we supposed to update
the UI from threaded work.

00:03:23.610 --> 00:03:25.660
The trick here is to force
the top level activity

00:03:25.660 --> 00:03:28.410
or fragments to be the sole
system responsible for updating

00:03:28.410 --> 00:03:29.340
the UI objects.

00:03:29.340 --> 00:03:31.880
For example, when you'd
like to kick off some work,

00:03:31.880 --> 00:03:34.790
create a work record that
pairs a view with some update

00:03:34.790 --> 00:03:35.380
function.

00:03:35.380 --> 00:03:36.879
When that block of
work is finished,

00:03:36.879 --> 00:03:39.710
it submits the results back to
the activity using an intent

00:03:39.710 --> 00:03:41.660
or a run on UI thread call.

00:03:41.660 --> 00:03:43.780
The activity can then
call the update function

00:03:43.780 --> 00:03:46.380
with the new information,
or if the view isn't there,

00:03:46.380 --> 00:03:48.220
just drop the work altogether.

00:03:48.220 --> 00:03:51.430
And if the activity that
issued the work was destroyed,

00:03:51.430 --> 00:03:53.970
then the new activity won't
have a reference to any of this

00:03:53.970 --> 00:03:55.460
and will just drop the work too.

00:03:55.460 --> 00:03:55.960
See?

00:03:55.960 --> 00:03:59.370
No crashes, no memory
leaks, just pure clean fun.

00:03:59.370 --> 00:04:00.950
Now, if you ever
want a deeper look

00:04:00.950 --> 00:04:03.070
at how threading and memory
are working together,

00:04:03.070 --> 00:04:05.150
make sure to check out
the powerful new tools

00:04:05.150 --> 00:04:08.030
inside of Android Studio, which
just got an awesome revamp

00:04:08.030 --> 00:04:10.130
as a version 2.0.

00:04:10.130 --> 00:04:12.170
The deeper you go into
Android performance,

00:04:12.170 --> 00:04:13.980
the more you realize
how important

00:04:13.980 --> 00:04:16.240
memory is on this
platform, which

00:04:16.240 --> 00:04:18.644
is why you should check out
the rest of the memory videos

00:04:18.644 --> 00:04:20.560
on the Android Performance
Patterns playlists.

00:04:20.560 --> 00:04:23.870
And don't forget to check out
our Google+ community as well.

00:04:23.870 --> 00:04:27.259
So keep calm, profile your
code, and always remember,

00:04:27.259 --> 00:04:27.800
perf matters.

00:04:28.700 --> 00:04:32.350
[MUSIC PLAYING]

