WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:09.790
&gt;&gt; Hurrah. Okay. So I thought we'd start off
with an overview of the architecture of the

00:00:09.790 --> 00:00:14.940
Wave in a Box software, which is of course
the sort of the main goal of the Wave team

00:00:14.940 --> 00:00:20.830
for this year, is to produce Wave in a Box
as a working, federate-able useful wave instance

00:00:20.830 --> 00:00:27.910
that you could install inside a small organization
and use for a collaboration and communication

00:00:27.910 --> 00:00:34.100
in a small group. So there's been a fantastic
progress already from a--including lots of

00:00:34.100 --> 00:00:38.049
good contributions from outside of Google
already going into Wave in a Box so I thought

00:00:38.049 --> 00:00:41.589
we'll start off with an architecture of sort
of how that system is going to fit together.

00:00:41.589 --> 00:00:46.290
And then throughout the next couple of days,
there'll be more detailed talks on particular

00:00:46.290 --> 00:00:57.500
areas of interest inside Wave in a Box and
inside sort of the wave system in general.

00:00:57.500 --> 00:01:03.049
So this is a very, very high level view of
how a wave system based on Wave in a Box is

00:01:03.049 --> 00:01:09.320
going to work. So the Wave in a Box server
will be a sort of single home instance of

00:01:09.320 --> 00:01:13.600
a server. Initially our first goals don't
include sort of scaling to a massive size.

00:01:13.600 --> 00:01:17.071
We're going to get something working at a
small scale first. So your Wave in a Box server

00:01:17.071 --> 00:01:22.220
will be sitting on a box inside in your own
firewall or possibly, you know, in any kind

00:01:22.220 --> 00:01:28.480
of instance hosting environment that you choose
to use. On the left-hand side as you're looking

00:01:28.480 --> 00:01:34.690
at it there you can see clients. Clients can
connect over the internet or over your intranet.

00:01:34.690 --> 00:01:38.830
Web clients are of course going to be the
most common one, and we, just a few weeks

00:01:38.830 --> 00:01:45.030
ago, we launched and hooked up the code that
does a very rich Wave panel inside Wave in

00:01:45.030 --> 00:01:49.289
a Box. It's in fact...
&gt;&gt; I'm sorry. Is it possible to assist there...

00:01:49.289 --> 00:01:54.740
&gt;&gt; Yes.
&gt;&gt; [INDISTINCT]

00:01:54.740 --> 00:01:58.479
&gt;&gt; Goodbye, Dan. We can't see you anymore.
&gt;&gt; He left.

00:01:58.479 --> 00:02:07.340
&gt;&gt; Okay. Thanks [INDISTINCT]. Right. So just
a couple of weeks ago, we hooked up the Wave--the

00:02:07.340 --> 00:02:11.700
new Wave panel. This was in fact the code
we were planning to launch into Google Wave

00:02:11.700 --> 00:02:16.280
and so now we've open sourced it instead.
And so there's still a bit of work to go on

00:02:16.280 --> 00:02:22.800
that, it's missing a couple of the sort of
UI features that the Google Wave had but they're

00:02:22.800 --> 00:02:28.000
on their way. There's also a console client
which we're going to try very hard to keep

00:02:28.000 --> 00:02:33.130
working because it's a fantastic debugging
tool [INDISTINCT] for anything else. And then

00:02:33.130 --> 00:02:36.320
someone else could write some other kind of
client--maybe only through that way of sort

00:02:36.320 --> 00:02:40.010
of planning right now but I already know that
there's people working on iPhone clients and

00:02:40.010 --> 00:02:47.230
Android clients and so on. And then those
connect to the Wave in a Box server via the

00:02:47.230 --> 00:02:51.370
client server protocol which there'll be more
detail about later on, which runs over a WebSocket

00:02:51.370 --> 00:02:56.490
or some kind of socket obstruction for a--and
just as of like a couple of days ago, we can

00:02:56.490 --> 00:03:00.980
run on browsers without WebSocket now. The
console client also connects using WebSocket.

00:03:00.980 --> 00:03:06.750
And then your Wave in a Box server might offer
other client server protocols as well. For

00:03:06.750 --> 00:03:11.750
example, we have a bunch of servlets that
the web--the web client talks to that do things

00:03:11.750 --> 00:03:15.620
like pre-fetching of snapshots of data and
so on to make it more efficient. But the co-protocol

00:03:15.620 --> 00:03:20.480
run over something like the WebSocket. Then
the server hosts all your waves and at the

00:03:20.480 --> 00:03:25.489
other side we have other people's wave servers.
And so this is the federation--federation

00:03:25.489 --> 00:03:31.700
side. So other people's Wave in a Box servers
or other Wave servers can communicate with

00:03:31.700 --> 00:03:38.290
yours over the Internet using the federation
protocol running over XMPP. And so, you know,

00:03:38.290 --> 00:03:41.920
it's our hope that this side of the diagram
becomes a huge web of interconnected wave

00:03:41.920 --> 00:03:49.819
servers. Oh, by the way, I should have said,
if you have a question at any point stick

00:03:49.819 --> 00:03:53.830
your hand up and ask. Let's get the questions
out early. I will of course have question

00:03:53.830 --> 00:03:57.750
time at the end as well. But in case I'm sort
of skipping over something or missing some

00:03:57.750 --> 00:03:59.569
detail, raise your hand if you have a question
and we'll get right in to it. Yeah?

00:03:59.569 --> 00:04:04.569
&gt;&gt; I have a question. Are the slides available?
Is there a link to these slides?

00:04:04.569 --> 00:04:08.500
&gt;&gt; The question was, "Is there a link to the
slides?" There isn't yet but we'll copy all

00:04:08.500 --> 00:04:10.450
of these out into the public.
&gt;&gt; I can one.

00:04:10.450 --> 00:04:14.790
&gt;&gt; Maybe Pamela can do it now? All right.
Well, Pamela will post something to the forum,

00:04:14.790 --> 00:04:17.509
more into the way the live waves when we have
links out there.

00:04:17.509 --> 00:04:18.509
&gt;&gt; I have one.
&gt;&gt; Yeah?

00:04:18.509 --> 00:04:22.979
&gt;&gt; On those slides, you've mentioned undercurrent.
Are you also still developing Splash or is

00:04:22.979 --> 00:04:28.030
that--is it just released as it is?
&gt;&gt; There's no active work going--the question

00:04:28.030 --> 00:04:31.610
was, "Are we still developing Splash?" There's
no active work happening in Splash at the

00:04:31.610 --> 00:04:37.029
moment but we're supporting the API that Splash
talks to. So I haven't act--personally seen

00:04:37.029 --> 00:04:39.930
it running recently against Wave in a Box
but it--it should work.

00:04:39.930 --> 00:04:43.639
&gt;&gt; I [INDISTINCT] I have a demo.
&gt;&gt; Oh, Leonard has a demo of Splash running

00:04:43.639 --> 00:04:48.560
against Wave in a Box, fantastic. So, we're
planning to maintain it but there's no active

00:04:48.560 --> 00:04:52.550
development going into it right now. I guess
if someone's really keen about that that would

00:04:52.550 --> 00:04:57.469
be a fantastic place to jump in and you know,
you could sort of look after that bit of the

00:04:57.469 --> 00:05:07.780
code for a while. All right. So if we jump
inside the server box this is the logical

00:05:07.780 --> 00:05:14.289
architecture of the inside of the Wave in
a Box server. This is reminiscing of the architecture

00:05:14.289 --> 00:05:19.539
that the Google Wave system ran at a higher
scale but we've sort of replicated it inside--inside

00:05:19.539 --> 00:05:26.129
one server. And of course, this opened it
up to a scaling later on if we decide to just

00:05:26.129 --> 00:05:31.300
put things out in this particular way. So
this large box is labeled server core here,

00:05:31.300 --> 00:05:35.819
this is what you might imagine as--it's what
we call the Wave server. So the whole thing

00:05:35.819 --> 00:05:40.310
is the Wave in a Box server, and what we call
inside here, you know, it's class name is

00:05:40.310 --> 00:05:47.309
Wave server inside the code. And this is a
DOM operation and transform machine. It accepts

00:05:47.309 --> 00:05:51.800
operations from clients, transforms them against
the waves data and keeps the history. That's

00:05:51.800 --> 00:05:56.690
pretty much all it does. Although it also
has a lot of complexity related to--to a federation

00:05:56.690 --> 00:06:03.330
and so on. It accepts apps either from your--its
local clients or apps that have already being

00:06:03.330 --> 00:06:09.189
applied and transformed by some federated
server. And so it's responsible for taking

00:06:09.189 --> 00:06:13.039
those apps, transforming them if necessary,
and then sending them back out to anyone who's

00:06:13.039 --> 00:06:16.340
interested. And anyone who's interested is
anyone who's listening on the wave bus, which

00:06:16.340 --> 00:06:22.699
is a virtual bus inside the wave server. All
operations which apply to any all--all deltas

00:06:22.699 --> 00:06:30.479
operations which applies to any wavelet hosted
to this server or remotely are pushed out

00:06:30.479 --> 00:06:35.330
to the wave bus. And so any software component
listening on the wave bus sees all the wave

00:06:35.330 --> 00:06:39.119
traffic and can choose to act on it. So there's
no access controller or anything happening

00:06:39.119 --> 00:06:46.199
inside the box everything is global. So there's
a few Wave bus clients of particular note.

00:06:46.199 --> 00:06:51.310
Oh, and another thing I should point out,
some of what we'll be talking about in this

00:06:51.310 --> 00:06:56.139
talk and other talks, sometimes we'll talk
about how things should be or how we're working

00:06:56.139 --> 00:07:02.969
towards them being rather than how they necessarily
are now. So there's a lot of a--I mean, it's--the

00:07:02.969 --> 00:07:07.030
code is more complex than this diagram suggests.
We're working towards simplifying it towards

00:07:07.030 --> 00:07:12.819
this diagram so I think it's probably best
to talk about how we imagine things in the

00:07:12.819 --> 00:07:17.210
way we talk about things. Although sometimes
the code doesn't actually reflect that yet

00:07:17.210 --> 00:07:25.189
but it's where we're headed. So the first
Wave bus client is the client front end and

00:07:25.189 --> 00:07:29.870
so this is where the web client hooks up.
The web client's WebSocket is coming in from

00:07:29.870 --> 00:07:35.889
the outside there. So the client front end
sits on the wave bus and receives all the

00:07:35.889 --> 00:07:41.469
deltas and then it does access control and
has this sort of per user session state to

00:07:41.469 --> 00:07:46.219
send to the right deltas, to the right client,
so that whichever wave they've got open receives

00:07:46.219 --> 00:07:51.959
live updates. So a delta that comes into the
wave server is pushed out on a Wave bus and

00:07:51.959 --> 00:07:55.949
then the client front end has all the different
client end points and it determines which

00:07:55.949 --> 00:08:00.099
clients have this wave opened and pushes the
delta out to these clients. The client front

00:08:00.099 --> 00:08:06.869
end also receives deltas from all the remote
clients, does access control and then pushes

00:08:06.869 --> 00:08:11.289
the means of the wave server, submits them
to the server core. And then of course the

00:08:11.289 --> 00:08:18.630
server core turns around and that goes back
out on the Wave bus. So that's the client

00:08:18.630 --> 00:08:27.050
front end. And there's a bunch of servlets
importing various things. The data and robot

00:08:27.050 --> 00:08:31.560
APIs are one big thing that we have servlets
implementing. So these are then not live.

00:08:31.560 --> 00:08:37.811
so the client front end is looking after sort
of live sessions that are held open the servlets

00:08:37.811 --> 00:08:42.870
sort of, you know, one shop request, typical
web servlet, so the data API is not a live

00:08:42.870 --> 00:08:49.160
session. So these servlets answer the--the
data API, the robot API which usually, you

00:08:49.160 --> 00:08:53.630
know, quite often involve submitting deltas
to the server core in response to robot operations

00:08:53.630 --> 00:08:59.122
and the like. There's also a servlet that--oh
yeah, question?

00:08:59.122 --> 00:09:00.122
&gt;&gt; Yeah, just a quick question. I noticed
in with the move to a robot gateway into specific

00:09:00.122 --> 00:09:01.122
servers with a specific instance, are we moving
away from an agent framework?

00:09:01.122 --> 00:09:02.122
&gt;&gt; What do you mean by agent framework?
&gt;&gt; When [INDISTINCT] first came out, the idea

00:09:02.122 --> 00:09:03.122
was to have agents which will then be used
to communicate between different parts of

00:09:03.122 --> 00:09:09.224
your system and the wave system. But with
the roadblocks were meant to be built on top

00:09:09.224 --> 00:09:22.650
of an agent who was--just going to be doing
a specific task sort of thing as opposed to

00:09:22.650 --> 00:09:28.140
Wave?
&gt;&gt; Yes. So the question was, "Are we moving

00:09:28.140 --> 00:09:32.270
away from an agent infrastructure which was
sort of first described when we first released

00:09:32.270 --> 00:09:37.870
the source code and is in fact the way some
things inside Google Wave work?" Initially,

00:09:37.870 --> 00:09:42.060
yes. So that most--the simplest model for
Wave in a Box in, you know, inside one box

00:09:42.060 --> 00:09:48.020
is to do this all inside one press. [INDISTINCT]
as agents, we used to refer to as something

00:09:48.020 --> 00:09:53.110
instead of sat on the connection that was
a system level service, it could seal the

00:09:53.110 --> 00:09:58.370
content and then--so you could imagine implementing
the robot gateway which I haven't got to yet.

00:09:58.370 --> 00:10:02.860
Outside of this process but still on a, you
know, close trusted connection to the--to

00:10:02.860 --> 00:10:08.900
the Wave server. So at the moment we are implementing
all of these inside one box. When it comes

00:10:08.900 --> 00:10:12.300
time for that kind of scaling we'll probably
investigate something like that.

00:10:12.300 --> 00:10:20.260
&gt;&gt; It's all right.
&gt;&gt; So yes. Okay. Then the robot gateway talks

00:10:20.260 --> 00:10:24.190
to robots. It has a [INDISTINCT] communication,
it can be called by robots, or it calls out

00:10:24.190 --> 00:10:31.610
to robots. So as again, it's kind of the client
front end for robots as deltas speed out on

00:10:31.610 --> 00:10:36.010
the Wave bus. It checks if robots are involved,
and if robots are involved it sends events

00:10:36.010 --> 00:10:41.121
out to robots and then receives their responses,
does things and submits deltas. Leonard will

00:10:41.121 --> 00:10:46.950
be talking about the robot gateway right after--right
after me. Oh, that reminds me, is there a

00:10:46.950 --> 00:10:50.190
clock that I can look at? The clock on the
wall there by the way doesn't move so don't

00:10:50.190 --> 00:10:56.340
look at it. When was I supposed to finish,
10:00?

00:10:56.340 --> 00:10:58.640
&gt;&gt; About 10:30.
&gt;&gt; Ten thirty, cool.

00:10:58.640 --> 00:11:01.610
&gt;&gt; You have enough.
&gt;&gt; Sweet. And then the bottom box here doesn't

00:11:01.610 --> 00:11:04.960
exist yet. These are one of those examples
of things which is how we would like to do

00:11:04.960 --> 00:11:10.930
it but it doesn't do it yet. It's indexing.
So, indexing will be as--the indexing services

00:11:10.930 --> 00:11:15.000
will provide things like your inbox search
over text to dispense the kind of things,

00:11:15.000 --> 00:11:19.100
kind of searches you can do inside Google
Wave, provide folders and so on when we have

00:11:19.100 --> 00:11:23.680
them. So the indexing service sits on the
Wave bus and sees everything and then it's

00:11:23.680 --> 00:11:29.660
job is to maintain an index of who--of what
waves are in what, who's people's inboxes

00:11:29.660 --> 00:11:34.420
and then a text index that's searchable. Initial
plans to sort of shortcut this in Wave in

00:11:34.420 --> 00:11:41.810
a Box was to just chip and use the data stores
built in text search whatever it was but that

00:11:41.810 --> 00:11:46.480
only does so many things. We can't--it becomes
very difficult to do that ones we have any

00:11:46.480 --> 00:11:50.930
kind of per user index state, like if you
archieve a wave we need to write that to disk

00:11:50.930 --> 00:11:57.170
somewhere but it doesn't really belong in
the same store where all the wave data is

00:11:57.170 --> 00:12:04.840
stored. So, indexing. As we start building
up that kind of data--well, I guess, inbox

00:12:04.840 --> 00:12:15.910
ends up in a wave anyway. That's a good example
of something the index stores. Well, I guess

00:12:15.910 --> 00:12:24.060
the index will answer the query of what's
in your inbox. So for each wave, we store

00:12:24.060 --> 00:12:29.700
your state about which--sort of which blips
you've read in a wave, whether you've put

00:12:29.700 --> 00:12:33.511
it a folder or whether you've archived it
inside another wavelet, inside the same wave,

00:12:33.511 --> 00:12:38.590
which will--in a way we'll describe later.
But the index it will be [INDISTINCT] asked,

00:12:38.590 --> 00:12:42.400
answering the question of what waves are in
my inbox right now. And so as you manipulate

00:12:42.400 --> 00:12:46.650
the waves, viewing them, and as new waves
appear, the index will maintain sort of a

00:12:46.650 --> 00:12:51.080
live view of what your index looks like and
what various search look like. And so [INDISTINCT]

00:12:51.080 --> 00:12:58.210
Wave bus will receive light traffic for that.
So then they made your Wave bus components.

00:12:58.210 --> 00:13:05.960
There'll probably be others cropping up as
other services arise, that gives you an idea

00:13:05.960 --> 00:13:09.710
of the architecture inside this server. So
there's still a bit of a crafty code lying

00:13:09.710 --> 00:13:14.020
around at the moment that we're trying to
get rid off. In particular right now, indexing

00:13:14.020 --> 00:13:20.050
is not implemented and there's a bit of a
chip that uses a global wave to represent

00:13:20.050 --> 00:13:27.340
people's inboxes. But we're going to get rid
of that real soon as soon as we have search

00:13:27.340 --> 00:13:32.990
implemented. So as soon as we have the data
store the system data we'll get rid of that.

00:13:32.990 --> 00:13:39.610
So the data stored here--as drawn on any of
the server core is talking to it, and so that--this

00:13:39.610 --> 00:13:45.190
link here is the server storing the deltas
on this because it transforms and applies

00:13:45.190 --> 00:13:53.100
them. And then the canonical state of a wavelet
is simply the deltas that the server has stored

00:13:53.100 --> 00:14:01.060
to disc. But of course other components here
also talks the data store so the attachment

00:14:01.060 --> 00:14:05.460
server for example, we have stored attachment
data somewhere, and a robot gateway has a

00:14:05.460 --> 00:14:09.310
list of robot somewhere. And they're all stored
in data stores so this diagram simplifies

00:14:09.310 --> 00:14:16.880
the data storage story a little bit. But this--those
stores are abstracted away behind interfaces

00:14:16.880 --> 00:14:24.170
in the code and so they could all be in fact
be different data stores. Any questions so

00:14:24.170 --> 00:14:31.260
far before I move on from the server box?
All right. Any questions on the live wave?

00:14:31.260 --> 00:14:33.370
Is there any--anyone watching the live wave?
No?

00:14:33.370 --> 00:14:34.730
&gt;&gt; [INDISTINCT]
&gt;&gt; Okay.

00:14:34.730 --> 00:14:41.561
&gt;&gt; [INDISTINCT] see your slides.
&gt;&gt; Oh, sweet. Thank you. All right. Inside

00:14:41.561 --> 00:14:45.520
the client, again, this is a very simplified
picture of the client and not entirely reflective

00:14:45.520 --> 00:14:48.920
of how it looks today but it is where they
kind of picture the way we're looking towards

00:14:48.920 --> 00:14:56.040
as a very high level picture. So the server
is off to the right here. And sort of the

00:14:56.040 --> 00:15:00.650
core flow, the client's job of displaying
live waves to you and letting you interact

00:15:00.650 --> 00:15:05.740
with them is the top half of this diagram.
So the client has some kind of socket connection,

00:15:05.740 --> 00:15:11.160
a WebSocket or a Flash socket or something
like that back to the server and that socket

00:15:11.160 --> 00:15:17.170
is hooked up to what we call the concurrency
control stack. It's the communication stack

00:15:17.170 --> 00:15:22.990
for a single Wave. So that looks after performing
operational transfer for you as operations

00:15:22.990 --> 00:15:30.279
come in from the server. And as you generate
operations by typing, the CC stack does operational

00:15:30.279 --> 00:15:36.100
transform and shows that you are opt to transform
against any apps that you haven't seen as

00:15:36.100 --> 00:15:42.460
you're making the key and so that all your--your
intention is preserved from all your interactions.

00:15:42.460 --> 00:15:51.370
And then it presents a live view of the wave
and then the web client hooks this up to what's

00:15:51.370 --> 00:15:55.370
called the Wave stack which is some codes
that have holding this CC stack and it's the

00:15:55.370 --> 00:16:00.760
current state of the wave in memory. And on
top of that, we have the Wave panel, the codename

00:16:00.760 --> 00:16:04.670
for our--the new Wave panel we released as
undercurrent, so you'll probably see that

00:16:04.670 --> 00:16:10.170
word throughout the code. The Wave panel is
responsible for displaying the wave to you

00:16:10.170 --> 00:16:16.850
on screen, rendering the wave and certain
interactions like marking blips as red when

00:16:16.850 --> 00:16:21.750
you read them and so on. For each blip inside
the Wave there's an editor. And so, the editor

00:16:21.750 --> 00:16:26.410
is a chunk of code we released quite a while
ago now. So the Wave panel is responsible

00:16:26.410 --> 00:16:31.680
for, you know, hooking up the edits of the
codes so that when you start typing, the ops

00:16:31.680 --> 00:16:37.690
spit out of your editor and then back down
the CC stack up and off to the server after

00:16:37.690 --> 00:16:44.460
being transformed. And then, of course, you
can--I guess you can't yet in Wave in a Box

00:16:44.460 --> 00:16:51.680
but you can have multiple waves open in theory,
this whole stack is a per wave thing. And

00:16:51.680 --> 00:16:59.190
then now, we also have a bunch of servlets
where it serves five times--oh, that's not

00:16:59.190 --> 00:17:02.400
a very good diagram--you know, front-ends
to the servlets. And so, the Wave stack uses

00:17:02.400 --> 00:17:06.390
the prefix servlet to fetch efficient snapshots
that can be encased by the browser and so

00:17:06.390 --> 00:17:11.329
on rather than pumping them over the web--the
WebSocket. So, really, this are just sort

00:17:11.329 --> 00:17:16.110
of spec snapshots but there's a bunch of other
servlets, again, the attachment upload servlet

00:17:16.110 --> 00:17:21.720
being a good example, that the--we'll use
the data API for Search soon. So here, the

00:17:21.720 --> 00:17:26.119
digest panel. The digest panel is the left-hand
panel in Wave. It shows your--at the moment,

00:17:26.119 --> 00:17:30.809
you know, your list of waves. But as we begin
implementing Search and things like that it'll

00:17:30.809 --> 00:17:35.299
show search results. So that will talk to
some servlet providing the search results

00:17:35.299 --> 00:17:42.809
via the data API's search functionality. And
a few great outbox is over to the right of

00:17:42.809 --> 00:17:46.690
the client [INDISTINCT] that don't exist yet.
Contact management is something we haven't

00:17:46.690 --> 00:17:54.049
attempted to implement yet. And fold is another
sort of Wave management task. Folders and

00:17:54.049 --> 00:17:58.630
safe search and so on we also haven't implemented.
We'll be separate client components talking

00:17:58.630 --> 00:18:05.970
to some kind of servlets to be live. So it's
a very simplistic overview of the client but

00:18:05.970 --> 00:18:10.540
will help you hopefully understand what's
happening if you go delving into the code.

00:18:10.540 --> 00:18:21.759
Are there any questions about anything so
far? All right. Well, that's all I had. It

00:18:21.759 --> 00:18:26.220
makes it sound really simple, really.
&gt;&gt; I have a question.

00:18:26.220 --> 00:18:29.950
&gt;&gt; Yes.
&gt;&gt; What was the primary data across [INDISTINCT]

00:18:29.950 --> 00:18:37.929
the Wave buses that the deltas operations
and what are the information that are [INDISTINCT].

00:18:37.929 --> 00:18:41.299
&gt;&gt; Yeah, sure. So the question was, "What's
the information that's flowing over the Wave

00:18:41.299 --> 00:18:49.230
Bus?" The Wave Bus is deltas. And so, a delta
is a container with a bunch of operations,

00:18:49.230 --> 00:18:53.600
operation being sort of an atomic mutation
on the Wave, and the delta bundles in that

00:18:53.600 --> 00:18:56.999
we submitted data like the author of the operations,
the timestamp they were applied and so on.

00:18:56.999 --> 00:19:03.510
So delta is submitted by clients and processed
by the server core and then deltas come back

00:19:03.510 --> 00:19:08.179
out on a Wave bus. Deltas are also what flows
over the client server protocol. The client

00:19:08.179 --> 00:19:11.919
front-end basically just does some filtering
and pushes those same deltas back out over

00:19:11.919 --> 00:19:21.539
the client server protocol. There is also
means to fetch the snapshot state of a wave.

00:19:21.539 --> 00:19:24.600
We don't really think of that as going over
the--of the Wave bus but it follows the same

00:19:24.600 --> 00:19:34.730
path.
&gt;&gt; Can you tell the distinction between the

00:19:34.730 --> 00:19:41.890
[INDISTINCT] delta and [INDISTINCT]?
&gt;&gt; Yes, there is. We only recently introduced

00:19:41.890 --> 00:19:46.210
this distinction serve in the code. So if
you're looking in the--at the code inside

00:19:46.210 --> 00:19:51.340
the server now, there's two different classes.
One representing a delta as submitted by the

00:19:51.340 --> 00:19:56.749
client and it lacks information like the timestamp,
which is chosen by the server and a signature

00:19:56.749 --> 00:20:01.649
which the server computes. And then, the class
name called transform wavelet delta represents

00:20:01.649 --> 00:20:06.580
something that's come back out of the server
and as authoritative metadata associated with

00:20:06.580 --> 00:20:10.960
it. On the Y, the protocol doesn't yet quite
capture this distinction but we're working

00:20:10.960 --> 00:20:17.350
towards that.
&gt;&gt; So I want to touch tomorrow in the Wave

00:20:17.350 --> 00:20:18.909
server.
&gt;&gt; Do you want to just talk at the mic so

00:20:18.909 --> 00:20:27.159
the stream and such is recorded properly?
&gt;&gt; Tomorrow morning in the Wave server talk,

00:20:27.159 --> 00:20:35.350
I'll go over the Wave bus again and be more
specific about the interface. So in the--I

00:20:35.350 --> 00:20:41.559
think--so at the level of these diagrams,
it's useful to--so that is two classes called

00:20:41.559 --> 00:20:48.499
Wave bus and Wave provider. I think it's useful
to think of both the subscription where you

00:20:48.499 --> 00:20:52.950
get the deltas and offer something called
commitment notices to learn when things that

00:20:52.950 --> 00:20:58.919
been presented is running out--is broadcast
on the Wave bus and then you can make sort

00:20:58.919 --> 00:21:06.749
of RPC procedure calls from these clients
of the Wave bus to the Wave server for--to

00:21:06.749 --> 00:21:11.489
request operation--delta history to try and
help--to request snapshots and to submit deltas.

00:21:11.489 --> 00:21:13.951
&gt;&gt; Thanks [INDISTINCT]. Question?
&gt;&gt; So there've been mentioned of a snapshot

00:21:13.951 --> 00:21:24.269
Wave or Wave snapshots since the optimization.
What made it [INDISTINCT] to have our own

00:21:24.269 --> 00:21:32.820
[INDISTINCT]?
&gt;&gt; Sure. The question was, "What's a Wave

00:21:32.820 --> 00:21:38.522
snapshot and how are they--how they are useful?"
So, a snap--a snapshot--well, some are delta.

00:21:38.522 --> 00:21:43.210
So the history of a wave is purely defined
by its delta. So if you threw away all other

00:21:43.210 --> 00:21:48.889
data and just had deltas you would still not
have lost anything, everything else is computed.

00:21:48.889 --> 00:21:55.450
A snapshot is simply the result of applying
some initial sequence of these deltas to an

00:21:55.450 --> 00:22:00.399
empty wave state. And so the deltas mutate
this state to reach some state, like what

00:22:00.399 --> 00:22:05.190
you would--like an initial state you get when
you open a wave in the client that's a snapshot

00:22:05.190 --> 00:22:13.710
at some version of the wave or a rendering
of. So, a snapshot is just the resulting state

00:22:13.710 --> 00:22:17.940
from applying a bunch of deltas from the start
of the wave. And so they're useful because

00:22:17.940 --> 00:22:22.789
that's normally much more of a concise representation
than the delta history. And so, a snapshot

00:22:22.789 --> 00:22:27.960
is what we fetch over the client server protocol
when we first commissioned the wave. We ask

00:22:27.960 --> 00:22:32.850
the server to compute a snapshot of the current
version and then--and then the client just

00:22:32.850 --> 00:22:39.340
sort of directly renders that. Inside the
Wave server, they're also useful. So, the

00:22:39.340 --> 00:22:44.890
robot operations that robots apply normally
against some, you know, we fetch a snapshot

00:22:44.890 --> 00:22:49.789
of the wave and then mutate it according to
what the robot asked us to do. And then the

00:22:49.789 --> 00:22:55.381
deltas that result from that mutation we submit
to the core. Does that answer the question?

00:22:55.381 --> 00:23:00.570
&gt;&gt; Yeah. Well, is there any intent to persist
snapshots?

00:23:00.570 --> 00:23:04.019
&gt;&gt; "Is there any intent to persist snapshots?"
So they're redundant in that the deltas provide

00:23:04.019 --> 00:23:08.749
the whole--all the information you need. We
probably will end up persisting snapshots

00:23:08.749 --> 00:23:14.620
periodically. Again, as an efficiency gain
so that when someone asks for a particular

00:23:14.620 --> 00:23:18.639
snapshot we can just read one of disc instead
of re-computing the whole thing. We'll probably

00:23:18.639 --> 00:23:25.149
store the latest version snapshot. Whenever
we sort of write a bunch of data to disc we'll

00:23:25.149 --> 00:23:33.769
store a snapshot of that point as well. Any
other questions? All right. Well, I finished

00:23:33.769 --> 00:23:39.009
nice and early. So the next talk is Leonard
talking about the Robot Gateway. And, I guess,

00:23:39.009 --> 00:23:44.000
let's start right away. I think we can slightly
have a longer break after Leonard's talk is

00:23:44.000 --> 00:23:46.389
done. All right. Fantastic.

