WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.080
Let's talk a bit about anonymization, more specifically onion routing, so Max has done a very good video on the Dark web

00:00:07.600 --> 00:00:13.530
And the deep web and the service web and the differences between them when people talk about the dark web

00:00:13.530 --> 00:00:18.719
They're mostly talking about Tor and specifically Tor hidden services. Now I'm not talking about that certainly today

00:00:18.720 --> 00:00:20.720
I might do that in a different video

00:00:20.730 --> 00:00:27.240
Tor literally stands for the onion router, right, it is an implementation of onion routing right which was developed in the mid 90s by

00:00:27.460 --> 00:00:29.790
US Naval research.The idea is

00:00:30.550 --> 00:00:37.290
It bounces around connections between different routers so that they're hard to track and it's and it provides anonymity

00:00:37.600 --> 00:00:44.280
So this is different from confidentiality which we usually associate with encryption right most of the time, we're encrypting messages

00:00:44.280 --> 00:00:47.219
So that even if people see that we've sent a message

00:00:47.800 --> 00:00:53.480
We, they can't read what it is like, but sometimes we don't even want people to see that we sent a message at all

00:00:55.720 --> 00:01:02.129
So what I'd like to do is focus on onion routing specifically bearing in mind, that Tor is a and implementation of it

00:01:02.129 --> 00:01:03.120
so in some sense

00:01:03.120 --> 00:01:05.189
I'm also talking about Tor, okay

00:01:05.189 --> 00:01:09.620
And maybe we'll focus a little bit more on what it is that Tor does differently a bit later.

00:01:09.620 --> 00:01:14.460
So this is me and which is my very well drawn computer as always and I want to talk to a server here

00:01:14.880 --> 00:01:19.960
Which doesn't have a monitor because in my view servers don't have monitors, so normally on this client server setup

00:01:19.980 --> 00:01:22.619
I want to talk to a server, but in this case

00:01:22.619 --> 00:01:24.749
I don't want anyone to know that I'm talking to a server at all

00:01:24.880 --> 00:01:31.320
I'd like to be remain completely anonymous, right, now if I then go onto the server and log on obviously that's not anonymous anymore

00:01:31.320 --> 00:01:32.890
Right so it's limits to this

00:01:32.890 --> 00:01:38.300
but this is the idea, now how this works is I'm going to bounce my connection around and

00:01:38.700 --> 00:01:44.780
Then it's going to go to the server and if in essence the last node on the hop, the last hop on the network is

00:01:44.780 --> 00:01:50.700
Is going to be the one actually visits that website on my behalf a bit like a proxy we're going to use multiple levels of encryption

00:01:50.700 --> 00:01:52.440
to try and

00:01:52.450 --> 00:01:56.850
Essentially confuse people who are trying to work out what's going on right now Tor in it in

00:01:57.399 --> 00:02:03.629
In its implementation uses three hops three intermediate nodes, so I'm going to limit: one

00:02:04.329 --> 00:02:06.189
That's not a very good computer

00:02:06.189 --> 00:02:12.420
Two. Hang on I thought servers didn't have monitors. Oh no, so well. Aw, don't. I mean

00:02:13.220 --> 00:02:19.820
yeah, so that's a good question right so you can run Tor and you can be an onion router on a client machine on a

00:02:19.820 --> 00:02:23.680
Laptop you know it doesn't really matter if your net connection is quite good

00:02:23.700 --> 00:02:26.820
you can do it. The software is free and they

00:02:27.180 --> 00:02:31.960
Very much want people to sign up and become these intermediate nodes because in some ways that's what the power tor is

00:02:32.440 --> 00:02:34.440
we'll get to that a little bit but

00:02:35.049 --> 00:02:37.589
in essence what happens here is I send a message to

00:02:37.810 --> 00:02:44.459
To this guy he forwarded on to this one he falls it on to this one who then forwards onto the server when a server

00:02:44.560 --> 00:02:48.820
Responds they simply pass the messages back now this haven't really solved any problems yet

00:02:49.180 --> 00:02:53.780
Because anyone sniffing here will know well ok we just need to sniff there and then  sniff there.

00:02:53.840 --> 00:02:56.400
and they can kind of reassemble the communication

00:02:56.400 --> 00:03:01.040
It makes it a bit of a pain, but it doesn't stop anyone from finding out: What's going on?

00:03:01.040 --> 00:03:05.240
I, even if these were encrypted so what we need to do is have multiple layers of encryption

00:03:05.400 --> 00:03:11.800
What's clever about onion routing, Is that no one in this network knows anything about the whole connection.

00:03:12.430 --> 00:03:15.480
They just know what's before them, and what's after them. Alright?

00:03:15.480 --> 00:03:19.920
so let me show you how this works so 
 I'm going to use different colored pen alright, so let's use this red pen.

00:03:19.960 --> 00:03:24.980
Let's imagine for a minute that I've established some shared symmetric keys with these three nodes here, right?

00:03:24.989 --> 00:03:27.959
So just like in previous videos where we talked about encryption

00:03:28.180 --> 00:03:30.209
We're talking about let's say an AES key

00:03:30.209 --> 00:03:35.879
And I have one shared with this guy and one shared with him and one shared with this guy no one else knows what they are.

00:03:35.880 --> 00:03:41.800
like because I used a key exchange to do this, so I had K1 K2 and K3

00:03:41.800 --> 00:03:48.120
and this router knows K1 this router knows K2, and this router knows catering now that might seem implausible

00:03:48.120 --> 00:03:53.000
But actually that's quite easy to set up using modern key exchange right Diffieâ€“Hellman for example performance is quite well

00:03:53.000 --> 00:03:56.220
If I encrypt something with K1 only this router

00:03:56.480 --> 00:04:01.880
Can see it all right and if I could encrypt some of K3 only this router can see it right there is no

00:04:01.930 --> 00:04:04.769
Encryption with the server at the Moment. Now onion Routing

00:04:05.620 --> 00:04:11.660
Essentially sends messages, encrypted multiple times with different keys in layers, so this message here

00:04:12.100 --> 00:04:14.160
is encrypted three times, right

00:04:14.160 --> 00:04:17.240
So this is where we sort of fast forward as I draw a bunch of lines on

00:04:17.300 --> 00:04:24.880
But we're going to say this [risk route] message here encrypted once with K3. It's encrypted another time with K2

00:04:25.700 --> 00:04:27.700
And when it's encrypted a final time

00:04:27.940 --> 00:04:31.199
With K1 now let's think about what that means

00:04:31.750 --> 00:04:33.580
it means that only

00:04:33.580 --> 00:04:35.500
This router here

00:04:35.500 --> 00:04:39.929
Could unlock the first layer. That's the first thing it means it also means that when it's done that it's

00:04:40.500 --> 00:04:46.620
Got a totally garbled message, but because it's still encrypted twice already right, so it's gibberish it can't possibly know what's going on

00:04:46.620 --> 00:04:51.360
But what it can do is forward that message on to k2 so k2 takes a message,

00:04:51.360 --> 00:04:57.090
Which is encrypted by k3 and then again encrypted by k2 and it can strip off a layer as well

00:04:57.090 --> 00:04:58.680
But again, it then looks at the message

00:04:58.680 --> 00:05:03.420
And it doesn't make any sense because it's still encrypted by k3 so it forwarded on to this router

00:05:04.180 --> 00:05:06.930
Encrypted by K3 finally K3

00:05:07.449 --> 00:05:09.330
Decrypts this message looks at it

00:05:09.330 --> 00:05:15.140
And it does make sense because it's not encrypted anymore, and it and it says the message says I'd like to go to Facebook please,

00:05:15.140 --> 00:05:20.960
and it goes I can do that and it connects to Facebook and receives a response now on the way back

00:05:21.180 --> 00:05:23.380
the exact reverse process happens.

00:05:23.380 --> 00:05:27.840
This router will add its encryption of k3 and forward the message onto router 2 - who will add K2

00:05:28.120 --> 00:05:35.070
Route 1 adds k1 and only we can decrypt the whole message because we have all the keys

00:05:35.139 --> 00:05:40.469
What's really interesting is the property that this gives us, the first thing is that k 2 doesn't need to know anything,

00:05:41.139 --> 00:05:47.668
except the address of K1 and the address of k3 it doesn't need to know who I am right it receives a message from

00:05:48.099 --> 00:05:53.039
K1 and all it knows based on the protocol is this is a message that needs to be forwarded to k3

00:05:53.229 --> 00:05:54.880
After I've removed my layer of encryption

00:05:54.880 --> 00:05:58.980
That's all it knows when it receives a message from k3 it adds its encryption

00:05:59.020 --> 00:06:04.640
And then passed it straight out the other door to router 1 so if this was compromised by an attacker

00:06:04.800 --> 00:06:09.920
They've learnt nothing right. They've learned that two of these guys and running Tor nodes or onion routing nodes

00:06:10.380 --> 00:06:16.680
They haven't learned who I am they haven't learned who the server is because both times it is encrypted with layers of encryption that they can't remove.

00:06:16.680 --> 00:06:18.810
This is kind of gives you an insight into what it is

00:06:18.810 --> 00:06:22.720
That's clever about onion routing they think about some of the other things that it does.

00:06:22.720 --> 00:06:27.320
K3 knows who the server is because it receives a message. That said I'd like to go to Facebook

00:06:27.320 --> 00:06:31.560
So it knows that someone on this network in visiting Facebook, and it knows that the next

00:06:31.560 --> 00:06:36.480
Hop is this chap this router here it knows nothing else. It doesn't know who this client is

00:06:36.480 --> 00:06:41.780
It doesn't know who router one is so there's no way for it to say: Ahh, Mike's visiting Facebook again, right?

00:06:42.070 --> 00:06:48.269
He's on there too often, because the way that the Tor protocol works. You don't actually know when you decrypt your layer

00:06:48.500 --> 00:06:53.460
How many more layers there are there could be 200 nodes and layers they don't tend to be but they could be.

00:06:53.760 --> 00:06:57.520
so the output node only knows what's going on on the server side and

00:06:57.980 --> 00:07:04.530
Similarly the input node my external is called a guard node is only aware that this client is browsing Tor any messages

00:07:04.530 --> 00:07:10.060
It receives are usually encrypted with two other layers of encryption that it can't decrypt so it just says well

00:07:10.080 --> 00:07:14.580
I've got this message. I need to forward it on to this router. That's all I know right

00:07:14.580 --> 00:07:18.720
I don't know, but they're on Facebook. I don't know that they are on a forum or they're doing amazon shopping

00:07:18.720 --> 00:07:24.840
I don't know anything about what they're doing, so this is what Tor does Tor is in essence an implementation of this approach, right?

00:07:24.840 --> 00:07:30.900
So it has a protocol with you know message lengths and structures that are well defined in its

00:07:31.360 --> 00:07:36.150
Documentation that specify how you establish these keys how you send these messages

00:07:36.699 --> 00:07:41.669
How each one should decrypt them and forward them on to the next one, but in essence what you do is

00:07:42.190 --> 00:07:45.029
This client here will create what we call a circuit

00:07:45.030 --> 00:07:47.030
Which is this three hops, by

00:07:47.260 --> 00:07:52.709
first establishing a shared key of him then instructing him to do the same and then him to do the same and

00:07:54.039 --> 00:07:58.139
adding extending the circuit each time they want to with new nodes on the end and

00:07:58.420 --> 00:08:04.140
Every time I do that all the previous messages have been encrypted. So nobody knows what's going on, so it's quite interesting

00:08:06.600 --> 00:08:10.380
Is it slower because of all these hops?
 It's a lot slower like you've got to consider that

00:08:11.140 --> 00:08:15.840
These nodes first of all they might be they might be serving a lot of clients at once so there might be other ca-

00:08:16.060 --> 00:08:16.750
uhh, keys

00:08:16.750 --> 00:08:22.470
shared with other people coming in here and leaving here and this one might be an exit node sometimes and he's talking to servers and

00:08:22.630 --> 00:08:24.310
browsing the web for people

00:08:24.310 --> 00:08:26.039
and so yes

00:08:26.039 --> 00:08:30.689
You don't want to be signing up to be an onion router if you haven't got quite a lot of bandwidth also consider that they?

00:08:30.690 --> 00:08:32.789
May not be located very close together, right?

00:08:32.789 --> 00:08:37.379
So this could be in Germany this one in the united states this over in Japan not really important

00:08:37.380 --> 00:08:42.600
but a point is that it's making you know large global hops which take in the order of

00:08:42.940 --> 00:08:45.540
Sub-second but not small amounts of time

00:08:45.780 --> 00:08:47.780
so you can expect to wait a

00:08:47.920 --> 00:08:52.770
Little bit longer for your messages to get through, all right, but the benefit you get is that no one knows?

00:08:52.889 --> 00:08:54.220
What what it is you're doing, right?

00:08:54.220 --> 00:08:59.459
We've got a situation here where no one really knows anything about what's going on at all, right? Which is very very clever

00:09:00.189 --> 00:09:01.389
and

00:09:01.389 --> 00:09:03.868
Has obvious benefits to people who want to remain anonymous.

00:09:04.680 --> 00:09:06.639
Now there's a few things we've missed out

00:09:06.640 --> 00:09:10.080
It's a lot of things I've missed out right because because the Tor protocol is quite complicated

00:09:10.140 --> 00:09:15.779
But this is the general idea the first thing is that if you go, if you if you create this circuit,

00:09:15.779 --> 00:09:19.318
And then you just go to Facebook and type in your username password and click it

00:09:19.319 --> 00:09:23.519
You know that's going to give away what you're up to, all right, Facebook will know who you  are for a start

00:09:23.679 --> 00:09:28.019
But if you go to a website, that's not even encrypted at all. This is sent in the clear, right?

00:09:28.019 --> 00:09:29.339
So someone's sniffing in at this point

00:09:29.339 --> 00:09:34.168
Let me use my blue pen for sort of eavesdroppers like if someone's eavesdropping in at this position

00:09:34.169 --> 00:09:35.850
They'll know exactly what you're doing, right?

00:09:35.850 --> 00:09:41.980
And you type in username and password then they have your username and password. So you still have to use TLS or HTTPS,

00:09:42.000 --> 00:09:42.800
uhh,

00:09:42.800 --> 00:09:48.500
connections to the actual servers right, but that's really on you once you've set up this circuit

00:09:48.680 --> 00:09:53.240
You said normal HTTP requests and responses to servers as you would normally

00:09:53.520 --> 00:10:00.380
It's just instead of it going through your normal internet connection and your normal ISP router it goes through this circuit

00:10:01.320 --> 00:10:03.060
and with all the encryption happening

00:10:03.069 --> 00:10:04.720
so in actual fact the

00:10:04.720 --> 00:10:11.730
Implementation the Tor uses. It works essentially like a proxy you talk to your own proxy server which handles all this for you and then

00:10:12.249 --> 00:10:16.769
responses come back so yes your web connection is a little bit slower, but for all you know it's

00:10:17.340 --> 00:10:20.840
Just a normal connection to a server. That's basically how it works is really not a lot

00:10:20.840 --> 00:10:24.680
more to it than that right and it's quite elegant, and it works very very well

00:10:24.680 --> 00:10:28.140
is using tools that like just installing a different kind of browser?

00:10:28.440 --> 00:10:33.440
Yeah
You use a Tor browser or you can use it as a service and then you know pipe other thi- other services through it

00:10:33.940 --> 00:10:41.220
But Tor is not illegal and nor should it be it's just encryption. There are a few downsides right the first aside from the speed

00:10:41.739 --> 00:10:43.739
The first is that

00:10:43.869 --> 00:10:48.659
people can sniff on this network and start to get the pieces of the puzzle the more positions

00:10:48.660 --> 00:10:50.969
You are you know the more pieces you get right?

00:10:50.970 --> 00:10:56.819
But so if I'm sniffing here at position A then what you see is you see that I'm using Tor you can't see anything else

00:10:56.859 --> 00:11:03.869
If I'm sniffing here or here I learn nothing right apart from this encrypted messages going on Tor these onion routers are

00:11:04.000 --> 00:11:07.660
listed publicly in the directory so finding their identity is not a

00:11:08.020 --> 00:11:12.210
Great concern of mine if I'm sniffing a position B at the exit node

00:11:12.210 --> 00:11:16.280
I find out that someone on Tor is visiting this website if it's encrypted

00:11:16.630 --> 00:11:18.220
Let's say using TLS

00:11:18.220 --> 00:11:24.329
Then that's all I find out the next question that people be asking is what happens if I control both A and B

00:11:24.580 --> 00:11:27.900
All right, if I'm at the front of the network going in and at the exit node

00:11:28.420 --> 00:11:30.420
Can I start to find out?

00:11:30.460 --> 00:11:33.059
What's going on? And the answer is yes, right?

00:11:33.060 --> 00:11:38.460
That's the weakness of Tor and something that basically is unsolvable apart from just to be very very vigilant

00:11:39.520 --> 00:11:41.470
So how would this work, well?

00:11:41.470 --> 00:11:44.680
You've got to remember that this is the big network. There's lots of users on it

00:11:45.010 --> 00:11:47.879
C is not the only person talking to this router, right?

00:11:47.880 --> 00:11:53.220
He's going to be the intermediary for conversations the third node the second node the first node

00:11:53.430 --> 00:11:56.039
He might be an exit node. He might also be talking to servers

00:11:56.050 --> 00:12:00.060
There's a lot of traffic going in and out like some of which is Tor some of which is not

00:12:00.160 --> 00:12:03.839
What we're talking about is looking at a lot of traffic coming from my machine to this router

00:12:04.180 --> 00:12:10.500
And a lot of traffic going from other routers to websites and trying to correlate them and work out what it was that I did

00:12:10.690 --> 00:12:15.809
Right, which is not an easy job, but you can imagine that if you've got some time signature of messages

00:12:15.810 --> 00:12:18.869
But let's say a sort of message, message, message, message, message

00:12:19.210 --> 00:12:24.479
Then talking to this server coming out here is going to be a kind of mess of lots of messages

00:12:24.790 --> 00:12:28.830
But you might be able to find the key points that match up

00:12:29.170 --> 00:12:34.050
With what I sent in like that's the idea this traffic. Analysis is the main

00:12:34.810 --> 00:12:41.580
Approach to essentially De-Anonymizing people if you found that I sent 15 messages of a certain size and

00:12:42.130 --> 00:12:45.090
a certain Sort of Tempo should we say and

00:12:45.520 --> 00:12:49.020
Then you found out that those 50 messages came out somewhere else on the network

00:12:49.260 --> 00:12:53.620
At the same just shortly after let's say a half a second after, at the exact same tempo

00:12:53.820 --> 00:12:55.060
That's a little bit interesting.

00:12:55.060 --> 00:12:58.960
With all these layers of encryption does that change the file size?

00:12:58.960 --> 00:13:02.500
No, which is a good thing right? This is cleverly designed with that in mind

00:13:02.640 --> 00:13:06.620
So Tor messages are called cells and cells are 512 bytes long. They're always

00:13:07.150 --> 00:13:10.499
512 bytes long the way that a router works out whether it's

00:13:10.570 --> 00:13:14.580
Reading a message or whether it needs to forward it on it's basically based on a small

00:13:14.580 --> 00:13:20.000
hash or digest that's held in the message essentially it looks at the tail end of the message,

00:13:20.000 --> 00:13:22.560
calculates a hash on it and goes well

00:13:22.560 --> 00:13:25.739
that doesn't match the hash I've got at all it must still be encrypted because it's nonsense

00:13:25.750 --> 00:13:29.759
So then it knows to forward it on, see. And it does this by basically

00:13:30.279 --> 00:13:34.799
avoiding changing the size of the message it will be obvious as you say right if if

00:13:35.439 --> 00:13:37.619
three layers of Encryption added ahead of each time

00:13:38.230 --> 00:13:41.519
You would know how far along the hops were and the whole attack would be a lot easier

00:13:41.709 --> 00:13:48.899
Right so onion routing is based around the idea that any message between any node in the network looks like any other message

00:13:48.899 --> 00:13:52.499
Right it could be the first one could the last one it could be something in the middle

00:13:52.569 --> 00:13:58.438
Right it could have nefarious information on it. It could have perfectly benign information on it impossible to know all right

00:13:58.439 --> 00:14:00.439
Which is really really clever.

00:14:01.930 --> 00:14:04.199
There's a lot of research on Tor that goes into

00:14:04.750 --> 00:14:08.369
Working out how to minimize a chance for both A and B are nefarious

00:14:08.370 --> 00:14:14.759
That's the idea, so this is why they sometimes call these guard nodes because usually you select some trusted ones

00:14:14.759 --> 00:14:18.029
And you only use those for example. We don't pick at random because lots of

