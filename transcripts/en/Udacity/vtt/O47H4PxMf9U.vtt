WEBVTT
Kind: captions
Language: en

00:00:00.360 --> 00:00:03.410
Okay, so
here's our first simple example UI.

00:00:03.410 --> 00:00:07.090
You might recognize this as
something similar to Gmail.

00:00:07.090 --> 00:00:09.810
How would you go about
constructing this UI?

00:00:09.810 --> 00:00:12.860
In my situations where you have
stacked content like this,

00:00:12.860 --> 00:00:16.379
one on top another, it's likely
you'll want to use a linear layout.

00:00:17.480 --> 00:00:21.070
Now the red toolbar at the top, which
we'll go into a in a bit later on in

00:00:21.070 --> 00:00:25.020
the course, is going to have a fixed
height, and the second view in

00:00:25.020 --> 00:00:29.490
the linear layout, whatever that is,
should take up the remaining space.

00:00:29.490 --> 00:00:34.110
Here you can see if I stretch it out,

00:00:34.110 --> 00:00:39.780
the red toolbar remains the same height,
but the list expands to fill the space.

00:00:39.780 --> 00:00:44.240
So the way we do that is
we set a weight of one

00:00:48.230 --> 00:00:50.260
and a height of zero dp.

00:00:51.300 --> 00:00:55.211
The zero dp height tells us that we
aren't using a fixed value here and

00:00:55.211 --> 00:00:56.840
it will be worked out later.

00:00:58.320 --> 00:01:02.220
Now, below this toolbar is this list and
this floating red button here,

00:01:02.220 --> 00:01:04.560
which we'll go into, again, later.

00:01:04.560 --> 00:01:09.910
Now because these elements overlap each
other, we'll want to use a frame layout.

00:01:09.910 --> 00:01:13.920
For the list, we use a list view or
a cycle view, so that will be the first

00:01:13.920 --> 00:01:17.910
child, and it will have a layout
width and height of matched parent.

00:01:17.910 --> 00:01:22.090
The button will then be the second
child, where if a gravity at bottom end,

00:01:22.090 --> 00:01:24.760
and a generous layout margin,

00:01:24.760 --> 00:01:27.119
something like 16 dp to move
it away from the edges.

00:01:28.380 --> 00:01:31.190
And in case you're wondering, the frame
layout should be the one that has

00:01:31.190 --> 00:01:34.240
the zero dip height, and
layout weight of one.

00:01:34.240 --> 00:01:38.280
Here's another, similar example
based on a contacts app, say for

00:01:38.280 --> 00:01:39.950
creating a new contact.

00:01:39.950 --> 00:01:43.630
Now in this situation you again
have a toolbar at the top with

00:01:43.630 --> 00:01:45.080
a scrolling section below it.

00:01:46.160 --> 00:01:50.160
Since we have a fixed set of form
fields, instead of a list view,

00:01:50.160 --> 00:01:53.690
we're going to use a scroll
view that holds a grid layout.

00:01:53.690 --> 00:01:59.560
The grid layout contains a left column
with icons which identify the form

00:01:59.560 --> 00:02:03.860
of sections and then a right column
containing the form fields themselves.

00:02:03.860 --> 00:02:07.411
Now when using the scroll view,
it can only contain one child view, and

00:02:07.411 --> 00:02:11.150
that child should have its
height based on its contents.

00:02:11.150 --> 00:02:15.600
That's why we use wrap content for
the height of the grid layout.

00:02:15.600 --> 00:02:17.110
One quick note here.

00:02:17.110 --> 00:02:19.749
If we want the toolbar
to scroll off the form,

00:02:19.749 --> 00:02:25.651
we'd simply move the toolbar inside
of the grid view as its first row,

00:02:25.651 --> 00:02:31.180
and set its layout column span to two so
it fills both columns.

00:02:31.180 --> 00:02:34.540
Let's look at one final,
more complicated, example.

00:02:34.540 --> 00:02:38.330
This resembles an apps detail
page in the Play Store.

00:02:38.330 --> 00:02:43.040
We can see there's this banner image
at the top with an overlayed toolbar

00:02:43.040 --> 00:02:44.590
on top of the image.

00:02:44.590 --> 00:02:48.310
Below that, there's this scrollable
white pane with details of the app.

00:02:48.310 --> 00:02:52.410
Now the overall composition is a frame
layout because we want the toolbar to

00:02:52.410 --> 00:02:56.160
overlay the image banner and
the entire screen to be scrollable.

00:02:56.160 --> 00:03:01.190
The first child is an ImageView because
we want it to be behind everything else.

00:03:01.190 --> 00:03:05.730
It has a fixed height, but its width can
vary, so we use a scale type of center

00:03:05.730 --> 00:03:11.080
crop to ensure that the image itself
always covers the entire banner area.

00:03:11.080 --> 00:03:15.190
Next is the scroll view which
contains a vertical linear layout.

00:03:15.190 --> 00:03:18.870
Because we want this to appear in
front of the image when scrolling, but

00:03:18.870 --> 00:03:24.700
behind the toolbar, the linear layout
itself has a white background, but

00:03:24.700 --> 00:03:30.190
it's offset by 200 dp using top
padding on the scroll view.

00:03:30.190 --> 00:03:32.570
This makes the image visible behind it,
but

00:03:32.570 --> 00:03:37.380
as you scroll, the image becomes
obscured by the scroll views background.

00:03:37.380 --> 00:03:40.930
The final child of the frame
layout is this toolbar

00:03:40.930 --> 00:03:44.610
which sits on top of everything
else with a transparent background.

00:03:44.610 --> 00:03:48.270
Now, when composing this kind of UI,
you'll likely want to do some tricks

00:03:48.270 --> 00:03:51.270
to slowly move the image at
a different rate to scrolling, or

00:03:51.270 --> 00:03:55.760
perhaps fade in a background on
the toolbar and the title as we scroll.

00:03:55.760 --> 00:03:57.910
There's some common techniques
that we're going to go through

00:03:57.910 --> 00:04:00.490
later in the course on how
to go about doing this.

00:04:00.490 --> 00:04:04.400
Now finally for the things inside the
linear layout, we can use nested layouts

00:04:04.400 --> 00:04:08.070
such as another horizontal linear
layout for these buttons across here.

