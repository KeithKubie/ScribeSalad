WEBVTT
Kind: captions
Language: en

00:00:00.200 --> 00:00:04.630
I mentioned earlier that your analysis model has classes in it, and

00:00:04.630 --> 00:00:07.440
those classes are likely to show up in the design model.

00:00:07.440 --> 00:00:10.980
However, some additional classes may also need to be there.

00:00:10.980 --> 00:00:12.145
What's going on is the following.

00:00:12.145 --> 00:00:17.020
Object-oriented development methods have an advantage called traceability.

00:00:17.020 --> 00:00:22.190
What this means is that you can see, starting with the real world that's being

00:00:22.190 --> 00:00:27.050
modeled, classes that directly represent those real world objects.

00:00:28.110 --> 00:00:31.610
Those classes show up in the object-oriented design as well and

00:00:31.610 --> 00:00:33.290
in the ultimate code.

00:00:33.290 --> 00:00:36.900
That is, you can trace a line in either direction between the real

00:00:36.900 --> 00:00:40.030
world problem and the code constructs.

00:00:40.030 --> 00:00:43.320
This can be a real benefit in dealing with maintenance of the system.

00:00:43.320 --> 00:00:46.150
However, along the way, you may have to invent some other classes and

00:00:46.150 --> 00:00:47.730
that's which we want to examine.

00:00:47.730 --> 00:00:50.910
First and foremost, you may need to implement relationships.

00:00:50.910 --> 00:00:54.030
Your programming language doesn't have associations in it, and it's going to

00:00:54.030 --> 00:00:58.610
be up to you to come up with a way for each of the associations in the analysis

00:00:58.610 --> 00:01:02.330
model, how you're going to deal with it at design time and in your program.

00:01:02.330 --> 00:01:05.840
You're also going to have to deal with intermediate results.

00:01:05.840 --> 00:01:09.630
For example, if you have some complex computation that's going to be used in

00:01:09.630 --> 00:01:15.450
several places, you want to store it in some intermediate inter, intermediate

00:01:15.450 --> 00:01:19.530
variable and then reuse it in the two places so you don't have to recompute it.

00:01:19.530 --> 00:01:23.140
Constructing those intermediate results may mean you are inventing new classes.

00:01:23.140 --> 00:01:27.070
And third, you may want to invent new classes for abstraction purposes.

00:01:27.070 --> 00:01:31.450
Object-oriented languages provide you the ability to have abstract classes,

00:01:31.450 --> 00:01:34.680
which capture common features of lower-level classes, and

00:01:34.680 --> 00:01:37.290
inventing those abstract classes and

00:01:37.290 --> 00:01:40.720
including them into your design can improve long-term maintainability.

