WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:03.500
Alright, Michael, so, here's what you have before you. You have the same

00:00:03.500 --> 00:00:07.260
housing data that we've looked at a couple of times before. I've, for the

00:00:07.260 --> 00:00:10.500
sake of readability, I've drawn over, some of the data points so that

00:00:10.500 --> 00:00:15.000
they're easier to see. This is exactly the data, that we've always had. Okay?

00:00:15.000 --> 00:00:15.680
&gt;&gt; Okay.

00:00:15.680 --> 00:00:18.830
&gt;&gt; Now, you'll notice that I marked one of

00:00:18.830 --> 00:00:21.860
them as green, because here's what we're going to do.

00:00:21.860 --> 00:00:23.430
I'm going to take the housing data you've got, I'm

00:00:23.430 --> 00:00:25.470
going to do some ensemble learning on it. And I'm

00:00:25.470 --> 00:00:28.050
going to hold out the green data point. Okay? So of

00:00:28.050 --> 00:00:30.110
the nine data points, you're only going to learn on 8

00:00:30.110 --> 00:00:32.180
of them. And I'm going to add that green data point

00:00:32.180 --> 00:00:35.460
as my test example and see how it does. Okay?

00:00:35.460 --> 00:00:38.130
&gt;&gt; Okay. So that sounds like, cross validation.

00:00:38.130 --> 00:00:41.790
&gt;&gt; It does. This is a cross validation. Or you could just say,

00:00:41.790 --> 00:00:46.080
I just put my training set and my test set on the same slide.

00:00:46.080 --> 00:00:46.230
&gt;&gt; Okay.

00:00:46.230 --> 00:00:50.620
&gt;&gt; Okay, Michael, so the first thing I'm going to do is I'm going to pick

00:00:50.620 --> 00:00:54.620
a random subset of these points. And just for the

00:00:54.620 --> 00:00:59.560
sake of the example, I'm going to pick five points

00:00:59.560 --> 00:01:01.530
randomly. And I'm going to do that five times. So

00:01:01.530 --> 00:01:05.840
I'm going to have five subsets of five examples. And by the

00:01:05.840 --> 00:01:08.610
way, I'm going to choose those randomly, and I'm going to choose

00:01:08.610 --> 00:01:10.550
them with replacement. So we're not going to end up in the

00:01:10.550 --> 00:01:13.310
situation we ended up just a couple of minutes ago

00:01:13.310 --> 00:01:15.640
where we never go to see the same data point twice.

00:01:15.640 --> 00:01:15.850
Okay?

00:01:15.850 --> 00:01:16.940
&gt;&gt; Yeah.

00:01:16.940 --> 00:01:21.590
&gt;&gt; Alright. So 5 subsets of 5 examples, and then I'm

00:01:21.590 --> 00:01:26.320
going to learn a third order polynomial. And I'm going to take those

00:01:26.320 --> 00:01:28.870
3rd order polynomials. I'm just going to learn on that subset, and then

00:01:28.870 --> 00:01:31.570
I'm going to combine them by averaging. Want to see what we get?

00:01:31.570 --> 00:01:33.010
&gt;&gt; Oh, yeah, sure.

00:01:33.010 --> 00:01:35.800
&gt;&gt; So here's what you get, Michael. Here I'm showing you a plot over

00:01:35.800 --> 00:01:38.400
those same points, with the five different

00:01:38.400 --> 00:01:41.000
3rd order polynomials. Can you see them?

00:01:41.000 --> 00:01:44.680
&gt;&gt; Yeah. They're, right. There's like a bunch of wispy hairs.

00:01:44.680 --> 00:01:47.320
&gt;&gt; Just like most third order polynomials. And as

00:01:47.320 --> 00:01:49.020
you can see they're, they're kind of you stare at

00:01:49.020 --> 00:01:51.690
them and you see their kind of similar. But

00:01:51.690 --> 00:01:54.300
some of them they veer off a little bit because

00:01:54.300 --> 00:01:56.910
they're looking at different data points. One of them

00:01:56.910 --> 00:01:58.980
actually very hard to see because it's only one like

00:01:58.980 --> 00:02:02.920
this. Actually veers off like this because just, purely

00:02:02.920 --> 00:02:05.850
randomly, it never got to see the two final points.

00:02:05.850 --> 00:02:06.450
&gt;&gt; I see.

00:02:06.450 --> 00:02:08.740
But they all, but they all seem to be pretty much in

00:02:08.740 --> 00:02:10.460
agreement, like between points three and

00:02:10.460 --> 00:02:12.360
four. There's a lot of consistency there.

00:02:12.360 --> 00:02:14.140
&gt;&gt; Right. Because just picking five of the

00:02:14.140 --> 00:02:16.280
subsets you seem to be able to either get

00:02:16.280 --> 00:02:17.780
things on the end, or you get things in

00:02:17.780 --> 00:02:19.950
the middle. And maybe one or two things on

00:02:19.950 --> 00:02:21.190
the end it sort of works out. Even the

00:02:21.190 --> 00:02:24.890
one that doesn't see the, the last two points

00:02:24.890 --> 00:02:26.580
still got to see a bunch of first ones

00:02:26.580 --> 00:02:29.760
and get this part of this space fairly right.

00:02:29.760 --> 00:02:30.590
&gt;&gt; Cool.

00:02:30.590 --> 00:02:31.310
&gt;&gt; Okay.

00:02:31.310 --> 00:02:34.670
So the question now becomes how good is

00:02:34.670 --> 00:02:36.810
the average of these compared to something we might

00:02:36.810 --> 00:02:39.760
have learned over the entire data set? And here's

00:02:39.760 --> 00:02:42.961
what we get when do that. So what you're

00:02:42.961 --> 00:02:46.354
looking at now Michael, is the red line,

00:02:46.354 --> 00:02:49.573
is the average of all of those five third

00:02:49.573 --> 00:02:53.342
order polynomials. And the blue line, is the fourth

00:02:53.342 --> 00:02:56.540
order polynomial that we learned when we did this

00:02:56.540 --> 00:03:00.295
with simple regression, a couple of lessons back.

00:03:00.295 --> 00:03:00.315
&gt;&gt; Okay.

00:03:00.315 --> 00:03:02.380
&gt;&gt; And you actually see them pretty close.

00:03:02.380 --> 00:03:05.260
&gt;&gt; Why is one of them a fourth order, and one a third order?

00:03:05.260 --> 00:03:09.140
&gt;&gt; Well what I wanted to do is try a simpler set of hypothesis,

00:03:09.140 --> 00:03:12.050
than we were doing, than when we were doing full blown regression. So third

00:03:12.050 --> 00:03:16.500
order simpler than fourth order. So, I thought we'd combine a bunch of simpler

00:03:16.500 --> 00:03:19.940
rules. Then the one we had used before and see how well it does.

00:03:19.940 --> 00:03:20.850
&gt;&gt; You want to know how well it does?

00:03:20.850 --> 00:03:21.700
&gt;&gt; I would!

00:03:21.700 --> 00:03:24.680
&gt;&gt; Well it turns out that on this data

00:03:24.680 --> 00:03:26.630
set and I did this many, many, many times

00:03:26.630 --> 00:03:28.470
just to see what would happen with many different

00:03:28.470 --> 00:03:31.550
random subsets. It typically is the case that the

00:03:31.550 --> 00:03:34.240
blue line always does better on the training set,

00:03:34.240 --> 00:03:37.320
the red points, than the red line does. But

00:03:37.320 --> 00:03:39.790
the red line almost always does better on the

00:03:39.790 --> 00:03:42.490
green point on the test set or the validation set.

00:03:42.490 --> 00:03:43.510
&gt;&gt; Interesting.

00:03:43.510 --> 00:03:46.940
&gt;&gt; That is kind of interesting. So wait, so let me get this straight.

00:03:46.940 --> 00:03:50.690
It seems sort of magical. So, so it learns an average

00:03:50.690 --> 00:03:54.710
of third degree polynomials, third order polynomials, which is itself a

00:03:54.710 --> 00:03:58.460
third order polynomial. But you're saying it does better by doing

00:03:58.460 --> 00:04:03.320
this kind of trick than just learning a third order polynomial directly.

00:04:03.320 --> 00:04:05.180
&gt;&gt; Yeah, why might you think that might be?

00:04:06.470 --> 00:04:08.420
I have a guess, you tell me what you think.

00:04:08.420 --> 00:04:12.050
&gt;&gt; Wow, so well, I mean, you know, the danger is often

00:04:12.050 --> 00:04:16.829
over fitting, over fitting is like the scary possibility. And so maybe

00:04:16.829 --> 00:04:20.930
by, by kind of mixing the data up in this way and focusing

00:04:20.930 --> 00:04:24.330
on different subsets of it. I don't know. Somehow manages to find the

00:04:24.330 --> 00:04:26.170
important structure as opposed to getting

00:04:26.170 --> 00:04:28.020
misled by any of the individual datapoints.

00:04:28.020 --> 00:04:29.640
&gt;&gt; Yeah. That's the basic idea. It's kind of the

00:04:29.640 --> 00:04:31.880
same thing, at least that's what I, I think that's

00:04:31.880 --> 00:04:34.650
a good answer. It's basically the same kind of argument

00:04:34.650 --> 00:04:37.080
you make for cross validation. Alright. You take a random

00:04:37.080 --> 00:04:42.440
bunch of subsets. You don't get trapped by one or two points that happen to

00:04:42.440 --> 00:04:44.290
be wrong because they happen to be wrong

00:04:44.290 --> 00:04:46.090
because of noise or whatever. And you sort

00:04:46.090 --> 00:04:48.180
of average out all of the variances and

00:04:48.180 --> 00:04:51.140
the differences. Hm. And often times it works.

00:04:51.140 --> 00:04:55.180
And in practice this particular technique of ensemble learning

00:04:55.180 --> 00:04:58.150
does quite well in getting rid of overfitting.

00:04:58.150 --> 00:04:59.680
&gt;&gt; And what is this called?

00:04:59.680 --> 00:05:02.230
&gt;&gt; So, this particular version, where you take

00:05:02.230 --> 00:05:06.320
a random subset and you combine by the mean, it's called bagging.

00:05:06.320 --> 00:05:09.350
&gt;&gt; And I guess the bags are the random subsets?

00:05:09.350 --> 00:05:09.930
&gt;&gt; Sure.

00:05:09.930 --> 00:05:12.630
&gt;&gt; [LAUGH]

00:05:12.630 --> 00:05:13.610
That's how I'm going to think of it.

00:05:13.610 --> 00:05:15.940
&gt;&gt; That's how I'm going to think of it. It also has another name

00:05:15.940 --> 00:05:19.880
which is called bootstrap aggregation. So I

00:05:19.880 --> 00:05:21.900
guess the different subsets are the boots.

00:05:21.900 --> 00:05:24.520
&gt;&gt; [LAUGH] No,no, no, no bootstrap usually

00:05:24.520 --> 00:05:27.070
refers to pulling yourself up by your bootstraps.

00:05:27.070 --> 00:05:27.900
&gt;&gt; Yeah, I

00:05:27.900 --> 00:05:30.730
like my, I like my answer better. So, each of the subsets

00:05:30.730 --> 00:05:34.120
are the boots and the averaging is the strap. And there you go.

00:05:34.120 --> 00:05:37.250
So, regardless of whether you call it bootstrap aggregation or you call it

00:05:37.250 --> 00:05:40.890
bagging, you'll notice it's not what I said we were going to talk about

00:05:40.890 --> 00:05:45.230
during today's discussion. I said we were going to talk about boosting. So we're

00:05:45.230 --> 00:05:46.380
talking about bagging but we're going to

00:05:46.380 --> 00:05:48.020
talk about boosting. The reason I wanted

00:05:48.020 --> 00:05:50.460
to talk about bagging is because it's really the simplest thing you can

00:05:50.460 --> 00:05:53.010
think of and it actually works remarkably well. But there are a couple

00:05:53.010 --> 00:05:54.490
of things that are wrong with it, or a couple

00:05:54.490 --> 00:05:58.070
of things you might imagine you might do better. That

00:05:58.070 --> 00:06:00.800
might address some of the issues and we're going to see

00:06:00.800 --> 00:06:03.630
all of those when we talk about boosting right now.

