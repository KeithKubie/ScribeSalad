WEBVTT
Kind: captions
Language: en

00:00:00.252 --> 00:00:01.710
SRIRAM SAROOP: Good
morning, folks.

00:00:01.710 --> 00:00:03.460
Welcome to our talk.

00:00:03.460 --> 00:00:05.890
So today we're going to
be telling you a story.

00:00:05.890 --> 00:00:08.780
This is a story of how
we built the Chrome Dev

00:00:08.780 --> 00:00:10.910
Editor on the Chrome platform.

00:00:10.910 --> 00:00:13.110
This is our story for
the past eight months.

00:00:13.110 --> 00:00:15.780
And we'll try to compress
it to the next 30 minutes.

00:00:15.780 --> 00:00:17.430
And along this
journey, you will learn

00:00:17.430 --> 00:00:19.680
how to build your own
awesome, multi device

00:00:19.680 --> 00:00:22.850
applications on the
Chrome platform.

00:00:22.850 --> 00:00:25.615
I'm Sriram Saroop, a Product
Manager on the Chrome team

00:00:25.615 --> 00:00:27.740
and also the Product Manager
for Chrome Dev Editor.

00:00:27.740 --> 00:00:28.823
DEVON CAREW: Good morning.

00:00:28.823 --> 00:00:29.690
And I'm Devon Carew.

00:00:29.690 --> 00:00:31.773
I'm an engineer on the
Dart Team and the Tech Lead

00:00:31.773 --> 00:00:32.992
of the Chrome Dev Editor.

00:00:32.992 --> 00:00:33.950
SRIRAM SAROOP: Awesome.

00:00:33.950 --> 00:00:35.900
So what is the
Chrome Dev Editor?

00:00:35.900 --> 00:00:37.390
It's what you see on the screen.

00:00:37.390 --> 00:00:39.260
It's a developer tool
for building apps

00:00:39.260 --> 00:00:40.544
on the Chrome platform.

00:00:40.544 --> 00:00:41.835
You can build web applications.

00:00:41.835 --> 00:00:43.460
You can also build
Chrome applications.

00:00:43.460 --> 00:00:46.450
You can write them in
JavaScript or in Dart.

00:00:46.450 --> 00:00:49.830
The Chrome Dev Editor itself
is built as a Chrome app.

00:00:49.830 --> 00:00:53.481
And it's written in Dart
and uses Polymer for its UI.

00:00:53.481 --> 00:00:55.730
If you have no idea what
Polymer, Chrome Apps, or Dart

00:00:55.730 --> 00:00:58.550
are, no worries, we'll
cover that in the talk.

00:00:58.550 --> 00:01:00.900
So being a Chrome app,
the Chrome Dev Editor

00:01:00.900 --> 00:01:04.030
runs not only on
Windows, Mac, and Linux,

00:01:04.030 --> 00:01:06.050
it also runs on
your Chromebooks.

00:01:06.050 --> 00:01:06.661
That's right.

00:01:06.661 --> 00:01:07.410
So you can start--

00:01:07.410 --> 00:01:07.670
[APPLAUSE]

00:01:07.670 --> 00:01:09.753
SRIRAM SAROOP: --building
apps on your Chromebooks

00:01:09.753 --> 00:01:11.720
with the Chrome Dev Editor.

00:01:11.720 --> 00:01:13.427
So I told you that
the Chrome Dev Editor

00:01:13.427 --> 00:01:14.760
is built on the Chrome platform.

00:01:14.760 --> 00:01:17.090
So let's define what
the Chrome platform is.

00:01:17.090 --> 00:01:18.600
There are three parts to this.

00:01:18.600 --> 00:01:20.200
Firstly, Chrome Apps.

00:01:20.200 --> 00:01:23.100
So Chrome Apps really
extend the web.

00:01:23.100 --> 00:01:25.450
They add new, rich
native capabilities

00:01:25.450 --> 00:01:27.840
that are not normally
available to web pages.

00:01:27.840 --> 00:01:32.040
These range from accessing
devices over Bluetooth and USB

00:01:32.040 --> 00:01:34.610
to getting access to the raw
file system, where you can read

00:01:34.610 --> 00:01:37.030
and write files to a
user selected folder.

00:01:37.030 --> 00:01:39.900
Chrome Apps run cross
platform by default.

00:01:39.900 --> 00:01:42.350
And that's not limited just
to desktop operating systems.

00:01:42.350 --> 00:01:44.980
They run on Android
and iOS as well.

00:01:44.980 --> 00:01:47.645
We'll be talking
about that shortly.

00:01:47.645 --> 00:01:49.270
So, Devon, you want
to talk about Dart?

00:01:49.270 --> 00:01:50.020
DEVON CAREW: Yeah.

00:01:50.020 --> 00:01:50.890
So what is Dart?

00:01:50.890 --> 00:01:53.400
Dart's a structured programming
language for the web.

00:01:53.400 --> 00:01:55.276
It's class-based
and object-oriented

00:01:55.276 --> 00:01:57.150
and is designed to be
familiar to developers.

00:01:57.150 --> 00:02:00.600
So if you're familiar with
Java, or JavaScript, or C Sharp,

00:02:00.600 --> 00:02:02.100
Dart will seem very
familiar to you.

00:02:02.100 --> 00:02:04.740
It's also designed to be
productive, to write code in.

00:02:04.740 --> 00:02:07.334
It's statically analyzable and
really amenable to tooling.

00:02:07.334 --> 00:02:08.750
So you can get
errors and warnings

00:02:08.750 --> 00:02:11.319
as you type rather than at
run time or at deploy time.

00:02:11.319 --> 00:02:13.630
It supports good code
refactoring tools,

00:02:13.630 --> 00:02:17.472
so you can keep your code
healthy when it grows large.

00:02:17.472 --> 00:02:18.842
It has a native virtual machine.

00:02:18.842 --> 00:02:20.425
So if you're running
in a browser that

00:02:20.425 --> 00:02:23.220
has Dart support natively, you
get that performance benefit.

00:02:23.220 --> 00:02:24.730
But it also compiles
to JavaScript.

00:02:24.730 --> 00:02:28.702
So with Dart you can target
any modern HTML5 browser.

00:02:28.702 --> 00:02:29.660
SRIRAM SAROOP: Awesome.

00:02:29.660 --> 00:02:32.360
So the third part that the
Chrome platform constitutes

00:02:32.360 --> 00:02:33.320
is Polymer.

00:02:33.320 --> 00:02:36.770
Polymer really brings software
encapsulation to the web.

00:02:36.770 --> 00:02:39.660
So with Polymer you can
encapsulate not only script,

00:02:39.660 --> 00:02:41.390
but also markup and styling.

00:02:41.390 --> 00:02:43.560
You can build your own
custom HTML elements

00:02:43.560 --> 00:02:45.920
that you can reuse both
within your project

00:02:45.920 --> 00:02:47.617
as well as across projects.

00:02:47.617 --> 00:02:49.950
In addition to the ability
to build your own custom HTML

00:02:49.950 --> 00:02:53.260
elements, you now have access
to a library of rich UI elements

00:02:53.260 --> 00:02:55.794
that we've made available
called Material Design.

00:02:55.794 --> 00:02:58.210
And you can use these elements
to make your apps much more

00:02:58.210 --> 00:03:00.280
beautiful out of the box.

00:03:00.280 --> 00:03:02.269
So the Chrome Editor
is built on these three

00:03:02.269 --> 00:03:03.560
pillars of the Chrome platform.

00:03:03.560 --> 00:03:05.313
Let's take a step
back and tell you

00:03:05.313 --> 00:03:06.896
why we decided to
build the Chrome Dev

00:03:06.896 --> 00:03:09.450
Editor in the first place.

00:03:09.450 --> 00:03:10.160
Chrome Apps.

00:03:10.160 --> 00:03:12.480
So Chrome Apps launched
late last year.

00:03:12.480 --> 00:03:14.460
And we found some
really impressive apps

00:03:14.460 --> 00:03:16.800
that you, as web
developers, had built.

00:03:16.800 --> 00:03:19.930
Ranging from an online
DJ tool for mixing music

00:03:19.930 --> 00:03:22.730
to a fully offline
capable video editing app.

00:03:22.730 --> 00:03:24.590
Amidst all these
impressive apps,

00:03:24.590 --> 00:03:26.400
however, there was
one category of apps

00:03:26.400 --> 00:03:28.610
that we did not quite
see on the web store.

00:03:28.610 --> 00:03:30.580
And that was developer tools.

00:03:30.580 --> 00:03:31.220
That's right.

00:03:31.220 --> 00:03:33.290
So we didn't quite see
many developer tools

00:03:33.290 --> 00:03:34.450
coming up on the web store.

00:03:34.450 --> 00:03:37.170
And we challenged ourselves to
see if the Chrome platform can

00:03:37.170 --> 00:03:40.650
be extended so that you can
build developer tools on it.

00:03:40.650 --> 00:03:43.440
And more importantly, we wanted
to provide a great developer

00:03:43.440 --> 00:03:45.560
experience for you,
as web developers,

00:03:45.560 --> 00:03:47.160
using the Chrome platform.

00:03:47.160 --> 00:03:49.850
So the Chrome Apps
team was playing around

00:03:49.850 --> 00:03:52.210
with this idea of building
a prototype developer

00:03:52.210 --> 00:03:53.500
environment as a Chome app.

00:03:53.500 --> 00:03:55.240
And this was around
eight months back.

00:03:55.240 --> 00:03:57.340
And that's when
our friends in Dart

00:03:57.340 --> 00:04:00.630
had a similar thought process.

00:04:00.630 --> 00:04:03.832
DEVON CAREW: Yeah, so why did
the Dart team get involved?

00:04:03.832 --> 00:04:06.290
So for some background, I work
on the part of the Dart team

00:04:06.290 --> 00:04:09.235
that's doing the development
environment-- the Dart Editor.

00:04:09.235 --> 00:04:11.610
And for those of you who don't
know, most of Dart's tools

00:04:11.610 --> 00:04:12.885
are themselves written in Dart.

00:04:12.885 --> 00:04:14.468
We've got
Dart-to-JavaScript Compiler,

00:04:14.468 --> 00:04:16.029
which was written in Dart.

00:04:16.029 --> 00:04:18.170
Our Dart Analysis tools
are written in Dart.

00:04:18.170 --> 00:04:21.709
And our Package Manager
Pub is written in Dart.

00:04:21.709 --> 00:04:24.540
And a big piece that isn't, is
the part that I was working on,

00:04:24.540 --> 00:04:25.240
the Dart Editor.

00:04:25.240 --> 00:04:27.850
It's written in Java as
an Eclipse application.

00:04:27.850 --> 00:04:30.210
So my team for awhile had
been thinking about ways

00:04:30.210 --> 00:04:34.660
that we could spend more
time writing Dart ourselves

00:04:34.660 --> 00:04:37.000
and re-host our developer
environment in Dart.

00:04:37.000 --> 00:04:38.550
As we were working
on the Dart team

00:04:38.550 --> 00:04:40.630
but spending all of
our time writing Java.

00:04:43.550 --> 00:04:46.560
And about a year ago, we heard
about the Chrome Apps platform,

00:04:46.560 --> 00:04:49.018
which really appealed to us
because it was going to give us

00:04:49.018 --> 00:04:52.570
a way to write native-like
applications in Dart.

00:04:52.570 --> 00:04:54.630
And basically it would
give us the vehicle

00:04:54.630 --> 00:04:57.612
for writing our development
environment in Dart.

00:04:57.612 --> 00:04:59.570
We're really excited
about some of the features

00:04:59.570 --> 00:05:01.240
that the Chrome Apps
platform gave us.

00:05:01.240 --> 00:05:03.890
We could run across platform
on Windows, Mac, and Linux.

00:05:03.890 --> 00:05:06.640
We could target Chromebooks,
which would be awesome.

00:05:06.640 --> 00:05:08.510
And it has some other
time saving features,

00:05:08.510 --> 00:05:10.880
like auto update, which
we could write ourselves.

00:05:10.880 --> 00:05:12.505
But because it's
built in the platform,

00:05:12.505 --> 00:05:14.940
it would save us
time, and we could

00:05:14.940 --> 00:05:18.160
focus on more domain
specific features.

00:05:18.160 --> 00:05:22.120
In addition, we were really
excited about the possibility

00:05:22.120 --> 00:05:24.226
of writing our UI
in HTML and CSS

00:05:24.226 --> 00:05:26.100
because it would give
us a lot of flexibility

00:05:26.100 --> 00:05:30.740
and sophistication and room
to experiment with new UIs,

00:05:30.740 --> 00:05:32.740
where our previous
technology really

00:05:32.740 --> 00:05:34.070
didn't have that flexibility.

00:05:34.070 --> 00:05:38.000
So we're really
excited to-- we saw

00:05:38.000 --> 00:05:42.320
that writing our IDE in Dart and
building on the Chrome platform

00:05:42.320 --> 00:05:44.780
as a way of taking our
tooling into the next level.

00:05:44.780 --> 00:05:46.187
So we started a prototype.

00:05:46.187 --> 00:05:48.270
And we were about 8,000
lines in when we found out

00:05:48.270 --> 00:05:49.880
that the Chrome Apps guys
were doing the same thing.

00:05:49.880 --> 00:05:51.280
SRIRAM SAROOP: Yeah,
so it's not often

00:05:51.280 --> 00:05:52.935
that you write 8,000
lines and then figure out

00:05:52.935 --> 00:05:55.476
that another team is pretty much
working on the same project.

00:05:55.476 --> 00:05:57.310
So Devon and I met
eight months back.

00:05:57.310 --> 00:06:00.100
And we realized that each
of us had prototypes.

00:06:00.100 --> 00:06:01.580
We had shared goals here.

00:06:01.580 --> 00:06:03.990
We wanted to provide a great
developer experience cross

00:06:03.990 --> 00:06:04.950
platform.

00:06:04.950 --> 00:06:07.590
And we decided to combine
forces and instead do

00:06:07.590 --> 00:06:10.000
a single developer environment
that targeted both the use

00:06:10.000 --> 00:06:13.260
case of building Chrome apps,
as well as web applications

00:06:13.260 --> 00:06:15.840
both in JavaScript,
as well as Dart.

00:06:15.840 --> 00:06:17.810
So this was around
seven months back.

00:06:17.810 --> 00:06:19.650
And we decided to
drop our prototypes

00:06:19.650 --> 00:06:20.910
and start from scratch.

00:06:20.910 --> 00:06:22.870
So in the next 20
minutes or so, we'll

00:06:22.870 --> 00:06:24.850
give you a glimpse of
what we went through

00:06:24.850 --> 00:06:26.300
in the previous seven months.

00:06:26.300 --> 00:06:28.400
So the way we're going
to do this is we'll

00:06:28.400 --> 00:06:31.600
be building the Chrome Dev
Editor on stage from scratch.

00:06:31.600 --> 00:06:33.330
We'll do this piece by piece.

00:06:33.330 --> 00:06:35.440
And with every piece
we'll introduce a problem

00:06:35.440 --> 00:06:37.157
that you as a web
developer might face.

00:06:37.157 --> 00:06:39.490
And we'll talk about a solution
that the Chrome platform

00:06:39.490 --> 00:06:42.636
provides, and then how we use
that solution in the Chrome Dev

00:06:42.636 --> 00:06:43.540
Editor.

00:06:43.540 --> 00:06:45.829
So let's get started
on this journey.

00:06:45.829 --> 00:06:46.870
Devon's going be rocking.

00:06:46.870 --> 00:06:47.740
Start from scratch.

00:06:47.740 --> 00:06:49.950
Pray to the demo gods.

00:06:49.950 --> 00:06:52.446
So how about starting with
a simple basic text editor?

00:06:52.446 --> 00:06:53.320
DEVON CAREW: Awesome.

00:06:53.320 --> 00:06:54.000
OK.

00:06:54.000 --> 00:06:55.541
So I'll switch over
to my Chromebook.

00:06:58.390 --> 00:06:59.850
So this is the
Chrome Dev Editor.

00:06:59.850 --> 00:07:02.670
It's a very stripped
down version of it.

00:07:02.670 --> 00:07:04.400
What you're actually
looking at, is it's

00:07:04.400 --> 00:07:06.960
editing its own
source code right now.

00:07:06.960 --> 00:07:08.940
And over the course of
the next 30 minutes,

00:07:08.940 --> 00:07:10.315
we're going to be
adding features

00:07:10.315 --> 00:07:12.390
to it, using it to modify
its own source code,

00:07:12.390 --> 00:07:15.740
restart, cross our fingers, and
come up with a more improved

00:07:15.740 --> 00:07:16.240
version.

00:07:16.240 --> 00:07:17.740
And hopefully by
the end of the talk

00:07:17.740 --> 00:07:21.280
we'll have the full deal back.

00:07:21.280 --> 00:07:24.290
So the editing component we're
using in the Chrome Dev Editor

00:07:24.290 --> 00:07:26.290
is the Ace Code Editor.

00:07:26.290 --> 00:07:29.160
For those of you not familiar,
it's a JavaScript library.

00:07:29.160 --> 00:07:31.290
And CDE is obviously
written in Dart.

00:07:31.290 --> 00:07:33.430
But Dart has a very
strong [INAUDIBLE].

00:07:33.430 --> 00:07:35.940
So it's easy for us to consume
best-of-breed JavaScript

00:07:35.940 --> 00:07:38.250
libraries.

00:07:38.250 --> 00:07:42.660
Ace gives us good editing
for CSS, HTML, Dart,

00:07:42.660 --> 00:07:43.743
and JavaScript.

00:07:43.743 --> 00:07:44.243
It's fast.

00:07:44.243 --> 00:07:45.102
And it looks nice.

00:07:45.102 --> 00:07:46.060
SRIRAM SAROOP: Awesome.

00:07:46.060 --> 00:07:47.910
So it is fairly
easy to get started

00:07:47.910 --> 00:07:49.680
because of Dart's [INAUDIBLE].

00:07:49.680 --> 00:07:52.230
We were able to reuse an
existing JavaScript library.

00:07:52.230 --> 00:07:54.670
That pretty much give us the
[INAUDIBLE] that we wanted.

00:07:54.670 --> 00:07:56.577
So, Devon, you know what?

00:07:56.577 --> 00:07:58.410
It would be awesome if
most developers could

00:07:58.410 --> 00:08:00.000
build applications
with just one file.

00:08:00.000 --> 00:08:02.820
But we've got to support
multiple files and possibly

00:08:02.820 --> 00:08:03.500
folders as well.

00:08:06.800 --> 00:08:08.300
How about adding a
files and folders

00:08:08.300 --> 00:08:09.780
view to the Chrome Dev Editor?

00:08:09.780 --> 00:08:10.260
DEVON CAREW: Yeah.

00:08:10.260 --> 00:08:10.575
Absolutely.

00:08:10.575 --> 00:08:11.090
We need one.

00:08:11.090 --> 00:08:13.910
And we're going to use
Polymer to build that UI up.

00:08:13.910 --> 00:08:15.220
SRIRAM SAROOP: Polymer?

00:08:15.220 --> 00:08:16.500
Of basic files and folders?

00:08:16.500 --> 00:08:18.565
Why can't you do that
using plain HTML and CSS?

00:08:18.565 --> 00:08:19.440
DEVON CAREW: You can.

00:08:19.440 --> 00:08:22.900
There are a couple reasons
why we chose to use Polymer.

00:08:22.900 --> 00:08:25.880
The short answer is for
maintainability, reusability,

00:08:25.880 --> 00:08:27.174
and some scaling issues.

00:08:27.174 --> 00:08:28.840
And the even shorter
answer is div soup.

00:08:32.330 --> 00:08:33.830
So what is this?

00:08:33.830 --> 00:08:35.730
This is a files view
component written

00:08:35.730 --> 00:08:37.680
as a series of nested divs.

00:08:37.680 --> 00:08:39.929
And there's nothing really
inherently wrong with this.

00:08:39.929 --> 00:08:42.450
I've written my UIs
like this in the past.

00:08:42.450 --> 00:08:44.502
And it's functional.

00:08:44.502 --> 00:08:45.460
But it has some issues.

00:08:45.460 --> 00:08:50.570
And those issues scale up, get
larger as your code base grows.

00:08:50.570 --> 00:08:52.930
So a lot of these divs
are not really semantic.

00:08:52.930 --> 00:08:54.900
A lot of them exist
only for you to have

00:08:54.900 --> 00:08:58.620
places to hang
CSS styles off of.

00:08:58.620 --> 00:09:01.742
And the CSS styles that you're
using to style this component

00:09:01.742 --> 00:09:03.450
can leak out of this
component and affect

00:09:03.450 --> 00:09:04.810
other parts of your UI.

00:09:04.810 --> 00:09:07.270
And, similarly, other
styles for your application

00:09:07.270 --> 00:09:10.990
can leak in and style this
component inadvertently.

00:09:10.990 --> 00:09:14.550
The code you write to manipulate
this component-- the JavaScript

00:09:14.550 --> 00:09:17.420
or Dart-- can develop
bad dependencies

00:09:17.420 --> 00:09:19.220
on the structure of it.

00:09:19.220 --> 00:09:21.420
So you have tight coupling
[INAUDIBLE] your HTML

00:09:21.420 --> 00:09:23.200
and your code.

00:09:23.200 --> 00:09:25.542
And reusing this code is hard.

00:09:25.542 --> 00:09:27.250
So if I want to create
another files view

00:09:27.250 --> 00:09:29.920
or similar component,
I can copy this HTML,

00:09:29.920 --> 00:09:32.290
hope I copy the
right CSS, and then

00:09:32.290 --> 00:09:34.600
have two places to
maintain things.

00:09:34.600 --> 00:09:37.080
So there's maintainability
and reusability issues.

00:09:37.080 --> 00:09:39.770
SRIRAM SAROOP: So you're
saying this div soup is messy.

00:09:39.770 --> 00:09:40.630
It's not reusable.

00:09:40.630 --> 00:09:41.546
It's not maintainable.

00:09:41.546 --> 00:09:43.360
And Polymer promises
to solve all of that?

00:09:43.360 --> 00:09:43.730
DEVON CAREW: Yes.

00:09:43.730 --> 00:09:44.813
SRIRAM SAROOP: How's that?

00:09:47.490 --> 00:09:49.370
DEVON CAREW: All right.

00:09:49.370 --> 00:09:51.905
So Polymer, it's a whole
bunch of technologies.

00:09:51.905 --> 00:09:54.510
But some of the things
it does for you,

00:09:54.510 --> 00:09:56.450
it encapsulates
your DOM structure

00:09:56.450 --> 00:09:59.560
so that places that are
outside your application

00:09:59.560 --> 00:10:01.770
don't need to see into
your internal structure

00:10:01.770 --> 00:10:02.990
of each component.

00:10:02.990 --> 00:10:05.624
It scopes the CSS so your
styles don't leak out,

00:10:05.624 --> 00:10:07.290
and other people's
styles don't leak in.

00:10:07.290 --> 00:10:10.490
And it essentially lets you
create reusable components

00:10:10.490 --> 00:10:12.577
that you can share
in your application

00:10:12.577 --> 00:10:13.910
and compose in your application.

00:10:13.910 --> 00:10:15.040
You can use other
people's components.

00:10:15.040 --> 00:10:17.680
It brings really good software
engineering principles

00:10:17.680 --> 00:10:18.260
to the web.

00:10:18.260 --> 00:10:20.843
SRIRAM SAROOP: So what does the
Polymer solution for the files

00:10:20.843 --> 00:10:22.180
view look like?

00:10:22.180 --> 00:10:23.500
DEVON CAREW: Let's see it.

00:10:23.500 --> 00:10:24.270
So this is it.

00:10:24.270 --> 00:10:26.380
It's a new DOM
element files view.

00:10:26.380 --> 00:10:27.760
It's a custom element.

00:10:27.760 --> 00:10:29.350
And you can use it
in your HTML just

00:10:29.350 --> 00:10:31.050
like you would use
divs, or paragraphs,

00:10:31.050 --> 00:10:32.267
or any other elements.

00:10:32.267 --> 00:10:33.350
SRIRAM SAROOP: No kidding?

00:10:33.350 --> 00:10:34.460
Just a single element?

00:10:34.460 --> 00:10:36.340
So where exactly is the
source code for all of that?

00:10:36.340 --> 00:10:38.090
DEVON CAREW: There's
a bit more behind it.

00:10:38.090 --> 00:10:39.040
We can see.

00:10:39.040 --> 00:10:41.180
So here is the
Polymer implementation

00:10:41.180 --> 00:10:42.150
of our files view.

00:10:42.150 --> 00:10:44.770
You can see there's
a clean separation

00:10:44.770 --> 00:10:47.760
between the structure of
our component and the HTML

00:10:47.760 --> 00:10:51.490
[? of ?] the style in the CSS
and the behavior in the Dart

00:10:51.490 --> 00:10:53.756
or JavaScript code.

00:10:53.756 --> 00:10:57.050
At the very top of the
HTML, Polymer element name

00:10:57.050 --> 00:10:58.270
equals files view.

00:10:58.270 --> 00:11:01.450
That's where we're defining
our new DOM element.

00:11:01.450 --> 00:11:04.220
The next line down
is template repeat.

00:11:04.220 --> 00:11:08.290
We're iterating
over the children--

00:11:08.290 --> 00:11:10.090
the child nodes of each folder.

00:11:10.090 --> 00:11:12.170
So we're basically
iterating over the files

00:11:12.170 --> 00:11:13.560
in a specific folder.

00:11:13.560 --> 00:11:17.210
And for each file in that
files view node element,

00:11:17.210 --> 00:11:19.107
we're inserting a
new DOM element.

00:11:19.107 --> 00:11:21.190
So this files view node
is another Polymer element

00:11:21.190 --> 00:11:22.800
we would define elsewhere.

00:11:22.800 --> 00:11:24.550
So you can see the
code is more semantic.

00:11:24.550 --> 00:11:26.450
It's easier to read.

00:11:26.450 --> 00:11:28.820
And the attribute names
are semantic-- name, icon,

00:11:28.820 --> 00:11:29.430
and indent.

00:11:29.430 --> 00:11:31.512
And the elements
names are as well.

00:11:31.512 --> 00:11:32.470
SRIRAM SAROOP: Awesome.

00:11:32.470 --> 00:11:34.672
So, Devon, how about
getting our hands dirty,

00:11:34.672 --> 00:11:36.380
praying to the demo
gods, and adding this

00:11:36.380 --> 00:11:38.825
live to the Chrome Dev Editor?

00:11:38.825 --> 00:11:41.180
Let's see how this goes.

00:11:41.180 --> 00:11:46.230
DEVON CAREW: Switch
over to my Chromebook.

00:11:46.230 --> 00:11:46.940
OK.

00:11:46.940 --> 00:11:47.150
All right.

00:11:47.150 --> 00:11:49.000
So, again, this is the source
code for the Chrome Dev Editor.

00:11:49.000 --> 00:11:50.650
This is our main
HTML entry point.

00:11:50.650 --> 00:11:54.870
This defines the Polymer
structure for our application.

00:11:54.870 --> 00:11:56.630
And we've pre-written
the files view.

00:11:56.630 --> 00:11:58.380
So I'm just going to
add it to our UI now.

00:12:02.390 --> 00:12:06.430
And add a tiny bit more.

00:12:06.430 --> 00:12:11.180
So you can see I just had to
reference this files view code.

00:12:11.180 --> 00:12:17.530
And it's imported in our
Polymer imports up here.

00:12:17.530 --> 00:12:19.765
So now I'm going to restart.

00:12:19.765 --> 00:12:21.684
AUDIENCE: [INTERPOSING VOICES]

00:12:21.684 --> 00:12:23.725
DEVON CAREW: Oh, yeah,
that wouldn't have worked.

00:12:23.725 --> 00:12:25.558
SRIRAM SAROOP: Thanks
for pointing that out.

00:12:27.099 --> 00:12:28.890
DEVON CAREW: It would've
been a short demo.

00:12:28.890 --> 00:12:29.440
OK.

00:12:29.440 --> 00:12:30.607
So all right.

00:12:30.607 --> 00:12:32.565
Now I'm going to restart
the Chrome Dev Editor.

00:12:32.565 --> 00:12:35.730
This is some demo magic for
the sake of the presentation

00:12:35.730 --> 00:12:37.860
to try and compress
this into 30 minutes.

00:12:37.860 --> 00:12:40.100
It's going to restart,
load up the new source,

00:12:40.100 --> 00:12:42.384
and hopefully if you look
on the left hand side

00:12:42.384 --> 00:12:44.300
we should see this files
view on the left hand

00:12:44.300 --> 00:12:46.930
side of that splitter.

00:12:46.930 --> 00:12:47.430
OK.

00:12:47.430 --> 00:12:47.920
SRIRAM SAROOP: Awesome.

00:12:47.920 --> 00:12:48.410
[APPLAUSE]

00:12:48.410 --> 00:12:49.285
DEVON CAREW: Awesome.

00:12:49.285 --> 00:12:55.199
[APPLAUSE]

00:12:55.199 --> 00:12:56.240
SRIRAM SAROOP: All right.

00:12:56.240 --> 00:12:58.220
So now that we have
a multi file text

00:12:58.220 --> 00:13:00.910
editor, when we started
testing this on a Chromebook,

00:13:00.910 --> 00:13:02.261
the process was quite painful.

00:13:02.261 --> 00:13:03.760
And one thing which
was really hard,

00:13:03.760 --> 00:13:06.396
was getting files in and getting
files out of the Chrome Dev

00:13:06.396 --> 00:13:07.260
Editor.

00:13:07.260 --> 00:13:09.930
We had to zip a whole set of
files, email it to ourselves,

00:13:09.930 --> 00:13:12.180
extract it on Chromebook,
and then point

00:13:12.180 --> 00:13:13.502
the Chrome Dev Editor at it.

00:13:13.502 --> 00:13:15.710
So we really wanted to break
boundaries here and make

00:13:15.710 --> 00:13:17.790
it really easy for getting
files in and getting

00:13:17.790 --> 00:13:19.227
files out of the Dev Editor.

00:13:19.227 --> 00:13:20.810
So, Devon, what do
developers normally

00:13:20.810 --> 00:13:21.670
do for this kind of stuff?

00:13:21.670 --> 00:13:21.900
DEVON CAREW: Yeah.

00:13:21.900 --> 00:13:23.170
So they're going to
use Git for that.

00:13:23.170 --> 00:13:25.211
They're going to want to
clone a repo from GitHub

00:13:25.211 --> 00:13:28.020
and make local commits and push
their port request back up.

00:13:28.020 --> 00:13:29.090
SRIRAM SAROOP: Don't
you need a command line

00:13:29.090 --> 00:13:29.660
to type your Git commands?

00:13:29.660 --> 00:13:31.034
Hoe does that work
on Chromebook?

00:13:31.034 --> 00:13:32.130
DEVON CAREW: Yeah.

00:13:32.130 --> 00:13:33.647
It's not going to work great.

00:13:33.647 --> 00:13:36.022
But Git was such an important
use case for the Chrome Dev

00:13:36.022 --> 00:13:38.880
Editor that we decided to
build Git support directly

00:13:38.880 --> 00:13:40.280
into the tool.

00:13:40.280 --> 00:13:42.460
So we wrote our own Git
Client Library in Dart

00:13:42.460 --> 00:13:46.560
which can speak the Git protocol
to get servers and manipulate

00:13:46.560 --> 00:13:49.325
the file system just like the
Git command line client would.

00:13:49.325 --> 00:13:50.780
SRIRAM SAROOP: Let's show that.

00:13:50.780 --> 00:13:52.300
DEVON CAREW: OK.

00:13:52.300 --> 00:13:57.200
So our Git library's
pre-written.

00:13:57.200 --> 00:14:01.739
And it's hosted on our package
hosting site, pub.dartlang.org.

00:14:01.739 --> 00:14:03.280
So what I'm going
to do is, I'm going

00:14:03.280 --> 00:14:07.520
to add a reference to
our Pub spec file, which

00:14:07.520 --> 00:14:09.795
is part of Dart's technology.

00:14:09.795 --> 00:14:11.920
It's a declarative manifest
of all the dependencies

00:14:11.920 --> 00:14:14.739
of your application.

00:14:14.739 --> 00:14:16.530
SRIRAM SAROOP: That's
a lot of dependencies

00:14:16.530 --> 00:14:17.400
that we have there.

00:14:17.400 --> 00:14:19.400
DEVON CAREW: Yeah, so
the Chrome Dev Editor

00:14:19.400 --> 00:14:21.580
has about two dozen
direct dependencies

00:14:21.580 --> 00:14:23.870
on various open source
libraries and another two

00:14:23.870 --> 00:14:25.570
dozen transitive dependencies.

00:14:25.570 --> 00:14:30.340
But Pub lets you specify your
version constraints very well.

00:14:30.340 --> 00:14:35.041
And it helps you work at
a large scale application.

00:14:35.041 --> 00:14:35.540
All right.

00:14:35.540 --> 00:14:42.818
So I will add a reference
to our Git library.

00:14:42.818 --> 00:14:45.890
And I'll spell it correctly.

00:14:45.890 --> 00:14:50.330
So now we basically told
Dart's Pub Package Manager

00:14:50.330 --> 00:14:52.090
we want this dependency.

00:14:52.090 --> 00:14:56.192
I'm going to run Pub Get, which
will go to pub.dartlang.org,

00:14:56.192 --> 00:14:57.650
and provision that
package locally.

00:15:00.610 --> 00:15:01.260
All right.

00:15:01.260 --> 00:15:03.410
So now it's in our source base.

00:15:03.410 --> 00:15:06.710
I'm going to add a little
bit of pre-written UI

00:15:06.710 --> 00:15:08.716
to reference that library.

00:15:08.716 --> 00:15:11.270
Again, I'm going to
use Polymer to do this.

00:15:11.270 --> 00:15:16.980
So Git clone button.

00:15:16.980 --> 00:15:20.220
And restart Chrome Dev Editor.

00:15:20.220 --> 00:15:23.155
And if you look in the
toolbar on upper left

00:15:23.155 --> 00:15:24.530
hopefully we'll
see a new button.

00:15:28.090 --> 00:15:29.220
Awesome.

00:15:29.220 --> 00:15:30.360
OK.

00:15:30.360 --> 00:15:31.620
So that's that.

00:15:31.620 --> 00:15:32.530
SRIRAM SAROOP: So is
that going to work?

00:15:32.530 --> 00:15:33.150
Git clone?

00:15:33.150 --> 00:15:35.920
DEVON CAREW: Well,
let's find out.

00:15:35.920 --> 00:15:38.270
I have a canned repository.

00:15:38.270 --> 00:15:41.810
This is actually a
JavaScript Chrome app

00:15:41.810 --> 00:15:43.720
written for I/O this year.

00:15:43.720 --> 00:15:46.370
You can try this Chrome
app out at the code lab.

00:15:49.260 --> 00:15:53.670
So if I clone, this is actually
speaking to GitHub right now

00:15:53.670 --> 00:15:54.680
and cloning.

00:15:59.010 --> 00:15:59.943
Awesome.

00:15:59.943 --> 00:16:01.650
OK.

00:16:01.650 --> 00:16:06.360
So this is just a regular
JavaScript Chrome app.

00:16:06.360 --> 00:16:10.420
And I'll run it just quickly
to show you what it does.

00:16:10.420 --> 00:16:14.060
It's a tic-tac-toe game.

00:16:14.060 --> 00:16:14.622
There we go.

00:16:14.622 --> 00:16:15.580
SRIRAM SAROOP: Awesome.

00:16:15.580 --> 00:16:17.505
So that's Git working
on a Chromebook.

00:16:17.505 --> 00:16:22.625
[APPLAUSE]

00:16:22.625 --> 00:16:24.000
SRIRAM SAROOP: So
what Devon just

00:16:24.000 --> 00:16:27.410
showed you was the use of Dart's
Package Management System, Pub.

00:16:27.410 --> 00:16:29.960
So with Pub you can not only
manage your dependencies well,

00:16:29.960 --> 00:16:32.870
you get access to a whole set
of libraries, including Git,

00:16:32.870 --> 00:16:35.020
that we've contributed
to Pub recently.

00:16:35.020 --> 00:16:38.970
So now that we have a multi file
text editor with Git built in,

00:16:38.970 --> 00:16:41.580
let's figure out what
our next milestone was.

00:16:41.580 --> 00:16:42.820
We call this bootstrapping.

00:16:42.820 --> 00:16:46.050
And this was really an important
[INAUDIBLE] milestone for us.

00:16:46.050 --> 00:16:47.577
And what I mean by
bootstrapping is

00:16:47.577 --> 00:16:50.160
we wanted our software engineers
to start using the Chrome Dev

00:16:50.160 --> 00:16:52.857
Editor on a daily
basis to build itself.

00:16:52.857 --> 00:16:54.440
This was really
important because this

00:16:54.440 --> 00:16:56.260
was [INAUDIBLE] our own product.

00:16:56.260 --> 00:16:58.500
We could find lots of
issues at dev time.

00:16:58.500 --> 00:17:00.720
And the big, fun
part of this was

00:17:00.720 --> 00:17:03.580
that our developers find
issues and fix it themselves.

00:17:03.580 --> 00:17:05.371
We ran into lots of
issues during dogfood.

00:17:05.371 --> 00:17:07.329
And do you want to talk
about some of the stuff

00:17:07.329 --> 00:17:08.140
that we fixed?

00:17:08.140 --> 00:17:08.890
DEVON CAREW: Yeah.

00:17:08.890 --> 00:17:10.389
Dogfooding was very
important to us.

00:17:10.389 --> 00:17:12.510
And we started
dogfooding very early.

00:17:12.510 --> 00:17:14.604
Probably even earlier than
it was really possible.

00:17:18.609 --> 00:17:21.630
And the main issue we found
when we were writing code

00:17:21.630 --> 00:17:25.270
was basically we didn't
have static analysis.

00:17:25.270 --> 00:17:27.319
We didn't have errors
and warnings showing up

00:17:27.319 --> 00:17:28.579
as we typed code.

00:17:28.579 --> 00:17:30.120
And we were really
dependent on this.

00:17:30.120 --> 00:17:33.290
And it meant that we found
our errors at run time

00:17:33.290 --> 00:17:36.490
or after we deployed
it to the web store.

00:17:36.490 --> 00:17:38.600
So basically we really
needed Dart Static Analysis

00:17:38.600 --> 00:17:40.260
running in the
Chrome Dev Editor.

00:17:40.260 --> 00:17:41.760
SRIRAM SAROOP: So
we'll show you how

00:17:41.760 --> 00:17:43.350
we added Dart Static Analysis.

00:17:43.350 --> 00:17:44.771
DEVON CAREW: OK.

00:17:44.771 --> 00:17:46.270
So similar to the
Git library, we're

00:17:46.270 --> 00:17:49.160
going to add a new package
to the Chrome Dev Editor.

00:17:49.160 --> 00:17:52.300
Now this is a Dart
Static Analysis package,

00:17:52.300 --> 00:17:55.070
which is again available
for anybody to use.

00:17:55.070 --> 00:17:57.050
Analyzer.

00:17:57.050 --> 00:17:59.080
Any.

00:17:59.080 --> 00:18:00.520
So we declare that dependency.

00:18:00.520 --> 00:18:02.634
I'm going to run Pub
Get and download it

00:18:02.634 --> 00:18:03.550
from pub.dartlang.org.

00:18:07.521 --> 00:18:08.020
OK.

00:18:08.020 --> 00:18:09.440
Cool.

00:18:09.440 --> 00:18:12.490
So there's no new
Polymer UI for this.

00:18:12.490 --> 00:18:15.129
I'm going to restart the Chrome
Dev Editor, though, and show

00:18:15.129 --> 00:18:16.670
you some changes to
our Dart support.

00:18:23.900 --> 00:18:24.530
OK.

00:18:24.530 --> 00:18:29.760
So actually you do see these new
these warnings on the left hand

00:18:29.760 --> 00:18:32.740
side of the files view.

00:18:32.740 --> 00:18:39.090
So we run the Dart analyzer in
a web worker or in [INAUDIBLE].

00:18:39.090 --> 00:18:40.430
We run it in parallel.

00:18:40.430 --> 00:18:43.060
It uses fairly heavy processing.

00:18:43.060 --> 00:18:45.720
We don't want it to
interrupt the DOM thread.

00:18:45.720 --> 00:18:49.960
So you see we have a warning on
this file called Death Star Dot

00:18:49.960 --> 00:18:50.670
Dart.

00:18:50.670 --> 00:18:52.710
It's not normally part
of our source base.

00:18:52.710 --> 00:18:55.670
It is for the
purposes of this demo.

00:18:55.670 --> 00:18:57.850
And the warning is
on this constructor.

00:18:57.850 --> 00:19:00.470
It says the final variable
Death Star must be initialized.

00:19:00.470 --> 00:19:02.850
So we have this variable
declared it final.

00:19:02.850 --> 00:19:04.100
We never passed value into it.

00:19:04.100 --> 00:19:05.430
I'm going to do that now.

00:19:10.610 --> 00:19:13.430
And you see errors and warnings
show up and go away as I type.

00:19:13.430 --> 00:19:14.930
So that was a very
powerful feature.

00:19:14.930 --> 00:19:17.690
[APPLAUSE]

00:19:17.690 --> 00:19:18.610
DEVON CAREW: Thanks.

00:19:18.610 --> 00:19:21.160
It seem very simple, but it was
the single biggest impediment

00:19:21.160 --> 00:19:22.920
to us bootstrapping the tool.

00:19:22.920 --> 00:19:24.970
So we have a few
other features we

00:19:24.970 --> 00:19:27.464
get from having a
static analysis.

00:19:27.464 --> 00:19:29.130
We have good knowledge
of the code base,

00:19:29.130 --> 00:19:31.604
so we can have an outline view.

00:19:31.604 --> 00:19:33.270
SRIRAM SAROOP: If you
could resize that.

00:19:33.270 --> 00:19:35.050
DEVON CAREW: If I can resize it.

00:19:35.050 --> 00:19:37.815
You can quickly know what
your code base looks like

00:19:37.815 --> 00:19:38.440
and jump to it.

00:19:38.440 --> 00:19:40.540
We can jump to definition.

00:19:40.540 --> 00:19:43.380
So if I want to see where
this Death Star is defined,

00:19:43.380 --> 00:19:46.210
I can control click it and
jump to the definition.

00:19:46.210 --> 00:19:47.381
It makes a lot of sense.

00:19:47.381 --> 00:19:48.756
As your code base
scales you want

00:19:48.756 --> 00:19:51.654
to jump around to different
files and navigate it easily.

00:19:51.654 --> 00:19:54.070
SRIRAM SAROOP: So Dart really
takes developer productivity

00:19:54.070 --> 00:19:56.400
to a new level because it's
a structured programming

00:19:56.400 --> 00:19:57.490
language.

00:19:57.490 --> 00:20:00.300
So, Devon, you've spoken a
lot about Chrome Apps so far.

00:20:00.300 --> 00:20:02.300
What's the web app support
in Chrome Dev Editor?

00:20:02.300 --> 00:20:02.750
DEVON CAREW: Absolutely.

00:20:02.750 --> 00:20:03.770
Yeah.

00:20:03.770 --> 00:20:07.880
So web app support is
obviously equally important.

00:20:07.880 --> 00:20:11.950
And I'm going to demonstrate
number four here.

00:20:11.950 --> 00:20:13.340
Yup.

00:20:13.340 --> 00:20:15.691
So we have a number
of project templates

00:20:15.691 --> 00:20:17.440
to help you get started
with applications.

00:20:17.440 --> 00:20:18.435
I'm going to create
a new web app

00:20:18.435 --> 00:20:19.601
from one of those templates.

00:20:22.200 --> 00:20:25.040
So we have several web
templates you can use,

00:20:25.040 --> 00:20:27.287
a Chrome app, some
Polymer support.

00:20:27.287 --> 00:20:29.370
I'm going to use a template
called the Web Starter

00:20:29.370 --> 00:20:32.450
Kit, which was just introduced
at Google I/O this year

00:20:32.450 --> 00:20:33.880
as well.

00:20:33.880 --> 00:20:36.456
It's basically a
best practices web

00:20:36.456 --> 00:20:38.990
kit to help you get your
application created quickly

00:20:38.990 --> 00:20:41.467
and keep it on the rails
in terms of performance

00:20:41.467 --> 00:20:43.800
and jank-free code and running
across multiple devices--

00:20:43.800 --> 00:20:47.260
so desktop and
tablets and phones.

00:20:47.260 --> 00:20:49.280
So I'll create this application.

00:20:52.870 --> 00:20:54.430
And it's created.

00:20:59.060 --> 00:21:00.000
HTML.

00:21:00.000 --> 00:21:01.830
Hit run.

00:21:01.830 --> 00:21:07.220
And cross my fingers.

00:21:07.220 --> 00:21:07.720
There we go.

00:21:07.720 --> 00:21:08.492
OK.

00:21:08.492 --> 00:21:09.450
SRIRAM SAROOP: Awesome.

00:21:09.450 --> 00:21:11.701
So the web page is actually
running on your Chromebook

00:21:11.701 --> 00:21:13.116
from within the
Chrome Dev Editor.

00:21:13.116 --> 00:21:14.390
How is that working actually?

00:21:14.390 --> 00:21:14.560
DEVON CAREW: Yeah.

00:21:14.560 --> 00:21:15.060
Absolutely.

00:21:15.060 --> 00:21:17.800
So obviously web paging
is a server to talk to.

00:21:17.800 --> 00:21:20.380
We built a web server
into the Chrome Dev Editor

00:21:20.380 --> 00:21:23.920
built on top of the
Chrome app APIs.

00:21:23.920 --> 00:21:25.400
And, again, they're
very powerful.

00:21:25.400 --> 00:21:28.760
They give you access to
things like native sockets.

00:21:28.760 --> 00:21:30.560
So we built a web
server on top of that.

00:21:30.560 --> 00:21:33.290
So it makes it very
quick to get started

00:21:33.290 --> 00:21:34.800
with a web app and prototype.

00:21:34.800 --> 00:21:36.925
And you can always move
over to your own web server

00:21:36.925 --> 00:21:37.509
at some point.

00:21:37.509 --> 00:21:38.550
SRIRAM SAROOP: All right.

00:21:38.550 --> 00:21:40.065
So it's not only
Git that we built.

00:21:40.065 --> 00:21:42.190
We also built a web server
in the Chrome Dev Editor

00:21:42.190 --> 00:21:43.356
which works on a Chromebook.

00:21:45.950 --> 00:21:47.899
Let's move on.

00:21:47.899 --> 00:21:49.690
So this is a trick
question for you, Devon.

00:21:49.690 --> 00:21:51.960
There's something that's really
hot for developers these days

00:21:51.960 --> 00:21:53.270
and especially at I/O this year.

00:21:53.270 --> 00:21:54.120
You know what that is?

00:21:54.120 --> 00:21:55.245
DEVON CAREW: The giveaways.

00:21:56.454 --> 00:21:58.120
SRIRAM SAROOP: I'm
talking about mobile.

00:21:58.120 --> 00:22:00.520
Yeah, mobile is on fire.

00:22:00.520 --> 00:22:02.140
And there are any
number of graphs

00:22:02.140 --> 00:22:05.670
to show what the growth curves
are, but this one in particular

00:22:05.670 --> 00:22:08.200
shows you the explosive growth
that mobile devices have

00:22:08.200 --> 00:22:09.840
had over the past
couple of years,

00:22:09.840 --> 00:22:11.450
especially smartphones
and tablets.

00:22:11.450 --> 00:22:13.654
So if there's one platform
that you need to target,

00:22:13.654 --> 00:22:14.570
it's got to be mobile.

00:22:14.570 --> 00:22:16.690
You've got to be building
mobile first these days.

00:22:16.690 --> 00:22:19.120
So, Devon, Chrome
Dev Editor Mobile,

00:22:19.120 --> 00:22:22.320
can we come up with a really
dead simple mobile development

00:22:22.320 --> 00:22:23.060
workflow?

00:22:23.060 --> 00:22:24.310
DEVON CAREW: Yeah, absolutely.

00:22:24.310 --> 00:22:24.852
Yeah, mobile.

00:22:24.852 --> 00:22:27.226
We knew mobile was going to
be an important use case when

00:22:27.226 --> 00:22:28.570
we started designing this tool.

00:22:28.570 --> 00:22:32.060
So we built mobile support
into the Chrome Dev Editor.

00:22:32.060 --> 00:22:34.700
In fact, we made it as
easy to run an application

00:22:34.700 --> 00:22:37.370
on your mobile device
as it is to run locally.

00:22:37.370 --> 00:22:44.410
So I'm going to demonstrate
adding some mobile UI to Chrome

00:22:44.410 --> 00:22:44.910
Dev Editor.

00:22:47.650 --> 00:22:48.635
Let's see.

00:22:48.635 --> 00:22:51.930
Mobile deploy.

00:22:51.930 --> 00:22:53.590
So this is pre-written UI.

00:22:53.590 --> 00:22:56.730
SRIRAM SAROOP: It's
Polymer in action again.

00:22:56.730 --> 00:22:58.730
DEVON CAREW: And I'm
going to restart.

00:22:58.730 --> 00:23:02.340
And if you look at the
toolbar hopefully we'll

00:23:02.340 --> 00:23:03.740
see a fourth button up there.

00:23:06.700 --> 00:23:07.400
Mobile deploy.

00:23:07.400 --> 00:23:07.899
OK.

00:23:07.899 --> 00:23:09.940
Awesome.

00:23:09.940 --> 00:23:13.580
Let me find that
application we cloned.

00:23:13.580 --> 00:23:16.550
So this is the Chrome
app we cloned earlier.

00:23:16.550 --> 00:23:19.556
I'm going to hit this
new mobile button.

00:23:19.556 --> 00:23:20.930
It's going to show
me a dialogue.

00:23:20.930 --> 00:23:22.764
Deploy to mobile.

00:23:22.764 --> 00:23:23.680
I'm going to hit that.

00:23:23.680 --> 00:23:26.080
But let's switch over to
my phone real quickly.

00:23:26.080 --> 00:23:29.980
So this phone is connected
to my Chromebook via USB.

00:23:29.980 --> 00:23:32.420
I'm hitting deploy now.

00:23:32.420 --> 00:23:35.200
And it's updating.

00:23:35.200 --> 00:23:36.240
And--

00:23:36.240 --> 00:23:37.531
SRIRAM SAROOP: Fingers crossed.

00:23:39.579 --> 00:23:40.245
DEVON CAREW: Hm.

00:23:44.995 --> 00:23:48.490
Well, all right.

00:23:48.490 --> 00:23:50.840
It's not totally happy.

00:23:50.840 --> 00:23:52.040
Let me try once more.

00:24:00.324 --> 00:24:00.824
OK.

00:24:00.824 --> 00:24:01.460
Yeah.

00:24:01.460 --> 00:24:01.760
SRIRAM SAROOP: All right.

00:24:01.760 --> 00:24:04.270
So I think we ran into an issue
where the background changed

00:24:04.270 --> 00:24:07.090
to black instead of showing
the tic-tac-toe game.

00:24:07.090 --> 00:24:08.340
But assumed that worked.

00:24:08.340 --> 00:24:12.730
So what you now have is
Chrome Apps running on mobile.

00:24:12.730 --> 00:24:14.230
And let's switch to slides.

00:24:16.910 --> 00:24:19.480
So Chrome Apps work not only
on desktop operating systems,

00:24:19.480 --> 00:24:22.330
but they also work
on mobile platforms.

00:24:22.330 --> 00:24:25.170
So this is made possible an open
source framework called Apache

00:24:25.170 --> 00:24:27.312
Cordova So we've
been contributing

00:24:27.312 --> 00:24:29.020
to this project for
more than a year now.

00:24:29.020 --> 00:24:31.120
And we've contributed
several Cordova plug ins,

00:24:31.120 --> 00:24:33.520
which provide really
interesting mobile capabilities,

00:24:33.520 --> 00:24:36.050
ranging from accessing
your accounts on your phone

00:24:36.050 --> 00:24:39.310
to having a native payment
flow to getting messages sent

00:24:39.310 --> 00:24:41.120
over using Google
Cloud Messaging.

00:24:41.120 --> 00:24:43.860
So now with all these
awesome native capabilities,

00:24:43.860 --> 00:24:45.680
we also have a great
developer workflow

00:24:45.680 --> 00:24:48.190
that lets you quickly deploy
your mobile applications

00:24:48.190 --> 00:24:50.530
from Chrome Dev Editor
running on your Chromebooks

00:24:50.530 --> 00:24:52.390
onto your Android device.

00:24:52.390 --> 00:24:55.130
So, Devon, you think we can
talk about the debugging

00:24:55.130 --> 00:24:57.040
story for mobile apps?

00:24:57.040 --> 00:24:58.540
DEVON CAREW: It's
going to be tough.

00:24:58.540 --> 00:25:00.392
SRIRAM SAROOP: Let's
give it a shot.

00:25:00.392 --> 00:25:05.270
DEVON CAREW: It did
not come up on this,

00:25:05.270 --> 00:25:07.685
but I'll give it a shot.

00:25:07.685 --> 00:25:09.920
SRIRAM SAROOP: Blame
Michael for that.

00:25:09.920 --> 00:25:14.230
DEVON CAREW: So our debugging
story for Chrome Dev Editor

00:25:14.230 --> 00:25:15.420
is just using DevTools.

00:25:15.420 --> 00:25:17.120
It's a fantastic debugger.

00:25:17.120 --> 00:25:19.010
And it has great
support for mobile, too.

00:25:19.010 --> 00:25:20.300
So we'll bring up DevTools.

00:25:28.160 --> 00:25:30.175
We're going to accept.

00:25:30.175 --> 00:25:31.800
Actually, I should
probably switch over

00:25:31.800 --> 00:25:36.440
to my-- [INAUDIBLE] OK.

00:25:36.440 --> 00:25:42.770
So I'm looking for something
that says tic-tac-toe.

00:25:47.990 --> 00:25:49.331
Hm.

00:25:49.331 --> 00:25:52.894
Yeah, I'm afraid this
is not going to fly.

00:26:01.071 --> 00:26:03.180
AUDIENCE: [INAUDIBLE]

00:26:03.180 --> 00:26:03.930
DEVON CAREW: Yeah.

00:26:08.101 --> 00:26:08.600
OK.

00:26:12.840 --> 00:26:13.580
OK.

00:26:13.580 --> 00:26:14.280
Oh, tic-tac-toe.

00:26:14.280 --> 00:26:14.980
Awesome.

00:26:14.980 --> 00:26:15.842
All right.

00:26:15.842 --> 00:26:16.800
SRIRAM SAROOP: Hold on.

00:26:16.800 --> 00:26:18.622
Let's show the full version.

00:26:18.622 --> 00:26:20.913
So, yeah, that's the app
which magically came up again.

00:26:20.913 --> 00:26:21.839
[APPLAUSE]

00:26:21.839 --> 00:26:22.765
SRIRAM SAROOP: OK.

00:26:22.765 --> 00:26:26.101
So I skipped a couple of beats.

00:26:26.101 --> 00:26:26.851
DEVON CAREW: Yeah.

00:26:26.851 --> 00:26:27.836
No, I didn't-- All right.

00:26:27.836 --> 00:26:28.335
Cool.

00:26:28.335 --> 00:26:29.180
All right.

00:26:29.180 --> 00:26:31.614
SRIRAM SAROOP: So let's
go back to the debugging.

00:26:31.614 --> 00:26:33.030
DEVON CAREW: I'm
going to bring up

00:26:33.030 --> 00:26:36.260
a DevTools inspector on this.

00:26:42.807 --> 00:26:46.230
Yeah, it's not cooperating.

00:26:46.230 --> 00:26:49.720
Anyway, so our development
story with Chrome Dev Editor,

00:26:49.720 --> 00:26:52.420
especially on
mobile, is DevTools.

00:26:52.420 --> 00:26:54.310
SRIRAM SAROOP: So
DevTools really

00:26:54.310 --> 00:26:55.600
compliments Chrome Dev Editor.

00:26:55.600 --> 00:26:57.520
DevTools provides a
great debugging story.

00:26:57.520 --> 00:26:58.930
And you have a great
development experience

00:26:58.930 --> 00:26:59.888
with Chrome Dev Editor.

00:27:02.650 --> 00:27:04.360
So to sum it up,
what we've shown

00:27:04.360 --> 00:27:07.480
you is Chrome Dev Editor was
built on the Chrome platform.

00:27:07.480 --> 00:27:09.650
Chrome Apps, Dart, Polymer.

00:27:09.650 --> 00:27:11.810
Chrome Apps really provides
the native capabilities

00:27:11.810 --> 00:27:12.590
that you need.

00:27:12.590 --> 00:27:14.985
And you can target multiple
platforms not just limited

00:27:14.985 --> 00:27:17.750
to desktop but also
Android and iOS.

00:27:17.750 --> 00:27:20.420
With Dart, you get awesome
developer productivity

00:27:20.420 --> 00:27:22.480
because it's a structured
programming language.

00:27:22.480 --> 00:27:24.920
And with Polymer
you get the ability

00:27:24.920 --> 00:27:26.620
to encapsulate your
elements so that you

00:27:26.620 --> 00:27:28.940
can build your own custom
HTML elements that you

00:27:28.940 --> 00:27:31.150
can reuse across your projects.

00:27:31.150 --> 00:27:33.200
So the Chrome Dev
Editor itself has

00:27:33.200 --> 00:27:35.230
been open source since day one.

00:27:35.230 --> 00:27:37.640
And you can check
out our source code

00:27:37.640 --> 00:27:40.020
to find out how we use these
three parts of the Chrome

00:27:40.020 --> 00:27:41.137
platform together.

00:27:41.137 --> 00:27:42.720
So, Devon, you want
to talk about some

00:27:42.720 --> 00:27:43.790
of our external contributors?

00:27:43.790 --> 00:27:44.520
DEVON CAREW: Yeah, absolutely.

00:27:44.520 --> 00:27:47.186
Yeah, so like Sriram said, we've
been open source since day one.

00:27:47.186 --> 00:27:49.030
We've had only over
20 contributors

00:27:49.030 --> 00:27:50.620
that's both Googlers
and non Googlers.

00:27:50.620 --> 00:27:52.580
I'd actually like to
thank our two biggest

00:27:52.580 --> 00:27:55.853
non-Google contributors,
Adam and [INAUDIBLE].

00:27:55.853 --> 00:28:01.132
[APPLAUSE]

00:28:01.132 --> 00:28:02.840
SRIRAM SAROOP: Yeah,
thanks a lot, folks.

00:28:02.840 --> 00:28:04.256
And I really hope
that many of you

00:28:04.256 --> 00:28:07.669
can start contributing to the
Chrome Dev Editor as well.

00:28:07.669 --> 00:28:09.960
So if you're interested in
building apps for the Chrome

00:28:09.960 --> 00:28:11.543
platform, check out
our documentation.

00:28:11.543 --> 00:28:14.040
I'm also happy to announce
an early developer preview

00:28:14.040 --> 00:28:16.130
version of the Chrome
Dev Editor, which

00:28:16.130 --> 00:28:17.735
is available from
our GitHub site.

00:28:17.735 --> 00:28:19.860
So there's a link which
takes you to the web store.

00:28:19.860 --> 00:28:22.530
And you can install the Chrome
Dev Editor on your Chromebooks

00:28:22.530 --> 00:28:23.790
right today.

00:28:23.790 --> 00:28:25.770
And not only that,
at Google I/O we

00:28:25.770 --> 00:28:29.110
have several code labs which
use the Chrome Dev Editor.

00:28:29.110 --> 00:28:31.070
You can check them
out there as well.

00:28:31.070 --> 00:28:33.714
And Devon and I will
be at the Dart booth.

00:28:33.714 --> 00:28:35.130
We'll also be at
the Chrome booth.

00:28:35.130 --> 00:28:38.400
So come talk to us to know more
about the Chrome Dev Editor.

00:28:38.400 --> 00:28:39.900
It's at an early
stage, so we'd love

00:28:39.900 --> 00:28:43.792
to hear from you what feedback
you have on the current working

00:28:43.792 --> 00:28:45.750
version of the Chrome
Dev Editor, what features

00:28:45.750 --> 00:28:47.960
you would like to see, and more.

00:28:47.960 --> 00:28:49.990
Thanks a lot for
coming to our talk.

00:28:49.990 --> 00:28:51.330
Hope you enjoyed it.

00:28:51.330 --> 00:28:52.730
So there are mics
on either side.

00:28:52.730 --> 00:28:55.409
You can come over to the
mics and ask you questions.

00:28:55.409 --> 00:29:03.240
[APPLAUSE]

00:29:03.240 --> 00:29:05.650
AUDIENCE: Hi, I was wondering
where the file system

00:29:05.650 --> 00:29:10.110
is hosted, and does that scale
to much larger web projects?

00:29:10.110 --> 00:29:10.860
DEVON CAREW: Yeah.

00:29:10.860 --> 00:29:15.110
So the Chrome App APIs
basically give you

00:29:15.110 --> 00:29:16.970
fairly good access
to the file system.

00:29:16.970 --> 00:29:18.840
So the user selects the
folder, and then you

00:29:18.840 --> 00:29:21.370
can see everything in
that folder and below it.

00:29:21.370 --> 00:29:24.880
So we're just using the
regular Chrome file system,

00:29:24.880 --> 00:29:28.289
and it scales up to
whatever size disk you have.

00:29:28.289 --> 00:29:28.830
AUDIENCE: OK.

00:29:28.830 --> 00:29:31.570
So when you're cloning
it does actually

00:29:31.570 --> 00:29:33.180
bring the files
local to the machine,

00:29:33.180 --> 00:29:34.560
not host them on a
server somewhere.

00:29:34.560 --> 00:29:34.710
DEVON CAREW: Nope.

00:29:34.710 --> 00:29:35.550
Yeah, they're local.

00:29:35.550 --> 00:29:38.110
You can disconnect your
network and run just

00:29:38.110 --> 00:29:39.355
like a regular native app.

00:29:39.355 --> 00:29:41.480
SRIRAM SAROOP: So we are
working on a feature which

00:29:41.480 --> 00:29:44.110
would allow the files to be
backed up by Google Drive.

00:29:44.110 --> 00:29:46.540
So it's using the
same file system API.

00:29:46.540 --> 00:29:48.290
So that's a feature
we'll add pretty soon.

00:29:48.290 --> 00:29:50.890
So that will allow you to have
your files on Google Drive

00:29:50.890 --> 00:29:52.630
and sync automatically
across machines.

00:29:52.630 --> 00:29:53.380
AUDIENCE: Awesome.

00:29:53.380 --> 00:29:55.830
Thanks.

00:29:55.830 --> 00:29:59.560
AUDIENCE: Hey, I was wondering
if Dart is running natively

00:29:59.560 --> 00:30:04.042
on any of these
devices' platforms?

00:30:04.042 --> 00:30:06.000
DEVON CAREW: So this is
actually the Chrome Dev

00:30:06.000 --> 00:30:07.466
Editor compiled to JavaScript.

00:30:07.466 --> 00:30:08.840
Our story right
now is that we're

00:30:08.840 --> 00:30:12.140
developing against Dartium,
a Chromium version with Dart

00:30:12.140 --> 00:30:12.690
natively.

00:30:12.690 --> 00:30:14.150
It's a very good
development story.

00:30:14.150 --> 00:30:16.290
When we're deploying
the Chrome Dev Editor

00:30:16.290 --> 00:30:19.616
it's compiled using Dart-to-JS
and distributed that way.

00:30:19.616 --> 00:30:20.290
AUDIENCE: Right.

00:30:20.290 --> 00:30:20.790
Thanks.

00:30:23.220 --> 00:30:24.720
AUDIENCE: Things
like Node and Grunt

00:30:24.720 --> 00:30:26.700
are a big part of my workflow.

00:30:26.700 --> 00:30:31.370
Is the bash-l supported
in Chrome Dev Editor?

00:30:31.370 --> 00:30:32.120
DEVON CAREW: Yeah.

00:30:32.120 --> 00:30:34.030
So the bash-l is not.

00:30:34.030 --> 00:30:36.710
We have to figure out how
[INAUDIBLE] Javascript

00:30:36.710 --> 00:30:37.950
development workflow.

00:30:37.950 --> 00:30:40.230
We have [INAUDIBLE]
support built in.

00:30:40.230 --> 00:30:42.430
That was important
to support Polymer

00:30:42.430 --> 00:30:45.670
while we need to be able to
provision those dependencies

00:30:45.670 --> 00:30:46.459
using [INAUDIBLE].

00:30:46.459 --> 00:30:48.000
We still have to
figure out how we're

00:30:48.000 --> 00:30:49.710
going to support
common JavaScript

00:30:49.710 --> 00:30:50.820
workflows like Grunt.

00:30:50.820 --> 00:30:53.236
SRIRAM SAROOP: So we are working
with a native client team

00:30:53.236 --> 00:30:56.050
to see how we can run native
code within the Chrome Dev

00:30:56.050 --> 00:30:56.550
Editor.

00:30:56.550 --> 00:30:58.450
And hopefully that will
allow us to support

00:30:58.450 --> 00:31:00.330
some of the native tools
that you're talking about.

00:31:00.330 --> 00:31:01.038
AUDIENCE: Thanks.

00:31:01.038 --> 00:31:03.200
And are there any plans
to bake this directly

00:31:03.200 --> 00:31:05.432
into Chrome alongside DevTools?

00:31:05.432 --> 00:31:07.390
SRIRAM SAROOP: So right
now it's a separate app

00:31:07.390 --> 00:31:08.775
that you need to install.

00:31:08.775 --> 00:31:10.650
We want to keep it that
way because it allows

00:31:10.650 --> 00:31:14.020
us to iterate outside
of Chrome much faster.

00:31:14.020 --> 00:31:15.740
So it's just one install away.

00:31:15.740 --> 00:31:18.847
And it synchronizes across
all your Chrome profiles.

00:31:18.847 --> 00:31:19.680
AUDIENCE: Thank you.

00:31:27.402 --> 00:31:29.985
AUDIENCE: Are you going to have
anything like Push App Engine?

00:31:32.620 --> 00:31:36.310
DEVON CAREW: So we are going
to work on app engine support.

00:31:36.310 --> 00:31:40.430
And actually it's very easy to
support or deploy theoretically

00:31:40.430 --> 00:31:44.030
because at App Engine you can
do a Git push to a specific URL.

00:31:44.030 --> 00:31:45.690
And it deploys your application.

00:31:45.690 --> 00:31:47.190
And we support Git.

00:31:47.190 --> 00:31:51.393
So we'll probably go
that route at some point.

00:31:51.393 --> 00:31:52.434
SRIRAM SAROOP: All right.

00:31:52.434 --> 00:31:52.525
Cool.

00:31:52.525 --> 00:31:53.358
Thanks a lot, folks.

00:31:53.358 --> 00:31:53.858
[APPLAUSE]

00:31:53.858 --> 00:31:55.232
Looking forward
to your feedback.

00:31:55.232 --> 00:31:55.880
[APPLAUSE]

