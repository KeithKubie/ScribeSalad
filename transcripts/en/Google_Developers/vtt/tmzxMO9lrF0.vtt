WEBVTT
Kind: captions
Language: en

00:00:02.810 --> 00:00:04.690
MALE SPEAKER: Shanghai
GDG is a very

00:00:04.690 --> 00:00:06.770
interesting developer community.

00:00:06.770 --> 00:00:07.600
FEMALE SPEAKER 1: I'm
glad somebody

00:00:07.600 --> 00:00:08.790
has asked this question.

00:00:08.790 --> 00:00:10.015
MALE SPEAKER 2: This is where
the magic happens.

00:00:10.015 --> 00:00:10.877
FEMALE SPEAKER 2: This
is primarily a

00:00:10.877 --> 00:00:11.880
question-and-answer show.

00:00:11.880 --> 00:00:14.230
So if any of you out there would
like to ask questions.

00:00:24.430 --> 00:00:25.680
MALE SPEAKER 3: All right,
welcome everybody.

00:00:28.700 --> 00:00:32.630
I guess this is the third week
of our Chrome Apps hang out.

00:00:32.630 --> 00:00:36.750
And this week we've got with
us Paul and Renato.

00:00:36.750 --> 00:00:39.990
We're all back in our
home locations.

00:00:39.990 --> 00:00:43.860
So guys, why don't I have you
introduce yourselves, for

00:00:43.860 --> 00:00:47.220
those who are just joining
us for your first time.

00:00:47.220 --> 00:00:48.300
PAUL LEWIS: Hi, I'm
Paul Lewis.

00:00:48.300 --> 00:00:51.720
I'm a developer programs
engineer for Google and I work

00:00:51.720 --> 00:00:56.850
on GPU performance type things
and also Chrome Apps as well.

00:00:56.850 --> 00:00:59.270
So, that's me.

00:00:59.270 --> 00:01:03.480
MALE SPEAKER 3: Sweet
and next we--

00:01:03.480 --> 00:01:04.819
RENATO MANGINI: I'm
Renato Mangini,

00:01:04.819 --> 00:01:07.490
and I work from Brazil.

00:01:07.490 --> 00:01:10.650
I'm a Chrome developer
program engineer.

00:01:10.650 --> 00:01:14.500
And I work for Chrome
Apps currently.

00:01:14.500 --> 00:01:15.530
MALE SPEAKER 3: Awesome,
excellent.

00:01:15.530 --> 00:01:20.230
And so Renato, you were last
week in Mountain View with us.

00:01:20.230 --> 00:01:23.720
And then Paul you were not, but
you're going to be joining

00:01:23.720 --> 00:01:25.940
from Mountain View next week,
isn't that right?

00:01:25.940 --> 00:01:27.253
PAUL LEWIS: Next week and the
week after I'll be in

00:01:27.253 --> 00:01:28.230
Mountain View, yes.

00:01:28.230 --> 00:01:28.980
MALE SPEAKER 3: Awesome, good.

00:01:28.980 --> 00:01:30.990
Well, it'll be fun to
have you there.

00:01:30.990 --> 00:01:34.480
And I think the week after next
we're going to have a

00:01:34.480 --> 00:01:36.710
couple of us are going
to be heading back.

00:01:36.710 --> 00:01:38.520
Renato, are you headed
back to Mountain View

00:01:38.520 --> 00:01:39.350
next week as well?

00:01:39.350 --> 00:01:40.610
Or when do you go back?

00:01:40.610 --> 00:01:43.530
RENATO MANGINI: Not been next,
but the other one.

00:01:43.530 --> 00:01:47.740
On 11th, September 11th,
I will join you--

00:01:47.740 --> 00:01:48.170
MALE SPEAKER 3: Awesome.

00:01:48.170 --> 00:01:48.910
RINADO: --in Mountain View.

00:01:48.910 --> 00:01:50.430
MALE SPEAKER 3: Very cool.

00:01:50.430 --> 00:01:55.050
Well, so in that case, why don't
we jump in and look at

00:01:55.050 --> 00:01:58.940
some of the stuff that we're
going to talk about this week.

00:01:58.940 --> 00:02:02.010
We asked you guys the last two
weeks what APIs you're most

00:02:02.010 --> 00:02:04.210
interested in, what the things
that you think a really

00:02:04.210 --> 00:02:06.600
interesting and relevant.

00:02:06.600 --> 00:02:09.880
And it was kind of interesting
to see some of the results.

00:02:09.880 --> 00:02:12.890
But very clearly one of the
things you're most interested

00:02:12.890 --> 00:02:16.240
in hearing about it is the
news storage APIs.

00:02:16.240 --> 00:02:21.800
So with the evolution of Chrome
packaged apps, you can

00:02:21.800 --> 00:02:25.800
now have the ability to use
things like Chrome Sync and

00:02:25.800 --> 00:02:29.210
Chrome local storage that
allow you to store data

00:02:29.210 --> 00:02:32.140
locally on the user's computer,
as well as have it

00:02:32.140 --> 00:02:35.240
stored up into the cloud.

00:02:35.240 --> 00:02:38.800
So with that, why don't I pass
it over to Renato who's going

00:02:38.800 --> 00:02:43.452
to explain some of the new
APIs that are available.

00:02:43.452 --> 00:02:44.660
RENATO MANGINI: Excellent.

00:02:44.660 --> 00:02:46.730
Thanks, [? Pete. ?]

00:02:46.730 --> 00:02:50.040
If you're a web developer, you
probably use it to do local

00:02:50.040 --> 00:02:51.800
storage API.

00:02:51.800 --> 00:02:56.970
The local storage API is not
Chrome specific, but it has

00:02:56.970 --> 00:03:03.360
been for a few months and it
has for some months or some

00:03:03.360 --> 00:03:05.650
years, I'm not sure.

00:03:05.650 --> 00:03:11.370
But it has some problems with
basically the most important

00:03:11.370 --> 00:03:13.575
problem it is synchronous--

00:03:13.575 --> 00:03:13.840
MALE SPEAKER 3: Mmm.

00:03:13.840 --> 00:03:14.960
OK.

00:03:14.960 --> 00:03:17.610
RENATO MANGINI: Being
synchronous, it's a potential

00:03:17.610 --> 00:03:22.690
problem because if it's a
storage, it does a lot of IO

00:03:22.690 --> 00:03:29.340
and you cannot count on how much
time that IO will take.

00:03:29.340 --> 00:03:36.220
So this Chrome packaged API,
specific for Chrome packaged

00:03:36.220 --> 00:03:40.600
apps, is the Chrome storage.

00:03:40.600 --> 00:03:44.100
The Chrome storage is composed
of two storage areas, the

00:03:44.100 --> 00:03:46.500
local and the sync.

00:03:46.500 --> 00:03:50.730
Both have almost the same
behavior, the same API.

00:03:50.730 --> 00:03:54.430
You can use one or the other,
depending on your

00:03:54.430 --> 00:03:55.590
requirements.

00:03:55.590 --> 00:03:59.880
But it's simply a matter
of changing which

00:03:59.880 --> 00:04:01.180
storage you are using.

00:04:01.180 --> 00:04:05.920
The whole set of meta calls
is the same for both.

00:04:05.920 --> 00:04:08.830
The API is a pretty
much the same.

00:04:08.830 --> 00:04:15.360
It's almost the same as the
local storage from HTML5 on

00:04:15.360 --> 00:04:19.730
the open web, except
for a few changes.

00:04:19.730 --> 00:04:22.970
First of all, you have
to have a specific

00:04:22.970 --> 00:04:25.340
permission on your manifest.

00:04:25.340 --> 00:04:27.260
And the permission is
called storage.

00:04:27.260 --> 00:04:30.560
MALE SPEAKER 3: OK, so we need
to storage permission in order

00:04:30.560 --> 00:04:32.350
to be able to use this, right?

00:04:32.350 --> 00:04:32.940
RENATO MANGINI: Exactly.

00:04:32.940 --> 00:04:35.110
MALE SPEAKER 3: OK, cool.

00:04:35.110 --> 00:04:42.070
RENATO MANGINI: And then you
just call the methods from the

00:04:42.070 --> 00:04:44.920
storage area you want to use.

00:04:44.920 --> 00:04:49.330
For example, if you want to get
a specific value from the

00:04:49.330 --> 00:04:51.900
storage, you call Chrome
dot storage

00:04:51.900 --> 00:04:54.730
dot sync or dot local--

00:04:54.730 --> 00:04:55.070
MALE SPEAKER 3: OK.

00:04:55.070 --> 00:04:56.860
RENATO MANGINI: --depending
on the storage area.

00:04:56.860 --> 00:04:58.690
MALE SPEAKER 3: Now why are
there two different ones?

00:04:58.690 --> 00:05:00.570
Like can go into?

00:05:00.570 --> 00:05:01.830
RENATO MANGINI: Yeah,
absolutely.

00:05:01.830 --> 00:05:07.840
The local one, it stores
asynchronously in your local

00:05:07.840 --> 00:05:09.340
file system.

00:05:09.340 --> 00:05:15.950
And the sync one, it does the
same as the local one if you

00:05:15.950 --> 00:05:18.100
are offline.

00:05:18.100 --> 00:05:21.700
But as soon as you get online,
or if you are already online,

00:05:21.700 --> 00:05:27.900
it does sync the keys and values
with the cloud, with

00:05:27.900 --> 00:05:29.270
your Chrome account.

00:05:29.270 --> 00:05:34.770
As long as you're signed into
your Chrome account.

00:05:34.770 --> 00:05:34.990
MALE SPEAKER 3: OK.

00:05:34.990 --> 00:05:36.880
RENATO MANGINI: To your--

00:05:36.880 --> 00:05:41.000
MALE SPEAKER 3: So local only
ever exists on that particular

00:05:41.000 --> 00:05:42.050
user's computer, right?

00:05:42.050 --> 00:05:44.890
So like, hey, I've got my
Chromebook here, and if I do

00:05:44.890 --> 00:05:48.020
dot local, it's going to sit
there on that machine.

00:05:48.020 --> 00:05:52.920
But with dot sync, the
difference there is that it's

00:05:52.920 --> 00:05:54.950
going to sync on this
Chromebook, but it's also

00:05:54.950 --> 00:05:57.360
going to sync on my Chromebook
at home.

00:05:57.360 --> 00:06:00.490
It's going to sync on
maybe my Mac or my

00:06:00.490 --> 00:06:04.352
PC on another machine.

00:06:04.352 --> 00:06:05.520
RENATO MANGINI: Yeah,
absolutely.

00:06:05.520 --> 00:06:05.890
MALE SPEAKER 3: Cool.

00:06:05.890 --> 00:06:09.020
Now, what might be some use
cases as for where I would

00:06:09.020 --> 00:06:14.420
want to use sync versus local?

00:06:14.420 --> 00:06:19.740
RENATO MANGINI: The use case for
these Chrome storages is

00:06:19.740 --> 00:06:23.390
for storing small pieces
of information, so

00:06:23.390 --> 00:06:25.060
for example, settings.

00:06:25.060 --> 00:06:27.170
I think this is the
most important and

00:06:27.170 --> 00:06:28.360
relevant use case.

00:06:28.360 --> 00:06:33.060
If you just configured your
application without the

00:06:33.060 --> 00:06:38.750
settings changes you want, and
you do it on your laptop, you

00:06:38.750 --> 00:06:41.210
don't want to do it again
on your desktop.

00:06:41.210 --> 00:06:41.510
MALE SPEAKER 3: Right.

00:06:41.510 --> 00:06:44.740
RENATO MANGINI: It's very
important to the user to be

00:06:44.740 --> 00:06:50.090
able to share these settings
among other computers.

00:06:50.090 --> 00:06:57.270
And also the location inside the
app that the user are, the

00:06:57.270 --> 00:07:00.710
state of the app is very
important for developers to

00:07:00.710 --> 00:07:04.670
store that state on
the sync storage.

00:07:04.670 --> 00:07:10.600
So if I'm reading a specific
article on my desktop and I

00:07:10.600 --> 00:07:14.690
have to go out, I grab my laptop
and I open it and I

00:07:14.690 --> 00:07:18.550
opened the new reader
application.

00:07:18.550 --> 00:07:22.930
It's very good for me if the app
opens on the same page I

00:07:22.930 --> 00:07:23.860
was before.

00:07:23.860 --> 00:07:24.310
MALE SPEAKER 3: Right.

00:07:24.310 --> 00:07:24.900
So--

00:07:24.900 --> 00:07:26.700
RENATO MANGINI: We can achieve
that very easily.

00:07:26.700 --> 00:07:29.310
MALE SPEAKER 3: For stuff that
might be relevant to go across

00:07:29.310 --> 00:07:32.890
multiple machines, like so what
I've read in the news,

00:07:32.890 --> 00:07:37.870
maybe if I've got a news reader,
maybe what songs I

00:07:37.870 --> 00:07:40.560
listen to last or what playlist
I was playing with,

00:07:40.560 --> 00:07:43.200
if it's a media application--

00:07:43.200 --> 00:07:45.650
so there's a lot of good
cases where you'd want

00:07:45.650 --> 00:07:47.550
to sync that across.

00:07:47.550 --> 00:07:48.980
RENATO MANGINI: Yes,
absolutely.

00:07:48.980 --> 00:07:50.106
MALE SPEAKER 3: OK.

00:07:50.106 --> 00:07:52.070
PAUL LEWIS: It's worth pointing
out at this stage

00:07:52.070 --> 00:07:56.370
that there are some limits, and
there's a quota for the

00:07:56.370 --> 00:07:59.840
amount of data that can
be stored online.

00:07:59.840 --> 00:08:02.250
So you should check the docs
to make sure the--

00:08:02.250 --> 00:08:02.490
MALE SPEAKER 3: OK.

00:08:02.490 --> 00:08:05.270
PAUL LEWIS: --number of items
and the amount of data per

00:08:05.270 --> 00:08:07.060
item is within those limits.

00:08:07.060 --> 00:08:09.820
And that really [INAUDIBLE] for
things like these sort of

00:08:09.820 --> 00:08:12.670
settings or smaller
made value patts.

00:08:12.670 --> 00:08:14.390
MALE SPEAKER 3: Yeah,
that's a good point.

00:08:14.390 --> 00:08:19.210
So could I store entire
news articles?

00:08:19.210 --> 00:08:21.830
So say for example, I've got all
the news article, it's got

00:08:21.830 --> 00:08:24.330
a bunch of images, and maybe
there's a video.

00:08:24.330 --> 00:08:27.960
Do I want to put that
into sync or local?

00:08:27.960 --> 00:08:29.190
RENATO MANGINI: No,
I don't think so.

00:08:29.190 --> 00:08:31.300
MALE SPEAKER 3: OK, so probably
not to put those

00:08:31.300 --> 00:08:33.270
kinds of things there.

00:08:33.270 --> 00:08:36.770
But maybe to say I've read
that article, right?

00:08:36.770 --> 00:08:36.940
RENATO MANGINI: Exactly.

00:08:36.940 --> 00:08:38.110
PAUL LEWIS: Yeah.

00:08:38.110 --> 00:08:40.830
RENATO MANGINI: Yeah, the
example you mentioned before

00:08:40.830 --> 00:08:47.910
of music streaming application,
if you are going

00:08:47.910 --> 00:08:51.520
to save anything there, you save
the name or the ID of the

00:08:51.520 --> 00:08:55.650
music you were listening to, not
to music itself, just to

00:08:55.650 --> 00:08:56.830
be clear about that.

00:08:56.830 --> 00:08:57.360
MALE SPEAKER 3: All right.

00:08:57.360 --> 00:08:59.880
PAUL LEWIS: But there are also
the things like the file

00:08:59.880 --> 00:09:01.310
system API.

00:09:01.310 --> 00:09:04.630
So there are other APIS that you
could investigate if you

00:09:04.630 --> 00:09:08.210
want to actually store, say,
blogs or file data,

00:09:08.210 --> 00:09:10.000
specifically.

00:09:10.000 --> 00:09:12.900
But as we're saying, the Chrome
[INAUDIBLE] storage is

00:09:12.900 --> 00:09:13.960
ready for these.

00:09:13.960 --> 00:09:15.860
And they've value patts
ready right now.

00:09:15.860 --> 00:09:17.795
MALE SPEAKER 3: OK, cool.

00:09:20.660 --> 00:09:24.590
Renato, does that about cover
what you wanted to talk about?

00:09:24.590 --> 00:09:30.390
RENATO MANGINI: Yeah, there is
one interesting method on the

00:09:30.390 --> 00:09:34.650
API that is the on change it.

00:09:34.650 --> 00:09:39.080
When you add the listener to the
on change it object, you

00:09:39.080 --> 00:09:41.280
get a call.

00:09:41.280 --> 00:09:47.590
Whenever anything on your
application storage has

00:09:47.590 --> 00:09:48.440
changed it.

00:09:48.440 --> 00:09:54.040
It's very important for syncing
stuff and receiving

00:09:54.040 --> 00:09:54.640
the [INAUDIBLE]

00:09:54.640 --> 00:09:56.850
of change on the other
computers.

00:09:56.850 --> 00:09:57.540
MALE SPEAKER 3: OK.

00:09:57.540 --> 00:10:02.210
RENATO MANGINI: The method
is on the documentation.

00:10:02.210 --> 00:10:06.520
The URL for documentation would
probably be on your

00:10:06.520 --> 00:10:08.780
screen in a few seconds,
if it's not yet.

00:10:08.780 --> 00:10:11.140
MALE SPEAKER 3: OK, it's
not there yet.

00:10:11.140 --> 00:10:14.220
I got to make one quick little
update while we're doing some

00:10:14.220 --> 00:10:14.890
of the demos.

00:10:14.890 --> 00:10:16.800
But we'll bring those up.

00:10:16.800 --> 00:10:19.820
RENATO MANGINI: And the method
is called it's Chrome dot

00:10:19.820 --> 00:10:21.520
stars dot on change it.

00:10:21.520 --> 00:10:23.870
And you have a method at
least on this object.

00:10:23.870 --> 00:10:26.990
And do you send it function
and that function, the

00:10:26.990 --> 00:10:31.540
callback, will be called
whenever there's a change on

00:10:31.540 --> 00:10:34.710
your storage.

00:10:34.710 --> 00:10:39.760
But apart from that, we have
get, set, clear, remove

00:10:39.760 --> 00:10:42.070
methods, which are pretty
straightforward.

00:10:42.070 --> 00:10:45.260
And we also have the
get bytes in use.

00:10:45.260 --> 00:10:50.570
That returns you how many bytes
that have been used on

00:10:50.570 --> 00:10:51.490
our storage.

00:10:51.490 --> 00:10:52.400
MALE SPEAKER 3: OK, excellent.

00:10:52.400 --> 00:10:53.750
That's pretty much it.

00:10:53.750 --> 00:10:56.660
MALE SPEAKER 3: And so we'll
get the link for the URL up

00:10:56.660 --> 00:10:57.710
here in a sec.

00:10:57.710 --> 00:11:00.830
But Paul, you actually
sat down and wrote a

00:11:00.830 --> 00:11:02.300
little sample for us.

00:11:02.300 --> 00:11:03.770
Do you want to talk
about that?

00:11:03.770 --> 00:11:04.650
PAUL LEWIS: Yeah, absolutely.

00:11:04.650 --> 00:11:09.140
So what I'm going to do is I'm
going to take over from where

00:11:09.140 --> 00:11:10.830
I left off last week.

00:11:10.830 --> 00:11:15.700
And if you want to go ahead and
show what's on my screen.

00:11:15.700 --> 00:11:17.680
MALE SPEAKER 3: All right, so
Paul your screen is up.

00:11:17.680 --> 00:11:19.605
Everybody can see your
screen right now.

00:11:19.605 --> 00:11:20.190
PAUL LEWIS: OK, awesome.

00:11:20.190 --> 00:11:24.690
So as you can see, I'm looking
at the manifest file, which is

00:11:24.690 --> 00:11:27.260
pretty much the same as we
left it last week in the

00:11:27.260 --> 00:11:27.800
Hello, World!

00:11:27.800 --> 00:11:31.800
So if this is completely new to
you, you might want to see

00:11:31.800 --> 00:11:34.920
last week's session where we
showed Hello, World! and how

00:11:34.920 --> 00:11:36.991
to get that from nothing.

00:11:36.991 --> 00:11:38.220
And so what I'm going
to do is I'm

00:11:38.220 --> 00:11:41.730
starting from that position.

00:11:41.730 --> 00:11:44.200
What I'm going to do is I'm
going to show you how you can

00:11:44.200 --> 00:11:48.110
use the Chrome storage APIs in
your apps and just show you

00:11:48.110 --> 00:11:50.880
the minimum amount of code that
you might want to add to

00:11:50.880 --> 00:11:52.410
your apps, just to kind
of things going.

00:11:52.410 --> 00:11:55.545
So the first thing that we need
add is those permissions

00:11:55.545 --> 00:11:57.966
that Renato talked
about earlier.

00:11:57.966 --> 00:12:01.600
So permissions, and
this is an array.

00:12:01.600 --> 00:12:03.680
And we only need one
item in the array

00:12:03.680 --> 00:12:05.770
today, which is storage.

00:12:05.770 --> 00:12:09.520
So that means that we're telling
Chrome that this

00:12:09.520 --> 00:12:12.130
particular package needs
access to those APIs.

00:12:12.130 --> 00:12:14.080
So I'm going to do is I'm going
to switch over, and I'm

00:12:14.080 --> 00:12:18.400
actually going to add in
Hello Sync to Chrome.

00:12:22.670 --> 00:12:24.300
I will fire that up now.

00:12:24.300 --> 00:12:27.150
And let's have a look here.

00:12:27.150 --> 00:12:30.340
There's nothing particularly
going on of interest.

00:12:30.340 --> 00:12:34.290
It's just a blank HTML page.

00:12:34.290 --> 00:12:35.850
As I said, this is where
we left last week.

00:12:35.850 --> 00:12:40.040
So now what we need to do is we
need to find a way to put

00:12:40.040 --> 00:12:43.680
data into the Storage API and
then get back out and all

00:12:43.680 --> 00:12:45.840
those kinds of good things.

00:12:45.840 --> 00:12:49.110
So let's add in, because we
don't currently have any

00:12:49.110 --> 00:12:49.610
JavaScript.

00:12:49.610 --> 00:12:51.620
Now, if you remember from last
week, we couldn't have any

00:12:51.620 --> 00:12:54.870
inline JavaScript
because of CSP.

00:12:54.870 --> 00:12:59.470
So we're going to have
a separate app.js.

00:12:59.470 --> 00:13:01.355
And you can call that whatever
you like, it

00:13:01.355 --> 00:13:01.935
doesn't have to be that.

00:13:01.935 --> 00:13:05.600
I'm just going to go
with that for me.

00:13:05.600 --> 00:13:10.111
And I've taken the liberty of
creating that file elsewhere,

00:13:10.111 --> 00:13:11.610
which you can see over here.

00:13:11.610 --> 00:13:12.630
But it's completely empty
at the moment.

00:13:12.630 --> 00:13:16.700
Anyway, we haven't got any means
of putting stuff into

00:13:16.700 --> 00:13:20.290
the storage, so we just
need to create a form.

00:13:20.290 --> 00:13:24.120
We'll just put a single
input tag on that.

00:13:24.120 --> 00:13:26.900
So input, let's put a
placeholder in there.

00:13:30.748 --> 00:13:33.540
Now let's go ahead and
enter a value.

00:13:33.540 --> 00:13:36.740
And give it an ID.

00:13:40.120 --> 00:13:43.780
OK, and then what we want to
do is we also want output

00:13:43.780 --> 00:13:45.210
whatever the current value is.

00:13:45.210 --> 00:13:50.590
So we're going use
a text area.

00:13:50.590 --> 00:13:53.200
We're going to say
id="value-out".

00:13:53.200 --> 00:13:55.610
So we have an in and an out that
we're going to access via

00:13:55.610 --> 00:13:56.670
JavaScript.

00:13:56.670 --> 00:13:59.200
We're going to take the value
in that is stored in the

00:13:59.200 --> 00:14:00.890
Chrome Storage API and then
we're going to spit out

00:14:00.890 --> 00:14:04.700
whatever the current value
is back out into the

00:14:04.700 --> 00:14:07.560
value out text area.

00:14:07.560 --> 00:14:10.480
So over in app.js, now this is
where we're actually going to

00:14:10.480 --> 00:14:13.500
start talking to the APIs.

00:14:13.500 --> 00:14:19.240
So we'll fire a new
[INAUDIBLE].

00:14:19.240 --> 00:14:21.160
MALE SPEAKER 3: Hey, Paul, I
want to interrupt for one sec.

00:14:21.160 --> 00:14:23.820
There was a question that came
up last week that it got

00:14:23.820 --> 00:14:26.980
answered in the questions, but
I want to ask it of you now.

00:14:26.980 --> 00:14:29.890
What's that editor that
you're using there?

00:14:29.890 --> 00:14:31.710
PAUL LEWIS: It's
Sublime Text 2.

00:14:31.710 --> 00:14:32.610
MALE SPEAKER 3: Awesome.

00:14:32.610 --> 00:14:33.960
OK.

00:14:33.960 --> 00:14:37.140
PAUL LEWIS: Yeah, it's a
really handy editor.

00:14:37.140 --> 00:14:40.610
I mean, you'll see as well
when I'm typing the code.

00:14:40.610 --> 00:14:44.250
You see those white lines around
the code, hopefully.

00:14:44.250 --> 00:14:44.780
MALE SPEAKER 3: Yup.

00:14:44.780 --> 00:14:46.490
PAUL LEWIS: It's a really
useful feature of this

00:14:46.490 --> 00:14:49.060
particular ID is that you could
have inline linting,

00:14:49.060 --> 00:14:50.630
which means you can write
the JavaScript

00:14:50.630 --> 00:14:53.980
code for free, almost.

00:14:53.980 --> 00:14:57.050
So, carrying on, what I'm going
to do is I'm going to

00:14:57.050 --> 00:15:00.470
get a hold of those two
elements-- the input elements

00:15:00.470 --> 00:15:02.020
and the text area.

00:15:02.020 --> 00:15:03.270
So let's go ahead
and do that--

00:15:07.134 --> 00:15:12.570
element by ID, and value
in, and value out.

00:15:20.130 --> 00:15:22.860
I always find it interesting how
many mistakes I make when

00:15:22.860 --> 00:15:29.250
typing, almost costly
mistakes.

00:15:29.250 --> 00:15:32.610
MALE SPEAKER 3: That's almost
always the case isn't it?

00:15:32.610 --> 00:15:33.930
PAUL LEWIS: Certainly in
my case it is, yeah.

00:15:41.150 --> 00:15:43.050
Sorry, give me a second.

00:15:43.050 --> 00:15:44.300
MALE SPEAKER 3: Uh-oh.

00:15:44.300 --> 00:15:47.680
PAUL LEWIS: Yeah, I need
to just drop out.

00:15:47.680 --> 00:15:49.380
Can you switch back
to my screen?

00:15:49.380 --> 00:15:51.230
MALE SPEAKER 3: Your screen's
still there, so they should

00:15:51.230 --> 00:15:52.950
still be able to see that.

00:15:52.950 --> 00:15:55.590
PAUL LEWIS: OK.

00:15:55.590 --> 00:15:59.070
OK, great.

00:15:59.070 --> 00:16:02.660
And then what I'm going to do
is I'm just going to do a

00:16:02.660 --> 00:16:03.940
valueChanged function.

00:16:03.940 --> 00:16:09.440
So whatever the value change
is we're going to set the

00:16:09.440 --> 00:16:13.620
value out in a text to
be that new value.

00:16:13.620 --> 00:16:15.490
So this is going to be a useful
helper function that

00:16:15.490 --> 00:16:18.430
we're going to fire off whenever
the value changes,

00:16:18.430 --> 00:16:20.640
either internally or externally
to our app.

00:16:20.640 --> 00:16:23.070
If you remember, we talked about
when the app changes

00:16:23.070 --> 00:16:23.580
externally.

00:16:23.580 --> 00:16:26.770
So if you change a value on your
machine, we're just going

00:16:26.770 --> 00:16:28.640
to call this value
change function.

00:16:28.640 --> 00:16:31.050
So that's sitting there,
helping us.

00:16:31.050 --> 00:16:32.520
And what we need to
do is we need to

00:16:32.520 --> 00:16:38.810
actually track the changes.

00:16:38.810 --> 00:16:41.840
The form element that I put into
the page, I'm just going

00:16:41.840 --> 00:16:45.520
to track on to the submit
event there.

00:16:45.520 --> 00:16:50.520
And let's fire that off.

00:16:50.520 --> 00:16:53.960
And what we're going to do is
we're going to say when this

00:16:53.960 --> 00:17:01.690
happens, let's grab the value
from the value in.

00:17:01.690 --> 00:17:05.619
We need to make sure that
because form submission isn't

00:17:05.619 --> 00:17:13.270
valid in packaged apps, we need
to prevent the default

00:17:13.270 --> 00:17:16.000
action of the submit So that
stops that from happening.

00:17:16.000 --> 00:17:19.210
So all we're interested in is
what's the value update?

00:17:19.210 --> 00:17:21.660
And then this is the
fun bit now--

00:17:21.660 --> 00:17:23.060
storage.sync.

00:17:23.060 --> 00:17:26.329
So we're going to do this
on the sync storage API.

00:17:26.329 --> 00:17:32.620
And what we do is we set an
object as the first parameter,

00:17:32.620 --> 00:17:36.200
which going to give it value.

00:17:36.200 --> 00:17:38.310
What I'm going to do as well is
I'm actually going to store

00:17:38.310 --> 00:17:42.380
its time stamp just for my
own interest, which is to

00:17:42.380 --> 00:17:47.460
basically say, I want you to set
my value, which is sort of

00:17:47.460 --> 00:17:48.510
[? a curve ?] values.

00:17:48.510 --> 00:17:49.240
And then--

00:17:49.240 --> 00:17:50.080
MALE SPEAKER 3: So we're going
to add a time stamp?

00:17:50.080 --> 00:17:51.450
PAUL LEWIS: --asychronous.

00:17:51.450 --> 00:17:53.510
This is an asynchronous API.

00:17:53.510 --> 00:17:54.500
MALE SPEAKER 3: OK.

00:17:54.500 --> 00:18:01.280
PAUL LEWIS: So I'm just going
to say that when this is

00:18:01.280 --> 00:18:03.380
completed, I would like to know
about it through just a

00:18:03.380 --> 00:18:04.830
console log event.

00:18:04.830 --> 00:18:08.160
So this should capture now,
whenever I submit the form.

00:18:08.160 --> 00:18:09.740
MALE SPEAKER 3: Sweet, OK.

00:18:09.740 --> 00:18:10.560
PAUL LEWIS: OK.

00:18:10.560 --> 00:18:14.300
So now the other thing is OK,
well, we can send stuff out,

00:18:14.300 --> 00:18:15.685
but we want to know when
things have changed.

00:18:18.800 --> 00:18:22.620
And this is the event that
Renato mentioned earlier,

00:18:22.620 --> 00:18:26.320
which is the on changed.

00:18:26.320 --> 00:18:29.402
Nope add listener, not add event
listener, add listener,

00:18:29.402 --> 00:18:31.860
there we go.

00:18:31.860 --> 00:18:32.910
And that's going to
take a function.

00:18:32.910 --> 00:18:37.960
Again, this is an async API.

00:18:37.960 --> 00:18:42.700
Now, the callback for this
takes two perimeters--

00:18:42.700 --> 00:18:45.210
changes and name space.

00:18:45.210 --> 00:18:47.355
And the second one is the
interesting one, because from

00:18:47.355 --> 00:18:50.290
the eagle eye, the long view,
you will notice that it's on

00:18:50.290 --> 00:18:54.260
Chrome.storage, this on change
that we're listening for.

00:18:54.260 --> 00:18:54.700
[INAUDIBLE]

00:18:54.700 --> 00:18:58.170
Chrome.storage.sync or
Chrome.storage.local.

00:18:58.170 --> 00:19:00.450
And the name space will actually
tell you whether this

00:19:00.450 --> 00:19:03.500
is a change that's happened
in sync or in local.

00:19:03.500 --> 00:19:06.140
So you might need to distinguish
between the two.

00:19:06.140 --> 00:19:08.310
And if you do, that's what
the name space is for.

00:19:08.310 --> 00:19:10.920
MALE SPEAKER 3: So will name
space be storage or local?

00:19:10.920 --> 00:19:11.530
Or will it be--

00:19:11.530 --> 00:19:14.100
PAUL LEWIS: It will
be sync or local.

00:19:14.100 --> 00:19:15.870
MALE SPEAKER 3: Sync
or local, OK.

00:19:15.870 --> 00:19:18.920
PAUL LEWIS: So what I'm going
to do is I'm just going to

00:19:18.920 --> 00:19:21.536
check for my value, because
that's what I

00:19:21.536 --> 00:19:23.180
was setting up here.

00:19:23.180 --> 00:19:26.790
So if I have that then I will
want to call that helper

00:19:26.790 --> 00:19:33.420
function valueChanged with
changes.myValue, a and then

00:19:33.420 --> 00:19:36.250
interestingly, the new
value property.

00:19:36.250 --> 00:19:37.900
Now, you maybe wondering,
hang on, where did

00:19:37.900 --> 00:19:39.310
newValue come from?

00:19:39.310 --> 00:19:42.790
One of the things about the
changes object that comes in

00:19:42.790 --> 00:19:45.870
is that myValue will actually
have two properties, newValue

00:19:45.870 --> 00:19:46.760
and oldValue.

00:19:46.760 --> 00:19:50.060
So if you need to find out what
it changed from, that's

00:19:50.060 --> 00:19:52.230
what oldValue will have, and
newValue will have your new

00:19:52.230 --> 00:19:54.320
value, pretty much what
it says on the tin.

00:19:54.320 --> 00:19:56.410
But it's worth knowing that you
can have access to what it

00:19:56.410 --> 00:19:58.980
was and and what it isn't in
case you to do some other

00:19:58.980 --> 00:20:00.160
calculations in that.

00:20:00.160 --> 00:20:01.700
MALE SPEAKER 3: Yeah, so that
would be really good if you

00:20:01.700 --> 00:20:06.440
needed to do any kind of like
synchronization and sort of

00:20:06.440 --> 00:20:08.810
like, oh, well, they changed
this on this machine and this

00:20:08.810 --> 00:20:12.030
on this machine, and this was
the only like thing that

00:20:12.030 --> 00:20:13.400
actually changed.

00:20:13.400 --> 00:20:16.650
PAUL LEWIS: Yeah, and if it's
like, oh, this change actually

00:20:16.650 --> 00:20:20.320
has implications because you
change from this to this, then

00:20:20.320 --> 00:20:22.830
having access to what it
was is extremely useful

00:20:22.830 --> 00:20:24.730
in those use cases.

00:20:24.730 --> 00:20:28.450
And then the last thing that we
need to do now that we're

00:20:28.450 --> 00:20:31.750
running for changes and we're
submitting changes.

00:20:31.750 --> 00:20:33.940
The last thing we do need to do
is just kind of kick this

00:20:33.940 --> 00:20:35.840
whole thing off and say, well,
what is the current value?

00:20:35.840 --> 00:20:37.835
So what we can do is we can say,
Chrome.storage.sync.get.

00:20:41.880 --> 00:20:45.320
And we're going to
ask for myValue.

00:20:45.320 --> 00:20:47.320
So we can pause there-- and
I'll show you this in a

00:20:47.320 --> 00:20:51.520
second-- but we can ask for a
string, which is a specific

00:20:51.520 --> 00:20:53.870
key from the object
that we set.

00:20:53.870 --> 00:20:56.700
Or we can pass through an array,
which allows us to

00:20:56.700 --> 00:20:58.840
request multiple items.

00:20:58.840 --> 00:21:00.350
So I'm going to get back.

00:21:00.350 --> 00:21:03.810
Again, this is an async cause,
so again, I can result.

00:21:03.810 --> 00:21:07.650
RENATO MANGINI: And also, Paul,
if you pass it new, you

00:21:07.650 --> 00:21:11.130
get the whole storage,
all the keys.

00:21:11.130 --> 00:21:12.380
PAUL LEWIS: There you go.

00:21:14.880 --> 00:21:18.150
So it's containing the
properties that I requested,

00:21:18.150 --> 00:21:20.840
and very much like before, I'm
going to pass that through to

00:21:20.840 --> 00:21:24.690
my valueChanged, which should
hopefully spit it out now,

00:21:24.690 --> 00:21:29.150
unless I've made a colossal
mistake, hopefully--

00:21:29.150 --> 00:21:31.085
MALE SPEAKER 3: All right,
we're into the big test.

00:21:31.085 --> 00:21:31.940
It's always fun.

00:21:31.940 --> 00:21:33.960
PAUL LEWIS: It's currently
undefined, because I don't

00:21:33.960 --> 00:21:35.660
actually have a value
in there.

00:21:35.660 --> 00:21:39.990
So if I say myValue, they're
going to see My Value set.

00:21:39.990 --> 00:21:44.490
OK, now if I were to close
this out and hopefully

00:21:44.490 --> 00:21:48.490
relaunch it, you see that it's
actually restored My Value,

00:21:48.490 --> 00:21:49.290
based on this set.

00:21:49.290 --> 00:21:51.880
So that is really it.

00:21:51.880 --> 00:21:53.830
That's actually stored
up remotely.

00:21:53.830 --> 00:21:57.120
Now what we actually wanted
to do was to show you this

00:21:57.120 --> 00:21:59.530
actually working across
multiple machines.

00:21:59.530 --> 00:22:01.840
So what we've taken the liberty
of doing is you'll

00:22:01.840 --> 00:22:04.890
find there's new sample
on the GitHub repo

00:22:04.890 --> 00:22:06.970
called Hello World Sync.

00:22:06.970 --> 00:22:11.810
MALE SPEAKER 3: All right, let
me bring up the link for that.

00:22:11.810 --> 00:22:15.400
So people should be able to
see that on the screen.

00:22:15.400 --> 00:22:21.810
You can go to goo.gl/AP4Sy
is the URL for that.

00:22:21.810 --> 00:22:26.780
And it's capital A capital P 4
capital S and then the letter

00:22:26.780 --> 00:22:29.100
y in lowercase.

00:22:29.100 --> 00:22:30.060
PAUL LEWIS: OK, awesome.

00:22:30.060 --> 00:22:33.900
So if you can see on my screen,
I have the syncable

00:22:33.900 --> 00:22:36.560
storage app open.

00:22:36.560 --> 00:22:38.590
Renato, do you have it up
on your screen as well?

00:22:38.590 --> 00:22:40.240
RENATO MANGINI: Yes, I do.

00:22:40.240 --> 00:22:40.860
PAUL LEWIS: OK, awesome.

00:22:40.860 --> 00:22:43.480
So Renato and I both
have this app open.

00:22:43.480 --> 00:22:46.480
We're both signed in under
a test account.

00:22:46.480 --> 00:22:51.410
So as far as Chrome is
concerned, we're sort of

00:22:51.410 --> 00:22:52.530
hooked up together.

00:22:52.530 --> 00:22:57.355
So I'm going to change this
value to Chrome Apps Rock.

00:22:57.355 --> 00:22:58.530
And I'm going to change that.

00:22:58.530 --> 00:23:00.360
And hopefully that change is
going to be reflected on

00:23:00.360 --> 00:23:01.370
Renato's side.

00:23:01.370 --> 00:23:03.385
RENATO MANGINI: Yes,
it did, sir.

00:23:03.385 --> 00:23:05.330
PAUL LEWIS: OK, and that's all
the way to Brazil, so the

00:23:05.330 --> 00:23:07.030
internet pipes are
working today.

00:23:10.030 --> 00:23:14.220
RENATO MANGINI: And then I
just changed it again.

00:23:14.220 --> 00:23:14.845
PAUL LEWIS: Yes, it did.

00:23:14.845 --> 00:23:16.744
RENATO MANGINI: And hopefully
you get--

00:23:16.744 --> 00:23:18.970
PAUL LEWIS: So you can see
how easy this code is to

00:23:18.970 --> 00:23:24.020
integrate, and to use, and
to store simple values.

00:23:24.020 --> 00:23:25.820
So there you go.

00:23:25.820 --> 00:23:29.120
RENATO MANGINI: You might take
note that we are both logged

00:23:29.120 --> 00:23:31.180
in with the same user.

00:23:31.180 --> 00:23:31.620
PAUL LEWIS: Yes.

00:23:31.620 --> 00:23:34.010
PAUL LEWIS: It wouldn't
work if we were

00:23:34.010 --> 00:23:36.510
different users, of course.

00:23:36.510 --> 00:23:37.890
It's important to note.

00:23:37.890 --> 00:23:39.380
PAUL LEWIS: It is very
important to note.

00:23:39.380 --> 00:23:43.660
It's a combination of the app
itself, of course, and the

00:23:43.660 --> 00:23:48.120
user that you're logged
in as into Chrome.

00:23:48.120 --> 00:23:51.350
All right, so that is this
week's demo done.

00:23:51.350 --> 00:23:51.970
MALE SPEAKER 3: Awesome.

00:23:51.970 --> 00:23:56.090
All right, so let's bring up
the URL for that again so

00:23:56.090 --> 00:23:59.530
people can find that
if they go to--

00:23:59.530 --> 00:24:03.770
actually, let's bring link for
the storage documentation, if

00:24:03.770 --> 00:24:05.820
you're looking for the
documentation on the storage

00:24:05.820 --> 00:24:11.950
APIs, goo.gl/oXODY.

00:24:11.950 --> 00:24:13.850
You can see the capitalization
there.

00:24:13.850 --> 00:24:17.040
It's small o, everything
else is capital.

00:24:17.040 --> 00:24:20.710
If you want to go and have a
look at the storage Hello

00:24:20.710 --> 00:24:24.870
World Sync that Paul just wrote
and showed you syncing

00:24:24.870 --> 00:24:28.470
between Paul and Renato from
London all the way down to

00:24:28.470 --> 00:24:32.750
Brazil, you can grab that
just there at the

00:24:32.750 --> 00:24:35.770
URL shown on screen.

00:24:35.770 --> 00:24:38.720
And as a reminder, one of the
other places where you can

00:24:38.720 --> 00:24:42.170
always go to get any of our
Chrome app samples is the

00:24:42.170 --> 00:24:44.860
Chrome app sample site,
which is up on GitHub.

00:24:44.860 --> 00:24:45.990
The link is there.

00:24:45.990 --> 00:24:51.090
Capital G, little m, capital
U, capital X, small t.

00:24:51.090 --> 00:24:55.090
So you can go grab those
and go from there.

00:24:55.090 --> 00:24:58.960
So from there, let's take
some questions.

00:24:58.960 --> 00:25:00.400
Last week we didn't
get enough time

00:25:00.400 --> 00:25:01.530
for all of your questions.

00:25:01.530 --> 00:25:04.170
So this week we wanted [? to ?]
put aside a bunch of

00:25:04.170 --> 00:25:06.170
extra time for your questions,
so that you

00:25:06.170 --> 00:25:08.370
could ask your questions.

00:25:08.370 --> 00:25:11.450
If you have questions that you
want to submit, you can go and

00:25:11.450 --> 00:25:14.790
submit them on moderator, either
through the Google

00:25:14.790 --> 00:25:22.700
Developers Live site or by
going to goo.gl/klubW--

00:25:22.700 --> 00:25:26.490
so klub W. I kind of want to
make a bad joke about that,

00:25:26.490 --> 00:25:28.930
but I won't.

00:25:28.930 --> 00:25:33.590
And I'm getting at least a
little giggle out of Paul.

00:25:33.590 --> 00:25:38.210
So with that, I'm going to take
that off screen for sec,

00:25:38.210 --> 00:25:41.080
because it's covering
me up nicely.

00:25:41.080 --> 00:25:44.330
And let's take look at some
of the questions.

00:25:44.330 --> 00:25:47.200
All right, so these are your
questions, and I'm looking at

00:25:47.200 --> 00:25:49.350
them here on moderator.

00:25:49.350 --> 00:25:52.500
And the first question, "I have
an app which should only

00:25:52.500 --> 00:25:55.910
be available for a small group
of people, but now I'm forced

00:25:55.910 --> 00:25:58.090
to publish it through the Chrome
Web Store to avoid

00:25:58.090 --> 00:25:59.200
errors in warning.

00:25:59.200 --> 00:26:03.170
Is there really no other way?"
And this is from Russell.

00:26:03.170 --> 00:26:06.610
Renato, do you want
to take this one?

00:26:06.610 --> 00:26:07.860
RENATO MANGINI: Yes, sure.

00:26:12.520 --> 00:26:16.490
It's possible to use
the Chrome Web

00:26:16.490 --> 00:26:20.765
Store inside the domain.

00:26:20.765 --> 00:26:26.180
I would ask you to check with
the Chrome Web Store team and

00:26:26.180 --> 00:26:28.900
to check on documentation,
how to do that.

00:26:28.900 --> 00:26:34.510
But currently, you cannot
publish a packaged app on the

00:26:34.510 --> 00:26:35.230
Chrome Web Store.

00:26:35.230 --> 00:26:38.530
So the store's not complete yet,
on the Chrome Web Store

00:26:38.530 --> 00:26:39.730
for packaged apps.

00:26:39.730 --> 00:26:43.090
MALE SPEAKER 3: That's for the
new evolved package apps.

00:26:43.090 --> 00:26:46.700
For legacy packaged apps, for
the existing packaged apps,

00:26:46.700 --> 00:26:49.230
you can still publish,
correct?

00:26:49.230 --> 00:26:50.520
RENATO MANGINI: Yes,
absolutely.

00:26:50.520 --> 00:26:51.990
MALE SPEAKER 3: OK.

00:26:51.990 --> 00:26:56.130
And then just to reiterate what
Renato said there, if

00:26:56.130 --> 00:26:58.920
you're publishing an app and you
only want it available to

00:26:58.920 --> 00:27:04.570
a small group of people, you can
do that through the Google

00:27:04.570 --> 00:27:05.610
Apps account.

00:27:05.610 --> 00:27:08.040
So you need to set up a Google
Apps account for your domain,

00:27:08.040 --> 00:27:09.236
and then you can
do it that way.

00:27:09.236 --> 00:27:11.210
RENATO MANGINI: Yeah, there are
series of frustrations.

00:27:11.210 --> 00:27:12.740
They are describe it on
the documentation

00:27:12.740 --> 00:27:14.030
of Chrome Web Store.

00:27:14.030 --> 00:27:14.790
MALE SPEAKER 3: OK.

00:27:14.790 --> 00:27:18.590
RENATO MANGINI: But you can
do it in some cases.

00:27:18.590 --> 00:27:19.030
MALE SPEAKER 3: Cool.

00:27:19.030 --> 00:27:20.660
All right.

00:27:20.660 --> 00:27:23.790
So the next question, "Any way
to update your Chrome app

00:27:23.790 --> 00:27:25.710
manually, like the
user's notified

00:27:25.710 --> 00:27:27.380
that there's an update?

00:27:27.380 --> 00:27:31.100
And also is there any way you
can add features like feedback

00:27:31.100 --> 00:27:36.342
from users?" Paul, do you
want to take this one?

00:27:36.342 --> 00:27:41.210
PAUL LEWIS: Sure, I mean, right
now there isn't a way to

00:27:41.210 --> 00:27:44.090
update the Chrome
App manually.

00:27:44.090 --> 00:27:47.150
I think it's great feedback,
and we appreciate it.

00:27:47.150 --> 00:27:53.320
So we'd recommend that you file
a request with that in.

00:27:53.320 --> 00:27:58.230
And the same thing for the
feedback from users, if it's

00:27:58.230 --> 00:28:03.560
in app, you could consider
requests server-side, but

00:28:03.560 --> 00:28:05.710
obviously we'd recommend
you do offline first,

00:28:05.710 --> 00:28:07.370
of course, as always.

00:28:07.370 --> 00:28:13.570
But certainly, we don't have
any announcements on

00:28:13.570 --> 00:28:15.943
integrated feedback
in tier apps.

00:28:15.943 --> 00:28:17.170
RENATO MANGINI: Yeah.

00:28:17.170 --> 00:28:19.150
Can I complete your answer?

00:28:19.150 --> 00:28:21.500
PAUL LEWIS: Of course you can.

00:28:21.500 --> 00:28:24.720
RENATO MANGINI: Regarding
feedback from users, we have

00:28:24.720 --> 00:28:28.630
the full feedback assistant
on the Chrome Web Store.

00:28:28.630 --> 00:28:34.590
So when you publish your app,
you have to review and you

00:28:34.590 --> 00:28:37.530
have the feedback option on the
Chrome Web Store that was

00:28:37.530 --> 00:28:40.200
launched I think one month
or two months ago.

00:28:40.200 --> 00:28:41.720
It's really new, I think.

00:28:41.720 --> 00:28:45.910
It's the same for extensions
for legacy and hosted apps.

00:28:45.910 --> 00:28:52.360
And also, we are talking about
a better integration on

00:28:52.360 --> 00:28:56.360
feedback and mechanisms and
APIs and et cetera.

00:28:56.360 --> 00:28:58.060
But it's not there yet.

00:28:58.060 --> 00:29:03.350
So for now or for the moment,
you upload your Chrome apps,

00:29:03.350 --> 00:29:07.450
packaged apps, you can use the
current Chrome Web Store

00:29:07.450 --> 00:29:09.860
feedback system.

00:29:09.860 --> 00:29:10.240
MALE SPEAKER 3: Cool.

00:29:10.240 --> 00:29:15.080
And might as well jump in on
this, there are a bunch of

00:29:15.080 --> 00:29:19.200
great web apps and web
development tools out there

00:29:19.200 --> 00:29:21.940
that will allow you to add that
to your existing site.

00:29:21.940 --> 00:29:24.210
So they add is just sort
of like a little bit of

00:29:24.210 --> 00:29:25.800
JavaScript that you
add to your page,

00:29:25.800 --> 00:29:27.060
and they go do that.

00:29:27.060 --> 00:29:30.450
Now with those, you're going to
need to play carefully with

00:29:30.450 --> 00:29:33.410
some of those because they may
not necessarily work exactly

00:29:33.410 --> 00:29:35.720
as you'd expect in a Chrome
packaged app because of the

00:29:35.720 --> 00:29:37.580
Content Security Policy
restrictions.

00:29:37.580 --> 00:29:41.580
But they're at least
worth a look at.

00:29:41.580 --> 00:29:44.860
So I'm going to take this next
question, only because it's a

00:29:44.860 --> 00:29:46.520
kind of fun question to take.

00:29:46.520 --> 00:29:49.190
We're missing one of our
favorite, favorite team

00:29:49.190 --> 00:29:52.100
members here right now.

00:29:52.100 --> 00:29:55.465
Paul Kinlan is not with us, so
I'm going to channel Paul

00:29:55.465 --> 00:29:57.750
Kinlan for this question.

00:29:57.750 --> 00:30:00.770
"So let's say I've implemented
a simple text editor as a

00:30:00.770 --> 00:30:02.440
Chrome packaged app.

00:30:02.440 --> 00:30:06.040
Is there any way to expose
this app in the open-with

00:30:06.040 --> 00:30:08.900
context menu that shows up when
the user right clicks on

00:30:08.900 --> 00:30:11.250
a text file in file manager?"

00:30:11.250 --> 00:30:15.200
And the cool thing is,
"snitsyboo," or also known as

00:30:15.200 --> 00:30:16.450
web intents--

00:30:19.100 --> 00:30:21.700
he's not allowed to say web
intents anymore, because he's

00:30:21.700 --> 00:30:23.640
just so focused on
web intents--

00:30:23.640 --> 00:30:27.090
but with the web intents, you
can actually say these types

00:30:27.090 --> 00:30:31.250
of files are able to be handled
by this application so

00:30:31.250 --> 00:30:35.870
that your Chrome packaged app
can open whatever type of file

00:30:35.870 --> 00:30:37.890
that you want to be
able to open.

00:30:37.890 --> 00:30:40.260
So you're pretty much
set with that.

00:30:40.260 --> 00:30:43.800
I don't think it's quite enabled
in the builds yet, but

00:30:43.800 --> 00:30:45.130
it is something we're
working on.

00:30:45.130 --> 00:30:48.790
And it is made on the roadmap
for something

00:30:48.790 --> 00:30:51.330
we're going to do.

00:30:51.330 --> 00:30:52.330
PAUL LEWIS: Awesome.

00:30:52.330 --> 00:30:54.090
MALE SPEAKER 3: Cool.

00:30:54.090 --> 00:30:56.940
"Will apps introduce additional
features for

00:30:56.940 --> 00:30:58.570
platform integration?

00:30:58.570 --> 00:31:01.280
I want my app to look and
feel native." Now

00:31:01.280 --> 00:31:03.210
this is from Russell.

00:31:03.210 --> 00:31:04.300
Paul, do you want to
take this one?

00:31:04.300 --> 00:31:04.765
PAUL LEWIS: Yeah.

00:31:04.765 --> 00:31:10.860
Yeah, so when you say look and
feel native, certainly we're

00:31:10.860 --> 00:31:15.310
looking to do things like if
you talk about task manager

00:31:15.310 --> 00:31:21.870
type stuff and alt-tab type
behaviors, that's definitely

00:31:21.870 --> 00:31:25.645
something that we're working
hard to get in place so that

00:31:25.645 --> 00:31:29.610
these apps, it's not sort of
necessarily launched from

00:31:29.610 --> 00:31:34.540
Chrome, and that it feels like
it's sitting alongside the

00:31:34.540 --> 00:31:37.980
native apps that you
guys are building.

00:31:37.980 --> 00:31:40.940
In terms of the look and feel,
ultimately this is the Chrome

00:31:40.940 --> 00:31:46.410
runtime and the browser
has the crafting

00:31:46.410 --> 00:31:48.520
the look and feel.

00:31:48.520 --> 00:31:51.950
Obviously things like web
components as they come down

00:31:51.950 --> 00:31:57.470
the line, they may enable you to
build the look and feel of

00:31:57.470 --> 00:31:58.050
[INAUDIBLE]

00:31:58.050 --> 00:31:59.140
differently.

00:31:59.140 --> 00:32:02.860
But as you'd expect from
your normal web--

00:32:02.860 --> 00:32:06.860
RENATO MANGINI: Allows you to do
whatever you want with the

00:32:06.860 --> 00:32:11.020
window, including creating a
specific type of bar that

00:32:11.020 --> 00:32:12.710
looks like a native
application or no

00:32:12.710 --> 00:32:13.890
type of bar at all.

00:32:13.890 --> 00:32:14.910
MALE SPEAKER 3: Yeah,
that's a good point.

00:32:14.910 --> 00:32:18.500
So with the apps, because they
don't have the address bar

00:32:18.500 --> 00:32:20.630
anything like that, should
look native.

00:32:20.630 --> 00:32:23.790
And now it's the matter of how
you style a lot of these

00:32:23.790 --> 00:32:26.780
things for them to look.

00:32:26.780 --> 00:32:27.425
All right.

00:32:27.425 --> 00:32:32.100
"In Canary packaged apps, we're
not sure if we can embed

00:32:32.100 --> 00:32:35.840
a web app like Gmail and
expect all of its

00:32:35.840 --> 00:32:37.620
functionality to work right.

00:32:37.620 --> 00:32:41.840
Adobe AIR lets you load an
iframe from a local file and

00:32:41.840 --> 00:32:46.440
use a parent-child bridge for
coms." Renato, I think we

00:32:46.440 --> 00:32:47.500
talked about this one earlier.

00:32:47.500 --> 00:32:49.340
Do you want to take this one?

00:32:49.340 --> 00:32:50.580
RENATO MANGINI: Yes,
absolutely.

00:32:50.580 --> 00:32:52.860
In fact, can you share
my screen?

00:32:52.860 --> 00:32:55.420
MALE SPEAKER 3: Yeah,
give me one sec to

00:32:55.420 --> 00:32:58.130
bring up your screen.

00:32:58.130 --> 00:33:02.386
And I think we have your screen
up, otherwise we have--

00:33:02.386 --> 00:33:06.280
RENATO MANGINI: I have
the Dojo application.

00:33:06.280 --> 00:33:07.960
MALE SPEAKER 3: Now we
have your screen up.

00:33:07.960 --> 00:33:09.600
RENATO MANGINI: All right.

00:33:09.600 --> 00:33:09.880
OK.

00:33:09.880 --> 00:33:16.120
So we have two solutions for
this problem you mentioned.

00:33:16.120 --> 00:33:17.930
We have the browser
tag, and we have

00:33:17.930 --> 00:33:20.050
the sent box of iframe.

00:33:20.050 --> 00:33:23.600
The sent box of iframe, you
use it for part of your

00:33:23.600 --> 00:33:28.460
application that you want to run
stuff that cannot run on

00:33:28.460 --> 00:33:33.920
application itself, like eval,
or new function, or dynamic

00:33:33.920 --> 00:33:37.280
JavaScript, so other ways
of [INAUDIBLE] scripts.

00:33:37.280 --> 00:33:39.350
And the browser tag, I think
it's more appropriate

00:33:39.350 --> 00:33:41.200
for what you want.

00:33:41.200 --> 00:33:42.700
And we have this sample.

00:33:42.700 --> 00:33:44.920
It's on the GitHub Web Store.

00:33:44.920 --> 00:33:46.620
It's called the browser tag.

00:33:46.620 --> 00:33:52.130
And what it does, and I execute
it, this is the Chrome

00:33:52.130 --> 00:33:55.150
packaged app.

00:33:55.150 --> 00:33:57.640
It looks like a browser.

00:33:57.640 --> 00:34:10.210
And if I go to Gmail, I can
actually open Gmail inside the

00:34:10.210 --> 00:34:10.750
packaged app.

00:34:10.750 --> 00:34:14.800
So yeah, it does exactly
what you mentioned.

00:34:14.800 --> 00:34:17.530
I think this is what
you were expecting.

00:34:17.530 --> 00:34:20.010
If not, please send another
question or

00:34:20.010 --> 00:34:21.564
comment on the question.

00:34:21.564 --> 00:34:22.370
All right?

00:34:22.370 --> 00:34:24.690
And the code for the sample
is also available.

00:34:24.690 --> 00:34:26.989
You can look how it's done.

00:34:26.989 --> 00:34:29.920
It's pretty simple.

00:34:29.920 --> 00:34:30.510
MALE SPEAKER 3: All right.

00:34:30.510 --> 00:34:30.980
Cool.

00:34:30.980 --> 00:34:32.139
Well, thank you.

00:34:32.139 --> 00:34:35.610
All right, so let's pop down
to the next question.

00:34:35.610 --> 00:34:38.630
"Does or will the storage
APIs support

00:34:38.630 --> 00:34:40.020
shared offline storage?

00:34:40.020 --> 00:34:43.560
For example, can a packaged app
from the same developer

00:34:43.560 --> 00:34:49.179
read state from other apps from
a unified offline store?"

00:34:49.179 --> 00:34:51.510
Renato, do you want to take
this one as well?

00:34:51.510 --> 00:34:55.010
RENATO MANGINI: Yeah, this is
a very good question indeed.

00:34:55.010 --> 00:35:01.500
And currently not, we don't
allow it now, because we use

00:35:01.500 --> 00:35:06.300
the application key to restrict

00:35:06.300 --> 00:35:09.040
your send box to storage.

00:35:09.040 --> 00:35:15.740
And I would ask you to post a
bug on it on crbug.com, so we

00:35:15.740 --> 00:35:16.990
can track it.

00:35:19.070 --> 00:35:21.220
It looks like a very
common use case.

00:35:21.220 --> 00:35:24.540
We can discuss it with
the engineer team.

00:35:24.540 --> 00:35:25.920
MALE SPEAKER 3: Cool, yeah.

00:35:25.920 --> 00:35:27.170
All right.

00:35:28.960 --> 00:35:30.600
All right, let's take
the next question.

00:35:30.600 --> 00:35:34.600
"Can packaged apps register
themselves as the default file

00:35:34.600 --> 00:35:38.850
handler for the type of file in
the external OS, either Mac

00:35:38.850 --> 00:35:41.870
or Windows?" So I think we
addressed this one with this

00:35:41.870 --> 00:35:44.540
"snitsyboo" stuff,
with web intents.

00:35:44.540 --> 00:35:47.760
You can register to be able to
open with or be able to handle

00:35:47.760 --> 00:35:51.110
a particular file type.

00:35:51.110 --> 00:35:54.450
If we didn't answer that,
please be sure to submit

00:35:54.450 --> 00:35:57.250
another question and we
can go from there.

00:35:57.250 --> 00:35:59.630
So the next question, "Are
packaged apps eventually

00:35:59.630 --> 00:36:03.460
coming to Android, so we can
write one app in HTML5 and

00:36:03.460 --> 00:36:07.175
have it run in the browser,
mobile, and Chrome OS?" Paul,

00:36:07.175 --> 00:36:09.650
do you want to take
this question?

00:36:09.650 --> 00:36:12.600
PAUL LEWIS: Yeah, so this has
come up the last couple of

00:36:12.600 --> 00:36:14.030
weeks as well.

00:36:14.030 --> 00:36:18.870
We're trying to get the
desktop story right.

00:36:18.870 --> 00:36:21.670
We don't have any announcements,
dates, times or

00:36:21.670 --> 00:36:26.540
anything like that, any of the
platforms at this stage.

00:36:26.540 --> 00:36:28.440
We understand the feedback,
and we appreciate your

00:36:28.440 --> 00:36:33.000
feedback that you want to
write the code once.

00:36:33.000 --> 00:36:36.111
And certainly it's something
we take the engineers team.

00:36:36.111 --> 00:36:38.220
So yeah.

00:36:38.220 --> 00:36:40.810
MALE SPEAKER 3: All
right, cool.

00:36:40.810 --> 00:36:44.040
So the next question is, "When
can I write packaged apps in

00:36:44.040 --> 00:36:47.390
Dart?" Well, you can
do it today.

00:36:47.390 --> 00:36:50.640
If you write your app in Dart
and you compile it down to

00:36:50.640 --> 00:36:52.860
JavaScript.

00:36:52.860 --> 00:36:57.160
You can't run them natively in
Dart yet, but it is something

00:36:57.160 --> 00:36:58.480
that the Dart team
is aware of.

00:36:58.480 --> 00:37:00.300
They've heard the ask.

00:37:00.300 --> 00:37:06.280
I'm sure there's probably a bug
in Cr Bug that's already

00:37:06.280 --> 00:37:06.790
been filed.

00:37:06.790 --> 00:37:09.940
If there isn't, go file the
bug and ask all of your

00:37:09.940 --> 00:37:13.520
friends to go star it, so that
the engineering team really

00:37:13.520 --> 00:37:18.090
sees how many people are
interested in this.

00:37:18.090 --> 00:37:20.910
Those kinds of things really
do help to drive the

00:37:20.910 --> 00:37:23.780
development of these things,
helps us to prioritize and

00:37:23.780 --> 00:37:27.160
understand what's going on.

00:37:27.160 --> 00:37:29.850
All right, so let's take
the next question.

00:37:29.850 --> 00:37:32.230
If you have any other questions,
please be sure to

00:37:32.230 --> 00:37:33.840
post them to the moderator.

00:37:33.840 --> 00:37:37.710
But the next question is "I
have a packaged app that

00:37:37.710 --> 00:37:41.170
displays generated content
in an iframe

00:37:41.170 --> 00:37:42.940
because of the new manifests.

00:37:42.940 --> 00:37:46.440
I get a Content Security Policy
error when it executes

00:37:46.440 --> 00:37:53.720
the JavaScript code in that
iframe." Is there any info

00:37:53.720 --> 00:37:56.640
that we can help with this?

00:37:59.300 --> 00:38:02.000
PAUL LEWIS: It may be just
looking at this that there's

00:38:02.000 --> 00:38:05.600
some inline JavaScript.

00:38:05.600 --> 00:38:09.640
As we talked about in the demo
and last week, any JavaScript

00:38:09.640 --> 00:38:11.720
needs to be taken from
inline and taken out

00:38:11.720 --> 00:38:14.010
to a separate file.

00:38:14.010 --> 00:38:16.190
That may be the cause of
some of this stuff.

00:38:16.190 --> 00:38:19.040
It may be that the JavaScript
and the iframe is doing

00:38:19.040 --> 00:38:22.330
something like eval or creating
a new function.

00:38:22.330 --> 00:38:26.400
So I think because there are a
number of possibilities of

00:38:26.400 --> 00:38:29.340
what this JavaScript code is
doing or what might be that

00:38:29.340 --> 00:38:31.690
it's triggered.

00:38:31.690 --> 00:38:33.810
Post on the groups.

00:38:33.810 --> 00:38:39.580
We do strive to give a developer
help on there.

00:38:39.580 --> 00:38:42.970
And obviously community can
help you to debug whatever

00:38:42.970 --> 00:38:44.100
issue you're facing.

00:38:44.100 --> 00:38:46.730
But generally speaking, it's
definitely worth looking at

00:38:46.730 --> 00:38:51.300
the CSP restrictions and making
sure that your code is

00:38:51.300 --> 00:38:54.120
sitting inline with that.

00:38:54.120 --> 00:38:59.260
Because that may well be the
cause of what you're seeing.

00:38:59.260 --> 00:39:00.060
MALE SPEAKER 3: All right.

00:39:00.060 --> 00:39:03.350
Well, it looks like that's
the end of the questions.

00:39:03.350 --> 00:39:05.590
It's almost out of
time anyways.

00:39:05.590 --> 00:39:09.860
So with that we'll wrap up and
say guys, thank you very much

00:39:09.860 --> 00:39:10.800
for joining us.

00:39:10.800 --> 00:39:15.120
We'll be here again next
Tuesday, same bat time, same

00:39:15.120 --> 00:39:18.680
bat place, so 9:00 Pacific.

00:39:18.680 --> 00:39:22.210
And we look forward to talking
to you more about Chrome apps.

00:39:22.210 --> 00:39:27.330
Next week, Paul, Renato, I think
the plan is to dive into

00:39:27.330 --> 00:39:29.520
some of the sample applications
that we've

00:39:29.520 --> 00:39:34.100
written that really use the
storage mechanisms.

00:39:34.100 --> 00:39:35.720
Isn't that right?

00:39:35.720 --> 00:39:36.920
RENATO MANGINI: Yes, exactly.

00:39:36.920 --> 00:39:40.180
MALE SPEAKER 3: Yeah, so we'll
take what we learned today and

00:39:40.180 --> 00:39:43.480
put that to a real
practical use.

00:39:43.480 --> 00:39:46.610
We'll show you some really good
use cases, how to go use

00:39:46.610 --> 00:39:48.580
it, where it's being used.

00:39:48.580 --> 00:39:51.930
So that you can get those
ideas and sort of start

00:39:51.930 --> 00:39:53.700
forming them into your head.

00:39:53.700 --> 00:39:54.115
So with--

00:39:54.115 --> 00:39:54.845
PAUL LEWIS: Actually.

00:39:54.845 --> 00:39:55.160
MALE SPEAKER 3: Paul?

00:39:55.160 --> 00:39:57.590
PAUL LEWIS: Sorry, I'm just
going to throw in that between

00:39:57.590 --> 00:40:02.930
now and then, how about play
with the samples, have a go at

00:40:02.930 --> 00:40:08.880
coding up some of this Chrome
Storage API stuff and let us

00:40:08.880 --> 00:40:12.980
know in the questions if you
run into anything that is

00:40:12.980 --> 00:40:15.730
unexpected or whatever, and
we'll try and help you next

00:40:15.730 --> 00:40:17.980
week alongside looking
into those samples.

00:40:17.980 --> 00:40:21.050
So, take this week as an
opportunity to kind of dilute

00:40:21.050 --> 00:40:23.966
yourselves, and then we'll
do what we can to

00:40:23.966 --> 00:40:24.920
help you next week.

00:40:24.920 --> 00:40:25.690
MALE SPEAKER 3: Awesome.

00:40:25.690 --> 00:40:27.950
All right, well, everybody,
thanks so much.

00:40:27.950 --> 00:40:30.400
Hope you have a great week and
look forward to seeing

00:40:30.400 --> 00:40:31.780
everybody next week.

00:40:31.780 --> 00:40:33.440
Bye, guys.

00:40:33.440 --> 00:40:34.690
RENATO MANGINI: Bye-bye.

