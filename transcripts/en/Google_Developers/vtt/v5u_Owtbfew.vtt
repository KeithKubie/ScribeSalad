WEBVTT
Kind: captions
Language: en

00:00:03.850 --> 00:00:04.810
BRAD ABRAMS: Good afternoon.

00:00:04.810 --> 00:00:05.810
Thank you for coming.

00:00:05.810 --> 00:00:08.620
In this talk, we're going
to show you how to build

00:00:08.620 --> 00:00:11.710
backends, cloud-based backends
in for your amazing Android

00:00:11.710 --> 00:00:13.045
applications.

00:00:13.045 --> 00:00:14.030
I'm Brad Abrams.

00:00:14.030 --> 00:00:15.990
I'm a product manager
on the cloud team.

00:00:15.990 --> 00:00:16.970
DAVID CHANDLER: And I'm
David Chandler, an

00:00:16.970 --> 00:00:18.650
Android developer advocate.

00:00:18.650 --> 00:00:19.770
BRAD ABRAMS: So David, I haven't
seen you in a while.

00:00:19.770 --> 00:00:21.340
How are you enjoying IO?

00:00:21.340 --> 00:00:22.120
DAVID CHANDLER: It's great.

00:00:22.120 --> 00:00:22.730
It's great.

00:00:22.730 --> 00:00:25.040
Love to be here and meet
up with geeks from

00:00:25.040 --> 00:00:26.500
all around the world.

00:00:26.500 --> 00:00:29.400
You know, the only thing that I
think we need for IO is, we

00:00:29.400 --> 00:00:31.170
need a way to find geeks.

00:00:31.170 --> 00:00:32.870
Because there's lots of them
around, but I don't know what

00:00:32.870 --> 00:00:35.100
everybody's interest is, and
when people scatter out at the

00:00:35.100 --> 00:00:36.285
city at night.

00:00:36.285 --> 00:00:38.450
BRAD ABRAMS: You know, I think
there's an app for that.

00:00:38.450 --> 00:00:40.340
We've got a couple of hours.

00:00:40.340 --> 00:00:41.130
We've got-- not a couple--

00:00:41.130 --> 00:00:42.540
we've got 39 minutes.

00:00:42.540 --> 00:00:45.240
We could probably build a
cloud-connected Android app to

00:00:45.240 --> 00:00:46.490
solve just that problem.

00:00:46.490 --> 00:00:47.810
DAVID CHANDLER: I think
you're right.

00:00:47.810 --> 00:00:50.100
BRAD ABRAMS: What would
be on your wish list?

00:00:50.100 --> 00:00:52.020
DAVID CHANDLER: I'd probably
want a map display.

00:00:52.020 --> 00:00:54.360
And it would show me where
other geeks are.

00:00:54.360 --> 00:00:58.550
They'd have a way to register
what they're interested in--

00:00:58.550 --> 00:01:00.690
Android, Chrome, cloud,
et cetera.

00:01:00.690 --> 00:01:04.030
And then maybe color code the
markers by their interests and

00:01:04.030 --> 00:01:05.630
show them on the map.

00:01:05.630 --> 00:01:06.370
BRAD ABRAMS: Yes.

00:01:06.370 --> 00:01:08.580
So David, you really, they
shortened the session length

00:01:08.580 --> 00:01:11.560
this year, so there's only
like 40 minutes.

00:01:11.560 --> 00:01:13.730
I don't know if we're going to
have time to build all that.

00:01:13.730 --> 00:01:17.600
But luckily, we launched a new
member of the Cloud Platform

00:01:17.600 --> 00:01:20.530
family, the Mobile
Backend Starter.

00:01:20.530 --> 00:01:24.050
And what this does is, it's a
no code server solution to

00:01:24.050 --> 00:01:27.940
build a highly scalable,
cloud-based backend in for

00:01:27.940 --> 00:01:30.350
your mobile applications.

00:01:30.350 --> 00:01:33.300
It's built on App Engine,
so it was born to scale.

00:01:33.300 --> 00:01:37.260
We've got built-in Google
Authentication, built-in

00:01:37.260 --> 00:01:40.010
Google Cloud Messaging, and a
very cool Continuous Query

00:01:40.010 --> 00:01:42.660
feature that we'll
show you about.

00:01:42.660 --> 00:01:45.990
The Mobile Backend Starter
has two parts to it.

00:01:45.990 --> 00:01:50.750
The first part is on the server
side with App Engine.

00:01:50.750 --> 00:01:54.680
We define a few Cloud Endpoints
exposed over Rest

00:01:54.680 --> 00:02:00.070
APIs to do generic data storage
and access from there.

00:02:00.070 --> 00:02:03.180
And then it integrates with
Google Cloud Messaging to send

00:02:03.180 --> 00:02:05.502
tickles down to the device.

00:02:05.502 --> 00:02:09.600
And then on the device side,
we have a Client Library

00:02:09.600 --> 00:02:12.620
that's tailored to that backend,
and then a place to

00:02:12.620 --> 00:02:14.790
put your own application.

00:02:14.790 --> 00:02:16.230
So with this David, how do
you think that would

00:02:16.230 --> 00:02:18.440
look for your app?

00:02:18.440 --> 00:02:20.990
DAVID CHANDLER: Well, we need to
come up with a map display,

00:02:20.990 --> 00:02:23.940
so we could use the new
Android Maps V2 API.

00:02:23.940 --> 00:02:26.690
And then use the Mobile Backend
Starter to make our

00:02:26.690 --> 00:02:29.750
queries to the cloud, and get
the locations of geeks, and

00:02:29.750 --> 00:02:32.210
report our own location
up as well.

00:02:32.210 --> 00:02:32.760
BRAD ABRAMS: Sounds good.

00:02:32.760 --> 00:02:34.330
So should we get started?

00:02:34.330 --> 00:02:34.950
DAVID CHANDLER: Absolutely.

00:02:34.950 --> 00:02:35.500
BRAD ABRAMS: OK.

00:02:35.500 --> 00:02:37.620
Let's go.

00:02:37.620 --> 00:02:42.460
So our story begins here at
the new Cloud Console.

00:02:42.460 --> 00:02:44.750
This is the new integrated
experience for

00:02:44.750 --> 00:02:46.390
all the cloud features.

00:02:46.390 --> 00:02:49.480
So if you might have been used
to using API console in the

00:02:49.480 --> 00:02:53.650
past, and eventually this will
also replace the App Engine

00:02:53.650 --> 00:02:54.900
admin console.

00:02:54.900 --> 00:02:57.640
But for now, both exist in
parallel until we get this one

00:02:57.640 --> 00:03:00.110
all the way there.

00:03:00.110 --> 00:03:04.440
So on this site, and I invite
you if you're watching this

00:03:04.440 --> 00:03:06.520
online, to play along
with us here.

00:03:06.520 --> 00:03:09.150
If you want to follow the
steps that I'm saying.

00:03:09.150 --> 00:03:11.900
The Eng team would love it if
you just really slammed our

00:03:11.900 --> 00:03:13.570
servers right now.

00:03:13.570 --> 00:03:17.030
So you just go to
cloud.google.com/console and

00:03:17.030 --> 00:03:18.030
create an app.

00:03:18.030 --> 00:03:20.970
And then click on this
Get Started button.

00:03:20.970 --> 00:03:23.150
There's a few samples
here to choose from.

00:03:23.150 --> 00:03:25.610
One of them is this new
Mobile Backend.

00:03:25.610 --> 00:03:28.960
Now for the sake of appeasing
the demo gods, I have already

00:03:28.960 --> 00:03:32.200
deployed this a little
earlier this morning.

00:03:32.200 --> 00:03:34.900
But the way this works is, you
just click on Deploy here.

00:03:34.900 --> 00:03:37.736
And notice I can download--

00:03:37.736 --> 00:03:40.100
all the backend source code
for this is available.

00:03:40.100 --> 00:03:42.610
I can download that and do
whatever I want to with it.

00:03:42.610 --> 00:03:44.080
Or I can just deploy that.

00:03:44.080 --> 00:03:47.680
And this, without having to
install any App Engine SDK,

00:03:47.680 --> 00:03:49.010
any tools on the client.

00:03:49.010 --> 00:03:51.490
It deploys a fully-functional
App Engine app.

00:03:51.490 --> 00:03:54.240
Everything we're going to
show you in this demo is

00:03:54.240 --> 00:03:55.200
already in that app.

00:03:55.200 --> 00:03:57.270
And that's deployed for you.

00:03:57.270 --> 00:04:00.800
Once that deployment finishes,
you can click on the Settings

00:04:00.800 --> 00:04:01.720
link there.

00:04:01.720 --> 00:04:05.530
And that will open up the Admin
Experience for this

00:04:05.530 --> 00:04:06.130
mobile backend.

00:04:06.130 --> 00:04:08.820
In it's actually part of
the App Engine app

00:04:08.820 --> 00:04:10.860
that we've just deployed.

00:04:10.860 --> 00:04:14.450
And you can see here, we
start locked down.

00:04:14.450 --> 00:04:18.329
It is locked down by default.

00:04:18.329 --> 00:04:21.050
and the messaging is disabled
by default.

00:04:21.050 --> 00:04:24.570
So it's locked down so no one
can access your server.

00:04:24.570 --> 00:04:27.770
So what we want to do for
development mode is flip this

00:04:27.770 --> 00:04:29.260
to Open Access.

00:04:29.260 --> 00:04:34.300
And that means everybody can
access your endpoint.

00:04:34.300 --> 00:04:37.070
The next step we need to do,
we come back over here.

00:04:37.070 --> 00:04:38.600
We did step one, step two.

00:04:38.600 --> 00:04:41.160
Step three is to download
an Android client.

00:04:41.160 --> 00:04:44.190
So we have all of the source
code available

00:04:44.190 --> 00:04:45.820
for an Android client.

00:04:45.820 --> 00:04:52.840
That works super well in the
Android IDE or in Eclipse.

00:04:52.840 --> 00:04:56.230
So we're going to use Eclipse
with ADT, the latest Android

00:04:56.230 --> 00:04:57.840
Development Tools installed.

00:04:57.840 --> 00:05:01.230
And I've actually already
downloaded that and have the

00:05:01.230 --> 00:05:03.460
project here in Eclipse,
so you can

00:05:03.460 --> 00:05:07.490
see what you're getting.

00:05:07.490 --> 00:05:12.580
There's the base files that
handle accessing the server.

00:05:12.580 --> 00:05:14.845
And then there's a sample that
comes with it with this Guest

00:05:14.845 --> 00:05:17.200
Book example, which we'll
take a look at.

00:05:17.200 --> 00:05:20.870
And then the main configuration
place to look at

00:05:20.870 --> 00:05:22.780
is this cons.java file.

00:05:22.780 --> 00:05:24.380
And we'll look at this
a little bit over the

00:05:24.380 --> 00:05:25.490
course of the talk.

00:05:25.490 --> 00:05:28.490
But there is a few constants
here that you fill in to be

00:05:28.490 --> 00:05:31.350
able to wire these
things together.

00:05:31.350 --> 00:05:38.500
So what we need to do is wire
up our client to our server,

00:05:38.500 --> 00:05:40.030
just so they can talk.

00:05:40.030 --> 00:05:43.560
If you're familiar with App
Engine, it has a URL format

00:05:43.560 --> 00:05:46.470
that matches the project
ID that we gave it.

00:05:46.470 --> 00:05:48.200
And then we just give
the project ID in

00:05:48.200 --> 00:05:50.340
the cons file here.

00:05:50.340 --> 00:05:52.550
I've actually already got
that up and running.

00:05:52.550 --> 00:05:55.120
I've already deployed that.

00:05:55.120 --> 00:06:01.260
So if we just switch over to
the camera, which is here.

00:06:01.260 --> 00:06:05.230
So here we have, this is
the Guest Book app.

00:06:05.230 --> 00:06:09.200
This is what comes by default
with the project.

00:06:09.200 --> 00:06:11.620
And we can just send
a message here, "Hi

00:06:11.620 --> 00:06:14.150
IO." And I click Send.

00:06:14.150 --> 00:06:17.470
When I click Send, what it's
going to do is send a REST

00:06:17.470 --> 00:06:19.340
request up to the server.

00:06:19.340 --> 00:06:22.610
The server will store that data
in App Engine's noSQL

00:06:22.610 --> 00:06:23.470
data store.

00:06:23.470 --> 00:06:26.220
And then we'll get a Ack back
on the client here.

00:06:26.220 --> 00:06:29.880
And just to show that,
let me switch back.

00:06:29.880 --> 00:06:30.490
I am--

00:06:30.490 --> 00:06:31.060
DAVID CHANDLER: Four.

00:06:31.060 --> 00:06:32.020
BRAD ABRAMS: I'm four.

00:06:32.020 --> 00:06:33.160
Sorry about that.

00:06:33.160 --> 00:06:33.770
OK.

00:06:33.770 --> 00:06:34.890
We'll just switch back here.

00:06:34.890 --> 00:06:38.265
And let me show you in the
new Cloud Console.

00:06:42.510 --> 00:06:46.900
So if we switch up here, you
can see our beautiful new

00:06:46.900 --> 00:06:48.080
Cloud Data Store Explorer.

00:06:48.080 --> 00:06:51.430
And we click on Queries.

00:06:51.430 --> 00:06:55.340
And we can see that entity
that we [INAUDIBLE].

00:06:55.340 --> 00:06:57.240
Notice there's that
Guest Book entity.

00:06:57.240 --> 00:06:58.910
You can create your
own entities.

00:06:58.910 --> 00:07:01.870
And they can have any fields
that you want them to have.

00:07:01.870 --> 00:07:04.490
And you can see, here's our
Guest Book Entity and there's

00:07:04.490 --> 00:07:08.170
the "Hi IO." So in about five
minutes, we've already built a

00:07:08.170 --> 00:07:10.850
cloud-connected Android app.

00:07:10.850 --> 00:07:12.770
But I think there's
more we can do.

00:07:12.770 --> 00:07:15.550
I think for the Geek Serendipity
app David's going

00:07:15.550 --> 00:07:17.720
to build, he's going to want
more than just storing the

00:07:17.720 --> 00:07:19.010
state in the cloud.

00:07:19.010 --> 00:07:21.030
He's going to want to be sitting
at a coffee shop and

00:07:21.030 --> 00:07:25.720
just see geeks pop in on his
mobile device, without having

00:07:25.720 --> 00:07:27.620
to refresh the application.

00:07:27.620 --> 00:07:29.210
DAVID CHANDLER: In case I can't
recognize them when they

00:07:29.210 --> 00:07:30.780
walk with their Google apps.

00:07:30.780 --> 00:07:31.250
BRAD ABRAMS: Right.

00:07:31.250 --> 00:07:32.750
Exactly.

00:07:32.750 --> 00:07:36.224
So there's a couple of
approaches to this.

00:07:36.224 --> 00:07:37.670
This is not the right slide.

00:07:37.670 --> 00:07:42.910
There's a couple of approaches
to this.

00:07:42.910 --> 00:07:43.970
And we don't have our--

00:07:43.970 --> 00:07:44.860
anyway, yes.

00:07:44.860 --> 00:07:46.240
There's a couple of approaches
to this.

00:07:46.240 --> 00:07:47.930
One would be polling.

00:07:47.930 --> 00:07:50.870
We could, from the client of
the app, we could every few

00:07:50.870 --> 00:07:52.400
minutes, we could go up
to the server and

00:07:52.400 --> 00:07:53.200
say, is anybody new?

00:07:53.200 --> 00:07:54.690
Is anything new?

00:07:54.690 --> 00:07:56.510
And get the results
back there.

00:07:56.510 --> 00:07:58.380
But that would be bad.

00:07:58.380 --> 00:08:00.910
That would be expensive in
battery life, expensive in

00:08:00.910 --> 00:08:04.210
network resources, and would use
a lot of server resources.

00:08:04.210 --> 00:08:06.690
So rather than that,
we're going to use

00:08:06.690 --> 00:08:08.290
Google Cloud Messaging.

00:08:08.290 --> 00:08:13.140
It's the same technology that
Google uses to power Gmail on

00:08:13.140 --> 00:08:15.050
Android or Google Chat.

00:08:15.050 --> 00:08:18.000
There's a persisted connection
that's maintained between

00:08:18.000 --> 00:08:21.190
Google's data centers and all
the phones that have those

00:08:21.190 --> 00:08:23.090
Google Experience
apps on them.

00:08:23.090 --> 00:08:26.540
And your code, your applications
can use that same

00:08:26.540 --> 00:08:29.400
channel to be able to
send notifications.

00:08:29.400 --> 00:08:31.320
So we're going to use that.

00:08:31.320 --> 00:08:33.070
So there's really two
steps to doing that.

00:08:33.070 --> 00:08:38.370
The, first step is we need to
know who is sending the

00:08:38.370 --> 00:08:39.789
notifications.

00:08:39.789 --> 00:08:42.669
And in our case, it's going to
be the Mobile Backend Starter

00:08:42.669 --> 00:08:46.250
that we just deployed is going
to send those notifications.

00:08:46.250 --> 00:08:48.770
So the way we do that is, let's
come back to our app

00:08:48.770 --> 00:08:52.320
here and click on APIs.

00:08:52.320 --> 00:08:56.480
And you can see, I've already
ahead of time turned on the

00:08:56.480 --> 00:08:58.910
Google Cloud Messaging
for Android.

00:08:58.910 --> 00:09:01.300
So you have to enable
this API.

00:09:01.300 --> 00:09:05.540
And then, we go into the Mobile
Backend Starter, and we

00:09:05.540 --> 00:09:07.610
need to give it the API key.

00:09:07.610 --> 00:09:11.970
This is where we're going to use
that to pass along to say,

00:09:11.970 --> 00:09:17.820
here's who's sending the
Push notification.

00:09:17.820 --> 00:09:21.410
So in order to do that, in order
to get that key, we'll

00:09:21.410 --> 00:09:24.430
go into the New Cloud Console
and we'll register a new

00:09:24.430 --> 00:09:25.140
application.

00:09:25.140 --> 00:09:28.150
And we'll just call this
our Mobile Backend.

00:09:28.150 --> 00:09:30.420
And it's just a generic
web app.

00:09:30.420 --> 00:09:33.890
And we'll register it.

00:09:33.890 --> 00:09:36.750
And we'll actually use this a
couple of times when we do

00:09:36.750 --> 00:09:38.260
Auth as well.

00:09:38.260 --> 00:09:40.840
But for this time, all it asks
for is that server key.

00:09:40.840 --> 00:09:44.150
So we just grab that server
key and put it in here.

00:09:44.150 --> 00:09:49.360
And we've done everything we
need to enable our server side

00:09:49.360 --> 00:09:51.000
for Push notification.

00:09:51.000 --> 00:09:53.510
The last bit is just to
put the project ID

00:09:53.510 --> 00:09:55.270
that cons.jafa file.

00:09:55.270 --> 00:09:59.500
Once we've done that and deploy,
then we get the same

00:09:59.500 --> 00:10:00.410
Guest Book application.

00:10:00.410 --> 00:10:03.760
But now if David were to send us
some messages, David's got

00:10:03.760 --> 00:10:06.160
that same app running
over there.

00:10:06.160 --> 00:10:08.272
Oh, and we need to switch to
it, so you can see it.

00:10:11.070 --> 00:10:14.560
So what David's going to do is
he's going to find the app.

00:10:14.560 --> 00:10:17.900
And then he's going to start
sending us messages.

00:10:17.900 --> 00:10:20.150
When he sends a message from his
phone, that's going to do

00:10:20.150 --> 00:10:23.040
a REST request up to the server,
going to store that

00:10:23.040 --> 00:10:24.460
data in data store.

00:10:24.460 --> 00:10:27.880
And then there's a technology
called Perspective Search that

00:10:27.880 --> 00:10:30.650
is looking at changes
in the data store.

00:10:30.650 --> 00:10:32.700
And when it sees a change,
it's going to send a

00:10:32.700 --> 00:10:36.260
notification over to Google
Cloud Messaging.

00:10:36.260 --> 00:10:39.170
Google Cloud Messaging will then
find the subscribers and

00:10:39.170 --> 00:10:42.770
send a message down
to my phone.

00:10:42.770 --> 00:10:45.880
And you can see, David's using
all his creativity at this

00:10:45.880 --> 00:10:48.420
point to come up with very
creative things.

00:10:48.420 --> 00:10:53.600
And you can see sort of hands
free, we're getting

00:10:53.600 --> 00:10:54.920
notifications.

00:10:54.920 --> 00:10:57.390
So just a few minutes in, and
we've already got a pretty

00:10:57.390 --> 00:11:00.680
functional application
with just setting a

00:11:00.680 --> 00:11:02.610
few variables there.

00:11:02.610 --> 00:11:04.770
So at this point, David, I think
we're probably ready for

00:11:04.770 --> 00:11:09.300
you to start putting some
map goodness on here.

00:11:09.300 --> 00:11:09.760
DAVID CHANDLER: OK.

00:11:09.760 --> 00:11:11.200
Excellent.

00:11:11.200 --> 00:11:16.920
So I have started project based
on the cloud backend

00:11:16.920 --> 00:11:19.790
that Brad has on his machine.

00:11:19.790 --> 00:11:21.880
And I've put on a Map activity
in it using the

00:11:21.880 --> 00:11:23.920
new Maps API V2.

00:11:23.920 --> 00:11:26.880
So there's just a map fragment
and a very simple activity,

00:11:26.880 --> 00:11:28.130
which I'll show you here.

00:11:30.870 --> 00:11:35.470
And you have to paste your
API key into your

00:11:35.470 --> 00:11:36.610
Android manifest as well.

00:11:36.610 --> 00:11:38.920
Don't forget that if you're
setting up maps.

00:11:38.920 --> 00:11:41.520
Let me zoom in on this code a
little bit so you can see a

00:11:41.520 --> 00:11:42.870
little bit about it.

00:11:42.870 --> 00:11:45.280
We just have a Setup method
where we obtain the reference

00:11:45.280 --> 00:11:46.530
to the map.

00:11:48.920 --> 00:11:51.600
And then we enable our location,
which makes the

00:11:51.600 --> 00:11:52.810
Location Services work.

00:11:52.810 --> 00:11:54.590
So that gives you the Locator
button in the upper

00:11:54.590 --> 00:11:57.640
right in the app.

00:11:57.640 --> 00:12:00.280
And that's really about all
there is to it for getting the

00:12:00.280 --> 00:12:01.630
basic map up.

00:12:01.630 --> 00:12:04.770
So what we want to do is, as
soon as we launch the app with

00:12:04.770 --> 00:12:07.510
the map, we want to
find our location.

00:12:07.510 --> 00:12:10.310
And we're going to use the
integrated Google Location

00:12:10.310 --> 00:12:12.770
Services that work
with the Maps V2.

00:12:12.770 --> 00:12:15.280
And then we want to do something
whenever it comes

00:12:15.280 --> 00:12:18.060
back and notifies us it has
a good location for us.

00:12:18.060 --> 00:12:21.500
So there is a listener called On
My Location Change listener

00:12:21.500 --> 00:12:22.940
that we can set.

00:12:22.940 --> 00:12:28.130
And that will allow us act
on that information.

00:12:28.130 --> 00:12:30.740
So what we'll set that--

00:12:30.740 --> 00:12:33.565
set On My Location
Change listener.

00:12:33.565 --> 00:12:37.700
And I'm going to just let
this class implement it.

00:12:37.700 --> 00:12:40.970
Let me blow this up again
a little bit.

00:12:40.970 --> 00:12:43.560
So we're getting an error there
because we need to let

00:12:43.560 --> 00:12:44.890
this class implement
that method.

00:12:44.890 --> 00:12:48.590
So we'll go ahead
and add that.

00:12:48.590 --> 00:12:53.200
And then, oops--

00:12:53.200 --> 00:12:55.460
scroll back.

00:12:55.460 --> 00:12:57.310
We need to add the
actual method.

00:12:57.310 --> 00:12:59.790
So I've got a little code here
I'm going to paste in from the

00:12:59.790 --> 00:13:04.780
snippet on my Location Change
handler and we'll fixed

00:13:04.780 --> 00:13:07.300
imports here.

00:13:07.300 --> 00:13:08.310
Zoom back in on it.

00:13:08.310 --> 00:13:11.330
And you can see, it's doing
Send My Location.

00:13:11.330 --> 00:13:16.280
And then we've got a little code
further down to do that.

00:13:16.280 --> 00:13:18.210
And it's not implemented yet,
so let's go ahead and

00:13:18.210 --> 00:13:20.370
implement this method as well.

00:13:25.560 --> 00:13:29.260
So to send our location to the
server, we're going to use the

00:13:29.260 --> 00:13:33.530
cloud's backend sample
code that's here.

00:13:33.530 --> 00:13:36.610
And it's really pretty
straightforward.

00:13:36.610 --> 00:13:39.760
We just create a generic entity,
that's the way the

00:13:39.760 --> 00:13:42.790
cloud, the Mobile Backend
Starter works, is it gives you

00:13:42.790 --> 00:13:45.270
generic cloud services that you
can send and receive these

00:13:45.270 --> 00:13:47.470
generic cloud entities.

00:13:47.470 --> 00:13:48.890
We're just creating a
new cloud entity.

00:13:48.890 --> 00:13:51.240
And we're making of
kind of Geek.

00:13:51.240 --> 00:13:53.430
This works really well with
the App Engine Data Store

00:13:53.430 --> 00:13:55.020
because it is schemaless.

00:13:55.020 --> 00:13:57.100
So you can create any
number of kinds and

00:13:57.100 --> 00:13:58.880
properties on the fly.

00:13:58.880 --> 00:14:01.510
That makes it actually it very
easy for us write this kind of

00:14:01.510 --> 00:14:03.720
application right now.

00:14:03.720 --> 00:14:05.250
So we'll put in a few things.

00:14:05.250 --> 00:14:06.380
Our interest is cloud.

00:14:06.380 --> 00:14:08.640
Our location is what we
just got from the

00:14:08.640 --> 00:14:10.520
Location Change Handler.

00:14:10.520 --> 00:14:14.190
And then we call
getcloudBackend.update, and

00:14:14.190 --> 00:14:18.580
this is one of the built-in
methods that's available to us

00:14:18.580 --> 00:14:20.580
as part of the Mobile
Backend Starter.

00:14:20.580 --> 00:14:22.300
And because in Android
everything should be

00:14:22.300 --> 00:14:25.940
asynchronous, we pass it a
Callback handler that will get

00:14:25.940 --> 00:14:28.170
called when the request
completes.

00:14:28.170 --> 00:14:30.210
And when the request completes,
then we draw a

00:14:30.210 --> 00:14:31.840
marker on the map.

00:14:31.840 --> 00:14:38.860
The reason getCloudBackend is
in red is because I need to

00:14:38.860 --> 00:14:44.630
let this activity extend Cloud
Backend activity now, instead

00:14:44.630 --> 00:14:45.880
of Fragment activity.

00:14:49.120 --> 00:14:50.830
So there we go.

00:14:50.830 --> 00:14:53.230
Now all those features
are available to me.

00:14:53.230 --> 00:14:57.140
You can look here and see that
method should be OK.

00:14:57.140 --> 00:15:00.010
So let's take this and
run it on the phone.

00:15:00.010 --> 00:15:01.440
It'll take just a second here.

00:15:01.440 --> 00:15:02.780
Let me get the phone
plugged in.

00:15:17.380 --> 00:15:17.860
OK.

00:15:17.860 --> 00:15:20.150
And a little trick I learned
just this morning actually, is

00:15:20.150 --> 00:15:23.510
that if you want to install an
app on your phone but not run

00:15:23.510 --> 00:15:26.220
it yet-- which I'm going to
do because of the ethernet

00:15:26.220 --> 00:15:27.880
situation here--

00:15:27.880 --> 00:15:32.280
you can just change your run
configuration and tell it to

00:15:32.280 --> 00:15:34.250
do nothing on launch.

00:15:34.250 --> 00:15:37.080
And that will build and install
the app on the phone,

00:15:37.080 --> 00:15:39.540
but it won't actually launch
the activity yet.

00:15:39.540 --> 00:15:42.260
So we're going to go ahead
and do that now.

00:15:42.260 --> 00:15:44.140
Run as Android application.

00:15:48.100 --> 00:15:49.160
See it's building.

00:15:49.160 --> 00:15:50.810
We'll wait for it to
come over here.

00:15:50.810 --> 00:15:53.150
And then we'll go plug the phone
into the ethernet and

00:15:53.150 --> 00:15:55.340
show the map on the camera.

00:15:55.340 --> 00:15:55.830
OK.

00:15:55.830 --> 00:15:59.214
It looks like it's
already there.

00:15:59.214 --> 00:16:00.464
I'll grab this.

00:16:03.530 --> 00:16:05.060
BRAD ABRAMS: Not that we're
paranoid about the network.

00:16:05.060 --> 00:16:06.100
DAVID CHANDLER: Yeah.

00:16:06.100 --> 00:16:10.570
These Galaxy Nexus phones have
the capability to do USB to

00:16:10.570 --> 00:16:14.780
ethernet, which works very
well for us here.

00:16:14.780 --> 00:16:16.370
So here is our app--

00:16:16.370 --> 00:16:18.200
comes up with our basic
map display.

00:16:18.200 --> 00:16:20.790
We have Location Services
available.

00:16:20.790 --> 00:16:23.240
And then when we touch that,
we should see that

00:16:23.240 --> 00:16:28.250
it will locate us.

00:16:28.250 --> 00:16:31.480
BRAD ABRAMS: You should see.

00:16:31.480 --> 00:16:32.943
DAVID CHANDLER: Very
interesting.

00:16:32.943 --> 00:16:36.770
It doesn't seem to be able to
find a location for us.

00:16:36.770 --> 00:16:40.935
Let's see if we scroll the map
over and zoom in a little bit.

00:16:45.660 --> 00:16:47.635
Well, something new
every demo.

00:16:47.635 --> 00:16:48.885
BRAD ABRAMS: Awesome.

00:16:51.740 --> 00:16:52.170
DAVID CHANDLER: OK.

00:16:52.170 --> 00:16:53.840
BRAD ABRAMS: So David's
going to debug that.

00:16:53.840 --> 00:16:54.500
DAVID CHANDLER: Yeah.

00:16:54.500 --> 00:16:57.150
I think, I think maybe not.

00:16:57.150 --> 00:16:57.690
BRAD ABRAMS: OK.

00:16:57.690 --> 00:16:58.950
DAVID CHANDLER: I think we'll
go to the next stage.

00:16:58.950 --> 00:16:59.211
BRAD ABRAMS: OK.

00:16:59.211 --> 00:16:59.300
Great.

00:16:59.300 --> 00:16:59.940
Yeah.

00:16:59.940 --> 00:17:02.050
Yeah, so David's going to
debug that while I go--

00:17:02.050 --> 00:17:04.849
so David is now theoretically
sending our

00:17:04.849 --> 00:17:06.890
location up to the server.

00:17:06.890 --> 00:17:09.770
DAVID CHANDLER: Yes.

00:17:09.770 --> 00:17:10.109
BRAD ABRAMS: Yeah.

00:17:10.109 --> 00:17:12.480
David is now sending our
location up to the server.

00:17:12.480 --> 00:17:16.079
And I have the digerati
following me all the time.

00:17:16.079 --> 00:17:18.900
And I think with our server
being open and my location

00:17:18.900 --> 00:17:22.210
being sent up there, that's
sort of a bad combination.

00:17:22.210 --> 00:17:24.970
So what we want to do is
lock down our server.

00:17:24.970 --> 00:17:28.410
We're going to lock it down so
only our Android client can

00:17:28.410 --> 00:17:29.870
call our server.

00:17:29.870 --> 00:17:32.520
Just because there's REST
endpoints out there, doesn't

00:17:32.520 --> 00:17:34.290
mean we want everybody
else to call them.

00:17:34.290 --> 00:17:38.790
We only want our client app
to call those endpoints.

00:17:38.790 --> 00:17:42.660
Now there's a number of options
for how to go do this.

00:17:42.660 --> 00:17:46.130
Some people have been put
secrets in their Android app--

00:17:46.130 --> 00:17:49.060
some token that they generate
that's in their app.

00:17:49.060 --> 00:17:51.530
And they send that up
on each request.

00:17:51.530 --> 00:17:55.080
But that has a obvious problem,
because how many of

00:17:55.080 --> 00:17:58.710
you have ever unzipped
an APK before?

00:17:58.710 --> 00:17:59.730
Right.

00:17:59.730 --> 00:18:01.400
And so if you can do
it, a lot of people

00:18:01.400 --> 00:18:02.480
could probably do that.

00:18:02.480 --> 00:18:04.440
And so those secrets
are discoverable.

00:18:04.440 --> 00:18:07.220
So rather than using some secret
that we put into the

00:18:07.220 --> 00:18:10.330
APK, we're going to use a
mechanism that's built right

00:18:10.330 --> 00:18:11.950
into the Android OS.

00:18:11.950 --> 00:18:16.130
And that's, all Android
apps are signed.

00:18:16.130 --> 00:18:18.190
There's a digital
signature that's

00:18:18.190 --> 00:18:21.470
cryptographically strong.

00:18:21.470 --> 00:18:23.740
And we're going to use
that signature.

00:18:23.740 --> 00:18:26.290
That signature is actually what
the Google Play Store

00:18:26.290 --> 00:18:28.250
uses when it is updating apps.

00:18:28.250 --> 00:18:31.160
When it's finding which app to
update, it uses that signature

00:18:31.160 --> 00:18:33.710
to ensure that you're
the same publisher.

00:18:33.710 --> 00:18:36.080
So what we're going
to do is use that

00:18:36.080 --> 00:18:37.200
signature on the client.

00:18:37.200 --> 00:18:40.550
And we're going to give that
a token generated from that

00:18:40.550 --> 00:18:42.100
signature up to the server.

00:18:42.100 --> 00:18:45.250
And that'll be sure
the requests only

00:18:45.250 --> 00:18:47.640
come from our app.

00:18:47.640 --> 00:18:51.510
So to do that, what we'll do
is come back over to the

00:18:51.510 --> 00:18:53.310
Mobile Backend Settings page.

00:18:53.310 --> 00:18:56.870
And then, it's asking for an
Android client ID that I've

00:18:56.870 --> 00:18:58.150
already filled in.

00:18:58.150 --> 00:19:03.170
So the way you get that Android
client ID is back in

00:19:03.170 --> 00:19:05.960
the cloud console, you
register a new app.

00:19:05.960 --> 00:19:07.340
So click on Register App.

00:19:07.340 --> 00:19:10.610
I've called it Android
client--

00:19:10.610 --> 00:19:12.660
client.

00:19:12.660 --> 00:19:17.570
And then you just give it the
package name and the SHA1

00:19:17.570 --> 00:19:18.250
fingerprint.

00:19:18.250 --> 00:19:21.540
The SHA1 fingerprint is the
interesting one to get.

00:19:21.540 --> 00:19:26.130
That you run the Keytool
command over your

00:19:26.130 --> 00:19:29.580
debug.keystore file if
you're in Debug mode.

00:19:29.580 --> 00:19:31.740
And that keystore file
is generated for you

00:19:31.740 --> 00:19:34.860
automatically by the
Android ADT.

00:19:34.860 --> 00:19:35.890
And it's in the--

00:19:35.890 --> 00:19:39.820
it's usually in your root
directory in dot Android.

00:19:39.820 --> 00:19:42.570
So anyway, we generate that.

00:19:42.570 --> 00:19:45.790
And then once we have that,
we have a client ID

00:19:45.790 --> 00:19:46.890
that's all wired up.

00:19:46.890 --> 00:19:50.110
So we just take that client
ID and hand it

00:19:50.110 --> 00:19:51.710
to the mobile backend.

00:19:51.710 --> 00:19:54.560
So that handles the
first step.

00:19:54.560 --> 00:20:01.350
The second step of this is, if
you noticed, we're actually

00:20:01.350 --> 00:20:04.230
using OAuth to do
this security.

00:20:04.230 --> 00:20:07.970
And OAuth is tried and true
technology, but somebody may

00:20:07.970 --> 00:20:11.310
associate OAuth with the OAuth
Consent Dialogue that you may

00:20:11.310 --> 00:20:15.190
have seen before, like when
you're trying to access say

00:20:15.190 --> 00:20:20.320
Google Plus data or Google Docs
on behalf of somebody.

00:20:20.320 --> 00:20:22.350
They'll get a prompt that says,
do you want to allow

00:20:22.350 --> 00:20:24.980
this app to access your
Google Docs data?

00:20:24.980 --> 00:20:27.230
That's a OAuth Consent screen.

00:20:27.230 --> 00:20:28.960
And that makes sense
in that scenario.

00:20:28.960 --> 00:20:32.910
But in our scenario, we have
the Geek Serendipity app on

00:20:32.910 --> 00:20:36.590
the client accessing the Geek
Serendipity Backend.

00:20:36.590 --> 00:20:38.160
That's not one where--

00:20:38.160 --> 00:20:40.910
the OAuth Consent screen
would be sort of silly.

00:20:40.910 --> 00:20:43.610
Do you want the frontend of this
app to be able to talk to

00:20:43.610 --> 00:20:45.320
its own backend?

00:20:45.320 --> 00:20:47.130
And that's not a choice
that we think is

00:20:47.130 --> 00:20:48.750
meaningful to users.

00:20:48.750 --> 00:20:53.230
And so what we do is, we can
suppress that screen so it

00:20:53.230 --> 00:20:56.740
doesn't get seen, if we know the
publisher is the same on

00:20:56.740 --> 00:20:58.910
the client and server
side of the app.

00:20:58.910 --> 00:21:03.200
If we know it's your backend and
your frontend, you don't

00:21:03.200 --> 00:21:04.900
need to see that screen.

00:21:04.900 --> 00:21:08.390
So the way we prove that it's
your backend and your frontend

00:21:08.390 --> 00:21:12.180
is we use a web client ID.

00:21:12.180 --> 00:21:15.250
And so you get the
web client ID--

00:21:15.250 --> 00:21:16.500
this is that--

00:21:19.910 --> 00:21:22.040
yeah, this is the Mobile
Backend that we created

00:21:22.040 --> 00:21:26.240
earlier for getting the Google
Cloud Messaging to work.

00:21:26.240 --> 00:21:28.170
And before we used
the server key.

00:21:28.170 --> 00:21:30.900
And now, we're going to use
the OAuth client ID.

00:21:30.900 --> 00:21:33.440
So we just grab this
OAuth client ID.

00:21:33.440 --> 00:21:36.380
And you put it in the second
field here for

00:21:36.380 --> 00:21:37.900
a Web Client ID.

00:21:37.900 --> 00:21:40.420
And then you also put it
in your Android app.

00:21:40.420 --> 00:21:42.170
So it needs to be in both.

00:21:42.170 --> 00:21:44.950
Now this is not a secret.

00:21:44.950 --> 00:21:48.690
Somebody could unpack your APK
and get that, and they still

00:21:48.690 --> 00:21:50.330
couldn't access your backend.

00:21:50.330 --> 00:21:54.340
It just proves that you're the
same user on the frontend and

00:21:54.340 --> 00:21:55.880
the backend.

00:21:55.880 --> 00:21:56.480
OK

00:21:56.480 --> 00:21:59.980
And then there's
one more step.

00:21:59.980 --> 00:22:03.920
So the last thing is very easy
and that is that because we're

00:22:03.920 --> 00:22:07.260
using Google authentication in
here, we have the same notion

00:22:07.260 --> 00:22:10.030
of who a user is on the
client and the server.

00:22:10.030 --> 00:22:12.150
That's built into the App Engine
framework and it's

00:22:12.150 --> 00:22:13.760
built in to Android.

00:22:13.760 --> 00:22:16.280
So it's a very seamless
experience.

00:22:16.280 --> 00:22:19.280
So I've have already loaded
that up on this phone, and

00:22:19.280 --> 00:22:21.590
let's switch over.

00:22:21.590 --> 00:22:24.550
So I loaded this app just a
minute ago onto this phone.

00:22:24.550 --> 00:22:27.350
And you can see now, when I run
the app, it's giving me a

00:22:27.350 --> 00:22:29.060
chance to login.

00:22:29.060 --> 00:22:31.120
And all of the--

00:22:31.120 --> 00:22:33.650
most Android phones
have [INAUDIBLE]

00:22:33.650 --> 00:22:36.360
IDs, Google IDs, associated
with them.

00:22:36.360 --> 00:22:38.740
So I'll just log in
with this one.

00:22:38.740 --> 00:22:41.340
And now what's happened
is, it's gone out and

00:22:41.340 --> 00:22:43.640
validated who I am.

00:22:43.640 --> 00:22:44.910
What's the secret?

00:22:44.910 --> 00:22:48.120
DAVID CHANDLER: The secret is in
order to know your location

00:22:48.120 --> 00:22:50.180
it needs one of two pieces
of information--

00:22:50.180 --> 00:22:50.960
either GPS--

00:22:50.960 --> 00:22:51.380
BRAD ABRAMS: Awesome.

00:22:51.380 --> 00:22:53.280
DAVID CHANDLER: --or Wi-Fi.

00:22:53.280 --> 00:22:57.030
We have Wi-Fi off, because
we had it hard wired.

00:22:57.030 --> 00:22:57.450
BRAD ABRAMS: Awesome

00:22:57.450 --> 00:22:59.590
DAVID CHANDLER: And now
we have Wi-Fi on.

00:22:59.590 --> 00:23:01.490
BRAD ABRAMS: Give it a whirl.

00:23:01.490 --> 00:23:02.970
[INTERPOSING VOICES]

00:23:02.970 --> 00:23:04.220
BRAD ABRAMS: Fantastic.

00:23:07.870 --> 00:23:13.110
So now it knows who I am and
where I am, and we're looking

00:23:13.110 --> 00:23:16.390
for an acknowledgement that
it knows who I am.

00:23:16.390 --> 00:23:21.280
And we can switch over and
see the data store.

00:23:21.280 --> 00:23:24.100
Is it going to work?

00:23:24.100 --> 00:23:24.800
OK.

00:23:24.800 --> 00:23:26.580
DAVID CHANDLER: I think so.

00:23:26.580 --> 00:23:28.310
BRAD ABRAMS: Give it
one more second.

00:23:28.310 --> 00:23:29.930
Let's switch over and see.

00:23:29.930 --> 00:23:31.792
I'll just run this.

00:23:31.792 --> 00:23:33.160
It's not there.

00:23:33.160 --> 00:23:35.040
DAVID CHANDLER: Let's
try closing the app.

00:23:35.040 --> 00:23:38.030
BRAD ABRAMS: So now
turn off Wi-Fi.

00:23:38.030 --> 00:23:40.040
We're done with-- we
know where we are.

00:23:40.040 --> 00:23:45.010
Now we can use the internet--
that we can use the hardwire.

00:23:45.010 --> 00:23:45.660
DAVID CHANDLER: No,
I don't think so.

00:23:45.660 --> 00:23:49.790
I think we want to close the
app and then come back in.

00:23:49.790 --> 00:23:50.230
BRAD ABRAMS: OK.

00:23:50.230 --> 00:23:51.160
DAVID CHANDLER: Sorry.

00:23:51.160 --> 00:23:52.760
BRAD ABRAMS: Just
one demo glitch.

00:23:52.760 --> 00:23:54.010
DAVID CHANDLER: Yeah.

00:23:56.400 --> 00:23:57.893
BRAD ABRAMS: We really need
the ethernet to be able to

00:23:57.893 --> 00:24:01.110
tell us where we are.

00:24:01.110 --> 00:24:04.090
So what we've done so far,
is we've built a

00:24:04.090 --> 00:24:05.430
backend on App Engine.

00:24:05.430 --> 00:24:09.010
Just click once to deploy
that backend.

00:24:09.010 --> 00:24:10.690
And we've stored our
state there.

00:24:10.690 --> 00:24:14.390
We've shown Push notification,
the easiest GCM wire-up I

00:24:14.390 --> 00:24:15.850
think you've ever seen.

00:24:15.850 --> 00:24:20.880
And we've showed using
a map and logging in.

00:24:20.880 --> 00:24:21.340
DAVID CHANDLER: Sorry.

00:24:21.340 --> 00:24:22.010
I did something wrong.

00:24:22.010 --> 00:24:22.380
BRAD ABRAMS: OK.

00:24:22.380 --> 00:24:22.830
All right.

00:24:22.830 --> 00:24:24.390
DAVID CHANDLER: We'll move
on to the next thing.

00:24:24.390 --> 00:24:25.750
BRAD ABRAMS: And so that
will now store your

00:24:25.750 --> 00:24:26.860
data up on the server.

00:24:26.860 --> 00:24:29.420
So you want to switch
the next one?

00:24:29.420 --> 00:24:30.500
DAVID CHANDLER: Yes.

00:24:30.500 --> 00:24:30.875
BRAD ABRAMS: OK.

00:24:30.875 --> 00:24:31.250
DAVID CHANDLER: OK.

00:24:31.250 --> 00:24:35.922
So now that we are sending our
location to the server.

00:24:35.922 --> 00:24:36.383
BRAD ABRAMS: Sorry.

00:24:36.383 --> 00:24:37.770
OK.

00:24:37.770 --> 00:24:39.860
DAVID CHANDLER: We'll go ahead
and proceed with the next

00:24:39.860 --> 00:24:42.890
stage, which is we want
to find out where all

00:24:42.890 --> 00:24:43.740
the other geeks are.

00:24:43.740 --> 00:24:46.350
So we want to query
the server.

00:24:46.350 --> 00:24:47.860
And if you could put
up the slide.

00:24:47.860 --> 00:24:48.960
BRAD ABRAMS: Oh,
I forgot that.

00:24:48.960 --> 00:24:50.028
DAVID CHANDLER: --the
Keynode slide.

00:24:50.028 --> 00:24:52.560
BRAD ABRAMS: OK.

00:24:52.560 --> 00:24:54.170
DAVID CHANDLER: I'll tell you
about the Continuous Query

00:24:54.170 --> 00:24:58.020
Capability that we're going
to use to do that.

00:24:58.020 --> 00:25:00.850
So this is a feature of the
Mobile Backend Starter project

00:25:00.850 --> 00:25:04.450
that uses several App Engine
features as well.

00:25:04.450 --> 00:25:06.360
There's a API [INAUDIBLE]
preview

00:25:06.360 --> 00:25:07.580
called Prospective Search.

00:25:07.580 --> 00:25:10.550
And what that does is, anytime
data comes in that matches the

00:25:10.550 --> 00:25:14.120
parameters of your query, then
App Engine will notify your

00:25:14.120 --> 00:25:17.810
app on the server side
that some matching

00:25:17.810 --> 00:25:19.270
data has been found.

00:25:19.270 --> 00:25:21.500
So we're going to use that
to our advantage here.

00:25:21.500 --> 00:25:25.370
Any time a new location update
gets posted, then our Apple

00:25:25.370 --> 00:25:26.980
get notified on the
server side.

00:25:26.980 --> 00:25:30.030
And the Mobile Backend Starter
project takes that further,

00:25:30.030 --> 00:25:33.690
and will send a GCM message
to our app running on

00:25:33.690 --> 00:25:35.260
the phone, as well.

00:25:35.260 --> 00:25:36.400
So the flow looks like this.

00:25:36.400 --> 00:25:40.150
In step one, a new location
update comes from the phone.

00:25:40.150 --> 00:25:41.990
It gets put in the server.

00:25:41.990 --> 00:25:45.990
In step two, the App Engine
Perspective Search API

00:25:45.990 --> 00:25:48.490
notifies the server side
part of our Mobile

00:25:48.490 --> 00:25:50.140
Backend Starter app.

00:25:50.140 --> 00:25:52.800
That sends a GCM message--

00:25:52.800 --> 00:25:56.800
Google Cloud Messaging-- to
the client in step three.

00:25:56.800 --> 00:26:01.700
Then in step four, we re-query
to get the latest data from

00:26:01.700 --> 00:26:02.810
the server.

00:26:02.810 --> 00:26:07.110
And then finally, step five, we
draw the markers on the map

00:26:07.110 --> 00:26:09.790
with that most recent data.

00:26:09.790 --> 00:26:13.340
So I'm going to go now write
the code that actually does

00:26:13.340 --> 00:26:14.960
this in our app.

00:26:14.960 --> 00:26:19.770
So we'll again take a look
into our Map activity.

00:26:19.770 --> 00:26:23.440
And the first thing we want
to do is write a query.

00:26:23.440 --> 00:26:25.850
I'm just going to stroll
down a little bit here.

00:26:25.850 --> 00:26:30.300
That will go out and get
the geek locations.

00:26:30.300 --> 00:26:34.440
So let me paste in
some code here--

00:26:34.440 --> 00:26:37.530
query geeks.

00:26:37.530 --> 00:26:41.270
And show you what
that looks like.

00:26:41.270 --> 00:26:44.100
All the capability that I just
described on that slide is

00:26:44.100 --> 00:26:47.130
called Continuous Queries, is
what we're calling it right

00:26:47.130 --> 00:26:48.590
now on this project.

00:26:48.590 --> 00:26:53.360
And so the first part of our
query is to write a handler

00:26:53.360 --> 00:26:55.420
that will receive the results.

00:26:55.420 --> 00:26:57.380
So we have a On Complete handler
and we're just going

00:26:57.380 --> 00:26:58.500
to draw markers.

00:26:58.500 --> 00:27:00.530
Simple enough.

00:27:00.530 --> 00:27:05.300
Then to actually register the
query, we call Get Cloud

00:27:05.300 --> 00:27:08.730
Backend, dot Clear
All Subscription.

00:27:08.730 --> 00:27:11.070
Now, the notion of a Continuous
Query, you can

00:27:11.070 --> 00:27:12.970
subscribe to queries
on the server.

00:27:12.970 --> 00:27:15.060
So we want to clear any existing
subscriptions, and

00:27:15.060 --> 00:27:16.860
then set up a new one.

00:27:16.860 --> 00:27:20.250
So we say New Cloud Query
for kind Geek.

00:27:20.250 --> 00:27:23.370
We're just going to get the top
50 geeks sorted in order

00:27:23.370 --> 00:27:25.800
of the most recent
location updates.

00:27:25.800 --> 00:27:28.810
And we're going to make the
scope future and past.

00:27:28.810 --> 00:27:31.510
So again, this is a feature of
the Mobile Backend Starter

00:27:31.510 --> 00:27:34.650
that lets you say, I want to be
notified of future matches

00:27:34.650 --> 00:27:37.240
to this query, as
well as present.

00:27:37.240 --> 00:27:39.520
And if you think about the
amount of code that you have

00:27:39.520 --> 00:27:42.860
to write to do that all
manually, setting up GCM,

00:27:42.860 --> 00:27:45.130
keeping track of this data,
it is actually a very nice

00:27:45.130 --> 00:27:46.800
convenience.

00:27:46.800 --> 00:27:49.720
And then we actually register
this query by calling

00:27:49.720 --> 00:27:51.700
getCloudBackend.list.

00:27:51.700 --> 00:27:54.860
And we pass it our query
and our handler.

00:27:54.860 --> 00:27:58.540
So the code that runs up here
in lines 72 and 73, the On

00:27:58.540 --> 00:28:01.610
Complete handler will get
invoked any time there's a new

00:28:01.610 --> 00:28:04.250
location update that gets
sent to the server.

00:28:04.250 --> 00:28:06.420
Then all the clients who are
subscribed to that query will

00:28:06.420 --> 00:28:08.760
get notified so they
can update their

00:28:08.760 --> 00:28:12.370
map displays as well.

00:28:12.370 --> 00:28:14.440
So we've made a query method.

00:28:14.440 --> 00:28:17.400
Now we actually need
to call this.

00:28:17.400 --> 00:28:18.770
And we only want to
call this query.

00:28:18.770 --> 00:28:21.560
Now we have authentication
turned on, it's going to

00:28:21.560 --> 00:28:24.670
enforce that at the
server side.

00:28:24.670 --> 00:28:28.510
So we only want to call it if
we're already authenticated.

00:28:28.510 --> 00:28:31.410
There's another method that's
useful to do that in our

00:28:31.410 --> 00:28:35.240
project called On Post Create.

00:28:35.240 --> 00:28:40.470
We can inherit this from the
Cloud Backend activity.

00:28:40.470 --> 00:28:44.920
And here's where we're going to
call our Query Geeks method

00:28:44.920 --> 00:28:46.990
to register our query--

00:28:46.990 --> 00:28:49.800
so only gets called after
we're authenticated.

00:28:49.800 --> 00:28:52.600
And then lastly, I just want
to remove my Draw Marker

00:28:52.600 --> 00:28:56.000
method, because now in our On
Complete handler, we're

00:28:56.000 --> 00:28:58.030
drawing all the markers.

00:28:58.030 --> 00:28:59.730
So that's the final
code for that.

00:28:59.730 --> 00:29:01.945
Let me go ahead and put
it on the phone.

00:29:07.595 --> 00:29:08.845
BRAD ABRAMS: You have
a suggestion?

00:29:19.690 --> 00:29:19.950
DAVID CHANDLER: Right.

00:29:19.950 --> 00:29:25.130
We'll do run as Android app
again to get it here.

00:29:27.870 --> 00:29:30.530
And once it appears, I will
cross my fingers, walk over

00:29:30.530 --> 00:29:32.385
there, stick it under
the camera.

00:29:32.385 --> 00:29:35.730
Wi-Fi's still on on this one.

00:29:35.730 --> 00:29:37.000
You'll need Wi-Fi on
for the second part

00:29:37.000 --> 00:29:38.250
of the demo as well.

00:29:41.940 --> 00:29:42.240
OK.

00:29:42.240 --> 00:29:43.190
So here we go.

00:29:43.190 --> 00:29:44.180
Going to give it a whirl here.

00:29:44.180 --> 00:29:48.210
I'll switch back to
the camera view.

00:29:48.210 --> 00:29:51.710
And we'll try the app.

00:29:51.710 --> 00:29:54.380
Authentication is enabled now,
so I have to log in.

00:29:57.270 --> 00:29:58.640
The map should be coming up.

00:29:58.640 --> 00:29:59.490
You know what I didn't do.

00:29:59.490 --> 00:30:00.940
I didn't plug in the
ethernet, but Wi-Fi

00:30:00.940 --> 00:30:02.010
appears to be working.

00:30:02.010 --> 00:30:02.530
Yay.

00:30:02.530 --> 00:30:03.630
BRAD ABRAMS: Shoot.

00:30:03.630 --> 00:30:06.200
DAVID CHANDLER: And
we'll locate.

00:30:06.200 --> 00:30:06.510
OK.

00:30:06.510 --> 00:30:08.160
And there is a marker--

00:30:08.160 --> 00:30:10.410
actually two markers,
which is exciting.

00:30:10.410 --> 00:30:11.280
Have you already launched
the app?

00:30:11.280 --> 00:30:11.990
BRAD ABRAMS: No.

00:30:11.990 --> 00:30:12.970
DAVID CHANDLER: OK.

00:30:12.970 --> 00:30:14.140
Well.

00:30:14.140 --> 00:30:15.200
BRAD ABRAMS: You may
see one more.

00:30:15.200 --> 00:30:16.190
Let's see.

00:30:16.190 --> 00:30:17.880
DAVID CHANDLER: In the advanced
section of this

00:30:17.880 --> 00:30:19.885
presentation, we will discuss
how the clone ourselves--

00:30:22.410 --> 00:30:24.980
or at least, our Android
devices.

00:30:24.980 --> 00:30:26.350
Yep, I saw it appear.

00:30:26.350 --> 00:30:27.150
BRAD ABRAMS: Did you
see a third one?

00:30:27.150 --> 00:30:28.810
DAVID CHANDLER: Yes, I saw
the third one appear as

00:30:28.810 --> 00:30:30.330
Brad did the demo.

00:30:30.330 --> 00:30:32.010
You remember, there
were two, right.

00:30:32.010 --> 00:30:33.740
Nothing up my sleeve.

00:30:33.740 --> 00:30:34.970
A third marker appeared.

00:30:34.970 --> 00:30:38.860
That is the Continuous Query in
action when he ran the app.

00:30:38.860 --> 00:30:40.110
Thank you very much.

00:30:44.889 --> 00:30:46.520
BRAD ABRAMS: So, did you
want to do that slide?

00:30:46.520 --> 00:30:48.250
DAVID CHANDLER: Yes, let
me get that up here.

00:30:57.670 --> 00:30:58.810
I'll switch back to mine.

00:30:58.810 --> 00:31:01.330
I wanted to say a little bit
more about a couple of things.

00:31:01.330 --> 00:31:03.590
First, the Mobile Backend
Starter project is brought to

00:31:03.590 --> 00:31:06.370
you by a team at Google called
the Cloud Solutions Team.

00:31:06.370 --> 00:31:10.130
And I wanted to acknowledge
the engineers there--

00:31:10.130 --> 00:31:12.300
I'll be calling Greg, because no
one can pronounce his name

00:31:12.300 --> 00:31:16.330
properly, Kaz Sato,
and Jenny Lo.

00:31:16.330 --> 00:31:19.690
The Cloud Solutions Team is
involved with helping App

00:31:19.690 --> 00:31:21.740
Engine customers figure out
the optimum technical

00:31:21.740 --> 00:31:23.910
solutions to run--

00:31:23.910 --> 00:31:25.960
cloud customers,
more generally.

00:31:25.960 --> 00:31:29.290
And they also publish best
practices white papers you can

00:31:29.290 --> 00:31:33.860
find them at cloud.google.com
under the Solutions Section.

00:31:33.860 --> 00:31:37.420
I wanted to mention a little bit
more async tasks, as well

00:31:37.420 --> 00:31:42.900
because part of the magic that
the Mobile Backend Starter is

00:31:42.900 --> 00:31:47.890
doing for you is to run
off the UI thread.

00:31:47.890 --> 00:31:50.870
And Android is behind
the scenes.

00:31:50.870 --> 00:31:54.830
That Cloud Backend activity is
actually creating a new thread

00:31:54.830 --> 00:31:56.590
for the network request.

00:31:56.590 --> 00:31:57.420
But that's all.

00:31:57.420 --> 00:31:58.530
You're insulated from that.

00:31:58.530 --> 00:32:00.980
You don't have to
worry about it.

00:32:00.980 --> 00:32:03.290
Even better would be to use
services on the Android

00:32:03.290 --> 00:32:05.140
platform, and that's something
that we're looking at

00:32:05.140 --> 00:32:07.892
extending that project to do.

00:32:07.892 --> 00:32:08.260
BRAD ABRAMS: OK.

00:32:08.260 --> 00:32:09.620
Thank you.

00:32:09.620 --> 00:32:13.880
So I think now we have a very
full-featured app, and its

00:32:13.880 --> 00:32:14.730
cloud connected.

00:32:14.730 --> 00:32:16.270
I think the Mobile Backend
Starter has

00:32:16.270 --> 00:32:17.180
served us really well.

00:32:17.180 --> 00:32:20.150
We haven't had to do any
server code yet.

00:32:20.150 --> 00:32:22.900
But I'm a server guy.

00:32:22.900 --> 00:32:24.730
And I was talking earlier,
I think there's a few App

00:32:24.730 --> 00:32:27.390
Engine-- who's sort of an
App Engine guy here?

00:32:27.390 --> 00:32:31.250
Are you guys missing writing
code on the server?

00:32:31.250 --> 00:32:32.010
I know I am.

00:32:32.010 --> 00:32:35.150
So I constructed a reason
to have to write

00:32:35.150 --> 00:32:36.600
some code on the server.

00:32:36.600 --> 00:32:39.770
So both David and I are
little bit data geeks.

00:32:39.770 --> 00:32:42.950
Being at Google, we love
processing lots of data.

00:32:42.950 --> 00:32:46.470
And so we want to log everything
about the user

00:32:46.470 --> 00:32:50.510
experience on this app-- how do
people use, how they pan,

00:32:50.510 --> 00:32:53.290
what do they do on the app--
so that we can do data

00:32:53.290 --> 00:32:56.160
processing on it, and learn how
to make the app better.

00:32:56.160 --> 00:32:59.440
But the Mobile Backend doesn't
have a logging mechanism--

00:32:59.440 --> 00:33:02.230
doesn't have any way to store
stuff in logs yet, although

00:33:02.230 --> 00:33:04.850
they will probably add it
right after this talk.

00:33:04.850 --> 00:33:06.540
But for now anyway,
it's an excuse to

00:33:06.540 --> 00:33:07.780
write some server code.

00:33:07.780 --> 00:33:11.920
So we're going to write our own
custom cloud endpoint that

00:33:11.920 --> 00:33:14.250
is part of this Backend
Starter.

00:33:14.250 --> 00:33:16.780
And then we're going to call
that endpoint from a Client

00:33:16.780 --> 00:33:18.490
Library in the client.

00:33:18.490 --> 00:33:22.370
So let me show you
how this goes.

00:33:22.370 --> 00:33:25.280
So what I've done is I've gone
out to GitHub and I've

00:33:25.280 --> 00:33:28.560
downloaded the source code for
the Mobile Backend Starter.

00:33:28.560 --> 00:33:31.510
As we've said, everything
in this thing, the

00:33:31.510 --> 00:33:32.590
source code's available.

00:33:32.590 --> 00:33:35.050
So if you don't like something
Greg, did you can go and

00:33:35.050 --> 00:33:37.680
change that.

00:33:37.680 --> 00:33:40.550
And so what I'm going to
do, I've got that.

00:33:40.550 --> 00:33:45.360
And I'm just going to drag in an
end point I wrote earlier.

00:33:45.360 --> 00:33:48.410
And this is the world's simplest
cloud endpoint.

00:33:48.410 --> 00:33:51.790
So it's got that @API attribute
that indicates to

00:33:51.790 --> 00:33:55.810
App Engine at that we're going
to expose this is a REST API.

00:33:55.810 --> 00:34:00.910
And then right here, we're
seeing where we are defining

00:34:00.910 --> 00:34:04.140
what its name will be in the
Client Library and what the

00:34:04.140 --> 00:34:05.700
REST interface should be.

00:34:05.700 --> 00:34:07.250
And then, it's very simple.

00:34:07.250 --> 00:34:11.530
We just call log.info and put
that in the App Engine logs.

00:34:11.530 --> 00:34:15.620
So I've already deployed this a
little earlier this morning.

00:34:15.620 --> 00:34:19.550
And what's very cool about
Cloud Endpoints is that

00:34:19.550 --> 00:34:21.810
there's this neat URL.

00:34:21.810 --> 00:34:28.570
If you go to _ah/api/explorer,
then you can actually view the

00:34:28.570 --> 00:34:31.280
API Explorer for
your interface.

00:34:31.280 --> 00:34:34.429
So what we saw earlier was
the Mobile Backend.

00:34:34.429 --> 00:34:38.230
And now I've just added a new
one called Cloud Login API.

00:34:38.230 --> 00:34:41.440
And that's got the same name I
gave it in the source code.

00:34:41.440 --> 00:34:49.219
And now if I "hi from the web
app," then this goes out and

00:34:49.219 --> 00:34:51.810
it calls my interface.

00:34:51.810 --> 00:34:54.360
And if I look at the App Engine
logs for this, you can

00:34:54.360 --> 00:34:58.220
see there is that log, "hi from
the web." So, very nice

00:34:58.220 --> 00:35:00.720
experience there.

00:35:00.720 --> 00:35:03.140
Now what we want to
do is called this

00:35:03.140 --> 00:35:04.730
from our client app.

00:35:04.730 --> 00:35:07.930
So in order to do that, what
I need to do is generate a

00:35:07.930 --> 00:35:09.180
Client Library.

00:35:09.180 --> 00:35:12.100
So I'm just going to right click
on this and find the

00:35:12.100 --> 00:35:15.540
Generate Cloud Endpoints
Client Library feature.

00:35:15.540 --> 00:35:17.770
And this is going to go out.

00:35:17.770 --> 00:35:19.550
It's, going to take the
discovery document, the

00:35:19.550 --> 00:35:23.550
description of that interface,
go out to the web to a service

00:35:23.550 --> 00:35:26.390
we provide that will generate
a strongly-typed

00:35:26.390 --> 00:35:29.800
Android-optimized Client Library
for our service, and

00:35:29.800 --> 00:35:33.570
then download it, and put it
right here in this project.

00:35:33.570 --> 00:35:34.130
There it is--

00:35:34.130 --> 00:35:35.130
Client Logging.

00:35:35.130 --> 00:35:36.580
DAVID CHANDLER: That
functionality, by the way, is

00:35:36.580 --> 00:35:38.550
provided by the Google
plug-in for Eclipse.

00:35:38.550 --> 00:35:40.480
BRAD ABRAMS: That's right.

00:35:40.480 --> 00:35:45.380
And then, we just need to copy
it over, very simple.

00:35:45.380 --> 00:35:48.370
I'm just going to
drag this over.

00:35:48.370 --> 00:35:51.580
And now we need to add it to our
Build Path, so we're going

00:35:51.580 --> 00:35:56.120
to right click on this and
use a source folder.

00:35:56.120 --> 00:35:58.330
So now this to be part
of the build.

00:35:58.330 --> 00:36:02.830
And then, I just have a very
simple bit of source code to

00:36:02.830 --> 00:36:06.215
add to the client to actually
do the calls.

00:36:09.810 --> 00:36:13.060
And let me show you what
this looks like.

00:36:13.060 --> 00:36:15.220
So this is my Cloud
Log function.

00:36:15.220 --> 00:36:16.530
It's very simple.

00:36:16.530 --> 00:36:19.300
In the constructor, we take the
unique ID of the Android

00:36:19.300 --> 00:36:20.550
app that we're using.

00:36:20.550 --> 00:36:24.290
So we can tell in the logs
what's happening where.

00:36:24.290 --> 00:36:28.760
And then in a thread, I
am going and doing the

00:36:28.760 --> 00:36:30.980
asynchronous call up
to the server.

00:36:30.980 --> 00:36:36.470
And that's right here--
service.logs.log, passing that

00:36:36.470 --> 00:36:38.330
message, and doing execute.

00:36:38.330 --> 00:36:40.380
In just a couple more-- if we
had a couple of minutes--

00:36:40.380 --> 00:36:43.290
I would wire this up into the
UI, but it's very simple.

00:36:43.290 --> 00:36:47.200
You just call this Log method
and we do that request each

00:36:47.200 --> 00:36:49.050
time up to the server.

00:36:49.050 --> 00:36:52.600
You might want to do batching,
but for the demo to be snappy,

00:36:52.600 --> 00:36:55.310
I decided not to.

00:36:55.310 --> 00:36:57.710
There's nothing really to see
on here, but I have this on

00:36:57.710 --> 00:37:00.570
the phone and I'm just going
to pan around a little bit,

00:37:00.570 --> 00:37:04.260
generate some log data
hopefully, if

00:37:04.260 --> 00:37:05.920
the connections working.

00:37:05.920 --> 00:37:11.380
Then if I come back to my logs,
I should see new logs.

00:37:11.380 --> 00:37:15.560
And we do in fact, see logs
from client, right,

00:37:15.560 --> 00:37:16.860
with a unique ID.

00:37:16.860 --> 00:37:19.850
And this is for example,
on my location changed.

00:37:19.850 --> 00:37:25.060
So we've shown you how to add
custom logging to the custom

00:37:25.060 --> 00:37:28.090
endpoints to your Mobile
Backend Starter.

00:37:28.090 --> 00:37:31.640
So with, that I think we're
pretty much done.

00:37:31.640 --> 00:37:31.995
Let's--

00:37:31.995 --> 00:37:32.670
DAVID CHANDLER: OK.

00:37:32.670 --> 00:37:33.920
BRAD ABRAMS: --wrap up.

00:37:36.320 --> 00:37:37.030
DAVID CHANDLER: All right.

00:37:37.030 --> 00:37:39.105
Everything that we've done
today is available.

00:37:39.105 --> 00:37:42.210
The Mobile Backend Starter, of
course, you can get to off

00:37:42.210 --> 00:37:44.460
cloud.google.com in
the Cloud Console,

00:37:44.460 --> 00:37:45.820
as Brad showed earlier.

00:37:45.820 --> 00:37:49.230
The demo code is going to
be posted soon, as well.

00:37:49.230 --> 00:37:52.170
And we also created a little
more refined version of the

00:37:52.170 --> 00:37:54.870
app called Geek Serendipity,
which you can download in the

00:37:54.870 --> 00:37:56.030
Play Store.

00:37:56.030 --> 00:37:58.450
I may drop that on the camera
real quick here, just so you

00:37:58.450 --> 00:38:00.820
can see it in operation.

00:38:00.820 --> 00:38:03.510
We sent it out the other
day and allowed a few

00:38:03.510 --> 00:38:07.310
people get in on it.

00:38:07.310 --> 00:38:11.180
So you can see, it'll just put
markers on the map for you,

00:38:11.180 --> 00:38:16.100
showing different types
of geeks in the area.

00:38:16.100 --> 00:38:19.130
So we hope you enjoy using the
Mobile Backend Starter.

00:38:19.130 --> 00:38:21.200
And we have one minute
and a half left.

00:38:21.200 --> 00:38:24.570
If there's a quick question,
we could take that.

00:38:24.570 --> 00:38:26.398
Yes, right here.

00:38:26.398 --> 00:38:27.832
AUDIENCE: Do you need
to inherit from the

00:38:27.832 --> 00:38:29.744
Cloud Backend activity?

00:38:29.744 --> 00:38:31.420
DAVID CHANDLER: Do You need
to inherit from the

00:38:31.420 --> 00:38:32.790
Cloud Backend activity?

00:38:32.790 --> 00:38:35.360
Currently, yes.

00:38:35.360 --> 00:38:35.740
Yes.

00:38:35.740 --> 00:38:36.990
AUDIENCE: [INAUDIBLE].

00:38:41.860 --> 00:38:44.400
DAVID CHANDLER: Yes, we are
looking at moving it into a

00:38:44.400 --> 00:38:46.760
fragment or otherwise
abstracting that capability,

00:38:46.760 --> 00:38:51.340
so that you don't
have to extend.

00:38:51.340 --> 00:38:52.468
Yes, behind you.

00:38:52.468 --> 00:38:53.613
FEMALE SPEAKER: There's
a microphone right

00:38:53.613 --> 00:38:54.760
in the center aisle.

00:38:54.760 --> 00:38:55.120
DAVID CHANDLER: OK.

00:38:55.120 --> 00:38:56.440
Yeah, please step to
the microphone.

00:38:56.440 --> 00:38:56.730
Thank you.

00:38:56.730 --> 00:38:57.052
AUDIENCE: OK.

00:38:57.052 --> 00:39:02.043
So What would be the difference
between using that

00:39:02.043 --> 00:39:06.890
Cloud Messaging and web sockets
or Channel APIs?

00:39:06.890 --> 00:39:08.980
DAVID CHANDLER: What would be
the difference between using

00:39:08.980 --> 00:39:12.046
Google Cloud Messaging, web
sockets, or other APIs?

00:39:12.046 --> 00:39:12.920
AUDIENCE: Channel APIs.

00:39:12.920 --> 00:39:14.045
DAVID CHANDLER: Or
a Channel API?

00:39:14.045 --> 00:39:15.460
OK.

00:39:15.460 --> 00:39:19.730
Google Cloud Messaging is really
optimized for phone use

00:39:19.730 --> 00:39:22.500
because it'll send the
updates over the air.

00:39:22.500 --> 00:39:28.570
It's written in such a way
to be battery efficient.

00:39:28.570 --> 00:39:30.580
And it is a true
Push mechanism.

00:39:30.580 --> 00:39:35.040
Some of those others maintain
long-running connections.

00:39:35.040 --> 00:39:37.530
I'm not sure they're designed
as much for Android,

00:39:37.530 --> 00:39:38.880
specifically.

00:39:38.880 --> 00:39:41.510
So I think Google Cloud
Messaging would be the most

00:39:41.510 --> 00:39:43.330
battery efficient.

00:39:43.330 --> 00:39:44.340
BRAD ABRAMS: I think
we're out of time.

00:39:44.340 --> 00:39:45.950
So thank you very much.

00:39:45.950 --> 00:39:46.250
Appreciate it.

00:39:46.250 --> 00:39:47.500
DAVID CHANDLER: Thank you.

