WEBVTT
Kind: captions
Language: en

00:00:08.928 --> 00:00:09.930
PENG YING: Hi.

00:00:09.930 --> 00:00:11.810
Welcome to Google
Developers Live.

00:00:11.810 --> 00:00:12.730
My name is Peng.

00:00:12.730 --> 00:00:15.200
And with me today is
my colleague, Maru.

00:00:15.200 --> 00:00:15.940
MARU AHUES: Hi.

00:00:15.940 --> 00:00:16.814
PENG YING: Hey, Maru.

00:00:16.814 --> 00:00:19.420
Today we're talking about
the underlying concepts

00:00:19.420 --> 00:00:23.540
of the Wallet Objects API, and
how everything works together

00:00:23.540 --> 00:00:29.170
to give you the experience that
you see within the Wallet app.

00:00:29.170 --> 00:00:31.640
Specifically, we're
going to be talking about

00:00:31.640 --> 00:00:34.180
how data is stored
and represented,

00:00:34.180 --> 00:00:38.150
and then how we can route this
data into the UI that you see.

00:00:38.150 --> 00:00:41.700
Then we're going to talk about
how to insert and manipulate

00:00:41.700 --> 00:00:44.800
this data using the
Wallet Objects APIs.

00:00:44.800 --> 00:00:48.850
So first, to start off, let's
go over some of the concepts.

00:00:48.850 --> 00:00:51.090
Here, what you
see is an overview

00:00:51.090 --> 00:00:55.060
of the relationship
between templates, classes,

00:00:55.060 --> 00:00:56.900
and objects.

00:00:56.900 --> 00:01:03.890
Basically, classes and objects
define the data for a user.

00:01:03.890 --> 00:01:06.720
Objects inherit
and extend the data

00:01:06.720 --> 00:01:08.740
that's provided
within the class.

00:01:08.740 --> 00:01:12.220
And then templates define
how to take this data that's

00:01:12.220 --> 00:01:14.830
been populated with the
class and object, and then

00:01:14.830 --> 00:01:17.530
render it in the UI.

00:01:17.530 --> 00:01:20.950
So users are then
associated with this object,

00:01:20.950 --> 00:01:26.380
and that's how users see
it within the Wallet app.

00:01:26.380 --> 00:01:29.290
So how do we define templates?

00:01:29.290 --> 00:01:31.060
Well, the templates
to use are actually

00:01:31.060 --> 00:01:33.790
defined within the class.

00:01:33.790 --> 00:01:35.620
Here, what you see
is that there's

00:01:35.620 --> 00:01:38.060
a renderSpecs field
within the class, which

00:01:38.060 --> 00:01:40.330
is an array that
defines the views.

00:01:40.330 --> 00:01:42.780
There's two different
views that we care about.

00:01:42.780 --> 00:01:44.560
The first one is the list view.

00:01:44.560 --> 00:01:47.890
Now the list view is where
you see all of the objects

00:01:47.890 --> 00:01:50.406
that a user has stored.

00:01:50.406 --> 00:01:51.780
In this list view,
we're defining

00:01:51.780 --> 00:01:55.520
to use the template
loyaltyCard1_list.

00:01:55.520 --> 00:01:57.440
The second view that
we're concerned about

00:01:57.440 --> 00:01:59.050
is the expanded view.

00:01:59.050 --> 00:02:02.110
And the expanded view is when
a user clicks into the Wallet

00:02:02.110 --> 00:02:06.610
Objects to find the details
of that Wallet Objects.

00:02:06.610 --> 00:02:09.509
Here, for the details page
with our expanded view,

00:02:09.509 --> 00:02:14.380
we've selected the
loyaltyCard1_expanded template.

00:02:14.380 --> 00:02:16.955
We have a few templates
that are available now.

00:02:16.955 --> 00:02:19.080
And we're working on
releasing additional templates

00:02:19.080 --> 00:02:20.030
in the future.

00:02:20.030 --> 00:02:24.190
So to find the latest, be sure
to check our documentation.

00:02:24.190 --> 00:02:26.650
In this specific template
that we're showing right now,

00:02:26.650 --> 00:02:30.940
we're defining the mapping
between the JSON data

00:02:30.940 --> 00:02:33.320
and where it will be displayed.

00:02:33.320 --> 00:02:35.305
For example, class,
that program logo

00:02:35.305 --> 00:02:37.550
will be displayed
in the top left.

00:02:37.550 --> 00:02:40.670
And program name will be
displayed in the header.

00:02:40.670 --> 00:02:43.080
In the field name definitions
that you see here,

00:02:43.080 --> 00:02:45.810
the class prefix
indicates that it's

00:02:45.810 --> 00:02:47.940
a field that's defined
within the class.

00:02:47.940 --> 00:02:50.410
And optic prefix
indicates that it's

00:02:50.410 --> 00:02:52.880
a field defined
within the objects.

00:02:52.880 --> 00:02:54.630
And a star indicates
that it can be

00:02:54.630 --> 00:02:56.480
from either the
class or the object

00:02:56.480 --> 00:02:58.711
because, as we stated,
earlier, the object inherits

00:02:58.711 --> 00:02:59.335
from the class.

00:02:59.335 --> 00:03:01.570
So you can have both.

00:03:01.570 --> 00:03:05.100
Now let's dive into
the stored data.

00:03:05.100 --> 00:03:07.090
A Wallet Objects class,
as we said earlier,

00:03:07.090 --> 00:03:11.790
contains the common data
for all users of a vertical.

00:03:11.790 --> 00:03:14.050
For example, in
the Loyalty Class,

00:03:14.050 --> 00:03:16.910
we could contain common
data such as the program

00:03:16.910 --> 00:03:19.670
image, colors,
the program names.

00:03:19.670 --> 00:03:23.470
And the labels are common among
all users of that vertical

00:03:23.470 --> 00:03:25.520
or of that Loyalty Class.

00:03:25.520 --> 00:03:28.510
For an Offer, we can
store common information

00:03:28.510 --> 00:03:33.220
such as maybe the merchant, the
fine print, the details, maybe

00:03:33.220 --> 00:03:35.780
an image as well.

00:03:35.780 --> 00:03:40.050
So the data is defined as a
JSON object, as we'll see now.

00:03:40.050 --> 00:03:42.700
Here, we have an example
class from Belly.

00:03:42.700 --> 00:03:45.190
Within this class, we're
defining all the content

00:03:45.190 --> 00:03:48.140
that's common to all users.

00:03:48.140 --> 00:03:52.310
Here we have some common
fields, such as the issuer name,

00:03:52.310 --> 00:03:56.240
the unique ID, the program
name, the homepage.

00:03:56.240 --> 00:03:59.010
Maybe you could even add things
such as a customer service

00:03:59.010 --> 00:04:01.650
number.

00:04:01.650 --> 00:04:04.280
We're also defining the
templates I want to use.

00:04:04.280 --> 00:04:08.050
Here you see the renderSpecs
field defined as an array.

00:04:08.050 --> 00:04:09.610
Just like we've
shown earlier, we're

00:04:09.610 --> 00:04:13.290
using the
loyaltyCard1_list template

00:04:13.290 --> 00:04:16.980
and the loyaltyCard1_expanded
template.

00:04:16.980 --> 00:04:21.355
On the right, we see what
the list view templates would

00:04:21.355 --> 00:04:22.980
look like, and what
the list view looks

00:04:22.980 --> 00:04:26.560
like when you have a few objects
saved within a loyalty account

00:04:26.560 --> 00:04:29.830
or within a Wallet
Objects account.

00:04:29.830 --> 00:04:32.790
Wallet Objects contain
information specific

00:04:32.790 --> 00:04:35.250
to each individual user.

00:04:35.250 --> 00:04:39.670
For Loyalty, it could be
information such as the member

00:04:39.670 --> 00:04:44.670
ID, the member name,
their barcodes,

00:04:44.670 --> 00:04:47.430
or some personal messages.

00:04:47.430 --> 00:04:50.450
For Offers, what you can do
is if you have a personalized

00:04:50.450 --> 00:04:52.900
offer, it could be
unique information

00:04:52.900 --> 00:04:56.200
such as the barcode itself.

00:04:56.200 --> 00:05:00.820
Objects information is also
represented as a JSON objects.

00:05:00.820 --> 00:05:04.300
In this example, we're
defining the user-specific data

00:05:04.300 --> 00:05:07.460
for a Belly card that
we showed in the class.

00:05:07.460 --> 00:05:10.270
And in this case, we
have user-specific data

00:05:10.270 --> 00:05:14.490
such as the account ID, the
username, the barcodes, points,

00:05:14.490 --> 00:05:16.280
and some other fields.

00:05:16.280 --> 00:05:19.330
On the right is an example
of the expanded view.

00:05:19.330 --> 00:05:22.537
And in this view what we've done
is we've taken the class data

00:05:22.537 --> 00:05:23.870
and we've taken the object data.

00:05:23.870 --> 00:05:25.669
We've merged those two together.

00:05:25.669 --> 00:05:27.960
And now we're using a template
to render it and show it

00:05:27.960 --> 00:05:30.740
within the Wallet app.

00:05:30.740 --> 00:05:34.400
So now that we've kind of
discussed how data is formatted

00:05:34.400 --> 00:05:37.350
and how it's rendered,
Maru will tell you

00:05:37.350 --> 00:05:40.710
how to insert and
manipulate this data.

00:05:40.710 --> 00:05:42.080
MARU AHUES: Thank you, Peng.

00:05:42.080 --> 00:05:43.690
So now let's look
at ways that we

00:05:43.690 --> 00:05:47.820
can insert classes and objects
into our Google Wallet app.

00:05:47.820 --> 00:05:50.940
The first thing we can look
at is our RESTful APIs.

00:05:50.940 --> 00:05:57.190
So we provide RESTful APIs to
insert, update, add messages,

00:05:57.190 --> 00:06:00.190
and get your
objects and classes.

00:06:00.190 --> 00:06:02.480
If you look at our
slide here, you'll

00:06:02.480 --> 00:06:07.550
see that we have a URI to post
and insert a new Loyalty Class.

00:06:07.550 --> 00:06:10.370
It looks very similar
for our Offer Class.

00:06:10.370 --> 00:06:12.520
So the only thing
that's changing here

00:06:12.520 --> 00:06:15.820
is the type of object
that we'll be inserting.

00:06:15.820 --> 00:06:18.490
The same when we
try to do an update.

00:06:18.490 --> 00:06:20.980
Then we just need
to put to this URI,

00:06:20.980 --> 00:06:22.760
and then send the
resource ID, which

00:06:22.760 --> 00:06:26.605
is the unique identifier
for the class in this case.

00:06:29.160 --> 00:06:35.140
On the next slide,
we have the URIs

00:06:35.140 --> 00:06:37.610
to get and update an object.

00:06:37.610 --> 00:06:41.360
So from here you can see we're
getting the object, the Loyalty

00:06:41.360 --> 00:06:43.800
Object, with a specific
ID which is also

00:06:43.800 --> 00:06:48.820
unique in the system for that
merchant, for your merchant.

00:06:48.820 --> 00:06:52.240
And also the URI to
update an object.

00:06:52.240 --> 00:06:54.910
The same works for
offers, and for loyalties,

00:06:54.910 --> 00:06:56.150
and for all our verticals.

00:06:59.620 --> 00:07:02.560
What happens when we want
to insert a new object?

00:07:02.560 --> 00:07:05.540
Objects can't be inserted
using the RESTful API,

00:07:05.540 --> 00:07:07.630
so you have two
options to do that.

00:07:07.630 --> 00:07:11.400
The first one will be using
the Save to Wallet button.

00:07:11.400 --> 00:07:15.840
And for this, the consumer
will click on your Save

00:07:15.840 --> 00:07:18.490
to Wallet button on
the web, and then that

00:07:18.490 --> 00:07:21.680
will insert the object into
their Google Wallet app.

00:07:21.680 --> 00:07:23.880
Or using the
Webservice API, which

00:07:23.880 --> 00:07:26.290
only works right
now for loyalty.

00:07:26.290 --> 00:07:28.260
And the way that we
use it is that when

00:07:28.260 --> 00:07:31.370
you go into the Google
Wallet app and the member

00:07:31.370 --> 00:07:35.080
clicks on I'm a member or I
want to join your program,

00:07:35.080 --> 00:07:38.254
then that will call
your Webservice API.

00:07:38.254 --> 00:07:38.920
PENG YING: Yeah.

00:07:38.920 --> 00:07:43.300
And right now, the reason that
we don't offer saving objects

00:07:43.300 --> 00:07:46.000
through the REST API is
because that these objects

00:07:46.000 --> 00:07:48.650
need to be associated with
a Google user account.

00:07:48.650 --> 00:07:52.080
And if you were just to
insert using REST with OAuth,

00:07:52.080 --> 00:07:54.700
there's no way to
do that association.

00:07:54.700 --> 00:07:57.140
So right now, it
needs, just like Maru

00:07:57.140 --> 00:08:00.790
said, the Save to Wallet
or the Webservice API.

00:08:00.790 --> 00:08:02.030
MARU AHUES: Great.

00:08:02.030 --> 00:08:05.800
So now that we looked at
the list of the RESTful APIs

00:08:05.800 --> 00:08:10.147
that we have, let's try to do
a demo and see how this works.

00:08:10.147 --> 00:08:11.980
So the first thing we
need to do, of course,

00:08:11.980 --> 00:08:15.130
is that we need to
obtain an OAuth2 token.

00:08:15.130 --> 00:08:20.870
To do this, we provide a util
that's called TokenUtil.jar.

00:08:20.870 --> 00:08:23.790
And of course you can obtain
this using your own code,

00:08:23.790 --> 00:08:26.100
but this is the
easiest way I think.

00:08:26.100 --> 00:08:30.320
So go into
 github.com/googlewallet/walletobjects-utils,

00:08:30.320 --> 00:08:34.110
as you can see on the
slide, and download the JAR.

00:08:34.110 --> 00:08:37.925
And once you do that, let's
run it using your service

00:08:37.925 --> 00:08:40.679
account email address
and your private key.

00:08:40.679 --> 00:08:42.760
Once you run this, this
will create a token.

00:08:45.580 --> 00:08:47.980
Old access tokens will
expire in one hour,

00:08:47.980 --> 00:08:49.710
so as long as you're
within the hour,

00:08:49.710 --> 00:08:52.420
then you should be able to
use that on every request test

00:08:52.420 --> 00:08:52.920
that we do.

00:08:56.150 --> 00:08:57.300
Let's first get a token.

00:09:03.700 --> 00:09:04.200
OK.

00:09:04.200 --> 00:09:06.140
So here I have the TokenUtil.

00:09:06.140 --> 00:09:14.060
And I'm going to call it with
my service account email address

00:09:14.060 --> 00:09:15.270
and my private key.

00:09:18.620 --> 00:09:20.337
Once I do that, then
this is my token

00:09:20.337 --> 00:09:22.295
that I'm going to be
using during this session.

00:09:25.640 --> 00:09:30.100
Once we have the token,
let's try to insert a class.

00:09:30.100 --> 00:09:33.450
So to insert a class,
this is the same URI

00:09:33.450 --> 00:09:35.120
that I showed you before.

00:09:35.120 --> 00:09:39.530
It allows us to post to
this URI with a class type.

00:09:39.530 --> 00:09:41.530
We're going to use
Loyalty as an example,

00:09:41.530 --> 00:09:44.010
but you could use
offers as well.

00:09:44.010 --> 00:09:46.370
Then we also need to
send the bearer token

00:09:46.370 --> 00:09:49.080
that we got using the TokenUtil.

00:09:49.080 --> 00:09:52.090
And we need to send
the JSON for the object

00:09:52.090 --> 00:09:54.180
that we want to create.

00:09:54.180 --> 00:09:56.470
In this case, we can
either send it directly

00:09:56.470 --> 00:10:01.870
when we do the call, or we
can send the path to a file

00:10:01.870 --> 00:10:03.250
where we saved the JSON.

00:10:03.250 --> 00:10:05.340
So let's do that.

00:10:05.340 --> 00:10:10.060
The first thing I have
here-- and I already

00:10:10.060 --> 00:10:14.260
have an example of a JSON
that we're going to use.

00:10:14.260 --> 00:10:17.400
And this is very
similar to the example

00:10:17.400 --> 00:10:19.400
that Peng was
showing before, where

00:10:19.400 --> 00:10:22.490
we have the ID of our class.

00:10:22.490 --> 00:10:25.010
So this is my
issuer ID, and this

00:10:25.010 --> 00:10:27.650
is the unique ID for my class.

00:10:27.650 --> 00:10:30.510
The issuer name, and I'm
also defining the templates

00:10:30.510 --> 00:10:33.240
that I'm going to use
for list and expanded.

00:10:33.240 --> 00:10:39.700
And I have some messages,
the links, some locations,

00:10:39.700 --> 00:10:42.650
and the program name
and program logo.

00:10:42.650 --> 00:10:44.700
All of these fields
are defined, of course,

00:10:44.700 --> 00:10:48.180
on our documentation in
detail, which ones are required

00:10:48.180 --> 00:10:49.640
and which ones are optional.

00:10:49.640 --> 00:10:51.340
So a lot of these
fields are optional,

00:10:51.340 --> 00:10:53.230
but we're showing
them here so you

00:10:53.230 --> 00:10:55.830
can get an idea
of how this works.

00:10:55.830 --> 00:10:58.240
So once we have that,
I save this on a file

00:10:58.240 --> 00:11:00.290
called loyaltyclass.

00:11:00.290 --> 00:11:04.950
And to create a new class--
I have here my cheat sheet

00:11:04.950 --> 00:11:08.110
just so we can do this.

00:11:08.110 --> 00:11:09.610
And I'm going to
create a new class.

00:11:09.610 --> 00:11:13.927
So to do that, I'm going to
post to my Loyalty Class URI.

00:11:13.927 --> 00:11:15.260
And I'm going to send the token.

00:11:15.260 --> 00:11:19.000
But since I just created a
token, let me copy it again.

00:11:27.850 --> 00:11:30.140
I'm going to replace
this on all of them.

00:11:32.661 --> 00:11:33.160
Great.

00:11:33.160 --> 00:11:37.145
So the first thing we'll do
is then create the class.

00:11:39.797 --> 00:11:40.880
So what are we doing here?

00:11:40.880 --> 00:11:44.640
We're posting to the URI,
we're sending the token,

00:11:44.640 --> 00:11:48.600
and then we're sending
the JSON from this file.

00:11:48.600 --> 00:11:51.800
Now once I run
that, this is going

00:11:51.800 --> 00:11:54.610
to verify that the
token is correct,

00:11:54.610 --> 00:11:57.190
that I have rights to do this.

00:11:57.190 --> 00:11:59.380
And then it will
create the class,

00:11:59.380 --> 00:12:01.690
and then it will return back
the class that it created.

00:12:01.690 --> 00:12:04.120
So as you can see here,
this is our new class.

00:12:04.120 --> 00:12:06.240
And if we go into our
Merchant dashboard,

00:12:06.240 --> 00:12:09.980
we'll be able to see
the class created there.

00:12:09.980 --> 00:12:14.550
Now if I wanted to do a Get to
see that my class was created,

00:12:14.550 --> 00:12:23.030
all I need to do is--
let me do this up

00:12:23.030 --> 00:12:25.310
here so it's easier to see it.

00:12:25.310 --> 00:12:30.250
So we can see this is the URI
to get a class, a Loyalty Class.

00:12:30.250 --> 00:12:32.460
And then this is my merchant ID.

00:12:32.460 --> 00:12:36.715
And again, my unique ID
for my class in my token.

00:12:36.715 --> 00:12:40.510
Once I do that, then I get the
class that we just created.

00:12:40.510 --> 00:12:41.270
Cool, right?

00:12:41.270 --> 00:12:42.420
Easy.

00:12:42.420 --> 00:12:53.100
Then the next thing we're going
to do now is handling objects.

00:12:53.100 --> 00:12:55.180
So we assume that
you already created

00:12:55.180 --> 00:12:58.650
an object either using the Save
to Wallet or the Webservice

00:12:58.650 --> 00:12:59.920
API.

00:12:59.920 --> 00:13:01.660
And you have your
objects created here.

00:13:01.660 --> 00:13:03.470
We can either get
an object or update

00:13:03.470 --> 00:13:06.590
it, which is what you should
be doing when you want

00:13:06.590 --> 00:13:10.660
to, let's say, update your
loyalty points on a Loyalty

00:13:10.660 --> 00:13:12.650
Object.

00:13:12.650 --> 00:13:17.050
To do that, we're going to
go back into our terminal.

00:13:17.050 --> 00:13:19.900
And we're going to
get one of the objects

00:13:19.900 --> 00:13:21.865
that we created before.

00:13:21.865 --> 00:13:23.880
And this object was
created through the app.

00:13:27.130 --> 00:13:31.740
So to do that, what I need to
do, then, is hit the same URI.

00:13:31.740 --> 00:13:35.470
But now instead of Loyalty
Class, I call Loyalty Object.

00:13:35.470 --> 00:13:37.460
The same issuer
ID, and then this

00:13:37.460 --> 00:13:41.430
is the ID for my offer, which
is LoyaltyObjectPython1.

00:13:41.430 --> 00:13:44.326
And then my token

00:13:44.326 --> 00:13:48.124
Once I do that, this
is my Loyalty Object.

00:13:48.124 --> 00:13:50.040
And you can see here,
these are all the fields

00:13:50.040 --> 00:13:53.110
associated with the object.

00:13:53.110 --> 00:13:56.870
And some of it, also as you can
see here, ClassReference, these

00:13:56.870 --> 00:13:58.620
are the fields that
are coming, or they're

00:13:58.620 --> 00:14:02.750
referenced by the class that's
associated with this object.

00:14:02.750 --> 00:14:06.080
Like Peng says, the object
inherits some of the fields

00:14:06.080 --> 00:14:09.550
from the class.

00:14:09.550 --> 00:14:11.320
So once you do that
and you can see

00:14:11.320 --> 00:14:14.440
that, let's see where
we have the points.

00:14:14.440 --> 00:14:14.940
OK.

00:14:14.940 --> 00:14:18.150
So we have points here, 500.

00:14:18.150 --> 00:14:20.540
Let's update that and put 5,000.

00:14:20.540 --> 00:14:25.050
So what we'll get here
is I'll copy this here

00:14:25.050 --> 00:14:29.410
from my Get to update it.

00:14:29.410 --> 00:14:35.370
And I'll save it in
this loyaltyobject file.

00:14:35.370 --> 00:14:37.800
And I'll just make changes
to what I want to update.

00:14:37.800 --> 00:14:41.370
In this case, my points.

00:14:41.370 --> 00:14:44.700
So as you can see here,
I'm changing this to 5,000.

00:14:44.700 --> 00:14:47.310
And I have to change two
more things to do an update.

00:14:47.310 --> 00:14:50.640
One is we need to update
the version number.

00:14:50.640 --> 00:14:53.580
So the version for
this object is 1.

00:14:53.580 --> 00:14:55.290
We're going to update it to 2.

00:14:55.290 --> 00:14:58.580
We have to increment the version
every time we do an update.

00:14:58.580 --> 00:15:04.979
And also, we need to
change the review status.

00:15:04.979 --> 00:15:06.020
Let me see where that is.

00:15:09.360 --> 00:15:10.130
OK.

00:15:10.130 --> 00:15:13.710
So this object is approved.

00:15:13.710 --> 00:15:15.580
Let me see here.

00:15:15.580 --> 00:15:17.880
Or no, the class
doesn't need that.

00:15:17.880 --> 00:15:20.380
I think this is for the class.

00:15:20.380 --> 00:15:22.140
OK I think that's
only for the class.

00:15:22.140 --> 00:15:24.320
Let's just do it like this.

00:15:24.320 --> 00:15:27.080
And to do the update,
all we need to do then

00:15:27.080 --> 00:15:32.090
is instead of
doing a post, which

00:15:32.090 --> 00:15:34.570
is what we do when
we create, we're

00:15:34.570 --> 00:15:36.740
going to do a Put to update.

00:15:36.740 --> 00:15:39.190
So to update, we're
updating the same object.

00:15:39.190 --> 00:15:42.810
This is the ID, token, again.

00:15:42.810 --> 00:15:45.406
And then we're
sending the content

00:15:45.406 --> 00:15:46.780
that we have in
the loyaltyobject

00:15:46.780 --> 00:15:47.863
file that we just created.

00:15:50.980 --> 00:15:51.480
Right?

00:15:51.480 --> 00:15:53.230
So we got back our object.

00:15:53.230 --> 00:15:57.961
And now we should have
5,000 points in here.

00:15:57.961 --> 00:15:58.460
Awesome.

00:15:58.460 --> 00:16:01.540
So now you've learned
how to use our RESTful

00:16:01.540 --> 00:16:03.970
APIs in test using cURL.

00:16:03.970 --> 00:16:06.750
Of course, we provide libraries
to do this and sample code,

00:16:06.750 --> 00:16:08.833
and you can find all of
this in our documentation.

00:16:10.838 --> 00:16:13.370
PENG YING: We'll also have
additional tutorials about how

00:16:13.370 --> 00:16:17.220
to use the Save to Wallet
and these Webservice APIs.

00:16:17.220 --> 00:16:20.445
You can also find our
quick starts and tutorials

00:16:20.445 --> 00:16:22.440
within our
documentation as well.

00:16:22.440 --> 00:16:24.178
MARU AHUES: And
also, of course, you

00:16:24.178 --> 00:16:26.440
know the URL to
our documentation.

00:16:26.440 --> 00:16:30.350
And for other videos
and GDLs, just go

00:16:30.350 --> 00:16:34.660
to
 developers.google.com/live/wallet.

00:16:34.660 --> 00:16:37.730
And you can find us also
on Google+ or Twitter.

00:16:37.730 --> 00:16:39.340
Thank you for watching.

00:16:39.340 --> 00:16:42.070
And we hope you
found this helpful.

00:16:42.070 --> 00:16:44.870
Keep an eye out for additional
videos on our Google Developer

00:16:44.870 --> 00:16:46.502
channel.

00:16:46.502 --> 00:16:47.710
PENG YING: See you next time.

00:16:47.710 --> 00:16:49.710
MARU AHUES: See you next time.

