WEBVTT
Kind: captions
Language: en

00:00:00.259 --> 00:00:01.675
What I'm going to
do in this video

00:00:01.675 --> 00:00:05.480
is attempt to create an
implementation of the insertion

00:00:05.480 --> 00:00:08.145
sort algorithm that we talked
about in the last video,

00:00:08.145 --> 00:00:10.090
and I'll do it as
a Python function.

00:00:10.090 --> 00:00:15.420
So I'll call the Python
function insertion sort,

00:00:15.420 --> 00:00:17.790
and it will take in a list.

00:00:17.790 --> 00:00:20.530
So the list is its parameter
in the function definition.

00:00:20.530 --> 00:00:23.100
Someone would have to
pass list as an argument.

00:00:23.100 --> 00:00:26.200
And let's-- what we're going
to do is we're going to step

00:00:26.200 --> 00:00:29.934
through each of these
slots in the list.

00:00:29.934 --> 00:00:31.350
I guess we could
call it that way.

00:00:31.350 --> 00:00:35.960
So let's say 4
index in and range.

00:00:35.960 --> 00:00:38.980
We could start at the
leftmost slot in the list.

00:00:38.980 --> 00:00:41.580
So we could just
say len-- len just

00:00:41.580 --> 00:00:44.930
means it's short for length--
so length of the list.

00:00:44.930 --> 00:00:47.954
So what this would do,
this would start index.

00:00:47.954 --> 00:00:49.870
So let's say the list
has four elements in it.

00:00:49.870 --> 00:00:53.370
Then len list, this
right here would be 4,

00:00:53.370 --> 00:00:54.620
would evaluate to 4.

00:00:54.620 --> 00:00:57.310
Range of 4 would
produce a list that

00:00:57.310 --> 00:01:00.340
has the elements
0, 1, 2, 3 in it.

00:01:00.340 --> 00:01:01.940
And so index would
be able to step

00:01:01.940 --> 00:01:06.060
through the different indices
for this list right over here.

00:01:06.060 --> 00:01:07.560
And we could do it
that way, but you

00:01:07.560 --> 00:01:11.350
might remember from
the previous video

00:01:11.350 --> 00:01:13.596
that when you're doing
the insertion sort,

00:01:13.596 --> 00:01:15.220
it doesn't actually
make sense to start

00:01:15.220 --> 00:01:17.490
at the very leftmost
element, because there's

00:01:17.490 --> 00:01:19.850
nothing to compare
it to to the left.

00:01:19.850 --> 00:01:22.640
So we can actually just start
at the second to the leftmost

00:01:22.640 --> 00:01:23.360
element.

00:01:23.360 --> 00:01:26.010
And the leftmost element
is the 0-th item,

00:01:26.010 --> 00:01:28.150
so we can start
at the first item.

00:01:28.150 --> 00:01:30.680
So now if the list
has a length of 4,

00:01:30.680 --> 00:01:32.930
this right here will
produce 1, 2, 3.

00:01:32.930 --> 00:01:35.640
So it would-- 1 would be the
second to the leftmost element,

00:01:35.640 --> 00:01:38.700
2 would be the next one to the
right, 3 would be the last one.

00:01:38.700 --> 00:01:42.250
Remember, we always
start our indices at 0.

00:01:42.250 --> 00:01:46.170
The 0-th term is the
leftmost element in a list.

00:01:46.170 --> 00:01:47.070
So fine.

00:01:47.070 --> 00:01:48.520
We can step through that.

00:01:48.520 --> 00:01:50.780
And let's get the
value of right--

00:01:50.780 --> 00:01:55.690
at that point in time of the
element that is at that index.

00:01:55.690 --> 00:01:58.240
So that way we don't
have to keep finding it.

00:01:58.240 --> 00:02:01.969
Value is equal to list index.

00:02:01.969 --> 00:02:03.510
And this, by no
means, is going to be

00:02:03.510 --> 00:02:05.540
the most efficient
implementation of even

00:02:05.540 --> 00:02:06.810
insertion sort.

00:02:06.810 --> 00:02:09.860
It's just going to be my best
try writing it in real time

00:02:09.860 --> 00:02:13.440
and in a way that hopefully you
might be able to understand it.

00:02:13.440 --> 00:02:17.170
So value is just the item in the
list at each of those indexes

00:02:17.170 --> 00:02:19.360
that we're now going to
compare to all of the items

00:02:19.360 --> 00:02:21.350
to the left of it.

00:02:21.350 --> 00:02:29.190
And what I want to do is
compare value to each item

00:02:29.190 --> 00:02:30.650
to the left of it.

00:02:30.650 --> 00:02:33.590
So let's define a variable i.

00:02:33.590 --> 00:02:36.220
Let's let this be the
index of the things

00:02:36.220 --> 00:02:38.500
that I want to compare value to.

00:02:38.500 --> 00:02:40.080
And right from
the get-go, I want

00:02:40.080 --> 00:02:42.610
to compare value to the
thing that is left of it.

00:02:42.610 --> 00:02:47.020
So i should have one lower
of an index than index,

00:02:47.020 --> 00:02:49.990
so index minus 1.

00:02:49.990 --> 00:02:53.380
So this is the index of the item
that is directly left to it.

00:02:53.380 --> 00:02:55.490
But we're going to keep
taking i lower and lower,

00:02:55.490 --> 00:02:58.970
so we can keep comparing value
to things further and further

00:02:58.970 --> 00:03:00.254
to the left.

00:03:00.254 --> 00:03:01.670
And so what we
want to do is we're

00:03:01.670 --> 00:03:05.570
going to want to keep
comparing further and further

00:03:05.570 --> 00:03:07.500
left until i has
gotten all the way

00:03:07.500 --> 00:03:09.495
to the beginning of the list.

00:03:09.495 --> 00:03:11.370
And i has gotten all
the way to the beginning

00:03:11.370 --> 00:03:13.930
of the list when
it is equal to 0.

00:03:13.930 --> 00:03:16.220
So what we want to do is
we want to perform this

00:03:16.220 --> 00:03:20.129
while i is greater
than or equal to 0,

00:03:20.129 --> 00:03:22.420
because if we keep taking i
lower and lower and lower--

00:03:22.420 --> 00:03:24.880
we're going further and further
to the left in the list--

00:03:24.880 --> 00:03:27.720
we don't want to try to
perform it when i is further,

00:03:27.720 --> 00:03:28.940
is a negative number.

00:03:28.940 --> 00:03:31.250
That'll just start
doing crazy things.

00:03:31.250 --> 00:03:34.255
So while i is greater
than or equal to 0,

00:03:34.255 --> 00:03:35.630
what I'm going to
do is I'm going

00:03:35.630 --> 00:03:40.599
to keep pushing i further
and further to the left.

00:03:40.599 --> 00:03:41.640
So let's try it this way.

00:03:41.640 --> 00:03:42.600
So the first thing
I want to do-- we've

00:03:42.600 --> 00:03:44.610
already pushed it
to the left once.

00:03:44.610 --> 00:03:47.430
So let's compare.

00:03:47.430 --> 00:03:54.350
So if value is less
than the-- this thing

00:03:54.350 --> 00:03:55.975
keeps saying syntax
error, because it's

00:03:55.975 --> 00:03:57.730
waiting for me to keep typing.

00:03:57.730 --> 00:04:03.650
If value is less than the
item that is now at index i,

00:04:03.650 --> 00:04:08.450
so the item at index i,
list, the item at index i

00:04:08.450 --> 00:04:10.030
is this right here.

00:04:10.030 --> 00:04:12.620
So if it is less
than that, let's

00:04:12.620 --> 00:04:15.170
shift the item that's over here.

00:04:15.170 --> 00:04:17.600
Let's shift it one to the right.

00:04:17.600 --> 00:04:20.579
So the right slot is i plus 1.

00:04:20.579 --> 00:04:23.090
And I can't just say it's
index, because remember,

00:04:23.090 --> 00:04:25.520
I'm going to keep pulling i
in lower and lower and lower.

00:04:25.520 --> 00:04:27.510
Because right now, index is i.

00:04:27.510 --> 00:04:29.880
Right now i is index
minus 1 in the first pass

00:04:29.880 --> 00:04:31.480
through this while
loop, but I'm going

00:04:31.480 --> 00:04:34.021
to-- as you'll see in a second,
I'm going to keep lowering i.

00:04:34.021 --> 00:04:37.440
So it'll always won't
be one left of index.

00:04:37.440 --> 00:04:40.600
So I'm going to say wherever
i is, let's take the spot

00:04:40.600 --> 00:04:42.110
one to the right of i.

00:04:45.120 --> 00:04:47.510
So that's i plus 1 as its index.

00:04:47.510 --> 00:04:51.990
And let's replace that
with whatever's at list,

00:04:51.990 --> 00:04:54.737
or whatever is at i, at slot i.

00:04:54.737 --> 00:04:57.070
So we have essentially taken
this thing right over here,

00:04:57.070 --> 00:05:00.210
whatever number was there,
and we are putting it

00:05:00.210 --> 00:05:02.803
in the slot that is
one to the right of it.

00:05:02.803 --> 00:05:05.010
And then-- and actually
the way we're setting up

00:05:05.010 --> 00:05:08.030
that algorithm, whatever's there
is actually going to be-- well,

00:05:08.030 --> 00:05:09.240
I won't talk about that.

00:05:09.240 --> 00:05:12.270
We'll step through it and
see how it all plays out.

00:05:12.270 --> 00:05:16.450
And then we can shift
value to the left.

00:05:16.450 --> 00:05:19.090
So whatever was in this
slot right over here

00:05:19.090 --> 00:05:21.310
will be replaced by value.

00:05:21.310 --> 00:05:26.550
So list i will equal value.

00:05:26.550 --> 00:05:29.080
So one way to think about it--
let me write a comment here.

00:05:29.080 --> 00:05:42.546
Shift what was-- shift number
in slot i to slot i plus 1.

00:05:42.546 --> 00:05:43.990
Or you can say
bucket i plus 1, I

00:05:43.990 --> 00:05:46.120
guess is one way
to think about it.

00:05:46.120 --> 00:05:50.190
And then you could say
shift number right.

00:05:50.190 --> 00:05:51.240
Let me call it this way.

00:05:51.240 --> 00:05:53.189
Shift number right in slot.

00:05:53.189 --> 00:05:54.230
Let me write it this way.

00:05:54.230 --> 00:06:00.260
Shift number in slot i
right to slot i plus 1.

00:06:00.260 --> 00:06:05.520
And then over here,
we are shifting--

00:06:05.520 --> 00:06:13.312
shift value left into slot i.

00:06:13.312 --> 00:06:15.520
And so if you remember what
we did in the last video,

00:06:15.520 --> 00:06:17.030
this is exactly describing it.

00:06:17.030 --> 00:06:19.430
We're comparing value to
the thing to the left of it.

00:06:19.430 --> 00:06:22.444
If it's less than it, then
whatever number was in that box

00:06:22.444 --> 00:06:24.110
to the left of it,
the slot to the left,

00:06:24.110 --> 00:06:27.720
shift it to the right, and
then shift value to the left.

00:06:27.720 --> 00:06:30.990
And now compare value to
something 1 lower than that.

00:06:30.990 --> 00:06:32.560
So we want to decrement i.

00:06:32.560 --> 00:06:33.640
We want to lower i.

00:06:33.640 --> 00:06:36.120
Decrement is just
increment down.

00:06:36.120 --> 00:06:41.010
So i is equal to i minus 1.

00:06:41.010 --> 00:06:44.591
And then we'll perform
the loop over again.

00:06:44.591 --> 00:06:46.090
And now value will
be compared-- now

00:06:46.090 --> 00:06:48.470
i is two to the left of index.

00:06:48.470 --> 00:06:49.590
Compare it to that.

00:06:49.590 --> 00:06:51.590
If it is less than it,
shift that to the right

00:06:51.590 --> 00:06:54.150
and shift value
again to the left.

00:06:54.150 --> 00:06:58.160
Now, what if we have the
situation where value is not

00:06:58.160 --> 00:07:00.510
less than the item that
you're comparing it to?

00:07:00.510 --> 00:07:02.150
Well, if it's not
less than the item

00:07:02.150 --> 00:07:04.900
that you're comparing it to
and that that means that value

00:07:04.900 --> 00:07:07.034
is already going to
be in the right place,

00:07:07.034 --> 00:07:08.950
it also means that you're
done, that you don't

00:07:08.950 --> 00:07:10.880
need to shift value
any more to the left,

00:07:10.880 --> 00:07:12.713
and you don't have to
shift any of the stuff

00:07:12.713 --> 00:07:14.330
to the left any
more to the right.

00:07:14.330 --> 00:07:18.290
So then we are done.

00:07:18.290 --> 00:07:20.790
And I think this
could work unless I've

00:07:20.790 --> 00:07:22.670
made some silly mistake.

00:07:22.670 --> 00:07:24.750
So let's try to see
if I can get this--

00:07:24.750 --> 00:07:28.250
if this actually works
as a sorting algorithm.

00:07:28.250 --> 00:07:32.390
So let me save it-- insertion
sort-- and let me run it.

00:07:32.390 --> 00:07:32.940
All right.

00:07:32.940 --> 00:07:35.260
So I didn't have any at
least syntax mistakes.

00:07:35.260 --> 00:07:38.320
Syntax just means the
actual characters I use.

00:07:38.320 --> 00:07:41.380
I didn't forget to put a colon
here or a greater than sign.

00:07:41.380 --> 00:07:45.250
It was actually able to process
this, interpret this right over

00:07:45.250 --> 00:07:45.750
here.

00:07:45.750 --> 00:07:47.500
But let's see if
it actually works.

00:07:47.500 --> 00:07:50.610
So let me define a list.

00:07:50.610 --> 00:07:59.360
Let's say it is
7, 1, 3, 5, 9, 2.

00:07:59.360 --> 00:08:01.350
And let me put
another 3 in there.

00:08:01.350 --> 00:08:03.750
So that is a, and
then let me see.

00:08:03.750 --> 00:08:05.420
This is the moment of truth.

00:08:05.420 --> 00:08:10.610
Insertion sort of a--
let's see what happens.

00:08:10.610 --> 00:08:12.640
So remember, we're
sorting it in place.

00:08:12.640 --> 00:08:14.310
This function doesn't
return anything,

00:08:14.310 --> 00:08:17.030
but it should take whatever
list that was and had changed up

00:08:17.030 --> 00:08:19.330
all of the elements so
that now they are in order.

00:08:19.330 --> 00:08:21.040
So this is the moment of truth.

00:08:21.040 --> 00:08:23.640
Let's see what a looks like.

00:08:23.640 --> 00:08:24.480
There you go.

00:08:24.480 --> 00:08:25.320
It is sorted.

00:08:25.320 --> 00:08:28.500
So I don't think I made
any major mistakes.

00:08:28.500 --> 00:08:29.900
So there you go.

00:08:29.900 --> 00:08:35.074
You have insertion-- a
version of insertion sort.

