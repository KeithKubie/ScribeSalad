WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
It's worth noting that although we changed some keywords--

00:00:04.000 --> 00:00:07.000
they had a different spelling where it's almost as if

00:00:07.000 --> 00:00:09.000
we had to translate them into a different language--

00:00:09.000 --> 00:00:12.000
the underlying meaning was the same in both languages.

00:00:12.000 --> 00:00:17.000
We can translate programs, functions between Python and JavaScript

00:00:17.000 --> 00:00:19.000
provided that we know both of them.

00:00:19.000 --> 00:00:23.000
In linguistics, people will sometimes talk about a universal grammar

00:00:23.000 --> 00:00:27.000
as there may be some grammar that would sit behind and describe Python,

00:00:27.000 --> 00:00:30.000
JavaScript, English, and French.

00:00:30.000 --> 00:00:33.000
I don't want to get into that for natural languages,

00:00:33.000 --> 00:00:36.000
but we will see either in this class or in subsequent ones,

00:00:36.000 --> 00:00:41.000
that for computer languages like Python or JavaScript, C and C++,

00:00:41.000 --> 00:00:48.000
Visual Basic, C Sharp, OCaml, Free Basic, they're all the same in a very strong sense.

00:00:48.000 --> 00:00:50.000
They're all Turing-complete.

00:00:50.000 --> 00:00:54.000
I'm not going to much detail now, but it suffices to say that Python

00:00:54.000 --> 00:00:56.000
and JavaScript are equally powerful.

00:00:56.000 --> 00:01:00.000
Any thought that I can think in one I can also think in the others.

00:01:00.000 --> 00:01:06.000
Now I'm going to bite the bullet and actually write out a partial grammar for JavaScript.

00:01:06.000 --> 00:01:09.000
This is only a partial grammar because it only handles expressions,

00:01:09.000 --> 00:01:12.000
and it only handles some of the expressions.

00:01:12.000 --> 00:01:16.000
An expression can either be an identifier--like a variable name x or a function

00:01:16.000 --> 00:01:19.000
like sine or absval,

00:01:19.000 --> 00:01:25.000
a number--1, 3.5, -2, a string--like "hello" in quotes,

00:01:25.000 --> 00:01:28.000
literal constants--like True or even False.

00:01:28.000 --> 00:01:30.000
These are the equivalent of numbers,

00:01:30.000 --> 00:01:34.000
but for the Booleans there are only two numbers--True and False--

00:01:34.000 --> 00:01:37.000
and then a large number of binary operators.

00:01:37.000 --> 00:01:40.000
If you have two expressions, you can add them together, subtract them,

00:01:40.000 --> 00:01:44.000
multiply them, divide them--watch out for division by zero.

00:01:44.000 --> 00:01:47.000
You can compare them to see if one is less than the other.

00:01:47.000 --> 00:01:50.000
You can compare them to see if they're exactly equal.

00:01:50.000 --> 00:01:55.000
If they're Booleans, you can check to see if the first is true and the second is true.

00:01:55.000 --> 00:01:58.000
Just a little note--if you haven't run into this before--

00:01:58.000 --> 00:02:04.000
two ampersands means "and" and two vertical bars means "or."

00:02:04.000 --> 00:02:07.000
In Python where you might write and or or, in JavaScript you use these

00:02:07.000 --> 00:02:10.000
binary operator symbols instead.

00:02:10.000 --> 00:02:14.000
Just as we have less than here, there'd also be greater than, greater than or equal to,

00:02:14.000 --> 00:02:16.000
less than or equal to, and many more.

00:02:16.000 --> 00:02:20.000
This JavaScript expression grammar should be familiar to you,

00:02:20.000 --> 00:02:24.000
because aside from some minor details of spelling like the equal signs here

00:02:24.000 --> 00:02:26.000
or the capital word "TRUE" to mean true.

00:02:26.000 --> 09:59:59.000
It should be very similar to Python.

