WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
So to do this we're taking advantage of the property that A to the 2B

00:00:05.000 --> 00:00:08.000
is equal to A to the B squared.

00:00:08.000 --> 00:00:11.000
So let's first define a procedure to do squaring,

00:00:11.000 --> 00:00:15.000
and then we'll define our modular exponentiation procedure.

00:00:15.000 --> 00:00:18.000
And the easiest way to do this is to do it recursively.

00:00:18.000 --> 00:00:20.000
So our base case is when B is zero.

00:00:20.000 --> 00:00:24.000
Anything raised to the zero power is defined as having the value of 1.

00:00:24.000 --> 00:00:28.000
If B is not zero, well then we want to check if it is divisible by 2.

00:00:28.000 --> 00:00:30.000
If it is divisible by 2 we can do this transformation.

00:00:30.000 --> 00:00:36.000
Then the result is the square of the modular exponentiation of A to the B divided by 2.

00:00:36.000 --> 00:00:42.000
If B is not divisible by 2, well then it's of the form 2N plus 1 for some N.

00:00:42.000 --> 00:00:47.000
So if we break off the 1, we will end up with something divisible by 2.

00:00:47.000 --> 00:00:52.000
So that means we can return the result of multiplying A

00:00:52.000 --> 00:00:59.000
times the result of modular exponentiation A raised to the B minus 1 power.

00:00:59.000 --> 00:01:01.000
Now this is just fast exponentiation.

00:01:01.000 --> 00:01:03.000
We haven't yet taken the modulo out.

00:01:03.000 --> 00:01:05.000
If we didn't care how big numbers got,

00:01:05.000 --> 00:01:07.000
we could do that all at the end.

00:01:07.000 --> 00:01:09.000
But we want to do that as we go.

00:01:09.000 --> 00:01:12.000
We're going to add the mod operator to do these modulo Q.

00:01:12.000 --> 00:01:15.000
And that will give us the result of raising A to the B power modulo Q

00:01:15.000 --> 00:01:22.000
using a number of multiplications that's close to the log of the value of B.

