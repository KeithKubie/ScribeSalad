WEBVTT
Kind: captions
Language: en

00:00:00.200 --> 00:00:01.967
Alright so I'm going to come back to the

00:00:01.967 --> 00:00:04.075
code, and this time I'm going to do something

00:00:04.075 --> 00:00:07.657
new. Now because this class Child inherits from

00:00:07.657 --> 00:00:12.213
class Parent this method show_info is also inherited. Now

00:00:12.213 --> 00:00:15.524
this means that instances of class Child instances

00:00:15.524 --> 00:00:19.066
like miley_cyrus, they can also call the show_info

00:00:19.066 --> 00:00:22.377
method, even though this method is not explicitly

00:00:22.377 --> 00:00:26.000
defined inside class Child. Let me do that next.

00:00:26.000 --> 00:00:27.900
So the first thing I will do is uncomment

00:00:27.900 --> 00:00:29.900
this line of code where I'm creating the instance

00:00:29.900 --> 00:00:34.290
called miley_cyrus, and then use that instance, to call

00:00:34.290 --> 00:00:39.190
the method show_info. There. Now because I want to focus

00:00:39.190 --> 00:00:41.770
on the output of this show_info method, I'm going

00:00:41.770 --> 00:00:43.930
to comment out the previous show_info method for now.

00:00:45.310 --> 00:00:48.660
There. Now before I run this program, I want

00:00:48.660 --> 00:00:51.255
to highlight one more time that I'm using the instance

00:00:51.255 --> 00:00:54.920
miley_cyrus to call the method show_info. Now this

00:00:54.920 --> 00:00:59.090
method does not explicitly exist inside class Child. But

00:00:59.090 --> 00:01:02.210
because class Child inherits from class Parent this

00:01:02.210 --> 00:01:05.770
method show_info is actually available to the instances of

00:01:05.770 --> 00:01:10.010
class Child. So let me go ahead and save and run this program. And there is my

00:01:10.010 --> 00:01:13.250
output. The program did not throw any errors, and

00:01:13.250 --> 00:01:16.365
the last name and eye color of the instance

00:01:16.365 --> 00:01:21.850
miley_cyrus did get printed out. Okay. So the next thing I am going to do is

00:01:21.850 --> 00:01:25.920
create a method called show_info inside class Child,

00:01:25.920 --> 00:01:28.350
and see what that does. So I'm going to create

00:01:28.350 --> 00:01:34.030
a new method called show_info inside class Child.

00:01:34.030 --> 00:01:36.430
Now this method show_info is going to print

00:01:36.430 --> 00:01:38.790
out the three things associated with a child.

00:01:38.790 --> 00:01:41.370
It's last name, eye color, and number of toys.

00:01:42.780 --> 00:01:44.870
Here we are printing the last name of the

00:01:44.870 --> 00:01:48.640
child. Now we are printing the child's eye color,

00:01:50.310 --> 00:01:53.080
and finally, we are printing the number of toys.

00:01:53.080 --> 00:01:55.520
In order to print this number correctly, we had to

00:01:55.520 --> 00:01:58.020
wrap it around the string function. Now, if I

00:01:58.020 --> 00:02:01.550
save and run this program, my hypothesis is that when

00:02:01.550 --> 00:02:04.880
I call the show_info method using miley_cyrus, which by

00:02:04.880 --> 00:02:08.038
the way is an instance of class Child. This show_info

00:02:08.038 --> 00:02:10.163
method is going to get called and not the

00:02:10.163 --> 00:02:13.240
show_info method in the class Parent. So let me

00:02:13.240 --> 00:02:16.550
save and run this program. And there's the output.

00:02:16.550 --> 00:02:19.440
We're printing out the last name, eye color and number

00:02:19.440 --> 00:02:22.600
of toys of the instance of class Child. So

00:02:22.600 --> 00:02:24.660
really what we have done here is defined the

00:02:24.660 --> 00:02:29.070
method by the same name show_info inside class Child,

00:02:29.070 --> 00:02:33.330
and also inside class Parent. This ability of a sub-class,

00:02:33.330 --> 00:02:36.910
in this case the class Child, to override a method that

00:02:36.910 --> 00:02:41.650
it inherited from its parent class is called Method Overriding in programming.

