WEBVTT
Kind: captions
Language: en

00:00:00.184 --> 00:00:00.850
ALEX DANILO: Hi.

00:00:00.850 --> 00:00:03.060
As a developer, I know
my time is precious.

00:00:03.060 --> 00:00:04.380
And, of course, time is money.

00:00:04.380 --> 00:00:06.775
And time to market is
even more important.

00:00:06.775 --> 00:00:08.900
So when I start building
apps, the first thing I do

00:00:08.900 --> 00:00:10.560
is look around for
some kind of library

00:00:10.560 --> 00:00:12.662
to speed up my development.

00:00:12.662 --> 00:00:14.620
I'm Alex Danilo, and I'm
going to introduce you

00:00:14.620 --> 00:00:18.330
to some great libraries that
we've built for the Maps APIs.

00:00:18.330 --> 00:00:20.780
Now with Google Maps, and
all the associated APIs,

00:00:20.780 --> 00:00:22.280
you can build rich
applications that

00:00:22.280 --> 00:00:24.560
take advantage of
location-based services

00:00:24.560 --> 00:00:27.410
which brings all sorts of
functionality into your app.

00:00:27.410 --> 00:00:30.321
But of course, trying to do
that quickly is daunting.

00:00:30.321 --> 00:00:32.070
So we've built a bunch
of client libraries

00:00:32.070 --> 00:00:34.330
to make your job easier.

00:00:34.330 --> 00:00:35.830
These libraries are
built to support

00:00:35.830 --> 00:00:38.840
server-side applications
developed in Java and Python.

00:00:38.840 --> 00:00:41.610
So what they do is provide
access to some of our existing

00:00:41.610 --> 00:00:45.450
APIs, like the Directions
API, the Distance Matrix API,

00:00:45.450 --> 00:00:49.480
the Elevation API, the Geocoding
API, and the Time Zone API.

00:00:49.480 --> 00:00:51.910
And it makes your life simple.

00:00:51.910 --> 00:00:53.420
See, normally, when
you include maps

00:00:53.420 --> 00:00:55.230
in some kind of
application, you interface

00:00:55.230 --> 00:00:58.000
using a protocol that uses
REST principles which gives you

00:00:58.000 --> 00:01:00.470
a stateless interface
to the server somewhere.

00:01:00.470 --> 00:01:03.350
But of course, if you prefer to
develop in different languages,

00:01:03.350 --> 00:01:06.149
like Java or Python, we know
that job is really hard.

00:01:06.149 --> 00:01:08.440
So what we've done is we've
built client libraries that

00:01:08.440 --> 00:01:10.420
connect to those
services for you,

00:01:10.420 --> 00:01:12.660
and provide an interface
in your natural language.

00:01:12.660 --> 00:01:15.330
So you don't have to speak
gobbledygook or translate Java

00:01:15.330 --> 00:01:19.220
to JavaScript, or have some
kind of bridge connection.

00:01:19.220 --> 00:01:22.260
Now there are a few
advantages of this approach.

00:01:22.260 --> 00:01:24.450
One is that we've
built it and tested it,

00:01:24.450 --> 00:01:26.430
so you know it's going to work.

00:01:26.430 --> 00:01:28.746
But two, it cuts down
the lines of code.

00:01:28.746 --> 00:01:30.120
Like this is the
size of the code

00:01:30.120 --> 00:01:32.100
you'll need to write
to actually connect.

00:01:32.100 --> 00:01:34.900
Now the beauty of this is that,
having built this nice client

00:01:34.900 --> 00:01:38.470
library in API, it gives you a
simple interface to work with.

00:01:38.470 --> 00:01:41.550
And not only that, it takes
care of authentication and keys,

00:01:41.550 --> 00:01:43.750
and things like that
which can make application

00:01:43.750 --> 00:01:46.270
development a little
bit complicated.

00:01:46.270 --> 00:01:49.580
But one of the nicest
features that I like is Retry.

00:01:49.580 --> 00:01:51.490
What this does is,
when the server maybe

00:01:51.490 --> 00:01:54.310
has some kind of intermittent
failure or flaky network

00:01:54.310 --> 00:01:56.040
connection or
something like that,

00:01:56.040 --> 00:01:57.740
especially on
mobile networks, it

00:01:57.740 --> 00:02:00.120
will take care of all of
that transparently so you

00:02:00.120 --> 00:02:01.420
do no work at all.

00:02:01.420 --> 00:02:03.960
That's fantastic
just on its own.

00:02:03.960 --> 00:02:05.960
Another thing that a lot
of people probably like

00:02:05.960 --> 00:02:07.280
is Rate Limiting.

00:02:07.280 --> 00:02:09.824
So what this does is throttle
the connections to the server

00:02:09.824 --> 00:02:11.490
so that you won't run
into errors caused

00:02:11.490 --> 00:02:13.410
by exceeding your quota limits.

00:02:13.410 --> 00:02:15.972
The library will let you query
as fast as you're allowed,

00:02:15.972 --> 00:02:17.680
which frees your
application from dealing

00:02:17.680 --> 00:02:21.330
with any errors caused
by exceeding your quota.

00:02:21.330 --> 00:02:23.060
Probably the single
most important thing

00:02:23.060 --> 00:02:25.340
to think about when integrating
these client libraries

00:02:25.340 --> 00:02:27.669
is that you're dealing
with native objects.

00:02:27.669 --> 00:02:29.210
So if you're working
with Java, you'd

00:02:29.210 --> 00:02:31.810
actually get a Java object
that you manipulate.

00:02:31.810 --> 00:02:34.980
So the methods manipulate
the Java object directly.

00:02:34.980 --> 00:02:36.110
Python is already easy.

00:02:36.110 --> 00:02:38.660
But we save you from having to
craft and process the response

00:02:38.660 --> 00:02:40.370
and pass it back directly.

00:02:40.370 --> 00:02:43.030
So you don't have to spend
time forming URLs or passing

00:02:43.030 --> 00:02:45.530
through JSON results, which
saves you from manually setting

00:02:45.530 --> 00:02:47.300
up model mapping.

00:02:47.300 --> 00:02:50.000
Another bonus is that, if
you're using the Java library,

00:02:50.000 --> 00:02:51.850
it lets you connect
asynchronously or

00:02:51.850 --> 00:02:52.490
synchronously.

00:02:52.490 --> 00:02:55.120
It's your choice how you
want to run the connection.

00:02:55.120 --> 00:02:57.965
And best of all, this
entire client library set

00:02:57.965 --> 00:02:59.150
is open source.

00:02:59.150 --> 00:03:01.990
So you can modify it or
contribute if you like.

00:03:01.990 --> 00:03:05.620
To find out more, head over to
our documentation at this URL.

00:03:05.620 --> 00:03:08.490
You can also load the source
code for either Java or Python

00:03:08.490 --> 00:03:10.860
from our GitHub
repository right here.

00:03:10.860 --> 00:03:12.370
We'd love to see
the apps you build.

00:03:12.370 --> 00:03:14.369
And we'd love you to tell
us which languages you

00:03:14.369 --> 00:03:15.950
want us to support next.

00:03:15.950 --> 00:03:19.720
I'm Alex Danilo for the Google
Developer Platform Team.

