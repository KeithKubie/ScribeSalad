WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:02.472
So we have seen that moving from 1-bit predictor

00:00:02.472 --> 00:00:07.000
to 2-bit predictor improves things. Primarily because the one

00:00:07.000 --> 00:00:09.950
off occurrences of the other behavior are not going

00:00:09.950 --> 00:00:13.140
to change it, our complete decision. So now the question

00:00:13.140 --> 00:00:16.000
is, if the increase in the predictor size this

00:00:16.000 --> 00:00:19.080
way worked. Why not do the 3-bit predictor or a

00:00:19.080 --> 00:00:22.710
4-bit predictor? The bad part of using more bits

00:00:22.710 --> 00:00:25.470
per predictor is that the cost goes up in proportion

00:00:25.470 --> 00:00:27.990
to how many bits we need. We still need to have

00:00:27.990 --> 00:00:31.330
the same number of predictor entries in order so that each

00:00:31.330 --> 00:00:34.500
branch has its own predictor entry and not share it with

00:00:34.500 --> 00:00:37.810
another branch that behaves differently. So, for the same number of

00:00:37.810 --> 00:00:41.190
entries, we will have, this doubles the cost, this is going to

00:00:41.190 --> 00:00:43.790
add another 50% to the cost, and so on, so we

00:00:43.790 --> 00:00:46.940
are increasing the cost. It might be worth it if the

00:00:46.940 --> 00:00:50.710
prediction accuracy is improving. So, the good side is that sometimes

00:00:50.710 --> 00:00:53.500
the branch prediction accuracy does improve as you go

00:00:53.500 --> 00:00:57.568
to 3-bits or 4-bits. When? Well, adding to 3-bits

00:00:57.568 --> 00:01:01.060
or 4-its is going to increase the [UNKNOWN], of four.

00:01:01.060 --> 00:01:04.769
A longer time, we will keep guessing the old

00:01:04.769 --> 00:01:07.990
way, even though decisions are going the other way.

00:01:07.990 --> 00:01:10.590
So really, the only time when this is good,

00:01:10.590 --> 00:01:13.220
is when anomalous outcomes come in streaks. If you

00:01:13.220 --> 00:01:15.810
have a streak of, for example, not taken all

00:01:15.810 --> 00:01:18.030
of the time, and then it happens that you

00:01:18.030 --> 00:01:21.842
have taken, taken very often. After that and then again

00:01:21.842 --> 00:01:24.938
not taken for awhile then actually having a 3-bit

00:01:24.938 --> 00:01:28.754
predictor would solve the problem of being convinced the other

00:01:28.754 --> 00:01:31.631
way when the taken taken happens. But the real

00:01:31.631 --> 00:01:34.511
question is, how often do we really have in real

00:01:34.511 --> 00:01:38.040
programs that anomalous outcomes come in streaks? And the

00:01:38.040 --> 00:01:40.960
answer is not very often. So what we might have

00:01:40.960 --> 00:01:43.600
is that the 3-bit predictor might be worth it, but

00:01:43.600 --> 00:01:47.505
definitely not the 4-bit predictor. So somehow we really want to

00:01:47.505 --> 00:01:50.988
have either a 2-bit predictor or a 3-bit predictor. And most

00:01:50.988 --> 00:01:54.250
of the time, we're just fine with a 2-bit predictor. We're

00:01:54.250 --> 00:01:57.400
getting most of the benefits we would get with more

00:01:57.400 --> 00:02:00.356
bits for a lower cost. So we really should stay with

00:02:00.356 --> 00:02:03.110
a 2-bit predictor and maybe move to 3-bits if we really,

00:02:03.110 --> 00:02:06.094
really want to. But if moving to more bits like this

00:02:06.094 --> 00:02:08.388
is not helping us, then the question

00:02:08.388 --> 00:02:11.348
becomes, but how do we then improve prediction

00:02:11.348 --> 00:02:15.351
beyond the 2-bit predictor? We have already seen

00:02:15.351 --> 00:02:18.417
that neither 1-bit nor 2-bit work really well

00:02:18.417 --> 00:02:22.140
when we have things like not-taken, taken, not-taken,

00:02:22.140 --> 00:02:24.591
taken, etc. And now, a human being that

00:02:24.591 --> 00:02:28.410
looks at this sequence not-taken, taken, not-taken, taken,

00:02:28.410 --> 00:02:31.291
etc., will correctly guess that the next outcome

00:02:31.291 --> 00:02:34.440
here will probably be not-taken, followed by taken,

00:02:34.440 --> 00:02:36.590
and so on. So this branch turns out

00:02:36.590 --> 00:02:39.758
to be perfectly predictable, it's just that it's

00:02:39.758 --> 00:02:43.130
not predictable with a 1-bit or 2-bit predictor.

