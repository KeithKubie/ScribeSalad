WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:02.200
As we just saw, we're limited in what we can

00:00:02.200 --> 00:00:06.450
represent in tabular data. In many situations, we have data items

00:00:06.450 --> 00:00:09.780
with fields that have sub-fields. As programmers we are accustomed

00:00:09.780 --> 00:00:12.850
to this way of thinking, we have objects that have fields,

00:00:12.850 --> 00:00:15.870
that reference other objects. And, a lot of times all

00:00:15.870 --> 00:00:19.130
the objects have several fields of their own. So here we're

00:00:19.130 --> 00:00:22.460
looking at the The Beatles discography page on Wikipedia. This

00:00:22.460 --> 00:00:25.180
is the page we use to produce that data that we

00:00:25.180 --> 00:00:27.750
looked at earlier. Okay, so if we were to

00:00:27.750 --> 00:00:30.060
represent this data in the tabular form, in a

00:00:30.060 --> 00:00:32.580
CSV file or Excel worksheet, we'd need to do

00:00:32.580 --> 00:00:36.610
some unwinding. Given that we've got certifying authorities here, and

00:00:36.610 --> 00:00:39.780
different types of certifications. Gold record, Platinum record, and

00:00:39.780 --> 00:00:43.620
so on. There's also this additional complicating factor that

00:00:43.620 --> 00:00:47.340
an individual record can be certified as some multiple.

00:00:47.340 --> 00:00:50.370
Platinum. So this particular album is a multi platinum record,

00:00:50.370 --> 00:00:53.220
four times platinum. Platinum means it sold a million

00:00:53.220 --> 00:00:55.910
copies. Four times platinum means it sold more than

00:00:55.910 --> 00:00:59.540
four million copies. So if we want to represent

00:00:59.540 --> 00:01:02.980
this part of this dataset in a tabular form, we

00:01:02.980 --> 00:01:05.870
would essentially need two columns for every certifying authorities.

00:01:05.870 --> 00:01:09.880
One for what level of certification, and one for the

00:01:09.880 --> 00:01:13.270
multiplier. Aside from being tedious and error prone, this

00:01:13.270 --> 00:01:15.860
is just a really unnatural way to represent this data.

00:01:15.860 --> 00:01:18.660
So, this is why the JSON standard has emerged for

00:01:18.660 --> 00:01:22.230
modeling data and as a means of transmitting data between

00:01:22.230 --> 00:01:25.100
systems. So, let's take a look at a way of

00:01:25.100 --> 00:01:29.090
representing this data in JSON. I'm just going to look

00:01:29.090 --> 00:01:31.450
at A Hard Day's Night. A Hard Day's Night is

00:01:31.450 --> 00:01:35.640
interesting because it was actually released on two different labels

00:01:35.640 --> 00:01:38.300
on two different dates. So let's take a look then

00:01:38.300 --> 00:01:41.230
at how we might do this in JSON. All right.

00:01:41.230 --> 00:01:43.000
So what I've done is I've taken just the Hard

00:01:43.000 --> 00:01:47.130
Day's Night data and implemented it as a JSON object.

00:01:47.130 --> 00:01:48.690
Okay, so you can see we have a field for

00:01:48.690 --> 00:01:52.460
title, artist and releases. And as we scroll down through

00:01:52.460 --> 00:01:55.630
this data, you can see that releases is actually an

00:01:55.630 --> 00:01:58.370
array. Okay? In this case I've got two because if

00:01:58.370 --> 00:02:01.580
you remember we have two different releases for this. One

00:02:01.580 --> 00:02:06.300
on the United Artists label and one of the Parlophone

00:02:06.300 --> 00:02:09.919
label. Okay? What we've done here as well Because

00:02:09.919 --> 00:02:13.120
the chart positions are in reference to a specific

00:02:13.120 --> 00:02:15.690
release, we need to make them part of the

00:02:15.690 --> 00:02:19.910
appropriate release object within the releases array. So in this

00:02:19.910 --> 00:02:23.120
case, the peak chart position for the United Artists

00:02:23.120 --> 00:02:25.440
release of A Hard Day's Night in France was

00:02:25.440 --> 00:02:28.450
five, in the UK was one. We also need

00:02:28.450 --> 00:02:31.420
to associate the certifications with the release, because a different

00:02:31.420 --> 00:02:34.580
release will have different certifications. So here we've got

00:02:34.580 --> 00:02:37.330
the different certifying authorities and then for that RIAA

00:02:37.330 --> 00:02:40.430
certification, it has a multiplier of four because it

00:02:40.430 --> 00:02:43.550
was actually a four times platinum album. Okay. And

00:02:43.550 --> 00:02:45.920
here is the release data for the other release,

00:02:45.920 --> 00:02:49.060
the one on Parlophone. So this is a way

00:02:49.060 --> 00:02:52.290
of representing the data in JSON. And it's important

00:02:52.290 --> 00:02:57.020
to note that JSON objects are just like dictionaries

00:02:57.020 --> 00:03:00.600
in Python and many other languages. There's a data

00:03:00.600 --> 00:03:03.590
type in most programming languages that's analogous to a JSON

00:03:03.590 --> 00:03:06.650
object. In Python it happens to be a dictionary.

00:03:06.650 --> 00:03:09.860
Many other languages have dictionary or map like data types

00:03:09.860 --> 00:03:13.470
that are very similar to JSON object. And most

00:03:13.470 --> 00:03:16.210
programming languages have arrays as well. In Python, they happen

00:03:16.210 --> 00:03:19.400
to be called lists. Okay, so let's just document

00:03:19.400 --> 00:03:21.520
some of what we have to remember about JSON here.

