WEBVTT
Kind: captions
Language: en-GB

00:00:00.020 --> 00:00:03.040
If you look back on the car-park video, you'll see 
it's very handy

00:00:03.040 --> 00:00:04.500
Everything's cut and dried

00:00:04.580 --> 00:00:07.940
Every possible combination of 20s, 10s and 5s

00:00:07.940 --> 00:00:08.580
will work

00:00:08.580 --> 00:00:10.040
get us to twenty-five,

00:00:10.040 --> 00:00:11.160
deliver a ticket.

00:00:11.760 --> 00:00:14.880
If we turn to what we were talking about briefly

00:00:14.980 --> 00:00:16.080
at the end of that video

00:00:16.220 --> 00:00:19.820
something like... I'm in a program language and I want

00:00:20.200 --> 00:00:23.760
to declare an identifier name for my integers.

00:00:24.140 --> 00:00:27.500
I want to call my integers 'sean' and 'dave', or even

00:00:27.580 --> 00:00:30.000
'k9' as I said last time.

00:00:30.160 --> 00:00:34.900
Well, they're fine. But if you want arbitrary-length
variable names,

00:00:35.680 --> 00:00:36.540
How do you say

00:00:36.540 --> 00:00:40.080
"I don't know whether it's going to be three letters long,  
five letters long,

00:00:40.080 --> 00:00:41.520
or even sixty letters long" ?

00:00:41.520 --> 00:00:43.860
Maybe the compiler has an external limit anyway.

00:00:43.900 --> 00:00:46.320
But, in general, how can we keep going around

00:00:46.320 --> 00:00:48.080
without knowing how many?

00:00:48.080 --> 00:00:50.280
And the answer, of course, is: Recursion.

00:00:53.860 --> 00:00:55.440
I'm now going to draw you

00:00:55.580 --> 00:00:57.520
a finite-state automaton diagram

00:00:57.640 --> 00:01:01.980
for a programming identifier, yeah?

00:01:01.980 --> 00:01:05.340
And those of you from Electronics Engineering 
departments, you can say:

00:01:05.340 --> 00:01:09.160
"Yes! We've known about these for years! 
They're just state-machines."

00:01:09.160 --> 00:01:11.420
So here comes a state machine for...

00:01:12.400 --> 00:01:13.360
identifiers.

00:01:13.360 --> 00:01:16.800
You have to have a starting point, we had 
one in the car park

00:01:16.800 --> 00:01:18.800
and we have to have one here, now.

00:01:18.800 --> 00:01:20.720
And then, what I'm going to do

00:01:20.720 --> 00:01:21.740
is to say

00:01:21.740 --> 00:01:26.380
"Well, in order to get started on a programming 
language identifier,

00:01:26.440 --> 00:01:30.340
the rule is, you MUST start with a letter -

00:01:30.380 --> 00:01:31.640
not a digit."

00:01:31.640 --> 00:01:35.080
And i'll just denote any letter, for the moment, by L

00:01:35.120 --> 00:01:39.600
This state here, which I'm calling the 'tailpiece' of the identifier,

00:01:39.600 --> 00:01:41.280
is to take care of the fact

00:01:41.280 --> 00:01:42.160
eventually,

00:01:42.160 --> 00:01:44.960
that identifiers could just be a single letter.

00:01:44.960 --> 00:01:48.160
Its perfectly possible to say "int i;" 
[in the C language]

00:01:48.160 --> 00:01:50.500
It's just a single-letter identifier.

00:01:50.500 --> 00:01:52.880
So we've got to allow for that, it could be just one letter long,

00:01:53.320 --> 00:01:55.040
or, it can be a letter

00:01:55.040 --> 00:01:58.920
followed by ANY mix of letters and digits

00:01:58.940 --> 00:02:00.780
in ANY order.

00:02:00.800 --> 00:02:03.000
But eventually there has to be an end-marker.

00:02:03.000 --> 00:02:05.460
And of course, typically, in the C programming language,

00:02:05.460 --> 00:02:08.100
the end-marker is ; (semicolon).

00:02:08.200 --> 00:02:12.720
Okay; how do we do that 'any-mixutre-of-letters-and-digits' stuff

00:02:12.720 --> 00:02:15.340
Well, here's something new:

00:02:15.380 --> 00:02:19.680
inside this 'tailpiece' state, I am saying

00:02:19.940 --> 00:02:22.420
"You can go back into yourself...

00:02:22.620 --> 00:02:24.300
by accepting more letters."

00:02:24.500 --> 00:02:26.260
Down at the bottom I can say:

00:02:26.500 --> 00:02:27.860
"Accept a digit..."

00:02:27.860 --> 00:02:30.360
I'll call any digit just D at the moment.

00:02:30.500 --> 00:02:31.960
So can you see whats happening here?

00:02:32.040 --> 00:02:33.860
You go in, you MUST have an initial letter

00:02:33.980 --> 00:02:35.740
but once you're in the "T" state

00:02:35.740 --> 00:02:37.960
can come back into yourself!

00:02:37.960 --> 00:02:39.480
And that is recursion.

00:02:39.480 --> 00:02:42.520
But as you go back and come back into yourself,

00:02:42.520 --> 00:02:46.940
you must accept a letter, or you must find a digit on 
the input stream.

00:02:47.240 --> 00:02:49.320
Eventually, the party's got to end;

00:02:49.400 --> 00:02:51.120
you can't keep recurring for ever...

00:02:51.120 --> 00:02:53.460
No good at all, you will crash!

00:02:53.460 --> 00:02:55.140
You will run out of memory.

00:02:55.140 --> 00:02:59.120
So eventually there's gotta be a way out of all this 
morass.

00:02:59.120 --> 00:03:02.480
And what I'm going to do, just so I can link up with 
what Noam Chomsky did ...

00:03:02.480 --> 00:03:06.720
The great Noam really liked to think of EVERYTHING 
as a legal "sentence".

00:03:06.720 --> 00:03:09.240
Let's call it S

00:03:09.340 --> 00:03:11.480
We've mentioned this already that, you know, in car-park 
language a legal

00:03:11.480 --> 00:03:15.100
sentence is "10 10 5" because it adds up to 25, and so on.

00:03:15.260 --> 00:03:19.820
But to get into this final state which sometimes 
is called the "finish" state,

00:03:19.940 --> 00:03:22.740
sometimes, equally, it's called the "accept" state,

00:03:22.860 --> 00:03:24.120
then I need

00:03:24.120 --> 00:03:24.960
to see

00:03:25.440 --> 00:03:26.180
an E.

00:03:26.320 --> 00:03:29.140
And an E is a valid end-marker.

00:03:29.160 --> 00:03:33.960
And i'm saying that in... for this subset of the C-programming 
language we're doing here

00:03:34.100 --> 00:03:36.260
the end marker will be a ; (semicolon).

00:03:36.260 --> 00:03:39.540
I might, later on, extend that a bit because if I do 
some AWK examples

00:03:39.540 --> 00:03:43.160
I want to be able to accept "newline" [\n]  as being 
an end-marker as well.

00:03:43.160 --> 00:03:45.860
But for the moment let's say yes, it's ; (semicolon)

00:03:47.080 --> 00:03:48.160
So, that's it then!

00:03:48.200 --> 00:03:49.300
That is a state machine.

00:03:49.340 --> 00:03:53.420
The factor that's new in it, is the ability to do recursion.

00:03:53.780 --> 00:03:57.660
for as long as you want, until you finally bottle out 
of the whole thing,

00:03:57.740 --> 00:04:01.280
and take the end-marker and say "that's the end of my declaration."

00:04:01.280 --> 00:04:03.060
Okay!

00:04:03.060 --> 00:04:07.620
Well, what emerged from all of this stuff about state-machines

00:04:07.700 --> 00:04:12.270
and from Chomsky's work, in the mid to late 50's ?

00:04:12.720 --> 00:04:15.900
For every machine you can draw,

00:04:16.100 --> 00:04:16.960
like this,

00:04:16.960 --> 00:04:19.180
and this is a MACHINE interpretation

00:04:19.200 --> 00:04:20.320
of identifiers,

00:04:20.320 --> 00:04:23.120
there's always a grammatical alternative.

00:04:23.140 --> 00:04:26.680
And the more, if you like, mathematical-theoretician you are,

00:04:26.700 --> 00:04:32.480
the more you like rather abstruse, so-called "top-down", 
ways of thinking about things.

00:04:32.640 --> 00:04:35.880
So, Chomsky's notation - let me just start you off on this, for this:

00:04:35.880 --> 00:04:39.180
was to  say: Look, my goal is a sentence (S).

00:04:39.400 --> 00:04:41.540
But what seems to be the case is that

00:04:41.540 --> 00:04:44.460
to get to sentence (S), I've got to take

00:04:44.460 --> 00:04:48.020
first of all an L, and then that gets me into a T state.

00:04:48.260 --> 00:04:48.980
Okay...

00:04:49.300 --> 00:04:50.660
Chomsky notation! 

00:04:50.860 --> 00:04:54.220
You can read the arrow as being "...is defined as".

00:04:54.540 --> 00:04:55.600
A sentence...

00:04:56.000 --> 00:04:57.120
is defined as...

00:04:57.940 --> 00:04:58.840
an L,

00:04:59.200 --> 00:05:00.160
any letter,

00:05:00.180 --> 00:05:05.780
Followed by what I'll call a 'tail', or a 'tailpiece', 
of the identifier - L and T.

00:05:05.780 --> 00:05:06.280
Fine!

00:05:06.360 --> 00:05:10.040
Well what... let's just do one example of what a T can be.

00:05:10.040 --> 00:05:11.080
A T, look

00:05:11.440 --> 00:05:12.800
Let's take this one.

00:05:15.380 --> 00:05:21.420
Can be further defined as: yet another letter, 
followed by another T.

00:05:21.420 --> 00:05:24.200
Now look what's happening here, for the first time..

00:05:24.200 --> 00:05:30.440
A rule for T is developing another visit into a T on 
its right-hand side.

00:05:30.460 --> 00:05:33.500
This is technically called Right Recursive.

00:05:33.500 --> 00:05:36.640
And the Chomsky rules say you can be right recursive

00:05:36.740 --> 00:05:38.980
If you want to do it the other way around, perversely,

00:05:38.980 --> 00:05:41.740
and do T becomes T -&gt; T L that's okay!

00:05:41.740 --> 00:05:44.300
That's still within the Chomsky [Type 3] rules.

00:05:44.300 --> 00:05:47.560
It can be purely right recursive, or purely left recursive.

00:05:47.580 --> 00:05:50.540
I'll make it right recursive... it's a bit more intuitive to me.

00:05:50.540 --> 00:05:52.620
And,just in case you think:

00:05:52.620 --> 00:05:56.420
"Well, this is going to go on forever, and I can imagine 
the T becoming a D T

00:05:56.420 --> 00:05:58.300
and you're taking digits for ever...

00:05:58.300 --> 00:06:00.620
What's the thing that gets you out of all this in the end?"

00:06:00.660 --> 00:06:04.820
And the answer is - well - look back at the automaton 
diagram and say "Ah!,

00:06:04.820 --> 00:06:07.840
in the end you take the escape route!"

00:06:07.840 --> 00:06:10.120
You take a T is defined as being an E

00:06:10.320 --> 00:06:13.440
Thats one of the options. But what about E then?

00:06:13.600 --> 00:06:15.980
Ah! well here's a classic example then,

00:06:15.980 --> 00:06:20.080
of something that doesn't lead on to another rule,

00:06:20.340 --> 00:06:22.540
it leads, in tree terms, 

00:06:22.700 --> 00:06:26.380
to a leaf of the tree - a terminal symbol that goes 
nowhere else.

00:06:26.380 --> 00:06:29.260
And what I'm hoping is there, is just a semicolon.

00:06:29.580 --> 00:06:32.940
Of course you've spotted that the picture is completed --

00:06:32.940 --> 00:06:34.860
refer back to the automaton again --

00:06:34.860 --> 00:06:39.000
there's also a right-recursive option to say;

00:06:39.360 --> 00:06:41.420
"Yes, accept any digit

00:06:41.420 --> 00:06:42.720
and go back into T"

00:06:42.720 --> 00:06:45.280
...so you go back into yourself again.

00:06:45.300 --> 00:06:48.240
But equally you can now write at the bottom here --,

00:06:48.340 --> 00:06:49.780
and it's in the handout --

00:06:49.800 --> 00:06:52.440
we will do all of this in a linked handout --

00:06:52.440 --> 00:06:55.620
So do read the Info block of this video. Find out 
where the handout is,

00:06:56.520 --> 00:06:57.160
download it,

00:06:57.160 --> 00:06:57.720
read it.

00:06:57.880 --> 00:07:00.700
You'll find in this complete thing

00:07:00.700 --> 00:07:05.240
I've also said a letter can be anything 
from a to z,  or A to Z

00:07:05.240 --> 00:07:07.240
A digit can be anything from 0 to 9

00:07:07.240 --> 00:07:10.420
That's the way you finish off that grammar.

00:07:10.420 --> 00:07:13.960
This encourages you to think as computer scientists say:

00:07:14.040 --> 00:07:14.940
top-down

00:07:15.140 --> 00:07:18.900
You start with the purity of the abstraction of a "sentence",

00:07:18.960 --> 00:07:22.080
and then you develop the detail below it.

00:07:22.960 --> 00:07:26.460
Automata, really - I tried to show you the whole picture...

00:07:26.460 --> 00:07:30.460
You can... for me, from an automaton, get a rather...

00:07:30.460 --> 00:07:34.060
it's a bit top-down -- but you can always get more 
of an idea of how

00:07:34.180 --> 00:07:38.020
all this is built up in sequential steps going through it.

00:07:38.200 --> 00:07:41.620
There's nothing very magic there now,

00:07:41.620 --> 00:07:44.540
its just emphasising what I said at the start:

00:07:44.540 --> 00:07:49.980
To every machine-picture of a circle in 
the [Chomsky] hierarchy,

00:07:49.980 --> 00:07:52.100
there is a corresponding

00:07:53.540 --> 00:07:56.280
grammatical expression of it.

00:07:56.680 --> 00:07:59.960
It's just as we'll go out through that Chomsky hierarchy

00:07:59.960 --> 00:08:03.760
the machine interpretations become more complicated

00:08:03.760 --> 00:08:07.680
and more involving of this magic thing called "memory",

00:08:08.340 --> 00:08:11.940
as an ancillary to what state is your machine in.

00:08:12.180 --> 00:08:14.640
Down here in type 3, where we are at the moment,

00:08:14.660 --> 00:08:17.540
all we're saying is: "All you get is your states

00:08:17.680 --> 00:08:20.920
and yes, you've got to model those correctly",

00:08:20.920 --> 00:08:23.720
but you dont need ancillary memory for any purpose.

00:08:23.720 --> 00:08:26.420
Later on, we'll find that we do.

