WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:04.030
So finally, if the transaction commits by calling

00:00:04.030 --> 00:00:06.900
an end transaction, at that point, all the

00:00:06.900 --> 00:00:10.180
changes that have been made to persistent data

00:00:10.180 --> 00:00:12.880
structures have to be written to the log

00:00:12.880 --> 00:00:17.210
segment that records the redo logs for this

00:00:17.210 --> 00:00:20.250
application. So at this point, LRVM creates a

00:00:20.250 --> 00:00:23.140
redo log in memory of the changes That

00:00:23.140 --> 00:00:26.480
have been made to the persistent data structures.

00:00:26.480 --> 00:00:30.640
That is, this region that has been modified, it's

00:00:30.640 --> 00:00:32.770
going to be written as a redo log. See it doesn't

00:00:32.770 --> 00:00:37.000
know within that region, LRVM does not know within this

00:00:37.000 --> 00:00:41.050
region specified by base address and the length. Where exactly

00:00:41.050 --> 00:00:43.130
these data structures are contained. All it knows is

00:00:43.130 --> 00:00:46.200
that, this is the portion of the address space that

00:00:46.200 --> 00:00:48.670
is being modified in the critical section, that's why it's

00:00:48.670 --> 00:00:51.510
so important as a developer to make sure that the

00:00:51.510 --> 00:00:56.720
data structures that you manipulating within this region,

00:00:56.720 --> 00:01:00.670
that you have signalled LRVM. LRVM is basically thinking

00:01:00.670 --> 00:01:03.290
that there is a continuous set of addresses starting

00:01:03.290 --> 00:01:05.530
here for a certain length that may have been

00:01:05.530 --> 00:01:08.960
modified in this critical section. So, the log record

00:01:08.960 --> 00:01:11.400
that it writes is basically saying, here is the

00:01:11.400 --> 00:01:13.890
start address, and here is the number of bytes,

00:01:13.890 --> 00:01:17.040
and this is the new data that goes into

00:01:17.040 --> 00:01:19.770
this virtual address base, that's what LRVM is

00:01:19.770 --> 00:01:22.960
creating As a redo log in memory. Remember

00:01:22.960 --> 00:01:26.280
that redo log is itself a data structure

00:01:26.280 --> 00:01:29.490
of LVRM in memory which should not confuse the

00:01:29.490 --> 00:01:32.760
redo log with the external data segments. External

00:01:32.760 --> 00:01:36.340
data segments are the persistent versions of the in

00:01:36.340 --> 00:01:39.800
memory data structures. Now this redo log Is

00:01:39.800 --> 00:01:42.220
the changes that are being made to the in

00:01:42.220 --> 00:01:44.990
memory version of the persistent data structures, that

00:01:44.990 --> 00:01:47.900
have not should been committed to the disk in

00:01:47.900 --> 00:01:50.650
terms of internal data segments. It's now available

00:01:50.650 --> 00:01:52.860
at this point at the end of end transaction,

00:01:52.860 --> 00:01:56.560
it's available as a redo log entry. In

00:01:56.560 --> 00:02:00.370
the log segment which was initialized by this application.

00:02:00.370 --> 00:02:03.630
And the semantics of this transaction is, if it

00:02:03.630 --> 00:02:07.330
commits, then all of these changes are now available

00:02:07.330 --> 00:02:11.250
on persistent storage. So, what the LRVM library has to

00:02:11.250 --> 00:02:14.770
do is Not only create the redo log record, which

00:02:14.770 --> 00:02:17.440
is a data structure in memory so far as LRVM

00:02:17.440 --> 00:02:20.870
is concerned, but it also has to flush these redo logs

00:02:20.870 --> 00:02:23.830
to the disk at the point of commit. And only

00:02:23.830 --> 00:02:27.140
after that, we can assume that all the changes that have

00:02:27.140 --> 00:02:30.030
been made in this critical section Has been persistent on

00:02:30.030 --> 00:02:32.940
the disk, so he has to flush to the disk synchronously,

00:02:32.940 --> 00:02:36.370
meaning that this end transaction waits for this

00:02:36.370 --> 00:02:38.660
redo log to be flushed to the disk.

00:02:38.660 --> 00:02:43.700
At this point it is on the disk, however, again [LAUGH] in order to make sure

00:02:43.700 --> 00:02:47.820
that we can have a perfomance implementation of

00:02:47.820 --> 00:02:50.320
LRVM, there is a mode available in the

00:02:50.320 --> 00:02:54.270
end transaction, and this mode. Says no flush,

00:02:54.270 --> 00:02:57.990
meaning at the point of end transaction, you don't

00:02:57.990 --> 00:03:00.740
neccessarily have to block the caller for

00:03:00.740 --> 00:03:03.670
the flush to be complete. Transaction semantics would

00:03:03.670 --> 00:03:07.260
require that the process that is executing this

00:03:07.260 --> 00:03:09.920
commit should not be allowed to go past

00:03:09.920 --> 00:03:14.560
this point until. The synchronised IO has completed

00:03:14.560 --> 00:03:16.920
from the redo log into the disk but

00:03:16.920 --> 00:03:18.950
in order to make it a more performance

00:03:18.950 --> 00:03:22.990
conscious design, if you think that power failures

00:03:22.990 --> 00:03:26.530
array and the chance is that your server is

00:03:26.530 --> 00:03:29.170
going to crash is not very high, then you can

00:03:29.170 --> 00:03:33.440
go ahead and say as a developer that At

00:03:33.440 --> 00:03:36.550
the point of end transaction, I want you to committed

00:03:36.550 --> 00:03:39.770
by the way, you don't have to block me.

00:03:39.770 --> 00:03:42.350
In other words, this mode if it says no flush,

00:03:42.350 --> 00:03:45.310
it is saying that yes, I want you committed

00:03:45.310 --> 00:03:49.380
to the disk, but don't block me from going further.

00:03:49.380 --> 00:03:52.810
So, the changes that are being made As a

00:03:52.810 --> 00:03:55.810
redo log record will be committed to the disk

00:03:55.810 --> 00:04:00.180
later depending on this specification of no flush. So

00:04:00.180 --> 00:04:03.460
as a developer if I say no flush, then the

00:04:03.460 --> 00:04:06.120
redo log is not going to be synchronously written to

00:04:06.120 --> 00:04:08.440
the disk. So I can go ahead. I might

00:04:08.440 --> 00:04:11.910
do another transaction. That might write More log records,

00:04:11.910 --> 00:04:14.800
so I can review the number of I/O operations in

00:04:14.800 --> 00:04:17.200
committing these log records to the disk. So

00:04:17.200 --> 00:04:21.399
that's an opportunity that I'm exploiting by giving

00:04:21.399 --> 00:04:24.700
this no flush mode in the end transaction.

00:04:24.700 --> 00:04:28.140
So, it's an opportunity for the application to

00:04:28.140 --> 00:04:30.790
both reduce the number of I/O operations. And

00:04:30.790 --> 00:04:34.220
also make sure that the application is not

00:04:34.220 --> 00:04:37.220
blocked here, waiting for the synchronous rights to

00:04:37.220 --> 00:04:39.940
the disk to complete. So once the transaction

00:04:39.940 --> 00:04:43.210
is committed, meaning that LRVM has created

00:04:43.210 --> 00:04:48.130
the redo log for this particular transaction, then

00:04:48.130 --> 00:04:50.530
the undo record is no longer needed because

00:04:50.530 --> 00:04:53.790
undo record, if you recall, was created Just

00:04:53.790 --> 00:04:56.560
for the eventuality that this transaction may not

00:04:56.560 --> 00:04:59.360
commit, but now that the transaction is committed,

00:04:59.360 --> 00:05:01.740
we can throw away this undo record. On

00:05:01.740 --> 00:05:04.890
the other hand, instead of the end transaction,

00:05:04.890 --> 00:05:08.270
the transaction may actually abort. If it aborts,

00:05:08.270 --> 00:05:12.790
then what. LRVM has to do is restore

00:05:12.790 --> 00:05:15.310
this portion of the virtual address space of

00:05:15.310 --> 00:05:18.650
this process from the undo record so that we

00:05:18.650 --> 00:05:21.980
have gone back to the state before this

00:05:21.980 --> 00:05:24.170
transaction ever happened. So in other words, we

00:05:24.170 --> 00:05:27.980
are making whatever code that the server executed

00:05:27.980 --> 00:05:30.680
as a critical section code between begin transaction and

00:05:30.680 --> 00:05:33.640
abort transaction. To go away, and we

00:05:33.640 --> 00:05:37.830
restore the computation to its state before

00:05:37.830 --> 00:05:42.250
the begin transaction by copying the undo record into the portion of the virtual

00:05:42.250 --> 00:05:48.590
data space that has been modified through this critical section code. That in a

00:05:48.590 --> 00:05:55.720
nutshell is how you would use the primitives provided by LRVM in constructing A

00:05:55.720 --> 00:05:59.380
server, that, has certain persistence requirement.

