WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.110
BHAVIK SINGH: My
name is Bhavik Singh.

00:00:02.110 --> 00:00:05.036
I'm a product manager
on the Awareness API.

00:00:05.036 --> 00:00:06.800
MAURICE CHU: And my
name is Maurice Chu.

00:00:06.800 --> 00:00:08.482
I'm the [? engineer ?]
for Awareness.

00:00:08.482 --> 00:00:10.180
BHAVIK SINGH: And
today, we're going

00:00:10.180 --> 00:00:12.920
to be introducing a
new API that makes

00:00:12.920 --> 00:00:16.250
it super easy to make
your applications more

00:00:16.250 --> 00:00:17.810
context-aware.

00:00:17.810 --> 00:00:19.950
But first, I want to
be on the same page

00:00:19.950 --> 00:00:22.950
about why we're talking about
this in the first place.

00:00:22.950 --> 00:00:26.550
If you think back to the
keynote just a few hours ago,

00:00:26.550 --> 00:00:30.010
Sundar talked about how
mobile has taken off

00:00:30.010 --> 00:00:32.170
like a rocket ship.

00:00:32.170 --> 00:00:36.100
And what this has done is
pretty fundamentally changed

00:00:36.100 --> 00:00:40.440
the way that we, as users,
use our mobile phones,

00:00:40.440 --> 00:00:45.480
our wearables, and even
our IoT embedded devices.

00:00:45.480 --> 00:00:48.900
In the desktop world, I
would open up a computer

00:00:48.900 --> 00:00:51.630
and have these long
prologue sessions

00:00:51.630 --> 00:00:54.310
with multiple pages of content.

00:00:54.310 --> 00:00:57.720
I would input my intention into
the computer with a keyboard

00:00:57.720 --> 00:01:00.080
and a highly precise mouse.

00:01:00.080 --> 00:01:02.610
But with devices
that are much smaller

00:01:02.610 --> 00:01:04.720
and that come with
us everywhere we

00:01:04.720 --> 00:01:08.270
go, we now glance
at them in the bus,

00:01:08.270 --> 00:01:11.390
quickly, to check the calendar,
while walking to a meeting,

00:01:11.390 --> 00:01:14.200
and maybe even to play a game
while bored at an I/O talk,

00:01:14.200 --> 00:01:16.380
or something like that.

00:01:16.380 --> 00:01:20.190
So we, as developers,
understand these changes.

00:01:20.190 --> 00:01:22.970
And we've actually
made a lot of updates

00:01:22.970 --> 00:01:25.270
to our applications
to accommodate them.

00:01:25.270 --> 00:01:29.040
New user interface patterns have
emerged, like material design,

00:01:29.040 --> 00:01:30.740
that are much
lighter and simpler

00:01:30.740 --> 00:01:33.160
than their desktop counterparts.

00:01:33.160 --> 00:01:37.530
We have new ways of inputting
intention into our devices,

00:01:37.530 --> 00:01:40.820
like voice, stickers,
and emoji, that

00:01:40.820 --> 00:01:42.670
allow users to
express themselves

00:01:42.670 --> 00:01:46.440
without the need of a
large physical keyboard.

00:01:46.440 --> 00:01:50.550
But we at Google believe
that we can actually do more.

00:01:50.550 --> 00:01:53.270
Today, we're still
treating these phones

00:01:53.270 --> 00:01:56.330
like tiny computers.

00:01:56.330 --> 00:01:58.550
In fact, they're quite
different from computers,

00:01:58.550 --> 00:02:02.390
though, because they're
jam packed with sensors.

00:02:02.390 --> 00:02:05.740
And with powerful
algorithms, these sensors

00:02:05.740 --> 00:02:10.979
allow our phones to be aware
of the context around them.

00:02:10.979 --> 00:02:15.320
And in turn, the phone
can tell the applications

00:02:15.320 --> 00:02:20.110
where the user is, what they're
doing, and what's around them.

00:02:20.110 --> 00:02:21.830
You can use this
information to build

00:02:21.830 --> 00:02:24.810
more assistive and
aware applications that

00:02:24.810 --> 00:02:27.414
can help users in
their day to day lives.

00:02:27.414 --> 00:02:28.830
So to dive a little
deeper, I want

00:02:28.830 --> 00:02:31.780
to give you a few examples of
what a more aware an assistive

00:02:31.780 --> 00:02:33.710
world would look like.

00:02:33.710 --> 00:02:36.010
We all have a morning routine.

00:02:36.010 --> 00:02:40.420
And for me, personally, it
involves waking up to an alarm.

00:02:40.420 --> 00:02:43.050
And usually, at this point,
I'm incredibly groggy,

00:02:43.050 --> 00:02:45.460
because I slept way
too late last night.

00:02:45.460 --> 00:02:47.600
And I'm pissed
off with my phone,

00:02:47.600 --> 00:02:49.340
because I don't have
my first meeting

00:02:49.340 --> 00:02:50.820
until four hours from now.

00:02:50.820 --> 00:02:52.740
So why am I awake?

00:02:52.740 --> 00:02:55.540
Your alarm can be more
aware of these signals.

00:02:55.540 --> 00:02:58.040
It can understand
when you went to sleep

00:02:58.040 --> 00:03:00.320
and when your first
meeting is, to adjust

00:03:00.320 --> 00:03:02.580
the time that it wakes you up.

00:03:02.580 --> 00:03:05.070
So at this point, I'm having
a pretty decent morning.

00:03:05.070 --> 00:03:08.584
And the next big thing for me to
do is to get ready for the day.

00:03:08.584 --> 00:03:10.000
So usually, this
involves reaching

00:03:10.000 --> 00:03:11.950
for my phone to
check a weather app,

00:03:11.950 --> 00:03:13.560
or go to some weather service.

00:03:13.560 --> 00:03:16.920
And now I've become distracted
by this swarm of notifications.

00:03:16.920 --> 00:03:19.870
I have a Snapchat
I need to look at.

00:03:19.870 --> 00:03:22.550
And my day has become
pretty distracted.

00:03:22.550 --> 00:03:26.670
What if my phone found a
nearby TV through Chromecast

00:03:26.670 --> 00:03:29.600
and projected onto
it the day's weather?

00:03:29.600 --> 00:03:32.550
So now, as I walk from
my bed to my closet,

00:03:32.550 --> 00:03:35.710
with one easy glance, I
can see the day's weather

00:03:35.710 --> 00:03:38.690
and know that I've got
to get a rain jacket.

00:03:38.690 --> 00:03:40.860
Finally, at this point,
I'm pretty relaxed.

00:03:40.860 --> 00:03:43.720
I'm sitting at my breakfast
table having cereal.

00:03:43.720 --> 00:03:46.890
And while I'm doing that,
an assistant application

00:03:46.890 --> 00:03:49.410
is looking at driving
and location patterns

00:03:49.410 --> 00:03:51.890
across thousands of
users and realizes

00:03:51.890 --> 00:03:53.800
that there's a lot of traffic.

00:03:53.800 --> 00:03:57.130
So it wakes up a nearby speaker,
maybe my Google home device,

00:03:57.130 --> 00:03:58.894
and says, hey,
Bhavik, you should

00:03:58.894 --> 00:04:00.310
leave within the
next five minutes

00:04:00.310 --> 00:04:02.780
so you're not late for
your first meeting.

00:04:02.780 --> 00:04:06.050
This morning-- there is
usually this chaotic storm

00:04:06.050 --> 00:04:09.210
of applications, and services,
and questions-- is now

00:04:09.210 --> 00:04:12.780
this elegant, easy experience,
just because a few applications

00:04:12.780 --> 00:04:14.510
were more aware.

00:04:14.510 --> 00:04:16.589
Let's walk through
another example.

00:04:16.589 --> 00:04:19.180
We in the Bay Area
here love our parks.

00:04:19.180 --> 00:04:22.170
And for me personally, I love
running through Golden Gate

00:04:22.170 --> 00:04:23.120
Park.

00:04:23.120 --> 00:04:25.670
So very often, on a weekend
morning, I'll wake up,

00:04:25.670 --> 00:04:27.720
I'll strap on my
brand new Android

00:04:27.720 --> 00:04:31.750
Wear device and head out the
door into the California sun.

00:04:31.750 --> 00:04:34.100
Half an hour into the
run, I'm like, oh, shit,

00:04:34.100 --> 00:04:37.770
I forgot to actually
start tracking my run.

00:04:37.770 --> 00:04:40.940
What if your
wearable was smarter,

00:04:40.940 --> 00:04:43.770
and it automatically detected
that you were running

00:04:43.770 --> 00:04:46.090
and launched the
fitness app for you?

00:04:46.090 --> 00:04:48.540
It could then track
your distance,

00:04:48.540 --> 00:04:50.790
your cadence, and
your heart rate,

00:04:50.790 --> 00:04:53.580
so that you can automatically
keep track of those fitness

00:04:53.580 --> 00:04:58.230
goals and finally achieve
those New Year's resolutions.

00:04:58.230 --> 00:05:01.610
Now, music is a
big part of my run.

00:05:01.610 --> 00:05:04.680
What if, as soon as I
plugged in my headphones,

00:05:04.680 --> 00:05:07.870
I got a notification
from my favorite music

00:05:07.870 --> 00:05:12.010
application saying, here is
the best sunny running playlist

00:05:12.010 --> 00:05:13.270
for today?

00:05:13.270 --> 00:05:15.980
With one tap, I can
listen to the right music

00:05:15.980 --> 00:05:19.120
to keep my feet moving.

00:05:19.120 --> 00:05:21.140
Finally, if you
guys know me at all,

00:05:21.140 --> 00:05:24.790
you'll figure out that I get
distracted very, very easily.

00:05:24.790 --> 00:05:27.720
So while I'm on my run, I
just see this cute little dog.

00:05:27.720 --> 00:05:29.450
I've got to take a photo.

00:05:29.450 --> 00:05:32.880
So I reach for my phone,
and the launcher application

00:05:32.880 --> 00:05:37.310
knows that Bhavik often takes
photos when he's outside.

00:05:37.310 --> 00:05:41.500
So it puts the camera app right
in the center of my screen.

00:05:41.500 --> 00:05:43.820
And when I take this
photo, it tags it

00:05:43.820 --> 00:05:46.290
with not only the
location, but also

00:05:46.290 --> 00:05:48.140
the weather and the activity.

00:05:48.140 --> 00:05:50.210
So later on, I can
search for photos

00:05:50.210 --> 00:05:51.740
that I took while running.

00:05:51.740 --> 00:05:55.380
It can find that tag and
quickly show me this dog again.

00:05:55.380 --> 00:05:57.830
I'm happy now.

00:05:57.830 --> 00:06:00.530
Finally, I want to talk
through one more example.

00:06:00.530 --> 00:06:03.890
Driving is really, really
difficult to multitask.

00:06:03.890 --> 00:06:06.820
What if we lived in a world
where aware applications made

00:06:06.820 --> 00:06:07.910
it easier?

00:06:07.910 --> 00:06:10.880
So as soon as I got into
the car and started driving,

00:06:10.880 --> 00:06:15.250
my Bluetooth turned on and
connected to the car speakers.

00:06:15.250 --> 00:06:17.640
My favorite navigation
app opened up

00:06:17.640 --> 00:06:19.730
and launched into driving mode.

00:06:19.730 --> 00:06:23.470
Now, the user performs
one very simple action,

00:06:23.470 --> 00:06:27.950
which is starting to drive, and
his entire situation, scenario,

00:06:27.950 --> 00:06:31.620
and applications are set up
perfect for that journey.

00:06:31.620 --> 00:06:35.450
As he's along his way, I get
a notification on my phone

00:06:35.450 --> 00:06:38.270
that says, hey, you're
actually near a pharmacy,

00:06:38.270 --> 00:06:40.210
and you need to
pick up medications.

00:06:40.210 --> 00:06:43.360
Be sure to do this, because the
store's actually still open,

00:06:43.360 --> 00:06:46.430
and you're going to drive by it.

00:06:46.430 --> 00:06:50.080
These sorts of aware experiences
can really help your users,

00:06:50.080 --> 00:06:52.770
but also help you,
as developers.

00:06:52.770 --> 00:06:55.260
Tasks like launching
the Maps application

00:06:55.260 --> 00:06:58.080
while the user's driving,
or setting an alarm,

00:06:58.080 --> 00:07:01.330
are tasks that users
perform every single day.

00:07:01.330 --> 00:07:03.320
They're highly
critical for them.

00:07:03.320 --> 00:07:05.540
And if your
applications are aware,

00:07:05.540 --> 00:07:08.470
you can streamline
these critical tasks.

00:07:08.470 --> 00:07:12.450
In turn, your app becomes a
part of their habits, which

00:07:12.450 --> 00:07:15.360
can increase your retention.

00:07:15.360 --> 00:07:18.050
Suggesting the right
playlist when you're running,

00:07:18.050 --> 00:07:20.790
or reminding a user
to buy medication,

00:07:20.790 --> 00:07:24.250
is suggesting important
actions to your users, ones

00:07:24.250 --> 00:07:26.710
that they might
even have forgotten.

00:07:26.710 --> 00:07:28.980
And these sorts of
actions will mean

00:07:28.980 --> 00:07:32.060
that they're more likely to
click on your notifications,

00:07:32.060 --> 00:07:34.760
if those actions are
tailored, which can increase

00:07:34.760 --> 00:07:38.110
your click-through rate on the
very, very important actions

00:07:38.110 --> 00:07:40.200
that you care about.

00:07:40.200 --> 00:07:44.090
Finally, when you tag a
photo with weather and make

00:07:44.090 --> 00:07:47.880
it searchable later, or you
show me the rest of my day

00:07:47.880 --> 00:07:52.110
on a nearby TV, that's a moment
of delight for me as a user.

00:07:52.110 --> 00:07:54.450
It's something that makes
me want to rate your app 5

00:07:54.450 --> 00:07:56.960
stars in the store, or
tell my friends about it.

00:07:56.960 --> 00:07:59.320
And these sort of
moments of delight

00:07:59.320 --> 00:08:02.880
can drive more users
to your application.

00:08:02.880 --> 00:08:05.510
So whether you're a music
streaming service, a health

00:08:05.510 --> 00:08:09.540
and fitness tracker, a local
recommendation app, an alarm

00:08:09.540 --> 00:08:12.980
or driving app, or really any
other sort of application,

00:08:12.980 --> 00:08:16.920
you can use the power of aware
experiences to help your users,

00:08:16.920 --> 00:08:19.595
but also hit your
goals as developers.

00:08:19.595 --> 00:08:22.220
Now, at this point in the talk,
you guys must be thinking, wow,

00:08:22.220 --> 00:08:23.400
this is all really cool.

00:08:23.400 --> 00:08:26.200
I want to add it to my
roadmap, but this stuff

00:08:26.200 --> 00:08:28.450
is really difficult to build.

00:08:28.450 --> 00:08:31.110
That's where we come in.

00:08:31.110 --> 00:08:35.970
We, as a team, build Android
awareness and location APIs.

00:08:35.970 --> 00:08:39.799
And what we do is we bridge
the physical world where

00:08:39.799 --> 00:08:43.730
your users live, work, and play,
and the digital world where

00:08:43.730 --> 00:08:46.650
your applications
and Android are.

00:08:46.650 --> 00:08:49.390
We focus on this so
that you can focus

00:08:49.390 --> 00:08:52.680
on building more aware and
assistive context applications.

00:08:55.340 --> 00:08:57.920
To dive deeper, we
think about the signals

00:08:57.920 --> 00:09:00.500
that we provide in
three main buckets.

00:09:00.500 --> 00:09:03.580
The first one is where
you are, or location.

00:09:03.580 --> 00:09:06.660
Location is pretty fundamental
to the human experience, second

00:09:06.660 --> 00:09:08.280
only maybe to time.

00:09:08.280 --> 00:09:11.310
And so we fulfill this
need with three APIs.

00:09:11.310 --> 00:09:14.060
The first one is called
Fused Location Provider,

00:09:14.060 --> 00:09:17.390
and it provides highly
accurate latitude and longitude

00:09:17.390 --> 00:09:22.260
information by combining signals
across a variety of sensors.

00:09:22.260 --> 00:09:26.210
On top of Fused Location,
we have a geo-fencing API

00:09:26.210 --> 00:09:29.730
that lets you specify a latitude
and longitude and a radius,

00:09:29.730 --> 00:09:31.350
which is called a fence.

00:09:31.350 --> 00:09:32.990
When a user walks
into that fence,

00:09:32.990 --> 00:09:36.620
your app can wake up and
suggest or perform an action.

00:09:36.620 --> 00:09:39.120
If you want to learn
more about these APIs,

00:09:39.120 --> 00:09:42.760
visit our talk at 6:00 PM today
called Making Android Sensors

00:09:42.760 --> 00:09:44.299
and Location Work For You.

00:09:44.299 --> 00:09:45.840
Don't worry if you
didn't catch that.

00:09:45.840 --> 00:09:49.440
There's a link at the end with
all the talks that I mention.

00:09:49.440 --> 00:09:53.290
On top of lat/long, we also
have semantic location.

00:09:53.290 --> 00:09:56.320
What semantic location
means is I never

00:09:56.320 --> 00:09:58.500
say I'm at this
latitude or longitude,

00:09:58.500 --> 00:10:01.770
I say, hey, I'm at the
Starbucks, or the coffee shop.

00:10:01.770 --> 00:10:04.210
And maybe your app wants to
get photos of a Starbucks

00:10:04.210 --> 00:10:06.570
or get the open
hours of some place.

00:10:06.570 --> 00:10:08.930
If you're interested in
that type of information,

00:10:08.930 --> 00:10:10.540
you should check
out the Places API

00:10:10.540 --> 00:10:12.610
and learn more in
our talk tomorrow,

00:10:12.610 --> 00:10:15.560
Understand Your
Place in the World.

00:10:15.560 --> 00:10:18.270
We're very happy that
a lot of developers

00:10:18.270 --> 00:10:20.600
enjoy using our location APIs.

00:10:20.600 --> 00:10:22.170
And many of you
in the crowd today

00:10:22.170 --> 00:10:25.770
might have also been using
them in your own applications.

00:10:25.770 --> 00:10:29.190
Within Google, Google Maps
is the obvious example.

00:10:29.190 --> 00:10:32.480
It uses not only Fused
Location Provider, but also

00:10:32.480 --> 00:10:36.070
the Places API to help people
find their place in the world

00:10:36.070 --> 00:10:38.560
and navigate it.

00:10:38.560 --> 00:10:41.130
The second big bucket of
signals that we think about

00:10:41.130 --> 00:10:42.980
is what you're doing.

00:10:42.980 --> 00:10:46.650
Our phones today have
these tiny physical sensors

00:10:46.650 --> 00:10:50.840
that tell the phone where it
is with respect to gravity, how

00:10:50.840 --> 00:10:53.740
fast it's moving, what
its orientation is

00:10:53.740 --> 00:10:55.140
in the real world.

00:10:55.140 --> 00:10:57.170
And we build a layer
of intelligence

00:10:57.170 --> 00:10:59.410
on top of these
sensors to provide you,

00:10:59.410 --> 00:11:01.380
as a developer,
semantic information

00:11:01.380 --> 00:11:03.360
about what the user is doing.

00:11:03.360 --> 00:11:06.840
The first API for this is
called Activity Recognition,

00:11:06.840 --> 00:11:09.860
and it can tell you if a
user is running, walking,

00:11:09.860 --> 00:11:12.340
biking, driving.

00:11:12.340 --> 00:11:15.320
And we're excited to introduce
new types, like push ups,

00:11:15.320 --> 00:11:17.980
sit ups, and squats, this year.

00:11:17.980 --> 00:11:20.130
On top of Activity
Recognition, we

00:11:20.130 --> 00:11:22.600
have a very powerful
fitness platform

00:11:22.600 --> 00:11:26.680
that allows applications to
read and write fitness data.

00:11:26.680 --> 00:11:28.810
So if you're interested
in data like nutrition,

00:11:28.810 --> 00:11:31.620
or how much a person has
run, or what their weight is,

00:11:31.620 --> 00:11:34.610
be sure to go to our
talk tomorrow which talks

00:11:34.610 --> 00:11:37.320
about Android Wear and fitness.

00:11:37.320 --> 00:11:39.900
Finally, underlying
all these APIs

00:11:39.900 --> 00:11:42.330
is our core Android
Sensors platform.

00:11:42.330 --> 00:11:45.230
And it gives you
access to this raw data

00:11:45.230 --> 00:11:47.820
that lets you build
powerful games, and activity

00:11:47.820 --> 00:11:50.330
recognition, and
fitness experiences.

00:11:50.330 --> 00:11:52.510
If you want to learn more
about the Sensors API,

00:11:52.510 --> 00:11:55.820
visit our talk later today at
6:00 PM, Making Android Sensors

00:11:55.820 --> 00:11:59.340
and Location Work For You.

00:11:59.340 --> 00:12:02.360
Now, a lot of applications,
thousands of them,

00:12:02.360 --> 00:12:04.060
are using activity recognition.

00:12:04.060 --> 00:12:06.720
But one of my favorites
is Google Fit.

00:12:06.720 --> 00:12:10.540
It detects how much I've
walked, run, or biked every day,

00:12:10.540 --> 00:12:13.220
and combines that with
more advanced information

00:12:13.220 --> 00:12:18.550
so that I can keep track of my
fitness goals and get in shape.

00:12:18.550 --> 00:12:21.460
Finally, the last bucket of
signals that we think about

00:12:21.460 --> 00:12:24.530
is something that's up and
coming and incredibly exciting.

00:12:24.530 --> 00:12:26.710
And it's called,
"what's around you."

00:12:26.710 --> 00:12:29.360
In today's world, we have
more and more devices,

00:12:29.360 --> 00:12:34.000
phones, beacons, TVs, and they
all need to talk to each other.

00:12:34.000 --> 00:12:38.470
The nearby suite of APIs helps
you, as a developer, do this.

00:12:38.470 --> 00:12:42.680
Its Messages API allows you to
send messages between devices.

00:12:42.680 --> 00:12:44.720
And its Connections
API allows you

00:12:44.720 --> 00:12:47.780
to maintain persistent
connections between devices,

00:12:47.780 --> 00:12:50.680
which is useful for things
like multiplayer gaming.

00:12:50.680 --> 00:12:54.080
That team is also very
excited to announce a new API

00:12:54.080 --> 00:12:56.940
later today at
their talk, Nearby,

00:12:56.940 --> 00:12:58.820
Proximity Within
and Without Apps.

00:12:58.820 --> 00:13:01.770
So be sure to check that out.

00:13:01.770 --> 00:13:04.070
Chromecast is one of my
favorite applications

00:13:04.070 --> 00:13:06.850
that uses the Nearby
API, and they use it

00:13:06.850 --> 00:13:10.480
to power this amazing
feature called guest mode.

00:13:10.480 --> 00:13:13.010
Guest mode means, when
you come to my house,

00:13:13.010 --> 00:13:15.870
you can actually use my
Chromecast device, even

00:13:15.870 --> 00:13:18.410
if you're not on the
same Wi-Fi network,

00:13:18.410 --> 00:13:21.230
just because you're
physically close to it.

00:13:21.230 --> 00:13:23.940
That's awesome.

00:13:23.940 --> 00:13:25.180
So that's it, really.

00:13:25.180 --> 00:13:29.020
We have nine APIs that
tell you where you are,

00:13:29.020 --> 00:13:32.280
what you're doing,
and what's around you.

00:13:32.280 --> 00:13:36.100
Now, in building these APIs
and building the products that

00:13:36.100 --> 00:13:39.280
use them, we've learned
a lot about what

00:13:39.280 --> 00:13:43.057
signals are important for people
and where problems can arise.

00:13:43.057 --> 00:13:44.890
And so Maurice is going
to talk a little bit

00:13:44.890 --> 00:13:48.679
about those problems and some
solutions we have for you.

00:13:48.679 --> 00:13:49.470
MAURICE CHU: Great.

00:13:49.470 --> 00:13:50.902
Thanks, Bhavik.

00:13:50.902 --> 00:13:52.677
[APPLAUSE]

00:13:54.990 --> 00:13:55.490
All right.

00:13:55.490 --> 00:13:56.970
So we have nine APIs.

00:13:56.970 --> 00:13:59.730
These help you sense,
basically, where the user is,

00:13:59.730 --> 00:14:01.860
what they're doing,
and what's around them.

00:14:01.860 --> 00:14:04.890
And in my opinion, the
real power of these signals

00:14:04.890 --> 00:14:06.920
is not what you can do
with them individually,

00:14:06.920 --> 00:14:08.442
but when you combine
them together.

00:14:08.442 --> 00:14:10.150
And that way, you can
get a holistic view

00:14:10.150 --> 00:14:13.090
about what the user's
context really is.

00:14:13.090 --> 00:14:15.890
Now, we actually went back and
tried to put these together,

00:14:15.890 --> 00:14:18.072
and we did run into some issues.

00:14:18.072 --> 00:14:19.780
And what we saw is
that these APIs really

00:14:19.780 --> 00:14:21.339
look something more like this.

00:14:21.339 --> 00:14:22.880
They're individual
puzzle pieces that

00:14:22.880 --> 00:14:24.937
don't quite fit well together.

00:14:24.937 --> 00:14:27.270
So let me explain exactly
what I mean by how they're not

00:14:27.270 --> 00:14:30.090
quite fitting together well.

00:14:30.090 --> 00:14:30.590
All right.

00:14:30.590 --> 00:14:33.030
So let's go back to the example
of getting a reminder when

00:14:33.030 --> 00:14:34.650
you're driving near a store.

00:14:34.650 --> 00:14:38.880
Now, to implement this, we
have basically a geo-fence API.

00:14:38.880 --> 00:14:41.100
And that allows you to set
a region around the store

00:14:41.100 --> 00:14:43.040
to detect that the
user is in there.

00:14:43.040 --> 00:14:45.270
And then we also have the
activity recognition API

00:14:45.270 --> 00:14:47.850
that can detect whether the
user is actually in a vehicle

00:14:47.850 --> 00:14:49.120
or not.

00:14:49.120 --> 00:14:52.120
Now, it's easy enough to just
invoke both of these APIs,

00:14:52.120 --> 00:14:54.000
call into it, get
your callbacks,

00:14:54.000 --> 00:14:57.104
and then try to combine
those signals together.

00:14:57.104 --> 00:14:58.770
Now, at this point,
we haven't given you

00:14:58.770 --> 00:15:00.430
any tools or utilities
to actually put

00:15:00.430 --> 00:15:02.912
these signals together, so
you're kind of on your own.

00:15:02.912 --> 00:15:05.120
Now you say, OK, that's not
too big of a deal, right?

00:15:05.120 --> 00:15:07.590
Just have a couple of
callbacks, put them together.

00:15:07.590 --> 00:15:08.760
No big deal.

00:15:08.760 --> 00:15:11.600
But the big issue here
actually is system health.

00:15:11.600 --> 00:15:13.480
And what do I mean
by system health?

00:15:13.480 --> 00:15:16.220
So system health is everything
about how well the phone is

00:15:16.220 --> 00:15:17.430
functioning, right?

00:15:17.430 --> 00:15:19.870
And the two major factors
for mobile devices

00:15:19.870 --> 00:15:21.385
is the battery and the RAM.

00:15:21.385 --> 00:15:23.010
Now, battery is kind
of obvious, right?

00:15:23.010 --> 00:15:26.121
If you start using too much of
the battery, then it'll drain.

00:15:26.121 --> 00:15:28.370
And at that point, you have
a phone that doesn't work,

00:15:28.370 --> 00:15:30.170
which is not good for the user.

00:15:30.170 --> 00:15:32.179
And the second one is a
little bit more subtle.

00:15:32.179 --> 00:15:34.220
In terms of RAM usage, if
there's too many things

00:15:34.220 --> 00:15:37.630
running on the device, this
can cause some CPU thrashing.

00:15:37.630 --> 00:15:39.810
And the issue with that
is that, then, the phone

00:15:39.810 --> 00:15:40.800
starts to get sluggish.

00:15:40.800 --> 00:15:43.960
And that also leads to a
pretty poor user experience.

00:15:43.960 --> 00:15:45.735
OK, so why should
you care about this?

00:15:45.735 --> 00:15:47.360
Now, the thing is,
if the user suspects

00:15:47.360 --> 00:15:49.440
that it's your app
causing the battery drain,

00:15:49.440 --> 00:15:52.070
or it's your app causing that
phone to become sluggish,

00:15:52.070 --> 00:15:54.930
they may actually, in the
worst case, uninstall your app.

00:15:54.930 --> 00:15:57.790
And actually, that's probably
the worst case scenario here.

00:15:57.790 --> 00:15:59.770
And the irony of
the situation is

00:15:59.770 --> 00:16:02.890
that you've been trying
your best to actually target

00:16:02.890 --> 00:16:05.070
that very specific
situation when the user is

00:16:05.070 --> 00:16:07.110
driving near the
store, and hence

00:16:07.110 --> 00:16:08.860
make it very relevant to them.

00:16:08.860 --> 00:16:10.540
But if you don't do
that right, then you

00:16:10.540 --> 00:16:12.706
may end up actually causing
a worse user experience.

00:16:14.960 --> 00:16:15.460
All right.

00:16:15.460 --> 00:16:18.230
So let me dig a little bit
deeper about system health.

00:16:18.230 --> 00:16:21.110
So in this case, like I
said, probably the first way

00:16:21.110 --> 00:16:23.070
you could implement
this is to call

00:16:23.070 --> 00:16:26.230
into the geo-fence API and
the activity recognition API,

00:16:26.230 --> 00:16:28.290
get the callbacks, and
combine them together.

00:16:28.290 --> 00:16:29.441
Sure, no problem.

00:16:29.441 --> 00:16:31.690
But now that you have two
signals you're hooking into,

00:16:31.690 --> 00:16:33.230
you actually have
some other options

00:16:33.230 --> 00:16:36.150
to do things a little bit
in a more optimized way.

00:16:36.150 --> 00:16:38.650
So another way to
do it is, instead,

00:16:38.650 --> 00:16:41.020
just turn on the geo-fence
API first, make sure

00:16:41.020 --> 00:16:43.320
that the user actually
is near the store.

00:16:43.320 --> 00:16:45.070
And in that case, and
only in that case,

00:16:45.070 --> 00:16:46.920
do you turn on the
activity recognition

00:16:46.920 --> 00:16:49.177
to determine that the
user is in the vehicle.

00:16:49.177 --> 00:16:50.760
And of course, there's
an alternative.

00:16:50.760 --> 00:16:52.176
You can do the
opposite direction.

00:16:52.176 --> 00:16:55.280
Instead, call into the
activity recognition API first.

00:16:55.280 --> 00:16:57.560
And then, when you detect
that the user is driving,

00:16:57.560 --> 00:17:00.920
then call into
the geo-fence API.

00:17:00.920 --> 00:17:04.135
Now, the big question is, which
is the best for system health?

00:17:04.135 --> 00:17:05.760
You know, which is
the one that's going

00:17:05.760 --> 00:17:07.240
to drain the battery the least?

00:17:07.240 --> 00:17:11.869
Which one's going to cause the
least amount of CPU thrashing?

00:17:11.869 --> 00:17:12.369
All right.

00:17:12.369 --> 00:17:13.980
So it's actually
a trick question.

00:17:13.980 --> 00:17:15.630
There's actually
many, many factors

00:17:15.630 --> 00:17:18.117
that really go into
determining which

00:17:18.117 --> 00:17:20.700
is going to be better than the
other, things like the sampling

00:17:20.700 --> 00:17:22.960
rate that you choose
for each of these.

00:17:22.960 --> 00:17:25.210
And then there's also lots
of implementation details

00:17:25.210 --> 00:17:26.780
that you may not
be aware of, things

00:17:26.780 --> 00:17:28.670
like how many times
the radio wakes up,

00:17:28.670 --> 00:17:30.784
and how much time
the CPU is using.

00:17:30.784 --> 00:17:32.200
And there's also,
all the way down

00:17:32.200 --> 00:17:35.721
to the hardware, how much power
that the sensor is drawing.

00:17:35.721 --> 00:17:36.220
All right.

00:17:36.220 --> 00:17:38.210
So anyways, if you have
two, you may say, OK,

00:17:38.210 --> 00:17:39.300
that's not too bad.

00:17:39.300 --> 00:17:41.591
And you can do some work to
tune it, and then make sure

00:17:41.591 --> 00:17:43.080
that system health is good.

00:17:43.080 --> 00:17:46.570
But really, the power is again
combining all these signals.

00:17:46.570 --> 00:17:48.192
So imagine scaling
up to all of these.

00:17:48.192 --> 00:17:49.650
Now, at this point,
you're actually

00:17:49.650 --> 00:17:51.520
facing a pretty tough problem.

00:17:51.520 --> 00:17:53.161
There's a lot more
code to handle.

00:17:53.161 --> 00:17:55.660
And if you're really going to
try to optimize system health,

00:17:55.660 --> 00:17:57.570
I mean, now you're talking
exponentially more different

00:17:57.570 --> 00:17:59.440
combinations you have
to consider in order

00:17:59.440 --> 00:18:01.520
to do this well.

00:18:01.520 --> 00:18:04.940
The other issue is that the
more APIs that you hook into,

00:18:04.940 --> 00:18:07.400
that means the more your
app will actually wake up.

00:18:07.400 --> 00:18:09.775
And this actually causes some
pretty bad memory pressure.

00:18:09.775 --> 00:18:11.441
And in the end, it
could actually end up

00:18:11.441 --> 00:18:12.610
causing a sluggish phone.

00:18:12.610 --> 00:18:14.151
And again, we don't
really want that.

00:18:16.730 --> 00:18:19.870
So the issues today,
again, are in order for you

00:18:19.870 --> 00:18:22.480
to hook into these APIs, you do
have to learn multiple of them

00:18:22.480 --> 00:18:24.450
for each type of context signal.

00:18:24.450 --> 00:18:26.460
And the issue is that
there are subtleties you

00:18:26.460 --> 00:18:28.900
have to learn about, things like
how do you choose a sampling

00:18:28.900 --> 00:18:29.130
rate?

00:18:29.130 --> 00:18:31.180
And there are things
called like priority level.

00:18:31.180 --> 00:18:33.620
And these are pretty
subtle things to figure out

00:18:33.620 --> 00:18:35.149
how to use properly.

00:18:35.149 --> 00:18:36.940
The other thing is,
now, there's no support

00:18:36.940 --> 00:18:38.520
for combining these
signals together.

00:18:38.520 --> 00:18:40.379
So you have to write
that code to do that.

00:18:40.379 --> 00:18:42.670
And then, furthermore, even
after you've done all that,

00:18:42.670 --> 00:18:45.128
you may end up with battery
drain and sluggishness that can

00:18:45.128 --> 00:18:48.122
be pretty difficult to solve.

00:18:48.122 --> 00:18:49.580
So our challenge
was to figure out,

00:18:49.580 --> 00:18:52.380
can we make these individual
puzzle pieces fit together

00:18:52.380 --> 00:18:54.500
into a whole puzzle?

00:18:54.500 --> 00:18:55.950
And our goals
here, we'll say, is

00:18:55.950 --> 00:18:58.600
it possible to arrange
our APIs so that we

00:18:58.600 --> 00:19:00.679
can make it very
easy to combine them

00:19:00.679 --> 00:19:02.470
together, and so that
you can really target

00:19:02.470 --> 00:19:04.150
those specific situations?

00:19:04.150 --> 00:19:06.875
At the same time, these
issues with system health,

00:19:06.875 --> 00:19:08.250
is there something
that we can do

00:19:08.250 --> 00:19:10.330
to help you guys all do that?

00:19:10.330 --> 00:19:12.320
Well, I'm very excited
today to announce

00:19:12.320 --> 00:19:14.930
that we have a solution
for this problem,

00:19:14.930 --> 00:19:16.977
and we call it
the Awareness API.

00:19:16.977 --> 00:19:18.570
[APPLAUSE]

00:19:18.570 --> 00:19:19.256
Thank you.

00:19:23.220 --> 00:19:23.720
All right.

00:19:23.720 --> 00:19:27.350
So the Awareness API, it's
a unified sensing platform

00:19:27.350 --> 00:19:31.040
enabling apps to be aware of
all aspects of a user's context,

00:19:31.040 --> 00:19:33.422
while managing the
system health for you.

00:19:33.422 --> 00:19:34.880
We've designed this
so that you can

00:19:34.880 --> 00:19:38.070
engage your users in very
targeted, very specific,

00:19:38.070 --> 00:19:39.770
contextual conditions.

00:19:39.770 --> 00:19:42.040
Now, it'll be available
shortly after I/O

00:19:42.040 --> 00:19:44.255
as a Google Play services API.

00:19:44.255 --> 00:19:45.880
Now, for now, let me
give you a preview

00:19:45.880 --> 00:19:48.980
about what we have to offer.

00:19:48.980 --> 00:19:50.560
So for our first
release, we'll be

00:19:50.560 --> 00:19:53.565
offering seven different
context types right off the bat.

00:19:53.565 --> 00:19:55.190
So this will help
you answer questions,

00:19:55.190 --> 00:19:58.577
like where is the user,
via the lat/long locations,

00:19:58.577 --> 00:20:00.410
as well as the semantic
notions of locations

00:20:00.410 --> 00:20:01.660
that we call Places.

00:20:01.660 --> 00:20:02.870
Also, what's around you?

00:20:02.870 --> 00:20:06.860
Things like can we detect nearby
beacons around you, just so you

00:20:06.860 --> 00:20:08.620
have an idea of what's there.

00:20:08.620 --> 00:20:12.770
We also have some code to
help you basically combine,

00:20:12.770 --> 00:20:15.730
tie in, with some of these
other conditions as well.

00:20:15.730 --> 00:20:17.240
And also, to answer
questions like,

00:20:17.240 --> 00:20:19.560
what is the user doing
via the Activities?

00:20:19.560 --> 00:20:21.810
And we also found that there's
some interesting device

00:20:21.810 --> 00:20:24.490
states, things like whether
the headphones are plugged in,

00:20:24.490 --> 00:20:29.819
which have some notion about how
the user is using that device.

00:20:29.819 --> 00:20:31.610
And finally, things
like ambient conditions

00:20:31.610 --> 00:20:34.270
in the environment, things
like weather, which actually do

00:20:34.270 --> 00:20:36.350
have an effect on
user's behavior,

00:20:36.350 --> 00:20:40.511
like today, being extremely
hot and muggy outside.

00:20:40.511 --> 00:20:41.010
All right.

00:20:41.010 --> 00:20:43.051
So now, the biggest
challenge that we had to face

00:20:43.051 --> 00:20:45.710
was, how do we simplify these
nine APIs into something that's

00:20:45.710 --> 00:20:47.910
much easier to use,
and also allows

00:20:47.910 --> 00:20:49.991
you to combine the
signals together?

00:20:49.991 --> 00:20:52.490
And the way we approached this
problem is to consider, well,

00:20:52.490 --> 00:20:54.290
why don't we think
about the common usage

00:20:54.290 --> 00:20:57.090
patterns of how app developers
want to use these APIs?

00:20:57.090 --> 00:20:57.590
Right?

00:20:57.590 --> 00:20:59.798
What are the ways you want
to actually use and access

00:20:59.798 --> 00:21:01.170
these context signals?

00:21:01.170 --> 00:21:03.020
And we came up with
two of them that covers

00:21:03.020 --> 00:21:05.610
a good, broad range of these.

00:21:05.610 --> 00:21:07.700
So the first one is
called the Fence API.

00:21:07.700 --> 00:21:09.790
And this is a
callback style API.

00:21:09.790 --> 00:21:12.010
The idea is that you
register a listener

00:21:12.010 --> 00:21:14.139
with a specific set of
conditions that you want,

00:21:14.139 --> 00:21:15.430
and then that gets called back.

00:21:15.430 --> 00:21:17.029
And then you can
react accordingly.

00:21:17.029 --> 00:21:19.320
Now, the word "fence" may
seem a little bit mysterious,

00:21:19.320 --> 00:21:22.220
but it comes from geo-fencing
where the idea there

00:21:22.220 --> 00:21:24.470
was to set up a
geo-fence, and then

00:21:24.470 --> 00:21:27.540
the software would then detect
whether the user is in there.

00:21:27.540 --> 00:21:30.397
Now, we realize this is actually
a generalizable concept.

00:21:30.397 --> 00:21:32.480
We don't have to be doing
just fences in location,

00:21:32.480 --> 00:21:35.320
but also fences in all
types of user state,

00:21:35.320 --> 00:21:37.440
things like is the
user walking or not,

00:21:37.440 --> 00:21:39.430
are the headphones
plugged in, and is it

00:21:39.430 --> 00:21:41.020
hot and sunny outside.

00:21:41.020 --> 00:21:42.910
So all of these we
can consider a fence.

00:21:42.910 --> 00:21:44.880
And that's what the
Fence API gives you.

00:21:44.880 --> 00:21:45.380
All right.

00:21:45.380 --> 00:21:47.213
So let me give you a
concrete example of how

00:21:47.213 --> 00:21:50.270
we can use this Fence API to
accomplish one of the scenarios

00:21:50.270 --> 00:21:52.110
that we talked about earlier.

00:21:52.110 --> 00:21:53.920
Now, this one had
two parts to it.

00:21:53.920 --> 00:21:56.340
The first was the
user gets in the car.

00:21:56.340 --> 00:21:58.410
And then, now your
device goes, amazingly,

00:21:58.410 --> 00:21:59.869
into this in-car mode.

00:21:59.869 --> 00:22:02.160
And the second half of it
was, as you're driving nearby

00:22:02.160 --> 00:22:08.321
the pharmacy, you actually get a
reminder to pick up medication.

00:22:08.321 --> 00:22:08.820
All right.

00:22:08.820 --> 00:22:11.610
So with the Fence API,
the first thing to do

00:22:11.610 --> 00:22:14.114
is determine the condition
that you want to detect.

00:22:14.114 --> 00:22:16.280
So that first one was to
detect whether the user has

00:22:16.280 --> 00:22:17.395
started driving.

00:22:17.395 --> 00:22:18.770
Now in this case,
it's very easy.

00:22:18.770 --> 00:22:21.890
We have built in a subset
of primitive fences

00:22:21.890 --> 00:22:23.320
based on the context types.

00:22:23.320 --> 00:22:25.310
And we have the
detected activity fence.

00:22:25.310 --> 00:22:26.780
And you just merely
specify, OK, I

00:22:26.780 --> 00:22:30.220
want to know when the user is
starting to be in a vehicle.

00:22:30.220 --> 00:22:33.800
And this condition is true when
you first get into the vehicle.

00:22:33.800 --> 00:22:34.980
Simple.

00:22:34.980 --> 00:22:35.480
OK.

00:22:35.480 --> 00:22:37.355
Now, the other condition
is a little bit more

00:22:37.355 --> 00:22:39.460
involved, if I want to
be driving near the store

00:22:39.460 --> 00:22:40.860
while it's open.

00:22:40.860 --> 00:22:43.720
So in this case, we'll
start off at the bottom.

00:22:43.720 --> 00:22:46.290
The things you need are,
first, a kind of a geo-fence

00:22:46.290 --> 00:22:48.400
or a location fence
around the store.

00:22:48.400 --> 00:22:50.040
This is what that first line is.

00:22:50.040 --> 00:22:52.130
Now, the second line
shows a condition

00:22:52.130 --> 00:22:54.310
to basically detect when
the user is actually

00:22:54.310 --> 00:22:55.690
in the vehicle itself.

00:22:55.690 --> 00:22:57.609
And that's what that
DetectedActivityfence is.

00:22:57.609 --> 00:22:59.150
And the last one is
we probably don't

00:22:59.150 --> 00:23:01.870
want to show notifications
when the store is not open.

00:23:01.870 --> 00:23:03.460
So what we can do
instead is create

00:23:03.460 --> 00:23:06.290
a time fence that is only
true between those open hours.

00:23:06.290 --> 00:23:07.920
In this case, we show
it in the example

00:23:07.920 --> 00:23:10.110
between 10:00 AM and 6:00 PM.

00:23:10.110 --> 00:23:14.100
Now, one thing to think
about, what is a fence here?

00:23:14.100 --> 00:23:16.320
Well, it's actually
a Boolean condition.

00:23:16.320 --> 00:23:18.422
And it takes a value
of true or false.

00:23:18.422 --> 00:23:19.880
And actually, that
gives us our key

00:23:19.880 --> 00:23:21.420
to how to combine these things.

00:23:21.420 --> 00:23:22.952
Once you have
Boolean conditions,

00:23:22.952 --> 00:23:25.410
you can combine them with the
Boolean operators of AND, OR,

00:23:25.410 --> 00:23:26.600
and NOT.

00:23:26.600 --> 00:23:28.510
So in this point, for
this specific example,

00:23:28.510 --> 00:23:30.024
let's actually do that.

00:23:30.024 --> 00:23:31.190
So we want to combine these.

00:23:31.190 --> 00:23:34.682
And the AND operator is
what's appropriate here.

00:23:34.682 --> 00:23:36.140
So now, we have
our full condition,

00:23:36.140 --> 00:23:40.310
which is true when the user is
in the area around the store,

00:23:40.310 --> 00:23:43.490
the user is driving,
and it's open hours.

00:23:43.490 --> 00:23:44.390
OK.

00:23:44.390 --> 00:23:45.890
So now you have your two fences.

00:23:45.890 --> 00:23:47.750
And we need to
basically register

00:23:47.750 --> 00:23:49.700
this with the Awareness API.

00:23:49.700 --> 00:23:53.000
So you create your fence update
request, add your fences,

00:23:53.000 --> 00:23:54.690
and then just call updateFences.

00:23:54.690 --> 00:23:55.190
And voila.

00:23:55.190 --> 00:23:57.340
Your fences are registered.

00:23:57.340 --> 00:23:58.990
A couple of things to note.

00:23:58.990 --> 00:24:00.730
We do understand
that, probably, you

00:24:00.730 --> 00:24:03.870
want to key off of multiple
conditions of the user.

00:24:03.870 --> 00:24:06.980
So our API is situated
so you can actually

00:24:06.980 --> 00:24:08.520
add multiple fences.

00:24:08.520 --> 00:24:10.647
And in doing so, you need
to also give us a key.

00:24:10.647 --> 00:24:12.480
That's what that first
string, startDriving,

00:24:12.480 --> 00:24:14.490
and drivingNearStore
are, so that you

00:24:14.490 --> 00:24:18.167
can know which of the fences are
actually calling back to you.

00:24:18.167 --> 00:24:20.750
The other thing to note is that
the pending intents can all go

00:24:20.750 --> 00:24:22.200
to the same callback mechanism.

00:24:22.200 --> 00:24:23.680
That will help
simplify your code

00:24:23.680 --> 00:24:25.240
to handle all the callbacks.

00:24:25.240 --> 00:24:28.990
And the last point is that
you pass in a pending intent.

00:24:28.990 --> 00:24:31.240
And the nice thing there is
that your app doesn't even

00:24:31.240 --> 00:24:32.032
have to be running.

00:24:32.032 --> 00:24:33.823
We'll be computing
these conditions for you

00:24:33.823 --> 00:24:35.699
and give you the callback
at the right time.

00:24:35.699 --> 00:24:37.740
And this is how we're
helping with system health.

00:24:37.740 --> 00:24:40.400
Your app can stay completely
out of the way of the system.

00:24:40.400 --> 00:24:43.746
And yet, you can react when
these conditions happen.

00:24:43.746 --> 00:24:44.443
[APPLAUSE]

00:24:44.443 --> 00:24:44.942
Ah.

00:24:44.942 --> 00:24:45.772
Thank You.

00:24:50.170 --> 00:24:50.670
OK.

00:24:50.670 --> 00:24:51.920
So now, let's finish this off.

00:24:51.920 --> 00:24:53.660
Let's write the callback.

00:24:53.660 --> 00:24:56.710
In this case, we show receiving
the callbacks via a broadcast

00:24:56.710 --> 00:24:57.780
receiver.

00:24:57.780 --> 00:24:59.830
You get your data
through the intent.

00:24:59.830 --> 00:25:02.260
We have a utility function to
extract that state into what

00:25:02.260 --> 00:25:03.700
we call a fence state.

00:25:03.700 --> 00:25:05.310
And now, for the
first condition,

00:25:05.310 --> 00:25:07.184
if you know that the
key that you have passed

00:25:07.184 --> 00:25:08.650
in-- in this case,
startDriving--

00:25:08.650 --> 00:25:11.450
is true, then based on the
condition of the state,

00:25:11.450 --> 00:25:14.410
you can show the Maps
app in the in-car mode.

00:25:14.410 --> 00:25:16.820
And for the second
one, you can also key

00:25:16.820 --> 00:25:19.310
off of that one, which
is drivingNearStore,

00:25:19.310 --> 00:25:22.780
check the state of the fence,
and then show the reminder.

00:25:22.780 --> 00:25:24.530
So this is our Fence
API, and it allows

00:25:24.530 --> 00:25:27.320
you to react when the user is
in very specific contextual

00:25:27.320 --> 00:25:30.480
conditions that you specify.

00:25:30.480 --> 00:25:30.980
All right.

00:25:30.980 --> 00:25:33.530
So let's talk about
the Snapshot API now.

00:25:33.530 --> 00:25:35.227
This is polling style API.

00:25:35.227 --> 00:25:37.310
And the idea is that your
app, while it's running,

00:25:37.310 --> 00:25:40.310
can just ask what the current
values of these different types

00:25:40.310 --> 00:25:43.460
of contexts are, things like
the location, the activity,

00:25:43.460 --> 00:25:46.370
the weather, et cetera.

00:25:46.370 --> 00:25:48.130
So let's go back
to the scenario.

00:25:48.130 --> 00:25:50.740
So at this point, Bhavik
saw this cute little dog.

00:25:50.740 --> 00:25:53.160
So he wanted to snap
a picture of that.

00:25:53.160 --> 00:25:54.970
And on top of that,
what he wanted to do

00:25:54.970 --> 00:25:57.830
was tag it with the
current semantic location

00:25:57.830 --> 00:26:00.960
and the weather.

00:26:00.960 --> 00:26:02.520
OK, and this is really easy.

00:26:02.520 --> 00:26:05.109
Really, we have an API,
called the Snapshot API.

00:26:05.109 --> 00:26:06.650
You just call two
methods, one to get

00:26:06.650 --> 00:26:10.216
the places, others to get the
weather, pull out the data.

00:26:10.216 --> 00:26:11.590
Then you can tag
it to your photo

00:26:11.590 --> 00:26:14.210
and share it with the world.

00:26:14.210 --> 00:26:15.710
One thing we did
do is that we added

00:26:15.710 --> 00:26:19.280
caching underneath to
basically not allow

00:26:19.280 --> 00:26:21.700
you to have to think too
much about what kind of cost

00:26:21.700 --> 00:26:23.440
there is to call
into these APIs.

00:26:26.070 --> 00:26:28.494
OK, so to summarize,
the Awareness API

00:26:28.494 --> 00:26:30.410
will be releasing with
seven different context

00:26:30.410 --> 00:26:32.890
types and two simple APIs.

00:26:32.890 --> 00:26:34.890
Now, we've designed this
so that, in the future,

00:26:34.890 --> 00:26:37.700
we can add more context
types, and yet not increase

00:26:37.700 --> 00:26:41.170
the complexity it takes for you
to incorporate the new signals

00:26:41.170 --> 00:26:42.022
as we go forward.

00:26:42.022 --> 00:26:43.730
And then, of course,
the other part of it

00:26:43.730 --> 00:26:45.700
is that we try to handle
system health for you,

00:26:45.700 --> 00:26:47.440
so that you don't have
to worry about it.

00:26:47.440 --> 00:26:49.340
And by simplifying
this for you, you

00:26:49.340 --> 00:26:51.685
can focus your efforts on
building that great experience

00:26:51.685 --> 00:26:52.310
for your users.

00:26:54.590 --> 00:26:55.090
All right.

00:26:55.090 --> 00:26:57.090
So let me take a step
back and talk a little bit

00:26:57.090 --> 00:27:00.560
about where I feel the Awareness
API fits in the grander scheme

00:27:00.560 --> 00:27:01.790
of things.

00:27:01.790 --> 00:27:03.950
Personally, when
I first got a hold

00:27:03.950 --> 00:27:06.860
of a smartphone, the thing that
really amazed me and really

00:27:06.860 --> 00:27:10.356
kind of excited me was the fact
that it had a bunch of sensors.

00:27:10.356 --> 00:27:11.980
And just having
sensors was not enough.

00:27:11.980 --> 00:27:14.355
It was the fact that people
actually carried these phones

00:27:14.355 --> 00:27:15.690
with them everywhere they went.

00:27:15.690 --> 00:27:19.000
Now, once you do that, there's
a real opportunity for the phone

00:27:19.000 --> 00:27:21.550
to really know who
you are, what you

00:27:21.550 --> 00:27:24.810
care about, what your
intentions are, et cetera.

00:27:24.810 --> 00:27:27.780
And if the phone can know that
and your apps can know that,

00:27:27.780 --> 00:27:29.640
then I think we could
build these kinds

00:27:29.640 --> 00:27:33.000
of magical experiences that have
basically never existed before.

00:27:33.000 --> 00:27:35.710
And we have a kind of a new
relationship with computing.

00:27:35.710 --> 00:27:37.140
So that was kind
of the moon shot.

00:27:37.140 --> 00:27:38.556
And that's what
we've been working

00:27:38.556 --> 00:27:40.850
towards trying to get to.

00:27:40.850 --> 00:27:43.940
Now, the Awareness API is kind
of a step in that direction.

00:27:43.940 --> 00:27:46.400
And what we've done with
that is to basically take

00:27:46.400 --> 00:27:49.210
these separate, individual
sensing capabilities,

00:27:49.210 --> 00:27:52.440
put them all together
into a unified platform.

00:27:52.440 --> 00:27:55.610
And whether that's a big step
or a small step, time will tell.

00:27:55.610 --> 00:27:58.430
But it is a step to simplify
things so that now you

00:27:58.430 --> 00:28:00.580
can build better experiences.

00:28:00.580 --> 00:28:02.250
Now, this is
incredibly powerful.

00:28:02.250 --> 00:28:04.501
And we'll be putting it
soon into your hands.

00:28:04.501 --> 00:28:06.000
But really, to reach
this moon shot,

00:28:06.000 --> 00:28:08.270
it's not about the technical
capabilities as well.

00:28:08.270 --> 00:28:11.010
There's other things
that are of concern.

00:28:11.010 --> 00:28:13.980
And one of those things is
privacy, of course, right?

00:28:13.980 --> 00:28:16.760
So we must be respectful
of the user's privacy.

00:28:16.760 --> 00:28:20.090
And the real challenge here is
to build those experiences that

00:28:20.090 --> 00:28:22.880
really simplify and delight
the users in ways that they

00:28:22.880 --> 00:28:24.970
have never felt before.

00:28:24.970 --> 00:28:28.680
And as far as I can tell, in
order to get to that moon shot,

00:28:28.680 --> 00:28:31.450
I don't see any path to
success that doesn't include

00:28:31.450 --> 00:28:33.110
respecting the user's privacy.

00:28:33.110 --> 00:28:34.569
And I'm sure you'll
agree, as well.

00:28:34.569 --> 00:28:35.401
[SCATTERED APPLAUSE]

00:28:35.401 --> 00:28:36.298
Yeah, thank you.

00:28:36.298 --> 00:28:38.990
Yeah.

00:28:38.990 --> 00:28:39.490
All right.

00:28:39.490 --> 00:28:43.180
So part of the addressing
privacy is what we can do.

00:28:43.180 --> 00:28:46.060
And the Awareness API is built
in with a permission model,

00:28:46.060 --> 00:28:47.770
using Android's
permission model.

00:28:47.770 --> 00:28:50.470
So for each type of
context, we do protect it

00:28:50.470 --> 00:28:52.740
against one of these
Android permissions,

00:28:52.740 --> 00:28:54.960
so that we can ensure that
the user has given consent

00:28:54.960 --> 00:28:57.720
to your app to actually
access that signal.

00:28:57.720 --> 00:28:59.780
Now, most of these
are pretty intuitive.

00:28:59.780 --> 00:29:01.420
But things like
weather, for example,

00:29:01.420 --> 00:29:02.860
does require
ACCESS_FINE_LOCATION

00:29:02.860 --> 00:29:04.110
permissions.

00:29:04.110 --> 00:29:06.120
And the reason is
because we're giving you

00:29:06.120 --> 00:29:10.350
the weather at the
user's current location.

00:29:10.350 --> 00:29:12.330
OK, so that's what we've done.

00:29:12.330 --> 00:29:14.610
But of course, addressing
privacy doesn't end there.

00:29:14.610 --> 00:29:16.350
It really has to be end-to-end.

00:29:16.350 --> 00:29:19.180
And that includes, in your
app, what kind of experience

00:29:19.180 --> 00:29:20.370
that you're building.

00:29:20.370 --> 00:29:23.380
Now the two basic principles we
follow for addressing privacy

00:29:23.380 --> 00:29:25.320
are transparency and control.

00:29:25.320 --> 00:29:27.460
And transparency is
about, basically,

00:29:27.460 --> 00:29:29.999
letting the user know what
it is that we're using,

00:29:29.999 --> 00:29:32.040
what personal information
we're using about them,

00:29:32.040 --> 00:29:34.350
as well as what
we're using it for.

00:29:34.350 --> 00:29:36.420
And the second half of it
is, of course, control.

00:29:36.420 --> 00:29:38.620
We have to let the
users-- give them

00:29:38.620 --> 00:29:41.816
the ability to actually activate
or deactivate these features.

00:29:41.816 --> 00:29:43.690
So just to give you a
quick example-- I mean,

00:29:43.690 --> 00:29:46.520
if I plug in my headphone,
and my favorite music

00:29:46.520 --> 00:29:48.510
app automatically
starts playing music,

00:29:48.510 --> 00:29:50.460
I mean, that's
fantastic, but only

00:29:50.460 --> 00:29:53.100
if it was transparent to me
that that was going to happen,

00:29:53.100 --> 00:29:54.520
and I have the option
to actually turn it off

00:29:54.520 --> 00:29:55.311
if I don't want it.

00:29:57.810 --> 00:29:58.754
OK.

00:29:58.754 --> 00:30:00.670
I think one of the
immediate uses of Awareness

00:30:00.670 --> 00:30:02.870
will be to post
notifications to the user.

00:30:02.870 --> 00:30:06.370
And we do ask that you try to
be as specific and as targeted

00:30:06.370 --> 00:30:07.430
as possible.

00:30:07.430 --> 00:30:10.060
That way, you'll basically hit
the user at the most relevant

00:30:10.060 --> 00:30:12.390
moments, when they actually
want to take action

00:30:12.390 --> 00:30:14.350
on that notification
you send them.

00:30:14.350 --> 00:30:17.040
One thing to note though,
as an Android [INAUDIBLE],

00:30:17.040 --> 00:30:19.550
users can disable
notifications for your app.

00:30:19.550 --> 00:30:21.820
And also the notification
shade is a shared resource

00:30:21.820 --> 00:30:22.927
across all apps.

00:30:22.927 --> 00:30:24.760
So of course, you need
to give them a reason

00:30:24.760 --> 00:30:28.200
to turn your notifications on.

00:30:28.200 --> 00:30:31.360
And finally, we've done our best
to be as efficient as possible

00:30:31.360 --> 00:30:33.120
to address system health.

00:30:33.120 --> 00:30:37.880
But please be mindful about what
fences you happen to register.

00:30:37.880 --> 00:30:40.430
Make sure that you weigh it
against the user experience

00:30:40.430 --> 00:30:42.660
enhancement that
you're providing.

00:30:42.660 --> 00:30:45.362
Now again, to conclude, the
Awareness API is coming soon.

00:30:45.362 --> 00:30:47.820
And I very much look forward
to seeing what you guys end up

00:30:47.820 --> 00:30:49.220
building with it.

00:30:49.220 --> 00:30:51.576
Now at this point, let me
turn this over to Bhavik,

00:30:51.576 --> 00:30:53.242
and he'll tell us
what our partners have

00:30:53.242 --> 00:30:54.956
been up to with this.

00:30:54.956 --> 00:30:55.872
[APPLAUSE]

00:30:55.872 --> 00:30:57.510
BHAVIK SINGH: Thanks, Maurice.

00:31:00.160 --> 00:31:00.660
Cool.

00:31:00.660 --> 00:31:03.830
So as Maurice has shown
you, we have a new API

00:31:03.830 --> 00:31:06.800
that makes it super easy for
your applications to be aware.

00:31:06.800 --> 00:31:08.650
We let this out to the
wild a little early

00:31:08.650 --> 00:31:10.150
and let a few
partners play with it.

00:31:10.150 --> 00:31:13.090
And I'd love to show you
what they've been able to do.

00:31:13.090 --> 00:31:15.910
Trulia is an online
real estate agent.

00:31:15.910 --> 00:31:18.020
And one of the big
parts of their service

00:31:18.020 --> 00:31:20.880
is helping their users
and potential home buyers

00:31:20.880 --> 00:31:24.840
find and visit open houses.

00:31:24.840 --> 00:31:26.820
Something they've
struggled with in the past

00:31:26.820 --> 00:31:29.390
is, when should I send
these users a notification

00:31:29.390 --> 00:31:31.610
to remind them to
visit an open house?

00:31:31.610 --> 00:31:33.820
Sure, I could do it when
they're near the area where

00:31:33.820 --> 00:31:36.180
the house is, but what if
they're driving through it,

00:31:36.180 --> 00:31:39.430
or it's a rainy day, and
they're just not feeling it?

00:31:39.430 --> 00:31:42.270
So with the Awareness
API's Fence feature,

00:31:42.270 --> 00:31:44.980
they've actually been able
to create highly tailored

00:31:44.980 --> 00:31:46.730
notifications.

00:31:46.730 --> 00:31:49.470
You will only get a
notification for an open house

00:31:49.470 --> 00:31:53.230
if you're in the right location,
if the weather is nice,

00:31:53.230 --> 00:31:55.960
and you're walking, and
not driving or running

00:31:55.960 --> 00:31:57.580
through the area.

00:31:57.580 --> 00:32:00.840
They're very excited to see how
this more tailored notification

00:32:00.840 --> 00:32:03.500
will increase click-throughs
on this very important action

00:32:03.500 --> 00:32:06.410
for them.

00:32:06.410 --> 00:32:10.280
One of my favorite photo
editing applications is Aviary.

00:32:10.280 --> 00:32:12.300
It's a powerful
editing tool that

00:32:12.300 --> 00:32:17.570
lets you take and edit photos
to really capture a moment.

00:32:17.570 --> 00:32:19.060
One of the big
features they have

00:32:19.060 --> 00:32:21.870
is a stream where you can see
photos that other people have

00:32:21.870 --> 00:32:24.590
taken, to get some inspiration.

00:32:24.590 --> 00:32:27.540
A thing that they realize is
the way that you take and edit

00:32:27.540 --> 00:32:30.420
a photo depends a
lot on your context.

00:32:30.420 --> 00:32:33.070
The way I capture a
rainy day in Seattle

00:32:33.070 --> 00:32:35.040
is going to be very
different from the way

00:32:35.040 --> 00:32:38.090
I capture a sunny day
in Yosemite, or maybe

00:32:38.090 --> 00:32:42.080
a sweltering day, like
I/O. And so what they've

00:32:42.080 --> 00:32:44.100
been able to do with
the Awareness API

00:32:44.100 --> 00:32:47.830
is use Snapshot to understand
what your place is,

00:32:47.830 --> 00:32:50.760
what your semantic location
is, and the weather,

00:32:50.760 --> 00:32:54.950
to show you photos that could
inspire you to capture and edit

00:32:54.950 --> 00:32:57.620
that perfect moment.

00:32:57.620 --> 00:33:00.920
Finally, music is really
near and dear to my heart.

00:33:00.920 --> 00:33:05.610
And Superplayer Music is a
music streaming application

00:33:05.610 --> 00:33:08.290
that is very popular
in Latin America.

00:33:08.290 --> 00:33:10.600
They have this
amazing assistant bot

00:33:10.600 --> 00:33:13.430
feature where you can ask
it for recommendations,

00:33:13.430 --> 00:33:15.950
and it will return
recommendations to you.

00:33:15.950 --> 00:33:18.950
What they've been able to do
with Awareness and plan to do

00:33:18.950 --> 00:33:23.000
is merge those functionalities
with context signals.

00:33:23.000 --> 00:33:25.370
So that now, when I've
just finished running

00:33:25.370 --> 00:33:28.220
and I'm looking for something
to cool down while stretching,

00:33:28.220 --> 00:33:30.250
when I get to the
gym, or maybe when

00:33:30.250 --> 00:33:32.270
I'm about to go
on a long journey,

00:33:32.270 --> 00:33:34.440
they can suggest the right
music for the moment.

00:33:37.590 --> 00:33:39.970
Those are not the only
partners that we work with.

00:33:39.970 --> 00:33:41.860
And we're very
lucky to have been

00:33:41.860 --> 00:33:44.710
involved with a wide
variety of applications.

00:33:44.710 --> 00:33:46.540
In the health and
fitness space, Runkeeper

00:33:46.540 --> 00:33:50.240
is thinking about tagging its
running posts with weather.

00:33:50.240 --> 00:33:53.150
We have local applications,
like Trulia and Zillow,

00:33:53.150 --> 00:33:55.620
that help people find
the things that they need

00:33:55.620 --> 00:33:57.790
and the homes that they
want while around them.

00:33:57.790 --> 00:34:00.490
Grubhub is also thinking about
how they can integrate weather

00:34:00.490 --> 00:34:04.620
with their features,
and so is Kekanto.

00:34:04.620 --> 00:34:06.660
We've got photo
editing applications,

00:34:06.660 --> 00:34:10.389
like I showed you with Aviary,
but also Picsart, and even

00:34:10.389 --> 00:34:13.560
OS level functionality,
like Nova Launcher, which

00:34:13.560 --> 00:34:16.420
is thinking about completely
rewriting its launcher

00:34:16.420 --> 00:34:18.239
to be more context-aware
and show you

00:34:18.239 --> 00:34:20.040
the right apps at
the right time,

00:34:20.040 --> 00:34:21.530
or Zedge, which
is going to allow

00:34:21.530 --> 00:34:24.250
for customizations of
ringtones and wallpapers,

00:34:24.250 --> 00:34:27.409
based on context.

00:34:27.409 --> 00:34:30.360
With these partners, we're
just getting started.

00:34:30.360 --> 00:34:33.949
We have nine APIs across where
you are, what you're doing,

00:34:33.949 --> 00:34:36.210
and what's around
you, and a brand new

00:34:36.210 --> 00:34:39.199
API that we're launching today,
called the Awareness API,

00:34:39.199 --> 00:34:42.040
that merges all of this
information in a battery

00:34:42.040 --> 00:34:44.250
and system health-friendly way.

00:34:44.250 --> 00:34:46.719
I'm very, very excited
to see what all of you

00:34:46.719 --> 00:34:48.480
are going to do with it.

00:34:48.480 --> 00:34:51.889
If you're interested, sign up
for our preview so that we can

00:34:51.889 --> 00:34:55.435
remind you when the API comes
out and get you off of the list

00:34:55.435 --> 00:35:00.360
to get an early look at
developers.google.com/awareness.

00:35:00.360 --> 00:35:03.070
If you're interested in diving
deeper into any of the other

00:35:03.070 --> 00:35:07.410
APIs I talked about today,
visit g.co/AwarenessIO,

00:35:07.410 --> 00:35:10.771
to see a full list of our
other talks and open hours.

00:35:10.771 --> 00:35:11.270
Thanks.

00:35:11.270 --> 00:35:14.040
Me and Maurice will be around,
just outside, for questions

00:35:14.040 --> 00:35:15.240
after.

00:35:15.240 --> 00:35:17.390
[MUSIC PLAYING]

