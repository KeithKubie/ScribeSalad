WEBVTT
Kind: captions
Language: en

00:00:06.660 --> 00:00:07.660
&gt;&gt;Daniel Sandler: Hi, everybody.

00:00:07.660 --> 00:00:08.790
My name is Dan Sandler.

00:00:08.790 --> 00:00:11.410
I'm here to talk a little bit about Daydream.

00:00:11.410 --> 00:00:15.059
Oh, I recovered that slide so we're ahead
of time.

00:00:15.059 --> 00:00:16.250
Good.

00:00:16.250 --> 00:00:23.600
I'm on the system UI team, which is part of
the Android platform team, which is what exactly

00:00:23.600 --> 00:00:26.630
is -- it's typically made up of two pieces
underneath the hood -- and if you haven't

00:00:26.630 --> 00:00:30.270
built your own RAM because you don't live
in a cabin in the woods, you may not be familiar

00:00:30.270 --> 00:00:31.270
with these.

00:00:31.270 --> 00:00:35.140
One of them is the launcher -- you've probably
seen that -- and the other one is everything

00:00:35.140 --> 00:00:36.140
else.

00:00:36.140 --> 00:00:40.430
So system UI covers basically the launcher
plus all the other pixels on the display that

00:00:40.430 --> 00:00:43.770
don't belong to the app, notifications, navigation,
gestures.

00:00:43.770 --> 00:00:45.980
I see we have an obsolete screen shot here.

00:00:45.980 --> 00:00:49.520
I'll put that away.

00:00:49.520 --> 00:00:56.890
And in Android 4.2 we brought in something
called Daydream as part of the system UI.

00:00:56.890 --> 00:00:59.180
It's a screen saver essentially.

00:00:59.180 --> 00:01:01.149
So why did we bring this in Android?

00:01:01.149 --> 00:01:06.039
To understand where this future comes from
you have to go back -- set the way-back machine

00:01:06.039 --> 00:01:10.940
to 2009 and the Motorola Droid or Milestone
depending on your locale.

00:01:10.940 --> 00:01:12.750
A great little device, built like a tank.

00:01:12.750 --> 00:01:16.410
I remember when I thought this was a huge
phone.

00:01:16.410 --> 00:01:21.140
And this was -- we're really excited to launch
this with a number of really cool accessories.

00:01:21.140 --> 00:01:25.630
It was the first time we had done this with
a Google-involved Android phone.

00:01:25.630 --> 00:01:28.090
We had the desk dock or the multimedia station.

00:01:28.090 --> 00:01:32.110
We had the car dock.

00:01:32.110 --> 00:01:33.929
We did not ship that one.

00:01:33.929 --> 00:01:37.670
[ Laughter ]
&gt;&gt;Daniel Sandler: But what all these have

00:01:37.670 --> 00:01:42.770
in common is that they invoked a dock mode
in the platform which is new to Eclair.

00:01:42.770 --> 00:01:46.200
And what happens in dock mode is you launch
dock apps.

00:01:46.200 --> 00:01:47.200
What is dock apps?

00:01:47.200 --> 00:01:51.000
Well, in case you haven't seen it, here is
a screen shot of the beautiful Eclair dock

00:01:51.000 --> 00:01:56.150
experience which was built into the desktop
application in Android 2.

00:01:56.150 --> 00:01:58.340
And it's got all kinds of great features.

00:01:58.340 --> 00:01:59.340
Look at all this stuff.

00:01:59.340 --> 00:02:00.340
It's got your next alarm.

00:02:00.340 --> 00:02:01.460
It shows the date.

00:02:01.460 --> 00:02:03.000
You can see your wallpaper through it.

00:02:03.000 --> 00:02:07.060
It shows the battery right underneath the
real battery.

00:02:07.060 --> 00:02:11.720
You can switch it to night mode so it doesn't
blind you or the person next to you while

00:02:11.720 --> 00:02:12.720
you're sleeping.

00:02:12.720 --> 00:02:18.250
It shows the weather and then it has all this
other stuff, these crazy little buttons at

00:02:18.250 --> 00:02:19.250
the bottom.

00:02:19.250 --> 00:02:20.460
So you can go to the alarm because you need
to change your alarm.

00:02:20.460 --> 00:02:23.470
There was a slide show button that did something
weird in gallery.

00:02:23.470 --> 00:02:27.360
There was a music button that did something
else.

00:02:27.360 --> 00:02:29.140
And what is this doing here?

00:02:29.140 --> 00:02:34.540
Why do we have another home key again not
so far from the main home key?

00:02:34.540 --> 00:02:39.270
Well, we decided that if your phone was in
a dock that the most important button on the

00:02:39.270 --> 00:02:43.850
device should take you back to that dock app
experience so it's really convenient too,

00:02:43.850 --> 00:02:50.580
but then you needed a way to actually get
home so we added this whole rigmarole.

00:02:50.580 --> 00:02:52.060
What a mess.

00:02:52.060 --> 00:02:56.740
And I should mention we discovered when we
were building this that if you show this great

00:02:56.740 --> 00:03:00.410
glanceable information on a dock for hours
at a time, say while you're sleeping or while

00:03:00.410 --> 00:03:05.290
you're at work, it can actually burn into
the LCD or the OTA screen.

00:03:05.290 --> 00:03:06.710
How very 1990s, right?

00:03:06.710 --> 00:03:12.490
So we had to implement a screen saver into
the dock application, and every other dock

00:03:12.490 --> 00:03:15.680
application would have to do the same thing.

00:03:15.680 --> 00:03:20.080
We toned it down a little bit in Honeycomb
and ICS, but dock apps has basically been

00:03:20.080 --> 00:03:22.940
the same since then.

00:03:22.940 --> 00:03:26.530
Most of the code inside it is not dedicated
to showing the time.

00:03:26.530 --> 00:03:27.880
It's not all that hard.

00:03:27.880 --> 00:03:31.990
Most of the code in there is to give you a
way to get back to the launcher, to handle

00:03:31.990 --> 00:03:35.760
the screen saver timeout, to track the power
status of the device.

00:03:35.760 --> 00:03:41.010
There's a whole bunch of fussy way clock things
you have to do to be a well-behaved dock application,

00:03:41.010 --> 00:03:43.209
but the basic idea was kind of interesting.

00:03:43.209 --> 00:03:45.520
Dock apps are like bow ties.

00:03:45.520 --> 00:03:46.520
They're cool.

00:03:46.520 --> 00:03:49.610
You have this customized user experience for
a particular situation.

00:03:49.610 --> 00:03:54.970
I've set my device in this little box that
is going to make it do something different.

00:03:54.970 --> 00:03:58.790
It's very easy for me to just drop it into
that dock and get a cool experience, full

00:03:58.790 --> 00:04:02.900
of this glanceable, sort of ambient information
that is otherwise not appropriate to show

00:04:02.900 --> 00:04:06.630
on your device because you want to save power
and it's not plugged in, so you turn the screen

00:04:06.630 --> 00:04:08.700
off.

00:04:08.700 --> 00:04:10.730
But dock apps were pretty annoying, too.

00:04:10.730 --> 00:04:12.430
We had to do this whole home key capture thing.

00:04:12.430 --> 00:04:16.590
We got a bunch of feedback from users that
it was confusing, that they couldn't go home

00:04:16.590 --> 00:04:24.030
when the device was in a dock or that they
had to figure out and learn whether to actually

00:04:24.030 --> 00:04:25.030
support that.

00:04:25.030 --> 00:04:29.240
And it required you to shell out 50 bucks
for a special piece of hardware just to have

00:04:29.240 --> 00:04:33.000
the privilege of being able to use this dock
application.

00:04:33.000 --> 00:04:36.740
Or like my friend Jeff in the Cambridge office,
you can build your own.

00:04:36.740 --> 00:04:38.889
This would be back to the cabin in the woods
department.

00:04:38.889 --> 00:04:40.200
It had some nice features.

00:04:40.200 --> 00:04:43.910
He put in an NFC button so it would launch
his favorite application when he put his Nexus

00:04:43.910 --> 00:04:44.970
S in there.

00:04:44.970 --> 00:04:47.620
It sunk into the charger at the bottom, went
with any decor.

00:04:47.620 --> 00:04:49.990
It was very nice.

00:04:49.990 --> 00:04:51.880
But the developer experience for this was
awful, too.

00:04:51.880 --> 00:04:54.940
Not just confusing for users, but as a developer
now you have decide, okay, am I going to take

00:04:54.940 --> 00:04:56.430
over the home key or not?

00:04:56.430 --> 00:05:02.400
And if I do -- if you don't take over the
home key there's no way for the user to get

00:05:02.400 --> 00:05:07.740
back to your application so you've got to
do an ongoing notification, which is gross

00:05:07.740 --> 00:05:08.740
for other reasons.

00:05:08.740 --> 00:05:12.710
By the way, I'm also the notifications guy,
so I don't like those ongoings.

00:05:12.710 --> 00:05:16.390
And then if you do decide to take over the
home key then now you need to allocate space

00:05:16.390 --> 00:05:20.870
in the UI for a launcher button, which if
you're trying to create a delightful experience,

00:05:20.870 --> 00:05:23.630
it is not the first thing you want to do.

00:05:23.630 --> 00:05:26.680
So as a developer you have to deal with the
whole issue of way clocks.

00:05:26.680 --> 00:05:30.600
If you put your device in the dock, it goes
on the charger and if you want a nice dock

00:05:30.600 --> 00:05:31.900
app it's got to keep the screen on.

00:05:31.900 --> 00:05:36.080
So you've got to hold a way clock, but now
you have to watch and see if the device is

00:05:36.080 --> 00:05:39.650
removed from the dock and remove the way clock
and all this kind of stuff.

00:05:39.650 --> 00:05:42.560
And then you have to deal with the whole screen
saver thing so you have to implement your

00:05:42.560 --> 00:05:47.210
own idle timer, which means you have to duplicate
the idle time and functionality in the system.

00:05:47.210 --> 00:05:49.180
It's a mess.

00:05:49.180 --> 00:05:51.449
We wanted to do something better for developers.

00:05:51.449 --> 00:05:53.290
We wanted to do something better for users.

00:05:53.290 --> 00:05:54.770
That's where Daydream comes from.

00:05:54.770 --> 00:05:59.000
We kind of introduced it quietly along with
Android 4.2 last fall.

00:05:59.000 --> 00:06:06.430
There was a blog post about it later -- late
in the winter to sort of describe it.

00:06:06.430 --> 00:06:09.979
We haven't really talked a lot about it, but
that's what I'm here to do today.

00:06:09.979 --> 00:06:15.910
Features of the Daydream -- the Daydream API
is they should be really easy for developers

00:06:15.910 --> 00:06:16.910
to write.

00:06:16.910 --> 00:06:20.639
It should be a fun afternoon project for you
to sit down, take existing pieces of your

00:06:20.639 --> 00:06:25.280
apps UI or build something completely from
scratch and have something running quickly.

00:06:25.280 --> 00:06:30.660
They need to be launched automatically for
the user just like dock apps did so it's easy

00:06:30.660 --> 00:06:33.540
to get into this feature.

00:06:33.540 --> 00:06:38.110
We want to offer the full API available to
Android applications.

00:06:38.110 --> 00:06:41.940
Any way you want to draw, any way you want
to interact with the users, Daydreams should

00:06:41.940 --> 00:06:43.820
allow you to do it.

00:06:43.820 --> 00:06:46.910
And we wanted to give you a whole bunch of
other stuff from the platform to make writing

00:06:46.910 --> 00:06:52.560
this whole thing a lot simpler.

00:06:52.560 --> 00:06:55.910
So Daydream is a feature that the user will
encounter when?

00:06:55.910 --> 00:06:57.500
Well, while docked.

00:06:57.500 --> 00:07:02.150
If the user drops the device into one of these
things, Daydream will start automatically

00:07:02.150 --> 00:07:04.229
if this little button is ticked.

00:07:04.229 --> 00:07:07.580
The second option allows you to Daydream more
like a screen saver, so any time it's plugged

00:07:07.580 --> 00:07:11.710
into something that will charge it, your device
will idle out.

00:07:11.710 --> 00:07:15.000
Instead of into a screen that is off, it will
idle out into Daydream.

00:07:15.000 --> 00:07:19.460
So Daydream basically replaces the screen
off when the device is charging if you have

00:07:19.460 --> 00:07:21.270
that second button ticked.

00:07:21.270 --> 00:07:24.880
And the third radio button will allow you
to cover both cases.

00:07:24.880 --> 00:07:28.330
The default for Android 4.2 is just while
docked so that people aren't surprised by

00:07:28.330 --> 00:07:34.700
this new behavior, but this is where you would
go to inside settings and display to change

00:07:34.700 --> 00:07:38.580
the way that Daydream starts up.

00:07:38.580 --> 00:07:41.990
Daydream will not, however, automatically
start if something is holding a wake lock.

00:07:41.990 --> 00:07:46.080
So if something else, some other app is keeping
the screen on, Daydream isn't going to automatically

00:07:46.080 --> 00:07:50.680
turn on after an idle timeout, which I told
you Daydream is supposed to replace screen

00:07:50.680 --> 00:07:52.100
off so this sort of works.

00:07:52.100 --> 00:07:54.410
This follows those rules.

00:07:54.410 --> 00:07:58.150
It also works really well because apps that
hold the screen on like that are sending us

00:07:58.150 --> 00:07:59.670
a really strong signal.

00:07:59.670 --> 00:08:01.250
They do not want to be obscured.

00:08:01.250 --> 00:08:02.430
The user is looking at this.

00:08:02.430 --> 00:08:06.170
Even though the user is not touching it, the
user is not tickling that idle timeout, the

00:08:06.170 --> 00:08:09.700
app should continue to be visible by the user.

00:08:09.700 --> 00:08:13.270
So video playback is the canonical example.

00:08:13.270 --> 00:08:17.539
Other dock or kiosk apps sort of bespoke experiences
where the user might not be interacting with

00:08:17.539 --> 00:08:20.710
it for awhile, but it needs to keep that screen
on and not obscured.

00:08:20.710 --> 00:08:23.889
Again, they hold a way clock, Daydream won't
trigger.

00:08:23.889 --> 00:08:25.009
Finally games.

00:08:25.009 --> 00:08:28.740
Most games are interacting with, so it's not
a problem, but if there were some kind of

00:08:28.740 --> 00:08:32.130
game where you were going to stare at it for
a very long time -- maybe it's an eye-tracking

00:08:32.130 --> 00:08:37.820
game, I don't know -- if you hold a way clock,
Daydream isn't going to start on top of it.

00:08:37.820 --> 00:08:40.699
So I said that Daydream should be easy to
write.

00:08:40.699 --> 00:08:44.069
This is essentially the core of the implementation
here.

00:08:44.069 --> 00:08:47.619
Step 1, extend DreamService and Step 2, go
nuts.

00:08:47.619 --> 00:08:49.339
Do whatever you want.

00:08:49.339 --> 00:08:54.220
We'll get back to lots more code examples
in a little bit, but right now I want to draw

00:08:54.220 --> 00:08:59.630
your attention to we've got a method on dreaming
started and we want to override and set a

00:08:59.630 --> 00:09:05.470
content view just like we were in activity
and then whatever you want to do, you're free

00:09:05.470 --> 00:09:08.110
to do that until the Daydream ends.

00:09:08.110 --> 00:09:12.279
So you might ask okay, if this is so much
like an activity why not make an activity?

00:09:12.279 --> 00:09:13.920
Why make it a service?

00:09:13.920 --> 00:09:19.629
We tried it internally or we thought internally
to build the whole Daydream infrastructure

00:09:19.629 --> 00:09:22.269
just based on plain old activities.

00:09:22.269 --> 00:09:24.059
It didn't work so well in practice.

00:09:24.059 --> 00:09:26.949
There was a bunch of bookkeeping that you
had to do just like a dock app.

00:09:26.949 --> 00:09:29.760
So we weren't saving the developer a whole
lot of work.

00:09:29.760 --> 00:09:32.610
Card manager had a hard time keeping track
of this so it could be automatically started

00:09:32.610 --> 00:09:35.480
and stopped when you docked and undocked the
device, things like that.

00:09:35.480 --> 00:09:38.540
And the most important thing is that you were
running in the wrong window layer.

00:09:38.540 --> 00:09:44.360
If you imagine Android, there's the wallpaper
and there's a bunch of applications and a

00:09:44.360 --> 00:09:47.579
bunch of systems stuff like the status bar
and dialogue boxes.

00:09:47.579 --> 00:09:50.050
Those activities are running in the middle.

00:09:50.050 --> 00:09:55.220
So if a dialogue box comes up it's just going
to sit there on top of an activity indefinitely.

00:09:55.220 --> 00:09:59.610
So if you have a great screen safer and an
OTA dialogue comes up, that's going to be

00:09:59.610 --> 00:10:05.070
burned into the device by the next morning,
so that's not going to work.

00:10:05.070 --> 00:10:08.839
Getting back to the features of Daydream,
I said that once you had set up your content

00:10:08.839 --> 00:10:14.020
view and triggered on dreaming started you
can basically do whatever you want, and that

00:10:14.020 --> 00:10:17.920
includes this entire suite of layouts, widgets,
however you want to interact with the user.

00:10:17.920 --> 00:10:24.551
Like I said, it's basically the entire Android
UI toolkit is available to you in a Daydream.

00:10:24.551 --> 00:10:28.540
And I want you to take a look at the way this
contrasts with the other things that we've

00:10:28.540 --> 00:10:31.319
allowed you to do as sort of these kind of
customization tools.

00:10:31.319 --> 00:10:33.290
So app widgets, for example.

00:10:33.290 --> 00:10:36.579
If you implement a widget for the launcher
it's the same kind of glanceable information,

00:10:36.579 --> 00:10:37.579
right?

00:10:37.579 --> 00:10:40.110
It's there kind of when the user happens to
be looking at the device, maybe is about to

00:10:40.110 --> 00:10:41.110
do something else.

00:10:41.110 --> 00:10:44.639
You can show the weather, time, what have
you, but you really only get those top two

00:10:44.639 --> 00:10:47.839
bullet points and even then it's a little
weak.

00:10:47.839 --> 00:10:50.730
You get some of the standard layouts, you
get some of the widgets, only those that have

00:10:50.730 --> 00:10:53.769
specially been marked to be viewed as remote
views.

00:10:53.769 --> 00:10:58.559
You don't get the full UI toolkit and you
really don't get the full suite of touch interaction

00:10:58.559 --> 00:10:59.559
either.

00:10:59.559 --> 00:11:03.559
You get clicks, that's about it, because everything
else is reserved for the app widget host,

00:11:03.559 --> 00:11:05.839
the launcher, the thing that needs to be able
to move widgets around.

00:11:05.839 --> 00:11:08.470
So that's not all that rich and exciting.

00:11:08.470 --> 00:11:11.209
We also have live wallpapers.

00:11:11.209 --> 00:11:16.101
We have live wallpapers that let you do kind
of whatever kind of drawing you want to the

00:11:16.101 --> 00:11:20.269
canvas of the surface that you're handed,
but you don't have access to the rest of the

00:11:20.269 --> 00:11:21.269
UI toolkit.

00:11:21.269 --> 00:11:23.300
You can't use views to lay things out.

00:11:23.300 --> 00:11:25.509
You can't interact with the user.

00:11:25.509 --> 00:11:29.040
You sort of get touches, but if you've written
a lot of wallpaper you know it's not all that

00:11:29.040 --> 00:11:30.040
satisfying.

00:11:30.040 --> 00:11:34.489
And you certainly can't do this other stuff
like view animation or video playback.

00:11:34.489 --> 00:11:36.499
So Daydream lets you do all this.

00:11:36.499 --> 00:11:41.149
Daydream has access to the complete UI toolkit
so you can build really kind of whatever you

00:11:41.149 --> 00:11:42.149
want.

00:11:42.149 --> 00:11:44.040
There are some other freebies.

00:11:44.040 --> 00:11:48.660
I told you you get free stuff from the platform
when you implement a Daydream.

00:11:48.660 --> 00:11:50.170
You are automatically started and stopped.

00:11:50.170 --> 00:11:51.319
You don't have to worry about that.

00:11:51.319 --> 00:11:53.819
You don't have to worry about tracking user's
idle time.

00:11:53.819 --> 00:11:55.249
You don't have to worry about dock events.

00:11:55.249 --> 00:11:56.500
That's all handled for you.

00:11:56.500 --> 00:11:59.739
You just look for the dreaming started and
stopped life cycle events.

00:11:59.739 --> 00:12:04.660
I mentioned you have access to the user's
touch and interaction and so forth and the

00:12:04.660 --> 00:12:05.660
keyboard, too.

00:12:05.660 --> 00:12:10.029
If you choose to be non-interactive, if you
just want to make flying kitchen appliances,

00:12:10.029 --> 00:12:13.269
if that's your thing and you want it to dismiss
as soon as you touch the screen, that's really

00:12:13.269 --> 00:12:14.269
easy.

00:12:14.269 --> 00:12:18.059
You say set interactive false and again Daydream
takes care of the rest for you.

00:12:18.059 --> 00:12:21.839
And finally, you get that crucial special
window on top of the device.

00:12:21.839 --> 00:12:26.049
I know, I know, there's that other way to
get windows on top of the device.

00:12:26.049 --> 00:12:27.049
That's gross.

00:12:27.049 --> 00:12:28.679
Don't do that, do this instead, please.

00:12:28.679 --> 00:12:31.670
But I still haven't gotten to the why.

00:12:31.670 --> 00:12:36.069
Why do you actually want to go and implement
this in your app?

00:12:36.069 --> 00:12:38.839
Okay, it's fun and easy, but why should I
take the time?

00:12:38.839 --> 00:12:39.839
I'm busy.

00:12:39.839 --> 00:12:40.839
I'm an Android developer.

00:12:40.839 --> 00:12:41.839
I read Reddit.

00:12:41.839 --> 00:12:43.120
I don't have time for this kind of thing.

00:12:43.120 --> 00:12:49.670
So I argue that this is a chance for your
app to be free, to finally be free of all

00:12:49.670 --> 00:12:55.769
of its features, all of its use cases, all
of its menus and its settings, free to be

00:12:55.769 --> 00:12:59.490
experimental, free to be weird, free to delight
the user.

00:12:59.490 --> 00:13:04.620
In a Daydream you don't need action bars,
you don't need settings, you don't need fragments.

00:13:04.620 --> 00:13:07.549
You don't need all that serious business stuff
in your application.

00:13:07.549 --> 00:13:12.350
This is an opportunity for you to make the
art exhibit version of your app.

00:13:12.350 --> 00:13:14.029
It's fun.

00:13:14.029 --> 00:13:15.029
So okay.

00:13:15.029 --> 00:13:16.319
This is a developer conference.

00:13:16.319 --> 00:13:17.319
Where is the code?

00:13:17.319 --> 00:13:18.679
Here it comes.

00:13:18.679 --> 00:13:19.679
Get ready.

00:13:19.679 --> 00:13:22.100
The first one we're going to do, we're going
to build a very simple Daydream.

00:13:22.100 --> 00:13:24.119
And let me show this to you on the Nexus 7
over here.

00:13:24.119 --> 00:13:28.060
I'm going to switch and see if I can do this.

00:13:28.060 --> 00:13:32.079
Apparently the answer is no.

00:13:32.079 --> 00:13:33.079
There we go.

00:13:33.079 --> 00:13:35.029
So this is not the one I wanted to show you.

00:13:35.029 --> 00:13:37.629
So this is the first Daydream that we're going
to build here.

00:13:37.629 --> 00:13:40.949
It's really, really simple.

00:13:40.949 --> 00:13:45.170
It moves something around the screen.

00:13:45.170 --> 00:13:47.489
I know we talked about this as being very
1990s.

00:13:47.489 --> 00:13:51.139
This is very 1980s, but it's an important
building block.

00:13:51.139 --> 00:13:54.680
Any time you build something even more sophisticated,
you probably are going to have some arrow

00:13:54.680 --> 00:13:56.689
state or some message that you need to move
around the screen.

00:13:56.689 --> 00:13:58.499
You can just pull this code directly in.

00:13:58.499 --> 00:14:08.639
So back over here on the slides, the implementation
starts like this: This jumper class, I'm going

00:14:08.639 --> 00:14:09.829
to extend frame layout.

00:14:09.829 --> 00:14:11.769
You could do some other view group or whatever.

00:14:11.769 --> 00:14:12.769
I like frame layout.

00:14:12.769 --> 00:14:15.939
It's easy, it's pretty simple, and allows
you to put other stuff inside of it.

00:14:15.939 --> 00:14:20.600
So jumper is going to be a class, it's a subclass
of frame layout that moves itself around inside

00:14:20.600 --> 00:14:24.679
of its parent, and whatever you want to put
inside of it, like a picture of Dianne's cat

00:14:24.679 --> 00:14:28.240
or an error message or fortune cookie or whatever,
it doesn't care.

00:14:28.240 --> 00:14:30.179
Here is a runnable.

00:14:30.179 --> 00:14:34.769
Basically what's happening here is it's looking
at the bounds of its parents, looking at its

00:14:34.769 --> 00:14:37.759
own bounds, picking a new random spot and
then doing it again in two seconds.

00:14:37.759 --> 00:14:41.910
This is very simple view kind of stuff.

00:14:41.910 --> 00:14:44.880
And then when it's attached to window it's
going to fire off that runnable for the first

00:14:44.880 --> 00:14:45.880
time.

00:14:45.880 --> 00:14:48.879
So as soon as you put this view into a window
it will start bouncing around.

00:14:48.879 --> 00:14:51.190
It's important to note -- on the next slide.

00:14:51.190 --> 00:14:54.399
On this slide I'll show you the XML for this
is really simple.

00:14:54.399 --> 00:14:58.279
The frame layout for the whole screen is on
the outside and the jumper is in the middle

00:14:58.279 --> 00:15:00.649
and it will move itself around.

00:15:00.649 --> 00:15:04.619
So what is important to note is that there
is really nothing Daydream specific so far.

00:15:04.619 --> 00:15:06.769
This is like straight up view programming.

00:15:06.769 --> 00:15:11.499
If you went to implementing your own custom
views earlier today you saw even more sophisticated

00:15:11.499 --> 00:15:12.499
examples than this.

00:15:12.499 --> 00:15:13.660
This is pretty straight ahead.

00:15:13.660 --> 00:15:16.149
Where is the Daydream aspect of this?

00:15:16.149 --> 00:15:17.259
Here's DreamService again.

00:15:17.259 --> 00:15:20.879
I showed you a little snippet of code earlier
that looked like this.

00:15:20.879 --> 00:15:21.879
Ondreaming started.

00:15:21.879 --> 00:15:26.230
I'm going to set content view to that layout
that I just described and that's it.

00:15:26.230 --> 00:15:31.970
And in fact, I mentioned the very simple activity
like life cycle of a Daydream before.

00:15:31.970 --> 00:15:35.649
This is how it goes: Attached to window, dreaming
started, dreaming stopped, detached from window.

00:15:35.649 --> 00:15:37.160
So you can override these things.

00:15:37.160 --> 00:15:41.410
Most of the time all you need to do is override
ondreaming started, set up a layout and run

00:15:41.410 --> 00:15:42.410
with it.

00:15:42.410 --> 00:15:43.470
It's very, very easy.

00:15:43.470 --> 00:15:47.949
The last thing you need to do is declare that
this is a Daydream, so you can see it in settings.

00:15:47.949 --> 00:15:51.310
You do that through the Android manifest like
everything else.

00:15:51.310 --> 00:15:55.449
Inside your application you have a service
mentioning your Daydream, and the important

00:15:55.449 --> 00:15:57.519
bit here is the action, the intent filter.

00:15:57.519 --> 00:15:59.389
Android service dreams DreamService.

00:15:59.389 --> 00:16:01.069
That's how settings knows how to find you.

00:16:01.069 --> 00:16:03.980
That's how the DreamService knows how to start
you.

00:16:03.980 --> 00:16:04.980
Okay.

00:16:04.980 --> 00:16:05.980
All right.

00:16:05.980 --> 00:16:06.980
So this is boring.

00:16:06.980 --> 00:16:07.980
Let's get a little fancier.

00:16:07.980 --> 00:16:12.389
So remember I told you that Daydreams could
do anything, including view style animations,

00:16:12.389 --> 00:16:13.389
right?

00:16:13.389 --> 00:16:15.959
So we're going to go ahead and go in here,
and this is our old code.

00:16:15.959 --> 00:16:17.049
You see it does set X, set Y.

00:16:17.049 --> 00:16:19.600
We'll replace those with the fluent interface.

00:16:19.600 --> 00:16:22.529
Now it's animate X, animate Y.

00:16:22.529 --> 00:16:25.420
And hey, let's just throw in rotation just
for fun.

00:16:25.420 --> 00:16:30.239
So let's see what that looks like, and I have
that running over here as well.

00:16:30.239 --> 00:16:31.239
There we go.

00:16:31.239 --> 00:16:32.239
All right.

00:16:32.239 --> 00:16:33.239
Now, this feels high octane.

00:16:33.239 --> 00:16:34.299
I'm excited about that.

00:16:34.299 --> 00:16:36.199
I'm not sure Dianne's cat likes that so much.

00:16:36.199 --> 00:16:37.800
We'll have to see.

00:16:37.800 --> 00:16:42.749
Should we keep going and make this more interesting?

00:16:42.749 --> 00:16:43.749
Let's see here.

00:16:43.749 --> 00:16:49.100
I'm going to show you this third jumper example
here.

00:16:49.100 --> 00:16:54.279
So this is the same kind of thing, just moving
itself around with a slightly different kind

00:16:54.279 --> 00:16:55.279
of rotation pattern.

00:16:55.279 --> 00:16:58.249
But remember that I told you that the way
we implemented this is that you drop a jumper

00:16:58.249 --> 00:17:01.589
view into anything and it will move itself
around in its parent.

00:17:01.589 --> 00:17:04.829
What that means is we can go and throw more
of these in.

00:17:04.829 --> 00:17:11.050
Like you want this to be more sophisticated,
let's see if we can tempt the demo gods here.

00:17:11.050 --> 00:17:13.080
Maybe they've had their fill.

00:17:13.080 --> 00:17:14.870
And oh, you're not seeing this on the other
monitor.

00:17:14.870 --> 00:17:16.140
All right.

00:17:16.140 --> 00:17:17.140
Move.

00:17:17.140 --> 00:17:18.140
Move our code over there.

00:17:18.140 --> 00:17:19.140
You can't see that.

00:17:19.140 --> 00:17:20.140
I can't see that either.

00:17:20.140 --> 00:17:23.200
What we're going to do here is I'm going to
add some extra stuff here.

00:17:23.200 --> 00:17:24.310
So let's see.

00:17:24.310 --> 00:17:30.630
Wow, I really need a larger font to do this
on the monitors down there.

00:17:30.630 --> 00:17:32.421
We're going to add some extra views here.

00:17:32.421 --> 00:17:38.040
I'm going to copy this one, make another one,
add a whole bunch.

00:17:38.040 --> 00:17:39.600
Doesn't matter.

00:17:39.600 --> 00:17:42.800
Let's see here.

00:17:42.800 --> 00:17:45.290
And then I'm going to get some more of these,
too.

00:17:45.290 --> 00:17:50.160
So again, the nice thing about implementing
this all as basic view stuff is that anything

00:17:50.160 --> 00:17:52.980
that works in an activity will work in a Daydream.

00:17:52.980 --> 00:17:57.510
So we're going to go ahead and see if we can
run this.

00:17:57.510 --> 00:18:04.930
Did I get any compilers?

00:18:04.930 --> 00:18:08.410
No, believe it or not.

00:18:08.410 --> 00:18:09.410
I shouldn't have tempted them.

00:18:09.410 --> 00:18:10.410
Let's go back to the Wolf.

00:18:10.410 --> 00:18:11.410
All right.

00:18:11.410 --> 00:18:13.980
Let's go back to the Wolf.

00:18:13.980 --> 00:18:14.980
There we go.

00:18:14.980 --> 00:18:15.980
Oh, there we go.

00:18:15.980 --> 00:18:16.980
Much better.

00:18:16.980 --> 00:18:19.300
So just adding more and more views to the
parent.

00:18:19.300 --> 00:18:20.920
Again, daydream doesn't care.

00:18:20.920 --> 00:18:22.740
Daydream will let you do whatever you want.

00:18:22.740 --> 00:18:23.740
We could ship this.

00:18:23.740 --> 00:18:24.890
This is pretty good.

00:18:24.890 --> 00:18:26.820
All right.

00:18:26.820 --> 00:18:30.730
Let's go back, go back to the slides here.

00:18:30.730 --> 00:18:32.440
Okay.

00:18:32.440 --> 00:18:39.230
So, again, you can pull this source code and
maybe with less spinning and use it as the

00:18:39.230 --> 00:18:43.950
error message in your own implementation.

00:18:43.950 --> 00:18:47.180
So that's, you know, a couple of canned animations
in a row.

00:18:47.180 --> 00:18:49.480
Now let's move on to continuous animations.

00:18:49.480 --> 00:18:54.950
So often instead of doing something periodically,
you often want something moving all the time

00:18:54.950 --> 00:18:56.160
in your daydream.

00:18:56.160 --> 00:18:57.190
There's lots of ways to do this.

00:18:57.190 --> 00:19:00.560
I'm going to show you one such.

00:19:00.560 --> 00:19:03.990
And this story starts over winter break.

00:19:03.990 --> 00:19:05.910
This is a little art project I did with my
son.

00:19:05.910 --> 00:19:08.180
There he is dressed as a pirate.

00:19:08.180 --> 00:19:09.180
There he is.

00:19:09.180 --> 00:19:10.180
Awesome.

00:19:10.180 --> 00:19:13.960
I had him sit down and draw some snow flakes
and a snowman for me because we were vacationing

00:19:13.960 --> 00:19:15.640
in Texas where there is no snow.

00:19:15.640 --> 00:19:17.120
We took a picture of it.

00:19:17.120 --> 00:19:21.070
We pulled it into a bunch of sprites and then
dropped it into something very similar to

00:19:21.070 --> 00:19:22.070
the code you've already seen.

00:19:22.070 --> 00:19:25.950
So I'm going to go ahead and switch back over
here and show you what that looked like.

00:19:25.950 --> 00:19:32.940
Here was his snow storm that we can enjoy
anytime.

00:19:32.940 --> 00:19:33.940
So this was nice; right?

00:19:33.940 --> 00:19:39.410
It turned out really well and it was really
easy to do, again, with daydream and the view

00:19:39.410 --> 00:19:40.410
animation stuff.

00:19:40.410 --> 00:19:44.920
I'll show you who this work right now.

00:19:44.920 --> 00:19:49.000
So rather than implementing a view that moved
itself around in its parent, now we're going

00:19:49.000 --> 00:19:52.370
to implement this as a layout that animates
all its children.

00:19:52.370 --> 00:19:55.440
You can throw whatever you want into this
container and it's going to start falling

00:19:55.440 --> 00:19:56.590
like snow flakes.

00:19:56.590 --> 00:20:00.450
And the way we're going to do is using this
class called item animator.

00:20:00.450 --> 00:20:03.790
Again, there are lots of other ways to do
continuous animation.

00:20:03.790 --> 00:20:07.480
Time animator is one of my favorites because,
again, it feels like the rest of the view

00:20:07.480 --> 00:20:08.480
animation API.

00:20:08.480 --> 00:20:09.480
It's very easy to use.

00:20:09.480 --> 00:20:12.420
You start it and stop it whenever you want
and then you implement this time listener

00:20:12.420 --> 00:20:14.690
interface, and you're good to go.

00:20:14.690 --> 00:20:19.390
So snowy day, attach to windows starts the
animator, detach from window stops the animator.

00:20:19.390 --> 00:20:20.390
Pretty straightforward stuff.

00:20:20.390 --> 00:20:22.030
So what happens in the animator.

00:20:22.030 --> 00:20:24.570
But first I have to show you what happens
when you add a view.

00:20:24.570 --> 00:20:28.380
So I told you anything you throw in here gets
turned into a snow flake.

00:20:28.380 --> 00:20:33.490
Now, if you were doing this for real, you
might have a very sophisticated physics engine

00:20:33.490 --> 00:20:34.490
going on here.

00:20:34.490 --> 00:20:39.830
I didn't have that, so instead, I created
a little struct that holds some basic velocity

00:20:39.830 --> 00:20:41.680
information and I stuffed it into the view
tags.

00:20:41.680 --> 00:20:44.030
You see right that there, the v.set tag.

00:20:44.030 --> 00:20:46.990
This saves me the trouble of having to create
a separate model of all the objects.

00:20:46.990 --> 00:20:52.490
As soon as the view comes in, stick some stuff
in the view tag and we can animate it later.

00:20:52.490 --> 00:20:53.490
Here it is.

00:20:53.490 --> 00:20:54.490
On-time update.

00:20:54.490 --> 00:20:59.110
This is the thing that gets called back from
time animator every time choreographer wants

00:20:59.110 --> 00:21:00.110
an animation frame.

00:21:00.110 --> 00:21:05.370
So basically a v-synced, buttery smooth animation
call-back loop.

00:21:05.370 --> 00:21:09.540
So here essentially I'm going through every
single of the children, pulling the tag back

00:21:09.540 --> 00:21:13.860
out, getting the velocities out, incrementing
the view, nudging it along in its simulation,

00:21:13.860 --> 00:21:15.390
and then putting it back where it belongs.

00:21:15.390 --> 00:21:18.320
There's a little bit of code here that is
taken out in the slide that allows the snow

00:21:18.320 --> 00:21:21.650
flakes to wrap around from the bottom to the
top and the sides.

00:21:21.650 --> 00:21:24.940
And then finally, there's always that daydream
part at the end because everything else that

00:21:24.940 --> 00:21:27.670
we've seen before, you can put in any application.

00:21:27.670 --> 00:21:29.390
Here's the dream service bit.

00:21:29.390 --> 00:21:32.420
Load a bunch of snow flakes.

00:21:32.420 --> 00:21:33.420
Set the content view.

00:21:33.420 --> 00:21:34.960
Again, this is what you do to set up a daydream.

00:21:34.960 --> 00:21:40.420
And then there's one last trick I'm going
to show you here, kind of unrelated to daydream

00:21:40.420 --> 00:21:41.420
but it's a great little trick.

00:21:41.420 --> 00:21:46.450
Remember we had all those sprites drawn as
white snow flakes on a black background.

00:21:46.450 --> 00:21:49.230
I don't actually want those black rectangles
floating on top of each other.

00:21:49.230 --> 00:21:52.890
I want to be able to see the snow flakes through
one another.

00:21:52.890 --> 00:21:55.460
Are we going to work out the HDMI switcher
here?

00:21:55.460 --> 00:21:56.460
Here we go.

00:21:56.460 --> 00:21:57.460
How are we going to do that?

00:21:57.460 --> 00:22:02.450
We're going to do that with an extra mode
on the paint assigned to a hardware layer.

00:22:02.450 --> 00:22:03.450
Here's how it works.

00:22:03.450 --> 00:22:09.010
We create the ported up extra mode screen
which will create that exact compositing appearance

00:22:09.010 --> 00:22:12.950
that we want, and then for each one of these
views, as we add it, we give it a hardware

00:22:12.950 --> 00:22:16.400
layer, use that paint and then put it into
the parent.

00:22:16.400 --> 00:22:18.730
Voila, you get snow flakes.

00:22:18.730 --> 00:22:20.000
Okay.

00:22:20.000 --> 00:22:22.020
So what else can you do with daydream?

00:22:22.020 --> 00:22:25.860
So the first thing is we talked a little bit
earlier about whether it's interactive or

00:22:25.860 --> 00:22:26.860
not.

00:22:26.860 --> 00:22:30.050
So if you decide you want the user actually
to be able to interact with the daydream,

00:22:30.050 --> 00:22:31.970
because the default is you touch it, it goes
away.

00:22:31.970 --> 00:22:33.610
Again, flying kitchen appliances.

00:22:33.610 --> 00:22:37.000
If you want it to be interactive, you run
this one method call and suddenly you have

00:22:37.000 --> 00:22:41.010
again full touch input to your daydream.

00:22:41.010 --> 00:22:48.960
This allows you to do all kinds of great things
like the default daydream photo table that's

00:22:48.960 --> 00:22:50.190
part of Android 4.2.

00:22:50.190 --> 00:22:51.620
Hopefully you've seen this.

00:22:51.620 --> 00:22:56.030
This is a great way to show off, you know,
a bunch of vacation photos, your recent Google+

00:22:56.030 --> 00:22:57.400
photos, and so forth.

00:22:57.400 --> 00:23:01.540
It throws them all out as if they were photographs
scattered on a table but there's this great

00:23:01.540 --> 00:23:05.710
ability that if you see one that you want
to look at, you don't have to suffer with

00:23:05.710 --> 00:23:06.960
it being obscured by other things.

00:23:06.960 --> 00:23:10.300
You can move them out of the way and pull
them forward.

00:23:10.300 --> 00:23:12.130
This is a great thing to have on a screen
savior.

00:23:12.130 --> 00:23:16.440
It's something that can do a great thing when
you're not paying attention.

00:23:16.440 --> 00:23:20.070
But if you're interested, you want to drill
in and pay attention to what's going on there,

00:23:20.070 --> 00:23:24.330
you can touch and, in fact, more than one
person can be interacting with it at a time;

00:23:24.330 --> 00:23:25.330
right?

00:23:25.330 --> 00:23:27.430
You get the full multi-touch API of Android.

00:23:27.430 --> 00:23:31.350
So this is a great thing to have in the API.

00:23:31.350 --> 00:23:37.410
Something else you want to do is give that
daydream a setting.

00:23:37.410 --> 00:23:39.120
Daydreams love settings.

00:23:39.120 --> 00:23:44.660
This is what binds an activity to this little
settings button inside the daydream portion

00:23:44.660 --> 00:23:45.830
of the settings app.

00:23:45.830 --> 00:23:50.750
And the way you do that is, in your manifest
again, you add this little bit of metadata.

00:23:50.750 --> 00:23:54.660
It's very much like metadata for live wallpaper
if you've done that, that points to an XML

00:23:54.660 --> 00:23:57.070
file where you can point to that activity.

00:23:57.070 --> 00:24:00.780
Not every daydream will need it, some are
just art projects, but if you have configurable

00:24:00.780 --> 00:24:05.430
settings, if you want to make the hours bold
or not bold, if you're into that kind of thing,

00:24:05.430 --> 00:24:10.980
this might be a great opportunity to do that.

00:24:10.980 --> 00:24:14.910
Another pro tip for developing daydreams is
to actually use activity.

00:24:14.910 --> 00:24:19.970
Since the API is so similar, since the life
cycle is so similar, it's very easy to share

00:24:19.970 --> 00:24:26.210
code between a daydream and an activity that
allows you to hook it up to your IDE for testing.

00:24:26.210 --> 00:24:31.520
So again, we'll look at the same block of
code we've seen over and over in this talk.

00:24:31.520 --> 00:24:33.660
You should be able to write it by heart now.

00:24:33.660 --> 00:24:36.210
There is the activity version.

00:24:36.210 --> 00:24:38.200
So these are pretty close; right?

00:24:38.200 --> 00:24:40.280
Dreaming started on start.

00:24:40.280 --> 00:24:42.950
Dream service, activity.

00:24:42.950 --> 00:24:46.250
And again, you can wire that up to run in
your favorite IDE so that it's very easy to

00:24:46.250 --> 00:24:50.980
go straight to testing, and then debugging
and so forth.

00:24:50.980 --> 00:24:55.250
If you factor out your code, you can keep
your activity and dream service subclasses

00:24:55.250 --> 00:24:59.360
short and then all of the stuff related to
your animation, your experience just goes

00:24:59.360 --> 00:25:00.710
in one place.

00:25:00.710 --> 00:25:04.640
Another thing to do is port your live wallpaper,
if you have one.

00:25:04.640 --> 00:25:07.960
There's no reason not to go and apply it to
the daydream API, especially if you're just

00:25:07.960 --> 00:25:09.840
drawing into a canvas.

00:25:09.840 --> 00:25:13.070
If you're doing fancy OpenGL stuff, it's a
little more complicated and we'll come to

00:25:13.070 --> 00:25:14.380
that in a second.

00:25:14.380 --> 00:25:18.640
I can quickly show you right now -- well,
that's an early implementation.

00:25:18.640 --> 00:25:20.220
Thank you, Baron.

00:25:20.220 --> 00:25:21.280
This is the actual implementation.

00:25:21.280 --> 00:25:24.590
By now we have an old screen saver from BOS,
if you remember that.

00:25:24.590 --> 00:25:28.430
It's very simple and the first implementation
was live wallpaper, because that's all we

00:25:28.430 --> 00:25:32.590
had, but implementing it as a daydream was
really trivial.

00:25:32.590 --> 00:25:35.240
Again, on dreaming started.

00:25:35.240 --> 00:25:36.240
We set up everything.

00:25:36.240 --> 00:25:38.590
And, in fact, this view you notice I just
say new view.

00:25:38.590 --> 00:25:39.930
The view doesn't do anything.

00:25:39.930 --> 00:25:44.580
It's not even a very special view, but all
of the logic was built into a drawable.

00:25:44.580 --> 00:25:48.380
So the by now drawable is the background drawable
of the view, and then we have a call back

00:25:48.380 --> 00:25:51.260
to make sure the background drawable is invalidated
every now and again.

00:25:51.260 --> 00:25:52.260
It's really easy.

00:25:52.260 --> 00:25:54.430
I mentioned a little bit about OpenGL.

00:25:54.430 --> 00:25:59.640
If you want to use Open GL in a daydream,
you want to move to technical view.

00:25:59.640 --> 00:26:04.480
If you are using GL surface view, you may
have noticed it it's pretty janky getting

00:26:04.480 --> 00:26:08.140
that set up, particularly with window transitions.

00:26:08.140 --> 00:26:10.590
Technically, Romain has told me the tech review
is the way to go.

00:26:10.590 --> 00:26:13.000
Please do not argue with Romain on this.

00:26:13.000 --> 00:26:14.990
You have to assume he's right on it.

00:26:14.990 --> 00:26:20.970
If you go to AFP you can get the source code
to the colors daydream, which is a great example

00:26:20.970 --> 00:26:25.990
of tech review but OpenGLES2 in a daydream.

00:26:25.990 --> 00:26:31.560
The last thing I want to share with you is
you can prevent your daydream -- prevent daydreams

00:26:31.560 --> 00:26:32.900
from running on top of your apps.

00:26:32.900 --> 00:26:39.400
So I mentioned at the top of the talk video
players, games, kiosks things might not want

00:26:39.400 --> 00:26:43.850
daydreams to run on top of them, and the way
you do that is you keep the screen on.

00:26:43.850 --> 00:26:50.100
And there are lots of ways to keep the screen
on, all the way up to managing your own wake

00:26:50.100 --> 00:26:55.450
lock which I only recommend -- for no one.

00:26:55.450 --> 00:26:58.570
So last I want to show you a little magic
trick.

00:26:58.570 --> 00:27:04.900
I want to give you a clock daydream in zero
lines of code.

00:27:04.900 --> 00:27:06.710
Almost zero lines of code.

00:27:06.710 --> 00:27:09.410
For very large values of zero.

00:27:09.410 --> 00:27:13.270
But the only code we're going to need is the
same block of code again that we've seen over

00:27:13.270 --> 00:27:14.280
and over in this talk.

00:27:14.280 --> 00:27:16.050
I added a couple extra bits here.

00:27:16.050 --> 00:27:18.140
Set full screen, set screen bright.

00:27:18.140 --> 00:27:20.840
Those are just wrappers around basic calls
on view.

00:27:20.840 --> 00:27:23.440
Those are put on the dream service for your
convenience.

00:27:23.440 --> 00:27:25.640
You don't need to use them.

00:27:25.640 --> 00:27:29.240
And then in this implementation I'm going
to set content view to my full screen clock,

00:27:29.240 --> 00:27:30.530
and that's it.

00:27:30.530 --> 00:27:31.800
I'm done.

00:27:31.800 --> 00:27:33.710
So what is this clock XML, this magic clock?

00:27:33.710 --> 00:27:35.010
Are you ready for it?

00:27:35.010 --> 00:27:36.010
Here it is.

00:27:36.010 --> 00:27:38.380
I'm just going to use the widget that already
exists.

00:27:38.380 --> 00:27:40.760
So it's part of the Android widget toolkit.

00:27:40.760 --> 00:27:41.850
It shows a clock.

00:27:41.850 --> 00:27:42.850
It updates on its own.

00:27:42.850 --> 00:27:44.070
I don't have to do anything.

00:27:44.070 --> 00:27:45.390
Zero lines of code, and it works.

00:27:45.390 --> 00:27:47.780
It looks just like that.

00:27:47.780 --> 00:27:50.880
Hang on.

00:27:50.880 --> 00:27:52.130
The colon needs to blink.

00:27:52.130 --> 00:27:54.350
I know it's scope creep.

00:27:54.350 --> 00:27:55.350
This is what happens.

00:27:55.350 --> 00:27:56.350
I'm sure you all know.

00:27:56.350 --> 00:28:00.890
And I said no code, so how are we going to
do it?

00:28:00.890 --> 00:28:03.510
Any guesses?

00:28:03.510 --> 00:28:04.820
No?

00:28:04.820 --> 00:28:07.050
What is that?

00:28:07.050 --> 00:28:08.780
I showed this to Romain and he face-palmed.

00:28:08.780 --> 00:28:10.730
He said, "You're going to show those guys
that?"

00:28:10.730 --> 00:28:19.110
So there's this little undocumented task available
in the system called blink, which makes anything

00:28:19.110 --> 00:28:23.570
inside of it blink on and off once a second.

00:28:23.570 --> 00:28:27.400
And it works.

00:28:27.400 --> 00:28:29.960
No code.

00:28:29.960 --> 00:28:31.230
So....

00:28:31.230 --> 00:28:35.540
[ Applause ]
&gt;&gt;Daniel Sandler: He's going to love that

00:28:35.540 --> 00:28:36.590
that's what got applause.

00:28:36.590 --> 00:28:38.190
[ Laughter ]
&gt;&gt;Daniel Sandler: Okay.

00:28:38.190 --> 00:28:39.190
All right.

00:28:39.190 --> 00:28:42.150
The code is done, but I did want to show you
some more examples of other daydreams in the

00:28:42.150 --> 00:28:43.190
wild.

00:28:43.190 --> 00:28:49.120
First, there's Google currents, which was
-- we worked with the currents team to build

00:28:49.120 --> 00:28:52.820
this out based on their UI, and we're really
happy with how this came out.

00:28:52.820 --> 00:28:56.110
It was very currency, very rich, lots of great
stuff to look at.

00:28:56.110 --> 00:28:58.120
A few things I want to draw your attention
to.

00:28:58.120 --> 00:29:01.059
One, it's interesting and not distracting.

00:29:01.059 --> 00:29:06.610
So it's always moving but it's always moving
slowly so there's constantly something new

00:29:06.610 --> 00:29:09.340
to be interested in and to look at if you
happen to be looking but it's never going

00:29:09.340 --> 00:29:11.740
to, like, draw your eye out of the corner
of the room.

00:29:11.740 --> 00:29:17.400
It's coming direct from Currents, their fresh
database of new content so it's never stale,

00:29:17.400 --> 00:29:18.880
and it's always interactive.

00:29:18.880 --> 00:29:22.420
So if you tap on the story and would like
to bring up a full screen view -- again, it's

00:29:22.420 --> 00:29:26.210
still within the daydream -- a full screen
view of that story where you can read a little

00:29:26.210 --> 00:29:30.060
more about it, and from there you can either
go back to the river of news or you can drill

00:29:30.060 --> 00:29:33.250
in all the way, exit daydream, and go straight
into currents.

00:29:33.250 --> 00:29:34.900
We'll see another example of that in a minute.

00:29:34.900 --> 00:29:35.900
It's super powerful.

00:29:35.900 --> 00:29:40.900
(Saying name) sent me some screen shots from
some information about beautiful widgets.

00:29:40.900 --> 00:29:44.450
I actually have been using this for a while
as my personal charging daydream on my phone.

00:29:44.450 --> 00:29:50.030
So I go to bed, I set the phone on the wireless
charger and this comes up, which is perfect

00:29:50.030 --> 00:29:53.800
because it tells me everything I need to know
first thing in the morning, or, you know,

00:29:53.800 --> 00:29:58.210
at 3:00 in the morning, including the time,
the weather, things like that.

00:29:58.210 --> 00:30:00.850
It's all live data coming directly from beautiful
widgets.

00:30:00.850 --> 00:30:05.910
They've got these great visual effects that
would not be possible in widgets, like launcher

00:30:05.910 --> 00:30:09.570
widgets for the weather, cloud moving past,
twinkling stars at night.

00:30:09.570 --> 00:30:11.210
It's very future beautiful.

00:30:11.210 --> 00:30:15.300
In fact the UI is one that wouldn't really
work with as a front door for an app.

00:30:15.300 --> 00:30:17.970
It's much more artistic, much more free form.

00:30:17.970 --> 00:30:19.059
It's perfect for daydream.

00:30:19.059 --> 00:30:20.390
It feels just right in this context.

00:30:20.390 --> 00:30:23.490
They also give you some system status information
in the bottom.

00:30:23.490 --> 00:30:27.050
I will point out if you are interested in
that, you can also show the system you want

00:30:27.050 --> 00:30:32.790
in what we call lights-out mode or view.systemui
flag low profile which is a way of causing

00:30:32.790 --> 00:30:39.110
the navigation icons to dim out and your notification
stuff to dim out showing only the battery

00:30:39.110 --> 00:30:43.250
and the clock in a lower profile way in the
corner.

00:30:43.250 --> 00:30:47.590
So the user still has access to that battery
information and you don't have to do it yourself,

00:30:47.590 --> 00:30:49.110
but you can if you want to.

00:30:49.110 --> 00:30:52.250
Finally, Flipboard was kind enough to send
along a screen shot.

00:30:52.250 --> 00:30:58.261
Flipboard always looks great, gently moving
full color photographs and stories.

00:30:58.261 --> 00:31:01.190
And they sent this statistic that I really
wanted to share with you and they were kind

00:31:01.190 --> 00:31:03.860
enough to let me share with you.

00:31:03.860 --> 00:31:07.490
Nearly 50% of daydream sessions, almost half
the time that people are running Flipboard

00:31:07.490 --> 00:31:12.250
in a daydream, ended with a launch of Flipboard
the app.

00:31:12.250 --> 00:31:16.510
People see the daydream, see a story they're
interested in and go and read more about it.

00:31:16.510 --> 00:31:19.650
This is a massive, massive way to drive engagement
with your app.

00:31:19.650 --> 00:31:24.500
If you have a great daydream it is going to
drive people into your full app experience.

00:31:24.500 --> 00:31:26.230
This is outstanding, outstanding news.

00:31:26.230 --> 00:31:29.630
I get chills on the back of my neck thinking
about it.

00:31:29.630 --> 00:31:30.630
It's awesome.

00:31:30.630 --> 00:31:32.900
So let's wrap this up because I do want to
take some questions.

00:31:32.900 --> 00:31:35.300
Daydream is supposed to be really easy for
you to write.

00:31:35.300 --> 00:31:39.210
Very simple, similar to activity, very simple
to get off the ground.

00:31:39.210 --> 00:31:42.880
You get lots of great stuff for free so you
don't have to think about all that stuff,

00:31:42.880 --> 00:31:47.030
and you can use any drawing API, any UI toolkit
on Android that you like.

00:31:47.030 --> 00:31:52.880
It's supposed to provide this delightful glanceable
information to draw the user into your app

00:31:52.880 --> 00:31:58.720
or just to sort of look great on a bedside
table or on a coffee table or on your desk

00:31:58.720 --> 00:31:59.720
at work.

00:31:59.720 --> 00:32:01.180
And it's a chance for your app to have fun.

00:32:01.180 --> 00:32:06.590
It's a chance for you to break out of the
serious business of all of your action bars

00:32:06.590 --> 00:32:11.370
and your ListViews and more ListViews, ListViews
and more ListViews.

00:32:11.370 --> 00:32:19.490
And finally, daydream is there for any user,
whether you have a fancy dock or a fancy charger

00:32:19.490 --> 00:32:24.670
or just one of these, every user with Android
4.2 can use daydream.

00:32:24.670 --> 00:32:30.510
I want to briefly thank a ton of people who
have been involved in this feature, and particularly

00:32:30.510 --> 00:32:32.380
helping out with daydream.

00:32:32.380 --> 00:32:38.370
In particular, Jeff, Rachel, Tom, John, and
Chris who did the implementation and the design

00:32:38.370 --> 00:32:39.679
for this feature.

00:32:39.679 --> 00:32:41.440
Thanks to those guys.

00:32:41.440 --> 00:32:44.820
Flipboard and Levelup, thank you so much for
all of your feedback and thank you for your

00:32:44.820 --> 00:32:45.820
screen shots.

00:32:45.820 --> 00:32:49.110
Reto, the Android developer people and the
whole Google I/O team for putting on a great

00:32:49.110 --> 00:32:50.110
show.

00:32:50.110 --> 00:32:51.110
Thank you to those guys.

00:32:51.110 --> 00:32:54.510
And people who had cameos, you can invoice
me later.

00:32:54.510 --> 00:32:58.450
Dianne Matias and Baron, thank you for your
likenesses.

00:32:58.450 --> 00:33:02.050
Questions can be asked at the microphone right
up here at the front.

00:33:02.050 --> 00:33:05.180
If you have them, now is the time.

00:33:05.180 --> 00:33:10.540
If you don't have questions now, immediately
after this talk I will be over in the Android

00:33:10.540 --> 00:33:13.630
Office Hours pen elsewhere on the third floor
here.

00:33:13.630 --> 00:33:17.320
You can ask me about daydream or anything
else related to system UI, notifications,

00:33:17.320 --> 00:33:25.039
navigation, full screen stuff, launcher, floating
windows, things like that.

00:33:25.039 --> 00:33:30.539
[ Applause ]
&gt;&gt;Daniel Sandler: Go ahead.

00:33:30.539 --> 00:33:31.640
&gt;&gt;&gt; Hi.

00:33:31.640 --> 00:33:37.040
Is there any support for loaders for fragments
in daydream?

00:33:37.040 --> 00:33:40.370
&gt;&gt;Daniel Sandler: Thank you for asking fragments
up front.

00:33:40.370 --> 00:33:44.040
No, we haven't worked out a really good way
to integrate fragments yet because the life

00:33:44.040 --> 00:33:46.730
cycle of fragments is so peculiar.

00:33:46.730 --> 00:33:49.870
It was really opposed to the simplicity for
a daydream.

00:33:49.870 --> 00:33:55.590
So a daydream had to be, like, one method
override it and you're ready to go.

00:33:55.590 --> 00:33:58.240
Putting fragments into that hasn't worked
for us so far.

00:33:58.240 --> 00:34:01.120
Quality patches accepted to the AOSP crowd.

00:34:01.120 --> 00:34:02.120
&gt;&gt;&gt; And loaders?

00:34:02.120 --> 00:34:03.630
Cursive loaders?

00:34:03.630 --> 00:34:07.960
&gt;&gt;Daniel Sandler: I don't know, if you have
specific problems.

00:34:07.960 --> 00:34:12.720
We don't have any of the stuff that's in activity
to help you manage that stuff automatically

00:34:12.720 --> 00:34:13.720
so you'll have to do it yourself.

00:34:13.720 --> 00:34:18.269
If there are specific things you'd like to
see, again, that feedback is welcome.

00:34:18.269 --> 00:34:19.309
&gt;&gt;&gt; Thank you.

00:34:19.309 --> 00:34:21.379
&gt;&gt;Daniel Sandler: Thank you.

00:34:21.379 --> 00:34:22.379
&gt;&gt;&gt; Hi.

00:34:22.379 --> 00:34:24.169
A question about the placer.

00:34:24.169 --> 00:34:27.279
There is a section for widgets and for wallpaper.

00:34:27.279 --> 00:34:29.980
Is it planned to have a section for daydream?

00:34:29.980 --> 00:34:32.639
&gt;&gt;Daniel Sandler: I can't comment on plans
but that's a nice idea.

00:34:32.639 --> 00:34:33.639
&gt;&gt;&gt; Okay.

00:34:33.639 --> 00:34:34.639
Thank you.

00:34:34.639 --> 00:34:41.690
&gt;&gt;&gt; I missed the beginning so maybe you already
answered this but basically I'm wondering,

00:34:41.690 --> 00:34:47.230
like, let's say there are more apps that have
daydream, like how do they get chosen?

00:34:47.230 --> 00:34:48.950
The user picks which one is the dreamer or
--

00:34:48.950 --> 00:34:55.609
&gt;&gt;Daniel Sandler: Let's go back over to the
tablet.

00:34:55.609 --> 00:34:58.700
So this is actually in system settings.

00:34:58.700 --> 00:35:00.720
So go up here, quick settings.

00:35:00.720 --> 00:35:02.339
Oh, that's so convenient.

00:35:02.339 --> 00:35:03.559
Go into display.

00:35:03.559 --> 00:35:07.810
Underneath daydream, you get a choice here
of all the daydreams available on the system,

00:35:07.810 --> 00:35:09.480
and you can select one.

00:35:09.480 --> 00:35:14.859
You can either run it there to test it out,
or you can set it up, choose when you daydream

00:35:14.859 --> 00:35:19.779
and things like that and then just let it
turn on automatically.

00:35:19.779 --> 00:35:23.340
Currently there's no other way for anything
else to change which daydream you have right

00:35:23.340 --> 00:35:24.340
now.

00:35:24.340 --> 00:35:25.340
That's a secure setting.

00:35:25.340 --> 00:35:28.480
That choice belongs to the user, not to the
app, but you can always direct users to this

00:35:28.480 --> 00:35:29.710
activity.

00:35:29.710 --> 00:35:32.180
&gt;&gt;&gt; Thank you.

00:35:32.180 --> 00:35:35.580
&gt;&gt;&gt; Will daydreams running in the daydream
service, the apps running in the daydream

00:35:35.580 --> 00:35:39.789
service have access to some of the voice recognition
and voice commands that we saw earlier today

00:35:39.789 --> 00:35:42.609
so you can talk to your device while its in
daydream?

00:35:42.609 --> 00:35:44.380
&gt;&gt;Daniel Sandler: I have no idea.

00:35:44.380 --> 00:35:45.380
That's a great idea.

00:35:45.380 --> 00:35:46.380
I don't know.

00:35:46.380 --> 00:35:47.380
I'd have to check on that.

00:35:47.380 --> 00:35:48.380
&gt;&gt;&gt; Okay.

00:35:48.380 --> 00:35:49.380
Thanks.

00:35:49.380 --> 00:35:52.869
&gt;&gt;&gt; I think I just had a follow-up on the
discovery questions that have been asked.

00:35:52.869 --> 00:35:57.960
Do you have guidance on how developers should
encourage or make users aware that there's

00:35:57.960 --> 00:36:00.640
a daydream feature for their app?

00:36:00.640 --> 00:36:02.490
&gt;&gt;Daniel Sandler: I don't right now.

00:36:02.490 --> 00:36:05.339
So we're still kind of working on that.

00:36:05.339 --> 00:36:08.720
Having a different organization in Play Store
would certainly help but it's not necessary.

00:36:08.720 --> 00:36:13.020
I think right now daydream is definitely being
driven by people who already know about the

00:36:13.020 --> 00:36:15.049
feature and want to find apps that support
it.

00:36:15.049 --> 00:36:17.930
In terms of somebody who already likes your
app and you want to encourage them to try

00:36:17.930 --> 00:36:24.349
out daydream, our current sort of guidance
on this is if you already have settings, to

00:36:24.349 --> 00:36:29.700
have a row there where you say set up daydream
and it will actually take you to this screen

00:36:29.700 --> 00:36:30.700
right out in settings.

00:36:30.700 --> 00:36:37.799
And there's an activity -- there's an intent
named for this particular activity that I

00:36:37.799 --> 00:36:38.799
can dig up.

00:36:38.799 --> 00:36:41.650
I don't have it memorized, and so you can
direct people that way.

00:36:41.650 --> 00:36:42.650
&gt;&gt;&gt; Okay.

00:36:42.650 --> 00:36:43.650
Thanks.

00:36:43.650 --> 00:36:44.650
&gt;&gt;&gt; Hi.
&gt;&gt;Daniel Sandler: Yes.

00:36:44.650 --> 00:36:45.650
&gt;&gt;&gt; One question.

00:36:45.650 --> 00:36:52.189
So can you use the external monitor in daydream,
like can you connect to an HDMI monitor or

00:36:52.189 --> 00:36:53.359
--
&gt;&gt;Daniel Sandler: Right.

00:36:53.359 --> 00:36:55.079
So the secondary monitor API.

00:36:55.079 --> 00:36:58.559
Yes, you can do that and then you can draw
something different there, or you can draw

00:36:58.559 --> 00:36:59.759
the same thing.

00:36:59.759 --> 00:37:02.839
If you don't do anything in particular, if
you're just mirroring the device you will

00:37:02.839 --> 00:37:04.920
see the daydream in both places.

00:37:04.920 --> 00:37:06.950
But again, you can do whatever you want.

00:37:06.950 --> 00:37:12.609
So, yes, you should be able to run the display
API and draw something different on the HDMI

00:37:12.609 --> 00:37:14.560
monitor if that were important.

00:37:14.560 --> 00:37:15.560
&gt;&gt;&gt; Okay.

00:37:15.560 --> 00:37:16.560
Thank you.

00:37:16.560 --> 00:37:18.869
&gt;&gt;Daniel Sandler: Mm-hmm.

00:37:18.869 --> 00:37:19.869
&gt;&gt;&gt; Hi.

00:37:19.869 --> 00:37:24.790
I was wondering, can you take voice input
from daydream state?

00:37:24.790 --> 00:37:27.359
&gt;&gt;Daniel Sandler: I mean, yes.

00:37:27.359 --> 00:37:31.569
Well, it was asked earlier if some of the
specific new voice recognition stuff would

00:37:31.569 --> 00:37:35.019
be enabled, and I see no reason why not.

00:37:35.019 --> 00:37:38.630
I honestly haven't tried a lot of those APIs
with daydream yet.

00:37:38.630 --> 00:37:40.080
I'll check into it.

00:37:40.080 --> 00:37:42.019
Maybe we'll have a blog post about it.

00:37:42.019 --> 00:37:44.339
One more.

00:37:44.339 --> 00:37:47.660
&gt;&gt;&gt; I was just curious on performance issues.

00:37:47.660 --> 00:37:52.380
Like related to battery charging, if the screen
is always on or something like that.

00:37:52.380 --> 00:37:53.959
&gt;&gt;Daniel Sandler: Absolutely, yes.

00:37:53.959 --> 00:37:57.573
&gt;&gt;&gt; You leave your phone overnight charging,
so how long does it take to actually charge?

00:37:57.573 --> 00:37:59.369
&gt;&gt;Daniel Sandler: It dilates the charge time.

00:37:59.369 --> 00:38:03.869
It doesn't make it so that you can't charge
your phone overnight, and it varies based

00:38:03.869 --> 00:38:04.869
on what's going on.

00:38:04.869 --> 00:38:05.869
This is like dock apps; right?

00:38:05.869 --> 00:38:09.490
So not only are you keeping the screen on,
you're keeping the CPU on.

00:38:09.490 --> 00:38:12.319
You may be doing more or less depending on
the complexity of your animation.

00:38:12.319 --> 00:38:15.849
That's going to be something a developer -- each
developer has to sit down and work our with

00:38:15.849 --> 00:38:16.910
their implementation.

00:38:16.910 --> 00:38:21.119
Somebody doing a blinking colon clock animation
is probably not going to have to worry about

00:38:21.119 --> 00:38:22.720
it, but basically just keeping the screen
on.

00:38:22.720 --> 00:38:24.430
That's the lion's share of the computation.

00:38:24.430 --> 00:38:27.489
But if you have a full 3D live wallpaper,
it might be a little different.

00:38:27.489 --> 00:38:30.989
Now daydream has some additional safeguards
in there to make sure you don't crater your

00:38:30.989 --> 00:38:32.230
device overnight.

00:38:32.230 --> 00:38:36.140
So if the battery gets too low daydream will
shut off and the screen will go dark and the

00:38:36.140 --> 00:38:38.670
device will be allowed to charge fully.

00:38:38.670 --> 00:38:42.799
And daydream won't automatically start if
you put the device into a dock if the charge

00:38:42.799 --> 00:38:43.799
is too low.

00:38:43.799 --> 00:38:49.819
So in that way we won't ever -- daydream won't
cause your device to wake up with zero charge

00:38:49.819 --> 00:38:53.720
but it will cause charging to take longer
and that's -- just like any performance issue,

00:38:53.720 --> 00:38:59.140
each developer is going to have to sit down
and look at that.

00:38:59.140 --> 00:39:04.650
&gt;&gt;&gt;Is there any consideration to make -- to
sort of link daydream with your alarm set

00:39:04.650 --> 00:39:05.650
time?

00:39:05.650 --> 00:39:10.339
So say as you're close to waking up, the app
that you're using to daydream could change

00:39:10.339 --> 00:39:12.249
its actions when it knows you're about to
wake up.

00:39:12.249 --> 00:39:15.680
&gt;&gt;Daniel Sandler: That's a great idea.

00:39:15.680 --> 00:39:17.920
Go monetize that.

00:39:17.920 --> 00:39:18.920
Thank you all very much.

00:39:18.920 --> 00:39:19.920
I'll see you all outside.

00:39:19.920 --> 00:39:19.921
[ Applause ]

