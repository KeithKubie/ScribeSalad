WEBVTT
Kind: captions
Language: en

00:00:01.146 --> 00:00:04.700
PAUL LEWIS: So this is device
agnostic development.

00:00:04.700 --> 00:00:07.850
And I'm Paul Lewis.

00:00:07.850 --> 00:00:11.630
I'm the guy looking confused
over on the left.

00:00:11.630 --> 00:00:14.730
Well, I'm actually on
the right right now.

00:00:14.730 --> 00:00:16.480
I'm on the Chrome Developer
Relations team, and I spend

00:00:16.480 --> 00:00:19.340
most of my days talking about
and looking at rendering

00:00:19.340 --> 00:00:21.170
performance.

00:00:21.170 --> 00:00:21.950
PETER BEVERLOO: I'm
Peter Beverloo.

00:00:21.950 --> 00:00:23.530
I'm a software engineer
on the Chrome team.

00:00:23.530 --> 00:00:24.880
I work on Chrome for Android.

00:00:24.880 --> 00:00:26.560
And I mostly spend my
time pushing the

00:00:26.560 --> 00:00:29.680
web platform forward.

00:00:29.680 --> 00:00:33.435
PAUL LEWIS: So we ran
a small survey.

00:00:33.435 --> 00:00:37.330
And we asked developers two
questions amongst many.

00:00:37.330 --> 00:00:40.660
And the questions we asked them
were, which form factors

00:00:40.660 --> 00:00:43.630
do you support versus
prioritize?

00:00:43.630 --> 00:00:47.770
And as you can see, perhaps
not surprisingly, 96% of

00:00:47.770 --> 00:00:50.430
people said, we support
desktop.

00:00:50.430 --> 00:00:51.650
Which was pretty
much everybody.

00:00:51.650 --> 00:00:54.180
And 2/3 of people went
for phone and tablet.

00:00:54.180 --> 00:00:58.530
But as you can see on the
prioritization side, 81% of

00:00:58.530 --> 00:01:02.000
the 200 or so developers that we
asked said, you know what?

00:01:02.000 --> 00:01:05.129
Desktop is our top priority.

00:01:05.129 --> 00:01:05.830
So just take that in.

00:01:05.830 --> 00:01:08.400
Four out of five developers are
just going to focus pretty

00:01:08.400 --> 00:01:11.390
much on the desktop.

00:01:11.390 --> 00:01:13.960
Now, this leads us
to a question.

00:01:13.960 --> 00:01:18.290
If we prioritize a single form
factor, what happens?

00:01:18.290 --> 00:01:19.940
Well, the answer is probably
quite obvious, right?

00:01:19.940 --> 00:01:24.820
We start to build on the
expectations of capability.

00:01:24.820 --> 00:01:29.090
We build expecting that we're
going to have desktop-like

00:01:29.090 --> 00:01:32.370
performance, that we can expect
to see big screens,

00:01:32.370 --> 00:01:34.540
good GPUs, good CPUs,
a lot of memory, all

00:01:34.540 --> 00:01:35.790
those kinds of things.

00:01:38.320 --> 00:01:39.590
PETER BEVERLOO: So along
comes a new form

00:01:39.590 --> 00:01:42.850
factor, such as mobile.

00:01:42.850 --> 00:01:43.750
What does this mean?

00:01:43.750 --> 00:01:46.450
Well, we've been creating
websites for desktop

00:01:46.450 --> 00:01:48.660
experiences for quite
a long time now.

00:01:48.660 --> 00:01:53.530
And desktop experiences give us
a number of advantages over

00:01:53.530 --> 00:01:56.490
more limited platforms, such
as mobile devices.

00:01:56.490 --> 00:02:00.410
As an example, there's this big
screen available to you,

00:02:00.410 --> 00:02:03.840
which has a lot of space for you
to put content on, or to

00:02:03.840 --> 00:02:05.330
put data on.

00:02:05.330 --> 00:02:07.030
But on mobile, this
is different.

00:02:07.030 --> 00:02:09.600
And it's not just the screen
size which is different.

00:02:09.600 --> 00:02:10.740
It's a lot smaller.

00:02:10.740 --> 00:02:12.950
But it's also in terms of
a number of additional

00:02:12.950 --> 00:02:15.000
constraints, such as
computational power.

00:02:15.000 --> 00:02:18.380
We create websites using a lot
of JavaScripts, for example,

00:02:18.380 --> 00:02:20.700
for scrolling or
for accordions.

00:02:20.700 --> 00:02:22.920
And while this works fine and
acceptable on a desktop

00:02:22.920 --> 00:02:26.170
machine, on a mobile device,
will just look janky.

00:02:30.300 --> 00:02:32.400
So along comes a new
form factor.

00:02:32.400 --> 00:02:33.650
But what?

00:02:36.080 --> 00:02:37.900
It's not just about desktop
and mobile.

00:02:37.900 --> 00:02:40.020
The web actually goes quite
a bit further than that.

00:02:40.020 --> 00:02:41.830
And this is something
we've only started

00:02:41.830 --> 00:02:44.040
to see quite recently.

00:02:44.040 --> 00:02:47.320
Back in the days, there used
to be mobile devices which

00:02:47.320 --> 00:02:51.470
were capable of internet using
I modes or similar systems.

00:02:51.470 --> 00:02:53.520
But they weren't really
internet.

00:02:53.520 --> 00:02:54.520
You could see a webpage.

00:02:54.520 --> 00:02:55.730
You could talk to a server.

00:02:55.730 --> 00:02:57.990
But their experience
was quite limited.

00:02:57.990 --> 00:03:01.100
These days, mobile devices such
as phones and tablets,

00:03:01.100 --> 00:03:04.120
they're basically on par
with desktop devices.

00:03:04.120 --> 00:03:07.210
And they just work, just like a
desktop machine, of course,

00:03:07.210 --> 00:03:09.590
with a number of additional
constraints.

00:03:09.590 --> 00:03:12.240
Now, we're going to see more
and more websites coming

00:03:12.240 --> 00:03:14.950
through televisions or
through consoles.

00:03:14.950 --> 00:03:16.860
On the television, the screen
is a lot bigger.

00:03:16.860 --> 00:03:19.170
But we also know that the user
is sitting away from the

00:03:19.170 --> 00:03:22.250
screen, quite a bit further than
is the case with mobile

00:03:22.250 --> 00:03:24.270
device or a desktop machine.

00:03:24.270 --> 00:03:26.900
Which means that, as developers,
we actually have

00:03:26.900 --> 00:03:29.040
to change how we create
that website.

00:03:29.040 --> 00:03:32.420
With console, be it a portable
one or be it a stationary one

00:03:32.420 --> 00:03:37.540
next to your television, the
story changes completely

00:03:37.540 --> 00:03:38.900
altogether again.

00:03:38.900 --> 00:03:41.760
And with portable devices,
portable devices such as

00:03:41.760 --> 00:03:47.470
consoles, they can be similar
to mobile, like a telephone.

00:03:47.470 --> 00:03:49.270
But they could be entirely
different as well, with

00:03:49.270 --> 00:03:52.600
different forms of inputs and
different types of managing

00:03:52.600 --> 00:03:54.910
your data with some of it.

00:03:54.910 --> 00:03:56.220
And we really don't know.

00:03:56.220 --> 00:03:57.730
What is the next device?

00:03:57.730 --> 00:04:00.940
We've got desktops, mobile,
televisions, consoles.

00:04:00.940 --> 00:04:02.420
What device is going
to come next?

00:04:02.420 --> 00:04:05.120
Is it going to be wearable
computers?

00:04:05.120 --> 00:04:07.840
Could be anything.

00:04:07.840 --> 00:04:10.160
PAUL LEWIS: So the point that
we're trying to make with all

00:04:10.160 --> 00:04:13.000
this is that it's just
the web, OK?

00:04:13.000 --> 00:04:16.514
We have this propensity for
talking about the mobile web.

00:04:16.514 --> 00:04:18.089
We don't talk about the
desktop web, though.

00:04:18.089 --> 00:04:20.550
We don't talk about the TV
web, or the console web.

00:04:20.550 --> 00:04:21.940
We just talk about
the mobile web.

00:04:21.940 --> 00:04:23.860
And that's fair enough,
to some degree.

00:04:23.860 --> 00:04:26.820
But what we need to start
realizing, I think, is that

00:04:26.820 --> 00:04:27.960
it's just the web.

00:04:27.960 --> 00:04:31.280
It's consumed through a number
of different devices.

00:04:31.280 --> 00:04:34.825
And a good experience matters,
no matter what the device.

00:04:37.770 --> 00:04:40.360
So then, becoming
device agnostic.

00:04:40.360 --> 00:04:43.100
If we figure that we're going
to have people connecting to

00:04:43.100 --> 00:04:45.080
our sites and applications
through a bunch of different

00:04:45.080 --> 00:04:47.530
devices, how can we
start actually

00:04:47.530 --> 00:04:51.390
being device agnostic?

00:04:51.390 --> 00:04:54.480
So the grand unified theory
of devices, sounds good.

00:04:57.310 --> 00:05:00.520
We figured we can actually
turn this on its head.

00:05:00.520 --> 00:05:03.450
We can actually start figuring
out what the

00:05:03.450 --> 00:05:06.650
constraints are, OK?

00:05:06.650 --> 00:05:09.120
Instead of device capability,
what about looking at the

00:05:09.120 --> 00:05:10.860
device constraint?

00:05:10.860 --> 00:05:12.700
And we figured there are
actually these three

00:05:12.700 --> 00:05:13.470
constraints.

00:05:13.470 --> 00:05:15.790
And we can assess every device
that we know about today and

00:05:15.790 --> 00:05:17.580
the ones that we don't know
about today, the ones that are

00:05:17.580 --> 00:05:20.170
coming tomorrow, in
the same way.

00:05:20.170 --> 00:05:20.770
Network--

00:05:20.770 --> 00:05:23.450
how quickly can it pull stuff
down on the wire?

00:05:23.450 --> 00:05:24.280
What's the latency?

00:05:24.280 --> 00:05:25.320
What's the bandwidth?

00:05:25.320 --> 00:05:29.000
If it's network constrained,
it's going to be slow.

00:05:29.000 --> 00:05:29.960
Compute constraint--

00:05:29.960 --> 00:05:31.990
so how quickly can it
process information?

00:05:31.990 --> 00:05:33.610
How much memory has it got?

00:05:33.610 --> 00:05:37.850
Is it good at calculating my
styles, laying out my page?

00:05:37.850 --> 00:05:39.790
What's the CPU like, OK?

00:05:39.790 --> 00:05:43.630
And then the last one is a
giant, shiny monkey head.

00:05:43.630 --> 00:05:45.010
Or it's about rendering.

00:05:45.010 --> 00:05:45.890
It's about pixels.

00:05:45.890 --> 00:05:49.440
How quickly can it push pixels
around the screen?

00:05:49.440 --> 00:05:51.390
Does it have a good GPU?

00:05:51.390 --> 00:05:54.240
And when we start actually
looking at it from this

00:05:54.240 --> 00:05:56.770
perspective, what we can
actually start to realize is

00:05:56.770 --> 00:06:00.030
if we distance ourselves from
these constraints, if we start

00:06:00.030 --> 00:06:03.370
planning for these constraints,
then what we

00:06:03.370 --> 00:06:05.960
realize is that we are in effect
becoming agnostic to

00:06:05.960 --> 00:06:08.800
them so that when we hit a
device with one or more of

00:06:08.800 --> 00:06:11.250
these constraints, then
we're not actually

00:06:11.250 --> 00:06:13.250
as bothered by it.

00:06:13.250 --> 00:06:16.010
So instead of relying on the
capabilities of a desktop,

00:06:16.010 --> 00:06:18.480
we're now going to spin it on
its head, look at these

00:06:18.480 --> 00:06:21.630
constraints in turn, figure out
what comes up, and how we

00:06:21.630 --> 00:06:23.630
can distance ourselves
from them.

00:06:26.870 --> 00:06:29.300
PETER BEVERLOO: So let's look at
a few of these device types

00:06:29.300 --> 00:06:31.250
and map them against
constraints.

00:06:31.250 --> 00:06:34.420
And this creates quite an
interesting matrix.

00:06:34.420 --> 00:06:36.190
I apologize for those
of you in the back.

00:06:36.190 --> 00:06:37.860
It will be extremely
hard to read.

00:06:37.860 --> 00:06:40.260
So I'll just name what's
on the slides.

00:06:40.260 --> 00:06:42.450
On a desktop machine, the
network will generally be

00:06:42.450 --> 00:06:43.600
quite good.

00:06:43.600 --> 00:06:45.780
You'll be connected to your
home DSL connection, which

00:06:45.780 --> 00:06:48.160
will be quite performant.

00:06:48.160 --> 00:06:52.060
Computational power will be
decent, even for older desktop

00:06:52.060 --> 00:06:55.220
machines, while they're still
better than mobile.

00:06:55.220 --> 00:06:57.240
Rendering performance will
be decent because they're

00:06:57.240 --> 00:07:00.900
multipurpose machines, and
they're not just created for

00:07:00.900 --> 00:07:02.180
streaming video.

00:07:02.180 --> 00:07:04.990
So they'll be able to
display a website.

00:07:04.990 --> 00:07:06.490
And the screen is big.

00:07:06.490 --> 00:07:09.350
Maybe not as big as a television
in terms of

00:07:09.350 --> 00:07:12.600
physical size, but often you
have a monitor of maybe 20 or

00:07:12.600 --> 00:07:14.280
24 inches [? of text grid ?].

00:07:14.280 --> 00:07:16.210
And as a developer, that
gives you a lot of

00:07:16.210 --> 00:07:18.840
space to play with.

00:07:18.840 --> 00:07:21.270
On mobile, it's a little
bit different.

00:07:21.270 --> 00:07:23.740
With a mobile device, you
can be on the move

00:07:23.740 --> 00:07:25.090
at any random time.

00:07:25.090 --> 00:07:27.800
And you cannot rely on the
network connection to always

00:07:27.800 --> 00:07:28.970
be available.

00:07:28.970 --> 00:07:32.930
So network conditions
are quite bad.

00:07:32.930 --> 00:07:34.890
Computational power can be OK.

00:07:34.890 --> 00:07:37.210
There's different classes
of mobile devices--

00:07:37.210 --> 00:07:38.630
tablets are, of course,
entirely

00:07:38.630 --> 00:07:40.960
different from phones.

00:07:40.960 --> 00:07:44.370
But even within a single class,
such as a phone, there

00:07:44.370 --> 00:07:46.880
can be quite a lot
of differences.

00:07:46.880 --> 00:07:50.200
We've got phones of
over $500, $600.

00:07:50.200 --> 00:07:51.920
There's phones of $50.

00:07:51.920 --> 00:07:55.710
And computational power will
rely a lot on the capabilities

00:07:55.710 --> 00:07:57.730
of the actual device.

00:07:57.730 --> 00:07:59.950
Rendering performance
will be bad.

00:07:59.950 --> 00:08:02.360
We're trying to get to
60 frames per second.

00:08:02.360 --> 00:08:04.560
But it turns out to be really
difficult to get

00:08:04.560 --> 00:08:06.180
there on any platform.

00:08:06.180 --> 00:08:08.590
And the screen is quite small.

00:08:08.590 --> 00:08:10.360
That's the physical
screen size.

00:08:10.360 --> 00:08:13.250
While the actual logical screen
size, so the number of

00:08:13.250 --> 00:08:16.570
pixels which have to be shown
to the user can be a lot

00:08:16.570 --> 00:08:18.500
bigger because we've got
all these awesome

00:08:18.500 --> 00:08:21.090
high resolution fonts.

00:08:21.090 --> 00:08:25.090
For televisions, well, they're
standing in your house.

00:08:25.090 --> 00:08:27.710
I don't often walk around with
a television behind my arm.

00:08:27.710 --> 00:08:28.130
PAUL LEWIS: What?

00:08:28.130 --> 00:08:29.582
I do.

00:08:29.582 --> 00:08:30.070
No, I don't.

00:08:30.070 --> 00:08:31.730
PETER BEVERLOO: OK.

00:08:31.730 --> 00:08:34.840
So the network conditions will
generally be similar to your

00:08:34.840 --> 00:08:36.320
normal desktop computer.

00:08:36.320 --> 00:08:37.830
Computational power is bad.

00:08:37.830 --> 00:08:41.299
It's meant for showing video,
not for showing a website.

00:08:41.299 --> 00:08:43.450
Rendering performance will be
bad for the same reasons

00:08:43.450 --> 00:08:45.283
because the device has
been made really

00:08:45.283 --> 00:08:46.960
for a single purpose.

00:08:46.960 --> 00:08:48.530
And the screen is pretty big.

00:08:48.530 --> 00:08:50.620
But the resolution can be
smaller, and in some cases

00:08:50.620 --> 00:08:53.390
even smaller than
a mobile device.

00:08:53.390 --> 00:08:56.760
Now for consoles, it's quite
similar to mobile.

00:08:56.760 --> 00:08:59.110
It depends on the kind
of console, really.

00:08:59.110 --> 00:09:00.580
You can be on the move
at all times.

00:09:00.580 --> 00:09:02.870
Computational power, well,
they're meant for games, for

00:09:02.870 --> 00:09:05.980
interactive imaging
while websites

00:09:05.980 --> 00:09:08.400
can be static content.

00:09:08.400 --> 00:09:11.480
Rendering performance,
again, it really

00:09:11.480 --> 00:09:13.130
depends on the device.

00:09:13.130 --> 00:09:14.760
And the same goes for
a screen size.

00:09:14.760 --> 00:09:18.200
And for the new class of
devices, we just don't know.

00:09:18.200 --> 00:09:20.260
We have no idea what's
coming to get us.

00:09:20.260 --> 00:09:22.900
PAUL LEWIS: Well actually, to
be fair, if we just take a

00:09:22.900 --> 00:09:26.360
step back, we actually don't
know on any of these.

00:09:26.360 --> 00:09:28.620
Because let's say desktop,
take that for a second.

00:09:28.620 --> 00:09:30.720
It could be a laptop, as well.

00:09:30.720 --> 00:09:32.180
And we said good
in the network.

00:09:32.180 --> 00:09:34.070
But what if you've tethered
your phone?

00:09:34.070 --> 00:09:35.780
PETER BEVERLOO: Or what if you
have a dial-up internet

00:09:35.780 --> 00:09:36.350
connection?

00:09:36.350 --> 00:09:37.590
PAUL LEWIS: Yeah.

00:09:37.590 --> 00:09:39.730
At this point, actually all
bets are off, right?

00:09:39.730 --> 00:09:42.610
Because on pretty much any
of these, you can find an

00:09:42.610 --> 00:09:45.560
exception, OK?

00:09:45.560 --> 00:09:48.300
PETER BEVERLOO: So the sad
reality is that everything in

00:09:48.300 --> 00:09:51.990
this matrix is a "maybe."
We just don't know.

00:09:51.990 --> 00:09:54.640
And the only real way to figure
out what you need to

00:09:54.640 --> 00:09:58.340
optimize for your website is not
to just blindly apply all

00:09:58.340 --> 00:10:00.890
the best practices you can
find around the internet.

00:10:00.890 --> 00:10:02.620
You need to measure, and you
need to look at your

00:10:02.620 --> 00:10:04.380
statistics.

00:10:04.380 --> 00:10:05.990
Go to whatever statistics
you have.

00:10:05.990 --> 00:10:09.310
Look at the devices which your
visitors are actually using.

00:10:09.310 --> 00:10:11.210
Optimize for these devices.

00:10:11.210 --> 00:10:13.830
Use a number of available APIs,
which we'll come back to

00:10:13.830 --> 00:10:16.800
later in this presentation,
and actually measure where

00:10:16.800 --> 00:10:18.280
your performance bottlenecks
are.

00:10:21.140 --> 00:10:24.430
So one way of actually measuring
what's going on are

00:10:24.430 --> 00:10:26.210
the Chrome DevTools.

00:10:26.210 --> 00:10:28.250
This is built into
Google Chrome in

00:10:28.250 --> 00:10:29.860
all the release channels.

00:10:29.860 --> 00:10:33.460
And it makes it entirely
possible to accurately measure

00:10:33.460 --> 00:10:35.300
any aspect of what--

00:10:35.300 --> 00:10:37.960
at any time-- what's happening
on your page in terms of

00:10:37.960 --> 00:10:40.720
network, computational
requirements, and

00:10:40.720 --> 00:10:42.460
rendering as well.

00:10:42.460 --> 00:10:44.710
We've got a series of videos
available on YouTube.

00:10:44.710 --> 00:10:47.420
They're called "The Breakpoint."
The screenshot

00:10:47.420 --> 00:10:51.690
here is showing Paul Iris on
the first few seconds of a

00:10:51.690 --> 00:10:55.250
presentation which gives you a
video introduction to a number

00:10:55.250 --> 00:10:57.900
of features available
in DevTools.

00:10:57.900 --> 00:11:00.560
There was a talk yesterday
about a Chrome DevTools

00:11:00.560 --> 00:11:03.930
revolution, which we'll have
shown you about a number of

00:11:03.930 --> 00:11:07.310
new features, which have
recently become available.

00:11:07.310 --> 00:11:10.840
And we've recently updated the
DevTools documentation, which

00:11:10.840 --> 00:11:13.510
you can definitely check out as
well, and which contains a

00:11:13.510 --> 00:11:16.690
lot of information about how
to measure exactly what's

00:11:16.690 --> 00:11:19.405
going on on your pages.

00:11:19.405 --> 00:11:23.910
PAUL LEWIS: OK, so we've
established that we could be

00:11:23.910 --> 00:11:24.760
on any device.

00:11:24.760 --> 00:11:28.330
And we can't really predict
exactly what the constraints

00:11:28.330 --> 00:11:29.700
are going to be for
that device.

00:11:29.700 --> 00:11:32.120
So now, let's step into the
network computer rendering.

00:11:32.120 --> 00:11:34.710
And this is actually essentially
a performance talk

00:11:34.710 --> 00:11:35.330
by the back door.

00:11:35.330 --> 00:11:38.260
If you've been up to the third
floor and seen in the Chrome

00:11:38.260 --> 00:11:40.750
area, we actually have
a performance area.

00:11:40.750 --> 00:11:42.450
And network, compute,
and render are in

00:11:42.450 --> 00:11:43.260
fact those three areas.

00:11:43.260 --> 00:11:44.850
If you've not been, you
should stop by.

00:11:44.850 --> 00:11:47.330
But what we're going to do is
we're going to step through

00:11:47.330 --> 00:11:50.410
the common issues that we see on
each of these three areas,

00:11:50.410 --> 00:11:52.640
and I'm going to try and find
ways of distancing ourselves

00:11:52.640 --> 00:11:53.920
from those constraints.

00:11:53.920 --> 00:11:56.550
So irrespective of which device
we're actually hitting,

00:11:56.550 --> 00:11:58.850
if we hit that constraint,
we've done everything we

00:11:58.850 --> 00:12:01.330
possibly can to try to make
that a non-issue.

00:12:06.050 --> 00:12:07.780
PETER BEVERLOO: So the first
thing to keep in mind is the

00:12:07.780 --> 00:12:09.190
page load time.

00:12:09.190 --> 00:12:12.740
This basically describes the
time it takes for the user to

00:12:12.740 --> 00:12:14.680
start an [? execution ?] action,
like clicking on a

00:12:14.680 --> 00:12:18.770
link or entering a link in a
browser address bar until the

00:12:18.770 --> 00:12:20.560
time that they see the
page and that they're

00:12:20.560 --> 00:12:22.990
actually able to use it.

00:12:22.990 --> 00:12:25.600
Now, you've got all
your visitors.

00:12:25.600 --> 00:12:28.890
If your page on a mobile device
takes more than three

00:12:28.890 --> 00:12:34.610
seconds to load, then 57% of
your visitors will go away.

00:12:34.610 --> 00:12:35.250
They'll just leave.

00:12:35.250 --> 00:12:36.070
They'll go elsewhere.

00:12:36.070 --> 00:12:37.960
They might search for
an alternative.

00:12:37.960 --> 00:12:39.780
They may know an alternative.

00:12:39.780 --> 00:12:43.200
And they're gone for
the day, basically.

00:12:43.200 --> 00:12:44.890
Now, it gets worse.

00:12:44.890 --> 00:12:47.660
From all these visitors, if
your page takes more than

00:12:47.660 --> 00:12:52.700
three seconds to load,
46% will not return.

00:12:52.700 --> 00:12:55.470
They'll find a competitor
of yours.

00:12:55.470 --> 00:12:58.090
They'll find an alternative
source of the data which

00:12:58.090 --> 00:12:59.700
you're giving to them.

00:12:59.700 --> 00:13:02.230
And they'll start preferring
that other website just

00:13:02.230 --> 00:13:04.800
because it loads a little
bit faster.

00:13:04.800 --> 00:13:08.630
And probably the worst statistic
is that 22% of your

00:13:08.630 --> 00:13:11.330
visitors will tell
their friends to

00:13:11.330 --> 00:13:14.380
not use your website.

00:13:14.380 --> 00:13:16.520
Now, let that sink in
for a little bit.

00:13:16.520 --> 00:13:19.800
That means that over one in five
visitors of your mobile

00:13:19.800 --> 00:13:24.940
website will tell their friends
to not visit your site

00:13:24.940 --> 00:13:28.030
if your page takes more than
three seconds to load.

00:13:28.030 --> 00:13:29.750
That's quite a lot of impacts.

00:13:29.750 --> 00:13:33.220
And one thing to keep in mind
here is that the perceived

00:13:33.220 --> 00:13:37.090
loading time of a webpage is
actually 15% higher than the

00:13:37.090 --> 00:13:38.420
actual loading time.

00:13:38.420 --> 00:13:40.390
And it gets worse because when
they're talking to their

00:13:40.390 --> 00:13:44.140
friends about this, they will
remember a loading time which

00:13:44.140 --> 00:13:48.510
is up to 35% slower of
what it actually was.

00:13:48.510 --> 00:13:50.910
So while it actually could have
been three seconds, in

00:13:50.910 --> 00:13:54.395
their memory, it may very well
be up to five seconds or more.

00:13:57.060 --> 00:13:58.560
So there's a few things
we can do.

00:13:58.560 --> 00:14:02.420
And probably the biggest
contributor to having a big

00:14:02.420 --> 00:14:05.390
load time for your webpages
is having a huge number of

00:14:05.390 --> 00:14:07.930
requests on your page.

00:14:07.930 --> 00:14:11.940
Now, for every request through
your page, we can look at the

00:14:11.940 --> 00:14:13.690
costs implied by it.

00:14:13.690 --> 00:14:16.280
And we can split it up into
three different ones.

00:14:16.280 --> 00:14:18.670
Firstly, there's the
latency costs.

00:14:18.670 --> 00:14:21.110
For each of these requests for
the resources, which could be

00:14:21.110 --> 00:14:24.530
an image or a style sheet, we
need to make a connection to

00:14:24.530 --> 00:14:25.380
the server--

00:14:25.380 --> 00:14:27.300
or well, in some cases.

00:14:27.300 --> 00:14:29.460
Because in either case, we might
be able to reuse the

00:14:29.460 --> 00:14:30.520
connection.

00:14:30.520 --> 00:14:33.190
We need to request a resource,
get a reply.

00:14:33.190 --> 00:14:35.750
And that could take a little bit
of time, especially if the

00:14:35.750 --> 00:14:39.090
resource is hosted on a
different server, in which

00:14:39.090 --> 00:14:41.780
case a DNS lookup might
be necessary.

00:14:41.780 --> 00:14:44.930
Now, for big resources such as
images, bandwidth might be a

00:14:44.930 --> 00:14:46.210
constraint.

00:14:46.210 --> 00:14:51.070
If I'm on a 3G connection and
I'm sitting on a train, then

00:14:51.070 --> 00:14:56.180
it will take a while for that
image to be available on my

00:14:56.180 --> 00:14:57.930
mobile device.

00:14:57.930 --> 00:15:00.880
And of course, there's
a financial costs.

00:15:00.880 --> 00:15:04.390
This is not just about visitors
which you may lose if

00:15:04.390 --> 00:15:06.910
your site takes quite
a long time to load.

00:15:06.910 --> 00:15:09.340
But Paul and I are from
the United Kingdom.

00:15:09.340 --> 00:15:12.030
And if we want to use the mobile
internet on our normal

00:15:12.030 --> 00:15:14.770
phones here in the United
States, than the cost is up to

00:15:14.770 --> 00:15:16.950
$8 per megabyte.

00:15:16.950 --> 00:15:20.060
Now, you need to have a really
good server or websites if I

00:15:20.060 --> 00:15:23.650
want to use it at that cost.

00:15:23.650 --> 00:15:26.440
So probably the easiest thing
to do here is obsolete a

00:15:26.440 --> 00:15:28.000
number of these requests.

00:15:28.000 --> 00:15:31.580
For every single one of the
resources on your page, ask

00:15:31.580 --> 00:15:33.930
yourself, do you
really need it?

00:15:33.930 --> 00:15:38.380
Can you maybe get around
in-lining it on the page, by

00:15:38.380 --> 00:15:40.460
concatenating stylesheets,
so if you have several

00:15:40.460 --> 00:15:42.160
stylesheets in a single file?

00:15:42.160 --> 00:15:46.070
Or can you perhaps minify them
to reduce bandwidth costs?

00:15:46.070 --> 00:15:49.515
And making optimizations such
as these will often show to

00:15:49.515 --> 00:15:51.920
have a big impact in the base
loading time performance of

00:15:51.920 --> 00:15:52.760
your websites.

00:15:52.760 --> 00:15:54.040
PAUL LEWIS: Now, a lot
of people already

00:15:54.040 --> 00:15:55.220
do this one, right?

00:15:55.220 --> 00:15:58.410
Most people, when you speak to
them, they say, yeah, we can

00:15:58.410 --> 00:16:01.010
concatenate and minimize
our files.

00:16:01.010 --> 00:16:04.390
The next thing that we want to
talk about is reducing the

00:16:04.390 --> 00:16:05.640
image overhead.

00:16:05.640 --> 00:16:08.330
A statistic that you may have
heard of, and if you haven't

00:16:08.330 --> 00:16:10.810
and it's the first time, it's
a really good one to put in

00:16:10.810 --> 00:16:15.580
your head, 60% of web
traffic, 60% of the

00:16:15.580 --> 00:16:18.410
average webpage is images.

00:16:18.410 --> 00:16:20.520
And that gives us a huge
opportunity for

00:16:20.520 --> 00:16:22.860
optimizing our network.

00:16:22.860 --> 00:16:24.800
Can we change formats?

00:16:24.800 --> 00:16:29.280
In the case of WebP, by
switching to it, the Chrome

00:16:29.280 --> 00:16:31.435
Web Store saves several
terabytes of

00:16:31.435 --> 00:16:32.520
transfer every day.

00:16:32.520 --> 00:16:35.290
Now, it may not be that
it's going to save

00:16:35.290 --> 00:16:37.120
you that much transfer.

00:16:37.120 --> 00:16:40.360
But you can immediately start
to realize that, actually,

00:16:40.360 --> 00:16:43.780
instead of JPEGs, I should be
using PNGs, or PNGs instead of

00:16:43.780 --> 00:16:46.140
JPEGs and GIFs maybe,
or even WebP.

00:16:46.140 --> 00:16:49.070
It depends on the actual image
and what you're trying to

00:16:49.070 --> 00:16:50.550
achieve and so forth.

00:16:50.550 --> 00:16:53.640
But spend some time figuring
out whether you can change

00:16:53.640 --> 00:16:55.750
formats, whether you
can change quality.

00:16:55.750 --> 00:16:58.710
And that will potentially save
you an awful lot of data.

00:16:58.710 --> 00:17:00.770
And the next thing is actually
request images that are the

00:17:00.770 --> 00:17:01.570
size you need.

00:17:01.570 --> 00:17:05.230
Responsive web design has
become all the rage.

00:17:05.230 --> 00:17:07.700
And it's really quite cool.

00:17:07.700 --> 00:17:11.230
But there is this problem with
it, which is that people often

00:17:11.230 --> 00:17:13.599
request their full
size images.

00:17:13.599 --> 00:17:17.380
And then, the user ends up
paying a tax, as it were.

00:17:17.380 --> 00:17:21.970
We rely on client side resizing
to get it down.

00:17:21.970 --> 00:17:24.970
But we end up requesting a much
larger file in some cases

00:17:24.970 --> 00:17:26.540
than we actually need.

00:17:26.540 --> 00:17:29.230
There are loads of things that
you can do on the server side

00:17:29.230 --> 00:17:32.120
to actually let you scale
down and cache a smaller

00:17:32.120 --> 00:17:33.070
version of the image.

00:17:33.070 --> 00:17:35.000
So if you're not doing that,
take a look at that one.

00:17:35.000 --> 00:17:38.500
And then the last thing is,
do you even need an image?

00:17:38.500 --> 00:17:39.870
Oh, controversial.

00:17:39.870 --> 00:17:41.710
You could get away with
SVG in some cases.

00:17:41.710 --> 00:17:45.160
You could get away with fonts,
web fonts, with icon glyphs.

00:17:45.160 --> 00:17:46.420
So take some time.

00:17:46.420 --> 00:17:49.230
Just have a look at those and
just play around, see if you

00:17:49.230 --> 00:17:51.320
can actually get rid of
some of your images.

00:17:51.320 --> 00:17:54.650
60% of the average page
is going to be images.

00:17:54.650 --> 00:17:57.070
So if you can get rid of that,
that saves us a ton.

00:17:59.990 --> 00:18:02.020
PETER BEVERLOO: So one of the
solutions available to you if

00:18:02.020 --> 00:18:05.150
you have control over your
server itself, so over the

00:18:05.150 --> 00:18:07.960
Apache or EngineX installation,
is that you can

00:18:07.960 --> 00:18:10.450
look into using mod_pagespeed.

00:18:10.450 --> 00:18:14.770
mod_pagespeed is a plug-in made
by Google which basically

00:18:14.770 --> 00:18:17.500
gives you a free pass to
a quicker website.

00:18:17.500 --> 00:18:19.840
What it does, it looks at
your web page before

00:18:19.840 --> 00:18:21.160
sending it to the user.

00:18:21.160 --> 00:18:24.090
And it will look into ways
to optimize your page by

00:18:24.090 --> 00:18:27.420
in-lining resources, by
concatenating style sheet

00:18:27.420 --> 00:18:31.730
files together, and by doing a
number of optimization steps,

00:18:31.730 --> 00:18:34.520
which just generally
make it faster.

00:18:34.520 --> 00:18:39.420
Of course, this does require you
to be in control of your

00:18:39.420 --> 00:18:41.910
web server.

00:18:41.910 --> 00:18:44.780
But if you're not, there's
another tool available called

00:18:44.780 --> 00:18:47.200
PageSpeed Insights.

00:18:47.200 --> 00:18:49.920
Many of will work on the
front end of a website.

00:18:49.920 --> 00:18:53.740
And this tool is as simple as
enter the URL of your page,

00:18:53.740 --> 00:18:56.870
click our button, and it'll
start downloading your page

00:18:56.870 --> 00:18:59.530
simple start analyzing it, and
it will show up with a number

00:18:59.530 --> 00:19:02.640
of suggestions on how you can
optimize the page itself and

00:19:02.640 --> 00:19:05.460
make it faster to load and
to display to the user.

00:19:09.210 --> 00:19:13.940
Now of course, these two tools
will only optimize your page

00:19:13.940 --> 00:19:15.720
to the best of their
abilities.

00:19:15.720 --> 00:19:18.400
But they do this by looking at
the average page, what they're

00:19:18.400 --> 00:19:22.240
doing, and applying these
rules over your site.

00:19:22.240 --> 00:19:25.190
Now, your websites
are not average.

00:19:25.190 --> 00:19:27.420
They're special, because
in a way there

00:19:27.420 --> 00:19:29.050
is no average website.

00:19:29.050 --> 00:19:32.640
And the only real way to
optimize the page itself is by

00:19:32.640 --> 00:19:35.950
doing it yourself and by looking
at what pieces of

00:19:35.950 --> 00:19:39.260
information or resources on your
page actually impact to

00:19:39.260 --> 00:19:41.270
reduce performance.

00:19:41.270 --> 00:19:43.870
Now, we've already spoken a
little bit about DevTools,

00:19:43.870 --> 00:19:48.140
which make it possible for you
to look at exactly which parts

00:19:48.140 --> 00:19:49.770
are taking a long time
in the loading

00:19:49.770 --> 00:19:51.640
process of the webpage.

00:19:51.640 --> 00:19:54.250
But another API available to
you is the resource timing

00:19:54.250 --> 00:19:58.080
API, which exposes high fidelity
information about

00:19:58.080 --> 00:20:00.440
most of the resources which
you've included on the page

00:20:00.440 --> 00:20:03.590
itself and gives you insight
in how long it took to

00:20:03.590 --> 00:20:07.280
actually look up the DNS for
that resource, to connect to

00:20:07.280 --> 00:20:10.070
the server, or to download
the resource.

00:20:10.070 --> 00:20:12.600
And especially if you have
clocking resources, such as

00:20:12.600 --> 00:20:15.560
scripts, it can be a great way
to actually figure out which

00:20:15.560 --> 00:20:17.980
script is blocking your page
from showing up quickly.

00:20:21.760 --> 00:20:23.600
PAUL LEWIS: OK, so we talked
about the kinds of things that

00:20:23.600 --> 00:20:26.640
you can get into for actually
transferring your size in apps

00:20:26.640 --> 00:20:28.510
down to end users.

00:20:28.510 --> 00:20:30.760
Now, we actually step into
the run-timey bit.

00:20:30.760 --> 00:20:33.710
It's actually running.

00:20:33.710 --> 00:20:36.380
And this is the bit where
we talk about compute.

00:20:36.380 --> 00:20:38.720
So we've got everything
downloaded, or we've got

00:20:38.720 --> 00:20:40.030
enough to get going.

00:20:40.030 --> 00:20:43.450
And now, we want to talk about
what that actually involves to

00:20:43.450 --> 00:20:44.490
solve for compute.

00:20:44.490 --> 00:20:47.320
So the first thing we need to do
is define this term "jank."

00:20:47.320 --> 00:20:48.850
Now, you've probably heard
it over the course of

00:20:48.850 --> 00:20:50.450
the last few days.

00:20:50.450 --> 00:20:51.930
Let's define it again,
just in case.

00:20:51.930 --> 00:20:56.020
Chrome is synchronized to the
refresh rate of the device.

00:20:56.020 --> 00:20:59.730
Now, at 60 Hertz, that means
you've got just about 16 and

00:20:59.730 --> 00:21:03.450
1/2 milliseconds to get
everything done.

00:21:03.450 --> 00:21:05.140
And that includes Chrome's
housekeeping It

00:21:05.140 --> 00:21:06.210
includes your code.

00:21:06.210 --> 00:21:09.270
And that's a bunch of things
like layout, recount style,

00:21:09.270 --> 00:21:12.830
paint, composite, JavaScript,
all that stuff.

00:21:12.830 --> 00:21:13.910
16 milliseconds.

00:21:13.910 --> 00:21:16.790
I don't get much done in 16
milliseconds, but Chrome

00:21:16.790 --> 00:21:18.600
really, really does.

00:21:18.600 --> 00:21:20.590
We call this the frame budget.

00:21:20.590 --> 00:21:25.660
And if we don't hit that frame
budget, users notice it.

00:21:25.660 --> 00:21:27.060
It's kind of this hitching.

00:21:27.060 --> 00:21:30.030
When they scroll and it hitches
and hiccups, that's

00:21:30.030 --> 00:21:32.730
what we call "jank." So when
we talk about jank in the

00:21:32.730 --> 00:21:34.540
coming slides, that's what
we're referring to.

00:21:34.540 --> 00:21:36.950
We're talking about busting
that frame budget of most

00:21:36.950 --> 00:21:39.020
likely 16 and 1/2
milliseconds.

00:21:42.770 --> 00:21:45.120
So the first thing I want to
talk about in the compute area

00:21:45.120 --> 00:21:47.760
is style recalculations.

00:21:47.760 --> 00:21:51.800
Now, it's very common when we
do apps that we change as a

00:21:51.800 --> 00:21:53.720
class on the body, OK?

00:21:53.720 --> 00:21:55.780
And you do that for maybe state,
or you maybe even do it

00:21:55.780 --> 00:21:56.820
for styling.

00:21:56.820 --> 00:21:59.610
The problem is the size
of the tree that's

00:21:59.610 --> 00:22:01.750
affected can be huge.

00:22:01.750 --> 00:22:04.560
And you see on the left hand
side-- hopefully you can see-

00:22:04.560 --> 00:22:06.260
I was changing a class
on the body.

00:22:06.260 --> 00:22:11.750
And I was affecting just over
23,000 elements by doing that.

00:22:11.750 --> 00:22:14.795
The calculation style effort,
then, was 20 milliseconds.

00:22:14.795 --> 00:22:16.520
Now, this is Canary
that's telling us

00:22:16.520 --> 00:22:17.560
the elements affected.

00:22:17.560 --> 00:22:19.730
So if you haven't seen that
feature, it's a really useful

00:22:19.730 --> 00:22:21.410
thing when you're trying
to figure out,

00:22:21.410 --> 00:22:22.650
what was the impact?

00:22:22.650 --> 00:22:24.760
There's a corresponding one
for layout, as well, which

00:22:24.760 --> 00:22:27.190
tells you the scope and
the size of the layout

00:22:27.190 --> 00:22:27.960
calculation.

00:22:27.960 --> 00:22:32.130
So, we've changed the body,
23,000 elements, 20

00:22:32.130 --> 00:22:33.130
milliseconds.

00:22:33.130 --> 00:22:35.400
I knew that I actually
wanted to affect six.

00:22:35.400 --> 00:22:38.300
And when I did that, it was a
fraction of a millisecond.

00:22:38.300 --> 00:22:41.135
And it sounds obvious, but only
change the things that

00:22:41.135 --> 00:22:42.310
you need to change.

00:22:42.310 --> 00:22:43.530
Go and have a look
at your app.

00:22:43.530 --> 00:22:46.210
See whether you're actually
overdoing your style

00:22:46.210 --> 00:22:47.460
recalculations.

00:22:48.980 --> 00:22:51.710
Layout thrashing--

00:22:51.710 --> 00:22:53.660
if you've not seen this one
before, this is quite a

00:22:53.660 --> 00:22:55.080
fascinating one, really.

00:22:55.080 --> 00:22:57.950
So this little bit of JavaScript
at the top allows

00:22:57.950 --> 00:23:01.740
us to get the thing called
target from the DOM.

00:23:01.740 --> 00:23:03.310
And what we're going to do is
we're going to go through a

00:23:03.310 --> 00:23:05.400
bunch of other elements, and
we're going to ask--

00:23:05.400 --> 00:23:07.940
we're going to set their width
to match the target's width.

00:23:07.940 --> 00:23:08.970
Pretty trivial stuff today.

00:23:08.970 --> 00:23:11.630
What is that, three lines
of code, plus a comment?

00:23:11.630 --> 00:23:13.430
OK.

00:23:13.430 --> 00:23:16.090
The first thing we need to note
is that asking for offset

00:23:16.090 --> 00:23:19.090
width is going to cause
Chrome to do a layout.

00:23:19.090 --> 00:23:20.900
So it goes off, and it says,
all right, what's the left,

00:23:20.900 --> 00:23:22.560
the top, the width,
the height?

00:23:22.560 --> 00:23:25.350
What do I need to know about all
the elements in the page

00:23:25.350 --> 00:23:27.490
to be able to give you a good
answer on offset width?

00:23:27.490 --> 00:23:29.570
So it goes off, and
it does that.

00:23:29.570 --> 00:23:33.440
The next thing is that first
element gets its style width

00:23:33.440 --> 00:23:37.000
value set to the
target's width.

00:23:37.000 --> 00:23:40.610
The problem is by doing that, we
just invalidated the layout

00:23:40.610 --> 00:23:42.780
calculation that we've
just done.

00:23:42.780 --> 00:23:45.220
So then, the next time around
the loop, we ask Chrome to do

00:23:45.220 --> 00:23:47.830
a potentially very expensive
layout again.

00:23:47.830 --> 00:23:53.330
So we do this get, set, get,
set, get, set, get, set.

00:23:53.330 --> 00:23:55.300
And the problem is this adds up
really quickly, especially

00:23:55.300 --> 00:23:56.940
when layout is expensive.

00:23:56.940 --> 00:24:02.140
What we should be doing is
getting once and setting many.

00:24:02.140 --> 00:24:03.066
And it probably make
sense when you

00:24:03.066 --> 00:24:04.500
hear it in that sense.

00:24:04.500 --> 00:24:07.970
The thing is to realize that
offset width is actually going

00:24:07.970 --> 00:24:09.540
to cause the layout to happen.

00:24:09.540 --> 00:24:11.430
And you can Google
that, how to not

00:24:11.430 --> 00:24:13.710
trigger a layout in WebKit.

00:24:13.710 --> 00:24:17.810
And you'll see a very good blog
post that'll tell you

00:24:17.810 --> 00:24:22.540
which ones in WebKit and Blink
will cause a layout to happen.

00:24:22.540 --> 00:24:23.970
So avoid layout thrashing.

00:24:23.970 --> 00:24:26.705
Two very simple things there,
layout and style calculations.

00:24:30.500 --> 00:24:33.050
PETER BEVERLOO: So a browser
is a very particular set of

00:24:33.050 --> 00:24:36.950
skills, skills it has acquired
over a short but quite

00:24:36.950 --> 00:24:39.120
eventful career.

00:24:39.120 --> 00:24:41.850
You should not do in JavaScript
in an imperative

00:24:41.850 --> 00:24:44.490
way what you can do in
a declarative way.

00:24:44.490 --> 00:24:48.660
Animations and transitions are
excellent examples of that.

00:24:48.660 --> 00:24:51.620
Five years ago, six years ago,
perhaps even more, we had all

00:24:51.620 --> 00:24:54.050
these libraries such as
jQuery or Dojo, which

00:24:54.050 --> 00:24:56.380
had animation libraries.

00:24:56.380 --> 00:24:59.430
And it allowed you to animate
items on your page.

00:24:59.430 --> 00:25:03.440
It allows you to change the left
property from 0 to 1000

00:25:03.440 --> 00:25:06.010
and move an element horizontally
over your page

00:25:06.010 --> 00:25:07.870
without the user having
to do anything at all.

00:25:07.870 --> 00:25:09.330
And that's awesome.

00:25:09.330 --> 00:25:13.930
But this is really costly
because every time the frame

00:25:13.930 --> 00:25:17.270
does something, and often a
library internally sets a

00:25:17.270 --> 00:25:21.280
timer to try and match the frame
budget of the browser,

00:25:21.280 --> 00:25:23.000
it needs to look at
the position.

00:25:23.000 --> 00:25:24.450
It needs to do a re-layout.

00:25:24.450 --> 00:25:27.610
And all of these are really
expensive operations.

00:25:27.610 --> 00:25:30.110
Now, there are excellent
alternatives available to this

00:25:30.110 --> 00:25:32.640
in CSS to do it in a
declarative way.

00:25:32.640 --> 00:25:34.340
And by doing it in a declarative
way, you're

00:25:34.340 --> 00:25:37.990
actually telling the browser
what you want it to do instead

00:25:37.990 --> 00:25:40.380
of telling the browser
what it has to do.

00:25:40.380 --> 00:25:44.890
And by telling the browser your
goal, you're basically

00:25:44.890 --> 00:25:47.700
saying, OK, I want you
to do this effect.

00:25:47.700 --> 00:25:51.640
But please do it in the best
way you can do it for me.

00:25:51.640 --> 00:25:55.960
And by using the CSS transitions
module or the CSS

00:25:55.960 --> 00:25:59.500
animation module, the browser
is actually able to optimize

00:25:59.500 --> 00:26:01.810
all this JavaScript code
away from you.

00:26:01.810 --> 00:26:04.290
It can do these animations in
some cases on a different

00:26:04.290 --> 00:26:05.100
[? fret ?].

00:26:05.100 --> 00:26:08.510
And this will look a lot better,
and a lot less janky

00:26:08.510 --> 00:26:13.360
for the user, while also taking
a lot less CPU, while

00:26:13.360 --> 00:26:15.970
it doesn't eat away from
your frame budget.

00:26:15.970 --> 00:26:17.560
And it works regardless
of many of the

00:26:17.560 --> 00:26:20.740
constraints of the device.

00:26:20.740 --> 00:26:23.600
Up until a few years ago,
fixed precision was

00:26:23.600 --> 00:26:24.480
unreliable.

00:26:24.480 --> 00:26:27.800
It could stick around
in the view ports.

00:26:27.800 --> 00:26:30.250
It could be janky if
you were scrolling.

00:26:30.250 --> 00:26:33.050
Now, lately, in pretty much all
big mobile browsers, this

00:26:33.050 --> 00:26:33.880
has been fixed.

00:26:33.880 --> 00:26:36.830
And of course, it works in all
desktop browsers, as well.

00:26:36.830 --> 00:26:38.820
So if you have an element
which should always be

00:26:38.820 --> 00:26:41.920
available in the view port of
the page itself, just use

00:26:41.920 --> 00:26:42.980
precision:sticky.

00:26:42.980 --> 00:26:45.360
No, precision:fixed.

00:26:45.360 --> 00:26:48.195
And don't use JavaScript to
keep it in exactly that

00:26:48.195 --> 00:26:51.135
position using the scrolling
position, for example.

00:26:51.135 --> 00:26:52.550
PAUL LEWIS: But you could use
positions position:sticky.

00:26:52.550 --> 00:26:54.670
What would you use
position:sticky for?

00:26:54.670 --> 00:26:56.280
PETER BEVERLOO: Well,
position:sticky actually is a

00:26:56.280 --> 00:26:58.050
new experimental feature
in Chrome.

00:26:58.050 --> 00:26:58.505
PAUL LEWIS: Really?

00:26:58.505 --> 00:26:59.180
PETER BEVERLOO: Yeah.

00:26:59.180 --> 00:27:00.940
You can go to the Chrome
flags page.

00:27:00.940 --> 00:27:03.680
You can enable it in Chrome
for Android, as well.

00:27:03.680 --> 00:27:06.100
And position:sticky
is somewhat like a

00:27:06.100 --> 00:27:08.296
fixed position element.

00:27:08.296 --> 00:27:11.300
But if the parent element is
not inside of the view port

00:27:11.300 --> 00:27:14.040
itself, so if it's scrolled
away somewhere, then it'll

00:27:14.040 --> 00:27:15.910
just be an in flow element.

00:27:15.910 --> 00:27:19.370
If the parent element comes in
the page, then it will make

00:27:19.370 --> 00:27:21.690
sure that the element is--
that the sticky persist

00:27:21.690 --> 00:27:23.880
element is visible.

00:27:23.880 --> 00:27:29.070
But if the parent element kind
of moves out of the view port

00:27:29.070 --> 00:27:32.880
but still is visible, then the
element will stick around in

00:27:32.880 --> 00:27:35.620
the view port as if it
was fixed positioned.

00:27:35.620 --> 00:27:39.785
And an example you might know
which uses this quite a lot is

00:27:39.785 --> 00:27:40.630
an address book.

00:27:40.630 --> 00:27:43.250
If you have a lot of names,
then the header, which

00:27:43.250 --> 00:27:45.810
contains the first letter of the
names that are currently

00:27:45.810 --> 00:27:48.430
being displayed may stick around
at the top of a view

00:27:48.430 --> 00:27:52.490
port for a while until the
next letter is up.

00:27:52.490 --> 00:27:55.700
And the fourth big point is keep
your event listener code

00:27:55.700 --> 00:27:56.860
to a minimum.

00:27:56.860 --> 00:27:59.765
Some event handlers, such as
scrolling events, will be

00:27:59.765 --> 00:28:02.750
called many, many, many times
per second, sometimes even

00:28:02.750 --> 00:28:04.440
multiple times per frame.

00:28:04.440 --> 00:28:08.350
And any processing you do in
these handlers will eat away

00:28:08.350 --> 00:28:09.960
from your frame budget.

00:28:09.960 --> 00:28:14.270
And this will definitely limit
the time Chrome has to display

00:28:14.270 --> 00:28:15.420
your web page.

00:28:15.420 --> 00:28:18.030
And as a result, you
might miss frames.

00:28:18.030 --> 00:28:20.160
PAUL LEWIS: One thing you can
definitely do with that one

00:28:20.160 --> 00:28:22.560
is, say you're doing something
in your scroll handler, just

00:28:22.560 --> 00:28:25.190
get it to store the
last known value.

00:28:25.190 --> 00:28:27.180
And then, schedule a
RequestAnimationFrame.

00:28:27.180 --> 00:28:29.220
Because what will happen is
most of the time, you have

00:28:29.220 --> 00:28:31.220
like four or five of
these running, OK?

00:28:31.220 --> 00:28:32.980
You get like four or
five in frame.

00:28:32.980 --> 00:28:34.940
But you actually only care
about the last one.

00:28:34.940 --> 00:28:36.740
So you just store the value.

00:28:36.740 --> 00:28:38.430
And then, send a
RequestAnimationFrame frame to

00:28:38.430 --> 00:28:40.350
actually deal with the
last known value.

00:28:40.350 --> 00:28:42.800
This is called debouncing
in some places.

00:28:42.800 --> 00:28:44.820
Debouncing is the most
common name for it.

00:28:44.820 --> 00:28:47.220
You just basically, rather than
running that expensive

00:28:47.220 --> 00:28:50.670
code in you scroll handler,
just keep the value.

00:28:50.670 --> 00:28:52.780
And run one handler
at the end.

00:28:55.780 --> 00:28:57.470
OK, so we've talked
about network.

00:28:57.470 --> 00:28:59.480
We've talked about compute.

00:28:59.480 --> 00:29:01.910
So let's now take a look at some
of the stuff that happens

00:29:01.910 --> 00:29:04.460
inside of render.

00:29:04.460 --> 00:29:07.370
Now, I have DevTools
open here.

00:29:07.370 --> 00:29:10.610
And this captured something
which is quite expensive on

00:29:10.610 --> 00:29:12.020
the paint side of things.

00:29:12.020 --> 00:29:14.800
And if you look, we've twizzled
down one of the

00:29:14.800 --> 00:29:15.400
[? pen ?] records.

00:29:15.400 --> 00:29:19.630
And we spent 13 milliseconds
decoding a JPEG.

00:29:19.630 --> 00:29:23.030
And we have 16 milliseconds to
do everything, not just paint.

00:29:23.030 --> 00:29:29.170
And then, we spent a further 71
milliseconds dealing with

00:29:29.170 --> 00:29:29.930
the resize.

00:29:29.930 --> 00:29:33.690
Now, this is what I was talking
about before about

00:29:33.690 --> 00:29:35.380
responsive web design
is that there's

00:29:35.380 --> 00:29:37.460
potentially a second tax.

00:29:37.460 --> 00:29:39.230
And before, we talked about
reducing image overhead.

00:29:39.230 --> 00:29:40.950
But we talked about it from
the network constraint.

00:29:40.950 --> 00:29:43.080
We also have a render constraint
because we actually

00:29:43.080 --> 00:29:46.070
have to process these images.

00:29:46.070 --> 00:29:50.090
So actually, just getting in
the smallest possible image

00:29:50.090 --> 00:29:54.210
and in the correct dimensions
is actually extremely

00:29:54.210 --> 00:29:57.080
advantageous.

00:29:57.080 --> 00:29:58.770
So check out DevTools if you've
not seen that feature.

00:29:58.770 --> 00:30:01.160
That's really useful to actually
find out your decodes

00:30:01.160 --> 00:30:02.630
and your resizes.

00:30:02.630 --> 00:30:04.300
Paint costs--

00:30:04.300 --> 00:30:06.900
so whenever you scroll or you're
interacting with your

00:30:06.900 --> 00:30:10.430
page, the things that change,
or the things that appear on

00:30:10.430 --> 00:30:12.300
screen, they need
to get painted.

00:30:12.300 --> 00:30:14.980
And since painting is actually
quite an expensive thing,

00:30:14.980 --> 00:30:17.870
depending on the styles that you
apply, we have to keep it

00:30:17.870 --> 00:30:19.270
to a minimum.

00:30:19.270 --> 00:30:21.200
So there are two things that
are actually involved in

00:30:21.200 --> 00:30:22.780
reducing paint costs.

00:30:22.780 --> 00:30:27.810
The first of those is actually
reducing the size of the area

00:30:27.810 --> 00:30:28.420
that got painted.

00:30:28.420 --> 00:30:29.220
So you see I've got

00:30:29.220 --> 00:30:31.320
showPaintRectangles switched on here.

00:30:31.320 --> 00:30:33.740
So you go into DevTools,
hit the cog, switch on

00:30:33.740 --> 00:30:36.400
showPaintRectangles, and then
interact with your page.

00:30:36.400 --> 00:30:38.415
Now, as I roll over these
elements, you can see that

00:30:38.415 --> 00:30:40.220
they're flashing red, which
is Chrome saying,

00:30:40.220 --> 00:30:41.550
I've repainted those.

00:30:41.550 --> 00:30:42.220
But watch there.

00:30:42.220 --> 00:30:45.930
When I scroll, the whole
page flashed red.

00:30:45.930 --> 00:30:48.810
Now, that should be a warning
to you that the entire page

00:30:48.810 --> 00:30:50.470
needed painting.

00:30:50.470 --> 00:30:51.960
And that's potentially
an expensive thing.

00:30:51.960 --> 00:30:53.580
And it's the kind of thing
that gives you those big,

00:30:53.580 --> 00:30:55.130
green bars.

00:30:55.130 --> 00:30:58.690
OK, now there's a very specific
reason for this one.

00:30:58.690 --> 00:31:01.660
But I'll let you figure
out what that is.

00:31:01.660 --> 00:31:02.950
The thing to know is
that you're looking

00:31:02.950 --> 00:31:04.890
for those small rows.

00:31:04.890 --> 00:31:06.620
The question you should be
asking yourself is, am I

00:31:06.620 --> 00:31:09.760
seeing the bits getting
repainted that I thought were

00:31:09.760 --> 00:31:11.180
going to get repainted?

00:31:11.180 --> 00:31:13.440
Is it predictable to me, as in,
I rolled over this, and I

00:31:13.440 --> 00:31:15.190
expected it to repaint,
yes, it did.

00:31:15.190 --> 00:31:17.580
When I scrolled, I didn't
expect to see the

00:31:17.580 --> 00:31:18.480
whole thing flash red.

00:31:18.480 --> 00:31:19.680
The whole screen flashed red.

00:31:19.680 --> 00:31:21.840
So there's something
to look at there.

00:31:21.840 --> 00:31:25.130
The second thing was we've
reduced the size of the

00:31:25.130 --> 00:31:27.590
painted area, is to then reduce
the complexity of the

00:31:27.590 --> 00:31:29.520
painted areas.

00:31:29.520 --> 00:31:31.140
So we've got another tool
that's fantastic.

00:31:31.140 --> 00:31:34.880
It's called Continuous
Page Repainted.

00:31:34.880 --> 00:31:36.930
And what it does is it puts
Chrome into a mode where it

00:31:36.930 --> 00:31:41.500
forces Chrome to repaint the
whole page every frame.

00:31:41.500 --> 00:31:42.540
You see, it switched on there.

00:31:42.540 --> 00:31:44.970
It puts this little chart in the
top right-hand corner with

00:31:44.970 --> 00:31:46.850
them the number of milliseconds
that it took to

00:31:46.850 --> 00:31:48.220
paint the page.

00:31:48.220 --> 00:31:49.940
Now, what we can do is we start
switching off styles.

00:31:49.940 --> 00:31:52.910
And in this particular case,
switching off box shadow or

00:31:52.910 --> 00:31:56.210
border radius is the one that's
actually dropping that

00:31:56.210 --> 00:31:58.660
time to paint really far down.

00:31:58.660 --> 00:32:00.420
Now, I'd much rather you
didn't walk out of here

00:32:00.420 --> 00:32:02.040
saying, box shadow is bad.

00:32:02.040 --> 00:32:03.560
Border radius is bad.

00:32:03.560 --> 00:32:04.900
We shan't use these.

00:32:04.900 --> 00:32:06.170
That's not what we
want you to do.

00:32:06.170 --> 00:32:09.220
What we want you to realize
is that your styles have a

00:32:09.220 --> 00:32:11.050
corresponding cost.

00:32:11.050 --> 00:32:13.500
And there is a tool in DevTools
that will let you

00:32:13.500 --> 00:32:15.920
figure what the cost is.

00:32:15.920 --> 00:32:18.750
And you can use that to your
advantage to move away from

00:32:18.750 --> 00:32:21.140
that constraint so that you're
not render bound.

00:32:21.140 --> 00:32:25.050
OK, so reduce the paint size,
then reduce the complexity of

00:32:25.050 --> 00:32:26.300
your paints.

00:32:28.970 --> 00:32:30.600
PETER BEVERLOO: So far, we've
talked about technical

00:32:30.600 --> 00:32:33.720
constraints which apply
to you as a developer.

00:32:33.720 --> 00:32:36.880
But eventually, what we really
want is to give the right user

00:32:36.880 --> 00:32:39.830
experience to the end user, to
the person who's actually

00:32:39.830 --> 00:32:42.990
using your page.

00:32:42.990 --> 00:32:45.380
Now, one thing to realize
is that the user

00:32:45.380 --> 00:32:47.020
comes for your content.

00:32:47.020 --> 00:32:50.630
They come to your website
with a specific purpose.

00:32:50.630 --> 00:32:52.070
That could be to get
information.

00:32:52.070 --> 00:32:55.280
That could be to use
your service.

00:32:55.280 --> 00:32:58.840
And they don't really care about
the big image header

00:32:58.840 --> 00:33:01.710
which you had to have at all
of the top of your pages,

00:33:01.710 --> 00:33:03.590
which basically just means that
they have to scroll the

00:33:03.590 --> 00:33:07.520
page before they even
get to the content.

00:33:07.520 --> 00:33:10.200
You, as the developer, have
all these constraints.

00:33:10.200 --> 00:33:12.190
But the user shouldn't
have them.

00:33:12.190 --> 00:33:16.560
And the main thing here, the
main takeaway, is that if I,

00:33:16.560 --> 00:33:19.600
as a user, use my mobile device,
if I use a phone to

00:33:19.600 --> 00:33:22.790
look at your website, I really
don't care about how well it

00:33:22.790 --> 00:33:26.690
works on a desktop machines
because I use a mobile device.

00:33:26.690 --> 00:33:30.610
And the other way around,
the same goes.

00:33:30.610 --> 00:33:35.070
And while you probably want
to offer a different user

00:33:35.070 --> 00:33:37.280
experience, because after all,
they're different classes of

00:33:37.280 --> 00:33:41.180
devices, you should offer
the same functionality.

00:33:41.180 --> 00:33:44.050
And what this basically means
is that the content on your

00:33:44.050 --> 00:33:47.310
page or the services, it's fine
to refactored them or to

00:33:47.310 --> 00:33:50.530
reshape them in a way that's
more optimized for the device,

00:33:50.530 --> 00:33:53.310
as long as you don't offer
reduced functionality such as

00:33:53.310 --> 00:33:55.670
a simple entry page.

00:33:55.670 --> 00:33:57.920
Sorry, you can't use
the [? fee ?]

00:33:57.920 --> 00:34:00.010
[? guide ?] at this time because
it's not optimized for

00:34:00.010 --> 00:34:02.250
mobiles, PCs, and desktop.

00:34:02.250 --> 00:34:03.525
That just scares away users.

00:34:06.250 --> 00:34:09.600
When you develop a website for a
desktop computer, you've got

00:34:09.600 --> 00:34:11.580
all this real estate
available to you.

00:34:11.580 --> 00:34:12.960
You can put content next
to each other.

00:34:12.960 --> 00:34:16.870
You can put it on top of each
other in any format you want.

00:34:16.870 --> 00:34:19.810
Especially for text, you can
have a news article.

00:34:19.810 --> 00:34:21.210
You can have a bold
introduction.

00:34:21.210 --> 00:34:23.760
You can have related information
about the company

00:34:23.760 --> 00:34:25.199
or the people who
were mentioned

00:34:25.199 --> 00:34:26.760
in the article itself.

00:34:26.760 --> 00:34:29.630
And this is nice because on a
desktop, because there's all

00:34:29.630 --> 00:34:32.150
this space, even relatively
big amounts of

00:34:32.150 --> 00:34:34.280
text look quite moderate.

00:34:34.280 --> 00:34:37.020
And it doesn't fill
up your screen.

00:34:37.020 --> 00:34:39.699
Now, for mobile devices,
this is a problem.

00:34:39.699 --> 00:34:42.510
Or actually, for devices with
constrained screen size, this

00:34:42.510 --> 00:34:43.889
is a problem.

00:34:43.889 --> 00:34:46.790
Because if I look at exactly the
same text, or maybe even

00:34:46.790 --> 00:34:50.850
one paragraph of text on my
mobile phone, then my entire

00:34:50.850 --> 00:34:52.750
screen is filled with text.

00:34:52.750 --> 00:34:54.530
And that's quite intimidating.

00:34:54.530 --> 00:34:57.770
If I then start to scroll down,
and I get five or six

00:34:57.770 --> 00:35:01.030
more paragraphs, then I have to
scroll for several seconds

00:35:01.030 --> 00:35:05.520
before the text stops, even at
relatively high scroll speeds.

00:35:05.520 --> 00:35:06.950
And this is intimidating.

00:35:06.950 --> 00:35:10.600
And this could easily
scare away users.

00:35:10.600 --> 00:35:12.270
Now, we know that you're
not always in

00:35:12.270 --> 00:35:13.850
control of your content.

00:35:13.850 --> 00:35:16.950
So changing the text itself or
changing the images might not

00:35:16.950 --> 00:35:18.730
always be a feasible solution.

00:35:18.730 --> 00:35:22.000
But you can at least pass on
the message that the users

00:35:22.000 --> 00:35:25.180
care a lot more about getting
an optimized experience and

00:35:25.180 --> 00:35:28.660
care about getting the same
functionality than they get

00:35:28.660 --> 00:35:30.945
for getting all of the text
and all of the side

00:35:30.945 --> 00:35:31.630
information.

00:35:31.630 --> 00:35:33.655
PAUL LEWIS: And one thing to
notice here, just if you go

00:35:33.655 --> 00:35:38.050
back, is that at the bottom of
that, we've got an image

00:35:38.050 --> 00:35:39.710
that's kind of suggesting
something like responsive.

00:35:39.710 --> 00:35:42.550
Just bear in mind, if you do
do this kind of responsive

00:35:42.550 --> 00:35:45.010
thing, just watch out for that
tax that I talked about

00:35:45.010 --> 00:35:46.750
earlier about resizing
images down.

00:35:46.750 --> 00:35:50.400
Make sure you always request the
images at the right size.

00:35:50.400 --> 00:35:52.600
OK.

00:35:52.600 --> 00:35:54.390
So we have a couple of
suggestions, as you've just

00:35:54.390 --> 00:36:00.020
seen, because we think it'll be
good to give you a couple

00:36:00.020 --> 00:36:02.540
of suggestions for
your workflow.

00:36:02.540 --> 00:36:06.110
The first one is, assign
somebody that you used to like

00:36:06.110 --> 00:36:08.765
to your team as the sheriff.

00:36:08.765 --> 00:36:12.150
They'll probably become
unpopular pretty quickly.

00:36:12.150 --> 00:36:16.170
However, they perform a very
important role for you.

00:36:16.170 --> 00:36:19.250
As you can see, the idea is
to clarify and set some

00:36:19.250 --> 00:36:20.320
constraints before you start.

00:36:20.320 --> 00:36:22.430
How much time are we going to
spend in garbage collection,

00:36:22.430 --> 00:36:25.030
paint, composite, layout,
recalc style?

00:36:25.030 --> 00:36:27.750
Where are we going to spend our
time, on the assumption

00:36:27.750 --> 00:36:30.180
that we've got a network
constrained device, or a

00:36:30.180 --> 00:36:31.050
render concerned device?

00:36:31.050 --> 00:36:32.260
Where are we going to actually
spend that time?

00:36:32.260 --> 00:36:33.860
Then, that person is
going to track it.

00:36:33.860 --> 00:36:35.710
And they're going to stop
you from shipping if

00:36:35.710 --> 00:36:37.190
you don't hit it.

00:36:37.190 --> 00:36:39.890
Now, the question then becomes,
well, what numbers

00:36:39.890 --> 00:36:41.170
should we have?

00:36:41.170 --> 00:36:43.740
And the honest answer is, it
depends on your application.

00:36:43.740 --> 00:36:46.200
But have that person--

00:36:46.200 --> 00:36:50.857
a lot of times, when we speak to
developers, performance and

00:36:50.857 --> 00:36:54.890
this kind of stuff is often
a bit like a unit test.

00:36:54.890 --> 00:36:56.010
Are we fast?

00:36:56.010 --> 00:36:57.030
No.

00:36:57.030 --> 00:36:58.280
Whoops.

00:37:01.020 --> 00:37:03.200
What we're talking about is
building it in from the start

00:37:03.200 --> 00:37:06.170
so that it's something that
you're continually checking

00:37:06.170 --> 00:37:06.840
all the way through.

00:37:06.840 --> 00:37:09.870
And there's somebody who's
owning and is responsible for

00:37:09.870 --> 00:37:12.390
you as a team.

00:37:12.390 --> 00:37:13.710
Check out jankfree.org.

00:37:13.710 --> 00:37:16.260
That's a bunch of slides.

00:37:16.260 --> 00:37:17.700
It's a bunch of articles.

00:37:17.700 --> 00:37:21.830
It's a bunch of videos, all of
which are designed to help you

00:37:21.830 --> 00:37:24.630
with these things we've talked
about, and in a lot more

00:37:24.630 --> 00:37:26.710
detail than we've been
able to cover.

00:37:26.710 --> 00:37:30.920
So that's a fantastic resource
that you can track.

00:37:30.920 --> 00:37:32.000
So, should we conclude?

00:37:32.000 --> 00:37:33.670
We should, because it says
"conclusion" on the screen.

00:37:33.670 --> 00:37:33.945
PETER BEVERLOO: Yes.

00:37:33.945 --> 00:37:35.920
PAUL LEWIS: Super.

00:37:35.920 --> 00:37:38.090
PETER BEVERLOO: It's not about
the device which users are

00:37:38.090 --> 00:37:39.550
able to access your website.

00:37:39.550 --> 00:37:41.670
It's about the content and
experience which you're

00:37:41.670 --> 00:37:42.860
delivering to them.

00:37:42.860 --> 00:37:44.990
And while the content and the
functionality should be the

00:37:44.990 --> 00:37:48.030
same, you can optimize them to
create a user experience

00:37:48.030 --> 00:37:50.770
specific to the different
devices.

00:37:50.770 --> 00:37:52.510
PAUL LEWIS: The devices you're
going to deal with, they're

00:37:52.510 --> 00:37:53.800
going to probably have
at least one

00:37:53.800 --> 00:37:56.590
constraint at some point.

00:37:56.590 --> 00:37:57.520
Even on a desktop,
you might have

00:37:57.520 --> 00:37:58.890
multiple processes running.

00:37:58.890 --> 00:38:00.940
There's no guarantee that
you're going to be good.

00:38:00.940 --> 00:38:04.320
So you figure out ways to
actually just reduce the load.

00:38:04.320 --> 00:38:06.010
Fight against those
constraints.

00:38:06.010 --> 00:38:08.580
And you will be agnostic.

00:38:08.580 --> 00:38:11.810
And mostly, let the browser do
what it's good at doing.

00:38:11.810 --> 00:38:13.450
If you're doing stuff with
JavaScript, and you don't need

00:38:13.450 --> 00:38:14.540
to do it, don't do it!

00:38:14.540 --> 00:38:17.530
Let the browser do it for you.

00:38:17.530 --> 00:38:19.420
PETER BEVERLOO: And just to
reiterate on that content a

00:38:19.420 --> 00:38:22.600
little bit more, users come
to your page for content.

00:38:22.600 --> 00:38:24.020
I've said it a number
of times.

00:38:24.020 --> 00:38:27.450
And I just say it again.

00:38:27.450 --> 00:38:31.200
And re-factor your content in a
more direct and concise way

00:38:31.200 --> 00:38:33.930
to get it to them in the
fastest way possible.

00:38:33.930 --> 00:38:38.050
Because after all, that's
why they're there.

00:38:38.050 --> 00:38:39.562
PAUL LEWIS: Thank
you very much.

00:38:39.562 --> 00:38:45.940
[APPLAUSE]

00:38:45.940 --> 00:38:48.600
PAUL LEWIS: We have a tiny
amount of time for one or two

00:38:48.600 --> 00:38:49.240
questions, maybe.

00:38:49.240 --> 00:38:51.130
So if you have a question,
go up to the mic.

00:38:51.130 --> 00:38:53.300
And we'll see if we can get
through any of them.

00:38:53.300 --> 00:38:55.740
And then, if you want to find
us after, we're going to be

00:38:55.740 --> 00:38:57.460
upstairs in the Chrome
area, probably

00:38:57.460 --> 00:38:58.070
in there for questions.

00:38:58.070 --> 00:39:00.480
I'll be in the performance area
if you're interested.

00:39:00.480 --> 00:39:01.830
AUDIENCE: I'm curious.

00:39:01.830 --> 00:39:04.070
The last couple I/Os we've seen
a lot about getting rid

00:39:04.070 --> 00:39:06.200
of jank and using the debouncing
technique that you

00:39:06.200 --> 00:39:08.240
guys have talked
about to do so.

00:39:08.240 --> 00:39:11.390
Which strikes me as a bug in the
spec because I don't know

00:39:11.390 --> 00:39:16.270
why anyone would ever care about
getting 200 touch or

00:39:16.270 --> 00:39:18.560
scroll events per frame.

00:39:18.560 --> 00:39:21.330
And yet, every single
application that any developer

00:39:21.330 --> 00:39:23.910
here is going to write means
that we have to take all this

00:39:23.910 --> 00:39:27.110
data, persist it somewhere,
use it in yet another

00:39:27.110 --> 00:39:29.450
function, and let it be garbage
collected later.

00:39:29.450 --> 00:39:31.390
Is that something that we should
address at a lower

00:39:31.390 --> 00:39:34.930
level than the JavaScript
that we write?

00:39:34.930 --> 00:39:36.750
PAUL LEWIS: Well, I think
if that's how you feel,

00:39:36.750 --> 00:39:41.430
definitely involve yourself in
the spec process for sure.

00:39:41.430 --> 00:39:44.020
It's something that we're
trying to watch.

00:39:44.020 --> 00:39:47.220
And I'm interested in it
because, especially as I said,

00:39:47.220 --> 00:39:49.900
I see a lot of code going to
scroll handlers and touch

00:39:49.900 --> 00:39:52.540
handlers that doesn't
need to be that.

00:39:52.540 --> 00:39:54.540
So there's a certain amount
of, should this be spec?

00:39:54.540 --> 00:39:56.860
Should this be developer
required?

00:39:56.860 --> 00:40:01.800
I haven't got a good use case
for multiple scroll handler or

00:40:01.800 --> 00:40:04.210
multiple calls of a scroll
handler, for example, inside a

00:40:04.210 --> 00:40:05.150
single frame.

00:40:05.150 --> 00:40:07.940
But I wouldn't like to presume
that nobody does.

00:40:07.940 --> 00:40:09.440
But I'm not saying that
they do, either.

00:40:09.440 --> 00:40:11.080
So I guess it could
be something

00:40:11.080 --> 00:40:12.750
that should be specced.

00:40:12.750 --> 00:40:14.500
And I'd involve yourself in the
spec process, and see if

00:40:14.500 --> 00:40:15.040
we can hash it out.

00:40:15.040 --> 00:40:16.670
PETER BEVERLOO: Well, a lot
of specifications--

00:40:16.670 --> 00:40:18.360
and really, keep this in
mind-- by offering

00:40:18.360 --> 00:40:21.470
asynchronous functionality
rather than synchronous ones.

00:40:21.470 --> 00:40:23.950
And even though this is often
not the case for event

00:40:23.950 --> 00:40:28.390
handlers, yet for getting many
kinds of data, it will allow

00:40:28.390 --> 00:40:31.230
it to do it on the background
[? fret ?], not block any

00:40:31.230 --> 00:40:33.200
other processing, and
just come back when

00:40:33.200 --> 00:40:35.350
everything is available.

00:40:35.350 --> 00:40:37.020
OK, we've gone a little
bit over time.

00:40:37.020 --> 00:40:38.500
PAUL LEWIS: Yeah, so I'm afraid
if you've got got any

00:40:38.500 --> 00:40:40.870
questions, just come and
find us upstairs.

00:40:40.870 --> 00:40:41.470
Thank you.

00:40:41.470 --> 00:40:42.720
PETER BEVERLOO: Thank you.

