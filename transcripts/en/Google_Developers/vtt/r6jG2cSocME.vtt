WEBVTT
Kind: captions
Language: en

00:00:10.010 --> 00:00:11.110
JJ BEHRENS: Welcome to Dartisms

00:00:11.110 --> 00:00:13.110
13, a birthday special.

00:00:13.110 --> 00:00:15.250
This is the M1 release
of Dart.

00:00:15.250 --> 00:00:16.110
Happy birthday, Seth.

00:00:16.110 --> 00:00:16.470
How do you feel?

00:00:16.470 --> 00:00:17.760
SETH LADD: Happy birthday, JJ.

00:00:17.760 --> 00:00:18.590
JJ BEHRENS: This is a big day.

00:00:18.590 --> 00:00:20.440
I'm super excited about this.

00:00:20.440 --> 00:00:22.180
SETH LADD: I have to say, our
early adopters in our

00:00:22.180 --> 00:00:23.850
community really made
this happen.

00:00:23.850 --> 00:00:24.370
JJ BEHRENS: This is true.

00:00:24.370 --> 00:00:24.986
SETH LADD: We've been working
really hard on

00:00:24.986 --> 00:00:25.890
the engineering team.

00:00:25.890 --> 00:00:27.510
But we've seen a ton
of libraries.

00:00:27.510 --> 00:00:28.990
And part of the things we'll
talk about is how the

00:00:28.990 --> 00:00:30.630
community has helped us
get to this point.

00:00:30.630 --> 00:00:34.680
JJ BEHRENS: Yeah, like one bug
at a time, thousands of them.

00:00:34.680 --> 00:00:35.400
SETH LADD: Yes.

00:00:35.400 --> 00:00:36.640
I think somebody did the math.

00:00:36.640 --> 00:00:39.000
It's something like 30 commits
a day averaged out.

00:00:39.000 --> 00:00:39.900
JJ BEHRENS: 30 commits a day.

00:00:39.900 --> 00:00:40.630
SETH LADD: Our team
has been cranking.

00:00:40.630 --> 00:00:43.340
JJ BEHRENS: Definitely, it
moves really quickly.

00:00:43.340 --> 00:00:44.925
So I'm JJ Behrens.

00:00:44.925 --> 00:00:45.920
This is Seth Ladd.

00:00:45.920 --> 00:00:48.630
And later we're going to
have Gilad Bracha.

00:00:48.630 --> 00:00:51.950
And we're going to just spend
today celebrating the MI

00:00:51.950 --> 00:00:52.780
release of Dart.

00:00:52.780 --> 00:00:53.990
Did you bring champagne?

00:00:53.990 --> 00:00:54.610
SETH LADD: I didn't.

00:00:54.610 --> 00:00:57.060
We're going to do something
bigger for 1.0.

00:00:57.060 --> 00:00:59.830
I think one of the main messages
with M1 is this is

00:00:59.830 --> 00:01:02.820
our first release since
our public launch

00:01:02.820 --> 00:01:04.170
about a year ago.

00:01:04.170 --> 00:01:07.480
And this one puts us on
that train for 1.0.

00:01:07.480 --> 00:01:09.270
So you'll see more milestones
from here.

00:01:09.270 --> 00:01:11.270
But now we're in
a groove here.

00:01:11.270 --> 00:01:14.250
And we're really comfortable
with where the project is now

00:01:14.250 --> 00:01:16.010
to get us to a later
1.0 stage.

00:01:16.010 --> 00:01:17.970
JJ BEHRENS: Well, I was actually
hoping you'd bring

00:01:17.970 --> 00:01:20.450
the champagne, because I've been
watching the Giants as

00:01:20.450 --> 00:01:22.600
they make their way to
the World Series.

00:01:22.600 --> 00:01:25.060
Did you know those guys get to
go through the whole champagne

00:01:25.060 --> 00:01:26.930
celebration like four times?

00:01:26.930 --> 00:01:30.020
SETH LADD: I just want to dump
Gatorade on Gilad for 1.0.

00:01:30.020 --> 00:01:30.590
JJ BEHRENS: That'd be fun.

00:01:30.590 --> 00:01:32.610
I'd watch that.

00:01:32.610 --> 00:01:34.850
So let's start with
a little bit of

00:01:34.850 --> 00:01:36.230
background material first.

00:01:36.230 --> 00:01:38.450
And then we'll go into
some M1 features.

00:01:38.450 --> 00:01:43.480
And then we'll grill Gilad
really badly with all the M1

00:01:43.480 --> 00:01:45.180
intrinsics and stuff
like that.

00:01:45.180 --> 00:01:48.030
So what is Dart?

00:01:48.030 --> 00:01:49.150
It's about productivity.

00:01:49.150 --> 00:01:51.420
It's about more powerful
tools.

00:01:51.420 --> 00:01:53.990
Tools to understand more about
your code and can do

00:01:53.990 --> 00:01:55.350
more with your code.

00:01:55.350 --> 00:01:57.520
And it's about more
structured code.

00:01:57.520 --> 00:02:00.800
So that we don't have 10 billion
different libraries

00:02:00.800 --> 00:02:03.560
that each have their idea
of what a class is.

00:02:03.560 --> 00:02:04.730
SETH LADD: I like to
look at Dart like a

00:02:04.730 --> 00:02:06.260
scalable language as well.

00:02:06.260 --> 00:02:09.009
Where you can start with a small
set of files, maybe just

00:02:09.009 --> 00:02:10.590
one file, top level functions.

00:02:10.590 --> 00:02:12.840
You don't even need classes
in the beginning.

00:02:12.840 --> 00:02:14.550
And this is a very web
developer thing.

00:02:14.550 --> 00:02:15.880
You want to try out an idea.

00:02:15.880 --> 00:02:18.740
And then you want to integrate
quickly and scale up or grow

00:02:18.740 --> 00:02:22.520
to many, many files, hundreds of
thousands of lines of code.

00:02:22.520 --> 00:02:24.600
And that's where that structure
really pays off.

00:02:24.600 --> 00:02:27.970
So you integrate the classes,
the implicit interfaces, the

00:02:27.970 --> 00:02:29.220
optional static types.

00:02:29.220 --> 00:02:32.470
And now you've got maybe 100
developers using all the HTML5

00:02:32.470 --> 00:02:33.500
features out there.

00:02:33.500 --> 00:02:36.460
And so I love to see that from
small to big story with Dart.

00:02:36.460 --> 00:02:38.390
JJ BEHRENS: Yeah, I keep meaning
to do a blog post

00:02:38.390 --> 00:02:41.110
where I always say that
languages don't scale

00:02:41.110 --> 00:02:42.050
architectures scale.

00:02:42.050 --> 00:02:45.050
But that's scalability in terms
of number of servers.

00:02:45.050 --> 00:02:47.810
But if you talk about number
of programmers I think Dart

00:02:47.810 --> 00:02:48.530
really is--

00:02:48.530 --> 00:02:49.580
SETH LADD: Or lines of code.

00:02:49.580 --> 00:02:50.610
JJ BEHRENS: Yeah,
lines of code.

00:02:50.610 --> 00:02:53.410
Then Dart really is aimed to be
a more scalable language.

00:02:53.410 --> 00:02:54.390
SETH LADD: Absolutely.

00:02:54.390 --> 00:02:56.780
JJ BEHRENS: So the next thing
is it's about performance.

00:02:56.780 --> 00:03:01.370
With Dart snapshots, Dart apps
can start up 10 times faster.

00:03:01.370 --> 00:03:01.650
SETH LADD: Yeah.

00:03:01.650 --> 00:03:03.750
In fact, I think we have
a nice slide here.

00:03:03.750 --> 00:03:05.740
Let's tell them what snapshots
are actually.

00:03:05.740 --> 00:03:08.630
This is a Dart VM
only feature.

00:03:08.630 --> 00:03:13.050
But what it does is it
serializes the token stream

00:03:13.050 --> 00:03:15.050
that the parser will create
when it loads in all the

00:03:15.050 --> 00:03:15.820
source code.

00:03:15.820 --> 00:03:18.140
So of course you can always
start from the source code

00:03:18.140 --> 00:03:20.010
which is typical
for a web app.

00:03:20.010 --> 00:03:21.600
But of course, the parser has
to do a bunch of steps to

00:03:21.600 --> 00:03:22.880
verify that's correct.

00:03:22.880 --> 00:03:25.570
But then with a snapshot, you
can snapshot that state before

00:03:25.570 --> 00:03:26.750
it starts executing
the program.

00:03:26.750 --> 00:03:29.800
And then the next time you start
up, it's about 10 times

00:03:29.800 --> 00:03:33.690
faster with our early stats from
Dart to JS which is our

00:03:33.690 --> 00:03:34.960
Dart to JavaScript compiler.

00:03:34.960 --> 00:03:38.260
That's a significant increase
when you think of things like

00:03:38.260 --> 00:03:42.170
mobile devices where the web,
and just usage in general,

00:03:42.170 --> 00:03:43.980
computing is just so much
more important.

00:03:43.980 --> 00:03:46.310
Those devices typically under
powered compared to these

00:03:46.310 --> 00:03:49.010
guys, so anything you can do
with start up speeds is

00:03:49.010 --> 00:03:51.190
really, really helpful to get
that app to start right up.

00:03:51.190 --> 00:03:53.110
JJ BEHRENS: The way I like to
explain this is if you go to

00:03:53.110 --> 00:03:57.035
Gmail, as much as those guys
work on performance and as

00:03:57.035 --> 00:03:59.250
crazy as they are about
performance, it still takes a

00:03:59.250 --> 00:04:01.280
couple seconds to load up.

00:04:01.280 --> 00:04:03.802
Imagine going to Gmail
in a new tab and it

00:04:03.802 --> 00:04:05.020
loads up in .2 seconds.

00:04:05.020 --> 00:04:06.200
SETH LADD: Or 10 times faster.

00:04:06.200 --> 00:04:07.010
That works for me.

00:04:07.010 --> 00:04:10.350
JJ BEHRENS: That would
just be amazing.

00:04:10.350 --> 00:04:12.640
And also, this is big news.

00:04:12.640 --> 00:04:17.260
The Dart VM is actually out
performing the V8 VM.

00:04:17.260 --> 00:04:19.470
We like to talk soft a
little bit at Google.

00:04:19.470 --> 00:04:21.850
So we don't go shouting things
from mountaintops.

00:04:21.850 --> 00:04:25.260
But V8 is the fastest--

00:04:25.260 --> 00:04:27.870
SETH LADD: I don't if it's the
fastest but one of fastest.

00:04:27.870 --> 00:04:29.910
JJ BEHRENS: According to several
benchmarks, I checked

00:04:29.910 --> 00:04:32.380
it by third parties.

00:04:32.380 --> 00:04:35.360
It is the fastest browser
according to Tom's Hardware

00:04:35.360 --> 00:04:35.980
and so forth.

00:04:35.980 --> 00:04:37.600
SETH LADD: Well, OK.

00:04:37.600 --> 00:04:40.520
But I know that a couple
benchmarks that we track

00:04:40.520 --> 00:04:44.980
internally with the Dart VM it
is now outperforming a couple

00:04:44.980 --> 00:04:45.950
benchmarks in V8.

00:04:45.950 --> 00:04:46.830
Which is great.

00:04:46.830 --> 00:04:49.500
V8s had many, many years and
Dart has had about a year.

00:04:49.500 --> 00:04:51.930
And so it's really cool to
see that competition.

00:04:51.930 --> 00:04:54.920
I'm sure V8 is going to leap
frog, and we'll do this a lot,

00:04:54.920 --> 00:04:55.640
and that's great.

00:04:55.640 --> 00:04:56.770
Everybody wins in
that scenario.

00:04:56.770 --> 00:04:58.940
JJ BEHRENS: But I think that
there's something to be said

00:04:58.940 --> 00:05:01.480
for the fact that Dart is
aimed at performance.

00:05:01.480 --> 00:05:03.380
The language itself
is designed for

00:05:03.380 --> 00:05:04.610
performance in mind.

00:05:04.610 --> 00:05:04.890
SETH LADD: Yeah.

00:05:04.890 --> 00:05:08.250
JJ BEHRENS: So I'm sure you want
to give the disclaimer.

00:05:08.250 --> 00:05:09.820
SETH LADD: Well, I think
we alluded to this.

00:05:09.820 --> 00:05:12.430
We're not faster in every
benchmark, but certainly part

00:05:12.430 --> 00:05:15.110
of the impetus for the whole
project is boost in

00:05:15.110 --> 00:05:17.860
performance of both the start
up, which we showed, then also

00:05:17.860 --> 00:05:19.220
raw computation performance.

00:05:19.220 --> 00:05:22.025
And the language was originally
kicked off by the

00:05:22.025 --> 00:05:25.300
V8 engineers so they know what
it takes in language design to

00:05:25.300 --> 00:05:26.590
get a faster VM.

00:05:26.590 --> 00:05:29.190
And I think we're already
starting to see some of this

00:05:29.190 --> 00:05:30.440
pay off which is great.

00:05:32.420 --> 00:05:34.650
JJ BEHRENS: And also, Dart
is about doing more.

00:05:34.650 --> 00:05:35.910
It's not just a language.

00:05:35.910 --> 00:05:38.860
There are a lot of languages,
and very nice looking

00:05:38.860 --> 00:05:40.520
languages, that compile
the JavaScript.

00:05:40.520 --> 00:05:42.630
But Dart's more than
just a language.

00:05:42.630 --> 00:05:44.480
It's also a set of libraries.

00:05:44.480 --> 00:05:45.460
It's a new VM.

00:05:45.460 --> 00:05:47.480
So I think that's
super exciting.

00:05:47.480 --> 00:05:50.530
We have the Dart Editor that
has an amazing knowledge of

00:05:50.530 --> 00:05:51.530
your Dart code.

00:05:51.530 --> 00:05:53.410
There's Dartium, so
that's the Dart VM

00:05:53.410 --> 00:05:55.530
integrated into Chromium.

00:05:55.530 --> 00:05:58.260
And then we have the dart2js
so that we can compile the

00:05:58.260 --> 00:06:00.340
JavaScript to support all
those other browsers.

00:06:00.340 --> 00:06:02.370
SETH LADD: I think that's one of
the most important, if not

00:06:02.370 --> 00:06:05.680
most important, aspects of the
project is that all this great

00:06:05.680 --> 00:06:08.120
work that we're doing can get
compiled down to modern

00:06:08.120 --> 00:06:12.870
JavaScript, ECMAScript 5, and
run across mobile desktop and

00:06:12.870 --> 00:06:14.570
mobile and desktop browsers.

00:06:14.570 --> 00:06:15.760
And that's fantastic.

00:06:15.760 --> 00:06:17.590
So you can write Dart code
today and it's not just a

00:06:17.590 --> 00:06:18.070
Chrome thing.

00:06:18.070 --> 00:06:20.960
It's a modern web thing.

00:06:20.960 --> 00:06:22.380
JJ BEHRENS: So demo time.

00:06:22.380 --> 00:06:23.860
You want to take it over Seth?

00:06:23.860 --> 00:06:25.560
SETH LADD: Sure, let me do
a couple demos here.

00:06:25.560 --> 00:06:27.540
In fact, I think this is a good
time to introduce our

00:06:27.540 --> 00:06:28.200
special guest.

00:06:28.200 --> 00:06:31.950
We're going to talk about some
of the new M1 features.

00:06:31.950 --> 00:06:34.750
JJ BEHRENS: Gilad Bracha is
here to talk with us.

00:06:34.750 --> 00:06:35.805
Wave hello, Gilad.

00:06:35.805 --> 00:06:37.590
GILAD BRACHA: Hey, hello.

00:06:37.590 --> 00:06:41.790
JJ BEHRENS: So he's going to set
us straight in case we get

00:06:41.790 --> 00:06:43.440
anything wrong.

00:06:43.440 --> 00:06:46.060
GILAD BRACHA: Oh, I could
never set you straight.

00:06:46.060 --> 00:06:48.890
SETH LADD: Well, we should say
that part of the M1 release is

00:06:48.890 --> 00:06:51.140
a lot of changes to
the language.

00:06:51.140 --> 00:06:53.240
And a lot of this is driven by
feedback, and we've been

00:06:53.240 --> 00:06:54.780
writing a lot of Dart
code ourselves.

00:06:54.780 --> 00:06:57.580
And so, I know Gilad you've run
through a lot of different

00:06:57.580 --> 00:07:00.340
spec revisions since M1.

00:07:00.340 --> 00:07:02.410
I'd like to dive into one of the
ones that comes from small

00:07:02.410 --> 00:07:03.350
talk first.

00:07:03.350 --> 00:07:05.230
Which I think is maybe slightly
unfamiliar to some of

00:07:05.230 --> 00:07:06.750
our developers out there.

00:07:06.750 --> 00:07:09.370
But method cascades, can
you talk a little bit?

00:07:09.370 --> 00:07:10.934
Where did that come from
and what do you

00:07:10.934 --> 00:07:11.930
hope to do with them?

00:07:11.930 --> 00:07:14.360
GILAD BRACHA: So method
cascades, historically, they

00:07:14.360 --> 00:07:16.270
come from small talk.

00:07:16.270 --> 00:07:18.750
It's basically a situation where
you want to send the

00:07:18.750 --> 00:07:21.760
same receiver, the same target
object, is when you get a

00:07:21.760 --> 00:07:22.940
series of messages.

00:07:22.940 --> 00:07:27.770
And rather than repeat that
receiver over and over again

00:07:27.770 --> 00:07:32.070
declaring a local variable,
probably to store whatever

00:07:32.070 --> 00:07:35.720
receiver it was and then doing
that, you have a syntactic

00:07:35.720 --> 00:07:36.670
sugar for that.

00:07:36.670 --> 00:07:43.200
And that works nicely in
circumstances in UI, in things

00:07:43.200 --> 00:07:46.350
that are sort of the jQuery
style of things.

00:07:46.350 --> 00:07:49.740
And so it seemed to
apply to the web.

00:07:49.740 --> 00:07:53.580
It's a little bit different than
the original, but people

00:07:53.580 --> 00:07:55.160
seem to like it.

00:07:55.160 --> 00:07:58.600
Like any other construct, it
requires a bit of taste and

00:07:58.600 --> 00:08:02.880
judgment so you don't abuse
it and get into trouble.

00:08:02.880 --> 00:08:06.980
But if you format it nicely it
works well, and gives people a

00:08:06.980 --> 00:08:09.840
nice way of saving
a few keystrokes.

00:08:09.840 --> 00:08:11.850
And explaining what
they're doing.

00:08:11.850 --> 00:08:13.280
SETH LADD: I have
a demo of this.

00:08:13.280 --> 00:08:15.645
Maybe we can go to the laptop
screen, and hopefully the font

00:08:15.645 --> 00:08:17.160
is big enough.

00:08:17.160 --> 00:08:19.380
I pulled up two examples that
did the same thing.

00:08:19.380 --> 00:08:23.430
The top is the method
cascade syntax.

00:08:23.430 --> 00:08:25.180
This as big as I can get it.

00:08:25.180 --> 00:08:27.060
Sorry.

00:08:27.060 --> 00:08:28.600
But anyway, so Gilad
mentioned saving a

00:08:28.600 --> 00:08:29.720
couple of key strokes.

00:08:29.720 --> 00:08:33.400
The bottom example you see I
repeat button dot value button

00:08:33.400 --> 00:08:35.580
dot classes button dot text.

00:08:35.580 --> 00:08:37.000
It seems a little repetitive
to me.

00:08:37.000 --> 00:08:39.289
And Gilad, you mentioned
the J Query.

00:08:39.289 --> 00:08:40.460
There's a slight difference
there though.

00:08:40.460 --> 00:08:42.890
That's a chaining type
of API, right?

00:08:42.890 --> 00:08:45.110
And so cascades is slightly
different than chaining?

00:08:45.110 --> 00:08:47.810
GILAD BRACHA: Well it is but you
can use it for some of the

00:08:47.810 --> 00:08:49.360
same things, right?

00:08:49.360 --> 00:08:52.630
The real fundamental thing is it
can help you design an API

00:08:52.630 --> 00:08:54.530
that will work well with that.

00:08:54.530 --> 00:08:58.730
And so it actually can change
how you structure your library

00:08:58.730 --> 00:09:00.380
once you know it's there.

00:09:00.380 --> 00:09:03.150
JJ BEHRENS: That's one thing
that I like about this feature

00:09:03.150 --> 00:09:08.430
is we have this thing that we
constantly do, but with just a

00:09:08.430 --> 00:09:10.170
little bit a syntactic
sugar it makes the

00:09:10.170 --> 00:09:12.050
code read a lot nicer.

00:09:12.050 --> 00:09:13.607
SETH LADD: And I figured out
how to make this bigger so

00:09:13.607 --> 00:09:15.690
hurray on me.

00:09:15.690 --> 00:09:15.940
OK, good.

00:09:15.940 --> 00:09:17.480
This is one of the features
I'm really excited about.

00:09:17.480 --> 00:09:20.450
I've already used it when I
program a lot of HTML APIs.

00:09:20.450 --> 00:09:23.360
And a lot of that's just set the
ID, set the classes, set

00:09:23.360 --> 00:09:25.440
the button handlers,
et cetera.

00:09:25.440 --> 00:09:25.790
I don't know.

00:09:25.790 --> 00:09:26.230
I like it.

00:09:26.230 --> 00:09:28.160
JJ BEHRENS: Yeah, don't
repeat yourself.

00:09:28.160 --> 00:09:28.850
You know?

00:09:28.850 --> 00:09:30.510
SETH LADD: That's right.

00:09:30.510 --> 00:09:32.300
What are the other
ones we have?

00:09:32.300 --> 00:09:34.480
JJ BEHRENS: This dot constructor
arguments.

00:09:34.480 --> 00:09:35.040
SETH LADD: OK, cool.

00:09:35.040 --> 00:09:36.840
This one's been in before M1.

00:09:36.840 --> 00:09:38.380
This is one of my
favorite things.

00:09:38.380 --> 00:09:41.580
And as a Java developer, and I
think in other languages too,

00:09:41.580 --> 00:09:43.190
always repeating in the
constructor this

00:09:43.190 --> 00:09:44.050
dot x equals x.

00:09:44.050 --> 00:09:45.490
This dot y equals y.

00:09:45.490 --> 00:09:48.090
Very common pattern, so
what do we do in Dart?

00:09:48.090 --> 00:09:50.440
JJ BEHRENS: Well, just in case
you haven't seen one of our

00:09:50.440 --> 00:09:52.290
other talks where
we covered this.

00:09:52.290 --> 00:09:55.210
Rather than receiving a
parameter called Name and

00:09:55.210 --> 00:09:58.000
saying this dot name equals
name, you could just receive

00:09:58.000 --> 00:10:00.700
this dot name and it does
it automatically.

00:10:00.700 --> 00:10:04.420
If you look at this code sample,
we have a constructor

00:10:04.420 --> 00:10:07.210
called Person and the
body is empty.

00:10:07.210 --> 00:10:08.580
It's just a semi colon.

00:10:08.580 --> 00:10:10.080
And we're receiving
two parameters.

00:10:10.080 --> 00:10:11.980
This dot name and this
dot position.

00:10:11.980 --> 00:10:16.670
And it automatically saves them
into name and position.

00:10:16.670 --> 00:10:18.010
SETH LADD: In fact, I think what
it does is it actually

00:10:18.010 --> 00:10:20.657
puts it in the initializer
list.

00:10:20.657 --> 00:10:22.340
Is that correct?

00:10:22.340 --> 00:10:24.230
It doesn't actually do it in
the constructive body?

00:10:24.230 --> 00:10:25.280
JJ BEHRENS: No, I think it's--

00:10:25.280 --> 00:10:27.616
GILAD BRACHA: Yeah, but you
really don't care is the

00:10:27.616 --> 00:10:28.866
bottom line.

00:10:30.570 --> 00:10:32.380
It's really at the beginning
of the initialize list.

00:10:32.380 --> 00:10:34.085
It'll happen before
anything else that

00:10:34.085 --> 00:10:35.410
you might have written.

00:10:35.410 --> 00:10:37.210
JJ BEHRENS: Now there's some
other languages that have a

00:10:37.210 --> 00:10:38.250
feature similar to this.

00:10:38.250 --> 00:10:44.420
Where they declare the name
instance member inside the

00:10:44.420 --> 00:10:45.170
constructor.

00:10:45.170 --> 00:10:47.660
And you might wonder why we
didn't do that, why we have

00:10:47.660 --> 00:10:48.670
these things separate.

00:10:48.670 --> 00:10:51.020
And that's because we support
multiple constructors.

00:10:51.020 --> 00:10:54.600
So we could have one normal
constructor and then the named

00:10:54.600 --> 00:10:55.040
constructor.

00:10:55.040 --> 00:10:56.380
And so it makes sense.

00:10:56.380 --> 00:10:57.470
SETH LADD: Here's an
example of that.

00:10:57.470 --> 00:11:01.210
A lot of times you might build
up objects from JSON or some

00:11:01.210 --> 00:11:02.560
binary sterilization format.

00:11:02.560 --> 00:11:04.570
And thanks to name constructors,
you can actually

00:11:04.570 --> 00:11:07.570
create person dot from
JSON for instance.

00:11:07.570 --> 00:11:11.240
I could say something like
JSON string here.

00:11:11.240 --> 00:11:14.560
Which I love, because now it
tells me right there when I'm

00:11:14.560 --> 00:11:16.980
using that instructor what
its intention is.

00:11:16.980 --> 00:11:18.520
JJ BEHRENS: So I guess we
just did a two-fer.

00:11:18.520 --> 00:11:21.350
Because you just showed
us named constructors.

00:11:21.350 --> 00:11:22.730
SETH LADD: Awesome.

00:11:22.730 --> 00:11:25.250
JJ BEHRENS: I don't know of many
other languages that did

00:11:25.250 --> 00:11:26.290
named constructors.

00:11:26.290 --> 00:11:27.160
Can you think of any?

00:11:27.160 --> 00:11:29.090
GILAD BRACHA: No, the thing
about Dart constructors that's

00:11:29.090 --> 00:11:31.340
really interesting, and named
constructors is part of that,

00:11:31.340 --> 00:11:34.940
is that they retain the
familiarity of constructors

00:11:34.940 --> 00:11:37.490
without the real problem
that constructors have

00:11:37.490 --> 00:11:38.170
traditionally.

00:11:38.170 --> 00:11:41.280
Which is that you're stuck
creating an instance of this

00:11:41.280 --> 00:11:44.870
particular class, creating a
new instance, you can't use

00:11:44.870 --> 00:11:47.460
constructors to get something
out of a cache.

00:11:47.460 --> 00:11:50.760
You can't use them if you, for
some reason, need to produce

00:11:50.760 --> 00:11:52.630
something else that obeys
the same interface.

00:11:52.630 --> 00:11:52.830
Right?

00:11:52.830 --> 00:11:55.890
It's all about objects
that behave the same.

00:11:55.890 --> 00:11:57.095
You can't do all that stuff.

00:11:57.095 --> 00:11:58.680
SETH LADD: These are the
factory constructors.

00:11:58.680 --> 00:12:00.200
GILAD BRACHA: So Dart
constructors are really

00:12:00.200 --> 00:12:03.250
interesting, because they really
give you the advantages

00:12:03.250 --> 00:12:04.640
that people try to get
with all kinds of

00:12:04.640 --> 00:12:06.020
static factory patterns.

00:12:06.020 --> 00:12:08.660
But you don't have to go through
the boiler plate and

00:12:08.660 --> 00:12:11.240
you don't have to learn
something radically different.

00:12:11.240 --> 00:12:12.170
JJ BEHRENS: Yeah.

00:12:12.170 --> 00:12:15.380
I definitely think this is yet
another case where, if you're

00:12:15.380 --> 00:12:18.810
coming from a Java or C+
background, there are certain

00:12:18.810 --> 00:12:19.970
pain points in the language.

00:12:19.970 --> 00:12:22.020
And you know what they
are, and so you know

00:12:22.020 --> 00:12:23.330
all the work arounds.

00:12:23.330 --> 00:12:26.120
If just fix it in the language
with a little bit a syntactic

00:12:26.120 --> 00:12:29.510
niceness, you can not
have to suffer from

00:12:29.510 --> 00:12:32.400
those things anymore.

00:12:32.400 --> 00:12:33.893
SETH LADD: So let's talk about
another feature that's

00:12:33.893 --> 00:12:34.910
been in before M1.

00:12:34.910 --> 00:12:36.980
And so this is the last one
we'll show that's been there

00:12:36.980 --> 00:12:39.100
before, but I really,
really like.

00:12:39.100 --> 00:12:41.770
And it's lexical scope
or lexical closures.

00:12:41.770 --> 00:12:42.970
So we have a demo up here.

00:12:42.970 --> 00:12:44.160
And this is something
Dart does I think

00:12:44.160 --> 00:12:44.940
really, really well.

00:12:44.940 --> 00:12:46.580
Actually, we're seeing a couple
things here right?

00:12:46.580 --> 00:12:49.570
We're seeing the one line
in one functions and

00:12:49.570 --> 00:12:50.720
also lexical code.

00:12:50.720 --> 00:12:51.510
Can you walk us through
this code?

00:12:51.510 --> 00:12:55.010
JJ BEHRENS: Yeah, sure, so we
have a function called main.

00:12:55.010 --> 00:12:57.890
And we have a local variable
called numPresses.

00:12:57.890 --> 00:13:00.370
And we're going to query to
find increment button.

00:13:00.370 --> 00:13:02.970
And if you know jQuery
this looks familiar.

00:13:02.970 --> 00:13:05.260
And then we have On Click Add.

00:13:05.260 --> 00:13:09.430
And then the thing inside
parentheses is a call back.

00:13:09.430 --> 00:13:13.370
It receives an event object
and the function just does

00:13:13.370 --> 00:13:15.090
numPresses plus, plus.

00:13:15.090 --> 00:13:18.400
Now that's a nested function,
but it has access to

00:13:18.400 --> 00:13:20.710
numPresses that's in
the outer scope.

00:13:20.710 --> 00:13:20.910
SETH LADD: Yeah.

00:13:20.910 --> 00:13:22.740
JJ BEHRENS: Now in the next
slide we have query for

00:13:22.740 --> 00:13:23.610
show-num-presses.

00:13:23.610 --> 00:13:25.410
And so this is a different
button.

00:13:25.410 --> 00:13:27.900
And we do On Click Add
for that button.

00:13:27.900 --> 00:13:30.710
And here we used a different
syntax for a function.

00:13:30.710 --> 00:13:32.530
This time we're using
curly braces instead

00:13:32.530 --> 00:13:34.000
of the arrow syntax.

00:13:34.000 --> 00:13:36.590
And we do window dot alert,
number of presses with

00:13:36.590 --> 00:13:37.170
numPresses.

00:13:37.170 --> 00:13:39.550
So this is an example of the
string interpolation.

00:13:39.550 --> 00:13:43.080
But once again, we are getting
access to numPresses which is

00:13:43.080 --> 00:13:45.040
from the outer function.

00:13:45.040 --> 00:13:49.230
And so, in a certain sense,
closures and classes there's a

00:13:49.230 --> 00:13:50.340
little bit of overlap.

00:13:50.340 --> 00:13:52.490
We have some shared state.

00:13:52.490 --> 00:13:55.060
And we have two different
methods, basically, that

00:13:55.060 --> 00:13:56.760
operate on that shared state.

00:13:56.760 --> 00:13:59.300
And yet it's still small
and elegant.

00:13:59.300 --> 00:14:00.920
SETH LADD: I would say maybe
not shared state.

00:14:00.920 --> 00:14:03.570
That makes me think
of threads.

00:14:03.570 --> 00:14:04.630
It's not the scoping right?

00:14:04.630 --> 00:14:07.270
I could see it lexically, that
is the structure of the

00:14:07.270 --> 00:14:11.340
program defines what functions
get to which variables.

00:14:11.340 --> 00:14:12.370
Which I love.

00:14:12.370 --> 00:14:14.105
You can just take a look
at it and tell

00:14:14.105 --> 00:14:15.360
what's going to happen.

00:14:15.360 --> 00:14:19.390
JJ BEHRENS: Yeah, it's just
very light overhead.

00:14:19.390 --> 00:14:19.540
if.

00:14:19.540 --> 00:14:23.170
You tried to this in say
JavaScript, where you have

00:14:23.170 --> 00:14:25.860
this nested function and
you're using this,

00:14:25.860 --> 00:14:27.060
this will get lost.

00:14:27.060 --> 00:14:29.050
It won't refer to the
actual object.

00:14:29.050 --> 00:14:30.670
It'll refer to the
window object.

00:14:30.670 --> 00:14:35.250
And if you've ever had that bug
it's extremely painful.

00:14:35.250 --> 00:14:37.113
SETH LADD: So let's show a
couple Editor features now

00:14:37.113 --> 00:14:38.040
that you've shown some code.

00:14:38.040 --> 00:14:39.790
OK, cool.

00:14:39.790 --> 00:14:40.770
Which one do we want to show?

00:14:40.770 --> 00:14:42.590
We talked about performance,
but we also talked about

00:14:42.590 --> 00:14:43.140
productivity.

00:14:43.140 --> 00:14:45.810
And the Editor really helps
us with that productivity.

00:14:45.810 --> 00:14:47.560
So I'll show a couple
things here.

00:14:47.560 --> 00:14:49.500
Here's just some code
I'm opening up.

00:14:49.500 --> 00:14:52.530
But as your code base grows,
and scales up to a large

00:14:52.530 --> 00:14:55.140
number of developers, you're
going to need to start

00:14:55.140 --> 00:14:56.720
updating the code, cleaning
it up, based

00:14:56.720 --> 00:14:57.440
on what you've learned.

00:14:57.440 --> 00:14:59.710
And the last thing you want to
do is globally search and

00:14:59.710 --> 00:15:02.430
replace and then hope all your
name's are unique et cetera.

00:15:02.430 --> 00:15:04.970
You want your tools to handle
these cleanups and maintenance

00:15:04.970 --> 00:15:06.180
tasks for you.

00:15:06.180 --> 00:15:08.470
This is where refactoring
comes in.

00:15:08.470 --> 00:15:10.410
JJ BEHRENS: This rename you're
about to show is really

00:15:10.410 --> 00:15:14.310
important, because as an old
school JavaScript programmer I

00:15:14.310 --> 00:15:15.930
come from the days before
minimizers.

00:15:15.930 --> 00:15:20.900
And so I named all my variables
a, aa, ab, ac and

00:15:20.900 --> 00:15:21.660
it's a bad habit.

00:15:21.660 --> 00:15:23.020
SETH LADD: Not everyone
has your super skills.

00:15:23.020 --> 00:15:25.100
JJ BEHRENS: Well, you know
a photographic memory.

00:15:25.100 --> 00:15:25.540
SETH LADD: Let's run
this rename.

00:15:25.540 --> 00:15:26.870
In fact, I'm going to
do one thing here.

00:15:26.870 --> 00:15:29.940
So I want to rename this
connections variable here.

00:15:29.940 --> 00:15:32.835
But let's go down in here and
let's, just to prove the point

00:15:32.835 --> 00:15:35.170
here, I'm going to create
another connections object

00:15:35.170 --> 00:15:38.930
down in a totally different
scope down in main.

00:15:38.930 --> 00:15:41.060
And I want to show how this is
not just a glorified search

00:15:41.060 --> 00:15:41.900
and replace right?

00:15:41.900 --> 00:15:43.820
This actually understands the
structure of the code.

00:15:43.820 --> 00:15:45.430
So if I rename--

00:15:45.430 --> 00:15:49.310
let's say that's too long or
I want to be more specific.

00:15:49.310 --> 00:15:51.440
So web socket connection, so
notice how it's actually

00:15:51.440 --> 00:15:54.500
changing the rest of the
variable names on the fly.

00:15:54.500 --> 00:15:57.590
But if I scroll down, right,
the other connections for a

00:15:57.590 --> 00:15:59.190
totally different object
are left unchanged.

00:15:59.190 --> 00:16:01.520
And that's the power of the
Editor being able to

00:16:01.520 --> 00:16:03.340
statically analyze the program,
understand the

00:16:03.340 --> 00:16:05.910
structure, and give you these
refactoring tools.

00:16:05.910 --> 00:16:06.690
Which I love.

00:16:06.690 --> 00:16:08.830
JJ BEHRENS: I'm trying to do it
as a VIN plug-in but that's

00:16:08.830 --> 00:16:09.770
actually pretty hard.

00:16:09.770 --> 00:16:10.650
SETH LADD: It is hard.

00:16:10.650 --> 00:16:15.840
So let's say also as you scale
up programs, you're going to

00:16:15.840 --> 00:16:17.650
grow the number of developers
on your team.

00:16:17.650 --> 00:16:19.490
And you're going to grow the
size of the program.

00:16:19.490 --> 00:16:20.530
You can't fit it all
in your head.

00:16:20.530 --> 00:16:23.590
And of course, your new
guy comes on he can't

00:16:23.590 --> 00:16:24.750
just absorb the code.

00:16:24.750 --> 00:16:27.600
He's going to be working with
new APIs he's unfamiliar with.

00:16:27.600 --> 00:16:29.380
So can the tools help
you with that?

00:16:29.380 --> 00:16:34.600
Of course, we have a feature
called Code Completion.

00:16:34.600 --> 00:16:36.180
So let's see if I can
zoom in here.

00:16:36.180 --> 00:16:38.050
JJ BEHRENS: And you hit Control,
Space, and you

00:16:38.050 --> 00:16:40.590
automatically popped up with
all the available methods.

00:16:40.590 --> 00:16:43.850
And if you don't happen to
have the full API for

00:16:43.850 --> 00:16:45.750
everything in Dart memorized
it's actually

00:16:45.750 --> 00:16:47.080
really, really helpful.

00:16:47.080 --> 00:16:50.540
SETH LADD: Yeah, especially
integrating with a new team or

00:16:50.540 --> 00:16:51.980
using a third party library.

00:16:51.980 --> 00:16:54.730
These tools should be able to
walk you through that process.

00:16:54.730 --> 00:16:56.580
I love that.

00:16:56.580 --> 00:16:58.660
JJ BEHRENS: That's definitely
for coding in the large.

00:16:58.660 --> 00:17:01.010
Because you know, the bigger the
code base gets the harder

00:17:01.010 --> 00:17:05.000
it is to have all those things
in your mental cache space.

00:17:05.000 --> 00:17:07.390
SETH LADD: Yes, so I love the
fact that I'm more productive

00:17:07.390 --> 00:17:08.200
with these kind of tools.

00:17:08.200 --> 00:17:08.810
JJ BEHRENS: Absolutely.

00:17:08.810 --> 00:17:10.849
SETH LADD: OK, so the last
demo with the Editor for

00:17:10.849 --> 00:17:13.790
productivity is using the Editor
to launch into Dartium,

00:17:13.790 --> 00:17:16.900
which is Chromium with the VM,
and then also compiling to

00:17:16.900 --> 00:17:17.300
JavaScript.

00:17:17.300 --> 00:17:18.140
JJ BEHRENS: Yep.

00:17:18.140 --> 00:17:19.940
SETH LADD: And debugging
this code.

00:17:19.940 --> 00:17:21.670
So debugging, obviously,
very important.

00:17:21.670 --> 00:17:23.960
You don't want to run print
statements everywhere.

00:17:23.960 --> 00:17:26.700
So let's show an example
of that.

00:17:26.700 --> 00:17:31.280
I believe if I launch this
project here while in Dartium.

00:17:31.280 --> 00:17:35.330
JJ BEHRENS: So here you are
running with Dart code

00:17:35.330 --> 00:17:38.365
natively using the Dart
VM running in

00:17:38.365 --> 00:17:40.830
a version of Chromium.

00:17:40.830 --> 00:17:41.640
SETH LADD: It's running fine.

00:17:41.640 --> 00:17:44.700
So let's go back over
to-- whoa, hello--

00:17:44.700 --> 00:17:47.980
let's load up one of these.

00:17:47.980 --> 00:17:50.990
And let's set a breakpoint.

00:17:50.990 --> 00:17:52.320
OK, so what happened
right here?

00:17:52.320 --> 00:17:54.050
So I'm going to zoom
in over here.

00:17:54.050 --> 00:17:57.220
The debugger in the Editor
launched immediately the

00:17:57.220 --> 00:17:58.370
instance I set the
break point.

00:17:58.370 --> 00:17:59.750
JJ BEHRENS: That's
just amazing.

00:17:59.750 --> 00:18:01.140
You set the break point
and you didn't

00:18:01.140 --> 00:18:02.380
even restart the app.

00:18:02.380 --> 00:18:04.290
SETH LADD: Right, so let's
go over to the app.

00:18:04.290 --> 00:18:05.250
And it's frozen.

00:18:05.250 --> 00:18:07.590
So the Editor is talking
to Dartium.

00:18:07.590 --> 00:18:08.420
I love this.

00:18:08.420 --> 00:18:10.180
So then you can step
through the code.

00:18:10.180 --> 00:18:10.540
You can run it again.

00:18:10.540 --> 00:18:13.690
JJ BEHRENS: There's a stack
with local variables.

00:18:13.690 --> 00:18:15.200
SETH LADD: So this is that
integrated debugging.

00:18:15.200 --> 00:18:19.610
So you might be like, OK that's
great obviously for 95%

00:18:19.610 --> 00:18:20.260
of your development.

00:18:20.260 --> 00:18:22.260
But then you have to go test
in other browsers right?

00:18:22.260 --> 00:18:23.770
That last 5%.

00:18:23.770 --> 00:18:25.070
So let's show you how
you might do that.

00:18:25.070 --> 00:18:28.520
Well, I'm going to run
as JavaScript here.

00:18:28.520 --> 00:18:31.140
And the Editor is going to run
Dart to JS which is itself

00:18:31.140 --> 00:18:33.940
written in Dart which
is very cool.

00:18:33.940 --> 00:18:37.870
JJ BEHRENS: I got no respect for
non self hosted languages.

00:18:37.870 --> 00:18:38.940
SETH LADD: So what
is it doing here?

00:18:38.940 --> 00:18:40.580
So it launches into Chromium.

00:18:40.580 --> 00:18:41.990
So this is regular Chromium.

00:18:41.990 --> 00:18:44.170
It doesn't know a thing
about Dart.

00:18:44.170 --> 00:18:46.330
And then you're saying, well of
course how do I debug this?

00:18:46.330 --> 00:18:48.650
Isn't compiled code really
complicated and everything?

00:18:48.650 --> 00:18:52.450
So let's load up the dev tools
here, and oh this is

00:18:52.450 --> 00:18:52.940
interesting.

00:18:52.940 --> 00:18:55.820
So I'm going to zoom
in, whoa--

00:18:55.820 --> 00:18:56.200
JJ BEHRENS: There you go.

00:18:56.200 --> 00:19:01.120
SETH LADD: --and we have here,
sorry everyone, the Dev tools,

00:19:01.120 --> 00:19:03.620
the Source tab, actually
showing me Dart code.

00:19:03.620 --> 00:19:04.260
Now how is this possible?

00:19:04.260 --> 00:19:06.080
Because Chrome doesn't
know anything about

00:19:06.080 --> 00:19:07.660
Dart it just has V8.

00:19:07.660 --> 00:19:09.740
Well, we have this really cool
feature called Source Maps

00:19:09.740 --> 00:19:12.560
which when you compile the
JavaScript it also generates

00:19:12.560 --> 00:19:15.590
this mapping file between the
Dart source code and the

00:19:15.590 --> 00:19:17.230
compiled output JavaScript.

00:19:17.230 --> 00:19:20.920
And it shows all that to
Chrome's dev tools, which then

00:19:20.920 --> 00:19:22.430
goes through this
mapping file.

00:19:22.430 --> 00:19:25.490
And when you open up and do
debug, here's an actual break

00:19:25.490 --> 00:19:27.990
point of Dart code.

00:19:27.990 --> 00:19:28.370
JJ BEHRENS: That is
just amazing.

00:19:28.370 --> 00:19:30.150
SETH LADD: Mapped into the
JavaScript code all behind the

00:19:30.150 --> 00:19:31.200
scenes for you.

00:19:31.200 --> 00:19:32.410
And of course, the
app is stopped.

00:19:32.410 --> 00:19:36.270
So now you can debug compiled
JavaScript via Dart in

00:19:36.270 --> 00:19:37.100
Chrome's developer tools.

00:19:37.100 --> 00:19:38.970
JJ BEHRENS: I have to say, this
is my favorite feature

00:19:38.970 --> 00:19:41.290
from dev tools for like
the entire year.

00:19:41.290 --> 00:19:42.280
SETH LADD: This is fantastic.

00:19:42.280 --> 00:19:44.760
Source maps is not just
a Dart thing.

00:19:44.760 --> 00:19:46.490
I believe other languages
compile source maps.

00:19:46.490 --> 00:19:47.770
JJ BEHRENS: You want to
step over some code?

00:19:47.770 --> 00:19:49.440
SETH LADD: Sure, let's
show you that.

00:19:49.440 --> 00:19:50.420
Same kind of deal, right?

00:19:50.420 --> 00:19:51.285
You can set the breakpoints.

00:19:51.285 --> 00:19:53.130
You can step over and--

00:19:53.130 --> 00:19:54.520
JJ BEHRENS: The one
to the right.

00:19:54.520 --> 00:19:56.530
SETH LADD: --let's see
if that works.

00:19:56.530 --> 00:19:57.220
Yep.

00:19:57.220 --> 00:19:58.550
JJ BEHRENS: We're stepping.

00:19:58.550 --> 00:19:59.440
That's just amazing.

00:19:59.440 --> 00:20:00.480
SETH LADD: Very, very
cool stuff.

00:20:00.480 --> 00:20:04.275
JJ BEHRENS: And that's just
in normal Chrome.

00:20:04.275 --> 00:20:05.670
SETH LADD: Yeah.

00:20:05.670 --> 00:20:06.700
OK, awesome.

00:20:06.700 --> 00:20:09.930
So that's the demo portion.

00:20:09.930 --> 00:20:11.490
Let's talk about M1.

00:20:11.490 --> 00:20:12.700
JJ BEHRENS: M1.

00:20:12.700 --> 00:20:13.890
SETH LADD: What is M1?

00:20:13.890 --> 00:20:15.420
JJ BEHRENS: I still think we
should have worn suits to

00:20:15.420 --> 00:20:16.610
celebrate this.

00:20:16.610 --> 00:20:18.510
SETH LADD: 1.0.

00:20:18.510 --> 00:20:20.020
What is M1?

00:20:20.020 --> 00:20:23.950
JJ BEHRENS: So M1 is our first
release milestone.

00:20:23.950 --> 00:20:26.640
It's our signal to developers
that things are stabilizing.

00:20:26.640 --> 00:20:27.940
That now is a good
time to start

00:20:27.940 --> 00:20:30.520
building your app in Dart.

00:20:30.520 --> 00:20:33.610
That we're going to try really
hard to not make backwards

00:20:33.610 --> 00:20:36.190
incompatible changes, but
rather we're going to be

00:20:36.190 --> 00:20:39.110
polishing the language, adding
to it, and then working a lot

00:20:39.110 --> 00:20:40.330
on performance.

00:20:40.330 --> 00:20:43.330
But this is still
a 0.1 release.

00:20:43.330 --> 00:20:46.440
I still think we should
call it a 0.9.

00:20:46.440 --> 00:20:48.090
SETH LADD: Versions
don't mean much.

00:20:48.090 --> 00:20:50.330
But I think the message there
is that it's early

00:20:50.330 --> 00:20:51.740
and it's not a 1.0.

00:20:51.740 --> 00:20:54.890
But we're starting this release
train and a lot has

00:20:54.890 --> 00:20:57.210
stabilized.

00:20:57.210 --> 00:20:59.950
JJ BEHRENS: So, tell
me what's new.

00:20:59.950 --> 00:21:01.510
SETH LADD: Well, a lot
of language features.

00:21:01.510 --> 00:21:02.880
And so I want to dive in.

00:21:02.880 --> 00:21:03.900
Let's see, we can actually
load up.

00:21:03.900 --> 00:21:06.670
We have a nice article on
dartlang.org about--

00:21:09.180 --> 00:21:09.722
let's just load up this guy.

00:21:09.722 --> 00:21:10.506
There you go.

00:21:10.506 --> 00:21:12.400
Oh, OK, here we go.

00:21:12.400 --> 00:21:14.910
Let's fix the link.

00:21:14.910 --> 00:21:17.940
There's a nice article on the
dartlang.org site about the

00:21:17.940 --> 00:21:19.700
different language
changes for M1.

00:21:19.700 --> 00:21:20.960
There's quite a big list.

00:21:20.960 --> 00:21:23.340
This is a perfect time to chat
with Gilad I know, because you

00:21:23.340 --> 00:21:25.470
helped shuttle a lot of these
changes through based on

00:21:25.470 --> 00:21:26.370
feedback or not.

00:21:26.370 --> 00:21:29.460
And so I want to start with
which one of these are you

00:21:29.460 --> 00:21:30.140
most excited about?

00:21:30.140 --> 00:21:31.760
Some of the changes since
our first launch?

00:21:31.760 --> 00:21:34.570
GILAD BRACHA: The one that I'm
most excited about is actually

00:21:34.570 --> 00:21:36.670
the removal of something.

00:21:36.670 --> 00:21:36.970
SETH LADD: Tell us about that.

00:21:36.970 --> 00:21:39.730
GILAD BRACHA: Adding features
is easy and it

00:21:39.730 --> 00:21:40.720
doesn't always help.

00:21:40.720 --> 00:21:42.420
What helps is getting
rid of stuff which

00:21:42.420 --> 00:21:43.550
usually you can't do.

00:21:43.550 --> 00:21:47.130
And the fact that we've got rid
of interface declarations

00:21:47.130 --> 00:21:48.390
has kind of--

00:21:48.390 --> 00:21:51.850
which itself relied on the
fact that classes act as

00:21:51.850 --> 00:21:53.550
interfaces vis-a-vis
the type system.

00:21:53.550 --> 00:21:57.900
And you can implement a class
and you could do that before.

00:21:57.900 --> 00:22:01.300
And each of those things were
just based on the fundamental

00:22:01.300 --> 00:22:03.390
understanding of what
an object oriented

00:22:03.390 --> 00:22:04.940
language should be.

00:22:04.940 --> 00:22:07.690
So that's really
the good thing.

00:22:07.690 --> 00:22:08.590
It simplifies so much.

00:22:08.590 --> 00:22:09.501
SETH LADD: Deleting
stuff, code or in

00:22:09.501 --> 00:22:10.330
spec, is always good.

00:22:10.330 --> 00:22:11.720
GILAD BRACHA: Yeah.

00:22:11.720 --> 00:22:14.030
JJ BEHRENS: So if someone's
out there and he's saying,

00:22:14.030 --> 00:22:15.680
well interfaces are good?

00:22:15.680 --> 00:22:17.940
What are you talking about you
got rid of interfaces?

00:22:17.940 --> 00:22:20.610
What do they use instead
of interfaces?

00:22:20.610 --> 00:22:23.410
GILAD BRACHA: Interfaces are
good and interfaces logically

00:22:23.410 --> 00:22:26.290
are still there, because the
entire system is based on the

00:22:26.290 --> 00:22:27.580
notion of interface.

00:22:27.580 --> 00:22:30.990
What matters is what object
interfaces is.

00:22:30.990 --> 00:22:33.290
But we don't have interface
declarations.

00:22:33.290 --> 00:22:34.880
Because once you have interface
declarations, you

00:22:34.880 --> 00:22:38.300
had to decide well am I going to
declare an interface or use

00:22:38.300 --> 00:22:41.410
an abstract class or use the
class I already have?

00:22:41.410 --> 00:22:43.580
And if I put an interface
what are the trade offs?

00:22:43.580 --> 00:22:45.740
Well gee, I can't put static
methods in there.

00:22:45.740 --> 00:22:47.440
What about the default values
for the parameters?

00:22:47.440 --> 00:22:49.500
There are all kinds of questions
that came up.

00:22:49.500 --> 00:22:52.290
And the best solution is to nip
this in the bud and get

00:22:52.290 --> 00:22:53.840
rid of all these questions.

00:22:53.840 --> 00:22:56.180
JJ BEHRENS: So now they would
just use an abstract class,

00:22:56.180 --> 00:22:58.880
and you could say that you
implement the abstract class

00:22:58.880 --> 00:23:01.010
or you extend the abstract
class and it's

00:23:01.010 --> 00:23:02.480
kind of up to you.

00:23:02.480 --> 00:23:03.180
GILAD BRACHA: It depends.

00:23:03.180 --> 00:23:06.150
If it's a purely abstract class
than you probably want

00:23:06.150 --> 00:23:07.080
to implement it.

00:23:07.080 --> 00:23:11.180
If it has functionality that
you want to reuse you

00:23:11.180 --> 00:23:11.880
might extend it.

00:23:11.880 --> 00:23:13.660
The advantage, of course, of
implementing is that there

00:23:13.660 --> 00:23:14.440
might be several.

00:23:14.440 --> 00:23:14.700
Right?

00:23:14.700 --> 00:23:18.180
If it's really acting as an
interface then you don't want

00:23:18.180 --> 00:23:20.860
to get into this business of
conflicting implementations

00:23:20.860 --> 00:23:22.330
from multiple inheritants.

00:23:22.330 --> 00:23:25.960
But multiple classifications,
in the sense of supporting

00:23:25.960 --> 00:23:29.150
multiple interfaces, doesn't
raise any of those questions.

00:23:29.150 --> 00:23:31.880
And that's what you'd
end up doing.

00:23:31.880 --> 00:23:34.790
The nice thing about these
abstract classes is that they

00:23:34.790 --> 00:23:36.520
can still use the factory
constructors we

00:23:36.520 --> 00:23:37.370
talked about earlier.

00:23:37.370 --> 00:23:41.010
So that you can actually just
refer to this type throughout

00:23:41.010 --> 00:23:43.835
your system, and create new
instances and it might, if

00:23:43.835 --> 00:23:45.910
it's set up correctly, it may
be able to actually produce

00:23:45.910 --> 00:23:49.180
instances of a particular
concrete class.

00:23:49.180 --> 00:23:49.560
JJ BEHRENS: Very good.

00:23:49.560 --> 00:23:50.900
SETH LADD: Are there any cases
where you've already taken

00:23:50.900 --> 00:23:51.910
advantage of this new

00:23:51.910 --> 00:23:53.040
functionality in the libraries?

00:23:53.040 --> 00:23:54.800
Have you noticed anything?

00:23:54.800 --> 00:23:57.350
GILAD BRACHA: We're still in
transition there, right?

00:23:57.350 --> 00:24:01.720
So the goal of M1 was to get
past the stage of breaking

00:24:01.720 --> 00:24:03.250
language changes.

00:24:03.250 --> 00:24:06.910
Breaking library changes, I
think, are still plenty to

00:24:06.910 --> 00:24:07.970
come to be honest.

00:24:07.970 --> 00:24:09.600
SETH LADD: And in fact, the
Editor has this really great

00:24:09.600 --> 00:24:10.440
cleanup feature.

00:24:10.440 --> 00:24:12.195
Because you're right, I suspect
a lot of library stuff

00:24:12.195 --> 00:24:12.930
is going to happen.

00:24:12.930 --> 00:24:14.900
So a lot of people might say
if I write Dart code today

00:24:14.900 --> 00:24:15.780
what's going to happen?

00:24:15.780 --> 00:24:17.840
Well, this is the advantage
of a language that's more

00:24:17.840 --> 00:24:20.030
structured and analyzable.

00:24:20.030 --> 00:24:22.320
The cleanup feature, it's really
cool, it will change

00:24:22.320 --> 00:24:24.580
from the old syntax to
new syntax for you.

00:24:24.580 --> 00:24:25.420
JJ BEHRENS: I love that.

00:24:25.420 --> 00:24:27.020
SETH LADD: I feel more
comfortable now with the

00:24:27.020 --> 00:24:28.550
upcoming changes.

00:24:28.550 --> 00:24:30.480
GILAD BRACHA: So we still are
supporting some of the old

00:24:30.480 --> 00:24:34.540
syntax, and that will go
away probably by in 2.

00:24:34.540 --> 00:24:37.780
And the Editor will
automatically convert for you.

00:24:37.780 --> 00:24:39.930
JJ BEHRENS: Wait a second, did
you leak the fact that there's

00:24:39.930 --> 00:24:41.940
going to be an M2 after an M1?

00:24:41.940 --> 00:24:43.450
GILAD BRACHA: I did
not leak anything.

00:24:43.450 --> 00:24:45.112
I announced.

00:24:45.112 --> 00:24:46.790
SETH LADD: Having stated,
it is fact.

00:24:46.790 --> 00:24:47.620
There will be an M2.

00:24:47.620 --> 00:24:48.280
JJ BEHRENS: There will be.

00:24:48.280 --> 00:24:51.460
I wonder if Lars knows?

00:24:51.460 --> 00:24:51.652
SETH LADD: That's right.

00:24:51.652 --> 00:24:53.000
Well, another big feature--

00:24:53.000 --> 00:24:55.210
and it's actually a collection
of features in M1--

00:24:55.210 --> 00:24:58.180
was the changes or enhancements
to the libraries.

00:24:58.180 --> 00:25:01.635
We added re-export
and a new syntax.

00:25:01.635 --> 00:25:03.600
Can you talk about some of the
things that helped us?

00:25:03.600 --> 00:25:06.840
GILAD BRACHA: Right so again,
the library design went

00:25:06.840 --> 00:25:10.930
through a lot of ups and downs
over the past year, year and a

00:25:10.930 --> 00:25:14.040
half, since we started.

00:25:14.040 --> 00:25:17.210
Certainly it became clear that
the original functionality

00:25:17.210 --> 00:25:18.940
wasn't quite enough.

00:25:18.940 --> 00:25:22.010
So partly there were syntactic
complaints which were

00:25:22.010 --> 00:25:23.210
understandable.

00:25:23.210 --> 00:25:26.090
There was some motivation behind
the old syntax, but it

00:25:26.090 --> 00:25:27.970
didn't really wash.

00:25:27.970 --> 00:25:33.180
And so the new syntax is
cleaner, less noise.

00:25:33.180 --> 00:25:34.970
But the important thing is
functionality, that you have

00:25:34.970 --> 00:25:38.020
better control over the name
spaces of libraries.

00:25:38.020 --> 00:25:43.410
So the export directive
basically lets you say that

00:25:43.410 --> 00:25:46.380
very often you find you have
these libraries that are just

00:25:46.380 --> 00:25:48.680
aggregating a bunch of
other libraries.

00:25:48.680 --> 00:25:52.740
And they want to provide that
same API to their users

00:25:52.740 --> 00:25:55.130
without them necessarily
being aware of all the

00:25:55.130 --> 00:25:56.570
sub-components.

00:25:56.570 --> 00:25:59.570
So you can re-export the
API of another library.

00:25:59.570 --> 00:26:02.660
The other thing you can do is
you can control how much,

00:26:02.660 --> 00:26:05.000
because we have these show and
hide commentators, that let

00:26:05.000 --> 00:26:08.890
you say that I only want to
export these identifiers from

00:26:08.890 --> 00:26:09.660
this library.

00:26:09.660 --> 00:26:13.500
So I can say show ABC, and
I'll only get ABC.

00:26:13.500 --> 00:26:16.250
Or I can say I want to hide
this one because it might

00:26:16.250 --> 00:26:17.770
conflict with something else.

00:26:17.770 --> 00:26:21.370
And so I can narrow down these
name spaces and control them.

00:26:21.370 --> 00:26:24.740
And that gives you a pretty
powerful way of snapping

00:26:24.740 --> 00:26:25.620
things together.

00:26:25.620 --> 00:26:27.330
SETH LADD: And this is all about
that scalability right?

00:26:27.330 --> 00:26:29.420
I mean you can start without
libraries, even without

00:26:29.420 --> 00:26:31.740
classes if you want, and as
you grow you can introduce

00:26:31.740 --> 00:26:34.390
libraries and then maybe
compose libraries.

00:26:34.390 --> 00:26:34.870
I love it.

00:26:34.870 --> 00:26:35.690
It just helps you grow.

00:26:35.690 --> 00:26:38.010
GILAD BRACHA: Right, and we
tweaked a few of the rules

00:26:38.010 --> 00:26:40.640
about libraries because on one
hand we do want to let people

00:26:40.640 --> 00:26:41.790
know about conflicts.

00:26:41.790 --> 00:26:44.860
On the other hand, we really
want code to be robust.

00:26:44.860 --> 00:26:46.710
Because third parties are
adding stuff to their

00:26:46.710 --> 00:26:49.640
libraries, and what if it
suddenly conflicts with yours?

00:26:49.640 --> 00:26:52.170
So some of the rules have
changed a bit to make that

00:26:52.170 --> 00:26:52.930
hold up better.

00:26:52.930 --> 00:26:55.390
So your library takes priority
over stuff that you're

00:26:55.390 --> 00:26:57.400
importing, things like that.

00:26:57.400 --> 00:26:59.290
So I think we're in
much better shape

00:26:59.290 --> 00:27:00.317
there than we were.

00:27:00.317 --> 00:27:01.720
JJ BEHRENS: Great.

00:27:01.720 --> 00:27:03.420
So there's a ton of
features here.

00:27:03.420 --> 00:27:04.930
SETH LADD: There's almost
too many features.

00:27:04.930 --> 00:27:05.380
I don't know.

00:27:05.380 --> 00:27:07.350
Anything else you like here?

00:27:07.350 --> 00:27:10.610
JJ BEHRENS: I think that a lot
of people, perhaps if they're

00:27:10.610 --> 00:27:14.090
at a moderate level of knowing
Dart, they might not know all

00:27:14.090 --> 00:27:16.370
of these new M1 features.

00:27:16.370 --> 00:27:18.510
So can we look at this
slide real quick?

00:27:18.510 --> 00:27:21.680
And we'll zoom in, and why don't
we just run down these

00:27:21.680 --> 00:27:22.610
super quickly.

00:27:22.610 --> 00:27:22.990
I know that there's a lot.

00:27:22.990 --> 00:27:24.390
SETH LADD: Help me pick
out a couple.

00:27:24.390 --> 00:27:27.670
But you're right, if you first
or only saw Dart about a year

00:27:27.670 --> 00:27:32.070
ago a lot has changed.

00:27:32.070 --> 00:27:33.330
JJ BEHRENS: This is one
of those articles

00:27:33.330 --> 00:27:34.360
that's a must read.

00:27:34.360 --> 00:27:36.240
SETH LADD: Yeah, make sure
of the title here.

00:27:36.240 --> 00:27:39.510
So Milestone 1 Language Changes
on dartlang.org.

00:27:39.510 --> 00:27:40.760
And it's really nice.

00:27:40.760 --> 00:27:42.360
Bob Nystrom has done
a great job here

00:27:42.360 --> 00:27:43.750
with examples as well.

00:27:43.750 --> 00:27:46.250
So it's not just an enumeration,
but it's also--

00:27:46.250 --> 00:27:47.820
there's some justification
in here and examples

00:27:47.820 --> 00:27:49.780
of before and after.

00:27:49.780 --> 00:27:52.140
JJ BEHRENS: One of the ones I
love is the fact that we now

00:27:52.140 --> 00:27:54.840
have some notion of
first class types.

00:27:54.840 --> 00:27:58.060
And the reason I love this is
because I like to remember

00:27:58.060 --> 00:28:00.960
what Dart stands for according
to the language spec.

00:28:00.960 --> 00:28:04.920
It's Dynamic and Reified Types
if I remember right?

00:28:04.920 --> 00:28:09.320
GILAD BRACHA: I am not sure
where you got that, but it

00:28:09.320 --> 00:28:10.600
makes sense to me.

00:28:10.600 --> 00:28:13.130
JJ BEHRENS: I had to ask
another language guy.

00:28:13.130 --> 00:28:15.350
I was like, what does
reified mean?

00:28:15.350 --> 00:28:17.040
He was like, duh you
should know that.

00:28:17.040 --> 00:28:19.160
SETH LADD: I think we need
to update this article.

00:28:19.160 --> 00:28:19.860
FYI.

00:28:19.860 --> 00:28:21.870
JJ BEHRENS: It's all about
dynamic and reified Types.

00:28:21.870 --> 00:28:25.030
GILAD BRACHA: That's news
to me, but I like it.

00:28:25.030 --> 00:28:27.490
It's interesting how people come
up with these post facto

00:28:27.490 --> 00:28:28.966
interpretations.

00:28:28.966 --> 00:28:31.990
JJ BEHRENS: Yes, and that one
was post facto yes absolutely.

00:28:31.990 --> 00:28:35.140
SETH LADD: So M1 is more than
just a slew of the language

00:28:35.140 --> 00:28:36.370
refinements and changes right?

00:28:36.370 --> 00:28:38.010
There's also platform
additions as well.

00:28:38.010 --> 00:28:41.810
JJ BEHRENS: Yeah, so a lot
of new Editor features.

00:28:41.810 --> 00:28:44.240
Man, the Editor moves
at a furious pace.

00:28:44.240 --> 00:28:46.970
Those guys, as soon as I create
a bug it seems like

00:28:46.970 --> 00:28:48.390
next week it's fixed.

00:28:48.390 --> 00:28:49.370
I don't know how they do it.

00:28:49.370 --> 00:28:50.606
SETH LADD: Well some of the
new features you saw

00:28:50.606 --> 00:28:52.720
re-factoring, but they
have quick fixes.

00:28:52.720 --> 00:28:54.645
Which is somewhere between
code clean up and

00:28:54.645 --> 00:28:55.940
re-factoring.

00:28:55.940 --> 00:28:57.540
There's actually the explicit
cleanup that helps

00:28:57.540 --> 00:28:58.550
you update your code.

00:28:58.550 --> 00:29:01.010
The debugging, so lots of good
stuff in the Editor.

00:29:01.010 --> 00:29:03.310
JJ BEHRENS: Now I remember
when Dart first came out,

00:29:03.310 --> 00:29:06.160
people really took us to task
for generating large

00:29:06.160 --> 00:29:07.040
JavaScript output.

00:29:07.040 --> 00:29:08.870
And this was something about the
fact that we were trying

00:29:08.870 --> 00:29:12.120
to do small talk like
hot code reloading.

00:29:12.120 --> 00:29:16.150
But these days, we have much
smaller JavaScript output.

00:29:16.150 --> 00:29:18.230
Because we do all kinds
of things like tree

00:29:18.230 --> 00:29:19.700
shaking and so forth.

00:29:19.700 --> 00:29:23.280
So that in the JavaScript world
you might want to use a

00:29:23.280 --> 00:29:25.570
bunch of libraries, but you get
really, really paranoid

00:29:25.570 --> 00:29:27.860
about how big is this library.

00:29:27.860 --> 00:29:29.770
How much is this going
to cost my page?

00:29:29.770 --> 00:29:34.170
But with Dart and with dart2js
we could just tree shake and

00:29:34.170 --> 00:29:37.740
you only have to pay for
what you actually use.

00:29:37.740 --> 00:29:40.780
SETH LADD: Yeah, and so here's
a dart2js output.

00:29:40.780 --> 00:29:42.460
You're right, it was quite
large in the beginning.

00:29:42.460 --> 00:29:45.280
We are on the third generation
dart2js compiler.

00:29:45.280 --> 00:29:48.580
I just compiled a hello world,
which just says hello world,

00:29:48.580 --> 00:29:50.650
in Dart into JavaScript.

00:29:50.650 --> 00:29:53.550
And right now it's
2,400 bytes.

00:29:53.550 --> 00:29:55.460
So we've made tremendous
improvements there, and I

00:29:55.460 --> 00:29:57.590
think the team continues
to reduce the size.

00:29:57.590 --> 00:30:00.650
But, yeah, I'm happy
where we are.

00:30:00.650 --> 00:30:03.110
JJ BEHRENS: I would say another
thing to point out is

00:30:03.110 --> 00:30:05.920
that Dart doesn't
really entirely

00:30:05.920 --> 00:30:07.810
disappear at run time.

00:30:07.810 --> 00:30:10.460
There's some languages where
they have this approach where

00:30:10.460 --> 00:30:13.220
you compile it to JavaScript,
and there is no

00:30:13.220 --> 00:30:14.730
notion of the run time.

00:30:14.730 --> 00:30:17.420
Whereas, that was not
one of our goals.

00:30:17.420 --> 00:30:18.880
We really wanted a run time.

00:30:18.880 --> 00:30:22.800
So you could ask a generic,
are you a list of buttons?

00:30:22.800 --> 00:30:24.500
SETH LADD: I would think of it
like we need to retain the

00:30:24.500 --> 00:30:26.170
semantics of the language.

00:30:26.170 --> 00:30:29.020
So it's not like we bring over
the Dart run time with

00:30:29.020 --> 00:30:32.010
JavaScript, but you're right
there are differences in terms

00:30:32.010 --> 00:30:35.200
of semantics when you call a
method and it doesn't exist or

00:30:35.200 --> 00:30:37.380
integers or generics.

00:30:37.380 --> 00:30:39.610
We bring those over as
well through dart2js.

00:30:39.610 --> 00:30:42.000
JJ BEHRENS: And if you turn on
checked mode, you'll get type

00:30:42.000 --> 00:30:44.630
assertions at run time which is
great during development.

00:30:44.630 --> 00:30:47.090
You could catch if you're
creating type

00:30:47.090 --> 00:30:49.290
mistakes at run time.

00:30:49.290 --> 00:30:51.780
SETH LADD: Well, one of the
big asks we had that we're

00:30:51.780 --> 00:30:54.620
delivering here with M1 is our
JavaScript interoperability

00:30:54.620 --> 00:30:55.920
which is huge.

00:30:55.920 --> 00:30:59.350
This allows you to integrate
with JavaScript code like

00:30:59.350 --> 00:31:03.430
Google Maps or your own in house
JavaScript code and use

00:31:03.430 --> 00:31:04.850
it straight with Dart.

00:31:04.850 --> 00:31:05.730
This is all open source.

00:31:05.730 --> 00:31:06.870
This is on GitHub as well.

00:31:06.870 --> 00:31:08.250
We'll let you guys
check it out.

00:31:08.250 --> 00:31:11.300
But yeah, we've got demos of
Google Maps, Twitter API,

00:31:11.300 --> 00:31:14.220
couple others actually written
with Dart using those stateful

00:31:14.220 --> 00:31:15.750
[INAUDIBLE] and JavaScript
APIs.

00:31:15.750 --> 00:31:17.790
JJ BEHRENS: So the one thing I
want to point out about the

00:31:17.790 --> 00:31:20.000
JS, Dart, interrupt if
you look at this

00:31:20.000 --> 00:31:22.760
closely it's not trivial.

00:31:22.760 --> 00:31:27.620
Certain languages they compile
to JavaScript and there's no

00:31:27.620 --> 00:31:29.570
disconnect at all between
those two languages.

00:31:29.570 --> 00:31:31.970
And so you might wonder, well
why does it seem a little bit

00:31:31.970 --> 00:31:33.070
harder in Dart?

00:31:33.070 --> 00:31:35.850
And that's because we want
to support the Dart VM.

00:31:35.850 --> 00:31:38.670
We want to have things like
faster VM performance.

00:31:38.670 --> 00:31:39.930
We want to run way faster.

00:31:39.930 --> 00:31:42.070
We want those things
like snapshots.

00:31:42.070 --> 00:31:45.490
And getting two different
VMs to work

00:31:45.490 --> 00:31:47.580
together is not so easy.

00:31:47.580 --> 00:31:50.900
There's some cross VM garbage
collection issues.

00:31:50.900 --> 00:31:53.470
And so, yes it is a little
bit harder than some

00:31:53.470 --> 00:31:54.570
certain other languages.

00:31:54.570 --> 00:31:55.280
Not impossible.

00:31:55.280 --> 00:31:57.290
SETH LADD: Well here, so let's
go to the computer screen.

00:31:57.290 --> 00:31:59.510
You can see an example
of Google Maps.

00:31:59.510 --> 00:32:01.835
And I actually think it's pretty
straightforward. you're

00:32:01.835 --> 00:32:04.380
right, it's not like a config
script integration.

00:32:04.380 --> 00:32:07.470
But with a couple, I would
almost say wrapping functions,

00:32:07.470 --> 00:32:10.040
there's a way to declare what
the scope is of some of these

00:32:10.040 --> 00:32:11.060
JavaScript variables.

00:32:11.060 --> 00:32:15.310
There's a way to create a Dart
proxy of a JavaScript object.

00:32:15.310 --> 00:32:17.510
But that's just the boilerplate
set up.

00:32:17.510 --> 00:32:19.750
When you're actually dealing
with the actual business

00:32:19.750 --> 00:32:22.390
logic, which is the majority of
the code, this is the part

00:32:22.390 --> 00:32:24.730
that I've highlighted
right here.

00:32:24.730 --> 00:32:25.660
It's Dart code.

00:32:25.660 --> 00:32:29.510
JJ BEHRENS: It's invisible,
behind the scenes, proxies.

00:32:29.510 --> 00:32:36.280
It's not difficult, but I just
want to point out with the

00:32:36.280 --> 00:32:38.880
Dart VM we're going to get all
these additional benefits.

00:32:38.880 --> 00:32:41.830
SETH LADD: We need to work
in a multiple VM world.

00:32:41.830 --> 00:32:44.490
JJ BEHRENS: Dart wants to push
the web forward, and so this

00:32:44.490 --> 00:32:48.500
is us pushing the web forward.

00:32:48.500 --> 00:32:51.270
SETH LADD: One of the other huge
additions to the platform

00:32:51.270 --> 00:32:53.580
is our package manager.

00:32:53.580 --> 00:32:58.570
All big successful programming
ecosystems, if you will, have

00:32:58.570 --> 00:33:00.340
a great package manager.

00:33:00.340 --> 00:33:02.400
JJ BEHRENS: That went live,
what, like an hour ago?

00:33:02.400 --> 00:33:03.710
SETH LADD: This is part
of the release.

00:33:03.710 --> 00:33:06.680
We call it Pub because you
play darts in a pub.

00:33:06.680 --> 00:33:09.650
So let's do a demo of that.

00:33:09.650 --> 00:33:13.305
So we have the ability to
publish packages on a

00:33:13.305 --> 00:33:15.680
centralized hosting pub,
the dartlang.org.

00:33:15.680 --> 00:33:18.140
Soon you, as external
developers, will be able to

00:33:18.140 --> 00:33:19.900
upload and publish your
own packages.

00:33:19.900 --> 00:33:23.200
And today you can use those
packages hosted at Pub.

00:33:23.200 --> 00:33:28.790
So I think I have an example
of that here.

00:33:28.790 --> 00:33:30.110
This is one of my
favorite demos.

00:33:35.100 --> 00:33:36.350
JJ BEHRENS: That's awful.

00:33:39.760 --> 00:33:40.910
SETH LADD: OK, so let's
start here.

00:33:40.910 --> 00:33:43.200
So on the computer screen
here you've got--

00:33:43.200 --> 00:33:44.110
it's a simple app.

00:33:44.110 --> 00:33:45.830
But it's referring to three
different packages.

00:33:45.830 --> 00:33:47.030
And I'm going to get
these from Pub.

00:33:47.030 --> 00:33:49.020
And of course, my Editor here
doesn't know anything about

00:33:49.020 --> 00:33:50.640
them, because I haven't
installed them yet.

00:33:50.640 --> 00:33:54.230
But thanks to our integration
with Pub into the Editor, I

00:33:54.230 --> 00:33:57.420
can just go up to Tools
and run Pub Install.

00:33:57.420 --> 00:34:00.000
It helps if I choose
the directory.

00:34:00.000 --> 00:34:01.250
Let's do that.

00:34:04.010 --> 00:34:07.650
So now it's running out to Pub
and various sources declared

00:34:07.650 --> 00:34:09.489
where to get the
packages from.

00:34:09.489 --> 00:34:11.909
And it pulls them down and
creates all the necessary

00:34:11.909 --> 00:34:17.219
symlinks so that my local
application understands where

00:34:17.219 --> 00:34:18.290
these different packages are.

00:34:18.290 --> 00:34:20.790
And it's all relative
to the project.

00:34:20.790 --> 00:34:23.110
So let's hope this
finishes here.

00:34:28.679 --> 00:34:30.049
JJ BEHRENS: Ahh,
the demo gods.

00:34:32.729 --> 00:34:33.979
SETH LADD: Uh-oh.

00:34:35.659 --> 00:34:38.649
JJ BEHRENS: So we launched
Pub today at, what is it?

00:34:38.649 --> 00:34:40.090
Pub.dartlang.org.

00:34:40.090 --> 00:34:43.699
So we already have a long list
of packages, but over the

00:34:43.699 --> 00:34:48.290
coming quarter we're hoping to
really, really increase that.

00:34:48.290 --> 00:34:53.940
So if you have a library that
you could import to Dart put

00:34:53.940 --> 00:34:57.980
it on Pub and then everyone
will benefit.

00:34:57.980 --> 00:34:59.740
A lot of people--

00:34:59.740 --> 00:35:02.230
I talk to a lot of kids and
they're like, oh I want to get

00:35:02.230 --> 00:35:02.860
into Google.

00:35:02.860 --> 00:35:05.210
And I always ask, well do
you have any open source

00:35:05.210 --> 00:35:06.140
contributions?

00:35:06.140 --> 00:35:08.000
Now is a really good time.

00:35:08.000 --> 00:35:12.010
Import a library, get it up on
GitHub, get it up on Pub, and

00:35:12.010 --> 00:35:13.190
become famous.

00:35:13.190 --> 00:35:15.210
And it's done for a
profit, I think.

00:35:15.210 --> 00:35:16.350
SETH LADD: Well if I can
get the demo back I

00:35:16.350 --> 00:35:17.140
will go back to it.

00:35:17.140 --> 00:35:20.400
But we've got a lot of good
questions from the community.

00:35:20.400 --> 00:35:22.860
So let's go back to Gilad.

00:35:22.860 --> 00:35:25.920
I want to start with--

00:35:25.920 --> 00:35:28.090
let's set the record
straight, I think.

00:35:28.090 --> 00:35:30.120
is Dart out to replace
JavaScript?

00:35:30.120 --> 00:35:32.370
JJ BEHRENS: Why do you hate
JavaScript so much?

00:35:32.370 --> 00:35:35.130
GILAD BRACHA: Oh, you're not
interested in why I hate or

00:35:35.130 --> 00:35:36.990
love anything.

00:35:36.990 --> 00:35:39.250
Dart is not out to replace
JavaScript.

00:35:39.250 --> 00:35:42.810
This is something that, I guess,
various commentators

00:35:42.810 --> 00:35:44.760
jump to that conclusion.

00:35:44.760 --> 00:35:50.530
And once that happens, no amount
of denials will help.

00:35:50.530 --> 00:35:51.990
I mean not that I personally--

00:35:51.990 --> 00:35:54.630
I mean, there's a long list
of programming languages I

00:35:54.630 --> 00:35:55.970
personally would eradicate.

00:35:55.970 --> 00:36:01.350
But that's not what Google
is trying to do here.

00:36:01.350 --> 00:36:02.810
We compiled a JavaScript.

00:36:02.810 --> 00:36:05.640
I mean one thing about people at
Google, whatever people may

00:36:05.640 --> 00:36:08.440
say of us, I don't think they
often say that we're stupid.

00:36:08.440 --> 00:36:11.600
And so the idea of getting rid
of JavaScript is quite

00:36:11.600 --> 00:36:12.610
unrealistic.

00:36:12.610 --> 00:36:14.260
And we have no interest
in doing that.

00:36:14.260 --> 00:36:17.750
We're compiling to JavaScript,
because we see JavaScript as a

00:36:17.750 --> 00:36:21.390
substrate that can
enable languages

00:36:21.390 --> 00:36:22.390
and multiple languages.

00:36:22.390 --> 00:36:23.960
Dart, of course,
but potentially

00:36:23.960 --> 00:36:25.810
lots of other languages.

00:36:25.810 --> 00:36:30.170
Just like x86 or any other
part of the ecosystem.

00:36:30.170 --> 00:36:32.470
The question is, do you want
to work with it directly?

00:36:32.470 --> 00:36:34.760
And I don't think so.

00:36:34.760 --> 00:36:36.570
SETH LADD: So it just builds on
the existing lingua franca

00:36:36.570 --> 00:36:38.170
infrastructure of the web.

00:36:38.170 --> 00:36:40.150
JJ BEHRENS: And we have a lot
of people at Google who

00:36:40.150 --> 00:36:41.640
really, really love
JavaScript.

00:36:41.640 --> 00:36:44.210
Those Angular guys,
man, they love it.

00:36:44.210 --> 00:36:45.260
SETH LADD: Good framework.

00:36:45.260 --> 00:36:46.460
JJ BEHRENS: Yeah, it
is good framework.

00:36:46.460 --> 00:36:47.930
SETH LADD: So this I'm
really curious about.

00:36:47.930 --> 00:36:50.620
So you've seen a bunch of Dart
code get written the past

00:36:50.620 --> 00:36:52.620
year, and iterations of spec.

00:36:52.620 --> 00:36:56.960
What is some of the best
feedback you've received?

00:36:56.960 --> 00:36:59.700
GILAD BRACHA: The best feedback
is feedback that

00:36:59.700 --> 00:37:02.750
tells you about a problem.

00:37:02.750 --> 00:37:03.530
Right?

00:37:03.530 --> 00:37:07.160
So I'm trying to do this with a
library, because I have Dart

00:37:07.160 --> 00:37:10.720
HTML and it's too big and I
want to show people only a

00:37:10.720 --> 00:37:12.070
part of it.

00:37:12.070 --> 00:37:15.470
Generally feedback that tells
you about a problem someone's

00:37:15.470 --> 00:37:19.560
trying to solve, as opposed to
feedback that tells you I want

00:37:19.560 --> 00:37:21.370
this thing from my favorite
language.

00:37:21.370 --> 00:37:23.390
That is prescriptive
solutions.

00:37:23.390 --> 00:37:25.230
Because the prescriptive
solutions aren't

00:37:25.230 --> 00:37:27.310
very useful to me.

00:37:27.310 --> 00:37:30.980
They're not likely to actually
work in a different setting.

00:37:30.980 --> 00:37:33.910
If they do they'll bring the
exact same problems that they

00:37:33.910 --> 00:37:35.550
had in that setting.

00:37:35.550 --> 00:37:37.800
And so you really want to listen
to people tell you

00:37:37.800 --> 00:37:41.360
about their problems
not the solutions.

00:37:41.360 --> 00:37:45.400
JJ BEHRENS: This is definitely
a good case why languages

00:37:45.400 --> 00:37:47.720
designed by committee, with
the exception of Haskell,

00:37:47.720 --> 00:37:51.440
don't always work
out so smoothly.

00:37:51.440 --> 00:37:52.690
GILAD BRACHA: Umm.

00:37:52.690 --> 00:37:53.940
Please go on.

00:37:56.410 --> 00:37:59.120
SETH LADD: So what I'm hearing
is we love the feedback that's

00:37:59.120 --> 00:38:00.440
more about use cases.

00:38:00.440 --> 00:38:03.080
Tell us what you're trying to
do, and what was difficult,

00:38:03.080 --> 00:38:04.750
and we'll help come up
with a solution.

00:38:04.750 --> 00:38:07.530
GILAD BRACHA: Right.

00:38:07.530 --> 00:38:09.740
SETH LADD: Well, M1
is a stabilization

00:38:09.740 --> 00:38:11.320
but we're not done.

00:38:11.320 --> 00:38:12.880
GILAD BRACHA: Oh, by no means.

00:38:12.880 --> 00:38:15.720
SETH LADD: We've got a couple
things coming down the pipe.

00:38:15.720 --> 00:38:17.393
Can you give us a little
hint about what

00:38:17.393 --> 00:38:17.980
you're thinking about?

00:38:17.980 --> 00:38:21.130
GILAD BRACHA: So mix ins is
something we already--

00:38:21.130 --> 00:38:25.020
I think we last spoke about it
already at Google I/O and

00:38:25.020 --> 00:38:26.650
mentioned that we'd do that.

00:38:26.650 --> 00:38:31.830
So that'll be coming at some
point down the pipeline.

00:38:31.830 --> 00:38:34.180
I'm very excited about that.

00:38:34.180 --> 00:38:35.870
Again, that's something
that helps you

00:38:35.870 --> 00:38:36.960
structure things better.

00:38:36.960 --> 00:38:38.540
There are very concrete
scenarios.

00:38:38.540 --> 00:38:41.050
That's one of the reasons
libraries will be heavily

00:38:41.050 --> 00:38:43.160
impacted by that, because you'll
be able to organize

00:38:43.160 --> 00:38:46.070
things in a way that'll let
you share code more

00:38:46.070 --> 00:38:48.950
effectively and so forth.

00:38:48.950 --> 00:38:54.620
Then of course mirrors, it's
not really a language

00:38:54.620 --> 00:38:57.500
construct, but it's more a
magical library that lets you

00:38:57.500 --> 00:38:59.870
do things with the language.

00:38:59.870 --> 00:39:04.980
And so right now we have
introspection in the VM.

00:39:04.980 --> 00:39:07.960
But we don't have support for
all this stuff in dart2js.

00:39:07.960 --> 00:39:09.860
So we're warning people
about that.

00:39:09.860 --> 00:39:13.820
We don't want anyone playing
with it in the VM and then

00:39:13.820 --> 00:39:15.460
suddenly realizing that
it's not going to

00:39:15.460 --> 00:39:18.310
work for them in dart2js.

00:39:18.310 --> 00:39:21.250
And there's a lot more to
mirrors beyond the current

00:39:21.250 --> 00:39:24.690
introspection support that
we'd like to do.

00:39:24.690 --> 00:39:27.430
Adding and changing code
dynamically, debugging

00:39:27.430 --> 00:39:31.780
support, making things
like [INAUDIBLE]

00:39:31.780 --> 00:39:34.830
trivial, making fix and continue
debugging trivial.

00:39:34.830 --> 00:39:35.900
That sort of thing.

00:39:35.900 --> 00:39:37.580
JJ BEHRENS: I'm really looking
forward to that.

00:39:37.580 --> 00:39:40.060
GILAD BRACHA: And of course,
this is complicated in the

00:39:40.060 --> 00:39:43.690
Dart context because of these
issues of you don't really

00:39:43.690 --> 00:39:45.580
download all your code.

00:39:45.580 --> 00:39:48.530
Or your code gets mangled,
minified, whatever.

00:39:48.530 --> 00:39:51.190
And having mechanisms
to control that.

00:39:51.190 --> 00:39:53.700
So we don't want a situation
where just because you used

00:39:53.700 --> 00:39:56.230
mirrors suddenly all bets
are off and suddenly

00:39:56.230 --> 00:39:57.780
your download explodes.

00:39:57.780 --> 00:40:01.790
Because we want to give you
a relatively fine grained

00:40:01.790 --> 00:40:04.180
mechanism using metadata, which
is another new feature

00:40:04.180 --> 00:40:08.810
that has just come in, to
specify well I'm going to need

00:40:08.810 --> 00:40:09.970
this stuff reflectively.

00:40:09.970 --> 00:40:12.730
Even though it isn't actually
being used right now

00:40:12.730 --> 00:40:13.790
so please keep it.

00:40:13.790 --> 00:40:15.440
Preserve that information
for me.

00:40:15.440 --> 00:40:17.110
Things like that.

00:40:17.110 --> 00:40:18.680
SETH LADD: I love to see the
language continue to evolve.

00:40:18.680 --> 00:40:19.600
This is great.

00:40:19.600 --> 00:40:20.250
JJ BEHRENS: Yeah.

00:40:20.250 --> 00:40:20.870
SETH LADD: All right, we're
going to try this

00:40:20.870 --> 00:40:21.920
demo one more time.

00:40:21.920 --> 00:40:23.300
Here we go, everyone
cross your fingers.

00:40:23.300 --> 00:40:25.850
So we're back at the computer
screen here.

00:40:25.850 --> 00:40:27.610
And I restarted the Editor.

00:40:27.610 --> 00:40:29.900
The errors still exist here
in the simple app

00:40:29.900 --> 00:40:31.060
about missing packages.

00:40:31.060 --> 00:40:33.645
But let's go ahead and see
if we can run Pub again.

00:40:42.243 --> 00:40:44.180
OK, it wasn't meant to be.

00:40:44.180 --> 00:40:44.520
That's all right.

00:40:44.520 --> 00:40:44.940
JJ BEHRENS: It wasn't
meant to be.

00:40:44.940 --> 00:40:45.840
SETH LADD: That's OK.

00:40:45.840 --> 00:40:47.250
It worked for me yesterday.

00:40:47.250 --> 00:40:49.180
That's a typical response
from programmers, right?

00:40:49.180 --> 00:40:50.580
Or it worked on my machine.

00:40:50.580 --> 00:40:52.430
JJ BEHRENS: Yeah, I'm
so sorry about that.

00:40:52.430 --> 00:40:53.240
It's funny.

00:40:53.240 --> 00:40:54.260
It always works.

00:40:54.260 --> 00:40:55.510
Pub is not one of those
things that

00:40:55.510 --> 00:40:57.570
causes me a lot of problems.

00:40:57.570 --> 00:40:58.820
SETH LADD: OK, so it looked
like it worked.

00:40:58.820 --> 00:41:00.260
It just, no, nevermind.

00:41:00.260 --> 00:41:00.610
We'll come back.

00:41:00.610 --> 00:41:01.850
JJ BEHRENS: OK, sorry
about that.

00:41:01.850 --> 00:41:04.530
SETH LADD: But we're
only M1 right?

00:41:04.530 --> 00:41:05.950
So it's OK we're allowed
one bug.

00:41:05.950 --> 00:41:07.170
JJ BEHRENS: One bug.

00:41:07.170 --> 00:41:08.320
Until M2 right?

00:41:08.320 --> 00:41:09.400
GILAD BRACHA: Then we'll
have two bugs.

00:41:09.400 --> 00:41:10.520
Yeah, actually probably
a lot more.

00:41:10.520 --> 00:41:13.100
That's another thing, when we
say that the language is

00:41:13.100 --> 00:41:16.490
stable you have to take that
with a grain of salt in the

00:41:16.490 --> 00:41:18.630
sense that we have no intention
of making any more

00:41:18.630 --> 00:41:22.385
breaking changes unless we've
really screwed up.

00:41:22.385 --> 00:41:25.240
And the other thing is, from
the end developer's

00:41:25.240 --> 00:41:27.590
perspective, the fact that the
spec says well this is the way

00:41:27.590 --> 00:41:29.540
it is and we don't intend
to change that.

00:41:29.540 --> 00:41:32.730
Obviously there are going to be
bugs, so people will still

00:41:32.730 --> 00:41:35.880
have to adjust to things working
differently than the

00:41:35.880 --> 00:41:37.430
way they work right now.

00:41:37.430 --> 00:41:42.370
And library changes are just as
important, if not more so.

00:41:42.370 --> 00:41:44.720
And there will be additions, but
those additions we don't

00:41:44.720 --> 00:41:47.500
see them impacting what's
already there.

00:41:47.500 --> 00:41:48.740
It'll be a way of wave
breaking them.

00:41:48.740 --> 00:41:53.250
So the main message is we're
past the radical language

00:41:53.250 --> 00:41:55.340
reshuffling phase.

00:41:55.340 --> 00:41:57.570
JJ BEHRENS: I think that if
people want to stay current on

00:41:57.570 --> 00:41:59.440
these things they should
just follow the blog.

00:41:59.440 --> 00:42:03.230
I mean, every time we're
discussing upcoming things

00:42:03.230 --> 00:42:04.500
it's on the blog.

00:42:04.500 --> 00:42:05.440
SETH LADD: Right.

00:42:05.440 --> 00:42:08.870
Another big change coming
down is web components.

00:42:08.870 --> 00:42:09.330
JJ BEHRENS: Web components.

00:42:09.330 --> 00:42:11.900
SETH LADD: Web components are
a future spec really made

00:42:11.900 --> 00:42:14.690
available today thanks to
our compilation step.

00:42:14.690 --> 00:42:18.830
So it's an encapsulation model
around the structure, and the

00:42:18.830 --> 00:42:21.660
behavior, and the style of
elements that you would

00:42:21.660 --> 00:42:23.990
typically just lay
out on your page.

00:42:23.990 --> 00:42:26.430
Thanks to web components you can
encapsulate them up into

00:42:26.430 --> 00:42:28.615
new elements and compose
your page out

00:42:28.615 --> 00:42:30.610
of more true elements.

00:42:30.610 --> 00:42:32.300
And the Dart team has been
hard at work, again open

00:42:32.300 --> 00:42:34.970
source on GitHub, to make
the web component

00:42:34.970 --> 00:42:36.430
model a reality today.

00:42:36.430 --> 00:42:38.990
And we've already got some
demo apps like to do MVC.

00:42:38.990 --> 00:42:41.450
So I expect to see
more of those.

00:42:41.450 --> 00:42:44.020
And along with the library
updates, and language

00:42:44.020 --> 00:42:46.720
evolution stuff, but also a lot
more with web components.

00:42:46.720 --> 00:42:47.800
So stay tuned for that.

00:42:47.800 --> 00:42:49.080
JJ BEHRENS: Web components
are big.

00:42:49.080 --> 00:42:50.860
SETH LADD: So you alluded
to the news and

00:42:50.860 --> 00:42:52.500
update service we have.

00:42:52.500 --> 00:42:55.160
So this is a lot of stuff we
just presented here, and the

00:42:55.160 --> 00:42:57.100
train is going to
keep on rolling.

00:42:57.100 --> 00:43:00.280
What are some good ways that
people can get involved and or

00:43:00.280 --> 00:43:02.940
follow along with Dart?

00:43:02.940 --> 00:43:04.420
JJ BEHRENS: Well, you could
start by going to

00:43:04.420 --> 00:43:05.340
dartlang.org.

00:43:05.340 --> 00:43:06.940
You could download the Editor.

00:43:06.940 --> 00:43:11.810
There's a mailing list that
moves crazy fast.

00:43:11.810 --> 00:43:13.890
I can't read as fast
as it moves.

00:43:13.890 --> 00:43:18.240
But if you have questions about
specific things you're

00:43:18.240 --> 00:43:20.700
stuck on in your Dart code,
I think you should post

00:43:20.700 --> 00:43:22.610
questions to Stack Overflow.

00:43:22.610 --> 00:43:25.840
And remember, if you ask a
question and then Seth or me

00:43:25.840 --> 00:43:26.950
answers it you've
got to +1 it.

00:43:26.950 --> 00:43:33.050
Because my salary is directly
connected to the little green

00:43:33.050 --> 00:43:33.870
check marks.

00:43:33.870 --> 00:43:35.460
SETH LADD: We're now an
officially sponsored tag on

00:43:35.460 --> 00:43:37.380
Stack Overflow for Dart which
I'm really happy with.

00:43:37.380 --> 00:43:39.720
A lot of good community
involvement there.

00:43:39.720 --> 00:43:39.990
Great.

00:43:39.990 --> 00:43:41.810
And then, dartbug.com.

00:43:41.810 --> 00:43:43.990
JJ BEHRENS: Dartbug.com, so my
favorite thing is I come up

00:43:43.990 --> 00:43:47.830
with some random crazy feature
because I wake up in a cold

00:43:47.830 --> 00:43:49.220
sweat in the middle
of the night.

00:43:49.220 --> 00:43:52.000
The first thing I do is I whip
out my Android phone and I go

00:43:52.000 --> 00:43:55.580
to dartbug.com/new and I
create a new feature.

00:43:55.580 --> 00:43:57.990
And then the next day
Gilad says, JJ

00:43:57.990 --> 00:44:01.310
stop doing that maybe.

00:44:01.310 --> 00:44:02.030
SETH LADD: But it is great.

00:44:02.030 --> 00:44:03.270
Your bugs and feedback
we love.

00:44:03.270 --> 00:44:05.850
It's really helped evolve the
language and libraries, the

00:44:05.850 --> 00:44:07.520
platform, to where
it is today.

00:44:07.520 --> 00:44:10.880
And I'm hoping to see the
community continue to grow.

00:44:10.880 --> 00:44:13.500
So thanks for supporting
Dart up to M1.

00:44:13.500 --> 00:44:16.080
We look forward to hosting
more packages on Pub and

00:44:16.080 --> 00:44:17.880
seeing more cool Dart
libraries and

00:44:17.880 --> 00:44:18.950
apps out there soon.

00:44:18.950 --> 00:44:19.830
JJ BEHRENS: Absolutely.

00:44:19.830 --> 00:44:21.170
Gilad, thanks for joining us.

00:44:21.170 --> 00:44:21.640
GILAD BRACHA: Thank you.

00:44:21.640 --> 00:44:22.360
SETH LADD: Thank you
very much Gilad.

00:44:22.360 --> 00:44:23.550
JJ BEHRENS: Thank you
all for watching

00:44:23.550 --> 00:44:26.180
this episode of Dartisms.

00:44:26.180 --> 00:44:26.760
SETH LADD: Yes, thank you.

00:44:26.760 --> 00:44:28.010
See you next time.

