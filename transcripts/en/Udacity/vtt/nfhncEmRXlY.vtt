WEBVTT
Kind: captions
Language: en

00:00:00.775 --> 00:00:02.730
Okay, so
we will be talking about canvas.

00:00:02.730 --> 00:00:05.120
So, what is the canvas in HTML file?

00:00:05.120 --> 00:00:09.525
The canvas is basically a way for you,

00:00:09.525 --> 00:00:14.760
it gives you a way for
you to draw stuff in a nutshell.

00:00:14.760 --> 00:00:17.540
It gives you a built,
the ability to draw objects.

00:00:19.080 --> 00:00:25.620
Basic objects such as rectangles,
squares, lines.

00:00:25.620 --> 00:00:29.440
As well as be able to paint
pictures that you import in.

00:00:29.440 --> 00:00:35.785
And why's the name canvas is that, it's
just like if you were a painter, right.

00:00:35.785 --> 00:00:38.340
And you're painting on a canvas and

00:00:38.340 --> 00:00:43.195
the canvas is just a white piece of
usually a white piece of cloth that

00:00:43.195 --> 00:00:47.510
you would just paint on the canvas
with your actual paint.

00:00:47.510 --> 00:00:48.230
With the brushstrokes.

00:00:48.230 --> 00:00:54.040
So instead of manually painting it,
you actually paint it through your code.

00:00:54.040 --> 00:00:55.456
And how it will work is like,

00:00:55.456 --> 00:00:58.180
if you paint something on
your canvas that's it.

00:00:58.180 --> 00:01:05.860
You cannot really remove the paint and
adjust it.

00:01:05.860 --> 00:01:08.470
Once you paint on something
on your real canvas and

00:01:08.470 --> 00:01:11.090
then you paint brush,
you actually have to paint it over.

00:01:11.090 --> 00:01:14.470
And that's a very
important concept to know.

00:01:14.470 --> 00:01:19.290
Once you paint something on a canvas
those pixels are there indefinitely.

00:01:19.290 --> 00:01:19.850
On your canvas.

00:01:19.850 --> 00:01:25.014
So, if you want to adjust something you
need to paint it over those pixels.

00:01:25.014 --> 00:01:31.080
Now, lucky for us, in the computer world
we have the ability to clear our canvas.

00:01:31.080 --> 00:01:36.520
We set it to a black state in order for
us to be able to repaint it again.

00:01:36.520 --> 00:01:43.470
And that will be a very crucial concept
for you to learn about the canvas.

00:01:44.770 --> 00:01:50.840
Animation is basically,
you just showing me a picture.

00:01:50.840 --> 00:01:52.640
And then show me another picture.

00:01:52.640 --> 00:01:55.079
And they show me another
picture rapidly, very fast.

00:01:55.079 --> 00:01:59.850
And each picture, one thing,
one slight thing changes.

00:01:59.850 --> 00:02:04.950
So, in my eye it gives me
the illusion of movement.

00:02:04.950 --> 00:02:09.449
That is basically animation and
you just flip through it.

00:02:09.449 --> 00:02:13.710
The first thing I'm going to do and
you go find all this documentation on

00:02:13.710 --> 00:02:19.620
Mozilla's development network or on
the campus video lessons on you udesk.

00:02:19.620 --> 00:02:22.780
So, the first thing that we need to
do is, this is our HTML site here.

00:02:24.420 --> 00:02:28.600
In HTML and
to our left is what page will look like.

00:02:28.600 --> 00:02:31.460
Right now, there's nothing because
we haven't drawn anything.

00:02:31.460 --> 00:02:36.035
So what we need to do, [INAUDIBLE]
alike we need to declare a canvas

00:02:36.035 --> 00:02:39.449
element called canvas,
that's pretty easy.

00:02:39.449 --> 00:02:44.657
You need to our ID to something
similar like my canvas, and

00:02:44.657 --> 00:02:50.520
it's good to set width and a height,
because this is very important.

00:02:50.520 --> 00:02:55.750
That will allow us to know our
boundaries when we're drawing.

00:02:55.750 --> 00:03:00.454
And then, I'm actually hooking in to
a JavaScript file that actually does all

00:03:00.454 --> 00:03:03.410
of the heavy lifting of the work.

00:03:03.410 --> 00:03:06.294
And this is called demo.setup.js.

00:03:06.294 --> 00:03:09.620
So I'm going to go into
demo.setup.js now and

00:03:09.620 --> 00:03:14.520
tell you how would you set up
an animation for anything.

00:03:14.520 --> 00:03:15.070
Right here.

00:03:15.070 --> 00:03:19.650
So the first couple of lines you're
going to see this line here.

00:03:19.650 --> 00:03:22.020
A set up canvas and other variables.

00:03:22.020 --> 00:03:26.730
So, I'm getting
Domage DOM called canvas.

00:03:26.730 --> 00:03:28.966
I'm getting the ID from my canvas.

00:03:28.966 --> 00:03:33.470
And then, I'm getting the context.

00:03:33.470 --> 00:03:40.060
The context will allow us to hook into
every other API call in the canvas.

00:03:40.060 --> 00:03:43.870
Now if you you're not
sure of what I'm doing or

00:03:43.870 --> 00:03:46.940
why I'm doing it,
it's just part of the documentation.

00:03:46.940 --> 00:03:50.130
And you will find out more about this

00:03:51.350 --> 00:03:55.510
set up in our UDAC course or you could
just read the documentation online.

00:03:57.250 --> 00:04:00.490
So this is very important,
a lot of people, a lot of beginners

00:04:00.490 --> 00:04:04.120
don't realize that like once you set
up your canvas and your context,

00:04:04.120 --> 00:04:07.430
you think that you're ready to
start animating and start drawing.

00:04:07.430 --> 00:04:11.510
But, it's not quite that
simple because in JavaScript,

00:04:11.510 --> 00:04:16.269
in HTML programming, there's
a lot of things called events and

00:04:16.269 --> 00:04:19.015
we actually have to wait for
events to finish.

00:04:19.015 --> 00:04:23.760
because the browser needs a couple
milliseconds to actually load up and

00:04:23.760 --> 00:04:29.280
create the document tree structure like
the DOM, because, how process work?

00:04:29.280 --> 00:04:33.750
And you'll find out more on project
4 is that, it gets a string file,

00:04:33.750 --> 00:04:36.940
it gets the code in your HTML,
it then needs to process and

00:04:36.940 --> 00:04:39.650
create these abstractions, these nodes.

00:04:39.650 --> 00:04:42.260
These objects in the .NET object model.

00:04:42.260 --> 00:04:47.690
And if the browser has not finished
loading all these objects, and if you

00:04:47.690 --> 00:04:51.440
have a JavaScript that's trying to
refer to an object that does not exist,

00:04:51.440 --> 00:04:54.990
such as canvas, it's not going to work.

00:04:54.990 --> 00:05:00.550
So, this is a trick that I
recommend you keep notes of.

00:05:00.550 --> 00:05:01.960
It's called Window on load.

00:05:01.960 --> 00:05:06.720
So window on load is an event that the
window, the browser will fire off once

00:05:07.790 --> 00:05:11.560
it's done loading everything,
including the document object model,

00:05:11.560 --> 00:05:15.880
the images and
also all the other resources for you.

00:05:15.880 --> 00:05:19.140
Let's go back and talk about animation.

00:05:19.140 --> 00:05:22.040
So we set up our objects here.

00:05:22.040 --> 00:05:24.350
And then we set this to
unload this function here.

00:05:24.350 --> 00:05:27.930
So unload I'm going to call
this function called anime.

00:05:29.070 --> 00:05:33.580
I'm going to pass in my canvas
object and my context object.

00:05:33.580 --> 00:05:37.185
And then, I'm going to go down here and
then I'm going to do my magic here.

00:05:37.185 --> 00:05:40.845
And then, I'll walk through this
common stuff here again but

00:05:40.845 --> 00:05:41.985
you do your magic here.

00:05:41.985 --> 00:05:44.285
But, then at the end
this is very crucial.

00:05:44.285 --> 00:05:48.705
This is how animation works because
right here, I'm going to highlight this.

00:05:48.705 --> 00:05:50.155
You're making one frame.

00:05:51.910 --> 00:05:55.240
One function call is
basically one frame.

00:05:55.240 --> 00:05:57.710
You're just making one static picture.

00:05:57.710 --> 00:05:59.360
How do you show the next picture?

00:05:59.360 --> 00:06:03.790
Because in animation, we need to show
the next picture and change the objects.

00:06:03.790 --> 00:06:06.320
Change to X and
Y coordinates when we draw stuff.

00:06:06.320 --> 00:06:07.520
And then show that picture again.

00:06:09.220 --> 00:06:13.430
There is a method in JavaScript
called requests animation frame.

00:06:13.430 --> 00:06:17.490
So, what we do is pass in your function,

00:06:17.490 --> 00:06:23.030
an anonymous function,
to Window request animation frame.

00:06:23.030 --> 00:06:27.990
And then you pass in this function,
again, animate.

00:06:27.990 --> 00:06:30.690
So, animate function is calling itself.

00:06:32.390 --> 00:06:36.910
Again, this may be new to you
if you're new to programming,

00:06:36.910 --> 00:06:41.500
but a function has
the ability to call itself.

00:06:41.500 --> 00:06:47.660
So once I'm done drawing, I'm actually
going to go ahead and call myself again.

00:06:47.660 --> 00:06:51.200
And then, once I call myself,
I'm going to go back to the top or

00:06:51.200 --> 00:06:54.650
I'm going to repeat my instructions.

00:06:56.960 --> 00:07:00.000
What I want to do, is that I
want to be able to draw on line.

00:07:00.000 --> 00:07:02.860
Pretend that this is a line,
this pen is a line.

00:07:02.860 --> 00:07:06.200
I'm drawing this line
from point A to point B.

00:07:06.200 --> 00:07:08.610
And then I want to rotate this line.

00:07:08.610 --> 00:07:13.060
Like this, in a circular motion,
indefinitely.

00:07:13.060 --> 00:07:14.450
So basically, how would we do that?

00:07:14.450 --> 00:07:16.500
We'll just go back to our animation.

00:07:16.500 --> 00:07:21.310
We want to draw static
images of one line.

00:07:22.480 --> 00:07:23.110
Then okay.

00:07:23.110 --> 00:07:25.110
Recall animation frame again.

00:07:25.110 --> 00:07:27.930
Change the position of this line again,
okay.

00:07:27.930 --> 00:07:32.640
Paint that over a series of thousands
of frames that you're drawing.

00:07:32.640 --> 00:07:36.330
It will look like it's
animating like this.

00:07:36.330 --> 00:07:40.430
So let's go back to the code and
let's see how we're going to do this.

00:07:40.430 --> 00:07:45.355
So let's just first learn how
to draw a line because I think,

00:07:45.355 --> 00:07:50.170
if you're not familiar with, we'll learn
how to draw a line I'm going to show you

00:07:50.170 --> 00:07:53.590
and how you're going figure this
out is just read the documentation.

00:07:55.080 --> 00:07:56.090
And let's just draw a line.

00:07:56.090 --> 00:07:58.052
So, CTX.linewidth.

00:07:58.052 --> 00:08:02.500
I'm going to draw a line width of
10 because I want the width of

00:08:02.500 --> 00:08:05.372
this line to be 10 pixels.

00:08:05.372 --> 00:08:11.300
I'm going to execute this
command called beginPath().

00:08:11.300 --> 00:08:14.270
And you'll find all this
in the documentation.

00:08:14.270 --> 00:08:19.270
So you're just really going
to read the documentation and

00:08:19.270 --> 00:08:20.030
then apply what you want.

00:08:20.030 --> 00:08:24.941
So I'm going to move my, I'm going to
begin at let's say the coordinate

00:08:24.941 --> 00:08:28.312
100 pixels, 200 hundred pixels down.

00:08:28.312 --> 00:08:33.201
So, this is your X coordinate
on 100 pixels from the left and

00:08:33.201 --> 00:08:36.350
then on 200 pixels down from the top.

00:08:36.350 --> 00:08:38.350
So that's your Y coordinate.

00:08:38.350 --> 00:08:41.440
And down let's start line times two.

00:08:42.539 --> 00:08:44.068
The next coordinate.

00:08:44.068 --> 00:08:47.740
300, 200 so
that's my next coordinate in my XY.

00:08:48.802 --> 00:08:51.180
I'm going to actually
escape the command stroke,

00:08:52.420 --> 00:08:56.720
then I'm going to close this path.

00:08:56.720 --> 00:08:58.050
Okay, and that's how we draw on a line.

00:08:58.050 --> 00:08:59.580
So I'm going to save this and
I'm going to refresh.

00:09:01.270 --> 00:09:03.010
There's our line.

00:09:03.010 --> 00:09:04.880
But, Mark, it's not animating.

00:09:06.500 --> 00:09:11.650
Well, it's, technically it is because
it's calling the frame again and again.

00:09:11.650 --> 00:09:13.730
It's calling the function
animate again and again but

00:09:13.730 --> 00:09:18.970
we're not moving the line because we
just have the static code because it's

00:09:18.970 --> 00:09:23.140
just painting this line over and
over and over again.

00:09:23.140 --> 00:09:26.310
So, how are we going to show
that this is actually working?

00:09:26.310 --> 00:09:29.524
Well let's just go ahead and
change this XY coordinates.

00:09:29.524 --> 00:09:33.140
And what I'm going to do is I'm
going to give you a little track here.

00:09:34.410 --> 00:09:37.050
Is that, this is my start point.

00:09:37.050 --> 00:09:38.310
My endpoint will be different.

00:09:38.310 --> 00:09:44.190
So, my endpoint will be, let me add
a little bit of randomness to it.

00:09:44.190 --> 00:09:48.060
So random 50 plus 10.

00:09:48.060 --> 00:09:52.670
So, and if you're not familiar
with this random function.

00:09:52.670 --> 00:09:59.807
For each call of this function it will
give you a random number from 0 to 1.

00:09:59.807 --> 00:10:06.083
And then, I am increasing the range
of 0 to 1 from let say 160 to 10.

00:10:06.083 --> 00:10:10.067
And if you are a little
bit confused on that,

00:10:10.067 --> 00:10:14.593
just look up the that documentation for
random and

00:10:14.593 --> 00:10:20.628
figure out how can I set random
numbers between my minimum value and

00:10:20.628 --> 00:10:23.390
my maximum value I want.

00:10:23.390 --> 00:10:27.350
So I'm going to set this up
per frame what do you think?

00:10:27.350 --> 00:10:32.820
The line should move,
should looks something like this.

00:10:32.820 --> 00:10:34.300
All right, so that's great.

00:10:34.300 --> 00:10:35.430
So the line moves.

00:10:35.430 --> 00:10:38.820
But then it doesn't,
it's painting over everything else.

00:10:40.430 --> 00:10:41.550
Remember, this is a canvas.

00:10:41.550 --> 00:10:44.500
So, if I'm painting something over and
over again.

00:10:44.500 --> 00:10:48.770
It's like I'm simulating how I would
paint something on a real actual canvas.

00:10:48.770 --> 00:10:55.040
So, in order for me to be able to
displays animation per se, that,

00:10:55.040 --> 00:10:59.370
like, I want this line to move, and
I just only want that one line drawn,

00:10:59.370 --> 00:11:03.010
I need to actually clear the canvas
per frame call, per animation call.

00:11:03.010 --> 00:11:09.750
So if we go to this code here, there
is a function called clear rectangle.

00:11:09.750 --> 00:11:13.300
And the rectangle is basically
the canvas like the whole canvas.

00:11:13.300 --> 00:11:14.570
So I'm going to clear this.

00:11:15.640 --> 00:11:16.220
I save it.

00:11:16.220 --> 00:11:18.460
I'm going to refresh.

00:11:18.460 --> 00:11:18.960
And here we go.

00:11:20.660 --> 00:11:23.660
So this is animation in a nutshell.

00:11:23.660 --> 00:11:27.660
You see that so
every animate, anime call.

00:11:27.660 --> 00:11:33.310
It will draw a line from
one point to another.

00:11:33.310 --> 00:11:35.710
This doesn't, it's and we're animating.

00:11:35.710 --> 00:11:40.351
So congratulations, we just learned
the basic concepts of anime and

00:11:40.351 --> 00:11:42.836
learned how to apply that in canvas.

00:11:42.836 --> 00:11:45.850
Now, we want the line to not do this,
but

00:11:45.850 --> 00:11:48.700
we want the line to rotate in a circle.

00:11:50.450 --> 00:11:51.900
So how are we going to do that?

00:11:51.900 --> 00:11:55.770
So i'm going to use a series of sine and
cosine.

00:11:57.410 --> 00:12:01.760
And a series of angles because basically
what I'm doing is that I want to be

00:12:01.760 --> 00:12:04.660
able to have a point here and
a point here along the circle.

00:12:04.660 --> 00:12:07.530
I want to trace the X and Y points here.

00:12:09.255 --> 00:12:10.760
because they're on a circle.

00:12:11.900 --> 00:12:15.060
So, I'm going to go and
walk through the code a little bit.

00:12:15.060 --> 00:12:16.610
So first I set up my canvas here.

00:12:19.270 --> 00:12:21.890
I then set my center of my circle.

00:12:21.890 --> 00:12:26.640
And here this is in
the center of the canvas.

00:12:28.100 --> 00:12:31.810
I actually get my time delta
to smooth out my animations.

00:12:33.710 --> 00:12:36.060
And here's the trick, I set my angle.

00:12:36.060 --> 00:12:41.244
And the angle will basically
change per animation call and

00:12:41.244 --> 00:12:46.370
this angle will basically
drive everything else.

00:12:46.370 --> 00:12:53.770
In so far as calculating to X and
Y coordinates of my circle.

00:12:53.770 --> 00:12:57.190
I do my math,
I did some magic with math here.

00:12:59.090 --> 00:13:04.910
I'm actually setting the color
of my line call stroke style.

00:13:04.910 --> 00:13:08.680
And then,
I just draw my line with my new X and

00:13:08.680 --> 00:13:13.240
Y coordinates based on this angle here.

00:13:14.670 --> 00:13:16.090
So, what does this look like?

00:13:16.090 --> 00:13:18.620
Let's just go and refresh.

00:13:18.620 --> 00:13:19.678
This is what it looks like.

00:13:22.743 --> 00:13:24.182
Pretty cool?

00:13:24.182 --> 00:13:29.182
Well, remember that I'm painting
over my past pixels, so

00:13:29.182 --> 00:13:32.882
if I want to just have
show the line itself and

00:13:32.882 --> 00:13:38.683
don't care about my past pixels,
I need to go back to this code here.

00:13:42.188 --> 00:13:44.820
And clear it for every frame.

00:13:46.980 --> 00:13:47.480
There we go.

00:13:48.490 --> 00:13:52.590
So we are now animating a line.

