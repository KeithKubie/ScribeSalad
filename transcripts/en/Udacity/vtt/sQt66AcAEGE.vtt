WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
In contrast with software libraries and software components

00:00:03.000 --> 00:00:05.000
where the domain is clearly defined 

00:00:05.000 --> 00:00:09.000
and might be a subset of all the values that you can construct using the programming language,

00:00:09.000 --> 00:00:11.000
it's often the case that higher level software artifacts

00:00:11.000 --> 00:00:14.000
don't have the luxury of limiting their domains.

00:00:14.000 --> 00:00:18.000
And so one good example of this is an operating system.

00:00:18.000 --> 00:00:25.000
So here let's say we're testing a UNIX platform such as Linux or Mac OS X.

00:00:25.000 --> 00:00:27.000
I know we really haven't discussed this case yet,

00:00:27.000 --> 00:00:34.000
but I want to take a really quick quiz in order to start building up our intuition about testing.

00:00:34.000 --> 00:00:38.000
This example will be a very slightly simplified version of the UNIX read system call,

00:00:38.000 --> 00:00:41.000
and this is a system call supported by all UNIX platforms,

00:00:41.000 --> 00:00:44.000
so by Mac OS and Linux and others.

00:00:44.000 --> 00:00:48.000
All that read system call does is takes a file that's already open

00:00:48.000 --> 00:00:53.000
and reads some bytes out of it into the address space of the process that calls a read.

00:00:53.000 --> 00:00:56.000
And so the read call takes 3 parameters.

00:00:56.000 --> 00:00:58.000
It takes an integer called fd, 

00:00:58.000 --> 00:01:02.000
which is just a small integer referencing a file that's already open.

00:01:02.000 --> 00:01:05.000
It takes a second current parameter called buf,

00:01:05.000 --> 00:01:07.000
which is a pointer to a memory region--

00:01:07.000 --> 00:01:10.000
that is to say, a valid memory region in the process's address space.

00:01:10.000 --> 00:01:12.000
And finally, it takes a number of bytes.

00:01:12.000 --> 00:01:16.000
And so the quiz that we're going to take is which of the following test cases

00:01:16.000 --> 00:01:19.000
constitutes a useful test case for the read system call?

00:01:19.000 --> 00:01:24.000
Our 4 test cases are first, reading from file descriptor number 1--

00:01:24.000 --> 00:01:26.000
this is always a valid file descriptor for a UNIX process--

00:01:26.000 --> 00:01:30.000
from the address of b, and let's assume that refers to a valid memory region,

00:01:30.000 --> 00:01:32.000
and we're going to read 10 bytes.

00:01:32.000 --> 00:01:36.000
The second test case is also reading into variable b, 10 bytes,

00:01:36.000 --> 00:01:40.000
but it's specifying file descriptor -99999.

00:01:40.000 --> 00:01:45.000
The third test case is reading into file descriptor 1 using a pointer to an address

00:01:45.000 --> 00:01:49.000
which is almost certainly a bad one--this is just a random hex constant I just made up--

00:01:49.000 --> 00:01:52.000
also reading 10 bytes into there.

00:01:52.000 --> 00:01:55.000
And the final test case reads into file descriptor 1 and to a valid address b

00:01:55.000 --> 00:01:59.000
but reads -33333 bytes.

00:01:59.000 --> 00:02:01.000
So go ahead and write your answer.

00:02:01.000 --> 00:02:03.000
Write all of the test cases--write the letters indicated--

00:02:03.000 --> 00:02:09.000
all of the test cases that you think are good ones for a UNIX kernel in the space provided.

