WEBVTT
Kind: captions
Language: en

00:00:01.080 --> 00:00:02.780
Have you ever had
one of those moments

00:00:02.780 --> 00:00:05.450
where you're staring at your
phone waiting for a web page

00:00:05.450 --> 00:00:09.705
to load, you've got full
signal, and nothing's happening?

00:00:13.350 --> 00:00:15.010
This kind of sucks, right?

00:00:15.010 --> 00:00:17.750
I mean, this site could
be the best thing ever.

00:00:17.750 --> 00:00:20.770
But if it takes too long to
load, I'm going to get bored,

00:00:20.770 --> 00:00:22.620
and I'm just going to
go do something else.

00:00:26.990 --> 00:00:28.200
Now get this.

00:00:28.200 --> 00:00:30.370
You have about one
second before a user

00:00:30.370 --> 00:00:32.390
starts to get distracted.

00:00:32.390 --> 00:00:33.820
One.

00:00:33.820 --> 00:00:36.440
So what causes a site
to have slow load time,

00:00:36.440 --> 00:00:38.490
and how do you fix it?

00:00:38.490 --> 00:00:40.590
My name is Matt Gaunt,
I'm a developer advocate,

00:00:40.590 --> 00:00:43.120
and I wanted to talk to you
about PageSpeed Insights,

00:00:43.120 --> 00:00:46.120
a tool which can be used to find
issues affecting your site's

00:00:46.120 --> 00:00:49.810
load time, and give you some
tips on how you can fix them.

00:00:49.810 --> 00:00:53.220
So when you visit PageSpeed
Insights, you bash in your URL,

00:00:53.220 --> 00:00:54.970
and it'll give you
a score out of 100,

00:00:54.970 --> 00:00:58.260
and highlight any problem
areas with your site.

00:00:58.260 --> 00:00:59.860
The focus of this
tool is to point out

00:00:59.860 --> 00:01:02.560
issues which, if fixed,
would improve your site's

00:01:02.560 --> 00:01:05.379
overall load time and
make your users happier.

00:01:05.379 --> 00:01:08.870
The big question is, what do
you do with this information?

00:01:08.870 --> 00:01:11.960
Well, the most common problems
fall into three buckets.

00:01:11.960 --> 00:01:15.020
First, problems that can
be solved with build tools.

00:01:15.020 --> 00:01:17.190
For example,
JavaScript files where

00:01:17.190 --> 00:01:19.240
you could minify them
and send less bytes down

00:01:19.240 --> 00:01:22.240
the wire, or mergine
multiple files, so

00:01:22.240 --> 00:01:25.000
rather than make four
requests, you only make one.

00:01:25.000 --> 00:01:26.910
The second set of
issues are focused

00:01:26.910 --> 00:01:28.570
on the structured your page.

00:01:28.570 --> 00:01:31.550
For instance, where you link
to your JavaScript files.

00:01:31.550 --> 00:01:34.020
And thirdly, problems
which need server side

00:01:34.020 --> 00:01:37.860
tweaks to enable things like
caching of your page assets.

00:01:37.860 --> 00:01:40.450
Let's start off with
looking at build tools.

00:01:40.450 --> 00:01:43.370
Many of you may already be using
some kind of build tool today,

00:01:43.370 --> 00:01:45.000
but if you want,
then I recommend

00:01:45.000 --> 00:01:47.592
checking out Grunt or gulp js.

00:01:47.592 --> 00:01:49.550
These build tools are
picking up a lot of steam

00:01:49.550 --> 00:01:51.180
within the web
development community,

00:01:51.180 --> 00:01:53.524
and they're fairly easy
to get to grips with.

00:01:53.524 --> 00:01:55.440
The main reason you'd
want to use a build tool

00:01:55.440 --> 00:01:57.510
is to automate any
set of tasks you're

00:01:57.510 --> 00:02:00.284
going to run on your
project on a regular basis.

00:02:00.284 --> 00:02:02.700
And most build tools will allow
you to pull in third party

00:02:02.700 --> 00:02:06.200
modules, which means you
get a lot of stuff for free.

00:02:06.200 --> 00:02:07.700
So let's look at
a basic example,

00:02:07.700 --> 00:02:10.930
like JavaScript minification
and concatenation.

00:02:10.930 --> 00:02:13.620
In other words, take
some JavaScript files,

00:02:13.620 --> 00:02:16.600
strip out any white space,
replace variable names

00:02:16.600 --> 00:02:20.350
with shorter ones, and then just
squish all the files together.

00:02:20.350 --> 00:02:23.150
This way our JavaScript file
is smaller, making it faster

00:02:23.150 --> 00:02:25.200
to download, but
the browser also

00:02:25.200 --> 00:02:27.520
has fewer files to download.

00:02:27.520 --> 00:02:30.330
To achieve this, you
can use the uglify task.

00:02:30.330 --> 00:02:32.970
You define which files
to minify and merge,

00:02:32.970 --> 00:02:35.130
and it just takes
care of it for you.

00:02:35.130 --> 00:02:41.750
cssmin and htmlmin will do the
same thing for CSS and HTML.

00:02:41.750 --> 00:02:45.880
Another common problem
area is image optimization.

00:02:45.880 --> 00:02:48.650
When you run PageSpeed
Insights, it looks at your site

00:02:48.650 --> 00:02:50.890
and basically checks
whether any of the images

00:02:50.890 --> 00:02:53.395
are larger than they need
to be, and in the guidelines

00:02:53.395 --> 00:02:56.550
it will recommend jpegoptim,
which is a command line

00:02:56.550 --> 00:02:59.680
tool which strips out any
metadata from the image files,

00:02:59.680 --> 00:03:02.340
and can lead to some really
impressive reductions in file

00:03:02.340 --> 00:03:03.230
size.

00:03:03.230 --> 00:03:05.640
And when I say it
strips out metadata,

00:03:05.640 --> 00:03:09.799
I mean things like which camera
was used to take the photo.

00:03:09.799 --> 00:03:11.840
It's not needed for a
browser to render the image

00:03:11.840 --> 00:03:14.420
to just get rid of it.

00:03:14.420 --> 00:03:16.940
So to add this to your
build process, use imagemin

00:03:16.940 --> 00:03:20.930
for raster images, and
svgmin for vectors.

00:03:20.930 --> 00:03:24.840
And svgmin will strip out white
space, and any unnecessary tags

00:03:24.840 --> 00:03:27.120
and attributes from
your SVG files.

00:03:27.120 --> 00:03:29.310
The second set of problems
falls into the category

00:03:29.310 --> 00:03:31.010
of page structure.

00:03:31.010 --> 00:03:33.230
Now, I don't know about
you, but I've definitely

00:03:33.230 --> 00:03:36.310
put a JavaScript file in
the head of my page before.

00:03:36.310 --> 00:03:38.360
The problem with this
is that the browser will

00:03:38.360 --> 00:03:40.190
start to pass the
document, and as it

00:03:40.190 --> 00:03:42.230
reads the HTML
tag, the head tag,

00:03:42.230 --> 00:03:44.360
it will eventually
reach your script tag,

00:03:44.360 --> 00:03:47.800
and this is where you'll
see the screen of bad times.

00:03:47.800 --> 00:03:49.470
Nothing.

00:03:49.470 --> 00:03:51.080
The reason the page
stops rendering

00:03:51.080 --> 00:03:54.120
is because JavaScript can
manipulate the DOM and CSS.

00:03:54.120 --> 00:03:56.440
So the browser needs to go
and fetch the JavaScript

00:03:56.440 --> 00:03:59.740
from the server and execute
it once it's downloaded.

00:03:59.740 --> 00:04:04.320
This is just in case the
script changes a DOM or CSS.

00:04:04.320 --> 00:04:05.780
And it's only after
the JavaScript

00:04:05.780 --> 00:04:09.720
is finished executing that the
page can continue rendering.

00:04:09.720 --> 00:04:12.600
So to avoid this delay,
simply move your JavaScript

00:04:12.600 --> 00:04:14.520
to the bottom of
the body element.

00:04:14.520 --> 00:04:16.890
This way the browser can
pass and render the page

00:04:16.890 --> 00:04:18.970
up to this point,
and then it'll handle

00:04:18.970 --> 00:04:21.589
fetching the JavaScript
at the very end.

00:04:21.589 --> 00:04:23.380
An alternative and
slightly more performant

00:04:23.380 --> 00:04:26.560
technique is to use
the async attribute.

00:04:26.560 --> 00:04:28.470
Now, what async does
is it tells the browser

00:04:28.470 --> 00:04:32.090
to download and excuse the
JavaScript asynchronously,

00:04:32.090 --> 00:04:34.810
avoiding the render block.

00:04:34.810 --> 00:04:36.540
The reason it's
slightly more performant

00:04:36.540 --> 00:04:39.000
is the browser doesn't need
to wait on the DOM and CSS

00:04:39.000 --> 00:04:42.986
to be loaded before it can
execute the JavaScript.

00:04:42.986 --> 00:04:45.390
But you need to be
careful, because it

00:04:45.390 --> 00:04:49.450
means you can't rely on the DOM,
CSS, or any other JavaScript

00:04:49.450 --> 00:04:52.340
file to be loaded by the
time your JavaScript actually

00:04:52.340 --> 00:04:53.710
executes.

00:04:53.710 --> 00:04:55.860
Essentially, it
might require you

00:04:55.860 --> 00:04:58.900
to think a little differently
to how you use JavaScript,

00:04:58.900 --> 00:05:01.150
depending on what you're doing.

00:05:01.150 --> 00:05:04.280
The second page
structure woe is CSS.

00:05:04.280 --> 00:05:07.060
When we add a CSS link tag,
the rendering of the page

00:05:07.060 --> 00:05:10.560
will block much like
it did with JavaScript.

00:05:10.560 --> 00:05:14.060
We'll see it step through
the HTML tag, into the head,

00:05:14.060 --> 00:05:16.612
read to CSS, and boom.

00:05:16.612 --> 00:05:19.620
We'll hit the sad
screen of nothing.

00:05:19.620 --> 00:05:21.900
The browser has no
choice but to do this.

00:05:21.900 --> 00:05:25.260
It has to download the CSS
before it can start anything,

00:05:25.260 --> 00:05:27.750
otherwise the user would
see unstyled content

00:05:27.750 --> 00:05:31.380
followed by just a flash of
all the CSS's as it's loaded,

00:05:31.380 --> 00:05:33.066
and everything is styled.

00:05:33.066 --> 00:05:34.690
The fix for this can
be quite involved,

00:05:34.690 --> 00:05:37.170
and there's a lot of caveats,
each with their own pros

00:05:37.170 --> 00:05:38.400
and cons.

00:05:38.400 --> 00:05:41.500
If you have a relatively small
amount of CSS for a page,

00:05:41.500 --> 00:05:43.760
you can in line it
directly into the HTML,

00:05:43.760 --> 00:05:46.170
removing any requests
for a CSS file,

00:05:46.170 --> 00:05:47.780
and allowing the
page to be rendered

00:05:47.780 --> 00:05:50.510
as soon as the HTML is loaded.

00:05:50.510 --> 00:05:53.250
If you have a large
amount of CSS, however,

00:05:53.250 --> 00:05:56.230
you could in line just
above the full CSS

00:05:56.230 --> 00:05:59.940
so the browser can render
the most important content,

00:05:59.940 --> 00:06:03.879
and then the load the of
your CSS using JavaScript.

00:06:03.879 --> 00:06:05.420
The obvious downside
of this approach

00:06:05.420 --> 00:06:08.500
is that it requires JavaScript,
meaning if it's switched off,

00:06:08.500 --> 00:06:11.006
you won't get the
additional styles.

00:06:11.006 --> 00:06:12.630
With both inlining
techniques, you also

00:06:12.630 --> 00:06:15.220
lose the ability to cache
the CSS files, which

00:06:15.220 --> 00:06:17.380
could be a big loss if
you have styles shared

00:06:17.380 --> 00:06:20.030
across multiple
pages, in which case

00:06:20.030 --> 00:06:23.180
it might be worth splitting
out the styles to CSS files

00:06:23.180 --> 00:06:25.190
so you can cache
them, and inlining

00:06:25.190 --> 00:06:27.490
any unique styles for each page.

00:06:27.490 --> 00:06:30.950
Ultimately, test it and see
what works best for your site.

00:06:30.950 --> 00:06:33.360
The final element of
the page load gotchas

00:06:33.360 --> 00:06:35.250
is server side tweaks.

00:06:35.250 --> 00:06:37.920
Jumping straight in,
let's look at caching.

00:06:37.920 --> 00:06:40.880
When the browser makes a request
for a file from your server,

00:06:40.880 --> 00:06:44.640
it should always return a
cache control max age header.

00:06:44.640 --> 00:06:47.190
This is what tells the browser
to cache a file for how

00:06:47.190 --> 00:06:50.270
long, meaning the next time
a user visits your page

00:06:50.270 --> 00:06:53.000
and it needs a file, it doesn't
need to download it again.

00:06:53.000 --> 00:06:55.110
It's just good to
go from the cache.

00:06:55.110 --> 00:06:57.110
When it comes to caching,
there are a few things

00:06:57.110 --> 00:06:58.580
you need to ask yourself.

00:06:58.580 --> 00:07:01.140
First, how long can
I cache my files for?

00:07:01.140 --> 00:07:03.240
Second, how do I
actually get my server

00:07:03.240 --> 00:07:06.140
to return this cache
control max age header?

00:07:06.140 --> 00:07:09.900
And thirdly, what do I do
when I need to change a file?

00:07:09.900 --> 00:07:11.650
Answering the first
question of how long

00:07:11.650 --> 00:07:13.550
do I cache my files
for, I personally

00:07:13.550 --> 00:07:17.600
found HTML5 Boilerplate to
be a good source of guidance.

00:07:17.600 --> 00:07:20.582
If you look at HTML5
Boilerplate's HD access file,

00:07:20.582 --> 00:07:22.040
there are a number
of caching rules

00:07:22.040 --> 00:07:25.620
to finding the caching period
depending on the type of file.

00:07:25.620 --> 00:07:26.850
Here's a snippet of the file.

00:07:26.850 --> 00:07:29.120
We've got CSS and
JavaScript cached

00:07:29.120 --> 00:07:31.820
for a year, images
cached for a month,

00:07:31.820 --> 00:07:33.950
and HTML isn't cached at all.

00:07:33.950 --> 00:07:36.210
Now, this is just a guideline.

00:07:36.210 --> 00:07:38.090
You may want to cache
your images for a year,

00:07:38.090 --> 00:07:41.584
you may want to cache your
HTML for 30 minutes to an hour,

00:07:41.584 --> 00:07:43.750
just so that any user hopping
backwards and forwards

00:07:43.750 --> 00:07:47.050
between pages gets
a smooth experience.

00:07:47.050 --> 00:07:48.840
If you're using Apache
to host your site,

00:07:48.840 --> 00:07:50.590
then you can just
use this HD access

00:07:50.590 --> 00:07:52.770
file to implement
the caching rules.

00:07:52.770 --> 00:07:54.910
If you're using a
different server,

00:07:54.910 --> 00:07:56.580
then check out the
documentation on how

00:07:56.580 --> 00:07:58.649
you can add these headers.

00:07:58.649 --> 00:08:00.190
Now, chances are
you're going to want

00:08:00.190 --> 00:08:03.260
to change some of these files
before the cache expires,

00:08:03.260 --> 00:08:05.310
in which case consider
adding a build step

00:08:05.310 --> 00:08:07.130
to revision your file names.

00:08:07.130 --> 00:08:08.580
This way, there
won't be any issue

00:08:08.580 --> 00:08:11.610
with older versions
of files being used.

00:08:11.610 --> 00:08:14.110
filerev is an example
task designed specifically

00:08:14.110 --> 00:08:16.960
for this use case, and can
even be used with other modules

00:08:16.960 --> 00:08:19.990
to replace file names
in your HTML and CSS

00:08:19.990 --> 00:08:22.770
so it's pointing to
the revision file.

00:08:22.770 --> 00:08:25.660
The final thing to enable
on your server is GZip.

00:08:25.660 --> 00:08:27.420
If you've not come
across this before,

00:08:27.420 --> 00:08:29.210
it's supported by all
browsers, and it's

00:08:29.210 --> 00:08:31.510
an incredibly powerful
tool for compressing

00:08:31.510 --> 00:08:33.960
any text based assets.

00:08:33.960 --> 00:08:35.470
There are some
huge wins to be had

00:08:35.470 --> 00:08:38.669
with compression
rates up to 80%.

00:08:38.669 --> 00:08:41.566
Now, how you enable this
will depend on your server,

00:08:41.566 --> 00:08:43.690
but the gains are big for
a relatively small amount

00:08:43.690 --> 00:08:44.500
of work.

00:08:44.500 --> 00:08:47.450
I recently got this
working on my Nginx server,

00:08:47.450 --> 00:08:50.410
and it was as simple
as just adding GZip on.

00:08:50.410 --> 00:08:52.680
So those are the three
most common problem areas

00:08:52.680 --> 00:08:55.130
raised by PageSpeed Insights.

00:08:55.130 --> 00:08:58.200
Build times fixes, page
structure, and server side

00:08:58.200 --> 00:08:59.434
tweaks.

00:08:59.434 --> 00:09:01.850
Now, these aren't the only
tools to help with performance,

00:09:01.850 --> 00:09:03.975
so if you're looking for
more tips, or just curious

00:09:03.975 --> 00:09:06.262
about what other tools
exist, I strongly

00:09:06.262 --> 00:09:08.470
recommend checking out this
blog post by Addy Osmani.

00:09:12.150 --> 00:09:13.780
It includes many of
the tools mentioned

00:09:13.780 --> 00:09:16.500
in this video in
much more detail.

00:09:16.500 --> 00:09:18.660
Hopefully this has
been a useful insight

00:09:18.660 --> 00:09:21.690
into how you can improve your
site's load time performance.

00:09:21.690 --> 00:09:24.700
I challenge you to get 100
points on your PageSpeed score.

00:09:24.700 --> 00:09:26.210
Cheers.

