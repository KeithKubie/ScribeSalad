WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:03.070
Let's start by revisiting the illustration we used in the threads and

00:00:03.070 --> 00:00:05.020
concurrency lecture.

00:00:05.020 --> 00:00:10.041
There we explained that threads can be supported at user level, at kernel level,

00:00:10.041 --> 00:00:10.640
or both.

00:00:10.640 --> 00:00:13.160
Supporting threads at the kernel level means,

00:00:13.160 --> 00:00:16.270
that the OS kernel itself is multithreaded.

00:00:16.270 --> 00:00:20.142
To do this, the OS kernel maintains some abstraction, for

00:00:20.142 --> 00:00:23.320
our threads of data structure to represent threads, and

00:00:23.320 --> 00:00:27.150
it performs all of the operations like synchronizations, scheduling,

00:00:27.150 --> 00:00:31.630
et cetera, in order to allow these threads to share the physical resources.

00:00:31.630 --> 00:00:36.120
Supporting threads at the user level means that there is a user-level library,

00:00:36.120 --> 00:00:38.550
that is linked with the application, and

00:00:38.550 --> 00:00:42.760
this library provides all of the management in the runtime support for threads.

00:00:42.760 --> 00:00:46.210
It will support a data structure that's needed to implement the thread

00:00:46.210 --> 00:00:50.740
abstraction and provide all the scheduling synchronization and other mechanisms,

00:00:50.740 --> 00:00:54.360
that are needed to make resource management decisions for these threads.

00:00:54.360 --> 00:00:58.270
In fact, different processes may use entirely different user-level

00:00:58.270 --> 00:01:01.530
libraries that have different ways to

00:01:01.530 --> 00:01:05.890
represent threads that support the different scheduling mechanisms, et cetera.

00:01:05.890 --> 00:01:08.050
We also discussed several mechanisms,

00:01:08.050 --> 00:01:12.160
how user-level threads can be mapped onto the underlying kernel level-threads,

00:01:12.160 --> 00:01:16.310
and we said these include a one-to-one, many-to-one, and a many-to-many mapping,

00:01:16.310 --> 00:01:19.790
and briefly touched upon some of the pros and cons of each approach.

00:01:19.790 --> 00:01:22.120
Now, we'll take a more detailed look at about,

00:01:22.120 --> 00:01:26.790
what exactly is needed to describe kernel versus user-level threads, and

00:01:26.790 --> 00:01:28.900
to support all of these types of models.

