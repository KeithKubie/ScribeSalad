WEBVTT
Kind: captions
Language: en

00:00:00.910 --> 00:00:03.280
BRAD ABRAMS: Good afternoon
and welcome to Google I/O.

00:00:03.280 --> 00:00:05.100
Thank you for coming
to this session.

00:00:05.100 --> 00:00:06.170
I'm Brad Abrams.

00:00:06.170 --> 00:00:08.212
I'm a product manager on
the Cloud platform team.

00:00:08.212 --> 00:00:09.878
MANDY WAITE: And
hello, I'm Mandy Waite.

00:00:09.878 --> 00:00:12.390
I'm a developer advocate on
the Google Cloud Platform.

00:00:12.390 --> 00:00:13.973
BRAD ABRAMS: And in
this session we're

00:00:13.973 --> 00:00:17.030
going to give you a whirlwind
tour of the Google Cloud

00:00:17.030 --> 00:00:18.310
platform.

00:00:18.310 --> 00:00:21.280
What I love about
I/O is we get to talk

00:00:21.280 --> 00:00:24.710
about what's next, not
just what's next for Google

00:00:24.710 --> 00:00:28.250
or what's next for the cloud
but what's next for all of us

00:00:28.250 --> 00:00:29.980
as developers.

00:00:29.980 --> 00:00:32.830
And as software
developers we know

00:00:32.830 --> 00:00:35.420
that we are in one of
the most high stakes,

00:00:35.420 --> 00:00:39.410
critical, creative
industries on the planet.

00:00:39.410 --> 00:00:43.240
And it's that way because
our users, the people that

00:00:43.240 --> 00:00:45.910
use our apps, continually
push us to build

00:00:45.910 --> 00:00:48.580
better software faster.

00:00:48.580 --> 00:00:52.190
Users want our applications
to be highly available

00:00:52.190 --> 00:00:56.030
24 hours a day, seven
days a week in every geo

00:00:56.030 --> 00:00:57.430
around the world.

00:00:57.430 --> 00:00:59.570
And those users demand
our applications

00:00:59.570 --> 00:01:01.720
be fast and responsive.

00:01:01.720 --> 00:01:05.590
Our studies have shown
latency on the orders of tens

00:01:05.590 --> 00:01:08.060
or hundreds of milliseconds
can have a significant drop

00:01:08.060 --> 00:01:10.680
off rate engagement
on your apps.

00:01:10.680 --> 00:01:12.830
And increasingly
users want to be

00:01:12.830 --> 00:01:15.820
delighted by having you
predict and suggest,

00:01:15.820 --> 00:01:20.390
to offer them things before
they even know they need them.

00:01:20.390 --> 00:01:24.030
So whether you're at an
enterprise or you're at a start

00:01:24.030 --> 00:01:28.030
up or you work at Google, we
all face the same challenge.

00:01:28.030 --> 00:01:32.550
And that is we want to build
better software faster.

00:01:32.550 --> 00:01:34.270
So let's talk about
how the Google Cloud

00:01:34.270 --> 00:01:38.250
platform helps you build
that better software faster.

00:01:38.250 --> 00:01:42.290
With GCP we're building a
different kind of cloud.

00:01:42.290 --> 00:01:45.460
Some of you may be familiar
with the status quo clouds

00:01:45.460 --> 00:01:49.010
and they share a lot in
common with co load data

00:01:49.010 --> 00:01:50.820
centers of the past.

00:01:50.820 --> 00:01:53.980
Now you may not be physically
plugging in network cables

00:01:53.980 --> 00:01:56.780
or switching out hard
drives, but you're still

00:01:56.780 --> 00:02:00.210
doing a lot of unproductive
infrastructure work.

00:02:00.210 --> 00:02:02.010
And that's time that
can be better spent

00:02:02.010 --> 00:02:05.930
focused on your application,
the unique value you have.

00:02:05.930 --> 00:02:09.270
Google used to have a data
center cloud like that

00:02:09.270 --> 00:02:12.130
internally up until
about 10 years ago.

00:02:12.130 --> 00:02:14.420
And user demand really spiked.

00:02:14.420 --> 00:02:17.060
Our usage really started
spiking on all our apps.

00:02:17.060 --> 00:02:19.160
And we realized we
just couldn't keep up

00:02:19.160 --> 00:02:22.010
with the scale with that
kind of data center.

00:02:22.010 --> 00:02:28.360
And so today if you're a Googler
on Gmail or YouTube or apps,

00:02:28.360 --> 00:02:30.080
if you're a developer
on one of those,

00:02:30.080 --> 00:02:32.900
you may never write
a deployment script

00:02:32.900 --> 00:02:37.570
but your application may
be deployed over hundreds

00:02:37.570 --> 00:02:40.130
or even thousands of instances.

00:02:40.130 --> 00:02:43.700
You may never spin up an
instance or even SSH into one,

00:02:43.700 --> 00:02:48.290
but your application is
used by tens of millions

00:02:48.290 --> 00:02:50.230
of people every day.

00:02:50.230 --> 00:02:54.190
And you may never
write a failover code,

00:02:54.190 --> 00:02:57.340
but your applications are some
of the most highly reliable

00:02:57.340 --> 00:02:59.710
applications on the internet.

00:02:59.710 --> 00:03:01.720
And that's because
we've rethought

00:03:01.720 --> 00:03:04.700
what it is to be a cloud
from top to bottom.

00:03:04.700 --> 00:03:07.620
And it's that journey that
we're on with the Google Cloud

00:03:07.620 --> 00:03:10.500
platform, to have
you be able to use

00:03:10.500 --> 00:03:14.120
the exact same infrastructure,
tools, and services that we

00:03:14.120 --> 00:03:15.580
use internally.

00:03:15.580 --> 00:03:18.550
And that's what we think of
as this third wave of cloud

00:03:18.550 --> 00:03:19.720
computing.

00:03:19.720 --> 00:03:23.030
And to help you get a sense,
a really hands on sense

00:03:23.030 --> 00:03:25.420
as developers, there's
nothing like code

00:03:25.420 --> 00:03:26.990
to help you understand.

00:03:26.990 --> 00:03:28.960
So in order to do
that, Mandy and I

00:03:28.960 --> 00:03:31.830
over the course of this talk
are going to build an app.

00:03:31.830 --> 00:03:36.110
And it's the next hit mobile
game called photo scavenger

00:03:36.110 --> 00:03:36.610
hunt.

00:03:36.610 --> 00:03:38.770
And we're launching
it here at this event.

00:03:38.770 --> 00:03:42.340
You can go to the Play Store
right now and download it.

00:03:42.340 --> 00:03:46.070
The way it works is
you're given four clues.

00:03:46.070 --> 00:03:47.980
And then you go out
into the real world

00:03:47.980 --> 00:03:51.500
and take pictures of items
to try to match those clues.

00:03:51.500 --> 00:03:53.090
And when you match
the clues, you

00:03:53.090 --> 00:03:56.470
get the point
associated with it.

00:03:56.470 --> 00:03:59.980
The architecture of the
application is very simple.

00:03:59.980 --> 00:04:04.050
There is an Android and
iOS client application.

00:04:04.050 --> 00:04:06.270
Now there's a lot
of talks here at I/O

00:04:06.270 --> 00:04:08.020
talking about the
client apps so we're not

00:04:08.020 --> 00:04:10.103
going to spend a lot of
time there although that's

00:04:10.103 --> 00:04:10.980
very important.

00:04:10.980 --> 00:04:14.430
What we're going to do is focus
on the server side of the app.

00:04:14.430 --> 00:04:17.420
So the server side of the
app is on App Engine app

00:04:17.420 --> 00:04:18.950
written in Node.js.

00:04:18.950 --> 00:04:21.339
How many Node.js
developers do we have here?

00:04:21.339 --> 00:04:21.990
OK.

00:04:21.990 --> 00:04:24.190
A good number.

00:04:24.190 --> 00:04:27.070
Most of what we're showing works
in many, many other languages,

00:04:27.070 --> 00:04:29.340
PHP Python, Ruby, Java.

00:04:29.340 --> 00:04:30.880
So if you use other
languages, you

00:04:30.880 --> 00:04:34.200
can apply almost
everything we're showing.

00:04:34.200 --> 00:04:37.870
The photo gets uploaded and
it's stored in cloud storage.

00:04:37.870 --> 00:04:40.900
And that's our object storage,
highly reliable, highly

00:04:40.900 --> 00:04:43.370
available object storage.

00:04:43.370 --> 00:04:47.550
We store a state about the
game in Google's NoSQL database

00:04:47.550 --> 00:04:49.340
called Cloud Datastore.

00:04:49.340 --> 00:04:53.410
And then we do the smarts of
it with a vision API where we

00:04:53.410 --> 00:04:55.830
apply the same sort of machine.

00:04:55.830 --> 00:04:58.560
We use exactly the same machine
learning technology that's

00:04:58.560 --> 00:05:02.130
used in the Google Photos app is
available to you as a developer

00:05:02.130 --> 00:05:03.940
and we're going to show
you how that works.

00:05:03.940 --> 00:05:06.190
So I think the best way
though to understand this app

00:05:06.190 --> 00:05:07.500
is actually to see a demo.

00:05:07.500 --> 00:05:11.685
So could we switch over to the
demo machine, to the phone.

00:05:11.685 --> 00:05:12.560
And are we seeing it?

00:05:12.560 --> 00:05:13.010
Yeah.

00:05:13.010 --> 00:05:13.530
No.

00:05:13.530 --> 00:05:15.710
Can we switch to this?

00:05:15.710 --> 00:05:16.210
OK.

00:05:16.210 --> 00:05:20.200
He's working on
switching to this.

00:05:20.200 --> 00:05:22.330
So while we're waiting
how many of you

00:05:22.330 --> 00:05:25.149
are already using Google
Cloud Platform, App Engine

00:05:25.149 --> 00:05:26.440
or Compute Engine or something?

00:05:26.440 --> 00:05:27.080
OK, good.

00:05:27.080 --> 00:05:32.357
And how many are using
another cloud provider?

00:05:32.357 --> 00:05:33.190
A god number of you.

00:05:33.190 --> 00:05:34.320
So thank you for coming.

00:05:34.320 --> 00:05:36.070
I appreciate you
being open minded

00:05:36.070 --> 00:05:37.690
about your cloud choices.

00:05:37.690 --> 00:05:41.720
Certainly the future I think
is in heterogeneous clouds.

00:05:41.720 --> 00:05:43.842
And hopefully you'll
see that in this demo.

00:05:43.842 --> 00:05:44.800
MANDY WAITE: All right.

00:05:44.800 --> 00:05:46.589
For this demo you have
to download the app

00:05:46.589 --> 00:05:47.380
and do it yourself.

00:05:47.380 --> 00:05:48.130
BRAD ABRAMS: Yeah.

00:05:48.130 --> 00:05:50.182
What you need to do
is download the app.

00:05:50.182 --> 00:05:51.890
Should we press on
and come back to this?

00:05:56.890 --> 00:05:58.230
Give him one more minute.

00:06:02.890 --> 00:06:04.220
Why don't we-- Yeah.

00:06:04.220 --> 00:06:05.720
So he's going to
keep working on it.

00:06:05.720 --> 00:06:08.820
While he's working
on it, Mandy is

00:06:08.820 --> 00:06:11.970
going to show how to actually
build the application.

00:06:11.970 --> 00:06:14.599
And we'll pop back
and show you the app.

00:06:14.599 --> 00:06:15.390
MANDY WAITE: Right.

00:06:15.390 --> 00:06:15.889
OK.

00:06:15.889 --> 00:06:18.400
So I need to get in here.

00:06:18.400 --> 00:06:18.900
OK.

00:06:18.900 --> 00:06:22.922
So you haven't seen the app
but it is really impressive

00:06:22.922 --> 00:06:24.630
unless you've downloaded
it in which case

00:06:24.630 --> 00:06:25.790
you're playing with it now.

00:06:25.790 --> 00:06:26.900
And it's pretty awesome.

00:06:26.900 --> 00:06:29.246
So we're going to
use-- well, we're

00:06:29.246 --> 00:06:30.870
going to do some live
coding basically.

00:06:30.870 --> 00:06:32.203
I'm going to use snippets today.

00:06:32.203 --> 00:06:34.480
I'm going to cheat because
my cutting and pasting is

00:06:34.480 --> 00:06:35.470
really laborious.

00:06:35.470 --> 00:06:36.654
Also my typing is terrible.

00:06:36.654 --> 00:06:38.445
So I just make mistakes
all over the place.

00:06:38.445 --> 00:06:40.030
And it wouldn't work.

00:06:40.030 --> 00:06:42.340
How many of you are using
Sublime Text as a developer

00:06:42.340 --> 00:06:43.040
tool?

00:06:43.040 --> 00:06:43.540
Fantastic.

00:06:43.540 --> 00:06:45.540
How many of you are using Atom?

00:06:45.540 --> 00:06:46.040
OK.

00:06:46.040 --> 00:06:46.320
All right.

00:06:46.320 --> 00:06:46.820
Good.

00:06:46.820 --> 00:06:49.090
So all you see is Atom--
I'm using Sublime again now.

00:06:49.090 --> 00:06:49.590
OK.

00:06:49.590 --> 00:06:51.970
So here we have a very
simple Node.js application.

00:06:51.970 --> 00:06:54.570
We have all of our
requires at the top here.

00:06:54.570 --> 00:06:56.477
We won't get too much
detail about those.

00:06:56.477 --> 00:06:58.810
What we care about is doing
development the Google Cloud

00:06:58.810 --> 00:07:00.566
platform.

00:07:00.566 --> 00:07:01.430
BRAD ABRAMS: Oh.

00:07:01.430 --> 00:07:02.560
Should we do the app real quick?

00:07:02.560 --> 00:07:02.810
MANDY WAITE: Oh, yeah.

00:07:02.810 --> 00:07:02.870
OK.

00:07:02.870 --> 00:07:03.170
Let's go for it.

00:07:03.170 --> 00:07:03.530
BRAD ABRAMS: OK.

00:07:03.530 --> 00:07:03.830
Great.

00:07:03.830 --> 00:07:06.040
And then we'll switch
right back to her honestly.

00:07:06.040 --> 00:07:06.540
OK.

00:07:06.540 --> 00:07:07.340
So as I mentioned--

00:07:07.340 --> 00:07:09.280
MANDY WAITE: He's always
stealing my thunder.

00:07:09.280 --> 00:07:11.940
BRAD ABRAMS: You get four clues.

00:07:11.940 --> 00:07:15.150
In this case, person-- sorry
let me leave it-- person,

00:07:15.150 --> 00:07:16.600
wedding ring, flower, dog.

00:07:16.600 --> 00:07:19.950
Does anybody have a dog I
could take a-- a flower?

00:07:19.950 --> 00:07:20.450
OK.

00:07:20.450 --> 00:07:21.860
How about I use person.

00:07:21.860 --> 00:07:24.890
So I'm just going
to click on Person.

00:07:24.890 --> 00:07:25.430
OK.

00:07:25.430 --> 00:07:25.700
Sorry.

00:07:25.700 --> 00:07:27.116
I'm just going to
click on Person.

00:07:30.790 --> 00:07:31.290
OK.

00:07:31.290 --> 00:07:32.670
Just one sec.

00:07:32.670 --> 00:07:35.240
Oh, and now the app-- OK.

00:07:35.240 --> 00:07:35.910
OK.

00:07:35.910 --> 00:07:37.900
MANDY WAITE: You
wrote it by the way.

00:07:37.900 --> 00:07:39.200
BRAD ABRAMS: OK.

00:07:39.200 --> 00:07:41.660
MANDY WAITE: It wasn't me.

00:07:41.660 --> 00:07:42.976
BRAD ABRAMS: Unbelievable.

00:07:42.976 --> 00:07:44.600
OK we're going to
come back to the demo

00:07:44.600 --> 00:07:45.760
for a different reason.

00:07:45.760 --> 00:07:46.820
OK, press on.

00:07:46.820 --> 00:07:48.840
MANDY WAITE: All right.

00:07:48.840 --> 00:07:49.340
OK.

00:07:49.340 --> 00:07:51.445
BRAD ABRAMS: I'll fix it.

00:07:51.445 --> 00:07:53.201
MANDY WAITE: Do you
want to use mine?

00:07:53.201 --> 00:07:53.950
BRAD ABRAMS: Yeah.

00:07:53.950 --> 00:07:55.640
We can do yours if you want.

00:07:55.640 --> 00:07:56.851
MANDY WAITE: Yeah, OK.

00:07:56.851 --> 00:07:59.100
BRAD ABRAMS: So that's the
benefit of Android and iOS.

00:08:02.320 --> 00:08:02.820
No?

00:08:05.370 --> 00:08:06.550
MANDY WAITE: Wow.

00:08:06.550 --> 00:08:08.100
Technical difficulties
everywhere.

00:08:08.100 --> 00:08:08.570
BRAD ABRAMS: OK.

00:08:08.570 --> 00:08:09.110
MANDY WAITE: Here you go.

00:08:09.110 --> 00:08:09.776
BRAD ABRAMS: OK.

00:08:12.060 --> 00:08:17.180
So I'm going to click on Person
and take my selfie on stage

00:08:17.180 --> 00:08:17.810
here.

00:08:17.810 --> 00:08:19.430
So I switch the camera.

00:08:19.430 --> 00:08:21.857
And I take my selfie.

00:08:21.857 --> 00:08:22.940
And then I'll put it here.

00:08:22.940 --> 00:08:26.020
And what's happening now,
hopefully you can see.

00:08:26.020 --> 00:08:28.860
MANDY WAITE: I'm sorry about
my fingerprints on my phone.

00:08:28.860 --> 00:08:30.360
BRAD ABRAMS: So
what we're doing now

00:08:30.360 --> 00:08:32.440
is sending that--
I hope this works.

00:08:32.440 --> 00:08:35.179
Yeah-- oh, goodness.

00:08:35.179 --> 00:08:38.021
MANDY WAITE: Hey, you guys
have killed the internet.

00:08:38.021 --> 00:08:39.770
BRAD ABRAMS: We send
it off to the server.

00:08:39.770 --> 00:08:42.720
And then it comes back and tells
us what it found in the image.

00:08:42.720 --> 00:08:43.700
Let's just press on.

00:08:43.700 --> 00:08:44.260
MANDY WAITE: Let's talk
about how it--I'm sorry.

00:08:44.260 --> 00:08:45.490
BRAD ABRAMS: Switch
back to the--

00:08:45.490 --> 00:08:46.330
MANDY WAITE: All right.

00:08:46.330 --> 00:08:46.829
OK.

00:08:46.829 --> 00:08:50.140
So we have some
Node.js code here.

00:08:50.140 --> 00:08:52.080
And what we're going
to do is use something

00:08:52.080 --> 00:08:54.620
called the Google Cloud
client library which

00:08:54.620 --> 00:08:56.550
gives very, very simple
programmatic access

00:08:56.550 --> 00:08:58.760
to pretty much everything
in Google Cloud Platform.

00:08:58.760 --> 00:08:59.260
OK.

00:08:59.260 --> 00:09:01.220
And it's really,
really easy to use.

00:09:01.220 --> 00:09:05.710
These libraries are handcrafted
and they are very idiomatic.

00:09:05.710 --> 00:09:08.030
We had them for seven languages.

00:09:08.030 --> 00:09:10.204
And when you
develop with them it

00:09:10.204 --> 00:09:12.620
feels very, very comfortable
and very, very second nature.

00:09:12.620 --> 00:09:14.578
Very similar to what you
would do normally when

00:09:14.578 --> 00:09:16.960
you're developing in that
language which isn't always

00:09:16.960 --> 00:09:18.109
the case with API's.

00:09:18.109 --> 00:09:20.150
The first thing we need
to do is actually-- well,

00:09:20.150 --> 00:09:23.470
we've actually installed this
client library called Gcloud,

00:09:23.470 --> 00:09:25.730
MPM installed Gcloud before.

00:09:25.730 --> 00:09:30.530
And now what we need to
do is require Gcloud.

00:09:30.530 --> 00:09:31.990
And that gives us
back an object we

00:09:31.990 --> 00:09:35.270
can use to access all Google
Cloud Platform services.

00:09:35.270 --> 00:09:37.910
We've also done some credential
munge in here as well.

00:09:37.910 --> 00:09:39.570
We've set an
environment variable

00:09:39.570 --> 00:09:43.320
with a key file, a file that
contains some JSON code, that

00:09:43.320 --> 00:09:44.720
contains our credentials.

00:09:44.720 --> 00:09:46.940
So it's very much,
very, very much

00:09:46.940 --> 00:09:48.800
to simplify the
authentication process.

00:09:48.800 --> 00:09:51.160
The authentication
process is really simple.

00:09:51.160 --> 00:09:53.370
So once we have this
object now what we can do

00:09:53.370 --> 00:09:56.120
is go to step two.

00:09:56.120 --> 00:09:59.040
And we can get a reference
to Google Cloud Storage.

00:09:59.040 --> 00:10:01.630
I'm now going to use Google
Cloud Storage to basically

00:10:01.630 --> 00:10:04.830
when the apps working,
which it will be soon,

00:10:04.830 --> 00:10:07.600
basically to upload
images from the phone,

00:10:07.600 --> 00:10:10.260
from the application,
and so that we can then

00:10:10.260 --> 00:10:12.590
pass it on to the
cloud vision API which

00:10:12.590 --> 00:10:13.850
will do the processing.

00:10:13.850 --> 00:10:16.320
For this we call
Gcloud.storage and we

00:10:16.320 --> 00:10:17.940
get a reference
back to an object

00:10:17.940 --> 00:10:21.550
called storage which we
can use to make calls on.

00:10:21.550 --> 00:10:23.450
We also access a bucket.

00:10:23.450 --> 00:10:25.070
This is a cloud storage.

00:10:25.070 --> 00:10:27.650
It's an object based
store for large amounts

00:10:27.650 --> 00:10:29.330
of unstructured data.

00:10:29.330 --> 00:10:31.200
And to access it
we need buckets.

00:10:31.200 --> 00:10:33.110
So we have a bucket
we created earlier.

00:10:33.110 --> 00:10:34.980
I'm passing this
[INAUDIBLE] environment.

00:10:34.980 --> 00:10:38.180
We have an environment
variable called Upload bucket.

00:10:38.180 --> 00:10:40.700
So we called it storage.bucket
and then the name

00:10:40.700 --> 00:10:42.830
and we get back a
reference for our bucket.

00:10:42.830 --> 00:10:45.940
In step three, which is
the first part of our API,

00:10:45.940 --> 00:10:47.980
so we've only got a
simple part of the API

00:10:47.980 --> 00:10:49.730
that the application calls here.

00:10:49.730 --> 00:10:53.090
And this is the API
image and the game ID.

00:10:53.090 --> 00:10:56.710
The game ID we will use
randomly throughout the talk.

00:10:56.710 --> 00:10:58.402
But that's the API
we're going to call.

00:10:58.402 --> 00:11:00.110
And we're going to be
basically uploading

00:11:00.110 --> 00:11:01.460
the photograph to that.

00:11:01.460 --> 00:11:03.130
A picture that is
taken from the app.

00:11:03.130 --> 00:11:06.920
And to do that, to get
started, very simply,

00:11:06.920 --> 00:11:10.270
in this case very simply
we'd like to type step three.

00:11:10.270 --> 00:11:12.370
We type in a few lines of code.

00:11:12.370 --> 00:11:15.052
So basically we create
a storage path variable,

00:11:15.052 --> 00:11:16.510
which is the path
where we're going

00:11:16.510 --> 00:11:18.300
to store the uploaded image.

00:11:18.300 --> 00:11:20.620
And then we create an
options object which

00:11:20.620 --> 00:11:22.670
contains that information.

00:11:22.670 --> 00:11:25.200
Then we can just simply
call bucket upload.

00:11:25.200 --> 00:11:26.850
The path of the file
has been uploaded.

00:11:26.850 --> 00:11:30.990
We're using Malta in Node.js
which does the uploads for us.

00:11:30.990 --> 00:11:33.580
And then we passing in the
options object and the callback

00:11:33.580 --> 00:11:34.700
function.

00:11:34.700 --> 00:11:36.648
Ultimately, double
upload the file.

00:11:36.648 --> 00:11:38.606
If there is a problem,
we'll get the error back

00:11:38.606 --> 00:11:41.226
and we can express that
back to the console.

00:11:41.226 --> 00:11:42.600
Or in this case,
we're just going

00:11:42.600 --> 00:11:45.250
to say cancel.log
uploaded to cloud storage.

00:11:45.250 --> 00:11:50.130
And so I'm going to save that
and then go to my thumbnail

00:11:50.130 --> 00:11:50.640
here.

00:11:50.640 --> 00:11:59.160
And I'm going to run
nodemon app-demo.js.

00:11:59.160 --> 00:12:01.396
And so basically we're
listening for changes

00:12:01.396 --> 00:12:03.750
to the application
using nodemon.

00:12:03.750 --> 00:12:07.850
What we can do now is send an
image very much in the same way

00:12:07.850 --> 00:12:10.270
as the application would do.

00:12:10.270 --> 00:12:12.070
In this case we
have-- we decided

00:12:12.070 --> 00:12:14.930
to go for something, an image
that is fairly aggressive.

00:12:14.930 --> 00:12:16.280
You know what raccoons are like?

00:12:16.280 --> 00:12:17.700
We don't have
raccoons in the UK.

00:12:17.700 --> 00:12:18.620
We have them here.

00:12:18.620 --> 00:12:20.430
And they're quite scary, right?

00:12:20.430 --> 00:12:21.450
Raccons, yeah?

00:12:21.450 --> 00:12:21.960
Apparently.

00:12:21.960 --> 00:12:24.090
So what we need is
a raccoon picture.

00:12:24.090 --> 00:12:24.710
Right.

00:12:24.710 --> 00:12:27.980
OK, so let's use a raccoon
picture which is this one.

00:12:27.980 --> 00:12:30.550
I think it's a little bit scary.

00:12:30.550 --> 00:12:31.190
OK.

00:12:31.190 --> 00:12:31.690
All right.

00:12:31.690 --> 00:12:33.680
So OK maybe not so scary right.

00:12:33.680 --> 00:12:34.840
OK.

00:12:34.840 --> 00:12:35.690
So we use this one.

00:12:35.690 --> 00:12:38.720
And what we do is we'll emit
a very simple curl command

00:12:38.720 --> 00:12:41.640
to our endpoint locally.

00:12:41.640 --> 00:12:43.630
And we'll send this now.

00:12:43.630 --> 00:12:45.880
And nothing much is going
to happen because we're just

00:12:45.880 --> 00:12:46.820
uploading a file.

00:12:46.820 --> 00:12:48.470
I didn't actually
close the response.

00:12:48.470 --> 00:12:50.160
But we do get our
message printed.

00:12:50.160 --> 00:12:51.390
Uploaded to cloud storage.

00:12:51.390 --> 00:12:52.790
Ah, file object.

00:12:52.790 --> 00:12:55.090
I should have actually
done a string on that.

00:12:55.090 --> 00:12:56.460
OK, so we've upload a file.

00:12:56.460 --> 00:12:58.610
Very, very simple.

00:12:58.610 --> 00:13:01.720
The next thing we want to do
is call a cloud vision API.

00:13:01.720 --> 00:13:06.190
And to do that, we need access
to the cloud vision API.

00:13:06.190 --> 00:13:08.120
So the cloud vision API
effectively allows us

00:13:08.120 --> 00:13:11.140
to process images, send
images into the cloud.

00:13:11.140 --> 00:13:13.630
And then get information
about what the cloud vision

00:13:13.630 --> 00:13:15.880
API effectively sees
within that image.

00:13:15.880 --> 00:13:20.970
And that's effectively
content detection and also

00:13:20.970 --> 00:13:22.170
classification.

00:13:22.170 --> 00:13:24.540
We can look for things like
labels, common objects.

00:13:24.540 --> 00:13:26.250
We can do landmarks.

00:13:26.250 --> 00:13:27.940
We can also see our text.

00:13:27.940 --> 00:13:30.020
We can also detect facial
expressions as well.

00:13:30.020 --> 00:13:31.837
And if you go to
the cloud sandbox,

00:13:31.837 --> 00:13:33.920
we have an emoto booth
that will take your picture

00:13:33.920 --> 00:13:36.930
and detect whether you're
happy or sad, which

00:13:36.930 --> 00:13:38.410
most people do already anyway.

00:13:38.410 --> 00:13:41.450
So I'm not sure what
the big deal is.

00:13:41.450 --> 00:13:44.110
So what we need
to do here is get

00:13:44.110 --> 00:13:45.420
a reference for our vision API.

00:13:45.420 --> 00:13:48.480
Oh, also we can detect
inappropriate content

00:13:48.480 --> 00:13:49.730
that has been sent up as well.

00:13:49.730 --> 00:13:52.770
So anybody sends brute
pictures, we can detect that.

00:13:52.770 --> 00:13:53.560
OK.

00:13:53.560 --> 00:13:56.330
So for this we need a
reference to the vision API.

00:13:56.330 --> 00:14:00.600
And that's step four.

00:14:00.600 --> 00:14:02.770
Gcloud.vision gives us a
reference back to an object

00:14:02.770 --> 00:14:03.560
we can use.

00:14:03.560 --> 00:14:07.210
And then we do step five which
is-- oh, surprise, surprise,

00:14:07.210 --> 00:14:09.040
step five.

00:14:09.040 --> 00:14:10.830
And here we have some more code.

00:14:10.830 --> 00:14:13.760
We set an arguments
object, a JSON object.

00:14:13.760 --> 00:14:15.730
And we're going to use
two specific features.

00:14:15.730 --> 00:14:19.070
One is the label detection,
feature of cloud vision API.

00:14:19.070 --> 00:14:21.210
The other is the
safesearch detection.

00:14:21.210 --> 00:14:23.590
Now the label dissection
detects things within the image,

00:14:23.590 --> 00:14:26.200
like raccoons, angry raccoons.

00:14:26.200 --> 00:14:28.380
We get the facial expressions
on the raccoon right?

00:14:28.380 --> 00:14:31.216
BRAD ABRAMS: We should do that.

00:14:31.216 --> 00:14:32.590
MANDY WAITE:
Safesearch detection

00:14:32.590 --> 00:14:34.090
will look for
inappropriate content,

00:14:34.090 --> 00:14:35.720
OK, and flag it if it's there.

00:14:35.720 --> 00:14:39.520
And the image source is
just the path to the file.

00:14:39.520 --> 00:14:42.250
This is the file that's stored
in Google Cloud Storage.

00:14:42.250 --> 00:14:46.700
And we use Gs:// as the currency
for internal URLs within Google

00:14:46.700 --> 00:14:47.890
Cloud Platform.

00:14:47.890 --> 00:14:50.790
And now [INAUDIBLE] is simply
called vision.annotate.

00:14:50.790 --> 00:14:52.950
And we pass in the
arguments objects.

00:14:52.950 --> 00:14:54.900
We get back a results object.

00:14:54.900 --> 00:14:59.329
And then, if we have a problem,
we echo to the console.

00:14:59.329 --> 00:15:00.120
We do some cleanup.

00:15:00.120 --> 00:15:03.710
We have some cheating code here,
label cleanup, which actually

00:15:03.710 --> 00:15:05.730
does some cleanup on response.

00:15:05.730 --> 00:15:07.400
But we basically
have a labels object

00:15:07.400 --> 00:15:10.530
which we can stringify and
return back to the user.

00:15:10.530 --> 00:15:11.030
OK.

00:15:11.030 --> 00:15:12.640
So let's try it out.

00:15:12.640 --> 00:15:16.150
And what we can do is
go back to our console.

00:15:16.150 --> 00:15:18.130
And update available,
that's very nice.

00:15:18.130 --> 00:15:19.380
I did that in the wrong place.

00:15:19.380 --> 00:15:20.505
BRAD ABRAMS: Do that later.

00:15:20.505 --> 00:15:22.630
MANDY WAITE: I'm meant
to do that in here.

00:15:22.630 --> 00:15:25.440
It's very easy to panic when
you're doing demos right.

00:15:25.440 --> 00:15:25.940
OK.

00:15:25.940 --> 00:15:27.870
So we have a nodemon
running again.

00:15:27.870 --> 00:15:30.970
And we can send our angry
raccoon picture again.

00:15:33.690 --> 00:15:37.050
In this case, we get back a
response from the vision API.

00:15:37.050 --> 00:15:40.430
And let's compare that
to the photograph.

00:15:40.430 --> 00:15:42.890
So we have a mammal,
96% confidence,

00:15:42.890 --> 00:15:48.100
and 95% chance it's an animal,
and 94% chance he's a raccoon.

00:15:48.100 --> 00:15:50.550
And down at the bottom
here, it's very unlikely

00:15:50.550 --> 00:15:52.040
to be adult content.

00:15:52.040 --> 00:15:53.700
Although this could
be considered adult

00:15:53.700 --> 00:15:55.160
content to raccoons.

00:15:55.160 --> 00:15:55.735
I'm not sure.

00:15:55.735 --> 00:15:56.860
BRAD ABRAMS: It's possible.

00:15:56.860 --> 00:15:58.379
MANDY WAITE: Also
medical violence.

00:15:58.379 --> 00:16:00.170
So it can detect that
kind of thing for us.

00:16:00.170 --> 00:16:02.190
We're not acting on that
information, but we could do.

00:16:02.190 --> 00:16:03.595
Do you act on it in the code?

00:16:03.595 --> 00:16:03.980
BRAD ABRAMS: I don't.

00:16:03.980 --> 00:16:04.570
I do actually.

00:16:04.570 --> 00:16:05.110
I do.

00:16:05.110 --> 00:16:05.380
MANDY WAITE: Good.

00:16:05.380 --> 00:16:05.920
OK.

00:16:05.920 --> 00:16:06.280
So--

00:16:06.280 --> 00:16:07.404
BRAD ABRAMS: Test me on it.

00:16:07.404 --> 00:16:10.394
MANDY WAITE: The last part
is to store the labels.

00:16:10.394 --> 00:16:12.060
Now the application
is quite interesting

00:16:12.060 --> 00:16:15.010
that it learns basically from
the images that you upload.

00:16:15.010 --> 00:16:17.320
So every time you upload an
image, it detects labels.

00:16:17.320 --> 00:16:18.680
And we store the labels.

00:16:18.680 --> 00:16:21.890
And then we use those
labels to seed the game.

00:16:21.890 --> 00:16:24.790
So the things you see, the four
options you see in the game,

00:16:24.790 --> 00:16:26.720
are labels from
images that people

00:16:26.720 --> 00:16:27.849
have uploaded beforehand.

00:16:27.849 --> 00:16:29.640
So it's quite interesting
the way it works.

00:16:29.640 --> 00:16:31.500
It's very, very dynamic.

00:16:31.500 --> 00:16:33.280
So in order to
store labels we need

00:16:33.280 --> 00:16:35.180
to store them somewhere safe.

00:16:35.180 --> 00:16:37.777
Maybe another SQL,
non relational

00:16:37.777 --> 00:16:39.360
store that scales
massively, something

00:16:39.360 --> 00:16:41.430
like Google Cloud Datastore.

00:16:41.430 --> 00:16:48.660
And to access that we
just do Gcloud.datastore

00:16:48.660 --> 00:16:50.410
to get a reference
back to the data store.

00:16:50.410 --> 00:16:55.270
And down here we can very
simply make course of that.

00:16:55.270 --> 00:16:59.610
We iterate across the results
object here using a map.

00:16:59.610 --> 00:17:01.170
We pull out a label.

00:17:01.170 --> 00:17:02.830
Then we create a key.

00:17:02.830 --> 00:17:05.970
And we look into the datastore
to say do you have this key?

00:17:05.970 --> 00:17:08.345
If we get a response back
saying, yes, we will increment.

00:17:08.345 --> 00:17:10.011
I haven't actually
implemented the code.

00:17:10.011 --> 00:17:12.150
We will increment the
counts on that label.

00:17:12.150 --> 00:17:13.640
If we don't get
the label back, we

00:17:13.640 --> 00:17:15.980
will create a label
with a count of one

00:17:15.980 --> 00:17:17.640
and push it back
to the data store.

00:17:17.640 --> 00:17:20.300
And so that way the game
is constantly learning.

00:17:20.300 --> 00:17:23.920
And last thing we do is
very quickly because Brad

00:17:23.920 --> 00:17:25.660
is getting impatient on me.

00:17:25.660 --> 00:17:26.960
We'll quickly run that again.

00:17:26.960 --> 00:17:30.060
We'll save the updates and we'll
run the curl command again.

00:17:33.020 --> 00:17:36.460
And this time we get the
same results back but now

00:17:36.460 --> 00:17:39.580
we can see here we've actually
got the labels pulled out

00:17:39.580 --> 00:17:40.580
from the response.

00:17:40.580 --> 00:17:42.790
We've now stored those directly.

00:17:42.790 --> 00:17:46.880
And that's pretty much it
for-- that's what you'll do now

00:17:46.880 --> 00:17:48.620
is deploy the
application to Google App

00:17:48.620 --> 00:17:50.730
Engine for the next section.

00:17:50.730 --> 00:17:54.470
And for this I'm going to use
a tool called cloud STK which

00:17:54.470 --> 00:17:56.195
gives a command called Gcloud.

00:17:56.195 --> 00:17:58.570
And this is the one stop shop
for everything Google Cloud

00:17:58.570 --> 00:18:01.920
Platform when it comes
to managing stuff.

00:18:01.920 --> 00:18:11.550
And I'm going to type in preview
app deploy minus minus version

00:18:11.550 --> 00:18:12.782
alpha.

00:18:12.782 --> 00:18:15.240
We have many version but we're
using two specific versions.

00:18:15.240 --> 00:18:17.649
Mine is alpha 1 and
we're going to say--

00:18:17.649 --> 00:18:18.690
BRAD ABRAMS: [INAUDIBLE].

00:18:18.690 --> 00:18:19.270
MANDY WAITE: That's it, right?

00:18:19.270 --> 00:18:20.230
OK.

00:18:20.230 --> 00:18:22.280
So now we're going to push
this Google App engine

00:18:22.280 --> 00:18:23.530
and Brad's going to take over.

00:18:23.530 --> 00:18:24.488
BRAD ABRAMS: All right.

00:18:24.488 --> 00:18:26.570
So let's switch back to
the demo one last time.

00:18:26.570 --> 00:18:27.150
MANDY WAITE: All right.

00:18:27.150 --> 00:18:27.649
Yeah.

00:18:27.649 --> 00:18:29.190
BRAD ABRAMS: Back to the screen.

00:18:29.190 --> 00:18:29.850
Do we have it?

00:18:29.850 --> 00:18:30.350
OK.

00:18:30.350 --> 00:18:31.250
So there we are.

00:18:31.250 --> 00:18:33.520
You can see we the iOS working.

00:18:33.520 --> 00:18:35.810
It knew with confidence
that I'm a person.

00:18:35.810 --> 00:18:38.030
So 95% confident
that I'm a person.

00:18:38.030 --> 00:18:40.020
So it uses the same
calls she just did.

00:18:40.020 --> 00:18:41.710
And then it also
found that I'm a man

00:18:41.710 --> 00:18:43.400
and apparently it
likes my glasses.

00:18:43.400 --> 00:18:44.781
So there you go.

00:18:44.781 --> 00:18:45.280
OK.

00:18:45.280 --> 00:18:48.010
So let's switch back
to the demo machine.

00:18:48.010 --> 00:18:52.670
And we have this application
deployed in production now.

00:18:52.670 --> 00:18:54.740
And you're ready
to start thinking

00:18:54.740 --> 00:18:57.030
about where you're going
to deploy your application.

00:18:57.030 --> 00:19:02.170
So as a developer
you're ready to think

00:19:02.170 --> 00:19:03.540
about where to deploy the app.

00:19:03.540 --> 00:19:05.230
So we've already--
let me just jump

00:19:05.230 --> 00:19:07.230
into the demo-- we've
already shown deploying it

00:19:07.230 --> 00:19:07.980
to App Engine.

00:19:07.980 --> 00:19:13.490
And in fact earlier today Mandy
deployed that to App Engine

00:19:13.490 --> 00:19:15.290
and we ran a little
load test on it.

00:19:15.290 --> 00:19:18.980
So all you do with App Engine
is write your source code,

00:19:18.980 --> 00:19:22.320
deploy it up, and then we handle
all-- it's a complete no ops

00:19:22.320 --> 00:19:22.820
environment.

00:19:22.820 --> 00:19:25.920
So you don't have to do
anything around configuring

00:19:25.920 --> 00:19:28.820
the database, managing
the servers, or anything.

00:19:28.820 --> 00:19:35.320
You can see we've spiked up to
30 or 40 queries per second.

00:19:35.320 --> 00:19:39.340
And what's nice about that is
we scaled up and we scaled down.

00:19:39.340 --> 00:19:41.990
So you didn't have to think
about how many machines should

00:19:41.990 --> 00:19:42.570
I provision?

00:19:42.570 --> 00:19:44.110
How much is this going to cost?

00:19:44.110 --> 00:19:45.310
What should my load be?

00:19:45.310 --> 00:19:47.870
As the load came up,
more machines came up.

00:19:47.870 --> 00:19:50.630
And when the load went away,
the machines went away.

00:19:50.630 --> 00:19:52.000
So that's quite nice.

00:19:52.000 --> 00:19:54.230
Another really cool
feature of App Engine

00:19:54.230 --> 00:19:55.950
is App Engine versions.

00:19:55.950 --> 00:19:59.560
So what I'll mention
in a minute is

00:19:59.560 --> 00:20:02.420
we did this alpha-- I
wrote an alpha 2 version.

00:20:02.420 --> 00:20:05.030
You saw the version
Mandy wrote with alpha 1.

00:20:05.030 --> 00:20:08.060
I wrote an alpha 2 version
but Mandy's version

00:20:08.060 --> 00:20:09.480
is getting all the traffic.

00:20:09.480 --> 00:20:12.940
So if I wanted to, I could
migrate traffic to this.

00:20:12.940 --> 00:20:14.630
I could split traffic to it.

00:20:14.630 --> 00:20:19.070
And the way that works is
I can just scale it up.

00:20:19.070 --> 00:20:21.850
So if I'm doing an A/B
test or actually the way

00:20:21.850 --> 00:20:24.700
we deploy every binary
at Google in our servers

00:20:24.700 --> 00:20:26.160
is a staged rollout.

00:20:26.160 --> 00:20:28.820
Start at 1% go to 10%.

00:20:28.820 --> 00:20:33.050
And that makes it make
sure it's a safe roll out.

00:20:33.050 --> 00:20:35.370
And then the last
thing to show here

00:20:35.370 --> 00:20:40.130
is in container, the
Google container registry.

00:20:40.130 --> 00:20:43.540
So when Mandy deployed
that app what happened is

00:20:43.540 --> 00:20:47.260
we actually pushed the
source code up to the server.

00:20:47.260 --> 00:20:50.470
And then on a clean
hermetic environment

00:20:50.470 --> 00:20:54.350
we built the node.js app
into a container image.

00:20:54.350 --> 00:20:57.230
And then deployed that to the
Google container registry.

00:20:57.230 --> 00:20:59.940
And then App Engine grabbed it
out of the container registry

00:20:59.940 --> 00:21:02.270
and deployed it on to that
whole fleet of machines.

00:21:02.270 --> 00:21:03.980
We had, I think,
30 or 40 machines

00:21:03.980 --> 00:21:06.370
going during that load test.

00:21:06.370 --> 00:21:08.910
And so that means that this
container image is available

00:21:08.910 --> 00:21:12.760
right here in the container
registry right now.

00:21:12.760 --> 00:21:15.160
MANDY WAITE: That seems a
little bit like magic to me.

00:21:15.160 --> 00:21:17.430
BRAD ABRAMS: Oh, App
Engine is magical.

00:21:17.430 --> 00:21:19.210
As a developer, you
focus on your code

00:21:19.210 --> 00:21:20.790
and Google handles the rest.

00:21:20.790 --> 00:21:20.910
MANDY WAITE: OK.

00:21:20.910 --> 00:21:23.170
Well, sometimes I want to have a
little bit more control though.

00:21:23.170 --> 00:21:25.240
I want to actually control
more this and the way--

00:21:25.240 --> 00:21:26.220
BRAD ABRAMS: You
don't like the magic?

00:21:26.220 --> 00:21:27.650
MANDY WAITE: I want to scale
it manually and all that stuff.

00:21:27.650 --> 00:21:29.130
I want to take care
of it myself, right.

00:21:29.130 --> 00:21:29.830
BRAD ABRAMS: I see.

00:21:29.830 --> 00:21:30.170
I see.

00:21:30.170 --> 00:21:32.120
I know a lot of developers
want more control.

00:21:32.120 --> 00:21:33.980
And so that's why
we have Kubernetes.

00:21:33.980 --> 00:21:35.730
I see you're wearing
a Kubernetes T-shirt.

00:21:35.730 --> 00:21:35.840
MANDY WAITE: You're right.

00:21:35.840 --> 00:21:37.812
How many of you are
using Kubernetes?

00:21:37.812 --> 00:21:39.520
How many of you have
heard of Kubernetes?

00:21:39.520 --> 00:21:39.840
BRAD ABRAMS: OK.

00:21:39.840 --> 00:21:40.400
All right.

00:21:40.400 --> 00:21:40.899
A few.

00:21:40.899 --> 00:21:42.982
MANDY WAITE: Kubernetes
is the next big thing.

00:21:42.982 --> 00:21:44.580
All right.

00:21:44.580 --> 00:21:45.080
All right.

00:21:45.080 --> 00:21:45.580
OK.

00:21:45.580 --> 00:21:48.060
So what we have,
we have an image.

00:21:48.060 --> 00:21:50.030
The image we just uploaded.

00:21:50.030 --> 00:21:55.042
And default alpha 1
is our app inversion.

00:21:55.042 --> 00:21:56.750
And here it is in the
container registry.

00:21:56.750 --> 00:21:58.490
So this is a private registry.

00:21:58.490 --> 00:22:01.370
That's Google Cloud Platform
to your project specifically.

00:22:01.370 --> 00:22:03.570
And what we have is
many different images.

00:22:03.570 --> 00:22:06.320
The latest version is this
one, deployed one minute ago.

00:22:06.320 --> 00:22:09.330
And that was created effectively
by the container builder.

00:22:09.330 --> 00:22:11.370
And if we select
that, what we see here

00:22:11.370 --> 00:22:13.580
is a show pull command.

00:22:13.580 --> 00:22:16.710
This means we can pull the
image down from the registry

00:22:16.710 --> 00:22:18.942
just like you would
do for [INAUDIBLE]

00:22:18.942 --> 00:22:21.350
if you were developing
a [INAUDIBLE].

00:22:21.350 --> 00:22:24.230
And what we can do is we
can click on this show pull

00:22:24.230 --> 00:22:25.060
command.

00:22:25.060 --> 00:22:27.480
And the pull command effectively
will pull it down locally

00:22:27.480 --> 00:22:29.100
where we can run it.

00:22:29.100 --> 00:22:32.015
In this case it's Gcloud
docker pull instead of docker

00:22:32.015 --> 00:22:34.400
pull because we need to
do some authentication.

00:22:34.400 --> 00:22:35.880
This is a secure registry.

00:22:35.880 --> 00:22:37.870
So we don't want
anybody accessing it.

00:22:37.870 --> 00:22:40.600
So in this case we do
Gcloud to do the all for us.

00:22:40.600 --> 00:22:42.990
We also have this thing
called Running Cloud Shell.

00:22:42.990 --> 00:22:44.590
Running Cloud
Shell will start up

00:22:44.590 --> 00:22:47.090
a shell in the cloud
in your browser

00:22:47.090 --> 00:22:49.720
effectively that's associated
with your Google Cloud Platform

00:22:49.720 --> 00:22:51.010
credentials.

00:22:51.010 --> 00:22:53.236
From this you can access
all of your projects,

00:22:53.236 --> 00:22:55.360
all of the things you have
running in your projects

00:22:55.360 --> 00:22:58.870
and a complete tool
chain including docker.

00:22:58.870 --> 00:23:03.770
And what we have also deployed
is a Kubernetes cluster.

00:23:03.770 --> 00:23:06.070
And I'll mention
Kubernetes in a second.

00:23:06.070 --> 00:23:09.160
So here we have Gcloud
docker pull and then a path

00:23:09.160 --> 00:23:11.709
to the image that was
uploaded by my deployment.

00:23:11.709 --> 00:23:12.500
And I can just do--

00:23:12.500 --> 00:23:13.476
BRAD ABRAMS: Ask for just-- OK.

00:23:13.476 --> 00:23:13.976
Sorry.

00:23:13.976 --> 00:23:14.830
Go ahead.

00:23:14.830 --> 00:23:17.950
MANDY WAITE: And I can just hit
that and it would now deploy.

00:23:17.950 --> 00:23:18.970
So what is Kubernetes?

00:23:18.970 --> 00:23:23.240
Kubernetes effectively allows us
to run our containers anywhere.

00:23:23.240 --> 00:23:23.740
OK.

00:23:23.740 --> 00:23:25.160
And containers are
hard to manage.

00:23:25.160 --> 00:23:27.824
Once you finally get
what containers are,

00:23:27.824 --> 00:23:29.240
you start containerized
everything

00:23:29.240 --> 00:23:31.080
and you end up
with a lot of them.

00:23:31.080 --> 00:23:34.830
And you need some way to
manage all of that complexity.

00:23:34.830 --> 00:23:36.620
And Kubernetes does
all of that for you.

00:23:36.620 --> 00:23:39.040
So effectively you'll
create container images

00:23:39.040 --> 00:23:41.476
and you'll say so
Kubernetes run this for me.

00:23:41.476 --> 00:23:42.600
And it will run it for you.

00:23:42.600 --> 00:23:44.070
And that's what we're
going to do now.

00:23:44.070 --> 00:23:46.370
We have a container cluster
which we created earlier.

00:23:46.370 --> 00:23:48.040
It's called main cluster.

00:23:48.040 --> 00:23:52.471
It has four nodes and four
CPUs, one node per machine.

00:23:52.471 --> 00:23:52.970
OK.

00:23:52.970 --> 00:23:56.140
So can you see that?

00:23:56.140 --> 00:23:57.720
Is it too small or too big?

00:23:57.720 --> 00:23:59.580
Too big-- can't be too big.

00:23:59.580 --> 00:24:00.080
OK.

00:24:00.080 --> 00:24:02.330
So in order to use
this, we're not

00:24:02.330 --> 00:24:04.080
going to go into the
details of Kubernetes

00:24:04.080 --> 00:24:05.870
but there is a talk on Friday.

00:24:05.870 --> 00:24:07.790
Carter Morgan is
going to be talking

00:24:07.790 --> 00:24:09.575
about Kubernetes in detail.

00:24:09.575 --> 00:24:11.075
And you should go
along to that talk

00:24:11.075 --> 00:24:12.570
if you want to find out more.

00:24:12.570 --> 00:24:17.090
But in this case, we
just do control-r.

00:24:17.090 --> 00:24:21.424
We're going to use
to history because we

00:24:21.424 --> 00:24:23.590
had this thing called a
deployment which effectively

00:24:23.590 --> 00:24:25.470
manages our running
containers for us.

00:24:25.470 --> 00:24:29.140
And now we're going to do a run.

00:24:29.140 --> 00:24:32.810
kubeccl run and then
name of the application

00:24:32.810 --> 00:24:35.170
which is PSH and then
the path of the image.

00:24:35.170 --> 00:24:37.240
And also a port
number in this case.

00:24:37.240 --> 00:24:39.525
Kubeccl is the command
for all the operations

00:24:39.525 --> 00:24:41.761
within Kubernetes
on the command line.

00:24:41.761 --> 00:24:42.260
OK.

00:24:42.260 --> 00:24:45.190
So we hit that and we've
created a deployment.

00:24:45.190 --> 00:24:47.440
And now we go back up and
do get deployments again.

00:24:47.440 --> 00:24:49.120
We see we have one created.

00:24:49.120 --> 00:24:52.270
So this is basically creating
one instance of that image

00:24:52.270 --> 00:24:54.450
that we created from the
App Engine deployment.

00:24:54.450 --> 00:24:57.060
So this is the App
Engine app that we built.

00:24:57.060 --> 00:24:58.620
Now we're running on Kubernetes.

00:24:58.620 --> 00:25:00.040
It's not ready yet.

00:25:00.040 --> 00:25:01.830
It says zero available.

00:25:01.830 --> 00:25:02.740
OK.

00:25:02.740 --> 00:25:04.140
And now it's got one available.

00:25:04.140 --> 00:25:06.720
So that container is
now up and running.

00:25:06.720 --> 00:25:10.070
So what we can do now
is-- that's great.

00:25:10.070 --> 00:25:12.690
We had that container running
in our cluster somewhere.

00:25:12.690 --> 00:25:14.080
We don't really
know where it is.

00:25:14.080 --> 00:25:15.080
We have four machines.

00:25:15.080 --> 00:25:17.950
We've let's Kubernetes
take care of that for us.

00:25:17.950 --> 00:25:20.950
What we need to do now is we
have to access it as a service.

00:25:20.950 --> 00:25:24.390
And we have a very simple
construct called a service

00:25:24.390 --> 00:25:26.750
to give us that access.

00:25:26.750 --> 00:25:30.040
And we can do control-r expose.

00:25:30.040 --> 00:25:33.520
And this command
will effectively

00:25:33.520 --> 00:25:37.540
expose that running
container to other services

00:25:37.540 --> 00:25:38.640
within our cluster.

00:25:38.640 --> 00:25:40.670
It will give us
internal IP address.

00:25:40.670 --> 00:25:42.460
Minus, minus type
equals load balance

00:25:42.460 --> 00:25:45.120
that will effectively give us
an external IP address as well.

00:25:45.120 --> 00:25:47.050
And we're going to
get that shortly.

00:25:47.050 --> 00:25:54.580
So if I do kubeccl
get services, I

00:25:54.580 --> 00:25:56.990
will see that I have a
service now called PSH

00:25:56.990 --> 00:25:58.800
with an internal IP address.

00:25:58.800 --> 00:26:01.120
Now any other services
I have could access that

00:26:01.120 --> 00:26:03.550
via that stable IP address.

00:26:03.550 --> 00:26:06.607
But ultimately we will
want an external IP address

00:26:06.607 --> 00:26:08.690
that we can connect to
with our curl command we've

00:26:08.690 --> 00:26:09.960
been using for demos.

00:26:09.960 --> 00:26:13.455
And we'll wait for
that for a second.

00:26:13.455 --> 00:26:14.830
And what we'll do
in the meantime

00:26:14.830 --> 00:26:16.380
is scale the application.

00:26:16.380 --> 00:26:18.830
So we have one instance
running currently.

00:26:18.830 --> 00:26:20.560
Say we want 20
instances of that.

00:26:20.560 --> 00:26:23.490
We want to load balance
traffic across 20 instances

00:26:23.490 --> 00:26:25.282
of that application
that we're running.

00:26:25.282 --> 00:26:26.490
We could do that very easily.

00:26:26.490 --> 00:26:28.560
And we use a scale
command for that.

00:26:28.560 --> 00:26:31.230
So the kubeccl scale
deployment which

00:26:31.230 --> 00:26:33.400
is the thing that manages
the containers for us

00:26:33.400 --> 00:26:37.120
and psh the name minus
minus replicas equals 20.

00:26:37.120 --> 00:26:38.260
We hit that.

00:26:38.260 --> 00:26:40.533
And now we can do get
deployments and we will see--

00:26:40.533 --> 00:26:42.408
and we're not going to
wait for it because we

00:26:42.408 --> 00:26:45.130
are in a rush--
it's now spitting up

00:26:45.130 --> 00:26:47.610
20 instances of that
running container.

00:26:47.610 --> 00:26:48.620
We got six so far.

00:26:48.620 --> 00:26:51.240
We won't wait for it, but we are
interested in the external IP

00:26:51.240 --> 00:26:52.420
address.

00:26:52.420 --> 00:26:55.495
So we will go back to our
services, get services.

00:26:55.495 --> 00:26:58.140
And now we can see we have
an external IP address.

00:26:58.140 --> 00:26:58.850
OK.

00:26:58.850 --> 00:27:00.660
So we have a cheat
sheet here which

00:27:00.660 --> 00:27:03.420
makes life a little easier.

00:27:03.420 --> 00:27:07.870
And my curl command that we've
used for the raccoon image

00:27:07.870 --> 00:27:09.240
before is here.

00:27:11.850 --> 00:27:13.660
And what we need to
do is copy and paste

00:27:13.660 --> 00:27:17.930
in the IP address of the
service in Kubernetes.

00:27:17.930 --> 00:27:20.280
Get back here so
we can paste it.

00:27:20.280 --> 00:27:25.420
Lots of network latency and now
we can curl our raccoon image

00:27:25.420 --> 00:27:25.920
back up.

00:27:28.570 --> 00:27:30.890
The end point here we
have 42 as the game

00:27:30.890 --> 00:27:34.030
ID effectively, that
last part of the URL.

00:27:34.030 --> 00:27:36.649
And we see the results back
exactly the same as before.

00:27:36.649 --> 00:27:38.690
BRAD ABRAMS: So I think
what Mandy-- what we just

00:27:38.690 --> 00:27:42.400
showed you is that you can build
a standard Node.js application

00:27:42.400 --> 00:27:43.730
using Google services.

00:27:43.730 --> 00:27:45.780
We deployed that to
App Engine and it just

00:27:45.780 --> 00:27:47.310
handles everything for us.

00:27:47.310 --> 00:27:50.220
If you want more control, you
take that exact same container

00:27:50.220 --> 00:27:53.650
image and run it with
Kubernetes also on GCE.

00:27:53.650 --> 00:27:54.370
So--

00:27:54.370 --> 00:27:54.600
MANDY WAITE: Yeah.

00:27:54.600 --> 00:27:55.099
Exactly.

00:27:55.099 --> 00:27:57.280
You could also run it
somewhere else, right.

00:27:57.280 --> 00:27:58.030
BRAD ABRAMS: Yeah.

00:27:58.030 --> 00:27:59.780
So that's very
portable, isn't it?

00:27:59.780 --> 00:28:02.169
From one Google thing to
another Google thing, right.

00:28:02.169 --> 00:28:02.960
It's very portable.

00:28:02.960 --> 00:28:04.376
MANDY WAITE: That's
very portable.

00:28:04.376 --> 00:28:05.947
What more do you want right?

00:28:05.947 --> 00:28:08.280
BRAD ABRAMS: So actually I
was talking to people earlier

00:28:08.280 --> 00:28:12.080
and I heard somebody mention
there's this small bookseller

00:28:12.080 --> 00:28:14.330
in Seattle that has a cloud.

00:28:14.330 --> 00:28:16.070
You might have heard of them.

00:28:16.070 --> 00:28:18.140
So let's switch over and
show that real quick.

00:28:18.140 --> 00:28:22.900
So AWS, Amazon Web
Services, has a cloud.

00:28:22.900 --> 00:28:25.340
So what I've done is
spin up a micro instance,

00:28:25.340 --> 00:28:29.020
we don't need to
give them much money.

00:28:29.020 --> 00:28:32.800
And let's see if we can get
that exact same container image

00:28:32.800 --> 00:28:34.930
running in that micro instance.

00:28:34.930 --> 00:28:39.560
So what I'm going to do
is SSH into that machine

00:28:39.560 --> 00:28:42.182
and hopefully I can connect.

00:28:42.182 --> 00:28:43.765
MANDY WAITE: The
network is dead, bro.

00:28:43.765 --> 00:28:45.400
BRAD ABRAMS: Oh, network is fun.

00:28:45.400 --> 00:28:45.900
OK.

00:28:45.900 --> 00:28:46.460
MANDY WAITE: Let's move on.

00:28:46.460 --> 00:28:47.126
BRAD ABRAMS: OK.

00:28:47.126 --> 00:28:49.590
So I can connect
into this machine.

00:28:49.590 --> 00:28:55.680
And what I'm going to do is I'm
just going to run it in docker.

00:28:55.680 --> 00:28:59.160
So nothing is a
running right now.

00:28:59.160 --> 00:29:05.925
So what I can do is I'm going to
use this docker run-- actually

00:29:05.925 --> 00:29:08.260
I'm going to do a
doctor pull first.

00:29:08.260 --> 00:29:09.760
And so what this
is going to do is

00:29:09.760 --> 00:29:11.150
go out to the
container registry,

00:29:11.150 --> 00:29:14.490
download that image
onto this local machine.

00:29:14.490 --> 00:29:16.340
We're just wrapping
the doctor command

00:29:16.340 --> 00:29:17.934
with Gcloud for authentication.

00:29:17.934 --> 00:29:19.600
There's other ways
to do authentication,

00:29:19.600 --> 00:29:23.661
but it speaks the exact
same docker wire format.

00:29:23.661 --> 00:29:27.800
And then what we're going to
do is run that docker container

00:29:27.800 --> 00:29:29.470
right here on EC2 image.

00:29:29.470 --> 00:29:32.180
Now we could have shown
that with Kubernetes on EC2.

00:29:32.180 --> 00:29:34.090
That works beautifully as well.

00:29:34.090 --> 00:29:35.970
We could have also shown
it with [INAUDIBLE].

00:29:35.970 --> 00:29:36.636
That works well.

00:29:36.636 --> 00:29:38.790
We could show it with
EC2 container services.

00:29:38.790 --> 00:29:41.700
But we just wanted to shows
the very base level thing

00:29:41.700 --> 00:29:43.910
which is just a docker image.

00:29:43.910 --> 00:29:47.880
And so the to do that I'm
going to use this run command.

00:29:47.880 --> 00:29:50.350
And it's kind of
a little bit fancy

00:29:50.350 --> 00:29:53.050
because it has to handle the
authentication so it passes

00:29:53.050 --> 00:29:55.080
in authentication credentials.

00:29:55.080 --> 00:29:57.050
And there we have
it up and running.

00:29:57.050 --> 00:30:00.280
And now we're going to see if
that exact same instance will

00:30:00.280 --> 00:30:00.780
work.

00:30:00.780 --> 00:30:04.070
See I'm hitting it in EC2
from my local machine.

00:30:04.070 --> 00:30:06.310
And we should get the
identical results.

00:30:06.310 --> 00:30:07.270
So what do you think?

00:30:07.270 --> 00:30:08.720
Portability?

00:30:08.720 --> 00:30:09.220
No?

00:30:09.220 --> 00:30:10.630
OK.

00:30:10.630 --> 00:30:12.950
MANDY WAITE: It is the
same raccoon, believe me.

00:30:12.950 --> 00:30:13.750
BRAD ABRAMS: It's
the same raccoon.

00:30:13.750 --> 00:30:14.400
MANDY WAITE: It really is.

00:30:14.400 --> 00:30:15.066
BRAD ABRAMS: OK.

00:30:15.066 --> 00:30:16.720
So now what we
showed you is built.

00:30:16.720 --> 00:30:18.100
We built the app in NodeJS.

00:30:18.100 --> 00:30:21.200
We deployed it to App
Engine, to Kubernetes,

00:30:21.200 --> 00:30:23.490
and to an EC2 instance.

00:30:23.490 --> 00:30:27.200
Now let's talk about when your
application is in production.

00:30:27.200 --> 00:30:29.060
I mentioned earlier
that I worked

00:30:29.060 --> 00:30:31.230
on alpha 2 version
of the application

00:30:31.230 --> 00:30:32.700
I think is a lot better.

00:30:32.700 --> 00:30:35.700
But I'm hearing some
complaints from users

00:30:35.700 --> 00:30:38.190
that there may be some latency
issues with my version.

00:30:38.190 --> 00:30:40.720
And I don't think it's true
because I write good code.

00:30:40.720 --> 00:30:46.180
So we can go in and
there's a tool in the cloud

00:30:46.180 --> 00:30:48.510
platform called
Stackdriver Trace

00:30:48.510 --> 00:30:50.980
and it's an RPC
profiling utility.

00:30:50.980 --> 00:30:53.470
And it tells me where every
millisecond of latency

00:30:53.470 --> 00:30:55.280
in the application goes.

00:30:55.280 --> 00:30:57.580
So you can see
all these requests

00:30:57.580 --> 00:31:00.490
are happening live right now.

00:31:00.490 --> 00:31:02.510
I'm going to go in
though and drill in

00:31:02.510 --> 00:31:04.670
on one particular report.

00:31:04.670 --> 00:31:07.390
So trace has these
reports views that

00:31:07.390 --> 00:31:10.000
lets you compare two
different releases

00:31:10.000 --> 00:31:11.660
and look at their latency.

00:31:11.660 --> 00:31:15.620
So you can see the version
Mandy built, alpha 1 is in blue

00:31:15.620 --> 00:31:18.290
and the version I
built is in orange.

00:31:18.290 --> 00:31:21.510
And yes-- and then
the x-axis there

00:31:21.510 --> 00:31:23.020
is latency in milliseconds.

00:31:23.020 --> 00:31:26.270
And the y-axis is percent
of overall requests.

00:31:26.270 --> 00:31:29.250
And so what this is showing
is a standard distribution

00:31:29.250 --> 00:31:32.850
of latency as you would expect
from any distributed system.

00:31:32.850 --> 00:31:34.900
Mandy's is centered
around 1 second

00:31:34.900 --> 00:31:37.260
and mine is centered
around three seconds.

00:31:37.260 --> 00:31:38.900
So I think you might
be right Mandy.

00:31:38.900 --> 00:31:42.770
I think there may be something
wrong with my version.

00:31:42.770 --> 00:31:45.200
Let's drill in and see
if we can understand why.

00:31:45.200 --> 00:31:48.280
I'm going to look at a sample
trace from one of Mandy's.

00:31:48.280 --> 00:31:53.050
And you can see here a breakdown
for one particular request.

00:31:53.050 --> 00:31:56.340
It breaks down every millisecond
of where the time is spent.

00:31:56.340 --> 00:32:00.790
So there was a little bit of
time spent, 44 milliseconds,

00:32:00.790 --> 00:32:02.980
in metadata call to the GCVM.

00:32:02.980 --> 00:32:04.810
That's probably authentication.

00:32:04.810 --> 00:32:09.310
There was 50 milliseconds
sent in cloud storage.

00:32:09.310 --> 00:32:12.680
And then 242 milliseconds
in the vision API.

00:32:12.680 --> 00:32:14.320
So you can see that
this view gives you

00:32:14.320 --> 00:32:16.290
an intuitive understanding
of how much those

00:32:16.290 --> 00:32:19.200
RPCs you're doing cost.

00:32:19.200 --> 00:32:21.350
But overall that looks
really fast, Mandy.

00:32:21.350 --> 00:32:25.080
Let's go and take a look at one
of the slower ones from mine.

00:32:25.080 --> 00:32:27.080
And you can see
it's a lot longer

00:32:27.080 --> 00:32:29.070
and there's a lot more going on.

00:32:29.070 --> 00:32:32.350
In particular there's this do
questionable initialization

00:32:32.350 --> 00:32:33.440
method in there.

00:32:33.440 --> 00:32:35.237
MANDY WAITE: [INAUDIBLE].

00:32:35.237 --> 00:32:36.820
BRAD ABRAMS: That
may be questionable.

00:32:36.820 --> 00:32:39.530
And you can see what it's doing
is it's doing a bunch of chain

00:32:39.530 --> 00:32:43.190
calls to Twitter.

00:32:43.190 --> 00:32:46.930
So that's clearly a mistake
that I made in my app.

00:32:46.930 --> 00:32:50.980
Luckily as a developer this
tells me exactly where to go,

00:32:50.980 --> 00:32:53.980
scavenger hunt line 11.

00:32:53.980 --> 00:32:55.940
So that's right in here.

00:32:55.940 --> 00:32:59.120
And you can see sure enough
we're calling Twitter in here.

00:32:59.120 --> 00:33:01.844
Clearly something I should
work on right after this demo.

00:33:01.844 --> 00:33:03.260
MANDY WAITE: This
isn't in the app

00:33:03.260 --> 00:33:04.050
you're trying out by the way.

00:33:04.050 --> 00:33:05.175
BRAD ABRAMS: Yeah, exactly.

00:33:05.175 --> 00:33:06.630
That was not push to production.

00:33:06.630 --> 00:33:07.500
OK.

00:33:07.500 --> 00:33:10.290
The next tool I want to
show you is error reporting.

00:33:10.290 --> 00:33:14.170
So your many
distributed applications

00:33:14.170 --> 00:33:15.130
get lots of errors.

00:33:15.130 --> 00:33:17.050
But they get buried
into logs that you never

00:33:17.050 --> 00:33:19.110
look at and can't find easily.

00:33:19.110 --> 00:33:22.770
What Stackdriver error reporting
does is it looks in logs

00:33:22.770 --> 00:33:25.720
and it pulls out
the relevant errors.

00:33:25.720 --> 00:33:28.750
It's very intelligent about
the way it groups the errors.

00:33:28.750 --> 00:33:31.280
So it isolates them to ones
that have the same root

00:33:31.280 --> 00:33:33.310
cause associated with them.

00:33:33.310 --> 00:33:35.200
And then it gives
you a frequency,

00:33:35.200 --> 00:33:37.330
how often is that
happening, who's affected,

00:33:37.330 --> 00:33:40.130
to help you triage
what to go work on.

00:33:40.130 --> 00:33:43.110
So this one in
particular is type error,

00:33:43.110 --> 00:33:45.080
cannot read property
of type name.

00:33:45.080 --> 00:33:47.530
OK you can see it's
happening pretty regularly.

00:33:47.530 --> 00:33:49.590
And we actually see
a full call stack

00:33:49.590 --> 00:33:50.980
of where this is happening.

00:33:50.980 --> 00:33:54.990
In particular it's
happening in AppJS.

00:33:54.990 --> 00:33:59.930
And let me just start
real quick-- whoops.

00:33:59.930 --> 00:34:01.800
The debug script.

00:34:01.800 --> 00:34:04.730
I'm going to just throw some
sample load at it that will

00:34:04.730 --> 00:34:06.580
reproduce exactly this issue.

00:34:06.580 --> 00:34:09.620
So we've used this
tool now and we've

00:34:09.620 --> 00:34:11.100
isolated where the problem is.

00:34:11.100 --> 00:34:13.350
Now I could go back in the
source code and look at it.

00:34:13.350 --> 00:34:16.870
But I want to show
you another tool.

00:34:16.870 --> 00:34:20.949
The tool I want to show you
is the Stackdriver production

00:34:20.949 --> 00:34:22.191
debugger.

00:34:22.191 --> 00:34:24.440
So what we're going to do
with the production debugger

00:34:24.440 --> 00:34:26.790
is we're actually going to
look at the running state

00:34:26.790 --> 00:34:29.290
of the application
while it's running.

00:34:29.290 --> 00:34:33.590
And so you can upload
your source code just

00:34:33.590 --> 00:34:34.620
from your local machine.

00:34:34.620 --> 00:34:36.510
You can attach a git-repo to it.

00:34:36.510 --> 00:34:39.320
Or I'm using the free
private git repository

00:34:39.320 --> 00:34:40.880
that comes with
the cloud platform

00:34:40.880 --> 00:34:42.820
that you're welcome to use.

00:34:42.820 --> 00:34:45.820
And you can see we have a
few versions of this app.

00:34:45.820 --> 00:34:49.790
But I'm going to use the one
that I deployed as alpha 2.

00:34:49.790 --> 00:34:53.179
And as you recall
it was line 577.

00:34:53.179 --> 00:34:55.972
Right here is the
problem, line 577.

00:34:55.972 --> 00:34:57.430
There's a nice
little helpful hint.

00:34:57.430 --> 00:34:58.450
There's a bug here.

00:34:58.450 --> 00:34:59.550
MANDY WAITE: That's handy.

00:34:59.550 --> 00:35:01.440
BRAD ABRAMS: Doesn't
your code have that?

00:35:01.440 --> 00:35:04.690
And so what we're doing is
we're setting a watch point.

00:35:04.690 --> 00:35:07.400
This is a lot like a breakpoint
but it doesn't break.

00:35:07.400 --> 00:35:09.550
Imagine if you had a
debugger and you attached it

00:35:09.550 --> 00:35:10.510
to a running process.

00:35:10.510 --> 00:35:11.790
That wouldn't be good.

00:35:11.790 --> 00:35:16.030
This is something we use across
Google and many services.

00:35:16.030 --> 00:35:17.350
Oh, and I have to-- sorry.

00:35:17.350 --> 00:35:20.350
I have to actually
debug alpha 2.

00:35:20.350 --> 00:35:22.320
So let me just do
that real quick.

00:35:22.320 --> 00:35:24.660
I was debugging alpha 1
which is Mandy's version.

00:35:24.660 --> 00:35:27.310
As we know her version
is really good.

00:35:27.310 --> 00:35:30.000
It doesn't have
the problem in it.

00:35:30.000 --> 00:35:32.300
So let me grab that.

00:35:32.300 --> 00:35:32.800
OK.

00:35:32.800 --> 00:35:35.300
Let's try again.

00:35:35.300 --> 00:35:38.890
So you can't really
attach a real debugger.

00:35:38.890 --> 00:35:40.500
The alternative
is logging, right.

00:35:40.500 --> 00:35:42.235
Like if we were trying
to track this down

00:35:42.235 --> 00:35:44.750
we might say we don't
have enough logging here.

00:35:44.750 --> 00:35:46.790
We need to add more
logging, redeploy the app,

00:35:46.790 --> 00:35:48.990
and then spelunk the logs again.

00:35:48.990 --> 00:35:51.500
But that's also a very
difficult thing to do.

00:35:51.500 --> 00:35:53.820
So instead we can
just set a snapshot.

00:35:53.820 --> 00:35:57.960
And that pauses execution of the
program when that call happens

00:35:57.960 --> 00:36:00.620
and then returns the results
so we can take a look at it.

00:36:00.620 --> 00:36:03.840
So in this case the problem
seems to be line 57.

00:36:03.840 --> 00:36:08.490
It was something about can't
access name of undefined.

00:36:08.490 --> 00:36:11.600
So my guess is it's something
with this labels array.

00:36:11.600 --> 00:36:13.360
Maybe the labels
array is not there.

00:36:13.360 --> 00:36:14.450
But I can look at it.

00:36:14.450 --> 00:36:16.080
There's the labels array.

00:36:16.080 --> 00:36:17.960
It's got a name, flooring.

00:36:17.960 --> 00:36:20.280
And a confidence of 72.

00:36:20.280 --> 00:36:22.020
So that's not
really the problem.

00:36:22.020 --> 00:36:24.170
Can anybody spot
the problem yet?

00:36:24.170 --> 00:36:28.590
Maybe you need some more
help from the Cloud debugger.

00:36:28.590 --> 00:36:32.680
I am curious about what
this labels length is.

00:36:32.680 --> 00:36:35.582
I have a little bit of a theory
that what the problem might be.

00:36:35.582 --> 00:36:37.040
So I can send and
expression there.

00:36:37.040 --> 00:36:38.760
And just while we're
doing this I'll

00:36:38.760 --> 00:36:42.050
also take a look at
what that index is.

00:36:42.050 --> 00:36:44.840
So now it's going back
out to all those machines

00:36:44.840 --> 00:36:48.150
and it's waiting for the first
time that error happens again.

00:36:48.150 --> 00:36:52.290
And it's going to grab the stack
in locals and bring that back.

00:36:52.290 --> 00:36:54.460
And there you can
see the length is one

00:36:54.460 --> 00:36:55.900
and the sample index is four.

00:36:55.900 --> 00:36:58.286
Can anybody see what the
problem might be now?

00:36:58.286 --> 00:36:58.830
Come on.

00:36:58.830 --> 00:36:59.600
Somebody yell.

00:36:59.600 --> 00:37:00.184
AUDIENCE: Yes.

00:37:00.184 --> 00:37:01.600
BRAD ABRAMS: Yeah,
but what is it?

00:37:01.600 --> 00:37:02.510
What's the problem?

00:37:02.510 --> 00:37:03.440
AUDIENCE: [INAUDIBLE].

00:37:03.440 --> 00:37:04.190
BRAD ABRAMS: Yeah.

00:37:04.190 --> 00:37:06.040
Array index out of bounds.

00:37:06.040 --> 00:37:07.770
So imagine how
long it would have

00:37:07.770 --> 00:37:10.020
taken you to isolate
that without the help

00:37:10.020 --> 00:37:12.480
of this sort of tool.

00:37:12.480 --> 00:37:13.514
We can come back here.

00:37:13.514 --> 00:37:15.680
We can actually see there's
the problem right there.

00:37:15.680 --> 00:37:18.256
Sample index is set to four.

00:37:18.256 --> 00:37:20.130
MANDY WAITE: We can have
better code reviews.

00:37:20.130 --> 00:37:20.963
BRAD ABRAMS: Better.

00:37:20.963 --> 00:37:22.620
We should really do
some code reviews.

00:37:22.620 --> 00:37:23.720
Absolutely.

00:37:23.720 --> 00:37:24.260
OK.

00:37:24.260 --> 00:37:27.760
So I think we're ready to
switch back to slides now.

00:37:27.760 --> 00:37:29.450
Aren't we, Mandy?

00:37:29.450 --> 00:37:31.587
MANDY WAITE: I think we are.

00:37:31.587 --> 00:37:33.170
BRAD ABRAMS: I showed
you three tools.

00:37:33.170 --> 00:37:37.062
I showed you Stackdriver
trace for RPC profiling.

00:37:37.062 --> 00:37:38.520
Then I showed you
Stackdriver error

00:37:38.520 --> 00:37:40.690
reporting to help you
find out what's really

00:37:40.690 --> 00:37:41.880
going on in terms of errors.

00:37:41.880 --> 00:37:44.810
And then I showed you
the production debugger.

00:37:44.810 --> 00:37:46.984
And so I think Mandy
is going to wrap us up.

00:37:46.984 --> 00:37:47.650
MANDY WAITE: OK.

00:37:47.650 --> 00:37:49.330
So quick wrap up.

00:37:49.330 --> 00:37:51.260
We have a-- I like these things.

00:37:51.260 --> 00:37:53.500
I like walking around
and prowling stages.

00:37:53.500 --> 00:37:54.000
So, yeah.

00:37:54.000 --> 00:37:55.199
So we have a quick wrap up.

00:37:55.199 --> 00:37:57.490
We have lots more to come
when it comes to Google Cloud

00:37:57.490 --> 00:37:59.800
Platform here.

00:37:59.800 --> 00:38:02.150
What we've shown you today,
Brad has talked to you

00:38:02.150 --> 00:38:04.050
about how Google
Cloud Platform is

00:38:04.050 --> 00:38:07.252
a different kind of cloud, how
it differentiates effectively.

00:38:07.252 --> 00:38:08.710
We've also walk
through how you can

00:38:08.710 --> 00:38:10.168
have a productive
local development

00:38:10.168 --> 00:38:13.220
experience using the very
simple tooling that we have.

00:38:13.220 --> 00:38:17.090
All the things we ran locally
ran running standard tools.

00:38:17.090 --> 00:38:19.570
We were running nodemon
and MPM and such

00:38:19.570 --> 00:38:22.840
like to run our application
before we deployed.

00:38:22.840 --> 00:38:26.160
We also have demonstrated many
of the flexible deployment

00:38:26.160 --> 00:38:30.420
options basically coming
from having container images.

00:38:30.420 --> 00:38:33.050
We can deploy that same
container image to App Engine,

00:38:33.050 --> 00:38:37.850
to Kubernetes, or to anywhere
you run a container image.

00:38:37.850 --> 00:38:41.350
And also Brad finally shows
you how we can greatly

00:38:41.350 --> 00:38:43.390
reduce the time to fix.

00:38:43.390 --> 00:38:48.330
And there's a lot
more to it as well.

00:38:48.330 --> 00:38:52.140
Brad talked earlier about this
being the third wave of Cloud

00:38:52.140 --> 00:38:54.550
platforms, of cloud computing.

00:38:54.550 --> 00:38:56.410
And I think that's
never really been

00:38:56.410 --> 00:38:58.630
more apparent than when
it comes to data analytics

00:38:58.630 --> 00:38:59.890
in Google Cloud.

00:38:59.890 --> 00:39:02.070
We have a very, very
extensive portfolio

00:39:02.070 --> 00:39:04.690
of products when it
comes to data analytics.

00:39:04.690 --> 00:39:06.350
We wanted to
demonstrate them today

00:39:06.350 --> 00:39:09.170
in context of the application
but we just didn't have time.

00:39:09.170 --> 00:39:11.850
It turns out we have more
time than we thought.

00:39:11.850 --> 00:39:14.720
So what we decided
to do, and also we're

00:39:14.720 --> 00:39:17.600
really good at doing
this data analysis.

00:39:17.600 --> 00:39:19.540
We've been doing this
for a very long time.

00:39:19.540 --> 00:39:22.290
So we have an extensive
suite of tools you can use.

00:39:22.290 --> 00:39:24.100
And we have some talks
at Google I/O that

00:39:24.100 --> 00:39:25.470
will cover these in detail.

00:39:25.470 --> 00:39:28.060
So we have Kaz is
going to talk about how

00:39:28.060 --> 00:39:31.820
to build a smart RasPi Bot
using the cloud Vision API

00:39:31.820 --> 00:39:34.690
and also the speech
API later today.

00:39:34.690 --> 00:39:37.860
Also there's making sense
of IoT data with the Cloud

00:39:37.860 --> 00:39:41.460
from Ian Lewis
later on on Crater.

00:39:41.460 --> 00:39:44.490
And also tomorrow
in the afternoon

00:39:44.490 --> 00:39:46.410
we have Dominic
Preuss who's talking

00:39:46.410 --> 00:39:49.560
about scaling your data
from concept to petabytes.

00:39:49.560 --> 00:39:52.270
And also on Friday
we have Felipe Hoffa

00:39:52.270 --> 00:39:56.140
and Jordan Tigani who will be
talking about the election.

00:39:56.140 --> 00:39:58.490
And hopefully having
shown you how data

00:39:58.490 --> 00:40:00.400
can predict the
results of elections.

00:40:00.400 --> 00:40:02.300
I'm hoping they
won't be predicting

00:40:02.300 --> 00:40:04.090
the result of
election but they'll

00:40:04.090 --> 00:40:06.160
show you how you could
potentially do it.

00:40:06.160 --> 00:40:08.680
And ultimately that's it.

00:40:08.680 --> 00:40:11.974
But also we have another
session at 3:00 this afternoon.

00:40:11.974 --> 00:40:13.890
The next session we're
trying to link them all

00:40:13.890 --> 00:40:16.550
to drive you there so you
know where to go next.

00:40:16.550 --> 00:40:19.150
So for your next Google
Cloud Platform talk,

00:40:19.150 --> 00:40:23.372
go to Crater stage at
3:00 this afternoon.

00:40:23.372 --> 00:40:24.830
Aja Hammerly is
going to be talking

00:40:24.830 --> 00:40:26.847
about just enough
Stackdriver to sleep well

00:40:26.847 --> 00:40:29.180
at night which kind of ties
back into what Brad has just

00:40:29.180 --> 00:40:30.120
shown you.

00:40:30.120 --> 00:40:31.344
We also have code labs.

00:40:31.344 --> 00:40:33.010
So if you're interested
in getting hands

00:40:33.010 --> 00:40:35.176
on with all of this stuff
that we've shown you today

00:40:35.176 --> 00:40:36.610
including the
vision API, then you

00:40:36.610 --> 00:40:38.260
can go to the code labs area.

00:40:38.260 --> 00:40:40.010
We have 8 code labs.

00:40:40.010 --> 00:40:41.970
You can come and see us
on the cloud sandbox.

00:40:41.970 --> 00:40:44.750
We have the emoti booth
running which we first

00:40:44.750 --> 00:40:46.365
featured at GCP next.

00:40:46.365 --> 00:40:48.490
And that will effectively
detect facial expressions

00:40:48.490 --> 00:40:50.840
and is a really,
really cool demo.

00:40:50.840 --> 00:40:53.640
And also we had the
BigQuery query at demo

00:40:53.640 --> 00:40:54.830
which again is also cool.

00:40:54.830 --> 00:40:57.000
You can play with your
friends and it shows you

00:40:57.000 --> 00:40:58.810
how BigQuery works.

00:40:58.810 --> 00:41:00.500
And finally, we have
Cloud office hours.

00:41:00.500 --> 00:41:02.875
So we're probably going to
run out of time for questions.

00:41:02.875 --> 00:41:04.449
We should be able
to take a couple.

00:41:04.449 --> 00:41:05.990
But if you have any
burning questions

00:41:05.990 --> 00:41:10.520
or want to discuss anything
in depth with experts, Brad

00:41:10.520 --> 00:41:12.480
and I will also
be there as well,

00:41:12.480 --> 00:41:15.690
you can come to the Cloud
office hours today at 5 o'clock,

00:41:15.690 --> 00:41:19.492
tomorrow one o'clock,
and Friday at 9 AM.

00:41:19.492 --> 00:41:20.450
BRAD ABRAMS: All right.

00:41:20.450 --> 00:41:21.283
Thank you very much.

00:41:21.283 --> 00:41:22.620
Appreciate you coming.

00:41:22.620 --> 00:41:23.578
MANDY WAITE: Thank you.

00:41:23.578 --> 00:41:24.700
Cheers.

