WEBVTT
Kind: captions
Language: en

00:00:00.631 --> 00:00:02.630
JO-EL VAN BERGEN: Welcome
to Google I/O day two,

00:00:02.630 --> 00:00:04.838
and thanks for joining us
first thing in the morning.

00:00:04.838 --> 00:00:06.920
It's good to see
people out here.

00:00:06.920 --> 00:00:11.270
As you can see, we're talking
about the Drive login velocity

00:00:11.270 --> 00:00:14.150
across your platforms with
the Google+ Sign-In product.

00:00:14.150 --> 00:00:16.760
My name is Jo-el van Bergen,
and this is Randy Merrill.

00:00:16.760 --> 00:00:20.970
And we're both software
engineers on the Platform team.

00:00:20.970 --> 00:00:25.060
We actually work on
parts of these products.

00:00:25.060 --> 00:00:28.220
So let's get started.

00:00:28.220 --> 00:00:30.874
OK, so today we're here to
talk about Google Sign-In.

00:00:30.874 --> 00:00:32.290
And there's three
things we'd like

00:00:32.290 --> 00:00:35.900
you guys to remember by
the end of this talk.

00:00:35.900 --> 00:00:38.850
One is that the Google+ Sign-In
product is easy to implement

00:00:38.850 --> 00:00:42.082
across your Android,
iOS and web devices.

00:00:42.082 --> 00:00:44.540
And we'll show you a bit of
the code in that after a moment

00:00:44.540 --> 00:00:46.050
where Randy's going
to actually talk

00:00:46.050 --> 00:00:47.675
about the actual
implementation, and we

00:00:47.675 --> 00:00:51.270
can go through some
sample code with you guys.

00:00:51.270 --> 00:00:53.860
The second is, the Google+
Sign-In product is a truly

00:00:53.860 --> 00:00:56.140
cross-platform product.

00:00:56.140 --> 00:00:59.450
And we're really committed to
helping you drive conversions

00:00:59.450 --> 00:01:01.700
from one platform to another.

00:01:01.700 --> 00:01:03.740
As well, we really
want to help you

00:01:03.740 --> 00:01:06.530
create a seamless experience
for users across all

00:01:06.530 --> 00:01:10.000
of their devices, whatever
they might be using.

00:01:10.000 --> 00:01:13.550
And finally, Google+ Sign-In
will help your users bring

00:01:13.550 --> 00:01:16.315
their Google identity
with them to your app.

00:01:16.315 --> 00:01:19.810
And we found this really reduces
friction on the Sign-In process

00:01:19.810 --> 00:01:22.875
and helps users get involved
with your app right away.

00:01:22.875 --> 00:01:24.500
As well, we've had
some of our partners

00:01:24.500 --> 00:01:27.960
find that Google
signed-in users are

00:01:27.960 --> 00:01:30.570
some of the most engaged
users in some of the studies

00:01:30.570 --> 00:01:32.620
that they've done.

00:01:32.620 --> 00:01:35.410
So I'm going to start by
showing an example of how

00:01:35.410 --> 00:01:36.420
the product looks today.

00:01:36.420 --> 00:01:39.692
So here we have
the Fancy, which is

00:01:39.692 --> 00:01:41.900
an app where you can browse
and view different things

00:01:41.900 --> 00:01:46.210
and kind of bookmark, or as
they call it, Fancy things

00:01:46.210 --> 00:01:49.000
that you like, and then
later purchase those items.

00:01:49.000 --> 00:01:52.376
So here, if the user clicks
the Sign In With Google button,

00:01:52.376 --> 00:01:54.810
they get taken to an
authorization screen

00:01:54.810 --> 00:01:57.664
where it lets the user know
what the Fancy wants to see.

00:01:57.664 --> 00:02:00.205
So it's showing them that they
want to know the basic profile

00:02:00.205 --> 00:02:02.480
and that they want
to make the review

00:02:02.480 --> 00:02:05.850
activities available to
Google from the Fancy.

00:02:05.850 --> 00:02:08.139
And at this point, if the
user had multiple accounts

00:02:08.139 --> 00:02:10.330
in their device, they
would get the option

00:02:10.330 --> 00:02:12.174
to select one of
their accounts--

00:02:12.174 --> 00:02:13.840
and I'm sure many of
you guys on Android

00:02:13.840 --> 00:02:15.760
have already seen this--
select one of their accounts

00:02:15.760 --> 00:02:18.290
to use with the Fancy before
proceeding to the authorization

00:02:18.290 --> 00:02:19.560
screen.

00:02:19.560 --> 00:02:22.210
Once the user clicks
Sign In, the Fancy

00:02:22.210 --> 00:02:26.260
then shows a username and a
profile picture for that user.

00:02:26.260 --> 00:02:27.869
And this is very important.

00:02:27.869 --> 00:02:30.160
If you've attended many of
the design talks or the user

00:02:30.160 --> 00:02:32.120
experience talks
here, our team will

00:02:32.120 --> 00:02:34.790
say that it's great for
showing consistency to the user

00:02:34.790 --> 00:02:36.190
so they know what's happened.

00:02:36.190 --> 00:02:38.770
They have feedback on
what's actually going on,

00:02:38.770 --> 00:02:41.680
and then they also get reminded
of which account they chose.

00:02:41.680 --> 00:02:42.830
Especially if they're
coming back to your app

00:02:42.830 --> 00:02:45.205
at a later date, they know
which of their Google accounts

00:02:45.205 --> 00:02:47.220
they're actually using.

00:02:47.220 --> 00:02:50.710
OK, so let's say they've been
using your app for a while,

00:02:50.710 --> 00:02:53.550
and then they make their
way to your website.

00:02:53.550 --> 00:02:57.150
The Google+ Sign-In product
gives a way to do silent

00:02:57.150 --> 00:02:57.834
authentication.

00:02:57.834 --> 00:02:59.500
So this means that
if the user's already

00:02:59.500 --> 00:03:01.293
signed on one of the
other devices, one

00:03:01.293 --> 00:03:03.062
of the other platforms,
when they come

00:03:03.062 --> 00:03:04.520
to the new platform--
in this case,

00:03:04.520 --> 00:03:06.187
web-- they'll
automatically be signed in

00:03:06.187 --> 00:03:08.311
without having to see
another authorization screen,

00:03:08.311 --> 00:03:10.000
without having to
type another password.

00:03:10.000 --> 00:03:12.060
And this works as long
as they're already

00:03:12.060 --> 00:03:13.250
signed in on that device.

00:03:13.250 --> 00:03:16.140
So in this case, web, if they're
signed in to any Google product

00:03:16.140 --> 00:03:19.302
on their web browser or signed
in to their Chrome browser,

00:03:19.302 --> 00:03:20.760
they'll automatically
be signed in.

00:03:20.760 --> 00:03:23.426
And then here we have, as
part of the sign-in process,

00:03:23.426 --> 00:03:25.300
we show the user name
and the profile picture

00:03:25.300 --> 00:03:27.620
again so the user knows
what's actually happened.

00:03:30.530 --> 00:03:32.880
All right, so let's take
a look at a new scenario.

00:03:32.880 --> 00:03:36.220
Let's say that a user has
come to your website first.

00:03:36.220 --> 00:03:38.920
After they've clicked Sign In
on that authorization screen

00:03:38.920 --> 00:03:41.440
then we showed you
previously, they're

00:03:41.440 --> 00:03:45.140
going to get shown an option
to install your Android

00:03:45.140 --> 00:03:48.150
app directly from web through
to their Android phone.

00:03:48.150 --> 00:03:49.960
So that they're on
their web browser.

00:03:49.960 --> 00:03:50.970
They've clicked Sign In.

00:03:50.970 --> 00:03:52.428
They get this pop
up where they can

00:03:52.428 --> 00:03:54.530
pick any number of
their Android devices,

00:03:54.530 --> 00:03:56.760
whether it's their tablet
or their smartphone.

00:03:56.760 --> 00:03:58.896
And as soon as they
click the Install button,

00:03:58.896 --> 00:04:00.270
it's automatically
going to start

00:04:00.270 --> 00:04:01.980
installing on their phone.

00:04:01.980 --> 00:04:03.330
So this means they don't have
to take it out of their pocket.

00:04:03.330 --> 00:04:04.996
They don't have to
set a reminder later.

00:04:04.996 --> 00:04:07.860
They don't end up forgetting
to install your Android app.

00:04:07.860 --> 00:04:10.269
It automatically happens.

00:04:10.269 --> 00:04:12.810
And then as soon as it finishes
happening, say a few minutes,

00:04:12.810 --> 00:04:14.393
depending on their
internet connection

00:04:14.393 --> 00:04:16.990
and how big the app is,
they get a notification

00:04:16.990 --> 00:04:18.510
showing them what's
already happened

00:04:18.510 --> 00:04:20.000
and giving them a chance
to try your app out

00:04:20.000 --> 00:04:20.791
for the first time.

00:04:20.791 --> 00:04:22.870
So it just reminds
them, gives them

00:04:22.870 --> 00:04:26.496
a way to give it a first try.

00:04:26.496 --> 00:04:28.992
OK, so now that we know
what it looks like,

00:04:28.992 --> 00:04:31.200
let's take a look at some
of the case studies of what

00:04:31.200 --> 00:04:36.190
our partners have found
with using Google+ Sign-In.

00:04:36.190 --> 00:04:39.500
Hotel Tonight is a
hotel booking service.

00:04:39.500 --> 00:04:42.290
They found that they had 100%
increase in their Android

00:04:42.290 --> 00:04:46.420
signed-in user base after
implementing Google+ Sign-In.

00:04:46.420 --> 00:04:49.700
As well, they found that Google+
signed-in users were 50% more

00:04:49.700 --> 00:04:54.360
likely to purchase than users
signed in with other products.

00:04:54.360 --> 00:04:58.040
And finally, they found that
Android user base grew 50%

00:04:58.040 --> 00:05:00.030
after implementing
Google+ Sign-In.

00:05:00.030 --> 00:05:02.620
So they had a 50% growth in
just Android overall users

00:05:02.620 --> 00:05:04.580
after implementing
the Sign-In product.

00:05:04.580 --> 00:05:07.520
Which, yeah, we were very
happy with those findings.

00:05:07.520 --> 00:05:10.820
Deezer is a music
streaming service.

00:05:10.820 --> 00:05:13.410
Deezer found that 33%
of the Google users

00:05:13.410 --> 00:05:16.880
who came to their website
chose to install their Android

00:05:16.880 --> 00:05:18.790
app immediately via
that over-the-air

00:05:18.790 --> 00:05:21.095
install that I just showed you.

00:05:21.095 --> 00:05:22.470
They found that
Google users were

00:05:22.470 --> 00:05:25.862
two times more likely to
purchase upgraded accounts.

00:05:25.862 --> 00:05:27.570
And they found that
Google users listened

00:05:27.570 --> 00:05:33.315
to 15% more music than those
using other sign-in methods.

00:05:33.315 --> 00:05:34.940
OK, so now we're
going to get into some

00:05:34.940 --> 00:05:37.065
of the code of how you can
actually implement this,

00:05:37.065 --> 00:05:39.515
and I'll let Randy
talk to you about that.

00:05:39.515 --> 00:05:41.810
RANDY MERRILL: So we've
seen the experience

00:05:41.810 --> 00:05:44.585
that people get when they
actually use the product.

00:05:44.585 --> 00:05:45.424
Huh?

00:05:45.424 --> 00:05:46.465
JO-EL VAN BERGEN: Closer.

00:05:46.465 --> 00:05:46.860
RANDY MERRILL: Closer.

00:05:46.860 --> 00:05:47.650
OK.

00:05:47.650 --> 00:05:48.547
I'll talk louder.

00:05:48.547 --> 00:05:50.380
OK, so now we're going
to get into the code.

00:05:50.380 --> 00:05:52.110
But before we do,
we're actually going

00:05:52.110 --> 00:05:54.020
to go to the Google
Developer Console.

00:05:59.160 --> 00:06:01.300
So you'll need to go to
the Developer Console

00:06:01.300 --> 00:06:03.170
first before you
start programming.

00:06:03.170 --> 00:06:05.950
You'll register your app, and
you'll create a project for it,

00:06:05.950 --> 00:06:07.850
and you'll get back a client ID.

00:06:07.850 --> 00:06:09.370
That client ID is
what you'll use

00:06:09.370 --> 00:06:13.120
in actually talking
to the Google APIs.

00:06:13.120 --> 00:06:16.450
So we're going to
go to Android now.

00:06:16.450 --> 00:06:19.270
In your app, you will use the
Google Play Client Library,

00:06:19.270 --> 00:06:22.890
which we provide for you, which
actually connects to the Google

00:06:22.890 --> 00:06:25.880
Play Services APK that is
running on phones Gingerbread

00:06:25.880 --> 00:06:26.770
and later.

00:06:26.770 --> 00:06:29.750
That's something that we provide
that's automatically updated.

00:06:29.750 --> 00:06:33.674
And then we help you basically
talk to Google's APIs

00:06:33.674 --> 00:06:36.090
through the Google Play client
library and the Google Play

00:06:36.090 --> 00:06:38.450
Services APK.

00:06:38.450 --> 00:06:41.960
So now I'm going to show you
an example of using the code.

00:06:41.960 --> 00:06:44.660
In our onCreate method,
we will actually

00:06:44.660 --> 00:06:47.290
create a Google
API Client Builder.

00:06:47.290 --> 00:06:49.370
We're going to
add our callbacks,

00:06:49.370 --> 00:06:51.840
and we're going to select
which API we're going to use.

00:06:51.840 --> 00:06:54.930
In this case, we're going
to use the Google+ API.

00:06:54.930 --> 00:06:56.880
And then we're also
going to add a scope.

00:06:56.880 --> 00:06:59.540
Here we're using the
Google+ Login scope.

00:06:59.540 --> 00:07:02.310
We'll talk more about what
the scopes mean later.

00:07:02.310 --> 00:07:03.590
So we build that.

00:07:03.590 --> 00:07:06.330
And then on the
start, we connect

00:07:06.330 --> 00:07:09.141
to the Google Play Services APK.

00:07:09.141 --> 00:07:12.140
And then likewise on stop, we
disconnect from the Google Play

00:07:12.140 --> 00:07:14.010
Services APK.

00:07:14.010 --> 00:07:15.860
And then in your
app, in your UI,

00:07:15.860 --> 00:07:18.060
you just add to your
XML layout, you'll

00:07:18.060 --> 00:07:20.950
add the Sign In button
where you want it to appear.

00:07:20.950 --> 00:07:23.750
And that's most of it.

00:07:23.750 --> 00:07:27.490
And in iOS, we provide
a iOS SDK that you

00:07:27.490 --> 00:07:30.270
can use in your app,
which then helps

00:07:30.270 --> 00:07:31.770
you talk to the Google APIs.

00:07:34.970 --> 00:07:36.880
So here's an example
of the code to do that.

00:07:36.880 --> 00:07:39.830
We use the GPP sign-in,
shared instance.

00:07:39.830 --> 00:07:41.860
You set some attributes on it.

00:07:41.860 --> 00:07:44.460
We set the client ID, which we
got from the Google Developers

00:07:44.460 --> 00:07:45.920
Console earlier.

00:07:45.920 --> 00:07:49.330
We set that we want to also get
the Google email address back

00:07:49.330 --> 00:07:50.770
as part of the request.

00:07:50.770 --> 00:07:51.900
And we also set the scopes.

00:07:51.900 --> 00:07:54.920
Here again, we're using
the plus.login scope.

00:07:54.920 --> 00:07:56.790
And then we set the
delegate to the self.

00:07:56.790 --> 00:08:00.176
And then we trigger the
actual authenticate method.

00:08:00.176 --> 00:08:03.930
You'll also notice that we
try the silent authentication,

00:08:03.930 --> 00:08:06.830
which Jo-el was talking about
earlier, of being able to sign

00:08:06.830 --> 00:08:08.950
in users who have signed
in previously on the web

00:08:08.950 --> 00:08:09.820
or on Android.

00:08:09.820 --> 00:08:12.320
It'll automatically sign them
in if they've already done so.

00:08:15.030 --> 00:08:18.710
On the web, you
use the plusone.js

00:08:18.710 --> 00:08:22.200
to talk to Google
APIs, make it easier.

00:08:22.200 --> 00:08:26.460
You place the plusone.js
before the closing body tag.

00:08:26.460 --> 00:08:30.220
And then you put in
the G+ Sign-In button.

00:08:30.220 --> 00:08:32.559
Here, with the
data attributes, we

00:08:32.559 --> 00:08:35.890
are setting that we want
the plus.login scope again.

00:08:35.890 --> 00:08:37.539
We're also using
the client ID which

00:08:37.539 --> 00:08:40.220
we got from the Google
Developer Console earlier.

00:08:40.220 --> 00:08:42.460
And we're also
setting a callback.

00:08:42.460 --> 00:08:46.391
In our callback, we get
presented with an authResult.

00:08:46.391 --> 00:08:47.890
And then in that
authResult we check

00:08:47.890 --> 00:08:49.540
to see if they have
an access token.

00:08:49.540 --> 00:08:51.520
If that access token
is there, then we

00:08:51.520 --> 00:08:53.910
know that the user was
signed in successfully.

00:08:53.910 --> 00:08:56.670
If that isn't there, then we
can check the authResult error

00:08:56.670 --> 00:09:01.455
to see what the problem was
or why the sign-in failed.

00:09:01.455 --> 00:09:03.080
And now Jo-el will
talk to us about how

00:09:03.080 --> 00:09:05.649
we can move onto
the server as well.

00:09:05.649 --> 00:09:07.190
JO-EL VAN BERGEN:
OK, so we've talked

00:09:07.190 --> 00:09:09.870
about how to implement this
on the client-side code.

00:09:09.870 --> 00:09:12.940
If you want to do asynchronous
calls from your server

00:09:12.940 --> 00:09:17.350
to Google APIs-- and this can
done even if the user does not

00:09:17.350 --> 00:09:20.160
have the client app open.

00:09:23.130 --> 00:09:24.870
So here, at the
top of the screen,

00:09:24.870 --> 00:09:31.020
we kind of talked about the
client-side flow where your app

00:09:31.020 --> 00:09:32.729
has integrated Google+ Sign In.

00:09:32.729 --> 00:09:34.520
When the user clicks
on the Sign In button,

00:09:34.520 --> 00:09:36.630
there's going to be
an OAuth request sent

00:09:36.630 --> 00:09:39.970
to Google servers, which then
triggers the Sign-In dialogue

00:09:39.970 --> 00:09:41.650
that we were talking about.

00:09:41.650 --> 00:09:43.530
And then finally, once
the user has accepted,

00:09:43.530 --> 00:09:48.542
there's an access
token returned that you

00:09:48.542 --> 00:09:50.750
can use to then make requests
to the Google API calls

00:09:50.750 --> 00:09:53.790
from your Android client
or your web client.

00:09:53.790 --> 00:09:56.570
If you need to make server-side
calls asynchronously

00:09:56.570 --> 00:09:59.510
of whether the user
actually has your app open,

00:09:59.510 --> 00:10:01.980
we have an extra thing that
you can add to the flow

00:10:01.980 --> 00:10:05.440
where you get a one-time code
returned to your client, which

00:10:05.440 --> 00:10:06.805
can be sent to the server.

00:10:06.805 --> 00:10:08.930
And then on your server,
you use that one-time code

00:10:08.930 --> 00:10:10.920
to communicate with
Google and exchange it

00:10:10.920 --> 00:10:13.440
for a separate access
token and a refresh token

00:10:13.440 --> 00:10:16.670
that your server can use
to make calls on its own.

00:10:16.670 --> 00:10:19.850
And the access tokens will
expire after about an hour,

00:10:19.850 --> 00:10:22.070
but the refresh token can
be used to get a new access

00:10:22.070 --> 00:10:23.810
token at the time
that you need it.

00:10:23.810 --> 00:10:27.190
And this is handled
automatically by, I guess,

00:10:27.190 --> 00:10:29.730
the server-side client
libraries that Google provides

00:10:29.730 --> 00:10:32.570
for various languages
for the sign-in product.

00:10:35.569 --> 00:10:37.110
OK, so let's look
at how to implement

00:10:37.110 --> 00:10:38.600
this for a web example.

00:10:38.600 --> 00:10:40.400
Here in the Sign
In button, you're

00:10:40.400 --> 00:10:41.690
going to add two new lines.

00:10:41.690 --> 00:10:45.170
One is the data redirect URI,
which you set to postMessage.

00:10:45.170 --> 00:10:47.000
And the second is
the data access type,

00:10:47.000 --> 00:10:48.420
which you set to offline.

00:10:48.420 --> 00:10:51.752
And this just enables
the one-time code flow

00:10:51.752 --> 00:10:53.710
that's going to allow
you to send that token up

00:10:53.710 --> 00:10:56.730
to your server.

00:10:56.730 --> 00:10:58.330
In JavaScript,
you're going to need

00:10:58.330 --> 00:11:02.874
to handle the sign in
callback with the auth result.

00:11:02.874 --> 00:11:04.290
And in this case,
we actually want

00:11:04.290 --> 00:11:07.532
to check the auth
result of code is set.

00:11:07.532 --> 00:11:09.240
And that's going to
be that one-time code

00:11:09.240 --> 00:11:11.370
that I was referencing.

00:11:11.370 --> 00:11:14.070
Once you have the auth result
of code, you can use that.

00:11:14.070 --> 00:11:16.470
Here we're using jQuery
to send a postMessage up

00:11:16.470 --> 00:11:19.900
to a PHP server in this
case where we set the data

00:11:19.900 --> 00:11:21.990
parameter to that code
that we got from Google.

00:11:25.800 --> 00:11:28.700
Looking at the server-side
code, here we're in PHP,

00:11:28.700 --> 00:11:31.740
and we're assuming that we have
that server-side PHP client

00:11:31.740 --> 00:11:34.360
library for Google+
Sign in installed,

00:11:34.360 --> 00:11:38.504
and that's where the client
variable is coming from.

00:11:38.504 --> 00:11:40.670
So here we're going to make
a call to Google servers

00:11:40.670 --> 00:11:43.700
where we take the request value
that you got from your client

00:11:43.700 --> 00:11:46.680
app with the Get-Content,
which is going

00:11:46.680 --> 00:11:48.405
to be that code that you sent.

00:11:48.405 --> 00:11:51.030
And we're going to send that to
the client.authenticate method,

00:11:51.030 --> 00:11:53.840
which is what actually makes
the request to the Google OAuth

00:11:53.840 --> 00:11:56.030
servers to get your
new access token

00:11:56.030 --> 00:11:58.542
and your new refresh
token for the server.

00:11:58.542 --> 00:12:00.000
Once you get the
access token back,

00:12:00.000 --> 00:12:01.730
you can decode it
from the response,

00:12:01.730 --> 00:12:04.200
and there's a verification step.

00:12:04.200 --> 00:12:06.554
Now, the verification
step is a bit lengthy,

00:12:06.554 --> 00:12:08.470
so we didn't want to
include it on the slides.

00:12:08.470 --> 00:12:10.178
But this is a good
time for me to mention

00:12:10.178 --> 00:12:12.930
that there's great documentation
on developers.google.com that

00:12:12.930 --> 00:12:14.410
includes various languages.

00:12:14.410 --> 00:12:16.120
So if you're using
Python, or PHP,

00:12:16.120 --> 00:12:17.660
or whatever language
works for you,

00:12:17.660 --> 00:12:20.520
we have sample code for all
of these different languages.

00:12:20.520 --> 00:12:22.130
And it's just a
really great place

00:12:22.130 --> 00:12:23.910
to see more detailed
documentation.

00:12:23.910 --> 00:12:25.170
There's a lot more
commenting in the code

00:12:25.170 --> 00:12:27.040
there because there's
obviously the room for it.

00:12:27.040 --> 00:12:29.290
And a lot of the explanations
we're talking about here

00:12:29.290 --> 00:12:31.284
are also explained in
the code as well as

00:12:31.284 --> 00:12:32.700
in the accompanying
documentation,

00:12:32.700 --> 00:12:35.487
so be sure to check that out.

00:12:35.487 --> 00:12:37.570
And then finally, the last
step we're showing here

00:12:37.570 --> 00:12:40.130
is it's important to save
that token, obviously,

00:12:40.130 --> 00:12:42.290
in whatever way makes
sense for your app.

00:12:42.290 --> 00:12:44.540
So in this case, we're saving
in the session variable,

00:12:44.540 --> 00:12:46.019
but however you
plan to-- I guess

00:12:46.019 --> 00:12:47.810
in whatever way it
makes sense for your app

00:12:47.810 --> 00:12:49.268
to use the token
later on, you want

00:12:49.268 --> 00:12:51.960
to make sure you have it around
to make future calls on behalf

00:12:51.960 --> 00:12:54.487
of that user.

00:12:54.487 --> 00:12:57.070
And then finally, it's good to
let your app know that this has

00:12:57.070 --> 00:13:00.300
succeeded so that your app knows
it doesn't have to retry this

00:13:00.300 --> 00:13:01.060
at a later date.

00:13:03.790 --> 00:13:04.324
All right.

00:13:04.324 --> 00:13:06.240
So the next thing I want
to talk to guys about

00:13:06.240 --> 00:13:08.330
was incremental authorization.

00:13:08.330 --> 00:13:11.550
So this is the
principle that you only

00:13:11.550 --> 00:13:14.080
want to ask for permissions
that you absolutely

00:13:14.080 --> 00:13:16.270
need when your user
first signs in,

00:13:16.270 --> 00:13:19.990
and only ask for the permissions
you need it when you need them.

00:13:19.990 --> 00:13:21.960
So the main benefit
of this is it really

00:13:21.960 --> 00:13:25.450
reduces the friction and the
barrier of entry into your app,

00:13:25.450 --> 00:13:28.150
and it keeps the user's
life a lot more simple.

00:13:28.150 --> 00:13:29.540
So they see a sign-in.

00:13:29.540 --> 00:13:31.330
You only asked for
a couple of things.

00:13:31.330 --> 00:13:33.860
It means the user is going
to be a lot more likely just

00:13:33.860 --> 00:13:35.360
to click Sign In,
and they're not

00:13:35.360 --> 00:13:39.312
confused by why you're asking
for what you're asking for.

00:13:39.312 --> 00:13:41.020
And then at a later
time, when you really

00:13:41.020 --> 00:13:43.501
need some new scope
or some new ability

00:13:43.501 --> 00:13:45.000
or some new information
from Google,

00:13:45.000 --> 00:13:47.720
you can ask for those
scopes at that time.

00:13:47.720 --> 00:13:49.470
So as part of the
Google+ Sign-In product,

00:13:49.470 --> 00:13:51.178
we provide a way for
you guys to do this.

00:13:53.650 --> 00:13:56.590
So here, let's say you had
gone to the 8tracks website.

00:13:56.590 --> 00:13:59.420
So 8tracks is a music
streaming service.

00:13:59.420 --> 00:14:02.615
You choose to click
Sign In With Google+.

00:14:02.615 --> 00:14:05.580
And here the consent
is fairly basic.

00:14:05.580 --> 00:14:07.890
It's asking to know
your basic profile info.

00:14:07.890 --> 00:14:11.120
It's asking to make your listen
activities available to Google.

00:14:11.120 --> 00:14:12.960
And it's asking to view
your email address.

00:14:12.960 --> 00:14:17.000
So this is pretty standard
nowadays with social sign-in.

00:14:17.000 --> 00:14:18.750
Once the user signs
in, they have a chance

00:14:18.750 --> 00:14:21.340
to browse around your website,
in this case listen to music,

00:14:21.340 --> 00:14:23.380
favorite some things,
take a look around.

00:14:23.380 --> 00:14:26.920
And then on the side,
there's a little option here

00:14:26.920 --> 00:14:30.820
to mix in recommendations based
on your YouTube watch history.

00:14:30.820 --> 00:14:33.450
And it gives the user the
option to click the button

00:14:33.450 --> 00:14:36.290
to connect the YouTube account.

00:14:36.290 --> 00:14:38.506
In this case, once
they click that button,

00:14:38.506 --> 00:14:41.130
they're going to be shown a new
authorization screen which only

00:14:41.130 --> 00:14:44.460
asks for the scopes that
are new, so in this case

00:14:44.460 --> 00:14:45.332
the YouTube scope.

00:14:45.332 --> 00:14:47.040
We're not re-showing
them the whole list.

00:14:47.040 --> 00:14:49.460
We're not given them a
giant list to look through.

00:14:49.460 --> 00:14:53.130
And it makes sense, because the
user has performed an action

00:14:53.130 --> 00:14:54.344
to cause this to happen.

00:14:54.344 --> 00:14:56.760
They know that they want to
connect their YouTube account,

00:14:56.760 --> 00:15:00.930
so when Google says 8tracks is
asking for a YouTube account,

00:15:00.930 --> 00:15:01.880
it really makes sense.

00:15:04.690 --> 00:15:05.190
All right.

00:15:05.190 --> 00:15:08.330
So let's take a look at how
we can get this implemented.

00:15:08.330 --> 00:15:12.820
We've shown you the code, the
basic login flow on Android.

00:15:12.820 --> 00:15:14.466
To add a new scope
after the user has

00:15:14.466 --> 00:15:16.090
been using your app
for a while, you're

00:15:16.090 --> 00:15:19.820
going to need to disconnect
your previous Google API client.

00:15:19.820 --> 00:15:22.350
And then you end up connecting
a new Google API client

00:15:22.350 --> 00:15:24.890
with an expanded set of
scopes, so whatever new scope

00:15:24.890 --> 00:15:27.670
or new piece of
information that you want.

00:15:27.670 --> 00:15:31.692
This is going to fail initially,
because that scope has not

00:15:31.692 --> 00:15:32.900
been granted to your app yet.

00:15:32.900 --> 00:15:34.826
The user has not given
permission for it.

00:15:34.826 --> 00:15:36.200
So you're going
to have to handle

00:15:36.200 --> 00:15:39.110
the onConnectionFailed
callback on Android

00:15:39.110 --> 00:15:41.330
by showing a new dialogue,
and this dialogue

00:15:41.330 --> 00:15:45.940
will contain that new scope that
I just showed you previously.

00:15:45.940 --> 00:15:47.711
On iOS it's very similar.

00:15:47.711 --> 00:15:49.210
You're going to
append the new scope

00:15:49.210 --> 00:15:51.859
to the GPP sign-in instance.

00:15:51.859 --> 00:15:54.400
Then you call the authenticate
method, similar to the Android

00:15:54.400 --> 00:15:57.800
example, and again handle the
finishedWithError callback

00:15:57.800 --> 00:15:59.830
by showing the
dialogue to the user

00:15:59.830 --> 00:16:03.510
so that they can
accept the new scope.

00:16:03.510 --> 00:16:06.330
On web, it's more of
a one-step process.

00:16:06.330 --> 00:16:09.070
All you need to do is
request the additional scopes

00:16:09.070 --> 00:16:11.660
with the
gapi.auth.signin method.

00:16:15.050 --> 00:16:18.212
OK, so Randy, now that we know
how to implement the APIs,

00:16:18.212 --> 00:16:20.420
he's going to talk to you
about what you can actually

00:16:20.420 --> 00:16:22.020
do with them.

00:16:22.020 --> 00:16:23.770
RANDY MERRILL: So in
our earlier examples,

00:16:23.770 --> 00:16:26.112
we actually used the
Google+ login scope,

00:16:26.112 --> 00:16:28.570
but I'm going to show you some
of the other scopes that you

00:16:28.570 --> 00:16:31.105
can use and what
they get for you.

00:16:31.105 --> 00:16:33.230
So we're going to start
off with the profile scope.

00:16:33.230 --> 00:16:36.804
The profile scope is almost
the basic login scope.

00:16:36.804 --> 00:16:38.220
It gives you the
basic information

00:16:38.220 --> 00:16:39.880
about the Google user.

00:16:39.880 --> 00:16:41.410
It also gives you
a "me" pointer,

00:16:41.410 --> 00:16:44.860
which I'll talk about later when
we show an example of using it.

00:16:44.860 --> 00:16:47.650
And then we also get the
ability to do over-the-air

00:16:47.650 --> 00:16:51.240
install for Android apps.

00:16:51.240 --> 00:16:54.355
Then we have the Google+
login, which we demoed earlier,

00:16:54.355 --> 00:16:56.480
which actually includes
everything that the profile

00:16:56.480 --> 00:16:59.960
does, plus it gives you the
Google+ user's age range

00:16:59.960 --> 00:17:01.370
and their language.

00:17:01.370 --> 00:17:04.140
Additionally, it gets you the
list of users in the Google+

00:17:04.140 --> 00:17:08.190
circles who the user has
specified that you can see

00:17:08.190 --> 00:17:11.109
and also allows you to write app
activities such as 8tracks did

00:17:11.109 --> 00:17:14.480
with listening activities.

00:17:14.480 --> 00:17:17.780
And then we also have an
OpenID Connect profile

00:17:17.780 --> 00:17:20.520
that you can get
from the scopes.

00:17:20.520 --> 00:17:22.859
We also have an
email scope which

00:17:22.859 --> 00:17:25.170
gets you the Google
user's email account.

00:17:25.170 --> 00:17:28.130
And if they are Google
Apps for Business user,

00:17:28.130 --> 00:17:30.060
it also gets you
the domain name back

00:17:30.060 --> 00:17:34.560
so you can verify that
they belong to that domain.

00:17:34.560 --> 00:17:37.880
We also have a
plus.profile.emails.read,

00:17:37.880 --> 00:17:39.960
which gets you
everything in the email.

00:17:39.960 --> 00:17:41.910
Plus, if the user has
any additional emails

00:17:41.910 --> 00:17:44.300
in the Google+ profile
that are verified,

00:17:44.300 --> 00:17:45.840
it will also return
those to you.

00:17:48.830 --> 00:17:50.670
So here we're going
to show some examples

00:17:50.670 --> 00:17:52.940
of using the different scopes.

00:17:52.940 --> 00:17:55.840
This is a REST
example, but we also

00:17:55.840 --> 00:17:59.600
have APIs built into the
web, iOS, and Android

00:17:59.600 --> 00:18:01.990
that make this a
lot easier to do.

00:18:01.990 --> 00:18:05.230
So here we're doing a GET
request to the Google APIs.

00:18:05.230 --> 00:18:09.110
You'll notice on the end we're
doing userID in brackets.

00:18:09.110 --> 00:18:11.290
The "me" pointer that I
was talking about earlier

00:18:11.290 --> 00:18:14.190
makes it so that instead of
putting in the actual user ID,

00:18:14.190 --> 00:18:16.420
you can use the
currently-authenticated user

00:18:16.420 --> 00:18:19.060
and use the "me" token
in the place of that.

00:18:19.060 --> 00:18:22.220
So this will get you their
basic profile information.

00:18:22.220 --> 00:18:28.600
This is how to get the OpenID
Connect profile for the user.

00:18:28.600 --> 00:18:30.790
We also have the
more social ones

00:18:30.790 --> 00:18:33.290
where you can get the people
that are visible to your app,

00:18:33.290 --> 00:18:35.480
those circles that
the user selected.

00:18:35.480 --> 00:18:40.000
And also, there
is a connected API

00:18:40.000 --> 00:18:42.367
that you can use to get the
ones that are also connected

00:18:42.367 --> 00:18:43.950
to your app that are
in their circles.

00:18:46.550 --> 00:18:52.345
So to recap, you can actually
use Google+ Sign In with any

00:18:52.345 --> 00:18:52.970
Google account.

00:18:52.970 --> 00:18:56.340
That includes Android users,
Gmail users, YouTube users,

00:18:56.340 --> 00:18:58.130
and Google+ users.

00:18:58.130 --> 00:19:02.720
All of those users can actually
sign in using Google+ Sign In.

00:19:02.720 --> 00:19:05.880
We talked about providing
a very seamless experience.

00:19:05.880 --> 00:19:07.990
The way that you do
that is for asking

00:19:07.990 --> 00:19:09.570
for permissions in context.

00:19:09.570 --> 00:19:11.866
You don't want to ask
for 20 permissions

00:19:11.866 --> 00:19:13.990
at the first of your app
when they don't make sense

00:19:13.990 --> 00:19:14.980
to the user.

00:19:14.980 --> 00:19:17.750
You want to actually provide
them the minimum at the first,

00:19:17.750 --> 00:19:19.330
and then add on
as they need them

00:19:19.330 --> 00:19:21.330
and as they are actually
using the features that

00:19:21.330 --> 00:19:22.730
require those.

00:19:22.730 --> 00:19:25.486
Then we also have the Auto
Sign In on app start up.

00:19:25.486 --> 00:19:27.110
So if you've already
used it on the web

00:19:27.110 --> 00:19:29.735
and you go to the Android, it's
going to automatically sign you

00:19:29.735 --> 00:19:32.320
in with the same permissions.

00:19:32.320 --> 00:19:36.014
We also want you to show on your
app the user's name and photo

00:19:36.014 --> 00:19:37.430
so that they can
actually see what

00:19:37.430 --> 00:19:40.330
account they've signed into,
and it makes sense to them,

00:19:40.330 --> 00:19:42.900
and it reminds them
of what's happened.

00:19:42.900 --> 00:19:45.120
We also allow you to do
over-the-air installs

00:19:45.120 --> 00:19:48.550
for Android from signing
in on the web, which

00:19:48.550 --> 00:19:50.920
makes a very good for
converting users from the web

00:19:50.920 --> 00:19:54.200
over to your mobile device.

00:19:54.200 --> 00:19:56.871
From here, you can go on to the
Google+ Sign In documentation

00:19:56.871 --> 00:19:57.370
page.

00:19:57.370 --> 00:20:00.010
Go to
developers.google.com/plus.

00:20:00.010 --> 00:20:03.615
You can find examples in iOS,
Android, and the web there,

00:20:03.615 --> 00:20:04.990
and we have further
documentation

00:20:04.990 --> 00:20:08.710
on all the different pieces of
this, as well as code examples.

00:20:08.710 --> 00:20:09.817
So thank you.

00:20:09.817 --> 00:20:11.400
And if you have any
questions, I think

00:20:11.400 --> 00:20:12.816
we still have a
couple of minutes.

00:20:16.938 --> 00:20:20.060
JO-EL VAN BERGEN: And if you
guys have questions afterwards,

00:20:20.060 --> 00:20:21.310
we'll be sitting around.

00:20:21.310 --> 00:20:23.510
So feel free to come
up and talk to us.

00:20:23.510 --> 00:20:25.360
Thank you.

