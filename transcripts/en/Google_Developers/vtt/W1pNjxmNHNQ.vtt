WEBVTT
Kind: captions
Language: en

00:00:00.002 --> 00:00:01.210
MARTIN AGUINIS: Hi, everyone.

00:00:01.210 --> 00:00:02.660
I'm Martin from
the Flutter team.

00:00:02.660 --> 00:00:05.390
Today, I'm going to show you
how Flutter's widget composition

00:00:05.390 --> 00:00:07.610
can help you quickly build
out a beautiful interface

00:00:07.610 --> 00:00:09.050
for your applications.

00:00:09.050 --> 00:00:10.460
If you haven't
tried Flutter yet,

00:00:10.460 --> 00:00:12.800
it's Google's new
mobile UI SDK that

00:00:12.800 --> 00:00:15.320
can help you quickly build
native iOS and Android

00:00:15.320 --> 00:00:17.450
apps from a single codebase.

00:00:17.450 --> 00:00:20.330
Widgets are the building block
of any app built with Flutter,

00:00:20.330 --> 00:00:22.400
and their functionality
spans from providing

00:00:22.400 --> 00:00:25.430
a framework for your entire
app, like the scaffold widget,

00:00:25.430 --> 00:00:27.830
to accepting input,
like text field does,

00:00:27.830 --> 00:00:30.230
or even animating an ink splash.

00:00:30.230 --> 00:00:32.689
Every widget has its
own particular purpose.

00:00:32.689 --> 00:00:36.380
And you, the developer, build
your app through composition,

00:00:36.380 --> 00:00:38.240
putting individual
widgets together

00:00:38.240 --> 00:00:40.820
until they add up to
a great interface.

00:00:40.820 --> 00:00:42.360
Let me give you an example.

00:00:42.360 --> 00:00:43.910
Say you're an engineer
at a shop that

00:00:43.910 --> 00:00:46.340
builds mobile apps
for other companies.

00:00:46.340 --> 00:00:49.530
And one day, your biggest client
comes to the office and says,

00:00:49.530 --> 00:00:53.030
we have to talk about an action
button on our shopping app.

00:00:53.030 --> 00:00:54.980
The look just isn't working.

00:00:54.980 --> 00:00:57.560
We need something that
really feels like our brand.

00:00:57.560 --> 00:01:00.200
As a Flutter developer,
you can say, no problem.

00:01:00.200 --> 00:01:03.080
Have a seat and I'll
pull up the code.

00:01:03.080 --> 00:01:03.650
All right.

00:01:03.650 --> 00:01:05.019
So here's your client's app.

00:01:05.019 --> 00:01:07.220
And if we zoom in, you
can see this default

00:01:07.220 --> 00:01:09.380
looking floating action button.

00:01:09.380 --> 00:01:11.032
There's nothing wrong
with the basics,

00:01:11.032 --> 00:01:12.740
but you can see why
the client might want

00:01:12.740 --> 00:01:15.430
something a little more custom.

00:01:15.430 --> 00:01:18.220
And here's the code that
produces the UI you just saw.

00:01:18.220 --> 00:01:20.360
It's written in the Dart
programming language,

00:01:20.360 --> 00:01:21.930
which is what Flutter uses.

00:01:21.930 --> 00:01:24.670
There is the MyHomePage
class up at the top.

00:01:24.670 --> 00:01:26.770
And here's the bit
we're interested in,

00:01:26.770 --> 00:01:28.550
the floating action button.

00:01:28.550 --> 00:01:31.360
Let's create a new file
and define a new widget

00:01:31.360 --> 00:01:35.780
to use instead of the default.
We'll call it FancyButton.

00:01:35.780 --> 00:01:36.640
There we go.

00:01:36.640 --> 00:01:39.520
Let's import a couple of
the basic Flutter packages.

00:01:39.520 --> 00:01:41.890
There is the foundation and
the material package that's

00:01:41.890 --> 00:01:43.760
got a ton of widgets in it.

00:01:43.760 --> 00:01:46.090
And I'll define
FancyButton as an extension

00:01:46.090 --> 00:01:47.614
of stateless widget.

00:01:47.614 --> 00:01:49.030
I'm going to skip
over the details

00:01:49.030 --> 00:01:50.800
of stateless widget for now.

00:01:50.800 --> 00:01:52.940
The important thing, as
far as we're concerned,

00:01:52.940 --> 00:01:55.720
is that stateless widgets
don't have mutable properties

00:01:55.720 --> 00:01:57.310
or a state that can change.

00:01:57.310 --> 00:01:59.816
You just construct one
and it's good to go.

00:01:59.816 --> 00:02:01.690
Speaking of properties,
let's give the button

00:02:01.690 --> 00:02:03.064
a callback for
when it's pressed.

00:02:05.890 --> 00:02:08.199
And we'll need a constructor
to inject the callback.

00:02:08.199 --> 00:02:09.669
So let me add that.

00:02:09.669 --> 00:02:11.260
If you're new to
Dart, you may not

00:02:11.260 --> 00:02:13.540
have seen this in a
constructor before.

00:02:13.540 --> 00:02:15.010
It just means that
the constructor

00:02:15.010 --> 00:02:17.051
should have a parameter
that matches the property

00:02:17.051 --> 00:02:20.800
and handles the
assignment for you.

00:02:20.800 --> 00:02:23.050
I can also put braces
around the parameter

00:02:23.050 --> 00:02:25.390
to make it an optional
named parameter.

00:02:25.390 --> 00:02:28.030
You'll see how this works
when this gets invoked.

00:02:28.030 --> 00:02:29.890
And use the required
annotation to make

00:02:29.890 --> 00:02:31.600
sure it's always passed in.

00:02:31.600 --> 00:02:35.419
And there's one method I need to
implement here, which is build.

00:02:35.419 --> 00:02:37.210
This is call by Flutter,
and it's basically

00:02:37.210 --> 00:02:40.480
a way of asking your widget,
hey, who are your children?

00:02:40.480 --> 00:02:43.460
What widgets are below
you in the hierarchy?

00:02:43.460 --> 00:02:45.760
I've just got a
placeholder null in here

00:02:45.760 --> 00:02:49.394
so that I can go
back to my home page.

00:02:49.394 --> 00:02:51.310
Let's get the new file
imported, and then I'll

00:02:51.310 --> 00:02:56.020
come down here and replace the
default button with my widget.

00:02:56.020 --> 00:02:59.397
You can see the name
parameter for onPressed.

00:02:59.397 --> 00:03:01.480
I'll give it the same
method that the other button

00:03:01.480 --> 00:03:03.181
was firing.

00:03:03.181 --> 00:03:03.680
OK.

00:03:03.680 --> 00:03:06.480
Let's get back to FancyButton
and the build method.

00:03:06.480 --> 00:03:08.270
This is where the
composition happens.

00:03:08.270 --> 00:03:10.311
I'm going to start putting
child widgets together

00:03:10.311 --> 00:03:12.830
to define how this widget
looks and performs.

00:03:12.830 --> 00:03:14.332
Let's start with some text.

00:03:14.332 --> 00:03:16.415
Maybe the client wants the
button to say PURCHASE.

00:03:19.540 --> 00:03:20.830
Now I'm going to build this.

00:03:20.830 --> 00:03:22.840
And since this is
the first build,

00:03:22.840 --> 00:03:24.740
it's going to take
a few seconds.

00:03:24.740 --> 00:03:26.490
Once the app is
up and running, we

00:03:26.490 --> 00:03:28.810
can use hot reload to
cut the refresh time

00:03:28.810 --> 00:03:30.460
to less than a second.

00:03:30.460 --> 00:03:32.090
But more on that later.

00:03:32.090 --> 00:03:34.340
In the meantime,
there's the interface.

00:03:34.340 --> 00:03:36.790
And there's the word
PURCHASE in the corner.

00:03:36.790 --> 00:03:39.620
So we've got something going.

00:03:39.620 --> 00:03:40.710
OK.

00:03:40.710 --> 00:03:42.840
So we need this widget
to do more than just

00:03:42.840 --> 00:03:44.040
print black text.

00:03:44.040 --> 00:03:46.020
And in Flutter, you
can add a capability

00:03:46.020 --> 00:03:47.650
by putting widgets together.

00:03:47.650 --> 00:03:51.120
So let's wrap the text
with a basic button called

00:03:51.120 --> 00:03:52.890
raw material button.

00:03:52.890 --> 00:03:55.560
The text widget now
becomes its child,

00:03:55.560 --> 00:03:57.420
and I'll add a
comment at the end

00:03:57.420 --> 00:04:00.210
here so that the auto formatter
makes it look nice and pretty.

00:04:06.700 --> 00:04:09.290
Raw material button
has a few properties.

00:04:09.290 --> 00:04:10.880
So let's start with color.

00:04:10.880 --> 00:04:13.720
I'll fill it with deep
orange and use regular orange

00:04:13.720 --> 00:04:16.440
for the ink splash.

00:04:16.440 --> 00:04:19.300
Now, let's save and
do a hot reload.

00:04:19.300 --> 00:04:20.940
That's going to
update the app's code

00:04:20.940 --> 00:04:24.330
without restarting the app.

00:04:24.330 --> 00:04:28.410
And there is my updated button
in about 400 milliseconds.

00:04:28.410 --> 00:04:30.110
Now, I'm tapping
on the button here.

00:04:30.110 --> 00:04:31.920
And as you can see,
there's no splash,

00:04:31.920 --> 00:04:34.460
which is because we haven't
given this raw material

00:04:34.460 --> 00:04:36.500
button anything to do.

00:04:36.500 --> 00:04:39.890
So let's give it the fancy
buttons onPressed call back

00:04:39.890 --> 00:04:42.167
and a hot reload later.

00:04:42.167 --> 00:04:43.000
I get a nice splash.

00:04:46.200 --> 00:04:47.340
What's next?

00:04:47.340 --> 00:04:49.950
Say the client wants
a rounded button.

00:04:49.950 --> 00:04:53.970
I can do that by giving mine
a stadium border as its shape.

00:04:53.970 --> 00:04:57.240
And I can call that constructor
with a const keyword here.

00:04:57.240 --> 00:04:59.050
That's always nice.

00:04:59.050 --> 00:05:02.550
In fact, it reminds me,
I don't need the new

00:05:02.550 --> 00:05:04.150
on raw material button.

00:05:04.150 --> 00:05:06.750
The new keyword is
optional in Dart 2,

00:05:06.750 --> 00:05:08.750
so I can pop it right out.

00:05:08.750 --> 00:05:09.480
OK.

00:05:09.480 --> 00:05:13.570
Let's hot reload and
see the new shape.

00:05:13.570 --> 00:05:16.070
Boom, rounded edges.

00:05:16.070 --> 00:05:17.950
This quick cycle
of making a change,

00:05:17.950 --> 00:05:19.840
see the result,
making the change,

00:05:19.840 --> 00:05:22.180
see the result is something
Flutter was designed,

00:05:22.180 --> 00:05:25.040
from the start, to provide.

00:05:25.040 --> 00:05:26.060
All right.

00:05:26.060 --> 00:05:27.869
What else can we do?

00:05:27.869 --> 00:05:29.410
Let's give the text
a little more pop

00:05:29.410 --> 00:05:31.120
by changing it to white.

00:05:31.120 --> 00:05:33.090
There is a style
property for text widgets

00:05:33.090 --> 00:05:34.570
that can help me with that.

00:05:34.570 --> 00:05:37.530
We can give it a textile object
with the color set to white.

00:05:40.890 --> 00:05:41.540
OK.

00:05:41.540 --> 00:05:42.960
I've got some white text.

00:05:42.960 --> 00:05:45.210
What about more padding?

00:05:45.210 --> 00:05:47.940
Sounds like a fun job
for the padding widget.

00:05:47.940 --> 00:05:50.460
I'll wrap the text in an
instance of padding and I'll

00:05:50.460 --> 00:05:57.560
make it symmetrical, 8 for
vertical and 20 for horizontal,

00:05:57.560 --> 00:05:59.910
and hot reload.

00:05:59.910 --> 00:06:01.750
There's the padding.

00:06:01.750 --> 00:06:03.190
What else might the client want?

00:06:03.190 --> 00:06:04.740
How about an icon?

00:06:04.740 --> 00:06:06.910
A lot of buttons have icons.

00:06:06.910 --> 00:06:10.720
The problem here is that
padding takes a single child.

00:06:10.720 --> 00:06:12.070
But we want it to have two--

00:06:12.070 --> 00:06:13.720
text and an icon--

00:06:13.720 --> 00:06:15.340
so we need a container.

00:06:15.340 --> 00:06:17.050
Flutter has a number
of them and they

00:06:17.050 --> 00:06:20.360
are, as you probably
guessed, also widgets.

00:06:20.360 --> 00:06:22.840
We can use a row widget to
display the icon and text

00:06:22.840 --> 00:06:25.240
widgets next to each
other horizontally.

00:06:25.240 --> 00:06:28.960
Instead of a child property, row
has a property called children,

00:06:28.960 --> 00:06:31.500
which takes a list of widgets.

00:06:31.500 --> 00:06:34.990
Let me finish up by
getting the icon in there.

00:06:34.990 --> 00:06:37.050
All right.

00:06:37.050 --> 00:06:39.290
And now to hot reload again.

00:06:39.290 --> 00:06:40.950
And whoa, that's not right.

00:06:40.950 --> 00:06:45.630
Looks like I forgot to set the
main axis size for the row.

00:06:45.630 --> 00:06:48.010
The main axis for
row is horizontal.

00:06:48.010 --> 00:06:49.710
So this code tells
the row widget

00:06:49.710 --> 00:06:52.560
to use the smallest
amount of space it can.

00:06:52.560 --> 00:06:53.340
All right.

00:06:53.340 --> 00:06:55.640
Let's hot reload again.

00:06:55.640 --> 00:06:56.560
There we go.

00:06:56.560 --> 00:06:58.600
This is another nice
thing about hot reload.

00:06:58.600 --> 00:07:01.690
I just messed up the UI by
forgetting to set a property

00:07:01.690 --> 00:07:04.060
and I was still able
to go back, add a fix,

00:07:04.060 --> 00:07:06.480
and keep going
without a restart.

00:07:06.480 --> 00:07:10.410
Next, how about a little space
between the icon and text?

00:07:10.410 --> 00:07:13.290
There is a great widget
for that called SizeBox.

00:07:13.290 --> 00:07:15.090
You can give it a
dimension or two

00:07:15.090 --> 00:07:17.310
and it will take up some space.

00:07:17.310 --> 00:07:18.120
And you know what?

00:07:18.120 --> 00:07:20.440
All three children of
the row are constants.

00:07:20.440 --> 00:07:23.820
So let's just move that
const up to the list itself.

00:07:23.820 --> 00:07:26.010
There we go.

00:07:26.010 --> 00:07:28.420
All right.

00:07:28.420 --> 00:07:30.710
Hot reload.

00:07:30.710 --> 00:07:33.620
And there's SizeBox at work.

00:07:33.620 --> 00:07:34.850
Not bad.

00:07:34.850 --> 00:07:37.310
At this point, we've composed
a completely new button

00:07:37.310 --> 00:07:39.320
with six widgets,
each of them handling

00:07:39.320 --> 00:07:41.150
its own particular
responsibilities

00:07:41.150 --> 00:07:43.790
and combining to give the
client a button that's

00:07:43.790 --> 00:07:45.740
vibrant and unique.

00:07:45.740 --> 00:07:47.390
So far, we've
mostly used widgets

00:07:47.390 --> 00:07:49.700
to control basic
presentation details.

00:07:49.700 --> 00:07:51.350
But they can do a lot more.

00:07:51.350 --> 00:07:53.630
For example, say you're
displaying an image

00:07:53.630 --> 00:07:55.970
and you'd like to know
when the user taps on it.

00:07:55.970 --> 00:07:58.910
Just wrap the image in a
GestureDetector widget.

00:07:58.910 --> 00:08:02.870
There are properties for taps,
long presses, drags, and more.

00:08:02.870 --> 00:08:05.690
Just like the graphics-focused
widgets you've seen,

00:08:05.690 --> 00:08:08.420
GestureDetector handles
it's one particular area

00:08:08.420 --> 00:08:10.621
of responsibility and that's it.

00:08:10.621 --> 00:08:11.120
All right.

00:08:11.120 --> 00:08:14.480
Let's get back to the app and
put some more widgets to work.

00:08:14.480 --> 00:08:15.050
OK.

00:08:15.050 --> 00:08:16.356
We're back with a button.

00:08:16.356 --> 00:08:18.230
Let's say the client's
so impressed with what

00:08:18.230 --> 00:08:20.780
you've done that they really
want to push the envelope.

00:08:20.780 --> 00:08:23.540
How about a vertical
floating action button?

00:08:23.540 --> 00:08:24.540
No problem.

00:08:24.540 --> 00:08:26.660
There is a widget for
rotating other widgets.

00:08:26.660 --> 00:08:30.650
It's called RotatedBox and
we can give it 3/4 turns

00:08:30.650 --> 00:08:32.870
and get this.

00:08:32.870 --> 00:08:34.200
It's vertical and everything.

00:08:34.200 --> 00:08:36.169
But maybe just because
you can do a thing

00:08:36.169 --> 00:08:37.747
doesn't mean you should.

00:08:37.747 --> 00:08:39.580
So let's pack it out
with the Remove widget.

00:08:44.510 --> 00:08:47.240
You can use RotatedBox on
a lot of stuff, though.

00:08:47.240 --> 00:08:49.310
Say the client preferred
the little compass icon

00:08:49.310 --> 00:08:50.750
to point the other way.

00:08:50.750 --> 00:08:52.290
No problem.

00:08:52.290 --> 00:08:54.950
There it is, leaning
back instead of forward.

00:08:54.950 --> 00:08:56.830
By the way, so far
I've been composing

00:08:56.830 --> 00:08:58.840
with widgets that are
part of core Flutter,

00:08:58.840 --> 00:09:01.750
but it works the same with
widgets built from scratch.

00:09:01.750 --> 00:09:06.120
For example, let me drop
some code in here real quick.

00:09:06.120 --> 00:09:08.090
Say I had another widget
that I'd already built

00:09:08.090 --> 00:09:12.470
called PulseAnimator, with
a child property of its own,

00:09:12.470 --> 00:09:17.570
and its job was to apply a
pulsing animation to the child.

00:09:17.570 --> 00:09:20.530
You can use the same
composition strategy with it

00:09:20.530 --> 00:09:22.990
that you do with
the stock widgets.

00:09:22.990 --> 00:09:26.370
Here, I'll add it to the
hierarchy and make this text

00:09:26.370 --> 00:09:27.910
its child.

00:09:27.910 --> 00:09:31.501
And when I hot reload,
there is the animation.

00:09:34.940 --> 00:09:35.990
So there you go.

00:09:35.990 --> 00:09:37.700
That's eight widgets
in combination

00:09:37.700 --> 00:09:40.680
to make a great button
and a happy client.

00:09:40.680 --> 00:09:44.030
So now we've got an updated app
and a happy client, all thanks

00:09:44.030 --> 00:09:45.590
to widget composition.

00:09:45.590 --> 00:09:46.554
That's it for today.

00:09:46.554 --> 00:09:48.470
But if you'd like to
learn more about Flutter,

00:09:48.470 --> 00:09:50.480
we've got links to
guides, sample apps,

00:09:50.480 --> 00:09:53.760
and a bunch of other resources
in the video description below.

00:09:53.760 --> 00:09:56.090
So check those out
and head to Flutter.io

00:09:56.090 --> 00:09:58.270
to get started today.

