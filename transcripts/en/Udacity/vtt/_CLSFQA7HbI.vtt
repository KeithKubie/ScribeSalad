WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:02.800
Here's another handy
concurrency primitive.

00:00:02.800 --> 00:00:06.730
It's a parallel for loop,
or par-for for short.

00:00:06.730 --> 00:00:10.180
Now if you ever run off on your own to
read classic papers in the parallel

00:00:10.180 --> 00:00:14.587
algorithms literature, you'll sometimes
see such loops described as for-any

00:00:14.587 --> 00:00:16.800
loops or for-all loops.

00:00:16.800 --> 00:00:18.860
So what does a par-for mean?

00:00:18.860 --> 00:00:19.930
When you use a par-for,

00:00:19.930 --> 00:00:24.470
you're saying that all iterations
are independent of one another.

00:00:24.470 --> 00:00:27.910
In other words, you can execute
the iterations in any order.

00:00:27.910 --> 00:00:33.830
To put it in DAG terms, a par-for
creates n independent sub paths.

00:00:33.830 --> 00:00:38.400
You can think of this as executing n
independent spawns simultaneously if

00:00:38.400 --> 00:00:39.610
such a thing were possible.

00:00:39.610 --> 00:00:43.310
Hey, what does he mean if
such a thing were possible?

00:00:43.310 --> 00:00:46.780
That's smells suspiciously like a quiz.

00:00:46.780 --> 00:00:48.270
Now by convention,

00:00:48.270 --> 00:00:53.040
the end of a par-for loop will
include an implicit sync point.

00:00:53.040 --> 00:00:58.030
The implicit sync point will force all
of these independent paths to join.

00:00:58.030 --> 00:01:01.600
Now suppose every iteration
has a constant cost.

00:01:01.600 --> 00:01:05.890
That is, imagine calling foo(i)
is bounded by a constant.

00:01:05.890 --> 00:01:10.930
If there are n iterations then
the work of a par-for is just O(n).

00:01:10.930 --> 00:01:12.740
So what about the span?

00:01:12.740 --> 00:01:16.270
Now in theory if all these foos have
constant cost then you would think

00:01:16.270 --> 00:01:19.388
that the span is basically a constant.

00:01:19.388 --> 00:01:23.180
But in practice what you should expect
to see is that the span will actually

00:01:23.180 --> 00:01:26.560
grow with n especially
when n is really big.

00:01:26.560 --> 00:01:28.280
If you have, say,
an electrical engineering or

00:01:28.280 --> 00:01:31.700
circuit background,
imagine trying to build a circuit

00:01:31.700 --> 00:01:36.190
that has 100 million paths
coming out of a gate.

00:01:36.190 --> 00:01:39.340
So to understand this point,
I want you to think about two different

00:01:39.340 --> 00:01:44.700
implementations of a par-for using only
spawn and sync, and see what happens.

