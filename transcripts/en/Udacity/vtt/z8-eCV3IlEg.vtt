WEBVTT
Kind: captions
Language: en

00:00:00.210 --> 00:00:03.400
So if we go back now to our question, are threads useful?

00:00:04.400 --> 00:00:07.490
We realize that the answer is not so simple.

00:00:07.490 --> 00:00:09.850
We cannot simply say, yes, threads are useful.

00:00:09.850 --> 00:00:13.060
We know that the answer of the question will depend on the metrics that we're

00:00:13.060 --> 00:00:14.190
interested in.

00:00:14.190 --> 00:00:15.870
Also, it will depend on the workload.

00:00:15.870 --> 00:00:20.110
We saw in the toy shop example where we compared the boss worker and

00:00:20.110 --> 00:00:25.040
the pipeline model that the answer as to which model is better dependent on

00:00:25.040 --> 00:00:29.080
the number of toys that need to be processed to the number of orders.

00:00:29.080 --> 00:00:33.860
So in the toy shop example, depending on the workload, the toy orders, and

00:00:33.860 --> 00:00:35.980
metrics we were concerned in,

00:00:35.980 --> 00:00:39.770
it lead us to conclusion that a different implementation of the toy shop,

00:00:39.770 --> 00:00:43.000
a different way to organize its workers was a better one.

00:00:43.000 --> 00:00:44.450
If you look at other domains, for

00:00:44.450 --> 00:00:47.990
instance, if we think about graphs and graph processing.

00:00:47.990 --> 00:00:52.090
Depending on the kind of graph, how well connected it is,

00:00:52.090 --> 00:00:57.200
it may be suitable to choose different type of shortest path algorithm.

00:00:57.200 --> 00:01:01.890
Some shortest path algorithms are known to work well on densely connected

00:01:01.890 --> 00:01:06.120
graphs whereas others work better for sparsely connected graphs.

00:01:06.120 --> 00:01:09.350
So again, the workload is something that we're interested in.

00:01:09.350 --> 00:01:13.320
When comparing file systems, maybe what's important to consider is the,

00:01:13.320 --> 00:01:14.000
the patterns.

00:01:14.000 --> 00:01:16.770
The file, some file systems may be better for

00:01:16.770 --> 00:01:20.720
predominantly read accesses whereas others are better for

00:01:20.720 --> 00:01:24.690
more of a mixed workload, where files are both read and updated.

00:01:24.690 --> 00:01:28.860
The point of looking at all of these is that across the board, both for

00:01:28.860 --> 00:01:33.600
the first question as well as in these other cases, the answer of whether

00:01:33.600 --> 00:01:37.850
something is better than an alternative implementation or

00:01:37.850 --> 00:01:41.120
an algorithm, it's pretty much always it depends.

00:01:41.120 --> 00:01:42.560
Depending on the file pattern,

00:01:42.560 --> 00:01:46.740
depending on the graph, depending on the number of toy orders.

00:01:46.740 --> 00:01:48.480
So similarly, the answer to,

00:01:48.480 --> 00:01:53.180
are threads useful isn't really going to be a straightforward yes and no one.

00:01:53.180 --> 00:01:55.880
It's really going to depend on the context in which we're

00:01:55.880 --> 00:01:58.610
trying to answer this question.

00:01:58.610 --> 00:02:02.560
And while we are at this, it depends, answer, you should know

00:02:02.560 --> 00:02:07.570
that it's pretty much always the correct answer to a question in systems.

00:02:07.570 --> 00:02:09.860
However, it's never going to be an accepted one.

00:02:09.860 --> 00:02:13.130
I will not take it as accepted answer in this course either.

00:02:13.130 --> 00:02:16.260
For the remainder of this lecture,

00:02:16.260 --> 00:02:20.950
we will to answer a specifically, whether threads are useful.

00:02:20.950 --> 00:02:25.290
And when are threads more or less useful when comparing

00:02:25.290 --> 00:02:29.730
a multithreaded-based implementation of a problem to some alternatives.

00:02:29.730 --> 00:02:34.220
I will also provide you with some guidance on how to define some useful metrics,

00:02:34.220 --> 00:02:36.740
and how to structure experimental evaluations, so

00:02:36.740 --> 00:02:38.630
that you can correctly measure such metrics.

