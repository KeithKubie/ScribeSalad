WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.300
&gt;&gt; FURNICA: Hello. I'm--and welcome to the
YouTube API talk. I am part of the YouTube

00:00:06.300 --> 00:00:08.889
API Team I'm a software engineer, I'm Raul
Furnica.

00:00:08.889 --> 00:00:11.620
&gt;&gt; NOACK: I'm also a part of the YouTube API
Team, I am Gunther Noack.

00:00:11.620 --> 00:00:16.520
&gt;&gt; FURNICA: And we have a third member of
the API team present here, Evan, over there.

00:00:16.520 --> 00:00:23.980
We're all based in Zurich and we work--all
work at YouTube/Google from there. So we're

00:00:23.980 --> 00:00:30.210
kind of jetlagged right now, we just arrived
yesterday. But hopefully we'll get through

00:00:30.210 --> 00:00:38.440
very well. Today, we're going to talk about
the YouTube API in general. And this is going

00:00:38.440 --> 00:00:42.879
to be an introduction to the YouTube API and
how to use it. And we're going to have a demo

00:00:42.879 --> 00:00:48.449
at the end.
&gt;&gt; NOACK: And also there's--so that, in order

00:00:48.449 --> 00:00:52.570
to clarify there's--sometimes there's a misconception
because YouTube actually has two different

00:00:52.570 --> 00:00:58.231
types of API. There's the data APIs and the
player APIs. And the player APIs is what you--what

00:00:58.231 --> 00:01:02.819
you want to use if you want to actually play
YouTube videos inline into your specific web

00:01:02.819 --> 00:01:07.219
apps for instance. And that's not what we're
going to talk about. What we're going to talk

00:01:07.219 --> 00:01:11.840
about is the data APIs. That's more about
fetching metadata, about different entities

00:01:11.840 --> 00:01:13.060
on YouTube playlist, videos and all that.
Yes.

00:01:13.060 --> 00:01:21.079
&gt;&gt; FURNICA: At least we're not going to talk
too much about the player APIs. If you have

00:01:21.079 --> 00:01:29.111
any feedback you can give it during the talk
over here. Do I need to leave this slide out

00:01:29.111 --> 00:01:35.610
for a while and [INDISTINCT] Kenneth or you're
already done? Okay. Before we go on and we're

00:01:35.610 --> 00:01:39.720
going to talk--or we're going to present the
agenda of the talk. I'm actually interested

00:01:39.720 --> 00:01:45.850
if anybody have--any of you have used the
YouTube API before or if any of you have created

00:01:45.850 --> 00:01:53.529
YouTube applications? Okay. Cool. Okay so,
for the agendum?

00:01:53.529 --> 00:02:01.150
&gt;&gt; NOACK: Yes. So, what we're going to show
you today is--we're going to teach you a little

00:02:01.150 --> 00:02:08.259
bit about ways that you can use to build applications
that are integrated within the YouTube experience

00:02:08.259 --> 00:02:17.670
and that you can use to explore the YouTube
video content. And so, what we're going to

00:02:17.670 --> 00:02:24.150
emphasize in this talk is first, the content
discovery, and second, video curation. So,

00:02:24.150 --> 00:02:32.349
in this case that's going to be building a
playlist. Yes, that's what we're going to

00:02:32.349 --> 00:02:37.510
show. In the end there's--so in the middle,
we're also going to show a little--talk very

00:02:37.510 --> 00:02:44.130
shortly about user authentication because
that's also needed for doing--write accesses

00:02:44.130 --> 00:02:48.069
and we're all--and in the end we're going
to give a short outlook of what else you can

00:02:48.069 --> 00:02:52.480
find in the YouTube API because it's very
large actually. And we're going to show you

00:02:52.480 --> 00:02:57.439
a little app Engine demos as well. And there's
going to be questions, yes, I hope.

00:02:57.439 --> 00:03:02.260
&gt;&gt; FURNICA: We're also going to be at the
office [INDISTINCT] in one quarter after the

00:03:02.260 --> 00:03:08.060
talk. So you can talk to us directly there.
&gt;&gt; NOACK: Yes. So first, I'm going to tell

00:03:08.060 --> 00:03:19.360
you a bit about content discovery. So, [INDISTINCT]
here. So maybe you've--if you've got a cellphone

00:03:19.360 --> 00:03:22.760
you could--you could scan this link now and
see what you--what you can find.

00:03:22.760 --> 00:03:24.730
&gt;&gt; FURNICA: We're trying to keep it very interactive
because otherwise you'd get bored and we'd

00:03:24.730 --> 00:03:34.989
get bored, and that's not good.
&gt;&gt; NOACK: So...

00:03:34.989 --> 00:03:40.430
&gt;&gt; FURNICA: Anybody got an answer from the
URL above?

00:03:40.430 --> 00:03:51.560
&gt;&gt; NOACK: What do you see? I hope no one's
gotten 500 [INDISTINCT] or so. So what you

00:03:51.560 --> 00:03:59.459
should have seen, and I hope you have all
seen it, is--[INDISTINCT] my response. And

00:03:59.459 --> 00:04:05.049
so, you are now officially already YouTube
API user. We're very proud to have so many

00:04:05.049 --> 00:04:14.050
users. All of a sudden. So, what--how you
do request to the YouTube API? It's basically

00:04:14.050 --> 00:04:24.330
very simple. It's mostly--most of our request
are just done via http. You construct a URL

00:04:24.330 --> 00:04:29.560
like this one. Don't look at it too closely
now, we're going to explain the details later.

00:04:29.560 --> 00:04:36.660
And you send a regular http request to this
URL. Usually it's going to be a get and you're

00:04:36.660 --> 00:04:43.970
going to get an answer that's in form of an
XML reply. We're adhering to the atom standard

00:04:43.970 --> 00:04:50.310
there, that's a bit like our access. And actually
our APIs are also based on atom pop, which

00:04:50.310 --> 00:04:56.280
is--which was meant for web blocks originally
but which we extended to also have this--all

00:04:56.280 --> 00:05:02.199
these video metadata. And so--and on this
slide you can see two of the most important

00:05:02.199 --> 00:05:07.470
tricks that you--those--so these are really
the most important things that you will, hopefully

00:05:07.470 --> 00:05:13.300
take from this session. So, first, if you
do any API request, you're going to get a

00:05:13.300 --> 00:05:17.690
very ugly response because you try to limit
the bandwidth used for it. Because we--many

00:05:17.690 --> 00:05:23.840
of our customers are on mobiles for instance.
So if you add the http for &amp;prettyprint=true

00:05:23.840 --> 00:05:32.130
to this--to this URL, you're going to get
prettyprint to the answer, that's a big help

00:05:32.130 --> 00:05:40.040
in debugging. And then secondly, there's this
page called gdata.youtube.com which is also

00:05:40.040 --> 00:05:47.949
our--the base of the URL for the YouTube API
which looks like this. And what you can do

00:05:47.949 --> 00:05:52.580
there is you can experiment with the different
features that the YouTube API offers to you.

00:05:52.580 --> 00:05:59.930
So we've got listed most of our features that
we exposed through the API and you can very

00:05:59.930 --> 00:06:05.600
simply put together--it's context sensitivity
depending on which service you choose. On

00:06:05.600 --> 00:06:09.800
top, you're going to get-- you're going to
get different interface and you can construct

00:06:09.800 --> 00:06:16.050
a query interactively, you're going to--going
to see the http headers and URL and you're

00:06:16.050 --> 00:06:20.340
going to see the whole response with syntax
highlighting, all of that. It's--that is very

00:06:20.340 --> 00:06:24.800
useful for exploring. So if you're-- if you're
ever going to build an app, and I hope, of

00:06:24.800 --> 00:06:31.610
course, you will do this, then this is really
the--this is the tool to use in order to figure

00:06:31.610 --> 00:06:41.030
out how this--how it works in the big picture.
Okay. So--and--so back to our short example.

00:06:41.030 --> 00:06:45.889
So this is the response you are supposed to
get after scanning this QR code.

00:06:45.889 --> 00:06:51.710
&gt;&gt; FURNICA: Different titles, though.
&gt;&gt; NOACK: What it is, is--we've got two different

00:06:51.710 --> 00:06:57.569
ways of exploring--of discovering content
on YouTube via the API. The first of them

00:06:57.569 --> 00:07:02.069
is equivalent to the--to the browse pages
on YouTube. Where you--where you can--where

00:07:02.069 --> 00:07:09.910
you can browse through different high scores,
charts of videos and in this case, you've

00:07:09.910 --> 00:07:18.419
requested one of these particular charts called
On The Web, which is our--which is actually

00:07:18.419 --> 00:07:25.759
this little web block that is--that exists
on the side of YouTube which highlights some

00:07:25.759 --> 00:07:31.930
recent trending videos on social networks
on the web. And we put together a list that

00:07:31.930 --> 00:07:39.330
is also here on the right. And this contains
the currently trending videos on social networks.

00:07:39.330 --> 00:07:44.630
And that you can request through this particular
URL. And this...

00:07:44.630 --> 00:07:53.000
&gt;&gt; FURNICA: So it's--just to add to what Gunther
said, it's basically just most shared videos

00:07:53.000 --> 00:07:58.330
on other sites for instance, or most used
videos on other sites on this particular.

00:07:58.330 --> 00:08:02.970
&gt;&gt; NOACK: And we've got different way--we've
got different charts, of course. We don't

00:08:02.970 --> 00:08:06.500
only have these things that are trending on
the web. We also have the things that are

00:08:06.500 --> 00:08:12.280
trending on YouTube itself. And we've got
the--we've get high scores of the top most

00:08:12.280 --> 00:08:17.159
viewed, most popular, most recent, most discussed
videos and all that. And in order to get them,

00:08:17.159 --> 00:08:22.449
you take this URL and you replaced the part
that says On The Web with one of these keywords

00:08:22.449 --> 00:08:29.630
here. But there is much more. So we've got
all of that in our documentation page and

00:08:29.630 --> 00:08:37.840
you can check it out. Yes, so, and what it
will return you is this--is this XML and in

00:08:37.840 --> 00:08:42.000
this case it's a bit trimmed down but it actually
contains a lot of different information about

00:08:42.000 --> 00:08:47.250
the videos. So we've got the--not only the
video title of course, we also have streaming

00:08:47.250 --> 00:08:54.570
URLs if you want to show it in a player. We've
got descriptions, of course. We've got different

00:08:54.570 --> 00:08:56.910
user ratings. We've got--what else do we have?
&gt;&gt; FURNICA: Thumbnails, of course.

00:08:56.910 --> 00:09:00.590
&gt;&gt; NOACK: Thumbnails, of course.
&gt;&gt; FURNICA: Basically everything about...

00:09:00.590 --> 00:09:04.910
&gt;&gt; NOACK: It's pretty large. It is about--on
a--on a regular screen, it's about this size

00:09:04.910 --> 00:09:08.430
for a single video. So we have lots of information.
&gt;&gt; FURNICA: Most of the screen.

00:09:08.430 --> 00:09:13.260
&gt;&gt; NOACK: Yes.
&gt;&gt; FURNICA: So in the discovery part, that's

00:09:13.260 --> 00:09:18.970
basically the very first step in actually
finding out great content on YouTube, to basically

00:09:18.970 --> 00:09:26.940
use the pre-made list of YouTube. And YouTube
has a couple of pre-made list as Gunther mentioned

00:09:26.940 --> 00:09:31.261
but if you want to use a more powerful search--a
more powerful tool and you want to actually

00:09:31.261 --> 00:09:39.740
build your own list, then search might be
one of the options have to use. And to run

00:09:39.740 --> 00:09:44.320
a YouTube API search is basically as easy
as running the URL you see above there with

00:09:44.320 --> 00:09:49.710
a query term and a version parameter. The
version parameter basically states which API

00:09:49.710 --> 00:09:54.720
version you're going to use right now. You're
going to--you should be using version 2 right

00:09:54.720 --> 00:10:02.710
now. It's the latest version of the API. And
there's no sense in using version one anymore.

00:10:02.710 --> 00:10:08.850
The query parameter basically might just be
any full text query parameter you might send

00:10:08.850 --> 00:10:14.710
on YouTube. And for instance, right now, we're
just searching for football videos. And while

00:10:14.710 --> 00:10:18.450
I'm starting very simple I'm going to walk
you through a couple of further parameters

00:10:18.450 --> 00:10:24.060
you can add and customize your search so it
make it a very powerful tool to actually find

00:10:24.060 --> 00:10:30.410
interesting videos in YouTube. Each slide
I'm going to go through actually it's going

00:10:30.410 --> 00:10:34.890
to add two parameters. One is technical, how
do you filter out or how do you manipulate

00:10:34.890 --> 00:10:42.081
the response? And one is on the content of
the sets of videos you get. In this slide,

00:10:42.081 --> 00:10:47.480
on the content of the sets of videos you have,
you can [INDISTINCT]. That's a very important

00:10:47.480 --> 00:10:53.360
tool to actually select first videos that
are either most relevant to the query term

00:10:53.360 --> 00:11:01.730
you were searching for or most recent under
the published ordering or have most view counts

00:11:01.730 --> 00:11:09.490
or have best ratings. Those are the options
you have right now to order by. And the second

00:11:09.490 --> 00:11:15.370
parameter I mentioned now is the technical
part of--the slide is basically filled because

00:11:15.370 --> 00:11:21.400
the API response contains so much information
about a video. It has some thumbnails, it

00:11:21.400 --> 00:11:27.640
has ratings, number of comments, so on, you
probably want to trim down out of the response

00:11:27.640 --> 00:11:33.270
particularly to the part of the metadata of
the video that you were interested in. That

00:11:33.270 --> 00:11:38.520
saves bandwidth, and that saves processing
on the client side, and you don't need to

00:11:38.520 --> 00:11:42.840
parse this, some are already adjacent response
for anything you're not interested. And that--the

00:11:42.840 --> 00:11:48.390
field is a great way to do it. So, for instance
here I'm just saying I want the author of

00:11:48.390 --> 00:11:54.810
the video and the title of the video. Anything
else I don't care, so it shouldn't be returned.

00:11:54.810 --> 00:11:59.950
So, let's say we're searching for football.
By the way, we actually get some content that

00:11:59.950 --> 00:12:03.980
we don't want to see, we get some European
football, like, where we come from. And that's

00:12:03.980 --> 00:12:09.990
not really football, right? So, we take it
out with -soccer on the--on the search term.

00:12:09.990 --> 00:12:18.130
So, basically the search term accepts any
Google search operators, if you know about

00:12:18.130 --> 00:12:22.510
those. You can read about those later into
the documentation of Google Search. But you

00:12:22.510 --> 00:12:29.460
can say -soccer to exclude everything that
is related to soccer. And that gives us smart

00:12:29.460 --> 00:12:34.940
accurate responses for what we want but even
that is not enough. So, we want--even though

00:12:34.940 --> 00:12:41.180
we ordered by video count. And we want basically
those videos that have been watched a lot

00:12:41.180 --> 00:12:46.850
lately. We don't want those videos that have
been watched a lot for the entire time they've

00:12:46.850 --> 00:12:51.100
been uploaded for, right? So, we want something
recent. Let's say, we know something happened

00:12:51.100 --> 00:12:57.240
in football last week. So, then we can add
time=this_week. And that restricts our search

00:12:57.240 --> 00:13:05.940
for only videos that have been uploaded during
this week. You can also change that time into

00:13:05.940 --> 00:13:10.570
today which gets us the freshest videos basically.
You can say this month and you can say all

00:13:10.570 --> 00:13:17.380
the time. By default, it's all time. And on
the technical side--so, not actually changing

00:13:17.380 --> 00:13:27.250
the content of certain responses, the paging,
so. By default, API pages are 25 entries and

00:13:27.250 --> 00:13:34.600
they start from one. But you can do paging
as you want. So, start from 10 and have a

00:13:34.600 --> 00:13:42.850
page that starts on 5. And that's basically
starting next and max result. And, yes, by

00:13:42.850 --> 00:13:47.770
the way, I've added this URL on top of the
slide. So, you can actually try all this on

00:13:47.770 --> 00:13:54.920
your phone or on your [INDISTINCT] later--or
now. They're very simple to run right now.

00:13:54.920 --> 00:14:04.810
So, latest that--you can add safeSearch which
is basically a restriction on the content

00:14:04.810 --> 00:14:11.940
that is--yes, we don't want videos that are
not safe for children or we don't want videos

00:14:11.940 --> 00:14:16.840
that are not safe for certain audiences. And
that's basically safeSearch which has three

00:14:16.840 --> 00:14:23.270
options; none, moderate, and strict. It's
again compatible with Google search which

00:14:23.270 --> 00:14:29.650
has the same options and the same meanings
for each. And on the--and again on the technical

00:14:29.650 --> 00:14:37.900
side we have two more parameters we're introducing
here, alt and callback. Alt basically changes

00:14:37.900 --> 00:14:44.440
the format of the API. So, the API is very
feature rich and offers a lot of different

00:14:44.440 --> 00:14:51.350
ways to read the metadata of the video and
parse it. We talk mostly about XML right now.

00:14:51.350 --> 00:14:56.890
So, you're going to have an XML partner but
that may not be what you're most comfortable

00:14:56.890 --> 00:15:03.760
with or much--what you can use in your application.
So, you can change that with the alt parameter.

00:15:03.760 --> 00:15:09.130
And you can say atom, rss, they're both XML.
And rss, basically, it's one of the basic

00:15:09.130 --> 00:15:15.950
usage of the API. You can use rss to follow
your friend uploads for instance, and just

00:15:15.950 --> 00:15:23.170
have it in [INDISTINCT] and see when he uploads
a new video. Json and json-in-script, or jsonc

00:15:23.170 --> 00:15:31.520
are basically more [INDISTINCT] script options.
That and--json parses are all over this space

00:15:31.520 --> 00:15:37.920
and they are available in all languages. And
lastly, if you use json-in-script you can

00:15:37.920 --> 00:15:43.390
provide a callback and my colleague, Gunther,
is going to explain how that works.

00:15:43.390 --> 00:15:55.990
&gt;&gt; NOACK: So--test good, okay. So, this is--this
is a sample response that you may get when

00:15:55.990 --> 00:16:09.370
you--when you pass these alt=json-in-script&amp;callback=showVideos
to one of our URLs, to one of our feeds. And

00:16:09.370 --> 00:16:15.660
so what this looks like is, this is of course
a regular json. So, it's JavaScript syntax,

00:16:15.660 --> 00:16:20.910
you can put it into any JavaScript interpreter
and it will result in a JavaScript dictionary

00:16:20.910 --> 00:16:31.450
which you can use to query it up basically.
And because--so without this part that says

00:16:31.450 --> 00:16:37.010
showVideos that would be--so only this part
that would be the answer that would--that

00:16:37.010 --> 00:16:43.240
you would get if you ask for alt=json. But
with alt=jsonc-in-script, you also get this

00:16:43.240 --> 00:16:50.050
fancy showVideos color around it which is
of course if you'll interpret it as a JavaScript

00:16:50.050 --> 00:16:54.910
code--as a JavaScript source file is going
be a call to a regular JavaScript function

00:16:54.910 --> 00:17:01.690
and you can use that, that's called jsonp.
You can use that to build very simple web

00:17:01.690 --> 00:17:08.810
apps already like this one. So, what you can
see here is--we've got, don't look at this

00:17:08.810 --> 00:17:15.860
part currently, [INDISTINCT] whoops. What
we've got is--we've got a simple HTML page

00:17:15.860 --> 00:17:23.740
and here we simply source with the script
tag, a JavaScript source file that is actually

00:17:23.740 --> 00:17:33.290
located at this URL which is our--which is
one of our URLs. And because we pass alt=json-in-script&amp;callback=showVideos,

00:17:33.290 --> 00:17:38.060
we're going to get this response. And it's
going to call the showVideos function with

00:17:38.060 --> 00:17:44.370
this--with this JavaScript dictionary. And
we just have to define the showVideos function

00:17:44.370 --> 00:17:51.490
on top of that and make it--add some HTML
elements corresponding to these videos to

00:17:51.490 --> 00:17:57.440
our HTML page. And what we're going to get
is already a very simple search application

00:17:57.440 --> 00:18:04.320
that--oh, yes, it's in the other window. There
it is. [INDISTINCT]

00:18:04.320 --> 00:18:09.140
&gt;&gt; FURNICA: So, basically this is already
a high interpretation for YouTube API and

00:18:09.140 --> 00:18:19.200
it's just code that fits the slide.
&gt;&gt; NOACK: Yes. Okay. So, and then, now of

00:18:19.200 --> 00:18:23.360
course, we have all these fancy videos and
we would like to introduce something with

00:18:23.360 --> 00:18:28.700
them because that code does not do much yet.
And one of the things you can do with them

00:18:28.700 --> 00:18:34.160
is that you can enable to use this to curate
that into individual playlist and organize

00:18:34.160 --> 00:18:40.040
it and that's what Raul is going to show you.
But first before you can--before you can organize

00:18:40.040 --> 00:18:47.910
this playlist, there's one particularly not
very nice prerequisite that you have to fulfill

00:18:47.910 --> 00:18:52.540
and that's of course that you have to be authenticated.
And there's different authentication schemes.

00:18:52.540 --> 00:18:58.700
So, we're going have you--have to leave you
with a bit of device about this. And it's

00:18:58.700 --> 00:19:03.630
basically going to be this. We've got four
different authentications schemes unfortunately.

00:19:03.630 --> 00:19:09.640
So, that's, of course, historically grown.
We have one that is called ClientLogin which

00:19:09.640 --> 00:19:17.190
is deprecated nowadays. It is deprecated because
with this authentication scheme the user has

00:19:17.190 --> 00:19:21.080
got to trust the application with his actual
user name and with his password. And it's

00:19:21.080 --> 00:19:28.370
not a token based system like OAuth where
the--where YouTube itself does the authentication

00:19:28.370 --> 00:19:35.830
or only allows the application to work with
it later. And--so, the other three authentications

00:19:35.830 --> 00:19:40.300
scheme solved that in this way. So, the users
are going to be redirected to the YouTube

00:19:40.300 --> 00:19:46.480
page for instance and the YouTube page will
ask him whether he wants to allow this application

00:19:46.480 --> 00:19:54.120
to access his data on YouTube. And so AuthSub
is a Google specific solution to that which

00:19:54.120 --> 00:20:00.470
is supported. And then there's also OAuth
1 and OAuth 2. We currently prefer OAuth 2

00:20:00.470 --> 00:20:04.420
because it's the most recent version. The
advantage for OAuth 2 is of course that it's

00:20:04.420 --> 00:20:09.390
OpenSource, and that it's used widely, and
there are client libraries for it. And that

00:20:09.390 --> 00:20:18.620
may help you with implementing it. So--but
the big advice basically is choose wisely.

00:20:18.620 --> 00:20:23.880
If you have your--if you're writing an application
and you write it in a specific environment,

00:20:23.880 --> 00:20:31.090
specific language, just see that you can get
the most support for any of these login schemes

00:20:31.090 --> 00:20:37.530
except ClientLogin. Yeah. Okay. And we've
got lots of material on that in our blog.

00:20:37.530 --> 00:20:43.930
&gt;&gt; FURNICA: So anybody--anybody knows about
OAuth already? Oh, wow, that's more than I

00:20:43.930 --> 00:20:45.480
expected, okay. Cool.
&gt;&gt; NOACK: Okay. [INDISTINCT]

00:20:45.480 --> 00:20:51.420
&gt;&gt; FURNICA: So, yes, it's not a Google specific
technology, it's an OpenSource standard and

00:20:51.420 --> 00:20:56.580
Google is implementing it as well. So that's
basically best to use in user authentication.

00:20:56.580 --> 00:21:07.940
Anybody knows why you would use user authentication
or has a clear idea about why that's useful?

00:21:07.940 --> 00:21:14.970
Okay. So basically it's very useful--I'm going
to go through that in the second curation

00:21:14.970 --> 00:21:19.910
part of the talk. But it's very useful basically
if you want to get to the user account data,

00:21:19.910 --> 00:21:25.310
right? So if you want to either retrieve information
about the user account re-login or allow the

00:21:25.310 --> 00:21:30.350
user currently to login and give your application
access to his account data, or if you want

00:21:30.350 --> 00:21:34.300
to change his account data. So if you want
to create a playlist for instance for the

00:21:34.300 --> 00:21:47.310
user. Or if you want to update their favorites
or their ratings, or so on. So, in this particular

00:21:47.310 --> 00:21:52.580
talk we're going to focus on playlist but
there is a lot of other things we can do with

00:21:52.580 --> 00:22:01.520
authentication. So let's say you find a great
lot of video content out there for using the--in

00:22:01.520 --> 00:22:07.050
the method mentioned in the first part of
the--of the talk and now you want to actually

00:22:07.050 --> 00:22:15.520
help users save his content into their playlist
or keep it somewhere so that he can refind

00:22:15.520 --> 00:22:22.490
it easily without actually searching all the
time. The first thing we need to do in order

00:22:22.490 --> 00:22:29.820
to take one of the videos we find interesting
and put it in a playlist is basically to see

00:22:29.820 --> 00:22:36.770
what playlist the user actually has already.
To do that we need to go through authentication

00:22:36.770 --> 00:22:42.230
which is probably the most painful point we're
actually describing in this--in this talk.

00:22:42.230 --> 00:22:47.420
And once you get that done, everything is
like super easy. It's like--but only that--it's

00:22:47.420 --> 00:22:53.420
like you're probably going to spend a couple
of days figuring out what the hell is going

00:22:53.420 --> 00:23:01.110
on here? It's our experience as well. Like
we've build a demo for this--for this presentation

00:23:01.110 --> 00:23:05.940
in particular and we were like that as well,
"Oh my god. How do I get this going?" But,

00:23:05.940 --> 00:23:14.190
yes, it gets better with the--with the demo
we actually have because you can see the code

00:23:14.190 --> 00:23:22.360
and learn from our own experience. So once
we go through that and we have user authenticated

00:23:22.360 --> 00:23:26.630
and let's say we are already sending the authorization
header which you already see there in the

00:23:26.630 --> 00:23:35.520
request on under OAuth authorization http
header. Then we can basically retrieve a feed

00:23:35.520 --> 00:23:42.070
under feeds/API/users/default/playlists. All
the user information--all this user's specific

00:23:42.070 --> 00:23:48.670
information in YouTube API is basically under
feeds/API/users, under that path, and default

00:23:48.670 --> 00:23:53.450
is basically just the way to say the currently
login users. So you don't really need to remember

00:23:53.450 --> 00:23:58.090
the user name of the currently login user
or anything like that. You can always follow

00:23:58.090 --> 00:24:04.330
the same URL and use the default playlist
[INDISTINCT] to refer to the current user.

00:24:04.330 --> 00:24:11.240
So, this feed would list all the playlist
on that account. So, we here have listed playlist

00:24:11.240 --> 00:24:15.460
on a YouTube account, YouTube basically has
its own account, we just call YouTube and

00:24:15.460 --> 00:24:23.930
it's on YouTube so you can actually get it
if you want. You can retrieve it on YouTube.com.

00:24:23.930 --> 00:24:31.070
And right now I'm listing the last two playlist
on that account. And the most important part

00:24:31.070 --> 00:24:37.590
to check in this is basically that the playlist
has an ID which is highlighted there--that

00:24:37.590 --> 00:24:42.370
is the part of the ID that is used on the
website as well, so the website and the API

00:24:42.370 --> 00:24:49.600
actually share IDs and that is the part you
need to remember in order to be able to refer

00:24:49.600 --> 00:24:58.600
to this playlist later. So, we can take a
list of playlists, show it to the user in

00:24:58.600 --> 00:25:06.020
someway and then asked him to select one of
them in order to update with his video findings.

00:25:06.020 --> 00:25:13.770
And then if we actually want to save a video
he actually likes into one of those playlists,

00:25:13.770 --> 00:25:20.390
all we need to do is write request. A write
request is unlike the request we showed you

00:25:20.390 --> 00:25:25.950
so far, unlike the--a simple http get, so
a simple return from a URL. They're opposed

00:25:25.950 --> 00:25:33.780
to a URL or, in some cases, when you actually
modified the reboot, or if you delete, they

00:25:33.780 --> 00:25:42.680
are delete to an http URL. So for instance,
if we have one thread of video with the ID

00:25:42.680 --> 00:25:52.540
highlighter there, OaRI so on, to the playlist
with the ID D7002B and so on--I'm just talking

00:25:52.540 --> 00:25:57.170
IDs here, that's very boring but you kind
of get the idea. You need a playlist ID to

00:25:57.170 --> 00:26:02.070
form the URL, which playlist am I adding it
to. And you need a video ID to say which video

00:26:02.070 --> 00:26:07.150
I might add to that playlist. The video ID
goes into the request body and that's all

00:26:07.150 --> 00:26:12.180
you need to sign in the request body, that
you see right there, so an entry with an ID

00:26:12.180 --> 00:26:17.760
that's it. And then if that is successful
you're going to get a response of 201 created.

00:26:17.760 --> 00:26:29.210
And it's going to give you a full body of
the entry that has been created in that playlist.

00:26:29.210 --> 00:26:32.100
There are--many are--there are unresponses
you can get, but hopefully you'll get this

00:26:32.100 --> 00:26:38.331
one and that means your operation was successful.
The most unlikely to get one, trust me, it's

00:26:38.331 --> 00:26:46.010
500 server unavailable. We're trying to avoid
that as much as possible, if that's happening

00:26:46.010 --> 00:26:53.821
just let us know. There is a forum we're going
to tell you about it at the end. Another one

00:26:53.821 --> 00:27:01.559
that may happen is 403 service forbidden.
What that means is either that you have not

00:27:01.559 --> 00:27:07.360
authenticated the user currently. So, he's
not allowed to change the playlist because

00:27:07.360 --> 00:27:12.830
he's not authenticated, or the recent authenticated
user but he's not the owner of that playlist

00:27:12.830 --> 00:27:17.710
so he cannot make the change. That would be
quite something right? [INDISTINCT] allow

00:27:17.710 --> 00:27:22.491
people to change other people's playlist.
That, hopefully, doesn't happen either. And

00:27:22.491 --> 00:27:27.080
since I talked a lot about the IDs, what you're
going to see after the playlist entry has

00:27:27.080 --> 00:27:39.000
been created is basically a composite ID of
the playlist ID and the entry ID in that playlist.

00:27:39.000 --> 00:27:45.830
And basically it's as simple as that as creating
and managing a playlist. You can do a lot

00:27:45.830 --> 00:27:52.981
more. You can reorder playlist. You can implement
even a better playlist experience than the

00:27:52.981 --> 00:27:57.750
YouTube website which is not really awesome
right now, it could be made better, so. All

00:27:57.750 --> 00:28:06.520
of that is basically available through the
API and it's really almost the same functionality

00:28:06.520 --> 00:28:11.700
[INDISTINCT] on the website for almost everything.
But besides that let's talk about a bit of

00:28:11.700 --> 00:28:17.371
other features available in the YouTube API,
and one of the most important ones is basically

00:28:17.371 --> 00:28:26.381
the ability to upload of videos. And you can
do that through the upload API and basically

00:28:26.381 --> 00:28:33.800
anything you can capture a video with and
send it over to--through the API server, it's

00:28:33.800 --> 00:28:41.140
creating a video on a YouTube site. You don't
need to actually specify metadata so you can

00:28:41.140 --> 00:28:46.180
just post a file and it's as simple as that,
as posting a file, and then the user is later

00:28:46.180 --> 00:28:50.660
asked to provide more metadata for the video,
but you can also provide metadata for the

00:28:50.660 --> 00:28:58.970
video in the same request as uploading the
video. There are a couple of community features

00:28:58.970 --> 00:29:06.059
expose through API as well so you can like/dislike
videos, you can rate videos, you can comment

00:29:06.059 --> 00:29:16.450
on videos, you can respond on videos with
another video. You can even share videos with

00:29:16.450 --> 00:29:24.960
your friends or with SMS or email. And besides
that, there are a couple user-centric features

00:29:24.960 --> 00:29:33.530
like managing favorites and subscriptions
and managing contacts on YouTube.com. And,

00:29:33.530 --> 00:29:38.890
of course last but not the least is following
your friends' activity, so you can actually

00:29:38.890 --> 00:29:44.860
see what are--what your friends are doing
or you can give, in your applications, updates

00:29:44.860 --> 00:29:53.830
about subscriptions and friends on YouTube.
There's a lot more than that but I think I'm

00:29:53.830 --> 00:29:59.920
not going to enumerate anymore because it's
going to take quite a lot. One thing to mention

00:29:59.920 --> 00:30:05.700
though is that we have a lot of client libraries
available for the YouTube data API. And they're

00:30:05.700 --> 00:30:12.990
all--you can check them out its goo.gl.MARLi.
I quite like--it was randomly generated, but

00:30:12.990 --> 00:30:23.320
it's quite a nice name. There is one for Java,
C++ and Python for sure. There might be others

00:30:23.320 --> 00:30:30.140
for JavaScript and other languages as well.
And there are also pointers to other languages

00:30:30.140 --> 00:30:40.970
as well, over there. So it's demo time and
you can scan this link and try it.

00:30:40.970 --> 00:30:57.330
&gt;&gt; NOACK: Take the mouse cursor out of the
way.

00:30:57.330 --> 00:31:30.309
&gt;&gt; FURNICA: Huh?
&gt;&gt; NOACK: [INDISTINCT] keep the mouse cursor

00:31:30.309 --> 00:31:31.620
[INDISTINCT]
&gt;&gt; FURNICA: [INDISTINCT]

00:31:31.620 --> 00:31:33.120
&gt;&gt; NOACK: [INDISTINCT] anyone or everyone
done [INDISTINCT]

00:31:33.120 --> 00:31:44.180
&gt;&gt; FURNICA: Okay. Yes, if scanning the bar
code doesn't work you can use the short URL

00:31:44.180 --> 00:31:48.929
on top.
&gt;&gt; NOACK: Oh, yes. It's here.

00:31:48.929 --> 00:31:51.050
&gt;&gt; FURNICA: We're prepared for anything. Just
to get it to demo.

00:31:51.050 --> 00:31:52.240
&gt;&gt; NOACK: Okay, we're going to switch over,
so.

00:31:52.240 --> 00:32:00.210
&gt;&gt; FURNICA: It's a very simple URL. It's a
YouTube--a YouTube API demo.atspat.com.

00:32:00.210 --> 00:32:02.040
&gt;&gt; NOACK: Not here. Not here. Not here. Where
is it?

00:32:02.040 --> 00:32:04.751
&gt;&gt; FURNICA: Here.
&gt;&gt; NOACK: [INDISTINCT] not to click it?

00:32:04.751 --> 00:32:07.049
&gt;&gt; FURNICA: No, go back. Here.
&gt;&gt; NOACK: Where?

00:32:07.049 --> 00:32:09.220
&gt;&gt; FURNICA: Here.
&gt;&gt; NOACK: Here. Here. Okay. [INDISTINCT] thanks.

00:32:09.220 --> 00:32:13.250
Okay, so that's--so that's our [INDISTINCT]
demo app. It's showing exactly what we also

00:32:13.250 --> 00:32:17.429
showed you in these--in these slides now.
&gt;&gt; FURNICA: So now we actually do what we

00:32:17.429 --> 00:32:20.120
talked about.
&gt;&gt; NOACK: Right. Here you cannot, by the way,

00:32:20.120 --> 00:32:28.140
also find this little JavaScript app that
fits on one page. So the way this app is build

00:32:28.140 --> 00:32:35.000
as a very simple overviews, it's built in
app engine, so it's a Java served engine and

00:32:35.000 --> 00:32:41.510
we do our API request service side. It really
depend--there is a--there are a lot of tricks

00:32:41.510 --> 00:32:47.340
we--for instance, first we try to build something
like that client-side. We figure out it's

00:32:47.340 --> 00:32:52.230
not actually possible because there's trust
[INDISTINCT] restrictions in where you can

00:32:52.230 --> 00:32:57.049
do your post request to and you can't actually
modify content on YouTube from the clients

00:32:57.049 --> 00:33:03.310
side and so this is because--so in this way
I would like--if you want to do something

00:33:03.310 --> 00:33:08.260
that modifies content on YouTube and--where
you just have to log in, then it is a good

00:33:08.260 --> 00:33:12.941
idea to do it server-side or at least in a
mix, so.

00:33:12.941 --> 00:33:18.100
&gt;&gt; FURNICA: That is of course if you're writing
server-side app like app engine. If you're

00:33:18.100 --> 00:33:21.820
doing an Android app or anything like that,
you just do it [INDISTINCT]

00:33:21.820 --> 00:33:25.890
&gt;&gt; NOACK: Yes, right. If you're not doing
a web based app it's different of course.

00:33:25.890 --> 00:33:33.050
&gt;&gt; FURNICA: Yes.
&gt;&gt; NOACK: Right. So, this is the various--this

00:33:33.050 --> 00:33:35.419
is the various [INDISTINCT]
&gt;&gt; FURNICA: Remember first slide?

00:33:35.419 --> 00:33:38.640
&gt;&gt; NOACK: First slide, exactly, about the
video charts, the different high scores, the

00:33:38.640 --> 00:33:44.680
videos that you can see on the--on the YouTube
page itself where you can--where you can brows

00:33:44.680 --> 00:33:56.170
videos, so yes, and what this does is basically--we've
got the source code to most of the servers

00:33:56.170 --> 00:33:58.610
on the side as well. [INDISTINCT] see this
[INDISTINCT]

00:33:58.610 --> 00:34:03.470
&gt;&gt; FURNICA: Yes, you have to--the app running
and then right next to it you have the code,

00:34:03.470 --> 00:34:08.680
so you can take it out. I don't know how many
of you read Java. I'm going to try to add

00:34:08.680 --> 00:34:13.750
even code for other languages. How many of
you use Java by the way?

00:34:13.750 --> 00:34:19.369
&gt;&gt; NOACK: [INDISTINCT] Java...
&gt;&gt; FURNICA: How many of you would use Python?

00:34:19.369 --> 00:34:22.379
And how many of you would use C or C++? Okay.
&gt;&gt; NOACK: Something completely different?

00:34:22.379 --> 00:34:24.560
&gt;&gt; FURNICA: So, we'll use [INDISTINCT] we
need Python here. Okay.

00:34:24.560 --> 00:34:31.630
&gt;&gt; NOACK: Okay, so here you can see that we
used exactly the same URL as you--as you've

00:34:31.630 --> 00:34:37.850
seen on the first slide. Without some of these
parameters which is--in this case handled

00:34:37.850 --> 00:34:42.940
by the client library mostly.
&gt;&gt; FURNICA: So basically we need two parts

00:34:42.940 --> 00:34:51.020
to actually make a successful client library
usage. Which is basically right here in YouTube

00:34:51.020 --> 00:35:00.550
get feed. I don't have a way to point, so
I'm doing manually but you need to have an

00:35:00.550 --> 00:35:06.560
application name and application key. And
I didn't talk a lot about that but you can--you

00:35:06.560 --> 00:35:12.530
can--if you need to write to the user account.
Then you need to register your application

00:35:12.530 --> 00:35:19.680
with YouTube. There are a couple of benefits
for doing that anyway, so if you register

00:35:19.680 --> 00:35:22.660
your application with YouTube and there is
a dashboard where you will be able to register

00:35:22.660 --> 00:35:28.890
it under your Google account, you get--you
basically get a lot more quota for your application,

00:35:28.890 --> 00:35:33.400
so you can--and that's of course because if
there is an abuse of your application from

00:35:33.400 --> 00:35:38.119
someone else and we know where it's coming
from and we can alert you and let you know.

00:35:38.119 --> 00:35:43.260
But besides that you're going to get really
nice graphs with your application traffic,

00:35:43.260 --> 00:35:47.380
so it's going to tell you like, "Oh, your
application is being used and in particular

00:35:47.380 --> 00:35:53.150
in these--in these features," and then that's
failing constantly and is producing errors

00:35:53.150 --> 00:35:58.860
for the user and you can check that or that's
working wonderfully and you can see that as

00:35:58.860 --> 00:36:06.471
well. Besides that, the application key can
be sent very easily in a header and if you

00:36:06.471 --> 00:36:11.270
connect--if you get your applications key
from some configurations somewhere, which

00:36:11.270 --> 00:36:17.820
is really now from a server context, and you
add it to your YouTube service which you connect

00:36:17.820 --> 00:36:20.180
to the API server, it's basically going to
send it on every request, then you just forget

00:36:20.180 --> 00:36:27.750
about it and do it.
&gt;&gt; NOACK: Okay, let's go on to the search.

00:36:27.750 --> 00:36:31.070
Yes? Okay, so this is looking so--as a short
comparison maybe, this is the first server,

00:36:31.070 --> 00:36:34.440
this is the second server. They look very
similar, the difference is that you can edit

00:36:34.440 --> 00:36:37.840
the search string here basically you could--for
instance, say, search for...

00:36:37.840 --> 00:36:41.780
&gt;&gt; FURNICA: Google talks. He likes the talks.
&gt;&gt; NOACK: Google talks, IO and you're...

00:36:41.780 --> 00:36:47.990
&gt;&gt; FURNICA: I'd been seeing him searching
for Google Talks all of this week.

00:36:47.990 --> 00:36:50.720
&gt;&gt; NOACK: ...you're going to--you're going
to do the...

00:36:50.720 --> 00:36:54.320
&gt;&gt; FURNICA: [INDISTINCT] all last week.
&gt;&gt; NOACK: I watched quite a bit of them when

00:36:54.320 --> 00:37:00.810
I hacked on this, it's true. So, yes, here
you look for instance and see some talks that

00:37:00.810 --> 00:37:07.080
were giving at the recent IOs and...
&gt;&gt; FURNICA: So in this sample as well you

00:37:07.080 --> 00:37:15.240
have a kind of well formatted title with the
kind of formatted author and the, well, unformatted

00:37:15.240 --> 00:37:21.060
description of the video. We didn't spend
a lot of time working on this but on the formatting

00:37:21.060 --> 00:37:24.660
part because we didn't want to showcase that.
We want to showcase API usage basically but

00:37:24.660 --> 00:37:30.010
I'm not sure we can do a lot better.
&gt;&gt; NOACK: Okay, so how this works is basically

00:37:30.010 --> 00:37:35.030
then again your--if you compare these two
servers--I'm not going to do this now in detail

00:37:35.030 --> 00:37:42.350
but they're very similar and the only big
difference is actually that the--that, in

00:37:42.350 --> 00:37:47.660
this case, you're going to use a different
URL and you're going to give a--give a specific

00:37:47.660 --> 00:37:58.450
parameter and the rest--the whole--the whole
viewing part except for the little box where

00:37:58.450 --> 00:38:00.770
you can enter the queries, is the same.
&gt;&gt; FURNICA: Just a bit of an addition, besides--so

00:38:00.770 --> 00:38:04.830
before we retrieve the list--so, that's basically
something maintained by YouTube and YouTube

00:38:04.830 --> 00:38:10.880
actually creates those list and has [INDISTINCT]
run over all the video corpus data. And they

00:38:10.880 --> 00:38:19.000
come up with like the most viewed videos last
week and so on. In this case you're actually

00:38:19.000 --> 00:38:23.160
running queries, so you're not connecting
to the URL directly but you're just building

00:38:23.160 --> 00:38:27.800
the query and you have a query object that
you can use to build. And that has all the

00:38:27.800 --> 00:38:33.010
properties that I have talked about in those
long slides about the search.

00:38:33.010 --> 00:38:40.600
&gt;&gt; NOACK: Yes, yes, right. Yes. So here's
a YouTube query object that accumulates, basically,

00:38:40.600 --> 00:38:45.070
this URL plus all the http parameters and
puts it together in a nice way, that's what

00:38:45.070 --> 00:38:56.110
the client library does. Okay and then there's--we've
got of course, some [INDISTINCT] authentication.

00:38:56.110 --> 00:38:57.290
I'm not going to dig too...
&gt;&gt; FURNICA: And now the painful part.

00:38:57.290 --> 00:39:01.922
&gt;&gt; NOACK: ...deeply into this because it's
a bit more complicated and you can--you can

00:39:01.922 --> 00:39:07.830
look it up on other web pages anyway. So,
but I'm still going to do it because otherwise

00:39:07.830 --> 00:39:13.040
the playlist part won't work. So there's--basically
there's three steps to OAuth here in this

00:39:13.040 --> 00:39:17.309
case. You have--first you're going to obtain
an authorize token. You're going to authorize

00:39:17.309 --> 00:39:27.050
the token with auth. This is done by sending
the user to that YouTube page which the user

00:39:27.050 --> 00:39:34.631
can verify as hosted at Google and he can...
&gt;&gt; FURNICA: He's actually [INDISTINCT] and

00:39:34.631 --> 00:39:38.329
hopefully we're not going to see a 500 afterwards,
but...

00:39:38.329 --> 00:39:40.560
&gt;&gt; NOACK: And then one second--one second.
&gt;&gt; FURNICA: It's the presentation effect,

00:39:40.560 --> 00:39:43.180
if it happens.
&gt;&gt; NOACK: I've probably mistyped the password.

00:39:43.180 --> 00:39:47.099
Load works, okay. So, and then...
&gt;&gt; FURNICA: So...

00:39:47.099 --> 00:39:52.600
&gt;&gt; NOACK: ...YouTube is going to ask, "Oh,
there's this application it wants to access

00:39:52.600 --> 00:39:56.431
your data. You want to allow it?" And then
the user's going to read that hopefully...

00:39:56.431 --> 00:39:59.230
&gt;&gt; FURNICA: Sure, go ahead.
&gt;&gt; NOACK: ...and--oh, yes.

00:39:59.230 --> 00:40:01.860
&gt;&gt; Right now, it's just all access or no access?
&gt;&gt; FURNICA: Right now it's just all access

00:40:01.860 --> 00:40:04.900
or no access, yes, to the YouTube account.
&gt;&gt; NOACK: Yes.

00:40:04.900 --> 00:40:08.990
&gt;&gt; FURNICA: But it's only to the YouTube accounts.
So, usually YouTube accounts are linked to

00:40:08.990 --> 00:40:13.010
a Google account, you can gain access through
Gmail with the same...

00:40:13.010 --> 00:40:17.330
&gt;&gt; NOACK: Okay.
&gt;&gt; FURNICA: And this is basically the core

00:40:17.330 --> 00:40:25.560
of OAuth and why all the pain? Basically the
user that is being requested in the--on behalf

00:40:25.560 --> 00:40:33.109
of your application--access for you application,
so here is--he decide if he allows or denies

00:40:33.109 --> 00:40:37.350
your [INDISTINCT] access.
&gt;&gt; NOACK: Okay. So, we're going to allow it

00:40:37.350 --> 00:40:43.450
in this case because we trust our application.
And--so then--and then you get the authorized

00:40:43.450 --> 00:40:47.960
token and you can exchange it for an access
token that you can use for doing requests.

00:40:47.960 --> 00:40:55.050
&gt;&gt; FURNICA: So we're just doing the API in--normal
Google API folks a favor here by explaining

00:40:55.050 --> 00:41:01.830
a bit more about us. But basically OAuth has
three major steps. And in each steps, a different

00:41:01.830 --> 00:41:08.359
kind of token is involved. In the first step
there is an unauthorized token. You just get

00:41:08.359 --> 00:41:12.520
that and then the user has to approve your
token. That's the second step, where the user

00:41:12.520 --> 00:41:17.850
approves this token and then that token changes
into an authorized token. And the last step,

00:41:17.850 --> 00:41:22.410
the authorized token needs to be traded for
an access token which you can later use to

00:41:22.410 --> 00:41:27.349
make requests on that account.
&gt;&gt; NOACK: And...

00:41:27.349 --> 00:41:31.770
&gt;&gt; FURNICA: And right now we made actually
one authenticate request already. So we got

00:41:31.770 --> 00:41:36.960
the user profile and we know who the user
that logged in is. So we can actually tell

00:41:36.960 --> 00:41:43.020
him, "Hi, name."
&gt;&gt; NOACK: Okay. So, now that we're logged

00:41:43.020 --> 00:41:45.460
in, we can also use the user's playlist.
&gt;&gt; FURNICA: Can I actually go a bit on the

00:41:45.460 --> 00:41:49.010
code side?
&gt;&gt; NOACK: On what? Which codes? On the OAuth?

00:41:49.010 --> 00:41:50.880
&gt;&gt; FURNICA: For the OAuth, yes.
&gt;&gt; NOACK: Oh, we only have a quarter of an

00:41:50.880 --> 00:41:52.650
hour left. Shall we not?
&gt;&gt; FURNICA: I think we have time.

00:41:52.650 --> 00:41:59.040
&gt;&gt; NOACK: As you like. Okay. So there you
go.

00:41:59.040 --> 00:42:07.720
&gt;&gt; FURNICA: So this code again walks you through
all the OAuth process and it's very inline.

00:42:07.720 --> 00:42:12.700
There is no magic happening anywhere else
and there is no method extraction. Although

00:42:12.700 --> 00:42:17.859
we advice you probably do extract some methods
out of this because we have a very large method

00:42:17.859 --> 00:42:25.160
to that. But basically the client library
in Java has some support for OAuth already.

00:42:25.160 --> 00:42:29.730
And although OAuth specific classes and all
the parameters you need to specify and the

00:42:29.730 --> 00:42:34.150
request you need to make, the client library
will help you with that. You just need to

00:42:34.150 --> 00:42:38.210
have some configuration for reapplication.
And you actually need to register your application

00:42:38.210 --> 00:42:47.010
with OAuth as well, for that. And in the first
step, you actually get this unauthorized token.

00:42:47.010 --> 00:42:53.670
In the second step, you need to authorize
it by basically constructing a URL and sending

00:42:53.670 --> 00:43:00.870
the user. So you need to give away your control
of the request of the user to Google with

00:43:00.870 --> 00:43:09.320
the callback URL. And then Google will call
you back your application with the authorized

00:43:09.320 --> 00:43:14.010
token when that has completed.
&gt;&gt; NOACK: Okay. So...

00:43:14.010 --> 00:43:17.869
&gt;&gt; FURNICA: And if you open [INDISTINCT] the
My User Profile Servlet.

00:43:17.869 --> 00:43:24.099
&gt;&gt; NOACK: Where is it? Oh, here.
&gt;&gt; FURNICA: Third, yes. And this is the first

00:43:24.099 --> 00:43:30.780
servlet that actually makes a call with an
authorized user. So, the difference between

00:43:30.780 --> 00:43:35.610
the ones you saw before--it still uses the
URL, it connects to that URL to retrieve the

00:43:35.610 --> 00:43:40.580
user profile. It retrieves the user profile
of default. So that's the currently authenticated

00:43:40.580 --> 00:43:47.110
user. And it adds the OAuth credentials, you
can see there are like, YouTube set OAuth

00:43:47.110 --> 00:43:51.620
credential, so OAuth parameters. That's basically
what you need to send on every request, to

00:43:51.620 --> 00:44:00.390
say I'm this--I'm authenticated as this user.
&gt;&gt; NOACK: All right. So, let's have a look

00:44:00.390 --> 00:44:06.700
at the playlist very shortly and then we can
go to the Q&amp;A. So the playlist, how that looks

00:44:06.700 --> 00:44:11.250
as an application is--for instance like this.
So, these are the playlist that the current

00:44:11.250 --> 00:44:19.520
user currently has. We can have a look at
them. We can edit them. Maybe rearrange the

00:44:19.520 --> 00:44:25.430
videos in the playlist so that...
&gt;&gt; FURNICA: Again, don't take us as [INDISTINCT]

00:44:25.430 --> 00:44:28.130
models.
&gt;&gt; NOACK: I'm not sure that helps.

00:44:28.130 --> 00:44:33.241
&gt;&gt; NOACK: You probably can do a much better
than an up and down but, yes, it works, so.

00:44:33.241 --> 00:44:39.180
&gt;&gt; NOACK: And so--and then there's of course--what
is--what you can also do then is that you

00:44:39.180 --> 00:44:42.990
can have find...
&gt;&gt; FURNICA: So now if you remember...

00:44:42.990 --> 00:44:45.539
&gt;&gt; NOACK: ...[INDISTINCT] videos. Let's see.
[INDISTINCT]

00:44:45.539 --> 00:44:49.330
&gt;&gt; FURNICA: We actually did a tweak here.
If you remember when we searched the first

00:44:49.330 --> 00:44:54.470
time, we need to have the second part where
you can actually add a video to a playlist.

00:44:54.470 --> 00:44:58.630
Now it's there because we actually loaded
the playlist of that user.

00:44:58.630 --> 00:45:05.200
&gt;&gt; NOACK: Yes. So that we--this is a bit of
hack though. So you can--you're--you can choose

00:45:05.200 --> 00:45:09.670
the playlist that you want to add a video
too, then you can add it with this button.

00:45:09.670 --> 00:45:15.859
And this is all then done server-side by doing
a post request to the YouTube API to a specific

00:45:15.859 --> 00:45:17.359
URL...
&gt;&gt; FURNICA: So that's the last slide, basically.

00:45:17.359 --> 00:45:21.380
&gt;&gt; NOACK: ...and it's going to insert a--it's
going to insert a video into a playlist and

00:45:21.380 --> 00:45:27.270
then later the user can go to the page again
and rearrange if he likes. Yes. And we've

00:45:27.270 --> 00:45:32.750
got the code to that as well here. It looks
very much the same as the code you've already

00:45:32.750 --> 00:45:35.970
seen apart from that one of these codes is
called insert instead of--instead of get,

00:45:35.970 --> 00:45:41.080
I think.
&gt;&gt; FURNICA: Yes. It's over there, service

00:45:41.080 --> 00:45:43.600
insert.
&gt;&gt; NOACK: Here, this one. So that's--but,

00:45:43.600 --> 00:45:51.040
that's the detail of the--of the GData Client
Library for Java. Yes. Okay. So, yes, I think

00:45:51.040 --> 00:45:56.640
that's pretty much it. We can...
&gt;&gt; FURNICA: So one more thing to mention.

00:45:56.640 --> 00:46:03.870
On the--on this page you also have a couple
of very useful links. The YouTube API homepage

00:46:03.870 --> 00:46:09.700
basically is linked there. The reference of
the API and we have a very good documentation.

00:46:09.700 --> 00:46:12.830
&gt;&gt; NOACK: Yes.
&gt;&gt; FURNICA: We use it to refresh our memory

00:46:12.830 --> 00:46:19.619
about [INDISTINCT] as well. And also, we have
one of the best tech writers in Google. There

00:46:19.619 --> 00:46:26.780
is a blog as well, where we post about new
features and there's going to be some new

00:46:26.780 --> 00:46:32.440
features coming soon. There is a forum where
you can talk with other developers or our

00:46:32.440 --> 00:46:41.359
developer relation engineers, our--even ourselves.
And there is a YouTube API gallery where you

00:46:41.359 --> 00:46:46.060
can try and see what other people did with
the YouTube API. And there's some good stuff

00:46:46.060 --> 00:46:48.870
there.
&gt;&gt; NOACK: So this is how our docs look like.

00:46:48.870 --> 00:46:56.090
So it's pretty exhaustive. We've got documentation
on all of our public feeds and what you can

00:46:56.090 --> 00:47:01.680
do, how you use them. It's often very used
cased, driven with examples. So actually for

00:47:01.680 --> 00:47:06.820
the demo, most of the code I just copied from
the documentation. So it's not--or not quiet

00:47:06.820 --> 00:47:13.660
but roughly. It's very--it's very--you've
got to understand a bit how this works in

00:47:13.660 --> 00:47:21.000
XML and how this has got to do with URLs and
parameters to URLs and so on. But once you've

00:47:21.000 --> 00:47:25.099
understood that and--then you can use the
documentation very easily to transfer that

00:47:25.099 --> 00:47:28.340
to any client library you may use.
&gt;&gt; FURNICA: Okay. So, any questions?

00:47:28.340 --> 00:47:37.119
&gt;&gt; NOACK: Yes. Let's go to the questions.
&gt;&gt; FURNICA: We're being so good at explaining

00:47:37.119 --> 00:47:39.880
everything?
&gt;&gt; NOACK: Yes?

00:47:39.880 --> 00:47:44.620
&gt;&gt; [INDISTINCT]
&gt;&gt; FURNICA: Yes. The only thing you need...

00:47:44.620 --> 00:47:48.440
&gt;&gt; [INDISTINCT] ready everything...
&gt;&gt; NOACK: Not [INDISTINCT] wide.

00:47:48.440 --> 00:47:53.930
&gt;&gt; [INDISTINCT] their name, information like
[INDISTINCT]

00:47:53.930 --> 00:48:00.640
&gt;&gt; NOACK: Yes. So, users can have private
information that they can only see themselves.

00:48:00.640 --> 00:48:05.150
For instance, if you--your age on YouTube
for instance. That's a very simple example.

00:48:05.150 --> 00:48:10.460
Or you can have private playlists and when
you're authenticated as that user you can

00:48:10.460 --> 00:48:16.720
see that information with the regular--with
the regular--in the regular way that you would

00:48:16.720 --> 00:48:19.443
also use for other users. And you will still
get to see this information. So that's...

00:48:19.443 --> 00:48:25.619
&gt;&gt; But if you want to see the videos that
YouTube has posted and the comments that might

00:48:25.619 --> 00:48:27.030
have been made up [INDISTINCT] videos...
&gt;&gt; FURNICA: That's public. Yes.

00:48:27.030 --> 00:48:28.030
&gt;&gt; ...you don't need OAuth for that, right?
&gt;&gt; FURNICA: Yes. That's public.

00:48:28.030 --> 00:48:29.030
&gt;&gt; NOACK: Yes. That mostly--of course, yes.
&gt;&gt; FURNICA: Yes. So, OAuth is only when you

00:48:29.030 --> 00:48:30.030
actually want access to the user account.
Yes. Yes?

00:48:30.030 --> 00:48:41.540
&gt;&gt; Is it possible to change any [INDISTINCT]
properties using the API or [INDISTINCT]

00:48:41.540 --> 00:48:48.599
&gt;&gt; FURNICA: It's almost any. Yes?
&gt;&gt; NOACK: Yes. We've got a lot. We've--for

00:48:48.599 --> 00:48:55.900
instance you can--basically if you go to--if
you've got an Android phone and you play with

00:48:55.900 --> 00:48:59.440
the YouTube application on it, it's using
the API as well.

00:48:59.440 --> 00:49:02.721
&gt;&gt; FURNICA: Yes. So that's the trick.
&gt;&gt; NOACK: So the--all this stuff, you can--you

00:49:02.721 --> 00:49:05.530
can do yourself with the YouTube API.
&gt;&gt; FURNICA: We're basically implementing everything

00:49:05.530 --> 00:49:09.840
because we also implement a lot of functionality
in our own YouTube application.

00:49:09.840 --> 00:49:12.190
&gt;&gt; NOACK: Yes. So that means...
&gt;&gt; FURNICA: So everything that's there, it's

00:49:12.190 --> 00:49:14.960
public as well.
&gt;&gt; NOACK: So that means--so most of the application

00:49:14.960 --> 00:49:20.540
will usually do something like they're going
to--so the--the applications like on phones,

00:49:20.540 --> 00:49:25.450
for instance, they would show some videos
that we have in the--in the video charts that

00:49:25.450 --> 00:49:28.550
we exposed, that's the first example that
we showed you. Then they're going to allow

00:49:28.550 --> 00:49:32.710
you to browse a bit, they're going to allow
you to upload videos. So that's also possible,

00:49:32.710 --> 00:49:37.530
to upload videos through the API. That's a
bit more complicated though because it's so

00:49:37.530 --> 00:49:41.952
much data. And--but you can find that all
in documentation. And so you can--you can

00:49:41.952 --> 00:49:43.060
write videos, you can--I think you can comment
on videos, make playlist. Yes?

00:49:43.060 --> 00:49:44.060
&gt;&gt; FURNICA: Anything else? Yes?
&gt;&gt; NOACK: Okay. Yes.

00:49:44.060 --> 00:49:47.980
&gt;&gt; Can you--can you subscribe, in a way, to
a certain video for the comments?

00:49:47.980 --> 00:50:05.580
&gt;&gt; FURNICA: Yes.
&gt;&gt; So if you can get--is it like a--like a

00:50:05.580 --> 00:50:09.470
stream?
&gt;&gt; FURNICA: Yes. So every feed we talked about

00:50:09.470 --> 00:50:15.070
it's also like an rss feed. So everything
is basically--you can subscribe to them with

00:50:15.070 --> 00:50:21.730
an rss reader and you can see any change in
the comments of a video or like in the change

00:50:21.730 --> 00:50:23.570
of the videos, on an account, on the playlist
or anything.

00:50:23.570 --> 00:50:29.940
&gt;&gt; Is there a limit on the number of times
you can do it? Or the number of [INDISTINCT]

00:50:29.940 --> 00:50:33.230
&gt;&gt; NOACK: Yes.
&gt;&gt; FURNICA: There is a limit and that increases

00:50:33.230 --> 00:50:38.200
when you register your application. And then
even if--if you need--if you need more than

00:50:38.200 --> 00:50:41.809
that, then you can just reach us in the developer
forum.

00:50:41.809 --> 00:50:46.190
&gt;&gt; NOACK: Yes. So--but the limit is not that
high. Like, as a regular user, using your

00:50:46.190 --> 00:50:48.710
cell phone, you--its very hard to hit, I think.
It's probably impossible to hit.

00:50:48.710 --> 00:50:53.251
&gt;&gt; FURNICA: Yes, it's pretty generous.
&gt;&gt; NOACK: So you can--you can, well, have

00:50:53.251 --> 00:50:57.340
many, many users as a--at the same time.
&gt;&gt; FURNICA: Oh, and by the way, it's actually

00:50:57.340 --> 00:51:05.550
the highest traffic API at Google, so.
&gt;&gt; NOACK: Yes. And if--so if you're still

00:51:05.550 --> 00:51:11.220
hitting the limits, you can--what you would
usually do is that you register and depending

00:51:11.220 --> 00:51:18.261
then, of course if you--if you--if you want
to--if you've got something that is--that

00:51:18.261 --> 00:51:22.670
is of value for you and for YouTube as well,
you can as well also contact us if you want

00:51:22.670 --> 00:51:32.620
to have something very special, but tell us,
like--there's not many people doing that.

00:51:32.620 --> 00:51:36.470
Yes.
&gt;&gt; FURNICA: Okay. Thank you very much for

00:51:36.470 --> 00:51:38.069
showing up. Hope it was useful.
&gt;&gt; NOACK: Okay.

