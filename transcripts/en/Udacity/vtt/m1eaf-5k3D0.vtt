WEBVTT
Kind: captions
Language: en

00:00:00.640 --> 00:00:04.680
Indeed, it is awesome. But, how does this affect performance?

00:00:04.680 --> 00:00:08.010
&gt;&gt; Well. Note the sequence of steps here. When we encounter

00:00:08.010 --> 00:00:12.150
the script tag, we have to pause DOM construction and let JavaScript

00:00:12.150 --> 00:00:16.490
run before we could continue. JavaScript is said to be. Parser

00:00:16.490 --> 00:00:22.200
blocking, because it blocks, DOM construction when we encounter the script tag.

00:00:22.200 --> 00:00:25.220
&gt;&gt; I see, but that doesn't seem like that big of a deal.

00:00:25.220 --> 00:00:27.250
JavaScript is pretty fast, right?

00:00:27.250 --> 00:00:31.080
&gt;&gt; It is, but, let me make a slight modification. Instead

00:00:31.080 --> 00:00:33.320
of using an inline script, like what we have here on the

00:00:33.320 --> 00:00:37.630
bottom. Let's say, we move the script content into an external file.

00:00:37.630 --> 00:00:42.125
Like, what we have here. What would you expect to happen now?

00:00:42.125 --> 00:00:45.880
&gt;&gt; Hm, well, same as before, the parser finds the script

00:00:45.880 --> 00:00:50.740
tag, fetches the file and executes it. Oh wait, oh, I see.

00:00:50.740 --> 00:00:52.620
This fetch could take awhile, right? And while

00:00:52.620 --> 00:00:54.830
the browser's fetching this file, the browser's blocked

00:00:54.830 --> 00:00:57.150
and can't continue constructing the DOM. Which would

00:00:57.150 --> 00:00:59.630
in turn, slow down the critical rendering path.

00:00:59.630 --> 00:01:03.722
&gt;&gt; Exactly. The script tag blocks the parser from proceeding, and

00:01:03.722 --> 00:01:07.739
we're stuck waiting, [SOUND] for this file. Not a good outcome.

00:01:07.739 --> 00:01:10.197
&gt;&gt; So, if external JavaScript always blocks the parser, it

00:01:10.197 --> 00:01:13.120
sounds like I should just inline all of my JavaScript.

00:01:13.120 --> 00:01:15.205
&gt;&gt; Well, yes and no. You're right in that,

00:01:15.205 --> 00:01:18.690
inlining the JavaScript would help limit the requests. But, there's

00:01:18.690 --> 00:01:20.800
some downsides as well. For example, if you use the

00:01:20.800 --> 00:01:24.450
same code on multiple pages, then that will be redundant

00:01:24.450 --> 00:01:27.280
code in all those pages. So there are tradeoffs here.

00:01:27.280 --> 00:01:29.150
&gt;&gt; All right. But, for code that's specific to

00:01:29.150 --> 00:01:31.660
one page, that seems like a pretty good strategy. Yeah,

00:01:31.660 --> 00:01:33.660
that's reasonable. But, let's take a look at some

00:01:33.660 --> 00:01:35.660
of the tradeoffs and the gotchas word associated with them.

