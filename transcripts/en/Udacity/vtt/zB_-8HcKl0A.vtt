WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:02.332
What we have just seen is called a

00:00:02.332 --> 00:00:05.360
pshare predictor. It has a private history for

00:00:05.360 --> 00:00:08.604
each branch. That is, each branch should have

00:00:08.604 --> 00:00:11.758
its own history in the branch history table,

00:00:11.758 --> 00:00:14.829
and it has shared counters so that different

00:00:14.829 --> 00:00:18.481
histories and different branches, might map to the

00:00:18.481 --> 00:00:22.136
same counters. This predictor is GOOD FOR things

00:00:22.136 --> 00:00:25.422
like EVEN-ODD behavior like taken, non-taken, loops with

00:00:25.422 --> 00:00:28.708
few iterations, for example, those 8-ITERATION LOOP that

00:00:28.708 --> 00:00:30.842
we have seen and so on. So, pretty much

00:00:30.842 --> 00:00:34.242
whenever the branch's own previous behavior is predicted

00:00:34.242 --> 00:00:37.540
of its future behavior, pshare tends to do well.

00:00:37.540 --> 00:00:40.694
Another type of similar predictor that we can

00:00:40.694 --> 00:00:43.931
make Is called gshare, it has a global history

00:00:43.931 --> 00:00:47.318
and shared counters. So a global history means

00:00:47.318 --> 00:00:50.594
that there is only a single global history that

00:00:50.594 --> 00:00:55.387
we use to predict all branches. So what we have is now the PC a single

00:00:55.387 --> 00:00:58.655
history that we exert together and index into

00:00:58.655 --> 00:01:03.030
the array of two bit counters. This history,

00:01:03.030 --> 00:01:05.610
every branch decision, regardless of what the PC

00:01:05.610 --> 00:01:08.620
of the branch is, gets shifted in here.

00:01:08.620 --> 00:01:11.250
So what is gshare good for? It's good

00:01:11.250 --> 00:01:16.010
for so-called correlated branches. That is, branches whose decision

00:01:16.010 --> 00:01:18.760
is related to what the other branches in the

00:01:18.760 --> 00:01:21.830
program were doing. Now I would think, when would that

00:01:21.830 --> 00:01:24.770
happen? And it turns out that it happens in

00:01:24.770 --> 00:01:28.610
programs quite often. Think about something like this. If my

00:01:28.610 --> 00:01:31.930
shape is a square then do something. Then do

00:01:31.930 --> 00:01:34.670
something that you do either way, regardless of what the

00:01:34.670 --> 00:01:37.990
shape is. Then if sh, the shape is not square,

00:01:37.990 --> 00:01:41.178
I have something else to do. This branch and this

00:01:41.178 --> 00:01:44.378
branch are entirely correlated. If this one was taken,

00:01:44.378 --> 00:01:46.586
this one will not be taken and the other

00:01:46.586 --> 00:01:50.480
way around. So if this branch isn't the history,

00:01:50.480 --> 00:01:53.420
when this one is being predicted then we can perfectly

00:01:53.420 --> 00:01:56.775
predict this branch. Note that however, if we look

00:01:56.775 --> 00:02:00.220
at this branch individually or this branch individually, the

00:02:00.220 --> 00:02:03.535
history of this branch might be completely random because,

00:02:03.535 --> 00:02:07.110
it really depends on our data, whether shapes or squares.

00:02:07.110 --> 00:02:10.870
So if we randomly have shapes that are squares or not,

00:02:10.870 --> 00:02:15.100
we cannot really predict much here. So, this branch might be mispredicted

00:02:15.100 --> 00:02:18.930
often because we simply don't know at that point. But this branch

00:02:18.930 --> 00:02:23.260
becomes perfectly predictable if it's using the history produced by this branch.

