WEBVTT
Kind: captions
Language: en

00:00:02.155 --> 00:00:04.480
MARC BACHINGER: So,
hello, everyone.

00:00:04.480 --> 00:00:05.880
My name is Marc Bachinger.

00:00:05.880 --> 00:00:08.180
I'm a developer
advocate here at Google.

00:00:08.180 --> 00:00:11.290
I'm a member of the media
team, so I'm usually

00:00:11.290 --> 00:00:14.130
working with large media
partners, audio and video

00:00:14.130 --> 00:00:16.960
partners, to improve
the streaming

00:00:16.960 --> 00:00:18.020
experience of their app.

00:00:18.020 --> 00:00:22.010
So, usually this boils down
to integrate ExoPlayer,

00:00:22.010 --> 00:00:25.610
or to help them
migrate to ExoPlayer.

00:00:25.610 --> 00:00:29.310
So, let me start with one of
those mandatory instant surveys

00:00:29.310 --> 00:00:31.630
just to cool down the
speaker a little bit.

00:00:31.630 --> 00:00:35.130
Who of you have watched
a video on YouTube

00:00:35.130 --> 00:00:39.510
in the last week on Android?

00:00:39.510 --> 00:00:41.260
Yeah, not surprisingly,
very good numbers.

00:00:41.260 --> 00:00:44.970
All of you who raised your hand,
you already are ExoPlayer users

00:00:44.970 --> 00:00:48.270
because ExoPlayer
is the default video

00:00:48.270 --> 00:00:51.330
player in the YouTube app.

00:00:51.330 --> 00:00:54.610
So, let me start
with the first slide

00:00:54.610 --> 00:00:58.824
with a website I found some
years ago, or some months ago,

00:00:58.824 --> 00:00:59.490
on the internet.

00:00:59.490 --> 00:01:01.470
It's obviously not
the Google website.

00:01:01.470 --> 00:01:04.550
It's a website some
YouTube users did.

00:01:04.550 --> 00:01:07.100
It's the YouTube
ExoPlayer guide,

00:01:07.100 --> 00:01:09.800
and there were some
users that found

00:01:09.800 --> 00:01:14.070
that YouTube started using
ExoPlayer within the YouTube

00:01:14.070 --> 00:01:14.570
app.

00:01:14.570 --> 00:01:17.480
And they found the
experience so exciting

00:01:17.480 --> 00:01:21.280
that they found ways
to kind of hack YouTube

00:01:21.280 --> 00:01:24.680
to force YouTube to use
ExoPlayer all the time

00:01:24.680 --> 00:01:27.030
and on all devices.

00:01:27.030 --> 00:01:29.520
So, there is a very nice
quote on this website.

00:01:29.520 --> 00:01:33.060
This quote says, "ExoPlayer
is an experimental video

00:01:33.060 --> 00:01:36.610
player hidden inside
Google's YouTube app-- it

00:01:36.610 --> 00:01:39.270
loads videos much,
much faster-- but made

00:01:39.270 --> 00:01:42.310
unavailable to the
average person."

00:01:42.310 --> 00:01:46.220
So, let me be clear, most
of this quote is not true.

00:01:46.220 --> 00:01:49.610
So, ExoPlayer is not
at all experimental.

00:01:49.610 --> 00:01:52.660
ExoPlayer is not hidden
inside the YouTube app,

00:01:52.660 --> 00:01:56.120
and it's not unavailable
to the average person.

00:01:56.120 --> 00:01:58.690
I may agree to the thing
in the parentheses.

00:01:58.690 --> 00:02:00.530
It loads video much
faster, so that's

00:02:00.530 --> 00:02:05.260
the improved video experience
we want to have from ExoPlayer.

00:02:05.260 --> 00:02:08.130
So, again, let me be
clear, that's not true.

00:02:08.130 --> 00:02:09.560
It's available on GitHub.

00:02:09.560 --> 00:02:11.130
You can download it on GitHub.

00:02:14.940 --> 00:02:17.090
So, what is ExoPlayer, then?

00:02:17.090 --> 00:02:21.630
ExoPlayer is a so-called
application level media player

00:02:21.630 --> 00:02:23.100
library.

00:02:23.100 --> 00:02:25.600
Application level
media player library

00:02:25.600 --> 00:02:29.050
means you can include the
library within your APK,

00:02:29.050 --> 00:02:34.080
within your app, and ship it
to your user with your APK.

00:02:34.080 --> 00:02:37.180
Regarding the living room,
ExoPlayer is a perfect choice.

00:02:37.180 --> 00:02:40.860
All Android TV devices
support ExoPlayer.

00:02:40.860 --> 00:02:43.710
Android TV devices run
on Lollipop and greater,

00:02:43.710 --> 00:02:47.140
so all those devices
support ExoPlayer.

00:02:47.140 --> 00:02:49.700
But ExoPlayer is not only
a good choice for TV,

00:02:49.700 --> 00:02:53.360
it's also an excellent
choice for mobile.

00:02:53.360 --> 00:02:59.920
All devices which have API 16
and greater support ExoPlayer.

00:02:59.920 --> 00:03:04.590
So, I have this
number here-- 95.7%.

00:03:04.590 --> 00:03:07.430
This is the share
of Android devices

00:03:07.430 --> 00:03:09.990
running API 16 and later.

00:03:09.990 --> 00:03:13.140
So, that's a quite good number
for all devices out there.

00:03:16.250 --> 00:03:19.720
ExoPlayer is built on
some public APIs provided

00:03:19.720 --> 00:03:21.410
by the media framework.

00:03:21.410 --> 00:03:23.690
So, to say this
clearly, ExoPlayer

00:03:23.690 --> 00:03:26.990
does not use some
kind of hidden APIs

00:03:26.990 --> 00:03:30.470
or private APIs only
available for Google tech.

00:03:30.470 --> 00:03:32.980
ExoPlayer really
uses public APIs.

00:03:32.980 --> 00:03:36.390
It's the Android Media
API on the one hand,

00:03:36.390 --> 00:03:39.830
and the Android Media DRM
API on the other hand.

00:03:39.830 --> 00:03:43.380
So, at least in theory,
you can write such a player

00:03:43.380 --> 00:03:45.100
for yourself.

00:03:45.100 --> 00:03:47.570
But that's, of course,
not a really easy task.

00:03:47.570 --> 00:03:51.180
That's why I released
ExoPlayer some years ago

00:03:51.180 --> 00:03:53.520
as an open-source
product on GitHub.

00:03:53.520 --> 00:03:56.008
So, you can include it
into your apps as well.

00:04:00.590 --> 00:04:04.320
So, what is an application
level media player?

00:04:04.320 --> 00:04:06.660
I already mentioned
you can include

00:04:06.660 --> 00:04:09.920
this library in your APK
and ship it to your users

00:04:09.920 --> 00:04:12.500
as part of your APK.

00:04:12.500 --> 00:04:14.720
We see here this
white box at the top.

00:04:14.720 --> 00:04:18.820
This white box is the APK, which
contains an application level

00:04:18.820 --> 00:04:22.460
media player, or in this
case, ExoPlayer itself.

00:04:22.460 --> 00:04:25.910
And now, this application level
media player, or ExoPlayer,

00:04:25.910 --> 00:04:28.940
uses those APIs available.

00:04:28.940 --> 00:04:33.530
This diagram here is
ExoPlayer in an early version.

00:04:33.530 --> 00:04:39.220
Today, [INAUDIBLE] we will
have a look at this later.

00:04:39.220 --> 00:04:41.470
We see those arrows.

00:04:41.470 --> 00:04:44.600
ExoPlayer is using the
MediaExtractor API.

00:04:44.600 --> 00:04:47.300
It's using the
MediaCodecs API, and it's

00:04:47.300 --> 00:04:49.220
using the AudioTrack API.

00:04:49.220 --> 00:04:54.860
All of those are public
APIs available on Android.

00:04:54.860 --> 00:04:59.790
When you have a little
look at the gray boxes,

00:04:59.790 --> 00:05:03.250
we have this MediaExtractor
with those green boxes in it.

00:05:03.250 --> 00:05:07.280
So this is what a streaming
video player has to do.

00:05:07.280 --> 00:05:10.510
First, it would have to
download container data

00:05:10.510 --> 00:05:11.890
from the internet.

00:05:11.890 --> 00:05:15.520
Then we have to buffer this
data until we really need it.

00:05:15.520 --> 00:05:17.610
And once we need
the data, we need

00:05:17.610 --> 00:05:23.830
to extract audio and video
samples out of the container.

00:05:23.830 --> 00:05:26.360
When we have those
samples, those audio

00:05:26.360 --> 00:05:29.700
and those video samples,
they are still encoded,

00:05:29.700 --> 00:05:31.410
so we can't really render those.

00:05:31.410 --> 00:05:36.090
So, we need the MediaCodecs
API to decode those samples,

00:05:36.090 --> 00:05:39.840
and once we have those
samples in a decoded way,

00:05:39.840 --> 00:05:44.140
we can render
those with Android.

00:05:44.140 --> 00:05:47.250
In the case of
video, we only have

00:05:47.250 --> 00:05:51.560
to pass a surface to the
codec's API, and the codec's API

00:05:51.560 --> 00:05:55.870
itself then does the
rendering on this surface.

00:05:55.870 --> 00:05:59.140
In the case of audio files,
the result of passing these

00:05:59.140 --> 00:06:06.450
encoded frames, or PCM
frames, which we then can

00:06:06.450 --> 00:06:09.400
play by using the audio track.

00:06:09.400 --> 00:06:13.120
So that's what is involved
in both, in audio streaming

00:06:13.120 --> 00:06:14.700
and in video streaming.

00:06:14.700 --> 00:06:18.490
And there's still a little bit
of a problem with this diagram.

00:06:18.490 --> 00:06:22.540
So all those tasks are kind
of buried in the APIs--

00:06:22.540 --> 00:06:24.380
in the APIs of the framework.

00:06:24.380 --> 00:06:26.180
So, if you want to
customize, or we

00:06:26.180 --> 00:06:30.010
want to change the behavior
regarding those tasks,

00:06:30.010 --> 00:06:32.480
there is nothing we can
do because everything

00:06:32.480 --> 00:06:36.960
is done by the framework, which
we can't really customize.

00:06:41.800 --> 00:06:45.830
Early versions of ExoPlayer
used this FrameworkSampleSource

00:06:45.830 --> 00:06:46.330
class.

00:06:46.330 --> 00:06:50.160
This FrameworkSampleSource class
used the MediaExtractor API

00:06:50.160 --> 00:06:52.340
to do these
networking, buffering,

00:06:52.340 --> 00:06:53.810
and extracting tasks.

00:06:53.810 --> 00:06:56.110
And that's what we also
see in the next slide,

00:06:56.110 --> 00:06:58.040
a little bit more focused.

00:06:58.040 --> 00:06:59.930
But still, the
FrameworkSampleSource

00:06:59.930 --> 00:07:02.070
can't really influence
what MediaExtractor

00:07:02.070 --> 00:07:05.690
is doing in detail, and
that's exactly what we want.

00:07:05.690 --> 00:07:07.620
So the ExoPlayer
team, in the end,

00:07:07.620 --> 00:07:11.490
decided to deprecate this
FrameworkSampleSource,

00:07:11.490 --> 00:07:15.020
and to do all these tasks
in ExoPlayer itself.

00:07:15.020 --> 00:07:19.000
So, the diagram, which
we have seen before,

00:07:19.000 --> 00:07:21.730
now looks like this.

00:07:21.730 --> 00:07:25.750
So, all those green tasks
are moved into ExoPlayer,

00:07:25.750 --> 00:07:28.110
or moved into the
APK, and that's

00:07:28.110 --> 00:07:32.500
why we now can customize
the behavior of those tasks.

00:07:32.500 --> 00:07:35.590
So, if you want, for example,
to use another network stack,

00:07:35.590 --> 00:07:38.790
you can use another
network stack

00:07:38.790 --> 00:07:41.170
by using a custom data source.

00:07:41.170 --> 00:07:44.680
You can influence
buffering, and you can even

00:07:44.680 --> 00:07:48.260
support other containers--
other video or audio

00:07:48.260 --> 00:07:51.390
containers which are not
supported by the framework.

00:07:51.390 --> 00:07:55.930
So by moving those tasks
into ExoPlayer itself,

00:07:55.930 --> 00:07:58.380
we win some customizations.

00:07:58.380 --> 00:08:01.550
That's exactly what we want.

00:08:01.550 --> 00:08:04.750
Regarding the other
two media APIs,

00:08:04.750 --> 00:08:07.450
there's not much we can
win by replacing them.

00:08:07.450 --> 00:08:11.340
Usually, the MediaCodecs uses
hardware-backed functionality

00:08:11.340 --> 00:08:15.190
to decode those frames to
do really an efficient job.

00:08:15.190 --> 00:08:18.400
And that's something we
never want to do in software.

00:08:18.400 --> 00:08:24.450
So, this still is done by those
media APIs provided by Android.

00:08:24.450 --> 00:08:26.740
The same is true
for the AudioTrack.

00:08:26.740 --> 00:08:30.251
There's not much sense to
play audio in another way

00:08:30.251 --> 00:08:31.250
than with an AudioTrack.

00:08:37.150 --> 00:08:40.059
So, why should you, as a
developer, use ExoPlayer?

00:08:40.059 --> 00:08:43.320
What are the advantages
of using ExoPlayer?

00:08:43.320 --> 00:08:46.110
First of all, there are
those streaming formats

00:08:46.110 --> 00:08:48.080
like DASH and SmoothStreaming.

00:08:48.080 --> 00:08:51.720
Those two are not supported
by the MediaFramework itself.

00:08:51.720 --> 00:08:54.790
So if you want to use
DASH or SmoothStreaming,

00:08:54.790 --> 00:08:58.580
you need to use something
else than the media player--

00:08:58.580 --> 00:09:00.200
the player of the framework.

00:09:00.200 --> 00:09:06.270
And, of course, what we
recommend is using ExoPlayer.

00:09:06.270 --> 00:09:08.760
HLS is also supported
by ExoPlayer,

00:09:08.760 --> 00:09:10.950
and it's also supported
by Media Player.

00:09:10.950 --> 00:09:15.320
In this case, if you already
use HLS with the Media Player,

00:09:15.320 --> 00:09:17.180
and you are OK
with that, there is

00:09:17.180 --> 00:09:22.810
nothing against using Media
Player, but for some reasons

00:09:22.810 --> 00:09:25.600
we also support
HLS with ExoPlayer.

00:09:28.290 --> 00:09:30.300
Another advantage is,
as I already said,

00:09:30.300 --> 00:09:34.350
you can include ExoPlayer
as a Gradle dependency

00:09:34.350 --> 00:09:35.530
within your app.

00:09:35.530 --> 00:09:39.470
And you can ship ExoPlayer or
this library, with your APK,

00:09:39.470 --> 00:09:40.520
to your users.

00:09:40.520 --> 00:09:43.060
The biggest advantage
of this is that you

00:09:43.060 --> 00:09:47.290
are really sure that every user
is using the very same version

00:09:47.290 --> 00:09:48.780
of your player.

00:09:48.780 --> 00:09:50.360
That's one very
interesting feature

00:09:50.360 --> 00:09:53.420
because if you are using
the MediaFramework,

00:09:53.420 --> 00:09:56.930
and one user has
an older device,

00:09:56.930 --> 00:10:00.300
he will use another
player version than a user

00:10:00.300 --> 00:10:01.740
with a newer device.

00:10:01.740 --> 00:10:03.550
And if you have to
debug problems or so,

00:10:03.550 --> 00:10:05.820
you always have to
make sure that you are

00:10:05.820 --> 00:10:08.640
testing the very same version.

00:10:08.640 --> 00:10:10.340
With ExoPlayer,
that's kind of easy

00:10:10.340 --> 00:10:17.060
because you can say which
version you ship with your APK.

00:10:17.060 --> 00:10:20.960
Besides this ability of
using the very same version,

00:10:20.960 --> 00:10:23.636
you also can take advantage
of the faster release

00:10:23.636 --> 00:10:25.320
cycle of ExoPlayer.

00:10:25.320 --> 00:10:27.780
ExoPlayer sometimes
releases newer versions

00:10:27.780 --> 00:10:32.110
within months, and with Android
devices, that's something

00:10:32.110 --> 00:10:33.330
a little bit different.

00:10:33.330 --> 00:10:35.730
Some devices are
updated very rarely,

00:10:35.730 --> 00:10:38.670
so if you have to wait for
a bug fix for a framework

00:10:38.670 --> 00:10:42.880
component for some devices, you
will never get these updates.

00:10:42.880 --> 00:10:45.460
So with ExoPlayer,
you can just include

00:10:45.460 --> 00:10:47.950
the new version of the
library in your APK

00:10:47.950 --> 00:10:51.340
and ship it to your users.

00:10:51.340 --> 00:10:54.520
And in the end, the most
interesting features

00:10:54.520 --> 00:10:57.770
for some developers is the
ability to customize ExoPlayer.

00:10:57.770 --> 00:11:01.270
That's exactly what we
have seen in the diagram

00:11:01.270 --> 00:11:04.510
before, by moving those
tasks of networking,

00:11:04.510 --> 00:11:08.060
buffering, and extracting
data from the containers,

00:11:08.060 --> 00:11:13.550
we gain some means to
customization in those tasks,

00:11:13.550 --> 00:11:15.340
and that's exactly
what we want, if we

00:11:15.340 --> 00:11:18.660
have some specific requirements
to meet within your apps.

00:11:25.090 --> 00:11:26.970
For Android TV, of
course, ExoPlayer

00:11:26.970 --> 00:11:28.070
is a very good choice.

00:11:28.070 --> 00:11:31.700
If you want to support 4K,
ExoPlayer is ready for 4K.

00:11:31.700 --> 00:11:35.480
So if you have 4K content which
you want to bring to users,

00:11:35.480 --> 00:11:37.980
ExoPlayer is a very good choice.

00:11:37.980 --> 00:11:42.390
ExoPlayer also is ready for
some very modern audio codecs,

00:11:42.390 --> 00:11:44.940
like Dolby Digital, for example.

00:11:44.940 --> 00:11:50.230
If you have connected your
Nexus player, for example,

00:11:50.230 --> 00:11:52.930
to a TV which supports
Dolby Digital,

00:11:52.930 --> 00:11:57.530
ExoPlayer can recognize this
if the TV advertises supports

00:11:57.530 --> 00:12:00.670
for those codecs by HDMI.

00:12:00.670 --> 00:12:02.980
And then ExoPlayer
will just pass

00:12:02.980 --> 00:12:07.820
through the encoded
audio data to the TV,

00:12:07.820 --> 00:12:10.730
and the TV will do the
decoding and the playback

00:12:10.730 --> 00:12:13.250
of those modern audio codecs.

00:12:16.080 --> 00:12:19.010
One of the customizations,
which we see very often

00:12:19.010 --> 00:12:21.700
on Android TV, is
that you can customize

00:12:21.700 --> 00:12:25.640
the bitrate algorithm, the
bitrate adaption algorithm.

00:12:25.640 --> 00:12:28.480
You know, the Android
framework is still made for

00:12:28.480 --> 00:12:30.270
and optimized for mobile.

00:12:30.270 --> 00:12:36.050
So if the media player starts
doing adaptive playback,

00:12:36.050 --> 00:12:39.450
it starts with the
lowest video quality.

00:12:39.450 --> 00:12:42.220
If you're on a mobile network,
that makes perfect sense,

00:12:42.220 --> 00:12:47.680
because you want to start
playback as soon as possible.

00:12:47.680 --> 00:12:50.750
So the media player starts
with the lowest quality.

00:12:50.750 --> 00:12:52.980
On Android TV, that's
a little bit different.

00:12:52.980 --> 00:12:56.170
All Android TVs usually
are connected by WiFi

00:12:56.170 --> 00:12:58.340
to the internet, or
even by ethernet.

00:12:58.340 --> 00:13:00.290
So you have good bandwidth.

00:13:00.290 --> 00:13:04.310
And you may want to start
not with the lowest,

00:13:04.310 --> 00:13:06.750
but maybe with
medium video quality

00:13:06.750 --> 00:13:11.200
to have very good quality
for your users very quickly.

00:13:11.200 --> 00:13:15.490
So if you want to customize
this bitrate adaption algorithm,

00:13:15.490 --> 00:13:18.580
ExoPlayer is a good choice.

00:13:18.580 --> 00:13:20.360
And in the end, then,
ExoPlayer is also

00:13:20.360 --> 00:13:22.510
ready for content protection.

00:13:22.510 --> 00:13:24.575
Android TV does not
only support Widevine,

00:13:24.575 --> 00:13:26.820
it also supports PlayReady.

00:13:26.820 --> 00:13:31.280
And with ExoPlayer you can
use Widevine or PlayReady

00:13:31.280 --> 00:13:33.640
for both DASH and
SmoothStreaming.

00:13:33.640 --> 00:13:36.700
In fact, ExoPlayer
supports common encryption,

00:13:36.700 --> 00:13:41.540
which includes support
for those products

00:13:41.540 --> 00:13:42.630
available on Android TV.

00:13:49.640 --> 00:13:51.660
A question which comes
up very quickly when I

00:13:51.660 --> 00:13:55.410
talk to my partners--
which media formats are

00:13:55.410 --> 00:13:56.760
supported by ExoPlayer?

00:13:56.760 --> 00:13:59.440
That's not really
an easy question,

00:13:59.440 --> 00:14:02.020
so let's start with the
first row of this table.

00:14:02.020 --> 00:14:04.010
Let's start with the
streaming formats.

00:14:04.010 --> 00:14:07.780
I already said, it's DASH
and SmoothStreaming and HLS.

00:14:07.780 --> 00:14:10.250
These are the
streaming formats which

00:14:10.250 --> 00:14:14.090
are supported by ExoPlayer,
while HLS is also supported

00:14:14.090 --> 00:14:15.720
by the media framework.

00:14:15.720 --> 00:14:20.940
Only ExoPlayer supports
DASH and SmoothStreaming.

00:14:20.940 --> 00:14:23.760
Container formats are the
very strength of ExoPlayer.

00:14:23.760 --> 00:14:26.290
We have seen that we
moved those green boxes

00:14:26.290 --> 00:14:28.210
into the application space.

00:14:28.210 --> 00:14:31.080
So ExoPlayer does
extracting data out

00:14:31.080 --> 00:14:32.800
of these containers itself.

00:14:32.800 --> 00:14:36.240
This means ExoPlayer can
support arbitrary containers,

00:14:36.240 --> 00:14:38.350
and it can support
more containers

00:14:38.350 --> 00:14:39.970
than the framework does.

00:14:39.970 --> 00:14:45.090
So we have here a couple of
common container formats.

00:14:45.090 --> 00:14:46.880
So there's MP4,
of course; there's

00:14:46.880 --> 00:14:50.050
WebM; Matroska, which is
supported by ExoPlayer;

00:14:50.050 --> 00:14:52.340
there are a couple
of audio containers,

00:14:52.340 --> 00:14:55.490
like MP3, Ogg, and
WAV; and then there

00:14:55.490 --> 00:15:00.130
are the HLS container formats,
MPEG-TS, MPEG-PS, and ADTS.

00:15:04.330 --> 00:15:06.750
When it comes to video
and audio formats,

00:15:06.750 --> 00:15:09.530
ExoPlayer can do this itself.

00:15:09.530 --> 00:15:12.590
The decoding of those video
formats and audio formats

00:15:12.590 --> 00:15:15.530
is just delegated to
the media framework.

00:15:15.530 --> 00:15:18.190
So ExoPlayer supports
all those formats,

00:15:18.190 --> 00:15:20.340
which are supported by
the media framework.

00:15:20.340 --> 00:15:24.310
There is a web page on
developer.android.com

00:15:24.310 --> 00:15:29.240
which you can consult to
see what video and audio

00:15:29.240 --> 00:15:32.810
formats are supported.

00:15:32.810 --> 00:15:35.330
Another important
[? high ?] performance

00:15:35.330 --> 00:15:38.080
are closed captions
and subtitles.

00:15:38.080 --> 00:15:39.870
For professional
media companies,

00:15:39.870 --> 00:15:45.330
this is a very important feature
they have to provide sometimes,

00:15:45.330 --> 00:15:48.470
for legal reasons-- closed
captions and subtitles.

00:15:48.470 --> 00:15:50.420
So that's very important.

00:15:50.420 --> 00:15:53.470
ExoPlayer supports
TTML and WebVTT

00:15:53.470 --> 00:15:55.270
for DASH and SmoothStreaming.

00:15:55.270 --> 00:15:57.140
These are the most
common formats

00:15:57.140 --> 00:16:00.720
for DASH and SmoothStreaming,
and it supports 608

00:16:00.720 --> 00:16:05.860
for HLS, the format which
usually is used with HLS.

00:16:11.590 --> 00:16:14.160
Another question which
comes up very quickly--

00:16:14.160 --> 00:16:19.430
so if I have to put this player
library into my APK, my APK

00:16:19.430 --> 00:16:20.100
will get bigger.

00:16:20.100 --> 00:16:23.220
And some developers
are afraid of, maybe,

00:16:23.220 --> 00:16:24.500
hitting the DEX limit.

00:16:24.500 --> 00:16:28.440
There's a certain
amount of methods

00:16:28.440 --> 00:16:30.690
which you can include
in your DEX file,

00:16:30.690 --> 00:16:32.820
so that's a very
important question.

00:16:32.820 --> 00:16:37.450
How many methods are included
with the ExoPlayer library?

00:16:37.450 --> 00:16:40.370
The numbers which I have here
is the Kitchen-sink library,

00:16:40.370 --> 00:16:43.000
so it's the very highest
number you can get

00:16:43.000 --> 00:16:45.080
if you ProGuard your app APK.

00:16:45.080 --> 00:16:49.220
Usually ProGuard is able to
remove a lot of those methods,

00:16:49.220 --> 00:16:53.510
because usually you don't use
HLS, DASH, and SmoothStreaming

00:16:53.510 --> 00:16:54.510
in one APK.

00:16:54.510 --> 00:16:57.250
You would only one of
those streaming formats,

00:16:57.250 --> 00:17:03.750
and so, ProGuard is able to
remove many of those methods.

00:17:03.750 --> 00:17:07.900
I did a little
audio application,

00:17:07.900 --> 00:17:13.319
and then ProGuard removed
about 2,000 of those methods.

00:17:13.319 --> 00:17:17.629
I ended up with having about 900
methods for an audio playback

00:17:17.629 --> 00:17:18.129
application.

00:17:22.550 --> 00:17:24.359
Who is using ExoPlayer already?

00:17:24.359 --> 00:17:25.910
Also a very important question.

00:17:25.910 --> 00:17:28.160
You don't want to
beta-test Google software

00:17:28.160 --> 00:17:29.730
with your users, of course.

00:17:29.730 --> 00:17:34.980
You want to have well-tested
software in your APK.

00:17:34.980 --> 00:17:40.360
So Google itself uses
ExoPlayer in their most famous

00:17:40.360 --> 00:17:41.020
application.

00:17:41.020 --> 00:17:44.140
YouTube, I already mentioned,
is using ExoPlayer.

00:17:44.140 --> 00:17:46.170
There's also Google
Play Movies, which

00:17:46.170 --> 00:17:49.520
is using ExoPlayer on mobile
and on Android devices.

00:17:49.520 --> 00:17:52.580
And the next and last
Google application

00:17:52.580 --> 00:17:55.970
is Google Fiber, which
also relies on ExoPlayer

00:17:55.970 --> 00:17:57.400
for doing video playback.

00:18:00.070 --> 00:18:03.250
I already mentioned I'm working
with large media partners,

00:18:03.250 --> 00:18:06.200
and there are a couple
of large media partners

00:18:06.200 --> 00:18:08.485
which also use
ExoPlayer internally.

00:18:08.485 --> 00:18:12.010
We usually do not
expose these partners,

00:18:12.010 --> 00:18:15.800
but I can assure you there are
really large companies using

00:18:15.800 --> 00:18:18.670
ExoPlayer like Google does.

00:18:18.670 --> 00:18:22.210
Yeah, and hopefully soon
you will use ExoPlayer, too.

00:18:22.210 --> 00:18:24.070
If I'm a little bit
convincing today,

00:18:24.070 --> 00:18:25.370
you will download ExoPlayer.

00:18:25.370 --> 00:18:26.980
And once you've
downloaded ExoPlayer,

00:18:26.980 --> 00:18:28.590
I'm pretty sure
you will like it,

00:18:28.590 --> 00:18:31.655
and soon, you will include
it in your APK as well.

00:18:36.610 --> 00:18:39.570
So, let's have a look
at some basic use cases.

00:18:39.570 --> 00:18:42.050
And for a media
player, of course,

00:18:42.050 --> 00:18:45.310
basic use cases is playing
audio and video files.

00:18:45.310 --> 00:18:49.030
So what do you have to do
to play audio or video files

00:18:49.030 --> 00:18:50.230
with ExoPlayer?

00:18:50.230 --> 00:18:53.400
The first thing is,
of course, including

00:18:53.400 --> 00:18:55.040
ExoPlayer in your APK.

00:18:55.040 --> 00:18:57.140
The easiest thing
to do this is just

00:18:57.140 --> 00:19:00.770
add another Gradle dependency
to your Gradle files,

00:19:00.770 --> 00:19:03.020
and then ExoPlayer
will be included

00:19:03.020 --> 00:19:05.450
and you can use all those
classes of [INAUDIBLE].

00:19:12.210 --> 00:19:14.560
When you're using
ExoPlayer, ExoPlayer

00:19:14.560 --> 00:19:16.420
has the concept
of TrackRenderers.

00:19:16.420 --> 00:19:19.440
You need a TrackRenderer
for every type

00:19:19.440 --> 00:19:21.050
of data you want to render.

00:19:21.050 --> 00:19:25.070
Usually, you have
audio data, video data,

00:19:25.070 --> 00:19:28.140
and text data-- namely,
subtitles or closed captions.

00:19:28.140 --> 00:19:31.200
So, in a full-fledged
video application,

00:19:31.200 --> 00:19:33.800
you have three TrackRenderers.

00:19:33.800 --> 00:19:37.330
For this use case of
doing audio playback,

00:19:37.330 --> 00:19:39.900
there's only one
TrackRenderer needed,

00:19:39.900 --> 00:19:43.610
and that's exactly what we
see in this highlighted code

00:19:43.610 --> 00:19:44.600
snippet here.

00:19:44.600 --> 00:19:48.090
We require such a TrackRenderer.

00:19:48.090 --> 00:19:51.530
In this case, it's a
MediaCodecAudioTrackRenderer.

00:19:51.530 --> 00:19:53.570
So, the interface
is a TrackRenderer,

00:19:53.570 --> 00:19:56.294
and the concrete class
implementing this interface

00:19:56.294 --> 00:19:57.710
is a
MediaCodecAudioTrackRenderer.

00:20:01.240 --> 00:20:03.770
This
MediaCodecAudioTrackRenderer

00:20:03.770 --> 00:20:07.540
now takes a couple of
arguments in its constructor,

00:20:07.540 --> 00:20:10.730
and the most important
one is the first.

00:20:10.730 --> 00:20:13.160
Or the most interesting
one is the first argument,

00:20:13.160 --> 00:20:13.990
the SampleSource.

00:20:13.990 --> 00:20:16.820
The SampleSource is a
collaborating component.

00:20:16.820 --> 00:20:19.960
So the
MediaCodecAudioTrackRenderer

00:20:19.960 --> 00:20:25.380
requires a SampleSource to
get audio samples from it.

00:20:25.380 --> 00:20:29.590
That's exactly what we see now
in the next line of code here.

00:20:29.590 --> 00:20:33.780
We are creating an
instance of a SampleSource.

00:20:33.780 --> 00:20:37.700
Again, we have the SampleSource,
which is only a Java interface.

00:20:37.700 --> 00:20:39.560
The concrete
implementation, then,

00:20:39.560 --> 00:20:43.310
is an ExtractorSampleSource,
and the ExtractorSampleSource

00:20:43.310 --> 00:20:46.440
is provided by the
ExoPlayer library.

00:20:46.440 --> 00:20:49.901
Here again, a couple of
arguments in the constructor.

00:20:49.901 --> 00:20:52.400
The second constructor is of
interest, here, the DataSource.

00:20:52.400 --> 00:20:55.620
The DataSource is, again,
another collaborator,

00:20:55.620 --> 00:20:59.070
which then is created
in the line above.

00:20:59.070 --> 00:21:03.070
Again, we have a DataSource
interface-- a Java interface

00:21:03.070 --> 00:21:05.317
DataSource, which
is then provided

00:21:05.317 --> 00:21:06.400
as a DefaultUriDataSource.

00:21:09.480 --> 00:21:12.460
And now, with the very
same pattern again,

00:21:12.460 --> 00:21:16.430
the DefaultUriDataSource
needs a BandwidthMeter.

00:21:16.430 --> 00:21:20.340
And, again, a concrete
implementation

00:21:20.340 --> 00:21:24.980
of BandwidthMeter is provided
by the ExoPlayer library.

00:21:24.980 --> 00:21:28.470
So, we kind of wire up
a chain of components,

00:21:28.470 --> 00:21:30.840
each depending on
another component.

00:21:30.840 --> 00:21:34.000
And it's kind of obvious
that it's quite easy

00:21:34.000 --> 00:21:36.290
to create your own
implementation of one

00:21:36.290 --> 00:21:38.730
of those interfaces.

00:21:38.730 --> 00:21:41.160
If you have such a
custom implementation

00:21:41.160 --> 00:21:43.050
of such an interface,
you can just

00:21:43.050 --> 00:21:46.580
instantiate it and inject
it into the constructor

00:21:46.580 --> 00:21:49.370
of the other components.

00:21:49.370 --> 00:21:51.840
Those arrays highlight
this path a little bit,

00:21:51.840 --> 00:21:54.900
so we create one
component and inject it

00:21:54.900 --> 00:21:59.080
into the other component to get
a chain of those components.

00:22:01.910 --> 00:22:04.280
So, once we have
this AudioRenderer,

00:22:04.280 --> 00:22:06.870
or this TrackRenderer
for audio, we

00:22:06.870 --> 00:22:11.900
need to register those renderers
in the ExoPlayer itself.

00:22:11.900 --> 00:22:15.460
So, we create an array
of TrackRenderers,

00:22:15.460 --> 00:22:19.980
assign the AudioRenderers to one
of the positions of this array,

00:22:19.980 --> 00:22:24.110
and then we pass it to
their own renderers method.

00:22:30.890 --> 00:22:35.560
So this was what we need to
do for doing audio playback.

00:22:35.560 --> 00:22:37.790
For video playback,
as I already said,

00:22:37.790 --> 00:22:40.800
we have some other type of data.

00:22:40.800 --> 00:22:44.080
There is not only audio,
there is also video data,

00:22:44.080 --> 00:22:47.060
and eventually you
want to render text,

00:22:47.060 --> 00:22:51.340
subtitles, or closed
captions as well.

00:22:51.340 --> 00:22:57.330
So again, we need three of those
chains of dependent components.

00:22:57.330 --> 00:22:58.560
So we need a TrackRenderer.

00:22:58.560 --> 00:23:01.230
The TrackRenderer then
needs a SampleSource.

00:23:01.230 --> 00:23:04.360
Each SampleSource, again,
needs a DataSource,

00:23:04.360 --> 00:23:06.980
which, in the end, needs
a BandwidthMeter if you

00:23:06.980 --> 00:23:11.910
want to do adaptive playback.

00:23:11.910 --> 00:23:13.100
So let me be clear again.

00:23:13.100 --> 00:23:16.620
You don't have to provide
your own implementation.

00:23:16.620 --> 00:23:19.850
Each component has a default
implementation provided

00:23:19.850 --> 00:23:21.980
by the ExoPlayer library.

00:23:21.980 --> 00:23:25.990
You can wire up your
renderers as you want.

00:23:25.990 --> 00:23:29.240
So there's no need
to really implement

00:23:29.240 --> 00:23:32.970
these things if you don't
have specific requirements.

00:23:32.970 --> 00:23:36.310
You can just use it as the demo
application just demonstrated.

00:23:41.940 --> 00:23:44.270
Besides these
TrackRenderer components,

00:23:44.270 --> 00:23:47.520
there are a couple of UI
components available as well.

00:23:47.520 --> 00:23:50.510
So, these components are
not really mandatory,

00:23:50.510 --> 00:23:52.680
but they are very
convenient to use.

00:23:52.680 --> 00:23:56.440
There is, for example, this
AspectRatioFrameLayout.

00:23:56.440 --> 00:23:59.590
It's a layout which makes
sure that the SurfaceView

00:23:59.590 --> 00:24:02.960
on which the video is rendered
is always resized nicely.

00:24:02.960 --> 00:24:06.580
So if a user, for example,
changes the orientation

00:24:06.580 --> 00:24:12.890
of a mobile device, you have to
resize the SurfaceView to match

00:24:12.890 --> 00:24:17.250
the size of the viewport.

00:24:17.250 --> 00:24:20.060
Another component is
at the very bottom.

00:24:20.060 --> 00:24:21.760
It's the SubtitleLayout.

00:24:21.760 --> 00:24:25.810
Again, this SubtitleLayout is,
in the end, optional to use.

00:24:25.810 --> 00:24:28.910
But if you want to
render text or closed

00:24:28.910 --> 00:24:32.400
captions or subtitles, it's
very convenient to use.

00:24:32.400 --> 00:24:35.610
It's the same size
as the entire layout,

00:24:35.610 --> 00:24:38.480
or the SurfaceView
has, and it's kind

00:24:38.480 --> 00:24:41.820
of a layer above the
video on which ExoPlayer

00:24:41.820 --> 00:24:43.040
can render those subtitles.

00:24:49.690 --> 00:24:51.080
So there's a lot going on.

00:24:51.080 --> 00:24:53.800
We have seen that you
have to download data,

00:24:53.800 --> 00:24:56.570
we have to buffer data, we
have to extract data out

00:24:56.570 --> 00:24:58.510
of the containers,
and in the end,

00:24:58.510 --> 00:25:02.150
we have to render
these data to a surface

00:25:02.150 --> 00:25:03.740
or to the audio track.

00:25:03.740 --> 00:25:07.390
So a lot is going on
in this video player,

00:25:07.390 --> 00:25:10.350
and if you want to be
aware of what is going on,

00:25:10.350 --> 00:25:12.540
you can implement
some listeners,

00:25:12.540 --> 00:25:15.290
and then register
those listeners.

00:25:15.290 --> 00:25:18.610
So on a high level, there
is the ExoPlayer.Listener.

00:25:18.610 --> 00:25:22.370
This is a listener
which notifies you

00:25:22.370 --> 00:25:25.360
about the high level
state of the player.

00:25:25.360 --> 00:25:28.180
So when you start, the
player is in an idle state,

00:25:28.180 --> 00:25:31.420
and then it transitions
to a buffering state.

00:25:31.420 --> 00:25:33.730
So we have to start
downloading data.

00:25:33.730 --> 00:25:37.310
And as soon as there is enough
data, we can start playback.

00:25:37.310 --> 00:25:41.530
If you want to give some
signals to your user--

00:25:41.530 --> 00:25:44.320
now the player is buffering,
there's not enough data

00:25:44.320 --> 00:25:47.090
available-- you can just
implement such a listener

00:25:47.090 --> 00:25:49.535
and listen to those
state transitions.

00:25:52.720 --> 00:25:57.330
Besides these
high-level events, there

00:25:57.330 --> 00:25:59.330
are a couple of
low-level events.

00:25:59.330 --> 00:26:01.770
So there are many of
those components which

00:26:01.770 --> 00:26:04.340
you have to wire up, and
each of those components

00:26:04.340 --> 00:26:07.690
has an event listener.

00:26:07.690 --> 00:26:11.465
This snippet, again, is
out of the ExoPlayer Pro.

00:26:11.465 --> 00:26:12.090
Check this out.

00:26:12.090 --> 00:26:17.130
It's from the DemoPlayer
application of ExoPlayer.

00:26:19.760 --> 00:26:22.920
It implements an event listener
for each of those components.

00:26:22.920 --> 00:26:25.800
So whatever's going on in
one of those components,

00:26:25.800 --> 00:26:28.460
your application is aware
of what is going on,

00:26:28.460 --> 00:26:33.470
and you can act upon
these state transitions.

00:26:41.690 --> 00:26:48.010
So, let's have a look at
the architecture, or design.

00:26:48.010 --> 00:26:51.870
We now have seen there are
many such components which

00:26:51.870 --> 00:26:53.720
are dependent on each other.

00:26:53.720 --> 00:26:57.790
So let's have a
look at the diagram.

00:26:57.790 --> 00:27:01.130
This is a diagram of the
component model, or object

00:27:01.130 --> 00:27:06.110
model, which is required to
do traditional media playback.

00:27:06.110 --> 00:27:11.831
Traditional media playback
is so-called non-adaptive

00:27:11.831 --> 00:27:12.330
playback.

00:27:12.330 --> 00:27:14.990
So there is one
single container file

00:27:14.990 --> 00:27:17.710
sitting on a server on
the internet somewhere,

00:27:17.710 --> 00:27:20.230
and we need to download
this container.

00:27:20.230 --> 00:27:24.030
And then we need to extract
data out of this container.

00:27:24.030 --> 00:27:30.030
That's exactly what we need
for such-- traditional media

00:27:30.030 --> 00:27:32.580
playback is, again, we need
two [? TrackRenderers. ?]

00:27:32.580 --> 00:27:34.650
We have these blue
boxes on the right.

00:27:34.650 --> 00:27:37.910
This is
MediaCodecVideoTrackRenderer

00:27:37.910 --> 00:27:40.960
and the
MediaCodecAudioTrackRenderer.

00:27:40.960 --> 00:27:47.570
Those two are responsible to
render audio and video data

00:27:47.570 --> 00:27:51.180
by using the public media APIs.

00:27:51.180 --> 00:27:53.360
Each of those
TrackRenderers is now

00:27:53.360 --> 00:27:57.720
dependent on an
ExtractorSampleSource.

00:27:57.720 --> 00:28:00.760
This ExtractorSampleSource
uses an extractor.

00:28:00.760 --> 00:28:03.690
In this case, it's an
MP4 extractor, which

00:28:03.690 --> 00:28:07.770
knows how to extract audio
and video data out of this MP4

00:28:07.770 --> 00:28:10.350
container, then
passes the sample

00:28:10.350 --> 00:28:13.590
to the ExtractorSampleSource,
which again, passes it

00:28:13.590 --> 00:28:15.820
to the TrackRenderers
for rendering.

00:28:18.330 --> 00:28:22.150
So if you want to support
some kind of custom container

00:28:22.150 --> 00:28:25.060
format-- maybe you invented
a super-efficient container

00:28:25.060 --> 00:28:28.830
format for video-- you can
just create your own extractor,

00:28:28.830 --> 00:28:33.400
register the extractor with
the ExtractorSamplesource,

00:28:33.400 --> 00:28:37.090
and then you can support
this new kind of container.

00:28:37.090 --> 00:28:39.940
Maybe you have some kind
of content protection

00:28:39.940 --> 00:28:42.080
built into the container.

00:28:42.080 --> 00:28:45.920
If you have invented
such a container

00:28:45.920 --> 00:28:49.980
you can also plug in
these container formats

00:28:49.980 --> 00:28:52.190
with ExoPlayer.

00:28:52.190 --> 00:28:53.860
And in the end,
at the very left,

00:28:53.860 --> 00:28:56.250
we see the DefaultUriDataSource.

00:28:56.250 --> 00:28:58.895
Again this, is an implementation
of the data source.

00:28:58.895 --> 00:29:01.760
The ExtractorSampleSource
it relies on.

00:29:01.760 --> 00:29:07.120
And if you want to, for example,
support proprietary network

00:29:07.120 --> 00:29:10.420
protocol, you can implement
your own data source here

00:29:10.420 --> 00:29:12.735
to support those protocols.

00:29:19.200 --> 00:29:20.800
MARC BACHINGER: So
the next diagram

00:29:20.800 --> 00:29:24.440
shows the same object model
for adaptive media playback.

00:29:24.440 --> 00:29:29.720
The difference here is
that the video player

00:29:29.720 --> 00:29:34.080
has to pick the quality
of the video chunks.

00:29:34.080 --> 00:29:37.500
So again, on the very right,
we have those blue boxes

00:29:37.500 --> 00:29:40.010
it's
MediaContactMediaTrackRenderer

00:29:40.010 --> 00:29:44.570
and the AudioTrackRenderer which
does the rendering and the end.

00:29:44.570 --> 00:29:48.540
Those two now are dependent
on a ChunkSampleSource.

00:29:48.540 --> 00:29:53.440
And DashChunkSource itself
depends on a DashChunkSource.

00:29:53.440 --> 00:29:56.120
The DashChunkSource is
now the component which

00:29:56.120 --> 00:29:58.250
knows the manifest of Dash.

00:29:58.250 --> 00:30:02.560
So in the manifest, there are
references to video chunks

00:30:02.560 --> 00:30:04.330
of different quality.

00:30:04.330 --> 00:30:07.600
And as soon as we
know that we have

00:30:07.600 --> 00:30:09.820
good bandwidth-- good
network bandwidth,

00:30:09.820 --> 00:30:15.120
ExoPlayer should pick a better
quality over a lower quality.

00:30:15.120 --> 00:30:18.260
The DashChunkSource then
again, relies on a DataSource

00:30:18.260 --> 00:30:21.030
to actually do the downloading.

00:30:21.030 --> 00:30:26.250
Again, you can replace these
components if you want.

00:30:26.250 --> 00:30:30.510
The most important thing here
now is the AdaptiveElevator.

00:30:30.510 --> 00:30:34.790
The AdaptiveElevator does some
metering off the network speed.

00:30:34.790 --> 00:30:38.950
So as soon as we-- usually,
we start with a low quality,

00:30:38.950 --> 00:30:41.500
or in the case of
AndroidTV, we start

00:30:41.500 --> 00:30:44.570
with maybe a medium
quality of those chunks.

00:30:44.570 --> 00:30:47.120
And the AdaptiveElevator
does meter

00:30:47.120 --> 00:30:48.880
the bandwidth of
the network as soon

00:30:48.880 --> 00:30:50.770
as we start downloading data.

00:30:55.090 --> 00:30:58.200
I already mentioned that this
bitrate adaptation algorithm

00:30:58.200 --> 00:31:01.690
might be when a candidate
you want to customize.

00:31:01.690 --> 00:31:06.330
And if you want to, you can only
replace these tiny components

00:31:06.330 --> 00:31:10.050
of the AdaptiveElevator to not
start with the lowest quality

00:31:10.050 --> 00:31:12.760
but maybe with a medium
quality, and then

00:31:12.760 --> 00:31:18.420
replace these components when
you wire up this object model.

00:31:18.420 --> 00:31:20.640
So you really have
just to replace

00:31:20.640 --> 00:31:24.210
this tiny piece of
this object model,

00:31:24.210 --> 00:31:26.480
provide your custom
implementation,

00:31:26.480 --> 00:31:29.650
and then in the end they
worked together nicely

00:31:29.650 --> 00:31:32.870
with the default components
delivered by the ExoPlayer

00:31:32.870 --> 00:31:33.370
library.

00:31:39.270 --> 00:31:39.860
So yeah.

00:31:39.860 --> 00:31:42.650
You might say, yeah, but
that's really a complex thing

00:31:42.650 --> 00:31:44.390
to wire up all these components.

00:31:44.390 --> 00:31:47.710
But if I use MediaPlayer or
just have two lines of code,

00:31:47.710 --> 00:31:50.290
and it starts playback--
and yet that's true.

00:31:50.290 --> 00:31:54.010
This flexibility or this
ability to customize things

00:31:54.010 --> 00:31:58.360
comes with price of
this added complexity.

00:31:58.360 --> 00:32:01.140
But the good news
is that ExoPlayer

00:32:01.140 --> 00:32:05.120
provides some templates to
wire up these objects together.

00:32:05.120 --> 00:32:09.030
There are templates for
DASH, SmoothStreaming and HLS

00:32:09.030 --> 00:32:10.710
for example.

00:32:10.710 --> 00:32:13.430
We have, for example,
the DashRendererBuilder,

00:32:13.430 --> 00:32:20.560
which does wire up the component
model for doing DASH streaming.

00:32:20.560 --> 00:32:22.950
Usually, you don't have
to change these templates.

00:32:22.950 --> 00:32:26.330
You can just use it as is
provided by the ExoPlayer

00:32:26.330 --> 00:32:26.930
library.

00:32:26.930 --> 00:32:29.420
If you have some
specific requirements,

00:32:29.420 --> 00:32:31.520
you have some specific
features withing

00:32:31.520 --> 00:32:33.780
your DASH manifest--
for example,

00:32:33.780 --> 00:32:39.210
maybe you have to adapt what the
DashRendererBuilder is doing.

00:32:39.210 --> 00:32:42.010
But again, It's
a very good start

00:32:42.010 --> 00:32:44.200
to look into these
RenderBuilders.

00:32:44.200 --> 00:32:45.890
These RendererBuilders,
again, are

00:32:45.890 --> 00:32:48.020
part of the demo application.

00:32:48.020 --> 00:32:51.480
So if you download
the project and you

00:32:51.480 --> 00:32:53.130
have to look at the
demo application,

00:32:53.130 --> 00:32:54.910
you will find these
RendererBuilders

00:32:54.910 --> 00:32:58.430
and can start from there.

00:32:58.430 --> 00:33:00.360
The last RendererBuilder
which is available

00:33:00.360 --> 00:33:02.780
is the non-adapt for
non-adaptive playback.

00:33:02.780 --> 00:33:05.690
It's again, for
traditional media playback.

00:33:05.690 --> 00:33:07.870
And it's pretty much the same.

00:33:07.870 --> 00:33:09.090
It's not that complicated.

00:33:09.090 --> 00:33:10.620
We have seen the diagram.

00:33:10.620 --> 00:33:13.900
There are less components
which brought together.

00:33:13.900 --> 00:33:16.097
But if you want to do
traditional playback,

00:33:16.097 --> 00:33:18.430
again, you can start with
this ExtractorRendererBuilder.

00:33:25.881 --> 00:33:26.380
So yeah.

00:33:26.380 --> 00:33:27.650
Now, call to action.

00:33:27.650 --> 00:33:30.220
So of course, we have some
call to actions for you.

00:33:30.220 --> 00:33:32.750
So clone the ExoPlayer project.

00:33:32.750 --> 00:33:34.530
It's available on GitHub.

00:33:34.530 --> 00:33:37.580
Easiest thing is just to search
for GitHub and ExoPlayer,

00:33:37.580 --> 00:33:39.590
and you will file repository.

00:33:39.590 --> 00:33:42.640
Clone the repository,
build the APK,

00:33:42.640 --> 00:33:45.660
and deployed the APK,
the demo application,

00:33:45.660 --> 00:33:49.470
to your Android device,
and then start testing.

00:33:49.470 --> 00:33:54.250
The demo application includes
a list of sample streams.

00:33:54.250 --> 00:33:58.170
There are samples streams for
DASH, SmoothStreaming, and HLS.

00:33:58.170 --> 00:34:01.550
There are sample streams
for the different content

00:34:01.550 --> 00:34:09.030
protection technologies, there
like WideVine and PlayReady.

00:34:09.030 --> 00:34:09.790
Check it out.

00:34:09.790 --> 00:34:13.110
And if you find your
streams you want to support,

00:34:13.110 --> 00:34:18.760
it's quite easy to start
from the demo applicaiton.

00:34:18.760 --> 00:34:21.110
And in the end of course,
integrate ExoPlayer

00:34:21.110 --> 00:34:22.969
as a library into your own app.

00:34:22.969 --> 00:34:25.550
Take the demo application
as a template,

00:34:25.550 --> 00:34:29.300
and then use ExoPlayer
by integrating it

00:34:29.300 --> 00:34:30.940
with a Gradle dependency.

00:34:30.940 --> 00:34:32.310
There other ways to do that.

00:34:32.310 --> 00:34:35.550
You can copy the source
code into you APK,

00:34:35.550 --> 00:34:38.510
or you can build a
library and then put

00:34:38.510 --> 00:34:40.110
the library in your IDE.

00:34:40.110 --> 00:34:42.820
But the easiest way is just
to use a Gradle depdency.

00:34:49.000 --> 00:34:50.900
So that's basically what I have.

00:34:50.900 --> 00:34:55.050
So there are again, those
links to the ExoPlayer project

00:34:55.050 --> 00:34:55.570
itself.

00:34:55.570 --> 00:34:58.580
And there is also a reference
to the Developer Guide.

00:34:58.580 --> 00:35:01.290
The Developer Guide gives
you in-depth information

00:35:01.290 --> 00:35:05.260
about customizing
ExoPlayer for your needs.

00:35:05.260 --> 00:35:07.730
All those diagrams
we've seen in this talk

00:35:07.730 --> 00:35:09.580
are taken from the
Developer Guide.

00:35:09.580 --> 00:35:11.110
So it's a pretty
good read for you

00:35:11.110 --> 00:35:15.130
if you want to meet your
requirements to check out

00:35:15.130 --> 00:35:20.230
ExoPlayer, the ExoPlayer
Developer Guide.

00:35:20.230 --> 00:35:21.880
Yeah that's all I have.

00:35:21.880 --> 00:35:25.550
So if you have some questions,
please go to the microphone,

00:35:25.550 --> 00:35:27.850
and ask questions so
everybody can hear it.

00:35:27.850 --> 00:35:30.498
And I'm happy to
answer these questions.

00:35:35.760 --> 00:35:39.677
AUDIENCE: Hey, does the player
support 360 video as well?

00:35:39.677 --> 00:35:40.760
MARC BACHINGER: Excuse me?

00:35:40.760 --> 00:35:42.610
AUDIENCE: 360 videos.

00:35:42.610 --> 00:35:43.620
MARC BACHINGER: No.

00:35:43.620 --> 00:35:46.200
ExoPlayer currently
does not support.

00:35:46.200 --> 00:35:51.330
I think that YouTube has a
kind of modified version,

00:35:51.330 --> 00:35:54.400
but currently no
support for 360.

00:35:54.400 --> 00:35:54.950
Excuse me?

00:35:54.950 --> 00:35:57.270
AUDIENCE: [INAUDIBLE]

00:35:57.270 --> 00:35:58.660
MARC BACHINGER: I don't, sorry.

00:35:58.660 --> 00:35:59.910
AUDIENCE: It's a custom model.

00:35:59.910 --> 00:36:00.784
MARC BACHINGER: Yeah.

00:36:00.784 --> 00:36:03.045
There's currently no support
from ExoPlayer's project.

00:36:05.770 --> 00:36:06.672
AUDIENCE: Whoa.

00:36:06.672 --> 00:36:07.880
That came on all of a sudden.

00:36:07.880 --> 00:36:10.030
Is there a roadmap
for the ExoPlayer?

00:36:10.030 --> 00:36:11.835
And is there any
kind of reliable way

00:36:11.835 --> 00:36:15.090
we can influence what's
coming up in the project?

00:36:15.090 --> 00:36:19.530
MARC BACHINGER: There
is not a public roadmap.

00:36:19.530 --> 00:36:23.485
On GitHub, there are
different branches.

00:36:23.485 --> 00:36:25.360
We have the productive
branch, and then there

00:36:25.360 --> 00:36:27.020
is the development branch.

00:36:27.020 --> 00:36:28.853
If you're looking into
the developer branch,

00:36:28.853 --> 00:36:30.590
you look a little
bit into the future.

00:36:30.590 --> 00:36:33.760
There's also currently
an experimental branch.

00:36:33.760 --> 00:36:36.750
We are working currently
on version 2 of ExoPlayer,

00:36:36.750 --> 00:36:39.410
which brings in some
more flexibility,

00:36:39.410 --> 00:36:40.920
especially at runtime.

00:36:40.920 --> 00:36:44.330
So all those components
will be about the same.

00:36:44.330 --> 00:36:48.250
But at runtime,
we have more ways

00:36:48.250 --> 00:36:51.480
to replace components
at runtime.

00:36:51.480 --> 00:36:55.050
But there is not something like
a public roadmap available.

00:36:55.050 --> 00:36:56.830
If you are interested
in the future,

00:36:56.830 --> 00:37:01.710
I can just say, go to the
Issue Tracker of GitHub,

00:37:01.710 --> 00:37:03.870
and the team is there,
and we'll answer

00:37:03.870 --> 00:37:06.860
about the plans of the team.

00:37:06.860 --> 00:37:07.808
AUDIENCE: Thank you.

00:37:07.808 --> 00:37:09.099
MARC BACHINGER: You're welcome.

00:37:14.930 --> 00:37:19.010
AUDIENCE: Why HLS is
supported both for MediaPlayer

00:37:19.010 --> 00:37:21.860
and ExoPlayer?

00:37:21.860 --> 00:37:28.335
HLS is supported both for
MediaPlayer and ExoPlayer.

00:37:28.335 --> 00:37:31.410
What is the reasons for that?

00:37:31.410 --> 00:37:32.750
MARC BACHINGER: Yeah.

00:37:32.750 --> 00:37:35.930
I don't know, actually.

00:37:35.930 --> 00:37:38.330
HLS is a very popular
format, and then it

00:37:38.330 --> 00:37:41.420
was included into
the framework itself.

00:37:41.420 --> 00:37:43.300
MediaPlayer supports HLS.

00:37:43.300 --> 00:37:45.950
And then as soon as we
started with ExoPlayer,

00:37:45.950 --> 00:37:50.010
it makes sense to support
all those most commonly

00:37:50.010 --> 00:37:53.180
used adaptive formats.

00:37:56.296 --> 00:37:58.227
AUDIENCE: How you choose that?

00:37:58.227 --> 00:38:02.686
Which one is better,
ExoPlayer or MediaPlayer?

00:38:02.686 --> 00:38:04.185
MARC BACHINGER:
Which one is better?

00:38:04.185 --> 00:38:04.680
AUDIENCE: Yeah.

00:38:04.680 --> 00:38:05.805
MARC BACHINGER: It depends.

00:38:05.805 --> 00:38:08.350
So you can try to use streams
if you are OK with what

00:38:08.350 --> 00:38:10.850
MediaPlayer can do, it's OK.

00:38:10.850 --> 00:38:12.580
If you want to
customize the behavior,

00:38:12.580 --> 00:38:14.250
that's in the end the thing.

00:38:14.250 --> 00:38:18.020
If you want to adjust the
player to your requirements

00:38:18.020 --> 00:38:21.340
in the app, I would
recommend to use ExoPlayer.

00:38:21.340 --> 00:38:26.670
But if one of those works
for you, both are OK.

00:38:26.670 --> 00:38:30.967
So there's no reason to
use one over the other.

00:38:30.967 --> 00:38:32.246
AUDIENCE: We can try it.

00:38:32.246 --> 00:38:33.495
MARC BACHINGER: Yeah, exactly.

00:38:33.495 --> 00:38:36.520
AUDIENCE: One more question.

00:38:36.520 --> 00:38:41.030
Which protocol is used for
in the YouTube application?

00:38:41.030 --> 00:38:42.500
MARC BACHINGER:
Oh, I don't know.

00:38:42.500 --> 00:38:44.840
I don't know about the internals
of the YouTube application,

00:38:44.840 --> 00:38:45.140
sorry.

00:38:45.140 --> 00:38:45.885
AUDIENCE: Oh, OK.

00:38:45.885 --> 00:38:46.385
Yeah.

00:38:46.385 --> 00:38:47.255
Thank you.

00:38:47.255 --> 00:38:48.546
MARC BACHINGER: You're welcome.

00:38:50.389 --> 00:38:51.180
AUDIENCE: Hi, Marc.

00:38:51.180 --> 00:38:53.360
Thanks for your presentation.

00:38:53.360 --> 00:38:57.130
So from our experience,
when we use ExoPlayer,

00:38:57.130 --> 00:39:00.865
some of the lower-end
phones, our experience

00:39:00.865 --> 00:39:03.580
is that sometimes
the video stutters.

00:39:03.580 --> 00:39:05.640
Sometimes the video
doesn't play at all.

00:39:05.640 --> 00:39:07.190
Do you have any
recommendations how

00:39:07.190 --> 00:39:10.564
we can figure out if a phone
supports ExoPlayer or not?

00:39:10.564 --> 00:39:12.730
MARC BACHINGER: It's hard
to say what the reason is,

00:39:12.730 --> 00:39:18.310
because-- especially when
it comes to decoding,

00:39:18.310 --> 00:39:22.070
ExoPlayer is using the framework
classes or the framework API

00:39:22.070 --> 00:39:22.800
as well.

00:39:22.800 --> 00:39:25.230
So if there-- and
those APIs usually

00:39:25.230 --> 00:39:28.130
are provided by the
vendor, by the OEM,

00:39:28.130 --> 00:39:29.440
which provides the device.

00:39:29.440 --> 00:39:31.550
So they are there are
different implementation

00:39:31.550 --> 00:39:33.220
on each of those devices.

00:39:33.220 --> 00:39:36.020
And if there is a problem
on certain device,

00:39:36.020 --> 00:39:38.360
it may be that it's
just on this device.

00:39:38.360 --> 00:39:40.890
And it's very hard to say, in
general, what the problem is

00:39:40.890 --> 00:39:43.355
on these devices.

00:39:46.920 --> 00:39:52.690
I would recommend to create a
bug report after you experience

00:39:52.690 --> 00:39:53.410
this problem.

00:39:53.410 --> 00:39:58.400
And put this bug report
into an issue on GitHub,

00:39:58.400 --> 00:40:01.040
and ask the ExoPlayer
team if that they

00:40:01.040 --> 00:40:05.580
know about a common
issue with these devices.

00:40:05.580 --> 00:40:07.500
AUDIENCE: Can I ask a follow-up?

00:40:07.500 --> 00:40:09.375
From my understanding
earlier, you

00:40:09.375 --> 00:40:13.360
were saying that the YouTube
app is using ExoPlayer

00:40:13.360 --> 00:40:16.277
by default. Do you know
how they handle it?

00:40:16.277 --> 00:40:17.360
MARC BACHINGER: No, sorry.

00:40:17.360 --> 00:40:19.660
I don't know about the
internals of YouTube app.

00:40:19.660 --> 00:40:20.451
AUDIENCE: OK, cool.

00:40:20.451 --> 00:40:21.090
Thank you.

00:40:21.090 --> 00:40:23.832
MARC BACHINGER: You're welcome.

00:40:23.832 --> 00:40:24.746
AUDIENCE: Hi, Marc.

00:40:24.746 --> 00:40:28.220
One quick question on the video
and audio on the [INAUDIBLE]

00:40:28.220 --> 00:40:29.270
implementation.

00:40:29.270 --> 00:40:32.012
Do you have plans to support
[INAUDIBLE] and tunneling?

00:40:32.012 --> 00:40:33.220
MARC BACHINGER: Support what?

00:40:33.220 --> 00:40:37.370
AUDIENCE: [INAUDIBLE] you know
in [INAUDIBLE] and tunneling?

00:40:37.370 --> 00:40:39.440
MARC BACHINGER: No, I
don't know about it,

00:40:39.440 --> 00:40:41.670
but maybe we can talk
offline about it.

00:40:41.670 --> 00:40:44.155
And then I can ask the team.

00:40:44.155 --> 00:40:44.780
AUDIENCE: Yeah.

00:40:44.780 --> 00:40:45.280
Thank you.

00:40:45.280 --> 00:40:47.540
MARC BACHINGER: Welcome.

00:40:47.540 --> 00:40:50.130
AUDIENCE: Yes one
question on the ExoPlayer.

00:40:50.130 --> 00:40:52.110
Does the ExoPlayer
have the capability

00:40:52.110 --> 00:40:54.770
to extract metadata
from the video

00:40:54.770 --> 00:40:57.670
and display it, overlay
it on the video?

00:40:57.670 --> 00:40:59.160
MARC BACHINGER:
From what format?

00:40:59.160 --> 00:41:00.993
AUDIENCE: Let's say if
your video source has

00:41:00.993 --> 00:41:04.610
some metadata built into
it, like MPEG-4 part 10,

00:41:04.610 --> 00:41:07.620
you have on the packer headers,
you can put metadata on that.

00:41:07.620 --> 00:41:10.434
Does the ExoPlayer
have the framework

00:41:10.434 --> 00:41:12.890
to extract that metadata
and overlay it on the video?

00:41:12.890 --> 00:41:14.140
MARC BACHINGER: Good question.

00:41:14.140 --> 00:41:15.700
I don't know for MP4.

00:41:15.700 --> 00:41:20.040
I know, for example for HLS,
we are extracting the ID3 tags.

00:41:20.040 --> 00:41:23.135
And then you are able to get
the information from these tags.

00:41:23.135 --> 00:41:25.260
AUDIENCE: That's different
from the closed caption,

00:41:25.260 --> 00:41:28.566
that particular slot on the
packer header is different.

00:41:28.566 --> 00:41:29.440
MARC BACHINGER: Yeah.

00:41:29.440 --> 00:41:33.530
AUDIENCE: Does this-- I mean, we
looked at the Developer Guide.

00:41:33.530 --> 00:41:35.760
I didn't see any
references to the metadata.

00:41:35.760 --> 00:41:37.218
MARC BACHINGER:
Yeah, I'm not sure.

00:41:37.218 --> 00:41:42.310
Maybe also let us check offline,
and then I can help you maybe.

00:41:42.310 --> 00:41:43.760
AUDIENCE: Hi, Marc.

00:41:43.760 --> 00:41:48.150
Does ExoPlayer
support DRM content?

00:41:48.150 --> 00:41:49.090
MARC BACHINGER: DRM?

00:41:49.090 --> 00:41:49.440
AUDIENCE: DRM.

00:41:49.440 --> 00:41:49.790
MARC BACHINGER: Yeah.

00:41:49.790 --> 00:41:50.840
AUDIENCE: Digital
rights management.

00:41:50.840 --> 00:41:51.714
MARC BACHINGER: Yeah.

00:41:51.714 --> 00:41:56.380
It depends on what adaptive
technology you're using.

00:41:56.380 --> 00:42:01.180
If you're using HLS
AES-128, is supported.

00:42:01.180 --> 00:42:03.290
And for DASH and
for SmoothStreaming,

00:42:03.290 --> 00:42:05.310
we support common encryption.

00:42:05.310 --> 00:42:09.170
So for example, WideVine
and PlayReady on AndroidTV

00:42:09.170 --> 00:42:10.775
or WideVine on mobile devices.

00:42:10.775 --> 00:42:12.434
AUDIENCE: How about OMA?

00:42:12.434 --> 00:42:13.350
MARC BACHINGER: Sorry?

00:42:13.350 --> 00:42:14.690
AUDIENCE: OMA.

00:42:14.690 --> 00:42:18.970
MARC BACHINGER: OMA, I
don't-- so in general,

00:42:18.970 --> 00:42:21.780
if you really want to
have very good security,

00:42:21.780 --> 00:42:26.530
you have to use one of those
DRM technologies which are

00:42:26.530 --> 00:42:29.560
available on the devices,
because they need the keys

00:42:29.560 --> 00:42:31.510
to be in the hardware.

00:42:31.510 --> 00:42:36.040
And so I think that if you
want a really secure solution,

00:42:36.040 --> 00:42:39.990
you have to use
WideVine or PlayReady.

00:42:39.990 --> 00:42:41.615
AUDIENCE: So how
about AndroidTV?

00:42:41.615 --> 00:42:44.650
Can you use ExoPlayer
on AndroidTV

00:42:44.650 --> 00:42:46.656
to play your DRM content?

00:42:46.656 --> 00:42:47.780
MARC BACHINGER: Yeah, sure.

00:42:47.780 --> 00:42:48.460
Yeah, sure.

00:42:48.460 --> 00:42:50.767
You can use WideVine and
PlayReady on AndroidTV.

00:42:50.767 --> 00:42:51.600
AUDIENCE: Thank you.

00:42:51.600 --> 00:42:53.870
MARC BACHINGER: So
maybe the last question.

00:42:53.870 --> 00:42:54.639
Yep?

00:42:54.639 --> 00:42:55.180
AUDIENCE: Hi.

00:42:55.180 --> 00:42:57.304
So I had a question
on how do you

00:42:57.304 --> 00:43:00.670
detect cloned Android
devices from the perspective

00:43:00.670 --> 00:43:01.930
of the ExoPlayer?

00:43:01.930 --> 00:43:04.690
Also, can you say something
about the ad insertion

00:43:04.690 --> 00:43:06.615
capabilities?

00:43:06.615 --> 00:43:07.490
MARC BACHINGER: Yeah.

00:43:07.490 --> 00:43:11.320
So there is nothing
specifically for ad insertion,

00:43:11.320 --> 00:43:12.600
currently in ExoPlayer.

00:43:12.600 --> 00:43:16.150
So we have partners which
do this for themselves.

00:43:16.150 --> 00:43:21.007
So you have to-- that's
exactly one of the fields which

00:43:21.007 --> 00:43:22.090
ExoPlayer is very good at.

00:43:22.090 --> 00:43:24.870
You can replace one
of those components,

00:43:24.870 --> 00:43:26.620
and do the ad insertion itself.

00:43:26.620 --> 00:43:29.369
But there's nothing
provided outside the box.

00:43:29.369 --> 00:43:29.910
AUDIENCE: OK.

00:43:29.910 --> 00:43:32.690
What about the cloned devices,
is there a way to detect?

00:43:32.690 --> 00:43:34.230
MARC BACHINGER:
What devices, sorry?

00:43:34.230 --> 00:43:34.938
AUDIENCE: Cloned.

00:43:34.938 --> 00:43:38.750
Let's say I have a cloned
instance of a valid --

00:43:38.750 --> 00:43:42.400
like a virtual instance of
a valid Android install,

00:43:42.400 --> 00:43:44.720
and I'm running that
from the ExoPlayer.

00:43:44.720 --> 00:43:47.150
I'm running the same
ExoPlayer, same content on it.

00:43:47.150 --> 00:43:50.080
Is there a way to detect whether
a device is a cloned device

00:43:50.080 --> 00:43:51.620
or a real device?

00:43:51.620 --> 00:43:53.740
MARC BACHINGER: Not
built-in into ExoPlayer.

00:43:53.740 --> 00:43:56.339
You have to do this
for yourself as well.

00:43:56.339 --> 00:43:56.880
AUDIENCE: OK.

00:43:56.880 --> 00:43:58.010
Thanks

00:43:58.010 --> 00:43:59.220
MARC BACHINGER: Thank you.

00:43:59.220 --> 00:44:01.570
So thank you very much
for your attention.

00:44:01.570 --> 00:44:02.170
[APPLAUSE]

00:44:02.170 --> 00:44:06.120
[MUSIC PLAYING]

