WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
It turns out that Python's regular expression module

00:00:03.000 --> 00:00:07.000
actually uses something very similar to FSM sim under the hood.

00:00:07.000 --> 00:00:09.000
You just take the regular expression,

00:00:09.000 --> 00:00:12.000
turn it into a finite-state machine, which you've done forwards and backwards

00:00:12.000 --> 00:00:17.000
many times, and then check with a simple recursive procedure

00:00:17.000 --> 00:00:20.000
to see if the finite-state machine accepts a string.

00:00:20.000 --> 00:00:25.000
However, our simulation did not handle epsilon transitions or ambiguity,

00:00:25.000 --> 00:00:29.000
and what I mean by ambiguity is what if there are 2 outgoing edges labeled a?

00:00:29.000 --> 00:00:32.000
Let's say one of them leads to an accepting state, and one of them doesn't.

00:00:32.000 --> 00:00:34.000
What should we do?

00:00:34.000 --> 00:00:36.000
Well, there is a formal definition for this kind of ambiguity.

00:00:36.000 --> 00:00:38.000
However, it's not going to solve our problems.

00:00:38.000 --> 00:00:41.000
We see that a finite-state machine accepts a string s

00:00:41.000 --> 00:00:46.000
if there exists even one path from the start state

00:00:46.000 --> 00:00:49.000
to any accepting state that follows s.

00:00:49.000 --> 00:00:52.000
This finite-state machine accepts a

00:00:52.000 --> 00:00:55.000
because there's one way to do it where a causes you

00:00:55.000 --> 00:00:57.000
to end up in an accepting state.

00:00:57.000 --> 00:01:00.000
If you like, you can say that finite-state machines are generous.

00:01:00.000 --> 00:01:03.000
If there's any way to accept, we will make that work.

00:01:03.000 --> 00:01:06.000
However, our finite-state machine simulation

00:01:06.000 --> 00:01:08.000
didn't code that up, so we're going to have to return

00:01:08.000 --> 09:59:59.000
to both of these issues.

