WEBVTT
Kind: captions
Language: en

00:00:01.230 --> 00:00:03.840
Deciding how to run your
application code in the cloud

00:00:03.840 --> 00:00:05.760
can be difficult.

00:00:05.760 --> 00:00:07.510
You have a variety of
options and probably

00:00:07.510 --> 00:00:09.680
many dependencies
and requirements.

00:00:09.680 --> 00:00:12.040
And it all seems so complicated.

00:00:12.040 --> 00:00:13.502
Well, my name is
Mandy and I'm here

00:00:13.502 --> 00:00:16.085
to show you that it's actually
not as complicated as you first

00:00:16.085 --> 00:00:18.060
thought.

00:00:18.060 --> 00:00:20.407
There are two main ways to
run your app in the cloud.

00:00:20.407 --> 00:00:22.240
Infrastructure as a
Service, which gives you

00:00:22.240 --> 00:00:26.230
maximum flexibility by providing
virtual machines in the Cloud.

00:00:26.230 --> 00:00:29.640
Or Platform as a Service, which
provides fully managed software

00:00:29.640 --> 00:00:32.180
stacks to which you can
deploy your application code,

00:00:32.180 --> 00:00:34.800
but which has a more
restrictive environment in terms

00:00:34.800 --> 00:00:37.630
of supported languages
and features.

00:00:37.630 --> 00:00:39.350
This is a tough
choice and one that we

00:00:39.350 --> 00:00:43.060
had to consider when building
the Google I/O WebRTC codelab

00:00:43.060 --> 00:00:44.720
application.

00:00:44.720 --> 00:00:46.160
This is a simple
demo application

00:00:46.160 --> 00:00:49.900
that allows you to use WebRTC--
which stands for Web Real Time

00:00:49.900 --> 00:00:53.220
Communications-- to perform
peer to peer real time

00:00:53.220 --> 00:00:56.260
streaming between
multiple clients.

00:00:56.260 --> 00:00:58.220
While the app wasn't
complicated to build,

00:00:58.220 --> 00:00:59.860
there were some
complex requirements

00:00:59.860 --> 00:01:01.540
unique to the
application that we

00:01:01.540 --> 00:01:04.390
had to consider when choosing
between infrastructures

00:01:04.390 --> 00:01:07.549
of service and
platforms of service.

00:01:07.549 --> 00:01:09.340
Because we just wanted
to focus on the code

00:01:09.340 --> 00:01:11.710
and not worry about
all the other stuff,

00:01:11.710 --> 00:01:14.892
we really wanted to
use Google App Engine.

00:01:14.892 --> 00:01:16.600
The main function of
this app is to allow

00:01:16.600 --> 00:01:19.830
users to connect to the
server and create rooms which

00:01:19.830 --> 00:01:22.030
another user can
also connect to.

00:01:22.030 --> 00:01:25.880
The two users can then
stream data to each other.

00:01:25.880 --> 00:01:28.990
The JavaScript Socket.IO
Library is extremely popular.

00:01:28.990 --> 00:01:32.260
It is well known for simplifying
the development of networking

00:01:32.260 --> 00:01:33.810
for real time applications.

00:01:33.810 --> 00:01:36.450
It looked perfectly
suited for the task

00:01:36.450 --> 00:01:39.450
as it has all of our
requirements covered.

00:01:39.450 --> 00:01:43.100
App Engine supports applications
written in Python, Java, Go,

00:01:43.100 --> 00:01:44.476
and PHP.

00:01:44.476 --> 00:01:48.220
But how can we use it to
run Node.js applications?

00:01:48.220 --> 00:01:49.980
Well, it turns out
that App Engine

00:01:49.980 --> 00:01:53.820
has this cool new feature
called Custom Run Times.

00:01:53.820 --> 00:01:56.960
Custom Run Times allow you to
define your own runtime stack.

00:01:56.960 --> 00:01:59.970
As an example, a runtime
stack could be the Node.js

00:01:59.970 --> 00:02:03.310
interpreter, using MPM
for package management

00:02:03.310 --> 00:02:05.500
and running your
application code.

00:02:05.500 --> 00:02:07.870
App Engine takes care of
provisioning virtual machines,

00:02:07.870 --> 00:02:10.328
which are then used for building
and deploying your runtime

00:02:10.328 --> 00:02:11.761
stack on to.

00:02:11.761 --> 00:02:13.760
You also have the option
to define health checks

00:02:13.760 --> 00:02:15.340
that App Engine
can use to monitor

00:02:15.340 --> 00:02:19.570
the health of each running
instance of your stack.

00:02:19.570 --> 00:02:21.680
Because custom runtimes
allow you to build and run

00:02:21.680 --> 00:02:23.850
your own runtime stacks,
you could not only

00:02:23.850 --> 00:02:27.210
run Node.js code, but you can
run Rubium Rails and Pearl,

00:02:27.210 --> 00:02:28.164
too.

00:02:28.164 --> 00:02:29.580
In fact, you can
run anything that

00:02:29.580 --> 00:02:31.315
will run in the
Standard Virtual Machine

00:02:31.315 --> 00:02:35.360
and which can respond
to HTTP requests.

00:02:35.360 --> 00:02:37.970
Best of all, in many cases
you can run your existing

00:02:37.970 --> 00:02:42.030
application code on custom
runtimes without modification.

00:02:42.030 --> 00:02:45.090
One of the coolest things about
working with custom runtimes

00:02:45.090 --> 00:02:47.520
is that they are really similar
to how App Engine already

00:02:47.520 --> 00:02:48.560
works.

00:02:48.560 --> 00:02:50.860
If you're not familiar with
App Engine development,

00:02:50.860 --> 00:02:53.500
you basically develop
your application code,

00:02:53.500 --> 00:02:56.520
pull in any dependencies, and
supply a configuration file

00:02:56.520 --> 00:02:59.910
that provides metadata which
will be used by App Engine

00:02:59.910 --> 00:03:01.900
to deploy and run the app.

00:03:01.900 --> 00:03:03.900
You can also factor
large applications

00:03:03.900 --> 00:03:06.560
into logical components
called modules.

00:03:06.560 --> 00:03:08.420
Modules within an
application share

00:03:08.420 --> 00:03:10.730
states but have their
own performance settings,

00:03:10.730 --> 00:03:14.470
with each module having
its own configuration file.

00:03:14.470 --> 00:03:17.204
Our WebRTC application
has two modules.

00:03:17.204 --> 00:03:18.620
One is for the
front end component

00:03:18.620 --> 00:03:22.210
that handles incoming requests
and is a standard App Engine

00:03:22.210 --> 00:03:23.890
autoscale module.

00:03:23.890 --> 00:03:26.465
The second is the custom
runtimes module written

00:03:26.465 --> 00:03:29.220
in Node.js and which does
all of the heavy lifting

00:03:29.220 --> 00:03:32.410
via the Socket.IO Library.

00:03:32.410 --> 00:03:34.530
The first step towards
deploying the example app

00:03:34.530 --> 00:03:37.270
is to place the application
level, a module level

00:03:37.270 --> 00:03:40.150
configuration files,
alongside the application

00:03:40.150 --> 00:03:42.820
code and its dependencies.

00:03:42.820 --> 00:03:44.730
We then need to provide
some configuration

00:03:44.730 --> 00:03:46.150
for custom runtimes.

00:03:46.150 --> 00:03:48.730
And this comes in the
form of a Dockerfile.

00:03:48.730 --> 00:03:51.080
Custom runtimes are
actually Docker containers

00:03:51.080 --> 00:03:54.720
running on fully managed
Compute Engine Virtual Machines.

00:03:54.720 --> 00:03:57.530
Docker containers are portable,
lightweight virtual machines

00:03:57.530 --> 00:04:00.615
that allow code to run in
isolation from other containers

00:04:00.615 --> 00:04:02.540
but at the same time
safely share resources

00:04:02.540 --> 00:04:04.630
from the host machine.

00:04:04.630 --> 00:04:07.570
The Dockerfile defines a
configuration of a Docker image

00:04:07.570 --> 00:04:09.340
and can reference
another image which

00:04:09.340 --> 00:04:11.740
you can use as the
basis for a new image.

00:04:11.740 --> 00:04:14.020
In this example that's
all we're going to do.

00:04:14.020 --> 00:04:16.660
But you can define more complex
images via additional commands

00:04:16.660 --> 00:04:18.610
in the Docker file.

00:04:18.610 --> 00:04:21.180
Now when you deploy to
App Engine with Cloud SDK,

00:04:21.180 --> 00:04:23.560
it takes care of building
the required Docker images

00:04:23.560 --> 00:04:25.940
as well as creating and
managing the containers

00:04:25.940 --> 00:04:28.700
and the virtual machines
needed [INAUDIBLE].

00:04:28.700 --> 00:04:30.480
Once deployed your
app is immediately

00:04:30.480 --> 00:04:32.340
ready to start serving requests.

00:04:32.340 --> 00:04:34.730
It's really that simple.

00:04:34.730 --> 00:04:37.090
You can manage and monitor
your running application

00:04:37.090 --> 00:04:38.940
through the Developers
Console as you would

00:04:38.940 --> 00:04:40.545
any other App Engine app.

00:04:40.545 --> 00:04:43.620
And you can also see the status
of the managed virtual machines

00:04:43.620 --> 00:04:45.490
that are running the
Docker containers that

00:04:45.490 --> 00:04:47.680
run your application code.

00:04:47.680 --> 00:04:49.130
Behind the scenes,
App Engine does

00:04:49.130 --> 00:04:51.650
all of the work to keep
your code running, including

00:04:51.650 --> 00:04:55.420
monitoring instances and
checking that they are healthy.

00:04:55.420 --> 00:04:58.690
Custom runtimes make it easy
to run Node.js applications

00:04:58.690 --> 00:04:59.290
in the cloud.

00:04:59.290 --> 00:05:00.748
And because you
don't have to worry

00:05:00.748 --> 00:05:02.870
about managing systems
and software stacks,

00:05:02.870 --> 00:05:06.060
you can spend more time
writing code, or even using

00:05:06.060 --> 00:05:09.090
all the time you save for
a well deserved vacation.

00:05:09.090 --> 00:05:10.600
Go here to find
out how you can get

00:05:10.600 --> 00:05:12.740
started testing with
custom runtimes.

00:05:12.740 --> 00:05:15.430
And go to
developers.google.com/cloud

00:05:15.430 --> 00:05:17.855
for more information about
Google Cloud Platform.

00:05:17.855 --> 00:05:18.880
Thanks for watching.

00:05:18.880 --> 00:05:22.270
Now go out and build something
amazing in the cloud.

