WEBVTT
Kind: captions
Language: en

00:00:00.620 --> 00:00:03.370
The code you see below is a Python implementation of

00:00:03.370 --> 00:00:06.390
a mapper for our word count problem. Imagine we have

00:00:06.390 --> 00:00:09.490
a huge document filled with many lines of words. We

00:00:09.490 --> 00:00:11.960
can send different chunks of the document to a number of

00:00:11.960 --> 00:00:15.620
different mappers to get the job done. What's this mapper

00:00:15.620 --> 00:00:19.040
code doing? Let's take a closer look. The mapper takes in

00:00:19.040 --> 00:00:22.110
a document. For each line of the document, it creates

00:00:22.110 --> 00:00:25.560
and array consisting of the words in that line of text.

00:00:25.560 --> 00:00:28.430
We then cycle through the words. We clean each

00:00:28.430 --> 00:00:30.960
word up so we remove any punctuation and make

00:00:30.960 --> 00:00:34.420
all the letters lower case. Then for each word

00:00:34.420 --> 00:00:38.320
we emit a key value pair. The word itself and

00:00:38.320 --> 00:00:40.820
the number one. Note that the key value pair

00:00:40.820 --> 00:00:43.790
is separated by a tab. So, if a particular

00:00:43.790 --> 00:00:46.900
word appears multiple times in the document, we will

00:00:46.900 --> 00:00:51.670
emit multiple identical intermediate key value pairs. The word and

00:00:51.670 --> 00:00:54.790
the number one. Over and over again. Let's

00:00:54.790 --> 00:00:57.600
say we ran this map around the following sentence.

00:00:57.600 --> 00:01:02.640
Hello, My name is Dave. Dave is my name. The mapper would split the words on the

00:01:02.640 --> 00:01:05.269
white space like so. The mapper would then

00:01:05.269 --> 00:01:10.050
emit the following key value pairs. Hello one, my

00:01:10.050 --> 00:01:14.530
one, name one, and so on. The next step

00:01:14.530 --> 00:01:17.090
in the map reduced design paradigm, is to shuffle

00:01:17.090 --> 00:01:19.330
the results produced by the mappers and send

00:01:19.330 --> 00:01:21.940
all of the key value pairs corresponding to certain

00:01:21.940 --> 00:01:25.140
keys to certain reducers. So, if we ran the

00:01:25.140 --> 00:01:27.860
job with just one reducer, that reducer would process

00:01:27.860 --> 00:01:30.150
all the keys. But, if we ran the job

00:01:30.150 --> 00:01:32.990
with two reducers, one reducer might process half the

00:01:32.990 --> 00:01:36.680
keys while the other reducer process the other half.

00:01:36.680 --> 00:01:38.980
So, let's go back to our word count example.

