WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.944
[MUSIC PLAYING]

00:00:05.350 --> 00:00:07.960
BRAD ABRAMS: Whenever
I give a talk at I/O,

00:00:07.960 --> 00:00:11.800
I always ask to be first
thing in the morning,

00:00:11.800 --> 00:00:15.850
because I know only the
most motivated, smartest,

00:00:15.850 --> 00:00:18.100
best-looking audience comes.

00:00:18.100 --> 00:00:20.350
Give yourselves a round of
applause for being here.

00:00:22.970 --> 00:00:26.300
So we're going to talk about
building apps for the Google

00:00:26.300 --> 00:00:26.870
Assistant.

00:00:26.870 --> 00:00:29.870
If you know nothing about
building apps for the Google

00:00:29.870 --> 00:00:32.130
Assistant you're
in the right place.

00:00:32.130 --> 00:00:34.160
This is meant to be
an orientation talk,

00:00:34.160 --> 00:00:37.070
to give you a sense for
what scenarios work,

00:00:37.070 --> 00:00:38.730
how to accomplish it.

00:00:38.730 --> 00:00:40.940
And then, hopefully,
at the end of this talk

00:00:40.940 --> 00:00:44.570
we'll intrigue you to want
to drill in more and find out

00:00:44.570 --> 00:00:45.800
more information.

00:00:45.800 --> 00:00:48.290
So I'm Brad Abrams, and
I'm a product manager

00:00:48.290 --> 00:00:50.212
on the Google Assistant team.

00:00:50.212 --> 00:00:51.170
VERA TZONEVA: I'm Vera.

00:00:51.170 --> 00:00:53.854
I'm on the Product Partnerships
team on the Assistant team.

00:00:53.854 --> 00:00:56.270
ADAM COIMBA: I'm Adam Coimbra
and I'm a Partner Technology

00:00:56.270 --> 00:00:58.700
Manager on the Assistant.

00:00:58.700 --> 00:01:01.310
BRAD ABRAMS: So when Sundar
launched the Assistant at I/O

00:01:01.310 --> 00:01:03.830
last year, he did
so for one reason,

00:01:03.830 --> 00:01:06.680
and that was to build a
conversational interface

00:01:06.680 --> 00:01:08.480
to all of Google.

00:01:08.480 --> 00:01:11.870
And we wanted that to be a
single interface, regardless

00:01:11.870 --> 00:01:15.380
of what context you're
in, what device you're in,

00:01:15.380 --> 00:01:19.020
or what task you
trying to accomplish.

00:01:19.020 --> 00:01:20.690
So the way we think
about the Assistant

00:01:20.690 --> 00:01:22.730
is that, it's a conversation.

00:01:22.730 --> 00:01:24.740
And it's a conversation
between you

00:01:24.740 --> 00:01:30.650
and Google designed to help you
get things done, in your world.

00:01:30.650 --> 00:01:32.990
And one of the
reasons I'm personally

00:01:32.990 --> 00:01:35.510
so excited about
the assistant is

00:01:35.510 --> 00:01:40.900
it builds on Google's long
history of creating ecosystems.

00:01:40.900 --> 00:01:42.980
And that history
started, actually,

00:01:42.980 --> 00:01:47.330
with Google search where we
created a strong ecosystem

00:01:47.330 --> 00:01:50.120
between publishers and readers.

00:01:50.120 --> 00:01:52.520
It continues with
YouTube where we

00:01:52.520 --> 00:01:57.260
have a strong ecosystem between
creatives and their viewers.

00:01:57.260 --> 00:02:00.890
And, of course, many of
you know, on Play, we

00:02:00.890 --> 00:02:03.410
created an ecosystem
between Android app

00:02:03.410 --> 00:02:05.540
developers and their users.

00:02:05.540 --> 00:02:08.360
It's that exact same
kind of ecosystem

00:02:08.360 --> 00:02:11.150
we're creating with
the Google Assistant.

00:02:11.150 --> 00:02:14.840
And we-- that ecosystem is
enabled by a platform we call,

00:02:14.840 --> 00:02:17.570
Actions on Google.

00:02:17.570 --> 00:02:19.370
So you might be
interested in Actions

00:02:19.370 --> 00:02:22.160
on Google, because
it enables you

00:02:22.160 --> 00:02:24.800
to connect with a
whole new set of users,

00:02:24.800 --> 00:02:28.260
in different contexts,
in different places,

00:02:28.260 --> 00:02:31.160
everywhere the
Google Assistant is.

00:02:31.160 --> 00:02:34.310
You can also connect
to your existing users

00:02:34.310 --> 00:02:36.690
in new and different ways.

00:02:36.690 --> 00:02:38.870
And finally, it gives
you an opportunity

00:02:38.870 --> 00:02:42.020
to innovate in a
whole new computing

00:02:42.020 --> 00:02:46.160
domain, this domain of
conversational interface, which

00:02:46.160 --> 00:02:50.370
we'll talk a lot more
about in this talk.

00:02:50.370 --> 00:02:52.350
So since we launched the
platform, in December,

00:02:52.350 --> 00:02:56.400
we couldn't be more happy with
the variety and creativity

00:02:56.400 --> 00:02:59.110
of apps for the assistant
that we've seen.

00:02:59.110 --> 00:03:02.670
Whether you want to order a
pizza from dominoes or play,

00:03:02.670 --> 00:03:05.160
name that tune a
song pop, you can do

00:03:05.160 --> 00:03:08.160
a wide variety of activities.

00:03:08.160 --> 00:03:11.390
But I want to drill in on
one in particular today

00:03:11.390 --> 00:03:16.050
to give you the anatomy of
one of these assistant apps--

00:03:16.050 --> 00:03:17.940
What's really--
how do they work,

00:03:17.940 --> 00:03:19.680
what's really under the covers?

00:03:19.680 --> 00:03:21.480
So some of you
may have noticed--

00:03:21.480 --> 00:03:26.160
in addition to the Android
version of the Google I/O app,

00:03:26.160 --> 00:03:30.190
we now have a Google
Assistant I/O app as well.

00:03:30.190 --> 00:03:33.120
So, you're able to
say something-- talk

00:03:33.120 --> 00:03:37.500
to your assistant and say, OK,
Google, talk to Google I/O '17,

00:03:37.500 --> 00:03:40.890
and then the assistant looks at
all the ways it could possibly

00:03:40.890 --> 00:03:46.350
respond, all the context, all
the possible different options,

00:03:46.350 --> 00:03:49.770
and picks the very best one
for this user, at this time.

00:03:49.770 --> 00:03:55.700
In this case, because the user
used the app name, explicitly,

00:03:55.700 --> 00:04:00.480
I/O 17, then that's
like a URL, or tapping

00:04:00.480 --> 00:04:05.940
on a shortcut on the desktop,
and it brings us directly

00:04:05.940 --> 00:04:09.000
into our Google I/O 17 app.

00:04:09.000 --> 00:04:12.870
The user here is the
assistant given introduction,

00:04:12.870 --> 00:04:15.090
and then here is an ear con.

00:04:15.090 --> 00:04:19.050
So an ear con is to the ear,
what an icon is to the eye--

00:04:19.050 --> 00:04:22.019
it's an audio
distinction to help

00:04:22.019 --> 00:04:25.890
the users understand that
there's a transition happening.

00:04:25.890 --> 00:04:28.200
And then there's a
change in the voice,

00:04:28.200 --> 00:04:30.780
and the icons change,
and there is a--

00:04:30.780 --> 00:04:34.950
now there's a two way dialogue
between the Google I/O app,

00:04:34.950 --> 00:04:35.790
and the user.

00:04:35.790 --> 00:04:39.300
And that two way dialogue
continues, until either party

00:04:39.300 --> 00:04:41.320
is ready to exit.

00:04:41.320 --> 00:04:43.650
So that's how it
looks on Google Home,

00:04:43.650 --> 00:04:46.350
but, of course, we knew we
were launching for phones here

00:04:46.350 --> 00:04:48.360
at the event, so we
wanted to also make

00:04:48.360 --> 00:04:50.280
it work while on the phone.

00:04:50.280 --> 00:04:54.900
And there, you see it working
on the phones, suggestion chips,

00:04:54.900 --> 00:04:58.560
and images, and whatnot.

00:04:58.560 --> 00:05:01.889
In addition to that, we also
wanted to let you book seats.

00:05:01.889 --> 00:05:03.930
Some of you may have
noticed some of the sessions

00:05:03.930 --> 00:05:05.790
yesterday were kind of full.

00:05:05.790 --> 00:05:09.630
You might note, you can actually
reserve seats to the sessions.

00:05:09.630 --> 00:05:11.790
So we wanted to let
you do that transaction

00:05:11.790 --> 00:05:13.440
as well-- to book a seat.

00:05:13.440 --> 00:05:16.200
So when a session comes up-- you
can click the suggestion chip,

00:05:16.200 --> 00:05:17.670
reserve a seat.

00:05:17.670 --> 00:05:20.130
And if you click that, we
use our new seamless account

00:05:20.130 --> 00:05:24.510
linking to have you
sign in, and then you--

00:05:24.510 --> 00:05:27.090
even if you haven't created
account with just two taps,

00:05:27.090 --> 00:05:30.030
you can go and
create an account.

00:05:30.030 --> 00:05:31.470
Then you see your receipt.

00:05:31.470 --> 00:05:35.040
And of course it's free to
reserve a seat, so that's fine.

00:05:35.040 --> 00:05:37.710
And the transaction is complete.

00:05:37.710 --> 00:05:39.840
So, actually, what
we're going to do

00:05:39.840 --> 00:05:43.440
is walk through the end-to-end
experience of building that app

00:05:43.440 --> 00:05:45.520
I just showed in this session.

00:05:45.520 --> 00:05:47.850
I'm going to start off by
talking about the design

00:05:47.850 --> 00:05:48.840
process--

00:05:48.840 --> 00:05:51.450
how did we come up
with that app, what was

00:05:51.450 --> 00:05:53.770
the design that went into it?

00:05:53.770 --> 00:05:55.290
Adam then, is
going to go through

00:05:55.290 --> 00:05:58.260
the hard-core development of
it-- both the natural language

00:05:58.260 --> 00:06:02.700
understanding part, as well as
the transactional part of it,

00:06:02.700 --> 00:06:05.980
and show you in code
how to go build that.

00:06:05.980 --> 00:06:07.452
And then, Vera is
going to show how

00:06:07.452 --> 00:06:09.660
to make that app discoverable,
how you can get people

00:06:09.660 --> 00:06:12.360
to actually use that app.

00:06:12.360 --> 00:06:15.180
Let's drill into design.

00:06:15.180 --> 00:06:19.020
But first, do we
need design, at all?

00:06:19.020 --> 00:06:22.230
I mean, these
conversational apps,

00:06:22.230 --> 00:06:26.250
these assistant apps, I mean,
they're just chat bots, right?

00:06:26.250 --> 00:06:29.790
It's text input, text
output, there's no images,

00:06:29.790 --> 00:06:32.880
there's no forms to lay
out, there's no CSS to do--

00:06:32.880 --> 00:06:35.580
do you need design, at all?

00:06:35.580 --> 00:06:37.830
Well, consider a
very simple case.

00:06:37.830 --> 00:06:41.190
Say we wanted to reserve
a number of seats--

00:06:41.190 --> 00:06:43.350
a number of seats
at a restaurant--

00:06:43.350 --> 00:06:45.970
how might we handle this case?

00:06:45.970 --> 00:06:47.460
We say for how many--

00:06:47.460 --> 00:06:50.700
look at the wide variety
of ways that a user

00:06:50.700 --> 00:06:52.860
might respond to this query?

00:06:52.860 --> 00:06:56.390
How are we supposed to handle
each one of these cases?

00:06:56.390 --> 00:07:00.380
Well, the answer, of
course, is in the design.

00:07:00.380 --> 00:07:04.590
But, what is the nature of
design for these Assistant

00:07:04.590 --> 00:07:06.180
apps?

00:07:06.180 --> 00:07:09.600
Well, Oren Jacobs' Upholstering
coined this phrase,

00:07:09.600 --> 00:07:12.090
"Interactive Screenwriting,"
which I think

00:07:12.090 --> 00:07:15.080
fits perfectly what we're trying
to build with these Assistant

00:07:15.080 --> 00:07:17.100
apps.

00:07:17.100 --> 00:07:19.020
When you build a
Assistant app, it's

00:07:19.020 --> 00:07:23.310
kind of like you're writing a
screenplay, like for a movie,

00:07:23.310 --> 00:07:25.920
or a TV show where
you're writing dialogue,

00:07:25.920 --> 00:07:30.540
except you get to write lines
one, three, five, and seven,

00:07:30.540 --> 00:07:32.820
and somebody you
have no control over

00:07:32.820 --> 00:07:35.940
gets to write lines two,
four, six and eight.

00:07:35.940 --> 00:07:38.040
And you have to use
that to come together

00:07:38.040 --> 00:07:40.630
with a beautiful experience.

00:07:40.630 --> 00:07:45.180
And to do that, you have to
pull together design elements

00:07:45.180 --> 00:07:47.100
from two different
disciplines-- one

00:07:47.100 --> 00:07:49.540
is the linear narrative design.

00:07:49.540 --> 00:07:53.410
That's what we learn about
character, storytelling,

00:07:53.410 --> 00:07:57.160
and dialogue from books,
TV, shows, and movies.

00:07:57.160 --> 00:07:59.950
But, you have to merge that
with what we learn about

00:07:59.950 --> 00:08:02.440
from interactive design--

00:08:02.440 --> 00:08:08.170
what we get from games, and
mobile web app design, things

00:08:08.170 --> 00:08:12.830
where we learn about creativity,
engagement, and retention.

00:08:12.830 --> 00:08:15.110
So we need to bring
those things together.

00:08:15.110 --> 00:08:18.010
So let's talk about
how we do that, here.

00:08:18.010 --> 00:08:19.900
We looked at all of
our Assistant apps,

00:08:19.900 --> 00:08:23.050
and we found out the element
that they had in common,

00:08:23.050 --> 00:08:25.420
the ones that were--
got the most retentions,

00:08:25.420 --> 00:08:27.540
they had a really
strong persona.

00:08:27.540 --> 00:08:30.410
And so we wanted to
build that for our app.

00:08:30.410 --> 00:08:35.020
So what we did is, we actually
thought about you-- what would

00:08:35.020 --> 00:08:37.059
you might want out of the app.

00:08:37.059 --> 00:08:39.490
We benefited from
having a marketing team

00:08:39.490 --> 00:08:42.250
that we could work with, but
you don't need a marketing team.

00:08:42.250 --> 00:08:45.940
And really sat down and
understood the brand attributes

00:08:45.940 --> 00:08:47.680
and the design principles.

00:08:47.680 --> 00:08:51.040
And from that we
distilled a style guide,

00:08:51.040 --> 00:08:54.700
and this style guide helped
us write the dialogue

00:08:54.700 --> 00:08:56.200
for our Assistant app.

00:08:56.200 --> 00:08:59.200
There were actually several
of us writing dialogue,

00:08:59.200 --> 00:09:01.660
and by actually having
a guide like this--

00:09:01.660 --> 00:09:03.460
I mean, we literally
had a version

00:09:03.460 --> 00:09:07.660
of this that we kept up while
we were writing dialogue.

00:09:07.660 --> 00:09:09.910
It kept the persona
tight and crisp

00:09:09.910 --> 00:09:13.810
even though different
people were writing.

00:09:13.810 --> 00:09:18.730
So just to tell you, we also
wanted to launch for the phone.

00:09:18.730 --> 00:09:22.030
So we needed-- we knew we
wanted both visual and eyes-free

00:09:22.030 --> 00:09:26.020
experience, and so we
wanted to make sure we

00:09:26.020 --> 00:09:27.620
had the similar content.

00:09:27.620 --> 00:09:31.720
So, one Assistant, but similar
content, so the chat bubbles

00:09:31.720 --> 00:09:35.080
are a subset of the spoken text.

00:09:35.080 --> 00:09:38.380
And that's because we could use
suggestion chips, which we just

00:09:38.380 --> 00:09:41.530
fell in love with as
an easy way to navigate

00:09:41.530 --> 00:09:44.200
through your Assistant app.

00:09:44.200 --> 00:09:46.930
Users didn't have to guess
at what our app could do.

00:09:46.930 --> 00:09:48.970
We could put the most
prominent things there,

00:09:48.970 --> 00:09:51.190
and users could zip
through very quickly.

00:09:51.190 --> 00:09:54.610
We also found that a
visual description--

00:09:54.610 --> 00:09:56.860
even in a very data
heavy app like this,

00:09:56.860 --> 00:10:01.060
a visual description really
helped bring more life.

00:10:01.060 --> 00:10:01.960
So, wow.

00:10:01.960 --> 00:10:06.380
That was a whirlwind tour of
design for conversational apps.

00:10:06.380 --> 00:10:08.565
There's way more to
be said about it.

00:10:08.565 --> 00:10:09.940
I hope you'll take
an opportunity

00:10:09.940 --> 00:10:11.710
to drill into more
of the sessions,

00:10:11.710 --> 00:10:16.090
here at I/O about that, or
catch them on YouTube after.

00:10:16.090 --> 00:10:17.620
But, I'm going to
turn it over Adam,

00:10:17.620 --> 00:10:19.995
who's going to talk about
actually building these things.

00:10:19.995 --> 00:10:21.010
Adam.

00:10:21.010 --> 00:10:22.390
VERA TZONEVA: Thanks, Brad.

00:10:22.390 --> 00:10:24.940
So I work on
Google's G Tech team,

00:10:24.940 --> 00:10:29.440
and our mission is, actually,
to help developers and partners

00:10:29.440 --> 00:10:31.360
like you, launch
on the Assistant.

00:10:31.360 --> 00:10:34.890
So, I couldn't be more
excited to be here today

00:10:34.890 --> 00:10:36.640
to show some of these
awesome new features

00:10:36.640 --> 00:10:38.181
that we're launching,
and, hopefully,

00:10:38.181 --> 00:10:41.180
motivate you to go
try it out yourself.

00:10:41.180 --> 00:10:44.250
So a couple slides back, Brad
showed some really cool screen

00:10:44.250 --> 00:10:48.790
shots of this Assistant
app for Google I/O that let

00:10:48.790 --> 00:10:50.920
you reserve a seat and sign in.

00:10:50.920 --> 00:10:52.690
And, today, I'm
actually going to try

00:10:52.690 --> 00:10:54.882
to build it with you right now.

00:10:54.882 --> 00:10:57.340
So let's look at some of the
steps that we took to do that,

00:10:57.340 --> 00:10:58.673
and that you could try yourself.

00:10:58.673 --> 00:11:01.690
So first, we create a project
on the actions console,

00:11:01.690 --> 00:11:04.390
and this is kind of like the
home for the Assistant app.

00:11:04.390 --> 00:11:08.200
We then connect a natural
language tool like, API.AI.

00:11:08.200 --> 00:11:09.449
Now, we really like API.AI--

00:11:09.449 --> 00:11:11.740
It's a world class natural
language understanding tool.

00:11:11.740 --> 00:11:14.031
But if you have your own
natural language understanding

00:11:14.031 --> 00:11:15.700
tool that's best in
class, you can also

00:11:15.700 --> 00:11:19.930
connect that right to our APIs.

00:11:19.930 --> 00:11:21.610
We then connect
a web hook, which

00:11:21.610 --> 00:11:24.730
allows us to perform back-end
processing, business logic,

00:11:24.730 --> 00:11:26.680
and connect to APIs.

00:11:26.680 --> 00:11:30.001
Again, we like Node.js, but
you can use any web server.

00:11:30.001 --> 00:11:32.500
Once you have all these kind
of basic integration points set

00:11:32.500 --> 00:11:34.130
up, you need to test it out.

00:11:34.130 --> 00:11:35.860
So we provide a web
simulator, which

00:11:35.860 --> 00:11:39.070
makes it really easy to
do local development.

00:11:39.070 --> 00:11:40.660
But it's really
important to always

00:11:40.660 --> 00:11:42.160
actually test on a real device.

00:11:42.160 --> 00:11:44.426
So, just by clicking test
in the actions console,

00:11:44.426 --> 00:11:46.300
you can immediately try
it out on your Google

00:11:46.300 --> 00:11:49.450
Home, your Android, or iPhone.

00:11:49.450 --> 00:11:51.010
So once we have
all that done, we

00:11:51.010 --> 00:11:52.480
want to enhance it
for mobile using

00:11:52.480 --> 00:11:55.090
some of the visual responses
that Brad talked about.

00:11:55.090 --> 00:11:57.760
So we can do that with
API.AI and with our web hook.

00:11:57.760 --> 00:12:00.730
And then finally, we enable
that seamless sign in flow,

00:12:00.730 --> 00:12:02.590
and the ordering
experience by integrating

00:12:02.590 --> 00:12:05.039
with the transactions API.

00:12:05.039 --> 00:12:05.830
But, wait a minute.

00:12:05.830 --> 00:12:07.505
So once we've gotten
all this done,

00:12:07.505 --> 00:12:09.880
how does it actually happen
that a user can say something

00:12:09.880 --> 00:12:11.800
to the assistant, and
it triggers your app,

00:12:11.800 --> 00:12:13.850
and all and all
the magic happens?

00:12:13.850 --> 00:12:15.720
Well, let's take
a look into that.

00:12:15.720 --> 00:12:17.470
So what happens is the
user says something

00:12:17.470 --> 00:12:21.250
like, talk to Google I/O '17 to
their Assistant enabled device

00:12:21.250 --> 00:12:22.120
like, Google Home.

00:12:22.120 --> 00:12:24.370
And the speech is streamed
through to the Assistant

00:12:24.370 --> 00:12:26.230
and transcribed as text.

00:12:26.230 --> 00:12:29.260
The assistant then applies
natural language understanding,

00:12:29.260 --> 00:12:31.030
ranking, it uses
our Knowledge Graph,

00:12:31.030 --> 00:12:34.330
and it uses the user's context
to understand the user's query,

00:12:34.330 --> 00:12:37.330
and realize that the I/O
app is the right service

00:12:37.330 --> 00:12:38.920
to fulfill that request.

00:12:38.920 --> 00:12:43.430
So it invokes the I/O apps
API.AI agent and the API.AI

00:12:43.430 --> 00:12:47.460
agent understands it against
an intent defined there,

00:12:47.460 --> 00:12:49.400
that you've defined.

00:12:49.400 --> 00:12:52.370
It then calls the web hook
to perform business logic,

00:12:52.370 --> 00:12:56.210
to talk to the I/O
API, and get some data.

00:12:56.210 --> 00:12:58.970
And it formulates a
conversational response,

00:12:58.970 --> 00:13:01.790
which is sent all the way
back through to API.AI,

00:13:01.790 --> 00:13:04.141
to the Assistant,
and out to the user.

00:13:04.141 --> 00:13:04.640
Cool.

00:13:04.640 --> 00:13:06.090
So that's how it works.

00:13:06.090 --> 00:13:09.030
And let's get into some of the
details of how we built it.

00:13:09.030 --> 00:13:11.090
So we mentioned that the
Actions Console is kind

00:13:11.090 --> 00:13:11.900
of like the starting point.

00:13:11.900 --> 00:13:13.399
And we're really
excited about this.

00:13:13.399 --> 00:13:14.960
We launched it yesterday.

00:13:14.960 --> 00:13:17.600
And it's a really focused
way to develop and manage

00:13:17.600 --> 00:13:18.950
your Assistant app.

00:13:18.950 --> 00:13:20.570
So the three main
things that it does

00:13:20.570 --> 00:13:23.270
is one, allowing you
to configure and set up

00:13:23.270 --> 00:13:27.470
the metadata and the directory
listing for your Assistant app,

00:13:27.470 --> 00:13:29.870
and branding information.

00:13:29.870 --> 00:13:32.570
It then allows you to manage
the testing and deployment

00:13:32.570 --> 00:13:34.550
process in a fine-grained way.

00:13:34.550 --> 00:13:36.472
And then, once live,
it gives you analytics

00:13:36.472 --> 00:13:38.930
so that you can track how it's
doing out in the real world,

00:13:38.930 --> 00:13:41.180
with the real users.

00:13:41.180 --> 00:13:44.490
Then we connect it to API.AI, or
another natural language tool.

00:13:44.490 --> 00:13:47.960
So, in API.AI-- the kind
of main thing that we do

00:13:47.960 --> 00:13:49.820
is, we define
intents and entities.

00:13:49.820 --> 00:13:52.700
So intents--
basically, model user

00:13:52.700 --> 00:13:54.740
queries so that
we can understand,

00:13:54.740 --> 00:13:58.430
in a structured way,
what the user wants.

00:13:58.430 --> 00:14:01.770
Entities are sort of
structured packets of text

00:14:01.770 --> 00:14:05.120
that let us extract meaning
from the user's request.

00:14:05.120 --> 00:14:06.800
So once we've gotten
these defined,

00:14:06.800 --> 00:14:09.410
we can then write
responses to user requests

00:14:09.410 --> 00:14:12.110
in line in the API.AI tool.

00:14:12.110 --> 00:14:15.320
And so, now that we have our
kind of basic model set up,

00:14:15.320 --> 00:14:18.710
we can use training in API.AI
to improve the dialogue model,

00:14:18.710 --> 00:14:19.610
over time.

00:14:19.610 --> 00:14:21.980
So the example, here, is
for the Google I/O app.

00:14:21.980 --> 00:14:25.317
If the user were to say, what
Android sessions are there?

00:14:25.317 --> 00:14:27.650
API.AI is going to understand
that that maps to the list

00:14:27.650 --> 00:14:31.130
session intent, and it's
going to send a request down

00:14:31.130 --> 00:14:35.990
to the web hook, and trigger the
list session function, there.

00:14:35.990 --> 00:14:37.850
So let's look at the web hook.

00:14:37.850 --> 00:14:40.700
Now again, you can build a
web hook using any web server

00:14:40.700 --> 00:14:42.520
framework, but we like Node.js.

00:14:42.520 --> 00:14:44.780
And we like it so much,
we built a client library

00:14:44.780 --> 00:14:47.010
that makes it easier
to interact with.

00:14:47.010 --> 00:14:49.200
So you can get that
just with one command--

00:14:49.200 --> 00:14:51.260
NPM install actions on Google.

00:14:51.260 --> 00:14:53.330
And, basically, we have
a bit of boilerplate,

00:14:53.330 --> 00:14:55.850
and we have a handler for
this list session intent,

00:14:55.850 --> 00:14:57.330
list topics intent.

00:14:57.330 --> 00:14:59.621
And you can see there, all
we're doing is we're calling

00:14:59.621 --> 00:15:02.960
the Google I/O API, getting a
structured set of categories,

00:15:02.960 --> 00:15:05.060
and then formulating a
conversational response--

00:15:05.060 --> 00:15:06.470
the topics covered are--

00:15:06.470 --> 00:15:09.154
dot, dot, dot.

00:15:09.154 --> 00:15:10.570
Now that all this
stuff is set up,

00:15:10.570 --> 00:15:11.820
again, we want to test it out.

00:15:11.820 --> 00:15:14.320
So we have this web simulator,
and it's newly updated

00:15:14.320 --> 00:15:16.780
to provide an interface for
testing things visually,

00:15:16.780 --> 00:15:19.680
and for testing a
voice-only environment.

00:15:19.680 --> 00:15:22.180
And, again, it's super important
to actually test on device.

00:15:22.180 --> 00:15:24.370
So just by clicking,
Test and Actions Console,

00:15:24.370 --> 00:15:27.430
you can immediately take your
device and say, talk to my app,

00:15:27.430 --> 00:15:32.030
and you're going to be able to
test it out, just like that.

00:15:32.030 --> 00:15:34.840
So I'm going to go over
to my demo one machine,

00:15:34.840 --> 00:15:37.750
and we're going to
actually try this out,

00:15:37.750 --> 00:15:39.050
with the real I/O app.

00:15:43.837 --> 00:15:45.420
So this is the Actions
Console, and we

00:15:45.420 --> 00:15:48.780
can see it's already set
up with the I/O demo app.

00:15:48.780 --> 00:15:53.294
We've got some app
information set up there,

00:15:53.294 --> 00:15:54.960
which is basically
branding information.

00:15:54.960 --> 00:15:57.950
And it's already connected
to an API.AI project.

00:15:57.950 --> 00:16:01.620
And we can go edit
on aPi AI, right now.

00:16:01.620 --> 00:16:03.811
And we have some
intents already set up.

00:16:03.811 --> 00:16:06.060
We have a welcome intent,
which handles the case where

00:16:06.060 --> 00:16:07.780
the user triggers the app.

00:16:07.780 --> 00:16:10.060
We have the choose
session intent,

00:16:10.060 --> 00:16:12.060
which lets the user get
details about a session,

00:16:12.060 --> 00:16:13.500
and a couple others.

00:16:13.500 --> 00:16:15.090
So I've been around
I/O, yesterday,

00:16:15.090 --> 00:16:17.400
and I heard some
developers wondering what

00:16:17.400 --> 00:16:18.930
the free stuff was this year.

00:16:18.930 --> 00:16:21.660
So why don't we make this
app a little bit more useful,

00:16:21.660 --> 00:16:24.118
and make it so that the user
could just say to their phone,

00:16:24.118 --> 00:16:26.790
anytime-- hey, what's the swag a
I/O, and get a useful response.

00:16:26.790 --> 00:16:29.295
So to do that, we would
just create an intent,

00:16:29.295 --> 00:16:33.750
and we can call it, the swag
intent, and add a query--

00:16:33.750 --> 00:16:37.500
what's the swag at I/O?

00:16:37.500 --> 00:16:39.270
And right there in
the tool, we can

00:16:39.270 --> 00:16:42.840
define a response--
it's a Google

00:16:42.840 --> 00:16:48.900
Home and $700 in Cloud Credits.

00:16:48.900 --> 00:16:49.830
Awesome.

00:16:49.830 --> 00:16:52.020
And so, we just hit, Save.

00:16:52.020 --> 00:16:55.170
We go to the Actions
on Google Integration,

00:16:55.170 --> 00:16:58.110
and we click, Test.

00:16:58.110 --> 00:17:02.970
And, just like that, we can try
this out in our Web Simulator.

00:17:02.970 --> 00:17:06.240
So we say talk to, I/O demo.

00:17:06.240 --> 00:17:07.270
And we have to log in.

00:17:10.530 --> 00:17:15.170
And it invokes this app, and we
can say what's the swag at I/O?

00:17:20.240 --> 00:17:22.550
And it's a Google Home
and $700 in cloud credits.

00:17:22.550 --> 00:17:23.329
Awesome.

00:17:23.329 --> 00:17:28.069
So, now that we have some
of the basic wiring set up,

00:17:28.069 --> 00:17:32.250
we can talk about making this
work really nicely on mobile.

00:17:32.250 --> 00:17:33.560
So go back here.

00:17:39.210 --> 00:17:41.120
So to make it work
really nicely on mobile,

00:17:41.120 --> 00:17:46.380
we want to add visual responses
with API.AI and with our web

00:17:46.380 --> 00:17:47.000
hook.

00:17:47.000 --> 00:17:53.660
So API.AI provides a built-in,
card-building interface,

00:17:53.660 --> 00:17:55.500
and this is really nice.

00:17:55.500 --> 00:17:59.180
It lets us easily define
cards and chips and carousels

00:17:59.180 --> 00:18:01.280
and lists.

00:18:01.280 --> 00:18:04.130
It also can then
send that request

00:18:04.130 --> 00:18:07.400
down to the web hook,
which will enable you

00:18:07.400 --> 00:18:09.930
to create dynamic responses.

00:18:09.930 --> 00:18:13.805
So that's a really nice,
useful feature we've added.

00:18:13.805 --> 00:18:15.680
Let's look at how we do
it from the web hook.

00:18:15.680 --> 00:18:17.846
So there's two really
important things in this code,

00:18:17.846 --> 00:18:18.980
that you see.

00:18:18.980 --> 00:18:20.690
The first one is
that we're checking

00:18:20.690 --> 00:18:22.557
whether the user has a screen.

00:18:22.557 --> 00:18:24.140
So this is super
important, because we

00:18:24.140 --> 00:18:27.500
need to be aware of the user's
modality of their contacts,

00:18:27.500 --> 00:18:29.700
and tailor our
experience accordingly.

00:18:29.700 --> 00:18:32.210
So, if the user has
a screen, we show

00:18:32.210 --> 00:18:37.140
a rich card that's populated
with data about the session.

00:18:37.140 --> 00:18:39.710
So now I can head back
over to the machine,

00:18:39.710 --> 00:18:44.090
and show adding that
right into the I/O app.

00:18:53.660 --> 00:18:57.290
Looks like there's a delay, so
heading back over to the demo

00:18:57.290 --> 00:18:58.030
one machine--

00:19:01.430 --> 00:19:02.870
great.

00:19:02.870 --> 00:19:05.450
So we have this session
that han-- this intent that

00:19:05.450 --> 00:19:07.580
handles the moment
when the user has

00:19:07.580 --> 00:19:11.330
asked for information-- specific
information-- about a session.

00:19:11.330 --> 00:19:13.520
So this is the,
choose session intent.

00:19:13.520 --> 00:19:17.780
And what we can do is add
suggestion chips, right there,

00:19:17.780 --> 00:19:22.020
with the API.AI
response builder.

00:19:22.020 --> 00:19:24.230
So we add some suggestion
chips, and we'll

00:19:24.230 --> 00:19:27.560
add that reserve a seat chip.

00:19:27.560 --> 00:19:32.980
And we can add some others like,
next session, other topics,

00:19:32.980 --> 00:19:34.450
and hit, Save.

00:19:34.450 --> 00:19:37.330
Now to add that rich card
that's dynamically populated,

00:19:37.330 --> 00:19:41.140
we need to turn over to the
web hook, and update it.

00:19:41.140 --> 00:19:44.740
So this is the web hook
code, and, right here,

00:19:44.740 --> 00:19:47.480
we have, essentially, like
a controller for our app.

00:19:47.480 --> 00:19:50.600
So it has a pointer to each
of the intents in API.AI

00:19:50.600 --> 00:19:53.290
that triggers a function
in the Node.js code.

00:19:53.290 --> 00:19:55.744
So the choose session
intent is, here.

00:19:55.744 --> 00:19:57.160
And we can see
that right now it's

00:19:57.160 --> 00:20:00.370
just doing a very simple thing--
it's calling the I/O API,

00:20:00.370 --> 00:20:05.110
and it's creating a
simple text response.

00:20:05.110 --> 00:20:07.600
So we have that code that we
showed before prepared here,

00:20:07.600 --> 00:20:09.160
and we can add it in.

00:20:09.160 --> 00:20:11.890
And we're checking whether
there's screen output,

00:20:11.890 --> 00:20:13.780
whether the user has a screen.

00:20:13.780 --> 00:20:17.652
And if they do, then we
add a rich, response.

00:20:17.652 --> 00:20:19.735
Otherwise, we can fall
back on this text response.

00:20:22.490 --> 00:20:25.880
And my web hook will
automatically update.

00:20:25.880 --> 00:20:32.960
And I can go and
update, and test.

00:20:35.840 --> 00:20:37.620
Now we're heading
back to the Simulator.

00:20:42.420 --> 00:20:43.920
And let's say I'm
interested in the,

00:20:43.920 --> 00:20:45.750
What's New in Android session.

00:20:51.430 --> 00:20:53.800
So I'll get this
rich card with a link

00:20:53.800 --> 00:20:55.390
and with the suggestion chips.

00:20:55.390 --> 00:20:57.670
So that was pretty easy, right?

00:20:57.670 --> 00:21:00.250
So, the last part, then--

00:21:00.250 --> 00:21:02.950
heading back into the deck--

00:21:02.950 --> 00:21:07.180
is to add this
transactional experience

00:21:07.180 --> 00:21:09.777
where the user can sign
in and they can actually

00:21:09.777 --> 00:21:10.360
make an order.

00:21:10.360 --> 00:21:13.230
So we are so excited about
the transactions API.

00:21:13.230 --> 00:21:15.369
It released for
developer preview,

00:21:15.369 --> 00:21:17.410
yesterday, so you can
start building with it now.

00:21:17.410 --> 00:21:18.868
And really what it
does, is it lets

00:21:18.868 --> 00:21:23.170
you accept purchases and orders
from your users, with your app.

00:21:23.170 --> 00:21:25.990
And we make this a great
experience on the Assistant

00:21:25.990 --> 00:21:27.140
with three main things.

00:21:27.140 --> 00:21:29.560
The first is providing a
seamless, build-in experience

00:21:29.560 --> 00:21:31.930
for sharing payments
and identity information

00:21:31.930 --> 00:21:33.777
between the user and the app.

00:21:33.777 --> 00:21:35.860
Once the user has sort of
gotten this information,

00:21:35.860 --> 00:21:37.480
and approved the
purchase, we then

00:21:37.480 --> 00:21:38.605
give you a way to reengage.

00:21:38.605 --> 00:21:41.140
Because you've now sent
the user a receipt,

00:21:41.140 --> 00:21:43.150
and we can send
updates to that receipt

00:21:43.150 --> 00:21:45.196
that manifest as
notifications for the user.

00:21:45.196 --> 00:21:47.320
So you can actually reengage,
and get the user back

00:21:47.320 --> 00:21:49.007
into your app in that way.

00:21:49.007 --> 00:21:50.590
Now to integrate
with the transactions

00:21:50.590 --> 00:21:52.160
API there are five main steps.

00:21:52.160 --> 00:21:54.610
So first, building out a
basket, or a shopping cart.

00:21:54.610 --> 00:21:57.070
And this can be as simple
as a suggestion chip,

00:21:57.070 --> 00:21:58.180
like in the I/O app.

00:21:58.180 --> 00:22:01.300
Or, it can be as complicated
as a menu-ordering experience

00:22:01.300 --> 00:22:04.540
with lots of different
choices and customizations.

00:22:04.540 --> 00:22:05.980
During that cart
assembly process

00:22:05.980 --> 00:22:07.060
you might need some
more information

00:22:07.060 --> 00:22:08.230
about the user-- you
might need to know

00:22:08.230 --> 00:22:09.820
what's their delivery address.

00:22:09.820 --> 00:22:12.340
This lets you set price, and
service availability, etc.

00:22:12.340 --> 00:22:15.340
So we give you an
API to request that.

00:22:15.340 --> 00:22:17.040
Once your order
is all set up, you

00:22:17.040 --> 00:22:19.660
need to propose it to the user
and get their authorization.

00:22:19.660 --> 00:22:21.730
So we provide a
propose order API

00:22:21.730 --> 00:22:24.400
that lets the user
preview what you're asking

00:22:24.400 --> 00:22:26.734
them to buy, and approve it.

00:22:26.734 --> 00:22:28.150
Once they've
approved it, you need

00:22:28.150 --> 00:22:30.560
to confirm the order-- so let
them know that it's active,

00:22:30.560 --> 00:22:31.850
and send them a receipt.

00:22:31.850 --> 00:22:34.250
So we provide a confirm
order API for that.

00:22:34.250 --> 00:22:36.460
So lastly, many
transactional experiences

00:22:36.460 --> 00:22:38.380
require the user's identity.

00:22:38.380 --> 00:22:41.710
And so we provide the ability
to integrate with an OAuth 2 web

00:22:41.710 --> 00:22:46.000
server, and provide a seamless
log in flow for the user.

00:22:46.000 --> 00:22:48.580
So let's take a
deeper look into that.

00:22:48.580 --> 00:22:52.000
So many of you, hopefully,
are familiar with OAuth 2.

00:22:52.000 --> 00:22:53.600
It's pretty standard.

00:22:53.600 --> 00:22:56.530
And, basically, to set it
up with Actions on Google,

00:22:56.530 --> 00:22:58.540
you go to the Actions
console, and you configure

00:22:58.540 --> 00:23:00.430
the usual OAuth 2 stuff--

00:23:00.430 --> 00:23:03.770
client ID, client secret,
auth URL, etc, there.

00:23:03.770 --> 00:23:06.580
And that lets us know how
to talk to your server.

00:23:06.580 --> 00:23:09.280
And then, in dialogue,
you call an API

00:23:09.280 --> 00:23:12.340
to trigger the sign-in flow.

00:23:12.340 --> 00:23:15.307
So you can do that from
API.AI or from the web hook.

00:23:15.307 --> 00:23:17.890
Now once the user is signed in,
you want to propose the order.

00:23:17.890 --> 00:23:21.184
So this snippet of code shows
a proposed order API call.

00:23:21.184 --> 00:23:22.600
And what we're
doing here is we're

00:23:22.600 --> 00:23:24.100
building a structured
order object,

00:23:24.100 --> 00:23:26.580
we're populating the line
item with the session title,

00:23:26.580 --> 00:23:28.660
we're saying the
price is 0, and then

00:23:28.660 --> 00:23:32.350
we're calling to ask for
transaction decision API

00:23:32.350 --> 00:23:34.586
to propose the order.

00:23:34.586 --> 00:23:35.960
Once the order
has been proposed,

00:23:35.960 --> 00:23:39.100
we get a new request saying hey,
the user accepted the order,

00:23:39.100 --> 00:23:40.550
now you need to confirm it.

00:23:40.550 --> 00:23:42.940
So this snippet of code
shows confirming the order.

00:23:42.940 --> 00:23:45.910
And, here, we're building
a structured order update.

00:23:45.910 --> 00:23:47.470
We say, hey, the
status is confirmed,

00:23:47.470 --> 00:23:49.507
we provide a receipt,
and then we send it along

00:23:49.507 --> 00:23:52.090
to the user as a receipt, just
like any other visual response.

00:23:54.324 --> 00:23:55.990
One more time going
back to the machine,

00:23:55.990 --> 00:23:58.239
and we're going to actually
add all this into our app.

00:24:03.910 --> 00:24:06.670
So where we left off is, we had
this suggestion chip-- reserve

00:24:06.670 --> 00:24:08.290
a seat, but we don't have
any way to handle it.

00:24:08.290 --> 00:24:10.170
So we need a new intent
to handle the case

00:24:10.170 --> 00:24:13.050
where the user taps that chip.

00:24:13.050 --> 00:24:16.710
So we can create the
reserve a seat intent,

00:24:16.710 --> 00:24:20.320
and it'll be triggered when
the user says, reserve a seat.

00:24:20.320 --> 00:24:22.320
And then, what we want
to do is immediately call

00:24:22.320 --> 00:24:23.970
the sign in API.

00:24:23.970 --> 00:24:25.740
So there's just a
little bit of code

00:24:25.740 --> 00:24:30.060
that we need to put into
API.AI to trigger that,

00:24:30.060 --> 00:24:34.590
and we can just add it
here, and hit, Save.

00:24:34.590 --> 00:24:36.090
So with that, we're
calling the sign

00:24:36.090 --> 00:24:38.696
in API, which will
log in the user.

00:24:38.696 --> 00:24:40.320
Now to make this
really work, again, we

00:24:40.320 --> 00:24:43.900
need to hook up our OAuth
2 server to the project.

00:24:43.900 --> 00:24:48.070
So going back into the console,
we can see how we did that.

00:24:48.070 --> 00:24:49.980
So we have this Account
Linking section.

00:24:49.980 --> 00:24:50.970
We can edit it.

00:24:50.970 --> 00:24:54.000
And we see it's pre-filled, but
we have the standard stuff--

00:24:54.000 --> 00:24:55.600
client ID, client secret.

00:24:55.600 --> 00:24:58.860
There's a couple extra steps
that we take in our OAuth 2

00:24:58.860 --> 00:25:00.870
server to make the
integration really seamless

00:25:00.870 --> 00:25:03.240
and, it's easy to
do, and we highly

00:25:03.240 --> 00:25:06.060
recommend everyone does it.

00:25:06.060 --> 00:25:07.060
So, what do we have?

00:25:07.060 --> 00:25:09.930
We have an intent to handle when
the user says, reserve a seat.

00:25:09.930 --> 00:25:11.520
We trigger the sign in API.

00:25:11.520 --> 00:25:13.710
But what happens when
the user signs in?

00:25:13.710 --> 00:25:16.260
Well, we have this
intent set up that,

00:25:16.260 --> 00:25:18.755
basically, passes that event
through to our web hook.

00:25:18.755 --> 00:25:20.130
And what we're
going to do, then,

00:25:20.130 --> 00:25:22.920
is call the propose order API.

00:25:22.920 --> 00:25:25.320
Once the order is proposed,
and the user accepts it,

00:25:25.320 --> 00:25:27.662
we get another request
to API.AI saying,

00:25:27.662 --> 00:25:30.120
hey, the user accepted this,
you need to confirm the order.

00:25:30.120 --> 00:25:32.550
And that comes through and is
matched by the handle order

00:25:32.550 --> 00:25:33.730
intent, here.

00:25:33.730 --> 00:25:36.090
That, again, is
just passed right

00:25:36.090 --> 00:25:38.910
through to the web hook, which
calls the confirm order API.

00:25:38.910 --> 00:25:39.990
And then we're done.

00:25:39.990 --> 00:25:41.880
So the last thing to do
is just add this code

00:25:41.880 --> 00:25:44.100
into our web hook.

00:25:44.100 --> 00:25:46.230
So, going back
in, we see we have

00:25:46.230 --> 00:25:49.630
the controller for our app,
and we have the handle sign,

00:25:49.630 --> 00:25:52.500
and handled order--

00:25:52.500 --> 00:25:53.190
handlers.

00:25:53.190 --> 00:25:55.416
And we see that they're
empty, right now.

00:25:55.416 --> 00:25:56.540
So we can add in that code.

00:26:01.622 --> 00:26:03.830
So handle sign in-- again,
this should look familiar.

00:26:03.830 --> 00:26:05.704
We're building an order
object, populating it

00:26:05.704 --> 00:26:08.821
with session data, and proposing
it to the user, with this call

00:26:08.821 --> 00:26:09.320
right, here.

00:26:11.870 --> 00:26:14.300
For handle decision-- this
is where the user has already

00:26:14.300 --> 00:26:18.700
accepted the order, and we
want to provide a receipt.

00:26:18.700 --> 00:26:23.569
So we can add that code and it
should automatically update.

00:26:23.569 --> 00:26:24.110
So that's it.

00:26:24.110 --> 00:26:24.960
That's all it took.

00:26:24.960 --> 00:26:30.840
And now we can actually test
this out on my demo two device.

00:26:30.840 --> 00:26:34.502
Just have to update the project.

00:26:34.502 --> 00:26:36.967
[NO SPEECH]

00:26:47.710 --> 00:26:48.210
Cool.

00:26:48.210 --> 00:26:50.730
So we're just going to go
over to the demo two device,

00:26:50.730 --> 00:26:57.385
and we can say, I/O demo,
what's new in Android?

00:27:04.022 --> 00:27:05.480
We can tap the
reserve a seat chip.

00:27:14.880 --> 00:27:15.380
OK.

00:27:15.380 --> 00:27:19.580
Well, that's why it's
a developer preview.

00:27:19.580 --> 00:27:22.580
We can do one thing, and I
think it'll make it work.

00:27:22.580 --> 00:27:24.992
Thank you, thank you.

00:27:24.992 --> 00:27:25.700
We appreciate it.

00:27:28.520 --> 00:27:32.120
So, I think, it will work,
if I can just do this.

00:27:32.120 --> 00:27:33.245
Might have been user error.

00:27:37.010 --> 00:27:39.120
So let's try one more time.

00:27:39.120 --> 00:27:43.900
I/O demo, what's new in Android?

00:27:54.450 --> 00:27:55.430
There we go.

00:27:58.380 --> 00:28:00.334
Cool.

00:28:00.334 --> 00:28:01.750
And we see with
just two taps, I'm

00:28:01.750 --> 00:28:05.120
creating an account
on this server.

00:28:05.120 --> 00:28:07.780
And we proposed the order to the
user-- what's new in Android?

00:28:07.780 --> 00:28:11.230
$0, I approve.

00:28:11.230 --> 00:28:13.640
And we get our receipt.

00:28:13.640 --> 00:28:14.170
Cool.

00:28:14.170 --> 00:28:15.086
So that's all it took.

00:28:15.086 --> 00:28:17.590
We did that in
like, 10 minutes--

00:28:17.590 --> 00:28:21.141
build a transactional
experience, seamlessly signed

00:28:21.141 --> 00:28:21.640
in the user.

00:28:21.640 --> 00:28:23.030
It's pretty awesome stuff.

00:28:23.030 --> 00:28:26.490
So let me jump back in for just
a quick recap on what we did.

00:28:29.100 --> 00:28:31.250
So we created a rich
mobile experience

00:28:31.250 --> 00:28:33.290
for finding out
about I/O sessions.

00:28:33.290 --> 00:28:36.440
We added a suggestion chip to
let the user reserve a seat.

00:28:36.440 --> 00:28:38.360
And we connected
an OAuth 2 server

00:28:38.360 --> 00:28:40.149
to enable a seamless
sign-in flow.

00:28:40.149 --> 00:28:41.690
And finally, we used
the transactions

00:28:41.690 --> 00:28:44.810
API to propose the reservation,
and get the users acceptance,

00:28:44.810 --> 00:28:45.904
and send a receipt.

00:28:45.904 --> 00:28:47.570
We did this, again,
in like, 10 minutes.

00:28:47.570 --> 00:28:50.120
So I really-- I believe that
all of you could go, right now,

00:28:50.120 --> 00:28:51.940
and add it and build
apps yourselves,

00:28:51.940 --> 00:28:53.210
that do the same exact thing.

00:28:53.210 --> 00:28:54.793
And I'm so excited
to see what you do.

00:28:54.793 --> 00:28:57.440
So with that, I'm going
to hand it over to, Vera.

00:28:57.440 --> 00:29:01.100
ADAM COIMBA: Thank you.

00:29:01.100 --> 00:29:02.340
Thanks, Adam.

00:29:02.340 --> 00:29:04.040
I'm, Vera, and I'm
here to tell you

00:29:04.040 --> 00:29:06.980
how your app can be
discovered, once you build.

00:29:06.980 --> 00:29:09.950
I have the opportunity to talk
to partners like you every day,

00:29:09.950 --> 00:29:14.000
and this is one of the
primary things that we hear.

00:29:14.000 --> 00:29:15.710
Let's actually
start by admitting

00:29:15.710 --> 00:29:18.710
that we live in a pretty
amazing time in technology.

00:29:18.710 --> 00:29:22.250
People are asking computers
to do things for them,

00:29:22.250 --> 00:29:24.920
they're asking them to
help them plan their day,

00:29:24.920 --> 00:29:26.780
to get from one
place to another,

00:29:26.780 --> 00:29:29.840
and to even clean their
apartment in a mess.

00:29:29.840 --> 00:29:31.760
And they're asking
for the little things

00:29:31.760 --> 00:29:34.820
like, my little brother,
despite being 22,

00:29:34.820 --> 00:29:36.860
recently asked the Google
Assistant how to make

00:29:36.860 --> 00:29:39.530
scrambled eggs for our family.

00:29:39.530 --> 00:29:42.560
And so, we know that
if you're building

00:29:42.560 --> 00:29:46.910
a productivity app, or a recipe
app, or a smart home app--

00:29:46.910 --> 00:29:50.150
your users are out
there looking for you.

00:29:50.150 --> 00:29:52.760
And if there's one thing that
we've learned about discovery

00:29:52.760 --> 00:29:54.950
over the years,
it's that the best

00:29:54.950 --> 00:29:58.040
way to find users who
want your service,

00:29:58.040 --> 00:30:01.310
is for them to find you.

00:30:01.310 --> 00:30:03.110
And think about it,
this is actually

00:30:03.110 --> 00:30:05.360
a very different world.

00:30:05.360 --> 00:30:07.010
No longer does the
user have to know

00:30:07.010 --> 00:30:10.280
that your app exists, or
have to download it, or even

00:30:10.280 --> 00:30:11.960
have to set it up.

00:30:11.960 --> 00:30:14.630
All they have to do
is say, OK, Google,

00:30:14.630 --> 00:30:17.480
or long press on home
on their mobile device,

00:30:17.480 --> 00:30:19.440
and they have access
to your service,

00:30:19.440 --> 00:30:23.330
and that's on over 100
million, plus devices.

00:30:23.330 --> 00:30:25.700
And, I'll be honest,
we're still getting

00:30:25.700 --> 00:30:27.560
started, there's a
ton of work to do,

00:30:27.560 --> 00:30:30.830
but that's a pretty
exciting thing.

00:30:30.830 --> 00:30:33.960
Our goal at Google is to help
connect you to your users.

00:30:33.960 --> 00:30:36.890
So, today, we're starting
with three primary ways

00:30:36.890 --> 00:30:39.380
of enabling discovery
of your Assistant app

00:30:39.380 --> 00:30:41.270
through the Google Assistant.

00:30:41.270 --> 00:30:43.520
The first, is in
dialogue-- so directly

00:30:43.520 --> 00:30:46.020
in the conversation
with the user.

00:30:46.020 --> 00:30:48.410
The second, is through
the Assistant Directory,

00:30:48.410 --> 00:30:50.300
which we announced yesterday.

00:30:50.300 --> 00:30:54.710
And then, the third, is through
links that you can share.

00:30:54.710 --> 00:30:56.750
So let's actually start
with in dialogue--

00:30:56.750 --> 00:30:59.750
so directly in the
conversation with the user.

00:30:59.750 --> 00:31:01.790
The most reliable
way that a user

00:31:01.790 --> 00:31:05.690
can get to your Assistant app
is by explicitly asking for it.

00:31:05.690 --> 00:31:09.860
Meaning, we have a set of
pre-established phrases--

00:31:09.860 --> 00:31:14.555
things like, talk to,
speak to, ask, or at--

00:31:14.555 --> 00:31:18.230
that once said, with the
name of your Assistant app,

00:31:18.230 --> 00:31:22.900
we introduce you, and then you
own the dialogue end to end.

00:31:22.900 --> 00:31:26.510
A user can also deep link
directly to an answer.

00:31:26.510 --> 00:31:30.230
So to extend the demo
that Adam just did--

00:31:30.230 --> 00:31:34.130
a user can say, hey, Google,
let's talk to Google I/O 17,

00:31:34.130 --> 00:31:35.960
and then we introduce the app.

00:31:35.960 --> 00:31:38.040
And they can also
say something like,

00:31:38.040 --> 00:31:41.420
hey, Google ask Google I/O
'17 about what was announced,

00:31:41.420 --> 00:31:44.030
and we'll introduce the app,
and then take the user directly

00:31:44.030 --> 00:31:45.660
to the answer.

00:31:45.660 --> 00:31:49.490
So some partner examples
of this are, hey,

00:31:49.490 --> 00:31:51.700
let's speak to Domino's,
and then we introduce,

00:31:51.700 --> 00:31:54.410
Domino's, and then,
Domino's comes in,

00:31:54.410 --> 00:31:55.610
and you can order a pizza.

00:31:55.610 --> 00:31:59.390
My brother might need this,
in case the eggs go awry.

00:31:59.390 --> 00:32:01.790
Or, hey, Google,
at Akinator, and we

00:32:01.790 --> 00:32:04.220
introduce a great
game on the platform.

00:32:04.220 --> 00:32:05.930
Or, hey, Google--

00:32:05.930 --> 00:32:07.130
I love this app--

00:32:07.130 --> 00:32:10.250
ask, Dr. Doggy if dogs
can eat chocolate,

00:32:10.250 --> 00:32:12.200
and we introduced
Dr. Doggy, for what

00:32:12.200 --> 00:32:14.630
could be an urgent question.

00:32:14.630 --> 00:32:16.700
The way to think about
explicit triggering

00:32:16.700 --> 00:32:21.680
is very similar to typing a
URL and getting to a website,

00:32:21.680 --> 00:32:27.360
or tapping on an app icon and
then going inside the app.

00:32:27.360 --> 00:32:31.670
The next way to introduce your
Assistant app in dialogue,

00:32:31.670 --> 00:32:33.220
is through implicit triggering.

00:32:33.220 --> 00:32:34.880
So I'm really excited
about this one,

00:32:34.880 --> 00:32:36.410
because this actually
starts showing

00:32:36.410 --> 00:32:38.730
the promise of the platform.

00:32:38.730 --> 00:32:41.210
We know that users are
asking the Google Assistant

00:32:41.210 --> 00:32:42.530
a whole set of things.

00:32:42.530 --> 00:32:46.130
They're asking, hey, tell me a
joke, or I want to play a game,

00:32:46.130 --> 00:32:48.590
or I want to work out.

00:32:48.590 --> 00:32:51.710
And we at Google look at all the
apps that can fulfill on that,

00:32:51.710 --> 00:32:53.510
and suggest some to the user.

00:32:53.510 --> 00:32:54.920
So this already works today.

00:32:54.920 --> 00:32:57.800
You can say, hey, Google,
I want to work out,

00:32:57.800 --> 00:33:02.630
and we introduce FitStar, which
has a great guided workout.

00:33:02.630 --> 00:33:05.460
It's super easy to
be able to do this.

00:33:05.460 --> 00:33:08.150
All you have to do is
add an invocation grammar

00:33:08.150 --> 00:33:11.484
to your app in API.AI, or
whatever natural language

00:33:11.484 --> 00:33:12.400
solution that you use.

00:33:12.400 --> 00:33:14.360
So I want to show you
what that looks like,

00:33:14.360 --> 00:33:16.440
because it's super easy.

00:33:16.440 --> 00:33:18.980
So we're here in the
intent-- the swag intent

00:33:18.980 --> 00:33:21.380
that Adam already created,
and you can see his,

00:33:21.380 --> 00:33:22.922
what's the swag at I/O?

00:33:22.922 --> 00:33:24.380
Let's say you want
to add something

00:33:24.380 --> 00:33:25.820
a little bit more
colloquial like,

00:33:25.820 --> 00:33:27.335
what's the freebie at I/O?

00:33:31.520 --> 00:33:33.890
Type it in, you can
scroll down the answer

00:33:33.890 --> 00:33:36.260
is still the same-- you
guys got a Home and $700

00:33:36.260 --> 00:33:37.100
in cloud credits.

00:33:37.100 --> 00:33:39.140
That's awesome.

00:33:39.140 --> 00:33:42.050
Make sure the-- and the
conversation, you hit, Save,

00:33:42.050 --> 00:33:44.450
and that's really it.

00:33:44.450 --> 00:33:47.390
And you're able to test it
by going into Integrations

00:33:47.390 --> 00:33:49.730
Actions on Google,
you make sure you

00:33:49.730 --> 00:33:53.780
select the swag intent, here.

00:33:53.780 --> 00:33:59.900
And then, once you
hit, Test, that's it.

00:33:59.900 --> 00:34:02.630
We can do the test later, but
basically what happens is--

00:34:02.630 --> 00:34:04.580
you say, what's
the freebie at I/O,

00:34:04.580 --> 00:34:06.886
and then we introduce
the Google I/O '17 app.

00:34:06.886 --> 00:34:09.510
Let's say you've never heard of
it before-- that's pretty cool,

00:34:09.510 --> 00:34:11.384
I didn't know there was
an Assistant app that

00:34:11.384 --> 00:34:16.429
is about Google I/O. And
then, the Google I/O '17 app

00:34:16.429 --> 00:34:18.380
is able to say,
your freebie at I/O

00:34:18.380 --> 00:34:23.570
is the Google Home and
$700 in app credits.

00:34:23.570 --> 00:34:24.710
Awesome.

00:34:24.710 --> 00:34:27.409
To go back to the slides.

00:34:27.409 --> 00:34:29.330
One of the primary
questions that we

00:34:29.330 --> 00:34:33.770
get about implicit triggering is
how are you guys going to rank?

00:34:33.770 --> 00:34:36.170
We're going to be looking at
a ton of different signals,

00:34:36.170 --> 00:34:38.389
and it's still very
early, and we'll

00:34:38.389 --> 00:34:40.154
iterate on this
significantly over time.

00:34:40.154 --> 00:34:42.320
But one of the primary
things we're going to look at

00:34:42.320 --> 00:34:45.889
is the quality of your app,
as well as things like,

00:34:45.889 --> 00:34:48.350
the user's context,
or their preferences,

00:34:48.350 --> 00:34:53.150
and, again, we'll experiment
significantly, over time.

00:34:53.150 --> 00:34:58.642
The next way for you to grow
discovery of your Assistant app

00:34:58.642 --> 00:35:00.100
is through the
Assistant Directory.

00:35:00.100 --> 00:35:02.140
So we launched
this with the goal

00:35:02.140 --> 00:35:07.240
of letting a user try out
new apps, browse apps, as was

00:35:07.240 --> 00:35:10.660
set the preferences for
their personal Assistant.

00:35:10.660 --> 00:35:14.650
The way that a user gets to the
Assistant Directory on Android

00:35:14.650 --> 00:35:18.400
is by long pressing on home and
then tapping the upper right

00:35:18.400 --> 00:35:20.530
hand corner icon.

00:35:20.530 --> 00:35:23.251
On iOS-- they get there by
going to the Assistant app

00:35:23.251 --> 00:35:25.750
and then same thing-- tapping
on the upper right hand corner

00:35:25.750 --> 00:35:26.770
icon.

00:35:26.770 --> 00:35:29.510
And there's also a web
link for the Directory.

00:35:29.510 --> 00:35:31.480
So once the user is
in the directory,

00:35:31.480 --> 00:35:33.520
they can scroll
different categories,

00:35:33.520 --> 00:35:36.880
they can tap on an app, they
can try the app directly there,

00:35:36.880 --> 00:35:39.820
they can rate the
app, and then, they

00:35:39.820 --> 00:35:43.450
can also set their own personal
preferences with the app.

00:35:43.450 --> 00:35:46.730
So we have this concept
of voice shortcuts--

00:35:46.730 --> 00:35:50.410
this is where a user can go
directly to your Assistant app.

00:35:50.410 --> 00:35:53.680
So I have mine set as, hey,
Google, its chill out time--

00:35:53.680 --> 00:35:56.791
and then Netflix starts
playing on my Chromecast.

00:35:56.791 --> 00:35:59.290
And then, I have another one--
which I love-- which is, hey,

00:35:59.290 --> 00:36:01.240
Google, it's party time--

00:36:01.240 --> 00:36:03.400
and then my Phillips
Hue bulbs turn on,

00:36:03.400 --> 00:36:06.490
and then, "Can't Touch This"
starts playing on my Google

00:36:06.490 --> 00:36:08.160
Home device, on Spotify.

00:36:08.160 --> 00:36:10.970
It's pretty awesome.

00:36:10.970 --> 00:36:15.030
The way that you can improve
visibility of your app

00:36:15.030 --> 00:36:18.820
within the directory is by
one-- again, keep the quality

00:36:18.820 --> 00:36:20.290
of your app really, really high.

00:36:20.290 --> 00:36:22.630
This is what's going to
help with both ranking

00:36:22.630 --> 00:36:24.610
and with reviews.

00:36:24.610 --> 00:36:26.710
And then, two--
submit rich images,

00:36:26.710 --> 00:36:27.864
well-written descriptions.

00:36:27.864 --> 00:36:29.530
This is what's going
to encourage a user

00:36:29.530 --> 00:36:31.840
to try out your app
directly in the directory,

00:36:31.840 --> 00:36:35.062
and then reengage with
it again in the future.

00:36:35.062 --> 00:36:36.800
Cool.

00:36:36.800 --> 00:36:39.730
The third way of growing
discovery of your assistant app

00:36:39.730 --> 00:36:41.770
is through links
that you can share.

00:36:41.770 --> 00:36:43.840
So you have a role here, too.

00:36:43.840 --> 00:36:46.480
You have the ability to
promote and grow awareness

00:36:46.480 --> 00:36:48.490
of your Assistant app.

00:36:48.490 --> 00:36:50.650
We encourage you to do
this by doing things like,

00:36:50.650 --> 00:36:53.050
one-- share through
social media.

00:36:53.050 --> 00:36:56.050
Encourage your users
to take this viral.

00:36:56.050 --> 00:36:59.770
Two-- promote through your own
owned and operated properties.

00:36:59.770 --> 00:37:04.510
So link to your sites, or
to your Android or iOS apps.

00:37:04.510 --> 00:37:06.610
Encourage users to
use your service

00:37:06.610 --> 00:37:08.860
across different platforms.

00:37:08.860 --> 00:37:11.800
And then, three-- encourage
press to drive traffic

00:37:11.800 --> 00:37:14.770
to your assistant app, allow
other sites to link to it,

00:37:14.770 --> 00:37:17.000
enable awareness that way.

00:37:17.000 --> 00:37:21.850
So let's go to device
three, and I can show you

00:37:21.850 --> 00:37:23.187
what that looks like, as well.

00:37:23.187 --> 00:37:25.270
As I mentioned, you get
to the Assistant Directory

00:37:25.270 --> 00:37:27.940
by long pressing on home, you
tap on the upper right hand

00:37:27.940 --> 00:37:28.900
corner.

00:37:28.900 --> 00:37:31.270
This is what the
directory looks like.

00:37:31.270 --> 00:37:33.640
And we scroll down to
education and reference,

00:37:33.640 --> 00:37:35.950
talk to Google I/O.
This is the landing

00:37:35.950 --> 00:37:38.070
page within the directory.

00:37:38.070 --> 00:37:39.610
You can hit share.

00:37:39.610 --> 00:37:42.030
And let's actually tweet it.

00:37:42.030 --> 00:37:45.680
And this is live,
which is awesome.

00:37:45.680 --> 00:37:57.474
We can say, whoo, we're live
at I/O, and actually tweet it.

00:37:57.474 --> 00:37:58.270
Cool.

00:37:58.270 --> 00:38:02.110
Once a user taps on
that link, they go to--

00:38:02.110 --> 00:38:06.070
directly to your landing
page within the directory.

00:38:06.070 --> 00:38:07.360
Awesome.

00:38:07.360 --> 00:38:10.490
Go back to the slides, please.

00:38:10.490 --> 00:38:13.460
So as a recap, the way
that you can grow discovery

00:38:13.460 --> 00:38:15.050
of your Assistant app is--

00:38:15.050 --> 00:38:16.880
one, in dialogue.

00:38:16.880 --> 00:38:19.340
So directly in the
conversation with the user,

00:38:19.340 --> 00:38:21.800
both implicitly and explicitly.

00:38:21.800 --> 00:38:23.660
Two, through the
Assistant Directory.

00:38:23.660 --> 00:38:26.900
And then, three, through
links that you share.

00:38:26.900 --> 00:38:29.390
So we know if you're
building a recipe app that

00:38:29.390 --> 00:38:32.180
helps you cook breakfast
for your family,

00:38:32.180 --> 00:38:35.300
or a fitness app that
helps someone keep

00:38:35.300 --> 00:38:39.350
their routine your users are
out there looking for you,

00:38:39.350 --> 00:38:43.010
and our goal at Google is to
help connect you to your users.

00:38:43.010 --> 00:38:45.290
And with that, I'll hand
it back to Brad to wrap up.

00:38:45.290 --> 00:38:46.623
BRAD ABRAMS: Awesome, thank you.

00:38:49.840 --> 00:38:51.850
We've shown you a
ton of stuff, today--

00:38:51.850 --> 00:38:53.320
building conversational
experience

00:38:53.320 --> 00:38:56.620
for eyes free in the phone,
doing transactions, and getting

00:38:56.620 --> 00:38:58.630
your app discovered.

00:38:58.630 --> 00:39:03.070
You're now ready to participate
in our app development

00:39:03.070 --> 00:39:04.390
challenges--

00:39:04.390 --> 00:39:05.320
tons of great prizes.

00:39:05.320 --> 00:39:07.330
I encourage you to do that.

00:39:07.330 --> 00:39:09.700
But let's keep this
conversation going.

00:39:09.700 --> 00:39:12.700
We're going to be at the
assistant booth, which

00:39:12.700 --> 00:39:15.040
is kind of in the main
area, on the walkway there--

00:39:15.040 --> 00:39:17.670
come by and talk to us
with more questions.

00:39:17.670 --> 00:39:19.000
Ton of other talks.

00:39:19.000 --> 00:39:22.330
And just a special things to
Sachit, who built the Assistant

00:39:22.330 --> 00:39:23.930
app, that we see here today.

00:39:23.930 --> 00:39:25.660
So again, thank you very much.

00:39:25.660 --> 00:39:26.860
[APPLAUSE]

00:39:27.760 --> 00:39:30.510
[MUSIC PLAYING]

