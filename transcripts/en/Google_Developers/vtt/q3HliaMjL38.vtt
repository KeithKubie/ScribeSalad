WEBVTT
Kind: captions
Language: en

00:00:01.990 --> 00:00:03.150
T. V. RAMAN: Hello, everyone.

00:00:03.150 --> 00:00:05.000
Thank you for coming to this
session on Android

00:00:05.000 --> 00:00:06.830
accessibility.

00:00:06.830 --> 00:00:08.780
I have three of my colleagues
with me.

00:00:08.780 --> 00:00:10.200
I am T. V. Raman.

00:00:10.200 --> 00:00:12.490
I lead our work on
Android access.

00:00:12.490 --> 00:00:15.700
With me, I have Alan Viverette,
Charles Chen, and

00:00:15.700 --> 00:00:16.953
Peter Lundblad.

00:00:16.953 --> 00:00:22.360
And what we are talking to you
about is accessibility on the

00:00:22.360 --> 00:00:28.190
Android platform in terms of
what Android does for you with

00:00:28.190 --> 00:00:32.170
respect to increasing the
breadth of users that you can

00:00:32.170 --> 00:00:34.320
cover with your applications.

00:00:34.320 --> 00:00:43.040
So you heard talks all day today
in terms of how Android

00:00:43.040 --> 00:00:46.250
does a lot of heavy lifting
for you so that you, as an

00:00:46.250 --> 00:00:48.830
application developer, can
focus on the logic and

00:00:48.830 --> 00:00:51.440
functionality of your
applications.

00:00:51.440 --> 00:00:55.015
So today you don't need to worry
about, am I writing for

00:00:55.015 --> 00:00:57.270
a small phone, big
phone, tablet?

00:00:57.270 --> 00:00:59.170
Android does all of
that work for you.

00:00:59.170 --> 00:01:03.890
What this talk is about is
giving you yet another

00:01:03.890 --> 00:01:08.600
perspective on the huge variety
of devices and users

00:01:08.600 --> 00:01:12.060
that you address when you build
an Android application.

00:01:12.060 --> 00:01:13.770
I use speech for all my work.

00:01:13.770 --> 00:01:15.010
I cannot see.

00:01:15.010 --> 00:01:18.407
My colleague, Peter, uses
Braille for all his work.

00:01:18.407 --> 00:01:23.760
And what we are showing you is
APIs in the platform that

00:01:23.760 --> 00:01:27.150
actually allow us to build
accessibility services that

00:01:27.150 --> 00:01:30.900
let us use all of the
applications you guys are

00:01:30.900 --> 00:01:33.780
building in manners that you
would never have thought we

00:01:33.780 --> 00:01:35.220
would use it.

00:01:35.220 --> 00:01:39.120
So that's really our motivation
here with Android

00:01:39.120 --> 00:01:43.000
accessibility, is to increase
the reach of these

00:01:43.000 --> 00:01:46.080
applications to users with
different needs,

00:01:46.080 --> 00:01:48.050
with special needs.

00:01:48.050 --> 00:01:51.470
We've come a long way since
our access work on Android

00:01:51.470 --> 00:01:53.790
started in 2008.

00:01:53.790 --> 00:01:57.480
A quick history to offer you in
terms of how we've evolved

00:01:57.480 --> 00:01:59.260
and what the platform does.

00:01:59.260 --> 00:02:04.366
So our access work actually
started in Android 1.6.

00:02:04.366 --> 00:02:07.700
1.5, we released the
text to speech API.

00:02:07.700 --> 00:02:12.430
And 1.6, basically, allowed
users to navigate

00:02:12.430 --> 00:02:14.260
using system focus.

00:02:14.260 --> 00:02:18.170
And anything that you navigated
to would speak.

00:02:18.170 --> 00:02:21.810
And you could use a lot of
simple applications that way.

00:02:21.810 --> 00:02:23.890
We have since come a long way.

00:02:23.890 --> 00:02:28.820
And in Ice Cream Sandwich, at
the end of last year, we

00:02:28.820 --> 00:02:32.880
released a feature we called
touch exploration, which then

00:02:32.880 --> 00:02:37.780
allows me, as a blind user, to
touch different parts of the

00:02:37.780 --> 00:02:41.800
screen and hear what
is under my finger.

00:02:41.800 --> 00:02:46.360
This basically then completely
opens up all aspects of the

00:02:46.360 --> 00:02:48.970
Android user interface
to a blind user.

00:02:48.970 --> 00:02:53.040
Because now, with touch
exploration, you could

00:02:53.040 --> 00:02:55.840
actually read everything on the
screen, not just things

00:02:55.840 --> 00:02:58.050
that were focusable.

00:02:58.050 --> 00:03:00.950
And that was a huge
step for us.

00:03:00.950 --> 00:03:10.330
But what we had as a gap in ICS,
which we are now covering

00:03:10.330 --> 00:03:12.190
today, and we'll talk about
this in greater

00:03:12.190 --> 00:03:14.680
detail, is the next step.

00:03:14.680 --> 00:03:16.850
So that was the short
history lesson.

00:03:16.850 --> 00:03:18.600
Let's talk about Jelly Bean.

00:03:18.600 --> 00:03:23.540
So there are significant access
API enhancements in

00:03:23.540 --> 00:03:24.700
Jelly Bean.

00:03:24.700 --> 00:03:28.050
Some of you have heard a quick
overview of this during Romain

00:03:28.050 --> 00:03:31.390
Guy's talk this morning.

00:03:31.390 --> 00:03:38.900
We've done a series of things
that actually enable both

00:03:38.900 --> 00:03:41.970
spoken feedback access for
blind users as well as

00:03:41.970 --> 00:03:44.980
Braille, which Peter will
show you in a bit.

00:03:44.980 --> 00:03:47.800
But at a high level, here are
the three things we are

00:03:47.800 --> 00:03:49.790
introducing today.

00:03:49.790 --> 00:03:54.470
We have introduced the notion
of accessibility focus in

00:03:54.470 --> 00:03:58.750
Android, which Peter will talk
about in detail, that allows

00:03:58.750 --> 00:04:02.620
blind users to reliably step
through the interface.

00:04:02.620 --> 00:04:06.280
So accessibility focus is
something that can be put on

00:04:06.280 --> 00:04:09.980
any part of the user interface
and, as a result, what is

00:04:09.980 --> 00:04:11.590
there will speak.

00:04:11.590 --> 00:04:16.060
We have also introduced this
notion we call accessibility

00:04:16.060 --> 00:04:20.140
actions that you can then
trigger from accessibility

00:04:20.140 --> 00:04:22.840
services, like TalkBack
and BrailleBack, which

00:04:22.840 --> 00:04:24.240
Peter will show you.

00:04:24.240 --> 00:04:28.920
What those actions let us do is
we can then perform clicks

00:04:28.920 --> 00:04:32.160
and selections and things like
that programmatically, which

00:04:32.160 --> 00:04:34.820
then allows us to hook up
esoteric devices like Braille

00:04:34.820 --> 00:04:38.650
displays and other keyboards and
whatever you can imagine.

00:04:38.650 --> 00:04:42.720
And finally, we have introduced
a set of gestures--

00:04:42.720 --> 00:04:45.080
this wasn't mentioned during
the keynote today--

00:04:45.080 --> 00:04:49.280
that allow us to then bring
together accessibility focus

00:04:49.280 --> 00:04:53.100
and access actions to allow a
blind user to very effectively

00:04:53.100 --> 00:04:55.410
use the Android user
interface.

00:04:55.410 --> 00:04:59.160
And last but not least the other
major enhancement in

00:04:59.160 --> 00:05:02.270
Jelly Bean is the coming
of age of Chrome.

00:05:02.270 --> 00:05:04.720
And the Chrome browser
is completely

00:05:04.720 --> 00:05:07.620
accessible in Jelly Bean.

00:05:07.620 --> 00:05:11.670
And it all works seamlessly,
as you shall see during the

00:05:11.670 --> 00:05:13.450
various demos we have for you.

00:05:13.450 --> 00:05:19.080
So with that I'll hand off to
Peter, who's the lead engineer

00:05:19.080 --> 00:05:24.670
behind BrailleBack, which
is the Braille

00:05:24.670 --> 00:05:26.360
enablement of the platform.

00:05:26.360 --> 00:05:29.770
So BrailleBack is an
accessibility service that

00:05:29.770 --> 00:05:33.410
uses these same APIs that I've
been talking about to

00:05:33.410 --> 00:05:37.220
basically provide a Braille
interface on Android.

00:05:37.220 --> 00:05:39.370
So Peter, go for it.

00:05:39.370 --> 00:05:40.720
PETER LUNDBLAD: Thank
you, Raman.

00:05:40.720 --> 00:05:42.060
Hi, everyone.

00:05:42.060 --> 00:05:43.760
I'm Peter Lundblad.

00:05:43.760 --> 00:05:49.050
And I'm going to, as Raman said,
talk about a few things.

00:05:49.050 --> 00:05:52.020
I'm going to start talking about
one of the things that

00:05:52.020 --> 00:05:57.470
we've added in Jelly Bean
that enables things like

00:05:57.470 --> 00:06:00.650
BrailleBack and other
things for the user.

00:06:00.650 --> 00:06:04.100
And this is called accessibility
focus.

00:06:04.100 --> 00:06:08.610
It allows a user to interact
with anything on the screen,

00:06:08.610 --> 00:06:10.260
like any view.

00:06:10.260 --> 00:06:15.280
It behaves similar to a cursor,
in the sense that you

00:06:15.280 --> 00:06:18.410
can move it around
on the screen.

00:06:18.410 --> 00:06:22.340
It is also similar
to input focus.

00:06:22.340 --> 00:06:27.100
But the difference is, as I
said, that it can interact

00:06:27.100 --> 00:06:29.200
with all views, which
is great.

00:06:29.200 --> 00:06:37.810
Because input focus can only
read views that are meant to,

00:06:37.810 --> 00:06:39.320
for example, take input.

00:06:39.320 --> 00:06:44.190
So a good example of that is an
edit text or a push back on

00:06:44.190 --> 00:06:45.660
that you can press Enter on.

00:06:45.660 --> 00:06:47.500
And then it will activate
the button.

00:06:47.500 --> 00:06:52.980
But for a blind user, you want
to be able to read anything on

00:06:52.980 --> 00:06:57.030
the screen, including static
text and similar, which is

00:06:57.030 --> 00:06:59.560
normally not focused
by input focus.

00:06:59.560 --> 00:07:03.180
So therefore, we added this
accessibility focus that is

00:07:03.180 --> 00:07:07.100
shown on screen as a
yellow rectangular.

00:07:07.100 --> 00:07:09.380
Accessibility focus can be
placed anywhere by the

00:07:09.380 --> 00:07:10.960
accessibility service.

00:07:10.960 --> 00:07:13.820
And this allows multiple
modes of interaction.

00:07:16.380 --> 00:07:20.540
It's handled by the system,
which means that there is one

00:07:20.540 --> 00:07:21.790
global source of truth.

00:07:24.470 --> 00:07:26.920
But again, Accessibility
Services get

00:07:26.920 --> 00:07:28.530
notified when it moves.

00:07:28.530 --> 00:07:32.180
And they also have
control over it.

00:07:32.180 --> 00:07:38.660
So what are examples of these
different modes of operation

00:07:38.660 --> 00:07:41.380
and interaction by the user?

00:07:41.380 --> 00:07:43.880
How can we move accessibility
focus?

00:07:43.880 --> 00:07:46.170
One example, as Alan
is showing, is by

00:07:46.170 --> 00:07:49.410
swiping on the screen.

00:07:49.410 --> 00:07:51.750
Alan will actually show you
later on more about these

00:07:51.750 --> 00:07:53.890
swipe gestures that
we've added.

00:07:53.890 --> 00:07:56.930
Another example is that the
touch exploration that was

00:07:56.930 --> 00:07:59.860
already added in Ice Cream
Sandwich now moves

00:07:59.860 --> 00:08:02.470
accessibility focus.

00:08:02.470 --> 00:08:06.600
We are also able to move
accessibility focus by

00:08:06.600 --> 00:08:08.650
accessibility services using,
for example, a Braille

00:08:08.650 --> 00:08:12.950
display, which I'm going
to show you in a bit.

00:08:12.950 --> 00:08:16.180
The great thing is that, when
one accessibility service

00:08:16.180 --> 00:08:21.880
moves it, the accessibility
focus, it gets broadcast to

00:08:21.880 --> 00:08:23.290
all accessibility services.

00:08:23.290 --> 00:08:25.780
So, for example, if you have
TalkBack and BrailleBack

00:08:25.780 --> 00:08:27.880
running on the system at
the same time, they get

00:08:27.880 --> 00:08:28.420
synchronized.

00:08:28.420 --> 00:08:34.570
And the user knows where he is
by both Braille and speech.

00:08:34.570 --> 00:08:37.860
Now, being able to only
read what's on

00:08:37.860 --> 00:08:40.240
the screen, is great.

00:08:40.240 --> 00:08:42.669
But life is pretty boring
if you can not

00:08:42.669 --> 00:08:43.780
interact with anything.

00:08:43.780 --> 00:08:47.850
So that moves us over to
the next part, which is

00:08:47.850 --> 00:08:49.100
accessibility actions.

00:08:54.580 --> 00:08:59.450
Accessibility actions allows a
user to interact with nodes in

00:08:59.450 --> 00:09:02.530
different ways.

00:09:02.530 --> 00:09:04.340
And that's very important.

00:09:04.340 --> 00:09:08.090
Because, if we now have the
different ways of moving

00:09:08.090 --> 00:09:11.470
around a focus, then you don't
really know where on the

00:09:11.470 --> 00:09:14.120
screen the different
views are.

00:09:14.120 --> 00:09:17.220
So therefore, you also need to
actually do things with them.

00:09:21.500 --> 00:09:24.590
So what accessibility actions
do we support?

00:09:24.590 --> 00:09:27.280
The obvious thing is moving
accessibility focus, as I

00:09:27.280 --> 00:09:30.510
already mentioned a few times.

00:09:30.510 --> 00:09:32.860
We can also move input focus,
which is useful.

00:09:32.860 --> 00:09:36.770
Because then we can, at will,
as an accessibility service,

00:09:36.770 --> 00:09:41.750
synchronize the two focuses when
that's good for the user.

00:09:41.750 --> 00:09:48.100
We can click on views, which,
of course, is the most used

00:09:48.100 --> 00:09:52.780
action so that we can activate
buttons, activate input

00:09:52.780 --> 00:09:54.480
fields, and so on.

00:09:54.480 --> 00:09:56.490
Another important thing
is that we can

00:09:56.490 --> 00:09:59.230
scroll on the screen.

00:09:59.230 --> 00:10:02.000
So if the view has more
than one page, we can

00:10:02.000 --> 00:10:04.280
move between them.

00:10:04.280 --> 00:10:07.950
That's already possible using
swipe gestures on the screen.

00:10:07.950 --> 00:10:10.950
But a problem for blind users
is that it's hard to scroll

00:10:10.950 --> 00:10:12.880
exactly by one page.

00:10:12.880 --> 00:10:16.950
And then, if you don't do that
correctly, then you lose where

00:10:16.950 --> 00:10:21.190
you are in the list books,
for example.

00:10:21.190 --> 00:10:24.340
So the new actions allow us
to scroll discreetly.

00:10:24.340 --> 00:10:28.420
There is also actions to
move inside of text.

00:10:28.420 --> 00:10:30.510
So if you have a text field with
lots of text, maybe you

00:10:30.510 --> 00:10:32.740
want to, as a user, read it by

00:10:32.740 --> 00:10:35.610
character, by word, or paragraph.

00:10:35.610 --> 00:10:38.950
Or there is actions
for handling

00:10:38.950 --> 00:10:40.590
moving inside web views.

00:10:40.590 --> 00:10:44.250
And all these are called
movement by different

00:10:44.250 --> 00:10:46.410
granularities.

00:10:46.410 --> 00:10:48.300
We also added something,
which I'm not going

00:10:48.300 --> 00:10:49.220
to talk much about.

00:10:49.220 --> 00:10:50.480
It's called global actions.

00:10:50.480 --> 00:10:54.620
That allow things like
activating the home screen,

00:10:54.620 --> 00:10:58.780
and pressing the back
button, and going to

00:10:58.780 --> 00:11:00.130
notification, and so on.

00:11:00.130 --> 00:11:03.550
This is something that is purely
handled by the system

00:11:03.550 --> 00:11:05.540
and application developers
don't have to

00:11:05.540 --> 00:11:07.290
worry about at all.

00:11:07.290 --> 00:11:11.790
So the great thing with
accessibility focus and

00:11:11.790 --> 00:11:14.420
actions is that, most of the
time, they are handled by the

00:11:14.420 --> 00:11:15.860
system as well.

00:11:15.860 --> 00:11:17.960
But there are occasions
when the

00:11:17.960 --> 00:11:20.490
applications need to worry.

00:11:20.490 --> 00:11:23.980
I'm going to show you some code
examples before we are

00:11:23.980 --> 00:11:29.350
going into the demo about
how these can look.

00:11:29.350 --> 00:11:31.590
If you have a very simple view,
like on the first code

00:11:31.590 --> 00:11:36.710
example, it just adds an
OnClickListener, I think this

00:11:36.710 --> 00:11:39.740
should be familiar to anyone who
has done any Android app

00:11:39.740 --> 00:11:41.450
development.

00:11:41.450 --> 00:11:44.850
If you have this kind of view,
that is already totally

00:11:44.850 --> 00:11:47.470
handled by the system.

00:11:47.470 --> 00:11:52.750
Because by default action,
OnClick, that allows us to

00:11:52.750 --> 00:11:56.070
perform clicks from Braille
displays, for example, is

00:11:56.070 --> 00:11:58.020
calling the OnClickListener,
and that's it.

00:12:05.430 --> 00:12:09.700
Now, let's look at the
second code example.

00:12:09.700 --> 00:12:13.440
And there we have a different
kind of view.

00:12:13.440 --> 00:12:18.230
This view is a bit
more low level.

00:12:18.230 --> 00:12:22.030
It's a custom view where we
handle Touch Events directly.

00:12:22.030 --> 00:12:25.960
So we have an OnTouchEvent
handler.

00:12:25.960 --> 00:12:27.730
And that will be
called whenever

00:12:27.730 --> 00:12:28.690
there is a Touch Event.

00:12:28.690 --> 00:12:33.680
And the view will directly
respond to Touch Event and

00:12:33.680 --> 00:12:35.300
call some internal function
of itself.

00:12:35.300 --> 00:12:38.280
So it's not going through
the OnClickListener.

00:12:38.280 --> 00:12:42.090
This, obviously, won't work
because the system won't know

00:12:42.090 --> 00:12:48.640
what function to call when an
accessibility server invokes

00:12:48.640 --> 00:12:50.020
an action OnClick.

00:12:50.020 --> 00:12:51.930
So we have to fix that issue.

00:12:51.930 --> 00:12:53.670
Because, otherwise, the
user won't be able to

00:12:53.670 --> 00:12:56.020
click on this view.

00:12:56.020 --> 00:12:59.510
One way is to refactor the view,
of course, by invoking

00:12:59.510 --> 00:13:03.090
the OnClickListener and then
letting the default action

00:13:03.090 --> 00:13:05.240
handling handle the situation.

00:13:05.240 --> 00:13:08.390
But if that's not possible,
sometimes you don't have

00:13:08.390 --> 00:13:12.850
access to your view or maybe
you can't easily change the

00:13:12.850 --> 00:13:16.280
code, then it's possible to
[INAUDIBLE] something that we

00:13:16.280 --> 00:13:19.990
call an accessibility
delegate.

00:13:19.990 --> 00:13:26.670
That allows you to, external
from the view, handle the

00:13:26.670 --> 00:13:30.120
accessibility actions and other
calls that are related

00:13:30.120 --> 00:13:31.370
to accessibility.

00:13:34.610 --> 00:13:39.910
And in this last code example,
we are doing that to take care

00:13:39.910 --> 00:13:43.910
of the OnClick call by ourselves
and call our

00:13:43.910 --> 00:13:44.800
internal function.

00:13:44.800 --> 00:13:47.520
And that will fix the problem we
had on the previous slides.

00:13:47.520 --> 00:13:51.340
Now, depending on what kind of
view you are creating, we

00:13:51.340 --> 00:13:54.230
might have to add handling for
other actions as well.

00:13:54.230 --> 00:13:56.990
For example, if there is
scrolling support in your

00:13:56.990 --> 00:13:59.770
view, you might need to handle
the scroll action.

00:13:59.770 --> 00:14:04.330
It's also important to remember
to call back to the

00:14:04.330 --> 00:14:08.300
super class if you don't handle
the action yourself.

00:14:08.300 --> 00:14:14.960
So what can all these additions
be used for?

00:14:14.960 --> 00:14:19.260
We are adding something new.

00:14:19.260 --> 00:14:22.930
The new features of the
platforms enable us to add

00:14:22.930 --> 00:14:24.180
Braille support.

00:14:27.280 --> 00:14:34.450
Sometimes blind users prefer
to use something called a

00:14:34.450 --> 00:14:36.800
refreshable Braille display.

00:14:36.800 --> 00:14:39.420
And this is an alternative
way of

00:14:39.420 --> 00:14:42.350
interacting with the system.

00:14:42.350 --> 00:14:47.060
We are enabling a number of
different Bluetooth-enabled

00:14:47.060 --> 00:14:50.950
Braille displays to connect
to Android phones.

00:14:50.950 --> 00:14:55.700
A Braille display has a line of
so-called Braille cells on

00:14:55.700 --> 00:15:00.240
them with dots that
can be raised.

00:15:00.240 --> 00:15:03.110
And the user can read
on that line.

00:15:03.110 --> 00:15:07.680
There are navigation keys on a
Braille display so that, since

00:15:07.680 --> 00:15:10.920
it's only one line, it's
possible to move it around on

00:15:10.920 --> 00:15:14.793
the screen and move around in
the user interface, activity

00:15:14.793 --> 00:15:17.090
things and so on.

00:15:17.090 --> 00:15:21.655
Another thing that is usually
on a Braille display is a

00:15:21.655 --> 00:15:24.400
corded keyboard so that you
can also input Braille.

00:15:24.400 --> 00:15:30.940
And this makes it much easier
to type text than if you're

00:15:30.940 --> 00:15:32.070
using a touchscreen.

00:15:32.070 --> 00:15:34.790
Of course, sometimes using the
on-screen keyboard is the only

00:15:34.790 --> 00:15:35.190
alternative.

00:15:35.190 --> 00:15:38.210
But if you have the Braille
keyboard it

00:15:38.210 --> 00:15:40.890
makes life much easier.

00:15:40.890 --> 00:15:45.760
So we are adding this
accessibility service, which

00:15:45.760 --> 00:15:50.210
is connected via Bluetooth
to the Braille displays.

00:15:50.210 --> 00:15:53.870
It uses the accessibility events
and nodes in the node

00:15:53.870 --> 00:15:58.780
tree to know what is
on the screen and

00:15:58.780 --> 00:16:01.970
present that to the user.

00:16:01.970 --> 00:16:06.035
It synchronizes with TalkBack
using accessibility focus.

00:16:10.310 --> 00:16:14.190
So you can actually interact
with the system in many ways

00:16:14.190 --> 00:16:15.380
at the same time.

00:16:15.380 --> 00:16:17.330
You can use TalkBack, or
you can use Braille.

00:16:17.330 --> 00:16:19.640
But they will both
be synchronized.

00:16:19.640 --> 00:16:24.490
In addition, we are adding an
input method so that you can

00:16:24.490 --> 00:16:28.310
actually enter text using
the Braille display.

00:16:28.310 --> 00:16:33.650
This new accessibility service
is called BrailleBack.

00:16:33.650 --> 00:16:37.800
It's available on Google Play
Store today if you are running

00:16:37.800 --> 00:16:38.520
Jelly Bean.

00:16:38.520 --> 00:16:41.660
So please try it out if you
happen to have access to one

00:16:41.660 --> 00:16:44.320
of these hardware Braille
displays.

00:16:44.320 --> 00:16:46.510
I am now going to do
a little demo.

00:16:46.510 --> 00:16:49.430
And as we all know,
sometimes wireless

00:16:49.430 --> 00:16:51.190
technology can be difficult.

00:16:51.190 --> 00:16:54.330
So let's see how this works.

00:16:54.330 --> 00:16:57.300
The first thing that can happen
is that a Braille

00:16:57.300 --> 00:17:02.420
display is disconnected from
the Android device.

00:17:02.420 --> 00:17:06.079
So what we wanted to make it
as simple as possible to

00:17:06.079 --> 00:17:10.220
reconnect to the Braille device
or, actually, if you

00:17:10.220 --> 00:17:12.420
have disconnected it for
before battery reasons.

00:17:15.859 --> 00:17:18.030
So what the user then
does is locks the

00:17:18.030 --> 00:17:19.119
screen and unlock again.

00:17:19.119 --> 00:17:22.020
And I'm going to ask Alan do
this for me today so that we

00:17:22.020 --> 00:17:22.770
get the display connected.

00:17:22.770 --> 00:17:27.480
COMPUTER SPEAKER: Screen off,
12:30 AM ringer seven, slide

00:17:27.480 --> 00:17:30.460
home, home screen three.

00:17:30.460 --> 00:17:32.380
PETER LUNDBLAD: And there,
we heard a little sound.

00:17:32.380 --> 00:17:36.640
And that made the Braille
display actually connect.

00:17:36.640 --> 00:17:44.680
Unfortunately, though,
it is not--

00:17:44.680 --> 00:17:47.650
as I mentioned, the
wireless is not--

00:17:47.650 --> 00:17:48.020
COMPUTER SPEAKER: Screen on.

00:17:48.020 --> 00:17:48.910
PETER LUNDBLAD: --always
our friend.

00:17:48.910 --> 00:17:50.740
So I'm going to try
this once more.

00:17:50.740 --> 00:17:53.380
COMPUTER SPEAKER: 12:31
AM, ringer 70%.

00:17:53.380 --> 00:17:55.960
PETER LUNDBLAD: We might have
too many [INAUDIBLE].

00:17:55.960 --> 00:17:57.470
ALAN VIVERETTE: To minimize
interference, if you have

00:17:57.470 --> 00:17:59.980
Bluetooth turned on, if you
could turn it off, we would

00:17:59.980 --> 00:18:01.300
appreciate that.

00:18:01.300 --> 00:18:02.910
PETER LUNDBLAD: So this
is now working.

00:18:02.910 --> 00:18:05.070
COMPUTER SPEAKER: I/O 2012
web view tutorial.

00:18:05.070 --> 00:18:09.200
PETER LUNDBLAD: OK, so let's
look what I can do here.

00:18:09.200 --> 00:18:12.850
So as I you can hear, the
speech is talking.

00:18:12.850 --> 00:18:15.480
I can now use the keys on the
Braille display to move around

00:18:15.480 --> 00:18:16.070
the screen.

00:18:16.070 --> 00:18:17.990
So let me do that.

00:18:17.990 --> 00:18:19.520
COMPUTER SPEAKER: Home
screen three.

00:18:19.520 --> 00:18:20.780
PETER LUNDBLAD: It says
home screen three.

00:18:20.780 --> 00:18:24.260
And as you can see, the
accessibility focus is moving

00:18:24.260 --> 00:18:25.990
to focus the whole screen.

00:18:25.990 --> 00:18:28.230
And the speech is
also talking.

00:18:28.230 --> 00:18:34.010
COMPUTER SPEAKER: I/O 2012 web
view tutorial, 031, Google I

00:18:34.010 --> 00:18:36.300
slash O 2012.

00:18:36.300 --> 00:18:38.560
PETER LUNDBLAD: Let me invoke
one of the actions I talked

00:18:38.560 --> 00:18:39.800
briefly about before.

00:18:39.800 --> 00:18:43.570
And that's the action to open
the notification window.

00:18:43.570 --> 00:18:45.790
I do that by pressing
a key combination

00:18:45.790 --> 00:18:47.410
on the Braille display.

00:18:47.410 --> 00:18:50.880
COMPUTER SPEAKER: 12:31,
Thursday, June 28, 20.

00:18:50.880 --> 00:18:53.060
Screen will rotate
automatically.

00:18:53.060 --> 00:18:55.650
Check box orientation
set to portrait.

00:18:55.650 --> 00:18:58.910
Clear notification button.

00:18:58.910 --> 00:19:02.582
PETER LUNDBLAD: Here
I go to the--

00:19:02.582 --> 00:19:05.160
COMPUTER SPEAKER: Alan
Viverette, June 27, 12.

00:19:05.160 --> 00:19:07.980
Hey, want to get a coffee?

00:19:07.980 --> 00:19:09.700
PETER LUNDBLAD: OK, so
Alan is asking if I

00:19:09.700 --> 00:19:10.530
want to get a coffee.

00:19:10.530 --> 00:19:11.020
That's great.

00:19:11.020 --> 00:19:12.960
Let me respond to that chat.

00:19:12.960 --> 00:19:17.200
What I also have on the Braille
display is a row of

00:19:17.200 --> 00:19:20.620
small buttons that easily lets
me click on anything that I

00:19:20.620 --> 00:19:21.770
have focused on the display.

00:19:21.770 --> 00:19:25.720
So I'm going to click on
Alan's chat message.

00:19:25.720 --> 00:19:26.560
COMPUTER SPEAKER: Edit box.

00:19:26.560 --> 00:19:28.170
Type message.

00:19:28.170 --> 00:19:32.430
PETER LUNDBLAD: That takes me
right into the edit box in

00:19:32.430 --> 00:19:36.110
Google Talk as we expect when I
click on this notification.

00:19:36.110 --> 00:19:38.570
I'm going to move upwards on
the screen to see what he

00:19:38.570 --> 00:19:39.500
actually said.

00:19:39.500 --> 00:19:41.220
COMPUTER SPEAKER: This chat
is off the record.

00:19:41.220 --> 00:19:44.220
Hey, want to get a coffee?

00:19:44.220 --> 00:19:45.140
PETER LUNDBLAD: As
you can see, he's

00:19:45.140 --> 00:19:46.170
concerned about privacy.

00:19:46.170 --> 00:19:47.480
But he still wants to
have some coffee.

00:19:47.480 --> 00:19:50.810
COMPUTER SPEAKER: This chat
edit box, type message.

00:19:50.810 --> 00:19:52.810
PETER LUNDBLAD: I'm going
to type a response.

00:19:52.810 --> 00:19:57.006
COMPUTER SPEAKER: Y-E-S,
yes, I, I, L-O-V-3.

00:19:59.700 --> 00:20:02.200
PETER LUNDBLAD: OK, making a
typo, I can easily fix that.

00:20:02.200 --> 00:20:03.680
COMPUTER SPEAKER:
Three deleted.

00:20:03.680 --> 00:20:06.160
E, love,

00:20:06.160 --> 00:20:07.810
[RAPIDLY SPELLING LETTERS]

00:20:07.810 --> 00:20:11.450
PETER LUNDBLAD: All right,
so I've typed a response.

00:20:11.450 --> 00:20:15.120
I can use the small keys I
earlier mentioned to move

00:20:15.120 --> 00:20:18.340
around on the screen
sometimes.

00:20:20.840 --> 00:20:23.770
COMPUTER SPEAKER: This edit
box, yes, I love coffee.

00:20:23.770 --> 00:20:25.020
PETER LUNDBLAD: OK,
so I have now--

00:20:28.800 --> 00:20:31.990
I'm going to press the button
to actually send--

00:20:31.990 --> 00:20:32.530
COMPUTER SPEAKER: This chat--

00:20:32.530 --> 00:20:32.650
PETER LUNDBLAD: --this
message.

00:20:32.650 --> 00:20:33.330
COMPUTER SPEAKER: --is
off the record.

00:20:33.330 --> 00:20:34.260
Edit box.

00:20:34.260 --> 00:20:36.110
Yes, I love coffee.

00:20:36.110 --> 00:20:37.180
PETER LUNDBLAD: And there
you see that I can

00:20:37.180 --> 00:20:38.460
actually send a message.

00:20:38.460 --> 00:20:41.940
And it now appears in the
chat list before.

00:20:41.940 --> 00:20:44.540
I'm going to invoke another
global action that we have

00:20:44.540 --> 00:20:45.350
that's very convenient.

00:20:45.350 --> 00:20:50.090
And that is a key combination,
again, on the Braille display.

00:20:50.090 --> 00:20:51.850
COMPUTER SPEAKER: Home,
home screen three.

00:20:51.850 --> 00:20:53.890
PETER LUNDBLAD: That takes us
back to the home screen.

00:20:53.890 --> 00:20:56.840
And with that, I'm going to
hand it over to Alan who's

00:20:56.840 --> 00:21:00.582
going to talk about
touch exploration.

00:21:00.582 --> 00:21:01.300
ALAN VIVERETTE: Thank
you, Peter.

00:21:01.300 --> 00:21:04.420
I look forward to getting
that coffee later.

00:21:04.420 --> 00:21:06.720
So as we showed, you
can use your finger

00:21:06.720 --> 00:21:08.310
to explore the screen.

00:21:08.310 --> 00:21:13.594
So you can set accessibility
focus by touching your finger

00:21:13.594 --> 00:21:16.160
to the screen, as
you just heard.

00:21:16.160 --> 00:21:18.820
This provides random access to
on-screen content, which is

00:21:18.820 --> 00:21:21.020
really great if you are familiar
with what the screen

00:21:21.020 --> 00:21:21.970
looks like.

00:21:21.970 --> 00:21:24.190
So somewhere like the
All App screen you

00:21:24.190 --> 00:21:25.020
have a lot of buttons.

00:21:25.020 --> 00:21:27.150
And you can find things
pretty quickly.

00:21:27.150 --> 00:21:29.760
You can now double-tap to
activate the item that has

00:21:29.760 --> 00:21:32.930
focus with absolute certainty
that what you just heard is

00:21:32.930 --> 00:21:35.880
what's going to be launched.

00:21:35.880 --> 00:21:36.970
Now, this is great.

00:21:36.970 --> 00:21:40.620
But having some deterministic
way to access items on screen

00:21:40.620 --> 00:21:41.740
is even better.

00:21:41.740 --> 00:21:43.690
So let's say you have
a really big screen

00:21:43.690 --> 00:21:45.230
with one little button.

00:21:45.230 --> 00:21:47.530
I can move my finger around for
a long time and never find

00:21:47.530 --> 00:21:48.530
that button.

00:21:48.530 --> 00:21:51.650
But if I can touch my finger to
the screen and just swipe

00:21:51.650 --> 00:21:54.050
to the right to go to the next
item, I can find that button

00:21:54.050 --> 00:21:54.890
very quickly.

00:21:54.890 --> 00:21:58.050
And in fact, I can just keep
swiping right to go through

00:21:58.050 --> 00:22:00.310
every single item on screen.

00:22:00.310 --> 00:22:04.800
So we've added these swipe
gestures that I demoed earlier

00:22:04.800 --> 00:22:06.160
when Peter was talking.

00:22:06.160 --> 00:22:08.750
And we've also added gestures
for global actions.

00:22:08.750 --> 00:22:11.040
So Peter showed you home
on the Braille display.

00:22:11.040 --> 00:22:14.410
You can also draw a shape on
the screen to go home.

00:22:14.410 --> 00:22:16.930
We also sort back recent
applications and

00:22:16.930 --> 00:22:18.850
notifications.

00:22:18.850 --> 00:22:21.700
An accessibility service like
TalkBack or BrailleBack can

00:22:21.700 --> 00:22:24.330
also use gestures to manage
internal state.

00:22:24.330 --> 00:22:26.810
So in TalkBack, we have a
gesture that you can use to

00:22:26.810 --> 00:22:29.840
start reading the screen
by word or character

00:22:29.840 --> 00:22:31.090
instead of by object.

00:22:33.460 --> 00:22:36.130
So here's a quick overview of
the gesture mapping that we

00:22:36.130 --> 00:22:37.060
have in TalkBack.

00:22:37.060 --> 00:22:38.650
You'll see there are
a lot of gestures.

00:22:38.650 --> 00:22:40.500
And in fact, these aren't
all of the gestures.

00:22:40.500 --> 00:22:41.810
We've left a little
bit of room for

00:22:41.810 --> 00:22:45.450
experimentation later on.

00:22:45.450 --> 00:22:48.635
So let's do a quick demo
for explore by touch.

00:22:51.365 --> 00:22:53.290
All right, so first I'm going
to start with touch

00:22:53.290 --> 00:22:55.110
exploration.

00:22:55.110 --> 00:22:56.930
COMPUTER SPEAKER: Home
screen three.

00:22:56.930 --> 00:22:58.320
Apps.

00:22:58.320 --> 00:22:59.460
Home.

00:22:59.460 --> 00:23:01.380
Showing item three of five.

00:23:01.380 --> 00:23:05.380
ALAN VIVERETTE: So I can look
through my apps, random access

00:23:05.380 --> 00:23:06.700
by moving my finger.

00:23:06.700 --> 00:23:09.490
Or I can swipe left and right if
I know that what I want to

00:23:09.490 --> 00:23:13.370
find is probably a little
bit past Maps.

00:23:13.370 --> 00:23:14.370
COMPUTER SPEAKER: Messenger.

00:23:14.370 --> 00:23:15.500
Navigation.

00:23:15.500 --> 00:23:16.720
People.

00:23:16.720 --> 00:23:19.600
ALAN VIVERETTE: OK, so if I want
to launch People, I can

00:23:19.600 --> 00:23:21.040
just double-tap anywhere
on the screen.

00:23:21.040 --> 00:23:23.200
COMPUTER SPEAKER: Full contacts
drop-down list.

00:23:23.200 --> 00:23:24.740
ALAN VIVERETTE: And
I get contacts.

00:23:24.740 --> 00:23:27.820
So if I'd like to go back, I
can draw a back gesture.

00:23:27.820 --> 00:23:28.500
COMPUTER SPEAKER: Clear apps.

00:23:28.500 --> 00:23:29.280
ALAN VIVERETTE: Let's
go back again.

00:23:29.280 --> 00:23:30.870
COMPUTER SPEAKER: Clear
home screen three.

00:23:30.870 --> 00:23:32.610
ALAN VIVERETTE: And let's take
a quick look at the Google

00:23:32.610 --> 00:23:32.860
I/O.

00:23:32.860 --> 00:23:38.370
COMPUTER SPEAKER: I/O zero,
Google I slash O 2012.

00:23:38.370 --> 00:23:40.690
Google I slash O 2012.

00:23:40.690 --> 00:23:42.170
List showing one items.

00:23:42.170 --> 00:23:42.990
ALAN VIVERETTE: Here I
have a list of items.

00:23:42.990 --> 00:23:45.720
COMPUTER SPEAKER: Showing items
one to three of 21.

00:23:45.720 --> 00:23:47.230
ALAN VIVERETTE: And
I can tap--

00:23:47.230 --> 00:23:49.840
COMPUTER SPEAKER: 8:00 PM browse
sessions empty slot.

00:23:49.840 --> 00:23:50.990
ALAN VIVERETTE: --on an
item within that list.

00:23:50.990 --> 00:23:53.740
And if I want to move an entire
page at a time, there's

00:23:53.740 --> 00:23:56.700
a gesture for--

00:23:56.700 --> 00:23:58.600
COMPUTER SPEAKER: 10:00 AM.

00:23:58.600 --> 00:23:59.540
ALAN VIVERETTE: --moving
up an entire page.

00:23:59.540 --> 00:24:02.040
COMPUTER SPEAKER: Wednesday,
June 27.

00:24:02.040 --> 00:24:03.725
ALAN VIVERETTE: So these are the
same accessibility actions

00:24:03.725 --> 00:24:05.220
that we use in BrailleBack.

00:24:05.220 --> 00:24:07.060
And they're something that
you, as a developer,

00:24:07.060 --> 00:24:10.910
generally, won't have
to worry about it.

00:24:10.910 --> 00:24:11.852
T. V. RAMAN: So notice that--

00:24:11.852 --> 00:24:12.360
ALAN VIVERETTE: Sorry.

00:24:12.360 --> 00:24:15.060
T. V. RAMAN: Notice what Alan
is showing there is a very,

00:24:15.060 --> 00:24:19.540
very powerful interaction model
for completing tasks

00:24:19.540 --> 00:24:20.180
very quickly.

00:24:20.180 --> 00:24:24.400
So you use the Play Store
all the time.

00:24:24.400 --> 00:24:26.900
So you know that the
Install button is

00:24:26.900 --> 00:24:28.140
approximately somewhere.

00:24:28.140 --> 00:24:33.230
So touching the screen and doing
one flick is pretty much

00:24:33.230 --> 00:24:35.020
all it takes.

00:24:35.020 --> 00:24:37.660
Whereas in ICS, you
would explore.

00:24:37.660 --> 00:24:41.550
And then before ICS, you would
have used the trackball.

00:24:41.550 --> 00:24:45.180
So it makes the user interaction
model really,

00:24:45.180 --> 00:24:46.740
really effective.

00:24:46.740 --> 00:24:50.510
And also, notice that with what
we have done, the access

00:24:50.510 --> 00:24:51.920
guidelines also change.

00:24:51.920 --> 00:24:56.710
Where in the past only things
that could take system focus

00:24:56.710 --> 00:25:00.230
were visible to TalkBack
before ICS.

00:25:00.230 --> 00:25:02.340
And we used to say make
things focusable.

00:25:02.340 --> 00:25:06.100
Now your life as a developer
is a lot easier.

00:25:06.100 --> 00:25:07.830
ALAN VIVERETTE: So as I
mentioned, as a developer, you

00:25:07.830 --> 00:25:10.740
generally won't have to worry
about this, except when it

00:25:10.740 --> 00:25:11.900
doesn't work.

00:25:11.900 --> 00:25:14.860
So you might wonder what
receives focus when I'm moving

00:25:14.860 --> 00:25:16.580
my finger around the screen.

00:25:16.580 --> 00:25:19.380
Now, obviously, as a developer
who's probably made layouts

00:25:19.380 --> 00:25:20.930
before, you may know
that you'll have a

00:25:20.930 --> 00:25:21.960
lot of nested layouts.

00:25:21.960 --> 00:25:23.890
Obviously, these aren't
all being read.

00:25:23.890 --> 00:25:26.070
So we're picking actionable
groups.

00:25:26.070 --> 00:25:28.810
So actionable means clickable
or focusable.

00:25:28.810 --> 00:25:31.690
And if you have a group, like
this folder icon that we're

00:25:31.690 --> 00:25:34.830
showing in the image, this is
actually a group that contains

00:25:34.830 --> 00:25:37.310
an image and a piece of text.

00:25:37.310 --> 00:25:39.680
And because the group
itself is clickable,

00:25:39.680 --> 00:25:41.520
it gets read aloud.

00:25:41.520 --> 00:25:44.190
Now, if it has a content
description, then, instead of

00:25:44.190 --> 00:25:46.080
its children being read
aloud, the content

00:25:46.080 --> 00:25:47.550
description is read.

00:25:47.550 --> 00:25:50.830
And if you have an item that
isn't actionable, and it

00:25:50.830 --> 00:25:53.540
doesn't have any actionable
predecessors, obviously, the

00:25:53.540 --> 00:25:55.860
only way that can be read is
if somehow you can put

00:25:55.860 --> 00:25:57.360
accessibility focus on it.

00:25:57.360 --> 00:26:01.650
And fortunately, it will receive
accessibility focus.

00:26:01.650 --> 00:26:05.060
So here's a Hierarchy Viewer
view of what that folder icon

00:26:05.060 --> 00:26:05.910
looks like.

00:26:05.910 --> 00:26:07.800
So you can see that there's
a folder icon,

00:26:07.800 --> 00:26:08.800
which is a view group.

00:26:08.800 --> 00:26:12.390
And that contains an image view
and a bubble text view in

00:26:12.390 --> 00:26:13.890
XML that looks like this.

00:26:13.890 --> 00:26:16.820
So you can see the folder icon
is clickable, thus making an

00:26:16.820 --> 00:26:18.020
actionable group.

00:26:18.020 --> 00:26:20.310
And its children have
two piece of text.

00:26:20.310 --> 00:26:21.940
So the image view says folder.

00:26:21.940 --> 00:26:23.760
The bubbles text view
says Google.

00:26:23.760 --> 00:26:28.080
And when TalkBack puts focus on
this actionable group, it

00:26:28.080 --> 00:26:29.780
will say, folder Google.

00:26:32.790 --> 00:26:35.710
So some tips when you're
designing your application,

00:26:35.710 --> 00:26:38.590
make sure you use built-in
widgets whenever possible.

00:26:38.590 --> 00:26:40.130
These things will just work.

00:26:40.130 --> 00:26:43.190
Because people have put a lot
of thought into them.

00:26:43.190 --> 00:26:45.550
Make sure your app works with
a keyboard or D-Pad.

00:26:45.550 --> 00:26:48.110
So what we always used to say
was make sure your app works

00:26:48.110 --> 00:26:49.250
with a D-Pad.

00:26:49.250 --> 00:26:51.880
And if your app did work with
a D-Pad, fortunately,

00:26:51.880 --> 00:26:54.110
it will just work.

00:26:54.110 --> 00:26:56.330
You may have to make some
changes if you were doing very

00:26:56.330 --> 00:26:57.890
special things.

00:26:57.890 --> 00:27:00.990
But for an application using
built-in widgets, it will most

00:27:00.990 --> 00:27:03.100
likely just work.

00:27:03.100 --> 00:27:04.710
Make sure that you have
readable content

00:27:04.710 --> 00:27:05.890
on actionable items.

00:27:05.890 --> 00:27:08.590
So if you have an image button,
give it some text in a

00:27:08.590 --> 00:27:09.860
content description.

00:27:09.860 --> 00:27:13.100
And if you have a view group
that's focusable or clickable,

00:27:13.100 --> 00:27:15.940
put some text in it or put some
content descriptions on

00:27:15.940 --> 00:27:17.190
some of its child items.

00:27:19.750 --> 00:27:23.830
So here's an example of bad
design and a way to fix that.

00:27:23.830 --> 00:27:25.790
So this is an orphaned
actionable item.

00:27:25.790 --> 00:27:29.100
You have a frame layout
that contains a view.

00:27:29.100 --> 00:27:30.210
This view is clickable.

00:27:30.210 --> 00:27:32.310
And it fills the entire
frame layout.

00:27:32.310 --> 00:27:35.120
This text view, which has text,
also fills the entire

00:27:35.120 --> 00:27:35.990
frame layout.

00:27:35.990 --> 00:27:39.360
And for a sighted user, this
looks like a big button with a

00:27:39.360 --> 00:27:40.990
text label that you
can click on.

00:27:40.990 --> 00:27:42.560
And that's how it performs.

00:27:42.560 --> 00:27:45.730
But to a service like TalkBack
or BrailleBack, this looks

00:27:45.730 --> 00:27:48.010
like two separate items.

00:27:48.010 --> 00:27:50.660
So if you make the frame layout
clickable, and you put

00:27:50.660 --> 00:27:54.100
text inside of it, you have an
actionable group and a child

00:27:54.100 --> 00:27:55.350
that will be read out loud.

00:27:58.370 --> 00:27:58.840
All right.

00:27:58.840 --> 00:28:00.800
So sometimes it gets
a little bit more

00:28:00.800 --> 00:28:02.350
complicated than that.

00:28:02.350 --> 00:28:06.210
So let's say you've made this
really awesome keyboard.

00:28:06.210 --> 00:28:08.210
And so here's what it looks
like on screen.

00:28:08.210 --> 00:28:11.130
You've got a bunch of cool
little buttons that you're

00:28:11.130 --> 00:28:12.640
rendering in code.

00:28:12.640 --> 00:28:14.800
So instead of having actual
views for each one of these

00:28:14.800 --> 00:28:18.140
buttons, you're just drawing
them onto the screen.

00:28:18.140 --> 00:28:19.940
Here's what the XML for
that would look like.

00:28:19.940 --> 00:28:22.240
And as you might be able to
guess, there's not much of a

00:28:22.240 --> 00:28:25.200
hierarchy there, not many
actionable groups nor many

00:28:25.200 --> 00:28:26.950
readable children.

00:28:26.950 --> 00:28:31.010
And you can fix that by
providing more information to

00:28:31.010 --> 00:28:33.530
services like BrailleBack
and TalkBack.

00:28:33.530 --> 00:28:37.950
So this is what it looks like
without any changes to a blind

00:28:37.950 --> 00:28:40.110
user and to an accessibility
service.

00:28:40.110 --> 00:28:43.920
It's just a big blank area.

00:28:43.920 --> 00:28:46.700
So fortunately, we have three
steps that you can take.

00:28:46.700 --> 00:28:50.670
One is, in your custom view,
handle incoming hover events.

00:28:50.670 --> 00:28:53.040
When accessibility is turned
on and explore by touch is

00:28:53.040 --> 00:28:55.660
turned on, when you touch the
screen, your view receives

00:28:55.660 --> 00:28:56.820
hover events.

00:28:56.820 --> 00:28:59.180
If you take a look at the
Android source code for view,

00:28:59.180 --> 00:29:01.550
you'll notice that hover events
get handled a little

00:29:01.550 --> 00:29:04.340
bit specially if accessibility
is turned on.

00:29:04.340 --> 00:29:07.180
So here, because I know where
I'm rendering the keys on

00:29:07.180 --> 00:29:10.080
screen, I can map the
xy-coordinates of a motion

00:29:10.080 --> 00:29:11.190
event to a key.

00:29:11.190 --> 00:29:13.770
I can say, was I just
touching this key?

00:29:13.770 --> 00:29:16.590
If not, then I know that I need
to send the appropriate

00:29:16.590 --> 00:29:18.330
accessibility events.

00:29:18.330 --> 00:29:21.830
So as I touch the key, I'll
get a hover exit from the

00:29:21.830 --> 00:29:24.550
previous key, a hover enter for
the new key, and TalkBack

00:29:24.550 --> 00:29:28.300
or BrailleBack will say
the appropriate

00:29:28.300 --> 00:29:31.330
speech for the key.

00:29:31.330 --> 00:29:33.660
Step two, you need to populate
that outgoing event.

00:29:33.660 --> 00:29:35.780
So you just sent a hover
enter event.

00:29:35.780 --> 00:29:39.210
You need to tell it what key
you were just pressing.

00:29:39.210 --> 00:29:42.460
So here, I've made this send
hover enter event for a key

00:29:42.460 --> 00:29:45.665
method that takes a key, takes
an event type, and populates

00:29:45.665 --> 00:29:48.610
the event with the information
for the key.

00:29:48.610 --> 00:29:51.020
So that would obviously include
things like text.

00:29:51.020 --> 00:29:53.330
And here I'm also setting
the source.

00:29:53.330 --> 00:29:55.690
Because to get this great Jelly
Bean functionality of

00:29:55.690 --> 00:29:57.760
being able to swipe and being
able to double-click to

00:29:57.760 --> 00:30:01.450
activate things, I need
a node hierarchy.

00:30:01.450 --> 00:30:04.040
So after I send my accessibility
event, that gets

00:30:04.040 --> 00:30:05.600
to TalkBack or BrailleBack.

00:30:05.600 --> 00:30:08.240
And it has a virtual key ID.

00:30:08.240 --> 00:30:11.590
It can then query my application
for the node info

00:30:11.590 --> 00:30:13.880
that's associated with
that key ID.

00:30:13.880 --> 00:30:18.350
So here I'm using a node
provider, which I've taken out

00:30:18.350 --> 00:30:19.680
due to space constraints.

00:30:19.680 --> 00:30:21.760
But it has this
createAccessibilityNodeInfo

00:30:21.760 --> 00:30:23.630
event that takes a key ID.

00:30:23.630 --> 00:30:25.910
I map that key ID to
an actual key.

00:30:25.910 --> 00:30:28.820
And then I populate the node
info with the key's

00:30:28.820 --> 00:30:30.070
properties.

00:30:32.200 --> 00:30:35.600
For consistency sake, I'm also
setting the parent of the node

00:30:35.600 --> 00:30:37.730
to be the keyboard that
it belongs to.

00:30:37.730 --> 00:30:40.660
And I'm setting its source to be
its own virtual key ID and,

00:30:40.660 --> 00:30:42.440
of course, its parent.

00:30:42.440 --> 00:30:46.620
So after taking these three
steps, my keyboard looks the

00:30:46.620 --> 00:30:48.420
same to every user.

00:30:48.420 --> 00:30:51.700
So if somebody's using TalkBack
or BrailleBack, if

00:30:51.700 --> 00:30:53.640
they put their finger on
it, they'll receive the

00:30:53.640 --> 00:30:56.130
appropriate spoken or
Braille feedback.

00:30:59.260 --> 00:31:01.650
And we don't just handle
native Android views.

00:31:01.650 --> 00:31:03.670
We also handle web views
really well.

00:31:03.670 --> 00:31:05.250
And Charles will tell
you more about that.

00:31:05.250 --> 00:31:07.601
CHARLES CHEN: Thank you, Alan.

00:31:07.601 --> 00:31:09.670
Hey, so I'm Charles Chen.

00:31:09.670 --> 00:31:13.350
I'm here to talk about web
accessibility on Android.

00:31:13.350 --> 00:31:16.580
So Alan just gave you some
really great advice on how to

00:31:16.580 --> 00:31:20.780
make native Android apps
accessible, what you need to

00:31:20.780 --> 00:31:23.790
do, and how to do it.

00:31:23.790 --> 00:31:27.870
You can do the same thing if
you're building a hybrid app.

00:31:27.870 --> 00:31:31.520
So if you're building a hybrid
app that's a mixture of web

00:31:31.520 --> 00:31:35.140
content and native Java
controls, you can make that

00:31:35.140 --> 00:31:38.860
accessible and make it work
really well for users with

00:31:38.860 --> 00:31:41.940
visual impairments.

00:31:41.940 --> 00:31:44.960
So if you're using a web view
just to do something really

00:31:44.960 --> 00:31:46.420
simple or really basic--

00:31:46.420 --> 00:31:51.100
for example, maybe display a
terms of service displaying

00:31:51.100 --> 00:31:53.530
instructions to the user--

00:31:53.530 --> 00:31:56.270
then that case is pretty
straightforward.

00:31:56.270 --> 00:31:57.370
You have a web view.

00:31:57.370 --> 00:31:58.750
You put the text in there.

00:31:58.750 --> 00:32:01.640
And we'll just process it
like regular plain text.

00:32:01.640 --> 00:32:06.000
Everything works, no
problem, simple.

00:32:06.000 --> 00:32:08.810
On the other hand, if you are
going to build something

00:32:08.810 --> 00:32:10.920
that's a little bit more
dynamic, a little bit more

00:32:10.920 --> 00:32:15.240
Ajaxy, if you're going to use
JavaScript HTML5 as part of

00:32:15.240 --> 00:32:18.070
your UI, you can still
make that accessible.

00:32:18.070 --> 00:32:20.020
You can still do a
great job here.

00:32:20.020 --> 00:32:22.410
All you really have to do is
to follow the same best

00:32:22.410 --> 00:32:28.090
practices that you would do for
a web app on the desktop.

00:32:28.090 --> 00:32:31.110
And the reason you do that is
because on Android, we're

00:32:31.110 --> 00:32:32.590
running AndroVox.

00:32:32.590 --> 00:32:35.290
So AndroVox is a part
of ChromeVox.

00:32:35.290 --> 00:32:37.510
ChromeVox is our screen reading

00:32:37.510 --> 00:32:39.120
solution for Chrome OS.

00:32:39.120 --> 00:32:41.710
It runs on Chrome OS, Chrome.

00:32:41.710 --> 00:32:44.380
By the way, for those of you who
are interested in hearing

00:32:44.380 --> 00:32:47.530
more about ChromeVox, please
come to the talk on Friday,

00:32:47.530 --> 00:32:49.900
Advancing Web Accessibility.

00:32:49.900 --> 00:32:51.680
It's going to be a
really good talk.

00:32:51.680 --> 00:32:53.780
And I'm saying that not just
because I'm one of the

00:32:53.780 --> 00:32:55.960
presenters.

00:32:55.960 --> 00:32:59.460
Rachel there is also going to be
presenting, as well as one

00:32:59.460 --> 00:33:02.110
of our other colleagues,
Dominick.

00:33:02.110 --> 00:33:04.930
So please attend that
talk Friday, 11:30.

00:33:04.930 --> 00:33:07.530
Hope to see you guys
there, please.

00:33:07.530 --> 00:33:11.610
Anyways, getting back to
Android, so AndroVox is a part

00:33:11.610 --> 00:33:12.300
of ChromeVox.

00:33:12.300 --> 00:33:14.370
And this gives you a
lot of benefits.

00:33:14.370 --> 00:33:16.920
So all of the hard work that
we've put into making

00:33:16.920 --> 00:33:20.410
ChromeVox works really well
on Ajax content, making it

00:33:20.410 --> 00:33:25.190
support W3C standards, such
as ARIA and HTML5.

00:33:25.190 --> 00:33:27.900
All of that goodness
comes into Android.

00:33:27.900 --> 00:33:29.560
And it just works.

00:33:29.560 --> 00:33:33.130
And we've integrated this with
Android so that the two

00:33:33.130 --> 00:33:36.990
experiences, both web content
and native Android controls,

00:33:36.990 --> 00:33:38.110
blend seamlessly.

00:33:38.110 --> 00:33:39.920
And the users can just
use your app.

00:33:39.920 --> 00:33:42.140
And they won't even really
know the difference.

00:33:42.140 --> 00:33:44.700
And it will all just work for
them in a single simple

00:33:44.700 --> 00:33:45.790
experience.

00:33:45.790 --> 00:33:48.910
And so with that, I'm going
to switch over to demo.

00:33:54.190 --> 00:33:58.357
And so it's usually helpful to
get onto the demo app that I

00:33:58.357 --> 00:34:00.610
intend to show with
web content.

00:34:00.610 --> 00:34:00.890
COMPUTER SPEAKER: Home.

00:34:00.890 --> 00:34:01.585
CHARLES CHEN: So
let me do that.

00:34:01.585 --> 00:34:04.630
COMPUTER SPEAKER: Home,
home screen three.

00:34:04.630 --> 00:34:06.920
I/O 2012 web view tutorial.

00:34:06.920 --> 00:34:09.380
I/O 2012 web view tutorial.

00:34:09.380 --> 00:34:10.480
Web content.

00:34:10.480 --> 00:34:15.050
Google I slash O 2012
web view tutorial.

00:34:15.050 --> 00:34:18.719
CHARLES CHEN: OK, so as you can
see here, I have a hybrid

00:34:18.719 --> 00:34:19.969
application.

00:34:19.969 --> 00:34:22.210
This has web content
near the top.

00:34:22.210 --> 00:34:25.139
And it also has Android controls
near the bottom.

00:34:25.139 --> 00:34:27.774
And I'm going to touch
the web content.

00:34:27.774 --> 00:34:30.690
And you'll see that touch
exploration works the same way

00:34:30.690 --> 00:34:34.110
in a web view as it does
for any native control.

00:34:34.110 --> 00:34:37.739
So I'm going to start
touch exploring.

00:34:37.739 --> 00:34:39.420
COMPUTER SPEAKER: Accessibility
for Android's

00:34:39.420 --> 00:34:43.280
web views is handled by
AndroVox, a port of ChromeVox

00:34:43.280 --> 00:34:45.320
for Android.

00:34:45.320 --> 00:34:48.500
CHARLES CHEN: OK, now, Alan
earlier was showing you

00:34:48.500 --> 00:34:51.260
gestures where you could
do swipes to do linear

00:34:51.260 --> 00:34:52.770
navigation.

00:34:52.770 --> 00:34:55.969
The same exact thing works
here in web views.

00:34:55.969 --> 00:34:58.750
So I'm just going to do that.

00:34:58.750 --> 00:35:00.860
COMPUTER SPEAKER: The same best
practices for building

00:35:00.860 --> 00:35:05.450
accessible websites apply for
making web views accessible.

00:35:05.450 --> 00:35:07.570
CHARLES CHEN: OK, so now, I've
actually reach the end of this

00:35:07.570 --> 00:35:08.410
web content.

00:35:08.410 --> 00:35:10.240
And I want to move forward.

00:35:10.240 --> 00:35:11.590
I shouldn't really have
to care about

00:35:11.590 --> 00:35:12.690
that as an end user.

00:35:12.690 --> 00:35:15.580
So I'm just going to
keep navigating.

00:35:15.580 --> 00:35:17.860
COMPUTER SPEAKER: Previous
button disabled.

00:35:17.860 --> 00:35:19.890
CHARLES CHEN: OK, so I've
actually jumped out of the web

00:35:19.890 --> 00:35:20.520
content now.

00:35:20.520 --> 00:35:23.420
And I'm in the native
Android control.

00:35:23.420 --> 00:35:27.100
Now I'm going to go to the
next button and click it.

00:35:27.100 --> 00:35:28.250
COMPUTER SPEAKER: Next button.

00:35:28.250 --> 00:35:30.960
CHARLES CHEN: OK, and now
I'm going to click.

00:35:30.960 --> 00:35:32.290
COMPUTER SPEAKER:
Google I slash O

00:35:32.290 --> 00:35:35.750
2012 web view tutorial.

00:35:35.750 --> 00:35:39.190
CHARLES CHEN: OK, so as you
can guess from the heading

00:35:39.190 --> 00:35:42.430
here on this in the web content,
this is probably not

00:35:42.430 --> 00:35:44.250
going to be a good slide.

00:35:44.250 --> 00:35:46.580
This is going to be something
that's really bad.

00:35:46.580 --> 00:35:49.290
So here's an example of what you
should never, ever do when

00:35:49.290 --> 00:35:52.180
you're making a hybrid
application.

00:35:52.180 --> 00:35:55.400
This is an application that
doesn't follow best practices,

00:35:55.400 --> 00:35:56.530
doesn't do the right things.

00:35:56.530 --> 00:36:00.810
So let's kind of go through it
and see what's wrong with it.

00:36:00.810 --> 00:36:02.470
COMPUTER SPEAKER:
Web content bad.

00:36:02.470 --> 00:36:04.640
Heading one.

00:36:04.640 --> 00:36:08.580
Here is an example of a
poorly authored page.

00:36:08.580 --> 00:36:11.800
This button is made up of
DIV and SPAN elements.

00:36:11.800 --> 00:36:14.250
It has no roles set.

00:36:14.250 --> 00:36:17.660
CHARLES CHEN: OK, so I'm about
to go to a button.

00:36:17.660 --> 00:36:19.830
It doesn't have the
right settings on.

00:36:19.830 --> 00:36:22.900
So even though visually it looks
like it's just a green

00:36:22.900 --> 00:36:27.000
button there and it looks really
pretty with 3D CSS,

00:36:27.000 --> 00:36:29.650
it's really just DIV
and SPANs in there.

00:36:29.650 --> 00:36:32.380
It's not labeled as ARIA.

00:36:32.380 --> 00:36:34.340
It doesn't have any roles
labeled for it.

00:36:34.340 --> 00:36:37.490
So the user isn't going to
know that it's a button.

00:36:37.490 --> 00:36:39.400
There are no semantics
backing it.

00:36:39.400 --> 00:36:41.530
It's just simple
DIVs and SPANs.

00:36:41.530 --> 00:36:44.490
So let's see what happens
when I go there.

00:36:44.490 --> 00:36:46.890
COMPUTER SPEAKER:
OK, clickable.

00:36:46.890 --> 00:36:49.380
CHARLES CHEN: OK, so you know
it's clickable because we

00:36:49.380 --> 00:36:51.590
could detect that there was
a click handler there.

00:36:51.590 --> 00:36:53.970
But aside from that, you didn't
really know if that's a

00:36:53.970 --> 00:36:55.850
button, a chat box.

00:36:55.850 --> 00:36:57.280
What is this thing, right?

00:36:57.280 --> 00:36:59.260
You don't get any additional
feedback.

00:36:59.260 --> 00:37:02.530
And that's because it
wasn't properly

00:37:02.530 --> 00:37:04.760
set with a role attribute.

00:37:04.760 --> 00:37:05.930
Let's try clicking
on this, though.

00:37:05.930 --> 00:37:07.400
Because, hey, it
says clickable.

00:37:07.400 --> 00:37:10.055
So what could happen, right?

00:37:10.055 --> 00:37:12.050
Let's see.

00:37:12.050 --> 00:37:13.580
COMPUTER SPEAKER: Clicked.

00:37:13.580 --> 00:37:13.965
CHARLES CHEN: Huh?

00:37:13.965 --> 00:37:16.700
OK, I just clicked something.

00:37:16.700 --> 00:37:17.730
And I know I clicked it.

00:37:17.730 --> 00:37:21.470
But I totally missed that
alert that came up.

00:37:21.470 --> 00:37:24.360
So let's see why
that happened.

00:37:24.360 --> 00:37:26.960
COMPUTER SPEAKER: When this
button is clicked, the alert

00:37:26.960 --> 00:37:30.200
region that is shown does not
have an alert role set, nor is

00:37:30.200 --> 00:37:32.220
it marked as a live region.

00:37:32.220 --> 00:37:34.720
T. V. RAMAN: So there are these
simple HTML attributes

00:37:34.720 --> 00:37:35.810
you can add.

00:37:35.810 --> 00:37:37.500
And you can look these up.

00:37:37.500 --> 00:37:39.500
There is a [? W3C ?]
spec around it.

00:37:39.500 --> 00:37:42.370
But as Java developers and
Android developers what you

00:37:42.370 --> 00:37:46.340
need to know is you need to
annotate your DIVs and SPANs

00:37:46.340 --> 00:37:48.900
with attributes that
give semantics.

00:37:48.900 --> 00:37:52.820
And when dynamic changes happen,
you need to annotate

00:37:52.820 --> 00:37:56.030
those regions as being
dynamically changeable.

00:37:56.030 --> 00:37:59.120
At which point, whatever adapter
technology the blind

00:37:59.120 --> 00:38:02.020
user is using then
knows to speak.

00:38:02.020 --> 00:38:05.330
In this case, the technology
is, like Charles

00:38:05.330 --> 00:38:06.810
explained, is ChromeVox.

00:38:06.810 --> 00:38:08.980
But this is not Android
specific.

00:38:08.980 --> 00:38:11.050
This is basically good
accessibility

00:38:11.050 --> 00:38:13.590
practice on the web.

00:38:13.590 --> 00:38:14.040
CHARLES CHEN: Thanks, Raman.

00:38:14.040 --> 00:38:15.370
So that was some great advice.

00:38:15.370 --> 00:38:17.870
And again, if you want to
hear more, please come

00:38:17.870 --> 00:38:20.200
to our talk on Friday.

00:38:20.200 --> 00:38:22.580
OK, let's move on
to an example of

00:38:22.580 --> 00:38:24.810
where this is fixed.

00:38:24.810 --> 00:38:25.820
COMPUTER SPEAKER: Next button.

00:38:25.820 --> 00:38:29.120
Google I slash O 2012
web view tutorial.

00:38:29.120 --> 00:38:31.130
CHARLES CHEN: OK.

00:38:31.130 --> 00:38:32.130
COMPUTER SPEAKER: Web content.

00:38:32.130 --> 00:38:33.830
Good heading one.

00:38:33.830 --> 00:38:34.940
CHARLES CHEN: OK, that
heading actually

00:38:34.940 --> 00:38:36.300
sounds a lot more promising.

00:38:36.300 --> 00:38:37.170
Because it said good.

00:38:37.170 --> 00:38:40.200
So this should hopefully work.

00:38:40.200 --> 00:38:44.100
So again, I'm just doing swipe
gestures to navigate.

00:38:44.100 --> 00:38:45.820
And these are the same
swipe gestures

00:38:45.820 --> 00:38:48.980
as anywhere on Android.

00:38:48.980 --> 00:38:50.680
COMPUTER SPEAKER: Here is the
same page but with the

00:38:50.680 --> 00:38:53.260
problems fixed.

00:38:53.260 --> 00:38:56.340
The button now has its
role set to button.

00:38:56.340 --> 00:38:58.240
CHARLES CHEN: OK, so now
we've set the correct

00:38:58.240 --> 00:38:59.650
role for this button.

00:38:59.650 --> 00:39:02.630
Let's listen to what
it sounds like now.

00:39:02.630 --> 00:39:04.370
COMPUTER SPEAKER: OK button.

00:39:04.370 --> 00:39:06.770
CHARLES CHEN: OK, so now this
is working as intended.

00:39:06.770 --> 00:39:09.690
Now the user knows that
this is an OK button.

00:39:09.690 --> 00:39:10.970
And they hear it.

00:39:10.970 --> 00:39:13.160
And it says, OK button
so great.

00:39:13.160 --> 00:39:16.580
Let's try clicking it.

00:39:16.580 --> 00:39:17.780
COMPUTER SPEAKER: The
OK button has

00:39:17.780 --> 00:39:19.700
been pressed, alert.

00:39:19.700 --> 00:39:20.880
CHARLES CHEN: Cool, so
now I know that an

00:39:20.880 --> 00:39:22.230
alert has popped up.

00:39:22.230 --> 00:39:25.030
And it tells me the contents
of that alert.

00:39:25.030 --> 00:39:25.880
Great.

00:39:25.880 --> 00:39:27.530
So it's working correctly.

00:39:27.530 --> 00:39:29.920
And that's because--

00:39:29.920 --> 00:39:32.070
COMPUTER SPEAKER: The alert
region now has its role set to

00:39:32.070 --> 00:39:35.992
alert, which is treated as
a live region by default.

00:39:35.992 --> 00:39:37.820
CHARLES CHEN: OK.

00:39:37.820 --> 00:39:39.980
And so with that, I'm
going to switch over

00:39:39.980 --> 00:39:41.560
to testing on Android.

00:39:51.820 --> 00:39:55.620
OK, so testing for accessibility
on Android is

00:39:55.620 --> 00:39:57.650
something that's really easy.

00:39:57.650 --> 00:40:00.250
It's as easy as one,
two, three.

00:40:00.250 --> 00:40:03.650
And there's really no excuse
for not doing it.

00:40:03.650 --> 00:40:05.730
Because it's built
into the system.

00:40:05.730 --> 00:40:09.820
So Alan here is going to help
demonstrate just how easy it

00:40:09.820 --> 00:40:12.210
is to get accessibility
up and running.

00:40:12.210 --> 00:40:14.990
And we know you all
have devices now.

00:40:14.990 --> 00:40:18.440
So you really should
get this done.

00:40:18.440 --> 00:40:20.520
So Alan?

00:40:20.520 --> 00:40:21.490
ALAN VIVERETTE: Feel
free to try this at

00:40:21.490 --> 00:40:23.994
home or in the audience.

00:40:23.994 --> 00:40:24.900
COMPUTER SPEAKER: Home.

00:40:24.900 --> 00:40:25.270
Home.

00:40:25.270 --> 00:40:27.140
Home screen apps.

00:40:27.140 --> 00:40:28.600
Settings.

00:40:28.600 --> 00:40:30.010
Settings.

00:40:30.010 --> 00:40:31.150
CHARLES CHEN: So what Alan
is doing here is

00:40:31.150 --> 00:40:32.480
he went into settings.

00:40:32.480 --> 00:40:34.350
He's going into accessibility.

00:40:34.350 --> 00:40:35.910
And he's going to turn
on TalkBack.

00:40:35.910 --> 00:40:37.940
COMPUTER SPEAKER: Showing
items seven to 24.

00:40:37.940 --> 00:40:40.160
Accessibility.

00:40:40.160 --> 00:40:41.260
Accessibility.

00:40:41.260 --> 00:40:42.980
Navigate up.

00:40:42.980 --> 00:40:44.330
TalkBack on.

00:40:44.330 --> 00:40:46.420
CHARLES CHEN: OK, well, so
normally you would turn on

00:40:46.420 --> 00:40:49.210
TalkBack and make sure explorer
by touch is enabled

00:40:49.210 --> 00:40:53.660
and also enable additional
scripts for web accessibility

00:40:53.660 --> 00:40:54.450
to ensure you get all of the--

00:40:54.450 --> 00:40:57.050
COMPUTER SPEAKER: [INAUDIBLE]
accessibility allowed.

00:40:57.050 --> 00:40:59.850
CHARLES CHEN: --to ensure you
get all the AndroVox goodness.

00:40:59.850 --> 00:41:02.740
But since we already have this
enabled, we're ready to go.

00:41:02.740 --> 00:41:04.190
So let's start testing it.

00:41:04.190 --> 00:41:07.680
Let's start experiencing what
the user would experience.

00:41:07.680 --> 00:41:09.950
So the best way to do it is
to just use your app.

00:41:09.950 --> 00:41:12.414
COMPUTER SPEAKER: Double-tap
to activate.

00:41:12.414 --> 00:41:13.210
Home.

00:41:13.210 --> 00:41:15.120
Home screen three.

00:41:15.120 --> 00:41:16.600
CHARLES CHEN: And we are
going to go into

00:41:16.600 --> 00:41:18.710
the Google I/O app--

00:41:18.710 --> 00:41:21.640
COMPUTER SPEAKER: Google
I slash O 2012.

00:41:21.640 --> 00:41:24.220
Google I slash O 2012.

00:41:24.220 --> 00:41:27.040
CHARLES CHEN: --and just try to
use it the way a user who's

00:41:27.040 --> 00:41:29.800
using TalkBack would
be doing it.

00:41:29.800 --> 00:41:34.230
So use touch exploration to
feel around the screen.

00:41:34.230 --> 00:41:37.900
COMPUTER SPEAKER: 1:45
PM, 2:44 PM.

00:41:37.900 --> 00:41:40.510
Browse code labs empty,
start now.

00:41:40.510 --> 00:41:41.970
CHARLES CHEN: OK.

00:41:41.970 --> 00:41:44.040
COMPUTER SPEAKER: [INAUDIBLE]
enter for cache I/O 2012

00:41:44.040 --> 00:41:49.470
brainpower FTW, check us out
in after hours, stream.

00:41:49.470 --> 00:41:51.510
CHARLES CHEN: And take advantage
of the great new

00:41:51.510 --> 00:41:54.350
gestures that we've added for
accessibility options.

00:41:54.350 --> 00:41:55.520
Use linear navigation.

00:41:55.520 --> 00:41:57.660
Try to move around your app.

00:41:57.660 --> 00:41:59.500
Try to scroll lists.

00:41:59.500 --> 00:42:02.220
See if it works, if it's going
to do the right thing.

00:42:05.720 --> 00:42:10.130
COMPUTER SPEAKER: Show Android
Chrome, code labs.

00:42:10.130 --> 00:42:11.380
CHARLES CHEN: Cool.

00:42:13.470 --> 00:42:16.300
So what we're really checking
for here is to make sure that

00:42:16.300 --> 00:42:19.020
everything in our app can
be done eyes-free.

00:42:19.020 --> 00:42:21.300
The user should be able to use
your app whether or not

00:42:21.300 --> 00:42:23.490
they're looking at it.

00:42:23.490 --> 00:42:27.240
All critical information needs
to be conveyed to the user.

00:42:27.240 --> 00:42:30.380
Anytime the user does some
action, they need feedback.

00:42:30.380 --> 00:42:32.890
They need to know that they
actually did the action, that

00:42:32.890 --> 00:42:37.690
it's working, that something
is going on.

00:42:37.690 --> 00:42:41.060
Now, Android linting tools
here are your friend.

00:42:41.060 --> 00:42:46.000
So earlier today, Romain Guy
mentioned that Android linting

00:42:46.000 --> 00:42:47.510
has gotten a lot of
good new features.

00:42:47.510 --> 00:42:49.820
And I think there's a
talk on it later as

00:42:49.820 --> 00:42:51.860
well for Android tools.

00:42:51.860 --> 00:42:55.310
And one of these new features
is the ability to do some

00:42:55.310 --> 00:42:57.560
really simple checks
for accessibility.

00:42:57.560 --> 00:42:59.850
Now, this will not
catch everything.

00:42:59.850 --> 00:43:01.850
But this is a really good
starting point.

00:43:01.850 --> 00:43:04.470
And this catches a very annoying
but simple to fix

00:43:04.470 --> 00:43:07.310
error, which is missing
content descriptions.

00:43:07.310 --> 00:43:14.980
So if you run the lintel with
this command, as you see here,

00:43:14.980 --> 00:43:19.540
so if you run the commands, lint
will actually catch cases

00:43:19.540 --> 00:43:23.420
where you have image buttons
that are missing content

00:43:23.420 --> 00:43:24.520
description.

00:43:24.520 --> 00:43:28.060
For a blind user that's using
TalkBack or BrailleBack, all

00:43:28.060 --> 00:43:30.030
they're going to get is that
there's an image here.

00:43:30.030 --> 00:43:31.890
But they'll have no
clue what it is.

00:43:31.890 --> 00:43:35.090
So this is a really bad
thing if that happens.

00:43:35.090 --> 00:43:37.020
And this will catch
it for you.

00:43:37.020 --> 00:43:39.530
Now, you shouldn't be afraid
to use this tool.

00:43:39.530 --> 00:43:42.310
It's not going to interfere if
you have images that are just

00:43:42.310 --> 00:43:43.080
decorative.

00:43:43.080 --> 00:43:45.200
Because if you have something
that's purely decorative,

00:43:45.200 --> 00:43:47.660
that's not meant to convey any
information, that's not

00:43:47.660 --> 00:43:50.310
actionable, it's not really
meant to do anything, you can

00:43:50.310 --> 00:43:53.570
always tag that with
the null notation.

00:43:53.570 --> 00:43:55.720
So if you set at null,
then it will tell the

00:43:55.720 --> 00:43:56.540
tool to ignore it.

00:43:56.540 --> 00:43:57.720
It's only decorative.

00:43:57.720 --> 00:43:58.580
It's just eye candy.

00:43:58.580 --> 00:44:01.970
It doesn't really do anything.

00:44:01.970 --> 00:44:06.780
Now, if you do what we talked
about here today, then you're

00:44:06.780 --> 00:44:09.590
going to build an app
that's usable.

00:44:09.590 --> 00:44:12.050
But I would really like to
challenge everyone here to go

00:44:12.050 --> 00:44:13.570
further, to go the next mile.

00:44:13.570 --> 00:44:16.370
Because it's not about just
making things usable so you

00:44:16.370 --> 00:44:17.990
can kind of struggle
through it.

00:44:17.990 --> 00:44:21.290
It's really about building apps
that are great, building

00:44:21.290 --> 00:44:23.330
apps that people love to use.

00:44:23.330 --> 00:44:26.290
So really, I think we should all
strive for building apps

00:44:26.290 --> 00:44:29.960
that are just as efficient to
use eyes-free as it is looking

00:44:29.960 --> 00:44:31.290
at the screen.

00:44:31.290 --> 00:44:34.400
And with that, I am going to
hand it back to Raman.

00:44:34.400 --> 00:44:35.590
T. V. RAMAN: Thank
you, Charles.

00:44:35.590 --> 00:44:40.700
So to wrap up, accessibility
on the Android platform

00:44:40.700 --> 00:44:45.130
really, really helps you reach
an ever increasing

00:44:45.130 --> 00:44:47.540
wide range of users.

00:44:47.540 --> 00:44:51.040
The platform does a lot
of work for you.

00:44:51.040 --> 00:44:54.000
But if you follow some of these
guidelines that we are

00:44:54.000 --> 00:44:56.660
giving you and do some of
the testing that Charles

00:44:56.660 --> 00:45:00.500
suggested, I guarantee you that,
not only will your apps

00:45:00.500 --> 00:45:04.810
be usable by blind users, by
low-vision users, by users on

00:45:04.810 --> 00:45:08.670
specialized interfaces, but you
will, in general, discover

00:45:08.670 --> 00:45:12.590
that your user interfaces
become more robust.

00:45:12.590 --> 00:45:21.270
They degrade gracefully, which
means that your application

00:45:21.270 --> 00:45:25.430
just works in environments that
you originally did not

00:45:25.430 --> 00:45:26.140
expect it to.

00:45:26.140 --> 00:45:28.840
And that's a very, very
powerful thought.

00:45:28.840 --> 00:45:32.410
Accessibility is the
law in many places.

00:45:32.410 --> 00:45:34.420
If you're selling to the
enterprise, if you're selling

00:45:34.420 --> 00:45:38.520
to universities, your
applications cannot be used if

00:45:38.520 --> 00:45:41.860
they don't meet certain
accessibility requirements.

00:45:41.860 --> 00:45:46.380
But that's actually, in my
opinion, the initial

00:45:46.380 --> 00:45:49.410
educational reason why you
should be worrying about

00:45:49.410 --> 00:45:50.430
accessibility.

00:45:50.430 --> 00:45:55.680
In general, if you build your
apps to be accessible, my own

00:45:55.680 --> 00:45:59.640
experience has been that those
applications eventually end up

00:45:59.640 --> 00:46:01.710
being more usable
for everyone.

00:46:01.710 --> 00:46:06.910
As an example, we last year in
our I/O talk on accessibility

00:46:06.910 --> 00:46:09.140
showcased TuneIn Radio.

00:46:09.140 --> 00:46:11.430
I discovered that app two
and 1/2 years ago.

00:46:11.430 --> 00:46:12.190
And I loved it.

00:46:12.190 --> 00:46:14.560
It was very, very nicely done.

00:46:14.560 --> 00:46:17.070
We found it was accessible
out of the box.

00:46:17.070 --> 00:46:22.920
And today that is one of the
most used radio tune in

00:46:22.920 --> 00:46:24.230
applications on Android.

00:46:24.230 --> 00:46:28.290
So I think I'd love to see a lot
more of those coming from

00:46:28.290 --> 00:46:29.410
each one of you.

00:46:29.410 --> 00:46:30.570
Thank you.

00:46:30.570 --> 00:46:32.800
CHARLES CHEN: Also, before we
go to Q&amp;A, I just want to

00:46:32.800 --> 00:46:35.990
mention that we showed a lot
of things here today.

00:46:35.990 --> 00:46:38.300
And I know you all are
dying to see a real

00:46:38.300 --> 00:46:39.690
display in real life.

00:46:39.690 --> 00:46:41.860
So please drop by our sandbox.

00:46:41.860 --> 00:46:45.540
Our sandbox is just out in front
here of this hallway.

00:46:45.540 --> 00:46:46.375
It's accessibility.

00:46:46.375 --> 00:46:47.420
You can't miss it.

00:46:47.420 --> 00:46:50.210
So please drop by
and say hello.

00:46:50.210 --> 00:46:52.710
And also, we have
partners here.

00:46:52.710 --> 00:46:55.990
And so come by and
check it out.

00:46:55.990 --> 00:47:00.200
OK, and so with that, we'll
go to questions.

00:47:00.200 --> 00:47:01.377
Thank you.

00:47:01.377 --> 00:47:09.840
[APPLAUSE]

00:47:09.840 --> 00:47:10.636
CHARLES CHEN: Yes?

00:47:10.636 --> 00:47:15.240
AUDIENCE: Yeah, with more
complex items like multiple

00:47:15.240 --> 00:47:18.180
radio buttons in a group or
things that need to swipe to

00:47:18.180 --> 00:47:21.170
do an action, are we going to
have to include instructions

00:47:21.170 --> 00:47:24.470
for what exactly is going on,
which radio button is

00:47:24.470 --> 00:47:28.600
selected, whenever, say,
one is an option?

00:47:28.600 --> 00:47:29.690
ALAN VIVERETTE: So if you're
using built-in

00:47:29.690 --> 00:47:31.410
radio buttons, no.

00:47:31.410 --> 00:47:34.930
You can just let the built-in
widgets do their job.

00:47:34.930 --> 00:47:38.680
For gestures, so as you may have
noticed when I was doing

00:47:38.680 --> 00:47:41.230
regular scrolling, I was
using two fingers.

00:47:41.230 --> 00:47:44.120
So when explore by touch is
turned on, your one-finger

00:47:44.120 --> 00:47:45.715
gestures simply become
two-figure gestures.

00:47:48.940 --> 00:47:49.820
CHARLES CHEN: Yes, sir?

00:47:49.820 --> 00:47:51.810
AUDIENCE: So my question
relates to content

00:47:51.810 --> 00:47:52.830
descriptions.

00:47:52.830 --> 00:47:55.420
Let's say you had a list
of items, say movies.

00:47:55.420 --> 00:47:58.470
And then when you entered it,
you got an image of the

00:47:58.470 --> 00:47:59.560
movie's poster art.

00:47:59.560 --> 00:48:00.680
And then you had the title.

00:48:00.680 --> 00:48:03.640
Is it appropriate to make the
poster a null content

00:48:03.640 --> 00:48:04.330
description?

00:48:04.330 --> 00:48:07.040
Should that somehow dynamically
be sent or just

00:48:07.040 --> 00:48:10.670
say, this is a movie poster?

00:48:10.670 --> 00:48:13.480
ALAN VIVERETTE: So I think, in
general, if you're going to

00:48:13.480 --> 00:48:15.610
add a content description,
it should add meaningful

00:48:15.610 --> 00:48:16.560
information.

00:48:16.560 --> 00:48:20.180
So if you've already got the
title of the movie, and the

00:48:20.180 --> 00:48:23.830
movie poster just reiterates
the title, then you should

00:48:23.830 --> 00:48:24.690
probably avoid it.

00:48:24.690 --> 00:48:27.460
T. V. RAMAN: Yes, and I
definitely wouldn't like the

00:48:27.460 --> 00:48:30.110
thing to say "movie poster."
Because that doesn't really

00:48:30.110 --> 00:48:33.512
give me that much more
functionality as an end user.

00:48:33.512 --> 00:48:38.030
So err on the side of making
your application less chatty.

00:48:38.030 --> 00:48:40.620
AUDIENCE: Thank you.

00:48:40.620 --> 00:48:42.670
CHARLES CHEN: Yes?

00:48:42.670 --> 00:48:44.693
I think you had it first.

00:48:44.693 --> 00:48:47.760
AUDIENCE: And what [INAUDIBLE]

00:48:47.760 --> 00:48:50.660
that he showed today are not
applicable for 4.0, right?

00:48:50.660 --> 00:48:52.360
It is available for only
Jelly Bean, right?

00:48:52.360 --> 00:48:52.770
T. V. RAMAN: Yes.

00:48:52.770 --> 00:48:53.590
ALAN VIVERETTE: Correct.

00:48:53.590 --> 00:48:54.980
AUDIENCE: Right, OK.

00:48:54.980 --> 00:48:58.510
And the question that I have is
typically for the standard

00:48:58.510 --> 00:49:01.390
object's data fixed content
description.

00:49:01.390 --> 00:49:03.950
Is it possible to modify the
content description.

00:49:03.950 --> 00:49:06.840
For example, I'm using a web
view in my application.

00:49:06.840 --> 00:49:10.340
And whenever I launch my view,
it sees [INAUDIBLE].

00:49:10.340 --> 00:49:14.450
And because I'm using, let's
say, [INAUDIBLE] that I want

00:49:14.450 --> 00:49:17.420
to save something else, is
it possible to do that?

00:49:17.420 --> 00:49:21.170
CHARLES CHEN: So my advice to
you is to actually not put a

00:49:21.170 --> 00:49:22.380
content description
on web view.

00:49:22.380 --> 00:49:24.810
Because, if you do, your content
description will trump

00:49:24.810 --> 00:49:26.250
the normal behavior.

00:49:26.250 --> 00:49:29.390
So you'll actually lose all of
our web handling abilities.

00:49:29.390 --> 00:49:31.550
And you'll end up having to
reimplement the whole thing

00:49:31.550 --> 00:49:34.590
yourself, which is not
what you want to do.

00:49:34.590 --> 00:49:36.420
So rather, you shouldn't
do that.

00:49:36.420 --> 00:49:39.820
Instead, you should offer your
page in a way that really

00:49:39.820 --> 00:49:43.220
follows HTML5 accessibility
best practices.

00:49:43.220 --> 00:49:44.690
And it should just work.

00:49:44.690 --> 00:49:46.810
If you have more detailed
questions about that, I'd be

00:49:46.810 --> 00:49:48.360
happy to chat with you
one-on-one offline.

00:49:48.360 --> 00:49:49.280
AUDIENCE: OK.

00:49:49.280 --> 00:49:50.820
CHARLES CHEN: And I'll
look at your apps.

00:49:50.820 --> 00:49:51.600
AUDIENCE: OK, thank you.

00:49:51.600 --> 00:49:52.380
Thanks a lot.

00:49:52.380 --> 00:49:53.830
CHARLES CHEN: No problem.

00:49:53.830 --> 00:49:54.620
Yes, sir?

00:49:54.620 --> 00:49:55.380
AUDIENCE: Hi.

00:49:55.380 --> 00:50:00.480
Look just with a lot of apps you
often find that there's a

00:50:00.480 --> 00:50:03.810
sort of help guide to
how to use the app.

00:50:03.810 --> 00:50:08.190
And this is not even in the
realms of accessibility.

00:50:08.190 --> 00:50:13.530
Now, seeing how you stumbled a
bit with getting to the Send

00:50:13.530 --> 00:50:16.940
button in the--

00:50:16.940 --> 00:50:22.600
was it the instant messaging
demo that you made earlier?

00:50:22.600 --> 00:50:27.370
When you first found that
program, did you have to sort

00:50:27.370 --> 00:50:30.700
of prod around to even
know that there was

00:50:30.700 --> 00:50:31.950
a Send button there?

00:50:34.480 --> 00:50:41.010
How can we make it sort of
intuitive but accessible at

00:50:41.010 --> 00:50:42.325
the same time?

00:50:42.325 --> 00:50:45.340
T. V. RAMAN: So you ask
a very good question.

00:50:45.340 --> 00:50:49.980
So one way you can actually make
it really intuitive for

00:50:49.980 --> 00:50:55.630
blind users is to have
things appear in

00:50:55.630 --> 00:50:58.150
places you would expect.

00:50:58.150 --> 00:51:01.255
I'll give you an example
of this from real life.

00:51:01.255 --> 00:51:05.680
Tonight, after the Google I/O
party, you will all go back to

00:51:05.680 --> 00:51:07.000
your hotel rooms.

00:51:07.000 --> 00:51:10.220
And when you open your hotel
room door, you do not hunt

00:51:10.220 --> 00:51:11.260
around for the light switch.

00:51:11.260 --> 00:51:13.220
The light switch
is right there.

00:51:13.220 --> 00:51:17.560
And I personally would like to
see touch screen interfaces,

00:51:17.560 --> 00:51:20.890
in the next couple of years,
develop that level of

00:51:20.890 --> 00:51:26.060
consistency, where things are
where you expect them to be.

00:51:26.060 --> 00:51:29.960
Today, for a blind user, touch
exploration is our way out.

00:51:29.960 --> 00:51:31.180
So we explore.

00:51:31.180 --> 00:51:34.500
But that, as you observed,
is painful.

00:51:34.500 --> 00:51:40.100
And in a world where things have
sort of settled down--

00:51:40.100 --> 00:51:42.100
today, in the mobile
space we are all

00:51:42.100 --> 00:51:43.870
innovating very rapidly.

00:51:43.870 --> 00:51:47.200
And in some sense, all the user
interface controls are in

00:51:47.200 --> 00:51:48.990
different places depending
on what the

00:51:48.990 --> 00:51:50.720
designer thought was best.

00:51:50.720 --> 00:51:55.550
But hopefully, things will
settle down, where a year from

00:51:55.550 --> 00:51:57.980
now, just as today you don't
have to hunt for the light

00:51:57.980 --> 00:52:01.900
switch in your hotel room, you
can find the OK button or the

00:52:01.900 --> 00:52:03.360
Install button without actually

00:52:03.360 --> 00:52:04.625
hunting on the screen.

00:52:04.625 --> 00:52:07.330
AUDIENCE: OK, can I quickly add,
do you think it would be

00:52:07.330 --> 00:52:11.620
a good idea, if you opened your
door to the hotel room

00:52:11.620 --> 00:52:16.980
and a voice said, "There's a
light switch to your right"?

00:52:16.980 --> 00:52:19.720
T. V. RAMAN: That would
be a nice thing.

00:52:19.720 --> 00:52:23.020
But on the other hand, if it's
always on the right, why do

00:52:23.020 --> 00:52:24.750
you even actually need
to say that?

00:52:24.750 --> 00:52:27.200
Because, for instance,
supposing we built

00:52:27.200 --> 00:52:28.950
a system like that.

00:52:28.950 --> 00:52:32.170
We said, every time you open
the door it says where the

00:52:32.170 --> 00:52:33.200
light switch is.

00:52:33.200 --> 00:52:34.990
What is a deaf user
going to do?

00:52:34.990 --> 00:52:37.380
What is a deaf-blind
user going to do?

00:52:37.380 --> 00:52:38.360
We end up--

00:52:38.360 --> 00:52:40.960
I think, it's hard
to say these are

00:52:40.960 --> 00:52:42.750
mutually exclusive solutions.

00:52:42.750 --> 00:52:48.640
But user interfaces work best
when you don't notice them.

00:52:48.640 --> 00:52:50.030
They walk up to a door.

00:52:50.030 --> 00:52:52.335
The type of door handle
tells you where you

00:52:52.335 --> 00:52:53.240
should push or not.

00:52:53.240 --> 00:52:57.420
The door shouldn't say,
push me or pull me.

00:52:57.420 --> 00:53:00.760
CHARLES CHEN: Also, I'd like to
add that, in your specific

00:53:00.760 --> 00:53:03.710
question, that's actually one
of the really powerful ways

00:53:03.710 --> 00:53:05.840
where you can use touch
exploration and linear

00:53:05.840 --> 00:53:07.540
navigation in tandem.

00:53:07.540 --> 00:53:09.780
If you remember during my
demo, I did some touch

00:53:09.780 --> 00:53:11.950
exploration first on
the web content.

00:53:11.950 --> 00:53:13.900
And I started doing gesture
navigation.

00:53:13.900 --> 00:53:15.470
And this is the same
thing that works

00:53:15.470 --> 00:53:16.950
in any part of Android.

00:53:16.950 --> 00:53:18.470
You can touch explore
to something.

00:53:18.470 --> 00:53:20.650
And then you can start doing
gesture navigation from that

00:53:20.650 --> 00:53:22.050
point onwards.

00:53:22.050 --> 00:53:24.330
So the first time you use an
app, it might take you some

00:53:24.330 --> 00:53:26.000
time to know where things
are laid out.

00:53:26.000 --> 00:53:28.450
But once you figure that out,
in the future, you can get

00:53:28.450 --> 00:53:30.670
into the general vicinity,
and then just use linear

00:53:30.670 --> 00:53:31.770
navigation to get there.

00:53:31.770 --> 00:53:34.435
T. V. RAMAN: So for instance, on
the phone today when I ran

00:53:34.435 --> 00:53:39.100
Chrome, I load CNN or BBC or
whatever sites that I read

00:53:39.100 --> 00:53:40.570
news on often.

00:53:40.570 --> 00:53:44.920
I know that the top 1/3 of that
page on that screen is

00:53:44.920 --> 00:53:49.070
navigational stuff, and things
that I would really not need

00:53:49.070 --> 00:53:50.940
to read on a regular basis.

00:53:50.940 --> 00:53:54.410
So I approximately put my finger
halfway down, hear a

00:53:54.410 --> 00:53:57.030
headline, and then say, OK,
now read from here.

00:53:57.030 --> 00:53:59.504
So it's a powerful paradigm.

00:53:59.504 --> 00:54:03.100
But a year from now, as these
things get consistent,

00:54:03.100 --> 00:54:08.860
hopefully I'm sure we'll saying
something more optimal.

00:54:08.860 --> 00:54:09.580
AUDIENCE: Thank you.

00:54:09.580 --> 00:54:10.190
CHARLES CHEN: Yes, sir?

00:54:10.190 --> 00:54:13.640
AUDIENCE: So we have the option
to use JavaScript to

00:54:13.640 --> 00:54:18.760
mimic native gestures, such
as a swipe or a rotate.

00:54:18.760 --> 00:54:21.620
Now that you have the ability
to go from-- normally a

00:54:21.620 --> 00:54:24.500
one-finger would swipe or two
fingers would rotate.

00:54:24.500 --> 00:54:27.520
Now, you're saying that I can
use two fingers to swipe with

00:54:27.520 --> 00:54:28.850
the touch feedback.

00:54:28.850 --> 00:54:31.680
Does that mean that web
developers can continue using

00:54:31.680 --> 00:54:36.690
JavaScript libraries that
mimic native gestures?

00:54:36.690 --> 00:54:38.620
Because that's normally
been a problem.

00:54:38.620 --> 00:54:40.450
CHARLES CHEN: Yes, so basically
what's happening

00:54:40.450 --> 00:54:43.180
here is that, as a developer,
you don't really know the

00:54:43.180 --> 00:54:45.250
difference between--

00:54:45.250 --> 00:54:46.550
you won't realize how
we're doing the

00:54:46.550 --> 00:54:48.410
two-finger swipe thing.

00:54:48.410 --> 00:54:52.800
What's happening is, on the
Android end, you code it the

00:54:52.800 --> 00:54:54.700
same way as you would
normally.

00:54:54.700 --> 00:54:58.260
And what you'll get for the end
user is, if they use two

00:54:58.260 --> 00:55:00.730
fingers and they have touch
exploration on,

00:55:00.730 --> 00:55:01.980
you'll see one finger.

00:55:01.980 --> 00:55:04.150
So you won't actually
see that difference.

00:55:04.150 --> 00:55:06.360
T. V. RAMAN: So the answer to
your question is you can

00:55:06.360 --> 00:55:08.400
continue using those
libraries.

00:55:08.400 --> 00:55:11.410
And because we've done this
consistently at a platform

00:55:11.410 --> 00:55:19.870
level, blind users of your
application will know that

00:55:19.870 --> 00:55:21.620
they need to use an
additional finger.

00:55:21.620 --> 00:55:23.940
So that one finger that they're
using for touch

00:55:23.940 --> 00:55:26.820
exploration basically to the
platform looks like a mouse

00:55:26.820 --> 00:55:29.422
pointer moving when
accessibility is on.

00:55:32.590 --> 00:55:36.740
AUDIENCE: Is there a way to
easily detect if accessibility

00:55:36.740 --> 00:55:37.675
is on on the device?

00:55:37.675 --> 00:55:38.000
CHARLES CHEN: Yes.

00:55:38.000 --> 00:55:43.210
AUDIENCE: And is it advisable to
change your content if that

00:55:43.210 --> 00:55:44.900
flag is on?

00:55:44.900 --> 00:55:49.460
T. V. RAMAN: So you can check
programmatically, yes.

00:55:49.460 --> 00:55:53.430
Unless you're doing something
that is really heavily custom,

00:55:53.430 --> 00:55:56.120
where you think you can actually
provide better

00:55:56.120 --> 00:55:59.920
semantics, I wouldn't actually
change the content.

00:55:59.920 --> 00:56:02.790
So, for instance, if you have
an extremely custom view.

00:56:02.790 --> 00:56:05.580
So Alan showed you the example
of a keyboard.

00:56:05.580 --> 00:56:09.160
But let's say you develop
a fancy calendar app or

00:56:09.160 --> 00:56:09.990
something like that.

00:56:09.990 --> 00:56:13.270
And you have this custom canvas
into which you have

00:56:13.270 --> 00:56:19.000
built up your calendar model
using a couple of lists, a

00:56:19.000 --> 00:56:22.680
couple of grids, and whatever,
and you feel, as an app

00:56:22.680 --> 00:56:27.350
developer, that by saying list,
list, grid, and button

00:56:27.350 --> 00:56:31.280
the semantics of your app are
being lost, then you can

00:56:31.280 --> 00:56:36.540
basically implement your own
accessibility bits just the

00:56:36.540 --> 00:56:39.550
way we do for some of the more
complex platform widgets.

00:56:39.550 --> 00:56:42.280
But that's the level at which
I would customize things.

00:56:42.280 --> 00:56:45.730
I would not sort of do a
separate view or a separate

00:56:45.730 --> 00:56:46.570
content layout.

00:56:46.570 --> 00:56:49.920
Because over time, the two
will go out of sync, and

00:56:49.920 --> 00:56:50.840
you'll have problems.

00:56:50.840 --> 00:56:52.910
ALAN VIVERETTE: It's very rare
that you'll save time by

00:56:52.910 --> 00:56:54.515
implementing something
separate.

00:56:54.515 --> 00:56:56.640
CHARLES CHEN: Yeah, it only
makes sense if you were doing

00:56:56.640 --> 00:56:58.840
everything OpenGL
or something.

00:56:58.840 --> 00:57:00.350
And it's just a plain list.

00:57:00.350 --> 00:57:01.680
And you wanted to just
have a symbol list.

00:57:01.680 --> 00:57:03.715
ALAN VIVERETTE: I should
mention, though, if you use a

00:57:03.715 --> 00:57:06.300
node provider, you can make
something that's written in

00:57:06.300 --> 00:57:09.290
OpenGL using a surface renderer
or a GL canvas

00:57:09.290 --> 00:57:10.770
totally accessible.

00:57:10.770 --> 00:57:12.650
And it would be
indistinguishable from a real

00:57:12.650 --> 00:57:14.215
view hierarchy if you
implement the

00:57:14.215 --> 00:57:15.162
node provider correctly.

00:57:15.162 --> 00:57:16.460
CHARLES CHEN: Yeah.

00:57:16.460 --> 00:57:18.010
So in general, don't
try to do that.

00:57:18.010 --> 00:57:20.420
T. V. RAMAN: So the extra code
you would be implementing is

00:57:20.420 --> 00:57:23.150
what Alan and Charles described,
which is the node

00:57:23.150 --> 00:57:25.320
providers and exposing--

00:57:25.320 --> 00:57:26.950
so you'd be exposing
semantics through

00:57:26.950 --> 00:57:29.260
those virtual hierarchy.

00:57:29.260 --> 00:57:31.050
CHARLES CHEN: Anyway, if you
have anything more specific,

00:57:31.050 --> 00:57:33.450
we'd be happy to talk to you
offline after this talk.

00:57:33.450 --> 00:57:33.960
Yes?

00:57:33.960 --> 00:57:36.570
And I think this might be the
last question, since we're

00:57:36.570 --> 00:57:37.270
running short on time.

00:57:37.270 --> 00:57:38.450
AUDIENCE: Hi, my
name is Daniel.

00:57:38.450 --> 00:57:40.470
Thank you for this session.

00:57:40.470 --> 00:57:44.370
When Peter sent Alan the message
in the presentation

00:57:44.370 --> 00:57:46.570
saying that he loves coffee,
he managed to

00:57:46.570 --> 00:57:47.900
find the Send button.

00:57:47.900 --> 00:57:50.460
But the device did not give him
feedback that the message

00:57:50.460 --> 00:57:51.840
actually was not sent.

00:57:51.840 --> 00:57:52.990
We could see it.

00:57:52.990 --> 00:57:54.450
But we couldn't hear it.

00:57:54.450 --> 00:57:56.790
So Peter thinks he
sent the message.

00:57:56.790 --> 00:57:58.450
But Alan is still
waiting for it.

00:57:58.450 --> 00:58:01.970
So what was the error in
the programming of the

00:58:01.970 --> 00:58:02.640
application?

00:58:02.640 --> 00:58:06.390
Or what was the source of this
not giving this important

00:58:06.390 --> 00:58:09.430
feedback message has
not been sent?

00:58:09.430 --> 00:58:12.720
PETER LUNDBLAD: That's a great
question, actually.

00:58:12.720 --> 00:58:17.300
I think that it's a balance
between, of course, giving too

00:58:17.300 --> 00:58:17.980
much feedback.

00:58:17.980 --> 00:58:21.600
In this case, we should probably
have given a little

00:58:21.600 --> 00:58:22.920
bit more feedback.

00:58:22.920 --> 00:58:26.810
But you can always go back and
check if the message was

00:58:26.810 --> 00:58:30.000
actually sent if you really
want to know.

00:58:30.000 --> 00:58:30.690
T. V. RAMAN: I think it was--

00:58:30.690 --> 00:58:34.380
also, when you do hit
the send button

00:58:34.380 --> 00:58:37.010
successfully, it does say sent.

00:58:37.010 --> 00:58:41.930
And I suspect what happened
here was we were all, our

00:58:41.930 --> 00:58:45.560
concentration was more on doing
a talk over demos as

00:58:45.560 --> 00:58:47.710
opposed to real usage.

00:58:47.710 --> 00:58:51.610
But the messaging application
does give you feedback when

00:58:51.610 --> 00:58:52.610
you send successfully.

00:58:52.610 --> 00:58:55.300
It doesn't give you feedback
when you fail to send.

00:58:55.300 --> 00:58:58.010
And so lack of feedback there
is feedback, in some sense.

00:58:58.010 --> 00:59:00.700
CHARLES CHEN: And also I'd just
like to plug one of our

00:59:00.700 --> 00:59:03.530
new accessibility events,
successfully type announce.

00:59:03.530 --> 00:59:06.460
This is exactly the use
case where that would

00:59:06.460 --> 00:59:08.000
have come in handy.

00:59:08.000 --> 00:59:08.560
ALAN VIVERETTE: So
type announce--

00:59:08.560 --> 00:59:09.550
CHARLES CHEN: We'll
be upgrading that.

00:59:09.550 --> 00:59:10.390
ALAN VIVERETTE: --is
when you want your

00:59:10.390 --> 00:59:12.250
app to just say something.

00:59:12.250 --> 00:59:14.350
If you send an accessibility
event with the type of

00:59:14.350 --> 00:59:18.080
announce, it will just
get read verbatim.

00:59:18.080 --> 00:59:18.980
CHARLES CHEN: Thank you.

00:59:18.980 --> 00:59:22.670
OK, so any last questions
or no?

00:59:22.670 --> 00:59:23.050
OK.

00:59:23.050 --> 00:59:25.930
ALAN VIVERETTE: One last plug,
we're down the hall at the

00:59:25.930 --> 00:59:27.570
corner, accessibility booth.

00:59:27.570 --> 00:59:28.030
Come see us.

00:59:28.030 --> 00:59:29.281
T. V. RAMAN: Thank you, guys.

00:59:29.281 --> 00:59:30.600
And look forward to your apps.

00:59:30.600 --> 00:59:33.207
[APPLAUSE]

