WEBVTT
Kind: captions
Language: en

00:00:00.320 --> 00:00:02.460
So let's take a look at an example of using

00:00:02.460 --> 00:00:05.900
the aggregation framework. To answer some questions about our data,

00:00:07.120 --> 00:00:10.180
let's find out how we could use the aggregation framework,

00:00:10.180 --> 00:00:13.990
to determine which user in our data set, has produced the

00:00:13.990 --> 00:00:17.371
most tweets. Now, let's talk about the process we would

00:00:17.371 --> 00:00:20.090
like the database to perform for us. So given the

00:00:20.090 --> 00:00:22.320
way our data is laid out, the first thing we're

00:00:22.320 --> 00:00:25.820
going to want to do is group the tweets by user.

00:00:25.820 --> 00:00:28.630
Remember, each tweet, has the user as

00:00:28.630 --> 00:00:31.130
a field within it. Then we're going to want to

00:00:31.130 --> 00:00:35.670
count each user's tweets, and finally, select the

00:00:35.670 --> 00:00:39.450
user with the most tweets. Now, let's rethink

00:00:39.450 --> 00:00:42.330
this third step. What's probably going to be

00:00:42.330 --> 00:00:45.400
most valuable, is not just seeing the one

00:00:45.400 --> 00:00:49.700
person who's tweeted the most, but instead, counting

00:00:49.700 --> 00:00:52.140
the number of tweets for each user, and

00:00:52.140 --> 00:00:55.760
then sorting them. If we sort into descending order,

00:00:55.760 --> 00:00:57.930
the person at the top, will be the one

00:00:57.930 --> 00:01:01.270
with the most tweets. So our process is really

00:01:01.270 --> 00:01:04.720
group all tweets by user, count each user's tweets,

00:01:04.720 --> 00:01:08.500
sort into descending order, and then, select the user

00:01:08.500 --> 00:01:12.160
at the top. Okay. So, with this process outlined,

00:01:12.160 --> 00:01:13.820
let's take a look at how we would express

00:01:13.820 --> 00:01:17.240
this in the aggregation framework. And, we'll use this as

00:01:17.240 --> 00:01:20.220
an example, to launch our exploration of the

00:01:20.220 --> 00:01:23.840
aggregation framework in MongoDB. Okay. So, aggregation queries

00:01:23.840 --> 00:01:28.440
in MongoDB are issued using the aggregate command.

00:01:28.440 --> 00:01:30.250
And, we'll talk about this in just a

00:01:30.250 --> 00:01:33.950
bit. But aggregations are done with a pipeline.

00:01:33.950 --> 00:01:35.500
And a pipeline is essentially a series of

00:01:35.500 --> 00:01:39.130
stages, that are included as elements of an

00:01:39.130 --> 00:01:42.510
array, that's passed through aggregate as a parameter.

00:01:42.510 --> 00:01:48.000
Okay, so the first thing we need to do is group. Now, here we're going to use

00:01:48.000 --> 00:01:50.760
the group operator in this first stage of our

00:01:50.760 --> 00:01:54.070
aggregation pipeline. And the way we're going to group,

00:01:54.070 --> 00:01:58.160
is based on a user's screen name. Let's briefly

00:01:58.160 --> 00:01:59.830
go back, and take a look at the data.

00:02:01.200 --> 00:02:04.110
Remember that, all of our tweets have a user

00:02:04.110 --> 00:02:07.860
field. And that user field is actually a nested

00:02:07.860 --> 00:02:11.280
document, that contains a screen name. Okay, so

00:02:11.280 --> 00:02:14.560
if we go back to our aggregation query, we

00:02:14.560 --> 00:02:15.880
can see that we're saying for the user

00:02:15.880 --> 00:02:20.270
sub document, I want the screen name field. Okay,

00:02:20.270 --> 00:02:22.940
so what's this about? Well, this isn't an

00:02:22.940 --> 00:02:26.600
operator. Instead, what this means is, so even though

00:02:26.600 --> 00:02:30.760
it's inside quotes, don't interpret this as a string.

00:02:30.760 --> 00:02:35.200
That is to say, don't make the ID user.screen_name.

00:02:35.200 --> 00:02:39.320
Rather, group together all documents where the value of

00:02:39.320 --> 00:02:42.520
screen name for the user sub document. That's what

00:02:42.520 --> 00:02:45.520
this dollar says should happen here. Where the value

00:02:45.520 --> 00:02:49.116
of this is the same. So, all tweets that

00:02:49.116 --> 00:02:51.700
have this, the same value for this field will

00:02:51.700 --> 00:02:55.090
be grouped together. And then we need an accumulator

00:02:55.090 --> 00:02:57.100
of some kind. There are a number of different

00:02:57.100 --> 00:03:00.880
accumulator operators that we can use. What this means is,

00:03:00.880 --> 00:03:03.480
for every document that has the same

00:03:03.480 --> 00:03:08.480
value for this field, increment this value, count,

00:03:08.480 --> 00:03:11.240
by one. That's the semantics of this.

00:03:11.240 --> 00:03:15.630
So, this accomplishes those first 2 steps that

00:03:15.630 --> 00:03:21.170
we talked about here, group tweets by user, and count each user's tweets. Then

00:03:21.170 --> 00:03:25.740
the next thing that's going to happen, is we'll simply do a sort. And this says,

00:03:25.740 --> 00:03:28.820
sort based on the count of the documents that are

00:03:28.820 --> 00:03:32.650
passed into this stage, and sort into descending order. Okay,

00:03:32.650 --> 00:03:34.580
what do I mean by the documents passed into this

00:03:34.580 --> 00:03:38.410
stage? Well, the reason why this is called a pipeline, is

00:03:38.410 --> 00:03:41.850
because each stage receives a set of input documents and

00:03:41.850 --> 00:03:43.640
produces a set of output documents, so we'll talk a

00:03:43.640 --> 00:03:46.530
little bit more about that later. The input documents to

00:03:46.530 --> 00:03:51.240
this stage that uses this sort operator, are the documents output,

00:03:51.240 --> 00:03:55.640
by the stage that uses the group operator. So

00:03:55.640 --> 00:03:58.580
what we end up with, for this stage, is a

00:03:58.580 --> 00:04:01.270
bunch of documents that have a underscore ID field,

00:04:01.270 --> 00:04:05.270
and account field. And this stage of the pipeline, is

00:04:05.270 --> 00:04:08.620
going to sort those documents, based on the value

00:04:08.620 --> 00:04:11.592
of their count field. Okay, now, if you didn't catch

00:04:11.592 --> 00:04:13.970
all that, don't worry about it. Because we are

00:04:13.970 --> 00:04:16.510
going to dive into all the bits and pieces here,

00:04:16.510 --> 00:04:19.279
as we move through this lesson. Let's go ahead and run

00:04:19.279 --> 00:04:22.269
this code, and see what it produces. Now I'm simply going to

00:04:22.269 --> 00:04:25.340
pipe this to the system program less, so that I can

00:04:25.340 --> 00:04:29.670
see the very top of the results that are produced. Okay? The

00:04:29.670 --> 00:04:33.200
results from an aggregation query are always a single document. It

00:04:33.200 --> 00:04:35.930
is the result field of that return document that we're interested

00:04:35.930 --> 00:04:38.890
in. And here we can see that what was outputted, are

00:04:38.890 --> 00:04:41.560
exactly the documents that were passed to the sort stage or our

00:04:41.560 --> 00:04:44.630
aggregation query. They each have an underscore ID field, and

00:04:44.630 --> 00:04:47.080
a count associated with them. And they've been sorted into

00:04:47.080 --> 00:04:50.830
descending order. Now, note that there's only 8. Or rather,

00:04:50.830 --> 00:04:52.725
that the maximum number of tweets for an individual user is

00:04:52.725 --> 00:04:55.730
8, okay? This data set is a snapshot from a

00:04:55.730 --> 00:04:59.080
relatively short period of time. So that's why these counts are

00:04:59.080 --> 00:05:02.600
fairly small. As we move through this lesson, we'll take

00:05:02.600 --> 00:05:06.770
a closer look at the aggregation pipeline, at what it means

00:05:06.770 --> 00:05:10.370
to have stages within that pipeline, and at the various aggregation

00:05:10.370 --> 00:05:14.130
operators that are available to us, as well as other operators,

00:05:14.130 --> 00:05:17.040
such as accumulator operators, that we can use in the group

00:05:17.040 --> 00:05:21.140
stage, and other sorts of operators we use elsewhere in aggregation queries.

