WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.609
ARTURS VITOLS: OK,
my name is Arturs.

00:00:02.609 --> 00:00:03.650
ROSS SMITH: And I'm Ross.

00:00:03.650 --> 00:00:05.165
Good morning.

00:00:05.165 --> 00:00:07.040
ARTURS VITOLS: I'm a
designer at Willowbrite.

00:00:07.040 --> 00:00:08.760
Ross is a programmer.

00:00:08.760 --> 00:00:12.430
And we're going to do a
talk about Dart at 60 FPS.

00:00:12.430 --> 00:00:14.500
Probably most of you
have figured out already

00:00:14.500 --> 00:00:18.170
that this talk is going to be
about games-- game development,

00:00:18.170 --> 00:00:19.950
to be more specific.

00:00:19.950 --> 00:00:24.140
And we're going to talk about
mobile game development.

00:00:26.730 --> 00:00:29.230
A little bit about
ourselves-- we

00:00:29.230 --> 00:00:31.330
have done mobile
game development

00:00:31.330 --> 00:00:33.120
in the past, me and Ross.

00:00:33.120 --> 00:00:35.460
But this is our first
project together.

00:00:35.460 --> 00:00:39.370
So it makes things a
bit more interesting.

00:00:39.370 --> 00:00:44.530
We decided to go
on a little quest.

00:00:44.530 --> 00:00:47.390
For this time, we wanted
to make the game that

00:00:47.390 --> 00:00:49.790
is as performant as possible.

00:00:49.790 --> 00:00:52.600
So we wanted to go on
a quest of performance.

00:00:52.600 --> 00:00:57.940
And to make the
quest interesting,

00:00:57.940 --> 00:01:00.350
you need challenges.

00:01:00.350 --> 00:01:03.750
To make the quest interesting,
you need challenges.

00:01:03.750 --> 00:01:07.490
And so we needed to set out
challenges for ourselves.

00:01:07.490 --> 00:01:11.970
But before we could do
that, the challenges got us.

00:01:11.970 --> 00:01:17.670
A member of our team, very early
on the project, broke his arm.

00:01:17.670 --> 00:01:19.784
And actually, that is
a pretty huge drawback

00:01:19.784 --> 00:01:20.950
because he was a programmer.

00:01:23.680 --> 00:01:28.620
And so we decided we
need to cheer him up.

00:01:28.620 --> 00:01:34.450
In video games you cheer up
a person by giving a power-up

00:01:34.450 --> 00:01:37.810
or giving some health
bars or stuff like that.

00:01:37.810 --> 00:01:39.900
But in real life,
we are not medics.

00:01:39.900 --> 00:01:41.440
We can't help him.

00:01:41.440 --> 00:01:46.190
So we had to figure out
some way to emotionally help

00:01:46.190 --> 00:01:49.860
the guy to feel better and to
help ourselves to feel better.

00:01:49.860 --> 00:01:52.910
So we made simple
get better cards

00:01:52.910 --> 00:01:56.390
or get well cards--
say as you like.

00:01:56.390 --> 00:01:59.860
And that's a very short story,
how our first two characters

00:01:59.860 --> 00:02:02.550
were born for the game.

00:02:02.550 --> 00:02:07.040
So let's go back to the
challenges of performance.

00:02:07.040 --> 00:02:09.580
Let's go back to
the performance.

00:02:09.580 --> 00:02:14.705
So we decided to set out
challenges for ourselves.

00:02:17.720 --> 00:02:20.185
First challenge for
us was the memory.

00:02:23.460 --> 00:02:26.860
A lot of my friends have
Android phones, and most of them

00:02:26.860 --> 00:02:29.790
have low-end Android phones.

00:02:29.790 --> 00:02:32.080
And they all have
the same problem,

00:02:32.080 --> 00:02:36.260
is that they have very low
memory for the phone memory.

00:02:36.260 --> 00:02:38.304
And they can't install
anything on the phone.

00:02:38.304 --> 00:02:40.220
They have to delete
something to install again

00:02:40.220 --> 00:02:42.850
the new app or game.

00:02:42.850 --> 00:02:46.660
So we set a goal that even
though their phone memory is

00:02:46.660 --> 00:02:51.320
full, we still have to squeeze
in our game on their phones.

00:02:51.320 --> 00:02:53.440
So even though they think
they can't install it,

00:02:53.440 --> 00:02:55.080
they still can do it.

00:02:55.080 --> 00:02:57.040
So there's some
more research, we

00:02:57.040 --> 00:03:02.580
decided that our game has to
be less than 20 megabytes.

00:03:02.580 --> 00:03:06.930
The next challenge is
performance for us.

00:03:06.930 --> 00:03:10.990
So here's the
exhibit A, my phone,

00:03:10.990 --> 00:03:14.210
which is Sony Ericsson Xperia.

00:03:14.210 --> 00:03:18.090
And it's a pretty old phone.

00:03:18.090 --> 00:03:20.340
And I never actually
been able-- I've been

00:03:20.340 --> 00:03:21.760
developing games for awhile.

00:03:21.760 --> 00:03:25.050
And I never been able to play
them on my phone because it

00:03:25.050 --> 00:03:28.274
has only a single-core
1 gigahertz CPU.

00:03:28.274 --> 00:03:29.690
And for the first
time, I actually

00:03:29.690 --> 00:03:31.270
wanted to develop
a game that can

00:03:31.270 --> 00:03:35.250
be played either on high-end
devices and on low-end devices.

00:03:35.250 --> 00:03:38.130
So we set ourselves a goal.

00:03:38.130 --> 00:03:40.100
So the game has to
run on single-core 1

00:03:40.100 --> 00:03:48.070
gigahertz CPU as well
as the high-end devices.

00:03:48.070 --> 00:03:50.170
The next challenge was loading.

00:03:50.170 --> 00:03:54.790
We knew that the
loading has to be fast.

00:03:54.790 --> 00:03:56.530
We really didn't know.

00:03:56.530 --> 00:03:59.730
We didn't have any preferences
how fast it should be.

00:03:59.730 --> 00:04:03.500
So we just said
it has to be fast.

00:04:03.500 --> 00:04:06.660
We'll know when we
see it if it's fast.

00:04:06.660 --> 00:04:08.280
The next thing we
wanted to achieve

00:04:08.280 --> 00:04:12.930
was unique look and unique feel.

00:04:12.930 --> 00:04:15.080
We're going to
return to that later.

00:04:15.080 --> 00:04:18.562
So I'll give the stage
to Ross, my friend.

00:04:18.562 --> 00:04:20.310
Yep.

00:04:20.310 --> 00:04:22.430
ROSS SMITH: So as
Arturs has shown you,

00:04:22.430 --> 00:04:26.980
we had kind of some pretty
specific goals for this game

00:04:26.980 --> 00:04:28.710
in terms of performance
and also in terms

00:04:28.710 --> 00:04:30.570
of the design of the game.

00:04:30.570 --> 00:04:33.500
So we know that in order
to reach that goal,

00:04:33.500 --> 00:04:37.360
we were going to have to build
some custom tools for our game.

00:04:37.360 --> 00:04:40.890
And we pretty much had
decided that at the beginning.

00:04:40.890 --> 00:04:44.930
So the next step was to choose
what technology are we going

00:04:44.930 --> 00:04:47.190
to use to build these tools.

00:04:47.190 --> 00:04:50.500
And our first instinct
was, OK, well,

00:04:50.500 --> 00:04:54.900
maybe we're going to use
.NET and the C# language

00:04:54.900 --> 00:04:57.330
that's widely used
for game tools.

00:04:57.330 --> 00:04:59.060
And there's a good
reason for that.

00:04:59.060 --> 00:05:00.880
It's awesome technology.

00:05:00.880 --> 00:05:04.900
But we had this idea that for
mobile games in particular

00:05:04.900 --> 00:05:08.010
that there could be an
even better solution.

00:05:08.010 --> 00:05:13.150
And we thought that that was
Dart and the web platform.

00:05:13.150 --> 00:05:18.480
So I'm going to talk about a few
of the larger challenges we had

00:05:18.480 --> 00:05:21.970
in making our game.

00:05:21.970 --> 00:05:24.330
And I'll tell you about how
Dart and the web platform

00:05:24.330 --> 00:05:29.580
kind of really aligned with our
solutions to those challenges.

00:05:29.580 --> 00:05:34.550
So the first issue was
the issue of graphics.

00:05:34.550 --> 00:05:37.760
Now, a lot of mobile
games today are made

00:05:37.760 --> 00:05:40.770
using raster graphic approach.

00:05:40.770 --> 00:05:44.350
And when you make a game
with that type of graphics,

00:05:44.350 --> 00:05:46.450
you have a lot of textures.

00:05:46.450 --> 00:05:50.770
And these textures will end up
taking up a large percentage

00:05:50.770 --> 00:05:53.540
of your assets for your game.

00:05:53.540 --> 00:05:54.890
They can be really big.

00:05:54.890 --> 00:05:56.980
And then they're
also big once you

00:05:56.980 --> 00:05:59.490
get them loaded into memory.

00:05:59.490 --> 00:06:04.600
And also, there's this issue
of device fragmentation.

00:06:04.600 --> 00:06:07.520
So a lot of different GPU
support different texture

00:06:07.520 --> 00:06:10.970
formats, and they have different
quirks and different bugs

00:06:10.970 --> 00:06:12.230
between them.

00:06:12.230 --> 00:06:14.170
So if you use a lot
of raster graphics,

00:06:14.170 --> 00:06:16.430
a lot of textures
in your game, you're

00:06:16.430 --> 00:06:19.900
going to spend a lot of time
dealing with all those issues.

00:06:19.900 --> 00:06:24.230
So the alternative to that
is to use vector graphics.

00:06:24.230 --> 00:06:29.460
And vector graphics are really
awesome because your assets

00:06:29.460 --> 00:06:31.410
will get a lot smaller
when you switch

00:06:31.410 --> 00:06:33.140
to using vector graphics.

00:06:33.140 --> 00:06:36.750
Because you're now just storing
the data, the instructions,

00:06:36.750 --> 00:06:41.490
to tell the GPU how to do its
job, which is rasterization.

00:06:41.490 --> 00:06:46.810
And as you can see with this
little dog character we have,

00:06:46.810 --> 00:06:48.940
you're going to have
crisp, sharp graphics

00:06:48.940 --> 00:06:50.636
no matter what resolution.

00:06:50.636 --> 00:06:52.260
And this is really
important for mobile

00:06:52.260 --> 00:06:54.460
to be able to have
your game, your app,

00:06:54.460 --> 00:06:57.870
look crisp across all
different devices.

00:06:57.870 --> 00:07:02.800
So we've been using vector
graphics in Dart for our game,

00:07:02.800 --> 00:07:06.150
and we found it to be
a great fit in Dart.

00:07:06.150 --> 00:07:08.180
For example, in
our editor, we're

00:07:08.180 --> 00:07:13.590
able to actually use the DOM
SVG parser to parse SVGs for us

00:07:13.590 --> 00:07:15.520
and import them into our editor.

00:07:15.520 --> 00:07:17.190
So we got that
functionality right out

00:07:17.190 --> 00:07:19.247
of the box with
the web platform,

00:07:19.247 --> 00:07:21.830
and we didn't have to write any
code for that ourselves, which

00:07:21.830 --> 00:07:23.910
was awesome.

00:07:23.910 --> 00:07:27.170
So the next kind of big
challenge for making our game

00:07:27.170 --> 00:07:29.490
is the issue of audio.

00:07:29.490 --> 00:07:32.040
And there's actually a lot
of similarities between audio

00:07:32.040 --> 00:07:35.500
and graphics in that
pre-rendered audio files

00:07:35.500 --> 00:07:38.700
like WAV files, or
even compressed files

00:07:38.700 --> 00:07:43.800
like MP3 or OGG, they'll take up
a lot of space in your assets,

00:07:43.800 --> 00:07:45.610
again, just like textures.

00:07:45.610 --> 00:07:47.520
And again, once you
get them loaded,

00:07:47.520 --> 00:07:49.510
they're going to
take a lot of memory.

00:07:49.510 --> 00:07:52.300
And you're also
going to have, again,

00:07:52.300 --> 00:07:53.940
a lot of device fragmentation.

00:07:53.940 --> 00:07:57.590
Different devices will support
different audio formats.

00:07:57.590 --> 00:08:00.350
They'll have different
native sampling rates.

00:08:00.350 --> 00:08:03.830
And you're going to deal
with a lot of device issues

00:08:03.830 --> 00:08:06.060
again if you go that route.

00:08:06.060 --> 00:08:08.610
So we decided we wanted to have
a similar solution to what we

00:08:08.610 --> 00:08:14.660
had for graphics and render our
audio dynamically at runtime.

00:08:14.660 --> 00:08:18.790
And to do that, we wanted
to use the MIDI protocol.

00:08:18.790 --> 00:08:20.860
So when I first say
MIDI, you probably

00:08:20.860 --> 00:08:23.210
have some idea in your
mind of what that is.

00:08:23.210 --> 00:08:25.080
And it's probably
similar to what

00:08:25.080 --> 00:08:29.120
we had when we first started
thinking we might use it.

00:08:29.120 --> 00:08:30.920
But in reality,
MIDI is a protocol

00:08:30.920 --> 00:08:33.640
for describing musical data.

00:08:33.640 --> 00:08:37.845
And like when we
use vector graphics

00:08:37.845 --> 00:08:39.470
and we're just storing
the instructions

00:08:39.470 --> 00:08:42.070
to tell the GPU how
to draw, with MIDI,

00:08:42.070 --> 00:08:45.280
we're able to just store the
instructions in the data that

00:08:45.280 --> 00:08:48.390
tell the device how to
render the audio at runtime.

00:08:48.390 --> 00:08:51.640
So our assets get a
lot smaller again,

00:08:51.640 --> 00:08:53.970
and we avoid a lot of
that device fragmentation

00:08:53.970 --> 00:08:57.570
because the device is going to
render the audio in a format

00:08:57.570 --> 00:08:59.650
that it can deal with.

00:08:59.650 --> 00:09:03.990
So the Dart and the web
platform really aligned

00:09:03.990 --> 00:09:08.070
with this solution for us
because of the web MIDI

00:09:08.070 --> 00:09:11.610
standard, which is now
available in Chrome.

00:09:11.610 --> 00:09:13.790
And you can access
that from Dart.

00:09:13.790 --> 00:09:17.150
So again, we found
the web platform

00:09:17.150 --> 00:09:22.280
to be really appealing
here for our audio.

00:09:22.280 --> 00:09:25.230
And so the last challenge
I'd like to talk about

00:09:25.230 --> 00:09:27.330
is this issue of simulation.

00:09:27.330 --> 00:09:31.320
And a lot of game
development workflows

00:09:31.320 --> 00:09:33.900
that I've used in
the past have dealt

00:09:33.900 --> 00:09:36.550
with artists and
designers creating

00:09:36.550 --> 00:09:40.080
assets for the game in kind
of some standalone editors

00:09:40.080 --> 00:09:42.950
which will export files,
and then those files

00:09:42.950 --> 00:09:46.090
will typically go through
some build process and create

00:09:46.090 --> 00:09:48.380
a binary package,
which they then

00:09:48.380 --> 00:09:53.010
load into some standalone
desktop emulator for OpenGL ES.

00:09:53.010 --> 00:09:55.830
And then they can see the
results of their change running

00:09:55.830 --> 00:09:56.990
in the game.

00:09:56.990 --> 00:09:58.680
Now, the problem
with that approach

00:09:58.680 --> 00:10:00.560
is that as the number
of assets in your game

00:10:00.560 --> 00:10:04.590
gets larger and larger, there's
time between when an artist

00:10:04.590 --> 00:10:06.730
or designer can make
a change to when

00:10:06.730 --> 00:10:09.610
they can see the effect of that
change running in the game.

00:10:09.610 --> 00:10:11.700
It gets longer and longer.

00:10:11.700 --> 00:10:14.880
So we knew that we wanted
a much tighter edit refresh

00:10:14.880 --> 00:10:19.600
cycle similar to what
web developers have

00:10:19.600 --> 00:10:21.040
when there doing their work.

00:10:21.040 --> 00:10:23.480
So this is where
the web platform

00:10:23.480 --> 00:10:27.570
became attractive to us
again, because it's built

00:10:27.570 --> 00:10:29.710
to do these types of things.

00:10:29.710 --> 00:10:33.660
And WebGL 1.0 is
basically the same thing

00:10:33.660 --> 00:10:38.390
as OpenGL ES 2.0,
which is what you

00:10:38.390 --> 00:10:41.510
want to use probably if you're
making a game for mobile.

00:10:41.510 --> 00:10:46.710
So what we actually did was
develop our game engine in Dart

00:10:46.710 --> 00:10:47.580
first.

00:10:47.580 --> 00:10:50.680
And we were able to
do a lot of iterations

00:10:50.680 --> 00:10:54.370
just in this simulation
environment building our engine

00:10:54.370 --> 00:10:57.680
and get it solid and working
the way we want to it to.

00:10:57.680 --> 00:11:02.280
And then later, port that in a
pretty straightforward manner

00:11:02.280 --> 00:11:06.060
to native mobile platforms.

00:11:06.060 --> 00:11:08.340
So just to show you
one small advantage

00:11:08.340 --> 00:11:10.400
of having this
simulation environment,

00:11:10.400 --> 00:11:12.480
an issue that mobile
game developers

00:11:12.480 --> 00:11:15.400
would be quite familiar
with is this issue

00:11:15.400 --> 00:11:17.900
of losing the graphics context.

00:11:17.900 --> 00:11:20.820
So it can pretty much
happen at any time.

00:11:20.820 --> 00:11:25.230
And you want your game to be
able to react to that event

00:11:25.230 --> 00:11:30.650
and recover without the
user noticing, basically.

00:11:30.650 --> 00:11:35.510
So I'm going to just see if I
can lose the graphics context.

00:11:35.510 --> 00:11:38.400
And wow, you see
that my presentation

00:11:38.400 --> 00:11:40.460
has gone blank here.

00:11:40.460 --> 00:11:43.550
So I'll see if I can restore it.

00:11:43.550 --> 00:11:45.000
Cool.

00:11:45.000 --> 00:11:47.500
So I'm going to
leave full-screen,

00:11:47.500 --> 00:11:51.010
and maybe we can see
what's going on here.

00:11:51.010 --> 00:11:53.610
So actually, our
presentation has been running

00:11:53.610 --> 00:11:57.140
in our simulator here in Dart.

00:11:57.140 --> 00:12:00.780
And you can see behind
it, we have our editor.

00:12:00.780 --> 00:12:03.490
So these two windows
are a Chrome app

00:12:03.490 --> 00:12:05.600
that's written in Dart.

00:12:05.600 --> 00:12:08.610
And probably one of the first
things you might want to know

00:12:08.610 --> 00:12:11.020
is which technologies
or packages we

00:12:11.020 --> 00:12:13.620
used to build this GUI.

00:12:13.620 --> 00:12:18.710
So in the editor
here, I'll show you.

00:12:18.710 --> 00:12:20.470
OK, so one thing we
really love about Dart

00:12:20.470 --> 00:12:22.595
is that it makes it easy
for us to work directly

00:12:22.595 --> 00:12:23.345
with the platform.

00:12:26.319 --> 00:12:28.360
We didn't really want to
use a lot of frameworks.

00:12:28.360 --> 00:12:33.030
And with Dart, we can work
directly with the Dart HTML

00:12:33.030 --> 00:12:36.060
library and be very productive.

00:12:36.060 --> 00:12:37.570
So actually,
everything you see here

00:12:37.570 --> 00:12:40.060
is just written with Dart HTML.

00:12:40.060 --> 00:12:43.300
And in the middle,
it's a WebGL canvas.

00:12:43.300 --> 00:12:46.170
And then the property
grid and the file tree

00:12:46.170 --> 00:12:48.270
are all just custom elements.

00:12:48.270 --> 00:12:50.640
And actually, though the
property grid here and the file

00:12:50.640 --> 00:12:53.960
tree are open source on
GitHub and [? Pub. ?]

00:12:53.960 --> 00:12:57.420
So you can explore the code and
see how we built those, or even

00:12:57.420 --> 00:13:00.410
use them yourself if you like.

00:13:00.410 --> 00:13:02.930
So that's our editor.

00:13:02.930 --> 00:13:04.970
And I'm going to pass
it back to Arturs,

00:13:04.970 --> 00:13:08.440
and he's going to show you a
bit of how we use this tool.

00:13:08.440 --> 00:13:10.730
ARTURS VITOLS: So I'm back.

00:13:10.730 --> 00:13:15.810
So we're going to create a
simple level in our editor.

00:13:15.810 --> 00:13:21.790
So we're going to just grab a
pencil, adjust the view a bit.

00:13:21.790 --> 00:13:25.290
And you can see how
we're drawing a level.

00:13:30.380 --> 00:13:35.010
Wow, it's like-- and I'm
drawing a Bezier curve here.

00:13:35.010 --> 00:13:37.100
So I have enabled
the debug mode.

00:13:39.640 --> 00:13:41.420
And let's adjust some knobs.

00:13:45.420 --> 00:13:49.160
Let's change the
color some here.

00:13:49.160 --> 00:13:54.050
So this would be a practical
terrain for the level.

00:13:54.050 --> 00:13:57.030
So we would need
some spawn point.

00:13:57.030 --> 00:14:01.090
We would define where we
will have a span point.

00:14:01.090 --> 00:14:03.099
For that, that we have items.

00:14:03.099 --> 00:14:04.640
As you can see, I'm
rolling, but it's

00:14:04.640 --> 00:14:06.740
a huge list of items you have.

00:14:06.740 --> 00:14:10.220
And here's a scripted
item called spawn point.

00:14:10.220 --> 00:14:13.790
You can see the script
is attached here.

00:14:13.790 --> 00:14:16.905
You can just double-click
it and put it in the scene.

00:14:16.905 --> 00:14:19.560
Let's place it here.

00:14:19.560 --> 00:14:22.480
So we have a spawn point,
so we need a finish line.

00:14:22.480 --> 00:14:24.320
So we just grab a finish line.

00:14:24.320 --> 00:14:28.450
This is the same
object as scripts.

00:14:28.450 --> 00:14:32.680
And put it up here in the
hill, and just hit Play

00:14:32.680 --> 00:14:36.150
and see what's going on.

00:14:36.150 --> 00:14:37.390
And we have our character.

00:14:37.390 --> 00:14:39.400
The sun is shining.

00:14:39.400 --> 00:14:41.460
I'm going to hit Play.

00:14:41.460 --> 00:14:44.720
And he can jump around, but
the finish line is too high.

00:14:44.720 --> 00:14:46.170
We can't get there.

00:14:46.170 --> 00:14:48.790
So we're going to
use the full power

00:14:48.790 --> 00:14:52.180
of edit [? reverse cycle ?]
in our editor.

00:14:52.180 --> 00:14:57.530
And we're just going to
draw here a small island

00:14:57.530 --> 00:15:01.160
to help us out.

00:15:01.160 --> 00:15:02.793
OK, just need some adjustments.

00:15:09.310 --> 00:15:11.190
I hope it won't be too close.

00:15:11.190 --> 00:15:13.450
I'll just hit Play and
see again what's going on.

00:15:19.340 --> 00:15:23.100
So now we can get higher,
but it's still not enough.

00:15:23.100 --> 00:15:24.720
So we need some tool-- ah.

00:15:24.720 --> 00:15:27.120
It was-- yeah, almost got there.

00:15:27.120 --> 00:15:31.770
So we can add interactive items.

00:15:31.770 --> 00:15:34.830
So let's add this brown object.

00:15:34.830 --> 00:15:37.000
You'll see what
it can do for us.

00:15:37.000 --> 00:15:37.840
Let's add it here.

00:15:37.840 --> 00:15:40.930
I hope I'll get there.

00:15:40.930 --> 00:15:44.310
So I'll just hit Play.

00:15:44.310 --> 00:15:45.645
And let's jump again.

00:15:49.430 --> 00:15:51.390
And yay.

00:15:51.390 --> 00:15:53.270
[APPLAUSE]

00:15:53.270 --> 00:15:55.020
Woo.

00:15:55.020 --> 00:15:57.830
We got to the finish line.

00:15:57.830 --> 00:16:00.270
So now, I'm going to show
you the complete level, how

00:16:00.270 --> 00:16:03.210
it looks in the editor.

00:16:03.210 --> 00:16:05.180
I'm going to load
our [? work ?] file.

00:16:10.230 --> 00:16:15.270
So let's go to the
scene, select level.

00:16:15.270 --> 00:16:17.650
Let's do seven.

00:16:17.650 --> 00:16:19.340
Yes.

00:16:19.340 --> 00:16:23.000
So here, you an see a
complete scene in our editor.

00:16:23.000 --> 00:16:24.670
This is without debug mode.

00:16:24.670 --> 00:16:27.860
If I enable the debug
mode, it looks like this.

00:16:27.860 --> 00:16:29.570
So for you, I'm
going to disable it

00:16:29.570 --> 00:16:33.190
so you can enjoy the
full view of the scene.

00:16:33.190 --> 00:16:35.090
The other about
think about using

00:16:35.090 --> 00:16:40.160
SVG is that you can
dynamically change colors.

00:16:40.160 --> 00:16:44.420
So right now, we have all assets
prepared in purple and blue.

00:16:44.420 --> 00:16:46.660
But let's say we
want a night scene.

00:16:46.660 --> 00:16:49.500
So we just swap
the color palettes,

00:16:49.500 --> 00:16:53.680
and we have a night
here going on.

00:16:53.680 --> 00:16:56.650
So we're going to play a
bit this level to show you

00:16:56.650 --> 00:16:59.224
how it looks from inside.

00:16:59.224 --> 00:17:01.140
We're going to start out
here in the dungeons,

00:17:01.140 --> 00:17:03.491
and we're going to
try to get up here.

00:17:03.491 --> 00:17:05.490
I'm not sure I'm going
to get there because this

00:17:05.490 --> 00:17:06.450
is a very hard level.

00:17:10.240 --> 00:17:12.424
Let's do it full screen.

00:17:12.424 --> 00:17:14.609
Yeah.

00:17:14.609 --> 00:17:16.770
So we're going to refresh.

00:17:16.770 --> 00:17:18.190
OK.

00:17:18.190 --> 00:17:22.119
So let's go switch the cards.

00:17:22.119 --> 00:17:26.600
So for this event, to
celebrate this event,

00:17:26.600 --> 00:17:29.600
we actually added a Dart mobile.

00:17:29.600 --> 00:17:31.180
[APPLAUSE]

00:17:33.380 --> 00:17:37.700
And for a couple of days, it's
will be, for in-game coins--

00:17:37.700 --> 00:17:39.325
you have to collect
coins in the level.

00:17:39.325 --> 00:17:40.866
And for a couple of
days, we're going

00:17:40.866 --> 00:17:42.790
to leave to just 100
coins if anybody wants

00:17:42.790 --> 00:17:44.460
to buy it and play around.

00:17:44.460 --> 00:17:46.790
Later on, it will
be harder to unlock.

00:17:46.790 --> 00:17:49.370
So just unlock it.

00:17:49.370 --> 00:17:50.790
Let's go have some fun.

00:17:50.790 --> 00:17:52.780
We are actually on
the wrong level.

00:17:52.780 --> 00:17:55.600
This is not the
one I showed you.

00:17:55.600 --> 00:17:58.230
So we're going to
use privileges.

00:17:58.230 --> 00:17:59.605
Because this is
developer's mode,

00:17:59.605 --> 00:18:03.270
it actually can go into
levels that are not unlocked.

00:18:03.270 --> 00:18:04.794
So I'm cheating.

00:18:04.794 --> 00:18:06.960
So this is the level I
showed you, the castle scene.

00:18:09.910 --> 00:18:11.444
OK.

00:18:11.444 --> 00:18:13.560
So here, you see the game.

00:18:13.560 --> 00:18:14.530
Ah.

00:18:14.530 --> 00:18:15.030
Oh, boy.

00:18:15.030 --> 00:18:15.770
I can do this.

00:18:15.770 --> 00:18:19.020
I can do this.

00:18:19.020 --> 00:18:19.880
OK.

00:18:19.880 --> 00:18:20.990
Here's one nasty robot.

00:18:20.990 --> 00:18:23.860
OK, this one is-- when
you get on the edge,

00:18:23.860 --> 00:18:25.566
he always gets you.

00:18:25.566 --> 00:18:30.190
You're going to find that out if
you're going to play the game.

00:18:30.190 --> 00:18:33.030
Yeah.

00:18:33.030 --> 00:18:35.480
Yeah, probably
you've seen enough.

00:18:35.480 --> 00:18:38.270
Let's return to
our presentation.

00:18:38.270 --> 00:18:40.450
I'm going to load back
the presentation file now.

00:18:45.060 --> 00:18:48.970
So yeah, this is
presentation file.

00:18:48.970 --> 00:18:50.780
I'm going to hit
Play, second part.

00:18:53.410 --> 00:18:57.200
Full screen, refresh,
second part again.

00:18:57.200 --> 00:19:00.360
So in the beginning, I talked
about performance goals.

00:19:00.360 --> 00:19:02.915
So the question is,
did we reach our goals?

00:19:06.670 --> 00:19:09.800
The first challenge
for us was memory.

00:19:09.800 --> 00:19:13.960
So we wanted the app to
be below 20 megabytes.

00:19:13.960 --> 00:19:20.040
So right now, the game is
somewhere around 13 megabytes.

00:19:20.040 --> 00:19:23.220
When you have installed
it, the actually APK size

00:19:23.220 --> 00:19:25.680
is somewhere around 7 megabytes.

00:19:25.680 --> 00:19:27.700
So we get that challenge.

00:19:27.700 --> 00:19:29.940
The performance
challenge-- the goal

00:19:29.940 --> 00:19:33.540
was to run on my phone, which
has single-core 1 gigahertz

00:19:33.540 --> 00:19:35.040
CPU.

00:19:35.040 --> 00:19:39.260
And actually, we're even running
the game on single core 600

00:19:39.260 --> 00:19:42.055
megahertz CPU, and it runs fine.

00:19:42.055 --> 00:19:44.444
It's playable.

00:19:44.444 --> 00:19:50.660
And the loading time,
we wanted to be fast.

00:19:50.660 --> 00:19:54.770
In the end, we ended up
putting a 2 second delay

00:19:54.770 --> 00:19:56.110
in the splash screen.

00:19:56.110 --> 00:19:59.190
It's the one when you see a
logo when you open the app.

00:19:59.190 --> 00:20:02.727
We needed to put a 2
second the delay in it

00:20:02.727 --> 00:20:04.560
so you could actually
see the splash screen.

00:20:04.560 --> 00:20:06.459
Otherwise, it was just splash.

00:20:06.459 --> 00:20:08.000
It would do what
it's supposed to do.

00:20:08.000 --> 00:20:10.070
It would splash you.

00:20:10.070 --> 00:20:14.530
And we have no loading
time between levels.

00:20:14.530 --> 00:20:20.470
About unique look, so
because we're using SVGs,

00:20:20.470 --> 00:20:25.720
and there's a weird mixture of--
nice mixture with SVGs and 3D.

00:20:25.720 --> 00:20:27.800
As you saw, the carts
were actually in 3D,

00:20:27.800 --> 00:20:31.190
and some other background
objects are in 3D.

00:20:31.190 --> 00:20:35.810
And yeah, because we
use this weird mixture

00:20:35.810 --> 00:20:38.956
and different colors, I kind of
think we achieved unique look.

00:20:38.956 --> 00:20:40.580
But there are no
measurements for that.

00:20:40.580 --> 00:20:42.770
I can't measure that.

00:20:42.770 --> 00:20:46.000
And the unique feel,
for these last two,

00:20:46.000 --> 00:20:47.380
we have no measurements.

00:20:47.380 --> 00:20:52.290
So probably, we have to go
to the Google Play Store

00:20:52.290 --> 00:20:54.440
to find it out.

00:20:54.440 --> 00:20:55.583
Thank you.

00:20:55.583 --> 00:20:57.475
[APPLAUSE]

00:21:03.630 --> 00:21:06.480
MALE SPEAKER 1: Oh my gosh.

00:21:06.480 --> 00:21:08.090
I'm want to play
with your dev tools.

00:21:08.090 --> 00:21:09.530
Can we buy your dev tools?

00:21:09.530 --> 00:21:10.290
Not we, Google.

00:21:10.290 --> 00:21:11.090
I'll get in trouble for that.

00:21:11.090 --> 00:21:11.590
But like--

00:21:11.590 --> 00:21:12.654
ARTURS VITOLS: Dev tools?

00:21:12.654 --> 00:21:14.320
MALE SPEAKER 1: I
want to build a level.

00:21:14.320 --> 00:21:15.930
That looks so much fun.

00:21:15.930 --> 00:21:18.854
ARTURS VITOLS: We can work
some-- it's negotiable.

00:21:18.854 --> 00:21:19.520
It's negotiable.

00:21:19.520 --> 00:21:21.561
MALE SPEAKER 1: Do you
have any feature requests?

00:21:21.561 --> 00:21:25.970
ARTURS VITOLS:
Like, if you-- no.

00:21:25.970 --> 00:21:27.580
MALE SPEAKER 1:
Wasn't that amazing?

00:21:27.580 --> 00:21:28.312
Beautiful.

00:21:28.312 --> 00:21:30.270
We have about two, three
minutes for questions?

00:21:30.270 --> 00:21:32.380
MALE SPEAKER 2: We can do a
couple minutes of questions.

00:21:32.380 --> 00:21:33.240
ARTURS VITOLS: We
have to ask Ross.

00:21:33.240 --> 00:21:33.906
He's programmer.

00:21:33.906 --> 00:21:34.725
I'm just designer.

00:21:37.450 --> 00:21:39.070
MALE SPEAKER 2:
Questions anyone?

00:21:39.070 --> 00:21:41.584
All the way in the back.

00:21:41.584 --> 00:21:43.250
Yes, you, the one
who's looking confused

00:21:43.250 --> 00:21:43.950
if I'm pointing at you.

00:21:43.950 --> 00:21:45.060
I am pointing at you.

00:21:45.060 --> 00:21:45.900
AUDIENCE: You can hear me?

00:21:45.900 --> 00:21:46.780
MALE SPEAKER 1:
Yes, I can hear you.

00:21:46.780 --> 00:21:48.571
MALE SPEAKER 2: We'll
repeat your question.

00:21:48.571 --> 00:21:52.148
AUDIENCE: Yes, in
terms of [INAUDIBLE]

00:21:52.148 --> 00:21:55.320
I'd imagine to Android
and iOS, what were

00:21:55.320 --> 00:21:56.540
your estimates [INAUDIBLE]?

00:22:04.517 --> 00:22:06.600
MALE SPEAKER 2: OK, so
what was your time estimate

00:22:06.600 --> 00:22:09.620
for porting code, from running
in the simulator to running

00:22:09.620 --> 00:22:13.695
in native OpenGL
ES on Android, iOS?

00:22:13.695 --> 00:22:14.687
Did I get that right?

00:22:14.687 --> 00:22:15.270
AUDIENCE: Yep.

00:22:15.270 --> 00:22:17.490
MALE SPEAKER 2: Yes.

00:22:17.490 --> 00:22:25.130
ROSS SMITH: OK, so yeah, our
native engine is in C++ so that

00:22:25.130 --> 00:22:28.390
we can run it on Android
or iOS or other platforms.

00:22:28.390 --> 00:22:33.440
So adding new platforms, once
we have that native engine,

00:22:33.440 --> 00:22:37.510
can be done in one or two
months as an estimate.

00:22:37.510 --> 00:22:39.580
But to build out that
engine the first time,

00:22:39.580 --> 00:22:44.260
we spent about four months
to do the initial port.

00:22:44.260 --> 00:22:47.200
ARTURS VITOLS: With we,
he wants to say he did it.

00:22:47.200 --> 00:22:48.760
He was the only
one working on it.

00:22:51.320 --> 00:22:53.450
ROSS SMITH: But it was
fairly straightforward.

00:22:53.450 --> 00:22:55.190
I mean, things just take time.

00:22:55.190 --> 00:22:59.560
But there were no major
issues that popped up.

00:22:59.560 --> 00:23:04.200
Going from the WebGL
to the OpenGL ES 2.0,

00:23:04.200 --> 00:23:05.500
it was really quite smooth.

00:23:08.790 --> 00:23:10.922
MALE SPEAKER 2: Same person
has another question.

00:23:10.922 --> 00:23:12.297
AUDIENCE: I was
just [INAUDIBLE].

00:23:12.297 --> 00:23:13.374
MALE SPEAKER 2: Oh, OK.

00:23:13.374 --> 00:23:14.370
Cool.

00:23:14.370 --> 00:23:14.670
MALE SPEAKER 1: And
obviously, you guys

00:23:14.670 --> 00:23:16.970
will be around to answer
questions and other things?

00:23:16.970 --> 00:23:18.040
ARTURS VITOLS: Yep.

00:23:18.040 --> 00:23:19.120
MALE SPEAKER 1:
Super exciting stuff.

00:23:19.120 --> 00:23:19.870
Absolutely amazing.

00:23:19.870 --> 00:23:20.600
Thanks for coming out, guys.

00:23:20.600 --> 00:23:21.516
ROSS SMITH: Thank you.

00:23:21.516 --> 00:23:23.517
[APPLAUSE]

