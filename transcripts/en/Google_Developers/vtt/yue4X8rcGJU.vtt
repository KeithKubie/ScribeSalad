WEBVTT
Kind: captions
Language: en

00:02:43.850 --> 00:02:45.140
DANNY HERMES: Hi, everyone.

00:02:45.140 --> 00:02:48.540
Thanks for joining us today
on Google Developers Live.

00:02:48.540 --> 00:02:50.510
We're going to be talking
about App Engine.

00:02:50.510 --> 00:02:51.610
My name's Danny Hermes.

00:02:51.610 --> 00:02:54.000
I'm a developer programs
engineer, and I work on the

00:02:54.000 --> 00:02:56.710
Cloud platform, specifically
on App Engine.

00:02:56.710 --> 00:03:00.190
Joining me today is literally
an expert, one of our Google

00:03:00.190 --> 00:03:02.810
Developer experts, Alex Vagin.

00:03:02.810 --> 00:03:06.120
I'll let him introduce
himself a bit.

00:03:06.120 --> 00:03:07.540
ALEX VAGIN: Hi, guys.

00:03:07.540 --> 00:03:10.100
I'm Alex.

00:03:10.100 --> 00:03:12.920
I'm actually Ukrainian, but
I've been in Italy for the

00:03:12.920 --> 00:03:16.130
past 10 years, and I think
I like it here.

00:03:16.130 --> 00:03:24.230
Anyway, so it looks like I'm a
developer expert, and I love

00:03:24.230 --> 00:03:26.420
working on these edge
technologies.

00:03:26.420 --> 00:03:29.430
So, yeah, that's me.

00:03:29.430 --> 00:03:31.910
DANNY HERMES: Yes, Alex is a
rock star when it comes to

00:03:31.910 --> 00:03:36.160
Golang, when it comes to App
Engine, when it comes to Auth.

00:03:36.160 --> 00:03:39.100
I mean, you name it, Alex has
played around with it.

00:03:39.100 --> 00:03:42.580
It's pretty great working with
him, and it's nice to see

00:03:42.580 --> 00:03:44.500
external developers really
take an interest.

00:03:44.500 --> 00:03:46.970
It makes my job that
much better.

00:03:46.970 --> 00:03:50.280
So why are Alex and I here
to talk to you today?

00:03:50.280 --> 00:03:55.830
So Alex took on a pretty large
experiment that ended up

00:03:55.830 --> 00:03:58.360
turning out something
really awesome.

00:03:58.360 --> 00:04:01.070
And that experiment was getting
Cloud Endpoints

00:04:01.070 --> 00:04:03.050
working on Go and PHP.

00:04:03.050 --> 00:04:08.490
So without further ado, let me
jump in and start the first of

00:04:08.490 --> 00:04:13.210
three demos, the first two
of which will start

00:04:13.210 --> 00:04:14.170
right at the beginning.

00:04:14.170 --> 00:04:15.420
So--

00:04:15.420 --> 00:04:46.750
[AUDIO OUT]

00:04:46.750 --> 00:04:48.105
DANNY HERMES: --really fast
because I'm actually running

00:04:48.105 --> 00:04:50.990
this locally, and I win.

00:04:50.990 --> 00:04:52.990
If we refresh again,
we get signed it

00:04:52.990 --> 00:04:55.580
again, we see my win.

00:04:55.580 --> 00:04:57.890
And so this is tic-tac-toe.

00:04:57.890 --> 00:05:01.900
I will dispel the mystery.

00:05:01.900 --> 00:05:03.470
This is the Python runtime.

00:05:03.470 --> 00:05:06.510
So this is what the tic-tac-toe
app looks like.

00:05:06.510 --> 00:05:09.250
It's making requests in
the background to the

00:05:09.250 --> 00:05:12.580
API, and it's not--

00:05:12.580 --> 00:05:15.910
it's asynchronously loading
the data, and just every

00:05:15.910 --> 00:05:17.830
single time we refresh,
we start out with

00:05:17.830 --> 00:05:19.050
a single web page.

00:05:19.050 --> 00:05:21.035
You need to sign in, and
we're using actual--

00:05:21.035 --> 00:06:13.630
[AUDIO OUT]

00:06:13.630 --> 00:06:17.610
DANNY HERMES: --harder to
lose than it is to win.

00:06:17.610 --> 00:06:19.740
Sorry, there's a bit of a
JavaScript bug that makes the

00:06:19.740 --> 00:06:21.910
score not reload
when it should.

00:06:21.910 --> 00:06:26.380
So I have the most recent
score loading after the

00:06:26.380 --> 00:06:27.190
current score.

00:06:27.190 --> 00:06:31.080
Anyhow, so Alex, what is the
difference between this

00:06:31.080 --> 00:06:36.030
tic-tac-toe and the last
tic-tac-toe that we saw?

00:06:36.030 --> 00:06:36.335
ALEX VAGIN: Right.

00:06:36.335 --> 00:06:41.050
So you guys, you can see that
visually there's basically no

00:06:41.050 --> 00:06:41.760
difference.

00:06:41.760 --> 00:06:46.900
If you took the JavaScript CSS
and the images from the Python

00:06:46.900 --> 00:06:49.330
version, you took it and you
copied it somewhere.

00:06:49.330 --> 00:06:54.940
But then instead of writing your
back end in Python, you

00:06:54.940 --> 00:06:56.780
write it in Go.

00:06:56.780 --> 00:07:02.440
So you create your back end,
your Cloud Endpoints, in

00:07:02.440 --> 00:07:05.580
writing Go.

00:07:05.580 --> 00:07:09.830
So what we did, we swapped back
ends, and we left the

00:07:09.830 --> 00:07:13.470
client side as it is,
and it just works.

00:07:13.470 --> 00:07:14.600
DANNY HERMES: Yes.

00:07:14.600 --> 00:07:18.530
This is the beauty of Cloud
Endpoints and, more generally,

00:07:18.530 --> 00:07:20.610
Discovery-based APIs.

00:07:20.610 --> 00:07:24.850
But specifically with Cloud
Endpoints, since the surface

00:07:24.850 --> 00:07:28.330
area of the API that gets
consumed by an application--

00:07:28.330 --> 00:07:30.700
which is a Discovery-based
API--

00:07:30.700 --> 00:07:32.740
since it looks exactly
the same, we have

00:07:32.740 --> 00:07:34.140
this standard format.

00:07:34.140 --> 00:07:36.540
Like Alex said, we can actually
swap out the back end

00:07:36.540 --> 00:07:39.530
entirely and not change
the front end at all.

00:07:39.530 --> 00:07:43.800
And it actually works perfectly
with the Google API

00:07:43.800 --> 00:07:44.660
client libraries.

00:07:44.660 --> 00:07:48.200
Here we're using a GAPI, or
Google API JavaScript client.

00:07:48.200 --> 00:07:52.100
But you can use many of our
client libraries in many

00:07:52.100 --> 00:07:53.170
different environments.

00:07:53.170 --> 00:07:55.170
So--

00:07:55.170 --> 00:07:56.420
are we live?

00:07:58.200 --> 00:07:58.880
All righty.

00:07:58.880 --> 00:08:00.220
Sorry about that.

00:08:00.220 --> 00:08:01.680
Some technical difficulties
here.

00:08:01.680 --> 00:08:06.820
Our live streamer conked out
for a bit, but we're back.

00:08:06.820 --> 00:08:11.660
So as I was saying, our client
libraries, as well as the

00:08:11.660 --> 00:08:14.930
standard Discovery-based
interface for an API, allows

00:08:14.930 --> 00:08:18.290
us to interact with it without
changing the front end at all,

00:08:18.290 --> 00:08:20.370
but completely having a
brand new back end.

00:08:20.370 --> 00:08:24.820
So Alex is going to talk about
how we made this happen, the

00:08:24.820 --> 00:08:28.140
actual code that he wrote to
make this library work.

00:08:28.140 --> 00:08:31.460
But before that, I want to give
a general idea of why

00:08:31.460 --> 00:08:35.659
this is possible from an
overarching App Engine side.

00:08:35.659 --> 00:08:39.440
So for those who are familiar,
and I don't expect many will

00:08:39.440 --> 00:08:42.080
be, just because if it's
a very low-level thing.

00:08:42.080 --> 00:08:45.190
But there are a fair amount of
services within App Engine,

00:08:45.190 --> 00:08:46.760
which make RPCs--

00:08:46.760 --> 00:08:49.550
Remote Procedure Calls--

00:08:49.550 --> 00:08:55.150
with a provided method name
and some standard input.

00:08:55.150 --> 00:08:58.940
And it sends a proto buff
below the runtime to a

00:08:58.940 --> 00:09:00.320
lower-level service.

00:09:00.320 --> 00:09:03.480
So, for example, the OAuth API,
if you want to get the

00:09:03.480 --> 00:09:06.810
OAuth current user, the library
code really just wraps

00:09:06.810 --> 00:09:10.080
an RPC and is able to parse
the proto buff that it

00:09:10.080 --> 00:09:14.110
receives back from the RPC into
something usable, right?

00:09:14.110 --> 00:09:18.190
And so for things like this, as
we get new runtimes, we're

00:09:18.190 --> 00:09:22.860
able to actually just simply
write this wrapper and the

00:09:22.860 --> 00:09:24.740
hard work is already done.

00:09:24.740 --> 00:09:28.450
And so the analogy here for
Cloud Endpoints is that this

00:09:28.450 --> 00:09:29.720
was also true.

00:09:29.720 --> 00:09:33.590
So for people familiar with
Cloud Endpoints, either from

00:09:33.590 --> 00:09:37.840
the Java side or the Python
side, what would happen is you

00:09:37.840 --> 00:09:41.470
would put a path in your
handlers for /_ah--

00:09:41.470 --> 00:09:46.120
--thing is a special JSON
configuration file, which

00:09:46.120 --> 00:09:51.130
allows Google's API
infrastructure to actually

00:09:51.130 --> 00:09:54.340
determine what your back
end looks like.

00:09:54.340 --> 00:09:58.480
And so in understanding what
your back end looks like, it's

00:09:58.480 --> 00:10:01.310
actually able to figure out how
it needs to send a request

00:10:01.310 --> 00:10:04.230
from the front end, which is
things coming through Google's

00:10:04.230 --> 00:10:07.110
API infrastructure, to your
back end, your SPI.

00:10:07.110 --> 00:10:10.700
And so, for example, for
tic-tac-toe, if our back end

00:10:10.700 --> 00:10:14.510
was called tic-tac-toe API,
and we had a method called

00:10:14.510 --> 00:10:18.610
"get score," then we would
let it know that

00:10:18.610 --> 00:10:19.860
tic-tac-toe.scores.get--

00:10:23.350 --> 00:10:25.890
this thing we've seen in the
APIs Explorer before--

00:10:25.890 --> 00:10:27.860
maps to the path
_ah/spi/tictacto

00:10:27.860 --> 00:10:29.110
eapi.boardgetmove.

00:10:33.790 --> 00:10:37.610
And really, a combination of
this routing serving these

00:10:37.610 --> 00:10:41.930
SPIs and putting it in this
config is all that needs to be

00:10:41.930 --> 00:10:44.170
done to actually
make this work.

00:10:44.170 --> 00:10:47.830
So this is sort of the same
thing as the RPCs in that all

00:10:47.830 --> 00:10:49.410
the infrastructure needed
to make this

00:10:49.410 --> 00:10:51.390
work is already there.

00:10:51.390 --> 00:10:54.610
It's just a matter of having
a library provided for it.

00:10:54.610 --> 00:10:58.300
And so I'm not going to get into
the details too much of

00:10:58.300 --> 00:11:01.260
what this API configuration
file looks like.

00:11:01.260 --> 00:11:04.860
But this is sort of, in addition
to the SPI routing,

00:11:04.860 --> 00:11:06.990
all that needs to be done.

00:11:06.990 --> 00:11:12.520
And after we go into some good
details about what Alex has

00:11:12.520 --> 00:11:16.060
done, I'm going to demo
a very, very--

00:11:16.060 --> 00:11:17.440
ALEX VAGIN: --input
and output.

00:11:17.440 --> 00:11:21.310
And using Reflect, we go through
each field in your

00:11:21.310 --> 00:11:30.630
structures, and we kind of
disassemble your struts, and

00:11:30.630 --> 00:11:33.830
that's where we get the
information sufficient to

00:11:33.830 --> 00:11:38.220
generate the API config, which
is then taken by the API

00:11:38.220 --> 00:11:38.810
infrastructure.

00:11:38.810 --> 00:11:43.720
And then it generates a
Discovery document.

00:11:43.720 --> 00:11:50.250
And what you see on the screen
is just a small piece of the

00:11:50.250 --> 00:11:56.380
code where it looks at
the type of field.

00:11:56.380 --> 00:11:59.160
And it sort of guesses--

00:11:59.160 --> 00:12:09.360
not a guess, but it recognizes
which type of the field it is.

00:12:09.360 --> 00:12:17.705
And the field types are strictly
defined by the API

00:12:17.705 --> 00:12:20.200
configs and Discovery
document.

00:12:20.200 --> 00:12:22.670
You probably saw it on
developers.google.com.

00:12:25.220 --> 00:12:28.570
DANNY HERMES: And so here, for
example, we have essentially

00:12:28.570 --> 00:12:31.530
on the left are the
native JSON types.

00:12:31.530 --> 00:12:35.200
And on the right are these
actual native types, which are

00:12:35.200 --> 00:12:38.080
supported in places like Go,
but aren't necessarily

00:12:38.080 --> 00:12:39.770
supported in JavaScript,
right?

00:12:39.770 --> 00:12:43.360
So if we have int64, the max
precision of a JavaScript

00:12:43.360 --> 00:12:45.110
integer is 2 to the 53.

00:12:45.110 --> 00:12:47.770
So we actually have to have
this data as a string to

00:12:47.770 --> 00:12:52.190
actually be held in JSON and
not lose precision, right?

00:12:52.190 --> 00:12:54.617
Do you want me to pop up to
another part of API config, or

00:12:54.617 --> 00:12:59.455
do you want me to go over
to the example, Alex?

00:12:59.455 --> 00:13:00.680
ALEX VAGIN: I don't
know how much--

00:13:00.680 --> 00:13:02.340
maybe we have too little time.

00:13:02.340 --> 00:13:02.760
DANNY HERMES: OK.

00:13:02.760 --> 00:13:04.020
ALEX VAGIN: Maybe
we should go--

00:13:04.020 --> 00:13:04.345
DANNY HERMES: Cool.

00:13:04.345 --> 00:13:05.280
ALEX VAGIN: --to the example.

00:13:05.280 --> 00:13:06.230
DANNY HERMES: All right.

00:13:06.230 --> 00:13:06.900
So here we are--

00:13:06.900 --> 00:13:10.520
ALEX VAGIN: Because you know, I
mean, since it's open source

00:13:10.520 --> 00:13:14.850
[INAUDIBLE], everybody can
go to GitHub and see

00:13:14.850 --> 00:13:15.780
what how it's done.

00:13:15.780 --> 00:13:17.030
DANNY HERMES: Sure.

00:13:18.870 --> 00:13:20.520
ALEX VAGIN: So, right.

00:13:20.520 --> 00:13:26.800
And besides the types and stuff
like that, there are

00:13:26.800 --> 00:13:31.120
also things like you want to
make some fields required or

00:13:31.120 --> 00:13:37.080
you want to define a default
value, all the stuff that you

00:13:37.080 --> 00:13:42.320
could use that Discovery
document supports.

00:13:42.320 --> 00:13:46.120
So we added this--

00:13:46.120 --> 00:13:50.640
if you're familiar with JSON
tag, where you specify field

00:13:50.640 --> 00:13:55.540
name and type and then a string
that basically defines

00:13:55.540 --> 00:13:58.180
how your JSON is going
to look like.

00:13:58.180 --> 00:14:02.090
So what we did was we created
an end tag called Endpoints,

00:14:02.090 --> 00:14:07.350
where you can specify all sorts
of things related to

00:14:07.350 --> 00:14:10.050
Discovery document.

00:14:10.050 --> 00:14:12.400
Currently, there are
just four but--

00:14:12.400 --> 00:14:13.900
I think now actually
there are five.

00:14:13.900 --> 00:14:14.330
DANNY HERMES: Five, yeah.

00:14:14.330 --> 00:14:15.990
ALEX VAGIN: But I think
there are going to

00:14:15.990 --> 00:14:19.780
be more in the future.

00:14:19.780 --> 00:14:21.950
DANNY HERMES: Yep.

00:14:21.950 --> 00:14:24.760
ALEX VAGIN: So right now,
you can define--

00:14:24.760 --> 00:14:30.050
you can say that I want this
field to make required, or I

00:14:30.050 --> 00:14:35.150
want to define default value,
and minimum and maximum, and

00:14:35.150 --> 00:14:36.930
you can also define
description.

00:14:36.930 --> 00:14:40.880
And this information is going to
be seen by your JavaScript

00:14:40.880 --> 00:14:47.920
or any other client, so that
they can understand what kind

00:14:47.920 --> 00:14:53.140
of data and format your back
end expects on an input.

00:14:53.140 --> 00:14:55.280
DANNY HERMES: Yep.

00:14:55.280 --> 00:14:57.015
Cool.

00:14:57.015 --> 00:15:00.530
So do you want me to bop
over to the next?

00:15:00.530 --> 00:15:01.150
See it used?

00:15:01.150 --> 00:15:02.586
ALEX VAGIN: Yeah, OK.

00:15:02.586 --> 00:15:04.250
DANNY HERMES: Cool.

00:15:04.250 --> 00:15:04.900
ALEX VAGIN: OK, yeah.

00:15:04.900 --> 00:15:09.720
So this is how you can
get started with

00:15:09.720 --> 00:15:12.610
this Endpoints package.

00:15:12.610 --> 00:15:15.080
What you see is greeting
this struct type.

00:15:17.810 --> 00:15:22.740
Oh, by the way, this is a simple
example from guestbook.

00:15:22.740 --> 00:15:25.350
If you go to
developers.google.com and

00:15:25.350 --> 00:15:30.100
documents on Google Runtime,
you will see almost exactly

00:15:30.100 --> 00:15:30.660
the same thing.

00:15:30.660 --> 00:15:31.420
DANNY HERMES: Sure.

00:15:31.420 --> 00:15:34.910
ALEX VAGIN: So this is a great
thing, and this is sort of an

00:15:34.910 --> 00:15:40.000
object that will be visible
as a guestbook messaging

00:15:40.000 --> 00:15:43.250
greeting, which has
four fails.

00:15:43.250 --> 00:15:47.105
And then there's another type,
a greetings list, which is

00:15:47.105 --> 00:15:48.355
also in this chart.

00:15:53.440 --> 00:15:56.150
Basically what it defines
is a list of greetings.

00:15:56.150 --> 00:16:01.790
And it is used when we want to
fetch, want to get a list of

00:16:01.790 --> 00:16:06.210
greetings from our guestbook
from the back end.

00:16:06.210 --> 00:16:06.650
DANNY HERMES: Right.

00:16:06.650 --> 00:16:08.341
For queries.

00:16:08.341 --> 00:16:09.840
ALEX VAGIN: For queries,
right.

00:16:09.840 --> 00:16:14.486
And the third one is greetings
list request.

00:16:17.720 --> 00:16:22.630
This struct is not visible,
but we use it to define

00:16:22.630 --> 00:16:31.590
parameters that we can expect
on our back end input.

00:16:31.590 --> 00:16:35.220
And in this case, it's just
the limit that indicates--

00:16:35.220 --> 00:16:39.940
a client can indicate how many
items that the client wants to

00:16:39.940 --> 00:16:41.380
get from the guestbook.

00:16:41.380 --> 00:16:42.900
DANNY HERMES: Sure.

00:16:42.900 --> 00:16:48.260
ALEX VAGIN: So those were the
structure and format.

00:16:48.260 --> 00:16:52.570
And the second part is, what
we actually defined, we'll

00:16:52.570 --> 00:16:55.290
write our back end methods.

00:16:55.290 --> 00:17:01.710
And as you can see, there's
only one list method that

00:17:01.710 --> 00:17:07.030
fetches guestbook messages
from Datastore.

00:17:07.030 --> 00:17:13.930
And then let me see
what it does.

00:17:13.930 --> 00:17:16.630
All right, so it doesn't
do really much.

00:17:16.630 --> 00:17:18.990
It just fetches the entities
from Datastore

00:17:18.990 --> 00:17:20.160
end, and that's it.

00:17:20.160 --> 00:17:23.020
And it responds with, at
the end, return null.

00:17:23.020 --> 00:17:24.770
That means no error.

00:17:24.770 --> 00:17:29.310
And so it finally will get
a successful response.

00:17:29.310 --> 00:17:34.140
And so basically this is just
a simple Go method, right?

00:17:34.140 --> 00:17:37.440
There's nothing special
that you need to do.

00:17:37.440 --> 00:17:39.860
And oh, yeah, and this is--

00:17:39.860 --> 00:17:43.510
the last part is kind
of a little special.

00:17:43.510 --> 00:17:48.020
This is where you hook your--

00:17:48.020 --> 00:17:52.030
so before this part, if you see
that there was literally

00:17:52.030 --> 00:17:54.050
nothing about Endpoints,
right?

00:17:54.050 --> 00:18:02.360
And this one is the part where
you make your service methods

00:18:02.360 --> 00:18:02.825
discoverable.

00:18:02.825 --> 00:18:10.670
And this is where actually
the Endpoints generates--

00:18:10.670 --> 00:18:14.280
this is where we hook your
service methods with the

00:18:14.280 --> 00:18:15.480
Endpoints package.

00:18:15.480 --> 00:18:21.030
So at Endpoints, it then knows
how to generate API configs.

00:18:21.030 --> 00:18:22.270
DANNY HERMES: Exactly.

00:18:22.270 --> 00:18:25.170
It can take the service and
figure out what the structs

00:18:25.170 --> 00:18:28.720
look like, what the methods look
like, and actually fill

00:18:28.720 --> 00:18:32.290
in this JSON API configuration
for the back end, so it can

00:18:32.290 --> 00:18:34.030
tell Google's API
infrastructure

00:18:34.030 --> 00:18:35.090
what it looks like.

00:18:35.090 --> 00:18:35.970
Back to--

00:18:35.970 --> 00:18:37.810
sorry.

00:18:37.810 --> 00:18:38.600
ALEX VAGIN: Right.

00:18:38.600 --> 00:18:42.690
And there's one last piece that
actually I forgot to do

00:18:42.690 --> 00:18:45.690
when I first deployed my app,
and this is where Danny

00:18:45.690 --> 00:18:47.470
actually helped me.

00:18:47.470 --> 00:18:49.800
And I felt so stupid because
I forgot to add

00:18:49.800 --> 00:18:54.370
the IH SPI URL mapping.

00:18:54.370 --> 00:18:56.660
This is what Danny was
talking about before.

00:18:59.350 --> 00:19:02.500
And in this case, we
map it to a special

00:19:02.500 --> 00:19:04.020
script called Go App.

00:19:04.020 --> 00:19:10.445
This is because obviously how Go
Apps are run on App Engine.

00:19:10.445 --> 00:19:16.280
And so you should go to
our app, our handler.

00:19:16.280 --> 00:19:21.910
And what it will do actually is
it will go to the Endpoints

00:19:21.910 --> 00:19:26.820
handler, a special handler, this
back end service, which

00:19:26.820 --> 00:19:29.910
knows how to generate
API config.

00:19:29.910 --> 00:19:31.700
And this is what
the [INAUDIBLE]

00:19:31.700 --> 00:19:35.160
API infrastructure calls
to get the API configs.

00:19:35.160 --> 00:19:37.640
And this is how the
circle is closed.

00:19:37.640 --> 00:19:40.440
DANNY HERMES: Yes, exactly.

00:19:40.440 --> 00:19:44.200
So in addition to what you just
saw, there's a few other

00:19:44.200 --> 00:19:47.820
things already on Alex's wiki--
super duper helpful.

00:19:47.820 --> 00:19:50.815
There's the typical
Go gofor docs that

00:19:50.815 --> 00:19:52.220
you're used to seeing.

00:19:52.220 --> 00:19:54.020
There's a Getting Started, which
we just saw and some

00:19:54.020 --> 00:19:57.170
tips, then particular
documentation about things

00:19:57.170 --> 00:20:00.600
like field tags and
things like that.

00:20:00.600 --> 00:20:04.380
One thing Alex and I have been
working together on over the

00:20:04.380 --> 00:20:08.360
last two weeks or so is making
Auth work in Endpoints.

00:20:08.360 --> 00:20:11.510
Now, that is a whole other GDL
on its own, just to talk about

00:20:11.510 --> 00:20:13.690
Auth and Endpoints.

00:20:13.690 --> 00:20:17.810
But we wanted to briefly touch
on what is already supported

00:20:17.810 --> 00:20:18.740
in this library.

00:20:18.740 --> 00:20:23.550
So Alex, do you want to
explain some of that?

00:20:23.550 --> 00:20:24.080
ALEX VAGIN: No, I think--

00:20:24.080 --> 00:20:26.110
I mean, I think it's
your place.

00:20:26.110 --> 00:20:31.900
DANNY HERMES: OK, so I've just
got a few pages here to talk

00:20:31.900 --> 00:20:32.960
about Auth for GitHub.

00:20:32.960 --> 00:20:36.530
So the first thing is, we have
a current user object, and we

00:20:36.530 --> 00:20:38.305
actually have a custom
Endpoints context.

00:20:38.305 --> 00:20:41.180
So you're used to constructing
an App Engine context from

00:20:41.180 --> 00:20:41.770
your request.

00:20:41.770 --> 00:20:44.860
We actually have a custom
Endpoints context to do the

00:20:44.860 --> 00:20:48.280
unique things which Endpoints
needs for Auth, right?

00:20:48.280 --> 00:20:51.830
And so this current user method
takes one of those

00:20:51.830 --> 00:20:56.440
contexts, a list of potential
scopes for the tokens being

00:20:56.440 --> 00:20:59.370
passed in and, of course, lists
of acceptable audiences

00:20:59.370 --> 00:21:00.780
and client IDs.

00:21:00.780 --> 00:21:03.830
And so the first thing it does,
it will actually check

00:21:03.830 --> 00:21:05.670
for an ID token user.

00:21:05.670 --> 00:21:08.480
And if there's a valid ID token
and a valid user for

00:21:08.480 --> 00:21:11.560
that ID token, then, of course,
we'll get it back.

00:21:11.560 --> 00:21:15.750
And if that fails, it will fall
back to checking for a

00:21:15.750 --> 00:21:16.930
bearer token user.

00:21:16.930 --> 00:21:19.270
These are the standard things
that you're used to seeing,

00:21:19.270 --> 00:21:22.130
typical OAuth 2.0
access tokens.

00:21:22.130 --> 00:21:26.920
But ID tokens are something
which are sort of used not

00:21:26.920 --> 00:21:30.040
exclusively in Android, but the
crypto in Android makes it

00:21:30.040 --> 00:21:31.900
really easy to mint
these tokens.

00:21:31.900 --> 00:21:34.820
And actually using an ID token
is nice because it has some

00:21:34.820 --> 00:21:39.080
extra data in it, which
you can get just from

00:21:39.080 --> 00:21:42.190
deserializing some
base 64 segments.

00:21:42.190 --> 00:21:44.270
And you get JSON out, and
then you can find--

00:21:44.270 --> 00:21:44.540
ALEX VAGIN: Danny?

00:21:44.540 --> 00:21:46.310
DANNY HERMES: Yeah?

00:21:46.310 --> 00:21:50.700
ALEX VAGIN: So basically, when
you use this ID token,

00:21:50.700 --> 00:21:57.280
sometimes you can spare a round
trip too, to do one less

00:21:57.280 --> 00:21:58.640
HTTP request, right?

00:21:58.640 --> 00:21:59.670
DANNY HERMES: Right.

00:21:59.670 --> 00:22:04.660
Yeah, so the thing about ID
tokens is they're JSON web

00:22:04.660 --> 00:22:07.020
tokens, or JWTs, and the
third segment is signed

00:22:07.020 --> 00:22:08.130
cryptographically.

00:22:08.130 --> 00:22:11.960
And you can actually verify it
server side without making any

00:22:11.960 --> 00:22:15.330
round trips to make sure the
token is valid or given from

00:22:15.330 --> 00:22:19.560
Google as long as you have the
public cert corresponding to

00:22:19.560 --> 00:22:22.060
the private cert that
Google used to

00:22:22.060 --> 00:22:23.610
actually sign the token.

00:22:23.610 --> 00:22:25.500
And we actually do
this in our code.

00:22:25.500 --> 00:22:29.960
And so the thing Alex was
saying, which I will bounce

00:22:29.960 --> 00:22:34.200
over to now, is that in the dev
app server case, if we're

00:22:34.200 --> 00:22:36.700
not in production, if we're in
the dev app server, we have a

00:22:36.700 --> 00:22:41.970
special context factory made
just for the essentially

00:22:41.970 --> 00:22:44.480
offline case, or the local
host case, right?

00:22:44.480 --> 00:22:48.010
And what this special context
factory does, it will actually

00:22:48.010 --> 00:22:49.190
fetch the token info.

00:22:49.190 --> 00:22:51.500
This is the round trip Alex
was talking about.

00:22:51.500 --> 00:22:55.280
It will hit the token info
API, which is another

00:22:55.280 --> 00:22:57.360
Discovery-based Google API.

00:22:57.360 --> 00:23:00.360
And it will say, here's the
access token I have.

00:23:00.360 --> 00:23:01.540
Can you tell me more about it?

00:23:01.540 --> 00:23:05.240
And so if we had ID tokens on
the development server, we

00:23:05.240 --> 00:23:07.940
wouldn't actually have to make
this round trip to get the

00:23:07.940 --> 00:23:09.100
token info.

00:23:09.100 --> 00:23:10.620
But it's actually possible
as well.

00:23:10.620 --> 00:23:14.230
So we have full support for
tokens, both in production and

00:23:14.230 --> 00:23:15.520
in the development app server.

00:23:15.520 --> 00:23:16.890
So you can--

00:23:16.890 --> 00:23:20.060
like I did there on local hosts
with your [INAUDIBLE]

00:23:20.060 --> 00:23:20.940
testing [INAUDIBLE]

00:23:20.940 --> 00:23:24.370
account, you can actually find
out if it's a valid user, if

00:23:24.370 --> 00:23:27.330
the user's signed in, if the
token's good, everything you'd

00:23:27.330 --> 00:23:28.280
want to be able to do.

00:23:28.280 --> 00:23:31.840
It just works out of the box
with Alex's awesome Go

00:23:31.840 --> 00:23:34.310
Endpoints library.

00:23:34.310 --> 00:23:37.410
So that's about all we wanted
to say about the library.

00:23:37.410 --> 00:23:39.160
If you have more questions,
please throw them in the

00:23:39.160 --> 00:23:42.330
Moderator queue for this event,
and we're happy to

00:23:42.330 --> 00:23:42.910
answer them.

00:23:42.910 --> 00:23:47.370
I want to end this with a demo
of PHP and then also show you

00:23:47.370 --> 00:23:49.440
what the API config looks
like for this.

00:23:49.440 --> 00:23:52.950
So what I have here
on my screen is

00:23:52.950 --> 00:23:55.400
the Google APIs Explorer.

00:23:55.400 --> 00:23:58.430
And this Explorer is something
that you're used interacting

00:23:58.430 --> 00:23:59.550
with for Google APIs.

00:23:59.550 --> 00:24:01.620
But it essentially says,
here's a list of

00:24:01.620 --> 00:24:03.060
Discovery-based APIs.

00:24:03.060 --> 00:24:07.210
We only have one running in
this PHP application.

00:24:07.210 --> 00:24:09.360
And here's all the lists of
methods after we go in, and I

00:24:09.360 --> 00:24:09.950
only have one.

00:24:09.950 --> 00:24:14.190
Now, the name of this method
makes it clear what it does.

00:24:14.190 --> 00:24:15.350
It echoes a model.

00:24:15.350 --> 00:24:19.490
It really doesn't do anything
other than return the request

00:24:19.490 --> 00:24:20.340
that it got.

00:24:20.340 --> 00:24:25.440
The FPI handler corresponding to
myapi.mymodel.echo receives

00:24:25.440 --> 00:24:28.400
a bit of JSON with the needed
fields, and it just

00:24:28.400 --> 00:24:29.610
sends that JSON back.

00:24:29.610 --> 00:24:31.190
So it's really not doing
a whole lot.

00:24:31.190 --> 00:24:34.730
But the point is we're able to
spin up a Discovery-based API

00:24:34.730 --> 00:24:38.270
in all four runtimes because
the underlying machinery is

00:24:38.270 --> 00:24:39.930
already there.

00:24:39.930 --> 00:24:43.670
So if we go into this method,
we see, wonderfully provided

00:24:43.670 --> 00:24:47.680
due to the Discovery doc, the
APIs Explorer actually knows

00:24:47.680 --> 00:24:48.790
what the fields are.

00:24:48.790 --> 00:24:51.120
So we have my_int and
a my_str field.

00:24:51.120 --> 00:24:52.960
So for my_int, I'll pass--

00:24:52.960 --> 00:24:55.670
actually, let's pass 42, the
answer to everything.

00:24:55.670 --> 00:25:01.690
And my_str, thanks Alex, because
this was great doing

00:25:01.690 --> 00:25:03.310
this GDL with him.

00:25:03.310 --> 00:25:06.710
And so if we execute this
request, we actually get back

00:25:06.710 --> 00:25:09.000
an echo of what we sent.

00:25:09.000 --> 00:25:14.210
So I want to end this with
showing you how this works.

00:25:14.210 --> 00:25:19.180
So I've got the terminal open.

00:25:19.180 --> 00:25:21.270
I want to full screen
this bad boy.

00:25:21.270 --> 00:25:27.400
OK, so I've got this application
running.

00:25:27.400 --> 00:25:29.510
And it's really only
three files.

00:25:29.510 --> 00:25:31.360
I have a fourth file in
just for our sake.

00:25:31.360 --> 00:25:35.620
But we have app.yaml, we have
helloworld.php, and we have

00:25:35.620 --> 00:25:37.110
api_config.json.

00:25:37.110 --> 00:25:40.060
So the first thing, I'll just
show you helloworld.php.

00:25:40.060 --> 00:25:45.320
It's really only
echoing a post.

00:25:45.320 --> 00:25:48.590
It sets the content type to JSON
because that's what it's

00:25:48.590 --> 00:25:51.750
sending back, and it sends back
the raw post data as it

00:25:51.750 --> 00:25:53.340
got it, really an echo.

00:25:53.340 --> 00:25:55.580
So the second thing
is app.yaml.

00:25:55.580 --> 00:25:59.790
So what happens in app.yaml,
we're first statically serving

00:25:59.790 --> 00:26:01.390
the API configuration files.

00:26:01.390 --> 00:26:05.040
So this is the thing which
tells Google's API

00:26:05.040 --> 00:26:07.080
infrastructure what our
back end looks like.

00:26:07.080 --> 00:26:09.440
And so we're statically serving
this JSON file,

00:26:09.440 --> 00:26:12.338
api_config.JSON at the
path _ah/spi/BackEndS

00:26:12.338 --> 00:26:13.588
ervice.getApiConfigs.

00:26:16.210 --> 00:26:18.350
This is the thing I was
talking about before.

00:26:18.350 --> 00:26:23.280
And then every other request
goes through _ah/spi, and it's

00:26:23.280 --> 00:26:26.410
just a glob that goes through
this helloworld.php.

00:26:26.410 --> 00:26:29.960
And so that's where our back end
path actually gets served.

00:26:29.960 --> 00:26:32.720
So the final thing, the final
two things I wanted to show

00:26:32.720 --> 00:26:39.290
you were this api_config.json
and then myapi_config.json.

00:26:39.290 --> 00:26:41.980
So the first thing is what's
actually getting served to

00:26:41.980 --> 00:26:43.640
Google's API infrastructure.

00:26:43.640 --> 00:26:48.030
And it's JSON inside JSON.

00:26:48.030 --> 00:26:52.090
So it's a dictionary with just
one key called items, and that

00:26:52.090 --> 00:26:55.700
key holds a list of JSON
serialized API configs.

00:26:55.700 --> 00:26:58.990
So here we only had the one API
called myapi, so it's just

00:26:58.990 --> 00:27:04.660
a list containing the JSON
serialized version of myapi.

00:27:04.660 --> 00:27:07.720
And it's not worth
looking at here.

00:27:07.720 --> 00:27:12.300
But here is sort of a more human
readable version of this

00:27:12.300 --> 00:27:13.240
API config.

00:27:13.240 --> 00:27:16.735
So we see at the top the name,
the version, the description,

00:27:16.735 --> 00:27:19.570
all of these things we saw
in the APIs Explorer.

00:27:19.570 --> 00:27:20.890
Some other things--

00:27:20.890 --> 00:27:24.870
one thing, which is relatively
important, is that it's

00:27:24.870 --> 00:27:27.690
serving on local
host port 8080.

00:27:27.690 --> 00:27:31.290
And so we're able to tell our
clients how to interact with

00:27:31.290 --> 00:27:33.000
it and where to interact
with it.

00:27:33.000 --> 00:27:37.350
And so the root of the API
itself is _ah/api, and the

00:27:37.350 --> 00:27:40.550
root of the back
end is _ah/spi.

00:27:40.550 --> 00:27:43.070
And this is how the two
parts communicate with

00:27:43.070 --> 00:27:44.300
each other as well.

00:27:44.300 --> 00:27:46.580
And so the first thing is, we
say we've got some methods.

00:27:46.580 --> 00:27:48.110
We actually only
had one method.

00:27:48.110 --> 00:27:50.800
We saw it was
myapi.mymodel.echo.

00:27:50.800 --> 00:27:52.620
And then we've got some
data about this.

00:27:52.620 --> 00:27:58.130
So the most important
one is really--

00:27:58.130 --> 00:28:02.680
well, actually, it's really the
correspondence to another

00:28:02.680 --> 00:28:03.490
back end method.

00:28:03.490 --> 00:28:05.660
So the back end, or rosyMethod,
is called

00:28:05.660 --> 00:28:08.270
MyAPI.MyModel.Echo.

00:28:08.270 --> 00:28:11.850
And so if we go over to
our descriptor key in

00:28:11.850 --> 00:28:15.570
configuration, and we see
MyApi.MyModel.Echo, we

00:28:15.570 --> 00:28:18.740
actually see a description of
what the data looks like.

00:28:18.740 --> 00:28:21.790
So the request and the response
are a reference to a

00:28:21.790 --> 00:28:23.660
schema called MyModel.

00:28:23.660 --> 00:28:28.610
And so this part, the methods
part of the map, tells us take

00:28:28.610 --> 00:28:32.890
the external-facing
myapi.mymodel.echo and map it

00:28:32.890 --> 00:28:38.050
to MyAPI.MyModel.Echo in
the back end down here.

00:28:38.050 --> 00:28:40.650
And so in the back end, it
actually tells the front end,

00:28:40.650 --> 00:28:42.400
hey, this is what the
data I expect to

00:28:42.400 --> 00:28:44.230
receive looks like, MyModel.

00:28:44.230 --> 00:28:46.090
And here's the data I expect
to give you looks

00:28:46.090 --> 00:28:47.570
like, again, MyModel.

00:28:47.570 --> 00:28:50.470
And then finally, the last key
in that descriptor key is

00:28:50.470 --> 00:28:52.930
called schemas, and that
actually describes what the

00:28:52.930 --> 00:28:53.740
data looks like.

00:28:53.740 --> 00:28:58.610
And so our MyModel schema,
again, has a few syntactic

00:28:58.610 --> 00:29:00.440
things in there.

00:29:00.440 --> 00:29:04.490
But it's got two properties,
which is what we saw--

00:29:04.490 --> 00:29:08.080
my_str, which is of type string,
and my_int, which was

00:29:08.080 --> 00:29:10.630
an integer which actually
happened to be of type

00:29:10.630 --> 00:29:13.140
integer, because it was int32.

00:29:13.140 --> 00:29:16.080
The thing we saw with Alex
before, if it were int64 or

00:29:16.080 --> 00:29:19.570
uint64, then it would have been
type string, so we could

00:29:19.570 --> 00:29:23.820
have had JavaScript type
safety like that.

00:29:23.820 --> 00:29:26.900
So this is what it looks
like in the back end.

00:29:26.900 --> 00:29:33.310
And this is essentially why
we can have this PHP Cloud

00:29:33.310 --> 00:29:36.570
Endpoints app and also the much,
much more functional app

00:29:36.570 --> 00:29:40.000
and library in Go that
Alex has written.

00:29:40.000 --> 00:29:43.310
So before we jump to the
Moderator and answer any

00:29:43.310 --> 00:29:46.470
questions there, I want to say
if anybody's interested in

00:29:46.470 --> 00:29:50.030
doing for PHP what Alex did for
Go, let me know, and I'm

00:29:50.030 --> 00:29:54.010
happy to help you figure out how
the API config looks, help

00:29:54.010 --> 00:29:56.580
you figure out how to actually
stand up your SPI.

00:29:56.580 --> 00:29:59.630
Or any other particular
questions you might have, I'm

00:29:59.630 --> 00:30:00.940
here for you.

00:30:00.940 --> 00:30:07.650
So now let me jump back over
to the browser, go to

00:30:07.650 --> 00:30:11.510
developers.google.com/live.

00:30:11.510 --> 00:30:13.150
I should've opened the Moderator
queue beforehand.

00:30:13.150 --> 00:30:15.030
That was a fail on my part.

00:30:15.030 --> 00:30:19.830
But that's OK, because our
wonderful folks behind Google

00:30:19.830 --> 00:30:23.920
Developers Live make it so that
it's really, really easy

00:30:23.920 --> 00:30:25.180
just to get to this thing.

00:30:25.180 --> 00:30:29.810
So there we go, and
now I'm in it.

00:30:29.810 --> 00:30:32.090
Uh-oh.

00:30:32.090 --> 00:30:36.450
So the first question says, "The
streaming is quite bad.

00:30:36.450 --> 00:30:38.110
Do you have some 'architecture'
diagram so it

00:30:38.110 --> 00:30:42.620
would be at least easier to
understand and get the bits of

00:30:42.620 --> 00:30:46.300
the streaming?" I'm not sure--

00:30:46.300 --> 00:30:48.700
obviously there was some
sort of a transmission

00:30:48.700 --> 00:30:49.490
issue on his side.

00:30:49.490 --> 00:30:52.230
Not sure what it was,
but we don't have an

00:30:52.230 --> 00:30:53.310
architecture diagram.

00:30:53.310 --> 00:30:58.430
But that's something I'm
certainly happy to do.

00:30:58.430 --> 00:31:02.820
I assume he's sort of talking
about the way that the

00:31:02.820 --> 00:31:05.810
particular handlers talk
to each other or the

00:31:05.810 --> 00:31:07.590
configuration works and
things like this.

00:31:07.590 --> 00:31:09.475
Do you have any response
to this, Alex?

00:31:12.020 --> 00:31:16.180
ALEX VAGIN: Yeah, I think that
he's talking about this how do

00:31:16.180 --> 00:31:18.430
you connect all the things
together, right?

00:31:18.430 --> 00:31:18.886
DANNY HERMES: Sure.

00:31:18.886 --> 00:31:19.800
Sure.

00:31:19.800 --> 00:31:24.040
ALEX VAGIN: But then, yeah, I
know that there's a document

00:31:24.040 --> 00:31:25.280
like, an awesome document.

00:31:25.280 --> 00:31:29.290
When I saw it first and asked,
I said, wow, this is what I

00:31:29.290 --> 00:31:33.860
needed exactly to finish the
call Endpoints for Go.

00:31:33.860 --> 00:31:35.660
I mean, I'm talking
about the doc.

00:31:35.660 --> 00:31:37.370
DANNY HERMES: Yep, yep.

00:31:37.370 --> 00:31:40.260
So essentially it's
documentation for the API

00:31:40.260 --> 00:31:42.390
config, yup.

00:31:42.390 --> 00:31:43.400
Cool.

00:31:43.400 --> 00:31:46.390
So there's one other question
that I can completely answer,

00:31:46.390 --> 00:31:50.980
and then a third question,
which is a similar RPC

00:31:50.980 --> 00:31:54.510
framework for actually
communicating

00:31:54.510 --> 00:31:56.200
with things like this.

00:31:56.200 --> 00:31:58.510
And this was something Alex
actually considered at the

00:31:58.510 --> 00:32:01.150
beginning, and there was a
long discussion with the

00:32:01.150 --> 00:32:03.240
maintainers of Gorilla RPC.

00:32:03.240 --> 00:32:06.950
And so in order to actually get
this library out and do

00:32:06.950 --> 00:32:10.700
the things he needed Go
Endpoints to do, Alex opted

00:32:10.700 --> 00:32:14.070
not to use Gorilla
RPC initially.

00:32:14.070 --> 00:32:16.530
There are no current
plans to switch.

00:32:16.530 --> 00:32:19.320
That's not to say that we
couldn't, that we won't.

00:32:19.320 --> 00:32:21.360
It's not to say that we will.

00:32:21.360 --> 00:32:26.170
It's something essentially just
academic, something to

00:32:26.170 --> 00:32:27.770
think about at this point.

00:32:27.770 --> 00:32:30.720
Is there anything beyond
that, Alex?

00:32:30.720 --> 00:32:33.740
ALEX VAGIN: Oh, oh now I got
what you meant, yeah.

00:32:33.740 --> 00:32:35.370
Yeah, that was--

00:32:35.370 --> 00:32:42.015
I chose not to use Gorilla
RPC because it would be--

00:32:42.015 --> 00:32:45.720
At first, I thought just to take
Gorilla RPC and then just

00:32:45.720 --> 00:32:49.980
add some stuff, and
even like push.

00:32:49.980 --> 00:32:53.510
Push is a branch of Gorilla
RPC, and then I'd submit a

00:32:53.510 --> 00:32:54.080
pull request.

00:32:54.080 --> 00:32:56.490
But then I looked at
it, and I tried.

00:32:56.490 --> 00:32:57.680
Actually, I tried.

00:32:57.680 --> 00:32:58.770
I did try.

00:32:58.770 --> 00:33:03.750
And I realized it was just too
many things that I had to

00:33:03.750 --> 00:33:09.790
change, and it would break how
the RPC works currently.

00:33:09.790 --> 00:33:16.190
So I thought, I'll just take
what I need for now and go on

00:33:16.190 --> 00:33:16.920
a separate way.

00:33:16.920 --> 00:33:18.830
But then, who knows
in the future.

00:33:18.830 --> 00:33:19.166
DANNY HERMES: Yep.

00:33:19.166 --> 00:33:19.840
Definitely.

00:33:19.840 --> 00:33:27.570
ALEX VAGIN: But I think he was
saying about the data format

00:33:27.570 --> 00:33:33.110
exchange between SPI and API.

00:33:33.110 --> 00:33:35.280
So it's just using a different
format, right.

00:33:38.140 --> 00:33:42.650
But then that one, I don't know
how to answer if you guys

00:33:42.650 --> 00:33:44.720
have plans to switch,
but I don't know.

00:33:44.720 --> 00:33:45.990
DANNY HERMES: Sure.

00:33:45.990 --> 00:33:49.330
So another question popped up
right as we were speaking.

00:33:49.330 --> 00:33:52.630
And this is a question I don't
have the answer to and don't

00:33:52.630 --> 00:33:53.320
want to speculate.

00:33:53.320 --> 00:33:56.940
But the question for the viewers
is will a PHP runtime

00:33:56.940 --> 00:34:00.110
support HRD, which is the High
Replication Datastore, and

00:34:00.110 --> 00:34:01.740
when will it be released
to the public?

00:34:01.740 --> 00:34:07.350
So when PHP launched, the only
supported data back end was

00:34:07.350 --> 00:34:12.119
Cloud SQL, and the High
Replication Datastore is not

00:34:12.119 --> 00:34:12.620
yet supported.

00:34:12.620 --> 00:34:14.770
So I don't have answers
to that.

00:34:14.770 --> 00:34:20.639
But I will take the questions
back to the team and hopefully

00:34:20.639 --> 00:34:22.739
get some more communications
on that.

00:34:22.739 --> 00:34:26.639
So with that, that brings us to
the end of our GDL and the

00:34:26.639 --> 00:34:27.949
end of our Moderator queue.

00:34:27.949 --> 00:34:34.940
Again, thanks a ton to our
expert Alex Vagin.

00:34:34.940 --> 00:34:37.620
It was great to have you, and
it's been great working with

00:34:37.620 --> 00:34:40.280
you, and it will be great
working with you as Go

00:34:40.280 --> 00:34:43.139
Endpoints matures even more.

00:34:43.139 --> 00:34:45.679
So everybody, thanks
for joining us.

00:34:45.679 --> 00:34:47.030
Have a great day.

00:34:47.030 --> 00:34:47.875
We'll see you.

00:34:47.875 --> 00:34:48.210
ALEX VAGIN: Yeah.

00:34:48.210 --> 00:34:51.389
Can I say also thank you.

00:34:51.389 --> 00:34:58.290
Thank you back because I don't
think I would have done it

00:34:58.290 --> 00:35:00.410
without your help,
without the--

00:35:00.410 --> 00:35:05.240
like those API configs
description.

00:35:05.240 --> 00:35:08.790
If you remember what I started
from was I tried to generate--

00:35:08.790 --> 00:35:09.710
DANNY HERMES: That's right.

00:35:09.710 --> 00:35:11.980
ALEX VAGIN: --the Discovery
doc from scratch.

00:35:11.980 --> 00:35:19.180
And I remember your comment
how did you generate that?

00:35:19.180 --> 00:35:21.860
Did you do it manually?

00:35:21.860 --> 00:35:23.753
And then you wrote,
I hope not.

00:35:23.753 --> 00:35:25.970
DANNY HERMES: Yes.

00:35:25.970 --> 00:35:30.240
ALEX VAGIN: And then actually,
I went back to the page on

00:35:30.240 --> 00:35:35.400
developers.google.com, and
I browsed again the whole

00:35:35.400 --> 00:35:36.840
Discovery doc.

00:35:36.840 --> 00:35:42.010
And then I saw how much stuff
was in there, and I thought

00:35:42.010 --> 00:35:43.740
maybe Danny is right.

00:35:43.740 --> 00:35:48.690
And when he showed me
the API configs, I

00:35:48.690 --> 00:35:52.220
realized it was just--

00:35:52.220 --> 00:35:56.035
it wasn't worth it to
create a Discovery

00:35:56.035 --> 00:35:57.040
document from scratch.

00:35:57.040 --> 00:35:57.330
DANNY HERMES: Yep.

00:35:57.330 --> 00:36:00.165
ALEX VAGIN: So I wouldn't have
done it without your help.

00:36:00.165 --> 00:36:01.030
DANNY HERMES: Sure thing.

00:36:01.030 --> 00:36:02.460
I'm glad I could help,
and it was a pleasure

00:36:02.460 --> 00:36:04.380
working with you.

00:36:04.380 --> 00:36:06.540
All right, thanks, everybody,
for coming to this GDL.

