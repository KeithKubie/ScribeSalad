WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:02.660
So, the answer is the first one. This is just

00:00:02.660 --> 00:00:05.290
a number three. And we can get three from expression

00:00:05.290 --> 00:00:09.660
by following this rule. Starting from expression, replacing with number,

00:00:09.660 --> 00:00:13.880
and then replacing number with the number three. The second one

00:00:13.880 --> 00:00:16.250
is not valid. And the way to see that is

00:00:16.250 --> 00:00:19.650
if we start from expression, we only have three choices. We

00:00:19.650 --> 00:00:23.130
can replace it with expression operator expression. We can replace

00:00:23.130 --> 00:00:25.420
it with number, or we can replace it with a left

00:00:25.420 --> 00:00:28.630
paren, expression, right paren. Since the expression we're trying

00:00:28.630 --> 00:00:31.020
to match starts with a left paren, the only

00:00:31.020 --> 00:00:33.320
way to get it left paren is to eventually

00:00:33.320 --> 00:00:36.220
have this rule that replaces expression with left paren. When

00:00:36.220 --> 00:00:37.920
we use that rule, what we get is the

00:00:37.920 --> 00:00:44.170
left paren followed by expression. Now we have expression here.

00:00:44.170 --> 00:00:47.220
&gt;From here, we've matched the far left paren and

00:00:47.220 --> 00:00:50.070
the far right paren. What we have left is this.

00:00:51.330 --> 00:00:54.610
We can replace this expression with paren expression,

00:00:54.610 --> 00:00:58.770
and we have paren that's replacing this expression using

00:00:58.770 --> 00:01:01.150
this rule. And then we still have the

00:01:01.150 --> 00:01:04.670
second right paren that we had before. This isn't

00:01:04.670 --> 00:01:06.958
going to match here because we need two right

00:01:06.958 --> 00:01:10.640
parens to match. And the essence of this rule

00:01:10.640 --> 00:01:13.440
is that every time we open a parenthesis we

00:01:13.440 --> 00:01:16.690
have to eventually close it. So we can't product

00:01:16.690 --> 00:01:19.590
expressions where the parenthesis aren't balanced. So this

00:01:19.590 --> 00:01:23.000
is not a valid Python expression. We can

00:01:23.000 --> 00:01:26.240
produce the third one, this has many nested

00:01:26.240 --> 00:01:30.120
expressions. We have three perens that are open, but

00:01:30.120 --> 00:01:31.790
we have balanced and closed perens. And the

00:01:31.790 --> 00:01:33.960
way we can derive this expression, we'll start

00:01:33.960 --> 00:01:36.780
with one expression that's our starting point. We

00:01:36.780 --> 00:01:41.530
use this rule to replace it paren expression, paren.

00:01:41.530 --> 00:01:43.270
Now, we have an expression that starts with a one,

00:01:43.270 --> 00:01:45.900
so we want to replace this expression with expression operator

00:01:45.900 --> 00:01:48.640
expression. We still have the outer parens that we had

00:01:48.640 --> 00:01:52.020
before. Now, we're working on this part. We want to to

00:01:52.020 --> 00:01:55.170
replace this expression with a number and then with the

00:01:55.170 --> 00:01:58.920
number one. We're going to replace the Op, the following

00:01:58.920 --> 00:02:02.220
operator goes to times rule. That's going to be replaced

00:02:02.220 --> 00:02:06.470
with times And now we've got to replace this expression.

00:02:06.470 --> 00:02:08.720
We're trying to produce this whole thing, so we're going to replace

00:02:08.720 --> 00:02:12.320
this with, using the parentheses rule. And we can keep going,

00:02:12.320 --> 00:02:13.820
we're going to replace this expression

00:02:13.820 --> 00:02:16.565
with expression operator expression. Eventually get

00:02:16.565 --> 00:02:19.425
the two times and then do that replacement with parens again,

00:02:19.425 --> 00:02:22.430
to get the three times four. And not going to fill in

00:02:22.430 --> 00:02:25.000
all the steps here because they won't fit on the screen.

00:02:25.000 --> 00:02:26.600
But I hope you get the basic idea that we can

00:02:26.600 --> 00:02:31.510
keep doing the replacements, making complex expressions like this one. So the

00:02:31.510 --> 00:02:35.555
fourth possibility is not a valid expression. There's no way

00:02:35.555 --> 00:02:37.960
that we can get An operator in front with this

00:02:37.960 --> 00:02:40.850
rule. There actually are rules in Python that allow us

00:02:40.850 --> 00:02:44.150
to have an expression go to operator expression. But we

00:02:44.150 --> 00:02:47.690
have two expressions here. There's a three space three. If

00:02:47.690 --> 00:02:50.330
it was just the number 33, this would actually be

00:02:50.330 --> 00:02:53.810
a valid Python expression. Not something that we can produce

00:02:53.810 --> 00:02:57.020
with this grammar though. And the first one is valid It's

00:02:57.020 --> 00:02:59.770
not sensible, or necessary, to have er, nested

00:02:59.770 --> 00:03:02.810
parentheses like this, but we could always keep using

00:03:02.810 --> 00:03:05.520
this rule, so we can derive that expression starting

00:03:05.520 --> 00:03:08.740
from expression using the last rule with the parens,

00:03:08.740 --> 00:03:10.896
and we're going to end up with paren,

00:03:10.896 --> 00:03:15.540
expression, paren, close paren. We can use that rule

00:03:15.540 --> 00:03:19.010
again, we're going to replace the middle expression with expression

00:03:19.010 --> 00:03:22.990
paren expression. Replacing this expression with the last rule.

00:03:22.990 --> 00:03:27.640
That'll give us expression surrounded by parens, and we still have

00:03:27.640 --> 00:03:30.910
the two outer parens on each side. So we can have

00:03:30.910 --> 00:03:34.020
as many necessary parens as we want. It's not necessary, it

00:03:34.020 --> 00:03:35.960
doesn't make a lot of sense. We would never actually want

00:03:35.960 --> 00:03:38.530
to write code that way. But it's still a valid Python

00:03:38.530 --> 00:03:42.660
expression. So recursive grammar rules like these are very powerful. We

00:03:42.660 --> 00:03:45.850
only need a few simple rules to describe a big language,

00:03:45.850 --> 00:03:48.120
and the whole Python language that we're going to learn in

00:03:48.120 --> 00:03:50.340
this course can be described this way.

00:03:50.340 --> 00:03:52.230
We're not going to describe the entire Python language

00:03:52.230 --> 00:03:55.630
this way, but what I hope is that you have a good sense for how grammars

00:03:55.630 --> 00:03:57.370
work, and you can see that, even as

00:03:57.370 --> 00:03:59.950
we introduce constructs somewhat more informally as we

00:03:59.950 --> 00:04:02.070
go on, that they could be broken down

00:04:02.070 --> 00:04:03.780
into these kinds of formal or placement rules.

