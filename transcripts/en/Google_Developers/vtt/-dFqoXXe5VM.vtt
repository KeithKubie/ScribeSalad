WEBVTT
Kind: captions
Language: en

00:00:01.500 --> 00:00:02.000
MANO MARKS: Hi.

00:00:02.000 --> 00:00:03.795
Welcome to Google Geo
Developers Series.

00:00:03.795 --> 00:00:06.530
I'm Mano Marks, developer
advocate on Google's Geo

00:00:06.530 --> 00:00:09.240
Developer Relations team.

00:00:09.240 --> 00:00:11.570
Today I'd like to introduce
Chad Killingsworth, who is

00:00:11.570 --> 00:00:14.140
going to be talking about
using the Google Closure

00:00:14.140 --> 00:00:16.090
Compiler with Google Maps API.

00:00:16.090 --> 00:00:18.760
So take it away, Chad.

00:00:18.760 --> 00:00:19.960
CHAD KILLINGSWORTH:
Thanks, Mano.

00:00:19.960 --> 00:00:22.700
Today we're going to talk about
how to speed up your

00:00:22.700 --> 00:00:25.920
Maps using Closure Compiler.

00:00:25.920 --> 00:00:27.130
I'm Chad Killingsworth.

00:00:27.130 --> 00:00:29.580
I'm the assistant director of
Web and New Media at Missouri

00:00:29.580 --> 00:00:30.940
State University.

00:00:30.940 --> 00:00:34.920
And I maintain our campus map,
which has a large amount of

00:00:34.920 --> 00:00:37.820
data, and a lot of different
layers and a lot of different

00:00:37.820 --> 00:00:39.990
data sets combined
on the same map.

00:00:39.990 --> 00:00:41.770
So by nature, my map--

00:00:41.770 --> 00:00:44.340
without optimizations, the
map actually tends to

00:00:44.340 --> 00:00:46.150
run somewhat slow.

00:00:46.150 --> 00:00:48.120
So I started investigating
how to do a lot of these

00:00:48.120 --> 00:00:49.740
optimizations.

00:00:49.740 --> 00:00:52.890
And today we're going to talk
about using Closure Compiler,

00:00:52.890 --> 00:00:55.610
which helps with the JavaScript
side of things to

00:00:55.610 --> 00:00:58.470
speed things up dramatically.

00:00:58.470 --> 00:01:03.230
So when we talk about Maps,
there's a number of issues

00:01:03.230 --> 00:01:07.390
that come to the top of the
list that slow down a map.

00:01:07.390 --> 00:01:11.170
In particular, using large
amounts of data, large amounts

00:01:11.170 --> 00:01:16.410
of polylines, markers, any large
amounts of just data on

00:01:16.410 --> 00:01:18.830
the map can slow them down.

00:01:18.830 --> 00:01:22.720
Now there's ways to mitigate
that with KML layers and other

00:01:22.720 --> 00:01:23.970
techniques.

00:01:23.970 --> 00:01:26.800
One of the other issues they
can slow a map down is the

00:01:26.800 --> 00:01:29.350
size and complexity
of the JavaScript.

00:01:29.350 --> 00:01:33.140
The map's API itself
is not small.

00:01:33.140 --> 00:01:36.840
And then, the more JavaScript
we add to our mash-ups, the

00:01:36.840 --> 00:01:38.850
slower our map runs.

00:01:38.850 --> 00:01:41.210
As a rule of thumb, I try to
avoid using third-party

00:01:41.210 --> 00:01:44.870
libraries, even things as common
as jQuery and other

00:01:44.870 --> 00:01:46.510
things, because the map
site has so much

00:01:46.510 --> 00:01:48.540
JavaScript on it as it is.

00:01:48.540 --> 00:01:50.570
But the more of that we add, and
the more complexity, the

00:01:50.570 --> 00:01:52.230
more that slows down the map.

00:01:52.230 --> 00:01:55.300
And network latency also
slows down the map.

00:01:55.300 --> 00:01:58.330
We are transferring a large
amount of data back and forth,

00:01:58.330 --> 00:02:01.710
tiles, JavaScript,
marker images.

00:02:01.710 --> 00:02:04.900
So everything we can do to
reduce network latency.

00:02:04.900 --> 00:02:07.140
And this especially shows
up on mobile devices.

00:02:07.140 --> 00:02:10.610
In fact, all of these things
show up more heavily on mobile

00:02:10.610 --> 00:02:13.860
devices since they are memory
constrained as well as

00:02:13.860 --> 00:02:17.240
processor constrained, in
addition to having higher

00:02:17.240 --> 00:02:18.490
latency networks.

00:02:21.280 --> 00:02:25.220
But today, we really want to
concentrate on the impact of

00:02:25.220 --> 00:02:29.220
JavaScript on the map speed.

00:02:29.220 --> 00:02:34.260
At Google I/O 2009, there was
a presentation where it was

00:02:34.260 --> 00:02:38.440
stated that on the iPhone 3G at
the time, it took about 20

00:02:38.440 --> 00:02:43.140
milliseconds to parse each
kilobyte of JavaScript.

00:02:43.140 --> 00:02:48.660
Well, that calculated with the
Maps API V2 code to be about

00:02:48.660 --> 00:02:51.920
four seconds of just
parse time.

00:02:51.920 --> 00:02:54.710
Now during that time,
the phone was

00:02:54.710 --> 00:02:56.270
basically locked and unusable.

00:02:56.270 --> 00:02:59.120
This is definitely not the user
experience you wanted.

00:02:59.120 --> 00:03:05.090
So the Maps team has taken a lot
of steps to make that not

00:03:05.090 --> 00:03:08.360
be such an impact
on the V3 API.

00:03:08.360 --> 00:03:11.100
However, on top of that, all of
our code goes through the

00:03:11.100 --> 00:03:12.500
same limitations.

00:03:12.500 --> 00:03:19.480
And so everything we can do
to mitigate that helps.

00:03:19.480 --> 00:03:23.620
Faster devices, newer phones,
desktop browsers, all of those

00:03:23.620 --> 00:03:24.900
lessen that impact.

00:03:24.900 --> 00:03:28.270
But JavaScript still plays
a crucial role in the

00:03:28.270 --> 00:03:28.930
speed of the map.

00:03:28.930 --> 00:03:33.720
So we want to do everything we
can to make it run faster.

00:03:33.720 --> 00:03:37.780
So typically, when you're
working with JavaScript, we

00:03:37.780 --> 00:03:41.640
don't like to write obfuscated
code with variable names that

00:03:41.640 --> 00:03:46.210
are A, B, C, D. It's not good
to maintain a large code

00:03:46.210 --> 00:03:46.830
library like that.

00:03:46.830 --> 00:03:48.820
It's really hard for other
people to look at it.

00:03:48.820 --> 00:03:52.380
So typically we use a JavaScript
compressor.

00:03:52.380 --> 00:03:54.940
When we talk about JavaScript
compressors, there's several

00:03:54.940 --> 00:03:58.970
that are usually talked about
and grouped together.

00:03:58.970 --> 00:04:03.460
Some of the most common ones are
Dean Edwards Packer, the

00:04:03.460 --> 00:04:08.460
Yahoo User Interface Compressor,
JSMin, and then

00:04:08.460 --> 00:04:09.440
the one we're going
to concentrate

00:04:09.440 --> 00:04:13.650
today, Closure Compiler.

00:04:13.650 --> 00:04:15.950
So over all of these,
what are the

00:04:15.950 --> 00:04:18.700
advantages of Closure Compiler?

00:04:18.700 --> 00:04:21.589
Well first of all, Closure
Compiler is a true compiler,

00:04:21.589 --> 00:04:24.000
not just a compressor.

00:04:24.000 --> 00:04:28.050
Unlike some of the others, it
actually parses your entire

00:04:28.050 --> 00:04:32.210
JavaScript, makes a symbol tree,
does a whole bunch of

00:04:32.210 --> 00:04:35.230
optimizations, and then where it
differs from most compilers

00:04:35.230 --> 00:04:38.610
is that it spits back
out JavaScript.

00:04:38.610 --> 00:04:42.040
Now, the Closure Team is fond
of saying, it spits back out

00:04:42.040 --> 00:04:43.200
better JavaScript.

00:04:43.200 --> 00:04:44.320
And I tend to agree.

00:04:44.320 --> 00:04:47.700
It does quite a few things
for your code.

00:04:47.700 --> 00:04:50.105
One of the biggest advantages
is it helps identify

00:04:50.105 --> 00:04:50.880
errors in your code.

00:04:50.880 --> 00:04:54.710
And as we'll see later in the
presentation, it can actually

00:04:54.710 --> 00:04:59.430
identify type errors and a lot
of other things that normally

00:04:59.430 --> 00:05:02.930
don't come up in JavaScript
until you actually deploy it.

00:05:02.930 --> 00:05:05.710
So it's really helpful there.

00:05:05.710 --> 00:05:09.260
Closure's also optimized for
servers, which gzip and

00:05:09.260 --> 00:05:11.690
compress their JavaScript
for you.

00:05:11.690 --> 00:05:15.290
So the source code itself is
optimized such that the

00:05:15.290 --> 00:05:19.660
strings are more compressible,
and it's optimized.

00:05:19.660 --> 00:05:22.840
So sometimes you can get cases
where the non-gzipped source

00:05:22.840 --> 00:05:26.600
code is actually larger than
some of the other compressors.

00:05:26.600 --> 00:05:30.150
But in almost every case
I've ever seen, the

00:05:30.150 --> 00:05:33.890
gzip source is smaller.

00:05:33.890 --> 00:05:37.060
So some of the optimizations
that Closure can do on your

00:05:37.060 --> 00:05:41.920
source code include constant
folding, function inlining,

00:05:41.920 --> 00:05:43.650
dead code elimination.

00:05:43.650 --> 00:05:47.680
It does loop optimizations and
variable renaming and reuse,

00:05:47.680 --> 00:05:51.530
all really good things
to have.

00:05:51.530 --> 00:05:55.460
Closure Compiler works in
several different modes.

00:05:55.460 --> 00:05:57.380
The first one is Whitespace
Only.

00:05:57.380 --> 00:06:01.700
And truthfully, that's just kind
of a toy, and it's not

00:06:01.700 --> 00:06:04.800
really useful in that it's not
that hard to remove your own

00:06:04.800 --> 00:06:06.120
whitespace.

00:06:06.120 --> 00:06:09.170
And you don't really get that
many benefits from doing that.

00:06:09.170 --> 00:06:11.730
Where the benefits really start
to come in to play are

00:06:11.730 --> 00:06:15.420
with the Simple Optimizations,
and it performs a set of

00:06:15.420 --> 00:06:18.550
relatively safe optimizations
on your code.

00:06:18.550 --> 00:06:22.570
I say relatively because it's
still possible to write code,

00:06:22.570 --> 00:06:24.870
which will be broken once you
compile it with Simple

00:06:24.870 --> 00:06:25.990
Optimizations.

00:06:25.990 --> 00:06:27.770
But it's much more unlikely.

00:06:27.770 --> 00:06:31.310
Advanced Optimizations, now that
gives you your best code

00:06:31.310 --> 00:06:35.410
size and performs the highest
number of optimizations.

00:06:35.410 --> 00:06:38.790
But it typically requires
changes to your source code to

00:06:38.790 --> 00:06:40.950
correctly compile
through there.

00:06:40.950 --> 00:06:42.890
There are some pretty big
assumptions that Compiler

00:06:42.890 --> 00:06:45.730
makes that you've got
to account for.

00:06:45.730 --> 00:06:48.280
So we'll talk about
that in a minute.

00:06:48.280 --> 00:06:49.730
So let's look at a real-world
example.

00:06:52.612 --> 00:06:55.890
All of these were done with
the JavaScript for the

00:06:55.890 --> 00:06:58.610
Missouri State Campus Map.

00:06:58.610 --> 00:07:02.490
Uncompressed, it's around 40k.

00:07:02.490 --> 00:07:06.070
And so going through each of the
compressors, then you can

00:07:06.070 --> 00:07:12.940
see that JSMin reduces that to
68% of that size at about 28k.

00:07:12.940 --> 00:07:17.460
Dean Edwards Packer
is 67% at 27k.

00:07:17.460 --> 00:07:21.540
YUI Compressor gets it
down to 62% at 25k.

00:07:21.540 --> 00:07:25.980
But in this case, Closure, in
both modes, totally smokes

00:07:25.980 --> 00:07:27.330
everything else.

00:07:27.330 --> 00:07:32.230
And Simple Mode Closure gets it
down to 55% at 22 and 1/2k.

00:07:32.230 --> 00:07:36.740
And Closure Compiler in Advance
Mode brings it all the

00:07:36.740 --> 00:07:43.090
way down to 39% at about
16k, 15 and 1/2k.

00:07:43.090 --> 00:07:48.940
So that's some really good
compression at that point.

00:07:48.940 --> 00:07:54.470
When we run that compressed code
then through gzip, how a

00:07:54.470 --> 00:07:57.600
high-performance web server
would do it, we can look that

00:07:57.600 --> 00:08:01.330
the original source was just
compressed down to 20% down to

00:08:01.330 --> 00:08:03.750
a little over 8k.

00:08:03.750 --> 00:08:06.720
And then we go through all the
rest, pretty much in the same

00:08:06.720 --> 00:08:07.220
order before.

00:08:07.220 --> 00:08:09.500
JSMin was 16%.

00:08:09.500 --> 00:08:12.340
Packer was just under 16%.

00:08:12.340 --> 00:08:17.540
YUI Compressor was just over
15%, and then Closure Compiler

00:08:17.540 --> 00:08:24.780
in Simple Mode was 14.3% and
in Advance Mode was 12.5%.

00:08:24.780 --> 00:08:31.590
So we can go from our original
40k source down to, after

00:08:31.590 --> 00:08:36.000
Closure Advance, down to
a 5k gzip source code.

00:08:36.000 --> 00:08:40.120
So as far as network speed,
that helps a lot.

00:08:40.120 --> 00:08:42.460
Now, the parse time is going
to be based on that

00:08:42.460 --> 00:08:46.570
un-gzipped, that uncompressed
source code, which Closure

00:08:46.570 --> 00:08:50.290
Compiler had at about
the 16k range.

00:08:50.290 --> 00:08:52.880
But that's still a significant
savings over the

00:08:52.880 --> 00:08:56.990
original 40k file.

00:08:56.990 --> 00:08:58.930
When you use Closure
Compiler, there's

00:08:58.930 --> 00:09:01.220
several ways to use it.

00:09:01.220 --> 00:09:03.075
You can use the web
application.

00:09:03.075 --> 00:09:04.620
And there's the web address,
closure-compiler.appspot.com.

00:09:08.120 --> 00:09:11.950
And it works a lot like
just an online form.

00:09:11.950 --> 00:09:14.970
You can just paste in your
JavaScript, hit Compile, and

00:09:14.970 --> 00:09:18.250
then copy out the compressed
source.

00:09:18.250 --> 00:09:22.130
However, with more advanced
options, it becomes pretty

00:09:22.130 --> 00:09:24.320
difficult to use the
web application.

00:09:24.320 --> 00:09:26.940
But there's a web service API
where you can post your code,

00:09:26.940 --> 00:09:30.400
and it'll return the
compressed version.

00:09:30.400 --> 00:09:35.190
But really, the one that I use
most is a downloadable JAR

00:09:35.190 --> 00:09:37.340
application.

00:09:37.340 --> 00:09:39.000
And you could also--

00:09:39.000 --> 00:09:41.220
closure is an open-source
project, so you can download

00:09:41.220 --> 00:09:46.260
the whole source tree in Eclipse
and make your own

00:09:46.260 --> 00:09:47.070
custom build.

00:09:47.070 --> 00:09:50.340
There's actually some
optimization passes that

00:09:50.340 --> 00:09:51.840
aren't enabled by default,
because they

00:09:51.840 --> 00:09:54.530
break certain code.

00:09:54.530 --> 00:09:56.570
But if your code isn't one of
that, then you can get even

00:09:56.570 --> 00:09:59.580
more savings by making a custom
build to the Compiler.

00:10:02.700 --> 00:10:05.330
So an example usage
of the downloaded

00:10:05.330 --> 00:10:08.770
application would be--

00:10:08.770 --> 00:10:12.410
it's a JAR, so the Java-jar,
the Compiler, you have to

00:10:12.410 --> 00:10:15.180
specify the compilation level.

00:10:15.180 --> 00:10:17.850
Again, that was Whitespace Only,
Simple Optimizations, or

00:10:17.850 --> 00:10:20.450
Advanced Optimizations.

00:10:20.450 --> 00:10:25.600
You put your input JavaScript
file and your output

00:10:25.600 --> 00:10:28.350
JavaScript file, and
away it goes.

00:10:32.640 --> 00:10:35.760
This is true of most compressors
that do any

00:10:35.760 --> 00:10:37.130
significant optimizations.

00:10:37.130 --> 00:10:39.630
But there are certain JavaScript
statements that you

00:10:39.630 --> 00:10:41.480
need to avoid.

00:10:41.480 --> 00:10:46.070
The "with" statement in
JavaScript changes how scope

00:10:46.070 --> 00:10:47.870
and names are processed.

00:10:47.870 --> 00:10:49.550
It changes the scope.

00:10:49.550 --> 00:10:52.340
And you can actually have naming
conflicts between local

00:10:52.340 --> 00:10:53.850
and global names with that.

00:10:53.850 --> 00:10:56.390
And so the Compiler doesn't
know which one you're

00:10:56.390 --> 00:10:57.480
referring to.

00:10:57.480 --> 00:11:00.520
So avoid using the
"with" statement.

00:11:00.520 --> 00:11:05.800
The "eval" statement, the
Compiler doesn't optimize

00:11:05.800 --> 00:11:08.150
anything inside of a string.

00:11:08.150 --> 00:11:09.340
It takes it as a literal.

00:11:09.340 --> 00:11:13.230
And so inside an "eval"
statement string, none of

00:11:13.230 --> 00:11:14.150
those optimizations.

00:11:14.150 --> 00:11:17.970
So if you declare a variable
with a name outside and then

00:11:17.970 --> 00:11:20.830
reference that variable in an
"eval" string, if the outside

00:11:20.830 --> 00:11:24.310
variable gets renamed, then your
code's going to break.

00:11:24.310 --> 00:11:27.820
So you want to avoid using
"eval." There are some

00:11:27.820 --> 00:11:30.680
specific places that "eval" is
still appropriate, but just as

00:11:30.680 --> 00:11:32.860
a general rule of thumb.

00:11:32.860 --> 00:11:36.280
And the other one actually
doesn't come up very often.

00:11:36.280 --> 00:11:40.500
But certain libraries like to
use a function named .ToString

00:11:40.500 --> 00:11:42.210
to see what the original
function name

00:11:42.210 --> 00:11:43.390
and arguments are.

00:11:43.390 --> 00:11:46.250
Well, because those arguments
get renamed with Closure

00:11:46.250 --> 00:11:50.920
Compiler, that can
cause problems.

00:11:50.920 --> 00:11:55.860
And so you should avoid using
string representations of

00:11:55.860 --> 00:11:57.130
functions of variable names.

00:12:01.150 --> 00:12:05.610
With the Compiler, we saw
earlier, Advance Mode, by far,

00:12:05.610 --> 00:12:07.690
gives you the best
optimizations.

00:12:07.690 --> 00:12:11.250
But it does come with
a few caveats.

00:12:11.250 --> 00:12:13.530
Chances are, you will have to
make changes to your source

00:12:13.530 --> 00:12:15.150
code to be able to use it.

00:12:15.150 --> 00:12:17.990
Otherwise, when you compile it,
you'll get JavaScript that

00:12:17.990 --> 00:12:20.710
doesn't run on your
page properly.

00:12:20.710 --> 00:12:24.990
Using Advanced Optimizations,
there are several things you

00:12:24.990 --> 00:12:26.690
have to pay attention to
in your source code.

00:12:26.690 --> 00:12:31.620
And they're well documented on
the Closure Compiler site.

00:12:31.620 --> 00:12:34.040
But let's go over a few of
the most common ones.

00:12:34.040 --> 00:12:38.260
The first thing is you need to
annotate your JavaScript with

00:12:38.260 --> 00:12:40.250
JSDoc tags.

00:12:40.250 --> 00:12:42.720
If you're familiar with Java,
you're probably familiar with

00:12:42.720 --> 00:12:43.800
the Javadoc tags.

00:12:43.800 --> 00:12:45.740
These are very similar.

00:12:45.740 --> 00:12:46.900
They look something like this.

00:12:46.900 --> 00:12:49.230
And in this case, what we're
doing is we're just telling

00:12:49.230 --> 00:12:57.670
the Compiler what types to
assume for a given function,

00:12:57.670 --> 00:13:00.800
so that in this case, we're
telling the Compiler that the

00:13:00.800 --> 00:13:04.120
parameter input is of type
String, and that the function

00:13:04.120 --> 00:13:07.150
returns a string.

00:13:07.150 --> 00:13:09.760
This helps the Compiler
do a lot of type

00:13:09.760 --> 00:13:11.010
checking for us, as well.

00:13:14.100 --> 00:13:17.830
One of the big assumptions in
Advanced Optimizations is that

00:13:17.830 --> 00:13:23.330
all of the JavaScript on your
page is defined within your

00:13:23.330 --> 00:13:25.720
source file that's
being compiled.

00:13:25.720 --> 00:13:28.960
So if you're referencing
something from jQuery,

00:13:28.960 --> 00:13:32.080
typically that wouldn't be
compiled in with your code.

00:13:32.080 --> 00:13:35.350
So in cases like that,
references to other libraries

00:13:35.350 --> 00:13:36.925
have to be defined
as an extern.

00:13:39.700 --> 00:13:46.170
This is simply a separate file
that lists out the types of,

00:13:46.170 --> 00:13:49.450
and the JSDocs for, functions
and properties in the

00:13:49.450 --> 00:13:53.050
JavaScript and variables
in the JavaScript.

00:13:53.050 --> 00:13:54.300
Here's an example.

00:13:56.120 --> 00:13:57.900
In this case, I'm calling

00:13:57.900 --> 00:14:01.520
google.maps.event.adlistener once.

00:14:01.520 --> 00:14:06.430
But because this function isn't
defined in my source

00:14:06.430 --> 00:14:09.180
code, the Compiler isn't going
to know what it is.

00:14:09.180 --> 00:14:10.710
And it's not going to know
the types, and it's

00:14:10.710 --> 00:14:13.070
going to throw an error.

00:14:13.070 --> 00:14:17.330
Thankfully, for a lot of the
common libraries, including

00:14:17.330 --> 00:14:21.320
both the Version 2 and Version
3 Maps APIs, their externs in

00:14:21.320 --> 00:14:23.900
the Closure Compiler are
already defined.

00:14:23.900 --> 00:14:27.750
You can download them from the
Closure Compiler source

00:14:27.750 --> 00:14:32.350
repository in the Contrib
directory.

00:14:32.350 --> 00:14:34.270
And just defining those
is all you need to do

00:14:34.270 --> 00:14:35.520
in the extern file.

00:14:39.350 --> 00:14:44.170
One of the other things that
can really break your code

00:14:44.170 --> 00:14:47.920
with Advanced Optimizations in
Closure Compiler is mixing how

00:14:47.920 --> 00:14:49.695
you reference an object
property.

00:14:52.220 --> 00:14:53.930
One of the biggest things is

00:14:53.930 --> 00:14:55.450
consistency in Closure Compiler.

00:14:55.450 --> 00:15:00.050
So if you refer to an object,
property, or method using a

00:15:00.050 --> 00:15:03.520
dotted syntax, you should never
turn around and refer to

00:15:03.520 --> 00:15:06.840
it with the bracket and
the array syntax.

00:15:09.450 --> 00:15:10.720
Here's an example.

00:15:10.720 --> 00:15:13.500
In this case, we're defining
a new object.

00:15:13.500 --> 00:15:16.810
It has a [? lat ?] launch
property, and we're creating a

00:15:16.810 --> 00:15:19.580
[? lat ?] launch object.

00:15:19.580 --> 00:15:22.770
And then right below that, we're
creating a [? lat ?]

00:15:22.770 --> 00:15:25.360
launch string, and we're
calling the [? lat ?]

00:15:25.360 --> 00:15:25.810
[? launch ?]

00:15:25.810 --> 00:15:27.670
[? dot to ?] url value.

00:15:27.670 --> 00:15:31.510
Now uncompressed, this is
syntactically correct.

00:15:31.510 --> 00:15:35.700
But the problem is, when this
gets compiled with Advanced

00:15:35.700 --> 00:15:40.150
Optimizations, the [? lat ?]
launch variable property will

00:15:40.150 --> 00:15:41.320
get renamed.

00:15:41.320 --> 00:15:46.430
But the reference to it in
square brackets with a string

00:15:46.430 --> 00:15:47.870
will not get renamed.

00:15:47.870 --> 00:15:50.480
And so we will be referring to
an undefined property, and

00:15:50.480 --> 00:15:52.430
that'll throw a JavaScript
error.

00:15:52.430 --> 00:15:54.300
So this is just an example.

00:15:54.300 --> 00:15:56.920
They either both need to be the
square brackets with the

00:15:56.920 --> 00:15:58.990
strings, or both need to be
the dotted properties.

00:15:58.990 --> 00:16:00.900
But mixing back and forth
causes problems.

00:16:05.440 --> 00:16:10.740
The next one is, in Advanced
Optimization, one of the

00:16:10.740 --> 00:16:15.140
biggest advantages is Closure
Compiler will remove all

00:16:15.140 --> 00:16:16.280
unreferenced code.

00:16:16.280 --> 00:16:19.200
It's dead code elimination.

00:16:19.200 --> 00:16:23.520
But to do that, it assumes that
every function and every

00:16:23.520 --> 00:16:27.275
property in your JavaScript file
is used within the file.

00:16:30.250 --> 00:16:34.560
And on the web, that oftentimes
is not the case.

00:16:34.560 --> 00:16:36.100
Sometimes we're developing
a library to be

00:16:36.100 --> 00:16:38.160
used for another purpose.

00:16:38.160 --> 00:16:41.670
And sometimes we simply are
defining like a mouseover

00:16:41.670 --> 00:16:45.350
function that'll be referenced
on an HTML element.

00:16:45.350 --> 00:16:46.990
This code demonstrates this.

00:16:46.990 --> 00:16:49.680
This is a function that's going
to do a replacement on

00:16:49.680 --> 00:16:54.640
the source of an image when
it's moused over.

00:16:54.640 --> 00:16:57.960
But in this case you'll notice
we have the function defined.

00:16:57.960 --> 00:17:01.330
But right below it you'll see
what we have to do to make

00:17:01.330 --> 00:17:02.960
sure that Closure Compiler
doesn't remove it.

00:17:02.960 --> 00:17:04.260
We're exporting it.

00:17:04.260 --> 00:17:07.350
And we're using that string
syntax that we referenced in

00:17:07.350 --> 00:17:10.930
the one before to prevent the
Compiler from renaming that or

00:17:10.930 --> 00:17:12.690
aliasing it in any way.

00:17:12.690 --> 00:17:16.470
And so in this case, now we're
assigning the function to a

00:17:16.470 --> 00:17:17.980
global object.

00:17:17.980 --> 00:17:20.510
And so the Compiler won't
consider it dead code and

00:17:20.510 --> 00:17:21.569
won't remove it.

00:17:21.569 --> 00:17:24.010
So this is referred to as
exporting the function.

00:17:28.349 --> 00:17:32.880
Once you've got your code
correctly compiling without

00:17:32.880 --> 00:17:35.990
errors, chances are, with
Advanced Optimizations it's

00:17:35.990 --> 00:17:37.030
still not going to
run properly.

00:17:37.030 --> 00:17:38.950
You're going to have
runtime errors.

00:17:38.950 --> 00:17:41.520
And those can be pretty
difficult to debug in a

00:17:41.520 --> 00:17:44.020
compacted file.

00:17:44.020 --> 00:17:48.130
Some of the best ways to debug
your JavaScript is with the

00:17:48.130 --> 00:17:49.380
PRETTY_PRINT option.

00:17:51.660 --> 00:17:56.400
In this case, the Compiler
correctly renames everything

00:17:56.400 --> 00:17:59.090
in your file and does all
of its optimizations.

00:17:59.090 --> 00:18:03.050
But it leaves a lot of white
space in, properly indents the

00:18:03.050 --> 00:18:07.050
code, has line breaks, makes
it a lot easier to read.

00:18:07.050 --> 00:18:08.980
And then when you compare it
with your original source

00:18:08.980 --> 00:18:11.910
file, it's pretty easy to step
through and see where the

00:18:11.910 --> 00:18:13.740
actual problem is occurring.

00:18:13.740 --> 00:18:17.260
A lot of times, this is because
of a missing JSDoc or

00:18:17.260 --> 00:18:18.510
an undefined variable.

00:18:21.240 --> 00:18:23.380
There's a tool, actually, to
make this entire process

00:18:23.380 --> 00:18:26.910
easier, and that's the Closure
Inspector, which is an add-on

00:18:26.910 --> 00:18:31.230
for Firebug, which is an
add-on for Firefox.

00:18:31.230 --> 00:18:33.610
And there's some great
documentation on the Closure

00:18:33.610 --> 00:18:36.610
Compiler site on how to
use Closure Inspector.

00:18:36.610 --> 00:18:42.600
But basically, it will do that
mapping from your compressed

00:18:42.600 --> 00:18:45.600
source back to your original
source for you and allow you

00:18:45.600 --> 00:18:48.720
to get in there with an editor
and see what's going on.

00:18:48.720 --> 00:18:54.280
So those are the two biggest
ways, easiest ways, to debug

00:18:54.280 --> 00:18:55.530
your Compile JavaScript.

00:18:59.290 --> 00:18:59.680
All right.

00:18:59.680 --> 00:19:04.770
So hopefully you're interested
in Closure Compiler now.

00:19:04.770 --> 00:19:07.040
It makes a really big difference
on map sites, since

00:19:07.040 --> 00:19:10.420
they're typically JavaScript
heavy as it is.

00:19:10.420 --> 00:19:13.840
And just some information,
Closer Compiler is gaining in

00:19:13.840 --> 00:19:15.040
popularity.

00:19:15.040 --> 00:19:18.080
It's currently used by the
jQuery Team to compress the

00:19:18.080 --> 00:19:19.960
jQuery source tree.

00:19:19.960 --> 00:19:24.080
They use it with Simple
Optimizations.

00:19:24.080 --> 00:19:25.855
The Closure Compiler website
is code.google.com/

00:19:25.855 --> 00:19:27.105
closure/compiler.

00:19:30.410 --> 00:19:32.920
And on there, there's also
references to a discussion

00:19:32.920 --> 00:19:36.550
group, the web application I
previously mentioned, and a

00:19:36.550 --> 00:19:40.190
blog where the team updates
you on what's the latest

00:19:40.190 --> 00:19:42.970
happenings with the tools.

00:19:42.970 --> 00:19:45.390
The discussion group's a great
place if you're just stuck or

00:19:45.390 --> 00:19:48.740
can't figure out why the
compiler's doing something.

00:19:48.740 --> 00:19:50.160
The Closure Team is
really good about

00:19:50.160 --> 00:19:53.030
answering those questions.

00:19:53.030 --> 00:19:55.290
And since it's an open-source
project, that's also the first

00:19:55.290 --> 00:19:57.070
place to go to start getting
involved with

00:19:57.070 --> 00:19:58.320
contributing your own.

00:20:00.950 --> 00:20:04.330
And then finally, if you're
interested more about some of

00:20:04.330 --> 00:20:08.420
the projects I work on or about
how the Maps work, this

00:20:08.420 --> 00:20:09.320
is my blog.

00:20:09.320 --> 00:20:11.830
And you can also follow me
on Twitter as @ChadHikes.

00:20:16.070 --> 00:20:18.420
I hope this has been
helpful to you.

00:20:18.420 --> 00:20:21.180
And I look forward to hearing
how much faster your Maps run

00:20:21.180 --> 00:20:22.430
after using Closure.

