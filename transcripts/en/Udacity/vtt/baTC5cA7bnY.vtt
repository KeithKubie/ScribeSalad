WEBVTT
Kind: captions
Language: en

00:00:00.002 --> 00:00:02.847
Now we'll turn to another interesting problem where the choice of approach

00:00:02.847 --> 00:00:04.941
is crucial for good performance.

00:00:04.941 --> 00:00:06.648
This is the problem of graph traversal,

00:00:06.648 --> 00:00:09.354
specifically, a breadth-first traversal of a graph.

00:00:09.354 --> 00:00:11.425
So let's define the terms that we're using here.

00:00:11.425 --> 00:00:16.021
A graph consists of a set of vertices and edges that connect these vertices.

00:00:16.021 --> 00:00:20.998
So in this picture vertices are blue circles, edges are green lines.

00:00:20.998 --> 00:00:24.450
Some graphs might be sparse with few edges per vertex,

00:00:24.450 --> 00:00:27.354
some might be dense and have lots of edges per vertex.

00:00:27.354 --> 00:00:31.709
Large graphs, very large graphs, are an interesting recent topic of study.

00:00:31.709 --> 00:00:34.246
The World Wide Web, for instance, can be considered a graph,

00:00:34.246 --> 00:00:38.166
with pages as vertices and links between pages as edges.

00:00:38.166 --> 00:00:40.636
Or the social network of Facebook, Google, or Twitter

00:00:40.636 --> 00:00:45.419
is a graph where people are vertices and friendships are links.

00:00:45.419 --> 00:00:48.458
These companies would like to use this social graph to, say,

00:00:48.458 --> 00:00:51.461
suggest friends you might know based on the friends you already have.

00:00:51.461 --> 00:00:54.634
And making these suggestions depends on analyzing the graph.

00:00:54.634 --> 00:00:58.703
A traversal involves visiting all the nodes in the graph.

00:00:58.703 --> 00:01:01.746
Web crawlers must traverse the Web to catalog it for searching.

00:01:01.746 --> 00:01:04.869
How do they make sure they visit each web page once and only once?

00:01:04.869 --> 00:01:08.274
A traversal of the web graph will allow them to do that.

00:01:08.274 --> 00:01:10.327
Now, there's 2 approaches to traversing a graph,

00:01:10.327 --> 00:01:13.139
called depth-first traversal and breadth-first traversal.

00:01:13.139 --> 00:01:15.860
And so this picture is going to help us show the differences.

00:01:15.860 --> 00:01:18.638
In a depth-first traversal we begin at a particular node.

00:01:18.638 --> 00:01:21.494
So we're going to pick this one in the middle and we're going to label it 0.

00:01:21.494 --> 00:01:25.427
We're going to pick a neighbor we haven't visited yet, let's say this one here,

00:01:25.427 --> 00:01:28.848
and then we're going to do a depth-first traversal from that node.

00:01:28.848 --> 00:01:31.204
So we're going to continue down the chain, label this one, and so on.

00:01:31.204 --> 00:01:34.140
If we run out of unvisited neighbors, such as here,

00:01:34.140 --> 00:01:37.538
we pop back to a previously visited node and continue.

00:01:37.538 --> 00:01:40.817
Well, we don't have any neighbors here either, so we might pop back here.

00:01:40.817 --> 00:01:43.451
And now we're going to continue with our other unvisited neighbors.

00:01:43.451 --> 00:01:45.932
So we might come here next. We don't have any more.

00:01:45.932 --> 00:01:51.189
We pop back up. We might come here next, 4, 5, 6, pop all the way back up here.

00:01:51.189 --> 00:01:58.865
Now we might come down to this one here, move here, pop back up, and then go 9 and 10,

00:01:58.865 --> 00:01:58.866
eventually come back up to our original route node.

00:02:01.855 --> 00:02:05.329
We decide that there are no more unvisited neighbors and then we complete.

00:02:05.329 --> 00:02:09.509
In a breadth-first traversal we're going to begin with a node just as we did as in a DFS,

00:02:09.509 --> 00:02:11.473
and we're going to pick the same starting node,

00:02:11.473 --> 00:02:13.342
but now we're going to have a different algorithm.

00:02:13.342 --> 00:02:17.282
So once we're at a particular node and we're running a breadth-first traversal,

00:02:17.282 --> 00:02:21.518
what we're going to do is immediately visit all the neighbors that are 1 hop away

00:02:21.518 --> 00:02:24.267
before we do any descent at all.

00:02:24.267 --> 00:02:27.370
So first we're going to visit all the neighbors that are 1 hop away.

00:02:27.370 --> 00:02:31.773
Only then will we start to descend farther past any of these neighbors.

00:02:31.773 --> 00:02:33.464
So now we'll take the first one of these

00:02:33.464 --> 00:02:37.338
and we will visit all of its unvisited numbers that are 1 hop away.

00:02:37.338 --> 00:02:39.773
Well, now we're complete here, so now we're going to go to number 2.

00:02:39.773 --> 00:02:42.107
We're going to do a traversal here, we're complete there.

00:02:42.107 --> 00:02:45.081
We come back out to number 3. We continue to traverse here.

00:02:45.081 --> 00:02:48.895
So we go 1 hop away and then pop back up. Now we go to number 4.

00:02:48.895 --> 00:02:51.381
What are the ones that are 1 hop away from number 4?

00:02:51.381 --> 00:02:53.398
Now we're at 8 and so on.

00:02:53.398 --> 00:02:57.664
One thing you can notice here is that we have a structure that we call a frontier

00:02:57.664 --> 00:03:02.362
that forms the boundary between all the nodes that we've already visited

00:03:02.362 --> 00:03:04.465
and all the nodes that we haven't visited.

00:03:04.465 --> 00:03:06.104
And we see that as we continue our traversal

00:03:06.104 --> 00:03:10.068
that's just going to expand the frontier out and out and out again.

00:03:10.068 --> 00:03:14.505
So we'll complete this by going to number 9 and then eventually to number 10.

00:03:14.505 --> 00:03:16.345
Now, which one of these is better?

00:03:16.345 --> 00:03:18.922
Well, it depends on the problem, the structure of the graph, what you're looking for,

00:03:18.922 --> 00:03:21.703
if you're able to make good decisions about which way to go next.

00:03:21.703 --> 00:03:25.120
Generally, people will say that DFS requires less state,

00:03:25.120 --> 00:03:26.855
less temporary storage to run.

00:03:26.855 --> 00:03:30.850
But BFS, on the other hand, exposes more parallelism during the traversal,

00:03:30.850 --> 00:03:33.586
and specifically, because of this parallelism quality,

00:03:33.586 --> 00:03:37.084
today we're going to look at how to do BFS on the GPU.

