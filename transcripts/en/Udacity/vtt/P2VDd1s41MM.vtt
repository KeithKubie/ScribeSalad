WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Of course, this is only a very coarse analysis actually

00:00:03.000 --> 00:00:07.000
so you can have much better search trees and even for this tree here,

00:00:07.000 --> 00:00:09.000
you can do a better analysis because actually,

00:00:09.000 --> 00:00:14.000
this tree doesn't always have height K for the 3 cases that you branch in.

00:00:14.000 --> 00:00:17.000
In one of the cases, as you'll remember,

00:00:17.000 --> 00:00:19.000
you put 2 vertices into the vertex cover,

00:00:19.000 --> 00:00:22.000
so this one here, this one here, and here you put 2.

00:00:22.000 --> 00:00:24.000
Actually, that already decreases the size of the tree,

00:00:24.000 --> 00:00:29.000
so doing this type of analysis is out of the scope of this course actually.

00:00:29.000 --> 00:00:32.000
If you were to do this, then you find out that the size of the tree is

00:00:32.000 --> 00:00:35.000
approximately 2.4 to the power of K.

00:00:35.000 --> 00:00:37.000
And again, there are even better search trees for this.

00:00:37.000 --> 00:00:39.000
The main point however is this,

00:00:39.000 --> 00:00:41.000
look at what we have just done.

00:00:41.000 --> 00:00:45.000
We have just discovered a search tree for a vertex cover

00:00:45.000 --> 00:00:50.000
for which the size does not depend on the size of the input at all.

00:00:50.000 --> 00:00:53.000
The size of this search tree only depends on the integer K.

00:00:53.000 --> 00:01:00.000
It doesn't matter if we do it for a graph with 10 vertices, 100 vertices, or 1,000 vertices,

00:01:00.000 --> 00:01:03.000
the size of the search tree only depends on K,

00:01:03.000 --> 00:01:07.000
and it gets better if we implement this as an algorithm to solve vertex cover,

00:01:07.000 --> 00:01:09.000
so the decision version of vertex cover.

00:01:09.000 --> 00:01:11.000
Now look at this running time here and what that means.

00:01:11.000 --> 00:01:13.000
The running time here will be

00:01:13.000 --> 00:01:16.000
2.4 to the power of K times N to the power of some constant,

00:01:16.000 --> 99:59:59.000
depending on how you implement it, but into the power of 3 will do here.

