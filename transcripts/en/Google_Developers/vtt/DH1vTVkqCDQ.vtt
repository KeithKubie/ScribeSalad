WEBVTT
Kind: captions
Language: en

00:00:00.590 --> 00:00:04.920
SPEAKER 1: OK, so at the start
of the web, we just had tags,

00:00:04.920 --> 00:00:07.170
and you would build your
pages out all of these tags.

00:00:07.170 --> 00:00:10.530
And some tags looked
differently to others,

00:00:10.530 --> 00:00:12.930
and there was no
real reason for that.

00:00:12.930 --> 00:00:14.560
And since then, we've
had this process

00:00:14.560 --> 00:00:20.150
of trying to explain the magic
behind how pages are built up,

00:00:20.150 --> 00:00:22.851
and then give that
magic back to developers

00:00:22.851 --> 00:00:24.850
so can use that magic to
build different things.

00:00:24.850 --> 00:00:26.610
So an example of
that is that DOM

00:00:26.610 --> 00:00:28.870
explained the
structure of pages.

00:00:28.870 --> 00:00:30.950
CSS explained why
one heading was

00:00:30.950 --> 00:00:32.450
a different size
or another, and you

00:00:32.450 --> 00:00:34.957
could use that to style
things differently.

00:00:34.957 --> 00:00:36.540
But until recently,
we couldn't really

00:00:36.540 --> 00:00:39.710
explain why an
input element looked

00:00:39.710 --> 00:00:41.480
the way it did and
behaved the way it did

00:00:41.480 --> 00:00:44.240
and why a select element
was completely different,

00:00:44.240 --> 00:00:46.620
had a different
set of behaviors.

00:00:46.620 --> 00:00:50.000
Well, we have a new
explanation for that.

00:00:50.000 --> 00:00:51.420
We've got Web Components.

00:00:51.420 --> 00:00:54.312
And then the explanation
for how all that works,

00:00:54.312 --> 00:00:56.270
and what you do with it,
and how Polymer works,

00:00:56.270 --> 00:00:58.380
that is going to pull
forth from the face

00:00:58.380 --> 00:01:00.250
hole of our next speaker.

00:01:00.250 --> 00:01:01.630
It is Eric Bidelman.

00:01:01.630 --> 00:01:03.021
Big round of applause.

00:01:03.021 --> 00:01:07.344
[APPLAUSE]

00:01:07.344 --> 00:01:08.760
ERIC BIDELMAN: So
I'm from the US,

00:01:08.760 --> 00:01:10.218
so I'm going to
continue the trend.

00:01:10.218 --> 00:01:11.635
Woohoo!

00:01:11.635 --> 00:01:13.120
That's from my face hole.

00:01:13.120 --> 00:01:14.970
So a little bit about myself.

00:01:14.970 --> 00:01:16.390
My name is Eric Bidelman.

00:01:16.390 --> 00:01:17.250
I work on Polymer.

00:01:17.250 --> 00:01:19.666
I work on the Chrome team and
the Developer Relations team

00:01:19.666 --> 00:01:20.340
here at Google.

00:01:20.340 --> 00:01:21.250
You can follow me on Google+.

00:01:21.250 --> 00:01:22.470
You can follow me on Twitter.

00:01:22.470 --> 00:01:23.970
There's way too
much stuff to talk

00:01:23.970 --> 00:01:26.740
about in 30 minutes with
Polymer web component,

00:01:26.740 --> 00:01:29.770
so feel free to stop by
Office Hours, chat at me

00:01:29.770 --> 00:01:32.640
on these different channels.

00:01:32.640 --> 00:01:35.530
So for those that
have heard of Polymer,

00:01:35.530 --> 00:01:37.180
you've probably come
into the project.

00:01:37.180 --> 00:01:38.210
You've seen our website.

00:01:38.210 --> 00:01:40.140
And there is this really
nice little explanation

00:01:40.140 --> 00:01:41.306
of what the heck Polymer is.

00:01:41.306 --> 00:01:44.440
And it says, "Polymer a new
type of library for the web.

00:01:44.440 --> 00:01:46.220
It's built on top
of Web Components.

00:01:46.220 --> 00:01:48.330
And it's designed to
leverage the evolving web

00:01:48.330 --> 00:01:51.029
platform on modern browsers."

00:01:51.029 --> 00:01:51.820
And so that's cool.

00:01:51.820 --> 00:01:52.819
It's very inspirational.

00:01:52.819 --> 00:01:54.870
It's a good little
intro to the project.

00:01:54.870 --> 00:01:56.370
If you actually
look closer, you are

00:01:56.370 --> 00:01:58.100
going to see this little
diagram all over the place.

00:01:58.100 --> 00:01:59.683
We overload this in
a number of places

00:01:59.683 --> 00:02:02.160
to describe the different
pieces of Polymer.

00:02:02.160 --> 00:02:05.164
It's a nice Lego block
building of colors and stuff.

00:02:05.164 --> 00:02:07.580
And so when people start to
investigate Polymer, they say,

00:02:07.580 --> 00:02:08.810
well, is it polyfills?

00:02:08.810 --> 00:02:10.110
And yeah, it's polyfills.

00:02:10.110 --> 00:02:11.690
Is it a framework?

00:02:11.690 --> 00:02:13.790
Yeah, it's a framework.

00:02:13.790 --> 00:02:15.404
Is it UI widgets for the web?

00:02:15.404 --> 00:02:16.320
Yeah, it's that , too.

00:02:16.320 --> 00:02:17.730
We're working on that.

00:02:17.730 --> 00:02:21.065
It's also a set of monomers
that combine together

00:02:21.065 --> 00:02:23.190
to form a molecule if you're
a science geek like me

00:02:23.190 --> 00:02:26.060
and go on Wikipedia last night.

00:02:26.060 --> 00:02:28.040
But to really understand
what Polymer is,

00:02:28.040 --> 00:02:30.170
you actually have to
take a step back in time

00:02:30.170 --> 00:02:31.552
to the early days of the web.

00:02:31.552 --> 00:02:33.260
In order to understand
where we're going,

00:02:33.260 --> 00:02:35.020
you have to understand
where we've been.

00:02:35.020 --> 00:02:36.970
So this is what the
web looks like today.

00:02:36.970 --> 00:02:38.669
We'll transport
ourselves back in time

00:02:38.669 --> 00:02:40.210
to an earlier day
when the web looked

00:02:40.210 --> 00:02:43.464
like this, or at least
Google.com in '98.

00:02:43.464 --> 00:02:45.880
And this is probably what your
first web page looked like.

00:02:45.880 --> 00:02:47.680
You had a couple of
elements to play with.

00:02:47.680 --> 00:02:49.055
You had things
like the form tag.

00:02:49.055 --> 00:02:50.760
You had selects.

00:02:50.760 --> 00:02:52.230
You had dropdowns.

00:02:52.230 --> 00:02:56.000
You had list elements,
radio buttons.

00:02:56.000 --> 00:02:58.660
And so the platform was pretty
limiting to what we could do,

00:02:58.660 --> 00:03:01.300
but we didn't really need
anything more than that.

00:03:01.300 --> 00:03:02.758
Of course, since
we're in the '90s,

00:03:02.758 --> 00:03:06.430
we have Clippy's second
cousin, which is Selecty,

00:03:06.430 --> 00:03:09.390
and he's telling us that we're
going to build a website today.

00:03:09.390 --> 00:03:11.110
Oh, thank you.

00:03:11.110 --> 00:03:13.084
So Active Select is a
really awesome element.

00:03:13.084 --> 00:03:14.500
And it's worth
actually discussing

00:03:14.500 --> 00:03:15.670
this for a few minutes.

00:03:15.670 --> 00:03:18.220
With Select, you can put
some options in this thing,

00:03:18.220 --> 00:03:20.220
and it just knows what
to do with those options.

00:03:20.220 --> 00:03:22.040
It knows what to do with
these [? chore ?] elements.

00:03:22.040 --> 00:03:23.956
And what you get out of
it is some default UI.

00:03:23.956 --> 00:03:26.200
I don't have to touch
CSS or do anything crazy.

00:03:26.200 --> 00:03:27.116
So that's really cool.

00:03:27.116 --> 00:03:28.154
This works by itself.

00:03:28.154 --> 00:03:30.070
Think of it as an early
component for the web,

00:03:30.070 --> 00:03:32.799
and this is native
to the platform.

00:03:32.799 --> 00:03:34.590
This is your classic
example of running out

00:03:34.590 --> 00:03:36.930
of schwag at a conference.

00:03:36.930 --> 00:03:39.456
Nothing is available except
for that XXL T-shirt.

00:03:39.456 --> 00:03:41.080
But the point I make
here is that we're

00:03:41.080 --> 00:03:43.560
configuring these elements,
not with a bunch of script,

00:03:43.560 --> 00:03:45.160
but with just a
little bit of HTML.

00:03:45.160 --> 00:03:47.540
Just plopping an
attribute on these options

00:03:47.540 --> 00:03:49.140
and you get a
different behavior.

00:03:49.140 --> 00:03:51.150
So these are grayed out,
and that XL, of course,

00:03:51.150 --> 00:03:54.740
is the only one
that's available.

00:03:54.740 --> 00:03:57.370
And you can move attributes
to the Select element itself.

00:03:57.370 --> 00:03:59.700
So I can say size
equals 4, and I

00:03:59.700 --> 00:04:01.800
can put the multiple
attribute on this element,

00:04:01.800 --> 00:04:04.450
and it completely changes
the way this element behaves.

00:04:04.450 --> 00:04:06.510
Now the users can select
multiple items, right?

00:04:06.510 --> 00:04:08.200
And we no longer
have a dropdown.

00:04:08.200 --> 00:04:10.617
We have this multiselect
widget, which is really cool.

00:04:10.617 --> 00:04:12.950
Again, just by changing some
attributes on this element,

00:04:12.950 --> 00:04:15.274
it knows what to do with that.

00:04:15.274 --> 00:04:16.940
And you can put other
stuff in this tag.

00:04:16.940 --> 00:04:18.730
It's smarter than
you actually think.

00:04:18.730 --> 00:04:20.140
We can put the optgroup in.

00:04:20.140 --> 00:04:23.120
We'd give it a label, have some
options in there, and instead

00:04:23.120 --> 00:04:25.944
of your common dropdown, you
get a completely different UI

00:04:25.944 --> 00:04:27.110
again, which is really cool.

00:04:27.110 --> 00:04:29.120
So super versatile,
if you think about it.

00:04:29.120 --> 00:04:30.619
And I haven't touched
any code here.

00:04:30.619 --> 00:04:33.339
I'm just declaring the stuff.

00:04:33.339 --> 00:04:34.630
Select doesn't take everything.

00:04:34.630 --> 00:04:35.750
It actually is very picky.

00:04:35.750 --> 00:04:36.810
It knows what it wants.

00:04:36.810 --> 00:04:37.980
You can only put options.

00:04:37.980 --> 00:04:39.640
You can only put
optgroups in there.

00:04:39.640 --> 00:04:41.087
If you try to jam
an LI in there,

00:04:41.087 --> 00:04:43.420
for instance, the parser's
just going to throw that out,

00:04:43.420 --> 00:04:46.272
and it's not going to
render that in my dropdown.

00:04:46.272 --> 00:04:48.605
If we're building components,
we want that ability, too,

00:04:48.605 --> 00:04:51.830
to selectively choose what
markup we want to deal with.

00:04:54.426 --> 00:04:55.800
Select is really
great by itself.

00:04:55.800 --> 00:04:56.800
It has all this ability.

00:04:56.800 --> 00:04:58.520
I can configure it
with attributes.

00:04:58.520 --> 00:05:00.980
Now if you put it in a different
context, such as a form,

00:05:00.980 --> 00:05:02.355
it takes on new
responsibilities.

00:05:02.355 --> 00:05:03.530
It takes on new meaning.

00:05:03.530 --> 00:05:05.700
So now when it's in
my form, somebody's

00:05:05.700 --> 00:05:08.380
going to select this,
give it a couple values,

00:05:08.380 --> 00:05:10.740
and that name attribute is
going to be submitted along

00:05:10.740 --> 00:05:11.602
with the form.

00:05:11.602 --> 00:05:12.560
So this is really cool.

00:05:12.560 --> 00:05:14.780
We're composing, now, a
bigger and bigger application

00:05:14.780 --> 00:05:17.951
based on these
smaller components.

00:05:17.951 --> 00:05:21.250
And, of course, it's got a
slew of properties and methods

00:05:21.250 --> 00:05:22.690
that it has on
its DOM interface.

00:05:22.690 --> 00:05:24.670
And I apologize if
that's very small,

00:05:24.670 --> 00:05:26.590
and you can't really see it.

00:05:26.590 --> 00:05:28.910
Selected index, for instance,
is a property on this DOM

00:05:28.910 --> 00:05:30.860
interface that doesn't
really make sense

00:05:30.860 --> 00:05:32.400
as an HTML attribute,
but it totally

00:05:32.400 --> 00:05:33.483
makes sense in JavaScript.

00:05:33.483 --> 00:05:36.500
I want to be able to get at
the option that's selected.

00:05:36.500 --> 00:05:39.872
And Clippy-- excuse me,
Selecty-- also fires events.

00:05:39.872 --> 00:05:41.330
When something
interesting happens,

00:05:41.330 --> 00:05:43.200
I get DOM events for this.

00:05:43.200 --> 00:05:46.960
So Select is probably way more
useful than you ever thought.

00:05:46.960 --> 00:05:49.550
Let's flash forward today
and see where we are.

00:05:49.550 --> 00:05:52.035
Quick gut check--
a tab component

00:05:52.035 --> 00:05:54.160
is sort of the quintessential
component for the web

00:05:54.160 --> 00:05:55.057
these days.

00:05:55.057 --> 00:05:56.140
So where are we with this?

00:05:56.140 --> 00:05:58.014
What do we have to do
in order to build a tab

00:05:58.014 --> 00:05:58.889
component on the web?

00:05:58.889 --> 00:06:01.263
When we first started off, it
looked something like this.

00:06:01.263 --> 00:06:02.640
There's a little bit of markup.

00:06:02.640 --> 00:06:03.680
We're overloading ULs.

00:06:03.680 --> 00:06:05.461
We're overloading LIs.

00:06:05.461 --> 00:06:07.960
And just at the bottom there,
we call a little bit of script

00:06:07.960 --> 00:06:10.146
to activate this thing
and get it going.

00:06:10.146 --> 00:06:11.520
And over the years,
we've sort of

00:06:11.520 --> 00:06:14.400
added on more and more
JavaScript, less and less

00:06:14.400 --> 00:06:16.916
markup, and now we're at the
point where a lot of the frames

00:06:16.916 --> 00:06:19.737
are just jamming in gobs
and gobs of JavaScript.

00:06:19.737 --> 00:06:22.070
And that's really because the
platform itself has lacked

00:06:22.070 --> 00:06:24.900
express that we needed
to it as we've evolved.

00:06:24.900 --> 00:06:28.330
The platform hasn't evolved
with us, unfortunately.

00:06:28.330 --> 00:06:30.330
So we're hoping to
try to change that.

00:06:30.330 --> 00:06:31.510
So this is what people
ended up doing, right?

00:06:31.510 --> 00:06:32.827
Let's pile on the JavaScript.

00:06:32.827 --> 00:06:34.660
Let's pile on loads and
loads of JavaScript.

00:06:34.660 --> 00:06:36.100
And ultimately,
there's something

00:06:36.100 --> 00:06:39.050
wrong about this picture.

00:06:39.050 --> 00:06:41.770
The story is no brighter on
the other side of the coin.

00:06:41.770 --> 00:06:43.720
So the markup is
equally as atrocious

00:06:43.720 --> 00:06:46.530
as where we've sort of moved
to in the script world.

00:06:46.530 --> 00:06:47.440
This is Gmail source.

00:06:47.440 --> 00:06:50.191
If you open up the dev tools,
at least the markup side,

00:06:50.191 --> 00:06:51.690
I have no idea
what's going on here.

00:06:51.690 --> 00:06:53.023
This is not maintainable at all.

00:06:53.023 --> 00:06:56.350
I know they've done this on
purpose, but as a developer,

00:06:56.350 --> 00:06:58.190
this is actually how
we build web apps.

00:06:58.190 --> 00:06:58.966
It's a nightmare.

00:06:58.966 --> 00:07:01.590
It's absolutely a nightmare from
the script side and the market

00:07:01.590 --> 00:07:02.950
size.

00:07:02.950 --> 00:07:03.840
What?

00:07:03.840 --> 00:07:05.325
What?

00:07:05.325 --> 00:07:08.462
Nobody likes this.

00:07:08.462 --> 00:07:10.670
So we've moved really far
away from where we started,

00:07:10.670 --> 00:07:12.670
from the Select, the
declarative nature of HTML,

00:07:12.670 --> 00:07:13.901
what the web is good at.

00:07:13.901 --> 00:07:16.400
And now we're a sad panda in
the corner with a small balloon

00:07:16.400 --> 00:07:18.050
instead of the large balloons.

00:07:18.050 --> 00:07:19.070
I don't know why I
chose balloons here.

00:07:19.070 --> 00:07:20.820
I think it's just because
I feel very deflated when

00:07:20.820 --> 00:07:22.250
I think about all this stuff.

00:07:22.250 --> 00:07:23.260
But it makes me sad.

00:07:23.260 --> 00:07:26.170
We can do much, much better.

00:07:26.170 --> 00:07:29.090
So what if markup
was meaningful again?

00:07:29.090 --> 00:07:32.930
If you take the Gmail chat
example, for instance--

00:07:32.930 --> 00:07:35.100
let me bump this up
just a little bit.

00:07:35.100 --> 00:07:36.850
If you take the
Gmail chat example,

00:07:36.850 --> 00:07:39.670
and you can imagine a world
in the case of Web Components,

00:07:39.670 --> 00:07:40.660
where you're
declaring everything,

00:07:40.660 --> 00:07:41.750
and it's very descriptive.

00:07:41.750 --> 00:07:45.370
You know exactly what's going
on in this web application.

00:07:45.370 --> 00:07:48.030
So I have a Hangouts module
element that I've created.

00:07:48.030 --> 00:07:51.096
Within that, there's components
such as a Hangout chat.

00:07:51.096 --> 00:07:51.970
I know who it's from.

00:07:51.970 --> 00:07:54.280
It's from Paul and Eddie,
just by an HTML attribute.

00:07:54.280 --> 00:07:57.830
That's how you configure
this tag, their profile ID.

00:07:57.830 --> 00:07:59.920
Inside of that there is
a discussion going on.

00:07:59.920 --> 00:08:02.090
And inside of that,
there's Hangout messages,

00:08:02.090 --> 00:08:05.457
each describing sort of each
individual chat message.

00:08:05.457 --> 00:08:06.790
So I have a prototype with that.

00:08:06.790 --> 00:08:07.880
I can talk to Paul Irish.

00:08:07.880 --> 00:08:09.210
He's loving the Web
Components thing.

00:08:09.210 --> 00:08:09.815
Hey, man.

00:08:09.815 --> 00:08:11.991
Hey, man.

00:08:11.991 --> 00:08:13.740
So everything is
completely self-contained

00:08:13.740 --> 00:08:16.050
because it's all a Web
Components, all using shadow

00:08:16.050 --> 00:08:16.350
DOM.

00:08:16.350 --> 00:08:17.474
I can chat with Larry, too.

00:08:17.474 --> 00:08:19.450
He's not going to
say much back to me.

00:08:19.450 --> 00:08:21.140
'Suuuup.

00:08:21.140 --> 00:08:24.110
And so that's really awesome,
because I know exactly--

00:08:24.110 --> 00:08:26.860
I know exactly what's
going on in this picture.

00:08:26.860 --> 00:08:27.984
I don't have to guess.

00:08:27.984 --> 00:08:29.400
And that's because
we can get back

00:08:29.400 --> 00:08:31.390
to a platform that
actually makes sense again.

00:08:35.370 --> 00:08:37.520
So that's the universe,
at least, we conceptually

00:08:37.520 --> 00:08:39.570
feel is relevant on
the Polymer team.

00:08:39.570 --> 00:08:41.950
We want to get back to that
sort of declarative nature

00:08:41.950 --> 00:08:43.366
of the web and
what it was good at

00:08:43.366 --> 00:08:46.150
and reuse HTML and DOM like
it's first-class citizens again.

00:08:48.820 --> 00:08:50.340
So let's jump into Polymer.

00:08:50.340 --> 00:08:51.289
Quick spoiler alert.

00:08:51.289 --> 00:08:53.080
Standards are the bottom
of all this stuff.

00:08:53.080 --> 00:08:54.870
So everything I'm going
to talk about today--

00:08:54.870 --> 00:08:56.940
and I won't take a deep
dive into the standards,

00:08:56.940 --> 00:09:01.590
but it's all based on
four WC3 specifications.

00:09:01.590 --> 00:09:05.700
So we have templates being
able to define a section of DOM

00:09:05.700 --> 00:09:08.210
to be inert and able to
stamp that out for later use.

00:09:08.210 --> 00:09:09.800
That's the template tag.

00:09:09.800 --> 00:09:14.220
HTML imports-- so bundling
up CSS JavaScript and HTML

00:09:14.220 --> 00:09:15.820
in a single unit
and delivering that

00:09:15.820 --> 00:09:17.190
to another application,
that's great

00:09:17.190 --> 00:09:18.800
if we want to have
a set of components

00:09:18.800 --> 00:09:21.712
and deliver that
to some end user.

00:09:21.712 --> 00:09:22.670
Custom elements, right?

00:09:22.670 --> 00:09:23.270
The bread and butter.

00:09:23.270 --> 00:09:25.790
Being able to define a new tag
in HTML is super important.

00:09:25.790 --> 00:09:27.950
Teach the browser new tricks.

00:09:27.950 --> 00:09:30.347
Hangout module, Hangout
message, et cetera.

00:09:30.347 --> 00:09:32.430
And shadow DOM is sort of
the bedrock of all this.

00:09:32.430 --> 00:09:34.260
And you don't have to use
it, but you can totally

00:09:34.260 --> 00:09:36.135
use it if you want things
like encapsulation.

00:09:36.135 --> 00:09:38.093
So for the first time
ever, we have the ability

00:09:38.093 --> 00:09:39.730
to encapsulate markup,
encapsulate DOM,

00:09:39.730 --> 00:09:41.340
and encapsulate styles.

00:09:41.340 --> 00:09:43.270
So styles from your page
that's embedding you,

00:09:43.270 --> 00:09:44.172
they don't bleed in.

00:09:44.172 --> 00:09:46.380
And your styles don't bleed
out to the outside world,

00:09:46.380 --> 00:09:48.380
and that's super important.

00:09:48.380 --> 00:09:50.400
You can see by this
chart here that we

00:09:50.400 --> 00:09:52.860
have a lot of
implementation going on

00:09:52.860 --> 00:09:56.040
in Chrome, whether it's
in-stable or behind a flag.

00:09:56.040 --> 00:09:57.660
Firefox is gung-ho
about all this.

00:09:57.660 --> 00:09:59.940
There's open bugs for
all these specifications.

00:09:59.940 --> 00:10:02.830
Opera gets some of these for
free with their move to Blink.

00:10:02.830 --> 00:10:05.920
And I just added Safari,
who is going to enable,

00:10:05.920 --> 00:10:07.970
as of today, the
template element.

00:10:07.970 --> 00:10:09.781
So a lot of progress
on the native front.

00:10:09.781 --> 00:10:10.280
Woo!

00:10:10.280 --> 00:10:10.740
Yeah.

00:10:10.740 --> 00:10:11.240
Yeah.

00:10:11.240 --> 00:10:11.895
Seth likes it.

00:10:11.895 --> 00:10:14.520
A lot of progress on the native
front with a lot of this stuff,

00:10:14.520 --> 00:10:16.917
and that's super exciting.

00:10:16.917 --> 00:10:17.750
But what is Polymer?

00:10:17.750 --> 00:10:19.730
So I sort of alluded
to this diagram before.

00:10:19.730 --> 00:10:23.170
Let's jump into it
just a little bit.

00:10:23.170 --> 00:10:24.812
The first is it is
a set of polyfills.

00:10:24.812 --> 00:10:26.270
So we want to enable
web developers

00:10:26.270 --> 00:10:27.780
to use this stuff today.

00:10:27.780 --> 00:10:29.010
It's really exciting stuff.

00:10:29.010 --> 00:10:30.430
It's going to change the
way we do web development.

00:10:30.430 --> 00:10:32.263
We want you guys to
play with it and give us

00:10:32.263 --> 00:10:33.840
feedback on all the specs.

00:10:33.840 --> 00:10:36.360
So the red part of this
diagram are those polyfills,

00:10:36.360 --> 00:10:38.944
things like Pointer Events and
Shadow DOM the Custom Elements.

00:10:38.944 --> 00:10:40.860
That part is really cool
because that actually

00:10:40.860 --> 00:10:42.800
goes away over time as
the browsers implement

00:10:42.800 --> 00:10:43.750
these native APIs.

00:10:43.750 --> 00:10:45.800
So that part kind of
dwindles to nothing.

00:10:45.800 --> 00:10:48.730
And the rest of Polymer sort
of lives on, gets faster,

00:10:48.730 --> 00:10:51.550
gets better, because it's
using the native stuff.

00:10:51.550 --> 00:10:54.370
The sugaring layer, the yellow
layer of Polymer, that middle

00:10:54.370 --> 00:10:56.530
section is sort of
our opinionated way

00:10:56.530 --> 00:11:00.665
to use all these API and
specifications together.

00:11:00.665 --> 00:11:02.040
You can use Shadow
DOM by itself.

00:11:02.040 --> 00:11:03.840
You can use HTML
imports by itself

00:11:03.840 --> 00:11:06.027
and all these different
specs by themselves.

00:11:06.027 --> 00:11:07.610
But we want to sort
of help developers

00:11:07.610 --> 00:11:10.107
learn how to use them together
in a really coherent way.

00:11:10.107 --> 00:11:11.940
And we also provide
things like data binding

00:11:11.940 --> 00:11:14.277
and some other
conveniences in this layer.

00:11:14.277 --> 00:11:16.860
Ultimately, we want to make your
life more productive as a web

00:11:16.860 --> 00:11:18.220
developer.

00:11:18.220 --> 00:11:20.230
And the last piece, and
probably the most work

00:11:20.230 --> 00:11:22.230
in progress to this point,
is the UI components,

00:11:22.230 --> 00:11:24.240
the green layer at the very top.

00:11:24.240 --> 00:11:26.530
So again, everything
below this uses the core.

00:11:26.530 --> 00:11:28.520
It uses the platform polyfills.

00:11:28.520 --> 00:11:30.770
And we want to give you
ability to just drop

00:11:30.770 --> 00:11:32.824
a component on your
page, a UI component that

00:11:32.824 --> 00:11:33.740
does the right things.

00:11:33.740 --> 00:11:35.540
It's responsive by default.

00:11:35.540 --> 00:11:38.070
It's 60 FPS, and it's using
this underlying stack.

00:11:41.430 --> 00:11:43.490
So philosophy and goals.

00:11:43.490 --> 00:11:44.880
We keep it simple on the team.

00:11:44.880 --> 00:11:47.650
The first and probably the
most core fundamental aspect

00:11:47.650 --> 00:11:49.330
of the project
and Web Components

00:11:49.330 --> 00:11:50.640
is everything is an element.

00:11:50.640 --> 00:11:51.639
We think that's awesome.

00:11:51.639 --> 00:11:53.960
We think HTML should be
a first-class citizen

00:11:53.960 --> 00:11:54.730
again to the web.

00:11:54.730 --> 00:11:57.000
We think it's cool, and DOM
feels actually really good

00:11:57.000 --> 00:11:58.172
to work with again.

00:11:58.172 --> 00:11:59.880
Unless you start to
play with this stuff,

00:11:59.880 --> 00:12:01.505
it actually makes a
lot of sense again.

00:12:01.505 --> 00:12:03.954
You have to write
tons and tons of code.

00:12:03.954 --> 00:12:04.870
Eliminate boilerplate.

00:12:04.870 --> 00:12:07.286
We want to, again, make your
life more productive as a web

00:12:07.286 --> 00:12:08.090
developer.

00:12:08.090 --> 00:12:10.267
And so we want to
remove-- even in 2013,

00:12:10.267 --> 00:12:11.600
it's hard to be a web developer.

00:12:11.600 --> 00:12:12.350
It's very tedious.

00:12:12.350 --> 00:12:15.079
You have to remember things like
touch events, pointer events,

00:12:15.079 --> 00:12:16.120
and all this other stuff.

00:12:16.120 --> 00:12:19.210
We want to remove all that.

00:12:19.210 --> 00:12:22.100
The last piece is to utilize
the modern web platform.

00:12:22.100 --> 00:12:24.030
So if you have a
hand on the steering,

00:12:24.030 --> 00:12:25.530
you have a hand on
the gear shifter.

00:12:25.530 --> 00:12:27.980
But you always have your eye
sort of looking backwards.

00:12:27.980 --> 00:12:30.063
You can never really
progress the platform forward

00:12:30.063 --> 00:12:33.920
and really show developers
and the web what can be done.

00:12:33.920 --> 00:12:35.840
So we're only supporting
the latest version

00:12:35.840 --> 00:12:37.240
of modern browsers.

00:12:37.240 --> 00:12:39.490
Turns out it's also very
hard to polyfill things

00:12:39.490 --> 00:12:41.190
like Shadow DOM for old IE.

00:12:44.332 --> 00:12:45.540
So let's talk about elements.

00:12:45.540 --> 00:12:47.623
We're going to go up and
talk about that top layer

00:12:47.623 --> 00:12:48.730
of the stack.

00:12:48.730 --> 00:12:50.490
And the mantra here,
if you remember,

00:12:50.490 --> 00:12:52.200
is that everything
is an element.

00:12:52.200 --> 00:12:55.712
Everything is an element.

00:12:55.712 --> 00:12:57.670
So what do we mean by
everything is an element?

00:12:57.670 --> 00:12:58.990
Well, this is one example.

00:12:58.990 --> 00:13:01.590
If Ajax was just part
of the browser today,

00:13:01.590 --> 00:13:03.335
you would probably
use it as an element.

00:13:03.335 --> 00:13:05.710
And you probably wouldn't
write a lot of JavaScript code.

00:13:05.710 --> 00:13:07.126
And so that's
exactly the approach

00:13:07.126 --> 00:13:09.550
we've taken with the
Polymer Ajax tag.

00:13:09.550 --> 00:13:11.240
The way you configure
this tag is you

00:13:11.240 --> 00:13:14.210
give it a URL, just
an HTML attribute,

00:13:14.210 --> 00:13:15.719
very akin to the Select element.

00:13:15.719 --> 00:13:17.760
You're configuring this
element using attributes.

00:13:17.760 --> 00:13:18.809
It's all declarative.

00:13:18.809 --> 00:13:20.850
And then you're passing
in a parameters attribute

00:13:20.850 --> 00:13:24.267
as well with some additional
parameters for that URL.

00:13:24.267 --> 00:13:26.600
And so instead of writing a
bunch of XHR code every time

00:13:26.600 --> 00:13:29.690
I start an app, I'm
just basically dropping

00:13:29.690 --> 00:13:32.250
this on my page, and it knows
exactly what to do with that.

00:13:32.250 --> 00:13:33.875
And I'm configuring
it from the outside

00:13:33.875 --> 00:13:36.300
via parameters, attributes.

00:13:36.300 --> 00:13:38.200
And I wire up a little
bit of JavaScript.

00:13:38.200 --> 00:13:40.680
Just like the Select element
fires a change event when

00:13:40.680 --> 00:13:42.530
somebody selects something
new, this element

00:13:42.530 --> 00:13:44.980
is going to fire a
Polymer response event.

00:13:44.980 --> 00:13:46.920
And then I can
subscribe to that,

00:13:46.920 --> 00:13:49.226
fetch this element from
the DOM, subscribe to that,

00:13:49.226 --> 00:13:51.100
and just use the same
techniques I'm used to.

00:13:51.100 --> 00:13:55.040
JSON.parse, parse the
response from this JSON feed.

00:13:55.040 --> 00:13:56.570
This element has also an API.

00:13:56.570 --> 00:13:58.130
Just like in the
case of Select, it

00:13:58.130 --> 00:14:00.820
has API methods I can
call on its DOM interface.

00:14:00.820 --> 00:14:02.854
So there's this go
method that I can call.

00:14:02.854 --> 00:14:04.520
And so this feels
really good, because I

00:14:04.520 --> 00:14:05.936
can reuse this
each and every time

00:14:05.936 --> 00:14:07.570
I need Ajax in my application.

00:14:10.482 --> 00:14:12.440
Everything is an element,
thinking about layout

00:14:12.440 --> 00:14:14.070
using nothing but elements.

00:14:14.070 --> 00:14:16.920
So I don't know how many people
have tried to use CSS Flexbox,

00:14:16.920 --> 00:14:18.030
but it's pretty painful.

00:14:18.030 --> 00:14:21.140
It's a great-- this one guy.

00:14:21.140 --> 00:14:22.880
It's an awesome,
awesome CSS feature.

00:14:22.880 --> 00:14:24.620
We've needed this
for a long time.

00:14:24.620 --> 00:14:26.600
But it's still very
intricate, and you

00:14:26.600 --> 00:14:28.560
have to know a lot
of things about it.

00:14:28.560 --> 00:14:30.310
So if you remember for
the case of Select,

00:14:30.310 --> 00:14:32.080
Select was able to
rearrange its children,

00:14:32.080 --> 00:14:34.737
give me some default UI
without much work at all.

00:14:34.737 --> 00:14:36.320
And the approach on
the Polymer team ,

00:14:36.320 --> 00:14:39.270
what we've taken is let's make
a Polymer flex layout tag.

00:14:39.270 --> 00:14:42.264
And inside of it, its children
just know to be flex children.

00:14:42.264 --> 00:14:44.430
And so now I can configure
this tag with attributes.

00:14:44.430 --> 00:14:45.635
So I can change vertical.

00:14:45.635 --> 00:14:47.067
I can just remove
that attribute,

00:14:47.067 --> 00:14:49.400
and the element just knows
what to do with its children,

00:14:49.400 --> 00:14:52.590
and, of course, default back
to a row representation.

00:14:52.590 --> 00:14:56.610
I can toggle the flex attribute
on its children elements.

00:14:56.610 --> 00:14:58.370
And, of course, it'll
do the right thing.

00:14:58.370 --> 00:14:59.828
So it takes a lot
of the burden out

00:14:59.828 --> 00:15:03.280
of knowing some of these new
technologies under the hood.

00:15:03.280 --> 00:15:04.890
I can literally
just have this thing

00:15:04.890 --> 00:15:06.120
to do what it's
supposed to do, which

00:15:06.120 --> 00:15:07.620
is arrange my page
in a certain way.

00:15:11.320 --> 00:15:13.530
It's conceptually interesting
to think about elements

00:15:13.530 --> 00:15:14.590
that actually don't
render anything.

00:15:14.590 --> 00:15:16.173
So Ajax, it's not
rendering something.

00:15:16.173 --> 00:15:17.320
It's a utility element.

00:15:17.320 --> 00:15:19.255
It's doing something
on the page.

00:15:19.255 --> 00:15:20.130
Same with the layout.

00:15:20.130 --> 00:15:21.504
It's doing something
on the page.

00:15:21.504 --> 00:15:22.990
It's not actually
showing me stuff.

00:15:22.990 --> 00:15:25.364
And we've been playing around
with a lot of these non-- I

00:15:25.364 --> 00:15:28.030
call them non-visual utility
elements, things like layout

00:15:28.030 --> 00:15:30.514
for CSS grid and flexbox.

00:15:30.514 --> 00:15:31.930
We have a media
query element that

00:15:31.930 --> 00:15:34.780
just handles doing media queries
and firing events for that.

00:15:34.780 --> 00:15:36.890
So you just drop this
in and reuse this,

00:15:36.890 --> 00:15:39.620
and you don't have to
worry about stuff anymore.

00:15:39.620 --> 00:15:41.860
Tags for dealing with a
single-page application

00:15:41.860 --> 00:15:43.814
or shared state.

00:15:43.814 --> 00:15:45.730
Polymer local storage
is actually pretty cool.

00:15:45.730 --> 00:15:47.711
So if you tie this up
to another element,

00:15:47.711 --> 00:15:49.210
you get some change
events, you pass

00:15:49.210 --> 00:15:50.668
some data using
data binding to it,

00:15:50.668 --> 00:15:52.500
and I'll show you
an example of that.

00:15:52.500 --> 00:15:54.083
And you persist data
to local storage.

00:15:54.083 --> 00:15:56.460
You don't have to worry about
hooking that up yourself.

00:15:56.460 --> 00:15:58.567
And then other things,
like Polymer signals,

00:15:58.567 --> 00:16:00.900
being able to broadcast
messages to different components

00:16:00.900 --> 00:16:02.485
on the page or to
the broader page.

00:16:02.485 --> 00:16:04.110
So conceptually it's
a little bit weird

00:16:04.110 --> 00:16:07.190
to drop the stuff on your page,
and it doesn't render any UI.

00:16:07.190 --> 00:16:08.701
It just, for instance,
reads a file.

00:16:08.701 --> 00:16:09.200
What?

00:16:09.200 --> 00:16:10.370
A tag that reads a file?

00:16:10.370 --> 00:16:11.176
That's crazy.

00:16:11.176 --> 00:16:12.800
But once you get into
the Polymer core,

00:16:12.800 --> 00:16:14.424
it starts to really,
really make sense.

00:16:17.060 --> 00:16:19.080
And on top of that, we
have a set of UI elements

00:16:19.080 --> 00:16:19.910
that we're working on.

00:16:19.910 --> 00:16:21.090
So this is what people
think about when

00:16:21.090 --> 00:16:23.940
they think of components-- the
UI that you plop on your page.

00:16:23.940 --> 00:16:26.340
And your usual
suspects apply here.

00:16:26.340 --> 00:16:28.959
We have things like
a Polymer UI card.

00:16:28.959 --> 00:16:31.292
And basically what you do is
you drop this on your page,

00:16:31.292 --> 00:16:33.166
and you get things like
swiping functionality

00:16:33.166 --> 00:16:35.300
for free with touch
events and pointer events.

00:16:35.300 --> 00:16:37.534
It's pretty nice.

00:16:37.534 --> 00:16:38.700
We have a sidebar menu item.

00:16:38.700 --> 00:16:40.510
So you just drop this
markup on your page,

00:16:40.510 --> 00:16:42.717
and you get the
usual site navigation

00:16:42.717 --> 00:16:45.300
with a little thing that follows
you, and it's got animations.

00:16:45.300 --> 00:16:47.371
It's all 60 FPS.

00:16:47.371 --> 00:16:48.870
But the really cool
thing about this

00:16:48.870 --> 00:16:50.760
is it's just a bunch
of markup, right?

00:16:50.760 --> 00:16:53.390
So I'm not writing any code to
actually reuse this element.

00:16:53.390 --> 00:16:56.900
I'm just declaring Polymer
UI side menu on my page.

00:16:56.900 --> 00:16:58.780
It's got attributes,
like Selected,

00:16:58.780 --> 00:17:00.210
that I configure it with.

00:17:00.210 --> 00:17:02.980
Labels, so we're using parts
of the platform already.

00:17:02.980 --> 00:17:05.230
Inside of it, it knows what
to do with its children.

00:17:05.230 --> 00:17:07.069
And it expects a certain
type of children.

00:17:07.069 --> 00:17:09.437
It expects Polymer
UI submenu item.

00:17:09.437 --> 00:17:12.020
And so that's what's rendering
all this, just a bunch of tags.

00:17:12.020 --> 00:17:13.436
So it's really
easy as a developer

00:17:13.436 --> 00:17:16.059
to know what's going on here
and to maintain and to use.

00:17:20.493 --> 00:17:22.534
It's important to note
that Web Components really

00:17:22.534 --> 00:17:25.640
lend themselves very nicely to
composability and reusability.

00:17:25.640 --> 00:17:28.520
So we're actually using--
for a lot of the UI elements

00:17:28.520 --> 00:17:31.030
that we're creating, we're
using these utility elements

00:17:31.030 --> 00:17:31.880
under the hood.

00:17:31.880 --> 00:17:33.790
So, for instance,
Polymer selector

00:17:33.790 --> 00:17:36.230
is this sort of selecting
widget that manages state

00:17:36.230 --> 00:17:37.615
and selecting those menu items.

00:17:37.615 --> 00:17:38.940
And so we're reusing stuff.

00:17:38.940 --> 00:17:40.750
We don't have to reinvent the
wheel each and every time we

00:17:40.750 --> 00:17:41.640
start a new app.

00:17:41.640 --> 00:17:43.515
We can just compose an
app out of components.

00:17:46.100 --> 00:17:47.800
So this is the world
we're creating.

00:17:47.800 --> 00:17:50.410
We hope is really
exciting for developers.

00:17:50.410 --> 00:17:52.760
The universe is, as I
see it-- this is actually

00:17:52.760 --> 00:17:54.260
the video I played
at the beginning.

00:17:54.260 --> 00:17:55.426
It is a Polymer application.

00:17:55.426 --> 00:17:57.780
It's written by John
McCutcheon on the Dart team.

00:17:57.780 --> 00:18:00.416
He used the Polymer Dart port.

00:18:00.416 --> 00:18:02.290
And this is pretty cool,
because I absolutely

00:18:02.290 --> 00:18:04.200
know zero about WebGL.

00:18:04.200 --> 00:18:06.260
But I do know HTML very well.

00:18:06.260 --> 00:18:08.110
And so he created a
bunch of custom elements

00:18:08.110 --> 00:18:10.790
for working with 3-D Scene.

00:18:10.790 --> 00:18:12.749
And so this is just
wrapping his WebGL library.

00:18:12.749 --> 00:18:14.373
You can see I can
change the Earth just

00:18:14.373 --> 00:18:16.390
by changing an attribute
on this element.

00:18:16.390 --> 00:18:20.150
I can scroll up and change
the texture of the sun.

00:18:20.150 --> 00:18:22.660
And just by changing a source
attribute to a new URL,

00:18:22.660 --> 00:18:24.625
WebGL is updating that texture.

00:18:24.625 --> 00:18:27.400
We'll make it the--
yep, Web Components

00:18:27.400 --> 00:18:28.954
are the center of
our solar system.

00:18:28.954 --> 00:18:29.870
So that's really cool.

00:18:29.870 --> 00:18:32.800
Because again, I don't
know anything about WebGL.

00:18:32.800 --> 00:18:34.440
But I know a ton
about HTML, and I

00:18:34.440 --> 00:18:36.660
can read exactly
what's going on.

00:18:36.660 --> 00:18:38.120
Each one of these
tags knows what

00:18:38.120 --> 00:18:39.200
to do with its
children to render

00:18:39.200 --> 00:18:40.366
that scene in a certain way.

00:18:43.450 --> 00:18:44.950
So let's talk about
how you actually

00:18:44.950 --> 00:18:47.320
build a Polymer element
or Web Component.

00:18:47.320 --> 00:18:49.420
This is the yellow
layer in the center.

00:18:49.420 --> 00:18:52.830
This is the sugaring
layer, convenience APIs.

00:18:52.830 --> 00:18:54.820
The goal here is to
eliminate boilerplate.

00:18:54.820 --> 00:18:56.403
We want to make it
really easy for you

00:18:56.403 --> 00:18:59.380
to develop Web Components.

00:18:59.380 --> 00:19:00.880
So Polymer has a
number of features.

00:19:00.880 --> 00:19:02.600
The moral of the
story, here-- I'll

00:19:02.600 --> 00:19:04.590
just play through
the first couple-- is

00:19:04.590 --> 00:19:05.950
that we want to make
things super declarative.

00:19:05.950 --> 00:19:07.575
If I haven't made
that clear right now,

00:19:07.575 --> 00:19:09.230
we want things to
be declarative.

00:19:09.230 --> 00:19:11.750
We think it's very
powerful to do that again.

00:19:11.750 --> 00:19:14.050
So instead of writing
a bunch of code

00:19:14.050 --> 00:19:15.780
to register an element
in the browser,

00:19:15.780 --> 00:19:17.446
you basically declare
a Polymer element.

00:19:17.446 --> 00:19:18.860
It's a declarative form.

00:19:18.860 --> 00:19:21.230
To extend an element,
use the Extends attribute

00:19:21.230 --> 00:19:23.820
on your element to
extend another component.

00:19:23.820 --> 00:19:25.270
We have things
like data binding,

00:19:25.270 --> 00:19:27.447
your typical double
mustache in text.

00:19:27.447 --> 00:19:29.155
If I want to data bind
this inputs value,

00:19:29.155 --> 00:19:32.030
I'll just set up a
property and data bind it.

00:19:32.030 --> 00:19:33.280
We have declarative events.

00:19:33.280 --> 00:19:38.250
So when this on-event name--
in this case, a click--

00:19:38.250 --> 00:19:42.480
happens, when it's fired,
this property on your element

00:19:42.480 --> 00:19:43.482
is going to be called.

00:19:43.482 --> 00:19:45.440
And then we have a bunch
of other stuff, things

00:19:45.440 --> 00:19:48.440
like property observation,
reacting to states.

00:19:48.440 --> 00:19:52.141
When this property changes, do
this, give me this callback.

00:19:52.141 --> 00:19:53.890
The last one, pointer
events and pointers,

00:19:53.890 --> 00:19:54.620
is pretty cool, right?

00:19:54.620 --> 00:19:56.620
This is a really evolving,
awesome specification

00:19:56.620 --> 00:19:58.877
that unifies input on the web.

00:19:58.877 --> 00:19:59.960
And you get this for free.

00:19:59.960 --> 00:20:01.190
If you're building
a Polymer element,

00:20:01.190 --> 00:20:02.773
you don't have to
worry about touches.

00:20:02.773 --> 00:20:05.320
It's just built into the model.

00:20:05.320 --> 00:20:07.320
Goal here, again, is to
be declarative and write

00:20:07.320 --> 00:20:08.784
less code.

00:20:08.784 --> 00:20:10.200
And what I mean
by write less code

00:20:10.200 --> 00:20:12.325
is, actually, now we're in
the platform layer, sort

00:20:12.325 --> 00:20:15.419
of the core or the
polyfill layer.

00:20:15.419 --> 00:20:17.960
So if you wanted to just use
the specifications by themselves

00:20:17.960 --> 00:20:19.626
to create an element,
you would actually

00:20:19.626 --> 00:20:21.480
write this each and every time.

00:20:21.480 --> 00:20:22.870
This is the template tag.

00:20:22.870 --> 00:20:25.040
Let me see if can
zoom in just a tad.

00:20:25.040 --> 00:20:27.590
So I have my markup using a
template tag, the inert section

00:20:27.590 --> 00:20:29.131
of markup that I'm
going to stamp out

00:20:29.131 --> 00:20:31.511
for each instance of the
element that's created.

00:20:31.511 --> 00:20:33.260
Then what I do is I
write a little script.

00:20:33.260 --> 00:20:34.710
I write a prototype.

00:20:34.710 --> 00:20:36.500
God knows writing
prototypes are crazy.

00:20:36.500 --> 00:20:37.620
I have a created call
back because This

00:20:37.620 --> 00:20:39.550
is all part of the
Custom Elements API.

00:20:39.550 --> 00:20:41.840
I'm creating Shadow
DOM out of the template

00:20:41.840 --> 00:20:44.330
that I'm just creating, and
then I call document.register.

00:20:44.330 --> 00:20:46.510
So there's a lot of
stuff going on just

00:20:46.510 --> 00:20:48.110
to register a simple,
simple tag that

00:20:48.110 --> 00:20:51.372
does nothing other
than render an input.

00:20:51.372 --> 00:20:52.330
So that's pretty crazy.

00:20:52.330 --> 00:20:54.340
We think we can do better.

00:20:54.340 --> 00:20:56.340
And so that's where
Polymer Element comes in.

00:20:56.340 --> 00:20:57.720
What's cool about
Polymer Element

00:20:57.720 --> 00:20:59.650
is that we've created
a custom element that

00:20:59.650 --> 00:21:04.017
allows you to create custom
elements, which is crazy.

00:21:04.017 --> 00:21:05.850
But it's using, again,
the document.register

00:21:05.850 --> 00:21:06.795
under the hood.

00:21:06.795 --> 00:21:08.660
So you declare your
Polymer Element.

00:21:08.660 --> 00:21:11.250
You give it the name of the tag
you're going to create, maybe

00:21:11.250 --> 00:21:13.540
give it a constructor if
people want to call you using

00:21:13.540 --> 00:21:14.965
the new operator in JavaScript.

00:21:14.965 --> 00:21:16.590
And then inside of
the Polymer element,

00:21:16.590 --> 00:21:19.048
you just drop your markup using
the template element, which

00:21:19.048 --> 00:21:20.542
is one of the specifications.

00:21:20.542 --> 00:21:21.750
So this one is pretty simple.

00:21:21.750 --> 00:21:24.060
It just has a style
sheet in it that colors

00:21:24.060 --> 00:21:26.346
all inputs red
within my Shadow DOM.

00:21:26.346 --> 00:21:28.970
So it's Shadow DOM that Polymer
is going to create out of this.

00:21:28.970 --> 00:21:30.640
So we're not going
to bleed styles out.

00:21:30.640 --> 00:21:32.729
It's not going to color
all inputs orange.

00:21:32.729 --> 00:21:34.020
But this is all you have to do.

00:21:34.020 --> 00:21:36.899
And then as soon as the browser
and Polymer processes this,

00:21:36.899 --> 00:21:38.940
people at the bottom here,
users of your element,

00:21:38.940 --> 00:21:42.200
can declare it on their page,
just as a normal DOM element.

00:21:42.200 --> 00:21:44.800
They can use DOM to create
it using Create Element,

00:21:44.800 --> 00:21:46.510
or they can use the
new operator as well.

00:21:49.034 --> 00:21:50.450
But at some point,
you're probably

00:21:50.450 --> 00:21:52.180
going to want to define an API.

00:21:52.180 --> 00:21:54.450
So just as in the case of
Select, it had properties,

00:21:54.450 --> 00:21:57.820
it had methods, it had
events that had fires.

00:21:57.820 --> 00:21:59.570
We'll take our example
that we had before,

00:21:59.570 --> 00:22:01.570
which is that silly
input, and we'll just

00:22:01.570 --> 00:22:05.110
kill this no-script attribute
that I have on top here.

00:22:05.110 --> 00:22:07.390
So when we kill that, we
can in-line a little script

00:22:07.390 --> 00:22:09.640
tag that calls the
Polymer constructor

00:22:09.640 --> 00:22:12.175
and pass it the name of the
tag that we're going to create.

00:22:12.175 --> 00:22:13.550
So right now it's
not doing much,

00:22:13.550 --> 00:22:15.430
but we're going to add to this.

00:22:15.430 --> 00:22:17.530
The second parameter,
second argument

00:22:17.530 --> 00:22:20.687
to Polymer constructor, is a
set of properties and methods

00:22:20.687 --> 00:22:21.770
that your element defines.

00:22:21.770 --> 00:22:24.320
So if I use the console,
for instance, the dev tools

00:22:24.320 --> 00:22:25.920
and query this
element in the DOM,

00:22:25.920 --> 00:22:27.586
you would get a length
property, and you

00:22:27.586 --> 00:22:29.357
would get a ready method.

00:22:29.357 --> 00:22:30.940
This is a cool little
Polymer feature.

00:22:30.940 --> 00:22:35.010
I'm just basically grabbing my
internal input from this tag,

00:22:35.010 --> 00:22:37.084
using the "this dot
dollar sign dot,"

00:22:37.084 --> 00:22:39.000
and then referencing the
idea of that element.

00:22:39.000 --> 00:22:40.708
So it's just kind of
a convenience thing,

00:22:40.708 --> 00:22:44.671
to get at the internals,
the guts of your element.

00:22:44.671 --> 00:22:45.670
And that's all it takes.

00:22:45.670 --> 00:22:47.711
We're just defining these
properties and methods,

00:22:47.711 --> 00:22:51.360
and they get added to the
prototype of your element.

00:22:51.360 --> 00:22:54.110
I really want to remind folks
that Web Components don't

00:22:54.110 --> 00:22:57.385
change your workflow
for developing web apps.

00:22:57.385 --> 00:22:59.885
So if you want to do things
like reference an external style

00:22:59.885 --> 00:23:01.480
sheet, you can totally do that.

00:23:01.480 --> 00:23:03.620
If you want to
reference a script,

00:23:03.620 --> 00:23:05.040
you can totally do that.

00:23:05.040 --> 00:23:07.460
If you want to use CoffeeScript,
if you want to use SaaS,

00:23:07.460 --> 00:23:09.710
all is fair game in this
world of Web Components.

00:23:09.710 --> 00:23:11.527
Ultimately, what
changes is your concept

00:23:11.527 --> 00:23:12.610
of actually building apps.

00:23:12.610 --> 00:23:14.350
You're composing
web applications

00:23:14.350 --> 00:23:17.810
based on smaller chunks that
are all compartmentalized.

00:23:17.810 --> 00:23:19.490
This is also great,
by the way, for CSP.

00:23:19.490 --> 00:23:21.270
Give a shout to
Chrome Apps, which

00:23:21.270 --> 00:23:22.869
is a strong CSP environment.

00:23:22.869 --> 00:23:25.160
So you can absolutely use
Polymer in those environments

00:23:25.160 --> 00:23:27.162
as well.

00:23:27.162 --> 00:23:28.620
One of the core
features of Polymer

00:23:28.620 --> 00:23:30.953
is being able to publish
properties and do data binding,

00:23:30.953 --> 00:23:32.830
and this is super,
super powerful.

00:23:32.830 --> 00:23:35.610
So we had the example
of my input before.

00:23:35.610 --> 00:23:37.800
We had just this
input tag that's

00:23:37.800 --> 00:23:40.150
in-line that style
to color it orange.

00:23:40.150 --> 00:23:42.910
And I have two properties
on this element.

00:23:42.910 --> 00:23:45.260
I have a type property,
which is defaulted to text,

00:23:45.260 --> 00:23:47.843
and I have an orange property,
which is defaulted-- excuse me,

00:23:47.843 --> 00:23:49.949
a color property, which
is defaulted to orange.

00:23:49.949 --> 00:23:51.740
Instead, I can kill
that sort of redundancy

00:23:51.740 --> 00:23:54.620
here and replace those
hard-coded values

00:23:54.620 --> 00:23:56.310
with those properties
using data binding

00:23:56.310 --> 00:23:57.710
and using the moustache.

00:23:57.710 --> 00:23:59.460
And so now, whenever
one of those changes,

00:23:59.460 --> 00:24:01.022
it's two-way data bound.

00:24:01.022 --> 00:24:02.230
And I can go crazy with this.

00:24:02.230 --> 00:24:05.530
I can set up a bunch of markup
internal to my application

00:24:05.530 --> 00:24:07.702
and tie them together
using data binding.

00:24:07.702 --> 00:24:08.660
So this is pretty cool.

00:24:08.660 --> 00:24:10.480
This is using Polymer
local storage.

00:24:10.480 --> 00:24:13.445
So now every time someone
types in this input, this value

00:24:13.445 --> 00:24:14.820
is going to change,
and it's data

00:24:14.820 --> 00:24:16.737
bound to this Polymer
local storage value.

00:24:16.737 --> 00:24:18.320
And I'm automatically
going to persist

00:24:18.320 --> 00:24:22.250
data using just data binding
internal to my component.

00:24:22.250 --> 00:24:23.210
Very, very handy stuff.

00:24:25.751 --> 00:24:28.000
The other thing, if you
remember from the Select case,

00:24:28.000 --> 00:24:30.880
is that people could change the
behavior of the element using

00:24:30.880 --> 00:24:31.950
attributes.

00:24:31.950 --> 00:24:34.560
And so in order to do
that in Polymer, we

00:24:34.560 --> 00:24:37.220
have this attributes
attribute where you say,

00:24:37.220 --> 00:24:38.865
I want to publish
the type property

00:24:38.865 --> 00:24:40.902
and I want to publish
the color property.

00:24:40.902 --> 00:24:43.110
And so then what people can
do from the outside world

00:24:43.110 --> 00:24:45.690
when they use your
element, is, for instance,

00:24:45.690 --> 00:24:48.220
change the default of
that color property using

00:24:48.220 --> 00:24:49.850
an attribute on the tag.

00:24:49.850 --> 00:24:52.770
So they're overriding my
default of orange here to red.

00:24:52.770 --> 00:24:55.199
And so that's how you are
able to customize elements

00:24:55.199 --> 00:24:56.490
by publishing these properties.

00:25:00.516 --> 00:25:02.390
Another example of using
this stuff in action

00:25:02.390 --> 00:25:04.598
is to do something like
responsive design by default.

00:25:04.598 --> 00:25:09.260
I can create a responsive layout
element that basically handles

00:25:09.260 --> 00:25:13.620
all the intricacies of dealing
with responsive design.

00:25:13.620 --> 00:25:17.640
So in this example, I'm using
Polymer media query element

00:25:17.640 --> 00:25:19.660
that we've created
and basically using

00:25:19.660 --> 00:25:23.290
data binding to watch for
changes on the media query.

00:25:23.290 --> 00:25:27.410
So when this query of
the past has been set,

00:25:27.410 --> 00:25:30.610
this query match is
going to be true.

00:25:30.610 --> 00:25:32.790
So I'm data binding to that.

00:25:32.790 --> 00:25:35.710
And then I can stamp out a
section of declarative markup

00:25:35.710 --> 00:25:36.859
using the template tag.

00:25:36.859 --> 00:25:39.275
So if [? is phone ?] is true
and that responsive attribute

00:25:39.275 --> 00:25:42.212
is set, I can show this section
of markup in my element.

00:25:42.212 --> 00:25:43.670
Otherwise, if it's
false, I'm going

00:25:43.670 --> 00:25:45.350
to show this section of markup.

00:25:45.350 --> 00:25:47.167
So now we're using
dynamic markup.

00:25:47.167 --> 00:25:49.500
We're using data binding,
we're using reusable elements,

00:25:49.500 --> 00:25:51.450
and it's all sort of
just working internal

00:25:51.450 --> 00:25:52.851
to my web component.

00:25:52.851 --> 00:25:54.850
And people from the
outside, all they have to do

00:25:54.850 --> 00:25:56.662
is just declare this
sucker on their page.

00:25:56.662 --> 00:25:58.870
Responsive layout knows what
to do with your content.

00:25:58.870 --> 00:26:01.992
It does the right thing based
on the media queries in it.

00:26:01.992 --> 00:26:03.200
So that's super, super handy.

00:26:06.766 --> 00:26:08.140
So Polymer is many
things, right?

00:26:08.140 --> 00:26:10.930
It's a set of polyfills to
enable this stuff today.

00:26:10.930 --> 00:26:14.580
Again, it's landing in native
browsers near you, as we speak.

00:26:14.580 --> 00:26:16.194
On top of that,
we have the core.

00:26:16.194 --> 00:26:18.610
We have the sugaring layer,
which has data binding and all

00:26:18.610 --> 00:26:20.068
that declarative
stuff so you don't

00:26:20.068 --> 00:26:23.840
have to reinvent the wheel and
do all this customization over

00:26:23.840 --> 00:26:26.276
and over again when you're
building a web component.

00:26:26.276 --> 00:26:28.400
And on top of that, we have
this set of UI elements

00:26:28.400 --> 00:26:30.569
that we want to use and
have you guys just drop

00:26:30.569 --> 00:26:31.360
those on your page.

00:26:31.360 --> 00:26:33.420
And everything just works
using Web Components.

00:26:33.420 --> 00:26:35.170
The part at the top,
the little blue part,

00:26:35.170 --> 00:26:37.650
is where you guys come
in and build applications

00:26:37.650 --> 00:26:39.189
based on Web Components.

00:26:39.189 --> 00:26:40.980
You can use any part
of the stack you want.

00:26:40.980 --> 00:26:43.600
If you just want to use the
core, foundational, native APIs

00:26:43.600 --> 00:26:45.477
in the browser, you
can use the polyfills.

00:26:45.477 --> 00:26:48.060
You can use our sugaring layer
to make things more convenient.

00:26:48.060 --> 00:26:49.330
You use just the
elements if you don't

00:26:49.330 --> 00:26:51.705
want to write any code and
just drop things on your page.

00:26:51.705 --> 00:26:54.390
That's totally, totally fine.

00:26:54.390 --> 00:26:55.140
So that's Polymer.

00:26:55.140 --> 00:26:57.720
I encourage you to check out our
website at polymer-project.org

00:26:57.720 --> 00:26:58.260
to learn more.

00:26:58.260 --> 00:26:59.350
There's a lot going on there.

00:26:59.350 --> 00:27:00.766
There's a lot of
conceptual things

00:27:00.766 --> 00:27:04.390
that are changing how
we build web apps.

00:27:04.390 --> 00:27:06.730
As I was actually
researching this topic

00:27:06.730 --> 00:27:09.070
and preparing for this
stack, I looked up Wikipedia

00:27:09.070 --> 00:27:11.440
and actually looked at
the definition of Polymer.

00:27:11.440 --> 00:27:13.870
"A Polymer is a large molecule
composed of many repeated

00:27:13.870 --> 00:27:15.850
subunits, known as monomers."

00:27:15.850 --> 00:27:17.590
I don't know if
you guys knew that.

00:27:17.590 --> 00:27:19.385
But I read this, and
I was like, whoa.

00:27:19.385 --> 00:27:20.960
If we replace a
couple words here,

00:27:20.960 --> 00:27:23.150
I actually read
this as-- "A web app

00:27:23.150 --> 00:27:25.990
is a large collection of
web components composed

00:27:25.990 --> 00:27:30.240
of many subelements,
known as custom elements."

00:27:30.240 --> 00:27:34.660
A web app is a large collection
of web components composed

00:27:34.660 --> 00:27:36.785
of many subelements-- so
you're building components

00:27:36.785 --> 00:27:38.990
out of components out of
components out of components--

00:27:38.990 --> 00:27:40.610
and those are known
as custom elements.

00:27:40.610 --> 00:27:41.450
So I think that's really cool.

00:27:41.450 --> 00:27:43.670
I think when we start to
compartmentalize things

00:27:43.670 --> 00:27:46.332
on the web, and we can reuse
them, we can share them,

00:27:46.332 --> 00:27:47.790
I think that becomes
very powerful.

00:27:47.790 --> 00:27:49.749
That feels super good.

00:27:49.749 --> 00:27:50.790
So I hope you guys agree.

00:27:50.790 --> 00:27:51.540
Check out Polymer.

00:27:51.540 --> 00:27:52.574
Thank you for your time.

00:27:52.574 --> 00:27:53.990
This stack will
be up at that URL.

00:27:53.990 --> 00:27:56.380
Again, feel free to follow
me on the social channels.

00:27:56.380 --> 00:27:56.980
Thanks.

00:27:56.980 --> 00:28:00.195
[APPLAUSE]

