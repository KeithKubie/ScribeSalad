WEBVTT
Kind: captions
Language: en

00:00:00.210 --> 00:00:03.389
one of the things you can do an image [posting] package is resizing images or

00:00:03.730 --> 00:00:10.830
Rotating images and so on and when you do this in any program paint on there photoshop the gimp and so on you

00:00:11.230 --> 00:00:12.840
Have an option to choose

00:00:12.840 --> 00:00:18.899
How you want it to scale the pixels so do you want it to be [nearest] neighbor or by linear or by cubic?

00:00:21.670 --> 00:00:24.000
So today, we're going to cover image transformations

00:00:24.000 --> 00:00:29.459
But mostly rescaling because it's a simple one, and [we'll] look a bit at nearest neighbor and bilinear and so on let's imagine

00:00:29.460 --> 00:00:32.309
We've [got] a three by three image. So there's a three by three image

00:00:32.309 --> 00:00:38.128
It's you know high quality, and I want to scale this image by a factor of let's say three, okay?

00:00:38.129 --> 00:00:43.079
which is going to mean a nine by nine image, so cut to a long shot of me going like this frantically, so

00:00:44.110 --> 00:00:48.419
[this] isn't going to be nine by nine because I've gone that I've gone to were not important. It's not important

00:00:48.420 --> 00:00:51.570
[I] don't know. How many this is I'm counted. It doesn't matter right?

00:00:51.730 --> 00:00:57.239
I'm scaling this and it extends this way for some indefinite amount of time depending on what my scaling factor is okay?

00:00:57.309 --> 00:00:59.140
Let's leave it at that now

00:00:59.140 --> 00:01:05.610
if I wanted to scale this the obvious [way] to do it is just to multiply these values by some pixel coordinate amount so let's

00:01:05.610 --> 00:01:07.979
Say x becomes 3x and put them in this image

00:01:07.979 --> 00:01:12.539
And then problem solved right so that would be might you first get how it work let's say it has 120

00:01:13.030 --> 00:01:16.080
This is 121. This is you know grayscale

00:01:16.080 --> 00:01:21.629
Let's say 115 and so on we say right well this one stays in this corner because this is naught naught

00:01:21.970 --> 00:01:27.029
Naught times a scaling factor of 3 is also naught so we say this is going to be 120 okay?

00:01:27.030 --> 00:01:30.390
That's my first guess at this 121 is at 1 0

00:01:30.970 --> 00:01:35.129
So it becomes 3 0 so naught 1 2 3 and it becomes

00:01:35.829 --> 00:01:40.259
121 if this is 100 then 100 goes down here and this is

00:01:40.780 --> 00:01:42.479
110 and that goes over here

00:01:42.479 --> 00:01:47.669
And these are all 0 right which is about the worst scaling ever this isn't going to work like this approach

00:01:47.680 --> 00:01:51.989
It would just look like a black image if you zoomed really far out you might see some colors in it

00:01:51.990 --> 00:01:56.969
But really the majority of this image is black and completely useless so this isn't I have scaled this image

00:01:56.969 --> 00:02:03.449
But not properly right because the problem is that there is no pixel in this image that maps of this one, right?

00:02:03.850 --> 00:02:10.440
This maps are somewhere between [2] pixels, so that's the problem. We need to solve all right, and that's the problem being solved by

00:02:11.140 --> 00:02:15.339
Nearest neighbor or by linear or by cubic so natural fat when we want to scale an image?

00:02:15.340 --> 00:02:19.209
We do this process in reverse. We create the bigger image and then for each pixel

00:02:19.209 --> 00:02:23.919
We look back and see where are we supposed to be getting our sample from it is between two pixels

00:02:23.920 --> 00:02:28.720
We have to think about what we do if it's on and pick a little great. We'll just take that pixel value, so

00:02:29.360 --> 00:02:30.980
I'm up my

00:02:30.980 --> 00:02:37.360
Instinct here would be that your 1/20 would would be [x] 3 so all those 9 would be 120

00:02:37.390 --> 00:02:40.029
Yes, that's pretty close to newest neighbor. [so] what we do here

00:02:40.030 --> 00:02:46.209
[we] say well, but this is a value of 1 0 which is going to be a [third] zoom it when we scale back

00:02:46.370 --> 00:02:49.840
So we're closer to 120 than we are to 121 so this becomes

00:02:50.660 --> 00:02:54.819
120 right this one goes down to 2/3 down here

00:02:54.819 --> 00:02:59.499
So it's closer to 121 then it's to 120 so we say that's 121 this probably gets

00:02:59.630 --> 00:03:04.899
121 and so on this is why when you make your image bigger using nearest neighbor it continues to look pixelated

00:03:05.150 --> 00:03:06.489
Because that's exactly what it's doing

00:03:06.489 --> 00:03:12.219
It's preserving all that information by [just] duplicating a bunch of pixels in these gaps right now

00:03:12.500 --> 00:03:14.500
That doesn't seem like a very good way [of] [doing] it

00:03:14.500 --> 00:03:17.229
But of course that might be what you want to do if you're a pixel artist

00:03:17.390 --> 00:03:22.959
Who's doing you know pixel art then scaling it and having it all blur will be edges. [it's] completely useless for you, so

00:03:23.930 --> 00:03:27.040
Depending on what your situation is you might want to do that the other thing?

00:03:27.040 --> 00:03:29.040
Is that strictly speaking then we haven't in?

00:03:29.420 --> 00:03:34.390
Essence made up any Data this pixel value is still one of the pixel values that was in this original image

00:03:34.670 --> 00:03:38.769
Because you could argue we don't know for sure what's going on between these two pixels it could be anything

00:03:38.769 --> 00:03:42.279
It's just that the camera isn't high enough resolution to capture it with bilinear interpolation

00:03:42.680 --> 00:03:46.239
What we're assuming is but the thing that's going on between here is entirely obvious

00:03:46.239 --> 00:03:48.518
It's just a line between the two okay

00:03:48.519 --> 00:03:51.578
So we're going to take an average. Let's have a look at some of these, so we've got a value of

00:03:51.920 --> 00:03:54.940
120 and we've got a value of 121 all right

00:03:54.940 --> 00:03:56.260
And this is [a] pixel zero

00:03:56.260 --> 00:03:59.649
And this is a pixel [one], and we're going to be filling in these two gaps here

00:03:59.690 --> 00:04:03.549
So this one here is going to be a value of 1/3 or [not] [0.3]

00:04:04.069 --> 00:04:07.268
recurring and this one's going to be at a value of 2/3

00:04:07.609 --> 00:04:10.749
Already people can probably see what's going to happen here for this one

00:04:10.750 --> 00:04:16.450
We're going to take 2/3 of this in a furnace and vice versa okay, so the formula is [actually]

00:04:17.030 --> 00:04:22.000
Essentially a weighted sum of these two things, but the weighting depends on how far along this

00:04:22.700 --> 00:04:29.919
Distance between them you are okay, so this is what linear interpolation does so in this case. We would say

00:04:30.590 --> 00:04:32.590
120 to 121 isn't a very helpful example

00:04:32.870 --> 00:04:36.459
Because we're going to have to do some rounding at some point and then kind [of] defeat

00:04:36.460 --> 00:04:39.400
The whole object of what we're doing, [so] let's let's pick it more obvious one, okay?

00:04:39.400 --> 00:04:42.519
so let's say that this pixel value is a hundred and

00:04:42.740 --> 00:04:48.519
This pixel value is two hundred and we are trying to sample the pixel position a third of the way along

00:04:48.680 --> 00:04:52.180
This is very straightforward [so] all we have to do is we have to do 2/3

00:04:53.030 --> 00:04:55.660
times by 100 Plus

00:04:56.540 --> 00:04:58.540
[1/3] times by

00:04:59.120 --> 00:05:03.669
200 all right and if we sum them up, what do we get this is 66? Ish, okay?

00:05:03.669 --> 00:05:09.849
This is also coincident Lis 66 ish, and so we add them up and we get about 132 or something like that

00:05:10.000 --> 00:05:12.790
well
We've got a [hundred] Thirty-three [the] coding don't we we get a value

00:05:12.950 --> 00:05:18.489
Exactly 1/3 of the way along from the scale of 100 to 200 okay, so that's linear interpolation

00:05:18.590 --> 00:05:23.560
so the only the only thing we have to worry about now [is] how do we extend this to two dimensions and

00:05:24.080 --> 00:05:27.760
Again not very it's not very challenging so if I just take away this piece of paper

00:05:28.370 --> 00:05:33.700
Instead [of] having two endpoints. We now have four okay, so we have one here. We have one here

00:05:34.039 --> 00:05:38.829
We have one here and we have one here now. This is X1 Y1, and this is X2

00:05:39.800 --> 00:05:44.560
Y1, and this is x1 Y2 and X2

00:05:45.289 --> 00:05:50.259
Y2, [and] we're trying to find some position here x y and more often but not if you're scaling in image

00:05:50.260 --> 00:05:55.779
Or doing a rotation or something along these lines you're going [to] find yourself sitting somewhere in between two pixels. What we do is

00:05:55.780 --> 00:06:01.929
We first interpolate these intermediate values here okay, so we do what we just did along between this line?

00:06:01.930 --> 00:06:06.609
So we find this is just about 40% is it so we we do the formula that [says] what's the value?

00:06:06.889 --> 00:06:11.589
40% along from here to here okay, and we get some value here, and then we do the same here

00:06:11.590 --> 00:06:12.820
So what's 40% along here?

00:06:12.820 --> 00:06:19.809
We do some value here, and then we interpolate between these two values to get this final value output, and that's how we can

00:06:20.870 --> 00:06:28.359
Map between [four] values to some arbitrary position in amongst them and that's basically what happens when you click bilinear?

00:06:28.700 --> 00:06:33.639
When you want to resample you image, so any kind of scaling any kind of?

00:06:35.060 --> 00:06:36.560
rotation

00:06:36.560 --> 00:06:38.440
Anything that is going to involve a scale

00:06:38.440 --> 00:06:43.060
It doesn't fit exactly on the pixels from the original image and remember we're doing this in reverse

00:06:43.060 --> 00:06:45.310
So we go from our new image back

00:06:45.310 --> 00:06:49.209
We look back into our original image and find out where we need to get the color form so back to our original

00:06:49.430 --> 00:06:53.680
Example this x1 Y1 is going to be 120 and x2 y1 is going to be

00:06:53.990 --> 00:06:56.829
121 and these two are going [to] be 100 110 and

00:06:57.020 --> 00:07:01.270
We can have any position in between these pixels depending on what we're doing tor image

00:07:01.270 --> 00:07:03.010
We're making it a factor of 10 larger

00:07:03.010 --> 00:07:07.599
Then is going to be 10 increments between these things if we're making it smaller there might be fewer than [1]

00:07:07.600 --> 00:07:09.600
You know it might it you know

00:07:11.300 --> 00:07:13.600
Does that work as well? Yeah, so if you'll make it?

00:07:13.600 --> 00:07:18.969
So actually the scaling you're doing makes no difference right if the scaling is smaller than 1 then you're still going to have pixel values

00:07:18.970 --> 00:07:24.429
That sit in between the original pixels. It's just not going to be very many of them anymore because you're actually making the image smaller

00:07:24.950 --> 00:07:30.610
And the same with a rotation all that changes is the transform we used to get from these positions in our

00:07:30.920 --> 00:07:36.219
Destination image to these positions in our source image the only other thing to remember about linear interpolation

00:07:36.220 --> 00:07:39.249
Is that it is just that linear if we looked at a row of pixels?

00:07:39.470 --> 00:07:42.279
sidon, then you might get a value if this is 0

00:07:42.860 --> 00:07:48.220
You might get a value here and here and here and [here] and [here] and [here] like this, right?

00:07:48.220 --> 00:07:51.670
So this could be our image different intensity levels right so just for a grayscale image

00:07:51.670 --> 00:07:54.279
We might have something that looks a bit like this if we look [sidon]

00:07:54.590 --> 00:07:59.410
Now if we were just scaling 1 to 1 we're going [to] be getting [this] value and getting this value

00:07:59.410 --> 00:08:03.999
And that's fine if we're scaling somewhere refer it away along, or 2/3 of way between this one and this one

00:08:04.010 --> 00:08:09.550
We're going to need to interpolate these values which Corresponds to finding positions along these lines here

00:08:09.590 --> 00:08:11.709
And this is what linear interpolation is doing?

00:08:11.710 --> 00:08:15.190
It's fitting straight lines between these objects and finding the positions

00:08:15.620 --> 00:08:21.459
Along it that looks like a very pointed feature that you've just done with those lines so is it

00:08:21.980 --> 00:08:25.629
I'm guessing that we can start drawing curves right that's right

00:08:25.630 --> 00:08:28.149
[so] the problem [with] by linear interpolation

00:08:28.150 --> 00:08:33.490
And it's not much of a problem if you're just let's say we stomping by a factor of 2 or something so vit you know

00:08:33.490 --> 00:08:35.150
You're only creating one intermediate

00:08:35.150 --> 00:08:40.180
Value it comes down to what our assumptions are about what's happening in the image between these points it might be more

00:08:40.280 --> 00:08:47.829
Reasonable to say well, maybe given this underlying Data member these two are part of it it might be something a lot more like

00:08:48.380 --> 00:08:53.229
That you know a bit smoother so that if we sample here, it's closer to this one

00:08:53.230 --> 00:08:58.450
But it is to this one, and so on okay. That's what bicubic interpolation does but that's what if in video

00:09:03.070 --> 00:09:06.510
That's 66 ish, okay. [this] is

00:09:07.960 --> 00:09:13.530
66 again rights, we've done what we get 120 okay? So [420] something recurring

00:09:14.470 --> 00:09:19.350
Yeah, let's start that again. So we go, so this is 60 60, okay. This is also

