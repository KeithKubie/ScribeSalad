WEBVTT
Kind: captions
Language: en

00:00:06.260 --> 00:00:08.810
ANKUR KOTWAL: Welcome to part
four of the DevBytes series

00:00:08.810 --> 00:00:10.740
Making Apps Beautiful.

00:00:10.740 --> 00:00:13.700
Thus far, we've managed to make
our app look beautiful on

00:00:13.700 --> 00:00:15.790
modern phones and tablets.

00:00:15.790 --> 00:00:19.170
But we haven't really looked
at the performance aspect.

00:00:19.170 --> 00:00:22.500
Having a beautiful app is more
than just how it looks when

00:00:22.500 --> 00:00:25.670
it's not moving or animating.

00:00:25.670 --> 00:00:27.950
It's about also making
sure that

00:00:27.950 --> 00:00:30.930
it's smooth and jank-free.

00:00:30.930 --> 00:00:33.650
So from a performance tuning
point of view, what I'd like

00:00:33.650 --> 00:00:37.480
to do is to profile my device
on the lowest common

00:00:37.480 --> 00:00:40.920
denominator, which is exactly
what we're going to do today.

00:00:40.920 --> 00:00:44.691
We're going to use the Nexus S
running Android 2.3, fondly

00:00:44.691 --> 00:00:46.050
known as Gingerbread.

00:00:46.050 --> 00:00:50.210
So let's switch over to our
Nexus S, and see what our app

00:00:50.210 --> 00:00:54.580
looks like in its
current state.

00:00:54.580 --> 00:00:56.290
Bum bum.

00:00:56.290 --> 00:00:57.440
It crashed.

00:00:57.440 --> 00:00:59.900
Now, we're going to
switch back to the

00:00:59.900 --> 00:01:02.430
slides and see why.

00:01:02.430 --> 00:01:05.140
The reality of it is that
we're loading these

00:01:05.140 --> 00:01:09.280
high-resolution mid images, and
then displaying them as

00:01:09.280 --> 00:01:10.770
thumbnails.

00:01:10.770 --> 00:01:14.540
So we're actually exhausting the
memory on the Nexus S much

00:01:14.540 --> 00:01:17.980
sooner than we would on our
more modern devices.

00:01:17.980 --> 00:01:20.610
And it would have even happened
with those ones if we

00:01:20.610 --> 00:01:22.700
had more images.

00:01:22.700 --> 00:01:26.060
So let's now switch to the code
and see how we can better

00:01:26.060 --> 00:01:27.900
optimize this.

00:01:27.900 --> 00:01:32.080
What we're going to do is load
these images at the resolution

00:01:32.080 --> 00:01:37.770
that we're going to display
them, rather than their source

00:01:37.770 --> 00:01:38.680
resolution.

00:01:38.680 --> 00:01:42.710
So we use this BitmapFactory
Options object, and we set

00:01:42.710 --> 00:01:45.390
this inJustDecodeBalance
to True.

00:01:45.390 --> 00:01:49.030
What that does is it makes sure
that the code resources

00:01:49.030 --> 00:01:51.130
only look at the metadata
of that bitmap.

00:01:51.130 --> 00:01:53.250
And in this case,
the resolution.

00:01:53.250 --> 00:01:56.470
So once we've loaded that, we're
going to go into our own

00:01:56.470 --> 00:01:59.500
method, called calculate
inSampleSize.

00:01:59.500 --> 00:02:01.920
We're going to try and calculate
what the value of

00:02:01.920 --> 00:02:03.770
this should be.

00:02:03.770 --> 00:02:07.140
Basically, inSampleSize
is a value that's used

00:02:07.140 --> 00:02:08.360
like a power of two.

00:02:08.360 --> 00:02:11.840
So inSampleSize of 1 will mean
we load the image in its

00:02:11.840 --> 00:02:14.530
native resolution, or
source resolution.

00:02:14.530 --> 00:02:17.720
Two will mean it'll be halved
horizontally and halved

00:02:17.720 --> 00:02:18.880
vertically.

00:02:18.880 --> 00:02:22.090
So it'll be a quarter of the
size of the original image.

00:02:22.090 --> 00:02:27.970
So we just basically use some
basic arithmetic here to work

00:02:27.970 --> 00:02:31.060
out, based on the source
resolution of the image versus

00:02:31.060 --> 00:02:33.670
the display or required
resolution.

00:02:33.670 --> 00:02:38.960
And then, based on that ratio,
we return this inSampleSize

00:02:38.960 --> 00:02:40.160
from this method.

00:02:40.160 --> 00:02:43.500
So scrolling back up, we've
calculated our inSampleSize,

00:02:43.500 --> 00:02:45.820
passed it to our bitmap
factory option.

00:02:45.820 --> 00:02:48.920
We then need to remember to
set inJustDecodeBounds to

00:02:48.920 --> 00:02:51.510
False, and then go ahead
and load the

00:02:51.510 --> 00:02:53.610
bitmap with our options.

00:02:53.610 --> 00:02:55.700
So now that we've optimized
it and we're loading these

00:02:55.700 --> 00:02:59.110
bitmaps in the resolution that
we need them in, let's go see

00:02:59.110 --> 00:03:02.670
what it looks like
on the Nexus S.

00:03:02.670 --> 00:03:06.180
Shouldn't crash this time.

00:03:06.180 --> 00:03:06.610
There we go.

00:03:06.610 --> 00:03:07.620
It launched.

00:03:07.620 --> 00:03:10.320
And we can see the
apps running.

00:03:10.320 --> 00:03:12.020
But it's not running great.

00:03:12.020 --> 00:03:14.550
As we scroll here, you can
see that we're getting

00:03:14.550 --> 00:03:16.780
some jitter and jank.

00:03:16.780 --> 00:03:19.810
So let's look at how we can
optimize this, and let's

00:03:19.810 --> 00:03:22.750
switch over to our slides
once again.

00:03:22.750 --> 00:03:24.670
The reason that we're hitting
this jank is that we're

00:03:24.670 --> 00:03:28.640
learning those images in the
main thread, in the UI thread.

00:03:28.640 --> 00:03:30.080
And we really shouldn't
do that.

00:03:30.080 --> 00:03:32.390
We should be doing these in
the background thread, and

00:03:32.390 --> 00:03:35.840
then our friend the AsyncTask
object, class, is

00:03:35.840 --> 00:03:36.850
going to help us.

00:03:36.850 --> 00:03:39.490
So let's switch over
to some code again.

00:03:39.490 --> 00:03:41.310
And we'll see here we've
got an AyncTask

00:03:41.310 --> 00:03:42.720
for loading our bitmap.

00:03:42.720 --> 00:03:47.490
We actually pass the image view
to this Async Task, and

00:03:47.490 --> 00:03:50.240
we store it as a weak reference,
so that if the

00:03:50.240 --> 00:03:52.870
framework needs to free that
image view, we're not going to

00:03:52.870 --> 00:03:54.570
hold onto it, and we're
going to allow it

00:03:54.570 --> 00:03:56.430
to be garbage collected.

00:03:56.430 --> 00:03:59.170
Anyways, going to the
doInBackground method on our

00:03:59.170 --> 00:04:01.660
AsyncTask, this is happening
in a background thread.

00:04:01.660 --> 00:04:03.420
So we will go ahead
and actually

00:04:03.420 --> 00:04:05.970
load our sample bitmap.

00:04:05.970 --> 00:04:07.750
And this is that code
that we saw earlier.

00:04:07.750 --> 00:04:10.250
So it will kick in with
those optimizations.

00:04:10.250 --> 00:04:13.350
Once this is done, in
onPostExecute, we're just

00:04:13.350 --> 00:04:15.910
going to go ahead and
apply the bitmap.

00:04:15.910 --> 00:04:19.339
So now let's see how the app
looks like when we run it on

00:04:19.339 --> 00:04:27.860
our Nexus S. Great.

00:04:27.860 --> 00:04:31.130
We can see here that
as we scroll, the

00:04:31.130 --> 00:04:32.240
images get loaded in.

00:04:32.240 --> 00:04:34.540
And because they're doing it
in the background, what

00:04:34.540 --> 00:04:37.910
happens is that we get
this placeholder.

00:04:37.910 --> 00:04:41.820
It's just an empty image there,
until the image loads.

00:04:41.820 --> 00:04:43.060
But it's happening in
the background.

00:04:43.060 --> 00:04:44.380
And the important thing
is that our

00:04:44.380 --> 00:04:46.130
scrolling is now smooth.

00:04:46.130 --> 00:04:48.070
But we have a new problem now.

00:04:48.070 --> 00:04:51.780
Every time an image goes off
the screen, we're actually

00:04:51.780 --> 00:04:52.870
relinquishing that image.

00:04:52.870 --> 00:04:55.280
We're freeing it and then
loading it back in.

00:04:55.280 --> 00:04:56.900
That's not a very good
thing to do.

00:04:56.900 --> 00:04:59.330
So what we're going to look
at is how to fix that.

00:04:59.330 --> 00:05:03.560
So switching back to the slides,
what we're going to do

00:05:03.560 --> 00:05:06.410
is we're going to use
an image cache.

00:05:06.410 --> 00:05:08.770
Now, what an image cache does
is hold onto the images.

00:05:08.770 --> 00:05:10.880
So we'll load the image, and
then we'll throw it into the

00:05:10.880 --> 00:05:11.570
image cache.

00:05:11.570 --> 00:05:15.080
And then we'll hold onto the
images for as long as it can.

00:05:15.080 --> 00:05:17.900
And then when we go to request
an image, we're going to look

00:05:17.900 --> 00:05:19.420
in the image cache first.

00:05:19.420 --> 00:05:22.080
So let's switch over to code.

00:05:22.080 --> 00:05:25.880
And in the onCreate method of
our fragment, what we're going

00:05:25.880 --> 00:05:29.380
to do is initialize
our LIU cache.

00:05:29.380 --> 00:05:31.540
That's the image cache
we're going to use.

00:05:31.540 --> 00:05:34.530
But for the cache size, what
we're going to do is we're

00:05:34.530 --> 00:05:38.370
going to set the cache size
based on the maximum available

00:05:38.370 --> 00:05:42.480
memory on the device
for our app.

00:05:42.480 --> 00:05:45.760
In kilobytes, so dividing
it by 1,024.

00:05:45.760 --> 00:05:49.820
But we're actually going to
get 1/8 of that size.

00:05:49.820 --> 00:05:51.470
So our cache should
be 1/8 of the

00:05:51.470 --> 00:05:53.600
available memory, in kilobytes.

00:05:53.600 --> 00:05:56.930
And that's what we will use to
initialize our LIU cache.

00:05:56.930 --> 00:06:00.210
Also, keep in mind that we're
overriding the sizeOf method

00:06:00.210 --> 00:06:03.480
so that we can tell the cache
how big our bitmaps

00:06:03.480 --> 00:06:04.580
are going to be.

00:06:04.580 --> 00:06:05.960
That's it.

00:06:05.960 --> 00:06:10.200
With that, let's see what our
Nexus S looks like now.

00:06:10.200 --> 00:06:12.300
So we're going to launch it.

00:06:12.300 --> 00:06:16.040
We expect it to be nice and
smooth, which it is.

00:06:16.040 --> 00:06:19.820
And what we're seeing here is
that as the images go off the

00:06:19.820 --> 00:06:22.770
screen, they're not actually
being relinquished.

00:06:22.770 --> 00:06:24.720
Our cache is kicking in.

00:06:24.720 --> 00:06:29.130
Of course, if we blew our memory
limit, it would start

00:06:29.130 --> 00:06:31.770
to dispose and throw away
of those images, and

00:06:31.770 --> 00:06:32.870
load them if necessary.

00:06:32.870 --> 00:06:35.240
But we don't need to
in this situation.

00:06:35.240 --> 00:06:38.060
So we've reached the end
of this DevByte.

00:06:38.060 --> 00:06:39.810
Let's switch over
to the slides.

00:06:39.810 --> 00:06:42.450
This is where we started, on
the left-hand side, with an

00:06:42.450 --> 00:06:44.040
outdated-looking app.

00:06:44.040 --> 00:06:48.790
It now looks beautiful and
modern on modern devices.

00:06:48.790 --> 00:06:50.600
It runs really well.

00:06:50.600 --> 00:06:53.380
But one thing we haven't looked
at yet is how to make

00:06:53.380 --> 00:06:56.670
it look equally beautiful
on all the devices.

00:06:56.670 --> 00:06:58.670
And we're going to do that
in the next episode.

