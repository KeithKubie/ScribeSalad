WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.409
&gt;&gt; KOLEDA: All right, everybody. I'm going
to get started with the next presentation.

00:00:03.409 --> 00:00:10.630
My name is Eric Koleda and I'm a Developer
Programs Engineer with Google on the AdWords

00:00:10.630 --> 00:00:16.190
API team. Today I'm going to be doing a presentation
of the BulkMutateJobService. So, this is one

00:00:16.190 --> 00:00:20.730
of those free services that you may have heard
about in the V2009 API and I'm just going

00:00:20.730 --> 00:00:26.810
to go to some details today about what it
is and kind of an overview of how it works

00:00:26.810 --> 00:00:31.360
and how to use it, what are the different
pieces of this puzzle are. So, first, we're

00:00:31.360 --> 00:00:36.840
going to start with what is a BulkMutateJobService?
As I mentioned, it's a new service and it

00:00:36.840 --> 00:00:38.780
allows for the scheduling and running of BulkMutateJobs.
Most of like all of our services are usually

00:00:38.780 --> 00:00:40.030
named with the entity that you were networking.
These jobs--the main job is to contain large

00:00:40.030 --> 00:00:46.400
batches of operations. So, they mainly hold
operations which means that you will pass

00:00:46.400 --> 00:00:48.060
into a mutate method normally, and remain
to process a lot of that until the services

00:00:48.060 --> 00:01:01.280
[INDISTINCT]. And its terms are a little confusing
from the last--the last time I gave a presentation

00:01:01.280 --> 00:01:05.259
but it's meant to do this work asynchronously.
Now, asynchronously, I don't mean that like

00:01:05.259 --> 00:01:11.530
a SOAP level like it's going to ping you back
when it's done, but rather that much like

00:01:11.530 --> 00:01:18.560
the V13 report job service--reporting service.
It allows for the work to be done, not while

00:01:18.560 --> 00:01:22.520
the request is over. So, you set up the work
to be done, you're paying for the status,

00:01:22.520 --> 00:01:27.990
and then you'll get the results. So it's unlike
a regular mutate request which you send the

00:01:27.990 --> 00:01:31.750
request and then get the results all in one
transaction. Now it's spread out over time.

00:01:31.750 --> 00:01:37.780
So, it's asynchronous in that sense. And really
this service is just a different way to accomplish

00:01:37.780 --> 00:01:42.080
the same things you're already doing. Just
we're willing to introduce any new features

00:01:42.080 --> 00:01:46.830
or any functionalities, it's really just taking
what you already do with the same operations

00:01:46.830 --> 00:01:52.150
across its length in a different way. So what
is a BulkMutateJob? So, this is what your--you

00:01:52.150 --> 00:01:57.290
know, your setting and manipulating. It is
actually a pretty complex object. So what

00:01:57.290 --> 00:02:02.409
I'm going to do is I'm going to start at the
lowest level, kind of build it up to the full

00:02:02.409 --> 00:02:06.580
job. So as I mentioned at the bottom, at the
deepest level of a BulkMutateJob is an operation.

00:02:06.580 --> 00:02:17.060
It's the same operations that you use in other
services and it currently supports the services

00:02:17.060 --> 00:02:24.219
we see here with the idea that in the future,
you know, every service that has an operation

00:02:24.219 --> 00:02:25.499
hopefully it builds a [INDISTINCT] into BulkMutateJobService
as well. So then you take these operations

00:02:25.499 --> 00:02:29.360
in pack and you package them into an operationStream.
An operationStream is meant to contain many

00:02:29.360 --> 00:02:34.739
operations and they're processed in a batch
manner. So, what that means is that if one

00:02:34.739 --> 00:02:42.549
of the operations in an operationStream fails,
the whole stream isn't committed, so none

00:02:42.549 --> 00:02:45.580
of the operations are committed in that stream.
So...the goal here is that if you want to

00:02:45.580 --> 00:02:48.870
have certain operations that you want to either
succeed or fail together, put them into a

00:02:48.870 --> 00:02:54.980
stream. And besides just that that's just
logic, the other part of an operationStream

00:02:54.980 --> 00:03:01.400
is that it defines a scoping entity. So, it's
kind of like a hint to the backend about what--in

00:03:01.400 --> 00:03:07.299
what contexts do these operations apply; and
that can either currently be in a campaign

00:03:07.299 --> 00:03:09.840
or an account, so you can say, "All of these
operations are relevant to this specific campaign

00:03:09.840 --> 00:03:14.340
or they're relevant to this account." And
there are some limitations about how many

00:03:14.340 --> 00:03:20.870
campaigns and accounts you need to specify
per job but that's the purpose of the scoping

00:03:20.870 --> 00:03:27.870
entity. It's to kind of inform the backend
about where these operations can apply. Feel

00:03:27.870 --> 00:03:37.589
free to ask questions along the way but I
do actually cover a lot in the slides so if

00:03:37.589 --> 00:03:41.859
you want to hold something, you might as well.
So the next level up from operationStream

00:03:41.859 --> 00:03:44.489
is the BulkMutateRequest. A BulkMutateRequest
is meant to contain many streams. And it's--we

00:03:44.489 --> 00:03:46.439
also call this a part. So later on, I'll be
referring to this BulkMutateRequest as a part.

00:03:46.439 --> 00:03:51.109
And that's because its main purpose really
is to allow your streams to be sent to the

00:03:51.109 --> 00:03:55.629
server in multiple requests. So rather than
have to send all of your streams in one request,

00:03:55.629 --> 00:03:59.969
like, "Here's my streams," you can send that
in multiple requests. And so, you're kind

00:03:59.969 --> 00:04:04.229
of splitting up your entire collection of
streams into different parts. And into this

00:04:04.229 --> 00:04:10.099
BulkMutateRequest has an index on it, which
just indicates, you know, in what position

00:04:10.099 --> 00:04:15.079
of the job does this part with and so. So
if you have so many streams, if you need to

00:04:15.079 --> 00:04:22.380
make three or more requests, you print one
BulkMutateRequest with on either zero, one,

00:04:22.380 --> 00:04:29.191
two, and that's how--that's how you get all
of your operationStreams uploaded to the server.

00:04:29.191 --> 00:04:32.591
And then in the outermost level's where we
have our actual BulkMutateJob. So this is,

00:04:32.591 --> 00:04:37.100
you know, the entity that you're actually
manipulating here for getting and setting

00:04:37.100 --> 00:04:42.660
and adding. And it's kind of the main, you
know, the main unit of the BulkMutateJobService.

00:04:42.660 --> 00:04:48.540
On this BulkMutateJob, you do have to define
the total number of parts to expect in the

00:04:48.540 --> 00:04:55.310
Job. And when you're actually getting it later
on, it's going to be the object that has the

00:04:55.310 --> 00:05:14.550
status and the stats and the history and all
the kind of meta-information about this job

00:05:14.550 --> 00:05:18.380
that you want to--well, everything else is
kind of just, you know, wrappers to organize

00:05:18.380 --> 00:05:24.660
the data but this is the entity that will
have all that export metadata associated with

00:05:24.660 --> 00:05:32.430
it. And much like other entities when you
create it, getting unique ID, and should then

00:05:32.430 --> 00:05:39.330
be used to refer to it later on just like
Campaigns and AdGroups. So that's a little

00:05:39.330 --> 00:05:45.320
bit about the hierarchy. But how do you actually
use the BulkMutateJobService? So now that

00:05:45.320 --> 00:06:00.370
we know the structure of the job, what is
the general process in this service? So, the

00:06:00.370 --> 00:06:12.310
overview here, you know, it's a very generic
level but I think it gives you a good idea

00:06:12.310 --> 00:06:20.640
of the flow. And so, the first thing we need
to do is just get your operations. What this

00:06:20.640 --> 00:06:33.580
means is, you know, after--whether you're
generating your operations through some sort

00:06:33.580 --> 00:06:46.520
of automated utility or by taking user inputs,
you need to take all of the operations

00:06:46.520 --> 00:07:07.200
that you would normally run at once like as
soon as you create them and collect them somehow

00:07:07.200 --> 00:07:25.290
into a larger pool so they can be bulk processed.
And so this is really just reusing your existing

00:07:25.290 --> 00:07:38.030
logic at rather than exporting them right
away and saving them for later. Now, in this

00:07:38.030 --> 00:07:45.490
first example code here, so this is just some
generic sample code about, you know, let's

00:07:45.490 --> 00:07:53.500
say you were creating a new TextAd. This is
how you create your operation by creating

00:07:53.500 --> 00:08:05.050
the AdGroupAd and then finally the operation.
This is a little bit different than V13. Obviously,

00:08:05.050 --> 00:08:23.030
you didn't have this concept of operations
for an AdGroupAd but, you know, this is the

00:08:23.030 --> 00:08:33.229
same thing that what we're going to be doing
regardless of the operation. You're going

00:08:33.229 --> 00:08:38.099
to be creating your operations first. So this
is an example of a possible operation. So

00:08:38.099 --> 00:08:54.569
the next part of the process is to create
your streams. So you've got those operations

00:08:54.569 --> 00:09:08.930
and I need to bundle that into some sort of
streams. I've said earlier, one of the determining

00:09:08.930 --> 00:09:14.709
criteria of how--which operations are going
for the streams as they're scoping it, so

00:09:14.709 --> 00:09:19.589
all of the operations in, let's say, at a
certain Campaign--I guess in certain Campaign

00:09:19.589 --> 00:09:27.500
should go with one operation stream where
a series of operations are being swept. You

00:09:27.500 --> 00:09:47.499
can't have--you can't violate that scoping
entity contract. So you cannot have a scope--an

00:09:47.499 --> 00:10:01.330
operationStream that targets one campaign
with its operations within it that actually

00:10:01.330 --> 00:10:07.379
operate against that. So, although it's kind
of like into the backend, you go out with

00:10:07.379 --> 00:10:16.350
part two or create that as well. And the other
thing you may want to, you know, [INDISTINCT]

00:10:16.350 --> 00:10:23.279
decide about when you're creating your streams
is "Which operations do I want to batch together

00:10:23.279 --> 00:10:35.230
and running in that kind of way where if one
fails, the whole thing fails?" The next--and

00:10:35.230 --> 00:10:46.959
here's an example of creating an operationStream.
You see it's a very lightweight object. It

00:10:46.959 --> 00:11:01.019
just has the scoping entity which is an ID
under campaignID or--and then the actual operations.

00:11:01.019 --> 00:11:18.110
Okay, so the next part of the process here
is creating the different parts. If you have

00:11:18.110 --> 00:11:28.509
an operation--BulkMutateJob that's not very
large, you can just send everything in one

00:11:28.509 --> 00:11:34.149
part. There's no reason and no requirements
to have multiple parts. But if you can only

00:11:34.149 --> 00:11:39.790
send so much data over your--you know, your
outbound connection so you don't think your

00:11:39.790 --> 00:11:46.769
connections are open for so long, it may not
be possible to send all of your information

00:11:46.769 --> 00:11:55.779
within one big request. So, it's a little
bit of balance and figuring out, you know,

00:11:55.779 --> 00:12:06.490
what your specific server environment can
do as far as how big can you make one robust,

00:12:06.490 --> 00:12:18.470
so it's a little bit of back and forth there
and figuring out what will work. But at the

00:12:18.470 --> 00:12:27.110
minimum, you just have one BulkMutateRequest
and then just put your existing operationStreams

00:12:27.110 --> 00:12:44.910
in those requests and set the index. So, index
is zero-based and it does affects how they're

00:12:44.910 --> 00:12:51.680
processed. So parts that are higher in the
next that have come first will be processed

00:12:51.680 --> 00:12:56.220
first. So all the operations in the stream
are processed in order and all the parts are

00:12:56.220 --> 00:13:04.019
processed in order. So the order does play
some of that if you do have operations that

00:13:04.019 --> 00:13:08.829
will depend on each other. So here's an example
of creating a BulkMutateRequest part. Once

00:13:08.829 --> 00:13:22.509
again, the principal object just holds a number
of operationStreams and the [INDISTINCT] the

00:13:22.509 --> 00:13:25.660
index of the [INDISTINCT]. All right, so,
next step is actually creating the job object.

00:13:25.660 --> 00:13:30.250
So what you want to do here is you want to
use--you want to--you know, you build up your

00:13:30.250 --> 00:13:31.380
BulkMutateJob which, once again, is not very
complex. Set the total number of parts that

00:13:31.380 --> 00:13:36.439
you plan to put into this job and then call
the BulkMutateJobService "mutate()" method

00:13:36.439 --> 00:13:42.360
with the ADD operation. So the first time
that you're uploading a part, you want to

00:13:42.360 --> 00:13:49.660
use the ADD operation. For instance, you would
add a Campaign or add an AdGroup. And then

00:13:49.660 --> 00:13:58.629
when you run this you'll also get back a result
that includes an ID that you can use to refer

00:13:58.629 --> 00:14:01.050
that BulkMutateJob later on. This is an example
of creating a BulkMutateJob. As I mentioned

00:14:01.050 --> 00:14:05.089
just the number of parts and then setting
the first part in the job, and then creating

00:14:05.089 --> 00:14:08.689
the ADD operation, and finally calling the
"mutate()" method. All right? So, then you

00:14:08.689 --> 00:14:15.459
have to upload your remaining parts. And you've
added the job, let's say, you still have more

00:14:15.459 --> 00:14:19.819
parts there that needs to be sent to the server.
So for the remaining parts, you're going to

00:14:19.819 --> 00:14:25.339
use the SET method so you use the--I mean,
the SET operation. You use the ADD operation

00:14:25.339 --> 00:14:34.179
when you're creating a job, but then for the
rest of the parts, you use a SET operation

00:14:34.179 --> 00:14:37.910
passing in the other parts. So the job has
one slot for a BulkMutateRequest, one slot

00:14:37.910 --> 00:14:46.779
per part. And so, on the first--on the creation
of the job sitting in the first part with

00:14:46.779 --> 00:14:56.439
ADD and then upload the remaining parts and
just kind of swap out the BulkMutateRequest

00:14:56.439 --> 00:15:02.660
with the next one and then call SET and send
again until all of your parts have been set

00:15:02.660 --> 00:15:22.139
on the job or uploaded to the server. This
is the example here of how you would kind

00:15:22.139 --> 00:15:33.790
of upload your remaining parts so you'd have
some sort of rule that for each part would

00:15:33.790 --> 00:15:40.910
set that part on the job, create an operation
to set operation on that job now that it has

00:15:40.910 --> 00:15:44.453
the new part beside of it and then call the
"mutate()" method again. All right, so the

00:15:44.453 --> 00:15:53.970
next part here is very familiar to people
who are working with the report service. We

00:15:53.970 --> 00:16:07.470
just have to wait for it to complete. So,
how this is done is by using the BulkMutateJobService

00:16:07.470 --> 00:16:17.790
with the "get()" method passing in to the
selector the ID of the job that you want to--that

00:16:17.790 --> 00:16:28.519
you're monitoring. You can also do a selector
for all jobs and find out all of the job statuses.

00:16:28.519 --> 00:16:33.809
And so in waiting for completion, you're going
to run the "get()" method and then there's

00:16:33.809 --> 00:16:39.560
different statuses that come back. As I mentioned,
one of them was called PENDING. PENDING means

00:16:39.560 --> 00:16:54.689
two things. PENDING means either, that your
job has not been fully uploaded yet, so you

00:16:54.689 --> 00:17:06.059
set three parts and uploaded two, your job
will be PENDING, as in, it's not complete

00:17:06.059 --> 00:17:15.340
yet. It'll also be pending if it hasn't yet
begun to run. It has all the parts but it

00:17:15.340 --> 00:17:23.180
hasn't started yet. I'll mention it later
on but basically every account has a queue,

00:17:23.180 --> 00:17:30.920
looks like a report queue, you have a BulkMutateJob
queue and only one of your jobs will running

00:17:30.920 --> 00:17:35.850
at a time. So if you've created many jobs,
some other jobs that haven't finished yet,

00:17:35.850 --> 00:17:39.570
it's going to remain PENDING until it starts.
So a PENDING, how does it [INDISTINCT] in

00:17:39.570 --> 00:17:45.580
that situation. PROCESSING, these are the
jobs you see at the front of the queue and

00:17:45.580 --> 00:17:47.370
this is actually running the operations at
that time. And then when it's done, it's either

00:17:47.370 --> 00:17:51.530
going to be COMPLETED or FAILED. Those are
the two kind of final statuses. COMPLETED

00:17:51.530 --> 00:17:57.300
doesn't mean that everything in it was successful.
COMPLETED means that the job was able to complete

00:17:57.300 --> 00:18:05.840
that there wasn't some horrific error that
made us [INDISTINCT] report. There could still

00:18:05.840 --> 00:18:13.391
be failures in individual operations, but
as a whole, the job completed. So FAILED is

00:18:13.391 --> 00:18:30.130
a much more serious kind of error and something
big happened that [INDISTINCT] the whole job

00:18:30.130 --> 00:18:36.272
[INDISTINCT]. So here is an example of how
you would kind of ping for the job status.

00:18:36.272 --> 00:18:43.840
You will use the BulkMutateJobSelector, passing
in the ID of your job, and then just do a

00:18:43.840 --> 00:18:46.800
loop calling the "get()" method on that selector,
and just determine whether or not it's, you

00:18:46.800 --> 00:18:47.800
know, it's still pending or processing or
if it's finished. That's what BulkMutateJobs,

00:18:47.800 --> 00:18:48.800
they are meant to be large jobs. So this is
going to take awhile for these jobs to run.

00:18:48.800 --> 00:18:50.190
So we do recommend, don't ping it every few
milliseconds because it's going to take a

00:18:50.190 --> 00:18:51.190
while. You know, so just kind of space out
those calls so that you don't waste minutes

00:18:51.190 --> 00:18:55.210
for questions and answers. So, the next step
here is getting the results. So, unlike, you

00:18:55.210 --> 00:19:00.740
know, regular mutate requests where you get
the results immediately, now you kind of have

00:19:00.740 --> 00:19:05.040
to retrieve the results. Once as you uploaded
the parts, you know, the kind of download

00:19:05.040 --> 00:19:06.680
the results. And so, basically what you do
here is you use the same BulkMutateJobService

00:19:06.680 --> 00:19:11.170
again. I think--but you set a resultPartIndex
which is kind of like correlates to your initial

00:19:11.170 --> 00:19:14.950
BulkMutateRequest partIndex. So, you're--as
you uploaded a part, now you're going to be

00:19:14.950 --> 00:19:23.860
downloading a part by specifying the index.
So, using this "get()" method with the resultPartIndex,

00:19:23.860 --> 00:19:28.130
instead of--usually, in back of the [INDISTINCT]
step here, when we were getting the job, if

00:19:28.130 --> 00:19:34.920
you don't set a resultPartIndex, all you'll
really get is that outer job shell. You don't

00:19:34.920 --> 00:19:39.510
get any of the inner parts of the results,
the request parts or the operation streams.

00:19:39.510 --> 00:19:41.630
You're kind of just getting that outer shell
of a job where you've kind of [INDISTINCT]

00:19:41.630 --> 00:19:46.711
around it. In order to get the actual results
back, you need to run--you need to set the

00:19:46.711 --> 00:19:50.210
resultPartIndex. And now, you get kind of
like a fully completed job with all the pieces

00:19:50.210 --> 00:19:55.610
inside of it. And so here's an example here
where, you know, for each of the number of

00:19:55.610 --> 00:19:59.510
request parts that we've uploaded where it's
going to set the partIndex, the resultPartIndex

00:19:59.510 --> 00:20:02.150
on a selector and then [INDISTINCT]. And then,
we can get the job with the results inside

00:20:02.150 --> 00:20:04.710
of it. And then we can kind of add those results
or process those results so you can be able

00:20:04.710 --> 00:20:05.770
to do like--you need to basically download
all of your results and see what happened.

00:20:05.770 --> 00:20:08.920
It didn't say explicitly here, but as you
can see, this is the structure of what a result

00:20:08.920 --> 00:20:13.120
looks like. And you can see it's a perfect
mirror of the request, right? So, before there

00:20:13.120 --> 00:20:15.170
was a BulkMutateRequest, there is now a BulkMutateResult.
There's an operationStream. There's an operationStreamResult.

00:20:15.170 --> 00:20:18.800
And for each operation, there's an operationResult
so it's kind of a mirroring [INDISTINCT].

00:20:18.800 --> 00:20:24.030
And so the last part here, now that you've
got all your results, to figure out, examine

00:20:24.030 --> 00:20:28.890
that and figure out what happened. So, an
operationStreamResult or the correlated object

00:20:28.890 --> 00:20:31.630
with an operationStream contains these operationResult
objects, and there are different types of

00:20:31.630 --> 00:20:41.930
operationResults. So, the one they probably
see most often in [INDISTINCT] is the ReturnValueResult.

00:20:41.930 --> 00:20:45.760
This means that the operation completed successfully
and it returned something. So normally, it

00:20:45.760 --> 00:20:51.520
can do ADD operation. What is returned is
the entity with an ID, you know, as it's--as

00:20:51.520 --> 00:20:53.720
it now exists. So it kind of getting back
whatever you were adding or if you update,

00:20:53.720 --> 00:21:01.750
you get back the object that you updated.
So, for ReturnValueResults, it's got a kind

00:21:01.750 --> 00:21:03.370
of a strange nesting to it that if anyone
here is using that, it's a little--can be

00:21:03.370 --> 00:21:04.370
a little difficult to work with, but essentially
ReturnValueResult has an operand inside of

00:21:04.370 --> 00:21:06.260
it. And operand then has the actual object
inside of it. So the operand object, it actually

00:21:06.260 --> 00:21:07.260
has a field for every possible entity that
could be returned in it. So it has like a

00:21:07.260 --> 00:21:08.890
campaign fields, it has an AdGroup field.
And one of those will have a value. And that's

00:21:08.890 --> 00:21:10.480
what [INDISTINCT] about the operation. Now,
I'll show you an example on the next page

00:21:10.480 --> 00:21:13.470
here to kind of clear it up. But the other
types of results, there's also a FailureResult

00:21:13.470 --> 00:21:14.924
as in the case like you try to apply an operation
and it failed. That FailureResult will have

00:21:14.924 --> 00:21:17.560
information like the API errors that you expect
to see in the [INDISTINCT]. Another is a BatchFailureResult.

00:21:17.560 --> 00:21:19.300
BatchFailureResult means that that operation
itself didn't fail but because another operation

00:21:19.300 --> 00:21:21.470
in that stream failed, it was not actually
executed. So, the batch failure result means

00:21:21.470 --> 00:21:23.570
some other operation possibly did not process
because it failed. So, here's a very detailed

00:21:23.570 --> 00:21:30.150
example of how you can process these OperationResults.
So in the first few lines, we're kind of just

00:21:30.150 --> 00:21:31.480
testing to see what kind of OperationResult
we got back whether it's a FailureResult or

00:21:31.480 --> 00:21:33.110
a BatchFailure. And this is where I was [INDISITINCT]
to the screen. And then at the bottom there,

00:21:33.110 --> 00:21:35.211
the final case is if it's a ReturnValueResult.
So, as I mentioned, in Java, how that works

00:21:35.211 --> 00:21:36.211
out is that there's going to be a "get something"
method. There's going to be like a get campaign

00:21:36.211 --> 00:21:37.211
or a get on this operand object. And so, what
we did in this case here is we're actually

00:21:37.211 --> 00:21:38.211
just using some reflection where we know what
object we're expecting out of this operation.

00:21:38.211 --> 00:21:40.940
And so, we're running it to get that object
method. It's a little difficult to view this

00:21:40.940 --> 00:21:44.260
operand object, but there were just some technical
limitations that are required it. And so that's

00:21:44.260 --> 00:21:45.260
why. You might have to create some creative
solutions in order to pull out your objects

00:21:45.260 --> 00:21:46.260
from this operand. And so, this is just another
screen kind of showing--this is [INDISTINCT]

00:21:46.260 --> 00:21:47.260
the documentation so you can see this on the
AdWords API Application. But this is the operand

00:21:47.260 --> 00:21:48.630
object. And as you can see, it has these different
fields that correlate to the different types

00:21:48.630 --> 00:21:49.630
of objects that could be returned by the operations.
All right so, now that we've seen, you know,

00:21:49.630 --> 00:21:57.240
what a BulkMutateJob is and how can you use
it, you know, why would you use it? What are

00:21:57.240 --> 00:21:59.260
the benefits of that? So, the number one of
that is cheaper. All operations processed

00:21:59.260 --> 00:22:00.400
by the BulkMutateJobService are 50% less.
So, depending on how much you're doing, I

00:22:00.400 --> 00:22:01.550
think it makes sense. The other thing that
we mentioned earlier is that it's kind of

00:22:01.550 --> 00:22:05.160
asynchronous, right? So you don't need to
keep your connections open while you're waiting

00:22:05.160 --> 00:22:09.690
for things to process. So, you know, there--I
think there have been some cases in the past

00:22:09.690 --> 00:22:18.970
where you send a large number of operations
at once, your connection get interrupted,

00:22:18.970 --> 00:22:21.700
cutoff either by on your side or our side,
and then you normally know what happened.

00:22:21.700 --> 00:22:22.700
And so you had to scale back maybe how any
operations you sent [INDISTINCT]. So rather

00:22:22.700 --> 00:22:26.651
than kind of scale that back and kind of configure
it that way, you do not have to wait and keep

00:22:26.651 --> 00:22:27.651
your connection open while the server has
stopped doing the work. You won't need to

00:22:27.651 --> 00:22:30.100
send the information, ping the status, and
get it all out. The other thing that's--I

00:22:30.100 --> 00:22:35.102
think is pretty nice about this is Operation
rate limit. So, we touched a little bit earlier

00:22:35.102 --> 00:22:36.102
today about quota rate--quota system and rate
systems and GPS. And a lot of these things

00:22:36.102 --> 00:22:45.490
can be--you know, like we said, we can't really
reveal all the specifics. So this can be a

00:22:45.490 --> 00:22:48.350
little tough to deal with. But what's nice
about the BulkMutateJobService is that it

00:22:48.350 --> 00:22:49.350
knows and it applies [INDISTINCT] as fast
as it can. So, if you give it a set of operations,

00:22:49.350 --> 00:22:50.350
you don't have to worry, "Well, am I sending
too many operations too quickly?" You know,

00:22:50.350 --> 00:22:51.350
"Is this going overboard? [INDISTINCT] a lot
of the process." You just give it to BulkMutateJobService

00:22:51.350 --> 00:22:52.350
and it'll apply them at whatever rate is appropriate,
as fast as it can. So, you have much of a

00:22:52.350 --> 00:22:53.350
transient failure. And the other thing which
we found out last time from the developers

00:22:53.350 --> 00:22:54.350
is that--and we brought it up earlier is,
you know, is there any sort of concurrency

00:22:54.350 --> 00:22:55.350
possible. And it turns out there actually
is some concurrency in place right now in

00:22:55.350 --> 00:22:56.350
how it operates. So, what's happening is that
operations under different scoping entities.

00:22:56.350 --> 00:22:57.350
So if we have some operations of the one campaign
scoping entity, another operationStream on

00:22:57.350 --> 00:22:58.350
another campaign scoping entity, those currently
are processed in parallel. So, you don't necessarily

00:22:58.350 --> 00:22:59.350
process every single operation one after another.
If they're--if they target different scoping

00:22:59.350 --> 00:23:00.350
entities, they're currently processed in parallel.
Now, so to be clear here is that the kind

00:23:00.350 --> 00:23:03.970
of the design and the goals of the BulkMutateJobService
was not to get things done faster, all right?

00:23:03.970 --> 00:23:06.240
I think a lot of people have that expectation.
And while this last slide can it lead to things

00:23:06.240 --> 00:23:08.001
getting done faster? It's not really the end
goal. The end goal is really to kind of take

00:23:08.001 --> 00:23:09.001
away a lot of the manual work you have to
do in your program and doing that in the backend

00:23:09.001 --> 00:23:10.001
and applying all these rules automatically.
So...

00:23:10.001 --> 00:23:11.001
&gt;&gt; And reduce chatter.
&gt;&gt; KOLEDA: Yeah. As we point it out here,

00:23:11.001 --> 00:23:12.001
reduce chatter, reduce the number of requests,
kind of just take away a lot of those tasks

00:23:12.001 --> 00:23:13.001
and have them done by the backend, but not
that you can get the same number of operations

00:23:13.001 --> 00:23:14.001
done in a shorter amount of time. That's not
necessarily true. It may be true in some cases.

00:23:14.001 --> 00:23:15.001
It's not really the way you should approach
the BulkMutateJobService. So some of the limitations,

00:23:15.001 --> 00:23:16.001
I think we touched about some of these. There's
one job queue per account with a 10 pending

00:23:16.001 --> 00:23:17.001
job limit or 10 job limits. So, a kind of
like you [INDISTINCT] queue. And there are

00:23:17.001 --> 00:23:18.001
some like kind of numerical limitations about
how big a job can be. So a job can only have

00:23:18.001 --> 00:23:19.001
500,000 operations in only certain parts.
And currently, only 10 scoped campaigns for

00:23:19.001 --> 00:23:20.001
1 scoped account. So you currently can't create
a job that affects a ton of campaigns at a

00:23:20.001 --> 00:23:21.001
time or multiple accounts at a time. It's
kind of limited to 10 campaigns at 1 account.

00:23:21.001 --> 00:23:22.001
I think the campaigns number is flexible.
The account is obviously going to move across

00:23:22.001 --> 00:23:23.001
the line thing. I think it needs some bit
of changes but these are the kind of initial

00:23:23.001 --> 00:23:24.001
numbers that we [INDISTINCT]. There are also
limitations to how many streams you can have

00:23:24.001 --> 00:23:25.001
per part, how many operations per part, and
so on. The other thing I touched earlier is

00:23:25.001 --> 00:23:26.001
that there's currently no functionality to
remove a pending job, so if you somehow uploaded

00:23:26.001 --> 00:23:27.001
two parts, then you suddenly want to stop
for whatever reason. [INDISTINCT] you kind

00:23:27.001 --> 00:23:28.001
of remove their job from your queue. And it
can't cancel [INDISTICT]. I'm going to touch

00:23:28.001 --> 00:23:29.001
on that. It's something I think they understand
people are interested in. And then the other

00:23:29.001 --> 00:23:30.001
one here is that you can't upload an entire
campaign structure on one [INDISTINCT]. And

00:23:30.001 --> 00:23:31.001
the reason is that, is that you can't have
one operation that has a Campaign, another

00:23:31.001 --> 00:23:32.001
that's an AdGroup to that Campaign, another
that adds an ad to an AdGroup, because each

00:23:32.001 --> 00:23:33.001
of those sub-entities relies on the ID of
the parent, right? You can't create an AdGroup

00:23:33.001 --> 00:23:34.001
until you know the campaignID that you want
[INDISTINCT] to. And you don't that campaignID

00:23:34.001 --> 00:23:35.001
until the Campaign is completed. So it's kind
of a chicken and egg situation right down

00:23:35.001 --> 00:23:36.001
there. You can't right at the moment just
create all of the objects for a whole new

00:23:36.001 --> 00:23:37.001
Campaign and put that in one BulkMutateJob.
All right, well, I'll be around the rest of

00:23:37.001 --> 00:23:38.001
the day if you have any other question on
BulkMutateJobService or you want to start

00:23:38.001 --> 00:23:38.014
to writing some codes and use it, I'm here
to help. Thank you.

