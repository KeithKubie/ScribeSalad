WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
We want to harness the power of exceptions

00:00:02.000 --> 00:00:05.000
just like you might harness a horse to a wagon.

00:00:05.000 --> 00:00:09.000
I assert that that's a horse and not, say, a giant, mutant, quadruped duck,

00:00:09.000 --> 00:00:14.000
which is what it might admittedly look a little bit more like to the untrained eye.

00:00:14.000 --> 00:00:17.000
We're going to use exceptions under the hood in our interpreter

00:00:17.000 --> 00:00:20.000
to simulate return statements.

00:00:20.000 --> 00:00:22.000
Remember that after a return statement we don't want to execute

00:00:22.000 --> 00:00:25.000
the statements that come after it; we want to jump back to the caller.

00:00:25.000 --> 00:00:27.000
We use exceptions to do that.

00:00:27.000 --> 00:00:30.000
Let's consider our code for evaluating statements

00:00:30.000 --> 00:00:32.000
in the context of an environment again.

00:00:32.000 --> 00:00:35.000
We get out the type of the statement, and if it is a return statement,

00:00:35.000 --> 00:00:37.000
we'll get out the associated expression.

00:00:37.000 --> 00:00:40.000
Remember you can write something like 1 + 2,

00:00:40.000 --> 00:00:43.000
so we're going to have to evaluate this expression's abstract syntax tree

00:00:43.000 --> 00:00:46.000
or parse tree to figure out what it means.

00:00:46.000 --> 00:00:50.000
So we'll evaluate that return expression in the environment and get a return value,

00:00:50.000 --> 00:00:52.000
which I'll abbreviate as retval,

00:00:52.000 --> 00:00:55.000
and then we'll just raise an exception with retval as its payload,

00:00:55.000 --> 00:00:59.000
just like 22 was the payload in the previous example.

00:00:59.000 --> 00:01:01.000
And we'll just have to trust ourselves to catch it later.

00:01:01.000 --> 09:59:59.000
In fact, that's what we'll do right now.

