WEBVTT
Kind: captions
Language: en

00:00:03.232 --> 00:00:05.690
ANDREW WARREN: Today we're
going to be talking a little bit

00:00:05.690 --> 00:00:09.342
about what Weave is and some of
the developer components to it.

00:00:09.342 --> 00:00:11.800
And then in a little bit, Sam
is going to join me out here,

00:00:11.800 --> 00:00:13.420
and we're going to
talk about Brillo.

00:00:13.420 --> 00:00:15.870
And we're going to try to
leave some time towards the end

00:00:15.870 --> 00:00:16.785
for Q&amp;A as well.

00:00:16.785 --> 00:00:18.410
And there are some
mics along the sides

00:00:18.410 --> 00:00:20.210
as well as on the
balcony for folks

00:00:20.210 --> 00:00:22.342
to line up for that
if they need to.

00:00:22.342 --> 00:00:23.925
So without further
ado, let's dive in.

00:00:26.966 --> 00:00:29.480
Before we get into
really what Weave is,

00:00:29.480 --> 00:00:31.520
and what the
components there are,

00:00:31.520 --> 00:00:34.880
I want to talk a little bit
more about the context of some

00:00:34.880 --> 00:00:38.600
of what we're seeing of shifting
user expectations in this area

00:00:38.600 --> 00:00:41.270
because that actually informed
a lot of what we were doing

00:00:41.270 --> 00:00:42.951
from the Brillo and Weave side.

00:00:42.951 --> 00:00:44.450
And I think it'll
help to understand

00:00:44.450 --> 00:00:46.215
why some of the
decisions were made,

00:00:46.215 --> 00:00:48.840
particularly around privacy and
security, but some other things

00:00:48.840 --> 00:00:50.510
as well.

00:00:50.510 --> 00:00:53.070
So we're seeing actually
a pretty quickly shifting

00:00:53.070 --> 00:00:56.315
landscape in terms of user
expectations around devices.

00:00:56.315 --> 00:00:58.190
And here I don't just
mean connected devices,

00:00:58.190 --> 00:01:01.570
but even the devices that people
normally have in their homes,

00:01:01.570 --> 00:01:04.459
at their offices, and in a
variety of different places.

00:01:04.459 --> 00:01:06.950
And one of the first and the
most visible ones of those

00:01:06.950 --> 00:01:08.740
is around the
user's expectations

00:01:08.740 --> 00:01:10.730
around the experience
with their devices.

00:01:10.730 --> 00:01:12.365
So there was a
time when in order

00:01:12.365 --> 00:01:13.740
to bring a device
into your home,

00:01:13.740 --> 00:01:15.790
it was generally a look
through the manual,

00:01:15.790 --> 00:01:17.430
figure out what
magical combination

00:01:17.430 --> 00:01:20.060
of buttons and arrow keys
to press on the top of it

00:01:20.060 --> 00:01:21.612
to get it set up.

00:01:21.612 --> 00:01:24.070
Sometimes you might have to
download a Windows application.

00:01:24.070 --> 00:01:25.960
And then you'd have to go
through it finding the IP

00:01:25.960 --> 00:01:27.751
address of the device
on the local network,

00:01:27.751 --> 00:01:30.260
and then opening up a browser
to the on-board web server.

00:01:30.260 --> 00:01:33.460
And thankfully those days
are fast retreating from us.

00:01:33.460 --> 00:01:35.570
But what that means
is that users are also

00:01:35.570 --> 00:01:38.800
starting to expect that there's
better experiences with regards

00:01:38.800 --> 00:01:40.420
to getting devices
out of the boxes,

00:01:40.420 --> 00:01:42.820
that there are better
experiences with regards

00:01:42.820 --> 00:01:47.650
to getting these devices set
up and then ready to use,

00:01:47.650 --> 00:01:49.335
and then actually
starting to use those.

00:01:49.335 --> 00:01:51.210
And that actually comes
into the second piece

00:01:51.210 --> 00:01:53.460
of this, which is really
about mobile experiences

00:01:53.460 --> 00:01:57.840
playing a larger role in users
interacting with their devices.

00:01:57.840 --> 00:02:01.630
So again, back when users
really needed in order

00:02:01.630 --> 00:02:04.309
to have their computer
talk to their device,

00:02:04.309 --> 00:02:05.850
that kind of experience
didn't really

00:02:05.850 --> 00:02:08.349
work out very well because the
computer wasn't very portable

00:02:08.349 --> 00:02:10.344
and often neither
was the device.

00:02:10.344 --> 00:02:12.010
Mobile has started
to change that a bit.

00:02:12.010 --> 00:02:14.800
It's easier to carry around
your mobile phone with you

00:02:14.800 --> 00:02:16.590
and interact with
devices in whatever room

00:02:16.590 --> 00:02:20.220
of the house you are in or the
device you're talking to is in.

00:02:20.220 --> 00:02:23.400
We're also seeing as part
of that growing interaction

00:02:23.400 --> 00:02:27.870
between mobile and the devices
that we have in our homes

00:02:27.870 --> 00:02:30.250
the addition of an increased
intelligence and kind

00:02:30.250 --> 00:02:32.095
of adaptation to the
user's circumstances

00:02:32.095 --> 00:02:34.040
and to their behavior.

00:02:34.040 --> 00:02:35.720
We now have vacuum
cleaners that know

00:02:35.720 --> 00:02:37.830
when we are or are not
home and have the ability

00:02:37.830 --> 00:02:39.420
to learn our floor plans.

00:02:39.420 --> 00:02:42.240
And again these are still very
early days for a lot of that,

00:02:42.240 --> 00:02:45.500
but it's starting to shift
user expectations around what

00:02:45.500 --> 00:02:47.175
their devices should
be doing for them.

00:02:47.175 --> 00:02:48.550
And that's something
that we have

00:02:48.550 --> 00:02:52.080
to take into consideration
to some extent as well.

00:02:52.080 --> 00:02:54.380
Another side of this
that we're seeing

00:02:54.380 --> 00:02:57.670
as we're kind of looking
over at some of the landscape

00:02:57.670 --> 00:03:00.200
here is that these devices
are starting to get

00:03:00.200 --> 00:03:01.810
better and better over time.

00:03:01.810 --> 00:03:04.000
And the user
expectations are starting

00:03:04.000 --> 00:03:06.210
to shift to orient
around that as well.

00:03:06.210 --> 00:03:09.250
This really started to some
extent with the internet

00:03:09.250 --> 00:03:12.130
and with web applications and
web services getting better

00:03:12.130 --> 00:03:14.270
each day you come back
and reload the page.

00:03:14.270 --> 00:03:16.640
And then that carried over
to the mobile landscape,

00:03:16.640 --> 00:03:19.160
where the internet also
allows the mobile experiences

00:03:19.160 --> 00:03:20.850
to get better day by day.

00:03:20.850 --> 00:03:23.490
And if you have a problem, if
you have a bug, if things don't

00:03:23.490 --> 00:03:24.890
work quite the
way you want, take

00:03:24.890 --> 00:03:27.450
the next app update and
everything works better

00:03:27.450 --> 00:03:29.220
or you hope so at least.

00:03:29.220 --> 00:03:32.390
And so that kind of
expectation is also

00:03:32.390 --> 00:03:34.990
starting to bleed over a bit
into the connected devices

00:03:34.990 --> 00:03:37.510
space and the consumer
devices space--

00:03:37.510 --> 00:03:39.600
not just because the
device itself maybe

00:03:39.600 --> 00:03:41.210
gets better, but
also the experiences

00:03:41.210 --> 00:03:43.277
that come along with
it are getting better

00:03:43.277 --> 00:03:45.610
because you can update those
mobile apps and these kinds

00:03:45.610 --> 00:03:48.160
of things.

00:03:48.160 --> 00:03:51.210
The next piece is actually,
probably, to some extent

00:03:51.210 --> 00:03:54.820
the most important piece of
this, which is as connectivity

00:03:54.820 --> 00:03:57.970
starts to come to devices
in the home, in the office,

00:03:57.970 --> 00:04:00.390
and in these kinds
of places, with it

00:04:00.390 --> 00:04:03.110
comes all of the security
and privacy considerations

00:04:03.110 --> 00:04:05.760
that have dominated really
the rest of the digital age

00:04:05.760 --> 00:04:06.830
all together.

00:04:06.830 --> 00:04:10.450
And so devices now have to play
in the same security landscape

00:04:10.450 --> 00:04:11.110
to some extent.

00:04:11.110 --> 00:04:13.700
And user expectations
around security

00:04:13.700 --> 00:04:16.820
and around privacy and
ownership of their data

00:04:16.820 --> 00:04:19.410
becomes just as important
for these kinds of devices

00:04:19.410 --> 00:04:21.529
and for consumer
electronics as it really

00:04:21.529 --> 00:04:25.120
has historically for computers
and for mobile devices

00:04:25.120 --> 00:04:27.540
and these kinds of things.

00:04:27.540 --> 00:04:30.480
And the last piece is a little
bit on the technical side

00:04:30.480 --> 00:04:33.030
in addition to on the
consumer expectations side.

00:04:33.030 --> 00:04:36.850
But there's really an increased
expectation that these devices

00:04:36.850 --> 00:04:38.910
can actually update.

00:04:38.910 --> 00:04:41.950
Historically, devices,
once they hit the shelves,

00:04:41.950 --> 00:04:43.970
were really frozen in time.

00:04:43.970 --> 00:04:45.690
You bring a device
home and you can

00:04:45.690 --> 00:04:47.460
tell what year a
kitchen was last

00:04:47.460 --> 00:04:50.550
remodeled just by taking a
quick look at the devices in it.

00:04:50.550 --> 00:04:53.750
But we can't really
get continuous updates

00:04:53.750 --> 00:04:56.482
and continuous improvements
to the experience

00:04:56.482 --> 00:04:58.940
if there's not an ability to
update these kinds of devices.

00:04:58.940 --> 00:05:01.200
And more importantly,
devices can't

00:05:01.200 --> 00:05:04.130
sit in the home for two
years, five years, 10 years,

00:05:04.130 --> 00:05:06.330
and continue to be secure
with the constantly

00:05:06.330 --> 00:05:09.530
evolving security
landscape of the web

00:05:09.530 --> 00:05:10.970
if they're not updatable.

00:05:10.970 --> 00:05:13.180
And so there's an
increasing expectation

00:05:13.180 --> 00:05:18.180
and reliance on these devices
to be updatable over the air.

00:05:18.180 --> 00:05:20.004
So this is just
again some context

00:05:20.004 --> 00:05:21.670
of some of what we're
seeing looking out

00:05:21.670 --> 00:05:23.790
over the expectations
landscape from the consumer

00:05:23.790 --> 00:05:26.500
perspective that help to inform
some parts of what you're

00:05:26.500 --> 00:05:29.870
going to see with regards
to Brillo and Weave.

00:05:29.870 --> 00:05:34.170
So with that, let's go into
a little bit on what Weave is

00:05:34.170 --> 00:05:39.640
as well as the experiences
that are a part of Weave.

00:05:39.640 --> 00:05:42.080
And then we'll lead right into
some of the components that

00:05:42.080 --> 00:05:43.720
are available for developers
because that's really

00:05:43.720 --> 00:05:45.100
the most important part here.

00:05:45.100 --> 00:05:47.641
And there will be several more
talks over the course of today

00:05:47.641 --> 00:05:49.980
as well as tomorrow getting
into not only specifics

00:05:49.980 --> 00:05:52.240
of the developer experience
for parts of these,

00:05:52.240 --> 00:05:54.806
but also around
the actual code lab

00:05:54.806 --> 00:05:56.180
so that you can
get your feet wet

00:05:56.180 --> 00:06:00.190
and try to play around
with a lot of this.

00:06:00.190 --> 00:06:03.540
So the best way to
think of Weave, I think,

00:06:03.540 --> 00:06:06.380
is as an
application-layer protocol

00:06:06.380 --> 00:06:09.160
that tries to include
a number of pieces that

00:06:09.160 --> 00:06:11.810
are fairly integral to
this kind of experience

00:06:11.810 --> 00:06:13.690
of building a connected device.

00:06:13.690 --> 00:06:16.780
These include turkey support
for things like device discovery

00:06:16.780 --> 00:06:18.580
over a number of
different transports,

00:06:18.580 --> 00:06:21.780
for things like authentication
against devices,

00:06:21.780 --> 00:06:25.430
and more importantly in some
situations authorization

00:06:25.430 --> 00:06:28.580
for who or what has
access to those devices.

00:06:28.580 --> 00:06:30.930
It includes provisioning
and the ability

00:06:30.930 --> 00:06:33.480
to get a device set
up out of the box.

00:06:33.480 --> 00:06:36.160
And to go from out
of box to ready

00:06:36.160 --> 00:06:40.760
to use as quickly as possible
and as easily as possible.

00:06:40.760 --> 00:06:42.960
And it also includes
realtime communication

00:06:42.960 --> 00:06:45.180
in both directions
to try to make sure

00:06:45.180 --> 00:06:47.880
that if a client
application or a service

00:06:47.880 --> 00:06:50.170
wants to tell a device you
need to do this thing now,

00:06:50.170 --> 00:06:52.128
the device knows as
quickly as possible that it

00:06:52.128 --> 00:06:52.926
needs to do that.

00:06:52.926 --> 00:06:54.550
And likewise in the
opposite direction,

00:06:54.550 --> 00:06:57.390
if the device's state updates,
if the status of that device

00:06:57.390 --> 00:07:00.735
changes-- I'm now broken,
the temperature has changed,

00:07:00.735 --> 00:07:02.610
any of these kinds of
things-- it's important

00:07:02.610 --> 00:07:05.380
that they be able to notify
applications and services that

00:07:05.380 --> 00:07:09.430
are subscribed to that state
as quickly as possible.

00:07:09.430 --> 00:07:12.310
So this enables a variety of
different kind of experiences

00:07:12.310 --> 00:07:15.330
that we're trying to make
sure are built on top of this

00:07:15.330 --> 00:07:18.280
and to make sure are easily
accessible to the user.

00:07:18.280 --> 00:07:21.490
The first and one of the
more important ones of those

00:07:21.490 --> 00:07:23.774
is around the device
setup experience.

00:07:23.774 --> 00:07:26.440
So one of the things we found as
we are talking to manufacturers

00:07:26.440 --> 00:07:28.350
is that actually this
is where a lot of users

00:07:28.350 --> 00:07:31.280
fall off the connectivity train.

00:07:31.280 --> 00:07:33.870
A lot of these devices
have different ways

00:07:33.870 --> 00:07:36.000
of setting up the device.

00:07:36.000 --> 00:07:38.320
Again it's still a combination
of directional keys

00:07:38.320 --> 00:07:40.890
on the top of the device or
some combination of those

00:07:40.890 --> 00:07:43.280
in an application that you
have to find in the store

00:07:43.280 --> 00:07:45.300
and make sure you pick the
right one with the right name

00:07:45.300 --> 00:07:47.633
and then download and install
and all this kind of stuff

00:07:47.633 --> 00:07:49.077
and it gets very cumbersome.

00:07:49.077 --> 00:07:50.910
And then on top of that,
the user frequently

00:07:50.910 --> 00:07:52.710
needs to remember
their Wi-Fi network

00:07:52.710 --> 00:07:54.210
password and a lot
of other details

00:07:54.210 --> 00:07:56.470
that then just makes this
a very difficult process.

00:07:56.470 --> 00:07:58.860
So talking to
manufacturers, we actually

00:07:58.860 --> 00:08:03.330
found that this creates
a lot of support volume

00:08:03.330 --> 00:08:05.470
and that this creates
a lot of user confusion

00:08:05.470 --> 00:08:08.250
that ultimately leads to people
not using the advanced features

00:08:08.250 --> 00:08:10.300
of their devices.

00:08:10.300 --> 00:08:13.900
So what we tried to do was just
bake this directly into Weave

00:08:13.900 --> 00:08:16.290
and to make it a simple
easy consistent experience

00:08:16.290 --> 00:08:19.011
for users out of the box.

00:08:19.011 --> 00:08:21.010
You can see the kind of
parts of this experience

00:08:21.010 --> 00:08:21.850
here on Android.

00:08:21.850 --> 00:08:23.710
Without the user needing
to install an app,

00:08:23.710 --> 00:08:25.780
without the user needing
to go and find anything

00:08:25.780 --> 00:08:28.170
to begin with, they
can just come directly

00:08:28.170 --> 00:08:30.360
to this experience, find
the devices around them

00:08:30.360 --> 00:08:32.804
that are available to set
up, choose the network

00:08:32.804 --> 00:08:34.720
that they want to get
that device onto if it's

00:08:34.720 --> 00:08:37.055
a Wi-Fi connected device.

00:08:37.055 --> 00:08:38.429
And importantly
there on Android,

00:08:38.429 --> 00:08:40.870
we're actually able to-- if
that mobile device has connected

00:08:40.870 --> 00:08:43.120
to the network before-- just
pull the network password

00:08:43.120 --> 00:08:45.270
directly from the system
with the user permission

00:08:45.270 --> 00:08:47.210
to make sure that the
user doesn't have to go

00:08:47.210 --> 00:08:49.543
and hunt down the little
notebooks where they wrote down

00:08:49.543 --> 00:08:52.286
their Wi-Fi password two
years ago or things like this.

00:08:52.286 --> 00:08:53.660
And then take the
user to a place

00:08:53.660 --> 00:08:55.410
where they can basically
choose an account

00:08:55.410 --> 00:08:57.460
if they want to control
authenticated access

00:08:57.460 --> 00:08:58.910
to this device.

00:08:58.910 --> 00:09:01.850
And then just get the
app and go directly

00:09:01.850 --> 00:09:04.040
into the experience that
came with the device.

00:09:04.040 --> 00:09:05.825
So really the aim
here is out of box

00:09:05.825 --> 00:09:07.870
to ready to use in
less than a minute.

00:09:07.870 --> 00:09:10.050
And we're trying to make
sure that that's also

00:09:10.050 --> 00:09:12.570
a very consistent simple
experience so that users

00:09:12.570 --> 00:09:15.140
don't have to re-learn it every
time they get a new device.

00:09:15.140 --> 00:09:17.515
As long as they pick up one
of these devices in the store

00:09:17.515 --> 00:09:19.460
they should know
exactly what to expect

00:09:19.460 --> 00:09:23.511
in terms of getting it
set up and ready to go.

00:09:23.511 --> 00:09:25.980
There's a few other
parts of the experience

00:09:25.980 --> 00:09:30.180
that we also consider to
be very important to kind

00:09:30.180 --> 00:09:32.840
of align this protocol
around, the first of which

00:09:32.840 --> 00:09:35.420
is being able to share
access to these devices.

00:09:35.420 --> 00:09:39.130
So mobile devices today
are very one-to-one.

00:09:39.130 --> 00:09:41.440
It's really a personal device.

00:09:41.440 --> 00:09:43.540
And although you may have
lots of accounts on it,

00:09:43.540 --> 00:09:45.620
oftentimes all of
those accounts are you.

00:09:45.620 --> 00:09:47.370
And in very limited
cases they're

00:09:47.370 --> 00:09:50.070
shared between a number
of different people.

00:09:50.070 --> 00:09:52.230
These devices typically
live in our homes

00:09:52.230 --> 00:09:54.467
and office spaces which are
very much shared spaces.

00:09:54.467 --> 00:09:56.550
And as a result, being
able to say something like,

00:09:56.550 --> 00:09:57.360
"This is my family.

00:09:57.360 --> 00:09:57.980
I trust them.

00:09:57.980 --> 00:10:00.050
They all have access
to this thing"

00:10:00.050 --> 00:10:03.340
is a very important
capability to have.

00:10:03.340 --> 00:10:05.770
And likewise, being able
to say, "These people

00:10:05.770 --> 00:10:06.520
are not my family.

00:10:06.520 --> 00:10:07.860
I do not trust them.

00:10:07.860 --> 00:10:09.980
They are my tenants
and they should not

00:10:09.980 --> 00:10:13.097
be able to control these things
and change the cost of washing

00:10:13.097 --> 00:10:13.930
machines and dryers.

00:10:13.930 --> 00:10:15.797
But they should be
able to see them

00:10:15.797 --> 00:10:17.880
and to see whether or not
they're currently in use

00:10:17.880 --> 00:10:20.213
so that they can decide when
to go down to the laundry."

00:10:20.213 --> 00:10:21.674
That's also equally important.

00:10:21.674 --> 00:10:23.840
So we've tried to make sure
that from the ground up,

00:10:23.840 --> 00:10:27.940
these devices are sharable and
that it's very easy to users

00:10:27.940 --> 00:10:31.820
to grant access at different
levels to different people.

00:10:31.820 --> 00:10:33.790
The next part of
this that's important

00:10:33.790 --> 00:10:37.020
is making sure that this
protocol-- and especially

00:10:37.020 --> 00:10:39.380
for that bi-directional
communication--

00:10:39.380 --> 00:10:42.070
is fast and secure.

00:10:42.070 --> 00:10:44.800
Security, obviously, is
a fairly important piece

00:10:44.800 --> 00:10:45.970
on any transport.

00:10:45.970 --> 00:10:48.080
And that has to be
taken care of as well

00:10:48.080 --> 00:10:50.050
in a privacy-centric fashion.

00:10:50.050 --> 00:10:52.260
The other side of
it, though, is speed.

00:10:52.260 --> 00:10:54.996
A lot of people today, when
they flip a light switch

00:10:54.996 --> 00:10:56.870
or when they tell their
microwave to turn off

00:10:56.870 --> 00:11:00.349
or these kinds of things,
expect instantaneous response.

00:11:00.349 --> 00:11:02.140
They expect the devices
to do what they say

00:11:02.140 --> 00:11:04.200
and to do it immediately.

00:11:04.200 --> 00:11:06.616
Once you get into connectivity
and into a variety

00:11:06.616 --> 00:11:07.990
of different
wireless transports,

00:11:07.990 --> 00:11:11.080
that starts to become
a higher bar to hit.

00:11:11.080 --> 00:11:12.950
And so part of what
we've tried to do

00:11:12.950 --> 00:11:16.990
is we've tried to layer Weave
on top of both the local network

00:11:16.990 --> 00:11:19.190
and remote hops
through the cloud

00:11:19.190 --> 00:11:21.149
and adding additional
transports as we go along

00:11:21.149 --> 00:11:23.690
to try to make sure that we can
always pick the fastest route

00:11:23.690 --> 00:11:25.130
to get a message to the device.

00:11:25.130 --> 00:11:28.290
So if your phone is
on 4G, and your light

00:11:28.290 --> 00:11:31.930
is on the local Wi-Fi
network, or on BLE,

00:11:31.930 --> 00:11:33.610
or in this case on
the Wi-Fi network,

00:11:33.610 --> 00:11:35.820
then the message would take
a trip through the cloud

00:11:35.820 --> 00:11:37.570
and we'd get there as
quickly as possible.

00:11:37.570 --> 00:11:40.130
But if your phone is on
the local network as well,

00:11:40.130 --> 00:11:41.660
that message shouldn't
bother going to the cloud.

00:11:41.660 --> 00:11:43.020
It should just go
directly to the light.

00:11:43.020 --> 00:11:44.760
And it should go as
quickly as possible

00:11:44.760 --> 00:11:49.140
to make sure the user feels
no noticeable delay there.

00:11:49.140 --> 00:11:51.780
So that's part of what we
mean by fast communication.

00:11:51.780 --> 00:11:54.190
The second piece of that
that's important to us

00:11:54.190 --> 00:11:56.590
is consumers shouldn't
have to know that.

00:11:56.590 --> 00:11:58.500
And they shouldn't have
to understand that.

00:11:58.500 --> 00:12:00.930
So you may have a variety of
different wireless protocols

00:12:00.930 --> 00:12:02.099
being used in your home.

00:12:02.099 --> 00:12:04.390
You shouldn't need to know
anything about them in order

00:12:04.390 --> 00:12:05.460
to use these things.

00:12:05.460 --> 00:12:08.030
And all of this should be
transparent to the user.

00:12:08.030 --> 00:12:10.860
The other half of that
is that over time we're

00:12:10.860 --> 00:12:14.010
hoping to make this relatively
transparent to the application

00:12:14.010 --> 00:12:17.120
and the service developer
as well because learning

00:12:17.120 --> 00:12:19.200
the different APIs for
every different operating

00:12:19.200 --> 00:12:21.010
system and platform
you're building on,

00:12:21.010 --> 00:12:23.330
for controlling the Bluetooth
radio or Wi-Fi or any

00:12:23.330 --> 00:12:25.581
of these kinds of
things, is a chore that

00:12:25.581 --> 00:12:26.830
really shouldn't be necessary.

00:12:26.830 --> 00:12:28.540
So we want to make it
as easy as possible

00:12:28.540 --> 00:12:31.740
for you to say, "Take this
command, send it to this light,

00:12:31.740 --> 00:12:33.567
find the best way
to get it there."

00:12:33.567 --> 00:12:35.150
And that's something
that we're trying

00:12:35.150 --> 00:12:37.310
to bake into the
different client libraries

00:12:37.310 --> 00:12:39.500
that we make available as well.

00:12:39.500 --> 00:12:41.760
The last piece, or not
quite the last piece,

00:12:41.760 --> 00:12:44.640
but one of the other
important pieces,

00:12:44.640 --> 00:12:47.590
of the consumer experience that
we feel is fairly important

00:12:47.590 --> 00:12:50.210
here is that users actually
have a choice in applications

00:12:50.210 --> 00:12:51.350
and experiences.

00:12:51.350 --> 00:12:53.200
So one of the things
that we've noticed--

00:12:53.200 --> 00:12:55.450
and you've probably noticed,
too, with Google services

00:12:55.450 --> 00:12:58.320
and applications-- is we can
build a fairly good experience

00:12:58.320 --> 00:13:00.066
for about 80% of people.

00:13:00.066 --> 00:13:02.190
And then what made that a
great experience for them

00:13:02.190 --> 00:13:06.027
makes it not such a stellar
experience for another 20%.

00:13:06.027 --> 00:13:07.860
The things that make
it good for some people

00:13:07.860 --> 00:13:09.600
don't make it so
swell for others.

00:13:09.600 --> 00:13:12.090
And so it's important to us
as we're building out this

00:13:12.090 --> 00:13:15.111
platform that we acknowledge--
especially as you start to have

00:13:15.111 --> 00:13:16.860
a variety of different
devices around you,

00:13:16.860 --> 00:13:19.130
a variety of different
experiences--

00:13:19.130 --> 00:13:23.690
that from the user perspective
there's not going to be

00:13:23.690 --> 00:13:25.414
a one-size-fits-all solution.

00:13:25.414 --> 00:13:27.830
And we're not going to build
a one-size-fits-all solution.

00:13:27.830 --> 00:13:29.810
And manufacturers aren't going
to build a one-size-fits-all

00:13:29.810 --> 00:13:30.370
solution.

00:13:30.370 --> 00:13:32.430
There isn't going to
be that in this space.

00:13:32.430 --> 00:13:34.930
And so we want to make sure
that this platform is very, very

00:13:34.930 --> 00:13:37.610
open and allows
developers to build

00:13:37.610 --> 00:13:39.747
all kinds of different,
rich experiences

00:13:39.747 --> 00:13:41.580
that make sense for
different types of users

00:13:41.580 --> 00:13:42.871
in different kinds of contexts.

00:13:45.680 --> 00:13:49.010
So the one other piece
from the user perspective

00:13:49.010 --> 00:13:50.700
that's important for
us and that we've

00:13:50.700 --> 00:13:53.230
tried to make sure is
enabled by this protocol

00:13:53.230 --> 00:13:56.036
is how to handle app
and service access.

00:13:56.036 --> 00:13:57.660
So we talked a little
bit earlier about

00:13:57.660 --> 00:13:59.860
granting users access, but what
does it mean once you actually

00:13:59.860 --> 00:14:00.400
get access?

00:14:00.400 --> 00:14:01.510
Does that mean
everything on your phone

00:14:01.510 --> 00:14:02.610
can talk to these devices?

00:14:02.610 --> 00:14:04.776
Does that mean if you grant
a particular application

00:14:04.776 --> 00:14:07.794
access it gets full access
to all of your devices?

00:14:07.794 --> 00:14:09.710
And the reality is there
are different devices

00:14:09.710 --> 00:14:12.085
and different categories of
devices that are more privacy

00:14:12.085 --> 00:14:15.070
sensitive or that are more
security sensitive or safety

00:14:15.070 --> 00:14:15.970
sensitive.

00:14:15.970 --> 00:14:18.580
So just because you bought
a toy that's a lot of fun

00:14:18.580 --> 00:14:20.660
and that you want to
use an application with

00:14:20.660 --> 00:14:22.970
doesn't mean that application
should also get access

00:14:22.970 --> 00:14:25.940
to your oven or to your
scanner if you happen to have

00:14:25.940 --> 00:14:28.179
left tax documents on it.

00:14:28.179 --> 00:14:30.720
So one of the things that we're
trying very hard to make sure

00:14:30.720 --> 00:14:32.670
that we have
enabled through this

00:14:32.670 --> 00:14:34.820
is the ability
for a user-- well,

00:14:34.820 --> 00:14:36.650
for an app developer
to start-- to be

00:14:36.650 --> 00:14:38.460
able to say these are
the types of devices

00:14:38.460 --> 00:14:40.500
I can work with, these
are the types of things

00:14:40.500 --> 00:14:42.370
I need to be able to
do with these devices,

00:14:42.370 --> 00:14:44.060
and then for the
user to easily grant

00:14:44.060 --> 00:14:46.197
that access without
over-granting

00:14:46.197 --> 00:14:48.780
a lot of additional access that
the application really doesn't

00:14:48.780 --> 00:14:50.613
need and that the user
shouldn't really need

00:14:50.613 --> 00:14:52.430
to trust that application with.

00:14:52.430 --> 00:14:56.110
So this is another side of the
access controls and permissions

00:14:56.110 --> 00:14:58.200
piece of it.

00:14:58.200 --> 00:15:00.260
So going into the
components a little bit

00:15:00.260 --> 00:15:05.540
of what comprises Weave across
the board, the first and one

00:15:05.540 --> 00:15:08.520
of the key pieces is the
Weave service as a whole.

00:15:08.520 --> 00:15:11.120
So by this I mean the
Weave cloud service.

00:15:11.120 --> 00:15:13.580
We've built out a service that
users can register devices

00:15:13.580 --> 00:15:15.800
to that basically
provides that cloud hop.

00:15:15.800 --> 00:15:17.620
It provides a set
of rest APIs that

00:15:17.620 --> 00:15:19.940
make it very easy for
web app developers

00:15:19.940 --> 00:15:23.240
and for web apps and services
to interact with devices

00:15:23.240 --> 00:15:24.860
and be part of this ecosystem.

00:15:24.860 --> 00:15:27.930
It also provides that cloud hop
when a user is on their phone

00:15:27.930 --> 00:15:30.377
and they're on a different
network than the device,

00:15:30.377 --> 00:15:32.960
or when the user is not at home,
but they want to double check

00:15:32.960 --> 00:15:35.254
that everything's going well.

00:15:35.254 --> 00:15:37.420
These kinds of things go
through this cloud service.

00:15:40.247 --> 00:15:41.830
And there's a flip
side to this that I

00:15:41.830 --> 00:15:43.288
think is very
important to mention,

00:15:43.288 --> 00:15:45.560
which is this cloud service
allows remote access,

00:15:45.560 --> 00:15:47.554
but the user doesn't
have to use it.

00:15:47.554 --> 00:15:48.970
So the user always
has the choice,

00:15:48.970 --> 00:15:50.760
and you might have seen
that during the set up flow,

00:15:50.760 --> 00:15:53.560
of whether or not to associate
any kind of account with this,

00:15:53.560 --> 00:15:55.970
and whether or not to enable
any kind of remote access

00:15:55.970 --> 00:15:56.900
to their device.

00:15:56.900 --> 00:15:58.890
And if they choose
not to, that's fine.

00:15:58.890 --> 00:16:00.430
All of these
applications will still

00:16:00.430 --> 00:16:03.920
work in the local environment
without any modification.

00:16:03.920 --> 00:16:05.420
So this is one of
the things that we

00:16:05.420 --> 00:16:06.270
feel is very important here.

00:16:06.270 --> 00:16:07.853
The user should
always have the choice

00:16:07.853 --> 00:16:10.960
of whether or not to associate
their device with the cloud

00:16:10.960 --> 00:16:13.200
and have that type
of remote access.

00:16:13.200 --> 00:16:15.420
So that's the cloud
side of things.

00:16:15.420 --> 00:16:18.570
On the device side, naturally
implementing this kind

00:16:18.570 --> 00:16:21.110
protocol, especially with all
of the security considerations

00:16:21.110 --> 00:16:23.480
and everything across
different transports

00:16:23.480 --> 00:16:25.577
is a little bit of a mess.

00:16:25.577 --> 00:16:27.660
And so we've tried to take
on as much of that work

00:16:27.660 --> 00:16:29.670
as we can from the
Google perspective.

00:16:29.670 --> 00:16:33.140
And we've built out a portable
C++ library that can be taken

00:16:33.140 --> 00:16:36.996
into devices and used to
enable them with Weave.

00:16:36.996 --> 00:16:40.130
We've tried to slim out
as many things that we can

00:16:40.130 --> 00:16:42.139
that might already be
on an embedded system

00:16:42.139 --> 00:16:44.430
to make sure that we're not
adding unnecessary resource

00:16:44.430 --> 00:16:45.720
usage.

00:16:45.720 --> 00:16:48.362
And in order to do
that, we've also

00:16:48.362 --> 00:16:49.820
provided several
wrappers that make

00:16:49.820 --> 00:16:52.920
it easy to integrate this
library onto common systems.

00:16:52.920 --> 00:16:54.850
And so naturally,
Brillo is one of those.

00:16:54.850 --> 00:16:56.520
There's an Ubuntu
wrapper available

00:16:56.520 --> 00:16:59.061
and we'll be adding additional
wrappers for additional system

00:16:59.061 --> 00:17:01.680
types as time goes on
to make it easy to build

00:17:01.680 --> 00:17:05.680
that kind of thing into
the devices themselves

00:17:05.680 --> 00:17:09.970
and to make it easy for OEMs
to build those experiences out.

00:17:12.770 --> 00:17:15.540
The next piece of this beyond
the cloud and the device side

00:17:15.540 --> 00:17:16.550
is naturally the client.

00:17:16.550 --> 00:17:19.750
And by client here, I mean not
just mobile client applications

00:17:19.750 --> 00:17:24.000
or desktop client applications
but also web applications.

00:17:24.000 --> 00:17:26.420
This is an area that, of
course, is critically important

00:17:26.420 --> 00:17:28.419
if we want to have an
ecosystem of these things.

00:17:28.419 --> 00:17:30.109
And so on Android,
as I mentioned,

00:17:30.109 --> 00:17:32.150
we've built the setup
directly into Play services

00:17:32.150 --> 00:17:35.329
to make it easy for users to
get started even without an app.

00:17:35.329 --> 00:17:36.745
And that goes back
to Gingerbread.

00:17:39.480 --> 00:17:41.590
We also provide
an implementation

00:17:41.590 --> 00:17:45.550
of the full protocol there
that your client application

00:17:45.550 --> 00:17:48.160
or Android application
can call into in order

00:17:48.160 --> 00:17:49.610
to discover devices,
send commands

00:17:49.610 --> 00:17:53.220
to devices, query state updates,
and these kinds of things.

00:17:53.220 --> 00:17:55.030
The other side of
this is, of course,

00:17:55.030 --> 00:17:57.440
iOS, which is very
critical as well.

00:17:57.440 --> 00:18:00.240
People use a lot of different
phones in their homes,

00:18:00.240 --> 00:18:02.650
and sometimes the same
user has multiple.

00:18:02.650 --> 00:18:04.840
But other times different
users in the home

00:18:04.840 --> 00:18:06.566
have different mobile devices.

00:18:06.566 --> 00:18:09.190
And so it's important we provide
all of that same functionality

00:18:09.190 --> 00:18:10.160
for iOS.

00:18:10.160 --> 00:18:11.979
So there, the setup
flow is built directly

00:18:11.979 --> 00:18:13.520
into the client
applications since we

00:18:13.520 --> 00:18:15.330
can't build it into the system.

00:18:15.330 --> 00:18:17.390
And similarly, you get
all of the same access

00:18:17.390 --> 00:18:19.720
to discovering devices,
interacting with devices,

00:18:19.720 --> 00:18:23.566
subscribing to updates, et
cetera from iOS applications.

00:18:23.566 --> 00:18:26.190
And the last side is, of course,
web applications and services.

00:18:26.190 --> 00:18:28.980
And we're actually very
excited about the potential

00:18:28.980 --> 00:18:30.810
for new applications
and services

00:18:30.810 --> 00:18:34.720
to interact with a variety
of devices to be built.

00:18:34.720 --> 00:18:37.750
So similar to other Google
APIs and web services,

00:18:37.750 --> 00:18:40.739
we've created a variety of
different client libraries

00:18:40.739 --> 00:18:42.530
for use in a variety
of different languages

00:18:42.530 --> 00:18:44.946
since there's such a diversity
of frameworks and languages

00:18:44.946 --> 00:18:47.090
in use in building
out web applications.

00:18:47.090 --> 00:18:49.480
Users on desktop can
still set up devices.

00:18:49.480 --> 00:18:51.200
There's a Chrome app
available for that.

00:18:51.200 --> 00:18:52.741
But we anticipate
most of those users

00:18:52.741 --> 00:18:55.561
will be using mobile
phones to do that.

00:18:55.561 --> 00:18:57.310
The other couple of
things that we provide

00:18:57.310 --> 00:19:00.460
are a few things in the
area of developer tools.

00:19:00.460 --> 00:19:03.550
So we'll have a couple of other
conversations about this later.

00:19:03.550 --> 00:19:07.550
One of these is the command
line tool which basically just

00:19:07.550 --> 00:19:10.632
allows you to register devices,
send commands, query updates,

00:19:10.632 --> 00:19:12.590
and these kinds of things
from the command line

00:19:12.590 --> 00:19:15.330
either over the local
network or remotely.

00:19:15.330 --> 00:19:19.370
And this makes it very easy
to start testing things out,

00:19:19.370 --> 00:19:22.160
and further to start building
automation and especially test

00:19:22.160 --> 00:19:27.800
automation from more popular
environments for that.

00:19:27.800 --> 00:19:30.590
The second piece, which actually
we're very excited about

00:19:30.590 --> 00:19:33.420
and you'll hear her a little bit
more from Lawrence and from Sam

00:19:33.420 --> 00:19:36.880
later today, is the
Weave developer console.

00:19:36.880 --> 00:19:39.790
And this both allows you
to easily prototype devices

00:19:39.790 --> 00:19:42.194
before you've even built a
client application for them,

00:19:42.194 --> 00:19:44.360
to start registering them,
testing them out, sending

00:19:44.360 --> 00:19:46.026
commands, seeing the
state in real time,

00:19:46.026 --> 00:19:47.160
these kinds of things.

00:19:47.160 --> 00:19:48.980
And it also provides
several features

00:19:48.980 --> 00:19:50.500
around fleet
management that we hope

00:19:50.500 --> 00:19:52.500
will lead to more of that
continuous improvement

00:19:52.500 --> 00:19:53.760
that we talked about earlier.

00:19:53.760 --> 00:19:54.800
So in particular,
these are things

00:19:54.800 --> 00:19:56.184
like access to
aggregated metrics

00:19:56.184 --> 00:19:57.600
and about how the
fleet of devices

00:19:57.600 --> 00:20:01.010
is being used to let you
understand what features are

00:20:01.010 --> 00:20:02.720
popular and what
features are unpopular,

00:20:02.720 --> 00:20:04.190
and whether you have
crashes going on,

00:20:04.190 --> 00:20:06.231
and these kinds of things
so that you can improve

00:20:06.231 --> 00:20:07.820
your devices over time.

00:20:07.820 --> 00:20:09.544
And then on top, of
that, as I mentioned,

00:20:09.544 --> 00:20:11.210
over-the-air updates
are very important.

00:20:11.210 --> 00:20:13.432
Again we'll get into this
more a little bit later.

00:20:13.432 --> 00:20:15.890
But we're trying to make that
very easy from this developer

00:20:15.890 --> 00:20:19.000
console as well.

00:20:19.000 --> 00:20:21.280
The last piece that
I want to talk about

00:20:21.280 --> 00:20:25.380
from the Weave
development side is

00:20:25.380 --> 00:20:27.560
interoperability and schemas.

00:20:27.560 --> 00:20:30.644
So everything that I've said
so far during this presentation

00:20:30.644 --> 00:20:33.060
has made it sound like we're
building a wonderful platform

00:20:33.060 --> 00:20:35.505
for building new
silos on top of.

00:20:35.505 --> 00:20:37.380
And everyone knows that
what the world really

00:20:37.380 --> 00:20:41.250
needs right now is more silos
of individual app experiences

00:20:41.250 --> 00:20:43.772
because we all really want to
have one app for every device

00:20:43.772 --> 00:20:44.730
we bring into our home.

00:20:47.450 --> 00:20:50.150
We've tried, from a
protocol standpoint,

00:20:50.150 --> 00:20:54.050
to build in interoperability
at a very core

00:20:54.050 --> 00:20:55.280
layer of all of this.

00:20:55.280 --> 00:20:57.270
And we've tried to
make sure that you

00:20:57.270 --> 00:20:58.940
won't end up in
that situation where

00:20:58.940 --> 00:21:01.390
you have one app per device.

00:21:01.390 --> 00:21:03.510
And part of what we're
doing for that is we're

00:21:03.510 --> 00:21:05.600
working very closely with
all of the manufacturers

00:21:05.600 --> 00:21:08.045
that we work with to build
schemas that represent

00:21:08.045 --> 00:21:10.830
a device's capabilities and that
represent the types of states

00:21:10.830 --> 00:21:14.820
and commands that a device needs
to use so that we can provide

00:21:14.820 --> 00:21:16.782
a stable interface
to those devices,

00:21:16.782 --> 00:21:19.115
to developers on the other
side, application developers,

00:21:19.115 --> 00:21:20.790
and service developers.

00:21:20.790 --> 00:21:23.030
So then when you get
access to a light,

00:21:23.030 --> 00:21:25.900
you know that based on
the schema for that,

00:21:25.900 --> 00:21:28.350
you will always find an
ability to turn the light on

00:21:28.350 --> 00:21:31.194
and off for every light
that you have access to.

00:21:31.194 --> 00:21:33.610
You'll find that some lights
are dimmable and some aren't.

00:21:33.610 --> 00:21:35.430
But because of
Weave certification,

00:21:35.430 --> 00:21:38.060
if the light can be dimmed,
you will have access to it.

00:21:38.060 --> 00:21:40.270
And you'll have
access in a stable way

00:21:40.270 --> 00:21:43.770
so that you understand exactly
how to do in that light.

00:21:43.770 --> 00:21:45.380
There's a flip
side to these kinds

00:21:45.380 --> 00:21:47.960
of schemas and
interoperability, which

00:21:47.960 --> 00:21:51.160
is that if we're
not careful, we'll

00:21:51.160 --> 00:21:53.640
end up boxing devices into
the types of functionality

00:21:53.640 --> 00:21:55.681
they have today and
basically ensure

00:21:55.681 --> 00:21:57.680
that that's the only
functionality they can ever

00:21:57.680 --> 00:21:58.460
have.

00:21:58.460 --> 00:22:00.840
So another part of how
we've addressed schemas

00:22:00.840 --> 00:22:02.750
is ensuring that
they're extensible

00:22:02.750 --> 00:22:05.920
both in terms of capabilities
for very popular device types

00:22:05.920 --> 00:22:08.180
as well as in adding new
capabilities entirely

00:22:08.180 --> 00:22:10.120
that aren't related to
current device types.

00:22:10.120 --> 00:22:13.150
So manufacturers can add
new differentiating features

00:22:13.150 --> 00:22:15.530
and come up with improved
ways to do things

00:22:15.530 --> 00:22:17.510
that are outside of
the current schemas

00:22:17.510 --> 00:22:20.120
as long as they're not blocking
off the core functionality

00:22:20.120 --> 00:22:22.690
to you to use the typical core
functionality of that type

00:22:22.690 --> 00:22:23.540
of device.

00:22:23.540 --> 00:22:25.250
So this allows these
devices to continue

00:22:25.250 --> 00:22:27.990
to evolve, for more
interesting and exciting things

00:22:27.990 --> 00:22:30.630
to be added to the ecosystem
of devices over time

00:22:30.630 --> 00:22:33.480
without cutting off the
interoperability piece.

00:22:33.480 --> 00:22:36.260
And the certification program
keeps those things separate

00:22:36.260 --> 00:22:38.930
and ensures that
core interoperable

00:22:38.930 --> 00:22:41.409
devices are always consistent.

00:22:41.409 --> 00:22:43.200
The one other thing
that I think it's worth

00:22:43.200 --> 00:22:45.440
mentioning there is there
will be some device types

00:22:45.440 --> 00:22:46.572
that are totally new.

00:22:46.572 --> 00:22:49.030
There will be some device types
that aren't common in homes

00:22:49.030 --> 00:22:51.700
and may not make sense for us
to define a schema yet for just

00:22:51.700 --> 00:22:53.370
because it's very early days.

00:22:53.370 --> 00:22:55.010
And so for communities
that are trying

00:22:55.010 --> 00:22:57.390
to build those types of
devices, the schema format

00:22:57.390 --> 00:22:59.780
does let you come up with
new commands and capabilities

00:22:59.780 --> 00:23:02.442
and states, and you can have a
totally custom device, as long

00:23:02.442 --> 00:23:04.400
as it's not of a type
that already is out there

00:23:04.400 --> 00:23:05.870
and has a schema for it.

00:23:05.870 --> 00:23:08.020
And so for communities
building new device types,

00:23:08.020 --> 00:23:11.060
you can think of where maybe 3-D
printing was a few years ago.

00:23:11.060 --> 00:23:12.970
Those communities can
come together and start

00:23:12.970 --> 00:23:15.600
to agree upon a way to
represent this device

00:23:15.600 --> 00:23:17.780
and can get interoperability
using these schemas

00:23:17.780 --> 00:23:22.020
in their community even before
a proper schema has been

00:23:22.020 --> 00:23:23.640
created as part of this system.

00:23:23.640 --> 00:23:26.056
So we want to make sure that
this whole thing is very open

00:23:26.056 --> 00:23:28.014
and extensible to that as well.

00:23:28.014 --> 00:23:29.930
So with that, I'm going
to hand it off to Sam.

00:23:29.930 --> 00:23:31.763
Sam is going to talk
to us a little bit more

00:23:31.763 --> 00:23:34.542
about the Brillo side of things
and what we've built out there.

00:23:34.542 --> 00:23:36.250
And then again, we'll
leave a few minutes

00:23:36.250 --> 00:23:37.950
towards the end in case
you have any questions

00:23:37.950 --> 00:23:39.140
so that we can answer those.

00:23:39.140 --> 00:23:39.639
Thank you.

00:23:39.639 --> 00:23:41.464
[APPLAUSE]

00:23:46.920 --> 00:23:49.050
SAM BEDER: Thank you,
Andrew Hi, everyone.

00:23:49.050 --> 00:23:50.300
My name is Sam Beder.

00:23:50.300 --> 00:23:53.090
And I'm a product
manager on Brillo.

00:23:53.090 --> 00:23:55.670
So today I'm going to
walk you through some

00:23:55.670 --> 00:23:57.810
of the details of
Brillo and how we

00:23:57.810 --> 00:24:01.000
can make the development
of your devices easier

00:24:01.000 --> 00:24:03.600
and also make them
simpler to maintain.

00:24:03.600 --> 00:24:06.810
So first, I want to talk
about what kind of devices

00:24:06.810 --> 00:24:10.290
do we mean when we talk
about Brillo devices.

00:24:10.290 --> 00:24:13.750
So one problem with
the internet of things

00:24:13.750 --> 00:24:16.270
is that it means
everything to everyone.

00:24:16.270 --> 00:24:17.520
And it means a lot to us, too.

00:24:17.520 --> 00:24:21.750
But here is just one taxonomy
of how you can break up

00:24:21.750 --> 00:24:24.070
the classes of devices
that we're talking about

00:24:24.070 --> 00:24:26.530
with Brillo specifically.

00:24:26.530 --> 00:24:31.260
One important thing to note
is that with Brillo, it's

00:24:31.260 --> 00:24:33.310
not focusing on terminals.

00:24:33.310 --> 00:24:36.250
And one reason for that
is that Google already

00:24:36.250 --> 00:24:40.280
has other products such as
Android for Tablet, Chromecast,

00:24:40.280 --> 00:24:43.340
Android TV, et cetera, that
are fixing a lot of problems

00:24:43.340 --> 00:24:44.790
with terminals.

00:24:44.790 --> 00:24:46.920
But there's this whole
class of other devices

00:24:46.920 --> 00:24:49.710
where we think Brillo
is a perfect fit.

00:24:49.710 --> 00:24:52.010
So there's the idea
of human augmentation

00:24:52.010 --> 00:24:54.230
with wearable technologies.

00:24:54.230 --> 00:24:55.320
There's robotics.

00:24:55.320 --> 00:24:56.860
There's drones.

00:24:56.860 --> 00:25:01.090
There's enchanted objects that
can power your smart home.

00:25:01.090 --> 00:25:02.710
As you, as
developers, are trying

00:25:02.710 --> 00:25:06.620
to build some of
these devices, we

00:25:06.620 --> 00:25:08.940
want to make it as
easy as possible.

00:25:08.940 --> 00:25:11.270
Before I go into the
details of Brillo,

00:25:11.270 --> 00:25:14.380
I want to first break down a
few of the common developer

00:25:14.380 --> 00:25:16.840
challenges that as
we're making Brillo

00:25:16.840 --> 00:25:19.020
we want to make
sure that we solve.

00:25:19.020 --> 00:25:22.550
So what are some of these
common developer challenges?

00:25:22.550 --> 00:25:26.340
One major component that we
want to focus on is security.

00:25:26.340 --> 00:25:28.280
Andrew already briefly
mentioned security.

00:25:28.280 --> 00:25:31.890
But we think that any
IOT device needs to have

00:25:31.890 --> 00:25:34.280
a really strong security story.

00:25:34.280 --> 00:25:35.830
And the reason for
that is you need

00:25:35.830 --> 00:25:37.410
to retain the trust of the user.

00:25:37.410 --> 00:25:40.510
They need to trust that
they can use this device

00:25:40.510 --> 00:25:43.810
and it will keep their
information private.

00:25:43.810 --> 00:25:47.690
We think it's hugely
important also

00:25:47.690 --> 00:25:50.120
because some of the
devices that are currently

00:25:50.120 --> 00:25:53.160
in the marketplace
don't necessarily

00:25:53.160 --> 00:25:56.470
have a strong enough story
with respect to security.

00:25:56.470 --> 00:26:01.010
And so this is a really big deal
because if your device isn't

00:26:01.010 --> 00:26:04.160
prepared for any
potential security flaw,

00:26:04.160 --> 00:26:06.995
you need to have a plan before
the flaw comes into place.

00:26:11.280 --> 00:26:14.570
Once the news story
comes out about this flaw

00:26:14.570 --> 00:26:16.780
you only have a day
to make this change.

00:26:16.780 --> 00:26:20.000
You can't have it rolling
out over the coming months.

00:26:20.000 --> 00:26:21.480
So this is a really big deal.

00:26:21.480 --> 00:26:25.010
And we think that for IOT to
be successful in the long term,

00:26:25.010 --> 00:26:29.300
this needs to be stronger in
every device that's out there.

00:26:29.300 --> 00:26:31.500
So what's the next common
developer challenge?

00:26:31.500 --> 00:26:33.060
Not only does this
device that you

00:26:33.060 --> 00:26:37.730
make need to be constantly
connected and secure,

00:26:37.730 --> 00:26:41.120
but it needs to actually be
delivering additional value

00:26:41.120 --> 00:26:42.460
to your users.

00:26:42.460 --> 00:26:46.350
So both your company
and the end user

00:26:46.350 --> 00:26:49.190
are going to expect
additional functionality,

00:26:49.190 --> 00:26:52.314
additional features,
and new information

00:26:52.314 --> 00:26:53.855
that they can get
from these devices.

00:26:58.070 --> 00:27:01.180
Next is staying competitive.

00:27:01.180 --> 00:27:04.150
So when you make
these IOT devices,

00:27:04.150 --> 00:27:06.760
they need to be secure, have
new features, and everything,

00:27:06.760 --> 00:27:09.530
but at the same time, you
can't be increasing the cost

00:27:09.530 --> 00:27:11.660
of this device by very much.

00:27:11.660 --> 00:27:13.690
In order to be successful
in the marketplace,

00:27:13.690 --> 00:27:16.280
the cost of these
IOT devices needs

00:27:16.280 --> 00:27:20.350
to be the same or
a very small amount

00:27:20.350 --> 00:27:25.450
more than the non-IOT
counterparts to this device.

00:27:25.450 --> 00:27:28.010
Finally, you need to do
all these things at scale.

00:27:28.010 --> 00:27:29.840
So we think Brillo
is a perfect fit

00:27:29.840 --> 00:27:32.300
to address all these challenges.

00:27:32.300 --> 00:27:33.970
So what is Brillo?

00:27:33.970 --> 00:27:34.725
What is Brillo?

00:27:34.725 --> 00:27:37.380
Brillo is an Android-based
operating system that

00:27:37.380 --> 00:27:40.940
has built-in support for Weave.

00:27:40.940 --> 00:27:44.090
Because Brillo is Android-based,
if your chip vendor already

00:27:44.090 --> 00:27:47.040
supports Android, then
they can support Brillo.

00:27:47.040 --> 00:27:50.700
And this allows for
a greater ecosystem

00:27:50.700 --> 00:27:55.390
of compatible
development hardware.

00:27:55.390 --> 00:28:00.670
It also allows you, if you need
to switch which hardware using,

00:28:00.670 --> 00:28:03.140
it's much easier with
Brillo because there

00:28:03.140 --> 00:28:06.500
are a lot of options out there.

00:28:06.500 --> 00:28:10.670
Next there's a Brillo
developer kit, or BDK,

00:28:10.670 --> 00:28:13.080
that we give you to make your
development process easier

00:28:13.080 --> 00:28:16.590
within Brillo and allows you to
configure your operating system

00:28:16.590 --> 00:28:18.130
and build a device image.

00:28:20.890 --> 00:28:22.860
You can change anything
about the device image

00:28:22.860 --> 00:28:24.080
since you're
building from source.

00:28:24.080 --> 00:28:25.996
So we're really not going
to stand in your way

00:28:25.996 --> 00:28:29.060
with anything you want
to do with your device.

00:28:29.060 --> 00:28:31.100
Finally, there's
a set of features,

00:28:31.100 --> 00:28:33.620
such as updates, metrics,
and crash reporting,

00:28:33.620 --> 00:28:35.570
to continue interacting
with your device

00:28:35.570 --> 00:28:38.260
once it's already been launched.

00:28:38.260 --> 00:28:40.660
Now let's go through all
these in a little more detail,

00:28:40.660 --> 00:28:43.350
starting with what it means for
a Brillo to be Android-based.

00:28:47.720 --> 00:28:52.300
So Brillo is based on just the
lower level layers of Android.

00:28:52.300 --> 00:28:54.370
What this means is
that it is based

00:28:54.370 --> 00:28:58.040
on the non-Java native
layers of Android.

00:28:58.040 --> 00:29:00.670
And it's a stripped-down
version of Android

00:29:00.670 --> 00:29:06.200
that is specifically made for
connected embedded devices.

00:29:06.200 --> 00:29:09.420
Brillo also has this
well-defined board support

00:29:09.420 --> 00:29:13.570
package and product concepts
that make your device much more

00:29:13.570 --> 00:29:14.480
maintainable.

00:29:14.480 --> 00:29:16.920
So because the board
support package

00:29:16.920 --> 00:29:20.570
is completely separated
from your product code

00:29:20.570 --> 00:29:23.340
you can update
each independently.

00:29:23.340 --> 00:29:28.130
This also makes it much more
easy to plug in a new BSP

00:29:28.130 --> 00:29:30.630
if you ever want to.

00:29:30.630 --> 00:29:34.420
We also focused on making
Brillo really modularized.

00:29:34.420 --> 00:29:37.260
What this means is
that, say, for example,

00:29:37.260 --> 00:29:40.020
your device has no
need for graphics.

00:29:40.020 --> 00:29:42.610
You can take out all
the graphics components.

00:29:42.610 --> 00:29:45.710
And this will make your
end device much slimmer.

00:29:45.710 --> 00:29:47.880
And the end product
will be cheaper,

00:29:47.880 --> 00:29:49.900
which, as we mentioned,
is really important.

00:29:52.420 --> 00:29:54.369
Also, all of Brillo
is open source

00:29:54.369 --> 00:29:56.410
and developed in the
Android open source project.

00:29:56.410 --> 00:29:58.280
It's there right now.

00:29:58.280 --> 00:30:00.410
It's totally transparent,
exactly what's

00:30:00.410 --> 00:30:01.420
going into Brillo.

00:30:01.420 --> 00:30:03.980
You can go check it out.

00:30:03.980 --> 00:30:07.567
So these are all features
that you get because Brillo

00:30:07.567 --> 00:30:08.275
is Android-based.

00:30:11.170 --> 00:30:13.270
Next I want to talk about
security because we also

00:30:13.270 --> 00:30:14.644
worked really hard
on making sure

00:30:14.644 --> 00:30:18.770
that we have a strong
security story with Brillo.

00:30:18.770 --> 00:30:21.740
So Brillo has a verified
boot architecture

00:30:21.740 --> 00:30:25.610
that can be used to check
all executable code.

00:30:25.610 --> 00:30:28.010
This verified boot
architecture helps

00:30:28.010 --> 00:30:30.840
ensure that the image
you put on the device

00:30:30.840 --> 00:30:33.950
is the same image that runs.

00:30:33.950 --> 00:30:37.990
Brillo also has software
fault isolation by default.

00:30:37.990 --> 00:30:39.930
So all the Brillo-built
services are

00:30:39.930 --> 00:30:41.580
sandboxed and de-privileged.

00:30:41.580 --> 00:30:44.410
And you have the
capability of making it

00:30:44.410 --> 00:30:47.130
so that your devices
run in the same way.

00:30:47.130 --> 00:30:49.370
This makes sure that if
there is a problem in one

00:30:49.370 --> 00:30:50.970
of the components
of your device,

00:30:50.970 --> 00:30:55.850
it won't make it so it's a
problem in the whole device.

00:30:55.850 --> 00:30:58.250
Sooner or later, there
might be a security problem

00:30:58.250 --> 00:30:59.050
with your device.

00:30:59.050 --> 00:31:02.220
And for that, Google provides
ongoing security fixes

00:31:02.220 --> 00:31:04.930
with supported releases.

00:31:04.930 --> 00:31:07.000
We also have our
updates go all the way

00:31:07.000 --> 00:31:09.900
down through the
firmware and boot loader

00:31:09.900 --> 00:31:14.190
so that when we provide
fixes to these devices,

00:31:14.190 --> 00:31:15.810
it'll completely
fix the problem.

00:31:15.810 --> 00:31:19.830
It will go through
the whole device.

00:31:19.830 --> 00:31:21.660
So this is our
story for security.

00:31:21.660 --> 00:31:23.300
We have another
talk specifically

00:31:23.300 --> 00:31:25.175
on security because we
think this is a really

00:31:25.175 --> 00:31:27.230
important for any IOT device.

00:31:27.230 --> 00:31:29.780
And next I want to talk
about the Brillo developer

00:31:29.780 --> 00:31:33.310
kit or BDK.

00:31:33.310 --> 00:31:35.100
So Brillo provides
a number of tools

00:31:35.100 --> 00:31:39.160
that will make your actual
development process easier.

00:31:39.160 --> 00:31:41.920
Brill has standard embedded
development architecture

00:31:41.920 --> 00:31:43.750
using adb and fastboot.

00:31:43.750 --> 00:31:48.540
There's also this out-of-tree
and configuration model

00:31:48.540 --> 00:31:52.690
where all of your code is
in your separate tree which

00:31:52.690 --> 00:31:56.420
allows you to continue using
all of your existing development

00:31:56.420 --> 00:31:59.190
tools and revision system.

00:31:59.190 --> 00:32:01.540
And so it's entirely
in your own tree.

00:32:01.540 --> 00:32:03.290
You control it completely.

00:32:03.290 --> 00:32:08.140
But at the same time, you build
the device image from source.

00:32:08.140 --> 00:32:11.420
So if there is a specific
kernel configuration

00:32:11.420 --> 00:32:15.960
that you want to change,
you have that capability.

00:32:15.960 --> 00:32:19.620
And for those who know Android
development a little already,

00:32:19.620 --> 00:32:22.660
there's some other
native development tools

00:32:22.660 --> 00:32:26.490
that we provide that make
your life a little easier.

00:32:26.490 --> 00:32:28.150
Brillo uses Binder.

00:32:28.150 --> 00:32:32.690
And so we give you some C++ AIDL
generation that you can use.

00:32:32.690 --> 00:32:36.605
There's also Init and security
configuration and unit

00:32:36.605 --> 00:32:39.160
and integration testing.

00:32:39.160 --> 00:32:41.210
So these are all ways
that make the development

00:32:41.210 --> 00:32:43.020
process within Brillo easier.

00:32:43.020 --> 00:32:47.330
But as I said before, once
you deploy your device,

00:32:47.330 --> 00:32:50.480
you may want to
continue improving it.

00:32:50.480 --> 00:32:54.280
And so for that,
there's updates.

00:32:54.280 --> 00:32:56.560
So with Brillo, you
can send updates

00:32:56.560 --> 00:32:59.810
to some or all of your
devices over the internet.

00:32:59.810 --> 00:33:02.090
This allows you to continue
improving your device

00:33:02.090 --> 00:33:06.050
and fixing bugs after launch.

00:33:06.050 --> 00:33:08.830
It's built on the same
infrastructure as Android.

00:33:08.830 --> 00:33:11.790
So it scales really well
to all your devices.

00:33:11.790 --> 00:33:14.470
You can rest assured
that millions of devices

00:33:14.470 --> 00:33:19.210
will be able to
update effectively.

00:33:19.210 --> 00:33:22.070
Since these IOT
devices are constantly

00:33:22.070 --> 00:33:24.150
connected to the
internet, you don't really

00:33:24.150 --> 00:33:26.580
want to have these
updates interrupt

00:33:26.580 --> 00:33:29.370
the flow of the devices.

00:33:29.370 --> 00:33:32.850
And so to that end, we
have these updates download

00:33:32.850 --> 00:33:34.320
in the background.

00:33:34.320 --> 00:33:37.620
And you can control
when the device

00:33:37.620 --> 00:33:40.820
reboots to apply the changes.

00:33:40.820 --> 00:33:45.540
We also make sure that the
update payload and the image

00:33:45.540 --> 00:33:47.140
are independently secured.

00:33:47.140 --> 00:33:51.750
What this means is that
the download integrity

00:33:51.750 --> 00:33:54.440
is maintained separately
from the image integrity.

00:33:54.440 --> 00:33:58.420
So the payload integrity
is secured by Google

00:33:58.420 --> 00:34:01.630
so that you know that you're
downloading the actual changes

00:34:01.630 --> 00:34:03.310
that you pushed out.

00:34:03.310 --> 00:34:06.760
And finally, the image
integrity is protected by you

00:34:06.760 --> 00:34:08.420
with your private
key so you know

00:34:08.420 --> 00:34:10.190
that what's running
on the device

00:34:10.190 --> 00:34:13.780
is the change that you made.

00:34:13.780 --> 00:34:16.330
So updates are one way to
interact with your device

00:34:16.330 --> 00:34:18.290
once it's been in the field.

00:34:18.290 --> 00:34:21.860
However, you're going to want
to also receive information

00:34:21.860 --> 00:34:23.560
from these devices.

00:34:23.560 --> 00:34:26.920
And to do that we have the
developer console and metrics

00:34:26.920 --> 00:34:29.449
and crash reporting.

00:34:29.449 --> 00:34:31.370
So with metrics and
crash reporting,

00:34:31.370 --> 00:34:34.409
you can see with
your devices how they

00:34:34.409 --> 00:34:36.639
are performing in the field.

00:34:36.639 --> 00:34:38.590
So, for example,
let's say you have

00:34:38.590 --> 00:34:41.320
a set of refrigerator motors.

00:34:41.320 --> 00:34:45.630
And in this case, the
refrigerator motors

00:34:45.630 --> 00:34:49.679
are using 10% more energy
than you would expect.

00:34:49.679 --> 00:34:51.820
With this graph on
the left, you can

00:34:51.820 --> 00:34:55.230
imagine this showing the
efficiency of these motors.

00:34:55.230 --> 00:34:57.780
And you can see right
there, really immediately,

00:34:57.780 --> 00:35:01.030
that they're using more
energy than you would think.

00:35:01.030 --> 00:35:03.070
There's also crash
reporting data

00:35:03.070 --> 00:35:04.805
that you can see
for any things that

00:35:04.805 --> 00:35:07.600
are failing about the motor.

00:35:07.600 --> 00:35:10.080
So these tools we
think are really

00:35:10.080 --> 00:35:15.410
useful to quickly iterate on
bugs and improve the device.

00:35:15.410 --> 00:35:18.260
Because of the update
tools I just mentioned,

00:35:18.260 --> 00:35:21.900
if there is a problem,
you can provide a fix

00:35:21.900 --> 00:35:24.410
and see the results in
the developer console.

00:35:24.410 --> 00:35:27.160
And you can go back
and forth and iterate

00:35:27.160 --> 00:35:30.640
to fix the problem much
quicker than before.

00:35:30.640 --> 00:35:35.320
The alternative of waiting
for users to report an issue

00:35:35.320 --> 00:35:38.610
or having to go into
the field yourself

00:35:38.610 --> 00:35:43.280
costs more and is
just less effective.

00:35:43.280 --> 00:35:47.500
All this data is aggregated
in a way that retains

00:35:47.500 --> 00:35:49.060
privacy for the end user.

00:35:51.740 --> 00:35:54.290
So all these features I
just mentioned-- security,

00:35:54.290 --> 00:35:57.020
the Brillo developer
kit, updates, metrics,

00:35:57.020 --> 00:36:00.990
and crash reporting-- are
made so that your development

00:36:00.990 --> 00:36:02.690
process is easy.

00:36:02.690 --> 00:36:05.910
But we realize that it's
also important to make sure

00:36:05.910 --> 00:36:09.780
that the process of
taking your existing work

00:36:09.780 --> 00:36:13.230
and bringing it to
Brillo is easy as well.

00:36:13.230 --> 00:36:14.914
So for that I want
to touch on adoption.

00:36:17.640 --> 00:36:19.840
We worked really hard
in Brillo to make sure

00:36:19.840 --> 00:36:24.600
that it will exist well
in your existing workflow.

00:36:24.600 --> 00:36:27.310
So because Brillo
is Android-based,

00:36:27.310 --> 00:36:30.960
there is this wide set
of industry support.

00:36:30.960 --> 00:36:34.400
So you can likely keep
your chip supplier.

00:36:34.400 --> 00:36:38.030
In addition to that, if
you need to change hardware

00:36:38.030 --> 00:36:40.090
because a different
set of hardware

00:36:40.090 --> 00:36:43.110
will make your device
more effective or cheaper,

00:36:43.110 --> 00:36:46.420
we make that really easy, too.

00:36:46.420 --> 00:36:50.851
Secondly, most embedded devices
today are already built using C

00:36:50.851 --> 00:36:51.350
and C++.

00:36:51.350 --> 00:36:55.210
So you can likely keep
your language as well.

00:36:55.210 --> 00:36:59.680
In addition to that, because of
this out-of-tree concept where

00:36:59.680 --> 00:37:03.202
all of your code is
in a separate tree,

00:37:03.202 --> 00:37:04.660
we're not going to
stay in your way

00:37:04.660 --> 00:37:07.920
if you want to use a
different language.

00:37:07.920 --> 00:37:10.800
Next, Brillo has wide
support for a large set

00:37:10.800 --> 00:37:12.370
of third-party libraries.

00:37:12.370 --> 00:37:16.110
So these facts
together make it so

00:37:16.110 --> 00:37:18.660
that the process of bringing
your code into the Brillo

00:37:18.660 --> 00:37:21.690
environment is as easy
as we can make it.

00:37:21.690 --> 00:37:24.413
And so finally, I wanted to
go through a thought exercise.

00:37:27.210 --> 00:37:29.050
Suppose that there
is a major security

00:37:29.050 --> 00:37:32.150
vulnerability in a single
library in all of your IOT

00:37:32.150 --> 00:37:32.770
devices.

00:37:32.770 --> 00:37:34.540
And you need to fix it.

00:37:34.540 --> 00:37:36.080
If this is a major
threat, you need

00:37:36.080 --> 00:37:38.920
to get this fix out tomorrow,
not over the coming months.

00:37:38.920 --> 00:37:42.540
So here's our task, patch this
newly discovered vulnerability

00:37:42.540 --> 00:37:46.330
in a single library of all of
your company's IOT devices.

00:37:46.330 --> 00:37:49.330
As you're frantically
looking for how to fix this,

00:37:49.330 --> 00:37:53.510
some of these questions might
be running through your head.

00:37:53.510 --> 00:37:55.440
Do you know if all
of your devices

00:37:55.440 --> 00:37:58.120
are running the same
version of the library?

00:37:58.120 --> 00:37:59.880
Do you know if the
patch is compatible

00:37:59.880 --> 00:38:03.110
with the other system
software on the device?

00:38:03.110 --> 00:38:04.570
Do you know if
your Linux provider

00:38:04.570 --> 00:38:06.140
has given you the patch?

00:38:06.140 --> 00:38:09.460
Or do you have to
do it manually?

00:38:09.460 --> 00:38:12.520
Next, once you
have this fix, how

00:38:12.520 --> 00:38:14.670
are you going to push it
to all of your devices?

00:38:14.670 --> 00:38:18.760
And finally, even after you push
it to your devices, how will

00:38:18.760 --> 00:38:20.820
you know if it's working?

00:38:20.820 --> 00:38:25.040
With Brillo we make answering
these questions really easy.

00:38:25.040 --> 00:38:27.270
Once a vulnerability
becomes known,

00:38:27.270 --> 00:38:30.750
Google can identify and
quickly generate a fix.

00:38:30.750 --> 00:38:34.790
All you need to do is
download the new BDK,

00:38:34.790 --> 00:38:39.320
press Make, generate the new
firmware, and push it out.

00:38:39.320 --> 00:38:41.840
The staged rollouts
will kick in.

00:38:41.840 --> 00:38:44.460
And you'll see it in
the developer console

00:38:44.460 --> 00:38:47.600
as the patch is being
adopted by our users.

00:38:47.600 --> 00:38:51.680
So this process for this very
real threat that could happen

00:38:51.680 --> 00:38:54.500
becomes really simple with
all of the tools and features

00:38:54.500 --> 00:38:56.100
that I just mentioned.

00:38:56.100 --> 00:38:59.260
So I'm going to leave you
with our call to action.

00:38:59.260 --> 00:39:00.760
Everyone here at
this conference now

00:39:00.760 --> 00:39:05.550
has access to the Brillo
and Weave developer sites.

00:39:05.550 --> 00:39:09.170
You can go on those sites,
go and download the BDK,

00:39:09.170 --> 00:39:11.150
start running through
the code labs.

00:39:11.150 --> 00:39:13.000
We have a large set
of code labs that

00:39:13.000 --> 00:39:17.170
can get you started making
your device, trying an idea.

00:39:17.170 --> 00:39:20.160
And we also have many
other talks today

00:39:20.160 --> 00:39:22.580
that can go into more detail
about some of the things

00:39:22.580 --> 00:39:25.010
that I mentioned.

00:39:25.010 --> 00:39:27.660
We also have demos later today.

00:39:27.660 --> 00:39:31.930
And we'll have some time right
now to answer your questions.

00:39:31.930 --> 00:39:33.006
Thank you.

00:39:33.006 --> 00:39:34.740
[APPLAUSE]

00:39:37.960 --> 00:39:39.340
So Andrew can come
back out here.

00:39:39.340 --> 00:39:41.890
As we mentioned before,
there's two mics

00:39:41.890 --> 00:39:46.390
down here and then one mic in
the balcony that you can use.

00:39:46.390 --> 00:39:47.500
So there's the mics there.

00:39:50.601 --> 00:39:52.350
ANDREW WARREN: The one
complicating factor

00:39:52.350 --> 00:39:56.620
is we can barely see
mics, so if we don't catch

00:39:56.620 --> 00:39:58.745
you off-hand, wave really fast.

00:39:58.745 --> 00:39:59.620
AUDIENCE: [INAUDIBLE]

00:40:05.674 --> 00:40:08.090
ANDREW WARREN: So the question
was is there any invitation

00:40:08.090 --> 00:40:12.240
necessary for using the BDK?

00:40:12.240 --> 00:40:14.630
All of this is open source
and is available right now.

00:40:14.630 --> 00:40:18.640
The documentation and everything
is still early access.

00:40:18.640 --> 00:40:21.009
So you can't get access to
the documentation yet outside

00:40:21.009 --> 00:40:21.800
of this conference.

00:40:21.800 --> 00:40:24.541
Everyone in this conference
has access to this data.

00:40:24.541 --> 00:40:25.082
AUDIENCE: OK.

00:40:25.082 --> 00:40:26.184
Thank you.

00:40:26.184 --> 00:40:26.975
ANDREW WARREN: Yes.

00:40:26.975 --> 00:40:29.109
Is there a question over here?

00:40:29.109 --> 00:40:30.900
SAM BEDER: No, I think
that was right here.

00:40:30.900 --> 00:40:31.650
ANDREW WARREN: OK.

00:40:31.650 --> 00:40:32.660
Thank you.

00:40:32.660 --> 00:40:36.160
AUDIENCE: This
question's about Brillo.

00:40:36.160 --> 00:40:38.730
If I've got a
connected device that

00:40:38.730 --> 00:40:41.950
has a display screen
on it, is there

00:40:41.950 --> 00:40:43.600
support for that in Brillo?

00:40:43.600 --> 00:40:47.339
Or is that sort of
beyond its remit?

00:40:47.339 --> 00:40:48.880
SAM BEDER: So the
question is, if you

00:40:48.880 --> 00:40:51.074
have a device that
has a display screen,

00:40:51.074 --> 00:40:52.240
is that supported by Brillo?

00:40:52.240 --> 00:40:54.260
AUDIENCE: Yeah,
obviously, if you

00:40:54.260 --> 00:40:59.390
put full Android on the device,
you get all the UI with it.

00:40:59.390 --> 00:41:02.780
SAM BEDER: So I would say that
it's not the focus of Brillo,

00:41:02.780 --> 00:41:06.990
but you can make anything
work really with Brillo.

00:41:06.990 --> 00:41:09.780
And so since the product's
in your own tree,

00:41:09.780 --> 00:41:13.340
there are capabilities
to have a display screen.

00:41:13.340 --> 00:41:17.560
But that's really not the
focus of Brillo right now.

00:41:17.560 --> 00:41:19.040
Brillo is improving over time.

00:41:19.040 --> 00:41:21.160
And so as more and
more updates come out,

00:41:21.160 --> 00:41:23.820
the capability for that
might become easier.

00:41:26.900 --> 00:41:27.940
AUDIENCE: Thank you.

00:41:27.940 --> 00:41:28.820
SAM BEDER: Thank you.

00:41:28.820 --> 00:41:30.090
AUDIENCE: Hi.

00:41:30.090 --> 00:41:35.095
So I'm just really excited to
add Weave support to my app.

00:41:35.095 --> 00:41:38.380
I was just wondering
when do we expect

00:41:38.380 --> 00:41:43.150
devices to start coming out for
being available to consumers?

00:41:43.150 --> 00:41:45.390
Are there any available now?

00:41:45.390 --> 00:41:47.910
Is it like a year or
six months or what?

00:41:47.910 --> 00:41:48.755
ANDREW WARREN: Sure.

00:41:48.755 --> 00:41:54.430
So around timelines for apps and
for hardware relating to Weave,

00:41:54.430 --> 00:41:58.430
the general release
of Weave will be later

00:41:58.430 --> 00:42:00.360
over the course of the
next quarter or so.

00:42:00.360 --> 00:42:02.880
In terms of hardware, we're
expecting later this year

00:42:02.880 --> 00:42:03.800
to have hardware out.

00:42:03.800 --> 00:42:06.189
And since you have access
to the developer site

00:42:06.189 --> 00:42:07.730
and to more information
about things,

00:42:07.730 --> 00:42:09.300
you'll also have the
ability to check there

00:42:09.300 --> 00:42:11.580
on the types of devices
we've built schemas around.

00:42:11.580 --> 00:42:12.690
So you can figure
out what devices

00:42:12.690 --> 00:42:14.898
you can start building
application experiences around

00:42:14.898 --> 00:42:15.420
easily.

00:42:15.420 --> 00:42:18.400
SAM BEDER: I think we have
someone in the balcony.

00:42:18.400 --> 00:42:19.100
AUDIENCE: Yeah.

00:42:19.100 --> 00:42:22.510
Are we restricted to any
particular cloud service

00:42:22.510 --> 00:42:23.884
for using this?

00:42:23.884 --> 00:42:25.550
ANDREW WARREN: So the
question is around

00:42:25.550 --> 00:42:27.633
are you restricted to any
particular cloud service

00:42:27.633 --> 00:42:32.910
to use Weave and presumably also
some of the Brillo services?

00:42:32.910 --> 00:42:35.550
So in order to ensure
interoperability and the fact

00:42:35.550 --> 00:42:37.390
that users always
are able to use

00:42:37.390 --> 00:42:39.900
these devices from any
application they want,

00:42:39.900 --> 00:42:42.370
devices do need to--
if they're certified

00:42:42.370 --> 00:42:44.870
to use Weave-- need to be able
to register against the Weave

00:42:44.870 --> 00:42:46.440
cloud.

00:42:46.440 --> 00:42:49.117
In terms of building other
cloud services and web services

00:42:49.117 --> 00:42:50.700
and these kinds of
things, we've tried

00:42:50.700 --> 00:42:52.379
to make a very easy
developer experience

00:42:52.379 --> 00:42:54.920
to tie those in so that they
can interact with these devices,

00:42:54.920 --> 00:42:56.240
too.

00:42:56.240 --> 00:43:00.350
And I think this is a similar
story for Brillo services.

00:43:00.350 --> 00:43:02.949
So we provide a variety of
services out of the box.

00:43:02.949 --> 00:43:04.740
You can always, of
course, bring along more

00:43:04.740 --> 00:43:07.080
and add more to your device.

00:43:07.080 --> 00:43:08.620
We've a question
here in the front.

00:43:08.620 --> 00:43:09.620
Yes?

00:43:09.620 --> 00:43:13.120
AUDIENCE: Does Weave also
handle the network management

00:43:13.120 --> 00:43:13.620
[INAUDIBLE]

00:43:15.622 --> 00:43:17.580
ANDREW WARREN: Yeah, so
the question was around

00:43:17.580 --> 00:43:19.370
does Weave also handle
network management

00:43:19.370 --> 00:43:22.152
and in particular cases where
the device may lose connection

00:43:22.152 --> 00:43:23.610
to the network or
the user may need

00:43:23.610 --> 00:43:24.903
to set it up to a new network--

00:43:24.903 --> 00:43:26.917
AUDIENCE: [INAUDIBLE]

00:43:26.917 --> 00:43:27.750
ANDREW WARREN: Sure.

00:43:27.750 --> 00:43:30.130
And to discover devices on
the network from the client

00:43:30.130 --> 00:43:32.220
perspective and these
types of things.

00:43:32.220 --> 00:43:36.659
So the Weave library
for the device side does

00:43:36.659 --> 00:43:38.700
need to be tied into the
network management stack

00:43:38.700 --> 00:43:40.860
to do particular things
like handle provisioning

00:43:40.860 --> 00:43:42.480
from the device side.

00:43:42.480 --> 00:43:45.571
It also takes care of, if the
device falls off the network,

00:43:45.571 --> 00:43:47.320
making itself available
to be brought back

00:43:47.320 --> 00:43:49.944
on-- say, if a user changes the
network password or these kinds

00:43:49.944 --> 00:43:50.655
of things.

00:43:50.655 --> 00:43:52.280
But otherwise, there
can be other logic

00:43:52.280 --> 00:43:54.730
on the device as well that's
handling the network stack.

00:43:54.730 --> 00:43:57.140
From the client
application side,

00:43:57.140 --> 00:44:01.820
the Weave SDKs for
Android and for iOS

00:44:01.820 --> 00:44:03.640
does handle interfacing
with the system

00:44:03.640 --> 00:44:06.020
for handling the protocol
over the different transports.

00:44:06.020 --> 00:44:06.895
AUDIENCE: [INAUDIBLE]

00:44:09.814 --> 00:44:11.730
ANDREW WARREN: Yeah, so
Weave isn't exclusive.

00:44:11.730 --> 00:44:14.021
You can use other protocols
with these devices as well.

00:44:14.021 --> 00:44:14.950
Absolutely.

00:44:14.950 --> 00:44:15.734
Yes?

00:44:15.734 --> 00:44:16.609
AUDIENCE: [INAUDIBLE]

00:44:22.242 --> 00:44:23.700
ANDREW WARREN: The
list of devices,

00:44:23.700 --> 00:44:24.960
by that do you mean
the schemas that

00:44:24.960 --> 00:44:26.930
are available for
interacting with devices

00:44:26.930 --> 00:44:28.890
or the developer boards, or--

00:44:32.015 --> 00:44:32.890
AUDIENCE: [INAUDIBLE]

00:44:37.795 --> 00:44:38.670
ANDREW WARREN: I see.

00:44:38.670 --> 00:44:40.794
So the question is,
where does the user

00:44:40.794 --> 00:44:42.960
maintain a list of all of
the different devices they

00:44:42.960 --> 00:44:45.500
have access to and the
ability to control that.

00:44:45.500 --> 00:44:48.689
So we provide a core UI that
users can use both on the web

00:44:48.689 --> 00:44:50.980
as well as on Android for
finding the devices they have

00:44:50.980 --> 00:44:53.840
access to and making sure
they have a fallback place

00:44:53.840 --> 00:44:56.670
to control access
to those devices.

00:44:56.670 --> 00:44:58.420
SAM BEDER: There's
someone at that mic.

00:44:58.420 --> 00:45:00.160
AUDIENCE: A couple questions.

00:45:00.160 --> 00:45:04.050
What are the supported
network interfaces for Weave?

00:45:04.050 --> 00:45:06.780
And secondly, what
kind of consideration

00:45:06.780 --> 00:45:10.500
is given for offline mode, when
devices go offline and come

00:45:10.500 --> 00:45:11.560
back online?

00:45:11.560 --> 00:45:12.880
ANDREW WARREN: Yeah.

00:45:12.880 --> 00:45:15.360
So around network
interfaces used by Weave

00:45:15.360 --> 00:45:17.482
and how do we handle offline.

00:45:17.482 --> 00:45:20.510
So network interfaces,
Weave is currently available

00:45:20.510 --> 00:45:23.400
over the local network as well
as through that cloud hop.

00:45:23.400 --> 00:45:26.080
BLE support will be
coming relatively soon

00:45:26.080 --> 00:45:28.410
over the course of
the next few months.

00:45:28.410 --> 00:45:32.067
In terms of offline
capabilities, as I mentioned,

00:45:32.067 --> 00:45:33.900
it's very important to
us that these devices

00:45:33.900 --> 00:45:37.100
work as well even if the
user isn't registering them

00:45:37.100 --> 00:45:40.070
with the cloud, even if the user
isn't going through the cloud.

00:45:40.070 --> 00:45:42.790
And so the devices will continue
to work over the local network

00:45:42.790 --> 00:45:44.480
just as well.

00:45:44.480 --> 00:45:46.350
One of the things
that you won't see

00:45:46.350 --> 00:45:49.119
quite in the set of software
that's available for you

00:45:49.119 --> 00:45:51.410
as part of this early access
to folks at the conference

00:45:51.410 --> 00:45:53.090
but that's actually
coming very soon

00:45:53.090 --> 00:45:56.300
is the same layer of access
control over the local network

00:45:56.300 --> 00:45:57.800
as you get through the cloud.

00:45:57.800 --> 00:46:00.750
So the same ability to authorize
particular applications and not

00:46:00.750 --> 00:46:03.270
others, to authorize particular
users and not others,

00:46:03.270 --> 00:46:05.840
even when the device is offline,
to make sure that the user

00:46:05.840 --> 00:46:08.230
even if their phone is offline
or their device is offline

00:46:08.230 --> 00:46:10.605
is still able to get into
their home to use these things.

00:46:10.605 --> 00:46:12.880
AUDIENCE: Do you maintain
the state of the devices

00:46:12.880 --> 00:46:14.307
and cache them?

00:46:14.307 --> 00:46:15.140
ANDREW WARREN: Yeah.

00:46:15.140 --> 00:46:17.910
So we do cache the state
of the device cloud-side

00:46:17.910 --> 00:46:19.700
for remote access.

00:46:19.700 --> 00:46:21.830
The state of the device is
also easily discoverable

00:46:21.830 --> 00:46:26.110
if you're local with the device
and you have access to it.

00:46:26.110 --> 00:46:27.916
Question here on the side.

00:46:27.916 --> 00:46:30.356
AUDIENCE: What kind
of security auditing

00:46:30.356 --> 00:46:34.260
are you going to be doing before
a Brillo/Weave device goes out

00:46:34.260 --> 00:46:36.542
with the name Brillo or Weave?

00:46:36.542 --> 00:46:38.583
I mean not just are you
implementing the protocol

00:46:38.583 --> 00:46:42.540
security, but also is a default
state relatively secure?

00:46:42.540 --> 00:46:45.480
Or is it just really
easy for anybody

00:46:45.480 --> 00:46:49.146
who wanders past your house
get access to you devices?

00:46:49.146 --> 00:46:50.520
ANDREW WARREN: So
the question is

00:46:50.520 --> 00:46:51.894
around what kinds
of auditing are

00:46:51.894 --> 00:46:53.560
we doing to make sure
that devices that

00:46:53.560 --> 00:46:55.940
have the Weave brand on it
or that are using Brillo

00:46:55.940 --> 00:46:58.929
are secure out of the box.

00:46:58.929 --> 00:47:00.970
And there's a couple of
different layers to that.

00:47:00.970 --> 00:47:03.530
As you mentioned, certification
is a very important place

00:47:03.530 --> 00:47:05.701
where we do a degree
of testing around

00:47:05.701 --> 00:47:07.200
all of the different
kinds of issues

00:47:07.200 --> 00:47:08.995
that we can from a
black box perspective

00:47:08.995 --> 00:47:11.620
to ensure that this device isn't
susceptible to common security

00:47:11.620 --> 00:47:12.480
issues.

00:47:12.480 --> 00:47:15.750
A second part, part of the
schemas that we define,

00:47:15.750 --> 00:47:18.300
is defining the minimum role
necessary for common types

00:47:18.300 --> 00:47:19.850
of functionality with a device.

00:47:19.850 --> 00:47:22.107
So as I mentioned,
there's different types

00:47:22.107 --> 00:47:23.690
of access, different
levels of access,

00:47:23.690 --> 00:47:26.720
that make sense for different
types of capabilities.

00:47:26.720 --> 00:47:29.680
Each of those levels
of access should

00:47:29.680 --> 00:47:32.480
be relevant to the type of
functionality on the device.

00:47:32.480 --> 00:47:34.020
You may want to see whether
a scanner is on and off.

00:47:34.020 --> 00:47:35.320
That doesn't mean you
should be able to see

00:47:35.320 --> 00:47:36.607
what's sitting on
the documents scanner

00:47:36.607 --> 00:47:37.727
and these kinds of things.

00:47:37.727 --> 00:47:40.060
And so that's actually part
of the certification program

00:47:40.060 --> 00:47:42.350
as well, testing
that default state

00:47:42.350 --> 00:47:44.310
and making sure that
it actually implements

00:47:44.310 --> 00:47:46.250
those minimum roles that are
defined as part of the schema.

00:47:46.250 --> 00:47:48.194
AUDIENCE: Is it also
implementing different modes?

00:47:48.194 --> 00:47:49.166
Or is it [INAUDIBLE]

00:47:57.920 --> 00:47:58.680
SAM BEDER: Yes.

00:47:58.680 --> 00:48:01.000
So the question
was is it also just

00:48:01.000 --> 00:48:03.780
saying having a minimum rule for
a particularly sensitive state

00:48:03.780 --> 00:48:06.990
like the lock state may be
too sensitive for anyone.

00:48:06.990 --> 00:48:09.600
The roles go up to a fairly
high level, including

00:48:09.600 --> 00:48:10.660
the owner of the device.

00:48:10.660 --> 00:48:13.118
And so the way to handle that
is the minimal role is owner.

00:48:13.118 --> 00:48:16.692
And, yes, that will be verified
as part of certification.

00:48:16.692 --> 00:48:17.400
Saw the gentlman.

00:48:17.400 --> 00:48:19.400
Yes?

00:48:19.400 --> 00:48:25.232
AUDIENCE: [INAUDIBLE]

00:48:38.430 --> 00:48:40.400
ANDREW WARREN: So the
question was around

00:48:40.400 --> 00:48:42.810
if you have a home full of
Brillo and Weave devices,

00:48:42.810 --> 00:48:45.600
and you have them all set up,
and they're all tied to you,

00:48:45.600 --> 00:48:47.207
and then you move.

00:48:47.207 --> 00:48:49.290
And then there's a couple
of implications of that.

00:48:49.290 --> 00:48:51.730
How do you make sure that the
other person who's moved in

00:48:51.730 --> 00:48:53.805
can't get access to your
kinds of data or things

00:48:53.805 --> 00:48:55.680
you've done historically
with these devices--

00:48:55.680 --> 00:48:56.380
AUDIENCE: [INAUDIBLE]

00:48:56.380 --> 00:48:57.713
ANDREW WARREN: --and vice versa.

00:48:57.713 --> 00:48:59.260
How does that new
person make sure

00:48:59.260 --> 00:49:01.890
that you don't have the ability
to snoop on them and things

00:49:01.890 --> 00:49:03.850
like this?

00:49:03.850 --> 00:49:05.660
So these are great
questions, actually.

00:49:05.660 --> 00:49:09.440
In the first case, the data is
again all tied to your account,

00:49:09.440 --> 00:49:12.080
even if it's fully local
and you never associated it

00:49:12.080 --> 00:49:14.740
with an account, it's tied to
the devices you used with it.

00:49:14.740 --> 00:49:16.410
So that the new
person coming in isn't

00:49:16.410 --> 00:49:19.080
going to be able to see
anything historical about how

00:49:19.080 --> 00:49:20.770
these devices were used.

00:49:20.770 --> 00:49:24.610
The flip case of how does that
person basically kick you out

00:49:24.610 --> 00:49:27.230
of the home fully and make
sure that your devices aren't

00:49:27.230 --> 00:49:28.688
spying on them or
doing things like

00:49:28.688 --> 00:49:31.340
that-- all devices have to
have a way to reset them

00:49:31.340 --> 00:49:32.982
if you have physical access.

00:49:32.982 --> 00:49:34.470
AUDIENCE: [INAUDIBLE]

00:49:34.470 --> 00:49:36.595
ANDREW WARREN: So there's
always going to be a way.

00:49:36.595 --> 00:49:39.729
Now there's easier ways for
you to actually transition

00:49:39.729 --> 00:49:41.020
to give that ownership to them.

00:49:41.020 --> 00:49:42.590
At the moment, the
easiest way to do that

00:49:42.590 --> 00:49:44.673
is simply to delete that
device and let it go back

00:49:44.673 --> 00:49:46.352
into a provisional mode.

00:49:46.352 --> 00:49:47.440
AUDIENCE: [INAUDIBLE]

00:49:47.440 --> 00:49:49.690
ANDREW WARREN: At the moment
reprovisioning everything

00:49:49.690 --> 00:49:50.750
is the best way to do it.

00:49:50.750 --> 00:49:53.040
We're looking at ways to
handle ownership transfer,

00:49:53.040 --> 00:49:54.790
but there's a lot of
security implications

00:49:54.790 --> 00:49:55.881
that come with that, too.

00:49:59.194 --> 00:50:00.610
AUDIENCE: Maybe a
related question

00:50:00.610 --> 00:50:02.230
to what the gentleman asked.

00:50:02.230 --> 00:50:05.900
So whenever today an end
user buys an Android phone,

00:50:05.900 --> 00:50:09.910
they have to create a Google
account to use an Android

00:50:09.910 --> 00:50:10.410
phone.

00:50:10.410 --> 00:50:14.100
And whenever an OEM publishes
a newer version of Android,

00:50:14.100 --> 00:50:17.060
the user accepts the
end user agreement

00:50:17.060 --> 00:50:20.690
and updates the device to
a later version of Android.

00:50:20.690 --> 00:50:23.054
So are we going to have
a similar model here

00:50:23.054 --> 00:50:26.540
that everyone who will
use the end devices

00:50:26.540 --> 00:50:29.320
will need to have
a Google account,

00:50:29.320 --> 00:50:32.510
and they will have
new updates of Brillo

00:50:32.510 --> 00:50:34.701
or Weave board support
package or application

00:50:34.701 --> 00:50:35.700
through the OEM program?

00:50:39.090 --> 00:50:43.550
Can the end user decide whether
they want to upgrade or not?

00:50:43.550 --> 00:50:45.890
ANDREW WARREN: So I heard
two questions there.

00:50:45.890 --> 00:50:47.473
SAM BEDER: So is the
main question can

00:50:47.473 --> 00:50:49.477
the user decide whether
or not they're updating?

00:50:49.477 --> 00:50:50.810
Did I understand that correctly?

00:50:50.810 --> 00:50:52.976
AUDIENCE: First of all,
will the user have a log-in?

00:50:52.976 --> 00:50:55.302
And second, does the
user decide to update

00:50:55.302 --> 00:50:57.760
to the newer version of the
operating system as application

00:50:57.760 --> 00:50:58.259
board?

00:51:00.129 --> 00:51:02.170
ANDREW WARREN: So I can
at least answer partially

00:51:02.170 --> 00:51:03.730
and then I think Sam can
probably give a little bit more

00:51:03.730 --> 00:51:05.190
detail on the Brillo side.

00:51:05.190 --> 00:51:07.398
The user doesn't have to
have a Google account to use

00:51:07.398 --> 00:51:08.420
any of these things.

00:51:08.420 --> 00:51:10.740
The user doesn't have to
associate for remote access

00:51:10.740 --> 00:51:12.054
or any of that kind of thing.

00:51:12.054 --> 00:51:13.470
And if they don't
have an account,

00:51:13.470 --> 00:51:15.970
they should still be able to
use these devices in their home

00:51:15.970 --> 00:51:17.650
without an issue.

00:51:17.650 --> 00:51:21.405
In terms of the second
question of updates,

00:51:21.405 --> 00:51:23.030
as part of the Weave
program, actually,

00:51:23.030 --> 00:51:24.405
and the certification,
we're also

00:51:24.405 --> 00:51:26.400
ensuring there is an
update mechanism in place

00:51:26.400 --> 00:51:28.691
so that security fixes and
things like this can get out

00:51:28.691 --> 00:51:29.810
to these devices.

00:51:29.810 --> 00:51:33.912
And so at least from
the Weave perspective,

00:51:33.912 --> 00:51:35.620
there has to be a
balance based on device

00:51:35.620 --> 00:51:37.730
type of whether things
auto-update in the background

00:51:37.730 --> 00:51:39.313
or whether or not
the user needs to be

00:51:39.313 --> 00:51:43.240
there to actively authorize
something to the device.

00:51:43.240 --> 00:51:45.750
Finding the right balance
between that friction

00:51:45.750 --> 00:51:48.169
of the user and also
keeping things safe

00:51:48.169 --> 00:51:49.710
is one of the things
that we're going

00:51:49.710 --> 00:51:53.000
to be working with manufacturer
by manufacturer on to try

00:51:53.000 --> 00:51:54.780
to make sure it works well.

00:51:54.780 --> 00:51:57.470
SAM BEDER: And just to add,
with Brillo we are really

00:51:57.470 --> 00:52:00.390
encouraging-- we're making
sure that we encourage

00:52:00.390 --> 00:52:02.820
all developers of
products to push out

00:52:02.820 --> 00:52:05.580
these updates, these security
fixes, and improvements

00:52:05.580 --> 00:52:07.070
to their device.

00:52:07.070 --> 00:52:09.530
And we're working
on the same balance

00:52:09.530 --> 00:52:14.980
to figure out exactly how
to weigh forcing updates

00:52:14.980 --> 00:52:17.279
versus just encouraging them.

00:52:17.279 --> 00:52:18.820
ANDREW WARREN: I
think the preference

00:52:18.820 --> 00:52:22.745
is to try to make sure that
auto-updates happen seamlessly

00:52:22.745 --> 00:52:24.120
in the background
to some extent.

00:52:24.120 --> 00:52:26.453
But in certain places that
can be disruptive to the user

00:52:26.453 --> 00:52:27.250
experience.

00:52:27.250 --> 00:52:29.000
And so we want to be
conscientious of that

00:52:29.000 --> 00:52:32.390
and make sure that
that doesn't happen.

00:52:32.390 --> 00:52:35.279
We've got a question
right over here.

00:52:35.279 --> 00:52:36.154
AUDIENCE: [INAUDIBLE]

00:52:48.397 --> 00:52:49.230
ANDREW WARREN: Sure.

00:52:49.230 --> 00:52:51.700
So just to clarify,
the question was

00:52:51.700 --> 00:52:54.370
around let's say you're
a manufacturer overseas

00:52:54.370 --> 00:52:56.660
who's building a
particular device type.

00:52:56.660 --> 00:52:59.010
Your government and
Google have a falling out

00:52:59.010 --> 00:53:00.319
and agree to go separate ways.

00:53:00.319 --> 00:53:02.360
Can you explain to me in
a little bit more detail

00:53:02.360 --> 00:53:03.280
what that would entail?

00:53:03.280 --> 00:53:04.155
AUDIENCE: [INAUDIBLE]

00:53:17.275 --> 00:53:18.150
ANDREW WARREN: I see.

00:53:18.150 --> 00:53:22.680
So the question is around would
Google cut off access for OEMs

00:53:22.680 --> 00:53:24.202
within a particular country?

00:53:24.202 --> 00:53:25.410
What happens if that happens?

00:53:25.410 --> 00:53:26.990
What recourse does
the manufacturer have,

00:53:26.990 --> 00:53:28.073
and these kinds of things?

00:53:30.650 --> 00:53:33.500
I think this starts
to stray into some

00:53:33.500 --> 00:53:35.540
of the legal territory
and that depends

00:53:35.540 --> 00:53:38.450
on the context of what
exactly happens there.

00:53:38.450 --> 00:53:40.620
I can say at the moment
there's no restriction

00:53:40.620 --> 00:53:42.650
on these services outside
of embargoed countries

00:53:42.650 --> 00:53:46.710
that US law dictates
Google can't act within.

00:53:46.710 --> 00:53:48.920
So I would be surprised
if that were to happen,

00:53:48.920 --> 00:53:50.669
but it would depend
on the particularities

00:53:50.669 --> 00:53:52.870
of the circumstances.

00:53:52.870 --> 00:53:54.440
We have a question
here in the back.

00:53:54.440 --> 00:53:58.870
AUDIENCE: Yeah, to beat a dead
horse regarding caching device

00:53:58.870 --> 00:54:03.660
information in the cloud, some
industries, due to compliance,

00:54:03.660 --> 00:54:05.950
can't use-- well, they
have to use their own cloud

00:54:05.950 --> 00:54:10.140
or their own private cloud are
their own old-fashioned LAN.

00:54:10.140 --> 00:54:11.290
What's the situation there?

00:54:11.290 --> 00:54:13.760
And then secondly,
somewhat related to that

00:54:13.760 --> 00:54:17.650
but more on an OEM basis,
like compliance with things

00:54:17.650 --> 00:54:22.300
like FIPS 140, certain
security protocols,

00:54:22.300 --> 00:54:26.280
that's the only way certain
vendors can sell to, say,

00:54:26.280 --> 00:54:30.210
certain federal government
institutions and what not.

00:54:30.210 --> 00:54:32.520
What's the status there?

00:54:32.520 --> 00:54:35.670
And related to
that, code signing.

00:54:35.670 --> 00:54:41.150
How do you make sure the signing
is-- the integrity of that?

00:54:41.150 --> 00:54:41.976
ANDREW WARREN: OK.

00:54:41.976 --> 00:54:43.350
So the first part
of the question

00:54:43.350 --> 00:54:47.810
is around different markets and
that particular device types

00:54:47.810 --> 00:54:50.720
have certain requirements
from a regulatory standpoint

00:54:50.720 --> 00:54:53.570
or from a certification
standpoint in terms of security

00:54:53.570 --> 00:54:55.192
certifications or
potentially HIPAA

00:54:55.192 --> 00:54:57.150
compliance or these kinds
of things as to where

00:54:57.150 --> 00:54:58.280
they can store data.

00:54:58.280 --> 00:55:01.374
The second part of the question
is around code signing.

00:55:01.374 --> 00:55:03.540
I think you're mainly talking
about firmware updates

00:55:03.540 --> 00:55:05.040
and things like
this, is that right?

00:55:05.040 --> 00:55:07.345
AUDIENCE: Yes and maintaining
the integrity of it.

00:55:07.345 --> 00:55:08.220
ANDREW WARREN: Right.

00:55:08.220 --> 00:55:11.100
So just to talk to the
former a little bit,

00:55:11.100 --> 00:55:13.760
naturally there are some
areas that Weave isn't

00:55:13.760 --> 00:55:14.950
suitable for at the moment.

00:55:14.950 --> 00:55:18.320
And that includes some things
like health care devices that

00:55:18.320 --> 00:55:20.630
deal with HIPAA-compliant data.

00:55:20.630 --> 00:55:22.940
It's going to be a
device by device type

00:55:22.940 --> 00:55:24.730
kind of conversation there.

00:55:24.730 --> 00:55:27.490
Over time, Google has
incorporated a variety

00:55:27.490 --> 00:55:30.910
of different certifications
into its cloud infrastructure

00:55:30.910 --> 00:55:32.390
for particular cases.

00:55:32.390 --> 00:55:35.840
But it's a little bit nebulous
to try to talk to that right

00:55:35.840 --> 00:55:36.340
now.

00:55:36.340 --> 00:55:37.980
If you have a particular
device type in mind

00:55:37.980 --> 00:55:39.860
or a particular set of
regulations in mind,

00:55:39.860 --> 00:55:42.380
I'd be interested
in talking after.

00:55:42.380 --> 00:55:43.320
Go ahead.

00:55:43.320 --> 00:55:45.320
SAM BEDER: I think we're
just about out of time.

00:55:45.320 --> 00:55:50.389
So I might just answer this and
then move on to the next talk.

00:55:50.389 --> 00:55:52.430
Was there any part of the
question that I missed?

00:55:52.430 --> 00:55:55.225
ANDREW WARREN: Specifically,
signing firmware updates

00:55:55.225 --> 00:55:56.600
and software to
make sure that it

00:55:56.600 --> 00:55:57.710
can't be interfered
with en route,

00:55:57.710 --> 00:55:59.740
and that it's what was
meant for that device.

00:55:59.740 --> 00:56:02.096
SAM BEDER: So we do take
measures to make sure

00:56:02.096 --> 00:56:03.970
that the thing that is
going on in the device

00:56:03.970 --> 00:56:06.390
is the same thing
that you pushed out.

00:56:06.390 --> 00:56:09.780
So I think that
maybe the best advice

00:56:09.780 --> 00:56:12.110
is we have a security
talk later today,

00:56:12.110 --> 00:56:14.790
and by going to that I think
should answer your questions.

00:56:14.790 --> 00:56:17.870
Or, if it doesn't, maybe
ask this question again,

00:56:17.870 --> 00:56:20.400
and Paul will definitely
be able to answer it.

00:56:20.400 --> 00:56:22.350
ANDREW WARREN: The
quick answer is there

00:56:22.350 --> 00:56:23.900
will be signing of updates.

00:56:23.900 --> 00:56:26.150
And Paul can probably go
into a little bit more detail

00:56:26.150 --> 00:56:27.370
later today.

00:56:27.370 --> 00:56:31.920
But that's definitely a part of
the auto-update infrastructure.

00:56:31.920 --> 00:56:32.420
Cool.

00:56:32.420 --> 00:56:32.940
SAM BEDER: OK?

00:56:32.940 --> 00:56:33.320
All right.

00:56:33.320 --> 00:56:34.070
Well, thank you very much.

00:56:34.070 --> 00:56:34.830
ANDREW WARREN: Thank
you, guys, for your time.

00:56:34.830 --> 00:56:36.030
[APPLAUSE]

00:56:39.630 --> 00:56:42.380
[MUSIC PLAYING]

