WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:04.105
Given everything that we know now,
let's review our current agreed upon and

00:00:04.105 --> 00:00:05.960
de-normalized data schema design.

00:00:07.110 --> 00:00:10.040
I've made some generic json to
map out what we've discussed for

00:00:10.040 --> 00:00:11.310
the final data design.

00:00:11.310 --> 00:00:13.810
And I went ahead and
I included it in the instructor notes.

00:00:13.810 --> 00:00:16.350
Be careful about not overwriting
your database with it.

00:00:16.350 --> 00:00:19.710
You can always make a new fire
base app back end if necessary.

00:00:19.710 --> 00:00:22.950
To frame all of this, let's think about
the screens that we're interested in.

00:00:22.950 --> 00:00:26.160
The two that we've been talking about
a lot are the shopping list fragment and

00:00:26.160 --> 00:00:27.750
the active list detail screen.

00:00:27.750 --> 00:00:31.780
And remember the goal is to allow
users to be able to create lists and

00:00:31.780 --> 00:00:32.740
share lists.

00:00:32.740 --> 00:00:36.440
And then they should only see the lists
that they either own or are shared on.

00:00:36.440 --> 00:00:37.960
Okay, so
I'm going to load up the station and

00:00:37.960 --> 00:00:41.310
open up our back and sort of walk
you through what's going on.

00:00:41.310 --> 00:00:43.270
Here are our top level nodes.

00:00:43.270 --> 00:00:45.870
Following our discussion of two
way mapping between users and

00:00:45.870 --> 00:00:49.490
the list they own, I think the best way
to handle this sharing functionality

00:00:49.490 --> 00:00:52.780
is to have a list of shopping lists for
each user.

00:00:52.780 --> 00:00:54.062
Here, let me show you.

00:00:54.062 --> 00:00:56.280
We're going to have this node
here called userLists, and

00:00:56.280 --> 00:01:00.450
this will contain for each user a list
of the lists that they have access to.

00:01:00.450 --> 00:01:05.500
That means if JP, myself and Walter
are all in the shoppinglist++ system.

00:01:05.500 --> 00:01:08.510
Then there would be a separate list
of shopping lists for each of us.

00:01:08.510 --> 00:01:11.760
And again these would be the list
that we either own or shared with us.

00:01:11.760 --> 00:01:14.260
So in this case Walter has
one list shared with him.

00:01:14.260 --> 00:01:17.540
And if he were to create or
be shared on with another list.

00:01:17.540 --> 00:01:19.240
That would also appear here.

00:01:19.240 --> 00:01:22.020
And this is actually pretty much all
of the information that we need for

00:01:22.020 --> 00:01:23.430
the shopping list fragment.

00:01:23.430 --> 00:01:26.310
You could go ahead and
attach your Firebase list adapter here

00:01:26.310 --> 00:01:29.000
at the encoded email address
of the user who is logged in.

00:01:29.000 --> 00:01:32.260
So if Walter is the one logged in,
then we could attach a listener here and

00:01:32.260 --> 00:01:34.580
it would very easily display
the list that he owns.

00:01:34.580 --> 00:01:36.590
Since we got the shopping
list fragment figured out.

00:01:36.590 --> 00:01:38.680
Let's think about the active
list detail screen.

00:01:38.680 --> 00:01:41.280
For the list detail screen
we'll need the list information

00:01:41.280 --> 00:01:43.390
which we can grab here from
the list of user lists.

00:01:43.390 --> 00:01:46.660
And we can get that because at that
point we should have the encoded email

00:01:46.660 --> 00:01:48.950
of the user and
the push idea of the list.

00:01:48.950 --> 00:01:51.840
And that gives us enough information
to drill down to the email.

00:01:51.840 --> 00:01:54.210
And then the push ID to
get that list information.

00:01:54.210 --> 00:01:56.490
And from here we could get things like
the user's shopping on the list and

00:01:56.490 --> 00:01:57.170
the list name.

00:01:57.170 --> 00:02:00.100
And then, as we've already been doing,
we de-normalized and

00:02:00.100 --> 00:02:01.710
had the shopping list items up here.

00:02:01.710 --> 00:02:04.880
And we can use that same
shopping list push ID

00:02:04.880 --> 00:02:07.310
to get the shopping list items for
the list, as we've been doing.

00:02:07.310 --> 00:02:10.110
Okay, so that explains the use
of both the user list and

00:02:10.110 --> 00:02:11.150
the shopping list items.

00:02:11.150 --> 00:02:13.680
Now at this point you're probably
thinking that this design has

00:02:13.680 --> 00:02:16.150
a non-trivial amount of data copying.

00:02:16.150 --> 00:02:19.120
Here each of us has our list
of lists in user lists.

00:02:19.120 --> 00:02:20.720
And if we each make four
different lists and

00:02:20.720 --> 00:02:22.790
we owed them this is
what it would look like.

00:02:22.790 --> 00:02:25.850
But let's say that cougar A decides that
she wants to share her book club snacks

00:02:25.850 --> 00:02:26.930
list with all of us.

00:02:26.930 --> 00:02:31.230
What this would then do is add a copy of
book called snacks to each of our lists.

00:02:31.230 --> 00:02:32.970
A total of three more copies.

00:02:32.970 --> 00:02:36.260
Now this design here makes reading for
the database lightning fast.

00:02:36.260 --> 00:02:39.340
We never have to search through
a list of all shopping lists, or

00:02:39.340 --> 00:02:40.550
pull down any extra data.

00:02:40.550 --> 00:02:43.470
But, you're probably thinking that
there must be some downside to all of

00:02:43.470 --> 00:02:44.270
this copying.

00:02:44.270 --> 00:02:45.230
Well, there is.

00:02:45.230 --> 00:02:47.420
Whenever you change anything
about the shopping list,

00:02:47.420 --> 00:02:50.010
such as to change the list
name to book club snacks.

00:02:50.010 --> 00:02:52.280
You need to do this for
all copies of the shopping list.

00:02:52.280 --> 00:02:55.340
So now instead of changing something in
just one place you need to change it in

00:02:55.340 --> 00:02:56.490
four different places.

00:02:56.490 --> 00:02:58.550
And more importantly
when you update a list,

00:02:58.550 --> 00:03:01.200
you need a way to know quickly
if there are other copies of

00:03:01.200 --> 00:03:05.180
that same list in the database without
any extra sorting or filtering.

00:03:05.180 --> 00:03:08.190
For example if you're just looking at
this wilderness survival list here.

00:03:08.190 --> 00:03:11.060
You have no way to know whether
it's been shared with other users.

00:03:11.060 --> 00:03:13.270
And for
that we have a node called shared with.

00:03:13.270 --> 00:03:14.910
Let's take a look at it in the database.

00:03:14.910 --> 00:03:18.060
So here's shared with, let's notice
kind of like shopping list items.

00:03:18.060 --> 00:03:20.950
For every list that is shared, you
will have an entry and share it with.

00:03:20.950 --> 00:03:23.040
And the key of that note
will be the list push ID.

00:03:23.040 --> 00:03:26.105
Inside of that node will be a list of
users that that shopping list has been

00:03:26.105 --> 00:03:26.820
sharedWith.

00:03:26.820 --> 00:03:28.750
So going back to our book club example,

00:03:28.750 --> 00:03:31.670
when you want to update the value of
a list such as the list name, you

00:03:31.670 --> 00:03:34.940
have one place where you can look up all
the users of the list to share it with.

00:03:34.940 --> 00:03:37.710
This allows you to construct
the various URLs that you'll need

00:03:37.710 --> 00:03:39.720
to get to the user list of the database.

00:03:39.720 --> 00:03:43.170
Because now you have access to
everybody's encoded email, you have both

00:03:43.170 --> 00:03:47.630
parts the encoded email and the push ID
that you need to get to a specific list.

00:03:47.630 --> 00:03:50.570
Okay, so at this point we've talked
about sharedWith, shoppingListitems and

00:03:50.570 --> 00:03:51.410
userLists.

00:03:51.410 --> 00:03:52.890
We're going to keep
around our list of users,

00:03:52.890 --> 00:03:54.920
which we'll just have all of
the users that are in our app.

00:03:54.920 --> 00:03:56.710
And this is functioning
as it did before.

00:03:56.710 --> 00:03:58.730
We'll also make some userFriends lists.

00:03:58.730 --> 00:04:01.510
But I'll talk more about that when we
go into implementing those screens.

00:04:01.510 --> 00:04:04.240
Okay, so if you want to take a look
at this database structure yourself,

00:04:04.240 --> 00:04:06.550
you can load up the JSON file
with the instructor notes.

00:04:06.550 --> 00:04:07.950
Once you have a handle
on what's changed and

00:04:07.950 --> 00:04:10.670
what's sort of going on here,
we'll start the refactor from

00:04:10.670 --> 00:04:14.540
the huge list of shopping lists that's
currently stored in the active list node

00:04:14.540 --> 00:04:17.870
to this new user lists centric
organization that I've described.

