WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Well, for a finite state machine and a regular expression to have the same language,

00:00:04.000 --> 00:00:07.000
they have to have exactly the same set of strings that they accept.

00:00:07.000 --> 00:00:09.000
Let's go try some of those out.

00:00:09.000 --> 00:00:12.000
In this particular regular expression, a is in the accepted set of strings.

00:00:12.000 --> 00:00:15.000
I need an a, but I could have zero b's and zero c's.

00:00:15.000 --> 00:00:21.000
However, this finite state machine does not allow us to accept on a single a.

00:00:21.000 --> 00:00:25.000
There's a string in here that's not up there, so this is not part of the answer.

00:00:25.000 --> 00:00:27.000
How about this one?

00:00:27.000 --> 00:00:32.000
Up here we can see that the string a b nothing is in the language of this finite state machine,

00:00:32.000 --> 00:00:36.000
but it's not in the language of this regular expression.

00:00:36.000 --> 00:00:40.000
This regular expression requires at least one c. There are no c's up here.

00:00:40.000 --> 00:00:46.000
This is also a bad call. Let's take a look at the last one in a bit of a leading ordering choice.

00:00:46.000 --> 00:00:50.000
This regular expression uses disjunction, and one possible choice here is

00:00:50.000 --> 00:00:55.000
a followed by nothing, followed by nothing, so a is in the language of this regular expression,

00:00:55.000 --> 00:00:59.000
but we've already seen that a is not accepted by this finite state machine,

00:00:59.000 --> 00:01:03.000
so this one is not quite correction. However, this one is.

00:01:03.000 --> 00:01:06.000
Now, this takes a little bit of reasoning. We can certainly start with an a.

00:01:06.000 --> 00:01:09.000
Then we have at least one b and possibly more.

00:01:09.000 --> 00:01:12.000
This looks a lot like a b +.

00:01:12.000 --> 00:01:17.000
Over here, we don't have the a. We just have a b followed by possibly more b's.

00:01:17.000 --> 00:01:19.000
So this is a lot like b+.

00:01:19.000 --> 00:01:23.000
I've got two branches--on that's ab+ and one that's just b+.

00:01:23.000 --> 00:01:26.000
That's an optional a followed by b+.

00:01:26.000 --> 00:01:30.000
After that point we have as many c's as we want, but possibly zero.

00:01:30.000 --> 09:59:59.000
That's c*, so yeah. This matches number 3.

