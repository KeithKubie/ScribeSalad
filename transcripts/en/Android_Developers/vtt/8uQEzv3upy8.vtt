WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[MUSIC PLAYING]

00:00:04.672 --> 00:00:05.380
ALOK CHANDEL: Hi.

00:00:05.380 --> 00:00:06.272
All right.

00:00:06.272 --> 00:00:07.610
All right.

00:00:07.610 --> 00:00:09.200
My name is Alok Chandel.

00:00:09.200 --> 00:00:13.370
I am the user experience
lead for foldable devices

00:00:13.370 --> 00:00:15.530
on the Android platform team.

00:00:15.530 --> 00:00:17.360
And in this session,
we'll be talking

00:00:17.360 --> 00:00:21.500
about how to build apps for
foldables, multi display,

00:00:21.500 --> 00:00:24.860
and large screen devices.

00:00:24.860 --> 00:00:28.400
Now, we'll start by looking
at the range of devices

00:00:28.400 --> 00:00:31.070
which are going to
benefit from this session.

00:00:31.070 --> 00:00:34.580
Then we will take a look at
some of the user experience

00:00:34.580 --> 00:00:37.820
considerations that
you should keep in mind

00:00:37.820 --> 00:00:40.490
as you are designing your apps.

00:00:40.490 --> 00:00:43.100
Then we will dive
a little bit deeper

00:00:43.100 --> 00:00:48.350
into app continuity, multi
window, and multi display.

00:00:48.350 --> 00:00:51.620
We are also delighted to
hear from our partners

00:00:51.620 --> 00:00:55.020
from Gameloft and 1Password.

00:00:55.020 --> 00:00:58.340
And finally, we'll
finish it off by looking

00:00:58.340 --> 00:01:02.300
at how you can test your apps
before you even get your hands

00:01:02.300 --> 00:01:04.890
on these foldable devices.

00:01:04.890 --> 00:01:07.470
So let's get started.

00:01:07.470 --> 00:01:11.030
When we talk about
foldable devices,

00:01:11.030 --> 00:01:14.810
we are specifically looking
at the devices which

00:01:14.810 --> 00:01:18.320
have a display which can fold.

00:01:18.320 --> 00:01:22.200
Now, they come in
two broad categories.

00:01:22.200 --> 00:01:25.970
Number one is when
you fold the device,

00:01:25.970 --> 00:01:29.480
the flexible display
is on the inside.

00:01:29.480 --> 00:01:33.950
An example of that is
the Samsung Galaxy Fold.

00:01:33.950 --> 00:01:36.260
Now, typically these
devices will also

00:01:36.260 --> 00:01:39.230
have an additional
screen on the outside

00:01:39.230 --> 00:01:41.300
so that even when
the phone is folded,

00:01:41.300 --> 00:01:44.570
you can use it as a one
handed configuration, maybe

00:01:44.570 --> 00:01:46.880
for doing some quick actions.

00:01:46.880 --> 00:01:53.240
The other category is
when you fold the phone,

00:01:53.240 --> 00:01:55.110
the display is on the outside.

00:01:55.110 --> 00:01:57.480
This is the fold
out configuration,

00:01:57.480 --> 00:02:02.450
such as Huawei Mate X. Now,
when these devices are folded,

00:02:02.450 --> 00:02:06.230
some part of the display
is still available like

00:02:06.230 --> 00:02:12.580
to use as a regular phone in
a one handed configuration.

00:02:12.580 --> 00:02:14.870
Now, I'm sure you have
heard this, that Android

00:02:14.870 --> 00:02:16.280
is supporting foldables.

00:02:16.280 --> 00:02:19.020
But what does this
really mean for you?

00:02:19.020 --> 00:02:23.330
What this means is that if
you follow some of the best

00:02:23.330 --> 00:02:28.550
practices, such as resizability,
handling configuration changes,

00:02:28.550 --> 00:02:32.330
and using saved
instance state, your app

00:02:32.330 --> 00:02:36.230
should just work out of
the box on these completely

00:02:36.230 --> 00:02:38.870
new and innovative form factors.

00:02:38.870 --> 00:02:42.110
That's really the power
of when a platform is

00:02:42.110 --> 00:02:45.170
supporting these new devices.

00:02:45.170 --> 00:02:47.510
Now, Android
supports innovation.

00:02:47.510 --> 00:02:49.520
But you are the innovators.

00:02:49.520 --> 00:02:53.360
And we are so excited to
see the kind of experiences

00:02:53.360 --> 00:02:58.660
that you are going to
create on these new devices.

00:02:58.660 --> 00:03:02.680
Now, another interesting thing
that you need to keep in mind

00:03:02.680 --> 00:03:07.690
is that once you optimize
your applications to run well

00:03:07.690 --> 00:03:11.410
on these sort of large,
unfolded displays,

00:03:11.410 --> 00:03:16.510
they will also work equally
well on hundreds of millions

00:03:16.510 --> 00:03:19.720
of Android tablets which
are already out there,

00:03:19.720 --> 00:03:24.460
as well as the Chrome OS devices
which are capable of running

00:03:24.460 --> 00:03:27.460
Android apps.

00:03:27.460 --> 00:03:30.380
Now, let's take a look
at the UX considerations

00:03:30.380 --> 00:03:32.490
that you should pay
attention to when building

00:03:32.490 --> 00:03:35.700
your apps for these devices.

00:03:35.700 --> 00:03:38.100
Immersive experiences.

00:03:38.100 --> 00:03:40.140
Once you unfold these
devices, whether they

00:03:40.140 --> 00:03:42.990
are 7 inch or 8 inch
display, they're

00:03:42.990 --> 00:03:44.760
just absolutely gorgeous.

00:03:44.760 --> 00:03:47.340
And you want to make
sure that you are really

00:03:47.340 --> 00:03:51.790
taking advantage of every single
pixel that is available to you.

00:03:51.790 --> 00:03:55.620
So these are really good
for things like gaming,

00:03:55.620 --> 00:03:59.640
for watching videos,
both consuming, and more

00:03:59.640 --> 00:04:02.950
importantly, creating
content for social media,

00:04:02.950 --> 00:04:04.560
as well as they
are just absolutely

00:04:04.560 --> 00:04:06.480
amazing for productivity.

00:04:06.480 --> 00:04:10.650
So really make sure
that you are embracing

00:04:10.650 --> 00:04:14.860
these large, full
screen experiences.

00:04:14.860 --> 00:04:17.250
Next, once these
devices are folded--

00:04:17.250 --> 00:04:19.200
because that's where
the magic happens.

00:04:19.200 --> 00:04:21.360
You can fold it, and
keep it in your pocket.

00:04:21.360 --> 00:04:24.780
You still want to make sure
that you are taking advantage

00:04:24.780 --> 00:04:27.090
of the fact that these
devices can be used

00:04:27.090 --> 00:04:29.160
in a one handed operation also.

00:04:29.160 --> 00:04:32.010
So depending upon the
size of the screen that

00:04:32.010 --> 00:04:36.030
is available to the user
once the phone is folded,

00:04:36.030 --> 00:04:38.550
it may be just for
taking quick action.

00:04:38.550 --> 00:04:41.820
It may also be just
used as a regular phone.

00:04:41.820 --> 00:04:44.520
So make sure that your
apps are respecting

00:04:44.520 --> 00:04:47.550
both of these configurations.

00:04:47.550 --> 00:04:49.980
Finally, multitasking.

00:04:49.980 --> 00:04:53.820
This is one of those fields
which is gaining more

00:04:53.820 --> 00:04:56.940
importance with these devices.

00:04:56.940 --> 00:05:00.240
A lot of times you will see that
these devices are coming out

00:05:00.240 --> 00:05:04.230
with nearly square form
factor, or very close to it.

00:05:04.230 --> 00:05:10.410
What that means is that you
can run two 18x9 windows next

00:05:10.410 --> 00:05:12.240
to each other, side by side.

00:05:12.240 --> 00:05:13.740
So when you are
multitasking, you're

00:05:13.740 --> 00:05:16.140
multitasking between
almost two full displays

00:05:16.140 --> 00:05:17.460
next to each other.

00:05:17.460 --> 00:05:20.040
So make sure that you
are taking advantage

00:05:20.040 --> 00:05:23.150
of these new opportunities.

00:05:23.150 --> 00:05:26.070
Now, speaking about
new aspect ratios,

00:05:26.070 --> 00:05:28.130
this is something that
we definitely encourage

00:05:28.130 --> 00:05:29.780
you to pay attention to.

00:05:29.780 --> 00:05:33.110
You are probably already very
familiar with aspect ratios

00:05:33.110 --> 00:05:37.460
like 16x9, or 18x9.

00:05:37.460 --> 00:05:41.030
Now, with these
devices, start thinking

00:05:41.030 --> 00:05:46.070
about new aspect ratios, which
can go as high as 21 inch

00:05:46.070 --> 00:05:48.200
to 9", or even beyond.

00:05:48.200 --> 00:05:52.340
And on the other hand, then
they can go as small as 1 inch

00:05:52.340 --> 00:05:54.980
to 1", like almost
square displays.

00:05:54.980 --> 00:05:56.900
So we really
encourage you to think

00:05:56.900 --> 00:06:00.350
about how your apps
are going to look

00:06:00.350 --> 00:06:04.260
across all of these
different aspect ratios.

00:06:04.260 --> 00:06:07.490
Now, we understand
that for some reason

00:06:07.490 --> 00:06:12.800
you may feel that these
extreme aspect ratios do not

00:06:12.800 --> 00:06:16.320
provide the right kind of
experience for your users.

00:06:16.320 --> 00:06:19.400
So we already have
the max aspect ratio

00:06:19.400 --> 00:06:24.650
attribute that you can use
to limit how big it can go.

00:06:24.650 --> 00:06:27.280
We are also introducing
in Android Q

00:06:27.280 --> 00:06:29.760
a minAspectRatio attribute.

00:06:29.760 --> 00:06:33.590
So this allows you to have
a true control over exactly

00:06:33.590 --> 00:06:36.020
how your apps are going
to look across all

00:06:36.020 --> 00:06:40.070
the different range of devices
that you're going to see.

00:06:40.070 --> 00:06:45.650
Now, talking about screens,
we are introducing a change

00:06:45.650 --> 00:06:48.980
which is more like a
clarification in Android Q

00:06:48.980 --> 00:06:52.280
to make sure that every
display that comes out

00:06:52.280 --> 00:06:55.130
with these foldable devices,
or devices in general,

00:06:55.130 --> 00:06:57.450
has a minimum width
of two inches.

00:06:57.450 --> 00:06:59.630
Now, this is important
because, A, we

00:06:59.630 --> 00:07:02.720
want to make sure that
you have enough space

00:07:02.720 --> 00:07:06.380
to comfortably put up to
five icons in your nav bar.

00:07:06.380 --> 00:07:11.690
As well as, there is sufficient
space for a keyboard input.

00:07:11.690 --> 00:07:16.451
Now, with that, I would like
to invite on stage Adrian.

00:07:16.451 --> 00:07:20.350
[APPLAUSE]

00:07:20.350 --> 00:07:22.060
ADRIAN ROOS: Thanks Alok.

00:07:22.060 --> 00:07:22.850
Hi, everyone.

00:07:22.850 --> 00:07:23.470
I'm Adrian.

00:07:23.470 --> 00:07:25.480
I'm a software
engineer on Android,

00:07:25.480 --> 00:07:29.150
and I'm the lead on foldables.

00:07:29.150 --> 00:07:31.450
So let's talk a
bit more about how

00:07:31.450 --> 00:07:33.950
you can make sure that your
apps work well on these new form

00:07:33.950 --> 00:07:35.607
factors.

00:07:35.607 --> 00:07:37.190
One of the important
things you can do

00:07:37.190 --> 00:07:40.980
is ensure that your app
supports app continuity.

00:07:40.980 --> 00:07:42.680
So what is that really?

00:07:42.680 --> 00:07:44.330
It's what we call
the concept of being

00:07:44.330 --> 00:07:48.080
able to have your app seamlessly
change between the fold

00:07:48.080 --> 00:07:54.770
and the unfold states without
losing any state of the user.

00:07:54.770 --> 00:07:58.330
So in this example here, you
might have a video player.

00:07:58.330 --> 00:08:01.312
If the user is watching a
video, and they fold or unfold,

00:08:01.312 --> 00:08:02.770
they don't want to
lose that state.

00:08:02.770 --> 00:08:05.120
They still want to
look at the same video.

00:08:05.120 --> 00:08:08.613
And playback
shouldn't interrupt.

00:08:08.613 --> 00:08:10.780
So on a technical level,
what this really comes down

00:08:10.780 --> 00:08:13.870
to is handling
configuration changes.

00:08:13.870 --> 00:08:16.390
Folding and unfolding
is really nothing other

00:08:16.390 --> 00:08:20.720
than the screen size and
the configuration changing.

00:08:20.720 --> 00:08:23.410
And this has existed on
Android for a while now.

00:08:23.410 --> 00:08:25.945
We have a great developer
guide on our website

00:08:25.945 --> 00:08:28.080
on developer.android.com.

00:08:28.080 --> 00:08:31.210
And it goes into a lot
of detail on what to do,

00:08:31.210 --> 00:08:35.296
and how to handle those
configuration changes.

00:08:35.296 --> 00:08:38.950
But sort of the most important
things to look out for

00:08:38.950 --> 00:08:41.260
are that you always
choose the right layout

00:08:41.260 --> 00:08:43.450
when the configuration
change happens

00:08:43.450 --> 00:08:46.780
to really take advantage of
the added screen real estate,

00:08:46.780 --> 00:08:50.530
or properly fit it if the
screen size reduces when you

00:08:50.530 --> 00:08:53.560
fold the device back closed.

00:08:53.560 --> 00:08:55.870
And another thing you really
need to pay attention to

00:08:55.870 --> 00:08:59.410
is restoring state that the
user is currently experiencing,

00:08:59.410 --> 00:09:02.140
like positions in
scroll layouts,

00:09:02.140 --> 00:09:05.160
or something like the
current page in a view page,

00:09:05.160 --> 00:09:10.170
or where the user currently
is in a tab navigation.

00:09:10.170 --> 00:09:12.790
And also really make sure
to not drop any input

00:09:12.790 --> 00:09:16.120
the user has already entered,
like text in a text view,

00:09:16.120 --> 00:09:18.730
or where the keyboard
focus currently is.

00:09:22.720 --> 00:09:27.710
Let's also talk a bit more about
Android resizable activity.

00:09:27.710 --> 00:09:30.670
So this is a manifest flag
that we introduced together

00:09:30.670 --> 00:09:34.030
with multi window support
quite a while ago.

00:09:34.030 --> 00:09:36.730
And it indicates
whether an activity

00:09:36.730 --> 00:09:39.010
can run in a different
configuration

00:09:39.010 --> 00:09:42.825
than what the global
screen configuration is.

00:09:42.825 --> 00:09:44.200
And when you think
about it, it's

00:09:44.200 --> 00:09:45.580
really required
for multi window.

00:09:45.580 --> 00:09:46.080
Right?

00:09:46.080 --> 00:09:49.630
Because your app might not
occupy the whole screen.

00:09:49.630 --> 00:09:53.320
And so it needs to experience
a smaller configuration

00:09:53.320 --> 00:09:55.990
than the whole screen.

00:09:55.990 --> 00:09:58.090
The name is a bit
unfortunate, however,

00:09:58.090 --> 00:10:00.490
because even if you set
this to [INAUDIBLE],,

00:10:00.490 --> 00:10:02.430
it doesn't mean that
you never experience

00:10:02.430 --> 00:10:04.570
a resize in your activity.

00:10:04.570 --> 00:10:07.630
Because the orientation of
the display might change.

00:10:07.630 --> 00:10:11.350
Or now with foldables, also
the effective screen size

00:10:11.350 --> 00:10:12.040
might change.

00:10:12.040 --> 00:10:14.750
And you still need
to handle that.

00:10:14.750 --> 00:10:17.650
So even if you set
resizable activity to false,

00:10:17.650 --> 00:10:20.460
make sure that your test
configuration changes even

00:10:20.460 --> 00:10:21.930
with such activities.

00:10:24.750 --> 00:10:27.370
Now, there is one case where
previous to foldable phones,

00:10:27.370 --> 00:10:32.330
we didn't really expose your
activities to configuration

00:10:32.330 --> 00:10:33.520
changes ever.

00:10:33.520 --> 00:10:36.310
And that was for orientation
locked activities

00:10:36.310 --> 00:10:42.310
that are also not resizable,
so don't support multi window.

00:10:42.310 --> 00:10:45.370
And for those activities, we are
introducing a new compatibility

00:10:45.370 --> 00:10:49.900
mode in Android Q, which
ensures that your apps don't

00:10:49.900 --> 00:10:51.560
see a configuration change.

00:10:51.560 --> 00:10:55.095
Instead, they get letterboxed
and scaled to fit the screen.

00:10:55.095 --> 00:10:56.470
And the user, of
course, has then

00:10:56.470 --> 00:10:58.570
the option to
restart your activity

00:10:58.570 --> 00:11:04.700
in the new native screen size.

00:11:04.700 --> 00:11:07.200
However, for the
best user experience,

00:11:07.200 --> 00:11:09.520
we recommend that you avoid
falling into this case,

00:11:09.520 --> 00:11:12.370
and support multi
window by setting

00:11:12.370 --> 00:11:14.320
resizable activity to true.

00:11:18.380 --> 00:11:18.880
All right.

00:11:18.880 --> 00:11:22.630
So speaking of multi window,
on these form factors

00:11:22.630 --> 00:11:26.580
with increase screen
size, multi window

00:11:26.580 --> 00:11:29.110
is really getting more
important to take advantage

00:11:29.110 --> 00:11:31.230
of all that screen space.

00:11:31.230 --> 00:11:34.900
And so I'd also like to talk
a bit more about what changes

00:11:34.900 --> 00:11:37.380
we made, and how to take
best advantage of that.

00:11:40.320 --> 00:11:44.100
In Andrew Q, one of the
biggest multi window changes

00:11:44.100 --> 00:11:47.300
is the introduction
of multi-resume.

00:11:47.300 --> 00:11:50.580
And so the change from
previous versions of Android

00:11:50.580 --> 00:11:53.880
is that previously only
at most one activity

00:11:53.880 --> 00:11:56.510
could be resumed
at the same time.

00:11:56.510 --> 00:11:59.010
And it was not really indicated
to a user which one that is.

00:11:59.010 --> 00:12:03.060
And so it got a bit
confusing if one activity

00:12:03.060 --> 00:12:05.910
might react a bit differently
than another, even though it

00:12:05.910 --> 00:12:07.460
looks totally the same.

00:12:07.460 --> 00:12:09.600
And it was also
one more state you

00:12:09.600 --> 00:12:11.130
had to worry about
as a developer

00:12:11.130 --> 00:12:13.050
without really gaining anything.

00:12:13.050 --> 00:12:16.200
So to simplify things,
starting with Android Q,

00:12:16.200 --> 00:12:21.120
we are just keeping all the top
focusable activities resumed.

00:12:21.120 --> 00:12:26.070
So in this example here,
all three activities

00:12:26.070 --> 00:12:31.740
are in the resumed state in
this situation on Android Q.

00:12:31.740 --> 00:12:33.240
However, be aware
that you can still

00:12:33.240 --> 00:12:35.910
end up in the paused state
if there's a transparent

00:12:35.910 --> 00:12:39.270
activity launched on top of
you, or if your activity isn't

00:12:39.270 --> 00:12:41.843
actually currently
focusable, such as in picture

00:12:41.843 --> 00:12:42.510
in picture mode.

00:12:47.060 --> 00:12:49.520
So multi-resume
should mostly just

00:12:49.520 --> 00:12:52.700
work out of the box
for all apps really.

00:12:52.700 --> 00:12:55.820
But one important case
that needs to be handled

00:12:55.820 --> 00:12:59.090
is multi-resume
together with using

00:12:59.090 --> 00:13:03.590
exclusive resources, such as
the camera or the microphone.

00:13:03.590 --> 00:13:06.980
So now that more activities
are resumed at the same time,

00:13:06.980 --> 00:13:09.290
it may happen that
you are resumed,

00:13:09.290 --> 00:13:11.990
but someone else
is actually trying

00:13:11.990 --> 00:13:14.940
to access the same
resource that you are.

00:13:14.940 --> 00:13:18.500
So in this case here, if
you launch three camera apps

00:13:18.500 --> 00:13:21.080
simultaneously, obviously
only one of them

00:13:21.080 --> 00:13:24.090
can get the access
to the camera.

00:13:24.090 --> 00:13:26.000
So make sure that even
if you are resumed,

00:13:26.000 --> 00:13:28.100
you handle the own
disconnected callbacks that you

00:13:28.100 --> 00:13:30.170
might get with the camera.

00:13:30.170 --> 00:13:36.350
And also, reconnect once the
camera becomes available again.

00:13:36.350 --> 00:13:39.050
Also, to note this that
even if you disable

00:13:39.050 --> 00:13:43.800
multi window with
resizable activity false,

00:13:43.800 --> 00:13:45.770
it does not really
guarantee exclusive access,

00:13:45.770 --> 00:13:48.020
because there might
be a floating activity

00:13:48.020 --> 00:13:51.660
on top of you, or with
multi display devices

00:13:51.660 --> 00:13:54.588
you might actually even
have a resumed activity

00:13:54.588 --> 00:13:55.880
on a totally different display.

00:14:00.050 --> 00:14:03.920
We are adding a new callback
to activity, which tells you

00:14:03.920 --> 00:14:06.700
about the top resumed state.

00:14:06.700 --> 00:14:08.540
And that really just
corresponds to what

00:14:08.540 --> 00:14:11.030
resumed used to mean on
previous platform versions.

00:14:15.250 --> 00:14:18.100
And then finally, I'd also like
to talk about drag and drop

00:14:18.100 --> 00:14:19.727
quickly.

00:14:19.727 --> 00:14:21.310
Drag and drop is
really becoming a lot

00:14:21.310 --> 00:14:24.670
more important and powerful
now that multi window

00:14:24.670 --> 00:14:26.930
is becoming more prevalent.

00:14:26.930 --> 00:14:29.170
But that all depends
on you and your apps

00:14:29.170 --> 00:14:31.400
actually implementing that.

00:14:31.400 --> 00:14:33.610
Again, there's a great
dev guide online.

00:14:33.610 --> 00:14:34.700
Please check that out.

00:14:34.700 --> 00:14:37.500
And if drag and drop makes sense
for your app, please add it.

00:14:40.760 --> 00:14:44.050
And with that, I'd like to
welcome Michael to the stage.

00:14:44.050 --> 00:14:46.050
He's going to talk about
his experience applying

00:14:46.050 --> 00:14:47.303
all of this.

00:14:47.303 --> 00:14:51.650
[APPLAUSE]

00:14:51.650 --> 00:14:54.000
MICHAEL VERDE: Thanks, Adrian.

00:14:54.000 --> 00:14:54.750
My name's Michael.

00:14:54.750 --> 00:14:58.950
I'm the team lead for 1Password
on the Android platform.

00:14:58.950 --> 00:15:04.860
And 1Password is a
secure way of storing

00:15:04.860 --> 00:15:07.260
your most sensitive data.

00:15:07.260 --> 00:15:11.760
We store things like your login
credentials, your banking,

00:15:11.760 --> 00:15:14.620
credit card details,
and much more.

00:15:14.620 --> 00:15:18.150
But it isn't sufficient to
just store that information.

00:15:18.150 --> 00:15:22.440
It needs to be accessible to
you when and where you need it

00:15:22.440 --> 00:15:25.515
in a way that's
natural and effortless.

00:15:25.515 --> 00:15:27.150
Am I not coming through?

00:15:30.028 --> 00:15:31.070
Can everyone hear me now?

00:15:34.150 --> 00:15:38.930
In a way that's natural and
effortless on the devices

00:15:38.930 --> 00:15:41.760
that you are using.

00:15:41.760 --> 00:15:45.260
So this pursuit of meeting you
where you are on the platforms

00:15:45.260 --> 00:15:50.900
that you use originally led us
to pursue developing 1Password

00:15:50.900 --> 00:15:52.760
for the Android
platform, and then

00:15:52.760 --> 00:15:55.010
to optimize it for tablets.

00:15:55.010 --> 00:15:59.310
Then to optimize it for Chrome
OS, and now for foldables.

00:15:59.310 --> 00:16:02.820
And in the process of
doing so, what we've done

00:16:02.820 --> 00:16:05.730
is we've created this
sequence of steps

00:16:05.730 --> 00:16:08.610
where we've iteratively improved
the user experience for the app

00:16:08.610 --> 00:16:10.230
on each successive platform.

00:16:10.230 --> 00:16:12.540
And with each new
platform that we add,

00:16:12.540 --> 00:16:15.720
we then are able to leverage
and build upon the improvements

00:16:15.720 --> 00:16:18.580
from the previous ones.

00:16:18.580 --> 00:16:22.360
When Android apps first
launched on Chrome OS,

00:16:22.360 --> 00:16:24.790
we knew that we wanted to
be there, because it was

00:16:24.790 --> 00:16:28.680
where people were using apps.

00:16:28.680 --> 00:16:33.010
Chrome OS had breakaway success
in the education market.

00:16:33.010 --> 00:16:35.980
It is now a market
leader for laptops.

00:16:35.980 --> 00:16:38.770
And so we wanted to be there
too where our users are.

00:16:38.770 --> 00:16:42.400
And we wanted to provide
a seamless experience that

00:16:42.400 --> 00:16:44.440
provided a responsive
layout, and allowed

00:16:44.440 --> 00:16:49.570
us to take advantage of the
optimizations and the design

00:16:49.570 --> 00:16:55.060
layout that we'd done to
use the larger real estate

00:16:55.060 --> 00:16:58.340
available on tablet devices.

00:16:58.340 --> 00:17:02.320
So what that
necessitated for us was

00:17:02.320 --> 00:17:04.720
to make use of
resizable activity,

00:17:04.720 --> 00:17:06.889
and to allow our
activity to be created.

00:17:12.619 --> 00:17:15.160
So one of the challenges
that we encountered

00:17:15.160 --> 00:17:17.410
was that in the process
of allowing our activity

00:17:17.410 --> 00:17:20.200
to be re-created, we discovered
that while the very first thing

00:17:20.200 --> 00:17:22.540
that happened was it crashed.

00:17:22.540 --> 00:17:24.560
And this happened
as a result of us

00:17:24.560 --> 00:17:29.020
depending on config changes
flags in the manifest.

00:17:29.020 --> 00:17:32.300
So what would happen is we'd
try to resize the window.

00:17:32.300 --> 00:17:35.020
And in the process of
trying to resize the window,

00:17:35.020 --> 00:17:38.440
1Password would crash, because
we were trying to manually

00:17:38.440 --> 00:17:41.410
handle configuration
changes ourselves,

00:17:41.410 --> 00:17:44.175
instead of letting the
framework handle it for us.

00:17:44.175 --> 00:17:45.550
What we did to
resolve that issue

00:17:45.550 --> 00:17:47.260
was to remove those
config changes

00:17:47.260 --> 00:17:49.600
flags from the manifest,
refactor our code,

00:17:49.600 --> 00:17:51.640
so that we weren't
dependent upon configuration

00:17:51.640 --> 00:17:53.410
changes being handled manually.

00:17:53.410 --> 00:17:55.000
And instead, we
allowed the framework

00:17:55.000 --> 00:17:57.400
to do what it was
supposed to do, which is,

00:17:57.400 --> 00:18:00.280
recreate the activity,
and then load

00:18:00.280 --> 00:18:03.310
the appropriate resources
based on the configuration

00:18:03.310 --> 00:18:04.960
parameters.

00:18:04.960 --> 00:18:07.600
That worked to
resolve the crash.

00:18:07.600 --> 00:18:11.800
But unfortunately, it
exposed another issue for us.

00:18:11.800 --> 00:18:14.620
And that issue was
that now 1Password,

00:18:14.620 --> 00:18:17.630
when you would resize the
window, it would lock.

00:18:17.630 --> 00:18:21.970
Now, 1Password needs to lock
in order to protect user data.

00:18:21.970 --> 00:18:24.670
We don't want people to be
able to access your data when

00:18:24.670 --> 00:18:28.820
you're not intending them
to have access to it.

00:18:28.820 --> 00:18:31.330
And so when you leave the
app, or after a certain amount

00:18:31.330 --> 00:18:32.818
of time 1Password will lock.

00:18:32.818 --> 00:18:34.360
But we certainly
didn't intend for it

00:18:34.360 --> 00:18:37.630
to lock every time you
would resize the window.

00:18:37.630 --> 00:18:41.020
It turned out that this was a
side effect of some assumptions

00:18:41.020 --> 00:18:43.890
that we'd made about
the activity lifecycle

00:18:43.890 --> 00:18:46.910
but actually didn't
hold true in practice.

00:18:46.910 --> 00:18:50.050
So we had to go back and we had
to reexamine these assumptions

00:18:50.050 --> 00:18:52.240
and rectify them in our code.

00:18:52.240 --> 00:18:56.590
And once we did, we were able
to deliver an experience that

00:18:56.590 --> 00:19:02.410
was a reflowable, adaptive
experience that took advantage

00:19:02.410 --> 00:19:06.030
of the real estate available on
the device based on the window

00:19:06.030 --> 00:19:09.490
size available.

00:19:09.490 --> 00:19:13.300
So for us, one of the big
lessons and the big takeaways

00:19:13.300 --> 00:19:17.110
was really we just need
to get out of our own way

00:19:17.110 --> 00:19:20.560
and let the framework
do what it does best.

00:19:20.560 --> 00:19:22.510
In the case of
activity resizing,

00:19:22.510 --> 00:19:24.790
we need to stop trying
to handle config changes

00:19:24.790 --> 00:19:27.910
ourselves and actually
let the framework do it.

00:19:27.910 --> 00:19:30.910
In the case of drag and
drop, for example, we just

00:19:30.910 --> 00:19:33.220
needed to add a
few lines of code,

00:19:33.220 --> 00:19:36.520
and append a couple
XML attributes.

00:19:36.520 --> 00:19:39.440
And that took care of itself.

00:19:39.440 --> 00:19:41.500
So be mindful of
assumptions that you're

00:19:41.500 --> 00:19:44.320
making around things like
activity life cycles.

00:19:44.320 --> 00:19:48.370
And be aware of the tools that
are there in the frameworks,

00:19:48.370 --> 00:19:50.110
and Android best
practices that help

00:19:50.110 --> 00:19:52.390
you to deliver the seamless
experience that you

00:19:52.390 --> 00:19:53.635
want to deliver.

00:19:53.635 --> 00:19:55.510
And if your experience
is anything like ours,

00:19:55.510 --> 00:19:58.925
when you follow those
practices, the rest of it

00:19:58.925 --> 00:20:00.550
will fall into place,
and you'll end up

00:20:00.550 --> 00:20:02.950
with an excellent user
experience across multiple form

00:20:02.950 --> 00:20:04.666
factors and environments.

00:20:07.860 --> 00:20:10.260
And with that, I'd like to
welcome Ian from Gameloft

00:20:10.260 --> 00:20:12.490
to talk about their
experience bringing "Asphalt

00:20:12.490 --> 00:20:14.620
9" to more than just phones.

00:20:14.620 --> 00:20:15.120
Thank you.

00:20:15.120 --> 00:20:17.610
[APPLAUSE]

00:20:24.100 --> 00:20:26.140
IAN LOHE CHUNG: Can you hear me?

00:20:26.140 --> 00:20:27.010
My name is Ian.

00:20:27.010 --> 00:20:30.880
I'm a platform lead
developer at Gameloft.

00:20:30.880 --> 00:20:34.090
So first I'll start
with a shameless plug.

00:20:34.090 --> 00:20:36.642
For those of you wondering,
this game is "Asphalt 9."

00:20:36.642 --> 00:20:38.350
So if you haven't
already checked it out,

00:20:38.350 --> 00:20:43.360
I invite you to try it out
on the Google Play Store.

00:20:43.360 --> 00:20:45.280
If you guys were
to ask me how it

00:20:45.280 --> 00:20:47.840
was to develop on Android
a couple of years ago,

00:20:47.840 --> 00:20:50.460
I would have said,
the screen is static.

00:20:50.460 --> 00:20:52.120
The resolution's
never going to change.

00:20:52.120 --> 00:20:55.900
The input method, it's touch,
maybe even multi-touch.

00:20:55.900 --> 00:20:56.850
That's not going to--

00:20:56.850 --> 00:20:57.730
there is no keyboard.

00:20:57.730 --> 00:20:58.750
There's no mouse.

00:20:58.750 --> 00:21:02.070
Like all that stuff,
that's for PC.

00:21:02.070 --> 00:21:04.000
Memory is limited.

00:21:04.000 --> 00:21:06.520
Network, be super careful
with network conditions,

00:21:06.520 --> 00:21:09.040
cause it's really slow.

00:21:09.040 --> 00:21:11.470
But if you were to ask me
the same question today,

00:21:11.470 --> 00:21:16.090
I would say, you would have
to make a game that runs on,

00:21:16.090 --> 00:21:17.050
I have no idea.

00:21:17.050 --> 00:21:20.680
Basically it has to run
on absolutely anything.

00:21:20.680 --> 00:21:23.380
So the way we
approach this is we

00:21:23.380 --> 00:21:28.606
tried to develop for something
we call a device unknown.

00:21:28.606 --> 00:21:31.060
A device unknown means
we can make no assumption

00:21:31.060 --> 00:21:33.430
about the device
we're targeting.

00:21:33.430 --> 00:21:37.750
Device unknown has any
resolution and all resolutions

00:21:37.750 --> 00:21:39.970
at the same time.

00:21:39.970 --> 00:21:44.200
The resolution could even
change at runtime dynamically.

00:21:44.200 --> 00:21:47.260
And the way we'll do
that is our editor

00:21:47.260 --> 00:21:51.340
would allow the game designers
to anchor different UI elements

00:21:51.340 --> 00:21:53.590
to each other, to
the screen edges,

00:21:53.590 --> 00:21:59.360
and whatnot, and even allow
them to resize it in real time

00:21:59.360 --> 00:22:01.090
so they can preview
what the game looks

00:22:01.090 --> 00:22:03.950
like at different resolutions
as they're editing it.

00:22:03.950 --> 00:22:05.950
And this allows
them to be creative

00:22:05.950 --> 00:22:07.690
while the engine
takes care of all

00:22:07.690 --> 00:22:11.080
of the grunt work
behind the scenes.

00:22:11.080 --> 00:22:15.980
This unknown device also
has different input types.

00:22:15.980 --> 00:22:16.660
It has keyboard.

00:22:16.660 --> 00:22:19.300
It has mouse, which
is a single touch.

00:22:19.300 --> 00:22:23.320
Like it's a single input,
as opposed to multi-touch.

00:22:23.320 --> 00:22:25.183
Controllers, touch.

00:22:25.183 --> 00:22:26.350
Like we actually don't know.

00:22:26.350 --> 00:22:29.400
And we try to
support everything.

00:22:29.400 --> 00:22:32.830
And the way we do this is we
try to guess the user's intent

00:22:32.830 --> 00:22:37.300
based on where he is in
the game at the time,

00:22:37.300 --> 00:22:39.233
along with the different
components that

00:22:39.233 --> 00:22:40.400
are connected to the device.

00:22:40.400 --> 00:22:42.670
So, for example, if he has
a controller connected,

00:22:42.670 --> 00:22:44.770
and he's in a race,
chances are he's

00:22:44.770 --> 00:22:48.770
going to want to use
it to play the game.

00:22:48.770 --> 00:22:50.590
We also assume that
everything's dynamic.

00:22:50.590 --> 00:22:53.470
We have no idea what
hardware specs there actually

00:22:53.470 --> 00:22:55.180
are on the device.

00:22:55.180 --> 00:22:58.510
We have, for example,
different GPUs, different CPU

00:22:58.510 --> 00:23:01.820
frequencies, different
amounts of memory.

00:23:01.820 --> 00:23:05.680
And the way we do that is
we'll detect all the specs,

00:23:05.680 --> 00:23:08.560
put it all together,
do some magic,

00:23:08.560 --> 00:23:13.210
and figure out what effects
should be turned on and off,

00:23:13.210 --> 00:23:17.860
or the texture level
that we should be

00:23:17.860 --> 00:23:20.330
making in that particular game.

00:23:20.330 --> 00:23:22.960
And that allows us to
have the high end devices

00:23:22.960 --> 00:23:26.380
at top quality, while the
lower end devices will still

00:23:26.380 --> 00:23:32.905
have super good
response, and a good FPS.

00:23:32.905 --> 00:23:34.660
But it's the same
APK basically that's

00:23:34.660 --> 00:23:36.740
running on all the devices.

00:23:36.740 --> 00:23:40.720
And the final step is that
everything is dynamic.

00:23:40.720 --> 00:23:44.242
So we have no idea what
the screen size is.

00:23:44.242 --> 00:23:46.450
We can't assume that the
screen size at the beginning

00:23:46.450 --> 00:23:47.890
will be the same as at the end.

00:23:47.890 --> 00:23:50.410
And we have no idea when
a user will plug something

00:23:50.410 --> 00:23:53.750
into the device at hand.

00:23:53.750 --> 00:23:55.927
And, of course, we're wrong.

00:23:55.927 --> 00:23:58.260
And we know that, because
there's no way to do all this.

00:23:58.260 --> 00:24:01.000
So we'll always allow the user
to go into the game settings,

00:24:01.000 --> 00:24:04.730
and go and change his
input method, or whatever.

00:24:04.730 --> 00:24:07.150
So basically our
takeaway here was,

00:24:07.150 --> 00:24:11.870
you can no longer develop
for one single device.

00:24:11.870 --> 00:24:13.390
We have to develop
for all devices.

00:24:13.390 --> 00:24:15.057
And assume that you
don't know anything,

00:24:15.057 --> 00:24:19.780
because we have no idea what new
devices will appear tomorrow.

00:24:19.780 --> 00:24:21.250
And now I'll hand
it off to Andrii.

00:24:21.250 --> 00:24:24.652
[APPLAUSE]

00:24:31.470 --> 00:24:32.870
ANDRII KULIAN: Thank you, Ian.

00:24:32.870 --> 00:24:34.270
And hi, everyone.

00:24:34.270 --> 00:24:35.150
I am Andrii.

00:24:35.150 --> 00:24:37.920
I am a software engineer
with Android framework window

00:24:37.920 --> 00:24:38.880
manager team.

00:24:38.880 --> 00:24:41.040
And I work on multi display.

00:24:41.040 --> 00:24:44.550
So foldable phones may
have several screens.

00:24:44.550 --> 00:24:47.790
But you can also find
multi display in cars,

00:24:47.790 --> 00:24:51.180
in phones connected to larger
screens in desktop mode,

00:24:51.180 --> 00:24:53.590
in Chrome OS, and so on.

00:24:53.590 --> 00:24:56.550
And the same best
practices that we implement

00:24:56.550 --> 00:25:00.000
to handle screen size
changes, orientation changes,

00:25:00.000 --> 00:25:02.280
or multi window will
let your app work

00:25:02.280 --> 00:25:03.795
well in all of these use cases.

00:25:06.810 --> 00:25:08.600
Let's start with activities.

00:25:08.600 --> 00:25:11.180
There can be several
ways how one can end up

00:25:11.180 --> 00:25:12.890
on a different display.

00:25:12.890 --> 00:25:16.040
On foldable devices, it
can move between displays

00:25:16.040 --> 00:25:19.040
when the user folds or
unfolds the display.

00:25:19.040 --> 00:25:22.340
And on all platform
versions, a regular start

00:25:22.340 --> 00:25:25.760
from launcher or from
system can create

00:25:25.760 --> 00:25:29.240
a new instance of activity
on a secondary screen.

00:25:29.240 --> 00:25:32.780
Or it can find an existing
one on a different screen

00:25:32.780 --> 00:25:34.740
and move it from there.

00:25:34.740 --> 00:25:37.460
The actual behavior will
depend on the launch mode

00:25:37.460 --> 00:25:39.930
that you define in
Android manifest,

00:25:39.930 --> 00:25:44.000
and also the intent flags and
options that the caller sets

00:25:44.000 --> 00:25:46.010
who starts the activity.

00:25:46.010 --> 00:25:47.850
When moved to a
different screen,

00:25:47.850 --> 00:25:50.970
you should keep in mind that
the following things can happen.

00:25:50.970 --> 00:25:54.230
A context may be
updated, window resized.

00:25:54.230 --> 00:25:56.570
And configuration and
resource may change.

00:25:59.170 --> 00:26:01.250
So let's talk about
context a bit.

00:26:01.250 --> 00:26:04.500
The activity context,
which is a visible entity,

00:26:04.500 --> 00:26:08.190
is different from non
visual application context,

00:26:08.190 --> 00:26:12.180
also available from services
and other non visual components.

00:26:12.180 --> 00:26:14.580
And the context of
a visible entity

00:26:14.580 --> 00:26:18.400
is always adjusted to the
screen area where it is shown.

00:26:18.400 --> 00:26:23.040
So to get the current display
metrics, size, and resources,

00:26:23.040 --> 00:26:26.310
make sure to always use
the current visual context,

00:26:26.310 --> 00:26:27.685
such as activity.

00:26:30.600 --> 00:26:34.680
Also, some system APIs will
get display information

00:26:34.680 --> 00:26:36.810
from the context you provide.

00:26:36.810 --> 00:26:40.260
For example, if you want to make
sure that a toast will show up

00:26:40.260 --> 00:26:44.490
on the same screen as
the current activity,

00:26:44.490 --> 00:26:47.400
it's probably better to
use the activity context.

00:26:47.400 --> 00:26:50.190
And in general, it's
usually wrong to try

00:26:50.190 --> 00:26:53.820
to get display metrics or
resources from non activity

00:26:53.820 --> 00:26:57.090
contexts, because, for
example, application

00:26:57.090 --> 00:26:58.740
is a non visual entity.

00:26:58.740 --> 00:27:01.528
You can get the result
that can be completely

00:27:01.528 --> 00:27:02.820
for a totally different screen.

00:27:06.810 --> 00:27:09.240
In most cases, you can
expect different screens

00:27:09.240 --> 00:27:12.060
on the device to have
different sizes, densities,

00:27:12.060 --> 00:27:13.380
and resolutions.

00:27:13.380 --> 00:27:15.600
And this means that the
activity will probably

00:27:15.600 --> 00:27:17.680
get a configuration change.

00:27:17.680 --> 00:27:21.110
And if it declared to handle
the change in Android manifest,

00:27:21.110 --> 00:27:22.980
it will get a notification.

00:27:22.980 --> 00:27:25.500
If not, it will be relaunched.

00:27:25.500 --> 00:27:27.720
And in some cases,
it may be even better

00:27:27.720 --> 00:27:30.000
to handle the configuration
change yourself,

00:27:30.000 --> 00:27:33.570
because it may result in a
more fluid user experience.

00:27:33.570 --> 00:27:37.540
Configuration also drives the
resources in your application.

00:27:37.540 --> 00:27:39.510
So make sure to update
the user's assets

00:27:39.510 --> 00:27:43.000
and layouts whenever the
configuration changes.

00:27:43.000 --> 00:27:46.510
And if you need to know what
the current display [INAUDIBLE]

00:27:46.510 --> 00:27:50.310
is after some changes
happened onCreate and

00:27:50.310 --> 00:27:52.930
onConfigurationChanged
are good places to check.

00:27:56.820 --> 00:27:59.250
Also, when an activity
moves between screens,

00:27:59.250 --> 00:28:01.770
there can be multiple
configuration values

00:28:01.770 --> 00:28:03.610
that change at the same time.

00:28:03.610 --> 00:28:05.110
Here is an example.

00:28:05.110 --> 00:28:07.890
In addition to size
and density changes,

00:28:07.890 --> 00:28:11.160
screen properties like
orientation, layout,

00:28:11.160 --> 00:28:14.610
and even support for
touch will change as well.

00:28:14.610 --> 00:28:16.590
Any of these, even
a single one, can

00:28:16.590 --> 00:28:19.290
cause an activity relaunch
if you don't declare

00:28:19.290 --> 00:28:20.560
that your activity handles it.

00:28:25.270 --> 00:28:28.070
If the declared launch
mode for an activity

00:28:28.070 --> 00:28:31.880
allows multiple tasks, then
start on the secondary screen

00:28:31.880 --> 00:28:34.340
may create a new
instance of activity.

00:28:34.340 --> 00:28:37.010
For example, in this
case, the caller,

00:28:37.010 --> 00:28:38.990
requested launch
on second display

00:28:38.990 --> 00:28:41.690
with flags, new task,
and multiple task,

00:28:41.690 --> 00:28:46.490
and it's created a new window
of Chrome on the second display.

00:28:46.490 --> 00:28:48.650
It's best for you to check
what kind of experience

00:28:48.650 --> 00:28:51.250
you would like to provide
for your application.

00:28:51.250 --> 00:28:53.610
And if you want to support
something like this,

00:28:53.610 --> 00:28:56.270
consider using a shared source
of data in multiple view

00:28:56.270 --> 00:28:57.320
models.

00:28:57.320 --> 00:29:00.414
And also, take advantage of
other architecture components.

00:29:03.200 --> 00:29:06.380
Multi-resume also applies
to multi screen scenarios.

00:29:06.380 --> 00:29:09.140
And several activities
can receive user input

00:29:09.140 --> 00:29:13.560
at the same time, even if they
are from the same application.

00:29:13.560 --> 00:29:18.770
So keep in mind that activities
could receive input even

00:29:18.770 --> 00:29:21.950
in a non focused state on
previous Android versions.

00:29:21.950 --> 00:29:25.220
You can try that out
if you try to interact

00:29:25.220 --> 00:29:27.960
with both apps in split
screen at the same time.

00:29:27.960 --> 00:29:31.100
And they will both
respond in most cases.

00:29:31.100 --> 00:29:34.070
Focus in the system
usually defines where

00:29:34.070 --> 00:29:36.440
the untargeted input will go.

00:29:36.440 --> 00:29:39.760
For example, where will go the
key events from the keyboard?

00:29:43.770 --> 00:29:46.700
So what if you want to use
those additional screens?

00:29:46.700 --> 00:29:48.580
First step is to
learn what displays

00:29:48.580 --> 00:29:52.490
are available in the system by
checking with display manager.

00:29:52.490 --> 00:29:55.190
The displays may have
different characteristics.

00:29:55.190 --> 00:29:58.490
You can check their flags,
their metrics, and their state

00:29:58.490 --> 00:30:00.530
to find the one you want to use.

00:30:00.530 --> 00:30:02.810
For example, you can
look for a large screen

00:30:02.810 --> 00:30:04.790
to present your media content.

00:30:04.790 --> 00:30:06.620
Or you can filter
out the displays

00:30:06.620 --> 00:30:07.610
that are currently off.

00:30:11.080 --> 00:30:13.960
Sometimes the system may
restrict activity launches

00:30:13.960 --> 00:30:15.190
on certain displays.

00:30:15.190 --> 00:30:17.980
For example, a display
may be private.

00:30:17.980 --> 00:30:20.350
In this case, a call
to start an activity

00:30:20.350 --> 00:30:22.860
will throw a security exception.

00:30:22.860 --> 00:30:26.980
In Q we added a new API to
check if current security

00:30:26.980 --> 00:30:29.410
restrictions will
allow the caller

00:30:29.410 --> 00:30:33.280
to successfully start an
activity on a specific display.

00:30:33.280 --> 00:30:37.030
And finally, you can
launch your activity there

00:30:37.030 --> 00:30:44.290
by using the Activity Options
API added in Android O.

00:30:44.290 --> 00:30:46.690
Let's speak about
new additions in Q.

00:30:46.690 --> 00:30:49.420
We added support for
software keyboard window

00:30:49.420 --> 00:30:51.160
on secondary screens.

00:30:51.160 --> 00:30:55.040
There is still only one software
keyboard window in the system,

00:30:55.040 --> 00:30:57.550
but it can move between screens.

00:30:57.550 --> 00:31:00.820
And move to a different display
is handled in similar ways

00:31:00.820 --> 00:31:03.910
to display change, like
when rotation happens.

00:31:03.910 --> 00:31:07.000
The system will send the
display configuration change

00:31:07.000 --> 00:31:08.470
to the keyboard process.

00:31:08.470 --> 00:31:11.425
And it will update the context
and resources at runtime.

00:31:15.120 --> 00:31:17.520
We also added support
for wallpapers.

00:31:17.520 --> 00:31:20.460
And Android
framework will create

00:31:20.460 --> 00:31:22.650
a separate instance
of wallpaper service

00:31:22.650 --> 00:31:25.240
engine for each display.

00:31:25.240 --> 00:31:27.960
So if you want
your live wallpaper

00:31:27.960 --> 00:31:30.480
to support multiple
screens, make

00:31:30.480 --> 00:31:37.170
sure that the surface of each
engine is drawn independently.

00:31:37.170 --> 00:31:40.080
And you can declare support
for multiple screens

00:31:40.080 --> 00:31:45.000
for your wallpapers by enabling
this in fold paper info XML

00:31:45.000 --> 00:31:45.987
definition.

00:31:48.970 --> 00:31:51.460
Another important addition
is support for launchers

00:31:51.460 --> 00:31:53.200
on secondary screens.

00:31:53.200 --> 00:31:56.410
We added an entire new
category to intent filter

00:31:56.410 --> 00:32:00.490
to provide dedicated activity
for secondary screens.

00:32:00.490 --> 00:32:02.800
Instances of this
activity will be

00:32:02.800 --> 00:32:07.430
used on all displays that have
enabled system decorations.

00:32:07.430 --> 00:32:11.800
One display will have one
instance of such activity.

00:32:11.800 --> 00:32:14.050
It must have a launch
mode that does not

00:32:14.050 --> 00:32:16.160
prevent multiple instances.

00:32:16.160 --> 00:32:20.530
And it is expected to adapt
to different screen sizes.

00:32:20.530 --> 00:32:24.040
A user can set the launcher of
their choice on their device.

00:32:24.040 --> 00:32:25.780
And if the currently
chosen launcher

00:32:25.780 --> 00:32:28.720
has a dedicated activity
for secondary screens,

00:32:28.720 --> 00:32:31.570
it will be put
there by the system.

00:32:31.570 --> 00:32:34.360
The [INAUDIBLE] implementation
now includes this.

00:32:34.360 --> 00:32:36.910
And we also put a sample
multi display launcher

00:32:36.910 --> 00:32:39.820
that showcases how to use some
of these new capabilities.

00:32:43.730 --> 00:32:47.290
So the next question is,
how can you test all this?

00:32:47.290 --> 00:32:50.800
We realize it's often very hard
to get the latest and greatest

00:32:50.800 --> 00:32:52.420
hardware.

00:32:52.420 --> 00:32:57.730
So we added support for foldable
devices in Android Emulator

00:32:57.730 --> 00:33:00.160
so you can start
building right away.

00:33:00.160 --> 00:33:04.480
Currently, there are 7.3"
and 8 inch emulators.

00:33:04.480 --> 00:33:07.390
And we will be adding
more screen sizes

00:33:07.390 --> 00:33:09.670
as we see more devices
launching in the market.

00:33:13.050 --> 00:33:17.160
You can use the [? fold ?]
emulator to test app continuity

00:33:17.160 --> 00:33:19.410
to see how
compatibility mode works

00:33:19.410 --> 00:33:23.120
for apps that declare fixed
orientation or aspect ratio.

00:33:23.120 --> 00:33:25.770
And you can also check
out how the multi-resume

00:33:25.770 --> 00:33:27.587
will impact your application.

00:33:31.790 --> 00:33:34.660
To test multi display
on real devices, in Q

00:33:34.660 --> 00:33:39.180
we added a new developer option
called forced desktop mode.

00:33:39.180 --> 00:33:42.360
When enabled, it will turn
on the system decorations

00:33:42.360 --> 00:33:44.420
on all supported screens.

00:33:44.420 --> 00:33:46.650
And it will also show
mouse pointer there

00:33:46.650 --> 00:33:49.110
instead of the default display.

00:33:49.110 --> 00:33:51.900
Combined with enabling
free form windows, also

00:33:51.900 --> 00:33:54.990
from developer options,
this will create a desktop

00:33:54.990 --> 00:33:57.270
like windowing experience.

00:33:57.270 --> 00:34:00.900
These, and some other
windowing related options,

00:34:00.900 --> 00:34:03.750
usually require a device
reboot to start functioning,

00:34:03.750 --> 00:34:05.730
just so you know.

00:34:05.730 --> 00:34:09.330
On Pixel you can try it using a
simulated screen, which you can

00:34:09.330 --> 00:34:11.739
also find in developer options.

00:34:11.739 --> 00:34:14.790
And if you have a device
which hardware supports

00:34:14.790 --> 00:34:18.480
HDMI, or Display Port
[INAUDIBLE] over USB-C,

00:34:18.480 --> 00:34:20.610
you can test it using the
wired connection as well.

00:34:24.580 --> 00:34:26.080
We also released
a developer guide

00:34:26.080 --> 00:34:27.940
for foldable and
multi screen devices

00:34:27.940 --> 00:34:31.000
today on the Android
Developer website.

00:34:31.000 --> 00:34:33.790
We put the best practices
and in-depth information

00:34:33.790 --> 00:34:37.510
there that we think should help
you making your app work in all

00:34:37.510 --> 00:34:39.110
of these environments.

00:34:39.110 --> 00:34:40.780
So definitely check it out.

00:34:40.780 --> 00:34:43.530
[MUSIC PLAYING]

