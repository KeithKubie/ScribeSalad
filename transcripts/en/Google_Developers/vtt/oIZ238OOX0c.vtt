WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.928
[MUSIC PLAYING]

00:00:07.820 --> 00:00:10.080
TODD KERPELMAN: Hello I/O
Live, Todd Kerpelman here.

00:00:10.080 --> 00:00:12.680
And I am here with Jonathan
Hui, who is a principal software

00:00:12.680 --> 00:00:13.780
engineer over at Nest.

00:00:13.780 --> 00:00:14.390
Hi, Jonathan.

00:00:14.390 --> 00:00:15.380
JONATHAN HUI: Hi.

00:00:15.380 --> 00:00:17.390
TODD KERPELMAN: So what is this
that we've got behind us here,

00:00:17.390 --> 00:00:18.530
this OpenThread stuff?

00:00:18.530 --> 00:00:19.540
What is that all about?

00:00:19.540 --> 00:00:21.920
JONATHAN HUI: Yeah, so
Thread is an open IP

00:00:21.920 --> 00:00:24.980
based mesh networking protocol
for low power connected

00:00:24.980 --> 00:00:26.480
IoT devices.

00:00:26.480 --> 00:00:29.660
OpenThread is an open source
implementation of that protocol

00:00:29.660 --> 00:00:31.040
and it's available at GitHub.

00:00:31.040 --> 00:00:33.290
It's an open development model.

00:00:33.290 --> 00:00:34.700
Everybody can
contribute, anybody

00:00:34.700 --> 00:00:37.310
in the public, not just Nest.

00:00:37.310 --> 00:00:39.470
So what we're showing
here is a bunch

00:00:39.470 --> 00:00:41.930
of devices, 10
different platforms,

00:00:41.930 --> 00:00:46.460
running OpenThread, operating
in a single IPv6 mesh network

00:00:46.460 --> 00:00:48.950
all communicating together.

00:00:48.950 --> 00:00:51.110
We have a Raspberry
Pi in the corner that

00:00:51.110 --> 00:00:55.267
connects this to a Wi-Fi network
and communicates via the cloud.

00:00:55.267 --> 00:00:56.850
All of these devices
are communicating

00:00:56.850 --> 00:00:59.630
their topology information
within that mesh to the cloud.

00:00:59.630 --> 00:01:01.460
And we display that
on this display

00:01:01.460 --> 00:01:03.530
here so you can see
a full connected mesh

00:01:03.530 --> 00:01:06.320
network with the devices here.

00:01:06.320 --> 00:01:09.020
What we're showing here
is a Thread sniffer.

00:01:09.020 --> 00:01:13.670
So this is a standard Wireshark
capturing all the traffic

00:01:13.670 --> 00:01:15.680
operating in this
mesh network that is

00:01:15.680 --> 00:01:18.440
used to maintain this topology.

00:01:18.440 --> 00:01:20.404
TODD KERPELMAN: So if
I were a developer that

00:01:20.404 --> 00:01:22.820
were looking to make a device
that worked in a smart home,

00:01:22.820 --> 00:01:25.100
I could basically take any
of these microprocessors

00:01:25.100 --> 00:01:28.040
here and use
OpenThread as my way

00:01:28.040 --> 00:01:30.380
to make sure that my device
hooks up with everything

00:01:30.380 --> 00:01:31.202
else in the home.

00:01:31.202 --> 00:01:32.660
JONATHAN HUI: That's
exactly right.

00:01:32.660 --> 00:01:36.560
As I mentioned, OpenThread now
supports 10 different radios.

00:01:36.560 --> 00:01:38.450
And in fact, many of
the silicon vendors

00:01:38.450 --> 00:01:41.840
actually provide direct
customer support of OpenThread

00:01:41.840 --> 00:01:42.839
on their radios.

00:01:42.839 --> 00:01:44.630
So I would encourage
you, if you're already

00:01:44.630 --> 00:01:46.880
working with a favorite
silicon vendor of yours,

00:01:46.880 --> 00:01:49.600
to reach out directly
to that silicon vendor

00:01:49.600 --> 00:01:51.260
and ask about OpenThread.

00:01:51.260 --> 00:01:51.800
TODD KERPELMAN:
And what are some

00:01:51.800 --> 00:01:53.780
of the what are some of the
cool features about OpenThread?

00:01:53.780 --> 00:01:55.738
What makes it sort of an
interesting networking

00:01:55.738 --> 00:01:57.052
protocol?

00:01:57.052 --> 00:01:58.760
JONATHAN HUI: The
first is that it really

00:01:58.760 --> 00:02:02.420
supports IP, which means
it's the same technology that

00:02:02.420 --> 00:02:05.736
is used to connect any other
internet connected device.

00:02:05.736 --> 00:02:07.260
And that makes it
really convenient.

00:02:07.260 --> 00:02:09.410
For example, when
you're developing

00:02:09.410 --> 00:02:12.230
using standard Linux, you
can use standard sockets APIs

00:02:12.230 --> 00:02:14.090
to communicate
with your devices.

00:02:14.090 --> 00:02:16.930
But more importantly,
because you're using IP,

00:02:16.930 --> 00:02:19.930
it means you can build solutions
that utilize multiple link

00:02:19.930 --> 00:02:23.570
technologies such as
Wi-Fi, cellular, and Thread

00:02:23.570 --> 00:02:27.230
with a single application
layer communicating end to end.

00:02:27.230 --> 00:02:29.630
You do not have to have
application gateways

00:02:29.630 --> 00:02:32.900
in between, which
often represent

00:02:32.900 --> 00:02:34.327
a single point of failure.

00:02:34.327 --> 00:02:36.660
And with Thread, because
there's no stateful application

00:02:36.660 --> 00:02:40.370
gateways, you can have
multiple connections

00:02:40.370 --> 00:02:42.272
into and out of the network.

00:02:42.272 --> 00:02:43.855
That makes it really
resilient to have

00:02:43.855 --> 00:02:45.114
no single point of failure.

00:02:45.114 --> 00:02:46.530
TODD KERPELMAN:
That is very cool.

00:02:46.530 --> 00:02:48.860
And I notice there's this
QR code here behind me.

00:02:48.860 --> 00:02:49.775
What does that do?

00:02:49.775 --> 00:02:51.860
JONATHAN HUI: Yeah,
so Thread by default

00:02:51.860 --> 00:02:54.409
requires you to have security
enabled, which is actually

00:02:54.409 --> 00:02:55.700
one of the key differentiators.

00:02:55.700 --> 00:02:58.100
And because security
is always enabled,

00:02:58.100 --> 00:03:00.350
you need to have a very
user friendly process

00:03:00.350 --> 00:03:02.695
of getting that device
securely onto the network.

00:03:02.695 --> 00:03:07.010
And so what the QR code does
is it enables a mobile app.

00:03:07.010 --> 00:03:10.170
You just turn it on,
you scan the QR code,

00:03:10.170 --> 00:03:13.250
and it will securely connect
with that joining device

00:03:13.250 --> 00:03:15.290
to provide the security
credentials to get

00:03:15.290 --> 00:03:16.680
that device onto the network.

00:03:16.680 --> 00:03:18.680
TODD KERPELMAN: I think
I've used that when I've

00:03:18.680 --> 00:03:19.940
set up my own Nest devices.

00:03:19.940 --> 00:03:21.170
It makes things
super convenient.

00:03:21.170 --> 00:03:22.086
JONATHAN HUI: Exactly.

00:03:22.086 --> 00:03:24.542
It's very similar to
what we do at Nest.

00:03:24.542 --> 00:03:26.000
In fact, the
commissioning protocol

00:03:26.000 --> 00:03:29.000
was designed following the
principles that we use at Nest.

00:03:29.000 --> 00:03:31.209
And so it really does enable
a great user experience.

00:03:31.209 --> 00:03:32.291
TODD KERPELMAN: Very nice.

00:03:32.291 --> 00:03:34.330
And so what is Nest
doing with OpenThread?

00:03:34.330 --> 00:03:36.190
JONATHAN HUI: Yeah, so
if we move over here,

00:03:36.190 --> 00:03:38.630
Nest is actually
enabling a number

00:03:38.630 --> 00:03:41.150
of products with OpenThread.

00:03:41.150 --> 00:03:44.840
The first is a connected
deadbolt for your door.

00:03:44.840 --> 00:03:46.400
It only communicates via Thread.

00:03:46.400 --> 00:03:49.430
It's got no other kind
of technology with it.

00:03:49.430 --> 00:03:51.770
And because it's using
Thread, it can actually

00:03:51.770 --> 00:03:54.060
last for years on AA batteries.

00:03:54.060 --> 00:03:56.970
And I can do a quick demo here.

00:03:56.970 --> 00:04:01.920
So if I open up my mobile
app, hold down the button,

00:04:01.920 --> 00:04:04.340
we'll see the door
unlock and there it goes.

00:04:04.340 --> 00:04:06.200
And that's all
happening over Thread.

00:04:06.200 --> 00:04:08.750
Of course, the mobile is
communicating over Wi-Fi.

00:04:08.750 --> 00:04:10.740
It goes to a Thread
border router

00:04:10.740 --> 00:04:13.030
to this battery powered device.

00:04:13.030 --> 00:04:15.196
TODD KERPELMAN: Would that
work if my phone were not

00:04:15.196 --> 00:04:16.730
connected to the Wi-Fi?

00:04:16.730 --> 00:04:17.896
JONATHAN HUI: It would work.

00:04:17.896 --> 00:04:20.690
So as I mentioned,
our application layer

00:04:20.690 --> 00:04:23.030
operates over any IPv6 network.

00:04:23.030 --> 00:04:27.140
So it just happens that this
mobile phone is only on Wi-Fi.

00:04:27.140 --> 00:04:29.950
But you know, if it was
connected to cellular

00:04:29.950 --> 00:04:30.951
that would work as well.

00:04:30.951 --> 00:04:32.033
TODD KERPELMAN: Very cool.

00:04:32.033 --> 00:04:33.200
That is very interesting.

00:04:33.200 --> 00:04:35.930
And if I were a developer and I
were interested in finding out

00:04:35.930 --> 00:04:39.630
more about OpenThread to use in
my products, where would I go?

00:04:39.630 --> 00:04:42.410
JONATHAN HUI: Yeah, so we have
a website at OpenThread.io.

00:04:42.410 --> 00:04:46.070
We have our source code
at GitHub.com/OpenThread.

00:04:46.070 --> 00:04:49.457
And you can reach us at Google
Groups at OpenThread-users.

00:04:49.457 --> 00:04:50.540
TODD KERPELMAN: All right.

00:04:50.540 --> 00:04:54.050
So if you're interested in
making your own cool internet

00:04:54.050 --> 00:04:56.090
connected device
that, I don't know,

00:04:56.090 --> 00:04:59.540
does something amazing that
I haven't thought of yet,

00:04:59.540 --> 00:05:02.851
go head on over to OpenThread.io
and check it out for yourself.

00:05:02.851 --> 00:05:04.100
Thank you very much, Jonathan.

00:05:04.100 --> 00:05:05.580
JONATHAN HUI: Thank
you very much.

00:05:05.580 --> 00:05:06.705
TODD KERPELMAN: Bye, y'all.

00:05:06.705 --> 00:05:10.480
[MUSIC PLAYING]

