WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
Let's go through our program and just notice everything we end up using.

00:00:05.000 --> 00:00:08.000
One of the first things we do is call the function write,

00:00:08.000 --> 00:00:12.000
and its argument is based on calling the function factorial of 5,

00:00:12.000 --> 00:00:15.000
so then we have to get up here and start determining if n is equal to 0.

00:00:15.000 --> 00:00:20.000
So function calls are definitely critical to getting the output to this test case correct.

00:00:20.000 --> 00:00:24.000
One of the first things we have to do is look up and see if n is equal to 0,

00:00:24.000 --> 00:00:27.000
and we'll change from 5 to 4 to 3 to 2 to 1 to 0

00:00:27.000 --> 00:00:29.000
depending on which environment frame we're in.

00:00:29.000 --> 00:00:32.000
We will definitely end up doing environment lookups.

00:00:32.000 --> 00:00:35.000
If we can't do them, we don't know what the value of n is,

00:00:35.000 --> 00:00:37.000
so we're going to start getting this wrong.

00:00:37.000 --> 00:00:40.000
Eventually, as time goes by, we're comparing n to 0,

00:00:40.000 --> 00:00:44.000
we're multiplying n by the result of this function call,

00:00:44.000 --> 00:00:46.000
and we're subtracting 1 from n.

00:00:46.000 --> 00:00:48.000
Those are all binary operators.

00:00:48.000 --> 00:00:50.000
The equality check, the multiplication, and the subtraction--

00:00:50.000 --> 00:00:53.000
those are all binary operator expressions.

00:00:53.000 --> 00:00:56.000
So we are testing at least some of our binary operators.

00:00:56.000 --> 00:00:59.000
But for the rest of these elements of our interpreter,

00:00:59.000 --> 00:01:01.000
we're not testing them explicitly.

00:01:01.000 --> 00:01:06.000
Even though we end up calling write, there are no string constants.

00:01:06.000 --> 00:01:09.000
The word here, constant, is very important, like "hello" in this program.

00:01:09.000 --> 00:01:13.000
You could argue that we're building up a dynamic string, 120,

00:01:13.000 --> 00:01:15.000
but that's not a string constant.

00:01:15.000 --> 00:01:18.000
There are also no local variable declarations.

00:01:18.000 --> 00:01:24.000
A local variable declaration is different from a function's formal parameter,

00:01:24.000 --> 00:01:28.000
and this matters because we're trying to find bugs in our interpreter code.

00:01:28.000 --> 00:01:31.000
Since we have different Python code to handle parameters

00:01:31.000 --> 00:01:34.000
than we do for local variable declarations,

00:01:34.000 --> 00:01:37.000
if we mistakenly think they're the same thing,

00:01:37.000 --> 00:01:41.000
we'll have more confidence in our program than we should. We might miss bugs.

00:01:41.000 --> 00:01:44.000
So we're not testing this sort of thing--var temp = 2.

00:01:44.000 --> 00:01:46.000
That's a local variable declaration.

00:01:46.000 --> 00:01:48.000
We don't see anything like that over here.

00:01:48.000 --> 00:01:50.000
Finally, assignment statements.

00:01:50.000 --> 00:01:53.000
There are no assignment statements in this program.

00:01:53.000 --> 00:01:58.000
Now, we'll end up associating with n the value 5 or 4 or 3 or 2 or 1,

00:01:58.000 --> 00:02:00.000
but that's handled by our function call code.

00:02:00.000 --> 00:02:04.000
We don't see anything like this--x = 2--in this input, so we're not testing it.

00:02:04.000 --> 00:02:08.000
So while this is a good test case and it checks many things,

00:02:08.000 --> 00:02:12.000
it does not give us confidence that we've exercised every feature of our interpreter.

00:02:12.000 --> 09:59:59.000
We'd need a few more test cases to do that.

