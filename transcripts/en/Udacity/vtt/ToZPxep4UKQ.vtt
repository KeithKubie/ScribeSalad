WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
The top k algorithm that we have so far.

00:00:03.000 --> 00:00:09.000
We talked about using sorting, which runs in time and log n because you sort the whole list

00:00:09.000 --> 00:00:13.000
and then you can get any top k that you want for any k so it doesn't depend on k.

00:00:13.000 --> 00:00:18.000
The selection and insertion approach is both run in Î˜(nk)

00:00:18.000 --> 00:00:21.000
essentially because we're repeating for each of the elements that we want to get it out

00:00:21.000 --> 00:00:23.000
or repeating something like n work.

00:00:23.000 --> 00:00:30.000
But now, we have a fourth approach, which uses this partitioning idea recursively

00:00:30.000 --> 00:00:37.000
to get an expected running time Î˜(n), which is better and the worst case than sorting

00:00:37.000 --> 00:00:43.000
and better than selection/insertion for any k other than a constant n

00:00:43.000 --> 00:00:45.000
for constant they come up the same.

00:00:45.000 --> 00:00:47.000
This is actually pretty remarkable algorithm.

00:00:47.000 --> 00:00:53.000
I actually haven't found much useful in practice. I guess it's sort of nice to know that it's there.

00:00:53.000 --> 00:00:59.000
The algorithm that I have found very useful in practice is to use the selection/insertion approach

00:00:59.000 --> 00:01:06.000
but to use a different data structure than just a list to do the insertions into and that's a heap.

00:01:06.000 --> 00:01:13.000
And what the heap is going to give us is a running time that is (n log k),

00:01:13.000 --> 00:01:20.000
which is going to be better than sorting except when it ties it if k is or n,

00:01:20.000 --> 00:01:24.000
and it's definitely going to beat the selection/insertion approach.

00:01:24.000 --> 00:01:28.000
It doesn't do as well a partition at this particular problem of finding the top k,

00:01:28.000 --> 00:01:31.000
but it actually is pretty useful for bunch of other things as well

00:01:31.000 --> 00:01:36.000
so let's dive into the whole universe of heaps now.

