WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.529
You take great care when you're buying
an app. to make sure it's good and it's not

00:00:04.529 --> 00:00:09.220
going to ruin your machine and does 
exactly what you want. HTML

00:00:09.220 --> 00:00:14.969
is the ultimate example of what
troubles you get into if you are

00:00:14.969 --> 00:00:21.270
promiscuous, right [laughs]?  And you are 
promiscuous why? Because part of what HTML 
does is you have to

00:00:21.270 --> 00:00:27.189
visit other people's Web sites. And you have
to execute - not your code that you wrote

00:00:27.189 --> 00:00:30.189
- other people's code.

00:00:32.020 --> 00:00:38.860
HTML it's an interpreted system. The customers
want instant gratification and you've got to 

00:00:38.860 --> 00:00:43.350
get cracking. Speed is of the essence. I
think the nub of what we're trying to

00:00:43.350 --> 00:00:50.239
get at is this:  HTML seems to be able to
tolerate your mistakes. But for those of

00:00:50.239 --> 00:00:54.650
you who know a programming language --
Basic, C or whatever, you know they will

00:00:54.650 --> 00:00:59.090
NOT tolerate your mistakes. They won't 
interpret for you, they won't compile a

00:00:59.090 --> 00:01:04.110
program for you, unless it's correct. So
how does this difference come about?  If HTML

00:01:04.110 --> 00:01:10.450
is a language -  it's getting executed - what
is it about it that makes it easy to be

00:01:10.450 --> 00:01:15.920
tolerant? And on the face of it, yes, it's
wonderful - it seems to put my errors

00:01:15.920 --> 00:01:21.100
right! Perhaps we could start off with
our good old friend the paragraph &lt;p&gt;

00:01:21.100 --> 00:01:26.860
And I'm going to just put a piece of
text in here which says "Hello Sean". And even

00:01:26.860 --> 00:01:30.970
though I absolutely don't have to do it
nevertheless I want to do it - I want to close off

00:01:30.970 --> 00:01:35.509
the paragraph. And then I'm going to open
up another one, straightaway afterwards,

00:01:35.509 --> 00:01:42.709
"Goodbye Dave". Once again we close off with a
&lt;/p&gt;. You'll all understand that this is

00:01:42.709 --> 00:01:48.030
a classic use of paragraphs. You put them
in sequence you have first paragraph, second
paragraph, third paragraph. All that kind of

00:01:48.030 --> 00:01:54.289
thing. Does it mean anything
and does it look any different and does

00:01:54.289 --> 00:02:02.450
it do any different if I start messing
about and saying: "I'm not going to sequence

00:02:02.450 --> 00:02:10.750
them, I'm going to fit the second paragraph
inside the first so it's nested, as we

00:02:10.750 --> 00:02:16.860
say. It forms a hierarchy. It's a para
within a para. You can see the difference

00:02:16.860 --> 00:02:22.450
I've opened up a paragraph and I've said "Hello
Sean". I've then opened up another paragraph

00:02:22.450 --> 00:02:27.830
and I've said "This is a nest" just
to hammer it home that the inner one really

00:02:27.830 --> 00:02:33.150
is sitting inside the outer one. And then I
dutifully closed them both off. You might

00:02:33.150 --> 00:02:38.260
think: "Oh! I know what it will do. I might get
'Hello Sean' and then the phrase "This is a

00:02:38.260 --> 00:02:43.120
nest" will be tabbed in and indented. Maybe
that's what it does. So I've tried this

00:02:43.120 --> 00:02:44.769
out in my own

00:02:44.769 --> 00:02:50.370
Firefox browser. And, believe you me, it
doesn't crash; it it just treats it

00:02:50.370 --> 00:02:56.040
exactly as if it was sequential
paragraphs. There's no sign of nesting or

00:02:56.040 --> 00:03:03.610
anything. So if we develop these a little
bit further now, we could say "OK do the &lt;p&gt;

00:03:03.610 --> 00:03:10.769
'Hello Sean' do another &lt;p&gt; 'Goodbye Dave'  
&gt;&gt; Sean: So you're omitting the closing bit is

00:03:10.769 --> 00:03:17.440
that right?
&gt;&gt; DFB: I'm  ommitting the closing of the
paragraphs. Is that acceptable to HTML?

00:03:17.440 --> 00:03:24.390
Yes it is. Nothing was gonna to fault you for missing
out &lt;/p&gt;. And that, if you type that in,

00:03:24.390 --> 00:03:29.670
will look the same as that. It  wants to
put the end-tags in and obviously, in some

00:03:29.670 --> 00:03:32.670
sense, it does. But what's its rule and,
here we go,

00:03:33.680 --> 00:03:38.660
it probably won't do what you want to do.
It does what it finds convenient and what

00:03:38.660 --> 00:03:43.440
it finds convenient is the following rule:
It says "I am going to assume, if you give me a

00:03:43.440 --> 00:03:47.709
second &lt;p&gt; and I'm already inside the
first one I'll just close the first one off".

00:03:47.709 --> 00:03:51.630
How would the browser cope if I sometimes
put my &lt;/p&gt; in and sometimes didn't?

00:03:51.630 --> 00:03:56.459
And the answer is that it will always, as far
as I know, assume that you want a sequence

00:03:56.459 --> 00:04:03.010
and that is what it will impose on
you. What it comes down to is a sort 
of informal theorem,

00:04:03.010 --> 00:04:09.840
something like the following. If you're
trying to be very clever and mend

00:04:09.840 --> 00:04:15.359
somebody's incorrect program then the
problem is that if you have a structure

00:04:15.359 --> 00:04:22.750
that can be 'a sequence of', or it can be 
'a nest of, 'or it can be any any combination

00:04:22.750 --> 00:04:28.740
you could have 'a sequence of nests' or a
'nest of sequences'. But if you once

00:04:28.740 --> 00:04:35.790
start saying they can both co-exist
-- nesting, sequencing -- then you must put

00:04:35.790 --> 00:04:41.410
your end-tags in,  if you want to be unambiguous.
Otherwise how can it be repaired? So in

00:04:41.410 --> 00:04:46.530
other words if both
possibilities are possible then you

00:04:46.530 --> 00:04:51.810
can't have smart behaviour because it cannot
know how to repair it correctly.  And what

00:04:51.810 --> 00:04:57.430
HTML is doing is -- it's not solving the
insoluble -- it's saying I have one view

00:04:57.430 --> 00:05:00.300
of the world and I'm going to
impose it on you and I am NOT going to

00:05:00.300 --> 00:05:07.220
try and be clever. Now that, of course, is
a luxury that HTML has. It basically says 
"I keep things

00:05:07.220 --> 00:05:12.840
simple.  I like things to be more or less
sequential with the minimum of this embedding,

00:05:12.840 --> 00:05:17.440
y' know and all that -- and that's why I can
get away with murder. Now for those of

00:05:17.440 --> 00:05:22.520
you that have written a program and know
that you compile it, or even you

00:05:22.520 --> 00:05:28.550
interpret it - Oh! boy -- it's not going to
try and mend your bad program for you!

00:05:28.550 --> 00:05:31.440
Why is it that things are so much more complicated/

00:05:31.440 --> 00:05:36.160
Well, the answer is you can do more with
these languages and you will want to do more.

00:05:36.160 --> 00:05:43.250
Let me just invent a little piece of
pseudo-code and I'll let you fill

00:05:43.250 --> 00:05:49.479
this in, in either Basic, or C, or Java
or whatever turns you on: printf("Hello Sean\n")

00:05:49.479 --> 00:05:54.479
C programmers will know that if you
want a new line at the end of that, which

00:05:54.479 --> 00:05:59.910
you do - you'd better put a \n at the end.
We're going round the stuff inside this block,

00:05:59.910 --> 00:06:03.770
which is a very simple block -- it's just got
a single print statement in it -- so what

00:06:03.770 --> 00:06:05.580
we'll get is "Hello Sean", "Hello Sean", "Hello Sean",
"Hello Sean".

00:06:05.580 --> 00:06:14.610
ten times. Then I do another loop that
goes around 10 times: "Goodbye Dave\n";

00:06:14.610 --> 00:06:20.520
Let's hope this really would compile ! You can all

00:06:20.520 --> 00:06:27.550
see what's going to happen  when you
execute this. I'm goingto get "Hello Sean" 
"Hello Sean" ten times

00:06:27.550 --> 00:06:32.490
and "Goodbye Dave", "Goodbye Dave", "Goodbye Dave", 
Goodbye Dave" ten times. So that is what happens 
when you have a

00:06:32.490 --> 00:06:40.139
sequence of blocks. But by comparison
with "paragraph" in HTML can you,

00:06:40.139 --> 00:06:46.460
in programming languages, have nested
blocks? You bet you can! Now I'm going 
to say: loop

00:06:46.460 --> 00:06:52.419
around 10 times on the following: 
printf("Hello Sean\n") but now look at what I'm going to

00:06:52.419 --> 00:07:00.740
do I'm now not going to close off that block.
I'm going to nest another loop block

00:07:00.740 --> 00:07:07.110
inside it: "Goodbye Dave". Now let's make sure
our brackets match. I've opened up one, I've opened 

00:07:07.110 --> 00:07:12.779
up two. I've closed this one, I must close
that one. I hope you can all see and

00:07:12.779 --> 00:07:16.849
understand what I'm trying to do here.
I'm trying to do a loop within a loop

00:07:16.849 --> 00:07:21.729
They are nested like sort of Russian dolls,
one inside the other, but the effect of

00:07:21.729 --> 00:07:26.550
this is completely different to the one
I did previously. Here what's going to

00:07:26.550 --> 00:07:32.460
happen is the outermost one goes around 10
times and every time it goes around it

00:07:32.460 --> 00:07:37.789
does a "Hello Sean". But every time it does a
"Hello Sean" it then goes into a nested inner

00:07:37.789 --> 00:07:44.979
loop that does ten "Goodbye Dave"s. So for
every one "Hello Sean" I print out, I'm now getting

00:07:44.979 --> 00:07:52.610
ten "Goodbye Dave"s. Net result; I will
end up with a hundred "Goodbye Dave"s 

00:07:52.610 --> 00:07:58.920
interleaved between ten "Hello Sean"s
whereas, in the earlier case, I

00:07:58.920 --> 00:08:05.140
had 20 print outs. I had ten "Hello Sean"s followed
by ten "Goodbye Dave"s. Lots of students have

00:08:05.140 --> 00:08:10.420
said to me over the years: "The C compiler is 
so clever, why can't it put my programs right for me?"

00:08:10.420 --> 00:08:18.940
And the answer is if you omit your
end-tags, how can it know whether you want

00:08:18.940 --> 00:08:25.150
this one, or this one? They're both
equally valid. This, then, is the absolute

00:08:25.150 --> 00:08:31.960
fundamental conundrum: can you
unambiguously put back the close curly

00:08:31.960 --> 00:08:37.110
braces if users omit them? No you can't
because you've got to work out: do they

00:08:37.110 --> 00:08:41.860
want a sequence, a nest, a nest of
sequences? There's all sorts of places to

00:08:41.860 --> 00:08:46.240
put back the brackets and they have all
sorts of different effects. And that is

00:08:46.240 --> 00:08:48.860
why C, Java

00:08:48.860 --> 00:08:54.120
Basic, whatever, have to be 'theological' and
start laying down the law to you

00:08:54.120 --> 00:09:00.450
"Brackets mismatch" or whatever, whenever you
miss them out. The reason -- let's say it again --

00:09:00.450 --> 00:09:07.030
why HTML can be so tolerant is because
it's so much simpler than C. It is a

00:09:07.030 --> 00:09:11.960
programming language; it is an execution
environment, but it's not been built to

00:09:11.960 --> 00:09:17.120
support deeply-nested hierarchical
structures. So although it seems to be

00:09:17.120 --> 00:09:21.720
tolerant, and although it seems to be
correcting your program, you've  got to

00:09:21.720 --> 00:09:27.380
remember it isn't really doing the
impossible. It's imposing a model on you

00:09:27.380 --> 00:09:32.550
and hoping that the visual effect of what
it does is so stunning that you won't

00:09:32.550 --> 00:09:35.550
notice that it's not quite done what you
hoped it would do.

