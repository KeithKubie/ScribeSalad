WEBVTT
Kind: captions
Language: en

00:00:00.988 --> 00:00:02.964
[MUSIC PLAYING]

00:00:04.614 --> 00:00:06.280
STEVEN SONEFF: All
right, so today we're

00:00:06.280 --> 00:00:08.730
going to be talking about
something that's not

00:00:08.730 --> 00:00:11.400
quite directly perf-related.

00:00:11.400 --> 00:00:15.117
If you were at Colt's
keynote earlier this morning,

00:00:15.117 --> 00:00:16.950
and you could understand
what he was saying,

00:00:16.950 --> 00:00:18.180
he said, yes, perf matters.

00:00:18.180 --> 00:00:19.480
And perf does matter.

00:00:19.480 --> 00:00:21.690
But it doesn't
matter quite so much

00:00:21.690 --> 00:00:24.530
if you can't get the
user you need signed in,

00:00:24.530 --> 00:00:26.634
or signed up to the app
that you're building.

00:00:26.634 --> 00:00:28.050
So that's what
we're going to talk

00:00:28.050 --> 00:00:31.400
about today is how you can
get users signed up or signed

00:00:31.400 --> 00:00:33.370
into your apps a lot
more easily by using

00:00:33.370 --> 00:00:36.030
a variety of different
technologies on Android,

00:00:36.030 --> 00:00:38.810
and ones that are
provided by Google.

00:00:38.810 --> 00:00:41.170
So just to give you a little
bit of an introduction,

00:00:41.170 --> 00:00:41.930
my name is Steven.

00:00:41.930 --> 00:00:44.220
I work on the identity
team at Google.

00:00:44.220 --> 00:00:46.630
And identity at Google
is really about knowing

00:00:46.630 --> 00:00:49.580
who the user is-- so
knowing that it's them

00:00:49.580 --> 00:00:51.260
when they come to
see their Gmail,

00:00:51.260 --> 00:00:52.750
and that it's not the bad guys.

00:00:52.750 --> 00:00:54.400
Keep the bad guys out.

00:00:54.400 --> 00:00:56.949
And over the years,
we've been thinking

00:00:56.949 --> 00:00:58.990
a lot about how to get
the Google user signed in.

00:00:58.990 --> 00:01:01.760
But in doing that, and keeping
all of those Google users

00:01:01.760 --> 00:01:04.160
secure, we've come up with
a pretty strong account

00:01:04.160 --> 00:01:07.306
system that could be very useful
to the third party ecosystem,

00:01:07.306 --> 00:01:08.680
to all of the app
developers that

00:01:08.680 --> 00:01:10.490
are out there who are
thinking about how

00:01:10.490 --> 00:01:13.000
to get their users
signed in or signed up.

00:01:13.000 --> 00:01:14.692
And it's probably
a problem that you

00:01:14.692 --> 00:01:17.150
might have encountered yourself,
if you're building an app.

00:01:17.150 --> 00:01:19.230
I certainly-- before
coming to Google,

00:01:19.230 --> 00:01:21.050
I actually worked at
a bunch of startups.

00:01:21.050 --> 00:01:23.400
And this is, I think, one of
the fundamental problems--

00:01:23.400 --> 00:01:25.275
that if you need to have
some kind of account

00:01:25.275 --> 00:01:27.560
system for your users
to be able to keep track

00:01:27.560 --> 00:01:31.431
of their information, to be able
to personalize content to them,

00:01:31.431 --> 00:01:32.680
you need to know who they are.

00:01:32.680 --> 00:01:36.020
And it can be a real barrier to
actually have somebody sign up

00:01:36.020 --> 00:01:37.490
or sign into a service.

00:01:37.490 --> 00:01:39.840
It's something where you
could have-- in fact,

00:01:39.840 --> 00:01:42.440
a lot of the apps that we
work with have seen that,

00:01:42.440 --> 00:01:45.010
in the order of 50% of the
people who see their login

00:01:45.010 --> 00:01:48.510
screen, just take off or fail
to login in the first place.

00:01:48.510 --> 00:01:50.790
And so that is really
a major problem,

00:01:50.790 --> 00:01:53.184
if 50% of the
potential people who

00:01:53.184 --> 00:01:54.600
are using your app
or your service

00:01:54.600 --> 00:01:56.730
are going to evaporate
right away before they even

00:01:56.730 --> 00:01:58.330
get in the door.

00:01:58.330 --> 00:02:00.320
So thinking about
that, and putting it

00:02:00.320 --> 00:02:02.170
in the perspective of
all these things you

00:02:02.170 --> 00:02:03.586
have to think
about-- performance,

00:02:03.586 --> 00:02:05.470
and getting users
into your apps,

00:02:05.470 --> 00:02:07.730
making sure that is as
frictionless as possible,

00:02:07.730 --> 00:02:10.407
is really one of the key ones
that you have to keep in mind.

00:02:10.407 --> 00:02:12.490
And so that's what we're
going to talk about here.

00:02:12.490 --> 00:02:14.240
Some of the solutions
that you've probably

00:02:14.240 --> 00:02:16.100
heard about before are
things like Google Sign-in.

00:02:16.100 --> 00:02:17.590
If you've wandered
around the web,

00:02:17.590 --> 00:02:20.340
you see these Google Sign-in
buttons all over the place.

00:02:20.340 --> 00:02:22.390
And it is a really
nice solution.

00:02:22.390 --> 00:02:26.030
It certainly gives you the
ability to log in with a click,

00:02:26.030 --> 00:02:28.600
without having to create
more usernames and passwords.

00:02:28.600 --> 00:02:31.960
It's kind of the opportunity to
replace some of these password

00:02:31.960 --> 00:02:34.350
logins that you've
maybe used in the past.

00:02:34.350 --> 00:02:36.330
But it's not the
complete solution,

00:02:36.330 --> 00:02:39.210
in that there are still apps
and sites out there that

00:02:39.210 --> 00:02:41.839
use passwords and
usernames, and we

00:02:41.839 --> 00:02:43.380
have to think about
what to do there.

00:02:43.380 --> 00:02:45.450
And that's one of the
new technologies that I'd

00:02:45.450 --> 00:02:48.110
like to talk about today,
which is this concept of Smart

00:02:48.110 --> 00:02:51.920
Lock for Passwords, or an
API to save login information

00:02:51.920 --> 00:02:55.190
that users have collected
in the past through Chrome,

00:02:55.190 --> 00:02:57.050
through the Password
Manager there, and be

00:02:57.050 --> 00:02:59.877
able to make it available
programmatically on Android.

00:02:59.877 --> 00:03:02.460
So very cool, and I think it's
one of the most exciting things

00:03:02.460 --> 00:03:04.470
that we've seen in
the authentication

00:03:04.470 --> 00:03:06.330
space in a long time.

00:03:06.330 --> 00:03:10.750
So just to get into what
I'll cover today and give you

00:03:10.750 --> 00:03:13.060
the quick overview,
there's Google Sign-in.

00:03:13.060 --> 00:03:14.170
And I'll give you a
little bit of an update

00:03:14.170 --> 00:03:15.253
of what we're doing there.

00:03:15.253 --> 00:03:18.610
But basically, Google Sign-in
is this cross-platform solution.

00:03:18.610 --> 00:03:21.905
It works on iOS and
Android and on the web--

00:03:21.905 --> 00:03:23.780
that it makes signing
in or signing up really

00:03:23.780 --> 00:03:27.000
easy, that it enables access
to lot of other Google APIs,

00:03:27.000 --> 00:03:28.939
so very useful
there, and that it

00:03:28.939 --> 00:03:30.730
can facilitate some
nice things, like being

00:03:30.730 --> 00:03:34.576
able to download an associated
app from your website.

00:03:34.576 --> 00:03:35.950
So that's been
around for awhile.

00:03:35.950 --> 00:03:40.260
And I use this analogy of
comparing the Google Sign-in--

00:03:40.260 --> 00:03:43.440
which is like a replacement for
the different keys you may be

00:03:43.440 --> 00:03:45.670
use to log in to
different services

00:03:45.670 --> 00:03:49.100
around the web-- you can
imagine going from site to site

00:03:49.100 --> 00:03:51.600
and each one presents a door
that you have to unlock.

00:03:51.600 --> 00:03:53.550
You have to have
a different key.

00:03:53.550 --> 00:03:56.860
And over time, you accumulate
a lot of these keys.

00:03:56.860 --> 00:03:59.300
They get pretty
heavy in your pocket.

00:03:59.300 --> 00:04:01.380
And you end up in
this situation where

00:04:01.380 --> 00:04:03.129
it's nice to have
a Google Sign-in,

00:04:03.129 --> 00:04:05.420
but you still have a lot in
your pocket to worry about.

00:04:05.420 --> 00:04:08.110
And to complete
the analogy, then,

00:04:08.110 --> 00:04:10.450
the idea behind a Smart
Lock for Passwords

00:04:10.450 --> 00:04:12.480
is that you can
put all these keys

00:04:12.480 --> 00:04:14.870
on a keychain-- kind of in
the same idea as a password

00:04:14.870 --> 00:04:15.560
manager.

00:04:15.560 --> 00:04:17.850
But by making it a
programmatic interface,

00:04:17.850 --> 00:04:18.870
we can do a lot more.

00:04:18.870 --> 00:04:20.579
That we can build
user interfaces

00:04:20.579 --> 00:04:22.950
that don't even involve
a sign-in screen anymore,

00:04:22.950 --> 00:04:25.810
if you can programmatically
pull login information up

00:04:25.810 --> 00:04:28.220
for a given user.

00:04:28.220 --> 00:04:30.440
So that's one of the
really exciting pieces.

00:04:30.440 --> 00:04:33.630
And I'll show you some pieces of
the UI, and what it looks like,

00:04:33.630 --> 00:04:35.930
and how you can integrate
it in your app, too.

00:04:35.930 --> 00:04:39.230
But in short, it's a
cross-platform, single sign-in

00:04:39.230 --> 00:04:41.880
solution, working on
Android right now,

00:04:41.880 --> 00:04:46.012
and there's APIs in the beta
channel for Chrome, as well.

00:04:46.012 --> 00:04:47.720
Save and retrieve that
login information,

00:04:47.720 --> 00:04:49.650
could be username and
passwords, but also,

00:04:49.650 --> 00:04:52.480
more generally,
as an API, in fact

00:04:52.480 --> 00:04:54.840
saving other kinds of
login-- whether a user signed

00:04:54.840 --> 00:04:57.860
in with Google, or with
Facebook, or Twitter.

00:04:57.860 --> 00:05:00.370
And making that all available
the next time they come back,

00:05:00.370 --> 00:05:01.911
so that they don't
even have to think

00:05:01.911 --> 00:05:03.830
about the new problem
that has been introduced

00:05:03.830 --> 00:05:05.960
by all these other different
ways to login, which

00:05:05.960 --> 00:05:08.700
is to remember which
button was clicked,

00:05:08.700 --> 00:05:11.120
let alone what the username
or the password was,

00:05:11.120 --> 00:05:12.920
and how to link all
of those together.

00:05:12.920 --> 00:05:15.599
Those are really being addressed
by this more broad solution

00:05:15.599 --> 00:05:16.765
in Smart Lock for Passwords.

00:05:20.044 --> 00:05:21.710
We've had quite a bit
of luck, actually,

00:05:21.710 --> 00:05:23.835
with getting partners on
board with this Smart Lock

00:05:23.835 --> 00:05:25.452
for Passwords set of APIs.

00:05:25.452 --> 00:05:27.410
You can see some icons
of a few noteworthy ones

00:05:27.410 --> 00:05:29.050
we launched with
earlier this year--

00:05:29.050 --> 00:05:32.740
Netflix, the "New York
Times," LinkedIn coming soon,

00:05:32.740 --> 00:05:35.960
Orbitz, Eventbrite-- which
you might have even used

00:05:35.960 --> 00:05:38.810
if you had your tickets
through Eventbrite today,

00:05:38.810 --> 00:05:40.874
and Instacart.

00:05:40.874 --> 00:05:43.040
But before we get into the
Smart Lock for Passwords,

00:05:43.040 --> 00:05:45.410
I just wanted to talk
a little bit about what

00:05:45.410 --> 00:05:47.290
the latest on Sign-in is.

00:05:47.290 --> 00:05:50.430
So Google Sign-in-- or in the
past what you probably had

00:05:50.430 --> 00:05:52.680
seen, or had maybe
implemented in your own app,

00:05:52.680 --> 00:05:57.550
is Google+ Sign-in-- so this
has really been changing over

00:05:57.550 --> 00:06:00.630
the last few months, that you
no longer need a Google+ account

00:06:00.630 --> 00:06:03.730
for many things at Google,
and that includes signing in.

00:06:03.730 --> 00:06:07.450
So if you have used the
API in the last few months,

00:06:07.450 --> 00:06:11.750
since we've updated
it on Android, on iOS,

00:06:11.750 --> 00:06:16.320
and on the web, you'll see that
the default set of things that

00:06:16.320 --> 00:06:18.830
your Google Sign-in
implementation asks for, no

00:06:18.830 --> 00:06:20.700
longer includes
Google+ information.

00:06:20.700 --> 00:06:23.410
It's what we call the basic
set of profile scopes.

00:06:23.410 --> 00:06:25.920
So that's things like email,
information about the user's

00:06:25.920 --> 00:06:27.690
name, and profile picture.

00:06:27.690 --> 00:06:31.090
And with that more basic set of
information, you can brand it.

00:06:31.090 --> 00:06:34.000
And by default, it's now branded
just with the plain Google

00:06:34.000 --> 00:06:36.430
logo, the new one
with the colors

00:06:36.430 --> 00:06:39.910
that we put out there
just last month.

00:06:39.910 --> 00:06:43.987
And really a much cleaner
experience for the end user.

00:06:43.987 --> 00:06:46.070
I'll show you exactly what
it looks like in a sec.

00:06:46.070 --> 00:06:47.444
But the general
idea here, again,

00:06:47.444 --> 00:06:50.570
is that this is the gateway
to all of Google's APIs,

00:06:50.570 --> 00:06:52.530
that it's not just
knowing who the user is

00:06:52.530 --> 00:06:56.240
on Google-- the name and the
email address-- but, in fact,

00:06:56.240 --> 00:06:59.470
having access to things
like their contacts,

00:06:59.470 --> 00:07:02.310
being able to pull messages
out of their Gmail,

00:07:02.310 --> 00:07:04.980
store things in Drive,
upload to YouTube,

00:07:04.980 --> 00:07:07.540
anything you can imagine--
payment information,

00:07:07.540 --> 00:07:09.230
and a lot of other
really useful stuff.

00:07:09.230 --> 00:07:11.900
So not just the
authentication piece, but also

00:07:11.900 --> 00:07:13.480
the authorization piece.

00:07:13.480 --> 00:07:16.400
But in talking about that, we
should really see what the UI

00:07:16.400 --> 00:07:19.390
looks like now in this
streamlined model,

00:07:19.390 --> 00:07:22.402
where if you've used a
Google+ Sign-in in the past,

00:07:22.402 --> 00:07:23.860
you might have seen
some of these--

00:07:23.860 --> 00:07:27.520
the older APIs on Android
look like that first screen,

00:07:27.520 --> 00:07:32.620
which harks back to the old days
of Android with the holo theme.

00:07:32.620 --> 00:07:36.660
That's on the way out
with the material world

00:07:36.660 --> 00:07:39.484
these days, the
new API on Android.

00:07:39.484 --> 00:07:41.900
I should actually mention that
this new API is rolling out

00:07:41.900 --> 00:07:46.290
right now, so if you're looking
to build it into your app,

00:07:46.290 --> 00:07:48.590
wait for the next
Play Services update.

00:07:48.590 --> 00:07:50.780
It will be in there.

00:07:50.780 --> 00:07:53.050
And with it, you get
this very nice UI.

00:07:53.050 --> 00:07:57.190
So just to say that this is
like a one tap experience now.

00:07:57.190 --> 00:07:59.970
If you click on the plain
Google Sign-in button,

00:07:59.970 --> 00:08:01.629
you'll get a picker
for which account

00:08:01.629 --> 00:08:02.670
you want to sign in with.

00:08:02.670 --> 00:08:06.120
So that's the basic profile
set of information, very clean,

00:08:06.120 --> 00:08:07.350
one tap.

00:08:07.350 --> 00:08:12.710
And it replaces a lot of what
users had some frustration

00:08:12.710 --> 00:08:14.860
or road bumps in
the process before,

00:08:14.860 --> 00:08:18.930
which is things like
the ugly picker,

00:08:18.930 --> 00:08:21.570
having to create a Google+
account if they didn't have one

00:08:21.570 --> 00:08:22.240
already.

00:08:22.240 --> 00:08:25.250
And then the wall of text
around getting access

00:08:25.250 --> 00:08:27.940
to circles, information,
things like that,

00:08:27.940 --> 00:08:31.660
that for a lot of apps, in
reality, didn't end up using.

00:08:31.660 --> 00:08:36.080
So a barrier to getting into
your app quickly and easily.

00:08:36.080 --> 00:08:37.720
And so that's one
of the big pieces

00:08:37.720 --> 00:08:38.970
that have been addressed here.

00:08:38.970 --> 00:08:41.980
And certainly, if you are
an Android developer who's

00:08:41.980 --> 00:08:44.969
put this into your app, do
take a look at the latest APIs

00:08:44.969 --> 00:08:46.510
as they come out,
because you'll have

00:08:46.510 --> 00:08:48.080
this much streamlined
experience.

00:08:48.080 --> 00:08:50.290
And then you can also
then, what we say,

00:08:50.290 --> 00:08:54.190
incrementally ask for additional
scopes, additional permissions

00:08:54.190 --> 00:08:56.230
to access the
user's Google data--

00:08:56.230 --> 00:08:58.090
things like contacts and so on.

00:08:58.090 --> 00:09:00.060
And be able to do
it then in context.

00:09:00.060 --> 00:09:02.480
So one tap to sign in,
and then at the time

00:09:02.480 --> 00:09:05.420
you need to, access contact
information to send messages,

00:09:05.420 --> 00:09:08.230
for example, you can
do it then, and have

00:09:08.230 --> 00:09:10.700
the user understand what that
is actually being used for.

00:09:10.700 --> 00:09:12.930
So really aligning nicely
with the device level

00:09:12.930 --> 00:09:16.400
permissions that you
might be seeing in Android

00:09:16.400 --> 00:09:19.390
with the Marshmallow release.

00:09:19.390 --> 00:09:22.420
So that's the latest on
Sign-in, so watch out

00:09:22.420 --> 00:09:25.350
for that one coming in the
next couple weeks on Android.

00:09:25.350 --> 00:09:29.230
But to get into the Smart Lock
for Passwords side of things--

00:09:29.230 --> 00:09:32.040
so I mentioned this earlier,
but basically using something

00:09:32.040 --> 00:09:33.930
like a Google Sign-in,
is this opportunity

00:09:33.930 --> 00:09:36.680
to replace the
password-- so have

00:09:36.680 --> 00:09:38.860
a super key that you
can use across the doors

00:09:38.860 --> 00:09:40.780
that you encounter on the web.

00:09:40.780 --> 00:09:43.444
And no longer have to
remember these passwords,

00:09:43.444 --> 00:09:45.860
or come up with new ones for
the sites that you encounter.

00:09:45.860 --> 00:09:47.480
But again, like I
said, not everyone

00:09:47.480 --> 00:09:50.235
uses the Google Sign-in, or
Facebook, or Twitter sign-in.

00:09:50.235 --> 00:09:51.860
There's still a lot
of people out there

00:09:51.860 --> 00:09:54.190
who, for whatever
reason, choose or prefer

00:09:54.190 --> 00:09:55.810
to log in with
passwords, and there

00:09:55.810 --> 00:09:57.780
are a lot of sites that
still use passwords

00:09:57.780 --> 00:09:59.267
for whatever legacy reason.

00:09:59.267 --> 00:10:00.725
They've been around
for a long time

00:10:00.725 --> 00:10:02.460
and they have
established user bases.

00:10:02.460 --> 00:10:07.000
They just prefer having their
own proprietary login system

00:10:07.000 --> 00:10:08.790
with their own
username and passwords.

00:10:08.790 --> 00:10:11.210
And that does
present a problem--

00:10:11.210 --> 00:10:13.800
if you've got that heavy
pocket full of keys,

00:10:13.800 --> 00:10:16.470
then you might think about
ways to lighten the load.

00:10:16.470 --> 00:10:18.900
That if you just went out
there and used one key

00:10:18.900 --> 00:10:20.950
across all the doors that
you came across, then

00:10:20.950 --> 00:10:22.460
you'd only have that
one to worry about.

00:10:22.460 --> 00:10:24.460
Or if you used a really
simple, light one that's

00:10:24.460 --> 00:10:27.499
easy to remember,
an easy password,

00:10:27.499 --> 00:10:29.040
it can certainly
lighten your pocket.

00:10:29.040 --> 00:10:31.500
But it can also introduce
a pretty major security

00:10:31.500 --> 00:10:34.770
vulnerability, which is that if
that one key that you rely on

00:10:34.770 --> 00:10:37.340
gets stolen, gets picked
out of your pocket,

00:10:37.340 --> 00:10:40.090
then people can basically
walk through all of the doors

00:10:40.090 --> 00:10:42.070
that you would encounter.

00:10:42.070 --> 00:10:44.540
And if that key is
really light and simple,

00:10:44.540 --> 00:10:47.430
easy to counterfeit, you
have the same problem.

00:10:47.430 --> 00:10:50.680
So thinking about how
to encourage people

00:10:50.680 --> 00:10:54.500
to move to stronger passwords,
make them easier to use,

00:10:54.500 --> 00:10:58.490
and then eventually move to
ways to move beyond passwords

00:10:58.490 --> 00:11:02.340
is really where we're trying
to get the industry to go.

00:11:02.340 --> 00:11:04.550
And by providing these
APIs to the third party

00:11:04.550 --> 00:11:07.730
ecosystem on Android, we hope
to make that a lot easier.

00:11:07.730 --> 00:11:09.610
So let me get into Smart
Lock for Passwords.

00:11:09.610 --> 00:11:14.420
And again, I'll just motivate it
by saying that this is probably

00:11:14.420 --> 00:11:16.840
one of the things that,
as an app developer,

00:11:16.840 --> 00:11:19.789
you're really conscious of--
that there's a lot of time

00:11:19.789 --> 00:11:21.705
and effort and energy
that goes into marketing

00:11:21.705 --> 00:11:23.950
the apps or the services
that you're building,

00:11:23.950 --> 00:11:26.750
to make people aware of what
it is that you're offering

00:11:26.750 --> 00:11:28.430
to them, and to get
them to download

00:11:28.430 --> 00:11:31.210
the app can be a pretty
expensive and time-consuming

00:11:31.210 --> 00:11:31.820
process.

00:11:31.820 --> 00:11:33.320
And that's just the
beginning, then.

00:11:33.320 --> 00:11:36.530
You have to get them to
open it, to get engaged.

00:11:36.530 --> 00:11:38.850
And that means, potentially,
signing up for an account,

00:11:38.850 --> 00:11:39.980
or signing in.

00:11:39.980 --> 00:11:42.430
And that can be a very,
very friction-full process.

00:11:42.430 --> 00:11:45.140
That as soon as
people see that screen

00:11:45.140 --> 00:11:47.390
where they have to create
yet another account,

00:11:47.390 --> 00:11:50.380
like I said earlier in the
apps that we've worked with,

00:11:50.380 --> 00:11:53.010
there's often 50% or
more bounce rate there,

00:11:53.010 --> 00:11:56.350
that those users are
evaporating right off the bat.

00:11:56.350 --> 00:11:59.480
So much for all the marketing
and the download effort

00:11:59.480 --> 00:12:01.970
that went into that user.

00:12:01.970 --> 00:12:03.420
And that even if
they do sign in,

00:12:03.420 --> 00:12:06.004
it's very often the case that
it wasn't the first attempt that

00:12:06.004 --> 00:12:08.211
succeeded-- that there was
a wrong password in there,

00:12:08.211 --> 00:12:09.850
that you picked on
a different provider

00:12:09.850 --> 00:12:11.680
and it's asking you
to link accounts or do

00:12:11.680 --> 00:12:13.640
something really confusing.

00:12:13.640 --> 00:12:15.010
All problematic.

00:12:15.010 --> 00:12:17.450
And I think the
opportunity here is

00:12:17.450 --> 00:12:19.200
that, to get to that
bottom of the funnel,

00:12:19.200 --> 00:12:21.660
to get the really
engaged user, you

00:12:21.660 --> 00:12:23.200
can use something
like Smart Lock

00:12:23.200 --> 00:12:25.130
to make it completely seamless.

00:12:25.130 --> 00:12:28.290
So to get rid of this
conversion killer,

00:12:28.290 --> 00:12:31.470
and just to make it clear
how this works as an API,

00:12:31.470 --> 00:12:35.070
I'll walk through a bit of
an example with some UI.

00:12:35.070 --> 00:12:37.610
But just to give you
the architecture here.

00:12:37.610 --> 00:12:40.310
Like I mentioned earlier,
one way to think about it

00:12:40.310 --> 00:12:43.210
is that there are
users who have probably

00:12:43.210 --> 00:12:46.490
been using Chrome for years,
and stored a lot of their login

00:12:46.490 --> 00:12:47.570
information.

00:12:47.570 --> 00:12:50.359
I have a lot of my information
in the cloud in this way.

00:12:50.359 --> 00:12:52.150
Basically stored with
their Google accounts

00:12:52.150 --> 00:12:55.290
all the passwords they've gone
and entered to different sites

00:12:55.290 --> 00:12:57.269
that they've come
across on the web.

00:12:57.269 --> 00:12:58.810
And a lot of that
information is very

00:12:58.810 --> 00:13:01.870
valuable-- it would be great
if you could access that

00:13:01.870 --> 00:13:04.660
on Android in a native
app, your associated app,

00:13:04.660 --> 00:13:06.390
with your website.

00:13:06.390 --> 00:13:09.090
And that's what is made
possible here by these APIs

00:13:09.090 --> 00:13:11.410
that we're calling
part of the Smart Lock

00:13:11.410 --> 00:13:14.360
suite of technologies,
to basically make

00:13:14.360 --> 00:13:17.940
sign-in and authentication
wherever you go really easy.

00:13:17.940 --> 00:13:21.150
So it's all backed by this
cloud, Google account stored

00:13:21.150 --> 00:13:24.420
information, login
information, like passwords.

00:13:24.420 --> 00:13:25.990
And let's see how
it works in an app,

00:13:25.990 --> 00:13:27.630
like a publisher
app, for example,

00:13:27.630 --> 00:13:29.169
in the "New York Times."

00:13:29.169 --> 00:13:30.710
So "New York Times"
launched with us.

00:13:30.710 --> 00:13:32.772
And you can imagine a scenario
like this-- you are a "New York

00:13:32.772 --> 00:13:33.710
Times" reader.

00:13:33.710 --> 00:13:36.145
You've set up on your
phone, for example,

00:13:36.145 --> 00:13:38.930
a subscription to
the "New York Times,"

00:13:38.930 --> 00:13:41.580
entered your payment
information, all of [INAUDIBLE]

00:13:41.580 --> 00:13:44.060
a really invested user, and
you've put a lot of effort

00:13:44.060 --> 00:13:46.560
into setting up this
account on your phone.

00:13:46.560 --> 00:13:49.380
Now, the problem is that maybe
you have a second device,

00:13:49.380 --> 00:13:52.099
or you buy a tablet,
something like that-- and now

00:13:52.099 --> 00:13:53.640
you open up the "New
York Times" app,

00:13:53.640 --> 00:13:56.030
and it shows you the
login screen yet again.

00:13:56.030 --> 00:13:57.840
And it could very well
have been the case

00:13:57.840 --> 00:14:00.666
that you set up that "New York
Times" account a long time ago,

00:14:00.666 --> 00:14:02.040
that it could've
been a year ago.

00:14:02.040 --> 00:14:04.520
Now you have no idea what
email address you used,

00:14:04.520 --> 00:14:05.710
what the password was.

00:14:05.710 --> 00:14:07.920
And then it's a very,
very painful experience

00:14:07.920 --> 00:14:09.292
of recovering that.

00:14:09.292 --> 00:14:10.750
For the "New York
Times," they have

00:14:10.750 --> 00:14:13.270
to provide support to all of
these users, who are their paid

00:14:13.270 --> 00:14:16.160
customers, to be able to get
back into their accounts.

00:14:16.160 --> 00:14:17.960
So that's really an opportunity.

00:14:17.960 --> 00:14:21.770
And so if you think about this
new device, or second device,

00:14:21.770 --> 00:14:24.400
you can imagine that
we've done a lot of work

00:14:24.400 --> 00:14:26.260
to get that device
bootstrapped--

00:14:26.260 --> 00:14:28.230
to get all of the
apps and the services

00:14:28.230 --> 00:14:30.620
that you were previously using
on Android available right

00:14:30.620 --> 00:14:31.120
there.

00:14:31.120 --> 00:14:33.840
We call this the Tap
and Go setup experience,

00:14:33.840 --> 00:14:36.200
where all of the
apps are put back

00:14:36.200 --> 00:14:38.894
onto the new device-- they're
even in the same place.

00:14:38.894 --> 00:14:41.185
But again, this fundamental
problem of opening that app

00:14:41.185 --> 00:14:43.240
and seeing that
it's not signed in.

00:14:43.240 --> 00:14:46.551
So now, look what the experience
is with this API integration.

00:14:46.551 --> 00:14:48.550
As soon as that "New York
Times," app is opened,

00:14:48.550 --> 00:14:50.258
there's a notification
here to the user--

00:14:50.258 --> 00:14:52.035
this is a first run experience.

00:14:52.035 --> 00:14:54.410
The text is a little bit hard
to read on the screen here,

00:14:54.410 --> 00:14:55.784
but basically what
it's saying is

00:14:55.784 --> 00:14:57.902
that you've been signed
back in automatically

00:14:57.902 --> 00:14:59.860
with information that
you've saved with Google.

00:14:59.860 --> 00:15:02.450
So the last time you used
this on an Android device,

00:15:02.450 --> 00:15:06.180
you opted in to save whatever
login information that you

00:15:06.180 --> 00:15:09.050
input, and now it's been
retrieved programmatically

00:15:09.050 --> 00:15:10.260
by the app.

00:15:10.260 --> 00:15:13.240
The app is able to look at
what kind of login information

00:15:13.240 --> 00:15:15.110
is available for
this user, and then

00:15:15.110 --> 00:15:18.236
be able to basically use it
to skip the login screen.

00:15:18.236 --> 00:15:19.860
So just think about
that for a second--

00:15:19.860 --> 00:15:21.542
that it's not just
the experience

00:15:21.542 --> 00:15:23.500
that you've seen in
Chrome, where your username

00:15:23.500 --> 00:15:25.570
and password is filled
in, and the user still

00:15:25.570 --> 00:15:27.300
has to find the login page.

00:15:27.300 --> 00:15:29.520
It's that this user
just opens up the app,

00:15:29.520 --> 00:15:31.710
and they're in, just like that.

00:15:31.710 --> 00:15:33.960
And then of course, being
the cross-platform solution,

00:15:33.960 --> 00:15:35.940
you can think about
other scenarios

00:15:35.940 --> 00:15:37.530
where this is really powerful.

00:15:37.530 --> 00:15:40.240
So let's use Eventbrite
for a second example.

00:15:40.240 --> 00:15:42.010
And like I said
earlier, Eventbrite

00:15:42.010 --> 00:15:44.790
was one of the ticketing
apps I think for this event,

00:15:44.790 --> 00:15:47.820
and probably for a lot of
others that you may encounter.

00:15:47.820 --> 00:15:50.620
And maybe this time you start
on the web, where you actually

00:15:50.620 --> 00:15:53.020
made the purchase of tickets,
or something like that.

00:15:53.020 --> 00:15:56.050
And you could very well
have been an Eventbrite user

00:15:56.050 --> 00:15:59.100
for a long time in Chrome,
and over the years, come

00:15:59.100 --> 00:16:04.140
to save passwords for
sites like Eventbrite

00:16:04.140 --> 00:16:05.645
in the Chrome Password Manager.

00:16:05.645 --> 00:16:07.020
And if you've
signed into Chrome,

00:16:07.020 --> 00:16:09.530
then you've basically synced
all of this information

00:16:09.530 --> 00:16:10.620
up to the cloud.

00:16:10.620 --> 00:16:12.460
You've saved it with
your Google account.

00:16:12.460 --> 00:16:14.420
And if you go to another
device with Chrome,

00:16:14.420 --> 00:16:16.720
it'll very helpfully
fill it in for you.

00:16:16.720 --> 00:16:18.660
But of course, you
end up in an app.

00:16:18.660 --> 00:16:20.586
And so maybe you're
in the line here,

00:16:20.586 --> 00:16:21.960
and you need to
show your ticket.

00:16:21.960 --> 00:16:23.110
Everybody's waiting behind you.

00:16:23.110 --> 00:16:24.693
And if you open up
the app and realize

00:16:24.693 --> 00:16:26.860
that you need to log
in to get that ticket,

00:16:26.860 --> 00:16:30.454
it can be pretty stressful to
type that in with your thumbs

00:16:30.454 --> 00:16:32.370
while everyone's waiting,
and hope that you've

00:16:32.370 --> 00:16:33.640
got the right password.

00:16:33.640 --> 00:16:35.356
So the experience
now, if you just

00:16:35.356 --> 00:16:37.230
open up the app with
this integration in it--

00:16:37.230 --> 00:16:38.646
and you can try
this out yourself.

00:16:38.646 --> 00:16:40.800
You might already be
signed into Eventbrite,

00:16:40.800 --> 00:16:43.730
but if you uninstall
and reinstall it,

00:16:43.730 --> 00:16:46.470
you can actually see how it will
just sign you in automatically.

00:16:46.470 --> 00:16:48.345
It will give you this
blue bar at the bottom.

00:16:48.345 --> 00:16:50.880
It says your login information.

00:16:50.880 --> 00:16:52.800
And from that point
on, again, you've

00:16:52.800 --> 00:16:55.690
basically just skipped
the entire login flow.

00:16:55.690 --> 00:16:57.290
And as an app
developer, you can think

00:16:57.290 --> 00:16:58.790
about how valuable
this is, that you

00:16:58.790 --> 00:17:02.400
can skip all of the warm
welcomes and the things

00:17:02.400 --> 00:17:05.510
that are just getting in the way
of your really engaged and most

00:17:05.510 --> 00:17:07.609
valuable users getting
to their content.

00:17:10.280 --> 00:17:12.030
OK, so that's Eventbrite.

00:17:12.030 --> 00:17:14.740
And let's walk through
maybe one more example.

00:17:14.740 --> 00:17:17.030
So think about moving
in the other direction,

00:17:17.030 --> 00:17:19.520
and thinking about some of
the other powerful things

00:17:19.520 --> 00:17:20.819
that this API can do.

00:17:20.819 --> 00:17:25.250
So suppose we're setting up
your flights or your travel

00:17:25.250 --> 00:17:27.540
information to the
Big Android BBQ.

00:17:27.540 --> 00:17:29.130
And in order to do
that, you had to,

00:17:29.130 --> 00:17:30.990
of course, go to
a travel website,

00:17:30.990 --> 00:17:33.440
and probably look up
some flight information,

00:17:33.440 --> 00:17:35.680
plan an itinerary,
that kind of thing.

00:17:35.680 --> 00:17:38.410
One of the big ones out there
that I like using is Orbitz,

00:17:38.410 --> 00:17:40.650
and we've got them on board
with this API, as well.

00:17:40.650 --> 00:17:41.890
And the idea here,
then, is that you

00:17:41.890 --> 00:17:43.670
could start all of
your travel planning,

00:17:43.670 --> 00:17:45.480
do all of your
research on mobile--

00:17:45.480 --> 00:17:47.320
on a phone or a tablet.

00:17:47.320 --> 00:17:48.990
And then you can
save it and use it

00:17:48.990 --> 00:17:50.890
in Chrome or on other platforms.

00:17:50.890 --> 00:17:52.602
But there's more
to it than that.

00:17:52.602 --> 00:17:54.060
With this API, it's
actually pretty

00:17:54.060 --> 00:17:56.890
powerful in that there's more
than just the save and retrieve

00:17:56.890 --> 00:17:57.390
API.

00:17:57.390 --> 00:17:59.410
There's another one
that we provide,

00:17:59.410 --> 00:18:03.562
also coming out in the
update in a week or two,

00:18:03.562 --> 00:18:05.270
the version that's
rolling out right now.

00:18:05.270 --> 00:18:08.120
It's basically this ability
to help the user sign up

00:18:08.120 --> 00:18:09.850
in the first place.

00:18:09.850 --> 00:18:11.680
And so how this
works is basically

00:18:11.680 --> 00:18:15.647
if the person has saved their
login information for a variety

00:18:15.647 --> 00:18:18.230
of different apps and sites, and
they've got a Google account,

00:18:18.230 --> 00:18:20.060
then we know some
information about them.

00:18:20.060 --> 00:18:22.520
We know which email addresses
they use, the different ways

00:18:22.520 --> 00:18:23.480
that they log in.

00:18:23.480 --> 00:18:25.460
And we can present
to the end user

00:18:25.460 --> 00:18:29.040
basically this dialogue at the
time that they need to sign it.

00:18:29.040 --> 00:18:31.970
You can have them pick--
if your system is based

00:18:31.970 --> 00:18:34.970
on email addresses or on
phone numbers-- basically

00:18:34.970 --> 00:18:38.120
have them pick the information
that they need to sign in with.

00:18:38.120 --> 00:18:40.404
So the email address
that they would prefer.

00:18:40.404 --> 00:18:42.070
And the nice thing
about this, if you've

00:18:42.070 --> 00:18:44.990
been working with M or
permissions on Marshmallow,

00:18:44.990 --> 00:18:48.030
is that this dialog calling
into the Play Services

00:18:48.030 --> 00:18:50.585
doesn't actually require
any device permissions.

00:18:50.585 --> 00:18:52.460
So now you've got
something very, very useful

00:18:52.460 --> 00:18:54.668
here, that you don't need
to ask for or get accounts,

00:18:54.668 --> 00:18:57.990
or don't need to ask for phone
number permission anymore.

00:18:57.990 --> 00:19:00.870
You can have the user give you
that information by calling

00:19:00.870 --> 00:19:02.540
into a Play Services API.

00:19:02.540 --> 00:19:04.101
So they pick that email address.

00:19:04.101 --> 00:19:05.850
And then, in fact, if
you think about some

00:19:05.850 --> 00:19:08.390
of the optimizations to
your app that you could do,

00:19:08.390 --> 00:19:10.880
you could actually put the
user into the right flow,

00:19:10.880 --> 00:19:12.580
if they're an
existing user, know

00:19:12.580 --> 00:19:14.470
that they need to
sign back in, know

00:19:14.470 --> 00:19:17.250
how they should be logging
in for that email address,

00:19:17.250 --> 00:19:18.140
for example.

00:19:18.140 --> 00:19:21.490
Or you can intelligently put
them into a sign-up flow.

00:19:21.490 --> 00:19:24.400
So in the case of this
example, let's say

00:19:24.400 --> 00:19:28.810
that we'll just do an account
creation here, or sign

00:19:28.810 --> 00:19:30.250
into an existing account.

00:19:30.250 --> 00:19:33.020
So we have to put in the
username and password.

00:19:33.020 --> 00:19:37.190
So let's just suppose
it's a password account.

00:19:37.190 --> 00:19:38.970
But that said, you
could do very well

00:19:38.970 --> 00:19:42.250
the same thing for the other
different types of login.

00:19:42.250 --> 00:19:46.555
That if the user were to sign in
with Google, or with Facebook,

00:19:46.555 --> 00:19:48.180
you have that
opportunity, once they've

00:19:48.180 --> 00:19:52.570
entered this information, to
save that pointer, basically,

00:19:52.570 --> 00:19:54.369
that it was a Facebook
or a Google sign in,

00:19:54.369 --> 00:19:56.410
and that's what you should
trigger the next time.

00:19:56.410 --> 00:19:59.020
So we'll take a look at
how that looks in a sec.

00:19:59.020 --> 00:20:00.960
But basically, at the
point that they've

00:20:00.960 --> 00:20:03.427
entered this information,
they get a prompt that says,

00:20:03.427 --> 00:20:05.760
would you like to save the
password that you've entered?

00:20:05.760 --> 00:20:07.855
This is the opt-in
to basically store

00:20:07.855 --> 00:20:09.300
the information with Google.

00:20:09.300 --> 00:20:11.490
It's very similar in
functionality to what you've

00:20:11.490 --> 00:20:14.370
probably seen in Chrome, where
there's a bubble that pops up

00:20:14.370 --> 00:20:16.130
and there's a save
and no thanks.

00:20:16.130 --> 00:20:19.240
Same idea here, that they opt
in to save that information

00:20:19.240 --> 00:20:20.600
to the Google account.

00:20:20.600 --> 00:20:23.100
And then once it's stored in
the cloud, then it's available.

00:20:23.100 --> 00:20:25.058
It's synced across all
the different platforms.

00:20:25.058 --> 00:20:26.170
It's synced to Chrome.

00:20:26.170 --> 00:20:29.180
And then in fact,
if you go to Chrome,

00:20:29.180 --> 00:20:31.020
you can see that
information filled in.

00:20:31.020 --> 00:20:33.720
So you can try this out
yourself in the Orbitz app.

00:20:33.720 --> 00:20:36.330
It's live along with the other
partners, basically the ability

00:20:36.330 --> 00:20:38.340
to go from one
platform to the other,

00:20:38.340 --> 00:20:41.670
have that information fill
in using the existing Chrome

00:20:41.670 --> 00:20:42.750
Password Manager.

00:20:42.750 --> 00:20:44.710
But in fact, there's
even better stuff coming,

00:20:44.710 --> 00:20:46.842
that in the Chrome
beta channel right now,

00:20:46.842 --> 00:20:48.300
we've been working
with a community

00:20:48.300 --> 00:20:50.490
to basically put a
spec out there, a web

00:20:50.490 --> 00:20:54.470
spec, that enables password
management, or credential

00:20:54.470 --> 00:20:57.140
management, more generally,
as a programmatic API

00:20:57.140 --> 00:20:58.300
in the browser.

00:20:58.300 --> 00:21:01.410
So if you read up on the
spec, navigator.credentials,

00:21:01.410 --> 00:21:04.120
you can check for
availability of that API

00:21:04.120 --> 00:21:07.640
in the browser you're using
coming to Chrome pretty soon.

00:21:07.640 --> 00:21:09.940
And basically, if
that API is available,

00:21:09.940 --> 00:21:12.490
then you can do the same
programmatic functionality

00:21:12.490 --> 00:21:14.750
that I've described on
Android in the browser.

00:21:14.750 --> 00:21:17.470
So imagine going
from your Android app

00:21:17.470 --> 00:21:20.430
to the Chrome on
the same device,

00:21:20.430 --> 00:21:22.730
and having those two
in sync, because you

00:21:22.730 --> 00:21:24.410
know the user in both places.

00:21:24.410 --> 00:21:26.610
Or going to another
device altogether,

00:21:26.610 --> 00:21:28.560
where this person
potentially has never

00:21:28.560 --> 00:21:30.850
visited your site before,
but since the Google

00:21:30.850 --> 00:21:33.299
account is there, you can
do an automatic sign-in.

00:21:33.299 --> 00:21:35.590
So they could show up through
search results, something

00:21:35.590 --> 00:21:38.847
like that, and have a
completely seamless experience.

00:21:38.847 --> 00:21:40.680
And that really highlights
one of the values

00:21:40.680 --> 00:21:44.070
here that I think makes
this interesting to Google,

00:21:44.070 --> 00:21:47.000
and to the ecosystem as a
whole-- is that this just

00:21:47.000 --> 00:21:50.930
enables the end user who
doesn't even really understand

00:21:50.930 --> 00:21:54.450
the concept of saving credential
information, or how it works,

00:21:54.450 --> 00:21:56.390
and just give them this
seamless experience

00:21:56.390 --> 00:21:57.474
as they go across the web.

00:21:57.474 --> 00:21:59.348
Whether they're coming
through search results

00:21:59.348 --> 00:22:02.370
or they're going to your website
directly, their state is there,

00:22:02.370 --> 00:22:04.110
and they're put into
the place that they

00:22:04.110 --> 00:22:06.290
need to be-- pick up
right where they left off,

00:22:06.290 --> 00:22:08.270
and the ability to
re-engage and give them

00:22:08.270 --> 00:22:10.850
the best experience possible.

00:22:10.850 --> 00:22:13.900
So that's an overview of
how basically the UI works,

00:22:13.900 --> 00:22:18.410
and how it looks in apps that
you might see out there right

00:22:18.410 --> 00:22:18.910
now.

00:22:18.910 --> 00:22:21.140
In fact, I just
looked up this morning

00:22:21.140 --> 00:22:23.090
who's using the API right now.

00:22:23.090 --> 00:22:26.130
And I already showed you
some examples of big ones

00:22:26.130 --> 00:22:28.640
like Netflix, with their
TV app coming out as well,

00:22:28.640 --> 00:22:31.090
the idea that you can sign
in on Android or Chrome

00:22:31.090 --> 00:22:33.694
and be signed in on
Android TV, as well.

00:22:33.694 --> 00:22:34.610
So that's pretty cool.

00:22:34.610 --> 00:22:36.734
And "Times," and Eventbrite,
Orbitz, Instacart,

00:22:36.734 --> 00:22:39.150
other-- but some nice big ones
that have launched recently

00:22:39.150 --> 00:22:42.900
are TripAdvisor, Overstock,
Fancy, Gold Star--

00:22:42.900 --> 00:22:44.900
another ticketing app--
and some big ones coming

00:22:44.900 --> 00:22:48.710
soon like LinkedIn,
TuneIn, Evernote, Groupon,

00:22:48.710 --> 00:22:50.280
Ticketmaster.

00:22:50.280 --> 00:22:52.030
And lots more
internationally, too-- ones

00:22:52.030 --> 00:22:56.050
like eBay's properties around
the world, all of these apps

00:22:56.050 --> 00:22:58.210
and sites basically
leveraging this opportunity

00:22:58.210 --> 00:23:01.195
to keep their user signed in.

00:23:01.195 --> 00:23:03.320
So let me talk a little
bit about what you actually

00:23:03.320 --> 00:23:05.900
need to do to put this
into the app or the site

00:23:05.900 --> 00:23:06.960
that you're building.

00:23:06.960 --> 00:23:08.400
So I'll focus on
the Android side

00:23:08.400 --> 00:23:10.570
today, since we're at an
Android developer conference.

00:23:10.570 --> 00:23:12.486
And if you'd like to
find out more about this,

00:23:12.486 --> 00:23:14.110
we're going to run
a codelab tomorrow.

00:23:14.110 --> 00:23:16.340
So in fact, what I'll
show you in a sec

00:23:16.340 --> 00:23:17.820
here is that it's pretty simple.

00:23:17.820 --> 00:23:19.431
It's just a couple of API calls.

00:23:19.431 --> 00:23:21.180
And you could probably
come to the session

00:23:21.180 --> 00:23:22.940
tomorrow, and get it
implemented in your app.

00:23:22.940 --> 00:23:25.579
So if there's anything that you
take away from the conference,

00:23:25.579 --> 00:23:26.620
this might be a good one.

00:23:26.620 --> 00:23:30.730
You can get this very high ROI,
like very, very big improvement

00:23:30.730 --> 00:23:32.920
to the login flow
of your app by just

00:23:32.920 --> 00:23:34.460
adding a few lines of code.

00:23:34.460 --> 00:23:37.160
So the first thing you need
is Play Services, the latest

00:23:37.160 --> 00:23:38.307
version.

00:23:38.307 --> 00:23:40.390
So many of you probably
already have Play Services

00:23:40.390 --> 00:23:42.770
in your app-- probably
wouldn't be too big

00:23:42.770 --> 00:23:45.100
an issue to move over
to the latest version.

00:23:45.100 --> 00:23:46.830
And then from
there, basically how

00:23:46.830 --> 00:23:50.020
it works is when the app
starts, you call into the API

00:23:50.020 --> 00:23:52.430
and you say, hey, are
there any credentials

00:23:52.430 --> 00:23:54.817
saved for the current
users on this device?

00:23:54.817 --> 00:23:57.150
And so, of course, this is
backed by the Google account.

00:23:57.150 --> 00:23:59.817
And on Android, the
vast majority of people

00:23:59.817 --> 00:24:01.400
are signed in with
the Google account.

00:24:01.400 --> 00:24:03.750
They have the ability to
store this information.

00:24:03.750 --> 00:24:06.257
And in fact, if they've already
saved something in Chrome,

00:24:06.257 --> 00:24:08.340
it could very well be the
case that even if you're

00:24:08.340 --> 00:24:10.680
launching this integration
in your Android app

00:24:10.680 --> 00:24:13.920
anew, that they already have
something saved from Chrome.

00:24:13.920 --> 00:24:18.040
We've seen in the order of 10%
to 15% just right off the bat

00:24:18.040 --> 00:24:20.144
get an automatic
sign-in experience.

00:24:20.144 --> 00:24:21.060
So that's pretty cool.

00:24:21.060 --> 00:24:23.280
So what you do is
you call request,

00:24:23.280 --> 00:24:25.954
you wait for a callback, and
then you look at the result.

00:24:25.954 --> 00:24:28.370
And the result could be a
couple different scenarios here,

00:24:28.370 --> 00:24:29.350
that I'll walk through.

00:24:29.350 --> 00:24:31.590
There's either exactly
one credential available,

00:24:31.590 --> 00:24:33.900
and this is the auto
sign-in scenario.

00:24:33.900 --> 00:24:37.530
The idea being that you get
a successful result back,

00:24:37.530 --> 00:24:40.930
you look inside and see what
kind of credential it was.

00:24:40.930 --> 00:24:44.100
I mentioned earlier that it
could very well be the case

00:24:44.100 --> 00:24:47.080
that it's not just a
username password credential,

00:24:47.080 --> 00:24:49.140
it could the fact
that they've signed

00:24:49.140 --> 00:24:50.620
in with Google or Facebook.

00:24:50.620 --> 00:24:52.710
The token for those
kind of sign-ins

00:24:52.710 --> 00:24:55.650
isn't actually stored in the
API, it's just a pointer.

00:24:55.650 --> 00:24:58.420
It says ah, this user signed
in with Facebook last time,

00:24:58.420 --> 00:24:59.990
you should trigger
the Facebook flow

00:24:59.990 --> 00:25:03.280
and make sure to have Facebook
validate, or Google validate,

00:25:03.280 --> 00:25:07.310
or Twitter validate that this
is the same user as before.

00:25:07.310 --> 00:25:10.450
So that's the kind of scenario
for a so-called federated

00:25:10.450 --> 00:25:11.784
or identity provider login.

00:25:11.784 --> 00:25:13.200
But then, of course,
there's still

00:25:13.200 --> 00:25:16.600
the scenario where this person
logged in with a password.

00:25:16.600 --> 00:25:18.350
And then you simply
get the password back,

00:25:18.350 --> 00:25:19.766
and you can imagine
the experience

00:25:19.766 --> 00:25:21.390
for an automatic
sign-in is basically

00:25:21.390 --> 00:25:23.930
filling out the fields for
them, and tapping the button.

00:25:23.930 --> 00:25:25.300
But the nice thing there
is that you don't even

00:25:25.300 --> 00:25:27.174
need to show them that
UI-- you can hide this

00:25:27.174 --> 00:25:28.830
behind the splash
screen of your app.

00:25:28.830 --> 00:25:30.570
And all they see is
the nice blue bar

00:25:30.570 --> 00:25:31.810
on top of the splash screen.

00:25:31.810 --> 00:25:33.268
And then the next
view that they've

00:25:33.268 --> 00:25:35.720
got after that is the
signed-in state-- picking up

00:25:35.720 --> 00:25:37.800
wherever they left off
from the last session

00:25:37.800 --> 00:25:40.450
or the last device.

00:25:40.450 --> 00:25:42.956
So you do have to think about
a couple of corner cases.

00:25:42.956 --> 00:25:44.580
So one of the common
ones is if someone

00:25:44.580 --> 00:25:46.050
has multiple credentials saved.

00:25:46.050 --> 00:25:48.339
For example, this could
be a shared device,

00:25:48.339 --> 00:25:49.880
where you have
multiple people signed

00:25:49.880 --> 00:25:54.140
in-- they've saved information
to different accounts.

00:25:54.140 --> 00:25:55.990
And the idea here
is that we need

00:25:55.990 --> 00:25:57.650
to have some disambiguation.

00:25:57.650 --> 00:26:00.460
That the person who's
seeing this screen,

00:26:00.460 --> 00:26:03.280
the login experience,
is that they'll actually

00:26:03.280 --> 00:26:06.820
have to pick between the
two or more credentials.

00:26:06.820 --> 00:26:09.900
It's also the scenario that
if they, for their accountant,

00:26:09.900 --> 00:26:12.840
have disabled automatic sign-in,
one of the Google settings

00:26:12.840 --> 00:26:15.370
there-- not the
default, but there

00:26:15.370 --> 00:26:18.510
are a few people who want to
have that level of control,

00:26:18.510 --> 00:26:21.470
which is nice-- be able
to pick the credential

00:26:21.470 --> 00:26:23.680
that they want to sign in with.

00:26:23.680 --> 00:26:26.910
And to detect that in
the code you write,

00:26:26.910 --> 00:26:29.100
you basically just
check for this state,

00:26:29.100 --> 00:26:30.150
resolution required.

00:26:30.150 --> 00:26:32.730
And the result
that you get back,

00:26:32.730 --> 00:26:34.220
if it's resolution
required, then

00:26:34.220 --> 00:26:37.440
you can fire off an intent
at whatever point in your UI

00:26:37.440 --> 00:26:38.280
fits in.

00:26:38.280 --> 00:26:40.250
And then the idea is that
you'll be called back

00:26:40.250 --> 00:26:42.830
when the user picks one
of the saved credentials.

00:26:42.830 --> 00:26:45.280
Or they could very well cancel,
and create a new account,

00:26:45.280 --> 00:26:48.160
something like that.

00:26:48.160 --> 00:26:50.204
So then, under the
scenario that there's

00:26:50.204 --> 00:26:51.620
nothing saved in
the API, you have

00:26:51.620 --> 00:26:54.020
to think-- going back
to that Orbitz example

00:26:54.020 --> 00:26:55.850
that we talked about--
that what do you

00:26:55.850 --> 00:26:57.470
do if there's nothing saved?

00:26:57.470 --> 00:27:00.160
And a nice thing here
is that this is just

00:27:00.160 --> 00:27:03.220
an API on top of whatever
you've already built.

00:27:03.220 --> 00:27:06.480
So basically you could very well
just operate in the scenario

00:27:06.480 --> 00:27:08.540
that this API were not there.

00:27:08.540 --> 00:27:11.190
That the user's going to have
to manually select or input

00:27:11.190 --> 00:27:12.940
their login information.

00:27:12.940 --> 00:27:15.580
And this works out
perfectly well.

00:27:15.580 --> 00:27:17.670
It's certainly not
a loss of anything

00:27:17.670 --> 00:27:18.887
that you currently had.

00:27:18.887 --> 00:27:20.970
But now you've got a couple
of opportunities here.

00:27:20.970 --> 00:27:25.196
One is that you can
check it in the state,

00:27:25.196 --> 00:27:28.380
that if it's valuable, you
can use that picker I showed

00:27:28.380 --> 00:27:33.190
earlier-- that you can have
them tap, with one action,

00:27:33.190 --> 00:27:36.360
the identifier that they need,
the email address, or the phone

00:27:36.360 --> 00:27:39.880
number, and use that to
bootstrap the sign-in process.

00:27:39.880 --> 00:27:41.710
Or you could just use
the existing flow.

00:27:41.710 --> 00:27:43.410
And if you go through
the existing flow,

00:27:43.410 --> 00:27:47.520
then you have the
opportunity, after they've

00:27:47.520 --> 00:27:49.600
entered login
information, and you've

00:27:49.600 --> 00:27:52.010
validated that it's correct,
you have the opportunity

00:27:52.010 --> 00:27:55.060
to present them with that save
dialogue we showed earlier.

00:27:55.060 --> 00:27:57.000
And then once this
information is saved,

00:27:57.000 --> 00:27:58.960
then next time they
come back, they'll

00:27:58.960 --> 00:28:00.885
be able to do the
automatic sign-in.

00:28:00.885 --> 00:28:02.624
And in fact, like I
mentioned earlier,

00:28:02.624 --> 00:28:03.790
we had some big names there.

00:28:03.790 --> 00:28:05.164
And the performance
on those apps

00:28:05.164 --> 00:28:07.430
has just been really fantastic.

00:28:07.430 --> 00:28:11.430
So for Netflix, for example,
huge 100 million users plus,

00:28:11.430 --> 00:28:13.920
they see in the order of
30% or 40% of their users

00:28:13.920 --> 00:28:15.900
being signed in
automatically with this.

00:28:15.900 --> 00:28:18.990
That's a complete change.

00:28:18.990 --> 00:28:21.510
Those users, you
can imagine, are now

00:28:21.510 --> 00:28:23.580
reducing by basically
the same proportion all

00:28:23.580 --> 00:28:25.540
of their failed login attempts.

00:28:25.540 --> 00:28:28.515
So by incorporating a couple
lines of code into your apps,

00:28:28.515 --> 00:28:29.890
letting it run
for a little while

00:28:29.890 --> 00:28:34.521
to collect the login information
from Android sign-ins,

00:28:34.521 --> 00:28:36.270
you're now getting
your users into a state

00:28:36.270 --> 00:28:38.680
where they can be signed in
automatically almost half

00:28:38.680 --> 00:28:39.707
of the time.

00:28:39.707 --> 00:28:41.290
And half of the time
will, ultimately,

00:28:41.290 --> 00:28:42.310
be the steady state.

00:28:42.310 --> 00:28:45.960
Because when someone sees one
of those save dialogs, we have,

00:28:45.960 --> 00:28:48.520
in fact, the majority of
people opt in to save.

00:28:48.520 --> 00:28:50.420
So, so long as they
have set up an account,

00:28:50.420 --> 00:28:53.590
or have signed in at least once,
they'll get into that state.

00:28:53.590 --> 00:28:58.000
And I think, ultimately, where
we see the kind of steady state

00:28:58.000 --> 00:28:59.740
balance between
Chrome and Android

00:28:59.740 --> 00:29:04.550
being is the majority being
originally saved on Android.

00:29:04.550 --> 00:29:07.650
So the idea being that
everyone who logs in on Android

00:29:07.650 --> 00:29:08.730
is shown that prompt.

00:29:08.730 --> 00:29:09.980
It's a modal dialogue.

00:29:09.980 --> 00:29:11.360
Opt-in rates are very good.

00:29:11.360 --> 00:29:14.000
And the Android to Android
scenario, of user going

00:29:14.000 --> 00:29:17.530
from one device to another--
either getting a new device,

00:29:17.530 --> 00:29:21.290
moving between devices,
signing out, restoring the app,

00:29:21.290 --> 00:29:23.410
something like that--
is very powerful,

00:29:23.410 --> 00:29:24.770
and will be a very common case.

00:29:24.770 --> 00:29:26.690
So even if you only do
Android development,

00:29:26.690 --> 00:29:28.630
it's worth thinking about this.

00:29:28.630 --> 00:29:30.920
But that said, if you
do have a website,

00:29:30.920 --> 00:29:32.662
it's worth putting
the two together

00:29:32.662 --> 00:29:34.120
so that they can
share credentials.

00:29:34.120 --> 00:29:35.828
And in order to do
that, there's a couple

00:29:35.828 --> 00:29:37.540
of steps in our
developer documentation.

00:29:37.540 --> 00:29:39.760
But the general idea
here is that in order

00:29:39.760 --> 00:29:42.490
to ensure the security
of this connection,

00:29:42.490 --> 00:29:45.500
you assert ownership of the
website that you've got.

00:29:45.500 --> 00:29:50.000
One of the requirements is
that you have an HTTPS site,

00:29:50.000 --> 00:29:52.560
just to ensure that
everything that's stored there

00:29:52.560 --> 00:29:57.340
or retrieved there can be
securely passed to the user.

00:29:57.340 --> 00:30:00.410
The general idea that you
assert ownership over your HTTPS

00:30:00.410 --> 00:30:00.944
website.

00:30:00.944 --> 00:30:02.360
And then once
you've got that, you

00:30:02.360 --> 00:30:04.370
go into the Play
Developer Console,

00:30:04.370 --> 00:30:07.550
and basically say that your app
is associated to that website.

00:30:07.550 --> 00:30:09.840
And then with that link
made, we can basically

00:30:09.840 --> 00:30:12.580
have the credentials
stored in either location,

00:30:12.580 --> 00:30:14.950
be available when the
API is called in Chrome,

00:30:14.950 --> 00:30:17.890
on the beta channel, or on
Android in the current version

00:30:17.890 --> 00:30:19.410
of Play Services.

00:30:19.410 --> 00:30:21.090
So that's a pretty
cool experience.

00:30:21.090 --> 00:30:23.770
I think that really sums
up what's possible here.

00:30:23.770 --> 00:30:27.900
And I think that if you look
at how it's been doing so far,

00:30:27.900 --> 00:30:30.300
I think one of the main
points, or the stories that I'd

00:30:30.300 --> 00:30:32.200
like to tell, is
that this is not

00:30:32.200 --> 00:30:35.110
just an API for
the people who know

00:30:35.110 --> 00:30:36.670
what a password manager is.

00:30:36.670 --> 00:30:38.970
But in fact, an API
for anybody on Android.

00:30:38.970 --> 00:30:41.665
That in reality, with
some of the big apps that

00:30:41.665 --> 00:30:44.350
have launched already, we have
over 300 million downloads

00:30:44.350 --> 00:30:47.510
of apps enabled with
this API, and we've

00:30:47.510 --> 00:30:50.050
had 50 million people
in just a few months

00:30:50.050 --> 00:30:52.672
save or retrieve some
kind of login information.

00:30:52.672 --> 00:30:54.130
And if you think
about that number,

00:30:54.130 --> 00:30:57.880
that's more than any of the
password managers on Android

00:30:57.880 --> 00:31:00.420
have ever been downloaded
in the first place.

00:31:00.420 --> 00:31:02.960
So this is really
aiming to be the login

00:31:02.960 --> 00:31:04.690
solution for everyone.

00:31:04.690 --> 00:31:07.319
That it's a state,
or a user experience,

00:31:07.319 --> 00:31:08.860
where people don't
even have to think

00:31:08.860 --> 00:31:11.530
about password management,
or login management.

00:31:11.530 --> 00:31:13.150
They just do whatever
they need to do,

00:31:13.150 --> 00:31:15.230
they save that information,
they get in the state

00:31:15.230 --> 00:31:18.700
where they never need to see or
manage that information again.

00:31:18.700 --> 00:31:20.200
They'll just be signed in.

00:31:20.200 --> 00:31:22.310
So available on
Android right now.

00:31:22.310 --> 00:31:25.600
If you check out
developers.google.com/identity,

00:31:25.600 --> 00:31:27.900
you can see the APIs
and how to implement it,

00:31:27.900 --> 00:31:29.160
integrate it into your app.

00:31:29.160 --> 00:31:31.270
There's a couple of guides
there about the user experience,

00:31:31.270 --> 00:31:33.560
and the places where you
should make these API calls.

00:31:33.560 --> 00:31:34.190
Pretty simple.

00:31:34.190 --> 00:31:37.240
How to handle the different
corner cases and edge

00:31:37.240 --> 00:31:41.350
cases-- things like log-out,
or incorrect stored password.

00:31:41.350 --> 00:31:44.012
And if you're really interested
in that, do join us tomorrow.

00:31:44.012 --> 00:31:46.220
There's going to be a codelab
session in the morning,

00:31:46.220 --> 00:31:48.470
I think it's at 9:30--
little bit early.

00:31:48.470 --> 00:31:50.730
But basically, In
a couple of hours,

00:31:50.730 --> 00:31:54.140
you'll be able to put
these APIs into your app,

00:31:54.140 --> 00:31:56.429
and get a lot of your
users in an experience

00:31:56.429 --> 00:31:58.970
where they just don't need to
think about logging in anymore.

00:31:58.970 --> 00:32:00.400
And that's really
where we hope to take

00:32:00.400 --> 00:32:03.030
all of this in the future-- is
to bring it to all platforms,

00:32:03.030 --> 00:32:05.930
and basically make an
experience where you can tap

00:32:05.930 --> 00:32:09.210
on assisted sign-in dialog
to create an account,

00:32:09.210 --> 00:32:12.230
make it very easy to get signed
up, and then wherever you go,

00:32:12.230 --> 00:32:14.307
you don't need to worry
about how to log back in.

00:32:14.307 --> 00:32:15.890
That's what we hope
to bring to users.

00:32:15.890 --> 00:32:16.920
And I hope you'll
join us tomorrow

00:32:16.920 --> 00:32:18.680
to find out how to
put it into your app.

00:32:18.680 --> 00:32:19.180
Thank you.

00:32:21.980 --> 00:32:24.430
[MUSIC PLAYING]

