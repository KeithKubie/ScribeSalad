WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.060
in the previous video you saw how you

00:00:02.060 --> 00:00:02.070
in the previous video you saw how you
 

00:00:02.070 --> 00:00:03.800
in the previous video you saw how you
can use vectorization

00:00:03.800 --> 00:00:03.810
can use vectorization
 

00:00:03.810 --> 00:00:05.960
can use vectorization
to compute the predictions the lowercase

00:00:05.960 --> 00:00:05.970
to compute the predictions the lowercase
 

00:00:05.970 --> 00:00:10.040
to compute the predictions the lowercase
A's for an entire training set all sort

00:00:10.040 --> 00:00:10.050
A's for an entire training set all sort
 

00:00:10.050 --> 00:00:12.350
A's for an entire training set all sort
of at the same time in this video you

00:00:12.350 --> 00:00:12.360
of at the same time in this video you
 

00:00:12.360 --> 00:00:14.270
of at the same time in this video you
see how you can use vectorization to

00:00:14.270 --> 00:00:14.280
see how you can use vectorization to
 

00:00:14.280 --> 00:00:17.060
see how you can use vectorization to
also perform the gradient computations

00:00:17.060 --> 00:00:17.070
also perform the gradient computations
 

00:00:17.070 --> 00:00:19.760
also perform the gradient computations
for all M training examples again all

00:00:19.760 --> 00:00:19.770
for all M training examples again all
 

00:00:19.770 --> 00:00:22.130
for all M training examples again all
sort of at the same time and then at the

00:00:22.130 --> 00:00:22.140
sort of at the same time and then at the
 

00:00:22.140 --> 00:00:23.540
sort of at the same time and then at the
end of this video we'll pull all

00:00:23.540 --> 00:00:23.550
end of this video we'll pull all
 

00:00:23.550 --> 00:00:26.240
end of this video we'll pull all
together and show how you can derive a

00:00:26.240 --> 00:00:26.250
together and show how you can derive a
 

00:00:26.250 --> 00:00:28.000
together and show how you can derive a
very efficient implementation of

00:00:28.000 --> 00:00:28.010
very efficient implementation of
 

00:00:28.010 --> 00:00:30.800
very efficient implementation of
logistic regression so you remember that

00:00:30.800 --> 00:00:30.810
logistic regression so you remember that
 

00:00:30.810 --> 00:00:33.080
logistic regression so you remember that
for the gradient computation what we did

00:00:33.080 --> 00:00:33.090
for the gradient computation what we did
 

00:00:33.090 --> 00:00:35.810
for the gradient computation what we did
was we computed DZ one for the first

00:00:35.810 --> 00:00:35.820
was we computed DZ one for the first
 

00:00:35.820 --> 00:00:40.549
was we computed DZ one for the first
example riskily a one minus y one and

00:00:40.549 --> 00:00:40.559
example riskily a one minus y one and
 

00:00:40.559 --> 00:00:50.049
example riskily a one minus y one and
then DZ 2 equals a 2 minus y 2 and so on

00:00:50.049 --> 00:00:50.059
then DZ 2 equals a 2 minus y 2 and so on
 

00:00:50.059 --> 00:00:54.920
then DZ 2 equals a 2 minus y 2 and so on
so on and so on for all my training

00:00:54.920 --> 00:00:54.930
so on and so on for all my training
 

00:00:54.930 --> 00:00:57.650
so on and so on for all my training
examples so what we're going to do is

00:00:57.650 --> 00:00:57.660
examples so what we're going to do is
 

00:00:57.660 --> 00:01:01.520
examples so what we're going to do is
define a new variable D capital Z is

00:01:01.520 --> 00:01:01.530
define a new variable D capital Z is
 

00:01:01.530 --> 00:01:10.520
define a new variable D capital Z is
going to be DZ 1 DZ 2 right DZ m again

00:01:10.520 --> 00:01:10.530
going to be DZ 1 DZ 2 right DZ m again
 

00:01:10.530 --> 00:01:12.920
going to be DZ 1 DZ 2 right DZ m again
all the D lowercase D variables stacked

00:01:12.920 --> 00:01:12.930
all the D lowercase D variables stacked
 

00:01:12.930 --> 00:01:15.940
all the D lowercase D variables stacked
horizontally so this would be a 1 by M

00:01:15.940 --> 00:01:15.950
horizontally so this would be a 1 by M
 

00:01:15.950 --> 00:01:19.580
horizontally so this would be a 1 by M
matrix or alternative VA M dimensional

00:01:19.580 --> 00:01:19.590
matrix or alternative VA M dimensional
 

00:01:19.590 --> 00:01:22.789
matrix or alternative VA M dimensional
real vector now recall that from the

00:01:22.789 --> 00:01:22.799
real vector now recall that from the
 

00:01:22.799 --> 00:01:24.530
real vector now recall that from the
previous slide we'd already figured out

00:01:24.530 --> 00:01:24.540
previous slide we'd already figured out
 

00:01:24.540 --> 00:01:26.719
previous slide we'd already figured out
how to compute capital a which was this

00:01:26.719 --> 00:01:26.729
how to compute capital a which was this
 

00:01:26.729 --> 00:01:32.359
how to compute capital a which was this
a 1 through am and we had defined

00:01:32.359 --> 00:01:32.369
a 1 through am and we had defined
 

00:01:32.369 --> 00:01:37.399
a 1 through am and we had defined
Capital y as y 1 through ym also you

00:01:37.399 --> 00:01:37.409
Capital y as y 1 through ym also you
 

00:01:37.409 --> 00:01:40.609
Capital y as y 1 through ym also you
know stacked horizontally so based on

00:01:40.609 --> 00:01:40.619
know stacked horizontally so based on
 

00:01:40.619 --> 00:01:44.270
know stacked horizontally so based on
these definitions um maybe you could see

00:01:44.270 --> 00:01:44.280
these definitions um maybe you could see
 

00:01:44.280 --> 00:01:46.670
these definitions um maybe you could see
for yourself that DZ can be computed as

00:01:46.670 --> 00:01:46.680
for yourself that DZ can be computed as
 

00:01:46.680 --> 00:01:49.670
for yourself that DZ can be computed as
just a minus y because this is going to

00:01:49.670 --> 00:01:49.680
just a minus y because this is going to
 

00:01:49.680 --> 00:01:52.999
just a minus y because this is going to
be equal to now a 1 minus y1 through the

00:01:52.999 --> 00:01:53.009
be equal to now a 1 minus y1 through the
 

00:01:53.009 --> 00:01:56.660
be equal to now a 1 minus y1 through the
first element a2 minus y2 in the second

00:01:56.660 --> 00:01:56.670
first element a2 minus y2 in the second
 

00:01:56.670 --> 00:02:00.950
first element a2 minus y2 in the second
element and so on and so and so this

00:02:00.950 --> 00:02:00.960
element and so on and so and so this
 

00:02:00.960 --> 00:02:04.219
element and so on and so and so this
first elements a 1 minus y1 is exactly

00:02:04.219 --> 00:02:04.229
first elements a 1 minus y1 is exactly
 

00:02:04.229 --> 00:02:06.530
first elements a 1 minus y1 is exactly
the definition of DZ 1 the second

00:02:06.530 --> 00:02:06.540
the definition of DZ 1 the second
 

00:02:06.540 --> 00:02:10.369
the definition of DZ 1 the second
element is exactly definitely Z 2 and so

00:02:10.369 --> 00:02:10.379
element is exactly definitely Z 2 and so
 

00:02:10.379 --> 00:02:11.690
element is exactly definitely Z 2 and so
on

00:02:11.690 --> 00:02:11.700
on
 

00:02:11.700 --> 00:02:14.240
on
so with just one line of code you can

00:02:14.240 --> 00:02:14.250
so with just one line of code you can
 

00:02:14.250 --> 00:02:20.180
so with just one line of code you can
compute all of this at the same time now

00:02:20.180 --> 00:02:20.190
compute all of this at the same time now
 

00:02:20.190 --> 00:02:24.350
compute all of this at the same time now
in the previous implementation we've

00:02:24.350 --> 00:02:24.360
in the previous implementation we've
 

00:02:24.360 --> 00:02:26.420
in the previous implementation we've
gotten rid of one for loop already but

00:02:26.420 --> 00:02:26.430
gotten rid of one for loop already but
 

00:02:26.430 --> 00:02:30.530
gotten rid of one for loop already but
we still had this second for loop over

00:02:30.530 --> 00:02:30.540
we still had this second for loop over
 

00:02:30.540 --> 00:02:31.550
we still had this second for loop over
training examples

00:02:31.550 --> 00:02:31.560
training examples
 

00:02:31.560 --> 00:02:34.010
training examples
so we initialize DW to zero to the

00:02:34.010 --> 00:02:34.020
so we initialize DW to zero to the
 

00:02:34.020 --> 00:02:36.199
so we initialize DW to zero to the
vector of zeros but then we still have

00:02:36.199 --> 00:02:36.209
vector of zeros but then we still have
 

00:02:36.209 --> 00:02:38.720
vector of zeros but then we still have
to loop over training examples where we

00:02:38.720 --> 00:02:38.730
to loop over training examples where we
 

00:02:38.730 --> 00:02:43.280
to loop over training examples where we
have PW plus equals x1 times d z1 for

00:02:43.280 --> 00:02:43.290
have PW plus equals x1 times d z1 for
 

00:02:43.290 --> 00:02:46.370
have PW plus equals x1 times d z1 for
the first training example DW plus

00:02:46.370 --> 00:02:46.380
the first training example DW plus
 

00:02:46.380 --> 00:02:51.050
the first training example DW plus
equals x2 DZ 2 and so on so we do the M

00:02:51.050 --> 00:02:51.060
equals x2 DZ 2 and so on so we do the M
 

00:02:51.060 --> 00:02:54.350
equals x2 DZ 2 and so on so we do the M
times and then you know DW 2y equals by

00:02:54.350 --> 00:02:54.360
times and then you know DW 2y equals by
 

00:02:54.360 --> 00:02:57.470
times and then you know DW 2y equals by
M and similarly for B write DP was

00:02:57.470 --> 00:02:57.480
M and similarly for B write DP was
 

00:02:57.480 --> 00:03:01.340
M and similarly for B write DP was
initialized as 0 and then DB plus equals

00:03:01.340 --> 00:03:01.350
initialized as 0 and then DB plus equals
 

00:03:01.350 --> 00:03:08.660
initialized as 0 and then DB plus equals
V Z 1 DP plus equals D Z 2 down to you

00:03:08.660 --> 00:03:08.670
V Z 1 DP plus equals D Z 2 down to you
 

00:03:08.670 --> 00:03:12.590
V Z 1 DP plus equals D Z 2 down to you
know DZ m and then D be divided equally

00:03:12.590 --> 00:03:12.600
know DZ m and then D be divided equally
 

00:03:12.600 --> 00:03:15.350
know DZ m and then D be divided equally
M so that's what we had in the previous

00:03:15.350 --> 00:03:15.360
M so that's what we had in the previous
 

00:03:15.360 --> 00:03:17.810
M so that's what we had in the previous
implementation we'd already gotten rid

00:03:17.810 --> 00:03:17.820
implementation we'd already gotten rid
 

00:03:17.820 --> 00:03:20.690
implementation we'd already gotten rid
of one for loop so le is now DW is a

00:03:20.690 --> 00:03:20.700
of one for loop so le is now DW is a
 

00:03:20.700 --> 00:03:23.140
of one for loop so le is now DW is a
vector and we went separately you know

00:03:23.140 --> 00:03:23.150
vector and we went separately you know
 

00:03:23.150 --> 00:03:27.080
vector and we went separately you know
updating DW 1 DW 2 and so on so we've

00:03:27.080 --> 00:03:27.090
updating DW 1 DW 2 and so on so we've
 

00:03:27.090 --> 00:03:29.780
updating DW 1 DW 2 and so on so we've
gotten rid of that already but we still

00:03:29.780 --> 00:03:29.790
gotten rid of that already but we still
 

00:03:29.790 --> 00:03:32.420
gotten rid of that already but we still
have a for loop over the m examples in

00:03:32.420 --> 00:03:32.430
have a for loop over the m examples in
 

00:03:32.430 --> 00:03:34.310
have a for loop over the m examples in
the training set so let's think these

00:03:34.310 --> 00:03:34.320
the training set so let's think these
 

00:03:34.320 --> 00:03:37.039
the training set so let's think these
operations in vectorize them here's what

00:03:37.039 --> 00:03:37.049
operations in vectorize them here's what
 

00:03:37.049 --> 00:03:38.930
operations in vectorize them here's what
we can do for the vectorized

00:03:38.930 --> 00:03:38.940
we can do for the vectorized
 

00:03:38.940 --> 00:03:41.270
we can do for the vectorized
implementation of DB what is doing is

00:03:41.270 --> 00:03:41.280
implementation of DB what is doing is
 

00:03:41.280 --> 00:03:43.430
implementation of DB what is doing is
basically summing up all of these

00:03:43.430 --> 00:03:43.440
basically summing up all of these
 

00:03:43.440 --> 00:03:48.830
basically summing up all of these
disease and then dividing by M so DB is

00:03:48.830 --> 00:03:48.840
disease and then dividing by M so DB is
 

00:03:48.840 --> 00:03:52.370
disease and then dividing by M so DB is
basically 1 over m sum from I equals 1

00:03:52.370 --> 00:03:52.380
basically 1 over m sum from I equals 1
 

00:03:52.380 --> 00:03:57.259
basically 1 over m sum from I equals 1
through m of DZ I and well all the

00:03:57.259 --> 00:03:57.269
through m of DZ I and well all the
 

00:03:57.269 --> 00:04:01.699
through m of DZ I and well all the
disease are in that a row vector and so

00:04:01.699 --> 00:04:01.709
disease are in that a row vector and so
 

00:04:01.709 --> 00:04:04.490
disease are in that a row vector and so
in Python what you do is in Flynn you

00:04:04.490 --> 00:04:04.500
in Python what you do is in Flynn you
 

00:04:04.500 --> 00:04:11.840
in Python what you do is in Flynn you
know 1 over m times n P dot sum of D Z

00:04:11.840 --> 00:04:11.850
know 1 over m times n P dot sum of D Z
 

00:04:11.850 --> 00:04:14.210
know 1 over m times n P dot sum of D Z
right so just take the variable and call

00:04:14.210 --> 00:04:14.220
right so just take the variable and call
 

00:04:14.220 --> 00:04:17.810
right so just take the variable and call
the NP but some function on it and that

00:04:17.810 --> 00:04:17.820
the NP but some function on it and that
 

00:04:17.820 --> 00:04:19.870
the NP but some function on it and that
would give you DB

00:04:19.870 --> 00:04:19.880
would give you DB
 

00:04:19.880 --> 00:04:23.710
would give you DB
how about DW I'll just write out the

00:04:23.710 --> 00:04:23.720
how about DW I'll just write out the
 

00:04:23.720 --> 00:04:25.510
how about DW I'll just write out the
correct equations you can verify the

00:04:25.510 --> 00:04:25.520
correct equations you can verify the
 

00:04:25.520 --> 00:04:28.350
correct equations you can verify the
right thing to do DW x will be one of M

00:04:28.350 --> 00:04:28.360
right thing to do DW x will be one of M
 

00:04:28.360 --> 00:04:33.040
right thing to do DW x will be one of M
times the matrix x times DZ transpose

00:04:33.040 --> 00:04:33.050
times the matrix x times DZ transpose
 

00:04:33.050 --> 00:04:37.020
times the matrix x times DZ transpose
and to kind of see why that's the case

00:04:37.020 --> 00:04:37.030
and to kind of see why that's the case
 

00:04:37.030 --> 00:04:40.720
and to kind of see why that's the case
this is equal to one of M then the

00:04:40.720 --> 00:04:40.730
this is equal to one of M then the
 

00:04:40.730 --> 00:04:44.350
this is equal to one of M then the
matrix X is X 1 through X M right

00:04:44.350 --> 00:04:44.360
matrix X is X 1 through X M right
 

00:04:44.360 --> 00:04:48.280
matrix X is X 1 through X M right
stacked up in columns like that and DZ

00:04:48.280 --> 00:04:48.290
stacked up in columns like that and DZ
 

00:04:48.290 --> 00:04:52.980
stacked up in columns like that and DZ
transpose is going to be DZ one down to

00:04:52.980 --> 00:04:52.990
transpose is going to be DZ one down to
 

00:04:52.990 --> 00:04:57.310
transpose is going to be DZ one down to
DZ m like so and so if you figure out

00:04:57.310 --> 00:04:57.320
DZ m like so and so if you figure out
 

00:04:57.320 --> 00:05:00.370
DZ m like so and so if you figure out
what this matrix times this vector works

00:05:00.370 --> 00:05:00.380
what this matrix times this vector works
 

00:05:00.380 --> 00:05:01.990
what this matrix times this vector works
out to be this turns out to be one over

00:05:01.990 --> 00:05:02.000
out to be this turns out to be one over
 

00:05:02.000 --> 00:05:10.260
out to be this turns out to be one over
m times X 1 DZ 1 plus dot dot dot plus

00:05:10.260 --> 00:05:10.270
m times X 1 DZ 1 plus dot dot dot plus
 

00:05:10.270 --> 00:05:16.720
m times X 1 DZ 1 plus dot dot dot plus
XM DZ m right and so this is a n by 1

00:05:16.720 --> 00:05:16.730
XM DZ m right and so this is a n by 1
 

00:05:16.730 --> 00:05:20.890
XM DZ m right and so this is a n by 1
vector and this is what you actually end

00:05:20.890 --> 00:05:20.900
vector and this is what you actually end
 

00:05:20.900 --> 00:05:23.560
vector and this is what you actually end
up with what DW because DW was taking

00:05:23.560 --> 00:05:23.570
up with what DW because DW was taking
 

00:05:23.570 --> 00:05:26.170
up with what DW because DW was taking
these you know x ID zi and adding them

00:05:26.170 --> 00:05:26.180
these you know x ID zi and adding them
 

00:05:26.180 --> 00:05:27.930
these you know x ID zi and adding them
up and so that's what exactly this

00:05:27.930 --> 00:05:27.940
up and so that's what exactly this
 

00:05:27.940 --> 00:05:30.940
up and so that's what exactly this
matrix vector multiplication is doing

00:05:30.940 --> 00:05:30.950
matrix vector multiplication is doing
 

00:05:30.950 --> 00:05:33.520
matrix vector multiplication is doing
and so again with one line of code you

00:05:33.520 --> 00:05:33.530
and so again with one line of code you
 

00:05:33.530 --> 00:05:36.730
and so again with one line of code you
can compute G W so the vectorized

00:05:36.730 --> 00:05:36.740
can compute G W so the vectorized
 

00:05:36.740 --> 00:05:38.440
can compute G W so the vectorized
implementation of the difference

00:05:38.440 --> 00:05:38.450
implementation of the difference
 

00:05:38.450 --> 00:05:40.510
implementation of the difference
calculations is just this you use this

00:05:40.510 --> 00:05:40.520
calculations is just this you use this
 

00:05:40.520 --> 00:05:44.920
calculations is just this you use this
line to implement DB and use this line

00:05:44.920 --> 00:05:44.930
line to implement DB and use this line
 

00:05:44.930 --> 00:05:48.850
line to implement DB and use this line
to influence DW and notice that without

00:05:48.850 --> 00:05:48.860
to influence DW and notice that without
 

00:05:48.860 --> 00:05:50.620
to influence DW and notice that without
a for loop over the training sites you

00:05:50.620 --> 00:05:50.630
a for loop over the training sites you
 

00:05:50.630 --> 00:05:53.290
a for loop over the training sites you
can now compute the updates you want to

00:05:53.290 --> 00:05:53.300
can now compute the updates you want to
 

00:05:53.300 --> 00:05:56.500
can now compute the updates you want to
your parameters so now let's put all

00:05:56.500 --> 00:05:56.510
your parameters so now let's put all
 

00:05:56.510 --> 00:05:58.660
your parameters so now let's put all
together into how you would actually

00:05:58.660 --> 00:05:58.670
together into how you would actually
 

00:05:58.670 --> 00:06:01.660
together into how you would actually
implement logistic regression so this is

00:06:01.660 --> 00:06:01.670
implement logistic regression so this is
 

00:06:01.670 --> 00:06:03.850
implement logistic regression so this is
our original highly inefficient non

00:06:03.850 --> 00:06:03.860
our original highly inefficient non
 

00:06:03.860 --> 00:06:08.200
our original highly inefficient non
vectorized implementation where um so

00:06:08.200 --> 00:06:08.210
vectorized implementation where um so
 

00:06:08.210 --> 00:06:09.460
vectorized implementation where um so
the first thing we've done in the

00:06:09.460 --> 00:06:09.470
the first thing we've done in the
 

00:06:09.470 --> 00:06:10.960
the first thing we've done in the
previous video was get rid of this

00:06:10.960 --> 00:06:10.970
previous video was get rid of this
 

00:06:10.970 --> 00:06:13.270
previous video was get rid of this
volume right so instead of looping over

00:06:13.270 --> 00:06:13.280
volume right so instead of looping over
 

00:06:13.280 --> 00:06:16.600
volume right so instead of looping over
DW 1 DW 2 and so on we have replaced

00:06:16.600 --> 00:06:16.610
DW 1 DW 2 and so on we have replaced
 

00:06:16.610 --> 00:06:20.110
DW 1 DW 2 and so on we have replaced
this with a vector value DW and just say

00:06:20.110 --> 00:06:20.120
this with a vector value DW and just say
 

00:06:20.120 --> 00:06:24.430
this with a vector value DW and just say
this is DW + equals X I which is now a

00:06:24.430 --> 00:06:24.440
this is DW + equals X I which is now a
 

00:06:24.440 --> 00:06:30.280
this is DW + equals X I which is now a
vector times DZ I but now we'll see that

00:06:30.280 --> 00:06:30.290
vector times DZ I but now we'll see that
 

00:06:30.290 --> 00:06:32.590
vector times DZ I but now we'll see that
we can also get rid of not just a for

00:06:32.590 --> 00:06:32.600
we can also get rid of not just a for
 

00:06:32.600 --> 00:06:33.709
we can also get rid of not just a for
loop below but also

00:06:33.709 --> 00:06:33.719
loop below but also
 

00:06:33.719 --> 00:06:37.249
loop below but also
get rid of this volume so here's how you

00:06:37.249 --> 00:06:37.259
get rid of this volume so here's how you
 

00:06:37.259 --> 00:06:41.629
get rid of this volume so here's how you
do it so using what we had from the

00:06:41.629 --> 00:06:41.639
do it so using what we had from the
 

00:06:41.639 --> 00:06:45.909
do it so using what we had from the
previous slides you would say Capital Z

00:06:45.909 --> 00:06:45.919
previous slides you would say Capital Z
 

00:06:45.919 --> 00:06:51.189
previous slides you would say Capital Z
is equal to W transpose X plus B and

00:06:51.189 --> 00:06:51.199
is equal to W transpose X plus B and
 

00:06:51.199 --> 00:06:55.149
is equal to W transpose X plus B and
code you write is capital Z equals NP

00:06:55.149 --> 00:06:55.159
code you write is capital Z equals NP
 

00:06:55.159 --> 00:07:02.529
code you write is capital Z equals NP
dot W transpose X plus B and then a

00:07:02.529 --> 00:07:02.539
dot W transpose X plus B and then a
 

00:07:02.539 --> 00:07:07.699
dot W transpose X plus B and then a
equals sigmoid of capital T so you've

00:07:07.699 --> 00:07:07.709
equals sigmoid of capital T so you've
 

00:07:07.709 --> 00:07:09.469
equals sigmoid of capital T so you've
now computes it all of this and all of

00:07:09.469 --> 00:07:09.479
now computes it all of this and all of
 

00:07:09.479 --> 00:07:13.429
now computes it all of this and all of
this for all the values of iron mix on

00:07:13.429 --> 00:07:13.439
this for all the values of iron mix on
 

00:07:13.439 --> 00:07:15.469
this for all the values of iron mix on
the previous line we said you would

00:07:15.469 --> 00:07:15.479
the previous line we said you would
 

00:07:15.479 --> 00:07:19.790
the previous line we said you would
compute DZ equals capital A minus

00:07:19.790 --> 00:07:19.800
compute DZ equals capital A minus
 

00:07:19.800 --> 00:07:22.639
compute DZ equals capital A minus
capital y so now you compute all of this

00:07:22.639 --> 00:07:22.649
capital y so now you compute all of this
 

00:07:22.649 --> 00:07:27.529
capital y so now you compute all of this
for all the values of I then finally DW

00:07:27.529 --> 00:07:27.539
for all the values of I then finally DW
 

00:07:27.539 --> 00:07:35.569
for all the values of I then finally DW
equals 1 over M X D Z transpose and DB

00:07:35.569 --> 00:07:35.579
equals 1 over M X D Z transpose and DB
 

00:07:35.579 --> 00:07:42.819
equals 1 over M X D Z transpose and DB
equals one of em you know and P dot some

00:07:42.819 --> 00:07:42.829
 

00:07:42.829 --> 00:07:47.479
DZ so you've just done for propagation

00:07:47.479 --> 00:07:47.489
DZ so you've just done for propagation
 

00:07:47.489 --> 00:07:50.119
DZ so you've just done for propagation
and back propagation really computing

00:07:50.119 --> 00:07:50.129
and back propagation really computing
 

00:07:50.129 --> 00:07:51.799
and back propagation really computing
the predictions and computing the

00:07:51.799 --> 00:07:51.809
the predictions and computing the
 

00:07:51.809 --> 00:07:54.459
the predictions and computing the
derivatives on all M training examples

00:07:54.459 --> 00:07:54.469
derivatives on all M training examples
 

00:07:54.469 --> 00:07:58.189
derivatives on all M training examples
without using a for loop and so the

00:07:58.189 --> 00:07:58.199
without using a for loop and so the
 

00:07:58.199 --> 00:07:59.929
without using a for loop and so the
gradient descent update then would be

00:07:59.929 --> 00:07:59.939
gradient descent update then would be
 

00:07:59.939 --> 00:08:03.019
gradient descent update then would be
you know W gets updated as W minus the

00:08:03.019 --> 00:08:03.029
you know W gets updated as W minus the
 

00:08:03.029 --> 00:08:05.929
you know W gets updated as W minus the
learning rate times DW is just computed

00:08:05.929 --> 00:08:05.939
learning rate times DW is just computed
 

00:08:05.939 --> 00:08:09.350
learning rate times DW is just computed
above and B is updated as B minus a

00:08:09.350 --> 00:08:09.360
above and B is updated as B minus a
 

00:08:09.360 --> 00:08:13.100
above and B is updated as B minus a
learning rate times DB so sometimes it's

00:08:13.100 --> 00:08:13.110
learning rate times DB so sometimes it's
 

00:08:13.110 --> 00:08:14.959
learning rate times DB so sometimes it's
really cool inserted it notices on

00:08:14.959 --> 00:08:14.969
really cool inserted it notices on
 

00:08:14.969 --> 00:08:18.769
really cool inserted it notices on
assignment but I guess I haven't been

00:08:18.769 --> 00:08:18.779
assignment but I guess I haven't been
 

00:08:18.779 --> 00:08:22.669
assignment but I guess I haven't been
totally consistent to that notation but

00:08:22.669 --> 00:08:22.679
totally consistent to that notation but
 

00:08:22.679 --> 00:08:25.519
totally consistent to that notation but
with this you have just implemented a

00:08:25.519 --> 00:08:25.529
with this you have just implemented a
 

00:08:25.529 --> 00:08:27.859
with this you have just implemented a
single iteration of gradient descent for

00:08:27.859 --> 00:08:27.869
single iteration of gradient descent for
 

00:08:27.869 --> 00:08:31.309
single iteration of gradient descent for
logistic regression now I know I said

00:08:31.309 --> 00:08:31.319
logistic regression now I know I said
 

00:08:31.319 --> 00:08:32.689
logistic regression now I know I said
that we should get rid of explicit

00:08:32.689 --> 00:08:32.699
that we should get rid of explicit
 

00:08:32.699 --> 00:08:35.059
that we should get rid of explicit
folders whenever you can but if you want

00:08:35.059 --> 00:08:35.069
folders whenever you can but if you want
 

00:08:35.069 --> 00:08:38.179
folders whenever you can but if you want
to implement multiple iterations of

00:08:38.179 --> 00:08:38.189
to implement multiple iterations of
 

00:08:38.189 --> 00:08:40.159
to implement multiple iterations of
gradient descent then you still need a

00:08:40.159 --> 00:08:40.169
gradient descent then you still need a
 

00:08:40.169 --> 00:08:42.799
gradient descent then you still need a
for loop over the number of iterations

00:08:42.799 --> 00:08:42.809
for loop over the number of iterations
 

00:08:42.809 --> 00:08:45.379
for loop over the number of iterations
so you if you want to have a thousand

00:08:45.379 --> 00:08:45.389
so you if you want to have a thousand
 

00:08:45.389 --> 00:08:47.550
so you if you want to have a thousand
iterations of gradient

00:08:47.550 --> 00:08:47.560
iterations of gradient
 

00:08:47.560 --> 00:08:52.019
iterations of gradient
you might still need a full loop over

00:08:52.019 --> 00:08:52.029
you might still need a full loop over
 

00:08:52.029 --> 00:08:54.269
you might still need a full loop over
the iteration number because and also

00:08:54.269 --> 00:08:54.279
the iteration number because and also
 

00:08:54.279 --> 00:08:56.220
the iteration number because and also
most folders like that and I don't think

00:08:56.220 --> 00:08:56.230
most folders like that and I don't think
 

00:08:56.230 --> 00:08:57.720
most folders like that and I don't think
there's any way to get rid of that for

00:08:57.720 --> 00:08:57.730
there's any way to get rid of that for
 

00:08:57.730 --> 00:09:01.110
there's any way to get rid of that for
loop but I do think it's incredibly cool

00:09:01.110 --> 00:09:01.120
loop but I do think it's incredibly cool
 

00:09:01.120 --> 00:09:03.030
loop but I do think it's incredibly cool
that you can implement at least one

00:09:03.030 --> 00:09:03.040
that you can implement at least one
 

00:09:03.040 --> 00:09:04.980
that you can implement at least one
iteration of gradient descent without

00:09:04.980 --> 00:09:04.990
iteration of gradient descent without
 

00:09:04.990 --> 00:09:07.949
iteration of gradient descent without
needing to use a full loop so that's it

00:09:07.949 --> 00:09:07.959
needing to use a full loop so that's it
 

00:09:07.959 --> 00:09:09.869
needing to use a full loop so that's it
you now have a highly vectorize and

00:09:09.869 --> 00:09:09.879
you now have a highly vectorize and
 

00:09:09.879 --> 00:09:11.340
you now have a highly vectorize and
highly efficient implementation of

00:09:11.340 --> 00:09:11.350
highly efficient implementation of
 

00:09:11.350 --> 00:09:14.040
highly efficient implementation of
gradient descent or register direction

00:09:14.040 --> 00:09:14.050
gradient descent or register direction
 

00:09:14.050 --> 00:09:16.829
gradient descent or register direction
there's just some one more detail that I

00:09:16.829 --> 00:09:16.839
there's just some one more detail that I
 

00:09:16.839 --> 00:09:18.720
there's just some one more detail that I
want to talk about in the next video

00:09:18.720 --> 00:09:18.730
want to talk about in the next video
 

00:09:18.730 --> 00:09:20.699
want to talk about in the next video
which is in our description here I

00:09:20.699 --> 00:09:20.709
which is in our description here I
 

00:09:20.709 --> 00:09:22.769
which is in our description here I
briefly alluded to this technique called

00:09:22.769 --> 00:09:22.779
briefly alluded to this technique called
 

00:09:22.779 --> 00:09:25.679
briefly alluded to this technique called
broadcasting broadcasting turns out to

00:09:25.679 --> 00:09:25.689
broadcasting broadcasting turns out to
 

00:09:25.689 --> 00:09:28.499
broadcasting broadcasting turns out to
be a technique that pison an umpire

00:09:28.499 --> 00:09:28.509
be a technique that pison an umpire
 

00:09:28.509 --> 00:09:30.780
be a technique that pison an umpire
allows you to use to make certain parts

00:09:30.780 --> 00:09:30.790
allows you to use to make certain parts
 

00:09:30.790 --> 00:09:33.150
allows you to use to make certain parts
of your code also much more efficient so

00:09:33.150 --> 00:09:33.160
of your code also much more efficient so
 

00:09:33.160 --> 00:09:34.710
of your code also much more efficient so
let's see what some more details of

00:09:34.710 --> 00:09:34.720
let's see what some more details of
 

00:09:34.720 --> 00:09:38.790
let's see what some more details of
broadcasting in the next video

