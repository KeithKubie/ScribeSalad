WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.500
[MUSIC PLAYING]

00:00:06.354 --> 00:00:08.020
WOUTER VAN OORTMERSSEN:
Hello, everyone,

00:00:08.020 --> 00:00:14.540
and welcome to Going
Further with FlatBuffers.

00:00:14.540 --> 00:00:19.010
So this talk is about
advanced users of FlatBuffers,

00:00:19.010 --> 00:00:22.940
so I won't go into details about
what FlatBuffers actually is.

00:00:22.940 --> 00:00:25.040
But if you've never heard
of it, let me give you

00:00:25.040 --> 00:00:27.090
the executive summary.

00:00:27.090 --> 00:00:30.440
FlatBuffers is a cross-platform
serialization library that

00:00:30.440 --> 00:00:33.170
is all about memory efficiency.

00:00:33.170 --> 00:00:35.390
If you're going to remember
just one thing about it,

00:00:35.390 --> 00:00:38.150
let it be that it
allows in-place access

00:00:38.150 --> 00:00:42.680
of serialized data without
first parsing or unpacking it.

00:00:42.680 --> 00:00:46.340
And it does all this while still
allowing the data to evolve.

00:00:46.340 --> 00:00:48.620
It is strongly typed
through schemas,

00:00:48.620 --> 00:00:50.810
and of course, we support
lots of languages,

00:00:50.810 --> 00:00:53.540
and import, export to JSON.

00:00:53.540 --> 00:00:57.380
It is used in game engines,
internally at Google,

00:00:57.380 --> 00:01:01.190
and externally, for
example, in Cocos-2Dx.

00:01:01.190 --> 00:01:04.160
It is also widely used
outside of games, for example

00:01:04.160 --> 00:01:05.590
at Facebook and Netflix.

00:01:08.440 --> 00:01:11.250
So today, I'll be talking
about seven advanced ways

00:01:11.250 --> 00:01:14.850
in which you can get
more out of FlatBuffers.

00:01:14.850 --> 00:01:18.750
First up, we have schemaless
FlatBuffers, otherwise

00:01:18.750 --> 00:01:20.880
known as FlexBuffers.

00:01:20.880 --> 00:01:23.160
So FlatBuffers,
generally, are a great way

00:01:23.160 --> 00:01:25.915
to store strongly
typed data, but what

00:01:25.915 --> 00:01:27.540
if you need to store
data for which you

00:01:27.540 --> 00:01:30.000
can't define a schema yet?

00:01:30.000 --> 00:01:31.620
So with
[? FlatBuffers, ?] we took

00:01:31.620 --> 00:01:33.960
all the advantages
of FlatBuffers,

00:01:33.960 --> 00:01:37.140
and we turned them into
self-describing data structure.

00:01:37.140 --> 00:01:39.990
It still has the in-place
access without parsing,

00:01:39.990 --> 00:01:43.890
so it's a similar speed
advantage to FlatBuffers.

00:01:43.890 --> 00:01:46.830
You can share keys and values
to get big space savings,

00:01:46.830 --> 00:01:48.305
compared to JSON.

00:01:48.305 --> 00:01:50.430
And the serializer
automatically finds the smallest

00:01:50.430 --> 00:01:53.190
possible [? representations ?]
for all your values,

00:01:53.190 --> 00:01:56.340
often down to a single
byte, and you can nest them

00:01:56.340 --> 00:01:57.810
inside FlatBuffers.

00:01:57.810 --> 00:02:00.330
So you can choose the most
appropriate data representation

00:02:00.330 --> 00:02:02.689
for all your data.

00:02:02.689 --> 00:02:04.230
And on this slide,
we have an example

00:02:04.230 --> 00:02:08.340
of creating a FlexBuffer, on
the fly, without the schema,

00:02:08.340 --> 00:02:11.430
and without having to create
any data structures first.

00:02:11.430 --> 00:02:13.960
Now, don't worry if the code
looks a little bit scary.

00:02:13.960 --> 00:02:17.280
There's also version
doesn't use lambdas.

00:02:17.280 --> 00:02:20.610
Then you can read it
directly from the buffer,

00:02:20.610 --> 00:02:23.698
with random access and no
memory allocation whatsoever.

00:02:26.390 --> 00:02:29.940
FlatBuffers also has
in-place binary search.

00:02:29.940 --> 00:02:31.020
The way this works--

00:02:31.020 --> 00:02:34.000
if you have a vector of tables,
you can mark one of the fields

00:02:34.000 --> 00:02:38.460
as a key and have the vector
sorted during serialization.

00:02:38.460 --> 00:02:41.220
This allows you to do fast,
binary search look ups directly

00:02:41.220 --> 00:02:44.160
on the buffer, without having
to create any map or dictionary

00:02:44.160 --> 00:02:47.180
structures.

00:02:47.180 --> 00:02:50.300
Next, in place mutation.

00:02:50.300 --> 00:02:52.790
So serialized data is
not typically something

00:02:52.790 --> 00:02:54.770
you want to modify
after the fact.

00:02:54.770 --> 00:02:58.430
But FlatBuffers allows
you to do so anyway.

00:02:58.430 --> 00:03:01.190
This kind of makes
sense, since a FlatBuffer

00:03:01.190 --> 00:03:04.850
is something that can replace
a traditional object tree.

00:03:04.850 --> 00:03:07.730
So with this feature, you can
use it to store values, too,

00:03:07.730 --> 00:03:09.170
and then once
you're done with it,

00:03:09.170 --> 00:03:10.670
you can [? write ?]
it back to disk,

00:03:10.670 --> 00:03:12.950
without having to do any
reserialization of the data.

00:03:15.750 --> 00:03:18.960
Next, reflection allows you
to work with serialized data

00:03:18.960 --> 00:03:22.470
in ways that go beyond
the simple read write API.

00:03:22.470 --> 00:03:25.890
For one, it allows you to run
a loaded schema at runtime

00:03:25.890 --> 00:03:28.050
and inspect it programmatically.

00:03:28.050 --> 00:03:30.960
It also allows in place
mutation of more complex data

00:03:30.960 --> 00:03:34.170
structures, like
strings and tables.

00:03:34.170 --> 00:03:36.930
As you can see from it-- as you
can maybe see from the sample

00:03:36.930 --> 00:03:37.980
code--

00:03:37.980 --> 00:03:41.610
binary schema is implemented
using FlatBuffers itself,

00:03:41.610 --> 00:03:45.540
using the same
generated code API

00:03:45.540 --> 00:03:49.920
to access the schema,
which is all very meta.

00:03:49.920 --> 00:03:53.156
We also have a
traditional object API.

00:03:53.156 --> 00:03:54.780
There are times when
a classical object

00:03:54.780 --> 00:03:57.630
tree is the best
representation for your data,

00:03:57.630 --> 00:04:01.020
and none of the previous
methods are sufficient.

00:04:01.020 --> 00:04:03.480
In that case, FlatBuffers can
generate code for you that

00:04:03.480 --> 00:04:07.590
turns these buffers
into idiomatic C++.

00:04:07.590 --> 00:04:10.620
It's not as fast as
using buffers in place,

00:04:10.620 --> 00:04:13.200
but if you happen to
need it, then it's

00:04:13.200 --> 00:04:16.950
better than writing
it all by hand.

00:04:16.950 --> 00:04:20.040
And now for something
completely different.

00:04:20.040 --> 00:04:23.760
GRPC is Google's open
source RPC library,

00:04:23.760 --> 00:04:27.900
and now, FlatBuffers works
out of the box with GRPC.

00:04:27.900 --> 00:04:31.350
So you can specify
your RPC in the schema,

00:04:31.350 --> 00:04:33.330
and have all the glue
code generated for it.

00:04:36.450 --> 00:04:40.770
And last, and maybe
least, to make migration

00:04:40.770 --> 00:04:43.050
from Protocol Buffers
to FlatBuffers

00:04:43.050 --> 00:04:45.450
a little bit easier, we
now have an automatic way

00:04:45.450 --> 00:04:50.070
to translate Protocol Buffer
schemas into FlatBuffers.

00:04:50.070 --> 00:04:52.120
And that's all I
have for you today.

00:04:52.120 --> 00:04:53.790
For more information
on FlatBuffers,

00:04:53.790 --> 00:04:56.490
please check out this URL,
or just come chat to me

00:04:56.490 --> 00:04:57.487
afterwards.

00:04:57.487 --> 00:04:58.320
Thank you very much.

00:04:58.320 --> 00:04:58.920
[APPLAUSE]

00:04:58.920 --> 00:05:01.970
[MUSIC PLAYING]

