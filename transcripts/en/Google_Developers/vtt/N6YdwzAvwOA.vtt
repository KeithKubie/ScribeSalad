WEBVTT
Kind: captions
Language: en

00:00:00.601 --> 00:00:01.968
Guy: Hi, everybody.

00:00:01.968 --> 00:00:03.133
My name is Romain Guy.

00:00:03.133 --> 00:00:04.434
For those of you
who don't know me yet,

00:00:04.434 --> 00:00:07.968
I am a software engineer
at Google on the Android team.

00:00:07.968 --> 00:00:09.200
I do a bunch of things.

00:00:09.200 --> 00:00:11.367
I work primarily on
the application framework,

00:00:11.367 --> 00:00:13.901
the UI toolkit,
the home screen,

00:00:13.901 --> 00:00:15.133
and a couple of tools.

00:00:15.133 --> 00:00:16.868
So if you have troubles
with your home screen

00:00:16.868 --> 00:00:20.400
or some widgets,
it's probably my fault.

00:00:20.400 --> 00:00:23.200
So you can insult me
on the--all public forums.

00:00:23.200 --> 00:00:25.367
And today we're going
to talk about

00:00:25.367 --> 00:00:28.200
how to improve the performance
of your UI

00:00:28.200 --> 00:00:30.133
when the stupid animation
is over.

00:00:30.133 --> 00:00:32.200
Here we go.

00:00:32.200 --> 00:00:35.534
How many of you have had
performance issues

00:00:35.534 --> 00:00:37.000
in their Android UIs?

00:00:37.000 --> 00:00:38.534
Raise your hands,
don't be shy.

00:00:38.534 --> 00:00:40.000
Okay, quite a bit.

00:00:40.000 --> 00:00:42.400
So the rest of you, like,
you don't try the applications

00:00:42.400 --> 00:00:44.234
or your code is perfect?

00:00:44.234 --> 00:00:45.501
[audience laughs]

00:00:45.501 --> 00:00:46.667
Just who--okay.

00:00:46.667 --> 00:00:49.434
Who never wrote
an Android application so far?

00:00:49.434 --> 00:00:51.267
That's good,
I like you guys.

00:00:51.267 --> 00:00:54.567
Because now you have phones,
you can do that.

00:00:54.567 --> 00:00:57.467
Before we start,
throughout the session,

00:00:57.467 --> 00:01:01.634
I will give you some
numbers to give you

00:01:01.634 --> 00:01:04.367
a better understanding
of how the various

00:01:04.367 --> 00:01:05.734
tips and tricks
I will give you

00:01:05.734 --> 00:01:08.133
will improve the performance
of your application.

00:01:08.133 --> 00:01:09.801
Some of those numbers

00:01:09.801 --> 00:01:11.968
come from recent experiments
I did.

00:01:11.968 --> 00:01:15.634
Some of those numbers
are pretty ancient.

00:01:15.634 --> 00:01:17.801
Some of those numbers
are, like, 18 months old,

00:01:17.801 --> 00:01:19.534
so that's before Android 1.0.

00:01:19.534 --> 00:01:21.000
So if I tell you
that the application

00:01:21.000 --> 00:01:23.167
was running at
30 frames per second,

00:01:23.167 --> 00:01:25.133
it's probably
a lot better now,

00:01:25.133 --> 00:01:28.801
but at least the relative
differences will be the same.

00:01:28.801 --> 00:01:31.367
And all the numbers
I will show you

00:01:31.367 --> 00:01:34.801
were taken on T-Mobile G1,

00:01:34.801 --> 00:01:37.434
to a prototype of
the T-Mobile G1.

00:01:37.434 --> 00:01:40.634
And again, if you have
one of the newer devices,

00:01:40.634 --> 00:01:42.901
it's probably better.

00:01:42.901 --> 00:01:45.167
So this is our agenda.

00:01:45.167 --> 00:01:49.501
We're gonna start with
one of my favorite topics,

00:01:49.501 --> 00:01:50.901
the adapters.

00:01:50.901 --> 00:01:51.934
So how many of you
have ever used

00:01:51.934 --> 00:01:53.701
a list viewing application?

00:01:53.701 --> 00:01:56.634
Okay, how many of you
like this view?

00:01:56.634 --> 00:01:57.901
That's okay.

00:01:57.901 --> 00:01:59.267
Wow, okay.

00:01:59.267 --> 00:02:01.400
I don't.

00:02:01.400 --> 00:02:05.467
Yeah, adapters can be
a big, big pain points

00:02:05.467 --> 00:02:08.400
when you have a slow--
in your UI.

00:02:08.400 --> 00:02:11.434
It's very often the bottleneck
of the performance

00:02:11.434 --> 00:02:14.667
in the applications that use
lists and adapters.

00:02:14.667 --> 00:02:18.868
So we'll see how you can
use adapters efficiently.

00:02:18.868 --> 00:02:20.467
So first of all,
this is what I have to say

00:02:20.467 --> 00:02:21.834
about adapters.

00:02:21.834 --> 00:02:24.434
They're awesome because
they let you do many,

00:02:24.434 --> 00:02:25.868
many really cool things

00:02:25.868 --> 00:02:29.734
and they'll let you display
various items in the list.

00:02:29.734 --> 00:02:32.567
You can create ListViews
in which every item

00:02:32.567 --> 00:02:34.033
is a WebView.

00:02:34.033 --> 00:02:35.567
If you do that,
I will be very mad at you

00:02:35.567 --> 00:02:37.200
because it's a really
bad idea

00:02:37.200 --> 00:02:41.267
in terms of memory usage
and performance, but you can.

00:02:41.267 --> 00:02:42.701
You can also do
very simple things

00:02:42.701 --> 00:02:45.334
like the contact application
where you have a simple label,

00:02:45.334 --> 00:02:47.901
like a simple line of text
for every item.

00:02:47.901 --> 00:02:49.834
Adapters are also
very painful to use

00:02:49.834 --> 00:02:52.834
because they introduce
another layer of complexity,

00:02:52.834 --> 00:02:55.133
another layer of abstraction
in your application.

00:02:55.133 --> 00:02:57.734
And the documentation
kind of sucks.

00:02:57.734 --> 00:02:59.767
That doesn't help.

00:02:59.767 --> 00:03:01.434
But before you start--

00:03:01.434 --> 00:03:03.567
before we start,
I would like to know

00:03:03.567 --> 00:03:05.601
if you guys know how
ListView works.

00:03:05.601 --> 00:03:08.567
How does the ListView use
the adapter?

00:03:08.567 --> 00:03:10.133
Raise your hand if you think
you have--

00:03:10.133 --> 00:03:11.968
you know how it works.

00:03:11.968 --> 00:03:13.133
Okay.

00:03:13.133 --> 00:03:16.200
Well, some are more courageous
than others.

00:03:16.200 --> 00:03:19.033
I have a cool animation
that will show you how it works.

00:03:19.033 --> 00:03:21.634
So the adapter, like I said,
is just--

00:03:21.634 --> 00:03:23.334
Well, it's basically the man
in the middle.

00:03:23.334 --> 00:03:24.534
So you have
your data source,

00:03:24.534 --> 00:03:25.734
and the data source
on Android

00:03:25.734 --> 00:03:28.667
is very often just
an array of data,

00:03:28.667 --> 00:03:30.334
like an array of stream.

00:03:30.334 --> 00:03:31.868
Or a cursor,
like the cursor is something

00:03:31.868 --> 00:03:35.033
that we use a lot
on Android.

00:03:35.033 --> 00:03:37.100
And then you have
the ListView.

00:03:37.100 --> 00:03:39.300
It's the widget that represents
the data on the screen.

00:03:39.300 --> 00:03:42.067
And the adapter is just
this little piece of code

00:03:42.067 --> 00:03:44.000
in the middle that takes
the data,

00:03:44.000 --> 00:03:47.033
converts it into widgets
that then--

00:03:47.033 --> 00:03:49.000
that are then displayed
in the ListView.

00:03:49.000 --> 00:03:50.934
It works very simple
like this.

00:03:50.934 --> 00:03:55.467
But in practice,
the adapter--

00:03:55.467 --> 00:03:57.234
the difference between
the adapter and the ListView

00:03:57.234 --> 00:03:58.801
is very complicated.

00:03:58.801 --> 00:04:01.234
So there's this method
called getView on the adapter

00:04:01.234 --> 00:04:03.033
that you're probably
familiar with.

00:04:03.033 --> 00:04:06.400
So ListView for every position
in your adapter,

00:04:06.400 --> 00:04:08.400
so let's say you have
a thousand items.

00:04:08.400 --> 00:04:11.667
For each item that the ListView
wants to display on screen,

00:04:11.667 --> 00:04:14.100
it will call the getView method
on your adapter.

00:04:14.100 --> 00:04:15.801
And the goal of this--
the role of this method

00:04:15.801 --> 00:04:18.200
is to return a view,
a widget,

00:04:18.200 --> 00:04:22.434
that will then be displayed
by ListView.

00:04:22.434 --> 00:04:27.133
And getView sometimes,
very often in applications

00:04:27.133 --> 00:04:30.300
that are poorly written,
will return a new view.

00:04:30.300 --> 00:04:31.767
And creating a new view
on Android

00:04:31.767 --> 00:04:34.467
is unfortunately
very expensive,

00:04:34.467 --> 00:04:36.601
especially if that view
comes from an XML file.

00:04:36.601 --> 00:04:38.100
Because you have
to inflate it,

00:04:38.100 --> 00:04:41.934
which involves reflection
and tons of code is--

00:04:41.934 --> 00:04:45.167
tons of code
is actually invoked.

00:04:45.167 --> 00:04:47.501
So we can't really create
a new view

00:04:47.501 --> 00:04:49.534
for every item
you have in the list.

00:04:49.534 --> 00:04:50.901
Now let's say you have a--

00:04:50.901 --> 00:04:53.200
you're a crazy person
and you have 2,000 contacts

00:04:53.200 --> 00:04:54.968
in your address book.

00:04:54.968 --> 00:04:57.167
If you want to scroll through
your list of contacts,

00:04:57.167 --> 00:04:59.534
we really can't create
2,000 views.

00:04:59.534 --> 00:05:01.334
Like first of all,
they wouldn't fit in memory,

00:05:01.334 --> 00:05:04.000
but the time it takes
to create all of those views,

00:05:04.000 --> 00:05:05.968
it might be that
50 milliseconds per view

00:05:05.968 --> 00:05:09.334
will slow down the scrolling
by a lot.

00:05:09.334 --> 00:05:14.601
So the solution to that
is recycling views.

00:05:14.601 --> 00:05:16.033
And here I have
this really cool slide

00:05:16.033 --> 00:05:17.367
that I had to create
three times

00:05:17.367 --> 00:05:18.834
because Keynote kept crashing,

00:05:18.834 --> 00:05:21.100
so I hope you will
appreciate it--

00:05:21.100 --> 00:05:25.133
that shows how--
ListView recycle views.

00:05:25.133 --> 00:05:27.567
So here we have a simple
skeleton of ListView

00:05:27.567 --> 00:05:30.467
that can display seven items
onscreen at the same time.

00:05:30.467 --> 00:05:32.767
And when the user
touches the screen

00:05:32.767 --> 00:05:35.767
and starts scrolling the list
with his finger,

00:05:35.767 --> 00:05:39.133
one item ends up
outside of the screen.

00:05:39.133 --> 00:05:40.567
So what we do is that--

00:05:40.567 --> 00:05:42.934
so ListView now needs
another item to display

00:05:42.934 --> 00:05:45.000
the bottom of the list.

00:05:45.000 --> 00:05:46.601
It could simply call
the adapter and say,

00:05:46.601 --> 00:05:48.000
"Give me a view,"

00:05:48.000 --> 00:05:49.534
and the adaptor could return
a new view.

00:05:49.534 --> 00:05:51.400
But like I said,
it will be very expensive.

00:05:51.400 --> 00:05:53.234
Why do we need to create
a new view

00:05:53.234 --> 00:05:54.701
when we have this one
at the top

00:05:54.701 --> 00:05:56.267
that we don't need
to use anymore,

00:05:56.267 --> 00:05:59.534
because it's outside of
the screen.

00:05:59.534 --> 00:06:03.234
So internally ListView
is this fabulous thing

00:06:03.234 --> 00:06:04.901
that we call the recycler.

00:06:04.901 --> 00:06:08.033
It takes the views
that are outside of the screen

00:06:08.033 --> 00:06:09.634
and sends them to
the recycler.

00:06:09.634 --> 00:06:11.467
Here you can see that
there are several segments

00:06:11.467 --> 00:06:15.000
because in a ListView,
all the items can be

00:06:15.000 --> 00:06:16.167
of the same nature.

00:06:16.167 --> 00:06:18.434
They can be represented
by the same widgets,

00:06:18.434 --> 00:06:20.901
or they can be represented
by different widgets.

00:06:20.901 --> 00:06:22.334
So one item can be
a text view,

00:06:22.334 --> 00:06:24.434
another item can be
a button.

00:06:24.434 --> 00:06:26.067
And to do things efficiently,

00:06:26.067 --> 00:06:29.501
the recycler is able to
make the distinction between

00:06:29.501 --> 00:06:31.267
all those different items.

00:06:31.267 --> 00:06:34.000
So here, our item was
the first type

00:06:34.000 --> 00:06:35.400
that the ListView knows about.

00:06:35.400 --> 00:06:37.133
So we put the item
in the recycler.

00:06:37.133 --> 00:06:39.834
And then that item
is passed to the adapter.

00:06:39.834 --> 00:06:41.501
So when we call getView,

00:06:41.501 --> 00:06:44.767
there's a parameter
called convertView by default

00:06:44.767 --> 00:06:48.467
that is actually a pointer
to that view in the recycler.

00:06:48.467 --> 00:06:49.767
And when we do that,

00:06:49.767 --> 00:06:53.133
when we pass one of those unused
views to the adapter,

00:06:53.133 --> 00:06:56.100
the goal of the adapter
is to reuse that view

00:06:56.100 --> 00:06:58.434
and simply send a text,
change the image,

00:06:58.434 --> 00:07:00.834
instead of creating
a brand-new one.

00:07:00.834 --> 00:07:02.000
So here, the adapter

00:07:02.000 --> 00:07:04.367
turns out our old Item 1
into the Item 8,

00:07:04.367 --> 00:07:06.467
and now ListView
puts it back.

00:07:06.467 --> 00:07:08.234
All the items are left
unchanged,

00:07:08.234 --> 00:07:11.901
and that lead--and that
allows us to have very, very--

00:07:11.901 --> 00:07:13.200
performance scrolling.

00:07:13.200 --> 00:07:16.000
So if you try to fling through
a list of ten items,

00:07:16.000 --> 00:07:18.200
it will be the same amount
of work for ListView

00:07:18.200 --> 00:07:19.300
as if you were scrolling
through

00:07:19.300 --> 00:07:22.734
a list of 1 billion items.

00:07:22.734 --> 00:07:24.434
So here's what
you should not do.

00:07:24.434 --> 00:07:25.968
So if you wrote code
like that,

00:07:25.968 --> 00:07:28.167
or if you have that kind of code
in your application,

00:07:28.167 --> 00:07:30.200
you should--at the end of
the session,

00:07:30.200 --> 00:07:33.534
you should go back to
your computer and fix it.

00:07:33.534 --> 00:07:35.934
So this is the getView method
of the adapter.

00:07:35.934 --> 00:07:38.767
So we pass the position
of the item that ListView wants,

00:07:38.767 --> 00:07:41.667
we pass this convertView
we just talked about,

00:07:41.667 --> 00:07:43.100
and the parent.

00:07:43.100 --> 00:07:45.868
So the parent in this case
is always the ListView itself.

00:07:45.868 --> 00:07:47.133
And in that case,

00:07:47.133 --> 00:07:49.734
you can see the first line
of code in that method

00:07:49.734 --> 00:07:53.234
I'm calling inflate,
to inflate an XML file.

00:07:53.234 --> 00:07:55.200
That doesn't look like
a lot of work.

00:07:55.200 --> 00:07:57.200
After all, there are only
four lines of code

00:07:57.200 --> 00:07:59.434
in that method.

00:07:59.434 --> 00:08:01.901
But again, doing that
while the user is scrolling

00:08:01.901 --> 00:08:04.501
through a list of items
would be very expensive.

00:08:04.501 --> 00:08:06.734
It will generate
a ton of garbage,

00:08:06.734 --> 00:08:09.734
which will put a lot of strain
on the garbage collector.

00:08:09.734 --> 00:08:11.934
The garbage collector
will then close your application

00:08:11.934 --> 00:08:14.701
and you will see
the scrolling stutter

00:08:14.701 --> 00:08:17.367
as the system is trying
to keep up with

00:08:17.367 --> 00:08:19.767
what you are doing
in the adapter.

00:08:19.767 --> 00:08:22.667
So instead of doing this,
do this.

00:08:22.667 --> 00:08:24.868
Just check
if the convertView is null.

00:08:24.868 --> 00:08:27.267
So if the convertView is null,
that means that it's probably

00:08:27.267 --> 00:08:29.400
the first layout
in ListView.

00:08:29.400 --> 00:08:31.868
So then you can actually
inflate the views.

00:08:31.868 --> 00:08:34.601
You have to populate the
recycler the first few times.

00:08:34.601 --> 00:08:37.300
So it's okay to do
this first inflation.

00:08:37.300 --> 00:08:40.467
But if the convertView
is not null, just reuse it.

00:08:40.467 --> 00:08:41.868
You are guaranteed,

00:08:41.868 --> 00:08:43.167
if your adapter
is written correctly,

00:08:43.167 --> 00:08:44.834
that it will be of
the right type.

00:08:44.834 --> 00:08:45.934
It will be one of the views

00:08:45.934 --> 00:08:48.000
that you created from
the adapter.

00:08:48.000 --> 00:08:50.634
All right, so you can just
cast it to whatever view

00:08:50.634 --> 00:08:52.167
that's supposed to be
in your adapter

00:08:52.167 --> 00:08:53.467
and reuse its content.

00:08:53.467 --> 00:08:54.634
So here, we're just setting

00:08:54.634 --> 00:08:56.300
a couple of lines of text
inside--

00:08:56.300 --> 00:09:00.000
a line of text
in an icon.

00:09:00.000 --> 00:09:02.334
So the difference--

00:09:02.334 --> 00:09:04.601
oh, in there, okay.

00:09:04.601 --> 00:09:05.834
I'll show you numbers
after that.

00:09:05.834 --> 00:09:07.901
Even better,
we came up with a--

00:09:07.901 --> 00:09:11.133
we were working on
improving the performance

00:09:11.133 --> 00:09:13.367
of the contact application
for 1.0,

00:09:13.367 --> 00:09:15.067
and we came up with
this cool trick

00:09:15.067 --> 00:09:17.000
that we call the ViewHolder.

00:09:17.000 --> 00:09:19.567
So how many of you
have ever used this trick?

00:09:19.567 --> 00:09:22.133
Okay, so some of you
are good and read the blogs

00:09:22.133 --> 00:09:23.400
and read the sample code,

00:09:23.400 --> 00:09:24.601
'cause it's actually in
the SDK.

00:09:24.601 --> 00:09:26.067
There's an example of that.

00:09:26.067 --> 00:09:27.534
It's called efficient
list adapter.

00:09:27.534 --> 00:09:30.767
So I think it's kind of clear
what the sample is about.

00:09:30.767 --> 00:09:33.000
Anyway, the idea of
a ViewHolder

00:09:33.000 --> 00:09:36.067
is to minimize
the amount of work

00:09:36.067 --> 00:09:38.300
in the getView method
of the adapter.

00:09:38.300 --> 00:09:40.100
Most of the time,
your adapter--

00:09:40.100 --> 00:09:41.701
even if you reuse
the convertView,

00:09:41.701 --> 00:09:43.267
you will notice that
you'll end up doing

00:09:43.267 --> 00:09:44.868
the same work
all over again.

00:09:44.868 --> 00:09:47.000
So if I go back to
the previous slide here,

00:09:47.000 --> 00:09:48.601
even if I reuse
the convertView,

00:09:48.601 --> 00:09:51.901
I'm still calling findViewById
on the convertView

00:09:51.901 --> 00:09:54.367
to get the TextView
and the ImageView

00:09:54.367 --> 00:09:57.400
that were inside my item.

00:09:57.400 --> 00:09:59.868
So do we really need
to do that every time?

00:09:59.868 --> 00:10:01.300
We don't.

00:10:01.300 --> 00:10:04.200
So the idea of the ViewHolder
is simply to hold some data

00:10:04.200 --> 00:10:08.667
that's related to the item
to the view that's passed by

00:10:08.667 --> 00:10:12.033
the ListView
and do the work only once.

00:10:12.033 --> 00:10:15.033
So the way you use that
is actually pretty simple.

00:10:15.033 --> 00:10:17.868
So that's our third variation
of the getView method.

00:10:17.868 --> 00:10:19.901
We still inflate
the convertView the first time,

00:10:19.901 --> 00:10:22.267
and the first time,
we also create an instance

00:10:22.267 --> 00:10:24.734
of the--of this class,
the ViewHolder.

00:10:24.734 --> 00:10:27.367
So this is how we call
this class,

00:10:27.367 --> 00:10:29.434
but you can give it
any name you want.

00:10:29.434 --> 00:10:31.234
Usually we like to call
the ViewHolder

00:10:31.234 --> 00:10:34.501
so that we have a clear
understanding of what it does.

00:10:34.501 --> 00:10:36.834
So you create a new instance
of the ViewHolder,

00:10:36.834 --> 00:10:39.934
and you put inside
any kind of data

00:10:39.934 --> 00:10:41.601
or reference that you need
and that you know

00:10:41.601 --> 00:10:44.567
that you're gonna use
every time getView is invoked.

00:10:44.567 --> 00:10:48.067
So in that case, we do
the findViewById the first time

00:10:48.067 --> 00:10:50.634
and we store the result
of that method call

00:10:50.634 --> 00:10:52.334
into the ViewHolder.

00:10:52.334 --> 00:10:54.601
And then we store
the ViewHolder

00:10:54.601 --> 00:10:56.701
as a tag on a view.

00:10:56.701 --> 00:11:00.000
So a tag is any kind
of object

00:11:00.000 --> 00:11:02.100
that you can set on a view.

00:11:02.100 --> 00:11:03.734
It can be used by
your applications

00:11:03.734 --> 00:11:06.367
to store some random data.

00:11:06.367 --> 00:11:08.200
And in this case,
we'll just store a ViewHolder.

00:11:08.200 --> 00:11:09.968
You're pretty much guaranteed
that the framework

00:11:09.968 --> 00:11:12.567
will never use the tag
automatically,

00:11:12.567 --> 00:11:14.834
except in Cupcake
on one particular occasion

00:11:14.834 --> 00:11:18.334
which introduced a bug,
so my fault again.

00:11:18.334 --> 00:11:20.400
But if you set something
in a tag,

00:11:20.400 --> 00:11:22.467
you are guaranteed
that whatever you set

00:11:22.467 --> 00:11:24.667
will stay there
and will always be of the type

00:11:24.667 --> 00:11:27.467
that you just put there.

00:11:27.467 --> 00:11:30.300
Now if the--
if we're past a convertView

00:11:30.300 --> 00:11:32.534
that's not null, we need
to reuse that convertView.

00:11:32.534 --> 00:11:35.601
So the first thing
we need to do in the L statement

00:11:35.601 --> 00:11:40.100
is get the tag on the view,
which is our ViewHolder.

00:11:40.100 --> 00:11:42.000
We cast it,
and then we can access directly

00:11:42.000 --> 00:11:44.100
the TextView
and the ImageView.

00:11:44.100 --> 00:11:45.834
At first, it seems like this

00:11:45.834 --> 00:11:48.100
would not make that much of
a difference.

00:11:48.100 --> 00:11:52.434
We're just avoiding two calls
to findViewById.

00:11:52.434 --> 00:11:57.100
But when I ran the three
examples on G1 prototype,

00:11:57.100 --> 00:11:58.901
this is what I came up with.

00:11:58.901 --> 00:12:00.934
So the first example--

00:12:00.934 --> 00:12:03.501
so the dumb adapter example,
the thing you should never do,

00:12:03.501 --> 00:12:05.501
and if you're doing it,
then that's bad

00:12:05.501 --> 00:12:07.200
and you should fix it.

00:12:07.200 --> 00:12:09.400
We get less than
ten frames per second

00:12:09.400 --> 00:12:12.200
when we try to scroll
through a list.

00:12:12.200 --> 00:12:14.701
So that list in particular
was showing you one icon

00:12:14.701 --> 00:12:17.868
and one line of text
per item in the list.

00:12:17.868 --> 00:12:19.467
When you start recycling
the views,

00:12:19.467 --> 00:12:22.234
you can see that the performance
becomes much better.

00:12:22.234 --> 00:12:23.567
And in that case,

00:12:23.567 --> 00:12:26.033
we get about 27 frames
per second.

00:12:26.033 --> 00:12:27.634
And when you use
the ViewHolder--

00:12:27.634 --> 00:12:31.400
so if you avoid doing
this to findViewById on every--

00:12:31.400 --> 00:12:33.467
every time the getView method
is called,

00:12:33.467 --> 00:12:35.868
then the performance goes up
even further

00:12:35.868 --> 00:12:39.501
and will reach 37 frames
per second.

00:12:39.501 --> 00:12:41.334
So just by using
this very simple tricks

00:12:41.334 --> 00:12:44.067
that add just a few lines
of code in your adapter,

00:12:44.067 --> 00:12:45.567
you can improve
the performance

00:12:45.567 --> 00:12:48.400
by three or four times
very easily.

00:12:48.400 --> 00:12:52.334
And again those are
very simple tricks.

00:12:52.334 --> 00:12:53.834
So once you've done it once,

00:12:53.834 --> 00:12:55.234
you'll understand
how it works,

00:12:55.234 --> 00:12:56.567
and you will be able
to do it

00:12:56.567 --> 00:12:59.400
every time really easily.

00:12:59.400 --> 00:13:04.767
Now let's talk about
backgrounds and images.

00:13:04.767 --> 00:13:06.934
Yeah, "Don't be greedy."

00:13:06.934 --> 00:13:08.100
There is--

00:13:08.100 --> 00:13:10.267
when you set background
drawable on the view,

00:13:10.267 --> 00:13:12.300
you can set
the background drawable as a--

00:13:12.300 --> 00:13:14.968
you can pass a drawable instance
that you created yourself.

00:13:14.968 --> 00:13:16.534
You can set a resource

00:13:16.534 --> 00:13:19.133
that comes from
your drawable directory,

00:13:19.133 --> 00:13:22.367
or you can pass a bitmap
or color.

00:13:22.367 --> 00:13:25.767
The background will always
fill the view.

00:13:25.767 --> 00:13:28.234
That is, it will be
as large as your view.

00:13:28.234 --> 00:13:29.934
Where it can become
a problem

00:13:29.934 --> 00:13:32.501
is when you use something
like a bitmap.

00:13:32.501 --> 00:13:33.868
So if you have a background

00:13:33.868 --> 00:13:36.801
that comes from
a bitmap resource, that's--

00:13:36.801 --> 00:13:39.767
that bitmap will be stretched
to be as big as the view.

00:13:39.767 --> 00:13:40.934
Or as small as the view.

00:13:40.934 --> 00:13:43.601
And the problem here
is that scaling a bitmap

00:13:43.601 --> 00:13:45.601
at runtime is very expensive.

00:13:45.601 --> 00:13:49.300
One of the reasons for this
is that we always turn on--

00:13:49.300 --> 00:13:51.267
the bilinear filtering
by default,

00:13:51.267 --> 00:13:54.934
which--you know, which makes
stretching even slower,

00:13:54.934 --> 00:13:57.267
but it looks better.

00:13:57.267 --> 00:13:59.868
And also because Skia,
a rendering engine,

00:13:59.868 --> 00:14:01.667
is currently only
implemented in software.

00:14:01.667 --> 00:14:03.234
So we don't have
hardware acceleration

00:14:03.234 --> 00:14:05.267
that kind of operation.

00:14:05.267 --> 00:14:08.734
So to avoid this,
make sure--

00:14:08.734 --> 00:14:09.901
So to avoid this,

00:14:09.901 --> 00:14:11.834
make sure that you pre-scale
your bitmaps.

00:14:11.834 --> 00:14:15.234
If you know that the resource
you have will be stretched,

00:14:15.234 --> 00:14:17.334
because the view
that you're gonna--

00:14:17.334 --> 00:14:19.334
on which you're gonna use it
as a background drawable

00:14:19.334 --> 00:14:22.033
will be bigger than
the bitmap, or even smaller,

00:14:22.033 --> 00:14:23.534
do the pre-scaling first.

00:14:23.534 --> 00:14:26.567
Pre-scale the bitmap
and then set it as a background.

00:14:26.567 --> 00:14:28.534
And here,
I have a simple example.

00:14:28.534 --> 00:14:30.400
I just set--

00:14:30.400 --> 00:14:34.033
so the image
was 640 x 480 pixels large.

00:14:34.033 --> 00:14:36.601
And I set it as the background
of my activity.

00:14:36.601 --> 00:14:38.534
And then I was drawing
the application

00:14:38.534 --> 00:14:39.901
as fast as I could.

00:14:39.901 --> 00:14:41.667
So with the different version

00:14:41.667 --> 00:14:43.801
that was scaling the bitmap
at runtime,

00:14:43.801 --> 00:14:46.200
I can get 25 frames
per second.

00:14:46.200 --> 00:14:48.734
By doing the scaling first
and then setting

00:14:48.734 --> 00:14:52.000
the result of the scaling
on the activity background,

00:14:52.000 --> 00:14:53.801
I get 50 frames per second.

00:14:53.801 --> 00:14:55.601
So you can double
your frame rate

00:14:55.601 --> 00:14:58.267
if you use bitmaps
correctly.

00:14:58.267 --> 00:15:00.801
And pre-scaling bitmaps
is actually really easy.

00:15:00.801 --> 00:15:03.167
If you have a handle
on the bitmap object,

00:15:03.167 --> 00:15:05.634
you can actually extract it
from a bitmap drawable.

00:15:05.634 --> 00:15:08.767
If you want to,
there's a GetBitmap method.

00:15:08.767 --> 00:15:11.367
You can use the method
of the bitmap class

00:15:11.367 --> 00:15:13.133
called createScaledBitmap,

00:15:13.133 --> 00:15:15.300
where you pass
the original bitmap--

00:15:15.300 --> 00:15:16.968
you pass the widths
and the heights

00:15:16.968 --> 00:15:19.734
of the target size.

00:15:19.734 --> 00:15:21.033
So most often,

00:15:21.033 --> 00:15:23.567
you will pass the width
and the height of the view.

00:15:23.567 --> 00:15:25.801
 And the last--the last--

00:15:25.801 --> 00:15:28.834
the last parameter should
probably always be set to true.

00:15:28.834 --> 00:15:30.667
The bilinear filtering
I was talking about,

00:15:30.667 --> 00:15:33.834
because it's a bit slower,
but it makes--

00:15:33.834 --> 00:15:38.968
it gives you better results.

00:15:38.968 --> 00:15:40.634
Window backgrounds.

00:15:40.634 --> 00:15:44.534
By default,
all activities are in a window.

00:15:44.534 --> 00:15:46.701
And all windows have
a default background.

00:15:46.701 --> 00:15:49.734
So the default background
currently on the T-Mobile G1,

00:15:49.734 --> 00:15:52.400
or on the device that you got
at Google I/O,

00:15:52.400 --> 00:15:53.734
is just simple
color drawables.

00:15:53.734 --> 00:15:57.634
We just fill the screen
with a single color.

00:15:57.634 --> 00:16:00.200
And in some cases,

00:16:00.200 --> 00:16:03.467
we don't really need to have
the background.

00:16:03.467 --> 00:16:06.200
For instance, if you are writing
a maps application

00:16:06.200 --> 00:16:08.667
and you have a map view
that fills the entire screen,

00:16:08.667 --> 00:16:10.367
that map view is opaque.

00:16:10.367 --> 00:16:12.200
Like you will never see
the background of the window

00:16:12.200 --> 00:16:14.567
that's behind the map view.

00:16:14.567 --> 00:16:16.067
Unfortunately,
the UI toolkit

00:16:16.067 --> 00:16:17.934
is really stupid
in that situation.

00:16:17.934 --> 00:16:19.901
And every time it has
to refresh the map view,

00:16:19.901 --> 00:16:22.767
it will still redraw
the background of the window

00:16:22.767 --> 00:16:24.667
even though you don't see it.

00:16:24.667 --> 00:16:27.067
Again, totally my fault.

00:16:27.067 --> 00:16:30.000
So--ahem--you can be
mad at me for that.

00:16:30.000 --> 00:16:31.567
And actually,
it's pretty expensive

00:16:31.567 --> 00:16:33.334
to draw the window
background.

00:16:33.334 --> 00:16:35.334
The fastest background
you can draw

00:16:35.334 --> 00:16:36.934
is a simple color.

00:16:36.934 --> 00:16:38.367
Like it's a solid color.

00:16:38.367 --> 00:16:40.367
So this is the default
background we have.

00:16:40.367 --> 00:16:42.067
And on the T-Mobile G1 one,

00:16:42.067 --> 00:16:44.167
because of the limitation
of the memory bus,

00:16:44.167 --> 00:16:46.667
it takes about
3 to 4 milliseconds

00:16:46.667 --> 00:16:48.367
to draw that background.

00:16:48.367 --> 00:16:49.734
Which means that
if you're trying

00:16:49.734 --> 00:16:51.667
to animate something
onscreen

00:16:51.667 --> 00:16:55.567
at 60 frames per second,
you're really 4 milliseconds

00:16:55.567 --> 00:16:58.534
out of the 60 milliseconds
you have per frame

00:16:58.534 --> 00:17:01.267
to be able to achieve
that frame rate.

00:17:01.267 --> 00:17:04.267
So a quarter of
your allocated time

00:17:04.267 --> 00:17:06.133
is already going
into something

00:17:06.133 --> 00:17:08.234
that's totally useless
for you.

00:17:08.234 --> 00:17:10.167
So when you have
an application

00:17:10.167 --> 00:17:12.968
in which you have a view
that fills the screen

00:17:12.968 --> 00:17:14.968
that covers the entire window
background,

00:17:14.968 --> 00:17:16.968
you can get rid of
the window background.

00:17:16.968 --> 00:17:18.601
And the best way to do this

00:17:18.601 --> 00:17:22.033
is to create a new theme
for your activity.

00:17:22.033 --> 00:17:24.033
So in the--

00:17:24.033 --> 00:17:25.467
You just have to create
the style--

00:17:25.467 --> 00:17:29.534
the XML file in the values
directory of your application.

00:17:29.534 --> 00:17:33.100
And this the exact syntax
to create a new theme.

00:17:33.100 --> 00:17:36.968
The theme can be called--
can have any name you want.

00:17:36.968 --> 00:17:39.868
Here I chose the name
"Theme.NoBackground."

00:17:39.868 --> 00:17:43.434
And we inherit from
the default theme in Android

00:17:43.434 --> 00:17:45.968
called android:Theme.

00:17:45.968 --> 00:17:47.667
And the only item
that we have here

00:17:47.667 --> 00:17:50.200
is a style for
the default window background.

00:17:50.200 --> 00:17:52.801
And we use the special syntax
@null to indicate

00:17:52.801 --> 00:17:56.000
that we don't want
any background on our view--

00:17:56.000 --> 00:17:57.901
on our window.

00:17:57.901 --> 00:18:01.200
Once you have your theme defined
in XML, in your resources,

00:18:01.200 --> 00:18:03.701
you can simply apply it
to your activity

00:18:03.701 --> 00:18:07.000
with the simple attribute
android:Theme,

00:18:07.000 --> 00:18:10.667
and then the syntax
is @style--

00:18:10.667 --> 00:18:12.434
and actually,
there is a typo in my slide.

00:18:12.434 --> 00:18:15.000
It's no--it's not
NoBackgroundTheme.

00:18:15.000 --> 00:18:16.834
It's Theme.NoBackground.

00:18:16.834 --> 00:18:20.100
So the name is
Theme.NoBackground,

00:18:20.100 --> 00:18:23.033
and here the theme
should be Theme.NoBackground.

00:18:23.033 --> 00:18:25.467
And by doing that
you will effectively get rid

00:18:25.467 --> 00:18:28.634
of the background
on your window.

00:18:28.634 --> 00:18:31.234
And you will get
a better frame rate.

00:18:31.234 --> 00:18:34.667
So here we have the version
of the application

00:18:34.667 --> 00:18:35.834
with the background.

00:18:35.834 --> 00:18:39.400
So we have about 43, 44 frames
per second.

00:18:39.400 --> 00:18:40.968
And without the background,

00:18:40.968 --> 00:18:44.334
we get up to 50-something
frames per second.

00:18:44.334 --> 00:18:47.100
So it will highly depend
on the device you're running on

00:18:47.100 --> 00:18:50.267
'cause it's mostly bound
by the memory bus.

00:18:50.267 --> 00:18:52.567
But you can be--
you're guaranteed that

00:18:52.567 --> 00:18:55.200
you're gonna get
a few frames per second back.

00:18:55.200 --> 00:18:57.334
So if you're writing
a game, especially,

00:18:57.334 --> 00:19:00.267
or a maps application
or GPS application,

00:19:00.267 --> 00:19:03.767
something that will refresh
the entire screen very often,

00:19:03.767 --> 00:19:07.834
remember to use that trick.

00:19:07.834 --> 00:19:09.133
Okay, and some good news.

00:19:09.133 --> 00:19:11.734
I just told you that
the framework is really stupid

00:19:11.734 --> 00:19:13.667
because it draws
that window background

00:19:13.667 --> 00:19:15.467
even though it doesn't need to.

00:19:15.467 --> 00:19:17.501
As of three weeks ago,

00:19:17.501 --> 00:19:19.467
the framework is not
doing that anymore.

00:19:19.467 --> 00:19:21.934
It's finally a little smarter.

00:19:21.934 --> 00:19:23.667
And that would be part of
the Donut release.

00:19:23.667 --> 00:19:25.300
So in the next version
of Android,

00:19:25.300 --> 00:19:27.534
you won't have to worry
about that.

00:19:27.534 --> 00:19:28.701
Unfortunately,

00:19:28.701 --> 00:19:30.634
users are still running
Android 1.1

00:19:30.634 --> 00:19:33.868
and they're starting to get 1.5
on their devices.

00:19:33.868 --> 00:19:37.534
So please apply that tip.

00:19:37.534 --> 00:19:40.534
And also if you keep
using that trick

00:19:40.534 --> 00:19:44.734
in Android--
on Donut, it will--

00:19:44.734 --> 00:19:46.033
your application will
still run pretty fast.

00:19:46.033 --> 00:19:47.367
It will actually even--

00:19:47.367 --> 00:19:48.734
it will be even better
than what the framework does

00:19:48.734 --> 00:19:50.934
because you won't keep
the background in memory

00:19:50.934 --> 00:19:55.167
and you will save
a little memory.

00:19:55.167 --> 00:19:58.601
Now let's talk about drawing.

00:19:58.601 --> 00:20:01.133
So every time you want
to redraw a view,

00:20:01.133 --> 00:20:04.067
you have to call a method
called invalidate.

00:20:04.067 --> 00:20:05.133
It's pretty easy to use,

00:20:05.133 --> 00:20:07.667
but it can also be
very expensive.

00:20:07.667 --> 00:20:09.100
To give you an idea,

00:20:09.100 --> 00:20:12.033
if you have a fairly reasonable
view hierarchy--

00:20:12.033 --> 00:20:14.334
so let's say that
you create an application

00:20:14.334 --> 00:20:16.000
like the contacts application.

00:20:16.000 --> 00:20:17.367
When you call invalidate

00:20:17.367 --> 00:20:20.100
on one of the widgets
on the screen,

00:20:20.100 --> 00:20:22.501
it can take up to
3 or 4 milliseconds

00:20:22.501 --> 00:20:24.634
for the framework to do

00:20:24.634 --> 00:20:26.467
whatever it has to do
with that command,

00:20:26.467 --> 00:20:27.734
and then comes back--

00:20:27.734 --> 00:20:31.400
comes back to your view
and sends you the draw command.

00:20:31.400 --> 00:20:35.667
Another issue
with invalidation

00:20:35.667 --> 00:20:38.067
is that when you invalidate

00:20:38.067 --> 00:20:39.734
several views at
the same time onscreen--

00:20:39.734 --> 00:20:41.200
so let's say I invalidate
the view

00:20:41.200 --> 00:20:42.601
in the bottom left corner,

00:20:42.601 --> 00:20:44.000
and at the same time
I have a view

00:20:44.000 --> 00:20:47.067
that's invalidating itself
in the top right corner,

00:20:47.067 --> 00:20:49.801
the framework will take
the union of those two regions,

00:20:49.801 --> 00:20:52.100
which will be pretty much
the entire screen,

00:20:52.100 --> 00:20:53.400
and you will end up
invalidating

00:20:53.400 --> 00:20:55.467
a lot more than
what you need.

00:20:55.467 --> 00:20:57.501
So as much as you can,

00:20:57.501 --> 00:21:02.100
you shouldn't validate
small regions of the screen.

00:21:02.100 --> 00:21:03.834
To do this,
we have two methods

00:21:03.834 --> 00:21:06.267
called invalidate,
and you pass a rectangle,

00:21:06.267 --> 00:21:07.801
or invalidate,
and you press the coordinates

00:21:07.801 --> 00:21:10.667
of the rectangle
to invalidate.

00:21:10.667 --> 00:21:15.634
Those methods are part of
the API on the view class.

00:21:15.634 --> 00:21:17.300
And they're really effective

00:21:17.300 --> 00:21:20.567
to improve the performance
of your application.

00:21:20.567 --> 00:21:22.834
If you invalidate just
a tiny portion of the screen,

00:21:22.834 --> 00:21:24.868
the framework
will be smart enough

00:21:24.868 --> 00:21:26.434
to avoid drawing anything

00:21:26.434 --> 00:21:28.334
that falls outside of
this region.

00:21:28.334 --> 00:21:30.534
And Skia itself,
the rendering engine,

00:21:30.534 --> 00:21:32.367
will just ignore all
the drawing comments

00:21:32.367 --> 00:21:36.067
that are not part of
this dirty region.

00:21:36.067 --> 00:21:38.834
I actually have a demo
that shows you

00:21:38.834 --> 00:21:41.033
how it can be using
the application.

00:21:41.033 --> 00:21:43.200
So here I have the emulator.

00:21:43.200 --> 00:21:46.033
And I'm sure you all did this
on the home screen.

00:21:46.033 --> 00:21:48.601
So when you drag
an item around,

00:21:48.601 --> 00:21:50.501
it follows your finger.

00:21:50.501 --> 00:21:53.234
And the homescreen
has to invalidate the screen

00:21:53.234 --> 00:21:54.634
to be able to draw the icon

00:21:54.634 --> 00:21:57.334
at the new position
when you move it.

00:21:57.334 --> 00:22:01.334
The first implementation
I did of that feature

00:22:01.334 --> 00:22:03.467
was invalidating
the whole screen

00:22:03.467 --> 00:22:05.167
every time you moved
the icon.

00:22:05.167 --> 00:22:07.634
And the system was not able
to follow the finger.

00:22:07.634 --> 00:22:09.334
The icon was lagging behind

00:22:09.334 --> 00:22:11.601
because it was drawing
way too much.

00:22:11.601 --> 00:22:14.567
So now,
I'm using this invalidate

00:22:14.567 --> 00:22:18.100
with a rectangle,
and I'll show you exactly

00:22:18.100 --> 00:22:21.901
what is redrawn every time.

00:22:21.901 --> 00:22:24.901
So now when I drag
an icon around,

00:22:24.901 --> 00:22:27.067
you can see exactly
the portion of the screen

00:22:27.067 --> 00:22:28.400
that gets redrawn.

00:22:28.400 --> 00:22:31.300
Everything else
is just ignored.

00:22:31.300 --> 00:22:32.434
And what I just did here--

00:22:32.434 --> 00:22:34.934
so if you go to the Dev Tools,

00:22:34.934 --> 00:22:37.300
that's part of--

00:22:37.300 --> 00:22:38.701
isn't that part of
the SDK?

00:22:38.701 --> 00:22:40.267
Dev Tools.

00:22:40.267 --> 00:22:41.300
Well, anyway,
it's either part of the SDK

00:22:41.300 --> 00:22:43.067
or available somewhere.

00:22:43.067 --> 00:22:44.267
You can--

00:22:44.267 --> 00:22:45.667
[audience laughs]

00:22:45.667 --> 00:22:47.801
Yeah, somewhere to be defined.

00:22:47.801 --> 00:22:49.334
It's probably in
the source code

00:22:49.334 --> 00:22:51.501
of the Android system.

00:22:51.501 --> 00:22:53.767
Send me e-mails
if you can't find it.

00:22:53.767 --> 00:22:56.234
So if you click that box,
"Show screen updates,"

00:22:56.234 --> 00:22:58.734
every time invalidate happens,

00:22:58.734 --> 00:23:02.267
you will see it flash
in this beautiful pink color.

00:23:02.267 --> 00:23:04.634
And it's a really awesome
and easy way

00:23:04.634 --> 00:23:07.200
to debug your application
and make sure

00:23:07.200 --> 00:23:10.834
that you're not updating
too much on the screen.

00:23:10.834 --> 00:23:13.167
So here, for instance,
I'm showing you something

00:23:13.167 --> 00:23:16.000
that's really bad and drives me
nuts every time I see it.

00:23:16.000 --> 00:23:18.133
So that's the new search system
in Donut

00:23:18.133 --> 00:23:20.534
that I demoed yesterday.

00:23:20.534 --> 00:23:22.000
And when I click
the search widget,

00:23:22.000 --> 00:23:23.334
you can see that
for some reason

00:23:23.334 --> 00:23:25.000
the entire screen
is being redrawn.

00:23:25.000 --> 00:23:26.567
There's absolutely no reason
to do that.

00:23:26.567 --> 00:23:29.067
So we have to fix it.

00:23:29.067 --> 00:23:31.434
So please do use that feature.

00:23:31.434 --> 00:23:32.968
It's pretty awesome.

00:23:32.968 --> 00:23:34.334
But let me disable it,

00:23:34.334 --> 00:23:36.667
'cause it's also pretty
annoying.

00:23:36.667 --> 00:23:38.601
There we go.

00:23:44.834 --> 00:23:46.801
Now to give you an idea--

00:23:46.801 --> 00:23:50.300
so those numbers come
actually from the home screen.

00:23:50.300 --> 00:23:53.968
When I was using invalidate
to redraw the icon

00:23:53.968 --> 00:23:56.567
when it was following my--
trying to follow my finger,

00:23:56.567 --> 00:23:59.367
I was getting about
18 frames per second.

00:23:59.367 --> 00:24:02.501
And now that it's invalidating
only the icon,

00:24:02.501 --> 00:24:04.567
the new position
and the old position,

00:24:04.567 --> 00:24:07.601
we get almost 50 frames
per second.

00:24:07.601 --> 00:24:08.868
So that--

00:24:08.868 --> 00:24:10.133
the improvements
when you do these

00:24:10.133 --> 00:24:12.534
can be pretty awesome.

00:24:12.534 --> 00:24:14.234
And they highly depend on
the number of views

00:24:14.234 --> 00:24:15.133
you have in your application.

00:24:15.133 --> 00:24:17.133
So the more complex your UI,

00:24:17.133 --> 00:24:22.300
the more you will want
to use that kind of trick.

00:24:22.300 --> 00:24:24.467
Speaking of use--

00:24:24.467 --> 00:24:27.234
okay, so that's one of
my pet peeves.

00:24:27.234 --> 00:24:29.501
From time to time,
I go on the market,

00:24:29.501 --> 00:24:32.400
I download an application
and I look at its layout.

00:24:32.400 --> 00:24:36.133
I look at the number of--
number of views it's using.

00:24:36.133 --> 00:24:38.100
And very often,
I'm really mad at

00:24:38.100 --> 00:24:40.367
whoever wrote the application.

00:24:40.367 --> 00:24:43.100
We do our best
to have a framework

00:24:43.100 --> 00:24:45.534
that's fairly solid,
that has tons of features,

00:24:45.534 --> 00:24:47.234
but that's also
pre-performance.

00:24:47.234 --> 00:24:48.567
Unfortunately,

00:24:48.567 --> 00:24:50.133
we're still running
on mobile phones.

00:24:50.133 --> 00:24:52.601
And no matter what we do,
we have constraints

00:24:52.601 --> 00:24:55.200
in memory, in CPU,
in memory bandwidth,

00:24:55.200 --> 00:24:57.100
that kind of things.

00:24:57.100 --> 00:24:58.200
And the more views you use,

00:24:58.200 --> 00:25:00.334
the more views you put
in your UI,

00:25:00.334 --> 00:25:02.834
the worse
the performance will be.

00:25:02.834 --> 00:25:05.901
So if you have too many views,
the start-up type--

00:25:05.901 --> 00:25:07.767
the start-up time
of the application

00:25:07.767 --> 00:25:09.968
will be a lot longer.

00:25:09.968 --> 00:25:11.801
It will take a lot more time
to measure

00:25:11.801 --> 00:25:13.400
and load the application.

00:25:13.400 --> 00:25:15.501
It actually can become
really bad

00:25:15.501 --> 00:25:19.901
if you imbed several linear
layouts that can trigger--

00:25:19.901 --> 00:25:22.767
each layout can trigger
several layout phases.

00:25:22.767 --> 00:25:26.100
So you can end up--
just lay out the screen once.

00:25:26.100 --> 00:25:28.267
Instantly, the system
might end up

00:25:28.267 --> 00:25:31.400
doing the layout
20 or 40 times.

00:25:31.400 --> 00:25:34.067
And also, the drawing would be
a lot slower.

00:25:34.067 --> 00:25:37.267
And some of you may have
encountered an issue

00:25:37.267 --> 00:25:38.834
if you have
way too many views.

00:25:38.834 --> 00:25:41.834
If you have way too many layouts
in your view hierarchy,

00:25:41.834 --> 00:25:44.467
you will even get
a StackOverflowException.

00:25:44.467 --> 00:25:46.934
Have you guys ever run into
this issue,

00:25:46.934 --> 00:25:49.367
the StackOverflow?

00:25:49.367 --> 00:25:52.567
Yeah, one hand over there.
Behind you.

00:25:52.567 --> 00:25:54.934
[audience laughs]

00:25:54.934 --> 00:25:58.968
The stack, the default
stack size on Android

00:25:58.968 --> 00:26:00.767
is currently 8 kilobytes.

00:26:00.767 --> 00:26:02.901
That's not much.

00:26:02.901 --> 00:26:05.000
So that means in Cupcake,
if you have about

00:26:05.000 --> 00:26:08.834
14 or 15 embedded view groups
or layouts,

00:26:08.834 --> 00:26:10.801
you will hit
a StackOverflowException.

00:26:10.801 --> 00:26:13.934
The system doesn't have
enough memory to run the code.

00:26:13.934 --> 00:26:15.868
We increased that size
in Donut

00:26:15.868 --> 00:26:19.100
because we're introducing
new features that will--

00:26:19.100 --> 00:26:21.467
that could prime
your applications.

00:26:21.467 --> 00:26:23.934
But the point here is,
the more views you use,

00:26:23.934 --> 00:26:25.467
the slower the application.

00:26:25.467 --> 00:26:27.634
And actually,
sometimes it's not that hard

00:26:27.634 --> 00:26:29.567
to remove views.

00:26:29.567 --> 00:26:31.968
And also, it helps you
when you debug.

00:26:31.968 --> 00:26:33.267
Like the less views
you have,

00:26:33.267 --> 00:26:36.367
the easier it will be
to debug your UI.

00:26:36.367 --> 00:26:37.801
So I'm pretty sure
that some of you

00:26:37.801 --> 00:26:40.934
went to the session
this morning by Justin

00:26:40.934 --> 00:26:43.067
where he showed
Hierarchy Viewer.

00:26:43.067 --> 00:26:45.200
But I want to show you
that tool again.

00:26:45.200 --> 00:26:48.267
That's something I use
very often.

00:26:48.267 --> 00:26:49.901
So how many of you
use that tool

00:26:49.901 --> 00:26:53.000
in your developments?

00:26:53.000 --> 00:26:55.667
That's not enough.

00:26:55.667 --> 00:26:57.200
Okay.

00:26:57.200 --> 00:26:58.634
So Hierarchy Viewer,

00:26:58.634 --> 00:27:01.601
let me show you
how it works.

00:27:01.601 --> 00:27:03.868
I will show you the version
that's from our tree,

00:27:03.868 --> 00:27:06.234
but Hierarchy Viewer is a tool
that comes from the SDK,

00:27:06.234 --> 00:27:09.200
so you can just double-click
the Hierarchy Viewer executable

00:27:09.200 --> 00:27:13.067
and you will get
pretty much the same tool.

00:27:13.067 --> 00:27:16.601
So that tool works with
the emulator.

00:27:16.601 --> 00:27:17.968
It also works with devices.

00:27:17.968 --> 00:27:21.234
Unfortunately, it doesn't work
for security reasons

00:27:21.234 --> 00:27:23.634
with consumer devices.

00:27:23.634 --> 00:27:25.267
So if you have an ADP1,

00:27:25.267 --> 00:27:28.534
or even maybe with a phone
that you just got yesterday,

00:27:28.534 --> 00:27:30.334
it might work.

00:27:30.334 --> 00:27:32.467
But if it doesn't work
with a phone,

00:27:32.467 --> 00:27:34.767
you can just use it
with the emulator.

00:27:34.767 --> 00:27:36.734
So here I can see
the list of devices

00:27:36.734 --> 00:27:38.901
that are attached to
my computer.

00:27:38.901 --> 00:27:41.300
I have only the emulator.

00:27:41.300 --> 00:27:43.400
And over to the right side,
I have the list of windows.

00:27:43.400 --> 00:27:45.300
So I can inspect any window
I want,

00:27:45.300 --> 00:27:46.934
any application I want.

00:27:46.934 --> 00:27:49.534
And it's by default.
I don't select anything.

00:27:49.534 --> 00:27:52.334
It's gonna choose the window
that's currently

00:27:52.334 --> 00:27:53.667
the foreground window.

00:27:53.667 --> 00:27:56.801
So then you just click
the Load Viewer Hierarchy.

00:27:56.801 --> 00:27:59.400
And this is asking the device
to send a dump

00:27:59.400 --> 00:28:02.234
of the current UI
back to the tool.

00:28:02.234 --> 00:28:05.467
And then in the tool,
you can get an overview

00:28:05.467 --> 00:28:08.033
of what the view tree
looks like.

00:28:08.033 --> 00:28:10.200
So that's the home screen.

00:28:10.200 --> 00:28:12.601
And actually,
that's a pretty good tree

00:28:12.601 --> 00:28:16.634
because it's very wide,
but it's also very flat.

00:28:16.634 --> 00:28:19.100
What really matters
is that you don't have

00:28:19.100 --> 00:28:22.634
too many levels in the tree.

00:28:22.634 --> 00:28:24.234
If it's wide, that's okay.

00:28:24.234 --> 00:28:25.367
Here at the bottom,

00:28:25.367 --> 00:28:27.467
you can see how many views
you have in UI.

00:28:27.467 --> 00:28:29.567
So here we have 39 views.

00:28:29.567 --> 00:28:32.400
So that includes the grid
with all your applications,

00:28:32.400 --> 00:28:34.334
all the icons that you have
on your homescreen,

00:28:34.334 --> 00:28:37.133
your widgets,
all that stuff.

00:28:37.133 --> 00:28:42.801
A good number of views
is usually between zero,

00:28:42.801 --> 00:28:46.200
and you can
go up to 80 or 100,

00:28:46.200 --> 00:28:47.767
but that's pushing it.

00:28:47.767 --> 00:28:49.067
If you go above that,

00:28:49.067 --> 00:28:51.734
you really, really
need to rethink your UI

00:28:51.734 --> 00:28:52.901
and improve it.

00:28:52.901 --> 00:28:55.434
And something we introduced
in Cupcake

00:28:55.434 --> 00:28:58.334
to give you a better idea
of whether your changes

00:28:58.334 --> 00:29:00.367
are improving
the application

00:29:00.367 --> 00:29:02.400
is this little table
over there.

00:29:02.400 --> 00:29:05.767
So those numbers are--
actually come from the device,

00:29:05.767 --> 00:29:08.367
and they tell you how much time
it took in milliseconds

00:29:08.367 --> 00:29:11.868
to measure all the views
in the hierarchy,

00:29:11.868 --> 00:29:14.567
how long it took them
to do the actual layout,

00:29:14.567 --> 00:29:17.434
and how long it took
to draw them.

00:29:17.434 --> 00:29:19.834
So those numbers are not
perfect, 'cause if the device

00:29:19.834 --> 00:29:23.634
is busy because there's a sync
happening in the background,

00:29:23.634 --> 00:29:25.767
or if an application
is viewing the CPU,

00:29:25.767 --> 00:29:27.334
those numbers will vary.

00:29:27.334 --> 00:29:28.734
But it will give you
a good idea

00:29:28.734 --> 00:29:32.100
and a good understanding
of what's going on.

00:29:32.100 --> 00:29:35.767
And here, those numbers
are actually pretty good

00:29:35.767 --> 00:29:38.434
but they should be
a lot better.

00:29:38.434 --> 00:29:40.267
Having 6 milliseconds spent

00:29:40.267 --> 00:29:41.534
doing a layout of
the whole screen,

00:29:41.534 --> 00:29:43.100
that's actually really good.

00:29:43.100 --> 00:29:45.868
But spending 30 milliseconds
drawing the screen

00:29:45.868 --> 00:29:47.934
is not good enough.

00:29:47.934 --> 00:29:51.834
That means you can't animate
at 60 frames per second.

00:29:51.834 --> 00:29:53.934
So that's a really good way
to see

00:29:53.934 --> 00:29:55.734
if you're improving your UI.

00:29:55.734 --> 00:29:58.067
And usually what you want
to look for

00:29:58.067 --> 00:30:03.501
in the Hierarchy Viewer tool
is places where

00:30:03.501 --> 00:30:05.167
I don't think have
an example here.

00:30:05.167 --> 00:30:08.067
But you want to look for
layouts,

00:30:08.067 --> 00:30:10.367
a view group
that has only one child.

00:30:10.367 --> 00:30:15.100
It means that one child
has widths of field parent

00:30:15.100 --> 00:30:16.567
and the height
of field parent,

00:30:16.567 --> 00:30:19.767
then you know that one of those
two views is useless.

00:30:19.767 --> 00:30:21.467
So here, that could be
an example.

00:30:21.467 --> 00:30:23.100
That frame layout
could be removed,

00:30:23.100 --> 00:30:25.234
but that's actually
used by the framework

00:30:25.234 --> 00:30:28.601
for many reasons,
so we have to keep it here.

00:30:28.601 --> 00:30:31.767
But--so try to look for layouts
that have only one child

00:30:31.767 --> 00:30:34.501
and try to get rid of them.

00:30:37.567 --> 00:30:40.501
[muttering]

00:30:45.400 --> 00:30:47.734
So once you've looked at
your layout in Hierarchy Viewer

00:30:47.734 --> 00:30:49.267
and you decided that,
yeah, it sucks

00:30:49.267 --> 00:30:52.801
and you have too many views,
you need to fix it.

00:30:52.801 --> 00:30:54.667
And I don't know how
I did that.

00:30:54.667 --> 00:30:56.234
There we go.

00:30:56.234 --> 00:30:59.701
And here are a few solutions
we can use.

00:30:59.701 --> 00:31:03.000
The easiest solution
is actually to use a--

00:31:03.000 --> 00:31:05.601
what we call
the compound drawables.

00:31:05.601 --> 00:31:07.501
I hate that name

00:31:07.501 --> 00:31:09.601
'cause it's hard to say
for me,

00:31:09.601 --> 00:31:11.334
and it's really long to type,

00:31:11.334 --> 00:31:13.834
and it has
the worst API name ever.

00:31:13.834 --> 00:31:16.634
There's a method on things
you call set compound drawable

00:31:16.634 --> 00:31:19.033
with intrinsic bounds.

00:31:19.033 --> 00:31:21.434
Yeah, you can laugh.

00:31:21.434 --> 00:31:24.400
But the idea behind it is if--

00:31:24.400 --> 00:31:26.200
if in your UI somewhere,

00:31:26.200 --> 00:31:29.734
you have an image next to
a piece of text.

00:31:29.734 --> 00:31:32.367
Usually how people do that
is usually a linear layout,

00:31:32.367 --> 00:31:33.934
then they put an ImageView
for the image

00:31:33.934 --> 00:31:35.634
and a TextView for the text.

00:31:35.634 --> 00:31:38.234
It seems pretty straightforward
and pretty logical.

00:31:38.234 --> 00:31:41.167
But that means that
you have three views

00:31:41.167 --> 00:31:43.834
to just display an icon
and a piece of text.

00:31:43.834 --> 00:31:47.133
So instead, you can use
this feature of TextView,

00:31:47.133 --> 00:31:50.801
with its terrible name,
to replace the linear layout

00:31:50.801 --> 00:31:53.868
of the TextView and ImageView,
but only one TextView.

00:31:53.868 --> 00:31:55.767
So here, I have
a simple example on the left.

00:31:55.767 --> 00:31:59.634
You see XML that produced
this tree here.

00:31:59.634 --> 00:32:01.300
We have
a horizontal linear layout

00:32:01.300 --> 00:32:02.567
and ImageView on the left,

00:32:02.567 --> 00:32:04.767
and a piece of text
on the right.

00:32:04.767 --> 00:32:10.133
And the equivalent to this
is the XML on the right.

00:32:10.133 --> 00:32:12.634
So it's pretty much
the same TextView

00:32:12.634 --> 00:32:15.901
except we use this attribute
called drawableLeft

00:32:15.901 --> 00:32:18.334
that will simply set
a bitmap

00:32:18.334 --> 00:32:20.200
on the left side of the text.

00:32:20.200 --> 00:32:22.467
You can also set bitmaps
above the text,

00:32:22.467 --> 00:32:24.367
below the text,
and on the right.

00:32:24.367 --> 00:32:26.100
And you can set four bitmaps
at the same time

00:32:26.100 --> 00:32:28.634
if for some reason
you need to do this.

00:32:28.634 --> 00:32:29.934
So it's very easy to do,

00:32:29.934 --> 00:32:33.000
very efficient way to improve
your UIs.

00:32:33.000 --> 00:32:34.367
Now, the ViewStub.

00:32:34.367 --> 00:32:35.934
How many of you ever used
a ViewStub

00:32:35.934 --> 00:32:37.100
or even know what it is?

00:32:37.100 --> 00:32:38.901
Okay.

00:32:38.901 --> 00:32:40.734
That's not enough.

00:32:40.734 --> 00:32:42.934
You guys should, you know,
read the docs.

00:32:42.934 --> 00:32:45.334
Well, the docs that we wrote.

00:32:45.334 --> 00:32:46.400
Um...

00:32:46.400 --> 00:32:48.234
[audience laughs]

00:32:48.234 --> 00:32:50.801
Hey, we're working on it.

00:32:50.801 --> 00:32:55.601
So the idea of a ViewStub
is whenever you have a UI

00:32:55.601 --> 00:32:58.868
in which there's
a part of the UI

00:32:58.868 --> 00:33:00.234
that you don't show
very often--

00:33:00.234 --> 00:33:02.968
I'm sure you've all used,
like, the invisible mode

00:33:02.968 --> 00:33:07.200
or the gone mode of the views
to hide them from the UI.

00:33:07.200 --> 00:33:09.767
Uh, so if you have a UI
in which, you know,

00:33:09.767 --> 00:33:11.601
parts of the UI
is most of the time gone

00:33:11.601 --> 00:33:14.234
or invisible,
instead you can use a ViewStub.

00:33:14.234 --> 00:33:17.734
The idea of ViewStub
is to, um,

00:33:17.734 --> 00:33:21.133
is to inflate
part of the UI on demand.

00:33:21.133 --> 00:33:23.200
So a ViewStub
is an actual view

00:33:23.200 --> 00:33:25.033
but it has a size of 0.

00:33:25.033 --> 00:33:27.367
So it's 0 pixels wide,
0 pixels high.

00:33:27.367 --> 00:33:29.100
It doesn't participate
in the layout.

00:33:29.100 --> 00:33:30.467
It doesn't draw anything.

00:33:30.467 --> 00:33:32.334
So it's really cheap to have
a ViewStub

00:33:32.334 --> 00:33:33.467
in your view hierarchy.

00:33:33.467 --> 00:33:35.100
And when you create
a ViewStub,

00:33:35.100 --> 00:33:37.667
you give it a reference
to an XML layout file.

00:33:37.667 --> 00:33:40.501
And whatever you call, um--

00:33:40.501 --> 00:33:42.834
you make that ViewStub visible,

00:33:42.834 --> 00:33:45.834
it will remove itself
from the view hierarchy

00:33:45.834 --> 00:33:49.701
and insert
the inflated XML layout

00:33:49.701 --> 00:33:50.801
where it used to be.

00:33:50.801 --> 00:33:53.734
So here it's the same tree,

00:33:53.734 --> 00:33:56.434
and in blue, you see--
you can see the ViewStub.

00:33:56.434 --> 00:33:58.267
And now we have the same tree,

00:33:58.267 --> 00:34:02.000
but the blue, uh--
the blue subtree

00:34:02.000 --> 00:34:05.133
actually comes from
the XML file

00:34:05.133 --> 00:34:06.534
the ViewStub knew about.

00:34:06.534 --> 00:34:08.400
So I call set visible
on the ViewStub,

00:34:08.400 --> 00:34:09.868
the ViewStub disappeared,

00:34:09.868 --> 00:34:13.701
and instead we get this new, uh,
this new bit of UI.

00:34:13.701 --> 00:34:18.567
It's also an awesome way
to create generic screens

00:34:18.567 --> 00:34:22.567
without paying the cost
of having too many views inside.

00:34:22.567 --> 00:34:23.968
And this is how
you use a ViewStub

00:34:23.968 --> 00:34:25.000
It's really easy.

00:34:25.000 --> 00:34:27.434
So ViewStub must have an ID

00:34:27.434 --> 00:34:30.100
if you want to be able to--
to get the handle of it--

00:34:30.100 --> 00:34:32.767
to it and inflate it.

00:34:32.767 --> 00:34:36.467
You also probably want
to specify the ID

00:34:36.467 --> 00:34:39.067
of the inflated view,
so that's the ID

00:34:39.067 --> 00:34:40.834
that will be assigned
to view that

00:34:40.834 --> 00:34:42.467
when you inflate
with the ViewStub.

00:34:42.467 --> 00:34:45.200
And you also want
to pass the reference

00:34:45.200 --> 00:34:47.267
to the layout
you want to inflate.

00:34:47.267 --> 00:34:50.634
Now, on the ViewStub,
you don't need to specify

00:34:50.634 --> 00:34:52.000
the layout_ attribute.

00:34:52.000 --> 00:34:53.234
So you don't need
to give a width,

00:34:53.234 --> 00:34:54.534
you don't need
to give a height.

00:34:54.534 --> 00:34:57.534
But if you do, those will be
automatically assigned

00:34:57.534 --> 00:35:01.200
to the inflated view
from the XML.

00:35:01.200 --> 00:35:03.167
So it's also
a really easy way

00:35:03.167 --> 00:35:08.033
to reuse an XML layout
and still customize it

00:35:08.033 --> 00:35:11.467
with specific layout attributes
in a given screen.

00:35:11.467 --> 00:35:13.901
So then in your code,
what you have to do

00:35:13.901 --> 00:35:15.234
is, uh, find the ViewStub

00:35:15.234 --> 00:35:17.334
and set its visibility
to visible,

00:35:17.334 --> 00:35:18.934
and magic will happen.

00:35:18.934 --> 00:35:21.334
And everything will appear
in your UI.

00:35:21.334 --> 00:35:23.701
You can also
call the method inflate,

00:35:23.701 --> 00:35:26.100
instead of setVisibility
VISIBLE.

00:35:26.100 --> 00:35:28.634
The cool thing
about doing an inflate

00:35:28.634 --> 00:35:30.133
is that it returns you

00:35:30.133 --> 00:35:32.067
a reference
to the inflated view.

00:35:32.067 --> 00:35:34.567
So you don't have to do
another findViewByID

00:35:34.567 --> 00:35:37.734
to find the view
that you just inflated.

00:35:37.734 --> 00:35:40.734
Uh, and I know that we use that
in several applications.

00:35:40.734 --> 00:35:43.167
And that's where--
you can use Hierarchy Viewer

00:35:43.167 --> 00:35:45.834
to see how other people
write their applications.

00:35:45.834 --> 00:35:47.634
So if you're wondering
how we did

00:35:47.634 --> 00:35:50.100
some of the default
Android application,

00:35:50.100 --> 00:35:51.234
just grab Hierarchy Viewer

00:35:51.234 --> 00:35:52.801
and start inspecting
your layouts

00:35:52.801 --> 00:35:54.400
to see what exactly
we did

00:35:54.400 --> 00:35:57.634
and where we used ViewStubs.

00:35:57.634 --> 00:36:00.834
Another cool XML tag you can use
to improve your hierarchies

00:36:00.834 --> 00:36:02.634
is called, uh, the merge tag.

00:36:02.634 --> 00:36:04.100
Uh, it's a really bad name.

00:36:04.100 --> 00:36:07.834
I couldn't find any--
any better name.

00:36:07.834 --> 00:36:11.000
So declaring XML--

00:36:11.000 --> 00:36:13.434
uh, layouts in XML
is pretty awesome.

00:36:13.434 --> 00:36:16.868
But the biggest issue
is XML itself.

00:36:16.868 --> 00:36:20.200
The problem with XML is that
you need to have a root tag.

00:36:20.200 --> 00:36:22.567
You need a root.

00:36:22.567 --> 00:36:25.734
And if you try to create
XML layouts

00:36:25.734 --> 00:36:27.834
that you reuse in other layouts

00:36:27.834 --> 00:36:30.667
or that you inflate
with the ViewStub,

00:36:30.667 --> 00:36:33.434
you will very often
introduce a view--

00:36:33.434 --> 00:36:35.267
an extra view
in your layout--

00:36:35.267 --> 00:36:39.200
just because you must have
a root tag in your XML file.

00:36:39.200 --> 00:36:41.133
Uh, so here we have an example.

00:36:41.133 --> 00:36:45.200
On the left side,
you can see a pretty simple UI.

00:36:45.200 --> 00:36:48.667
And the blue rectangle--
the blue rectangle

00:36:48.667 --> 00:36:52.968
comes from my, uh--
an XML that I inflated.

00:36:52.968 --> 00:36:56.968
And you can see it has a parent
that's also from layout.

00:36:56.968 --> 00:36:58.167
And that's so useless.

00:36:58.167 --> 00:36:59.400
I don't need to have
a frame layout

00:36:59.400 --> 00:37:00.901
inside the frame layout
because, you know,

00:37:00.901 --> 00:37:03.000
the parent frame layout
has only one child.

00:37:03.000 --> 00:37:04.634
So one of them is useless.

00:37:04.634 --> 00:37:07.734
The reason why I have
this sequence of frame layout

00:37:07.734 --> 00:37:10.634
is because I included
an XML layout.

00:37:10.634 --> 00:37:11.934
I needed a root tag.

00:37:11.934 --> 00:37:14.400
So I just put
a frame layout there.

00:37:14.400 --> 00:37:17.200
The merge tag can only be used
as the root tag

00:37:17.200 --> 00:37:19.000
of an XML layout file.

00:37:19.000 --> 00:37:21.501
And it basically tells
the system,

00:37:21.501 --> 00:37:22.701
"Ignore me.

00:37:22.701 --> 00:37:24.501
"It doesn't matter,
ignore me.

00:37:24.501 --> 00:37:26.834
"All my children
will be assigned

00:37:26.834 --> 00:37:29.467
to whatever parents
I would normally have."

00:37:29.467 --> 00:37:31.267
So if I replace--

00:37:31.267 --> 00:37:35.133
Yeah, somebody's using
Android.

00:37:35.133 --> 00:37:36.601
So if you replace--

00:37:36.601 --> 00:37:40.334
uh, and shame on you
for not turning the sound down.

00:37:40.334 --> 00:37:42.400
So if you replace
the frame layout

00:37:42.400 --> 00:37:46.267
in the XML file that you're
including by a merge tag,

00:37:46.267 --> 00:37:48.000
then the hierarchy becomes

00:37:48.000 --> 00:37:49.567
the hierarchy you see
on the right.

00:37:49.567 --> 00:37:52.300
And we have one, uh,
one level less

00:37:52.300 --> 00:37:53.868
in the hierarchy,
so it's more preferment.

00:37:53.868 --> 00:37:56.434
It takes less time to inflate
and so on and so on.

00:37:56.434 --> 00:37:59.133
So that's how you would use
the merge tag in XML.

00:37:59.133 --> 00:38:01.300
It's really simple.
It has no attributes.

00:38:01.300 --> 00:38:05.133
You just have to put
the name space on the tag.

00:38:05.133 --> 00:38:06.834
And I wrote a blog about merge,

00:38:06.834 --> 00:38:08.767
so if you couldn't follow
what I just said,

00:38:08.767 --> 00:38:10.901
go to developer.android.com.

00:38:10.901 --> 00:38:12.267
Click the blog tab

00:38:12.267 --> 00:38:14.534
and look at the User Interface
articles,

00:38:14.534 --> 00:38:15.767
and you will find more--

00:38:15.767 --> 00:38:18.067
more explanations
about the merge tag.

00:38:18.067 --> 00:38:20.367
RelativeLayout.

00:38:20.367 --> 00:38:22.200
I think there was
a session this morning.

00:38:22.200 --> 00:38:24.067
I think that was Justin
who talked about it.

00:38:24.067 --> 00:38:27.434
RelativeLayout is often
a very nice way

00:38:27.434 --> 00:38:29.601
to, uh, simplify UIs

00:38:29.601 --> 00:38:31.601
and to replace
a bunch of nested layouts

00:38:31.601 --> 00:38:33.267
by just one RelativeLayout.

00:38:33.267 --> 00:38:35.067
It's very powerful.

00:38:35.067 --> 00:38:38.167
I often use it myself to replace
a bunch of LinearLayouts.

00:38:38.167 --> 00:38:40.767
The only problem is that
it's really hard to use.

00:38:40.767 --> 00:38:42.701
Uh, and I think
on the Android thing,

00:38:42.701 --> 00:38:46.000
I'm kind of the only one
who understands how it works.

00:38:46.000 --> 00:38:47.534
So very often I get people,
you know,

00:38:47.534 --> 00:38:48.701
come to my desk and are like,

00:38:48.701 --> 00:38:50.667
"Hey, I'm trying to use
a RelativeLayout

00:38:50.667 --> 00:38:51.901
but it doesn't work."

00:38:51.901 --> 00:38:53.534
I'm like, "Yeah, I know."

00:38:53.534 --> 00:38:55.667
[audience laughs]

00:38:55.667 --> 00:38:56.834
And again, totally my fault.

00:38:56.834 --> 00:39:00.167
And the problem is, uh,
it does work,

00:39:00.167 --> 00:39:02.234
but you have to understand
how it's implemented

00:39:02.234 --> 00:39:05.567
to use it
in some situations.

00:39:05.567 --> 00:39:08.033
Um, and I promise
I will fix that.

00:39:08.033 --> 00:39:09.200
I know how to fix it,

00:39:09.200 --> 00:39:10.701
I just need to find
the time to fix it.

00:39:10.701 --> 00:39:12.400
But I will.

00:39:12.400 --> 00:39:14.367
Send me, you know,
letters of encouragement

00:39:14.367 --> 00:39:15.501
and emails,
or threaten me.

00:39:15.501 --> 00:39:17.067
Do something.

00:39:17.067 --> 00:39:19.400
Or if you bring me cookies,
too, 'cause I didn't have lunch.

00:39:19.400 --> 00:39:21.000
So if you bring me cookies,
I'll--

00:39:21.000 --> 00:39:23.334
I might fix the RelativeLayout.

00:39:23.334 --> 00:39:26.467
Anyway, I also wrote an article
about RelativeLayout

00:39:26.467 --> 00:39:28.200
on the, uh, the Android blog.

00:39:28.200 --> 00:39:30.868
If you go there,
you will get,

00:39:30.868 --> 00:39:32.367
I think,
a better understanding

00:39:32.367 --> 00:39:33.701
of how it works.

00:39:33.701 --> 00:39:36.033
I show in that example
how to replace

00:39:36.033 --> 00:39:39.100
a couple of LinearLayouts
with just one RelativeLayout.

00:39:39.100 --> 00:39:41.701
And again, don't hesitate
to use the Hierarchy Viewer

00:39:41.701 --> 00:39:44.801
and inspect, uh, the default
Android applications

00:39:44.801 --> 00:39:48.367
to see how we did--
uh, we implemented the layouts

00:39:48.367 --> 00:39:50.501
that we have,
and to see how we solved

00:39:50.501 --> 00:39:54.100
that kind of issues.

00:39:54.100 --> 00:39:58.033
Another awesome tip
that you should be using,

00:39:58.033 --> 00:39:59.634
and I keep telling that
to application developers,

00:39:59.634 --> 00:40:01.601
"Use custom views,
use custom views."

00:40:01.601 --> 00:40:03.367
Uh, but usually the developers
are scared

00:40:03.367 --> 00:40:05.667
of using custom views
for some reason.

00:40:05.667 --> 00:40:08.367
So how many of you ever wrote
a custom view?

00:40:08.367 --> 00:40:10.167
Okay, you're--
you're really good.

00:40:10.167 --> 00:40:11.367
Thank you.
Any other ones?

00:40:11.367 --> 00:40:13.534
Shame on you.

00:40:13.534 --> 00:40:16.300
Um, custom views are awesome

00:40:16.300 --> 00:40:19.133
because you have control
over the view.

00:40:19.133 --> 00:40:20.667
You know how it's used.

00:40:20.667 --> 00:40:22.000
So you can take shortcuts.

00:40:22.000 --> 00:40:24.100
And you can
improve performance by a lot.

00:40:24.100 --> 00:40:25.968
The problem we have
on the framework team

00:40:25.968 --> 00:40:28.734
is that we have to write
very generic pieces of code.

00:40:28.734 --> 00:40:31.834
And sometimes it's very hard
to optimize that.

00:40:31.834 --> 00:40:33.934
Or, you know,
the cost of optimizing the view

00:40:33.934 --> 00:40:38.167
actually ends up costing more
in the--in some situations.

00:40:38.167 --> 00:40:40.100
So here--an example--

00:40:40.100 --> 00:40:43.834
It's actually something
that we shipped in Cupcake.

00:40:43.834 --> 00:40:45.868
So the guy who's sitting
in my office

00:40:45.868 --> 00:40:47.767
is working
on the Gmail application,

00:40:47.767 --> 00:40:49.133
and he was having
all those preference issues.

00:40:49.133 --> 00:40:50.567
And I kept telling him,
you know,

00:40:50.567 --> 00:40:52.434
"Use custom views, use custom
views, use custom views."

00:40:52.434 --> 00:40:54.400
And he finally did.
And it's awesome.

00:40:54.400 --> 00:40:57.167
So the item you see here,
um, an email.

00:40:57.167 --> 00:41:01.000
So you have a check box,
two lines of text,

00:41:01.000 --> 00:41:04.133
the--the time or the date,
and the star.

00:41:04.133 --> 00:41:05.868
That used to be
a very complex layout.

00:41:05.868 --> 00:41:07.300
So there was, you know--
there were

00:41:07.300 --> 00:41:09.701
a bunch of email layouts,
maybe a RelativeLayout,

00:41:09.701 --> 00:41:12.033
there were a couple of image
views, three text views.

00:41:12.033 --> 00:41:14.367
It was a lot of things
for something that simple.

00:41:14.367 --> 00:41:17.434
So instead, in Cupcake,
he wrote a custom view.

00:41:17.434 --> 00:41:18.868
So that's now one view.

00:41:18.868 --> 00:41:20.634
He's doing
all the drawing himself.

00:41:20.634 --> 00:41:25.167
That gives him a lot more power,
uh, over the drawing.

00:41:25.167 --> 00:41:28.434
That's how he can do the--
the different ellipses

00:41:28.434 --> 00:41:29.901
in the same lines--
line of text.

00:41:29.901 --> 00:41:31.734
And the preference
of the Gmail application

00:41:31.734 --> 00:41:32.934
is now much better.

00:41:32.934 --> 00:41:35.200
When you scroll through
a long list of emails,

00:41:35.200 --> 00:41:37.467
it's a lot smoother
in Cupcake.

00:41:37.467 --> 00:41:39.634
Android 1.5.

00:41:39.634 --> 00:41:41.934
So if you can, uh,
write custom views,

00:41:41.934 --> 00:41:43.100
please do.

00:41:43.100 --> 00:41:45.267
And take all the shortcuts
you want,

00:41:45.267 --> 00:41:47.767
all the shortcuts you need,
to make your application fast.

00:41:47.767 --> 00:41:50.133
And actually, writing
custom views is pretty easy,

00:41:50.133 --> 00:41:51.334
but I'll get back to that.

00:41:51.334 --> 00:41:54.534
So that's the skeleton
of a custom view.

00:41:54.534 --> 00:41:57.934
All you have to do
is extend the view class.

00:41:57.934 --> 00:42:01.300
Uh, you need to have
at least one constructor

00:42:01.300 --> 00:42:04.300
that takes the context
as a parameter.

00:42:04.300 --> 00:42:06.901
And the only two methods
that you need to override

00:42:06.901 --> 00:42:08.834
are onDraw
to do your drawing,

00:42:08.834 --> 00:42:10.167
and onMeasure.

00:42:10.167 --> 00:42:12.534
onMeasure is used to--
to tell the framework

00:42:12.534 --> 00:42:15.367
how big your view wants to be.

00:42:15.367 --> 00:42:17.834
And when you override
onMeasure,

00:42:17.834 --> 00:42:19.934
you have to call,
at the end of the method,

00:42:19.934 --> 00:42:21.133
setMeasuredDimension.

00:42:21.133 --> 00:42:22.834
If you don't,
you will get an exception,

00:42:22.834 --> 00:42:25.000
and it will tell you
that you need to do it.

00:42:25.000 --> 00:42:27.567
Um, setMeasuredDimension
is how you tell the framework,

00:42:27.567 --> 00:42:29.467
okay, I want to be,
in this case,

00:42:29.467 --> 00:42:32.300
100 pixels wide
and 100 pixels high.

00:42:32.300 --> 00:42:35.000
We'll get into more details

00:42:35.000 --> 00:42:38.234
about that
in the next session.

00:42:38.234 --> 00:42:41.367
But just know that the
dimensions that you indicate

00:42:41.367 --> 00:42:44.200
might, uh--might not be
used by the framework.

00:42:44.200 --> 00:42:47.000
LinearLayout, for instance,
is really good at that.

00:42:47.000 --> 00:42:48.334
It, you know,
asks the text view,

00:42:48.334 --> 00:42:49.801
like, "How big
do you want to be?"

00:42:49.801 --> 00:42:51.934
The text view says, "Oh, I want
to be 600 pixels wide."

00:42:51.934 --> 00:42:53.934
And the LinearLayout's like,
"Eh, I don't care.

00:42:53.934 --> 00:42:55.767
You won't be 600 pixels wide."

00:42:55.767 --> 00:42:58.200
So, you know, don't freak out
if, uh,

00:42:58.200 --> 00:42:59.467
those are not respected.

00:42:59.467 --> 00:43:02.200
That's perfectly normal.

00:43:02.200 --> 00:43:03.534
Use custom layouts.

00:43:03.534 --> 00:43:06.367
How many of you have ever
written custom layouts?

00:43:06.367 --> 00:43:08.801
Ooh, a lot less.
Okay, better.

00:43:08.801 --> 00:43:11.200
Custom layouts
are also awesome.

00:43:11.200 --> 00:43:13.868
Sometimes, I'm sure, you--
you all had issues

00:43:13.868 --> 00:43:14.968
when you're trying to come up

00:43:14.968 --> 00:43:16.734
with the exact layout
you wanted.

00:43:16.734 --> 00:43:18.400
We tried to have
some generic layouts

00:43:18.400 --> 00:43:19.701
that are easy to use.

00:43:19.701 --> 00:43:22.501
Sometimes they are not,
like RelativeLayouts.

00:43:22.501 --> 00:43:25.200
And, in some cases,
it's actually a lot simpler

00:43:25.200 --> 00:43:26.467
to write your own layout

00:43:26.467 --> 00:43:28.567
than try to fight
with the default layout

00:43:28.567 --> 00:43:30.667
and come up
with the one you wanted.

00:43:30.667 --> 00:43:33.501
So this is an application
I wrote for Android 1.0.

00:43:33.501 --> 00:43:35.133
And I wanted a simple grid.

00:43:35.133 --> 00:43:37.767
I wanted a simple, simple grid
of photos.

00:43:37.767 --> 00:43:40.234
So instead of using
a table layout

00:43:40.234 --> 00:43:42.701
or, you know, trying to use
a bunch of LinerLayouts,

00:43:42.701 --> 00:43:44.133
uh, to do what I wanted,

00:43:44.133 --> 00:43:46.067
I just, you know,
spent 30 minutes

00:43:46.067 --> 00:43:48.601
writing my own custom layout
that I call the grid layout.

00:43:48.601 --> 00:43:51.501
That can only support
six items,

00:43:51.501 --> 00:43:53.000
because that's all I wanted
on screen.

00:43:53.000 --> 00:43:54.767
And it's very fast.
It's very nice.

00:43:54.767 --> 00:43:56.234
It does exactly what I want.

00:43:56.234 --> 00:43:58.367
And I didn't spend my time
getting frustrated,

00:43:58.367 --> 00:44:02.367
fighting with the--
the default layouts.

00:44:02.367 --> 00:44:04.000
Writing custom layouts

00:44:04.000 --> 00:44:06.968
is similar
to writing custom views.

00:44:06.968 --> 00:44:08.501
It's a bit more complicated.

00:44:08.501 --> 00:44:12.334
Again, we'll go into the details
about custom layouts

00:44:12.334 --> 00:44:13.701
in the next session.

00:44:13.701 --> 00:44:16.133
Uh, but you extend
the ViewGroup class.

00:44:16.133 --> 00:44:18.234
You override
the onMeasure method.

00:44:18.234 --> 00:44:20.567
And the difference here
is that not only do you have

00:44:20.567 --> 00:44:22.767
to indicate what size
you want to be,

00:44:22.767 --> 00:44:25.734
but you also have to call
Measure on all your children.

00:44:25.734 --> 00:44:27.901
So you want to know,
as a layout,

00:44:27.901 --> 00:44:30.100
you want to know how big
the children want to be.

00:44:30.100 --> 00:44:31.868
So you just go through
your children

00:44:31.868 --> 00:44:33.501
and, uh, you measure them.

00:44:33.501 --> 00:44:37.100
Then you also want to override
the onLayout method.

00:44:37.100 --> 00:44:40.667
And this is actually where
you position the children

00:44:40.667 --> 00:44:42.601
and where you give them
a size.

00:44:42.601 --> 00:44:45.334
So if you write a really good
layout, like I just did,

00:44:45.334 --> 00:44:47.334
you--you just do
the simple mask,

00:44:47.334 --> 00:44:48.400
you know, consisting,

00:44:48.400 --> 00:44:50.167
putting the items
in the right place.

00:44:50.167 --> 00:44:52.734
Usually what we do,
and what you should always do

00:44:52.734 --> 00:44:54.734
when you are--
when you write a custom layout,

00:44:54.734 --> 00:44:59.033
is ignore the children that have
a visibility of gone.

00:44:59.033 --> 00:45:01.234
Children in the gone state

00:45:01.234 --> 00:45:03.267
must not participate
in the layout.

00:45:03.267 --> 00:45:04.868
It must be totally ignored.

00:45:04.868 --> 00:45:06.667
Uh, and it actually
could be ignored

00:45:06.667 --> 00:45:08.634
in the measure--
measure phase as well.

00:45:08.634 --> 00:45:12.400
But I didn't have enough space
on the slide.

00:45:12.400 --> 00:45:15.234
Invisible children still
participate in the layout.

00:45:15.234 --> 00:45:17.601
They still take--
take the room.

00:45:17.601 --> 00:45:19.033
But they don't draw.

00:45:19.033 --> 00:45:23.501
That's the difference between
invisible and gone.

00:45:23.501 --> 00:45:25.901
And finally, memory allocation.

00:45:25.901 --> 00:45:28.501
So I think the title
of this slide says it all.

00:45:28.501 --> 00:45:32.167
Like, just don't use memory.

00:45:32.167 --> 00:45:35.000
Sometimes it's difficult
to reduce your allocations.

00:45:35.000 --> 00:45:38.000
And we have a couple of--
of nice tools to, uh,

00:45:38.000 --> 00:45:39.701
to help you, you know,

00:45:39.701 --> 00:45:41.534
remove allocation
from your application.

00:45:41.534 --> 00:45:43.667
And the reason
why I'm saying this:

00:45:43.667 --> 00:45:45.934
it's because our current
garbage collector

00:45:45.934 --> 00:45:47.601
is, uh, I would say done.

00:45:47.601 --> 00:45:49.801
Uh, but it works.

00:45:49.801 --> 00:45:51.501
It's still good.

00:45:51.501 --> 00:45:54.434
The problem is whenever
the garbage collector kicks in,

00:45:54.434 --> 00:45:56.167
it will stop all your threads.

00:45:56.167 --> 00:45:58.968
It will interrupt your UI
while it's garbage collecting.

00:45:58.968 --> 00:46:01.033
And garbage collection
can take

00:46:01.033 --> 00:46:04.767
between about 100 milliseconds
to 500 milliseconds.

00:46:04.767 --> 00:46:06.801
That's a lot of time
during which

00:46:06.801 --> 00:46:08.501
your UI cannot do anything.

00:46:08.501 --> 00:46:10.200
That's a lot of time
during which

00:46:10.200 --> 00:46:11.701
the user cannot do anything.

00:46:11.701 --> 00:46:13.901
So if you ever wrote
a list view

00:46:13.901 --> 00:46:17.501
and you're allocating, uh,
memory in the getView method,

00:46:17.501 --> 00:46:19.968
you may have noticed that when
you scroll through the list,

00:46:19.968 --> 00:46:22.100
sometimes you see
these little stutters.

00:46:22.100 --> 00:46:25.701
And that's because the garbage
collector is kicking in.

00:46:25.701 --> 00:46:30.033
Uh, you can allocate memory
in some places.

00:46:30.033 --> 00:46:32.968
Those are the methods
when you write UIs

00:46:32.968 --> 00:46:35.167
where you don't want
to allocate memory.

00:46:35.167 --> 00:46:36.534
Or as little as you can.

00:46:36.534 --> 00:46:39.434
So when you're doing
measurements, layout,

00:46:39.434 --> 00:46:41.100
whenever you're drawing
something,

00:46:41.100 --> 00:46:43.167
like, do not create
a new paint

00:46:43.167 --> 00:46:45.133
every time you draw a view.

00:46:45.133 --> 00:46:48.200
Like, just create a paint once
and reuse it.

00:46:48.200 --> 00:46:50.267
Uh, event--events handling,

00:46:50.267 --> 00:46:52.601
uh, those are ver--
can be very expensive,

00:46:52.601 --> 00:46:55.934
and you really, really want
to avoid allocating memory.

00:46:55.934 --> 00:46:59.667
To give you an idea,
the framework can send you

00:46:59.667 --> 00:47:03.434
up to, like, 80 or 90
TouchEvents per second.

00:47:03.434 --> 00:47:05.400
So if you start
allocating memory,

00:47:05.400 --> 00:47:07.667
the garbage collector
will kick in really fast.

00:47:07.667 --> 00:47:09.133
And the adapters.

00:47:09.133 --> 00:47:10.801
So when you--
when you scroll the list view,

00:47:10.801 --> 00:47:12.634
you really don't want
the garbage collector

00:47:12.634 --> 00:47:14.801
to do its job.

00:47:14.801 --> 00:47:18.200
So one of the tools
that we have to help you

00:47:18.200 --> 00:47:20.434
remove allocations
from your application

00:47:20.434 --> 00:47:22.701
is a--
is a cool API in the class

00:47:22.701 --> 00:47:23.801
called Debug.

00:47:23.801 --> 00:47:26.300
You can set the limit
of the numbers

00:47:26.300 --> 00:47:28.634
of allocation--
of allocations that you want

00:47:28.634 --> 00:47:30.601
to have in the specific
piece of code.

00:47:30.601 --> 00:47:32.567
So let's say you decided
that you want to have--

00:47:32.567 --> 00:47:34.100
you were writing a game,
and you want

00:47:34.100 --> 00:47:36.934
to have zero allocation
in your drawing code.

00:47:36.934 --> 00:47:40.601
What you can do is put that code
in your application,

00:47:40.601 --> 00:47:44.367
and if--if there are
allocations

00:47:44.367 --> 00:47:46.734
that exceed the limit
that you specified,

00:47:46.734 --> 00:47:47.934
in that case zero,

00:47:47.934 --> 00:47:49.434
then an exception will be thrown

00:47:49.434 --> 00:47:51.234
and, uh,
you will fail fast.

00:47:51.234 --> 00:47:52.567
You will get
the next stack trace

00:47:52.567 --> 00:47:56.901
that shows you where the, uh,
the allocation happened.

00:47:56.901 --> 00:47:58.501
Another cool tool you can use--

00:47:58.501 --> 00:48:00.567
uh, I don't think it shows up

00:48:00.567 --> 00:48:03.701
in the Eclipse version
of DDMS--

00:48:03.701 --> 00:48:06.734
but in the SDK,
you can launch the application

00:48:06.734 --> 00:48:08.467
called DDMS.

00:48:08.467 --> 00:48:13.100
And in that application,
there is a tab

00:48:13.100 --> 00:48:14.701
called "allocation tracker."

00:48:14.701 --> 00:48:16.234
So you click on that tab.

00:48:16.234 --> 00:48:19.300
You click on the--on the process
you want to inspect.

00:48:19.300 --> 00:48:21.400
For instance, the home screen.

00:48:21.400 --> 00:48:22.934
Uh--oops, forgot one step.

00:48:22.934 --> 00:48:25.901
So the home screen,
you click "stop tracking."

00:48:25.901 --> 00:48:28.767
You go back to your device,
or your emulator--emulator.

00:48:28.767 --> 00:48:30.400
And you start doing stuff.

00:48:30.400 --> 00:48:32.467
Uh, so I'm using
the application.

00:48:32.467 --> 00:48:33.901
Everything's fine.

00:48:33.901 --> 00:48:35.801
Uh, then I go back to DDMS.

00:48:35.801 --> 00:48:38.467
I click "get allocation."

00:48:38.467 --> 00:48:43.067
Then I get a list
of all the allocations

00:48:43.067 --> 00:48:47.033
that the application did, uh,
during that time frame.

00:48:47.033 --> 00:48:49.467
So I can see that, uh,

00:48:49.467 --> 00:48:51.901
residents
have been allocated.

00:48:51.901 --> 00:48:53.968
We created, for some reason,
a text view,

00:48:53.968 --> 00:48:55.701
'cause apparently
we created dialogue.

00:48:55.701 --> 00:48:58.934
So you really can see
every single allocation.

00:48:58.934 --> 00:49:01.934
Even better, if you find
an allocation

00:49:01.934 --> 00:49:04.267
that seems suspicious,
you can click on it

00:49:04.267 --> 00:49:06.367
and it will give you
the full stack trace

00:49:06.367 --> 00:49:08.200
for that allocation.

00:49:08.200 --> 00:49:10.868
So you can see
what caused the allocation.

00:49:10.868 --> 00:49:13.434
That's a very, very nice tool.

00:49:13.434 --> 00:49:17.801
And I used it recently,
for instance, in Donut.

00:49:17.801 --> 00:49:20.467
I discovered that--
I think it's in Cupcake--

00:49:20.467 --> 00:49:23.334
if you, uh, long-press an empty
screen on the home screen,

00:49:23.334 --> 00:49:26.734
it allocates 600 rectangles.

00:49:26.734 --> 00:49:29.033
There's a good--there's actually
a good reason for that,

00:49:29.033 --> 00:49:31.300
but, uh, I optimized it.

00:49:31.300 --> 00:49:33.501
So it's--it's--
it is an awesome tool.

00:49:33.501 --> 00:49:36.601
And you should definitely
use it.

00:49:36.601 --> 00:49:41.434
Uh, finally, uh, be better
at managing your memory.

00:49:41.434 --> 00:49:46.100
So how many of you are aware
of what those things are?

00:49:46.100 --> 00:49:49.534
There are some good
Java developers in the room.

00:49:49.534 --> 00:49:51.534
So I'll be really quick,

00:49:51.534 --> 00:49:53.100
'cause we don't have
much time left.

00:49:53.100 --> 00:49:55.934
But SoftReferences
are a special type of reference

00:49:55.934 --> 00:49:59.801
in Java
that can be collected

00:49:59.801 --> 00:50:04.534
by the garbage collector
when the only reference--okay.

00:50:04.534 --> 00:50:05.934
Let's start over again.

00:50:05.934 --> 00:50:09.300
A soft reference is a wrapper
for an object.

00:50:09.300 --> 00:50:12.601
If all the references
to that object

00:50:12.601 --> 00:50:13.901
are soft references,

00:50:13.901 --> 00:50:17.167
and if the garbage collector
needs more memory,

00:50:17.167 --> 00:50:21.300
it will first collect
the soft references.

00:50:21.300 --> 00:50:23.834
So soft references are awesome
to create a cache.

00:50:23.834 --> 00:50:27.033
Let's say I want to keep
a lot of bitmaps and memory

00:50:27.033 --> 00:50:28.734
but I don't want
to run out of memory

00:50:28.734 --> 00:50:30.367
because I keep those bitmaps
in memory.

00:50:30.367 --> 00:50:32.868
I can put all those bitmaps
in soft references,

00:50:32.868 --> 00:50:35.033
and whenever the system
needs memory,

00:50:35.033 --> 00:50:37.667
I know that those bitmaps
will go away first.

00:50:37.667 --> 00:50:41.100
That means that those objects
can disappear at any time.

00:50:41.100 --> 00:50:43.167
And I'll show you
how you can handle that.

00:50:43.167 --> 00:50:46.901
WeakReferences are--
are very different.

00:50:46.901 --> 00:50:50.000
So they're still wrappers
for objects.

00:50:50.000 --> 00:50:51.968
And if all the references
to an object

00:50:51.968 --> 00:50:54.567
are weak references,
then the object

00:50:54.567 --> 00:50:56.601
will automatically
be garbage collected.

00:50:56.601 --> 00:51:01.200
I have--I wrote an article
on the Android blog about it.

00:51:01.200 --> 00:51:03.501
So I will refer you to that.

00:51:03.501 --> 00:51:06.634
It's an awesome way
to avoid memory leaks.

00:51:06.634 --> 00:51:09.133
So here is, for instance,
how you would write

00:51:09.133 --> 00:51:12.400
a simple memory cache
using soft references.

00:51:12.400 --> 00:51:16.133
So you can put objects
in the cache.

00:51:16.133 --> 00:51:18.367
Each object is identified
by a key.

00:51:18.367 --> 00:51:21.400
And so we have
a HashMap of strings

00:51:21.400 --> 00:51:23.501
to soft references.

00:51:23.501 --> 00:51:25.434
So in the PUT method,

00:51:25.434 --> 00:51:27.100
when we put something
in the HashMap,

00:51:27.100 --> 00:51:29.133
we just wrap the value
that we're given

00:51:29.133 --> 00:51:31.067
with a soft reference.

00:51:31.067 --> 00:51:35.167
And then when we want to get
value out of the cache,

00:51:35.167 --> 00:51:38.834
we retrieve the soft reference
from the HashMap.

00:51:38.834 --> 00:51:41.200
And we have to check the--

00:51:41.200 --> 00:51:44.601
we have to call the method "get"
on the--on the reference.

00:51:44.601 --> 00:51:46.534
"Get" will get you
the value

00:51:46.534 --> 00:51:48.000
that you put in
the soft reference.

00:51:48.000 --> 00:51:49.434
But that value can be null.

00:51:49.434 --> 00:51:51.133
It can become null
at any time

00:51:51.133 --> 00:51:53.133
because the garbage collector
needed memory.

00:51:53.133 --> 00:51:54.901
So you have to do
that extra check.

00:51:54.901 --> 00:51:56.467
You have to verify
whether or not

00:51:56.467 --> 00:51:57.934
your object is stealing memory.

00:51:57.934 --> 00:52:00.133
If it is,
you can just use it.

00:52:00.133 --> 00:52:02.467
If it's not, you have to put it
back in the cache.

00:52:02.467 --> 00:52:06.868
We have several examples
of that in various applications.

00:52:06.868 --> 00:52:08.367
So you should go to

00:52:08.367 --> 00:52:14.734
code.google.com/p/
apps-for-android.

00:52:14.734 --> 00:52:17.501
We have a bunch of open source
applications that we wrote,

00:52:17.501 --> 00:52:19.200
and I think at least
a couple of them

00:52:19.200 --> 00:52:21.767
use soft references
for memory caches.

00:52:21.767 --> 00:52:23.734
You can--and those are,
you know,

00:52:23.734 --> 00:52:25.200
standard Java classes.

00:52:25.200 --> 00:52:27.434
So there are tons of articles
on the web

00:52:27.434 --> 00:52:29.367
about soft references
and weak references.

00:52:29.367 --> 00:52:32.501
So go to google.com
and find articles.

00:52:32.501 --> 00:52:35.501
And we don't have time
to talk about this.

00:52:35.501 --> 00:52:37.934
So here are some pointers
if you want to learn more

00:52:37.934 --> 00:52:39.601
about everything
I've talked about today.

00:52:39.601 --> 00:52:41.501
Go to d.android.com.

00:52:41.501 --> 00:52:43.367
It's the developer website
where you'll have access

00:52:43.367 --> 00:52:45.667
to the SDK, the blog,
the documentation.

00:52:45.667 --> 00:52:47.701
source.android.com
if you want to know how

00:52:47.701 --> 00:52:49.634
to get the source code
of Android.

00:52:49.634 --> 00:52:52.200
It's very interesting
to look at our source code.

00:52:52.200 --> 00:52:53.434
See how we do things.

00:52:53.434 --> 00:52:56.000
And if you want to learn
how to use RelativeLayout,

00:52:56.000 --> 00:52:58.834
go read the source code.

00:52:58.834 --> 00:53:01.801
And the last two links
are pointers

00:53:01.801 --> 00:53:03.868
to an open source project
that we wrote

00:53:03.868 --> 00:53:07.300
that show how to write
good UI code.

00:53:07.300 --> 00:53:09.434
And now we have some time
for questions.

00:53:09.434 --> 00:53:12.367
So please go to the mic
and speak clearly.

00:53:15.234 --> 00:53:18.334
No questions?

00:53:18.334 --> 00:53:20.334
I must be very good
at teaching stuff, then.

00:53:20.334 --> 00:53:22.968
Oh--oh, the previous slide?
Yeah.

00:53:24.634 --> 00:53:25.701
man: Can I ask one?

00:53:25.701 --> 00:53:26.801
Guy: Sure.

00:53:26.801 --> 00:53:28.501
man: Uh, can you go through
the slide

00:53:28.501 --> 00:53:30.000
for soft references?

00:53:30.000 --> 00:53:32.367
Guy: Uh, yes.

00:53:32.367 --> 00:53:33.367
This one?

00:53:33.367 --> 00:53:35.167
man: Yes,
in this implementation,

00:53:35.167 --> 00:53:37.167
since we put
all the software--

00:53:37.167 --> 00:53:40.367
soft references
in the HashMap,

00:53:40.367 --> 00:53:43.234
they are going to be collected
by the garbage collector?

00:53:43.234 --> 00:53:45.734
Even though the HashMap is not
a soft reference?

00:53:45.734 --> 00:53:47.901
Guy: No, um, the--

00:53:47.901 --> 00:53:50.667
what's contained inside
the soft reference

00:53:50.667 --> 00:53:51.968
can be collected.

00:53:51.968 --> 00:53:53.968
The HashMap keeps
a hard reference

00:53:53.968 --> 00:53:55.234
to the soft references.

00:53:55.234 --> 00:53:56.601
If you can follow me.

00:53:56.601 --> 00:53:57.767
So those won't be collected.

00:53:57.767 --> 00:53:59.267
But what's inside
the soft reference

00:53:59.267 --> 00:54:00.801
can be collected.

00:54:00.801 --> 00:54:03.667
man: So we are going to find
the HashMap

00:54:03.667 --> 00:54:05.067
full of null references?

00:54:05.067 --> 00:54:06.100
Guy: No, the--

00:54:06.100 --> 00:54:07.267
man: After it's collected?

00:54:07.267 --> 00:54:08.634
Guy: Yes, so when you call, uh,

00:54:08.634 --> 00:54:12.067
"get" on the soft reference,
the result may be null

00:54:12.067 --> 00:54:13.667
because the garbage collector
may have--

00:54:13.667 --> 00:54:17.133
the garbage collector may have
reclaimed that reference.

00:54:17.133 --> 00:54:18.534
man: Okay, thank you.

00:54:18.534 --> 00:54:20.734
Guy: Go to google.com,
read articles about it.

00:54:20.734 --> 00:54:22.133
man: Okay, thank you.

00:54:22.133 --> 00:54:24.601
Guy: It's more so that you're
aware of--of that.

00:54:24.601 --> 00:54:27.534
man: At which point
should you recycle bitmaps?

00:54:27.534 --> 00:54:29.267
Guy: Uh, every time.

00:54:29.267 --> 00:54:32.667
man: So if--if you convert
on your list adapter,

00:54:32.667 --> 00:54:35.801
you're changing the bitmap
on ImageView.

00:54:35.801 --> 00:54:37.467
Should you recycle
the previous?

00:54:37.467 --> 00:54:38.868
Guy: So, it depends.

00:54:38.868 --> 00:54:40.634
You could recycle the bitmap.

00:54:40.634 --> 00:54:44.434
But that means the next time
you will display that view,

00:54:44.434 --> 00:54:46.367
it will have to fetch
that bitmap again

00:54:46.367 --> 00:54:47.901
from wherever you took it from.

00:54:47.901 --> 00:54:51.200
So what you should actually do
is use a memory cache

00:54:51.200 --> 00:54:54.801
of soft references that contains
all the bitmaps that you have.

00:54:54.801 --> 00:54:56.868
And--and put your bitmaps
in there.

00:54:56.868 --> 00:54:58.634
So you don't--don't bother
about recycling them

00:54:58.634 --> 00:55:00.267
in that case.

00:55:00.267 --> 00:55:02.501
And they will be collected
by the garbage collector

00:55:02.501 --> 00:55:04.467
if it needs more memory.

00:55:04.467 --> 00:55:06.534
Uh, but the best solution
for bitmaps

00:55:06.534 --> 00:55:08.868
is to use a cache
of soft reference.

00:55:08.868 --> 00:55:11.234
If you know that you're not
going to reuse the bitmaps,

00:55:11.234 --> 00:55:12.734
yeah, call recycle on this.

00:55:12.734 --> 00:55:13.767
man: Thank you.

00:55:13.767 --> 00:55:15.067
Guy: Sure.

00:55:15.067 --> 00:55:18.167
man: I've done
a number of extensions

00:55:18.167 --> 00:55:20.701
of view group
for custom layouts.

00:55:20.701 --> 00:55:22.100
And there's a--

00:55:22.100 --> 00:55:24.801
I think an unimplemented
property there

00:55:24.801 --> 00:55:27.901
that says
"use child drawing order."

00:55:27.901 --> 00:55:29.734
Is that something
you guys plan

00:55:29.734 --> 00:55:32.067
to actually finish out
at some point,

00:55:32.067 --> 00:55:34.000
because it's--it's really useful
when you're trying

00:55:34.000 --> 00:55:35.334
to get semi-transparent views--

00:55:35.334 --> 00:55:36.901
Guy: Uh, it's implemented
in Cupcake.

00:55:36.901 --> 00:55:38.634
man: Ah, excellent.
Thank you.

00:55:38.634 --> 00:55:40.601
Guy: Uh, before we take
the next question,

00:55:40.601 --> 00:55:44.200
in Room 4,
Joe and I will show you

00:55:44.200 --> 00:55:46.100
how to write
a custom layout.

00:55:46.100 --> 00:55:48.300
So we'll give you all the
details about how to do that.

00:55:48.300 --> 00:55:51.334
And we'll also show you
how to commit that code

00:55:51.334 --> 00:55:52.767
to the Android
open source project,

00:55:52.767 --> 00:55:54.400
so we'll take you
through the steps.

00:55:54.400 --> 00:55:57.968
And we'll show you how
we review your code.

00:55:57.968 --> 00:56:00.534
man: Yeah, when you're talking
about, uh, list views

00:56:00.534 --> 00:56:03.133
and, uh, adapters and such,

00:56:03.133 --> 00:56:05.934
you were saying the, uh,
convert view

00:56:05.934 --> 00:56:09.601
is passed in the correct type.

00:56:09.601 --> 00:56:14.334
But if the--
if you have mixed views,

00:56:14.334 --> 00:56:16.767
uh, how does it know
which one to pass in

00:56:16.767 --> 00:56:18.000
if you've got different types?

00:56:18.000 --> 00:56:19.968
Guy: Okay, so that's
a really good question.

00:56:19.968 --> 00:56:23.000
I didn't go into the details
because of time constraints.

00:56:23.000 --> 00:56:25.801
But on the adapter,
there are other methods

00:56:25.801 --> 00:56:28.901
that will tell list view
the type of the view

00:56:28.901 --> 00:56:30.434
given the position.

00:56:30.434 --> 00:56:32.968
And it will tell list view
how many types total

00:56:32.968 --> 00:56:34.167
you have in the adapter.

00:56:34.167 --> 00:56:36.601
So some of our adapters,
the simple adapter,

00:56:36.601 --> 00:56:38.667
the simple cursor adapter,
take care of that for you.

00:56:38.667 --> 00:56:40.400
But if you write
your own adapter,

00:56:40.400 --> 00:56:42.100
look at those methods.

00:56:42.100 --> 00:56:44.701
And actually, you will--
you will see very quickly

00:56:44.701 --> 00:56:46.033
whether you're doing
something wrong,

00:56:46.033 --> 00:56:47.267
'cause if you get
to convert view

00:56:47.267 --> 00:56:48.567
that's, like,
not the right type

00:56:48.567 --> 00:56:49.901
and you get
the classic exception,

00:56:49.901 --> 00:56:51.501
then, yeah, you know
there's something bad going on.

00:56:51.501 --> 00:56:53.167
man: Thank you.
Guy: Sure.

00:56:53.167 --> 00:56:56.000
man: You had mentioned
about the allocation tracker?

00:56:56.000 --> 00:56:57.434
Guy: Yeah.

00:56:57.434 --> 00:56:59.501
man: That is not available
in Eclipse.

00:56:59.501 --> 00:57:02.133
Is there another
debugging application

00:57:02.133 --> 00:57:04.467
that we could download
that could, you know,

00:57:04.467 --> 00:57:07.501
monitor maybe
the frame restraints

00:57:07.501 --> 00:57:09.834
and other problems
that we can go in

00:57:09.834 --> 00:57:12.133
and make sure that application
is running optimal,

00:57:12.133 --> 00:57:14.400
or is the allocation tracker
the only thing we can use?

00:57:14.400 --> 00:57:17.234
Guy: So you want, uh,
debugging tools for the UI?

00:57:17.234 --> 00:57:19.133
man: Yeah, just to,
you know, just to--

00:57:19.133 --> 00:57:22.300
Guy: Yeah, so actually,
that's something, uh--

00:57:22.300 --> 00:57:24.300
I'm working on
on the side.

00:57:24.300 --> 00:57:26.934
We have ways to, uh,
to get better--

00:57:26.934 --> 00:57:28.400
we have ways
to get the frame rate,

00:57:28.400 --> 00:57:30.133
and you can see graphs
of all the drawings...

00:57:30.133 --> 00:57:31.267
man: Right.

00:57:31.267 --> 00:57:32.367
Guy: So we have that.

00:57:32.367 --> 00:57:33.434
But to enable that,

00:57:33.434 --> 00:57:34.834
you need to download
the source code.

00:57:34.834 --> 00:57:37.567
You need to turn on the flag
in the source code,

00:57:37.567 --> 00:57:40.367
rebuild the platform,
and flash that on your phone.

00:57:40.367 --> 00:57:42.300
So it's not very user-friendly.

00:57:42.300 --> 00:57:45.200
So I'm trying to put that
in Hierarchy Viewer.

00:57:45.200 --> 00:57:46.968
I don't know how
I'm going to do that yet,

00:57:46.968 --> 00:57:49.300
but...yeah, we're definitely
thinking about it.

00:57:49.300 --> 00:57:51.067
man: Okay.

00:57:51.067 --> 00:57:53.100
man: Hey, you--
you mentioned, um,

00:57:53.100 --> 00:57:55.434
about that when
you invalidate a view,

00:57:55.434 --> 00:57:58.534
it unions the other--

00:57:58.534 --> 00:58:00.767
you know, it makes a union
of all the other views

00:58:00.767 --> 00:58:02.501
that are inval--
invalidated.

00:58:02.501 --> 00:58:04.901
Uh, and we ran into that,
but our problem was

00:58:04.901 --> 00:58:07.534
that we weren't calling
the invalidate.

00:58:07.534 --> 00:58:10.267
When you change the text
on the text view,

00:58:10.267 --> 00:58:11.534
it seems like that happens.

00:58:11.534 --> 00:58:13.667
And we had, you know,
several text views.

00:58:13.667 --> 00:58:15.267
Guy: Yeah, so when you--
when you modify

00:58:15.267 --> 00:58:17.334
properties of views,

00:58:17.334 --> 00:58:19.167
most of these properties
will cause--

00:58:19.167 --> 00:58:21.934
will trigger a re-layout
or an invalidate.

00:58:21.934 --> 00:58:24.367
That's because, you know,
if you call setText,

00:58:24.367 --> 00:58:27.534
and...and then you wouldn't
see the new text on screen,

00:58:27.534 --> 00:58:28.734
you'd be, like,
"Oh, hey, what's going on?"

00:58:28.734 --> 00:58:30.400
And we don't want you
to call invalidate

00:58:30.400 --> 00:58:32.133
every time that--I mean,
that's more work for you.

00:58:32.133 --> 00:58:35.300
Uh, so that's why sometimes,
they invalidate themselves.

00:58:35.300 --> 00:58:37.167
man: Okay.

00:58:37.167 --> 00:58:39.767
Guy: And, you know,
just turn on the--

00:58:39.767 --> 00:58:41.601
the screen updates
and you'll see why--

00:58:41.601 --> 00:58:43.100
what's going on.

00:58:43.100 --> 00:58:44.133
Yeah?

00:58:44.133 --> 00:58:45.834
man: Hi, can you comment
on how you--

00:58:45.834 --> 00:58:49.133
what you recommend to optimize
on the input handling?

00:58:49.133 --> 00:58:51.400
Like a...events flooding.

00:58:51.400 --> 00:58:52.868
Guy: Uh, okay.

00:58:52.868 --> 00:58:55.901
So, I'm not the best person
to answer that question.

00:58:55.901 --> 00:58:57.968
If you can find, uh--

00:58:57.968 --> 00:59:00.067
Dan right here
knows the answer.

00:59:00.067 --> 00:59:02.067
In the front row.

00:59:02.067 --> 00:59:03.701
Uh, event flooding.

00:59:03.701 --> 00:59:05.234
You know,
when you are in the game

00:59:05.234 --> 00:59:06.801
and you get, like,
80 events per second

00:59:06.801 --> 00:59:09.334
and your frame rate
goes down the drain?

00:59:09.334 --> 00:59:12.267
Dan: [inaudible]

00:59:21.367 --> 00:59:22.400
Guy: Okay.

00:59:22.400 --> 00:59:24.334
So, uh, the answer here

00:59:24.334 --> 00:59:26.100
is if you're writing
an application

00:59:26.100 --> 00:59:28.133
that has the rendering
in a separate thread,

00:59:28.133 --> 00:59:31.834
the even dispatching
will use as much CPU as it can.

00:59:31.834 --> 00:59:34.234
So the trick is to put
a sleep call

00:59:34.234 --> 00:59:36.467
in the...the event method.

00:59:36.467 --> 00:59:38.334
Uh, it sounds very bad
at first,

00:59:38.334 --> 00:59:39.934
but apparently that's the way
to do it right now.

00:59:39.934 --> 00:59:41.567
But we are aware
of this issue,

00:59:41.567 --> 00:59:47.100
and we've started working
a solution for, uh, Donut.

00:59:47.100 --> 00:59:51.334
man: Will this, uh, forthcoming
Native Development kit

00:59:51.334 --> 00:59:54.534
provide us with opportunities
to write more complicated views,

00:59:54.534 --> 00:59:57.734
custom views, that might involve
complex animation?

00:59:57.734 --> 00:59:59.501
Or will that be
very difficult?

00:59:59.501 --> 01:00:01.200
Guy: Uh, with
the Native Development kit?

01:00:01.200 --> 01:00:02.601
man: Yes.

01:00:02.601 --> 01:00:03.667
Guy: So what you will be able
to do

01:00:03.667 --> 01:00:06.000
with the Native Development
kit--

01:00:06.000 --> 01:00:07.501
and I don't know
all the details.

01:00:07.501 --> 01:00:08.834
But you'll still have to--
to write

01:00:08.834 --> 01:00:10.200
in the custom views in Java.

01:00:10.200 --> 01:00:12.734
But you will be able
to call into Native, uh,

01:00:12.734 --> 01:00:14.033
to do all the drawing
yourself.

01:00:14.033 --> 01:00:15.501
man: Do animations
and things like that.

01:00:15.501 --> 01:00:18.200
Guy: But the Native Development
kit will--

01:00:18.200 --> 01:00:20.467
will only contain, like,
the libc library.

01:00:20.467 --> 01:00:23.100
It won't contain OpenGL bindings
or things like that.

01:00:23.100 --> 01:00:25.968
At least, you know,
in the first version.

01:00:25.968 --> 01:00:29.400
We want to get the APIs right
before we make them public

01:00:29.400 --> 01:00:30.701
in native code.

01:00:30.701 --> 01:00:32.234
But we know that's,
you know, it's something

01:00:32.234 --> 01:00:33.534
that people want to do.

01:00:33.534 --> 01:00:35.434
It's also something
that we would like to do.

01:00:35.434 --> 01:00:37.667
And we're working on it,
and if you have feedback,

01:00:37.667 --> 01:00:39.234
if you can tell us
what exactly you need,

01:00:39.234 --> 01:00:41.400
just, you know, send us emails
and we'll look at it.

01:00:41.400 --> 01:00:43.400
man: Great, thank you.

01:00:43.400 --> 01:00:48.000
man: Hey, uh, so when using,
um, activity groups,

01:00:48.000 --> 01:00:50.634
they have a tendency to, uh,

01:00:50.634 --> 01:00:53.267
increase the depth
of the views a lot--

01:00:53.267 --> 01:00:56.200
Guy: Yes, uh, so I blame
whoever wrote the tabs.

01:00:56.200 --> 01:00:58.901
And we need to fix that.
I'm so sorry.

01:00:58.901 --> 01:01:02.634
man: Okay.

01:01:02.634 --> 01:01:04.501
man: Yeah, hi.
Um...

01:01:04.501 --> 01:01:08.901
I've been trying to get views
to render offscreen.

01:01:08.901 --> 01:01:12.000
So--maybe to use them
on a texture or similar.

01:01:12.000 --> 01:01:15.767
Um, but we're having a problem
with, um,

01:01:15.767 --> 01:01:20.033
the fact that I can't get
invalidate calls.

01:01:20.033 --> 01:01:22.434
Because if I--
if I--

01:01:22.434 --> 01:01:27.067
if I inherit the view group,
I can't...

01:01:27.067 --> 01:01:28.901
the--the invalidate
calls the group.

01:01:28.901 --> 01:01:30.834
It calls to the, um--
to its parent.

01:01:30.834 --> 01:01:32.767
It's, uh, it's final.

01:01:32.767 --> 01:01:34.100
And I can't--

01:01:34.100 --> 01:01:37.701
So is there any way to get
the invalidate call backs?

01:01:37.701 --> 01:01:39.968
Guy: Um...what you...

01:01:39.968 --> 01:01:43.567
Yeah, so you want to render
animations offscreen, right?

01:01:43.567 --> 01:01:46.767
man: I want to render any onward
views offscreen, basically.

01:01:46.767 --> 01:01:49.267
Guy: If all you need
is a snapshot,

01:01:49.267 --> 01:01:52.133
you can actually do exactly
what Hierarchy Viewer is doing.

01:01:52.133 --> 01:01:53.767
'Cause I haven't shown you that,
but, you know,

01:01:53.767 --> 01:01:55.100
Hierarchy Viewer,
you can get a--

01:01:55.100 --> 01:01:56.901
man: And we would like
to get them animated as well.

01:01:56.901 --> 01:01:59.801
Guy: Yes, so in
the view class, um...

01:01:59.801 --> 01:02:01.234
So first of all,
to get the snapshot,

01:02:01.234 --> 01:02:02.901
in the view class,
you have several methods

01:02:02.901 --> 01:02:04.534
called, uh,
setDrawingCacheEnabled,

01:02:04.534 --> 01:02:07.267
getDrawingCache,
and buildDrawingCache,

01:02:07.267 --> 01:02:10.267
that will give you a bitmap
of the view.

01:02:10.267 --> 01:02:11.601
That's actually
what ListView does.

01:02:11.601 --> 01:02:13.234
When you scroll ListView,

01:02:13.234 --> 01:02:15.133
it just turns all the views
into bitmaps.

01:02:15.133 --> 01:02:18.501
Um, if you want
to aim at that,

01:02:18.501 --> 01:02:22.234
the nice thing is
calling invalidate on a view

01:02:22.234 --> 01:02:24.367
will invalidate
that cache.

01:02:24.367 --> 01:02:27.467
And--and, well, the next time
you call getDrawingCache,

01:02:27.467 --> 01:02:29.033
it will update that cache.

01:02:29.033 --> 01:02:31.868
So it doesn't really matter
whether it's going to parent

01:02:31.868 --> 01:02:34.734
or whether you can, you know,
override that method, 'cause...

01:02:34.734 --> 01:02:36.667
man: The problem is that, um,

01:02:36.667 --> 01:02:39.267
when--when a view
invalidates itself...

01:02:39.267 --> 01:02:40.601
Guy: Yeah.

01:02:40.601 --> 01:02:42.901
man: It tells its parent
that it's been invalidated.

01:02:42.901 --> 01:02:45.000
There's no way for--
for me

01:02:45.000 --> 01:02:46.567
to get that information--

01:02:46.567 --> 01:02:48.334
Guy: Okay, I see, to know
that it's been invalidated.

01:02:48.334 --> 01:02:50.100
Uh, yeah, actually,
there is.

01:02:50.100 --> 01:02:53.267
Uh, if you, uh, if you...

01:02:53.267 --> 01:02:55.901
set on...on view,
there's a method

01:02:55.901 --> 01:02:57.834
called getViewTreeObserver.

01:02:57.834 --> 01:02:59.767
It will give you
a view tree observer.

01:02:59.767 --> 01:03:03.033
On that view tree observer,
you can add the listener

01:03:03.033 --> 01:03:06.033
that will, uh, fire, uh,
your call back

01:03:06.033 --> 01:03:08.334
every time the--the hard key
is redrawing something.

01:03:08.334 --> 01:03:09.501
man: Oh, okay.

01:03:09.501 --> 01:03:11.868
Guy: And that--you can also,
uh, be notified

01:03:11.868 --> 01:03:13.234
when there's a layout happening.

01:03:13.234 --> 01:03:14.934
There's a bunch of things
you can--you can see.

01:03:14.934 --> 01:03:16.801
And you can even cancel
the draws.

01:03:16.801 --> 01:03:18.901
So if you know that you're going
to draw offscreen,

01:03:18.901 --> 01:03:20.968
uh, you will be notified,
and you can say,

01:03:20.968 --> 01:03:22.133
"Oh, by the way,
please don't draw,

01:03:22.133 --> 01:03:23.701
'cause I'm handling it myself."

01:03:23.701 --> 01:03:26.033
man: Oh, okay.
Great, thanks.

01:03:26.033 --> 01:03:28.434
man: If you have
an adapter, and--

01:03:28.434 --> 01:03:30.701
when you build views,
you apply animation to it,

01:03:30.701 --> 01:03:32.400
should you be caching
single animation

01:03:32.400 --> 01:03:34.567
and applying that
to multiple views?

01:03:34.567 --> 01:03:37.767
Or new instance of animation
object for each view?

01:03:37.767 --> 01:03:39.868
And what are overall tips
and tricks for animations?

01:03:39.868 --> 01:03:41.334
Guy: So animations--

01:03:41.334 --> 01:03:43.200
you can definitely reuse
animation objects.

01:03:43.200 --> 01:03:46.067
Uh, that actually works
really well.

01:03:46.067 --> 01:03:48.234
And that's actually
what we do automatically

01:03:48.234 --> 01:03:49.667
for layout animations.

01:03:49.667 --> 01:03:51.167
Uh, so yeah.

01:03:51.167 --> 01:03:52.567
You should, uh...
you should...

01:03:52.567 --> 01:03:53.901
you can cache them
and reuse them.

01:03:53.901 --> 01:03:55.067
And, you know, animations
are actually

01:03:55.067 --> 01:03:56.400
that kind of thing
that you can put

01:03:56.400 --> 01:03:58.167
in the view hol--
in the view holder.

01:03:58.167 --> 01:03:59.534
And the next time
you need to use it,

01:03:59.534 --> 01:04:01.367
you just, you know,
call reset on the animation

01:04:01.367 --> 01:04:03.033
and you set it again
or you start it again,

01:04:03.033 --> 01:04:04.734
and that should work.

01:04:04.734 --> 01:04:07.334
Uh, are we good on time?

01:04:07.334 --> 01:04:08.534
Okay. We're done.

01:04:08.534 --> 01:04:09.601
Sorry, guys.

01:04:09.601 --> 01:04:12.534
[applause]

