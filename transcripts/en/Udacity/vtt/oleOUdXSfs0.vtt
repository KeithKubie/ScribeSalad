WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Okay, so here we are in the IDE.

00:00:02.000 --> 00:00:05.000
This is going to be basically the same file we had before,

00:00:05.000 --> 00:00:08.000
the link class and all of the links that we make.

00:00:08.000 --> 00:00:12.000
I'm importing a new module that's built into Python called SQLite3,

00:00:12.000 --> 00:00:16.000
and this allows us to use SQLite in Python, which is pretty cool.

00:00:16.000 --> 00:00:20.000
I've got some code here which creates an in-memory SQLite database.

00:00:20.000 --> 00:00:23.000
You can see some SQL here that we haven't discussed

00:00:23.000 --> 00:00:26.000
for creating the links table and then inserting all of the links

00:00:26.000 --> 00:00:28.000
into that table.

00:00:28.000 --> 00:00:30.000
This code isn't super important to you right now,

00:00:30.000 --> 00:00:34.000
but if you're curious, I just basically made a SQL table

00:00:34.000 --> 00:00:38.000
with all of that link data, and I've given you some instructions here.

00:00:38.000 --> 00:00:40.000
And let's play around with this a little bit.

00:00:40.000 --> 00:00:45.000
The important thing is that we've got this db variable, this global variable.

00:00:45.000 --> 00:00:48.000
That's going to represent our SQLite database right here.

00:00:48.000 --> 00:00:51.000
And let me show you how to run some SQL.

00:00:51.000 --> 00:00:56.000
I can say c = db.execute, and I can give some SQL.

00:00:56.000 --> 00:01:00.000
In this case, I'll say select * from links.

00:01:00.000 --> 00:01:04.000
And this doesn't have a where clause like we talked about before.

00:01:04.000 --> 00:01:06.000
Where clauses aren't required.

00:01:06.000 --> 00:01:08.000
They're only required if you don't want to fetch everything.

00:01:08.000 --> 00:01:11.000
This little bit of SQL here, select * from links,

00:01:11.000 --> 00:01:15.000
just selects all of the columns from the links table.

00:01:15.000 --> 00:01:18.000
And what this creates is what's called a cursor,

00:01:18.000 --> 00:01:23.000
and a cursor is just a position in the database.

00:01:23.000 --> 00:01:27.000
We can call this function fetchall on c, on the cursor,

00:01:27.000 --> 00:01:30.000
to actually load all of the data out of the database into this

00:01:30.000 --> 00:01:34.000
list of results, and in this particular case, I'll just return the results.

00:01:34.000 --> 00:01:39.000
We'll go ahead and give this a run.

00:01:39.000 --> 00:01:41.000
That's a lot of data.

00:01:41.000 --> 00:01:43.000
We executed our SQL, and we saw some results.

00:01:43.000 --> 00:01:45.000
Let's change this up a little bit.

00:01:45.000 --> 00:01:50.000
Let's change this from a to title.

00:01:50.000 --> 00:01:52.000
We'll just look at the titles from the links,

00:01:52.000 --> 00:01:54.000
and let's go ahead and run this.

00:01:54.000 --> 00:01:56.000
Now I see a list of all of our titles.

00:01:56.000 --> 00:01:58.000
That's kind of cool.

00:01:58.000 --> 00:02:02.000
Let me show you some other things we can do before we have quiz time.

00:02:02.000 --> 00:02:04.000
Let's change this back to *.

00:02:04.000 --> 00:02:06.000
One of the things we can do is we can iterate over a cursor.

00:02:06.000 --> 00:02:11.000
I can say for t in c.

00:02:11.000 --> 00:02:14.000
Okay, so I want to make these variables a little bit more clear,

00:02:14.000 --> 00:02:16.000
so for cursor, for link_tuple.

00:02:16.000 --> 00:02:18.000
Tuple is a reserved word.

00:02:18.000 --> 00:02:23.000
If we iterate over our cursor, we get the results one by one from the database,

00:02:23.000 --> 00:02:25.000
and we get them back as a tuple, not as our link objects,

00:02:25.000 --> 00:02:28.000
so what we actually want to do is make the link objects,

00:02:28.000 --> 00:02:34.000
so we can do that by saying this: link equals--little link, our little instance--

00:02:34.000 --> 00:02:39.000
equals capital link(*link_tuple).

00:02:39.000 --> 00:02:42.000
And this is a Python syntax for passing in all of the

00:02:42.000 --> 00:02:47.000
parameters in this tuple as arguments to this function.

00:02:47.000 --> 00:02:49.000
In this case, it's not really a function.

00:02:49.000 --> 00:02:51.000
It's the constructor link to make the object.

00:02:51.000 --> 00:02:56.000
But now we have a link object, and here let's say print link.votes.

00:02:56.000 --> 00:02:58.000
Let's go ahead and run this.

00:02:58.000 --> 00:03:02.000
What this should be doing is running the SQL, select * from links,

00:03:02.000 --> 00:03:07.000
iterating over all of the results that are returned to us as a tuple,

00:03:07.000 --> 00:03:14.000
converting those tuples into a link object, and then printing .votes.

00:03:14.000 --> 00:03:18.000
We can see it printed all of the votes for our links.

00:03:18.000 --> 00:03:20.000
Pretty neat.

00:03:20.000 --> 00:03:22.000
Let me just show you one last thing, because I'll explain what's going on here.

00:03:22.000 --> 00:03:24.000
I think this might be new to some of you.

00:03:24.000 --> 00:03:29.000
If I were just to print the link tuple like this,

00:03:29.000 --> 00:03:32.000
and we'll just print exactly what we get back from the cursor,

00:03:32.000 --> 00:03:34.000
I'll show you what that does.

00:03:34.000 --> 00:03:38.000
This prints each row of the database as a Python tuple,

00:03:38.000 --> 00:03:43.000
so you can see one row here, and the columns are in order that I define them,

00:03:43.000 --> 00:03:47.000
and I conveniently define them in the same order that the constructor expects them.

00:03:47.000 --> 00:03:50.000
You've got the ID of the link.

00:03:50.000 --> 00:03:53.000
You've got the user ID, the time it was submitted.

00:03:53.000 --> 00:03:56.000
This is in epoch time, second since 1970.

00:03:56.000 --> 00:04:01.000
This would be the number of votes, and then the title here,

00:04:01.000 --> 00:04:04.000
and the URL for each of these links.

00:04:04.000 --> 00:04:09.000
And if you put a * in front of a tuple like this

00:04:09.000 --> 00:04:13.000
and pass it into an object's constructor or in any function,

00:04:13.000 --> 00:04:17.000
the arguments get put in place like that, so that's all that was happening there.

00:04:17.000 --> 00:04:19.000
And I'll show you real quick how we created this table.

00:04:19.000 --> 00:04:23.000
This is SQL, and you can see I create table links,

00:04:23.000 --> 00:04:28.000
and I've defined the columns here, id, submitter&lt;u&gt;id, submitted&lt;/u&gt;time,

00:04:28.000 --> 00:04:32.000
votes, title, url, and you can see I included the types,

00:04:32.000 --> 00:04:36.000
so anyway, that's not super important, but it's there.

00:04:36.000 --> 00:04:38.000
All right, time for a quiz.

00:04:38.000 --> 00:04:42.000
What I'd like you to do is make this query function return the number of votes

00:04:42.000 --> 00:04:44.000
that the link with ID 2 has.

00:04:44.000 --> 00:04:46.000
Now, I've written some of the function for you,

00:04:46.000 --> 00:04:49.000
and all you need to do is put in this SQL here

00:04:49.000 --> 00:04:51.000
to find that link.

00:04:51.000 --> 00:04:54.000
What these other lines do is they take the cursor return

00:04:54.000 --> 00:04:58.000
from db.execute here, and it runs this function called fetchone on it,

00:04:58.000 --> 00:05:01.000
which basically returns the first result.

00:05:01.000 --> 00:05:05.000
And then we use the * syntax to pass that into the link constructor,

00:05:05.000 --> 00:05:09.000
which makes our link object, and then we return link.votes.

00:05:09.000 --> 00:05:13.000
All you have to do in this quiz is figure out the SQL.

00:05:13.000 --> 00:05:17.000
Good luck.

