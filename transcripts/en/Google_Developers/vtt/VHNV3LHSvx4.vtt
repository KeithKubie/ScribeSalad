WEBVTT
Kind: captions
Language: en

00:00:07.437 --> 00:00:09.020
MARTIN GORNER: Hello,
and welcome back

00:00:09.020 --> 00:00:11.080
on Root Access Berlin.

00:00:11.080 --> 00:00:14.480
We are here again at
the factory studio

00:00:14.480 --> 00:00:18.900
for the second episode
on SQL versus NoSQL.

00:00:18.900 --> 00:00:23.490
I have with me Nacho Coloma
from the company Koliseo.

00:00:23.490 --> 00:00:26.105
So first of all, tell us
again what Koliseo is.

00:00:26.105 --> 00:00:27.980
NACHO COLOMA: Koliseo
is a ticketing platform

00:00:27.980 --> 00:00:32.560
that is focused on making
the ticketing experience as

00:00:32.560 --> 00:00:34.550
simple and as fast as possible.

00:00:34.550 --> 00:00:38.530
MARTIN GORNER: Now we would
like to hear your expert advice

00:00:38.530 --> 00:00:43.110
on how to work around some
of the limitations of NoSQL

00:00:43.110 --> 00:00:45.130
databases.

00:00:45.130 --> 00:00:48.600
What are the tips,
tricks, and what

00:00:48.600 --> 00:00:52.000
is the secret sauce
that you use at Koliseo?

00:00:52.000 --> 00:00:53.950
NACHO COLOMA: Yeah,
in the last episode

00:00:53.950 --> 00:00:55.510
we were talking
about the difference

00:00:55.510 --> 00:00:59.840
between SQL and NoSQL databases.

00:00:59.840 --> 00:01:03.110
Today we are going
to focus on tricks.

00:01:03.110 --> 00:01:05.657
How do you work around
the limitations?

00:01:05.657 --> 00:01:07.740
MARTIN GORNER: In the
process of building Koliseo,

00:01:07.740 --> 00:01:11.030
you acquired a lot of expertise
on App Engine and the data

00:01:11.030 --> 00:01:17.090
store, and you are publishing
this library called SimpleDS,

00:01:17.090 --> 00:01:20.670
which makes it easier to
work with the data store

00:01:20.670 --> 00:01:23.390
because it provides a
mapping between Java classes

00:01:23.390 --> 00:01:24.965
and Datastore entities.

00:01:24.965 --> 00:01:26.340
NACHO COLOMA:
Yeah, that's right.

00:01:26.340 --> 00:01:29.990
It's available at
GitHub and also there's

00:01:29.990 --> 00:01:33.570
a lot of introductory
materials to SimpleDS.

00:01:33.570 --> 00:01:36.700
So I invite everyone
to try it out.

00:01:36.700 --> 00:01:40.680
MARTIN GORNER: And so the
alternatives to SimpleDS.

00:01:40.680 --> 00:01:43.249
So JPA and JDO, that's what
the documentation says.

00:01:43.249 --> 00:01:44.040
NACHO COLOMA: Yeah.

00:01:44.040 --> 00:01:46.530
And Objectify is
what a lot of people

00:01:46.530 --> 00:01:47.812
are using also these days.

00:01:47.812 --> 00:01:49.270
MARTIN GORNER: But
I think we agree

00:01:49.270 --> 00:01:53.790
that people are better off using
either Objectify or SimpleDS.

00:01:53.790 --> 00:01:54.680
NACHO COLOMA: Yeah.

00:01:54.680 --> 00:01:59.820
Yeah, you should try to
shy away from JDO or JPA

00:01:59.820 --> 00:02:02.770
because they are too
generalistic solutions.

00:02:02.770 --> 00:02:05.790
They are focused
on SQL databases

00:02:05.790 --> 00:02:09.419
and the NoSQL problems
are extremely different.

00:02:09.419 --> 00:02:12.750
MARTIN GORNER: So
we came up lost time

00:02:12.750 --> 00:02:15.280
with this five point
list for helping

00:02:15.280 --> 00:02:18.200
people decide between
SQL and NoSQL.

00:02:18.200 --> 00:02:20.910
We've seen that on
the scalability front,

00:02:20.910 --> 00:02:23.700
NoSQL is unbeatable.

00:02:23.700 --> 00:02:28.130
That also a lot of people
feel that a NoSQL database

00:02:28.130 --> 00:02:31.120
can represent their data in a
more natural way, although that

00:02:31.120 --> 00:02:34.470
is a philosophical discussion.

00:02:34.470 --> 00:02:39.350
But in the SQL world, you have
the power all the SQL language.

00:02:39.350 --> 00:02:43.160
How do you work with
queries in NoSQL?

00:02:43.160 --> 00:02:46.470
NACHO COLOMA: If you are
trying to execute a query,

00:02:46.470 --> 00:02:49.850
you need to have an index for
every field that is involved,

00:02:49.850 --> 00:02:52.510
for every property that
is involved in that query.

00:02:52.510 --> 00:02:55.760
MARTIN GORNER: Let's take
the example of a ticket

00:02:55.760 --> 00:03:00.160
that we store as an entity
in a NoSQL data store.

00:03:00.160 --> 00:03:03.680
And well, first of
all, I want to find

00:03:03.680 --> 00:03:06.790
all of the tickets that
belong to a given event.

00:03:06.790 --> 00:03:09.650
So my ticket has an event key.

00:03:09.650 --> 00:03:11.380
NACHO COLOMA: Yeah.

00:03:11.380 --> 00:03:13.490
MARTIN GORNER: But I need
to do something extra

00:03:13.490 --> 00:03:16.169
to be able to query by that key.

00:03:16.169 --> 00:03:17.960
NACHO COLOMA: First of
all, if you are only

00:03:17.960 --> 00:03:22.120
asking for tickets
with a 13 event key

00:03:22.120 --> 00:03:28.800
in the App Engine Data Store,
all properties in an entity

00:03:28.800 --> 00:03:30.600
are by default indexed.

00:03:30.600 --> 00:03:32.220
You have a single index.

00:03:32.220 --> 00:03:35.540
You have an index for a single
property that is the event key.

00:03:35.540 --> 00:03:37.820
If you are only
going to ask give me

00:03:37.820 --> 00:03:40.870
all the tickets
with this event key,

00:03:40.870 --> 00:03:42.700
you can have that
out of the box.

00:03:42.700 --> 00:03:45.000
MARTIN GORNER: But still,
it costs me storage.

00:03:45.000 --> 00:03:46.150
NACHO COLOMA: Yeah.

00:03:46.150 --> 00:03:49.810
Yeah, every index that is
stored with your entities

00:03:49.810 --> 00:03:53.070
takes a space and it
takes performance as well.

00:03:53.070 --> 00:03:57.280
So at some point, you
will almost certainly

00:03:57.280 --> 00:04:01.280
have more space dedicated to
indexes than to the information

00:04:01.280 --> 00:04:02.181
itself.

00:04:02.181 --> 00:04:03.680
MARTIN GORNER: And
so what do I need

00:04:03.680 --> 00:04:08.020
to do now if I want to
query by two properties?

00:04:08.020 --> 00:04:10.670
Like here for instance I want
to get all the tickets relating

00:04:10.670 --> 00:04:14.950
to this event and then sort
them by their creation date,

00:04:14.950 --> 00:04:16.100
for instance.

00:04:16.100 --> 00:04:17.250
NACHO COLOMA: Yeah.

00:04:17.250 --> 00:04:20.374
Not only when you are querying
by a property, also when you

00:04:20.374 --> 00:04:23.370
are sorting, you need
an index for that.

00:04:23.370 --> 00:04:25.920
When you are doing it with
more than one property

00:04:25.920 --> 00:04:28.780
at the same time, you need
to create a composite index.

00:04:28.780 --> 00:04:31.830
MARTIN GORNER: And so
this multiple index

00:04:31.830 --> 00:04:36.330
will also cost me, of
course, storage space.

00:04:36.330 --> 00:04:37.600
NACHO COLOMA: Yeah.

00:04:37.600 --> 00:04:43.810
MARTIN GORNER: So what are the
storage space saving tricks

00:04:43.810 --> 00:04:45.790
that you can recommend?

00:04:45.790 --> 00:04:49.510
For instance, you told
me that for some requests

00:04:49.510 --> 00:04:53.660
you might want to filter
in memory instead of asking

00:04:53.660 --> 00:04:55.650
the Datastore to do
the filtering for you.

00:04:55.650 --> 00:04:56.441
NACHO COLOMA: Yeah.

00:04:56.441 --> 00:04:58.080
There are several
possibilities here.

00:04:58.080 --> 00:05:03.780
First of all, if you want, you
can disable automatic indexing

00:05:03.780 --> 00:05:04.895
for single properties.

00:05:04.895 --> 00:05:07.750
If you know for sure
that a property is never

00:05:07.750 --> 00:05:10.280
going to be used in
the query, then you

00:05:10.280 --> 00:05:14.920
can just store it as an
index and it will not

00:05:14.920 --> 00:05:16.980
take that extra space.

00:05:16.980 --> 00:05:20.980
Another case that we are finding
a lot, when you have a query

00:05:20.980 --> 00:05:28.480
and you are reasonably sure
that the criteria for selecting

00:05:28.480 --> 00:05:33.620
is 99% of the time going to
be a match for your query,

00:05:33.620 --> 00:05:35.370
then you can do that in memory.

00:05:35.370 --> 00:05:39.570
For example, in this
case we are executing

00:05:39.570 --> 00:05:42.370
a query of all the
users with certain role.

00:05:42.370 --> 00:05:46.330
Now we're only interested
in users that are enabled.

00:05:46.330 --> 00:05:50.090
You can add that and
use a composite index.

00:05:50.090 --> 00:05:53.900
That's a waste because 99%
of your users are enabled.

00:05:53.900 --> 00:05:57.530
This is, in this case, you
can assume that it's not

00:05:57.530 --> 00:06:00.930
frequent to find disabled users.

00:06:00.930 --> 00:06:02.890
In that case, what
we are doing here,

00:06:02.890 --> 00:06:05.970
we're using Guava
predicates to filter.

00:06:05.970 --> 00:06:08.430
This is a filtering
that is done in memory.

00:06:08.430 --> 00:06:12.160
This query will return
you a paginated query.

00:06:12.160 --> 00:06:17.010
And before returning you the
list of data for this page,

00:06:17.010 --> 00:06:19.470
it's going to filter
in memory according

00:06:19.470 --> 00:06:21.570
to predicated you have passed.

00:06:21.570 --> 00:06:23.790
A predicate is a function
that is inside Guava.

00:06:23.790 --> 00:06:28.410
Guava is one library that
is from Google, actually,

00:06:28.410 --> 00:06:30.210
an open source
library, that allows

00:06:30.210 --> 00:06:33.040
you to manipulate
collections of data.

00:06:33.040 --> 00:06:35.290
So in this case,
what we are doing

00:06:35.290 --> 00:06:40.334
is to filter and return only
users that are not disabled.

00:06:40.334 --> 00:06:41.750
MARTIN GORNER:
Another problem you

00:06:41.750 --> 00:06:45.800
told me about is that
in the NoSQL world,

00:06:45.800 --> 00:06:47.187
you don't have joins.

00:06:47.187 --> 00:06:49.270
NACHO COLOMA: Yeah, and
that's a problem actually,

00:06:49.270 --> 00:06:54.140
because if you want to show
data from two different entities

00:06:54.140 --> 00:06:57.540
at the same time, you can do
that as you would with SQL.

00:06:57.540 --> 00:06:58.820
It's a no brainer.

00:06:58.820 --> 00:06:59.840
You have two entities.

00:06:59.840 --> 00:07:02.360
You want to put one
along the other.

00:07:02.360 --> 00:07:04.910
You just make a join and
everything's working.

00:07:04.910 --> 00:07:07.220
MARTIN GORNER: So for
instance, here you

00:07:07.220 --> 00:07:09.120
want to show a list of users.

00:07:09.120 --> 00:07:14.080
And next to each user, you
want to display his last post.

00:07:14.080 --> 00:07:15.280
NACHO COLOMA: Yep.

00:07:15.280 --> 00:07:17.740
MARTIN GORNER: So that would
be a join in the SQL world.

00:07:17.740 --> 00:07:18.480
NACHO COLOMA: That's right.

00:07:18.480 --> 00:07:20.240
You have two different
entities and you

00:07:20.240 --> 00:07:23.220
want to put one
beside the other.

00:07:23.220 --> 00:07:28.630
MARTIN GORNER: So the simple
solution that I would implement

00:07:28.630 --> 00:07:30.250
would be something like this.

00:07:30.250 --> 00:07:36.000
I would run a query to
return all of my articles.

00:07:36.000 --> 00:07:41.640
And then for each article,
I would run a separate query

00:07:41.640 --> 00:07:44.019
to return its author.

00:07:44.019 --> 00:07:44.810
NACHO COLOMA: Yeah.

00:07:44.810 --> 00:07:46.300
MARTIN GORNER: Why
is that a bad idea?

00:07:46.300 --> 00:07:48.300
NACHO COLOMA: This is the
typical first approach

00:07:48.300 --> 00:07:49.920
to this problem.

00:07:49.920 --> 00:07:51.645
You have the list
of articles and then

00:07:51.645 --> 00:07:54.870
you're going to
ask for each user

00:07:54.870 --> 00:07:57.020
over and over and over again.

00:07:57.020 --> 00:07:59.980
What happens is that each
time you go to the Datastore

00:07:59.980 --> 00:08:05.310
it's an expensive operation in
terms of CPU, in terms of time.

00:08:05.310 --> 00:08:08.330
And you are making these
calls sequentially,

00:08:08.330 --> 00:08:09.770
one after the other.

00:08:09.770 --> 00:08:12.830
So if, for example,
you have 20 articles,

00:08:12.830 --> 00:08:15.840
they're going to request
20 times to the Datastore

00:08:15.840 --> 00:08:18.050
to get the users back.

00:08:18.050 --> 00:08:22.760
Instead of that, the approach
that you should try to do

00:08:22.760 --> 00:08:26.550
is to process all the
articles, get all the keys,

00:08:26.550 --> 00:08:30.190
and then require all the
users in a single request.

00:08:30.190 --> 00:08:34.659
MARTIN GORNER: So here we are
assuming that our articles

00:08:34.659 --> 00:08:39.989
inside of the article, you
have a user key that is stored.

00:08:39.989 --> 00:08:43.530
And so you get the articles,
you get the collection of keys,

00:08:43.530 --> 00:08:47.780
and then the Datastore has a
built in functionality which

00:08:47.780 --> 00:08:50.000
is called batch
queries where you

00:08:50.000 --> 00:08:51.730
can provide this
list of keys and it

00:08:51.730 --> 00:08:54.760
will return a list of uers.

00:08:54.760 --> 00:08:56.680
NACHO COLOMA: You
can request I want

00:08:56.680 --> 00:08:58.895
to get all these keys
in a single operation

00:08:58.895 --> 00:09:00.120
and it will get back.

00:09:00.120 --> 00:09:02.960
You don't have to do
anything special for that.

00:09:02.960 --> 00:09:05.620
That's a good thing
of NoSQL storage,

00:09:05.620 --> 00:09:07.530
that you can ask
for a set of keys

00:09:07.530 --> 00:09:09.064
and they will come
back right away.

00:09:09.064 --> 00:09:10.730
MARTIN GORNER: So
let's look at the code

00:09:10.730 --> 00:09:13.210
here for executing this.

00:09:13.210 --> 00:09:16.710
So the red line here
is what I understand.

00:09:16.710 --> 00:09:18.860
I call the Datastore.

00:09:18.860 --> 00:09:25.760
I give it a bunch of keys and
in return I get a map of users.

00:09:25.760 --> 00:09:28.110
NACHO COLOMA: What
we have here is

00:09:28.110 --> 00:09:31.670
we are retrieving the articles,
then we're transforming again,

00:09:31.670 --> 00:09:33.280
we're using Guava for these.

00:09:33.280 --> 00:09:35.830
We're transforming
all the articles

00:09:35.830 --> 00:09:37.990
into their use of keys.

00:09:37.990 --> 00:09:40.810
MARTIN GORNER: And so
here simply instead of

00:09:40.810 --> 00:09:45.867
doing an integration
you use this trick that

00:09:45.867 --> 00:09:47.450
looks like functional
programming that

00:09:47.450 --> 00:09:53.250
comes with Guava where you can
provide a mapping function that

00:09:53.250 --> 00:09:55.395
returns a user key
from an article entity.

00:09:55.395 --> 00:09:56.520
NACHO COLOMA: That's right.

00:09:56.520 --> 00:09:58.460
Entity to property
function is something

00:09:58.460 --> 00:09:59.880
that comes with SimpleDS.

00:09:59.880 --> 00:10:03.360
SimpleDS has several
tricks like these

00:10:03.360 --> 00:10:05.510
to make easy the
functional programming

00:10:05.510 --> 00:10:07.420
part of working with NoSQL.

00:10:07.420 --> 00:10:10.300
Because these are cases
that go over and over again.

00:10:10.300 --> 00:10:13.570
When you're working,
you're always faking joins,

00:10:13.570 --> 00:10:15.670
you are always
filtering memory because

00:10:15.670 --> 00:10:17.470
of the limitations
in the platform.

00:10:17.470 --> 00:10:20.840
So SimpleDS is
designed to help you

00:10:20.840 --> 00:10:24.930
with that, trying
to make it easier.

00:10:24.930 --> 00:10:29.750
MARTIN GORNER: So we
went through the art,

00:10:29.750 --> 00:10:34.090
I would say, the black art
of querying the Datastore.

00:10:34.090 --> 00:10:38.010
Another limitation
that is quite painful,

00:10:38.010 --> 00:10:41.930
frankly, is the lack
of database schemas.

00:10:41.930 --> 00:10:46.130
Some people like very strict
schemas and some people

00:10:46.130 --> 00:10:52.360
like the freedom that a
NoSQL database offers.

00:10:52.360 --> 00:10:58.880
But it also means that
in a NoSQL database

00:10:58.880 --> 00:11:01.860
you will have to maintain
the integrity or your data

00:11:01.860 --> 00:11:05.250
structures basically by hand.

00:11:05.250 --> 00:11:06.310
NACHO COLOMA: Yep.

00:11:06.310 --> 00:11:09.390
Say, for example, that
you want to add new fields

00:11:09.390 --> 00:11:11.990
to an existing structure
then [INAUDIBLE]

00:11:11.990 --> 00:11:13.150
another table right?

00:11:13.150 --> 00:11:16.040
You would just add a column
and it's already there.

00:11:16.040 --> 00:11:18.610
And maybe you can also
assign a default value

00:11:18.610 --> 00:11:19.830
and it's already initialized.

00:11:19.830 --> 00:11:21.330
You don't have to do
anything special for that.

00:11:21.330 --> 00:11:23.510
MARTIN GORNER: So that would
be one operation in a SQL

00:11:23.510 --> 00:11:23.650
database.

00:11:23.650 --> 00:11:24.480
NACHO COLOMA: That's right.

00:11:24.480 --> 00:11:25.021
That's right.

00:11:25.021 --> 00:11:26.700
But not in NoSQL.

00:11:26.700 --> 00:11:28.630
In NoSQL you don't
have any schema,

00:11:28.630 --> 00:11:32.010
meaning that every
instance is independent.

00:11:32.010 --> 00:11:33.940
If you want to add
the property and you

00:11:33.940 --> 00:11:37.310
want it to exist in all
the existing instances

00:11:37.310 --> 00:11:40.290
in the Datastore, then you
have to execute that by hand.

00:11:40.290 --> 00:11:43.042
You have to go one by
one adding the property,

00:11:43.042 --> 00:11:44.500
then installing
the instance, going

00:11:44.500 --> 00:11:46.330
to the next one, et
cetera, et cetera.

00:11:46.330 --> 00:11:49.700
MARTIN GORNER: So let's
stop a minute here.

00:11:49.700 --> 00:11:53.590
You told me before that I
can do any full table scans

00:11:53.590 --> 00:11:59.220
because only index
queries are going to work.

00:11:59.220 --> 00:12:01.150
But here I need
to go through all

00:12:01.150 --> 00:12:03.940
of my entities of
the whole Datastore

00:12:03.940 --> 00:12:07.380
to upgrade them to
my new data model.

00:12:07.380 --> 00:12:09.140
NACHO COLOMA: Yeah.

00:12:09.140 --> 00:12:10.890
You can do that using cursors.

00:12:10.890 --> 00:12:13.460
Cursors work in
NoSQL more or less

00:12:13.460 --> 00:12:17.850
the same way they
do in SQL databases.

00:12:17.850 --> 00:12:20.530
You have a big set
of data to process.

00:12:20.530 --> 00:12:23.430
You can use cursors to
postpone work, to say,

00:12:23.430 --> 00:12:28.730
OK, I stopped here and I want to
restart this query again later.

00:12:28.730 --> 00:12:33.950
So you can work in chunks of
work and keep postponing work.

00:12:33.950 --> 00:12:36.740
So let's say, for example, one
common practice when you're

00:12:36.740 --> 00:12:42.050
working with NoSQL Datastores
is to denormalize your data.

00:12:42.050 --> 00:12:44.690
We were talking about how
you had different collections

00:12:44.690 --> 00:12:46.610
of articles and
users and you wanted

00:12:46.610 --> 00:12:49.700
to transform your
articles into users.

00:12:49.700 --> 00:12:55.620
But if your operation is,
say, executing 80% of the time

00:12:55.620 --> 00:12:59.300
because, for example, it's part
of your home page or whatever,

00:12:59.300 --> 00:13:02.380
it's happening and over again.

00:13:02.380 --> 00:13:05.120
What you usually do
in NoSQL databases

00:13:05.120 --> 00:13:08.400
is to denormalize data.

00:13:08.400 --> 00:13:10.390
To get into the
article the fields

00:13:10.390 --> 00:13:13.440
that I need from the user
for 80% of the cases.

00:13:13.440 --> 00:13:16.270
MARTIN GORNER: So that's what
we see here in this example.

00:13:16.270 --> 00:13:21.770
I added into my article
entity those three red fields,

00:13:21.770 --> 00:13:23.890
username, user
email, user avatar,

00:13:23.890 --> 00:13:26.869
that are duplicated
from the user entity.

00:13:26.869 --> 00:13:27.660
NACHO COLOMA: Yeah.

00:13:27.660 --> 00:13:29.810
And you will have to
keep those by hand.

00:13:29.810 --> 00:13:31.780
If the user is
modified, you will

00:13:31.780 --> 00:13:36.270
have to cascade these changes to
all the articles by that user.

00:13:36.270 --> 00:13:38.890
But the thing is, how
do you introduce this

00:13:38.890 --> 00:13:41.560
into an already
working database,

00:13:41.560 --> 00:13:43.670
into your already
working application?

00:13:43.670 --> 00:13:47.280
With a new upgrade, you need to
modify your data to denormalize

00:13:47.280 --> 00:13:50.750
it and it's going to apply
to all the existing articles.

00:13:50.750 --> 00:13:52.300
So you have to
modify all of them.

00:13:52.300 --> 00:13:54.310
MARTIN GORNER: Let's
see an example.

00:13:54.310 --> 00:13:55.810
I understand the code here.

00:13:55.810 --> 00:13:58.890
I understand the three
red lines in the middle.

00:13:58.890 --> 00:14:02.480
That is where we are setting
the username, the email,

00:14:02.480 --> 00:14:07.310
and the avatar on the
article coming from the user.

00:14:07.310 --> 00:14:13.330
I also understand that we
have a for loop around this.

00:14:13.330 --> 00:14:17.480
we are doing an iteration
of all of our articles.

00:14:17.480 --> 00:14:20.200
And actually the
first red line, that

00:14:20.200 --> 00:14:23.570
is a query that is returning
all of my articles.

00:14:23.570 --> 00:14:26.820
But of course, this is going
to be a lot of articles.

00:14:26.820 --> 00:14:28.680
NACHO COLOMA: Yeah, and
you have limitations

00:14:28.680 --> 00:14:33.710
that you should always
be aware of in appending.

00:14:33.710 --> 00:14:40.340
In appending, all requests
should be ending by 30 seconds.

00:14:40.340 --> 00:14:42.220
You can be executing
in a back end

00:14:42.220 --> 00:14:45.410
or you could be executing
in a query, in a task queue.

00:14:45.410 --> 00:14:48.520
But in any of these
cases, your query

00:14:48.520 --> 00:14:51.890
has an expiration
time of 30 seconds.

00:14:51.890 --> 00:14:56.290
So if you're going to execute a
long running query because you

00:14:56.290 --> 00:14:58.650
have to process
a lot of results,

00:14:58.650 --> 00:15:02.130
you should be stopping
after some time

00:15:02.130 --> 00:15:06.550
and retasking again,
rescheduling your remaining

00:15:06.550 --> 00:15:07.440
work.

00:15:07.440 --> 00:15:09.210
MARTIN GORNER: And
so the problem here

00:15:09.210 --> 00:15:13.350
is that you need to know when
you query's about to time out.

00:15:13.350 --> 00:15:14.970
So you're using a
different library

00:15:14.970 --> 00:15:17.350
which has this query
time out function.

00:15:17.350 --> 00:15:26.170
But then once you stop
processing your articles,

00:15:26.170 --> 00:15:29.820
and you know that you have
not finished, how are you

00:15:29.820 --> 00:15:31.507
resuming this operation?

00:15:31.507 --> 00:15:33.090
NACHO COLOMA: In
this case, what we're

00:15:33.090 --> 00:15:36.440
doing is the return a cursor.

00:15:36.440 --> 00:15:39.010
If you're returning
a NotNode cursor,

00:15:39.010 --> 00:15:41.310
then I assume that
you have not finished.

00:15:41.310 --> 00:15:43.980
So I reschedule
to execute again,

00:15:43.980 --> 00:15:47.350
or I just call it
right away again

00:15:47.350 --> 00:15:49.180
because I have enough time.

00:15:49.180 --> 00:15:51.840
MARTIN GORNER: So you are
you're putting that cursor

00:15:51.840 --> 00:15:55.970
into a task which you are
putting onto the task queue

00:15:55.970 --> 00:15:56.880
again.

00:15:56.880 --> 00:16:01.520
And it will be executed
at a later point in time.

00:16:01.520 --> 00:16:06.420
But you need all that to be
finished before you upload

00:16:06.420 --> 00:16:08.490
the new version of
your software that

00:16:08.490 --> 00:16:10.350
is using those no new fields.

00:16:10.350 --> 00:16:11.960
NACHO COLOMA: That's right.

00:16:11.960 --> 00:16:13.390
That's right.

00:16:13.390 --> 00:16:15.610
You should design
this kind of task

00:16:15.610 --> 00:16:19.110
to be unimportant in the sense
that you can execute them

00:16:19.110 --> 00:16:21.470
over and over again
and it would work.

00:16:21.470 --> 00:16:25.110
Or you can also work with
MapReduce if you want.

00:16:25.110 --> 00:16:28.230
That's going to be
faster on one side.

00:16:28.230 --> 00:16:31.420
On the other side, it's going
to be a bit more complicated

00:16:31.420 --> 00:16:33.620
to configurate.

00:16:33.620 --> 00:16:35.220
Your choice.

00:16:35.220 --> 00:16:38.090
MARTIN GORNER: The last point
that I would like us to discuss

00:16:38.090 --> 00:16:39.390
is coherence.

00:16:39.390 --> 00:16:45.490
You have a very good example of
that using events and tickets.

00:16:45.490 --> 00:16:47.560
So first of all,
tell us why you need

00:16:47.560 --> 00:16:50.129
a transaction to buy a ticket.

00:16:50.129 --> 00:16:51.920
NACHO COLOMA: When you
are buying a ticket,

00:16:51.920 --> 00:16:54.060
you need transactions
in NoSQL data

00:16:54.060 --> 00:16:57.390
stores the same way you
need them in SQL databases.

00:16:57.390 --> 00:16:59.969
You need to change
two entities and they

00:16:59.969 --> 00:17:01.260
have to behave transactionally.

00:17:01.260 --> 00:17:04.210
Either the two of them
are modified or not.

00:17:04.210 --> 00:17:07.260
An event has the number
of available tickets.

00:17:07.260 --> 00:17:08.966
Let's say, for
example, one hand when

00:17:08.966 --> 00:17:11.607
I am buying a ticket I
am creating a new entity

00:17:11.607 --> 00:17:13.440
and you want that to
behave transactionally.

00:17:13.440 --> 00:17:15.810
I want to reduce the number
of available tickets,

00:17:15.810 --> 00:17:17.640
I want to create
my ticket, and that

00:17:17.640 --> 00:17:21.950
has to happen both of them or
neither at all, nothing at all.

00:17:21.950 --> 00:17:25.869
So in that case, what you do
is to create your transaction,

00:17:25.869 --> 00:17:28.890
make all your modifications,
and commit or rollback

00:17:28.890 --> 00:17:30.120
the transaction.

00:17:30.120 --> 00:17:32.530
MARTIN GORNER: But
in order to do that,

00:17:32.530 --> 00:17:36.470
I need to have my event and
my tickets in the same entity

00:17:36.470 --> 00:17:40.544
group or at least I needed to
until App Engine implemented

00:17:40.544 --> 00:17:41.585
cross group transactions.

00:17:41.585 --> 00:17:42.960
NACHO COLOMA:
Yeah, that's right.

00:17:42.960 --> 00:17:45.190
It's more flexible
and now you can

00:17:45.190 --> 00:17:48.610
make cross group transactions,
[INAUDIBLE] transactions

00:17:48.610 --> 00:17:52.950
that can put up to five
different entity groups

00:17:52.950 --> 00:17:54.410
in the same transactions.

00:17:54.410 --> 00:17:56.460
MARTIN GORNER: But you
say this is not actually

00:17:56.460 --> 00:17:59.830
a good way of organizing
things because we

00:17:59.830 --> 00:18:05.680
have a write limit of something
like one to five writes

00:18:05.680 --> 00:18:08.720
per second to the
same entity group.

00:18:08.720 --> 00:18:11.910
It means that only a
maximum of five people

00:18:11.910 --> 00:18:15.440
can be trying to buy the
same ticket at the same time.

00:18:15.440 --> 00:18:18.840
And so the quantities that you
are handling in real events

00:18:18.840 --> 00:18:20.270
are way larger than that.

00:18:20.270 --> 00:18:21.700
NACHO COLOMA:
Yeah, that's right.

00:18:21.700 --> 00:18:26.890
So another option, more
realistic to apply entity

00:18:26.890 --> 00:18:30.690
groups, because not all
master detail relationships

00:18:30.690 --> 00:18:32.850
are suitable for entity groups.

00:18:32.850 --> 00:18:36.290
But we had a similar
case for users.

00:18:36.290 --> 00:18:39.800
Now what we are doing
with this, the good thing

00:18:39.800 --> 00:18:42.010
is that the user
is not that fast

00:18:42.010 --> 00:18:43.710
interacting with the system.

00:18:43.710 --> 00:18:46.600
So if you want to make a
transaction between the user

00:18:46.600 --> 00:18:48.372
and his tickets,
for example, if you

00:18:48.372 --> 00:18:50.330
want to keep a counter
on the number of tickets

00:18:50.330 --> 00:18:53.160
that the user has
purchased over time,

00:18:53.160 --> 00:18:54.860
you can do that transactionally.

00:18:54.860 --> 00:18:57.230
And you have the guarantee
that the user is not

00:18:57.230 --> 00:18:58.870
going to be clicking that fast.

00:18:58.870 --> 00:19:02.279
So for that, [INAUDIBLE]
is reasonable.

00:19:02.279 --> 00:19:04.570
MARTIN GORNER: That is that
they're good rule of thumb,

00:19:04.570 --> 00:19:11.780
that it's a good idea to
organize the elements relating

00:19:11.780 --> 00:19:15.620
to your users into
entity groups,

00:19:15.620 --> 00:19:21.830
because one user is
not likely to be buying

00:19:21.830 --> 00:19:24.400
so many tickets
at the same time.

00:19:24.400 --> 00:19:28.150
But this still allows a
lot of different users

00:19:28.150 --> 00:19:32.756
to be hammering the system
at the same time in hundreds

00:19:32.756 --> 00:19:33.475
and thousands.

00:19:33.475 --> 00:19:34.600
NACHO COLOMA: That's right.

00:19:34.600 --> 00:19:38.040
You usually don't have
contention on the user level.

00:19:38.040 --> 00:19:39.430
You have it somewhere else.

00:19:39.430 --> 00:19:42.560
But a single user
is not that fast

00:19:42.560 --> 00:19:43.770
interacting with the system.

00:19:43.770 --> 00:19:47.505
MARTIN GORNER: And so here for
the relationship between a user

00:19:47.505 --> 00:19:52.010
and a ticket, you group
those into an entity group.

00:19:52.010 --> 00:19:55.030
So you can do your
transactions easily there.

00:19:55.030 --> 00:19:59.860
And if we come back to events
and tickets, as you said,

00:19:59.860 --> 00:20:02.990
you do not put them in
the same entity group,

00:20:02.990 --> 00:20:06.170
because that would limit
the number of tickets

00:20:06.170 --> 00:20:07.171
you can sell per second.

00:20:07.171 --> 00:20:09.128
NACHO COLOMA: It's going
to be more complicated

00:20:09.128 --> 00:20:10.825
than that, because
a contention is not

00:20:10.825 --> 00:20:12.380
an easy problem in any case.

00:20:12.380 --> 00:20:15.520
It's not something that you
can solve with transactions

00:20:15.520 --> 00:20:16.400
so easily.

00:20:16.400 --> 00:20:19.690
But these are more or less
the typical two cases.

00:20:19.690 --> 00:20:24.100
You can choose to make an entity
group around your transactions,

00:20:24.100 --> 00:20:28.350
or you can choose to keep your
entities separate, for example,

00:20:28.350 --> 00:20:30.750
if you don't have-- and
because as I told you,

00:20:30.750 --> 00:20:34.390
parent, all your entities
can have at most one parent.

00:20:34.390 --> 00:20:37.710
So maybe your transactions
don't feed into that model

00:20:37.710 --> 00:20:40.930
and then you have to use
cross group transactions.

00:20:40.930 --> 00:20:43.307
Those are your two
options with App Engine.

00:20:43.307 --> 00:20:44.640
MARTIN GORNER: Thank you, Nacho.

00:20:44.640 --> 00:20:48.700
Thank you for these tips and
tricks on using the data store.

00:20:48.700 --> 00:20:49.880
NACHO COLOMA: Thank you.

00:20:49.880 --> 00:20:51.800
MARTIN GORNER: And
we will see you

00:20:51.800 --> 00:20:54.590
in the next episode
of Root Access Berlin.

00:20:54.590 --> 00:20:56.370
Thank you.

