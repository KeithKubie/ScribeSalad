WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.500
[MUSIC PLAYING]

00:00:06.000 --> 00:00:09.180
XERXES DOTIWALLA: Hi, I'm
Xerxes a developer advocate here

00:00:09.180 --> 00:00:13.440
at Google, back again, in
our Adwords API series.

00:00:13.440 --> 00:00:15.450
In this episode
we'll examine how

00:00:15.450 --> 00:00:17.500
you can use the
API to make updates

00:00:17.500 --> 00:00:19.920
to your AdWords accounts.

00:00:19.920 --> 00:00:22.300
We'll look at a few
popular use cases,

00:00:22.300 --> 00:00:24.620
and see how they serve
as a basis for almost

00:00:24.620 --> 00:00:27.200
any kind of automation.

00:00:27.200 --> 00:00:29.830
One of the most common
use cases of the API

00:00:29.830 --> 00:00:33.710
is to pause and
resume ad groups.

00:00:33.710 --> 00:00:36.100
For example you
could pause an Ad

00:00:36.100 --> 00:00:37.630
when the inventory
for that item is

00:00:37.630 --> 00:00:42.650
depleted, resulting in better
use of your advertising budget.

00:00:42.650 --> 00:00:45.950
This highlights the power of
integrating your own systems

00:00:45.950 --> 00:00:48.190
with the AdWords API.

00:00:48.190 --> 00:00:52.510
So how would you actually
pause and resume an ad group?

00:00:52.510 --> 00:00:54.620
Remember from the last video?

00:00:54.620 --> 00:00:58.206
The code samples
are your friends.

00:00:58.206 --> 00:00:59.830
You should have them
downloaded by now.

00:00:59.830 --> 00:01:03.610
But if you don't, you
can grab them from here.

00:01:03.610 --> 00:01:07.010
Again we'll be using
Java and Eclipse,

00:01:07.010 --> 00:01:09.150
but the concepts are the
same for all the client

00:01:09.150 --> 00:01:11.520
library languages.

00:01:11.520 --> 00:01:13.560
Fire up Eclipse and
open updateadgroup.java.

00:01:16.320 --> 00:01:19.620
We see our typical
boilerplate in main.

00:01:19.620 --> 00:01:23.220
This time you'll notice that
main has a placeholder string

00:01:23.220 --> 00:01:26.290
for the ID of the ad group.

00:01:26.290 --> 00:01:28.260
Where would we get that ID ?

00:01:28.260 --> 00:01:30.540
Well you could get
a programmatically

00:01:30.540 --> 00:01:34.490
through the Get Method of the
ad group service interface.

00:01:34.490 --> 00:01:37.630
One unofficial trick
that I use for testing

00:01:37.630 --> 00:01:41.680
is to grab the ID from the URL
of the AdWords web interface

00:01:41.680 --> 00:01:44.020
when viewing an ad group.

00:01:44.020 --> 00:01:48.500
As usual the Run Example
method as the interesting code.

00:01:48.500 --> 00:01:52.550
First it gets a reference to
the ad group service interface,

00:01:52.550 --> 00:01:55.930
because it'll be making
an update to an ad group.

00:01:55.930 --> 00:01:57.800
To update other
entities you would use

00:01:57.800 --> 00:02:00.090
of their corresponding service.

00:02:00.090 --> 00:02:05.630
A full list of available
services can be found here.

00:02:05.630 --> 00:02:09.300
Then it creates a
new ad group object.

00:02:09.300 --> 00:02:13.040
It sets the ID of the new
object to the ID of the ad group

00:02:13.040 --> 00:02:14.920
that it wants to update.

00:02:14.920 --> 00:02:18.720
Then it sets the
status to paused.

00:02:18.720 --> 00:02:22.130
After that, it creates
an ad group operation

00:02:22.130 --> 00:02:25.660
using our newly created ad
group object as the operand

00:02:25.660 --> 00:02:29.210
and set as the operator.

00:02:29.210 --> 00:02:32.870
Lastly, it calls the mutate
method of the ad group service

00:02:32.870 --> 00:02:37.300
interface passing in the
ad group Operation Object.

00:02:37.300 --> 00:02:41.770
So go ahead and replace the
placeholder with an ad group ID

00:02:41.770 --> 00:02:45.930
from your test client account,
and try running the code.

00:02:45.930 --> 00:02:49.570
After it runs log into the test
account and the web interface

00:02:49.570 --> 00:02:53.040
and confirm the status
has been changed.

00:02:53.040 --> 00:02:56.440
This same pattern is used for
most updates through the API.

00:02:56.440 --> 00:02:58.540
So let's review it here.

00:02:58.540 --> 00:03:00.720
Create a new object.

00:03:00.720 --> 00:03:05.860
Set it's ID to be the ID of
the entity you want to modify.

00:03:05.860 --> 00:03:09.550
Set the new value of the
property on that new object.

00:03:09.550 --> 00:03:12.240
Create an Operation
Object with set

00:03:12.240 --> 00:03:16.730
as the operator and this new
entity object as the operand.

00:03:16.730 --> 00:03:19.480
And lastly, pass
the Operation Object

00:03:19.480 --> 00:03:24.240
into the mutate method of
the appropriate service.

00:03:24.240 --> 00:03:27.570
This is an update, so
we use the set operator.

00:03:27.570 --> 00:03:31.440
Adds or removals would use
the Add or Remove operators.

00:03:31.440 --> 00:03:33.510
If this seems
confusing, take a look

00:03:33.510 --> 00:03:36.460
at other pieces of sample
code in this project.

00:03:36.460 --> 00:03:38.650
You'll quickly see the pattern.

00:03:38.650 --> 00:03:41.850
So now we know this
pattern, we can easily

00:03:41.850 --> 00:03:43.520
make other updates as well.

00:03:43.520 --> 00:03:46.760
Though many require more complex
objects than the ad group

00:03:46.760 --> 00:03:49.580
status enum we used here.

00:03:49.580 --> 00:03:52.130
For example another
popular use case

00:03:52.130 --> 00:03:56.980
is to modify the bid for an
ad group programmatically.

00:03:56.980 --> 00:03:59.370
The canonical example
is raising the bid

00:03:59.370 --> 00:04:03.090
for an umbrella add
when it's raining.

00:04:03.090 --> 00:04:06.340
Your app could consume
a weather web service

00:04:06.340 --> 00:04:08.880
and then use the
average API to increase

00:04:08.880 --> 00:04:11.610
the bid for this ad group.

00:04:11.610 --> 00:04:15.110
You could modify this same
update ad group sample code

00:04:15.110 --> 00:04:17.750
to make that kind of update.

00:04:17.750 --> 00:04:19.950
Instead of setting
the ad group status,

00:04:19.950 --> 00:04:22.840
you would set the
bidding strategy.

00:04:22.840 --> 00:04:25.930
Click this link for details
on how to configure a bidding

00:04:25.930 --> 00:04:27.160
strategy.

00:04:27.160 --> 00:04:30.480
Another use case is
creating new campaigns.

00:04:30.480 --> 00:04:34.570
In Eclipse take a look
at adcampaigns.java.

00:04:34.570 --> 00:04:36.700
It's quite a bit of
code, but it follows

00:04:36.700 --> 00:04:39.190
the pattern we just discussed.

00:04:39.190 --> 00:04:43.030
In this case, once the
object hierarchy is created,

00:04:43.030 --> 00:04:46.260
we use the add operator to add
a new budget via the budget

00:04:46.260 --> 00:04:51.200
service and new campaigns
via the campaign service.

00:04:51.200 --> 00:04:52.990
We don't need to
set the ID's here

00:04:52.990 --> 00:04:56.840
because these are new entities
and don't have ID's yet.

00:04:56.840 --> 00:05:02.220
So those are just a few examples
of updates using the API.

00:05:02.220 --> 00:05:05.110
I said it before, and
I'll say it again,

00:05:05.110 --> 00:05:07.860
I highly recommend you go
through the code samples

00:05:07.860 --> 00:05:12.730
as they really are the
best way to learn this API.

00:05:12.730 --> 00:05:16.490
We have accomplished a lot
in these last five videos.

00:05:16.490 --> 00:05:20.080
You made your first API
call, retrieved reports,

00:05:20.080 --> 00:05:23.800
and got a taste of automation.

00:05:23.800 --> 00:05:27.490
Of course, there's additional
API functionality to learn.

00:05:27.490 --> 00:05:31.260
These guides will definitely
help you along the way.

00:05:31.260 --> 00:05:34.700
Now you're ready to start
building your own real AdWords

00:05:34.700 --> 00:05:37.140
API application.

00:05:37.140 --> 00:05:38.940
And once it's up
and running, you'll

00:05:38.940 --> 00:05:40.600
see increased
operating efficiency

00:05:40.600 --> 00:05:43.470
through automation
and greater visibility

00:05:43.470 --> 00:05:46.190
through custom report.

00:05:46.190 --> 00:05:49.620
Thanks so much for being with
us through these initial steps.

00:05:49.620 --> 00:05:52.240
And keep an eye out
for more AdWords API

00:05:52.240 --> 00:05:55.122
videos on the Google
Developers channel.

00:05:55.122 --> 00:05:59.250
[MUSIC PLAYING]

