WEBVTT
Kind: captions
Language: en

00:00:04.784 --> 00:00:07.200
STACY DEVINO: going to tell
you a little bit about myself.

00:00:07.200 --> 00:00:10.820
I'm Senior Android
Innovator at Home Depot.

00:00:10.820 --> 00:00:12.690
I work on a lot of
different stuff.

00:00:12.690 --> 00:00:15.880
I'm the Techmaker
Lead for Dallas,

00:00:15.880 --> 00:00:17.940
SixSigma BlackBelt,
Intel Innovator,

00:00:17.940 --> 00:00:21.195
a bunch of other stuff that
you don't really care about,

00:00:21.195 --> 00:00:22.860
because you're here to learn.

00:00:22.860 --> 00:00:24.610
You don't care who I am.

00:00:24.610 --> 00:00:25.220
Come on.

00:00:25.220 --> 00:00:26.720
But there's some
contact information

00:00:26.720 --> 00:00:28.490
and things like that
in case you want

00:00:28.490 --> 00:00:33.270
to ask me further questions or
throw me extra tips and tricks.

00:00:33.270 --> 00:00:36.760
I'm always up for hearing what
kind of creative solutions

00:00:36.760 --> 00:00:39.690
worked for you.

00:00:39.690 --> 00:00:41.970
So here are some of
the biggest issues

00:00:41.970 --> 00:00:47.750
that we face with mobile
networks on applications.

00:00:47.750 --> 00:00:50.620
Large, unfiltered
images-- your API

00:00:50.620 --> 00:00:53.860
is servicing you stuff
that's meant for desktops.

00:00:53.860 --> 00:00:56.220
It's not meant for tiny screens.

00:00:56.220 --> 00:00:58.190
But you have tiny
networks, so you

00:00:58.190 --> 00:01:02.230
need a way to make
those things tiny.

00:01:02.230 --> 00:01:05.910
So we also have issues
with on track data usage.

00:01:05.910 --> 00:01:08.640
Do we really need to
be constantly hitting

00:01:08.640 --> 00:01:13.960
our usability API when
the user is not actually

00:01:13.960 --> 00:01:15.670
using the application?

00:01:15.670 --> 00:01:18.660
Do we need to constantly be
tracking what they're doing

00:01:18.660 --> 00:01:21.060
while it's not even active?

00:01:21.060 --> 00:01:23.417
Probably not.

00:01:23.417 --> 00:01:25.250
You can have non-optimized
network handling.

00:01:25.250 --> 00:01:29.350
So are you putting your batches
of bundled data together,

00:01:29.350 --> 00:01:31.290
or are you just
constantly hitting it

00:01:31.290 --> 00:01:34.300
whenever you want to?

00:01:34.300 --> 00:01:38.680
And just bad API designs,
not using the Android tools.

00:01:38.680 --> 00:01:43.490
And one that's pretty awful
that I see fairly often,

00:01:43.490 --> 00:01:44.880
doubled API calls.

00:01:44.880 --> 00:01:47.120
Why do you need to try it twice?

00:01:47.120 --> 00:01:48.880
And it's one of
those things that

00:01:48.880 --> 00:01:51.560
can be hard to figure out if
it's happening or if it's not.

00:01:51.560 --> 00:01:54.100
So I'm going to show you how.

00:01:54.100 --> 00:01:56.340
So how do you track
your application data?

00:01:56.340 --> 00:01:58.640
You can use the
Android tools, which

00:01:58.640 --> 00:02:00.550
Google has been really
great about giving you

00:02:00.550 --> 00:02:02.800
instructions on how to do that.

00:02:02.800 --> 00:02:07.080
But there's more
stuff out there.

00:02:07.080 --> 00:02:09.090
If you're watching for
your APIs and responses,

00:02:09.090 --> 00:02:10.699
I'd strongly
suggest that you use

00:02:10.699 --> 00:02:12.620
something called Charles Proxy.

00:02:12.620 --> 00:02:15.950
It's not free, but it's
worth it, especially

00:02:15.950 --> 00:02:19.000
if you need to check are you
sending the correct API data

00:02:19.000 --> 00:02:21.010
and are you getting
the right return data.

00:02:21.010 --> 00:02:23.170
Is your stuff formatted
like it's supposed to be,

00:02:23.170 --> 00:02:25.874
or is it kind of jumbled?

00:02:25.874 --> 00:02:28.040
Now, I'm not going to cover
that in this discussion.

00:02:28.040 --> 00:02:30.450
I'm just giving it a props
so that you guys can actually

00:02:30.450 --> 00:02:30.950
go and look.

00:02:30.950 --> 00:02:32.470
There's a ton of
great information

00:02:32.470 --> 00:02:34.644
already out there
for Charles Proxy.

00:02:34.644 --> 00:02:36.560
So we're going to be
talking a little bit more

00:02:36.560 --> 00:02:38.790
about detailed tracking
of network data.

00:02:38.790 --> 00:02:41.920
Now, we've all probably
heard about Wireshark,

00:02:41.920 --> 00:02:44.120
but you probably haven't
heard of something

00:02:44.120 --> 00:02:48.580
called the Application Resource
Optimizer, which is commonly

00:02:48.580 --> 00:02:52.850
known as ARO by AT&amp;T. And it's
the easiest thing for you guys

00:02:52.850 --> 00:02:57.750
to use who are not used to
tracking stuff down by looking

00:02:57.750 --> 00:03:01.020
at, oh, this packet had XYZ.

00:03:01.020 --> 00:03:03.710
Let's go into that a little bit.

00:03:03.710 --> 00:03:06.790
So we're just going to say
this is how you capture PCAP,

00:03:06.790 --> 00:03:08.260
which is the file
that's actually

00:03:08.260 --> 00:03:12.980
used to insert into the tool.

00:03:12.980 --> 00:03:17.770
And this is where say having a
rooted phone for development,

00:03:17.770 --> 00:03:21.800
at least one of them around,
is always super helpful,

00:03:21.800 --> 00:03:24.150
because it's a lot more
of a pain in the butt

00:03:24.150 --> 00:03:27.430
to get the same information
from a non-rooted device.

00:03:27.430 --> 00:03:28.960
But you can see,
it's pretty easy.

00:03:28.960 --> 00:03:30.370
What you do is
you basically stop

00:03:30.370 --> 00:03:33.100
all your other
applications from running

00:03:33.100 --> 00:03:35.450
that are not part
of the core services

00:03:35.450 --> 00:03:36.960
and just run your application.

00:03:36.960 --> 00:03:40.660
And while you do that, you make
sure that you have this file

00:03:40.660 --> 00:03:44.370
being generated by TCP dump.

00:03:44.370 --> 00:03:47.650
And then from there, you
just copy it off the device

00:03:47.650 --> 00:03:51.070
after you've done
what you need to do.

00:03:51.070 --> 00:03:54.649
And we also-- you've got to
specify which kind of interface

00:03:54.649 --> 00:03:55.190
you're using.

00:03:55.190 --> 00:03:58.390
So are you using Wi-Fi or are
you using cellular networks?

00:03:58.390 --> 00:04:01.910
So you'll actually see
that if you do an IPADDR.

00:04:01.910 --> 00:04:05.270
That way, you can see what
network interface is actually

00:04:05.270 --> 00:04:09.060
active and what are
you actually using.

00:04:09.060 --> 00:04:12.336
So download and install-- think
you guys can figure this out,

00:04:12.336 --> 00:04:14.210
but this is more just
for reference material.

00:04:14.210 --> 00:04:16.050
Again, these slides
will be available

00:04:16.050 --> 00:04:19.029
after this discussion.

00:04:19.029 --> 00:04:22.250
So what do you get
once you put your file

00:04:22.250 --> 00:04:24.410
into this magical tool?

00:04:24.410 --> 00:04:27.420
Well, the first page gives
you this lovely summary

00:04:27.420 --> 00:04:32.010
of exactly what is
good and what is bad.

00:04:32.010 --> 00:04:34.690
And what we can
see here is, hey,

00:04:34.690 --> 00:04:37.310
I've got green checkmarks
across the board.

00:04:37.310 --> 00:04:39.950
Everything looks pretty good.

00:04:39.950 --> 00:04:41.120
There's no major flaws.

00:04:41.120 --> 00:04:44.220
There's no major
issues popping up.

00:04:44.220 --> 00:04:46.210
This is kind of a
dream situation.

00:04:46.210 --> 00:04:49.020
Now, granted, we could
do a little bit better

00:04:49.020 --> 00:04:53.150
on that trace score, because
663 out of 1,000 isn't amazing.

00:04:53.150 --> 00:04:56.270
But it's giving us-- hey,
we have no major flaws,

00:04:56.270 --> 00:04:57.890
no major issues.

00:04:57.890 --> 00:05:01.670
And if you are just
making sure, quick glance,

00:05:01.670 --> 00:05:04.020
you maybe added a
new feature, you

00:05:04.020 --> 00:05:07.840
can pop it into here, go,
oh, everything looks cool.

00:05:07.840 --> 00:05:08.450
All right.

00:05:08.450 --> 00:05:11.070
That's my smoke test.

00:05:11.070 --> 00:05:18.870
So let's just say there's
a blue competitor that

00:05:18.870 --> 00:05:21.620
wanted to track
our stuff against

00:05:21.620 --> 00:05:25.560
to make sure that we were ahead
of them in the retail industry.

00:05:25.560 --> 00:05:30.210
I think it's kind of
implied who that might be.

00:05:30.210 --> 00:05:33.980
But just as you can
track your own data,

00:05:33.980 --> 00:05:37.160
you can track your
competitor's, too,

00:05:37.160 --> 00:05:40.700
and you can track exactly
how good they're performing

00:05:40.700 --> 00:05:44.880
and where you're actually
going to be able to even learn

00:05:44.880 --> 00:05:47.850
from their mistakes and be
able to figure out what they're

00:05:47.850 --> 00:05:51.540
doing right if they're beating
you out in certain areas.

00:05:51.540 --> 00:05:55.650
So what's something that we
see going wrong right here?

00:05:55.650 --> 00:05:59.400
Now, I understand the
actual text is pretty small,

00:05:59.400 --> 00:06:03.420
but we can see that, oh,
there's not good cache control.

00:06:03.420 --> 00:06:07.510
That means there's not cache
headers on some of those assets

00:06:07.510 --> 00:06:09.000
that are being pulled in.

00:06:09.000 --> 00:06:11.530
We also see that, hey,
maybe these images

00:06:11.530 --> 00:06:14.910
are pretty big that really
shouldn't be happening.

00:06:14.910 --> 00:06:20.900
Now, for both as a comparison, I
performed the exact same search

00:06:20.900 --> 00:06:23.240
on their app as it
was performed on mine,

00:06:23.240 --> 00:06:26.830
and then also tapped on
an item after the search,

00:06:26.830 --> 00:06:29.780
fully loaded the page, and
made sure that before doing so,

00:06:29.780 --> 00:06:32.750
we loaded about
100 search results.

00:06:32.750 --> 00:06:38.330
So this is the exact same data
in terms of user interaction

00:06:38.330 --> 00:06:40.170
on both sides.

00:06:40.170 --> 00:06:43.050
So we also see
that-- oh my gosh,

00:06:43.050 --> 00:06:45.790
they're not minifying
any of their JSON, CSS,

00:06:45.790 --> 00:06:47.100
stuff like that?

00:06:47.100 --> 00:06:50.740
Not just any, but there might
be an issue with one or two

00:06:50.740 --> 00:06:51.240
things.

00:06:54.640 --> 00:07:00.000
So this is what it looks like if
you scroll down on that summary

00:07:00.000 --> 00:07:02.310
and you have an issue.

00:07:02.310 --> 00:07:07.650
It'll be a nice, big, red box
that tells you what is wrong

00:07:07.650 --> 00:07:11.020
and maybe even how to fix it.

00:07:11.020 --> 00:07:12.830
So here we're
saying, oh, we just

00:07:12.830 --> 00:07:14.590
tested-- it doesn't
look like you have

00:07:14.590 --> 00:07:16.540
the presence of cache headers.

00:07:16.540 --> 00:07:19.470
Now, that could be an issue
down the road, because what

00:07:19.470 --> 00:07:21.930
if somebody who needs to
go back to that resource

00:07:21.930 --> 00:07:25.050
or you have another thing
that uses that same resource?

00:07:25.050 --> 00:07:28.810
That has to be redownloaded, and
that can be a pretty big thing.

00:07:28.810 --> 00:07:31.460
So why would you do
that to your user

00:07:31.460 --> 00:07:33.040
when you're within
the same session?

00:07:33.040 --> 00:07:36.430
I can understand getting rid of
it after the session is over,

00:07:36.430 --> 00:07:39.630
but you're still there,
so why not hold onto it?

00:07:42.310 --> 00:07:44.910
So here's the other
issues that we saw.

00:07:44.910 --> 00:07:48.820
And this is where it gives
you that information,

00:07:48.820 --> 00:07:53.020
and you can see I've blurred
out any of the people that

00:07:53.020 --> 00:07:54.190
might be involved.

00:07:54.190 --> 00:07:58.310
So you can see that the
images are a little too big.

00:07:58.310 --> 00:08:01.610
These were the images
that it pulled up.

00:08:01.610 --> 00:08:06.240
These actually looked to
be desktop quality when

00:08:06.240 --> 00:08:08.330
I actually went to
those links and looked

00:08:08.330 --> 00:08:10.470
at them, which can be
really nice if you have

00:08:10.470 --> 00:08:12.450
a very high quality device.

00:08:12.450 --> 00:08:16.700
But I was testing on a
couple of different devices,

00:08:16.700 --> 00:08:19.600
and some of them were
not high quality devices,

00:08:19.600 --> 00:08:23.470
so it ended up taking up a
lot more space with actually

00:08:23.470 --> 00:08:28.000
no positive outcome from it.

00:08:28.000 --> 00:08:31.100
And again, the minify
of all of that, you

00:08:31.100 --> 00:08:36.260
could have saved 7% just by
getting rid of empty spaces.

00:08:36.260 --> 00:08:40.890
7% of that whole string
could have been saved.

00:08:40.890 --> 00:08:44.260
So another cool thing
you can do with this tool

00:08:44.260 --> 00:08:46.960
is you can actually
dictate your own profile.

00:08:46.960 --> 00:08:49.356
So if you wanted to track
something that was maybe

00:08:49.356 --> 00:08:50.730
a really small
network-- you have

00:08:50.730 --> 00:08:52.688
a certain set of parameters
that you're exactly

00:08:52.688 --> 00:08:55.220
trying to meet in a
certain set of conditions--

00:08:55.220 --> 00:08:58.700
you can actually tell it exactly
what you want to have happen.

00:08:58.700 --> 00:09:05.180
Is your target, OK, I only want
to use 95 millijoules of energy

00:09:05.180 --> 00:09:07.100
to perform this transaction.

00:09:07.100 --> 00:09:08.822
Am I good or am I not?

00:09:08.822 --> 00:09:11.280
So this can actually give some
of that information inferred

00:09:11.280 --> 00:09:14.750
based off of knowing how much
power is used by the radio,

00:09:14.750 --> 00:09:17.740
and you can actually set that so
it makes it really easy for you

00:09:17.740 --> 00:09:18.950
to test this in the future.

00:09:21.690 --> 00:09:25.230
So here's an overview of
what our data looked like.

00:09:25.230 --> 00:09:28.290
So it's showing
a lot of unknown.

00:09:28.290 --> 00:09:30.040
Now, normally it
would show a lot

00:09:30.040 --> 00:09:33.810
of images JPEG or images PNG.

00:09:33.810 --> 00:09:36.800
But we're doing some things
to obfuscate some of that

00:09:36.800 --> 00:09:39.030
and do some actual data
batching to make that

00:09:39.030 --> 00:09:41.010
a little more
efficient, so it's not

00:09:41.010 --> 00:09:43.370
going to be immediately
recognizable that, hey, that's

00:09:43.370 --> 00:09:44.840
a JPEG file.

00:09:44.840 --> 00:09:47.180
But you can see doing a
lot of search results,

00:09:47.180 --> 00:09:49.710
we got a lot of JSON requests.

00:09:49.710 --> 00:09:53.920
And we can see, hey,
it moved pretty fast.

00:09:53.920 --> 00:09:57.900
We weren't using a
crazy amount of data,

00:09:57.900 --> 00:10:01.820
and it generally
looked pretty good.

00:10:01.820 --> 00:10:04.080
Now, if you're familiar
with Network Monitor,

00:10:04.080 --> 00:10:08.430
the diagnostics are going
to look very, very similar.

00:10:08.430 --> 00:10:10.840
So we're looking at this from
a forensic point of view,

00:10:10.840 --> 00:10:14.540
and you can see exactly
what happened when I was

00:10:14.540 --> 00:10:16.230
going through various points.

00:10:16.230 --> 00:10:19.730
So when I first load
it, that's the gray.

00:10:19.730 --> 00:10:23.350
Then we have the first
burst of the big red, which

00:10:23.350 --> 00:10:25.380
is me performing the search.

00:10:25.380 --> 00:10:28.680
Then there's some little dots
for loading extra search result

00:10:28.680 --> 00:10:32.160
data when going down
and scrolling more

00:10:32.160 --> 00:10:34.290
and fetching and
getting that stuff in.

00:10:34.290 --> 00:10:36.270
And then you can
actually see, oh,

00:10:36.270 --> 00:10:40.170
when do I actually tap
on-- tap on an item,

00:10:40.170 --> 00:10:41.937
and then I tap on an
image of the item.

00:10:41.937 --> 00:10:43.520
So I got to the image
page, and then I

00:10:43.520 --> 00:10:45.880
tapped on the big images.

00:10:45.880 --> 00:10:48.340
So you can see
exactly what that was

00:10:48.340 --> 00:10:51.430
and what was the amount of
time that I was actually

00:10:51.430 --> 00:10:53.420
using what they call RRC.

00:10:53.420 --> 00:10:56.640
Basically, it's how much
radio time were you using.

00:10:56.640 --> 00:10:58.990
Was it a lot?

00:10:58.990 --> 00:11:02.725
Was it the whole thing
of the bandwidth at once?

00:11:02.725 --> 00:11:03.600
And it really wasn't.

00:11:03.600 --> 00:11:05.894
You can see it was kind of
yellow and kind of green.

00:11:05.894 --> 00:11:08.310
And when you're dealing with
an immediate user interaction

00:11:08.310 --> 00:11:10.910
where you are the
forefront application,

00:11:10.910 --> 00:11:13.430
that's actually pretty awesome,
because quite a few of them

00:11:13.430 --> 00:11:19.200
will run very, very red to
do the same kind of thing.

00:11:19.200 --> 00:11:22.110
And you can also
see at the bottom

00:11:22.110 --> 00:11:24.300
that you actually
get what ports, what

00:11:24.300 --> 00:11:28.960
were your endpoints, what
traffic was going where,

00:11:28.960 --> 00:11:30.100
and how much of it.

00:11:30.100 --> 00:11:33.090
So we have a Statistics
page as well.

00:11:33.090 --> 00:11:37.360
So we actually get to see how
big were the packets that I was

00:11:37.360 --> 00:11:41.000
sending, how long did it
go, how fast was I running,

00:11:41.000 --> 00:11:43.070
and what's my score.

00:11:43.070 --> 00:11:47.000
What did I do really well at,
and what can I improve at?

00:11:47.000 --> 00:11:51.220
So in this case, I really
could improve a lot

00:11:51.220 --> 00:11:53.340
on my tightly
grouped connections.

00:11:53.340 --> 00:11:56.860
So holding one connection
and then not maybe

00:11:56.860 --> 00:11:59.730
having a whole bunch of
different server requests

00:11:59.730 --> 00:12:01.450
of a bunch of
different endpoints

00:12:01.450 --> 00:12:04.260
would probably increase
some of my efficiency.

00:12:04.260 --> 00:12:07.410
I know it's hard with external
libraries and things like that

00:12:07.410 --> 00:12:13.260
to make that work, but it
does give you some niceties

00:12:13.260 --> 00:12:14.540
down the road.

00:12:14.540 --> 00:12:17.310
Now, also signaling overhead.

00:12:17.310 --> 00:12:18.840
That means I had
a lot of headers.

00:12:18.840 --> 00:12:22.230
I had a lot of other
stuff and things

00:12:22.230 --> 00:12:27.010
like JSON, certain API requests
that I could improve on.

00:12:30.280 --> 00:12:34.720
So now we get down to
something that I am super

00:12:34.720 --> 00:12:37.990
passionate about.

00:12:37.990 --> 00:12:40.370
Compression is your friend.

00:12:40.370 --> 00:12:42.050
It is always your friend.

00:12:42.050 --> 00:12:47.650
It is never not your friend
unless you're doing encryption,

00:12:47.650 --> 00:12:51.470
too, but that's a
whole different thing.

00:12:51.470 --> 00:12:53.400
Filter your images, people.

00:12:53.400 --> 00:12:54.930
Filter them.

00:12:54.930 --> 00:13:01.010
I am so sick of seeing
40-megabyte PNG big photo

00:13:01.010 --> 00:13:06.490
downloads that have no reason
to exist on a mobile phone

00:13:06.490 --> 00:13:09.990
even if you're doing mobile
editing of the actual pictures.

00:13:09.990 --> 00:13:11.250
There's no reason for it.

00:13:11.250 --> 00:13:14.580
So why not use
something that's going

00:13:14.580 --> 00:13:19.750
to be giving you the exact same
experience for the customer,

00:13:19.750 --> 00:13:22.760
but it's so much more efficient?

00:13:22.760 --> 00:13:27.110
In real life, you can actually
take a 42-megabyte PNG image

00:13:27.110 --> 00:13:31.240
and bring it down to
about 185 kilobytes.

00:13:31.240 --> 00:13:34.420
And that's at something
that is quad HD.

00:13:34.420 --> 00:13:36.120
That's a quad HD image.

00:13:36.120 --> 00:13:39.090
So that's the nicest devices
you can pretty much buy now,

00:13:39.090 --> 00:13:41.830
not counting the 4K ones,
because that's ridiculous.

00:13:41.830 --> 00:13:43.180
Nobody can see it.

00:13:43.180 --> 00:13:44.660
It's using a lot of battery.

00:13:44.660 --> 00:13:45.830
It doesn't make any sense.

00:13:45.830 --> 00:13:48.640
Im going, well, apparently,
seven-inch phones

00:13:48.640 --> 00:13:49.990
are a thing now.

00:13:49.990 --> 00:13:53.360
But in this case,
you can actually

00:13:53.360 --> 00:13:57.060
get what is considered
85% quality.

00:13:57.060 --> 00:14:01.720
That means you have a
15% compression applied

00:14:01.720 --> 00:14:05.750
that basically gives you almost
all of the exact same quality

00:14:05.750 --> 00:14:09.720
as what you had
for the PNG file.

00:14:09.720 --> 00:14:11.600
Now, there are some
downsides to that.

00:14:11.600 --> 00:14:16.360
So JPEG doesn't
support transparency.

00:14:16.360 --> 00:14:18.100
So when we're
looking at something

00:14:18.100 --> 00:14:21.720
that does support transparency,
what are we also looking at?

00:14:21.720 --> 00:14:25.160
Now you're down to P&amp;G or WebP.

00:14:25.160 --> 00:14:27.110
WebP is awesome.

00:14:27.110 --> 00:14:30.260
I just wish WebP was
supported on more stuff.

00:14:30.260 --> 00:14:33.030
Because most of us who
live in the real world

00:14:33.030 --> 00:14:36.400
have a situation where
those mobile assets have

00:14:36.400 --> 00:14:39.230
to work not only for
you, Android team,

00:14:39.230 --> 00:14:42.130
but maybe also for
your mobile web team

00:14:42.130 --> 00:14:43.990
and for your iPhone
team, and you

00:14:43.990 --> 00:14:47.290
have to be able to design
effectively, especially

00:14:47.290 --> 00:14:49.900
if you have limited
resources, to make sure

00:14:49.900 --> 00:14:51.340
that that's an actual thing.

00:14:51.340 --> 00:14:55.890
I know we all are
going, oh, praise WebP.

00:14:55.890 --> 00:15:01.090
And I understand it's great, but
the real world sucks sometimes,

00:15:01.090 --> 00:15:03.650
and this is one of
those scenarios.

00:15:03.650 --> 00:15:09.290
So it combines the best features
of JPEG and PNG into WebP.

00:15:09.290 --> 00:15:13.810
So you get the compression and
you also get the transparency.

00:15:13.810 --> 00:15:16.540
But if you have stuff
that needs to go

00:15:16.540 --> 00:15:18.470
to somebody else, good luck.

00:15:21.790 --> 00:15:23.850
But let's also look at this.

00:15:23.850 --> 00:15:27.100
So there's different
types of color space

00:15:27.100 --> 00:15:29.040
that you have to work with.

00:15:29.040 --> 00:15:31.520
So when we look at
regular images that

00:15:31.520 --> 00:15:33.590
are stored into
memory on Android,

00:15:33.590 --> 00:15:37.270
they're going to be ARGB 8888.

00:15:37.270 --> 00:15:39.590
That's just the
way that they load.

00:15:39.590 --> 00:15:41.860
It always takes up the
same amount of space.

00:15:41.860 --> 00:15:44.500
You save nothing
on memory loading

00:15:44.500 --> 00:15:47.000
by using these smaller
compressed images.

00:15:47.000 --> 00:15:49.460
They will always take up pretty
much the same exact amount

00:15:49.460 --> 00:15:50.330
of memory.

00:15:50.330 --> 00:15:52.630
Doesn't matter which
of these you pick.

00:15:52.630 --> 00:15:54.860
This is just helping
you on transport.

00:15:54.860 --> 00:15:57.770
You need to use
the bitmap options

00:15:57.770 --> 00:16:00.240
when you do loading of
an image to make sure

00:16:00.240 --> 00:16:03.210
that you're using only a
certain amount of memory.

00:16:03.210 --> 00:16:04.980
But I'm sure most
of you guys know

00:16:04.980 --> 00:16:08.490
that, because the out
of memory error sucks,

00:16:08.490 --> 00:16:11.600
and it really sucks to see
it on your log reports.

00:16:11.600 --> 00:16:14.010
And images are one of
the biggest things that

00:16:14.010 --> 00:16:15.900
will cause those
things to happen,

00:16:15.900 --> 00:16:18.980
especially full-page images.

00:16:18.980 --> 00:16:22.467
And somebody who's
got a $50 phone,

00:16:22.467 --> 00:16:24.050
they don't really
think about the fact

00:16:24.050 --> 00:16:26.290
that, well, maybe it
might have some issues,

00:16:26.290 --> 00:16:29.570
because it was a $50 phone.

00:16:29.570 --> 00:16:31.220
So let's think about this.

00:16:31.220 --> 00:16:34.410
If you need transparency,
you basically

00:16:34.410 --> 00:16:40.348
need to look at ARGB,
either 4444 or 8888.

00:16:40.348 --> 00:16:43.750
8888 is full everything.

00:16:43.750 --> 00:16:48.910
But what would ARGB
4444 be good at?

00:16:48.910 --> 00:16:53.200
It's really awesome at
simplified iconography.

00:16:53.200 --> 00:16:56.420
Something like a lot
of the material design

00:16:56.420 --> 00:16:59.410
pictures, photographs,
things like that do amazing

00:16:59.410 --> 00:17:03.868
and look exactly the same
if you look at the ARGB

00:17:03.868 --> 00:17:06.650
8888 versus the 4444.

00:17:06.650 --> 00:17:10.420
And you've just saved a
ton of bits by doing so.

00:17:10.420 --> 00:17:13.140
You've essentially cut
your package in half.

00:17:13.140 --> 00:17:14.710
It's awesome.

00:17:14.710 --> 00:17:18.829
But OK-- well, I don't
need transparency,

00:17:18.829 --> 00:17:20.460
but I would really
appreciate having

00:17:20.460 --> 00:17:22.920
all that nice little
compression thing going on

00:17:22.920 --> 00:17:24.910
without losing anything.

00:17:24.910 --> 00:17:27.940
So we're not reducing
the color space.

00:17:27.940 --> 00:17:33.570
We just take away transparency,
and that gives you the RGB 565.

00:17:33.570 --> 00:17:34.720
So you get full color.

00:17:34.720 --> 00:17:37.510
You get all the nice
gradients that you

00:17:37.510 --> 00:17:42.520
don't get in ARGB 4444, but it
gives you all the same things

00:17:42.520 --> 00:17:44.860
that you would expect
in a JPEG image--

00:17:44.860 --> 00:17:49.460
just you haven't even gone
to the lossy compression

00:17:49.460 --> 00:17:51.120
at this point.

00:17:51.120 --> 00:17:56.150
So if I asked you what to
use on a certain thing,

00:17:56.150 --> 00:18:00.470
you now have a table that you
can take to your UI/UX guys

00:18:00.470 --> 00:18:02.150
and say, hey, look at this.

00:18:02.150 --> 00:18:02.980
Which one is it?

00:18:06.030 --> 00:18:09.810
So here's the too long, didn't
read for image filtering.

00:18:09.810 --> 00:18:13.130
Basically, JPEG whenever
possible or WebP

00:18:13.130 --> 00:18:17.410
if you're so lucky that
you get your own APIs.

00:18:17.410 --> 00:18:21.380
If you have
iconography, 4444 it.

00:18:21.380 --> 00:18:23.180
Compress all your images.

00:18:23.180 --> 00:18:27.940
I need to say this once, twice,
three times-- compress them.

00:18:27.940 --> 00:18:32.640
Everybody as a group--
compress your images.

00:18:32.640 --> 00:18:33.770
Oh, that was really lame.

00:18:33.770 --> 00:18:34.270
Come on.

00:18:34.270 --> 00:18:37.140
Everybody, I want you to
believe this mantra-- compress

00:18:37.140 --> 00:18:39.650
your images.

00:18:39.650 --> 00:18:40.150
All right.

00:18:40.150 --> 00:18:43.820
And don't be afraid
to use lossy formats.

00:18:43.820 --> 00:18:46.040
I know it can be a
little bit daunting.

00:18:46.040 --> 00:18:49.960
And if you have a UI
guy who's just going,

00:18:49.960 --> 00:18:54.570
oh, this pixel looks ever so
slightly a little messed up

00:18:54.570 --> 00:18:56.660
or whatever--
well, he's probably

00:18:56.660 --> 00:19:00.210
the only guy who's holding
a phone right up to his eye.

00:19:00.210 --> 00:19:03.000
So it's OK.

00:19:03.000 --> 00:19:06.160
You can get virtually
the same effect

00:19:06.160 --> 00:19:08.620
by just cutting out
some of the extra

00:19:08.620 --> 00:19:10.640
that you just don't need
for rendering purposes.

00:19:10.640 --> 00:19:13.980
If you're doing a photo
editing app, different problem.

00:19:13.980 --> 00:19:16.070
This is not the session for you.

00:19:16.070 --> 00:19:18.500
Google Photos people do
really good work on that.

00:19:18.500 --> 00:19:21.320
I don't know how they
get that to load so nice,

00:19:21.320 --> 00:19:24.600
but I'm sure they have a
lot of people doing it.

00:19:24.600 --> 00:19:27.780
And compression on
the network is not

00:19:27.780 --> 00:19:29.640
compression in your heap.

00:19:29.640 --> 00:19:34.720
So it's going to load the
same size no matter what.

00:19:34.720 --> 00:19:36.670
And you know what else?

00:19:36.670 --> 00:19:38.510
You should probably
design your APIs

00:19:38.510 --> 00:19:40.010
to handle multiple screen sizes.

00:19:42.680 --> 00:19:48.180
So now we need to go to how
do I make that so I can track

00:19:48.180 --> 00:19:51.720
for all those different
screen sizes and networks

00:19:51.720 --> 00:19:54.450
at the same time.

00:19:54.450 --> 00:19:58.100
So you need to adjust it based
off of your network type.

00:19:58.100 --> 00:19:59.820
This is code.

00:19:59.820 --> 00:20:00.430
Use it.

00:20:00.430 --> 00:20:02.170
It's a broadcast receiver.

00:20:02.170 --> 00:20:05.570
It tells you when stuff
changes different networks,

00:20:05.570 --> 00:20:10.322
and it gives you a little speed
value-- either 0, 1, 2, or 3.

00:20:10.322 --> 00:20:12.080
3 is fast.

00:20:12.080 --> 00:20:13.720
1 is not very fast.

00:20:13.720 --> 00:20:15.340
0 is nothing.

00:20:15.340 --> 00:20:20.000
And it gives you the ability
to make just a simple call--

00:20:20.000 --> 00:20:22.430
hey, what's my network
currently look like?

00:20:26.100 --> 00:20:31.060
So if you're looking at this--
it sounds really cool, right?

00:20:31.060 --> 00:20:33.560
But how do you actually
take this and make

00:20:33.560 --> 00:20:36.910
it look like real things?

00:20:36.910 --> 00:20:41.470
So if you look at that
giant image on the left,

00:20:41.470 --> 00:20:46.090
those are all of the popular
screen sizes in Android

00:20:46.090 --> 00:20:47.124
and their resolutions.

00:20:47.124 --> 00:20:49.040
We're not even talking
about stuff that's old.

00:20:49.040 --> 00:20:51.740
This is stuff within
the last two years.

00:20:51.740 --> 00:20:54.970
So that's a lot of
different resolutions

00:20:54.970 --> 00:20:57.960
and a lot of different
scales that you have

00:20:57.960 --> 00:21:00.580
to account for as a developer.

00:21:00.580 --> 00:21:04.540
Now, when you think about full
page images, ads, proportions,

00:21:04.540 --> 00:21:07.690
making the user experience feel
the same between all of them,

00:21:07.690 --> 00:21:10.350
it's kind of a big deal.

00:21:10.350 --> 00:21:14.520
So how do I take that and
condense it down to something

00:21:14.520 --> 00:21:17.330
that I can handle
giving to a UI guy

00:21:17.330 --> 00:21:19.960
and not having to explain a lot?

00:21:19.960 --> 00:21:23.940
Really, what you can do is only
worry about three main sizes.

00:21:23.940 --> 00:21:28.650
And this even includes your
iPhone and Android and mobile

00:21:28.650 --> 00:21:30.450
web rendering pieces.

00:21:30.450 --> 00:21:31.890
It can all be convergent.

00:21:31.890 --> 00:21:36.170
You really only need to have
them make it in three sizes.

00:21:36.170 --> 00:21:39.810
Those three sizes
are 1536 by 1904,

00:21:39.810 --> 00:21:43.770
which is essentially your 4 by
3, which also works on iPad.

00:21:43.770 --> 00:21:45.980
Woo hoo!

00:21:45.980 --> 00:21:50.000
Well, especially some of
the older ones, it's nice.

00:21:50.000 --> 00:21:52.640
And then 1440 by
2268, and that's

00:21:52.640 --> 00:21:54.440
accounting for the nav bar.

00:21:54.440 --> 00:21:58.740
So what we have here is
basically 4K with nav bar

00:21:58.740 --> 00:22:01.860
and 4K with hardware buttons.

00:22:01.860 --> 00:22:03.825
And those are just
different scales.

00:22:06.380 --> 00:22:09.610
Now, what's cool is that
basically most of your iPhone

00:22:09.610 --> 00:22:19.350
stuff will fit into the 16 by
9 for quad K, quad HD scaling,

00:22:19.350 --> 00:22:21.650
and you don't have to
worry about that as much.

00:22:21.650 --> 00:22:24.410
So basically, your
images for Samsungs,

00:22:24.410 --> 00:22:28.810
you can basically make them
work on your iPhones, too.

00:22:28.810 --> 00:22:34.370
So here is wonderful
predetermined high, medium,

00:22:34.370 --> 00:22:38.160
and low settings for
these different ratios

00:22:38.160 --> 00:22:41.030
and what devices
they might be on.

00:22:41.030 --> 00:22:42.910
So you can actually
take these values

00:22:42.910 --> 00:22:46.260
and directly integrate
them into your own system.

00:22:46.260 --> 00:22:50.940
Now, this was based off of what
we considered in scope as far

00:22:50.940 --> 00:22:52.310
as devices go.

00:22:52.310 --> 00:22:55.290
So this is the stuff
that we wanted to target.

00:22:55.290 --> 00:22:56.725
We want to target
really high end,

00:22:56.725 --> 00:22:59.150
and we target
really low end, too.

00:22:59.150 --> 00:23:04.360
Because we know that not every
guy who works in construction

00:23:04.360 --> 00:23:06.940
wants to have a $500 phone
that's going to break.

00:23:06.940 --> 00:23:09.810
You drop it once, it shatters.

00:23:09.810 --> 00:23:12.520
So having something that's a
little more durable but maybe

00:23:12.520 --> 00:23:13.950
not as high
performance-- we still

00:23:13.950 --> 00:23:16.440
need to take care
of that customer.

00:23:16.440 --> 00:23:20.030
So these values, super useful.

00:23:20.030 --> 00:23:22.010
Those are the three main scales.

00:23:22.010 --> 00:23:24.010
And that way, you can
just have it re-size.

00:23:24.010 --> 00:23:27.480
You can actually script this all
in something like ImageMagick

00:23:27.480 --> 00:23:30.620
so that you get all of that
stuff already coming out,

00:23:30.620 --> 00:23:36.580
and your UI/UX guy never
even knew that he did it.

00:23:36.580 --> 00:23:39.390
So here's another technique
that we need to talk about.

00:23:39.390 --> 00:23:40.730
It's called data batching.

00:23:40.730 --> 00:23:44.050
We need to put our
data together when

00:23:44.050 --> 00:23:45.510
we're using mobile
networks or when

00:23:45.510 --> 00:23:47.530
our users are moving around.

00:23:47.530 --> 00:23:50.380
So we can bundle it
ourselves-- so you

00:23:50.380 --> 00:23:54.000
wait to offload bigger data
sets till the user is on Wi-Fi

00:23:54.000 --> 00:23:57.350
or some sort of bigger network,
especially if you're not

00:23:57.350 --> 00:23:59.220
the main app at the time.

00:23:59.220 --> 00:24:01.140
JSON is not very efficient.

00:24:01.140 --> 00:24:02.440
XML is terrible.

00:24:02.440 --> 00:24:05.270
They've basically made these
human readable formats, which

00:24:05.270 --> 00:24:08.290
means that they have a
whole bunch of extra stuff

00:24:08.290 --> 00:24:11.730
that the user doesn't care
about and that honestly,

00:24:11.730 --> 00:24:13.550
in a lot of cases, you
probably don't need.

00:24:13.550 --> 00:24:15.341
But I know it's hard
to get away from this,

00:24:15.341 --> 00:24:17.680
because a lot of APIs use JSON.

00:24:17.680 --> 00:24:19.901
It's really easy use.

00:24:19.901 --> 00:24:20.400
Yeah.

00:24:20.400 --> 00:24:21.800
It's really easy to use.

00:24:21.800 --> 00:24:24.170
But even CSV is more efficient.

00:24:24.170 --> 00:24:25.950
And there's already
tools within Android

00:24:25.950 --> 00:24:29.210
that allow you to take advantage
of some of these batch data

00:24:29.210 --> 00:24:31.240
files and binaries.

00:24:31.240 --> 00:24:34.590
Now, you can also
do bundled together.

00:24:34.590 --> 00:24:37.950
And the best thing to do is
to do both at the same time.

00:24:37.950 --> 00:24:41.160
So you can use the
GCM Network Manager

00:24:41.160 --> 00:24:44.890
and just look at their API for
that in Android, and that way,

00:24:44.890 --> 00:24:48.820
it will automatically
bundle your pre-bundled data

00:24:48.820 --> 00:24:52.000
in with other things so that
it uses up less radio time

00:24:52.000 --> 00:24:56.040
and it better tracks against
faster networks, especially

00:24:56.040 --> 00:24:58.435
when the user isn't actively
using your application.

00:25:01.350 --> 00:25:04.540
So too long, didn't
read API structure--

00:25:04.540 --> 00:25:07.700
use lower quality images
and lower quality networks.

00:25:07.700 --> 00:25:08.770
Time to the user matters.

00:25:08.770 --> 00:25:10.936
You only have a few hundred
milliseconds before they

00:25:10.936 --> 00:25:12.682
notice your app is slow.

00:25:12.682 --> 00:25:15.140
And they don't think about the
fact-- when they look at it,

00:25:15.140 --> 00:25:16.630
they think your app is slow.

00:25:16.630 --> 00:25:20.170
They don't think, hey,
oh, my network sucks

00:25:20.170 --> 00:25:22.210
or my phone is slow.

00:25:22.210 --> 00:25:24.600
That's not what the first
thing in their mind is.

00:25:24.600 --> 00:25:27.340
So even if you need
to get a lower quality

00:25:27.340 --> 00:25:29.660
image because you're on
a lower quality network

00:25:29.660 --> 00:25:34.000
and then be able to move it to
a higher quality network when

00:25:34.000 --> 00:25:36.550
they get there and reload
that image, that's fine.

00:25:36.550 --> 00:25:39.110
It's actually going to end up
creating a better experience

00:25:39.110 --> 00:25:42.060
for them in the long run.

00:25:42.060 --> 00:25:45.760
Now, it's also kind of nice if
you allow your users to dictate

00:25:45.760 --> 00:25:47.880
if they want this behavior.

00:25:47.880 --> 00:25:50.130
So somebody who's an interior
designer with something

00:25:50.130 --> 00:25:52.190
like the Home Depot
app would maybe really

00:25:52.190 --> 00:25:55.640
care about getting really high
quality images all the time.

00:25:55.640 --> 00:25:58.370
Maybe they don't want
this network optimization.

00:25:58.370 --> 00:26:00.790
Giving them the ability
to do that and say,

00:26:00.790 --> 00:26:05.830
well, maybe I have a really,
really small data plan-- maybe

00:26:05.830 --> 00:26:08.600
I always want low
quality images.

00:26:08.600 --> 00:26:12.210
So there's different ways
you can help get more users

00:26:12.210 --> 00:26:14.630
to continually use your app.

00:26:14.630 --> 00:26:18.100
So you need to batch your
data, especially when

00:26:18.100 --> 00:26:21.510
your application is not
the main application up

00:26:21.510 --> 00:26:24.480
and use the GCM Network Manager.

00:26:24.480 --> 00:26:26.250
It's really easy.

00:26:26.250 --> 00:26:30.190
And even for your regular data,
having it batched like that,

00:26:30.190 --> 00:26:31.690
it works pretty darn fast.

00:26:31.690 --> 00:26:35.950
So there's very few issues that
I've encountered with that.

00:26:35.950 --> 00:26:38.530
So thank you, everybody.

00:26:38.530 --> 00:26:40.820
[APPLAUSE]

00:26:42.660 --> 00:26:45.560
So just a special thanks
to Google Developers and/or

00:26:45.560 --> 00:26:51.440
Performance Patterns and Big
Android BBQ team and Home Depot

00:26:51.440 --> 00:26:52.290
that I work for.

00:26:52.290 --> 00:26:55.074
And they let me be here,
so that was pretty great.

00:26:55.074 --> 00:26:55.990
I'm not at work today.

00:26:55.990 --> 00:26:56.531
It's awesome.

00:26:58.930 --> 00:27:04.890
But yeah, so I have
a question for you,

00:27:04.890 --> 00:27:05.930
and it involves prizes.

00:27:10.980 --> 00:27:14.214
So what's the name of the tool
that I was talking about that

00:27:14.214 --> 00:27:16.755
makes it really easy for people
who don't understand networks

00:27:16.755 --> 00:27:19.390
to understand networks?

00:27:19.390 --> 00:27:19.890
All right.

00:27:19.890 --> 00:27:22.500
You were the first guy.

00:27:22.500 --> 00:27:23.000
What?

00:27:25.630 --> 00:27:27.150
ARO?

00:27:27.150 --> 00:27:31.900
Can you actually name the full--
what was the full name of it?

00:27:31.900 --> 00:27:32.560
Not just ARO.

00:27:32.560 --> 00:27:33.850
What was the full name?

00:27:36.851 --> 00:27:37.350
OK.

00:27:37.350 --> 00:27:38.170
You you'll get one.

00:27:43.140 --> 00:27:44.220
You guys both get one.

00:27:44.220 --> 00:27:44.720
It's OK.

00:27:44.720 --> 00:27:45.310
Come on up.

00:27:45.310 --> 00:27:46.180
You could have.

00:27:46.180 --> 00:27:51.020
And then I'm going to
ask more questions.

00:27:51.020 --> 00:27:54.230
Yes, it is.

00:27:54.230 --> 00:27:55.710
All right.

00:27:55.710 --> 00:28:00.540
So if you were paying
attention fairly recently,

00:28:00.540 --> 00:28:03.110
how many aspect
ratios do you actually

00:28:03.110 --> 00:28:06.080
need to care about
for your images?

00:28:06.080 --> 00:28:06.830
Three.

00:28:06.830 --> 00:28:08.350
Well, don't just say it.

00:28:11.530 --> 00:28:13.910
OK.

00:28:13.910 --> 00:28:14.410
Three.

00:28:14.410 --> 00:28:15.505
OK there you go.

00:28:20.940 --> 00:28:21.500
OK.

00:28:21.500 --> 00:28:28.030
So if I'm looking at this
correctly-- what's my TLDR?

00:28:28.030 --> 00:28:29.970
OK.

00:28:29.970 --> 00:28:35.350
What image format
should you be using

00:28:35.350 --> 00:28:37.050
for a majority of
your images that

00:28:37.050 --> 00:28:38.196
don't require transparency?

00:28:40.710 --> 00:28:43.330
So you gentlemen
were-- yes, you were

00:28:43.330 --> 00:28:46.860
the first to raise your hand.

00:28:46.860 --> 00:28:51.790
Or-- well, you're
correct either way.

00:28:51.790 --> 00:28:55.180
Or JPEG or WebP, so I
would accept all three.

00:28:55.180 --> 00:28:58.780
But this one's got
your name on it, buddy.

00:28:58.780 --> 00:29:01.470
And everybody gets a
Home Depot football,

00:29:01.470 --> 00:29:02.550
foam football over here.

00:29:02.550 --> 00:29:05.150
So everybody wins.

00:29:05.150 --> 00:29:08.200
This is America, apparently.

00:29:08.200 --> 00:29:11.310
We're all winners.

00:29:11.310 --> 00:29:12.180
All right, sir.

00:29:15.480 --> 00:29:20.870
So what's the name of a
certain API within Android

00:29:20.870 --> 00:29:25.420
that makes it really easy for
you to bundle all your data?

00:29:25.420 --> 00:29:28.600
Guy in the far back.

00:29:28.600 --> 00:29:30.730
You win, sir.

00:29:30.730 --> 00:29:32.045
The final one is for you.

00:29:34.940 --> 00:29:39.200
So does anybody
have any questions?

00:29:39.200 --> 00:29:39.720
Oh, wow.

00:29:39.720 --> 00:29:40.220
OK.

00:29:40.220 --> 00:29:41.040
Lots of questions.

00:29:41.040 --> 00:29:41.971
You, sir.

00:29:41.971 --> 00:29:42.846
AUDIENCE: [INAUDIBLE]

00:29:49.943 --> 00:29:52.026
STACY DEVINO: You're going
to have to repeat that.

00:29:52.026 --> 00:29:52.901
AUDIENCE: [INAUDIBLE]

00:29:58.024 --> 00:30:00.190
STACY DEVINO: So I have
looked at that a little bit.

00:30:00.190 --> 00:30:06.400
It really-- so yes, I have.

00:30:06.400 --> 00:30:10.180
It's just that having
that implemented--

00:30:10.180 --> 00:30:13.980
I'm unaware of anybody
who's actually moving

00:30:13.980 --> 00:30:15.390
towards that at this point.

00:30:15.390 --> 00:30:20.150
So it would be nice, but
it's just not happened

00:30:20.150 --> 00:30:23.550
at this stage, I don't think.

00:30:23.550 --> 00:30:24.479
Any other questions?

00:30:24.479 --> 00:30:25.354
AUDIENCE: [INAUDIBLE]

00:30:42.530 --> 00:30:43.280
STACY DEVINO: Yes.

00:30:43.280 --> 00:30:47.830
It's defined by
that, because it's

00:30:47.830 --> 00:30:51.340
hard to pull data
from-- as to what

00:30:51.340 --> 00:30:54.520
your exact speed on that
network is at that point.

00:30:54.520 --> 00:30:57.030
There are some tools that
allow you to do that.

00:30:57.030 --> 00:30:59.460
And I've also done
direct tracking.

00:30:59.460 --> 00:31:01.590
So for those numbers,
those are based off

00:31:01.590 --> 00:31:07.210
of me basically using NU TTCP
to test against my own servers

00:31:07.210 --> 00:31:11.200
to see, OK, what does this look
like, what does that look like

00:31:11.200 --> 00:31:11.920
where possible.

00:31:11.920 --> 00:31:16.840
But it's very-- unless you have
something that's constantly

00:31:16.840 --> 00:31:20.160
pinging, you're never
going to know exactly what

00:31:20.160 --> 00:31:22.280
time responses and
how quickly something

00:31:22.280 --> 00:31:25.640
is moving without actually--
this you get for free.

00:31:25.640 --> 00:31:28.170
This is information that's
broadcast by the system

00:31:28.170 --> 00:31:31.260
and that you can just plop
it in and you can immediately

00:31:31.260 --> 00:31:34.090
make the best inference that
you can as far as the network

00:31:34.090 --> 00:31:36.340
quality goes.

00:31:36.340 --> 00:31:39.780
And also, be pretty smart when
it comes to how you're actually

00:31:39.780 --> 00:31:41.720
putting stuff together.

00:31:41.720 --> 00:31:45.460
So my average speed when we
were using the application

00:31:45.460 --> 00:31:48.780
was only like 43
kilobytes per second.

00:31:48.780 --> 00:31:51.380
That's pretty small.

00:31:51.380 --> 00:31:54.570
So that means that that
could actually-- I've

00:31:54.570 --> 00:31:59.070
made it so that I'm not
constantly hitting big numbers

00:31:59.070 --> 00:32:01.710
and I'm using as little
network as I can,

00:32:01.710 --> 00:32:04.900
even though I was on a
super high quality network.

00:32:04.900 --> 00:32:07.077
By condensing things, I'm
able to make that happen.

00:32:07.077 --> 00:32:07.952
AUDIENCE: [INAUDIBLE]

00:32:25.640 --> 00:32:27.340
STACY DEVINO: So
you can do both.

00:32:27.340 --> 00:32:31.370
This is basically just-- if
you have something that's

00:32:31.370 --> 00:32:36.330
critical like that, it's
probably best to do both,

00:32:36.330 --> 00:32:39.360
but it's extra
computational overhead.

00:32:39.360 --> 00:32:41.660
And something like
this allows you

00:32:41.660 --> 00:32:45.060
to-- especially when you're not
the primary network-- sorry,

00:32:45.060 --> 00:32:48.040
not the primary
application up-- maybe

00:32:48.040 --> 00:32:51.540
you're just making sure that
that user session stays active,

00:32:51.540 --> 00:32:54.039
or you're passing
back some metrics

00:32:54.039 --> 00:32:55.830
that you collected
while they were actually

00:32:55.830 --> 00:32:57.970
using the application,
but maybe you

00:32:57.970 --> 00:33:00.440
didn't want to interfere
with the application being

00:33:00.440 --> 00:33:02.390
used at the time.

00:33:02.390 --> 00:33:06.220
So by understanding that, hey,
I'm not on a great quality

00:33:06.220 --> 00:33:10.980
network, I'm going to wait
until I see this number pop up,

00:33:10.980 --> 00:33:13.420
then I'm going to
try and shoot it.

00:33:13.420 --> 00:33:15.780
And you can also
use Job Scheduler

00:33:15.780 --> 00:33:17.560
to help with some of that, too.

00:33:17.560 --> 00:33:21.109
This is just kind of-- there's
a whole bunch of sessions

00:33:21.109 --> 00:33:22.650
that Google has done
on Job Scheduler

00:33:22.650 --> 00:33:26.040
that you might find really
nice and actually really want

00:33:26.040 --> 00:33:29.700
to go Joanna's Doze
thing at some point,

00:33:29.700 --> 00:33:32.840
but I know it's happening
at the same time.

00:33:32.840 --> 00:33:35.930
Does that answer your
question a little bit?

00:33:35.930 --> 00:33:36.430
All right.

00:33:36.430 --> 00:33:37.140
Cool.

00:33:37.140 --> 00:33:38.425
Any other questions?

00:33:38.425 --> 00:33:39.300
AUDIENCE: [INAUDIBLE]

00:33:46.170 --> 00:33:50.240
STACY DEVINO: So I've
found that WebP quality is

00:33:50.240 --> 00:33:52.920
a little bit higher
than regular JPEG,

00:33:52.920 --> 00:33:55.220
but I think it also
depends on what compressor

00:33:55.220 --> 00:33:58.330
you use on your JPEG.

00:33:58.330 --> 00:34:02.529
I'm not super great
at knowing everything.

00:34:02.529 --> 00:34:05.070
So I'm a little bit of a pixel
fiend, so I'm definitely like,

00:34:05.070 --> 00:34:07.270
we have to have
high-quality assets.

00:34:07.270 --> 00:34:10.610
But at the same point in time,
you have to determine what is

00:34:10.610 --> 00:34:12.580
worth the quality
and what isn't.

00:34:12.580 --> 00:34:18.719
So maybe a square that's just a
background square-- maybe that

00:34:18.719 --> 00:34:24.020
doesn't need to be a
high-quality square.

00:34:24.020 --> 00:34:26.000
But maybe something
where it's a picture

00:34:26.000 --> 00:34:28.460
of a product or a
picture of somebody,

00:34:28.460 --> 00:34:29.900
that needs to be high quality.

00:34:29.900 --> 00:34:32.190
So you need to
determine what that

00:34:32.190 --> 00:34:36.010
needs to be based off of how
it's being contextually used.

00:34:36.010 --> 00:34:39.900
And it's always different in
different organizations, too.

00:34:39.900 --> 00:34:45.630
So retail, always make
the product look good.

00:34:45.630 --> 00:34:47.927
Signage, look
pretty good, but it

00:34:47.927 --> 00:34:50.260
doesn't have to look nearly
as good as the product does.

00:34:50.260 --> 00:34:54.506
The product has to look like,
oh man, I want it so bad.

00:34:54.506 --> 00:34:56.130
So there's just
different ways you have

00:34:56.130 --> 00:34:58.062
to handle it based off of that.

00:34:58.062 --> 00:34:58.895
Any other questions?

00:35:01.790 --> 00:35:03.131
Yay!

00:35:03.131 --> 00:35:03.630
All right.

00:35:03.630 --> 00:35:05.080
What is the mantra?

00:35:05.080 --> 00:35:06.970
Compress your images.

00:35:06.970 --> 00:35:09.910
Everybody compress them.

00:35:09.910 --> 00:35:12.960
So thank you so much for coming,
and I super appreciate it.

00:35:12.960 --> 00:35:15.460
You can feel free to come up
and ask me anything else if you

00:35:15.460 --> 00:35:16.420
wanted to privately.

00:35:16.420 --> 00:35:19.170
[APPLAUSE]

