WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.820
[MUSIC PLAYING]

00:00:06.306 --> 00:00:08.680
ROBERT GINDA: Thank you for
joining us here at I/O today.

00:00:08.680 --> 00:00:11.030
Hello everyone on the
Livestream as well.

00:00:11.030 --> 00:00:11.890
My name is Rob.

00:00:11.890 --> 00:00:14.490
I'm an Engineering Lead on
the Android Things Team,

00:00:14.490 --> 00:00:16.120
and I'm joined today
by Shikha, who is

00:00:16.120 --> 00:00:18.760
a Product Manager on our team.

00:00:18.760 --> 00:00:22.070
This is a Lenovo Smart Display
built using Android Things.

00:00:22.070 --> 00:00:24.220
You can think of it as a
visual Google Assistant

00:00:24.220 --> 00:00:26.590
or like a smart
speaker with a display.

00:00:26.590 --> 00:00:28.060
You probably heard
in the keynote

00:00:28.060 --> 00:00:29.620
already, or maybe
in Vince's talk

00:00:29.620 --> 00:00:32.470
earlier today, that
these devices, and others

00:00:32.470 --> 00:00:34.990
from JBL and LG, will
be available on store

00:00:34.990 --> 00:00:38.992
shelves starting this July, just
a couple of months from now.

00:00:38.992 --> 00:00:40.950
Today, we're going to
tell you the story of how

00:00:40.950 --> 00:00:43.207
we built these
devices from prototype

00:00:43.207 --> 00:00:44.790
up to the production
devices that will

00:00:44.790 --> 00:00:47.620
be available in a few months.

00:00:47.620 --> 00:00:49.690
Before joining the
Android Things team,

00:00:49.690 --> 00:00:51.160
I spent most of
my career writing

00:00:51.160 --> 00:00:53.650
software that ran on other
people's devices, probably

00:00:53.650 --> 00:00:55.060
like many of you.

00:00:55.060 --> 00:00:57.610
But building a new piece
of hardware at scale

00:00:57.610 --> 00:00:59.830
is different from the kind
of work I had done before,

00:00:59.830 --> 00:01:01.631
and it came with a
lot of new challenges.

00:01:01.631 --> 00:01:03.880
And today, we're going to
tell you about some of them.

00:01:03.880 --> 00:01:07.720
Our hope is that you leave this
talk with a better idea of what

00:01:07.720 --> 00:01:10.150
it's like to build
consumer hardware at scale

00:01:10.150 --> 00:01:13.340
and how Android Things makes
it easier than it's ever been.

00:01:13.340 --> 00:01:15.530
It's not that scary once
you know what to expect.

00:01:15.530 --> 00:01:18.130
So I hope that our story
of prototype to production

00:01:18.130 --> 00:01:21.029
can help you build a
device of your own.

00:01:21.029 --> 00:01:23.320
SHIKHA KAPOOR: If you are a
software developer thinking

00:01:23.320 --> 00:01:25.480
about building
consumer devices, here

00:01:25.480 --> 00:01:27.750
are a few things you
probably care about.

00:01:27.750 --> 00:01:30.130
First, you want to build
your product features

00:01:30.130 --> 00:01:33.490
without having to worry about
the underlying platform.

00:01:33.490 --> 00:01:36.460
You also want to be able to
swap out underlying hardware

00:01:36.460 --> 00:01:39.670
seamlessly, without affecting
your application layer,

00:01:39.670 --> 00:01:43.300
as the technology or product
needs evolve over time.

00:01:43.300 --> 00:01:46.040
You obviously want your
devices to be secure.

00:01:46.040 --> 00:01:49.150
I think it's obvious why
security is increasingly

00:01:49.150 --> 00:01:51.940
an essential requirement
for smart devices.

00:01:51.940 --> 00:01:55.300
They hold the keys to our homes
and our personal information.

00:01:55.300 --> 00:01:57.520
What's probably
less obvious is why

00:01:57.520 --> 00:02:00.370
it's hard to provide
this kind of security.

00:02:00.370 --> 00:02:04.450
It's incredibly expensive to
harden products out of the gate

00:02:04.450 --> 00:02:07.010
and to keep them
updated over time.

00:02:07.010 --> 00:02:10.400
Meanwhile, there's immense cost
pressure from end customers,

00:02:10.400 --> 00:02:13.450
and it's hard to amortize
costs with that large volume.

00:02:13.450 --> 00:02:15.580
We know this at Google,
since we've been

00:02:15.580 --> 00:02:18.190
doing this for many products.

00:02:18.190 --> 00:02:19.210
Coming back to you.

00:02:19.210 --> 00:02:21.520
Finally, if you are
building a consumer device,

00:02:21.520 --> 00:02:25.570
you'd want to manage release
and update channels over time.

00:02:25.570 --> 00:02:29.860
Android Things was designed
with all of these needs in mind.

00:02:29.860 --> 00:02:32.140
We provide turnkey
hardware in the form

00:02:32.140 --> 00:02:33.865
of pre-certified
system on modules

00:02:33.865 --> 00:02:35.950
or are what we call the SoMs.

00:02:35.950 --> 00:02:39.940
The SoM includes the CPU,
Wi-Fi, Bluetooth, memory,

00:02:39.940 --> 00:02:42.310
and other critical
hardware components.

00:02:42.310 --> 00:02:44.800
Think of this as a
small computing platform

00:02:44.800 --> 00:02:49.480
that you can use to build
a variety of IoT devices.

00:02:49.480 --> 00:02:52.510
We bring up the operating
system on new SoMs,

00:02:52.510 --> 00:02:54.970
test it, and certify
its suitability

00:02:54.970 --> 00:02:57.250
for production
devices so that you

00:02:57.250 --> 00:02:59.140
don't have to do any of this.

00:02:59.140 --> 00:03:01.030
Later on in the
talk, we'll give you

00:03:01.030 --> 00:03:03.460
an inside look into
some of this work

00:03:03.460 --> 00:03:05.380
that Google handles for you.

00:03:05.380 --> 00:03:07.180
You'll provide the
application code

00:03:07.180 --> 00:03:12.020
and wire up the peripherals, and
Google takes care of the rest.

00:03:12.020 --> 00:03:15.640
What do you see here are smart
displays from Lenovo, LG,

00:03:15.640 --> 00:03:16.820
and JBL.

00:03:16.820 --> 00:03:20.360
As Rob mentioned, they are
built using Android Things.

00:03:20.360 --> 00:03:22.810
In fact, if you
look under the hood,

00:03:22.810 --> 00:03:26.780
all three products have the
same SoM, which is pretty cool.

00:03:26.780 --> 00:03:29.840
These devices have
far field microphones

00:03:29.840 --> 00:03:33.080
that can hear you from
the other side of the room

00:03:33.080 --> 00:03:36.890
and built-in speakers that can
answer back across the room,

00:03:36.890 --> 00:03:38.870
just like a smart speaker.

00:03:38.870 --> 00:03:41.570
But now, we also
have a touch screen,

00:03:41.570 --> 00:03:44.570
which makes it possible
to see visual results.

00:03:44.570 --> 00:03:46.100
This is quite
cool, if the result

00:03:46.100 --> 00:03:48.410
happens to be a list
of restaurant nearbys

00:03:48.410 --> 00:03:51.980
or a map showing you
your commute conditions.

00:03:51.980 --> 00:03:54.950
We announced this
earlier this year at CES,

00:03:54.950 --> 00:03:57.680
and we're very proud of
the reception we received.

00:03:57.680 --> 00:04:02.060
Let's dive a little deeper
and see how they built these.

00:04:02.060 --> 00:04:04.280
About a year back,
we at Google were

00:04:04.280 --> 00:04:07.880
wondering if we could build
a visual Google Assistant.

00:04:07.880 --> 00:04:09.740
This would enable
deep integration

00:04:09.740 --> 00:04:13.370
with other Google services,
such as YouTube, Photos, Maps,

00:04:13.370 --> 00:04:15.900
and so on.

00:04:15.900 --> 00:04:17.670
Building a consumer
device, though,

00:04:17.670 --> 00:04:20.040
is typically a long process.

00:04:20.040 --> 00:04:23.730
But for a fast-evolving space
like smart home devices,

00:04:23.730 --> 00:04:26.410
time to market is
extremely important.

00:04:26.410 --> 00:04:29.670
We want a quick turnaround
time, and this is exactly where

00:04:29.670 --> 00:04:32.170
Android Things shines.

00:04:32.170 --> 00:04:35.700
Our goal is to make it possible
for software developers like

00:04:35.700 --> 00:04:39.100
you to build consumer
devices at scale.

00:04:39.100 --> 00:04:41.910
But that's a hard thing
to get right in a vacuum.

00:04:41.910 --> 00:04:44.610
It takes real-world experience
in building and shipping

00:04:44.610 --> 00:04:48.120
a lot of devices to know
that you've really done It.

00:04:48.120 --> 00:04:51.750
This project would give us the
perfect opportunity to do that.

00:04:51.750 --> 00:04:54.990
In this case, our customers
were software developers

00:04:54.990 --> 00:04:58.200
from other internal teams at
Google, such as the Google

00:04:58.200 --> 00:04:59.510
Assistant team.

00:04:59.510 --> 00:05:02.190
For small displays,
while they took the lead

00:05:02.190 --> 00:05:04.350
on building
application software,

00:05:04.350 --> 00:05:06.470
we iterated on the platform.

00:05:06.470 --> 00:05:09.100
As a result, we were able
to get these from prototype

00:05:09.100 --> 00:05:13.200
to production super fast, and
we now have a stronger platform

00:05:13.200 --> 00:05:15.690
for you to build on.

00:05:15.690 --> 00:05:18.330
We started by building some
proof-of-concept hardware

00:05:18.330 --> 00:05:19.770
for Smart Displays.

00:05:19.770 --> 00:05:23.010
Our goal was to learn from
that and to use the device

00:05:23.010 --> 00:05:25.950
to kick off broader
discussions across the company.

00:05:25.950 --> 00:05:30.720
So we took a few weeks and some
spare parts and built this.

00:05:30.720 --> 00:05:33.210
ROBERT GINDA: This is our first
proof-of-concept hardware.

00:05:33.210 --> 00:05:36.360
This is running on some hardware
that we had used previously

00:05:36.360 --> 00:05:39.330
to deliver an Android Things
powered smart speaker.

00:05:39.330 --> 00:05:41.400
I built this case
with my son, cost me

00:05:41.400 --> 00:05:43.260
about two Pokemon cards.

00:05:43.260 --> 00:05:47.220
He still wonders when he's going
to get his bricks back, though.

00:05:47.220 --> 00:05:49.980
This device doesn't have all
of the hardware that ships

00:05:49.980 --> 00:05:50.940
on the final devices.

00:05:50.940 --> 00:05:52.990
For example, it's
missing a camera.

00:05:52.990 --> 00:05:54.840
It doesn't have the
Volume Up Down buttons,

00:05:54.840 --> 00:05:56.612
or mute of any sort.

00:05:56.612 --> 00:05:58.320
But that wasn't the
point of this device.

00:05:58.320 --> 00:06:00.240
For this one, what
we were trying to do

00:06:00.240 --> 00:06:03.380
is show just the basics of what
we thought we could achieve on

00:06:03.380 --> 00:06:05.490
with the smart
display product to get

00:06:05.490 --> 00:06:07.362
some conversations started.

00:06:07.362 --> 00:06:08.820
The mic on this
one, in particular,

00:06:08.820 --> 00:06:09.903
was kind of tricky to use.

00:06:09.903 --> 00:06:11.982
It wasn't meant for
this kind of use case.

00:06:11.982 --> 00:06:13.440
It needed a quiet
room, and you had

00:06:13.440 --> 00:06:15.144
to stand in just the
right sweet spot.

00:06:15.144 --> 00:06:16.560
But with a little
bit of practice,

00:06:16.560 --> 00:06:21.060
it was possible to pull off a
pretty convincing demo with it.

00:06:21.060 --> 00:06:22.830
On top of the Android
Things platform

00:06:22.830 --> 00:06:25.350
and the smart speaker
code that we already had,

00:06:25.350 --> 00:06:27.450
we built a small
Android application

00:06:27.450 --> 00:06:29.070
to drive the
display and show off

00:06:29.070 --> 00:06:30.570
some of the key use
cases we thought

00:06:30.570 --> 00:06:32.695
were going to be important
for this kind of device.

00:06:35.102 --> 00:06:37.060
One of the first things
we did with the display

00:06:37.060 --> 00:06:39.760
is to transcribe your
query as you spoke it.

00:06:39.760 --> 00:06:42.100
It was a basic proof that
the whole speech recognition

00:06:42.100 --> 00:06:44.080
pipeline was up and
running properly,

00:06:44.080 --> 00:06:46.450
and it looked pretty
cool in the demo.

00:06:46.450 --> 00:06:48.690
Next up, we added some
support for rudimentary--

00:06:48.690 --> 00:06:50.190
what we call a
knowledge card-- that

00:06:50.190 --> 00:06:52.060
will show a brief
snippet of text

00:06:52.060 --> 00:06:55.570
and a photo, along with
answers to certain questions.

00:06:55.570 --> 00:06:57.280
This device couldn't
play video yet

00:06:57.280 --> 00:07:00.370
because it didn't have the
hardware required for that.

00:07:00.370 --> 00:07:02.027
But it could stream
music already,

00:07:02.027 --> 00:07:03.110
just like a smart speaker.

00:07:03.110 --> 00:07:06.880
So we added title track display
and media transport controls,

00:07:06.880 --> 00:07:08.399
like pause and skip.

00:07:08.399 --> 00:07:09.940
And then finally,
we took a rough cut

00:07:09.940 --> 00:07:12.992
at the ambient screen, which
is what the device does when

00:07:12.992 --> 00:07:14.200
it's not doing anything else.

00:07:14.200 --> 00:07:16.770
It showed a photo slideshow
and a weather forecast.

00:07:16.770 --> 00:07:19.910
So like I said, just kind of
a basic set of functionality

00:07:19.910 --> 00:07:21.910
that we could use to show
people what we thought

00:07:21.910 --> 00:07:23.770
we could build out of this.

00:07:23.770 --> 00:07:26.230
It only took about two weeks
and a small team of people

00:07:26.230 --> 00:07:27.530
to get this working.

00:07:27.530 --> 00:07:29.770
But the result was
actually surprisingly close

00:07:29.770 --> 00:07:31.690
to the architecture of
the final products that

00:07:31.690 --> 00:07:33.130
are shipping in a few months.

00:07:33.130 --> 00:07:35.140
The changes between
what we built here

00:07:35.140 --> 00:07:39.490
and what we're shipping are
basically incremental changes.

00:07:39.490 --> 00:07:42.520
Fundamentally, what we built
and what we're shipping

00:07:42.520 --> 00:07:44.230
involves the smart
display application

00:07:44.230 --> 00:07:47.200
at the top of the stack,
running on top of Android Things

00:07:47.200 --> 00:07:49.780
on top of a certified
what we call a SoM.

00:07:49.780 --> 00:07:51.460
Android Things
brings the hardware

00:07:51.460 --> 00:07:54.520
supports, the security,
the application framework,

00:07:54.520 --> 00:07:57.430
and the update mechanism, while
the smart display application

00:07:57.430 --> 00:07:59.710
brings all over the Google
Assistant integration

00:07:59.710 --> 00:08:02.519
and the visuals for the device.

00:08:02.519 --> 00:08:03.310
Don't get me wrong.

00:08:03.310 --> 00:08:05.518
There was definitely a lot
of work to do between here

00:08:05.518 --> 00:08:07.450
and what we're
shipping this summer.

00:08:07.450 --> 00:08:10.450
But as I said, the fundamental
architecture is the same,

00:08:10.450 --> 00:08:12.577
and it was a matter of
incrementally building out

00:08:12.577 --> 00:08:13.660
the feature set from here.

00:08:16.190 --> 00:08:19.010
We practiced the demo
routine with this device,

00:08:19.010 --> 00:08:21.800
and set up meetings across
Google over the next few weeks.

00:08:21.800 --> 00:08:24.309
People got a kick out of the
brick case that we built.

00:08:24.309 --> 00:08:25.850
And we had a lot of
great discussions

00:08:25.850 --> 00:08:29.000
and some debate about product
features we should support,

00:08:29.000 --> 00:08:33.640
about Android Things, and
about what we should do next.

00:08:33.640 --> 00:08:35.650
Overall, the demos
went really well.

00:08:35.650 --> 00:08:38.230
And we got the buy-in that we
needed from key stakeholders

00:08:38.230 --> 00:08:44.457
across Google to move on to the
next step with this project.

00:08:44.457 --> 00:08:46.540
SHIKHA KAPOOR: Now that
this was going to be real,

00:08:46.540 --> 00:08:48.430
we kicked off a few
steps in parallel

00:08:48.430 --> 00:08:50.260
to scale up our efforts.

00:08:50.260 --> 00:08:51.940
First, our business
development team

00:08:51.940 --> 00:08:55.840
started discussing discussions
with potential OEM partners.

00:08:55.840 --> 00:08:58.750
In this case, an OEM,
or an Original Equipment

00:08:58.750 --> 00:09:01.300
Manufacturer, refers
to a company that

00:09:01.300 --> 00:09:03.370
will build and sell the device.

00:09:03.370 --> 00:09:05.920
They come up with the industrial
design and the physical look

00:09:05.920 --> 00:09:07.450
and feel of the product.

00:09:07.450 --> 00:09:10.570
They are also pick parts like
the display camera, microphone,

00:09:10.570 --> 00:09:12.520
and other audio components.

00:09:12.520 --> 00:09:15.080
If you want to build a
device on Android Things,

00:09:15.080 --> 00:09:18.060
you'll be the one responsible
for case design and component

00:09:18.060 --> 00:09:18.970
selection.

00:09:18.970 --> 00:09:22.280
In place of this step, you might
find an industrial design work

00:09:22.280 --> 00:09:26.710
from to work with and a
factory to build your product.

00:09:26.710 --> 00:09:29.680
A lot of details here were
handled by our OEM partners,

00:09:29.680 --> 00:09:32.470
and we are not going
to cover them today.

00:09:32.470 --> 00:09:35.530
In parallel, we started
finalizing the hardware

00:09:35.530 --> 00:09:37.540
requirements for the product.

00:09:37.540 --> 00:09:40.330
The proof of concept device
used to SoM that we had

00:09:40.330 --> 00:09:42.520
used to build smart speakers.

00:09:42.520 --> 00:09:44.410
But you can tell
anything else from it.

00:09:44.410 --> 00:09:46.550
That has similar
requirements as well.

00:09:46.550 --> 00:09:48.520
For smart displays,
though, we needed

00:09:48.520 --> 00:09:50.410
something more
powerful to support use

00:09:50.410 --> 00:09:52.330
cases, such as video playback.

00:09:52.330 --> 00:09:55.390
Fortunately, we had some
SoM options in a roadmap

00:09:55.390 --> 00:09:58.070
that we started evaluating.

00:09:58.070 --> 00:10:01.310
Finally, in parallel to the OEM
selection and sound selection,

00:10:01.310 --> 00:10:03.960
we got started on the
application software.

00:10:03.960 --> 00:10:07.070
Google had already built out
the system backend and client

00:10:07.070 --> 00:10:09.140
software for smart speakers.

00:10:09.140 --> 00:10:12.110
But turning a smart speaker
into a smart display

00:10:12.110 --> 00:10:14.572
isn't just a matter of
plugging in a touch panel.

00:10:14.572 --> 00:10:16.780
There's a lot of new
work around the home

00:10:16.780 --> 00:10:19.790
screen, the video playback
experience, the Maps and Photos

00:10:19.790 --> 00:10:22.790
integration, and essentially
all the other visual features

00:10:22.790 --> 00:10:24.890
that we were trying
to build with this.

00:10:24.890 --> 00:10:28.010
Turning the application software
from a humble proof-of-concept

00:10:28.010 --> 00:10:29.900
device into a
production device was

00:10:29.900 --> 00:10:33.090
going to take a lot of time.

00:10:33.090 --> 00:10:35.460
Most of the software
work was responsibility

00:10:35.460 --> 00:10:38.080
of developers outside our team.

00:10:38.080 --> 00:10:40.290
And they needed to get
started right away.

00:10:40.290 --> 00:10:42.780
These engineers, who are
software developers like many

00:10:42.780 --> 00:10:44.850
of you, don't want
to have to think

00:10:44.850 --> 00:10:48.180
about the underlying
platform or the hardware.

00:10:48.180 --> 00:10:50.730
But because we are building
this on Android Things,

00:10:50.730 --> 00:10:51.570
they don't need to.

00:10:51.570 --> 00:10:55.260
Like we mentioned earlier,
we can be [? coupled into. ?]

00:10:55.260 --> 00:10:57.060
The application
engineers work on top

00:10:57.060 --> 00:11:00.080
of the Android framework, just
like any Android developer

00:11:00.080 --> 00:11:00.660
would.

00:11:00.660 --> 00:11:04.020
Their application can run on
any hardware with Android Things

00:11:04.020 --> 00:11:06.940
support.

00:11:06.940 --> 00:11:10.510
So at this point in the
project, it's July of last year.

00:11:10.510 --> 00:11:12.640
We're about a month and
a half into the work.

00:11:12.640 --> 00:11:14.830
We've got our
proof-of-concept hardware.

00:11:14.830 --> 00:11:17.380
We've got some business
development work underway.

00:11:17.380 --> 00:11:19.630
We've got the hardware
selection underway,

00:11:19.630 --> 00:11:21.190
and we're nearly
ready to get started

00:11:21.190 --> 00:11:24.590
on the application software
development in earnest.

00:11:24.590 --> 00:11:26.780
But in order to really
kickstart development,

00:11:26.780 --> 00:11:28.750
we need to get some
actual hardware

00:11:28.750 --> 00:11:31.030
into the hands of engineers
and product managers

00:11:31.030 --> 00:11:33.154
and other folks at Google
who are going to actually

00:11:33.154 --> 00:11:34.340
build this out.

00:11:34.340 --> 00:11:36.040
But as we said
before, the hardware

00:11:36.040 --> 00:11:38.170
that we used in that
proof-of-concept device

00:11:38.170 --> 00:11:41.770
was just a little too slow to
use for more than just a demo.

00:11:41.770 --> 00:11:44.530
So we looked through the SoMs
that we had in our pipeline

00:11:44.530 --> 00:11:47.440
and found one that met the
requirements for this category

00:11:47.440 --> 00:11:49.870
of devices, and it
happened to also

00:11:49.870 --> 00:11:52.720
be very easy to buy in
quantity over the Internet.

00:11:52.720 --> 00:11:54.880
And we had Android Things
already kind of running

00:11:54.880 --> 00:11:56.090
pretty well on it.

00:11:56.090 --> 00:11:58.180
So we decided to use
this as the basis

00:11:58.180 --> 00:12:00.010
for some provisional
hardware that we

00:12:00.010 --> 00:12:02.290
would build to unblock the
application engineers so

00:12:02.290 --> 00:12:04.960
that they could get
started on their job

00:12:04.960 --> 00:12:06.997
while we finished out
the hardware bring up.

00:12:06.997 --> 00:12:08.830
We knew that we would
swap this hardware out

00:12:08.830 --> 00:12:10.890
later when it got
closer to production,

00:12:10.890 --> 00:12:13.665
but that didn't worry us,
because as we've said,

00:12:13.665 --> 00:12:15.040
we're building on
Android Things,

00:12:15.040 --> 00:12:17.696
and that gives you the isolation
from the hardware that you

00:12:17.696 --> 00:12:18.820
need to be able to do that.

00:12:21.610 --> 00:12:23.070
The second problem
we had, though,

00:12:23.070 --> 00:12:24.780
with the provisional
hardware was

00:12:24.780 --> 00:12:27.540
that it was a development
board kit, similar to the IMX 7

00:12:27.540 --> 00:12:30.090
kits that we're giving
out here at I/O,

00:12:30.090 --> 00:12:32.820
which means that it had a
display and a camera connected

00:12:32.820 --> 00:12:36.052
to the baseboard through
flat flex ribbon cables.

00:12:36.052 --> 00:12:37.510
You can, obviously,
work like this,

00:12:37.510 --> 00:12:39.051
but it's a little
difficult to manage

00:12:39.051 --> 00:12:41.490
if you have more than one
on your desk, for example.

00:12:41.490 --> 00:12:44.820
And we wanted to give these
out to a lot of Googlers.

00:12:44.820 --> 00:12:47.070
For the first few weeks,
we literally held the thing

00:12:47.070 --> 00:12:51.210
together at our desks with
cardboard and rubber bands,

00:12:51.210 --> 00:12:53.940
but that wasn't going
to scale to the quantity

00:12:53.940 --> 00:12:55.890
that we wanted to deliver.

00:12:55.890 --> 00:12:57.780
For that, we needed a
more solid enclosure

00:12:57.780 --> 00:12:59.850
to keep everything in one spot.

00:12:59.850 --> 00:13:02.310
And by the way, if you do
complete the scavenger hunt

00:13:02.310 --> 00:13:04.680
here at I/O and you
get an IMAX 7 kit,

00:13:04.680 --> 00:13:06.210
make sure to keep the packaging.

00:13:06.210 --> 00:13:07.950
It turns into a handy
stand, so you don't

00:13:07.950 --> 00:13:10.422
have to build one yourself.

00:13:10.422 --> 00:13:11.880
So this is the
enclosure we came up

00:13:11.880 --> 00:13:14.760
with for our first
provisional hardware.

00:13:14.760 --> 00:13:16.980
Honestly, Android
Things didn't really

00:13:16.980 --> 00:13:19.956
help or hurt either way in
the building of this case.

00:13:19.956 --> 00:13:21.330
But I had a lot
of fun making it,

00:13:21.330 --> 00:13:23.737
and I learned a
lot in the process.

00:13:23.737 --> 00:13:26.070
So I hope you don't mind if
I geek out for a few minutes

00:13:26.070 --> 00:13:28.500
and tell you a little bit
more about this design

00:13:28.500 --> 00:13:30.259
and how we built it.

00:13:30.259 --> 00:13:31.800
It looks pretty
plain from the front.

00:13:31.800 --> 00:13:33.216
The point is that
it's just enough

00:13:33.216 --> 00:13:34.980
to keep the hardware
together and give you

00:13:34.980 --> 00:13:38.030
a rough sense of the form
factor that we had in mind.

00:13:38.030 --> 00:13:40.500
There is a camera
module at the top.

00:13:40.500 --> 00:13:42.840
Some microphones, that we
had manufactured locally here

00:13:42.840 --> 00:13:45.030
in Mountain View, in
the middle of the top.

00:13:45.030 --> 00:13:48.540
And of course the big
touch screen in the front.

00:13:48.540 --> 00:13:50.620
Here's a quick view of the back.

00:13:50.620 --> 00:13:52.260
The SoM and the
carrier board are

00:13:52.260 --> 00:13:54.420
mounted in the back of
this big piece of wood

00:13:54.420 --> 00:13:55.819
that I called the bezel here.

00:13:55.819 --> 00:13:57.610
Just like most of the
rest of the hardware,

00:13:57.610 --> 00:14:00.420
you can get to most of the
ports easily from the top,

00:14:00.420 --> 00:14:02.550
and there's a little
access for the reset button

00:14:02.550 --> 00:14:05.190
on the side, which is very
important when prototyping.

00:14:05.190 --> 00:14:07.440
I want to point out here,
though that pretty much none

00:14:07.440 --> 00:14:10.252
of these components
match the final hardware.

00:14:10.252 --> 00:14:12.210
Obviously, as we've said,
the SoM is different.

00:14:12.210 --> 00:14:13.120
So is the camera.

00:14:13.120 --> 00:14:14.700
So are the mics.

00:14:14.700 --> 00:14:15.810
So is the display.

00:14:15.810 --> 00:14:18.060
But again, not an issue
because we're building Android

00:14:18.060 --> 00:14:19.740
apps on this, and
they don't really

00:14:19.740 --> 00:14:23.780
care so much about the
specific hardware underneath.

00:14:23.780 --> 00:14:26.540
Building this prototype was my
favorite part of the project,

00:14:26.540 --> 00:14:28.916
because at the time, the
deadlines were far enough away

00:14:28.916 --> 00:14:31.040
so that they don't make
that crushing sound they do

00:14:31.040 --> 00:14:32.552
when they get a little closer.

00:14:32.552 --> 00:14:34.010
And we were still
a small team that

00:14:34.010 --> 00:14:36.440
needed to be scrappy
and pretty resourceful.

00:14:36.440 --> 00:14:39.660
So I literally built this case
in my garage over a few weeks.

00:14:39.660 --> 00:14:42.680
And the best part of that is
that I got to buy a new tool.

00:14:42.680 --> 00:14:45.980
Not just any tool, but a 60-watt
laser cutter, which of course,

00:14:45.980 --> 00:14:47.630
I got off the internet.

00:14:47.630 --> 00:14:51.440
I literally learned how to use
a laser cutter for this project.

00:14:51.440 --> 00:14:53.480
I iterated on the
design in my garage

00:14:53.480 --> 00:14:55.160
over the course
of a few weekends.

00:14:55.160 --> 00:14:58.040
It was my first time using any
kind of 3D modeling package

00:14:58.040 --> 00:14:59.540
to do this kind of design.

00:14:59.540 --> 00:15:02.240
My first time ever
using a laser cutter.

00:15:02.240 --> 00:15:04.569
And I basically learned
by watching videos online.

00:15:04.569 --> 00:15:06.860
And the point here is that
if this is the kind of thing

00:15:06.860 --> 00:15:08.850
you like, yes,
you can do it too.

00:15:08.850 --> 00:15:11.759
And you'll probably have
a lot of fun doing it.

00:15:11.759 --> 00:15:14.050
The material that I tried
first was this birch plywood.

00:15:14.050 --> 00:15:15.892
It's about three
millimeters thick.

00:15:15.892 --> 00:15:18.100
You can get it in quantity
from the net very easily--

00:15:18.100 --> 00:15:22.632
two-day shipping, in
stacks of 25 or 60.

00:15:22.632 --> 00:15:24.340
If you go for the
batch of 60, it's maybe

00:15:24.340 --> 00:15:25.840
$1 and a half a sheet or less.

00:15:25.840 --> 00:15:28.409
So it's pretty cost-effective.

00:15:28.409 --> 00:15:29.950
When I first tried
building this out,

00:15:29.950 --> 00:15:31.880
I wasn't very efficient
with my material use.

00:15:31.880 --> 00:15:34.600
It would take maybe two
or three sheets of plywood

00:15:34.600 --> 00:15:36.430
to build enough
parts for a case.

00:15:36.430 --> 00:15:39.730
But eventually, you want to get
a little more optimized, waste

00:15:39.730 --> 00:15:41.464
a little less material.

00:15:41.464 --> 00:15:43.630
And as you see here, I
managed to fit the whole case

00:15:43.630 --> 00:15:47.290
into a single 12-inch
square sheet of plywood.

00:15:47.290 --> 00:15:49.690
I did have to fit one of the
sides inside of the bezel

00:15:49.690 --> 00:15:50.440
to make that work.

00:15:53.410 --> 00:15:55.810
It was a big challenge
to figure out

00:15:55.810 --> 00:15:57.850
how to get this all into
one sheet of plywood--

00:15:57.850 --> 00:15:59.960
a lot of fun to overcome that.

00:15:59.960 --> 00:16:01.617
But laser cutters
only cut in 2D,

00:16:01.617 --> 00:16:03.700
which meant it's a little
hard to work a fastener,

00:16:03.700 --> 00:16:06.070
like a screw, into the design.

00:16:06.070 --> 00:16:08.110
So this one is all friction fit.

00:16:08.110 --> 00:16:09.820
I came up with a
tab and slot design

00:16:09.820 --> 00:16:11.486
where you could put
it together by hand,

00:16:11.486 --> 00:16:13.439
and it would stay
together pretty securely.

00:16:13.439 --> 00:16:15.730
And the best part of that
was that it was actually real

00:16:15.730 --> 00:16:17.540
easy to service in the field.

00:16:17.540 --> 00:16:20.140
If a connector comes loose or
you need to change a jumper,

00:16:20.140 --> 00:16:22.630
you can snap the thing
apart with your hands.

00:16:22.630 --> 00:16:24.310
You don't need to
find a screwdriver.

00:16:24.310 --> 00:16:24.850
You fix it.

00:16:24.850 --> 00:16:27.610
You put it back together,
and you're good to go.

00:16:27.610 --> 00:16:30.350
We tried a few variations
in other materials,

00:16:30.350 --> 00:16:32.119
such as the acrylic
you see here.

00:16:32.119 --> 00:16:33.910
I think it looks much
better than the wood.

00:16:33.910 --> 00:16:38.000
Obviously, this semitransparent
red is really cool.

00:16:38.000 --> 00:16:41.020
But what we found is that in
acrylic thickness-- for us

00:16:41.020 --> 00:16:43.720
at least-- the material
we had, the thickness

00:16:43.720 --> 00:16:46.562
varied too much across
color and even within color,

00:16:46.562 --> 00:16:48.520
so that when we put some
of the cases together,

00:16:48.520 --> 00:16:51.280
they just fall apart on a
desk, or they'd fit together

00:16:51.280 --> 00:16:52.840
so tightly that
the acrylic would

00:16:52.840 --> 00:16:54.670
snap at the weak
points, which turned out

00:16:54.670 --> 00:16:57.670
to be the 90-degree
cuts in the material.

00:16:57.670 --> 00:16:59.560
So we decided to go
with the wood after all

00:16:59.560 --> 00:17:02.230
because it was going to
be more robust for us.

00:17:02.230 --> 00:17:06.117
I cut about enough parts to make
about a dozen of these cases.

00:17:06.117 --> 00:17:07.450
We brought them into the office.

00:17:07.450 --> 00:17:09.490
I had some people
assemble them so

00:17:09.490 --> 00:17:11.410
that we could try
out the design,

00:17:11.410 --> 00:17:12.839
re-iterated on it a bit.

00:17:12.839 --> 00:17:14.380
Eventually, settled
on a final design

00:17:14.380 --> 00:17:16.630
and sent it off to an
internal shop at Google

00:17:16.630 --> 00:17:19.192
with a laser cutter that
can cut these in bulk.

00:17:19.192 --> 00:17:20.650
If you happen to
work for a company

00:17:20.650 --> 00:17:23.085
that doesn't have a laser
cutter shop, not a big deal.

00:17:23.085 --> 00:17:25.210
You can find plenty of
places on the internet where

00:17:25.210 --> 00:17:27.010
you can upload your CAD files.

00:17:27.010 --> 00:17:29.547
They'll cut them and
send them back to you.

00:17:29.547 --> 00:17:31.630
If you've never worked
with a laser cutter before,

00:17:31.630 --> 00:17:33.520
though, I recommend
you try one out

00:17:33.520 --> 00:17:36.040
first before you send it off
and commit to a bulk order,

00:17:36.040 --> 00:17:37.750
and get a feel for
what works and doesn't

00:17:37.750 --> 00:17:39.550
work in this kind of design.

00:17:39.550 --> 00:17:41.560
But again, the moral for
this part of the story

00:17:41.560 --> 00:17:43.270
is that you can build
an enclosure too,

00:17:43.270 --> 00:17:44.627
and laser cutters are cool.

00:17:44.627 --> 00:17:45.710
So you should try one out.

00:17:45.710 --> 00:17:48.190
Now, one more thing
before we move on, though.

00:17:48.190 --> 00:17:50.380
I mentioned we wanted
to build a lot of these,

00:17:50.380 --> 00:17:53.692
and we built 75 in the first
batch to spread around Google.

00:17:53.692 --> 00:17:55.900
And we thought that was
going to be more than enough,

00:17:55.900 --> 00:17:59.140
but they were so popular
that we built another 75.

00:17:59.140 --> 00:18:03.010
And even that, frankly, we
could've used a bit more.

00:18:03.010 --> 00:18:05.260
So once you have
this many devices--

00:18:05.260 --> 00:18:07.810
and honestly, once you have
more than, say one or two--

00:18:07.810 --> 00:18:10.425
you want a way to disambiguate
them to tell which one's which.

00:18:10.425 --> 00:18:12.550
Because at some point,
someone will have a problem,

00:18:12.550 --> 00:18:15.372
and they'll say, hey, man,
can you look at this device?

00:18:15.372 --> 00:18:17.080
And you'll say, sure,
I'm busy right now.

00:18:17.080 --> 00:18:18.151
Drop it off at my desk.

00:18:18.151 --> 00:18:20.650
And maybe they'll put it next
to one that looks just like it

00:18:20.650 --> 00:18:21.812
while you're away.

00:18:21.812 --> 00:18:23.770
And then you end up
looking at the scorch marks

00:18:23.770 --> 00:18:26.470
on the case to figure
out which is which.

00:18:26.470 --> 00:18:29.320
So think ahead-- give each
device a serial number,

00:18:29.320 --> 00:18:31.420
keep track of it in the
spreadsheet somewhere,

00:18:31.420 --> 00:18:34.030
so you know how much inventory
you have left to give out,

00:18:34.030 --> 00:18:35.890
or who's got what or
maybe what the history

00:18:35.890 --> 00:18:38.940
of individual devices are.

00:18:38.940 --> 00:18:40.990
SHIKHA KAPOOR: So we
now have the hardware

00:18:40.990 --> 00:18:43.080
for a type 2 rollover
that application

00:18:43.080 --> 00:18:44.830
developers for a short term.

00:18:44.830 --> 00:18:47.070
In parallel, we were
working on finalizing

00:18:47.070 --> 00:18:49.290
the SoM for smart displays.

00:18:49.290 --> 00:18:51.540
We evaluate certain
options in our roadmaps

00:18:51.540 --> 00:18:53.900
and kickstarted in
series of discussions.

00:18:53.900 --> 00:18:57.410
Only this time, it was
with the SOC vendors.

00:18:57.410 --> 00:19:00.030
They eventually selected
a Qualcomm SoM--

00:19:00.030 --> 00:19:04.290
call this the SDA624 for the
Lenovo and LJNJBL devices

00:19:04.290 --> 00:19:05.850
that are launching this year.

00:19:05.850 --> 00:19:10.490
Partnering this is an eight-core
A53 with an Adreno 506 GPO.

00:19:10.490 --> 00:19:12.490
That's a [INAUDIBLE]
display and camera.

00:19:12.490 --> 00:19:15.000
It's plenty capable of
driving the smartest way.

00:19:15.000 --> 00:19:17.940
And of course, a bunch of other
potential devices that you may

00:19:17.940 --> 00:19:19.480
want to build as well.

00:19:19.480 --> 00:19:24.090
On the SDA624, Google also
will offer free stability fixes

00:19:24.090 --> 00:19:26.430
and security patches
for three years,

00:19:26.430 --> 00:19:29.550
with options for
extended support.

00:19:29.550 --> 00:19:31.650
To give you a more concrete
idea of the hardware

00:19:31.650 --> 00:19:33.420
we are talking
about here, here's

00:19:33.420 --> 00:19:35.490
a photo of the top of the SoM.

00:19:35.490 --> 00:19:39.660
You can see the SOC, the Wi-Fi
Bluetooth module, the memory--

00:19:39.660 --> 00:19:42.510
all mounted on a discrete board.

00:19:42.510 --> 00:19:44.370
Here's the underside
of this SoM.

00:19:44.370 --> 00:19:46.530
The main thing going
on here are those three

00:19:46.530 --> 00:19:49.800
high-density connectors
with 100 pins each.

00:19:49.800 --> 00:19:54.670
These bins make up the SoM's
interface to the outside world.

00:19:54.670 --> 00:19:57.510
Here's a little deeper
dive into this home spinout

00:19:57.510 --> 00:20:01.080
interface-- the pins
carry power, [INAUDIBLE],,

00:20:01.080 --> 00:20:04.830
and a wide variety of peripheral
buses in and out of the SoM.

00:20:04.830 --> 00:20:08.010
Wow, looks a little
overwhelming, doesn't it?

00:20:08.010 --> 00:20:11.220
However, you wouldn't need
to worry about designing this

00:20:11.220 --> 00:20:14.960
if you were using Android
Things to build your devices.

00:20:14.960 --> 00:20:16.890
Pin assignment has
been standardized,

00:20:16.890 --> 00:20:19.050
along with the
rest of this SoM so

00:20:19.050 --> 00:20:22.650
that the underlying platform
know what the expectations are.

00:20:22.650 --> 00:20:24.540
In some cases, you'll
also have the option

00:20:24.540 --> 00:20:27.940
of laying out this arm circuit
flat onto your board exactly

00:20:27.940 --> 00:20:30.790
as specified, according
to this interface.

00:20:30.790 --> 00:20:33.060
However, it's much
faster and easier

00:20:33.060 --> 00:20:38.317
to just build a carrier board
that this model can plug into.

00:20:38.317 --> 00:20:40.650
ROBERT GINDA: So if you get
one of our development SoMs,

00:20:40.650 --> 00:20:43.700
it'll come with our carrier
board that has some common I/O

00:20:43.700 --> 00:20:46.106
pins broken out onto a
standard-sized header

00:20:46.106 --> 00:20:47.730
so that you don't
need to deal with any

00:20:47.730 --> 00:20:49.770
of these high-density
connectors.

00:20:49.770 --> 00:20:54.450
But when you build a device
for real, for mass production,

00:20:54.450 --> 00:20:56.730
you'll likely want to
spin your own carrier

00:20:56.730 --> 00:20:58.590
board that connects
to whatever hardware

00:20:58.590 --> 00:21:01.050
you need for your device.

00:21:01.050 --> 00:21:04.320
For smart displays, we came up
with a reference carrier board

00:21:04.320 --> 00:21:06.450
that we asked our
OEMs to follow.

00:21:06.450 --> 00:21:09.360
You can see in the slide
here that in the middle,

00:21:09.360 --> 00:21:11.715
we have the SoM, which
again is the CPU, the Wi-Fi,

00:21:11.715 --> 00:21:14.220
and other important parts
and the peripherals are

00:21:14.220 --> 00:21:16.200
connected around the outside.

00:21:16.200 --> 00:21:19.020
We standardized on button
and sensor connections

00:21:19.020 --> 00:21:21.360
in this reference
design, specifying

00:21:21.360 --> 00:21:24.420
which GPIOs shows they should
connect into, for example,

00:21:24.420 --> 00:21:26.700
to simplify our work
on the software side,

00:21:26.700 --> 00:21:29.460
because we're working with
three OEMs simultaneously.

00:21:29.460 --> 00:21:33.480
We wanted to avoid as much
as we could unnecessary

00:21:33.480 --> 00:21:35.580
customizations across OEMs.

00:21:35.580 --> 00:21:37.740
So everybody, for example,
plug their volume up

00:21:37.740 --> 00:21:40.140
into the same GPIO on the SoM.

00:21:40.140 --> 00:21:43.110
One other thing we specified
in the reference design

00:21:43.110 --> 00:21:45.750
here is that the
microphone mute circuit

00:21:45.750 --> 00:21:49.170
should be external to the SoM
and implemented in hardware.

00:21:49.170 --> 00:21:51.120
So that when you
mute these devices,

00:21:51.120 --> 00:21:53.850
the mics are electrically,
physically disconnected

00:21:53.850 --> 00:21:55.920
from the SoM, so
that even in the face

00:21:55.920 --> 00:21:59.270
of some sort of successful
software exploit in the future,

00:21:59.270 --> 00:22:03.690
there is no way to unmute
the device and software.

00:22:03.690 --> 00:22:06.480
Similarly, we specified as
part of the reference design

00:22:06.480 --> 00:22:09.990
that the camera mute
should physically

00:22:09.990 --> 00:22:12.050
cover the lens of the
camera so that there

00:22:12.050 --> 00:22:15.780
is no way to unmute the camera,
so to speak, in software.

00:22:15.780 --> 00:22:18.480
We did leave some room
for OEM customization.

00:22:18.480 --> 00:22:21.400
For example, they could
select their own microphones.

00:22:21.400 --> 00:22:23.820
They could build their
own audio output stages.

00:22:23.820 --> 00:22:28.230
And they had some leeway
on display choice as well.

00:22:28.230 --> 00:22:30.296
This is the next revision
of our development kit.

00:22:30.296 --> 00:22:31.920
This is what came
after the wooden kits

00:22:31.920 --> 00:22:33.420
that I showed earlier.

00:22:33.420 --> 00:22:35.999
This one is built according
to the reference design.

00:22:35.999 --> 00:22:38.040
And it's using a lot of
the production components

00:22:38.040 --> 00:22:39.840
that we have in real devices.

00:22:39.840 --> 00:22:41.640
This time around, the
entire front assembly

00:22:41.640 --> 00:22:43.280
was put together
by an outside firm.

00:22:43.280 --> 00:22:45.360
And we didn't have
to do any of that.

00:22:45.360 --> 00:22:47.700
This case happened to be
in acrylic, as you can see.

00:22:47.700 --> 00:22:50.910
It used friction fit grommets
to connect the standoffs

00:22:50.910 --> 00:22:51.762
to the back.

00:22:51.762 --> 00:22:53.970
These sometimes came loose
if you overtightened them,

00:22:53.970 --> 00:22:56.136
but you could fix it with
a little bit of Super Glue

00:22:56.136 --> 00:22:57.240
if you had to.

00:22:57.240 --> 00:23:00.360
From the front, what we have
here is the exact same touch

00:23:00.360 --> 00:23:03.810
panel, camera and, microphones
used in some of our production

00:23:03.810 --> 00:23:05.730
devices.

00:23:05.730 --> 00:23:08.094
We added this acrylic
back at Google,

00:23:08.094 --> 00:23:10.260
which held the speaker in
place and really just gave

00:23:10.260 --> 00:23:12.720
the front something to
lean up against so that it

00:23:12.720 --> 00:23:15.990
was at a similar angle
to what we were expecting

00:23:15.990 --> 00:23:18.000
for the production devices.

00:23:18.000 --> 00:23:22.510
Inside, these are essentially
the Qualcomm SDA624 SoM

00:23:22.510 --> 00:23:24.030
plugged into a
carrier board that

00:23:24.030 --> 00:23:25.906
matches the reference design.

00:23:25.906 --> 00:23:27.780
This is actually one of
the earlier versions,

00:23:27.780 --> 00:23:30.120
which we called the FEP1.

00:23:30.120 --> 00:23:32.910
And in these versions, the
amplifier and the display

00:23:32.910 --> 00:23:34.920
interface were on
daughter cards that

00:23:34.920 --> 00:23:36.570
plugged into the carrier board.

00:23:36.570 --> 00:23:38.940
But on later revisions, we
had it all flattened down

00:23:38.940 --> 00:23:40.860
onto a single carrier board.

00:23:40.860 --> 00:23:42.540
We completed these
kits in the beginning

00:23:42.540 --> 00:23:45.220
of December of last year.

00:23:45.220 --> 00:23:47.190
If you're not
aware, CES is July--

00:23:47.190 --> 00:23:47.762
sorry, June.

00:23:47.762 --> 00:23:48.720
SHIKHA KAPOOR: January.

00:23:48.720 --> 00:23:49.740
ROBERT GINDA: January.

00:23:49.740 --> 00:23:51.060
January 9.

00:23:51.060 --> 00:23:54.360
So we basically had
just a month to go

00:23:54.360 --> 00:23:56.520
before the big show,
where we going to show off

00:23:56.520 --> 00:23:57.525
these devices at CES.

00:24:02.520 --> 00:24:04.230
So it was a little
nerve-wracking,

00:24:04.230 --> 00:24:05.730
especially in those
weeks leading up

00:24:05.730 --> 00:24:07.110
to the delivery
of these devices,

00:24:07.110 --> 00:24:09.810
where the CES was getting
closer and closer.

00:24:09.810 --> 00:24:11.640
But in fact, the
application engineers

00:24:11.640 --> 00:24:14.460
had gotten off to a great
start with the wooden devices,

00:24:14.460 --> 00:24:17.580
and we sorted out the platform
bring up on the Android Things

00:24:17.580 --> 00:24:19.162
side relatively quickly.

00:24:19.162 --> 00:24:21.120
So it was really kind of
amazing that one month

00:24:21.120 --> 00:24:25.890
before this huge demo at CES,
we were able to completely swap

00:24:25.890 --> 00:24:27.030
out the hardware.

00:24:27.030 --> 00:24:29.430
We moved the entire
development team, platform

00:24:29.430 --> 00:24:32.550
and, application engineers
from those wooden prototypes

00:24:32.550 --> 00:24:35.580
over to devices running on
a completely different SOC

00:24:35.580 --> 00:24:36.390
without a hitch.

00:24:36.390 --> 00:24:39.660
And this is because thanks to
Android Things, a smart display

00:24:39.660 --> 00:24:42.997
application is totally
independent of the platform.

00:24:42.997 --> 00:24:44.580
You can see how this
was useful to us,

00:24:44.580 --> 00:24:46.830
because we had this kind
of provisional situation

00:24:46.830 --> 00:24:48.990
where we needed to bring
up temporary hardware

00:24:48.990 --> 00:24:50.740
before the real stuff was ready.

00:24:50.740 --> 00:24:53.250
But this can be really useful
in production devices as well.

00:24:53.250 --> 00:24:56.490
You may ship this year,
with a certain profile,

00:24:56.490 --> 00:24:58.800
a certain piece of
hardware that you need.

00:24:58.800 --> 00:25:01.290
And then next year, maybe
you want to cost it down,

00:25:01.290 --> 00:25:03.120
or you may want to
add new features

00:25:03.120 --> 00:25:05.442
and switch to a more
powerful piece of hardware.

00:25:05.442 --> 00:25:06.900
And because of
this, you can easily

00:25:06.900 --> 00:25:10.380
reuse the application
software across a wide variety

00:25:10.380 --> 00:25:12.682
of hardware platforms.

00:25:12.682 --> 00:25:14.890
SHIKHA KAPOOR: So around
the same time as a reference

00:25:14.890 --> 00:25:17.010
hardware was being completed.

00:25:17.010 --> 00:25:20.500
OEM partners Lenovo,
JBL, and LG were busy

00:25:20.500 --> 00:25:23.710
building out their own devices
based on the reference design

00:25:23.710 --> 00:25:25.120
that we showed before.

00:25:25.120 --> 00:25:27.750
Those arrived at Google
even closer to CES.

00:25:27.750 --> 00:25:30.520
We got them with just about
two to three weeks to spare.

00:25:30.520 --> 00:25:33.490
But again, the transition
was relatively smooth.

00:25:33.490 --> 00:25:34.870
We hit a few bumps.

00:25:34.870 --> 00:25:36.790
For example, on
one of our devices,

00:25:36.790 --> 00:25:39.370
the camera looked green,
which we eventually

00:25:39.370 --> 00:25:41.620
traced to a missing capacitor.

00:25:41.620 --> 00:25:45.310
But essentially, nothing that
we couldn't sort out in time.

00:25:45.310 --> 00:25:47.320
CES was a lot of work.

00:25:47.320 --> 00:25:49.600
I remember cursing whoever
it is who schedules

00:25:49.600 --> 00:25:51.430
it so close to holidays.

00:25:51.430 --> 00:25:53.650
This is a picture
of our war room

00:25:53.650 --> 00:25:56.310
that we set up a few
weeks before CES.

00:25:56.310 --> 00:25:58.660
We spent a lot of time
here planning the demos,

00:25:58.660 --> 00:26:02.080
adding features, and fixing
last-minute bugs on the device

00:26:02.080 --> 00:26:05.020
and on the back end
servers that make it work.

00:26:05.020 --> 00:26:07.420
On the demos, we planned
to show rich integration

00:26:07.420 --> 00:26:11.320
with other Google services, such
as YouTube, Photos, and Maps.

00:26:11.320 --> 00:26:13.300
This is a picture of
a little kid's room

00:26:13.300 --> 00:26:15.460
that they set up in
Mountain View, which

00:26:15.460 --> 00:26:17.800
had nice cameras
pointing at it, and we

00:26:17.800 --> 00:26:20.380
could check in on a little
Android baby, all the way

00:26:20.380 --> 00:26:21.990
from Vegas.

00:26:21.990 --> 00:26:24.700
Our hard work and careful
planning paid off,

00:26:24.700 --> 00:26:27.670
and the demos pretty much worked
like they were supposed to.

00:26:27.670 --> 00:26:30.310
We had some issues setting up
the venue and a few hardware

00:26:30.310 --> 00:26:30.880
glitches.

00:26:30.880 --> 00:26:34.300
But we brought backups,
expecting that to happen.

00:26:34.300 --> 00:26:37.360
The reception we got from
the press and users at CES

00:26:37.360 --> 00:26:39.440
was very encouraging.

00:26:39.440 --> 00:26:42.010
When you are hard at work
on something in secret,

00:26:42.010 --> 00:26:44.080
it's hard to gauge how
the outside world is

00:26:44.080 --> 00:26:45.610
going to react to it.

00:26:45.610 --> 00:26:47.560
Getting this kind
of positive feedback

00:26:47.560 --> 00:26:50.050
was a great shot of
motivation for the team

00:26:50.050 --> 00:26:52.910
and helped further
galvanize the effort.

00:26:52.910 --> 00:26:55.930
After CES, it was time to
get out of the demo mindset

00:26:55.930 --> 00:26:58.510
and back to the
work of shipping.

00:26:58.510 --> 00:27:00.640
At this point, we were
flush with hardware

00:27:00.640 --> 00:27:03.950
from our OEM partners, and
the program was ramping up.

00:27:03.950 --> 00:27:06.600
Up till now, we were handing
out a single software

00:27:06.600 --> 00:27:08.620
build to all our developers.

00:27:08.620 --> 00:27:10.820
But now we needed to expand out.

00:27:10.820 --> 00:27:13.420
Fortunately, Android Things
makes this super easy,

00:27:13.420 --> 00:27:15.840
using what we call as channels.

00:27:15.840 --> 00:27:19.390
Our Developer Console allows
you to manage release and update

00:27:19.390 --> 00:27:21.080
channels over time.

00:27:21.080 --> 00:27:22.840
You can get a lot
more details on how

00:27:22.840 --> 00:27:25.910
this works in Adam and
Amy's talk tomorrow.

00:27:25.910 --> 00:27:28.840
So for Smart Displays, we
established multiple channels

00:27:28.840 --> 00:27:32.450
for our internal user segments,
depending on their needs.

00:27:32.450 --> 00:27:35.800
For example, our developers have
medium to high risk tolerance

00:27:35.800 --> 00:27:38.570
and can replace
components as necessary.

00:27:38.570 --> 00:27:40.520
We have a dev channel for them.

00:27:40.520 --> 00:27:43.660
We also have a Canary for
high-risk tolerant developers

00:27:43.660 --> 00:27:45.620
where we roll out daily builds.

00:27:45.620 --> 00:27:48.490
Of course, we have a different
channel for our QA or testing

00:27:48.490 --> 00:27:51.100
teams so that we can
give them early access

00:27:51.100 --> 00:27:53.680
to builds that we want tested.

00:27:53.680 --> 00:27:56.050
At this point, we also
have hundreds of Googlers

00:27:56.050 --> 00:27:57.700
who are testing
out smart displays

00:27:57.700 --> 00:27:59.860
and giving us
feedback on features.

00:27:59.860 --> 00:28:02.350
These people need
more stable channels,

00:28:02.350 --> 00:28:04.040
and they have low
risk tolerance.

00:28:04.040 --> 00:28:06.860
So we roll out stable
weekly builds for them

00:28:06.860 --> 00:28:09.590
with non-good functionality,
and we skip builds in case

00:28:09.590 --> 00:28:11.910
there are issues.

00:28:11.910 --> 00:28:14.180
We are getting close
to the end of the talk,

00:28:14.180 --> 00:28:17.480
but I want to cover one more
thing before wrapping up.

00:28:17.480 --> 00:28:21.010
In this day and age, if
you are shipping software,

00:28:21.010 --> 00:28:23.710
you never really need to
be completely done with it.

00:28:23.710 --> 00:28:26.270
If you are building a website
or a mobile application,

00:28:26.270 --> 00:28:28.970
you can roll out bug
fixes whenever you want.

00:28:28.970 --> 00:28:32.780
But when it comes to hardware,
you only get one shot at it.

00:28:32.780 --> 00:28:35.910
Once it's in the hands
of the user, that's it.

00:28:35.910 --> 00:28:38.690
There are some things that even
software cannot fix at that

00:28:38.690 --> 00:28:39.380
point.

00:28:39.380 --> 00:28:41.210
So you better get it right.

00:28:41.210 --> 00:28:44.270
You also just cannot keep the
factory running continuously,

00:28:44.270 --> 00:28:46.760
though making small
tweaks here and there.

00:28:46.760 --> 00:28:49.610
You need to purchase your
building materials in bulk.

00:28:49.610 --> 00:28:51.920
And since it's still
early in the process,

00:28:51.920 --> 00:28:54.230
you're not going to be ready
to buy in mass production

00:28:54.230 --> 00:28:55.220
quantities.

00:28:55.220 --> 00:28:57.620
Also, the tooling and
testing takes some time

00:28:57.620 --> 00:28:59.210
to set up and change.

00:28:59.210 --> 00:29:02.480
So this process usually
happens across a few builds

00:29:02.480 --> 00:29:05.330
that are standard in the
hardware development lifecycle.

00:29:05.330 --> 00:29:07.310
You can read up more
about those on internet,

00:29:07.310 --> 00:29:11.350
but I'll cover it briefly today.

00:29:11.350 --> 00:29:14.080
So we already talked
about the prototype phase.

00:29:14.080 --> 00:29:17.010
The next phase is the EVT,
or the Engineering Validation

00:29:17.010 --> 00:29:18.090
Test.

00:29:18.090 --> 00:29:20.290
For this phase, you are
trying to validate that you

00:29:20.290 --> 00:29:22.470
got your schematics right.

00:29:22.470 --> 00:29:24.090
You don't have
any layout issues,

00:29:24.090 --> 00:29:26.020
and your components
work with each other,

00:29:26.020 --> 00:29:27.480
the way they are supposed to.

00:29:27.480 --> 00:29:29.790
If you are still considering
different design options,

00:29:29.790 --> 00:29:30.990
you can iterate them.

00:29:30.990 --> 00:29:33.870
This is a good time to do so.

00:29:33.870 --> 00:29:36.390
This essentially represents
the first attempt

00:29:36.390 --> 00:29:38.820
at building your boards
the way they will appear

00:29:38.820 --> 00:29:40.660
inside your final device.

00:29:40.660 --> 00:29:44.040
That enclosure is typically
still not final at this stage.

00:29:44.040 --> 00:29:47.220
So you may want to keep the
board hard glued, screwed,

00:29:47.220 --> 00:29:51.050
or taped, just to keep
them from flipping around.

00:29:51.050 --> 00:29:54.750
The next stage is DVT, or
the Design Validation Test.

00:29:54.750 --> 00:29:57.410
The purpose here is to verify
your production processes

00:29:57.410 --> 00:29:59.840
and equipment to ensure
that they are meeting

00:29:59.840 --> 00:30:01.910
your final specifications.

00:30:01.910 --> 00:30:06.380
The devices we got for CES
were what we called as pre-DVT.

00:30:06.380 --> 00:30:07.970
They were soft
tooled, which means

00:30:07.970 --> 00:30:09.920
that the molds used
to cast the plastics

00:30:09.920 --> 00:30:12.830
were made of a soft
material like silicone.

00:30:12.830 --> 00:30:14.780
Again, you may want to
do a few builds here

00:30:14.780 --> 00:30:17.480
until you get to a point
where you know that there are

00:30:17.480 --> 00:30:20.720
no fixes that would need
the hardware [? respin. ?]

00:30:20.720 --> 00:30:23.360
You ramp up quantities as
you get more confidence.

00:30:23.360 --> 00:30:25.970
And eventually, you want to
get to a run with hard tool

00:30:25.970 --> 00:30:28.190
plastics.

00:30:28.190 --> 00:30:30.630
The PVT, or the Production
Validation Test,

00:30:30.630 --> 00:30:32.820
is typically the last
build that transitions

00:30:32.820 --> 00:30:34.290
into mass production.

00:30:34.290 --> 00:30:36.960
Hopefully, by now, you've
logged in the final software

00:30:36.960 --> 00:30:39.630
that you will be flashing
in on these devices.

00:30:39.630 --> 00:30:41.160
At this point, you
are also hoping

00:30:41.160 --> 00:30:44.070
that your factory's pretty
much running on autopilot,

00:30:44.070 --> 00:30:47.110
without any manual intervention.

00:30:47.110 --> 00:30:48.660
Finally, our product
is ready to go

00:30:48.660 --> 00:30:52.170
to mass production, which means
its ready to be on shelves.

00:30:52.170 --> 00:30:54.180
At this stage, you're
ramping up production

00:30:54.180 --> 00:30:56.490
and focusing on making
process improvements

00:30:56.490 --> 00:30:57.870
to improve the unit.

00:30:57.870 --> 00:30:59.760
You obviously want to
continue testing it

00:30:59.760 --> 00:31:02.850
for the next few months, though,
as well as establish some sort

00:31:02.850 --> 00:31:05.820
of reliability testing.

00:31:05.820 --> 00:31:08.970
So there-- that's how they build
smart displays from prototype

00:31:08.970 --> 00:31:10.290
through production.

00:31:10.290 --> 00:31:12.420
To reiterate, having
Android Things

00:31:12.420 --> 00:31:14.700
as the underlying
platform helped

00:31:14.700 --> 00:31:16.740
in every step of the way.

00:31:16.740 --> 00:31:18.525
First, thanks to the
Android framework,

00:31:18.525 --> 00:31:20.670
our software
developers could focus

00:31:20.670 --> 00:31:23.730
on building application
features without having to worry

00:31:23.730 --> 00:31:25.560
about the underlying platform.

00:31:25.560 --> 00:31:28.530
Our System On Module,
or SoM, solutions

00:31:28.530 --> 00:31:32.370
allowed them to swap out the
underlying hardware seamlessly

00:31:32.370 --> 00:31:34.980
as we moved from one
prototype kit to the other,

00:31:34.980 --> 00:31:36.780
without affecting that layer.

00:31:36.780 --> 00:31:39.630
And yes, while we needed
it to do a lot of work

00:31:39.630 --> 00:31:42.090
to bring up the SoMs
for smart displays,

00:31:42.090 --> 00:31:44.160
you don't need to
do any of this.

00:31:44.160 --> 00:31:48.660
The smart display SoM will
be ready for your use soon.

00:31:48.660 --> 00:31:50.730
Our update in device
management features

00:31:50.730 --> 00:31:53.160
allowed for fast iterations
and easy maintenance

00:31:53.160 --> 00:31:55.800
of multiple devices
on the field.

00:31:55.800 --> 00:31:59.130
And finally, our
security features

00:31:59.130 --> 00:32:01.530
mean that OEM partners
and users don't

00:32:01.530 --> 00:32:06.031
have to worry about the
security of these devices.

00:32:06.031 --> 00:32:08.530
ROBERT GINDA: So we have a lot
more to show you at I/O. Come

00:32:08.530 --> 00:32:09.946
and see us that
the Android Things

00:32:09.946 --> 00:32:12.410
Sandbox Dome, which you can
see on the left side of the map

00:32:12.410 --> 00:32:12.910
here.

00:32:12.910 --> 00:32:16.060
The entire dome is filled
with Android Things demos,

00:32:16.060 --> 00:32:17.920
and it's open after
hours as well.

00:32:17.920 --> 00:32:20.710
You can see how we leverage
machine learning, Firebase,

00:32:20.710 --> 00:32:22.220
and the cloud platform.

00:32:22.220 --> 00:32:23.830
And you can also
have an up-close look

00:32:23.830 --> 00:32:25.540
at the prototypes
and the devices

00:32:25.540 --> 00:32:27.264
that we talked about here today.

00:32:27.264 --> 00:32:28.930
By the way, you'll
notice Android Things

00:32:28.930 --> 00:32:31.880
powered devices outside of
the Sandbox Dome as well.

00:32:31.880 --> 00:32:33.700
There are survey
boxes all around I/O

00:32:33.700 --> 00:32:35.710
that are built on
top of Android Things

00:32:35.710 --> 00:32:37.900
and a large human-sized
robot roaming around,

00:32:37.900 --> 00:32:39.880
ready to take a selfie with you.

00:32:39.880 --> 00:32:42.130
So you can come to
our code labs as well,

00:32:42.130 --> 00:32:44.500
shown sort of in the
middle area of this map.

00:32:44.500 --> 00:32:47.080
We have code labs showing
how to work with TensorFlow,

00:32:47.080 --> 00:32:49.450
how to work with
cloud IoT, and how

00:32:49.450 --> 00:32:53.460
we made the survey boxes that
are around I/O, and even more.

00:32:53.460 --> 00:32:55.930
There's seven more sessions
on Android Things coming up

00:32:55.930 --> 00:32:58.480
today and tomorrow that
go even deeper into some

00:32:58.480 --> 00:33:00.230
of these topics.

00:33:00.230 --> 00:33:03.430
Finally, have some fun at I/O.
We have a scavenger hunt going

00:33:03.430 --> 00:33:07.187
on, shown at the link
here g.co/iosearch.

00:33:07.187 --> 00:33:08.770
I won't give away
too much, but you'll

00:33:08.770 --> 00:33:11.740
run into some machine learning
enhanced flowers, which

00:33:11.740 --> 00:33:12.640
are pretty cool.

00:33:12.640 --> 00:33:14.620
And if you solve all the
puzzles and make it to the end,

00:33:14.620 --> 00:33:16.494
then you'll get a piece
of developer hardware

00:33:16.494 --> 00:33:18.010
to take home for yourself.

00:33:18.010 --> 00:33:20.620
With that, I'd like to invite
you to go build some hardware.

00:33:20.620 --> 00:33:23.036
And I hope that we're leaving
you with some new confidence

00:33:23.036 --> 00:33:25.480
that you too can build a
device with Android Things.

00:33:25.480 --> 00:33:28.360
Go to the link mentioned
here to get started today.

00:33:28.360 --> 00:33:28.960
Thank you.

00:33:28.960 --> 00:33:31.710
[MUSIC PLAYING]

