WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.290
[MUSIC PLAYING]

00:00:02.669 --> 00:00:04.960
IAN NI-LEWIS: If you develop
Android with Lint warnings

00:00:04.960 --> 00:00:06.860
turned on, you've
probably seen at least one

00:00:06.860 --> 00:00:08.610
or two warnings
about allocations

00:00:08.610 --> 00:00:10.050
in drawing routines.

00:00:10.050 --> 00:00:11.100
Why is that?

00:00:11.100 --> 00:00:13.930
I mean, everybody knows that
allocations have a cost,

00:00:13.930 --> 00:00:16.570
but why be so worried about
draw time allocations,

00:00:16.570 --> 00:00:17.550
in particular?

00:00:17.550 --> 00:00:19.267
What makes them so special?

00:00:19.267 --> 00:00:20.850
My name is Ian
Ni-Lewis, and I'm going

00:00:20.850 --> 00:00:23.910
to show you what makes
onDraw allocations different

00:00:23.910 --> 00:00:26.160
and why you should be
worried about them.

00:00:26.160 --> 00:00:27.880
First, let's state the obvious.

00:00:27.880 --> 00:00:31.330
onDraw runs on the UI
thread, and any extra work

00:00:31.330 --> 00:00:33.100
on the UI thread is bad.

00:00:33.100 --> 00:00:35.560
Now, allocations are cheap,
but they're not free,

00:00:35.560 --> 00:00:37.420
and there's always
a small chance

00:00:37.420 --> 00:00:39.920
that an allocation is
going to block, especially

00:00:39.920 --> 00:00:41.435
when you're low on memory.

00:00:41.435 --> 00:00:44.210
Now, calling a blocking
method from the UI thread

00:00:44.210 --> 00:00:45.940
is a terrible idea.

00:00:45.940 --> 00:00:48.460
But that applies to any method
that runs on the UI thread,

00:00:48.460 --> 00:00:48.960
right?

00:00:48.960 --> 00:00:51.770
Message handlers, lifecycle
methods, you name it.

00:00:51.770 --> 00:00:53.940
Why is onDraw different?

00:00:53.940 --> 00:00:56.690
Well, for one, there's
the sheer number of times

00:00:56.690 --> 00:00:58.540
that onDraw gets called.

00:00:58.540 --> 00:01:01.460
But we want it to be called
at least 60 times per second,

00:01:01.460 --> 00:01:02.135
right?

00:01:02.135 --> 00:01:03.510
So the cost of
any work in onDraw

00:01:03.510 --> 00:01:06.110
is going to be magnified
by that frequency.

00:01:06.110 --> 00:01:09.000
But allocations are
especially problematic.

00:01:09.000 --> 00:01:11.090
You see, a high
rate of allocations

00:01:11.090 --> 00:01:12.480
is going to lead
to memory churn,

00:01:12.480 --> 00:01:15.790
and that leads to more time
spent in garbage collection.

00:01:15.790 --> 00:01:19.780
That's insidious because GC
costs usually don't show up

00:01:19.780 --> 00:01:21.560
at the allocation site.

00:01:21.560 --> 00:01:23.640
In fact, newer
garbage collectors

00:01:23.640 --> 00:01:25.370
are so good at running
in the background

00:01:25.370 --> 00:01:28.530
that you might never see
a GC-related frame drop.

00:01:28.530 --> 00:01:31.750
Instead, all of those
onDraw allocations

00:01:31.750 --> 00:01:34.290
are being reclaimed
on a different thread.

00:01:34.290 --> 00:01:36.990
They're probably on a
different CPU core just

00:01:36.990 --> 00:01:39.770
stealing cycles from all
the non-UI parts of your app

00:01:39.770 --> 00:01:41.960
and eating up your
user's battery.

00:01:41.960 --> 00:01:44.580
Now, all that is bad
enough, but it gets worse.

00:01:44.580 --> 00:01:46.370
Think about the
kind of allocations

00:01:46.370 --> 00:01:49.610
you typically make in onDraw--
drawing objects, right?

00:01:49.610 --> 00:01:52.570
Things like paint, path,
typeface, you get the idea.

00:01:52.570 --> 00:01:54.870
Now, what these classes
have in common is

00:01:54.870 --> 00:01:57.690
they're all wrappers
around native objects.

00:01:57.690 --> 00:02:01.220
And see, Android's 2D drawing
system depends on a library

00:02:01.220 --> 00:02:04.960
called Skia, and Skia
is written in C++.

00:02:04.960 --> 00:02:07.580
Now, a lot of the classes
in android.graphics actually

00:02:07.580 --> 00:02:11.030
aren't much more than wrappers
around native C++ objects.

00:02:11.030 --> 00:02:14.640
And C++ objects
have Destructors.

00:02:14.640 --> 00:02:17.470
You have to explicitly call
the Destructor before you can

00:02:17.470 --> 00:02:19.390
reclaim the object's memory.

00:02:19.390 --> 00:02:21.460
Now, that means
running Finalizers,

00:02:21.460 --> 00:02:24.520
and that's never
good for performance.

00:02:24.520 --> 00:02:27.160
And the Destructors have to
synchronize on the native heap

00:02:27.160 --> 00:02:29.249
lock, among other
things, so there's always

00:02:29.249 --> 00:02:31.790
the chance that they're going
to block the UI thread for long

00:02:31.790 --> 00:02:33.300
enough to drop a frame.

00:02:33.300 --> 00:02:36.100
In other words, constantly
creating and abandoning

00:02:36.100 --> 00:02:38.934
graphics objects is essentially
like telling the system

00:02:38.934 --> 00:02:40.975
that you'd really like
your app to be interrupted

00:02:40.975 --> 00:02:44.490
at unpredictable intervals for
an unspecified length of time.

00:02:44.490 --> 00:02:45.910
So do yourself a favor.

00:02:45.910 --> 00:02:49.560
Move all of those
allocations out of onDraw.

00:02:49.560 --> 00:02:52.560
The refactoring tools in
Android Studio make this easy.

00:02:52.560 --> 00:02:55.210
See, you use Extract Field
to move those objects out

00:02:55.210 --> 00:02:57.570
of onDraw and into the
main body of the class that

00:02:57.570 --> 00:02:58.680
can be reused.

00:02:58.680 --> 00:03:01.090
Now, if possible, make
those fields static.

00:03:01.090 --> 00:03:02.740
That way, you can
reuse the objects

00:03:02.740 --> 00:03:05.260
between multiple
instances of your class.

00:03:05.260 --> 00:03:07.180
That's especially a
good move if your view

00:03:07.180 --> 00:03:09.710
is used in a list item
because in that case,

00:03:09.710 --> 00:03:11.864
it's going to be
created multiple times.

00:03:11.864 --> 00:03:13.780
Now, you might even
consider moving the fields

00:03:13.780 --> 00:03:15.070
into Package Scope.

00:03:15.070 --> 00:03:18.100
That way you can share them
between multiple views.

00:03:18.100 --> 00:03:20.860
Moving allocations out
of onDraw is a simple way

00:03:20.860 --> 00:03:23.520
to make a positive change
in your app's performance.

00:03:23.520 --> 00:03:26.970
It's quick, and it's
easy, and it almost always

00:03:26.970 --> 00:03:28.400
makes a difference.

00:03:28.400 --> 00:03:30.239
Of course, it's not magic.

00:03:30.239 --> 00:03:32.530
Like most performance patterns,
moving your allocations

00:03:32.530 --> 00:03:35.476
won't make your app buttery
smooth all by itself.

00:03:35.476 --> 00:03:37.600
And that's exactly why you
should visit the Android

00:03:37.600 --> 00:03:40.290
Performance Patterns homepage
and get more great tips

00:03:40.290 --> 00:03:41.290
and tricks.

00:03:41.290 --> 00:03:43.350
And don't forget to
join our Google+ group.

00:03:43.350 --> 00:03:46.620
And remember, keep
calm, profile your code,

00:03:46.620 --> 00:03:48.720
and as always, perf matters.

00:03:48.720 --> 00:03:53.570
[MUSIC PLAYING]

