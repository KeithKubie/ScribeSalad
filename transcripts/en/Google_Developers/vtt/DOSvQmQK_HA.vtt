WEBVTT
Kind: captions
Language: en

00:00:09.660 --> 00:00:11.120
ALI AFSHAR: Hello, everyone.

00:00:11.120 --> 00:00:13.730
Welcome to Google
Developers Live.

00:00:13.730 --> 00:00:16.270
Today we're going to be talking
about searching for

00:00:16.270 --> 00:00:19.620
files using the Google
Drive API.

00:00:19.620 --> 00:00:22.336
Now, Google, obviously
we do search.

00:00:22.336 --> 00:00:24.400
Hopefully we do it well.

00:00:24.400 --> 00:00:26.390
That's no exception
with Google Drive.

00:00:26.390 --> 00:00:29.650
So I'm just going to open my
Google Drive now and show you

00:00:29.650 --> 00:00:31.290
what it looks like
for the user.

00:00:31.290 --> 00:00:33.260
And then we'll do that for a
couple of minutes, and then

00:00:33.260 --> 00:00:35.740
we'll go on to how it is
for the developer.

00:00:35.740 --> 00:00:40.290
So I've pre-created a couple
of files here--

00:00:40.290 --> 00:00:42.830
Fruits and vegetables and
fruitsandvegetables.pdf.

00:00:42.830 --> 00:00:44.590
Let's have a look
at one of them.

00:00:44.590 --> 00:00:47.230
So the first one is just a
list of some fruits and

00:00:47.230 --> 00:00:47.820
vegetables.

00:00:47.820 --> 00:00:49.270
I'm want you to notice
a couple of things.

00:00:49.270 --> 00:00:50.850
The first one is the title.

00:00:50.850 --> 00:00:52.010
Is fruits and vegetables.

00:00:52.010 --> 00:00:53.690
And secondly, there's a list--

00:00:53.690 --> 00:00:57.250
banana, apple, orange, pair,
lemon, mango, cucumber.

00:00:57.250 --> 00:01:01.150
Now, what I did earlier is I
exported this file as a PDF,

00:01:01.150 --> 00:01:02.900
except it's not the
whole file.

00:01:02.900 --> 00:01:06.350
I created just five fruits
in there first and

00:01:06.350 --> 00:01:07.500
then exported that.

00:01:07.500 --> 00:01:11.190
So this is actually a PDF also
in Google Drive, and this has

00:01:11.190 --> 00:01:13.640
only got banana, apple, orange,
pair, lemon, and it's

00:01:13.640 --> 00:01:16.740
got a similar kind
of title, OK?

00:01:16.740 --> 00:01:23.000
So if I go to Google Drive, and
if I search for banana, I

00:01:23.000 --> 00:01:24.120
find lots of stuff.

00:01:24.120 --> 00:01:26.000
Actually, I like bananas.

00:01:26.000 --> 00:01:28.240
But one of them is this--

00:01:28.240 --> 00:01:29.630
fruitsandvegetables.pdf.

00:01:29.630 --> 00:01:31.030
We see we opened that.

00:01:31.030 --> 00:01:34.680
So interesting to see, Google
Drive has scanned that PDF,

00:01:34.680 --> 00:01:37.940
and it knows the content, so
that when you type one of the

00:01:37.940 --> 00:01:41.590
textual content in this binary
file, it looks it up for you,

00:01:41.590 --> 00:01:42.340
and it finds it.

00:01:42.340 --> 00:01:44.430
So that's great, and it found
our other one as well.

00:01:44.430 --> 00:01:46.590
Here it is--
fruitsandvegetables.

00:01:46.590 --> 00:01:50.920
OK, now if I just search for one
of the terms that's only

00:01:50.920 --> 00:01:54.390
in the Google Doc, not in the
PDF, so that's going to be

00:01:54.390 --> 00:02:00.200
cucumber here, we see we
only get the one file.

00:02:00.200 --> 00:02:01.760
Obviously, that's
how it works.

00:02:01.760 --> 00:02:04.310
So that's the general
flow for the user.

00:02:04.310 --> 00:02:08.419
So Google Drive API aims to be
able to do anything the user

00:02:08.419 --> 00:02:11.510
can do in Google Drive and
be able to do it via a

00:02:11.510 --> 00:02:14.230
programmatic interface,
the Google Drive API.

00:02:14.230 --> 00:02:19.280
So let's switch immediately to
our Python shell, and let's

00:02:19.280 --> 00:02:20.680
have a try on that.

00:02:20.680 --> 00:02:22.400
So this is bPython.

00:02:22.400 --> 00:02:25.050
I've got the Python client
library installed, and I've

00:02:25.050 --> 00:02:29.300
got an authorized HTTP instance
ready to be imported.

00:02:29.300 --> 00:02:31.160
That's just saving us a couple
of minutes of time.

00:02:31.160 --> 00:02:38.140
So the first thing we're going
to do is import the HTTP

00:02:38.140 --> 00:02:40.050
instance called authorization.

00:02:40.050 --> 00:02:43.090
That's in my library called Auth
that I can share with you

00:02:43.090 --> 00:02:45.150
if anyone's interested.

00:02:45.150 --> 00:02:47.010
Secondly, I want to create
a Drive instance.

00:02:47.010 --> 00:02:48.960
This is standard for you all.

00:02:48.960 --> 00:02:50.415
Let's import from
apiclient.discovery.

00:02:53.250 --> 00:02:57.470
Import Build and Drive,
which is going

00:02:57.470 --> 00:02:58.640
to our Drive service--

00:02:58.640 --> 00:03:03.650
Drive equals build, then the
name of the API, and the

00:03:03.650 --> 00:03:04.610
version of the API.

00:03:04.610 --> 00:03:07.580
This goes off to the discovery
service, finds the schema for

00:03:07.580 --> 00:03:11.900
this API, and builds a service
dynamically in Python

00:03:11.900 --> 00:03:12.590
that can use that.

00:03:12.590 --> 00:03:15.640
And let's not forget to use our
authorized HTTP instance

00:03:15.640 --> 00:03:18.080
so we don't need to parse that
ever time on every call.

00:03:18.080 --> 00:03:19.880
So let's create that,
and let's make

00:03:19.880 --> 00:03:20.760
sure we've got something.

00:03:20.760 --> 00:03:22.840
So Drive, there it is.

00:03:22.840 --> 00:03:27.420
Now, when you want to search
files in the Google Drive API,

00:03:27.420 --> 00:03:30.880
you can apply a query
to any list

00:03:30.880 --> 00:03:32.200
operation involving files.

00:03:32.200 --> 00:03:37.460
So that's really files.list,
or children.list, you can

00:03:37.460 --> 00:03:38.300
apply these queries.

00:03:38.300 --> 00:03:40.980
We're just going to use
files.list for now, and we're

00:03:40.980 --> 00:03:42.300
going to create some
queries to see.

00:03:42.300 --> 00:03:47.060
So the first one I'd like
to do is the basic query

00:03:47.060 --> 00:03:47.770
that we just did.

00:03:47.770 --> 00:03:51.000
So we're going to search for
banana, or apple, or something

00:03:51.000 --> 00:03:54.140
like this, so drive.files.list.

00:03:57.940 --> 00:04:00.120
So we could just run that for
now, and that would just list

00:04:00.120 --> 00:04:00.830
all of them.

00:04:00.830 --> 00:04:07.100
But by passing the queue
parameter is a query created

00:04:07.100 --> 00:04:09.520
by whatever parameters
you want.

00:04:09.520 --> 00:04:12.150
Let's just have a quick look
at these parameters in our

00:04:12.150 --> 00:04:13.700
documentation.

00:04:13.700 --> 00:04:15.310
So these are the fields
available--

00:04:15.310 --> 00:04:18.649
Title, Full Text, MIME Type,
Modified Date, Last Viewed By

00:04:18.649 --> 00:04:20.810
Me Date, Trash, Start,
Hidden, Parent.

00:04:20.810 --> 00:04:23.140
So all of these you can see
them, and that's in our

00:04:23.140 --> 00:04:24.200
documentation--

00:04:24.200 --> 00:04:27.510
developers.google.com/drive--

00:04:27.510 --> 00:04:29.930
and under the tag of
search parameters.

00:04:29.930 --> 00:04:31.770
That's where you
can find that.

00:04:31.770 --> 00:04:32.890
So we have these parameters.

00:04:32.890 --> 00:04:36.090
We also have some operators,
depending on how you want to

00:04:36.090 --> 00:04:39.680
apply it-- "in" for collections,
"contains" for

00:04:39.680 --> 00:04:42.190
strings within others strings.
"Equals," obviously, is

00:04:42.190 --> 00:04:45.640
equality, "less than" and
"greater than" for dates.

00:04:45.640 --> 00:04:48.920
And you can combine these terms
with "and" and you can

00:04:48.920 --> 00:04:52.600
negate these terms with "not."
So that's pretty much whatever

00:04:52.600 --> 00:04:53.820
you want to do.

00:04:53.820 --> 00:04:55.670
So back to the shell.

00:04:55.670 --> 00:04:58.540
So we want to say, OK,
we want fruit in

00:04:58.540 --> 00:05:01.240
the title, for example.

00:05:01.240 --> 00:05:03.680
I'm going to use double quotes
here, because the query

00:05:03.680 --> 00:05:05.610
language uses single quotes.

00:05:05.610 --> 00:05:11.610
So fruit, and the field
title contains fruit.

00:05:11.610 --> 00:05:13.340
How about that?

00:05:13.340 --> 00:05:18.210
So we'll do that, and we'll
execute it, and we

00:05:18.210 --> 00:05:19.430
see loads of stuff.

00:05:19.430 --> 00:05:21.840
OK, so this just shows us that
we've found a search.

00:05:21.840 --> 00:05:23.160
It's not an empty result.

00:05:23.160 --> 00:05:25.130
So what I'm going to do now is
I'm going to write a quick

00:05:25.130 --> 00:05:27.880
function to be able to run these
queries and return us

00:05:27.880 --> 00:05:30.810
more useful information
that fits on a page.

00:05:30.810 --> 00:05:34.540
So we're going to call it
"execute query," and it's

00:05:34.540 --> 00:05:36.970
going to take a query that we'll
call "q." That will be a

00:05:36.970 --> 00:05:39.340
string that's parsed in.

00:05:39.340 --> 00:05:40.590
And what's it going to do?

00:05:40.590 --> 00:05:42.010
Well, let's have a look.

00:05:42.010 --> 00:05:45.055
Items equals drive.files.list.

00:05:48.810 --> 00:05:51.930
q equals q.execute.

00:05:51.930 --> 00:05:53.770
Let's graph the items deck.

00:05:53.770 --> 00:05:58.930
There will be a list of items
that have been returned.

00:05:58.930 --> 00:06:02.650
And then let's just print
the length of that.

00:06:02.650 --> 00:06:05.150
We don't really want to see all
the individual items, so

00:06:05.150 --> 00:06:07.720
print length.

00:06:07.720 --> 00:06:09.750
Results found.

00:06:09.750 --> 00:06:13.330
And a full stop to be good.

00:06:13.330 --> 00:06:15.010
And let's just test that out.

00:06:15.010 --> 00:06:21.290
So execute query, and let's
do the same one.

00:06:21.290 --> 00:06:26.330
So fruit, title contains
fruit.

00:06:26.330 --> 00:06:28.280
Title contains fruit.

00:06:30.932 --> 00:06:32.230
Here's where it doesn't work.

00:06:32.230 --> 00:06:33.360
There we go, two
results found.

00:06:33.360 --> 00:06:35.580
So those are our two files,
and that's great.

00:06:35.580 --> 00:06:37.190
So let's play about with that.

00:06:37.190 --> 00:06:38.320
So we have title.

00:06:38.320 --> 00:06:41.540
Title here is the field that
we're going to be looking for.

00:06:41.540 --> 00:06:45.370
So if you want to search within
the full text, you just

00:06:45.370 --> 00:06:47.890
say full text equals fruit.

00:06:47.890 --> 00:06:50.220
And full text obviously includes
the title and the

00:06:50.220 --> 00:06:52.570
body of the file itself.

00:06:52.570 --> 00:06:53.900
So we found our two results.

00:06:53.900 --> 00:06:58.220
Now, let's do the query for a
type of fruit that we know is

00:06:58.220 --> 00:06:58.910
in the body.

00:06:58.910 --> 00:07:03.000
So let's try banana, and we know
there are more results.

00:07:03.000 --> 00:07:03.630
There were eight.

00:07:03.630 --> 00:07:06.210
Remember, we found the those
eight results earlier.

00:07:06.210 --> 00:07:10.150
And let's do a mango that
is only in the doc,

00:07:10.150 --> 00:07:12.670
and not in the PDF.

00:07:12.670 --> 00:07:13.480
And there you go.

00:07:13.480 --> 00:07:14.700
It's only in one result found.

00:07:14.700 --> 00:07:17.130
So what I really want to
show you here is that

00:07:17.130 --> 00:07:18.430
it's treating PDFs--

00:07:18.430 --> 00:07:20.480
and it does the same for images
that have text in them.

00:07:20.480 --> 00:07:22.950
It's treating them as if they're
plain text files or

00:07:22.950 --> 00:07:24.670
text files that can
be indexed.

00:07:24.670 --> 00:07:26.170
Massively useful.

00:07:26.170 --> 00:07:30.300
Essentially doing OCR on your
stuff and being able to return

00:07:30.300 --> 00:07:32.340
the results with the queries
that you provide.

00:07:32.340 --> 00:07:33.940
So that's that one.

00:07:33.940 --> 00:07:36.490
And there are other
query parameters.

00:07:36.490 --> 00:07:38.900
So we're going to do a few, and
we're going to show you a

00:07:38.900 --> 00:07:39.680
few more operators.

00:07:39.680 --> 00:07:41.570
So MIME type, that's
a pretty cool one.

00:07:41.570 --> 00:07:43.190
So you can query by MIME type.

00:07:43.190 --> 00:07:45.575
I just want mime type equals--

00:07:45.575 --> 00:07:50.180
and let's think of an easy one
to type-- application PDF.

00:07:50.180 --> 00:07:52.590
This is all the PDFs
in my Google Drive.

00:07:52.590 --> 00:07:55.120
That's 22 results.

00:07:55.120 --> 00:07:56.210
It's pretty great.

00:07:56.210 --> 00:07:58.560
Another thing we can
do is we can look

00:07:58.560 --> 00:08:01.140
at the parent hierarchy.

00:08:01.140 --> 00:08:03.940
So I can say I want files
that are only

00:08:03.940 --> 00:08:07.110
within a certain directory.

00:08:07.110 --> 00:08:11.930
So let's do another
query here.

00:08:11.930 --> 00:08:14.880
Let's say I want files that
are in the root directory.

00:08:14.880 --> 00:08:20.580
Now, root is a special alias for
the base directory in your

00:08:20.580 --> 00:08:21.350
Google Drive.

00:08:21.350 --> 00:08:24.310
And so this means files that
are in that are not in any

00:08:24.310 --> 00:08:25.280
other folders.

00:08:25.280 --> 00:08:31.410
So root in parents, and
we've got six results.

00:08:31.410 --> 00:08:38.090
So if we go back to Google
Drive, we can see that there

00:08:38.090 --> 00:08:38.789
are others there.

00:08:38.789 --> 00:08:41.240
So it's looking at these four
and a couple of others that

00:08:41.240 --> 00:08:42.891
I've hidden away.

00:08:42.891 --> 00:08:44.030
So that's that.

00:08:44.030 --> 00:08:45.880
So that's the parents.

00:08:45.880 --> 00:08:51.140
And again, we can look at in
children, which looks at which

00:08:51.140 --> 00:08:53.500
files are children
of the folder.

00:08:53.500 --> 00:08:56.130
So we have that case covered.

00:08:56.130 --> 00:08:57.910
Combining these, that's
pretty cool.

00:08:57.910 --> 00:08:59.830
You can combine these as well.

00:08:59.830 --> 00:09:07.770
So you can say root in parents
and full text contains mango.

00:09:07.770 --> 00:09:10.680
That should return one result,
and it has done that.

00:09:10.680 --> 00:09:12.540
So this is looking for files
that are in the root

00:09:12.540 --> 00:09:14.960
directory, and the full
text contains mango.

00:09:14.960 --> 00:09:16.800
And you can just
combine these.

00:09:16.800 --> 00:09:20.920
So let's see, and not full
text contains mango.

00:09:20.920 --> 00:09:24.340
So this wants stuff in the
directory that is not

00:09:24.340 --> 00:09:26.340
containing the word mango.

00:09:26.340 --> 00:09:30.770
And we see the six
files there.

00:09:30.770 --> 00:09:34.120
So using this, you can combine
these search queries.

00:09:34.120 --> 00:09:36.750
We also have a few little tweaks
here and there that

00:09:36.750 --> 00:09:39.400
we've added to make the
stuff more useful.

00:09:39.400 --> 00:09:43.130
One thing we just launched
yesterday, actually, is a

00:09:43.130 --> 00:09:46.140
query that people have been
asking for on Stack Overflow,

00:09:46.140 --> 00:09:47.200
and personally I
think something

00:09:47.200 --> 00:09:48.800
that's very, very useful.

00:09:48.800 --> 00:09:50.240
It's called Shared with Me.

00:09:50.240 --> 00:09:52.820
So that's the complete query
is you just execute "shared

00:09:52.820 --> 00:09:53.450
with me."

00:09:53.450 --> 00:09:57.470
And that returns files in the
Google Drive that have been

00:09:57.470 --> 00:09:58.590
shared with me.

00:09:58.590 --> 00:10:00.920
If you wanted to do that query
otherwise, you'd have to say,

00:10:00.920 --> 00:10:05.540
well, I'm not the owner of the
file, but I am in the readers,

00:10:05.540 --> 00:10:07.650
or I am in the writers,
something like that.

00:10:07.650 --> 00:10:10.220
You'd have to create that query,
and it's not exactly

00:10:10.220 --> 00:10:11.640
perfect, and people have
been having trouble.

00:10:11.640 --> 00:10:13.160
So we've just launched this--

00:10:13.160 --> 00:10:14.700
Shared with Me--

00:10:14.700 --> 00:10:16.360
and that returns those
28 results.

00:10:16.360 --> 00:10:18.730
Really, really useful if you
want to separate what your

00:10:18.730 --> 00:10:23.400
files are and what someone
else's files are, which leads

00:10:23.400 --> 00:10:29.660
me to searching for permissions
on files.

00:10:29.660 --> 00:10:33.090
So you can say I want files
where I am a writer.

00:10:33.090 --> 00:10:37.170
So you would say me, and that
is another alias for my

00:10:37.170 --> 00:10:43.890
username, but I can just
aafshar@gmail.com in writers.

00:10:43.890 --> 00:10:46.420
So these are files that I
can write to, I have the

00:10:46.420 --> 00:10:47.570
permission to write to.

00:10:47.570 --> 00:10:50.530
And then we get 99 results.

00:10:50.530 --> 00:10:51.550
Actually, it's bigger
than that.

00:10:51.550 --> 00:10:53.040
99 is the page size.

00:10:53.040 --> 00:10:55.530
So if you wanted the next set
of pages, you'd do that.

00:10:55.530 --> 00:10:57.040
And these files are
all my images.

00:10:57.040 --> 00:10:59.800
I have thousands of images in
my Google Drive photographs.

00:10:59.800 --> 00:11:02.290
So this is just looking
at them.

00:11:02.290 --> 00:11:05.350
Again, if I do readers, we
should again get 99 results.

00:11:05.350 --> 00:11:07.500
That's all the files
I can read.

00:11:07.500 --> 00:11:09.090
And the last one is owners.

00:11:12.630 --> 00:11:15.650
OK And that's going to take a
bigger query, and it's taking

00:11:15.650 --> 00:11:17.190
a bit of time.

00:11:17.190 --> 00:11:18.450
100 results found.

00:11:18.450 --> 00:11:23.270
So let's combine this query
with the "shared with me"

00:11:23.270 --> 00:11:24.390
query to see what happens.

00:11:24.390 --> 00:11:28.250
So this is files which are
shared with me, and

00:11:28.250 --> 00:11:29.550
I'm an owner of.

00:11:29.550 --> 00:11:30.440
It's quite an interesting
case.

00:11:30.440 --> 00:11:32.460
It means someone has shared
me the file and made me

00:11:32.460 --> 00:11:34.100
the owner of it.

00:11:34.100 --> 00:11:35.380
Zero results.

00:11:35.380 --> 00:11:37.055
It's not going to happen very
often that someone shares you

00:11:37.055 --> 00:11:38.680
a file and makes you an owner.

00:11:38.680 --> 00:11:41.420
It's more likely they'll share
the file, allow you to write

00:11:41.420 --> 00:11:44.770
or comment on it, and will
read it, but maintain

00:11:44.770 --> 00:11:48.130
ownership in it for
themselves.

00:11:48.130 --> 00:11:49.180
So that's searching.

00:11:49.180 --> 00:11:52.390
As I say, we've got
documentation here.

00:11:52.390 --> 00:11:55.740
We have a number of examples
that I encourage you to try.

00:11:55.740 --> 00:11:58.930
Title equals hello, MIME
type we showed you.

00:11:58.930 --> 00:12:02.510
Title contains, negation,
we showed you.

00:12:02.510 --> 00:12:06.135
Using the full text, which is
the body and the description,

00:12:06.135 --> 00:12:08.930
and the title.

00:12:08.930 --> 00:12:12.270
We showed you how to search
by permission, as in using

00:12:12.270 --> 00:12:14.910
in-writers, in-readers.

00:12:14.910 --> 00:12:18.630
We showed you how to test for
the parent hierarchy, as in

00:12:18.630 --> 00:12:20.630
using the in-parents query.

00:12:20.630 --> 00:12:23.210
We showed you how to combine
queries together using the

00:12:23.210 --> 00:12:27.360
"and" operator, and we showed
you how to negate queries with

00:12:27.360 --> 00:12:28.500
the "not" operator.

00:12:28.500 --> 00:12:31.380
I see at the end we've got just
one more query, which is

00:12:31.380 --> 00:12:33.110
the date style queries.

00:12:33.110 --> 00:12:35.820
And that's where you can use
greater than, less than,

00:12:35.820 --> 00:12:39.910
greater than or equal to to
specify what the relationship

00:12:39.910 --> 00:12:40.630
is with the date.

00:12:40.630 --> 00:12:44.030
So greater than a date
means after a date.

00:12:44.030 --> 00:12:45.800
It kind of makes sense.

00:12:45.800 --> 00:12:48.160
So, hang on.

00:12:48.160 --> 00:12:52.150
Let's just copy paste that
query and run it.

00:12:52.150 --> 00:12:53.493
Execute query.

00:12:56.400 --> 00:12:58.450
Oops.

00:12:58.450 --> 00:13:01.580
So this is going to look for
files with a modified date

00:13:01.580 --> 00:13:06.160
after the fourth and the
sixth of this year.

00:13:06.160 --> 00:13:07.280
And that's going to be a lot--

00:13:07.280 --> 00:13:08.795
100 results found.

00:13:08.795 --> 00:13:11.400
Let's find files that are
modified before then.

00:13:11.400 --> 00:13:13.360
And that might be
zero, actually.

00:13:13.360 --> 00:13:15.640
I think I cleaned out
my Google Drive.

00:13:15.640 --> 00:13:16.180
Oh, no.

00:13:16.180 --> 00:13:17.470
That's more as well.

00:13:17.470 --> 00:13:20.350
So I do have some old files
and some new files.

00:13:20.350 --> 00:13:23.810
Let's put an earlier
date in here, so we

00:13:23.810 --> 00:13:25.000
can kind of get this.

00:13:25.000 --> 00:13:26.620
I don't know, 2007.

00:13:26.620 --> 00:13:27.190
There you go.

00:13:27.190 --> 00:13:32.440
So no files in my Drive were
modified before then.

00:13:32.440 --> 00:13:34.650
As usual, we're keen to get you
up and running on this.

00:13:34.650 --> 00:13:37.660
If you find something you want
to search for but you can't do

00:13:37.660 --> 00:13:41.040
immediately, if you find that
any particular queries are

00:13:41.040 --> 00:13:44.030
slow, these are things we really
need to know about.

00:13:44.030 --> 00:13:45.310
So please let us know.

00:13:45.310 --> 00:13:46.890
Let us know on Stack Overflow.

00:13:46.890 --> 00:13:47.800
I'm always available.

00:13:47.800 --> 00:13:52.450
You can contact me on Google+
or on Gmail, things we

00:13:52.450 --> 00:13:56.340
absolutely, absolutely,
need to know about

00:13:56.340 --> 00:13:59.650
If you find anything good, or
you want something expanded,

00:13:59.650 --> 00:14:01.910
also let us know.

00:14:01.910 --> 00:14:05.090
So that's searching in
the Google Drive API.

00:14:05.090 --> 00:14:06.680
Thank you very much, and
we look forward to

00:14:06.680 --> 00:14:07.930
hearing from you.

00:14:14.640 --> 00:14:32.800
[MUSIC PLAYING]

