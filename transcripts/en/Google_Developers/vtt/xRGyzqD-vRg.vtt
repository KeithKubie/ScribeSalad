WEBVTT
Kind: captions
Language: en

00:00:03.320 --> 00:00:04.610
CLAUDIO CHERUBINO:
Hi everyone.

00:00:04.610 --> 00:00:05.680
My name is Claudio.

00:00:05.680 --> 00:00:06.680
This is Alain.

00:00:06.680 --> 00:00:09.250
We're two engineers in the
Google Drive Developer

00:00:09.250 --> 00:00:10.370
Relations Team.

00:00:10.370 --> 00:00:11.960
Welcome to this talk.

00:00:11.960 --> 00:00:13.250
How's it going so far?

00:00:13.250 --> 00:00:14.826
Well?

00:00:14.826 --> 00:00:16.580
Good.

00:00:16.580 --> 00:00:19.100
We're going to talk about
Drive and Android today.

00:00:19.100 --> 00:00:22.580
And, well, if you've been here
yesterday, you saw a lot of

00:00:22.580 --> 00:00:24.020
things in the keynote
about Android.

00:00:24.020 --> 00:00:25.900
If you've been here today,
you've saw a lot of things

00:00:25.900 --> 00:00:27.320
about Drive today.

00:00:27.320 --> 00:00:29.400
We're trying to put everything
together now.

00:00:29.400 --> 00:00:35.980
So let me start with
a simple question.

00:00:35.980 --> 00:00:39.490
Can you please raise your hand
if you use Google Drive?

00:00:39.490 --> 00:00:42.680
Wow, a lot of you use
Google Drive.

00:00:42.680 --> 00:00:45.110
Can you please keep
your hands up?

00:00:45.110 --> 00:00:45.890
Thank you.

00:00:45.890 --> 00:00:48.330
And then, please, raise
the other hand if

00:00:48.330 --> 00:00:50.280
you also use Android.

00:00:50.280 --> 00:00:52.750
Wow, that's basically
all of you.

00:00:52.750 --> 00:00:56.460
OK, please keep your hands
up during the whole talk.

00:00:56.460 --> 00:00:58.730
Thank you.

00:00:58.730 --> 00:01:01.705
So you probably know
all of this.

00:01:01.705 --> 00:01:05.209
Google Drive is the evolution
of Google Docs.

00:01:05.209 --> 00:01:09.150
We have this product where users
can store their files

00:01:09.150 --> 00:01:11.700
and those files are accessible
everywhere.

00:01:11.700 --> 00:01:13.850
You can store any
kind of files.

00:01:13.850 --> 00:01:16.220
They will be safe
in the Cloud.

00:01:16.220 --> 00:01:19.480
We will take care of making
backups and doing copies of

00:01:19.480 --> 00:01:19.970
your files.

00:01:19.970 --> 00:01:21.320
They will be always safe.

00:01:21.320 --> 00:01:24.310
So it doesn't matter if you have
files on your phone and

00:01:24.310 --> 00:01:25.220
you lose your phone.

00:01:25.220 --> 00:01:27.020
Or you're on your laptop and
you lose your laptop, it

00:01:27.020 --> 00:01:28.890
breaks, hard disk is broken.

00:01:28.890 --> 00:01:29.680
It doesn't matter.

00:01:29.680 --> 00:01:33.510
The files will be there and they
will be safe at any time.

00:01:33.510 --> 00:01:36.430
But Google Drive is
not just storage.

00:01:36.430 --> 00:01:37.680
It's not simply storage.

00:01:37.680 --> 00:01:38.600
You've seen this today.

00:01:38.600 --> 00:01:40.300
There are many applications
in Google Drive.

00:01:40.300 --> 00:01:43.960
And we want you to use Google
Drive to collaborate.

00:01:43.960 --> 00:01:46.150
So you store your files there.

00:01:46.150 --> 00:01:50.100
You can open those files with
many applications, including

00:01:50.100 --> 00:01:52.230
ours, but not only ours.

00:01:52.230 --> 00:01:53.370
And you can collaborate.

00:01:53.370 --> 00:01:55.890
You can share these files
with other users.

00:01:55.890 --> 00:01:59.170
You probably know all of
this, so I'm going

00:01:59.170 --> 00:02:00.850
really quickly on this.

00:02:00.850 --> 00:02:03.030
But I'm going to show you
a single Google Drive.

00:02:03.030 --> 00:02:05.740
And you've seen a lot today
at the keynote.

00:02:05.740 --> 00:02:07.510
So Google Drive, as you've seen

00:02:07.510 --> 00:02:09.870
today, is in your browser.

00:02:09.870 --> 00:02:12.920
It's also offline now, but
that's a new thing.

00:02:12.920 --> 00:02:14.150
Google Drive is in
your browser.

00:02:14.150 --> 00:02:16.340
Google Drive is in
your desktop.

00:02:16.340 --> 00:02:19.420
And Google Drive is on
your mobile device.

00:02:19.420 --> 00:02:22.000
This is a screenshot of Google
Drive on Android.

00:02:22.000 --> 00:02:26.660
Today we released the iOS
version, but in this talk, we

00:02:26.660 --> 00:02:30.240
will cover the Android version
of the application.

00:02:30.240 --> 00:02:34.905
And we will see how you can use
the Google Drive SDK to

00:02:34.905 --> 00:02:37.900
write applications
on Android that

00:02:37.900 --> 00:02:40.110
integrate with Google Drive.

00:02:40.110 --> 00:02:41.600
What is this Google Drive SDK?

00:02:41.600 --> 00:02:42.280
Well, it's an SDK.

00:02:42.280 --> 00:02:44.290
So it's a software
development kit.

00:02:44.290 --> 00:02:47.380
It's a set of libraries, a set
of methods, a set of classes,

00:02:47.380 --> 00:02:50.430
that allow developers to
integrate their own

00:02:50.430 --> 00:02:52.680
applications with
Google Drive.

00:02:52.680 --> 00:02:56.820
Why would you do that
as a developer?

00:02:56.820 --> 00:02:59.140
Well, there are many advantages
in doing so.

00:02:59.140 --> 00:03:03.230
The first one is that as soon
as you integrate your

00:03:03.230 --> 00:03:06.040
application with Drive,
you already have a

00:03:06.040 --> 00:03:08.950
big, big user base.

00:03:08.950 --> 00:03:11.500
There are millions of users
and there are billions of

00:03:11.500 --> 00:03:13.510
files on Google Drive.

00:03:13.510 --> 00:03:17.490
So as soon as your application
lands in Google Drive, you

00:03:17.490 --> 00:03:20.900
have a lot of users that can
see, that can try, that can

00:03:20.900 --> 00:03:22.760
buy your application.

00:03:22.760 --> 00:03:27.300
And that is just the first
advantage that you get by

00:03:27.300 --> 00:03:29.010
using the Google Drive SDK.

00:03:29.010 --> 00:03:32.530
You also get many other
features for free.

00:03:32.530 --> 00:03:33.960
You get sharing.

00:03:33.960 --> 00:03:36.580
You get user identity
management.

00:03:36.580 --> 00:03:38.370
You get collaboration.

00:03:38.370 --> 00:03:44.570
You get the integration with the
Google Drive UI, so that

00:03:44.570 --> 00:03:46.470
users can open files
from there, can

00:03:46.470 --> 00:03:47.740
create files from there.

00:03:47.740 --> 00:03:50.660
You've seen some examples
today at the keynote.

00:03:50.660 --> 00:03:55.840
So in this talk, Alain and I
will show you how to take an

00:03:55.840 --> 00:03:57.320
existing application--

00:03:57.320 --> 00:04:01.710
which is a very simple Android
application that you might

00:04:01.710 --> 00:04:02.670
probably know--

00:04:02.670 --> 00:04:05.890
which is a single notepad
application.

00:04:05.890 --> 00:04:09.200
And that's exactly the first
application that many of you

00:04:09.200 --> 00:04:12.810
have built if you've ever
developed an Android

00:04:12.810 --> 00:04:13.890
application.

00:04:13.890 --> 00:04:18.970
This notepad saves and reads
file from the local database.

00:04:18.970 --> 00:04:24.130
So stores files on the
local file system.

00:04:24.130 --> 00:04:26.880
That's actually using
a SQLite database.

00:04:26.880 --> 00:04:30.130
And we're going to
replace that or

00:04:30.130 --> 00:04:31.750
integrate that with Drive.

00:04:31.750 --> 00:04:35.930
So that the notes will be stored
to Drive, read from

00:04:35.930 --> 00:04:40.604
Drive, and synced with all
the devices you have.

00:04:40.604 --> 00:04:42.320
Does it makes sense so far?

00:04:42.320 --> 00:04:43.020
I hope so.

00:04:43.020 --> 00:04:48.730
So we're going to go
through five steps.

00:04:48.730 --> 00:04:54.500
The first one is about how to
perform authorization on Drive

00:04:54.500 --> 00:04:55.830
and on Android.

00:04:55.830 --> 00:04:59.250
Because there's a specific
story, and we have some news

00:04:59.250 --> 00:05:03.010
today about how to perform
authorization on an Android

00:05:03.010 --> 00:05:04.870
app that uses Drive.

00:05:04.870 --> 00:05:08.980
Once that is done, we will work
on making the application

00:05:08.980 --> 00:05:12.220
asynchronous writing a
Drive Sync Adapter.

00:05:12.220 --> 00:05:14.700
If this is not clear now, don't
worry, we're going to go

00:05:14.700 --> 00:05:16.570
through all of these
steps one by one.

00:05:16.570 --> 00:05:21.000
Actually, Alain is going to go
through the first three steps,

00:05:21.000 --> 00:05:24.870
and then I'll be back here and
talk about integrating with

00:05:24.870 --> 00:05:26.860
the Drive app for Android,
which you

00:05:26.860 --> 00:05:28.480
probably know and tried.

00:05:28.480 --> 00:05:32.220
And finally, we will also give
you some more tips on how to

00:05:32.220 --> 00:05:34.640
optimize your application
for efficiency.

00:05:34.640 --> 00:05:36.230
Remember this is a
mobile scenario.

00:05:36.230 --> 00:05:40.000
So you have to keep in mind
different things then when you

00:05:40.000 --> 00:05:41.600
write an application
for your desktop.

00:05:41.600 --> 00:05:45.140
So let's start with performing
authorization.

00:05:45.140 --> 00:05:45.820
ALAIN VONGSOUVANH: All right.

00:05:45.820 --> 00:05:47.550
Thank you, Claudio.

00:05:47.550 --> 00:05:51.990
So first of all, why do we need
to perform authorization?

00:05:51.990 --> 00:05:54.260
So as Claudio said,
we have great user

00:05:54.260 --> 00:05:55.560
base on Google Drive.

00:05:55.560 --> 00:05:57.835
Millions of users, billions
of files, but the

00:05:57.835 --> 00:05:59.600
files belong to somebody.

00:05:59.600 --> 00:06:03.030
So that's why we need to get a
user account to get started on

00:06:03.030 --> 00:06:04.320
Google Drive.

00:06:04.320 --> 00:06:10.850
So we're going to do that on
Android by using the new

00:06:10.850 --> 00:06:13.950
Google Play Services API that
have been announced today.

00:06:13.950 --> 00:06:16.960
They're not yet available,
but they're coming soon.

00:06:16.960 --> 00:06:20.740
And we need to first start by
getting a user account.

00:06:20.740 --> 00:06:24.802
So I don't know about you, but
on my Android devices I have

00:06:24.802 --> 00:06:25.580
multiple users.

00:06:25.580 --> 00:06:28.870
I have my corporate account,
since I'm a Googler, and I

00:06:28.870 --> 00:06:31.170
also have my multiple
Gmail accounts.

00:06:31.170 --> 00:06:34.780
Well, when you run an
application that requires

00:06:34.780 --> 00:06:38.100
account information it's best if
applications can prompt you

00:06:38.100 --> 00:06:42.500
to choose the user to use
with your applications.

00:06:42.500 --> 00:06:46.980
So we do that by using the new
Account Picker API, which has

00:06:46.980 --> 00:06:50.360
a simple static method called
New Choose Account Intent.

00:06:50.360 --> 00:06:53.280
This returns intent that you
can start from any activity

00:06:53.280 --> 00:06:58.590
you exported to show account
user dialogue that the user

00:06:58.590 --> 00:07:01.260
can pick from.

00:07:01.260 --> 00:07:03.960
So for our application,
we need to run

00:07:03.960 --> 00:07:05.070
from a Google account.

00:07:05.070 --> 00:07:08.380
So we create a new intent.

00:07:08.380 --> 00:07:11.110
We might specify [INAUDIBLE]
account if we saw that in our

00:07:11.110 --> 00:07:12.050
preference.

00:07:12.050 --> 00:07:16.540
And then we specify the account
intent that we want to

00:07:16.540 --> 00:07:18.110
come to Google accounts.

00:07:18.110 --> 00:07:21.792
Then we simply started a new
activity in Android as you

00:07:21.792 --> 00:07:22.870
know how to do it.

00:07:22.870 --> 00:07:27.870
And we specify the request code
the activity has been

00:07:27.870 --> 00:07:30.100
started with.

00:07:30.100 --> 00:07:32.520
Once the user has chosen an
account, so performing an

00:07:32.520 --> 00:07:37.860
action on it, the [INAUDIBLE]

00:07:37.860 --> 00:07:40.550
method would be code
backed by Android.

00:07:40.550 --> 00:07:43.040
We have a request code, so we
need to make sure the request

00:07:43.040 --> 00:07:48.170
code is the one we specified
when we started the intent.

00:07:48.170 --> 00:07:50.270
The resort code is OK.

00:07:50.270 --> 00:07:52.840
So the user actually
chose an account.

00:07:52.840 --> 00:07:56.330
And then we have data.

00:07:56.330 --> 00:08:00.560
Once everything's OK, we get
the account name using the

00:08:00.560 --> 00:08:04.290
data and the aesthetic string
provided in the account

00:08:04.290 --> 00:08:06.470
manager class.

00:08:06.470 --> 00:08:09.080
So how does this look
like on Android?

00:08:09.080 --> 00:08:11.940
There you go.

00:08:11.940 --> 00:08:16.530
We simply used two lines of code
to start a new activity.

00:08:16.530 --> 00:08:20.390
This is a built-in intent
provided by [INAUDIBLE]

00:08:20.390 --> 00:08:21.150
services.

00:08:21.150 --> 00:08:26.450
The user can choose the account
to use, and if the

00:08:26.450 --> 00:08:29.880
account is not there can add
a new google.com account.

00:08:29.880 --> 00:08:31.440
Now that we have an account,
we need to

00:08:31.440 --> 00:08:33.720
authorize it to use Drive.

00:08:33.720 --> 00:08:38.070
The user needs to authorize
applications to get their

00:08:38.070 --> 00:08:40.480
Drive files and work
with them.

00:08:40.480 --> 00:08:44.110
We're going to do that using,
again, one of the new Google

00:08:44.110 --> 00:08:47.230
Play services API called
Google Auth Feature.

00:08:47.230 --> 00:08:51.460
It has a static method called
Get Token, which returns an

00:08:51.460 --> 00:08:54.520
access token if everything
works fine.

00:08:54.520 --> 00:08:57.960
You specify your context on
which the method needs to run,

00:08:57.960 --> 00:09:01.440
the account name for which you
want to get an access token,

00:09:01.440 --> 00:09:03.960
and this code you want
to authorize.

00:09:03.960 --> 00:09:06.740
So in our case, we want to
authorize our application for

00:09:06.740 --> 00:09:07.000
[? OverDrive ?]

00:09:07.000 --> 00:09:07.430
[INAUDIBLE]

00:09:07.430 --> 00:09:08.530
Scope.

00:09:08.530 --> 00:09:11.210
The Drive API has a bunch of
[INAUDIBLE], one of which is

00:09:11.210 --> 00:09:11.810
[INAUDIBLE].

00:09:11.810 --> 00:09:14.760
So you the user can choose
to grant access

00:09:14.760 --> 00:09:18.810
to it's entire directory.

00:09:18.810 --> 00:09:21.780
We don't really recommend that,
because that can be a

00:09:21.780 --> 00:09:22.750
security issue.

00:09:22.750 --> 00:09:26.200
Especially for Google, for
example, we won't grant access

00:09:26.200 --> 00:09:28.840
to our entire directory.

00:09:28.840 --> 00:09:32.470
And for any users, they might
have private files like their

00:09:32.470 --> 00:09:35.230
tax information, et cetera, that
they don't want to grant

00:09:35.230 --> 00:09:37.210
access to for a variety
of application.

00:09:37.210 --> 00:09:40.200
So OverDrive API provided a
[INAUDIBLE] scope called

00:09:40.200 --> 00:09:43.820
Drives [INAUDIBLE] which only
grant access to files that

00:09:43.820 --> 00:09:47.890
have been created by this
application, or specifically

00:09:47.890 --> 00:09:52.555
opened with this application
using the Drive web UI or-- as

00:09:52.555 --> 00:09:54.260
Claudio will explain later--

00:09:54.260 --> 00:09:56.750
using the Android application.

00:09:56.750 --> 00:10:01.590
So we called Get Token hoping
to get access token.

00:10:01.590 --> 00:10:06.270
If you the user never granted
access to your applications,

00:10:06.270 --> 00:10:09.470
it will throw a user recorded
[INAUDIBLE] off exception.

00:10:09.470 --> 00:10:13.170
This exception will contain an
intent, but your activity can

00:10:13.170 --> 00:10:17.150
start to show the user
the [INAUDIBLE].

00:10:17.150 --> 00:10:22.150
So we can allow or deny access
to the applications.

00:10:22.150 --> 00:10:26.230
Get Token needs to be run
outside of a UI thread in a

00:10:26.230 --> 00:10:29.210
sync task or in our simple
applications that we're

00:10:29.210 --> 00:10:35.880
releasing in a Sync Adapter.

00:10:35.880 --> 00:10:41.100
Now, when you start the intent,
this is how the new

00:10:41.100 --> 00:10:42.740
green screen looks like.

00:10:42.740 --> 00:10:44.150
Again, this is a preview.

00:10:44.150 --> 00:10:45.230
It's not yet available.

00:10:45.230 --> 00:10:48.140
It's coming soon in the SDK.

00:10:48.140 --> 00:10:52.280
So here, we can see that
Notepad, our application, is

00:10:52.280 --> 00:10:56.240
requesting access to the Drive
to files that have been

00:10:56.240 --> 00:10:58.400
created by these applications
for the account

00:10:58.400 --> 00:10:59.650
driveservertest@gmail.com.

00:11:02.630 --> 00:11:07.290
So we didn't cover everything,
any corners, on authorization.

00:11:07.290 --> 00:11:10.490
There's a session starting right
after ours, at 5:15,

00:11:10.490 --> 00:11:13.150
from Nayiv called building
applications

00:11:13.150 --> 00:11:14.360
that use web APIs.

00:11:14.360 --> 00:11:19.380
This session would go through
how to register your Android

00:11:19.380 --> 00:11:23.570
application on the API council
so that we know your

00:11:23.570 --> 00:11:27.880
application is authorized
to use the Drive API.

00:11:27.880 --> 00:11:33.740
Any corner cases, like how to
call get token in a sync task,

00:11:33.740 --> 00:11:37.620
it sends us errors if a user
decided not to use an account

00:11:37.620 --> 00:11:40.970
or denied access to
your application.

00:11:40.970 --> 00:11:44.450
And also explains how to cache
expired tokens, because access

00:11:44.450 --> 00:11:48.210
tokens only works for one hour
and needs to be refreshed when

00:11:48.210 --> 00:11:50.610
they get expired.

00:11:50.610 --> 00:11:56.060
So now that we have an account
to work with, we need to

00:11:56.060 --> 00:11:58.270
unblock the UI thread.

00:11:58.270 --> 00:12:02.200
We would go from this, so
this is a nice queue--

00:12:02.200 --> 00:12:03.870
synchronous--

00:12:03.870 --> 00:12:04.780
it's easy to understand.

00:12:04.780 --> 00:12:06.690
When you read [INAUDIBLE]
codes it goes

00:12:06.690 --> 00:12:08.780
like step by step.

00:12:08.780 --> 00:12:12.780
But, wow, it blocks
the UI thread.

00:12:12.780 --> 00:12:16.620
We don't want that, like as we
saw during the keynote, we're

00:12:16.620 --> 00:12:20.310
putting lots of effort into
making every UI looks good and

00:12:20.310 --> 00:12:21.360
not blocked.

00:12:21.360 --> 00:12:22.190
We're [INAUDIBLE]

00:12:22.190 --> 00:12:25.120
for every users that use
Android, and provide

00:12:25.120 --> 00:12:29.020
applications, so we're going to
modify the existing Notepad

00:12:29.020 --> 00:12:32.550
applications coming from a
synchronous application to

00:12:32.550 --> 00:12:34.630
asynchronous applications
like that.

00:12:34.630 --> 00:12:36.060
It's going to be fast.

00:12:36.060 --> 00:12:41.925
Every task will race into a
server, and it will leave the

00:12:41.925 --> 00:12:43.491
UI thread alone.

00:12:43.491 --> 00:12:45.290
How are we going to do that?

00:12:45.290 --> 00:12:51.540
Well, how many of you have ever
seen this screen before?

00:12:51.540 --> 00:12:53.450
Yeah, it's annoying, right?

00:12:53.450 --> 00:12:56.250
Well, we need to take
care of that.

00:12:56.250 --> 00:12:58.340
So why do we see this screen?

00:12:58.340 --> 00:13:03.140
It's because Android will kill
any application that has

00:13:03.140 --> 00:13:05.480
broken the UI thread
for too long.

00:13:05.480 --> 00:13:07.890
The Notepad application is
reading from the database in

00:13:07.890 --> 00:13:11.330
the UI thread, so it's quite
fast, but the methods are

00:13:11.330 --> 00:13:12.300
getting [INAUDIBLE]

00:13:12.300 --> 00:13:14.210
and we need to modify that.

00:13:14.210 --> 00:13:17.930
Also, since we're now
integrating with Drive, we

00:13:17.930 --> 00:13:22.680
can't make the web UPI calls
on the UI thread.

00:13:22.680 --> 00:13:26.580
Because starting from modern
Android, the system will

00:13:26.580 --> 00:13:28.460
simply queue our applications.

00:13:28.460 --> 00:13:31.790
So we have multiple ways to
unblock the UI thread.

00:13:31.790 --> 00:13:34.210
One of which is using
a sync task.

00:13:34.210 --> 00:13:35.940
Another one is using
a regular thread.

00:13:35.940 --> 00:13:39.160
In our case, we're going to
use Sync Adapters because

00:13:39.160 --> 00:13:43.280
we're syncing our local
database with Drive.

00:13:43.280 --> 00:13:46.830
Now in this section, we
cover how to write

00:13:46.830 --> 00:13:49.360
a Drive Sync Adapter.

00:13:49.360 --> 00:13:53.550
A Sync Adapter is composed
of three main components.

00:13:53.550 --> 00:13:56.260
A content provider, so this is
already available in the

00:13:56.260 --> 00:13:57.620
Notepad application.

00:13:57.620 --> 00:14:00.300
We already have a content
provider that helps your

00:14:00.300 --> 00:14:02.800
application talk with
the database.

00:14:02.800 --> 00:14:08.280
And provides helper methods to
insert new data, read data,

00:14:08.280 --> 00:14:10.640
make queries, et cetera.

00:14:10.640 --> 00:14:13.220
We also need a Sync Adapter
service about the application

00:14:13.220 --> 00:14:15.340
we explore.

00:14:15.340 --> 00:14:19.350
And tells Android that this
type of data can be synced

00:14:19.350 --> 00:14:21.910
with a Sync Adapter
using a service.

00:14:21.910 --> 00:14:24.910
And then the main component, the
abstract thread and Sync

00:14:24.910 --> 00:14:29.740
Adapter, which is a main class
we need to implement, will

00:14:29.740 --> 00:14:31.250
contain all the sync logic.

00:14:31.250 --> 00:14:35.370
So we'll sync regularly the
local database with Drive, or

00:14:35.370 --> 00:14:40.040
pull changes from Drive, and
sort them in the database.

00:14:40.040 --> 00:14:42.710
We also added a settings page.

00:14:42.710 --> 00:14:47.690
So that the user can also change
accounts, and choose

00:14:47.690 --> 00:14:53.360
how frequently he wants the
syncs to be performed.

00:14:53.360 --> 00:14:55.810
So let's take a look at
a Drive Sync Service.

00:14:55.810 --> 00:14:57.770
This is a really simple class.

00:14:57.770 --> 00:15:01.260
It looks the same for most sync
service you'll implement

00:15:01.260 --> 00:15:04.000
if you don't have any specific
requirement.

00:15:04.000 --> 00:15:06.820
You just need to override
two method and

00:15:06.820 --> 00:15:08.950
create it an unbind.

00:15:08.950 --> 00:15:12.210
So uncreate is called by Android
when a new service

00:15:12.210 --> 00:15:14.360
needs to be instantiated.

00:15:14.360 --> 00:15:19.780
And unbind is called by Android
when a new content

00:15:19.780 --> 00:15:23.510
needs to be bound with
a Sync Adapter.

00:15:23.510 --> 00:15:30.520
So the end create method, in
our case, we want a static

00:15:30.520 --> 00:15:31.260
Sync Adapter.

00:15:31.260 --> 00:15:35.960
So when Android instantiate a
new Drive Sync Adapter, we

00:15:35.960 --> 00:15:40.000
simply instantiate a new
Drive sync service.

00:15:40.000 --> 00:15:44.750
We instantiate a new Drive
Sync Adapter as a static

00:15:44.750 --> 00:15:47.600
attribute, and we make sure it's
[INAUDIBLE] safe using

00:15:47.600 --> 00:15:49.780
[INAUDIBLE].

00:15:49.780 --> 00:15:52.960
Now, unbind again it's
quite easy when

00:15:52.960 --> 00:15:54.850
it's called by Android.

00:15:54.850 --> 00:15:56.820
We simply return the
Sync Adapters,

00:15:56.820 --> 00:15:58.270
Get Sync out of Binder.

00:15:58.270 --> 00:16:01.410
Which is in the original
implemented by the abstract

00:16:01.410 --> 00:16:04.460
thread Sync Adapter class.

00:16:04.460 --> 00:16:10.980
Now as an activity, or service
Android, you need to declare

00:16:10.980 --> 00:16:12.480
it in the Android manifest.

00:16:12.480 --> 00:16:15.376
So you do that by adding
a new service tag in

00:16:15.376 --> 00:16:17.000
your Android manifest.

00:16:17.000 --> 00:16:21.240
Add an intent feature saying
that [INAUDIBLE]

00:16:21.240 --> 00:16:24.100
Sync Adapter pardon.

00:16:24.100 --> 00:16:28.320
And then link to the Sync
Adapter resource [INAUDIBLE].

00:16:31.450 --> 00:16:32.670
Picking up [INAUDIBLE]

00:16:32.670 --> 00:16:33.960
integration here it is.

00:16:33.960 --> 00:16:38.980
So particularly when you Sync
Adapter, you specify the type

00:16:38.980 --> 00:16:42.540
of content the Sync Adapter
is able to sync.

00:16:42.540 --> 00:16:45.430
We're using the same authority
as the simple Notepad

00:16:45.430 --> 00:16:47.310
application which is
called through the

00:16:47.310 --> 00:16:49.150
Google provider of Notepad.

00:16:49.150 --> 00:16:52.960
The account type for which
data be synced.

00:16:52.960 --> 00:16:55.900
In our case, google.com since
we are syncing with Drive.

00:16:55.900 --> 00:17:00.210
And then whether or not the Sync
Adapter is user visible.

00:17:00.210 --> 00:17:02.970
This is a nice setting.

00:17:02.970 --> 00:17:05.940
If you set this to true, the
Sync Adapter will appear in

00:17:05.940 --> 00:17:10.210
the account settings page in
Android, and the user decides

00:17:10.210 --> 00:17:13.750
to turn on or off
your service.

00:17:13.750 --> 00:17:16.230
And again, comes for free.

00:17:16.230 --> 00:17:18.339
Now the Sync Adapter.

00:17:18.339 --> 00:17:21.990
The main method to override is
on Perform Sync, which is

00:17:21.990 --> 00:17:25.230
called when a sync needs
to be performed.

00:17:25.230 --> 00:17:25.940
[INAUDIBLE]

00:17:25.940 --> 00:17:28.590
implied.

00:17:28.590 --> 00:17:30.670
Account, so this is the
account for which we

00:17:30.670 --> 00:17:31.825
need to sync data.

00:17:31.825 --> 00:17:36.120
There are some other parameters
and the content

00:17:36.120 --> 00:17:42.400
provider, which will help your
class get data back and forth

00:17:42.400 --> 00:17:44.690
from the database.

00:17:44.690 --> 00:17:47.270
In the end, when you're done,
you should be sent the result

00:17:47.270 --> 00:17:50.680
in the sync result parameter
if everything

00:17:50.680 --> 00:17:53.080
goes well or not.

00:17:53.080 --> 00:17:56.690
If there was an error, Android
will take care of trying again

00:17:56.690 --> 00:18:00.280
to sync, et cetera, et cetera.

00:18:00.280 --> 00:18:02.200
Why did we decided to
use a Sync Adapter?

00:18:02.200 --> 00:18:05.040
Well, there are many things
that come for free.

00:18:05.040 --> 00:18:09.140
If your device is offline
Android won't try to sync.

00:18:09.140 --> 00:18:09.910
This is nice.

00:18:09.910 --> 00:18:11.600
You don't have to handle that.

00:18:11.600 --> 00:18:14.500
If there's a failure, Android
will try again.

00:18:14.500 --> 00:18:17.685
If you update your database,
and tell Android that the

00:18:17.685 --> 00:18:21.080
database has been updated,
Android will know that a sync

00:18:21.080 --> 00:18:22.850
needs to be performed again.

00:18:22.850 --> 00:18:26.010
And will try to perform a new
sync, et cetera, et cetera.

00:18:26.010 --> 00:18:28.910
There are many things that come
for free with minimum

00:18:28.910 --> 00:18:31.910
work from your part.

00:18:31.910 --> 00:18:36.880
Now we implemented
all the classes.

00:18:36.880 --> 00:18:40.660
Well, we didn't implement the
sync logic which will be

00:18:40.660 --> 00:18:41.990
covered later.

00:18:41.990 --> 00:18:45.550
But once all of this is done,
you need to enable the Sync

00:18:45.550 --> 00:18:47.430
Adapter for your applications.

00:18:47.430 --> 00:18:50.600
You do that by, for instance
this is done from

00:18:50.600 --> 00:18:51.730
our Settings page.

00:18:51.730 --> 00:18:54.640
We say that for the specific
account, we want the Sync

00:18:54.640 --> 00:18:57.440
Adapter to be synced
automatically.

00:18:57.440 --> 00:19:00.240
So all data will be synced
automatically by Android.

00:19:00.240 --> 00:19:04.040
And then we'll also specify
a sync priority.

00:19:04.040 --> 00:19:06.870
For instance, you want your
sync to be performed every

00:19:06.870 --> 00:19:10.170
five minutes, 15 minutes,
et cetera.

00:19:10.170 --> 00:19:13.890
And once this is done, well,
this is what the accounts page

00:19:13.890 --> 00:19:15.680
looks like on [INAUDIBLE].

00:19:15.680 --> 00:19:19.540
And as you can see, the Notepad
appeared and is

00:19:19.540 --> 00:19:22.860
actually syncing now.

00:19:22.860 --> 00:19:26.110
So we get an account.

00:19:26.110 --> 00:19:29.380
We enable the [INAUDIBLE]
application to use accounts.

00:19:29.380 --> 00:19:32.840
We authorize the applications
to talk to Drive.

00:19:32.840 --> 00:19:35.950
We are still starting to
implementing a Sync Adapter.

00:19:35.950 --> 00:19:37.580
Now let's talk to Drive.

00:19:37.580 --> 00:19:40.250
So the Drive SDK provides
an API.

00:19:40.250 --> 00:19:44.180
We recently released version
two of the API yesterday.

00:19:44.180 --> 00:19:46.580
And the API is a [INAUDIBLE]

00:19:46.580 --> 00:19:47.180
API.

00:19:47.180 --> 00:19:53.110
So it let's the [INAUDIBLE]
least create, update, delete

00:19:53.110 --> 00:19:56.020
resources on Drive which
[INAUDIBLE].

00:19:56.020 --> 00:20:00.030
And other type of resources as
well, such as the ACL which is

00:20:00.030 --> 00:20:03.035
sharing if you want to share
your document with other

00:20:03.035 --> 00:20:04.270
users, et cetera.

00:20:04.270 --> 00:20:05.610
This is not covered
in this talk.

00:20:05.610 --> 00:20:09.110
We are only using [INAUDIBLE]
resource because we are only

00:20:09.110 --> 00:20:13.540
syncing the database
with the Cloud.

00:20:13.540 --> 00:20:17.940
So now that our application is
able to talk to Drive, we're

00:20:17.940 --> 00:20:20.920
going to first retrieve all the
files that are available

00:20:20.920 --> 00:20:23.110
in Drive and has been created
by applications.

00:20:23.110 --> 00:20:24.330
Why do we need to do that?

00:20:24.330 --> 00:20:27.460
Well, the user might have
installed your application in

00:20:27.460 --> 00:20:30.330
multiple devices because your
application is awesome.

00:20:30.330 --> 00:20:33.020
And you want all the files
created by one application to

00:20:33.020 --> 00:20:34.880
be available on the other one.

00:20:34.880 --> 00:20:37.450
So we're going to list the files
that have been created

00:20:37.450 --> 00:20:41.770
by your app and sync that
with the local database.

00:20:41.770 --> 00:20:46.430
Then if a user created a new
file on his device, well you

00:20:46.430 --> 00:20:47.870
need to sync it to Drive.

00:20:47.870 --> 00:20:51.360
So we're going to see how to
create a new file resource on

00:20:51.360 --> 00:20:55.260
Drive and upload the
content to it.

00:20:55.260 --> 00:21:00.890
Then we're going to sync
changes, local changes or

00:21:00.890 --> 00:21:03.340
remote changes to a
local database.

00:21:03.340 --> 00:21:05.830
This won't be covered in this
section, but Claudio will talk

00:21:05.830 --> 00:21:07.710
about it in the end.

00:21:07.710 --> 00:21:11.000
And also, hand deleted files
in case a user decided to

00:21:11.000 --> 00:21:12.890
delete the file locally.

00:21:12.890 --> 00:21:14.320
We need to make sure that
it's deleted on

00:21:14.320 --> 00:21:17.760
Drive and vice versa.

00:21:17.760 --> 00:21:20.500
Now how do we retrieve
files from Drive?

00:21:20.500 --> 00:21:24.170
As I said, we're going to list
existing files available in

00:21:24.170 --> 00:21:26.100
the user's Drive.

00:21:26.100 --> 00:21:29.050
We do that by first
instantiating a new list

00:21:29.050 --> 00:21:30.940
request on the file resource.

00:21:30.940 --> 00:21:31.880
So this is a [INAUDIBLE]

00:21:31.880 --> 00:21:34.590
API, but we provide a
client library that

00:21:34.590 --> 00:21:37.170
makes it a lot easier.

00:21:37.170 --> 00:21:39.530
As you can see, we instantiated
a new request.

00:21:39.530 --> 00:21:44.010
This is a wrapper around
an HTTP request

00:21:44.010 --> 00:21:45.590
with one line of code.

00:21:45.590 --> 00:21:48.600
We set the query parameter,
because we only want to handle

00:21:48.600 --> 00:21:52.220
text/plain file with
[INAUDIBLE] type.

00:21:52.220 --> 00:21:56.710
We have the least end point
handles multiple query

00:21:56.710 --> 00:21:59.070
parameters available,
and documented in

00:21:59.070 --> 00:22:00.920
our reference guide.

00:22:00.920 --> 00:22:05.230
Once we instantiated that, we
executed a request and get all

00:22:05.230 --> 00:22:09.270
the files that are available
in the response.

00:22:09.270 --> 00:22:11.160
We [INAUDIBLE] through
all the items.

00:22:11.160 --> 00:22:15.810
Get some metadata such as
the file ID, the title.

00:22:15.810 --> 00:22:17.710
We also get the content
using the [INAUDIBLE]

00:22:17.710 --> 00:22:21.770
URL provided in the [INAUDIBLE]
metadata.

00:22:21.770 --> 00:22:25.730
So the [INAUDIBLE] might be no,
in case if no content are

00:22:25.730 --> 00:22:27.270
available in our
starting Drive.

00:22:27.270 --> 00:22:31.450
So those are some [INAUDIBLE]
cases you need to handle.

00:22:31.450 --> 00:22:36.240
And then we store all of that in
the local database using a

00:22:36.240 --> 00:22:38.370
SQL [INAUDIBLE].

00:22:38.370 --> 00:22:42.350
And we iterate through all the
pages as there may be multiple

00:22:42.350 --> 00:22:46.945
pages returned by
the Drive API.

00:22:46.945 --> 00:22:48.180
OK.

00:22:48.180 --> 00:22:51.740
So now the user run the
applications, gets all the

00:22:51.740 --> 00:22:57.450
files that has been created
already in his local instance

00:22:57.450 --> 00:22:58.970
of his applications.

00:22:58.970 --> 00:23:01.422
Now he created a new file,
and wants it to

00:23:01.422 --> 00:23:02.910
be synced with Drive.

00:23:02.910 --> 00:23:04.730
How do we do that?

00:23:04.730 --> 00:23:06.700
We create a new file resource.

00:23:06.700 --> 00:23:09.010
Set some metadata
such as a title.

00:23:09.010 --> 00:23:11.020
Set the [INAUDIBLE] type.

00:23:11.020 --> 00:23:13.730
In our case, it's a text/plain
[INAUDIBLE] type.

00:23:13.730 --> 00:23:16.980
And then we also get the
content of a file.

00:23:20.580 --> 00:23:25.710
Then call the Insert method,
which is also a

00:23:25.710 --> 00:23:28.600
HTTP rest API request.

00:23:28.600 --> 00:23:30.250
Which is [INAUDIBLE] through
our client library.

00:23:30.250 --> 00:23:34.470
So with only one line of code,
you send both metadata and the

00:23:34.470 --> 00:23:37.820
content of a file to the RPI
using, what we call, a

00:23:37.820 --> 00:23:39.910
resumeable [INAUDIBLE]
protocol.

00:23:39.910 --> 00:23:41.560
This comes for free for you.

00:23:41.560 --> 00:23:43.330
Only one line of code.

00:23:43.330 --> 00:23:45.830
Of course there might be API
errors that need to be

00:23:45.830 --> 00:23:49.420
handled, and will be covered
when we release the simple

00:23:49.420 --> 00:23:50.610
applications.

00:23:50.610 --> 00:23:54.220
Once this is done, the API
returns the metadata, such as

00:23:54.220 --> 00:23:57.117
a file ID, that we need to store
in our local database so

00:23:57.117 --> 00:23:59.140
we can sync.

00:23:59.140 --> 00:24:01.050
So we know which file
has to change, and

00:24:01.050 --> 00:24:03.950
can sync in the future.

00:24:03.950 --> 00:24:06.110
We also store all the metadata,
such as when the

00:24:06.110 --> 00:24:09.310
file has been created, when it
has last been modified, et

00:24:09.310 --> 00:24:12.310
cetera, et cetera.

00:24:12.310 --> 00:24:15.700
Now, this screenshot doesn't
really show you, but it works.

00:24:15.700 --> 00:24:18.030
But let's pretend it works.

00:24:18.030 --> 00:24:22.880
You click and save, done,
sync to Drive.

00:24:22.880 --> 00:24:26.950
Now Claudio will explain to you
why it's interesting for

00:24:26.950 --> 00:24:27.660
you to [INAUDIBLE]

00:24:27.660 --> 00:24:29.360
to your Drive app for Android.

00:24:29.360 --> 00:24:29.700
CLAUDIO CHERUBINO: Thank you.

00:24:29.700 --> 00:24:31.430
Thank you Alain.

00:24:31.430 --> 00:24:36.750
So, you as users, as Android
users, probably have the Drive

00:24:36.750 --> 00:24:40.460
application installed on your
device on your tablet.

00:24:40.460 --> 00:24:43.870
And that is probably the
starting point whenever you

00:24:43.870 --> 00:24:47.080
want to work with one
of your files.

00:24:47.080 --> 00:24:50.220
So you have to take that in mind
when you write your own

00:24:50.220 --> 00:24:51.190
application.

00:24:51.190 --> 00:24:54.600
You have to consider that users
can start from your app.

00:24:54.600 --> 00:24:57.590
And in that case, you have to
provide a way for them to

00:24:57.590 --> 00:24:58.400
access their files.

00:24:58.400 --> 00:25:00.310
But users can also start
from the Drive

00:25:00.310 --> 00:25:02.680
application that we provide.

00:25:02.680 --> 00:25:06.150
And so, every time they try
to open a file that your

00:25:06.150 --> 00:25:07.970
application can open--

00:25:07.970 --> 00:25:10.450
and they try to do that from
the Drive application--

00:25:10.450 --> 00:25:16.340
you can make sure that
your app does that.

00:25:16.340 --> 00:25:18.252
How do you do that?

00:25:18.252 --> 00:25:24.150
The Drive application fires an
intent every time you try to

00:25:24.150 --> 00:25:25.970
open a file from it.

00:25:25.970 --> 00:25:28.750
An intent that has specific
parameters.

00:25:28.750 --> 00:25:31.490
So you can register your
application in order to

00:25:31.490 --> 00:25:37.190
receive specific intents that
represents files and

00:25:37.190 --> 00:25:40.010
operations your application
can take care of.

00:25:40.010 --> 00:25:43.540
So every time you tried to open
a file from the Drive

00:25:43.540 --> 00:25:47.520
application, the intent will
have a specific action

00:25:47.520 --> 00:25:49.170
that is a new one.

00:25:49.170 --> 00:25:52.320
A new intent action that has
been just defined which is

00:25:52.320 --> 00:25:54.220
called Drive Open.

00:25:54.220 --> 00:25:59.510
So if you want to receive that
intent, you have to register--

00:25:59.510 --> 00:26:00.720
well, export--

00:26:00.720 --> 00:26:03.320
an activity in your application
that can receive

00:26:03.320 --> 00:26:06.890
intents whose action
is Drive Open.

00:26:06.890 --> 00:26:08.260
But that is not enough.

00:26:08.260 --> 00:26:10.840
With Drive Open, when you
register for that, you're

00:26:10.840 --> 00:26:14.490
saying I want to listen
to all kind of files.

00:26:14.490 --> 00:26:17.890
You can restrict that to
some specific files.

00:26:17.890 --> 00:26:21.260
And, for instance, you might
want to restrict that to some

00:26:21.260 --> 00:26:22.450
specific [INAUDIBLE] types.

00:26:22.450 --> 00:26:26.860
Our application, the Notepad
application, we're showing

00:26:26.860 --> 00:26:30.930
only opens text files,
plain text files.

00:26:30.930 --> 00:26:32.830
So we only want--

00:26:32.830 --> 00:26:35.410
or HTML files which
are text files.

00:26:35.410 --> 00:26:40.060
We only want this application
to listen to those intents

00:26:40.060 --> 00:26:44.110
that are for text files
or HTML files.

00:26:44.110 --> 00:26:46.690
So we can filter that,
and specify that

00:26:46.690 --> 00:26:48.160
in the intent filters.

00:26:48.160 --> 00:26:52.310
And this is what you should
export in your manifest.

00:26:52.310 --> 00:26:57.610
As I said, you have to export
an activity that says I can

00:26:57.610 --> 00:26:59.970
listen to the Drive
Open intent.

00:26:59.970 --> 00:27:01.940
You specify the [INAUDIBLE]
type.

00:27:01.940 --> 00:27:06.870
You specify your application ID
which is a number, an ID,

00:27:06.870 --> 00:27:08.900
that you get from the
APIs console.

00:27:08.900 --> 00:27:12.850
And whenever you listen to one
of those intents, you will

00:27:12.850 --> 00:27:16.980
also get a complete path that
includes a resource ID.

00:27:16.980 --> 00:27:20.710
The resource ID, or file ID,
is the unique identifier of

00:27:20.710 --> 00:27:22.990
the file the user is
trying to open.

00:27:22.990 --> 00:27:25.530
So you get this intent.

00:27:25.530 --> 00:27:28.990
Check if the intent is what
you can listen to.

00:27:28.990 --> 00:27:32.480
And if it is, you have a unique
identifier of the file

00:27:32.480 --> 00:27:34.110
and they're trying to open it.

00:27:34.110 --> 00:27:36.460
And this is how you do
it in your code.

00:27:36.460 --> 00:27:39.970
So you have to export an
activity that implements this

00:27:39.970 --> 00:27:42.630
single method on Create.

00:27:42.630 --> 00:27:47.250
When this is called, this is
called whenever you listen to

00:27:47.250 --> 00:27:49.580
one of the intents you're
registered for.

00:27:49.580 --> 00:27:53.380
And so the first thing you
have to do is to get the

00:27:53.380 --> 00:27:55.840
intent you're listening to.

00:27:55.840 --> 00:27:57.890
From the intent you can
get the action.

00:27:57.890 --> 00:28:00.530
Remember, we only want to listen
to those actions that

00:28:00.530 --> 00:28:01.280
are Drive Open.

00:28:01.280 --> 00:28:04.030
So we just check
it in our code.

00:28:04.030 --> 00:28:08.830
If the action is Drive Open,
we do something which is

00:28:08.830 --> 00:28:10.440
specific for our app.

00:28:10.440 --> 00:28:13.270
If the action is not Drive Open,
we'll probably want to

00:28:13.270 --> 00:28:14.660
ignore this intent.

00:28:14.660 --> 00:28:18.310
It's not what we're listening to
in this specific scenario.

00:28:18.310 --> 00:28:21.930
So when the action is
Drive Open, we check

00:28:21.930 --> 00:28:24.470
the resource ID parameter.

00:28:24.470 --> 00:28:27.190
And that is the unique
ID of the file.

00:28:27.190 --> 00:28:30.570
And then we can use the same
code that Alain showed before

00:28:30.570 --> 00:28:32.000
to open a file from Drive.

00:28:32.000 --> 00:28:38.470
So the API provides us with a
method like surveys.files.get.

00:28:38.470 --> 00:28:39.780
We check [INAUDIBLE]

00:28:39.780 --> 00:28:43.350
a unique ID like this and
returns you the file

00:28:43.350 --> 00:28:44.990
as you've seen it.

00:28:44.990 --> 00:28:47.440
But there is a caveat here.

00:28:47.440 --> 00:28:51.936
When the intent is fired, we
know what file the user is

00:28:51.936 --> 00:28:52.680
trying to open.

00:28:52.680 --> 00:28:55.900
But we don't know who the user
is, because that information

00:28:55.900 --> 00:28:58.160
is not part of the intent.

00:28:58.160 --> 00:29:02.540
So whenever we get here in this
part of the code, and we

00:29:02.540 --> 00:29:07.070
know that a user is trying to
open a file, we still have to

00:29:07.070 --> 00:29:10.410
go through the account
user dialogue first.

00:29:10.410 --> 00:29:11.470
See who the user is.

00:29:11.470 --> 00:29:15.160
So ask the user to pick one of
the accounts he has on his

00:29:15.160 --> 00:29:17.290
device, or create a
new one, as usual.

00:29:17.290 --> 00:29:20.591
And then try to open a file.

00:29:20.591 --> 00:29:22.440
This is how it looks like.

00:29:22.440 --> 00:29:24.350
We're going to show
all of this live.

00:29:24.350 --> 00:29:26.570
We have this application
on our device.

00:29:26.570 --> 00:29:28.430
We're going to do a live
demo at the end.

00:29:28.430 --> 00:29:33.720
So in this case, I started from
the Drive application for

00:29:33.720 --> 00:29:37.500
Android and tried to
open a text file.

00:29:37.500 --> 00:29:41.110
This dialogue popped up and
said that I have three

00:29:41.110 --> 00:29:44.200
applications that can
open this file.

00:29:44.200 --> 00:29:47.480
And one of them, the last one in
the list, is Notepad which

00:29:47.480 --> 00:29:48.520
is our application.

00:29:48.520 --> 00:29:53.320
So if we click on that, then our
file will be opened into

00:29:53.320 --> 00:29:53.970
our application.

00:29:53.970 --> 00:29:55.670
You're going to see this
in a few minutes.

00:29:59.000 --> 00:30:03.560
Lastly, I'm going to give
you some more tips.

00:30:03.560 --> 00:30:07.580
So I have actually two more tips
for how to optimize your

00:30:07.580 --> 00:30:09.330
application for efficiency.

00:30:09.330 --> 00:30:11.490
Remember that we are in
the mobile scenario.

00:30:11.490 --> 00:30:15.870
And in a mobile environment,
when we are not on wi-fi, when

00:30:15.870 --> 00:30:21.140
we're 4G or 3G, downloading
files can be very expensive.

00:30:21.140 --> 00:30:23.420
And can be very slow.

00:30:23.420 --> 00:30:28.820
Files in Drive can be up
to 10 gigabytes big.

00:30:28.820 --> 00:30:32.460
If you try to download one of
those files, with the best 4G

00:30:32.460 --> 00:30:36.460
available, it is still going
to take more than 20 hours.

00:30:36.460 --> 00:30:40.710
So this is something we don't
want to do very often with our

00:30:40.710 --> 00:30:44.150
mobile device if you're
not on wi-fi.

00:30:44.150 --> 00:30:46.820
So we have to remember this
when we design our

00:30:46.820 --> 00:30:47.560
application.

00:30:47.560 --> 00:30:52.830
And what we have to do is we
only have to download files

00:30:52.830 --> 00:30:53.640
when it's necessary.

00:30:53.640 --> 00:30:55.780
When it's absolutely
necessary.

00:30:55.780 --> 00:31:00.800
So we have to find a way to save
bandwidth by using the

00:31:00.800 --> 00:31:02.610
local database as a cache.

00:31:02.610 --> 00:31:03.820
It's pretty obvious.

00:31:03.820 --> 00:31:08.380
If we have the same file in the
local cache, we don't need

00:31:08.380 --> 00:31:09.810
to get it back from Drive.

00:31:09.810 --> 00:31:13.550
But we need to find a way to
understand if the file we have

00:31:13.550 --> 00:31:15.760
in the local database
is the same as the

00:31:15.760 --> 00:31:18.510
file that is on Drive.

00:31:18.510 --> 00:31:23.600
One of the fields in the file
metadata we can get from Drive

00:31:23.600 --> 00:31:28.330
is the MD5 checksum of
the file content.

00:31:28.330 --> 00:31:32.900
So if we store that checksum the
first time, the last time,

00:31:32.900 --> 00:31:38.740
we downloaded the file we can
use it to compare it with the

00:31:38.740 --> 00:31:41.480
checksum that is coming from
Drive the next time we try to

00:31:41.480 --> 00:31:42.780
download the same file.

00:31:42.780 --> 00:31:45.880
So the algorithm here
is pretty easy.

00:31:45.880 --> 00:31:50.390
We send request to get
the file metadata.

00:31:50.390 --> 00:31:52.810
Then we compare the
MD5 checksum.

00:31:52.810 --> 00:31:57.470
If they match we only need
to update the metadata.

00:31:57.470 --> 00:32:00.960
If they don't match, there's
nothing else we can do.

00:32:00.960 --> 00:32:02.530
The file is updated so
we have to download

00:32:02.530 --> 00:32:04.100
it back from Drive.

00:32:04.100 --> 00:32:06.800
And this is how we do
it in our code.

00:32:06.800 --> 00:32:11.300
This is part of the sync logic
that Alain presented and that

00:32:11.300 --> 00:32:13.520
he promised me to
show it to you.

00:32:13.520 --> 00:32:18.490
So every time we need to sync
files we have to be smart.

00:32:18.490 --> 00:32:22.130
And this is actually the
implementation of the

00:32:22.130 --> 00:32:25.650
algorithm that I explained
a few seconds ago.

00:32:25.650 --> 00:32:30.350
So we're trying to push a file
from our local file system.

00:32:30.350 --> 00:32:32.370
So from the local database,
from the Android

00:32:32.370 --> 00:32:34.710
device, into Drive.

00:32:34.710 --> 00:32:41.670
So what we do is we have to
check, compare, the checksum

00:32:41.670 --> 00:32:46.670
of the local note that we
have with the checksum

00:32:46.670 --> 00:32:48.550
of the file on Drive.

00:32:48.550 --> 00:32:54.360
If they're equal, we only send
an update for the metadata.

00:32:54.360 --> 00:32:56.360
We are not sending
the content.

00:32:56.360 --> 00:33:01.130
Remember, in our case, the
content is pretty small.

00:33:01.130 --> 00:33:03.410
We only deal with text files.

00:33:03.410 --> 00:33:07.180
So the content is
usually small.

00:33:07.180 --> 00:33:13.150
But remember, your application
can sync videos with Drive.

00:33:13.150 --> 00:33:16.680
And of course, big videos can
take a lot to be transferred.

00:33:16.680 --> 00:33:18.790
And remember that bandwidth
is also

00:33:18.790 --> 00:33:20.950
expensive on mobile devices.

00:33:20.950 --> 00:33:24.020
So we want to be this.

00:33:24.020 --> 00:33:26.470
We want to be here in
this [INAUDIBLE]

00:33:26.470 --> 00:33:27.970
only when necessary.

00:33:27.970 --> 00:33:29.590
Here we have nothing
we can do.

00:33:29.590 --> 00:33:31.450
We update both content
and metadata.

00:33:31.450 --> 00:33:33.250
The library does this for us.

00:33:33.250 --> 00:33:38.400
We have two simple methods
we can use.

00:33:38.400 --> 00:33:40.140
They look very similar.

00:33:40.140 --> 00:33:43.550
So we have this update method,
and we're done.

00:33:43.550 --> 00:33:45.280
That's all we have to do.

00:33:45.280 --> 00:33:50.120
But we need to try to be
in the first case all

00:33:50.120 --> 00:33:53.390
the times we want.

00:33:53.390 --> 00:34:00.110
And here is the second tip that
I want to share with you.

00:34:00.110 --> 00:34:02.780
Our application syncs
when it starts.

00:34:02.780 --> 00:34:06.990
It syncs all the files from
Drive and covers them into the

00:34:06.990 --> 00:34:09.020
local database.

00:34:09.020 --> 00:34:12.020
Let's say, in the future,
you want to sync again

00:34:12.020 --> 00:34:13.780
with all the files.

00:34:13.780 --> 00:34:18.580
Well, if you have nothing else
than that, nothing else than

00:34:18.580 --> 00:34:21.620
those methods, all you
can do is download

00:34:21.620 --> 00:34:23.400
all the files again.

00:34:23.400 --> 00:34:28.120
Compare each file, one by one,
with those you have in your

00:34:28.120 --> 00:34:29.750
local file system.

00:34:29.750 --> 00:34:31.389
See if they're the same.

00:34:31.389 --> 00:34:36.719
See if there are differences And
replace the old one with

00:34:36.719 --> 00:34:37.469
the new one.

00:34:37.469 --> 00:34:39.920
Same thing with deleted files.

00:34:39.920 --> 00:34:43.590
You have no way to know if
a file has been deleted.

00:34:43.590 --> 00:34:45.920
Then just checking the
list of files and see

00:34:45.920 --> 00:34:46.760
if the file is there.

00:34:46.760 --> 00:34:52.800
Of course this is a resource
intensive process.

00:34:52.800 --> 00:34:54.080
It's very expensive.

00:34:54.080 --> 00:34:57.090
You have to download all the
files every time you want to

00:34:57.090 --> 00:34:59.350
sync your local [INAUDIBLE].

00:34:59.350 --> 00:35:01.230
But we like it.

00:35:01.230 --> 00:35:05.010
There's a feed, called
a changes feed,

00:35:05.010 --> 00:35:06.650
in the Drive API.

00:35:06.650 --> 00:35:12.080
Which returns the changes to
all the documents since a

00:35:12.080 --> 00:35:14.590
given time.

00:35:14.590 --> 00:35:19.480
So this feed will say, starting
from the last thing,

00:35:19.480 --> 00:35:20.700
last time, you checked.

00:35:20.700 --> 00:35:24.980
Starting from time x, this
file has been added.

00:35:24.980 --> 00:35:26.330
This file has been deleted.

00:35:26.330 --> 00:35:27.920
This file has been changed.

00:35:27.920 --> 00:35:30.510
Everything else you
know is the same.

00:35:30.510 --> 00:35:34.430
So you can save a lot of
bandwidth just by using this

00:35:34.430 --> 00:35:37.000
changes feed instead of
downloading all the files.

00:35:37.000 --> 00:35:41.880
You only download those files
you know that have changed.

00:35:41.880 --> 00:35:46.940
This is also implemented by the
library, and the usage is

00:35:46.940 --> 00:35:52.460
very similar to what we've
seen with the files feed.

00:35:52.460 --> 00:35:55.840
Instead of doing
surveys.files.method, which

00:35:55.840 --> 00:35:57.890
was list, or insert, or update,

00:35:57.890 --> 00:35:59.510
or delete, or anything.

00:35:59.510 --> 00:36:03.570
Here we have
service.changes.method which

00:36:03.570 --> 00:36:06.040
is list in our case.

00:36:06.040 --> 00:36:09.820
So we want to list all the
changes starting from a

00:36:09.820 --> 00:36:11.570
specific change ID.

00:36:11.570 --> 00:36:13.550
So all the changes
are numbered.

00:36:13.550 --> 00:36:20.190
So if you last time synced at
change ID 200, next time you

00:36:20.190 --> 00:36:24.600
only need to remember to sync
from change ID 201.

00:36:24.600 --> 00:36:25.400
That's it.

00:36:25.400 --> 00:36:27.890
You get a list of changes.

00:36:27.890 --> 00:36:32.060
And for each of them, you just
need to check if the change

00:36:32.060 --> 00:36:32.860
was a deletion.

00:36:32.860 --> 00:36:36.750
And in that case, we sync the
local copy of the files or we

00:36:36.750 --> 00:36:38.970
delete the local copy
of the file.

00:36:38.970 --> 00:36:42.790
Or if it's not a deletion,
there is an update.

00:36:42.790 --> 00:36:48.400
And so we get the file, and we
do the syncing, which is

00:36:48.400 --> 00:36:50.640
updating the file or [INAUDIBLE]
the file.

00:36:50.640 --> 00:36:53.730
Of course, we have to do
that for all files.

00:36:53.730 --> 00:36:54.910
That's just a [INAUDIBLE]
loop.

00:36:54.910 --> 00:36:58.740
I don't think there's nothing
to explain here.

00:36:58.740 --> 00:37:01.830
With this I think we can
move on to the demo.

00:37:01.830 --> 00:37:06.230
And we are going to show you the
application we built that

00:37:06.230 --> 00:37:08.710
does everything we showed you.

00:37:08.710 --> 00:37:12.080
Let me switch.

00:37:12.080 --> 00:37:14.530
ALAIN VONGSOUVANH: Is it on?

00:37:14.530 --> 00:37:15.250
Yes.

00:37:15.250 --> 00:37:16.180
CLAUDIO CHERUBINO: It is.

00:37:16.180 --> 00:37:16.870
ALAIN VONGSOUVANH: Am I on?

00:37:16.870 --> 00:37:18.190
Yes.

00:37:18.190 --> 00:37:22.500
So, thank you Claudio for
those performance tips.

00:37:22.500 --> 00:37:23.570
This is a live demo.

00:37:23.570 --> 00:37:24.490
I'm on wi-fi.

00:37:24.490 --> 00:37:30.370
So I can be wrong in
the use of manners.

00:37:30.370 --> 00:37:32.930
So as you can see, I don't have
much wi-fi connections.

00:37:32.930 --> 00:37:33.290
[INAUDIBLE]

00:37:33.290 --> 00:37:33.970
connected.

00:37:33.970 --> 00:37:37.160
OK, let's try this.

00:37:37.160 --> 00:37:39.720
So I open my Notepad
applications.

00:37:39.720 --> 00:37:43.680
As you can see, this is the same
as you implement if you

00:37:43.680 --> 00:37:45.265
go through the Android
tutorials.

00:37:47.890 --> 00:37:48.930
List of files.

00:37:48.930 --> 00:37:50.340
Nothing new here.

00:37:50.340 --> 00:37:53.810
Then we added the preferences
page.

00:37:53.810 --> 00:37:54.930
You go there.

00:37:54.930 --> 00:37:58.625
As I mentioned, you can choose
the account you want to use in

00:37:58.625 --> 00:38:02.710
your applications and also
set the sync frequency.

00:38:02.710 --> 00:38:06.210
So now let's try to choose
another account.

00:38:06.210 --> 00:38:09.680
As I explained at the beginning
of the session, this

00:38:09.680 --> 00:38:12.440
is using one of the new Google
Play services API called

00:38:12.440 --> 00:38:14.380
Account Picker.

00:38:14.380 --> 00:38:18.060
With one line of code you
get an intent for free.

00:38:18.060 --> 00:38:20.400
A user can choose to use
another account.

00:38:20.400 --> 00:38:22.030
Let's try the third one.

00:38:22.030 --> 00:38:23.340
OK.

00:38:23.340 --> 00:38:27.630
This account has never used
this application before.

00:38:27.630 --> 00:38:31.430
So my Sync Adapter tried to
get access to the account.

00:38:31.430 --> 00:38:32.230
It failed.

00:38:32.230 --> 00:38:33.350
Get the exception.

00:38:33.350 --> 00:38:36.560
And now it's sending a
notification to my user to

00:38:36.560 --> 00:38:38.280
grant access to the app.

00:38:38.280 --> 00:38:40.660
I click on it.

00:38:40.660 --> 00:38:45.610
It's on wi-fi so hopefully
it's going to work.

00:38:45.610 --> 00:38:50.380
This is checking if the user
ever granted access to my

00:38:50.380 --> 00:38:51.640
application before.

00:38:51.640 --> 00:38:53.280
Now I get the approval screen.

00:38:53.280 --> 00:38:55.530
I can carefully read the text.

00:38:55.530 --> 00:38:58.120
Of course everybody
reads the text.

00:38:58.120 --> 00:39:01.190
And then decide whether or not
to grant access to the

00:39:01.190 --> 00:39:01.790
applications.

00:39:01.790 --> 00:39:04.810
Well, in fact, I didn't want
to use this account.

00:39:04.810 --> 00:39:09.190
So I'm just going to cancel and
go back here and choose

00:39:09.190 --> 00:39:11.540
the account I used before.

00:39:11.540 --> 00:39:14.710
Now, for the sake of our demo,
I'm going to put the sync

00:39:14.710 --> 00:39:17.110
frequency every five seconds.

00:39:17.110 --> 00:39:21.870
This isn't recommended of
course, but this is a demo.

00:39:21.870 --> 00:39:24.310
Now let's open a file.

00:39:24.310 --> 00:39:24.910
Which one?

00:39:24.910 --> 00:39:26.160
Let's say the first
one, To Dos.

00:39:29.260 --> 00:39:32.970
So we talked about how to get
an authorized account,

00:39:32.970 --> 00:39:35.910
implement the Sync Adapter talk
to Drive, talk to Android

00:39:35.910 --> 00:39:40.120
API to sync data, and also use
a changes feed to improve

00:39:40.120 --> 00:39:41.620
performances.

00:39:41.620 --> 00:39:44.890
Now what else do
we need to do?

00:39:44.890 --> 00:39:46.790
Android.

00:39:46.790 --> 00:39:48.450
Done.

00:39:48.450 --> 00:39:50.460
Let's save.

00:39:50.460 --> 00:39:54.180
So now this is saving to
the local database.

00:39:54.180 --> 00:39:56.130
The Sync Adapter knows that
the local database has

00:39:56.130 --> 00:40:02.210
changed, and will try to sync
again using the Sync Adapter.

00:40:02.210 --> 00:40:05.580
Now let's use the Drive
applications.

00:40:05.580 --> 00:40:07.210
Hopefully this already synced.

00:40:07.210 --> 00:40:12.070
So trying to look for changes.

00:40:12.070 --> 00:40:13.300
Let's wait.

00:40:13.300 --> 00:40:15.590
I want to show you that it
actually synced, because

00:40:15.590 --> 00:40:17.400
otherwise I can fake
everything.

00:40:17.400 --> 00:40:21.600
As you can see, To Dos has
been updated at 4:41, one

00:40:21.600 --> 00:40:23.330
minute ago.

00:40:23.330 --> 00:40:26.180
Let's try to open it with one
of our applications, because

00:40:26.180 --> 00:40:29.020
if I open it with mine,
well, I don't know.

00:40:29.020 --> 00:40:30.160
I might be faking
the database.

00:40:30.160 --> 00:40:32.490
So I want to be proving
you that I've been

00:40:32.490 --> 00:40:33.700
using the Drive API.

00:40:33.700 --> 00:40:35.440
So let's say, I'm using
the Document Viewer.

00:40:38.280 --> 00:40:39.530
So bring the file.

00:40:39.530 --> 00:40:42.320
This is getting data from
Drive and launching the

00:40:42.320 --> 00:40:43.350
applications.

00:40:43.350 --> 00:40:49.970
As you can see, we can now enjoy
syncing files to Drive.

00:40:49.970 --> 00:40:51.220
This is working.

00:40:55.560 --> 00:40:58.270
Thank you.

00:40:58.270 --> 00:41:01.020
All right, wow, this
is awesome.

00:41:01.020 --> 00:41:03.710
I can create new
files on Drive.

00:41:03.710 --> 00:41:06.230
Get data from Drive, sync.

00:41:06.230 --> 00:41:08.580
This is perfect for any
type of applications.

00:41:08.580 --> 00:41:11.080
Gamer applications, for example,
like you want to have

00:41:11.080 --> 00:41:14.220
saved data sync across
all your devices.

00:41:14.220 --> 00:41:16.740
Get that for a few
lines of code.

00:41:16.740 --> 00:41:21.770
Now you can't notice here, but
I have a note that is not

00:41:21.770 --> 00:41:24.000
synced on my Notes list.

00:41:24.000 --> 00:41:24.840
Why is that?

00:41:24.840 --> 00:41:27.670
Well, this is a text file that
has been created by another

00:41:27.670 --> 00:41:29.600
application, not by mine.

00:41:29.600 --> 00:41:32.630
So my application is not
authorized to read it unless

00:41:32.630 --> 00:41:36.890
the user specifically approved
this file for my applications.

00:41:36.890 --> 00:41:39.330
Well, with the Drive
app on Android, you

00:41:39.330 --> 00:41:41.120
can do that as well.

00:41:41.120 --> 00:41:43.880
So I'm going to click
on Final Notes.

00:41:43.880 --> 00:41:46.670
This is firing an intent on
Android, looking for all

00:41:46.670 --> 00:41:50.070
applications that handle
the Drive Open Intent.

00:41:50.070 --> 00:41:53.350
And my Notepad implemented
that, so let's open it to

00:41:53.350 --> 00:41:58.130
Drive with Notepad, sorry.

00:41:58.130 --> 00:42:02.820
Opening, what it did is it sent
a request to our back end

00:42:02.820 --> 00:42:06.380
saying that Notepad applications
is now authorized

00:42:06.380 --> 00:42:12.170
to read and save data to this
file using this application.

00:42:12.170 --> 00:42:15.900
Now, as previously mentioned, I
don't know which user fired

00:42:15.900 --> 00:42:16.580
the intent.

00:42:16.580 --> 00:42:21.330
So I need to prompt the user to
choose what account to use.

00:42:21.330 --> 00:42:24.610
We are working on improving the
story, but bear with us.

00:42:24.610 --> 00:42:28.270
For now, this is the
best way to do it.

00:42:28.270 --> 00:42:29.540
I'm choosing the second account

00:42:29.540 --> 00:42:31.220
which is my test account.

00:42:31.220 --> 00:42:34.790
And now I'm pulling
data from Drive.

00:42:34.790 --> 00:42:37.490
Again, this is on wi-fi,
hopefully--

00:42:37.490 --> 00:42:39.260
CLAUDIO CHERUBINO: This
is when they clap

00:42:39.260 --> 00:42:40.030
their hands, right?

00:42:40.030 --> 00:42:40.710
ALAIN VONGSOUVANH: Yes.

00:42:40.710 --> 00:42:41.580
CLAUDIO CHERUBINO: For
real this time?

00:42:41.580 --> 00:42:44.906
ALAIN VONGSOUVANH: Oh, there
you go, it worked.

00:42:44.906 --> 00:42:46.240
Isn't that awesome?

00:42:48.810 --> 00:42:50.210
Then I go back.

00:42:50.210 --> 00:42:52.210
Come back to Drive.

00:42:52.210 --> 00:42:54.560
Go to my Notepad applications.

00:42:54.560 --> 00:42:57.260
As I can see, Final Notes
is right there.

00:42:57.260 --> 00:42:58.860
Now my application
is authorized

00:42:58.860 --> 00:43:00.110
to read these Notes.

00:43:02.110 --> 00:43:06.840
Two lines of code, you get
accounts authorization,

00:43:06.840 --> 00:43:10.040
background syncing, and
you talk to Drive.

00:43:10.040 --> 00:43:13.050
Now all your local files, all
of your local data, is now

00:43:13.050 --> 00:43:15.206
synced to the Cloud for only--

00:43:15.206 --> 00:43:15.900
I don't know--

00:43:15.900 --> 00:43:16.300
a few lines of code.

00:43:16.300 --> 00:43:17.840
A hundred?

00:43:17.840 --> 00:43:19.660
Not even.

00:43:19.660 --> 00:43:22.960
We won't be releasing the
[INAUDIBLE] right now because

00:43:22.960 --> 00:43:25.290
the Google [INAUDIBLE] services
will be coming soon.

00:43:25.290 --> 00:43:28.410
So some dependencies are not
yet available to you.

00:43:28.410 --> 00:43:35.180
When it is, we'll write a
tutorial on how to do that.

00:43:35.180 --> 00:43:37.610
How to update a Notepad
applications and provide a

00:43:37.610 --> 00:43:40.730
[INAUDIBLE] simple code
for you to work from.

00:43:40.730 --> 00:43:43.270
CLAUDIO CHERUBINO:
Thanks Alain.

00:43:43.270 --> 00:43:47.850
And with that, I will just
show you the link to our

00:43:47.850 --> 00:43:51.600
documentation page which is
developers.google.com/drive.

00:43:51.600 --> 00:43:53.990
It already talks about
writing Drive

00:43:53.990 --> 00:43:55.820
application on Android, but--

00:43:55.820 --> 00:43:58.340
as Alain said--

00:43:58.340 --> 00:44:00.720
some pieces you need
are not there yet.

00:44:00.720 --> 00:44:01.880
They will be available soon.

00:44:01.880 --> 00:44:06.220
There are some pieces in the
Google Play services, but they

00:44:06.220 --> 00:44:08.090
should be available soon.

00:44:08.090 --> 00:44:11.020
And you also have
our contacts.

00:44:11.020 --> 00:44:15.160
So our email addresses, are
Google+ accounts, and my

00:44:15.160 --> 00:44:16.520
Twitter account.

00:44:16.520 --> 00:44:20.040
And if you have any questions,
this is the time to ask them.

00:44:20.040 --> 00:44:23.630
And if you do, please use the
microphones there and there.

00:44:23.630 --> 00:44:28.380
As an incentive, we might have
some shwag which might be

00:44:28.380 --> 00:44:31.910
either a t-shirt or a
self driving car.

00:44:31.910 --> 00:44:32.870
ALAIN VONGSOUVANH: Yes.

00:44:32.870 --> 00:44:34.060
CLAUDIO CHERUBINO:
You never know.

00:44:34.060 --> 00:44:35.100
ALAIN VONGSOUVANH: We
haven't decided yet.

00:44:35.100 --> 00:44:36.180
But if you want to know?

00:44:36.180 --> 00:44:37.000
CLAUDIO CHERUBINO: You pick.

00:44:37.000 --> 00:44:38.950
ALAIN VONGSOUVANH:
Ask questions.

00:44:38.950 --> 00:44:39.790
CLAUDIO CHERUBINO: Question.

00:44:39.790 --> 00:44:39.870
You were

00:44:39.870 --> 00:44:41.110
ALAIN VONGSOUVANH: First.

00:44:41.110 --> 00:44:44.090
AUDIENCE: So now we can
also save some work

00:44:44.090 --> 00:44:47.210
offline with Drive?

00:44:47.210 --> 00:44:52.030
CLAUDIO CHERUBINO: So this
application which we developed

00:44:52.030 --> 00:44:57.640
works offline, because every
time we do something in our

00:44:57.640 --> 00:45:00.250
application it saves to
a local database.

00:45:00.250 --> 00:45:01.360
And then it syncs.

00:45:01.360 --> 00:45:04.570
That's one of the advantages
of using a Sync Adapter.

00:45:04.570 --> 00:45:08.460
And as the Sync Adapter takes
care of all the syncing.

00:45:08.460 --> 00:45:11.450
So you only need to know how to
write to a local database.

00:45:11.450 --> 00:45:14.660
And then as soon as you have
wi-fi, as soon as you have

00:45:14.660 --> 00:45:18.690
connectivity, and if the Sync
Adapter is enabled, then

00:45:18.690 --> 00:45:19.880
syncing will be done.

00:45:19.880 --> 00:45:23.380
That's why we implemented this
Sync Adapter pattern.

00:45:23.380 --> 00:45:25.630
AUDIENCE: So what's the
guidelines for Sync Adapter?

00:45:25.630 --> 00:45:29.360
Because let's say if I have two
devices, I'm modifying the

00:45:29.360 --> 00:45:33.280
same file on two different
devices and they are offline.

00:45:33.280 --> 00:45:36.530
One line is changed differently
on one device.

00:45:36.530 --> 00:45:38.940
Same line is changed differently
on other device.

00:45:38.940 --> 00:45:40.690
What are the recommendation
to handle this?

00:45:40.690 --> 00:45:43.980
CLAUDIO CHERUBINO: So of course
the first device to be

00:45:43.980 --> 00:45:46.720
connected will push
its changes first.

00:45:46.720 --> 00:45:49.770
And then the second one will try
to push its changes first.

00:45:49.770 --> 00:45:52.750
And it's up to the sync logic
implementing our application

00:45:52.750 --> 00:45:55.240
to merge them.

00:45:55.240 --> 00:45:57.410
And our application
is pretty simple.

00:45:57.410 --> 00:46:00.280
We don't really do
line by line data

00:46:00.280 --> 00:46:02.020
merge or anything fancy.

00:46:02.020 --> 00:46:04.050
ALAIN VONGSOUVANH: I think we're
doing last [INAUDIBLE].

00:46:04.050 --> 00:46:06.880
CLAUDIO CHERUBINO: Yeah, so we
basically lose the first

00:46:06.880 --> 00:46:11.080
change if there are two
concurrent changes.

00:46:11.080 --> 00:46:12.930
But this is a limitation
in our application.

00:46:12.930 --> 00:46:16.095
It's up to the developers to
implement a sync logic that

00:46:16.095 --> 00:46:17.220
takes care of that.

00:46:17.220 --> 00:46:18.470
ALAIN VONGSOUVANH:
He was next.

00:46:21.500 --> 00:46:25.000
AUDIENCE: So if I understand
correctly, this is replacing

00:46:25.000 --> 00:46:26.030
[INAUDIBLE]?

00:46:26.030 --> 00:46:29.280
Or is there a way to integrate
that so we don't need to set a

00:46:29.280 --> 00:46:32.550
time in the refresh settings.

00:46:32.550 --> 00:46:35.950
ALAIN VONGSOUVANH: So, I don't
know if you went to the Drive

00:46:35.950 --> 00:46:38.940
talk this morning from
[INAUDIBLE].

00:46:38.940 --> 00:46:42.150
We are working on adding push
notifications to the API.

00:46:42.150 --> 00:46:45.050
So this would go, probably,
through [INAUDIBLE].

00:46:45.050 --> 00:46:47.370
I don't have details on
implementation yet.

00:46:47.370 --> 00:46:48.860
It's going to be available.

00:46:48.860 --> 00:46:49.790
Right now it's not.

00:46:49.790 --> 00:46:53.920
So the application has to
pull data from Drive.

00:46:53.920 --> 00:46:56.180
And the best way to do it is
using the changes feed,

00:46:56.180 --> 00:46:59.950
because you don't get the
entire users directory.

00:46:59.950 --> 00:47:03.130
You only get files that has
changed since the last sync.

00:47:03.130 --> 00:47:04.680
AUDIENCE: One more question.

00:47:04.680 --> 00:47:07.150
You said everything right now
is not available yet.

00:47:07.150 --> 00:47:09.850
But do you know if it is going
to be added to the Android

00:47:09.850 --> 00:47:12.820
support library so we can use
it in all their devices?

00:47:12.820 --> 00:47:14.220
ALAIN VONGSOUVANH: That's
a good idea.

00:47:14.220 --> 00:47:16.940
We're going to talk with the
Android team, and we'll make

00:47:16.940 --> 00:47:21.150
it available on the Android SDK
or make it available in a

00:47:21.150 --> 00:47:22.520
separate repository.

00:47:22.520 --> 00:47:24.880
But it's going to be public
and open source.

00:47:24.880 --> 00:47:28.260
CLAUDIO CHERUBINO: The plan is
not to only add it to the last

00:47:28.260 --> 00:47:31.870
version, jelly bean, but
also previous ones.

00:47:31.870 --> 00:47:35.000
We don't have details yet,
but that's what they're

00:47:35.000 --> 00:47:35.840
working on right now.

00:47:35.840 --> 00:47:38.910
So seeing how this can go down
to other versions of that.

00:47:38.910 --> 00:47:41.300
Basically all devices
can have it.

00:47:41.300 --> 00:47:41.450
AUDIENCE: Thank you.

00:47:41.450 --> 00:47:43.510
CLAUDIO CHERUBINO: Thank you.

00:47:43.510 --> 00:47:45.350
AUDIENCE: Looking at your
example code, you were showing

00:47:45.350 --> 00:47:47.210
the account user every time.

00:47:47.210 --> 00:47:50.750
Would you recommend developers
steering clear of retrying the

00:47:50.750 --> 00:47:53.800
last account selected?

00:47:53.800 --> 00:47:57.180
Is there a specific reason why
you try and stay clear of

00:47:57.180 --> 00:47:59.280
retrying that, looking for an
error, and then presenting the

00:47:59.280 --> 00:48:01.980
account chooser?

00:48:01.980 --> 00:48:03.870
ALAIN VONGSOUVANH: In our
sample app, we store the

00:48:03.870 --> 00:48:06.770
chosen account in
the preferences.

00:48:06.770 --> 00:48:09.480
So we simply store the name of
the account, because we're

00:48:09.480 --> 00:48:11.900
going to need that to
get an access token.

00:48:11.900 --> 00:48:16.220
If we have that, and the user is
trying to change accounts,

00:48:16.220 --> 00:48:19.720
we prompt the dialogue.

00:48:19.720 --> 00:48:23.200
And tell the intent that the
user previously chose this

00:48:23.200 --> 00:48:26.090
account so please
preselect it.

00:48:26.090 --> 00:48:30.260
In the case so of when we're
opening a file from Drive, we

00:48:30.260 --> 00:48:32.690
don't know who opened
the file.

00:48:32.690 --> 00:48:36.000
So we could use a preferred
account.

00:48:36.000 --> 00:48:39.250
We didn't do that, but that's
a good way to [INAUDIBLE]

00:48:39.250 --> 00:48:40.560
an account.

00:48:40.560 --> 00:48:43.500
CLAUDIO CHERUBINO: That's
actually no guarantee that the

00:48:43.500 --> 00:48:47.470
last user selected in our
application is the same user

00:48:47.470 --> 00:48:50.390
that is opening a file from
the Drive application.

00:48:50.390 --> 00:48:52.470
AUDIENCE: But would there be
any difference between

00:48:52.470 --> 00:48:55.250
separate users who both
have read access to a

00:48:55.250 --> 00:48:56.370
file opening the file?

00:48:56.370 --> 00:48:57.300
CLAUDIO CHERUBINO: Well you
don't know if the other user

00:48:57.300 --> 00:48:58.630
has read access.

00:48:58.630 --> 00:49:00.340
AUDIENCE: But you'd get an error
message back, at which

00:49:00.340 --> 00:49:01.570
point you could present
the account selector.

00:49:01.570 --> 00:49:05.000
CLAUDIO CHERUBINO: Another
approach could be to try and

00:49:05.000 --> 00:49:06.600
see if they use it again.

00:49:06.600 --> 00:49:11.230
But then if the user can't, you
don't know if it's because

00:49:11.230 --> 00:49:15.060
it's a wrong user or if because
there is some other

00:49:15.060 --> 00:49:16.070
problem, let's say.

00:49:16.070 --> 00:49:19.580
So I would say that right now,
the recommended approach is to

00:49:19.580 --> 00:49:22.170
show the dialogue every
time when it starts

00:49:22.170 --> 00:49:23.810
from the Drive up.

00:49:23.810 --> 00:49:27.470
But, as Alain said, we know it
is probably not the best user

00:49:27.470 --> 00:49:28.270
experience.

00:49:28.270 --> 00:49:31.460
So we might change this.

00:49:31.460 --> 00:49:32.178
AUDIENCE: Thanks.

00:49:32.178 --> 00:49:33.522
CLAUDIO CHERUBINO: Thank you.

00:49:33.522 --> 00:49:37.160
AUDIENCE: Hi, so if you want
to use Google Drive to hold

00:49:37.160 --> 00:49:40.080
say a text file for, like you
said before, a game save or a

00:49:40.080 --> 00:49:42.870
settings replication or
something, is there any way

00:49:42.870 --> 00:49:46.217
that you can prevent the user
from using anything but your

00:49:46.217 --> 00:49:48.870
application to access
that file?

00:49:48.870 --> 00:49:50.040
ALAIN VONGSOUVANH: Sorry can
you repeat the last part of

00:49:50.040 --> 00:49:51.310
the question?

00:49:51.310 --> 00:49:53.230
Prevent the user from?

00:49:53.230 --> 00:49:55.140
AUDIENCE: Accessing it through
Drive, or whatever else, and

00:49:55.140 --> 00:49:57.620
modifying it.

00:49:57.620 --> 00:49:59.990
ALAIN VONGSOUVANH: [INAUDIBLE]
tags, [INAUDIBLE], in the

00:49:59.990 --> 00:50:03.130
files metadata that you can
set and one is hidden.

00:50:03.130 --> 00:50:05.480
So you can set a file is hidden,
so it won't show on

00:50:05.480 --> 00:50:09.460
the Drive UI, but will still be
accessible through the API

00:50:09.460 --> 00:50:10.850
for your application.

00:50:10.850 --> 00:50:11.770
AUDIENCE: That wasn't.

00:50:11.770 --> 00:50:14.310
CLAUDIO CHERUBINO: In that case,
let's say, a smart user

00:50:14.310 --> 00:50:16.700
will be still able to
access it, right?

00:50:16.700 --> 00:50:18.800
ALAIN VONGSOUVANH: If a user
searched for it in the Drive

00:50:18.800 --> 00:50:22.210
UI, it will appear in
the search results.

00:50:22.210 --> 00:50:23.640
But it won't appear
by default.

00:50:23.640 --> 00:50:27.180
CLAUDIO CHERUBINO: So the thing
to remember here is that

00:50:27.180 --> 00:50:29.930
Drive is a user managed
storage.

00:50:29.930 --> 00:50:33.720
So the user has final decision
over it's files.

00:50:33.720 --> 00:50:36.150
You cannot just create a file
and prevent him from, let's

00:50:36.150 --> 00:50:38.390
say, deleting or tampering
with it.

00:50:38.390 --> 00:50:41.520
So if that is a problem, then
Drive is probably not the

00:50:41.520 --> 00:50:42.770
right solution.

00:50:44.590 --> 00:50:46.460
It's up to your app, but
I would say that

00:50:46.460 --> 00:50:47.500
just remember that.

00:50:47.500 --> 00:50:49.360
There's no real way
to prevent that.

00:50:49.360 --> 00:50:53.600
The user can always, always,
override your settings.

00:50:53.600 --> 00:50:56.800
AUDIENCE: You mentioned there
was a dependency on the Google

00:50:56.800 --> 00:51:00.770
Play Accounts Manager, what
was it called, the SO?

00:51:00.770 --> 00:51:03.710
Is there a time frame for when
this will be available?

00:51:03.710 --> 00:51:05.550
ALAIN VONGSOUVANH:
It's coming soon.

00:51:05.550 --> 00:51:07.510
Even us don't have
all the details,

00:51:07.510 --> 00:51:09.700
because it's from Android.

00:51:09.700 --> 00:51:10.680
But it's coming soon.

00:51:10.680 --> 00:51:14.370
If you went to the talk
yesterday on what's new in the

00:51:14.370 --> 00:51:17.170
Android SDK, or if you
watch it again, they

00:51:17.170 --> 00:51:18.110
will talk about it.

00:51:18.110 --> 00:51:20.060
And also, if you go
to the session,

00:51:20.060 --> 00:51:21.980
we mentioned writing--

00:51:21.980 --> 00:51:23.120
CLAUDIO CHERUBINO:
Right after this.

00:51:23.120 --> 00:51:26.050
ALAIN VONGSOUVANH: Yes,
Building Android Apps

00:51:26.050 --> 00:51:26.480
[INAUDIBLE]

00:51:26.480 --> 00:51:28.900
Web APIs from your
[INAUDIBLE].

00:51:28.900 --> 00:51:31.640
He will also mention
those new APIs from

00:51:31.640 --> 00:51:32.700
the Google Play services.

00:51:32.700 --> 00:51:35.520
CLAUDIO CHERUBINO: So actually
the section we're mentioning

00:51:35.520 --> 00:51:41.570
is specifically about this
authorization part which is

00:51:41.570 --> 00:51:43.420
part of this new Google
Play services.

00:51:43.420 --> 00:51:46.790
AUDIENCE: OK, as a second part
to this, during the demo you

00:51:46.790 --> 00:51:51.420
showed that whenever the user
needed to give authorization

00:51:51.420 --> 00:51:53.740
in the very beginning there
was a little notification

00:51:53.740 --> 00:51:54.870
thing at the top.

00:51:54.870 --> 00:51:58.550
Is there any way to make
it come forward to the

00:51:58.550 --> 00:51:59.980
foreground?

00:51:59.980 --> 00:52:02.350
Because I think most users won't
notice this, because

00:52:02.350 --> 00:52:03.670
even during the demo
you got other

00:52:03.670 --> 00:52:05.670
notifications at the top.

00:52:05.670 --> 00:52:08.080
I didn't know if this was
related to the app or not.

00:52:08.080 --> 00:52:09.230
How are you going to
let the user know?

00:52:09.230 --> 00:52:12.250
ALAIN VONGSOUVANH: So
I decided to use the

00:52:12.250 --> 00:52:15.270
notification system
because it's less

00:52:15.270 --> 00:52:16.560
invasive to the user.

00:52:16.560 --> 00:52:20.040
But it's coming from a
background Sync Adapter, and

00:52:20.040 --> 00:52:24.440
you can also decide to start
a new activity instead of

00:52:24.440 --> 00:52:26.340
pushing a notification
to the user.

00:52:26.340 --> 00:52:27.940
So this is up to your
application.

00:52:27.940 --> 00:52:29.190
CLAUDIO CHERUBINO: Thank you.

00:52:32.150 --> 00:52:35.262
ALAIN VONGSOUVANH: Any other
questions anyone?

00:52:35.262 --> 00:52:35.750
No?

00:52:35.750 --> 00:52:37.480
CLAUDIO CHERUBINO: So with that,
thank you very much.

