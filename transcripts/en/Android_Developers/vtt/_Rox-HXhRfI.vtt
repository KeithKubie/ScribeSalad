WEBVTT
Kind: captions
Language: en

00:00:00.750 --> 00:00:04.180
With the release of the Android
M Developer Preview SDK,

00:00:04.180 --> 00:00:06.090
developers are
jumping in to make

00:00:06.090 --> 00:00:09.620
sure their apps are up to date
with changes in the framework.

00:00:09.620 --> 00:00:11.500
I'm Wojtek Kalicinski,
and I'll show you

00:00:11.500 --> 00:00:14.260
how new features that we're
introducing in Android Studio

00:00:14.260 --> 00:00:17.700
1.3 can help you
with the transition.

00:00:17.700 --> 00:00:20.020
The single biggest
change in Android M

00:00:20.020 --> 00:00:22.580
is the overhaul of
the permission system.

00:00:22.580 --> 00:00:25.160
From now on, before
using certain APIs,

00:00:25.160 --> 00:00:27.050
you need to make
sure your app asks

00:00:27.050 --> 00:00:30.050
for the necessary
permissions during runtime.

00:00:30.050 --> 00:00:31.910
But given the large
code base, how do you

00:00:31.910 --> 00:00:35.460
know which methods actually
require this special handling?

00:00:35.460 --> 00:00:38.550
In Android Studio 1.3, we're
adding a [? lint rule ?]

00:00:38.550 --> 00:00:40.910
that detects methods
marked with a new "requires

00:00:40.910 --> 00:00:44.110
permissions" annotation
from the support library.

00:00:44.110 --> 00:00:45.766
The editor will
now highlight code

00:00:45.766 --> 00:00:48.140
that uses permissions which
are missing from your Android

00:00:48.140 --> 00:00:49.390
manifest.

00:00:49.390 --> 00:00:51.710
Moreover, if it detects
you haven't performed

00:00:51.710 --> 00:00:54.060
the necessary runtime
check in your code,

00:00:54.060 --> 00:00:56.070
it will suggest a quick fix.

00:00:56.070 --> 00:00:58.340
Static code analysis
like this can

00:00:58.340 --> 00:01:00.520
help you catch common
programming mistakes

00:01:00.520 --> 00:01:04.019
even before you run your app
on the device or emulator.

00:01:04.019 --> 00:01:05.860
The "requires
permission" annotation

00:01:05.860 --> 00:01:08.080
is actually defined
in the support library

00:01:08.080 --> 00:01:11.766
and works in tandem with a
Link Checker in Android Studio.

00:01:11.766 --> 00:01:13.390
Let's go through some
other annotations

00:01:13.390 --> 00:01:15.580
that you will find in
the latest release.

00:01:15.580 --> 00:01:18.370
Threading annotations guard
you against calling methods

00:01:18.370 --> 00:01:19.860
on the wrong thread.

00:01:19.860 --> 00:01:22.340
Let's say you're doing
some background processing,

00:01:22.340 --> 00:01:24.580
like in this AsyncTask example.

00:01:24.580 --> 00:01:28.470
Because the AsyncTask methods
are already properly annotated,

00:01:28.470 --> 00:01:30.600
the IDE will alert
you if you try

00:01:30.600 --> 00:01:33.080
changing the UI from
here by calling methods

00:01:33.080 --> 00:01:34.930
on the text view instance.

00:01:34.930 --> 00:01:36.680
On the other hand,
Android Studio

00:01:36.680 --> 00:01:40.380
knows it's safe to invoke
UI code in unpost execute,

00:01:40.380 --> 00:01:43.850
as it is marked with the
main thread annotation.

00:01:43.850 --> 00:01:47.120
Up next, the size and range
annotations for integers

00:01:47.120 --> 00:01:48.120
and floats.

00:01:48.120 --> 00:01:50.930
They can be used for controlling
the length of your arrays

00:01:50.930 --> 00:01:54.880
and strings, or making sure a
number is in a specified range.

00:01:54.880 --> 00:01:58.050
They're especially handy for
annotating method parameters,

00:01:58.050 --> 00:01:59.570
so that the caller
can immediately

00:01:59.570 --> 00:02:02.470
know what kind of
values are expected.

00:02:02.470 --> 00:02:04.390
If you want to study
those in more detail,

00:02:04.390 --> 00:02:07.150
as well as learn about other
annotations, like check result

00:02:07.150 --> 00:02:09.810
and call [? super, ?] click
through to the documentation

00:02:09.810 --> 00:02:11.250
here.

00:02:11.250 --> 00:02:13.750
Remember that you don't have
to rely on the annotations

00:02:13.750 --> 00:02:16.140
that we've included in
the Android framework.

00:02:16.140 --> 00:02:18.810
You are free to add them to
your own methods and classes

00:02:18.810 --> 00:02:20.400
so that anyone
using your code will

00:02:20.400 --> 00:02:22.360
benefit from the
additional checks performed

00:02:22.360 --> 00:02:24.680
by Android Studio.

00:02:24.680 --> 00:02:27.840
Speaking of sharing
code, Android Studio 1.3

00:02:27.840 --> 00:02:31.720
introduces support for hiding
resources in library modules.

00:02:31.720 --> 00:02:34.960
Perhaps it's easiest to
demonstrate on an example.

00:02:34.960 --> 00:02:37.900
Here's what used to happen when
you tried to use autocompletion

00:02:37.900 --> 00:02:41.610
in a Layout file when you have
appcompat in your dependencies.

00:02:41.610 --> 00:02:43.870
And here is the
same operation using

00:02:43.870 --> 00:02:47.670
the newest versions of both
studio and the support library.

00:02:47.670 --> 00:02:50.070
Most of the resources
we see on the left

00:02:50.070 --> 00:02:52.790
are used internally by the
creators of the library

00:02:52.790 --> 00:02:54.550
and were never meant
to be available

00:02:54.550 --> 00:02:56.650
for third-party developers.

00:02:56.650 --> 00:02:58.460
Not only do they
introduce clutter

00:02:58.460 --> 00:03:00.830
and pollute your
project's name space,

00:03:00.830 --> 00:03:03.070
things might also
break with any update

00:03:03.070 --> 00:03:06.170
if you decide to use
them in your layouts.

00:03:06.170 --> 00:03:08.340
To define which resources
should be visible

00:03:08.340 --> 00:03:10.490
for users of your
library, simply

00:03:10.490 --> 00:03:13.720
put a public XML file
in your values folder.

00:03:13.720 --> 00:03:17.020
Provide an entry containing the
type and name of each resource

00:03:17.020 --> 00:03:18.860
you want to set as public.

00:03:18.860 --> 00:03:21.380
This information will also
be bundled and available

00:03:21.380 --> 00:03:23.890
to Android Studio if
you decide to distribute

00:03:23.890 --> 00:03:26.610
your library in AAR format.

00:03:26.610 --> 00:03:29.580
With the release of 1.3,
we're bringing more tools

00:03:29.580 --> 00:03:32.470
that were previously available
as external applications

00:03:32.470 --> 00:03:34.480
into Android Studio.

00:03:34.480 --> 00:03:36.390
You can now open your
object allocation

00:03:36.390 --> 00:03:39.080
trace files in the new
allocation tracker, which

00:03:39.080 --> 00:03:41.630
shows you a visual overview
of where allocations

00:03:41.630 --> 00:03:43.680
happen in your code,
and gives you a way

00:03:43.680 --> 00:03:45.970
to dig right into the data.

00:03:45.970 --> 00:03:48.440
Another memory inspection
tool that is now available

00:03:48.440 --> 00:03:51.410
right in the IDE
is the HPROF viewer

00:03:51.410 --> 00:03:53.700
for opening hprof profiles.

00:03:53.700 --> 00:03:55.570
It gives you access
to the reference tree

00:03:55.570 --> 00:03:58.950
of any object in memory, as
well as a property inspector,

00:03:58.950 --> 00:04:01.790
similar to the variable
debugger window.

00:04:01.790 --> 00:04:03.640
Use it to examine
the state of objects

00:04:03.640 --> 00:04:06.150
at the moment when the
memory snapshot was taken,

00:04:06.150 --> 00:04:09.070
and to track down any rogue
references that prevent them

00:04:09.070 --> 00:04:11.440
from being garbage collected.

00:04:11.440 --> 00:04:13.940
By the way, we've also
added small improvements

00:04:13.940 --> 00:04:16.399
in the traditional
debugger interface.

00:04:16.399 --> 00:04:19.550
From now on, when you inspect a
variable that holds a resource

00:04:19.550 --> 00:04:22.740
identifier, you can easily
see the human-readable name

00:04:22.740 --> 00:04:26.700
instead by switching to the
Android typed integer view.

00:04:26.700 --> 00:04:30.380
There are many more new
features in Android Studio 1.3--

00:04:30.380 --> 00:04:32.500
integration with the
data binding library,

00:04:32.500 --> 00:04:35.750
adding developer services from
the project structure dialogue,

00:04:35.750 --> 00:04:38.040
live code templates,
and finally,

00:04:38.040 --> 00:04:42.200
a preview of the upcoming
C/C++ editing and NDK support

00:04:42.200 --> 00:04:43.850
in the IDE.

00:04:43.850 --> 00:04:47.160
So upgrade Android Studio
now, and as always,

00:04:47.160 --> 00:04:50.540
please report any bugs in
our Google+ community here.

00:04:50.540 --> 00:04:51.290
Thanks.

00:04:51.290 --> 00:04:53.020
[MUSIC PLAYING]

