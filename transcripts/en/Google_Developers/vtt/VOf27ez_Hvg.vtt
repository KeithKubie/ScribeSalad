WEBVTT
Kind: captions
Language: en

00:00:03.129 --> 00:00:04.129
&gt;&gt;Ray Cromwell: Hi.

00:00:04.129 --> 00:00:05.129
Good afternoon.

00:00:05.129 --> 00:00:07.729
Welcome to the history and future of Google
Web Toolkit.

00:00:07.729 --> 00:00:15.030
My name is ray Cromwell, I'm tech lead for
GWT.

00:00:15.030 --> 00:00:18.220
So I'd like to just jump right in because
we've got seven years, believe it or not,

00:00:18.220 --> 00:00:20.109
of history to cover.

00:00:20.109 --> 00:00:25.519
So, often people actually come up to me and
say why did Google even create GWT in the

00:00:25.519 --> 00:00:27.499
first place?

00:00:27.499 --> 00:00:30.409
Isn't JavaScript good enough for you?

00:00:30.409 --> 00:00:33.350
Why do you need Java for Web programming?

00:00:33.350 --> 00:00:39.400
So I think it's instrumental to go back and
look at the context in which GWT was conceived

00:00:39.400 --> 00:00:41.940
seven years ago.

00:00:41.940 --> 00:00:47.260
So if you think back seven years ago, which
is an eternity in Web time, Web 2.0 was just

00:00:47.260 --> 00:00:51.670
starting, AJAX apps, rich internet applications
were just being created, the first sort of

00:00:51.670 --> 00:00:52.990
series of them.

00:00:52.990 --> 00:00:57.060
And people were actually thinking back then
that the future of rich internet applications

00:00:57.060 --> 00:01:00.850
was going to be something like a war between
Adobe Air and Microsoft Silverlight.

00:01:00.850 --> 00:01:02.720
I mean, there were conventions on this.

00:01:02.720 --> 00:01:06.900
And people did not think that the browsers
were powerful enough to do really, really

00:01:06.900 --> 00:01:08.819
capable applications.

00:01:08.819 --> 00:01:15.829
And then Google released Gmail in 2004 and
Google Maps in 2005, and I think that started

00:01:15.829 --> 00:01:20.850
to change people's imagination because for
the first time, especially with Google Maps,

00:01:20.850 --> 00:01:26.439
people saw an application that was written
in the Web that was fast, it was fluid, it

00:01:26.439 --> 00:01:28.270
was -- in fact, this was before touch.

00:01:28.270 --> 00:01:29.270
It was touchable.

00:01:29.270 --> 00:01:32.170
The way you interacted with the Google Maps
application is you grabbed it with the mouse

00:01:32.170 --> 00:01:34.450
pointer and flung the map around.

00:01:34.450 --> 00:01:39.079
So that fired up people's imagination and
people really wanted to start building rich

00:01:39.079 --> 00:01:40.479
Web applications like this.

00:01:40.479 --> 00:01:46.130
But at the time if you looked around and surveyed
the landscape there wasn't a lot of good tools

00:01:46.130 --> 00:01:48.560
to do this in just raw JavaScript by hand.

00:01:48.560 --> 00:01:52.869
In fact, jQuery, which is really the most
popular library out there, wasn't even released

00:01:52.869 --> 00:01:55.240
until 2006.

00:01:55.240 --> 00:01:59.869
And I think probably Bruce Johnson and Joe
Weber who created GWT were sitting around

00:01:59.869 --> 00:02:03.450
somewhere in a cafe and saying How can we
solve this problem without building our own

00:02:03.450 --> 00:02:09.120
JavaScript bidi, JavaScript testing frameworks
and build servers and all this other kind

00:02:09.120 --> 00:02:11.130
of stuff that's been there for a long time.

00:02:11.130 --> 00:02:16.310
And if you look at Java they were like wow,
it has seven million programmers, it has intelliJ

00:02:16.310 --> 00:02:22.310
and Eclipse, it's got Ant and Maven and it's
got J Unit and Test Mg and it has bug analysis

00:02:22.310 --> 00:02:25.790
software and dependency package management
and all this stuff.

00:02:25.790 --> 00:02:28.990
The only thing you can't do with it is you
can't write a client side Web application

00:02:28.990 --> 00:02:32.110
except if you want to do applets or something.

00:02:32.110 --> 00:02:36.420
If I could only compile Java to JavaScript
it would close the loop and we would get massive

00:02:36.420 --> 00:02:37.980
leverage on that ecosystem.

00:02:37.980 --> 00:02:44.780
So that I think was the foundation context
for GWT.

00:02:44.780 --> 00:02:46.390
So it's evolved a lot since then.

00:02:46.390 --> 00:02:52.930
The first version of GWT was released in 2006,
followed very shortly by a few other versions

00:02:52.930 --> 00:02:55.400
that really didn't add much to fix bugs.

00:02:55.400 --> 00:03:01.180
The really important thing is with GWT 1.3
in 2007 early on we released it as open source.

00:03:01.180 --> 00:03:05.970
And for the first time everyone could contribute
to GWT if they wanted to.

00:03:05.970 --> 00:03:09.840
And it was also the first to get OSX support.

00:03:09.840 --> 00:03:15.380
Later in 2007 we added J Unit testing framework
support as well as automatic sprite sheeting.

00:03:15.380 --> 00:03:20.720
This was another first because back in 2007
we were automatically creating CSS sprite

00:03:20.720 --> 00:03:25.310
sheets on the fly well before actually people
had built tools to do this for hand-coded

00:03:25.310 --> 00:03:26.310
JavaScript.

00:03:26.310 --> 00:03:29.061
But the biggest thing people were asking us
over and over again is when are you going

00:03:29.061 --> 00:03:30.061
to have Java 5 support?

00:03:30.061 --> 00:03:33.240
We want generics, we want enoms, we want auto
boxing, all that stuff.

00:03:33.240 --> 00:03:38.860
So they did a fire drill, they crunched down
and in 2008 they got Java 1.5 support.

00:03:38.860 --> 00:03:41.930
In fact, 1.5 was one of the biggest releases.

00:03:41.930 --> 00:03:47.410
It added not just Java 1.5 support, but this
new overlay type system that allowed you to

00:03:47.410 --> 00:03:51.390
link with JavaScript for the first time with
zero overhead in the compiler.

00:03:51.390 --> 00:03:57.390
It had a new low level DOM API, and we added
CSS themes to the widgets for the first time,

00:03:57.390 --> 00:04:01.319
so everyone who used GWT early on knew that
the widgets no style whatsoever.

00:04:01.319 --> 00:04:04.000
Out of the box it just looked like nothing.

00:04:04.000 --> 00:04:08.780
So we added a couple of CSS themes so at least
out of the box someone could actually look

00:04:08.780 --> 00:04:10.890
at the app and not puke.

00:04:10.890 --> 00:04:12.980
[ Laughter ]
&gt;&gt;Ray Cromwell: And we added this thing called

00:04:12.980 --> 00:04:17.650
linkers which has some useful things that
I can perhaps get into later.

00:04:17.650 --> 00:04:23.870
And with 2009 we basically redid the event
handler system to make event handling more

00:04:23.870 --> 00:04:25.720
generic and not just tied to the DOM.

00:04:25.720 --> 00:04:29.320
Now you could fire custom events and reuse
events on both the client and in your server

00:04:29.320 --> 00:04:30.320
code.

00:04:30.320 --> 00:04:32.340
We added code coverage support with Emma.

00:04:32.340 --> 00:04:36.071
We added war directory support so you could
just point our tools at a war directory and

00:04:36.071 --> 00:04:37.220
it would work.

00:04:37.220 --> 00:04:41.280
And we added a parallelized build system that
today is mostly used by Google.

00:04:41.280 --> 00:04:46.180
In 2009 we had a minor release that mostly
just added support.

00:04:46.180 --> 00:04:51.930
2009, though, was the year of a really big
release, and that was GWT 2.0.

00:04:51.930 --> 00:04:53.770
And GWT 2.0 was an overhaul.

00:04:53.770 --> 00:04:55.850
It was the biggest release ever.

00:04:55.850 --> 00:05:00.210
We added a totally new dev mode so that you
could develop in development mode with any

00:05:00.210 --> 00:05:01.270
browser you liked.

00:05:01.270 --> 00:05:05.500
So whether it was Chrome or whether it was
IE, whether it was Safari, Firefox, you had

00:05:05.500 --> 00:05:06.600
the same experience.

00:05:06.600 --> 00:05:13.040
Previously we were bundling a really old version
of Firefox or IE directly into the GWT toolkit,

00:05:13.040 --> 00:05:16.290
so you couldn't even upgrade the browser you
were developing with.

00:05:16.290 --> 00:05:19.410
We added draft compilation to speed up your
compiles.

00:05:19.410 --> 00:05:22.390
We added this new templating system called
UI binder.

00:05:22.390 --> 00:05:27.780
We added layout panels for really efficient
CSS style layout.

00:05:27.780 --> 00:05:31.920
And we added the code splitter, which was
an overhaul to compiler to allow you to tell

00:05:31.920 --> 00:05:36.450
the compiler that certain pieces of code don't
need to be loaded when your app starts up,

00:05:36.450 --> 00:05:38.540
but they can be loaded later.

00:05:38.540 --> 00:05:42.550
And a new system for bundling resources into
your application, which was called client

00:05:42.550 --> 00:05:46.070
bundle, which was the evolution of image bundle,
which did sprite sheets.

00:05:46.070 --> 00:05:51.600
With client bundle we also bundle in CSS and
we have a CSS compiler that performs optimizations

00:05:51.600 --> 00:05:54.100
on the CSS to shrink that down as well.

00:05:54.100 --> 00:06:01.590
In 2010 we partnered with VMWare to support
their cloud, and that necessitated a new RPC

00:06:01.590 --> 00:06:06.910
system that was not as tied to Java as GWT
RPC was, and that was request factory, which

00:06:06.910 --> 00:06:10.650
was a more JSON oriented RPC framework.

00:06:10.650 --> 00:06:13.100
We did data binding with the editor framework.

00:06:13.100 --> 00:06:19.230
JSR 303 bean validation support, model view
presenter pattern support, and a new system

00:06:19.230 --> 00:06:25.040
of cell widgets which are efficient widgets
for rendering like tables and grids.

00:06:25.040 --> 00:06:28.250
Then we had a couple of minor releases.

00:06:28.250 --> 00:06:33.360
We acquired this company called Instantiations
and we released as open source WYSIWYG designer

00:06:33.360 --> 00:06:34.800
for GWT UIs.

00:06:34.800 --> 00:06:39.990
We added a lot of HTML5 support, like canvas
and storage and things like that.

00:06:39.990 --> 00:06:46.350
And we dropped in a little bit of stuff for
Google in terms of enhancing app integration.

00:06:46.350 --> 00:06:50.020
And then finally, in the last release we sort
of started to think that we need to move off

00:06:50.020 --> 00:06:54.460
Ant and get more towards Maven, so we sort
of Mavenized it.

00:06:54.460 --> 00:06:56.900
So that's where we were.

00:06:56.900 --> 00:06:59.260
That's the history of GWT.

00:06:59.260 --> 00:07:00.389
So where are we today?

00:07:00.389 --> 00:07:05.430
Well, as far as we can tell the SDK has been
downloaded over a million times, but that's

00:07:05.430 --> 00:07:09.080
probably not an accurate number because a
lot of people are getting it from Maven central

00:07:09.080 --> 00:07:10.080
now.

00:07:10.080 --> 00:07:13.820
We have over 100,000 monthly active developers.

00:07:13.820 --> 00:07:17.830
Because software basically periodically checks
to see if there's a new version to give you

00:07:17.830 --> 00:07:20.150
a notification that GWT 2.5 is available.

00:07:20.150 --> 00:07:24.680
So we at least know of Eclipse users there's
100,000 active developers.

00:07:24.680 --> 00:07:28.300
We have deep integration with Eclipse through
the Google Eclipse plug-in with intelliJ and

00:07:28.300 --> 00:07:30.740
with VMWare spring tools.

00:07:30.740 --> 00:07:36.350
And our products are used widely within Google,
including our biggest product, which is AdWords,

00:07:36.350 --> 00:07:41.270
Google Flights, Offers, Google Groups, Blogger,
many that you haven't even imagined that were

00:07:41.270 --> 00:07:43.040
written in GWT.

00:07:43.040 --> 00:07:44.180
And we did a couple of fun things.

00:07:44.180 --> 00:07:50.610
We ported Quake, first-person shooter in 2009
using GWT to the Web and it ran smoothly at

00:07:50.610 --> 00:07:54.960
60 frames per second in a browser, and Angry
Birds for the Web, if you've ever played for

00:07:54.960 --> 00:07:57.570
Chrome, is written in GWT.

00:07:57.570 --> 00:08:02.350
So GWT today is a mature, high quality code
base.

00:08:02.350 --> 00:08:03.620
What more could we do?

00:08:03.620 --> 00:08:06.940
Is there anything left to actually do to improve
GWT?

00:08:06.940 --> 00:08:11.740
And I'm happy to say over the last year we've
done a lot.

00:08:11.740 --> 00:08:18.550
In fact, the GWT 2.5 release that we're introducing
today is the largest release we've done, I

00:08:18.550 --> 00:08:19.550
think, since GWT 2.1.

00:08:19.550 --> 00:08:25.630
We've added more stuff in 2.5 than we did
in 2.2, 2.3, 2.4 put together.

00:08:25.630 --> 00:08:27.580
Let me go over a few of them.

00:08:27.580 --> 00:08:31.509
First, we did a lot of work on the compiler.

00:08:31.509 --> 00:08:36.150
So out of the box with no changes to your
code, if you just recompile your application

00:08:36.150 --> 00:08:38.620
you will get a substantial code size reduction.

00:08:38.620 --> 00:08:43.810
For example, the showcase application, if
you just recompile the GWT 2.5, 14% smaller

00:08:43.810 --> 00:08:45.040
JavaScript.

00:08:45.040 --> 00:08:50.050
And that is undercounting because the GWT
user library has added a lot more bloat in

00:08:50.050 --> 00:08:52.140
terms of the underlying library code.

00:08:52.140 --> 00:08:54.100
So it probably would have been even smaller.

00:08:54.100 --> 00:08:56.240
The mobile Web app, eight percent smaller.

00:08:56.240 --> 00:08:57.240
Your mileage may vary.

00:08:57.240 --> 00:08:59.570
The larger the app probably the better the
benefit.

00:08:59.570 --> 00:09:02.800
Smaller apps, smaller benefit.

00:09:02.800 --> 00:09:04.760
But we can do better.

00:09:04.760 --> 00:09:09.500
We also integrated the JavaScript closure
compiler that is used at Google for like Gmail

00:09:09.500 --> 00:09:13.610
and Google+ and Google Docs and a lot of other
large JavaScript applications.

00:09:13.610 --> 00:09:19.170
And the closure compiler has a lot of really
low level JavaScript optimizations that we

00:09:19.170 --> 00:09:24.360
never really would think to do in GWT because
it's Java oriented, things like putting bang

00:09:24.360 --> 00:09:30.460
zero instead of true or if you have a number
like 10,000, rewrite it as 1E4 in scientific

00:09:30.460 --> 00:09:31.460
language.

00:09:31.460 --> 00:09:32.600
It saves off two bytes.

00:09:32.600 --> 00:09:37.860
So here you can see if you enable closure
compiler you get an extra five percent co-size

00:09:37.860 --> 00:09:38.860
reduction.

00:09:38.860 --> 00:09:44.279
So now versus GWT 2.4, recompiled with the
switch closure compiler, we're 20% smaller

00:09:44.279 --> 00:09:46.970
than GWT 2.4.

00:09:46.970 --> 00:09:50.180
But we can do better.

00:09:50.180 --> 00:09:54.450
We've also looked at the code splitter and
so the showcase application, for example,

00:09:54.450 --> 00:09:55.460
does a live code splitting.

00:09:55.460 --> 00:09:58.520
If you're not aware of what code splitting
does, it allows you to pick parts of your

00:09:58.520 --> 00:10:03.690
application, like a composed window or settings
page, that may not be displayed immediately

00:10:03.690 --> 00:10:05.890
when your application is loaded up.

00:10:05.890 --> 00:10:10.020
You can mark them as split points that the
compiler has the option of deferring and loading

00:10:10.020 --> 00:10:11.020
later.

00:10:11.020 --> 00:10:14.730
So it can move that code out into a separate
JS file, shrinking the initial size of the

00:10:14.730 --> 00:10:16.240
JS that has to be loaded.

00:10:16.240 --> 00:10:21.580
So any bit of code that is exclusive to one
particular fragment and is not shared is called

00:10:21.580 --> 00:10:23.000
exclusive code.

00:10:23.000 --> 00:10:25.180
What I'm showing up here is there's split
points.

00:10:25.180 --> 00:10:28.899
They have some code that is only referenced
within those split points, and if there is

00:10:28.899 --> 00:10:33.710
some like, let's say, job util list that both
of them use, and so any time there's shared

00:10:33.710 --> 00:10:38.240
code we put that code in a shared fragment
called the leftovers fragment.

00:10:38.240 --> 00:10:40.300
Here's the problem.

00:10:40.300 --> 00:10:44.440
As you continue to increase the number of
split points in your application, the probability

00:10:44.440 --> 00:10:49.860
of there being shared code between any two
split points rises.

00:10:49.860 --> 00:10:54.020
And what that means is that that leftovers
fragment at the bottom gets larger and larger.

00:10:54.020 --> 00:10:57.850
So when your application loads up, before
it can run any of these split points it has

00:10:57.850 --> 00:11:01.370
to load the leftovers fragment because it's
a shared library.

00:11:01.370 --> 00:11:04.399
So we needed to do something about that leftovers
fragment.

00:11:04.399 --> 00:11:07.390
What we do is we perform a kind of clustering.

00:11:07.390 --> 00:11:12.980
We analyze all the fragments that you've split
out and looked for ones that are most similar,

00:11:12.980 --> 00:11:17.270
that basically use the most amount of code
together, and we merge them into one fragment.

00:11:17.270 --> 00:11:22.180
And hopefully there's a lot of shared code
that no longer is used by anybody else.

00:11:22.180 --> 00:11:27.700
It's only used now within that new merged
fragment that you see in the middle of the

00:11:27.700 --> 00:11:28.700
screen.

00:11:28.700 --> 00:11:31.920
That leaves the leftovers fragment down at
the bottom empty where we've hoisted some

00:11:31.920 --> 00:11:35.140
code out of it into this new shared fragment.

00:11:35.140 --> 00:11:40.180
So what can of effect can this have on an
application like Showcase?

00:11:40.180 --> 00:11:45.149
39% reduction in code size of the initial
JavaScript that your application has to load

00:11:45.149 --> 00:11:48.080
before it can present the UI to the user.

00:11:48.080 --> 00:11:51.640
The first time I saw this I thought we had
a bug in the compiler and it was wrong, it

00:11:51.640 --> 00:11:56.370
was removing too much code, but I've measured
it several times and it's true.

00:11:56.370 --> 00:12:00.920
39% code size reduction.

00:12:00.920 --> 00:12:03.070
But there are other things we had to do.

00:12:03.070 --> 00:12:07.110
We had to improve the overall diagnostics
of the compiler.

00:12:07.110 --> 00:12:10.490
Things that you might rely on like if someone
is running your application and a user hits

00:12:10.490 --> 00:12:14.130
an exception, how are you going to find out
what happened and what line of code it happened

00:12:14.130 --> 00:12:15.130
on?

00:12:15.130 --> 00:12:18.610
So there's this new standard that Google has
proposed and other people have adopted called

00:12:18.610 --> 00:12:19.920
source maps.

00:12:19.920 --> 00:12:24.620
What it does is whenever you compile anything
to JavaScript, be it Java, Closure, Coffee

00:12:24.620 --> 00:12:29.170
Script, whatever, we write out the standardized
mapping file which says this piece of Java

00:12:29.170 --> 00:12:33.040
or Coffee Script or whatever source language
became this bit of obfuscated JavaScript in

00:12:33.040 --> 00:12:34.040
the output.

00:12:34.040 --> 00:12:39.410
But having that bidirectional mapping, now
when you go to debug or inspect obfuscated

00:12:39.410 --> 00:12:42.830
compiled JavaScript code, it can actually
tell you the original line of code that it

00:12:42.830 --> 00:12:47.600
came from in your source language before you
messed with it.

00:12:47.600 --> 00:12:52.500
So this permits de-obfuscation of script,
but it allows GWT, more importantly, to construct

00:12:52.500 --> 00:12:55.100
perfectly accurate stack traces.

00:12:55.100 --> 00:12:59.910
So right now today if the user encounters
like an exception in one of the GWT applications,

00:12:59.910 --> 00:13:04.661
you get the line number of the method, the
name of the method that it occurred in, but

00:13:04.661 --> 00:13:08.779
you actually don't actually get the actual
line number of code within the method that

00:13:08.779 --> 00:13:09.980
it occurred on.

00:13:09.980 --> 00:13:15.339
And in fact, if the compiler has inline several
methods and rolled them up into one, you actually

00:13:15.339 --> 00:13:19.440
don't even know what method it occurred in
because now those small inline methods are

00:13:19.440 --> 00:13:20.860
not even on the call stack.

00:13:20.860 --> 00:13:24.769
They've been basically moved in to the parent
caller.

00:13:24.769 --> 00:13:25.860
Not so with source maps.

00:13:25.860 --> 00:13:30.320
Now you will actually know the exact original
function, regardless of optimizations, where

00:13:30.320 --> 00:13:31.820
the error occurred.

00:13:31.820 --> 00:13:32.940
It's Chrome only for now.

00:13:32.940 --> 00:13:38.190
Firefox has demoed it and they promise to
support it.

00:13:38.190 --> 00:13:40.310
Okay.

00:13:40.310 --> 00:13:44.880
So this kind of dovetails into super dev mode
because it's what enables it.

00:13:44.880 --> 00:13:45.880
But here's the problem.

00:13:45.880 --> 00:13:51.650
Over the years people have complained we haven't
kept our dev mode, C++ plug-ins up to date.

00:13:51.650 --> 00:13:54.911
Basically we use these native plug-ins that
we install into the browser so that when you

00:13:54.911 --> 00:13:59.371
run in dev mode and it's running Java code
and it has to remote control the browser and

00:13:59.371 --> 00:14:04.050
tell the browser add a DOM element somewhere,
it talks to this plug-in, which then remotes

00:14:04.050 --> 00:14:06.829
controls the browser to actually update the
browser.

00:14:06.829 --> 00:14:13.170
The problem is that the browser vendors have
accelerated their iteration on their browser.

00:14:13.170 --> 00:14:17.720
Used to be they would release a browser once
a year, Firefox 4, 5, it would take a year.

00:14:17.720 --> 00:14:21.670
That would give the GWT team more than enough
time to actually update three or four different

00:14:21.670 --> 00:14:24.529
plug-ins on three or four different operating
systems.

00:14:24.529 --> 00:14:28.600
But now we simply can't handle it because
every six weeks they're releasing a new version.

00:14:28.600 --> 00:14:35.850
Like, for example, every time Firefox releases
a new version of Firefox it breaks the C++

00:14:35.850 --> 00:14:36.980
plug-ins that we have.

00:14:36.980 --> 00:14:38.600
So we needed a new solution.

00:14:38.600 --> 00:14:42.600
Plus on things like mobile devices like iOS
you can't even have plug-ins in the browser,

00:14:42.600 --> 00:14:47.180
so how would you debug a GWT application on
an iPad?

00:14:47.180 --> 00:14:51.850
So what if we could create a GWT compiler
that was so fast we could compile your Java

00:14:51.850 --> 00:14:53.300
code in one second?

00:14:53.300 --> 00:14:54.742
Biggest complaint we get is the compiler is
slow.

00:14:54.742 --> 00:14:59.930
So what if we could speed it up so we could
compile your code in one second or 10 seconds?

00:14:59.930 --> 00:15:04.899
Then you could actually iterate by loading
up JavaScript into their browser.

00:15:04.899 --> 00:15:09.740
And with the combination of source maps, you
actually could debug source level Java code

00:15:09.740 --> 00:15:10.740
right in your browser.

00:15:10.740 --> 00:15:17.950
So let me show you a demo of that.

00:15:17.950 --> 00:15:22.320
So I've got the GWT code server running, which
is the new super dev mode server.

00:15:22.320 --> 00:15:23.320
It's a servlet.

00:15:23.320 --> 00:15:26.380
It starts up on your GWT module and basically
it's waiting there for me to connect.

00:15:26.380 --> 00:15:28.589
It's going to serve up the compiled code.

00:15:28.589 --> 00:15:36.250
So I'm going to go to this application I have
called Silver Comet, and hopefully I've got

00:15:36.250 --> 00:15:45.610
a network connection and it can load up.

00:15:45.610 --> 00:15:52.480
I might be in trouble here.

00:15:52.480 --> 00:16:01.339
If that doesn't, what I'll do is I have another
version.

00:16:01.339 --> 00:16:04.860
Here let's do this.

00:16:04.860 --> 00:16:11.750
I'll just skip ahead for a second and I'll
come back to that and show it to you.

00:16:11.750 --> 00:16:12.750
All right.

00:16:12.750 --> 00:16:15.310
Let's let that go for a second.

00:16:15.310 --> 00:16:16.310
Okay.

00:16:16.310 --> 00:16:17.310
There it is.

00:16:17.310 --> 00:16:21.730
So this is an application, it's graphing marathon
data from the Silver Comet half-marathon in

00:16:21.730 --> 00:16:22.730
Atlanta.

00:16:22.730 --> 00:16:26.410
You can see I can do things like I can hit
a character, click on a person, it tells me

00:16:26.410 --> 00:16:28.540
where the runner is.

00:16:28.540 --> 00:16:37.160
If I were to try to debug this today, I would
bring up the Chrome inspector and I go to

00:16:37.160 --> 00:16:39.130
scripts.

00:16:39.130 --> 00:16:42.920
You can see that it's basically compiled JavaScript.

00:16:42.920 --> 00:16:47.389
So it would be really hard to like set a break
point in here and debug it.

00:16:47.389 --> 00:16:52.760
So let's go down to here and click on this
little -- in the Chrome inspector this little

00:16:52.760 --> 00:16:57.110
gearbox and say enable source maps.

00:16:57.110 --> 00:17:00.690
So now I'm going to click this -- I'm going
to go back to the code server and I'm going

00:17:00.690 --> 00:17:06.159
to drag this bookmarklet up here and I'm going
to turn on super dev mode.

00:17:06.159 --> 00:17:10.669
So hopefully it's going to reload.

00:17:10.669 --> 00:17:15.939
I think my network is having problems.

00:17:15.939 --> 00:17:16.939
Okay.

00:17:16.939 --> 00:17:18.959
There it is.

00:17:18.959 --> 00:17:26.190
I'm going to click super dev mode, click compile.

00:17:26.190 --> 00:17:29.350
And it's compiling.

00:17:29.350 --> 00:17:34.170
And usually this takes like less than two
seconds, but network is loading already, so

00:17:34.170 --> 00:17:35.660
it's already finished, but it's loading on
the bottom.

00:17:35.660 --> 00:17:37.510
There we go.

00:17:37.510 --> 00:17:42.500
Now it's reloading the compiled JavaScript.

00:17:42.500 --> 00:17:44.450
It's already been compiled at this point.

00:17:44.450 --> 00:17:50.919
I go over to this window over here and I can
probably show you compiled in 0.979 seconds,

00:17:50.919 --> 00:17:53.130
if you can see that.

00:17:53.130 --> 00:17:58.770
So the issue is there is some kind of network
thing that's hurting my demo here.

00:17:58.770 --> 00:18:05.870
Let me bring up the inspector and see if I
can show this to you.

00:18:05.870 --> 00:18:06.870
Oh, there it is.

00:18:06.870 --> 00:18:10.400
So it's back up.

00:18:10.400 --> 00:18:16.350
I'm going to go to the scripts tag now, scripts.

00:18:16.350 --> 00:18:20.809
Now you can see I have Java code in here.

00:18:20.809 --> 00:18:26.110
[ Applause ]
&gt;&gt;Ray Cromwell: And I promise you it won't

00:18:26.110 --> 00:18:28.070
take this long when you actually do it on
your own computer.

00:18:28.070 --> 00:18:30.370
I'm going to go and I can set a break point
here.

00:18:30.370 --> 00:18:31.410
See that?

00:18:31.410 --> 00:18:34.670
And I will come up here and hit a character
and you can see it doing a break point.

00:18:34.670 --> 00:18:36.840
I can hit play and you see the things up there?

00:18:36.840 --> 00:18:38.500
So I'm stepping through Java code.

00:18:38.500 --> 00:18:41.630
In fact, you can do something in super dev
mode that you could never do in regular dev

00:18:41.630 --> 00:18:42.630
mode.

00:18:42.630 --> 00:18:43.679
I'm going to step down into a JSNI function.

00:18:43.679 --> 00:18:54.510
I'm going to step into this item shell, step
into remove property, JSNI JavaScript function.

00:18:54.510 --> 00:18:57.070
You could never do that before in regular
dev mode.

00:18:57.070 --> 00:18:58.190
[Applause].

00:18:58.190 --> 00:19:04.910
So let's go back to slides.

00:19:04.910 --> 00:19:06.030
Okay.

00:19:06.030 --> 00:19:08.270
UI binder.

00:19:08.270 --> 00:19:10.770
If you use UI binder we have more good news
for you.

00:19:10.770 --> 00:19:16.910
First of all, if you sell widgets, you can
now actually -- you don't have to write Java

00:19:16.910 --> 00:19:21.770
code, you can actually specify the template
for a cell that renders in a table grid or

00:19:21.770 --> 00:19:25.380
in a tree with a UI binder template.

00:19:25.380 --> 00:19:29.330
There's sort of a new interface called UI
render and it does that.

00:19:29.330 --> 00:19:34.740
Secondly, we have optimized the way UI binder
constructs the HTML and injects into the page

00:19:34.740 --> 00:19:35.740
significantly.

00:19:35.740 --> 00:19:39.760
We have vastly reduced the number of DOM operations
down to just a few.

00:19:39.760 --> 00:19:46.010
The end result of that is start-up latency
for Orchid, which also uses GWT was reduced

00:19:46.010 --> 00:19:50.530
by 20%, and the rendering speed it was taking
to refresh the HTML on the page went up by

00:19:50.530 --> 00:19:51.920
300%.

00:19:51.920 --> 00:19:56.049
So not just the compiler has been improved,
but the speed of the widgets has been improved

00:19:56.049 --> 00:20:00.190
up to 300%.

00:20:00.190 --> 00:20:06.400
And we've also started the beginnings of adding
support for using the same I 18 and message

00:20:06.400 --> 00:20:09.450
class used on the client side in the server.

00:20:09.450 --> 00:20:14.799
So using GWT.create in the server, and what
that will get to is sometimes you want to

00:20:14.799 --> 00:20:19.800
share code between the client server in terms
of internationalization resource bundles,

00:20:19.800 --> 00:20:22.110
this will basically get you there eventually.

00:20:22.110 --> 00:20:27.590
And we have updated the ARIA library support
in the GWT to the newest W3C standard.

00:20:27.590 --> 00:20:33.890
If you have accessibility concerns, we have
better support for that.

00:20:33.890 --> 00:20:42.230
Lastly, we're introducing a new experimental
library called Elemental.

00:20:42.230 --> 00:20:44.490
So what is Elemental?

00:20:44.490 --> 00:20:49.531
Well, over the years, as I said, the browser
vendors are iterating faster and faster, every

00:20:49.531 --> 00:20:54.010
week they are adding a new HTML5 API into
JavaScript.

00:20:54.010 --> 00:20:59.890
And we just can't keep up hand wrapping those
APIs, so every release, GWT 2.2, 2.3, 2.4,

00:20:59.890 --> 00:21:00.890
we added a few.

00:21:00.890 --> 00:21:05.789
We added canvas and then we added local storage,
an index database, so on.

00:21:05.789 --> 00:21:06.789
But there's just too many.

00:21:06.789 --> 00:21:09.610
We can't keep it up as a manual process.

00:21:09.610 --> 00:21:18.270
So what Elemental is, it's a library that
builds a complete 100% HTML5 mapping to the

00:21:18.270 --> 00:21:24.750
latest Chrome, WebKit and soon Firefox, by
actually looking at the C++ source code definitions

00:21:24.750 --> 00:21:31.440
for the JavaScript run times used for exporting
their APIs and auto generating a complete

00:21:31.440 --> 00:21:38.120
set of GWT classes that directly call into
those APIs, look, it's all done -- I've got

00:21:38.120 --> 00:21:40.000
a typo in there -- with JavaScript overlay
type.

00:21:40.000 --> 00:21:44.760
So when you compile this, they all melt away,
it's a small or smaller than you could write

00:21:44.760 --> 00:21:45.760
by hand.

00:21:45.760 --> 00:21:47.900
There's no overhead.

00:21:47.900 --> 00:21:52.390
Every API you could think of is there, WebGL,
Web audio sockets, RTC, even Web Intents,

00:21:52.390 --> 00:21:56.420
Shadow DOM, these new things that you might
have just seen at the show today.

00:21:56.420 --> 00:22:01.630
We have a new set of collection classes that
you can use as an alternative to JavaScript

00:22:01.630 --> 00:22:07.760
util collections that are mapped directly
to underline JavaScript collections, so there's

00:22:07.760 --> 00:22:10.650
no overhead if you use like maps or arrays,
no extra bloat.

00:22:10.650 --> 00:22:15.760
And a new JSON library, similarly that has
no overhead if you use it, just directly access

00:22:15.760 --> 00:22:19.010
JSON objects and no bloat in the output.

00:22:19.010 --> 00:22:25.460
I think this is an excellent library for doing
mobile device development because the mobile

00:22:25.460 --> 00:22:29.400
device browsers are often on the bleeding
edge of CSS3 and things like that because

00:22:29.400 --> 00:22:31.540
that's how they get their extra performance.

00:22:31.540 --> 00:22:35.160
So it could also work for desktop.

00:22:35.160 --> 00:22:38.980
But you might have the -- already using the
existing stuff, so you will have to decide

00:22:38.980 --> 00:22:40.610
whether or not you want to move over to this
library.

00:22:40.610 --> 00:22:42.340
But try it out.

00:22:42.340 --> 00:22:43.880
I'm going to show you a demo.

00:22:43.880 --> 00:22:46.010
Real quick.

00:22:46.010 --> 00:22:51.960
And I cooked up sort of a hack to show you
the power of super dev mode and to show the

00:22:51.960 --> 00:22:54.360
power of Elemental.

00:22:54.360 --> 00:22:59.070
And so what I have done is I've built this
servlet filter that if you try to load up

00:22:59.070 --> 00:23:04.580
an HTML page and if you have something in
there like this ... I'm going to type a script

00:23:04.580 --> 00:23:05.580
tag.

00:23:05.580 --> 00:23:13.100
I'm going to say type the SQL to text/ -- no,
not JavaScript, Java.

00:23:13.100 --> 00:23:18.030
And in here, I'm just going to write like
I would write JavaScript.

00:23:18.030 --> 00:23:19.030
Window.alert.

00:23:19.030 --> 00:23:22.730
Hello.

00:23:22.730 --> 00:23:25.190
Believe it or not, that's Java code, not JavaScript.

00:23:25.190 --> 00:23:29.830
So I have a servlet filter, when this file
is being piped out will catch that script

00:23:29.830 --> 00:23:34.620
tag and see well, that's Java code, automatically
synthesize a GWT module entry point on the

00:23:34.620 --> 00:23:38.929
fly, right into the super dev mode compiler,
compile it in one second, then replace it

00:23:38.929 --> 00:23:42.830
back with a regular script type, text JavaScript,
and then the page loads.

00:23:42.830 --> 00:23:49.340
And so -- so my computer is kind of slow on
a real computer -- if I would upgrade my computer

00:23:49.340 --> 00:23:53.300
it would run a lot faster, but I will show
you that right now.

00:23:53.300 --> 00:24:03.720
Let's see -- if I just write some code there,
and it's -- oops.

00:24:03.720 --> 00:24:05.020
Wait.

00:24:05.020 --> 00:24:06.320
Okay.

00:24:06.320 --> 00:24:07.320
Is it running?

00:24:07.320 --> 00:24:08.760
It is running.

00:24:08.760 --> 00:24:09.760
Okay.

00:24:09.760 --> 00:24:10.760
Demo problems again.

00:24:10.760 --> 00:24:16.110
Oh, that's because it's on my local machine.

00:24:16.110 --> 00:24:17.460
That would make all difference okay.

00:24:17.460 --> 00:24:18.500
Let's let that load.

00:24:18.500 --> 00:24:19.879
There you go.

00:24:19.879 --> 00:24:24.630
[ Applause ]
&gt;&gt;Ray Cromwell: So now you can develop -- if

00:24:24.630 --> 00:24:28.680
I were to release this servlet filter, you
can actually develop Java code in a really

00:24:28.680 --> 00:24:32.510
lightweight fashion, where you can have multiple
HTML pages and just sprinkle a little bit

00:24:32.510 --> 00:24:36.180
of Java code in each page a page at a time
and just get a little tiny bit of compiled

00:24:36.180 --> 00:24:37.180
Java code out of it.

00:24:37.180 --> 00:24:39.630
Well, why would you do that?

00:24:39.630 --> 00:24:40.870
Well, simple.

00:24:40.870 --> 00:24:44.020
Any of you know by heart the new Web RTC camera
API?

00:24:44.020 --> 00:24:46.090
I sure don't.

00:24:46.090 --> 00:24:48.390
There's a lot of APIs in HTML5.

00:24:48.390 --> 00:24:53.520
But because this is Java, this is my Java
IDE, you know, I can do things like this,

00:24:53.520 --> 00:24:59.409
you know, window -- this is the Elemental
library -- .getnavigator or .get -- you see

00:24:59.409 --> 00:25:06.450
all of these APIs in geolocation, platform
plug-ins, product, I can do WebKitgetusermedia,

00:25:06.450 --> 00:25:09.580
which is the new Web RTC API to access the
camera.

00:25:09.580 --> 00:25:13.280
So you can get full completion, all of the
normal stuff that you love in your IPE, but

00:25:13.280 --> 00:25:16.419
with the sort of lightweight HTML programming
experience.

00:25:16.419 --> 00:25:18.850
So let's try that out and see if that works.

00:25:18.850 --> 00:25:26.120
Going to take a second to recompile.

00:25:26.120 --> 00:25:27.799
And hopefully this works.

00:25:27.799 --> 00:25:30.799
There you go.

00:25:30.799 --> 00:25:36.410
[ Applause ]
&gt;&gt;Ray Cromwell: So try this out, it's experimental,

00:25:36.410 --> 00:25:39.440
but it has a lot of cool APIs in it to try
out.

00:25:39.440 --> 00:25:40.440
Okay.

00:25:40.440 --> 00:25:46.460
So you have seen the past, you have seen the
now, let's talk about the future.

00:25:46.460 --> 00:25:51.780
So one of the problems that's been happening
over the last year or so is that ability to

00:25:51.780 --> 00:25:55.820
iterate on GWT by taking outside community
contributions has slowed a lot.

00:25:55.820 --> 00:26:01.270
The reason why, it has been paradoxically
due to GWT's success within Google.

00:26:01.270 --> 00:26:08.190
So as more and more internal Google apps migrated
to GWT, we could not take much of a chance

00:26:08.190 --> 00:26:11.600
accepting patches without thoroughly reviewing
them.

00:26:11.600 --> 00:26:16.970
Imagine somebody submits a patch and it puts
a bug into ad words, we could lose billions

00:26:16.970 --> 00:26:18.230
of dollars of revenue.

00:26:18.230 --> 00:26:21.870
So we have to be really careful about accepting
external community patches.

00:26:21.870 --> 00:26:27.070
So you might have noticed a lot of frustration
with the issue tracker because we had our

00:26:27.070 --> 00:26:29.980
internal issue tracker, and we were proprietary
to internal bugs.

00:26:29.980 --> 00:26:35.300
Hundreds of internal GWT apps, you know, our
internal customers come first, compared to

00:26:35.300 --> 00:26:37.710
the community because that's where our money
is coming from.

00:26:37.710 --> 00:26:42.289
And so -- so I thought that was a really sorry
situation to be in because a lot of the people

00:26:42.289 --> 00:26:46.520
in the community have contributed so much
to GWT over the years and we really needed

00:26:46.520 --> 00:26:48.250
to do them better.

00:26:48.250 --> 00:26:56.299
And so I suggested and we adopted that we're
going to basically change the governor -- governing

00:26:56.299 --> 00:27:02.780
body of GWT to no longer just be Google as
a dictator, but be as a peer.

00:27:02.780 --> 00:27:05.850
So we're introducing the GWT steering committee.

00:27:05.850 --> 00:27:10.020
So now the control over the future roadmap
of GWT, when features go into it, who gets

00:27:10.020 --> 00:27:14.690
to be a committer, who is a code reviewer,
what patches get landed is now going to be

00:27:14.690 --> 00:27:19.791
controlled by a committee of several of the
top, you know, star contributors to the GWT

00:27:19.791 --> 00:27:22.640
community and some of the biggest companies
using GWT.

00:27:22.640 --> 00:27:26.090
Google goes from being now a gatekeeper to
a peer amongst equals.

00:27:26.090 --> 00:27:29.891
So we have to be more responsive, we have
to think more about what other people are

00:27:29.891 --> 00:27:32.340
using GWT for, not only what we are using
it for.

00:27:32.340 --> 00:27:35.140
The steering committee is going to determine
what the project guidelines are, what the

00:27:35.140 --> 00:27:38.860
policies and philosophies of the project is
going forward and determine who gets direct

00:27:38.860 --> 00:27:41.289
commit access to the master branch.

00:27:41.289 --> 00:27:44.340
And it's going to set the overall future roadmap
as I said.

00:27:44.340 --> 00:27:46.480
We have drawn from a mix of star contributors,
and here they are.

00:27:46.480 --> 00:27:48.409
This is the initial GWT steering committee.

00:27:48.409 --> 00:27:54.920
It's Google, Vaadin, Sencha, Red Hat, Thomas
Broyer, and Stephan Haberman, who have done

00:27:54.920 --> 00:27:58.330
an enormous number of bug fixes to GWT over
the years.

00:27:58.330 --> 00:28:03.670
Daniel Kurka, who has done an absolutely awesome
mobile GWT library, and Christian Goudreau

00:28:03.670 --> 00:28:08.630
of Arcbees, who has done the GWT team library
which a lot of people use because it extends

00:28:08.630 --> 00:28:10.660
our MVP library, it's really fabulous.

00:28:10.660 --> 00:28:12.700
We've had some early decisions.

00:28:12.700 --> 00:28:14.420
We've had a couple of meetings already.

00:28:14.420 --> 00:28:18.419
We've decided, this might please many of you,
we're moving the DMT repository from Subversion

00:28:18.419 --> 00:28:20.450
to Git.

00:28:20.450 --> 00:28:25.670
[ Applause ]
&gt;&gt;Ray Cromwell: And we're going to have two

00:28:25.670 --> 00:28:27.190
official branches now.

00:28:27.190 --> 00:28:33.140
The master dev line trunk, where all of you
if you have a feature, you can submit your

00:28:33.140 --> 00:28:38.030
patch, and it can land, whether or not it
may break an internal GWT application.

00:28:38.030 --> 00:28:39.260
This will be the bleeding edge branch.

00:28:39.260 --> 00:28:42.270
Everyone when you get a nightly build one
and try it out, we can figure out what needs

00:28:42.270 --> 00:28:43.660
to be rolled back.

00:28:43.660 --> 00:28:48.260
But if it makes it through the dev branch
and doesn't destroy anybody's applications,

00:28:48.260 --> 00:28:52.920
then it's going to be cherry picked into the
beta branch, which represents the work on

00:28:52.920 --> 00:28:56.620
the next release, let's say GWT 2.6 or GWT
3.0.

00:28:56.620 --> 00:29:01.030
The beta release is what Google is going to
be building our internal apps off of.

00:29:01.030 --> 00:29:04.390
So there's going to be a lot of quality assurance
on that branch so you can be sure if you want

00:29:04.390 --> 00:29:08.110
to pick up something that's a little more
stable, you can be trusting in, that would

00:29:08.110 --> 00:29:09.430
be beta branch.

00:29:09.430 --> 00:29:14.799
Our partners like Sencha and Vaadin will probably
also be shipping code based off of beta branch

00:29:14.799 --> 00:29:18.440
works, not the dev link.

00:29:18.440 --> 00:29:23.500
So you will have a much lower probability
of breakage.

00:29:23.500 --> 00:29:26.299
So here's where you will find us, there's
going to be a new website, not up yet.

00:29:26.299 --> 00:29:27.490
It's google.com/gwtsteering.

00:29:27.490 --> 00:29:32.090
You can read about all of the new rules, processes
for contributing to the GWT.

00:29:32.090 --> 00:29:35.890
And there's a GWT steering mailing list where
you can read our meeting minutes and our discussions

00:29:35.890 --> 00:29:37.970
on what's happening with the future of GWT
and where it's going.

00:29:37.970 --> 00:29:42.049
So you won't to wait ages for a blog post
from us to see what's happening.

00:29:42.049 --> 00:29:45.000
Now you can read it in real-time.

00:29:45.000 --> 00:29:49.450
So now I would like to ask Michael Mullany,
CEO of Sencha, to talk about all of the brave

00:29:49.450 --> 00:29:54.220
and exciting things that they're going to
do with GWT now and in the future.

00:29:54.220 --> 00:30:01.610
[ Applause ]
&gt;&gt;Michael Mullany: Awesome, it's great to

00:30:01.610 --> 00:30:02.610
be here.

00:30:02.610 --> 00:30:05.450
My name is Michael Mullany, I run Sencha.

00:30:05.450 --> 00:30:11.050
Also joined by Darrell Meyer here in the audience
who is a tech lead for Sencha GXT at Sencha.

00:30:11.050 --> 00:30:13.950
Do you want to stand up, say hi?

00:30:13.950 --> 00:30:15.540
&gt;&gt;&gt; Hi there.

00:30:15.540 --> 00:30:18.720
[ Applause ]
&gt;&gt;Michael Mullany: Okay.

00:30:18.720 --> 00:30:20.840
So before we start just a quick poll.

00:30:20.840 --> 00:30:24.210
How many people have developed with GWT, since
you're in the GWT session, right?

00:30:24.210 --> 00:30:25.210
Good.

00:30:25.210 --> 00:30:29.230
How many people have done an app over 10,000
lines?

00:30:29.230 --> 00:30:30.940
50,000 lines?

00:30:30.940 --> 00:30:32.659
100,000 lines?

00:30:32.659 --> 00:30:34.710
Half a million lines?

00:30:34.710 --> 00:30:35.740
Over a million lines of code?

00:30:35.740 --> 00:30:36.740
Okay.

00:30:36.740 --> 00:30:38.049
That's a good distribution.

00:30:38.049 --> 00:30:42.790
Well, one of the reasons that we are excited
about GWT is because it does really help you

00:30:42.790 --> 00:30:46.440
with very large applications and very large
teams working together.

00:30:46.440 --> 00:30:52.250
We are a company that has about 2 million
worldwide developers in JavaScript and in

00:30:52.250 --> 00:30:53.550
Java.

00:30:53.550 --> 00:30:58.080
Across all sorts of applications and all sorts
of geographies.

00:30:58.080 --> 00:31:02.669
Of that, we have about 400,000 registered
community members on an incredibly active

00:31:02.669 --> 00:31:06.789
forum, so we're approaching kind of a million
posts on our forums over time.

00:31:06.789 --> 00:31:09.789
We're also expanding geographically pretty
rapidly.

00:31:09.789 --> 00:31:16.429
We started on the East Coast, moved to California,
we just opened a Vancouver office and an Amsterdam

00:31:16.429 --> 00:31:17.429
office.

00:31:17.429 --> 00:31:21.190
I'm not allowed to say we're hiring, so I
won't say that.

00:31:21.190 --> 00:31:25.899
[ Laughter ]
&gt;&gt;Michael Mullany: We have a really amazing

00:31:25.899 --> 00:31:32.280
array of applications built with Sencha Technologies
with XGS, with Sencha Touch and with GWT.

00:31:32.280 --> 00:31:39.059
We have everything from very large clinical
trials management applications to CAs, admin

00:31:39.059 --> 00:31:46.289
interfaces to Dell's warehouse management
system, Best Buy's store system, all built

00:31:46.289 --> 00:31:48.610
with Sencha technologies.

00:31:48.610 --> 00:31:52.039
We're primarily focused on business applications
and very large applications.

00:31:52.039 --> 00:31:56.790
That's why people use a very structured framework,
like XGS or GWT.

00:31:56.790 --> 00:32:04.049
And our goal is to take -- to really provide
a complete productivity capability from design

00:32:04.049 --> 00:32:07.960
time to development run, all the way to deployment.

00:32:07.960 --> 00:32:13.830
So Sencha architect, if you stopped by our
sandbox yesterday, is a drag and drop visual

00:32:13.830 --> 00:32:18.929
app builder for Sencha Touch and XGS so you
can get mobile and desktop on the same tool.

00:32:18.929 --> 00:32:25.809
We are also happy to be working on GWT designer
integration for GXT.

00:32:25.809 --> 00:32:28.880
Sencha (indiscernible) is focused on content
animations.

00:32:28.880 --> 00:32:35.420
The build side JavaScript frameworks for mobile
and desktop and we have GXT for Java.

00:32:35.420 --> 00:32:37.380
Our deployment is the newest thing that we
have.

00:32:37.380 --> 00:32:41.940
It's cloud services that basically provide
back end point services like notifications,

00:32:41.940 --> 00:32:47.470
authentications, app messaging for mobile
and desktop applications.

00:32:47.470 --> 00:32:53.289
Our goal, and I think this is a common thing
across developer bases today, is to as much

00:32:53.289 --> 00:32:59.050
as possible provide a single HTML platform
across all of these -- in the multi-device

00:32:59.050 --> 00:33:00.170
world, right?

00:33:00.170 --> 00:33:05.930
So from phones to tablets to TVs to desktops,
people are trying to create application experiences

00:33:05.930 --> 00:33:12.059
that follow you from device to device, that
reuse data, reuse models, reuse business logic,

00:33:12.059 --> 00:33:17.809
controller logic as much as possible and that's
really our design point for Sencha Technologies,

00:33:17.809 --> 00:33:20.520
whether in JavaScript or in Java.

00:33:20.520 --> 00:33:25.270
XGS 4 is our JavaScript framework, I won't
spend much time on it.

00:33:25.270 --> 00:33:32.950
It basically provides structure for JavaScript
programmers who want to create large applications

00:33:32.950 --> 00:33:35.450
that are pixel perfect across browser.

00:33:35.450 --> 00:33:40.270
The companion to that is that Sencha Touch,
which is again a JavaScript framework for

00:33:40.270 --> 00:33:41.409
modern mobile devices.

00:33:41.409 --> 00:33:45.790
We made a bet that smart phones were the only
phones that smarted and that turned out that

00:33:45.790 --> 00:33:46.929
was the case.

00:33:46.929 --> 00:33:52.299
We do an awful lot of low level platform code
switching abstraction to make the code base

00:33:52.299 --> 00:33:55.190
work across every device that you can think
of.

00:33:55.190 --> 00:33:58.460
I mentioned architect and IL.

00:33:58.460 --> 00:34:02.980
So on to Sencha GXT, which is a meet for this
room.

00:34:02.980 --> 00:34:10.839
GXT started about five years ago as the -- as
Darrell's project and then Darrell joined

00:34:10.839 --> 00:34:14.639
Sencha and merged with the Sencha team.

00:34:14.639 --> 00:34:18.419
It's basically fully featured, theme-able,
high performance widgets.

00:34:18.419 --> 00:34:25.409
It's a true GWT implementation, even more
so in GXT 3 than was the case in GXT 2.

00:34:25.409 --> 00:34:31.139
The big thing that GXT brings to the table
is full alignment with GWT conventions in

00:34:31.139 --> 00:34:33.179
GXT 3.

00:34:33.179 --> 00:34:38.599
But really the thing that knocks you on the
head when you look at GXT is just the sheer

00:34:38.599 --> 00:34:44.270
volume and weight of UI widgets that we bring
to the table that you don't have to create

00:34:44.270 --> 00:34:45.270
yourself.

00:34:45.270 --> 00:34:50.639
There's -- there's literally several hundred
widgets of all types for all types of applications

00:34:50.639 --> 00:34:55.309
that work the way that GXT or GWT expects.

00:34:55.309 --> 00:34:59.880
So GXT we just completed an enormous release,
our GXT release.

00:34:59.880 --> 00:35:04.530
It was just released about six or eight weeks
ago.

00:35:04.530 --> 00:35:11.920
It basically takes what we had built ourselves
from our own custom conventions for things

00:35:11.920 --> 00:35:19.539
like event handling, all into GWT 2.1 through
2.3 conventions.

00:35:19.539 --> 00:35:28.021
So, for example, we now use the cells to render
our trees and our grids and it's much, much

00:35:28.021 --> 00:35:29.680
faster and much, much lighter weight.

00:35:29.680 --> 00:35:34.239
We have also moved to interface-based design,
so for large applications it's much easier

00:35:34.239 --> 00:35:38.640
to create mocks and to do testing.

00:35:38.640 --> 00:35:39.640
We've done --
[ Applause ]

00:35:39.640 --> 00:35:42.529
&gt;&gt;Michael Mullany: Thank you.

00:35:42.529 --> 00:35:45.099
Custom theming, so we now use the appearance
pattern.

00:35:45.099 --> 00:35:48.710
We've pulled out theming information out of
the components and out of widgets, so it's

00:35:48.710 --> 00:35:55.569
much, much easier to add raw HTML and CSS
styling into your components without standing

00:35:55.569 --> 00:35:56.960
on your head.

00:35:56.960 --> 00:35:58.789
We also have much improved model support.

00:35:58.789 --> 00:36:05.959
So in -- in GXT 2, you basically have to use
our custom data stores and that was the only

00:36:05.959 --> 00:36:10.910
way of getting data into an application again
without standing on your head.

00:36:10.910 --> 00:36:17.240
Now you can basically pull in -- pull in model
data from plain Java objects or for any beans

00:36:17.240 --> 00:36:18.260
that you have.

00:36:18.260 --> 00:36:20.829
Much more flexible.

00:36:20.829 --> 00:36:28.019
We also added full UI binder support so you
can declare your UI widgets with the UI binder

00:36:28.019 --> 00:36:29.400
XML conventions.

00:36:29.400 --> 00:36:33.380
Another thing, strongly type layout engine.

00:36:33.380 --> 00:36:41.369
One of the big issues with our layouts in
GXT 2 was that you could basically have a

00:36:41.369 --> 00:36:45.079
lot of mismatches between a container type
and a layout.

00:36:45.079 --> 00:36:49.239
So now we've gone to strongly typed layouts,
so it's much harder to make a mistake and

00:36:49.239 --> 00:36:54.700
the compiler will catch it if you try and
associate a layout with a container that doesn't

00:36:54.700 --> 00:36:56.650
match it.

00:36:56.650 --> 00:37:04.549
And there's a lot of other things in the release,
but basically the whole theme was have a huge

00:37:04.549 --> 00:37:12.160
widget library and theming that works with
the new GWT conventions and I think we've

00:37:12.160 --> 00:37:13.859
been pretty successful with that.

00:37:13.859 --> 00:37:19.700
It's had a great response and a great reception
in the short weeks that we've released it.

00:37:19.700 --> 00:37:23.769
And we're really happy to have released it.

00:37:23.769 --> 00:37:30.390
So we're actually incredibly excited about
this opening up of GWT with the steering committee.

00:37:30.390 --> 00:37:36.220
One of the main reasons that we ended it with
custom conventions in GXT 2 was the fact that

00:37:36.220 --> 00:37:40.339
we had no idea what was coming down the road
from the GWT team.

00:37:40.339 --> 00:37:44.579
So we had our own event system and I think
it was literally a couple of months afterwards

00:37:44.579 --> 00:37:49.410
there was a new event system from GWT that
if we had known was coming, we probably would

00:37:49.410 --> 00:37:51.859
have aligned with.

00:37:51.859 --> 00:37:56.130
So we're really happy to continue to promote
RIA for Java developers.

00:37:56.130 --> 00:37:59.190
We're really excited to be a member of the
steering committee.

00:37:59.190 --> 00:38:03.559
We would love to hear you, as a member of
the steering committee, your ideas for how

00:38:03.559 --> 00:38:05.979
we can improve GWT going forward.

00:38:05.979 --> 00:38:11.460
GWT we feel is the best way for organizations
that are committed to Java to build front

00:38:11.460 --> 00:38:16.029
end applications, particularly larger ones,
larger teams, that's what our customer base

00:38:16.029 --> 00:38:22.970
tells us why GWT is an awesome solution for
them.

00:38:22.970 --> 00:38:24.140
So what are we doing?

00:38:24.140 --> 00:38:27.059
We've just finished our GXT release, so it
was pretty huge.

00:38:27.059 --> 00:38:31.480
We're just getting around to planning the
next release.

00:38:31.480 --> 00:38:36.279
But a couple of things we're doing is making
the appearance implementation that we have

00:38:36.279 --> 00:38:41.150
better with a more flexible client bundle,
we are doing some updates to UI binder, and

00:38:41.150 --> 00:38:45.299
I think some of our changes have actually
made it into the 2.5 code base.

00:38:45.299 --> 00:38:47.119
Theme building.

00:38:47.119 --> 00:38:53.309
You know, it's actually a huge request across
our product line, which is how can we do better

00:38:53.309 --> 00:39:00.430
visual design without having to hack into
SASS or hack into custom CSS.

00:39:00.430 --> 00:39:02.279
Better IDE support and tooling.

00:39:02.279 --> 00:39:07.479
So there's some support coming in GWT designer
for GXT 3.

00:39:07.479 --> 00:39:12.589
But our goal is to make it easier and easier
to create GXT applications using standard

00:39:12.589 --> 00:39:17.209
Eclipse and stand IDEs.

00:39:17.209 --> 00:39:21.730
There's much, much more detail into what we've
put into GXT 3, we're really proud of the

00:39:21.730 --> 00:39:22.730
release.

00:39:22.730 --> 00:39:27.469
Probably the best place to learn more about
it is on our blog, that's the link.

00:39:27.469 --> 00:39:32.719
Just Sencha-GXT from our blog.

00:39:32.719 --> 00:39:36.059
Also Darrell and myself will be here hanging
around after the session if you want to talk

00:39:36.059 --> 00:39:38.369
to us more about GXT.

00:39:38.369 --> 00:39:41.950
We're really excited about the directions,
we're really honored that Google has asked

00:39:41.950 --> 00:39:48.069
us to participate in the steering committee,
and we hope to be able to serve the GWT community

00:39:48.069 --> 00:39:50.299
as best we can in this new role.

00:39:50.299 --> 00:39:52.130
So thanks again.

00:39:52.130 --> 00:40:00.430
[ Applause ]
&gt;&gt;Ray Cromwell: I would like to ask Joonas

00:40:00.430 --> 00:40:01.710
Lehtinen to come up.

00:40:01.710 --> 00:40:05.930
He's the C.E.O. of Vaadin, which he has a
fabulous framework.

00:40:05.930 --> 00:40:12.529
He's going to tell you all how Vaadin is going
to contribute to GWT and what they're all

00:40:12.529 --> 00:40:14.059
about.

00:40:14.059 --> 00:40:23.069
&gt;&gt;Joonas Lehtinen: Yeah, I'm really excited
to be here and see where GWT is going at the

00:40:23.069 --> 00:40:24.999
moment.

00:40:24.999 --> 00:40:29.749
Let's first kind of give a brief intro to
(indiscernible) how we are using GWT and where

00:40:29.749 --> 00:40:34.540
that relationship is going in the future.

00:40:34.540 --> 00:40:41.660
So you can say that Vaadin is a Java frame
building rich web applications, and as that

00:40:41.660 --> 00:40:46.381
it's quite like GWT, but at the same time
it's different from GWT; in Vaadin you're

00:40:46.381 --> 00:40:49.859
doing everything from the server side.

00:40:49.859 --> 00:40:51.969
It's basically based on three different items.

00:40:51.969 --> 00:40:58.710
So first we want to have amazing components,
both as URL components as well as data sources

00:40:58.710 --> 00:41:02.459
and data (indiscernible) themes and so on.

00:41:02.459 --> 00:41:08.960
So we have really nice set of widgets in the
core product, hundred or so widgets, you can

00:41:08.960 --> 00:41:12.599
go to vaadin.com/demo to see that out.

00:41:12.599 --> 00:41:17.109
There are also widgets for mobile, Android,
iPhone, iPad.

00:41:17.109 --> 00:41:22.920
What I'm mostly excited about is the community
around Vaadin, so there are hundreds of plug-ins

00:41:22.920 --> 00:41:23.920
in for Vaadin.

00:41:23.920 --> 00:41:30.609
Those plug-ins might be widget outbreaks or
integrations or themes or tools.

00:41:30.609 --> 00:41:36.819
Second idea is that they're combining server
side RIA together with (inaudible) so what

00:41:36.819 --> 00:41:38.619
is this search?

00:41:38.619 --> 00:41:44.190
Look at this, so basically you have five layers
in your (inaudible), so you have the back

00:41:44.190 --> 00:41:45.630
end layer and the Web server.

00:41:45.630 --> 00:41:47.200
You have communications.

00:41:47.200 --> 00:41:53.940
And you're going to have Java to Java compiler,
and then Java to Java within Web browser,

00:41:53.940 --> 00:41:57.199
so if you look at GWT, it looks like this,
so this

00:41:57.199 --> 00:42:02.329
(indiscernible) four layers, and optionally
you can do on JavaScript on top of that.

00:42:02.329 --> 00:42:04.569
Vaadin is quite different.

00:42:04.569 --> 00:42:06.599
You are only writing two layers.

00:42:06.599 --> 00:42:11.699
You're only writing code on the server side,
so everything on the (indiscernible) layer

00:42:11.699 --> 00:42:13.799
and on the browser side is total automatic.

00:42:13.799 --> 00:42:17.019
You don't have to write any line of code for
those.

00:42:17.019 --> 00:42:22.729
And if you're converting this to Java frameworks,
I like XJS, it's probably the best one out

00:42:22.729 --> 00:42:24.219
there at the moment.

00:42:24.219 --> 00:42:31.089
So also in here you're writing four layers,
and this is the core of the (indiscernible)

00:42:31.089 --> 00:42:37.309
you can kind of skip half -- half of your
program when you're writing in Vaadin.

00:42:37.309 --> 00:42:38.809
It actually works like this.

00:42:38.809 --> 00:42:41.039
So all of the components have two parts.

00:42:41.039 --> 00:42:46.220
You have server side component, it's basically
API that your program is against, so whole

00:42:46.220 --> 00:42:48.729
UI is on the server side.

00:42:48.729 --> 00:42:53.849
On the client side, you are rendering and
event handling, and that part is totally done

00:42:53.849 --> 00:42:56.109
with Web toolkit.

00:42:56.109 --> 00:43:05.880
(indiscernible) Third thing, Java, basically
everything in Vaadin is (indiscernible) object,

00:43:05.880 --> 00:43:11.769
so all of the components are plain ole objects
just running on the server side in the real

00:43:11.769 --> 00:43:16.440
JVM. (indiscernible) you can write UI in any
language out there.

00:43:16.440 --> 00:43:20.950
You can use (indiscernible) what have you.

00:43:20.950 --> 00:43:24.369
You can use any tooling, any IDs.

00:43:24.369 --> 00:43:31.029
You can deploy this to almost any server out
there, most of the clouds, and at the end

00:43:31.029 --> 00:43:33.319
of the day, it's just one file, so you can
use that in any web browser.

00:43:33.319 --> 00:43:39.970
Just drop that (indiscernible) into a project,
you can start adding UIs with that.

00:43:39.970 --> 00:43:45.809
It's (indiscernible) license so it should
be the same license as GWT.

00:43:45.809 --> 00:43:47.430
So what's the relation between Vaadin and
GWT?

00:43:47.430 --> 00:43:48.960
Let's look at the history.

00:43:48.960 --> 00:43:50.989
This is actually quite an old project.

00:43:50.989 --> 00:43:53.089
We started in 2001 already.

00:43:53.089 --> 00:43:56.069
So we've had 11 years of history behind us.

00:43:56.069 --> 00:44:02.790
And then we kind of started to have huge number
of JavaScript code lines on the client side

00:44:02.790 --> 00:44:08.470
to render all of those components, and it
turned out to be not that nice, so fortunately

00:44:08.470 --> 00:44:15.369
GWT came along and we threw all of that away
and we wrote everything in GWT. (indiscernible)

00:44:15.369 --> 00:44:19.209
It was a perfect fit to Vaadin.

00:44:19.209 --> 00:44:21.450
Both are written in Java.

00:44:21.450 --> 00:44:26.539
Both (indiscernible) oriented and both recorded
across browsers, something very important

00:44:26.539 --> 00:44:28.249
for us.

00:44:28.249 --> 00:44:32.390
So I could say that this has been kind of
like standing on the shoulder of a giant,

00:44:32.390 --> 00:44:38.240
this giant being Google and (indiscernible)
you have been doing a really, really excellent

00:44:38.240 --> 00:44:43.499
job, and it has been helping to write quite
a bit, so we haven't had to deal with all

00:44:43.499 --> 00:44:46.150
the browser differences ourself.

00:44:46.150 --> 00:44:49.920
So you can see this as
our engagement period of five years for us,

00:44:49.920 --> 00:44:56.829
and this has been strange engagement because
after five years, we are still in love with

00:44:56.829 --> 00:44:57.829
GWT.

00:44:57.829 --> 00:45:02.960
I truly think that GWT is the best way of
building Web scripts, Web application on the

00:45:02.960 --> 00:45:05.079
client side with Java.

00:45:05.079 --> 00:45:08.569
So if you're building a huge application,
there is -- that's the kind of number one

00:45:08.569 --> 00:45:12.910
way of doing that on the client side.

00:45:12.910 --> 00:45:16.160
But the relationship have been kind of unidirectional.

00:45:16.160 --> 00:45:18.020
We have been getting a lot from GWT.

00:45:18.020 --> 00:45:20.759
And we haven't been giving too much back.

00:45:20.759 --> 00:45:26.039
And I think this is the same for many of us,
so we have been using GWT, we haven't been

00:45:26.039 --> 00:45:28.230
giving too much back to GWT.

00:45:28.230 --> 00:45:33.959
And I'm really thrilled to see this new development
with the steering committee and more open

00:45:33.959 --> 00:45:41.780
process for GWT, so we can come back to GWT,
and I hope in the end this grows to be something

00:45:41.780 --> 00:45:45.949
much, much, much bigger than it is today.

00:45:45.949 --> 00:45:49.190
So where do we go next?

00:45:49.190 --> 00:45:52.390
You have been kind of jumping in five year
leaps.

00:45:52.390 --> 00:45:54.660
What's the next leap for us?

00:45:54.660 --> 00:45:58.509
So I'm really thrilled to announce the new
study for Vaadin.

00:45:58.509 --> 00:46:02.539
We are adding GWT to Vaadin.

00:46:02.539 --> 00:46:03.540
So what does it mean?

00:46:03.540 --> 00:46:06.440
At the moment we are kind of using GWT as
a dependents.

00:46:06.440 --> 00:46:11.690
We are using GWT as a rendering agent behind
the scenes in Vaadin.

00:46:11.690 --> 00:46:15.920
What they are doing, they are moving inside
Vaadin, so they're taking copy, putting that

00:46:15.920 --> 00:46:22.489
inside Vaadin and maintaining ourselves
(indiscernible) and we, of course, are contributing

00:46:22.489 --> 00:46:26.249
all of those back to GWT.

00:46:26.249 --> 00:46:31.920
This also means that Vaadin will be combined
with GWT.

00:46:31.920 --> 00:46:38.459
So for two days project you can use Vaadin
for that, and as a win developer, a new customer

00:46:38.459 --> 00:46:39.660
what's more in there?

00:46:39.660 --> 00:46:41.739
There are a couple of things.

00:46:41.739 --> 00:46:45.749
But first, there are actually two sides of
Vaadin.

00:46:45.749 --> 00:46:46.959
So we have two program modules.

00:46:46.959 --> 00:46:50.989
We have server side programming and we have
client side programming.

00:46:50.989 --> 00:46:55.920
Server side being optimized for the productivity
and the client side being optimized for the

00:46:55.920 --> 00:46:57.270
controlling.

00:46:57.270 --> 00:47:04.420
So you get both around 50 reduction of code
lines when you're programming in the server

00:47:04.420 --> 00:47:10.089
side as well as all of the wonderful controller
on the platform on the client side.

00:47:10.089 --> 00:47:14.999
So you can see that from the developer point
of view we are adding

00:47:14.999 --> 00:47:22.299
(indiscernible) components, tools, themes,
but also there's one more theme.

00:47:22.299 --> 00:47:29.249
(indiscernible) support, we are serving companies
who are using our technology to build applications,

00:47:29.249 --> 00:47:35.170
and now that we are merging GWT in the Vaadin
directly, we are starting the support with

00:47:35.170 --> 00:47:36.170
Vaadin.

00:47:36.170 --> 00:47:43.670
If (indiscernible) we are a good project for
you.

00:47:43.670 --> 00:47:48.210
This is going to be available pretty soon
now.

00:47:48.210 --> 00:47:54.769
So we are targeting for the Java 1 release
with Vaadin 7 that will be including GWT,

00:47:54.769 --> 00:47:57.809
and it's available as a developer preview
today.

00:47:57.809 --> 00:48:03.019
This is an early alpha release, but it's there
for you to try out.

00:48:03.019 --> 00:48:11.219
There is a ton of more things to read about
how Vaadin would kind of combine and what

00:48:11.219 --> 00:48:15.439
that old aspect, (indiscernible) and read
more about this.

00:48:15.439 --> 00:48:16.439
Thank you.

00:48:16.439 --> 00:48:22.640
[ Applause ]
&gt;&gt; Ray Cromwell: Let me switch back to my

00:48:22.640 --> 00:48:28.279
slides.

00:48:28.279 --> 00:48:33.920
Okay.

00:48:33.920 --> 00:48:37.549
So there were a couple of other steering committee
members who couldn't be here, I don't want

00:48:37.549 --> 00:48:38.549
to spend too much time.

00:48:38.549 --> 00:48:45.509
But Christian Goudreau has developed a wonderful
library called GWT, and he is on the steering

00:48:45.509 --> 00:48:49.439
committee as well, and he has some wonderful
things to say, and I'll just leave that up

00:48:49.439 --> 00:48:52.569
there for a second for posterity.

00:48:52.569 --> 00:48:57.319
As well as Daniel Kurka who has done an incredible
mobile library for web property (indiscernible)

00:48:57.319 --> 00:49:00.819
I encourage you to go to n-gwt.com, check
it out.

00:49:00.819 --> 00:49:02.499
And he is also on the steering committee.

00:49:02.499 --> 00:49:07.390
I'm sure he's going to be focused on making
GWT better for mobile.

00:49:07.390 --> 00:49:11.380
Finally, we are hiring.

00:49:11.380 --> 00:49:12.380
Believe it or not.

00:49:12.380 --> 00:49:17.750
So if you are a unemployed GWT programmer
and you're looking to join Google, and work

00:49:17.750 --> 00:49:21.959
on (indiscernible) please send your resume
to Google.com/jobs.

00:49:21.959 --> 00:49:25.059
And now I will turn the microphone over to
you.

00:49:25.059 --> 00:49:33.659
You're free to ask questions.

00:49:33.659 --> 00:49:37.099
[ Applause ]
&gt;&gt;&gt; Hi.

00:49:37.099 --> 00:49:38.809
So my first question is about validation.

00:49:38.809 --> 00:49:49.359
You said you've implemented the 303 at 2010,
but as for now, our classes in package validation

00:49:49.359 --> 00:49:53.569
are marked as experimental, and they say do
not use them in production.

00:49:53.569 --> 00:49:54.969
&gt;&gt;Ray Cromwell: Yes.

00:49:54.969 --> 00:49:56.839
I'll answer very quickly.

00:49:56.839 --> 00:50:02.609
We have recently hired someone to specifically
work on the support in GWT and to make it

00:50:02.609 --> 00:50:08.359
100% compatible with the 303 TCK test compatibility
kit.

00:50:08.359 --> 00:50:12.151
So if you look at the event logs right now,
you'll see a new guy who is committing -- or

00:50:12.151 --> 00:50:18.119
actually one by one he's fixing the TCK test,
and once they pass the TCK, then we'll remove

00:50:18.119 --> 00:50:19.380
the experimental tag.

00:50:19.380 --> 00:50:20.440
&gt;&gt;&gt; Okay, thanks.

00:50:20.440 --> 00:50:23.099
When will 2.5 be released?

00:50:23.099 --> 00:50:25.380
&gt;&gt;Ray Cromwell: RC1 is out already.

00:50:25.380 --> 00:50:27.039
You can download it now.

00:50:27.039 --> 00:50:32.299
Probably in maybe a week or two, the final
version, after we get some bug reports back

00:50:32.299 --> 00:50:33.349
and smoke test it more.

00:50:33.349 --> 00:50:34.349
Okay.

00:50:34.349 --> 00:50:35.349
Thank you.

00:50:35.349 --> 00:50:36.469
I'll go over to this one.

00:50:36.469 --> 00:50:44.410
&gt;&gt;&gt; Hi, I'm a GIS developer, I use Google
maps to do -- in my projects.

00:50:44.410 --> 00:50:45.420
Most of -- I hate JavaScript.

00:50:45.420 --> 00:50:52.950
Most of the time I'm looking for a GWT wrappers
around Google maps API.

00:50:52.950 --> 00:51:01.400
Are you guys coordinating between the two
teams to always have a GWT library for Google

00:51:01.400 --> 00:51:04.059
maps once a new version of Google maps API
comes out?

00:51:04.059 --> 00:51:05.839
&gt;&gt;Ray Cromwell: Yeah, a good question.

00:51:05.839 --> 00:51:10.160
So, yes, in the past, we have done that, I
believe recently they may have released an

00:51:10.160 --> 00:51:16.630
update to the Google API libraries for GWT
which included some support I think for 3.0.

00:51:16.630 --> 00:51:18.430
I don't know what state it's in.

00:51:18.430 --> 00:51:27.579
Unfortunately, the person who is working on
it, Eric Zundel, left to go to another company,

00:51:27.579 --> 00:51:30.150
but we will try to figure out a solution for
that.

00:51:30.150 --> 00:51:33.969
It may be that the steering committee takes
it over, like for example, maybe Sencha with

00:51:33.969 --> 00:51:38.999
some maps, widgets in there, and they can
basically take on the task of ensuring it's

00:51:38.999 --> 00:51:39.999
always up to date.

00:51:39.999 --> 00:51:41.519
But we'll find out.

00:51:41.519 --> 00:51:45.229
We are definitely concerned about it, because
maps are actually very important.

00:51:45.229 --> 00:51:47.649
&gt;&gt;&gt; Thank you.

00:51:47.649 --> 00:51:48.859
&gt;&gt;&gt; Hello.

00:51:48.859 --> 00:51:51.279
(saying name).

00:51:51.279 --> 00:51:56.750
I'm a new developer and our team is mostly
-- we are mostly using intelliJ to develop

00:51:56.750 --> 00:52:02.479
and to debug our applications, and the question
is with the new super dev mode, will we be

00:52:02.479 --> 00:52:08.680
able to use our favorite IDE to debug applications,
or the only way to do it will be the browser?

00:52:08.680 --> 00:52:09.680
&gt;&gt;Ray Cromwell: Right.

00:52:09.680 --> 00:52:10.680
Good question.

00:52:10.680 --> 00:52:11.680
As you can see.

00:52:11.680 --> 00:52:18.350
I am a rabid intelliJ user, I love intelliJ,
and I constantly rag on people at Google that

00:52:18.350 --> 00:52:20.529
use eclipse.

00:52:20.529 --> 00:52:26.229
The answer is that we are trying to talk to
JetBrains, they've done a lot of good support

00:52:26.229 --> 00:52:32.520
in the past to basically get support for source
maps within intelliJ, and based on the outcome

00:52:32.520 --> 00:52:36.380
of those talks, if they're willing to do it,
if source maps are implemented or if we had

00:52:36.380 --> 00:52:42.180
a plug-in to do it for intelliJ, intelliJ
can already attach to JavaScript debuggers,

00:52:42.180 --> 00:52:46.160
so essentially instead of attaching it to
JVM, you attach it to the Chrome debugger,

00:52:46.160 --> 00:52:51.119
and all it has to do is use the map to actually
let you match it back into the editor, breakpoint

00:52:51.119 --> 00:52:54.229
intelliJ to control Chrome.

00:52:54.229 --> 00:52:57.660
It definitely is a possibility to make that
work, and we need to talk to the right people

00:52:57.660 --> 00:52:58.660
and make it happen.

00:52:58.660 --> 00:52:59.660
&gt;&gt;&gt; All right.

00:52:59.660 --> 00:53:00.660
Thanks.

00:53:00.660 --> 00:53:01.989
&gt;&gt;Ray Cromwell: Let's go over there.

00:53:01.989 --> 00:53:04.299
&gt;&gt;&gt; Hi, I have two questions, actually.

00:53:04.299 --> 00:53:05.920
First about the steering committee.

00:53:05.920 --> 00:53:14.779
I'm very happy to see that Google is accepting
more external people, but I'm also a little

00:53:14.779 --> 00:53:22.299
bit concerned because there are a lot of companies
that have large libraries on the steering

00:53:22.299 --> 00:53:24.019
committee.

00:53:24.019 --> 00:53:29.160
How do you guaranty that -- these companies
have their own agenda.

00:53:29.160 --> 00:53:37.739
How do you guaranty that GWT doesn't become
bloated with their features that --

00:53:37.739 --> 00:53:40.260
&gt;&gt;Ray Cromwell: I can answer that.

00:53:40.260 --> 00:53:45.329
First thing is that when we initially nominated
them, we told them that we realize that they

00:53:45.329 --> 00:53:49.509
have commercial interests, but we would like
steering committee members to also kind of

00:53:49.509 --> 00:53:51.079
wear the GWT hat.

00:53:51.079 --> 00:53:55.950
So, for example, we're on the GCC committee,
I think, you know, Google participated with

00:53:55.950 --> 00:54:00.690
GCC development, and of course people on the
GCC steering committee, they're all commercial

00:54:00.690 --> 00:54:05.410
companies or different chip, you know, like
AMD or Intel or whatever, so they have interest,

00:54:05.410 --> 00:54:10.500
but the people on the committee usually do
a pretty good job of wearing their GCC hats,

00:54:10.500 --> 00:54:15.119
and we expect that the GWT community members
kind of wear their GWT hats so that they have

00:54:15.119 --> 00:54:20.079
things that are competitive, they're probably
going to keep them anyway, because that's

00:54:20.079 --> 00:54:25.500
their value, but if there's new core features
they need, like new event handlers or new

00:54:25.500 --> 00:54:30.759
support for low level operations or there's
bug fixes that they have been forking off

00:54:30.759 --> 00:54:34.719
privately in the past to fix, now they will
contribute them back.

00:54:34.719 --> 00:54:39.599
The second thing is that the committee is
run by consensus, so if anyone objects, basically,

00:54:39.599 --> 00:54:41.599
to a proposal, it doesn't happen.

00:54:41.599 --> 00:54:46.009
So we basically all have to agree, and some
people on the committee will be concerned

00:54:46.009 --> 00:54:50.279
about bloat, and if, you know, someone wants
to drop in like a two megabyte JavaScript

00:54:50.279 --> 00:54:52.539
library, there is going to be some objections.

00:54:52.539 --> 00:54:57.109
Is that --
&gt;&gt;&gt; I have a question about the example you

00:54:57.109 --> 00:55:03.979
showed with injecting Java code inside the
HTML page, so you type window from lower case

00:55:03.979 --> 00:55:06.700
W, it's not class window.

00:55:06.700 --> 00:55:08.989
&gt;&gt;Ray Cromwell: That's right.

00:55:08.989 --> 00:55:15.229
So -- yeah, so the intelliJ is actually a
really fabulous IDE, (indiscernible) so I

00:55:15.229 --> 00:55:21.799
told intelliJ to assume that there's a line
in the code that looks like this, window window

00:55:21.799 --> 00:55:30.009
is equal to browser dot get window, and so
that is like implied that's there, and what

00:55:30.009 --> 00:55:34.509
happens is the filter, when it's extracting
that code and writing it to disc, it inserts

00:55:34.509 --> 00:55:40.039
that line, so the IDE doesn't complain that
that window variable is missing because I

00:55:40.039 --> 00:55:42.160
told intelliJ to assume that that's injected.

00:55:42.160 --> 00:55:46.609
So that is a feature of intelliJ, so if you're
an eclipse user, you might want to check that

00:55:46.609 --> 00:55:47.609
out.

00:55:47.609 --> 00:55:51.189
[ Laughter ]
&gt;&gt;Ray Cromwell: Okay.

00:55:51.189 --> 00:55:54.430
Let me go to him first.

00:55:54.430 --> 00:56:00.319
&gt;&gt;&gt; So another question I wanted to ask is
about kind of release for GWT, what are the

00:56:00.319 --> 00:56:05.059
next versions when they will be out and what
features are planned so probably this question

00:56:05.059 --> 00:56:08.699
must go to your committee and what will be
the process?

00:56:08.699 --> 00:56:09.699
Who will decide?

00:56:09.699 --> 00:56:10.890
&gt;&gt;Ray Cromwell: Right.

00:56:10.890 --> 00:56:11.890
Excellent question.

00:56:11.890 --> 00:56:18.539
And, yes, I should have basically made it
clear that 2.5 will actually be the last official

00:56:18.539 --> 00:56:20.049
Google controlled release.

00:56:20.049 --> 00:56:25.809
Every new release, GWT 2.6 or GWT 3.0, will
now be basically a steering committee release,

00:56:25.809 --> 00:56:30.650
and so the road map, we haven't -- we've just
started our first two or three steering committee

00:56:30.650 --> 00:56:31.650
meetings.

00:56:31.650 --> 00:56:34.779
We got basic IP issues, and things like that.

00:56:34.779 --> 00:56:40.640
We're getting to starting to find a road map,
where are we going to go, go to GitHub or

00:56:40.640 --> 00:56:46.099
somewhere else, there's lots of arguments
in the base over that kind of stuff (indiscernible)

00:56:46.099 --> 00:56:50.519
and so one thing we're going to discuss is
what's going to go into the next version and

00:56:50.519 --> 00:56:51.609
when is it going to be released.

00:56:51.609 --> 00:56:57.180
So if you watch GWT steering -- GWT.steering
at Google.com, you can follow along and probably

00:56:57.180 --> 00:57:03.079
get some inkling as to when it's going to
happen.

00:57:03.079 --> 00:57:04.130
Probably sooner.

00:57:04.130 --> 00:57:05.130
Okay.

00:57:05.130 --> 00:57:06.229
Any last questions?

00:57:06.229 --> 00:57:07.279
All right.

00:57:07.279 --> 00:57:09.829
Well, thanks for coming, guys, and I hope
you continue to join GWT.

