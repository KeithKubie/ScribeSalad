WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:03.170
Okay. When you run this program, you notice that you don't get the answer there

00:00:03.170 --> 00:00:07.175
the same. But you get that root squared is a value that's close to 2, but not

00:00:07.175 --> 00:00:12.420
quite. So there's a tiny error in that computation. These errors are

00:00:12.420 --> 00:00:17.480
unavoidable. Because decimal numbers cannot store an infinite number of digits.

00:00:17.480 --> 00:00:20.630
And somewhere, some roundoff is going to happen. So when you compare 2 numbers

00:00:20.630 --> 00:00:23.645
with fractional parts, you're never interested in whether they're exactly the

00:00:23.645 --> 00:00:28.870
same. You want to know, are they close to each other? Or in other words, is the

00:00:28.870 --> 00:00:34.656
difference small? Now we want to take the absolute value of the difference. We

00:00:34.656 --> 00:00:39.152
just care, is that a small positive or negative value? Translated into Java, we

00:00:39.152 --> 00:00:42.532
compute the absolute value of the difference, and we compare it against a tiny

00:00:42.532 --> 00:00:47.730
number. In math, one usually calls a tiny number by the name EPSILON. And in

00:00:47.730 --> 00:00:53.361
many situations, 10 to the minus 12 is a pretty good value to use. Let's do

00:00:53.361 --> 00:00:56.930
that in our program. Instead of the exact comparison, let's test whether root

00:00:56.930 --> 00:01:01.320
squared and the original are close to each other. That's the test here. And of

00:01:01.320 --> 00:01:06.520
course I have to define EPSILON, using the final keyword to indicate that it's

00:01:06.520 --> 00:01:11.551
a constant. Now when we run the program, we get the expected result. The

00:01:11.551 --> 00:01:15.427
takeaway is, whenever you compare two decimal numbers, compare whether they're

00:01:15.427 --> 00:01:19.830
close enough to each other, not whether they're exactly the same.

