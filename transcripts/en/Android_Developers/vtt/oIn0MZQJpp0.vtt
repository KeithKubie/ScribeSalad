WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.346
[MUSIC PLAYING]

00:00:07.044 --> 00:00:08.210
JEFF SHARKEY: Hey, everyone.

00:00:08.210 --> 00:00:11.080
My name is Jeff Sharkey,
and I'm a software engineer

00:00:11.080 --> 00:00:12.970
on the Android Framework Team.

00:00:12.970 --> 00:00:16.540
And today, we're going to be
digging into files on Android

00:00:16.540 --> 00:00:18.340
and all the various
places that Android

00:00:18.340 --> 00:00:20.999
gives you to store those files.

00:00:20.999 --> 00:00:22.540
So today, we'll dig
into you starting

00:00:22.540 --> 00:00:25.980
by looking at some common
locations that Android offers.

00:00:25.980 --> 00:00:29.745
The first broad category
is internal storage,

00:00:29.745 --> 00:00:33.992
and this storage can be
classified as safe and secure,

00:00:33.992 --> 00:00:35.950
because it's something
the Android OS protects.

00:00:35.950 --> 00:00:38.962
It's part of the application
sandbox model that we offer.

00:00:38.962 --> 00:00:41.170
You've probably encountered
some of these directories

00:00:41.170 --> 00:00:43.720
before, like
Context.getFilesDir.

00:00:43.720 --> 00:00:46.170
It's a great default
location to store things.

00:00:46.170 --> 00:00:48.460
One that's slightly
different is getCacheDir.

00:00:48.460 --> 00:00:50.840
We'll dig into that a
little bit later today,

00:00:50.840 --> 00:00:52.420
but one thing to
note is that files

00:00:52.420 --> 00:00:54.970
that you store in that
location, the disk space

00:00:54.970 --> 00:00:57.520
is not counted against
your application.

00:00:57.520 --> 00:01:00.010
And the reason for that is
that Android reserves the right

00:01:00.010 --> 00:01:01.810
to go in there and
delete some of those

00:01:01.810 --> 00:01:05.050
files if the user needs
that disk space elsewhere.

00:01:05.050 --> 00:01:06.070
So it's a trade-off.

00:01:06.070 --> 00:01:07.780
It's a two way street.

00:01:07.780 --> 00:01:10.570
Another directory
getNoBackupfilesDir,

00:01:10.570 --> 00:01:14.110
this can be useful if you have
things like cloud messaging

00:01:14.110 --> 00:01:17.140
tokens that you want to
renew when your app migrates

00:01:17.140 --> 00:01:20.290
between devices.

00:01:20.290 --> 00:01:22.960
If the device goes through
a backup and restore phase,

00:01:22.960 --> 00:01:25.000
those files that you
store in that directory,

00:01:25.000 --> 00:01:27.230
they won't be carried
across the backup.

00:01:27.230 --> 00:01:28.780
So it be useful for that.

00:01:28.780 --> 00:01:30.989
Finally, getCodeCache directory.

00:01:30.989 --> 00:01:32.530
This is a great
place to store things

00:01:32.530 --> 00:01:34.990
like jitted code
or optimized code,

00:01:34.990 --> 00:01:37.206
and the OS will do two things.

00:01:37.206 --> 00:01:39.580
It will delete contents inside
of the directory under two

00:01:39.580 --> 00:01:42.560
conditions-- either when
your application is updated

00:01:42.560 --> 00:01:46.750
via Play Store or whenever the
OS itself receives an upgrade.

00:01:46.750 --> 00:01:48.760
Say from the O release
to the P release,

00:01:48.760 --> 00:01:50.840
it will clear the contents
of that directory.

00:01:50.840 --> 00:01:52.770
So that's a summary
of internal storage.

00:01:52.770 --> 00:01:55.030
Next, the other broad
category of locations

00:01:55.030 --> 00:01:58.420
is external storage, and when
we think of external storage,

00:01:58.420 --> 00:02:00.340
it's more of a shared area.

00:02:00.340 --> 00:02:02.770
And it's unprotected
and the reason I just

00:02:02.770 --> 00:02:05.920
mentioned that is data that
you store in that location,

00:02:05.920 --> 00:02:07.480
you may write it there.

00:02:07.480 --> 00:02:10.389
But other applications can
request the storage permission

00:02:10.389 --> 00:02:12.490
on Android, and they
may write that data

00:02:12.490 --> 00:02:15.080
or modify it without
you knowing about it.

00:02:15.080 --> 00:02:16.750
And so it's something
we definitely

00:02:16.750 --> 00:02:20.630
discourage storing sensitive
contents in that location.

00:02:20.630 --> 00:02:22.360
If you do need to
store data out there,

00:02:22.360 --> 00:02:24.790
consider finding a
way to prove to verify

00:02:24.790 --> 00:02:28.645
the integrity of that data
if you need to trust it.

00:02:28.645 --> 00:02:32.010
The directories here, files are
similar to internal storage,

00:02:32.010 --> 00:02:33.820
cached are the same way.

00:02:33.820 --> 00:02:35.860
External media
dirs, that you save

00:02:35.860 --> 00:02:38.830
in there will be scanned by
media stored on the device.

00:02:38.830 --> 00:02:41.440
So it's a good place to
store photos or videos

00:02:41.440 --> 00:02:44.290
that you want to be included in
the user's Gallery application

00:02:44.290 --> 00:02:46.150
to be scanned and
included there.

00:02:46.150 --> 00:02:50.620
GetObbDirs, Obb stands
for Opaque binary blobs,

00:02:50.620 --> 00:02:53.920
and these are large
files typically used

00:02:53.920 --> 00:02:57.010
for game developers that are
delivered through Google Play.

00:02:57.010 --> 00:02:58.836
Data that you store
in those locations,

00:02:58.836 --> 00:03:00.460
they're counted
towards your app's code

00:03:00.460 --> 00:03:03.240
size instead of its data size.

00:03:03.240 --> 00:03:05.860
So so far, we've talked about
broadly internal storage

00:03:05.860 --> 00:03:08.620
and external storage, and these
are all great places for you

00:03:08.620 --> 00:03:11.080
to store data that
belongs to your app.

00:03:11.080 --> 00:03:12.730
But you might find
yourself creating

00:03:12.730 --> 00:03:16.030
data that belongs to the user,
that the user may want to store

00:03:16.030 --> 00:03:17.590
in a different location.

00:03:17.590 --> 00:03:21.050
And that's a great place to use
the storage Access Framework,

00:03:21.050 --> 00:03:23.020
and there's two intents
that work great there--

00:03:23.020 --> 00:03:26.099
Intent.ACTION_OPEN_DOCUMENT
and CREATE_DOCUMENT.

00:03:26.099 --> 00:03:28.390
These have been around in
the platform since the KitKat

00:03:28.390 --> 00:03:30.040
release, and you
can think of them

00:03:30.040 --> 00:03:33.790
as an open and a save
dialog box for the user.

00:03:33.790 --> 00:03:35.290
It really offers a
great experience,

00:03:35.290 --> 00:03:38.590
because the user has control
over exactly where those files

00:03:38.590 --> 00:03:40.210
are stored on the device.

00:03:40.210 --> 00:03:43.030
It gives them the freedom to
choose any of those locations.

00:03:43.030 --> 00:03:45.937
It also opens the door for
cloud storage providers.

00:03:45.937 --> 00:03:47.770
You don't have to
integrate a cloud provider

00:03:47.770 --> 00:03:49.810
SDK into your application.

00:03:49.810 --> 00:03:51.310
You just simply
launch the intent,

00:03:51.310 --> 00:03:52.930
and the user can
select where they

00:03:52.930 --> 00:03:54.642
want that file to be stored.

00:03:54.642 --> 00:03:57.100
There's some great talks that
have dug into this elsewhere,

00:03:57.100 --> 00:03:59.230
so I'd encourage you to
search around online.

00:03:59.230 --> 00:04:02.530
There's some great content
that digs more in depth.

00:04:02.530 --> 00:04:04.640
So we talked about
some basic locations.

00:04:04.640 --> 00:04:07.300
Let's do a deep dive on two
specific advanced locations

00:04:07.300 --> 00:04:08.200
today.

00:04:08.200 --> 00:04:10.450
One that we'll dig
into is Direct Boot,

00:04:10.450 --> 00:04:12.880
and the second we'll
dig into is Cache Data.

00:04:12.880 --> 00:04:15.280
So first, Direct Boot,
which you may not

00:04:15.280 --> 00:04:16.834
have encountered before.

00:04:16.834 --> 00:04:18.250
And first, it's
worth starting out

00:04:18.250 --> 00:04:22.089
like we built the Direct
Boot feature in the Android N

00:04:22.089 --> 00:04:25.420
release to solve an
important problem.

00:04:25.420 --> 00:04:28.980
Before the N release, when we
encrypted an Android device,

00:04:28.980 --> 00:04:30.940
and if the user
rebooted that device,

00:04:30.940 --> 00:04:33.220
no apps could run
until after the user

00:04:33.220 --> 00:04:36.850
had entered their credentials--
a pin, pattern, or password.

00:04:36.850 --> 00:04:38.650
So what we did in
the N releases,

00:04:38.650 --> 00:04:42.040
we created two storage areas
that they're still encrypted,

00:04:42.040 --> 00:04:44.320
but they're encrypted
with two different keys.

00:04:44.320 --> 00:04:46.900
And we call these areas
the device protected area

00:04:46.900 --> 00:04:48.790
and the credential
protected area.

00:04:48.790 --> 00:04:51.970
The device protected
area becomes

00:04:51.970 --> 00:04:54.880
available by virtue of
the device proving that it

00:04:54.880 --> 00:04:56.360
hasn't been tampered with.

00:04:56.360 --> 00:04:58.360
So when the device
boots up, there

00:04:58.360 --> 00:05:01.300
is dm-verity verifies
that the device

00:05:01.300 --> 00:05:02.500
hasn't been tampered with.

00:05:02.500 --> 00:05:04.390
By virtue of proving
that, it unlocks

00:05:04.390 --> 00:05:07.210
that device protected storage.

00:05:07.210 --> 00:05:10.480
Then later, when the user enters
that pin, pattern, or password,

00:05:10.480 --> 00:05:12.400
the credential protected
storage becomes

00:05:12.400 --> 00:05:15.040
available for
applications to use.

00:05:15.040 --> 00:05:17.440
If you haven't encountered
these APIs before,

00:05:17.440 --> 00:05:19.990
rest assured that all of your
data by default as an app

00:05:19.990 --> 00:05:23.760
developer is always stored
in credential protected area.

00:05:23.760 --> 00:05:25.810
But if you find a
place where you'd

00:05:25.810 --> 00:05:28.780
like to run before the user
has unlocked their device,

00:05:28.780 --> 00:05:30.490
that's where it might
be useful to store

00:05:30.490 --> 00:05:34.480
small bits of information out
in that device protected area,

00:05:34.480 --> 00:05:37.600
so that your app can be useful
while the device is locked.

00:05:37.600 --> 00:05:39.110
So then you might
ask the question,

00:05:39.110 --> 00:05:41.530
how do you gain access
to that storage area?

00:05:41.530 --> 00:05:44.080
The credential protected
area, as I mentioned,

00:05:44.080 --> 00:05:48.456
context.getFilesDir offers
that credential protected area.

00:05:48.456 --> 00:05:50.830
There's a method on context,
and you can see it down here

00:05:50.830 --> 00:05:52.540
at the bottom of
the screen, create

00:05:52.540 --> 00:05:54.340
DeviceProtectedStorageContext.

00:05:54.340 --> 00:05:55.820
It's a little bit of a mouthful.

00:05:55.820 --> 00:05:59.230
What it does is it returns
another different context where

00:05:59.230 --> 00:06:02.840
the file APIs, referring to
internal storage on that return

00:06:02.840 --> 00:06:06.870
to context, point at the
device protected storage.

00:06:06.870 --> 00:06:09.670
So let's take a look at some
code examples of how you might

00:06:09.670 --> 00:06:11.560
integrate with those APIs.

00:06:11.560 --> 00:06:13.390
One of the first things
you'll need to do

00:06:13.390 --> 00:06:16.270
is if you want to
become Direct Boot aware

00:06:16.270 --> 00:06:18.850
is to think about what data
you want to keep on credential

00:06:18.850 --> 00:06:22.750
protected storage or migrate
out to device protected storage.

00:06:22.750 --> 00:06:24.850
So a lot of you will be
writing code like this

00:06:24.850 --> 00:06:27.040
to decide during that
initial upgrade step

00:06:27.040 --> 00:06:29.254
how you want to migrate
data back and forth.

00:06:29.254 --> 00:06:30.670
The first thing
you'll probably do

00:06:30.670 --> 00:06:33.370
when starting your
application is ask is the user

00:06:33.370 --> 00:06:34.840
currently unlocked?

00:06:34.840 --> 00:06:37.220
Has that pin, pattern,
or password been offered?

00:06:37.220 --> 00:06:39.340
So the User Manager class
offers, you can check

00:06:39.340 --> 00:06:41.140
is the current user unlocked?

00:06:41.140 --> 00:06:42.749
Assuming that they
are unlocked, that

00:06:42.749 --> 00:06:45.040
means you have access to both
the device and credential

00:06:45.040 --> 00:06:45.840
storage.

00:06:45.840 --> 00:06:48.262
And here we can see there's
two move methods that

00:06:48.262 --> 00:06:49.220
are offered as helpers.

00:06:49.220 --> 00:06:51.760
You can move shared preferences
between two locations,

00:06:51.760 --> 00:06:54.940
and you can also move
databases back and forth.

00:06:54.940 --> 00:06:58.180
The reason we provide these
helper methods is oftentimes

00:06:58.180 --> 00:07:01.000
shared preferences or
databases can actually

00:07:01.000 --> 00:07:03.880
be made up of multiple files
on disk, and some of that data

00:07:03.880 --> 00:07:05.710
may also be cached in memory.

00:07:05.710 --> 00:07:07.150
So by calling these
helper methods

00:07:07.150 --> 00:07:09.310
to move that data
around, we ensure

00:07:09.310 --> 00:07:12.820
that all the data gets moved and
that any in-memory caches are

00:07:12.820 --> 00:07:14.970
invalidated along the way.

00:07:14.970 --> 00:07:18.160
When you think about data that
you would want to migrate,

00:07:18.160 --> 00:07:19.840
one thing we say is
only move the data

00:07:19.840 --> 00:07:21.970
you think you need to
provide that user experience

00:07:21.970 --> 00:07:23.224
while the device is locked.

00:07:23.224 --> 00:07:25.390
So things like if you're
building an alarm lock app,

00:07:25.390 --> 00:07:28.210
you'd probably move the
user's next alarm time out

00:07:28.210 --> 00:07:30.100
into that device
protected area to make

00:07:30.100 --> 00:07:33.190
sure the alarm clock would go
off if the user's device is

00:07:33.190 --> 00:07:34.470
currently locked.

00:07:34.470 --> 00:07:36.720
Another strategy
that we've seen used,

00:07:36.720 --> 00:07:39.226
if you have auth tokens
to talk to a server,

00:07:39.226 --> 00:07:40.600
we've actually
recommended people

00:07:40.600 --> 00:07:43.930
create a second type of auth
token for your cloud server.

00:07:43.930 --> 00:07:47.140
One, auth token is a full,
rich, full-access token,

00:07:47.140 --> 00:07:48.460
which you'd probably use today.

00:07:48.460 --> 00:07:52.120
We'd recommend keeping that in
the credential protected area

00:07:52.120 --> 00:07:55.570
and creating a second much more
limited in-scope auth token

00:07:55.570 --> 00:07:58.540
and only storing that limited
in-scope auth token out

00:07:58.540 --> 00:08:00.320
in the device protected area.

00:08:00.320 --> 00:08:03.280
Maybe that auth token, when it
talks to your server back end,

00:08:03.280 --> 00:08:06.340
is only able to return the
fact that the user has three

00:08:06.340 --> 00:08:09.130
unread messages, and maybe
it can't do any operations

00:08:09.130 --> 00:08:10.150
beyond that.

00:08:10.150 --> 00:08:12.010
So it helps you
deliver the experience

00:08:12.010 --> 00:08:13.510
of getting the
user's attention when

00:08:13.510 --> 00:08:16.690
you need to but without
being able to access

00:08:16.690 --> 00:08:20.219
any of the additional richer
information in your cloud.

00:08:20.219 --> 00:08:21.760
OK, so we've talked
if it's unlocked,

00:08:21.760 --> 00:08:23.560
we can migrate data
back and forth.

00:08:23.560 --> 00:08:26.110
The else clause here, we'd
recommend that you register.

00:08:26.110 --> 00:08:27.850
There's a runtime
broadcast that's sent,

00:08:27.850 --> 00:08:29.350
an action user
unlocked, and that

00:08:29.350 --> 00:08:32.860
would allow you to then run
code when the user enters

00:08:32.860 --> 00:08:35.120
that pin, pattern, or password.

00:08:35.120 --> 00:08:37.840
The middle code snippet
here, those move methods,

00:08:37.840 --> 00:08:39.200
they work both directions.

00:08:39.200 --> 00:08:41.380
So if you accidentally
move some data out

00:08:41.380 --> 00:08:43.260
into the device
protected area, you

00:08:43.260 --> 00:08:46.150
can also move it right back
into the credential area.

00:08:46.150 --> 00:08:47.890
And another tidbit,
another API that

00:08:47.890 --> 00:08:49.681
might be useful at the
bottom of the screen

00:08:49.681 --> 00:08:52.330
there, if you're ever wondering
if a particular file is going

00:08:52.330 --> 00:08:55.505
to be encrypted at rest
by the operating system,

00:08:55.505 --> 00:08:57.130
you can quickly check
for that as well.

00:08:57.130 --> 00:08:59.766
There's a StorageManager
isEncrypted API,

00:08:59.766 --> 00:09:01.390
and that can be useful
if you're trying

00:09:01.390 --> 00:09:04.150
to decide if you want to
roll your own encryption

00:09:04.150 --> 00:09:08.510
or rely on the encryption at
rest that the OS provides.

00:09:08.510 --> 00:09:11.130
All right, so a second deep
dive area that we'll dig into

00:09:11.130 --> 00:09:13.980
is cached data on the
OS, and this is typically

00:09:13.980 --> 00:09:17.400
data that you can regenerate
or redownload later on,

00:09:17.400 --> 00:09:19.020
if it happens to be deleted.

00:09:19.020 --> 00:09:21.960
And I mentioned earlier that
this is a two way street.

00:09:21.960 --> 00:09:23.490
The OS won't count
the data that you

00:09:23.490 --> 00:09:25.962
use in that area against your
app, but at the same time,

00:09:25.962 --> 00:09:27.420
we reserve the
right to go in there

00:09:27.420 --> 00:09:29.370
and delete some of that
data if the user needs

00:09:29.370 --> 00:09:32.570
the disk space for something
else that they're doing.

00:09:32.570 --> 00:09:35.220
And something that we
improved in the O release

00:09:35.220 --> 00:09:38.350
is we rewrote the
algorithms used internally.

00:09:38.350 --> 00:09:41.100
One of the biggest questions we
got from you, from developers,

00:09:41.100 --> 00:09:44.940
was how much cache space
is appropriate to use?

00:09:44.940 --> 00:09:46.290
Can I use 500 meg?

00:09:46.290 --> 00:09:47.370
Is that too much?

00:09:47.370 --> 00:09:49.090
Is 50 meg too much?

00:09:49.090 --> 00:09:51.190
So now we offer
explicit guidance.

00:09:51.190 --> 00:09:52.950
There's an API on
Storage Manager

00:09:52.950 --> 00:09:56.070
to figure out a cache
quota for your application,

00:09:56.070 --> 00:09:58.410
a reasonable amount that
the device thinks is

00:09:58.410 --> 00:10:00.030
reasonable for your app to use.

00:10:00.030 --> 00:10:03.370
And the nice thing is the OS
adjusts that value over time.

00:10:03.370 --> 00:10:05.952
So if the user spends a lot
of time in your application,

00:10:05.952 --> 00:10:07.410
we're going to
increase that number

00:10:07.410 --> 00:10:09.210
to give you more cache
space to work with,

00:10:09.210 --> 00:10:13.599
so that you can offer a better
user experience to your users.

00:10:13.599 --> 00:10:15.390
Another thing that we
did in the O release,

00:10:15.390 --> 00:10:17.160
we rewrote the
internal implementation

00:10:17.160 --> 00:10:18.930
of how that data is cleared.

00:10:18.930 --> 00:10:21.300
Before the O release,
we would literally

00:10:21.300 --> 00:10:23.520
list all of the cache
files on the OS,

00:10:23.520 --> 00:10:26.172
sort them by modified time,
and delete the oldest files.

00:10:26.172 --> 00:10:27.630
And you can imagine
that there were

00:10:27.630 --> 00:10:30.180
ways you could gamify
that system by setting

00:10:30.180 --> 00:10:33.090
your modified time out
to like the year 2038.

00:10:33.090 --> 00:10:37.350
So we fixed that, and so now
in O and future releases,

00:10:37.350 --> 00:10:40.170
the OS will delete data
from apps that are most

00:10:40.170 --> 00:10:42.420
over their quota first.

00:10:42.420 --> 00:10:45.690
So what this means, if your app
stays right around the cache

00:10:45.690 --> 00:10:47.600
quota that the OS
has recommended,

00:10:47.600 --> 00:10:50.100
you can be pretty confident
that your data will be there

00:10:50.100 --> 00:10:53.130
and will remain available,
even as the user

00:10:53.130 --> 00:10:55.050
starts filling up their disk.

00:10:55.050 --> 00:10:57.390
So let's look again
at some code snippets,

00:10:57.390 --> 00:10:59.860
like how do we use
this in practice?

00:10:59.860 --> 00:11:01.620
So again going to
Storage Manager,

00:11:01.620 --> 00:11:03.480
if you're integrating
with a common class,

00:11:03.480 --> 00:11:05.880
say like Disk LRU
cache, it's pretty easy

00:11:05.880 --> 00:11:07.530
to connect the two
things together.

00:11:07.530 --> 00:11:10.329
You can ask the US for that
recommended cache quota bytes

00:11:10.329 --> 00:11:11.745
and plug it straight
into the disk

00:11:11.745 --> 00:11:15.710
color you cache to help it
trim how much size it's using.

00:11:15.710 --> 00:11:18.420
If you have multiple types
of caches, it's up to you

00:11:18.420 --> 00:11:20.760
to decide how you want
to fractionally account

00:11:20.760 --> 00:11:23.550
or distribute that cache amongst
here, the inside, internals

00:11:23.550 --> 00:11:24.870
of your app.

00:11:24.870 --> 00:11:26.992
The second code snippet
there, if you're

00:11:26.992 --> 00:11:28.950
rolling some of your own
caching, I'd point out

00:11:28.950 --> 00:11:31.470
there's a method called
getCacheSizeBytes.

00:11:31.470 --> 00:11:34.620
This is a fast way to ask the
question, how much cache space

00:11:34.620 --> 00:11:36.650
your app is currently using.

00:11:36.650 --> 00:11:39.570
It's an optimized call that
will turn very quickly,

00:11:39.570 --> 00:11:41.550
and it's faster than
you having to go iterate

00:11:41.550 --> 00:11:43.680
over your own disk usage
to try to figure out

00:11:43.680 --> 00:11:45.780
how much space you're using.

00:11:45.780 --> 00:11:48.180
Another feature that we
added in the O release which

00:11:48.180 --> 00:11:50.130
is covered at the bottom
half of this slide

00:11:50.130 --> 00:11:52.506
is the ability to
have cache behaviors,

00:11:52.506 --> 00:11:53.880
and we heard this
from developers

00:11:53.880 --> 00:11:54.870
that it can be useful.

00:11:54.870 --> 00:11:57.870
You may download multiple
files that really should be

00:11:57.870 --> 00:12:00.030
treated as a unit or a group.

00:12:00.030 --> 00:12:01.620
One concrete example
is downloading

00:12:01.620 --> 00:12:05.500
say a movie file and a subtitles
file that goes along with it.

00:12:05.500 --> 00:12:07.920
If you store both of those
in the cache directory,

00:12:07.920 --> 00:12:10.230
if one of them gets
deleted, the other file

00:12:10.230 --> 00:12:11.885
isn't really useful
and valuable.

00:12:11.885 --> 00:12:14.010
So the cache behavior offers
you a way to indicate,

00:12:14.010 --> 00:12:16.740
to tell us is the operating
system, that if we need disk

00:12:16.740 --> 00:12:20.122
space, we should delete both of
those things at the same time.

00:12:20.122 --> 00:12:21.740
All right, so we
talked about some

00:12:21.740 --> 00:12:23.272
of the common storage locations.

00:12:23.272 --> 00:12:25.730
Let's switch gears and talk
about how we can work together,

00:12:25.730 --> 00:12:28.070
both the OS helping
you as developers.

00:12:28.070 --> 00:12:30.320
And one of the biggest things
that we offered in the O

00:12:30.320 --> 00:12:33.260
release is the ability
to help you get the disk

00:12:33.260 --> 00:12:35.270
space that you need.

00:12:35.270 --> 00:12:38.210
Before the O release, if you
wanted to do a large download,

00:12:38.210 --> 00:12:40.220
let's say one gigabyte in size.

00:12:40.220 --> 00:12:42.290
And if you'd looked just
at the free disk space,

00:12:42.290 --> 00:12:44.930
you may only see 500
megabytes were free,

00:12:44.930 --> 00:12:47.390
and it may look like that
download was impossible.

00:12:47.390 --> 00:12:49.940
But there's a new API
in the O release, where

00:12:49.940 --> 00:12:53.120
the OS will offer to go and
delete cache files belonging

00:12:53.120 --> 00:12:55.580
to other applications
to help free up the disk

00:12:55.580 --> 00:12:59.150
space for that operation to
succeed for your application.

00:12:59.150 --> 00:13:01.190
If there still isn't
enough disk space,

00:13:01.190 --> 00:13:02.840
there's new intents
that you can launch

00:13:02.840 --> 00:13:06.170
to help get the user involved,
to help them pick items

00:13:06.170 --> 00:13:08.540
and different things that
they can do to help free

00:13:08.540 --> 00:13:10.110
up that disk space.

00:13:10.110 --> 00:13:11.760
So how do we use this API?

00:13:11.760 --> 00:13:12.911
Here's a snapshot of this.

00:13:12.911 --> 00:13:15.410
The very top of the slide, this
is maybe the way that you've

00:13:15.410 --> 00:13:16.989
been writing code today.

00:13:16.989 --> 00:13:18.530
You'll just do a
pretty simple check.

00:13:18.530 --> 00:13:20.738
You have a download size
you're comparing it against.

00:13:20.738 --> 00:13:24.235
Java.io.File.getUsableSpace
how much space is there?

00:13:24.235 --> 00:13:26.360
That's the operation that
may look like it wouldn't

00:13:26.360 --> 00:13:28.040
be possible to succeed.

00:13:28.040 --> 00:13:30.860
But if you convert your code
to using the rest with a code

00:13:30.860 --> 00:13:34.415
snippet on this slide, if
you call the StorageManager.g

00:13:34.415 --> 00:13:38.120
etAllocatableBytes API,
that will return not just

00:13:38.120 --> 00:13:40.610
the free space, it
will also include space

00:13:40.610 --> 00:13:42.560
that the OS is
willing to go free up

00:13:42.560 --> 00:13:46.020
on your behalf from other
applications' cache data.

00:13:46.020 --> 00:13:49.160
So in this case, it may look
like if we have enough space

00:13:49.160 --> 00:13:51.950
inside of that if block, we can
actually open that file output

00:13:51.950 --> 00:13:52.700
stream.

00:13:52.700 --> 00:13:55.337
And now there's an API
call allocate bytes,

00:13:55.337 --> 00:13:57.170
and what this will do
is it will go actually

00:13:57.170 --> 00:13:59.390
claim that disk space,
free application.

00:13:59.390 --> 00:14:01.610
Deep underneath, it'll
use the F allocate

00:14:01.610 --> 00:14:03.920
system call to ensure
that those blocks belong

00:14:03.920 --> 00:14:06.500
to your application, and that
you do have the space that's

00:14:06.500 --> 00:14:08.370
guaranteed to belong to you.

00:14:08.370 --> 00:14:11.150
So that could be a
useful API to use.

00:14:11.150 --> 00:14:12.974
And the else block
here, if there still

00:14:12.974 --> 00:14:15.140
wasn't enough space, we now
offer some great intents

00:14:15.140 --> 00:14:17.300
for you to ask the user
for help to come along

00:14:17.300 --> 00:14:20.850
and free up information,
free up the disk space.

00:14:20.850 --> 00:14:23.620
Sharing content, we've covered
this a little bit before.

00:14:23.620 --> 00:14:24.960
How can we work together there?

00:14:24.960 --> 00:14:27.270
Please always use
content URIs when you're

00:14:27.270 --> 00:14:28.740
sharing between applications.

00:14:28.740 --> 00:14:31.260
Never use file
URIs, and the reason

00:14:31.260 --> 00:14:32.940
is that receiving
application, they

00:14:32.940 --> 00:14:35.370
may not have the permissions
that they need to directly

00:14:35.370 --> 00:14:37.330
access the files on disk.

00:14:37.330 --> 00:14:39.570
If you use content
URIs, the OS can

00:14:39.570 --> 00:14:42.390
manage the dynamic permissions
to give the receiving

00:14:42.390 --> 00:14:44.830
app, to make sure that
they can open the content.

00:14:44.830 --> 00:14:46.470
If you find yourself
in this position,

00:14:46.470 --> 00:14:48.480
File Provider in
the support library

00:14:48.480 --> 00:14:50.730
is a great way to
convert between the two

00:14:50.730 --> 00:14:53.790
with a single line of code
every place to convert from file

00:14:53.790 --> 00:14:54.960
to content.

00:14:54.960 --> 00:14:58.080
And over the years, because
this is an important thing

00:14:58.080 --> 00:15:00.420
to pay attention to, we
built strict mode APIs

00:15:00.420 --> 00:15:03.099
to help you track down to
detect these places in your app.

00:15:03.099 --> 00:15:05.640
You can detect places where you
might be accidentally sharing

00:15:05.640 --> 00:15:08.340
file URIs, and now, in
a more recent release,

00:15:08.340 --> 00:15:11.160
you can also detect places where
you're sharing a content URI,

00:15:11.160 --> 00:15:13.740
and you might be forgetting
the flag_grant_read

00:15:13.740 --> 00:15:16.500
or the flag_grant_write to
go along with that intent.

00:15:16.500 --> 00:15:20.770
So those can be two APIs
that are helpful to look at.

00:15:20.770 --> 00:15:23.590
Native code is another
area to think about.

00:15:23.590 --> 00:15:27.160
We'd strongly recommend that
you look at opening files up

00:15:27.160 --> 00:15:30.760
in higher level managed
code, up in Java or Kotlin,

00:15:30.760 --> 00:15:32.770
and passing down the
already open file

00:15:32.770 --> 00:15:35.980
descriptor, the integer,
down into native code.

00:15:35.980 --> 00:15:38.290
And the reason for that is
opening in a managed code

00:15:38.290 --> 00:15:41.890
gives the OS the opportunity to
notice and inspect and correct

00:15:41.890 --> 00:15:42.760
things.

00:15:42.760 --> 00:15:45.772
In particular, it can look
for strict mode violations.

00:15:45.772 --> 00:15:47.230
If you open a
managed code, you may

00:15:47.230 --> 00:15:49.521
notice that the thread that
you're currently running on

00:15:49.521 --> 00:15:52.560
is important to the
user, may block or cause

00:15:52.560 --> 00:15:54.370
jank in your app,
and we're going

00:15:54.370 --> 00:15:57.100
to start using this more
in future Android releases.

00:15:57.100 --> 00:15:59.170
So this is why we want
to strongly encourage,

00:15:59.170 --> 00:16:01.900
open the file in Java or
the higher level language,

00:16:01.900 --> 00:16:04.900
pass the integer
down to native code.

00:16:04.900 --> 00:16:09.530
Don't pass the file path
itself across the JNI boundary.

00:16:09.530 --> 00:16:11.350
And a quick code snippet
of what that looks

00:16:11.350 --> 00:16:14.380
like, you can pretty quickly do
this with ParcelFileDescriptor.

00:16:14.380 --> 00:16:16.690
You can open a particular
file on disk, maybe

00:16:16.690 --> 00:16:18.370
for read/write in
this case, and there's

00:16:18.370 --> 00:16:21.820
a method called detachfd that
will return that integer.

00:16:21.820 --> 00:16:23.560
It's just an int
that is ready for you

00:16:23.560 --> 00:16:26.800
to pass across a JNI
boundary as a jint.

00:16:26.800 --> 00:16:30.020
So that's the recommended
design going forward.

00:16:30.020 --> 00:16:32.230
Another note that might be
at a trick or a tip that

00:16:32.230 --> 00:16:33.130
could be useful.

00:16:33.130 --> 00:16:35.350
If you find yourself
just jumping across JNI

00:16:35.350 --> 00:16:37.510
to do a handful of
system calls, you

00:16:37.510 --> 00:16:40.120
might go look at
Android.system.OS.

00:16:40.120 --> 00:16:43.120
There are several dozen
POSIX syscalls ready

00:16:43.120 --> 00:16:44.890
for you to use up in Java today.

00:16:44.890 --> 00:16:46.820
We only added that a
couple of releases ago.

00:16:46.820 --> 00:16:48.278
So you may be able
to find that you

00:16:48.278 --> 00:16:51.109
can do those handful of
syscalls purely in Java,

00:16:51.109 --> 00:16:53.650
and you may be able to get rid
of the JNI and the native code

00:16:53.650 --> 00:16:54.660
in your application.

00:16:54.660 --> 00:16:56.592
So take a look at that.

00:16:56.592 --> 00:16:59.880
And finally, working
with media, we'd

00:16:59.880 --> 00:17:02.040
really recommend that you
use Media Store if you're

00:17:02.040 --> 00:17:04.650
looking to find the photos
or videos that the user has

00:17:04.650 --> 00:17:05.984
on their device.

00:17:05.984 --> 00:17:07.650
And you might be
tempted to go and build

00:17:07.650 --> 00:17:10.619
your own index of
whatever media you find,

00:17:10.619 --> 00:17:12.690
but that can be pretty
wasteful, both of CPU

00:17:12.690 --> 00:17:14.270
and battery for the user.

00:17:14.270 --> 00:17:16.050
And another note
is we're actively

00:17:16.050 --> 00:17:19.380
working on improving Media Store
and really adding functionality

00:17:19.380 --> 00:17:22.800
there, so stay tuned over
the next couple releases.

00:17:22.800 --> 00:17:26.700
Another note is open files,
open the content of that media,

00:17:26.700 --> 00:17:28.290
through Content Resolver.

00:17:28.290 --> 00:17:30.300
You may have noticed
that there are columns

00:17:30.300 --> 00:17:33.150
across the operating system
called underscore data

00:17:33.150 --> 00:17:36.439
and they return a
raw file system path.

00:17:36.439 --> 00:17:38.730
Over time, you may have
noticed that a handful of those

00:17:38.730 --> 00:17:41.160
underscore data columns
have been deprecated

00:17:41.160 --> 00:17:44.230
in previous releases,
and just to expect

00:17:44.230 --> 00:17:45.490
that's going to continue.

00:17:45.490 --> 00:17:47.740
So you'll notice more of
those underscore data columns

00:17:47.740 --> 00:17:49.064
becoming deprecated over time.

00:17:49.064 --> 00:17:51.480
We really want to encourage
people to move towards content

00:17:51.480 --> 00:17:53.680
URIs as a best practice.

00:17:53.680 --> 00:17:56.370
So yeah, thank
you for your time,

00:17:56.370 --> 00:17:58.800
being able to dig into some
of the nitty gritty areas

00:17:58.800 --> 00:18:01.562
of storage, and I'll be
available in the Q&amp;A section

00:18:01.562 --> 00:18:03.270
afterwards, if you
have questions for me.

00:18:03.270 --> 00:18:04.530
Thanks for your time.

00:18:04.530 --> 00:18:07.880
[MUSIC PLAYING]

