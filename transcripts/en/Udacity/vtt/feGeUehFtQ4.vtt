WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.806
And of course code snippet 2 represents a gather

00:00:03.806 --> 00:00:08.922
since each thread is going to access 3 elements of the N array

00:00:08.922 --> 00:00:12.763
and then do some math and store the results into a single place in the output array,

00:00:12.763 --> 00:00:17.246
and that gather operation is going to run much faster, right?

00:00:17.246 --> 00:00:20.757
You probably noticed that in fact the first operation is accessing more memory

00:00:20.757 --> 00:00:24.227
since it has to read the 3 output locations in order to increment them,

00:00:24.227 --> 00:00:27.830
and it won't even run correctly unless we insert some sink threads barrier in here

00:00:27.830 --> 00:00:31.865
or use atomic operations to guarantee that 1 thread doesn't read a value

00:00:31.865 --> 00:00:34.550
while another one is in process of updating it.

00:00:34.550 --> 00:00:38.041
Either of those would further reduce performance, and this is typical,

00:00:38.041 --> 00:00:40.895
A gather pattern results in many overlapping reads

00:00:40.895 --> 00:00:43.847
that the hardware can typically handle more efficiently

00:00:43.847 --> 00:00:49.210
than it can handle many potentially conflicting writes, which is what you tend to get from this scatter pattern.

00:00:49.210 --> 00:00:52.775
So now if the pattern of reads can't be determined ahead of time,

00:00:52.775 --> 00:00:56.131
you may need to combine this with Stratten's technique number 5, binning.

00:00:56.131 --> 00:00:58.269
We'll come back to that.

