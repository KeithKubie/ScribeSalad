WEBVTT
Kind: captions
Language: en

00:00:01.355 --> 00:00:02.730
SHAHID HUSSAIN:
My name's Shahid.

00:00:02.730 --> 00:00:04.650
I'm a product
manager on Chrome OS.

00:00:04.650 --> 00:00:07.710
I'm here with my colleague,
Ben, and our friends

00:00:07.710 --> 00:00:09.990
from Samsung and Gameloft.

00:00:09.990 --> 00:00:13.830
And we're going to be
talking to you about building

00:00:13.830 --> 00:00:17.940
and making sure that
Android games run well

00:00:17.940 --> 00:00:21.270
on screens with devices
with large screens.

00:00:21.270 --> 00:00:24.150
So Ben it's going to be
coming on stage shortly

00:00:24.150 --> 00:00:26.700
to tell you a
little bit about how

00:00:26.700 --> 00:00:31.050
you can make Android games work
well with large screen devices.

00:00:31.050 --> 00:00:32.880
Just before he does
that, I'm going

00:00:32.880 --> 00:00:34.957
to spend a few minutes
talking about why

00:00:34.957 --> 00:00:36.040
you should think about it.

00:00:38.640 --> 00:00:43.140
So we at Google spend a lot
of time thinking about gaming,

00:00:43.140 --> 00:00:46.770
in part because we have so
many people using Play Store--

00:00:46.770 --> 00:00:49.710
and many of those people
do so because they

00:00:49.710 --> 00:00:51.340
want to play games.

00:00:51.340 --> 00:00:55.170
So we think about what games
people are playing and why

00:00:55.170 --> 00:00:58.410
and what games they're going
to be playing two, three, five

00:00:58.410 --> 00:01:00.430
years from now.

00:01:00.430 --> 00:01:04.980
So as we do that, we're starting
to see more and more titles

00:01:04.980 --> 00:01:08.535
that pull players in
with immersive graphics

00:01:08.535 --> 00:01:11.340
and immersive gameplay.

00:01:11.340 --> 00:01:14.800
And that makes sense to us
because mobile hardware has

00:01:14.800 --> 00:01:17.620
grown stronger 3D
capabilities, higher resolution

00:01:17.620 --> 00:01:19.540
screens, and the
Android framework

00:01:19.540 --> 00:01:23.230
itself has evolved to support
these with modern graphics APIs

00:01:23.230 --> 00:01:24.880
like Vulkan.

00:01:24.880 --> 00:01:27.910
And those immersive
titles look and play

00:01:27.910 --> 00:01:32.530
better on large screen devices.

00:01:32.530 --> 00:01:34.590
So we talk about larger screens.

00:01:34.590 --> 00:01:37.250
What do we what do we mean?

00:01:37.250 --> 00:01:40.330
Well we're really thinking
about four things.

00:01:40.330 --> 00:01:43.250
Chromebooks-- that's the
team that I come from--

00:01:43.250 --> 00:01:46.310
tablets-- in our case
Android tablets--

00:01:46.310 --> 00:01:49.280
devices that have mobile
to desktop extension,

00:01:49.280 --> 00:01:51.410
and foldable phones.

00:01:51.410 --> 00:01:54.770
And our friend from
Samsung will be telling you

00:01:54.770 --> 00:01:56.970
a little bit about that.

00:01:56.970 --> 00:01:59.060
So first Chromebooks.

00:01:59.060 --> 00:02:01.745
Who here has a Chromebook?

00:02:01.745 --> 00:02:05.230
If you could raise
your hand please.

00:02:05.230 --> 00:02:05.870
Oh OK.

00:02:05.870 --> 00:02:10.360
I have people raising multiple
hands, which is awesome.

00:02:10.360 --> 00:02:14.430
So thank you for those of you
who use Chromebook devices.

00:02:14.430 --> 00:02:17.348
So for those of you who
are game developers, if you

00:02:17.348 --> 00:02:18.890
have a game in the
Google Play Store,

00:02:18.890 --> 00:02:21.920
it's probably already
running on Chrome OS.

00:02:21.920 --> 00:02:27.150
So I'd definitely recommend,
grab any Chrome OS device,

00:02:27.150 --> 00:02:30.140
load it up in the Play
Store, and check it out.

00:02:30.140 --> 00:02:32.090
Now the way that
works is Chromebooks

00:02:32.090 --> 00:02:34.490
run a full version of
the Android framework

00:02:34.490 --> 00:02:35.960
inside a container.

00:02:35.960 --> 00:02:38.300
So from a games
perspective, it's just

00:02:38.300 --> 00:02:39.830
running on an Android device.

00:02:39.830 --> 00:02:43.860
The container connects directly
to input, display, networking,

00:02:43.860 --> 00:02:45.980
and so on.

00:02:45.980 --> 00:02:48.760
Now you probably
know Chromebooks

00:02:48.760 --> 00:02:52.360
as laptops but Chrome
OS, the operating

00:02:52.360 --> 00:02:55.390
system that powers that, is
available on a bunch of form

00:02:55.390 --> 00:02:56.320
factors--

00:02:56.320 --> 00:03:01.990
desktops, all-in-ones,
detachables, and now tablets.

00:03:01.990 --> 00:03:05.920
And your input is going to
vary from device to device

00:03:05.920 --> 00:03:07.520
your main input on
a laptop is going

00:03:07.520 --> 00:03:10.058
to be keyboard and some
kind of pointing device.

00:03:10.058 --> 00:03:12.100
But when you go through
all those different types

00:03:12.100 --> 00:03:13.908
of devices, it can vary.

00:03:13.908 --> 00:03:15.325
Not every device
has a touchscreen

00:03:15.325 --> 00:03:17.470
and not every device has
the same kind of input.

00:03:21.200 --> 00:03:23.120
Chromebooks are in growth.

00:03:23.120 --> 00:03:26.240
According to NPD, Chromebook
market share is growing.

00:03:26.240 --> 00:03:29.150
It reached 26%
based on unit sales

00:03:29.150 --> 00:03:32.480
in the US as of November 2018.

00:03:32.480 --> 00:03:35.130
And year on year
market share grew 34%.

00:03:35.130 --> 00:03:38.150
So from our perspective-- and
we hope from your perspective

00:03:38.150 --> 00:03:39.410
too--

00:03:39.410 --> 00:03:42.920
Chromebooks are a
market that we think

00:03:42.920 --> 00:03:44.870
are worth keeping
an eye on, have

00:03:44.870 --> 00:03:48.030
grown a ton in the last
four to five years,

00:03:48.030 --> 00:03:51.300
and we expect that to continue.

00:03:51.300 --> 00:03:52.017
Second, tablets.

00:03:52.017 --> 00:03:54.600
So tablets have been around on
Android for a really long time,

00:03:54.600 --> 00:03:55.890
since Honeycomb.

00:03:55.890 --> 00:03:58.080
And today there's a really
wide variety of devices,

00:03:58.080 --> 00:04:01.350
from units that run on Chrome
OS like the Pixel Slate

00:04:01.350 --> 00:04:06.240
with a 12 inch screen, premium
devices like the Galaxy Tab S4,

00:04:06.240 --> 00:04:09.330
all the way to more affordable
units like the Tab E Lite

00:04:09.330 --> 00:04:10.350
7 inch.

00:04:10.350 --> 00:04:12.480
Variety of screen sizes.

00:04:12.480 --> 00:04:13.530
Variety of cost points.

00:04:16.290 --> 00:04:21.240
And Android tablets
we think are key.

00:04:21.240 --> 00:04:26.040
So 19% of all
active mobile gamers

00:04:26.040 --> 00:04:27.780
play on an Android tablet.

00:04:27.780 --> 00:04:30.180
And that includes across
all platforms, both Android

00:04:30.180 --> 00:04:31.200
and iOS.

00:04:31.200 --> 00:04:32.910
So if you're shipping
a game on mobile,

00:04:32.910 --> 00:04:35.550
this is a sizable chunk
of the people who play it.

00:04:38.720 --> 00:04:41.070
Third, desktop extension.

00:04:41.070 --> 00:04:44.600
So an increasing number of
phones, like many Samsung

00:04:44.600 --> 00:04:46.910
flagships since
the S8, allow you

00:04:46.910 --> 00:04:49.490
to connect a mouse,
keyboard, and screen,

00:04:49.490 --> 00:04:52.408
and extend onto a larger screen.

00:04:52.408 --> 00:04:54.200
Usually there's no
touchscreen since you're

00:04:54.200 --> 00:04:55.730
on an external display.

00:04:55.730 --> 00:04:58.460
And just like Chrome OS, there
exists a multi-window system.

00:04:58.460 --> 00:05:03.880
So that app or game, the
window can be resized.

00:05:03.880 --> 00:05:06.370
And then finally foldables.

00:05:06.370 --> 00:05:09.520
So foldables are coming
to the market soon.

00:05:09.520 --> 00:05:13.180
All sorts of interesting
features, like dual display.

00:05:13.180 --> 00:05:14.680
And we'll have the
Samsung team talk

00:05:14.680 --> 00:05:18.010
about that in more detail in
context of the Galaxy Fold

00:05:18.010 --> 00:05:20.250
shortly.

00:05:20.250 --> 00:05:23.492
So that's a little bit about
the space and some of the why.

00:05:23.492 --> 00:05:25.200
And to talk to you a
little bit about the

00:05:25.200 --> 00:05:27.690
how, I'm going to hand
over my colleague, Ben.

00:05:32.570 --> 00:05:34.750
BEN GABLE: Hey, everyone.

00:05:34.750 --> 00:05:36.030
My name is Ben Gable.

00:05:36.030 --> 00:05:38.350
I'm a Partner Developer
Advocate at Google

00:05:38.350 --> 00:05:41.730
and ex-game developer.

00:05:41.730 --> 00:05:44.152
And I'm here to talk
about, as Shahid said,

00:05:44.152 --> 00:05:45.610
some of the common
technical issues

00:05:45.610 --> 00:05:48.640
that you need to consider
when bringing your game

00:05:48.640 --> 00:05:51.690
and adapting it for these
larger screen devices

00:05:51.690 --> 00:05:55.260
So maybe just start
off and show of hands.

00:05:55.260 --> 00:05:59.580
How many of you have
actually consciously adapted

00:05:59.580 --> 00:06:03.240
your game for larger screen
devices by adding input--

00:06:03.240 --> 00:06:05.460
extra input like
keyboard mouse--

00:06:05.460 --> 00:06:08.920
or you're handling multiple
aspect ratios or resolutions?

00:06:08.920 --> 00:06:09.420
Anybody?

00:06:09.420 --> 00:06:11.400
Has anybody done that
with their mobile game?

00:06:11.400 --> 00:06:12.810
I see, like, a couple hands.

00:06:12.810 --> 00:06:15.185
How many of you are planning
to do that maybe with a game

00:06:15.185 --> 00:06:18.370
that you're launching soon
or sometime this year?

00:06:18.370 --> 00:06:19.230
Anybody else?

00:06:19.230 --> 00:06:20.850
A couple more hands, OK.

00:06:20.850 --> 00:06:24.060
So hopefully after this
presentation, a lot more of you

00:06:24.060 --> 00:06:26.380
will consider it.

00:06:26.380 --> 00:06:28.030
So why is this important, right?

00:06:28.030 --> 00:06:29.350
There's all these different
devices out there.

00:06:29.350 --> 00:06:31.725
And as Shahid said, your game
is probably already running

00:06:31.725 --> 00:06:34.380
on these larger screen devices.

00:06:34.380 --> 00:06:38.520
And it's important because,
as game developers,

00:06:38.520 --> 00:06:40.850
you obviously want to provide
the best possible gaming

00:06:40.850 --> 00:06:42.790
experience for your players.

00:06:42.790 --> 00:06:45.960
And so you really need to
consider what kinds of devices

00:06:45.960 --> 00:06:48.090
that your players
are playing on.

00:06:48.090 --> 00:06:49.860
It could be a phone
in portrait mode.

00:06:49.860 --> 00:06:51.720
It could be a
Chromebook or Samsung

00:06:51.720 --> 00:06:54.960
DeX with keyboard and mouse
attached, or soon, foldables

00:06:54.960 --> 00:06:57.600
with multiple displays,
configurations,

00:06:57.600 --> 00:06:59.070
and aspect ratios.

00:06:59.070 --> 00:07:00.862
And you know you
want your players,

00:07:00.862 --> 00:07:02.820
if they're downloading
on one of these devices,

00:07:02.820 --> 00:07:04.860
to have a great experience.

00:07:04.860 --> 00:07:07.170
And, you know, it
can really allow

00:07:07.170 --> 00:07:12.810
you to expand the fun factor
of your game on these devices.

00:07:12.810 --> 00:07:15.240
Now I realize that this
sounds like a lot of work.

00:07:15.240 --> 00:07:17.000
And for a lot of
game developers,

00:07:17.000 --> 00:07:19.860
the words "new platform"
or supporting something

00:07:19.860 --> 00:07:22.790
that's not mobile is definitely
a challenge-- especially

00:07:22.790 --> 00:07:24.370
in the Android ecosystem.

00:07:24.370 --> 00:07:26.070
But the key thing
to remember here

00:07:26.070 --> 00:07:28.080
is that this is
all still Android

00:07:28.080 --> 00:07:30.300
and this is all the same APK.

00:07:30.300 --> 00:07:32.400
So it's not like you're
shipping a separate APK

00:07:32.400 --> 00:07:34.530
for these other devices
and one for mobile.

00:07:34.530 --> 00:07:37.020
They're all combined
within one APK.

00:07:37.020 --> 00:07:39.420
And there's certainly
things you can

00:07:39.420 --> 00:07:43.440
do to adapt that one APK
for things like foldables,

00:07:43.440 --> 00:07:46.920
or tablets, or Chromebooks, but
what I want to focus on here

00:07:46.920 --> 00:07:50.160
is kind of the best practices,
the stuff in the middle there.

00:07:50.160 --> 00:07:52.752
That will give you a great
baseline compatibility

00:07:52.752 --> 00:07:54.210
across all these
different devices.

00:07:57.385 --> 00:07:59.260
And it's really kind of
boiled down, I think,

00:07:59.260 --> 00:08:00.730
to three main areas.

00:08:00.730 --> 00:08:03.970
Screen considerations, input
considerations, and kind

00:08:03.970 --> 00:08:06.690
of building and
setting up your APK

00:08:06.690 --> 00:08:10.120
so that when it's distributed,
it works across the most

00:08:10.120 --> 00:08:12.520
devices possible.

00:08:12.520 --> 00:08:16.480
And for certain devices,
there's certain areas

00:08:16.480 --> 00:08:18.490
that maybe there's
more considerations you

00:08:18.490 --> 00:08:21.280
have to think of or deal with.

00:08:21.280 --> 00:08:23.380
But if you're going for
the largest compatibility

00:08:23.380 --> 00:08:26.410
across all these different
types of large screen devices,

00:08:26.410 --> 00:08:28.900
you're going to have to
kind of look at each area.

00:08:28.900 --> 00:08:32.517
So how do you handle
this with one APK?

00:08:32.517 --> 00:08:34.059
It's going to touch
into this, right?

00:08:34.059 --> 00:08:38.409
I mentioned it's the same
APK across all these devices.

00:08:38.409 --> 00:08:41.169
How would you handle this?

00:08:41.169 --> 00:08:44.140
So very high-level,
you handle this

00:08:44.140 --> 00:08:45.710
with configuration changes.

00:08:45.710 --> 00:08:49.120
So in Android, if you're not
familiar, anytime the system

00:08:49.120 --> 00:08:52.210
detects a device
configuration change,

00:08:52.210 --> 00:08:54.580
it's going to automatically
restart your activity

00:08:54.580 --> 00:08:58.540
and restart it with
new resources that

00:08:58.540 --> 00:09:01.000
allow your app to kind
of change and adapt

00:09:01.000 --> 00:09:03.110
for that new configuration.

00:09:03.110 --> 00:09:05.890
So the most important task
for you as game developers

00:09:05.890 --> 00:09:11.440
to kind of consider is handling
these configuration changes

00:09:11.440 --> 00:09:15.160
appropriately so that your game
will run seamlessly across,

00:09:15.160 --> 00:09:17.440
no matter what device
it's running on

00:09:17.440 --> 00:09:20.620
or what kind of things
happen during gameplay.

00:09:20.620 --> 00:09:23.907
By default Android system
will do this automatically.

00:09:23.907 --> 00:09:25.990
So a lot of you, if you're
not doing it right now,

00:09:25.990 --> 00:09:28.030
you're probably just
living with Android

00:09:28.030 --> 00:09:30.760
doing it automatically for you.

00:09:30.760 --> 00:09:32.860
It does this by invoking
OnSaveInstanceState

00:09:32.860 --> 00:09:34.780
before it will restart
your activity, which

00:09:34.780 --> 00:09:37.540
lets you save some
information that you

00:09:37.540 --> 00:09:39.890
need to restart your activity.

00:09:39.890 --> 00:09:42.070
But for a lot of
resource-heavy games,

00:09:42.070 --> 00:09:44.360
this is not ideal
because it would

00:09:44.360 --> 00:09:46.600
be really slow to
restart the activity

00:09:46.600 --> 00:09:49.540
and reallocate all
those resources.

00:09:49.540 --> 00:09:52.540
And in the case of dynamic
resizing on Chromebooks,

00:09:52.540 --> 00:09:53.150
it can happen.

00:09:53.150 --> 00:09:54.858
You can get a lot of
configuration change

00:09:54.858 --> 00:09:58.340
events, at least one per frame.

00:09:58.340 --> 00:10:00.745
So it's better to think about
and handle this yourself

00:10:00.745 --> 00:10:04.150
so you know exactly how your
game is going to behave anytime

00:10:04.150 --> 00:10:07.732
a configuration change happens.

00:10:07.732 --> 00:10:09.940
So now I've kind of touched
on the high-level aspects

00:10:09.940 --> 00:10:11.540
of configuration changes.

00:10:11.540 --> 00:10:13.560
Let's see how we'd
use them to adapt

00:10:13.560 --> 00:10:16.000
a game across these
devices, starting

00:10:16.000 --> 00:10:20.290
with the screen considerations
I mentioned earlier.

00:10:20.290 --> 00:10:23.260
So on devices like
Chromebooks and Samsung DeX,

00:10:23.260 --> 00:10:25.780
your game, by default,
is going to be launched

00:10:25.780 --> 00:10:28.160
into a windowed environment
where it can be dynamically

00:10:28.160 --> 00:10:31.120
resized, which is something
that a lot of mobile developers

00:10:31.120 --> 00:10:34.360
don't really consider.

00:10:34.360 --> 00:10:38.380
And on devices upcoming like
the Samsung Galaxy Fold,

00:10:38.380 --> 00:10:40.330
the screen and aspect
ratio will change

00:10:40.330 --> 00:10:43.690
whenever the user opens the
device from the smaller screen

00:10:43.690 --> 00:10:46.467
to the larger internal screen.

00:10:46.467 --> 00:10:48.550
So each of these cases is
going to fire off and on

00:10:48.550 --> 00:10:52.550
configuration changed event.

00:10:52.550 --> 00:10:54.860
So to handle this,
you simply need

00:10:54.860 --> 00:10:57.860
to declare in your manifest
all the configurations

00:10:57.860 --> 00:11:01.380
that you want to handle
yourself dynamically in code.

00:11:01.380 --> 00:11:03.140
So in this example,
we're declaring

00:11:03.140 --> 00:11:06.060
that we want to handle screen
size changes and orientation

00:11:06.060 --> 00:11:06.560
changes.

00:11:10.620 --> 00:11:12.900
So then in your code
now, your activity

00:11:12.900 --> 00:11:15.120
is going to invoke on
configuration change

00:11:15.120 --> 00:11:17.880
whenever the screen size
changes, or the orientation

00:11:17.880 --> 00:11:21.570
changes, or whatever other else
configuration that you declare

00:11:21.570 --> 00:11:23.500
that you want to handle.

00:11:23.500 --> 00:11:27.600
So for example, in this case you
could scale your OpenGL content

00:11:27.600 --> 00:11:32.550
to match the new aspect ratio
or resolution to prevent things

00:11:32.550 --> 00:11:36.630
like inaccessible UI elements or
change your input areas so they

00:11:36.630 --> 00:11:40.450
make sense on the new screen.

00:11:40.450 --> 00:11:45.460
So that's maybe how you'd handle
that case with the resizing.

00:11:45.460 --> 00:11:48.400
Now if your game is always
intended to run in fullscreen--

00:11:48.400 --> 00:11:52.270
which, for some
developers, that's enough--

00:11:52.270 --> 00:11:54.735
or maybe you test set
out on a Chromebook

00:11:54.735 --> 00:11:56.860
and you find it's crashing
or something else bad is

00:11:56.860 --> 00:12:01.030
happening, you can
always prevent your game

00:12:01.030 --> 00:12:02.830
from being resizable
by specifying

00:12:02.830 --> 00:12:06.460
realizable activity to be
false inside your manifest.

00:12:06.460 --> 00:12:10.150
You should also note that if
you do prevent this, however,

00:12:10.150 --> 00:12:13.250
split screen will not
work on mobile devices.

00:12:13.250 --> 00:12:16.600
And we recommend that
you, if at all possible,

00:12:16.600 --> 00:12:18.940
really try to support
the dynamic resizing.

00:12:18.940 --> 00:12:21.700
Because a lot of gamers
want to have the game

00:12:21.700 --> 00:12:23.830
running with maybe a
Twitch chat or something

00:12:23.830 --> 00:12:24.950
else up next to it.

00:12:24.950 --> 00:12:27.400
So we think it's a valid
user experience in some case,

00:12:27.400 --> 00:12:29.280
so try to support it if you can.

00:12:32.100 --> 00:12:37.050
So on the topic of
orientation, on mobile devices,

00:12:37.050 --> 00:12:39.810
usually the default
orientation is portrait.

00:12:39.810 --> 00:12:42.510
But on other devices,
it could be landscape.

00:12:42.510 --> 00:12:45.360
So you should specify in
your manifest the sensor

00:12:45.360 --> 00:12:49.890
orientations that you support
so that the system doesn't flip

00:12:49.890 --> 00:12:51.900
your game upside down
or something else crazy

00:12:51.900 --> 00:12:56.010
happens while people are
kind of moving the device.

00:12:56.010 --> 00:12:58.890
If you're dynamically
handling orientation changes

00:12:58.890 --> 00:13:02.430
inside your code, make sure
you use Display.getRotation

00:13:02.430 --> 00:13:04.530
and be aware that the
values that you're expecting

00:13:04.530 --> 00:13:09.161
might be swapped based on the
default hardware orientation.

00:13:11.742 --> 00:13:13.950
So another thing to consider
about larger screen size

00:13:13.950 --> 00:13:15.500
is obviously the
resolution, right?

00:13:15.500 --> 00:13:18.830
There's more pixels
and a bigger screen

00:13:18.830 --> 00:13:21.200
means you should probably
provide higher resolution

00:13:21.200 --> 00:13:22.970
assets.

00:13:22.970 --> 00:13:24.980
One of good tools around this--

00:13:24.980 --> 00:13:27.290
You can either handle this
yourself or you can consider

00:13:27.290 --> 00:13:29.900
using Android app bundles.

00:13:29.900 --> 00:13:32.750
What that will allow you to do
is to upload all of your assets

00:13:32.750 --> 00:13:35.480
for all the different
various screen densities,

00:13:35.480 --> 00:13:37.790
and then Google Play
will automatically

00:13:37.790 --> 00:13:41.060
ship whatever assets are
needed to the particular device

00:13:41.060 --> 00:13:42.680
that somebody is playing on.

00:13:42.680 --> 00:13:46.100
So for example if somebody
is playing on a tablet,

00:13:46.100 --> 00:13:49.952
it's going to emit kind of
the lower resolution assets

00:13:49.952 --> 00:13:51.660
or if they're playing
on a mobile device,

00:13:51.660 --> 00:13:54.755
maybe it will emit the ultra
high resolution assets.

00:13:54.755 --> 00:13:56.630
This really saves you
valuable download space

00:13:56.630 --> 00:14:01.760
because it does not go against
your download cap or the size

00:14:01.760 --> 00:14:02.973
limit on Google Play.

00:14:02.973 --> 00:14:04.640
And it also really
saves you the trouble

00:14:04.640 --> 00:14:07.477
of maintaining multiple
APKs for different devices.

00:14:07.477 --> 00:14:08.810
So I recommend you look into it.

00:14:12.150 --> 00:14:15.350
And again with more pixels
comes more flexibility

00:14:15.350 --> 00:14:16.920
with the UI in HUD.

00:14:16.920 --> 00:14:19.190
So if players are playing
on a larger screen,

00:14:19.190 --> 00:14:21.260
consider the things
you can add, expand,

00:14:21.260 --> 00:14:24.410
or change to suit that display.

00:14:24.410 --> 00:14:26.990
Also make sure that you
consider how readable

00:14:26.990 --> 00:14:30.690
and how big everything
is on a larger display.

00:14:30.690 --> 00:14:32.840
So for example, if
somebody is playing on a TV

00:14:32.840 --> 00:14:35.768
that they're sitting 6
to 10 feet away from,

00:14:35.768 --> 00:14:37.310
make sure all your
fonts are readable

00:14:37.310 --> 00:14:42.020
and that all the elements
of your UI are identifiable.

00:14:42.020 --> 00:14:44.330
Nothing's more frustrating
than trying to squint

00:14:44.330 --> 00:14:49.650
at a small text on a screen.

00:14:49.650 --> 00:14:51.690
So that some screen
considerations.

00:14:51.690 --> 00:14:52.830
Let's talk about input now.

00:14:52.830 --> 00:14:55.050
So more and more
games are delivering

00:14:55.050 --> 00:14:57.293
kind of a desktop or
console-like experience, right?

00:14:57.293 --> 00:14:58.710
You're seeing all
these games that

00:14:58.710 --> 00:15:00.918
are kind of blurring the
line between something you'd

00:15:00.918 --> 00:15:04.380
find on Steam or
traditionally, and now it's

00:15:04.380 --> 00:15:06.330
being played on a mobile device.

00:15:06.330 --> 00:15:09.420
And a lot of those games
are having-- you know,

00:15:09.420 --> 00:15:11.910
we're, as game developers,
kind of assuming

00:15:11.910 --> 00:15:16.140
that it's going to be played
with a touchscreen or touch

00:15:16.140 --> 00:15:17.483
interface.

00:15:17.483 --> 00:15:18.900
But you know the
players are going

00:15:18.900 --> 00:15:21.450
to be very disappointed
if they load up an FPS

00:15:21.450 --> 00:15:23.370
game on their
Chromebook or something

00:15:23.370 --> 00:15:26.970
with a keyboard and mouse
attached and it doesn't work.

00:15:26.970 --> 00:15:29.090
And, you know,
Android has had APIs

00:15:29.090 --> 00:15:32.880
to support keyboards, mouse,
and controllers for a while.

00:15:32.880 --> 00:15:34.410
But again, a lot
of game developers

00:15:34.410 --> 00:15:36.270
don't consider using
them because they just

00:15:36.270 --> 00:15:39.810
assume it's going to be
a touchscreen device.

00:15:39.810 --> 00:15:42.300
So the other thing
to keep in mind

00:15:42.300 --> 00:15:44.670
is that many of these
devices are convertibles.

00:15:44.670 --> 00:15:47.540
So they can switch
configurations on the fly.

00:15:47.540 --> 00:15:49.020
So a good example
is a Pixelbook,

00:15:49.020 --> 00:15:51.690
where it can be in
clamshell laptop mode,

00:15:51.690 --> 00:15:53.430
and then the player
can switch it

00:15:53.430 --> 00:15:56.370
to a tablet in the
middle of gameplay.

00:15:56.370 --> 00:16:00.540
So really try to anticipate
all the different ways

00:16:00.540 --> 00:16:02.820
that the configurations
could change

00:16:02.820 --> 00:16:06.215
during gameplay and support
kind of on the fly control

00:16:06.215 --> 00:16:06.840
scheme changes.

00:16:10.367 --> 00:16:12.950
And again, we come back to kind
of configuration changes right

00:16:12.950 --> 00:16:15.420
how do you detect this
and how do you handle it.

00:16:15.420 --> 00:16:20.510
So the best way is to specify
in your manifest configuration

00:16:20.510 --> 00:16:24.200
changes around input
devices such as keyboard

00:16:24.200 --> 00:16:28.460
and handle these on the fly
and switch the control schemes

00:16:28.460 --> 00:16:30.560
based on what configuration
change events you're

00:16:30.560 --> 00:16:33.670
getting inside of your code.

00:16:33.670 --> 00:16:36.980
So there's many ways
to do this, but one

00:16:36.980 --> 00:16:39.350
of the ways you can do it
is basic query InputManager

00:16:39.350 --> 00:16:42.410
at startup, for example, or
during a configuration change

00:16:42.410 --> 00:16:45.950
and kind of pull the system
to see what hardware input

00:16:45.950 --> 00:16:47.300
devices are available.

00:16:47.300 --> 00:16:49.130
And also make sure
they're usable, right?

00:16:49.130 --> 00:16:53.510
Because just because an input
device might be available,

00:16:53.510 --> 00:16:54.620
it might not be usable.

00:16:54.620 --> 00:16:57.500
Because it could be a
Chromebook, for example, where

00:16:57.500 --> 00:16:59.650
it's in tablet mode and
the keyboard is there

00:16:59.650 --> 00:17:03.290
but it's not usable because
it's on the back of the device.

00:17:03.290 --> 00:17:06.140
So it's really important
to consider this and adjust

00:17:06.140 --> 00:17:09.829
this on the fly and just adapt
to whatever is usable currently

00:17:09.829 --> 00:17:11.119
during gameplay.

00:17:11.119 --> 00:17:14.077
And Asphalt 9 here does
a great job of this.

00:17:14.077 --> 00:17:16.369
And Alex will be talking
about this a little bit later.

00:17:19.460 --> 00:17:22.000
And if you don't
think keyboard support

00:17:22.000 --> 00:17:23.942
makes sense for
game, fair enough.

00:17:23.942 --> 00:17:26.109
There's a lot of games out
there that work extremely

00:17:26.109 --> 00:17:28.450
well just touch but
you might consider

00:17:28.450 --> 00:17:32.050
that it improves accessibility
if you do add keyboard support.

00:17:32.050 --> 00:17:36.220
So things like skill key
bindings, player navigation,

00:17:36.220 --> 00:17:38.460
menu navigation, camera control.

00:17:38.460 --> 00:17:40.210
You know, there's lots
of different things

00:17:40.210 --> 00:17:42.310
you can do to just give
players a little bit

00:17:42.310 --> 00:17:45.520
of interesting shortcuts or
improves the way that they

00:17:45.520 --> 00:17:47.773
interact with your game.

00:17:47.773 --> 00:17:49.190
If you really
wanted to get fancy,

00:17:49.190 --> 00:17:51.460
you could also implement
custom key mappings

00:17:51.460 --> 00:17:53.380
and let players set up
exactly how they want

00:17:53.380 --> 00:17:54.547
to be able to play the game.

00:17:57.380 --> 00:18:00.880
Another thing you should
not forget about is mice.

00:18:00.880 --> 00:18:04.500
So use the Android APIs.

00:18:04.500 --> 00:18:06.450
We've got APIs
for mouse capture,

00:18:06.450 --> 00:18:08.270
where you can basically
capture the mouse

00:18:08.270 --> 00:18:10.562
in the center of the screen,
which works extremely well

00:18:10.562 --> 00:18:12.900
for third person-type
games or FPSs

00:18:12.900 --> 00:18:15.300
where you want the cursor
to be locked in the middle.

00:18:15.300 --> 00:18:17.750
You can request to
capture the mouse pointer.

00:18:17.750 --> 00:18:19.560
It'll disappear while
still sending you

00:18:19.560 --> 00:18:20.977
kind of the motion
events you need

00:18:20.977 --> 00:18:25.000
to move the camera
around or the player.

00:18:25.000 --> 00:18:26.730
So this is a key
thing that will really

00:18:26.730 --> 00:18:29.490
make those first person
shooter-type games

00:18:29.490 --> 00:18:32.850
or third person
controlled cameras really

00:18:32.850 --> 00:18:35.340
that much more
usable on Chromebooks

00:18:35.340 --> 00:18:38.460
because trying to do that
with a touchpad or touchscreen

00:18:38.460 --> 00:18:40.134
doesn't work so
well all the time.

00:18:42.980 --> 00:18:45.470
And if you haven't implemented
controller support,

00:18:45.470 --> 00:18:46.740
please consider that as well.

00:18:46.740 --> 00:18:52.760
A lot of people are using
controllers more widely

00:18:52.760 --> 00:18:56.240
across devices like
Chromebooks and Samsung DeX,

00:18:56.240 --> 00:18:58.880
and all the standard
Android controller APIs

00:18:58.880 --> 00:19:00.930
work across these devices.

00:19:00.930 --> 00:19:02.870
So it's another great
way to make sure

00:19:02.870 --> 00:19:05.870
that you're just providing
one more option for players

00:19:05.870 --> 00:19:06.800
to enjoy your game.

00:19:09.440 --> 00:19:12.110
So that's some screen
and input considerations.

00:19:12.110 --> 00:19:17.438
Now let's talk about how you
set up your APK in Build Time

00:19:17.438 --> 00:19:18.980
and configure it to
make sure that it

00:19:18.980 --> 00:19:24.630
supports all these various
devices running Android.

00:19:24.630 --> 00:19:27.390
So first off you need to review
your permissions and features

00:19:27.390 --> 00:19:29.400
that you're asking
for and determine

00:19:29.400 --> 00:19:31.135
if you really need them.

00:19:31.135 --> 00:19:32.760
There are some
permissions and features

00:19:32.760 --> 00:19:37.650
that are not supported
on certain devices

00:19:37.650 --> 00:19:41.438
like Chromebooks, so if
you blindly ask for them,

00:19:41.438 --> 00:19:43.230
you might get in a
situation where somebody

00:19:43.230 --> 00:19:45.480
tries to go download your
game on the Play Store

00:19:45.480 --> 00:19:48.060
and it says it's not
compatible with that device.

00:19:48.060 --> 00:19:50.500
And sometimes it's not
very clear to the users

00:19:50.500 --> 00:19:52.600
why it's not supported.

00:19:52.600 --> 00:19:55.350
So good examples of this
might be GPS, or SMS,

00:19:55.350 --> 00:19:56.790
or even rear-facing cameras.

00:19:56.790 --> 00:19:59.880
So what we recommend
is that you list

00:19:59.880 --> 00:20:02.560
them is not required
in your manifest

00:20:02.560 --> 00:20:05.670
and then, in code, just check to
see if you have that permission

00:20:05.670 --> 00:20:08.340
or if that hardware
feature is available

00:20:08.340 --> 00:20:11.850
and handle it gracefully in code
rather than just declaring it

00:20:11.850 --> 00:20:17.010
as required at download time

00:20:17.010 --> 00:20:20.200
Also consider the hardware
that you're running on.

00:20:20.200 --> 00:20:23.400
So a lot of these devices
have very different levels

00:20:23.400 --> 00:20:27.300
of performance And so if you
have an automatic quality

00:20:27.300 --> 00:20:29.700
control system, you
should try to test it

00:20:29.700 --> 00:20:34.170
on on lower-end hardware
and on more beefier hardware

00:20:34.170 --> 00:20:37.260
to see how it behaves and
make sure it's doing the thing

00:20:37.260 --> 00:20:39.120
that you expect.

00:20:39.120 --> 00:20:42.750
If you kind of support things
like different performance

00:20:42.750 --> 00:20:46.680
quality profiles, consider
adding some for beefier devices

00:20:46.680 --> 00:20:50.730
like Chromebooks
and just adapt them

00:20:50.730 --> 00:20:54.240
to optimize for the device
performance potential

00:20:54.240 --> 00:20:55.440
that it has.

00:20:55.440 --> 00:20:57.900
Because when players are
playing on a more expensive

00:20:57.900 --> 00:21:00.390
or device with a
larger screen, they

00:21:00.390 --> 00:21:02.790
might expect that it kind of
looks better as there's more

00:21:02.790 --> 00:21:05.380
fancy graphics features there.

00:21:05.380 --> 00:21:09.340
Additionally, try to provide
an x86 build if you can.

00:21:09.340 --> 00:21:12.630
I know a lot of developers
are only providing ARM.

00:21:12.630 --> 00:21:16.470
But consider that most
Chromebooks are x86 so

00:21:16.470 --> 00:21:20.190
providing x86 or
x86_64 builds is

00:21:20.190 --> 00:21:23.100
going to give you a
little bit of boost

00:21:23.100 --> 00:21:24.690
in performance on those devices.

00:21:24.690 --> 00:21:27.750
Because otherwise, you'll
have to have your ARM binary

00:21:27.750 --> 00:21:29.975
translated to run that system.

00:21:29.975 --> 00:21:32.270
So you'll incur a little
bit of an overhead

00:21:32.270 --> 00:21:34.327
when it automatically does that.

00:21:34.327 --> 00:21:36.660
And for those of you looking
to get the maximum graphics

00:21:36.660 --> 00:21:40.590
performance, a lot of these
devices now support Vulkan 1.0.

00:21:40.590 --> 00:21:42.490
1.1 coming soon.

00:21:42.490 --> 00:21:47.065
So please look into that
because usually it'll

00:21:47.065 --> 00:21:49.440
give you a bigger boost in
speed when running, especially

00:21:49.440 --> 00:21:50.315
these larger screens.

00:21:53.120 --> 00:21:57.110
And finally, test across
all these devices.

00:21:57.110 --> 00:21:58.700
So add test cases
that cover things

00:21:58.700 --> 00:22:03.200
like minimizing, maximizing,
resizing, switching

00:22:03.200 --> 00:22:05.660
between the smaller
and larger screens.

00:22:05.660 --> 00:22:08.090
You really want to
see how your game is

00:22:08.090 --> 00:22:11.570
going to behave across all
these different configuration

00:22:11.570 --> 00:22:12.410
changes.

00:22:12.410 --> 00:22:14.180
Not only that, but
maybe there's something

00:22:14.180 --> 00:22:16.970
you're doing with
Unreal or Unity,

00:22:16.970 --> 00:22:19.072
or your custom engine
that, you know,

00:22:19.072 --> 00:22:20.780
something bad might
happen at that level.

00:22:20.780 --> 00:22:24.080
So you want to make sure you're
testing to see if there's

00:22:24.080 --> 00:22:26.720
any potential problems.

00:22:26.720 --> 00:22:29.450
I know that QA
resources can be tight

00:22:29.450 --> 00:22:31.820
and game developers are
always trying to push content

00:22:31.820 --> 00:22:33.530
as fast as possible--

00:22:33.530 --> 00:22:34.400
quality content.

00:22:34.400 --> 00:22:38.875
So please try to use things
like Android Studio, Android

00:22:38.875 --> 00:22:40.250
and Chrome
[INAUDIBLE] simulators

00:22:40.250 --> 00:22:43.310
to get a good sense of
how your game might behave

00:22:43.310 --> 00:22:45.080
in a short amount
of time, or you

00:22:45.080 --> 00:22:47.330
could consider looking at
something like Firebase Test

00:22:47.330 --> 00:22:49.730
Lab, where you can automate
the testing process

00:22:49.730 --> 00:22:53.400
and get reports based on
devices in the cloud there.

00:22:53.400 --> 00:22:55.970
So it's really important
to test and make sure

00:22:55.970 --> 00:22:57.800
that your game is
doing what you think

00:22:57.800 --> 00:23:00.410
or what you expect it is across
all these different device

00:23:00.410 --> 00:23:04.200
configurations.

00:23:04.200 --> 00:23:05.980
So now that I've
covered the basics,

00:23:05.980 --> 00:23:08.490
I'm really excited to welcome
our friends, Ash and Nawoong

00:23:08.490 --> 00:23:11.610
from Samsung, to come
up and talk a lot more

00:23:11.610 --> 00:23:13.380
about the Samsung Galaxy Fold.

00:23:17.830 --> 00:23:19.220
ASH SHARMA: Thanks, Ben.

00:23:19.220 --> 00:23:20.100
Hi, everyone.

00:23:20.100 --> 00:23:21.330
My name is Ash.

00:23:21.330 --> 00:23:24.320
I'm a Partner Support
Engineer at Samsung.

00:23:24.320 --> 00:23:26.810
I'm here with my
colleague, Nawoong,

00:23:26.810 --> 00:23:28.580
and today we are going
to talk about how

00:23:28.580 --> 00:23:32.780
you can make your game
work great on Galaxy Fold.

00:23:32.780 --> 00:23:35.390
We'll be talking about
some general specs

00:23:35.390 --> 00:23:38.240
and touch on a few concepts
like app continuity

00:23:38.240 --> 00:23:41.350
and multi-resume.

00:23:41.350 --> 00:23:45.220
As you know, we announced
Galaxy Fold on February 20th.

00:23:45.220 --> 00:23:47.230
It introduces a
completely new category

00:23:47.230 --> 00:23:51.520
that unlocks new capabilities
never seen before with Infinity

00:23:51.520 --> 00:23:53.440
Flex Display.

00:23:53.440 --> 00:23:55.660
We created Galaxy
Fold for those that

00:23:55.660 --> 00:23:59.230
want to experience what a
premium foldable device can do,

00:23:59.230 --> 00:24:02.910
beyond the limitation of
a traditional smartphone.

00:24:02.910 --> 00:24:06.520
Galaxy Fold is an a
category of its own.

00:24:06.520 --> 00:24:08.540
It delivers a new kind
of a mobile experience,

00:24:08.540 --> 00:24:11.700
allowing users to do
things they couldn't

00:24:11.700 --> 00:24:16.000
do with an ordinary smartphone.

00:24:16.000 --> 00:24:19.990
Galaxy Fold is a culmination
of eight years of research

00:24:19.990 --> 00:24:21.850
and innovation,
following the debut

00:24:21.850 --> 00:24:27.110
of Samsung's first flexible
display prototype in 2011.

00:24:27.110 --> 00:24:29.175
It will be available
starting April 26th.

00:24:33.080 --> 00:24:35.840
Here are some important
hardware specs.

00:24:35.840 --> 00:24:38.930
Galaxy Fold is loaded
with a 7 nanometer

00:24:38.930 --> 00:24:43.340
64-bit optical processor,
12 GB of dedicated

00:24:43.340 --> 00:24:47.030
RAM, over 4,300
milliampere battery,

00:24:47.030 --> 00:24:50.270
providing users with
unmatched gaming potential

00:24:50.270 --> 00:24:53.230
that can last for hours
on a single charge.

00:24:57.410 --> 00:25:01.530
Now when gaming with Galaxy
Fold, bigger is better.

00:25:01.530 --> 00:25:06.210
Games are up to 1.62 times
bigger in landscape and 2.4

00:25:06.210 --> 00:25:09.900
times bigger in portrait
than Galaxy S9+,

00:25:09.900 --> 00:25:13.140
providing gamers with the most
immersive gaming experience

00:25:13.140 --> 00:25:15.520
anywhere.

00:25:15.520 --> 00:25:17.950
Seamless app experience.

00:25:17.950 --> 00:25:22.710
Player can receive a text invite
to join a multiplayer game

00:25:22.710 --> 00:25:25.830
and unfold the response
right into the action.

00:25:30.200 --> 00:25:32.840
Multi-active window experience.

00:25:32.840 --> 00:25:36.050
Galaxy Fold offers
gamers the ultimate setup

00:25:36.050 --> 00:25:37.550
to play your
favorite multiplayer

00:25:37.550 --> 00:25:42.560
game while streaming on YouTube
and learning about excelling

00:25:42.560 --> 00:25:46.993
how to-- one second.

00:25:46.993 --> 00:25:47.493
OK.

00:25:51.200 --> 00:25:52.582
Give me one second.

00:25:57.740 --> 00:25:59.250
OK, thank you.

00:25:59.250 --> 00:26:03.130
OK so multi-active
window experience.

00:26:03.130 --> 00:26:06.200
Galaxy Fold offers gamers
the ultimate setup.

00:26:06.200 --> 00:26:08.920
Play your favorite multiplayer
game while streaming

00:26:08.920 --> 00:26:11.850
on Twitch and
YouTube, playing games

00:26:11.850 --> 00:26:15.050
tips for you to master
your competition.

00:26:15.050 --> 00:26:17.060
Performance.

00:26:17.060 --> 00:26:19.460
Galaxy Folds keep up
with the heaviest gaming

00:26:19.460 --> 00:26:23.780
with it's over 4,300 milliampere
battery, carbon water cooling

00:26:23.780 --> 00:26:28.870
system, so you can game
stronger and longer.

00:26:28.870 --> 00:26:31.640
Now on top of things that
Google already covered,

00:26:31.640 --> 00:26:33.860
here are four things
to keep in mind

00:26:33.860 --> 00:26:36.940
while designing your
apps for Galaxy Fold

00:26:36.940 --> 00:26:39.980
or optimizing your existing app.

00:26:39.980 --> 00:26:44.200
Number one, unique aspect
ratio for Galaxy Fold.

00:26:44.200 --> 00:26:46.940
Two, display cut out.

00:26:46.940 --> 00:26:50.130
Three, app continuity.

00:26:50.130 --> 00:26:53.730
Four, free app multi-resume.

00:26:53.730 --> 00:26:55.480
We are going to cover
these in detail now.

00:26:58.810 --> 00:27:00.940
Supporting fullscreen
mode is critical to ensure

00:27:00.940 --> 00:27:03.553
that users get the best
immersive experience.

00:27:03.553 --> 00:27:05.470
In your app, take full
advantage of the bigger

00:27:05.470 --> 00:27:07.582
display with no black bars.

00:27:07.582 --> 00:27:09.040
Let's see how you
can achieve this.

00:27:12.950 --> 00:27:15.500
When folded, Galaxy Fold
will have a longer aspect

00:27:15.500 --> 00:27:18.110
ratio of 21:9.

00:27:18.110 --> 00:27:22.080
For supporting fullscreen,
you will have three options.

00:27:22.080 --> 00:27:26.540
One, if your app target SDK
is greater or equal to 26,

00:27:26.540 --> 00:27:29.450
then it will run
in fullscreen mode.

00:27:29.450 --> 00:27:31.630
But if that's not
an option for you,

00:27:31.630 --> 00:27:34.990
then set resizable
activity as true.

00:27:34.990 --> 00:27:38.370
This will also enable
multi-window mode for your app.

00:27:38.370 --> 00:27:43.100
In our upcoming slide, we will
be covering this in detail.

00:27:43.100 --> 00:27:45.380
Resizable activity
as true or false

00:27:45.380 --> 00:27:49.550
could be set in activity
or application tag

00:27:49.550 --> 00:27:51.970
in your manifest file.

00:27:51.970 --> 00:27:53.990
Now if this, too,
is not an option,

00:27:53.990 --> 00:28:00.620
then the last resort is to add
maximum aspect ratio of 2.4,

00:28:00.620 --> 00:28:05.170
as the cover screen
aspect ratio is 21:9.

00:28:05.170 --> 00:28:07.955
This metadata needs to sit
under an application tag

00:28:07.955 --> 00:28:09.580
and will allow your
application to take

00:28:09.580 --> 00:28:11.192
full advantage of fullscreen.

00:28:14.030 --> 00:28:17.360
Next is the display cutout.

00:28:17.360 --> 00:28:20.270
Galaxy Fold has a display
cutout when unfolded,

00:28:20.270 --> 00:28:22.440
in the top left corner.

00:28:22.440 --> 00:28:25.710
Make sure your app is
properly handling the cutout

00:28:25.710 --> 00:28:28.352
and no necessary
information is obstructed

00:28:28.352 --> 00:28:29.310
because of that cutout.

00:28:32.430 --> 00:28:36.310
In the highlighted
portion in this image,

00:28:36.310 --> 00:28:37.860
you can see the cutout.

00:28:37.860 --> 00:28:42.480
The good news is that there
are standard Android APIs

00:28:42.480 --> 00:28:44.040
and that can be
used to make sure

00:28:44.040 --> 00:28:47.240
that your app is optimized to
properly handle these screen

00:28:47.240 --> 00:28:48.450
cutouts.

00:28:48.450 --> 00:28:50.700
Later in our slides, we
will share the resources

00:28:50.700 --> 00:28:53.337
and important links that
you can follow to access

00:28:53.337 --> 00:28:54.420
the relevant Android APIs.

00:28:57.310 --> 00:29:00.320
Now to go through the
details, depending

00:29:00.320 --> 00:29:04.010
on the fact whether your
app renders in cutout area,

00:29:04.010 --> 00:29:07.610
your app can use
getDisplayCutout API

00:29:07.610 --> 00:29:10.580
to retrieve display
cutout objects.

00:29:10.580 --> 00:29:13.880
These APIs let you check
whether your content overlaps

00:29:13.880 --> 00:29:17.900
in the cutout so you can
reposition if needed.

00:29:17.900 --> 00:29:20.220
You can set layout
in display out mode

00:29:20.220 --> 00:29:22.700
to one of the following values.

00:29:22.700 --> 00:29:24.380
MODE_DEFAULT.

00:29:24.380 --> 00:29:26.120
This is the default behavior.

00:29:26.120 --> 00:29:28.820
And this content renders
into the cutout area

00:29:28.820 --> 00:29:31.280
while in portrait
mode but content

00:29:31.280 --> 00:29:34.930
is letterbox while
in landscape mode.

00:29:34.930 --> 00:29:37.150
MODE_SHORT_EDGES.

00:29:37.150 --> 00:29:40.900
Content renders into the
cutout area in both portrait

00:29:40.900 --> 00:29:42.700
and landscape mode.

00:29:42.700 --> 00:29:43.720
MODE_NEVER.

00:29:43.720 --> 00:29:46.060
Content never renders
in the cutout area.

00:29:49.570 --> 00:29:52.170
Here's the code
snippet showing how

00:29:52.170 --> 00:29:56.350
to implement short edges
in a style.xml file.

00:29:56.350 --> 00:29:59.370
In short edges, content
renders into the cutout area

00:29:59.370 --> 00:30:01.320
in both portrait
and landscape mode.

00:30:06.330 --> 00:30:07.310
All right.

00:30:07.310 --> 00:30:10.400
Now I'm going to invite my
colleague, Nahwoong, to talk

00:30:10.400 --> 00:30:13.240
in detail about app
continuity and multi-resume.

00:30:13.240 --> 00:30:13.740
Thank you.

00:30:17.303 --> 00:30:17.970
NAWOONG HAN: OK.

00:30:17.970 --> 00:30:19.360
Hello, everyone.

00:30:19.360 --> 00:30:23.040
My name is Nahwoong and I
developed Samsung's Android

00:30:23.040 --> 00:30:24.540
framework.

00:30:24.540 --> 00:30:29.760
I'm going to explain some
important things for you

00:30:29.760 --> 00:30:33.640
to keep in mind about
foldable devices.

00:30:33.640 --> 00:30:37.230
First have continuity.

00:30:37.230 --> 00:30:40.240
With the foldable
devices, now developers

00:30:40.240 --> 00:30:43.960
will be able to control
multiple displays

00:30:43.960 --> 00:30:46.050
on a single mobile device.

00:30:46.050 --> 00:30:51.340
Users will have a more enriched
mobile experience going back

00:30:51.340 --> 00:30:54.480
and forth between displays.

00:30:54.480 --> 00:30:59.650
Here Google Maps demonstrates
our app continuity.

00:30:59.650 --> 00:31:05.470
The user experience is
unfolded from the cover display

00:31:05.470 --> 00:31:08.630
to the immersive
or main display.

00:31:08.630 --> 00:31:15.050
That the map information will
be laid out in a bigger display.

00:31:15.050 --> 00:31:19.310
Also information which you
are looking for at the cover

00:31:19.310 --> 00:31:24.340
display will be
seamlessly transitioned

00:31:24.340 --> 00:31:26.470
to the main display.

00:31:26.470 --> 00:31:30.460
But to ensure this
wonderful experience,

00:31:30.460 --> 00:31:34.190
your apps must be
prepared accordingly.

00:31:37.870 --> 00:31:40.750
These are the
requirements that need

00:31:40.750 --> 00:31:45.530
to be met to ensure the
desired app continuity.

00:31:45.530 --> 00:31:51.710
First apps need to be able to
handle two physical screens.

00:31:51.710 --> 00:31:58.070
Second apps need to properly
handle folding and unfolding.

00:31:58.070 --> 00:32:01.580
It means handling with
the screen size changing.

00:32:01.580 --> 00:32:05.210
Last because of
physical screen size

00:32:05.210 --> 00:32:08.990
changing, we strongly
recommend apps to be resize.

00:32:11.805 --> 00:32:17.860
As you already know, the Galaxy
Fold is a foldable device.

00:32:17.860 --> 00:32:20.010
What does this mean?

00:32:20.010 --> 00:32:26.360
Foldable device can
physically fold its display

00:32:26.360 --> 00:32:29.830
changing its screen
size accordingly.

00:32:29.830 --> 00:32:34.920
This is why Galaxy Fold has
two different screen properties

00:32:34.920 --> 00:32:37.700
for the two different screens.

00:32:37.700 --> 00:32:40.530
You can check more
detail on the screen.

00:32:43.770 --> 00:32:47.780
How can you handle these
two different screen sizes?

00:32:47.780 --> 00:32:50.510
This is no different
from other methods

00:32:50.510 --> 00:32:55.490
of supporting different
screen sizes on Android

00:32:55.490 --> 00:33:01.190
because the Galaxy Fold is a
member of the Android family.

00:33:01.190 --> 00:33:04.730
The only difference is
that it will be happening

00:33:04.730 --> 00:33:06.980
much more at Galaxy Fold.

00:33:09.760 --> 00:33:15.230
Once both the screen sizes
have been properly handed,

00:33:15.230 --> 00:33:20.490
the app needs to react
to folding and unfolding.

00:33:20.490 --> 00:33:23.590
For the Galaxy Fold,
developers do not

00:33:23.590 --> 00:33:29.305
need to handle any
special APIs, nor events

00:33:29.305 --> 00:33:32.530
for folding and unfolding.

00:33:32.530 --> 00:33:37.780
Galaxy Fold follows conventional
Android platform behavior

00:33:37.780 --> 00:33:40.560
for screen size changing.

00:33:40.560 --> 00:33:43.860
Due to the screen size
changing, the configuration

00:33:43.860 --> 00:33:46.590
will be changed
to the following.

00:33:46.590 --> 00:33:52.500
ScreenSize, smallestScreenSize,
and screenLayout.

00:33:52.500 --> 00:33:56.860
Again this is no different
from other methods

00:33:56.860 --> 00:33:59.950
of handling computer changing.

00:33:59.950 --> 00:34:02.200
As Ben already covered
with this topic,

00:34:02.200 --> 00:34:06.640
developers can save
and restore data

00:34:06.640 --> 00:34:10.350
or handle resizing with
changes to the computer.

00:34:12.925 --> 00:34:19.139
Three, to ensure this seamless
experience between displays,

00:34:19.139 --> 00:34:23.670
we strongly recommend
the app be resizable.

00:34:23.670 --> 00:34:31.050
Once again, this is because
two physical displays have

00:34:31.050 --> 00:34:34.370
two distinct screen properties.

00:34:34.370 --> 00:34:38.960
Once a resizable app property
handles the changed configures,

00:34:38.960 --> 00:34:44.090
the user will have an intuitive
and seamless transition

00:34:44.090 --> 00:34:48.750
between the cover and
the main displays.

00:34:48.750 --> 00:34:54.780
Foldable devices add a next,
new wave of mobile devices.

00:34:54.780 --> 00:34:59.040
More and more will be
released into the market

00:34:59.040 --> 00:35:02.250
in coming months and years.

00:35:02.250 --> 00:35:05.670
Be prepared for this
movement earlier

00:35:05.670 --> 00:35:09.870
and make your apps
easily resizable.

00:35:09.870 --> 00:35:14.120
Sooner is always better.

00:35:14.120 --> 00:35:17.980
Next point is multi-resume.

00:35:17.980 --> 00:35:22.600
Multi-resume means resuming
all top visible activities

00:35:22.600 --> 00:35:24.280
in multi-window.

00:35:24.280 --> 00:35:29.900
In Android Pie, if
app and OEM opt in,

00:35:29.900 --> 00:35:33.500
all top visible
activities are resumed.

00:35:33.500 --> 00:35:38.030
Multi-resume is expected to
become mandatory behavior

00:35:38.030 --> 00:35:40.870
in next version of Android.

00:35:40.870 --> 00:35:46.210
Of course Samsung opted in
this feature with our devices.

00:35:46.210 --> 00:35:51.150
All Samsung devices have Android
Pie, including Galaxy Fold,

00:35:51.150 --> 00:35:54.430
support multi-resume.

00:35:54.430 --> 00:35:58.930
Well applying multi-resume
is also super easy.

00:35:58.930 --> 00:36:04.020
Just add the metadata into
manifest file of yours,

00:36:04.020 --> 00:36:06.060
just like this.

00:36:06.060 --> 00:36:08.700
Then, your app is top-visible.

00:36:08.700 --> 00:36:12.160
With a multi-windows situation,
your activity will be resumed.

00:36:15.060 --> 00:36:21.060
App developers can now
test how their apps respond

00:36:21.060 --> 00:36:22.840
in a folding environment.

00:36:22.840 --> 00:36:27.690
This enables them to verify
that it's done correctly

00:36:27.690 --> 00:36:30.600
by using an emulation
[INAUDIBLE] that

00:36:30.600 --> 00:36:34.940
is provided for app
continuity and multi-resume.

00:36:34.940 --> 00:36:38.060
Please check more details
on our resources site.

00:36:41.270 --> 00:36:42.100
OK.

00:36:42.100 --> 00:36:48.510
So far we have explained several
configurations for Galaxy Fold.

00:36:48.510 --> 00:36:50.350
Please remember this.

00:36:50.350 --> 00:36:55.260
Galaxy Fold is also
an Android device.

00:36:55.260 --> 00:36:59.520
If you follow standard
Android principles

00:36:59.520 --> 00:37:02.730
for different devices
and form factors,

00:37:02.730 --> 00:37:07.450
there is no problem
with Galaxy Fold.

00:37:07.450 --> 00:37:11.740
This is why we collaborate
with Google on this project

00:37:11.740 --> 00:37:13.002
since the beginning.

00:37:16.170 --> 00:37:21.770
Here is their gaming
experience on Galaxy Fold.

00:37:21.770 --> 00:37:24.890
I took this video
from our partners

00:37:24.890 --> 00:37:28.830
at Gameloft who work very
closely with the Galaxy Fold.

00:37:28.830 --> 00:37:33.320
Now I'd like to welcome Alex,
a Senior Developer for Gameloft

00:37:33.320 --> 00:37:38.600
to share their experience
developing multi devices.

00:37:38.600 --> 00:37:40.448
Thank you and enjoy the video.

00:37:40.448 --> 00:37:43.934
[MUSIC PLAYING]

00:37:45.428 --> 00:37:48.912
[ENGINES REVVING]

00:37:49.412 --> 00:37:52.898
[MUSIC PLAYING]

00:37:54.448 --> 00:37:56.240
NAWOONG HAN: By the
way, I played the game.

00:38:00.930 --> 00:38:05.294
And did you recognize that
this place is San Fransisco?

00:38:09.246 --> 00:38:13.666
It's a little bit long before
you see the iconic Golden Gate

00:38:13.666 --> 00:38:14.250
Bridge.

00:38:14.250 --> 00:38:15.000
But you just wait.

00:38:15.000 --> 00:38:18.395
[MUSIC PLAYING]

00:38:30.620 --> 00:38:32.550
Did you see that?

00:38:32.550 --> 00:38:33.050
OK.

00:38:33.050 --> 00:38:35.110
Here is Alex.

00:38:35.110 --> 00:38:36.063
Thank you.

00:38:36.063 --> 00:38:37.480
ALEJANDRO URBANO:
I'm Alex Urbano.

00:38:37.480 --> 00:38:41.530
I'm a Graphics Engineer
at Gameloft Barcelona.

00:38:41.530 --> 00:38:46.810
And I'm going to talk
about some high-level ideas

00:38:46.810 --> 00:38:48.310
that we followed
to make the Asphalt

00:38:48.310 --> 00:38:51.260
9 a truly multi-device game.

00:38:51.260 --> 00:38:53.680
So first of all, you
probably already knew

00:38:53.680 --> 00:38:55.990
but Asphalt 9 is
an arcade racing

00:38:55.990 --> 00:38:59.410
game with a lot of cool,
expensive, real supercars

00:38:59.410 --> 00:39:03.800
racing at crazy speeds in
beautiful, real life locations.

00:39:03.800 --> 00:39:04.550
It's a great game.

00:39:04.550 --> 00:39:06.640
So you should play, please.

00:39:10.090 --> 00:39:13.930
So as a mobile center
studio, you usually

00:39:13.930 --> 00:39:15.910
think about these
things when building

00:39:15.910 --> 00:39:23.120
your game, which are basically
hardwired core constraints.

00:39:23.120 --> 00:39:26.510
But that's not true and
it shouldn't be like that.

00:39:26.510 --> 00:39:29.060
Because nowadays, you need
to support a wide variety

00:39:29.060 --> 00:39:32.540
of devices with many
different input methods

00:39:32.540 --> 00:39:36.730
and a huge range of
performance levels.

00:39:36.730 --> 00:39:38.020
And that's OK.

00:39:38.020 --> 00:39:39.610
You should get as
many devices as you

00:39:39.610 --> 00:39:42.880
can to reach as much
people as you can.

00:39:45.990 --> 00:39:51.330
So for us, it was really helpful
to develop for an unknown

00:39:51.330 --> 00:39:54.570
device with all the possible
options and variations

00:39:54.570 --> 00:39:58.110
and invest in a really good
platform [INAUDIBLE] software

00:39:58.110 --> 00:40:01.710
that allows the programmers
to work without platform

00:40:01.710 --> 00:40:03.150
specifics--

00:40:03.150 --> 00:40:05.217
some sort of simulator.

00:40:08.080 --> 00:40:12.760
So in the context
of user input, you

00:40:12.760 --> 00:40:14.740
need to know what
the user wants.

00:40:17.730 --> 00:40:22.590
So don't assume your input
method based on the device.

00:40:22.590 --> 00:40:25.260
Detect each input
device there and use

00:40:25.260 --> 00:40:27.698
the one that makes sense in
your game and the playing

00:40:27.698 --> 00:40:29.490
intentions-- and by
the playing intentions,

00:40:29.490 --> 00:40:30.960
I mean that, for
example, if they

00:40:30.960 --> 00:40:34.220
have a controller
connected to the device,

00:40:34.220 --> 00:40:35.970
it's because probably
they want to use it.

00:40:39.594 --> 00:40:42.170
And the specific
input device can

00:40:42.170 --> 00:40:46.730
be disconnected at any
time for whatever reason.

00:40:46.730 --> 00:40:48.920
You should be able to
adapt to that situation

00:40:48.920 --> 00:40:51.990
without interfering too
much in the gameplay.

00:40:51.990 --> 00:40:55.850
So for example, pausing the
game as soon as the device

00:40:55.850 --> 00:41:00.520
gets disconnected, and
then reconnect for me.

00:41:00.520 --> 00:41:02.260
And of course you
should always let

00:41:02.260 --> 00:41:05.430
the user choose between the
available input methods.

00:41:09.130 --> 00:41:13.990
But be careful with generic
UI control mechanics.

00:41:13.990 --> 00:41:18.310
Its device has its own
dynamics and some interactions

00:41:18.310 --> 00:41:20.900
may not make sense at
all in all of them.

00:41:25.010 --> 00:41:28.200
So moving onto UI.

00:41:28.200 --> 00:41:32.420
What we can say is
invest in your tools.

00:41:32.420 --> 00:41:36.290
In our case, we chose to
develop our own UI editor

00:41:36.290 --> 00:41:38.390
and it's called Gin.

00:41:38.390 --> 00:41:43.890
We name all our tools
after drinks for reasons.

00:41:43.890 --> 00:41:48.190
And this is used in all
Gameloft Barcelona projects

00:41:48.190 --> 00:41:50.520
and allows us to design,
implement, and test

00:41:50.520 --> 00:41:54.310
all the UI-related
assets in the game.

00:41:54.310 --> 00:41:57.210
So now I'm going to briefly go
through some of its features

00:41:57.210 --> 00:41:59.770
so you can see how
we work with it.

00:42:02.360 --> 00:42:05.180
Gin has an integrated
source image management

00:42:05.180 --> 00:42:08.000
tool that allows the artists
and designers to import

00:42:08.000 --> 00:42:09.740
high quality, high
resolution images

00:42:09.740 --> 00:42:12.320
in the most popular formats.

00:42:12.320 --> 00:42:14.950
So we impose minimal
restrictions here

00:42:14.950 --> 00:42:16.930
as they can apply some
optimizations later.

00:42:21.070 --> 00:42:24.000
So as a first
optimization step, we

00:42:24.000 --> 00:42:27.900
can group those images based
on the usage, the context

00:42:27.900 --> 00:42:31.220
inside the game or if they
are in some menu or something.

00:42:31.220 --> 00:42:34.500
On quality
requirements, this helps

00:42:34.500 --> 00:42:38.455
with loading memory
and quality management.

00:42:38.455 --> 00:42:40.080
And this is when the
user decides which

00:42:40.080 --> 00:42:42.150
compression profile to use.

00:42:42.150 --> 00:42:45.220
I'm going to go to that later.

00:42:45.220 --> 00:42:49.170
And if they want to create
any maps for the atlas.

00:42:49.170 --> 00:42:52.260
Those limits are
used in case you're

00:42:52.260 --> 00:42:54.130
using a low resolution device.

00:42:54.130 --> 00:42:56.130
And it helps with flickering
and pixel crawling.

00:43:00.070 --> 00:43:04.750
We can also animate every
element or widget using

00:43:04.750 --> 00:43:09.640
either GIF animations or events
for sounds and [? particles. ?]

00:43:09.640 --> 00:43:13.350
This is greatly of use
by designers and artists

00:43:13.350 --> 00:43:15.660
and are a very
important part of how

00:43:15.660 --> 00:43:18.096
we have some kind of animation.

00:43:21.290 --> 00:43:24.390
Also as a way to
improve productivity,

00:43:24.390 --> 00:43:26.460
there's a template system.

00:43:26.460 --> 00:43:28.730
This is used to create
the reusable layout

00:43:28.730 --> 00:43:32.220
configurations that can
be filled with content.

00:43:32.220 --> 00:43:33.990
This, of course,
saves a lot of time

00:43:33.990 --> 00:43:36.480
creating new similar
screens or menus

00:43:36.480 --> 00:43:39.450
and makes it easier to
keep a consistent look

00:43:39.450 --> 00:43:41.670
throughout the whole game.

00:43:45.590 --> 00:43:52.060
So as we mentioned before
in the previous parts,

00:43:52.060 --> 00:43:54.950
there are lots of different
devices you need to support.

00:43:54.950 --> 00:43:57.640
So one of the main challenges
when designing UI is

00:43:57.640 --> 00:44:02.717
how to handle the wide variety
of aspect ratios and pixel

00:44:02.717 --> 00:44:03.550
densities they have.

00:44:06.580 --> 00:44:10.330
In our case, for Gin, we
can offer all the menus

00:44:10.330 --> 00:44:12.253
in the specific
key aspect ratios

00:44:12.253 --> 00:44:13.420
directly in the [INAUDIBLE].

00:44:13.420 --> 00:44:16.912
And we can swap between
them at any time.

00:44:16.912 --> 00:44:18.370
We have the most
common [INAUDIBLE]

00:44:18.370 --> 00:44:20.950
devices we target
available [INAUDIBLE]..

00:44:25.853 --> 00:44:31.300
You should never put UI elements
in absolute positions or sizes.

00:44:31.300 --> 00:44:35.480
All our widget positioning is
done in ratios or percentages,

00:44:35.480 --> 00:44:39.610
either relative to the screen
or a container hierarchy.

00:44:39.610 --> 00:44:42.040
And the size is
translated into pixels

00:44:42.040 --> 00:44:45.790
later [? on in rendering ?]
using the device-reported DPI.

00:44:50.450 --> 00:44:54.410
But in extreme situations,
when there is no other choice,

00:44:54.410 --> 00:44:59.350
we admit defeat and allow
the use of letterboxes.

00:44:59.350 --> 00:45:03.200
But this is only done for the
content that really needs it.

00:45:03.200 --> 00:45:07.360
The [INAUDIBLE] of the game
is always correctly visible

00:45:07.360 --> 00:45:09.800
and it adapts to
any aspect ratio.

00:45:12.940 --> 00:45:17.500
So I'm no designer but
I asked our UX team

00:45:17.500 --> 00:45:20.590
for some general tips to
take into consideration

00:45:20.590 --> 00:45:23.921
when designing the UI that
you might find helpful.

00:45:27.220 --> 00:45:31.800
So sometimes the extreme
differences in input methods

00:45:31.800 --> 00:45:34.415
impact navigation's
flow and comfort.

00:45:34.415 --> 00:45:35.790
In those cases,
you will probably

00:45:35.790 --> 00:45:38.520
need to redesign
the layout to make

00:45:38.520 --> 00:45:41.040
it work with a specific
input device in mind.

00:45:43.970 --> 00:45:48.680
Localization can impose some
strong restrictions in design.

00:45:48.680 --> 00:45:50.270
There are significant
size differences

00:45:50.270 --> 00:45:52.460
depending on the language
used and you need

00:45:52.460 --> 00:45:55.855
to be able to test it quick.

00:45:55.855 --> 00:45:57.230
In some languages,
there are also

00:45:57.230 --> 00:46:00.360
characters that don't
match particular styles.

00:46:00.360 --> 00:46:04.130
For example, a common example
is numerals in some languages.

00:46:04.130 --> 00:46:05.835
So it's important to adapt them.

00:46:09.020 --> 00:46:10.530
And then this
probably belongs more

00:46:10.530 --> 00:46:13.210
to the investing in tools part.

00:46:13.210 --> 00:46:15.240
But allow your users
and programmers

00:46:15.240 --> 00:46:19.250
to forget about local
conventions like dates, units,

00:46:19.250 --> 00:46:21.090
or currencies.

00:46:21.090 --> 00:46:23.765
Make a way to do the
conversion internally

00:46:23.765 --> 00:46:25.890
to make it look good not
only at the language level

00:46:25.890 --> 00:46:28.420
but on different levels too.

00:46:28.420 --> 00:46:30.820
For example, in this
particular example,

00:46:30.820 --> 00:46:32.830
only the third option
allows the programmers

00:46:32.830 --> 00:46:36.120
to forget about formatting
and let them express clearly

00:46:36.120 --> 00:46:37.680
the type of data
they want to use.

00:46:41.010 --> 00:46:45.330
Regardless of the aspect
ratio, use natural scrolling

00:46:45.330 --> 00:46:46.800
whenever it's possible.

00:46:46.800 --> 00:46:51.350
Natural, meaning in the dominant
direction of the aspect ratio.

00:46:51.350 --> 00:46:53.180
Because, when
scrolling, you usually

00:46:53.180 --> 00:46:55.140
focus on the center of
what you are scrolling

00:46:55.140 --> 00:46:58.190
but previous and
next elements are

00:46:58.190 --> 00:47:01.910
part of the past and future
of what you are exploring.

00:47:01.910 --> 00:47:04.975
So those elements are
going to be easier

00:47:04.975 --> 00:47:07.370
to go back to
inputting information

00:47:07.370 --> 00:47:09.450
or anticipate the new one.

00:47:09.450 --> 00:47:11.532
If you see it, those
are [INAUDIBLE]..

00:47:15.300 --> 00:47:19.410
Static screens are boring
but don't be too intrusive.

00:47:19.410 --> 00:47:22.500
And you can use those animations
to guide the user's attention

00:47:22.500 --> 00:47:24.180
where needed.

00:47:24.180 --> 00:47:26.070
In our case, that
would be the store.

00:47:29.610 --> 00:47:34.120
And this is probably
my big part.

00:47:34.120 --> 00:47:37.060
Of course UIs need to be fast.

00:47:37.060 --> 00:47:39.070
There's few things as
frustrating as trying

00:47:39.070 --> 00:47:41.440
to interact with
an app to find out

00:47:41.440 --> 00:47:44.400
that it lags and doesn't do
what you wanted when you wanted.

00:47:46.990 --> 00:47:50.570
So be careful with
rendering performance.

00:47:50.570 --> 00:47:53.640
This is obvious but
UX can be very complex

00:47:53.640 --> 00:47:57.150
with lots of semi-transparent,
animated layers.

00:47:57.150 --> 00:47:59.150
Geometry is usually
not the problem.

00:47:59.150 --> 00:48:01.280
We are probably talking
about hundreds or thousands

00:48:01.280 --> 00:48:03.320
of polygons.

00:48:03.320 --> 00:48:07.876
But draw closer, especially
on portable devices.

00:48:07.876 --> 00:48:12.050
[INAUDIBLE]

00:48:12.050 --> 00:48:15.530
And of course, on
especially mobile,

00:48:15.530 --> 00:48:17.600
be careful with fillrate.

00:48:17.600 --> 00:48:21.410
Lots of big, transparent
objects can really, really

00:48:21.410 --> 00:48:22.790
hit performance.

00:48:22.790 --> 00:48:24.890
So use as many
opaque objects as you

00:48:24.890 --> 00:48:29.180
can because they can activate
some not obvious hardware

00:48:29.180 --> 00:48:30.430
optimizations.

00:48:34.840 --> 00:48:41.230
If the platform supports it
and it's widely available,

00:48:41.230 --> 00:48:43.360
use framebuffer_fetch
or equivalent

00:48:43.360 --> 00:48:47.770
on each API for efficient
programmable blending.

00:48:47.770 --> 00:48:51.010
You can also use it to implement
some popular Photoshop-like

00:48:51.010 --> 00:48:52.870
blending modes that
could be harder

00:48:52.870 --> 00:48:58.238
to achieve using normal hardware
for lending capabilities.

00:49:01.590 --> 00:49:07.770
And lastly image compression
is key for good performance.

00:49:07.770 --> 00:49:09.870
We're not listing
group of images

00:49:09.870 --> 00:49:12.760
based on the compression needs.

00:49:12.760 --> 00:49:17.320
In our case, we basically
have four different profiles,

00:49:17.320 --> 00:49:20.290
shown here in
increasing quality.

00:49:20.290 --> 00:49:24.220
And you probably notice that we
treat alpha separately and this

00:49:24.220 --> 00:49:28.632
because, in many situations when
using semi-transparent images,

00:49:28.632 --> 00:49:31.870
it is better to
preserve as much quality

00:49:31.870 --> 00:49:35.470
as you can on the edges.

00:49:35.470 --> 00:49:39.340
And then I'm going to give it
back to Ben so he can finish.

00:49:39.340 --> 00:49:39.840
Thank you.

00:49:43.720 --> 00:49:46.180
BEN GABLE: Thanks, Alex.

00:49:46.180 --> 00:49:49.960
So let's kind of sum up here
what we talked about today.

00:49:49.960 --> 00:49:55.750
So hopefully, listening
to all the speakers today,

00:49:55.750 --> 00:49:59.500
you guys have realized that
Android gaming is not just

00:49:59.500 --> 00:50:00.260
phones anymore.

00:50:00.260 --> 00:50:03.370
It's not just what you
think of traditionally

00:50:03.370 --> 00:50:05.320
as mobile devices.

00:50:05.320 --> 00:50:07.300
You know, players are
experiencing your game--

00:50:07.300 --> 00:50:08.980
probably right now--

00:50:08.980 --> 00:50:11.980
on a wide variety of devices,
and form factors, and screen

00:50:11.980 --> 00:50:13.000
sizes.

00:50:13.000 --> 00:50:16.930
And it might seem like
a lot of different stuff

00:50:16.930 --> 00:50:21.460
to consider, but again, the
key thing I want to stress--

00:50:21.460 --> 00:50:22.660
It's all just Android.

00:50:22.660 --> 00:50:25.390
And it's the best
practices for Android.

00:50:25.390 --> 00:50:28.510
And by spending just a little
bit of time considering

00:50:28.510 --> 00:50:32.140
these use cases, you
really can take your game

00:50:32.140 --> 00:50:34.600
beyond just the mobile
device, and adapt it

00:50:34.600 --> 00:50:39.070
for all these larger screens,
and provide that best possible

00:50:39.070 --> 00:50:41.860
gaming experience across
all these devices.

00:50:41.860 --> 00:50:44.830
And that's really important
because your players will thank

00:50:44.830 --> 00:50:47.530
you for it and they'll think
that this game is amazing

00:50:47.530 --> 00:50:49.720
when they boot it
up on a Chromebook

00:50:49.720 --> 00:50:52.060
or they boot it up on
a Samsung Galaxy Fold.

00:50:55.210 --> 00:50:58.600
You know, we're really
committed to making

00:50:58.600 --> 00:51:01.940
this process easier for game
developers moving forward.

00:51:01.940 --> 00:51:04.930
So we've got a number of things
that are kind of in-flight

00:51:04.930 --> 00:51:08.650
in coming to help support
you guys in supporting these

00:51:08.650 --> 00:51:13.210
devices, such as Crostini,
some developer tools on Linux

00:51:13.210 --> 00:51:17.320
on Chromebooks, additional
profiling tools,

00:51:17.320 --> 00:51:19.840
emulator improvements-- so you
guys can test a wide variety

00:51:19.840 --> 00:51:20.940
of cases--

00:51:20.940 --> 00:51:24.250
and further game
controller support

00:51:24.250 --> 00:51:27.570
for these different devices.

00:51:27.570 --> 00:51:29.720
So we've got a lot
of information.

00:51:29.720 --> 00:51:31.084
Please check out our links here.

00:51:31.084 --> 00:51:33.020
I'll let you guys
take a picture of it.

00:51:33.020 --> 00:51:35.410
But we've got one
for the Android site

00:51:35.410 --> 00:51:37.000
and then another
one specifically

00:51:37.000 --> 00:51:40.778
on supporting Samsung
Galaxy Fold and foldables

00:51:40.778 --> 00:51:41.320
from Samsung.

00:51:45.840 --> 00:51:48.940
And I want to say thank you
all very much for coming today.

00:51:48.940 --> 00:51:51.840
I hope it was informational.

00:51:51.840 --> 00:51:53.360
I hope you guys
learned something.

00:51:53.360 --> 00:51:55.530
I hope you kind of consider
these larger screen

00:51:55.530 --> 00:51:56.760
devices moving forward.

00:51:56.760 --> 00:51:59.100
I want to thank our friends
at Samsung and Gameloft

00:51:59.100 --> 00:52:01.185
for coming to speak as well.

00:52:01.185 --> 00:52:02.560
We're not going
to do Q&amp;A up here

00:52:02.560 --> 00:52:05.130
but if you have any questions,
please come up to the podium

00:52:05.130 --> 00:52:06.720
here and grab us
after the session.

00:52:06.720 --> 00:52:09.010
Happy to talk more about
anything you guys might want.

00:52:09.010 --> 00:52:10.290
So again, thanks very much.

00:52:10.290 --> 00:52:13.140
Please fill out the survey as
well for this month's session.

00:52:13.140 --> 00:52:16.450
Love to hear some feedback,
positive or negative.

00:52:16.450 --> 00:52:19.350
And I hope you guys have
a great rest of GDC.

00:52:19.350 --> 00:52:21.380
Thank you very much.

