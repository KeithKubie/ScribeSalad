WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.253
[MUSIC PLAYING]

00:00:07.049 --> 00:00:08.590
CHRIS BANES: We're
here today to talk

00:00:08.590 --> 00:00:11.050
about the cost of a pixel,
specifically the colors

00:00:11.050 --> 00:00:13.360
that you choose in your
apps and how that directly

00:00:13.360 --> 00:00:17.095
affects the battery users
of your user devices.

00:00:17.095 --> 00:00:18.700
So before we do that,
we need to think

00:00:18.700 --> 00:00:21.940
about the actual technology
that goes into user devices,

00:00:21.940 --> 00:00:24.112
and specifically the
display technologies.

00:00:24.112 --> 00:00:25.570
Now, there are two
prevailing kinds

00:00:25.570 --> 00:00:29.950
of technologies that are in
most devices, LCD and OLED.

00:00:29.950 --> 00:00:32.320
The majority devices, especially
on Android these days,

00:00:32.320 --> 00:00:34.780
tend to be OLED
devices, OLED screens,

00:00:34.780 --> 00:00:36.300
especially from
the mid mid-level

00:00:36.300 --> 00:00:38.260
to kind of high level.

00:00:38.260 --> 00:00:40.487
And even in sort of
like other platforms,

00:00:40.487 --> 00:00:42.070
they're slowly moving
to OLED as well.

00:00:45.000 --> 00:00:47.390
LCD stands for
Liquid-Crystal Display.

00:00:47.390 --> 00:00:50.040
And they work very
differently to an OLED.

00:00:50.040 --> 00:00:53.130
They work with what they
call liquid crystals.

00:00:53.130 --> 00:00:55.860
So each pixel is made up of
the number of color channels

00:00:55.860 --> 00:00:57.432
of liquid crystals.

00:00:57.432 --> 00:00:58.890
The important thing
to know here is

00:00:58.890 --> 00:01:00.570
that they require a backlight.

00:01:00.570 --> 00:01:03.280
So those liquid crystals
don't illuminate themselves.

00:01:03.280 --> 00:01:04.680
It requires a
backlight behind it

00:01:04.680 --> 00:01:05.980
to shine through the crystals.

00:01:05.980 --> 00:01:07.500
And that's how you see color.

00:01:07.500 --> 00:01:10.080
Now, most of the power
for an LCD display

00:01:10.080 --> 00:01:11.637
goes into that backlight.

00:01:11.637 --> 00:01:13.470
The actual crystals
don't require that much.

00:01:13.470 --> 00:01:14.760
It's the backlight.

00:01:14.760 --> 00:01:17.930
So more brightness
equals more power.

00:01:17.930 --> 00:01:19.160
OLED are different.

00:01:19.160 --> 00:01:21.710
OLED displays are
Light-Emitting Diodes,

00:01:21.710 --> 00:01:25.130
which as you guess actually
emit light themselves.

00:01:25.130 --> 00:01:27.230
So there's no need
for a backlight.

00:01:27.230 --> 00:01:28.740
Each pixel illuminates itself.

00:01:28.740 --> 00:01:31.460
And that's how the
light shines out.

00:01:31.460 --> 00:01:34.420
The good thing here is that
they allow sort of a true black.

00:01:34.420 --> 00:01:37.400
So with LCD, the way
you achieve black

00:01:37.400 --> 00:01:39.020
is by turning all
the crystals off,

00:01:39.020 --> 00:01:41.670
and then the backlight
still shines through.

00:01:41.670 --> 00:01:44.090
And so you never really get
that really dark true black.

00:01:44.090 --> 00:01:47.300
OLED is completely different in
the way the LEDs work is they

00:01:47.300 --> 00:01:48.630
just don't turn the pixel on.

00:01:48.630 --> 00:01:50.796
And that's how you get black.

00:01:50.796 --> 00:01:52.600
So that's where the power is.

00:01:52.600 --> 00:01:55.220
And the power is dominated by
actually emitting the light.

00:01:55.220 --> 00:01:58.576
So it's the LED shining
that actually is the power.

00:01:58.576 --> 00:01:59.450
There's no backlight.

00:01:59.450 --> 00:02:02.278
It's the actual LED itself.

00:02:02.278 --> 00:02:04.290
Now, there's a number
of kind of arrangements

00:02:04.290 --> 00:02:06.640
that displays can be made in.

00:02:06.640 --> 00:02:08.400
So if you think
about a pixel, you

00:02:08.400 --> 00:02:10.530
tend to have three
channels, R, G, and B.

00:02:10.530 --> 00:02:12.390
And that's the
simplest arrangement.

00:02:12.390 --> 00:02:15.210
Each pixel on your display
will have three channels.

00:02:15.210 --> 00:02:17.370
And that is true for
both LCD and OLED.

00:02:17.370 --> 00:02:19.830
They both can have
different arrangements.

00:02:19.830 --> 00:02:22.710
So that's the most
straightforward and mentally

00:02:22.710 --> 00:02:24.570
simple, like you have 1, 2, 3.

00:02:24.570 --> 00:02:27.720
But there's also more complex
ones, things like RGBR,

00:02:27.720 --> 00:02:28.950
where you'll have--

00:02:28.950 --> 00:02:31.080
all the channels will be
split across two pixels.

00:02:31.080 --> 00:02:33.330
And each pixel will
only have two channels.

00:02:33.330 --> 00:02:35.160
It's just a way of
kind of expanding

00:02:35.160 --> 00:02:38.834
pixel size without trying
to fit as many LEDs.

00:02:38.834 --> 00:02:40.780
Now, it's important
to think about,

00:02:40.780 --> 00:02:46.092
because in terms of power, more
LEDs equals more power usage.

00:02:46.092 --> 00:02:48.050
So we've done a lot of
stats over the past kind

00:02:48.050 --> 00:02:51.620
of year or two, because we
know that users care deeply

00:02:51.620 --> 00:02:52.820
about their battery life.

00:02:52.820 --> 00:02:55.940
And the display tends
to be the biggest power

00:02:55.940 --> 00:02:58.079
user of your device.

00:02:58.079 --> 00:03:00.120
So here you can see a very
straightforward chart,

00:03:00.120 --> 00:03:02.180
which is the fact that
the higher the brightness

00:03:02.180 --> 00:03:05.630
on your display, the
more power it uses.

00:03:05.630 --> 00:03:07.980
It's kind of simple anyway.

00:03:07.980 --> 00:03:10.577
Everyone assumes
this is the case.

00:03:10.577 --> 00:03:12.410
But the thing is it's
actually quite linear.

00:03:12.410 --> 00:03:15.930
So again, kind of simple.

00:03:15.930 --> 00:03:19.360
But then we started kind
of comparing OLED devices,

00:03:19.360 --> 00:03:21.350
OLED screens versus LCD screens.

00:03:21.350 --> 00:03:24.540
And in this case, it's the
Pixel versus the iPhone 7.

00:03:24.540 --> 00:03:26.330
We're displaying a
screenshot of Maps

00:03:26.330 --> 00:03:29.654
in both a normal day
mode and a night mode.

00:03:29.654 --> 00:03:31.070
The reason we used
a screenshot is

00:03:31.070 --> 00:03:34.670
because we didn't want the
differences between, say, iOS

00:03:34.670 --> 00:03:37.086
or Android to
conflict with power.

00:03:37.086 --> 00:03:38.960
Displaying a screenshot
is just a flat image.

00:03:38.960 --> 00:03:41.380
So they should be pretty
similar on both platforms.

00:03:41.380 --> 00:03:44.480
But you can see with the numbers
that the iPhone 7, on the LCD

00:03:44.480 --> 00:03:48.710
screen, the actual milliamperage
on both night and day

00:03:48.710 --> 00:03:49.350
is the same.

00:03:49.350 --> 00:03:50.225
It doesn't change.

00:03:50.225 --> 00:03:51.830
And that's because
it's an LCD screen.

00:03:51.830 --> 00:03:55.120
And it can't make use
of those dark pixels.

00:03:55.120 --> 00:03:57.020
Well, the power users anyway.

00:03:57.020 --> 00:04:00.260
But on the pixel itself,
because it's an OLED display,

00:04:00.260 --> 00:04:04.220
the actual power usage drops
down by 63%, which is huge.

00:04:04.220 --> 00:04:07.950
63% of the biggest power
user on your device

00:04:07.950 --> 00:04:11.379
just by using a dark theme.

00:04:11.379 --> 00:04:12.920
But even go more
into it, when you've

00:04:12.920 --> 00:04:15.310
got actual individual pixel
colors-- so we did a test

00:04:15.310 --> 00:04:20.079
where we just displayed
one color on the display.

00:04:20.079 --> 00:04:22.220
And the actual color itself
makes a big difference

00:04:22.220 --> 00:04:23.630
in power.

00:04:23.630 --> 00:04:27.010
So blue itself is 25% more--

00:04:27.010 --> 00:04:29.500
takes 25% more power
than, say, green or red.

00:04:32.257 --> 00:04:34.090
And then another chart,
which is pretty much

00:04:34.090 --> 00:04:37.900
a summary of the previous chart,
but it's a nice line format.

00:04:37.900 --> 00:04:40.769
But you can see that black
uses the least amount of power.

00:04:40.769 --> 00:04:42.060
You kind of assume that anyway.

00:04:42.060 --> 00:04:44.480
And it goes up and up
until we get white.

00:04:44.480 --> 00:04:48.160
And because white uses these
channels from every one--

00:04:48.160 --> 00:04:50.580
it's full red, full
green, full blue--

00:04:50.580 --> 00:04:52.467
it requires the most
amount of power.

00:04:52.467 --> 00:04:54.300
And guess which color
we've been pushing you

00:04:54.300 --> 00:04:55.883
towards over the
past couple of years?

00:04:55.883 --> 00:04:58.087
Material came about
three years ago.

00:04:58.087 --> 00:05:00.420
And we changed from Hollow,
which was a nice dark theme,

00:05:00.420 --> 00:05:01.849
to this white theme instead.

00:05:01.849 --> 00:05:03.390
We kind of shot
ourselves in the foot

00:05:03.390 --> 00:05:05.526
slightly in terms of power.

00:05:05.526 --> 00:05:07.350
So let's look at
some case studies

00:05:07.350 --> 00:05:09.770
of Google Apps over the past
couple of-- well, year or so,

00:05:09.770 --> 00:05:10.010
actually.

00:05:10.010 --> 00:05:11.720
We have started
implementing dark themes,

00:05:11.720 --> 00:05:14.706
and the power savings
they've managed to have.

00:05:14.706 --> 00:05:16.700
So the first one is YouTube.

00:05:16.700 --> 00:05:18.600
Here we have an example,
which you can't see

00:05:18.600 --> 00:05:21.010
the video playing, but it is.

00:05:21.010 --> 00:05:24.060
And you can see that
at full brightness,

00:05:24.060 --> 00:05:25.710
just by switching
to a dark theme,

00:05:25.710 --> 00:05:28.330
you save 43% of
your battery usage.

00:05:28.330 --> 00:05:30.330
Now, when you're playing
a video, the rest of it

00:05:30.330 --> 00:05:31.871
underneath isn't so
important anyway,

00:05:31.871 --> 00:05:34.650
so a dark theme really works.

00:05:34.650 --> 00:05:36.930
Now, when it's paused,
we save even more.

00:05:36.930 --> 00:05:38.520
It's 60%.

00:05:38.520 --> 00:05:41.940
My guess here is that because
the kind overlay of the video

00:05:41.940 --> 00:05:45.080
actually darkens
the video, we're

00:05:45.080 --> 00:05:46.410
using even more dark colors.

00:05:46.410 --> 00:05:48.810
So we save more power.

00:05:48.810 --> 00:05:51.690
Now, this test itself depends
very much on the video content.

00:05:51.690 --> 00:05:53.410
If you have a video
which is fully white,

00:05:53.410 --> 00:05:54.993
then you're not going
to save so much.

00:05:57.430 --> 00:06:00.080
And with Gboard, so Gboard is
actually a really good example,

00:06:00.080 --> 00:06:02.600
because this is something
users can control.

00:06:02.600 --> 00:06:04.710
You now, you can
switch to a dark theme.

00:06:04.710 --> 00:06:06.440
And you can save
20% of your battery.

00:06:06.440 --> 00:06:09.980
Well, not-- 20% of the
display use of the battery

00:06:09.980 --> 00:06:11.600
just by switching
to a dark theme.

00:06:11.600 --> 00:06:14.595
So it's actually
quite a big thing.

00:06:14.595 --> 00:06:15.680
And finally, our Maps.

00:06:15.680 --> 00:06:18.455
This is kind of the canonical
example of dark theme

00:06:18.455 --> 00:06:21.281
and where it really
is great, because it

00:06:21.281 --> 00:06:23.030
has obvious benefits
of the battery, which

00:06:23.030 --> 00:06:25.570
is 31% when it's
on full brightness,

00:06:25.570 --> 00:06:27.020
but it's also usable.

00:06:27.020 --> 00:06:30.200
You don't want Maps being
like a really white theme when

00:06:30.200 --> 00:06:32.616
you're driving at night and
glaring you in your eye.

00:06:32.616 --> 00:06:33.990
So a dark theme
here really makes

00:06:33.990 --> 00:06:38.190
the app more usable in
a nighttime setting.

00:06:38.190 --> 00:06:40.700
And now Alan is going
talk for implementation.

00:06:40.700 --> 00:06:41.783
ALAN VIVERETTE: All right.

00:06:41.783 --> 00:06:43.740
So how can we
embrace the dark side

00:06:43.740 --> 00:06:45.255
and implement dark
mode in our apps?

00:06:48.310 --> 00:06:51.880
Go into dark theme, which
will not save us any battery

00:06:51.880 --> 00:06:53.650
here, but it will
on your devices.

00:06:53.650 --> 00:06:56.650
So you may remember night
mode from the developer

00:06:56.650 --> 00:07:00.790
preview of Android last year,
or the year before that,

00:07:00.790 --> 00:07:05.700
or the year before that,
or the year before that.

00:07:05.700 --> 00:07:09.609
But we released DayNight
support in AppCompat,

00:07:09.609 --> 00:07:10.900
which was implemented by Chris.

00:07:10.900 --> 00:07:13.290
There's a great blog
article about it.

00:07:13.290 --> 00:07:16.570
Our recommended way to
implement dark mode in your app,

00:07:16.570 --> 00:07:18.670
and basically get it
for free, depending

00:07:18.670 --> 00:07:21.130
on how your themes are
architected, is DayNight.

00:07:21.130 --> 00:07:22.840
So if you're using
AppCompat, you

00:07:22.840 --> 00:07:24.790
can get this almost for free.

00:07:24.790 --> 00:07:26.770
The stock widgets will
respond automatically

00:07:26.770 --> 00:07:29.060
to changes in the
device's night mode.

00:07:29.060 --> 00:07:32.260
You can also manually toggle
between light and dark modes.

00:07:32.260 --> 00:07:35.400
So you can add a switch
in your app to do this.

00:07:35.400 --> 00:07:38.410
This is the demo from
the AndroidX checkouts.

00:07:38.410 --> 00:07:40.540
If you have AndroidX
checked out from AOSP,

00:07:40.540 --> 00:07:41.590
it takes five minutes.

00:07:41.590 --> 00:07:43.540
You can run the AppCompat
demo and take a look

00:07:43.540 --> 00:07:45.300
at how this is implemented.

00:07:45.300 --> 00:07:47.860
It's basically one
line of code to switch

00:07:47.860 --> 00:07:52.670
between whatever theme you're
using before and AppCompat.

00:07:52.670 --> 00:07:54.770
You simply take
whatever your app theme

00:07:54.770 --> 00:07:58.340
is and have it inherit from
one of the AppCompat.DayNight

00:07:58.340 --> 00:07:59.180
themes.

00:07:59.180 --> 00:08:01.700
And again, depending on how
your app is architected,

00:08:01.700 --> 00:08:03.380
everything might just work.

00:08:05.920 --> 00:08:11.180
You can also apply an overlay
theme dynamically at runtime.

00:08:11.180 --> 00:08:14.070
So if you want to have
a pure black OLED theme,

00:08:14.070 --> 00:08:17.560
there are some apps that already
do this, or a pink Hello Kitty

00:08:17.560 --> 00:08:19.120
theme, or what have you.

00:08:19.120 --> 00:08:21.910
You can apply a theme
dynamically at runtime

00:08:21.910 --> 00:08:25.300
by just calling
getTheme.applyStyle,

00:08:25.300 --> 00:08:26.650
and applying an overlay theme.

00:08:26.650 --> 00:08:28.720
If you want to learn more
about overlay themes,

00:08:28.720 --> 00:08:31.550
Chris and I talked about those
at I/O a couple of years ago.

00:08:31.550 --> 00:08:34.960
So what that looks like is just
overriding Activity.setTheme.

00:08:34.960 --> 00:08:38.860
This ensures that any time a
theme is set on your activity,

00:08:38.860 --> 00:08:40.780
you will then
immediately overlay it

00:08:40.780 --> 00:08:45.550
with the black theme, or a Hello
Kitty theme, or what have you.

00:08:45.550 --> 00:08:47.290
And then any views
that get inflated

00:08:47.290 --> 00:08:50.872
will be using that
theme correctly.

00:08:50.872 --> 00:08:53.080
Either way you're going to
want to structure your app

00:08:53.080 --> 00:08:54.610
to rely on theme attributes.

00:08:54.610 --> 00:08:57.100
When I said, depending on
how your app is architected,

00:08:57.100 --> 00:08:58.840
this is what I'm referring to.

00:08:58.840 --> 00:09:01.210
All of the platform
drawables heavily

00:09:01.210 --> 00:09:04.870
rely on theme attributes
to obtain their colors.

00:09:04.870 --> 00:09:07.150
So things like color
foreground, color control

00:09:07.150 --> 00:09:10.290
normal, color accent,
you've probably seen.

00:09:10.290 --> 00:09:13.840
The implementation of the
material track switch,

00:09:13.840 --> 00:09:15.140
the thumb--

00:09:15.140 --> 00:09:15.640
sorry.

00:09:15.640 --> 00:09:18.220
The switch that you can
drag left and right,

00:09:18.220 --> 00:09:19.900
the thing that sits
directly under that

00:09:19.900 --> 00:09:23.300
is colored light gray
when it's enabled

00:09:23.300 --> 00:09:25.600
and dark gray when
it's disabled.

00:09:25.600 --> 00:09:27.910
The implementation
of that is just

00:09:27.910 --> 00:09:31.150
a color selector, a
color state list that

00:09:31.150 --> 00:09:34.480
refers to the color foreground
attribute from the theme, which

00:09:34.480 --> 00:09:37.570
is white under a light theme,
black under a dark theme,

00:09:37.570 --> 00:09:40.250
and a disabled alpha, which
is also defined by the theme.

00:09:40.250 --> 00:09:43.240
So we vary that based on
light and dark themes.

00:09:43.240 --> 00:09:46.215
You'll notice there are
no colors hardcoded here.

00:09:46.215 --> 00:09:48.520
And in general, you don't
want to hard code colors.

00:09:48.520 --> 00:09:51.370
We'll talk about this
more later today in a talk

00:09:51.370 --> 00:09:55.750
with Nick Butcher about
themes and styles.

00:09:55.750 --> 00:09:58.830
So I mentioned night mode showed
up a couple of releases ago.

00:09:58.830 --> 00:10:03.040
The night qualifier has been
in the platform since SDK 8.

00:10:03.040 --> 00:10:04.200
It has always been there.

00:10:04.200 --> 00:10:10.830
It was opened up for general
use in Android N. So the ability

00:10:10.830 --> 00:10:14.190
to set the night
qualifier system-wide.

00:10:14.190 --> 00:10:16.620
There are some apps now that
accidentally set the night

00:10:16.620 --> 00:10:17.790
qualifier system-wide.

00:10:17.790 --> 00:10:19.940
If anybody noticed messages
doing that recently,

00:10:19.940 --> 00:10:21.352
it's been fixed.

00:10:21.352 --> 00:10:23.960
CHRIS BANES: Tell them, Alan.

00:10:23.960 --> 00:10:25.710
ALAN VIVERETTE: So
this is what you'll use

00:10:25.710 --> 00:10:27.090
for switching your resources.

00:10:27.090 --> 00:10:30.360
It's a resource qualifier
similar to portrait

00:10:30.360 --> 00:10:31.290
or landscape.

00:10:31.290 --> 00:10:35.190
You just create a drawable-night
or a values-night.

00:10:35.190 --> 00:10:38.400
And if you have resources that
are difficult to extract theme

00:10:38.400 --> 00:10:42.360
colors out of, say you
have a welcome splash image

00:10:42.360 --> 00:10:44.250
that is very
complicated, and you

00:10:44.250 --> 00:10:46.080
couldn't put it in
a vector drawable

00:10:46.080 --> 00:10:48.440
so your designer
just gave you a PNG.

00:10:48.440 --> 00:10:50.880
And you can get a dark
version of that that has

00:10:50.880 --> 00:10:52.290
significantly different colors.

00:10:52.290 --> 00:10:55.107
And it's too complicated to
put in a vector drawable.

00:10:55.107 --> 00:10:56.940
You can just drop an
alternate version of it

00:10:56.940 --> 00:10:58.004
in drawable-night.

00:10:58.004 --> 00:10:59.670
When the device is
in night mode or when

00:10:59.670 --> 00:11:02.940
your app is in the AppCompat
implementation of night mode,

00:11:02.940 --> 00:11:05.015
you'll pick up that
drawable automatically.

00:11:05.015 --> 00:11:06.600
The same thing for
colors if there are

00:11:06.600 --> 00:11:08.100
colors that you want to switch.

00:11:08.100 --> 00:11:10.950
Say your accent color is
slightly brighter in a dark

00:11:10.950 --> 00:11:13.620
mode, you can extract
that out to a color,

00:11:13.620 --> 00:11:16.380
a named color resource,
have one version in colors,

00:11:16.380 --> 00:11:18.650
one version in
colors-night-- or sorry--

00:11:18.650 --> 00:11:21.770
values-night.

00:11:21.770 --> 00:11:24.690
So here's what the theme
implementation can look like.

00:11:24.690 --> 00:11:27.120
If you want to switch
your parent theme based

00:11:27.120 --> 00:11:31.020
on night qualifier, you simply
defined the theme twice,

00:11:31.020 --> 00:11:33.600
once in values, once
in values-nights,

00:11:33.600 --> 00:11:35.040
and give it a different parent.

00:11:35.040 --> 00:11:39.660
When your theme is referenced
under non-night mode,

00:11:39.660 --> 00:11:42.060
you'll pick up the light theme.

00:11:42.060 --> 00:11:44.040
When it's referenced
under night mode, when

00:11:44.040 --> 00:11:46.900
the night qualifier is on, you
will pick up the dark theme.

00:11:46.900 --> 00:11:48.372
The same thing goes for colors.

00:11:48.372 --> 00:11:49.830
So here we just
have the same color

00:11:49.830 --> 00:11:51.690
defined two different ways.

00:11:51.690 --> 00:11:54.420
Anytime that you
reference hardcoded_fg,

00:11:54.420 --> 00:11:57.109
it will pick up black
under non-night mode.

00:11:57.109 --> 00:11:58.650
It would pick up
white in night mode.

00:12:01.260 --> 00:12:04.280
So what can you do
to update your app,

00:12:04.280 --> 00:12:06.200
maybe do a little
bit of restructuring,

00:12:06.200 --> 00:12:08.900
and make it work really
well for night mode?

00:12:08.900 --> 00:12:10.940
Well, you can start
really simple.

00:12:10.940 --> 00:12:12.550
Just take a screenshot
of your app,

00:12:12.550 --> 00:12:15.070
invert it, see how it looks.

00:12:15.070 --> 00:12:17.140
Get a sense of whether
there are images

00:12:17.140 --> 00:12:20.410
that you'll need to have
an alternate version of.

00:12:20.410 --> 00:12:22.180
Here we see a bunch of avatars.

00:12:22.180 --> 00:12:24.430
Those, we probably want
to keep the exact same.

00:12:24.430 --> 00:12:27.550
Maybe we want to change the
background colors a little bit.

00:12:27.550 --> 00:12:30.100
So that may mean extracting
theme attributes.

00:12:30.100 --> 00:12:32.140
That may mean creating
some alternate values

00:12:32.140 --> 00:12:33.820
if they're vector
drawables, or that

00:12:33.820 --> 00:12:35.950
may mean getting
different sets of PNGs

00:12:35.950 --> 00:12:38.734
to drop into drawables-night.

00:12:38.734 --> 00:12:42.550
Next, you want to take a
survey of the usage of colors

00:12:42.550 --> 00:12:45.370
in your layout XML
and in your styles.

00:12:45.370 --> 00:12:48.040
So go ahead and set the
parents of your theme, whatever

00:12:48.040 --> 00:12:51.150
your app or activity theme
is, to be something dark,

00:12:51.150 --> 00:12:53.770
Theme.AppCompat
or Theme.Material,

00:12:53.770 --> 00:12:55.910
and see how it works.

00:12:55.910 --> 00:12:59.260
You'll want to look for
issues with losing contrast

00:12:59.260 --> 00:13:01.210
between foreground
and background,

00:13:01.210 --> 00:13:04.042
not seeing dark colors where
you expect to see dark colors.

00:13:04.042 --> 00:13:06.250
And in general, what you
see should look a little bit

00:13:06.250 --> 00:13:08.110
like that inverted screenshot.

00:13:08.110 --> 00:13:10.210
You'll notice here
it looks nothing

00:13:10.210 --> 00:13:13.000
like the inverted screenshot,
because all of the background

00:13:13.000 --> 00:13:15.730
colors and foreground
colors were

00:13:15.730 --> 00:13:18.040
hard-coded to be light theme.

00:13:18.040 --> 00:13:21.240
The one thing that
wasn't hard-coded--

00:13:21.240 --> 00:13:25.390
you can almost see it here-- is
the label for first name, which

00:13:25.390 --> 00:13:29.170
is now invisible, because it's
the only thing that's correctly

00:13:29.170 --> 00:13:32.770
pulling in the dark
theme color attributes.

00:13:32.770 --> 00:13:35.970
So this is going to
require a lot of work.

00:13:35.970 --> 00:13:38.140
The hard part is
doing that work.

00:13:38.140 --> 00:13:40.980
So you'll want to refactor your
colors as much as possible.

00:13:40.980 --> 00:13:43.800
Take any hard-coded colors
in your layout XMLs,

00:13:43.800 --> 00:13:46.950
move those out to
named color resources.

00:13:46.950 --> 00:13:50.250
You can split those based
on values, values-night.

00:13:50.250 --> 00:13:52.554
If you want to do more
than one type of theme--

00:13:52.554 --> 00:13:54.720
maybe you have a Hello Kitty
theme you want to apply

00:13:54.720 --> 00:13:56.040
dynamically--

00:13:56.040 --> 00:13:58.260
you'll want to extract those
to color attributes that

00:13:58.260 --> 00:14:00.540
have some sort of meaning
in your application.

00:14:00.540 --> 00:14:03.750
So as I mentioned before, we
have text color primary that's

00:14:03.750 --> 00:14:05.220
built into the platform theme.

00:14:05.220 --> 00:14:06.330
We have color accent.

00:14:06.330 --> 00:14:08.520
We have color primary.

00:14:08.520 --> 00:14:11.160
So you should be using
those as much as possible,

00:14:11.160 --> 00:14:14.190
and certainly take advantage
of theme attributes

00:14:14.190 --> 00:14:16.470
for specifying colors,
propagating those

00:14:16.470 --> 00:14:20.120
into your drawables, into color
state lists, into your layouts.

00:14:20.120 --> 00:14:24.450
You can convert colored PNGs
to alpha masks and use tinting.

00:14:24.450 --> 00:14:26.895
If you look at--

00:14:26.895 --> 00:14:28.320
we don't have a slide for that.

00:14:28.320 --> 00:14:32.820
So you can wrap those with a
bitmap element and set an alpha

00:14:32.820 --> 00:14:35.970
and set a tint
with android:tint.

00:14:35.970 --> 00:14:37.770
We'll talk again
a little bit more

00:14:37.770 --> 00:14:42.600
about this at the Themes
and Styles talk later today.

00:14:42.600 --> 00:14:46.110
Next, you actually move over to
the AppCompat DayNight theme,

00:14:46.110 --> 00:14:47.850
and you get automatic
switching when

00:14:47.850 --> 00:14:49.690
the device is in night mode.

00:14:49.690 --> 00:14:52.360
You can also consider
adding a preference.

00:14:52.360 --> 00:14:55.755
So here we have the Twitter app.

00:14:55.755 --> 00:14:58.230
I don't use Twitter so much.

00:14:58.230 --> 00:15:02.430
The Twitter app, which has
a very obvious affordance

00:15:02.430 --> 00:15:04.510
for switching between
day and night.

00:15:04.510 --> 00:15:06.540
So if you tap this, it
goes into dark mode.

00:15:06.540 --> 00:15:08.794
And it's really
convenient for your users.

00:15:08.794 --> 00:15:10.710
You'll also want to keep
in mind that there is

00:15:10.710 --> 00:15:12.540
a platform specified dark mode.

00:15:12.540 --> 00:15:14.430
So you may end up
with a tri-state that

00:15:14.430 --> 00:15:17.220
says inherit from the
platform dark mode

00:15:17.220 --> 00:15:22.720
or I can specify always
dark or always light.

00:15:22.720 --> 00:15:25.350
You'll also want to test
that your application works

00:15:25.350 --> 00:15:26.670
when night mode changes.

00:15:26.670 --> 00:15:29.520
So you can toggle
this manually using

00:15:29.520 --> 00:15:30.880
ADB from the command line.

00:15:30.880 --> 00:15:34.703
So open up your app once you've
implemented the DayNight theme.

00:15:34.703 --> 00:15:37.530
Toggle it into NightYes.

00:15:37.530 --> 00:15:40.380
Your application should
preserve whatever state you had

00:15:40.380 --> 00:15:41.520
and be recreated.

00:15:41.520 --> 00:15:44.700
It's going to go through a
full onDestroy and recreation,

00:15:44.700 --> 00:15:48.990
and be recreated in dark
theme, preserving user data.

00:15:48.990 --> 00:15:53.590
On Pixel 3 devices
running P, night mode

00:15:53.590 --> 00:15:56.610
will automatically switch when
the device enters battery saver

00:15:56.610 --> 00:15:57.196
mode.

00:15:57.196 --> 00:15:59.070
So that's another way
that you can test this.

00:15:59.070 --> 00:16:02.580
You can also toggle it directly
from Developer Options,

00:16:02.580 --> 00:16:05.760
and push night to mode to
be always on, always off.

00:16:05.760 --> 00:16:08.280
Or one of the legacy
things that we support

00:16:08.280 --> 00:16:12.430
is switching based
on time of day.

00:16:12.430 --> 00:16:15.419
You can also learn more, as
I've mentioned many times,

00:16:15.419 --> 00:16:17.460
in the Themes and Styles
talk that I'll be giving

00:16:17.460 --> 00:16:19.162
with Nick Butcher later today.

00:16:19.162 --> 00:16:21.120
If you want to learn more
about the lower level

00:16:21.120 --> 00:16:23.580
things in themes and
styles, Chris and I

00:16:23.580 --> 00:16:27.600
gave a great talk a couple of
years ago at Google I/O. So

00:16:27.600 --> 00:16:29.850
that covers everything
you want to know,

00:16:29.850 --> 00:16:33.150
but have been afraid to ask
about themes and styles.

00:16:33.150 --> 00:16:35.130
If there are things
you're not afraid to ask,

00:16:35.130 --> 00:16:38.010
we will be outside in
the Android lounge--

00:16:38.010 --> 00:16:40.920
that way-- to answer
any of your questions.

00:16:40.920 --> 00:16:42.990
So thanks everybody for coming.

00:16:42.990 --> 00:16:45.610
Please embrace the dark side.

00:16:45.610 --> 00:16:53.460
[MUSIC PLAYING]

