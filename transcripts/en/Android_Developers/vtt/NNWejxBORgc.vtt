WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.880
[MUSIC PLAYING]

00:00:06.940 --> 00:00:08.440
FLORINA MUNTENESCU:
Hello, everyone.

00:00:08.440 --> 00:00:10.330
My name is Florina
Muntenescu, and I'm

00:00:10.330 --> 00:00:12.914
a developer advocate at Google.

00:00:12.914 --> 00:00:14.830
So in the last few months,
together with three

00:00:14.830 --> 00:00:18.220
of my colleagues, we've been
working on bringing Plaid back

00:00:18.220 --> 00:00:19.590
in fashion.

00:00:19.590 --> 00:00:22.330
So more precisely,
Plaid is an application

00:00:22.330 --> 00:00:25.150
that was initially developed
by my colleague, Nick Butcher,

00:00:25.150 --> 00:00:28.150
as a way of showcasing
material design.

00:00:28.150 --> 00:00:29.830
And what you see
here is actually

00:00:29.830 --> 00:00:33.020
the state of the app in 2016
when it was pretty much,

00:00:33.020 --> 00:00:35.630
let's say, Plaid's glory days.

00:00:35.630 --> 00:00:38.440
So Nick used here
a lot of the APIs

00:00:38.440 --> 00:00:41.080
from the animations,
transitions, any method vector

00:00:41.080 --> 00:00:42.070
drawables.

00:00:42.070 --> 00:00:44.530
So all of these really
made the app shine.

00:00:44.530 --> 00:00:47.610
They really improved
the user experience.

00:00:47.610 --> 00:00:51.790
So Plaid [INAUDIBLE] data
from three different sources,

00:00:51.790 --> 00:00:56.470
and well, these sources
from 2016 until now,

00:00:56.470 --> 00:00:59.180
well, some of them
were deprecated.

00:00:59.180 --> 00:01:02.110
So that meant that,
out of three sources,

00:01:02.110 --> 00:01:05.490
we were left with
one and a little bit.

00:01:05.490 --> 00:01:10.240
So from all of these nice,
fancy UI features that we had,

00:01:10.240 --> 00:01:13.080
well, we were left
with almost nothing.

00:01:13.080 --> 00:01:16.006
We were left with a
pretty boring application.

00:01:16.006 --> 00:01:18.130
So we decided we didn't
want to leave it like this,

00:01:18.130 --> 00:01:22.420
and we decided we wanted to
fix this broken functionality.

00:01:22.420 --> 00:01:25.397
But, apart from
this, we also knew

00:01:25.397 --> 00:01:26.980
that we wanted to
go towards something

00:01:26.980 --> 00:01:30.160
that's modular and extensible
from the architecture

00:01:30.160 --> 00:01:31.280
point of view.

00:01:31.280 --> 00:01:36.520
But the thing is that Plaid was
developed as a UI sample, not

00:01:36.520 --> 00:01:38.170
as an architecture sample.

00:01:38.170 --> 00:01:41.440
So you won't be surprised
to see all the tie

00:01:41.440 --> 00:01:45.510
dependencies in
the code and, well,

00:01:45.510 --> 00:01:49.570
code that was actually a
bit behind, because Nick

00:01:49.570 --> 00:01:51.730
started building this in 2014.

00:01:51.730 --> 00:01:55.000
At that time, we didn't have
the guide to app architecture

00:01:55.000 --> 00:01:56.950
that we released last year.

00:01:56.950 --> 00:01:58.740
And also, although
we had Kotlin,

00:01:58.740 --> 00:02:00.355
we didn't really use it.

00:02:00.355 --> 00:02:03.130
So we knew that we
wanted to rebuild Plaid,

00:02:03.130 --> 00:02:05.860
but we wanted to rebuild
it in the right way,

00:02:05.860 --> 00:02:08.620
to have it in a good state
for any future changes

00:02:08.620 --> 00:02:10.330
that we wanted to build.

00:02:10.330 --> 00:02:13.900
So in this talk, I want to
tell you what we've learned

00:02:13.900 --> 00:02:19.390
and also how we managed to
leverage Kotlin in our app.

00:02:19.390 --> 00:02:24.010
So we released this opinionated
guide to the app architecture.

00:02:24.010 --> 00:02:26.350
But if you read it,
you'll see that it's also

00:02:26.350 --> 00:02:27.730
still quite vague.

00:02:27.730 --> 00:02:31.120
So we have these main
classes, some idea of how

00:02:31.120 --> 00:02:32.740
we should architect our app.

00:02:32.740 --> 00:02:36.220
But we decided we want to
create some clear guidelines.

00:02:36.220 --> 00:02:39.730
So we defined some main
types of classes in our app,

00:02:39.730 --> 00:02:41.920
and we also defined
a set of rules

00:02:41.920 --> 00:02:43.730
for each of these classes.

00:02:43.730 --> 00:02:45.470
So let's see which
ones these were.

00:02:45.470 --> 00:02:49.240
So we defined a
RemoteDataSource, whose role is

00:02:49.240 --> 00:02:51.670
actually to just construct
the request data,

00:02:51.670 --> 00:02:55.790
fetch the data from the
API service, and that's it.

00:02:55.790 --> 00:02:58.750
It would only request
information and return

00:02:58.750 --> 00:03:00.500
the response received.

00:03:00.500 --> 00:03:04.030
Next, we would have a
LocalDataSource, whose role

00:03:04.030 --> 00:03:06.710
is just to store data on disk.

00:03:06.710 --> 00:03:09.040
So it would either do
this in shared preferences

00:03:09.040 --> 00:03:11.462
or in the database.

00:03:11.462 --> 00:03:15.000
Next, it would have the
repository, whose role

00:03:15.000 --> 00:03:18.090
is to fetch and store data.

00:03:18.090 --> 00:03:21.940
And, optionally, it could
also do in-memory cache.

00:03:21.940 --> 00:03:23.700
So the repository
will be the class

00:03:23.700 --> 00:03:29.130
that mediates between the local
and the remote data source.

00:03:29.130 --> 00:03:32.910
Because the business
logic was quite complex,

00:03:32.910 --> 00:03:34.710
we decided to add another layer.

00:03:34.710 --> 00:03:36.960
We decided to add use cases.

00:03:36.960 --> 00:03:40.110
So the role of the use cases
is just to process data

00:03:40.110 --> 00:03:41.880
based on business logic.

00:03:41.880 --> 00:03:44.040
This will be small,
lightweight classes

00:03:44.040 --> 00:03:45.820
that could be also reused.

00:03:45.820 --> 00:03:50.580
So the use cases would depend
on repositories and/or other use

00:03:50.580 --> 00:03:52.300
cases.

00:03:52.300 --> 00:03:54.710
Next, we would
have a view model.

00:03:54.710 --> 00:03:57.080
So the ViewModel's
role is to expose

00:03:57.080 --> 00:04:01.250
data to be displayed by the
UI and also to trigger actions

00:04:01.250 --> 00:04:03.490
based on the user's actions.

00:04:03.490 --> 00:04:06.680
And the ViewModel would
depend on use cases.

00:04:06.680 --> 00:04:09.680
As an input, the ViewModel
would get maybe IDs.

00:04:09.680 --> 00:04:12.140
So it would get IDs
in the case where

00:04:12.140 --> 00:04:15.210
it's a ViewModel for a
details screen, for example.

00:04:15.210 --> 00:04:18.430
And, of course, it would get
the user's actions as an input.

00:04:18.430 --> 00:04:23.096
And as an output, it
would return a live data.

00:04:23.096 --> 00:04:26.690
Next, in the UI, we would
work with activities and XML.

00:04:26.690 --> 00:04:29.650
So the role of these is
to just display the data

00:04:29.650 --> 00:04:32.980
and to forward actions
to the ViewModel.

00:04:32.980 --> 00:04:35.590
As an input, they would
get the optional ID

00:04:35.590 --> 00:04:38.410
and the user's actions.

00:04:38.410 --> 00:04:42.400
So we looked at our application,
or at our architecture,

00:04:42.400 --> 00:04:44.320
and we divided it
into three layers.

00:04:44.320 --> 00:04:46.770
Data, domain, and the UI layer.

00:04:46.770 --> 00:04:49.540
We decided to go one step
further and be a bit more

00:04:49.540 --> 00:04:52.300
opinionated in the way
we're using [? data ?]

00:04:52.300 --> 00:04:54.080
or in the libraries
that we're using.

00:04:54.080 --> 00:04:57.910
So we knew that
the LiveData really

00:04:57.910 --> 00:05:01.430
shines when it's used together
with an activity or a fragment.

00:05:01.430 --> 00:05:03.850
So we decided to really
keep the LiveData only

00:05:03.850 --> 00:05:08.090
between the ViewModel and
the UI, and that's it.

00:05:08.090 --> 00:05:10.330
And even more, because
of the nice integration

00:05:10.330 --> 00:05:12.490
between LiveData
and DataBinding,

00:05:12.490 --> 00:05:17.191
we decided to also use
DataBinding in our XMLs.

00:05:17.191 --> 00:05:20.010
But, again, still with
all of these constraints

00:05:20.010 --> 00:05:22.050
and all of these
guidelines that we've set,

00:05:22.050 --> 00:05:24.810
there are so many ways in
which we can actually implement

00:05:24.810 --> 00:05:26.870
this kind of architecture.

00:05:26.870 --> 00:05:30.690
And we knew that Kotlin and
the Kotlin language features

00:05:30.690 --> 00:05:33.450
will help us improve
this even more.

00:05:33.450 --> 00:05:35.820
And more precisely, what
we'd particularly like

00:05:35.820 --> 00:05:39.080
are the functional constructs
that Kotlin supports.

00:05:39.080 --> 00:05:43.170
So actually, one of the first
decisions that we had to make

00:05:43.170 --> 00:05:46.630
was how do we handle
asynchronous operations?

00:05:46.630 --> 00:05:48.960
And we decided to
work with coroutines

00:05:48.960 --> 00:05:51.570
as the, pretty much,
backbone of our app

00:05:51.570 --> 00:05:54.420
because with coroutines,
it's easy to just launch

00:05:54.420 --> 00:05:57.820
a coroutines and
handle the response.

00:05:57.820 --> 00:05:59.340
And more precisely,
what we liked

00:05:59.340 --> 00:06:02.430
is the fact that
coroutines have a scope.

00:06:02.430 --> 00:06:05.670
So, for example, let's say that
you're opening the activity.

00:06:05.670 --> 00:06:07.470
You're triggering
a network request.

00:06:07.470 --> 00:06:09.053
You want to make
sure that when you're

00:06:09.053 --> 00:06:11.370
pressing back and
exiting that activity,

00:06:11.370 --> 00:06:14.250
you're also canceling
that network request.

00:06:14.250 --> 00:06:16.740
So this scoping
of the coroutines

00:06:16.740 --> 00:06:18.590
was something that we liked.

00:06:18.590 --> 00:06:19.090
So

00:06:19.090 --> 00:06:22.180
This meant that we decided
that in the ViewModel

00:06:22.180 --> 00:06:23.890
would be the place
where we're launching

00:06:23.890 --> 00:06:26.230
and we're canceling
coroutines, and we're also

00:06:26.230 --> 00:06:29.980
making that transition between
coroutines and LiveData.

00:06:29.980 --> 00:06:33.000
But then, for all the other
layers above the ViewModel,

00:06:33.000 --> 00:06:36.240
we would just use
suspension functions.

00:06:36.240 --> 00:06:41.440
But these suspension functions
would return a result class.

00:06:41.440 --> 00:06:45.700
So, more precisely, this
result will have two types--

00:06:45.700 --> 00:06:47.510
success or error.

00:06:47.510 --> 00:06:49.300
And this is because
we wanted to make sure

00:06:49.300 --> 00:06:51.700
that we're not throwing
exceptions here and there,

00:06:51.700 --> 00:06:54.160
but rather, that these
exceptions, those errors,

00:06:54.160 --> 00:06:56.320
represent a state.

00:06:56.320 --> 00:06:58.810
So what's interesting
in Kotlin is

00:06:58.810 --> 00:07:03.070
that if you want to be
able to extend the class,

00:07:03.070 --> 00:07:05.230
you have to mark it as open.

00:07:05.230 --> 00:07:08.170
So this means that classes
are final by default,

00:07:08.170 --> 00:07:11.980
and you have to be intentional
when using inheritance.

00:07:11.980 --> 00:07:15.430
So this means that Kotlin really
supports this idea, this best

00:07:15.430 --> 00:07:20.420
practices of favoring
composition versus inheritance.

00:07:20.420 --> 00:07:23.950
But we can do better
than using open classes.

00:07:23.950 --> 00:07:27.400
We can use a sealed class,
because with a sealed class,

00:07:27.400 --> 00:07:29.530
we can restrict the
class [INAUDIBLE] case.

00:07:29.530 --> 00:07:35.170
It means that we can't extend
the class outside this file.

00:07:35.170 --> 00:07:38.220
So a lot of times when we
would use this result class,

00:07:38.220 --> 00:07:41.160
we will typically
use it inside a when.

00:07:41.160 --> 00:07:44.640
So, first of all, when
support smart casts.

00:07:44.640 --> 00:07:48.710
So this meant that it was easy
to do when result is success,

00:07:48.710 --> 00:07:49.520
do something.

00:07:49.520 --> 00:07:52.960
When result is error,
do something else.

00:07:52.960 --> 00:07:55.470
But because every time
we were using it we

00:07:55.470 --> 00:07:59.340
wanted to make sure that we're
always handling every case,

00:07:59.340 --> 00:08:01.770
we wanted to make sure that
if, I know, by mistake,

00:08:01.770 --> 00:08:04.770
we're not handling something,
we wanted the compiler

00:08:04.770 --> 00:08:07.410
to tell us that, hey,
you forgot something.

00:08:07.410 --> 00:08:10.180
You forgot to handle
the error case.

00:08:10.180 --> 00:08:13.770
So this meant that the when
needs to be exhaustive.

00:08:13.770 --> 00:08:18.610
But when is exhaustive only
when used as an expression.

00:08:18.610 --> 00:08:23.770
So we created the
exhaustive property.

00:08:23.770 --> 00:08:27.240
So, more precisely, we created
an extension property on T

00:08:27.240 --> 00:08:29.650
where we're just
returning the object.

00:08:32.179 --> 00:08:35.100
Here's another
problem that we had.

00:08:35.100 --> 00:08:38.929
So we had a comment class,
and a comment with replies.

00:08:38.929 --> 00:08:41.270
So the difference between
these two is in the fact

00:08:41.270 --> 00:08:45.470
that the comment also holds the
information about the user that

00:08:45.470 --> 00:08:46.370
posted the comment.

00:08:46.370 --> 00:08:49.430
So it will have the display
name and the portrait URL,

00:08:49.430 --> 00:08:53.180
whereas the comment with replies
is pretty much a tree structure

00:08:53.180 --> 00:08:55.010
that holds the
replies of the comment

00:08:55.010 --> 00:08:57.566
and the replies of
the replies and so on.

00:08:57.566 --> 00:09:01.520
But what we had to do was
to build a comment out

00:09:01.520 --> 00:09:04.890
of the comment with
replies and a user object.

00:09:04.890 --> 00:09:06.530
So you say, OK, that's easy.

00:09:06.530 --> 00:09:08.420
We will just create a
new constructor that

00:09:08.420 --> 00:09:11.950
gets us parameters, the user
and the comment for replies,

00:09:11.950 --> 00:09:13.340
and that's it.

00:09:13.340 --> 00:09:15.710
But the thing is
that we didn't really

00:09:15.710 --> 00:09:19.580
like this because the classes
were in two different layers.

00:09:19.580 --> 00:09:23.990
And why should the comments know
about the comment with replies?

00:09:23.990 --> 00:09:26.540
Why should it know
necessarily about the user?

00:09:26.540 --> 00:09:28.580
Maybe the data comes
from somewhere else.

00:09:28.580 --> 00:09:33.440
Why should we need
to change this API?

00:09:33.440 --> 00:09:36.950
So what we ended up using
is an extension function.

00:09:36.950 --> 00:09:39.360
So, more precisely, we
built an extension function

00:09:39.360 --> 00:09:42.980
to the comment with replies
that, based on the user object,

00:09:42.980 --> 00:09:44.880
it would create a comment.

00:09:44.880 --> 00:09:48.920
So this, when you're building
an extension function,

00:09:48.920 --> 00:09:53.420
you only have access
to the public fields.

00:09:53.420 --> 00:09:55.610
So this means that
we're not, by mistake,

00:09:55.610 --> 00:09:59.260
accessing or changing any
private implementation data.

00:09:59.260 --> 00:10:02.330
And it allows us to keep
our classes focused,

00:10:02.330 --> 00:10:06.510
focused on what they do
without extending them.

00:10:06.510 --> 00:10:09.920
So it meant that we didn't
have to change the public API,

00:10:09.920 --> 00:10:15.270
and we would avoid accessing
private implementation details.

00:10:15.270 --> 00:10:18.050
So what I like about
data classes is the fact

00:10:18.050 --> 00:10:20.060
that there are value
objects, and this actually

00:10:20.060 --> 00:10:22.350
shines when used in tests.

00:10:22.350 --> 00:10:26.500
So, for example, we had an
upvote flag in the comments.

00:10:26.500 --> 00:10:29.700
So when we built a test to check
whether a comment is upvoted,

00:10:29.700 --> 00:10:33.350
it would create our comment
with the upvoted flag to false,

00:10:33.350 --> 00:10:35.120
whatever the
comment, and then we

00:10:35.120 --> 00:10:38.660
would check whether
the expected result is

00:10:38.660 --> 00:10:40.610
similar to the comment,
the initial comment,

00:10:40.610 --> 00:10:43.880
but with that
upvoted flag to true.

00:10:43.880 --> 00:10:45.680
But the thing is
that, especially

00:10:45.680 --> 00:10:48.650
in our case, because the
comment has so many fields,

00:10:48.650 --> 00:10:50.360
it was easy to make mistakes.

00:10:50.360 --> 00:10:52.310
And it was easy to
miss what's actually

00:10:52.310 --> 00:10:56.560
important here, the fact that
the upvoted flag has changed.

00:10:56.560 --> 00:10:59.090
With Kotlin, you can
use the copy method,

00:10:59.090 --> 00:11:04.490
and there we would just create
a copy of the object that

00:11:04.490 --> 00:11:05.570
is called on.

00:11:05.570 --> 00:11:08.510
And we're setting the flag,
the flag that we're actually

00:11:08.510 --> 00:11:10.880
changing, and that's it.

00:11:10.880 --> 00:11:15.020
The code ends up being more
concise and more readable,

00:11:15.020 --> 00:11:17.570
more comprehensible.

00:11:17.570 --> 00:11:21.560
So let's take another example.

00:11:21.560 --> 00:11:26.720
In our app, we were working
with a remote data source

00:11:26.720 --> 00:11:27.560
to post a comment.

00:11:27.560 --> 00:11:30.470
And here, we would expose
a suspension function that

00:11:30.470 --> 00:11:34.560
would return a result.
And inside this method,

00:11:34.560 --> 00:11:37.290
we would create a
new comment request.

00:11:37.290 --> 00:11:39.640
We'd trigger that
request at the back end.

00:11:39.640 --> 00:11:41.850
We would wait for the response.

00:11:41.850 --> 00:11:44.340
And then we would handle
the response, building

00:11:44.340 --> 00:11:47.190
either a result success
or result of error,

00:11:47.190 --> 00:11:49.330
depending on what's needed.

00:11:49.330 --> 00:11:53.110
But, if you look at this code,
this is actually not enough,

00:11:53.110 --> 00:11:56.960
because in the case when
your device is offline,

00:11:56.960 --> 00:11:58.690
this code will crash.

00:11:58.690 --> 00:12:02.310
So what we actually had to
do is to wrap every request

00:12:02.310 --> 00:12:04.430
inside a try-catch.

00:12:04.430 --> 00:12:06.130
And we have a lot of requests.

00:12:06.130 --> 00:12:09.900
So we saw that we keep on
adding and adding this try-catch

00:12:09.900 --> 00:12:15.330
everywhere, and then
our methods were loaded.

00:12:15.330 --> 00:12:17.580
So we couldn't
really focus on what

00:12:17.580 --> 00:12:19.770
really mattered on
building the response,

00:12:19.770 --> 00:12:21.610
triggering the request.

00:12:21.610 --> 00:12:24.900
So what we did is create
a top-level function.

00:12:24.900 --> 00:12:27.000
So this would be a
suspension function

00:12:27.000 --> 00:12:30.540
that would get us a parameter of
suspending lambda and the error

00:12:30.540 --> 00:12:31.520
message.

00:12:31.520 --> 00:12:33.730
So here it would just
trigger the call,

00:12:33.730 --> 00:12:36.840
wrap it inside a try-catch,
and then we would build,

00:12:36.840 --> 00:12:38.580
in case of an
exception, a result

00:12:38.580 --> 00:12:42.130
of error based on the error
message with [INAUDIBLE]..

00:12:42.130 --> 00:12:45.360
So that this means that
in our mode data source,

00:12:45.360 --> 00:12:48.150
we could just create
a safe API call,

00:12:48.150 --> 00:12:50.700
and then put the call that
actually matters for us

00:12:50.700 --> 00:12:52.410
inside another function.

00:12:52.410 --> 00:12:55.050
Like this the code became
more readable, more easy

00:12:55.050 --> 00:12:57.504
to understand.

00:12:57.504 --> 00:13:00.830
So this safe API
call, I was saying

00:13:00.830 --> 00:13:02.700
that it has the call
as the first parameter

00:13:02.700 --> 00:13:05.020
and then the error
message as the second one.

00:13:05.020 --> 00:13:09.800
But in Kotlin, if the
last parameter of a method

00:13:09.800 --> 00:13:12.140
is a lambda, it
means that you can

00:13:12.140 --> 00:13:14.630
use this as a trailing lambda.

00:13:14.630 --> 00:13:17.330
So that meant that when
you're calling this,

00:13:17.330 --> 00:13:19.670
instead of passing
these two parameters,

00:13:19.670 --> 00:13:21.830
we can just pass
the error message

00:13:21.830 --> 00:13:24.620
as a parameter of
the function and then

00:13:24.620 --> 00:13:28.550
use the trailing lambda
syntax to call the method.

00:13:28.550 --> 00:13:32.180
So like this, the code
becomes more concise,

00:13:32.180 --> 00:13:34.154
but is it really more readable?

00:13:34.154 --> 00:13:35.570
So when we looked
at this, it felt

00:13:35.570 --> 00:13:40.220
what matters here the most
is the error message, which

00:13:40.220 --> 00:13:41.600
is not really the case.

00:13:41.600 --> 00:13:44.330
What matters for us a lot
is that the method that gets

00:13:44.330 --> 00:13:46.670
called is this post comment.

00:13:46.670 --> 00:13:51.330
So we decided that, although
the code is more concise,

00:13:51.330 --> 00:13:53.460
it doesn't mean more readable.

00:13:53.460 --> 00:13:56.730
So brevity isn't
necessarily a good thing.

00:13:56.730 --> 00:13:59.720
So even if Kotlin offers
all of these kind of options

00:13:59.720 --> 00:14:03.290
and features, be mindful and
think whether you actually

00:14:03.290 --> 00:14:07.080
need all of these, or use
them in the right places.

00:14:07.080 --> 00:14:10.080
Here's another example.

00:14:10.080 --> 00:14:13.674
So as soon as we were
switching to Kotlin, especially

00:14:13.674 --> 00:14:15.590
in our activities, the
first thing that we did

00:14:15.590 --> 00:14:17.900
is make all of our
views [INAUDIBLE]

00:14:17.900 --> 00:14:21.720
because we didn't want to
handle all of this nullability.

00:14:21.720 --> 00:14:23.330
But then we looked
again at our code,

00:14:23.330 --> 00:14:25.700
and we saw that we
shouldn't do this,

00:14:25.700 --> 00:14:29.740
that some views, for
example, our no result views,

00:14:29.740 --> 00:14:33.840
were only inflated when
specific conditions are met.

00:14:33.840 --> 00:14:36.650
So, actually,
nullability was good.

00:14:36.650 --> 00:14:39.260
Nullability can be meaningful.

00:14:39.260 --> 00:14:42.060
Nullability was telling us
that something is missing,

00:14:42.060 --> 00:14:45.400
and we should really handle it.

00:14:45.400 --> 00:14:49.920
So, overall, we saw how all
of these features from Kotlin,

00:14:49.920 --> 00:14:53.970
like coroutines, immutability,
and functions as first class

00:14:53.970 --> 00:14:56.490
citizens, can help
us shape our app.

00:14:56.490 --> 00:14:58.950
And together, with the
guide to app architecture,

00:14:58.950 --> 00:15:02.050
helped us build this
maintainable, this safer

00:15:02.050 --> 00:15:04.170
and faster-to-develop
architecture

00:15:04.170 --> 00:15:06.120
that we wanted to have.

00:15:06.120 --> 00:15:07.320
Thank you.

00:15:07.320 --> 00:15:09.420
[APPLAUSE]

00:15:11.220 --> 00:15:14.570
[MUSIC PLAYING]

