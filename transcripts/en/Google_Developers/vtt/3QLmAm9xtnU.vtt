WEBVTT
Kind: captions
Language: en

00:00:03.830 --> 00:00:05.514
ERIC BIDELMAN: Thanks, man.

00:00:05.514 --> 00:00:06.930
Bet you didn't
know you were going

00:00:06.930 --> 00:00:08.900
to join a revolution tonight,
but it's totally here.

00:00:08.900 --> 00:00:10.190
The Web Components revolution.

00:00:10.190 --> 00:00:11.920
I'm super excited about it.

00:00:11.920 --> 00:00:15.790
I've been working on this stuff
for now a couple of years.

00:00:15.790 --> 00:00:18.330
And-- I'm going to
bump this up for you--

00:00:18.330 --> 00:00:19.490
my name is-- just so you
know who you're talking to.

00:00:19.490 --> 00:00:21.698
Peter introduced me, but
I'll introduce myself again.

00:00:21.698 --> 00:00:22.767
My name's Eric Bidelman.

00:00:22.767 --> 00:00:23.850
I work on the Chrome team.

00:00:23.850 --> 00:00:24.660
I work on Polymer.

00:00:24.660 --> 00:00:26.150
I think Web Components
are the bee's knees.

00:00:26.150 --> 00:00:28.150
It's going to change the
way we develop the web.

00:00:28.150 --> 00:00:29.130
Hopefully by the
end of the night--

00:00:29.130 --> 00:00:30.505
it's a long night--
there's going

00:00:30.505 --> 00:00:32.790
to be lot of cool demos,
a lot of cool examples.

00:00:32.790 --> 00:00:35.489
My goal to you tonight
is to sort of sell you

00:00:35.489 --> 00:00:37.280
on the value proposition
of Web Components.

00:00:37.280 --> 00:00:39.330
What problems it
solves, what issues

00:00:39.330 --> 00:00:41.460
it's addressing in
web development.

00:00:41.460 --> 00:00:45.570
I can't really spend enough time
on the lower level tech in 25

00:00:45.570 --> 00:00:49.970
minutes, so feel free to
Tweet at me, Google+ me,

00:00:49.970 --> 00:00:51.560
check out the HTML5
Rocks articles,

00:00:51.560 --> 00:00:55.307
there's a lot of really good
stuff there to read about.

00:00:55.307 --> 00:00:56.890
So what's the need
for Web Components?

00:00:56.890 --> 00:01:00.330
Why are we having a four
hour event for you guys

00:01:00.330 --> 00:01:03.280
to even groc all that?

00:01:03.280 --> 00:01:04.780
And to really
understand where we're

00:01:04.780 --> 00:01:05.950
going with Web
Components, you have

00:01:05.950 --> 00:01:07.830
to actually understand
where we've been.

00:01:07.830 --> 00:01:10.630
So once upon a time, I present
to you, the web, right?

00:01:10.630 --> 00:01:12.610
This is how the web looked.

00:01:12.610 --> 00:01:15.110
And we had a bunch of stuff
that we kind of pieced together.

00:01:15.110 --> 00:01:17.206
Maybe some JavaScript
here, some HTML here.

00:01:17.206 --> 00:01:18.080
And it was like this.

00:01:18.080 --> 00:01:18.950
It was a mess, right?

00:01:18.950 --> 00:01:20.533
It was coming from
all over the place.

00:01:20.533 --> 00:01:22.676
And then, of course,
HTML5 came along.

00:01:22.676 --> 00:01:25.300
This was like, this was going to
solve all our problems, right?

00:01:25.300 --> 00:01:26.820
This is going to cure cancer.

00:01:26.820 --> 00:01:28.996
It's going to solve world peace.

00:01:28.996 --> 00:01:30.302
You know, and it did.

00:01:30.302 --> 00:01:32.260
The industry got really,
really stoked about it

00:01:32.260 --> 00:01:34.432
and we're still stoked
about it and stuff just

00:01:34.432 --> 00:01:35.640
kept getting added and added.

00:01:35.640 --> 00:01:38.970
And so we added WebRTC
and Web Audio API

00:01:38.970 --> 00:01:41.390
and all these really
rich APIs in order

00:01:41.390 --> 00:01:44.650
to have a more powerful
platform, and that's great.

00:01:44.650 --> 00:01:47.660
But-- oh, no, his
T-rex head is cut off.

00:01:47.660 --> 00:01:50.629
This is great, but it's
a lot of overkill for us

00:01:50.629 --> 00:01:51.420
regular developers.

00:01:51.420 --> 00:01:52.600
I'm a regular developer.

00:01:52.600 --> 00:01:55.186
I don't need WebRTC
capabilities all the time.

00:01:55.186 --> 00:01:56.310
What about my productivity?

00:01:56.310 --> 00:01:59.560
What about useful stuff
for me to develop?

00:01:59.560 --> 00:02:01.870
And so, the journey
starts in 2010.

00:02:01.870 --> 00:02:05.290
Some really smart people--
Dimitri Glazkov actually I

00:02:05.290 --> 00:02:09.229
call him one of the
godfathers of Web Components--

00:02:09.229 --> 00:02:11.760
sent a note to the public
web apps mailing list.

00:02:11.760 --> 00:02:15.364
This is the mailing lists for
general new stuff that's appy.

00:02:15.364 --> 00:02:17.030
And he was like, hey,
I've been thinking

00:02:17.030 --> 00:02:19.970
about this a long time
with some other folks.

00:02:19.970 --> 00:02:21.830
We need things in the
platform-like template

00:02:21.830 --> 00:02:23.954
and why can't we do proper
template in the browser?

00:02:23.954 --> 00:02:26.060
Why does everybody
do it differently?

00:02:26.060 --> 00:02:29.030
Shadow DOM, the ability to
actually scope and encapsulate

00:02:29.030 --> 00:02:30.960
certain chunks of
markups on the CSS.

00:02:30.960 --> 00:02:32.360
This is four years ago, right?

00:02:32.360 --> 00:02:34.782
This has been a long, long
journey since this time.

00:02:34.782 --> 00:02:36.240
But it's kind of
really interesting

00:02:36.240 --> 00:02:38.489
to go back in the archives
and see this stuff actually

00:02:38.489 --> 00:02:40.129
play out.

00:02:40.129 --> 00:02:40.920
So what's happened?

00:02:40.920 --> 00:02:44.410
So over the years, all these
specifications that there's

00:02:44.410 --> 00:02:46.850
been a lot of contributions
too, they basically

00:02:46.850 --> 00:02:49.035
say, hey, let's strip
the platform back.

00:02:49.035 --> 00:02:51.017
Let's decide what are
the API parameters that

00:02:51.017 --> 00:02:52.725
are really, really
useful for developers?

00:02:52.725 --> 00:02:55.260
That are going to make
you, myself included,

00:02:55.260 --> 00:02:57.660
very productive.

00:02:57.660 --> 00:03:00.850
So let's take HTML5, let's
pull back the covers,

00:03:00.850 --> 00:03:03.171
strip it down, and identify
the layers of the platform

00:03:03.171 --> 00:03:04.670
that we really need
in order to make

00:03:04.670 --> 00:03:08.779
it a really powerful product--
application building platform.

00:03:08.779 --> 00:03:10.820
So this is where the Web
Component specs come in.

00:03:10.820 --> 00:03:12.370
Let's add all this
really low level

00:03:12.370 --> 00:03:15.800
stuff so it can enable the
next generation of frameworks

00:03:15.800 --> 00:03:17.092
on the web.

00:03:17.092 --> 00:03:18.550
Of course, developers
can tweak it.

00:03:18.550 --> 00:03:20.174
They can do whatever
they want with it.

00:03:20.174 --> 00:03:23.479
This stuff can be composed
and used together,

00:03:23.479 --> 00:03:25.020
but that's really
where the power is.

00:03:25.020 --> 00:03:27.570
We're getting all these tools,
and this utility belt for you

00:03:27.570 --> 00:03:30.781
to develop the next
generation applications.

00:03:30.781 --> 00:03:31.530
So Web Components.

00:03:31.530 --> 00:03:33.450
What-- at its core,
the way I think of it

00:03:33.450 --> 00:03:35.260
is a set of emerging standards.

00:03:35.260 --> 00:03:37.910
It allows developers
to extend HTML.

00:03:37.910 --> 00:03:39.440
It allows you to
say hey browser,

00:03:39.440 --> 00:03:42.220
there's this new thing you
should know about essentially.

00:03:42.220 --> 00:03:44.960
It's got functionality, it's
got API, it's got markup,

00:03:44.960 --> 00:03:45.950
it's got CSS.

00:03:45.950 --> 00:03:47.960
And wrap all that
up and deliver that.

00:03:47.960 --> 00:03:51.040
Have other people use it.

00:03:51.040 --> 00:03:54.050
So it's really, really important
that we kind of take away--

00:03:54.050 --> 00:03:55.720
all the stuff you're going to
see today, all the stuff I'm

00:03:55.720 --> 00:03:58.095
showing you, all the stuff
the great presenters that will

00:03:58.095 --> 00:04:00.750
follow will show you it's
all based on these standards.

00:04:00.750 --> 00:04:02.460
It's all W3C
standard, so it's not

00:04:02.460 --> 00:04:03.870
some kind of proprietary thing.

00:04:03.870 --> 00:04:05.600
It's stuff that you can use.

00:04:05.600 --> 00:04:07.760
You can use the native
vanilla stuff if you want.

00:04:07.760 --> 00:04:09.670
You can use the
Polymer for extra sugar

00:04:09.670 --> 00:04:12.360
in your x-tags or
these other options.

00:04:12.360 --> 00:04:14.470
That's really the
awesome bit about this.

00:04:14.470 --> 00:04:16.529
And so the standards
involved here.

00:04:16.529 --> 00:04:19.320
Four main standards when
you kind of break it apart.

00:04:19.320 --> 00:04:20.620
The first is templates.

00:04:20.620 --> 00:04:24.100
This is actually being able to
do proper DOM-based templating

00:04:24.100 --> 00:04:24.730
in the browser.

00:04:24.730 --> 00:04:26.688
So you could say, I want
this section of markup

00:04:26.688 --> 00:04:28.410
to be used later, and
then stamp that out

00:04:28.410 --> 00:04:31.610
as you create different
elements and components.

00:04:31.610 --> 00:04:32.300
Custom elements.

00:04:32.300 --> 00:04:33.510
This is sort of the
bread and butter.

00:04:33.510 --> 00:04:36.030
Being able to tell the browser,
I want to create a new tag.

00:04:36.030 --> 00:04:40.696
I want to create my awesome
button tag, or my xtabs tag.

00:04:40.696 --> 00:04:42.570
Being able to tell the
browser about this tag

00:04:42.570 --> 00:04:45.670
and give it an API that
everybody can tap into

00:04:45.670 --> 00:04:47.284
is really what that's all about.

00:04:47.284 --> 00:04:49.700
And Shadow DOM is sort of one
of these foundational pieces

00:04:49.700 --> 00:04:53.460
that's, again, useful by
itself as all these APIs are.

00:04:53.460 --> 00:04:56.620
But, it really allows us
to encapsulate and scope

00:04:56.620 --> 00:04:58.060
the problem to your component.

00:04:58.060 --> 00:05:00.620
So, for instance, if you
define CSS in a Web Component,

00:05:00.620 --> 00:05:01.905
it's not going to bleed out.

00:05:01.905 --> 00:05:02.780
This is great, right?

00:05:02.780 --> 00:05:04.390
As an author, you
want some guarantees

00:05:04.390 --> 00:05:06.110
that what you've
worked so hard on

00:05:06.110 --> 00:05:08.630
is not going to just bleed
out into the outside world.

00:05:08.630 --> 00:05:10.362
And then the page is
not going to effect

00:05:10.362 --> 00:05:11.570
the way your component looks.

00:05:11.570 --> 00:05:13.070
That's really important.

00:05:13.070 --> 00:05:15.660
So you can stick markup in a
component-- in a CSS component,

00:05:15.660 --> 00:05:19.080
you're guaranteed to have the
scoping to that component.

00:05:19.080 --> 00:05:21.502
And the last one is one of
these sort of really, really

00:05:21.502 --> 00:05:22.960
nice APIs, you've
never had before.

00:05:22.960 --> 00:05:24.040
We should have.

00:05:24.040 --> 00:05:25.330
HTML imports.

00:05:25.330 --> 00:05:28.150
You can load up, you can bundle
your CSS and your JavaScript

00:05:28.150 --> 00:05:31.350
and your HTML together, and
deliver that via a single URL

00:05:31.350 --> 00:05:32.370
that somebody can use.

00:05:32.370 --> 00:05:34.330
And then they can
use your component.

00:05:34.330 --> 00:05:36.038
So that's really,
really cool, because we

00:05:36.038 --> 00:05:39.130
can package all this stuff in a
single bundle and deliver that.

00:05:39.130 --> 00:05:41.760
Support for this is totally
accelerating across the board.

00:05:41.760 --> 00:05:43.460
This matrix a year
ago which was pretty

00:05:43.460 --> 00:05:45.770
crappy to be quite
frank with you,

00:05:45.770 --> 00:05:48.560
but today with polyfills
and the polyfills

00:05:48.560 --> 00:05:51.640
the Polymer team has built, you
can actually use all this stuff

00:05:51.640 --> 00:05:53.610
in any of these modern browsers.

00:05:53.610 --> 00:05:56.190
So, the moral of story
is, there's no excuse

00:05:56.190 --> 00:05:58.810
not to play with Web
Components in 2014,

00:05:58.810 --> 00:06:00.795
and that revolution is here.

00:06:00.795 --> 00:06:02.170
So those are the
standards, but I

00:06:02.170 --> 00:06:04.130
want to focus now
on custom elements.

00:06:04.130 --> 00:06:06.650
I think this is one of the
foundational pieces of what

00:06:06.650 --> 00:06:07.816
Web Components is all about.

00:06:11.190 --> 00:06:12.940
So in order to understand
custom elements,

00:06:12.940 --> 00:06:15.250
you actually have to take
another voyage back in time.

00:06:15.250 --> 00:06:16.840
So this is the web today.

00:06:16.840 --> 00:06:19.040
At least what
google.com looks like.

00:06:19.040 --> 00:06:21.177
Let's throw back to 1998.

00:06:21.177 --> 00:06:23.010
This is what google.com
looked like in 1998.

00:06:23.010 --> 00:06:24.447
It's totally primitive, right?

00:06:24.447 --> 00:06:27.030
The buttons look crappy, there
wasn't any CSS really available

00:06:27.030 --> 00:06:27.971
to us.

00:06:27.971 --> 00:06:29.220
Larry and Sergey came up with.

00:06:29.220 --> 00:06:31.810
This is what Google looked
like-- this is probably

00:06:31.810 --> 00:06:34.520
what your web app
looked like, right?

00:06:34.520 --> 00:06:36.130
The web was built on forms.

00:06:36.130 --> 00:06:37.910
This was like an
app at the time.

00:06:37.910 --> 00:06:40.880
And so you can put an input
on it, it's pretty cool.

00:06:40.880 --> 00:06:43.280
And you can type in here.

00:06:43.280 --> 00:06:44.000
This is neat.

00:06:44.000 --> 00:06:45.834
There's a select
element on this form.

00:06:45.834 --> 00:06:48.250
And this is kind of like the
first example of a component,

00:06:48.250 --> 00:06:49.030
right?

00:06:49.030 --> 00:06:51.919
I declare this on my page and I
get this native little browser

00:06:51.919 --> 00:06:53.960
widget, this little
component control and I don't

00:06:53.960 --> 00:06:56.195
know how it's done,
it just happens.

00:06:56.195 --> 00:06:56.820
So that's cool.

00:06:56.820 --> 00:06:58.042
What's going on there?

00:06:58.042 --> 00:06:59.750
And of course, when
you submit this form,

00:06:59.750 --> 00:07:02.270
somehow it magically
just posts to a server

00:07:02.270 --> 00:07:04.520
and it does all this black
magic under the hood.

00:07:04.520 --> 00:07:08.122
So it's doing stuff that is
transparent to me as a user.

00:07:08.122 --> 00:07:11.620
OK, Selecty's going to
help us build this web app.

00:07:11.620 --> 00:07:13.910
Selecty is Clippy's cousin.

00:07:13.910 --> 00:07:16.370
He likes to jiggle around.

00:07:16.370 --> 00:07:18.330
So back then, elements
were very declarative

00:07:18.330 --> 00:07:21.350
and a really good example
again is this select element.

00:07:21.350 --> 00:07:24.000
It's actually got a lot
of stuff built into it.

00:07:24.000 --> 00:07:26.290
So let's take select,
let's look at it.

00:07:26.290 --> 00:07:27.420
I declare it on my page.

00:07:27.420 --> 00:07:29.330
I throw some option
elements in there.

00:07:29.330 --> 00:07:32.500
And, again, all I get is this
really cool little widget

00:07:32.500 --> 00:07:33.350
for free.

00:07:33.350 --> 00:07:34.850
I don't write any
CSS or JavaScript.

00:07:34.850 --> 00:07:36.237
This kind of just
happens for me.

00:07:36.237 --> 00:07:37.695
And it's got this
hover state, it's

00:07:37.695 --> 00:07:40.530
got this check box, and
this other UI around it.

00:07:40.530 --> 00:07:42.530
So literally just by
declaring this on the page,

00:07:42.530 --> 00:07:44.430
I get a component.

00:07:44.430 --> 00:07:47.850
The first browser
made of component.

00:07:47.850 --> 00:07:51.830
I can also configure this thing,
so it takes HTML attributes.

00:07:51.830 --> 00:07:54.270
So if I put a disabled
attribute on the option,

00:07:54.270 --> 00:07:56.647
or a selected attribute
on the option, boom.

00:07:56.647 --> 00:07:58.230
This thing knows
what to do with that.

00:07:58.230 --> 00:08:00.610
It knows how to render
that in a different way.

00:08:00.610 --> 00:08:01.960
It does exactly what you expect.

00:08:01.960 --> 00:08:03.395
You can read this
code and say, oh,

00:08:03.395 --> 00:08:05.519
yeah, those first two or
three options are disabled

00:08:05.519 --> 00:08:07.625
and that last one
should be selected.

00:08:07.625 --> 00:08:09.750
So the important thing here
is it's still declared.

00:08:09.750 --> 00:08:12.730
We're not writing new script
to set this or render anything.

00:08:12.730 --> 00:08:15.360
It's literally just markup.

00:08:15.360 --> 00:08:17.797
Selecty's super
excited about that.

00:08:17.797 --> 00:08:20.130
We can ultimately change the
way this thing behaves just

00:08:20.130 --> 00:08:21.296
by using attributes as well.

00:08:21.296 --> 00:08:25.086
If you move attributes up to
the select tag-- give it a size,

00:08:25.086 --> 00:08:26.960
give it multiple
attributes-- we don't really

00:08:26.960 --> 00:08:28.168
even let you have a dropdown.

00:08:28.168 --> 00:08:30.620
We have this multi-select
widget which is really cool.

00:08:30.620 --> 00:08:34.190
So depending on how the user
wants to interact with this,

00:08:34.190 --> 00:08:35.970
we can totally-- you
can represent itself

00:08:35.970 --> 00:08:36.960
in different ways.

00:08:36.960 --> 00:08:38.309
And again, that's all
transparent to us.

00:08:38.309 --> 00:08:39.809
We don't know how
this is happening,

00:08:39.809 --> 00:08:42.100
but it's just happening.

00:08:42.100 --> 00:08:43.337
You can compose elements.

00:08:43.337 --> 00:08:44.670
So what does that actually mean?

00:08:44.670 --> 00:08:46.310
Well, select rate
it takes options,

00:08:46.310 --> 00:08:47.829
like you saw in
the last example,

00:08:47.829 --> 00:08:49.120
but it also does smarter stuff.

00:08:49.120 --> 00:08:51.170
You can give it an
optgroup element,

00:08:51.170 --> 00:08:54.899
and it itself can be
configured via attributes.

00:08:54.899 --> 00:08:56.440
So now, exactly as
you'd expect, this

00:08:56.440 --> 00:08:58.731
does something different
based on the children elements

00:08:58.731 --> 00:08:59.610
it gets.

00:08:59.610 --> 00:09:02.410
So now we have groupings
instead of just a straight drop

00:09:02.410 --> 00:09:06.850
down list you could
also take this and put

00:09:06.850 --> 00:09:08.280
in an entirely
different context.

00:09:08.280 --> 00:09:11.420
I can take my select, which
is a component essentially,

00:09:11.420 --> 00:09:13.189
and if I put that
in a form element,

00:09:13.189 --> 00:09:14.980
this thing knows--
somehow the browser know

00:09:14.980 --> 00:09:16.938
that it's going to get
submitted with this form

00:09:16.938 --> 00:09:20.190
and it's going to include the
value that the user's chosen.

00:09:20.190 --> 00:09:23.149
So what she's telling
us, in different contexts

00:09:23.149 --> 00:09:24.690
it takes on different
responsibility,

00:09:24.690 --> 00:09:28.820
so it's composable in
different contexts.

00:09:28.820 --> 00:09:30.920
But not everything
makes sense in markup.

00:09:30.920 --> 00:09:32.937
Certainly I'm not arguing that.

00:09:32.937 --> 00:09:34.520
In certain cases,
you're going to want

00:09:34.520 --> 00:09:36.139
to respond to certain
events, right?

00:09:36.139 --> 00:09:37.930
This element happens
to fire a change event

00:09:37.930 --> 00:09:39.388
with something
interesting happens.

00:09:39.388 --> 00:09:42.390
Which is when the user
selects a new option.

00:09:42.390 --> 00:09:44.850
It exposes properties
on its DOM interface

00:09:44.850 --> 00:09:46.717
that don't really
make sense in markup.

00:09:46.717 --> 00:09:49.050
You don't really think about
a selected index in markup.

00:09:49.050 --> 00:09:51.490
What does that-- what would
that even look like or mean?

00:09:51.490 --> 00:09:53.740
But you should be able to
poke at that maybe and tweak

00:09:53.740 --> 00:09:55.752
in JavaScript to do
something interesting.

00:09:55.752 --> 00:09:57.710
So the properties and
methods, it fires events.

00:09:57.710 --> 00:09:59.730
These are really, really
core things to what

00:09:59.730 --> 00:10:04.212
the bare bones elements
gave us at the time.

00:10:04.212 --> 00:10:04.920
So what happened?

00:10:04.920 --> 00:10:05.800
This sounds pretty good.

00:10:05.800 --> 00:10:07.140
I don't know if it
sounds good to you guys,

00:10:07.140 --> 00:10:08.390
but this is super easy to use.

00:10:08.390 --> 00:10:11.202
I can read all that code and
know exactly what's going on.

00:10:11.202 --> 00:10:13.690
Well, this happened.

00:10:13.690 --> 00:10:15.460
This mess happened.

00:10:15.460 --> 00:10:17.810
This is an example of
opening DevTools and seeing

00:10:17.810 --> 00:10:18.850
what Gmail looks like.

00:10:18.850 --> 00:10:22.580
One of the most complex
web applications out there.

00:10:22.580 --> 00:10:25.810
And what happened was that
the HTML markup actually

00:10:25.810 --> 00:10:27.530
didn't keep up with the time.

00:10:27.530 --> 00:10:30.737
It didn't-- it wasn't expressive
enough for us developers

00:10:30.737 --> 00:10:33.320
to actually describe the complex
applications we were starting

00:10:33.320 --> 00:10:34.960
to build on the web.

00:10:34.960 --> 00:10:37.900
So you end up with div
soup, and that's OK.

00:10:37.900 --> 00:10:39.150
This has gotten us pretty far.

00:10:39.150 --> 00:10:42.740
But can anybody read this and
they know what's going on?

00:10:42.740 --> 00:10:45.160
I mean, maybe to
purposely obfuscate it,

00:10:45.160 --> 00:10:46.269
but I certainly can't.

00:10:46.269 --> 00:10:48.810
It's not maintainable, you don't
know what's going on, if you

00:10:48.810 --> 00:10:52.532
can't-- its not descriptive
or semantic in any way.

00:10:52.532 --> 00:10:53.990
And on the other
side of the fence,

00:10:53.990 --> 00:10:56.140
this is a Google+
web application,

00:10:56.140 --> 00:10:58.970
we just wrote just a
crap-ton of JavaScript,

00:10:58.970 --> 00:11:00.620
I'll be completely honest.

00:11:00.620 --> 00:11:02.870
This is the only thing
we had, as a tool,

00:11:02.870 --> 00:11:05.570
to actually get the job done.

00:11:05.570 --> 00:11:08.832
So we're in a sad,
sad state of affairs.

00:11:08.832 --> 00:11:10.290
It's not just
complex applications.

00:11:10.290 --> 00:11:12.820
If you take a look at, I think,
the quintessential example

00:11:12.820 --> 00:11:14.500
of a component-- a
tab component, right?

00:11:14.500 --> 00:11:16.947
Just a bazillion tab
components out there.

00:11:16.947 --> 00:11:18.280
This is what happened over time.

00:11:18.280 --> 00:11:19.910
So we had a bunch of markup.

00:11:19.910 --> 00:11:22.436
We annotated it with
some IDs or something.

00:11:22.436 --> 00:11:24.560
And at the bottom, we wrote
a little bit of script.

00:11:24.560 --> 00:11:26.960
Just a little bit to say,
hey, render this thing

00:11:26.960 --> 00:11:28.950
that I just threw
together as a tab somehow.

00:11:28.950 --> 00:11:30.590
And it worked, right?

00:11:30.590 --> 00:11:32.430
And over time, what
progressively happened

00:11:32.430 --> 00:11:35.840
was each framework and library
and author just developed

00:11:35.840 --> 00:11:38.310
different ways to do
the exact same thing.

00:11:38.310 --> 00:11:41.130
So this is five different
ways to build a tab component.

00:11:41.130 --> 00:11:43.890
Every API is different Every
way to do it is different.

00:11:43.890 --> 00:11:45.700
As a developer,
I have to learn--

00:11:45.700 --> 00:11:49.100
I have to buy and learn
this new API in a way

00:11:49.100 --> 00:11:50.870
to do something when,
ultimately, what I

00:11:50.870 --> 00:11:53.460
want is just a standard
way to create components.

00:11:53.460 --> 00:11:56.020
So that is what Web
Components is all about.

00:11:56.020 --> 00:11:57.990
The ability to actually
create a new element,

00:11:57.990 --> 00:12:00.440
say x-tabs, make
it composable, make

00:12:00.440 --> 00:12:02.290
it configurable via
attributes, tell

00:12:02.290 --> 00:12:04.010
the browser about
this new thing.

00:12:04.010 --> 00:12:07.170
And, as a user, who knows
what this is supposed to do?

00:12:07.170 --> 00:12:08.822
Maybe it's not
obvious, but I think

00:12:08.822 --> 00:12:10.530
it's supposed to be
a tabs widget, right?

00:12:10.530 --> 00:12:12.404
And it's super descriptive
and you absolutely

00:12:12.404 --> 00:12:13.950
know, just by
looking at the code,

00:12:13.950 --> 00:12:17.994
just by looking at the markup,
what it's supposed to do.

00:12:17.994 --> 00:12:18.910
So that's the example.

00:12:18.910 --> 00:12:21.409
Let's take a look at,
actually, a real example.

00:12:21.409 --> 00:12:23.450
The Polymer team through
together this Google Map

00:12:23.450 --> 00:12:23.990
element.

00:12:23.990 --> 00:12:28.874
And, how many people-- who
can guess what this does?

00:12:28.874 --> 00:12:30.540
I don't even need to
describe it to you.

00:12:30.540 --> 00:12:32.010
But I'll tell you what it does,
I'll show you what it does.

00:12:32.010 --> 00:12:33.800
It renders a map, right?

00:12:33.800 --> 00:12:35.750
It uses the maps
API under the hood,

00:12:35.750 --> 00:12:38.060
but as a user of this
thing, all that I do

00:12:38.060 --> 00:12:40.120
is just declare the on my page.

00:12:40.120 --> 00:12:41.172
That's pretty sweet.

00:12:41.172 --> 00:12:43.255
I don't have to know the
complexities of that API,

00:12:43.255 --> 00:12:44.713
I don't have to
worry about loading

00:12:44.713 --> 00:12:47.420
libraries, going through this
callback dances, all of that

00:12:47.420 --> 00:12:49.150
is totally transparent
to me, abstracted

00:12:49.150 --> 00:12:52.350
away inside of this component.

00:12:52.350 --> 00:12:54.180
Again, just an
example of select,

00:12:54.180 --> 00:12:56.320
we can configure this
to take attributes.

00:12:56.320 --> 00:12:58.870
So same rules apply
to custom elements.

00:12:58.870 --> 00:13:01.370
This map element, when we you
give it a lat and a longitude,

00:13:01.370 --> 00:13:05.450
it knows under the hood to call
the map's API center itself,

00:13:05.450 --> 00:13:07.971
and that's exactly
what you see there.

00:13:07.971 --> 00:13:09.720
It's got a zoom attribute
that we give it,

00:13:09.720 --> 00:13:12.470
so it knows to zoom at
level 15 when you set that

00:13:12.470 --> 00:13:16.010
on the attributes and
declare that on your page.

00:13:16.010 --> 00:13:17.390
This thing is composable.

00:13:17.390 --> 00:13:19.110
So, inside the
Google Map element,

00:13:19.110 --> 00:13:21.222
I can stick Google
map marker tags.

00:13:21.222 --> 00:13:23.680
And this map element, it knows
how to deal with those tags.

00:13:23.680 --> 00:13:25.600
It knows that it
should place a map

00:13:25.600 --> 00:13:28.720
marker at this
lat and this long.

00:13:28.720 --> 00:13:30.450
What's also cool
about this is I'm

00:13:30.450 --> 00:13:32.950
using other parts of the
platform that already exists.

00:13:32.950 --> 00:13:35.340
So, the title attribute, right?

00:13:35.340 --> 00:13:37.120
This is a standard
HTML attribute.

00:13:37.120 --> 00:13:40.260
I can use that since we're
just talking HTML and DOM-- can

00:13:40.260 --> 00:13:42.260
use that on my own
custom elements as well.

00:13:42.260 --> 00:13:44.620
You can see when I mouse
over this map marker,

00:13:44.620 --> 00:13:46.770
it has the title home,
just as you expect, right?

00:13:46.770 --> 00:13:49.144
So I'm using parts of the
platforms that already existed.

00:13:49.144 --> 00:13:52.310
I don't have to reinvent
the wheel every time.

00:13:52.310 --> 00:13:54.060
HTML5 drag-and-drop
is an absolutely mess.

00:13:54.060 --> 00:13:56.891
I hate it, but you can actually
reuse it in this case as well.

00:13:56.891 --> 00:13:57.640
It's kind of cool.

00:13:57.640 --> 00:14:00.590
You can respond to the
draggable attribute.

00:14:00.590 --> 00:14:03.860
And if it's true right under
the hood you can drag this pin,

00:14:03.860 --> 00:14:06.110
and the back's API, of
course, is doing the work,

00:14:06.110 --> 00:14:09.250
but I don't need to know that
as a user of this component.

00:14:09.250 --> 00:14:11.320
I just rocked declarative
option, and boom,

00:14:11.320 --> 00:14:13.420
I get the maps API.

00:14:13.420 --> 00:14:15.950
Of course, you can add
further markup to this page

00:14:15.950 --> 00:14:18.542
and it knows what to
adjust to the children.

00:14:18.542 --> 00:14:20.500
A really common thing to
do actually in the API

00:14:20.500 --> 00:14:22.890
that I wanted to
do for this demo is

00:14:22.890 --> 00:14:24.627
as I add more markers
to this map owner,

00:14:24.627 --> 00:14:26.335
I want to send her
those in the viewport.

00:14:26.335 --> 00:14:28.043
And that's actually
a pretty common thing

00:14:28.043 --> 00:14:30.480
to do in the map's API if you
guys ever played with it. ad

00:14:30.480 --> 00:14:32.750
But it's a little
bit of boiler code,

00:14:32.750 --> 00:14:35.420
and I had to actually
go and reread that stuff

00:14:35.420 --> 00:14:37.159
and figure out how
to do that again.

00:14:37.159 --> 00:14:39.200
So, instead what could
happen, if I have a marker

00:14:39.200 --> 00:14:42.240
off the screen, I can expose
that as sort of a way for users

00:14:42.240 --> 00:14:43.400
to configure this thing.

00:14:43.400 --> 00:14:46.510
So when I have the shrink
to markers attribute on,

00:14:46.510 --> 00:14:47.770
somebody declared that.

00:14:47.770 --> 00:14:50.405
The map just knows-- and you
totally can't see it, sorry.

00:14:50.405 --> 00:14:51.450
It's off-screen.

00:14:51.450 --> 00:14:53.600
But it just knows to
center those two markers

00:14:53.600 --> 00:14:55.040
on the screen.

00:14:55.040 --> 00:14:57.190
And of course, if I add
new ones-- in this case,

00:14:57.190 --> 00:14:59.190
you can see the dead
center of the map.

00:14:59.190 --> 00:15:02.080
So, again, just by declaritively
configuring this custom

00:15:02.080 --> 00:15:04.290
element, the map knows
what to do under the hood

00:15:04.290 --> 00:15:06.580
and that's really,
really powerful.

00:15:06.580 --> 00:15:09.440
So this could be the future
of how you use Google Maps.

00:15:09.440 --> 00:15:12.910
At least I think
it's really exciting.

00:15:12.910 --> 00:15:15.790
So what does this all enable.

00:15:15.790 --> 00:15:16.820
You've see it, right?

00:15:16.820 --> 00:15:19.445
You can be declarative again, we
can use HTML to a [INAUDIBLE].

00:15:19.445 --> 00:15:21.962
We kind of pushed HTML under
the carpet for a long time,

00:15:21.962 --> 00:15:23.545
but we can actually
rise it up, and it

00:15:23.545 --> 00:15:24.878
can rise up to the occasion now.

00:15:24.878 --> 00:15:27.520
We can make it do whatever we
want, which is really cool.

00:15:27.520 --> 00:15:28.460
Things are composable.

00:15:28.460 --> 00:15:30.176
In different contexts, you
can take a component here

00:15:30.176 --> 00:15:31.370
and a component here.

00:15:31.370 --> 00:15:33.820
Mash them together to
form a larger application.

00:15:33.820 --> 00:15:35.956
So, again, you're not
reinventing the wheel

00:15:35.956 --> 00:15:37.330
every time, you're
building stuff

00:15:37.330 --> 00:15:40.200
and reusing stuff
somebody else has done.

00:15:40.200 --> 00:15:41.800
Scoping-- this is huge.

00:15:41.800 --> 00:15:44.660
CSS scoping, the ability to
actually define a component

00:15:44.660 --> 00:15:47.820
with a section of CSS,
and not have it bleed out

00:15:47.820 --> 00:15:50.561
or things bleed in, we've
never had that before.

00:15:50.561 --> 00:15:52.560
And it's totally different
than the IFrame, too.

00:15:52.560 --> 00:15:54.915
IFrames are crazy
complex and it's overhead

00:15:54.915 --> 00:15:56.722
and it's hard to script into.

00:15:56.722 --> 00:15:57.680
This is awesome, right?

00:15:57.680 --> 00:16:00.980
You get CSS in capsulation,
DOM in capsulation,

00:16:00.980 --> 00:16:04.490
and the ability to find an
API on a per-component basis.

00:16:04.490 --> 00:16:06.970
So we're not building apps
in this global context

00:16:06.970 --> 00:16:09.380
anymore where you've
thrown in libraries here,

00:16:09.380 --> 00:16:11.530
JavaScript there,
and CSS over here.

00:16:11.530 --> 00:16:13.460
You actually can
think about how--

00:16:13.460 --> 00:16:15.280
like what is the
functionality you need

00:16:15.280 --> 00:16:18.530
and how to get that job done.

00:16:18.530 --> 00:16:21.090
So there's a lot of totally new
ways to develop for the web.

00:16:21.090 --> 00:16:23.570
The first mind-bending
thing that I

00:16:23.570 --> 00:16:26.660
had a wrap my head around was
it's a new way to use HTML.

00:16:26.660 --> 00:16:30.140
And I think you've probably seen
some examples there already.

00:16:30.140 --> 00:16:32.130
Well let's take a look
at what exists today

00:16:32.130 --> 00:16:34.180
and then compare it to tomorrow.

00:16:34.180 --> 00:16:35.760
So if you think
about HTML elements,

00:16:35.760 --> 00:16:38.170
this is the standard kind
of stuff it is today.

00:16:38.170 --> 00:16:39.660
You have things
like input, right?

00:16:39.660 --> 00:16:40.770
You have the select.

00:16:40.770 --> 00:16:42.347
We saw these before.

00:16:42.347 --> 00:16:43.930
The progress tag,
this is pretty cool.

00:16:43.930 --> 00:16:46.110
You get a little
rendering little progress

00:16:46.110 --> 00:16:47.980
bar for free from the browser.

00:16:47.980 --> 00:16:50.720
Text area button video controls.

00:16:50.720 --> 00:16:53.430
All of these render
UI to the screen.

00:16:53.430 --> 00:16:56.380
Something that users of
your website would see.

00:16:56.380 --> 00:16:59.034
But there's this whole sort
of other side to elements

00:16:59.034 --> 00:17:00.950
that people don't really
think about too much,

00:17:00.950 --> 00:17:03.219
and it's really things
that developers see a lot.

00:17:03.219 --> 00:17:05.510
These are all elements--
these are examples of elements

00:17:05.510 --> 00:17:07.637
that don't actually
render any UI.

00:17:07.637 --> 00:17:08.470
But what do they do?

00:17:08.470 --> 00:17:09.349
They provide utility.

00:17:09.349 --> 00:17:10.250
They do something.

00:17:10.250 --> 00:17:13.790
We use them for some reason
on our page and in our app.

00:17:13.790 --> 00:17:15.250
They don't actually
show anything.

00:17:15.250 --> 00:17:18.710
So, for example, like if I
put a script tag in the page,

00:17:18.710 --> 00:17:20.694
the browser knows whatever's
in that script tag

00:17:20.694 --> 00:17:22.819
it's going to evaluate its
JavaScript and run that,

00:17:22.819 --> 00:17:23.599
and it does something.

00:17:23.599 --> 00:17:24.540
It serves a purpose.

00:17:24.540 --> 00:17:26.900
It doesn't actually show
anything to the user.

00:17:26.900 --> 00:17:29.400
And we could totally do the
same thing with custom elements,

00:17:29.400 --> 00:17:29.900
right?

00:17:29.900 --> 00:17:32.520
And this is sort of a
mind-bending thing like I said,

00:17:32.520 --> 00:17:35.196
but we can define-- we can
wrap up pieces of functionality

00:17:35.196 --> 00:17:36.820
that we're used to
using in JavaScript,

00:17:36.820 --> 00:17:39.450
and actually provide a
declarative way to interact

00:17:39.450 --> 00:17:42.601
with those services, those
APIs, and those libraries.

00:17:42.601 --> 00:17:45.100
Really good example that we put
together on the Polymer team

00:17:45.100 --> 00:17:47.260
was the core-ajax components.

00:17:47.260 --> 00:17:49.950
I never have to write
boilerplate Ajax code again.

00:17:49.950 --> 00:17:52.110
I just put this on the
page and I can use it.

00:17:52.110 --> 00:17:55.430
I give it a URL, configure
it to be an attribute again.

00:17:55.430 --> 00:17:58.070
I respond to some events, I'm
using my same bag of tricks,

00:17:58.070 --> 00:17:58.780
right?

00:17:58.780 --> 00:18:01.300
Querying the DOM, query
selector, and event listener--

00:18:01.300 --> 00:18:04.680
this is the stuff I know how
to do as a web developer.

00:18:04.680 --> 00:18:06.430
And the other example
here is geolocation.

00:18:06.430 --> 00:18:08.970
I don't have to do a
crazy callback [INAUDIBLE]

00:18:08.970 --> 00:18:10.520
I can wrap all that magic up.

00:18:10.520 --> 00:18:14.930
Inside, an implementation detail
is totally transparent to me.

00:18:14.930 --> 00:18:16.780
So non-visual custom elements.

00:18:16.780 --> 00:18:18.320
That's pretty cool.

00:18:18.320 --> 00:18:19.102
Interoperability.

00:18:19.102 --> 00:18:21.060
Maybe people don't care
about interoperability,

00:18:21.060 --> 00:18:22.990
but it's actually
the first time we

00:18:22.990 --> 00:18:26.590
can have proper
interoperability on the web.

00:18:26.590 --> 00:18:28.290
And I call it on by default.

00:18:28.290 --> 00:18:31.940
So you get it for free if you
buy into this component model.

00:18:31.940 --> 00:18:34.480
The fact that we're speaking
HTML team on DOM again.

00:18:34.480 --> 00:18:36.379
Every framework, every
library, out there

00:18:36.379 --> 00:18:38.920
on the planet, every developer
that has ever touched anything

00:18:38.920 --> 00:18:41.760
on the web knows HTML5
and knows about DOM.

00:18:41.760 --> 00:18:44.080
So it speaks that same language.

00:18:44.080 --> 00:18:46.470
So what you can do is you
can pose different elements

00:18:46.470 --> 00:18:48.280
together from all
over the place.

00:18:48.280 --> 00:18:50.660
The x-tag's x-flip box
element, for instance.

00:18:50.660 --> 00:18:53.857
I can put inside of
that a Polymer element.

00:18:53.857 --> 00:18:55.440
And it's important
to know, it doesn't

00:18:55.440 --> 00:18:57.900
matter that this element was
implemented using Polymer

00:18:57.900 --> 00:18:59.817
and the other one is
implemented using x-tags.

00:18:59.817 --> 00:19:01.983
The fact that they can
actually talk to each other--

00:19:01.983 --> 00:19:03.450
because it's all
just DOM and it's

00:19:03.450 --> 00:19:05.630
always HTML under the hood.

00:19:05.630 --> 00:19:07.170
And then you can
use the same things

00:19:07.170 --> 00:19:08.890
you use all over the place.

00:19:08.890 --> 00:19:11.410
JQuery or querying the DOM,
or adding event listeners.

00:19:11.410 --> 00:19:13.410
The stuff that we already
know as web developers

00:19:13.410 --> 00:19:17.360
we can translate
into this new world.

00:19:17.360 --> 00:19:18.670
DevTools support.

00:19:18.670 --> 00:19:21.060
OMG, this is huge.

00:19:21.060 --> 00:19:22.764
The tools know DOM.

00:19:22.764 --> 00:19:24.680
The DevTools are really
good about DOM, right?

00:19:24.680 --> 00:19:27.150
There's all this
power in the DevTools.

00:19:27.150 --> 00:19:30.290
this is an example from our
home page, apolloproject.org.

00:19:30.290 --> 00:19:32.340
It's a little tabs component.

00:19:32.340 --> 00:19:34.990
When you click these tabs,
it changes the code snippet.

00:19:34.990 --> 00:19:37.590
Really, really kind of
a trivial component.

00:19:37.590 --> 00:19:41.260
But what's really neat is I
can query, I can open DevTools,

00:19:41.260 --> 00:19:44.770
and since we're talking HTML
in DOM, it's all DOM-based,

00:19:44.770 --> 00:19:46.880
I can drill at this and
I can inspect elements

00:19:46.880 --> 00:19:51.190
and I can use the tools to
my advantage to debug issues.

00:19:51.190 --> 00:19:54.000
I can bring up the console
and actually do live coding,

00:19:54.000 --> 00:19:55.970
and query select
different things,

00:19:55.970 --> 00:19:58.600
and change attribute
properties, and, as you can see,

00:19:58.600 --> 00:20:01.230
I can update the selected
property under the hood.

00:20:01.230 --> 00:20:03.940
So everything's live
because it's all in the DOM

00:20:03.940 --> 00:20:06.371
and it's all just
speaking JavaScript.

00:20:06.371 --> 00:20:08.870
I can use the DevTools to change
the styles of this element,

00:20:08.870 --> 00:20:09.370
too.

00:20:09.370 --> 00:20:11.670
Because it's just, again,
she's marked up the DevTools

00:20:11.670 --> 00:20:14.120
and the browser knows
how to handle that stuff.

00:20:14.120 --> 00:20:15.230
So this is really cool.

00:20:15.230 --> 00:20:17.780
With other stuff out there,
it's been notoriously

00:20:17.780 --> 00:20:20.240
hard to do things like
this because it's all just

00:20:20.240 --> 00:20:22.180
a first class citizen
in the browser.

00:20:22.180 --> 00:20:24.930
Now you've told the browser
about this demo tabs element,

00:20:24.930 --> 00:20:27.930
and it knows how
to deal with that.

00:20:27.930 --> 00:20:29.117
Sensibility.

00:20:29.117 --> 00:20:30.950
I'm going to go through
this really quickly,

00:20:30.950 --> 00:20:32.737
but you saw the maps example.

00:20:32.737 --> 00:20:34.570
I actually didn't build
that maps component.

00:20:34.570 --> 00:20:36.650
There was a component out
there that somebody had built.

00:20:36.650 --> 00:20:37.983
It rendered a map to the screen.

00:20:37.983 --> 00:20:40.290
It had nothing to do--
it had no idea about how

00:20:40.290 --> 00:20:41.140
to render markers.

00:20:41.140 --> 00:20:43.990
But I said, hey, it makes sense
to put markers on a Google Map,

00:20:43.990 --> 00:20:47.199
so we should combine that.

00:20:47.199 --> 00:20:49.740
So, in Polymer, it's really easy
to-- and in custom elements,

00:20:49.740 --> 00:20:51.156
it's really easy
to extend it now.

00:20:51.156 --> 00:20:53.355
Just say, hey, extend
the Google Map tag.

00:20:53.355 --> 00:20:56.740
And I'm going to create a new
tag called map with markers.

00:20:56.740 --> 00:20:59.510
And I'm going to give it
a new API, add to the API

00:20:59.510 --> 00:21:01.760
that somebody else gave me,
I'm going to inherit that.

00:21:01.760 --> 00:21:02.725
I'm going to
inherit its UI, it's

00:21:02.725 --> 00:21:04.130
going to render my map for me.

00:21:04.130 --> 00:21:06.910
But I'm just going to
be able to stick the map

00:21:06.910 --> 00:21:07.702
markers on the map.

00:21:07.702 --> 00:21:09.243
So that's really
cool, because again,

00:21:09.243 --> 00:21:10.940
like the message
here is you don't

00:21:10.940 --> 00:21:12.700
have to reinvent the wheel.

00:21:12.700 --> 00:21:15.101
I didn't care how that map's
API-- that map's component

00:21:15.101 --> 00:21:15.600
was made.

00:21:15.600 --> 00:21:18.066
I just start using it.

00:21:18.066 --> 00:21:19.540
All right, so
that's the universe.

00:21:19.540 --> 00:21:21.415
Universe is one that's
declared as composable

00:21:21.415 --> 00:21:22.850
and configured via attributes.

00:21:22.850 --> 00:21:25.487
And it's using events
and its using DOM.

00:21:25.487 --> 00:21:26.820
I think this is really powerful.

00:21:26.820 --> 00:21:29.884
This is a cool demo that
I'll just play before I go.

00:21:29.884 --> 00:21:32.050
John McCutchan put this
together, it's a WebGL demo,

00:21:32.050 --> 00:21:35.090
and used the Polymer.dart port.

00:21:35.090 --> 00:21:37.860
He's got, basically,
implemented WebGL

00:21:37.860 --> 00:21:40.002
calls using custom
elements and markup.

00:21:40.002 --> 00:21:42.210
So you can see what I'm
doing here is in the DevTools

00:21:42.210 --> 00:21:43.330
since there's first
class support.

00:21:43.330 --> 00:21:45.060
I can edit attributes
and things just

00:21:45.060 --> 00:21:47.175
update magically right
in the WebGL scene.

00:21:47.175 --> 00:21:49.100
I actually know
nothing about WebGL.

00:21:49.100 --> 00:21:50.683
So this is really
cool to me because I

00:21:50.683 --> 00:21:53.910
know everything about
JavaScript and HTML.

00:21:53.910 --> 00:21:57.520
I can go up and change a texture
of one of these 3D spheres just

00:21:57.520 --> 00:22:00.920
by changing an attribute and
it points to a .jpeg file,

00:22:00.920 --> 00:22:03.220
and I can change that
to something else.

00:22:03.220 --> 00:22:06.439
And now, Web Components is
the center of the universe.

00:22:06.439 --> 00:22:08.730
So that's really great,
because he's totally wrapped up

00:22:08.730 --> 00:22:12.420
his library and his complex
stuff, and I can just use it.

00:22:12.420 --> 00:22:13.490
So that's all I got.

00:22:13.490 --> 00:22:15.150
I think this stuff
is really cool.

00:22:15.150 --> 00:22:16.941
I think we should all
componentize the web.

00:22:16.941 --> 00:22:18.940
Let's join the
revolution together.

00:22:18.940 --> 00:22:19.800
That's all for me.

00:22:19.800 --> 00:22:22.092
Feel free to Tweet at me and
talk to me after the show.

00:22:22.092 --> 00:22:23.174
Appreciate the time, guys.

00:22:23.174 --> 00:22:23.750
Thanks.

00:22:23.750 --> 00:22:27.069
[APPLAUSE]

