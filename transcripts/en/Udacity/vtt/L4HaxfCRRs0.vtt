WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:05.380
The most widely used approach to
encrypt a large message is CBC.

00:00:05.380 --> 00:00:08.260
It stands for cipher block chaining.

00:00:08.260 --> 00:00:13.060
In CBC, the input to the encryption
algorithm is the result of

00:00:13.060 --> 00:00:16.940
xoring the previous ciphertext block and
the current plaintext block.

00:00:17.940 --> 00:00:22.780
To encrypt the first plaintext block,
we use a so-called IV,

00:00:22.780 --> 00:00:25.420
stands for initialization vector.

00:00:25.420 --> 00:00:28.107
And we XOR IV with
the plaintext block and

00:00:28.107 --> 00:00:34.085
give the input to the encryption process
to produce the first ciphertext block.

00:00:34.085 --> 00:00:38.160
And then the first ciphertext
block is used to XOR with

00:00:38.160 --> 00:00:42.520
the second plaintext block as
input to the encryption process

00:00:42.520 --> 00:00:45.800
to produce the second ciphertext
block and so on so forth.

00:00:47.010 --> 00:00:51.140
Again in CBC,
the current ciphertext block depends

00:00:51.140 --> 00:00:56.220
not only on the current plaintext block
but also the previous ciphertext block.

00:00:56.220 --> 00:01:00.580
Which in turn depends on not only
the previous plaintext block but

00:01:00.580 --> 00:01:04.140
also the ciphertext block prior to that.

00:01:04.140 --> 00:01:07.945
In other words, in analysis
it is very hard to figure out

00:01:07.945 --> 00:01:12.735
the plaintext block just looking
at the current ciphertext block.

00:01:12.735 --> 00:01:17.400
More importantly, if two plaintext
blocks are exactly the same,

00:01:17.400 --> 00:01:20.877
meaning that they repeat in the same
message or in two different messages,

00:01:20.877 --> 00:01:25.140
their ciphertext blocks
are not likely to be the same.

00:01:25.140 --> 00:01:30.066
In addition, if an attacker attempts to
swap in a different ciphertext block or

00:01:30.066 --> 00:01:33.080
rearrange the orders of
the ciphertext blocks,

00:01:33.080 --> 00:01:38.040
the ciphertext is not going to
decrypt properly into the plaintext.

00:01:38.040 --> 00:01:41.010
Here's how decryption in CBC works.

00:01:41.010 --> 00:01:45.075
A ciphertext block is decrypted,
and then the result is XORed with

00:01:45.075 --> 00:01:49.514
the previous ciphertext block to
produce the current plaintext block.

00:01:49.514 --> 00:01:53.142
For the first ciphertext
block after decryption,

00:01:53.142 --> 00:01:57.794
the result is XORed with Iv to
produce the first plaintext block.

00:01:57.794 --> 00:02:02.560
Therefore, the Iv must be known
to both the sender and receiver.

