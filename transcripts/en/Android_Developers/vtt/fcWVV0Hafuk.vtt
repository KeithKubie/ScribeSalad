WEBVTT
Kind: captions
Language: en

00:00:02.910 --> 00:00:03.660
CHAD BRUBAKER: Hi.

00:00:03.660 --> 00:00:06.247
Let's get started.

00:00:06.247 --> 00:00:06.830
Hi, everybody.

00:00:06.830 --> 00:00:08.650
Welcome to keep it
secret, keep it safe

00:00:08.650 --> 00:00:11.108
where I'm going to talk to you
about protecting the network

00:00:11.108 --> 00:00:12.360
traffic in your application.

00:00:12.360 --> 00:00:15.044
So first of all,
basic introductions.

00:00:15.044 --> 00:00:15.922
I'm Chad Brubaker.

00:00:15.922 --> 00:00:17.880
I'm a Software Engineer
on the Android Security

00:00:17.880 --> 00:00:20.630
Team for about two
years now full time.

00:00:20.630 --> 00:00:22.740
And I was an intern before that.

00:00:22.740 --> 00:00:24.240
There's a picture
of me if you want.

00:00:24.240 --> 00:00:25.701
I'll never show that again.

00:00:25.701 --> 00:00:26.200
OK.

00:00:26.200 --> 00:00:27.866
So what am I going
to talk to you about?

00:00:27.866 --> 00:00:30.350
So first of all, the
very, very high level.

00:00:30.350 --> 00:00:32.170
Like what is TLS?

00:00:32.170 --> 00:00:34.860
And why you should use it
for all your traffic, period,

00:00:34.860 --> 00:00:36.020
everywhere.

00:00:36.020 --> 00:00:38.300
And then I'm going to talk
about what you actually

00:00:38.300 --> 00:00:40.630
have to do to use it on
the client and the harder

00:00:40.630 --> 00:00:42.820
part of actually checking
your work, making sure

00:00:42.820 --> 00:00:44.000
that you're using it.

00:00:44.000 --> 00:00:45.500
And then finally,
we're going to get

00:00:45.500 --> 00:00:48.130
to my personal favorite
part about various mistakes

00:00:48.130 --> 00:00:49.900
and misconfigurations
we've seen.

00:00:49.900 --> 00:00:52.430
Why they happen, why
you shouldn't do them,

00:00:52.430 --> 00:00:53.940
what you should do instead.

00:00:53.940 --> 00:00:58.030
And finally, some time
for questions and answers.

00:00:58.030 --> 00:00:58.820
So all right.

00:00:58.820 --> 00:01:00.340
So TLS.

00:01:00.340 --> 00:01:01.844
First of all, why?

00:01:01.844 --> 00:01:04.260
So why should you even care
about making sure your network

00:01:04.260 --> 00:01:05.360
traffic is secure?

00:01:05.360 --> 00:01:08.230
Well, simple answer is that the
network is not to be trusted.

00:01:08.230 --> 00:01:10.670
And this has always
been true in computing.

00:01:10.670 --> 00:01:12.250
Like this is not new in any way.

00:01:12.250 --> 00:01:14.950
But for mobile devices it's
actually especially true.

00:01:14.950 --> 00:01:16.380
Because think of
your smartphone.

00:01:16.380 --> 00:01:17.550
How many different
networks does it

00:01:17.550 --> 00:01:19.900
connect to in a given day,
different Wi-Fi networks,

00:01:19.900 --> 00:01:21.250
different cellular networks?

00:01:21.250 --> 00:01:24.540
And setting up a Wi-Fi network
takes basically zero effort.

00:01:24.540 --> 00:01:25.040
Right?

00:01:25.040 --> 00:01:29.120
I can go down to a coffee
shop, make an open Wi-Fi called

00:01:29.120 --> 00:01:31.330
super awesome fast
coffee shop Wi-Fi,

00:01:31.330 --> 00:01:33.490
and people will
probably connect to it.

00:01:33.490 --> 00:01:36.594
So it's very easy for this
to happen to smartphones,

00:01:36.594 --> 00:01:38.510
to be on a network that
may be hostile to you.

00:01:38.510 --> 00:01:41.307
And finally, smartphones
are very personal devices

00:01:41.307 --> 00:01:41.890
for all of us.

00:01:41.890 --> 00:01:42.080
Right?

00:01:42.080 --> 00:01:44.159
They contain a lot of
your personal information.

00:01:44.159 --> 00:01:46.450
You use them to transmit a
lot of personal information.

00:01:46.450 --> 00:01:47.530
You do banking.

00:01:47.530 --> 00:01:49.200
You do all these
kinds of things.

00:01:49.200 --> 00:01:51.480
So it's important.

00:01:51.480 --> 00:01:53.400
Now when you think of
sensitive traffic that

00:01:53.400 --> 00:01:55.350
needs to be protected,
there's a couple sort

00:01:55.350 --> 00:01:57.990
of canonical examples that come
to your mind that kind of get

00:01:57.990 --> 00:02:00.120
talked about in
articles and stuff.

00:02:00.120 --> 00:02:01.599
About obviously
sensitive traffic

00:02:01.599 --> 00:02:03.140
that you think, oh
yeah, I definitely

00:02:03.140 --> 00:02:06.830
don't want a random person
messing with it, seeing it.

00:02:06.830 --> 00:02:08.150
So very basic examples.

00:02:08.150 --> 00:02:08.650
Right?

00:02:08.650 --> 00:02:10.900
I shouldn't be able to see
the log in for your banking

00:02:10.900 --> 00:02:12.160
account.

00:02:12.160 --> 00:02:13.990
You probably don't want that.

00:02:13.990 --> 00:02:16.320
Likewise, I shouldn't be able
to see your credit cards.

00:02:16.320 --> 00:02:18.080
If you're sending
private photos,

00:02:18.080 --> 00:02:19.520
shouldn't be able to see that.

00:02:19.520 --> 00:02:22.350
And not only just kind of
eavesdropping, but also

00:02:22.350 --> 00:02:23.570
modifications.

00:02:23.570 --> 00:02:25.820
So you wouldn't want someone
to say replace the e-mail

00:02:25.820 --> 00:02:27.611
to your boss saying,
yeah, I can totally do

00:02:27.611 --> 00:02:28.880
that thing you asked me to do.

00:02:28.880 --> 00:02:30.880
And just modify that to
be like, no, I hate you.

00:02:30.880 --> 00:02:32.644
I quit.

00:02:32.644 --> 00:02:33.310
Don't want that.

00:02:33.310 --> 00:02:35.310
That would obviously be bad.

00:02:35.310 --> 00:02:37.337
Sensitive web
traffic, health, these

00:02:37.337 --> 00:02:39.170
are sort of all of the
examples that kind of

00:02:39.170 --> 00:02:41.820
come to mind when you think what
is traffic off my device that

00:02:41.820 --> 00:02:43.560
needs to be secure.

00:02:43.560 --> 00:02:44.060
OK.

00:02:44.060 --> 00:02:45.440
But what if you don't do that?

00:02:45.440 --> 00:02:48.310
So thought experiment that I
always hear is a food blog.

00:02:48.310 --> 00:02:52.170
So I run "Chad's Stupid Food
Blog" full of really bad advice

00:02:52.170 --> 00:02:52.900
about food.

00:02:52.900 --> 00:02:54.600
Should I still
secure my traffic?

00:02:54.600 --> 00:02:55.499
It's about food.

00:02:55.499 --> 00:02:56.040
No one cares.

00:02:56.040 --> 00:02:57.420
It's not sensitive.

00:02:57.420 --> 00:02:57.920
Yes.

00:02:57.920 --> 00:02:59.820
You should still
secure your traffic.

00:02:59.820 --> 00:03:03.290
For two reasons, I mean,
first of all, it's 2015.

00:03:03.290 --> 00:03:04.790
Just do it.

00:03:04.790 --> 00:03:08.450
And second, it's 2015.

00:03:08.450 --> 00:03:09.840
I'm done.

00:03:09.840 --> 00:03:12.830
Secondly, even if the content
isn't directly sensitive

00:03:12.830 --> 00:03:15.230
that doesn't mean you can't
do any bad things with it

00:03:15.230 --> 00:03:15.940
as an attacker.

00:03:15.940 --> 00:03:21.020
So the first and sort of most, I
guess, nuclear approach is even

00:03:21.020 --> 00:03:22.830
completely harmless
content, say I have

00:03:22.830 --> 00:03:24.230
an exploit for your browser.

00:03:24.230 --> 00:03:25.570
And I'm a bad guy.

00:03:25.570 --> 00:03:29.000
Even if the only HTTP page you
go to is my crappy food blog,

00:03:29.000 --> 00:03:32.000
I can go, you know, modify the
traffic, inject that exploit.

00:03:32.000 --> 00:03:34.090
And that's my route
to get on your device.

00:03:34.090 --> 00:03:36.470
Sort of more in general
kind of modifying content

00:03:36.470 --> 00:03:37.430
in subtle ways.

00:03:37.430 --> 00:03:39.500
For the food blog, this
probably doesn't matter.

00:03:39.500 --> 00:03:44.011
Change my really awful
recipe to maybe less awful.

00:03:44.011 --> 00:03:45.510
But, you know, say
you're Wikipedia.

00:03:45.510 --> 00:03:48.070
You know, slight
tweaks to history.

00:03:48.070 --> 00:03:49.550
These kinds of things.

00:03:49.550 --> 00:03:51.470
And sort of on that
front what actually

00:03:51.470 --> 00:03:55.360
impacts developers a lot is
replacing things like ads.

00:03:55.360 --> 00:03:57.850
So you have all these
costs for running

00:03:57.850 --> 00:04:00.040
your servers, your
backends, bandwidth.

00:04:00.040 --> 00:04:01.590
And you offset that through ads.

00:04:01.590 --> 00:04:02.090
OK.

00:04:02.090 --> 00:04:02.610
Sounds good.

00:04:02.610 --> 00:04:04.100
That's how the internet works.

00:04:04.100 --> 00:04:08.160
But if I go in and I replace
those ads with ads that pay me,

00:04:08.160 --> 00:04:08.980
right, that's bad.

00:04:08.980 --> 00:04:10.380
You're now eating all the costs.

00:04:10.380 --> 00:04:13.619
And someone else is
actually getting the money.

00:04:13.619 --> 00:04:14.410
That kind of thing.

00:04:14.410 --> 00:04:16.209
And finally, tracking
and snooping.

00:04:16.209 --> 00:04:17.054
Right?

00:04:17.054 --> 00:04:18.720
If I'm the only person
in the world that

00:04:18.720 --> 00:04:22.140
goes to my food blog, which is
likely true, then simply seeing

00:04:22.140 --> 00:04:24.550
that, oh, this phone
connected to this food blog

00:04:24.550 --> 00:04:26.680
means I know that phone is Chad.

00:04:26.680 --> 00:04:28.880
So that's not good.

00:04:28.880 --> 00:04:32.120
And sort of the overall goal
in general is that the network

00:04:32.120 --> 00:04:34.750
cannot affect the security of
your device or your data in any

00:04:34.750 --> 00:04:35.020
way.

00:04:35.020 --> 00:04:36.520
The network can
always block traffic

00:04:36.520 --> 00:04:38.304
and always refused
to do things for you.

00:04:38.304 --> 00:04:40.220
But it shouldn't be able
to hurt your security

00:04:40.220 --> 00:04:42.050
in any reasonable way.

00:04:42.050 --> 00:04:44.300
And this is what TLS is for.

00:04:44.300 --> 00:04:47.330
So TLS is Transport
Layer Security.

00:04:47.330 --> 00:04:48.485
Is previously known as SSL.

00:04:48.485 --> 00:04:49.860
So if you hear
these two, they're

00:04:49.860 --> 00:04:53.640
sort of-- they're used
kind of interchangeably.

00:04:53.640 --> 00:04:57.840
So the way it worked was you had
SSLv1, v2, v3, TLS1.0, TLS1.1,

00:04:57.840 --> 00:05:00.270
TLS1.1, TLS1.2.

00:05:00.270 --> 00:05:02.350
So it's used interchangeably.

00:05:02.350 --> 00:05:04.510
I'll probably even
say SSL a bunch.

00:05:04.510 --> 00:05:05.620
You know, same thing.

00:05:05.620 --> 00:05:07.030
And it's used with any protocol.

00:05:07.030 --> 00:05:08.430
It wraps whatever you want.

00:05:08.430 --> 00:05:10.980
So HTTPS is HTTP over TLS.

00:05:10.980 --> 00:05:14.677
You know, SMTP and
IMAP have STARTTLS,

00:05:14.677 --> 00:05:15.760
all these kinds of things.

00:05:15.760 --> 00:05:17.343
It's completely
generic to a protocol.

00:05:17.343 --> 00:05:19.540
You can use it for
whatever you want.

00:05:19.540 --> 00:05:21.830
And it gives you an
end-and-end secure channel

00:05:21.830 --> 00:05:22.677
between two peers.

00:05:22.677 --> 00:05:25.010
And you get two very important
things from that channel.

00:05:25.010 --> 00:05:26.039
You get integrity.

00:05:26.039 --> 00:05:27.580
So you know if anyone
goes and messes

00:05:27.580 --> 00:05:29.030
with the data in
that connection.

00:05:29.030 --> 00:05:30.946
You know about it,
so you can basically

00:05:30.946 --> 00:05:32.820
throw your hands in the
air and say, I'm out.

00:05:32.820 --> 00:05:35.380
And confidentiality,
so only those two peers

00:05:35.380 --> 00:05:37.730
actually see the data
that's being transmitted.

00:05:37.730 --> 00:05:40.776
Now the hard part
is often making sure

00:05:40.776 --> 00:05:42.400
that the peer that
you're connecting to

00:05:42.400 --> 00:05:44.604
is the peer you
meant to connect to.

00:05:44.604 --> 00:05:46.020
And we'll actually
talk about that

00:05:46.020 --> 00:05:48.940
later in more detail when I get
to the pitfalls and mistakes.

00:05:48.940 --> 00:05:50.820
But the good news
there is that generally

00:05:50.820 --> 00:05:53.950
on all modern platforms,
it's safe by default.

00:05:53.950 --> 00:05:55.160
So you just use it.

00:05:55.160 --> 00:05:59.170
That whole peer complexity
is kind of handled for you.

00:05:59.170 --> 00:06:01.120
Life is pretty good.

00:06:01.120 --> 00:06:02.400
So using TLS.

00:06:02.400 --> 00:06:05.520
This is actually the shortest
part of this whole talk.

00:06:05.520 --> 00:06:07.980
So if you're using HTTP,
it is actually just

00:06:07.980 --> 00:06:10.400
as simple as rewriting
the URL to HTTPS.

00:06:10.400 --> 00:06:11.150
And it just works.

00:06:11.150 --> 00:06:15.000
The same standard libraries
you use, just keep working.

00:06:15.000 --> 00:06:17.010
If you're using
an URL connection,

00:06:17.010 --> 00:06:18.730
it's just a simple
letter replace.

00:06:18.730 --> 00:06:20.940
And generally for most
HTTP clients it's the same.

00:06:20.940 --> 00:06:23.854
It's just completely
transparent.

00:06:23.854 --> 00:06:26.020
Now if you're implementing
your own custom protocol,

00:06:26.020 --> 00:06:28.190
it's still easy but
a little harder.

00:06:28.190 --> 00:06:31.810
So you can use, if you just use
Java sockets, you can basically

00:06:31.810 --> 00:06:34.840
just wrap it with, just
use an SSL socket instead.

00:06:34.840 --> 00:06:36.915
There is one very,
very big pitfall

00:06:36.915 --> 00:06:38.720
though that you need
to keep in mind.

00:06:38.720 --> 00:06:41.600
Is that unlike what
the HTTP clients do,

00:06:41.600 --> 00:06:44.270
SSL socket does not check
that the host that you're

00:06:44.270 --> 00:06:47.510
connecting to is the host
you expected to connect to.

00:06:47.510 --> 00:06:49.300
And this is something
really important.

00:06:49.300 --> 00:06:51.040
If you don't do it,
your connections

00:06:51.040 --> 00:06:52.360
are completely insecure.

00:06:52.360 --> 00:06:55.796
And I'll talk about more
when I get to the mistakes.

00:06:55.796 --> 00:06:56.920
So here's some sample code.

00:06:56.920 --> 00:07:01.360
The important bit is this
HostnameVerifier.verify

00:07:01.360 --> 00:07:04.270
to check that we actually
connect to android.com

00:07:04.270 --> 00:07:06.724
not say, evil.com.

00:07:06.724 --> 00:07:09.059
So on the server--
now this is probably

00:07:09.059 --> 00:07:10.350
the hard part for a lot of you.

00:07:10.350 --> 00:07:12.599
And unfortunately, I'm going
to basically skip over it

00:07:12.599 --> 00:07:14.420
because I have 45 minutes.

00:07:14.420 --> 00:07:17.360
And this is a
really big subject.

00:07:17.360 --> 00:07:19.530
So if you're setting it
up on your own server,

00:07:19.530 --> 00:07:21.930
SSL Labs has a really
good best practice

00:07:21.930 --> 00:07:22.940
for deployment document.

00:07:22.940 --> 00:07:24.190
Highly recommend you read it.

00:07:24.190 --> 00:07:26.880
And generally if you're just
using some cloud service

00:07:26.880 --> 00:07:29.210
for your backend, everybody
has pretty good TLS support

00:07:29.210 --> 00:07:30.320
nowadays.

00:07:30.320 --> 00:07:32.890
So use it.

00:07:32.890 --> 00:07:33.950
So OK.

00:07:33.950 --> 00:07:36.180
So let's say you decide,
OK, I really want to use it.

00:07:36.180 --> 00:07:36.930
I've gone through.

00:07:36.930 --> 00:07:42.700
And I think I have replaced all
of those HTTP URLs with HTTPS.

00:07:42.700 --> 00:07:45.370
But how do I know that
everything that I'm sending

00:07:45.370 --> 00:07:47.230
is over a TLS connection?

00:07:47.230 --> 00:07:48.890
Like how can you be sure?

00:07:48.890 --> 00:07:52.060
It's always important to test,
especially with security code.

00:07:52.060 --> 00:07:54.390
You want to make sure you're
actually doing it right.

00:07:54.390 --> 00:07:56.009
And so why do you
have to do this?

00:07:56.009 --> 00:07:58.300
So let's consider the most
obvious case of source code.

00:07:58.300 --> 00:07:58.800
Right?

00:07:58.800 --> 00:08:01.350
I open just a static,
https://example.com.

00:08:01.350 --> 00:08:02.890
And I go there.

00:08:02.890 --> 00:08:05.270
Is this over HTTPS?

00:08:05.270 --> 00:08:05.780
Yes.

00:08:05.780 --> 00:08:07.946
But it's actually more
complicated than you'd think.

00:08:07.946 --> 00:08:09.820
Because what if that
page immediately says

00:08:09.820 --> 00:08:12.560
actually the content is over
here on http://example.com?

00:08:12.560 --> 00:08:16.335
So for the HttpUrlConnection
in Android,

00:08:16.335 --> 00:08:18.531
it actually explicitly does
not follow as reader x.

00:08:18.531 --> 00:08:20.030
But if you're using
a custom client,

00:08:20.030 --> 00:08:22.000
that might not be the case.

00:08:22.000 --> 00:08:23.890
And it's actually
a little tricky.

00:08:23.890 --> 00:08:25.557
But that's not how
you usually use URLs.

00:08:25.557 --> 00:08:27.473
What you'll often have
is that you'll get them

00:08:27.473 --> 00:08:28.640
from your server backend.

00:08:28.640 --> 00:08:31.335
So consider you have
a bunch of contacts

00:08:31.335 --> 00:08:32.640
that your server pushes down.

00:08:32.640 --> 00:08:34.789
And one of those things
is a profile picture.

00:08:34.789 --> 00:08:37.140
Your data is basically going
to be like, name, Chad.

00:08:37.140 --> 00:08:40.679
Profile picture, here's a PNG
on the internet somewhere.

00:08:40.679 --> 00:08:43.049
And you're just going to
blindly open that URL.

00:08:43.049 --> 00:08:45.730
And this works great on Android
like whether it's HTP or HTTP,

00:08:45.730 --> 00:08:47.171
your code just works.

00:08:47.171 --> 00:08:49.670
But what happens if, you know,
today when you ship your app,

00:08:49.670 --> 00:08:50.690
it's HTTPS.

00:08:50.690 --> 00:08:52.220
But then six months
down the line,

00:08:52.220 --> 00:08:53.886
you're doing some
tweaks on the backend.

00:08:53.886 --> 00:08:55.970
And you accidentally
set those to HTTP.

00:08:55.970 --> 00:08:57.540
And you don't realize.

00:08:57.540 --> 00:08:59.240
Suddenly all those
security guarantees

00:08:59.240 --> 00:09:02.510
you were trying to get are
kind of out the window.

00:09:02.510 --> 00:09:04.380
And finally, what about
the third party code

00:09:04.380 --> 00:09:05.170
in your application?

00:09:05.170 --> 00:09:05.670
Right?

00:09:05.670 --> 00:09:08.070
You don't want any of
your traffic to go out

00:09:08.070 --> 00:09:09.490
over non-secure connections.

00:09:09.490 --> 00:09:11.440
But what about that ad
or analytics library

00:09:11.440 --> 00:09:12.520
you downloaded?

00:09:12.520 --> 00:09:13.630
Do they?

00:09:13.630 --> 00:09:15.180
Do they respect that?

00:09:15.180 --> 00:09:16.560
How do you know?

00:09:16.560 --> 00:09:18.200
I don't know.

00:09:18.200 --> 00:09:19.130
So what do you do?

00:09:19.130 --> 00:09:22.100
So in Marshmallow we
added a couple of features

00:09:22.100 --> 00:09:23.660
to help you both
in development time

00:09:23.660 --> 00:09:25.960
and actually
released on devices.

00:09:25.960 --> 00:09:28.760
So the first thing we have
is some new StrictMode mode

00:09:28.760 --> 00:09:30.679
detection for cleartext traffic.

00:09:30.679 --> 00:09:32.720
So while you're developing,
you can detect stuff.

00:09:32.720 --> 00:09:36.180
And also a manifest flag that
lets you specify whether or not

00:09:36.180 --> 00:09:37.450
you plan to use cleartext.

00:09:37.450 --> 00:09:40.370
And these are not
just for HTTP, HTTPS.

00:09:40.370 --> 00:09:42.030
This is for anything.

00:09:42.030 --> 00:09:44.600
So first of all, the
StrictMode support.

00:09:44.600 --> 00:09:46.516
So the goal of this is
while you're developing

00:09:46.516 --> 00:09:48.300
and use your
standards StrictMode

00:09:48.300 --> 00:09:50.030
stuff to detect
cleartext traffic,

00:09:50.030 --> 00:09:51.970
notify you, crash
the app, whatever.

00:09:51.970 --> 00:09:54.430
That way as you develop it,
you can find these issues.

00:09:54.430 --> 00:09:56.720
And the way the StrictMode
detection works is it

00:09:56.720 --> 00:10:00.500
actually does packet inspection
of every single connection

00:10:00.500 --> 00:10:03.729
that leaves your UID
for your application.

00:10:03.729 --> 00:10:06.270
And it checks to make sure that
the very first thing it sends

00:10:06.270 --> 00:10:08.000
is a TLS Client Hello.

00:10:08.000 --> 00:10:10.392
Basically the start of
that secure handshake.

00:10:10.392 --> 00:10:12.350
And that's good because
it means that no matter

00:10:12.350 --> 00:10:15.970
what your code is, it's native,
it's doing some weird custom

00:10:15.970 --> 00:10:19.436
written stuff, it will
detect absolutely all of it.

00:10:19.436 --> 00:10:20.810
The downside though
is that there

00:10:20.810 --> 00:10:22.101
are some false positive issues.

00:10:22.101 --> 00:10:25.730
Because not everything that
uses TLS starts immediately

00:10:25.730 --> 00:10:26.820
with that client hello.

00:10:26.820 --> 00:10:30.290
Even the most basic example, if
you use an HTTP proxy to send

00:10:30.290 --> 00:10:31.200
HTTPS.

00:10:31.200 --> 00:10:32.255
Still secure.

00:10:32.255 --> 00:10:33.860
But the very first
thing you'll send

00:10:33.860 --> 00:10:36.190
is actually sort of
the connect message.

00:10:36.190 --> 00:10:40.940
And likewise if you have like
protocols like XMPP or IMAP.

00:10:40.940 --> 00:10:44.060
Those actually do a little bit
of handshaking before they say,

00:10:44.060 --> 00:10:46.660
OK, now let's switch to TLS.

00:10:46.660 --> 00:10:49.544
And those will all get
unfortunately detected by this.

00:10:49.544 --> 00:10:51.210
But this will let you
at least if you're

00:10:51.210 --> 00:10:53.570
doing just HTTPS,
HTTP, this will

00:10:53.570 --> 00:10:57.242
let you check at development
time pretty easily.

00:10:57.242 --> 00:10:57.950
And that's great.

00:10:57.950 --> 00:10:59.930
Sort of the next side
of things is, OK, you've

00:10:59.930 --> 00:11:00.639
shipped your app.

00:11:00.639 --> 00:11:03.221
But how do you protect against
kind of accidental regressions?

00:11:03.221 --> 00:11:03.740
Right?

00:11:03.740 --> 00:11:06.160
Like the example I had where
your backend six months down

00:11:06.160 --> 00:11:10.480
the line starts pushing
HTTP URLs instead of HTTPS.

00:11:10.480 --> 00:11:10.980
Sorry.

00:11:10.980 --> 00:11:13.100
So for that we
added and manifest

00:11:13.100 --> 00:11:15.050
flag called use as
cleartext traffic.

00:11:15.050 --> 00:11:17.900
And what this is for is for you
to basically say to the system,

00:11:17.900 --> 00:11:20.210
I do not intend to do
any cleartext traffic.

00:11:20.210 --> 00:11:22.910
So if I do, please stop me.

00:11:22.910 --> 00:11:25.650
And this is completely
best efforts.

00:11:25.650 --> 00:11:28.340
So it's up to libraries
to support this.

00:11:28.340 --> 00:11:30.390
As far as libraries that
support it right now,

00:11:30.390 --> 00:11:35.090
all of your HttpUrlConnection,
OkHttp, the Apache HttpClient,

00:11:35.090 --> 00:11:36.240
all of these support it.

00:11:36.240 --> 00:11:39.280
Download Manager, Media Player,
things you do through that.

00:11:39.280 --> 00:11:42.050
Unfortunately not
supported is WebView.

00:11:42.050 --> 00:11:45.330
But if you're using those
standard libraries and you

00:11:45.330 --> 00:11:46.160
set that flag.

00:11:46.160 --> 00:11:49.090
And if six months down the
line you accidentally do

00:11:49.090 --> 00:11:51.630
that URL change, those
apps, like those connections

00:11:51.630 --> 00:11:52.500
will fail.

00:11:52.500 --> 00:11:54.170
They'll throw an
exception, hard fail.

00:11:54.170 --> 00:11:58.310
You don't send any traffic out
over the network in the clear

00:11:58.310 --> 00:12:00.230
where someone could
do bad things with it.

00:12:00.230 --> 00:12:03.100
So the question I get
quite a lot is, why do you

00:12:03.100 --> 00:12:06.950
block traffic instead of doing
sort of transparent upgrading?

00:12:06.950 --> 00:12:09.500
And there's a couple
reasons for this.

00:12:09.500 --> 00:12:11.120
So first of all,
if you transparent

00:12:11.120 --> 00:12:12.790
upgrading all of
your older devices

00:12:12.790 --> 00:12:15.319
are basically just
kind of left out.

00:12:15.319 --> 00:12:16.610
They're completely out of luck.

00:12:16.610 --> 00:12:18.410
If you only develop
on a newer device,

00:12:18.410 --> 00:12:20.700
you might not even know
that you're actually doing

00:12:20.700 --> 00:12:22.200
these connections over HTTP.

00:12:22.200 --> 00:12:24.510
You just see them ending
up going out securely.

00:12:24.510 --> 00:12:30.160
And finally, upgrade logic is
actually not-- it's a big pain.

00:12:30.160 --> 00:12:32.530
So first of all,
for non-HTTP, it

00:12:32.530 --> 00:12:35.330
might not be obvious what
the sort of upgrade path is.

00:12:35.330 --> 00:12:37.880
It might actually require
this protocol is just

00:12:37.880 --> 00:12:39.800
completely not allowed.

00:12:39.800 --> 00:12:43.320
And also, just doing the
standard rewriting of HTTP

00:12:43.320 --> 00:12:45.440
to HTTPS might break
your connections.

00:12:45.440 --> 00:12:47.200
There are still
a lot of websites

00:12:47.200 --> 00:12:49.870
out there right now where if
you connect to them over HTTPS,

00:12:49.870 --> 00:12:50.820
the connection works.

00:12:50.820 --> 00:12:54.190
But the certificate you
get is for some random CDN

00:12:54.190 --> 00:12:56.710
or just some complete noise.

00:12:56.710 --> 00:13:00.294
So instead by blocking,
you'll know immediately.

00:13:00.294 --> 00:13:02.210
And you'll actually be
able to see oh, OK, I'm

00:13:02.210 --> 00:13:05.327
like-- you'll get the
crash notification.

00:13:05.327 --> 00:13:06.160
You'll say, oh crap.

00:13:06.160 --> 00:13:07.610
This is now over HTTP.

00:13:07.610 --> 00:13:08.360
You can fix it.

00:13:08.360 --> 00:13:10.980
And you can fix all the
devices, not just devices

00:13:10.980 --> 00:13:12.150
running [INAUDIBLE] newer.

00:13:12.150 --> 00:13:14.340
But absolutely every device.

00:13:14.340 --> 00:13:16.470
And that's a lot better.

00:13:16.470 --> 00:13:17.334
So sorry.

00:13:17.334 --> 00:13:19.770
I need some water real quick.

00:13:19.770 --> 00:13:23.260
So now my favorite part
because I'm a security person

00:13:23.260 --> 00:13:25.240
are the various mistakes
and misconfigurations

00:13:25.240 --> 00:13:25.985
that people make.

00:13:28.710 --> 00:13:32.750
So how do you know that
you're using TLS correctly?

00:13:32.750 --> 00:13:35.530
Well the good news is it's a
secure by default on basically

00:13:35.530 --> 00:13:36.790
all modern platforms.

00:13:36.790 --> 00:13:39.610
So if you don't try
and do anything custom,

00:13:39.610 --> 00:13:40.490
you are good to go.

00:13:40.490 --> 00:13:41.220
Life is great.

00:13:41.220 --> 00:13:43.910
You don't need to do anything.

00:13:43.910 --> 00:13:45.960
Unfortunately, it's
possible to override

00:13:45.960 --> 00:13:47.110
a lot of these defaults.

00:13:47.110 --> 00:13:49.415
And you'd like to hope
that no one overrides

00:13:49.415 --> 00:13:51.870
these with insecure code.

00:13:51.870 --> 00:13:54.450
That it's always secure code
that's well thought out.

00:13:54.450 --> 00:13:57.050
But that's really
not often the case.

00:13:57.050 --> 00:13:58.829
And so throughout
this whole thing,

00:13:58.829 --> 00:14:01.120
I'm going to be referencing
a lot of information that's

00:14:01.120 --> 00:14:04.540
also available on the
security SSL training article.

00:14:04.540 --> 00:14:06.120
It has code samples
for all this.

00:14:06.120 --> 00:14:08.679
It has a lot more words
than I'm going to go into.

00:14:08.679 --> 00:14:10.220
And I highly recommend
you read that.

00:14:10.220 --> 00:14:13.810
If you're ever doing TLS,
please look at that first.

00:14:13.810 --> 00:14:16.190
Because it's a better source
than most of the internet.

00:14:16.190 --> 00:14:20.510
So why do people put insecure
TLS code into their app?

00:14:20.510 --> 00:14:22.760
Well the simple answer
is that what happens

00:14:22.760 --> 00:14:24.190
is someone has an issue.

00:14:24.190 --> 00:14:25.120
They go on a forum.

00:14:25.120 --> 00:14:27.380
They post hey, I
have this issue.

00:14:27.380 --> 00:14:30.070
Someone hands them a code
sample that says, yeah,

00:14:30.070 --> 00:14:30.710
just take this.

00:14:30.710 --> 00:14:31.960
This will fix your problem.

00:14:31.960 --> 00:14:34.061
Copy and paste it into
the app, or run it.

00:14:34.061 --> 00:14:34.560
Good.

00:14:34.560 --> 00:14:35.720
Ship it.

00:14:35.720 --> 00:14:38.360
The problem is is that most
of the code samples provided

00:14:38.360 --> 00:14:39.850
are bad.

00:14:39.850 --> 00:14:41.410
They fix the
problem by basically

00:14:41.410 --> 00:14:42.879
removing all of the security.

00:14:42.879 --> 00:14:44.920
So you'll never see that
security exception again

00:14:44.920 --> 00:14:48.290
because you'll never see
a security exception.

00:14:48.290 --> 00:14:50.170
And that's not what you want.

00:14:50.170 --> 00:14:51.680
So before I kind
of go into these,

00:14:51.680 --> 00:14:53.980
I'm to go into slightly more
detail about what checking

00:14:53.980 --> 00:14:55.390
trust and TLS actually is.

00:14:55.390 --> 00:14:57.400
I'm going to skip
over most of it

00:14:57.400 --> 00:14:58.609
because it's really in-depth.

00:14:58.609 --> 00:15:00.483
And I don't think you
need to know most of it

00:15:00.483 --> 00:15:01.520
for the context of this.

00:15:01.520 --> 00:15:04.370
If you want to, you
can go read an RFC.

00:15:04.370 --> 00:15:05.610
Have fun with that.

00:15:05.610 --> 00:15:08.660
So there's two big
parts about TLS trust

00:15:08.660 --> 00:15:09.910
checking at a very high level.

00:15:09.910 --> 00:15:11.868
First of all, that the
person you're talking to

00:15:11.868 --> 00:15:13.740
is the person you
intended to talk to.

00:15:13.740 --> 00:15:16.560
And that they have a
trusted certificate

00:15:16.560 --> 00:15:17.880
saying they're that person.

00:15:17.880 --> 00:15:19.750
And these are
slightly different.

00:15:19.750 --> 00:15:22.340
So for example, I can go
when I register evil.com.

00:15:22.340 --> 00:15:25.240
I can go buy a certificate
for that because I own it.

00:15:25.240 --> 00:15:26.391
And that's all fine.

00:15:26.391 --> 00:15:28.640
But that doesn't mean that
my certificate for evil.com

00:15:28.640 --> 00:15:30.660
makes me trusted
for android.com.

00:15:30.660 --> 00:15:31.160
Right?

00:15:31.160 --> 00:15:33.490
I'm only trusted for that.

00:15:33.490 --> 00:15:36.750
And likewise, anyone can make
a certificate for android.com

00:15:36.750 --> 00:15:37.720
and say, yes, hello.

00:15:37.720 --> 00:15:38.610
I am android.com.

00:15:38.610 --> 00:15:40.320
Please trust me.

00:15:40.320 --> 00:15:43.170
But you actually need to
make sure that it is trusted.

00:15:43.170 --> 00:15:44.950
And both of these two
high level things,

00:15:44.950 --> 00:15:47.450
there is a lot of bad code
out there on the internet that

00:15:47.450 --> 00:15:48.740
breaks these.

00:15:48.740 --> 00:15:50.540
So the first one I'm
going to talk about

00:15:50.540 --> 00:15:52.498
is making sure you're
talking to the person you

00:15:52.498 --> 00:15:54.857
expect to talk to.

00:15:54.857 --> 00:15:57.440
Because obviously if you make a
secure connection to evil.com,

00:15:57.440 --> 00:15:59.204
that's probably
not what you wanted

00:15:59.204 --> 00:16:01.620
when you wanted to make a
secure connection to android.com

00:16:01.620 --> 00:16:05.360
to send whatever user secrets
or magic you wanted to send.

00:16:05.360 --> 00:16:07.960
And now this is done for you
by standard and all the HTTP

00:16:07.960 --> 00:16:08.570
libraries.

00:16:08.570 --> 00:16:10.825
Again, if you're using
a cell socket, it's not.

00:16:10.825 --> 00:16:12.440
You have to do this yourself.

00:16:12.440 --> 00:16:15.560
If you're not, you have
a very big problem.

00:16:15.560 --> 00:16:18.300
So the problem that gets a
lot of people to take code

00:16:18.300 --> 00:16:21.310
off the internet is dealing
with legacy clients or legacy

00:16:21.310 --> 00:16:23.280
servers can be kind of tricky.

00:16:23.280 --> 00:16:24.690
So say you have a server.

00:16:24.690 --> 00:16:27.230
And on that server you host
a bunch of different domains

00:16:27.230 --> 00:16:28.550
like most servers do.

00:16:28.550 --> 00:16:30.630
You have example.com,
example.org,

00:16:30.630 --> 00:16:32.127
and say even android.com.

00:16:32.127 --> 00:16:33.960
And each of these has
a completely different

00:16:33.960 --> 00:16:34.924
certificate.

00:16:34.924 --> 00:16:37.340
And when you connect-- so you
connect and the client says,

00:16:37.340 --> 00:16:38.960
hi, I want to talk TLS.

00:16:38.960 --> 00:16:40.810
Please give me your certificate.

00:16:40.810 --> 00:16:41.880
Which one do you provide?

00:16:41.880 --> 00:16:42.150
Right?

00:16:42.150 --> 00:16:43.540
You've got three possibilities.

00:16:43.540 --> 00:16:45.380
You need to provide one.

00:16:45.380 --> 00:16:46.499
Which do you do?

00:16:46.499 --> 00:16:48.040
So the good news is
that this problem

00:16:48.040 --> 00:16:50.617
was solved a while
ago in TLS with what's

00:16:50.617 --> 00:16:52.700
called the server name
identifier, which basically

00:16:52.700 --> 00:16:55.390
says in the Client Hello,
hi, I want to talk TLS.

00:16:55.390 --> 00:16:58.870
And by the way, I want
to talk to example.com.

00:16:58.870 --> 00:17:00.835
But you might not
always have that.

00:17:00.835 --> 00:17:02.210
So for example,
if you're dealing

00:17:02.210 --> 00:17:04.650
with really old clients,
you might not get that.

00:17:04.650 --> 00:17:08.880
Or also if you're using an
older protocol like SSLv3, which

00:17:08.880 --> 00:17:10.329
doesn't support such things.

00:17:10.329 --> 00:17:14.240
So how do you make sure that
those connections still work?

00:17:14.240 --> 00:17:17.780
So the right way to do this
is a little complicated.

00:17:17.780 --> 00:17:19.776
But you basically need
to check that, OK,

00:17:19.776 --> 00:17:21.400
I know that the
default for this server

00:17:21.400 --> 00:17:23.108
is actually going to
give me example.com.

00:17:23.108 --> 00:17:25.272
So when I connect
to example.org,

00:17:25.272 --> 00:17:26.980
I'll actually explicitly
check that I got

00:17:26.980 --> 00:17:28.230
a certificate for example.org.

00:17:28.230 --> 00:17:31.170
Now it's important to
say that you probably

00:17:31.170 --> 00:17:33.080
don't need to do this.

00:17:33.080 --> 00:17:36.620
SNI has been supported
on Android since 2.3.

00:17:36.620 --> 00:17:40.236
So if you don't support back
that far, don't worry about it.

00:17:40.236 --> 00:17:41.610
There is an asterisk
around that,

00:17:41.610 --> 00:17:46.470
which is that the way that a lot
of HTTP clients work is they'll

00:17:46.470 --> 00:17:49.369
try to connect with sort of like
the most modern TLS settings.

00:17:49.369 --> 00:17:51.660
And that may fail because
unfortunately on the internet

00:17:51.660 --> 00:17:54.190
there's just a lot of old kind
of bad networking hardware

00:17:54.190 --> 00:17:56.260
that chokes on TLS.

00:17:56.260 --> 00:17:58.950
And so they'll do sort
of a protocol downgrade.

00:17:58.950 --> 00:18:00.520
And that can lead
to you downgrading

00:18:00.520 --> 00:18:02.650
to SLLv3 on some libraries.

00:18:02.650 --> 00:18:04.150
And then at that
point you no longer

00:18:04.150 --> 00:18:05.720
have the subject name, field.

00:18:05.720 --> 00:18:07.650
So you might get the
wrong certificate.

00:18:07.650 --> 00:18:09.910
But usually if
that happens, SLLv3

00:18:09.910 --> 00:18:13.050
will fail as well because
you're just on a bad network.

00:18:13.050 --> 00:18:16.620
So the wrong way to do this,
some very common advice

00:18:16.620 --> 00:18:19.140
out there, is you replace
the default HostnameVerifier

00:18:19.140 --> 00:18:22.250
with this HostnameVerifier
that always true.

00:18:22.250 --> 00:18:24.820
So is evil.com trusted for
this connection to Android?

00:18:24.820 --> 00:18:26.110
Yes.

00:18:26.110 --> 00:18:28.090
This is kind of like
obviously bad code.

00:18:28.090 --> 00:18:30.560
Please don't ever use this.

00:18:30.560 --> 00:18:32.120
It's very easy to
man in the middle.

00:18:32.120 --> 00:18:34.506
I go buy a certificate
for evil.com.

00:18:34.506 --> 00:18:36.837
And your connection
to android.com, I just

00:18:36.837 --> 00:18:37.920
hand you that certificate.

00:18:37.920 --> 00:18:39.680
You say, oh yeah,
this is trusted.

00:18:39.680 --> 00:18:40.930
So it was issued for evil.com.

00:18:40.930 --> 00:18:43.710
Connect.

00:18:43.710 --> 00:18:46.100
So this means that you
will connect to basically

00:18:46.100 --> 00:18:47.350
any valid certificate.

00:18:47.350 --> 00:18:49.520
And anyone out there can
go buy a valid certificate

00:18:49.520 --> 00:18:50.394
for their own domain.

00:18:50.394 --> 00:18:52.000
It's $20.

00:18:52.000 --> 00:18:55.480
Nowadays you can probably
also just get them for free.

00:18:55.480 --> 00:18:58.710
So even if you have
a valid certificate,

00:18:58.710 --> 00:19:00.040
it's not just valid everywhere.

00:19:00.040 --> 00:19:01.456
It's valid for one
specific thing.

00:19:01.456 --> 00:19:04.810
And you really need to
make sure that's the case.

00:19:04.810 --> 00:19:09.250
So the next thing
is actually, how

00:19:09.250 --> 00:19:11.970
do you make sure that the
certificate that you got

00:19:11.970 --> 00:19:12.730
is trusted?

00:19:12.730 --> 00:19:14.437
What does that mean?

00:19:14.437 --> 00:19:16.270
So again this is going
to a very high level.

00:19:16.270 --> 00:19:17.950
I'm not going to go into
it in a whole lot of detail

00:19:17.950 --> 00:19:19.199
because it's very complicated.

00:19:19.199 --> 00:19:20.916
There's RFCs the
size of my arm you

00:19:20.916 --> 00:19:22.790
can read if you want to
know the full detail.

00:19:22.790 --> 00:19:25.910
But this is going to be a
very high-level overview.

00:19:25.910 --> 00:19:28.490
So when I say how do
you verify the peer?

00:19:28.490 --> 00:19:30.090
So what is the peer in TLS?

00:19:30.090 --> 00:19:32.420
It's usually represented by
sort of their certificate

00:19:32.420 --> 00:19:33.980
that they provide.

00:19:33.980 --> 00:19:36.590
So you have some options
for how do you trust this.

00:19:36.590 --> 00:19:38.470
You can always hard code it.

00:19:38.470 --> 00:19:40.970
But that doesn't really work
because certificates change.

00:19:40.970 --> 00:19:42.160
And they change very often.

00:19:42.160 --> 00:19:43.830
For example,
google.com certificate

00:19:43.830 --> 00:19:45.950
rotates every three months.

00:19:45.950 --> 00:19:48.060
So you can't just say
in your application,

00:19:48.060 --> 00:19:50.600
I expect this certificate to
be this because in three months

00:19:50.600 --> 00:19:52.756
it's going to be
completely different.

00:19:52.756 --> 00:19:54.130
And generally that
doesn't scale.

00:19:54.130 --> 00:19:56.220
Like what if you're an
application that you're

00:19:56.220 --> 00:19:57.250
like an RSS Feedreader.

00:19:57.250 --> 00:19:58.780
And you just connect
out to the internet.

00:19:58.780 --> 00:20:00.710
You obviously can't hard
code the certificate

00:20:00.710 --> 00:20:03.820
of every web page on the
internet in your application.

00:20:03.820 --> 00:20:04.830
I hope.

00:20:04.830 --> 00:20:06.480
Don't try.

00:20:06.480 --> 00:20:08.110
So what is the certificate?

00:20:08.110 --> 00:20:10.880
It includes the name,
so who is this for?

00:20:10.880 --> 00:20:13.370
It includes the public key
for the asymmetric crypto,

00:20:13.370 --> 00:20:14.560
which you don't have to
worry about for this talk.

00:20:14.560 --> 00:20:16.207
But crypto keys are in there.

00:20:16.207 --> 00:20:17.290
And it contains an issuer.

00:20:17.290 --> 00:20:19.380
And this is someone
that's basically said,

00:20:19.380 --> 00:20:23.300
I am stating that that
cryptographic key up there

00:20:23.300 --> 00:20:24.570
is tied to google.com.

00:20:24.570 --> 00:20:27.630
So this would be like VeriSign
or GeoTrust or certificate

00:20:27.630 --> 00:20:29.030
authorities you've heard about.

00:20:29.030 --> 00:20:32.550
And it contains a bunch of
other things, expiration dates,

00:20:32.550 --> 00:20:33.710
key usage, et cetera.

00:20:33.710 --> 00:20:35.580
But we'll skip over those.

00:20:35.580 --> 00:20:37.840
So the issuer itself
is also a certificate.

00:20:37.840 --> 00:20:40.679
So it's google.com certificate
it's issued by VeriSign.

00:20:40.679 --> 00:20:42.220
That VeriSign
certificate is probably

00:20:42.220 --> 00:20:43.680
issued by another VeriSign.

00:20:43.680 --> 00:20:45.392
And you get this chain.

00:20:45.392 --> 00:20:46.600
So you have this nice change.

00:20:46.600 --> 00:20:48.760
But how do I know if
I trust this chain?

00:20:48.760 --> 00:20:51.320
Sort of like you
keep building this.

00:20:51.320 --> 00:20:53.820
But it's turtles
all the way down.

00:20:53.820 --> 00:20:56.700
If you've heard the expression,
which hopefully you have.

00:20:56.700 --> 00:20:58.550
In the end you
still need to say,

00:20:58.550 --> 00:21:00.630
do I trust this long
chain of certificates?

00:21:00.630 --> 00:21:02.830
And the way you handle
it is your operating

00:21:02.830 --> 00:21:06.540
system or your application
ships with a set of trusted

00:21:06.540 --> 00:21:07.330
certificates.

00:21:07.330 --> 00:21:10.480
And so these are sort of
your very top level routes.

00:21:10.480 --> 00:21:12.230
And then you get a
chain from your server.

00:21:12.230 --> 00:21:13.771
And your server
says, I'm google.com.

00:21:13.771 --> 00:21:15.890
And I'm like, I don't
know that certificate.

00:21:15.890 --> 00:21:17.380
But I was issued by VeriSign.

00:21:17.380 --> 00:21:18.600
And so you do the look up.

00:21:18.600 --> 00:21:19.550
And you say, oh, OK.

00:21:19.550 --> 00:21:21.729
I actually do trust that
VeriSign certificate.

00:21:21.729 --> 00:21:23.020
It shipped with my application.

00:21:23.020 --> 00:21:25.200
It shipped with the phone.

00:21:25.200 --> 00:21:28.210
So another question that
comes up pretty often,

00:21:28.210 --> 00:21:30.710
so I'm going to kind of
detour into that for a second.

00:21:30.710 --> 00:21:32.550
Is how can you trust
the CAs on the device?

00:21:32.550 --> 00:21:33.640
You know, you look.

00:21:33.640 --> 00:21:35.030
And there's 100 or so.

00:21:35.030 --> 00:21:37.080
And you don't know
who most of them are.

00:21:37.080 --> 00:21:38.230
How do you trust them?

00:21:38.230 --> 00:21:39.660
This is sort of a hot topic.

00:21:39.660 --> 00:21:41.710
So there's sort of
two things to keep

00:21:41.710 --> 00:21:43.457
in mind when you're
asking yourself,

00:21:43.457 --> 00:21:44.540
how do I trust these guys?

00:21:44.540 --> 00:21:45.900
Why can I trust these guys?

00:21:45.900 --> 00:21:48.709
First of all, they do have a
lot of strict requirements.

00:21:48.709 --> 00:21:50.250
There's audits, et
cetera just to get

00:21:50.250 --> 00:21:52.780
in sort of general
certificate authority lists.

00:21:52.780 --> 00:21:54.330
Not just for Android.

00:21:54.330 --> 00:21:56.180
But this is the
standard in the world.

00:21:56.180 --> 00:21:58.200
And finally, not only
is it hard to get in,

00:21:58.200 --> 00:21:59.720
but there's actually
a lot of work

00:21:59.720 --> 00:22:02.350
to verify that no one's
doing anything bad.

00:22:02.350 --> 00:22:04.390
So you have things like
certificate transparency

00:22:04.390 --> 00:22:06.320
where you actually
note down what

00:22:06.320 --> 00:22:08.150
certificates have you issued.

00:22:08.150 --> 00:22:10.440
Or things like pinning,
so that you can actually

00:22:10.440 --> 00:22:12.790
detect if anywhere
in the world someone

00:22:12.790 --> 00:22:14.770
misissues a certificate.

00:22:14.770 --> 00:22:17.500
Even if it's only used once.

00:22:17.500 --> 00:22:19.210
And that lets you detect misuse.

00:22:19.210 --> 00:22:21.720
And then from there
there's risks to business.

00:22:21.720 --> 00:22:23.630
You know, all that fun stuff.

00:22:23.630 --> 00:22:24.240
So OK.

00:22:24.240 --> 00:22:25.430
Back to trust checking.

00:22:25.430 --> 00:22:26.940
So the problem is
what if you want

00:22:26.940 --> 00:22:29.590
to trust your own certificate
that the system doesn't

00:22:29.590 --> 00:22:30.640
normally trust?

00:22:30.640 --> 00:22:32.672
And this can be for
a couple of reasons.

00:22:32.672 --> 00:22:34.630
Maybe you want to use
your own certificate just

00:22:34.630 --> 00:22:35.800
for local debugging.

00:22:35.800 --> 00:22:36.300
Right?

00:22:36.300 --> 00:22:38.000
You don't want to
take the certificate

00:22:38.000 --> 00:22:40.680
for your actual backend and
put it on your random developer

00:22:40.680 --> 00:22:41.210
workstation.

00:22:41.210 --> 00:22:42.543
That's probably not a good idea.

00:22:42.543 --> 00:22:44.020
That just doesn't feel right.

00:22:44.020 --> 00:22:46.675
And secondly, you might
actually just not trust

00:22:46.675 --> 00:22:47.675
certificate authorities.

00:22:47.675 --> 00:22:50.490
Like sure, I made a
very quick argument

00:22:50.490 --> 00:22:53.700
about why they're a pretty
reasonable source of trust.

00:22:53.700 --> 00:22:55.510
But maybe you don't want to.

00:22:55.510 --> 00:22:56.690
And that's fine.

00:22:56.690 --> 00:22:59.030
So maybe you want to run your
own certificate authority

00:22:59.030 --> 00:23:01.760
and ship that with your
app and only trust that.

00:23:01.760 --> 00:23:04.490
Or maybe you have
some internal network

00:23:04.490 --> 00:23:07.510
and you issue certificates for
internal web pages using that.

00:23:07.510 --> 00:23:10.260
And that's obviously not trusted
by the device by default.

00:23:10.260 --> 00:23:12.950
So you need to sort of
ship it with your app

00:23:12.950 --> 00:23:15.192
and make sure that
your stuff can connect.

00:23:15.192 --> 00:23:17.650
So I'm not even going to include
the code for the right way

00:23:17.650 --> 00:23:19.960
to do this because it
would take four slides.

00:23:19.960 --> 00:23:22.150
When I tried, it's
pretty verbose.

00:23:22.150 --> 00:23:25.390
But you can go get it off that
security SSL training article

00:23:25.390 --> 00:23:27.780
I told you about.

00:23:27.780 --> 00:23:28.680
It's not complicated.

00:23:28.680 --> 00:23:30.720
It's just, it's
very verbose Java.

00:23:30.720 --> 00:23:33.147
So I'm going to
save you from that.

00:23:33.147 --> 00:23:35.730
But the real gist of it is you
basically take the certificates

00:23:35.730 --> 00:23:36.396
you want to use.

00:23:36.396 --> 00:23:38.150
And you tell the
system, OK, these

00:23:38.150 --> 00:23:39.900
are the trusted roots
for this connection.

00:23:39.900 --> 00:23:42.040
Connect as normal.

00:23:42.040 --> 00:23:42.927
And that all works.

00:23:42.927 --> 00:23:44.760
But unfortunately, the
code that you usually

00:23:44.760 --> 00:23:47.760
find on the internet when you
search for that exact problem

00:23:47.760 --> 00:23:48.300
is this.

00:23:48.300 --> 00:23:50.244
And this code, this
code isn't the clearest.

00:23:50.244 --> 00:23:52.410
So it's going to require a
little bit of explanation

00:23:52.410 --> 00:23:54.040
because it's very verbose.

00:23:54.040 --> 00:23:56.580
So we make an SLLContext,
not important.

00:23:56.580 --> 00:23:58.782
We make a new X509 TrustManager.

00:23:58.782 --> 00:24:00.990
And it has these three
methods, check client trusted,

00:24:00.990 --> 00:24:03.130
check server trusted,
and get accepted issuers.

00:24:03.130 --> 00:24:05.550
And then we set this as
the default socket factory

00:24:05.550 --> 00:24:07.360
so it's used for
all connections.

00:24:07.360 --> 00:24:09.660
So what does this actually do?

00:24:09.660 --> 00:24:12.087
So we have this blank check
server trusted method.

00:24:12.087 --> 00:24:12.920
What does that mean?

00:24:12.920 --> 00:24:16.260
Well, if you go and you actually
look at the real documentation,

00:24:16.260 --> 00:24:18.670
and you read, check
server trusted

00:24:18.670 --> 00:24:21.250
throws a certificate exception
if the certificate chain can't

00:24:21.250 --> 00:24:23.360
be validated or isn't trusted.

00:24:23.360 --> 00:24:26.070
OK, so that line is
completely empty.

00:24:26.070 --> 00:24:28.240
So it will never throw
that certificate exception.

00:24:28.240 --> 00:24:29.770
It will always be
trusted no matter

00:24:29.770 --> 00:24:31.875
what garbage you give it.

00:24:31.875 --> 00:24:32.500
And that's bad.

00:24:32.500 --> 00:24:34.230
Because that means that
absolutely any certificate

00:24:34.230 --> 00:24:35.230
in the world is trusted.

00:24:35.230 --> 00:24:37.272
And its completely trivial
to make a certificate.

00:24:37.272 --> 00:24:37.771
Right?

00:24:37.771 --> 00:24:38.820
It's just a bag of bytes.

00:24:38.820 --> 00:24:40.340
Run it through open SSL.

00:24:40.340 --> 00:24:41.980
Done.

00:24:41.980 --> 00:24:44.610
Again, do not ever
use this code.

00:24:44.610 --> 00:24:48.090
Now I have seen this in
actual production apps.

00:24:48.090 --> 00:24:51.110
But also a lot of apps tend to
use this code for debugging.

00:24:51.110 --> 00:24:54.240
Sort of you have this if
debug, install that check.

00:24:54.240 --> 00:24:58.070
And that's OK so long as
you never actually ship it.

00:24:58.070 --> 00:25:00.740
And unfortunately,
that happens sometimes.

00:25:00.740 --> 00:25:04.526
So the better safe thing
to do is don't ever,

00:25:04.526 --> 00:25:05.900
just don't use
code that disables

00:25:05.900 --> 00:25:07.240
the verification completely.

00:25:07.240 --> 00:25:09.990
That is way too big of a
hammer and way too dangerous.

00:25:09.990 --> 00:25:12.190
For local debugging
what you should do

00:25:12.190 --> 00:25:15.270
is again, back to this code
that I actually skipped.

00:25:15.270 --> 00:25:19.210
Is have a CA that you
use only for debugging.

00:25:19.210 --> 00:25:21.000
On your debug build,
put that in your app.

00:25:21.000 --> 00:25:23.180
Trust that certificate.

00:25:23.180 --> 00:25:26.522
Do not turn off trust checking.

00:25:26.522 --> 00:25:27.320
All right.

00:25:27.320 --> 00:25:29.730
If you accidentally ship
that, suddenly all your users

00:25:29.730 --> 00:25:32.220
are now easy to attack.

00:25:32.220 --> 00:25:34.340
And that's not what
you want to do.

00:25:34.340 --> 00:25:35.150
OK.

00:25:35.150 --> 00:25:36.894
So sort of lessons for you.

00:25:36.894 --> 00:25:38.810
If you're not overwriting
the secure defaults,

00:25:38.810 --> 00:25:40.350
there's nothing for
you to worry about.

00:25:40.350 --> 00:25:40.930
Right?

00:25:40.930 --> 00:25:41.830
You're good to go.

00:25:41.830 --> 00:25:42.930
Life is great.

00:25:42.930 --> 00:25:44.980
But if you are, some
important takeaways.

00:25:44.980 --> 00:25:47.990
First of all, make sure
you actually need to.

00:25:47.990 --> 00:25:48.550
Right?

00:25:48.550 --> 00:25:50.300
So the HostnameVerification
example

00:25:50.300 --> 00:25:53.490
at the start, I've actually
met with some developers who

00:25:53.490 --> 00:25:55.560
said they needed to
do it for making sure

00:25:55.560 --> 00:25:58.770
that had SNI working on
devices that didn't support it,

00:25:58.770 --> 00:26:03.080
which was odd because the
earliest version they supported

00:26:03.080 --> 00:26:06.140
was Jelly Bean, which
already had this.

00:26:06.140 --> 00:26:06.640
Right?

00:26:06.640 --> 00:26:08.370
So before you even
go customizing it,

00:26:08.370 --> 00:26:10.890
please be sure that
you actually need to.

00:26:10.890 --> 00:26:13.690
Because this is sort of
like the most dangerous way

00:26:13.690 --> 00:26:15.100
to do things.

00:26:15.100 --> 00:26:17.670
Secondly, once you've
decided that yes, OK, I need

00:26:17.670 --> 00:26:18.890
to do something custom, Chad.

00:26:18.890 --> 00:26:20.050
I'm going to do it.

00:26:20.050 --> 00:26:22.130
Please don't blindly
take code samples

00:26:22.130 --> 00:26:26.240
off random pages on the internet
without understanding them.

00:26:26.240 --> 00:26:28.570
Especially for security
sensitive code.

00:26:28.570 --> 00:26:31.650
Unfortunately, there's
a lot of really bad code

00:26:31.650 --> 00:26:34.512
out there for this because what
happens is someone says hey,

00:26:34.512 --> 00:26:35.720
I can't connect to my server.

00:26:35.720 --> 00:26:37.310
I get the certificate exception.

00:26:37.310 --> 00:26:40.340
And the advice is straight
up just, oh, use this code.

00:26:40.340 --> 00:26:42.550
And you won't get the
certificate exception anymore.

00:26:42.550 --> 00:26:44.690
Which is technically correct
because you can never

00:26:44.690 --> 00:26:47.410
get the certificate exception
if you use that code.

00:26:47.410 --> 00:26:49.470
But that's probably not
what you really wanted.

00:26:49.470 --> 00:26:51.930
You wanted to fix the issue
with that single connection.

00:26:51.930 --> 00:26:55.112
You probably are using
TLS because you care.

00:26:55.112 --> 00:26:55.920
Right?

00:26:55.920 --> 00:26:59.579
So please don't copy
and paste that code

00:26:59.579 --> 00:27:00.620
without understanding it.

00:27:00.620 --> 00:27:03.690
And for most of your common
SSL issues that you run into,

00:27:03.690 --> 00:27:05.540
there's actually
better documentation

00:27:05.540 --> 00:27:07.990
on that security
and SSL training

00:27:07.990 --> 00:27:09.600
page on developer.android.com.

00:27:09.600 --> 00:27:14.510
So really go there first
not second or last before

00:27:14.510 --> 00:27:16.570
random forums, random
people giving you

00:27:16.570 --> 00:27:18.430
code on the internet.

00:27:18.430 --> 00:27:19.050
So OK.

00:27:19.050 --> 00:27:19.870
So that's what you should do.

00:27:19.870 --> 00:27:21.203
So what are we doing about this?

00:27:21.203 --> 00:27:23.360
Because those bugs are
kind of embarrassing.

00:27:23.360 --> 00:27:25.660
And they're sad.

00:27:25.660 --> 00:27:27.550
So there's a couple
different things

00:27:27.550 --> 00:27:29.940
that we're doing on
the Android side.

00:27:29.940 --> 00:27:32.470
So first of all, along
with many other things

00:27:32.470 --> 00:27:35.380
we're doing detection of
vulnerable applications in play

00:27:35.380 --> 00:27:36.780
and actually
notifying developers

00:27:36.780 --> 00:27:38.030
and telling them to fix it.

00:27:38.030 --> 00:27:41.430
Not just for these bugs, but
for actually a whole slew

00:27:41.430 --> 00:27:43.520
of security issues.

00:27:43.520 --> 00:27:45.900
Next up, this is what I
spent a lot of time doing,

00:27:45.900 --> 00:27:49.260
is actually tools to find
these issues in applications

00:27:49.260 --> 00:27:50.440
and in generic devices.

00:27:50.440 --> 00:27:52.530
There was unfortunately
a complete lack

00:27:52.530 --> 00:27:54.000
of tools to do this
when I started.

00:27:54.000 --> 00:27:56.140
So I built one.

00:27:56.140 --> 00:27:58.440
And finally, investigating
APIs that make

00:27:58.440 --> 00:27:59.730
it harder to do things wrong.

00:27:59.730 --> 00:28:02.550
A general rule for
security APIs--

00:28:02.550 --> 00:28:05.130
and if you ever design anything
security, keep this in mind.

00:28:05.130 --> 00:28:07.190
It should always be easy
to do the secure thing

00:28:07.190 --> 00:28:10.620
and really hard or impossible
to do the insecure things.

00:28:10.620 --> 00:28:13.380
Over customization is
actually your enemy here.

00:28:13.380 --> 00:28:16.750
So looking at things on
that to move away from these

00:28:16.750 --> 00:28:19.130
APIs that are really
easy to get wrong.

00:28:19.130 --> 00:28:22.390
The trust managing code
is way too easy to break.

00:28:22.390 --> 00:28:24.970
So some notes on that
vulnerability alert

00:28:24.970 --> 00:28:25.780
and blocking.

00:28:25.780 --> 00:28:30.010
So if we detect a vulnerability
in your application for SSL,

00:28:30.010 --> 00:28:32.090
old libraries, those
kinds of things,

00:28:32.090 --> 00:28:34.760
you'll get a vulnerability alert
via the email on your console.

00:28:34.760 --> 00:28:37.269
And you'll get a
notification on that page.

00:28:37.269 --> 00:28:39.560
Make sure you actually go
and check these and fix them.

00:28:39.560 --> 00:28:41.290
Because if you don't fix
them, your application

00:28:41.290 --> 00:28:41.980
may be blocked.

00:28:41.980 --> 00:28:43.460
Right?

00:28:43.460 --> 00:28:45.380
Don't ship things
with security issues.

00:28:45.380 --> 00:28:47.114
And if you, once
you go, you fix it.

00:28:47.114 --> 00:28:48.030
You upload it to Play.

00:28:48.030 --> 00:28:49.980
You'll basically get an
answer back pretty quickly.

00:28:49.980 --> 00:28:52.724
And already a lot of vulnerable
applications, a lot of installs

00:28:52.724 --> 00:28:53.390
have been fixed.

00:28:53.390 --> 00:28:55.920
So for all of you that have
fixed things, thank you.

00:28:55.920 --> 00:28:57.000
Please keep doing it.

00:28:57.000 --> 00:28:59.230
We really appreciate it.

00:28:59.230 --> 00:29:03.150
So finally, on the tool side of
things, actually a year ago now

00:29:03.150 --> 00:29:04.900
I released a tool
called nogotofail,

00:29:04.900 --> 00:29:08.346
which is a network
testing tool for finding

00:29:08.346 --> 00:29:10.220
these classes of bugs
and a whole lot of ones

00:29:10.220 --> 00:29:11.470
I didn't mention in this talk.

00:29:11.470 --> 00:29:13.760
Basically all of your
SSL issues, not using it,

00:29:13.760 --> 00:29:16.930
using it wrong in
many, many ways.

00:29:16.930 --> 00:29:21.310
It's on Git Hub, google.com,
GitHub, Google, nogotofail.

00:29:21.310 --> 00:29:23.310
And it runs on
the network level.

00:29:23.310 --> 00:29:25.540
So it actually supports
absolutely any device.

00:29:25.540 --> 00:29:27.070
It's not an Android
specific thing.

00:29:27.070 --> 00:29:29.970
I've used it to test random,
off-the-shelf things just

00:29:29.970 --> 00:29:32.170
for fun.

00:29:32.170 --> 00:29:33.920
And it means that you
don't have to change

00:29:33.920 --> 00:29:35.190
the device in any way.

00:29:35.190 --> 00:29:36.060
You just plug it in.

00:29:36.060 --> 00:29:38.476
And it actually works without
making your device unusable.

00:29:38.476 --> 00:29:41.350
So my tablet at home
has been on nogotofail

00:29:41.350 --> 00:29:43.420
for well over a year.

00:29:43.420 --> 00:29:45.390
My personal phone
probably spends about half

00:29:45.390 --> 00:29:47.520
the time on a
network running it.

00:29:47.520 --> 00:29:48.590
And completely usable.

00:29:48.590 --> 00:29:50.577
Like I can still
read random messages

00:29:50.577 --> 00:29:52.410
and get cat pictures
at 2:00 in the morning.

00:29:52.410 --> 00:29:54.600
It all still just works.

00:29:54.600 --> 00:29:57.379
But a nice thing it does
support is if you do kind of

00:29:57.379 --> 00:29:59.170
have the ability to
run code on the client,

00:29:59.170 --> 00:30:01.720
there's actually this extra
thing of client attribution

00:30:01.720 --> 00:30:02.450
notification.

00:30:02.450 --> 00:30:04.908
Because what happens when you're
looking at network traffic

00:30:04.908 --> 00:30:06.950
is you say, OK, I saw
this vulnerable connection

00:30:06.950 --> 00:30:07.575
to example.com.

00:30:07.575 --> 00:30:11.050
I have no idea what on
the phone made that.

00:30:11.050 --> 00:30:11.550
Right?

00:30:11.550 --> 00:30:12.370
Because you don't
want to just be

00:30:12.370 --> 00:30:14.578
stuck with someone on the
phone made that connection.

00:30:14.578 --> 00:30:16.730
You want to say this
app at this time made

00:30:16.730 --> 00:30:18.024
this vulnerable connection.

00:30:18.024 --> 00:30:19.190
So we have support for that.

00:30:19.190 --> 00:30:21.300
And what you can
actually see up here

00:30:21.300 --> 00:30:22.870
is an example of
those notifications

00:30:22.870 --> 00:30:24.710
where so the test
app I basically

00:30:24.710 --> 00:30:26.340
hit the button to connect.

00:30:26.340 --> 00:30:28.376
And you immediately get
this notification MiTM

00:30:28.376 --> 00:30:30.140
via SSL certification
for another host

00:30:30.140 --> 00:30:32.790
name, which was the
first misconfiguration I

00:30:32.790 --> 00:30:33.720
talked about.

00:30:33.720 --> 00:30:37.550
And a connection from the
notogofail tester app to IP

00:30:37.550 --> 00:30:39.340
port blah blah blah blah blah.

00:30:39.340 --> 00:30:41.402
So it is an awesome tool.

00:30:41.402 --> 00:30:42.610
I recommend you play with it.

00:30:42.610 --> 00:30:44.234
But it does require
some advanced setup

00:30:44.234 --> 00:30:46.260
because it does do things
at the network level.

00:30:46.260 --> 00:30:49.080
So it's more
targeted toward sort

00:30:49.080 --> 00:30:50.675
of people interest in security.

00:30:50.675 --> 00:30:52.633
But if you are interested,
highly recommend it.

00:30:52.633 --> 00:30:54.109
And it's probably-- I wrote it.

00:30:54.109 --> 00:30:56.150
But I'm going to say it's
the best tool out there

00:30:56.150 --> 00:30:57.108
for this kind of thing.

00:30:57.108 --> 00:30:59.490
And I'm pretty sure I'm right.

00:30:59.490 --> 00:31:02.810
Famous last words
on camera there.

00:31:02.810 --> 00:31:04.100
So play with it if you like.

00:31:04.100 --> 00:31:08.840
And with that I've got
some time for questions.

00:31:08.840 --> 00:31:11.407
And for me to drink some water.

00:31:11.407 --> 00:31:13.490
So there's people running
around with microphones.

00:31:13.490 --> 00:31:15.370
So if you have questions,
I guess stand up

00:31:15.370 --> 00:31:16.745
is what they told
me to tell you.

00:31:20.079 --> 00:31:20.620
AUDIENCE: Hi.

00:31:20.620 --> 00:31:20.980
CHAD BRUBAKER: Hi.

00:31:20.980 --> 00:31:21.605
How's it going?

00:31:21.605 --> 00:31:22.860
AUDIENCE: I was curious.

00:31:22.860 --> 00:31:29.130
If a user decides to add
to the device's trust store

00:31:29.130 --> 00:31:31.990
with a custom root or
custom certificate,

00:31:31.990 --> 00:31:35.402
does that make my
app more vulnerable?

00:31:35.402 --> 00:31:37.110
CHAD BRUBAKER: It
depends on certificate.

00:31:37.110 --> 00:31:37.670
Right?

00:31:37.670 --> 00:31:40.310
I mean I suppose if they added
a certificate that anyone

00:31:40.310 --> 00:31:41.640
in the world knew, yes.

00:31:41.640 --> 00:31:42.290
AUDIENCE: Yeah.

00:31:42.290 --> 00:31:44.500
CHAD BRUBAKER: Generally
I would say no.

00:31:44.500 --> 00:31:46.090
Because what that
tends to be used for

00:31:46.090 --> 00:31:48.330
is sort of like I have a
corporate internal cert.

00:31:48.330 --> 00:31:49.110
So I add that.

00:31:49.110 --> 00:31:51.350
Or I have, I'm doing
some local testing.

00:31:51.350 --> 00:31:54.310
I add a MiTM CA to
the device wide.

00:31:54.310 --> 00:31:55.380
So generally, no.

00:31:55.380 --> 00:31:56.760
I mean it's
technically possible.

00:31:56.760 --> 00:31:57.970
But generally, no.

00:31:57.970 --> 00:32:02.200
AUDIENCE: Is there a way for my
app to decline all like custom

00:32:02.200 --> 00:32:05.047
and only use the trusted store
that comes with the device?

00:32:05.047 --> 00:32:05.880
CHAD BRUBAKER: Yeah.

00:32:05.880 --> 00:32:09.630
So already you can
specify the custom set

00:32:09.630 --> 00:32:12.520
of trusted certificates,
like I mentioned earlier.

00:32:12.520 --> 00:32:14.880
You can easily just only trust
the ones from the system,

00:32:14.880 --> 00:32:16.926
if that's what you'd like to do.

00:32:16.926 --> 00:32:18.800
You should be very
careful doing that though.

00:32:18.800 --> 00:32:21.140
Because if you do that,
there's a good chance

00:32:21.140 --> 00:32:23.300
that your device might
not connect again.

00:32:23.300 --> 00:32:25.580
Say for example, they
added that testing

00:32:25.580 --> 00:32:28.570
cert that they're MiTMing
all the connections with

00:32:28.570 --> 00:32:29.770
to do debugging and similar.

00:32:29.770 --> 00:32:32.740
If you don't trust that CA, that
basically means that device,

00:32:32.740 --> 00:32:35.480
your app's never going to
succeed in a connection again.

00:32:35.480 --> 00:32:37.710
So it's a trade-off you
have to keep in mind.

00:32:37.710 --> 00:32:40.930
Some people have made that
trade-off for security reasons.

00:32:40.930 --> 00:32:42.055
But just keep that in mind.

00:32:45.180 --> 00:32:45.837
Yes.

00:32:45.837 --> 00:32:46.670
AUDIENCE: All right.

00:32:46.670 --> 00:32:50.640
So through the
years the WebView's

00:32:50.640 --> 00:32:53.840
been made as a component that
you can update independently

00:32:53.840 --> 00:32:55.077
of the framework.

00:32:55.077 --> 00:32:57.660
And I'm wondering if there's any
plans of doing the same thing

00:32:57.660 --> 00:33:00.330
possibly with the
BoringSSL or essentially

00:33:00.330 --> 00:33:02.220
whatever SSL library
is being used.

00:33:02.220 --> 00:33:04.510
CHAD BRUBAKER: So actually
that already exists.

00:33:04.510 --> 00:33:06.080
Through Play Services
there is what's

00:33:06.080 --> 00:33:08.620
called a ProviderInstaller,
which actually does install

00:33:08.620 --> 00:33:11.100
the most up to date
version of conscript,

00:33:11.100 --> 00:33:13.700
which is the library that
does all the SSL on Android.

00:33:13.700 --> 00:33:15.580
So it's actually already there.

00:33:15.580 --> 00:33:16.830
It's called ProviderInstaller.

00:33:16.830 --> 00:33:21.060
I believe it's linked on the
SSL training document as well.

00:33:21.060 --> 00:33:23.100
And it's exactly
what you asked for.

00:33:27.240 --> 00:33:28.211
Yeah.

00:33:28.211 --> 00:33:29.960
AUDIENCE: My question
was a little related

00:33:29.960 --> 00:33:32.300
to the question he asked
a bit ago about the user

00:33:32.300 --> 00:33:33.400
installed certificates.

00:33:33.400 --> 00:33:38.860
And I was wondering if Android's
doing anything to really warn

00:33:38.860 --> 00:33:40.159
users more about that.

00:33:40.159 --> 00:33:40.950
CHAD BRUBAKER: So--

00:33:40.950 --> 00:33:42.640
AUDIENCE: One case I
think of is Lenovo.

00:33:42.640 --> 00:33:46.030
They shipped with these
bad root certificates.

00:33:46.030 --> 00:33:48.309
And then I also think about
you go to a coffee shop

00:33:48.309 --> 00:33:50.100
where somebody has
created an open network.

00:33:50.100 --> 00:33:52.540
And they've got like Charles
running on their laptop.

00:33:52.540 --> 00:33:55.600
And they force you to install
their certificate to connect.

00:33:55.600 --> 00:33:57.342
CHAD BRUBAKER: So.

00:33:57.342 --> 00:33:58.300
OK, so a couple things.

00:33:58.300 --> 00:34:02.700
So there is already notification
if you install a certificate.

00:34:02.700 --> 00:34:04.410
In fact, there's a
very scary warning

00:34:04.410 --> 00:34:07.130
that says like your network
traffic may be monitored.

00:34:07.130 --> 00:34:09.489
We basically have no guarantees
for you at this point.

00:34:09.489 --> 00:34:12.243
Because that's true.

00:34:12.243 --> 00:34:14.159
For the Lenovo case
that's a little different.

00:34:14.159 --> 00:34:15.367
Because it wasn't user-added.

00:34:15.367 --> 00:34:18.150
It shipped with sort
of the trusted set.

00:34:18.150 --> 00:34:21.639
For that we have CTS
tests to sort of make sure

00:34:21.639 --> 00:34:24.219
we don't have similar
issues like that on Android.

00:34:24.219 --> 00:34:26.860
For the final thing if
you connect to a network.

00:34:26.860 --> 00:34:28.489
Yes, if you trick
the user or you

00:34:28.489 --> 00:34:31.199
kind of con them into installing
a cert, that would be bad.

00:34:31.199 --> 00:34:34.330
There is a lot of scary
wording already around that.

00:34:34.330 --> 00:34:35.920
So I don't know
how realistic that

00:34:35.920 --> 00:34:37.570
is of actually
convincing someone

00:34:37.570 --> 00:34:39.303
please install my Charles CA.

00:34:39.303 --> 00:34:40.219
But that would be bad.

00:34:46.929 --> 00:34:48.782
We have one here.

00:34:48.782 --> 00:34:50.156
And then one in
the back as well.

00:34:52.862 --> 00:34:53.403
AUDIENCE: Hi.

00:34:53.403 --> 00:34:54.153
CHAD BRUBAKER: Hi.

00:34:54.153 --> 00:34:56.920
AUDIENCE: I just had a question
about certificate pinning.

00:34:56.920 --> 00:34:59.294
What is your opinion about it?

00:34:59.294 --> 00:35:00.960
With the other examples
that you showed,

00:35:00.960 --> 00:35:03.400
there's a lot of bad examples
about certificate pinning.

00:35:03.400 --> 00:35:04.983
And there's also a
couple of libraries

00:35:04.983 --> 00:35:06.480
that are actually doing it.

00:35:06.480 --> 00:35:11.050
And in the official [INAUDIBLE]
there's nothing specific about.

00:35:11.050 --> 00:35:12.670
So-- I just want to
hear your opinion.

00:35:12.670 --> 00:35:15.295
CHAD BRUBAKER:
Yes, so there is--

00:35:15.295 --> 00:35:17.220
there's no current any
public API to do it.

00:35:17.220 --> 00:35:20.105
As far as certificate pinning,
it's useful in general.

00:35:20.105 --> 00:35:22.730
What certificate pinning is for
those of you who don't know, is

00:35:22.730 --> 00:35:25.760
you basically say I expect
this certificate to show

00:35:25.760 --> 00:35:27.260
up somewhere in the chain.

00:35:27.260 --> 00:35:29.260
So that it's not just
that it was trusted by any

00:35:29.260 --> 00:35:30.230
say on the device.

00:35:30.230 --> 00:35:33.850
But you can actually say it
had to come from VeriSign.

00:35:33.850 --> 00:35:36.597
Or it had to come from whoever.

00:35:36.597 --> 00:35:39.180
Now there is some danger there
that you need to be careful of.

00:35:39.180 --> 00:35:42.410
Is if your app has pinning
code and you suddenly

00:35:42.410 --> 00:35:46.950
need to change your certificate,
you may break pinning.

00:35:46.950 --> 00:35:48.950
And if that happens,
you're kind of out of luck.

00:35:48.950 --> 00:35:50.199
But something to keep in mind.

00:35:50.199 --> 00:35:51.970
Pinning in general
is a good thing.

00:35:51.970 --> 00:35:56.560
I know OkHttp has APIs for it.

00:35:56.560 --> 00:35:57.060
Yeah.

00:35:57.060 --> 00:35:57.851
It is a good thing.

00:35:57.851 --> 00:36:01.570
And it's something
that I support.

00:36:01.570 --> 00:36:04.395
There are less bad
examples of code for it.

00:36:04.395 --> 00:36:06.020
Just because there's,
I think, honestly

00:36:06.020 --> 00:36:08.600
just a lot less
examples of code for it.

00:36:08.600 --> 00:36:12.030
It's sort of the same overriding
the TrustManager code.

00:36:12.030 --> 00:36:14.030
Just there's not a lot
of code out there for it.

00:36:16.685 --> 00:36:17.226
AUDIENCE: Hi.

00:36:17.226 --> 00:36:18.405
CHAD BRUBAKER: Hi.

00:36:18.405 --> 00:36:20.530
AUDIENCE: I think in Lollipop
a lot of cyber suites

00:36:20.530 --> 00:36:29.150
were dropped per
default. I had dead ones.

00:36:29.150 --> 00:36:32.150
So much traffic to the
server was not accepted.

00:36:32.150 --> 00:36:35.431
And people were looking at me
because the Android app was not

00:36:35.431 --> 00:36:35.930
working.

00:36:35.930 --> 00:36:38.990
And iOS is still working.

00:36:38.990 --> 00:36:42.100
How can you help get
the message across

00:36:42.100 --> 00:36:46.360
that-- well a lot of app servers
might support still old cyber

00:36:46.360 --> 00:36:49.110
suites.

00:36:49.110 --> 00:36:53.050
And to upgrade the
server, because I'm not

00:36:53.050 --> 00:36:54.160
the security expert.

00:36:54.160 --> 00:36:57.425
But when I connect to an
old server, so to speak--

00:36:57.425 --> 00:36:58.300
CHAD BRUBAKER: Right.

00:36:58.300 --> 00:36:58.901
So.

00:36:58.901 --> 00:37:00.150
AUDIENCE: --people look at me.

00:37:00.150 --> 00:37:00.390
CHAD BRUBAKER: Yeah.

00:37:00.390 --> 00:37:01.556
So dealing with old servers.

00:37:01.556 --> 00:37:04.080
So what you'd
hopefully see is you'll

00:37:04.080 --> 00:37:06.520
get some SSL exception
back saying like basically

00:37:06.520 --> 00:37:09.240
no agreed ciphers or something.

00:37:09.240 --> 00:37:11.250
There is actually
some information

00:37:11.250 --> 00:37:14.460
on the SSL page
about what to do.

00:37:14.460 --> 00:37:16.400
The unfortunate thing
there is it ends up just

00:37:16.400 --> 00:37:19.780
being like upgrade
ciphers on your server.

00:37:19.780 --> 00:37:22.240
And that's really dependent
on like what infrastructure

00:37:22.240 --> 00:37:24.160
are you hosting on?

00:37:24.160 --> 00:37:26.180
I probably couldn't
give you specific advice

00:37:26.180 --> 00:37:28.720
unless you're doing the exact
same flavor of weird Gentoo

00:37:28.720 --> 00:37:31.010
Linux shenanigans
that I like to do.

00:37:31.010 --> 00:37:33.089
Don't do that.

00:37:33.089 --> 00:37:35.630
So I don't know the best thing
to do for good advice on that,

00:37:35.630 --> 00:37:36.560
unfortunately.

00:37:36.560 --> 00:37:38.557
I know people are
working on it, people

00:37:38.557 --> 00:37:40.390
much better at that
kind of thing than I am.

00:37:40.390 --> 00:37:42.973
But I don't have any super great
advice for you unfortunately.

00:37:49.344 --> 00:37:50.510
Anybody else have questions?

00:37:50.510 --> 00:37:51.190
Otherwise you can go get food.

00:37:51.190 --> 00:37:52.180
AUDIENCE: Yeah.

00:37:52.180 --> 00:37:52.680
Hi.

00:37:52.680 --> 00:37:57.090
So you talked about basically
how to trust a server.

00:37:57.090 --> 00:38:01.290
Is there any way to accomplish
the opposite direction?

00:38:01.290 --> 00:38:02.190
How would a server--

00:38:02.190 --> 00:38:04.481
CHAD BRUBAKER: You want the
server to trust the client?

00:38:04.481 --> 00:38:05.954
AUDIENCE: --trust the client?

00:38:05.954 --> 00:38:07.870
CHAD BRUBAKER: You're
in a very dangerous game

00:38:07.870 --> 00:38:08.660
if you're trying to do that.

00:38:08.660 --> 00:38:11.202
So I guess the first question
is, why do you want to do that?

00:38:11.202 --> 00:38:13.159
AUDIENCE: For instance
if your web services are

00:38:13.159 --> 00:38:14.360
intended to be public.

00:38:14.360 --> 00:38:16.580
CHAD BRUBAKER: So for
that, client certificates.

00:38:16.580 --> 00:38:18.867
So you actually do have
this two-way thing.

00:38:18.867 --> 00:38:20.450
So the server gives
you a certificate.

00:38:20.450 --> 00:38:23.230
And the client can as well
present itself a certificate.

00:38:23.230 --> 00:38:25.804
So for that sort of
case, a common example

00:38:25.804 --> 00:38:26.970
is sort of a corporate case.

00:38:26.970 --> 00:38:27.470
Right?

00:38:27.470 --> 00:38:31.530
So your IT department
issues client certificates

00:38:31.530 --> 00:38:32.660
to all your devices.

00:38:32.660 --> 00:38:34.120
And then when those
devices connect

00:38:34.120 --> 00:38:36.250
to your internal servers,
they present that.

00:38:36.250 --> 00:38:39.590
So that you can do that
mutual authentication.

00:38:39.590 --> 00:38:41.470
So that is supported by TLS.

00:38:41.470 --> 00:38:43.760
And it's just a case of
getting those on the device

00:38:43.760 --> 00:38:46.950
and that kind of thing.

00:38:46.950 --> 00:38:50.476
Question over here
in the corner.

00:38:50.476 --> 00:38:51.350
So no one on my side?

00:38:51.350 --> 00:38:53.210
I can't actually see over
here because the lights

00:38:53.210 --> 00:38:54.140
are right in my eyes.

00:38:54.140 --> 00:38:55.530
None of you have questions?

00:38:55.530 --> 00:38:56.440
Sweet.

00:38:56.440 --> 00:38:56.940
Hey.

00:38:56.940 --> 00:38:57.880
AUDIENCE: Hi.

00:38:57.880 --> 00:39:01.430
So you mentioned
about StrictMode.

00:39:01.430 --> 00:39:04.230
So I just wanted to get a little
bit more context on StrictMode

00:39:04.230 --> 00:39:07.770
versus the TLS dependably
that you're talking about.

00:39:07.770 --> 00:39:10.860
Because it deals a lot with
VM policies and the thread

00:39:10.860 --> 00:39:11.620
policies.

00:39:11.620 --> 00:39:13.310
CHAD BRUBAKER: Right.

00:39:13.310 --> 00:39:19.230
So the main difference between
the two is kind of accuracy

00:39:19.230 --> 00:39:20.910
and when you should
probably use them.

00:39:20.910 --> 00:39:23.201
So the StrictMode detection
is actually much more heavy

00:39:23.201 --> 00:39:23.800
handed.

00:39:23.800 --> 00:39:26.220
It does IP level stuff.

00:39:26.220 --> 00:39:28.980
But it also has this issue
of being false positives.

00:39:28.980 --> 00:39:30.660
And generally with
StrictMode stuff

00:39:30.660 --> 00:39:33.870
you probably don't want to ship
with it on on like shipping out

00:39:33.870 --> 00:39:34.630
to users.

00:39:34.630 --> 00:39:37.442
Because it does, it breaks
on things like HTPP proxies.

00:39:37.442 --> 00:39:39.650
The purpose of that manifest
flag, on the other hand,

00:39:39.650 --> 00:39:41.316
is something that you
can sort of safely

00:39:41.316 --> 00:39:46.110
ship in your actual
production builds to users.

00:39:46.110 --> 00:39:48.090
So it sort of just
differs on that front.

00:39:48.090 --> 00:39:53.110
As far as the policy between
like thread and VM policy

00:39:53.110 --> 00:39:54.844
you would have to
ask Jeff Sharkey

00:39:54.844 --> 00:39:56.010
on the exact implementation.

00:39:56.010 --> 00:39:56.968
And he's talking later.

00:39:56.968 --> 00:39:58.310
So you should go ask him.

00:39:58.310 --> 00:40:00.970
But I believe it--
actually I don't

00:40:00.970 --> 00:40:05.130
know on the interplay between
those two between the VM

00:40:05.130 --> 00:40:06.280
and thread policy.

00:40:06.280 --> 00:40:08.164
You have to ask him.

00:40:08.164 --> 00:40:09.560
Any other questions?

00:40:13.710 --> 00:40:14.210
All right.

00:40:14.210 --> 00:40:15.237
I think there is food.

00:40:15.237 --> 00:40:17.820
And I'll be hanging out around
like the office hours and stuff

00:40:17.820 --> 00:40:18.660
if you have more questions.

00:40:18.660 --> 00:40:20.030
So thank you all for coming.

00:40:20.030 --> 00:40:22.030
[APPLAUSE]

00:40:22.030 --> 00:40:24.780
[MUSIC PLAYING]

