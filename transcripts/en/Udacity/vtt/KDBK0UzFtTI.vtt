WEBVTT
Kind: captions
Language: en

00:00:00.230 --> 00:00:01.690
So I'm going to give you the solution

00:00:01.690 --> 00:00:05.260
for this particular question by filling out this

00:00:05.260 --> 00:00:11.920
table. And as I said, take your time thinking about it. And, and verifying your

00:00:11.920 --> 00:00:14.420
own intuition against what I'm presenting to

00:00:14.420 --> 00:00:18.260
you here. Now what you'll find is that

00:00:18.260 --> 00:00:22.934
MCS Link-based queue lock and Anderson's array-based

00:00:22.934 --> 00:00:25.420
queue lock are the two things, two algorithms

00:00:25.420 --> 00:00:28.250
that done, do quite well on most of

00:00:28.250 --> 00:00:31.080
the different categories of attributes that I have mentioned

00:00:31.080 --> 00:00:32.930
to you. But I should tell you that if

00:00:32.930 --> 00:00:35.940
you, if you have fancy instructions. Fancy read, modify,

00:00:35.940 --> 00:00:40.240
write instructions. Then Anderson's and MCS lock give

00:00:40.240 --> 00:00:43.860
you the best performance on all these attributes. But

00:00:43.860 --> 00:00:46.610
on the other hand, if the architecture does not

00:00:46.610 --> 00:00:50.520
support fancy read modified op operations and it only

00:00:50.520 --> 00:00:56.960
has testing set operation available, then some sort of a, a delay base, is a,

00:00:56.960 --> 00:00:59.352
in a exponential delay base or. Starting

00:00:59.352 --> 00:01:03.160
delay based, spin lock algorithm, may turn out

00:01:03.160 --> 00:01:09.280
to be the best performer. And in fact, when the amount of contention for lock

00:01:09.280 --> 00:01:12.500
is, is, fairly low, it's best to use

00:01:12.500 --> 00:01:15.640
a spin lock with exponential delay, start out

00:01:15.640 --> 00:01:18.270
a small delay and keep increasing it. On the other

00:01:18.270 --> 00:01:21.670
hand, if it is a highly contended lock Then it is

00:01:21.670 --> 00:01:25.620
good to use a Spin Lock that has categorically assigned various

00:01:25.620 --> 00:01:27.920
spots for every processor. And one of the things that I

00:01:27.920 --> 00:01:30.322
also want you to notice is that the number of

00:01:30.322 --> 00:01:34.270
re modify right operations that, you need to do for the

00:01:34.270 --> 00:01:38.500
different lock algorithms really depends on the amount of contention that

00:01:38.500 --> 00:01:41.330
is there for the lock in the case of spin algorithms.

00:01:41.330 --> 00:01:43.865
In the case of Anderson's and MCS the number of

00:01:43.865 --> 00:01:47.830
Atomic operation is always one, regardless of how much contention

00:01:47.830 --> 00:01:50.510
there is. And of course, in MCS, this is the

00:01:50.510 --> 00:01:52.530
quanta keys that you have to worry about during, during

00:01:52.530 --> 00:01:56.640
unlocking that might result in an extra remodified item operation.

00:01:56.640 --> 00:01:59.610
But in the case of the Spin algorithms the amount

00:01:59.610 --> 00:02:02.106
of contention is really dependent on the number of re

00:02:02.106 --> 00:02:06.480
modified item operations that you have to perform per critical section.

00:02:06.480 --> 00:02:09.360
Really depends on the, mode of, mode of contention that is there for the lock.

