WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.330
[MUSIC PLAYING]

00:00:05.917 --> 00:00:07.500
ALAN VIVERETT: Good
morning, everyone.

00:00:07.500 --> 00:00:09.660
Welcome to What's New
in Support Library.

00:00:09.660 --> 00:00:10.760
I'm Alan Viverett.

00:00:10.760 --> 00:00:13.175
I'm tech lead for the
Android Support Library team.

00:00:13.175 --> 00:00:14.550
CLARA BAYARRI:
I'm Clara Bayarri.

00:00:14.550 --> 00:00:16.880
I'm a tech lead on the
Android UI Toolkit team.

00:00:16.880 --> 00:00:19.255
ALAN VIVERETT: And we're going
to be talking about what's

00:00:19.255 --> 00:00:22.370
new in Support Library from
25.3 through today's release,

00:00:22.370 --> 00:00:26.540
26.0 Beta 1.

00:00:26.540 --> 00:00:29.090
So has anybody here
not used the Support

00:00:29.090 --> 00:00:30.530
Library to develop
an Android app?

00:00:33.520 --> 00:00:35.230
One person.

00:00:35.230 --> 00:00:38.675
Do you actually
develop Android apps?

00:00:38.675 --> 00:00:41.050
OK, so everybody here is pretty
familiar with the Support

00:00:41.050 --> 00:00:41.590
Library.

00:00:41.590 --> 00:00:44.560
It's a collection of
utilities and classes

00:00:44.560 --> 00:00:48.310
that make it easy to target
older versions of the platform,

00:00:48.310 --> 00:00:51.970
use some new concepts like
material design widgets,

00:00:51.970 --> 00:00:57.572
and it's a very essential part
of Android app development.

00:00:57.572 --> 00:00:59.530
So we're going to start
by talking about what's

00:00:59.530 --> 00:01:01.390
old in the Android
Support Library

00:01:01.390 --> 00:01:04.540
before we move on to what's new.

00:01:04.540 --> 00:01:07.990
So last year you may recall
that we dropped support

00:01:07.990 --> 00:01:09.820
for SDKs lower than 9.

00:01:09.820 --> 00:01:13.930
So Donut, Eclair,
and Froyo went away.

00:01:13.930 --> 00:01:16.570
And this allowed us to
focus more on the API levels

00:01:16.570 --> 00:01:18.670
that developers are
actually targeting.

00:01:18.670 --> 00:01:20.620
So a lot of compat
code went away

00:01:20.620 --> 00:01:23.210
and we reduced our method
count by quite a bit.

00:01:23.210 --> 00:01:26.710
And when you're targeting
platforms earlier than 21,

00:01:26.710 --> 00:01:29.170
you're worried about
the 65k dex limit.

00:01:29.170 --> 00:01:31.690
This is really helpful.

00:01:31.690 --> 00:01:35.980
So today, we have fewer than
1% of active Android devices,

00:01:35.980 --> 00:01:37.780
according to Play
Store check-ins,

00:01:37.780 --> 00:01:40.110
on APIs lower than 14.

00:01:40.110 --> 00:01:43.950
So you may guess what
I'm about to say.

00:01:43.950 --> 00:01:48.210
Is anybody still
targeting Gingerbread?

00:01:48.210 --> 00:01:49.260
One or two people.

00:01:49.260 --> 00:01:51.780
You probably have a
sinking feeling right now.

00:01:51.780 --> 00:01:56.550
So as you might have guessed,
we are removing support for APIs

00:01:56.550 --> 00:01:57.900
lower than 14.

00:01:57.900 --> 00:02:00.930
[APPLAUSE]

00:02:00.930 --> 00:02:04.620
And the Support Library team is
as happy about that as you are.

00:02:04.620 --> 00:02:07.480
So we've got some great
benefits from this,

00:02:07.480 --> 00:02:10.860
but the main thing is that if
you're a minSDK is not already

00:02:10.860 --> 00:02:15.240
14, it will become 14.

00:02:15.240 --> 00:02:17.880
If you're still targeting older
versions, the three of you

00:02:17.880 --> 00:02:20.220
in this room that are still
targeting Gingerbread,

00:02:20.220 --> 00:02:23.380
you can still use the existing
versions of Support Library.

00:02:23.380 --> 00:02:26.010
So 25.3 is going
to continue to work

00:02:26.010 --> 00:02:27.682
on Gingerbread and Honeycomb.

00:02:27.682 --> 00:02:29.640
But if you want to use
some of the new features

00:02:29.640 --> 00:02:31.350
that we're talking
about today, you'll

00:02:31.350 --> 00:02:34.710
need to maybe have a
separate code branch

00:02:34.710 --> 00:02:36.285
where your minSDK is 14.

00:02:38.815 --> 00:02:40.850
All right, so some of
the benefits that you're

00:02:40.850 --> 00:02:41.808
going to get from this.

00:02:41.808 --> 00:02:45.630
We've dropped over
1,400 methods.

00:02:45.630 --> 00:02:48.440
So we're a little bit backing
off from the DEX limit.

00:02:51.250 --> 00:02:54.470
And we're going to be removing
even more classes and methods.

00:02:54.470 --> 00:02:58.090
So just public methods and
classes and interfaces.

00:02:58.090 --> 00:03:02.320
We're deprecating 30 classes,
over 400 methods that

00:03:02.320 --> 00:03:04.120
are no longer
necessary, because there

00:03:04.120 --> 00:03:06.040
are compat wrappers
for APIs that

00:03:06.040 --> 00:03:08.390
actually exist on 14 and above.

00:03:08.390 --> 00:03:12.610
So for example,
ViewCompat.setPivotX is now

00:03:12.610 --> 00:03:14.230
going to show up as deprecated.

00:03:14.230 --> 00:03:15.730
And you can replace
that with a call

00:03:15.730 --> 00:03:20.260
to the actual setPivotX
method, because that exists.

00:03:20.260 --> 00:03:22.810
There are some methods
where we have workarounds

00:03:22.810 --> 00:03:24.880
for bugs in existing versions.

00:03:24.880 --> 00:03:28.300
So it may still be useful
to be calling ViewCompat,

00:03:28.300 --> 00:03:29.800
but anywhere that's
been deprecated,

00:03:29.800 --> 00:03:31.424
you can go ahead and
migrate away from.

00:03:31.424 --> 00:03:35.955
And we'll be removing those
methods in a later version.

00:03:35.955 --> 00:03:37.640
All right, so we've
made it easier

00:03:37.640 --> 00:03:39.890
to develop with the
Android Support Library.

00:03:39.890 --> 00:03:42.860
We're also going to be
improving the way that you get

00:03:42.860 --> 00:03:44.810
the Android Support Library.

00:03:44.810 --> 00:03:46.820
We've modernized our
distribution method

00:03:46.820 --> 00:03:49.160
and added the Google
Maven Repository.

00:03:49.160 --> 00:03:51.460
[CHEERING]

00:03:54.230 --> 00:03:58.160
So every time we update the
Support Library with a bug fix,

00:03:58.160 --> 00:04:02.150
you don't have to download 500
megabytes of internal Maven

00:04:02.150 --> 00:04:02.910
Repository.

00:04:07.320 --> 00:04:10.230
So we're including
Support Library as well as

00:04:10.230 --> 00:04:13.320
constraint layout, the
application architecture

00:04:13.320 --> 00:04:16.170
components that you may
have heard about yesterday,

00:04:16.170 --> 00:04:18.740
through this Maven Repository.

00:04:18.740 --> 00:04:22.570
We're including every historical
version of Support Library,

00:04:22.570 --> 00:04:25.140
including 26 Beta
1, which is only

00:04:25.140 --> 00:04:27.010
available through the
Google Maven Repo.

00:04:27.010 --> 00:04:29.580
So you can go ahead and
make this transition, even

00:04:29.580 --> 00:04:31.360
if you're not targeting 26 yet.

00:04:33.847 --> 00:04:35.930
And it's as simple as just
adding the Google Maven

00:04:35.930 --> 00:04:38.690
Repository to your
Maven repositories

00:04:38.690 --> 00:04:40.880
in your build.gradle,
and then everything else

00:04:40.880 --> 00:04:42.290
continues as usual.

00:04:42.290 --> 00:04:45.350
So you just set up your
compile dependencies

00:04:45.350 --> 00:04:47.670
and you're good to go.

00:04:47.670 --> 00:04:50.382
And just a moment while a
bunch of people take photos.

00:04:50.382 --> 00:04:51.840
The slides will be
available later,

00:04:51.840 --> 00:04:54.950
so any links that we're
showing you can look at later.

00:04:57.980 --> 00:05:00.260
So we've made it easier to
obtain the Support Library.

00:05:00.260 --> 00:05:02.702
We've made it easier to develop
with the Support Library.

00:05:02.702 --> 00:05:04.910
We also want to make it
easier to develop the Support

00:05:04.910 --> 00:05:07.550
Library itself.

00:05:07.550 --> 00:05:10.040
So we're improving workflow
with our Issue Tracker.

00:05:10.040 --> 00:05:13.070
We've moved from
Google code to our new

00:05:13.070 --> 00:05:14.556
issuetracker.google.com.

00:05:14.556 --> 00:05:19.010
And this is providing a
much, much better tool for us

00:05:19.010 --> 00:05:23.330
to track bugs, manage hot
lists, and respond to you

00:05:23.330 --> 00:05:26.150
and let you know that
we're following up on what

00:05:26.150 --> 00:05:27.997
you're telling us about bugs.

00:05:27.997 --> 00:05:29.330
But this is also better for you.

00:05:29.330 --> 00:05:30.564
It's more stable.

00:05:30.564 --> 00:05:32.480
And this is going to
provide a faster response

00:05:32.480 --> 00:05:34.970
time when you file bugs.

00:05:34.970 --> 00:05:39.220
But-- thank you.

00:05:39.220 --> 00:05:41.750
So when you file
a bug, sometimes

00:05:41.750 --> 00:05:43.300
maybe we're slow to respond.

00:05:43.300 --> 00:05:47.380
We try hard, but there
are a lot of bugs.

00:05:47.380 --> 00:05:50.890
So if you decide that you
want to handle a bug yourself,

00:05:50.890 --> 00:05:54.000
we have support for developing
Support Library from AOSP

00:05:54.000 --> 00:05:55.960
in Android Studio.

00:05:55.960 --> 00:05:58.660
So if you check out our
minimal branch of AOSP,

00:05:58.660 --> 00:06:00.610
an unbundled Support
Library branch that

00:06:00.610 --> 00:06:02.710
is I think around
6 gigs right now,

00:06:02.710 --> 00:06:06.280
instead of the full 150
gig Android checkout,

00:06:06.280 --> 00:06:09.760
you can open the framework
support root in Android Studio.

00:06:09.760 --> 00:06:10.810
Everything works.

00:06:10.810 --> 00:06:13.090
You don't have a bunch
of weird red error lines.

00:06:13.090 --> 00:06:17.380
If you've tried to develop
AOSP code, framework code,

00:06:17.380 --> 00:06:20.050
in IntelliJ, you've
probably had a rough time.

00:06:20.050 --> 00:06:22.180
But we have vastly
streamlined the experience

00:06:22.180 --> 00:06:24.520
for developing Support Library.

00:06:24.520 --> 00:06:26.650
And we want to get
patches from you.

00:06:26.650 --> 00:06:29.590
So we have a guideline for
external contributions now

00:06:29.590 --> 00:06:31.340
available on
android.googlesource.com

00:06:31.340 --> 00:06:34.810
in the framework
support section.

00:06:34.810 --> 00:06:36.670
So if you send us
a pull request,

00:06:36.670 --> 00:06:39.790
you send us a [INAUDIBLE]
CL review for bug fixes

00:06:39.790 --> 00:06:40.630
only right now.

00:06:40.630 --> 00:06:42.970
We're not taking API changes.

00:06:42.970 --> 00:06:45.400
For bug fixes,
we'll look at those.

00:06:45.400 --> 00:06:46.401
We'll give you feedback.

00:06:46.401 --> 00:06:48.358
And hopefully, we'll be
able to integrate those

00:06:48.358 --> 00:06:49.520
into our main repository.

00:06:53.050 --> 00:06:55.040
And now over to Clara
to talk about some

00:06:55.040 --> 00:06:57.170
of the actual new features.

00:06:57.170 --> 00:06:58.610
CLARA BAYARRI: Thank you, Alan.

00:06:58.610 --> 00:07:00.579
It's an exciting year for techs.

00:07:00.579 --> 00:07:02.870
We have four main features
that we're presenting today.

00:07:02.870 --> 00:07:05.420
They're in Android O and
they're all in the Support

00:07:05.420 --> 00:07:08.060
Library 26 Beta 1.

00:07:08.060 --> 00:07:08.860
Let me start.

00:07:08.860 --> 00:07:10.610
The first feature I
want to present today,

00:07:10.610 --> 00:07:12.740
we're calling it Fonts in XML.

00:07:12.740 --> 00:07:15.492
If you've ever tried to use
a custom font in your app,

00:07:15.492 --> 00:07:17.450
you might be familiar to
a painful process that

00:07:17.450 --> 00:07:19.160
looks something like this.

00:07:19.160 --> 00:07:22.890
You create your custom TextView,
you load your typeface--

00:07:22.890 --> 00:07:24.750
well, you get it from
the typeface APIs,

00:07:24.750 --> 00:07:26.060
you load it onto yourself.

00:07:26.060 --> 00:07:28.700
And then the worst part,
you use your custom typeface

00:07:28.700 --> 00:07:30.290
everywhere in your XMLs.

00:07:30.290 --> 00:07:31.520
That's not fun.

00:07:31.520 --> 00:07:33.410
We've seen some more
clever ideas out there,

00:07:33.410 --> 00:07:35.510
like people using data
[INAUDIBLE] to solve this,

00:07:35.510 --> 00:07:38.350
but we decided to fix
this in the framework.

00:07:38.350 --> 00:07:41.510
So starting now, fonts
are a new resource type.

00:07:41.510 --> 00:07:43.283
We have created-- thank you.

00:07:43.283 --> 00:07:45.648
[APPLAUSE]

00:07:48.020 --> 00:07:49.760
You can now put all
of your font files

00:07:49.760 --> 00:07:51.650
into the res/font font folder.

00:07:51.650 --> 00:07:54.590
We will be taking care
of creating IDs for you.

00:07:54.590 --> 00:07:56.676
We are also adding
support for font families.

00:07:56.676 --> 00:07:58.550
Font families are when
you have more than one

00:07:58.550 --> 00:07:59.511
file to define a font.

00:07:59.511 --> 00:08:01.760
So for example, you have a
regular, a bolt, an italic,

00:08:01.760 --> 00:08:04.730
and a bold italic file, and you
want to treat those as a unit.

00:08:04.730 --> 00:08:06.900
We are adding support
for that as well.

00:08:06.900 --> 00:08:09.380
So we've defined
new XML attributes.

00:08:09.380 --> 00:08:11.720
You can define an XML
with a font family tag

00:08:11.720 --> 00:08:14.810
and font tags for each of
your fonts in the family.

00:08:14.810 --> 00:08:16.460
You can see here,
I've defined a family

00:08:16.460 --> 00:08:18.680
with a regular and a bold font.

00:08:18.680 --> 00:08:21.470
Creating this, you tell us
what the style and the weight

00:08:21.470 --> 00:08:24.590
is for each of the files,
and then this, for example,

00:08:24.590 --> 00:08:27.242
would generate r.font.myfont.

00:08:27.242 --> 00:08:27.950
This is a family.

00:08:27.950 --> 00:08:30.020
It can be used as a
unit and everywhere.

00:08:30.020 --> 00:08:32.299
The framework will take care
of selecting the font it

00:08:32.299 --> 00:08:36.080
wants from that group.

00:08:36.080 --> 00:08:39.380
So you may be familiar with the
Android font family attribute

00:08:39.380 --> 00:08:40.309
in TextView.

00:08:40.309 --> 00:08:42.530
This has existed
since way before.

00:08:42.530 --> 00:08:45.770
It takes strings, so it takes
things like san serif, cursive,

00:08:45.770 --> 00:08:46.990
or monospace.

00:08:46.990 --> 00:08:50.580
Well, we've extended it
now to take font resources.

00:08:50.580 --> 00:08:52.370
So you can now say
android:fontFamily

00:08:52.370 --> 00:08:56.480
@font/myfont, and it just works.

00:08:56.480 --> 00:08:58.850
We've also added support,
obviously, for text styles.

00:08:58.850 --> 00:09:00.680
So text style
already interested.

00:09:00.680 --> 00:09:02.690
If font/myfont
here were a family

00:09:02.690 --> 00:09:04.850
and you tell us to use
bold, we will automatically

00:09:04.850 --> 00:09:06.950
use the bold front
within your family.

00:09:06.950 --> 00:09:09.860
This also applies to text
spans, so if you're using spans

00:09:09.860 --> 00:09:12.510
within your text to
define different styles,

00:09:12.510 --> 00:09:14.420
we will automatically
select the font for you

00:09:14.420 --> 00:09:16.670
and take care of everything.

00:09:16.670 --> 00:09:19.180
As you can imagine, it
also works with styles.

00:09:19.180 --> 00:09:21.740
Just define it yourself,
set it on your TextView,

00:09:21.740 --> 00:09:23.070
everything works.

00:09:23.070 --> 00:09:25.400
And if you want your
resource from code,

00:09:25.400 --> 00:09:28.220
we've added
ResourcesCompat.getFont.

00:09:28.220 --> 00:09:32.570
Just give us the ID, we'll
give you a typeface back.

00:09:32.570 --> 00:09:35.630
This is all available
to you today on APIs 14

00:09:35.630 --> 00:09:38.384
and above thanks to
the Support Library.

00:09:38.384 --> 00:09:40.844
[APPLAUSE]

00:09:44.300 --> 00:09:46.910
So let me move on to
another fonts feature.

00:09:46.910 --> 00:09:49.580
We have downloadable fonts.

00:09:49.580 --> 00:09:52.790
We noticed that lots of you
bundle fonts into your APK.

00:09:52.790 --> 00:09:55.507
And fonts are really
large files, even more,

00:09:55.507 --> 00:09:57.590
like, you are probably
bundling fonts that are not

00:09:57.590 --> 00:09:59.510
even optimized for mobile.

00:09:59.510 --> 00:10:02.210
And it turns out that Android
doesn't need about 50%

00:10:02.210 --> 00:10:02.990
of the file.

00:10:02.990 --> 00:10:05.180
We don't need it for
mobile, but you are still

00:10:05.180 --> 00:10:07.112
bundling it into your app.

00:10:07.112 --> 00:10:08.570
We made a little
analysis and we've

00:10:08.570 --> 00:10:11.660
found that the top 25 apps
on the Play Store that

00:10:11.660 --> 00:10:15.830
do bundle fonts are bundling an
average of about 500k in fonts

00:10:15.830 --> 00:10:18.170
that we have in the
Google Fonts catalog.

00:10:18.170 --> 00:10:20.117
Couldn't we do better with that?

00:10:20.117 --> 00:10:22.700
Also, never to mention the fact
that you are bundling the same

00:10:22.700 --> 00:10:24.650
font in several different apps.

00:10:24.650 --> 00:10:27.720
And the user is downloading
this font over and over again.

00:10:27.720 --> 00:10:30.440
So this is where downloadable
fonts comes into place.

00:10:30.440 --> 00:10:32.660
We've created the concept
of a font provider.

00:10:32.660 --> 00:10:34.580
And a font provider
is the separate entity

00:10:34.580 --> 00:10:36.740
that is not your app,
and its own mission

00:10:36.740 --> 00:10:39.470
is to fetch fonts, cache
them, and serve them

00:10:39.470 --> 00:10:42.230
to you and to every other
app that wants fonts.

00:10:42.230 --> 00:10:44.807
So then, hopefully, you can
get rid of your bundled fonts

00:10:44.807 --> 00:10:46.640
and just rely on a font
provider to give you

00:10:46.640 --> 00:10:49.370
all of the fonts you want.

00:10:49.370 --> 00:10:51.140
The way this works
is all apps can

00:10:51.140 --> 00:10:54.950
access a font provider via
the FontsContractCompat APIs.

00:10:54.950 --> 00:10:56.810
This means that you all
have one entry point

00:10:56.810 --> 00:10:59.240
into the font provider.

00:10:59.240 --> 00:11:03.146
The benefits of this are-- oh
sorry, can you go back one?

00:11:03.146 --> 00:11:06.410
The benefits of this if we
have one copy of the font.

00:11:06.410 --> 00:11:09.050
We only have one copy
of the font on memory,

00:11:09.050 --> 00:11:10.640
saving memory for the user.

00:11:10.640 --> 00:11:13.130
We have one copy
on the device, one

00:11:13.130 --> 00:11:15.854
copy so that you don't have
to bundle it in your APK.

00:11:15.854 --> 00:11:17.270
And we're only
downloading it once

00:11:17.270 --> 00:11:20.680
from the network if you are
also downloading it yourself.

00:11:20.680 --> 00:11:22.430
We're very proud to
announce that our very

00:11:22.430 --> 00:11:24.650
first font provider
available today to you

00:11:24.650 --> 00:11:26.990
is a collaboration with
the Google Fonts team.

00:11:26.990 --> 00:11:30.230
We are providing the
entire Google Fonts catalog

00:11:30.230 --> 00:11:32.480
through Google Play Services
so that your app can

00:11:32.480 --> 00:11:34.400
use all of the Google fonts.

00:11:34.400 --> 00:11:38.664
That is more than 800 fonts
just out there for you.

00:11:38.664 --> 00:11:41.646
[APPLAUSE]

00:11:44.116 --> 00:11:45.490
The way this works
in code is you

00:11:45.490 --> 00:11:47.650
need to create a
FontRequest that just

00:11:47.650 --> 00:11:49.100
tells us what font you want.

00:11:49.100 --> 00:11:52.510
So you will give us an authority
and a package for the provider,

00:11:52.510 --> 00:11:54.280
the actual query of the font--

00:11:54.280 --> 00:11:57.340
so say you want
Comic Sans, maybe--

00:11:57.340 --> 00:11:59.950
and then the array
of certificates

00:11:59.950 --> 00:12:02.140
that the provider
is signed with.

00:12:02.140 --> 00:12:03.430
This is very important.

00:12:03.430 --> 00:12:05.560
Fonts are kind of a
security loophole.

00:12:05.560 --> 00:12:07.630
They can load code and
they can execute code.

00:12:07.630 --> 00:12:09.910
So we want to make sure you
have a trust relationship

00:12:09.910 --> 00:12:11.260
with your font provider.

00:12:11.260 --> 00:12:13.450
You don't want to be
loading fonts from anywhere.

00:12:13.450 --> 00:12:16.030
For example, we can assure
you that all the Google fonts

00:12:16.030 --> 00:12:17.770
available in Google
Play Services,

00:12:17.770 --> 00:12:18.790
we have verified them.

00:12:18.790 --> 00:12:22.900
We know they are secure and we
know they are mobile optimized.

00:12:22.900 --> 00:12:24.520
Next, you will
create a callback.

00:12:24.520 --> 00:12:26.920
And the callback has
two main functions,

00:12:26.920 --> 00:12:29.440
one for when the typeface
is successfully retrieved

00:12:29.440 --> 00:12:31.210
and one for when
there's a failure

00:12:31.210 --> 00:12:33.070
and what the failure was.

00:12:33.070 --> 00:12:34.930
Once you have these
two components,

00:12:34.930 --> 00:12:37.510
you will call
FontsContractCompat.requestFont,

00:12:37.510 --> 00:12:40.320
and that just takes a context,
the request and the callback

00:12:40.320 --> 00:12:43.210
that you just generated,
and a handler.

00:12:43.210 --> 00:12:45.610
Requesting fonts
may take some time.

00:12:45.610 --> 00:12:47.800
We are making a connection
into a font provider,

00:12:47.800 --> 00:12:49.990
so we want to make sure
that you have control

00:12:49.990 --> 00:12:51.910
over where this is executed.

00:12:51.910 --> 00:12:54.250
Please do not give us
a UI thread handler.

00:12:54.250 --> 00:12:56.260
We may block your UI thread.

00:12:56.260 --> 00:12:59.410
So it's all under your control.

00:12:59.410 --> 00:13:01.510
Because I just talked
of fonts in XML,

00:13:01.510 --> 00:13:03.670
isn't it obvious that we
tied these two together?

00:13:03.670 --> 00:13:07.690
You can obviously specify
your downloaded fonts in XML.

00:13:07.690 --> 00:13:09.880
We've added four attributes
to the font family

00:13:09.880 --> 00:13:13.760
tag for the authority, package,
query, and certificates.

00:13:13.760 --> 00:13:16.230
This is equivalent to
creating a font request.

00:13:16.230 --> 00:13:19.330
You just specify it in XML,
use it in all of your layouts,

00:13:19.330 --> 00:13:21.250
and we will take care
of fetching the font

00:13:21.250 --> 00:13:22.900
and displaying it for you.

00:13:22.900 --> 00:13:24.550
Obviously, if the
font takes too long,

00:13:24.550 --> 00:13:27.250
we may time out and render
in the default system fonts,

00:13:27.250 --> 00:13:29.964
so bear that in mind.

00:13:29.964 --> 00:13:32.380
Next, I want to show you the
Android Studio team have done

00:13:32.380 --> 00:13:34.240
a great collaboration with us.

00:13:34.240 --> 00:13:36.220
As you can see, I
have a TextView here.

00:13:36.220 --> 00:13:38.410
If you open the Properties
in Android Studio,

00:13:38.410 --> 00:13:41.200
you'll see there's a
Font Family section.

00:13:41.200 --> 00:13:44.830
Usually it takes things like
san serif, cursive, monospace.

00:13:44.830 --> 00:13:47.040
Now if you open it--

00:13:47.040 --> 00:13:49.620
there you go-- and you scroll
all the way to the bottom,

00:13:49.620 --> 00:13:51.670
there is a More Fonts option.

00:13:51.670 --> 00:13:54.820
That opens the new Font Picker.

00:13:54.820 --> 00:13:56.950
Font Picker will show you
fonts that are already

00:13:56.950 --> 00:13:59.380
in your project because
you bundle them,

00:13:59.380 --> 00:14:03.919
fonts that are in the Android
system, and downloadable fonts.

00:14:03.919 --> 00:14:05.710
Right now, you may
notice on the top right,

00:14:05.710 --> 00:14:07.240
the source says Google Fonts.

00:14:07.240 --> 00:14:09.220
We are ready to integrate
with any other font

00:14:09.220 --> 00:14:10.540
provider that comes out.

00:14:10.540 --> 00:14:12.340
Right now, it shows
all of Google Fonts,

00:14:12.340 --> 00:14:16.477
so if you scroll up it, you will
see that is the entire catalog.

00:14:16.477 --> 00:14:18.060
Right now, I want
to search for fonts.

00:14:18.060 --> 00:14:20.680
so for example, Pacifica is
one of my favorite fonts.

00:14:20.680 --> 00:14:24.310
So I'll search for it,
select it, just hit OK.

00:14:24.310 --> 00:14:27.910
Android Studio generates
all of the XML for me

00:14:27.910 --> 00:14:32.060
and even pre-renders it to
show me what it will look like.

00:14:32.060 --> 00:14:34.410
[APPLAUSE]

00:14:36.300 --> 00:14:38.930
Notice that if we open
the XML that it generated,

00:14:38.930 --> 00:14:40.777
it generated the four
attributes we needed

00:14:40.777 --> 00:14:42.860
and all of the certificates
needed for Google Play

00:14:42.860 --> 00:14:44.420
Services, all for free.

00:14:47.570 --> 00:14:49.730
If you want to know more
about the Android Studio,

00:14:49.730 --> 00:14:52.010
go check out What's New in
Android Development Tools.

00:14:52.010 --> 00:14:56.810
It's today at 11:30
in the amphitheater.

00:14:56.810 --> 00:14:58.880
For more information
on downloadable fonts,

00:14:58.880 --> 00:15:00.980
we do have a sample
app that is published

00:15:00.980 --> 00:15:02.750
on GitHub since yesterday.

00:15:02.750 --> 00:15:05.660
We have public documentation
that you can access.

00:15:05.660 --> 00:15:07.530
Again, the slides will
be available later,

00:15:07.530 --> 00:15:09.250
so don't worry about the links.

00:15:09.250 --> 00:15:10.885
We have Google
Fonts documentation

00:15:10.885 --> 00:15:13.010
that will tell you how to
use the Google Fonts Font

00:15:13.010 --> 00:15:14.860
Provider specifically.

00:15:14.860 --> 00:15:16.790
And the one caveat to
use the Google Fonts,

00:15:16.790 --> 00:15:18.320
because we've done
an integration

00:15:18.320 --> 00:15:21.860
in Google Play Services v11,
that is not out to the public

00:15:21.860 --> 00:15:22.670
just yet.

00:15:22.670 --> 00:15:25.610
But you can join their beta
through that link over there

00:15:25.610 --> 00:15:28.460
and get v11 so that you can play
around with it as a developer

00:15:28.460 --> 00:15:31.760
until it actually rolls out.

00:15:31.760 --> 00:15:35.326
Downloadable fonts available
to everyone API 14 and above.

00:15:35.326 --> 00:15:37.806
[APPLAUSE]

00:15:37.806 --> 00:15:39.300
Thanks.

00:15:39.300 --> 00:15:41.920
Next, let's talk about emoji.

00:15:41.920 --> 00:15:44.500
Have you ever seen one of
these boxes with a cross

00:15:44.500 --> 00:15:45.280
in the middle?

00:15:45.280 --> 00:15:46.930
We call this tofu,
and it's what we

00:15:46.930 --> 00:15:49.810
render when we can't render
a glyph you've asked for.

00:15:49.810 --> 00:15:52.000
This is extremely
common in emoji.

00:15:52.000 --> 00:15:55.660
Every year, the Unicode
defines more emojis.

00:15:55.660 --> 00:15:59.320
And it turns out that our emoji
font is bundled in your system,

00:15:59.320 --> 00:16:00.635
so we can't actually update it.

00:16:00.635 --> 00:16:02.760
We can't actually give you
all of these new emojis.

00:16:02.760 --> 00:16:04.390
So you start seeing these.

00:16:04.390 --> 00:16:06.910
Maybe you, with a new
device, will send an emoji

00:16:06.910 --> 00:16:08.830
to your friend who
has a Kit Kat device.

00:16:08.830 --> 00:16:10.580
They will never
actually see that emoji.

00:16:10.580 --> 00:16:11.840
And that's really bad.

00:16:11.840 --> 00:16:14.480
So we've decided to fix this.

00:16:14.480 --> 00:16:16.840
The Emoji Compatibility
Library is a support library

00:16:16.840 --> 00:16:20.020
that has access to
newer emoji fonts.

00:16:20.020 --> 00:16:22.731
So what we do is for each emoji
that you're trying to render,

00:16:22.731 --> 00:16:24.480
we check if the system
font can render it.

00:16:24.480 --> 00:16:26.326
If so, we just leave it be.

00:16:26.326 --> 00:16:27.950
If it can't, we
substitute it with what

00:16:27.950 --> 00:16:29.710
we call an emoji span.

00:16:29.710 --> 00:16:32.590
And that means that we can
use our available emoji

00:16:32.590 --> 00:16:34.990
font to actually
render that for you.

00:16:34.990 --> 00:16:37.600
There are two ways to use the
Emoji Compatibility Library.

00:16:37.600 --> 00:16:39.730
You can either bundle
the font into your app

00:16:39.730 --> 00:16:41.950
or you can let us use
downloadable fonts to actually

00:16:41.950 --> 00:16:44.050
get the latest
emoji font for you

00:16:44.050 --> 00:16:47.115
from Google Play Services
and Google Fonts.

00:16:47.115 --> 00:16:48.490
So to look at
this, when you want

00:16:48.490 --> 00:16:50.380
to use a downloaded
configuration,

00:16:50.380 --> 00:16:53.344
you will use a support
emoji dependency.

00:16:53.344 --> 00:16:55.510
You will then create a
fontRequest, which we've just

00:16:55.510 --> 00:16:57.022
seen in downloadable fonts.

00:16:57.022 --> 00:16:59.230
You will be able to get
these values from Google Play

00:16:59.230 --> 00:17:03.160
Services and Google Fonts to
actually use their emoji font.

00:17:03.160 --> 00:17:05.470
And then you
initialize EmojiCompat

00:17:05.470 --> 00:17:06.970
with a
FontRequestEmojiCompatConfig.

00:17:06.970 --> 00:17:10.656
Request And this just tells it
to go find the downloaded font.

00:17:10.656 --> 00:17:12.530
If you do this in your
application on Create,

00:17:12.530 --> 00:17:13.839
then you're set.

00:17:13.839 --> 00:17:16.990
If you say, oh, but I actually
target non-Google Play Services

00:17:16.990 --> 00:17:18.609
devices, I can't use this.

00:17:18.609 --> 00:17:19.540
That's fine.

00:17:19.540 --> 00:17:21.849
We have the bundled
configuration for you.

00:17:21.849 --> 00:17:23.150
You use a different dependency.

00:17:23.150 --> 00:17:25.630
You use support-emoji-bundled
dependency.

00:17:25.630 --> 00:17:28.119
And what that does is it
pulls the latest font we have

00:17:28.119 --> 00:17:30.550
at that moment into your APK.

00:17:30.550 --> 00:17:33.370
Do note, that font
is about 7 megabytes,

00:17:33.370 --> 00:17:35.377
so be careful with this.

00:17:35.377 --> 00:17:37.210
And of course, once
you've shipped your app,

00:17:37.210 --> 00:17:39.490
it will not get updated,
so it's up to you

00:17:39.490 --> 00:17:43.396
to ship a new update on your
app to get the newer fonts.

00:17:43.396 --> 00:17:44.770
To do this--
extremely easy-- you

00:17:44.770 --> 00:17:46.930
create a
BundledEmojiCompatConfig, set

00:17:46.930 --> 00:17:50.050
it, initialize on
EmojiCompat, and you're set.

00:17:50.050 --> 00:17:52.300
Then to actually use
the emojis in your app,

00:17:52.300 --> 00:17:54.190
we've provided some
widgets for you.

00:17:54.190 --> 00:17:58.270
So we have EmojiTextView,
EmojiEditText, and EmojiButton.

00:17:58.270 --> 00:18:00.790
These automatically
use EmojiCompat, render

00:18:00.790 --> 00:18:02.720
all of the emojis for you.

00:18:02.720 --> 00:18:04.990
Some of you might say, oh,
but I have my custom class.

00:18:04.990 --> 00:18:07.240
I don't want to use this
one or extend this one.

00:18:07.240 --> 00:18:08.230
I have my own thing.

00:18:08.230 --> 00:18:09.370
Go read the documentation.

00:18:09.370 --> 00:18:10.990
We have very
detailed steps on how

00:18:10.990 --> 00:18:16.420
to integrate EmojiCompat into
your own custom class as well.

00:18:16.420 --> 00:18:18.484
Hopefully, you will
stop seeing tofu,

00:18:18.484 --> 00:18:20.650
especially if you're something
like a messaging app.

00:18:20.650 --> 00:18:21.983
This is really important to you.

00:18:21.983 --> 00:18:26.050
You will start showing
images to your users.

00:18:26.050 --> 00:18:26.920
Again, some links.

00:18:26.920 --> 00:18:28.410
We have a sample app.

00:18:28.410 --> 00:18:29.920
It's available on GitHub.

00:18:29.920 --> 00:18:32.640
We have public documentation
on how to use this.

00:18:32.640 --> 00:18:35.410
And because-- if you use a
downloaded configuration,

00:18:35.410 --> 00:18:36.820
you are using
downloadable fonts.

00:18:36.820 --> 00:18:37.810
It has the same caveat.

00:18:37.810 --> 00:18:40.330
We need Google Play
Services v11 beta,

00:18:40.330 --> 00:18:44.260
so please sign up to the beta
to play around with that.

00:18:44.260 --> 00:18:49.560
This is available to
everyone APIs 19 and above.

00:18:49.560 --> 00:18:52.890
Finally, I want to present our
fourth and important feature.

00:18:52.890 --> 00:18:55.260
We've made TextView autosizing.

00:18:55.260 --> 00:18:56.640
What this means
is you might have

00:18:56.640 --> 00:18:58.574
run into this case where
you have some text.

00:18:58.574 --> 00:19:00.240
You've carefully
measured your TextView.

00:19:00.240 --> 00:19:01.525
You know your text fits.

00:19:01.525 --> 00:19:03.900
And then your translations
come around and they're longer

00:19:03.900 --> 00:19:04.691
and they don't fit.

00:19:04.691 --> 00:19:06.780
And you start seeing
that your text doesn't

00:19:06.780 --> 00:19:08.130
fit into its bounds.

00:19:08.130 --> 00:19:10.380
Well, that's where
autosizing can help you.

00:19:10.380 --> 00:19:13.380
What we do with autosizing is
we choose the size of the text

00:19:13.380 --> 00:19:15.300
depending on the
boundaries of the TextView.

00:19:15.300 --> 00:19:18.240
So as you can see, we will
increase your text size

00:19:18.240 --> 00:19:21.690
as needed to fill
in its container.

00:19:21.690 --> 00:19:24.180
Using this is really,
really simple.

00:19:24.180 --> 00:19:27.510
You use this autosize text
type attribute on TextView

00:19:27.510 --> 00:19:28.980
and set it to Uniform.

00:19:28.980 --> 00:19:31.110
What this will do is
it will scale the text

00:19:31.110 --> 00:19:34.079
both in x and y-axis uniformly.

00:19:34.079 --> 00:19:36.120
Some of you may say, oh,
but I need more control.

00:19:36.120 --> 00:19:38.270
I can't just let my
text be any size.

00:19:38.270 --> 00:19:39.750
My UX people would kill me.

00:19:39.750 --> 00:19:40.500
That's fine.

00:19:40.500 --> 00:19:41.970
We have more control for you.

00:19:41.970 --> 00:19:45.670
You may give us either an array
of preset sizes, in which case,

00:19:45.670 --> 00:19:47.730
we will take the best
match out of the sizes

00:19:47.730 --> 00:19:50.550
you give us for the
given boundaries.

00:19:50.550 --> 00:19:54.000
Or you can give us a
minimum, a maximum size,

00:19:54.000 --> 00:19:55.835
and a step or granularity.

00:19:55.835 --> 00:19:57.960
What we do with this is,
for example, in this case,

00:19:57.960 --> 00:20:00.600
you say from 12 to
100 in steps of 2.

00:20:00.600 --> 00:20:04.770
We will take values such as
12, 14, 16, 18, and so on,

00:20:04.770 --> 00:20:08.070
and we will snap
only to those sizes.

00:20:08.070 --> 00:20:09.960
Autosizing TextView is
available to you today

00:20:09.960 --> 00:20:13.200
in Support Library
for APIs 14 and above.

00:20:13.200 --> 00:20:16.269
Now let me hand it back to
Alan to talk about innovations.

00:20:16.269 --> 00:20:18.060
ALAN VIVERETT: All
right, so now that we've

00:20:18.060 --> 00:20:20.018
made our apps beautiful
by switching everything

00:20:20.018 --> 00:20:22.820
over to Comic Sans
and adding new emoji,

00:20:22.820 --> 00:20:24.840
let's also make our
animations beautiful.

00:20:24.840 --> 00:20:26.580
So Support Library
26 adds a number

00:20:26.580 --> 00:20:28.080
of backwards
compatible improvements

00:20:28.080 --> 00:20:30.180
to graphics and animations.

00:20:30.180 --> 00:20:32.800
And first among these
is dynamic animation.

00:20:32.800 --> 00:20:36.390
So this is going to be a
library for direct interaction

00:20:36.390 --> 00:20:39.250
and animations in
response to that.

00:20:39.250 --> 00:20:42.570
So these are based on
velocity instead of duration.

00:20:42.570 --> 00:20:44.670
You may have had
an animation where

00:20:44.670 --> 00:20:48.180
a user touches the screen,
drags something down,

00:20:48.180 --> 00:20:50.490
and the touch has some
sense of velocity.

00:20:50.490 --> 00:20:53.370
So you want to fling
something off the screen

00:20:53.370 --> 00:20:56.190
and you want the velocity
to match their initial touch

00:20:56.190 --> 00:20:56.970
movement.

00:20:56.970 --> 00:20:58.540
And you can run
those calculations,

00:20:58.540 --> 00:21:00.706
and you can figure out an
interpolation curve that's

00:21:00.706 --> 00:21:02.250
going to roughly
match what they were

00:21:02.250 --> 00:21:04.320
doing before the
animation started,

00:21:04.320 --> 00:21:05.599
but it can be a lot of work.

00:21:05.599 --> 00:21:07.140
So dynamic animation
is going to help

00:21:07.140 --> 00:21:09.900
you create natural-looking
animations in response

00:21:09.900 --> 00:21:12.000
to direct user interaction.

00:21:12.000 --> 00:21:14.970
We've provided two animations
right now-- spring animation

00:21:14.970 --> 00:21:16.020
and fling animation.

00:21:16.020 --> 00:21:18.937
And these are
respectively for behavior

00:21:18.937 --> 00:21:20.520
where you want to
drag something down,

00:21:20.520 --> 00:21:22.830
and maybe it snaps back
and eventually reaches

00:21:22.830 --> 00:21:25.405
an equilibrium point, or
maybe you grab something

00:21:25.405 --> 00:21:27.030
and you fling it off
the screen and you

00:21:27.030 --> 00:21:29.850
want it to slow down as
though there's friction.

00:21:29.850 --> 00:21:33.110
So what that looks
like in practice

00:21:33.110 --> 00:21:37.310
is I have an Android view, a
Bugdroid view, and I touch it.

00:21:37.310 --> 00:21:40.220
And as I'm pulling it down,
we start feeding touch events

00:21:40.220 --> 00:21:41.960
into a velocity tracker.

00:21:41.960 --> 00:21:43.820
So this knows how
fast the Bugdroid

00:21:43.820 --> 00:21:46.190
is going to be moving
when I let go of it.

00:21:46.190 --> 00:21:50.000
As I'm moving it down, we're
tracking the y-translation

00:21:50.000 --> 00:21:51.674
so that it follows my finger.

00:21:51.674 --> 00:21:53.090
And when I remove
my finger, we're

00:21:53.090 --> 00:21:55.640
going to start our dynamic
animation, our spring

00:21:55.640 --> 00:21:59.024
animation, on our Bugdroid view.

00:21:59.024 --> 00:22:00.440
So from code that
looks like this,

00:22:00.440 --> 00:22:03.119
we're creating a new spring
animation on our Bugdroid view.

00:22:03.119 --> 00:22:04.910
We're going to be
animating the translation

00:22:04.910 --> 00:22:07.340
y, the vertical translation
that we've been using

00:22:07.340 --> 00:22:09.346
to track our user interaction.

00:22:09.346 --> 00:22:10.720
And when I let go
of that, I want

00:22:10.720 --> 00:22:14.480
it to return to an equilibrium
state of zero translation y.

00:22:14.480 --> 00:22:16.910
So when it springs up,
it's going to overshoot.

00:22:16.910 --> 00:22:17.930
It's going to overshoot.

00:22:17.930 --> 00:22:20.690
And eventually, it's going to
settle on zero translation in y

00:22:20.690 --> 00:22:23.210
as equilibrium.

00:22:23.210 --> 00:22:26.110
Spring animation uses physical
properties of springs.

00:22:26.110 --> 00:22:28.660
So the damping ratio is
how quickly the spring

00:22:28.660 --> 00:22:29.890
is going to come to rest.

00:22:29.890 --> 00:22:33.430
A damping ratio of zero
would oscillate infinitely.

00:22:33.430 --> 00:22:37.270
A very high damping ratio will
stop animating very quickly.

00:22:37.270 --> 00:22:40.420
Stiffness is how quickly the
spring is going to snap back.

00:22:40.420 --> 00:22:43.430
So a very high stiffness,
when I pull the spring down,

00:22:43.430 --> 00:22:45.400
it's going to snap
back immediately.

00:22:45.400 --> 00:22:47.290
A very low stiffness
would be like a car

00:22:47.290 --> 00:22:48.310
with a loose suspension.

00:22:48.310 --> 00:22:50.335
It's going to just bounce
back and forth slowly.

00:22:53.826 --> 00:22:55.450
Finally, I want to
pull in the velocity

00:22:55.450 --> 00:22:56.449
that I've been tracking.

00:22:56.449 --> 00:22:58.570
This is the direct
interaction portion.

00:22:58.570 --> 00:23:00.790
So I pull it down very quickly.

00:23:00.790 --> 00:23:02.620
When I lift my finger
up, I want it to keep

00:23:02.620 --> 00:23:04.076
moving with that energy.

00:23:04.076 --> 00:23:06.700
If I move my finger very slowly,
I'm going to lift my finger up

00:23:06.700 --> 00:23:08.260
and I want it to
start moving back,

00:23:08.260 --> 00:23:10.426
because there's very little
energy that my finger is

00:23:10.426 --> 00:23:11.630
putting into it.

00:23:11.630 --> 00:23:13.324
Then finally, we
start our animation

00:23:13.324 --> 00:23:14.740
and we end up with
an Android that

00:23:14.740 --> 00:23:16.540
snaps back, springs
a little bit,

00:23:16.540 --> 00:23:20.345
and eventually comes
to rest at equilibrium.

00:23:20.345 --> 00:23:22.470
If you want to learn more
about dynamic animations,

00:23:22.470 --> 00:23:24.940
you can check out Android
Animations Spring to Life.

00:23:24.940 --> 00:23:28.050
That'll be tomorrow at
2:30, stage 2 right here.

00:23:30.445 --> 00:23:31.820
We've also made
some improvements

00:23:31.820 --> 00:23:33.840
to drawing with
vector drawables.

00:23:33.840 --> 00:23:37.580
We've added feature
parity with fill type.

00:23:37.580 --> 00:23:42.380
So fill type, if you've ever
received an asset from UX that

00:23:42.380 --> 00:23:44.930
has hollow areas in
the middle, so here we

00:23:44.930 --> 00:23:48.470
have a light bulb that
has a single path defining

00:23:48.470 --> 00:23:51.000
the entire area and it
has some empty areas.

00:23:51.000 --> 00:23:55.200
So this looks great in Photoshop
when our designer exports it.

00:23:55.200 --> 00:23:56.870
This looks great
in Asset Studio,

00:23:56.870 --> 00:23:59.510
which is rendering as though
you're on the latest platform.

00:23:59.510 --> 00:24:02.570
But once you load it onto
a device running API lower

00:24:02.570 --> 00:24:05.570
than 24, you see that there's
some weird artifacting

00:24:05.570 --> 00:24:06.380
at the edges.

00:24:06.380 --> 00:24:12.210
And the reasoning for that
is the format of SVG that

00:24:12.210 --> 00:24:15.240
gets exported by our tool,
in this case Photoshop,

00:24:15.240 --> 00:24:17.190
uses a fill rule.

00:24:17.190 --> 00:24:21.300
And this defines what the
inside of our vector path is.

00:24:21.300 --> 00:24:23.190
So you'll notice we
have a single path that

00:24:23.190 --> 00:24:24.700
defines our light bulb.

00:24:24.700 --> 00:24:28.500
We have a rule that tells the
renderer which is inside fill

00:24:28.500 --> 00:24:32.800
and which is outside fill,
which is transparent.

00:24:32.800 --> 00:24:35.620
So this was added in
the framework in API 24,

00:24:35.620 --> 00:24:38.160
and we've now
backported it to API 14.

00:24:38.160 --> 00:24:40.300
So the assets that
you're using, generating

00:24:40.300 --> 00:24:43.270
from Android Studio, the
assets that your designers are

00:24:43.270 --> 00:24:45.400
generating from
Photoshop, you can just

00:24:45.400 --> 00:24:49.135
use across all supported APIs.

00:24:49.135 --> 00:24:50.440
[APPLAUSE]

00:24:50.440 --> 00:24:54.250
So you write one
XML and it looks

00:24:54.250 --> 00:24:55.690
correct across all platforms.

00:24:55.690 --> 00:24:58.270
Nobody has to go and hand
edit things so that you

00:24:58.270 --> 00:25:01.975
can use a single fill rule.

00:25:01.975 --> 00:25:04.790
All right, speaking
of vectors and parity,

00:25:04.790 --> 00:25:06.670
we're adding parity
for the ability

00:25:06.670 --> 00:25:10.060
to morph between different
paths and interpolate along

00:25:10.060 --> 00:25:13.250
a path for AnimatedVector
DrawableCompat.

00:25:13.250 --> 00:25:17.120
So again, these are
some new features

00:25:17.120 --> 00:25:19.970
on the platform that were
backporting to API 14.

00:25:19.970 --> 00:25:23.270
You'll be using the
same XML on API 24,

00:25:23.270 --> 00:25:26.400
API 26 that you would on API 14.

00:25:26.400 --> 00:25:28.430
And here for path
data morphing, we're

00:25:28.430 --> 00:25:30.980
going to be able to
take an initial path

00:25:30.980 --> 00:25:35.570
spec, so the long string of
numbers and letters and commas

00:25:35.570 --> 00:25:38.090
that you may see if you actually
dive down into your vector

00:25:38.090 --> 00:25:40.660
drawable paths.

00:25:40.660 --> 00:25:42.920
One caveat here is the
path formats must match.

00:25:42.920 --> 00:25:45.560
And this is something that
can be handled by tools.

00:25:45.560 --> 00:25:48.920
We use Alex Lockwood's
ShapeShifter tool for this demo

00:25:48.920 --> 00:25:50.300
that we're about to show.

00:25:50.300 --> 00:25:53.320
So here's what path morphing
looks like on a device.

00:25:53.320 --> 00:25:56.356
A very common case of morphing
from a buffalo to a hippo

00:25:56.356 --> 00:25:57.980
to an elephant that
I'm sure you're all

00:25:57.980 --> 00:26:00.050
familiar with in
your Android apps.

00:26:03.970 --> 00:26:05.460
All right, so let's
look at what's

00:26:05.460 --> 00:26:07.170
going on at the XML level.

00:26:07.170 --> 00:26:09.000
We have a vector
drawable defining

00:26:09.000 --> 00:26:10.620
our starting image, a buffalo.

00:26:10.620 --> 00:26:14.340
And here I've extracted out
our path data for the buffalo.

00:26:14.340 --> 00:26:16.290
So that long string
of letters and numbers

00:26:16.290 --> 00:26:17.904
that defines our
vector path I've

00:26:17.904 --> 00:26:19.320
pulled out into a
string resource.

00:26:19.320 --> 00:26:22.470
And we're going to be
reusing it in our animation.

00:26:22.470 --> 00:26:25.060
And this also just makes
things way more readable.

00:26:25.060 --> 00:26:26.640
So we have our
starting vector XML

00:26:26.640 --> 00:26:29.550
that we want to animate from.

00:26:29.550 --> 00:26:31.200
And we have our object animator.

00:26:31.200 --> 00:26:34.140
Now, the new thing here
for API 14 and above

00:26:34.140 --> 00:26:37.840
is the ability to specify path
data as your property type.

00:26:37.840 --> 00:26:42.000
So we're going to animate the
value from our buffalo path

00:26:42.000 --> 00:26:44.130
spec to our hippo path spec.

00:26:44.130 --> 00:26:46.740
And this is actually going
to transform the points

00:26:46.740 --> 00:26:51.010
and give us that morphing
animation that we saw.

00:26:51.010 --> 00:26:53.140
We pull this all together
into an animated vector

00:26:53.140 --> 00:26:56.530
which points the drawable
to our starting buffalo.

00:26:56.530 --> 00:26:59.226
The target, we're taking our
buffalo path from that drawable

00:26:59.226 --> 00:27:00.850
and we're going to
be morphing the path

00:27:00.850 --> 00:27:03.725
data from a buffalo to a hippo.

00:27:03.725 --> 00:27:06.100
So we're going to take this
a little bit further and take

00:27:06.100 --> 00:27:10.780
advantage of a feature in AAPT
to use a bundled XML format.

00:27:10.780 --> 00:27:13.360
So you may not have used this
before, but it's really cool.

00:27:13.360 --> 00:27:17.780
This is supported through AAPT,
so it's backwards compatible.

00:27:17.780 --> 00:27:19.210
We're going to
take this and we're

00:27:19.210 --> 00:27:23.890
going to take our drawable
and expand that out

00:27:23.890 --> 00:27:26.890
into an attr element.

00:27:26.890 --> 00:27:29.290
This replaces the Android
drawable attribute

00:27:29.290 --> 00:27:30.970
in our animated vector element.

00:27:30.970 --> 00:27:34.180
And we're going to inline
our initial drawable,

00:27:34.180 --> 00:27:38.390
our buffalo vector drawable
XML in this element.

00:27:38.390 --> 00:27:40.670
So now we've gotten
rid of our buffalo.xml

00:27:40.670 --> 00:27:44.720
and we've centralized things
in our animal_morph_bundle.xml.

00:27:44.720 --> 00:27:46.580
So if you're not
reusing buffalo.xml,

00:27:46.580 --> 00:27:48.380
you just need it
for this animation,

00:27:48.380 --> 00:27:51.700
it can really simplify and clean
up your resources directory.

00:27:51.700 --> 00:27:54.740
We're going do the same
thing with our animation.

00:27:54.740 --> 00:27:57.104
And now we have everything
neatly contained in one file.

00:27:57.104 --> 00:27:58.520
So the only thing
that we're going

00:27:58.520 --> 00:28:01.850
to reference from our layout
XML or reference from code

00:28:01.850 --> 00:28:04.400
is our animal_morph_bundle
drawable.

00:28:04.400 --> 00:28:07.370
And we don't need to
keep a separate animation

00:28:07.370 --> 00:28:10.580
XML in some other
resources folder somewhere.

00:28:10.580 --> 00:28:12.890
If we're trying to send
assets between developers

00:28:12.890 --> 00:28:15.560
or from designers to
developers and vice versa, we

00:28:15.560 --> 00:28:17.321
don't have to bundle
everything into a zip

00:28:17.321 --> 00:28:19.820
and then tell everyone, OK,
this goes in the anim directory,

00:28:19.820 --> 00:28:20.780
this goes in--

00:28:20.780 --> 00:28:22.040
everything is one file.

00:28:22.040 --> 00:28:24.950
Very clean, supported all
the way down to API 14

00:28:24.950 --> 00:28:25.565
through AAPT.

00:28:28.540 --> 00:28:32.200
We've also backported support
for interpolation along a path.

00:28:32.200 --> 00:28:35.290
So this provides parity
with the platform AVD again.

00:28:35.290 --> 00:28:37.420
And this is going
to allow you to set

00:28:37.420 --> 00:28:39.730
the interpolator on
your object animators

00:28:39.730 --> 00:28:43.480
to be a path using a spec
similar to what you would

00:28:43.480 --> 00:28:47.430
use for SVG and what we support
in vector drawable path data.

00:28:47.430 --> 00:28:52.850
So here's an example of
combined path morphing and path

00:28:52.850 --> 00:28:54.755
interpolation.

00:28:54.755 --> 00:28:56.380
This one's pretty
complicated, so we're

00:28:56.380 --> 00:28:58.796
going to take a slightly more
simple example to break down

00:28:58.796 --> 00:28:59.786
how it came together.

00:28:59.786 --> 00:29:01.160
Let's say our UX
designer was not

00:29:01.160 --> 00:29:03.200
feeling particularly
creative and they want

00:29:03.200 --> 00:29:04.670
us to shrink down a square.

00:29:04.670 --> 00:29:06.920
But they want it to have
an interesting acceleration

00:29:06.920 --> 00:29:08.300
curve as it's shrinking down.

00:29:08.300 --> 00:29:10.210
So we're going to
shrink down real fast,

00:29:10.210 --> 00:29:13.400
bounce back a little bit,
and then slowly reduce it

00:29:13.400 --> 00:29:15.620
to a point.

00:29:15.620 --> 00:29:18.470
So our path interpolator
that we use on API 14

00:29:18.470 --> 00:29:21.920
through current API 26 is
going to look like this.

00:29:21.920 --> 00:29:25.310
We define our path data
as an SVG-like path,

00:29:25.310 --> 00:29:26.990
a vector drawable path data.

00:29:26.990 --> 00:29:29.220
And if you render that,
it looks like this.

00:29:29.220 --> 00:29:33.930
So our curve is quickly
reducing from 1.0,

00:29:33.930 --> 00:29:35.810
we're bouncing
back a little bit,

00:29:35.810 --> 00:29:38.540
and then we're slowly
tapering off to zero.

00:29:38.540 --> 00:29:41.330
And this is what you see
when it shrinks very quickly

00:29:41.330 --> 00:29:42.800
and then gets a
little bit larger

00:29:42.800 --> 00:29:45.710
and shrinks down to zero.

00:29:45.710 --> 00:29:47.960
It's very easy to use this
in our object animator.

00:29:47.960 --> 00:29:52.070
Again, compatible, same
XML for API 14 and 26.

00:29:52.070 --> 00:29:56.027
We just set our interpolator to
be our new path interpolator.

00:29:56.027 --> 00:29:57.860
Once again, I'm going
to pull everything out

00:29:57.860 --> 00:30:01.160
into an XML bundle because
it helps clean things up.

00:30:03.980 --> 00:30:06.770
And then we get this
quick shrink and then

00:30:06.770 --> 00:30:08.010
a slow fade to zero.

00:30:11.272 --> 00:30:13.600
All right, so far, all
the screenshots and videos

00:30:13.600 --> 00:30:15.100
that I've shown you
are from phones.

00:30:15.100 --> 00:30:17.710
But Support Library 26
also introduces a number

00:30:17.710 --> 00:30:22.150
of changes for alternative form
factors, like watches and TVs.

00:30:22.150 --> 00:30:24.250
So on the watch side
of things, we're

00:30:24.250 --> 00:30:27.010
integrating the Android
Wearable Support Library

00:30:27.010 --> 00:30:29.639
into the mainline
Android Support Library.

00:30:29.639 --> 00:30:31.930
So what you're going to see
is a number of improvements

00:30:31.930 --> 00:30:33.700
in core UI elements.

00:30:33.700 --> 00:30:36.280
Things like improved
circular scrolling

00:30:36.280 --> 00:30:39.460
with WearableRecyclerView,
better support

00:30:39.460 --> 00:30:41.920
for responsive layouts
on round screens

00:30:41.920 --> 00:30:45.250
and square screens
with Box Inset Layout,

00:30:45.250 --> 00:30:48.460
and consistent user interaction
models from classes like Swipe

00:30:48.460 --> 00:30:50.110
Dismiss Frame Layout.

00:30:50.110 --> 00:30:53.050
So you can learn more about
developing for Wear devices

00:30:53.050 --> 00:30:55.150
at the Android Wear
UI Best Practices

00:30:55.150 --> 00:30:58.646
talk, which will be at this
stage on Friday at 3:30 PM,

00:30:58.646 --> 00:30:59.145
tomorrow.

00:31:01.780 --> 00:31:04.210
We've also made some
improvements for developing TV

00:31:04.210 --> 00:31:04.810
interfaces.

00:31:04.810 --> 00:31:06.970
So the Leanback
Library has added

00:31:06.970 --> 00:31:11.440
PlaybackTransportControlGlue,
which adds a seek interface

00:31:11.440 --> 00:31:12.280
for videos.

00:31:12.280 --> 00:31:15.250
And if you're writing an
interface for Leanback,

00:31:15.250 --> 00:31:17.960
this is probably something that
was painful to do yourself.

00:31:17.960 --> 00:31:21.730
So we have a prepackaged
seek with preview.

00:31:21.730 --> 00:31:23.980
And we're also allowing
you to embed a video view

00:31:23.980 --> 00:31:25.480
inside of a detail fragment.

00:31:25.480 --> 00:31:27.950
So if you're writing
something for browsing media

00:31:27.950 --> 00:31:30.640
and you want to be able to play
that media inline while you're

00:31:30.640 --> 00:31:34.120
showing people the description
of it or the ratings of it,

00:31:34.120 --> 00:31:37.060
that's now very simple to
do with DetailsFragmentB

00:31:37.060 --> 00:31:38.170
ackgroundController.

00:31:38.170 --> 00:31:41.650
And if you want to learn more
about developing for TVs,

00:31:41.650 --> 00:31:44.050
you already missed the What's
New for Android TV talk.

00:31:44.050 --> 00:31:46.450
However, you can check
out their office hours

00:31:46.450 --> 00:31:48.890
at 6:30 this evening
in Section 3.

00:31:51.760 --> 00:31:54.400
So we have a number of other
smaller behavior changes

00:31:54.400 --> 00:31:56.830
and new classes that I think
it's important for everyone

00:31:56.830 --> 00:32:00.370
to know about in the 26 release
of Android Support Library.

00:32:00.370 --> 00:32:02.830
So first of all,
PreferenceDataStore.

00:32:02.830 --> 00:32:06.020
For anyone who's storing their
preferences in the cloud,

00:32:06.020 --> 00:32:08.020
you may have had to do
something a little tricky

00:32:08.020 --> 00:32:09.561
if you're using the
normal Preference

00:32:09.561 --> 00:32:11.830
fragment and PreferenceManager.

00:32:11.830 --> 00:32:15.100
So this allows you to customize
the way that you're PUT

00:32:15.100 --> 00:32:18.560
and GET calls for
preferences are handled.

00:32:18.560 --> 00:32:20.770
So the implementation
of this, let's

00:32:20.770 --> 00:32:22.930
say we want to store
preferences in the cloud.

00:32:22.930 --> 00:32:24.520
We'll extend
PreferenceDataStore,

00:32:24.520 --> 00:32:27.070
the new class, and
we'll override, here,

00:32:27.070 --> 00:32:29.170
just getBoolean and putBoolean.

00:32:29.170 --> 00:32:31.390
So when we put a
Boolean preference in,

00:32:31.390 --> 00:32:33.460
we're going to start some
asynchronous call that

00:32:33.460 --> 00:32:34.849
stores it in the cloud.

00:32:34.849 --> 00:32:36.640
Now, because we want
to be able to retrieve

00:32:36.640 --> 00:32:40.270
a value without having to
wait for cloud interaction,

00:32:40.270 --> 00:32:42.280
we're going to store
this locally as well.

00:32:42.280 --> 00:32:44.530
And an important thing to
keep in mind with this class

00:32:44.530 --> 00:32:47.360
is that calls are going to
happen on the main thread.

00:32:47.360 --> 00:32:49.600
So if you're doing
some long transaction,

00:32:49.600 --> 00:32:51.100
you're doing something
in the cloud,

00:32:51.100 --> 00:32:52.780
you're persisting
something to disk,

00:32:52.780 --> 00:32:54.910
you want to do it
asynchronously and have some way

00:32:54.910 --> 00:32:58.450
to handle quick calls
after that to get Booleans.

00:32:58.450 --> 00:33:01.360
So something like local caching.

00:33:01.360 --> 00:33:03.110
To set this up on our
Preference fragment,

00:33:03.110 --> 00:33:04.820
we're just going to grab
our PreferenceManager.

00:33:04.820 --> 00:33:07.194
We're going to set an instance
of our PreferenceDataStore

00:33:07.194 --> 00:33:07.910
on that.

00:33:07.910 --> 00:33:11.300
And all subsequent GET and
PUT calls to our preferences

00:33:11.300 --> 00:33:16.060
are going to go through our
new PreferenceDataStore.

00:33:16.060 --> 00:33:18.895
We also have some changes
in FragmentManager

00:33:18.895 --> 00:33:20.270
that are important
to know about.

00:33:20.270 --> 00:33:23.980
So transaction calls, things
like executePendingTransaction

00:33:23.980 --> 00:33:26.470
commitNow can be
dangerous to call

00:33:26.470 --> 00:33:29.150
if you're already
in a transaction,

00:33:29.150 --> 00:33:30.970
if you're already
in a state change.

00:33:30.970 --> 00:33:33.980
These can be re-entrant and
have some unexpected behavior.

00:33:33.980 --> 00:33:37.030
So we want to make it
a little bit easier

00:33:37.030 --> 00:33:39.130
to do the right thing,
more difficult to do

00:33:39.130 --> 00:33:39.850
the wrong thing.

00:33:39.850 --> 00:33:42.100
And these will now
be strictly enforced

00:33:42.100 --> 00:33:44.080
and throw exceptions
if you're trying to do

00:33:44.080 --> 00:33:45.750
re-entrant transaction calls.

00:33:48.872 --> 00:33:50.580
And for developers
interested in learning

00:33:50.580 --> 00:33:52.230
about their UI
performance, we've

00:33:52.230 --> 00:33:53.970
added FrameMetricsAggregator.

00:33:53.970 --> 00:33:56.220
So this allows you to
attach to an activity

00:33:56.220 --> 00:33:59.370
and get information about
rendering milestones

00:33:59.370 --> 00:34:03.060
during the lifecycle
of a drawing frame.

00:34:03.060 --> 00:34:06.564
Now, if you don't know what a
rendering milestone is, or you

00:34:06.564 --> 00:34:07.980
do know and you
want to learn more

00:34:07.980 --> 00:34:10.469
about assessing the
performance of your UI,

00:34:10.469 --> 00:34:13.230
you can check out the
Android Performance UI talk.

00:34:13.230 --> 00:34:15.780
If you don't care about
performance of your UI talk,

00:34:15.780 --> 00:34:18.960
but you saw Chet's talk
yesterday, Speechless,

00:34:18.960 --> 00:34:23.370
and you just really love
Chet talks, it has Chet.

00:34:23.370 --> 00:34:26.230
So you can check that out
Friday at 1:30 PM on Stage 4.

00:34:28.880 --> 00:34:33.980
And last but not least, this
is actually from 25.3 API,

00:34:33.980 --> 00:34:35.699
but I thought it was
really important.

00:34:35.699 --> 00:34:38.060
So ActionBarDrawerToggle
is this class

00:34:38.060 --> 00:34:44.510
used to implement the Hamburger
button, the button that you

00:34:44.510 --> 00:34:47.300
use to open the Navigation
Drawer, the three lines.

00:34:47.300 --> 00:34:49.880
And you may have
noticed in some apps

00:34:49.880 --> 00:34:52.790
that when you start to pull your
drawer out over the Hamburger

00:34:52.790 --> 00:34:54.710
button, it animates.

00:34:54.710 --> 00:34:56.939
And this is officially
not the thing

00:34:56.939 --> 00:34:58.730
that you're supposed
to do, but I see a lot

00:34:58.730 --> 00:34:59.834
of apps that have done it.

00:34:59.834 --> 00:35:01.250
I see a lot of
apps where it looks

00:35:01.250 --> 00:35:02.499
like you've probably fixed it.

00:35:02.499 --> 00:35:05.170
So that it looks like
this when it's wrong.

00:35:05.170 --> 00:35:08.940
We pull it and the Hamburger
turns just a little bit.

00:35:08.940 --> 00:35:10.239
Some lettuce is falling out.

00:35:10.239 --> 00:35:11.780
So you noticed it
wasn't quite right.

00:35:11.780 --> 00:35:13.670
Maybe you fixed it.

00:35:13.670 --> 00:35:16.040
Maybe the way that you fixed
it took a couple hundred

00:35:16.040 --> 00:35:19.040
lines because it was
really difficult to do.

00:35:19.040 --> 00:35:21.530
Don't do that.

00:35:21.530 --> 00:35:24.470
Stop that and instead do this.

00:35:24.470 --> 00:35:27.080
We now have one line to disable
the drawer slide animation

00:35:27.080 --> 00:35:29.120
and get the correct behavior.

00:35:29.120 --> 00:35:32.200
So use that.

00:35:32.200 --> 00:35:35.290
And also, check out some of
the next talks that we have,

00:35:35.290 --> 00:35:37.250
some of the talks that
we've referenced today.

00:35:37.250 --> 00:35:39.250
So we have What's New in
Android Developer Tools

00:35:39.250 --> 00:35:40.833
if you want to learn
more about things

00:35:40.833 --> 00:35:43.720
like the font tool that's
integrated into Android Studio.

00:35:43.720 --> 00:35:46.390
Android Performance UI, if
you want to see Chet on stage

00:35:46.390 --> 00:35:47.280
again.

00:35:47.280 --> 00:35:50.740
Android Animation Spring to
Life for direct interaction.

00:35:50.740 --> 00:35:53.410
And Android Wear
UI Best Practices

00:35:53.410 --> 00:35:58.110
for learning how to create
UIs optimized for watches.

00:35:58.110 --> 00:35:59.299
So thanks everybody.

00:35:59.299 --> 00:36:00.340
CLARA BAYARRI: Thank you.

00:36:00.340 --> 00:36:02.673
ALAN VIVERETT: We'll be around
for questions afterwards.

00:36:02.673 --> 00:36:05.006
[APPLAUSE]

00:36:05.006 --> 00:36:08.950
[MUSIC PLAYING]

