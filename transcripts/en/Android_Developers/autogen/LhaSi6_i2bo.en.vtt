WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.090
we know developers don't like standing

00:00:02.090 --> 00:00:02.100
we know developers don't like standing
 

00:00:02.100 --> 00:00:04.400
we know developers don't like standing
still and want access to the latest and

00:00:04.400 --> 00:00:04.410
still and want access to the latest and
 

00:00:04.410 --> 00:00:06.470
still and want access to the latest and
greatest features in the tools they use

00:00:06.470 --> 00:00:06.480
greatest features in the tools they use
 

00:00:06.480 --> 00:00:08.750
greatest features in the tools they use
and that includes programming languages

00:00:08.750 --> 00:00:08.760
and that includes programming languages
 

00:00:08.760 --> 00:00:11.480
and that includes programming languages
with Android studio 3 though we're not

00:00:11.480 --> 00:00:11.490
with Android studio 3 though we're not
 

00:00:11.490 --> 00:00:13.730
with Android studio 3 though we're not
only shipping Kotlin as an official new

00:00:13.730 --> 00:00:13.740
only shipping Kotlin as an official new
 

00:00:13.740 --> 00:00:15.589
only shipping Kotlin as an official new
language for Android but we're also

00:00:15.589 --> 00:00:15.599
language for Android but we're also
 

00:00:15.599 --> 00:00:17.570
language for Android but we're also
making life easier for those of you who

00:00:17.570 --> 00:00:17.580
making life easier for those of you who
 

00:00:17.580 --> 00:00:20.179
making life easier for those of you who
prefer to code in Java by introducing

00:00:20.179 --> 00:00:20.189
prefer to code in Java by introducing
 

00:00:20.189 --> 00:00:21.950
prefer to code in Java by introducing
support for Java 8 language features in

00:00:21.950 --> 00:00:21.960
support for Java 8 language features in
 

00:00:21.960 --> 00:00:24.380
support for Java 8 language features in
the default tool chain starting with the

00:00:24.380 --> 00:00:24.390
the default tool chain starting with the
 

00:00:24.390 --> 00:00:26.870
the default tool chain starting with the
Android Gradle plug-in version 3 you can

00:00:26.870 --> 00:00:26.880
Android Gradle plug-in version 3 you can
 

00:00:26.880 --> 00:00:28.990
Android Gradle plug-in version 3 you can
freely use lambdas method references

00:00:28.990 --> 00:00:29.000
freely use lambdas method references
 

00:00:29.000 --> 00:00:32.240
freely use lambdas method references
default and static interface methods try

00:00:32.240 --> 00:00:32.250
default and static interface methods try
 

00:00:32.250 --> 00:00:34.459
default and static interface methods try
with resources and repeating annotations

00:00:34.459 --> 00:00:34.469
with resources and repeating annotations
 

00:00:34.469 --> 00:00:37.760
with resources and repeating annotations
on all Android API levels if you

00:00:37.760 --> 00:00:37.770
on all Android API levels if you
 

00:00:37.770 --> 00:00:39.110
on all Android API levels if you
previously switched to using the

00:00:39.110 --> 00:00:39.120
previously switched to using the
 

00:00:39.120 --> 00:00:41.569
previously switched to using the
experimental Jack compiler to be able to

00:00:41.569 --> 00:00:41.579
experimental Jack compiler to be able to
 

00:00:41.579 --> 00:00:43.580
experimental Jack compiler to be able to
use these features please note that

00:00:43.580 --> 00:00:43.590
use these features please note that
 

00:00:43.590 --> 00:00:45.709
use these features please note that
there are now many benefits when using

00:00:45.709 --> 00:00:45.719
there are now many benefits when using
 

00:00:45.719 --> 00:00:48.260
there are now many benefits when using
the default tool chain Jack offered more

00:00:48.260 --> 00:00:48.270
the default tool chain Jack offered more
 

00:00:48.270 --> 00:00:50.270
the default tool chain Jack offered more
restricted Java eight support that

00:00:50.270 --> 00:00:50.280
restricted Java eight support that
 

00:00:50.280 --> 00:00:52.760
restricted Java eight support that
worked only for API 24 and above it

00:00:52.760 --> 00:00:52.770
worked only for API 24 and above it
 

00:00:52.770 --> 00:00:55.369
worked only for API 24 and above it
wasn't as fast when compiling code and

00:00:55.369 --> 00:00:55.379
wasn't as fast when compiling code and
 

00:00:55.379 --> 00:00:57.709
wasn't as fast when compiling code and
it created problems for developers using

00:00:57.709 --> 00:00:57.719
it created problems for developers using
 

00:00:57.719 --> 00:01:00.010
it created problems for developers using
tools that depend on the class format

00:01:00.010 --> 00:01:00.020
tools that depend on the class format
 

00:01:00.020 --> 00:01:02.869
tools that depend on the class format
that's why we deprecated Jack and will

00:01:02.869 --> 00:01:02.879
that's why we deprecated Jack and will
 

00:01:02.879 --> 00:01:04.490
that's why we deprecated Jack and will
no longer support it in Android studio

00:01:04.490 --> 00:01:04.500
no longer support it in Android studio
 

00:01:04.500 --> 00:01:07.219
no longer support it in Android studio
and tools the good news is that

00:01:07.219 --> 00:01:07.229
and tools the good news is that
 

00:01:07.229 --> 00:01:09.800
and tools the good news is that
switching back is very simple just

00:01:09.800 --> 00:01:09.810
switching back is very simple just
 

00:01:09.810 --> 00:01:11.600
switching back is very simple just
delete these lines from your build file

00:01:11.600 --> 00:01:11.610
delete these lines from your build file
 

00:01:11.610 --> 00:01:13.880
delete these lines from your build file
if you're using one of the popular

00:01:13.880 --> 00:01:13.890
if you're using one of the popular
 

00:01:13.890 --> 00:01:15.800
if you're using one of the popular
third-party solutions for Java 8

00:01:15.800 --> 00:01:15.810
third-party solutions for Java 8
 

00:01:15.810 --> 00:01:18.050
third-party solutions for Java 8
language features you might find that

00:01:18.050 --> 00:01:18.060
language features you might find that
 

00:01:18.060 --> 00:01:19.789
language features you might find that
they lack some of the functionality of

00:01:19.789 --> 00:01:19.799
they lack some of the functionality of
 

00:01:19.799 --> 00:01:21.920
they lack some of the functionality of
the default tool chain such as being

00:01:21.920 --> 00:01:21.930
the default tool chain such as being
 

00:01:21.930 --> 00:01:23.810
the default tool chain such as being
able to seamlessly process libraries

00:01:23.810 --> 00:01:23.820
able to seamlessly process libraries
 

00:01:23.820 --> 00:01:26.330
able to seamlessly process libraries
that use Java 8 code if you want to make

00:01:26.330 --> 00:01:26.340
that use Java 8 code if you want to make
 

00:01:26.340 --> 00:01:28.370
that use Java 8 code if you want to make
the switch you'll have to remove retro

00:01:28.370 --> 00:01:28.380
the switch you'll have to remove retro
 

00:01:28.380 --> 00:01:30.140
the switch you'll have to remove retro
lambda or dexguard from your build

00:01:30.140 --> 00:01:30.150
lambda or dexguard from your build
 

00:01:30.150 --> 00:01:32.390
lambda or dexguard from your build
otherwise the built-in support will

00:01:32.390 --> 00:01:32.400
otherwise the built-in support will
 

00:01:32.400 --> 00:01:34.819
otherwise the built-in support will
remain disabled other than that make

00:01:34.819 --> 00:01:34.829
remain disabled other than that make
 

00:01:34.829 --> 00:01:36.260
remain disabled other than that make
sure you have the following lines in

00:01:36.260 --> 00:01:36.270
sure you have the following lines in
 

00:01:36.270 --> 00:01:38.480
sure you have the following lines in
build.gradle and that you're using at

00:01:38.480 --> 00:01:38.490
build.gradle and that you're using at
 

00:01:38.490 --> 00:01:40.600
build.gradle and that you're using at
least Android Gradle plug-in version 3

00:01:40.600 --> 00:01:40.610
least Android Gradle plug-in version 3
 

00:01:40.610 --> 00:01:43.010
least Android Gradle plug-in version 3
for important plug-in migration

00:01:43.010 --> 00:01:43.020
for important plug-in migration
 

00:01:43.020 --> 00:01:45.710
for important plug-in migration
instructions refer to our other video or

00:01:45.710 --> 00:01:45.720
instructions refer to our other video or
 

00:01:45.720 --> 00:01:47.179
instructions refer to our other video or
the documentation linked in the

00:01:47.179 --> 00:01:47.189
the documentation linked in the
 

00:01:47.189 --> 00:01:49.880
the documentation linked in the
description so now that you have

00:01:49.880 --> 00:01:49.890
description so now that you have
 

00:01:49.890 --> 00:01:51.800
description so now that you have
everything set up what can you actually

00:01:51.800 --> 00:01:51.810
everything set up what can you actually
 

00:01:51.810 --> 00:01:54.530
everything set up what can you actually
do with the new features lambdas are a

00:01:54.530 --> 00:01:54.540
do with the new features lambdas are a
 

00:01:54.540 --> 00:01:56.719
do with the new features lambdas are a
really nice short hand foundation for

00:01:56.719 --> 00:01:56.729
really nice short hand foundation for
 

00:01:56.729 --> 00:01:59.330
really nice short hand foundation for
implementing functional interfaces or in

00:01:59.330 --> 00:01:59.340
implementing functional interfaces or in
 

00:01:59.340 --> 00:02:01.520
implementing functional interfaces or in
other words interfaces that have only

00:02:01.520 --> 00:02:01.530
other words interfaces that have only
 

00:02:01.530 --> 00:02:04.520
other words interfaces that have only
one abstract method many times when you

00:02:04.520 --> 00:02:04.530
one abstract method many times when you
 

00:02:04.530 --> 00:02:06.590
one abstract method many times when you
pass a runnable or a listener to another

00:02:06.590 --> 00:02:06.600
pass a runnable or a listener to another
 

00:02:06.600 --> 00:02:08.690
pass a runnable or a listener to another
method you need all this boilerplate

00:02:08.690 --> 00:02:08.700
method you need all this boilerplate
 

00:02:08.700 --> 00:02:11.360
method you need all this boilerplate
just to run a few lines of code when all

00:02:11.360 --> 00:02:11.370
just to run a few lines of code when all
 

00:02:11.370 --> 00:02:12.949
just to run a few lines of code when all
you could write is this

00:02:12.949 --> 00:02:12.959
you could write is this
 

00:02:12.959 --> 00:02:15.080
you could write is this
Android studio lets you easily convert

00:02:15.080 --> 00:02:15.090
Android studio lets you easily convert
 

00:02:15.090 --> 00:02:17.569
Android studio lets you easily convert
between lambdas and anonymous classes so

00:02:17.569 --> 00:02:17.579
between lambdas and anonymous classes so
 

00:02:17.579 --> 00:02:19.789
between lambdas and anonymous classes so
you can learn the syntax quickly with

00:02:19.789 --> 00:02:19.799
you can learn the syntax quickly with
 

00:02:19.799 --> 00:02:21.920
you can learn the syntax quickly with
method references you can sometimes even

00:02:21.920 --> 00:02:21.930
method references you can sometimes even
 

00:02:21.930 --> 00:02:24.319
method references you can sometimes even
avoid creating a lambda by directly

00:02:24.319 --> 00:02:24.329
avoid creating a lambda by directly
 

00:02:24.329 --> 00:02:25.759
avoid creating a lambda by directly
passing a method with a correct

00:02:25.759 --> 00:02:25.769
passing a method with a correct
 

00:02:25.769 --> 00:02:28.339
passing a method with a correct
signature as a parameter use the double

00:02:28.339 --> 00:02:28.349
signature as a parameter use the double
 

00:02:28.349 --> 00:02:31.190
signature as a parameter use the double
colon syntax like this if you want to

00:02:31.190 --> 00:02:31.200
colon syntax like this if you want to
 

00:02:31.200 --> 00:02:33.289
colon syntax like this if you want to
put utility methods in your interfaces

00:02:33.289 --> 00:02:33.299
put utility methods in your interfaces
 

00:02:33.299 --> 00:02:35.770
put utility methods in your interfaces
you can now do it with a static keyword

00:02:35.770 --> 00:02:35.780
you can now do it with a static keyword
 

00:02:35.780 --> 00:02:38.000
you can now do it with a static keyword
moreover you can have methods with

00:02:38.000 --> 00:02:38.010
moreover you can have methods with
 

00:02:38.010 --> 00:02:40.190
moreover you can have methods with
default implementations that will not

00:02:40.190 --> 00:02:40.200
default implementations that will not
 

00:02:40.200 --> 00:02:42.140
default implementations that will not
require you to change any subclasses

00:02:42.140 --> 00:02:42.150
require you to change any subclasses
 

00:02:42.150 --> 00:02:43.970
require you to change any subclasses
when you add them to the base interface

00:02:43.970 --> 00:02:43.980
when you add them to the base interface
 

00:02:43.980 --> 00:02:46.399
when you add them to the base interface
try with resources is a great way to

00:02:46.399 --> 00:02:46.409
try with resources is a great way to
 

00:02:46.409 --> 00:02:48.470
try with resources is a great way to
deal with closable resources such as

00:02:48.470 --> 00:02:48.480
deal with closable resources such as
 

00:02:48.480 --> 00:02:51.020
deal with closable resources such as
files previously you had to be extra

00:02:51.020 --> 00:02:51.030
files previously you had to be extra
 

00:02:51.030 --> 00:02:52.970
files previously you had to be extra
careful to catch exceptions and close

00:02:52.970 --> 00:02:52.980
careful to catch exceptions and close
 

00:02:52.980 --> 00:02:55.819
careful to catch exceptions and close
any open streams in a finally block now

00:02:55.819 --> 00:02:55.829
any open streams in a finally block now
 

00:02:55.829 --> 00:02:57.379
any open streams in a finally block now
when you declare a resource in that try

00:02:57.379 --> 00:02:57.389
when you declare a resource in that try
 

00:02:57.389 --> 00:02:59.360
when you declare a resource in that try
block opening statement it will be

00:02:59.360 --> 00:02:59.370
block opening statement it will be
 

00:02:59.370 --> 00:03:01.129
block opening statement it will be
automatically cleaned up for you after

00:03:01.129 --> 00:03:01.139
automatically cleaned up for you after
 

00:03:01.139 --> 00:03:03.379
automatically cleaned up for you after
that block exits the new language

00:03:03.379 --> 00:03:03.389
that block exits the new language
 

00:03:03.389 --> 00:03:04.940
that block exits the new language
features are provided by transforming

00:03:04.940 --> 00:03:04.950
features are provided by transforming
 

00:03:04.950 --> 00:03:06.429
features are provided by transforming
byte code into a representation

00:03:06.429 --> 00:03:06.439
byte code into a representation
 

00:03:06.439 --> 00:03:09.379
byte code into a representation
compatible with other platforms a step

00:03:09.379 --> 00:03:09.389
compatible with other platforms a step
 

00:03:09.389 --> 00:03:12.020
compatible with other platforms a step
which we call the sugaring this is not a

00:03:12.020 --> 00:03:12.030
which we call the sugaring this is not a
 

00:03:12.030 --> 00:03:14.360
which we call the sugaring this is not a
backboard of Java eight packages and as

00:03:14.360 --> 00:03:14.370
backboard of Java eight packages and as
 

00:03:14.370 --> 00:03:16.670
backboard of Java eight packages and as
such many SDK restrictions still apply

00:03:16.670 --> 00:03:16.680
such many SDK restrictions still apply
 

00:03:16.680 --> 00:03:19.129
such many SDK restrictions still apply
for using newer api's like java.lang

00:03:19.129 --> 00:03:19.139
for using newer api's like java.lang
 

00:03:19.139 --> 00:03:22.039
for using newer api's like java.lang
stream in your code one last thing as

00:03:22.039 --> 00:03:22.049
stream in your code one last thing as
 

00:03:22.049 --> 00:03:23.839
stream in your code one last thing as
part of our continuing investment into

00:03:23.839 --> 00:03:23.849
part of our continuing investment into
 

00:03:23.849 --> 00:03:26.030
part of our continuing investment into
the tool chain with Android studio 3

00:03:26.030 --> 00:03:26.040
the tool chain with Android studio 3
 

00:03:26.040 --> 00:03:28.490
the tool chain with Android studio 3
we're introducing a new Dexter called d8

00:03:28.490 --> 00:03:28.500
we're introducing a new Dexter called d8
 

00:03:28.500 --> 00:03:31.069
we're introducing a new Dexter called d8
that is available for you to preview at

00:03:31.069 --> 00:03:31.079
that is available for you to preview at
 

00:03:31.079 --> 00:03:33.379
that is available for you to preview at
this line in your Gradle properties file

00:03:33.379 --> 00:03:33.389
this line in your Gradle properties file
 

00:03:33.389 --> 00:03:35.719
this line in your Gradle properties file
and the build process will use d8 for

00:03:35.719 --> 00:03:35.729
and the build process will use d8 for
 

00:03:35.729 --> 00:03:37.789
and the build process will use d8 for
converting class files to Dex bytecode

00:03:37.789 --> 00:03:37.799
converting class files to Dex bytecode
 

00:03:37.799 --> 00:03:40.699
converting class files to Dex bytecode
in our tests the eight compiles faster

00:03:40.699 --> 00:03:40.709
in our tests the eight compiles faster
 

00:03:40.709 --> 00:03:43.369
in our tests the eight compiles faster
and produces smaller files and can even

00:03:43.369 --> 00:03:43.379
and produces smaller files and can even
 

00:03:43.379 --> 00:03:46.339
and produces smaller files and can even
improve runtime performance as an app

00:03:46.339 --> 00:03:46.349
improve runtime performance as an app
 

00:03:46.349 --> 00:03:48.349
improve runtime performance as an app
developer you shouldn't have to make any

00:03:48.349 --> 00:03:48.359
developer you shouldn't have to make any
 

00:03:48.359 --> 00:03:50.390
developer you shouldn't have to make any
changes to your usual workflow when

00:03:50.390 --> 00:03:50.400
changes to your usual workflow when
 

00:03:50.400 --> 00:03:53.149
changes to your usual workflow when
using d8 however tool developers need to

00:03:53.149 --> 00:03:53.159
using d8 however tool developers need to
 

00:03:53.159 --> 00:03:55.759
using d8 however tool developers need to
be aware that d8 moves the de sugar step

00:03:55.759 --> 00:03:55.769
be aware that d8 moves the de sugar step
 

00:03:55.769 --> 00:03:58.159
be aware that d8 moves the de sugar step
after any custom bytecode transforms as

00:03:58.159 --> 00:03:58.169
after any custom bytecode transforms as
 

00:03:58.169 --> 00:04:00.890
after any custom bytecode transforms as
such your transformation tools might

00:04:00.890 --> 00:04:00.900
such your transformation tools might
 

00:04:00.900 --> 00:04:03.170
such your transformation tools might
begin to see Java eight byte codes when

00:04:03.170 --> 00:04:03.180
begin to see Java eight byte codes when
 

00:04:03.180 --> 00:04:04.699
begin to see Java eight byte codes when
using D eight and have to be made

00:04:04.699 --> 00:04:04.709
using D eight and have to be made
 

00:04:04.709 --> 00:04:07.339
using D eight and have to be made
compatible so have fun writing more

00:04:07.339 --> 00:04:07.349
compatible so have fun writing more
 

00:04:07.349 --> 00:04:09.289
compatible so have fun writing more
expressive code and please let us know

00:04:09.289 --> 00:04:09.299
expressive code and please let us know
 

00:04:09.299 --> 00:04:10.969
expressive code and please let us know
on the bug tracker if you run into any

00:04:10.969 --> 00:04:10.979
on the bug tracker if you run into any
 

00:04:10.979 --> 00:04:12.920
on the bug tracker if you run into any
issues when trying the new dax-ur and

00:04:12.920 --> 00:04:12.930
issues when trying the new dax-ur and
 

00:04:12.930 --> 00:04:15.259
issues when trying the new dax-ur and
check out the other videos about Android

00:04:15.259 --> 00:04:15.269
check out the other videos about Android
 

00:04:15.269 --> 00:04:17.500
check out the other videos about Android
studio 3 Dalal features

00:04:17.500 --> 00:04:17.510
studio 3 Dalal features
 

00:04:17.510 --> 00:04:28.870
studio 3 Dalal features
[Music]

