WEBVTT
Kind: captions
Language: en

00:00:10.059 --> 00:00:13.620
PETE LEPAGE: Well, welcome
everybody to another addition

00:00:13.620 --> 00:00:17.670
"Chrome Apps Office Hours."
Today we've got Joe Marini,

00:00:17.670 --> 00:00:19.440
who is joining us from Mountain
View and is going to

00:00:19.440 --> 00:00:24.020
be talking about the new Synced
File System APIs.

00:00:24.020 --> 00:00:26.590
Joe, why don't I pass it over
to you and you can give it a

00:00:26.590 --> 00:00:28.150
little introduction?

00:00:28.150 --> 00:00:28.930
JOE MARINI: All right,
I appreciate that

00:00:28.930 --> 00:00:29.620
Pete, thanks very much.

00:00:29.620 --> 00:00:31.160
Hi everyone, I am Joe Marini.

00:00:31.160 --> 00:00:34.690
I am a developer advocate here
on the Chrome team and I work

00:00:34.690 --> 00:00:38.150
on Chrome Apps, Chrome
Extensions, Chrome Web Store,

00:00:38.150 --> 00:00:39.170
all things Chrome.

00:00:39.170 --> 00:00:40.720
Chrome all the time,
Chrome everywhere.

00:00:40.720 --> 00:00:43.275
And yes, today I'm going to be
talking about the Sync File

00:00:43.275 --> 00:00:47.230
System The Sync File System
API is a new feature.

00:00:47.230 --> 00:00:48.240
It's on the bleeding edge.

00:00:48.240 --> 00:00:51.980
It's right now only in M27
Canary, so if you're going to

00:00:51.980 --> 00:00:55.870
follow along with me here or
work on this on your own later

00:00:55.870 --> 00:00:58.630
you want to make sure that you
have the version of M27 Canary

00:00:58.630 --> 00:01:00.350
build on your computer.

00:01:00.350 --> 00:01:04.450
So the Synchronized File System
is our API addition

00:01:04.450 --> 00:01:08.550
that's layered on top of the
existing HTML5 File System for

00:01:08.550 --> 00:01:10.010
Chrome Apps and Extensions.

00:01:10.010 --> 00:01:13.480
And it basically allows you to
build apps and extensions that

00:01:13.480 --> 00:01:21.250
synchronize data via files
using a cloud back end.

00:01:21.250 --> 00:01:24.210
Now we architected it so it
can work with a variety of

00:01:24.210 --> 00:01:24.890
cloud back ends.

00:01:24.890 --> 00:01:27.070
Right now the one we
ship with is Drive.

00:01:27.070 --> 00:01:28.995
So if you're using
Google Drive--

00:01:28.995 --> 00:01:31.870
I'm assuming most of you are
familiar with Google Drive--

00:01:31.870 --> 00:01:33.920
you can build applications
that sync files with each

00:01:33.920 --> 00:01:36.530
other via the Google
Drive back end.

00:01:36.530 --> 00:01:39.110
Now you might be thinking to
yourself, well, wait a second

00:01:39.110 --> 00:01:42.380
the Chrome API already has a
synchronization method for

00:01:42.380 --> 00:01:44.880
data, it's called Chrome
storage.sync.

00:01:44.880 --> 00:01:46.230
How is this different
than that?

00:01:46.230 --> 00:01:50.400
So look at it this way, Chrome
storage.sync is sort of our

00:01:50.400 --> 00:01:53.630
synchronized analog to the
existing local storage

00:01:53.630 --> 00:01:55.870
mechanism that you have
in HTML5, right?

00:01:55.870 --> 00:01:58.950
You can store individual
objects, pieces of data, and

00:01:58.950 --> 00:02:00.660
then using Chrome storage.sync,
you get the same

00:02:00.660 --> 00:02:04.280
kind of functionality but it
gets synced between your app

00:02:04.280 --> 00:02:07.100
or extension via the
network back end.

00:02:07.100 --> 00:02:09.479
And those are for small
individual pieces of data.

00:02:09.479 --> 00:02:15.580
So the Sync File System API is
different in that it's the

00:02:15.580 --> 00:02:19.420
synced analog to the
HTML5 File System.

00:02:19.420 --> 00:02:22.670
So for larger pieces of data,
especially those exceeding

00:02:22.670 --> 00:02:26.350
several megabytes file size, you
can have the same feature

00:02:26.350 --> 00:02:29.980
of syncing via files in addition
to the ability to

00:02:29.980 --> 00:02:32.560
sync individual pieces
of data.

00:02:32.560 --> 00:02:35.370
So with that, if you take a look
at the screen over here,

00:02:35.370 --> 00:02:38.070
I've got the Sync File
System API up.

00:02:38.070 --> 00:02:41.380
Now again, I want to emphasize
that this is still in

00:02:41.380 --> 00:02:42.220
development.

00:02:42.220 --> 00:02:44.970
It's in the Canary, so this
API might change slightly

00:02:44.970 --> 00:02:47.560
between now and when you
use it in the future.

00:02:47.560 --> 00:02:50.790
So at the moment we have a
couple of additions to the

00:02:50.790 --> 00:02:51.760
File System API.

00:02:51.760 --> 00:02:53.480
And it's important to point
out that when you use this

00:02:53.480 --> 00:02:56.930
API, the objects you'll be
working with are pretty much

00:02:56.930 --> 00:02:59.510
HTML5 File System Objects.

00:02:59.510 --> 00:03:02.070
So for example, you see the
first API call there,

00:03:02.070 --> 00:03:05.730
requestFileSystem, that takes
a call back just like the

00:03:05.730 --> 00:03:08.040
regular HTML5 File
System one does.

00:03:08.040 --> 00:03:10.850
And it gives you a File System
Object that you can use in

00:03:10.850 --> 00:03:12.905
your callback to work
with files.

00:03:12.905 --> 00:03:15.550
So that's how you request
the Sync File System--

00:03:15.550 --> 00:03:18.400
is the requestFileSystem
API call.

00:03:18.400 --> 00:03:22.070
You can also see what the
current usage and quota of the

00:03:22.070 --> 00:03:24.240
Sync File System is
by using the Get

00:03:24.240 --> 00:03:26.210
Usage and Quota function.

00:03:26.210 --> 00:03:29.210
Just a bit of a caveat, right
now for the cloud side of

00:03:29.210 --> 00:03:33.380
things, this function probably
isn't going to return the

00:03:33.380 --> 00:03:33.820
right information.

00:03:33.820 --> 00:03:36.330
We're working on that, but just
be aware of that if you

00:03:36.330 --> 00:03:38.350
try this demo later on.

00:03:38.350 --> 00:03:40.730
So that returns an object
called Storage Info.

00:03:40.730 --> 00:03:42.290
And there's a couple properties
you can look at to

00:03:42.290 --> 00:03:45.340
see how much storage you're
using versus how

00:03:45.340 --> 00:03:46.770
much your quota is.

00:03:46.770 --> 00:03:49.800
And there's a couple of other
API functions that have to do

00:03:49.800 --> 00:03:51.800
with the status of files.

00:03:51.800 --> 00:03:53.430
Because obviously, when you're
working with synchronized

00:03:53.430 --> 00:03:57.230
files, there's going to be time
periods when a file is

00:03:57.230 --> 00:03:59.250
going from one destination to
another, or it might have

00:03:59.250 --> 00:04:01.520
changed and that change
needs to propagate

00:04:01.520 --> 00:04:03.060
across all the instances.

00:04:03.060 --> 00:04:04.800
So one of these is an
API call, one of

00:04:04.800 --> 00:04:06.060
these is an event listener.

00:04:06.060 --> 00:04:08.430
So let's go to the event
listener first, that's the

00:04:08.430 --> 00:04:10.880
fourth API down there, and
that's the on-file status

00:04:10.880 --> 00:04:11.980
changed event.

00:04:11.980 --> 00:04:13.220
And you use this like
you use any other

00:04:13.220 --> 00:04:14.760
Chrome API event listener.

00:04:14.760 --> 00:04:16.720
We have an Add Listener call.

00:04:16.720 --> 00:04:21.269
And the callback that will get
called when the file status

00:04:21.269 --> 00:04:23.960
changed event fires is going
to give you a piece of

00:04:23.960 --> 00:04:26.280
information about what
it was that changed.

00:04:26.280 --> 00:04:28.860
So for example, it'll tell you
the file entry object of the

00:04:28.860 --> 00:04:30.010
file that changed.

00:04:30.010 --> 00:04:32.080
It will give you a status
of what the change was.

00:04:32.080 --> 00:04:35.890
And right now the status can be
either synced, pending, or

00:04:35.890 --> 00:04:37.160
conflicting.

00:04:37.160 --> 00:04:41.090
The action is the sync action
that's going to take and it

00:04:41.090 --> 00:04:43.260
could be either added,
updated, or deleted.

00:04:43.260 --> 00:04:45.440
So it tells you what happened
to the file.

00:04:45.440 --> 00:04:48.280
And the direction is the sync
direction for the event.

00:04:48.280 --> 00:04:50.490
So these directions either could
be going from local to

00:04:50.490 --> 00:04:52.410
remote or remote to local.

00:04:52.410 --> 00:04:58.030
So the event tells you about
the file change event.

00:04:58.030 --> 00:05:00.820
So going back a little bit,
we have the file status.

00:05:00.820 --> 00:05:03.730
You can actually call this
function at any time on a file

00:05:03.730 --> 00:05:05.470
entry that you have and it will
tell you what the status

00:05:05.470 --> 00:05:06.100
of the file is.

00:05:06.100 --> 00:05:07.840
Again, it's going to be
synced, pending, or

00:05:07.840 --> 00:05:09.050
conflicting.

00:05:09.050 --> 00:05:12.620
Currently, we don't have
an API to help you

00:05:12.620 --> 00:05:14.360
with resolving conflicts.

00:05:14.360 --> 00:05:16.680
We are actually considering
working on that.

00:05:16.680 --> 00:05:19.450
So I figure that might come up
in the questions later, but

00:05:19.450 --> 00:05:21.030
let me just get that out
of the way right now.

00:05:21.030 --> 00:05:24.610
There's no dedicated API right
now to resolve conflicts, but

00:05:24.610 --> 00:05:27.170
that is something that we're
looking very seriously at.

00:05:27.170 --> 00:05:29.580
OK, so that's the API.

00:05:29.580 --> 00:05:33.160
Let me take a look over here in
the Google Chrome GitHub.

00:05:33.160 --> 00:05:35.680
So the sample app I'm going to
be showing you today is called

00:05:35.680 --> 00:05:38.480
the syncfs-editor project.

00:05:38.480 --> 00:05:42.000
And if you go to GitHub under
the Google Chrome category,

00:05:42.000 --> 00:05:44.120
you scroll down here, you'll see
it's this guy right here,

00:05:44.120 --> 00:05:45.590
syncfs-editor.

00:05:45.590 --> 00:05:45.900
PETE LEPAGE: Cool.

00:05:45.900 --> 00:05:48.490
And the link for that is
up on screen for those

00:05:48.490 --> 00:05:49.210
folks who are watching.

00:05:49.210 --> 00:05:50.000
JOE MARINI: OK, great.

00:05:50.000 --> 00:05:51.720
So that link right there.

00:05:51.720 --> 00:05:54.025
So when I click on it, you can
see this is the code I'm going

00:05:54.025 --> 00:05:54.700
to be working with.

00:05:54.700 --> 00:05:57.540
So if you want to follow along
or download it for later, this

00:05:57.540 --> 00:05:58.800
is where you go to get it.

00:05:58.800 --> 00:06:01.340
All right, let me jump over to
my Extensions tab because I've

00:06:01.340 --> 00:06:03.120
now got this loaded
as an unpacked

00:06:03.120 --> 00:06:04.830
extension in my Canary.

00:06:04.830 --> 00:06:07.550
And I'm going to go ahead
and launch it.

00:06:07.550 --> 00:06:11.026
And let me bring it down
so we can all see it.

00:06:11.026 --> 00:06:12.010
OK.

00:06:12.010 --> 00:06:12.970
So this is the app.

00:06:12.970 --> 00:06:14.780
Now it's pretty straightforward,
basic

00:06:14.780 --> 00:06:15.770
application.

00:06:15.770 --> 00:06:18.500
On the right-hand side there,
you see an editing area.

00:06:18.500 --> 00:06:21.590
On the left-hand side, there's
an area where file information

00:06:21.590 --> 00:06:22.640
is going to show up.

00:06:22.640 --> 00:06:24.340
And I've got two buttons
on the top there.

00:06:24.340 --> 00:06:26.790
One is called Syncable, one
is called Temporary.

00:06:26.790 --> 00:06:30.194
This particular sample app
uses both the HTML5 File

00:06:30.194 --> 00:06:32.850
System's temporary storage so
that you can contrast its

00:06:32.850 --> 00:06:35.870
usage with the Syncable
File System.

00:06:35.870 --> 00:06:37.310
So let's just go ahead
and create a file.

00:06:37.310 --> 00:06:40.610
I'm going to go to my text area
and I'm just going to

00:06:40.610 --> 00:06:43.020
type, you know, this
is a file.

00:06:43.020 --> 00:06:46.010
And I'm going to click
the Save As button.

00:06:46.010 --> 00:06:48.510
And I'll save it as, let's
see, testfile1.txt.

00:06:51.580 --> 00:06:52.350
I'll click Save.

00:06:52.350 --> 00:06:55.020
Now watch the left-hand column
over there underneath where it

00:06:55.020 --> 00:06:57.050
says Usage and Reload.

00:06:57.050 --> 00:06:58.750
I'm going to click Save.

00:06:58.750 --> 00:07:01.330
So you can see now that it's--
there's that little icon

00:07:01.330 --> 00:07:02.570
showing that it's syncing.

00:07:02.570 --> 00:07:04.440
And you could see-- oh, in this
case, it looks like have

00:07:04.440 --> 00:07:05.730
a little bit of an error.

00:07:05.730 --> 00:07:08.190
So I'm wondering if it's because
my authentication in

00:07:08.190 --> 00:07:10.110
my Google Drive ran out.

00:07:10.110 --> 00:07:12.850
But in any case, you can see
that we're taking advantage of

00:07:12.850 --> 00:07:16.440
the status changed events there
to update the icon that

00:07:16.440 --> 00:07:17.800
goes with the file.

00:07:17.800 --> 00:07:20.560
So in this case, it looks
like the sync broke.

00:07:20.560 --> 00:07:22.960
Let me just make
a change to it.

00:07:22.960 --> 00:07:25.180
Click Save.

00:07:25.180 --> 00:07:27.510
And it's applying the
local change.

00:07:27.510 --> 00:07:30.560
Yeah, I think my authentication
probably timed

00:07:30.560 --> 00:07:32.610
out on me in Google Drive.

00:07:32.610 --> 00:07:33.920
But anyway, that's not
why we're here.

00:07:33.920 --> 00:07:35.120
We're not here to--

00:07:35.120 --> 00:07:38.580
let's just go over to the code
and see what's going on.

00:07:38.580 --> 00:07:40.320
All right.

00:07:40.320 --> 00:07:43.280
So this is the code for the
sample and let me start off by

00:07:43.280 --> 00:07:46.320
taking a look at
the HTML file.

00:07:46.320 --> 00:07:49.330
So this is the user interface
for the sample.

00:07:49.330 --> 00:07:50.595
You can see that it's
an HTML file.

00:07:50.595 --> 00:07:53.520
It's pretty simple, basically
just a bunch of divs that hold

00:07:53.520 --> 00:07:56.910
the editor and the area where
we see file information,

00:07:56.910 --> 00:07:58.490
that's pretty much about it.

00:07:58.490 --> 00:08:00.960
There's also a couple of classes
that we build, one is

00:08:00.960 --> 00:08:02.620
called the Editor class.

00:08:02.620 --> 00:08:05.550
This basically handles all the
text editing for the sample.

00:08:05.550 --> 00:08:07.960
So if you want to look in here
to see how we're doing, for

00:08:07.960 --> 00:08:11.340
example, showing the dialogue
or building the editor,

00:08:11.340 --> 00:08:12.520
that's up to you.

00:08:12.520 --> 00:08:15.860
So there's another class we
have called the Filer.

00:08:15.860 --> 00:08:19.100
This class, again, just a
bunch of utilities for

00:08:19.100 --> 00:08:22.160
wrapping various file operations
that we have to do.

00:08:22.160 --> 00:08:24.750
So let me show you first
the Manifest.

00:08:24.750 --> 00:08:27.570
Again, all applications and
extensions for Chrome have a

00:08:27.570 --> 00:08:28.570
Manifest file.

00:08:28.570 --> 00:08:30.670
And to use the Sync File System,
I simply need to

00:08:30.670 --> 00:08:34.460
specify the Sync File System
permission here in my

00:08:34.460 --> 00:08:37.990
Manifest, and nothing
special beyond that.

00:08:37.990 --> 00:08:40.980
So once I've got the permission
specified, I can

00:08:40.980 --> 00:08:42.720
start using the API.

00:08:42.720 --> 00:08:47.940
Now this here, the main .js
file, this is where we set up

00:08:47.940 --> 00:08:50.590
the Synchronized File
System for use.

00:08:50.590 --> 00:08:53.780
So here at the top we have an
event listener for when the

00:08:53.780 --> 00:08:55.410
DOM content loads.

00:08:55.410 --> 00:08:59.490
And what we're doing is seeing
if we support the Synchronized

00:08:59.490 --> 00:09:00.350
File System.

00:09:00.350 --> 00:09:03.130
So the support Sync File System
Boolean right here is

00:09:03.130 --> 00:09:05.070
set by seeing if we're
in Chrome.

00:09:05.070 --> 00:09:07.320
And if we've got the Chrome
Sync File System Object,

00:09:07.320 --> 00:09:08.290
that's great.

00:09:08.290 --> 00:09:09.950
And if we support it, then
we're going to call this

00:09:09.950 --> 00:09:13.350
function here called Open the
Syncable File System.

00:09:13.350 --> 00:09:15.794
So let's scroll down.

00:09:15.794 --> 00:09:16.770
All right.

00:09:16.770 --> 00:09:20.800
The function for opening the
Syncable File System

00:09:20.800 --> 00:09:23.420
essentially checks to see that
we're in Chrome and then calls

00:09:23.420 --> 00:09:26.310
the requestFileSystem function
that I talked about

00:09:26.310 --> 00:09:28.100
earlier in the API.

00:09:28.100 --> 00:09:30.780
Check to see if we got
any kind of error.

00:09:30.780 --> 00:09:34.310
And assuming everything is OK,
we have this function here

00:09:34.310 --> 00:09:36.390
called onFileSystemOpened.

00:09:36.390 --> 00:09:40.240
And in onFileSystemOpened, we
just blog a message out to the

00:09:40.240 --> 00:09:43.220
console saying, hey, we got the
file system, everything

00:09:43.220 --> 00:09:44.380
seems to be OK.

00:09:44.380 --> 00:09:46.900
We create a new editor, we
create a new file to go with

00:09:46.900 --> 00:09:48.970
it, and then we're
off and running.

00:09:48.970 --> 00:09:52.050
So let's go over to
the filer class.

00:09:52.050 --> 00:09:52.650
And let's--

00:09:52.650 --> 00:09:58.920
I'm just going to do a quick
search for the usage.

00:09:58.920 --> 00:10:01.330
Show Usage, there it is.

00:10:01.330 --> 00:10:05.600
And here in the Show Usage
function, this is where we're

00:10:05.600 --> 00:10:09.430
calling the Sync File System's
Get Usage and Quota function

00:10:09.430 --> 00:10:13.180
to see how much of our quota
we have and how much of it

00:10:13.180 --> 00:10:14.940
that we are using.

00:10:14.940 --> 00:10:18.690
And then let's go ahead and
take a look at the status

00:10:18.690 --> 00:10:20.720
changed message.

00:10:20.720 --> 00:10:27.640
So down here in this function
where we create the filer we

00:10:27.640 --> 00:10:30.980
set up, assuming that we're
using the Syncable File System

00:10:30.980 --> 00:10:33.530
instead of the temporary one,
we're setting up our event

00:10:33.530 --> 00:10:37.270
listener to see if the file
status has changed.

00:10:37.270 --> 00:10:40.070
And then if the service status
has changed, we have those two

00:10:40.070 --> 00:10:41.210
event handlers.

00:10:41.210 --> 00:10:43.850
And that's what's going to get
triggered when-- so, for

00:10:43.850 --> 00:10:46.420
example, if I make a change to
the file on this side or if I

00:10:46.420 --> 00:10:48.460
go to another instance of my
app running on another

00:10:48.460 --> 00:10:51.490
computer and I make a change
on that side, this is the

00:10:51.490 --> 00:10:53.460
event that will get triggered.

00:10:53.460 --> 00:10:56.830
So pretty straightforward,
simple API.

00:10:56.830 --> 00:11:00.330
From here on out it's just
HTML5 File System calls.

00:11:00.330 --> 00:11:03.740
So, for example, if
we scroll down--

00:11:03.740 --> 00:11:08.320
I'll just do a search for
the getRoot, fs.root.

00:11:11.480 --> 00:11:13.520
And that is in--

00:11:13.520 --> 00:11:14.906
hang on a second.

00:11:14.906 --> 00:11:17.582
There we go.

00:11:17.582 --> 00:11:18.850
Let me find the Save.

00:11:18.850 --> 00:11:20.100
Where's the Save?

00:11:22.715 --> 00:11:24.940
Oh, it's in the-- sorry,
it's in the utilities.

00:11:24.940 --> 00:11:28.740
There's a utilities
thing in here.

00:11:28.740 --> 00:11:29.760
And it's--

00:11:29.760 --> 00:11:32.810
oh no, sorry, it's
in the editor.

00:11:32.810 --> 00:11:34.770
There we go, there's the Save.

00:11:34.770 --> 00:11:39.070
So here we have the methods
that are going to handle

00:11:39.070 --> 00:11:41.910
things like opening, loading,
and saving files.

00:11:41.910 --> 00:11:44.650
And you can see that from here
on out, it's just using

00:11:44.650 --> 00:11:48.030
regular old HTML5 File
System APIs.

00:11:48.030 --> 00:11:50.800
So here's the File System
root, getFile.

00:11:50.800 --> 00:11:53.720
If you've done any work with
the HTML5 File System, this

00:11:53.720 --> 00:11:54.966
will probably look
familiar to you.

00:11:54.966 --> 00:11:58.630
It's creating blobs, saving
blob URLs out to the file.

00:11:58.630 --> 00:12:01.200
So what we've done here
essentially, just to sum up,

00:12:01.200 --> 00:12:04.540
is we've taken the HTML5 File
System and we've layered our

00:12:04.540 --> 00:12:06.860
syncing architecture on top of
it so that you can build

00:12:06.860 --> 00:12:10.730
applications that sync
files to and from a

00:12:10.730 --> 00:12:12.020
remote cloud service.

00:12:12.020 --> 00:12:13.060
This case, Google Drive.

00:12:13.060 --> 00:12:14.370
In the future, who knows?

00:12:14.370 --> 00:12:17.100
But using this API, once it goes
into Stable, you'll be

00:12:17.100 --> 00:12:22.860
able to build extensions and
apps that built synced files.

00:12:22.860 --> 00:12:23.770
PETE LEPAGE: Sweet.

00:12:23.770 --> 00:12:24.450
Very cool.

00:12:24.450 --> 00:12:24.730
JOE MARINI: Yeah.

00:12:24.730 --> 00:12:26.210
Yeah, it is very cool.

00:12:26.210 --> 00:12:29.100
I've been playing around with
it and seems to work pretty

00:12:29.100 --> 00:12:32.680
well, assuming that you're
authenticated properly.

00:12:32.680 --> 00:12:35.800
So I think now might be a good
moment to check to see if we

00:12:35.800 --> 00:12:37.180
have any questions.

00:12:37.180 --> 00:12:38.730
PETE LEPAGE: Yeah, I think
there are a couple of

00:12:38.730 --> 00:12:39.590
questions up there.

00:12:39.590 --> 00:12:39.870
JOE MARINI: OK, great.

00:12:39.870 --> 00:12:44.470
PETE LEPAGE: So I'm looking at
one from Brian Tredaway in

00:12:44.470 --> 00:12:45.290
Washington--

00:12:45.290 --> 00:12:49.100
wants to know, can I read any
files from the user's Google

00:12:49.100 --> 00:12:52.910
Drive with these APIs, or
am I limited to only

00:12:52.910 --> 00:12:54.410
stuff I've put up there?

00:12:54.410 --> 00:12:56.130
JOE MARINI: Yup, that's
a great question.

00:12:56.130 --> 00:12:56.580
Yeah.

00:12:56.580 --> 00:12:58.070
Yeah, that's a great
question, Brian.

00:12:58.070 --> 00:13:00.780
So right now, and I think for
the foreseeable future, the

00:13:00.780 --> 00:13:01.930
way that it works is--

00:13:01.930 --> 00:13:05.660
again, this works the same way
as the HTML5 File System does,

00:13:05.660 --> 00:13:11.240
so each app gets its own per-app
sandboxed File System

00:13:11.240 --> 00:13:14.270
that just happens to be on
the user's Google Drive.

00:13:14.270 --> 00:13:17.640
And it's important to point
out that the user doesn't

00:13:17.640 --> 00:13:22.240
actually see the folder where
these files go by default in

00:13:22.240 --> 00:13:23.780
their Google Drive interface.

00:13:23.780 --> 00:13:24.130
PETE LEPAGE: Interesting, OK.

00:13:24.130 --> 00:13:26.860
JOE MARINI: A power user can
search for the file and it'll

00:13:26.860 --> 00:13:29.610
show up in the All Items view
and then they can see the name

00:13:29.610 --> 00:13:30.430
of the folder.

00:13:30.430 --> 00:13:33.290
Essentially, the name of the
folder is the same ID as the

00:13:33.290 --> 00:13:35.010
app or the extension that's
creating the file.

00:13:35.010 --> 00:13:35.830
PETE LEPAGE: OK.

00:13:35.830 --> 00:13:37.480
JOE MARINI: So that's how we
keep track of the instances.

00:13:37.480 --> 00:13:40.760
But no, you only have access to
your Sandbox, which is the

00:13:40.760 --> 00:13:44.087
same way that the existing
HTML5 File

00:13:44.087 --> 00:13:45.600
System API works today.

00:13:45.600 --> 00:13:47.350
PETE LEPAGE: Cool, OK.

00:13:47.350 --> 00:13:52.560
So in that same way, then, if
the user wants to delete stuff

00:13:52.560 --> 00:13:55.480
after they've installed the
directory, does it get deleted

00:13:55.480 --> 00:13:57.480
automatically or do they
have to go find it

00:13:57.480 --> 00:13:58.160
and then delete it?

00:13:58.160 --> 00:13:59.970
JOE MARINI: Yeah, so what's
going to happen is--

00:13:59.970 --> 00:14:03.980
so file management is done
either through your app or, if

00:14:03.980 --> 00:14:07.550
you're app gets blown away, then
your data will get blown

00:14:07.550 --> 00:14:08.800
away as well.

00:14:10.720 --> 00:14:12.240
PETE LEPAGE: That's an
interesting scenario.

00:14:12.240 --> 00:14:14.920
That's something that I think
we'd probably like to hear

00:14:14.920 --> 00:14:17.180
feedback from you guys who are
watching today about this.

00:14:17.180 --> 00:14:18.180
JOE MARINI: Yes, exactly.

00:14:18.180 --> 00:14:22.390
And again, just to emphasize
that point even further, we're

00:14:22.390 --> 00:14:23.210
still in Canary on this.

00:14:23.210 --> 00:14:25.570
There's plenty of time for
you to give us feedback.

00:14:25.570 --> 00:14:27.950
We'd love to hear from you on
our forums and on our D+ page.

00:14:27.950 --> 00:14:32.890
So anything that you'd like to
see the API do or not do, or

00:14:32.890 --> 00:14:35.810
do differently, please, please
speak up, let us know.

00:14:35.810 --> 00:14:38.570
We want to make this useful for
all of you in your apps.

00:14:38.570 --> 00:14:40.070
PETE LEPAGE: Cool.

00:14:40.070 --> 00:14:44.460
So this is my question, this is
not one from our list, but

00:14:44.460 --> 00:14:46.980
you were talking about your
authentication expired.

00:14:46.980 --> 00:14:51.160
How does authentication
work for this?

00:14:51.160 --> 00:14:54.100
How does it know where
to go and what to do?

00:14:54.100 --> 00:14:55.170
JOE MARINI: Great question.

00:14:55.170 --> 00:15:00.240
Yeah, so by default, the Sync
File System works by using

00:15:00.240 --> 00:15:04.310
whatever the signed-in
profile of Chrome is.

00:15:04.310 --> 00:15:08.100
So if you're signed into a
specific profile in your

00:15:08.100 --> 00:15:12.420
Chrome Runtime, that's the
profile it's going to use for

00:15:12.420 --> 00:15:13.970
the Google Drive
authentication.

00:15:13.970 --> 00:15:16.590
So assuming that you're
authenticated into Google

00:15:16.590 --> 00:15:19.020
Drive and you've got everything
set up properly

00:15:19.020 --> 00:15:22.150
that you normally would anyway,
which if you've got

00:15:22.150 --> 00:15:24.750
Google Drive installed on your
machine, you've got your

00:15:24.750 --> 00:15:28.620
credentials stored in Google
Drive, it's going to use

00:15:28.620 --> 00:15:30.560
whatever the profile is that's
currently signed in.

00:15:30.560 --> 00:15:31.540
PETE LEPAGE: OK, yeah.

00:15:31.540 --> 00:15:33.580
That makes perfect sense.

00:15:33.580 --> 00:15:33.810
JOE MARINI: Yes, exactly.

00:15:33.810 --> 00:15:34.660
PETE LEPAGE: Cool.

00:15:34.660 --> 00:15:38.420
So A.A. from somewhere here in
the US wants to know are the

00:15:38.420 --> 00:15:42.700
files synced in chunks
or as full files?

00:15:42.700 --> 00:15:43.840
JOE MARINI: That's
a good question.

00:15:43.840 --> 00:15:47.050
I'm not deeply familiar
with exactly how

00:15:47.050 --> 00:15:49.090
the files are synced.

00:15:49.090 --> 00:15:53.060
It's whatever the Google Drive
back end is using.

00:15:53.060 --> 00:15:56.080
I believe they're synced
as chunks, but I'm

00:15:56.080 --> 00:15:58.540
not entirely sure.

00:15:58.540 --> 00:16:01.770
What I'll do is I'll
go check on that.

00:16:01.770 --> 00:16:04.400
Do me a favor, just post that
question in our forum so that

00:16:04.400 --> 00:16:06.770
way I have a marker for it
and I can respond so that

00:16:06.770 --> 00:16:07.860
everybody can see the answer.

00:16:07.860 --> 00:16:08.686
PETE LEPAGE: Cool.

00:16:08.686 --> 00:16:12.420
So here's another question
from me.

00:16:12.420 --> 00:16:16.480
So if I go on one computer and
I create a whole bunch of

00:16:16.480 --> 00:16:19.490
files and they get pushed up
to Drive and then I go to a

00:16:19.490 --> 00:16:23.060
different computer, are those
files pulled down and sitting

00:16:23.060 --> 00:16:27.520
locally on my other computer, or
are they only grabbed from

00:16:27.520 --> 00:16:31.620
Google Drive when my app
goes and asks for them?

00:16:31.620 --> 00:16:34.240
JOE MARINI: So no, they are
synced the same way that

00:16:34.240 --> 00:16:36.390
Google Drive syncs
other files.

00:16:36.390 --> 00:16:37.400
PETE LEPAGE: OK.

00:16:37.400 --> 00:16:40.980
JOE MARINI: So the cloud service
back end-- in this

00:16:40.980 --> 00:16:42.130
case, Google Drive--

00:16:42.130 --> 00:16:45.080
just syncs files
automatically.

00:16:45.080 --> 00:16:48.350
It uses that feature to sync
the files, that way it

00:16:48.350 --> 00:16:50.670
abstracts that notion away
from your app, right?

00:16:50.670 --> 00:16:50.860
PETE LEPAGE: Right.

00:16:50.860 --> 00:16:52.200
JOE MARINI: Your app doesn't
have to worry about, well,

00:16:52.200 --> 00:16:56.180
when do I ask for
a file and did I

00:16:56.180 --> 00:16:57.410
remember to ask this file?

00:16:57.410 --> 00:16:58.940
And when did I last
ask for this file?

00:16:58.940 --> 00:17:02.350
And so it lets Google Drive do
what Google Drive does best,

00:17:02.350 --> 00:17:05.006
which is handle the mechanics
and the timing of syncing.

00:17:05.006 --> 00:17:05.680
PETE LEPAGE: Yeah.

00:17:05.680 --> 00:17:08.349
JOE MARINI: And that's why that
event for handling the

00:17:08.349 --> 00:17:10.200
status change is so important.

00:17:10.200 --> 00:17:13.330
So that way it abstracts away
when things happen to you and

00:17:13.330 --> 00:17:16.250
just lets you know hey,
this file changed.

00:17:16.250 --> 00:17:18.725
Or when you change the file, you
don't have to remember it

00:17:18.725 --> 00:17:20.780
to push things up,
it just happens.

00:17:20.780 --> 00:17:23.630
So it's all handled in the
background for you by Drive.

00:17:23.630 --> 00:17:24.310
PETE LEPAGE: Cool.

00:17:24.310 --> 00:17:25.510
Awesome.

00:17:25.510 --> 00:17:28.569
Well, I think that's all
the time we have--

00:17:28.569 --> 00:17:30.270
well, actually it's not all the
time, but those are all

00:17:30.270 --> 00:17:32.140
the questions that
we have today.

00:17:32.140 --> 00:17:36.610
So I want to say thanks Joe
for joining us and talking

00:17:36.610 --> 00:17:39.650
about this and giving us a good
overview and a little bit

00:17:39.650 --> 00:17:41.070
of a deep dive.

00:17:41.070 --> 00:17:43.060
You're going to be
back next week.

00:17:43.060 --> 00:17:46.280
We're going to be
talking about--

00:17:46.280 --> 00:17:48.750
I keep forgetting this and
it's, like, we've been

00:17:48.750 --> 00:17:49.000
talking about it.

00:17:49.000 --> 00:17:49.765
JOE MARINI: It's the
interapp messaging.

00:17:49.765 --> 00:17:50.370
PETE LEPAGE: That's what
it is, thank you.

00:17:50.370 --> 00:17:53.240
JOE MARINI: So I'll be showing
you how to send messages from

00:17:53.240 --> 00:17:57.460
one app to another, even to an
extension running inside

00:17:57.460 --> 00:17:58.250
Chrome proper.

00:17:58.250 --> 00:17:59.520
PETE LEPAGE: That's
a good one, yeah.

00:17:59.520 --> 00:18:01.560
JOE MARINI: Yeah, so next week
should be interesting, we've

00:18:01.560 --> 00:18:03.440
had lots of requests for this.

00:18:03.440 --> 00:18:06.320
And we now have an API that lets
you message between apps

00:18:06.320 --> 00:18:06.920
and extensions.

00:18:06.920 --> 00:18:08.420
It's actually really
pretty cool.

00:18:08.420 --> 00:18:10.010
So yeah, come back next week.

00:18:10.010 --> 00:18:11.010
PETE LEPAGE: Awesome,
so that's next week.

00:18:11.010 --> 00:18:12.200
JOE MARINI: Thanks again,
for anybody who--

00:18:12.200 --> 00:18:12.840
Yeah.

00:18:12.840 --> 00:18:13.520
I'm sorry, what?

00:18:13.520 --> 00:18:16.180
PETE LEPAGE: That's next week
4 o'clock Eastern, 1 o'clock

00:18:16.180 --> 00:18:20.000
Pacific, and adjust time
zones for wherever else

00:18:20.000 --> 00:18:21.730
you happen to be.

00:18:21.730 --> 00:18:22.240
JOE MARINI: Exactly.

00:18:22.240 --> 00:18:25.610
And thanks everybody for showing
up today to see the

00:18:25.610 --> 00:18:26.860
Synchronized File System API.

00:18:26.860 --> 00:18:29.430
Remember to go to the Google
Chrome GitHub.

00:18:29.430 --> 00:18:31.590
Take a look at the Chrome
app samples repository.

00:18:31.590 --> 00:18:33.730
Pull it down, start playing
with it, start hacking.

00:18:33.730 --> 00:18:35.540
And we're excited to see
what you guys come up

00:18:35.540 --> 00:18:36.620
with using our APIs.

00:18:36.620 --> 00:18:37.520
PETE LEPAGE: Absolutely.

00:18:37.520 --> 00:18:40.100
All right, well thanks for
joining, everybody, and we'll

00:18:40.100 --> 00:18:41.290
see you all soon.

00:18:41.290 --> 00:18:41.890
Bye-bye.

00:18:41.890 --> 00:18:43.140
JOE MARINI: Thanks.

