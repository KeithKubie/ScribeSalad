WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.930
&gt;&gt; All right so, hello everyone. My name is
Sumit Chandel. I'm a Developer Advocate on

00:00:04.930 --> 00:00:15.990
the AdWords API. Today, I'll be talking to
you guys about the ReportService in v201008

00:00:15.990 --> 00:00:16.990
which is faster, better, and stronger than
its v13 counterpart, as you'll soon see. Okay

00:00:16.990 --> 00:00:20.380
so, v13 ReportService, the way things were.
So these are some of the steps you followed

00:00:20.380 --> 00:00:27.869
to grade your reports. The first is the report
type, the columns, the aggregate type, the

00:00:27.869 --> 00:00:30.170
date ranges you want to cover, and what not.
Next, you scheduled your report. And once

00:00:30.170 --> 00:00:33.680
it's scheduled then basically you poll for
ready status. Now, this is a cross-client

00:00:33.680 --> 00:00:38.059
report. It could take three hours to come
back. And any minute [INDISTINCT] lack of

00:00:38.059 --> 00:00:42.460
budget, it could still take a few minutes.
So you do that for a bit, and once it's ready

00:00:42.460 --> 00:00:45.739
and then you download your report and then
filter as needed. So as I was mentioning,

00:00:45.739 --> 00:00:49.739
you can [INDISTINCT] it beforehand, if there
are certain campaigns that you cared about--you

00:00:49.739 --> 00:00:53.829
have to just get everything back and then
filter it on your own. All right, so in code,

00:00:53.829 --> 00:01:03.550
this is what v13 would look like when you
are doing scheduling reports. You basically

00:01:03.550 --> 00:01:05.500
create the report, [INDISTINCT] campaign status
that you care about more. You select the columns,

00:01:05.500 --> 00:01:11.140
start and end date, you validate the report
job beforehand, of course. Finally, you schedule

00:01:11.140 --> 00:01:18.290
it. And then you wait for it to either succeed
or fail. And if it succeeds, download the

00:01:18.290 --> 00:01:24.445
report. Print your report stuff, and I guess
most of you are--are very familiar with this.

00:01:24.445 --> 00:01:29.913
[INDISTINCT] reporting the v201008 way. So
the first step is the same, setup your report

00:01:29.913 --> 00:01:32.820
type, the column, and the aggregate type.
The same way you would for v13. The one difference

00:01:32.820 --> 00:01:36.280
here is that the report columns that you once
selected, you have to make a request [INDISTINCT]

00:01:36.280 --> 00:01:39.060
trying to get those, and select that [INDISTINCT]
it up. Next, you--in your report definition,

00:01:39.060 --> 00:01:46.130
when you filter the data a little bit [INDISTINCT],
you can set the predicates on your report

00:01:46.130 --> 00:01:51.090
definition before sending it out. And then
finally, you download the report synchronously

00:01:51.090 --> 00:01:53.780
using a GET request rather than [INDISTINCT]
or anything and polling for the ready status.

00:01:53.780 --> 00:02:02.831
Now we'll see how--how all of that works.
So this is what we call the blank using a

00:02:02.831 --> 00:02:05.590
Java-Client Library to get the various columns
available based on our report type. In this

00:02:05.590 --> 00:02:14.140
case, it's the "KEYWORDS_PERFORMANCE_REPORT".
This column would return these columns back.

00:02:14.140 --> 00:02:22.470
So brief [INDISTINCT]. So we've got the columns
now and setting it for our report definition.

00:02:22.470 --> 00:02:25.670
The next step is to set the predicates. So
this is that new thing I was talking about.

00:02:25.670 --> 00:02:30.440
We've set--you set the filters you care about
before you even run the report and let our

00:02:30.440 --> 00:02:35.230
service do the filtering. So in sample 1,
we're just saying we're just--we're sending

00:02:35.230 --> 00:02:38.660
our predicate for an AdGroup ID that we care
about. In this case, the predicate operator

00:02:38.660 --> 00:02:45.500
is an equal so we want to be that exact AdGroup
ID. In the second sample below, that's a predicate

00:02:45.500 --> 00:02:48.000
for our impressions. So basically, we want--we're
sending out a predicate for any campaigns

00:02:48.000 --> 00:02:52.570
that have a greater number or have impressions
that are greater than [INDISTINCT] equals

00:02:52.570 --> 00:03:01.870
to zero. And then final, the last step is
to add report definition. So once we've got

00:03:01.870 --> 00:03:11.203
the columns, once we've got the predicates
we care about and the filtering, the next

00:03:11.203 --> 00:03:12.203
step is to add the report. So the first few
steps are very, very similar to v13; create

00:03:12.203 --> 00:03:22.600
the report definition, set the report type,
the date range. The selector we've [INDISTINCT]--[INDISTINCT]

00:03:22.600 --> 00:03:44.310
that just before and all the other steps.
So we set the selector [INDISTINCT]. And then

00:03:44.310 --> 00:04:03.530
finally, create the operations, set the operator
to add and then call mutate to add the report

00:04:03.530 --> 00:04:13.300
definition, right? So, the adding--the adding
of the report definition then haven't changed.

00:04:13.300 --> 00:04:19.430
They're very similar to the whole V2009 concept
of GET, mutate [INDISTINCT]. So that's just

00:04:19.430 --> 00:04:20.430
been converted over from the ReportService
as well. So how do you run the report? You

00:04:20.430 --> 00:04:21.430
issue an HTTP GET Request to a reportURL.
You can see it over here. Basically, that

00:04:21.430 --> 00:04:22.430
URL is your report definition ID [INDISTINCT].
At the time that you make the GET request,

00:04:22.430 --> 00:04:23.430
that's when the report runs and returns. So
there might be a question there. It used to

00:04:23.430 --> 00:04:24.430
be there is no [INDISTINCT], you know that
sometimes the reports will take quite a while

00:04:24.430 --> 00:04:25.430
to return. So why does this GET request times
out by the time--before the report is ready?

00:04:25.430 --> 00:04:26.430
Well, with the new service, we've actually
made a point of returning within that timeframe--within

00:04:26.430 --> 00:04:27.430
the timeframe of a GET request timeout. So
that means you can look forward to getting

00:04:27.430 --> 00:04:28.430
your reports--you report data much faster.
Another important note, in the GET request,

00:04:28.430 --> 00:04:29.430
you have to set the authorization header.
As you can see there, [INDISTINCT] authorization

00:04:29.430 --> 00:04:31.530
header, "GoogleLogin auth" equals [INDISTINCT]
user.getRegisteredAuthToken. So the auth code

00:04:31.530 --> 00:04:40.150
[INDISTINCT] something you have already created
by this point as your ID [INDISTINCT] service.

00:04:40.150 --> 00:04:44.930
I think we're in the header here. I should
make my request. That's just for added securities

00:04:44.930 --> 00:04:49.340
that no [INDISTINCT] user could just go and
put that URL and [INDISTINCT] your report.

00:04:49.340 --> 00:04:56.659
So before--when you're taking for date ranges,
you can actually set the date ranges for them.

00:04:56.659 --> 00:04:59.654
And these are the various [INDISTINCT] that
are available. So the idea here is that you

00:04:59.654 --> 00:05:02.999
add the report only once. So I create the
report definition. Let's say, I want to just

00:05:02.999 --> 00:05:07.090
cover the last seven days, so [INDISTINCT]
report [INDISTINCT] last seven days. I create

00:05:07.090 --> 00:05:11.439
that before definition once. I've added it
and then every seven days I'd have a [INDISTINCT]

00:05:11.439 --> 00:05:15.710
for example, that [INDISTINCT] get request
to the report URL and then we'll get that

00:05:15.710 --> 00:05:20.120
report every seven days. And again, every
time I [INDISTINCT] the GET request, that's

00:05:20.120 --> 00:05:25.330
when that report is run, right? So then, it'll
probably last seven days, and it's more important

00:05:25.330 --> 00:05:30.990
that way. In case this [INDISTINCT] crashes
one day or something I need to run a one-off

00:05:30.990 --> 00:05:34.770
report, then you can set a--create a new report
definition with the same fields, you set a

00:05:34.770 --> 00:05:39.979
custom date for the date's randomness and
then just run that [INDISTINCT]. So these

00:05:39.979 --> 00:05:45.360
are the various report types that are available
in v201008. A lot of these look familiar.

00:05:45.360 --> 00:05:52.820
I think a few of them are new, on the next
slide here. So also that it's very straightforward

00:05:52.820 --> 00:05:59.810
in [INDISTINCT]. You might have noticed that
structure reports weren't listed there, whereas

00:05:59.810 --> 00:06:06.770
those existed in v13, right? The reason why
those are listed in v13 was because in v13,

00:06:06.770 --> 00:06:10.383
campaigns that serve zero impressions would
not get returned in campaign reports--in campaign

00:06:10.383 --> 00:06:16.360
performance reports. So in v13, that's why
we have structure reports so that you could

00:06:16.360 --> 00:06:20.311
get all the campaigns on your accounts whether
they serve zero impressions or not. And then,

00:06:20.311 --> 00:06:26.029
you have an idea of what their structure would
looks like. In v201008 whether it serves zero

00:06:26.029 --> 00:06:30.349
impressions or more, all campaigns are returned
in the return data. So you'll always get a

00:06:30.349 --> 00:06:39.690
view of the structure of the account--the
campaigns under it. So that's why there are

00:06:39.690 --> 00:06:41.659
no more structure reports in v201008. Okay,
so one note about cross-client reporting,

00:06:41.659 --> 00:06:46.319
it's not available in v201008 yet. So cross-client
reporting is only available in v13 for now

00:06:46.319 --> 00:06:50.949
and that's the reason why we keep ReportService
in v13 around for a little--a little longer.

00:06:50.949 --> 00:06:56.830
There are plans to, of course, have cross-client
support available in v201008. No specific

00:06:56.830 --> 00:06:58.669
timeline on when that's going to be available
yet. But we're looking into that.

