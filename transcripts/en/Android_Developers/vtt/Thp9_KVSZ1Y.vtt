WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.390
[MUSIC PLAYING]

00:00:06.700 --> 00:00:07.590
MIKE DAVIS: Hi.

00:00:07.590 --> 00:00:10.510
Welcome, I'm Mike, an
engineering manager

00:00:10.510 --> 00:00:12.430
on the Google Play Console.

00:00:12.430 --> 00:00:14.500
And I'm very happy
to be here today

00:00:14.500 --> 00:00:16.149
to talk to you about
a subject that's

00:00:16.149 --> 00:00:18.640
particularly important
to my team and I,

00:00:18.640 --> 00:00:21.470
and that is enabling
success on Android

00:00:21.470 --> 00:00:26.830
through safe, controlled,
effective app releases.

00:00:26.830 --> 00:00:30.180
We know from yourselves,
from our own experience,

00:00:30.180 --> 00:00:32.215
and the experience of
other teams at Google,

00:00:32.215 --> 00:00:34.680
that releasing new
apps and updates

00:00:34.680 --> 00:00:38.690
is what you might describe
as an exciting time.

00:00:38.690 --> 00:00:41.080
It's the time when
all that hard work

00:00:41.080 --> 00:00:43.300
the whole team has
been putting in finally

00:00:43.300 --> 00:00:45.430
gets into the hands
of your users.

00:00:45.430 --> 00:00:47.200
And that is an
incredible feeling.

00:00:50.440 --> 00:00:53.500
Users are going to be delighted
by your new functionality

00:00:53.500 --> 00:00:55.630
and improved performance.

00:00:55.630 --> 00:00:58.240
Business metrics are going
to go through the roof.

00:00:58.240 --> 00:00:59.740
And everyone is
going to be catching

00:00:59.740 --> 00:01:02.800
on to that good
kind of excitement.

00:01:02.800 --> 00:01:05.530
In essence, for a
good release, we

00:01:05.530 --> 00:01:09.040
need to delight users
with new experiences.

00:01:09.040 --> 00:01:12.070
We need to maintain and improve
those important business

00:01:12.070 --> 00:01:13.380
metrics.

00:01:13.380 --> 00:01:16.660
And, of course, we need to
get that tech right to deliver

00:01:16.660 --> 00:01:19.900
a stable, high quality product.

00:01:19.900 --> 00:01:22.640
Simple, right?

00:01:22.640 --> 00:01:27.250
But releases, they also present
us with some challenges.

00:01:27.250 --> 00:01:30.176
We need to keep our
existing users happy.

00:01:30.176 --> 00:01:32.050
We need to make sure
we're actually improving

00:01:32.050 --> 00:01:35.910
those key performance
indicators, and of course,

00:01:35.910 --> 00:01:40.190
not introduce performance
regressions or bugs.

00:01:40.190 --> 00:01:42.950
And if we do get
this wrong, it can

00:01:42.950 --> 00:01:46.800
lead to an altogether
different kind of excitement.

00:01:46.800 --> 00:01:50.960
A miscalculated release may
result in crashes and bad user

00:01:50.960 --> 00:01:56.660
experience, and this can have
a prompt and measurable impact.

00:01:56.660 --> 00:01:58.580
We crunched some
numbers on the subject,

00:01:58.580 --> 00:02:05.150
and our data shows users are
26% more likely to give one star

00:02:05.150 --> 00:02:09.800
reviews on the days when
your app is at its crashiest

00:02:09.800 --> 00:02:13.820
For games, this increases to
a staggering 52% more one star

00:02:13.820 --> 00:02:16.430
ratings.

00:02:16.430 --> 00:02:19.070
Similarly, in
reviews, for reviews

00:02:19.070 --> 00:02:21.830
given on those
crashiest days, users

00:02:21.830 --> 00:02:26.930
are 38% more likely to
mention stability and bugs.

00:02:26.930 --> 00:02:29.430
And as you might expect,
this is not just limited

00:02:29.430 --> 00:02:31.560
to ratings in the store.

00:02:31.560 --> 00:02:34.920
Key performance indicators
are also affected.

00:02:34.920 --> 00:02:37.110
Engagement metrics
and in-store numbers

00:02:37.110 --> 00:02:39.240
also suffer when
your app is crashing.

00:02:41.930 --> 00:02:44.240
On top of all this,
let's take a moment

00:02:44.240 --> 00:02:47.630
to think about the ecosystem
in which you're operating here.

00:02:47.630 --> 00:02:50.720
At more than 2 billion
active devices,

00:02:50.720 --> 00:02:53.330
Android is, in fact, the
largest software and computing

00:02:53.330 --> 00:02:56.060
platform on the planet.

00:02:56.060 --> 00:02:59.450
Of course, this presents
phenomenal opportunity

00:02:59.450 --> 00:03:03.920
for scale and reach to influence
an incredibly large diverse set

00:03:03.920 --> 00:03:05.570
of users.

00:03:05.570 --> 00:03:08.900
However, it also presents
some unique challenges

00:03:08.900 --> 00:03:11.220
when it comes to
software deployment.

00:03:11.220 --> 00:03:14.090
That incredible
diversity in users

00:03:14.090 --> 00:03:18.056
also comes with unprecedented
diversity in device types,

00:03:18.056 --> 00:03:19.430
with thousands of
different makes

00:03:19.430 --> 00:03:21.980
and models across a variety
of different form factors.

00:03:26.300 --> 00:03:29.870
And so to have great
releases and to keep

00:03:29.870 --> 00:03:32.190
with that good
kind of excitement,

00:03:32.190 --> 00:03:36.080
we need to listen and validate
functionality improvements

00:03:36.080 --> 00:03:38.440
by collecting feedback
from a representative set

00:03:38.440 --> 00:03:41.870
of engaged, enthusiastic users.

00:03:41.870 --> 00:03:44.000
We need to measure
to make sure we're

00:03:44.000 --> 00:03:47.720
having the right impact on those
key user and business metrics.

00:03:47.720 --> 00:03:50.420
And we need to optimize
that technology

00:03:50.420 --> 00:03:54.520
by detecting those bugs
and stability issues.

00:03:54.520 --> 00:03:56.740
Not only this, but
ideally, we want

00:03:56.740 --> 00:03:59.570
to do all this as
early as possible.

00:03:59.570 --> 00:04:02.000
The sooner we catch
problems, the better.

00:04:02.000 --> 00:04:06.430
Be them bugs, usability issues,
or business metric regressions.

00:04:06.430 --> 00:04:09.700
The sooner we catch
problems, the more scalable

00:04:09.700 --> 00:04:13.330
our processes are, the more
effective our teams can be,

00:04:13.330 --> 00:04:17.440
and the faster we can ship
even more great features.

00:04:17.440 --> 00:04:20.500
And this is where the
right tools and release

00:04:20.500 --> 00:04:23.380
process comes in.

00:04:23.380 --> 00:04:25.172
For the next part
of this session,

00:04:25.172 --> 00:04:26.880
we'll walk you through
the suite of tools

00:04:26.880 --> 00:04:28.630
that the Google
Play Console makes

00:04:28.630 --> 00:04:31.630
available to help you handle
this process confidently

00:04:31.630 --> 00:04:33.694
and effectively.

00:04:33.694 --> 00:04:35.860
We'll look at deploying
your release to increasingly

00:04:35.860 --> 00:04:37.960
large audiences,
and what you can

00:04:37.960 --> 00:04:40.720
hope to achieve at
each phase to reach

00:04:40.720 --> 00:04:42.815
the ultimate goal of
deploying a great new app

00:04:42.815 --> 00:04:45.610
or update to everybody.

00:04:45.610 --> 00:04:48.610
And after that, we'll welcome
Radha from the Android system

00:04:48.610 --> 00:04:51.550
health team to give us a deep
dive on the Google app release

00:04:51.550 --> 00:04:52.840
process.

00:04:52.840 --> 00:04:54.580
We'll see how teams at Google--

00:04:54.580 --> 00:04:57.250
big and small-- are making
great use of these tools

00:04:57.250 --> 00:05:00.660
to scale their
release processes.

00:05:00.660 --> 00:05:03.310
And so to begin
all that, I'd like

00:05:03.310 --> 00:05:07.310
to welcome on stage, Serge, an
engineer on the Play Console,

00:05:07.310 --> 00:05:12.070
to talk to us about the first
phase of our release, testing.

00:05:12.070 --> 00:05:14.420
[APPLAUSE]

00:05:17.250 --> 00:05:18.720
SERGE BEAUCHAMP: Thanks, Mike.

00:05:18.720 --> 00:05:21.350
First, I'd like to
do a show of hands,

00:05:21.350 --> 00:05:24.890
who amongst you have published
an app in the Play Console

00:05:24.890 --> 00:05:26.280
already?

00:05:26.280 --> 00:05:27.570
Wow.

00:05:27.570 --> 00:05:30.600
And please, keep your
hands up if you also

00:05:30.600 --> 00:05:35.250
have been using the alpha
and beta track for your app.

00:05:35.250 --> 00:05:36.300
Well, you guys are great.

00:05:36.300 --> 00:05:38.580
I think you'll love this talk.

00:05:38.580 --> 00:05:41.130
Of course, for those
who haven't yet

00:05:41.130 --> 00:05:42.990
published an app in
the Play Console,

00:05:42.990 --> 00:05:46.350
a track is a way to
define a group of users

00:05:46.350 --> 00:05:49.140
to whom you can
publish your app.

00:05:49.140 --> 00:05:50.880
For example, there's
the production track

00:05:50.880 --> 00:05:55.230
which targets all the over
2 billion Android users.

00:05:55.230 --> 00:05:58.200
And then, there is the
alpha and beta track

00:05:58.200 --> 00:06:01.180
which targets a much
smaller subset of users.

00:06:01.180 --> 00:06:05.610
Of course, before you publish
your app to the world,

00:06:05.610 --> 00:06:07.740
testing your app with
that small group of users

00:06:07.740 --> 00:06:09.930
is really important.

00:06:09.930 --> 00:06:12.960
This is for catching
bugs, issues, but also

00:06:12.960 --> 00:06:15.630
to scale and move faster.

00:06:15.630 --> 00:06:19.800
Key to this is distributing
your test version of your app

00:06:19.800 --> 00:06:21.760
to a small group of users.

00:06:21.760 --> 00:06:26.610
This could be either your wider
team, product managers, a QA

00:06:26.610 --> 00:06:30.930
team, or whoever can provide
you with early feedback.

00:06:30.930 --> 00:06:33.190
There's lots of ways to do that.

00:06:33.190 --> 00:06:37.675
One way would be to simply
email APKs to your users,

00:06:37.675 --> 00:06:39.840
but that's quite cumbersome
and actually that

00:06:39.840 --> 00:06:42.870
puts a lot of burden
on their shoulders.

00:06:42.870 --> 00:06:45.030
While the alpha
and beta track can

00:06:45.030 --> 00:06:48.600
be used for
distributing test APKs,

00:06:48.600 --> 00:06:51.390
we heard from you
that, actually,

00:06:51.390 --> 00:06:53.580
the alpha and beta track
are too slow for that kind

00:06:53.580 --> 00:06:56.580
of fast, iterative testing.

00:06:56.580 --> 00:06:59.050
And this is because--
as we'll see later--

00:06:59.050 --> 00:07:01.950
the alpha and beta track are
designed for scale testing

00:07:01.950 --> 00:07:04.560
with potentially
millions of users.

00:07:04.560 --> 00:07:07.170
And the APKs published
to those tracks

00:07:07.170 --> 00:07:09.420
goes through processing
that can take several hours.

00:07:15.010 --> 00:07:18.130
To enable fast,
iterative testing,

00:07:18.130 --> 00:07:20.700
we introduced the
internal test track.

00:07:20.700 --> 00:07:24.520
The internal test track is a
new track in the Play Console

00:07:24.520 --> 00:07:27.800
that is designed to distribute
test versions of your app

00:07:27.800 --> 00:07:31.220
to a small group of users
within your organization.

00:07:31.220 --> 00:07:34.630
Let me show you how it works.

00:07:34.630 --> 00:07:38.740
Switching to the
computer, here, I

00:07:38.740 --> 00:07:40.990
have my test app
that they created

00:07:40.990 --> 00:07:43.840
for this demo called I/O demo.

00:07:43.840 --> 00:07:45.700
And I have it here
in the Play Console.

00:07:45.700 --> 00:07:48.490
This is the App Release's page.

00:07:48.490 --> 00:07:49.990
And we can see I
have the production

00:07:49.990 --> 00:07:55.150
track, the beta track, the alpha
track, and a new internal test

00:07:55.150 --> 00:07:56.500
track.

00:07:56.500 --> 00:07:59.560
You can see here
I have version--

00:07:59.560 --> 00:08:02.920
actually, I have version
49 already published

00:08:02.920 --> 00:08:06.470
in a release in this track--

00:08:06.470 --> 00:08:08.690
version 49, here.

00:08:08.690 --> 00:08:10.610
I have one tester for this app--

00:08:10.610 --> 00:08:13.590
switching to the device.

00:08:13.590 --> 00:08:14.827
And you can see this--

00:08:14.827 --> 00:08:15.910
can you see on the device?

00:08:20.365 --> 00:08:22.020
Very soon, yes.

00:08:22.020 --> 00:08:24.190
So this is my testers
device, and you

00:08:24.190 --> 00:08:28.600
can see I have this I/O
demo app in the launcher.

00:08:28.600 --> 00:08:31.560
When I open it, there's
a single activity,

00:08:31.560 --> 00:08:33.789
and it shows the version code.

00:08:33.789 --> 00:08:37.480
I'm guessing that your app
is a bit more sophisticated.

00:08:37.480 --> 00:08:40.720
If I go in the Play
Console, I can see

00:08:40.720 --> 00:08:42.770
that I don't have any updates.

00:08:42.770 --> 00:08:46.750
So the version code of my
APK on my tester's device

00:08:46.750 --> 00:08:49.000
is the same one that
is in the release

00:08:49.000 --> 00:08:52.420
that I rolled out in
the internal test track.

00:08:52.420 --> 00:08:55.570
Now, Mike here just told
me that actually my app

00:08:55.570 --> 00:08:58.270
doesn't conform with
the official Google I/O

00:08:58.270 --> 00:09:00.610
branding for the color scheme.

00:09:00.610 --> 00:09:03.610
So I will go and
fix this and quickly

00:09:03.610 --> 00:09:05.674
distribute an app to my tester.

00:09:05.674 --> 00:09:06.965
I'm going back to the computer.

00:09:09.620 --> 00:09:11.910
So we'll go to Android Studio.

00:09:11.910 --> 00:09:14.820
Here, in Android Studio,
I have my project

00:09:14.820 --> 00:09:17.940
already open with my app.

00:09:17.940 --> 00:09:22.330
I also have installed a
Gradle Play Publisher plugin,

00:09:22.330 --> 00:09:25.080
which is set up so that
it automatically published

00:09:25.080 --> 00:09:28.980
the Play Console updates
and builds I make of my app.

00:09:28.980 --> 00:09:30.600
I have a gradle task here--

00:09:30.600 --> 00:09:33.720
publish APK release--
and when I invoke it,

00:09:33.720 --> 00:09:37.920
it automatically pushes the new
test track to build on my app.

00:09:37.920 --> 00:09:40.390
So I will create a new version--

00:09:40.390 --> 00:09:43.400
version 50.

00:09:43.400 --> 00:09:48.380
And then, I will change my
color to, what was it again?

00:09:48.380 --> 00:09:51.920
Space pineapple.

00:09:51.920 --> 00:09:57.020
So what will happen is that
when I invoke this gradle task,

00:09:57.020 --> 00:10:02.206
it will automatically
build the APK

00:10:02.206 --> 00:10:03.830
and then upload it
to the Play Console,

00:10:03.830 --> 00:10:05.810
to the internal test track.

00:10:05.810 --> 00:10:09.500
Once the upload completes,
I will start a timer here.

00:10:09.500 --> 00:10:11.980
I have another
device with a timer,

00:10:11.980 --> 00:10:14.400
and I set the timer
for two hours.

00:10:14.400 --> 00:10:16.580
I hope you guys
are not in a hurry.

00:10:16.580 --> 00:10:19.070
This is because this is
how long you should expect

00:10:19.070 --> 00:10:22.310
it to take if I was to
publish this APK to the alpha

00:10:22.310 --> 00:10:24.410
and beta track.

00:10:24.410 --> 00:10:27.590
Then, I will go to the Play
Store on my testers device,

00:10:27.590 --> 00:10:29.866
and I will check for an update.

00:10:29.866 --> 00:10:31.490
And as soon as the
update is available,

00:10:31.490 --> 00:10:33.950
I will stop the timer, and
we'll see how long it takes.

00:10:37.320 --> 00:10:39.090
So I start a task.

00:10:39.090 --> 00:10:41.930
So let's switch to
the device, please.

00:10:41.930 --> 00:10:45.360
So Android Studio
is building the APK

00:10:45.360 --> 00:10:47.850
and has started to upload it.

00:10:47.850 --> 00:10:51.120
Of course, I don't usually
do this in a Wi-Fi network

00:10:51.120 --> 00:10:52.890
in a tent shared
by 2,000 people,

00:10:52.890 --> 00:10:55.150
but hopefully it still works.

00:11:00.540 --> 00:11:02.870
So now the upload has completed.

00:11:02.870 --> 00:11:07.430
If I go in my tester's
device, or I start the timer.

00:11:07.430 --> 00:11:09.080
I check for an update.

00:11:09.080 --> 00:11:11.960
Oh, my update is here already.

00:11:11.960 --> 00:11:16.030
So actually, that took
less than five seconds.

00:11:16.030 --> 00:11:20.140
So if I update my app,
it installs the update.

00:11:20.140 --> 00:11:21.730
I open it.

00:11:21.730 --> 00:11:24.760
And I have my new color scheme
with my new version code.

00:11:24.760 --> 00:11:27.110
[APPLAUSE]

00:11:31.340 --> 00:11:34.660
This is dramatically faster
than publishing to the alpha

00:11:34.660 --> 00:11:36.465
and beta track, as you can see.

00:11:36.465 --> 00:11:38.210
Actually, it's quite amazing.

00:11:38.210 --> 00:11:41.340
I've been advised against
doing a live demo on stage

00:11:41.340 --> 00:11:43.870
at Google I/O with
a real device,

00:11:43.870 --> 00:11:44.970
but you guys deserve it.

00:11:47.940 --> 00:11:52.830
So we've seen how you can
publish to the Play Console

00:11:52.830 --> 00:11:55.560
using a gradle plug-in
in Android Studio.

00:11:55.560 --> 00:11:58.390
But of course, you can
also use the Play Console

00:11:58.390 --> 00:12:00.670
UI to do just that.

00:12:03.750 --> 00:12:07.860
You can set up testers--

00:12:07.860 --> 00:12:10.650
sorry-- skipped a slide.

00:12:10.650 --> 00:12:12.630
So you can set up
testers by specifying

00:12:12.630 --> 00:12:14.910
a list of email addresses.

00:12:14.910 --> 00:12:18.420
The testers opt in
with a single URL.

00:12:18.420 --> 00:12:22.410
Then, the testers use the
Play Store app on the device

00:12:22.410 --> 00:12:24.630
to install and update your app.

00:12:24.630 --> 00:12:28.080
It's super simple for
testers to set up.

00:12:28.080 --> 00:12:31.320
It works on any Android
device with the Play Store.

00:12:31.320 --> 00:12:33.960
And there's no special
app or permission.

00:12:33.960 --> 00:12:38.970
It's fast, safe, and simple.

00:12:38.970 --> 00:12:43.110
Sorry-- there's two buttons here
and 50% chance of missing it.

00:12:46.160 --> 00:12:48.420
In order to get
APKs out quickly,

00:12:48.420 --> 00:12:51.980
we distribute them to
testers before the processing

00:12:51.980 --> 00:12:54.400
of the APK has completed.

00:12:54.400 --> 00:12:58.820
So although the publishing
of the APKs is instant,

00:12:58.820 --> 00:13:01.850
the APKs and bundles published
in the internal test track

00:13:01.850 --> 00:13:04.540
are still subject
to Play policies.

00:13:04.540 --> 00:13:06.710
The update for internal
testers is also

00:13:06.710 --> 00:13:09.290
different than from alpha beta.

00:13:09.290 --> 00:13:13.160
So users can be either
alpha beta testers

00:13:13.160 --> 00:13:15.320
or internal testers.

00:13:15.320 --> 00:13:19.340
There's also a cap of 100
testers in the internal test

00:13:19.340 --> 00:13:21.320
track per app.

00:13:21.320 --> 00:13:25.610
The new internal test track is
supported by the Play Console

00:13:25.610 --> 00:13:30.750
publisher API and by many Play
Console publisher plug-ins.

00:13:30.750 --> 00:13:35.180
So that means that you
can automate publishing

00:13:35.180 --> 00:13:38.560
to the internal test track
very easily from your existing

00:13:38.560 --> 00:13:40.760
toolchains and workflows.

00:13:40.760 --> 00:13:43.240
You can get up and running
with very little change.

00:13:46.010 --> 00:13:48.740
The internal test track is
great for quick iteration

00:13:48.740 --> 00:13:52.400
during development, for
catching bugs early,

00:13:52.400 --> 00:13:54.970
for getting fast
feedback from your team,

00:13:54.970 --> 00:13:58.250
and also for testing
Play integration.

00:13:58.250 --> 00:14:00.860
Because your app is
published through Play,

00:14:00.860 --> 00:14:03.770
it supports all
the Play features--

00:14:03.770 --> 00:14:07.820
LVL testing, in-app purchases,
and most importantly,

00:14:07.820 --> 00:14:12.030
the new Android app bundle and
dynamic developer features.

00:14:12.030 --> 00:14:14.480
So if you're thinking about
trying out those features,

00:14:14.480 --> 00:14:18.710
the internal test track
is a great way to do that.

00:14:18.710 --> 00:14:21.500
Once you have your
app tested internally

00:14:21.500 --> 00:14:25.490
with the internal test track,
you're ready for real users.

00:14:25.490 --> 00:14:28.850
Although, typically,
you're not yet

00:14:28.850 --> 00:14:31.220
ready to open up to everyone.

00:14:31.220 --> 00:14:34.550
You might be looking for
trusted feedback on maybe

00:14:34.550 --> 00:14:36.980
a confidential set of features.

00:14:36.980 --> 00:14:40.520
Closed testing allows you
to scale up your testing,

00:14:40.520 --> 00:14:45.150
while maintaining control
of who can get your app.

00:14:45.150 --> 00:14:48.830
The alpha and beta track have
been supporting closed testing

00:14:48.830 --> 00:14:51.290
for some time now,
but we heard feedback

00:14:51.290 --> 00:14:55.970
that as your app scales,
the alpha and beta track

00:14:55.970 --> 00:14:58.900
don't scale well with
various testing scenarios.

00:14:58.900 --> 00:15:00.890
What if, for example,
you would like

00:15:00.890 --> 00:15:05.320
to test your app with a track
for each feature branch?

00:15:05.320 --> 00:15:08.120
Or what if you would like
to create a new track

00:15:08.120 --> 00:15:10.430
for new events or milestones?

00:15:10.430 --> 00:15:12.800
Well, I'm delighted to
announce that now you

00:15:12.800 --> 00:15:17.180
can create new, additional
closed testing tracks, enabling

00:15:17.180 --> 00:15:19.910
all those scenarios.

00:15:19.910 --> 00:15:25.040
You now have one production
track, one open testing track,

00:15:25.040 --> 00:15:27.730
any number of closed
testing track,

00:15:27.730 --> 00:15:31.280
and an internal test track.

00:15:31.280 --> 00:15:33.710
When you want to create an
additional closed testing

00:15:33.710 --> 00:15:38.960
track, you can just click on
the button, Create Closed Track.

00:15:38.960 --> 00:15:41.750
Choose any name you want,
and that name is also

00:15:41.750 --> 00:15:44.270
used in the API.

00:15:44.270 --> 00:15:46.790
From our early
adopters, we have seen

00:15:46.790 --> 00:15:48.950
that this is great
for user studies,

00:15:48.950 --> 00:15:51.710
country-specific
variants, printing feature

00:15:51.710 --> 00:15:55.490
branches, and testing in
incrementally larger groups.

00:15:55.490 --> 00:15:57.800
I'm just scratching
the surface of how

00:15:57.800 --> 00:16:00.620
those new tracks can be used.

00:16:00.620 --> 00:16:04.440
For those who have been using
the alpha and beta track,

00:16:04.440 --> 00:16:07.670
you may have heard
of pre-launch report.

00:16:07.670 --> 00:16:09.350
It takes APKs--

00:16:09.350 --> 00:16:11.630
APKs that you publish
to the Play Console--

00:16:11.630 --> 00:16:16.460
and install them on 10 different
unique devices in test forms.

00:16:16.460 --> 00:16:18.290
It runs your app
for five minutes

00:16:18.290 --> 00:16:23.390
at a time with robo for nearly
an hour of testing in total.

00:16:23.390 --> 00:16:26.660
It shows crash reports,
performance issues,

00:16:26.660 --> 00:16:29.320
and security vulnerabilities.

00:16:29.320 --> 00:16:32.600
Pre-launch report
also added new ways

00:16:32.600 --> 00:16:35.790
to control the crawl,
like robo scripts and demo

00:16:35.790 --> 00:16:37.120
loops for games.

00:16:37.120 --> 00:16:39.800
They are announcing
exciting new features.

00:16:39.800 --> 00:16:42.530
Go see their awesome
talk tomorrow at 9:30.

00:16:42.530 --> 00:16:45.330
Be sure to set an
alarm for that.

00:16:45.330 --> 00:16:46.940
Or if you're like
me and you still

00:16:46.940 --> 00:16:50.510
wake up on a different
time zone, you'll be set.

00:16:50.510 --> 00:16:54.140
As we've seen, closed
testing is great for once you

00:16:54.140 --> 00:16:57.980
want to test your app with
a set of trusted testers,

00:16:57.980 --> 00:17:00.140
but typically, the
problem with those users

00:17:00.140 --> 00:17:02.990
is that they're not very
representative of production

00:17:02.990 --> 00:17:04.400
users.

00:17:04.400 --> 00:17:09.800
Obviously, production users
have a wider set of devices,

00:17:09.800 --> 00:17:14.250
but they might not be as
motivated as trusted testers

00:17:14.250 --> 00:17:16.930
and might engage with a
different set of features

00:17:16.930 --> 00:17:19.160
on your app.

00:17:19.160 --> 00:17:22.460
When you want to have broad
coverage of your code,

00:17:22.460 --> 00:17:27.290
find technical issues, or get
more relevant business metrics,

00:17:27.290 --> 00:17:29.330
you can use open testing.

00:17:29.330 --> 00:17:31.400
Releasing to open testing--

00:17:31.400 --> 00:17:36.140
allow any user to discover and
join your testing community

00:17:36.140 --> 00:17:40.020
directly from the Google Play
Store app on their device.

00:17:40.020 --> 00:17:42.980
And these users can provide
you private feedback

00:17:42.980 --> 00:17:45.170
that you can review
in the Play Console.

00:17:45.170 --> 00:17:49.040
And those feedbacks won't
affect your public ratings.

00:17:49.040 --> 00:17:51.740
This is a great way to
scale up and to make sure

00:17:51.740 --> 00:17:53.480
that the new version
of your app provides

00:17:53.480 --> 00:17:55.970
a great experience to
users before you launch it

00:17:55.970 --> 00:17:57.180
to the world.

00:17:57.180 --> 00:18:01.190
If you need to you can also set
a cap on the number of testers

00:18:01.190 --> 00:18:04.250
or of users that join that
testing program to keep things

00:18:04.250 --> 00:18:05.750
manageable.

00:18:05.750 --> 00:18:08.900
Of course, open testing
is only as valuable

00:18:08.900 --> 00:18:11.450
as users are willing
to participate.

00:18:11.450 --> 00:18:15.230
Today, there are over
230 million users

00:18:15.230 --> 00:18:19.940
who already opted in open test,
with two and a half million

00:18:19.940 --> 00:18:22.470
users opting in each week.

00:18:22.470 --> 00:18:26.910
So it's really up to you
to put it to good use.

00:18:26.910 --> 00:18:30.450
Late last year, we also
introduced a new country

00:18:30.450 --> 00:18:32.550
targeting for testing tracks.

00:18:32.550 --> 00:18:34.620
With country
targeting testing, you

00:18:34.620 --> 00:18:38.280
can now control the country
availability for each track

00:18:38.280 --> 00:18:39.640
individually.

00:18:39.640 --> 00:18:43.580
This can be used for both
open and closed testing,

00:18:43.580 --> 00:18:47.490
and allows you to run a test
in a different set of countries

00:18:47.490 --> 00:18:52.010
to those in which a
production app is live.

00:18:52.010 --> 00:18:55.040
We have seen some
of the features Play

00:18:55.040 --> 00:18:57.500
provides to help
you test your app.

00:18:57.500 --> 00:19:01.020
It's time to go to the next
step in the release process.

00:19:01.020 --> 00:19:04.240
And for that, I'm going
to hand it over to Nick,

00:19:04.240 --> 00:19:06.620
another engineer on the
Play Console, who will

00:19:06.620 --> 00:19:10.089
talk to you about rollouts.

00:19:10.089 --> 00:19:12.504
[APPLAUSE]

00:19:14.930 --> 00:19:16.400
NICHOLAS LATIVY: Thanks, Serge.

00:19:16.400 --> 00:19:20.220
So you've tested internally,
then in closed groups,

00:19:20.220 --> 00:19:22.790
and finally, using open testing.

00:19:22.790 --> 00:19:25.070
You've polished the
user experience,

00:19:25.070 --> 00:19:27.230
optimized those
business metrics,

00:19:27.230 --> 00:19:30.080
and ironed out those bugs
and performance issues.

00:19:30.080 --> 00:19:33.440
You're confident this
new release has it all.

00:19:33.440 --> 00:19:38.010
The only thing left to do is
roll it out to the public.

00:19:38.010 --> 00:19:41.150
Last I/O, we unveiled a
new gated release flow

00:19:41.150 --> 00:19:42.860
for managing your release.

00:19:42.860 --> 00:19:45.650
Thank you for all the
feedback you provided.

00:19:45.650 --> 00:19:47.630
Based on this input,
we have further

00:19:47.630 --> 00:19:50.210
streamlined the process,
making it faster

00:19:50.210 --> 00:19:52.610
to provide translated
release notes

00:19:52.610 --> 00:19:55.130
and enhancing the
APK upload process

00:19:55.130 --> 00:19:58.430
so you can drag and drop all
your APKs into your release

00:19:58.430 --> 00:20:00.140
in a single step.

00:20:00.140 --> 00:20:04.010
We have also introduced support
for Instant Apps, Instant

00:20:04.010 --> 00:20:10.920
Games, Actions on Android, and
the new Android App Bundle.

00:20:10.920 --> 00:20:13.410
In preparation for the
new Android App Bundle,

00:20:13.410 --> 00:20:15.480
we have introduced
a new UI to help

00:20:15.480 --> 00:20:19.230
you understand the contents
of your APK or bundle.

00:20:19.230 --> 00:20:21.390
Even if you aren't using
Android App Bundle,

00:20:21.390 --> 00:20:25.230
this provides useful insight
into the sizes of your APKs.

00:20:25.230 --> 00:20:28.710
Keeping your APKs as small
as possible means users

00:20:28.710 --> 00:20:32.070
can download and install faster
and have more free space left

00:20:32.070 --> 00:20:34.740
for their photos and music.

00:20:34.740 --> 00:20:38.100
On average, apps will
see a 20% size reduction

00:20:38.100 --> 00:20:41.400
by using Android App Bundle,
and the Bundle Explorer

00:20:41.400 --> 00:20:43.920
can show you exactly
the size saving

00:20:43.920 --> 00:20:45.390
you can achieve for your app.

00:20:48.930 --> 00:20:51.900
We recommend all developers
use stage rollouts

00:20:51.900 --> 00:20:53.670
when rolling to production.

00:20:53.670 --> 00:20:57.210
Stage rollouts allow you to
control the percentage of users

00:20:57.210 --> 00:21:00.270
eligible to update and
gradually increase this

00:21:00.270 --> 00:21:03.360
as your confidence
in the release grows.

00:21:03.360 --> 00:21:06.000
In the unlikely event
that something goes wrong,

00:21:06.000 --> 00:21:08.940
you can also halt the release
where only a small percentage

00:21:08.940 --> 00:21:12.300
of users are affected.

00:21:12.300 --> 00:21:15.030
We're really happy to see
that since introducing

00:21:15.030 --> 00:21:18.060
the new gated release
flow, twice as many of you

00:21:18.060 --> 00:21:19.800
are making use of
stage rollouts.

00:21:22.930 --> 00:21:26.080
Following on from this, we
have extended stage rollouts

00:21:26.080 --> 00:21:29.540
with the new country
targeted rollout option.

00:21:29.540 --> 00:21:32.320
This allows you to rollout
per country in addition

00:21:32.320 --> 00:21:34.090
to by percentage.

00:21:34.090 --> 00:21:37.200
This is really useful to
start your release in a market

00:21:37.200 --> 00:21:39.160
that you have a deep
understanding of,

00:21:39.160 --> 00:21:42.520
making it easier to understand
your business metrics

00:21:42.520 --> 00:21:43.930
as the rollout progresses.

00:21:46.800 --> 00:21:48.600
Once your release
is rolling out,

00:21:48.600 --> 00:21:51.240
you can use the release
dashboard in the Play Console

00:21:51.240 --> 00:21:55.380
to monitor key metrics, such as
update rates and app ratings,

00:21:55.380 --> 00:21:58.410
as well as crashes and ANRs.

00:21:58.410 --> 00:22:01.080
These metrics help you
evaluate your release

00:22:01.080 --> 00:22:05.250
and ensure it remains healthy
as you proceed with the rollout.

00:22:05.250 --> 00:22:08.530
The Statistics view now
shows release events,

00:22:08.530 --> 00:22:10.650
making it even
easier to understand

00:22:10.650 --> 00:22:13.350
the impact of a rollout.

00:22:13.350 --> 00:22:15.030
For a more detailed
view, you can

00:22:15.030 --> 00:22:17.370
use the Vitals page
to check metrics

00:22:17.370 --> 00:22:21.130
like battery usage, jank,
wait lock usage, and others.

00:22:24.140 --> 00:22:26.630
While we've introduced
many exciting new features

00:22:26.630 --> 00:22:29.060
for releasing your app
through the Play Console,

00:22:29.060 --> 00:22:32.150
we know that many of you
automate your APK deployment

00:22:32.150 --> 00:22:34.250
with continuous
integration systems

00:22:34.250 --> 00:22:37.640
or using gradle plug-ins--
as Serge did earlier.

00:22:37.640 --> 00:22:40.850
So we've updated
the publishing API,

00:22:40.850 --> 00:22:43.400
and from today, you
can use these features

00:22:43.400 --> 00:22:47.140
in your automated workflows.

00:22:47.140 --> 00:22:49.390
Rolling out a
release via the API

00:22:49.390 --> 00:22:51.340
now uses the same
release model you're

00:22:51.340 --> 00:22:53.770
familiar with from
the Play Console.

00:22:53.770 --> 00:22:55.730
This allows you to
name your release

00:22:55.730 --> 00:22:58.480
and more easily
modify release notes.

00:22:58.480 --> 00:23:00.830
In addition, we've
relaxed the constraints

00:23:00.830 --> 00:23:06.190
on what you can rollout via the
API to match the Play Console.

00:23:06.190 --> 00:23:08.140
The new testing
tracks Serge mentioned

00:23:08.140 --> 00:23:13.090
earlier are, of course, also
now supported by the API.

00:23:13.090 --> 00:23:15.580
This is great for configuring
your continuous integration

00:23:15.580 --> 00:23:18.430
system to push through
your internal test track

00:23:18.430 --> 00:23:20.740
whenever you have a
new build ready for QA.

00:23:23.300 --> 00:23:25.820
The new release model
also unlocks some features

00:23:25.820 --> 00:23:29.180
that were previously, only
available via the Play Console.

00:23:29.180 --> 00:23:32.570
For instance, it's now possible
to halt a release using

00:23:32.570 --> 00:23:34.400
the publishing API.

00:23:34.400 --> 00:23:37.560
This allows you to fully
automate your release process,

00:23:37.560 --> 00:23:40.025
including automatically
responding to problems.

00:23:43.180 --> 00:23:45.250
We've heard from many
of you that while you're

00:23:45.250 --> 00:23:48.400
comfortable rolling out
test builds via the API,

00:23:48.400 --> 00:23:50.380
you like the control of
coming to the console

00:23:50.380 --> 00:23:52.460
when rolling out to production.

00:23:52.460 --> 00:23:55.990
So with the updated API,
we've added the ability

00:23:55.990 --> 00:24:00.160
to create and manage draft
releases via the API.

00:24:00.160 --> 00:24:02.680
This means you can
stage a draft release

00:24:02.680 --> 00:24:04.870
from your continuous
integration system

00:24:04.870 --> 00:24:07.420
and then have your
product manager login,

00:24:07.420 --> 00:24:10.550
check everything looks good,
and hit CONFIRM and Rollout.

00:24:13.300 --> 00:24:16.240
You can find the full details
of the new API changes

00:24:16.240 --> 00:24:18.610
and the associated client
libraries on our Developer

00:24:18.610 --> 00:24:19.600
pages in GitHub.

00:24:22.150 --> 00:24:24.130
To end this session
off, I would like

00:24:24.130 --> 00:24:26.350
to welcome Radha to
the stage to tell us

00:24:26.350 --> 00:24:28.030
about how the tools
we have looked

00:24:28.030 --> 00:24:30.919
are put to use at Google.

00:24:30.919 --> 00:24:33.384
[APPLAUSE]

00:24:42.260 --> 00:24:44.030
RADHA NARAYAN: Hi, everyone.

00:24:44.030 --> 00:24:47.200
My name is Radha, and I
run product operations

00:24:47.200 --> 00:24:49.600
for Android System Health.

00:24:49.600 --> 00:24:52.060
My team is responsible
for making sure

00:24:52.060 --> 00:24:54.670
that all of Google's
Android developers

00:24:54.670 --> 00:24:57.820
can build excellent
apps quickly.

00:24:57.820 --> 00:25:00.940
I'm here to talk to you
about some of the lessons

00:25:00.940 --> 00:25:04.480
we've learned in working with
Google's many app developer

00:25:04.480 --> 00:25:08.830
teams, how we use some of the
tools you've heard about today,

00:25:08.830 --> 00:25:09.730
and why we love them.

00:25:12.370 --> 00:25:14.830
Google has many Android apps.

00:25:14.830 --> 00:25:17.110
Some of them you may
have heard about,

00:25:17.110 --> 00:25:20.920
like Gmail, Maps,
YouTube, or Search,

00:25:20.920 --> 00:25:23.300
which serve billions of users.

00:25:23.300 --> 00:25:28.120
But we actually have over
150 apps, many of which

00:25:28.120 --> 00:25:31.750
are just starting out and have
a few hundred or a few thousand

00:25:31.750 --> 00:25:32.950
users.

00:25:32.950 --> 00:25:36.490
Some of these apps have
small developer teams,

00:25:36.490 --> 00:25:40.930
up to 10 people total, while
others have hundreds or even

00:25:40.930 --> 00:25:43.990
thousands of Googlers
working on them.

00:25:43.990 --> 00:25:46.480
In this room as well,
there's probably

00:25:46.480 --> 00:25:50.110
a similar diversity in
terms of how big teams are

00:25:50.110 --> 00:25:52.420
and how many users you serve.

00:25:52.420 --> 00:25:55.150
Smaller apps are
looking for ways

00:25:55.150 --> 00:25:58.420
to scale rapidly to
a growing user base.

00:25:58.420 --> 00:26:01.060
And larger apps are
looking for ways

00:26:01.060 --> 00:26:04.120
to innovate safely and quickly.

00:26:04.120 --> 00:26:06.100
In working with
Google's teams, we

00:26:06.100 --> 00:26:09.790
found that even this
vast range of apps

00:26:09.790 --> 00:26:12.500
have a few things in common.

00:26:12.500 --> 00:26:16.000
Each of these apps is
constantly evolving.

00:26:16.000 --> 00:26:19.540
Each is looking to add
new and exciting features

00:26:19.540 --> 00:26:22.600
and adapt quickly
to user feedback.

00:26:22.600 --> 00:26:26.860
And they would all rather
avoid that bad update

00:26:26.860 --> 00:26:30.840
and all of the implications
that we heard about earlier.

00:26:30.840 --> 00:26:33.160
What I'll be walking
through today

00:26:33.160 --> 00:26:37.270
is how we've come to align
on some common tools and best

00:26:37.270 --> 00:26:44.530
practices that scale from the
smallest to the largest apps.

00:26:44.530 --> 00:26:48.420
So if we go back to our
key points on releases,

00:26:48.420 --> 00:26:50.850
we need to make sure
that we can listen

00:26:50.850 --> 00:26:54.820
to our users and the
feedback they give us.

00:26:54.820 --> 00:26:58.560
We need to make sure we can
maintain, validate, and improve

00:26:58.560 --> 00:27:01.590
the key user and
business metrics.

00:27:01.590 --> 00:27:03.660
And we need to
optimize the technology

00:27:03.660 --> 00:27:06.900
to avoid bugs and
performance issues

00:27:06.900 --> 00:27:10.290
and to support the incredible
diversity of users and devices

00:27:10.290 --> 00:27:12.390
out there.

00:27:12.390 --> 00:27:15.410
How do we map this to Google?

00:27:15.410 --> 00:27:18.050
And how do we scale?

00:27:18.050 --> 00:27:21.330
And as teams grow in
size and ambition,

00:27:21.330 --> 00:27:25.380
how do we continue to achieve
good release attributes,

00:27:25.380 --> 00:27:28.140
while still moving quickly?

00:27:28.140 --> 00:27:31.530
Well, we've developed some
rules of the road for how we

00:27:31.530 --> 00:27:35.400
can do testing and app updates.

00:27:35.400 --> 00:27:37.990
Using the tools we've
heard about today,

00:27:37.990 --> 00:27:40.860
we've developed a few
strategies to create

00:27:40.860 --> 00:27:45.450
a consistent process that
scales, even to the deployment

00:27:45.450 --> 00:27:47.470
of our largest apps.

00:27:47.470 --> 00:27:49.770
I'll be going over
some of the strategies

00:27:49.770 --> 00:27:52.410
that Google App developers
are taking advantage

00:27:52.410 --> 00:27:57.480
of to test out new features and
to release the next versions

00:27:57.480 --> 00:28:00.520
of their apps.

00:28:00.520 --> 00:28:05.220
First, let's take
a look at testing.

00:28:05.220 --> 00:28:07.950
We used to test
by always putting

00:28:07.950 --> 00:28:13.020
the raw, most bleeding edge
features into our alpha track.

00:28:13.020 --> 00:28:16.380
This ensured that the team could
stay in tune with each other

00:28:16.380 --> 00:28:20.040
and with the latest and
greatest as we made progress.

00:28:20.040 --> 00:28:23.910
Unfortunately, as the team
grew, this led to an issue

00:28:23.910 --> 00:28:28.680
that we called, you
did what to my VP demo?

00:28:28.680 --> 00:28:31.530
Teams need to be
able to move quickly,

00:28:31.530 --> 00:28:35.100
to experiment, and to
occasionally, break stuff.

00:28:35.100 --> 00:28:39.930
But product managers need
fresh, at most a day-old, stable

00:28:39.930 --> 00:28:44.430
builds, to show off the
latest features to executives

00:28:44.430 --> 00:28:46.470
and other stakeholders.

00:28:46.470 --> 00:28:49.620
We might need a stable
binary, let's say,

00:28:49.620 --> 00:28:52.775
to do an I/O demo, that has
a lot of the new features.

00:28:55.600 --> 00:28:58.060
With more testing
tracks, we're now

00:28:58.060 --> 00:29:02.140
able to give individual
teams their own builds

00:29:02.140 --> 00:29:06.460
where they can experiment
independently of each other

00:29:06.460 --> 00:29:09.430
and independently of
the release process.

00:29:09.430 --> 00:29:13.510
They can deploy daily or
even hourly, if they wish,

00:29:13.510 --> 00:29:17.020
to share the latest
features among themselves.

00:29:17.020 --> 00:29:20.950
We can also set the country
availability of the testing

00:29:20.950 --> 00:29:25.390
tracks to global to allow
Googlers in any country

00:29:25.390 --> 00:29:29.500
to test our apps, even if
the released product is not

00:29:29.500 --> 00:29:30.475
yet available globally.

00:29:34.000 --> 00:29:38.800
More tracks also allow us to
have a more thorough testing

00:29:38.800 --> 00:29:40.930
process at release time.

00:29:40.930 --> 00:29:44.380
Thanks to individual
team tracks, new features

00:29:44.380 --> 00:29:47.410
have already been
tested independently,

00:29:47.410 --> 00:29:50.510
even before we cut our release.

00:29:50.510 --> 00:29:52.960
Once we're ready to
release, we promote

00:29:52.960 --> 00:29:56.530
our build through multiple
stages of testing,

00:29:56.530 --> 00:30:00.780
starting with a team-wide
test of tens of people,

00:30:00.780 --> 00:30:04.540
to a Google-wide test
with thousands of users,

00:30:04.540 --> 00:30:09.160
and then a public, open beta
with potentially millions

00:30:09.160 --> 00:30:09.980
of test users.

00:30:15.430 --> 00:30:18.790
Our open betas
allow external users

00:30:18.790 --> 00:30:22.120
to try our latest
and greatest features

00:30:22.120 --> 00:30:24.820
if they're willing to give us
private feedback on if they

00:30:24.820 --> 00:30:26.590
find they like it
or if they find

00:30:26.590 --> 00:30:28.870
the ride is a little bumpy.

00:30:28.870 --> 00:30:33.430
At first, we imagined that we
might have a hard time getting

00:30:33.430 --> 00:30:36.130
users to sign up
for this, but users

00:30:36.130 --> 00:30:40.000
can join direct from the store
listing in the Play Store app.

00:30:40.000 --> 00:30:42.640
And some of our apps
now have millions

00:30:42.640 --> 00:30:45.780
of users in their open betas.

00:30:45.780 --> 00:30:48.910
With additional testing
tracks at our disposal,

00:30:48.910 --> 00:30:53.590
more and more Google Apps
are setting up an open beta.

00:30:53.590 --> 00:30:57.430
This quote shows how the
Google Search app is benefiting

00:30:57.430 --> 00:30:59.950
from the open beta program.

00:30:59.950 --> 00:31:03.610
It also highlights that
testing is not just

00:31:03.610 --> 00:31:07.060
about mitigating the
risk of bugs and crashes,

00:31:07.060 --> 00:31:10.450
but it's also a chance to
get feedback on features

00:31:10.450 --> 00:31:13.600
and to ensure that the new
features have the right impact

00:31:13.600 --> 00:31:15.250
on key performance indicators.

00:31:18.720 --> 00:31:20.610
You might be
wondering, what we get

00:31:20.610 --> 00:31:23.940
from all of these various
stages of testing?

00:31:23.940 --> 00:31:27.090
Why not just go
straight to open beta?

00:31:27.090 --> 00:31:31.200
Well, we might want to test out
some confidential new features

00:31:31.200 --> 00:31:34.990
before they are visible
to external users.

00:31:34.990 --> 00:31:39.350
Why do we have both a team-wide
test and a Google-wide test?

00:31:39.350 --> 00:31:41.970
At Google, we have a
tradition of dog fooding

00:31:41.970 --> 00:31:44.640
our own products,
and we'd rather not

00:31:44.640 --> 00:31:50.670
break Gmail for all
Googlers in our tests.

00:31:50.670 --> 00:31:53.400
So why do we still
need the open beta

00:31:53.400 --> 00:31:55.830
if we have so many
Googlers testing?

00:31:55.830 --> 00:32:00.270
Well, it's because even if
a Google-wide test can reach

00:32:00.270 --> 00:32:03.250
thousands of users,
by and large,

00:32:03.250 --> 00:32:06.660
these users tend to have a
somewhat narrow set of Android

00:32:06.660 --> 00:32:08.490
devices.

00:32:08.490 --> 00:32:11.880
An open beta gives
us much more scale

00:32:11.880 --> 00:32:15.120
and a device set that is
much more representative

00:32:15.120 --> 00:32:16.360
of our production users.

00:32:19.750 --> 00:32:21.290
So that's testing.

00:32:21.290 --> 00:32:24.840
We've validated our
features and our app update.

00:32:24.840 --> 00:32:27.570
Let's move on to talk
about how we actually

00:32:27.570 --> 00:32:30.050
rollout these updates
and features to users.

00:32:33.380 --> 00:32:37.760
A staged rollout is critically
important to Google teams.

00:32:37.760 --> 00:32:41.880
Rather than updating 2
billion devices in one go,

00:32:41.880 --> 00:32:46.430
we always start small and
ramp up incrementally,

00:32:46.430 --> 00:32:50.810
keeping a close eye on business,
user, and crash metrics.

00:32:50.810 --> 00:32:54.905
At the first sign of any issues,
we can always halt a release.

00:32:59.570 --> 00:33:03.050
But how do we actually
manage these releases?

00:33:03.050 --> 00:33:05.720
One method we tried for
managing an app release

00:33:05.720 --> 00:33:08.210
was to wait until all
the features scheduled

00:33:08.210 --> 00:33:11.450
for that release were
ready, then cut and rollout

00:33:11.450 --> 00:33:12.800
the release.

00:33:12.800 --> 00:33:15.950
This worked great at
first, but unfortunately,

00:33:15.950 --> 00:33:17.620
features sometimes--

00:33:17.620 --> 00:33:21.410
just sometimes-- hit
a snag causing delays

00:33:21.410 --> 00:33:25.130
to all the other features
scheduled for the release.

00:33:25.130 --> 00:33:28.040
Soon, the May release
becomes the June release.

00:33:28.040 --> 00:33:30.200
And now you're pulling
more and more features

00:33:30.200 --> 00:33:32.600
into that single release.

00:33:32.600 --> 00:33:35.810
More features means
more testing, more bugs,

00:33:35.810 --> 00:33:38.240
more release
candidates, more changes

00:33:38.240 --> 00:33:41.180
that make it hard to
track down exactly what

00:33:41.180 --> 00:33:45.470
caused any particular bug
or performance regression.

00:33:45.470 --> 00:33:49.310
And since the next release
might be a while away,

00:33:49.310 --> 00:33:51.920
developers scramble
to get their features

00:33:51.920 --> 00:33:53.930
on board the release train.

00:33:53.930 --> 00:33:55.850
And then, in the
meantime, you discover

00:33:55.850 --> 00:34:00.200
you need to ship an urgent
bug fix that just can't wait.

00:34:00.200 --> 00:34:05.150
And as you can see, as the team
scales, this tends to spiral.

00:34:05.150 --> 00:34:07.340
Waiting for all
features to be ready

00:34:07.340 --> 00:34:15.159
slows down innovation and adds a
lot of risk to the app release.

00:34:15.159 --> 00:34:19.780
We found that
counter-intuitively faster

00:34:19.780 --> 00:34:21.929
is safer.

00:34:21.929 --> 00:34:25.949
Keeping a continuous and
predictable release train

00:34:25.949 --> 00:34:32.159
makes each release smaller,
safer, and easier to manage.

00:34:32.159 --> 00:34:36.150
Those urgent bug fixes can
be sure to go out on time.

00:34:36.150 --> 00:34:39.540
And interestingly, knowing
that the next release

00:34:39.540 --> 00:34:42.690
is only a few weeks
away, developers

00:34:42.690 --> 00:34:46.290
tend to avoid cramming their
almost, but not quite finished,

00:34:46.290 --> 00:34:49.949
features into a given release.

00:34:49.949 --> 00:34:52.610
So this is a great
philosophy, but how does it

00:34:52.610 --> 00:34:54.170
work in practice?

00:34:54.170 --> 00:34:57.110
How do we keep the
trains running on time?

00:34:57.110 --> 00:35:00.195
And how do we ensure that
new features don't go live

00:35:00.195 --> 00:35:01.070
before they're ready?

00:35:04.210 --> 00:35:07.750
To get features out
safely in an app release,

00:35:07.750 --> 00:35:11.260
we use a technique called
flag-guarded feature

00:35:11.260 --> 00:35:12.910
development.

00:35:12.910 --> 00:35:17.380
Whenever possible, we try to
avoid shipping new features

00:35:17.380 --> 00:35:19.780
directly with an app update.

00:35:19.780 --> 00:35:22.450
We put each feature
behind a flag

00:35:22.450 --> 00:35:27.100
that can be toggled on
and off from the server.

00:35:27.100 --> 00:35:31.540
First, we used the stage rollout
to release the app update

00:35:31.540 --> 00:35:34.120
with all the flags turned off.

00:35:34.120 --> 00:35:37.990
By first deploying such
a changed neutral binary,

00:35:37.990 --> 00:35:42.310
it's easier and safer to
get this update to all 100%

00:35:42.310 --> 00:35:44.300
of our users.

00:35:44.300 --> 00:35:48.700
This also allows us to evaluate
the application binary itself,

00:35:48.700 --> 00:35:52.000
for things like stability
and system health,

00:35:52.000 --> 00:35:55.870
as it installs on the
user's device separately

00:35:55.870 --> 00:35:59.700
from the feature and how
the feature is doing.

00:35:59.700 --> 00:36:03.840
Once this change-neutral app
update is safely deployed,

00:36:03.840 --> 00:36:06.840
we can then slowly
enable each feature

00:36:06.840 --> 00:36:09.060
by turning on the flags.

00:36:09.060 --> 00:36:12.420
Again, carefully
keeping an eye on all

00:36:12.420 --> 00:36:15.210
of those important user,
business, and crash

00:36:15.210 --> 00:36:18.090
metrics to detect any issues.

00:36:18.090 --> 00:36:20.610
If we find an issue, we
always have the option

00:36:20.610 --> 00:36:24.670
to disable the feature
by turning off the flag.

00:36:24.670 --> 00:36:28.870
Importantly, keeping these
features behind flags

00:36:28.870 --> 00:36:32.260
and first deploying a
change-neutral binary

00:36:32.260 --> 00:36:34.990
means that any issue
with one feature

00:36:34.990 --> 00:36:38.710
won't adversely affect all
the other features in the app

00:36:38.710 --> 00:36:40.710
update.

00:36:40.710 --> 00:36:43.210
I like to think of this
as satellite deployment,

00:36:43.210 --> 00:36:46.000
not that I've ever actually
deployed a satellite,

00:36:46.000 --> 00:36:50.290
but step one is to get
the thing into orbit.

00:36:50.290 --> 00:36:52.120
Once it's safely
in orbit, then you

00:36:52.120 --> 00:36:55.210
can unpack each
instrument, one-by-one.

00:36:55.210 --> 00:36:59.602
You can achieve this in your
own app using Firebase Remote

00:36:59.602 --> 00:37:00.101
Config.

00:37:02.810 --> 00:37:07.490
The Google Search app is
one of many Google teams

00:37:07.490 --> 00:37:09.530
that have scaled
their release process

00:37:09.530 --> 00:37:13.440
and their feature launches
using flag-guarded development.

00:37:18.240 --> 00:37:21.330
So you might be wondering
how long releases

00:37:21.330 --> 00:37:24.630
take if we're going through
each of these stages of testing

00:37:24.630 --> 00:37:26.250
and ramp up.

00:37:26.250 --> 00:37:29.280
Because the release
train stays predictable,

00:37:29.280 --> 00:37:33.690
we're usually able to deliver
most app updates to users

00:37:33.690 --> 00:37:38.400
within a couple of weeks, while
having the ability to speed up

00:37:38.400 --> 00:37:41.820
a release if
absolutely necessary.

00:37:41.820 --> 00:37:43.230
For the larger apps--

00:37:43.230 --> 00:37:45.900
the ones that have more
than a billion users--

00:37:45.900 --> 00:37:48.930
we're able to
collect enough data

00:37:48.930 --> 00:37:51.600
to have confidence
in our releases

00:37:51.600 --> 00:37:54.140
within a couple of days.

00:37:54.140 --> 00:37:56.840
These release best
practices help

00:37:56.840 --> 00:38:02.120
us keep each of our 150-plus
apps at Google high quality

00:38:02.120 --> 00:38:06.320
without ever putting the brakes
on how fast we can innovate

00:38:06.320 --> 00:38:09.230
and bring fresh and exciting
features to our billions

00:38:09.230 --> 00:38:10.430
of users worldwide.

00:38:13.390 --> 00:38:17.459
So that was a tour through
the Google release process.

00:38:17.459 --> 00:38:19.250
I hope you found this
useful and that there

00:38:19.250 --> 00:38:21.730
are some ideas that you can
put to use in your own release

00:38:21.730 --> 00:38:22.990
process.

00:38:22.990 --> 00:38:24.790
And I'd like to
welcome Mike back

00:38:24.790 --> 00:38:28.746
on stage to close things off.

00:38:28.746 --> 00:38:31.141
[APPLAUSE]

00:38:34.500 --> 00:38:35.940
MIKE DAVIS: Thanks, Radha.

00:38:35.940 --> 00:38:40.842
So to recap, we've seen why
releasing is an exciting time,

00:38:40.842 --> 00:38:42.300
and how we like to
think about what

00:38:42.300 --> 00:38:44.270
constitutes a great release--

00:38:44.270 --> 00:38:47.850
a release that delights users,
improves business metrics,

00:38:47.850 --> 00:38:51.952
and is stable and perfomant.

00:38:51.952 --> 00:38:54.160
After this, we took a look
through the suite of tools

00:38:54.160 --> 00:38:55.630
that the Google
Play Console makes

00:38:55.630 --> 00:38:58.960
available to help you achieve
efficient, well understood,

00:38:58.960 --> 00:39:01.049
risk-free app releases.

00:39:01.049 --> 00:39:02.590
We looked to the
new internal testing

00:39:02.590 --> 00:39:04.720
track for fast,
iterative testing

00:39:04.720 --> 00:39:06.660
with your team and testers.

00:39:06.660 --> 00:39:09.250
We looked at closed testing,
where you-- the developer--

00:39:09.250 --> 00:39:11.980
get to control exactly
who can test your app.

00:39:11.980 --> 00:39:14.410
We've seen how Google Play
is going beyond alpha beta

00:39:14.410 --> 00:39:16.750
with additional
closed testing tracks.

00:39:16.750 --> 00:39:18.880
And, of course,
open testing, where

00:39:18.880 --> 00:39:21.550
any user can opt in to test your
app direct from the Google Play

00:39:21.550 --> 00:39:22.450
Store.

00:39:22.450 --> 00:39:26.120
We've seen how this can bring
huge scale to your testing.

00:39:26.120 --> 00:39:28.180
We also looked at rolling
out your releases,

00:39:28.180 --> 00:39:30.880
with improvements to the
releases UI, improvements

00:39:30.880 --> 00:39:34.120
to stage rollout, and the
new improved publishing API,

00:39:34.120 --> 00:39:36.400
for more automation
of your release,

00:39:36.400 --> 00:39:39.850
using gradle and continuous
integration tools.

00:39:39.850 --> 00:39:42.670
And we took a whirlwind tour
through Google's approach

00:39:42.670 --> 00:39:44.890
to creating a consistent
release process that

00:39:44.890 --> 00:39:49.650
scales from the smallest
to the largest teams.

00:39:49.650 --> 00:39:51.750
We hope you find
this talk useful.

00:39:51.750 --> 00:39:53.310
Please, do give
these tools a go,

00:39:53.310 --> 00:39:55.192
and let us know what you think.

00:39:55.192 --> 00:39:57.150
We look forward to hearing
your feedback as you

00:39:57.150 --> 00:39:59.430
use these tools more and more.

00:39:59.430 --> 00:40:01.620
If you'd like to
share your experiences

00:40:01.620 --> 00:40:04.200
or you have thoughts
or ideas on how

00:40:04.200 --> 00:40:06.180
we can make these
tools even better,

00:40:06.180 --> 00:40:08.910
please, do come and see us in
the Android and Play Sandbox

00:40:08.910 --> 00:40:10.940
in Dome C. Thank you.

00:40:10.940 --> 00:40:14.500
[MUSIC PLAYING]

