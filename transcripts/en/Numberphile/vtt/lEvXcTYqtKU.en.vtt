WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.880
If you want to check a normal number if it's prime, a small one, you just see if any numbers divide into it.

00:00:04.880 --> 00:00:09.440
You can get slightly smarter. You've only got to check if primes divide into it,

00:00:09.440 --> 00:00:15.280
and you've only got to check if primes up to the size of the square root of the number you're checking or not.

00:00:15.280 --> 00:00:17.560
And so you got a few shortcuts you can make.

00:00:17.560 --> 00:00:21.940
This number, however, when you're finding ... look at the size of this thing, right!

00:00:21.940 --> 00:00:29.440
There's no way you could just go through and check every conceivable prime factor of this number

00:00:29.460 --> 00:00:33.620
to see if it itself is prime. In fact, there's a much more clever way of doing it.

00:00:33.620 --> 00:00:38.040
We'll, I have successfully divided it up by three, so I don't know if that technically doesn't count.

00:00:38.040 --> 00:00:40.720
I mean, I've taken a prime, and I've split it up into three parts.

00:00:40.720 --> 00:00:42.800
Albeit, not three equal parts.

00:00:43.100 --> 00:00:46.720
If anyone is curious, it's 1,490 pages, but I've double-sided them.

00:00:46.720 --> 00:00:48.720
so it's about 250 pages a volume.

00:00:48.720 --> 00:00:52.740
Okay, so you want to find primes. Previously I showed you the Lucas numbers.

00:00:52.740 --> 00:01:03.840
Which I prefer to Fibonacci numbers. These are the vastly superior "Luca" or "Lucas" numbers. They start with 1 and 3 instead of 1, 1 Fibonacci

00:01:03.840 --> 00:01:10.100
and they carry on like this. You get 4, you get 7, you get 11, I need to make sure I get this correct.

00:01:10.100 --> 00:01:16.980
otherwise it'll be very very embarrassing. What's that going to be? Fift... 47.

00:01:16.980 --> 00:01:20.460
So there's the first one, two, three, four, five, six, seven, eight, nine, ten.

00:01:20.460 --> 00:01:28.260
So Brady, can you give me any number, one to ten inclusive. What would you like, one to nine, - or ten? What do you want?

00:01:28.260 --> 00:01:28.920
Five

00:01:28.920 --> 00:01:37.700
Five! All right, we're going to see if five is prime. Now a lot of people at home, because people who watch Numberphile tend to be into mathematics know that five is prime - spoiler.

00:01:37.700 --> 00:01:41.620
Let's say we don't know. Say "I don't know if five's prime or not? Let's double check."

00:01:41.620 --> 00:01:49.360
I'm going to count along to the fifth Lucas number. One, two, three, four, five. I'm going to subtract one off that number.

00:01:49.360 --> 00:01:52.460
And if I subtract one I get ten.

00:01:52.460 --> 00:01:54.460
And then I check: is ten a multiple of 5?

00:01:54.460 --> 00:01:56.460
And it is.

00:01:56.460 --> 00:02:01.200
And because ten is two times five, ten is a multiple of five, I know five is a prime number.

00:02:01.860 --> 00:02:02.560
WHAT?!

00:02:02.560 --> 00:02:03.700
Probably.

00:02:04.620 --> 00:02:09.540
So, give me another number that's not prime... just you know six.
-six
-SIX!

00:02:09.680 --> 00:02:12.640
I wonder if six is prime. Let's check six.

00:02:12.640 --> 00:02:14.640
One, two, three, four, five, six. Take one off.

00:02:15.160 --> 00:02:22.240
Seventeen. Seventeen is not a multiple of six. Six is definitely not prime.

00:02:22.240 --> 00:02:26.940
And so this Lucas test will rule out a number that's not prime.

00:02:26.940 --> 00:02:30.120
So you can comprehensively prove that a number is not prime

00:02:30.120 --> 00:02:34.820
by using this test, even though you don't know what any of the factors are.

00:02:35.120 --> 00:02:39.460
If it does pass then we call it a Lucas pseudoprime.

00:02:39.460 --> 00:02:43.580
It's very likely it's going to be prime. It's not guaranteed at this point.

00:02:43.620 --> 00:02:46.720
This is a very easy test. It's a good first filter

00:02:46.720 --> 00:02:50.340
to check if a number is prime or not, and you don't even have to look at its factors.

00:02:50.340 --> 00:02:56.200
So for a number this big, first of all we need something a little bit more clever and secondly we want to be sure.

00:02:56.200 --> 00:03:02.500
Right so we want a similar test which guarantees that it's prime if we find it. And that's what I'm going to do now.

00:03:02.500 --> 00:03:15.180
All right, for the big fellows we're going to need a different sequence and again it's our friend Lucas. What a guy. What a mathematician. And a guy called Lehmer who we never met because he lived much later after him and he was a French and American

00:03:15.180 --> 00:03:22.620
but together they came up with this method which uses the following sequence. You start with four this time

00:03:22.920 --> 00:03:26.940
and after that you square the previous number and subtract two.

00:03:26.940 --> 00:03:30.600
So four squared is sixteen. Sixteen subtract two is fourteen.

00:03:30.740 --> 00:03:37.060
And then we do the same thing. We square fourteen, and we subtract two and you get 194.

00:03:37.060 --> 00:03:42.800
You then square 194, subtract two, you get 37,634.

00:03:42.800 --> 00:03:48.780
They get big very quickly. So the next one's a bit of a monster. So you got from 37 thousand something something something

00:03:48.780 --> 00:03:58.940
up here to one billion, four hundred and sixteen million, three hundred and seventeen thousand, nine hundred and fifty four.

00:03:58.940 --> 00:04:04.180
And then now, you can feel what's going to happen, we're about to square this guy. We're getting roughly twice as long each time.

00:04:04.180 --> 00:04:13.120
The next number, hold on, is two billion .... it escalates very quickly and you get some massive numbers in there.

00:04:13.120 --> 00:04:18.740
and actually it becomes incredible very unwieldy very quickly to do anything with it.

00:04:18.740 --> 00:04:20.800
We'll fix that problem in a moment.

00:04:20.800 --> 00:04:23.860
Let's start by proving the number is prime.

00:04:23.860 --> 00:04:28.060
We're going to use a small Mersenne prime on this sequence to start with. I'm going to use seven

00:04:28.080 --> 00:04:31.580
because it is one less than two cubed.

00:04:31.580 --> 00:04:41.000
So the way you check a Mersenne prime against this list, is you take the power, which for seven is 3. You subtract one off that

00:04:41.000 --> 00:04:45.040
which is two. And you find what's in the second position in the list.

00:04:45.040 --> 00:04:46.820
So the second number is fourteen.

00:04:46.820 --> 00:04:51.360
And you see if that is a multiple of the number you're checking, seven. And it is!

00:04:51.360 --> 00:04:52.180
Look at that.

00:04:52.240 --> 00:04:57.460
So fourteen is a multiple of seven, so seven is definitely prime.

00:04:58.320 --> 00:04:59.200
???

00:04:59.320 --> 00:05:07.640
Let's recap on that very quickly. If you've got two, to some p prime power there minus one

00:05:07.640 --> 00:05:10.020
and that equals some mystery number.

00:05:10.020 --> 00:05:18.020
If the p minus oneth position in this sequence is a multiple of that number, that number is definitely prime.

00:05:18.020 --> 00:05:25.720
And there's no ifs or buts or maybes. We know it is absolutely prime. And if it's not a multiple of that number, it's definitely not prime.

00:05:25.720 --> 00:05:31.680
And so this is a primality test. You can check if a number's prime or not. And you never have to look at its factors.

00:05:31.680 --> 00:05:33.680
This is what Lucas used.

00:05:34.440 --> 00:05:43.740
He managed to prove that two to the one hundred twenty seven minus one is definitely definitely prime

00:05:43.740 --> 00:05:49.240
by finding the one hundred and twenty sixth term in this sequence.

00:05:49.240 --> 00:05:52.340
and proving it was a multiple of that number that came out the other side.

00:05:52.620 --> 00:05:54.620
He also amazingly

00:05:54.620 --> 00:05:59.780
managed to prove that two to the sixty seven minus one is not prime.

00:05:59.880 --> 00:06:04.360
But he never found a single factor for that number.

00:06:04.360 --> 00:06:09.080
He was able to prove this is not prime without finding a number that divides into it.

00:06:09.080 --> 00:06:14.960
I think that amazing. It was much later on, decades later, someone actually found what the factors were.

00:06:14.960 --> 00:06:17.360
We knew they were there. We just didn't know what they were.

00:06:17.360 --> 00:06:18.520
But we knew it wasn't prime.

00:06:18.660 --> 00:06:22.500
That prime is actually the biggest prime that was found by hand.

00:06:22.500 --> 00:06:25.660
All primes after that have been done by computer.

00:06:25.660 --> 00:06:28.680
So to check this number here, what we'd have to do

00:06:28.680 --> 00:06:36.920
is continue the sequence, find the seventy four million, two hundred and seven thousandth, two hundred and eightieth position,

00:06:36.920 --> 00:06:40.560
and check if it was a multiple of this monstrosity.

00:06:41.020 --> 00:06:43.800
Now that actually is going to take a ridiculous amount of computing power.

00:06:43.800 --> 00:06:45.400
You can see how big these numbers get.

00:06:45.400 --> 00:06:47.400
They're going to get ludicrously large.

00:06:47.400 --> 00:06:50.540
So actually that is not a good way to go about it.

00:06:50.540 --> 00:06:51.780
Let's make our life easy.

00:06:51.780 --> 00:06:54.480
Because when you're search through for this guy here

00:06:54.480 --> 00:07:01.480
all you care is whether or not the seventy four million, two hundred and seven thousand, two hundred and eightieth position is a multiple of it or not

00:07:01.480 --> 00:07:06.960
all you really want to know are the remainders once you've divided by this number.

00:07:06.960 --> 00:07:08.460
And so as you go along

00:07:08.460 --> 00:07:10.060
you don't have to keep track of

00:07:10.060 --> 00:07:12.040
the entire Lucas Lehmer sequence

00:07:12.040 --> 00:07:14.960
you just need to keep track of the remainder

00:07:14.960 --> 00:07:17.540
mod this number as you go along.

00:07:17.540 --> 00:07:19.860
So you can keep simplifying it down

00:07:19.860 --> 00:07:21.000
each step of the way.

00:07:21.000 --> 00:07:23.620
And we can do a quick example, if you want, to show how that works.

00:07:23.620 --> 00:07:28.460
One of my most absolute favourite Mersenne primes is eight thousand one hundred and ninety one

00:07:28.460 --> 00:07:32.720
which is two to the thirteen subtract one

00:07:32.720 --> 00:07:38.260
And so to check this number we'll have to find the twelfth term in the Lucas Lehmer sequence.

00:07:38.260 --> 00:07:41.480
But we only have to find it mod 8191.

00:07:41.480 --> 00:07:48.660
So to start with it's the same. You'd have four, you'll have to square that you'll get fourteen, you'll square that you get 194

00:07:48.660 --> 00:07:49.680
let's get these right.

00:07:49.680 --> 00:07:55.060
Then the next number should be 37,634

00:07:55.060 --> 00:07:57.360
but that's bigger than the number we care about

00:07:57.360 --> 00:08:00.700
And so actually we need the remainder of that number

00:08:00.760 --> 00:08:02.420
once we've divided through this number.

00:08:02.420 --> 00:08:06.860
In that case it's only four thousand, eight hundred and seventy.

00:08:06.940 --> 00:08:08.240
That's easier.

00:08:08.240 --> 00:08:12.860
And then we square that, subtract two, get the remainder once we remove multiples

00:08:12.860 --> 00:08:13.820
of the number we care about

00:08:13.820 --> 00:08:17.760
and you end up with three thousand nine hundred and fifty three followed by

00:08:17.800 --> 00:08:20.240
five thousand nine hundred and seventy.

00:08:20.240 --> 00:08:25.180
And you can see this time, these are staying much more manageable in size.

00:08:25.180 --> 00:08:30.800
Okay then, one hundred and twenty eight. And the twelfth term is zero.

00:08:30.800 --> 00:08:36.960
If you square that, subtract two you get a multiple of eight thousand one hundred and ninety one.

00:08:36.960 --> 00:08:42.740
and because that zero with no remainder, we know whatever that massive ridiculous number should have been in the sequence

00:08:42.740 --> 00:08:45.040
it's definitely a multiple of eight thousand one hundred and ninety one.

00:08:45.100 --> 00:08:47.100
Therefore that is definitely prime.

00:08:47.340 --> 00:08:49.720
And we didn't have to check a single factor of that number.

00:08:49.920 --> 00:08:52.140
Okay, so this is what the computer at the university of Missouri did.

00:08:52.140 --> 00:08:54.860
Although obviously it does a slightly more efficient version of this

00:08:54.980 --> 00:08:58.600
and there's nice things you can do with the way it handles the binary versions of these numbers

00:08:58.600 --> 00:09:00.740
Anyway, it's a fancy version of

00:09:00.740 --> 00:09:03.020
going along this sequence

00:09:03.080 --> 00:09:04.520
finding the result

00:09:04.520 --> 00:09:06.560
modulo this ridiculous number

00:09:06.560 --> 00:09:11.220
But you can do that just by subtracting it off until you get a number smaller than it

00:09:11.220 --> 00:09:12.320
so that's not so bad

00:09:12.320 --> 00:09:14.700
Once it got to that position

00:09:14.700 --> 00:09:16.280
it looked at the answer

00:09:16.280 --> 00:09:17.720
there was no remainder

00:09:17.720 --> 00:09:19.220
and normally there's a remainder

00:09:19.220 --> 00:09:21.480
the vast majority of the time you'd check a number of this size

00:09:21.480 --> 00:09:24.380
spend a month on it. The computer would get to the end

00:09:24.380 --> 00:09:26.280
and go, "Aww, there's a remainder."

00:09:26.280 --> 00:09:27.680
Well, it's a computer. It's got no emotions.

00:09:27.680 --> 00:09:30.080
It would just send back the remainder to the central server.

00:09:30.080 --> 00:09:31.900
On this occasion it was zero.

00:09:31.900 --> 00:09:33.740
The computer had no idea what it had done.

00:09:33.740 --> 00:09:35.620
It sent that off back to the central server

00:09:35.620 --> 00:09:36.560
and that was it.

00:09:36.560 --> 00:09:39.640
We had found the biggest prime number known to humankind.

00:09:39.640 --> 00:09:40.780
So the problem is

00:09:40.780 --> 00:09:42.780
this method only works for Mersenne primes.

00:09:42.780 --> 00:09:44.780
But the problem is that every single time you do it

00:09:44.780 --> 00:09:46.780
it's a month of processing work

00:09:46.780 --> 00:09:48.780
all right. So you think, how many -

00:09:48.780 --> 00:09:50.780
I mean this is millions and millions of months

00:09:50.780 --> 00:09:52.780
but obviously we only have to check

00:09:52.780 --> 00:09:56.580
the way Mersenne primes work and there are some fantastic Numberphile videos on Mersenne primes

00:09:56.580 --> 00:10:00.640
You only got to worry about prime values up here.

00:10:01.120 --> 00:10:03.120
If this hadn't been prime

00:10:03.120 --> 00:10:05.120
if that had not worked

00:10:05.120 --> 00:10:07.800
the next one we checked would have been the next prime up after this.

00:10:07.800 --> 00:10:09.880
So we're gradually ticking up through those primes.

00:10:09.880 --> 00:10:13.080
You're right, in the bigger scheme of things there aren't that many.

00:10:13.080 --> 00:10:15.340
But it's still it's a month every time you want to check one, so.

00:10:15.340 --> 00:10:17.560
I mean definitely, everyone download GIMPS,

00:10:17.560 --> 00:10:20.220
the computer program, and run it

00:10:20.220 --> 00:10:22.840
and maybe you'll be the person who finds the next one of these.

00:10:22.840 --> 00:10:26.220
Matt if they put some of the world's more high-powered computers

00:10:26.220 --> 00:10:27.220
onto the case here

00:10:27.220 --> 00:10:28.180
for like a few months,

00:10:28.260 --> 00:10:29.720
would they burn through this.

00:10:29.720 --> 00:10:33.680
Like is it silly that we're just using little small computers in universities?

00:10:33.680 --> 00:10:35.080
Yeah, it's a very good point.

00:10:35.080 --> 00:10:36.480
If we had very big high powered computer

00:10:36.480 --> 00:10:39.080
like if Google went "yeah, you know what guys? Borrow the server."

00:10:39.080 --> 00:10:43.220
You know what, I reckon if Google wanted to they could just go and find the next one.

00:10:43.220 --> 00:10:47.680
If they just say, "everyone just stop searching for a day, we've got something to do with our computers."

00:10:47.680 --> 00:10:50.560
But then again, I mean, what are they going to achieve, they're going to find a bigger one

00:10:50.560 --> 00:10:53.320
and then everyone's like, "Oh okay." and start searching for the next one.

00:10:53.320 --> 00:10:56.140
I mean the point of this is kind of the hunt.

00:10:56.140 --> 00:10:59.500
And the fact that thousands of people run the program

00:10:59.500 --> 00:11:02.300
and any one of those people could find the next one

00:11:02.300 --> 00:11:04.700
that, for me, is the beauty of the project.

00:11:04.700 --> 00:11:08.260
It could be anyone sitting at home running their computer

00:11:08.260 --> 00:11:11.180
could make a substantial find like this, they could contribute

00:11:11.180 --> 00:11:11.900
something to mathematics

00:11:11.900 --> 00:11:15.900
And for all of eternity you would be the human that found prime number

00:11:15.900 --> 00:11:19.080
What would it mean to you if your computer found the next big one?

00:11:19.080 --> 00:11:22.520
OMG! I would be so excited if I found the next- I would -

00:11:22.520 --> 00:11:24.520
I would absolutely love to find it.

00:11:24.520 --> 00:11:29.100
Very small confession; I don't run GIMPS on my computer.

00:11:29.100 --> 00:11:34.260
I run a competing prime number searching outfit called PrimeGrid.

00:11:34.260 --> 00:11:38.500
And PrimeGrid searches for other types of primes.

00:11:38.500 --> 00:11:41.240
They look for like Germain primes and other ones.

00:11:41.240 --> 00:11:46.520
And so currently GIMPS has the top fifteen biggest primes, they've found them all.

00:11:46.520 --> 00:11:51.080
PrimeGrid, is a lot less likely you'll find a prime, which is a bit sad for me.

00:11:51.080 --> 00:11:55.660
But if you do find, in a few categories, they're going to come in at something crazy big.

00:11:55.660 --> 00:11:58.580
And so I like- I play for the underdog.

00:11:58.580 --> 00:12:02.880
So I support PrimeGrid because I like the fact that they are doing different types.

00:12:02.880 --> 00:12:05.420
I mean these GIMPS guys are just in it for glory.

00:12:05.420 --> 00:12:09.440
They're just going for easy - low hanging, easy big ones.

00:12:09.440 --> 00:12:12.120
They're just picking them off one after another and getting all the recognition.

00:12:12.120 --> 00:12:17.840
But you know, I like the fact that, as we speak, at home my computer is doing maths so I don't have to.

00:12:18.200 --> 00:12:21.060
So the question everyone has is "what does it begin and end with?"

00:12:21.060 --> 00:12:23.060
Ending, I don't have. Everyone loves the last number.

00:12:23.060 --> 00:12:31.400
But the trouble with the last number is you know it's not going to be an even number, you know it's not going to be a five, you know it's not going to be a zero. Turns out it's a one. There it is.

