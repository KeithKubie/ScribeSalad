WEBVTT
Kind: captions
Language: en

00:00:00.450 --> 00:00:02.340
ANTONIO FUENTES: Hi, my name is
Antonio Fuentes, and I'm a

00:00:02.340 --> 00:00:04.760
product manager at Google.

00:00:04.760 --> 00:00:07.530
Part of my job is to make sure
that developers have a great

00:00:07.530 --> 00:00:09.500
experience building
applications

00:00:09.500 --> 00:00:11.990
that use Google APIs.

00:00:11.990 --> 00:00:17.160
Last week, I posted a YouTube
video on the best practices

00:00:17.160 --> 00:00:20.450
for using Google APIs and
getting started quickly.

00:00:20.450 --> 00:00:23.400
Some of you had questions on
the content of the video.

00:00:23.400 --> 00:00:25.350
And I'm here to address some
of those questions.

00:00:29.920 --> 00:00:33.050
There's a question on what
happens if credentials you

00:00:33.050 --> 00:00:35.510
obtain in the dev console
are leaked.

00:00:35.510 --> 00:00:40.880
It says, "What do I do next?"
Credentials leaking is a risk

00:00:40.880 --> 00:00:43.760
that any developer can face.

00:00:43.760 --> 00:00:46.760
Luckily, the Google APIs Console
makes it easy to deal

00:00:46.760 --> 00:00:48.480
with this risk.

00:00:48.480 --> 00:00:53.540
If your credentials ever leak,
or you suspect they leak, or

00:00:53.540 --> 00:00:56.040
they have leaked, it's
easy to rotate

00:00:56.040 --> 00:00:57.750
them in the dev console.

00:00:57.750 --> 00:01:01.680
You can create additional keys
in the dev console and roll

00:01:01.680 --> 00:01:05.420
them out to your client
application, and then turn the

00:01:05.420 --> 00:01:09.460
leak key off whenever you want
without creating a new project

00:01:09.460 --> 00:01:10.710
in the dev console.

00:01:13.370 --> 00:01:18.780
The next question says, "How
long do OAuth tokens last?

00:01:18.780 --> 00:01:22.350
When do they expire?" This
is a good question.

00:01:22.350 --> 00:01:26.550
In the video, we went through
the OAuth flow, and how to

00:01:26.550 --> 00:01:31.470
obtain access tokens, and how
to obtain refresh tokens.

00:01:31.470 --> 00:01:35.690
An access token generally
lasts for an hour.

00:01:35.690 --> 00:01:39.900
You can use a refresh token to
request an access token or an

00:01:39.900 --> 00:01:43.370
additional access token
at any time.

00:01:43.370 --> 00:01:45.400
So keep that in mind.

00:01:45.400 --> 00:01:47.970
The good news is that if you
use the Google Client

00:01:47.970 --> 00:01:51.830
Libraries, which we also
introduced in the video,

00:01:51.830 --> 00:01:54.570
they'll take care of all
of that logic for you.

00:01:54.570 --> 00:02:00.180
So they'll exchange refresh
tokens for access tokens when

00:02:00.180 --> 00:02:02.600
your access tokens are
ready to expire.

00:02:02.600 --> 00:02:05.280
So if you use the client
libraries, you don't even have

00:02:05.280 --> 00:02:06.920
to worry about this.

00:02:06.920 --> 00:02:09.520
If you're coding on your own
without using the client

00:02:09.520 --> 00:02:13.370
libraries, you would have
to refresh your

00:02:13.370 --> 00:02:14.620
access every hour.

00:02:17.520 --> 00:02:21.850
The next question states, "How
do I know which APIs are

00:02:21.850 --> 00:02:26.450
supported by the Discovery
Service?" The best way to do

00:02:26.450 --> 00:02:30.120
this is to actually make an
API call to the Discovery

00:02:30.120 --> 00:02:34.100
Service or to use the
APIs Explorer.

00:02:34.100 --> 00:02:37.540
The APIs Explorer is a tool
that we also introduced in

00:02:37.540 --> 00:02:39.800
last week's video.

00:02:39.800 --> 00:02:43.480
It will show you all the APIs
that are currently exposed

00:02:43.480 --> 00:02:46.120
through the Discovery Service.

00:02:46.120 --> 00:02:50.980
You'll notice that some of the
APIs in there have different

00:02:50.980 --> 00:02:54.300
methods and have different
resources exposed by the API.

00:02:54.300 --> 00:02:55.960
All of that information is

00:02:55.960 --> 00:02:57.540
available in the APIs Explorer.

00:03:00.970 --> 00:03:05.380
The next question states, "The
only way to hide a link from a

00:03:05.380 --> 00:03:10.210
user's goo.gl dashboard is to
click on checkbox and press

00:03:10.210 --> 00:03:14.210
'Hide.' Unfortunately, we can't
hide links with the help

00:03:14.210 --> 00:03:16.170
of the API.

00:03:16.170 --> 00:03:21.670
Could you add some method like
url.hide to the API?" We get

00:03:21.670 --> 00:03:24.630
questions like this every
once in a while.

00:03:24.630 --> 00:03:28.250
This is a feature request to
the URL Shortener API.

00:03:28.250 --> 00:03:31.140
And in my view, it's a
good feature request.

00:03:31.140 --> 00:03:34.890
So my recommendation is to go
to the URL Shortener API

00:03:34.890 --> 00:03:38.935
documentation, which I can show
you now on the screen.

00:03:42.750 --> 00:03:46.320
You can join the discussion
group for the URL Shortener

00:03:46.320 --> 00:03:48.830
API and submit a feature
request for that.

00:03:51.540 --> 00:03:52.790
Now back to the questions.

00:03:57.200 --> 00:04:00.090
The next question states, "Why
do we need different types of

00:04:00.090 --> 00:04:05.000
client IDs such as server, web,
and Android?" This is

00:04:05.000 --> 00:04:07.210
actually a really
good question.

00:04:07.210 --> 00:04:11.010
You noticed on last week's
video that when we obtain

00:04:11.010 --> 00:04:15.970
credentials in the Google APIs
Console, the APIs console will

00:04:15.970 --> 00:04:18.690
ask us which type
of key we need.

00:04:18.690 --> 00:04:21.720
And some of the types available
are for server

00:04:21.720 --> 00:04:25.330
applications, for web
applications, or for installed

00:04:25.330 --> 00:04:28.780
applications such as
Android and iOS.

00:04:28.780 --> 00:04:32.180
Behind the scenes, the OAuth
flow works a little bit

00:04:32.180 --> 00:04:34.590
different depending on
the device that your

00:04:34.590 --> 00:04:36.150
application runs on.

00:04:36.150 --> 00:04:40.570
And this is why the dev console
will ask you in

00:04:40.570 --> 00:04:42.420
advance what type
of application

00:04:42.420 --> 00:04:43.800
you're dealing with.

00:04:43.800 --> 00:04:46.820
This will ensure that your
applications are checked in

00:04:46.820 --> 00:04:48.720
the most appropriate way.

00:04:48.720 --> 00:04:52.110
So do specify, when you're
asking for credentials in the

00:04:52.110 --> 00:04:54.680
dev console, which type
of application

00:04:54.680 --> 00:04:55.930
you're working with.

00:05:00.740 --> 00:05:04.760
The next question states, "What
happens if I send both

00:05:04.760 --> 00:05:09.970
an API key and a client ID
when I make an API call?"

00:05:09.970 --> 00:05:13.770
You'll recall from the video
that you can obtain two types

00:05:13.770 --> 00:05:16.420
of credentials in
the dev console.

00:05:16.420 --> 00:05:20.040
One is API keys and the other
one is client IDs.

00:05:20.040 --> 00:05:22.470
And they are a little
bit different.

00:05:22.470 --> 00:05:26.960
API keys allow you to make API
calls that don't fetch

00:05:26.960 --> 00:05:28.380
end-user data.

00:05:28.380 --> 00:05:31.690
For example, a call to
the Translate API.

00:05:31.690 --> 00:05:34.630
There's no user data involved
in that transaction, so you

00:05:34.630 --> 00:05:37.240
can use an API key.

00:05:37.240 --> 00:05:41.220
For other types of calls that
do involve fetching end-user

00:05:41.220 --> 00:05:45.400
data, such as a call to the
Google+ API, for example, to

00:05:45.400 --> 00:05:51.080
fetch an end user's posts, you
will require a client ID.

00:05:51.080 --> 00:05:57.830
It is possible to make an API
key and passing both a client

00:05:57.830 --> 00:06:02.710
ID and an API key in the same
call, as the person asking

00:06:02.710 --> 00:06:06.390
this question has pointed out.

00:06:06.390 --> 00:06:12.390
There's very few situations in
which you want to do this.

00:06:12.390 --> 00:06:17.180
And I'll show you some of those
on the screen right now.

00:06:17.180 --> 00:06:23.100
When you go to the Google APIs
Console and you want to

00:06:23.100 --> 00:06:34.160
request keys, you'll notice that
the simple API keys are

00:06:34.160 --> 00:06:37.910
available for server
or browser.

00:06:37.910 --> 00:06:43.110
When you create a simple API
key, you can actually block

00:06:43.110 --> 00:06:47.630
the IP addresses that are
allowed when making API calls

00:06:47.630 --> 00:06:49.580
from your application.

00:06:49.580 --> 00:06:53.080
So you can say, only requests
should be accepted from the

00:06:53.080 --> 00:06:55.770
following IP addresses.

00:06:55.770 --> 00:06:58.350
That is if you're dealing
with a server key.

00:06:58.350 --> 00:07:01.480
If you're dealing with a browser
key, you can actually

00:07:01.480 --> 00:07:03.240
block HTTP referers.

00:07:06.020 --> 00:07:09.790
So API keys always allow
you to block IP

00:07:09.790 --> 00:07:12.960
addresses or HTTP referers.

00:07:12.960 --> 00:07:17.010
If you're using calls that fetch
end-user data, you need

00:07:17.010 --> 00:07:19.730
a client ID, which we learned
how to obtain

00:07:19.730 --> 00:07:22.700
in last week's webinar.

00:07:22.700 --> 00:07:27.030
A client ID doesn't allow you,
by itself, to do that IP

00:07:27.030 --> 00:07:30.690
blocking or those HTTP
referer blocking.

00:07:30.690 --> 00:07:34.060
And you can do that by
adding an API key.

00:07:34.060 --> 00:07:38.280
So when you send both an API
key and a client ID in the

00:07:38.280 --> 00:07:41.850
same call, you get the benefits
of using OAuth 2.0

00:07:41.850 --> 00:07:46.250
from the client ID plus the
ability to do HTTP referer

00:07:46.250 --> 00:07:49.250
blocking and IP blocking
from an API key.

00:07:51.990 --> 00:07:53.240
Back to our questions.

00:07:56.280 --> 00:08:01.950
The next question states, "How
are client IDs and API keys

00:08:01.950 --> 00:08:05.850
different?" I just covered this,
but I think it's worth

00:08:05.850 --> 00:08:07.860
mentioning it again.

00:08:07.860 --> 00:08:12.255
Client IDs are used when you're
making API calls that

00:08:12.255 --> 00:08:16.140
fetch end-user data and will
allow you to build an

00:08:16.140 --> 00:08:19.870
application that accesses the
data from an end user without

00:08:19.870 --> 00:08:22.000
requiring their password.

00:08:22.000 --> 00:08:27.240
For example, a call to the
Google+ API to fetch the posts

00:08:27.240 --> 00:08:31.230
for the user who's logged in or
a call to the calendar API

00:08:31.230 --> 00:08:36.280
to fetch an end user's
calendars or tasks.

00:08:36.280 --> 00:08:41.510
Simple API keys are used when
such API calls do not fetch

00:08:41.510 --> 00:08:43.150
end-user data.

00:08:43.150 --> 00:08:45.820
An example is the URL
Shortener API.

00:08:45.820 --> 00:08:50.200
You can make a call to the URL
Shortener API without a user

00:08:50.200 --> 00:08:51.900
ever being logged in.

00:08:51.900 --> 00:08:54.665
Another example is the
Translate API.

00:08:54.665 --> 00:08:55.850
It works the same.

00:08:55.850 --> 00:08:58.380
You can make a call to the
Translate API to do a

00:08:58.380 --> 00:09:01.350
straight-up translation
without a user

00:09:01.350 --> 00:09:02.620
being logged in.

00:09:02.620 --> 00:09:05.420
That is the fundamental
difference between a client ID

00:09:05.420 --> 00:09:06.670
and an API key.

00:09:09.760 --> 00:09:11.180
There's more questions coming.

00:09:11.180 --> 00:09:14.430
Here's one that says, "Can
I make anonymous

00:09:14.430 --> 00:09:16.330
calls to Google APIs?

00:09:16.330 --> 00:09:19.470
The talk seems to indicate that
this is not possible.

00:09:19.470 --> 00:09:24.470
Why?" You'll recall in our last
week's webinar that I

00:09:24.470 --> 00:09:29.150
mentioned that when you make API
calls to Google, with very

00:09:29.150 --> 00:09:32.270
few exceptions, you need to
pass your credentials that

00:09:32.270 --> 00:09:37.100
identify your application when
making these API calls.

00:09:37.100 --> 00:09:40.820
This is good for you, the
developer of an application.

00:09:40.820 --> 00:09:42.030
This is good for your users.

00:09:42.030 --> 00:09:42.950
This is good for Google.

00:09:42.950 --> 00:09:44.380
This is good for everyone.

00:09:44.380 --> 00:09:47.770
In general, when you pass
credentials, you're

00:09:47.770 --> 00:09:51.750
identifying your application
with Google, which will allow

00:09:51.750 --> 00:09:54.230
you to manage quota
more effectively.

00:09:54.230 --> 00:09:56.510
It will allow you to manage
your user more

00:09:56.510 --> 00:09:58.550
effectively, as well.

00:09:58.550 --> 00:10:02.300
For example, you can identify
end users who are making

00:10:02.300 --> 00:10:05.050
inappropriate use of your
application and who are

00:10:05.050 --> 00:10:07.030
consuming all of your quota.

00:10:07.030 --> 00:10:10.320
Remember, when you make
API calls, you have a

00:10:10.320 --> 00:10:11.710
limited set of quota.

00:10:11.710 --> 00:10:15.760
You don't want a few end users
from consuming all of it.

00:10:15.760 --> 00:10:18.810
When you pass credentials, this
allows you to identify

00:10:18.810 --> 00:10:22.250
both end users and the
application that is making

00:10:22.250 --> 00:10:23.690
those calls.

00:10:23.690 --> 00:10:24.840
So it's a good practice--

00:10:24.840 --> 00:10:28.100
and in many cases required
by Google--

00:10:28.100 --> 00:10:29.635
to pass those credentials.

00:10:33.450 --> 00:10:36.550
The next question is, "Where do
I learn the details about

00:10:36.550 --> 00:10:41.670
the OAuth 2.0 protocol?" You'll
recall in the webinar

00:10:41.670 --> 00:10:47.300
that we did a very brief
summary of OAuth 2.0.

00:10:47.300 --> 00:10:50.320
And there are lots of
details that can be

00:10:50.320 --> 00:10:54.060
covered about OAuth 2.0.

00:10:54.060 --> 00:10:57.500
It is not a simple protocol
to understand.

00:10:57.500 --> 00:11:02.290
And there's an abundance of
materials on the web to learn

00:11:02.290 --> 00:11:04.020
about OAuth 2.0.

00:11:04.020 --> 00:11:08.120
Google has extensive OAuth
2.0 documentation.

00:11:08.120 --> 00:11:11.420
I provided a link to that
documentation in last week's

00:11:11.420 --> 00:11:15.500
webinar, so I suggest you
go and check it out.

00:11:15.500 --> 00:11:20.240
There's also a talk on Google
I/O, which will be available

00:11:20.240 --> 00:11:24.420
on YouTube, that covers all the
details about OAuth 2.0,

00:11:24.420 --> 00:11:28.210
with examples on how to use it
to build your applications,

00:11:28.210 --> 00:11:31.430
and actually will walk you
through sample code.

00:11:31.430 --> 00:11:35.020
So that would be a very good
resource to check out.

00:11:35.020 --> 00:11:36.760
For the documentation--

00:11:36.760 --> 00:11:38.330
if I can show you--

00:11:40.970 --> 00:11:45.850
the Google developer site has
a page on OAuth 2.0 that not

00:11:45.850 --> 00:11:50.430
only will walk you through the
protocol, but will also walk

00:11:50.430 --> 00:11:55.180
you through all the scenarios
that exist for OAuth 2.0, such

00:11:55.180 --> 00:11:59.840
as using OAuth 2.0 for login,
using OAuth 2.0 for web server

00:11:59.840 --> 00:12:05.600
applications, for client-side
applications or JavaScript, or

00:12:05.600 --> 00:12:11.460
for installed applications that
run on mobile devices or

00:12:11.460 --> 00:12:13.780
other installed applications.

00:12:13.780 --> 00:12:18.320
So this page walks you through
the flow in every case.

00:12:18.320 --> 00:12:22.430
I just need to remind you, as I
did in last week's webinar,

00:12:22.430 --> 00:12:25.660
that if you're using the client
libraries for Google

00:12:25.660 --> 00:12:30.080
APIs, that all the details for
OAuth are handled for you.

00:12:30.080 --> 00:12:31.520
But it's always good
to know what's

00:12:31.520 --> 00:12:32.770
happening behind the scenes.

00:12:35.530 --> 00:12:36.780
Back to our questions.

00:12:39.760 --> 00:12:45.490
The next question states, "Why
aren't APIs such as YouTube or

00:12:45.490 --> 00:12:50.490
Maps showing up in the APIs
Explorer?" You'll recall from

00:12:50.490 --> 00:12:55.840
last week's webinar that the
APIs Explorer is a user

00:12:55.840 --> 00:12:59.860
interface that will show you a
directory style of Google APIs

00:12:59.860 --> 00:13:02.160
and all the methods in them.

00:13:02.160 --> 00:13:05.820
And that there's a number of
APIs that show up there.

00:13:05.820 --> 00:13:08.800
But as the person who asked this
question noticed, there

00:13:08.800 --> 00:13:10.930
are APIs that are missing
from that list,

00:13:10.930 --> 00:13:15.040
such as Maps or YouTube.

00:13:15.040 --> 00:13:19.570
The APIs that you see in the
APIs Explorer are the APIs

00:13:19.570 --> 00:13:24.310
that work with Google's
Discovery Service.

00:13:24.310 --> 00:13:27.770
Google is working to add
Discovery Service

00:13:27.770 --> 00:13:29.890
for all of its APIs.

00:13:29.890 --> 00:13:32.180
And we're making
great progress.

00:13:32.180 --> 00:13:34.160
So hopefully, there will come
a day when all of Google's

00:13:34.160 --> 00:13:36.700
APIs will show in
this directory.

00:13:36.700 --> 00:13:39.780
So today, the support is limited
to the ones you see in

00:13:39.780 --> 00:13:41.030
the APIs Explorer.

00:13:45.190 --> 00:13:50.720
The next question states, "What
if I do not want to use

00:13:50.720 --> 00:13:53.220
a Google Client Library?

00:13:53.220 --> 00:13:59.110
What am I missing?" You are not
required to use a Google

00:13:59.110 --> 00:14:03.510
Client Library when you're
making an API call.

00:14:03.510 --> 00:14:06.500
There's also the possibility
that you're working with a

00:14:06.500 --> 00:14:09.420
programming language that Google
doesn't have a client

00:14:09.420 --> 00:14:11.970
library for yet.

00:14:11.970 --> 00:14:16.330
In both cases, if you're not
using a Google Client Library,

00:14:16.330 --> 00:14:20.330
you'll be missing on some
important features that are

00:14:20.330 --> 00:14:23.260
designed to make your
life easier.

00:14:23.260 --> 00:14:26.890
The most important one
is support for OAuth.

00:14:26.890 --> 00:14:30.900
There's client libraries for
nine different programming

00:14:30.900 --> 00:14:35.040
languages available
for Google.

00:14:35.040 --> 00:14:39.030
And all of them implement
the OAuth steps for you.

00:14:39.030 --> 00:14:43.060
If you recall from last week's
webinar, the OAuth steps are a

00:14:43.060 --> 00:14:48.030
series of exchanges of API
calls to Google's OAuth

00:14:48.030 --> 00:14:53.010
endpoints for access tokens
or refresh tokens.

00:14:53.010 --> 00:14:55.920
All of those details are handled
for you in a secure

00:14:55.920 --> 00:14:59.350
way by the Google Client
Libraries.

00:14:59.350 --> 00:15:03.000
Another thing that the Google
Client Libraries do is that

00:15:03.000 --> 00:15:07.750
they format and can access the
resources available for an API

00:15:07.750 --> 00:15:09.340
automatically.

00:15:09.340 --> 00:15:11.680
So when you use the client
library, you're literally

00:15:11.680 --> 00:15:15.220
ready to call that
API in seconds.

00:15:15.220 --> 00:15:18.580
They are also considered more
secure because the code has

00:15:18.580 --> 00:15:21.140
been built using the
best practices for

00:15:21.140 --> 00:15:23.410
calling Google APIs.

00:15:23.410 --> 00:15:26.630
So we strongly encourage
you to use

00:15:26.630 --> 00:15:27.950
Google Client Libraries.

00:15:27.950 --> 00:15:30.770
And if there's a language that
you need to use that we're

00:15:30.770 --> 00:15:34.560
missing, let us know.

00:15:34.560 --> 00:15:37.630
And that would conclude the
questions that you have asked

00:15:37.630 --> 00:15:41.850
about last week's webinar.

00:15:41.850 --> 00:15:44.720
You can use this moderator
to keep them coming.

00:15:44.720 --> 00:15:47.740
And I thank you very much for
submitting your questions.

