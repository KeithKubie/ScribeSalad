WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:03.460
MALE SPEAKER: But we definitely
plan to implement

00:00:03.460 --> 00:00:05.970
Auto Update for the Editor.

00:00:05.970 --> 00:00:09.120
The plugin store will have
it built in with no

00:00:09.120 --> 00:00:10.910
real work on our part.

00:00:10.910 --> 00:00:13.730
But we're going to model it very
much like the Chrome auto

00:00:13.730 --> 00:00:16.320
update, where it's sort
of effortless.

00:00:16.320 --> 00:00:18.310
It downloads the new version
and asks you

00:00:18.310 --> 00:00:20.520
if you want to restart.

00:00:20.520 --> 00:00:22.340
Very little work on the user's
part, and you're always kept

00:00:22.340 --> 00:00:23.770
up the date with the
latest and the

00:00:23.770 --> 00:00:26.120
greatest in the Editor.

00:00:26.120 --> 00:00:30.590
The time frame for that is also
soon, but not tomorrow.

00:00:34.060 --> 00:00:36.730
FEMALE SPEAKER: Next question,
there was some discussion on

00:00:36.730 --> 00:00:40.130
the mailing list about type
inferencing in the Editor.

00:00:40.130 --> 00:00:44.240
What is the policy with respect
to untyped variables

00:00:44.240 --> 00:00:47.200
and compiler performance?

00:00:47.200 --> 00:00:50.440
MALE SPEAKER: Yeah, we have an
interesting opportunity with

00:00:50.440 --> 00:00:52.000
the Editor.

00:00:52.000 --> 00:00:57.120
We definitely have to present to
the user the same kinds of

00:00:57.120 --> 00:01:01.670
errors and warnings that they
would see running the compiler

00:01:01.670 --> 00:01:03.975
or running on the VM
in production mode.

00:01:06.540 --> 00:01:08.320
So they'll know what kind of
error they're going to be

00:01:08.320 --> 00:01:09.190
looking at.

00:01:09.190 --> 00:01:11.790
But we also have the opportunity
to present the

00:01:11.790 --> 00:01:14.770
user with additional information
that we can gather

00:01:14.770 --> 00:01:19.120
from doing more detailed
analysis than is done,

00:01:19.120 --> 00:01:21.700
perhaps, in some other areas.

00:01:21.700 --> 00:01:27.190
So we're still looking at
exactly how that's going to

00:01:27.190 --> 00:01:30.660
manifest within the Editor and
exactly how we're going to

00:01:30.660 --> 00:01:33.380
allow users to control whether
or not they get additional

00:01:33.380 --> 00:01:35.420
information.

00:01:35.420 --> 00:01:39.830
But that's definitely something
that we can do.

00:01:39.830 --> 00:01:42.010
MALE SPEAKER:Yeah, it's
a real balancing act.

00:01:42.010 --> 00:01:45.940
We want to be consistent with
the language, its goals, and

00:01:45.940 --> 00:01:48.360
allowing people to work
in un-type mode.

00:01:48.360 --> 00:01:53.500
But a lot of users really
want the safety and the

00:01:53.500 --> 00:01:56.500
scaffolding of types.

00:01:56.500 --> 00:02:00.820
And so it's a balancing act of
maybe allowing users who want

00:02:00.820 --> 00:02:04.885
to work in more of a type mode
to let the tools, where we can

00:02:04.885 --> 00:02:07.690
infer that additional
information, to give them

00:02:07.690 --> 00:02:11.370
warnings and help them
work in a safer mode.

00:02:11.370 --> 00:02:16.640
And for the developers that
really want un-typed, and

00:02:16.640 --> 00:02:18.220
adherence to the language,
that they have

00:02:18.220 --> 00:02:19.830
that option as well.

00:02:19.830 --> 00:02:21.960
MALE SPEAKER: Right, we also
want to use it to improve the

00:02:21.960 --> 00:02:24.280
rest of the editing
experience.

00:02:24.280 --> 00:02:27.600
In addition to being able to
potentially provide warnings

00:02:27.600 --> 00:02:35.080
about errors that perhaps aren't
specified by the type

00:02:35.080 --> 00:02:36.060
annotations.

00:02:36.060 --> 00:02:37.890
If you haven't, for example,
haven't provided any.

00:02:37.890 --> 00:02:40.860
If you've just declared
everything to be a bar.

00:02:40.860 --> 00:02:45.820
But if we can infer the types
of variables, then we can do

00:02:45.820 --> 00:02:49.230
additional work for code
completion and refactorings

00:02:49.230 --> 00:02:54.710
and other editor functionality
to improve the entire editing

00:02:54.710 --> 00:02:56.310
experience.

00:02:56.310 --> 00:02:59.690
So it's not just about
errors and warnings.

00:02:59.690 --> 00:03:01.174
There's actually a
lot more to it.

00:03:03.900 --> 00:03:07.410
FEMALE SPEAKER: OK, is
SCM Git [INAUDIBLE]

00:03:07.410 --> 00:03:08.660
going to be included?

00:03:13.280 --> 00:03:17.150
MALE SPEAKER: I think the answer
is, for the editor,

00:03:17.150 --> 00:03:18.712
probably not.

00:03:18.712 --> 00:03:20.670
But for the plug-in
story, absolutely.

00:03:20.670 --> 00:03:23.160
It'll be one of the things
that Eclipse

00:03:23.160 --> 00:03:24.240
will give us for free.

00:03:24.240 --> 00:03:30.450
And I think obviously team
support SCM Git version is all

00:03:30.450 --> 00:03:32.360
extremely important for
working on large scale

00:03:32.360 --> 00:03:34.810
projects and working in
professional development

00:03:34.810 --> 00:03:38.380
environments and definitely is
something we're going to

00:03:38.380 --> 00:03:39.630
support going forward.

00:03:43.910 --> 00:03:44.770
FEMALE SPEAKER: When is code

00:03:44.770 --> 00:03:48.366
formatting going to be available?

00:03:48.366 --> 00:03:50.587
Or is code formatting going
to be available?

00:03:53.570 --> 00:03:54.820
MALE SPEAKER: I can take
this unless someone

00:03:54.820 --> 00:03:57.530
wants to jump in.

00:03:57.530 --> 00:03:58.970
It's on our plate.

00:03:58.970 --> 00:04:00.660
It's on our radar.

00:04:00.660 --> 00:04:03.630
We have a lot of things on our
plate though, and we've been

00:04:03.630 --> 00:04:06.410
prioritizing our work to try
and get the most important

00:04:06.410 --> 00:04:08.750
stuff out first.

00:04:08.750 --> 00:04:11.230
We use code formatting
heavily internally.

00:04:11.230 --> 00:04:13.370
We use it for our review process
to make sure the code

00:04:13.370 --> 00:04:16.899
is all normalized so that you
don't deal with a lot of white

00:04:16.899 --> 00:04:20.700
space across changes.

00:04:20.700 --> 00:04:23.540
And I personally really
like the philosophy

00:04:23.540 --> 00:04:26.710
behind the Go Lang.

00:04:26.710 --> 00:04:30.130
Where their formatting has
one set of standards.

00:04:30.130 --> 00:04:33.560
Their Go Format tool always
formats code the same way.

00:04:33.560 --> 00:04:36.400
There's very few preferences
and options.

00:04:36.400 --> 00:04:38.720
And I think that when we do
come out with a formatting

00:04:38.720 --> 00:04:40.490
tool it'll look similar
to that.

00:04:40.490 --> 00:04:44.680
And that it'll format code
according to our code

00:04:44.680 --> 00:04:48.040
guidelines, sort of
best practices.

00:04:48.040 --> 00:04:52.410
And there will probably be a
command line version of it,

00:04:52.410 --> 00:04:54.738
and Editor will probably
use that.

00:04:54.738 --> 00:04:57.870
And it'll just work that way.

00:04:57.870 --> 00:05:01.640
I think that the time frame is
probably several months out

00:05:01.640 --> 00:05:04.460
just based on other things
on our plate.

00:05:04.460 --> 00:05:07.220
But it is an open
source project.

00:05:07.220 --> 00:05:10.370
So if it's important to you
we're always open to patches.

00:05:14.770 --> 00:05:16.980
FEMALE SPEAKER: Do you plan
to integrate Run and

00:05:16.980 --> 00:05:19.170
Debug menu into one?

00:05:19.170 --> 00:05:20.800
Just like in Visual Studio?

00:05:26.240 --> 00:05:30.190
Well, it's been a long time
since I've used Visual Studio

00:05:30.190 --> 00:05:33.450
so I can't quite recall
how it is.

00:05:33.450 --> 00:05:39.940
But if there's any reason that
people are not happy with the

00:05:39.940 --> 00:05:42.960
way things are structured right
now, we definitely take

00:05:42.960 --> 00:05:47.390
requests and go with it.

00:05:47.390 --> 00:05:50.800
MALE SPEAKER: Yeah, I think that
adding a bug to our bug

00:05:50.800 --> 00:05:54.270
system, with a little bit more
specificity about what you

00:05:54.270 --> 00:05:55.060
want would really help.

00:05:55.060 --> 00:06:00.000
We take a lot of our planning
from the bug system feature

00:06:00.000 --> 00:06:02.200
requests and current bugs.

00:06:02.200 --> 00:06:06.070
And that's really a way to
influence the project for the

00:06:06.070 --> 00:06:09.950
Editor, is to file feature
requests and bugs.

00:06:09.950 --> 00:06:11.890
MALE SPEAKER: The easiest way
to do that is the Send

00:06:11.890 --> 00:06:13.530
Feedback button.

00:06:13.530 --> 00:06:18.000
All of those comments and
questions for the Dart Editor,

00:06:18.000 --> 00:06:21.450
and for the language in general,
all of those comments

00:06:21.450 --> 00:06:22.830
go into our inboxes.

00:06:22.830 --> 00:06:24.080
So we see all of them.

00:06:29.270 --> 00:06:31.530
FEMALE SPEAKER: Are skeletons,
templates, for

00:06:31.530 --> 00:06:32.780
new projects planned?

00:06:35.440 --> 00:06:37.980
MALE SPEAKER: We have
some wizards.

00:06:37.980 --> 00:06:40.330
We have basically two wizards
for a Hello World web

00:06:40.330 --> 00:06:43.140
application and a Hello
World command line.

00:06:43.140 --> 00:06:49.700
And I haven't personally given
any thought to more types of

00:06:49.700 --> 00:06:51.695
more sophisticated wizards, but
I could see that adding

00:06:51.695 --> 00:06:52.590
real value.

00:06:52.590 --> 00:06:58.020
So I think, again, file
a feature request and

00:06:58.020 --> 00:07:00.240
we'll follow up.

00:07:00.240 --> 00:07:03.780
MALE SPEAKER:I suspect we
probably will once we know

00:07:03.780 --> 00:07:05.390
what they should look like.

00:07:05.390 --> 00:07:07.860
I think it's a little
early yet.

00:07:07.860 --> 00:07:11.180
There's a lot of infrastructure
underneath that

00:07:11.180 --> 00:07:15.630
hasn't been finalized that will
shape what some of those

00:07:15.630 --> 00:07:16.830
templates would look like.

00:07:16.830 --> 00:07:19.540
So it's a little bit
hard right now to

00:07:19.540 --> 00:07:21.901
provide a final template.

00:07:21.901 --> 00:07:26.066
But yeah, I think once we know
what they should look like

00:07:26.066 --> 00:07:27.316
we'll do that.

00:07:31.120 --> 00:07:35.770
FEMALE SPEAKER: Will a rewrite
be done using Dart?

00:07:35.770 --> 00:07:38.300
MALE SPEAKER: Well that's
a good question.

00:07:38.300 --> 00:07:41.710
That's something we've
speculated about ourselves

00:07:41.710 --> 00:07:44.670
every few weeks.

00:07:44.670 --> 00:07:48.060
I think the short answer is that
the Dart Editor team's

00:07:48.060 --> 00:07:53.150
primary goal is to deliver
fantastic tooling for Dart,

00:07:53.150 --> 00:07:55.665
and currently that's
based on Eclipse.

00:07:58.800 --> 00:08:02.660
If we were to rewrite in Dart,
it would mean that there would

00:08:02.660 --> 00:08:04.280
be a significant period
of time where the

00:08:04.280 --> 00:08:05.520
tooling didn't improve.

00:08:05.520 --> 00:08:09.010
And I think in the short term
it's safe to say that we're

00:08:09.010 --> 00:08:12.870
going to maintain the
Eclipse tooling.

00:08:12.870 --> 00:08:17.070
And in the very long term, it's
really anyone's guess.

00:08:17.070 --> 00:08:20.930
I think, for a lot of reasons,
it would be fantastic to have

00:08:20.930 --> 00:08:24.020
the tooling written in Dart, and
would probably allow the

00:08:24.020 --> 00:08:26.430
community to participate
more in the tooling.

00:08:29.060 --> 00:08:35.409
But definitely short term,
no, and long term,

00:08:35.409 --> 00:08:38.710
it's anybody's guess.

00:08:38.710 --> 00:08:41.960
FEMALE SPEAKER: A related
question, will there be a Dart

00:08:41.960 --> 00:08:44.680
Web Editor in the Cloud, or
possibly Cloud Nine, support?

00:08:50.310 --> 00:08:53.680
Does anybody want
to take that?

00:08:53.680 --> 00:08:58.450
MALE SPEAKER: I haven't heard
any concrete plans for that.

00:08:58.450 --> 00:09:03.040
I certainly wouldn't rule out
anything like that, because

00:09:03.040 --> 00:09:05.980
you never know what we
may end up doing.

00:09:05.980 --> 00:09:09.240
The question is, what's most
useful for our users?

00:09:09.240 --> 00:09:11.750
That's always what drives us.

00:09:11.750 --> 00:09:13.970
That's why the comment earlier,

00:09:13.970 --> 00:09:15.850
submit a feature request.

00:09:15.850 --> 00:09:17.110
Send feedback.

00:09:17.110 --> 00:09:19.900
Let us know what you need from
the tool, because that's what

00:09:19.900 --> 00:09:23.400
drives us, is what our
users need most.

00:09:23.400 --> 00:09:26.330
And if something like this is
what users need most then

00:09:26.330 --> 00:09:27.580
that's where we'll be.

00:09:30.150 --> 00:09:33.320
But in the meantime, no we don't
have any immediate plans

00:09:33.320 --> 00:09:37.020
to be working on anything
of that nature.

00:09:37.020 --> 00:09:41.930
It's also the case that there
may very well be external

00:09:41.930 --> 00:09:46.380
people working on it that I
haven't heard about yet.

00:09:46.380 --> 00:09:47.830
That would be great.

00:09:47.830 --> 00:09:49.160
We would welcome that.

00:09:52.440 --> 00:09:54.990
FEMALE SPEAKER: When will you be
able to write Android Apps

00:09:54.990 --> 00:09:58.680
using Dart or App Engine Apps?

00:09:58.680 --> 00:10:01.230
MALE SPEAKER: So this question,
or a very similar

00:10:01.230 --> 00:10:06.980
one, came up yesterday with Seth
and JJ and [INAUDIBLE].

00:10:06.980 --> 00:10:11.840
And the short answer is that we
have had requests for App

00:10:11.840 --> 00:10:18.330
Engine support, and it makes
sense in our context.

00:10:18.330 --> 00:10:23.650
But there's no announcements
in that area.

00:10:23.650 --> 00:10:27.890
And for Android Apps, Android,
the browser obviously is a

00:10:27.890 --> 00:10:28.630
modern browser.

00:10:28.630 --> 00:10:33.050
And Dart is targeting modern
browsers as its platform.

00:10:33.050 --> 00:10:37.540
And we want to make Dart run
fantastically on all those

00:10:37.540 --> 00:10:41.340
especially, and including,
mobile devices.

00:10:41.340 --> 00:10:46.020
Native support is not something
on our radar

00:10:46.020 --> 00:10:49.620
currently, but definitely
fantastic mobile apps are.

00:10:54.120 --> 00:10:57.090
FEMALE SPEAKER: OK, a
language question.

00:10:57.090 --> 00:10:58.483
Will Dart have annotations?

00:11:02.250 --> 00:11:03.560
MALE SPEAKER: OK, I'll
take this one.

00:11:06.710 --> 00:11:08.820
If you look on the Issue Tracker
you can see that Galad

00:11:08.820 --> 00:11:10.740
has actually talked
about this.

00:11:10.740 --> 00:11:13.470
Annotations make a lot
of sense for Dart.

00:11:13.470 --> 00:11:16.080
It's not going to happen as a
first class language feature

00:11:16.080 --> 00:11:18.210
in the short term.

00:11:18.210 --> 00:11:20.010
It's going to be a ways out.

00:11:20.010 --> 00:11:27.170
The Editor has specific needs
for some smaller subset of

00:11:27.170 --> 00:11:30.790
annotations, and we will
probably add some extra

00:11:30.790 --> 00:11:34.210
lingual features for that-- so
some structured comments--

00:11:34.210 --> 00:11:39.135
to allow you to indicate that a
method that you're using or

00:11:39.135 --> 00:11:41.910
have defined is deprecated.

00:11:41.910 --> 00:11:43.860
That possibly methods
that you're using

00:11:43.860 --> 00:11:45.320
override parent methods.

00:11:45.320 --> 00:11:48.910
So if you do refactoring, and
you think you're overriding

00:11:48.910 --> 00:11:50.860
something, you're not,
you get a warning.

00:11:50.860 --> 00:11:55.110
And because we're going to be
creating additional warnings

00:11:55.110 --> 00:11:58.390
that are not part of the
language specification but

00:11:58.390 --> 00:12:03.550
that add value to users, like
unused fields, we want a way

00:12:03.550 --> 00:12:08.070
to disable those warnings in
specific places in code.

00:12:08.070 --> 00:12:11.220
Because maybe that warning is
true in the general case, adds

00:12:11.220 --> 00:12:13.590
value, but in specific
cases you don't want

00:12:13.590 --> 00:12:14.100
to know about it.

00:12:14.100 --> 00:12:16.740
So we'll have some extra lingual
annotation support,

00:12:16.740 --> 00:12:22.300
which will probably go away
once Dart has first class

00:12:22.300 --> 00:12:24.620
annotations.

00:12:24.620 --> 00:12:28.690
Brian, does that sound like
the general answer?

00:12:28.690 --> 00:12:31.748
MALE SPEAKER: Yeah, I can't
think of anything to add.

00:12:34.560 --> 00:12:36.860
FEMALE SPEAKER: OK, I think
we're done with

00:12:36.860 --> 00:12:39.280
the specific questions.

00:12:39.280 --> 00:12:40.450
There's a general question.

00:12:40.450 --> 00:12:42.660
What are some upcoming
features?

00:12:42.660 --> 00:12:47.520
Maybe you can talk about some
features that the questions

00:12:47.520 --> 00:12:48.640
didn't reference.

00:12:48.640 --> 00:12:51.760
MALE SPEAKER: Absolutely, one
of you two want to take the

00:12:51.760 --> 00:12:52.824
Type Hierarchy?

00:12:52.824 --> 00:12:54.074
MALE SPEAKER: [INAUDIBLE]

00:12:57.570 --> 00:12:59.020
FEMALE SPEAKER: [INAUDIBLE]

00:12:59.020 --> 00:13:02.180
MALE SPEAKER: So we've had a lot
of requests for our Type

00:13:02.180 --> 00:13:02.710
Hierarchy View.

00:13:02.710 --> 00:13:05.850
Which probably people coming
from more structured languages

00:13:05.850 --> 00:13:08.760
really like seeing the
inherent hierarchy.

00:13:08.760 --> 00:13:12.150
Myself, I use it all the time
for navigating code.

00:13:12.150 --> 00:13:13.550
That's something that
we're missing

00:13:13.550 --> 00:13:15.970
in the Editor currently.

00:13:15.970 --> 00:13:20.980
I can see that being added
in the near term.

00:13:20.980 --> 00:13:22.470
Not immediately, but definitely
having a way to

00:13:22.470 --> 00:13:28.520
view your parent classes and
child classes of what you're

00:13:28.520 --> 00:13:29.625
currently editing.

00:13:29.625 --> 00:13:30.875
It'd be super useful.

00:13:36.390 --> 00:13:39.410
For myself and [INAUDIBLE],
working on the debugger, we

00:13:39.410 --> 00:13:42.330
have some plans in that area.

00:13:42.330 --> 00:13:45.530
Short term, we want to just add
some small features and

00:13:45.530 --> 00:13:47.440
bug fixing.

00:13:47.440 --> 00:13:49.750
There are pretty
good debuggers.

00:13:49.750 --> 00:13:51.710
You get a full source level
debugger when you're running

00:13:51.710 --> 00:13:53.350
against Dartium.

00:13:53.350 --> 00:13:55.000
But there's some areas
for improvement.

00:13:55.000 --> 00:13:59.740
Long term, we want to have
better, tighter, coupling with

00:13:59.740 --> 00:14:00.930
the Virtual Machine.

00:14:00.930 --> 00:14:02.900
So that when you make
modifications in your code

00:14:02.900 --> 00:14:04.250
that's reflected in the
Virtual Machine.

00:14:08.360 --> 00:14:09.610
One second.

00:14:13.530 --> 00:14:17.220
Sorry, I thought that was the
Moderator telling me I had

00:14:17.220 --> 00:14:18.860
reached my time limit.

00:14:18.860 --> 00:14:21.700
But, yeah so when you're
debugging you could modify

00:14:21.700 --> 00:14:26.170
fields and have those changes
reflected live, and very

00:14:26.170 --> 00:14:28.230
sophisticated debugging
features.

00:14:28.230 --> 00:14:29.560
We're not close to that now.

00:14:29.560 --> 00:14:32.360
That something that's a
long term goal for us.

00:14:32.360 --> 00:14:35.230
That requires support from the
virtual machine, and the

00:14:35.230 --> 00:14:39.220
virtual machine team has a lot
of demands on their time.

00:14:39.220 --> 00:14:42.660
It'll be something that we
will allow eventually--

00:14:42.660 --> 00:14:46.410
having much, much tighter
coupling and awareness of the

00:14:46.410 --> 00:14:49.080
virtual machine.

00:14:49.080 --> 00:14:53.200
Another aspect of debugging
is our JavaScript story.

00:14:53.200 --> 00:14:55.410
Currently you have very first
class support when you're

00:14:55.410 --> 00:14:57.760
running your Dart application
natively in Dartium.

00:15:01.180 --> 00:15:03.020
And that's a great development
story.

00:15:03.020 --> 00:15:06.260
But right now, for deployment,
you often have to target

00:15:06.260 --> 00:15:08.950
browsers which do not support
Dart natively.

00:15:08.950 --> 00:15:11.540
So you compile your Dart code
to Javascript using

00:15:11.540 --> 00:15:12.400
Dart-to-JS.

00:15:12.400 --> 00:15:14.100
We want the Editor
to provide better

00:15:14.100 --> 00:15:16.730
support for those scenarios.

00:15:16.730 --> 00:15:20.930
And that may not include full
source level debugging for

00:15:20.930 --> 00:15:22.810
your Dart compiled
to JavaScript.

00:15:22.810 --> 00:15:27.640
But we want to improve the story
somewhat so you can get

00:15:27.640 --> 00:15:28.640
console logging back.

00:15:28.640 --> 00:15:30.710
You can get exceptions back.

00:15:30.710 --> 00:15:32.970
And you just have a better
experience, even if it's not

00:15:32.970 --> 00:15:36.400
quite the experience of
developing against Dartium.

00:15:41.590 --> 00:15:46.783
What other features do
we have on the plate?

00:15:46.783 --> 00:15:48.730
FEMALE SPEAKER: [INAUDIBLE]
you want to say something?

00:15:52.222 --> 00:15:55.840
MALE SPEAKER: Well, we have a
number of smaller features.

00:15:55.840 --> 00:15:59.600
Some of the ones that are
probably more interesting--

00:15:59.600 --> 00:16:06.610
doing some work in the Quick
Assist area or Quick Fixes.

00:16:06.610 --> 00:16:10.800
If you're familiar with what
Eclipse has, I expect we'll be

00:16:10.800 --> 00:16:14.400
doing something along those
lines fairly soon to help

00:16:14.400 --> 00:16:18.740
resolve compilation errors and
other issues that pop up.

00:16:21.770 --> 00:16:25.660
We've also had a lot of requests
for being able to

00:16:25.660 --> 00:16:28.870
control the visual appearance
of the Editor.

00:16:28.870 --> 00:16:32.650
Being able to do theming
of various kinds.

00:16:32.650 --> 00:16:35.120
And I expect we'll be doing
something along

00:16:35.120 --> 00:16:38.240
those lines as well.

00:16:38.240 --> 00:16:40.700
We've already got some starting
in terms of being

00:16:40.700 --> 00:16:44.060
able to set the font size.

00:16:44.060 --> 00:16:44.950
MALE SPEAKER: And some
key binding.

00:16:44.950 --> 00:16:46.540
MALE SPEAKER: And some
key binding changes.

00:16:46.540 --> 00:16:46.930
Yeah.

00:16:46.930 --> 00:16:47.670
MALE SPEAKER: It
is interesting.

00:16:47.670 --> 00:16:53.030
A lot of small aspects of the
development environment are

00:16:53.030 --> 00:16:54.360
really important to people.

00:16:54.360 --> 00:16:57.320
Being able to change your key
bindings is just a continual

00:16:57.320 --> 00:16:59.105
source of frustration
if you can't do it.

00:16:59.105 --> 00:17:01.600
It doesn't take us a lot of work
to do, but some things

00:17:01.600 --> 00:17:04.369
have a big impact
on usability.

00:17:04.369 --> 00:17:06.599
MALE SPEAKER: Yeah,
definitely.

00:17:06.599 --> 00:17:08.780
We talked about some earlier.

00:17:08.780 --> 00:17:12.829
Definitely we want to work on
improving the type inferencing

00:17:12.829 --> 00:17:13.819
that we have.

00:17:13.819 --> 00:17:16.500
Right now we have a very
small start at it.

00:17:16.500 --> 00:17:19.710
There's a lot of work that we
can do to improve that, which

00:17:19.710 --> 00:17:23.069
will have a big impact on a
lot of Editor features.

00:17:23.069 --> 00:17:26.099
Like we said, code completion
and refactoring and a number

00:17:26.099 --> 00:17:27.499
of other areas.

00:17:33.180 --> 00:17:37.280
MALE SPEAKER: You want to talk
about the Analysis Engine?

00:17:37.280 --> 00:17:41.830
MALE SPEAKER: That's part of
the type inferencing stuff.

00:17:41.830 --> 00:17:45.470
The other major thing coming up
in that area, we have some

00:17:45.470 --> 00:17:48.360
plans for ways to significantly
improve the

00:17:48.360 --> 00:17:50.120
performance.

00:17:50.120 --> 00:17:53.850
Which, if those pan out, should
help with the Editor

00:17:53.850 --> 00:17:55.100
experience quite a bit.

00:17:57.850 --> 00:18:00.210
FEMALE SPEAKER: OK, we
have a new question.

00:18:00.210 --> 00:18:02.960
But I'm not sure how well we
would be able to answer it.

00:18:02.960 --> 00:18:06.050
What is the plan for Dart
on mobile devices?

00:18:06.050 --> 00:18:07.443
Standalone VM?

00:18:07.443 --> 00:18:08.840
Built-in Browser?

00:18:08.840 --> 00:18:10.090
Browser Extension?

00:18:12.480 --> 00:18:14.850
MALE SPEAKER: I don't have
knowledge of that myself.

00:18:17.920 --> 00:18:23.820
So my guess would be the current
plan is to support it

00:18:23.820 --> 00:18:25.070
using Dart-to-JS.

00:18:26.790 --> 00:18:31.660
And like any sort of modern
browser, if it supports HTML

00:18:31.660 --> 00:18:33.940
5, then we want to run
on that platform.

00:18:38.590 --> 00:18:40.770
MALE SPEAKER: I know there is
a lot of interest in being

00:18:40.770 --> 00:18:43.800
able to support mobile
devices.

00:18:43.800 --> 00:18:47.110
But I don't believe that we
have any concrete plans at

00:18:47.110 --> 00:18:53.350
this point for exactly how
that's going to work.

00:18:53.350 --> 00:18:56.520
Definitely supporting JavaScript
on any of the

00:18:56.520 --> 00:18:58.020
modern browsers.

00:18:58.020 --> 00:19:03.740
But as far as native work, I
know that's a great interest.

00:19:03.740 --> 00:19:05.980
But I haven't heard any concrete
plans for exactly how

00:19:05.980 --> 00:19:07.300
that's going to happen.

00:19:07.300 --> 00:19:10.950
Whether we're going to put the
VM on the platform, or whether

00:19:10.950 --> 00:19:14.070
there's going to be some other
mechanism for doing that.

00:19:14.070 --> 00:19:16.010
MALE SPEAKER: And the nice thing
about the Dart project

00:19:16.010 --> 00:19:19.000
is that most of what
you see happens.

00:19:19.000 --> 00:19:20.930
It's totally open source.

00:19:20.930 --> 00:19:21.995
Our development is
open source.

00:19:21.995 --> 00:19:25.000
All of our code reviews
and our commits.

00:19:25.000 --> 00:19:28.460
And mostly the future of the
platform is there for you to

00:19:28.460 --> 00:19:30.140
see in the commit logs.

00:19:30.140 --> 00:19:33.170
It's very open in that sense.

00:19:33.170 --> 00:19:35.165
FEMALE SPEAKER: OK,
another question.

00:19:35.165 --> 00:19:39.580
Running Dart code on VM is quite
open source in nature.

00:19:39.580 --> 00:19:41.620
It's not obfuscated.

00:19:41.620 --> 00:19:45.520
Is there any plans to give
developers build in box way to

00:19:45.520 --> 00:19:49.710
make it at least not easy
to copy and paste code?

00:19:49.710 --> 00:19:52.340
MALE SPEAKER: That's
a good question.

00:19:52.340 --> 00:19:55.500
I'm not aware of that myself,
an obfuscation tool.

00:19:55.500 --> 00:19:59.240
It may be something that we
don't provide but that is

00:19:59.240 --> 00:20:03.470
provided by a third party, like
people in the Java world.

00:20:03.470 --> 00:20:07.310
We will have a tool that will
take your Dart code spread out

00:20:07.310 --> 00:20:10.990
over several hundred source
files, and consolidate it into

00:20:10.990 --> 00:20:12.970
one file for deployment.

00:20:12.970 --> 00:20:16.010
That'll make the start up of
your web application quicker.

00:20:20.010 --> 00:20:22.220
The goal of that won't
necessarily be obfuscation so

00:20:22.220 --> 00:20:24.660
much as small code size.

00:20:30.710 --> 00:20:33.210
Are we out of questions?

00:20:33.210 --> 00:20:36.380
FEMALE SPEAKER: Yes, we're done
with all the questions.

00:20:36.380 --> 00:20:38.480
MALE SPEAKER: All right, well
thank you for watching.

00:20:38.480 --> 00:20:42.790
And I'd encourage everyone to
visit the dartlang.org website

00:20:42.790 --> 00:20:44.455
for more information
about Dart and to

00:20:44.455 --> 00:20:46.010
download the Editor.

00:20:46.010 --> 00:20:49.600
And if you're at Google IO,
definitely see the sessions

00:20:49.600 --> 00:20:51.800
that we have and Jamie's
Code Lab.

00:20:51.800 --> 00:20:53.600
MALE SPEAKER: See
everyone at IO.

00:20:53.600 --> 00:20:54.850
MALE SPEAKER: Thank you
all for watching.

