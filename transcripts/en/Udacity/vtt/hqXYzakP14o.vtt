WEBVTT
Kind: captions
Language: en

00:00:01.160 --> 00:00:03.469
Structs are a great way to
encapsulate values, but

00:00:03.469 --> 00:00:05.410
we can take this one step further.

00:00:05.410 --> 00:00:08.610
Let's modify the original syntax for
creating a struct.

00:00:08.610 --> 00:00:12.110
Right now, we know that a struct
has the struct keyword and

00:00:12.110 --> 00:00:15.420
then we give the name of the struct
followed by variables or

00:00:15.420 --> 00:00:20.210
constants of any type, as many as we
want and these are known as properties.

00:00:20.210 --> 00:00:22.830
So I'm going to go ahead and
make a quick change to this.

00:00:22.830 --> 00:00:24.060
Here's the difference.

00:00:24.060 --> 00:00:27.490
With this syntax, we can see that
a struct can not only contain variables

00:00:27.490 --> 00:00:30.820
and constants, but
instances of any type.

00:00:30.820 --> 00:00:34.630
That means you can have strucks that
contain strucks, that contain strucks.

00:00:34.630 --> 00:00:37.630
Essentially, strucks
on strucks on strucks.

00:00:37.630 --> 00:00:40.650
Let's say we have the struct
representing a Song and

00:00:40.650 --> 00:00:45.390
inside the struct we have a property for
the song's title, its length.

00:00:45.390 --> 00:00:48.420
And also properties for
the artist first and last name.

00:00:49.540 --> 00:00:53.670
So as we define a struct like this,
maybe we decide that we want to include

00:00:53.670 --> 00:00:57.230
some more information about the artist
like their age and their hometown.

00:00:58.300 --> 00:01:01.370
We can go ahead and
add these properties like so.

00:01:01.370 --> 00:01:05.349
But this is beginning to look exactly
like the problem we had before structs.

00:01:05.349 --> 00:01:06.750
We just have a bunch of variables and

00:01:06.750 --> 00:01:09.910
constants and they're starting
to get a little disorganized.

00:01:09.910 --> 00:01:12.690
And all this related information
could continue to grow and

00:01:12.690 --> 00:01:14.600
get more unmanageable.

00:01:14.600 --> 00:01:18.390
The best way to handle this is by
pulling the artist data out of the song

00:01:18.390 --> 00:01:21.710
struct and creating a separate
struct that represents an artist.

00:01:22.970 --> 00:01:25.560
There we go now we have an artist
struct with first name,

00:01:25.560 --> 00:01:27.940
last name, age and hometown.

00:01:27.940 --> 00:01:30.880
And actually we could probably
get rid of this prefix

00:01:30.880 --> 00:01:33.030
because that would be redundant.

00:01:33.030 --> 00:01:36.800
Now here's the powerful part within
the song struct we can have our own

00:01:36.800 --> 00:01:39.660
property which itself is a struct.

00:01:39.660 --> 00:01:41.580
So let's do that now.

00:01:41.580 --> 00:01:45.560
So now the song struct itself contains
an artist and this is really nice and

00:01:45.560 --> 00:01:49.430
elegant and as we'll see later
expanding this to support

00:01:49.430 --> 00:01:53.990
multiple artist is actually
quite intuitive process as well.

00:01:53.990 --> 00:01:58.060
So how would we access the properties
of a struct within a struct?

00:01:58.060 --> 00:02:00.600
Let's go ahead and
see a code example to explain.

00:02:01.740 --> 00:02:03.830
First, we'll create an artist track.

00:02:03.830 --> 00:02:06.150
How about country music
artist Garth Brooks.

00:02:07.190 --> 00:02:09.710
We will use the syntax
we've seen before.

00:02:09.710 --> 00:02:14.350
For the first name we've given Garth,
for the last name Brooks, age 53 and

00:02:14.350 --> 00:02:17.020
home town is Tulsa, Oklahoma.

00:02:17.020 --> 00:02:21.270
And this is according to Wikipedia when
I looked it up a couple minutes ago.

00:02:21.270 --> 00:02:23.890
And now that we have our artist
struct creating a song struct

00:02:23.890 --> 00:02:25.870
becomes pretty simple.

00:02:25.870 --> 00:02:28.360
Let's create a struct for
his song Thunder Rolls.

00:02:29.490 --> 00:02:34.600
So we'll use the song name Thunder Rolls
which has a length of 3:42.

00:02:34.600 --> 00:02:36.820
And we could represent
this as a number but

00:02:36.820 --> 00:02:39.240
we're choosing to do it as a string for
right now.

00:02:39.240 --> 00:02:43.160
And the last property that this
initializer needs is an artist and

00:02:43.160 --> 00:02:46.950
low and behold we have this artist
instance right here called Garth.

00:02:46.950 --> 00:02:52.110
So we'll use Garth and there we go,
we have an instance of a song struct.

00:02:52.110 --> 00:02:55.550
Now to access the information about
the artist contained within is

00:02:55.550 --> 00:02:58.120
pretty straightforward and
uses the dot operator again.

00:02:59.260 --> 00:03:04.640
So we'll start with Thunder Rolls
then .artist and if we go on we

00:03:04.640 --> 00:03:09.960
look to see what it contains, we can see
all the properties of the artist within.

00:03:09.960 --> 00:03:13.650
And if we want to take this one step
further we can use another dot operator

00:03:13.650 --> 00:03:17.640
to access one of the properties with
an artist like last name in this case

00:03:17.640 --> 00:03:18.960
which is Brooks.

00:03:18.960 --> 00:03:21.980
So I'm sure you can start thinking
of some pretty complex and

00:03:21.980 --> 00:03:24.800
cool relationships of
structs within structs.

