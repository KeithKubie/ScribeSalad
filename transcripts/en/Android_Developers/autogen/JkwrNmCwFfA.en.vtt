WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.055
 Android patterns for performance 

00:00:02.055 --> 00:00:03.680
 When it comes to performance, 

00:00:03.680 --> 00:00:06.390
 One approach controls computing. 

00:00:06.390 --> 00:00:08.480
 Without it, it was not your computer 

00:00:08.480 --> 00:00:10.410
 To exist or operate at all. 

00:00:10.410 --> 00:00:11.416
 I'm Joanna Smith. 

00:00:11.416 --> 00:00:13.580
 I confirm that buffering is essential for performance 

00:00:13.580 --> 00:00:16.710
 And to design the devices in your phone. 

00:00:17.740 --> 00:00:19.970
 If you think about it, you'll find a clear reason 

00:00:19.970 --> 00:00:21.330
 Computers contain RAM. 

00:00:21.330 --> 00:00:22.870
 It acts as a data cache 

00:00:22.870 --> 00:00:25.510
 Provides access to up-to-date information very quickly 

00:00:25.510 --> 00:00:27.910
 Compared to getting them from your hard drive. 

00:00:28.160 --> 00:00:30.060
 This is exactly the definition of the cache: 

00:00:30.060 --> 00:00:32.570
 A place to store frequently used data 

00:00:32.570 --> 00:00:34.910
 Until future use is done as soon as possible. 

00:00:35.330 --> 00:00:37.010
 At any time you bear the burden of pressure 

00:00:37.010 --> 00:00:40.160
 To calculate, download, or find part of data, 

00:00:40.160 --> 00:00:42.890
 The cache can do this more quickly and efficiently 

00:00:42.890 --> 00:00:45.570
 The second and third time and so forth. 

00:00:46.300 --> 00:00:49.416
 In your application, it is the most common case for gains from buffering 

00:00:49.416 --> 00:00:52.110
 Is when you have data calculated several times 

00:00:52.110 --> 00:00:53.740
 But with the same result always. 

00:00:54.160 --> 00:00:57.660
 No one will oppose the transfer of unchanging activities in an internal loop, 

00:00:57.660 --> 00:01:00.670
 But you might be surprised at how easy it is to do it unwittingly. 

00:01:01.180 --> 00:01:02.830
 Think of a simple example 

00:01:02.830 --> 00:01:05.230
 Where the derived number is calculated for a 4 × 4 matrix 

00:01:05.230 --> 00:01:07.400
 For use when calculating cyclic repeat control variable. 

00:01:07.770 --> 00:01:09.920
 But that matrix is ​​never changed within annular repetition; 

00:01:09.920 --> 00:01:11.550
 So you are wasting performance 

00:01:11.550 --> 00:01:13.830
 Recalculate the derivative number with each frequency. 

00:01:14.330 --> 00:01:17.529
 You can instead calculate and save the result outside the loop repeat 

00:01:17.529 --> 00:01:19.270
 And make the inner parts of the ring repeat 

00:01:19.270 --> 00:01:20.771
 Indicates that cached result. 

00:01:20.771 --> 00:01:22.700
 It may seem obvious when presented in this way, 

00:01:22.700 --> 00:01:25.910
 But you will be surprised that even the veteran developers fall into this trap. 

00:01:26.280 --> 00:01:28.000
 Such as calling Get Current User 

00:01:28.000 --> 00:01:31.060
 Inside loop replication in a single user environment, such as a game on mobile. 

00:01:31.870 --> 00:01:35.570
 Spooling also acts as a great resource for limited resource environments. 

00:01:35.910 --> 00:01:40.430
 Suppose, for example, that you have about 2 GB of images that a user may need to view, 

00:01:40.430 --> 00:01:43.550
 But you can only fit 50 MB of them in memory at a time. 

00:01:43.920 --> 00:01:47.860
 The Android window will help you as much as you can if you're using the adapter view. 

00:01:48.130 --> 00:01:49.960
 But you can increase the efficiency of this 

00:01:49.960 --> 00:01:52.250
 By tracking the types of images that should be saved in memory 

00:01:52.250 --> 00:01:53.420
 And those that should be eliminated 

00:01:53.420 --> 00:01:57.020
 So the frame does not need to evaluate the entire 2 GB content. 

00:01:58.210 --> 00:02:00.640
 There is a less common type of caching 

00:02:00.640 --> 00:02:02.120
 Known as "pre-computing". 

00:02:02.620 --> 00:02:04.670
 This type occurs when you spend time offline 

00:02:04.670 --> 00:02:08.290
 Calculates a huge search table or an enormous XML schema 

00:02:08.650 --> 00:02:11.040
 So that at run time you can fetch that data 

00:02:11.040 --> 00:02:14.920
 Instead of performing all those costly tasks as the user waits for you. 

00:02:15.500 --> 00:02:18.852
 This is the main idea: Avoid unnecessary actions. 

00:02:18.852 --> 00:02:21.390
 So if you're looking to make performance improvements 

00:02:21.390 --> 00:02:24.560
 Or trying to create a new application with perfect performance, 

00:02:24.560 --> 00:02:26.660
 It loses the places in which cyclic repetition occurs 

00:02:26.660 --> 00:02:29.000
 Or data download or dense computing 

00:02:29.000 --> 00:02:30.740
 Find out what you can modify there. 

00:02:31.010 --> 00:02:34.409
 Avoiding unnecessary actions is almost everything we talk about 

00:02:34.409 --> 00:02:38.030
 In the rest of the Android Performance Patterns and in the G + community; 

00:02:38.030 --> 00:02:40.040
 So you lose both. 

00:02:40.040 --> 00:02:42.090
 So keep calm, collect your code information 

00:02:42.090 --> 00:02:43.740
 Always remember that performance is important. 

