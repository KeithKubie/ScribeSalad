WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:03.640
What I want to do in this video
is step through the program

00:00:03.640 --> 00:00:05.700
that we wrote in
the previous video

00:00:05.700 --> 00:00:08.582
to really understand what's
happening, line by line.

00:00:08.582 --> 00:00:10.665
And get a little bit of
an intuitive understanding

00:00:10.665 --> 00:00:12.357
for for loops and variables.

00:00:12.357 --> 00:00:14.190
We're going to do it
for a specific example.

00:00:14.190 --> 00:00:17.730
We're going to do an example
where the user inputs--

00:00:17.730 --> 00:00:19.720
so when the user is
prompted to input a number,

00:00:19.720 --> 00:00:21.677
the user will
input the number 3.

00:00:21.677 --> 00:00:23.010
We're just going to assume that.

00:00:23.010 --> 00:00:24.880
And I've picked a
low number so that we

00:00:24.880 --> 00:00:27.070
don't have to keep looping
through this forever.

00:00:27.070 --> 00:00:29.500
So this video can be
of a reasonable length.

00:00:29.500 --> 00:00:32.750
So right when that happens, when
the user inputs the number 3,

00:00:32.750 --> 00:00:36.520
it the assigns the variable
number to be equal to 3.

00:00:36.520 --> 00:00:39.380
And there's two ways that
you can think about this.

00:00:39.380 --> 00:00:41.660
I tend to, what I do in
any programming language,

00:00:41.660 --> 00:00:45.070
when I think of a variable,
I tend to view it as bucket.

00:00:45.070 --> 00:00:48.240
So I have a bucket
called number.

00:00:48.240 --> 00:00:50.950
And in that bucket, when
the user inputs a 3,

00:00:50.950 --> 00:00:54.750
if the user inputs a 3, I'm
sticking a 3 in that bucket.

00:00:54.750 --> 00:00:58.830
Python is a little bit
different than some languages.

00:00:58.830 --> 00:01:02.989
And the more correct way-- and
they're both kind of intuitive,

00:01:02.989 --> 00:01:05.280
I think, if you think about
it-- of viewing of variable

00:01:05.280 --> 00:01:12.090
in Python, is to think of the
variable as referring to the 3.

00:01:12.090 --> 00:01:14.290
And I say that
because, in Python,

00:01:14.290 --> 00:01:18.240
if you change a variable's--
let's say right under this we

00:01:18.240 --> 00:01:19.400
wrote number is equal to 2.

00:01:19.400 --> 00:01:20.510
We didn't do that,
but if we said

00:01:20.510 --> 00:01:22.093
number is equal to
2, what Python does

00:01:22.093 --> 00:01:24.430
is it actually leaves
that 3 there in memory.

00:01:24.430 --> 00:01:30.200
And then it would point
to the number 2 instead.

00:01:30.200 --> 00:01:33.430
It wouldn't obliterate the
3 and just put a 2 there,

00:01:33.430 --> 00:01:34.560
the 3 still exists.

00:01:34.560 --> 00:01:36.180
And that's important
when we start

00:01:36.180 --> 00:01:41.060
doing more complex or nuanced
things with more fancy data

00:01:41.060 --> 00:01:41.850
types.

00:01:41.850 --> 00:01:43.110
But let's rewind all of this.

00:01:43.110 --> 00:01:44.770
For the sake of
this program, you

00:01:44.770 --> 00:01:47.640
can view it either way,
a bucket with a 3 in it.

00:01:47.640 --> 00:01:49.140
Or you could view
it as a label that

00:01:49.140 --> 00:01:54.070
is referring to a 3 someplace
in the computer's memory.

00:01:54.070 --> 00:01:55.950
Now the next thing
that happens is

00:01:55.950 --> 00:01:58.340
that we have another
variable called product.

00:01:58.340 --> 00:02:00.510
And we assign product
to be equal to 1.

00:02:00.510 --> 00:02:03.440
So I'm going to do the
same two representations.

00:02:03.440 --> 00:02:07.430
So we've set up another
bucket here, called product,

00:02:07.430 --> 00:02:10.669
and we are assigning, we are
putting 1 in that bucket.

00:02:10.669 --> 00:02:15.430
Or you could say that
product is a variable.

00:02:15.430 --> 00:02:19.120
It's a label that
is referring to a 1.

00:02:19.120 --> 00:02:20.950
And then we get to our for loop.

00:02:20.950 --> 00:02:22.870
And this is probably
the confusing part.

00:02:22.870 --> 00:02:26.600
So we have for i
in range of number.

00:02:26.600 --> 00:02:29.340
So literally the interpreter
says OK, what's number?

00:02:29.340 --> 00:02:31.100
Well, in this case, number is 3.

00:02:31.100 --> 00:02:38.770
So this is going to be
evaluated as range of 3,

00:02:38.770 --> 00:02:40.970
in our particular example.

00:02:40.970 --> 00:02:41.647
Range of 3.

00:02:41.647 --> 00:02:43.730
And once again, how did
the interpreter know that?

00:02:43.730 --> 00:02:46.070
It's said range of number,
number's a variable,

00:02:46.070 --> 00:02:47.430
look up the number variable.

00:02:47.430 --> 00:02:47.710
OK.

00:02:47.710 --> 00:02:50.043
3 is sitting in it, so I'm
going to put a 3 right there.

00:02:50.043 --> 00:02:51.580
Or look up the number variable.

00:02:51.580 --> 00:02:54.030
The number variable is
pointing to the number 3,

00:02:54.030 --> 00:02:56.640
so I'm just going to put a 3
here and take a range of 3.

00:02:56.640 --> 00:02:58.740
And we saw in the last
video that if you evaluate

00:02:58.740 --> 00:03:05.080
just range of 3, range of 3 is
equal to a sequence of numbers,

00:03:05.080 --> 00:03:07.790
0, 1, 2.

00:03:07.790 --> 00:03:09.540
So it creates a sequence
of three numbers,

00:03:09.540 --> 00:03:13.000
starting at 0, up to
that number minus 1.

00:03:13.000 --> 00:03:15.620
And what the for loop
does, is every time

00:03:15.620 --> 00:03:18.670
we go through the for loop,
it executes this code.

00:03:18.670 --> 00:03:21.250
It executes this code
that's inside the for loop.

00:03:21.250 --> 00:03:24.620
And we know it's inside the for
loop, because we indented it.

00:03:24.620 --> 00:03:27.200
And the most used
convention is Python,

00:03:27.200 --> 00:03:29.540
is to don't use the Tab.

00:03:29.540 --> 00:03:31.290
You'd press Space four times.

00:03:31.290 --> 00:03:33.440
And that tells the
interpreter, anything

00:03:33.440 --> 00:03:36.220
at this level of indention
happens every time

00:03:36.220 --> 00:03:37.570
we go through the for loop.

00:03:37.570 --> 00:03:40.730
And when we start the
for loop, the i variable

00:03:40.730 --> 00:03:42.062
is going to start at 0.

00:03:42.062 --> 00:03:44.020
So the first time we go
through the for loop, i

00:03:44.020 --> 00:03:47.270
is going to be the first
element in this sequence.

00:03:47.270 --> 00:03:49.790
Then, when we go to
the for loop again,

00:03:49.790 --> 00:03:52.052
i is going to be the second
element in the sequence.

00:03:52.052 --> 00:03:54.010
And then when we go
through the for loop again,

00:03:54.010 --> 00:03:56.550
i is going to be the third
element in the sequence.

00:03:56.550 --> 00:03:59.220
And then we go to the
for loop and it'll

00:03:59.220 --> 00:04:01.759
try to assign i to another
element in the sequence

00:04:01.759 --> 00:04:02.550
and say, hey, wait!

00:04:02.550 --> 00:04:04.341
There are no more
elements in the sequence.

00:04:04.341 --> 00:04:06.060
And then it'll break
out of the for loop

00:04:06.060 --> 00:04:09.079
and then continue on with
the rest of the program.

00:04:09.079 --> 00:04:10.620
So given that, let's
think about what

00:04:10.620 --> 00:04:12.560
happens for the
particular example

00:04:12.560 --> 00:04:15.700
where the user inputted a 3.

00:04:15.700 --> 00:04:18.640
So range of number
is going to evaluate

00:04:18.640 --> 00:04:24.420
as-- I wrote up here, 0, 1, 2.

00:04:24.420 --> 00:04:25.430
Let me do it this way.

00:04:25.430 --> 00:04:27.300
Let me write it over here.

00:04:27.300 --> 00:04:32.090
So it's going to be, 0, 1, 2.

00:04:32.090 --> 00:04:34.040
And the first time
through the loop,

00:04:34.040 --> 00:04:36.840
i-- so I'm going to use this
convention right over here.

00:04:36.840 --> 00:04:41.170
The first time through the loop,
i is going to refer to the 0.

00:04:41.170 --> 00:04:43.700
Or if we use this convention
over here, the first time,

00:04:43.700 --> 00:04:45.295
as we go through
the loop, i, you

00:04:45.295 --> 00:04:46.670
could view it as
a bucket that is

00:04:46.670 --> 00:04:49.494
going to be assigned the
first element of range of 3,

00:04:49.494 --> 00:04:50.910
the first element
of the sequence.

00:04:50.910 --> 00:04:53.370
It is going to be 0.

00:04:53.370 --> 00:04:56.080
And then we execute
what's in the loop.

00:04:56.080 --> 00:04:59.750
We reassign, so we have
to reassign product

00:04:59.750 --> 00:05:01.625
to be something new
right over here.

00:05:01.625 --> 00:05:03.500
And what is this something
new the first time

00:05:03.500 --> 00:05:04.970
we go through the for loop?

00:05:04.970 --> 00:05:06.940
i is 0.

00:05:06.940 --> 00:05:09.190
0 plus 1 is 1.

00:05:09.190 --> 00:05:11.220
So the first time we
go through the loop--

00:05:11.220 --> 00:05:13.690
let me do that in a color you
can see-- the first time we

00:05:13.690 --> 00:05:16.410
go through the loop, this
is going to be 1, 0 plus 1.

00:05:16.410 --> 00:05:23.160
Product is 1 this first
time we go through the loop.

00:05:23.160 --> 00:05:25.050
Let me do it in the same colors.

00:05:25.050 --> 00:05:28.822
So i is 0 plus 1, so we get 1.

00:05:28.822 --> 00:05:30.690
1 times 1 is 1.

00:05:30.690 --> 00:05:34.080
So product will be
assigned to be 1.

00:05:34.080 --> 00:05:37.220
So product will be reassigned to
be 1, which really isn't going

00:05:37.220 --> 00:05:39.170
to change anything,
because it's already 1.

00:05:39.170 --> 00:05:40.149
So it was 1 before.

00:05:40.149 --> 00:05:42.190
You multiplied it by 1
and reassigned it to be 1.

00:05:42.190 --> 00:05:45.200
So I could write, cross out 1,
it's now going to be 1 again,

00:05:45.200 --> 00:05:46.559
but I'll just leave it as 1.

00:05:46.559 --> 00:05:48.850
Or we can just say it's going
to be reassigned to be 1.

00:05:48.850 --> 00:05:50.970
So nothing really has
changed that first time

00:05:50.970 --> 00:05:51.940
through the loop.

00:05:51.940 --> 00:05:54.350
But now, interesting
things are going to happen.

00:05:54.350 --> 00:05:56.910
So now we'll go back to
the beginning of the loop.

00:05:56.910 --> 00:06:00.840
And now, i will be the
next element in the loop.

00:06:00.840 --> 00:06:06.160
So now, i-- let me delete
this-- it will be reassigned

00:06:06.160 --> 00:06:08.880
to be the next
element in the loop.

00:06:08.880 --> 00:06:12.800
So now i will be 1.

00:06:12.800 --> 00:06:14.090
That's what the for loop does.

00:06:14.090 --> 00:06:17.360
It makes i each of the items
in the sequence in order,

00:06:17.360 --> 00:06:18.620
going through them.

00:06:18.620 --> 00:06:20.850
And now we execute it again.

00:06:20.850 --> 00:06:23.380
Now we go look at
product times i plus 1.

00:06:23.380 --> 00:06:24.980
Product is still 1.

00:06:24.980 --> 00:06:27.710
i is now 1.

00:06:27.710 --> 00:06:32.030
So 1 plus 1 is
now going to be 2.

00:06:32.030 --> 00:06:33.360
It is now going to be 2.

00:06:33.360 --> 00:06:37.630
So 1 times 2 is going
to be our new product.

00:06:37.630 --> 00:06:40.550
So the new product, it
was 1, but now we're

00:06:40.550 --> 00:06:43.640
multiplying it by 2 and
assigning it again to product.

00:06:43.640 --> 00:06:47.700
So the new product
is now going to be 2.

00:06:47.700 --> 00:06:50.550
So the product
variable is now 2.

00:06:50.550 --> 00:06:53.090
And then now we
try to loop again.

00:06:53.090 --> 00:06:57.230
And now this time, i
will be the next element.

00:06:57.230 --> 00:07:05.040
i is going to be the next
element in the sequence,

00:07:05.040 --> 00:07:07.150
right over here.

00:07:07.150 --> 00:07:09.720
Or we could say i is
going to be reassigned

00:07:09.720 --> 00:07:12.470
to 2, the next element
in the sequence.

00:07:12.470 --> 00:07:14.710
And we try to evaluate it again.

00:07:14.710 --> 00:07:17.090
So now we go into the for loop.

00:07:17.090 --> 00:07:19.840
Product is now 2.

00:07:19.840 --> 00:07:21.630
i is now 2.

00:07:21.630 --> 00:07:23.170
2 plus 1 is 3.

00:07:23.170 --> 00:07:25.610
So this whole expression
over here is 3.

00:07:25.610 --> 00:07:30.400
So we have 2, product is
now 2, times i plus 1.

00:07:30.400 --> 00:07:32.780
i is two, so i plus 1 is 3.

00:07:32.780 --> 00:07:36.950
So you have 2 times 3
3 is now going to be 6.

00:07:36.950 --> 00:07:41.190
So the new product times
i plus one is now 6.

00:07:41.190 --> 00:07:45.930
So this is now going to-- let me
do that same blue color-- this

00:07:45.930 --> 00:07:50.050
is now going to be 6.

00:07:50.050 --> 00:07:52.379
And now we try to execute
the for loop again.

00:07:52.379 --> 00:07:53.920
And the for loop's
going to say, hey,

00:07:53.920 --> 00:08:00.120
let me reassign i to be the
next item in this sequence.

00:08:00.120 --> 00:08:02.590
It tries to find the next
item in the sequence.

00:08:02.590 --> 00:08:07.060
But it says, wait, there is
no next item in the sequence.

00:08:07.060 --> 00:08:09.670
So we're done
executing our for loop.

00:08:09.670 --> 00:08:12.920
So there's nothing
left in our sequence,

00:08:12.920 --> 00:08:14.410
so we're done with our for loop.

00:08:14.410 --> 00:08:16.150
Now we break out of it.

00:08:16.150 --> 00:08:18.130
And we go to the next
line in the program.

00:08:18.130 --> 00:08:20.046
So the next line in the
program is, literally,

00:08:20.046 --> 00:08:21.570
just print the product.

00:08:21.570 --> 00:08:24.470
And at this point, we just
want to output the product.

00:08:24.470 --> 00:08:27.456
And the variable
product is now 6.

00:08:29.999 --> 00:08:31.790
And actually, one thing
I should have done,

00:08:31.790 --> 00:08:33.350
this entire time
is, I was sticking

00:08:33.350 --> 00:08:35.289
with the bucket representation.

00:08:35.289 --> 00:08:37.419
But the product on
this representation,

00:08:37.419 --> 00:08:39.130
here, it started referring to 1.

00:08:39.130 --> 00:08:40.669
It got reassigned to 1.

00:08:40.669 --> 00:08:42.490
But then it got assigned to 2.

00:08:42.490 --> 00:08:45.130
So then this
reference went to 2.

00:08:45.130 --> 00:08:46.905
And then it got reassigned to 6.

00:08:49.510 --> 00:08:52.660
So if I were to be consistent
with this representation

00:08:52.660 --> 00:08:55.590
over here, every time product
is referring to another number,

00:08:55.590 --> 00:08:58.620
or you can view it as a bucket,
for the sake of this program,

00:08:58.620 --> 00:09:00.289
where it keeps
getting reassigned.

00:09:00.289 --> 00:09:01.830
And what was cool
about this, is when

00:09:01.830 --> 00:09:04.280
we're done with this for
loop, the number that's

00:09:04.280 --> 00:09:06.950
sitting in the bucket product,
the variable product--

00:09:06.950 --> 00:09:09.390
or you could say, the number
that the variable product

00:09:09.390 --> 00:09:12.530
is referring to-- is the
factorial of the number

00:09:12.530 --> 00:09:13.890
that the person inputted.

00:09:13.890 --> 00:09:15.300
It's the factorial of 3.

00:09:15.300 --> 00:09:17.730
And if you remember,
3, the symbol

00:09:17.730 --> 00:09:21.350
for factorial is an exclamation
mark, is equal to 3 times

00:09:21.350 --> 00:09:24.170
2 times 1.

