WEBVTT
Kind: captions
Language: en

00:00:00.710 --> 00:00:03.520
Hi, I'm Barak Michener,
a software engineer

00:00:03.520 --> 00:00:05.190
on Google's Knowledge Team.

00:00:05.190 --> 00:00:07.490
One of my favorite
additions to Google search

00:00:07.490 --> 00:00:09.880
has been the integration
of Knowledge Graph.

00:00:09.880 --> 00:00:12.150
We've been working to
add great features, based

00:00:12.150 --> 00:00:15.010
on facts and relationships,
to more directly answer

00:00:15.010 --> 00:00:17.620
your questions every day.

00:00:17.620 --> 00:00:21.280
From charting and comparing
public data about countries,

00:00:21.280 --> 00:00:24.160
to relating facts and
entities that allow our users

00:00:24.160 --> 00:00:26.860
to more easily explore
what they're interested in.

00:00:26.860 --> 00:00:29.030
All possible because
these facts are

00:00:29.030 --> 00:00:31.530
related inside Google's
Knowledge Graph,

00:00:31.530 --> 00:00:35.260
based on publicly accessible
data from Freebase, Wikipedia,

00:00:35.260 --> 00:00:36.500
and the web.

00:00:36.500 --> 00:00:38.570
But why shouldn't
you, as a developer,

00:00:38.570 --> 00:00:41.370
be able to build your own
smaller Knowledge Graph?

00:00:41.370 --> 00:00:44.060
Today, I'm excited to show
you around my open source

00:00:44.060 --> 00:00:48.390
project, Cayley, an
open-source graph database.

00:00:48.390 --> 00:00:50.950
Written in Go and inspired
by the graph database

00:00:50.950 --> 00:00:53.980
behind freebase.com, it
stores structured data

00:00:53.980 --> 00:00:55.570
and retrieves
deeper connections,

00:00:55.570 --> 00:00:58.850
much like Knowledge Graph
does for Google, itself.

00:00:58.850 --> 00:01:00.130
So, here's what I'll cover.

00:01:00.130 --> 00:01:03.420
First, how Cayley fits
into a development stack.

00:01:03.420 --> 00:01:06.000
Then, I'll demo Cayley
and step through writing

00:01:06.000 --> 00:01:07.690
a few simple queries.

00:01:07.690 --> 00:01:09.940
Next, if you're coming
to this video from Part 1

00:01:09.940 --> 00:01:13.080
of this series, we'll then
use Cayley to load and query

00:01:13.080 --> 00:01:15.350
the music data that
Jarek generated.

00:01:15.350 --> 00:01:17.370
And finally, we get
to have a little fun

00:01:17.370 --> 00:01:21.020
and show off visualizations
that come built in.

00:01:21.020 --> 00:01:24.590
So, where does a graph database
fit within your data stack?

00:01:24.590 --> 00:01:26.270
A graph isn't meant
to be a replacement

00:01:26.270 --> 00:01:28.020
for traditional data stores.

00:01:28.020 --> 00:01:30.410
SQL is still great
for tabular data,

00:01:30.410 --> 00:01:33.360
and Key Value stores are
great for scale and speed.

00:01:33.360 --> 00:01:35.770
But graph stores are meant
to provide developers

00:01:35.770 --> 00:01:38.860
with another tool, to
query graph-shaped data.

00:01:38.860 --> 00:01:42.700
What form does graph-shaped
data take, and why is it useful?

00:01:42.700 --> 00:01:44.980
Graph data comes in
the form of triples.

00:01:44.980 --> 00:01:46.770
These are the edges
of our graph, where

00:01:46.770 --> 00:01:48.980
some entity relates
to another entity

00:01:48.980 --> 00:01:50.650
through some type
of relationship.

00:01:50.650 --> 00:01:53.200
For instance, Arthur
Cayley, the mathematician

00:01:53.200 --> 00:01:57.870
for whom the project is named,
was born in the city of London.

00:01:57.870 --> 00:02:01.630
A triple is simply these
three strings in our graph.

00:02:01.630 --> 00:02:04.630
Further, the relationships
you use, or as it's called,

00:02:04.630 --> 00:02:07.640
your schema, depends on the
specifics of your data set.

00:02:07.640 --> 00:02:09.970
These are sort of the
phrases you might use,

00:02:09.970 --> 00:02:12.440
converted into a
machine readable form.

00:02:12.440 --> 00:02:13.460
There are many kinds.

00:02:13.460 --> 00:02:16.430
I use a lot of Freebase schema,
but Jarek based his music store

00:02:16.430 --> 00:02:19.200
on schema from schema.org.

00:02:19.200 --> 00:02:21.670
By thinking in terms
of entities, the nodes,

00:02:21.670 --> 00:02:25.560
and relationships, the edges,
we can define a complete schema,

00:02:25.560 --> 00:02:28.040
a way for graph databases
to represent connections

00:02:28.040 --> 00:02:30.640
that humans understand
intuitively.

00:02:30.640 --> 00:02:33.030
But why use another
type of data store?

00:02:33.030 --> 00:02:35.450
Graphs afford you
a few key things.

00:02:35.450 --> 00:02:38.750
One, the ability to simply
represent more complex data

00:02:38.750 --> 00:02:41.580
structures, such as
hierarchies and lattices.

00:02:41.580 --> 00:02:43.800
It's also great
for social graphs.

00:02:43.800 --> 00:02:46.120
Two, the ability to
more flexibly change

00:02:46.120 --> 00:02:46.990
your relationships.

00:02:46.990 --> 00:02:49.720
Where SQL has traditional
schema-first decisions

00:02:49.720 --> 00:02:53.920
up front, and key value stores
are fast and schema free,

00:02:53.920 --> 00:02:56.050
a graph straddles the
line by allowing schema

00:02:56.050 --> 00:02:57.690
to be more easily changed.

00:02:57.690 --> 00:03:00.340
What one might
call "schema-last".

00:03:00.340 --> 00:03:02.870
Three, graphs have
the ability to have

00:03:02.870 --> 00:03:05.390
self-defining relationships
that can form a greater

00:03:05.390 --> 00:03:08.630
ontology toward greater
abstraction and composability.

00:03:08.630 --> 00:03:10.640
Which is really just
a fancy way of talking

00:03:10.640 --> 00:03:14.070
about combining relationships
to form new relationships.

00:03:14.070 --> 00:03:18.230
Like inferring that my father's
father is my grandfather.

00:03:18.230 --> 00:03:21.900
And finally, the ability to use
a broader mathematical theory.

00:03:21.900 --> 00:03:24.230
Graph theory provides many
algorithms and metrics,

00:03:24.230 --> 00:03:27.460
like distance topologies,
cliques, and neighborhoods,

00:03:27.460 --> 00:03:30.520
all fairly intuitively derived.

00:03:30.520 --> 00:03:33.720
So that's a bit about where and
why graph data can be useful.

00:03:33.720 --> 00:03:36.280
Next, let's dive right in
and take a look at Cayley

00:03:36.280 --> 00:03:39.530
and run a few queries
against the music graph.

00:03:39.530 --> 00:03:41.280
Here's the Query
Editor for Cayley.

00:03:41.280 --> 00:03:45.370
The editor comes with the server
and uses the same HTTP API

00:03:45.370 --> 00:03:47.080
that your applications
might use.

00:03:47.080 --> 00:03:48.830
It's a way of
exploring your data

00:03:48.830 --> 00:03:51.900
and testing your
queries on the fly.

00:03:51.900 --> 00:03:53.950
In this instance,
we've loaded a data

00:03:53.950 --> 00:03:56.500
set on music, sourced
from the Freebase data

00:03:56.500 --> 00:03:58.240
dumps provided by Google.

00:03:58.240 --> 00:04:00.380
Because Freebase is
open to the community,

00:04:00.380 --> 00:04:03.490
its data-- about 2
billion triples in total--

00:04:03.490 --> 00:04:06.430
is licensed in the
Creative Commons.

00:04:06.430 --> 00:04:10.430
For this data set, I literally
ran grep across the data dumps

00:04:10.430 --> 00:04:12.390
and pulled out anything
related to music

00:04:12.390 --> 00:04:14.060
and all of the
name relationships.

00:04:14.060 --> 00:04:18.300
Which happens to be 134
million triples, altogether.

00:04:18.300 --> 00:04:19.870
Back to the Query Editor.

00:04:19.870 --> 00:04:22.089
First, you already know
the query language.

00:04:22.089 --> 00:04:25.750
It's just JavaScript, the
lingua franca of the web,

00:04:25.750 --> 00:04:28.210
executed by the
graph server, itself.

00:04:28.210 --> 00:04:31.370
There's a special variable
called Graph, or just g,

00:04:31.370 --> 00:04:32.900
with some special methods.

00:04:32.900 --> 00:04:37.800
Emit just adds the value that's
passed to the results set.

00:04:37.800 --> 00:04:41.120
To access the data in the graph,
we start by defining a path.

00:04:41.120 --> 00:04:43.210
Graph dot vertex,
or equivalently,

00:04:43.210 --> 00:04:47.080
g.v as is very common,
defines where we start.

00:04:47.080 --> 00:04:49.800
So, let's find the name
of our artist, Dual Core.

00:04:49.800 --> 00:04:52.170
I add "all" to
actually run the query

00:04:52.170 --> 00:04:54.310
and emit all the
nodes that it finds.

00:04:54.310 --> 00:04:57.910
And sure enough, that
name is in our graph.

00:04:57.910 --> 00:05:01.800
This however, is just the
name, a literal string.

00:05:01.800 --> 00:05:05.310
There are many Dual Cores in
Freebase, and in the world.

00:05:05.310 --> 00:05:07.460
The processor type
has the same name,

00:05:07.460 --> 00:05:11.030
as does, to some engineers,
a type of electrical wiring.

00:05:11.030 --> 00:05:13.490
So we need to disambiguate.

00:05:13.490 --> 00:05:15.800
If we follow all
links that point

00:05:15.800 --> 00:05:19.400
into this string over the
name relationship in Freebase,

00:05:19.400 --> 00:05:23.120
we should see all the
things named Dual Core.

00:05:23.120 --> 00:05:25.810
And indeed, we see
there are a couple.

00:05:25.810 --> 00:05:28.070
Well, we know that the
Dual Core we're looking for

00:05:28.070 --> 00:05:29.850
is a musical artist.

00:05:29.850 --> 00:05:31.970
So quickly, let's take
a look at a selection

00:05:31.970 --> 00:05:33.620
of artists from the graph.

00:05:33.620 --> 00:05:36.270
Starting from the entire
graph, by passing no arguments

00:05:36.270 --> 00:05:40.740
to Vertex, find all things that
have a type of music artist.

00:05:40.740 --> 00:05:42.989
But let's only get 20 of these.

00:05:42.989 --> 00:05:44.280
Well, that query seems to work.

00:05:44.280 --> 00:05:47.910
We get a set of IDs
from musical artists.

00:05:47.910 --> 00:05:49.460
You may have already
noticed the way

00:05:49.460 --> 00:05:51.390
a query is generally structured.

00:05:51.390 --> 00:05:53.880
Start somewhere,
follow some path,

00:05:53.880 --> 00:05:56.730
and then tell the
database to run the query.

00:05:56.730 --> 00:05:59.450
That can be all, for
everything, get limit,

00:05:59.450 --> 00:06:01.800
for only a handful, or
a couple other options,

00:06:01.800 --> 00:06:04.337
covered in the documentation.

00:06:04.337 --> 00:06:05.920
So, we know how to
get artists, and we

00:06:05.920 --> 00:06:08.150
know how to get things
named Dual Core.

00:06:08.150 --> 00:06:10.020
So let's combine
these two paths to try

00:06:10.020 --> 00:06:12.660
to find the one Dual
Core we're talking about.

00:06:12.660 --> 00:06:15.340
We add all to make sure
we're getting all of them.

00:06:15.340 --> 00:06:19.210
And in fact, we find
we get exactly one.

00:06:19.210 --> 00:06:21.490
Here's the identifier
for the band, Dual Core.

00:06:21.490 --> 00:06:24.420
It may look odd, but it's
all from machines, right down

00:06:24.420 --> 00:06:26.050
to the namespace prefix.

00:06:26.050 --> 00:06:28.950
Machine identifiers are
the key to graph databases.

00:06:28.950 --> 00:06:30.990
Think of them as
primary keys, a way

00:06:30.990 --> 00:06:33.920
of representing a single
concept in unique way.

00:06:33.920 --> 00:06:37.240
Like a barcode does for
products in the store.

00:06:37.240 --> 00:06:39.520
Well, let's find out
where they're from.

00:06:39.520 --> 00:06:41.270
I've refactored the
query slightly--

00:06:41.270 --> 00:06:44.820
it's just JavaScript-- to
make a function, getArtist.

00:06:44.820 --> 00:06:47.430
From there, let's follow the
relationship between a band

00:06:47.430 --> 00:06:50.217
and its home city,
music artist origin.

00:06:50.217 --> 00:06:51.800
This gets us to the
machine identifier

00:06:51.800 --> 00:06:53.240
for the city they're from.

00:06:53.240 --> 00:06:54.810
But there are two of them.

00:06:54.810 --> 00:06:57.270
If we follow the name
relationship again,

00:06:57.270 --> 00:07:01.250
we can find out exactly where
they're from, just by the name.

00:07:01.250 --> 00:07:04.580
And it turns out they're from
Cincinnati in the United States

00:07:04.580 --> 00:07:06.880
and greater
Manchester in the UK.

00:07:06.880 --> 00:07:10.195
Since they collaborate
online, that make sense.

00:07:10.195 --> 00:07:12.445
If you are worried about the
efficiency of JavaScript,

00:07:12.445 --> 00:07:15.710
a cool feature of Cayley is that
when you call a running method,

00:07:15.710 --> 00:07:18.580
like all or get limit,
the query at that point

00:07:18.580 --> 00:07:22.120
is compiled into a go
structure and run natively.

00:07:22.120 --> 00:07:25.070
So what more can we do,
now that we have the band?

00:07:25.070 --> 00:07:26.970
Since graph data
is flexible, we can

00:07:26.970 --> 00:07:29.670
ask for any property
we have for artists.

00:07:29.670 --> 00:07:32.020
If we change the last
query just slightly

00:07:32.020 --> 00:07:35.525
and ask for genre instead,
we get the genres, nerdcore

00:07:35.525 --> 00:07:39.710
and hip hop, that they're
associated with in Freebase.

00:07:39.710 --> 00:07:42.530
Now, if we can do that
for Freebase data,

00:07:42.530 --> 00:07:45.390
let's talk about how we can
combine that with the data

00:07:45.390 --> 00:07:49.160
that Jarek generated and
crawled from his music site.

00:07:49.160 --> 00:07:50.470
The next step is easy.

00:07:50.470 --> 00:07:53.250
We just take the data that
Jarek provided and load it.

00:07:53.250 --> 00:07:55.670
Cayley provides a
generic writer interface,

00:07:55.670 --> 00:07:57.620
but again, it could
as easily be done

00:07:57.620 --> 00:08:00.550
from an external
process over HTTP.

00:08:00.550 --> 00:08:03.680
We get the message that
we've loaded 113 triples.

00:08:03.680 --> 00:08:05.470
In the context of
a music site, that

00:08:05.470 --> 00:08:08.120
might be writing multiple facts
when the artist page is edited,

00:08:08.120 --> 00:08:10.280
for example.

00:08:10.280 --> 00:08:13.310
We have two graphs, and
loading both is easy.

00:08:13.310 --> 00:08:15.440
But how do we know that
the band on Jarek's site

00:08:15.440 --> 00:08:18.490
is the same as a
band in Freebase?

00:08:18.490 --> 00:08:21.350
It's similar to the name
problem earlier, but in reverse.

00:08:21.350 --> 00:08:23.980
We're trying to determine
if one band in one data set

00:08:23.980 --> 00:08:26.040
is the same band in another.

00:08:26.040 --> 00:08:28.540
This is called reconciliation,
and it's an art

00:08:28.540 --> 00:08:31.200
as much as it is a
computer science problem.

00:08:31.200 --> 00:08:33.830
It happens even in conversation.

00:08:33.830 --> 00:08:36.960
I'll mention Sean, and
you'll ask, "Which Sean?"

00:08:36.960 --> 00:08:40.950
And I'll reconcile, "Oh,
Jarek's friend who deejays."

00:08:40.950 --> 00:08:42.659
To help do the same
conversational trick

00:08:42.659 --> 00:08:44.400
for machines, there's
a special link

00:08:44.400 --> 00:08:46.540
called sameAs,
which will tell us

00:08:46.540 --> 00:08:48.560
that a machine
identifier in one graph

00:08:48.560 --> 00:08:51.210
is the exact same
concept in another.

00:08:51.210 --> 00:08:52.920
And fortunately,
Jarek has already

00:08:52.920 --> 00:08:54.830
added these to the
link data on his site,

00:08:54.830 --> 00:08:57.290
so it's just another triple.

00:08:57.290 --> 00:08:58.520
Let's use that.

00:08:58.520 --> 00:09:02.940
Here's the URI that Jarek's site
uses, straight from the web.

00:09:02.940 --> 00:09:04.810
It doesn't have a
Freebase name, either.

00:09:04.810 --> 00:09:06.980
I would try that, but
again, it has information

00:09:06.980 --> 00:09:08.890
that isn't in
Freebase schema yet.

00:09:08.890 --> 00:09:11.360
However, we know it
has a sameAs link,

00:09:11.360 --> 00:09:12.950
so we can follow
that link first,

00:09:12.950 --> 00:09:15.020
which takes us to the
Freebase identifier.

00:09:15.020 --> 00:09:17.960
Exactly the one
we already found.

00:09:17.960 --> 00:09:21.140
Now that we've managed
Jarek's data into our graph,

00:09:21.140 --> 00:09:22.710
it's just the same as before.

00:09:22.710 --> 00:09:24.080
We have a Freebase entity.

00:09:24.080 --> 00:09:26.700
Let's go ahead and find
the genres and hometown

00:09:26.700 --> 00:09:27.570
for the band.

00:09:27.570 --> 00:09:28.960
We copy and paste our thing.

00:09:28.960 --> 00:09:33.600
We change the strings in music
artist origin, and we run it.

00:09:33.600 --> 00:09:35.480
We get exactly the same result.

00:09:35.480 --> 00:09:37.320
We could obviously
do the reverse.

00:09:37.320 --> 00:09:39.240
We could take the genre
and find the entities

00:09:39.240 --> 00:09:41.030
on Jarek's site that
have that genre.

00:09:41.030 --> 00:09:44.041
Or any combination
of fun connections.

00:09:44.041 --> 00:09:45.540
That should give
you a sense of what

00:09:45.540 --> 00:09:47.600
traversing a graph
database feels like.

00:09:47.600 --> 00:09:49.347
Hopefully, it wasn't
too unfamiliar.

00:09:49.347 --> 00:09:51.680
There's a lot more that this
talk is too short to cover,

00:09:51.680 --> 00:09:54.487
but it's all on
the project site.

00:09:54.487 --> 00:09:56.070
So, now that we've
done the hard work,

00:09:56.070 --> 00:09:57.779
next comes my favorite part.

00:09:57.779 --> 00:09:59.320
We get to play with
the data and look

00:09:59.320 --> 00:10:01.580
at the graph in
interesting ways.

00:10:01.580 --> 00:10:05.270
Here's the query from earlier,
Dual Core genres and location.

00:10:05.270 --> 00:10:07.020
With a few extra
tricks for readability,

00:10:07.020 --> 00:10:09.670
we can ask about artists that
are similar to Dual Core.

00:10:09.670 --> 00:10:12.970
That is, have the same
genre and the same location.

00:10:12.970 --> 00:10:14.570
If that seems a
little confusing,

00:10:14.570 --> 00:10:16.610
that's what query shape
helps you look at,

00:10:16.610 --> 00:10:18.860
the overall structure
of your traversals.

00:10:18.860 --> 00:10:20.632
Until now, we've
had straight lines.

00:10:20.632 --> 00:10:23.090
Dual Core through the name,
through the genre, to the name,

00:10:23.090 --> 00:10:23.820
again.

00:10:23.820 --> 00:10:26.150
But here, we see something
that branches off.

00:10:26.150 --> 00:10:27.980
The top node shows
a relationship

00:10:27.980 --> 00:10:30.360
to the band on one side,
through their genre,

00:10:30.360 --> 00:10:33.350
and to the band on the other,
through their city of origin.

00:10:33.350 --> 00:10:35.400
In this way, queries
are composable,

00:10:35.400 --> 00:10:37.750
making it easy to build
complicated relationships out

00:10:37.750 --> 00:10:40.020
of simpler parts.

00:10:40.020 --> 00:10:42.440
But what about the shape
of the graph, itself?

00:10:42.440 --> 00:10:44.440
Can we generate insight
into the music influence

00:10:44.440 --> 00:10:47.070
of an entire city?

00:10:47.070 --> 00:10:48.730
So, this query
may look daunting,

00:10:48.730 --> 00:10:51.640
but it uses exactly the same
schema we've used today.

00:10:51.640 --> 00:10:53.980
Find 1,000 artists,
make sure they're

00:10:53.980 --> 00:10:57.560
from a place named Brooklyn,
and get their genres.

00:10:57.560 --> 00:10:59.900
With the extra source
and target tags in place,

00:10:59.900 --> 00:11:03.090
we can switch to the Visualize
function, which is a simple web

00:11:03.090 --> 00:11:05.560
app using sigma.js
on the client side.

00:11:05.560 --> 00:11:07.670
And when it runs, it
gives us a picture

00:11:07.670 --> 00:11:09.930
of the music graphs in Brooklyn.

00:11:09.930 --> 00:11:12.990
You might notice a significant
East Coast hip hop hub,

00:11:12.990 --> 00:11:16.180
with smaller hubs for rock
and indie rock in the center.

00:11:16.180 --> 00:11:18.080
All of the bands seem
fairly well connected,

00:11:18.080 --> 00:11:20.830
and they cross
genres quite often.

00:11:20.830 --> 00:11:23.290
It's different across
the country, however.

00:11:23.290 --> 00:11:25.530
So, let's take a moment
and re-run the query

00:11:25.530 --> 00:11:29.630
and look into
Oakland, California.

00:11:29.630 --> 00:11:32.530
As it runs, we start to see
there's a great hip hop scene,

00:11:32.530 --> 00:11:34.764
but other bands don't
crossover so much.

00:11:34.764 --> 00:11:37.180
It's a little more stratified,
it's a completely different

00:11:37.180 --> 00:11:40.074
shape, and it's cool
and informative.

00:11:40.074 --> 00:11:41.740
That's just a sampling,
but hopefully it

00:11:41.740 --> 00:11:44.010
sparked your imagination
on how graphs and graph

00:11:44.010 --> 00:11:47.030
data are useful for developers
and can create fascinating apps

00:11:47.030 --> 00:11:50.900
for your users, much as Google
does using the Knowledge Graph.

00:11:50.900 --> 00:11:52.379
Thank you so much for watching.

00:11:52.379 --> 00:11:53.795
Check out the
Cayley project page,

00:11:53.795 --> 00:11:56.390
or play with a smaller
live version on App Engine.

00:11:56.390 --> 00:11:58.990
Or join Jarek for the
next video in this series.

00:11:58.990 --> 00:12:00.950
Have a great day.

