WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.125
[WHOOSH]

00:00:07.125 --> 00:00:08.080
PAUL RASHIDI: Hi.

00:00:08.080 --> 00:00:10.930
My name is Paul Rashidi and I'm
with the Google Cloud Platform

00:00:10.930 --> 00:00:11.600
team.

00:00:11.600 --> 00:00:14.470
Today we're going to discuss
how to build the Hello Endpoints

00:00:14.470 --> 00:00:16.570
Android application
from scratch.

00:00:16.570 --> 00:00:18.180
We'll be helped by
GitHub gist that

00:00:18.180 --> 00:00:20.138
will contain most of the
code we would normally

00:00:20.138 --> 00:00:23.310
write and commented in
as we talk about it.

00:00:23.310 --> 00:00:24.655
So let's get started.

00:00:24.655 --> 00:00:27.030
The first step we'll take is
setting up a Cloud Endpoints

00:00:27.030 --> 00:00:27.780
back end.

00:00:27.780 --> 00:00:29.300
This is actually pretty easy.

00:00:29.300 --> 00:00:31.920
We cloned a Cloud Endpoints
back end sample from GitHub

00:00:31.920 --> 00:00:33.920
like this, but do
note there is also

00:00:33.920 --> 00:00:35.559
a Python version
available as well.

00:00:35.559 --> 00:00:38.100
In order to get the Java back
end running on a local machine,

00:00:38.100 --> 00:00:39.780
we'll perform two steps.

00:00:39.780 --> 00:00:42.580
We'll uncomment a line in
this Maven pom XML file

00:00:42.580 --> 00:00:45.130
to specify that we want
to run on all IP addresses

00:00:45.130 --> 00:00:46.650
on the local machine.

00:00:46.650 --> 00:00:48.470
This will allow our
Android application

00:00:48.470 --> 00:00:50.220
to access the back
end application,

00:00:50.220 --> 00:00:53.510
since will be using an emulator,
which can't access local host.

00:00:53.510 --> 00:00:54.970
The other change
we'll need to make

00:00:54.970 --> 00:00:57.350
is editing the App
Engine Web XML file

00:00:57.350 --> 00:00:59.050
to update the
app's [? vod ID ?].

00:00:59.050 --> 00:01:01.460
Since we won't be deploying
remotely to App Engine,

00:01:01.460 --> 00:01:03.700
this idea is only
affecting the Java package

00:01:03.700 --> 00:01:05.700
name of our generated classes.

00:01:05.700 --> 00:01:08.065
You should use the developer
console to register an ID

00:01:08.065 --> 00:01:09.230
and use that value here.

00:01:13.350 --> 00:01:13.850
Easy enough.

00:01:13.850 --> 00:01:16.170
We'll save and exit.

00:01:16.170 --> 00:01:19.220
So, just to quickly recap-- we
only made these two changes.

00:01:22.220 --> 00:01:23.820
Now, to run this
back end locally,

00:01:23.820 --> 00:01:25.660
we will invoke it via Maven.

00:01:25.660 --> 00:01:28.594
In this command, install is
building our application.

00:01:28.594 --> 00:01:30.260
And the dev server
command is running it

00:01:30.260 --> 00:01:31.902
on our local dev server.

00:01:31.902 --> 00:01:33.360
You should know,
the first time you

00:01:33.360 --> 00:01:35.693
run this command on a machine,
it will take a little bit

00:01:35.693 --> 00:01:38.960
longer than normal because Maven
will download the App Engine

00:01:38.960 --> 00:01:39.849
plugin.

00:01:39.849 --> 00:01:41.390
Now that our server
is running, let's

00:01:41.390 --> 00:01:43.650
take a look at it
in our API Explorer.

00:01:43.650 --> 00:01:46.010
This is very handy if you're
not familiar with an API

00:01:46.010 --> 00:01:47.910
but still want to
play around with it.

00:01:47.910 --> 00:01:49.060
We'll use this URL.

00:01:54.230 --> 00:01:55.560
We'll select our API.

00:01:55.560 --> 00:01:58.710
And we'll run the
list command here.

00:01:58.710 --> 00:02:01.600
We see that our service is
returning two messages-- hello

00:02:01.600 --> 00:02:03.186
world and goodbye world.

00:02:03.186 --> 00:02:04.810
Now that we have a
working test server,

00:02:04.810 --> 00:02:06.110
let's get to the Android app.

00:02:06.110 --> 00:02:08.319
We'll switch to Android
Studio to create our project.

00:02:08.319 --> 00:02:09.693
The first thing
we're going to do

00:02:09.693 --> 00:02:11.991
is create a new Android
application via the New Project

00:02:11.991 --> 00:02:12.490
Wizard.

00:02:12.490 --> 00:02:14.656
We'll adjust some project
names here and then select

00:02:14.656 --> 00:02:16.450
a minimum API level of eight.

00:02:16.450 --> 00:02:18.470
The client libraries
that we will create

00:02:18.470 --> 00:02:19.732
will need this minimum level.

00:02:19.732 --> 00:02:21.190
We'll take the rest
of the defaults

00:02:21.190 --> 00:02:22.380
and create this project.

00:02:22.380 --> 00:02:24.360
I'll speed the video
up a little so you

00:02:24.360 --> 00:02:26.100
don't have to wait
for the initial build.

00:02:30.406 --> 00:02:31.280
And there we have it.

00:02:31.280 --> 00:02:33.125
This is a typical
default Android project

00:02:33.125 --> 00:02:34.980
with a single main activity.

00:02:34.980 --> 00:02:37.080
We'll just close a few
windows and put focus

00:02:37.080 --> 00:02:38.435
on our GitHub gist.

00:02:38.435 --> 00:02:40.060
This gist contains
all the code that we

00:02:40.060 --> 00:02:41.685
are writing during
this tutorial so you

00:02:41.685 --> 00:02:43.740
don't have to watch me type.

00:02:43.740 --> 00:02:46.440
You can access this gist
at the URL on the screen.

00:02:46.440 --> 00:02:47.940
Let's just briefly
look at the files

00:02:47.940 --> 00:02:50.220
before we copy them
into our project.

00:02:50.220 --> 00:02:52.100
First we have an
application.java,

00:02:52.100 --> 00:02:54.330
which we'll use as a way
to store messages retrieved

00:02:54.330 --> 00:02:55.740
from our back end API.

00:02:55.740 --> 00:02:57.820
You will want to use
content provider instead

00:02:57.820 --> 00:02:59.360
of a global variable like this.

00:02:59.360 --> 00:03:01.470
But we're doing this for
sample code simplicity.

00:03:01.470 --> 00:03:03.700
The next file is the
main activity file.

00:03:03.700 --> 00:03:06.170
All the code pertaining to
connecting to the back end API

00:03:06.170 --> 00:03:07.430
is commented out.

00:03:07.430 --> 00:03:08.930
The code that is
not commented out

00:03:08.930 --> 00:03:10.710
implements a simple
list adapter that

00:03:10.710 --> 00:03:13.420
will let us display messages
on the screen retrieved

00:03:13.420 --> 00:03:15.560
from the back end API.

00:03:15.560 --> 00:03:18.200
The next XML file defines
the GUI for the app.

00:03:18.200 --> 00:03:20.750
We'll preview this in a minute.

00:03:20.750 --> 00:03:22.360
This file contains
a snippet of Gradle

00:03:22.360 --> 00:03:24.790
dependencies we'll use to
compliment our client library

00:03:24.790 --> 00:03:25.470
classes.

00:03:25.470 --> 00:03:27.185
This final file is
a simple move script

00:03:27.185 --> 00:03:29.310
that will move these files
into the right locations

00:03:29.310 --> 00:03:31.340
in our sample project.

00:03:31.340 --> 00:03:33.300
So now we'll flip over
to a new terminal window

00:03:33.300 --> 00:03:34.830
and download this gist.

00:03:34.830 --> 00:03:37.960
We'll also enable permissions
and execute our move script.

00:03:37.960 --> 00:03:40.577
And now the files we
reviewed are in our project.

00:03:40.577 --> 00:03:42.410
We'll first take a look
at the main activity

00:03:42.410 --> 00:03:44.535
code we glossed over before.

00:03:44.535 --> 00:03:45.910
You can see the
import statements

00:03:45.910 --> 00:03:48.050
for the client library
are throwing an error.

00:03:48.050 --> 00:03:50.330
That's because we need to
generate our client library.

00:03:50.330 --> 00:03:52.050
Let's do that now.

00:03:52.050 --> 00:03:55.420
To do this, we'll flip back
to our terminal window.

00:03:55.420 --> 00:03:58.140
We'll stop our back
end API server.

00:03:58.140 --> 00:04:00.880
And we'll run this
endpoints_get_client_lib goal

00:04:00.880 --> 00:04:02.910
via Maven.

00:04:02.910 --> 00:04:05.370
This will generate
the client library.

00:04:05.370 --> 00:04:07.960
Next we'll move the zip file
continuing the generated Java

00:04:07.960 --> 00:04:11.090
classes to our
current directory.

00:04:11.090 --> 00:04:13.890
Then we'll unzip it and move it
to our Android product source

00:04:13.890 --> 00:04:14.390
directory.

00:04:17.810 --> 00:04:21.720
Then we'll restart our
local back end API server.

00:04:21.720 --> 00:04:23.345
We'll now switch back
to Android Studio

00:04:23.345 --> 00:04:26.550
and reference this Gradle
build file dependency snippet.

00:04:26.550 --> 00:04:29.110
We're going to copy this and
paste it into the build Gradle

00:04:29.110 --> 00:04:30.154
file for our project.

00:04:30.154 --> 00:04:31.570
This will put all
the dependencies

00:04:31.570 --> 00:04:33.030
that the generated
client library

00:04:33.030 --> 00:04:36.787
code needs into our project
so that we can build and run.

00:04:36.787 --> 00:04:38.870
We'll now save and force
a rebuild of the project.

00:04:49.710 --> 00:04:51.640
If you still have some
unresolved imports,

00:04:51.640 --> 00:04:54.241
you likely need to run the sync
project with Gradle function

00:04:54.241 --> 00:04:54.740
here.

00:04:59.846 --> 00:05:01.970
Next, we're going to look
at the GUI layout that we

00:05:01.970 --> 00:05:03.390
that we received from our gist.

00:05:03.390 --> 00:05:05.250
It's a simple layout
with a simple button

00:05:05.250 --> 00:05:08.010
for our back end for
each of the API methods.

00:05:08.010 --> 00:05:10.560
First, we can get
a message by ID.

00:05:10.560 --> 00:05:13.730
You'll notice we use the onclick
attribute to dynamically invoke

00:05:13.730 --> 00:05:15.490
methods in our code.

00:05:15.490 --> 00:05:17.600
Next, we have a button
to list all the greetings

00:05:17.600 --> 00:05:19.150
on the server.

00:05:19.150 --> 00:05:21.010
Here we have a send
greeting button,

00:05:21.010 --> 00:05:23.350
which maps to the multiply
message on the back end.

00:05:23.350 --> 00:05:25.330
Finally, in this UI,
you'll notice a list view

00:05:25.330 --> 00:05:28.130
at the bottom, which we'll
use to display our messages.

00:05:28.130 --> 00:05:29.630
You probably also
noticed the Sign

00:05:29.630 --> 00:05:32.290
In button and the
Authenticated Message buttons.

00:05:32.290 --> 00:05:34.047
We won't talk about
those in this video.

00:05:34.047 --> 00:05:35.505
But full details
are in the read me

00:05:35.505 --> 00:05:37.390
as a full sample
code I referenced

00:05:37.390 --> 00:05:38.790
at the beginning of the video.

00:05:38.790 --> 00:05:41.710
We'll now close this and go
back to our main activity code.

00:05:41.710 --> 00:05:43.900
The first code we're
going to comment in

00:05:43.900 --> 00:05:46.580
is the onclick list
greeting method.

00:05:46.580 --> 00:05:48.560
This method is invoked
when the List Greetings

00:05:48.560 --> 00:05:51.410
button is clicked on the
GUI we just looked at.

00:05:51.410 --> 00:05:54.400
You'll see we're using an
anonymously defined AsyncTask

00:05:54.400 --> 00:05:57.070
to make our back end API calls.

00:05:57.070 --> 00:05:58.940
On that background
thread, we are first

00:05:58.940 --> 00:06:02.870
getting a handle to our back
end API via this utility method.

00:06:02.870 --> 00:06:05.440
We'll then create a list
greeting command object.

00:06:05.440 --> 00:06:09.450
And we immediately invoke
it to retrieve a greeting.

00:06:09.450 --> 00:06:12.950
We pass the retrieve greeting
back from the method.

00:06:12.950 --> 00:06:16.180
And then it's passed back to
us in the onPostExecute method

00:06:16.180 --> 00:06:18.520
right here.

00:06:18.520 --> 00:06:20.560
In this method, we'll
use the Display Greetings

00:06:20.560 --> 00:06:23.624
utility to display it in our UI.

00:06:23.624 --> 00:06:25.665
This line of code then
kicks off this anonymously

00:06:25.665 --> 00:06:29.020
defined AsyncTask
without any parameters.

00:06:29.020 --> 00:06:31.340
We'll next uncomment
onclick get greeting

00:06:31.340 --> 00:06:33.410
to implement get greeting
button functionality.

00:06:33.410 --> 00:06:35.460
This looks the same as
before, except we're

00:06:35.460 --> 00:06:38.380
getting the greeting ID
parameter from the UI here.

00:06:38.380 --> 00:06:41.810
We format it for
use in our API call.

00:06:41.810 --> 00:06:44.240
And then we use the
AsyncTask here again.

00:06:44.240 --> 00:06:46.340
Finally, we'll
comment in the onclick

00:06:46.340 --> 00:06:49.109
send greetings method to
implement the last button.

00:06:49.109 --> 00:06:50.900
The only real difference
here is that we're

00:06:50.900 --> 00:06:55.815
pulling two parameters from the
UI instead of one, as before.

00:06:55.815 --> 00:06:57.690
Now, we'll take a look
at some of the utility

00:06:57.690 --> 00:06:58.980
code we used above.

00:06:58.980 --> 00:07:00.490
This first method
is the one we used

00:07:00.490 --> 00:07:02.837
to get a handle to
our back end API.

00:07:02.837 --> 00:07:04.295
We're constructing
a builder object

00:07:04.295 --> 00:07:07.310
that was supplied by the
generated API classes.

00:07:07.310 --> 00:07:09.960
We are using two class variables
here to construct our builder.

00:07:09.960 --> 00:07:11.450
Let's comment those in above.

00:07:11.450 --> 00:07:14.350
As you can see, we're commenting
in Android compatible JSON

00:07:14.350 --> 00:07:17.200
factory and an HTTP transport.

00:07:17.200 --> 00:07:18.975
Let's scroll back down.

00:07:18.975 --> 00:07:20.600
In this builder, we
have the capability

00:07:20.600 --> 00:07:22.860
of providing a
different root URI.

00:07:22.860 --> 00:07:25.340
This is a handy way of
redirecting your client library

00:07:25.340 --> 00:07:28.360
to point to your local
development or testing servers.

00:07:28.360 --> 00:07:30.850
We're going to do that right
now with my IP address.

00:07:30.850 --> 00:07:33.190
This is so any API
calls we make will

00:07:33.190 --> 00:07:34.820
go against my local
development server

00:07:34.820 --> 00:07:36.940
from the Android emulator.

00:07:36.940 --> 00:07:38.480
The final code we'll
comment in here

00:07:38.480 --> 00:07:39.950
is the Display Greetings method.

00:07:39.950 --> 00:07:42.040
This method simply
updates our list adapter

00:07:42.040 --> 00:07:44.070
to display the
greetings passed to it.

00:07:44.070 --> 00:07:46.490
Again, you typically want
to use content providers

00:07:46.490 --> 00:07:48.480
to store and provide
data to list adapters.

00:07:48.480 --> 00:07:50.550
But we are simplifying
this sample code.

00:07:50.550 --> 00:07:52.290
The code down here
is the list adapter

00:07:52.290 --> 00:07:55.350
we saw earlier in the
GitHub gist, nothing new.

00:07:55.350 --> 00:07:57.810
We're close to being
finished, I promise.

00:07:57.810 --> 00:07:59.310
Next, we'll add
internet permissions

00:07:59.310 --> 00:08:02.850
to our Android manifest file.

00:08:02.850 --> 00:08:06.370
We'll adjust our UI style to be
dark instead of the light one.

00:08:06.370 --> 00:08:08.220
This will make our
content a little bit more

00:08:08.220 --> 00:08:10.970
visible when we run
it in the emulator.

00:08:10.970 --> 00:08:12.080
We're about done.

00:08:12.080 --> 00:08:14.210
Let's go ahead and
start an emulator.

00:08:14.210 --> 00:08:16.430
We click here and
create an emulator.

00:08:16.430 --> 00:08:19.530
Any will do unless you've added
authentication to your API.

00:08:19.530 --> 00:08:22.200
And in that case, you would
need to select a Google APIs

00:08:22.200 --> 00:08:22.700
emulator.

00:08:25.510 --> 00:08:26.980
We'll start this emulator.

00:08:26.980 --> 00:08:29.440
And I'll scale it so that
it fits on the screen.

00:08:29.440 --> 00:08:31.600
Remember to utilize the
accelerator extension

00:08:31.600 --> 00:08:34.700
in the SDK manager if it is
available for your development

00:08:34.700 --> 00:08:35.684
platform.

00:08:35.684 --> 00:08:37.850
OK, now that we're up and
running with the emulator,

00:08:37.850 --> 00:08:39.870
let's make one last change.

00:08:39.870 --> 00:08:41.740
We need to define our
custom application

00:08:41.740 --> 00:08:43.580
class in our Android manifest.

00:08:43.580 --> 00:08:45.630
I'll do that really quick here.

00:08:45.630 --> 00:08:47.220
And then we'll deploy
to our emulator.

00:08:51.630 --> 00:08:52.130
Whoo.

00:08:52.130 --> 00:08:53.320
It's running.

00:08:53.320 --> 00:08:53.820
Alright.

00:08:53.820 --> 00:08:55.850
The first thing we'll
test is list greeting.

00:08:55.850 --> 00:08:57.230
We click the button.

00:08:57.230 --> 00:08:59.920
And we can see hello and
goodbye world messages.

00:08:59.920 --> 00:09:01.410
These are the same
messages we saw

00:09:01.410 --> 00:09:03.810
when we used the
API explorer before.

00:09:03.810 --> 00:09:07.850
Now, we'll test get greeting
by putting in an index of zero.

00:09:07.850 --> 00:09:09.630
And it returns the
correct hello world

00:09:09.630 --> 00:09:11.420
greeting from the back end API.

00:09:11.420 --> 00:09:15.230
The ID of 1 returns the goodbye
greeting correctly as well.

00:09:15.230 --> 00:09:18.500
Then we'll test send greetings
by putting in a text message

00:09:18.500 --> 00:09:21.130
and specify that it needs
to be repeated three times.

00:09:24.690 --> 00:09:26.200
And the back end
API successfully

00:09:26.200 --> 00:09:28.290
returned our message
here as well.

00:09:28.290 --> 00:09:29.340
Well, that's about it.

00:09:29.340 --> 00:09:30.300
Our tests are working.

00:09:30.300 --> 00:09:32.500
And our new Android
application is communicating

00:09:32.500 --> 00:09:34.737
with an API we're running
on our local server.

00:09:34.737 --> 00:09:36.320
I want to thank you
all for your time.

00:09:36.320 --> 00:09:38.360
The Google Cloud Platform
Team looks forward

00:09:38.360 --> 00:09:39.610
to seeing what you
build with this.

00:09:39.610 --> 00:09:41.485
And we look forward to
your feedback as well.

00:09:41.485 --> 00:09:43.150
Thanks.

00:09:43.150 --> 00:09:48.996
[WHOOSH]

