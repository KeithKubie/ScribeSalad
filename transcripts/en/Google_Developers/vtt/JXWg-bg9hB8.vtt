WEBVTT
Kind: captions
Language: en

00:00:01.033 --> 00:00:02.734
Gundrota: As much as we love
web apps,

00:00:02.734 --> 00:00:04.734
they don't work
in many situations

00:00:04.734 --> 00:00:06.234
when you lose connectivity

00:00:06.234 --> 00:00:08.100
or have intermittent
connectivity.

00:00:08.100 --> 00:00:09.567
And there are a lot
of scenarios

00:00:09.567 --> 00:00:11.834
that we wish our web apps
could work.

00:00:11.834 --> 00:00:14.501
One of the challenges
is that there's no local storage

00:00:14.501 --> 00:00:18.667
and no way to store
the application state or code.

00:00:18.667 --> 00:00:20.267
That is until recently.

00:00:20.267 --> 00:00:23.534
What the HTML 5 standards
of Database and App Cache

00:00:23.534 --> 00:00:26.868
allow you do is really approach
the problem of offline,

00:00:26.868 --> 00:00:29.467
or even
in the online scenario,

00:00:29.467 --> 00:00:31.934
store and cache
the resources you need

00:00:31.934 --> 00:00:34.100
for a faster application.

00:00:34.100 --> 00:00:36.601
Let's show you
how this works.

00:00:36.601 --> 00:00:38.567
Let's go
into the first demo.

00:00:38.567 --> 00:00:39.968
First demo, I'm in Safari,

00:00:39.968 --> 00:00:41.701
I've got a little app,
it creates a sticky note,

00:00:41.701 --> 00:00:44.801
and I can, uh, you know,
create some sort of data.

00:00:44.801 --> 00:00:46.267
And if we go
into the developer tool here,

00:00:46.267 --> 00:00:48.634
inspect the element,
go into the Database,

00:00:48.634 --> 00:00:49.767
you'll see that sure enough,

00:00:49.767 --> 00:00:52.000
the notes I'm writing
are pushed down

00:00:52.000 --> 00:00:54.334
into that SQLite
database.

00:00:54.334 --> 00:00:57.400
But let's lose
the connection.

00:00:57.400 --> 00:01:00.100
Okay. No connection.
No Ethernet connection.

00:01:00.100 --> 00:01:02.167
Can you go to google.com?

00:01:04.300 --> 00:01:06.767
Okay, good. My favorite web site
is inaccessible.

00:01:06.767 --> 00:01:08.834
We really are offline.

00:01:08.834 --> 00:01:11.334
Let's try creating another note.

00:01:11.334 --> 00:01:12.934
Okay, so the note
continues to work.

00:01:12.934 --> 00:01:14.400
The JavaScript's all there.

00:01:14.400 --> 00:01:17.467
Uh, the data is being pushed
into the SQL database.

00:01:17.467 --> 00:01:19.033
Now you must be wondering, okay,

00:01:19.033 --> 00:01:20.501
you got the data
in the database,

00:01:20.501 --> 00:01:22.133
but where is the app?

00:01:22.133 --> 00:01:23.534
Well, let's look
at the manifest

00:01:23.534 --> 00:01:26.934
because the standard points us
to a way to actually, uh,

00:01:26.934 --> 00:01:29.667
have pointers into
the storage system which high--

00:01:29.667 --> 00:01:32.167
which, uh, point to where
the code is, the JavaScript code

00:01:32.167 --> 00:01:34.200
and the other resources
that you need.

00:01:34.200 --> 00:01:37.701
And so there you can see where
the JavaScript CSS images,

00:01:37.701 --> 00:01:39.067
uh, and other things are stored

00:01:39.067 --> 00:01:40.934
so that when you're
in an offline state,

00:01:40.934 --> 00:01:43.100
well, you can rehydrate
all those resources,

00:01:43.100 --> 00:01:45.534
and the app just works.

00:01:45.534 --> 00:01:49.400
Let's show you
a more advanced example.

00:01:49.400 --> 00:01:51.701
This is an Android phone,

00:01:51.701 --> 00:01:55.167
and what you're looking at
here on Android is Gmail.

00:01:55.167 --> 00:01:57.400
It's really, really rich Gmail.

00:01:57.400 --> 00:01:58.868
You can see the colored labels,

00:01:58.868 --> 00:02:00.367
for those of you
who are Gmail users,

00:02:00.367 --> 00:02:01.934
you've come to know and love.

00:02:01.934 --> 00:02:03.634
Um, as Matt moves around,

00:02:03.634 --> 00:02:06.968
you see that floating toolbar
that moves with him--

00:02:06.968 --> 00:02:09.000
that's all implemented, uh,
in this particular app,

00:02:09.000 --> 00:02:10.167
and it's very, very fast.

00:02:10.167 --> 00:02:11.968
You click a message,
it opens up.

00:02:11.968 --> 00:02:13.634
Here's the kicker.

00:02:13.634 --> 00:02:16.167
Look at the top of the screen.

00:02:16.167 --> 00:02:18.434
This is an Android device
that's in offline mode.

00:02:18.434 --> 00:02:20.167
It has no connectivity.

00:02:20.167 --> 00:02:22.734
In fact, what you're
looking at is a web app,

00:02:22.734 --> 00:02:24.667
utilizing the great
new capabilities

00:02:24.667 --> 00:02:27.133
of the Android browser
to have support

00:02:27.133 --> 00:02:29.167
for these HTML 5 standards.

00:02:29.167 --> 00:02:32.501
This particular app, Gmail
on Android or on the iPhone,

00:02:32.501 --> 00:02:34.000
is already shipping.

00:02:34.000 --> 00:02:37.801
In fact, it's Google's
first big HTML 5 app,

00:02:37.801 --> 00:02:40.234
and really demonstrates
the power of what's possible.

00:02:40.234 --> 00:02:43.367
And as these phones get faster,
these web apps

00:02:43.367 --> 00:02:45.334
just get better
and better and better.

00:02:45.334 --> 00:02:47.267
Whether it be better
JavaScript performance,

00:02:47.267 --> 00:02:49.167
or the CPU of the phone
gets better,

00:02:49.167 --> 00:02:51.100
or the network connectivity
gets faster,

00:02:51.100 --> 00:02:53.267
these really become
more and more capable,

00:02:53.267 --> 00:02:57.634
and another example of Google
moving towards HTML 5.

00:02:57.634 --> 00:03:01.934
Okay, let's go back to slides.

00:03:01.934 --> 00:03:04.968
Of course, we're not the only
company who's, uh--who's--

00:03:04.968 --> 00:03:07.133
really has invested in the web.

00:03:07.133 --> 00:03:09.467
Another company that has
pivoted their strategy

00:03:09.467 --> 00:03:11.801
around an
open web platform is Palm.

00:03:11.801 --> 00:03:14.868
And to talk about that,
I'd like to invite up Michael.

00:03:14.868 --> 00:03:16.434
Michael Abbott,
Senior Vice President of Palm.

00:03:16.434 --> 00:03:17.701
Welcome Michael.

00:03:17.701 --> 00:03:19.267
Michael and Greg.

00:03:19.267 --> 00:03:23.367
Gonna talk about this, yes.

00:03:23.367 --> 00:03:24.400
Abbott: Thanks a lot, Vic.

00:03:24.400 --> 00:03:26.734
Uh, good morning
to everyone here.

00:03:26.734 --> 00:03:29.334
Um, I think that, uh,
one of the interesting things

00:03:29.334 --> 00:03:30.701
that I was thinking about
yesterday is that

00:03:30.701 --> 00:03:32.901
if it was a year ago,
and you were at this conference,

00:03:32.901 --> 00:03:34.701
I'm not too sure many of you
would've predicted

00:03:34.701 --> 00:03:37.400
that Palm would be at stage
here at Google I/O.

00:03:37.400 --> 00:03:41.167
And, uh, one of the key things
I think why we're here

00:03:41.167 --> 00:03:43.133
is that we share
a very common vision.

00:03:43.133 --> 00:03:44.400
Or a similar vision.

00:03:44.400 --> 00:03:47.000
And that is indeed that the web
is really the platform.

00:03:47.000 --> 00:03:50.567
And as we step back in time
from when we were designing

00:03:50.567 --> 00:03:53.467
and architecting webOS,
we were thinking through,

00:03:53.467 --> 00:03:55.767
how could we actually
enable developers

00:03:55.767 --> 00:03:58.801
to have a program model
that we're used to,

00:03:58.801 --> 00:04:00.901
but at the same time
offer access to both

00:04:00.901 --> 00:04:03.968
services in the cloud
as well as on the device?

00:04:03.968 --> 00:04:07.067
And so what we did was
we have built up a platform

00:04:07.067 --> 00:04:09.934
with the browser as really
the core construct.

00:04:09.934 --> 00:04:12.467
And more concretely,
actually using WebKit

00:04:12.467 --> 00:04:15.234
as the core rendering engine
in WebOS.

00:04:15.234 --> 00:04:16.834
So all of the core applications

00:04:16.834 --> 00:04:19.667
that are built
as a part of WebOS--

00:04:19.667 --> 00:04:22.100
mail, contacts, and calendar--

00:04:22.100 --> 00:04:25.734
are all built in HTML,
CSS, and JavaScript

00:04:25.734 --> 00:04:29.000
as applications on--
in this environment.

00:04:29.000 --> 00:04:30.400
So if you look
at a little more details

00:04:30.400 --> 00:04:32.467
of what one of these
applications really look like,

00:04:32.467 --> 00:04:34.834
you can see that
we have an HTML page

00:04:34.834 --> 00:04:37.300
that defines a layout
of the application,

00:04:37.300 --> 00:04:40.167
we have JavaScript that--
which can define transitions,

00:04:40.167 --> 00:04:43.033
animations,
access storage on the device,

00:04:43.033 --> 00:04:45.868
and we might use CSS
to style the applications.

00:04:45.868 --> 00:04:47.501
Now, for developers we have

00:04:47.501 --> 00:04:49.601
a framework called
the Mojo framework

00:04:49.601 --> 00:04:52.567
that allows you to style
applications in beautiful ways

00:04:52.567 --> 00:04:54.734
and at the same time
be very performate.

00:04:54.734 --> 00:04:57.834
Now, with this program model
that we're offering,

00:04:57.834 --> 00:05:00.267
certainly standards
is really important to us,

00:05:00.267 --> 00:05:04.801
and HTML 5 is a really
key aspect of WebOS 1.0.

00:05:04.801 --> 00:05:07.133
And so we're gonna show you
just a couple quick demos

00:05:07.133 --> 00:05:10.534
of how we've actually
deployed and leveraged HTML 5

00:05:10.534 --> 00:05:14.234
in the initial version
of the platform.

00:05:14.234 --> 00:05:16.067
So we'll switch over.

00:05:16.067 --> 00:05:17.934
So, the first thing
I'm gonna show you

00:05:17.934 --> 00:05:21.100
is just an example of the canvas
tag in our calendar application.

00:05:21.100 --> 00:05:22.434
You can see the way
we're using it

00:05:22.434 --> 00:05:24.501
is to actually get really
high-performance scrolling

00:05:24.501 --> 00:05:27.167
as Greg actually scrolls
up and down in the day view.

00:05:27.167 --> 00:05:28.968
So that's just
one example there.

00:05:28.968 --> 00:05:32.767
And this example we're gonna
show you is CSS transformations.

00:05:32.767 --> 00:05:34.968
So this is in our
music application,

00:05:34.968 --> 00:05:37.167
and you can see that we're
using CSS transformations

00:05:37.167 --> 00:05:38.968
to rotate the album art.

00:05:38.968 --> 00:05:40.200
Again, this application

00:05:40.200 --> 00:05:44.400
is all built in HTML,
CSS, and JavaScript.

00:05:44.400 --> 00:05:46.133
And the last example
I'm gonna show you

00:05:46.133 --> 00:05:48.067
is with HTML 5 database.

00:05:48.067 --> 00:05:50.467
And we're using
that HTML 5 database

00:05:50.467 --> 00:05:55.300
as a mechanism to store user's
history as well as browsers.

00:05:55.300 --> 00:05:58.100
Now, within this
development environment,

00:05:58.100 --> 00:06:00.801
there's a set of services
that are on the device--

00:06:00.801 --> 00:06:03.501
uh, we'll get to the next slide.

00:06:03.501 --> 00:06:05.667
That we want to offer
and expose up,

00:06:05.667 --> 00:06:08.334
from the hardware
in this particular case,

00:06:08.334 --> 00:06:10.634
into that development
environment.

00:06:10.634 --> 00:06:13.067
And the Accelerometer
is one of these extensions

00:06:13.067 --> 00:06:15.133
that we'd like to see in HTML 5.

00:06:15.133 --> 00:06:17.734
What we've done is offered up
various events

00:06:17.734 --> 00:06:19.701
into that JavaScript run time

00:06:19.701 --> 00:06:23.767
so, for example, events around
shaking, acceleration,

00:06:23.767 --> 00:06:27.200
and orientation,
and expose those events up

00:06:27.200 --> 00:06:30.567
through a DOM Level 2 interface
into JavaScript.

00:06:30.567 --> 00:06:33.634
Now, there are certainly
other types of events like this

00:06:33.634 --> 00:06:35.534
that--as a result
of that deep integration

00:06:35.534 --> 00:06:36.868
between the software
and hardware--

00:06:36.868 --> 00:06:38.200
makes a lotta sense,

00:06:38.200 --> 00:06:41.200
certainly for the mobile
computing platform,

00:06:41.200 --> 00:06:42.567
and that's actually
one of the key things that--

00:06:42.567 --> 00:06:44.834
that we're interested
in working with you on over time

00:06:44.834 --> 00:06:48.434
which is how do we actually
really bring in both the mobile

00:06:48.434 --> 00:06:51.234
and the desktop development
environments together.

00:06:51.234 --> 00:06:54.601
If you look at an example
of how we're actually doing

00:06:54.601 --> 00:06:56.701
this type of integration
of the applications

00:06:56.701 --> 00:06:59.000
using these accelerometer API,

00:06:59.000 --> 00:07:02.067
you can see that
we define a set of events,

00:07:02.067 --> 00:07:05.000
and then you as a developer
can go and define

00:07:05.000 --> 00:07:06.434
the handling of those events.

00:07:06.434 --> 00:07:09.334
So depending on how you want
to leverage the accelerometer

00:07:09.334 --> 00:07:12.400
in your application, it's very
simple to access these events

00:07:12.400 --> 00:07:13.834
and leverage these within

00:07:13.834 --> 00:07:18.133
that JavaScript
programming environment.

00:07:18.133 --> 00:07:20.934
So again, what we see
for HTML 5 and WebOS

00:07:20.934 --> 00:07:25.133
is really a key convergent point
between the mobile platform

00:07:25.133 --> 00:07:26.767
and the desktop platform,

00:07:26.767 --> 00:07:29.234
and we're very interested
in working with you over time

00:07:29.234 --> 00:07:32.801
to extend all the various
events and access services

00:07:32.801 --> 00:07:35.701
from these hardware platforms
into this run time.

00:07:35.701 --> 00:07:37.234
Thank you.

00:07:37.234 --> 00:07:39.801
[applause]

00:07:39.801 --> 00:07:43.934
Gundrota: Thank you. Thank you.

00:07:43.934 --> 00:07:46.200
Okay, App Cache, Database--

00:07:46.200 --> 00:07:50.701
broadly adopted today
in these browsers.

00:07:50.701 --> 00:07:52.334
Finally, let me talk
about Web Workers.

00:07:52.334 --> 00:07:54.534
You know, as the web
becomes more powerful,

00:07:54.534 --> 00:07:56.434
and you build better
and better apps

00:07:56.434 --> 00:07:58.367
that become richer and bigger,

00:07:58.367 --> 00:08:00.234
uh, you do run
into some problems.

00:08:00.234 --> 00:08:03.434
Problems that native
applications have solved.

00:08:03.434 --> 00:08:06.033
For example, any of you
who've written applications

00:08:06.033 --> 00:08:07.934
with large amounts of JavaScript

00:08:07.934 --> 00:08:10.400
understand the challenge
of having the UI freeze

00:08:10.400 --> 00:08:12.300
as you do JavaScript parsing.

00:08:12.300 --> 00:08:14.367
It's not pretty.

00:08:14.367 --> 00:08:15.934
but unfortunately
it's unavoidable

00:08:15.934 --> 00:08:18.100
as your JavaScript
gets larger and larger.

00:08:18.100 --> 00:08:20.133
How do we solve this problem?

00:08:20.133 --> 00:08:21.734
Well, in a native application,

00:08:21.734 --> 00:08:24.534
you could spawn
a background thread.

00:08:24.534 --> 00:08:26.767
You could, uh, have
background processing.

00:08:26.767 --> 00:08:28.868
And that's exactly
what the HTML 5 standard

00:08:28.868 --> 00:08:30.534
of web workers allows you to do.

00:08:30.534 --> 00:08:31.901
Let me show you some demos.

00:08:31.901 --> 00:08:35.100
Let's move over to screen one.
There we go.

00:08:35.100 --> 00:08:37.601
This particular example
just calculates, um,

00:08:37.601 --> 00:08:38.934
some prime numbers.

00:08:38.934 --> 00:08:41.367
And so we've got a couple
of tabs open there.

00:08:41.367 --> 00:08:43.267
You can see we've got
the &lt;i&gt;New York Times&lt;/i&gt; and so forth.

00:08:43.267 --> 00:08:45.000
Uh, Matt, why don't you go ahead
and start the demo?

00:08:45.000 --> 00:08:47.434
And now try clicking
on another tab.

00:08:47.434 --> 00:08:50.300
Uh, exactly.

00:08:50.300 --> 00:08:53.601
So the JavaScript parsing
is completely hosing

00:08:53.601 --> 00:08:55.734
not only the tab--
the UI of the tab--

00:08:55.734 --> 00:08:57.701
but as well as
the rest of the browser.

00:08:57.701 --> 00:08:59.968
Let's redo that demo.

00:08:59.968 --> 00:09:02.801
This time let's look
at the source.

00:09:02.801 --> 00:09:04.634
Same demo, but look
at the source.

00:09:04.634 --> 00:09:06.200
We made a change.

00:09:06.200 --> 00:09:08.067
And you see there
Matt highlighting the use

00:09:08.067 --> 00:09:11.400
of the background processing
via the Web Worker.

00:09:11.400 --> 00:09:13.801
Let's run that same app again.

00:09:13.801 --> 00:09:15.834
Number one, the UI
is responsive,

00:09:15.834 --> 00:09:17.567
the other tabs are responsive,

00:09:17.567 --> 00:09:19.634
and it all just works.

00:09:19.634 --> 00:09:21.033
Right? New capability.

00:09:21.033 --> 00:09:23.701
Background processing
in the browser from JavaScript.

00:09:23.701 --> 00:09:25.267
That's just really,
really great.

00:09:25.267 --> 00:09:26.601
Let me--

00:09:26.601 --> 00:09:30.868
[applause]

00:09:30.868 --> 00:09:32.033
Hold your applause.

00:09:32.033 --> 00:09:34.133
If you like that,
wait 'til you see this.

00:09:34.133 --> 00:09:36.100
Uh, this demo is my favorite.

00:09:36.100 --> 00:09:39.901
Okay, it's using the canvas tag
to place the boxes,

00:09:39.901 --> 00:09:42.300
it's using the video tag
to play the video,

00:09:42.300 --> 00:09:45.200
it's using JavaScript
and Web Workers

00:09:45.200 --> 00:09:46.834
to run some
background processing.

00:09:46.834 --> 00:09:48.634
Let me tell you
what's gonna happen.

00:09:48.634 --> 00:09:51.000
We're gonna start the video,
and you're gonna see a lady

00:09:51.000 --> 00:09:53.000
walk by the vi--on the video.

00:09:53.000 --> 00:09:56.467
JavaScript is gonna run
and do motion detection,

00:09:56.467 --> 00:09:57.734
and then draw via canvas
a bounding box around the object

