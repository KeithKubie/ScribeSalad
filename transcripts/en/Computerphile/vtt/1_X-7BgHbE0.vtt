WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:06.000
We've, I think, done about five, or maybe
even six, videos counting the Extra Bits

00:00:06.000 --> 00:00:11.790
in this area of Information Theory and a
little bit of Coding Theory. We got

00:00:11.790 --> 00:00:17.279
to a reasonably good state with this
but the story needs finishing off. So I'd

00:00:17.279 --> 00:00:22.260
like to finish off the story and go back
to our old example of San Francisco weather

00:00:22.260 --> 00:00:29.039
states. I'll try and make this completely
understandable in a free-standing way

00:00:29.039 --> 00:00:33.570
but if you do get a bit lost go to the
playlist and just catch up with the bits

00:00:33.570 --> 00:00:37.200
and pieces that you're not quite sure about. 
&lt;Error correction video&gt; What we've done here 
is split them

00:00:37.200 --> 00:00:41.610
up into four good codes that are
meaningful and four bad ones ....
&lt;/Error Correction video&gt;

00:00:41.610 --> 00:00:47.460
We've been working, for ages now, with this very
accurate model of San Francisco weather :-)

00:00:47.460 --> 00:00:51.870
that it's either foggy, sunny, cloudy or
rainy. And you get about twenty five

00:00:51.870 --> 00:00:55.800
percent of each of those states, so the
probability [of each of them] is a quarter.

00:00:55.800 --> 00:01:07.020
It's a two-bit code: foggy 00, sunny 01,
cloudy 10, rainy 11. Fine. Four states, four

00:01:07.020 --> 00:01:12.720
different bit-patterns. Two bits needed. What
we, I think, then did, right at the very

00:01:12.720 --> 00:01:17.549
end, was this:  what happens if you get a
disturbance - electrical disturbance - on

00:01:17.549 --> 00:01:22.740
the line which either turns a 0 into a
1 or a 1 into a 0 ?

00:01:22.740 --> 00:01:27.780
Now, this is a good stage at which to say
something which I've never actually

00:01:27.780 --> 00:01:33.960
emphasised before. We're assuming what
Claude Shannon calls a "symmetric channel"

00:01:33.960 --> 00:01:40.259
In other words there is as ....  if a bit gets
clobbered it could be a zero turning

00:01:40.259 --> 00:01:45.990
into a one, or it could be a one turning into a
zero. But if that happens it's equally

00:01:45.990 --> 00:01:51.000
probably either way. In other words there's 
nothing about a 1-bit that makes it different

00:01:51.000 --> 00:01:55.710
from a zero bit - in terms of its noise
immunity. So it's a binary symmetric

00:01:55.710 --> 00:02:02.270
channel. We said, all right let us add a
third bit to these two-bit codes

00:02:02.270 --> 00:02:07.429
And let us keep what's called the overall parity
even.  In other words there must  have been an even

00:02:07.429 --> 00:02:11.330
number of ones.
So here we go, look, what could you add to

00:02:11.330 --> 00:02:17.300
two 0s as a third bit on the right and
still keep it even parity? Well, it's even

00:02:17.300 --> 00:02:23.780
parity already so you can add a 0 If
you send three bits then so long as they

00:02:23.780 --> 00:02:29.900
arrive looking like one of these patterns, that's 
fine. But then you get things like: "Oh well

00:02:29.900 --> 00:02:38.840
suppose at Sacramento they get 010
- that's not one of these four!"

00:02:38.840 --> 00:02:44.000
So what does 010 tell you? Well, it tells you
that something went wrong because it's

00:02:44.000 --> 00:02:50.120
not in the allowed set! But the problem
is there's no end of ways that 010 could

00:02:50.120 --> 00:02:54.140
have arisen. So you can detect, but you can't correct.

00:02:54.140 --> 00:03:01.160
Then we got on to talking about how would
Sacramento say, back to San 

00:03:01.160 --> 00:03:06.620
Francisco: "I got it! I love it!". Or "not 
acknowledged - I don't like it, it's a bad code"

00:03:06.620 --> 00:03:13.700
So we invented ACK and NAK back
from Sacramento to San Francisco. Then you

00:03:13.700 --> 00:03:18.739
go through the same argument.
And finally we said: "What do we have to do to

00:03:18.739 --> 00:03:24.170
make a 1-bit error be correctable? " And
this ACK and NAK got us started famously.

00:03:24.170 --> 00:03:30.260
And we're going to carry this story on today. We
drew a cube and we decorated around its

00:03:30.260 --> 00:03:36.319
vertices - its corners - with all the
possible 3-bit combinations. But I

00:03:36.319 --> 00:03:43.849
carefully arranged so that the 000 which
I'm now using for ACK and 111 is NAK,

00:03:43.849 --> 00:03:49.700
I put them at the diametrically opposite
corners of the cube. And what is magic

00:03:49.700 --> 00:03:56.540
about doing that is that, if there is a
one-error corruption of the code, you can

00:03:56.540 --> 00:04:03.950
correct it because it is so close - it's
nearest-neighbour matching of the bad

00:04:03.950 --> 00:04:08.840
code against what it must have been. So
what we discovered then is that in three

00:04:08.840 --> 00:04:13.250
bits you can have two so-called 'codewords' -

00:04:13.250 --> 00:04:18.560
bit-patterns which are correctable, as
well as detectable. But you can only have

00:04:18.560 --> 00:04:23.870
two. Nothing else will fit. The remaining
corners of the cube are needed to put

00:04:23.870 --> 00:04:28.040
things right when it goes wrong. This is
OK actually, we've got a nice situation now.

00:04:28.040 --> 00:04:32.510
You send a message and you wait for
the ACK or NAK to

00:04:32.510 --> 00:04:38.960
come back. So you went out with 3-bit
codes for four weather states and Sacramento

00:04:38.960 --> 00:04:42.080
comes back and either says 'acknowledge' or 'not
acknowledge' but because of this

00:04:42.080 --> 00:04:48.320
protection the ACK and the NAK are going
to get through 99.99999% of the time.

00:04:48.320 --> 00:04:53.300
Well there's nothing wrong with that y'know,
as a communications protocol, because

00:04:53.300 --> 00:04:58.910
this is exactly what happens on local
area networks [i.e. re-transmit the packet if we get a NAK]
Here we are then: how do we

00:04:58.910 --> 00:05:06.320
say we've got four weather states but
what we'd like to do is not do the ACK/NAK

00:05:06.320 --> 00:05:11.660
protocol. We'd like to send them out 
with sufficient extra bits that the far

00:05:11.660 --> 00:05:15.260
end, Sacramento, could put it right.

00:05:15.260 --> 00:05:20.810
Let's assumes that San Francisco and Sacramento
were miles apart, y' know. You want to

00:05:20.810 --> 00:05:25.820
transmit it once and have done with it.
You don't want repeats. Well,

00:05:25.820 --> 00:05:31.130
3 bits clearly isn't going to be enough. 3 bits 
can accommodate two so-called 3-bit

00:05:31.130 --> 00:05:35.270
codewords that are distinguishable from
one another, but no more.

00:05:35.270 --> 00:05:40.610
And your first thought may well be: "Well
let's try four bits". Now the number of

00:05:40.610 --> 00:05:45.080
bits you use in your code-strings equates,
if you like, to the dimensionality of the

00:05:45.080 --> 00:05:50.720
cube and we've gone beyond the cube now
to hypercube. This is a topologically

00:05:50.720 --> 00:05:57.290
correct projection of a four-dimensional
hypercube onto two-dimensional flat

00:05:57.290 --> 00:06:02.090
paper. There's lots of ways to depict it.
I've always liked this one. I think I saw it

00:06:02.090 --> 00:06:07.160
in Martin Gardner's, Scientific American,
"Recreational Maths." column, many many years ago.

00:06:07.160 --> 00:06:13.100
You draw a cube and then inside it
you draw another cube - almost, sort of,

00:06:13.100 --> 00:06:18.620
suspended in mid-air inside the original
cube. You then connect all of the

00:06:18.620 --> 00:06:22.440
corresponding corners on the outer cube
to the inner cube.

00:06:22.440 --> 00:06:26.880
I've put those in in this diagram as dots
[dotted lines], but the dots don't mean anything.

00:06:26.880 --> 00:06:31.860
They're just something that makes it
easier for me to see the structure. So

00:06:31.860 --> 00:06:38.880
don't worry about the dots! Every line
in here is a projection of an edge in

00:06:38.880 --> 00:06:44.520
the hypercube. It's got exactly the right
topology but it's been distorted so that

00:06:44.520 --> 00:06:48.870
you can understand it. So here's your
challenge, audience. If you think visually

00:06:48.870 --> 00:06:51.570
like this - oh! by the way, we're going to stop at

00:06:51.570 --> 00:06:56.190
four dimensions [in terms of drawing hypercubes].
I have no intention of going to five dimensions when we

00:06:56.190 --> 00:06:59.760
get up to 5-bit codes. Four dimensions is enough
but just look at this.

00:06:59.760 --> 00:07:03.000
The challenge is to say we've got four 0s
[and] four 1s, maybe, as our two

00:07:03.000 --> 00:07:08.580
codewords still on the outer cube
4-bit coding. On the inner cube can

00:07:08.580 --> 00:07:14.880
you choose any pair of corners which are
not only three apart from each other, on

00:07:14.880 --> 00:07:22.350
the inner cube, but are also three jumps away
from the existing codewords on the outer

00:07:22.350 --> 00:07:26.400
cube. Well, if I choose that corner it's
hopeless. It's only one away from [an]

00:07:26.400 --> 00:07:32.250
existing codeword. Even if I choose this
one, up here, is that any good?

00:07:32.250 --> 00:07:39.390
No, it's 1 2 away from here. Choose this
one, down here, y'know, is that one any

00:07:39.390 --> 00:07:45.510
good, down at the lower right?
No, it's 1 2 away. No matter which of the

00:07:45.510 --> 00:07:51.450
eight corners you choose, on the inner
cube, and try to get them diametrically

00:07:51.450 --> 00:07:55.740
opposite, so maybe you can pack in two more.
You just can't do it - you can't even pack in

00:07:55.740 --> 00:08:02.820
one more because it's always no better
than two jumps away from existing codewords.

00:08:02.820 --> 00:08:08.160
In other words four-dimensional
space has let us down. Big Time! But now

00:08:08.160 --> 00:08:15.000
we go over to a much more - if you like -
algebraic bit-pattern, computer science,

00:08:15.000 --> 00:08:19.890
way and we say we will conjecture - 
mathematicians would say this all the time -

00:08:19.890 --> 00:08:25.500
even as a computer scientist I
conjecture that five bits might be

00:08:25.500 --> 00:08:29.760
enough to encode four weather states for
San Francisco,

00:08:29.760 --> 00:08:37.530
with some sort of protection in it, so
that the far end can correct and not need to

00:08:37.530 --> 00:08:42.600
ask for a re-transmit. And this,
basically, is the classic Hamming code.

00:08:42.600 --> 00:08:45.510
We're going to go against tradition a
little bit.

00:08:45.510 --> 00:08:49.110
You're very used to me putting up a bit
pattern, numbering it from the right and

00:08:49.110 --> 00:08:52.860
saying that's a zero bit - that measures the
ones, the twos. and go right-to-left.

00:08:52.860 --> 00:09:00.210
For constructing Hamming codes you go left to
right and you start numbering at 1 not at 0.

00:09:00.210 --> 00:09:05.910
OK, what's special about 1? Well, in

00:09:05.910 --> 00:09:12.000
terms of powers of 2, it's two to the power 0. 
I'm sure you will all remember [that] anything to

00:09:12.000 --> 00:09:19.620
the power 0 is 1.  Two is no exception. Two to the
power 0 is 1. Two, of course, can be written as 2

00:09:19.620 --> 00:09:25.530
to the power 1. Let's just put lines
under these. Another exact power of 2 here,

00:09:25.530 --> 00:09:32.730
four, is two squared. So what Hamming said
was this: "Think of your position which

00:09:32.730 --> 00:09:37.740
are exact powers of 2, as being where you
put the parity-check bits. And then you

00:09:37.740 --> 00:09:44.010
use the other bits in your pattern to
hold all the information bits. And then I

00:09:44.010 --> 00:09:49.680
will give you a methodology for working
out what the parity-check bits would be".

00:09:49.680 --> 00:09:56.010
So instead of having one parity-check
bit now, like we did in the 3-bit

00:09:56.010 --> 00:10:02.160
codes, we're now going to end up adding no
fewer than three parity check bits. I will

00:10:02.160 --> 00:10:07.620
stick to even parity. Nothing special about
that - you can do it odd [parity] if you

00:10:07.620 --> 00:10:14.490
want to. But you must be consistent, of course.
OK - those are our column headings. What was

00:10:14.490 --> 00:10:20.430
the state of weather in San Francisco, on
the left, the first code was 00, if you

00:10:20.430 --> 00:10:26.820
remember, and I put the information
bits of the codes in the three and five

00:10:26.820 --> 00:10:34.290
positions where they are not powers of two.
You've got to remember that bit 1

00:10:34.290 --> 00:10:48.180
acts as a checkpoint for positions 1, 3 and 5. 
Bit 2 is a check for bit 2 and bit 3.

00:10:48.180 --> 00:10:55.950
Bit 4, up here, is the third
parity-check bet, that checks 4 and 5.

00:10:55.950 --> 00:11:01.110
What you are doing is, basically, breaking down
these odd numbers into sums of 

00:11:01.110 --> 00:11:05.940
powers of two. Let's just see if this ....
I'm taking up too much space for green! Let's

00:11:05.940 --> 00:11:10.080
see if the blue works here -
what I'm pointing out to you is that

00:11:10.080 --> 00:11:17.250
3 can be thought of as 1 + 2.
5, in terms of sums of powers of two

00:11:17.250 --> 00:11:24.480
can be thought of as 1 + 4. So this is
how it works. You write in your

00:11:24.480 --> 00:11:29.040
information bits and then you say: "What
about my parity bits?" And you use these

00:11:29.040 --> 00:11:38.070
rules, here, which effectively says that
bits 1, 3 and 5, taken together, must be

00:11:38.070 --> 00:11:46.920
even parity. Well look! Bits 3 and 5 -
the information bits, are 0 and 0. So if  

00:11:46.920 --> 00:11:51.780
1 + 3 + 5, in parity terms ... of
course a lot of you will realize we're doing

00:11:51.780 --> 00:11:58.530
exclusive ORs here of 1s and 0s ... 
0 + 0 it's even already, so to keep the 3-bit grouping,

00:11:58.530 --> 00:12:09.120
including 1, even, it needs to be 0. Bit 2 checks
2 and 3 but 3 is already 0. So two plus

00:12:09.120 --> 00:12:18.360
three's parity bits must add up to be even. 
Zero already so we get another 0. Finally

00:12:18.360 --> 00:12:23.670
what about bit four? Unknown at the moment
it's got to be a parity-check. Ah! well, 4 and 5

00:12:23.670 --> 00:12:28.980
taken together, must form an even
parity pair. Oh! that's dead easy.

00:12:28.980 --> 00:12:33.990
What it has predicted is [that] it's a simple
binary repetition code for one of the states.

00:12:33.990 --> 00:12:39.360
OK -  but everything is guided by your

00:12:39.360 --> 00:12:45.720
information bits. We're now going to
move on to 01 - same rule look, Bit 1

00:12:45.720 --> 00:12:53.040
checks 1, 3 and 5. OK? 3 and 5
are in there already.

00:12:53.040 --> 00:12:59.040
they are data bits. Aha! but there's a 1 and a 0 now.
To make the whole thing even parity, then,

00:12:59.040 --> 00:13:04.680
what have I got to do to the 1 bit?
Make it a 1, because 1 + 1 give you even

00:13:04.680 --> 00:13:08.910
parity. And then check out bit 2. Bit 2

00:13:08.910 --> 00:13:14.130
combined with bit 3 must give an
even parity combination. Well, bit 3 is in

00:13:14.130 --> 00:13:18.960
there as a 0. So [bit] two combined with 
[bit] three - you've got to have a zero. And then,

00:13:18.960 --> 00:13:25.230
finally, bit 4. Well, 4 and 5, taken together, must 
form  an even-parity

00:13:25.230 --> 00:13:30.840
combination. So, therefore, if [bit] 5 is  1 -
I'm sorry folks - [bit] 4 has got to be 1.

00:13:30.840 --> 00:13:38.220
The next information code I put in there,
which my notes say is the cloudy code, 1 and 0.

00:13:38.220 --> 00:13:44.370
Here we go again. 1, 3 and 5, taken
together, must form an even parity

00:13:44.370 --> 00:13:48.960
combination. But you got a 1 there and a 0
there. So you need a 1 here to

00:13:48.960 --> 00:13:55.170
balance it off - even number of ones, right?
And then bit 2: well [bit] 2 and [bit] 3,

00:13:55.170 --> 00:14:00.180
taken together? Well [bit] 3 is 1 -  we're stuck with 
that - it's part of the data. So we put a

00:14:00.180 --> 00:14:05.190
1 in here to make it even and then
[bit] 4 and [bit] 5, taken together, that's a 0.

00:14:05.190 --> 00:14:11.460
And finally "rainy". Here we go again.
So our final bit pattern that we've got

00:14:11.460 --> 00:14:20.010
to locate in here is 11 for rainy. 
OK [bits] 1, 3 and 5, taken together must be even.

00:14:20.010 --> 00:14:28.410
Well 1 + 1 -  [bits] 3 and 5 -,that's even, so keep it 
even by putting a 0 in there. Bits 2 and 3 taken

00:14:28.410 --> 00:14:32.400
together? Well [bit] 3 is a 1, so 2 and 3 taken together 
and to be even

00:14:32.400 --> 00:14:38.460
parity must have be a 1 there.  4 and 5 - that's a 1 - so 
you need another 1 in here

00:14:38.460 --> 00:14:45.240
to make 4 + 5. So there we are folks!
Those are our so-called codewords for all

00:14:45.240 --> 00:14:51.300
of the states of weather. Look at them. If
you look at "foggy" and "sunny", in how many places

00:14:51.300 --> 00:14:55.620
do the bit patterns differ?
0 and 1, that's a difference; 0 and 1

00:14:55.620 --> 00:14:58.770
that matches, that matches, that's different,
that's different.

00:14:58.770 --> 00:15:03.390
Three differences. They are distance three
apart and remember distance three is

00:15:03.390 --> 00:15:09.090
magic! We saw that on the cube. If you
keep your code words three bits apart

00:15:09.090 --> 00:15:13.680
from one another then everything follows
absolutely beautifully.

00:15:13.680 --> 00:15:18.990
And that works fine but we are now in a
situation where we can send all this

00:15:18.990 --> 00:15:23.610
stuff off to Sacramento and they can
blooming well sort it out for themselves!

00:15:23.610 --> 00:15:29.520
So long as you don't get more than one
error in that then, fine, you can correct it

00:15:29.520 --> 00:15:34.650
by using these Hamming codes. And you say:
"Well, how do you correct it?"

00:15:34.650 --> 00:15:41.340
Well, the answer that is you do various
simple Exclusive-OR operations on these

00:15:41.340 --> 00:15:46.020
parity check bits, at the power of two
positions, you know, like the 1, 2 and 4

00:15:46.020 --> 00:15:51.510
positions. You use various combinations of
those very much along the lines of how we

00:15:51.510 --> 00:15:56.160
encoded it in the first place, and
depending on the outcome of those, you'll

00:15:56.160 --> 00:16:00.990
find some of them check out all right
"Yes, it is even". Some of them are bad and

00:16:00.990 --> 00:16:07.920
wrong and it's odd [parity]. And by combining the
start positions for the odd ones that

00:16:07.920 --> 00:16:13.350
are bad, you can uniquely home in on the
bit that's gone wrong. And if you want to

00:16:13.350 --> 00:16:16.440
know more about that - just write in and
ask Sean. And we'll see what we can do.

