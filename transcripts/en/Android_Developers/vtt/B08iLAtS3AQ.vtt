WEBVTT
Kind: captions
Language: en

00:00:00.960 --> 00:00:04.800
[CHEERING AND APPLAUSE]

00:00:07.481 --> 00:00:09.230
DAN SANDLER: Chetama,
I'm a little worried

00:00:09.230 --> 00:00:10.301
about this intro.

00:00:10.301 --> 00:00:12.634
I don't think we, we really
didn't rehearse this at all.

00:00:12.634 --> 00:00:13.710
CHET HAASE: [CHUCKLES]
This is going

00:00:13.710 --> 00:00:15.750
to come off completely
unscripted, even though we went

00:00:15.750 --> 00:00:16.820
over and over and over again.

00:00:16.820 --> 00:00:17.980
I think it's very spontaneous.

00:00:17.980 --> 00:00:20.521
DAN SANDLER: I'm specifically
worried about the intro though.

00:00:20.521 --> 00:00:22.920
CHET HAASE: Hello, and welcome
to What's New in Android.

00:00:22.920 --> 00:00:25.820
[CHEERING AND APPLAUSE]

00:00:27.829 --> 00:00:30.120
CHET HAASE: We're glad you
could make it into the room.

00:00:30.120 --> 00:00:32.745
We're sorry that they put it in
the smallest room at Shoreline.

00:00:32.745 --> 00:00:33.900
DAN SANDLER: It's true.

00:00:33.900 --> 00:00:35.900
CHET HAASE: So there is
standing room out there.

00:00:35.900 --> 00:00:38.483
If there's a seat next to you,
if you could raise your hand so

00:00:38.483 --> 00:00:41.170
that people know that there's
still one available someplace.

00:00:41.170 --> 00:00:41.850
That would help.

00:00:41.850 --> 00:00:44.749
I'm Chet Haase from the
Android UI Toolkit Team.

00:00:44.749 --> 00:00:47.040
DAN SANDLER: I'm Dan Sandler
from the Android System UI

00:00:47.040 --> 00:00:47.740
Team.

00:00:47.740 --> 00:00:49.420
ROMAIN GUY: And I'm Roman
Guy from the Android Team.

00:00:49.420 --> 00:00:50.670
CHET HAASE: Again, once again.

00:00:50.670 --> 00:00:51.546
ROMAIN GUY: Again.

00:00:51.546 --> 00:00:54.239
[CHEERING AND APPLAUSE]

00:00:54.738 --> 00:00:56.852
But not on his
team, never again.

00:00:56.852 --> 00:00:57.810
CHET HAASE: No, no, no.

00:00:57.810 --> 00:00:58.750
[LAUGHTER]

00:00:58.750 --> 00:01:00.310
No, that mutiny was successful.

00:01:00.310 --> 00:01:02.240
And we're not going to
repeat that problem.

00:01:02.240 --> 00:01:06.060
So today, we're going to talk
about what's new in Androids.

00:01:06.060 --> 00:01:08.800
Specifically, given the timing
of all the Preview stuff

00:01:08.800 --> 00:01:13.740
going on, let's talk
about what's new in N.

00:01:13.740 --> 00:01:15.450
Or, hello.

00:01:15.450 --> 00:01:16.297
There we go.

00:01:16.297 --> 00:01:18.130
We could even call it
What's New in Android.

00:01:18.130 --> 00:01:19.713
Actually, what we
should actually call

00:01:19.713 --> 00:01:22.904
it is What's New-ish in Android.

00:01:22.904 --> 00:01:24.820
Because we've talked
about some of this stuff.

00:01:24.820 --> 00:01:28.290
And hopefully, everybody here
has the Preview bits already.

00:01:28.290 --> 00:01:30.870
And you've been playing with
it, and submitting bugs,

00:01:30.870 --> 00:01:33.119
and playing with the new
features and functionality.

00:01:33.119 --> 00:01:34.410
So we're going to go over that.

00:01:34.410 --> 00:01:36.743
And we're also going to go
over some of the stuff that's

00:01:36.743 --> 00:01:42.090
newer in the Developer Freeview
3 and some other related bits.

00:01:42.090 --> 00:01:45.140
So let's do it.

00:01:45.140 --> 00:01:49.800
So the big question is, what
does N stand for, of course?

00:01:49.800 --> 00:01:54.210
I think it stands for-- so
we went Russian this time.

00:01:54.210 --> 00:02:00.120
Of course, nyet stands for not
yet or not going to tell you.

00:02:00.120 --> 00:02:04.130
What it actually stands for
today, of course, is N Preview.

00:02:04.130 --> 00:02:07.870
And in particular, it
stands for N Preview 3.

00:02:07.870 --> 00:02:11.324
So let's talk about there's
different ways to slice

00:02:11.324 --> 00:02:12.240
and dice the features.

00:02:12.240 --> 00:02:13.781
But we thought it'd
be useful to talk

00:02:13.781 --> 00:02:15.699
about the ones that the
users can actually see

00:02:15.699 --> 00:02:16.990
and the developer side of that.

00:02:16.990 --> 00:02:19.500
And then, we'll talk about
the developer-facing features,

00:02:19.500 --> 00:02:22.083
the things that are more about
the implementation and the code

00:02:22.083 --> 00:02:22.880
behind it.

00:02:22.880 --> 00:02:27.156
So why don't we
start with a demo.

00:02:27.156 --> 00:02:27.875
[CHEERS]

00:02:28.374 --> 00:02:29.590
Yay.

00:02:29.590 --> 00:02:35.140
So let's talk about
Constraint Layouts.

00:02:35.140 --> 00:02:38.180
This got a brief mention in
the keynote this morning.

00:02:38.180 --> 00:02:39.730
Steph was talking about this.

00:02:39.730 --> 00:02:42.252
And Romain is going to
show you what's going on.

00:02:42.252 --> 00:02:43.710
ROMAIN GUY: So
Constraint Layout is

00:02:43.710 --> 00:02:45.001
a brand-new layout for Android.

00:02:45.001 --> 00:02:47.610
It's going to be in
Unbundled Library

00:02:47.610 --> 00:02:49.540
that you can integrate
in your application

00:02:49.540 --> 00:02:50.831
without updating the framework.

00:02:50.831 --> 00:02:53.890
It's compatible all the
way back to Gingerbread.

00:02:53.890 --> 00:02:56.560
So you can use it
in any app you want.

00:02:56.560 --> 00:03:00.010
And it is our first layout that
was designed in conjunction

00:03:00.010 --> 00:03:01.260
with the tool itself.

00:03:01.260 --> 00:03:03.550
So as we were building the
Layout Manager for Android,

00:03:03.550 --> 00:03:08.132
we were also designing this user
experience for Android Studio.

00:03:08.132 --> 00:03:10.590
You saw briefly, in the keynote,
it was maybe a little hard

00:03:10.590 --> 00:03:10.950
to see.

00:03:10.950 --> 00:03:12.555
We have the system
that automatically

00:03:12.555 --> 00:03:13.310
infer constraints.

00:03:13.310 --> 00:03:15.930
There are different
ways, in this new system,

00:03:15.930 --> 00:03:17.560
that you can create a layout.

00:03:17.560 --> 00:03:19.587
So here, for instance,
I have a button.

00:03:19.587 --> 00:03:21.920
You can see as I move it
around, we give you guidelines.

00:03:21.920 --> 00:03:24.731
It shows you, it [? folds ?]
the material design guidelines,

00:03:24.731 --> 00:03:26.980
which will show you the
correct margin that you should

00:03:26.980 --> 00:03:28.320
use between different widgets.

00:03:28.320 --> 00:03:30.670
It shows you the correct
margin between the widget

00:03:30.670 --> 00:03:32.050
and the edge of the screen.

00:03:32.050 --> 00:03:35.530
Now, if I add a second button,
I can create a constraint

00:03:35.530 --> 00:03:37.820
between those two buttons.

00:03:37.820 --> 00:03:39.444
And now, they are aligned.

00:03:39.444 --> 00:03:41.610
But what's really powerful
in this new layout editor

00:03:41.610 --> 00:03:45.780
is that we run the algorithm
behind the Android layout

00:03:45.780 --> 00:03:49.390
on in Android Studio at
60 frames per second.

00:03:49.390 --> 00:03:50.890
So when I move the
first button, you

00:03:50.890 --> 00:03:53.620
can see in real-time what's
happening, how the layout is

00:03:53.620 --> 00:03:56.550
resolving all the constraints.

00:03:56.550 --> 00:03:59.210
So this should give you a
lot, much faster feedback

00:03:59.210 --> 00:04:00.110
on what's going on.

00:04:00.110 --> 00:04:02.360
We could also show you before
you create a constraint.

00:04:02.360 --> 00:04:04.060
So as I'm dragging
this constraint

00:04:04.060 --> 00:04:05.980
to the edge of the
screen, we'll show you

00:04:05.980 --> 00:04:07.910
before I release the mouse.

00:04:07.910 --> 00:04:09.930
We animate to show you
what's going to happen

00:04:09.930 --> 00:04:11.714
if you create that constraint.

00:04:11.714 --> 00:04:13.630
I'm sure some of you
have Views RelativeLayout

00:04:13.630 --> 00:04:16.149
and might have been surprised
by what happens sometimes when

00:04:16.149 --> 00:04:17.519
you just send an extra widget.

00:04:17.519 --> 00:04:20.440
And everything just teleports to
a different part of the screen.

00:04:20.440 --> 00:04:22.980
So no more.

00:04:22.980 --> 00:04:25.350
So it can very quickly
create more constraints

00:04:25.350 --> 00:04:27.980
and add my two
buttons at the bottom.

00:04:27.980 --> 00:04:30.990
You can also use AutoConnect.

00:04:30.990 --> 00:04:35.860
So if I turn it on when I
drop a new button on-screen,

00:04:35.860 --> 00:04:38.130
when you see guidelines,
for instance,

00:04:38.130 --> 00:04:41.370
in the center of the screen,
if I drop my button here,

00:04:41.370 --> 00:04:43.232
the system is going to
create automatically

00:04:43.232 --> 00:04:44.190
the constraints for me.

00:04:44.190 --> 00:04:45.896
So I don't even have
to do that work.

00:04:46.830 --> 00:04:49.750
You can, of course, edit the
constraints after the fact.

00:04:49.750 --> 00:04:54.380
You can do flexible sizing so
you can take up all the space

00:04:54.380 --> 00:04:55.810
or none of the space.

00:04:55.810 --> 00:04:57.857
We also have
percentage-based positioning.

00:04:57.857 --> 00:04:59.440
So here, the button
was in the center.

00:04:59.440 --> 00:05:02.400
But you can say that you
want to be at, let's say,

00:05:02.400 --> 00:05:04.910
25% from the top of the screen.

00:05:04.910 --> 00:05:07.622
And it's going to adapt
to your screen dimensions.

00:05:07.622 --> 00:05:09.330
There are other features
that we're going

00:05:09.330 --> 00:05:10.800
to demo on Friday at 9:00 AM.

00:05:10.800 --> 00:05:12.504
For instance, we
have Aspect Ratio

00:05:12.504 --> 00:05:13.920
so you can make
your widget always

00:05:13.920 --> 00:05:17.280
be a 1:1 aspect ratio of
16:9, whatever you want.

00:05:17.280 --> 00:05:19.380
And finally, the
thing that was briefly

00:05:19.380 --> 00:05:20.780
previewed in the keynote.

00:05:20.780 --> 00:05:22.950
So if I drop a bunch
of widgets on-screen,

00:05:22.950 --> 00:05:30.150
let's say a Text Field from the
top, a it TextView for label.

00:05:30.150 --> 00:05:33.900
And you going to position
them carefully the way

00:05:33.900 --> 00:05:35.050
I want my UI to look like.

00:05:35.050 --> 00:05:36.760
I'm going to destroy
all the constraints.

00:05:36.760 --> 00:05:38.990
Now, if I just press
this Field Label icon,

00:05:38.990 --> 00:05:40.820
it will figure out
what I want it to do.

00:05:40.820 --> 00:05:42.665
And my layout just works.

00:05:42.665 --> 00:05:43.790
And you're not locked down.

00:05:43.790 --> 00:05:45.140
You can keep adding constraints.

00:05:45.140 --> 00:05:46.870
You can keep changing
the behavior.

00:05:46.870 --> 00:05:48.180
I could add another widget.

00:05:48.180 --> 00:05:49.430
Do automatic inference again.

00:05:49.430 --> 00:05:51.013
And you have this
authority of process

00:05:51.013 --> 00:05:53.220
to help you make sure UI,
create your UI faster.

00:05:53.220 --> 00:05:56.010
[APPLAUSE]

00:05:59.030 --> 00:06:00.155
CHET HAASE: Thanks, Romain.

00:06:00.155 --> 00:06:00.655
And--

00:06:00.655 --> 00:06:02.370
ROMAIN GUY: Oh,
sorry, one more thing.

00:06:02.370 --> 00:06:03.660
This is a preview.

00:06:03.660 --> 00:06:05.480
We call it the Alpha 1.

00:06:05.480 --> 00:06:07.050
It's rough around the edges.

00:06:07.050 --> 00:06:09.320
So download the
Android 2.2 Preview.

00:06:09.320 --> 00:06:10.040
Play with it.

00:06:10.040 --> 00:06:11.100
Please file bugs.

00:06:11.100 --> 00:06:13.520
I'll go personally look
at the bug Tracker.

00:06:13.520 --> 00:06:15.420
And I'll harass the
engineers to make

00:06:15.420 --> 00:06:18.960
sure they fix at least,
hopefully, most of the bugs.

00:06:18.960 --> 00:06:20.477
And we have a lot more coming.

00:06:20.477 --> 00:06:21.810
We're still going to work on it.

00:06:21.810 --> 00:06:23.661
This is by no means
a final version

00:06:23.661 --> 00:06:25.625
of the layout and
the Layout Editor.

00:06:25.625 --> 00:06:27.210
CHET HAASE: And one
final question--

00:06:27.210 --> 00:06:29.040
how much does it cost?

00:06:29.040 --> 00:06:30.587
[LAUGHTER]

00:06:30.587 --> 00:06:31.670
ROMAIN GUY: 100 kilobytes.

00:06:31.670 --> 00:06:32.444
Is that good?

00:06:32.444 --> 00:06:33.360
CHET HAASE: [CHUCKLES]

00:06:33.360 --> 00:06:34.651
DAN SANDLER: But for you, Chet?

00:06:34.651 --> 00:06:36.120
CHET HAASE:
[CHUCKLES] $4 million.

00:06:36.120 --> 00:06:36.620
[LAUGHTER]

00:06:36.620 --> 00:06:39.530
All right, so, yes, go
please play with it.

00:06:39.530 --> 00:06:40.760
Give us feedback.

00:06:40.760 --> 00:06:42.252
If we can go back to the slides.

00:06:42.252 --> 00:06:43.210
It was an awesome demo.

00:06:43.210 --> 00:06:44.030
But I'd like to
see slides again.

00:06:44.030 --> 00:06:44.750
DAN SANDLER: Hey, good
luck coloring that.

00:06:44.750 --> 00:06:46.080
CHET HAASE: Excellent.

00:06:46.080 --> 00:06:49.516
Multi-Window, one of the
more visible changes in N

00:06:49.516 --> 00:06:51.640
is the ability to actually
have multiple activities

00:06:51.640 --> 00:06:52.723
on the screen at one time.

00:06:52.723 --> 00:06:55.470
There's two major Modes of
this that you may see around.

00:06:55.470 --> 00:06:58.230
One is Split Screen,
side-by-side.

00:06:58.230 --> 00:07:00.970
Or if you're running
vertically, top-to-bottom.

00:07:00.970 --> 00:07:04.250
So if we go into Recents, we can
see, in the Screen Record here,

00:07:04.250 --> 00:07:06.840
you've got the ability
to drag from Recents

00:07:06.840 --> 00:07:08.320
into one half of the screen.

00:07:08.320 --> 00:07:09.792
And then, the thing
you were doing

00:07:09.792 --> 00:07:11.250
is in the other
half of the screen.

00:07:11.250 --> 00:07:13.815
And you can tap one of those
to be your second activity.

00:07:13.815 --> 00:07:16.190
As you drag around, you'll
notice that the Window Manager

00:07:16.190 --> 00:07:18.110
is simply quickly painting
a background color

00:07:18.110 --> 00:07:19.194
until you let go.

00:07:19.194 --> 00:07:21.110
And then, you get a full
configuration change.

00:07:21.110 --> 00:07:23.430
So one of the things that
makes this work basically

00:07:23.430 --> 00:07:26.964
out-of-the-box for your apps is
the magic of Android Layouts.

00:07:26.964 --> 00:07:28.630
We know how to do
configuration changes.

00:07:28.630 --> 00:07:31.590
We know how to adjust
layout based on new sizes

00:07:31.590 --> 00:07:33.290
and form factors of the screen.

00:07:33.290 --> 00:07:36.180
So the Window Manager is
building on top of that

00:07:36.180 --> 00:07:38.160
so that when you go into
the New Size and Force

00:07:38.160 --> 00:07:41.220
by the side-by-side layout,
your app simply works.

00:07:41.220 --> 00:07:42.220
So go ahead and test it.

00:07:42.220 --> 00:07:43.678
Make sure that it
works the way you

00:07:43.678 --> 00:07:47.110
want it to in side-by-side
mode or Split Screen Mode.

00:07:47.110 --> 00:07:49.030
And use the APIs if you need to.

00:07:49.030 --> 00:07:50.880
So you can opt into this.

00:07:50.880 --> 00:07:53.470
You are automatically
opted into it by default.

00:07:53.470 --> 00:07:54.970
But you can say
that you do not want

00:07:54.970 --> 00:07:57.030
to be a Resizeable Activity.

00:07:57.030 --> 00:07:59.900
There are some parameters
you can specify about default

00:07:59.900 --> 00:08:02.180
and minimal sizing.

00:08:02.180 --> 00:08:04.520
And there are some
APIs for you to listen

00:08:04.520 --> 00:08:08.870
to to find out when the system
is going into Multi-Window Mode

00:08:08.870 --> 00:08:11.040
or whether you are currently
in Multi-Window Mode.

00:08:11.040 --> 00:08:13.480
And then finally, if you
are in Multi-Window Mode

00:08:13.480 --> 00:08:15.860
and launching another
subactivity that you would like

00:08:15.860 --> 00:08:18.840
to be side-by-side
with yours, you

00:08:18.840 --> 00:08:21.650
can ask for it to be
Adjacent to yours.

00:08:21.650 --> 00:08:23.049
So go, please check that out.

00:08:23.049 --> 00:08:25.090
And also, check out the
picture in Picture Modes.

00:08:25.090 --> 00:08:27.850
This is the other half of
Multi-Window Mode where

00:08:27.850 --> 00:08:29.860
in Android TV, you
now have the ability

00:08:29.860 --> 00:08:33.470
to have an activity playing
a picture-in-picture.

00:08:33.470 --> 00:08:35.220
So playing a video
full-time while there's

00:08:35.220 --> 00:08:37.179
some other activity,
like the launchers

00:08:37.179 --> 00:08:41.350
who the user can pick another
piece of content to watch,

00:08:41.350 --> 00:08:43.630
at the same time, while
you've got this video playing

00:08:43.630 --> 00:08:44.960
in the front screen.

00:08:44.960 --> 00:08:48.220
So for both of these
features and lots more,

00:08:48.220 --> 00:08:52.327
please go to the Multi-Window
session today at 4:00 PM.

00:08:52.327 --> 00:08:54.660
There's a little bit of
activity for picture-in-picture,

00:08:54.660 --> 00:08:57.319
basically similar to what
we saw for Multi-Window Mode

00:08:57.319 --> 00:08:59.110
to find out when these
things are happening

00:08:59.110 --> 00:09:01.000
and what you can do about it.

00:09:01.000 --> 00:09:03.230
There is new Drag
and Drop capability.

00:09:03.230 --> 00:09:05.500
We've had Drag and
Drop in the platform

00:09:05.500 --> 00:09:08.800
since at least Gingerbread.

00:09:08.800 --> 00:09:11.440
And we have added to
that capability now.

00:09:11.440 --> 00:09:13.250
Because now, you're in
a Multi-Window Mode.

00:09:13.250 --> 00:09:15.650
Wouldn't it be nice if you
could drag from one activity

00:09:15.650 --> 00:09:16.270
to another?

00:09:16.270 --> 00:09:18.620
Which the previous Drag
and Drop Mode did not allow

00:09:18.620 --> 00:09:20.670
because it didn't need to.

00:09:20.670 --> 00:09:23.190
But now, you want to actually
be able to drag content

00:09:23.190 --> 00:09:25.630
back and forth between
these multiple activities.

00:09:25.630 --> 00:09:27.770
So we added a little bit
of API and capabilities

00:09:27.770 --> 00:09:29.660
to allow you to do that.

00:09:29.660 --> 00:09:31.930
So we can see some
of the APIs here.

00:09:31.930 --> 00:09:33.560
A lot of it is
around permissions.

00:09:33.560 --> 00:09:35.540
Because maybe that
activity didn't actually

00:09:35.540 --> 00:09:37.630
want you to copy from
the Password field

00:09:37.630 --> 00:09:39.800
onto your own activity.

00:09:39.800 --> 00:09:43.470
Or maybe you don't
want that cat video

00:09:43.470 --> 00:09:44.890
dropped onto your activity.

00:09:44.890 --> 00:09:48.120
So there's a bit of hand-shaking
back and forth to grant

00:09:48.120 --> 00:09:49.430
the correct permissions.

00:09:49.430 --> 00:09:52.230
And then, there's also ways
to actually start the actions,

00:09:52.230 --> 00:09:54.340
to cancel the actions
while they're on the fly,

00:09:54.340 --> 00:09:57.410
to update the Drag Shadow, the
very inappropriately-named Drag

00:09:57.410 --> 00:09:57.910
Shadow.

00:09:57.910 --> 00:09:59.834
That's basically the
thumbnail representation

00:09:59.834 --> 00:10:02.000
of the piece of content
that's being dragged around.

00:10:02.000 --> 00:10:04.034
So you can update that
to whatever you want.

00:10:04.034 --> 00:10:05.700
You can even keep
updating if you really

00:10:05.700 --> 00:10:07.874
want to animate the
Shadow representation.

00:10:07.874 --> 00:10:08.790
DAN SANDLER: Oh, yeah.

00:10:08.790 --> 00:10:10.050
CHET HAASE: If that's a thing.

00:10:10.050 --> 00:10:11.550
So we can see a
quick screen record.

00:10:11.550 --> 00:10:14.580
You can see this in action here.

00:10:14.580 --> 00:10:16.230
Let's see, yeah.

00:10:16.230 --> 00:10:18.620
So this is a couple of demos
that we have internally.

00:10:18.620 --> 00:10:19.960
This will be published
as an article and demo

00:10:19.960 --> 00:10:21.300
that you can run externally.

00:10:21.300 --> 00:10:23.490
It just shows the
basic interaction

00:10:23.490 --> 00:10:26.271
of dragging something that
doesn't have permissions

00:10:26.271 --> 00:10:28.020
versus granting the
permissions and, then,

00:10:28.020 --> 00:10:30.020
getting the capability
to drag between the apps.

00:10:32.540 --> 00:10:33.230
Moving on.

00:10:33.230 --> 00:10:34.840
So we have Notifications.

00:10:34.840 --> 00:10:35.760
DAN SANDLER: All right,
so you've all seen

00:10:35.760 --> 00:10:37.280
us do this talk before, I hope.

00:10:37.280 --> 00:10:38.738
And you know this
is the part where

00:10:38.738 --> 00:10:40.860
I hijack the conversation,
for 15 whole minutes,

00:10:40.860 --> 00:10:43.151
to talk about all the shiny
new stuff in Notifications.

00:10:43.151 --> 00:10:45.490
Well, not this time because
they gave me my own talk.

00:10:45.490 --> 00:10:47.001
So come back
tomorrow at 9:00 AM.

00:10:47.001 --> 00:10:49.250
And we'll go really deep on
all the exciting new stuff

00:10:49.250 --> 00:10:53.180
in Notifications in Android
and in Android Wear 2.0, which

00:10:53.180 --> 00:10:54.280
you saw at the keynote.

00:10:54.280 --> 00:10:54.980
I will just--

00:10:54.980 --> 00:10:55.470
CHET HAASE: Give me
the clicker back now.

00:10:55.470 --> 00:10:56.670
DAN SANDLER: No,
I'm not quite done.

00:10:56.670 --> 00:10:57.336
Hang on.

00:10:57.336 --> 00:10:59.160
[CHUCKLING]

00:10:59.160 --> 00:11:02.130
I do want to just highlight
a few things that I want

00:11:02.130 --> 00:11:04.960
you to be aware of, perhaps
entice you to come learn more

00:11:04.960 --> 00:11:06.550
or check it out in
the developer docs.

00:11:06.550 --> 00:11:08.850
First, we have new templates
for the first time,

00:11:08.850 --> 00:11:09.967
really, since Honeycomb.

00:11:09.967 --> 00:11:11.550
Although we did do
a bit of a material

00:11:11.550 --> 00:11:13.010
update a couple of releases ago.

00:11:13.010 --> 00:11:14.700
Some new templates,
moving things

00:11:14.700 --> 00:11:17.205
around a little bit, creating
new attribution for the app

00:11:17.205 --> 00:11:18.330
that sent the notification.

00:11:18.330 --> 00:11:20.380
So you always know
who is putting

00:11:20.380 --> 00:11:22.050
stuff in front your face.

00:11:22.050 --> 00:11:23.687
We also have bundled
notifications,

00:11:23.687 --> 00:11:26.020
something that we originally
developed for Android Wear.

00:11:26.020 --> 00:11:28.960
Finally available on the
handset and on tablets,

00:11:28.960 --> 00:11:32.240
the ability to group those
notifications together.

00:11:32.240 --> 00:11:34.170
We also have direct
reply, the ability

00:11:34.170 --> 00:11:36.800
to touch the Reply button
and actually just type

00:11:36.800 --> 00:11:37.990
the text right in the shade.

00:11:37.990 --> 00:11:39.810
So this is, again,
something that Android Wear

00:11:39.810 --> 00:11:40.550
has had for a while.

00:11:40.550 --> 00:11:42.216
So you could talk to
your watch and have

00:11:42.216 --> 00:11:43.420
it sent as a text message.

00:11:43.420 --> 00:11:45.790
Now you can do the same thing
even from the lock screen

00:11:45.790 --> 00:11:47.962
if the user has allowed it.

00:11:47.962 --> 00:11:50.170
While I'm up here and talking
about System UI things,

00:11:50.170 --> 00:11:52.419
I would like to talk to you
about Quick Settings We've

00:11:52.419 --> 00:11:53.889
finally done
something that users

00:11:53.889 --> 00:11:55.680
have been asking for
for a long time, which

00:11:55.680 --> 00:11:56.620
is make them editable.

00:11:56.620 --> 00:11:59.440
Now allow you to choose to
add and remove the Quick

00:11:59.440 --> 00:12:00.710
Settings that you want to see.

00:12:00.710 --> 00:12:02.390
And in fact, we have this great
new thing called the Quicker

00:12:02.390 --> 00:12:03.200
Quick Settings.

00:12:03.200 --> 00:12:04.690
I think I just
came up with that.

00:12:04.690 --> 00:12:06.273
The Quicker Quick
Settings is the list

00:12:06.273 --> 00:12:08.270
of five, your five top
Quick Settings that

00:12:08.270 --> 00:12:10.271
appears at the very top
of the notification list

00:12:10.271 --> 00:12:11.520
any time you're looking at it.

00:12:11.520 --> 00:12:13.900
So if you move those around
to get the top five in there,

00:12:13.900 --> 00:12:15.680
you'll have access to
them one touch away,

00:12:15.680 --> 00:12:18.022
any time you're looking
at your notifications.

00:12:18.022 --> 00:12:20.840
[APPLAUSE]

00:12:23.600 --> 00:12:24.100
But wait.

00:12:24.100 --> 00:12:24.710
There's more.

00:12:24.710 --> 00:12:27.407
So developers, if you've
been playing along at home,

00:12:27.407 --> 00:12:28.990
you know from the
end preview that you

00:12:28.990 --> 00:12:31.570
can create your own
Quick Settings tiles now

00:12:31.570 --> 00:12:35.219
that any user using Android
N can choose to install.

00:12:35.219 --> 00:12:37.010
So go ahead and take
a look at the API docs

00:12:37.010 --> 00:12:38.360
around TileService.

00:12:38.360 --> 00:12:40.952
This creates a whole lifecycle
around Quick Settings tiles

00:12:40.952 --> 00:12:42.910
that allows you to know
when the user has added

00:12:42.910 --> 00:12:45.720
the tile to the list, when
the tiles are actually

00:12:45.720 --> 00:12:46.450
being looked at.

00:12:46.450 --> 00:12:48.590
So if you need to do live
updates, you can do them then.

00:12:48.590 --> 00:12:50.131
And then of course,
the all-important

00:12:50.131 --> 00:12:52.860
what to do when the
user clicks on the tile.

00:12:52.860 --> 00:12:54.849
When you call getQsTile,
you get a pointer

00:12:54.849 --> 00:12:57.140
to the tile object, which
actually holds all your State

00:12:57.140 --> 00:12:59.370
and lets you do things
like change the icon,

00:12:59.370 --> 00:13:01.950
change the label, go into and
out of an active State, which

00:13:01.950 --> 00:13:03.420
lets you dim it or
not dim it based

00:13:03.420 --> 00:13:05.170
on whether that
resource is available.

00:13:05.170 --> 00:13:06.919
And then, once you
make all those changes,

00:13:06.919 --> 00:13:08.650
please don't forget
call updateTile.

00:13:08.650 --> 00:13:10.922
So this is perfect
for your settings.

00:13:10.922 --> 00:13:12.463
Some Quick feature
of an app that you

00:13:12.463 --> 00:13:15.080
know the user wants to have
access to from the lock screen.

00:13:15.080 --> 00:13:17.260
If you are busy building
out your smart home,

00:13:17.260 --> 00:13:18.770
the first thing you want to
do is have a Quick button

00:13:18.770 --> 00:13:19.830
from your phone
where you can turn it

00:13:19.830 --> 00:13:22.530
on and make it play your theme
music as soon as you walk home.

00:13:22.530 --> 00:13:25.146
That's exactly what
Quick Settings is for.

00:13:25.146 --> 00:13:27.520
The last thing you have to do
is blah, blah, blah-- stuff

00:13:27.520 --> 00:13:28.820
in the manifest--
just to make sure you

00:13:28.820 --> 00:13:31.110
get all the correct permissions
so that System UI knows

00:13:31.110 --> 00:13:32.485
that you're a
Quick Settings tile

00:13:32.485 --> 00:13:35.362
and knows what to do with it.

00:13:35.362 --> 00:13:37.320
Let's talk for a little
bit about Display Size.

00:13:37.320 --> 00:13:39.153
So this is actually an
accessibility feature

00:13:39.153 --> 00:13:43.170
that we're introducing in N
to augment and even replace

00:13:43.170 --> 00:13:43.960
Font Size.

00:13:43.960 --> 00:13:45.480
So Font Size is something
you've been able to change

00:13:45.480 --> 00:13:46.604
on Android for a long time.

00:13:46.604 --> 00:13:49.540
Developers, you know that if you
specify your typefaces in ASPI

00:13:49.540 --> 00:13:51.572
that multiplies in the
user's chosen Font Size

00:13:51.572 --> 00:13:54.030
so you can let the user say,
I need a little bit more help,

00:13:54.030 --> 00:13:55.738
or, I want to be able
to see a little bit

00:13:55.738 --> 00:13:56.842
more text on the screen.

00:13:56.842 --> 00:13:58.800
But what you, as developers,
probably also know

00:13:58.800 --> 00:14:00.570
is that that ASPI is
very limited, right?

00:14:00.570 --> 00:14:02.590
We don't really change layouts
based on the Font Size.

00:14:02.590 --> 00:14:04.440
You can do Wrap Content
to get around that.

00:14:04.440 --> 00:14:06.020
But there are certain
parts of the system

00:14:06.020 --> 00:14:07.570
like, [CLEARS THROAT]
Notifications,

00:14:07.570 --> 00:14:08.987
[CLEARS THROAT]
that really didn't

00:14:08.987 --> 00:14:10.028
deal very well with that.

00:14:10.028 --> 00:14:11.600
Because the size of
the geometry just

00:14:11.600 --> 00:14:14.180
did not change to accommodate
all the additional text.

00:14:14.180 --> 00:14:17.390
So what we have now, in Android
N, is a Display Size feature.

00:14:17.390 --> 00:14:20.720
You go into the Display
Settings, you hit that.

00:14:20.720 --> 00:14:24.120
And it changes the dpi
of the device at runtime.

00:14:24.120 --> 00:14:28.910
It becomes a new way to change
all of the UI on the device

00:14:28.910 --> 00:14:30.990
to a new density,
not just the text.

00:14:30.990 --> 00:14:32.740
So you can blow
everything up or shrink it

00:14:32.740 --> 00:14:35.440
all down to make the most use of
that tiny little screen you've

00:14:35.440 --> 00:14:36.200
got there.

00:14:36.200 --> 00:14:41.400
So you can go from 0.85 all
the way up to almost 1 and 1/2.

00:14:41.400 --> 00:14:43.400
I shouldn't have to tell
you this at this point.

00:14:43.400 --> 00:14:44.970
But please avoid
px in your layouts.

00:14:44.970 --> 00:14:47.660
Because since this is changing
the density of the device,

00:14:47.660 --> 00:14:49.750
this is gets multiplied
in when you use dps

00:14:49.750 --> 00:14:51.541
in your layouts and
the other computations.

00:14:53.289 --> 00:14:54.830
The other thing that
you want to do--

00:14:54.830 --> 00:14:56.190
and I'll show you a
video in a second that

00:14:56.190 --> 00:14:58.689
makes this really clear-- is
make sure your app works really

00:14:58.689 --> 00:14:59.735
well in sw320dp.

00:14:59.735 --> 00:15:00.390
I know.

00:15:00.390 --> 00:15:04.060
I know we're all carrying
around these giant-like slabs

00:15:04.060 --> 00:15:04.900
of phones.

00:15:04.900 --> 00:15:06.940
And there are very few
tiny displays out there.

00:15:06.940 --> 00:15:09.440
But suddenly, if a user
changes the density such

00:15:09.440 --> 00:15:12.260
that the screen is
effectively sw320dp,

00:15:12.260 --> 00:15:14.770
now your app needs to deal
with that in a graceful way.

00:15:14.770 --> 00:15:18.780
So we've got a video here that
shows actually what happens.

00:15:18.780 --> 00:15:20.240
This is the live Resize.

00:15:20.240 --> 00:15:21.760
You go into Display Size.

00:15:21.760 --> 00:15:23.980
You move the slider
around, Larger and Smaller.

00:15:23.980 --> 00:15:25.960
And you can see that
everything changes size,

00:15:25.960 --> 00:15:29.180
not just the text, but the
Navigation Bar, Status Bar,

00:15:29.180 --> 00:15:31.420
and all that good stuff.

00:15:31.420 --> 00:15:33.600
And in fact, I have
the breakdown here.

00:15:33.600 --> 00:15:35.510
This is what Default
size looks like.

00:15:35.510 --> 00:15:38.230
If you just change the Font
Size, some things get bigger.

00:15:38.230 --> 00:15:41.120
But some things are unaffected.

00:15:41.120 --> 00:15:44.100
And then, of course, Display
Size changes everything.

00:15:44.100 --> 00:15:46.209
So you can finally make
every part of the UI

00:15:46.209 --> 00:15:48.250
big enough for you to see
or small enough for you

00:15:48.250 --> 00:15:51.910
to feel like you can pack all
that information in there.

00:15:51.910 --> 00:15:53.077
Let's talk about Locales.

00:15:53.077 --> 00:15:54.160
CHET HAASE: Let's do that.

00:15:54.160 --> 00:15:56.400
All right, thanks, Dan.

00:15:56.400 --> 00:15:57.178
Multi-Locale.

00:15:57.178 --> 00:15:58.670
[APPLAUSE]

00:15:58.670 --> 00:15:59.170
No, no, no.

00:15:59.170 --> 00:16:00.170
I haven't done it yet.

00:16:00.170 --> 00:16:01.070
[LAUGHTER]

00:16:01.070 --> 00:16:02.970
You know what's
awesome is seeing

00:16:02.970 --> 00:16:05.110
the geometry and the
shape of the awning

00:16:05.110 --> 00:16:07.640
based on the empty
seats in the auditorium.

00:16:07.640 --> 00:16:09.249
It is really hot
back there, isn't it?

00:16:09.249 --> 00:16:11.290
DAN SANDLER: It's a reason
to watch the 360 feed.

00:16:11.290 --> 00:16:13.140
CHET HAASE: [CHUCKLES] Yes.

00:16:13.140 --> 00:16:15.690
But it's not hot at home
for the live stream.

00:16:15.690 --> 00:16:17.690
All right, so for you
people playing at home,

00:16:17.690 --> 00:16:18.940
let's talk about Multi-Locale.

00:16:18.940 --> 00:16:22.210
This has been a mucrequested
feature for many releases now.

00:16:22.210 --> 00:16:25.000
And it turns out that
outside of my country, people

00:16:25.000 --> 00:16:26.780
speak more than one language.

00:16:26.780 --> 00:16:27.980
[LAUGHTER]

00:16:27.980 --> 00:16:28.560
It's true.

00:16:28.560 --> 00:16:30.400
I have been told this.

00:16:30.400 --> 00:16:32.190
People like you.

00:16:32.190 --> 00:16:34.840
And for these people, it's very
difficult to deal with the UI.

00:16:34.840 --> 00:16:37.934
Because sometimes you would
like some contents or some apps

00:16:37.934 --> 00:16:40.100
to speak to you in one of
those preferred languages,

00:16:40.100 --> 00:16:43.570
or to have a different fallback
than some other system default

00:16:43.570 --> 00:16:45.510
when it didn't have the
appropriate resources,

00:16:45.510 --> 00:16:46.010
whatever.

00:16:46.010 --> 00:16:47.760
There's many situations
where you actually

00:16:47.760 --> 00:16:52.940
want a set of multiple languages
and locales that it can handle.

00:16:52.940 --> 00:16:54.010
So we now have that.

00:16:54.010 --> 00:16:56.720
So you can not only select
all these multiple languages,

00:16:56.720 --> 00:16:58.900
but you can reorder
them based on what

00:16:58.900 --> 00:17:00.310
you want to do in the device.

00:17:00.310 --> 00:17:02.880
And you can also add some of
the new languages and variants

00:17:02.880 --> 00:17:03.870
that we've added.

00:17:03.870 --> 00:17:06.069
So we've got a little
screen record here

00:17:06.069 --> 00:17:07.839
where we show how
you select this.

00:17:07.839 --> 00:17:09.160
You go into Languages.

00:17:09.160 --> 00:17:10.819
I only had one selected.

00:17:10.819 --> 00:17:11.869
I don't know why that is.

00:17:11.869 --> 00:17:14.249
So let's go in
and pick Deutsche.

00:17:14.249 --> 00:17:17.050
It actually means
German, not Dutch, just

00:17:17.050 --> 00:17:18.520
for your information.

00:17:18.520 --> 00:17:20.890
And I picked the
Liechtenstein variation of,

00:17:20.890 --> 00:17:22.510
because I thought
that was funny.

00:17:22.510 --> 00:17:24.359
And then I reordered
it and put it on first.

00:17:24.359 --> 00:17:26.210
And all of sudden,
I can't read my UI.

00:17:26.210 --> 00:17:28.910
Because now that has
become the primary language

00:17:28.910 --> 00:17:30.310
for the entire system.

00:17:30.310 --> 00:17:33.386
So Multi-Locale, please
go out and use it.

00:17:33.386 --> 00:17:34.510
Let's talk about Doze Mode.

00:17:34.510 --> 00:17:37.510
So we had Doze Mode in
Marshmallow already.

00:17:37.510 --> 00:17:39.780
So I'm going to do
a little review.

00:17:39.780 --> 00:17:44.150
I stole a diagram from
the System Health people

00:17:44.150 --> 00:17:46.467
so that-- I thought it was
pretty self-explanatory.

00:17:46.467 --> 00:17:48.050
I could just pop the
diagram up there.

00:17:48.050 --> 00:17:49.670
And you'll
immediately understand

00:17:49.670 --> 00:17:51.092
what Doze Mode is about.

00:17:51.092 --> 00:17:52.550
It's, I mean, it's
sort of obvious.

00:17:52.550 --> 00:17:54.710
But I'll use some
highlights and point out

00:17:54.710 --> 00:17:56.160
the important parts of this.

00:17:56.160 --> 00:17:59.270
First of all, Doze Mode kicks
in after a while the screen is

00:17:59.270 --> 00:18:02.170
off, the device is stationary,
and it's running on battery.

00:18:02.170 --> 00:18:03.429
So it runs for a while.

00:18:03.429 --> 00:18:04.970
And then, it goes
into this Doze Mode

00:18:04.970 --> 00:18:07.540
down there that you can see
the little green section

00:18:07.540 --> 00:18:08.040
down there.

00:18:08.040 --> 00:18:09.914
And then, there are
these maintenance windows

00:18:09.914 --> 00:18:13.110
that come along where now,
all of sudden, activities

00:18:13.110 --> 00:18:15.550
are allowed to actually
take part in the system,

00:18:15.550 --> 00:18:18.320
and do their normal stuff during
these maintenance windows.

00:18:18.320 --> 00:18:20.370
And then, we have
these recurring,

00:18:20.370 --> 00:18:23.740
an exponentially
increasing duration

00:18:23.740 --> 00:18:25.450
between these
maintenance windows.

00:18:25.450 --> 00:18:27.000
And so these happen over time.

00:18:27.000 --> 00:18:29.210
And then, in the meantime,
we have these Doze Modes

00:18:29.210 --> 00:18:31.070
where the activities
aren't doing much.

00:18:31.070 --> 00:18:32.580
There's no network activity.

00:18:32.580 --> 00:18:34.650
There's deferred jobs and syncs.

00:18:34.650 --> 00:18:35.977
There's no WakeLocks.

00:18:35.977 --> 00:18:36.560
It's all good.

00:18:36.560 --> 00:18:38.680
It allows the battery
to last a lot longer.

00:18:38.680 --> 00:18:40.716
So all of this is
self-explanatory.

00:18:40.716 --> 00:18:42.340
But then, let's go
in and talk about N.

00:18:42.340 --> 00:18:46.620
So in N, we have
all of that stuff.

00:18:46.620 --> 00:18:49.450
But then, we also have this
additional lighter weight

00:18:49.450 --> 00:18:54.039
Mode of Doze where now you don't
actually need to be stationary.

00:18:54.039 --> 00:18:55.580
So it's also
[? heavy ?] that a phone

00:18:55.580 --> 00:18:58.280
can be in someone's pocket
for a very long time and not

00:18:58.280 --> 00:18:59.270
actually being used.

00:18:59.270 --> 00:19:01.790
So wouldn't it be nice if the
activities weren't consuming

00:19:01.790 --> 00:19:03.310
a lot of battery at that time?

00:19:03.310 --> 00:19:06.722
So they detect this situation
where it's not stationary.

00:19:06.722 --> 00:19:07.930
They wait for a little while.

00:19:07.930 --> 00:19:09.550
And then, they go
into the Doze Mode.

00:19:09.550 --> 00:19:11.425
And then they have these
maintenance windows.

00:19:11.425 --> 00:19:13.310
You have lessened
activity, not as

00:19:13.310 --> 00:19:16.930
restrictive as the Marshmallow,
but similar concept here.

00:19:16.930 --> 00:19:20.690
And again, all
self-explanatory here.

00:19:20.690 --> 00:19:24.749
We'll notice on the diagram
that you have similar colors

00:19:24.749 --> 00:19:26.040
for some of the elements there.

00:19:26.040 --> 00:19:27.831
It must mean that
they're dozing similarly.

00:19:27.831 --> 00:19:30.330
And then finally, we
have similar barcodes.

00:19:30.330 --> 00:19:31.490
So all of this makes sense.

00:19:31.490 --> 00:19:31.990
[LAUGHTER]

00:19:31.990 --> 00:19:34.909
Let's point out that the
capabilities in N, the lighter

00:19:34.909 --> 00:19:36.450
weight Doze that I
was talking about,

00:19:36.450 --> 00:19:38.880
that's actually a superset
of the functionality already.

00:19:38.880 --> 00:19:42.480
We have all the stuff from N
when the device is actually

00:19:42.480 --> 00:19:45.890
stationary, plus this lighter
weight all at the same time.

00:19:45.890 --> 00:19:47.640
So if we really want
to make sense of it ,

00:19:47.640 --> 00:19:50.020
then we put the
diagrams together.

00:19:50.020 --> 00:19:51.580
And then, it looks
more like this.

00:19:51.580 --> 00:19:53.150
[LAUGHTER]

00:19:53.150 --> 00:19:55.110
So I think, as I
said, this is obvious.

00:19:55.110 --> 00:19:57.650
[APPLAUSE]

00:19:59.352 --> 00:20:01.310
Some people thought I
should use words in more.

00:20:01.310 --> 00:20:02.560
So we'll go quickly over that.

00:20:02.560 --> 00:20:04.760
In Marshmallow, you
have the device.

00:20:04.760 --> 00:20:05.530
The screen is off.

00:20:05.530 --> 00:20:06.790
It's on battery.

00:20:06.790 --> 00:20:08.062
And it's stationary.

00:20:08.062 --> 00:20:09.520
And at that time,
you're restricted

00:20:09.520 --> 00:20:10.478
from using the network.

00:20:10.478 --> 00:20:13.400
Your deferred job syncs,
alarms, no WakeLocks.

00:20:13.400 --> 00:20:16.050
Service is restricted in
N, lighter weight, all

00:20:16.050 --> 00:20:16.610
of the above.

00:20:16.610 --> 00:20:18.610
But it doesn't have to
actually be a stationary.

00:20:18.610 --> 00:20:21.490
It can be moving around in
your pocket or wherever.

00:20:21.490 --> 00:20:23.940
And it's then you have
a less of a restriction.

00:20:23.940 --> 00:20:26.230
Because there are some
background activity

00:20:26.230 --> 00:20:29.390
that's still valid to
take place at that time.

00:20:29.390 --> 00:20:32.130
Please go to the Battery and
Memory Optimizations talk

00:20:32.130 --> 00:20:35.390
today at 5:00 PM to learn more
details about this as well

00:20:35.390 --> 00:20:37.522
as other System Health stuff.

00:20:37.522 --> 00:20:39.480
And when I'm talking
about System Health stuff,

00:20:39.480 --> 00:20:40.932
let's talk about Project Svelte.

00:20:40.932 --> 00:20:43.390
So this is a project that was
started a couple releases ago

00:20:43.390 --> 00:20:46.770
to look at all the stuff that
is going on in the system that

00:20:46.770 --> 00:20:50.110
is causing the battery to
drain significantly, and then

00:20:50.110 --> 00:20:53.750
see what we can tell developers
to do to fix their applications

00:20:53.750 --> 00:20:56.510
and address that need, and also
what we can do on the platform

00:20:56.510 --> 00:20:57.610
side.

00:20:57.610 --> 00:20:59.645
So we did that.

00:20:59.645 --> 00:21:02.437
And in N, you can say goodbye
to the following actions.

00:21:02.437 --> 00:21:04.020
I'm sure we'll all
miss them terribly.

00:21:04.020 --> 00:21:05.000
But they had to go.

00:21:05.000 --> 00:21:07.550
So there were these
situations that we detected,

00:21:07.550 --> 00:21:09.220
in the research
that that team was

00:21:09.220 --> 00:21:11.930
doing, where something
would happen,

00:21:11.930 --> 00:21:13.370
like a connectivity action.

00:21:13.370 --> 00:21:15.155
A message would occur.

00:21:15.155 --> 00:21:16.780
And all these activities
would wake up.

00:21:16.780 --> 00:21:18.529
Because they really,
really, really wanted

00:21:18.529 --> 00:21:20.979
to know when the
Wi-Fi network changed.

00:21:20.979 --> 00:21:23.020
So you're walking around
your corporate building,

00:21:23.020 --> 00:21:24.960
moving from one
router to the next.

00:21:24.960 --> 00:21:26.490
And all these
activities wake up.

00:21:26.490 --> 00:21:28.140
And they say, OK, what's to do?

00:21:28.140 --> 00:21:28.640
Nothing.

00:21:28.640 --> 00:21:29.810
And then they would
go back to sleep.

00:21:29.810 --> 00:21:31.600
And in the meantime,
the system is thrashing.

00:21:31.600 --> 00:21:32.850
Because they're all waking up.

00:21:32.850 --> 00:21:35.120
They can't all fit in
memory at the same time.

00:21:35.120 --> 00:21:37.690
So we're killing off old ones
so that the new ones can start.

00:21:37.690 --> 00:21:40.300
And we just get into this
horrible thrashing situation.

00:21:40.300 --> 00:21:42.910
Similarly, for new
videos and new pictures,

00:21:42.910 --> 00:21:44.390
the user took a picture.

00:21:44.390 --> 00:21:48.690
And some expense report
application on your phone

00:21:48.690 --> 00:21:50.800
decides, oh, it wants to
know about new pictures.

00:21:50.800 --> 00:21:53.030
Because maybe they took
a picture of a receipt.

00:21:53.030 --> 00:21:56.640
So the activity wakes up along
with 40 of its best friends.

00:21:56.640 --> 00:21:59.461
And realizes that it does
not care about the picture

00:21:59.461 --> 00:22:00.710
of the cat that you just took.

00:22:00.710 --> 00:22:02.043
And then, it goes back to sleep.

00:22:02.043 --> 00:22:03.370
So similar thrashing.

00:22:03.370 --> 00:22:06.260
Why don't we reduce that
stuff and make the battery

00:22:06.260 --> 00:22:08.790
and lifetime of the device
much better for the user

00:22:08.790 --> 00:22:10.420
by simply not sending
those anymore?

00:22:10.420 --> 00:22:13.187
Instead, the new approach
is to use JobScheduler,

00:22:13.187 --> 00:22:15.770
which we have been talking about
for a couple of releases now.

00:22:15.770 --> 00:22:18.353
In particular, there's a new API
that you should pay attention

00:22:18.353 --> 00:22:22.030
to that allows you to ask
for when content has changed.

00:22:22.030 --> 00:22:23.990
Not immediately, because
that was the problem

00:22:23.990 --> 00:22:25.110
with the old approach.

00:22:25.110 --> 00:22:27.590
But eventually, when
that job gets scheduled,

00:22:27.590 --> 00:22:30.680
then you can find out if there's
new media that you care about.

00:22:30.680 --> 00:22:33.710
Again, go to the Battery and
Memory Optimizations session

00:22:33.710 --> 00:22:35.350
to learn more about this stuff.

00:22:35.350 --> 00:22:37.266
DAN SANDLER: And then,
that app can absolutely

00:22:37.266 --> 00:22:38.572
let you expense that cat.

00:22:38.572 --> 00:22:40.030
CHET HAASE: Yes.
[CHUCKLES] Yes, it

00:22:40.030 --> 00:22:42.154
turns out that that
[INAUDIBLE] was a valid picture

00:22:42.154 --> 00:22:43.170
for the expense report.

00:22:43.170 --> 00:22:43.890
Yeah, good point.

00:22:43.890 --> 00:22:45.560
Thanks.

00:22:45.560 --> 00:22:49.635
All right, Data Saver, it is
now possible for the user to--

00:22:51.815 --> 00:22:52.815
DAN SANDLER: [INAUDIBLE]

00:22:52.815 --> 00:22:55.430
CHET HAASE: --tell the
device, tell the system

00:22:55.430 --> 00:22:57.530
that it wants to restrict
the amount of data

00:22:57.530 --> 00:22:59.840
that specific apps are using.

00:22:59.840 --> 00:23:01.660
So here, in the
place that I live,

00:23:01.660 --> 00:23:03.730
I really don't worry
too much about Wi-Fi.

00:23:03.730 --> 00:23:06.010
And I'm on a data plan
where I'm not really capped.

00:23:06.010 --> 00:23:07.150
It's not that big a deal.

00:23:07.150 --> 00:23:09.480
That is not true the
world over, obviously.

00:23:09.480 --> 00:23:11.380
People may pay
really high premiums

00:23:11.380 --> 00:23:13.660
on their network access.

00:23:13.660 --> 00:23:15.640
Or it may be really slow.

00:23:15.640 --> 00:23:18.810
So they don't want everyone to
use up the limited bandwidth

00:23:18.810 --> 00:23:19.540
that they have.

00:23:19.540 --> 00:23:21.080
Or maybe they're metered.

00:23:21.080 --> 00:23:22.760
So there, we're giving
them the ability

00:23:22.760 --> 00:23:24.950
to really clamp
down on that and not

00:23:24.950 --> 00:23:27.340
only tell us to use
less data, but also

00:23:27.340 --> 00:23:29.740
to tell specific apps
whether they are allowed

00:23:29.740 --> 00:23:32.141
to use data, restricted or not.

00:23:32.141 --> 00:23:34.390
So there's a place where you
can go in System Settings

00:23:34.390 --> 00:23:36.210
now where you can
basically toggle this

00:23:36.210 --> 00:23:37.787
on a per-application basis.

00:23:37.787 --> 00:23:39.620
On the developer's side,
that means that you

00:23:39.620 --> 00:23:41.710
need to pay attention to this.

00:23:41.710 --> 00:23:43.600
Because you may be
restricted at any time.

00:23:43.600 --> 00:23:45.490
So there's mechanisms
in the system for you

00:23:45.490 --> 00:23:47.500
to find out whether
this is happening

00:23:47.500 --> 00:23:50.500
so you can query for the
connectivity service,

00:23:50.500 --> 00:23:53.100
and then find out
whether you're A, metered

00:23:53.100 --> 00:23:55.510
on a metered network
at the time, and B,

00:23:55.510 --> 00:23:58.380
whether Backgrounds
access is actually

00:23:58.380 --> 00:24:01.570
restricted at that time.

00:24:01.570 --> 00:24:04.300
ROMAIN GUY: Direct Boot, one
of my favorite new features

00:24:04.300 --> 00:24:07.210
in Android N. So if you have
a PIN code set on your device,

00:24:07.210 --> 00:24:09.529
and you've encrypted the
device, if the device happens

00:24:09.529 --> 00:24:11.820
to reboot for some reason--
because you took an update,

00:24:11.820 --> 00:24:13.500
or we have automatic
update, or because

00:24:13.500 --> 00:24:16.380
of a spontaneous
reboot-- you would

00:24:16.380 --> 00:24:19.697
find your device sometimes
sitting on the PIN code screen,

00:24:19.697 --> 00:24:21.280
waiting for you to
enter the PIN code.

00:24:21.280 --> 00:24:24.480
And you might be missing text
messages, or emails, or even

00:24:24.480 --> 00:24:25.309
phone calls.

00:24:25.309 --> 00:24:26.850
So now, what the
system does instead,

00:24:26.850 --> 00:24:28.641
it will boot all the
way to the lock screen

00:24:28.641 --> 00:24:31.200
before asking for your PIN code.

00:24:31.200 --> 00:24:33.370
And until you enter
your PIN code,

00:24:33.370 --> 00:24:35.259
some applications
will be able to run.

00:24:35.259 --> 00:24:36.800
And you can register
your application

00:24:36.800 --> 00:24:38.850
to be able to run in this
Direct Boot Mode, which

00:24:38.850 --> 00:24:40.600
means that sitting on
that locked screen,

00:24:40.600 --> 00:24:42.766
you will have access to
some of the functionalities,

00:24:42.766 --> 00:24:44.909
like getting phone
calls or text messages.

00:24:44.909 --> 00:24:46.450
So if you want to
know more about it,

00:24:46.450 --> 00:24:48.741
if you want to know what you
can do in your application

00:24:48.741 --> 00:24:51.100
to enable that Mode,
please attend the talk

00:24:51.100 --> 00:24:52.280
on Thursday at 9:00 AM.

00:24:52.280 --> 00:24:55.380
It's going to be in the
Android Security talk.

00:24:55.380 --> 00:24:57.900
Another feature that's
been widely requested

00:24:57.900 --> 00:25:01.560
was access to
specific directories

00:25:01.560 --> 00:25:03.090
on the external storage.

00:25:03.090 --> 00:25:05.100
So if your application
needs to look

00:25:05.100 --> 00:25:08.000
at the pictures, or the music,
or the videos, or whatever

00:25:08.000 --> 00:25:10.400
on the user's external
storage, up until now

00:25:10.400 --> 00:25:13.260
you had to request access
for the entire storage.

00:25:13.260 --> 00:25:14.920
And it was a bit of
a scary permission

00:25:14.920 --> 00:25:17.260
for users when they were
downloading the application

00:25:17.260 --> 00:25:18.440
from the Play Store.

00:25:18.440 --> 00:25:20.795
So now instead, as we see
here in the screenshot,

00:25:20.795 --> 00:25:22.520
your application
can specifically

00:25:22.520 --> 00:25:26.260
request access to one Directory,
like pictures or just music.

00:25:26.260 --> 00:25:29.020
And combined with the new
permission system in N,

00:25:29.020 --> 00:25:30.430
it becomes very
clear to the user

00:25:30.430 --> 00:25:32.090
what the application
is trying to do

00:25:32.090 --> 00:25:35.481
and what the application is
going to be able to access.

00:25:38.370 --> 00:25:39.934
CHET HAASE: So
Android for Work, I

00:25:39.934 --> 00:25:41.600
would encourage you
go to their session.

00:25:41.600 --> 00:25:42.890
There's a lot of
stuff going on there.

00:25:42.890 --> 00:25:44.380
I just wanted to
call out a couple

00:25:44.380 --> 00:25:46.770
of features in
particular in Android

00:25:46.770 --> 00:25:48.080
for Work in this release.

00:25:48.080 --> 00:25:50.830
So go to the session Thursday,
2:00 AM, Your Apps at Work.

00:25:50.830 --> 00:25:51.970
Please tune into that.

00:25:51.970 --> 00:25:54.710
But in the meantime, if you
have a work profile installed

00:25:54.710 --> 00:25:56.251
on your phone, there
is a new feature

00:25:56.251 --> 00:26:00.010
called Work Mode, which actually
it's about disabling Work Mode.

00:26:00.010 --> 00:26:02.142
So it sort of, let's
put an exclamation point

00:26:02.142 --> 00:26:02.850
in front of that.

00:26:02.850 --> 00:26:04.000
Not Work Mode.

00:26:04.000 --> 00:26:06.630
Basically, you can go
into Quick Settings

00:26:06.630 --> 00:26:08.392
and easily toggle it off.

00:26:08.392 --> 00:26:10.350
And you'll see-- I don't
know if you can see it

00:26:10.350 --> 00:26:14.070
on the screen-- the Work
Profile applications were

00:26:14.070 --> 00:26:15.050
just disabled.

00:26:15.050 --> 00:26:16.120
So if you click on
one of those, you'll

00:26:16.120 --> 00:26:17.730
get a little dialog
saying, no, no, no, that's

00:26:17.730 --> 00:26:18.780
disabled right now.

00:26:18.780 --> 00:26:20.400
So it's easy to turn
that on and off.

00:26:20.400 --> 00:26:21.941
So you can spend
the weekend actually

00:26:21.941 --> 00:26:25.190
not checking work email
if that's your choice.

00:26:25.190 --> 00:26:27.770
There's also something
called Work Challenge, which

00:26:27.770 --> 00:26:30.390
can hopefully get away from
some of the ugly authentication

00:26:30.390 --> 00:26:32.090
stuff that companies
have had to do.

00:26:32.090 --> 00:26:34.589
So they require this
extra restrictive password

00:26:34.589 --> 00:26:35.630
stuff on the lock screen.

00:26:35.630 --> 00:26:36.840
They don't need to
do that anymore.

00:26:36.840 --> 00:26:38.510
Instead, they can
provide a password

00:26:38.510 --> 00:26:42.870
that is only used when one of
the Work Profile apps runs.

00:26:42.870 --> 00:26:45.620
So we'll see a little
screen record of that.

00:26:45.620 --> 00:26:47.860
So you want a Work Profile app.

00:26:47.860 --> 00:26:50.140
It confirms your password here.

00:26:50.140 --> 00:26:51.012
It launches the app.

00:26:51.012 --> 00:26:53.220
Now, if you go in and run
one of the other Work apps,

00:26:53.220 --> 00:26:54.730
it just goes
immediately into it.

00:26:54.730 --> 00:26:56.570
Because you've
already authenticated

00:26:56.570 --> 00:26:59.012
into the entire system.

00:26:59.012 --> 00:27:00.470
ROMAIN GUY: So now,
the real reason

00:27:00.470 --> 00:27:02.979
why we're here, the
features for developers.

00:27:02.979 --> 00:27:05.270
So the first big one was also
mentioned in the keynote.

00:27:05.270 --> 00:27:07.470
It's changes to the runtime.

00:27:07.470 --> 00:27:09.470
So now, we have a much
faster interpreter, which

00:27:09.470 --> 00:27:11.420
means when your
application is installed,

00:27:11.420 --> 00:27:14.010
it's not compiled
ahead-of-time like in Lollipop

00:27:14.010 --> 00:27:14.850
and Marshmallow.

00:27:14.850 --> 00:27:16.910
It's first going to run
into Interpreting Mode.

00:27:16.910 --> 00:27:20.290
And when the JIT sees pieces
of code in your application

00:27:20.290 --> 00:27:23.150
that run very often, or that
would benefit from a higher

00:27:23.150 --> 00:27:25.770
performance, it's going to
kick in and compile things Just

00:27:25.770 --> 00:27:26.530
In Time.

00:27:26.530 --> 00:27:28.670
Then, when your device
goes into Idle Mode,

00:27:28.670 --> 00:27:31.640
we're going to use some of the
information gathered by the JIT

00:27:31.640 --> 00:27:34.170
to precompile ahead-of-time
part of the application.

00:27:34.170 --> 00:27:37.500
So we're really doing three
things-- interpreter, JIT,

00:27:37.500 --> 00:27:39.607
and ahead-of-time compilation.

00:27:39.607 --> 00:27:40.690
So it took us a few years.

00:27:40.690 --> 00:27:41.981
We tried all three in the past.

00:27:41.981 --> 00:27:45.420
So now, we're doing all
three at the same time.

00:27:45.420 --> 00:27:47.780
I really recommend that you
attend the talk on Friday

00:27:47.780 --> 00:27:50.360
at 1:00 PM from the ART
team, The Evolution of ART.

00:27:50.360 --> 00:27:52.670
They're going to give you
way more details about how

00:27:52.670 --> 00:27:54.460
all that works.

00:27:54.460 --> 00:27:56.420
We also have new
Runtime Libraries.

00:27:56.420 --> 00:27:59.920
One of the big new ones, ICU4J,
it's now part of the framework.

00:27:59.920 --> 00:28:02.520
ICU is a Library that's
useful for globalization,

00:28:02.520 --> 00:28:04.370
internet civilization
of your application.

00:28:04.370 --> 00:28:06.095
It's a fairly large Library.

00:28:06.095 --> 00:28:07.580
So it's now part
of the framework

00:28:07.580 --> 00:28:09.246
with a different
package name so that we

00:28:09.246 --> 00:28:11.190
don't clash with the
existing package names.

00:28:11.190 --> 00:28:13.273
And you can now rely on
it being in the framework.

00:28:13.273 --> 00:28:15.460
So you can reduce
the size of APK.

00:28:15.460 --> 00:28:18.680
We also added some new
java.util packages.

00:28:18.680 --> 00:28:20.590
So there's
java.util.function that

00:28:20.590 --> 00:28:23.930
contains classes and APIs that
are useful for functional style

00:28:23.930 --> 00:28:25.290
programming, like Predicates.

00:28:25.290 --> 00:28:27.280
We also have the
new Streaming API

00:28:27.280 --> 00:28:30.000
that is extremely useful
when you combine it with some

00:28:30.000 --> 00:28:31.467
of the new Language Features.

00:28:31.467 --> 00:28:33.300
So if you want to use
some of the new Java 8

00:28:33.300 --> 00:28:35.860
programming Language Features,
you have to change your gradle

00:28:35.860 --> 00:28:38.620
[? build ?] file to switch
to the new Jack compiler.

00:28:38.620 --> 00:28:41.630
You also have to say that
you want source and binary

00:28:41.630 --> 00:28:46.360
compatibility with the 1.8
version of the programming

00:28:46.360 --> 00:28:47.210
language.

00:28:47.210 --> 00:28:50.370
And when you do that, you have
access to Lambdas functions.

00:28:50.370 --> 00:28:54.470
So Lambdas are implemented using
anonymous in your classes--

00:28:54.470 --> 00:28:57.020
speaking too
quickly-- which means

00:28:57.020 --> 00:28:59.640
they're backward compatible all
the way back to Gingerbread.

00:28:59.640 --> 00:29:01.557
So you have some examples
of what Lambdas are.

00:29:01.557 --> 00:29:04.015
If you don't know what they
are, if you've never used them,

00:29:04.015 --> 00:29:06.186
there's tons of documentations
and articles online.

00:29:06.186 --> 00:29:07.540
Go look at them.

00:29:07.540 --> 00:29:09.290
It's going to make
your life a lot better,

00:29:09.290 --> 00:29:12.940
especially if you use things
like RxJava or just the Android

00:29:12.940 --> 00:29:14.730
UI framework, anything
that requires a lot

00:29:14.730 --> 00:29:18.975
of [? re-centers. ?] Lambdas
make it a lot easier.

00:29:18.975 --> 00:29:20.850
Just be careful, though,
because those things

00:29:20.850 --> 00:29:21.891
create anonymous classes.

00:29:24.140 --> 00:29:26.640
They are little more costly
than this seems, than they seem.

00:29:26.640 --> 00:29:30.710
But it shouldn't matter
much in most applications.

00:29:30.710 --> 00:29:33.444
Default and Static Interface
Methods, two very useful

00:29:33.444 --> 00:29:34.985
features that are
not, unfortunately,

00:29:34.985 --> 00:29:36.389
backward compatible.

00:29:36.389 --> 00:29:37.930
So if you have an
existing interface,

00:29:37.930 --> 00:29:40.230
you can now add new methods
and pull our default

00:29:40.230 --> 00:29:42.270
implementations,
very much like what

00:29:42.270 --> 00:29:43.850
you can do in abstract classes.

00:29:43.850 --> 00:29:47.810
Again, very useful to move your
APS forward without breaking

00:29:47.810 --> 00:29:50.585
everything or your clients.

00:29:50.585 --> 00:29:53.934
And you can even use them
to create the famous adapter

00:29:53.934 --> 00:29:56.350
pattern that you've probably
seen with a lot of listeners.

00:29:56.350 --> 00:29:58.640
So you have a listener that
has several callback methods.

00:29:58.640 --> 00:30:00.264
And typically, there's
an adapter class

00:30:00.264 --> 00:30:02.254
that comes next to it
that has just an [? MT ?]

00:30:02.254 --> 00:30:04.670
implementation of all these
methods, so that when you want

00:30:04.670 --> 00:30:06.767
to implement only
one of the methods,

00:30:06.767 --> 00:30:08.350
you don't have to
declare all of them.

00:30:08.350 --> 00:30:10.910
So it's very easy to do now
with the default methods.

00:30:10.910 --> 00:30:15.200
And you can also have Static
Methods on interfaces.

00:30:15.200 --> 00:30:17.514
Repeating annotations,
I'm sure many of you

00:30:17.514 --> 00:30:19.430
are using all those fancy
frameworks with tons

00:30:19.430 --> 00:30:21.180
annotations, but
love that feature.

00:30:21.180 --> 00:30:23.710
It's also, unfortunately,
not backward-compatible.

00:30:23.710 --> 00:30:25.545
But it means that now
a single notation--

00:30:25.545 --> 00:30:29.060
there's is an example at
the bottom-- @Exportable--

00:30:29.060 --> 00:30:32.520
can be written several
times on the same type.

00:30:32.520 --> 00:30:34.214
So for instance,
here, we have a class

00:30:34.214 --> 00:30:36.630
that we want to be able to
serialize in different formats.

00:30:36.630 --> 00:30:39.220
We can just repeat annotation
instead of using arrays

00:30:39.220 --> 00:30:42.250
of values in the annotation.

00:30:42.250 --> 00:30:44.770
The Audio Team, the Media Team
has been working really hard

00:30:44.770 --> 00:30:47.650
in previous versions of Android
to reduce audio latency.

00:30:47.650 --> 00:30:50.350
Most of that work previously
was done in the native levels

00:30:50.350 --> 00:30:51.480
of the system.

00:30:51.480 --> 00:30:55.215
And in end, they worked
reducing the latency of audio

00:30:55.215 --> 00:30:58.250
in the upper levels.

00:30:58.250 --> 00:31:00.870
So you can expect, depending
on your device of course,

00:31:00.870 --> 00:31:04.749
a 40- to 70-millisecond latency
reduction when you play audio.

00:31:04.749 --> 00:31:05.790
It's very easy to enable.

00:31:05.790 --> 00:31:07.590
There's an example
right here on-screen.

00:31:07.590 --> 00:31:10.460
When you create the audio
attributes for your media

00:31:10.460 --> 00:31:12.909
player, you can just set
the Flag Low Latency.

00:31:12.909 --> 00:31:15.200
And we're going to give you
access to that new feature.

00:31:15.200 --> 00:31:16.991
There's also a couple
new APIs that you can

00:31:16.991 --> 00:31:18.220
use to improve the playback.

00:31:18.220 --> 00:31:20.130
You can create the
number of underruns

00:31:20.130 --> 00:31:23.560
that happen while you're
playing your media back.

00:31:23.560 --> 00:31:25.160
And you can also
dynamically resize

00:31:25.160 --> 00:31:27.910
your buffers to take action when
there are too many underruns.

00:31:27.910 --> 00:31:29.150
If you want to
know more about it,

00:31:29.150 --> 00:31:30.566
especially if you
want to know how

00:31:30.566 --> 00:31:33.290
to use the underlying
native APIs to increase

00:31:33.290 --> 00:31:36.310
your latency even further, you
can go to the talk on Thursday

00:31:36.310 --> 00:31:38.350
at 3:00 PM.

00:31:38.350 --> 00:31:40.260
Renderscript, a bunch
of improvements.

00:31:40.260 --> 00:31:41.800
It's now in the
single source file.

00:31:41.800 --> 00:31:44.960
You can have many kernels
that cannot call one another.

00:31:44.960 --> 00:31:46.510
It makes it a lot
easier to create

00:31:46.510 --> 00:31:49.450
complex computes programs.

00:31:49.450 --> 00:31:50.800
We also have reduction kernels.

00:31:50.800 --> 00:31:53.119
So you can do a Map
Reduce type of API.

00:31:53.119 --> 00:31:55.160
For instance, if you need
to compute a histogram,

00:31:55.160 --> 00:31:56.890
you can do that with
a reduce kernel.

00:31:56.890 --> 00:31:59.010
You have access to
multiple images.

00:31:59.010 --> 00:32:00.716
We added
Allocation.getByteBuffer,

00:32:00.716 --> 00:32:02.090
which is going to
help you reduce

00:32:02.090 --> 00:32:05.350
the number of Allocations that
happen when run a Renderscript

00:32:05.350 --> 00:32:05.850
kernel.

00:32:05.850 --> 00:32:09.630
And finally, if you do a lot of,
if you process a lot of data,

00:32:09.630 --> 00:32:11.910
we have support for
a 16-bit floating

00:32:11.910 --> 00:32:14.382
points, which helps you cut
the size of your data in half.

00:32:14.382 --> 00:32:15.840
And if the precision
works for you,

00:32:15.840 --> 00:32:18.310
you should definitely
look into it.

00:32:18.310 --> 00:32:21.237
For graphics people out
there, OpenGL ES 3.2,

00:32:21.237 --> 00:32:22.820
that's the newest
version of OpenGL ES

00:32:22.820 --> 00:32:25.930
that we ship with Android
N, it is effectively

00:32:25.930 --> 00:32:28.760
OpenGL ES 3.1 plus something
that's called the Android

00:32:28.760 --> 00:32:29.530
extension pack.

00:32:29.530 --> 00:32:33.530
The Android extension pack was
a bundle of OpenGL extensions

00:32:33.530 --> 00:32:36.090
that if the
extension pack itself

00:32:36.090 --> 00:32:38.590
was present on the device, you
are guaranteed to have access

00:32:38.590 --> 00:32:39.870
to all those extensions.

00:32:39.870 --> 00:32:42.720
It was making the life of OpenGL
ES developers a lot easier.

00:32:42.720 --> 00:32:46.040
So this has been folded into the
actual specification of OpenGL

00:32:46.040 --> 00:32:48.430
ES 3.2, except one
of the extensions

00:32:48.430 --> 00:32:50.184
that you can see on the slide.

00:32:50.184 --> 00:32:52.350
And some of the highlights
include advanced blending

00:32:52.350 --> 00:32:52.880
equations.

00:32:52.880 --> 00:32:55.379
So now, the hardware can take
care of doing all the blending

00:32:55.379 --> 00:32:58.400
Modes that you find in Photoshop
or their Image Processing

00:32:58.400 --> 00:32:59.220
Application.

00:32:59.220 --> 00:33:01.261
You don't have to write
shaders for that anymore.

00:33:01.261 --> 00:33:02.170
It's part of OpenGL.

00:33:02.170 --> 00:33:04.299
You can use tessellation
and geometry shaders.

00:33:04.299 --> 00:33:06.590
Those are very useful to
generate geometry at run time.

00:33:06.590 --> 00:33:09.537
So typically, what you can do is
you have a fairly simple mesh.

00:33:09.537 --> 00:33:11.370
And as the camera gets
closer to the object,

00:33:11.370 --> 00:33:13.490
you can add more and more
triangles dynamically

00:33:13.490 --> 00:33:15.160
to make it look
smoother on screen

00:33:15.160 --> 00:33:17.440
without paying a huge
memory cost or performance

00:33:17.440 --> 00:33:19.470
cost when you don't need
those extra triangles.

00:33:19.470 --> 00:33:21.136
There's a new texture
compression format

00:33:21.136 --> 00:33:23.880
called ASTC and a
couple of other features

00:33:23.880 --> 00:33:27.567
that, if you use OpenGL ES,
you will care very much about.

00:33:27.567 --> 00:33:29.400
Vulkan was also mentioned
in the keynote, so

00:33:29.400 --> 00:33:31.129
a little more details.

00:33:31.129 --> 00:33:33.170
There's going to be a talk
about it on the, well,

00:33:33.170 --> 00:33:34.440
today at 6:00 PM.

00:33:34.440 --> 00:33:37.470
So Vulkan's a low-level
API to the graphics.

00:33:37.470 --> 00:33:40.100
It's lower-level than OpenGL.

00:33:40.100 --> 00:33:42.350
In some way, you effectively
become the driver.

00:33:42.350 --> 00:33:44.989
So you can generate
commands for the GPU

00:33:44.989 --> 00:33:46.530
from multiple threads,
which is going

00:33:46.530 --> 00:33:50.670
to help improve the efficiency
of your application.

00:33:50.670 --> 00:33:53.150
There's no, not as much
overhead in the driver itself.

00:33:53.150 --> 00:33:54.490
So you can make more draw calls.

00:33:54.490 --> 00:33:56.560
You can put more
objects on-screen.

00:33:56.560 --> 00:33:58.754
You can also precompile
your shaders offline,

00:33:58.754 --> 00:34:00.295
which is very useful
to do validation

00:34:00.295 --> 00:34:02.750
or to do heavy optimizations,
because the drivers

00:34:02.750 --> 00:34:05.700
on the device try to find a
balance between optimizing

00:34:05.700 --> 00:34:08.310
your shaders and not spending
too much time compiling them.

00:34:08.310 --> 00:34:09.840
It's also a cross-platform API.

00:34:09.840 --> 00:34:13.040
So Vulkan, as it
exists in Android N,

00:34:13.040 --> 00:34:15.920
is the same as the Vulkan you
will find on Windows and Linux.

00:34:15.920 --> 00:34:17.480
The drivers are shipping today.

00:34:17.480 --> 00:34:20.370
So you can even write your
code on your desktop machine,

00:34:20.370 --> 00:34:23.370
and then run it on
your mobile device.

00:34:23.370 --> 00:34:25.385
It's also a little more
difficult in OpenGL ES.

00:34:25.385 --> 00:34:29.803
You have to do explicit memory
management and synchronization.

00:34:29.803 --> 00:34:31.511
So we're going probably
see a huge uptick

00:34:31.511 --> 00:34:33.150
in Vulkan in middleware.

00:34:33.150 --> 00:34:36.150
So engines like Unity
or Unreal Engine

00:34:36.150 --> 00:34:39.090
are working on supporting Vulkan
or have support for Vulkan.

00:34:39.090 --> 00:34:41.639
So if you're using one of those
engines, you're good to go.

00:34:41.639 --> 00:34:43.681
Your apps are going
to be better for free.

00:34:43.681 --> 00:34:45.139
CHET HAASE: There
were improvements

00:34:45.139 --> 00:34:48.850
to adb in terms of both
functionality as well

00:34:48.850 --> 00:34:49.787
as performance.

00:34:49.787 --> 00:34:51.620
So we made it a lot
more full-featured, more

00:34:51.620 --> 00:34:52.500
like a real shell.

00:34:52.500 --> 00:34:55.290
So you can actually get a lot
more content from, let's say,

00:34:55.290 --> 00:34:56.580
LS.

00:34:56.580 --> 00:34:59.620
You can also take the results
from things that happen in adb

00:34:59.620 --> 00:35:01.960
and actually pipe them to
other processes on the host.

00:35:01.960 --> 00:35:04.437
So much more full-featured
stuff that you can do with that.

00:35:04.437 --> 00:35:06.770
And then, there were also
major performance improvements

00:35:06.770 --> 00:35:08.435
made specifically
to push and pull

00:35:08.435 --> 00:35:10.530
by a really complex
algorithm known

00:35:10.530 --> 00:35:13.314
as increasing the buffer size.

00:35:13.314 --> 00:35:15.050
[LAUGHTER]

00:35:15.050 --> 00:35:17.570
So that's how we do
things here at Google.

00:35:17.570 --> 00:35:18.830
[LAUGHTER]

00:35:18.830 --> 00:35:19.330
So--

00:35:19.330 --> 00:35:19.743
DAN SANDLER: Go yo--

00:35:19.743 --> 00:35:21.470
CHET HAASE: If you knew adb,
you don't really have a choice.

00:35:21.470 --> 00:35:22.449
But you'll enjoy it.

00:35:22.449 --> 00:35:24.240
ROMAIN GUY: Getting
the process exit status

00:35:24.240 --> 00:35:28.350
and being able to pipe
the standard input

00:35:28.350 --> 00:35:31.040
to the remote device is
particularly useful to automate

00:35:31.040 --> 00:35:32.250
testing, for instance.

00:35:32.250 --> 00:35:34.541
You can run a lot of things
automatically on the device

00:35:34.541 --> 00:35:35.870
and get the correct results.

00:35:35.870 --> 00:35:37.870
All our changes
to the NDK, we've

00:35:37.870 --> 00:35:41.880
upgraded Clang to
3.8 and GCC to 4.9.

00:35:41.880 --> 00:35:43.510
But even though
we've updated GCC,

00:35:43.510 --> 00:35:45.070
this is the last
version of GCC that

00:35:45.070 --> 00:35:46.840
will be supported by the NDK.

00:35:46.840 --> 00:35:49.160
So if you're still
using GCC, NDK now

00:35:49.160 --> 00:35:51.170
it's time to test your
application with Clang.

00:35:51.170 --> 00:35:53.780
It's time to move
on, I would say.

00:35:53.780 --> 00:35:57.190
And we also made the default,
the arm7 architecture

00:35:57.190 --> 00:35:59.980
the default. So you can forget
about the old architecture.

00:35:59.980 --> 00:36:02.230
So your banner
is, should benefit

00:36:02.230 --> 00:36:06.040
from more
optimizations that make

00:36:06.040 --> 00:36:08.399
more sense for today's devices.

00:36:08.399 --> 00:36:09.940
CHET HAASE: VR, we
heard a little bit

00:36:09.940 --> 00:36:12.580
about that in the keynotes.

00:36:12.580 --> 00:36:14.330
And you're going to
hear a little bit more

00:36:14.330 --> 00:36:16.560
about that the rest of the week.

00:36:16.560 --> 00:36:18.810
I wanted to talk about the
massive servers area of API

00:36:18.810 --> 00:36:20.250
that you need to be aware of.

00:36:20.250 --> 00:36:22.777
First of all, you need to
know about the features

00:36:22.777 --> 00:36:23.360
on the device.

00:36:23.360 --> 00:36:25.568
The devices are a little
specific to the capabilities

00:36:25.568 --> 00:36:27.450
that they have as we
heard in the keynote.

00:36:27.450 --> 00:36:32.180
And then, next, there's this API
that you need to be aware of.

00:36:32.180 --> 00:36:34.670
And I would say, for
the rest of the details,

00:36:34.670 --> 00:36:35.780
please go to the session.

00:36:35.780 --> 00:36:37.690
It turns out, there
are a lot of them.

00:36:37.690 --> 00:36:40.780
Last time I looked,
like 18 sessions on VR.

00:36:40.780 --> 00:36:41.530
So take your pick.

00:36:41.530 --> 00:36:42.580
I think one of the big
ones, where they're

00:36:42.580 --> 00:36:44.663
going to talk about some
of the technical details,

00:36:44.663 --> 00:36:46.530
are tomorrow morning
at 9:00 perhaps.

00:36:46.530 --> 00:36:48.470
But look on the schedule.

00:36:48.470 --> 00:36:52.254
You'll know if it uses
the phrase VR in it.

00:36:52.254 --> 00:36:52.920
It's kind of a--

00:36:52.920 --> 00:36:53.960
DAN SANDLER: Sorry,
was that V, VR?

00:36:53.960 --> 00:36:54.705
CHET HAASE: VR.

00:36:54.705 --> 00:36:56.440
And notice that's four quotes.

00:36:56.440 --> 00:36:57.300
That's not just two.

00:36:57.300 --> 00:36:57.540
That's four quotes.

00:36:57.540 --> 00:36:58.220
DAN SANDLER: That's four quotes?

00:36:58.220 --> 00:36:58.990
OK.

00:36:58.990 --> 00:36:59.586
CHET HAASE: On each side.

00:36:59.586 --> 00:37:00.260
All right.

00:37:00.260 --> 00:37:02.170
ROMAIN GUY: I would
just add if you're not

00:37:02.170 --> 00:37:05.990
writing a VR experience,
a game, or virtual museum,

00:37:05.990 --> 00:37:08.230
or whatever, this
API is not for you.

00:37:08.230 --> 00:37:10.040
Do not turn it on
in your application

00:37:10.040 --> 00:37:10.960
just because you
think it's going

00:37:10.960 --> 00:37:12.060
to make your app grow faster.

00:37:12.060 --> 00:37:12.970
That is not for you.

00:37:12.970 --> 00:37:14.820
It's only for VR people.

00:37:14.820 --> 00:37:16.600
CHET HAASE:
[CHUCKLES] All right.

00:37:16.600 --> 00:37:17.100
Not for you.

00:37:17.100 --> 00:37:18.100
ROMAIN GUY: Not for you.

00:37:18.100 --> 00:37:19.205
[LAUGHTER]

00:37:19.205 --> 00:37:22.890
CHET HAASE: All right, Support
Library, this is not new in N.

00:37:22.890 --> 00:37:24.800
But I wanted to talk
briefly and quickly

00:37:24.800 --> 00:37:27.720
about some of the things that
have been in recent releases.

00:37:27.720 --> 00:37:30.080
So in the 23.2 release,
we had a bunch of stuff

00:37:30.080 --> 00:37:31.870
that people were
looking forward to.

00:37:31.870 --> 00:37:33.203
There's Night Mode capabilities.

00:37:33.203 --> 00:37:35.620
So the ability for
your application to

00:37:35.620 --> 00:37:38.720
quickly toggle between
light and dark themes.

00:37:38.720 --> 00:37:43.200
The Bottom Sheets UI
for material design

00:37:43.200 --> 00:37:45.450
and Vector/Drawable and
AnimatedVectorDrawable, people

00:37:45.450 --> 00:37:48.060
have been asking this since we
released the original feature

00:37:48.060 --> 00:37:50.699
on Lollipop, as if
we didn't quite know.

00:37:50.699 --> 00:37:52.990
It turns out it was actually
really tricky to implement

00:37:52.990 --> 00:37:55.690
because of the way
resources are processed,

00:37:55.690 --> 00:37:58.450
as well as drawables,
and making that work

00:37:58.450 --> 00:38:00.110
in a backward-compatible way.

00:38:00.110 --> 00:38:00.896
Took a while.

00:38:00.896 --> 00:38:01.895
But finally, it's there.

00:38:01.895 --> 00:38:03.920
It goes back several releases.

00:38:03.920 --> 00:38:05.970
So please check those out.

00:38:05.970 --> 00:38:06.780
Use them.

00:38:06.780 --> 00:38:09.080
And start shipping
APKs that are smaller.

00:38:09.080 --> 00:38:12.860
Because vectors tend to be a
lot smaller than equivalent

00:38:12.860 --> 00:38:14.780
images-- PNGs and JPEGs.

00:38:14.780 --> 00:38:18.200
RecyclerView AutoMeasure,
also Wrap Contents, that

00:38:18.200 --> 00:38:20.240
has been a much requested
feature for a while.

00:38:20.240 --> 00:38:21.406
So that was in that release.

00:38:21.406 --> 00:38:25.580
And then, in 23.1 we made slight
API adjustments to RecyclerView

00:38:25.580 --> 00:38:29.800
to allow much more performing,
as well as feature-rich item

00:38:29.800 --> 00:38:30.670
animations.

00:38:30.670 --> 00:38:32.420
So check those out as well.

00:38:32.420 --> 00:38:33.390
ROMAIN GUY: Yes, speaking
of VectorDrawable,

00:38:33.390 --> 00:38:35.770
there's going to be a talk
by [? Colt. ?] Don't remember

00:38:35.770 --> 00:38:36.360
when.

00:38:36.360 --> 00:38:37.901
It's about image
compression and what

00:38:37.901 --> 00:38:39.840
you can do to reduce
the size of your APKs.

00:38:39.840 --> 00:38:41.220
So he's going to talk
about VectorDrawables,

00:38:41.220 --> 00:38:42.810
but also what you
can do with PNGS,

00:38:42.810 --> 00:38:46.150
and JPEGs, and WebPs to make
your applications just smaller

00:38:46.150 --> 00:38:47.400
and look just as good.

00:38:47.400 --> 00:38:49.036
CHET HAASE: Yes, that.

00:38:49.036 --> 00:38:51.850
Support Library, I also
wanted to talk about what I

00:38:51.850 --> 00:38:53.180
would like to call the future.

00:38:53.180 --> 00:38:55.750
There are some exciting things
going on that developers

00:38:55.750 --> 00:38:57.570
are going to care deeply about.

00:38:57.570 --> 00:39:00.286
But we do have a
session called What's

00:39:00.286 --> 00:39:01.410
New in the Support Library.

00:39:01.410 --> 00:39:02.993
And instead of
stealing their thunder,

00:39:02.993 --> 00:39:05.776
I would say go check out
that session today at 4:00

00:39:05.776 --> 00:39:07.400
to learn about some
of the stuff that's

00:39:07.400 --> 00:39:09.860
coming up in future
releases in Support Library.

00:39:09.860 --> 00:39:11.900
I want to quickly go over these.

00:39:11.900 --> 00:39:13.392
Because I like them.

00:39:13.392 --> 00:39:15.100
This is kind of an
implementation detail.

00:39:15.100 --> 00:39:16.683
Nobody on the outside's
going to know.

00:39:16.683 --> 00:39:19.660
But VectorDrawable
performance improved greatly

00:39:19.660 --> 00:39:22.490
in the N Preview
release, because we

00:39:22.490 --> 00:39:24.420
worked on performance
improvements

00:39:24.420 --> 00:39:27.260
on both the loading side as
well as the firstDraw side.

00:39:27.260 --> 00:39:28.260
So we create the bitmap.

00:39:28.260 --> 00:39:29.390
And we draw it there.

00:39:29.390 --> 00:39:31.670
And we were taking a long
time drawing that path.

00:39:31.670 --> 00:39:32.380
We sped that up.

00:39:32.380 --> 00:39:34.880
We also sped up just
the act of parsing it.

00:39:34.880 --> 00:39:36.480
If you have a
really complex path,

00:39:36.480 --> 00:39:39.020
it turns out that parsing that
string, at the Java level,

00:39:39.020 --> 00:39:41.850
was very time-intensive.

00:39:41.850 --> 00:39:43.560
So we have significant
speed-ups there.

00:39:43.560 --> 00:39:45.920
More of a reason to start
using VectorDrawables.

00:39:45.920 --> 00:39:48.090
Also FloatProperty
and IntProperty,

00:39:48.090 --> 00:39:50.410
my favorite features
because I checked them in.

00:39:50.410 --> 00:39:51.118
And this really--

00:39:51.118 --> 00:39:53.570
ROMAIN GUY: Is that the
only code you wrote for N?

00:39:53.570 --> 00:39:53.996
CHET HAASE: Possibly.

00:39:53.996 --> 00:39:54.422
ROMAIN GUY: I'm pretty sure.

00:39:54.422 --> 00:39:55.010
CHET HAASE: No, no.

00:39:55.010 --> 00:39:56.593
Actually, I wrote a
lot of other code.

00:39:56.593 --> 00:39:57.550
And I checked it in.

00:39:57.550 --> 00:39:58.550
And there were problems.

00:39:58.550 --> 00:39:59.591
So I checked it back out.

00:39:59.591 --> 00:40:01.580
[LAUGHTER]

00:40:01.580 --> 00:40:04.420
Not only did I not
actually write much code

00:40:04.420 --> 00:40:05.840
for FloatProperty/IntProperty.

00:40:05.840 --> 00:40:08.180
But I actually wrote
it about two years ago.

00:40:08.180 --> 00:40:09.614
But it was hidden API.

00:40:09.614 --> 00:40:11.030
But we realized
that people really

00:40:11.030 --> 00:40:14.760
couldn't access the
capabilities of using primitives

00:40:14.760 --> 00:40:16.510
with the property
object until these

00:40:16.510 --> 00:40:17.720
were exposed as public API.

00:40:17.720 --> 00:40:18.470
So there they are.

00:40:18.470 --> 00:40:19.300
Please use them.

00:40:19.300 --> 00:40:21.280
Especially for
animations, it allows

00:40:21.280 --> 00:40:24.170
you to have a much more direct
method of setting properties

00:40:24.170 --> 00:40:26.290
without doing a
typical mechanism, what

00:40:26.290 --> 00:40:30.900
we use an animators where we
dive down into JNI and back up.

00:40:30.900 --> 00:40:35.320
So it adds a little
performance improvement.

00:40:35.320 --> 00:40:36.030
What else we got?

00:40:36.030 --> 00:40:38.330
Android Instant Apps, we
saw this in the keynote

00:40:38.330 --> 00:40:39.300
this morning.

00:40:39.300 --> 00:40:42.109
You saw us go to the Sandbox
area and check out the demos.

00:40:42.109 --> 00:40:43.650
And also check out
the talk that they

00:40:43.650 --> 00:40:45.024
have tomorrow
morning, What's New

00:40:45.024 --> 00:40:46.362
in Android Play for Developers.

00:40:46.362 --> 00:40:48.070
And they'll have more
details about that.

00:40:51.380 --> 00:40:54.250
And the most important
thing, go get the release.

00:40:54.250 --> 00:40:56.850
If you don't have it
yet, Developer Preview 3

00:40:56.850 --> 00:40:58.010
should be out there now.

00:40:58.010 --> 00:41:00.060
I don't know the
timing of sessions

00:41:00.060 --> 00:41:02.970
with when the bits
actually hit the interwebs.

00:41:02.970 --> 00:41:04.210
But it should be there.

00:41:04.210 --> 00:41:05.440
Please go get it.

00:41:05.440 --> 00:41:08.720
Some helpful URLs in case
you don't know d.android.com

00:41:08.720 --> 00:41:10.650
is, there it is.

00:41:10.650 --> 00:41:11.990
So go get the Preview.

00:41:11.990 --> 00:41:13.700
And go set up the SDK.

00:41:13.700 --> 00:41:16.269
And most importantly,
please file bugs.

00:41:16.269 --> 00:41:17.310
And do it really quickly.

00:41:17.310 --> 00:41:20.740
We're trying to
finish this release.

00:41:20.740 --> 00:41:21.824
Is there anything else?

00:41:21.824 --> 00:41:23.240
ROMAIN GUY: Should
we take, I just

00:41:23.240 --> 00:41:25.240
want to tell you couple things
about Constraint Layout.

00:41:25.240 --> 00:41:26.531
Because I care deeply about it.

00:41:26.531 --> 00:41:28.790
There's also a Code Lab
you can attend if you

00:41:28.790 --> 00:41:31.790
want to play with it already.

00:41:31.790 --> 00:41:34.030
Other than that, we can
take a couple questions.

00:41:34.030 --> 00:41:34.470
It's going to be awkward
in this room, but.

00:41:34.470 --> 00:41:36.300
DAN SANDLER: I don't think
we have mics in the audience?

00:41:36.300 --> 00:41:37.030
CHET HAASE: I don't
know how we're

00:41:37.030 --> 00:41:38.220
going to take questions here.

00:41:38.220 --> 00:41:39.490
ROMAIN GUY: Just
speak very loudly.

00:41:39.490 --> 00:41:40.573
CHET HAASE: You know what?

00:41:40.573 --> 00:41:44.320
I will say for the other 2,000
of you that had questions

00:41:44.320 --> 00:41:47.130
that you couldn't
ask, we are going

00:41:47.130 --> 00:41:49.290
to have office hours at
the end of every day.

00:41:49.290 --> 00:41:52.081
There's an office hours
called Android N Office Hours.

00:41:52.081 --> 00:41:54.580
There's actually going to be a
lot of platform people there.

00:41:54.580 --> 00:41:56.330
The people that worked
on N, it turns out,

00:41:56.330 --> 00:41:59.100
are the same people that worked
on all the other releases.

00:41:59.100 --> 00:42:00.670
So please bring your
questions there.

00:42:00.670 --> 00:42:03.309
And there's other more
team-specific office hours

00:42:03.309 --> 00:42:04.850
for Multi-Window
and stuff like that.

00:42:04.850 --> 00:42:06.183
So check it out on the schedule.

00:42:06.183 --> 00:42:07.500
And come ask us questions then.

00:42:07.500 --> 00:42:09.250
I think we're going
to skip the questions.

00:42:09.250 --> 00:42:09.720
ROMAIN GUY: All right.

00:42:09.720 --> 00:42:11.210
CHET HAASE: It's just
kind of awkward there.

00:42:11.210 --> 00:42:12.335
So why don't we wrap it up.

00:42:12.335 --> 00:42:14.019
And we'll say thank you.

00:42:14.019 --> 00:42:14.810
ROMAIN GUY: Thanks.

00:42:14.810 --> 00:42:16.610
[APPLAUSE]

00:42:16.610 --> 00:42:20.210
[UPBEAT MUSIC]

00:42:20.210 --> 00:42:23.560
[ELECTRONIC THEME MUSIC]

