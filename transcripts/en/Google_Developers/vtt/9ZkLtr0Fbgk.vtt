WEBVTT
Kind: captions
Language: en

00:00:00.314 --> 00:00:00.980
AMIR HARDON: OK.

00:00:00.980 --> 00:00:01.500
Hi.

00:00:01.500 --> 00:00:02.130
I'm Amir.

00:00:02.130 --> 00:00:03.300
I work on Flutter.

00:00:03.300 --> 00:00:05.550
And I'm going to talk
about animation management

00:00:05.550 --> 00:00:07.630
with Redux and Flutter.

00:00:07.630 --> 00:00:09.540
And there's a talk
about Redux tomorrow.

00:00:09.540 --> 00:00:12.360
And I'm not going to
go deeply into details

00:00:12.360 --> 00:00:13.900
about how Redux works.

00:00:13.900 --> 00:00:16.430
So if you're
interested in that, I

00:00:16.430 --> 00:00:18.330
encourage you to
attend the Redux talk,

00:00:18.330 --> 00:00:20.540
the application
architecture talk tomorrow.

00:00:20.540 --> 00:00:21.270
OK.

00:00:21.270 --> 00:00:24.150
The first thing I will say is
that there are many opinions

00:00:24.150 --> 00:00:26.230
on how to do things out there.

00:00:26.230 --> 00:00:28.120
And this is just
one more suggestion.

00:00:28.120 --> 00:00:30.930
So not a silver
bullet, definitely.

00:00:30.930 --> 00:00:31.710
OK.

00:00:31.710 --> 00:00:33.780
I'm going to explain
this idea by walking

00:00:33.780 --> 00:00:36.980
through an example
implementation of the "2048"

00:00:36.980 --> 00:00:37.890
game.

00:00:37.890 --> 00:00:40.170
Unfortunately, I
don't have enough time

00:00:40.170 --> 00:00:41.490
to explain the game.

00:00:41.490 --> 00:00:43.140
So if you don't
know the game, just

00:00:43.140 --> 00:00:45.970
remember that the user picks
a direction, left, right,

00:00:45.970 --> 00:00:47.130
up, or down.

00:00:47.130 --> 00:00:49.890
And all the tiles slide
in that direction.

00:00:49.890 --> 00:00:51.390
And some of them merge.

00:00:51.390 --> 00:00:53.700
So this is how it looks
when I swipe right.

00:00:53.700 --> 00:00:57.660
The tiles slide to the
right, and some tiles merge.

00:00:57.660 --> 00:00:58.410
OK.

00:00:58.410 --> 00:01:01.900
So we're going to implement
this with a Redux architecture.

00:01:01.900 --> 00:01:04.950
And this is a very
typical Redux architecture

00:01:04.950 --> 00:01:07.710
where the UI responds
to user events

00:01:07.710 --> 00:01:11.010
by dispatching
actions to the store.

00:01:11.010 --> 00:01:13.620
The store is where
we manage our state.

00:01:13.620 --> 00:01:18.810
And the store responds to
actions by computing new states

00:01:18.810 --> 00:01:23.010
and publishing these
states back to the UI.

00:01:23.010 --> 00:01:26.820
And we're going to represent the
state for the game with a 4 x 4

00:01:26.820 --> 00:01:28.980
integer matrix.

00:01:28.980 --> 00:01:32.760
And we're implementing
four mutation operations--

00:01:32.760 --> 00:01:34.560
move left, right, up, and down.

00:01:34.560 --> 00:01:38.710
Here, we see a unit
test for the move right

00:01:38.710 --> 00:01:43.080
operation, which is basically
what you would expect.

00:01:43.080 --> 00:01:46.770
This is how we set the gesture
detector for our game board.

00:01:46.770 --> 00:01:51.030
We basically say, when we
detected a horizontal drag,

00:01:51.030 --> 00:01:53.520
we just need to figure out
what was that reaction, left

00:01:53.520 --> 00:01:57.150
or right, and dispatch a
move left or move right

00:01:57.150 --> 00:02:00.000
action to the store.

00:02:00.000 --> 00:02:02.730
This is the only thing that
the UI is doing directly

00:02:02.730 --> 00:02:05.550
in response to user
events, dispatching actions

00:02:05.550 --> 00:02:07.890
to the store.

00:02:07.890 --> 00:02:11.640
The next thing we need
to do is to wire our UI.

00:02:11.640 --> 00:02:14.330
We get an update from the
store with a new state,

00:02:14.330 --> 00:02:17.730
and we need to show
that on the screen.

00:02:17.730 --> 00:02:20.780
Without animations, this
is pretty straightforward.

00:02:20.780 --> 00:02:23.750
We just get the state
from the store update,

00:02:23.750 --> 00:02:28.950
and we build a widget tree that
shows the board for that state.

00:02:28.950 --> 00:02:31.500
Animations makes this a
little bit more complex.

00:02:31.500 --> 00:02:34.360
And this is what I'm
going to talk about.

00:02:34.360 --> 00:02:37.770
So with animations
the last state update

00:02:37.770 --> 00:02:40.080
is no longer enough
information to figure out

00:02:40.080 --> 00:02:43.782
what we should be
showing on the screen.

00:02:43.782 --> 00:02:45.240
Given the rest
state, we don't know

00:02:45.240 --> 00:02:47.550
which transition we
should be showing.

00:02:47.550 --> 00:02:50.820
To deal with that, we
can add more information

00:02:50.820 --> 00:02:52.530
with our store updates.

00:02:52.530 --> 00:02:55.090
So in addition to
the current state,

00:02:55.090 --> 00:02:58.140
we also include the previous
state and the action

00:02:58.140 --> 00:03:00.160
that's triggered the update.

00:03:00.160 --> 00:03:02.760
So that triplet is
enough information

00:03:02.760 --> 00:03:04.860
to know which
transition we should

00:03:04.860 --> 00:03:08.440
be showing on the screen.

00:03:08.440 --> 00:03:11.610
So this is a snippet from
the build method of our board

00:03:11.610 --> 00:03:12.520
widget.

00:03:12.520 --> 00:03:16.050
We basically say, OK, we got
this triplet from the store.

00:03:16.050 --> 00:03:17.850
We got the new
state, but we also

00:03:17.850 --> 00:03:20.640
know the previous state
and the last action.

00:03:20.640 --> 00:03:22.980
And we're going to
use that triplet

00:03:22.980 --> 00:03:25.410
to build a new motion spec.

00:03:25.410 --> 00:03:29.850
So this is the unit test for
our build motion spec method.

00:03:29.850 --> 00:03:33.390
And the motion spec is basically
a description for which tile,

00:03:33.390 --> 00:03:34.770
where it should
be going, what it

00:03:34.770 --> 00:03:36.710
should be doing on the screen.

00:03:36.710 --> 00:03:40.780
The next problem we have to deal
with are animation conflicts.

00:03:40.780 --> 00:03:45.390
And an animation conflict is
when a transition to state D

00:03:45.390 --> 00:03:48.480
is triggered while the
application is transitioning

00:03:48.480 --> 00:03:50.820
between two other states.

00:03:50.820 --> 00:03:53.610
I find it useful to
differentiate between two

00:03:53.610 --> 00:03:55.600
kinds of transition states.

00:03:55.600 --> 00:03:57.570
Real ones are when the
application is actually

00:03:57.570 --> 00:04:01.620
waiting for something to happen,
versus cosmetic transitions,

00:04:01.620 --> 00:04:03.780
like the animation
of the tiles sliding,

00:04:03.780 --> 00:04:07.720
are just there to make the
user experience more smooth.

00:04:07.720 --> 00:04:11.270
So this is what our UI code is
doing in response to a store

00:04:11.270 --> 00:04:11.800
update.

00:04:11.800 --> 00:04:14.370
It terminates any
ongoing transition.

00:04:14.370 --> 00:04:18.690
It figures out which transition
it should be showing based

00:04:18.690 --> 00:04:20.579
on the triplet it
got from the store,

00:04:20.579 --> 00:04:23.280
and it fires and
forgets that transition.

00:04:23.280 --> 00:04:25.140
Not exactly forget
it, because we still

00:04:25.140 --> 00:04:28.380
need a way to terminate it
on the next store update.

00:04:28.380 --> 00:04:31.020
So what happens when we
get an animation conflict?

00:04:31.020 --> 00:04:32.970
So here you see how it looks.

00:04:32.970 --> 00:04:35.670
When I swipe left,
everything is sliding.

00:04:35.670 --> 00:04:38.220
And while it is
sliding, I swipe down.

00:04:38.220 --> 00:04:40.360
So what we get is
this jump cut effect,

00:04:40.360 --> 00:04:43.510
where the ongoing animation
is terminated completely

00:04:43.510 --> 00:04:46.750
immediately, and
the next one starts.

00:04:46.750 --> 00:04:53.250
And in this case, this is
actually a decent solution.

00:04:53.250 --> 00:04:56.120
So this actually feels
responsive and natural

00:04:56.120 --> 00:04:57.290
in this case.

00:04:57.290 --> 00:05:00.870
And I argue that this is
a decent fallback for most

00:05:00.870 --> 00:05:04.380
or many cosmetic transitions.

00:05:04.380 --> 00:05:07.800
So to get that fallback, the
jump cut effect by default,

00:05:07.800 --> 00:05:11.520
we need to make sure that
our UI code keeps a promise.

00:05:11.520 --> 00:05:15.200
And that promise is that, given
that the last store update was

00:05:15.200 --> 00:05:18.390
to state A, it is
either showing state A

00:05:18.390 --> 00:05:20.370
or showing a
transition to state A.

00:05:20.370 --> 00:05:25.170
Now, if you want more custom
conflict resolution, something

00:05:25.170 --> 00:05:27.540
more fancy than the
jump cut effect,

00:05:27.540 --> 00:05:30.450
you can still do that
by managing more state

00:05:30.450 --> 00:05:32.640
in the presentation
layer in the UI.

00:05:32.640 --> 00:05:35.980
Just make sure you
still keep that promise.

00:05:35.980 --> 00:05:38.750
So this was quite a lot to
squeeze in five minutes.

00:05:38.750 --> 00:05:41.430
So there's also a medium
article with more details.

00:05:41.430 --> 00:05:44.520
And the example code
for the "2048" game

00:05:44.520 --> 00:05:45.991
is available on GitHub.

00:05:45.991 --> 00:05:46.490
Thank you.

00:05:46.490 --> 00:05:49.214
[APPLAUSE]

