WEBVTT
Kind: captions
Language: en

00:00:01.959 --> 00:00:08.010
&gt;&gt;Francesco Nerieri: Well, thank you ever
so much for joining.

00:00:08.010 --> 00:00:09.010
My name is Francesco.

00:00:09.010 --> 00:00:17.189
I lead the Cloud team in Android, and today
I'm going to talking about Google Cloud Messaging.

00:00:17.189 --> 00:00:22.630
Last summer at Google I/O 2012 we launched
this service to bring the old Cloud-to-device

00:00:22.630 --> 00:00:27.089
messaging system also known at C2DM out of
beta.

00:00:27.089 --> 00:00:29.429
Along the way, we made a lot of improvements.

00:00:29.429 --> 00:00:34.850
We made it faster, more reliable, more scalable,
we removed limitations.

00:00:34.850 --> 00:00:36.000
We opened it up to all of you.

00:00:36.000 --> 00:00:38.879
Opened up a bunch of new APIs.

00:00:38.879 --> 00:00:41.399
We must have done something write.

00:00:41.399 --> 00:00:43.980
Because the adoption for the new system has
been fantastic.

00:00:43.980 --> 00:00:48.829
But before we jump into that, I want to take
a moment to thank all of you that today use

00:00:48.829 --> 00:00:53.710
Google Cloud Messaging in your application
because you really help the ecosystem by reducing

00:00:53.710 --> 00:00:59.640
the impact that your application has on battery
life, network signaling, demand of data that

00:00:59.640 --> 00:01:04.909
goes over the wire and, in general, it improves
the user experience by providing fresh and

00:01:04.909 --> 00:01:08.360
up-to-date data for your users.

00:01:08.360 --> 00:01:09.520
So back to the adoption.

00:01:09.520 --> 00:01:14.009
June 27, 2012, is the day we deprecated C2DM.

00:01:14.009 --> 00:01:21.710
From that day until now, Google Cloud Messaging
experienced an impressive 400% growth.

00:01:21.710 --> 00:01:24.060
This growth accelerates every single month.

00:01:24.060 --> 00:01:29.390
In April, we were already processing over
200,000 queries per second.

00:01:29.390 --> 00:01:34.490
If you build a list of the most popular, most
uploaded applications on the Google Play store,

00:01:34.490 --> 00:01:40.049
including those that have nothing to do with
the Cloud, that over 60% of those today use

00:01:40.049 --> 00:01:41.560
GCM.

00:01:41.560 --> 00:01:46.280
So I wouldn't be surprised if many of new
this room already have an application published

00:01:46.280 --> 00:01:48.460
that Google Cloud Messaging today.

00:01:48.460 --> 00:01:49.460
Anyone?

00:01:49.460 --> 00:01:52.240
That is beautiful.

00:01:52.240 --> 00:01:57.100
So for those of you that are not yet familiar
with this product, let me quickly go over

00:01:57.100 --> 00:02:02.270
Google Cloud Messaging to tell you what system
is all about.

00:02:02.270 --> 00:02:07.130
Bottom line, if you have an Android application,
on the server and you want to exchange data,

00:02:07.130 --> 00:02:09.170
that's when you want to use Google Cloud Messaging.

00:02:09.170 --> 00:02:13.000
Today, for our example, we are going to use
a surfing application.

00:02:13.000 --> 00:02:16.770
So the surf severer just detected there's
going to be a new massive swell in the Pacific

00:02:16.770 --> 00:02:19.790
that is going to interest the whole West Coast
of America.

00:02:19.790 --> 00:02:24.650
We will tell our users, you have to get ready
because surf's up.

00:02:24.650 --> 00:02:30.460
So the surf severer opens HDPS connection
to GCM, and the first thing we do is to store

00:02:30.460 --> 00:02:35.020
the message on the Cloud, so even if the devices
are offline, as soon as it comes back online,

00:02:35.020 --> 00:02:36.280
we can deliver the message.

00:02:36.280 --> 00:02:41.440
Well, there are two main ways in which you
can use GCM.

00:02:41.440 --> 00:02:46.200
First one is what we call send to sync.

00:02:46.200 --> 00:02:50.230
Imagine there is a surf contest, Cold Water
Classic.

00:02:50.230 --> 00:02:54.560
So there are professionals, photographers,
that are a massive number of pictures and

00:02:54.560 --> 00:02:55.900
video uploading on the severer.

00:02:55.900 --> 00:03:00.760
We want to tell our Android application users
to connect to upload this media.

00:03:00.760 --> 00:03:04.120
So we send the message via GCM, goes down
to the application.

00:03:04.120 --> 00:03:08.310
Now the application knows to connect back
to their own server so they can download the

00:03:08.310 --> 00:03:11.590
data and consume the media.

00:03:11.590 --> 00:03:14.260
But there's another way you can use GCM.

00:03:14.260 --> 00:03:19.260
There's this new swell in the Pacific and
we are going to tell every single user, while

00:03:19.260 --> 00:03:25.870
in your particular favorite spot, the wave
size is going to be six to eight foot.

00:03:25.870 --> 00:03:30.760
We want to pack this data into the message
and route it down to the application via GCM

00:03:30.760 --> 00:03:37.010
so now the application can consume the data
without having to connect back.

00:03:37.010 --> 00:03:43.760
GCM also provides a bunch of APIs to allow
developers to control the flow of the message.

00:03:43.760 --> 00:03:45.980
One of the APIs is time to live.

00:03:45.980 --> 00:03:49.450
It allows you to set an expiration time for
your message.

00:03:49.450 --> 00:03:55.680
Imagine the surf severer identified my personal
favorite location, now because of the tide

00:03:55.680 --> 00:04:01.430
and swell and wind conditions, it's a perfect
time to go surfing, now for the next hour.

00:04:01.430 --> 00:04:07.700
Too bad I'm here giving this talk so I can't
go surfing.

00:04:07.700 --> 00:04:12.540
So if GCM detects the message expired before
the device comes back online, it simply drops

00:04:12.540 --> 00:04:13.810
it.

00:04:13.810 --> 00:04:16.190
Another neat parameter is the delay while
idle.

00:04:16.190 --> 00:04:19.739
It gives a priority for the message.

00:04:19.739 --> 00:04:24.620
It's kind of like you can say to GCM, hey,
even if the device is connected but the user

00:04:24.620 --> 00:04:27.370
is not looking at it, don't bother sending
it down.

00:04:27.370 --> 00:04:30.970
These two parameters are really powerful in
combination because it gives a message a chance

00:04:30.970 --> 00:04:33.669
to expire even if the device is connected.

00:04:33.669 --> 00:04:40.539
Then we have multiple senders or our severer
is brilliant at detecting the wave size based

00:04:40.539 --> 00:04:44.530
on swell conditions, tide, and the geography.

00:04:44.530 --> 00:04:46.039
Doesn't do a good job with the wind.

00:04:46.039 --> 00:04:50.169
Luckily, there is another service that knows
all about wind conditions.

00:04:50.169 --> 00:04:55.210
So now our application at registration time
can tell GCM, look, I want to receive a message

00:04:55.210 --> 00:04:57.110
from both severers.

00:04:57.110 --> 00:05:03.330
So GCM knows that both servers are allowed
to send message to one location.

00:05:03.330 --> 00:05:06.020
And then message multi-cast.

00:05:06.020 --> 00:05:09.479
To send a message in GCM, you have to use
an open HDPS connection.

00:05:09.479 --> 00:05:14.150
Now, you want to reach all your users at the
same time, well, instead of becoming complicated

00:05:14.150 --> 00:05:15.460
to open multiple HDPS connection.

00:05:15.460 --> 00:05:22.080
So to alleviate this problem, we decided to
allow you to set after one thousand recipients

00:05:22.080 --> 00:05:24.030
in one request for one message.

00:05:24.030 --> 00:05:26.490
Then there is more.

00:05:26.490 --> 00:05:28.629
There is message re-collapsing, message repay
load.

00:05:28.629 --> 00:05:39.270
You can read and learn all about this at developer.Android.com
under the Google Cloud Messaging section.

00:05:39.270 --> 00:05:43.639
So last summer when we launched GCM we knew
it was just the first step.

00:05:43.639 --> 00:05:47.490
Today, I will have a series of announcements
that will bring the mobile Cloud messaging

00:05:47.490 --> 00:05:49.930
space to the next level.

00:05:49.930 --> 00:05:54.200
Without any further adieu, let me introduce
our brand new service Google Cloud Messaging

00:05:54.200 --> 00:05:57.759
XMPP end point.

00:05:57.759 --> 00:06:01.879
So I was just talking about how multi-casting
allows you to send this one message to all

00:06:01.879 --> 00:06:06.419
your users in a better way than exporting
these connections.

00:06:06.419 --> 00:06:10.979
If you want to send multiple different messages
customized to all your users at the same time.

00:06:10.979 --> 00:06:15.229
Again, there is this swell, I want to tell
all our users I have at least one favorite

00:06:15.229 --> 00:06:17.930
spot on the coast in the west.

00:06:17.930 --> 00:06:22.810
That surf is going to be based on their abilities,
based on the condition of the tide and the

00:06:22.810 --> 00:06:25.009
wind what they are going to do.

00:06:25.009 --> 00:06:33.199
So we did this little experiment in which
streaming messages with HTTP interface sequentially.

00:06:33.199 --> 00:06:37.479
The maximum speed we reached, thanks to our
low latency, which, by the way, dropped down

00:06:37.479 --> 00:06:45.320
to 60 milliseconds down from 95 milliseconds
when we launched the service, also using improvements

00:06:45.320 --> 00:06:46.840
like caching and whatnot.

00:06:46.840 --> 00:06:51.020
We had the speed 1313 messages per second.

00:06:51.020 --> 00:06:56.069
Now, we made the same test with our new XMPP
service.

00:06:56.069 --> 00:07:01.060
We decided to limit the speed to 4,000 messages
per second.

00:07:01.060 --> 00:07:02.610
So let's look at this.

00:07:02.610 --> 00:07:09.500
Now, we have surf server which has a persistent
connection established with the GCM, just

00:07:09.500 --> 00:07:13.039
like with HTTP, you can stream a message down
via this channel.

00:07:13.039 --> 00:07:20.090
We picked XMPP because it is a never robust
and flexible protocol and also like widely

00:07:20.090 --> 00:07:24.099
used in the multiple libraries and multiple
programming languages that will help you deal

00:07:24.099 --> 00:07:26.919
with a low-level details of this protocol.

00:07:26.919 --> 00:07:31.909
But the real application protocol is the same
exact JSON we use today to send messages on

00:07:31.909 --> 00:07:33.569
HTTP.

00:07:33.569 --> 00:07:38.870
In this slide, I will use a simple Python
XMPP library.

00:07:38.870 --> 00:07:45.699
You can see the URL of the new service is
gcm.google.com.

00:07:45.699 --> 00:07:46.699
What I'm doing here.

00:07:46.699 --> 00:07:51.099
I create a client, I connect, and then last
line this bold, I authenticate.

00:07:51.099 --> 00:07:53.229
Even this should sound familiar to you.

00:07:53.229 --> 00:07:57.809
The authentication use the very same user
name and password that we use to authenticate

00:07:57.809 --> 00:08:04.479
every single HTTP message today, which is
product ID.

00:08:04.479 --> 00:08:07.150
So these are the standard that goes over the
wire.

00:08:07.150 --> 00:08:12.680
You can see the basics for encoding of the
project ID and API key and then the success

00:08:12.680 --> 00:08:14.660
response stanza is from GCM.

00:08:14.660 --> 00:08:19.409
So now you have an established persistent
connection between your server and GCM which

00:08:19.409 --> 00:08:24.099
is authenticated and the only thing that is
left do is stream down messages as fast as

00:08:24.099 --> 00:08:25.110
you can.

00:08:25.110 --> 00:08:30.330
But more messages we use the classic message
XMPP standard.

00:08:30.330 --> 00:08:31.469
Nothing interesting to look here.

00:08:31.469 --> 00:08:36.210
The only interesting part is JSON which should
sound familiar to you.

00:08:36.210 --> 00:08:39.540
We use data, collapse key, time to live, label
idle.

00:08:39.540 --> 00:08:42.780
The only two little differences are those
in red.

00:08:42.780 --> 00:08:47.570
First one, two field replaces the old registration
ID field.

00:08:47.570 --> 00:08:50.830
Yet, the value for this field is registration
ID.

00:08:50.830 --> 00:08:57.830
The message identifier, this is an important
concept, it is unique per message, has mandatory

00:08:57.830 --> 00:09:00.210
and has to be set by the third-party server.

00:09:00.210 --> 00:09:01.900
The reason is really simple.

00:09:01.900 --> 00:09:05.020
On the HTTP interface, that's a synchronous
protocol.

00:09:05.020 --> 00:09:09.030
You send a message and we give you back a
response as to what happened to the message.

00:09:09.030 --> 00:09:11.290
For XMPP, this is streaming.

00:09:11.290 --> 00:09:12.960
It is completely asynchronous.

00:09:12.960 --> 00:09:16.250
You can send down messages and we have to
tell you what happened to those by giving

00:09:16.250 --> 00:09:17.930
you back an acknowledgment.

00:09:17.930 --> 00:09:23.140
To make sure we are talking about the very
same message, we use this identifier.

00:09:23.140 --> 00:09:24.790
So talking about streaming.

00:09:24.790 --> 00:09:28.680
So now the surf server is streaming down messages
as fast as he can.

00:09:28.680 --> 00:09:30.560
Now GCM processes this messages.

00:09:30.560 --> 00:09:35.740
As soon as it processes a message, it has
acknowledgment or negative acknowledgment

00:09:35.740 --> 00:09:37.800
if something went wrong.

00:09:37.800 --> 00:09:44.150
Well, the acknowledgment is a simple message
stanza and three fields inside are the from,

00:09:44.150 --> 00:09:48.690
which is registration ID of the device we
just sent the message to.

00:09:48.690 --> 00:09:52.910
The message identifier, which is what I just
talked about, and the type is NACK.

00:09:52.910 --> 00:09:56.700
For a negative acknowledgment there is a field
which tells you error and tells you an error

00:09:56.700 --> 00:10:03.090
code that gives you a hint of what went wrong
so you can correct it and send it again.

00:10:03.090 --> 00:10:07.430
So what I was saying how you can stream 4,000
messages per second via this interface.

00:10:07.430 --> 00:10:09.060
But we give you more.

00:10:09.060 --> 00:10:13.060
We give you up to 10 private connections,
persistent connections so you can actually

00:10:13.060 --> 00:10:16.740
reach 40,000 messages per second streaming.

00:10:16.740 --> 00:10:18.260
But not just that.

00:10:18.260 --> 00:10:22.010
You can use also the HTTP interface and you
don't have to decide a priority which one

00:10:22.010 --> 00:10:23.030
you want to use.

00:10:23.030 --> 00:10:24.500
If you need multi-casting, go HTTP.

00:10:24.500 --> 00:10:26.640
If you need streaming, go XMPP.

00:10:26.640 --> 00:10:30.560
If you want to go insanely massive trooper,
use them both in pattern.

00:10:30.560 --> 00:10:31.560
Just have fun with it.

00:10:31.560 --> 00:10:38.820
The next interface with acknowledge or negative
acknowledge message, all the GCM APIs that

00:10:38.820 --> 00:10:42.750
you know about are supported by XMPP interface
except for multi-casting.

00:10:42.750 --> 00:10:49.960
Now, the XMPP end point allows for a nice
side effect.

00:10:49.960 --> 00:10:53.880
GCM can reach back to your server anytime
it pleases.

00:10:53.880 --> 00:11:00.890
This leads me to introduce our next big feature
which is Google Cloud upstream messaging.

00:11:00.890 --> 00:11:06.590
[ Applause ]
Thank you.

00:11:06.590 --> 00:11:11.310
This feature looks like the one before except
now the application streams the message back

00:11:11.310 --> 00:11:14.480
to the Cloud via GCM.

00:11:14.480 --> 00:11:19.200
If you think about it, it is like if you are
providing it with a virtual persistent connection

00:11:19.200 --> 00:11:24.080
between the surf server and every single application
installation on any Android device.

00:11:24.080 --> 00:11:26.821
The best part, we manage this for you.

00:11:26.821 --> 00:11:28.570
It is also reliable.

00:11:28.570 --> 00:11:33.930
We use the same reliable technology that makes
GCM such a reliable system today to stream

00:11:33.930 --> 00:11:35.450
messaging back out.

00:11:35.450 --> 00:11:39.860
So your application doesn't even need to think,
is that data, there is no data?

00:11:39.860 --> 00:11:43.390
Just give us the message, we will deliver
it absolute.

00:11:43.390 --> 00:11:48.280
So we just surfed Ocean Beach this morning
in San Francisco, I was a pretty good and

00:11:48.280 --> 00:11:49.280
was stoked.

00:11:49.280 --> 00:11:52.570
I decided this is my new surf location.

00:11:52.570 --> 00:11:56.600
I click on the app and the app sends this
message to the GCM framework.

00:11:56.600 --> 00:12:01.330
The first thing it does is store it locally
so if there is no network, as soon as data

00:12:01.330 --> 00:12:05.440
connectivity comes back, we can deliver to
GCM on the Cloud.

00:12:05.440 --> 00:12:09.820
On the other hand, as soon as GCM on the Cloud
receives the message, it stores it locally

00:12:09.820 --> 00:12:10.820
there.

00:12:10.820 --> 00:12:15.010
If the link between the surf server and XMPP
end point is down for whatever reason, as

00:12:15.010 --> 00:12:19.990
soon as it comes back up it is delivered.

00:12:19.990 --> 00:12:24.850
Now one thing we are really big in GCM is
we want to make this really simple.

00:12:24.850 --> 00:12:30.570
So the API to upstream this messages just
looks like this.

00:12:30.570 --> 00:12:35.730
Substantiate a Google Cloud messaging object,
invoke the send method and you are done.

00:12:35.730 --> 00:12:37.240
There are three parameters.

00:12:37.240 --> 00:12:42.430
The two, which is the project ID that the
surf server used to authenticate with the

00:12:42.430 --> 00:12:48.020
XMPP end point, the message identifier is
set by the application and is unique per message

00:12:48.020 --> 00:12:50.780
and the payload.

00:12:50.780 --> 00:12:55.310
We want to provide you with another API on
top of this which is time to live.

00:12:55.310 --> 00:12:59.130
Within the file and forget messages for upstreaming
really important.

00:12:59.130 --> 00:13:02.940
It just behaves like the Cloud counterpart
of this API.

00:13:02.940 --> 00:13:07.820
So I'm cruising down the coast on the line,
doing surf safari, I tell my app, keep me

00:13:07.820 --> 00:13:10.820
up to date for the next 30 minutes by tide
and swell.

00:13:10.820 --> 00:13:18.360
If I am in an area with no network, 30 minutes
later, GCM framework just drops the message.

00:13:18.360 --> 00:13:23.270
If instead there is an Android and I bring
it up to the Cloud, if the connection between

00:13:23.270 --> 00:13:28.060
the GCM server and the surf server is down,
then 30 minutes later the Cloud is going to

00:13:28.060 --> 00:13:37.570
drop the message.

00:13:37.570 --> 00:13:39.030
So here is how to use the API.

00:13:39.030 --> 00:13:45.300
This is a very same send message and in overload
of this method and you can have four parameters

00:13:45.300 --> 00:13:47.140
and the fourth one is time to live.

00:13:47.140 --> 00:13:49.220
The values are the same for the Cloud.

00:13:49.220 --> 00:13:51.130
Zero seconds up to four weeks.

00:13:51.130 --> 00:13:56.240
If you specify a time to live value of zero,
then neither GCM framework nor GCM on the

00:13:56.240 --> 00:14:00.760
Cloud will try to store the message locally
or on the Cloud.

00:14:00.760 --> 00:14:07.500
Now, if you send a message with time to live
equals zero but we know that there is no connection,

00:14:07.500 --> 00:14:10.040
but we tell you right away.

00:14:10.040 --> 00:14:12.230
Because we know, we just drop the message
right there.

00:14:12.230 --> 00:14:14.430
So we give you an error of no connection.

00:14:14.430 --> 00:14:18.820
Also, messages from upstream, they abide by
the same rules of messages from the Cloud.

00:14:18.820 --> 00:14:20.640
Which means there is a maximum payload.

00:14:20.640 --> 00:14:22.390
This payload is 4 kilobytes.

00:14:22.390 --> 00:14:25.100
If you send us a message which is 5 kilobytes.

00:14:25.100 --> 00:14:27.880
We return, hey, we can't, message is too big.

00:14:27.880 --> 00:14:30.920
Also, we just can't keep collecting messages
on device indefinitely.

00:14:30.920 --> 00:14:35.540
If there is no network, after 20 messages,
we just reject the 21st.

00:14:35.540 --> 00:14:41.930
Hey, there are too many send messages, try
later once we flush this queue.

00:14:41.930 --> 00:14:44.490
So how do we give you these errors?

00:14:44.490 --> 00:14:51.250
We send the message to your broadcast receiver
that you already have to receive messages

00:14:51.250 --> 00:14:52.250
from the Cloud.

00:14:52.250 --> 00:14:55.290
We give you the message identifier so you
know which message you are talking about and

00:14:55.290 --> 00:14:57.100
the error code.

00:14:57.100 --> 00:14:58.510
Now let's assume everything went well.

00:14:58.510 --> 00:15:02.800
My new surf spot favorite, San Francisco,
goes up to the Cloud.

00:15:02.800 --> 00:15:04.940
We are streaming it to the surf server.

00:15:04.940 --> 00:15:12.320
Now, what we expect is that the surf server
acknowledges this message to us just like

00:15:12.320 --> 00:15:15.360
we did for the downstream part.

00:15:15.360 --> 00:15:17.720
And acknowledged message just looks like the
same.

00:15:17.720 --> 00:15:22.740
We have three fields, two is registration
ID from which we got the message from.

00:15:22.740 --> 00:15:28.240
The message identifier and the type is ACK.

00:15:28.240 --> 00:15:33.360
So we are storing messages on the device and
on the Cloud during the obsoleting process.

00:15:33.360 --> 00:15:36.140
When do we get rid of those?

00:15:36.140 --> 00:15:40.320
As I said, this is a new favorite location
that is stored, we give it to GCM.

00:15:40.320 --> 00:15:44.480
Now there is some selective ACK process going
on on the reliable message technology that

00:15:44.480 --> 00:15:50.030
we have, so when this process happens and
GCM tells on the framework, yes, we are down

00:15:50.030 --> 00:15:53.430
and safely stored, then GCM framework removes
it.

00:15:53.430 --> 00:16:00.120
The same way on the Cloud, when GCM sends
the message to the surf server, and then the

00:16:00.120 --> 00:16:04.260
message gets acknowledged, then we know that
you received it and processed it so we just

00:16:04.260 --> 00:16:05.260
safely remove it.

00:16:05.260 --> 00:16:09.450
If you don't acknowledge the message, we just
keep it replaying back to you.

00:16:09.450 --> 00:16:15.380
Now, acknowledging therefore is required.

00:16:15.380 --> 00:16:22.490
And we pile up after 100 messages on the Cloud,
for one project for one device until we start

00:16:22.490 --> 00:16:23.490
overriding those.

00:16:23.490 --> 00:16:27.140
So if you fail to acknowledge messages, after
a while you might start losing them.

00:16:27.140 --> 00:16:32.230
Also, if your server is disconnected for more
than 24 hours, we deem your server down for

00:16:32.230 --> 00:16:37.240
good and we drop every single upstream message
until we see your server again.

00:16:37.240 --> 00:16:40.050
So this connection is pretty good.

00:16:40.050 --> 00:16:41.410
It allows you to send messages back up.

00:16:41.410 --> 00:16:44.980
It's reliable and so on, but there is another
really cool part to it.

00:16:44.980 --> 00:16:50.530
It's the fact that finally we have knowledge
of what's going on in the device.

00:16:50.530 --> 00:16:56.000
Most likely your app is not the only one that
uses this connection, so we see messages flying

00:16:56.000 --> 00:16:57.060
through this connection upstream.

00:16:57.060 --> 00:16:59.600
And what we can do is all the smart things.

00:16:59.600 --> 00:17:04.409
The simple one is, well, we can delay a little
bit and bash them so we can minimize the time

00:17:04.409 --> 00:17:14.159
when the radio state is in high-power mode
and this improves battery life.

00:17:14.159 --> 00:17:16.809
But not just that.

00:17:16.809 --> 00:17:19.630
We also know what's happened for this device
on the cloud.

00:17:19.630 --> 00:17:22.309
So you have the complete picture now.

00:17:22.309 --> 00:17:27.629
And so we have batch messages on the client,
batch messages on the server and the first

00:17:27.629 --> 00:17:32.679
one to start to send messages then the other
one can also piggyback on this connection

00:17:32.679 --> 00:17:36.240
and flash it down.

00:17:36.240 --> 00:17:39.960
So we have a way to send messages upstream
reliably.

00:17:39.960 --> 00:17:43.559
It's low latency because our connection is
there, it's encrypted.

00:17:43.559 --> 00:17:46.720
You have to open your HDP with SSM and so
on.

00:17:46.720 --> 00:17:48.730
And also we provide a time to leave API.

00:17:48.730 --> 00:17:54.499
As I was saying, we were really big in making
things simple so we don't want you to say,

00:17:54.499 --> 00:17:57.519
let me think, this is Jelly Bean so I can
use upstream.

00:17:57.519 --> 00:18:00.220
This is Honeycomb, maybe I can use something
else.

00:18:00.220 --> 00:18:06.970
We want to provide everything from all GCM-enabled
devices from day zero, which is from FroYo+.

00:18:06.970 --> 00:18:13.090
So now I'm announcing how Google Cloud Messaging
met Google Play Services.

00:18:13.090 --> 00:18:19.539
We moved the GCM from Google Play Services
and there is no reason to freak out because

00:18:19.539 --> 00:18:23.330
the new library is compatible with the old
library and vice versa.

00:18:23.330 --> 00:18:24.480
All this works.

00:18:24.480 --> 00:18:27.499
So if you have an application and you don't
want to touch it, it will work now and in

00:18:27.499 --> 00:18:28.500
future devices as well.

00:18:28.500 --> 00:18:33.870
But if you want to use these new features,
then you can code it from FroYo+ from every

00:18:33.870 --> 00:18:35.320
single device out there.

00:18:35.320 --> 00:18:40.220
And also we can always keep this library compatible
going forward because all the play services

00:18:40.220 --> 00:18:44.999
updates that bring down from FroYo+ to whatever
the device and whatever release you're on.

00:18:44.999 --> 00:18:49.870
Of course, if you want to use a new API then
you have to code against the GCM library on

00:18:49.870 --> 00:18:55.779
play services.

00:18:55.779 --> 00:19:00.679
I was saying that we want to make things simpler,
so we took the opportunity to simplify also

00:19:00.679 --> 00:19:03.799
the registration process.

00:19:03.799 --> 00:19:08.470
Until now you had to declare an intent receiver
on the manifest, create a broadcast receiver

00:19:08.470 --> 00:19:13.749
for your registration, send an intend, receive
the registration and then block with an HTTPS

00:19:13.749 --> 00:19:14.930
call to the server.

00:19:14.930 --> 00:19:22.200
Well, we just decided to provide a new method,
which is register, you pass the project IDs,

00:19:22.200 --> 00:19:27.590
the sender IDs, and then what you get back
is registration or an exception.

00:19:27.590 --> 00:19:31.850
So this allowed us to remove all the code
from the manifest for registration and now

00:19:31.850 --> 00:19:36.519
only thing you have to do is declare permissions
and the receiver for your messages.

00:19:36.519 --> 00:19:37.690
But more.

00:19:37.690 --> 00:19:42.580
A lot of applications today they try to register
multiple times.

00:19:42.580 --> 00:19:45.730
Maybe they'll lose registration, maybe they
want to make sure they're still registered.

00:19:45.730 --> 00:19:50.830
So what we're doing in this new method when
we accept registration request, we send to

00:19:50.830 --> 00:19:54.799
GCM in the cloud, we generate it and then
we store it locally in our cache and then

00:19:54.799 --> 00:19:58.460
we give it back to the application.

00:19:58.460 --> 00:20:03.110
So next time the application wants to register,
then we serve it from our cache and we avoid

00:20:03.110 --> 00:20:04.690
network hits.

00:20:04.690 --> 00:20:10.580
But because of that we need to make sure that
our cache is consistent with our servers.

00:20:10.580 --> 00:20:15.019
So when we deem that it's the best time to
do so, like maybe we are exchanging batches

00:20:15.019 --> 00:20:19.940
of messages from the device to the cloud and
vice versa, then we also started synchronization

00:20:19.940 --> 00:20:26.119
process in which we make sure that registration
matches exactly the registration on the server

00:20:26.119 --> 00:20:28.210
for this device.

00:20:28.210 --> 00:20:29.950
Okay.

00:20:29.950 --> 00:20:35.549
So now we have an XMPP connection from your
server to GCM.

00:20:35.549 --> 00:20:38.440
We stream down messages as fast as you want.

00:20:38.440 --> 00:20:43.009
We have the application on every device, and
FroYo+ is upstream back messages tell us new

00:20:43.009 --> 00:20:45.350
upstream location perfect, whatever.

00:20:45.350 --> 00:20:46.679
We can start doing something cool.

00:20:46.679 --> 00:20:52.139
You know, today we have a problem, which is
a lot of users, they're having more than one

00:20:52.139 --> 00:20:53.139
device.

00:20:53.139 --> 00:20:58.119
That's not the problem, but it's common to
have a phone, a tablet at home, some people

00:20:58.119 --> 00:20:59.519
have things called phablets.

00:20:59.519 --> 00:21:06.200
Lately you see people wearing smartphones
on their faces and they talk to them, too.

00:21:06.200 --> 00:21:07.200
Whatever.

00:21:07.200 --> 00:21:08.429
So my friends are out there surfing.

00:21:08.429 --> 00:21:11.559
They want to make me jealous and say, dude,
today was classic.

00:21:11.559 --> 00:21:16.279
And I see this message and it's fine, I'm
happy for them, but when I'm home and I swipe

00:21:16.279 --> 00:21:21.320
my tablet on and I see the message again and
then I look up to the right and it's up here

00:21:21.320 --> 00:21:25.799
and I go to the website and I check the webcam
because I now want to go surfing and the message

00:21:25.799 --> 00:21:27.499
is still there.

00:21:27.499 --> 00:21:28.499
One time makes me jealous.

00:21:28.499 --> 00:21:31.679
Five times is a little bit too much.

00:21:31.679 --> 00:21:37.290
So we want to provide an API to make it simple
for you to dismiss this notification after

00:21:37.290 --> 00:21:38.869
the user interacted.

00:21:38.869 --> 00:21:45.840
So what I'm going to announce now is the new
Google Cloud Messaging API user notifications.

00:21:45.840 --> 00:21:52.330
Now, this API has two parts to it.

00:21:52.330 --> 00:21:57.860
Today if the surf server wants to send a message
to me, Francesco, the user, it has a mapping

00:21:57.860 --> 00:22:06.130
of user name or registration IDs, and then
send a message to GCM and then GCM delivers

00:22:06.130 --> 00:22:08.899
it.

00:22:08.899 --> 00:22:13.870
What would be really cool if the surf server
could say, hey, GCM, send this message to

00:22:13.870 --> 00:22:19.379
Francesco and GCM figures out which devices
I have and then delivers it.

00:22:19.379 --> 00:22:24.029
Well, because if you do this, we can do really
smart things.

00:22:24.029 --> 00:22:28.080
So GCM receives the message for Francesco
and now he knows I have three devices.

00:22:28.080 --> 00:22:33.210
Two of them are idle, one is active and so
we can send to the active one and keep the

00:22:33.210 --> 00:22:38.259
message for the other ones on the cloud because
all we want to reach is me, not particular

00:22:38.259 --> 00:22:39.749
devices.

00:22:39.749 --> 00:22:46.029
But even better, so we mention that now I
have all my devices that are idle, but yet

00:22:46.029 --> 00:22:51.009
GCM knows that this one was active 60 seconds
ago.

00:22:51.009 --> 00:22:53.529
And the other two are actually 80 miles away
from this.

00:22:53.529 --> 00:22:55.509
They're in Santa Cruz at my house.

00:22:55.509 --> 00:23:01.110
So if I have new message coming in and I want
to ding the user, most likely I will send

00:23:01.110 --> 00:23:05.460
the message to this one device and I still
keep the message on the cloud for the other

00:23:05.460 --> 00:23:06.770
two.

00:23:06.770 --> 00:23:08.260
So how do we do this?

00:23:08.260 --> 00:23:12.960
What we need to transfer the knowledge from
the third-party server to GCM about the user

00:23:12.960 --> 00:23:15.120
and his registration IDs.

00:23:15.120 --> 00:23:19.750
So we provided a new API and a new end point
to do so.

00:23:19.750 --> 00:23:21.379
It's an HTTP end point.

00:23:21.379 --> 00:23:26.320
The URL is android.google.api.com/gcm/notifications.

00:23:26.320 --> 00:23:30.330
Here you can see the header, classic authentication
is project ID API key.

00:23:30.330 --> 00:23:34.570
And in the body you have a JSON protocol.

00:23:34.570 --> 00:23:40.879
Now, the operation is create and the notification
key name is the user.

00:23:40.879 --> 00:23:47.149
And now, we don't need to know who the user
is, so please give us a hash of whatever user

00:23:47.149 --> 00:23:50.009
name or email address that you use to identify
them.

00:23:50.009 --> 00:23:51.909
And then the least registration IDs.

00:23:51.909 --> 00:23:54.690
And back we gave you a notification key.

00:23:54.690 --> 00:23:59.620
So if the user installs the application on
a new device, then you can use the add operation

00:23:59.620 --> 00:24:06.540
to add the registration ID to a key or vice
versa to remove the registration ID to a key.

00:24:06.540 --> 00:24:10.980
So now that we have this knowledge, how do
we send the message to a user?

00:24:10.980 --> 00:24:16.230
It's the same thing except in the two rather
than having a registration ID, now you have

00:24:16.230 --> 00:24:18.330
a notification key.

00:24:18.330 --> 00:24:22.070
And now to the cool part.

00:24:22.070 --> 00:24:27.590
If we give the notification key to our devices,
then the device can send an upstream message

00:24:27.590 --> 00:24:31.679
to the notification key so GCM can reach the
other ones.

00:24:31.679 --> 00:24:35.019
And to do so we can use the very same user
notification API.

00:24:35.019 --> 00:24:39.399
So we say, hey, send this message to Francesco
and the payload contains the notification

00:24:39.399 --> 00:24:40.399
key.

00:24:40.399 --> 00:24:44.989
So now all my devices have a notification
key.

00:24:44.989 --> 00:24:51.289
What I can do now is I receive the message
from my friends, this, oh, it was awesome

00:24:51.289 --> 00:25:01.169
surf session, so I see it and then as the
Google Play director would say, swipe it away.

00:25:01.169 --> 00:25:05.509
So I can see in an upstream message a notification
key saying, okay, this notification has been

00:25:05.509 --> 00:25:11.340
read and so you can dismiss it on the other
devices, and now GCM delivers it to the other

00:25:11.340 --> 00:25:12.340
devices.

00:25:12.340 --> 00:25:17.749
But even more, if you specified on the notification
key, we also deliver it to the surf server

00:25:17.749 --> 00:25:21.679
on the cloud so you can remove it from your
Web properties or whatever other channels

00:25:21.679 --> 00:25:25.929
you might have.

00:25:25.929 --> 00:25:27.039
How to use this API is simple.

00:25:27.039 --> 00:25:32.250
We use the very same send absolute, and the
two, instead of being a project ID, is a notification

00:25:32.250 --> 00:25:33.600
key.

00:25:33.600 --> 00:25:38.220
And you can also use the time to deliver API
for this one as well.

00:25:38.220 --> 00:25:39.990
We can also do some optimization.

00:25:39.990 --> 00:25:44.701
As I said, I receive a message, I note the
two devices are idle, one is active, so I

00:25:44.701 --> 00:25:48.700
send to one, keep the message on the cloud
for the other two and now I read the notification,

00:25:48.700 --> 00:25:55.409
I dismiss it and I send an upstream dismiss
notification key message, so now all that

00:25:55.409 --> 00:25:58.409
we need to do is get rid of the messages on
the cloud.

00:25:58.409 --> 00:26:07.200
This saves two network hits, one to send,
one to dismiss, for both devices.

00:26:07.200 --> 00:26:12.409
The notification key is intended to be used
to group registration IDs or devices for one

00:26:12.409 --> 00:26:13.409
user.

00:26:13.409 --> 00:26:17.049
So we allow maximum 10 registration IDs for
notification key.

00:26:17.049 --> 00:26:20.760
The notification key name has to be unique,
the hash of the user name or email address.

00:26:20.760 --> 00:26:28.070
And this API is available for both the XMPP
and the HTTP end points.

00:26:28.070 --> 00:26:33.710
Well, four weeks ago I was talking to a colleague,
a friend of mine, Android engineer, his name

00:26:33.710 --> 00:26:37.040
is Chris Rand, about this API, and he was
really excited.

00:26:37.040 --> 00:26:41.610
So a couple of days later he send me a video
of a really popular application which is Google

00:26:41.610 --> 00:26:45.220
calendar, and what he did with this API.

00:26:45.220 --> 00:26:48.220
So this morning actually he sent me another
video which is a little bit better than that

00:26:48.220 --> 00:26:54.730
one to show me what he did on this application.

00:26:54.730 --> 00:26:55.950
So we have three devices.

00:26:55.950 --> 00:26:57.039
This is a calendar event.

00:26:57.039 --> 00:27:00.210
You swipe it on one, it goes away on the other
two.

00:27:00.210 --> 00:27:05.379
Now we have more than one event, he swipe
one and the other two devices just get rid

00:27:05.379 --> 00:27:06.840
of that exactly one.

00:27:06.840 --> 00:27:10.360
And then when you swipe all the notifications
because there are all kind of notifications,

00:27:10.360 --> 00:27:12.960
then the other two as well get rid of that.

00:27:12.960 --> 00:27:22.279
[ Applause ]
&gt;&gt;Francesco Nerieri: Thank you.

00:27:22.279 --> 00:27:23.999
I hope I got you guys excited.

00:27:23.999 --> 00:27:26.509
I think this is these are really, really cool
features.

00:27:26.509 --> 00:27:32.039
If you want to read more about this just point
to developer.android.com under the play services

00:27:32.039 --> 00:27:34.159
and Google Cloud Messaging section.

00:27:34.159 --> 00:27:38.600
If you want to get ready and start using these
APIs, please do sign up on this form.

00:27:38.600 --> 00:27:42.820
We'll roll out the whitelisting for the next
couple of weeks.

00:27:42.820 --> 00:27:48.049
I take all the questions for the next 30 minutes
at the Android booth office hours, and I'll

00:27:48.049 --> 00:27:50.620
leave with you a beautiful map of the Monterey
Bay.

00:27:50.620 --> 00:27:51.840
I hope you enjoyed this speech.

00:27:51.840 --> 00:27:53.039
Thank you very so much for listening.

00:27:53.039 --> 00:27:53.179
[ Applause ]

