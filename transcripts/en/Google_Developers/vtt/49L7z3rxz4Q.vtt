WEBVTT
Kind: captions
Language: en

00:00:09.849 --> 00:00:12.860
&gt;&gt;Jeff Hamilton: Nick Okay. Hi, everybody.
Welcome to how to NFC.

00:00:12.860 --> 00:00:16.900
My name is Jeff Hamilton, and I'm an engineer
on the Android team working on the NFC stack.

00:00:16.900 --> 00:00:21.859
&gt;&gt;Nick Pelly: And my name is Nick Pelly. I'm
also a software engineer on the Android team,

00:00:21.859 --> 00:00:26.430
working on the NFC stack.
I also want to introduce you to Ben Dodson,

00:00:26.430 --> 00:00:30.960
who is an intern on the Android team and will
be helping with the demos.

00:00:30.960 --> 00:00:39.550
&gt;&gt;Jeff Hamilton: Before we get started, we'd
like to point out -- hold on a second. We

00:00:39.550 --> 00:00:54.749
lost the slides here.
&gt;&gt;Nick Pelly: Should we switch to the other

00:00:54.749 --> 00:01:04.290
box?
&gt;&gt;Jeff Hamilton: Yeah.

00:01:04.290 --> 00:01:07.890
Okay. Before we get started, we'd just like
to point out real quick we have some links

00:01:07.890 --> 00:01:11.210
for feedback for the presentation. If you'd
like to give feedback on how we're doing up

00:01:11.210 --> 00:01:18.070
here. Also, we have some hashtags if you're
going to be tweeting about the talk, you can

00:01:18.070 --> 00:01:23.009
see up here, IO2011 and Android. We're going
to take some live questions from the audience

00:01:23.009 --> 00:01:26.890
as well as from Google Moderator. If you have
questions that come up during the talk, you

00:01:26.890 --> 00:01:30.690
can put them in online, or if you're watching
the live stream, feel free to put questions

00:01:30.690 --> 00:01:34.920
in there and we'll get to those at the end
of the talk.

00:01:34.920 --> 00:01:41.659
So we're going to talk today about, you know,
first, what is NFC.

00:01:41.659 --> 00:01:46.000
Second, we're going to talk about why use
NFC and why this is relevant to you as developers

00:01:46.000 --> 00:01:51.109
to add to your applications.
Third, we're going to talk briefly about how

00:01:51.109 --> 00:01:56.759
to NFC 101, just kind of an intro to NFC on
Android and what you can do as developers

00:01:56.759 --> 00:02:01.491
to add NFC support to your applications.
Fourth, we're going to talk to how to NFC

00:02:01.491 --> 00:02:09.470
201 and deep dive a little bit more into the
details of the technology.

00:02:09.470 --> 00:02:12.720
So first, what is NFC?
Just a quick show of hands, how many people

00:02:12.720 --> 00:02:14.569
in the audience are familiar with what NFC
is?

00:02:14.569 --> 00:02:16.930
Wow.
&gt;&gt;Nick Pelly: That's a lot.

00:02:16.930 --> 00:02:21.161
&gt;&gt;Jeff Hamilton: That's quite a lot of you.
Now we'd like to do a quick show of hands.

00:02:21.161 --> 00:02:23.751
How many of the developers out there have
added NFC support to their applications.

00:02:23.751 --> 00:02:29.040
&gt;&gt;Nick Pelly: We've got to change this.
&gt;&gt;Jeff Hamilton: Quite a few of hands were

00:02:29.040 --> 00:02:32.330
up for the first question, not for the second.
We're hoping by the end of this talk, you'll

00:02:32.330 --> 00:02:39.330
have the information you need to add NFC support
to your applications.

00:02:39.330 --> 00:02:43.511
So just real quick, what is NFC? It stands
for Near Field Communications. And it's a

00:02:43.511 --> 00:02:48.640
wireless technology similar to Bluetooth or
Wi-Fi where you can transmit data wirelessly.

00:02:48.640 --> 00:02:55.680
Unlike Bluetooth or Wi-Fi, it has very short
range. So the theoretical maximum is about

00:02:55.680 --> 00:03:00.750
ten centimeters. On a smartphone, you're going
to see closer to one to four centimeters typical

00:03:00.750 --> 00:03:06.600
range for interactions.
NFC is also typically low speed. So you're

00:03:06.600 --> 00:03:13.310
going to get between your configurations,
106 to maybe 414 kilobits per second. That's

00:03:13.310 --> 00:03:19.740
kilobits, not kilobytes. That kind of depends
on your configuration as well as -- these

00:03:19.740 --> 00:03:25.210
are theoretical maximum numbers. You might
see lower speeds than that.

00:03:25.210 --> 00:03:29.630
So those two properties, you know, don't really
compare to Bluetooth or Wi-Fi. But what's

00:03:29.630 --> 00:03:35.480
really great about NFC is it's a low-friction
setup. So because it's -- only works at short

00:03:35.480 --> 00:03:39.740
range, anytime you bring two devices that
support NFC within that range, they're going

00:03:39.740 --> 00:03:44.180
to set up a connection and be ready to talk
to each other. So there's no discovery like

00:03:44.180 --> 00:03:48.060
you have in Bluetooth. There's no pairing.
You don't have to put in passwords or anything

00:03:48.060 --> 00:03:51.730
like that. This is really, we think, a magical
property of NFC that really makes it kind

00:03:51.730 --> 00:03:56.880
of a science fiction type of technology. Things
just work.

00:03:56.880 --> 00:04:01.400
Additionally, NFC supports what is called
passive targets. These are devices that do

00:04:01.400 --> 00:04:08.090
NFC, but they don't have batteries in them.
These are things like stickers or random devices

00:04:08.090 --> 00:04:13.700
that aren't powered, can support NFC. There's
a tiny microcontroller with an antenna, and

00:04:13.700 --> 00:04:19.530
it picks up the power from a secondary device
and actually powers up the device from another

00:04:19.530 --> 00:04:23.560
one. So you can interact with things in the
world and they don't need power. And that's

00:04:23.560 --> 00:04:29.130
a really interesting property of NFC that
doesn't exist in any other technology. And

00:04:29.130 --> 00:04:34.170
we think it really enables, you know, interesting
applications for, you know, the technology

00:04:34.170 --> 00:04:41.500
and great things that people can do with it.
Off to Nick.

00:04:41.500 --> 00:04:47.840
&gt;&gt;Nick Pelly: Jeff's talked a little bit about
the basic properties of NFC. And, hopefully,

00:04:47.840 --> 00:04:52.010
some of you in the audience have some ideas
of how you can use these properties to build

00:04:52.010 --> 00:04:56.980
awesome applications.
Today, we want to make the case to you of

00:04:56.980 --> 00:05:08.710
why NFC is going to be so compelling to users.
Why should you care about NFC?

00:05:08.710 --> 00:05:14.160
Well, we like to think of it as bridging the
physical and the virtual worlds. Now, this

00:05:14.160 --> 00:05:19.280
is a kind of cheesy saying. But, you know,
this is really true. With NFC and low proximity,

00:05:19.280 --> 00:05:25.830
you can bring two devices next to each other
and it will trigger a virtual reaction. Physical

00:05:25.830 --> 00:05:30.260
actions, virtual reactions.
This is something that we haven't seen from

00:05:30.260 --> 00:05:35.440
any other wireless technology. Bluetooth,
Wi-Fi, you don't have that easy connection

00:05:35.440 --> 00:05:39.139
setup. This is new to NFC, and we think users
are going to love it.

00:05:39.139 --> 00:05:47.560
Let us show some demonstrations.
So first, basic tag read. You may already

00:05:47.560 --> 00:05:52.440
be familiar with this, but we're going to
show it anyway. Everyone has a Google I/O

00:05:52.440 --> 00:05:58.740
badge. And inside it, you've got your NFC
sticker. I've got one of them here right now.

00:05:58.740 --> 00:06:04.050
So you may have already tried this with your
Nexus S. If not, let me show you how easy

00:06:04.050 --> 00:06:10.760
it is to read content off of this tag.
You take your Nexus S, if I get the right

00:06:10.760 --> 00:06:18.170
phone. At the home screen, and just touch
it to the tag. (chime).

00:06:18.170 --> 00:06:23.871
There you go. I've read Jeff's contact details.
That's the V card. So these are stickers,

00:06:23.871 --> 00:06:28.080
you can start thinking about where you might
want to place these stickers. A useful one

00:06:28.080 --> 00:06:37.280
for Jeff would probably be on his front.
So we can now tap Jeff and read his contact

00:06:37.280 --> 00:06:40.950
details.
&gt;&gt;Jeff Hamilton: Come see me after the talk.

00:06:40.950 --> 00:06:45.610
[ Laughter ]
&gt;&gt;Nick Pelly: So these stickers don't need

00:06:45.610 --> 00:06:51.170
any power. They're inexpensive, they're becoming
cheaper. You can think of them a little like

00:06:51.170 --> 00:06:59.310
QR codes. You can embed basic data onto them.
Let's now go to a few more demonstrations

00:06:59.310 --> 00:07:01.940
of the kind of content you can put on an NFC
tag.

00:07:01.940 --> 00:07:09.270
We're going to switch to the demo board, where
we have a number of tags embedded into the

00:07:09.270 --> 00:07:14.389
board so that we can quickly tap different
areas and show you the NFC content in the

00:07:14.389 --> 00:07:16.470
tags.
These tags could just as easily be a sticker

00:07:16.470 --> 00:07:21.120
or a card or any other form factor.
Ben's going to just tag a few of these and

00:07:21.120 --> 00:07:26.590
show how easy it is to read content.
The first one had a URL. Android.com, the

00:07:26.590 --> 00:07:31.250
Wi-Fi's a little slow -- there we are. It's
coming up. (chime).

00:07:31.250 --> 00:07:40.449
The next one has another V card. And then
the next one should have some text. (chime).

00:07:40.449 --> 00:07:45.150
So, hopefully, you're getting the idea. We
can put URLs, text, contact, in fact, any

00:07:45.150 --> 00:07:51.910
MIME data type into a tag. And most importantly,
when you touch the phone to the tag, it doesn't

00:07:51.910 --> 00:07:55.530
matter where you are, it doesn't matter that
you don't have any application running. You

00:07:55.530 --> 00:07:58.650
can be at the home screen, and it will take
you to the right application to handle that

00:07:58.650 --> 00:08:03.190
content. That's really powerful. QR codes
don't do that.

00:08:03.190 --> 00:08:07.310
Let's do a direct comparison, actually, of
NFC versus QR codes.

00:08:07.310 --> 00:08:12.210
This is a little bit unfair, but let's just
do it to see the difference in speed.

00:08:12.210 --> 00:08:22.330
So Jeff is going to try and read a Google
PLACES location embedded in a tag by scanning.

00:08:22.330 --> 00:08:30.479
While Ben is going to read it from a QR code.
Three, two, one, go. (chime).

00:08:30.479 --> 00:08:36.680
&gt;&gt;Nick Pelly: And the NFC tag's already done.
It's a little bit unfair to QR. You have to

00:08:36.680 --> 00:08:42.669
fire up the application and focus the camera.
Good luck if you're in low light conditions.

00:08:42.669 --> 00:08:47.829
So the key point here, NFC is just really
fast. It's low friction. We think users are

00:08:47.829 --> 00:08:51.800
going to love it.
And you can see the sequence with QRs.

00:08:51.800 --> 00:08:58.999
So let's now go to an application that we
put together in just a few days. We have APIs

00:08:58.999 --> 00:09:04.319
for NFC read, write, and peer-to-peer that
are already a part of the Gingerbread platform

00:09:04.319 --> 00:09:10.160
today. So we've used these APIs to put together
an application called Sticky Notes. It's just

00:09:10.160 --> 00:09:15.610
a very simple application to, you know, show
you how easy it is to use.

00:09:15.610 --> 00:09:20.759
Ben is going to tag this phone to some text
and it's going to automatically launch the

00:09:20.759 --> 00:09:25.600
Sticky Notes application. That's it. It's
read the content. We can now show you that

00:09:25.600 --> 00:09:30.160
it can actually write content to these tags
as well. This is something we haven't mentioned

00:09:30.160 --> 00:09:38.069
yet. These tags are reprogrammable. They are
a -- they have their own microprocessor. It's

00:09:38.069 --> 00:09:42.600
not like a QR code. You can actually program
these things once they're already deployed.

00:09:42.600 --> 00:09:48.120
So can we get, like, a word or a phrase that
you want to put into a tag here? We can demonstrate

00:09:48.120 --> 00:09:49.959
it live.
Chicken. Okay.

00:09:49.959 --> 00:09:55.189
&gt;&gt;Jeff Hamilton: Chicken it is.
&gt;&gt;Nick Pelly: That was really quick.

00:09:55.189 --> 00:10:03.470
We have a lively audience.
Okay. Ben's programmed it into the tag to

00:10:03.470 --> 00:10:07.449
prove we're not faking it. Jeff is going to
use a different phone to read it back out.

00:10:07.449 --> 00:10:09.800
And note it's going to launch the Sticky Notes
application again.

00:10:09.800 --> 00:10:12.160
&gt;&gt;Jeff Hamilton: There we go.
&gt;&gt;Nick Pelly: That's it. It's just so easy.

00:10:12.160 --> 00:10:22.499
So now the third mode --
[ Applause ]

00:10:22.499 --> 00:10:23.499
&gt;&gt;Jeff Hamilton: There we go.
&gt;&gt;Nick Pelly: Thank you.

00:10:23.499 --> 00:10:24.499
[ Applause ]
&gt;&gt;Nick Pelly: The third that's really interesting

00:10:24.499 --> 00:10:30.889
is peer-to-peer. Yep, you can read or write
to these passive stickers, and, yeah, there

00:10:30.889 --> 00:10:36.920
are plenty of other peer-to-peer protocols,
Bluetooth, Wi-Fi. What makes NFC so interesting

00:10:36.920 --> 00:10:40.990
is that it's triggered by the proximity, so
you don't need to go fumbling around in any

00:10:40.990 --> 00:10:46.860
UI. You just put the two phones together.
What we have is the two phones, both in the

00:10:46.860 --> 00:10:51.480
Sticky Notes application, both with different
text contents. With the Nexus S, the antennas

00:10:51.480 --> 00:10:57.740
are in the back of the phone, so you place
them back to back. (chime).

00:10:57.740 --> 00:11:02.430
And they've exchanged content. That's it.
You don't need to go fumbling around in any

00:11:02.430 --> 00:11:04.740
menus.
[ Applause ]

00:11:04.740 --> 00:11:11.360
&gt;&gt;Nick Pelly: We're going to show some more
peer-to-peer demos, and we're going to do

00:11:11.360 --> 00:11:16.721
it using the demo board. There's the outline
of two Nexus S phones on here. They have actually

00:11:16.721 --> 00:11:21.760
got antennas hard-wired behind them so that
we can show you the front of both phones as

00:11:21.760 --> 00:11:25.310
we do peer-to-peer. But if you're trying this
at home, you're going to want to put the phones

00:11:25.310 --> 00:11:33.980
back to back.
So we hope that you're beginning to see some

00:11:33.980 --> 00:11:38.360
of the possibilities of this technology.
What we wanted to do was just throw together

00:11:38.360 --> 00:11:45.490
some demos of -- some more sort of sci-fi,
like, what can this proximity-triggered action

00:11:45.490 --> 00:11:50.679
enable.
We wanted to create a wormhole. We programmed

00:11:50.679 --> 00:11:56.139
two tags to be the end points of this wormhole.
You can imagine that one tag is in Australia;

00:11:56.139 --> 00:12:02.920
one tag is in San Francisco. And when you
place one phone on the first tag, it begins

00:12:02.920 --> 00:12:12.730
the wormhole. (chime).
&gt;&gt;Nick Pelly: And on this other tag. (chime).

00:12:12.730 --> 00:12:21.199
We've taken a risk with these demos. We have
NFC, Bluetooth, and Wi-Fi at a conference.

00:12:21.199 --> 00:12:25.879
So the Wi-Fi is a bit slow.
But what's going to happen in a decent Wi-Fi

00:12:25.879 --> 00:12:30.050
connection is you're going to have a video
chat complete and you can be talking to someone

00:12:30.050 --> 00:12:33.800
on the other side of the world just through
touching the phones to a tag.

00:12:33.800 --> 00:12:39.139
&gt;&gt;Jeff Hamilton: One more time. (chime).
Some people claim wormholes don't exist.

00:12:39.139 --> 00:12:46.600
&gt;&gt;Nick Pelly: I guess Einstein was right.
All right. Let's go to another demo.

00:12:46.600 --> 00:12:54.749
So we have worked with Halfbrick Studios and
in just a few days, we took the Fruit Ninja

00:12:54.749 --> 00:13:03.149
application and added NFC and Bluetooth to
make it head-to-head multiplayer. Head-to-head

00:13:03.149 --> 00:13:08.809
multiplayer games over Bluetooth is not really
new, but what is new is using NFC to initiate

00:13:08.809 --> 00:13:13.399
the connection.
So we have one phone at the Fruit Ninja menu

00:13:13.399 --> 00:13:17.429
screen. The other phone can be anywhere. It's
just at the home screen right now. Put them

00:13:17.429 --> 00:13:20.019
together and see what happens. (chime).
[ Applause ]

00:13:20.019 --> 00:13:27.459
&gt;&gt;Nick Pelly: That's it, straight into a game.
Isn't that awesome?

00:13:27.459 --> 00:13:33.649
It looks like our intern has been practicing
this one.

00:13:33.649 --> 00:13:39.010
&gt;&gt;Jeff Hamilton: He's pretty good.
&gt;&gt;Nick Pelly: I want to be clear, everything

00:13:39.010 --> 00:13:44.600
we've shown you is possible with Gingerbread
APIs. This can all be done today. We're going

00:13:44.600 --> 00:13:49.809
to make it easier for developers with some
additional APIs in Ice Cream. But the functionality

00:13:49.809 --> 00:13:56.019
is already there.
Let's talk a little bit more about Ice Cream

00:13:56.019 --> 00:14:00.999
Sandwich.
I hope you're already convinced that NFC is

00:14:00.999 --> 00:14:05.350
an interesting technology. And we really hope
that we've got your imagination going with

00:14:05.350 --> 00:14:11.639
the kinds of activities that you can build
out of this physical interaction.

00:14:11.639 --> 00:14:15.649
We think it's really interesting, too, and
we think this is just the tip of the iceberg.

00:14:15.649 --> 00:14:23.879
Here are some ideas that we're going to put
into the Ice Cream Sandwich release.

00:14:23.879 --> 00:14:30.459
We want to really focus on these 0-click interactions.
We keep coming back to the one-key feature.

00:14:30.459 --> 00:14:34.679
You can put two phones together without any
UI, without having to launch any application,

00:14:34.679 --> 00:14:38.869
and share content.
So we're going to bring 0-click sharing into

00:14:38.869 --> 00:14:43.799
the platform for Ice Cream Sandwich.
Let's show some demonstrations.

00:14:43.799 --> 00:14:49.470
Ben is viewing a contact. You put the other
phone next to it, and immediately, it just

00:14:49.470 --> 00:14:51.619
shares that contact. This is how easy it should
be.

00:14:51.619 --> 00:14:59.339
[ Applause ]
&gt;&gt;Nick Pelly: It's sharing the on-screen contact

00:14:59.339 --> 00:15:02.429
with the other phone.
Let's go to a Web page. Ben is going to load

00:15:02.429 --> 00:15:09.220
a Web page. Android.com. Put it against another
phone, and -- (chime) -- as you can guess,

00:15:09.220 --> 00:15:12.579
it just loads the Web page.
We want to build this into as many system

00:15:12.579 --> 00:15:18.660
apps as we can. And we want to make the APIs
for this easily available to application developers

00:15:18.660 --> 00:15:27.079
for use with your applications.
So there's one more demo that we want to show.

00:15:27.079 --> 00:15:33.179
We don't have NFC in a tablet yet, but we
have hacked up this tablet with an NFC evaluation

00:15:33.179 --> 00:15:34.559
board.
[ Laughter ]

00:15:34.559 --> 00:15:39.189
&gt;&gt;Nick Pelly: To show you, you know, what
can be possible when we have a broader range

00:15:39.189 --> 00:15:46.120
of devices available with NFC.
Let's say you're watching YouTube on a Nexus

00:15:46.120 --> 00:15:50.889
S. It's got a great screen, but the tablet
is so much better. Here's what we think should

00:15:50.889 --> 00:15:53.740
happen when you touch your YouTube video to
the tablet.

00:15:53.740 --> 00:16:06.949
[ Applause ]
&gt;&gt;Nick Pelly: And if you noticed, it resumes

00:16:06.949 --> 00:16:10.459
playback right where the other one left off.
&gt;&gt;Jeff Hamilton: If only I could dance that

00:16:10.459 --> 00:16:16.221
well.
&gt;&gt;Nick Pelly: So we hope we have you excited.

00:16:16.221 --> 00:16:20.319
There's one more demo that we think the application
developers in the audience are going to be

00:16:20.319 --> 00:16:25.980
particularly excited about. And that is application
sharing.

00:16:25.980 --> 00:16:31.709
So let's say that one phone is running Fruit
Ninja. The other phone doesn't have Fruit

00:16:31.709 --> 00:16:39.069
Ninja installed. What should happen when you
put those two phones together?

00:16:39.069 --> 00:16:40.839
Well, let's demonstrate.
&gt;&gt;Jeff Hamilton: Let's see.

00:16:40.839 --> 00:16:49.540
(chime).
&gt;&gt;Nick Pelly: There you go. Take you to the

00:16:49.540 --> 00:16:54.910
market to download it. This is going to encourage
viral app sharing. If you and your friends

00:16:54.910 --> 00:16:57.730
you want to share an app to a friend, you
don't have to go search to it in the market.

00:16:57.730 --> 00:17:01.540
You can just touch your phone to theirs and
they can download it.

00:17:01.540 --> 00:17:10.240
I will now pass back to Jeff for how to NFC.
&gt;&gt;Jeff Hamilton: Thanks, Nick. Those were

00:17:10.240 --> 00:17:13.919
some great demos.
So we have seen a little bit about what you

00:17:13.919 --> 00:17:17.770
can do with NFC, what the technology is like.
And hopefully you all are starting to think

00:17:17.770 --> 00:17:22.100
about what kinds of things you can do in your
applications using NFC.

00:17:22.100 --> 00:17:27.010
Let's talk a bit about how you would do that.
First we're going to talk quickly about how

00:17:27.010 --> 00:17:32.000
to read data over NFC. Then we're going to
talk how to write data over NFC. And then

00:17:32.000 --> 00:17:37.010
we're going to get into some more advanced
topics at the end.

00:17:37.010 --> 00:17:40.730
The first thing to know when reading data
from NFC is that there's a data structure

00:17:40.730 --> 00:17:46.179
called NDEF, this stands for NFC Data Exchange
Format. It is the data container format to

00:17:46.179 --> 00:17:50.269
use for NFC.
The reason that there needs to be a standardized

00:17:50.269 --> 00:17:53.530
data container format here is that on the
passive tags, there's a lot of different types

00:17:53.530 --> 00:17:57.880
of technology that exist, and they all have
a lot of different properties, different ways

00:17:57.880 --> 00:18:03.080
they store data on them, and things like that.
So the standard NDEF here is designed to be

00:18:03.080 --> 00:18:08.120
able to work across all of these different
types of technologies. And it's just a way

00:18:08.120 --> 00:18:12.590
you can interact with NFC devices and be guaranteed
that you're going to have a common data structure

00:18:12.590 --> 00:18:19.149
across these devices for many different vendors.
The general structure of NDEF is, first you

00:18:19.149 --> 00:18:25.639
have a message, and the message encapsulates
within it one or more NDEF records.

00:18:25.639 --> 00:18:31.490
And the message is just an encapsulation of
records. The records that you have in there,

00:18:31.490 --> 00:18:37.029
each record has a high level type, and then
there's optionally a second level type that's

00:18:37.029 --> 00:18:41.910
scoped within the first level type. There's
an optional ID within the record. And then

00:18:41.910 --> 00:18:47.340
there's an optional payload as well.
For more information about NDEF messages and

00:18:47.340 --> 00:18:53.460
NDEF records, the NDEF message and NDEF record
classes in the SDK, there's a bunch of documentation

00:18:53.460 --> 00:18:57.280
there with the gory details.
&gt;&gt;Nick Pelly: NDEF was the contain format

00:18:57.280 --> 00:19:02.260
we used for each of those demos.
&gt;&gt;Jeff Hamilton: The first thing to know about

00:19:02.260 --> 00:19:07.970
NDEF when reading it on the phone is how it's
going to be dispatched to your application.

00:19:07.970 --> 00:19:14.080
So by design, the NFC data is dispatched to
only one activity on the phone. And we think

00:19:14.080 --> 00:19:17.570
this is actually a very important aspect of
the way we design the system. Because when

00:19:17.570 --> 00:19:22.220
users are interacting with things with NFC,
they really are looking for instant gratification

00:19:22.220 --> 00:19:27.820
for the way that they're interacting with
things around them in space. And so what we

00:19:27.820 --> 00:19:33.380
really wanted to do is launch directly into
the application that handles the data that

00:19:33.380 --> 00:19:37.309
they're interacting with. And we really think
that, you know, for the best experience for

00:19:37.309 --> 00:19:40.630
the user, going directly to the application
is very important so that they can interact

00:19:40.630 --> 00:19:45.600
with things around them.
So let's talk a bit about how you get into

00:19:45.600 --> 00:19:53.970
your activity when data is read over NDEF.
So what we do is we take the first NDEF record

00:19:53.970 --> 00:20:03.020
in the NDEF message and we look at its type.
And we build an intent from that type.

00:20:03.020 --> 00:20:07.210
So this slide shows some examples of how we
are going to take an NDEF and convert it into

00:20:07.210 --> 00:20:11.440
an intent. And we show that on the right-hand
side with some snippets from an Android manifest

00:20:11.440 --> 00:20:16.220
file, and this is how you would capture NDEF
data coming into the phone from your activity.

00:20:16.220 --> 00:20:23.391
So the first two examples show how we handle
just raw text coming in. So the Sticky Notes

00:20:23.391 --> 00:20:28.450
example we showed earlier handles text plain
line type, and it just deals with general

00:20:28.450 --> 00:20:30.620
text.
So there are two ways you can get general

00:20:30.620 --> 00:20:36.290
text. There is a top-level type well-known
with a secondary type of text, and the payload

00:20:36.290 --> 00:20:41.380
is just text.
The second one is you can have MIME data in

00:20:41.380 --> 00:20:46.110
an NF record, so if you have MIME data and
the secondary type is text plain, the payload

00:20:46.110 --> 00:20:51.510
again would be just text. And what we do is
we take the MIME type there, text plain, and

00:20:51.510 --> 00:20:56.950
we put that on the MIME type field for the
intent that we start when the data comes in,

00:20:56.950 --> 00:21:00.080
and that let's applications filter on the
different types of data they are interested

00:21:00.080 --> 00:21:03.450
in.
So taking that a step further, the third example

00:21:03.450 --> 00:21:09.669
here is using the application slash VND.example
and this is the generally accepted format

00:21:09.669 --> 00:21:14.799
of doing vendor specific MIME codes or MIME
types.

00:21:14.799 --> 00:21:18.620
So this is something we think would be great
for developers. If you have a data structure

00:21:18.620 --> 00:21:23.830
you want to put in a sticker or you want to
transfer over peer to peer, you can just create

00:21:23.830 --> 00:21:29.940
your own custom MIME type using VND dot and
then your domain name and put your payload

00:21:29.940 --> 00:21:32.310
in there.
What we do is we take that MIME type, put

00:21:32.310 --> 00:21:38.049
it into the intent and from your Android manifest
you can specify you want that MIME type coming

00:21:38.049 --> 00:21:42.960
in from NDEF, and then your application will
get launched directly to handle your data

00:21:42.960 --> 00:21:46.860
structures.
And the last example, we can do basically

00:21:46.860 --> 00:21:51.740
the same thing using a URI. So there are three
different ways you can store URIs in NDEF.

00:21:51.740 --> 00:21:57.020
If we find one of those three ways, we pull
the URI out, and we set that as the data field

00:21:57.020 --> 00:22:02.840
on the intent, and you can use the existing
standard Android manifest matching mechanism

00:22:02.840 --> 00:22:07.019
for saying which URIs you are interested in.
And you can be as specific or generic as you

00:22:07.019 --> 00:22:12.539
want when setting up that match in the system.
&gt;&gt;Nick Pelly: You can think of NDEF types

00:22:12.539 --> 00:22:17.750
as like a superset of MIME and URL types,
and Android does the work for you in mapping

00:22:17.750 --> 00:22:25.679
those to MIME or URL types for intent filters.
&gt;&gt;Jeff Hamilton: Okay. So now we talked a

00:22:25.679 --> 00:22:29.700
little bit about how we build that intent,
let's look at some code snippets for how applications

00:22:29.700 --> 00:22:33.429
would actually handle that.
The first one we have here is the Android

00:22:33.429 --> 00:22:37.950
manifest from the Sticky Notes example we
showed earlier, and it's just an extra intent

00:22:37.950 --> 00:22:43.261
filter that has the action NDEF discovered
on there. And this one, for the Sticky Notes,

00:22:43.261 --> 00:22:47.700
was looking for text, so it set the MIME type
to text plain.

00:22:47.700 --> 00:22:51.230
Here you would just put in, in this intent
filter, you would put in some kind of filter

00:22:51.230 --> 00:22:58.460
there for whatever data type you have that
your application is dealing with over NFC.

00:22:58.460 --> 00:23:01.710
The second code snippet we have here is just
the activity and how it would handle it when

00:23:01.710 --> 00:23:06.630
it receives that intent. There's basically
just an extra on the intent, it's called extra

00:23:06.630 --> 00:23:11.460
NDEF messages and that's an array of NDEF
messages. Typically there's only one NDEF

00:23:11.460 --> 00:23:15.159
message that comes over the payload, but it
is an array because it is possible in some

00:23:15.159 --> 00:23:21.240
cases to have multiple NDEF messages. So typically
you just look at the first NDEF in that array,

00:23:21.240 --> 00:23:24.759
get that NDEF record in there and off you
go.

00:23:24.759 --> 00:23:29.090
&gt;&gt;Nick Pelly: This code snippet is straight
from the Sticky Notes application that we

00:23:29.090 --> 00:23:32.850
demonstrated, and the full code is available,
is linked at the end of the presentation.

00:23:32.850 --> 00:23:42.669
&gt;&gt;Jeff Hamilton: Let's talk a bit about best
practices when dealing with NFC and NDEF data.

00:23:42.669 --> 00:23:47.350
I think this is very important that you always
want to use precise intent filters. You don't

00:23:47.350 --> 00:23:53.470
just want to say I capture URIs that all have
HTTP as their scheme because if multiple applications

00:23:53.470 --> 00:23:56.549
are doing that, you are going to get something
like we have in the slides here where you

00:23:56.549 --> 00:24:01.340
have an activity chooser dialogue, and the
user is really not going to have that instant

00:24:01.340 --> 00:24:04.389
gratification that we think is the hallmark
of NFC and what makes the technology really

00:24:04.389 --> 00:24:08.250
exciting for users, and it's not going to
be a great experience for them.

00:24:08.250 --> 00:24:13.860
So we highly suggest that you structure your
data in ways that you can create precise intent

00:24:13.860 --> 00:24:20.830
filters with custom MIME types or with URIs
to domains that you control so you are not

00:24:20.830 --> 00:24:24.621
going to be stepping on each other toes, and
it will be the best experience for all the

00:24:24.621 --> 00:24:29.009
users out there.
Another thing worth mentioning as well we

00:24:29.009 --> 00:24:34.669
talked earlier about how NFC is kind of slow
on the data transfer rate, so we also recommend

00:24:34.669 --> 00:24:39.299
that you keep your data structures on the
smaller side. Typically, one kilobyte or less

00:24:39.299 --> 00:24:45.850
is a good recommendation.
&gt;&gt;Nick Pelly: Please, no XML over NFC.

00:24:45.850 --> 00:24:52.179
&gt;&gt;Jeff Hamilton: Okay. So we talked about
reading NDEF. Now let's talk about where you

00:24:52.179 --> 00:24:57.130
can read it from.
So you can read it from passive tags, as we

00:24:57.130 --> 00:25:02.549
showed in the demos earlier. There are a bunch
of different types of passive tags. So the

00:25:02.549 --> 00:25:07.840
NFC forum has gone out there and they specified
four standardized types of passive tags. They

00:25:07.840 --> 00:25:13.850
are called type 1 through 4.
We have up here some examples of products

00:25:13.850 --> 00:25:18.510
that implement these specifications. These
are the most common implementations of these

00:25:18.510 --> 00:25:21.330
specifications that you find out there, although
they are not the only implementations that

00:25:21.330 --> 00:25:27.710
exist. There is the Topaz, type 1; MIFARE
Ultralight, type 2; Sony Felica, type 3; and

00:25:27.710 --> 00:25:34.170
MIFARE Desfire, type 4.
Outside of the NFC forum defined types, there

00:25:34.170 --> 00:25:40.570
are also some proprietary NFC tags Micro classic
is the best example of that. There is tons

00:25:40.570 --> 00:25:46.320
of micro classics out there in the world today,
and they support NDEF as well.

00:25:46.320 --> 00:25:50.960
Because they are completely standardized,
support for those is optional in Android.

00:25:50.960 --> 00:25:55.149
Not all devices are necessarily going to be
able to read these tags. The Nexus S can read

00:25:55.149 --> 00:25:59.690
them, but if you are putting a deployment
out there in the world, we highly suggest

00:25:59.690 --> 00:26:04.000
you go with one of the standard type 1 through
4 tags because then you will be guaranteed

00:26:04.000 --> 00:26:08.399
that all devices will be able to read them
and you won't run into any problems with people

00:26:08.399 --> 00:26:14.380
who have devices that can't read the type
of tag you have deployed.

00:26:14.380 --> 00:26:18.590
And last but not least, you can read NDEF
peer to peer. And this is from one Android

00:26:18.590 --> 00:26:26.030
phone to another. And we think that's a very
exciting way to read it as well.

00:26:26.030 --> 00:26:30.740
So we talked earlier about NFC stickers. I
think you have all probably seen these in

00:26:30.740 --> 00:26:35.370
your badge sheaths. The stickers we have given
you are type 4 tags that can hold up to two

00:26:35.370 --> 00:26:41.059
kilobytes of data in them. If you read the
sticker in there with the Nexus S, it will

00:26:41.059 --> 00:26:45.000
take you to a Web page that has a link to
documentation about NFC, some sample code

00:26:45.000 --> 00:26:50.420
from Sticky Notes application, as well as
a link to the NXP tag writer application from

00:26:50.420 --> 00:26:54.000
our friends at NXP, and you can download that
from the marketplace and you can use it to

00:26:54.000 --> 00:26:59.289
rewrite the tag and play with it and put whatever
data you want in there.

00:26:59.289 --> 00:27:02.159
One thing to note, these tags are rewritable
so you can put whatever data structures you

00:27:02.159 --> 00:27:06.770
want in. There you can play around with them,
use them to develop applications. But beware

00:27:06.770 --> 00:27:11.080
that you can't make them read only. So if
you are going to put them up, stick them around

00:27:11.080 --> 00:27:14.820
somewhere, be aware that someone might come
around and rewrite them on you and who knows

00:27:14.820 --> 00:27:19.120
what they will put in there.
Keep Nick away from your tags.

00:27:19.120 --> 00:27:29.059
Okay. So let's talk a bit about writing in
more detail.

00:27:29.059 --> 00:27:34.049
As we said, NDEF tags can be writable. It's
also possible to configure the tags to be

00:27:34.049 --> 00:27:38.679
read only from the factor tree when you purchase
them. The type 1 and 2 tags it's possible

00:27:38.679 --> 00:27:43.630
to make read only at any time. If you had
a read/writable tag, you can mark it read

00:27:43.630 --> 00:27:47.769
only and that will be honored in the tag.
For types 3 and 4 they have to be configured

00:27:47.769 --> 00:27:51.259
as read only from the factory. So if you get
a read/writable tag like the ones we've given

00:27:51.259 --> 00:27:57.279
you guys today, you can't mark that tag read
only later on. So that's something to be aware

00:27:57.279 --> 00:28:01.600
of if you are looking to deploy tags out in
the field.

00:28:01.600 --> 00:28:05.740
So when you go to write tags programmatically
on Android, you have to do that when the tag

00:28:05.740 --> 00:28:09.909
is in the field of the phone. So that's when
the tag is touching the phone, pretty much.

00:28:09.909 --> 00:28:15.910
And we have a code snippet here, again from
our Sticky Notes sample code. You can go down

00:28:15.910 --> 00:28:21.169
to the sample code on the Web page. Basically
you just create an NDEF record that has the

00:28:21.169 --> 00:28:26.740
text that you want to write into it, encapsulate
that in a NDEF message, and then get a reference

00:28:26.740 --> 00:28:31.710
to the tag object that you want to write to
and the NDEF technology you are going to use

00:28:31.710 --> 00:28:35.889
to write, and then just call write NDEF message
and it goes out over to the tag and you are

00:28:35.889 --> 00:28:42.929
good to go.
So writing peer to peer is a little different.

00:28:42.929 --> 00:28:47.730
The way we set it up on Android is only the
foreground activity can register a payload

00:28:47.730 --> 00:28:52.000
to push over a peer-to-peer link.
So the application needs to register that

00:28:52.000 --> 00:28:58.919
payload in advance. It's something that we
think is really important in the way the APIs

00:28:58.919 --> 00:29:07.710
are set up, because we want to make sure the
user is aware of which activity is using the

00:29:07.710 --> 00:29:14.650
NFC radio.
&gt;&gt;Nick Pelly: I think it's a common theme

00:29:14.650 --> 00:29:19.600
about APIs, actually. We always want to encourage
the foreground activity to be the one using

00:29:19.600 --> 00:29:25.210
NFC. It's for instant gratification so the
user knows exactly which application is using

00:29:25.210 --> 00:29:29.340
the NFC link.
&gt;&gt;Jeff Hamilton: So your application on resume

00:29:29.340 --> 00:29:35.409
we just call the NFC adapter, or API enable
foreground NDEF push. And you head off an

00:29:35.409 --> 00:29:39.850
NDEF message. So what happens then is the
system will take that NDEF message, and when

00:29:39.850 --> 00:29:44.240
a peer-to-peer link is established, it will
hand that NDEF message over to the other phone

00:29:44.240 --> 00:29:48.309
on the end of the peer-to-peer link, and it
will dispatch that NDEF message as if it had

00:29:48.309 --> 00:29:52.370
been read from a passive tag.
&gt;&gt;Nick Pelly: You can use the same code on

00:29:52.370 --> 00:29:57.190
the receiving side for peer to peer as you
used for reading a passive tag. It looks the

00:29:57.190 --> 00:30:01.160
same. You just receive a NDEF payload.
&gt;&gt;Jeff Hamilton: So this is a really nice

00:30:01.160 --> 00:30:07.389
API, we think. It makes it very easy to add
peer-to-peer support for NFC on your applications.

00:30:07.389 --> 00:30:13.649
You just need to call enable foreground NDEF
push from your on resume and hand off the

00:30:13.649 --> 00:30:17.289
content.
One thing we thought would be handy on the

00:30:17.289 --> 00:30:22.400
API, and unfortunately we didn't get it into
Gingerbread, we will add this in Ice Cream

00:30:22.400 --> 00:30:27.100
Sandwich, is you can add a callback system
-- you can register a callback. So when the

00:30:27.100 --> 00:30:30.820
peer-to-peer link is brought up, there will
be a call back made to your application and

00:30:30.820 --> 00:30:34.700
you can return a NDEF message at that time
that's relevant to the state of your application

00:30:34.700 --> 00:30:38.429
when the link is established.
So that's something you saw earlier with the

00:30:38.429 --> 00:30:43.139
YouTube example. The YouTube application on
the phone is using this Ice Cream Sandwich

00:30:43.139 --> 00:30:47.769
API, and it's responding with not only a link
to the video that its playing back but also

00:30:47.769 --> 00:30:52.399
the time stamp of where it is in that video
so the other side can start playback at the

00:30:52.399 --> 00:31:02.190
same point.
&gt;&gt;Nick Pelly: Okay. So Jeff's covered the

00:31:02.190 --> 00:31:10.090
basics of how to NFC. And we really focused
on NDEF tag read, NDEF tag write, and NDEF

00:31:10.090 --> 00:31:15.019
peer to peer. There's a theme here. We're
talking about NDEF. But are all NFC tags NDEF?

00:31:15.019 --> 00:31:21.020
Well, they are not. So we are going to go
into detail about the NFC ecosystem on a broader

00:31:21.020 --> 00:31:24.510
level. Don't worry, we are not going to go
too deep. There's a lot to talk about here

00:31:24.510 --> 00:31:27.659
but we will just make you aware of some of
the things that you should know.

00:31:27.659 --> 00:31:39.679
So NFC as a technology has actually been around
for over 15 years. But NDEF is a fairly new

00:31:39.679 --> 00:31:46.950
standardization. And over that 15 years, companies
have invested heavily into NFC for transit,

00:31:46.950 --> 00:31:51.789
for credit cards, for passports, for physical
access cards. There's over 5 billion of these

00:31:51.789 --> 00:31:59.119
already out there that your Nexus S or other
Android NFC phone can talk to already.

00:31:59.119 --> 00:32:05.940
Now is probably a good time to bring up RFID.
We haven't mentioned it yet. RFID is a different

00:32:05.940 --> 00:32:11.559
technology to NFC and it really bugs me because
I keep reading articles where they replace

00:32:11.559 --> 00:32:19.409
NFC with RFID. They are different set of technologies.
RFID is typically working at a range of meters.

00:32:19.409 --> 00:32:25.629
NFC is exclusively a centimeter range technology.
This is really important. This means that

00:32:25.629 --> 00:32:32.320
you were going to get that proximity triggered
interaction, physical reactions, virtual reactions.

00:32:32.320 --> 00:32:37.240
And it means that you don't have to worry
so much about many devices being in the field

00:32:37.240 --> 00:32:41.590
or privacy and security.
Anyway, so when we quote the 5 billion number,

00:32:41.590 --> 00:32:50.049
that's 5 billion NFC tags.
So this is our crazy diagram of like all the

00:32:50.049 --> 00:32:54.340
different NFC technologies that -- actually,
it's a subset of the technologies that have

00:32:54.340 --> 00:32:59.980
been out there for the last 15 years. When
we rehearsed this, I can talk for half an

00:32:59.980 --> 00:33:04.860
hour about all these technologies, but my
product manager was like, no, let's just spend

00:33:04.860 --> 00:33:08.889
30 seconds.
So all I want to do is let you guys know there

00:33:08.889 --> 00:33:15.269
are a bunch of different technologies that
are all sort of -- fall under the NFC ecosystem.

00:33:15.269 --> 00:33:19.950
And all those tags that are deployed that
are non-NDEF are going to use one of these

00:33:19.950 --> 00:33:23.380
technologies.
Now, the good news for you guys today is we

00:33:23.380 --> 00:33:28.889
have built APIs to the majority of these technologies
so that you can read and write with all of

00:33:28.889 --> 00:33:30.710
these legacy tags that are already out there
today.

00:33:30.710 --> 00:33:42.119
[ Applause ]
&gt;&gt;Nick Pelly: So I won't go into the detail,

00:33:42.119 --> 00:33:48.730
but if you want to look into using these classes,
the package is android.NFC.technology. We

00:33:48.730 --> 00:33:54.529
have a set of classes like IsoDep, NfcA, NfcB,
NfcF. If you know NFC well, you might have

00:33:54.529 --> 00:33:58.700
heard of some of these before. And we have
all the low-level commands you need. You know,

00:33:58.700 --> 00:34:05.659
transceive, authenticate, read, write, to
use all of these technologies from your Android

00:34:05.659 --> 00:34:10.720
applications.
So I will mention that when I say technologies,

00:34:10.720 --> 00:34:17.610
I kind of mean protocol. Any given tag can
have an RF level protocol and then one or

00:34:17.610 --> 00:34:22.160
more other protocols building on top. So don't
be surprised when you see multiple technologies

00:34:22.160 --> 00:34:31.260
enumerate on a single tag.
Now, we talked about dispatching to application

00:34:31.260 --> 00:34:37.670
with NDEF. We use the NDEF discovered intent.
It's a start activity intent so we always

00:34:37.670 --> 00:34:44.150
are bringing an application to the foreground.
It's the same with non-NDEF tags. We use the

00:34:44.150 --> 00:34:48.070
tech discovered intent, it's a start activity
intent. We are trying to bring the application

00:34:48.070 --> 00:34:53.540
to the foreground so the user gets instant
gratification.

00:34:53.540 --> 00:34:57.280
The content you filter on is no longer the
NDEF type because we don't know the type.

00:34:57.280 --> 00:35:02.390
It's some unknown tag with different technologies
on it. So instead you filter on the technologies

00:35:02.390 --> 00:35:07.050
you want to use.
So, for example, if you are writing an application

00:35:07.050 --> 00:35:11.480
to read information off of a transit card,
you might specify that you are looking for

00:35:11.480 --> 00:35:16.320
cards with NfcA and IsoDep because you know
all the transit cards you care about have

00:35:16.320 --> 00:35:22.670
those technologies.
&gt;&gt;Jeff Hamilton: I think it's worth noting

00:35:22.670 --> 00:35:27.270
it happens before the technology phase.
So if you're writing an application and you're

00:35:27.270 --> 00:35:32.760
using NDEF and you're using the intent filters
like we described earlier for NDEF data, that's

00:35:32.760 --> 00:35:36.640
going to happen before the technology discovered
happens.

00:35:36.640 --> 00:35:41.800
So, basically, we call start activity if we
get any results back for activities that handle

00:35:41.800 --> 00:35:45.870
that NDEF data structure. We just launch directly
into them. If there are no activities installed

00:35:45.870 --> 00:35:51.100
in the system that handle that NDEF data structure,
then we'll go on and try to dispatch and call

00:35:51.100 --> 00:35:56.420
start activity on action tech discovered with
the technologies that are present on the tag

00:35:56.420 --> 00:36:00.500
that's in the field.
So if you're using NDEF, that takes precedent

00:36:00.500 --> 00:36:05.620
over the technology level. We think that's
kind of important, because NDEF allows much

00:36:05.620 --> 00:36:10.060
more precise filtering to applications, and,
you know, that's a great way to get directly

00:36:10.060 --> 00:36:14.150
into your application for a better user experience.
&gt;&gt;Nick Pelly: Please use NDEF if you can.

00:36:14.150 --> 00:36:20.200
But if you can't because you're using legacy
tags, then look at tech discovered.

00:36:20.200 --> 00:36:25.170
While we're talking about dispatching tags
to your applications, there's one other important

00:36:25.170 --> 00:36:31.210
dispatch mechanism we want to mention.
We have an API function, enable foreground

00:36:31.210 --> 00:36:35.070
dispatch.
When your activity is already in the foreground,

00:36:35.070 --> 00:36:40.240
you can call this to tell the Android operating
system that you want to receive all further

00:36:40.240 --> 00:36:45.191
tags into your application and not some other
application. You know, this is really important,

00:36:45.191 --> 00:36:51.010
because otherwise, if you're trying to write
to a tag from your application and then you

00:36:51.010 --> 00:36:55.230
scan a tag, you can make sure that you're
not going to launch to some other third-party

00:36:55.230 --> 00:36:59.370
application. It's going to stay in your application
and you can receive all the new tag updates.

00:36:59.370 --> 00:37:02.630
So this is a good tip to look at enable foreground
dispatch.

00:37:02.630 --> 00:37:11.860
Okay, I just talked a whole bunch about passive
tags, reading and writing. Let's talk a little

00:37:11.860 --> 00:37:18.150
bit deeper about peer-to-peer.
The key feature of NFC for peer-to-peer is

00:37:18.150 --> 00:37:23.320
that it's low friction. There's no discovery,
there's no pairing. You just touch the phones

00:37:23.320 --> 00:37:27.940
together and it will launch the application.
However, it's got a low range. It's only going

00:37:27.940 --> 00:37:33.240
to work when they're sort of one to four centimeters
away. That's not great for playing a multiplayer

00:37:33.240 --> 00:37:38.700
game. And the data rate is really slow.
So like with the Fruit Ninja demo, we really

00:37:38.700 --> 00:37:44.730
recommend to switch to a high-bandwidth connection
like Bluetooth, or you can equally well use

00:37:44.730 --> 00:37:48.431
Wi-Fi, or even go through the cloud for your
heavy lifting in the application.

00:37:48.431 --> 00:37:56.010
Bluetooth and NFC, they go together so well.
We really recommend you look at this.

00:37:56.010 --> 00:38:00.650
&gt;&gt;Jeff Hamilton: Wireless nirvana.
&gt;&gt;Nick Pelly: NFC to initiate the connection,

00:38:00.650 --> 00:38:05.201
and then Bluetooth for the -- the heavy lifting.
Please don't do socket-style communication

00:38:05.201 --> 00:38:13.320
with NFC. It doesn't work so well.
Okay. We're getting towards the end. We just

00:38:13.320 --> 00:38:18.790
want to recap on the key points that we've
presented to you today.

00:38:18.790 --> 00:38:22.900
Number one, I think we've said it a few times
now, but just to hammer it home, NFC is quick

00:38:22.900 --> 00:38:29.920
connection setup is what it's about. So please
think about how you can use this in your applications

00:38:29.920 --> 00:38:32.331
and the kinds of experiences your users are
going to get out of this.

00:38:32.331 --> 00:38:37.780
Number two, you can work with passive devices,
stickers, tags. You can take these stickers

00:38:37.780 --> 00:38:43.560
and just, you know, place them around the
environment, on people, and just, you know,

00:38:43.560 --> 00:38:48.820
see what happens.
NDEF dispatch, use precise intent filters

00:38:48.820 --> 00:38:57.220
and prefer NDEF over the legacy technologies.
Number four is, foreground interaction. The

00:38:57.220 --> 00:39:02.850
APIs are designed to work in the foreground.
So, you know, we really don't want to encourage

00:39:02.850 --> 00:39:08.240
applications to be using the NFC connection
in the background.

00:39:08.240 --> 00:39:17.370
And lastly, for socket-style communication,
please use Bluetooth or some other, you know,

00:39:17.370 --> 00:39:23.930
higher-range connection.
We're about to go to Q&amp;A, but I want to just

00:39:23.930 --> 00:39:28.580
cover a few topics we know are going to come
up first.

00:39:28.580 --> 00:39:34.430
Privacy. So, you know, when we work with NFC,
we often hear people talking about privacy.

00:39:34.430 --> 00:39:37.690
And, you know, it's a really important topic
to discover. Because we do care about user

00:39:37.690 --> 00:39:42.540
privacy. I don't want people reading my contact
information out of my phone without me letting

00:39:42.540 --> 00:39:49.500
them. So I want to touch on a few points.
First of all, NFC is not RFID. It does not

00:39:49.500 --> 00:39:54.540
work at a range of meters. This is a centimeter
technology. You have to be really close to

00:39:54.540 --> 00:40:01.730
the phone in order to communicate with the
NFC antenna. It's a very low-powered antenna.

00:40:01.730 --> 00:40:07.440
Second point is, yeah, NFC is off when the
screen is off. So, you know, as I like to

00:40:07.440 --> 00:40:12.230
call it, there's no butt-sniffing. You can't
go and scan someone while their phone's in

00:40:12.230 --> 00:40:13.950
their back pocket and the screen's off.
[ Laughter ]

00:40:13.950 --> 00:40:17.470
&gt;&gt;Jeff Hamilton: That's a good thing. You
don't want Nick doing that to you.

00:40:17.470 --> 00:40:21.300
&gt;&gt;Nick Pelly: I thought you took that out
of the slides.

00:40:21.300 --> 00:40:26.330
And lastly, third-party applications, they
must be in the foreground. We really think

00:40:26.330 --> 00:40:30.300
this is the right usage model. It's instant
gratification. And it means that you know

00:40:30.300 --> 00:40:33.720
which applications are using the NFC link
and you know if they're misbehaving.

00:40:33.720 --> 00:40:43.430
Okay. Second hot topic is security. It's related
to privacy, and some of the important points

00:40:43.430 --> 00:40:48.360
are similar.
NFC is, by design, low range and low power.

00:40:48.360 --> 00:40:55.070
So if someone was to try and intercept or
eavesdrop on a communication, they're going

00:40:55.070 --> 00:41:00.520
to be need to be very close in order to see
what's going on.

00:41:00.520 --> 00:41:06.110
Now, that said, there is no link-level encryption
built into the standard NFC protocols. So

00:41:06.110 --> 00:41:13.200
if you care deeply about the payload, if the
payload is a financial instrument or something

00:41:13.200 --> 00:41:17.560
else that you need to keep secure, then you
should encrypt it or you should look at some

00:41:17.560 --> 00:41:23.140
of the more advanced NFC technologies that
do have encryption built into the lower level.

00:41:23.140 --> 00:41:31.700
But by default, don't assume that the link
level is encrypted.

00:41:31.700 --> 00:41:38.240
Lastly, card emulation. This is the most popular
question on Android developers' Google Groups.

00:41:38.240 --> 00:41:45.110
So we talked a lot about reader/writer mode
and peer-to-peer. There's a third major mode

00:41:45.110 --> 00:41:53.320
of NFC, which is card emulation. This is when
the Nexus S is pretending to be a passive

00:41:53.320 --> 00:41:59.290
tag that you can put in the field of a reader/writer.
So if you wanted to pretend to be a transit

00:41:59.290 --> 00:42:05.790
card or pretend to be a credit card. So in
Gingerbread, we have no API support for card

00:42:05.790 --> 00:42:10.670
emulation. And it's not that we forgot. We
thought very hard about it. But there's some

00:42:10.670 --> 00:42:16.010
simple reasons.
I showed you that diagram earlier of all those

00:42:16.010 --> 00:42:20.050
different technologies. Well, if you're going
to do card emulation, the hardware has to

00:42:20.050 --> 00:42:23.930
pick one of those technologies to emulate.
You can't typically emulate all of them at

00:42:23.930 --> 00:42:28.160
the same time. And the hardware out there
today doesn't actually support all of these

00:42:28.160 --> 00:42:33.220
at the same time anyway.
So if we were to build these APIs, the applications

00:42:33.220 --> 00:42:38.570
are going to have a really inconsistent experience
as they're deployed to different Android devices.

00:42:38.570 --> 00:42:43.720
Some will support NFC A, some will support
NFC B. We don't think this is really going

00:42:43.720 --> 00:42:48.260
to be a great story for third-party developers
right now.

00:42:48.260 --> 00:42:53.020
And secondly, when you're doing card emulation,
you're emulating a passive target that is

00:42:53.020 --> 00:42:57.560
going to have one kilobyte, two kilobytes
of memory. You're going to then have to decide

00:42:57.560 --> 00:43:01.550
which application has the right to manage
this limited resource.

00:43:01.550 --> 00:43:06.540
So we did not put card emulation APIs in Gingerbread
because we want to make sure that we have

00:43:06.540 --> 00:43:11.300
a compelling user story before we do that.
And we really think that peer-to-peer is the

00:43:11.300 --> 00:43:16.940
way to go for future NFC uses. Peer-to-peer
and NDEF, because with NDEF you can filter

00:43:16.940 --> 00:43:22.730
on content. And with peer-to-peer, it's a
newer technology. It doesn't have to assume

00:43:22.730 --> 00:43:33.360
that one side is passive.
So that's it for the main part of the presentation.

00:43:33.360 --> 00:43:39.700
We encourage you to go to NFC.android.com.
We have links to the sample code for Sticky

00:43:39.700 --> 00:43:47.220
Notes, links to the developer APIs. And you
can give us feedback on how we went today

00:43:47.220 --> 00:43:52.520
at the feedback link. You can tweet about
this with the hashtags. And we're going to

00:43:52.520 --> 00:43:58.180
now take questions from the audience live,
and also, you can post questions online at

00:43:58.180 --> 00:43:59.820
the last link.
Thank you.

00:43:59.820 --> 00:44:27.281
[ Applause ]
&gt;&gt;Nick Pelly: Okay, can we get the first question

00:44:27.281 --> 00:44:33.050
live, in the brown shirt.
&gt;&gt;&gt; So what can you tell us about your plans

00:44:33.050 --> 00:44:37.534
for other devices that support -- that will
support NFC in the near future, other than

00:44:37.534 --> 00:44:40.550
the Nexus S?
&gt;&gt;Nick Pelly: Well, I think, you know, it's

00:44:40.550 --> 00:44:45.710
up to the OEMs. You know, I think they are
going to want to -- they would love to see

00:44:45.710 --> 00:44:50.320
more applications in the market. So it's kind
of up to you guys to write some really great

00:44:50.320 --> 00:44:58.420
applications out there that really, you know,
make the OEMs see the use cases for NFC. Yeah,

00:44:58.420 --> 00:45:03.810
and, you know, we do know personally of dozens
of phones in the pipeline for 2011 that are

00:45:03.810 --> 00:45:06.801
going to have NFC. So don't worry, they will
come as well.

00:45:06.801 --> 00:45:11.410
&gt;&gt;&gt; Thank you.
&gt;&gt;Jeff Hamilton: Take a question from the

00:45:11.410 --> 00:45:18.460
back mike, please.
&gt;&gt;&gt; So are there intents, then, to update

00:45:18.460 --> 00:45:26.340
all of the standard apps, contacts, GMail,
the browser, to have a standard NDEF payload

00:45:26.340 --> 00:45:29.860
that they're just showing all the time?
&gt;&gt;Jeff Hamilton: Yes. So that's something

00:45:29.860 --> 00:45:32.980
that we showed off in the Ice Cream Sandwich
preview. That's something we're going to look

00:45:32.980 --> 00:45:36.890
at adding in the Ice Cream Sandwich platform.
You know, in the demos that we showed, like,

00:45:36.890 --> 00:45:41.450
from contacts, it's exporting a standard V
card. So it's a MIME type, which is V card.

00:45:41.450 --> 00:45:47.660
So that's a pretty big standard there. URIs
come through just as a URI. There's an NDEF

00:45:47.660 --> 00:45:53.530
specification for how to store URIs, so those
come through just like that. So NDEF as a

00:45:53.530 --> 00:45:57.710
format covers pretty much all the data structures
that we'd export. And for things like contacts,

00:45:57.710 --> 00:46:01.490
we just go with the standards like V card.
&gt;&gt;&gt; All right. So Ice Cream Sandwich is when

00:46:01.490 --> 00:46:03.750
we'd start to see that just show up in the
standard apps?

00:46:03.750 --> 00:46:06.762
&gt;&gt;Jeff Hamilton: Yeah, in the platforms.
So in your applications today, you as developers

00:46:06.762 --> 00:46:13.180
can add support for this stuff today on Gingerbread.
&gt;&gt;Nick Pelly: We'll take a question from the

00:46:13.180 --> 00:46:16.800
Google Moderator.
Are we going to have a way of using NFC in

00:46:16.800 --> 00:46:20.931
the emulator?
And that's something that we get asked a lot.

00:46:20.931 --> 00:46:27.570
And I think, you know, for right now, we really
encourage you to buy a Nexus S and use it

00:46:27.570 --> 00:46:31.940
with real hardware. But we are working on
it for the emulator. And hopefully soon.

00:46:31.940 --> 00:46:35.730
&gt;&gt;Jeff Hamilton: Yeah, I think that the problem
with the emulator is they're -- as we saw

00:46:35.730 --> 00:46:39.731
with that diagram, there are so many different
technologies that exist in the realm of NFC.

00:46:39.731 --> 00:46:44.630
And it's very difficult to support all of
those simultaneously in the emulator. So that's

00:46:44.630 --> 00:46:49.220
something we're working on.
&gt;&gt;Nick Pelly: Question from the front.

00:46:49.220 --> 00:46:54.170
&gt;&gt;&gt; So the lack of card emulation support,
does that mean you can't do mobile payments

00:46:54.170 --> 00:46:58.900
with NFC as it's implemented in Gingerbread?
&gt;&gt;Nick Pelly: It means that you can't do mobile

00:46:58.900 --> 00:47:02.340
-- you can't do mobile payments with the APIs
available in Gingerbread.

00:47:02.340 --> 00:47:06.201
&gt;&gt;&gt; And are you planning to add that in for
Ice Cream Sandwich?

00:47:06.201 --> 00:47:08.829
&gt;&gt;Nick Pelly: It's something that we're not
going to rule out.

00:47:08.829 --> 00:47:14.020
&gt;&gt;&gt; What's the sort of missing pieces there
that you're looking for to make that what

00:47:14.020 --> 00:47:17.290
you call a compelling environment to enable
that?

00:47:17.290 --> 00:47:22.910
&gt;&gt;Jeff Hamilton: At an API level, you mean?
&gt;&gt;&gt; I think, if I understood, you were saying

00:47:22.910 --> 00:47:28.233
it's just not a compelling proposition right
now. What are the missing pieces to make it

00:47:28.233 --> 00:47:29.710
compelling?
&gt;&gt;Nick Pelly: The problem is that the hardware

00:47:29.710 --> 00:47:34.250
out there today, you know, if you buy an NFC
controller, it typically is only going to

00:47:34.250 --> 00:47:40.930
be able to emulate one of those RF-level technologies.
So as an application developer, you don't

00:47:40.930 --> 00:47:45.870
know which -- when it's getting deployed to
a phone, which one is on the phone. So I guess

00:47:45.870 --> 00:47:51.590
until we see the industry standardize around
maybe one RF-level technology or until we

00:47:51.590 --> 00:47:57.170
see NFC controllers able to support multiple
of those. I guess we're actually hoping that

00:47:57.170 --> 00:48:02.120
everyone will just move to peer-to-peer or
NDEF exchange, because that removes this problem

00:48:02.120 --> 00:48:04.610
entirely.
&gt;&gt;&gt; Looking for a standard in the frequency

00:48:04.610 --> 00:48:08.070
supported?
&gt;&gt;Nick Pelly: In the modulation of the -- they

00:48:08.070 --> 00:48:09.070
all do 13.56 megahertz, but they have different
modulation schemes.

00:48:09.070 --> 00:48:10.070
&gt;&gt;Jeff Hamilton: Take a question from the
back mike.

00:48:10.070 --> 00:48:15.680
&gt;&gt;&gt; Okay. I understand this is peer-to-peer
and very close communication. But for the

00:48:15.680 --> 00:48:23.760
passive tag reading-wise, I don't think there
is any restriction for, like, reading two

00:48:23.760 --> 00:48:31.500
devices at the same time for the passive tag.
Is it true or is it not?

00:48:31.500 --> 00:48:35.970
&gt;&gt;Jeff Hamilton: Currently, the Nexus S only
supports reading one passive tag in the field

00:48:35.970 --> 00:48:40.700
at a time.
There are a few technical limitations in place.

00:48:40.700 --> 00:48:45.290
And more than that, you know, we think there's
really just a user interaction limitation

00:48:45.290 --> 00:48:48.570
there where, you know, as we talked about,
we thought -- we think it's very important

00:48:48.570 --> 00:48:53.580
for the users to go directly to the application
handling the tag they're interacting with

00:48:53.580 --> 00:48:58.360
for that instant gratification. So if the
stack is handling two tags at once, if they

00:48:58.360 --> 00:49:02.000
both have NDEF payload, it's not clear what
activity is going to be launched.

00:49:02.000 --> 00:49:05.730
&gt;&gt;&gt; Right, right.
&gt;&gt;Jeff Hamilton: So we really think that the

00:49:05.730 --> 00:49:09.710
best part of NFC is that it's just kind of
-- it instantly happens for the user. And

00:49:09.710 --> 00:49:12.400
so for that reason, right now, you know, we
only support one --

00:49:12.400 --> 00:49:17.050
&gt;&gt;&gt; Who is handling those sequences, basically.
&gt;&gt;Jeff Hamilton: Who is handling that sequence?

00:49:17.050 --> 00:49:21.660
&gt;&gt;&gt; Yeah. If you have a passive tag and then
both reaches at the same time, who is --

00:49:21.660 --> 00:49:26.210
&gt;&gt;Jeff Hamilton: So if you have two passive
tags in the field, it's going to arbitrarily

00:49:26.210 --> 00:49:30.780
pick, you know, one to be the first tag. And
I think that depends on the ID of the tag.

00:49:30.780 --> 00:49:36.771
And the way it works is a polling loop. So
the radio in the phone will look to see what

00:49:36.771 --> 00:49:40.760
exists in the field. And I think that kind
of depends on which tag ends up responding

00:49:40.760 --> 00:49:44.240
first in the field. It's pretty arbitrary.
&gt;&gt;&gt; Okay. Thanks.

00:49:44.240 --> 00:49:48.160
&gt;&gt;Jeff Hamilton: Yep.
&gt;&gt;Nick Pelly: Maybe a question from Google

00:49:48.160 --> 00:49:51.650
Moderator.
Is Google going to partner with somebody to

00:49:51.650 --> 00:50:01.180
bring real-world NFC use? E.g. mobile payments.
For mobile payments, nothing to announce.

00:50:01.180 --> 00:50:04.970
I think -- you know, we're looking at peer-to-peer,
and we're looking at bringing 0-click sharing

00:50:04.970 --> 00:50:10.530
to Ice Cream Sandwich. And these are what
we see as the use cases today.

00:50:10.530 --> 00:50:14.500
&gt;&gt;Jeff Hamilton: Okay. Question from the first
mike.

00:50:14.500 --> 00:50:19.460
&gt;&gt;&gt; Is there a type of NFC tag that allows
an administrator only to write to it?

00:50:19.460 --> 00:50:24.630
&gt;&gt;Jeff Hamilton: Yes. There are different
levels of encryption, authentication support

00:50:24.630 --> 00:50:30.480
in the tags that we talked about.
Some of the tags support doing authentication

00:50:30.480 --> 00:50:34.940
using a shared key. And they have different
access control rights in them. So the tags

00:50:34.940 --> 00:50:38.450
that you have actually do support that. And
they're using the default keys. So what you

00:50:38.450 --> 00:50:43.430
can do is you can authenticate with the tag,
using a -- you know, a shared key, and, you

00:50:43.430 --> 00:50:48.540
know, that might give you, based on the access
control, rights to modify the tag, where,

00:50:48.540 --> 00:50:52.080
you know, if you don't have that administrator
key, you would only have rights to read from

00:50:52.080 --> 00:50:55.660
the tag.
&gt;&gt;&gt; And that's type one that does that?

00:50:55.660 --> 00:50:59.540
&gt;&gt;Jeff Hamilton: Type four, I know, does that.
It depends on the product specifically. So

00:50:59.540 --> 00:51:04.200
the MIFARE Desfire definitely supports that.
Type one and two I don't believe do that.

00:51:04.200 --> 00:51:09.310
Type one and two are simpler tags. They have
smaller data storage. They're also a lot cheaper

00:51:09.310 --> 00:51:12.890
as well.
But type four, if you get the MIFARE Desfire,

00:51:12.890 --> 00:51:17.480
will do that that. Off the top of my head,
I'm not quite familiar with the exact capabilities

00:51:17.480 --> 00:51:23.260
of other products.
&gt;&gt;&gt; Thank you.

00:51:23.260 --> 00:51:27.520
&gt;&gt;&gt; Hi. In your examples, you had one phone
ring an application and the other phone was

00:51:27.520 --> 00:51:33.040
on the home screen, so it was pretty obvious
when you did peer-to-peer which way that data

00:51:33.040 --> 00:51:34.710
transmission was going to happen. What happens
if there's an app running on both, when both

00:51:34.710 --> 00:51:38.330
are active and want to share data?
&gt;&gt;Nick Pelly: We're still debating what to

00:51:38.330 --> 00:51:43.630
do there, actually. It's a really good question.
&gt;&gt;Jeff Hamilton: So right now, if you have

00:51:43.630 --> 00:51:48.260
foreground dispatch enabled in your application,
everything will come to you. So our advice

00:51:48.260 --> 00:51:52.370
would be, you know, if you really care about
this in your application, you can -- you know,

00:51:52.370 --> 00:51:57.100
you can set up your NDEF push. You can also
enable foreground dispatch. That means while

00:51:57.100 --> 00:52:01.490
you're in the foreground, trying to do other
things over NFC, you'll get messages coming,

00:52:01.490 --> 00:52:04.870
all the messages inbound, even if they're
not destined for your application. And you

00:52:04.870 --> 00:52:10.510
can either drop them on the floor if you want,
or you can indicate to the user that, hey,

00:52:10.510 --> 00:52:14.490
I got something from the other side that's
not mine. You might want to do something about

00:52:14.490 --> 00:52:18.720
that.
&gt;&gt;&gt; So if there's two separate apps or if

00:52:18.720 --> 00:52:22.800
there's the same app running on both phones,
can they exchange information both ways during

00:52:22.800 --> 00:52:24.550
that one connection?
&gt;&gt;Jeff Hamilton: Yeah, the data will go both

00:52:24.550 --> 00:52:28.470
directions. And it will get dispatched on
the other side, depending on the dispatch

00:52:28.470 --> 00:52:34.140
stuff we talked about earlier.
If you're going to go with the NDEF push,

00:52:34.140 --> 00:52:38.160
we suggest also going with the foreground
dispatch, and then you have control over the

00:52:38.160 --> 00:52:41.591
inbound stuff while you're expecting to do
NFC transactions with another phone.

00:52:41.591 --> 00:52:48.930
&gt;&gt;Nick Pelly: Okay. To Google Moderator.
Can I add an adapter to my cell phone to support

00:52:48.930 --> 00:52:51.720
NFC?
And the answer is, yes. We just showed it.

00:52:51.720 --> 00:52:55.830
But we had to hack up the kernel, so --
&gt;&gt;Jeff Hamilton: Yeah, it was a bit of a hack.

00:52:55.830 --> 00:53:02.640
So there aren't any existing adapters today.
Maybe someone will build one with the Android

00:53:02.640 --> 00:53:05.020
hardware developer kit announced earlier today,
hopefully.

00:53:05.020 --> 00:53:11.040
What you can do is you can get stickers that
are designed to be put on the backs of phones.

00:53:11.040 --> 00:53:14.920
And there are special stickers that have,
like, a ferrite shielding on them because

00:53:14.920 --> 00:53:19.430
the stickers have antennas in them and they're
pretty sensitive to the other radios in the

00:53:19.430 --> 00:53:23.490
phone. So if you're interested in doing interactions
with phones, you can put a sticker on the

00:53:23.490 --> 00:53:27.640
back. And, obviously, you can't update the
content of the sticker from non-NFC phones,

00:53:27.640 --> 00:53:32.460
but you could do something like put in Bluetooth
addresses of the phone on that sticker on

00:53:32.460 --> 00:53:37.609
the back of it.
Question from the first mike.

00:53:37.609 --> 00:53:42.230
&gt;&gt;&gt; How durable are the tags themselves? Would
they be wearable and washable?

00:53:42.230 --> 00:53:51.030
&gt;&gt;Nick Pelly: I think you should keep that
tag on for a few days and see.

00:53:51.030 --> 00:53:56.410
&gt;&gt;&gt; If I wanted to put the tag on my back
pocket and be slapped by a phone, would that

00:53:56.410 --> 00:53:58.770
be possible.
&gt;&gt;Jeff Hamilton: It depends. Basically, the

00:53:58.770 --> 00:54:03.310
tags are a little IC on here as well with
an antenna. And then that's all kind of packaged

00:54:03.310 --> 00:54:08.780
together. There are lots of different people
doing different types of packaging. So right

00:54:08.780 --> 00:54:12.151
now, you know, you can get stickers. You can
get, you know, stickers like I talked about

00:54:12.151 --> 00:54:16.850
with the ferrite shielding on them specifically
for cell phones. There are people doing things

00:54:16.850 --> 00:54:21.300
that you can put on CD cases to do renting
movies, that kind of stuff.

00:54:21.300 --> 00:54:26.630
&gt;&gt;Nick Pelly: I think some people are working
on washable NFC tags that you can embed into

00:54:26.630 --> 00:54:32.050
clothing similar to inventory tracking tags.
I think we'll see those coming soon.

00:54:32.050 --> 00:54:36.780
Question from the back.
&gt;&gt;&gt; Suppose a user is writing to one of the

00:54:36.780 --> 00:54:42.820
tags that you provided and the payload is
nearing the limit, the two kilobytes or whatever.

00:54:42.820 --> 00:54:43.820
Given the amount of bandwidth available, it
can take several seconds to do that right.

00:54:43.820 --> 00:54:47.580
Is there anything in the API to ensure the
integrity of that data or do you have to kind

00:54:47.580 --> 00:54:54.300
of roll that yourself, or --
&gt;&gt;Jeff Hamilton: What you can do is -- the

00:54:54.300 --> 00:54:58.670
code snippet we had was pretty simple. When
you get the reference to the tag in the field,

00:54:58.670 --> 00:55:04.130
you can query it to see what its capacity
is. So what you can do is check to see, you

00:55:04.130 --> 00:55:08.640
know, is your data payload larger than the
capacity of the tag. And you can check that

00:55:08.640 --> 00:55:11.080
up-front.
Beyond that, you know, when you get -- basically,

00:55:11.080 --> 00:55:15.380
if the tag, say it leaves the field while
you're in the middle of doing that operation,

00:55:15.380 --> 00:55:19.480
you would get, like, an I/O exception thrown
to your application.

00:55:19.480 --> 00:55:21.520
What exactly the state of the tag is at that
point, I'm not sure, probably depends on the

00:55:21.520 --> 00:55:25.920
specific tag technology that you're writing
to.

00:55:25.920 --> 00:55:29.620
&gt;&gt;&gt; Gotcha.
&gt;&gt;Nick Pelly: Okay. Question from Google Moderator.

00:55:29.620 --> 00:55:33.220
Will developers be getting access to the secure
element?

00:55:33.220 --> 00:55:39.040
&gt;&gt;Jeff Hamilton: So this one kind of goes
almost hand in hand with card emulation.

00:55:39.040 --> 00:55:43.100
Typically, the hardware is set up to do card
emulation through the secure element.

00:55:43.100 --> 00:55:46.730
Right now, we don't have any APIs to talk
to the secure element. And we think that we

00:55:46.730 --> 00:55:50.420
probably won't be getting APIs to do that
anytime in the near future in the SDK.

00:55:50.420 --> 00:55:56.280
There are a bunch of different reasons. Again,
the secure element is a very limited resource.

00:55:56.280 --> 00:56:02.211
It can't hold a large amount of data in there.
And if we open it up to any third-party application,

00:56:02.211 --> 00:56:05.100
there's going to be a huge resource contention
over the secure element.

00:56:05.100 --> 00:56:10.100
Additionally, to talk to the secure elements,
even from applications on the phone, you need

00:56:10.100 --> 00:56:14.680
to authenticate yourself properly.
And if you improperly authenticate yourself

00:56:14.680 --> 00:56:17.840
a certain number of times, there are secure
elements out there that will physically destroy

00:56:17.840 --> 00:56:22.240
themselves and can never be recovered. So
that's something that we really think would

00:56:22.240 --> 00:56:26.800
be a bad experience for users, and we don't
want developers getting blamed for, you know,

00:56:26.800 --> 00:56:31.290
breaking hardware. It would be tough to know
which application did it. We think it would

00:56:31.290 --> 00:56:36.370
be a very bad situation. So today, you know,
we don't have APIs for that. And there are

00:56:36.370 --> 00:56:41.491
some constraints that make it tough to create
APIs in the SDK for any third-party application

00:56:41.491 --> 00:56:46.069
to talk to the secure element.
&gt;&gt;Nick Pelly: Question from the front.

00:56:46.069 --> 00:56:50.390
&gt;&gt;&gt; I know you said that card emulation isn't
going to be supported anytime soon and that

00:56:50.390 --> 00:56:54.810
it's because of all the legacy reasons. But
are there any vendors out there today that

00:56:54.810 --> 00:57:01.780
are building payment solutions that are based
on peer-to-peer or, you know, NDEF so that

00:57:01.780 --> 00:57:05.620
we can actually, you know, take our phones
to local Starbucks and pay for coffee, you

00:57:05.620 --> 00:57:08.460
know, using Nexus S?
&gt;&gt;Nick Pelly: I really hope so. I'd love to

00:57:08.460 --> 00:57:12.550
see peer-to-peer used for payment technology
-- used for payment.

00:57:12.550 --> 00:57:16.060
I think NDEF and peer-to-peer are the way
to go going forward.

00:57:16.060 --> 00:57:18.230
&gt;&gt;&gt; But are you aware of anything that's already
in the works?

00:57:18.230 --> 00:57:22.050
&gt;&gt;Nick Pelly: No.
&gt;&gt;&gt; And second question, and this may be irrelevant,

00:57:22.050 --> 00:57:28.700
but I know it's only on while the screen is
on. But what are the power or battery effects

00:57:28.700 --> 00:57:31.400
of having the NFC enabled?
&gt;&gt;Nick Pelly: It's about five milliamps in

00:57:31.400 --> 00:57:36.030
polling mode. So it's pretty negligible compared
to the back light.

00:57:36.030 --> 00:57:39.910
&gt;&gt;&gt; Okay.
&gt;&gt;Jeff Hamilton: Question from the back mike.

00:57:39.910 --> 00:57:45.550
&gt;&gt;&gt; I am just curious. What's the smallest
footprint size of the NFC stickers or tags

00:57:45.550 --> 00:57:49.830
that you've seen? Is it pretty much like that
technology requires it to be that big?

00:57:49.830 --> 00:57:55.300
&gt;&gt;Jeff Hamilton: The smallest I've seen is
30 millimeter round, which is actually pretty

00:57:55.300 --> 00:58:00.780
small if you look at it. I think the bigger
the antenna is, you know, the better -- the

00:58:00.780 --> 00:58:02.710
longer range you're going to be able to interact
with it.

00:58:02.710 --> 00:58:05.450
&gt;&gt;&gt; I see.
&gt;&gt;Jeff Hamilton: But I have seen 30 millimeter

00:58:05.450 --> 00:58:10.480
round, which is actually pretty small.
&gt;&gt;Nick Pelly: It's 13.56 megahertz is used

00:58:10.480 --> 00:58:15.650
for all NFC technology. So you have some fundamental
constraints on the antenna size, especially

00:58:15.650 --> 00:58:19.690
when you're powering a passive target.
&gt;&gt;&gt; Thank you.

00:58:19.690 --> 00:58:27.100
&gt;&gt;Nick Pelly: Going to Google Moderator, does
the Google NFC team see value in the intersection

00:58:27.100 --> 00:58:34.670
of NFC and identity? If so, what in the present
set of APIs is useful for NFC-based identity?

00:58:34.670 --> 00:58:40.190
I mean, I think we see value for NFC all over
the place. And, you know, not -- not only

00:58:40.190 --> 00:58:45.350
specifically an identity, but for so many
different use cases. And, you know, we're

00:58:45.350 --> 00:58:50.050
not going to be able to explore all of those.
We're trying to put together the APIs for

00:58:50.050 --> 00:58:58.260
developers to try and build apps themselves.
And I guess specifically the APIs available

00:58:58.260 --> 00:59:04.830
presently while there's the low-level APIs
for, you know, transceiving to any tag. So

00:59:04.830 --> 00:59:10.940
there are some tags that have secure storage
on the tag. You can use low-level APIs to

00:59:10.940 --> 00:59:15.870
actually interact with those. Or, you know
-- all the APIs we presented to you today

00:59:15.870 --> 00:59:21.880
are around NDEF.
&gt;&gt;Jeff Hamilton: Question from the front.

00:59:21.880 --> 00:59:27.280
&gt;&gt;&gt; Actually, the four record type definitions
in standards, but you didn't mention about

00:59:27.280 --> 00:59:30.170
the generic controls. So when are you going
to support that?

00:59:30.170 --> 00:59:34.080
&gt;&gt;Jeff Hamilton: We don't have support for
it today. We don't actually have plans for

00:59:34.080 --> 00:59:40.810
supporting that right now in the dispatching
mechanism. So if you're building an application,

00:59:40.810 --> 00:59:46.360
you can get the technology level and you can
look at that, and you could interact with

00:59:46.360 --> 00:59:50.220
the -- you know, the -- at the technology
level and get the NDEF off the tag.

00:59:50.220 --> 00:59:55.531
&gt;&gt;&gt; So could a vendor define their own, you
know, generic, you know -- the control for

00:59:55.531 --> 01:00:00.610
their own sake?
&gt;&gt;Jeff Hamilton: So for -- you can define

01:00:00.610 --> 01:00:05.530
that. It just wouldn't get dispatched using
the NDEF-discovered intent.

01:00:05.530 --> 01:00:11.260
And part of the reason there is that the specification
there doesn't fit very well into the Android

01:00:11.260 --> 01:00:15.670
intent system. So it's not a great way to
map that into intents and allow applications

01:00:15.670 --> 01:00:17.890
to filter properly.
&gt;&gt;&gt; Okay.

01:00:17.890 --> 01:00:22.150
&gt;&gt;Nick Pelly: So I think we'll just take one
more question, then we're out of time. But

01:00:22.150 --> 01:00:24.780
we're available in the office hours afterwards,
and hopefully tomorrow.

01:00:24.780 --> 01:00:30.390
So one more from the back.
&gt;&gt;&gt; Okay. I just wanted to ask about the critical

01:00:30.390 --> 01:00:33.120
mass issues.
So, basically, you're talking about hardware

01:00:33.120 --> 01:00:37.300
here. This is not like a QR code where anyone
can print one out in a home machine. A, can

01:00:37.300 --> 01:00:41.370
I just go down to a store and buy a roll of
NFC stickers.

01:00:41.370 --> 01:00:46.140
B, there's going to be a period of time in
which people get frustrated when they try

01:00:46.140 --> 01:00:52.750
to hold two phones together and nothing happens,
because the NFC support is not implemented

01:00:52.750 --> 01:00:57.630
yet in 100% of the apps.
So how do you get from here to critical mass?

01:00:57.630 --> 01:01:01.120
Will there be a symbol on the screen of apps,
like a standard symbol that says, "I support

01:01:01.120 --> 01:01:06.140
NFC"? How do you get to critical mass and
overcome the hardware issues especially? Because

01:01:06.140 --> 01:01:08.300
these things, you can't just make them out
of thin air.

01:01:08.300 --> 01:01:13.321
&gt;&gt;Jeff Hamilton: The first question, if you
look on the Internet, you can't just go to

01:01:13.321 --> 01:01:17.880
a Best Buy or a Fry's or something and just
pick up a roll of stickers today. There are

01:01:17.880 --> 01:01:21.730
vendors on the Internet that will sell them
to you. They're not super easy to come by

01:01:21.730 --> 01:01:26.260
today. We're hoping that will change as NFC
gets deployed in more phones and more consumers

01:01:26.260 --> 01:01:33.630
are starting to interact with the technology.
Additionally, you know, for the second question,

01:01:33.630 --> 01:01:36.880
you know, I think -- you know, we've added
it to the Nexus S, and we're really hoping

01:01:36.880 --> 01:01:41.480
that people find value in the technology and
developers started adding support for it to

01:01:41.480 --> 01:01:45.420
their applications and then more OEMs will
add NFC support to their hardware.

01:01:45.420 --> 01:01:50.430
In terms of identifying which applications
have NFC support in there, we've been toying

01:01:50.430 --> 01:01:54.710
around with some ways to try to expose that
information to the user. But we don't really

01:01:54.710 --> 01:01:57.340
have anything specific to announce today.
&gt;&gt;Nick Pelly: I think it's the chicken and

01:01:57.340 --> 01:02:02.560
the egg problem. And I guess we're the chicken.
&gt;&gt;Jeff Hamilton: Yeah. All right.

01:02:02.560 --> 01:02:05.380
Well, we're out of time now. So thank you,
everyone, for coming. We appreciate it.

01:02:05.380 --> 01:02:10.090
[ Applause ]
&gt;&gt;Jeff Hamilton: And we'll be in office hours

01:02:10.090 --> 01:02:11.630
if you have more questions.
&gt;&gt;Nick Pelly: Thanks a lot.

