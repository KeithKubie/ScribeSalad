WEBVTT
Kind: captions
Language: en

00:00:04.190 --> 00:00:04.440
KASIA DERC-FENSKE: Hi.

00:00:04.440 --> 00:00:06.580
My name's Kasia, from the Google
Enterprise Geo Support

00:00:06.580 --> 00:00:08.360
Team in Europe.

00:00:08.360 --> 00:00:11.312
We've prepared a series of
videos for you to help you get

00:00:11.312 --> 00:00:14.450
started with Maps API
for Business.

00:00:14.450 --> 00:00:16.930
This video will cover the
process of creating digital

00:00:16.930 --> 00:00:18.180
signatures.

00:00:20.052 --> 00:00:23.680
Let's assume we were to build
a car sharing solution.

00:00:23.680 --> 00:00:27.412
They'll use self-driving cars
that can pick you up at any

00:00:27.412 --> 00:00:29.224
given location.

00:00:29.224 --> 00:00:33.550
The cars will send us a lat/long
par, and we'll need

00:00:33.550 --> 00:00:36.300
to convert it to a human
readable address.

00:00:36.300 --> 00:00:38.260
We'll be using the
reverse geocoding

00:00:38.260 --> 00:00:40.660
web service for that.

00:00:40.660 --> 00:00:43.420
Let's open up the
documentation.

00:00:43.420 --> 00:00:46.110
I'll use my bookmarks to
navigate to the Google Maps

00:00:46.110 --> 00:00:54.478
API web services, and then to
the Geocoding API section.

00:00:54.478 --> 00:00:58.460
Then I'll choose reverse
geocoding, and

00:00:58.460 --> 00:00:59.710
copy the sample URL.

00:01:07.280 --> 00:01:10.270
Now I'll set the sensor
parameter to false, because my

00:01:10.270 --> 00:01:11.520
browser isn't geo enabled.

00:01:15.500 --> 00:01:17.600
And we get the result.

00:01:17.600 --> 00:01:22.520
It geocoded the lat/long par to
Bedford Avenue in Brooklyn.

00:01:22.520 --> 00:01:24.840
But if you make such a request,
we won't know that

00:01:24.840 --> 00:01:27.300
you're a Maps API for
Business customers.

00:01:27.300 --> 00:01:30.880
In order for our servers to
identify this request as Maps

00:01:30.880 --> 00:01:34.920
API for Business, you need to
add your client ID parameter.

00:01:34.920 --> 00:01:38.110
This will allow you to take
advantage of the Maps API for

00:01:38.110 --> 00:01:41.940
Business benefits, such as
higher quotas, and more weigh

00:01:41.940 --> 00:01:45.850
points for the direction's
API.

00:01:45.850 --> 00:01:49.250
Adding your client ID also
entitles you to Maps API for

00:01:49.250 --> 00:01:52.310
Business Technical Support.

00:01:52.310 --> 00:01:54.520
But what happens if I add
a client parameter?

00:02:00.660 --> 00:02:03.180
I got an error message saying,
"Unable to Authenticate the

00:02:03.180 --> 00:02:04.260
Supply URL.

00:02:04.260 --> 00:02:07.620
Please check your client and
Signature Parameters." That

00:02:07.620 --> 00:02:12.020
suggests that we need
to sign our URLS.

00:02:12.020 --> 00:02:14.710
I'll go ahead and look at the
enterprise documentation to

00:02:14.710 --> 00:02:16.440
see if we find any
pointers there.

00:02:22.440 --> 00:02:25.890
I'll navigate to the web
services section.

00:02:25.890 --> 00:02:29.040
As you see, we have a section
on digital signatures, and

00:02:29.040 --> 00:02:30.660
generating valid signatures.

00:02:34.410 --> 00:02:39.900
So to give you a brief overview
of this section, it

00:02:39.900 --> 00:02:44.810
summarizes that when you send
a web service request, you

00:02:44.810 --> 00:02:48.170
need to sign it with your
private key that was sent to

00:02:48.170 --> 00:02:50.310
you're welcome letter.

00:02:50.310 --> 00:02:52.670
Now let me show you what
a sample welcome

00:02:52.670 --> 00:02:53.920
letter looks like.

00:03:01.380 --> 00:03:06.130
So the title is, Welcome to
Google Maps API for Business.

00:03:06.130 --> 00:03:09.720
And then you'll find that you
have a client ID in the letter

00:03:09.720 --> 00:03:12.310
and a crypto key.

00:03:12.310 --> 00:03:16.230
We'll use that crypto key
to sign our requests.

00:03:16.230 --> 00:03:16.800
OK.

00:03:16.800 --> 00:03:18.050
Let's go back to the docs.

00:03:20.650 --> 00:03:26.370
So having the client ID and
having to crypto key, the next

00:03:26.370 --> 00:03:29.370
thing you'll need to do is to
sign your request using

00:03:29.370 --> 00:03:30.845
HMAC-SHA1 function.

00:03:34.290 --> 00:03:36.500
But what is HMAC-SHA?

00:03:36.500 --> 00:03:41.290
SHA1 is a hash function that
can create a check sum of a

00:03:41.290 --> 00:03:43.240
file, or of a request.

00:03:43.240 --> 00:03:44.490
It's just like [? MD5-sum ?].

00:03:47.730 --> 00:03:50.700
HMAC stands for hash based
message authentication code,

00:03:50.700 --> 00:03:52.670
and is a way to create
a signature.

00:03:52.670 --> 00:03:55.750
Which is called a message
authentication code that uses

00:03:55.750 --> 00:03:58.860
both the cryptographic hash
function and a secret key.

00:04:04.260 --> 00:04:07.860
So just like the crypto
key we have.

00:04:07.860 --> 00:04:10.260
The good thing is, it
guarantees both data

00:04:10.260 --> 00:04:14.380
integrity, and authenticity.

00:04:14.380 --> 00:04:16.670
That means nobody can change
the message because

00:04:16.670 --> 00:04:17.500
we'll detect it.

00:04:17.500 --> 00:04:18.649
And what's more, we'll
know that the

00:04:18.649 --> 00:04:20.250
message comes from you.

00:04:20.250 --> 00:04:22.980
OK.

00:04:22.980 --> 00:04:26.270
I'll use the Python Interactive
Shell to generate

00:04:26.270 --> 00:04:28.140
the valid signature.

00:04:28.140 --> 00:04:31.550
So let's have a look
at the steps.

00:04:31.550 --> 00:04:34.370
First, we need to construct
our URLs, making sure the

00:04:34.370 --> 00:04:37.390
client and sensor parameters
are there.

00:04:37.390 --> 00:04:39.150
Then, we'll need to strip
off the domain

00:04:39.150 --> 00:04:41.280
portion of their request.

00:04:41.280 --> 00:04:46.970
And sign it using HMAC-SHA1
algorithm and aerocrypto key.

00:04:46.970 --> 00:04:48.990
There's a bunch of other things
that we need to take

00:04:48.990 --> 00:04:53.990
care off, like making sure that
all the characters are in

00:04:53.990 --> 00:04:55.700
the request, or URL
in the codec.

00:04:55.700 --> 00:04:58.055
Well, we'll get to this
as we start coding.

00:05:00.810 --> 00:05:02.210
Let's start the Python Shell.

00:05:05.570 --> 00:05:15.672
And import URL lib and
base 64 libraries.

00:05:15.672 --> 00:05:18.120
Great.

00:05:18.120 --> 00:05:27.400
Then we'll define the Google
API's URL, and the reverse

00:05:27.400 --> 00:05:28.650
geocoding endpoint.

00:05:31.460 --> 00:05:35.650
Now let's have a look at the
request we made before.

00:05:35.650 --> 00:05:38.960
It had lat/long parameter, and
a sensor parameter, and a

00:05:38.960 --> 00:05:40.890
client parameter.

00:05:40.890 --> 00:05:43.110
OK.

00:05:43.110 --> 00:05:46.590
I'll use the URL lib URL in
code function to make sure

00:05:46.590 --> 00:05:49.290
that my parameters are
properly encoded.

00:05:59.340 --> 00:06:00.070
OK.

00:06:00.070 --> 00:06:02.350
I have the lat/long par.

00:06:02.350 --> 00:06:04.100
I have the client parameter.

00:06:04.100 --> 00:06:06.050
And I have the censor parameter
set to true.

00:06:06.050 --> 00:06:07.790
Because we'll be sending
that request from

00:06:07.790 --> 00:06:09.040
self driving cars.

00:06:12.590 --> 00:06:15.200
Next, I'll need to retrieve
my private key.

00:06:21.040 --> 00:06:23.170
Actually, you should never,
ever share your

00:06:23.170 --> 00:06:24.720
private with anyone.

00:06:24.720 --> 00:06:28.110
But since I can delete it
afterwords, it's not that big

00:06:28.110 --> 00:06:29.270
of a problem.

00:06:29.270 --> 00:06:32.330
But a private key is generally
like a password.

00:06:32.330 --> 00:06:34.640
And it's better not to show
it to people who are not

00:06:34.640 --> 00:06:35.890
supposed to see it.

00:06:38.230 --> 00:06:38.690
OK.

00:06:38.690 --> 00:06:42.550
Let's have a look
at the steps.

00:06:42.550 --> 00:06:48.690
So we already have the Client
and censor params in place.

00:06:48.690 --> 00:06:52.140
We'll construct the main portion
of the request soon.

00:06:52.140 --> 00:06:54.790
We have our private key.

00:06:54.790 --> 00:06:58.080
And the only thing we
need to do now is--

00:06:58.080 --> 00:06:59.790
and code the resulting
string using

00:06:59.790 --> 00:07:02.940
that HMAC-SHA1 algorithm.

00:07:02.940 --> 00:07:04.190
OK.

00:07:07.370 --> 00:07:11.020
First of all, let's
decode our key.

00:07:11.020 --> 00:07:14.860
The key is binary and it's only
presented to you in this

00:07:14.860 --> 00:07:18.640
way because it was
base 64 encoded.

00:07:18.640 --> 00:07:29.580
So if I printed the key right
now, it does look binary.

00:07:29.580 --> 00:07:30.560
OK.

00:07:30.560 --> 00:07:39.530
Now let's import the hash leap
and HMAC libraries, and

00:07:39.530 --> 00:07:41.290
construct the URL
we want to sign.

00:07:50.110 --> 00:07:55.290
We have reverse geocoding end
point and then encoded parms.

00:07:55.290 --> 00:07:57.920
Let's print it to make sure
this is the right thing.

00:08:01.840 --> 00:08:03.250
Yeah, looks good.

00:08:03.250 --> 00:08:07.210
As you see all the characters
need to be your own coded.

00:08:07.210 --> 00:08:12.870
So that's why the comma sign was
encoded to present to "C."

00:08:12.870 --> 00:08:17.720
Now first, we need to generate
a new instance of the HMAC

00:08:17.720 --> 00:08:23.088
function with our crypto key,
with our decoded crypto key.

00:08:26.020 --> 00:08:30.860
Now after I cold digest,
I'll get the signature.

00:08:30.860 --> 00:08:33.350
But the signature will
be binary, just

00:08:33.350 --> 00:08:34.890
like the decoded key.

00:08:34.890 --> 00:08:45.250
So we need to URL save and
base 64 encode it.

00:08:45.250 --> 00:08:46.500
OK.

00:08:48.250 --> 00:08:50.310
So it looks like we have
the encoded signature.

00:08:50.310 --> 00:08:51.560
Let's print it.

00:08:56.890 --> 00:09:00.230
Looks good, there are no low
standard characters, it

00:09:00.230 --> 00:09:02.870
doesn't look binary,
just about right.

00:09:02.870 --> 00:09:04.540
Let's try to construct
the URL.

00:09:17.170 --> 00:09:19.920
Lat/long parameters is there,
the client parameter is there,

00:09:19.920 --> 00:09:22.420
sensor parameter is there,
signature is there.

00:09:22.420 --> 00:09:24.240
OK.

00:09:24.240 --> 00:09:26.050
Let's try it.

00:09:26.050 --> 00:09:28.530
We'll use the URL
open function to

00:09:28.530 --> 00:09:31.070
construct the handler.

00:09:31.070 --> 00:09:35.360
And let's issue the
Read function.

00:09:35.360 --> 00:09:36.470
Wonderful.

00:09:36.470 --> 00:09:40.290
Maybe now we want to see it in a
browser to look at it better

00:09:40.290 --> 00:09:41.706
for a minute.

00:09:41.706 --> 00:09:47.090
I'll simply copy this, and
place it in the browser.

00:09:51.136 --> 00:09:52.070
OK.

00:09:52.070 --> 00:09:53.760
It works.

00:09:53.760 --> 00:09:57.530
So this is how you generate
valid signatures.

00:09:57.530 --> 00:09:59.960
It's important to remember that
every time the request

00:09:59.960 --> 00:10:02.900
changes, you need to regenerate
the signature.

00:10:02.900 --> 00:10:05.680
So for example, if I changed
the lat/long parameter, the

00:10:05.680 --> 00:10:07.150
request could stop working.

00:10:07.150 --> 00:10:08.960
And I would need to regenerate
the signature.

00:10:11.730 --> 00:10:20.202
On our web page, we have a list
of signature examples,

00:10:20.202 --> 00:10:23.300
and different code snippets
for different languages--

00:10:23.300 --> 00:10:27.000
like C sharp, Java,
and Python.

00:10:27.000 --> 00:10:29.860
All the resources used in this
video are included in the

00:10:29.860 --> 00:10:32.630
comments below.

00:10:32.630 --> 00:10:36.610
That includes codes snippets
and bookmark expert.

00:10:36.610 --> 00:10:37.630
Thanks for listening.

00:10:37.630 --> 00:10:39.700
And check out our YouTube
channel for new [? videos. ?]

