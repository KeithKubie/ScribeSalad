WEBVTT
Kind: captions
Language: en

00:00:03.565 --> 00:00:05.440
HOI LAM: So, with the
Google Beacon Platform,

00:00:05.440 --> 00:00:08.380
a lot of people actually
compare it with GPS.

00:00:08.380 --> 00:00:12.540
And I thought it could
be quite useful to take

00:00:12.540 --> 00:00:16.480
a step back and just see
where we have come from.

00:00:16.480 --> 00:00:23.180
So one of the first hand-held
unit of GPS came in the market

00:00:23.180 --> 00:00:25.050
in 1989.

00:00:25.050 --> 00:00:28.840
And at that moment in
time, all it could do

00:00:28.840 --> 00:00:30.540
is latitude and longitude.

00:00:30.540 --> 00:00:32.710
And because of
security concerns,

00:00:32.710 --> 00:00:34.930
the satellite signal has
actually been degraded,

00:00:34.930 --> 00:00:38.250
and as a result, it
wasn't even that accurate.

00:00:38.250 --> 00:00:39.700
And that was all it could do.

00:00:39.700 --> 00:00:43.360
However if you fast
forwarded to today, then

00:00:43.360 --> 00:00:46.170
maps and navigation
is just table stakes.

00:00:46.170 --> 00:00:47.840
If you think about
the other things

00:00:47.840 --> 00:00:52.320
you can do with
location or location

00:00:52.320 --> 00:00:54.580
linked contacts,
that you can think

00:00:54.580 --> 00:00:58.190
about things like Check-in,
for example, very easy.

00:00:58.190 --> 00:01:02.090
Leaving a tip for
fellow travelers,

00:01:02.090 --> 00:01:03.350
or maybe even dating.

00:01:03.350 --> 00:01:05.010
There are some
dating apps out there

00:01:05.010 --> 00:01:09.930
that will let you see people
that are close to you.

00:01:09.930 --> 00:01:17.820
So if we think about
that, then Beacon

00:01:17.820 --> 00:01:21.140
could be one of those
things that, at a moment,

00:01:21.140 --> 00:01:25.060
perhaps the kind of things
that we are thinking about

00:01:25.060 --> 00:01:28.410
is only a very limited
set of use case.

00:01:28.410 --> 00:01:31.560
But as time progresses, then
what we're hoping to see

00:01:31.560 --> 00:01:34.890
is, with more contacts,
then you could actually

00:01:34.890 --> 00:01:38.710
see more innovative use cases
that we have not thought of.

00:01:38.710 --> 00:01:42.745
And that's why I'm really super
excited about the Google Beacon

00:01:42.745 --> 00:01:43.245
Platform.

00:01:50.060 --> 00:01:55.570
So some of the use cases for
today that we can think of.

00:01:55.570 --> 00:02:00.107
Instead of saying that
you're at a museum,

00:02:00.107 --> 00:02:01.940
you can tell the user
that they are standing

00:02:01.940 --> 00:02:04.150
in front of this
piece of artwork

00:02:04.150 --> 00:02:07.810
or what is in the room itself.

00:02:07.810 --> 00:02:11.600
If you're thinking about
getting the old-fashioned taxi,

00:02:11.600 --> 00:02:13.220
instead of booking
through the app

00:02:13.220 --> 00:02:16.090
and actually linking
it to the user,

00:02:16.090 --> 00:02:19.760
imagine that you can wave any
of the cabs on the street,

00:02:19.760 --> 00:02:22.450
and because of the beacon
that is on the cab itself,

00:02:22.450 --> 00:02:25.800
you can actually pay via
an app to the taxi driver

00:02:25.800 --> 00:02:29.420
without going through the
booking process itself.

00:02:32.400 --> 00:02:36.210
Imagine if you can go into
a restaurant and someone

00:02:36.210 --> 00:02:38.920
may sit you down or you
might just find a free table,

00:02:38.920 --> 00:02:41.630
and immediately you're
able to browse the menu.

00:02:41.630 --> 00:02:45.420
And then order not
just saying hey ticket

00:02:45.420 --> 00:02:49.500
number five, but actually
say, deliver to this table.

00:02:49.500 --> 00:02:53.200
So those are some of the
things that you could imagine

00:02:53.200 --> 00:02:57.320
with increased contacts.

00:02:57.320 --> 00:03:00.760
So I'm going to talk about the
three components that made up

00:03:00.760 --> 00:03:02.920
the Google Beacon Platform.

00:03:02.920 --> 00:03:08.240
The first one is the hardware
Eddystone frame format.

00:03:08.240 --> 00:03:12.230
Second is the
Proximity Beacon API,

00:03:12.230 --> 00:03:19.200
which allow you to add
attachments and essentially

00:03:19.200 --> 00:03:24.200
add more contacts through
the beacon itself.

00:03:24.200 --> 00:03:27.120
Last but not least, after you
add those attachments and then

00:03:27.120 --> 00:03:29.170
associate it with
those beacons, then you

00:03:29.170 --> 00:03:32.060
can use the nearby
API to retrieve

00:03:32.060 --> 00:03:37.680
those in apps that's built on
both Android as well as iOS.

00:03:37.680 --> 00:03:40.180
So we'll just go through
each one of those in turn.

00:03:40.180 --> 00:03:44.197
And, fingers crossed
that the [INAUDIBLE]

00:03:44.197 --> 00:03:46.530
demo and live coding will
work as well as we go through.

00:03:49.520 --> 00:03:52.690
First component is the
Eddystone beacon format.

00:03:52.690 --> 00:03:56.120
This is a open format
that we'll publish.

00:03:56.120 --> 00:04:01.090
And it is used for the
Bluetooth low-energy beacons.

00:04:01.090 --> 00:04:04.660
And as of today, we
have 18 manufacturers

00:04:04.660 --> 00:04:07.260
that are manufacturing
to those standards

00:04:07.260 --> 00:04:09.620
that we have certified.

00:04:09.620 --> 00:04:12.070
And apart from being
open, what else

00:04:12.070 --> 00:04:15.580
is different about Eddystone
compared to the Auto Beacon

00:04:15.580 --> 00:04:17.610
platform that you
might have seen.

00:04:17.610 --> 00:04:23.660
The second one is cross platform
So once those Eddystone beacon

00:04:23.660 --> 00:04:26.800
have been deployed,
we provide a library

00:04:26.800 --> 00:04:28.900
just for Android and iOS.

00:04:28.900 --> 00:04:33.050
There's absolutely nothing
to stop you to extend that

00:04:33.050 --> 00:04:36.750
to other platforms because
we have published those frame

00:04:36.750 --> 00:04:37.300
formats.

00:04:37.300 --> 00:04:41.150
So any device that support
Bluetooth low-energy

00:04:41.150 --> 00:04:46.260
can potentially be a
client of Eddystone.

00:04:46.260 --> 00:04:49.140
Last but not least,
it's extensible.

00:04:49.140 --> 00:04:55.430
So if we think about the
traditional Bluetooth beacon

00:04:55.430 --> 00:04:59.510
format, then the table stake
is basically an identifier.

00:04:59.510 --> 00:05:03.750
So the beacon itself
will emit an ID,

00:05:03.750 --> 00:05:06.270
and that's all it
does continuously.

00:05:06.270 --> 00:05:09.760
It doesn't take into account
which mobile phone is

00:05:09.760 --> 00:05:11.430
next to it and
record it, it's just

00:05:11.430 --> 00:05:13.960
a one-way communication of IDs.

00:05:13.960 --> 00:05:15.690
But taking that idea,
we have actually

00:05:15.690 --> 00:05:19.470
extended to different
types of frame formats.

00:05:19.470 --> 00:05:23.020
The next one we have
the Eddystone-URL,

00:05:23.020 --> 00:05:25.010
also known as the Physical Web.

00:05:25.010 --> 00:05:28.600
So what we have done is, we
allow you to encode a URL

00:05:28.600 --> 00:05:32.660
and put it on the beacon, and
acts as a discovery service

00:05:32.660 --> 00:05:37.040
for your website or web app.

00:05:37.040 --> 00:05:40.540
And you can hear more
about the Physical Web

00:05:40.540 --> 00:05:44.500
in the next session
with Scott Jenson, who's

00:05:44.500 --> 00:05:46.219
our lead on the Physical Web.

00:05:46.219 --> 00:05:48.010
So if you're interested
in that, I strongly

00:05:48.010 --> 00:05:52.110
advise you to attend his talk.

00:05:52.110 --> 00:05:53.930
Next, Eddystone-TLM.

00:05:53.930 --> 00:05:56.650
So this is the
telemetry frame, which

00:05:56.650 --> 00:06:00.870
reports the health of the beacon
in terms of the temperature

00:06:00.870 --> 00:06:02.460
or how much battery is left.

00:06:02.460 --> 00:06:05.020
And if you are
deploying anything

00:06:05.020 --> 00:06:07.150
more than a handful
of beacons, you really

00:06:07.150 --> 00:06:10.490
don't want to go and check
on all your beacons every day

00:06:10.490 --> 00:06:12.340
and say, are you still there?

00:06:12.340 --> 00:06:14.140
Are you going to die?

00:06:14.140 --> 00:06:17.230
And this is massively helpful.

00:06:17.230 --> 00:06:21.040
And when I talked to developers,
I was actually quite surprised

00:06:21.040 --> 00:06:25.110
at how forward-thinking they are
in terms of not just thinking

00:06:25.110 --> 00:06:27.300
about development
and ideas, but also

00:06:27.300 --> 00:06:30.020
on the maintenance
of the beacons.

00:06:30.020 --> 00:06:36.240
And this is massively helpful
to them, and I have to say,

00:06:36.240 --> 00:06:40.840
I did not expect that item of
interest on a telemetry frame,

00:06:40.840 --> 00:06:46.320
but that's something that
is truly helpful when you're

00:06:46.320 --> 00:06:48.540
deploying in the real world.

00:06:48.540 --> 00:06:52.180
And those are just the ones
that we've published so far.

00:06:52.180 --> 00:06:56.680
The idea here is that more frame
types will become available

00:06:56.680 --> 00:06:57.720
as time goes by.

00:06:57.720 --> 00:07:03.300
So if you have other ideas that
could potentially utilize this,

00:07:03.300 --> 00:07:09.960
then please do talk to us, and
then we can see what we can do.

00:07:09.960 --> 00:07:13.280
So that's the Eddystone format.

00:07:13.280 --> 00:07:15.050
That's the beacon hardware.

00:07:15.050 --> 00:07:20.700
So next is the
software part, and some

00:07:20.700 --> 00:07:23.110
of the other interesting
features about the Google

00:07:23.110 --> 00:07:25.480
Beacon Platform.

00:07:25.480 --> 00:07:28.008
So next I'm going to talk
about the Proximity Beacon API.

00:07:31.050 --> 00:07:34.030
So with the
Proximity Beacon API,

00:07:34.030 --> 00:07:38.070
you can register your beacon
with the Google Services.

00:07:38.070 --> 00:07:43.920
So that means it will increase
the visibility of your business

00:07:43.920 --> 00:07:46.900
on Google Service, but
also any application that's

00:07:46.900 --> 00:07:48.310
developed on top of it.

00:07:48.310 --> 00:07:50.530
So what this
screenshot is showing

00:07:50.530 --> 00:07:57.540
is the Place Picker
API for developers.

00:07:57.540 --> 00:08:01.170
And developers could
just implement this

00:08:01.170 --> 00:08:04.010
and allow the user to
choose the places that's

00:08:04.010 --> 00:08:05.230
around them to select.

00:08:05.230 --> 00:08:10.060
So for example, if you are
making a MeetMe kind of app,

00:08:10.060 --> 00:08:11.770
then you can say,
hey can you meet me

00:08:11.770 --> 00:08:15.240
at such-and-such a location?

00:08:15.240 --> 00:08:17.530
This could be helpful to you.

00:08:17.530 --> 00:08:19.560
And if you deploy
beacon and register them

00:08:19.560 --> 00:08:24.010
using a Google
Proximity Beacon API,

00:08:24.010 --> 00:08:28.290
then that will help enhance
this and any app that

00:08:28.290 --> 00:08:31.250
is built on top of it.

00:08:31.250 --> 00:08:33.740
Next, as I've
alluded before, you

00:08:33.740 --> 00:08:36.690
can add attachments to beacons.

00:08:36.690 --> 00:08:40.850
So these could be any kind
of arbitrary payload up

00:08:40.850 --> 00:08:43.070
to one kilobyte in size.

00:08:43.070 --> 00:08:48.030
So we could envision a lot of
JSON objects being uploaded

00:08:48.030 --> 00:08:51.670
to describe that location
and give the user more

00:08:51.670 --> 00:08:54.810
contacts and the developer
more contacts on what's

00:08:54.810 --> 00:08:55.851
going on around them.

00:08:58.440 --> 00:09:00.140
Last but not least, maintenance.

00:09:00.140 --> 00:09:03.850
So after we've emitted
those telemetry frame,

00:09:03.850 --> 00:09:07.780
it would be really ideal
if you could actually

00:09:07.780 --> 00:09:10.420
have a list of beacons
and see how they're doing.

00:09:10.420 --> 00:09:13.966
So that's part of
the service as well.

00:09:13.966 --> 00:09:19.360
So apart from reporting
on the telemetry frames,

00:09:19.360 --> 00:09:26.800
you can also use the cloud-based
APIs to update that data that's

00:09:26.800 --> 00:09:29.400
associated with your beacon.

00:09:29.400 --> 00:09:32.780
So let's say, if your menu
changed for your restaurant,

00:09:32.780 --> 00:09:36.260
you don't need to go
through every single beacon

00:09:36.260 --> 00:09:39.370
around your restaurant
to change the menu.

00:09:39.370 --> 00:09:43.540
You could just log in, look
at attachments, change them,

00:09:43.540 --> 00:09:44.999
and they would be done.

00:09:44.999 --> 00:09:46.290
And that's just one restaurant.

00:09:46.290 --> 00:09:49.020
You can imagine that if you have
a chain of restaurant or chain

00:09:49.020 --> 00:09:53.260
of stores where things
change constantly,

00:09:53.260 --> 00:09:55.760
then that is massively
helpful that you

00:09:55.760 --> 00:09:58.160
don't need to go around
every single beacon

00:09:58.160 --> 00:10:03.160
to change the information
that you're attaching to them.

00:10:03.160 --> 00:10:04.840
So how do you do this?

00:10:04.840 --> 00:10:07.670
First step is to get
a Google account.

00:10:07.670 --> 00:10:11.480
And that could be as simple as
registering for a Gmail account

00:10:11.480 --> 00:10:14.730
and then use that.

00:10:14.730 --> 00:10:21.260
Next, is to enable the Proximity
Beacon API in your API console.

00:10:21.260 --> 00:10:27.230
And then you would create an API
key for either Android or iOS

00:10:27.230 --> 00:10:31.660
and OAuth 2.0 client
ID under that link.

00:10:31.660 --> 00:10:35.600
And we would strongly advise
that you do all of those steps

00:10:35.600 --> 00:10:40.260
before you actually
started coding and running.

00:10:40.260 --> 00:10:44.240
We have previously seen
developer running into issues

00:10:44.240 --> 00:10:50.280
when they coded the app, and
then accidentally run it,

00:10:50.280 --> 00:10:52.540
and as a result it was
running against the wrong ID.

00:10:52.540 --> 00:10:54.610
And then after they
registered they

00:10:54.610 --> 00:10:57.890
had some problem with caching
and refreshing the ID.

00:10:57.890 --> 00:11:02.190
So we strongly advise that you
do all those things up front

00:11:02.190 --> 00:11:05.560
and then go to the last step,
and actually the easiest way

00:11:05.560 --> 00:11:09.590
that I find personally is to
go to get help [INAUDIBLE]

00:11:09.590 --> 00:11:14.330
with a sample project,
compile those and then run it.

00:11:14.330 --> 00:11:20.940
So let's see if the demo
gods are working in my favor.

00:11:20.940 --> 00:11:23.730
So let's switch to
the [INAUDIBLE].

00:11:23.730 --> 00:11:25.600
It's demo time!

00:11:25.600 --> 00:11:29.390
So a couple slides
back, a lot of you

00:11:29.390 --> 00:11:32.840
would have caught me
saying, hey you got

00:11:32.840 --> 00:11:34.970
18 manufacturers of beacons.

00:11:34.970 --> 00:11:39.690
And actually, it's a lot more
than that, because today I'm

00:11:39.690 --> 00:11:42.730
going to unveil to you one
of the most expensive beacon

00:11:42.730 --> 00:11:45.980
that you can buy on the market,
also known as a [? Lexus ?]

00:11:45.980 --> 00:11:49.505
6 or [? Lexus ?] 9.

00:11:49.505 --> 00:11:52.690
AUDIENCE: Amazon?

00:11:52.690 --> 00:11:57.370
HOI LAM: So on here, what
I have got, if we can maybe

00:11:57.370 --> 00:11:59.510
do the white balance a
little bit, at the moment

00:11:59.510 --> 00:12:02.250
it's quite washed out.

00:12:02.250 --> 00:12:09.190
So what you can do is, you can
actually search, or Google,

00:12:09.190 --> 00:12:16.240
the Eddystone repo where one
of the tools that we provide

00:12:16.240 --> 00:12:19.250
developers is an
application that

00:12:19.250 --> 00:12:27.740
runs on Android, which allow
you to mimic a beacon for using

00:12:27.740 --> 00:12:28.271
a phone.

00:12:28.271 --> 00:12:30.520
And this is really helpful
in the development process,

00:12:30.520 --> 00:12:34.440
because you can then change
the ID really quite easily.

00:12:34.440 --> 00:12:40.760
So when you register and you
inevitably have maybe bugs.

00:12:40.760 --> 00:12:46.730
And when that happens you
could go back and change the ID

00:12:46.730 --> 00:12:48.060
relatively easily.

00:12:48.060 --> 00:12:52.140
So that's one of the tools
that is super helpful.

00:12:52.140 --> 00:13:03.090
And then, what I'm going to show
you is, once you have compiled

00:13:03.090 --> 00:13:07.710
the application that I mentioned
in the last slide, which

00:13:07.710 --> 00:13:13.270
is the fourth step, at the end
when you compile that Proximity

00:13:13.270 --> 00:13:16.839
Beacon API sample, this
is the kind of application

00:13:16.839 --> 00:13:17.630
that you would see.

00:13:17.630 --> 00:13:21.300
So you need to log in,
and then after that you

00:13:21.300 --> 00:13:23.120
can scan for different beacons.

00:13:23.120 --> 00:13:27.280
So as you can see, I've
already provisioned this beacon

00:13:27.280 --> 00:13:29.140
because I don't know
how many beacons

00:13:29.140 --> 00:13:31.930
that will be in the room,
and as a result if I'm

00:13:31.930 --> 00:13:35.520
doing a live demo this
could be quite tricky.

00:13:35.520 --> 00:13:38.090
Actually, that's a good lesson
for live deployment as well.

00:13:38.090 --> 00:13:41.190
So when you're deploying
in a live environment,

00:13:41.190 --> 00:13:44.520
make sure that you provision
things like a Faraday bag

00:13:44.520 --> 00:13:47.230
or a Faraday cage
for your deployment

00:13:47.230 --> 00:13:51.470
queue so that they can isolate
the one beacon that they're

00:13:51.470 --> 00:13:55.600
deploying compared to thousands
that may be in their van.

00:13:55.600 --> 00:13:58.410
So that's something
that's quite helpful.

00:13:58.410 --> 00:14:00.260
So when I click
through, then you

00:14:00.260 --> 00:14:03.780
can see some of the information
that I can actually provision.

00:14:03.780 --> 00:14:08.110
So things like whether the
beacon itself is active,

00:14:08.110 --> 00:14:10.300
or the coordinates,
and the Place

00:14:10.300 --> 00:14:13.880
ID that this beacon
is set against.

00:14:13.880 --> 00:14:16.470
So right now, it's set
against the strand Theatre,

00:14:16.470 --> 00:14:18.990
which is where we are.

00:14:18.990 --> 00:14:23.440
At the bottom you can put in as
many attachments as you want.

00:14:23.440 --> 00:14:26.430
The type and the data
is totally up to you up

00:14:26.430 --> 00:14:29.130
to one kilobyte in size.

00:14:29.130 --> 00:14:36.160
So that's the little demo
for the Proximity Beacon API.

00:14:36.160 --> 00:14:39.020
I encourage you to check it out.

00:14:39.020 --> 00:14:43.920
So next I'm going to talk
about the interesting stuff.

00:14:43.920 --> 00:14:47.550
So once you have got your
hardware beacon, stuck them up,

00:14:47.550 --> 00:14:49.980
you have provisioned
them and registered them

00:14:49.980 --> 00:14:52.550
with the Proximity Beacon API.

00:14:52.550 --> 00:14:54.430
Then the really
interesting thing

00:14:54.430 --> 00:14:56.350
happens, which is
all to use cases

00:14:56.350 --> 00:14:57.870
that you guys are
thinking about.

00:14:57.870 --> 00:15:01.720
So with that, what
you can do is use

00:15:01.720 --> 00:15:05.660
the nearby API which support
both Android and iOS.

00:15:05.660 --> 00:15:10.440
So today, if the demo
god will allow me,

00:15:10.440 --> 00:15:13.870
I will try to do some
live coding using Nearby.

00:15:13.870 --> 00:15:16.980
So, can we switch
back to the computer?

00:15:16.980 --> 00:15:17.480
Thank you.

00:15:21.502 --> 00:15:22.650
OK, cool.

00:15:22.650 --> 00:15:27.540
So a lot of these will
be fairly standard,

00:15:27.540 --> 00:15:31.870
if you have used any of the
Google Place services APIs.

00:15:31.870 --> 00:15:35.195
So the first thing is to get
a Google API client and et

00:15:35.195 --> 00:15:36.970
cetera, et cetera.

00:15:36.970 --> 00:15:41.370
Where we start is when things
get interesting and different

00:15:41.370 --> 00:15:42.660
for beacons.

00:15:42.660 --> 00:15:46.560
So the first thing
is to just talk

00:15:46.560 --> 00:15:50.030
about when the Google beacon,
sorry, when the Google API

00:15:50.030 --> 00:15:53.440
client actually connects,
then that's the step when

00:15:53.440 --> 00:15:55.400
we go into it and
say, hey, can I

00:15:55.400 --> 00:15:59.120
subscribe to some interesting
beacon messages please.

00:15:59.120 --> 00:16:07.330
And just to explain how the app
works, I will just show you.

00:16:07.330 --> 00:16:10.650
It is a very simple
app, where at the top

00:16:10.650 --> 00:16:14.310
I have the beacon
attachment text,

00:16:14.310 --> 00:16:17.010
so whatever beacon it
sees, then you run.

00:16:17.010 --> 00:16:21.730
And at the bottom for debug
and for demo purposes,

00:16:21.730 --> 00:16:24.840
I will also show
the status of where

00:16:24.840 --> 00:16:28.180
we are in terms
of the deployment

00:16:28.180 --> 00:16:30.770
of the program itself.

00:16:34.030 --> 00:16:44.410
So there's the program and
then coming back seamlessly.

00:16:44.410 --> 00:16:51.110
So the plan is once we have seen
the various attachment, what

00:16:51.110 --> 00:16:53.290
we'd do is we would
just put them up.

00:16:53.290 --> 00:16:55.250
And so here is just
a little bit of code

00:16:55.250 --> 00:16:57.870
to get an array of
attachments and then

00:16:57.870 --> 00:17:00.790
just show them on screen.

00:17:00.790 --> 00:17:04.079
So here is where I need
to pray to the demo god

00:17:04.079 --> 00:17:07.170
that I can actually
remember what to do.

00:17:07.170 --> 00:17:09.160
So the first thing
I will do is, I

00:17:09.160 --> 00:17:10.730
will create a MessageListener.

00:17:16.640 --> 00:17:17.770
Actually I do have that.

00:17:23.794 --> 00:17:24.460
MessageListener.

00:17:27.530 --> 00:17:29.000
So the first thing
that you see is,

00:17:29.000 --> 00:17:32.070
I need to overwrite it
whenever I see a beacon,

00:17:32.070 --> 00:17:35.300
then I should
really do something.

00:17:35.300 --> 00:17:37.490
So the first thing
I'm going to do

00:17:37.490 --> 00:17:41.250
is to edit to if
I do see a beacon,

00:17:41.250 --> 00:17:45.800
is to add the beacon
content to my array.

00:17:45.800 --> 00:18:02.290
Add, new.String,
getContent, wait.

00:18:02.290 --> 00:18:04.925
OK, so once I put
it into array then

00:18:04.925 --> 00:18:07.640
I just need to
refresh the content.

00:18:07.640 --> 00:18:09.440
Another thing I'm
going to do is,

00:18:09.440 --> 00:18:12.040
I'm going to overwrite
on loss as well.

00:18:12.040 --> 00:18:15.210
So once a beacon
become out of range,

00:18:15.210 --> 00:18:20.730
then I want to get a message
so that I could remove it

00:18:20.730 --> 00:18:24.570
from the list.

00:18:24.570 --> 00:18:32.630
BeaconContents.remove,
new.String, message.getContent.

00:18:38.510 --> 00:18:40.220
Refresh.

00:18:40.220 --> 00:18:41.430
Simple.

00:18:41.430 --> 00:18:46.150
So some of you might have
noticed that I actually put

00:18:46.150 --> 00:18:48.480
the message that content
into a new string

00:18:48.480 --> 00:18:54.330
before I set it on to the
array, the reason for that

00:18:54.330 --> 00:18:56.710
is the content will
actually come back

00:18:56.710 --> 00:18:59.560
in a byte array and the easy
way to convert that is just

00:18:59.560 --> 00:19:04.210
to use a new string to do that.

00:19:04.210 --> 00:19:07.620
So tick, explained that.

00:19:07.620 --> 00:19:09.830
Next, subscribe options.

00:19:09.830 --> 00:19:15.500
So the Nearby Messages API
is more than just beacons.

00:19:15.500 --> 00:19:20.340
So the idea here is that
you could potentially

00:19:20.340 --> 00:19:25.430
have two mobile devices talking
to each other and one send

00:19:25.430 --> 00:19:27.350
message and one
subscribe to the message.

00:19:27.350 --> 00:19:30.710
And as a result, there are
various strategy of discovery

00:19:30.710 --> 00:19:32.170
that you can use.

00:19:32.170 --> 00:19:35.130
But given that we
are BLE beacon, then

00:19:35.130 --> 00:19:38.000
our only strategy is BLE.

00:19:38.000 --> 00:19:43.930
And because it's BLE, the
timeout time is very long.

00:19:43.930 --> 00:19:46.470
I think we don't
actually time out

00:19:46.470 --> 00:19:51.060
if you keep on subscribing
to the messages.

00:19:51.060 --> 00:19:54.740
So this is necessary
for that to happen.

00:19:54.740 --> 00:19:59.396
So I'm going to create
a subscribe option.

00:20:04.380 --> 00:20:06.775
And I could use the
builder to do that.

00:20:11.480 --> 00:20:20.430
OK, so I need to set the
strategy to strategy BLE only,

00:20:20.430 --> 00:20:22.366
thank you.

00:20:22.366 --> 00:20:23.240
Loving auto-complete.

00:20:26.060 --> 00:20:36.625
And then setCallback,
SubscribeCallback, expire.

00:20:41.440 --> 00:20:48.320
And here I'm going to
do BeaconContents.clear

00:20:48.320 --> 00:20:51.000
and refresh.

00:20:51.000 --> 00:20:56.660
So some of you might question,
hey you know why is a, whoops.

00:20:56.660 --> 00:20:58.171
.build, forgot to build.

00:21:02.570 --> 00:21:04.800
And yes, some of
you might wonder

00:21:04.800 --> 00:21:09.510
why do we have a unexpire
option, given that BLE

00:21:09.510 --> 00:21:11.580
is supposed to be always on.

00:21:11.580 --> 00:21:14.090
One of the reasons for
that, at least for beacon,

00:21:14.090 --> 00:21:17.900
is that a user could
potentially switch off

00:21:17.900 --> 00:21:21.370
the functionality either
overall or just for your app.

00:21:21.370 --> 00:21:25.050
And as a result, what you
previously expected to work,

00:21:25.050 --> 00:21:26.590
it might not.

00:21:26.590 --> 00:21:30.970
So you should really have a
look at this kind of scenario

00:21:30.970 --> 00:21:33.940
and make sure that it works.

00:21:33.940 --> 00:21:39.080
So then now we are
finally at the point

00:21:39.080 --> 00:21:40.842
where we can subscribe.

00:21:40.842 --> 00:21:42.050
So Nearby.Messages.Subscribe.

00:21:49.560 --> 00:21:53.670
And put into Google API
client the MessageListener

00:21:53.670 --> 00:22:03.420
we have just initiated and
the option that we have, then

00:22:03.420 --> 00:22:17.240
we need to add a callback,
a results callback, and OK.

00:22:17.240 --> 00:22:19.520
So once we get the
status back, we

00:22:19.520 --> 00:22:21.751
do need to check whether
it is successful.

00:22:27.400 --> 00:22:38.950
Success, then we would say
mStatusText, setText, "Success!

00:22:38.950 --> 00:22:43.160
Woohoo!"

00:22:43.160 --> 00:22:53.710
Else, else, that has failed.

00:22:57.770 --> 00:22:58.393
Unhappy face.

00:23:01.030 --> 00:23:08.580
We need to actually handle
the unsuccessful event.

00:23:08.580 --> 00:23:12.050
Putting in the status, even.

00:23:12.050 --> 00:23:17.060
So the reason why we need to
do that is, the first time when

00:23:17.060 --> 00:23:19.980
the user is running
your application,

00:23:19.980 --> 00:23:23.650
we would then go through
a permission dialogue

00:23:23.650 --> 00:23:30.470
to just make sure that, hey,
user, are you OK with this app

00:23:30.470 --> 00:23:34.660
essentially scanning
for beacons and running?

00:23:34.660 --> 00:23:38.390
So as a result, the first
time when the user actually

00:23:38.390 --> 00:23:44.200
run this program, it will always
go through the error statement

00:23:44.200 --> 00:23:47.910
here because the
connection will fail,

00:23:47.910 --> 00:23:51.460
because the user have not
given you their permission.

00:23:51.460 --> 00:23:54.830
So what we'll do is Handle
Unsuccessful Nearby Result,

00:23:54.830 --> 00:23:58.140
we will then ask for that.

00:24:00.920 --> 00:24:08.306
So if the
status.getStatusCode is

00:24:08.306 --> 00:24:09.972
equal to
NearbyMessageStatusCode.App NOT

00:24:09.972 --> 00:24:17.972
OPTED IN, then we'll ask.

00:24:24.075 --> 00:24:26.590
mResolveError.

00:24:26.590 --> 00:24:28.500
And this bit is also important.

00:24:28.500 --> 00:24:33.030
So I have also got a cost
variable called mResolvingError

00:24:33.030 --> 00:24:36.070
because you don't really
want to [INAUDIBLE] the user

00:24:36.070 --> 00:24:38.700
continuously if they say no.

00:24:38.700 --> 00:24:41.090
So as a result you would
need some kind of mechanism

00:24:41.090 --> 00:24:45.340
to check whether you've asked
them before and they say no.

00:24:45.340 --> 00:24:48.450
And what I'm going
to do here is,

00:24:48.450 --> 00:24:56.520
the first thing I'm going to
do is say now it will be true.

00:24:56.520 --> 00:24:57.700
So by default it's false.

00:24:57.700 --> 00:25:08.093
And then after that I will go
status.StartResolutionForResults

00:25:08.093 --> 00:25:13.050
and I will need to feed in the
activity, which is this one

00:25:13.050 --> 00:25:15.590
and also do request code.

00:25:15.590 --> 00:25:20.230
So the request code could
be anything that you want

00:25:20.230 --> 00:25:28.110
and what you can
do is, you might

00:25:28.110 --> 00:25:32.235
have multiple points where you
need to ask for permission.

00:25:35.680 --> 00:25:37.360
When the API comes
back to you need

00:25:37.360 --> 00:25:38.940
to know which one
has the resolve.

00:25:38.940 --> 00:25:40.650
So one might be
asking for payment,

00:25:40.650 --> 00:25:44.650
and another one may be
asking for beacon permission.

00:25:44.650 --> 00:25:47.440
So you want to keep track of
which one you are resolving.

00:25:47.440 --> 00:25:53.820
And as you can see it
requires a try/catch block.

00:25:53.820 --> 00:25:56.570
So if there's any
kind of error when

00:25:56.570 --> 00:25:59.720
he's trying to get that
kind of permission,

00:25:59.720 --> 00:26:01.460
then he will come in here.

00:26:10.600 --> 00:26:14.555
So if the user is saying no,
then we basically should say

00:26:14.555 --> 00:26:16.180
mStatusTextView.setText("User
denied").

00:26:27.080 --> 00:26:31.000
Great, [INAUDIBLE] permission.

00:26:31.000 --> 00:26:36.350
And once the
permission comes back,

00:26:36.350 --> 00:26:41.420
it would then come back into
this method on activity result,

00:26:41.420 --> 00:26:45.090
and what we should
do is to just check

00:26:45.090 --> 00:26:46.540
whether the results code is OK.

00:26:55.717 --> 00:26:57.800
And this is just for
clean-ness, it's not strictly

00:26:57.800 --> 00:27:00.820
necessary for this
particular demo

00:27:00.820 --> 00:27:03.970
because I've only got
one thing to resolve.

00:27:03.970 --> 00:27:20.140
But it would be helpful if your
app have multiple requests,

00:27:20.140 --> 00:27:21.740
to keep track of which one.

00:27:21.740 --> 00:27:24.220
So once we have got
that, then we should

00:27:24.220 --> 00:27:25.420
subscribe to messages again.

00:27:28.290 --> 00:27:32.670
Great end coding, but
I do have an error.

00:27:32.670 --> 00:27:35.765
So let's resolve that.

00:27:38.920 --> 00:27:41.060
OK, great.

00:27:41.060 --> 00:27:45.370
So let's come back
to end of coding,

00:27:45.370 --> 00:27:47.020
but I still have
not run my code yet

00:27:47.020 --> 00:27:50.010
so things can still
go very wrong.

00:27:50.010 --> 00:27:53.530
And then the next thing
I want to highlight

00:27:53.530 --> 00:27:56.830
is when you should stop
subscribing as well.

00:27:56.830 --> 00:28:01.630
So let's say the model that
you have is, as the user,

00:28:01.630 --> 00:28:05.060
move around a store then your
app kind of changes contacts

00:28:05.060 --> 00:28:07.420
or it gives you
more information.

00:28:07.420 --> 00:28:11.520
When the user exit the app or
switch to another app, when

00:28:11.520 --> 00:28:14.050
the user's no longer paying
attention, then perhaps

00:28:14.050 --> 00:28:15.520
you should switch it off.

00:28:15.520 --> 00:28:21.880
And what this will do then is
to help with battery life, first

00:28:21.880 --> 00:28:22.380
of all.

00:28:22.380 --> 00:28:27.150
And also is just good clean
code to just say, hey,

00:28:27.150 --> 00:28:31.090
I'm now done let's
unsubscribe and disconnect.

00:28:31.090 --> 00:28:34.180
So I just want to highlight
that number eight step.

00:28:34.180 --> 00:28:43.330
So I'm going to unlock my phone
and reset my permissions so

00:28:43.330 --> 00:28:49.412
that I'm denying this
app access from nearby.

00:28:56.050 --> 00:29:02.288
All right, so fingers crossed,
can we switch back to the app?

00:29:05.710 --> 00:29:06.440
OK cool.

00:29:09.370 --> 00:29:10.360
Will this work?

00:29:10.360 --> 00:29:13.590
Control-R. Please deploy.

00:29:24.310 --> 00:29:27.840
I think my phones disconnected.

00:29:27.840 --> 00:29:30.360
OK so this is a dialogue
that we're talking about.

00:29:30.360 --> 00:29:32.512
Can we adjust the
white balance again,

00:29:32.512 --> 00:29:33.803
so that we can see the message?

00:29:40.810 --> 00:29:45.085
OK, so this is what happened
when the dialogue first

00:29:45.085 --> 00:29:48.960
comes in, so that's why the
handle error is important.

00:29:48.960 --> 00:29:53.476
And if I now click Allow
then we say subscribing.

00:29:53.476 --> 00:29:58.200
Hello, Ubiquity which is the
attachment that we had before.

00:29:58.200 --> 00:30:02.960
So I'm going to go
really test my luck here,

00:30:02.960 --> 00:30:05.440
and actually switch
the beacon off.

00:30:05.440 --> 00:30:06.360
So this is now off.

00:30:06.360 --> 00:30:10.096
So hopefully the on
loss will kick in

00:30:10.096 --> 00:30:12.854
within the next minute or so.

00:30:12.854 --> 00:30:14.020
I've tried it several times.

00:30:14.020 --> 00:30:19.800
It kind of varies a little bit,
and basically will remove it.

00:30:19.800 --> 00:30:20.740
Yay!

00:30:20.740 --> 00:30:23.800
OK, this is the reverse
how we're working.

00:30:26.750 --> 00:30:28.380
Excellent.

00:30:28.380 --> 00:30:34.730
So you can see I could do this
with my shaky hands onstage

00:30:34.730 --> 00:30:38.630
using Nearby, so hopefully
you can check it out as well.

00:30:38.630 --> 00:30:43.520
And let's switch back to
the laptop, thank you.

00:30:43.520 --> 00:30:46.490
So that concludes
the demo portion.

00:30:46.490 --> 00:30:52.810
But instead of going back to
the slides, I thought hey,

00:30:52.810 --> 00:30:54.650
I would just do it in code.

00:30:54.650 --> 00:30:57.250
So we have just run through
the three components

00:30:57.250 --> 00:30:59.900
of the Eddystone beacon,
which are the hardware and all

00:30:59.900 --> 00:31:01.750
the wonderful frame
formats that you

00:31:01.750 --> 00:31:04.670
can put on those little guys.

00:31:04.670 --> 00:31:06.690
The next is the
Proximity Beacon API

00:31:06.690 --> 00:31:10.880
where I can add attachments,
add coordinates to my beacons

00:31:10.880 --> 00:31:13.020
and give it more contacts.

00:31:13.020 --> 00:31:17.220
And then last and final
is kind of my shaky coding

00:31:17.220 --> 00:31:20.620
around Nearby API, so that's
when it gets really interesting

00:31:20.620 --> 00:31:24.220
when you put the beacon
functionality into millions

00:31:24.220 --> 00:31:25.760
of users, potentially.

00:31:25.760 --> 00:31:28.660
So that's the overview.

00:31:28.660 --> 00:31:31.360
In terms of some of
the other things that

00:31:31.360 --> 00:31:35.930
is happening at Ubiquity, so as
I mentioned in my talk before,

00:31:35.930 --> 00:31:39.430
Scott Jenson, who's the
lead on Physical Web,

00:31:39.430 --> 00:31:40.280
is going to be here.

00:31:40.280 --> 00:31:43.010
So he's going to
talk to you in more

00:31:43.010 --> 00:31:47.300
details about the Physical
Web, and also ask him anything.

00:31:47.300 --> 00:31:50.380
And if that's not sufficient for
you, then there is actually a

00:31:50.380 --> 00:31:54.660
ask me anything session at 4:30.

00:31:54.660 --> 00:32:02.050
And we have the product managers
from both the Proximity Beacon

00:32:02.050 --> 00:32:04.760
API as well as the
Physical Web around,

00:32:04.760 --> 00:32:07.720
so you can ask them anything
about the Google Beacon

00:32:07.720 --> 00:32:10.390
Platform.

00:32:10.390 --> 00:32:13.480
In terms of
documentation I put it up

00:32:13.480 --> 00:32:14.980
top because I know
that you probably

00:32:14.980 --> 00:32:18.090
won't read it a
lot of the times,

00:32:18.090 --> 00:32:20.120
but when you get
into trouble, yes,

00:32:20.120 --> 00:32:23.820
please do have a look at them.

00:32:23.820 --> 00:32:28.030
And in terms of the code that
I've shown, unfortunately

00:32:28.030 --> 00:32:30.280
this is cut off a little bit.

00:32:30.280 --> 00:32:32.750
So with the Eddystone
format, what we have done

00:32:32.750 --> 00:32:35.370
is we have actually bundled
in a bunch of tools.

00:32:35.370 --> 00:32:39.990
And the thing that was
running on my [? Lexus ?] 6

00:32:39.990 --> 00:32:43.900
is this helpful to turn
your phone into a beacon.

00:32:43.900 --> 00:32:47.070
The health warning here
is that please, please,

00:32:47.070 --> 00:32:51.480
do not turn your users' phones
into beacons, even though you

00:32:51.480 --> 00:32:54.390
could, unless you have
very good reasons.

00:32:54.390 --> 00:32:58.100
And also you need to
be very good citizens

00:32:58.100 --> 00:33:01.510
and tell your users
that you're doing it.

00:33:01.510 --> 00:33:07.100
So this is mainly to
benefit developers

00:33:07.100 --> 00:33:09.480
in terms of putting
this [INAUDIBLE].

00:33:09.480 --> 00:33:13.540
The next is the
Proximity Beacon API,

00:33:13.540 --> 00:33:16.430
so the app that you have
seen that was running, adding

00:33:16.430 --> 00:33:19.220
attachments, and showing
your map, et cetera,

00:33:19.220 --> 00:33:22.990
can be found at this location.

00:33:22.990 --> 00:33:26.600
And although I demonstrated,
just the Android version,

00:33:26.600 --> 00:33:29.660
we also have an iOS version
that you can download and use

00:33:29.660 --> 00:33:31.080
as well.

00:33:31.080 --> 00:33:38.990
Last but not least, I am online
and I'm relatively social,

00:33:38.990 --> 00:33:42.930
so please ping me on Google+
or Twitter if you have any

00:33:42.930 --> 00:33:45.530
thoughts or questions.

00:33:45.530 --> 00:33:47.239
So how much time do
we have, by the way?

00:33:47.239 --> 00:33:48.280
MALE SPEAKER: 15 minutes.

00:33:48.280 --> 00:33:48.700
HOI LAM: 15 minutes.

00:33:48.700 --> 00:33:49.480
OK.

00:33:49.480 --> 00:33:51.252
I'll take some questions.

00:33:51.252 --> 00:33:54.882
I would encourage you to
focus mainly on the things

00:33:54.882 --> 00:33:57.250
that I've demoed, and
then what we can do

00:33:57.250 --> 00:34:02.651
is we can have a broader
platform Q&amp;A at 4:30

00:34:02.651 --> 00:34:03.900
with the two product managers.

00:34:07.220 --> 00:34:08.715
Shall we start now?

00:34:08.715 --> 00:34:10.340
AUDIENCE: I was
wondering, is there any

00:34:10.340 --> 00:34:13.066
way to authenticate or know
that there is a trust issue?

00:34:13.066 --> 00:34:16.398
[INAUDIBLE] what if someone
checked on my [INAUDIBLE]

00:34:16.398 --> 00:34:18.302
by having an
untrusted [INAUDIBLE].

00:34:22.502 --> 00:34:24.752
And then they send a [INAUDIBLE]
which is [INAUDIBLE].

00:34:27.830 --> 00:34:29.734
HOI LAM: OK, so the
question over there

00:34:29.734 --> 00:34:35.150
is, how do you ensure the
security of your beacon,

00:34:35.150 --> 00:34:40.120
how do you prevent other people
from essentially changing

00:34:40.120 --> 00:34:41.120
some of the attachments?

00:34:41.120 --> 00:34:43.340
Let's say you're in a
museum and then you put in,

00:34:43.340 --> 00:34:47.670
this piece of work is great and
someone say, well actually it's

00:34:47.670 --> 00:34:51.610
kind of the least preferable
kind of work from that artist.

00:34:51.610 --> 00:34:53.989
And you really don't want that.

00:34:53.989 --> 00:34:58.420
So with Proximity
Beacon API and Nearby,

00:34:58.420 --> 00:35:01.560
that issue would not exist.

00:35:01.560 --> 00:35:11.690
The reason for that is with
the Google Developer API key

00:35:11.690 --> 00:35:16.100
that you get, the
beacon will only,

00:35:16.100 --> 00:35:20.180
and those attachments will only
become available to your app,

00:35:20.180 --> 00:35:23.500
and only you can change
those attachments.

00:35:23.500 --> 00:35:27.420
And if you wind the
clock back a little bit,

00:35:27.420 --> 00:35:33.380
when I was demonstrating the
registration application where

00:35:33.380 --> 00:35:36.220
there was a lot of question
marks in terms of provisioning

00:35:36.220 --> 00:35:41.890
beacons, et cetera, or
registering beacons at the top

00:35:41.890 --> 00:35:43.920
you can just about
see my email address.

00:35:43.920 --> 00:35:48.250
So the people that updating
the attachments actually

00:35:48.250 --> 00:35:50.530
need to be signed-in users.

00:35:50.530 --> 00:35:52.640
So that's an additional
level of security.

00:35:52.640 --> 00:35:55.810
Not just anyone who
get hold of your app,

00:35:55.810 --> 00:35:57.950
when you are deploying,
but they actually

00:35:57.950 --> 00:35:59.420
need to be signed
in users as well.

00:35:59.420 --> 00:36:01.608
AUDIENCE: So that's all
transparent to the end

00:36:01.608 --> 00:36:05.585
user in terms of [INAUDIBLE]
ID we want to use and stuff

00:36:05.585 --> 00:36:06.085
like that.

00:36:06.085 --> 00:36:11.075
Or can say someone will come
up with an app to figure out

00:36:11.075 --> 00:36:13.580
[INAUDIBLE].

00:36:13.580 --> 00:36:16.480
HOI LAM: So that
sort of question

00:36:16.480 --> 00:36:19.650
there is whether
the attacker can

00:36:19.650 --> 00:36:22.300
figure out your
unique identifier

00:36:22.300 --> 00:36:24.280
and perform some kind of attack.

00:36:24.280 --> 00:36:26.260
So the only attack
that they can do

00:36:26.260 --> 00:36:28.490
is to mimic a beacon elsewhere.

00:36:28.490 --> 00:36:30.530
They can't change the
attachment that you

00:36:30.530 --> 00:36:34.030
put against your own app,
because they would then

00:36:34.030 --> 00:36:39.310
need the sign-in keys
of your application.

00:36:39.310 --> 00:36:42.120
But, for example,
they could detect

00:36:42.120 --> 00:36:43.900
what the unique
identifier of your beacon

00:36:43.900 --> 00:36:48.620
is and using a [? Lexus ?]
6, maybe, type in exactly

00:36:48.620 --> 00:36:50.800
the same ID and place
it somewhere else.

00:36:50.800 --> 00:36:55.130
So that is something that
they can potentially do.

00:36:58.262 --> 00:37:04.060
AUDIENCE: Are the beacon's
URL and attachment

00:37:04.060 --> 00:37:08.610
a single broadcast packet?

00:37:08.610 --> 00:37:11.730
HOI LAM: Yes, so Eddystone
URL or Physical Web

00:37:11.730 --> 00:37:16.700
is essentially
broadcasting a encoded URL.

00:37:16.700 --> 00:37:18.470
And that will be used directly.

00:37:23.350 --> 00:37:29.130
AUDIENCE: Is there a way to ask
the application developers that

00:37:29.130 --> 00:37:31.780
to authenticate
this beacon ID must

00:37:31.780 --> 00:37:36.179
be in this geolocation
coordinates?

00:37:36.179 --> 00:37:37.970
Because someone could
just pull that beacon

00:37:37.970 --> 00:37:42.270
and put it somewhere else and
do some malicious stuff with it.

00:37:45.624 --> 00:37:47.290
HOI LAM: The thing
that we would suggest

00:37:47.290 --> 00:37:53.420
there is, if your use case is
very security-conscious then

00:37:53.420 --> 00:38:00.680
perhaps it's not a
good solution for that

00:38:00.680 --> 00:38:02.760
because people could mimic it.

00:38:02.760 --> 00:38:08.327
But at the same time, we do have
multiple layers of protection

00:38:08.327 --> 00:38:09.160
in the Physical Web.

00:38:09.160 --> 00:38:11.560
So we have things like
spam filters, et cetera.

00:38:11.560 --> 00:38:16.410
And I would say Scott Jenson
is going to talk about it,

00:38:16.410 --> 00:38:18.440
and also he's a
much better person

00:38:18.440 --> 00:38:22.410
to explain the various
layers of protection

00:38:22.410 --> 00:38:23.720
that a user is going to have.

00:38:28.932 --> 00:38:30.348
AUDIENCE: So right
now we can only

00:38:30.348 --> 00:38:32.070
register Bluetooth beacons?

00:38:32.070 --> 00:38:36.974
Will it be possible to
register an NFC UUID

00:38:36.974 --> 00:38:38.890
and have that trigger?

00:38:38.890 --> 00:38:42.820
HOI LAM: OK so the question
there is, at the moment

00:38:42.820 --> 00:38:45.250
if you look at all the
APIs, they could potentially

00:38:45.250 --> 00:38:48.297
use with other
technologies not just

00:38:48.297 --> 00:38:50.270
Bluetooth [INAUDIBLE] beacons.

00:38:50.270 --> 00:38:52.390
And the specific question
there is whether you

00:38:52.390 --> 00:38:55.670
can use NFC, us being a beacon.

00:38:55.670 --> 00:38:58.300
So at the moment that
functionality is not supported,

00:38:58.300 --> 00:39:00.631
but that's a great suggestion.

00:39:04.658 --> 00:39:06.993
AUDIENCE: Does Google do
anything with the information

00:39:06.993 --> 00:39:09.272
that it gets through
the API itself?

00:39:09.272 --> 00:39:12.950
I mean, do they use it for
Now cards that sort of thing?

00:39:12.950 --> 00:39:17.730
HOI LAM: So the question is
what the various Google projects

00:39:17.730 --> 00:39:21.930
and use beacons and
enhanced experience.

00:39:21.930 --> 00:39:27.280
So it is correct that we have
some Google Now cards that

00:39:27.280 --> 00:39:29.770
are built against beacon.

00:39:29.770 --> 00:39:34.630
So we have a well-publicized
trial in Portland

00:39:34.630 --> 00:39:41.070
whereby we stream live
public transport information

00:39:41.070 --> 00:39:45.190
to the various
stations and bus stops.

00:39:45.190 --> 00:39:47.290
So that's one example
of how beacons

00:39:47.290 --> 00:39:49.711
could enhance user experience.

00:39:55.740 --> 00:39:57.011
Yes?

00:39:57.011 --> 00:39:59.052
AUDIENCE: I've used the
[INAUDIBLE] beacons using

00:39:59.052 --> 00:40:02.086
their [INAUDIBLE]
beacons API, and I

00:40:02.086 --> 00:40:06.710
have to use their cloud
service to manage my apps.

00:40:06.710 --> 00:40:10.809
[INAUDIBLE] the
beacons in my apps.

00:40:15.000 --> 00:40:20.910
I know that [INAUDIBLE] is
one of your OEM partners,

00:40:20.910 --> 00:40:24.886
but I don't think they
currently support Eddystone yet.

00:40:24.886 --> 00:40:29.810
In the future, maybe--
any time frame on that?

00:40:29.810 --> 00:40:31.910
There are still [INAUDIBLE].

00:40:31.910 --> 00:40:37.480
HOI LAM: So I can't comment
on particular manufacturer

00:40:37.480 --> 00:40:40.980
and their time frame of
deploying more products.

00:40:40.980 --> 00:40:45.850
But quite often what we
see is, the manufacturers

00:40:45.850 --> 00:40:49.860
might publish an update to the
firmware that runs on a beacon,

00:40:49.860 --> 00:40:53.330
and in the firmware update
they add in some support.

00:40:53.330 --> 00:40:56.940
So if you do
already have beacons

00:40:56.940 --> 00:40:59.150
from one of our
partners, then I strongly

00:40:59.150 --> 00:41:02.010
encourage you to
maybe check and see

00:41:02.010 --> 00:41:06.960
whether they support a
firmware update for Eddystone.

00:41:11.240 --> 00:41:13.570
Cool-- I think it's a wrap.

00:41:13.570 --> 00:41:15.810
Excellent, so there's
two more sessions.

00:41:15.810 --> 00:41:19.830
One on Physical Web,
and also the beacon

00:41:19.830 --> 00:41:24.300
AMA, so I do strongly encourage
you to come back and attend

00:41:24.300 --> 00:41:25.050
those sessions.

00:41:25.050 --> 00:41:26.030
Thank you.

00:41:26.030 --> 00:41:28.320
[APPLAUSE]

00:41:28.320 --> 00:41:32.270
[MUSIC PLAYING]

