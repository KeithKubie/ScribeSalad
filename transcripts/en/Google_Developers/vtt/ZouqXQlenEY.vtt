WEBVTT
Kind: captions
Language: en

00:00:08.570 --> 00:00:11.240
IDO GREEN: So hello, and welcome
to another episode of

00:00:11.240 --> 00:00:13.210
GDL-IL, GDL Israel.

00:00:13.210 --> 00:00:17.655
Today we're going to speak about
Google APIs, how easy is

00:00:17.655 --> 00:00:20.240
it to work with them and consume
them, both from the

00:00:20.240 --> 00:00:22.620
client and the server.

00:00:22.620 --> 00:00:26.340
We have a few examples that show
you the power of working

00:00:26.340 --> 00:00:30.510
with Google APIs, with
JavaScript, of course, on the

00:00:30.510 --> 00:00:31.520
client side.

00:00:31.520 --> 00:00:34.660
And then on the server side, I
choose to show some simple

00:00:34.660 --> 00:00:40.010
examples in PHP because it's the
recent addition to Google

00:00:40.010 --> 00:00:40.510
App Engine.

00:00:40.510 --> 00:00:45.500
So I guess people will want
to see how to leverage.

00:00:45.500 --> 00:00:47.270
So today we don't
have any slides.

00:00:47.270 --> 00:00:48.630
We just have some codes.

00:00:48.630 --> 00:00:53.020
And let me share with you my
screen so we'll be able to

00:00:53.020 --> 00:00:57.890
flip quickly between the browser
and the text editor.

00:00:57.890 --> 00:01:03.140
So let's make this one, and
let's see first how we're

00:01:03.140 --> 00:01:03.990
going to tackle it.

00:01:03.990 --> 00:01:06.260
So we'll start on
the server side.

00:01:06.260 --> 00:01:12.290
And to start on the server side,
basically you need to go

00:01:12.290 --> 00:01:18.260
and download the library that
enable your encapsulating for

00:01:18.260 --> 00:01:20.600
you of all the rich
functionality that you have in

00:01:20.600 --> 00:01:22.750
Google APIs.

00:01:22.750 --> 00:01:28.050
It's one line, and as you can
see here, you just need to

00:01:28.050 --> 00:01:29.480
copy this one--

00:01:29.480 --> 00:01:31.010
it's curl--

00:01:31.010 --> 00:01:33.860
and get it.

00:01:33.860 --> 00:01:37.450
Once you get it, actually if
you click on this link, it

00:01:37.450 --> 00:01:40.730
will download it for
you immediately.

00:01:40.730 --> 00:01:45.420
You unzip it, of course, tar it,
and then you have a quite

00:01:45.420 --> 00:01:49.680
nice set of examples that's
showing you the power of

00:01:49.680 --> 00:01:55.390
different APIs that you could
leverage out of the vast

00:01:55.390 --> 00:01:58.410
enormous richness of different
APIs that Google

00:01:58.410 --> 00:02:01.140
allows you to consume.

00:02:01.140 --> 00:02:05.200
Another important note
is the console.

00:02:05.200 --> 00:02:06.960
So on the console--

00:02:06.960 --> 00:02:11.170
let's go here to the GDL
example that I started.

00:02:11.170 --> 00:02:14.090
When you're just starting with
the console, you basically

00:02:14.090 --> 00:02:18.750
need to create yourself an
OAuth 2.0 client ID.

00:02:18.750 --> 00:02:23.320
And you need to do it because
lots of Google services and I

00:02:23.320 --> 00:02:28.310
guess if you will create with
Google Cloud Endpoint service

00:02:28.310 --> 00:02:33.090
for you, you'll want to make
sure that it's authenticated.

00:02:33.090 --> 00:02:38.600
And the easiest way to do is
just come here, to click on

00:02:38.600 --> 00:02:42.610
the OAuth 2.0 button, give
your product a name.

00:02:42.610 --> 00:02:44.220
In our case, it will
be [AUDIO OUT].

00:02:50.730 --> 00:02:55.340
And you probably will want to
give here some sort of a logo,

00:02:55.340 --> 00:03:04.672
a nice one, and Page
URL [AUDIO OUT]

00:03:04.672 --> 00:03:07.950
all the projects, and then
we're clicking yes.

00:03:07.950 --> 00:03:10.620
You could choose if it's going
to be a web application or a

00:03:10.620 --> 00:03:14.990
service, where basically
you'll want for your

00:03:14.990 --> 00:03:18.130
application to make the calls,
or an installed application.

00:03:18.130 --> 00:03:25.310
So for native apps in Android
and iOS or on Windows, Linux,

00:03:25.310 --> 00:03:29.210
or Mac, you'll probably want
to choose this option.

00:03:29.210 --> 00:03:32.410
In our option, let's stick
with web application, but

00:03:32.410 --> 00:03:36.270
please remember that you could
also get it as a service, and

00:03:36.270 --> 00:03:39.610
then basically you don't need
any other information.

00:03:39.610 --> 00:03:41.880
If you're going with web
application, one of the

00:03:41.880 --> 00:03:45.260
important things is that you
need to enter your endpoint of

00:03:45.260 --> 00:03:46.600
your application.

00:03:46.600 --> 00:03:51.400
And in our case just to make
things [AUDIO OUT], let's keep

00:03:51.400 --> 00:03:52.900
with the local host.

00:03:52.900 --> 00:03:56.260
And then you'll have the
redirect, of course, that

00:03:56.260 --> 00:03:59.760
basically we get the
confirmation after Google has

00:03:59.760 --> 00:04:02.910
authenticated your user or
your call and given you a

00:04:02.910 --> 00:04:04.720
token to continue.

00:04:04.720 --> 00:04:09.560
In my case, you could see that,
quite quickly, set it to

00:04:09.560 --> 00:04:12.820
be localauth and
oauthcallback.

00:04:12.820 --> 00:04:16.260
And of course, you could edit
those settings and add a few

00:04:16.260 --> 00:04:19.620
other redirects URL to other
environments that you have.

00:04:19.620 --> 00:04:23.540
So in most of the cases, you'd
probably want to put the QI

00:04:23.540 --> 00:04:26.290
environment, maybe the
staging environment.

00:04:26.290 --> 00:04:28.230
And then hopefully, on
production, you won't use the

00:04:28.230 --> 00:04:32.220
same keys, You will
create a new one.

00:04:32.220 --> 00:04:36.940
After we created this, we're
going with services.

00:04:36.940 --> 00:04:41.040
And for the services, you have
here a huge richness of

00:04:41.040 --> 00:04:43.820
different services that
you could [INAUDIBLE].

00:04:43.820 --> 00:04:45.180
Some of them are completely
free.

00:04:45.180 --> 00:04:51.640
Some of them are with just a
bit of payment per usage.

00:04:51.640 --> 00:04:55.410
But it's all very detailed right
here in the console.

00:04:55.410 --> 00:04:57.170
And you could see quite quickly
how many you have

00:04:57.170 --> 00:04:59.520
active, how many you
have inactive.

00:04:59.520 --> 00:05:02.880
And just to show you how you
play with it, so let's say

00:05:02.880 --> 00:05:04.670
that I want to work with--

00:05:04.670 --> 00:05:06.480
I don't know-- the
calendar API.

00:05:06.480 --> 00:05:08.730
So I'll activate it.

00:05:08.730 --> 00:05:13.030
Of course, I need to confirm
the term of service.

00:05:13.030 --> 00:05:17.410
And once I am accepting it,
I have here now one active

00:05:17.410 --> 00:05:21.550
service that I could run on
this specific service.

00:05:21.550 --> 00:05:24.250
Now, if I want to start and see
what I could do with this

00:05:24.250 --> 00:05:27.480
service, there's a nice
question mark here.

00:05:27.480 --> 00:05:31.160
And If I'll click and try it
out, immediately I'm being

00:05:31.160 --> 00:05:36.170
redirected, and I can start
and see what this API is

00:05:36.170 --> 00:05:37.260
exposing to me.

00:05:37.260 --> 00:05:39.440
So this is part basically
of the discovery

00:05:39.440 --> 00:05:40.880
mechanism that we have.

00:05:40.880 --> 00:05:45.590
And if you remember during my
talk in the last I/O, we spoke

00:05:45.590 --> 00:05:49.550
about Cloud Endpoint and how you
could leverage this system

00:05:49.550 --> 00:05:53.200
in creating your own API and
enjoying this discovery

00:05:53.200 --> 00:05:56.880
mechanism to make your
work more productive.

00:05:56.880 --> 00:06:00.680
So after we do all this,
basically we have a few other

00:06:00.680 --> 00:06:02.550
things that we could run with.

00:06:02.550 --> 00:06:06.560
Here you have a very nice page
that's letting you check which

00:06:06.560 --> 00:06:07.770
services you authorized.

00:06:07.770 --> 00:06:10.390
And once you're working with
development, you might want to

00:06:10.390 --> 00:06:14.270
revoke access to some of the
services so you could tests

00:06:14.270 --> 00:06:17.040
again and again the
authentication phase and make

00:06:17.040 --> 00:06:20.500
sure that you're doing
the right things.

00:06:20.500 --> 00:06:24.750
If you want to play with a
certain API, one great way to

00:06:24.750 --> 00:06:30.840
work with the API on the web
without coding even one line

00:06:30.840 --> 00:06:33.600
is just to go to
developers.google.com and go

00:06:33.600 --> 00:06:35.880
here on the API Explorer.

00:06:35.880 --> 00:06:39.440
And in our case, I choose the
YouTube data API because this

00:06:39.440 --> 00:06:41.310
is the example that
I prepared.

00:06:41.310 --> 00:06:42.740
And here you can see that--

00:06:42.740 --> 00:06:45.260
let's say that I want to get
from YouTube the idea in the

00:06:45.260 --> 00:06:47.750
snippet per video.

00:06:47.750 --> 00:06:50.220
Then I want the max
results to be--

00:06:50.220 --> 00:06:50.870
I don't know--

00:06:50.870 --> 00:06:52.100
9.

00:06:52.100 --> 00:06:55.180
And the query that I'll
put, it could be

00:06:55.180 --> 00:06:57.910
ski, it could be snowboard.

00:06:57.910 --> 00:07:03.190
And once I'm executing it, I'm
getting here the response.

00:07:03.190 --> 00:07:06.850
I could take basically these
and just play in other

00:07:06.850 --> 00:07:08.850
environment on it.

00:07:08.850 --> 00:07:10.740
But here you could say
that I got 200, so

00:07:10.740 --> 00:07:11.850
everything is cool.

00:07:11.850 --> 00:07:14.980
And here I'm getting a nice JSON
object that basically is

00:07:14.980 --> 00:07:17.010
describing all the
result sets.

00:07:17.010 --> 00:07:18.465
And you could see that I'm
getting the videos.

00:07:18.465 --> 00:07:22.360
I'm getting the thumbnails to
the videos, the ID, everything

00:07:22.360 --> 00:07:24.840
that I basically requested.

00:07:24.840 --> 00:07:31.960
Now, if we look at how this
example looked on PHP, on PHP,

00:07:31.960 --> 00:07:34.660
it will be quite similar
in a lot of sense.

00:07:34.660 --> 00:07:41.720
So we'll come here, and it might
be a bit crowded, but I

00:07:41.720 --> 00:07:43.350
hope that you can see here.

00:07:43.350 --> 00:07:47.390
Basically we have a simple page
that's letting us query a

00:07:47.390 --> 00:07:48.990
YouTube API.

00:07:48.990 --> 00:07:53.720
We want to get from the user a
search term and then probably

00:07:53.720 --> 00:07:55.580
to limit the result.

00:07:55.580 --> 00:07:59.130
And that's it in the bottom
for the search action.

00:07:59.130 --> 00:08:02.650
What I'm fetching here is two
libraries, is two files that

00:08:02.650 --> 00:08:05.820
actually are exposing and
encapsulating YouTube service.

00:08:05.820 --> 00:08:08.900
So it's first the Google client,
so just I'll have all

00:08:08.900 --> 00:08:13.260
the basic functionality and
then the YouTube itself.

00:08:13.260 --> 00:08:16.210
Once I'm doing that, I
have here, of course,

00:08:16.210 --> 00:08:17.600
the developer key.

00:08:17.600 --> 00:08:23.700
And now I'm just calling the
constructor of Google Client

00:08:23.700 --> 00:08:24.760
and working with it.

00:08:24.760 --> 00:08:27.540
So I'm setting the developer
key, and I'm calling with this

00:08:27.540 --> 00:08:30.600
client to YouTube service.

00:08:30.600 --> 00:08:33.470
After I do this exactly like I
showed you in the Explorer

00:08:33.470 --> 00:08:37.640
API, I'm basically calling
YouTube Search searchlist.

00:08:37.640 --> 00:08:41.110
And you can see here in the
Explorer API, that it's

00:08:41.110 --> 00:08:44.010
exactly the same endpoint.

00:08:44.010 --> 00:08:48.430
So this one is exactly
like this one.

00:08:48.430 --> 00:08:51.710
And again, very similar to what
we did in the example on

00:08:51.710 --> 00:08:56.560
the API Explorer, I'm going, and
I'm concentrating on the

00:08:56.560 --> 00:08:58.050
idea in the snippet.

00:08:58.050 --> 00:09:01.660
I want to pass the query and, of
course, the max results, so

00:09:01.660 --> 00:09:03.040
this is my payload.

00:09:03.040 --> 00:09:07.110
And now all I'm doing is going
on this nice loop and making

00:09:07.110 --> 00:09:11.960
sure that the result set-- which
is basically separated

00:09:11.960 --> 00:09:12.910
into three buckets.

00:09:12.910 --> 00:09:17.400
One is the videos and the
channels and then the playlist

00:09:17.400 --> 00:09:18.680
we'll bring back.

00:09:18.680 --> 00:09:22.400
And in my body, I will just
make sure that I'm

00:09:22.400 --> 00:09:24.460
constructing those lists.

00:09:24.460 --> 00:09:29.490
So I'm using the ul and
the ly tags just to

00:09:29.490 --> 00:09:30.860
construct it in here.

00:09:30.860 --> 00:09:34.090
Very simple.

00:09:34.090 --> 00:09:36.980
I just embedded it here,
and that's it.

00:09:36.980 --> 00:09:41.090
Let's look how it's working
on my local environment.

00:09:41.090 --> 00:09:43.120
So let's close now with
the Dev tool.

00:09:43.120 --> 00:09:45.100
We'll look at it later.

00:09:45.100 --> 00:09:46.620
So if I'm searching for--

00:09:46.620 --> 00:09:48.330
I don't know.

00:09:48.330 --> 00:09:50.360
I'm limiting it to 10 results.

00:09:50.360 --> 00:09:53.040
When I'm clicking search,
basically it's going to

00:09:53.040 --> 00:09:54.730
YouTube, returning.

00:09:54.730 --> 00:09:57.160
And as you can see here,
basically I just added the

00:09:57.160 --> 00:09:58.210
image as well.

00:09:58.210 --> 00:10:02.920
So unlike the previous example,
we're getting more

00:10:02.920 --> 00:10:06.340
holistic search results, if you
will, so it's a bit more

00:10:06.340 --> 00:10:08.740
informative.

00:10:08.740 --> 00:10:13.450
Exactly like you saw before it
here on the API Explorer, I'm

00:10:13.450 --> 00:10:17.330
just fetching that elements from
the result sets and just

00:10:17.330 --> 00:10:21.030
presenting them on
the page itself.

00:10:21.030 --> 00:10:25.890
Now, as you all know, we have
a bunch of client libraries

00:10:25.890 --> 00:10:29.590
that are actually letting you
leverage Google APIs.

00:10:29.590 --> 00:10:32.950
On the web, you might use the
JavaScript library, and I'll

00:10:32.950 --> 00:10:36.532
show you in a minute an example
how easy and smooth it

00:10:36.532 --> 00:10:38.050
is to work with.

00:10:38.050 --> 00:10:40.260
But if you're working with
JavaScript on the server side,

00:10:40.260 --> 00:10:43.750
we have a nice library for
Node.js, so please feel free

00:10:43.750 --> 00:10:45.210
to check it out.

00:10:45.210 --> 00:10:46.850
By the way, all the
links are here.

00:10:46.850 --> 00:10:54.400
So if you'll go to
pictures-app.appspot.com,

00:10:54.400 --> 00:10:59.000
you'll be able to look at the
slides that are from that

00:10:59.000 --> 00:11:02.540
previous I/O talk, but also,
on slide 25, as you can see

00:11:02.540 --> 00:11:04.880
here, all the links for all the
different libraries and

00:11:04.880 --> 00:11:06.790
languages that you
could leverage.

00:11:06.790 --> 00:11:11.350
So for the ones that are
building native clients, both

00:11:11.350 --> 00:11:15.900
for iOS and Android, we
have nice libraries.

00:11:15.900 --> 00:11:18.850
And of course, on the
server side, you

00:11:18.850 --> 00:11:21.200
have a bunch of languages.

00:11:21.200 --> 00:11:29.390
And actually we have even for
.NET and GWT and many others.

00:11:29.390 --> 00:11:37.580
So let's close that and see
how we could run an

00:11:37.580 --> 00:11:39.100
authentication.

00:11:39.100 --> 00:11:43.020
So in this specific example,
let's first look at a code,

00:11:43.020 --> 00:11:45.010
and then we'll look
at a live example.

00:11:45.010 --> 00:11:47.350
I want to authenticate
myself and get some

00:11:47.350 --> 00:11:48.930
information from G+.

00:11:48.930 --> 00:11:52.460
In our case, probably it will
be the image and the email.

00:11:52.460 --> 00:11:56.010
But as you can imagine, you
could run and do a lot of more

00:11:56.010 --> 00:11:59.180
things once you get the token,
the handle of your user.

00:12:01.810 --> 00:12:05.590
This is a very short example,
and as always in JavaScript,

00:12:05.590 --> 00:12:07.300
let's jump to the end.

00:12:07.300 --> 00:12:12.275
And first and foremost, we're
calling Google client library,

00:12:12.275 --> 00:12:14.110
the JavaScript client library.

00:12:14.110 --> 00:12:15.910
And we're going to get
here a callback.

00:12:15.910 --> 00:12:25.940
So on load, we'll handle
basically the callback and see

00:12:25.940 --> 00:12:26.590
what we're doing.

00:12:26.590 --> 00:12:28.980
So we're setting, of course,
the client ID and some

00:12:28.980 --> 00:12:34.660
boilerplate data like the
API key and the scope.

00:12:34.660 --> 00:12:36.030
And then when we're
coming here to

00:12:36.030 --> 00:12:37.960
handle the client load.

00:12:37.960 --> 00:12:41.340
We're setting those API keys,
and we just want to call

00:12:41.340 --> 00:12:43.820
immediately the check
authentication, so we did it

00:12:43.820 --> 00:12:46.480
with set timeout.

00:12:46.480 --> 00:12:49.500
After we're doing it, we're
just going to GAPI--

00:12:49.500 --> 00:12:50.610
Google API.

00:12:50.610 --> 00:12:53.140
And this endpoint on the

00:12:53.140 --> 00:12:56.220
authentication we want to authorize.

00:12:56.220 --> 00:13:00.180
The authorize will be done with
the client ID, the scope.

00:13:00.180 --> 00:13:02.560
And of course, we want
to do it immediately.

00:13:02.560 --> 00:13:05.060
And then we're giving it another
callback to just

00:13:05.060 --> 00:13:07.370
handle the result set that
we're getting back.

00:13:07.370 --> 00:13:10.520
In our case, it's this one.

00:13:10.520 --> 00:13:13.690
And when we're getting the
authentication, we want to do

00:13:13.690 --> 00:13:14.880
several things.

00:13:14.880 --> 00:13:19.470
So first, if everything is OK
and we don't have any error,

00:13:19.470 --> 00:13:23.420
let's just go here and hide the
Authorize button so the

00:13:23.420 --> 00:13:25.110
user won't be confused.

00:13:25.110 --> 00:13:28.880
And in a real world case, you
might want at this stage to

00:13:28.880 --> 00:13:32.400
make sure that you're confirming
and you're showing

00:13:32.400 --> 00:13:35.510
the user that he or
she are logged in.

00:13:35.510 --> 00:13:38.800
It might be through a nice
image of the cells or any

00:13:38.800 --> 00:13:41.855
other nice bold way to show that
they are now logged in

00:13:41.855 --> 00:13:43.610
and authenticated.

00:13:43.610 --> 00:13:46.640
And now we're making
the API call.

00:13:46.640 --> 00:13:50.510
Of course, on the opposite
direction, we do want to make

00:13:50.510 --> 00:13:53.690
sure that the button is visible,
like you've seen

00:13:53.690 --> 00:13:56.670
here, so people could authorize
themselves and log

00:13:56.670 --> 00:13:59.320
in or sign in to our app.

00:13:59.320 --> 00:14:04.520
Once we are handling the
authentication, we want

00:14:04.520 --> 00:14:08.130
basically to make
the API call.

00:14:08.130 --> 00:14:10.150
We're going to G+ API.

00:14:10.150 --> 00:14:11.700
We're controlling the version.

00:14:11.700 --> 00:14:14.540
So in our case here,
it would be d1.

00:14:14.540 --> 00:14:20.330
And basically what I want to
fetch from people is just me.

00:14:20.330 --> 00:14:26.800
And I'm taking the image of
myself and just putting it on

00:14:26.800 --> 00:14:29.570
the page itself.

00:14:29.570 --> 00:14:32.870
Now let's work on the live
example and see how it does.

00:14:32.870 --> 00:14:36.720
So as you can see here, I'm
being authenticated so it's

00:14:36.720 --> 00:14:40.350
immediately popping up the
request for permission dialog.

00:14:40.350 --> 00:14:42.260
In this case, you could see
that I used the Chrome

00:14:42.260 --> 00:14:45.460
extension book examples, just
because I have it handy.

00:14:45.460 --> 00:14:48.540
And hopefully in the near
future, you'll be able to see

00:14:48.540 --> 00:14:51.540
some live relevant examples
to Chrome extensions.

00:14:51.540 --> 00:14:54.860
But I'm allowing access, and
then basically I've been

00:14:54.860 --> 00:14:56.940
redirected again to this page.

00:14:56.940 --> 00:15:01.110
And as you can see, I have now
my photo and my title here.

00:15:01.110 --> 00:15:03.270
So this is one example that's
showing you the power

00:15:03.270 --> 00:15:04.840
[INAUDIBLE].

00:15:04.840 --> 00:15:08.450
And now let's see another
simple example

00:15:08.450 --> 00:15:09.070
that's showing you.

00:15:09.070 --> 00:15:14.510
So I have here another page,
which is basically the

00:15:14.510 --> 00:15:17.700
[INAUDIBLE] or the sample that
you're getting with Google API

00:15:17.700 --> 00:15:19.920
PHP client examples.

00:15:19.920 --> 00:15:23.310
And here basically we'll do
exactly the same, but instead

00:15:23.310 --> 00:15:26.160
of JavaScript, we'll
just leverage PHP.

00:15:26.160 --> 00:15:30.500
So I'm going to the directory
of the example, UserInfo.

00:15:30.500 --> 00:15:33.710
And after I log out, before the
session, of course, I want

00:15:33.710 --> 00:15:36.210
now to authenticate myself.

00:15:36.210 --> 00:15:41.380
So again I'll get this nice
authorization dialog.

00:15:41.380 --> 00:15:43.600
And after I'm doing it, and as
you can see here it was in

00:15:43.600 --> 00:15:50.580
Hebrew, I'm getting again in
this case my email and photo.

00:15:50.580 --> 00:15:52.210
How would the code look like?

00:15:52.210 --> 00:15:56.702
Let's jump real quick
and let's remove

00:15:56.702 --> 00:15:57.750
this one for a second.

00:15:57.750 --> 00:16:02.690
Yeah, so here, yeah.

00:16:02.690 --> 00:16:07.370
So again I'm calling the Google
OAuth 2.0 service.

00:16:07.370 --> 00:16:10.240
And after we're setting the
Google client and giving it a

00:16:10.240 --> 00:16:14.200
bunch of IDs-- and by the way,
the client ID, the developer

00:16:14.200 --> 00:16:20.240
key and everything else could
be found here on your API

00:16:20.240 --> 00:16:22.430
access tab.

00:16:22.430 --> 00:16:25.400
So if you'll click on it,
basically all the relevant

00:16:25.400 --> 00:16:28.250
information that you need to
copy/paste, like the client

00:16:28.250 --> 00:16:34.200
ID, the client secret, and the
API key, are all here.

00:16:34.200 --> 00:16:37.120
So just remember API's console,

00:16:37.120 --> 00:16:40.140
and this is the location.

00:16:40.140 --> 00:16:42.750
So once you're doing that,
basically we're calling the

00:16:42.750 --> 00:16:45.620
OAuth service with our client.

00:16:45.620 --> 00:16:49.890
And we are pressing the code,
and we want to fetch token.

00:16:49.890 --> 00:16:52.130
The token is something that
we'll carry with us so we'll

00:16:52.130 --> 00:16:56.480
be able to confirm again and
again if we need to the

00:16:56.480 --> 00:16:58.080
service itself.

00:16:58.080 --> 00:17:02.640
And since in this case already
at the beginning if we're

00:17:02.640 --> 00:17:06.849
getting the token here, then
we just need to go do the

00:17:06.849 --> 00:17:08.609
redirect, and we're all good.

00:17:08.609 --> 00:17:13.730
If not, we want to set the
token, make sure that if the

00:17:13.730 --> 00:17:16.109
user is clicking on log
out, we're, of course,

00:17:16.109 --> 00:17:17.950
revoking the token.

00:17:17.950 --> 00:17:21.190
And here we're just calling
the client, and we want to

00:17:21.190 --> 00:17:22.119
fetch the token.

00:17:22.119 --> 00:17:25.060
So after we're getting it and
this is returning as true

00:17:25.060 --> 00:17:28.590
because we have the token in
the client, we're basically

00:17:28.590 --> 00:17:30.230
going to the OAuth service.

00:17:30.230 --> 00:17:33.590
And with the user info object,
we want to get the

00:17:33.590 --> 00:17:34.640
information.

00:17:34.640 --> 00:17:38.850
And as you saw in my case, it
was-- in the PHP case, it was

00:17:38.850 --> 00:17:42.340
the email and the picture,
the profile picture.

00:17:42.340 --> 00:17:45.870
And what we did with this is
just we put it on the page so

00:17:45.870 --> 00:17:47.310
we'd be able to see it.

00:17:47.310 --> 00:17:51.080
Here, last but not least, we, of
course, want to save in our

00:17:51.080 --> 00:17:55.770
SessionToken or any other place
that you find convenient

00:17:55.770 --> 00:18:00.660
and safe for your app, the token
itself, so you will able

00:18:00.660 --> 00:18:04.530
to leverage it and use it
later on in your app.

00:18:04.530 --> 00:18:06.440
And this is all we have here.

00:18:06.440 --> 00:18:10.460
So the bit HTML that we have
later on is just to make sure

00:18:10.460 --> 00:18:14.320
that we have those two cases of
connect, or logged in, and

00:18:14.320 --> 00:18:16.260
the logged out.

00:18:16.260 --> 00:18:22.300
So this, I guess,
was a very short

00:18:22.300 --> 00:18:25.090
introduction to Google APIs.

00:18:25.090 --> 00:18:28.360
Next week or in the near future,
I'll try to show you

00:18:28.360 --> 00:18:31.640
how you could leverage those
type of APIs when competing

00:18:31.640 --> 00:18:33.530
for your services.

00:18:33.530 --> 00:18:36.490
And that's with Google Could
Endpoint basically taking

00:18:36.490 --> 00:18:41.190
those APIs that we're using
internally and just expose

00:18:41.190 --> 00:18:42.280
them to the developer.

00:18:42.280 --> 00:18:45.770
So if you want to leverage
Google App Engine and create a

00:18:45.770 --> 00:18:49.390
powerful scalable API on top of
it, you might want to use

00:18:49.390 --> 00:18:50.500
Google Cloud Endpoint.

00:18:50.500 --> 00:18:56.040
And then you're benefiting and
getting for free all the great

00:18:56.040 --> 00:18:59.410
capabilities of the discovery
mechanism, the API Explorer,

00:18:59.410 --> 00:19:02.030
and all the richness of
libraries that are

00:19:02.030 --> 00:19:03.810
all ready for you.

00:19:03.810 --> 00:19:07.360
We'll speak about it hopefully
next week and, if not, in the

00:19:07.360 --> 00:19:08.570
near future.

00:19:08.570 --> 00:19:12.610
And now is a great time for
questions if someone that

00:19:12.610 --> 00:19:14.860
joined us have, please
feel free.

00:19:23.270 --> 00:19:27.950
OK, so later on, if someone have
any questions, just feel

00:19:27.950 --> 00:19:34.290
free to reach me on
plus.google.com/plusgreenido--

00:19:34.290 --> 00:19:35.340
one word.

00:19:35.340 --> 00:19:38.410
And until next week, have a
great time and bye-bye.

