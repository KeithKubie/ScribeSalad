WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So in this problem, we're going to build a bit of a spambot.

00:00:03.000 --> 00:00:07.000
Let's take an email address. Let's take my email address.

00:00:07.000 --> 00:00:09.000
Let's say I post this on the internet,

00:00:09.000 --> 00:00:15.000
but I don't want an automatic robot to go from every page, see my email address,

00:00:15.000 --> 00:00:17.000
and then start sending me SPAM.

00:00:17.000 --> 00:00:22.000
So I come up with a solution to insert the characters, NOSPAM,

00:00:22.000 --> 00:00:24.000
somewhere in my email address.

00:00:24.000 --> 00:00:29.000
Presumably, a crawling spambot won't be able to notice that this isn't actually

00:00:29.000 --> 00:00:32.000
part of my email address, and I put that in there just as a distraction.

00:00:32.000 --> 00:00:37.000
But a human will see my email address, realize that NOSPAM isn't actually

00:00:37.000 --> 00:00:40.000
part of my email address--who would really put that there?--

00:00:40.000 --> 00:00:43.000
and just email to pchapman@udacity.com.

00:00:43.000 --> 00:00:49.000
Well, what we're going to do is build our lexer such that it matches email addresses,

00:00:49.000 --> 00:00:56.000
and the value of the token that it returns is going to remove NOSPAM from it.

00:00:56.000 --> 00:00:57.000
So what are we going to need?

00:00:57.000 --> 00:01:02.000
We're going to need to find our tokens and presumably, we're going to have 1 called email.

00:01:02.000 --> 00:01:06.000
Remember our tokens are going to use all capitalization, just as convention.

00:01:06.000 --> 00:01:11.000
Then we're going to want to define the function that matches that token.

00:01:11.000 --> 00:01:16.000
So now we have to write our regular expression that matches an email address.

00:01:16.000 --> 00:01:21.000
So the exact specifications for the email address are given in the problem specification.

00:01:21.000 --> 00:01:26.000
But to go over it briefly, we're going to have a sequence of letters with any capitalization,

00:01:26.000 --> 00:01:32.000
followed by an @ sign, and then we can have another sequence of letters

00:01:32.000 --> 00:01:35.000
followed by at least 1 dot and then more letters,

00:01:35.000 --> 00:01:38.000
possibly followed by another dot and more letters,

00:01:38.000 --> 00:01:41.000
but it doesn't end on a dot. You need to have some letters.

00:01:41.000 --> 00:01:44.000
So that's kind of the verbal walk through.

00:01:44.000 --> 00:01:46.000
Let's start writing it out.

00:01:46.000 --> 00:01:50.000
So we're going to match the letters before the @ sign.

00:01:50.000 --> 00:01:51.000
It's going to be this chunk right here.

00:01:51.000 --> 00:01:55.000
Then we're going to match the @ sign--this bit.

00:01:55.000 --> 00:02:01.000
So this part of a regular expression is going to match everything up to the last chunk of letters.

00:02:01.000 --> 00:02:07.000
This last chunk is called the top level domain--.com, .net, .edu--things like that.

00:02:07.000 --> 00:02:12.000
We're going to map with this regular expression everything before that.

00:02:12.000 --> 00:02:16.000
The specification for that is some letters followed by a period,

00:02:16.000 --> 00:02:19.000
and that whole thing can be repeated as many times as necessary,

00:02:19.000 --> 00:02:23.000
and at the end, we have our last bit of letters.

00:02:23.000 --> 00:02:29.000
For whatever this matches, we're going to remove the NOSPAM,

00:02:29.000 --> 00:02:32.000
and we're going to do that using the RE library,

00:02:32.000 --> 00:02:35.000
which you're hopefully pretty familiar with by now.

00:02:35.000 --> 00:02:40.000
This method in particular allows us to replace matching substrings with other substrings.

00:02:40.000 --> 00:02:45.000
In this case, we're going to replace all of the occurrences of NOSPAM with nothing.

00:02:45.000 --> 00:02:50.000
Also don't forget to define the error state where if it doesn't match anything,

00:02:50.000 --> 00:02:51.000
we're just going to skip it.

00:02:51.000 --> 00:02:55.000
The last thing we need to write is a code that builds the lexer and runs it

00:02:55.000 --> 00:03:01.000
on our given haystack--our given text of the webpage or whatnot of the email addresses.

00:03:01.000 --> 00:03:04.000
For that I'm going to go to the ID.

00:03:04.000 --> 00:03:06.000
Here I have the code I just wrote.

00:03:06.000 --> 00:03:09.000
I declare 1 token--that's the email.

00:03:09.000 --> 00:03:13.000
The definition matches our regular expression for email addresses

00:03:13.000 --> 00:03:16.000
and removes all of the occurrences of NOSPAM.

00:03:16.000 --> 00:03:19.000
I have something for when we hit an error, where nothing is matched.

00:03:19.000 --> 00:03:23.000
Now I just need to write the code that builds the lexer.

00:03:23.000 --> 00:03:26.000
So I'm going to basically follow what we did in lecture.

00:03:26.000 --> 00:03:30.000
This builds the lexer. Now we need to assign it the input.

00:03:30.000 --> 00:03:34.000
We're going to go through every token it matches and instill a list of results.

00:03:34.000 --> 00:03:37.000
I'm going to call that result. Here I go.

00:03:37.000 --> 00:03:40.000
For every token that we get, if I'm out of tokens, I'm going to break,

00:03:40.000 --> 00:03:45.000
but for all the ones that we do have, I'm going to append it to the result list

00:03:45.000 --> 09:59:59.000
and then return the result list.

