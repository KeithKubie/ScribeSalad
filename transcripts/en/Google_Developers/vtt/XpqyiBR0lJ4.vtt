WEBVTT
Kind: captions
Language: en

00:00:04.500 --> 00:00:05.490
RICHARD FULCHER:
Good afternoon.

00:00:05.490 --> 00:00:09.340
Thanks for coming to our talk
to on Android and designing

00:00:09.340 --> 00:00:11.330
for application structure.

00:00:11.330 --> 00:00:12.180
I'm Rich Fulcher.

00:00:12.180 --> 00:00:16.520
I'm one of the UI leads on
the Android design team.

00:00:16.520 --> 00:00:17.312
JENS NAGEL: And I'm
Jens Nagel.

00:00:17.312 --> 00:00:19.860
I'm an interaction designer
on the Android team.

00:00:19.860 --> 00:00:21.750
RICHARD FULCHER: So let's
just jump right in.

00:00:21.750 --> 00:00:25.750
So what do we mean when we
talk about structure?

00:00:25.750 --> 00:00:28.050
Maybe the first vision that
jumps into your head is the

00:00:28.050 --> 00:00:30.700
idea of an architectural
floor plan.

00:00:30.700 --> 00:00:34.390
Here, structure is what the
physical components that go

00:00:34.390 --> 00:00:38.740
into defining what spaces are
present and also provide the

00:00:38.740 --> 00:00:40.840
support for any of the
activities you might want to

00:00:40.840 --> 00:00:43.760
do in those space.

00:00:43.760 --> 00:00:45.060
But structure doesn't
have to be as

00:00:45.060 --> 00:00:46.640
immediately visible as that.

00:00:46.640 --> 00:00:49.460
Our bones provide structure
for our body.

00:00:49.460 --> 00:00:52.110
They provide valuable attachment
points for the

00:00:52.110 --> 00:00:54.550
functions of muscles
and organs--

00:00:54.550 --> 00:00:57.120
good stuff like that.

00:00:57.120 --> 00:01:00.250
Our applications are similar
to both of these examples.

00:01:00.250 --> 00:01:02.910
We need to define the spaces,
and we need to provide ways to

00:01:02.910 --> 00:01:06.630
attach functionality in
just the right places.

00:01:06.630 --> 00:01:10.100
So the kind of particular
thoughtful presentation, that

00:01:10.100 --> 00:01:13.820
is what goes into the
application structure.

00:01:13.820 --> 00:01:17.950
A well-structured app has
at least three things.

00:01:17.950 --> 00:01:20.590
First, it's easy
and efficient.

00:01:20.590 --> 00:01:23.570
If it were a house, the doorways
would be the right

00:01:23.570 --> 00:01:24.920
width, so you could
go through them.

00:01:24.920 --> 00:01:26.280
The floors would be solid.

00:01:26.280 --> 00:01:28.490
There'd be ample light to do
all the things you need

00:01:28.490 --> 00:01:29.740
to do within it.

00:01:31.820 --> 00:01:34.860
It takes advantage
of proximity.

00:01:34.860 --> 00:01:37.800
So the kitchen and the dining
room are connected together,

00:01:37.800 --> 00:01:40.600
and they're not separated
by the garage.

00:01:40.600 --> 00:01:44.260
And then finally, it has
navigational consistency.

00:01:44.260 --> 00:01:46.830
Maybe all of the front rooms
are connected together, but

00:01:46.830 --> 00:01:48.750
the back rooms all adjoin
a common hallway.

00:01:51.710 --> 00:01:55.050
So our talk is going to focus on
how do you find these same

00:01:55.050 --> 00:01:58.340
types of natural structures
for your application.

00:01:58.340 --> 00:01:59.640
And for those purposes,
we're going to

00:01:59.640 --> 00:02:01.310
start with an example.

00:02:01.310 --> 00:02:04.830
So let's say that we're going
to design an application to

00:02:04.830 --> 00:02:07.110
find a place to get
a drink nearby.

00:02:07.110 --> 00:02:09.970
And with this many developers in
the room, this should be up

00:02:09.970 --> 00:02:13.000
on the Play Store by
tomorrow night.

00:02:13.000 --> 00:02:17.680
So you've probably heard the
oft-repeated precept that form

00:02:17.680 --> 00:02:18.460
follows function.

00:02:18.460 --> 00:02:22.050
So it makes sense to first
ask, what does my app do?

00:02:22.050 --> 00:02:23.960
And by answering that, you'll
get a better sense of the

00:02:23.960 --> 00:02:28.710
structure that is needed to
support all that activity.

00:02:28.710 --> 00:02:33.610
So is the answer to that the
30-second stream of buzzwords

00:02:33.610 --> 00:02:36.480
you spew at the friend of the
friend who might be a venture

00:02:36.480 --> 00:02:37.830
capitalist?

00:02:37.830 --> 00:02:38.050
No.

00:02:38.050 --> 00:02:39.280
That's too high-level.

00:02:39.280 --> 00:02:42.510
That's probably incomprehensible
as well.

00:02:42.510 --> 00:02:47.270
Likewise, it's not the list of
every feature, every last

00:02:47.270 --> 00:02:50.700
function that the application
is going to perform.

00:02:50.700 --> 00:02:52.060
That's too low-level.

00:02:52.060 --> 00:02:55.700
It's too separated from
the actual user goals.

00:02:55.700 --> 00:02:58.640
Like Goldilocks, we need
something that's just right,

00:02:58.640 --> 00:03:00.410
just in the middle
of those two.

00:03:00.410 --> 00:03:02.150
And fortunately, there are
modeling techniques that we

00:03:02.150 --> 00:03:04.050
can use that give us that.

00:03:04.050 --> 00:03:06.570
One of them is use cases.

00:03:06.570 --> 00:03:11.130
And a use case is just a
sequence of interaction

00:03:11.130 --> 00:03:15.360
between a system or between
an actor in a system--

00:03:15.360 --> 00:03:17.540
the actor being the users for
us, the system being the

00:03:17.540 --> 00:03:19.170
application--

00:03:19.170 --> 00:03:23.420
that achieves a specific task
or completes a goal.

00:03:23.420 --> 00:03:27.210
When you write out a use case as
a narrative description, it

00:03:27.210 --> 00:03:28.470
might look something
like this.

00:03:28.470 --> 00:03:30.830
So for BarKeeper, we have a
use case that we need to

00:03:30.830 --> 00:03:33.080
support, which is
finding a bar.

00:03:33.080 --> 00:03:35.890
We might identify who the main
actor in this use case is,

00:03:35.890 --> 00:03:37.750
what kind of things have
to happen before we

00:03:37.750 --> 00:03:38.960
can get into it.

00:03:38.960 --> 00:03:42.115
But then the core of the use
case here is just a dialogue,

00:03:42.115 --> 00:03:45.800
really, between the actor
and the system.

00:03:45.800 --> 00:03:48.180
The drinker does this, the
BarKeeper app does this, back

00:03:48.180 --> 00:03:49.940
and forth, back and forth.

00:03:49.940 --> 00:03:52.740
Now, you can add a lot of
extensions to this.

00:03:52.740 --> 00:03:54.840
You can think about variations
of this task.

00:03:54.840 --> 00:03:56.690
You can find a nearby bar.

00:03:56.690 --> 00:03:59.040
You could think about other
post conditions

00:03:59.040 --> 00:04:00.970
for success or failure.

00:04:00.970 --> 00:04:03.300
I like to keep these
just really simple.

00:04:03.300 --> 00:04:06.650
The value here is in the
content, not the format.

00:04:06.650 --> 00:04:08.430
And you want to make it
something that anybody on the

00:04:08.430 --> 00:04:10.830
team can offer.

00:04:10.830 --> 00:04:14.170
There's something in use case
modeling that's oft overlooked

00:04:14.170 --> 00:04:16.750
that is actually really helpful
for application

00:04:16.750 --> 00:04:20.060
structure, and that's creating
use case diagrams.

00:04:20.060 --> 00:04:21.750
Now, these are really
simple diagrams.

00:04:21.750 --> 00:04:24.020
They just have three
components to them.

00:04:24.020 --> 00:04:26.080
The first is an actor.

00:04:26.080 --> 00:04:28.150
The stick figure is the official
parlance that they

00:04:28.150 --> 00:04:30.180
use to communicate that.

00:04:30.180 --> 00:04:32.050
There's the use cases,
just the title of

00:04:32.050 --> 00:04:33.590
the use cases circled.

00:04:33.590 --> 00:04:37.080
And then finally, there are
relationships, arrows that

00:04:37.080 --> 00:04:40.620
connect actors to use cases and
that connect use cases to

00:04:40.620 --> 00:04:43.740
each other to form extensions.

00:04:43.740 --> 00:04:47.230
If you take a bunch of these and
put them together, you get

00:04:47.230 --> 00:04:50.930
a diagram like this for our
BarKeeper application.

00:04:50.930 --> 00:04:53.950
There's a lot of content encoded
into this, but it's

00:04:53.950 --> 00:04:57.825
still just arrows, circles,
stick figures, a

00:04:57.825 --> 00:04:59.330
little bit of text.

00:04:59.330 --> 00:05:01.830
Use case diagrams are
intentionally

00:05:01.830 --> 00:05:03.285
very easy to draw.

00:05:03.285 --> 00:05:06.250
They're not one of these fancy
pants deliverables that gives

00:05:06.250 --> 00:05:09.130
a designer a leg up over
the rest of the team.

00:05:09.130 --> 00:05:11.120
Everybody can make
these drawings.

00:05:11.120 --> 00:05:12.510
And they don't have to be
captured digitally.

00:05:12.510 --> 00:05:14.970
You can just draw it on paper,
on a white board.

00:05:14.970 --> 00:05:16.030
You can use stickies.

00:05:16.030 --> 00:05:17.860
That's usually where I start.

00:05:21.360 --> 00:05:25.690
So the use case diagram is just
a very quick overview

00:05:25.690 --> 00:05:30.210
that anyone can decipher that
gives the overall description

00:05:30.210 --> 00:05:31.460
of what your app is
going to perform.

00:05:33.790 --> 00:05:35.880
Now, I took a big leap
to get to that point.

00:05:35.880 --> 00:05:37.870
So let me back up and walk
through some of the steps that

00:05:37.870 --> 00:05:39.570
were used to create
the diagram.

00:05:39.570 --> 00:05:42.690
The first is you have to take
stock of everything you want

00:05:42.690 --> 00:05:44.410
your application to do.

00:05:44.410 --> 00:05:47.090
And you want to capture all the
actors, all the different

00:05:47.090 --> 00:05:50.330
roles that they could perform
within your system.

00:05:50.330 --> 00:05:54.850
And likewise, you want to
enumerate all of the use cases

00:05:54.850 --> 00:05:55.910
that are going to be there.

00:05:55.910 --> 00:05:56.860
Just write them all out.

00:05:56.860 --> 00:05:59.000
You don't have to do the
narrative descriptions now.

00:05:59.000 --> 00:06:01.380
In fact, you might not
ever have to do them.

00:06:01.380 --> 00:06:04.240
Just capture everything you
want this app to do in the

00:06:04.240 --> 00:06:06.920
user's terms.

00:06:06.920 --> 00:06:09.010
The second step is to
prioritize them.

00:06:09.010 --> 00:06:11.300
And this can be very,
very coarse--

00:06:11.300 --> 00:06:12.700
three categories.

00:06:12.700 --> 00:06:16.090
And it's especially important
to prioritize the use cases.

00:06:16.090 --> 00:06:17.510
Which ones are really
important?

00:06:17.510 --> 00:06:18.790
Which ones are less so?

00:06:18.790 --> 00:06:23.050
Start to give a focus to what
your app is trying to do most

00:06:23.050 --> 00:06:26.530
often or most importantly.

00:06:26.530 --> 00:06:31.790
The third thing is to get into
sequencing, both how do the

00:06:31.790 --> 00:06:34.650
individual actors connect to
these cases, which are the

00:06:34.650 --> 00:06:38.400
ones that they want direct
access to, versus the use

00:06:38.400 --> 00:06:41.840
cases that are just natural
extensions of other use cases.

00:06:41.840 --> 00:06:43.890
I can't go directly to
View Bar Details.

00:06:43.890 --> 00:06:47.030
I've got to locate
a bar first.

00:06:47.030 --> 00:06:49.620
And then the last step
is decomposition.

00:06:49.620 --> 00:06:54.010
If you have a use case that
feels broad or vague or covers

00:06:54.010 --> 00:06:57.320
a lot of ground, you
can split it apart.

00:06:57.320 --> 00:06:59.590
Break it into smaller pieces
to attack it more

00:06:59.590 --> 00:07:00.810
specifically.

00:07:00.810 --> 00:07:02.870
And this can be helpful, because
those smaller pieces

00:07:02.870 --> 00:07:05.740
might get reused by components
elsewhere in your system or

00:07:05.740 --> 00:07:08.810
might be kind of specific,
have relationships

00:07:08.810 --> 00:07:10.060
with other use cases.

00:07:13.000 --> 00:07:14.650
You put them all back together,
and you've got the

00:07:14.650 --> 00:07:16.810
same diagram that
we started with.

00:07:16.810 --> 00:07:21.350
Now, this is roughly the
official UML format for a use

00:07:21.350 --> 00:07:22.100
case diagram--

00:07:22.100 --> 00:07:24.430
Unified Modeling Language.

00:07:24.430 --> 00:07:28.210
We can go a little bit further
just by putting a little bit

00:07:28.210 --> 00:07:30.690
of priority into some
of the strokes.

00:07:30.690 --> 00:07:33.830
We got that sense of priority
during the analysis, so let's

00:07:33.830 --> 00:07:35.760
layer it into the diagram.

00:07:35.760 --> 00:07:40.000
Take the most important or most
frequently accessed use

00:07:40.000 --> 00:07:42.120
cases and relationships
and make them bold.

00:07:42.120 --> 00:07:45.630
Take the ones that are low
priority, low frequency, and

00:07:45.630 --> 00:07:48.510
have them recede a little bit
by just dashing them out.

00:07:48.510 --> 00:07:51.100
Same diagram, but a little
bit more content to it.

00:07:51.100 --> 00:07:54.490
And we already start to see some
of the key paths through

00:07:54.490 --> 00:07:55.970
our application that
we know our app

00:07:55.970 --> 00:07:58.850
structure needs to support.

00:07:58.850 --> 00:08:01.420
A drinker needs to find a bar.

00:08:01.420 --> 00:08:03.960
They probably need one
nearby right now.

00:08:03.960 --> 00:08:06.250
They want to get to the bar
details and find out where to

00:08:06.250 --> 00:08:09.410
get there and make
sure it's open.

00:08:09.410 --> 00:08:13.200
So we've used this
use case diagram.

00:08:13.200 --> 00:08:15.710
It's starting to tell us about
our app structure.

00:08:15.710 --> 00:08:18.040
But what in particular can it
tell us about the hierarchy?

00:08:18.040 --> 00:08:21.660
Or how can it help us describe
what we're doing?

00:08:21.660 --> 00:08:25.100
Well, it can tell us when we
have a broad hierarchy.

00:08:25.100 --> 00:08:27.950
If we have an actor who's
connected to a number of use

00:08:27.950 --> 00:08:32.640
cases directly, all of equal
priority, then those are all

00:08:32.640 --> 00:08:35.049
reasonable starting places for
the user, and we want to make

00:08:35.049 --> 00:08:36.960
it easy for them to get
from one starting

00:08:36.960 --> 00:08:38.890
point to the other.

00:08:38.890 --> 00:08:42.630
On the other hand, if we have
more focus in our use case, if

00:08:42.630 --> 00:08:45.730
we see that there's one use case
in particular that's more

00:08:45.730 --> 00:08:49.390
important than the others, then
maybe we can have those

00:08:49.390 --> 00:08:51.850
less important ones be a
little less directly

00:08:51.850 --> 00:08:52.880
accessible.

00:08:52.880 --> 00:08:55.440
We can make different structural
choices in how we

00:08:55.440 --> 00:08:58.590
present our app between
those two.

00:08:58.590 --> 00:09:00.530
And likewise, we might have
this condition of

00:09:00.530 --> 00:09:04.090
statefulness, where different
users have different

00:09:04.090 --> 00:09:06.570
priorities between
the use cases.

00:09:06.570 --> 00:09:09.830
An example of this is the
Phone app on Android.

00:09:09.830 --> 00:09:11.690
When you open it up, it's
in one of three states.

00:09:11.690 --> 00:09:13.780
It's in either the Dialer
or the Call Log or

00:09:13.780 --> 00:09:15.120
the Favorites view.

00:09:15.120 --> 00:09:16.340
And those correspond
to different

00:09:16.340 --> 00:09:18.060
types of user behaviors.

00:09:18.060 --> 00:09:19.880
There are still people that
just dial numbers.

00:09:19.880 --> 00:09:22.870
There are people that rely
entirely on the Call Log.

00:09:22.870 --> 00:09:25.630
And we want that app to open
into those conditions for

00:09:25.630 --> 00:09:28.490
those different types of users,
the different actors or

00:09:28.490 --> 00:09:31.580
user roles.

00:09:31.580 --> 00:09:33.230
It can reveal depth.

00:09:33.230 --> 00:09:36.790
And depth is particularly
important when you have these

00:09:36.790 --> 00:09:40.590
deep chains of use cases that
are truly separate, that fan

00:09:40.590 --> 00:09:43.240
out from each other without
interconnections.

00:09:43.240 --> 00:09:48.370
In that case, if you have one
section where the user would

00:09:48.370 --> 00:09:51.090
quickly want to navigate to a
different section, your app's

00:09:51.090 --> 00:09:54.370
structure needs to
account for that.

00:09:54.370 --> 00:09:57.320
And finally, there's the sense
of interconnectedness, where

00:09:57.320 --> 00:09:59.970
use cases come together from
multiple threads, where there

00:09:59.970 --> 00:10:01.400
are these hubs.

00:10:01.400 --> 00:10:04.215
You know these are really
important features that you

00:10:04.215 --> 00:10:04.920
need to work on.

00:10:04.920 --> 00:10:07.180
These are probably some of
the hero moments of your

00:10:07.180 --> 00:10:10.370
application, because many users
gravitate to it at some

00:10:10.370 --> 00:10:13.880
point during the use
of your app.

00:10:13.880 --> 00:10:17.440
So there's one last trick you
can do when it comes to taking

00:10:17.440 --> 00:10:20.510
use case diagram in starting to
think about app hierarchy.

00:10:20.510 --> 00:10:24.770
If you take the use case diagram
and you just rotate it

00:10:24.770 --> 00:10:28.480
by 90 degrees, and if you think
about each of these use

00:10:28.480 --> 00:10:32.640
cases as a screen in your
application, you have a first

00:10:32.640 --> 00:10:37.330
approximation of what your app
hierarchy would look like.

00:10:37.330 --> 00:10:39.670
Now, this isn't perfect.

00:10:39.670 --> 00:10:42.080
There are occasions where the
one screen to one use case

00:10:42.080 --> 00:10:43.930
mapping isn't going
to be ideal.

00:10:43.930 --> 00:10:46.050
It's a good rule of thumb for
phones, but sometimes you'll

00:10:46.050 --> 00:10:49.805
bump into a use case that just
has more complexity to it, so

00:10:49.805 --> 00:10:52.360
it needs to devolve across
a couple of screens.

00:10:52.360 --> 00:10:54.690
Or you might have a cluster of
use cases that are fairly

00:10:54.690 --> 00:10:56.420
simple and can actually
be addressed all

00:10:56.420 --> 00:10:58.160
within a single screen.

00:10:58.160 --> 00:11:00.090
But this is a good starting
point for thinking about your

00:11:00.090 --> 00:11:01.480
app hierarchy.

00:11:01.480 --> 00:11:03.730
So let me turn to Jens now, and
we'll talk a little bit

00:11:03.730 --> 00:11:06.670
about what some of the common
patterns for introducing

00:11:06.670 --> 00:11:09.180
hierarchy are.

00:11:09.180 --> 00:11:12.090
JENS NAGEL: Thanks, Rich.

00:11:12.090 --> 00:11:15.230
So of course, apps come in
all shapes and sizes.

00:11:15.230 --> 00:11:18.880
There's a huge variety in
purpose and complexity.

00:11:18.880 --> 00:11:21.860
But if you wanted to build a
blueprint, if you took all

00:11:21.860 --> 00:11:24.750
apps and tried to build a common
blueprint, it would

00:11:24.750 --> 00:11:27.480
probably look something
like this, where

00:11:27.480 --> 00:11:29.890
you have a top level.

00:11:29.890 --> 00:11:32.150
And the top level is,
of course, the

00:11:32.150 --> 00:11:33.550
entryway into your app.

00:11:33.550 --> 00:11:34.700
It can be one screen.

00:11:34.700 --> 00:11:35.800
It can be multiple screens.

00:11:35.800 --> 00:11:39.110
That really depends on what your
core use cases are and

00:11:39.110 --> 00:11:41.660
how many of them you have.

00:11:41.660 --> 00:11:45.600
But the important thing is that
the user really finds

00:11:45.600 --> 00:11:49.330
their main use case is covered
here, and it's guided down the

00:11:49.330 --> 00:11:53.100
structure in order
to complete them.

00:11:53.100 --> 00:11:58.210
The top level is really about
displaying functional breadth

00:11:58.210 --> 00:12:01.310
and establishing an identity
for your app.

00:12:01.310 --> 00:12:04.740
So as you can see from this
example, just by taking a

00:12:04.740 --> 00:12:08.150
quick glance at them, you can
really understand what this

00:12:08.150 --> 00:12:09.400
app is about.

00:12:11.850 --> 00:12:13.840
Then next up is category
browsing.

00:12:13.840 --> 00:12:19.580
This is where you drill deeper
into your hierarchy or into

00:12:19.580 --> 00:12:20.860
your functionality.

00:12:20.860 --> 00:12:24.580
It's the connective tissue that
connects the top level

00:12:24.580 --> 00:12:27.870
and the bottom level.

00:12:27.870 --> 00:12:31.180
The category browsing
is really typical to

00:12:31.180 --> 00:12:34.960
organizational hierarchies, such
as albums, for example,

00:12:34.960 --> 00:12:37.060
or folders.

00:12:37.060 --> 00:12:39.680
And then the last level
is the detail level.

00:12:39.680 --> 00:12:43.870
And that is, of course, where
you complete a task, where you

00:12:43.870 --> 00:12:47.490
consume data, or where
you write an email.

00:12:47.490 --> 00:12:51.510
And of course, the screens are
very much depending on the

00:12:51.510 --> 00:12:54.280
data type that you're
dealing with here.

00:12:54.280 --> 00:12:59.890
But out of all of those three
levels, the top level is

00:12:59.890 --> 00:13:02.310
really the most important
one in terms of

00:13:02.310 --> 00:13:04.520
your structural decisions.

00:13:04.520 --> 00:13:07.250
Your choices here really dictate
how well users will

00:13:07.250 --> 00:13:11.900
find their core use cases
covered and can satisfy them

00:13:11.900 --> 00:13:14.230
going forward.

00:13:14.230 --> 00:13:17.980
The top level is really about
communication with your user,

00:13:17.980 --> 00:13:19.010
if you think about it.

00:13:19.010 --> 00:13:22.100
It's sort of your quick elevator
speech of what the

00:13:22.100 --> 00:13:22.880
purpose is.

00:13:22.880 --> 00:13:28.460
Like in this example, the data
of the screen quickly shows

00:13:28.460 --> 00:13:31.770
you, well, this is really
about telephony.

00:13:31.770 --> 00:13:33.850
I'm all about making
phone calls.

00:13:33.850 --> 00:13:37.970
But besides the purpose, it also
introduces the breadth of

00:13:37.970 --> 00:13:41.530
functionality, sort of
how wide your app is,

00:13:41.530 --> 00:13:43.210
what else can I do.

00:13:43.210 --> 00:13:45.990
And here the other facets, for
example, in the calling app

00:13:45.990 --> 00:13:47.440
are Call History.

00:13:47.440 --> 00:13:49.090
And there's also
the Phonebook.

00:13:49.090 --> 00:13:51.880
And I can immediately
see that.

00:13:51.880 --> 00:13:55.240
So this kind of information
should disclose itself as

00:13:55.240 --> 00:13:58.150
quickly as possible, so the
communication here really

00:13:58.150 --> 00:14:01.980
needs to be succinct and to the
point, because with all

00:14:01.980 --> 00:14:07.730
those apps out there in the Play
Store, people might give

00:14:07.730 --> 00:14:08.630
up on you quickly.

00:14:08.630 --> 00:14:12.720
If they don't see that, oh, I
can't really do with this app

00:14:12.720 --> 00:14:16.060
what I set out to do, they grab
a different one that does

00:14:16.060 --> 00:14:18.990
a better job of communicating.

00:14:18.990 --> 00:14:21.790
So always be mindful that you're
actually entering into

00:14:21.790 --> 00:14:26.170
a dialogue with the user on
the top level screen.

00:14:26.170 --> 00:14:28.520
So allowing the user to
explore the top level

00:14:28.520 --> 00:14:32.520
functionality is crucial to
making sure that all your use

00:14:32.520 --> 00:14:34.860
cases are covered, like
here, for example, in

00:14:34.860 --> 00:14:37.640
the current I/O app.

00:14:37.640 --> 00:14:40.810
Android supports different
established patterns to just

00:14:40.810 --> 00:14:45.170
do that-- to communicate what
you can do inside of an app

00:14:45.170 --> 00:14:48.260
and to switch between the
different facets of your app.

00:14:48.260 --> 00:14:52.200
Let's take a quick look at
what those patterns are.

00:14:52.200 --> 00:14:56.640
First up is the six-pack.

00:14:56.640 --> 00:14:58.340
We call it informally
the six-pack.

00:14:58.340 --> 00:15:02.340
It's essentially a menu screen
that is the sole screen at the

00:15:02.340 --> 00:15:04.540
top of your hierarchy.

00:15:04.540 --> 00:15:10.180
And structurally, people have
to navigate through the menu

00:15:10.180 --> 00:15:13.870
screen in order to get to the
deeper levels where they can

00:15:13.870 --> 00:15:15.920
then work on their task.

00:15:15.920 --> 00:15:19.350
So they always have to
traverse the screen.

00:15:19.350 --> 00:15:22.540
This can, of course, mean that
if you want to explore

00:15:22.540 --> 00:15:26.470
multiple facets or if you're not
quite sure where to go in

00:15:26.470 --> 00:15:31.320
order to [? met ?] your use
case, you can imagine that

00:15:31.320 --> 00:15:34.950
there might be a lot of yo-yoing
up and down could

00:15:34.950 --> 00:15:39.390
happen here, if I go to
[INAUDIBLE], down, up through

00:15:39.390 --> 00:15:43.520
the six-pack, down to the
flies, and so forth.

00:15:43.520 --> 00:15:47.200
So it's really a feasible way
of solving the top level

00:15:47.200 --> 00:15:48.400
navigation problem.

00:15:48.400 --> 00:15:51.370
It's sort of straightforward and
simple, and everything is

00:15:51.370 --> 00:15:55.710
focused on that one simple
choice of where to go next.

00:15:55.710 --> 00:15:58.340
And all the navigation choices
really disclose themselves

00:15:58.340 --> 00:16:01.190
immediately.

00:16:01.190 --> 00:16:04.740
But if you look at it, it's not
overly interesting to look

00:16:04.740 --> 00:16:08.010
at, because after a while,
people learn the

00:16:08.010 --> 00:16:09.420
structure of your app.

00:16:09.420 --> 00:16:11.250
And then they come
for the data.

00:16:11.250 --> 00:16:12.750
And there's no data
to be seen here.

00:16:12.750 --> 00:16:15.670
So you always have this speed
bump before you actually get

00:16:15.670 --> 00:16:18.030
to the interesting stuff.

00:16:18.030 --> 00:16:20.800
Also, this is not accessible
from lower level.

00:16:20.800 --> 00:16:23.430
So as soon as you navigate
away, you always have to

00:16:23.430 --> 00:16:25.670
navigate up in order to
switch to a different

00:16:25.670 --> 00:16:28.860
facet of your app.

00:16:28.860 --> 00:16:30.870
Next up is fixed tabs.

00:16:30.870 --> 00:16:34.710
And fixed tabs is really a
common pattern on Android.

00:16:34.710 --> 00:16:39.580
You can see that now we have
three screens in the top level

00:16:39.580 --> 00:16:40.305
side by side.

00:16:40.305 --> 00:16:43.880
And they're random access, so
I can press on any tab in

00:16:43.880 --> 00:16:45.360
order to navigate
there quickly.

00:16:45.360 --> 00:16:49.200
It's really fast
and efficient.

00:16:49.200 --> 00:16:51.770
Since the tabs are a bit out of
the way, you should always

00:16:51.770 --> 00:16:54.910
make sure that you support
side swiping to navigate

00:16:54.910 --> 00:16:56.310
between the top levels
quickly.

00:16:59.320 --> 00:17:05.330
But in summary, what's good
about fixed tabs is that

00:17:05.330 --> 00:17:07.310
they're really highly
explorable.

00:17:07.310 --> 00:17:15.099
You see all the choices of the
top level exposed in the tab.

00:17:15.099 --> 00:17:17.040
And it's ruthlessly efficient.

00:17:17.040 --> 00:17:19.390
So at any time, you can
jump back and forth.

00:17:19.390 --> 00:17:22.690
So in instances where you write
an app where you foresee

00:17:22.690 --> 00:17:26.200
people having to switch often
between your top level facets,

00:17:26.200 --> 00:17:28.780
this is really a good
control to use.

00:17:28.780 --> 00:17:33.480
Not so good is it's limited to
three items, because it takes

00:17:33.480 --> 00:17:39.320
up a horizontal space to
put items in there.

00:17:39.320 --> 00:17:42.150
It also takes up vertical real
estate, as you can see here.

00:17:42.150 --> 00:17:48.370
So if space is precious in your
data segment below, then

00:17:48.370 --> 00:17:52.480
be mindful that you're giving
away space by using the tab

00:17:52.480 --> 00:17:53.790
control up there.

00:17:53.790 --> 00:17:55.730
And again, it's also
not accessible

00:17:55.730 --> 00:17:57.440
from the lower levels.

00:17:57.440 --> 00:18:00.150
So as soon as you navigate away,
you have to navigate up

00:18:00.150 --> 00:18:02.555
to get back to the top
level navigation.

00:18:06.880 --> 00:18:09.700
RICHARD FULCHER: So Spinners are
a common alternative when

00:18:09.700 --> 00:18:13.530
you have more actions than can
fit comfortably into a tab.

00:18:13.530 --> 00:18:15.380
And so the Spinner
fits properly

00:18:15.380 --> 00:18:16.820
within the Action Bar.

00:18:16.820 --> 00:18:19.450
You touch upon it, and a menu
opens to give you all the

00:18:19.450 --> 00:18:20.220
destinations.

00:18:20.220 --> 00:18:22.390
So it can cover more than just
the two or three that would

00:18:22.390 --> 00:18:25.990
fit in a tab.

00:18:25.990 --> 00:18:29.410
It has some downsides as well.

00:18:29.410 --> 00:18:30.800
On the positive side,
it's compact.

00:18:30.800 --> 00:18:32.850
You get a lot of options.

00:18:32.850 --> 00:18:37.440
On the negative side, those top
level options still need

00:18:37.440 --> 00:18:39.200
to be navigated back up to.

00:18:39.200 --> 00:18:42.310
So I still need to return to
whatever level I'm presenting

00:18:42.310 --> 00:18:44.580
that Spinner at in order to
change and move to the

00:18:44.580 --> 00:18:46.680
different category.

00:18:46.680 --> 00:18:48.460
It's a little less efficient
than a tab.

00:18:48.460 --> 00:18:50.130
It's a touch and then
a subsequent

00:18:50.130 --> 00:18:51.680
touch to make the selection.

00:18:51.680 --> 00:18:54.620
It's a little less direct
in that sense.

00:18:54.620 --> 00:18:58.470
And importantly, you're not
revealing as much of the app

00:18:58.470 --> 00:19:01.190
structure when the Spinner
is collapsed.

00:19:01.190 --> 00:19:06.390
In an example like this where
it's types of vehicle that I

00:19:06.390 --> 00:19:08.540
might be shopping for, the
user has a good way of

00:19:08.540 --> 00:19:09.740
thinking about that set.

00:19:09.740 --> 00:19:12.250
They have an expectation of,
well, if it says sedans, maybe

00:19:12.250 --> 00:19:15.040
there are other things here that
are minivans and hybrids

00:19:15.040 --> 00:19:16.190
and things like that.

00:19:16.190 --> 00:19:19.890
That can be less true when the
functions are more disparate.

00:19:19.890 --> 00:19:23.240
If this category was called
favorites, do I assume that

00:19:23.240 --> 00:19:24.770
all is also available there?

00:19:24.770 --> 00:19:27.230
It can be a little unclear
for the user.

00:19:27.230 --> 00:19:31.060
So six-packs, tabs, Spinners
have all been in Android for

00:19:31.060 --> 00:19:31.600
quite awhile.

00:19:31.600 --> 00:19:33.670
And we have a new pattern
that's been introduced

00:19:33.670 --> 00:19:39.300
recently that we need to talk
about, and that's the

00:19:39.300 --> 00:19:42.270
Navigation Drawer.

00:19:42.270 --> 00:19:44.140
JENS NAGEL: And the Navigation
Drawer--

00:19:44.140 --> 00:19:46.860
you might say well, I've seen
that in a couple of Android

00:19:46.860 --> 00:19:49.640
apps already.

00:19:49.640 --> 00:19:51.690
It's really been a

00:19:51.690 --> 00:19:54.160
community-driven pattern so far.

00:19:54.160 --> 00:19:58.880
But we now took the Navigation
Drawer and formalized its use

00:19:58.880 --> 00:20:01.870
as part of the Android
Design Guide.

00:20:01.870 --> 00:20:04.610
So if you're interested in using
this pattern after the

00:20:04.610 --> 00:20:08.020
talk, head on over to the Style
Guide and take a look.

00:20:08.020 --> 00:20:11.750
There's also sample code
available and a good developer

00:20:11.750 --> 00:20:14.630
section to it.

00:20:14.630 --> 00:20:16.120
So what is the Navigation
Drawer?

00:20:16.120 --> 00:20:19.750
Essentially, the Navigation
Drawer is a menu panel of your

00:20:19.750 --> 00:20:21.640
app's most important screens.

00:20:21.640 --> 00:20:26.980
So it slides on top of your
content when you either tap on

00:20:26.980 --> 00:20:31.066
the application icon at the top
while it's decorated with

00:20:31.066 --> 00:20:35.805
the Navigation Drawer icon, or
you can also do what we call

00:20:35.805 --> 00:20:36.580
an edge swipe.

00:20:36.580 --> 00:20:39.530
From the very edge of the
screen, you can pull in the

00:20:39.530 --> 00:20:43.350
Navigation Drawer
from the left.

00:20:43.350 --> 00:20:46.330
The Navigation Drawer really
contains your, what we call,

00:20:46.330 --> 00:20:51.040
navigation hub-- so places that
users will likely visit

00:20:51.040 --> 00:20:52.350
frequently.

00:20:52.350 --> 00:20:55.270
Top level of use are always
navigation hubs.

00:20:55.270 --> 00:20:58.560
So you should always
include those.

00:20:58.560 --> 00:21:02.590
But now since the Navigation
Drawer is really a

00:21:02.590 --> 00:21:05.960
transitional element,
you can now also

00:21:05.960 --> 00:21:07.660
include lower level screens.

00:21:07.660 --> 00:21:10.670
So if you have particularly deep
apps, now you can take

00:21:10.670 --> 00:21:14.210
advantage of the fact that you
can bring up this menu from

00:21:14.210 --> 00:21:17.320
anywhere and provide links
to deeper level

00:21:17.320 --> 00:21:18.800
structures as well.

00:21:18.800 --> 00:21:22.730
So all screens that are
represented in the Navigation

00:21:22.730 --> 00:21:27.180
Drawer should actually be
decorated with the Navigation

00:21:27.180 --> 00:21:30.760
Drawer icon next to the
application icon.

00:21:30.760 --> 00:21:34.380
And that gives the signal I can
expand in here by tapping

00:21:34.380 --> 00:21:37.000
on the application icon.

00:21:37.000 --> 00:21:39.300
All other lower level screens
that are not represented in

00:21:39.300 --> 00:21:45.270
the Navigation Drawer retain the
classic up behavior that

00:21:45.270 --> 00:21:47.330
we've had in Android
for a while now.

00:21:50.400 --> 00:21:52.990
The good thing about Navigation
Drawer is also that

00:21:52.990 --> 00:21:56.160
it gives you a little bit more
space to organize your

00:21:56.160 --> 00:21:59.470
content, because it can also
hold more content.

00:21:59.470 --> 00:22:01.890
So there might be a need for you
to do something like this.

00:22:01.890 --> 00:22:06.380
So you can add icons,
for example.

00:22:06.380 --> 00:22:11.660
You can segment your menu
using dividers.

00:22:11.660 --> 00:22:14.040
You can also add things
such as counters.

00:22:14.040 --> 00:22:19.630
So for example, if the
corresponding screen has new

00:22:19.630 --> 00:22:22.650
updates, you could say, well,
you have three new messages in

00:22:22.650 --> 00:22:26.520
this particular screen
if you go there.

00:22:26.520 --> 00:22:29.470
Additionally, you can also
show collapsible items to

00:22:29.470 --> 00:22:32.460
organize lower level content
grouping, such as on the

00:22:32.460 --> 00:22:35.980
right, and allow the users to
hide them, which can come in

00:22:35.980 --> 00:22:40.040
handy if you have a lot of items
where a good range of

00:22:40.040 --> 00:22:44.900
them are subordinate to other
items in the Drawer.

00:22:44.900 --> 00:22:48.070
So in conclusion, what's good
about the Navigation Drawer,

00:22:48.070 --> 00:22:52.770
of course, is it can display
many views, probably more

00:22:52.770 --> 00:22:59.030
views than any other top level
switching mechanism that we

00:22:59.030 --> 00:23:00.090
talked about.

00:23:00.090 --> 00:23:01.830
It's also compact
when collapsed.

00:23:01.830 --> 00:23:05.090
So there's really not much UI
to it while its collapsed.

00:23:05.090 --> 00:23:07.830
Once in a while, you'll see the
little Navigation Drawer

00:23:07.830 --> 00:23:10.890
icon in the Action Bar.

00:23:10.890 --> 00:23:14.710
It can include lower level
screens, which is nice because

00:23:14.710 --> 00:23:19.850
now you can, if you have deep
apps, circumvent a lot of the

00:23:19.850 --> 00:23:22.855
navigation work to drill
into deeper levels.

00:23:22.855 --> 00:23:26.050
And it's, of course, accessible
from anywhere.

00:23:26.050 --> 00:23:29.230
Slight downside is, of course,
it's usually collapsed.

00:23:29.230 --> 00:23:31.450
So you have to open
it in order to see

00:23:31.450 --> 00:23:34.770
what's actually in it.

00:23:34.770 --> 00:23:38.760
So after we've discussed all
the different top level

00:23:38.760 --> 00:23:41.740
switching mechanisms, we want
to see where those patterns

00:23:41.740 --> 00:23:43.010
actually work best.

00:23:43.010 --> 00:23:45.610
And to do that, we want to
play a little game of

00:23:45.610 --> 00:23:47.250
What If with you.

00:23:47.250 --> 00:23:51.250
So what if some of our Google
Apps use different switching

00:23:51.250 --> 00:23:54.730
patterns and see if that
would work or not.

00:23:54.730 --> 00:23:58.580
And first up is Rich
with the Calendar.

00:23:58.580 --> 00:24:01.540
RICHARD FULCHER: So Calendar,
the app that many of you know

00:24:01.540 --> 00:24:05.990
and some of you love, some of
you hate, currently uses the

00:24:05.990 --> 00:24:09.080
Spinner as its top level
switching pattern--

00:24:09.080 --> 00:24:10.880
perfectly suitable
choice here.

00:24:10.880 --> 00:24:12.730
And the user has a very clear
understanding of the

00:24:12.730 --> 00:24:15.250
relationship between days
and weeks and months.

00:24:15.250 --> 00:24:17.720
So it's natural to expect those
other options that would

00:24:17.720 --> 00:24:18.900
be in the Spinner.

00:24:18.900 --> 00:24:19.890
It's very compact.

00:24:19.890 --> 00:24:21.370
Sits up at the top neatly.

00:24:21.370 --> 00:24:22.990
Titles the screen very nicely.

00:24:22.990 --> 00:24:25.650
It's a good choice.

00:24:25.650 --> 00:24:28.460
We could have the Calendar use
the Navigation Drawer.

00:24:28.460 --> 00:24:30.900
That would also be viable.

00:24:30.900 --> 00:24:33.620
It's similar in a lot of
ways to the Spinner.

00:24:33.620 --> 00:24:34.730
It still has statefulness.

00:24:34.730 --> 00:24:38.820
It still provides a specific
title to the display.

00:24:38.820 --> 00:24:40.820
I guess the one thing I'd
caution against here is it

00:24:40.820 --> 00:24:43.530
makes the Drawer feel a little
under-populated.

00:24:43.530 --> 00:24:45.670
It has those four options
within it.

00:24:45.670 --> 00:24:47.840
It's not likely to expand
to include more

00:24:47.840 --> 00:24:49.170
options in the future.

00:24:49.170 --> 00:24:49.900
There's a [INAUDIBLE]

00:24:49.900 --> 00:24:52.520
coming, but not much
more than that.

00:24:52.520 --> 00:24:55.060
And on a tablet or a larger
form factor, that's a fair

00:24:55.060 --> 00:24:57.210
amount of empty space that
you're creating, just to bring

00:24:57.210 --> 00:24:58.190
in this panel.

00:24:58.190 --> 00:25:01.120
But it would work.

00:25:01.120 --> 00:25:06.030
Tabs would be a poor choice
for a few reasons.

00:25:06.030 --> 00:25:09.460
One is that most Calendar users
fall into one camp or

00:25:09.460 --> 00:25:11.490
the other, kind of like our
Phone dialers before.

00:25:11.490 --> 00:25:14.340
You've got the people that are
very busy Calendar users, who

00:25:14.340 --> 00:25:15.650
live in the Day View.

00:25:15.650 --> 00:25:17.910
You've got other Calendar
users who have much more

00:25:17.910 --> 00:25:20.360
sparsely populated calendars,
and they live in the week or

00:25:20.360 --> 00:25:21.680
the month view.

00:25:21.680 --> 00:25:24.340
The tabs are a great tool
for when you're changing

00:25:24.340 --> 00:25:24.920
frequently.

00:25:24.920 --> 00:25:27.720
But that's not how most
people use a Calendar.

00:25:27.720 --> 00:25:29.720
And the downsides go
a little further.

00:25:29.720 --> 00:25:31.900
By putting the tabs up there,
you're doubling the amount of

00:25:31.900 --> 00:25:36.210
space that you're taking up for
the top level UI structure

00:25:36.210 --> 00:25:38.150
above the user's actual data.

00:25:38.150 --> 00:25:40.460
You're reducing the amount of
content the user can see about

00:25:40.460 --> 00:25:42.570
their Calendar.

00:25:42.570 --> 00:25:45.200
And then, very importantly,
you introduce this very

00:25:45.200 --> 00:25:47.635
unfavorable interaction
with the gestures.

00:25:47.635 --> 00:25:50.120
The user might expect,
oh, I can swipe from

00:25:50.120 --> 00:25:51.100
day to day to day.

00:25:51.100 --> 00:25:53.820
And that's a really natural
thing to be able to do.

00:25:53.820 --> 00:25:57.000
But once tabs are in place, you
have this conflict between

00:25:57.000 --> 00:25:58.970
oh, am I my swiping
from day to week?

00:25:58.970 --> 00:26:00.910
Or am I swiping from
day to day?

00:26:00.910 --> 00:26:03.910
And you have to make a
resolution for that, which may

00:26:03.910 --> 00:26:06.520
be unexpected to the user given
the context that you're

00:26:06.520 --> 00:26:08.910
bringing to it.

00:26:08.910 --> 00:26:13.110
And then the six-pack or the
dashboard is similarly not

00:26:13.110 --> 00:26:14.230
well-suited.

00:26:14.230 --> 00:26:17.800
And you can put all of those
categories at the top, but

00:26:17.800 --> 00:26:20.380
again, most users pick one
and stick with it.

00:26:20.380 --> 00:26:22.290
They don't have to switch, and
they certainly don't want to

00:26:22.290 --> 00:26:25.220
be asked to switch every time
they enter the application.

00:26:25.220 --> 00:26:27.020
Jens mentioned the speed
bump before.

00:26:27.020 --> 00:26:29.710
That's what this feels
like when you use it.

00:26:29.710 --> 00:26:32.870
It also just pushes the user's
data down lower.

00:26:32.870 --> 00:26:34.640
I'm not seeing any of
my appointments when

00:26:34.640 --> 00:26:35.530
I first come in.

00:26:35.530 --> 00:26:38.110
And there are ways you could
jerry-rig that in and just put

00:26:38.110 --> 00:26:39.700
the first few appointments
there.

00:26:39.700 --> 00:26:42.600
But usually, that's but
not enough context.

00:26:42.600 --> 00:26:44.410
That's the kind of thing that
a widget on your home screen

00:26:44.410 --> 00:26:45.980
is great for, or
a notification.

00:26:45.980 --> 00:26:51.052
But the app should get to more
of the content more rapidly.

00:26:51.052 --> 00:26:54.620
JENS NAGEL: Next up is Clock,
a relatively recent

00:26:54.620 --> 00:26:57.050
application for Android.

00:26:57.050 --> 00:27:00.640
So Clock uses tabs and
efficiently communicates the

00:27:00.640 --> 00:27:02.160
other facets of the app.

00:27:02.160 --> 00:27:06.050
So it gives you the heads up
that it's really more than the

00:27:06.050 --> 00:27:10.100
simple Clock going on here,
because it highlights that

00:27:10.100 --> 00:27:12.570
there is a timer, and there's
also a stopwatch.

00:27:12.570 --> 00:27:15.010
So it does a good job
at communicating.

00:27:15.010 --> 00:27:18.910
Since the data communicates the
purpose of the app nicely,

00:27:18.910 --> 00:27:21.420
we really don't need a
traditional action bar that

00:27:21.420 --> 00:27:24.040
tells us the name of the app.

00:27:24.040 --> 00:27:27.490
As soon as you open it, you
know this is a Clock.

00:27:27.490 --> 00:27:32.150
Instead, the Center View, the
Clock View, actually uses a

00:27:32.150 --> 00:27:36.340
split action bar and displays
pertinent actions for that

00:27:36.340 --> 00:27:39.590
particular screen at the bottom,
which also nicely

00:27:39.590 --> 00:27:42.550
visually balances
out that screen.

00:27:42.550 --> 00:27:45.720
Vertical space is not a problem,
so using the split

00:27:45.720 --> 00:27:49.920
action bar is actually great.

00:27:49.920 --> 00:27:54.110
Below the top level, as a small
detail here, we talked

00:27:54.110 --> 00:27:56.350
about the split action bar, and
that gives you access to

00:27:56.350 --> 00:27:57.670
two screens.

00:27:57.670 --> 00:28:00.250
One of them is the City
Select, and that is a

00:28:00.250 --> 00:28:05.310
configuration screen to let you
turn the Clock screen into

00:28:05.310 --> 00:28:08.330
your personal world clock by
selecting different cities

00:28:08.330 --> 00:28:09.840
around the world.

00:28:09.840 --> 00:28:14.190
So that is really a
customization of that

00:28:14.190 --> 00:28:15.040
particular screen.

00:28:15.040 --> 00:28:17.120
So therefore, being subordinate
to the Clock

00:28:17.120 --> 00:28:19.120
screen makes a lot of sense.

00:28:19.120 --> 00:28:22.860
Next to it, though, we have
the Alarm screen.

00:28:22.860 --> 00:28:25.160
And that really feels more
like a place of passage.

00:28:25.160 --> 00:28:27.740
You could really imagine pulling
that into the top

00:28:27.740 --> 00:28:30.850
level here as well if we
wouldn't be going past the

00:28:30.850 --> 00:28:34.540
threshold of the items
that we would like to

00:28:34.540 --> 00:28:39.130
see in the tab control.

00:28:39.130 --> 00:28:40.530
So let's keep that in
mind when we look

00:28:40.530 --> 00:28:41.960
at the other options.

00:28:41.960 --> 00:28:43.970
So for example, if Clock
used Spinner, it

00:28:43.970 --> 00:28:46.640
would be totally fine.

00:28:46.640 --> 00:28:48.870
Some of the options
wouldn't disclose

00:28:48.870 --> 00:28:51.080
themselves as readily.

00:28:51.080 --> 00:28:55.230
But we could pull in alarms as
the fourth item into the top

00:28:55.230 --> 00:28:56.780
level here as well.

00:28:56.780 --> 00:29:00.430
Switching between the facet
takes a little bit more work.

00:29:00.430 --> 00:29:05.280
And now we're introducing text
labels inside of the action

00:29:05.280 --> 00:29:06.100
bar at the top.

00:29:06.100 --> 00:29:09.770
And that detracts a little bit
further from the aesthetic

00:29:09.770 --> 00:29:13.480
simplicity of the
original design.

00:29:13.480 --> 00:29:18.630
The Navigation Drawer is a very
similar story to Spinner

00:29:18.630 --> 00:29:21.980
You can, again, pull in alarms,
but you, again, have

00:29:21.980 --> 00:29:24.190
more navigational effort.

00:29:24.190 --> 00:29:30.040
The new options that you have
around Timer and Stopwatch

00:29:30.040 --> 00:29:32.920
don't disclose themselves,
necessarily, until you open

00:29:32.920 --> 00:29:34.170
the Drawer.

00:29:35.890 --> 00:29:41.610
So in hindsight, if you put all
three of them aside, all

00:29:41.610 --> 00:29:46.530
navigation mechanisms are
sound and work OK.

00:29:46.530 --> 00:29:49.650
But the visual balance and
simplicity achieved by the

00:29:49.650 --> 00:29:53.470
tabs is really what makes
this a winner.

00:29:57.790 --> 00:30:01.200
RICHARD FULCHER: Bachelor number
three is the Gallery.

00:30:01.200 --> 00:30:03.580
Gallery uses a Spinner right
now, although it uses it in a

00:30:03.580 --> 00:30:05.670
slightly different way
than Calendar does.

00:30:05.670 --> 00:30:09.610
It's more of choosing which way
you want to view the same

00:30:09.610 --> 00:30:11.070
set of data.

00:30:11.070 --> 00:30:13.260
It's going to be a set of
photos collected in some

00:30:13.260 --> 00:30:14.000
different ways.

00:30:14.000 --> 00:30:15.900
And you're just choosing,
is it by album?

00:30:15.900 --> 00:30:21.600
Is it by time or location or
other facets such as that?

00:30:21.600 --> 00:30:23.360
That works well.

00:30:23.360 --> 00:30:25.930
We could use a Navigation
drawer.

00:30:25.930 --> 00:30:27.460
And it's an interesting
pattern to think

00:30:27.460 --> 00:30:28.630
about in this case.

00:30:28.630 --> 00:30:31.010
You could just do the very
basic thing, where you do

00:30:31.010 --> 00:30:32.800
those same top level categories,
and you can

00:30:32.800 --> 00:30:34.440
present them in the Drawer.

00:30:34.440 --> 00:30:35.860
That works.

00:30:35.860 --> 00:30:38.510
You could push it a little
further, if you wanted.

00:30:38.510 --> 00:30:40.660
You can imagine making those
categories in and of

00:30:40.660 --> 00:30:41.820
themselves expandable.

00:30:41.820 --> 00:30:44.790
So that, within albums, I could
do my navigating for

00:30:44.790 --> 00:30:47.250
which particular album I'd
like to move into.

00:30:47.250 --> 00:30:48.850
But I'll caution
you about that.

00:30:48.850 --> 00:30:52.592
At this point, you're
translating the way that you

00:30:52.592 --> 00:30:55.870
would present that content just
to fit the pattern, where

00:30:55.870 --> 00:30:58.940
using Spinners, you would get
thumbnails that represent what

00:30:58.940 --> 00:31:00.940
those albums are and what
photos are inside it.

00:31:00.940 --> 00:31:04.580
Now, you've just changed the
same albums into text labels.

00:31:04.580 --> 00:31:06.390
I think that's probably working
against what you're

00:31:06.390 --> 00:31:08.470
trying to achieve in a gallery
app, which is all about

00:31:08.470 --> 00:31:10.640
browsing that content
and just getting all

00:31:10.640 --> 00:31:11.890
those emotional triggers.

00:31:17.230 --> 00:31:20.710
Tabs wouldn't work
all that well.

00:31:20.710 --> 00:31:24.070
You have too many things
to pack into the tab.

00:31:24.070 --> 00:31:26.520
You have the similar constraints
about the gesture

00:31:26.520 --> 00:31:29.980
that we saw on the Calendar,
where I want to pan my photos,

00:31:29.980 --> 00:31:32.660
but now I'm panning through
tabs, and now I got to make my

00:31:32.660 --> 00:31:34.710
photos go vertically.

00:31:34.710 --> 00:31:37.850
And the real estate crunch
is especially bad here.

00:31:37.850 --> 00:31:39.740
You're packing in more space.

00:31:39.740 --> 00:31:41.510
Now, I have smaller photos.

00:31:41.510 --> 00:31:44.780
Now, I'm just not getting that
rich response to it.

00:31:44.780 --> 00:31:46.950
It may seem like it's a
small amount of space.

00:31:46.950 --> 00:31:49.580
It's only 48 DIPs.

00:31:49.580 --> 00:31:51.340
But it makes an impact
in your layout.

00:31:51.340 --> 00:31:52.940
And it can have a really
dramatic impact on the

00:31:52.940 --> 00:31:57.490
experience that you get when you
look at content like this.

00:31:57.490 --> 00:32:02.520
JENS NAGEL: So last up this
Drive, which is Google's file

00:32:02.520 --> 00:32:06.470
cloud storage, as most
of you will know.

00:32:06.470 --> 00:32:10.450
Drive made an interesting choice
to use the action bar

00:32:10.450 --> 00:32:13.620
Spinner for switching
accounts.

00:32:13.620 --> 00:32:15.870
So this is totally fine.

00:32:15.870 --> 00:32:18.590
And we do this in actually
a couple of apps.

00:32:18.590 --> 00:32:21.720
So if you, as a developer, feel
that account switching is

00:32:21.720 --> 00:32:25.390
a relatively frequent occurrence
in your app, then

00:32:25.390 --> 00:32:28.470
putting it into the action bar
into the Spinner control at

00:32:28.470 --> 00:32:30.570
the top level is
actually good.

00:32:30.570 --> 00:32:34.230
But that sort of limits our
choices of what we can do

00:32:34.230 --> 00:32:36.170
around the top level
switching problem.

00:32:36.170 --> 00:32:41.240
And the way that Drive solved
it, they basically exposed the

00:32:41.240 --> 00:32:45.700
top level of your file hierarchy
inside of the

00:32:45.700 --> 00:32:47.250
content area.

00:32:47.250 --> 00:32:50.350
This is not really the top level
of your file hierarchy,

00:32:50.350 --> 00:32:52.030
because they are just
static links.

00:32:52.030 --> 00:32:53.430
It's not your data.

00:32:53.430 --> 00:32:56.260
So essentially, it's a modified
six-pack that we

00:32:56.260 --> 00:32:58.940
looked at, at the
very beginning.

00:32:58.940 --> 00:33:01.260
We have no access to
actual data here.

00:33:01.260 --> 00:33:04.320
It sort of makes this
a meh solution.

00:33:04.320 --> 00:33:07.520
It would be nicer if we could
actually do something like

00:33:07.520 --> 00:33:11.840
this, where we can get direct
access to the data

00:33:11.840 --> 00:33:14.350
as we open the app.

00:33:14.350 --> 00:33:16.950
Here, we're using the
modified Spinner.

00:33:16.950 --> 00:33:18.950
And we've done that
in the past.

00:33:18.950 --> 00:33:23.310
And for example, Gmail uses a
similar mechanism, where one

00:33:23.310 --> 00:33:26.410
Spinner actually controls
account selection but also

00:33:26.410 --> 00:33:30.200
does top level switching.

00:33:30.200 --> 00:33:33.570
It dilutes a little bit what
a Spinner really should be.

00:33:33.570 --> 00:33:36.250
Really, a Spinner should
be setting item

00:33:36.250 --> 00:33:38.160
with a single focus.

00:33:38.160 --> 00:33:41.150
So again, it's not super.

00:33:41.150 --> 00:33:43.640
But we're getting closer,
because now we can see data,

00:33:43.640 --> 00:33:44.790
which is nice.

00:33:44.790 --> 00:33:47.490
What if we used the
Navigation Drawer?

00:33:47.490 --> 00:33:50.590
Now, this would, for Drive,
really be an excellent choice,

00:33:50.590 --> 00:33:55.190
because now we can, again,
show data immediately.

00:33:55.190 --> 00:33:58.560
And the top level navigation and
account selection now can

00:33:58.560 --> 00:34:01.280
co-exist in the same Drawer.

00:34:01.280 --> 00:34:05.750
And we could even give direct
access to certain folders that

00:34:05.750 --> 00:34:09.969
maybe the user has starred and
surfaced as particularly

00:34:09.969 --> 00:34:11.449
important to them.

00:34:11.449 --> 00:34:14.330
So probably the best
solution for Drive.

00:34:16.920 --> 00:34:19.810
We want to, in closing, spend
a little bit of time to talk

00:34:19.810 --> 00:34:22.980
about challenges that
particularly developers

00:34:22.980 --> 00:34:27.739
encounter as their
apps evolve.

00:34:27.739 --> 00:34:31.610
So if you have an app out in the
Play Store, you know that

00:34:31.610 --> 00:34:34.250
over the lifespan, you add
a lot of functionality.

00:34:34.250 --> 00:34:38.429
You add a lot of new data
and features to it.

00:34:38.429 --> 00:34:40.719
And you should always be mindful
of the structural

00:34:40.719 --> 00:34:43.659
impact that it actually might
have on your app.

00:34:43.659 --> 00:34:46.770
Let's go through a quick
example here.

00:34:46.770 --> 00:34:49.750
Imagine you build a really
nice, simple and focused

00:34:49.750 --> 00:34:50.719
sports app.

00:34:50.719 --> 00:34:53.750
And what it does, it covers
three kinds of sports, because

00:34:53.750 --> 00:34:58.360
there are big three US sports at
the time that you were most

00:34:58.360 --> 00:35:00.290
interested in.

00:35:00.290 --> 00:35:02.540
And you can here, switch
between the sports.

00:35:02.540 --> 00:35:03.910
You can see the latest scores.

00:35:03.910 --> 00:35:08.550
You tap on the score and see
the detail of the game.

00:35:08.550 --> 00:35:09.640
Really simple.

00:35:09.640 --> 00:35:11.950
No need for settings, nothing.

00:35:11.950 --> 00:35:13.350
Looks great.

00:35:13.350 --> 00:35:15.300
This is sort of what the
structure looks like-- three

00:35:15.300 --> 00:35:19.740
sports on top, and then they all
point to one screen that

00:35:19.740 --> 00:35:24.420
shows the actual game data for
something that you selected at

00:35:24.420 --> 00:35:26.890
the top level.

00:35:26.890 --> 00:35:31.320
People generally love your app
for its simplicity, but they

00:35:31.320 --> 00:35:33.580
also ask for change.

00:35:33.580 --> 00:35:35.430
RICHARD FULCHER: Once you launch
the app, you're going

00:35:35.430 --> 00:35:36.980
to get feedback from users.

00:35:36.980 --> 00:35:39.170
And that's true if you're
collecting it yourself from

00:35:39.170 --> 00:35:40.720
within your application.

00:35:40.720 --> 00:35:43.200
Maybe you're following some of
the agile research processes

00:35:43.200 --> 00:35:44.820
from the prior talk.

00:35:44.820 --> 00:35:47.340
Or maybe you're just reading
the always politely-worded

00:35:47.340 --> 00:35:51.060
comments or reviews left
on the Play Store.

00:35:51.060 --> 00:35:54.240
So you might get things like,
Jens, it's Stanley Cup season.

00:35:54.240 --> 00:35:57.890
Where are my hockey stats?

00:35:57.890 --> 00:36:00.360
JENS NAGEL: Let's assume if I
was a designer and I listened

00:36:00.360 --> 00:36:04.060
to all the feedback, this could
be what my laundry list

00:36:04.060 --> 00:36:05.890
looks like of things to do.

00:36:05.890 --> 00:36:09.030
So I might want to add hockey
and soccer as new sports.

00:36:09.030 --> 00:36:12.520
I want to segment sports that
I already have into college

00:36:12.520 --> 00:36:15.550
and pro, because there's a lot
of college fans out there that

00:36:15.550 --> 00:36:17.690
asked for that function.

00:36:17.690 --> 00:36:20.670
People asked for a place where
they can actually customize

00:36:20.670 --> 00:36:24.130
one screen to see their favorite
teams across sports.

00:36:24.130 --> 00:36:27.290
There's requests for live score
notification for their

00:36:27.290 --> 00:36:30.810
favorite teams, so that they
get a notification on their

00:36:30.810 --> 00:36:34.480
phone once a score
actually changes.

00:36:34.480 --> 00:36:38.110
And in consequence, we need
a new place where we can

00:36:38.110 --> 00:36:42.290
actually set up the
notifications as well as the

00:36:42.290 --> 00:36:44.940
favorite teams.

00:36:44.940 --> 00:36:49.840
So a first impulse is often to
take all that functionality

00:36:49.840 --> 00:36:53.610
and pilot on top of your
existing top level navigation,

00:36:53.610 --> 00:36:56.390
because so far, people
actually like

00:36:56.390 --> 00:36:57.760
what you've been doing.

00:36:57.760 --> 00:37:01.290
And nothing really technically
prevents you from expanding

00:37:01.290 --> 00:37:04.430
the tabs up there by
so many options.

00:37:04.430 --> 00:37:05.680
It actually works.

00:37:09.360 --> 00:37:12.570
And this is actually what you
would be ending up with by

00:37:12.570 --> 00:37:16.310
just adding new features to
the app in the existing UI

00:37:16.310 --> 00:37:17.120
infrastructure.

00:37:17.120 --> 00:37:20.110
And let's see, are we
happy with this?

00:37:20.110 --> 00:37:24.590
Let's look at a couple
of problem areas.

00:37:24.590 --> 00:37:27.910
First off, if I like NFL
football and soccer, those

00:37:27.910 --> 00:37:30.010
screens are now six
swipes apart.

00:37:30.010 --> 00:37:32.220
So it's not really that
random [? access-y ?]

00:37:32.220 --> 00:37:32.770
anymore.

00:37:32.770 --> 00:37:36.400
It's not very speedy
or efficient.

00:37:36.400 --> 00:37:38.330
Next problem is glancability.

00:37:38.330 --> 00:37:42.740
If I open this for the first
time, what I see is my team's

00:37:42.740 --> 00:37:45.760
NFL football and
NCAA football.

00:37:49.160 --> 00:37:51.950
Question is, do people discover
that there's more

00:37:51.950 --> 00:37:52.630
hiding there?

00:37:52.630 --> 00:37:55.100
Because right now, all the
options that we added are not

00:37:55.100 --> 00:37:56.730
disclosing themselves.

00:37:56.730 --> 00:37:59.150
So people might look at
this and say, well,

00:37:59.150 --> 00:38:00.070
I'm a hockey fan.

00:38:00.070 --> 00:38:03.310
I don't like football, so
I go to a different app.

00:38:03.310 --> 00:38:07.120
We are at least at risk that
people will not discover all

00:38:07.120 --> 00:38:10.010
the functionality that
we've added.

00:38:10.010 --> 00:38:11.820
Next one is settings.

00:38:11.820 --> 00:38:14.910
So we needed to add some
settings in order to manage

00:38:14.910 --> 00:38:21.180
our notifications and
my favorite teams.

00:38:21.180 --> 00:38:23.900
And compared to the other top
level items, Settings is not

00:38:23.900 --> 00:38:25.390
really an important place.

00:38:25.390 --> 00:38:28.280
You don't want people to
traverse Settings if they

00:38:28.280 --> 00:38:31.880
don't actually want
to go there.

00:38:31.880 --> 00:38:34.610
So it really doesn't belong
in the top level.

00:38:34.610 --> 00:38:37.970
I should have quick access to
it when I need it, but it

00:38:37.970 --> 00:38:40.500
shouldn't be part of my
top level structure.

00:38:40.500 --> 00:38:43.780
So the way how we usually solve
that in Android is you

00:38:43.780 --> 00:38:47.340
have an action bar
with overflow.

00:38:47.340 --> 00:38:51.120
And inside of the overflow
settings, there's an expected

00:38:51.120 --> 00:38:53.570
item where users will
look for it.

00:38:53.570 --> 00:38:57.730
And that let's me quickly
dive in and out of it.

00:38:57.730 --> 00:39:00.195
Wherever I am in the app,
it's always available.

00:39:02.770 --> 00:39:07.800
So in putting all those problems
together and in

00:39:07.800 --> 00:39:10.880
perspective, a better choice
would probably here, again, be

00:39:10.880 --> 00:39:13.770
something like a Navigation
Drawer, where you have

00:39:13.770 --> 00:39:17.660
quicker, more efficient
top level navigation.

00:39:17.660 --> 00:39:20.680
Your entire content is glancable
once you open it,

00:39:20.680 --> 00:39:23.770
because there's a lot of space
for all the different items

00:39:23.770 --> 00:39:25.870
that I've added.

00:39:25.870 --> 00:39:30.250
It reflects the segmentation
between pro and college sports

00:39:30.250 --> 00:39:35.090
nicely by putting it into
this collapsible item.

00:39:35.090 --> 00:39:36.920
And its future-proof.

00:39:36.920 --> 00:39:40.660
So this item is designed to
hold a lot of different

00:39:40.660 --> 00:39:42.280
navigation items.

00:39:42.280 --> 00:39:45.870
So as you expand your
application in the future,

00:39:45.870 --> 00:39:51.870
it's made for taking all that
new functionality that you

00:39:51.870 --> 00:39:53.120
will be adding.

00:39:56.030 --> 00:39:58.570
RICHARD FULCHER: So just in
closing, three points.

00:39:58.570 --> 00:40:00.430
First, you've got a ton of
different options you

00:40:00.430 --> 00:40:02.020
can pick from here.

00:40:02.020 --> 00:40:03.630
But they're all suited for
different purposes.

00:40:03.630 --> 00:40:05.440
And hopefully, we've
helped teach you a

00:40:05.440 --> 00:40:07.270
little bit about that.

00:40:07.270 --> 00:40:09.420
You really need to anticipate
how your

00:40:09.420 --> 00:40:11.730
application is going to evolve.

00:40:11.730 --> 00:40:13.210
Don't design for the V1.

00:40:13.210 --> 00:40:15.160
Design for V2, V3, V4.

00:40:15.160 --> 00:40:16.580
Be thinking of the long
view when you

00:40:16.580 --> 00:40:19.170
decide your app structure.

00:40:19.170 --> 00:40:21.660
And then finally, challenge
yourself.

00:40:21.660 --> 00:40:23.450
As you leave today, think
about, for the apps that

00:40:23.450 --> 00:40:26.350
you've developed, if you've
used one of the different

00:40:26.350 --> 00:40:28.800
patterns that we've shown today,
would it be better?

00:40:28.800 --> 00:40:31.080
Would it be worse?

00:40:31.080 --> 00:40:33.010
Thanks very much for
your time today.

00:40:33.010 --> 00:40:40.480
[APPLAUSE]

00:40:40.480 --> 00:40:41.750
RICHARD FULCHER: We'll
take questions at the

00:40:41.750 --> 00:40:43.060
Office Hours upstairs.

00:40:43.060 --> 00:40:43.795
And enjoy the rest

00:40:43.795 --> 00:40:45.840
of your I/O. 

