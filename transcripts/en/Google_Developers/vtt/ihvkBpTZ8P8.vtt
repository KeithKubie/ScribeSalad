WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.338
[MUSIC PLAYING]

00:00:08.338 --> 00:00:08.838
[APPLAUSE]

00:00:08.838 --> 00:00:10.420
BRETT MORGAN: Good
afternoon, all.

00:00:10.420 --> 00:00:13.780
And for those following along on
YouTube, at home, good morning,

00:00:13.780 --> 00:00:16.690
good afternoon, good evening.

00:00:16.690 --> 00:00:17.500
I'm Brett Morgan.

00:00:17.500 --> 00:00:19.150
I work on the Developer
Relations Team

00:00:19.150 --> 00:00:23.080
for Google Maps based
in Sydney, Australia.

00:00:23.080 --> 00:00:27.160
That means that I do things
like write sample apps,

00:00:27.160 --> 00:00:31.230
write tutorials, codelabs,
and all that sort of thing.

00:00:31.230 --> 00:00:34.880
As I said, I look
after Google Maps APIs.

00:00:34.880 --> 00:00:38.180
Google Maps API is the oldest
API surface that Google has,

00:00:38.180 --> 00:00:39.660
over 10 years old.

00:00:39.660 --> 00:00:41.060
We have a lot of APIs.

00:00:41.060 --> 00:00:44.180
We have a lot of
interesting functionality

00:00:44.180 --> 00:00:46.630
that you can use in
your applications.

00:00:46.630 --> 00:00:50.030
One of the things that we hear
from developers, like yourself,

00:00:50.030 --> 00:00:53.110
is that it's great, you've
got all these APIs, got

00:00:53.110 --> 00:00:56.030
this wonderful documentation,
tells what the arguments are,

00:00:56.030 --> 00:00:57.260
tells what the result is.

00:00:57.260 --> 00:01:01.340
But how do I, as a developer,
take all these APIs, glue

00:01:01.340 --> 00:01:03.950
them together to
create something

00:01:03.950 --> 00:01:06.210
that solves a problem?

00:01:06.210 --> 00:01:08.020
So the GO developers API--

00:01:08.020 --> 00:01:10.400
GO Developer Relations
Team in Sydney

00:01:10.400 --> 00:01:13.460
came up with an idea
of making solutions

00:01:13.460 --> 00:01:18.930
that show you end to end
how to solve a problem.

00:01:18.930 --> 00:01:21.890
So I just want to give you a
little bit of history here.

00:01:21.890 --> 00:01:25.160
Every year we have an
annual developer conference

00:01:25.160 --> 00:01:28.460
called Google I/O.
And a couple of years

00:01:28.460 --> 00:01:31.460
ago, we decided to move
from downtown San Francisco

00:01:31.460 --> 00:01:34.460
where it had been at Moscone
for quite a few years

00:01:34.460 --> 00:01:41.540
into Google's backyard at
Shoreline Amphitheater.

00:01:41.540 --> 00:01:43.141
Now, this was
great, bigger venue,

00:01:43.141 --> 00:01:44.390
means we can do bigger things.

00:01:44.390 --> 00:01:46.730
We can have more
people come along.

00:01:46.730 --> 00:01:52.280
But how do you take 7,000
people from a bunch of hotels

00:01:52.280 --> 00:01:56.990
all over Southbay and get
them into this one event?

00:01:56.990 --> 00:01:59.390
Well, there's a pretty
easy answer to that.

00:01:59.390 --> 00:02:02.630
You rent a fleet of buses and
move people around with them.

00:02:02.630 --> 00:02:05.270
But this raised an interesting
opportunity for those of us

00:02:05.270 --> 00:02:08.610
on our GO Developer
Relations Team.

00:02:08.610 --> 00:02:15.840
How can we best utilize Google
Maps APIs to show people

00:02:15.840 --> 00:02:18.510
where their buses
are and how long it's

00:02:18.510 --> 00:02:22.500
going to take them to get
between different points?

00:02:22.500 --> 00:02:24.930
So Steve down the front
row here and myself

00:02:24.930 --> 00:02:26.610
and a bunch of
others put together

00:02:26.610 --> 00:02:31.380
a solution that actually
did this, showed attendees

00:02:31.380 --> 00:02:35.220
at Google I/O the real-time
location of their buses

00:02:35.220 --> 00:02:38.670
and also showed them
timetables of how long

00:02:38.670 --> 00:02:41.265
the bus is going to take to
get them back to their hotel.

00:02:44.597 --> 00:02:46.180
So what I'm going
to do this afternoon

00:02:46.180 --> 00:02:47.770
is walk you through
that solution.

00:02:47.770 --> 00:02:50.310
But a quick little
note here, what

00:02:50.310 --> 00:02:52.690
we're building is
actually an asset tracker,

00:02:52.690 --> 00:02:55.510
and that one is specifically
called out in our terms.

00:02:55.510 --> 00:02:58.780
So before you go ahead and
implement an asset tracker,

00:02:58.780 --> 00:03:01.829
please have a chat to our
sales staff about the premium

00:03:01.829 --> 00:03:03.370
plan because you're
going to need it.

00:03:05.780 --> 00:03:11.520
Let's have an overview of the
Transport Tracker solution.

00:03:11.520 --> 00:03:13.940
So here's the architecture.

00:03:13.940 --> 00:03:16.790
For those of you who attended
the Fletcher and Firebase talk

00:03:16.790 --> 00:03:19.850
yesterday, this probably
looks a little bit familiar.

00:03:19.850 --> 00:03:23.180
Turns out Firebase
encourages you

00:03:23.180 --> 00:03:27.150
to actually build in this way,
and it does a very good job.

00:03:27.150 --> 00:03:28.650
So what do we have here?

00:03:28.650 --> 00:03:30.108
Well, the first
part of the problem

00:03:30.108 --> 00:03:32.990
is we have 30-odd buses
running around Southbay,

00:03:32.990 --> 00:03:34.850
and we want to know
where they are.

00:03:34.850 --> 00:03:37.850
So what we did is we
put an Android phone

00:03:37.850 --> 00:03:41.420
on each bus with a
little suction cup holder

00:03:41.420 --> 00:03:44.990
to keep the phone out of the way
of the driver and a USB power

00:03:44.990 --> 00:03:50.570
adapter, and that had a
custom application on it which

00:03:50.570 --> 00:03:54.480
was then turning around
and publishing to Firebase

00:03:54.480 --> 00:03:57.540
the location of the bus.

00:03:57.540 --> 00:03:59.020
Firebase is wonderful.

00:03:59.020 --> 00:04:00.390
It turns around and--

00:04:00.390 --> 00:04:02.520
when you push some new
information into it,

00:04:02.520 --> 00:04:04.950
it turns around and
notifies anything

00:04:04.950 --> 00:04:06.760
that's listening on that path.

00:04:06.760 --> 00:04:08.200
Whoops, wrong button.

00:04:08.200 --> 00:04:09.320
That button.

00:04:09.320 --> 00:04:12.300
OK, so following
on from that, we

00:04:12.300 --> 00:04:16.050
have a Node.js process running
in a Google Compute Engine

00:04:16.050 --> 00:04:19.079
server in the cloud
actually being

00:04:19.079 --> 00:04:22.510
notified that these buses
move from here to here.

00:04:22.510 --> 00:04:25.080
That process then
cleans up that data

00:04:25.080 --> 00:04:27.120
and writes the
cleaned-up location

00:04:27.120 --> 00:04:29.280
of the bus along with
timetable information,

00:04:29.280 --> 00:04:32.040
various other things
back into Firebase

00:04:32.040 --> 00:04:38.150
in a different location, which
then turns around and changes

00:04:38.150 --> 00:04:39.150
the display.

00:04:39.150 --> 00:04:43.370
So at Google I/O we had big
60-inch LCD monitors that had,

00:04:43.370 --> 00:04:46.340
as you saw previously, the
real-time location of the buses

00:04:46.340 --> 00:04:48.810
and timetable information.

00:04:48.810 --> 00:04:51.020
So this is the overview
of the solution

00:04:51.020 --> 00:04:54.950
I'm presenting this afternoon.

00:04:54.950 --> 00:04:56.610
So let's dive in.

00:04:56.610 --> 00:04:59.150
Let's start with
the first component.

00:04:59.150 --> 00:05:01.250
These are the Android phones.

00:05:01.250 --> 00:05:04.400
How do we get the accurate
location of the phone?

00:05:04.400 --> 00:05:06.800
Using Android APIs.

00:05:06.800 --> 00:05:09.830
Well, thanks to Steve's
codelab, which some of you

00:05:09.830 --> 00:05:11.840
probably had a go at
yesterday afternoon--

00:05:11.840 --> 00:05:13.923
but if you're following
me along on YouTube or you

00:05:13.923 --> 00:05:15.740
didn't, I'll have
links at the end

00:05:15.740 --> 00:05:21.134
of the talk that actually link
you to the real-time codelab.

00:05:21.134 --> 00:05:22.550
But this-- I just
want to show you

00:05:22.550 --> 00:05:25.850
the core component of that
codelab that drives the ability

00:05:25.850 --> 00:05:27.080
to track the location.

00:05:30.180 --> 00:05:31.710
So what we're
going to start with

00:05:31.710 --> 00:05:34.490
is configuring a
location request.

00:05:34.490 --> 00:05:38.390
We're being reasonably
aggressive here.

00:05:38.390 --> 00:05:43.850
We're asking for high fidelity,
high accuracy of the phone,

00:05:43.850 --> 00:05:46.830
and we're asking to do
it every 10 seconds.

00:05:46.830 --> 00:05:50.330
This means the phone's going to
be really active, the circuit--

00:05:50.330 --> 00:05:52.880
the radio circuitry is
always going to be on.

00:05:52.880 --> 00:05:56.120
So this is going to have
battery implications, which

00:05:56.120 --> 00:05:58.860
is why I mentioned before
that when we installed

00:05:58.860 --> 00:06:01.160
the phones in the buses,
we connected them up

00:06:01.160 --> 00:06:03.500
to USB by phone chargers.

00:06:03.500 --> 00:06:06.200
So this is an explicit
design consideration.

00:06:06.200 --> 00:06:08.300
When you turn around and
do this sort of thing,

00:06:08.300 --> 00:06:11.480
you need to be aware of,
is this phone permanently

00:06:11.480 --> 00:06:13.380
connected to power or not.

00:06:13.380 --> 00:06:17.090
Another thing we implemented
to deal with this

00:06:17.090 --> 00:06:18.770
was monitoring software.

00:06:18.770 --> 00:06:22.460
So we had the phones actually
writing their battery level

00:06:22.460 --> 00:06:25.490
into another part of Firebase
that we had an admin user

00:06:25.490 --> 00:06:27.770
interface so we could
see all of our phones,

00:06:27.770 --> 00:06:32.000
the current location, and most
importantly their power status,

00:06:32.000 --> 00:06:35.259
because occasionally a bus
driver would get into his bus

00:06:35.259 --> 00:06:36.800
and go, what's this
phone doing here?

00:06:36.800 --> 00:06:40.440
And unplug it and plug his own
phone in, and we'd go damn it.

00:06:40.440 --> 00:06:44.780
Go and find the bus and
get him to plug it back in.

00:06:44.780 --> 00:06:49.280
So we configured how we're
going to get locations.

00:06:49.280 --> 00:06:52.190
The next point is that we then
use the Fused Location Provider

00:06:52.190 --> 00:06:53.720
API.

00:06:53.720 --> 00:07:01.130
This gives us-- fuses together
cellular tower data, GPS data,

00:07:01.130 --> 00:07:04.460
and Wi-Fi data to give us a more
accurate prediction as to where

00:07:04.460 --> 00:07:05.700
this phone actually is.

00:07:08.890 --> 00:07:11.080
We then configure
whereabouts in Firebase.

00:07:11.080 --> 00:07:13.284
We're going to write this
location information.

00:07:15.890 --> 00:07:18.010
And finally, we
create a call-back

00:07:18.010 --> 00:07:20.800
to hand to the Fused
Location Provider API

00:07:20.800 --> 00:07:22.870
that we can actually then
turn around and write

00:07:22.870 --> 00:07:25.360
the results into Firebase.

00:07:25.360 --> 00:07:27.970
And with this 10
lines of code, we

00:07:27.970 --> 00:07:30.681
are now tracking this
phone in real-time.

00:07:37.740 --> 00:07:40.670
So we've dealt with
the first component.

00:07:40.670 --> 00:07:42.950
Now we move to the
heart of the system,

00:07:42.950 --> 00:07:46.200
the Firebase real-time database.

00:07:46.200 --> 00:07:49.360
The Firebase real-time
database is a very powerful

00:07:49.360 --> 00:07:51.690
real-time communication tool.

00:07:51.690 --> 00:07:54.330
For me while I was
developing the system,

00:07:54.330 --> 00:07:58.290
it was absolutely
insanely powerful

00:07:58.290 --> 00:08:03.360
because traditionally when
you're developing a distributed

00:08:03.360 --> 00:08:06.570
system, the main pain point
you have is understanding

00:08:06.570 --> 00:08:08.820
what the whole system is doing.

00:08:08.820 --> 00:08:12.200
Now, because I've got 30 phones
wandering around Southbay,

00:08:12.200 --> 00:08:14.610
I'd like to know where they
are, what they're doing.

00:08:14.610 --> 00:08:16.710
And in this console I
can see what each of them

00:08:16.710 --> 00:08:19.630
is doing in real-time.

00:08:19.630 --> 00:08:22.320
During development, we can
also turn around and not

00:08:22.320 --> 00:08:24.330
have that component,
and I can sit it here

00:08:24.330 --> 00:08:26.400
and through this
console turn around

00:08:26.400 --> 00:08:28.560
and make changes to
the data structures

00:08:28.560 --> 00:08:31.500
and see what the downstream
components do when

00:08:31.500 --> 00:08:33.630
faced with certain edge cases.

00:08:33.630 --> 00:08:37.020
This allows you to effectively
have real-time development

00:08:37.020 --> 00:08:38.130
in a distributed system.

00:08:38.130 --> 00:08:39.630
You can see what
it's doing, you can

00:08:39.630 --> 00:08:44.340
change what it's doing all in a
nice web browser-based console.

00:08:48.360 --> 00:08:51.870
So I told you about
the Android phones.

00:08:51.870 --> 00:08:54.680
They put their location
information into Firebase.

00:08:54.680 --> 00:08:59.870
Firebase then notifies
our Node.js process

00:08:59.870 --> 00:09:03.290
running on Compute Engine.

00:09:03.290 --> 00:09:07.730
So this component has a
couple of things that it does,

00:09:07.730 --> 00:09:10.460
has a list of responsibilities.

00:09:10.460 --> 00:09:13.280
But I'm going to go
through two this afternoon.

00:09:13.280 --> 00:09:16.730
The first one is that while
we are running simulations,

00:09:16.730 --> 00:09:18.980
we like to move
things around the map.

00:09:18.980 --> 00:09:21.590
To do that, we need to
actually generate the pause

00:09:21.590 --> 00:09:23.370
that the buses
are going to take.

00:09:23.370 --> 00:09:25.520
They start at a hotel,
go to another hotel,

00:09:25.520 --> 00:09:29.360
and then wind up at Google
I/O. We need to then track out

00:09:29.360 --> 00:09:31.959
the path going around all
the roads, the roundabouts,

00:09:31.959 --> 00:09:33.750
over the bridges and
all that sort of thing

00:09:33.750 --> 00:09:36.350
that that bus is going to take,
so that our simulation looks

00:09:36.350 --> 00:09:38.150
realistic.

00:09:38.150 --> 00:09:40.250
The second piece of code
I'm going to show you

00:09:40.250 --> 00:09:45.110
is what this server does with
the phone location information

00:09:45.110 --> 00:09:48.470
to tidy up the fact that GPS
data tends to be a bit noisy.

00:09:51.120 --> 00:09:53.790
So the first code snippet.

00:09:53.790 --> 00:09:56.515
Here's where we're
generating a path.

00:09:56.515 --> 00:09:57.890
Trip Points is
where we are going

00:09:57.890 --> 00:10:00.980
to take all the points of the
path, put them into a list,

00:10:00.980 --> 00:10:02.930
and then do things
with it later.

00:10:02.930 --> 00:10:06.890
So this is effectively
just an accumulator.

00:10:06.890 --> 00:10:09.260
For every stop, I
actually have a database

00:10:09.260 --> 00:10:12.020
of all the information
of all the trips,

00:10:12.020 --> 00:10:14.240
and so what we're going
to do is get the stops

00:10:14.240 --> 00:10:18.520
that this trip is going to
make out of that database.

00:10:18.520 --> 00:10:21.790
Here's where we create a
Directions API request.

00:10:21.790 --> 00:10:24.760
At its simplest, a
directions request

00:10:24.760 --> 00:10:26.590
has a starting point
and an ending point,

00:10:26.590 --> 00:10:29.840
in this case origin
and destination.

00:10:29.840 --> 00:10:32.020
But in the case where
we have multiple hotels

00:10:32.020 --> 00:10:33.850
that this bus is
going to, we have

00:10:33.850 --> 00:10:36.670
waypoints which are the
hotels in between the origin

00:10:36.670 --> 00:10:40.230
and the destination.

00:10:40.230 --> 00:10:42.830
This is the line
where we use a client

00:10:42.830 --> 00:10:45.730
library to turn around and make
a request to the Directions

00:10:45.730 --> 00:10:47.002
API.

00:10:47.002 --> 00:10:48.890
I just want to stop
here for a second.

00:10:48.890 --> 00:10:51.710
We actually have four
client libraries.

00:10:51.710 --> 00:10:56.180
One, as you can see here, in
Node.js, one Go, one for Java,

00:10:56.180 --> 00:10:57.560
one for Python.

00:10:57.560 --> 00:11:01.520
And these client libraries
take the web service APIs

00:11:01.520 --> 00:11:04.790
that we have, like
Directions API, Roads API,

00:11:04.790 --> 00:11:09.860
so on and so forth, and give
you language-appropriate help.

00:11:09.860 --> 00:11:13.070
So for Java and for
Go, we expose to you

00:11:13.070 --> 00:11:15.630
what the result types are
going to be, so you get--

00:11:15.630 --> 00:11:18.759
if your browser or editor
gives you intellisense,

00:11:18.759 --> 00:11:20.550
you'll turn around and
get type completion,

00:11:20.550 --> 00:11:21.508
all that sort of thing.

00:11:27.100 --> 00:11:30.340
Now that we've made that
request using the power of a way

00:11:30.340 --> 00:11:32.650
to turn what's basically
an asynchronous operation

00:11:32.650 --> 00:11:35.410
into something that
looks synchronous,

00:11:35.410 --> 00:11:37.960
now we look at the response.

00:11:37.960 --> 00:11:39.760
Did it actually work?

00:11:39.760 --> 00:11:43.360
And if it did, now we actually
interrogate the response

00:11:43.360 --> 00:11:44.410
structure.

00:11:44.410 --> 00:11:48.296
So a Directions response
consists of a set of routes,

00:11:48.296 --> 00:11:50.170
and I'm just going to
take the first one here

00:11:50.170 --> 00:11:52.810
because I don't really care.

00:11:52.810 --> 00:11:53.920
Well, I do care.

00:11:53.920 --> 00:11:57.570
The first route is going to
be the best route, right?

00:11:57.570 --> 00:11:59.640
For each route, we
have a set of legs.

00:11:59.640 --> 00:12:04.160
This traditionally shows up as
different transport modalities,

00:12:04.160 --> 00:12:06.720
and in each leg there
are a set of steps,

00:12:06.720 --> 00:12:09.780
and finally within a
step we have a polyline.

00:12:09.780 --> 00:12:12.450
So a polyline is
an encoded format

00:12:12.450 --> 00:12:17.380
for a list of lat
longs, location points.

00:12:17.380 --> 00:12:20.190
And so I decode
this encoded string.

00:12:20.190 --> 00:12:23.700
I've got the points
for this step.

00:12:23.700 --> 00:12:26.260
And then I turn around and
glue them all together,

00:12:26.260 --> 00:12:28.650
put them in trip points,
and then I use it later

00:12:28.650 --> 00:12:31.761
for actually rendering the buses
going around in simulation.

00:12:34.990 --> 00:12:36.920
So the second code snippet--

00:12:36.920 --> 00:12:39.790
this is where I'm going
to deal with the bus.

00:12:39.790 --> 00:12:41.410
So the bus is walking around--

00:12:41.410 --> 00:12:44.530
well, walking--
driving, rolling around.

00:12:44.530 --> 00:12:47.020
So we have a bus, and it's
moving around Southbay.

00:12:47.020 --> 00:12:49.690
It's checking in every 10
seconds through Firebase

00:12:49.690 --> 00:12:53.240
and telling us where it is.

00:12:53.240 --> 00:12:55.920
So on the server side,
I collect a history

00:12:55.920 --> 00:12:57.730
of the location of the bus.

00:12:57.730 --> 00:13:00.140
A couple of minutes
in this case.

00:13:00.140 --> 00:13:04.860
And I take that history,
and I send it off

00:13:04.860 --> 00:13:06.780
to our snap to road API.

00:13:06.780 --> 00:13:09.520
So this is part of
our Roads API service.

00:13:09.520 --> 00:13:12.300
So Roads API knows
where all the roads are,

00:13:12.300 --> 00:13:14.130
and I can turn
around and give it

00:13:14.130 --> 00:13:17.550
a couple of minutes of history
of the bus moving around,

00:13:17.550 --> 00:13:21.360
and Roads API will
then take those points,

00:13:21.360 --> 00:13:25.950
do some mathematics, and make
the best guess as to which road

00:13:25.950 --> 00:13:27.680
you were actually driving down.

00:13:27.680 --> 00:13:30.500
So it effectively eliminates
the noise from the GPS track.

00:13:33.670 --> 00:13:35.740
So then we-- because
we're actually

00:13:35.740 --> 00:13:37.900
interested in the current
location of the bus,

00:13:37.900 --> 00:13:41.020
we take the list
of returned points

00:13:41.020 --> 00:13:43.600
and take the very last one.

00:13:43.600 --> 00:13:48.730
It's worth noting here
that if you're plotting out

00:13:48.730 --> 00:13:51.640
a path of something on
a map, that you can also

00:13:51.640 --> 00:13:54.952
ask Roads API to insert
additional points because as I

00:13:54.952 --> 00:13:56.785
said, it knows where
things like roundabouts

00:13:56.785 --> 00:13:58.540
are and curved roads.

00:13:58.540 --> 00:14:01.810
So you can have Roads API
insert additional points

00:14:01.810 --> 00:14:06.340
in the snap to road result,
such that when you plot it,

00:14:06.340 --> 00:14:09.430
it's a nice line that actually
follows the roads as opposed

00:14:09.430 --> 00:14:13.610
to just the points that
you sampled using, say,

00:14:13.610 --> 00:14:15.699
Fused Location Provider.

00:14:15.699 --> 00:14:17.740
In this case, we're only
interested in the point.

00:14:17.740 --> 00:14:19.180
We're not plotting anything.

00:14:19.180 --> 00:14:20.417
So I didn't do that.

00:14:20.417 --> 00:14:22.000
I'm just taking the
most recent point.

00:14:24.900 --> 00:14:26.808
And of course, there's
error recovery.

00:14:30.090 --> 00:14:33.150
So now we're on to the
final part of the system.

00:14:33.150 --> 00:14:37.740
This is where we put the buses
and the timetable on the map.

00:14:40.540 --> 00:14:43.920
So you might have seen the map
that I showed you, doesn't look

00:14:43.920 --> 00:14:46.710
like a standard Google map.

00:14:46.710 --> 00:14:47.880
What's the code look like?

00:14:47.880 --> 00:14:49.240
Looks like this.

00:14:49.240 --> 00:14:51.810
We have a description
language that

00:14:51.810 --> 00:14:55.110
allows you to define the set
of rules that tells our mapping

00:14:55.110 --> 00:14:57.500
engine how to render a map.

00:14:57.500 --> 00:14:59.250
I don't know about
you, but I don't really

00:14:59.250 --> 00:15:01.780
want to turn around
and configure

00:15:01.780 --> 00:15:04.140
how a map brain is using this.

00:15:04.140 --> 00:15:08.080
I'd much rather use a what you
see is what you get wizard.

00:15:08.080 --> 00:15:09.720
So what I'd like
to show you now is

00:15:09.720 --> 00:15:12.510
how to use our wizard to
actually come up with a map--

00:15:12.510 --> 00:15:14.566
sorry, come up with a map style.

00:15:14.566 --> 00:15:20.480
So I'll just pray that the
demo gods are actually working.

00:15:20.480 --> 00:15:22.510
OK, this is our wizard.

00:15:22.510 --> 00:15:25.360
I'd like to create a style.

00:15:25.360 --> 00:15:27.210
Sydney, Australia.

00:15:27.210 --> 00:15:30.480
Can't tell where this
was written, right?

00:15:30.480 --> 00:15:33.240
Let's go to Cracow.

00:15:33.240 --> 00:15:37.160
OK, this is the stock
standard Google Maps styling.

00:15:37.160 --> 00:15:40.940
But I'm creating an application,
and I don't want this style.

00:15:40.940 --> 00:15:44.360
I want something that
speaks more to Cracow.

00:15:44.360 --> 00:15:46.880
Should we go with
something that's

00:15:46.880 --> 00:15:51.790
completely saturated, or
respecting Cracow's history,

00:15:51.790 --> 00:15:53.500
should we go
something a bit retro?

00:15:53.500 --> 00:15:55.030
I think I like this.

00:15:55.030 --> 00:15:58.570
But it's got a bunch
of visual noise on it

00:15:58.570 --> 00:16:01.990
that's not talking to me with
the application I'm designing.

00:16:01.990 --> 00:16:06.070
So I can then turn around and--

00:16:06.070 --> 00:16:07.220
yeah, that's better.

00:16:07.220 --> 00:16:09.110
I've calmed down the map.

00:16:09.110 --> 00:16:11.930
Maybe I want to take
off the landmarks.

00:16:11.930 --> 00:16:12.830
Let's zoom it a bit.

00:16:16.141 --> 00:16:17.087
And a bit more.

00:16:21.360 --> 00:16:22.510
How does that look?

00:16:22.510 --> 00:16:24.330
I'm happy with that.

00:16:24.330 --> 00:16:27.250
OK, if you wanted
to dive in deeper

00:16:27.250 --> 00:16:28.960
and actually make
more modifications,

00:16:28.960 --> 00:16:31.060
we have a deeper
level here that you

00:16:31.060 --> 00:16:33.400
can turn around and play
with the individual settings

00:16:33.400 --> 00:16:35.980
and see the results
in real-time.

00:16:35.980 --> 00:16:38.080
But I'm happy with
this map as it is.

00:16:38.080 --> 00:16:41.140
So we give you two
ways of using this map

00:16:41.140 --> 00:16:43.090
that you've just configured.

00:16:43.090 --> 00:16:45.070
The first one here
is the JSON language

00:16:45.070 --> 00:16:46.840
that I was showing you before.

00:16:46.840 --> 00:16:51.550
This map styling information
is useful in obviously Google

00:16:51.550 --> 00:16:54.130
Maps for web, so using
the JavaScript API.

00:16:54.130 --> 00:16:58.000
But it also works the exact same
language on Android and iOS.

00:16:58.000 --> 00:17:00.610
So this way you can configure
your map once and use it

00:17:00.610 --> 00:17:04.440
across all of your applications.

00:17:04.440 --> 00:17:07.170
We also give you our
static maps information.

00:17:07.170 --> 00:17:10.349
So if you just want to put a
map on a page and configure it,

00:17:10.349 --> 00:17:12.500
style it in some
way, you can do this,

00:17:12.500 --> 00:17:15.200
and this saves you from having
to load the JavaScript Maps

00:17:15.200 --> 00:17:15.992
API.

00:17:15.992 --> 00:17:17.450
It's a much lighter
response if you

00:17:17.450 --> 00:17:20.420
know that you don't want your
users interacting with the map.

00:17:23.720 --> 00:17:25.173
Back to the presentation.

00:17:28.220 --> 00:17:30.500
Now I've styled the map.

00:17:30.500 --> 00:17:32.300
We're off to the final
part of the journey

00:17:32.300 --> 00:17:35.710
where we've had the information,
start on the Android phone,

00:17:35.710 --> 00:17:38.120
we cleaned it up
in Compute Engine.

00:17:38.120 --> 00:17:39.940
Now we're going to
display it on a map.

00:17:42.774 --> 00:17:43.690
There's no types here.

00:17:43.690 --> 00:17:46.630
We must be back in
JavaScript land.

00:17:46.630 --> 00:17:49.930
We go to Firebase database that
we're taking a reference on.

00:17:49.930 --> 00:17:52.670
Now we're listening to a
different path in Firebase.

00:17:52.670 --> 00:17:56.200
So this is where the
Compute Engine hosted

00:17:56.200 --> 00:17:58.780
Node.js processes writing
the cleaned-up location

00:17:58.780 --> 00:17:59.430
of the buses.

00:18:02.800 --> 00:18:06.790
So what I've done here is that
under this location in Firebase

00:18:06.790 --> 00:18:11.080
I'm writing an
entry for each bus,

00:18:11.080 --> 00:18:15.130
so thus I can look up all
the buses all at once.

00:18:15.130 --> 00:18:17.500
I look at each bus, and
I've got a routine here

00:18:17.500 --> 00:18:21.430
to figure out what colored
marker to put out for this bus,

00:18:21.430 --> 00:18:26.000
depending on which route that
bus is actually servicing.

00:18:26.000 --> 00:18:27.180
Then we create a marker.

00:18:27.180 --> 00:18:28.970
The marker goes on a map.

00:18:28.970 --> 00:18:31.970
Realistically you actually
need a bit more complexity here

00:18:31.970 --> 00:18:37.050
to deal with reusing
markers because if you just

00:18:37.050 --> 00:18:39.030
kept creating new markers,
then you'd wind up

00:18:39.030 --> 00:18:40.470
with a screen full of markers.

00:18:40.470 --> 00:18:42.327
You actually want to
move the marker around,

00:18:42.327 --> 00:18:44.785
and you want to delete it when
the bus goes out of service.

00:18:52.040 --> 00:18:54.870
I hear people out in
the audience screaming,

00:18:54.870 --> 00:18:58.290
the web is great, but I want
to put it on mobile as well.

00:18:58.290 --> 00:18:59.280
How can we do this?

00:19:02.050 --> 00:19:07.580
Well, it just so happens we
have the same code for Java.

00:19:07.580 --> 00:19:08.480
We've got types here.

00:19:08.480 --> 00:19:10.560
We're back in Java land.

00:19:10.560 --> 00:19:14.670
We have a database reference.

00:19:14.670 --> 00:19:17.340
We turn around and
create a child listener

00:19:17.340 --> 00:19:21.970
to add to the Firebase to
notify us when things change.

00:19:24.630 --> 00:19:28.000
This time around I'm just
tracking a single bus.

00:19:28.000 --> 00:19:30.110
I'm not turning around
and mapping all of them.

00:19:32.810 --> 00:19:34.460
I've added the Firebase.

00:19:34.460 --> 00:19:35.420
I've got the lat.

00:19:35.420 --> 00:19:39.140
So that's the latitude of the
bus, longitude, and the bus

00:19:39.140 --> 00:19:40.040
route.

00:19:40.040 --> 00:19:44.930
So now I have enough information
to turn around and configure

00:19:44.930 --> 00:19:46.400
a marker on the map.

00:19:46.400 --> 00:19:48.100
Same logic applies here.

00:19:48.100 --> 00:19:51.160
You probably want to hold on to
the marker once you create it

00:19:51.160 --> 00:19:52.910
and just move it around.

00:19:52.910 --> 00:19:53.630
Simple enough.

00:19:58.170 --> 00:20:03.930
So just to go over at a high
level what we've just covered.

00:20:03.930 --> 00:20:07.920
We started out in Android using
Fused Location Provider to get

00:20:07.920 --> 00:20:10.870
the location of an asset.

00:20:10.870 --> 00:20:14.460
We published that location
every 10 seconds into Firebase.

00:20:14.460 --> 00:20:17.430
Firebase notified a
Google Compute Engine

00:20:17.430 --> 00:20:20.640
hosted Node.js process
to clean up that data

00:20:20.640 --> 00:20:25.070
and deal with the vagaries
of GPS location data.

00:20:25.070 --> 00:20:26.790
That updated information
was written back

00:20:26.790 --> 00:20:31.920
into Firebase, which it
controlled a front-end Google

00:20:31.920 --> 00:20:35.340
map hosted dashboard
that was shown

00:20:35.340 --> 00:20:39.270
to all the attendees at Google
I/O. I've also shown you

00:20:39.270 --> 00:20:42.637
how to do this with mobile.

00:20:42.637 --> 00:20:43.220
So where next?

00:20:45.547 --> 00:20:47.130
For starters, if you
would like to see

00:20:47.130 --> 00:20:49.105
the documentation for
the Google Maps Solutions

00:20:49.105 --> 00:20:55.020
that we're publishing, it's all
up on developers.google.com.

00:20:55.020 --> 00:20:56.970
If you'd like to have
a look at our client

00:20:56.970 --> 00:21:00.470
libraries and other open
source code, like the samples--

00:21:00.470 --> 00:21:05.430
sorry, like the solutions,
it's all up on GitHub.

00:21:05.430 --> 00:21:09.310
And finally, the code
that you saw in this talk

00:21:09.310 --> 00:21:11.700
is actually lifted
out of three codelabs.

00:21:11.700 --> 00:21:13.650
The first codelab was
the one that Steve and I

00:21:13.650 --> 00:21:16.140
hosted yesterday, which was
the real-time asset tracking

00:21:16.140 --> 00:21:18.270
codelab.

00:21:18.270 --> 00:21:22.590
The code for the Node.js process
was lifted out of the Transport

00:21:22.590 --> 00:21:24.600
Tracker Backend codelab.

00:21:24.600 --> 00:21:28.020
And finally, the code that
I showed at the very-- well,

00:21:28.020 --> 00:21:30.750
almost at the very end of
putting markers on a big Google

00:21:30.750 --> 00:21:34.450
map was taken out of the
Transport Tracker map.

00:21:34.450 --> 00:21:38.070
And with that, I thank
you for your attention,

00:21:38.070 --> 00:21:40.237
and I invite you to
give us feedback.

00:21:40.237 --> 00:21:41.070
Thank you very much.

00:21:41.070 --> 00:21:42.570
[APPLAUSE]

00:21:42.570 --> 00:21:45.920
[MUSIC PLAYING]

