WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:16.932
[MUSIC PLAYING]

00:00:16.932 --> 00:00:18.290
CLAUDIO CHERUBINO:
Hi, everyone.

00:00:18.290 --> 00:00:20.430
Welcome back to Google
Developers Live.

00:00:20.430 --> 00:00:21.540
My name is Claudio.

00:00:21.540 --> 00:00:24.090
And I'm one of the engineers in
the Google Drive Developer

00:00:24.090 --> 00:00:25.500
Relations Team.

00:00:25.500 --> 00:00:29.350
Today I'm going to talk about
two of the Google products I

00:00:29.350 --> 00:00:33.770
like most, Google Drive
and Apps Script.

00:00:33.770 --> 00:00:37.900
If you don't know Apps Script,
Apps Script is basically

00:00:37.900 --> 00:00:40.600
JavaScript on the cloud.

00:00:40.600 --> 00:00:45.840
You can write your own
JavaScript code and have it

00:00:45.840 --> 00:00:51.670
run on the Google Cloud and
access our services or third

00:00:51.670 --> 00:00:53.670
party services.

00:00:53.670 --> 00:00:57.050
It is basically JavaScript,
so you probably

00:00:57.050 --> 00:00:58.480
know the syntax already.

00:00:58.480 --> 00:01:01.310
It's not a new language
you have to learn.

00:01:01.310 --> 00:01:05.410
What you might need to learn is
how to use the services we

00:01:05.410 --> 00:01:10.140
have, and we have a service that
can be used to access and

00:01:10.140 --> 00:01:12.620
manage your Google
Drive files.

00:01:12.620 --> 00:01:14.410
And this is what I'm going
to talk about today.

00:01:14.410 --> 00:01:17.590
I'm going to show you how to get
started with Apps Script

00:01:17.590 --> 00:01:22.400
and how to use Apps Script to
create a file in Drive, share

00:01:22.400 --> 00:01:26.040
it, check its properties,
and so on.

00:01:26.040 --> 00:01:29.100
If you want to know more about
Apps Script, the good starting

00:01:29.100 --> 00:01:31.682
point is our documentation,
which is at developers.googl

00:01:31.682 --> 00:01:36.390
e.com/apps-script.

00:01:36.390 --> 00:01:40.170
And this is the page that
I have open right now.

00:01:40.170 --> 00:01:44.260
So this is the main page for
the Google Apps Script

00:01:44.260 --> 00:01:45.530
documentation.

00:01:45.530 --> 00:01:48.980
It has get started guides.

00:01:48.980 --> 00:01:50.420
It has tutorials.

00:01:50.420 --> 00:01:54.330
It has all the news and updates
on the new features of

00:01:54.330 --> 00:01:55.000
the product.

00:01:55.000 --> 00:01:57.170
It has support channels.

00:01:57.170 --> 00:02:01.670
And it has a complete
documentation set for all the

00:02:01.670 --> 00:02:04.860
services and all the functions
you can use with Apps Script.

00:02:04.860 --> 00:02:09.830
One of those is called DocsList
Service, and that's

00:02:09.830 --> 00:02:15.010
the one we can use to access
Google Drive files.

00:02:15.010 --> 00:02:19.660
If we check the documentation
for it, which I have it open

00:02:19.660 --> 00:02:26.460
here, it exposes some basic
classes, including a main

00:02:26.460 --> 00:02:30.630
service called DocsList, and
an object to represent the

00:02:30.630 --> 00:02:34.060
file, a folder, or
a file type.

00:02:34.060 --> 00:02:36.850
I'm going to show you
how to use them.

00:02:36.850 --> 00:02:42.360
To write a script, your Google
Apps Script, you go to

00:02:42.360 --> 00:02:44.420
script.google.com.

00:02:44.420 --> 00:02:45.600
Let's do it.

00:02:45.600 --> 00:02:48.580
I'm going to open a new tab,
go to script.google.com.

00:02:53.270 --> 00:02:59.290
And what I see is this first
dialogue that asks me if I

00:02:59.290 --> 00:03:01.870
want to create a new project.

00:03:01.870 --> 00:03:03.080
I want to start with
a tutorial.

00:03:03.080 --> 00:03:05.750
So if you're new, you might
want to start from there.

00:03:05.750 --> 00:03:08.250
And if you want to create a new
script, you might want to

00:03:08.250 --> 00:03:11.390
start with a blank project,
so an empty file.

00:03:11.390 --> 00:03:15.800
Or there's some templates
we have for you

00:03:15.800 --> 00:03:17.100
to get started faster.

00:03:17.100 --> 00:03:20.380
And one of those is for Drive.

00:03:20.380 --> 00:03:21.860
So I'm going to start
with this.

00:03:21.860 --> 00:03:24.980
And this will make our life
much, much easier.

00:03:24.980 --> 00:03:26.230
So I select Drive.

00:03:28.710 --> 00:03:33.680
And I get a new script and this
web IDE, I'm going to

00:03:33.680 --> 00:03:37.640
talk about it a bit more
in a few minutes.

00:03:37.640 --> 00:03:42.010
And we have two functions
we can already use.

00:03:42.010 --> 00:03:43.060
They're ready.

00:03:43.060 --> 00:03:45.500
They do two things.

00:03:45.500 --> 00:03:49.300
One of those lists files
in a folder.

00:03:49.300 --> 00:03:54.060
And the other one moves
a file into a folder.

00:03:54.060 --> 00:03:56.500
And obviously, we
can add our own.

00:03:56.500 --> 00:04:00.940
I think the best way to get
started is to check one of

00:04:00.940 --> 00:04:02.750
these functions first.

00:04:02.750 --> 00:04:07.810
Let's check the first one called
List Files In Folder.

00:04:07.810 --> 00:04:10.330
The Apps Script code
is JavaScript.

00:04:10.330 --> 00:04:13.890
And it's very, very easy to
read, even if you don't know

00:04:13.890 --> 00:04:14.780
Apps Script.

00:04:14.780 --> 00:04:20.220
So basically, what we're doing
here in line 10 is that we are

00:04:20.220 --> 00:04:26.850
asking the DocsList service to
get a folder by its name.

00:04:26.850 --> 00:04:31.990
So if we want to use it in our
Drive account, we have to

00:04:31.990 --> 00:04:35.735
replace the name Your
Folder with the name

00:04:35.735 --> 00:04:37.250
of a folder we own.

00:04:37.250 --> 00:04:41.190
So let me check what I have
in my Drive account.

00:04:41.190 --> 00:04:42.600
I have it here.

00:04:42.600 --> 00:04:44.480
I have some folders.

00:04:44.480 --> 00:04:47.320
Let's say we're going to use
TestFolder, which is here,

00:04:47.320 --> 00:04:51.580
which contains two super
important files.

00:04:51.580 --> 00:04:55.490
So, let's go back to Apps Script
and replace Your Folder

00:04:55.490 --> 00:04:58.920
with TestFolder, which is
the name of my folder.

00:05:01.620 --> 00:05:06.210
With this line, we get a
handle to the folder.

00:05:06.210 --> 00:05:11.460
And then the next line, line 11,
we get a list of all the

00:05:11.460 --> 00:05:13.720
files in that folder.

00:05:13.720 --> 00:05:18.640
What the rest of the function
does is iterating through all

00:05:18.640 --> 00:05:20.100
the documents in this folder.

00:05:20.100 --> 00:05:22.500
And for each of them, log--

00:05:22.500 --> 00:05:24.980
which is done on line 18--

00:05:24.980 --> 00:05:27.520
log the name of the file.

00:05:27.520 --> 00:05:29.400
Let's try to run it.

00:05:29.400 --> 00:05:32.430
So first, I'm going to save it
because I changed something.

00:05:32.430 --> 00:05:33.730
So, Save button.

00:05:33.730 --> 00:05:35.290
This is easy.

00:05:35.290 --> 00:05:38.650
This is the first time I saved
this project, so I have to

00:05:38.650 --> 00:05:40.250
give it a name.

00:05:40.250 --> 00:05:41.530
Default name is Untitled
Project.

00:05:41.530 --> 00:05:42.580
We can do better than that.

00:05:42.580 --> 00:05:45.240
Let's say Drive AppsScript.

00:05:45.240 --> 00:05:46.490
Very original.

00:05:49.066 --> 00:05:51.130
And this is now saved.

00:05:51.130 --> 00:05:56.700
And it is going to be available
in my Drive account.

00:05:56.700 --> 00:06:00.260
So any time, I can go back to
it, open it, edit, use it

00:06:00.260 --> 00:06:02.350
again, and so on.

00:06:02.350 --> 00:06:07.000
If I want to run it, I have to
select the function that I

00:06:07.000 --> 00:06:08.110
want to start with.

00:06:08.110 --> 00:06:10.170
So I have two.

00:06:10.170 --> 00:06:13.650
And we decided we're going to
use List Files In Folder.

00:06:13.650 --> 00:06:15.230
So I select this.

00:06:15.230 --> 00:06:19.550
And now I have these two new
buttons that I can use.

00:06:19.550 --> 00:06:21.810
One is to run the code.

00:06:21.810 --> 00:06:23.700
And the other one is
to debug the code.

00:06:23.700 --> 00:06:30.170
Because this web IDE also allows
you to run code in

00:06:30.170 --> 00:06:33.230
debugging mode, which means you
can put [INAUDIBLE], you

00:06:33.230 --> 00:06:36.620
can inspect the values of the
variables, and so on.

00:06:36.620 --> 00:06:38.328
I'm not going I show you that.

00:06:38.328 --> 00:06:41.870
But that is covered very, very
well in the documentation.

00:06:41.870 --> 00:06:44.630
And we also have some other
videos showing how to use the

00:06:44.630 --> 00:06:46.140
degugger for Apps Script.

00:06:46.140 --> 00:06:49.380
So let's say we run it.

00:06:49.380 --> 00:06:51.540
This is the first time
we run this code.

00:06:51.540 --> 00:06:57.110
So Apps Script realizes that
we never authorized this

00:06:57.110 --> 00:07:01.420
script to have access
to my documents.

00:07:01.420 --> 00:07:08.230
So it automatically checks the
code that I'm running and

00:07:08.230 --> 00:07:10.940
identifies all the requirements
I have.

00:07:10.940 --> 00:07:14.280
And the only requirement I have
to run this script is to

00:07:14.280 --> 00:07:19.580
give access to my docs
in a read/write mode.

00:07:19.580 --> 00:07:21.670
It asks for read/write mode.

00:07:21.670 --> 00:07:24.690
In this script, in this
function, we're only reading.

00:07:24.690 --> 00:07:26.960
But the other function
is also writing.

00:07:26.960 --> 00:07:31.300
And since one function can call
another, the whole script

00:07:31.300 --> 00:07:35.820
has to be authorized for both
reading and writing.

00:07:35.820 --> 00:07:37.980
So I authorize the script.

00:07:37.980 --> 00:07:43.550
This is only required the first
time you run the app or

00:07:43.550 --> 00:07:48.250
anytime you change something in
the code that requires new

00:07:48.250 --> 00:07:49.710
authorization.

00:07:49.710 --> 00:07:51.640
So I'm going to authorize.

00:07:51.640 --> 00:07:52.570
That's it.

00:07:52.570 --> 00:07:55.250
I didn't write any authorization
code.

00:07:55.250 --> 00:07:58.760
This makes Apps Script very,
very easy to get started with

00:07:58.760 --> 00:07:59.780
and to write scripts.

00:07:59.780 --> 00:08:01.925
So this is now authorized.

00:08:01.925 --> 00:08:07.990
I can close this window, go back
to the IDE, and run it.

00:08:07.990 --> 00:08:14.250
As I said, this function will
list all files in a folder and

00:08:14.250 --> 00:08:15.650
log their names.

00:08:15.650 --> 00:08:16.990
So I run it.

00:08:16.990 --> 00:08:20.740
I won't see anything unless
I check the log.

00:08:20.740 --> 00:08:23.310
The log is available anytime.

00:08:23.310 --> 00:08:26.910
It's very, very convenient for
debugging when you want to run

00:08:26.910 --> 00:08:29.480
something and log in
what's going on.

00:08:29.480 --> 00:08:33.169
And it's available in the
View menu and the logs.

00:08:33.169 --> 00:08:36.610
So what I'm expecting to see
here is two lines with the

00:08:36.610 --> 00:08:39.950
names of my files, Really
New and Untitled.

00:08:39.950 --> 00:08:40.760
Fancy names.

00:08:40.760 --> 00:08:44.960
And if we go back to my
TestFolder, these are exactly

00:08:44.960 --> 00:08:47.680
the files I have.

00:08:47.680 --> 00:08:48.380
So this has worked.

00:08:48.380 --> 00:08:49.300
Very, very easy.

00:08:49.300 --> 00:08:53.110
We did that in less than
10 lines of code.

00:08:53.110 --> 00:08:54.530
This is great.

00:08:54.530 --> 00:08:58.340
But we can also do a much,
much more with

00:08:58.340 --> 00:09:00.040
Apps Script and Drive.

00:09:00.040 --> 00:09:02.610
All of the methods are
documented in the

00:09:02.610 --> 00:09:05.140
documentation page that
I showed you before.

00:09:05.140 --> 00:09:07.590
But the IDE also gives you

00:09:07.590 --> 00:09:10.330
autocompletion, syntax aligning.

00:09:10.330 --> 00:09:13.480
So it's very easy to
write new code.

00:09:13.480 --> 00:09:16.120
Let's try to write
a new function.

00:09:16.120 --> 00:09:21.110
Let's say I want to create a
file on Drive and share it

00:09:21.110 --> 00:09:21.910
with someone.

00:09:21.910 --> 00:09:23.880
So let's say the function--

00:09:23.880 --> 00:09:24.740
I'm going to define
a function.

00:09:24.740 --> 00:09:27.820
This is JavaScript syntax,
createFile.

00:09:32.250 --> 00:09:36.330
And now you should pass
parameters to the functions,

00:09:36.330 --> 00:09:38.760
good programming.

00:09:38.760 --> 00:09:40.540
But this time we're going
to hard code something.

00:09:40.540 --> 00:09:43.010
Then, obviously, you
can make it better.

00:09:43.010 --> 00:09:46.830
With createFile, the first
thing we want to do is

00:09:46.830 --> 00:09:47.740
creating a file.

00:09:47.740 --> 00:09:53.850
So let's say var file equals
DocsList dot--

00:09:53.850 --> 00:09:57.420
as soon as I type the dot,
I get autocompletion.

00:09:57.420 --> 00:10:04.660
And I get suggestions on all
the methods that I can use.

00:10:04.660 --> 00:10:08.580
So there are three overloads
for createFile.

00:10:08.580 --> 00:10:12.590
Let's say I choose this one
that takes the name of the

00:10:12.590 --> 00:10:15.970
file and the string
for the content.

00:10:15.970 --> 00:10:16.900
There are two more.

00:10:16.900 --> 00:10:20.170
You can get all the details
from the documentation.

00:10:20.170 --> 00:10:28.040
So this autocompletion puts the
method signature there.

00:10:28.040 --> 00:10:30.820
I just have to replace
the place holder.

00:10:30.820 --> 00:10:32.730
So one of those is name.

00:10:32.730 --> 00:10:37.250
Let's say my new drive file.

00:10:37.250 --> 00:10:41.330
And the other one is contents,
which is another string which

00:10:41.330 --> 00:10:43.160
is going to be the text
content for the file.

00:10:43.160 --> 00:10:48.290
So this is a new Drive
file that I

00:10:48.290 --> 00:10:52.520
created with Apps Script.

00:10:52.520 --> 00:10:53.580
And that's it.

00:10:53.580 --> 00:10:57.550
If we run this, this
will create a file.

00:10:57.550 --> 00:10:59.200
But we want to do more.

00:10:59.200 --> 00:11:00.410
I said we want to share it.

00:11:00.410 --> 00:11:02.700
So we can do more things
in a function.

00:11:02.700 --> 00:11:07.220
Obviously, you should separate
functionalities in multiple

00:11:07.220 --> 00:11:10.740
functions, abstract each one
from the other, you know that.

00:11:10.740 --> 00:11:12.560
But still, this is an example.

00:11:12.560 --> 00:11:15.660
So let's do more in
the same function.

00:11:15.660 --> 00:11:19.580
The first thing I want to do is
to get the file ID from the

00:11:19.580 --> 00:11:22.380
file I just created, because
the file ID is the unique

00:11:22.380 --> 00:11:27.580
identifier that allows me to do
more things with this file.

00:11:27.580 --> 00:11:29.420
So I'm going to sort
it in a variable.

00:11:29.420 --> 00:11:33.400
Var fileID equals file.

00:11:33.400 --> 00:11:37.610
As you're going to see, I type
dot, and I get autocompletion

00:11:37.610 --> 00:11:40.850
for file, which is a
generic variable.

00:11:40.850 --> 00:11:47.110
But Apps Script realizes that
as that is the output of the

00:11:47.110 --> 00:11:51.430
createFile method, this is going
to be a file object.

00:11:51.430 --> 00:11:53.350
So this is very smart
autocompletion.

00:11:53.350 --> 00:11:58.980
I'm going to get multiple
various methods I can use.

00:11:58.980 --> 00:12:02.070
And the one I want
is called getID.

00:12:02.070 --> 00:12:05.350
So I have a file ID
in the variable.

00:12:05.350 --> 00:12:09.860
And if we want to prove
it, we can log it.

00:12:09.860 --> 00:12:13.521
Logger.log, and I
can log file ID.

00:12:16.990 --> 00:12:21.055
This code will create a file,
get the file ID of the file we

00:12:21.055 --> 00:12:24.060
just created, and log it.

00:12:24.060 --> 00:12:25.820
But I said we also
want to share it.

00:12:25.820 --> 00:12:29.640
So let's add an extra step.

00:12:29.640 --> 00:12:34.140
Sharing a file with Apps Script
is very, very easy.

00:12:34.140 --> 00:12:40.310
All you have to do is to call
the add viewers or add editors

00:12:40.310 --> 00:12:42.850
methods of the file itself.

00:12:42.850 --> 00:12:44.990
So I can do file.addViewer.

00:12:48.790 --> 00:12:52.470
And I can use an email
address or a user.

00:12:52.470 --> 00:12:55.340
Or I can add multiple email
addresses at the same time.

00:12:55.340 --> 00:12:57.050
So let's say I'm going to
use an email address.

00:12:57.050 --> 00:12:58.820
And let's put another
test account I

00:12:58.820 --> 00:13:00.430
have on the same domain.

00:13:04.520 --> 00:13:08.710
If we want to check if that
works, well, we can obviously

00:13:08.710 --> 00:13:15.700
go back to the UI and see who
the file is shared to.

00:13:15.700 --> 00:13:17.800
But we can also do that
programmatically.

00:13:17.800 --> 00:13:24.660
So let's extend this code to get
all the viewers for that

00:13:24.660 --> 00:13:26.880
file and log them.

00:13:26.880 --> 00:13:36.320
So we can say var viewers equals
file.getViewers, which

00:13:36.320 --> 00:13:39.280
will give us an array
of users.

00:13:42.540 --> 00:13:43.780
Viewers is going to be
an array of users.

00:13:43.780 --> 00:13:47.100
We can use a follow up to print

00:13:47.100 --> 00:13:48.020
information for each one.

00:13:48.020 --> 00:13:59.976
So we can do for var I equals 0,
I less than viewers.length,

00:13:59.976 --> 00:14:02.446
I plus plus.

00:14:05.420 --> 00:14:14.410
We can do a Logger.log, viewers
i dot getEmail.

00:14:14.410 --> 00:14:18.040
And we get the email address
with that user.

00:14:18.040 --> 00:14:24.310
Let's close parentheses,
semicolon, Save,

00:14:24.310 --> 00:14:26.170
and we can run this.

00:14:26.170 --> 00:14:30.910
So, before we do it, let's see
what is going to happen now.

00:14:30.910 --> 00:14:34.220
I'm going to create a new file
called My New Drive File with

00:14:34.220 --> 00:14:35.760
some text content.

00:14:35.760 --> 00:14:38.140
I'm going to log the file ID.

00:14:38.140 --> 00:14:41.360
I'm going to add another
user as Viewer.

00:14:41.360 --> 00:14:44.940
And I'm going to log the email
addresses of all the viewers

00:14:44.940 --> 00:14:46.560
for his file.

00:14:46.560 --> 00:14:50.270
So I go back to the drop down
menu here and select my new

00:14:50.270 --> 00:14:54.860
method, which I call createFile,
and run it.

00:14:54.860 --> 00:14:59.520
I didn't need to give more
permissions to the document,

00:14:59.520 --> 00:15:03.660
to the app, because I've already
given read and write

00:15:03.660 --> 00:15:06.690
access to the script
to my Docs account.

00:15:06.690 --> 00:15:11.200
So even though I added the new
function, the same set of

00:15:11.200 --> 00:15:17.030
permissions I had before is
enough to run the new code.

00:15:17.030 --> 00:15:18.010
It's done.

00:15:18.010 --> 00:15:19.540
We can check the log.

00:15:19.540 --> 00:15:24.090
Let's check logs
from View Logs.

00:15:24.090 --> 00:15:31.360
Well, first line is the ID,
is this Unix string.

00:15:31.360 --> 00:15:34.550
This is the unique ID for
the file I just created.

00:15:34.550 --> 00:15:40.660
And these two are the email
addresses of the users who

00:15:40.660 --> 00:15:43.290
have read access to the file.

00:15:43.290 --> 00:15:46.010
One of those, the first
one, is my account.

00:15:46.010 --> 00:15:47.870
I'm the owner, so I
can read the file.

00:15:47.870 --> 00:15:50.840
And the second one is the
one that I just added.

00:15:50.840 --> 00:15:55.430
Let's see how this gets
reflected in the Drive UI.

00:15:55.430 --> 00:15:57.370
I go back to Drive.

00:15:57.370 --> 00:16:00.570
I created a file in the root.

00:16:00.570 --> 00:16:05.960
So I actually see two things.

00:16:05.960 --> 00:16:10.850
Drive Apps Script, you can
notice the icon is the Apps

00:16:10.850 --> 00:16:13.370
Script project that I created.

00:16:13.370 --> 00:16:16.650
So this is the project
that contains the

00:16:16.650 --> 00:16:18.350
code that I just ran.

00:16:18.350 --> 00:16:21.970
And my new drive file is the
text file we just created with

00:16:21.970 --> 00:16:24.090
the Apps Script code.

00:16:24.090 --> 00:16:28.640
So if I open it, it's going
to be a text file.

00:16:28.640 --> 00:16:30.870
So this is the viewer.

00:16:30.870 --> 00:16:34.640
This is exactly the content
I put in it.

00:16:34.640 --> 00:16:38.690
And if I go to the Share
dialogue, I can see that this

00:16:38.690 --> 00:16:44.780
file is only available to me--

00:16:44.780 --> 00:16:45.820
and I'm the owner--

00:16:45.820 --> 00:16:48.360
and to this other user,
who is a viewer, so

00:16:48.360 --> 00:16:51.090
only has read access.

00:16:51.090 --> 00:16:52.190
Great.

00:16:52.190 --> 00:16:57.680
I think you all realize how easy
it is to use Apps Script

00:16:57.680 --> 00:16:59.410
to manage your Drive files.

00:16:59.410 --> 00:17:01.890
There is a lot more we
can do with that.

00:17:01.890 --> 00:17:07.010
And before I wrap up, I just
want to go back to the Docs

00:17:07.010 --> 00:17:12.359
for a second and show you
that there's so many

00:17:12.359 --> 00:17:13.480
methods you can use.

00:17:13.480 --> 00:17:16.109
Let me mention some of those.

00:17:16.109 --> 00:17:18.240
You might be interested in
knowing what you can do with

00:17:18.240 --> 00:17:19.569
Apps Script and Drive.

00:17:19.569 --> 00:17:22.319
So with DocsList, which is
our main service, you

00:17:22.319 --> 00:17:23.630
can create a file.

00:17:23.630 --> 00:17:27.720
You can look for files
using a query string.

00:17:27.720 --> 00:17:30.370
So let's say you know the name
but you don't know the ID.

00:17:30.370 --> 00:17:33.340
You can get all the files
that match that name.

00:17:33.340 --> 00:17:35.420
You can get files, give an ID.

00:17:35.420 --> 00:17:39.650
Obviously that would mean
you know how to get

00:17:39.650 --> 00:17:40.680
that specific file.

00:17:40.680 --> 00:17:42.530
You can get folders.

00:17:42.530 --> 00:17:47.460
And you have some convenient
methods to get a specific

00:17:47.460 --> 00:17:49.550
folder, including the
root folder, which

00:17:49.550 --> 00:17:52.010
might be very useful.

00:17:52.010 --> 00:17:57.230
Then you have a file type
enum, which is used to

00:17:57.230 --> 00:18:03.140
categorize each file you have
on Google Drive, and then a

00:18:03.140 --> 00:18:06.700
class file, which is
what we just used.

00:18:06.700 --> 00:18:12.060
And that class has methods to
add editors, to add viewers,

00:18:12.060 --> 00:18:16.270
as we said, as we used, to get
all the properties, all the

00:18:16.270 --> 00:18:19.400
metadata, from that file,
including the date when it was

00:18:19.400 --> 00:18:24.030
created, the ID, when it was
last updated, what's the name

00:18:24.030 --> 00:18:28.240
of the file, who's the owner,
if it has any parents, which

00:18:28.240 --> 00:18:32.680
means folders it is
in, size, URL.

00:18:32.680 --> 00:18:36.780
And obviously, as you can add
editors and viewers, you can

00:18:36.780 --> 00:18:38.360
obviously remove them.

00:18:38.360 --> 00:18:39.130
Some of the methods.

00:18:39.130 --> 00:18:40.400
You can rename a file.

00:18:40.400 --> 00:18:41.640
You can start a file.

00:18:41.640 --> 00:18:44.370
You can move a file to
trash, and so on.

00:18:44.370 --> 00:18:46.060
There's a lot more there.

00:18:46.060 --> 00:18:49.460
I'm not going to
list them all.

00:18:49.460 --> 00:18:54.110
But I strongly advise you to go
to this page and check what

00:18:54.110 --> 00:18:57.280
you can do with Apps Script.

00:18:57.280 --> 00:18:58.340
OK.

00:18:58.340 --> 00:19:01.640
Remember, if you want to start
playing with it, just go to

00:19:01.640 --> 00:19:04.330
script.google.com.

00:19:04.330 --> 00:19:06.660
You can start with a blank
project, but if you start with

00:19:06.660 --> 00:19:09.510
a dry project, it will be much,
much easier for you to

00:19:09.510 --> 00:19:11.460
learn about it.

00:19:11.460 --> 00:19:13.300
Thank you very much.

00:19:13.300 --> 00:19:17.750
If you have any questions,
please reach out to us on

00:19:17.750 --> 00:19:21.080
Google+ and Stack Overflow.

00:19:21.080 --> 00:19:24.220
If not, well, let's see
you next time on

00:19:24.220 --> 00:19:25.780
Google Developers Live.

00:19:25.780 --> 00:19:26.410
Thank you.

00:19:26.410 --> 00:19:27.090
Bye bye.

00:19:27.090 --> 00:19:50.033
[MUSIC PLAYING]

