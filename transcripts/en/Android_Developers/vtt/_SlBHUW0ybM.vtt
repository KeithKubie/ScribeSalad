WEBVTT
Kind: captions
Language: en

00:00:09.080 --> 00:00:09.350
STEPHAN LINZNER: Hi.

00:00:09.350 --> 00:00:10.570
My name Stephan Linzner.

00:00:10.570 --> 00:00:12.440
And I'm a developer of
[INAUDIBLE] on the Android

00:00:12.440 --> 00:00:13.710
team here at Google.

00:00:13.710 --> 00:00:16.870
Today, I'm going to talk about
a new testing API which we've

00:00:16.870 --> 00:00:21.460
introduced with Android
4.3, UiAutomation.

00:00:21.460 --> 00:00:25.250
UiAutomation is a new API that
introduces full screen

00:00:25.250 --> 00:00:27.090
introspection support
into the Android

00:00:27.090 --> 00:00:29.730
instrumentation framework.

00:00:29.730 --> 00:00:31.020
Why is this important?

00:00:31.020 --> 00:00:33.960
Because it enables testing
across application boundaries

00:00:33.960 --> 00:00:36.080
within your instrumentation
tests.

00:00:36.080 --> 00:00:38.380
But let's have a look
at a quick example.

00:00:38.380 --> 00:00:41.080
Here are some screenshots of
the new Google Maps App.

00:00:41.080 --> 00:00:43.370
Let's say we want to write a
functional test for this

00:00:43.370 --> 00:00:46.980
scenario using the
instrumentation framework.

00:00:46.980 --> 00:00:50.460
What we would do is to start
activity on the left.

00:00:50.460 --> 00:00:52.530
Click on the Navigation icon.

00:00:52.530 --> 00:00:55.080
Wait for the dialog to appear.

00:00:55.080 --> 00:00:57.180
Then click the Enable button.

00:00:57.180 --> 00:00:59.700
But, as of now, there
was no easy way to

00:00:59.700 --> 00:01:01.980
actually turn a GPS on.

00:01:01.980 --> 00:01:04.780
The problem is that the
instrumentation framework is

00:01:04.780 --> 00:01:07.980
limited to test within its
target package only.

00:01:07.980 --> 00:01:11.670
With UiAutomation, this
restriction no longer holds.

00:01:11.670 --> 00:01:14.890
And now we can test the
complete user flow.

00:01:14.890 --> 00:01:18.590
Go to the Settings screen,
enable the GPS by checking the

00:01:18.590 --> 00:01:21.960
box, and press the
Back button.

00:01:21.960 --> 00:01:24.960
So let's have a quick look
at the API supported by

00:01:24.960 --> 00:01:26.500
UiAutomation.

00:01:26.500 --> 00:01:30.580
UiAutomation enables full screen
introspection support

00:01:30.580 --> 00:01:33.140
using the accessibility
attributes.

00:01:33.140 --> 00:01:35.840
It allows for taking screenshots
from right within

00:01:35.840 --> 00:01:37.420
your instrumentation tests.

00:01:37.420 --> 00:01:39.710
And I know this was a feature
that was requested

00:01:39.710 --> 00:01:41.580
for a very long time.

00:01:41.580 --> 00:01:46.050
It also supports the change of
the device orientation and

00:01:46.050 --> 00:01:48.350
injection of raw input events.

00:01:48.350 --> 00:01:50.300
Maybe one more note here.

00:01:50.300 --> 00:01:53.980
UiAutomation is a very low level
API, but this was done

00:01:53.980 --> 00:01:56.830
on purpose to encourage
development of your iTesting

00:01:56.830 --> 00:02:01.280
tools such as UiAutomator, as
well as to allow developers to

00:02:01.280 --> 00:02:03.500
use it in their instrumentation
tests.

00:02:03.500 --> 00:02:07.610
And in fact, the UiAutomator
framework, which we introduced

00:02:07.610 --> 00:02:10.860
with Jelly Bean 4.1, is
built on top of the

00:02:10.860 --> 00:02:14.040
UiAutomation APIs.

00:02:14.040 --> 00:02:17.220
So let's have a look
at some code.

00:02:17.220 --> 00:02:20.010
What do you have to do to get
started with your automation?

00:02:20.010 --> 00:02:21.650
It's very simple.

00:02:21.650 --> 00:02:25.760
You just have to inherit from
instrumentation test case or

00:02:25.760 --> 00:02:28.200
from any other subcloud
like activity

00:02:28.200 --> 00:02:30.390
instrumentation test case two.

00:02:30.390 --> 00:02:32.580
Then, in your test method just
call getInstrumentati

00:02:32.580 --> 00:02:37.630
on.getUiAutomation to get
a reference to the

00:02:37.630 --> 00:02:39.610
UiAutomation object.

00:02:39.610 --> 00:02:43.670
The question is, how do
you run these tests?

00:02:43.670 --> 00:02:46.760
It's not so different from
what it was before.

00:02:46.760 --> 00:02:50.690
You just have to use the adb
shell am Instrument command,

00:02:50.690 --> 00:02:54.860
with providing the minus w
option, your target package,

00:02:54.860 --> 00:02:58.770
and your test runner.

00:02:58.770 --> 00:03:01.770
So let me show you how you could
introspect any visible

00:03:01.770 --> 00:03:06.030
screen content from within your
instrumentation tests.

00:03:06.030 --> 00:03:09.880
First, we get a reference to the
UiAutomation object, but

00:03:09.880 --> 00:03:12.790
as the window content is
presented as a tree of

00:03:12.790 --> 00:03:16.220
accessibility notes, in this
case, we have to obtain the

00:03:16.220 --> 00:03:19.450
active window route
accessibility note first.

00:03:19.450 --> 00:03:22.820
This is done by calling, get
root in activity window.

00:03:22.820 --> 00:03:25.620
From there, we can continue
and create for any note by

00:03:25.620 --> 00:03:27.300
text or ID.

00:03:27.300 --> 00:03:30.330
But note, this search is
always relative to the

00:03:30.330 --> 00:03:33.810
retrieved root accessibility
note.

00:03:37.570 --> 00:03:41.990
Another cool feature, which
UiAutomation introduces, is to

00:03:41.990 --> 00:03:46.010
capture screenshots using the
instrumentation framework.

00:03:46.010 --> 00:03:48.860
In order to retrieve a bitmap of
the current screen content,

00:03:48.860 --> 00:03:51.820
we have to call take screenshot,
which returns a

00:03:51.820 --> 00:03:54.890
bitmap object, which then can be
written to the file system.

00:03:59.030 --> 00:04:02.070
UiAutomation also allows for
the injection of raw

00:04:02.070 --> 00:04:04.450
ImputEvents into the system.

00:04:04.450 --> 00:04:07.850
In order to inject an Event,
you have to call the

00:04:07.850 --> 00:04:10.200
injectInputEvent method.

00:04:10.200 --> 00:04:13.610
For example, if you want to
inject a MotionEvent, just

00:04:13.610 --> 00:04:15.780
obtain an Event object
from the pool and

00:04:15.780 --> 00:04:17.589
pass it as a parameter.

00:04:17.589 --> 00:04:20.950
But note that it's your
responsibility to recycle the

00:04:20.950 --> 00:04:24.370
ImputEvent and return
it to the pool.

00:04:24.370 --> 00:04:28.460
Furthermore, you can execute
commands and listen for their

00:04:28.460 --> 00:04:31.160
corresponding accessibility
events using an

00:04:31.160 --> 00:04:33.400
AccessibilityEvent filter.

00:04:33.400 --> 00:04:37.010
For example, we can pass a
runnable as a parameter to

00:04:37.010 --> 00:04:40.890
execute and wait for event,
which taps on the screen, and

00:04:40.890 --> 00:04:43.270
then verify this tap
by listening for a

00:04:43.270 --> 00:04:44.520
CorrespondingAcc
essibilityEvent.

00:04:46.680 --> 00:04:49.720
But what you also can
do is listen for all

00:04:49.720 --> 00:04:52.740
AccessibilityEvents in
the EventStream.

00:04:52.740 --> 00:04:56.250
This is also very easy by just
passing an instance of

00:04:56.250 --> 00:04:59.570
UnaccessibilityEventListener
to the set on

00:04:59.570 --> 00:05:02.430
AccessibilityEventListener
method.

00:05:02.430 --> 00:05:05.745
You're listener interface then
receives a call back each time

00:05:05.745 --> 00:05:08.760
an accessibility event occurs.

00:05:08.760 --> 00:05:10.430
Thank you very much
for listening.

00:05:10.430 --> 00:05:11.680
And happy testing.

