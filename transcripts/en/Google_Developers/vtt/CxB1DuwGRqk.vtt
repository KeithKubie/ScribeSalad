WEBVTT
Kind: captions
Language: en

00:00:00.620 --> 00:00:03.420
JENNY MURPHY: So welcome to
Building Glassware With the

00:00:03.420 --> 00:00:05.440
Google Mirror API.

00:00:05.440 --> 00:00:06.940
Today, we're going to show
you some code on

00:00:06.940 --> 00:00:08.680
building some Glassware.

00:00:08.680 --> 00:00:10.440
Before we get into that,
let's tell you a

00:00:10.440 --> 00:00:12.140
little bit about ourselves.

00:00:12.140 --> 00:00:13.220
ALAIN VONGSOUVANH:
Hi, everyone.

00:00:13.220 --> 00:00:14.380
My name's Alain Vongsouvanh.

00:00:14.380 --> 00:00:16.110
I'm a Developer Programs
Engineer on

00:00:16.110 --> 00:00:17.850
Glass, and this is--

00:00:17.850 --> 00:00:18.450
JENNY MURPHY: Hi.

00:00:18.450 --> 00:00:19.460
I'm Jenny Murphy.

00:00:19.460 --> 00:00:23.820
I'm also a Developer Programs
Engineer on Glass.

00:00:23.820 --> 00:00:26.510
So here's our menu for today.

00:00:26.510 --> 00:00:29.790
We're going to briefly touch on
the guidelines so you know

00:00:29.790 --> 00:00:31.830
how to build some awesome
Glassware.

00:00:31.830 --> 00:00:34.530
We're going to cover this really
briefly because it's a

00:00:34.530 --> 00:00:36.230
lot of the same information
that Timothy

00:00:36.230 --> 00:00:38.310
covered early in a session.

00:00:38.310 --> 00:00:42.780
In fact, we assume a little
bit of foreknowledge here.

00:00:42.780 --> 00:00:45.500
We assume you're familiar with
Glass, either you attended

00:00:45.500 --> 00:00:49.660
Timothy's session, or you have
Glass on right now, or maybe

00:00:49.660 --> 00:00:52.330
you visited some of our
partners in the

00:00:52.330 --> 00:00:54.840
Glass Sandbox earlier.

00:00:54.840 --> 00:00:58.760
But even if you haven't, just
hang tight, take some notes,

00:00:58.760 --> 00:01:00.900
and make sure to follow up with
that information like

00:01:00.900 --> 00:01:03.500
seeing Timothy's video.

00:01:03.500 --> 00:01:05.390
Once we're done with that, we're
going to go through the

00:01:05.390 --> 00:01:07.786
components of the Mirror API.

00:01:07.786 --> 00:01:09.060
These are the building
blocks that you

00:01:09.060 --> 00:01:11.140
use to build Glassware.

00:01:11.140 --> 00:01:12.990
We're going to go through each
one and show you some code of

00:01:12.990 --> 00:01:15.230
using them in isolation.

00:01:15.230 --> 00:01:17.320
Once we're done with that,
we're going to show you a

00:01:17.320 --> 00:01:19.970
couple of examples of how you
can put them together to build

00:01:19.970 --> 00:01:21.960
some interesting Glassware.

00:01:21.960 --> 00:01:23.990
We hope that this will give you
the context that you can

00:01:23.990 --> 00:01:25.240
use to build your
own Glassware.

00:01:27.955 --> 00:01:28.660
ALAIN VONGSOUVANH: All right.

00:01:28.660 --> 00:01:30.240
Thank you, Jenny.

00:01:30.240 --> 00:01:31.800
Sounds really interesting.

00:01:31.800 --> 00:01:34.680
But before we dive into the code
and learn how we can use

00:01:34.680 --> 00:01:37.580
the Mirror API to build Glass
services, or what we call

00:01:37.580 --> 00:01:40.170
Glassware, we'd like to take
a few moments to talk about

00:01:40.170 --> 00:01:41.810
guidelines.

00:01:41.810 --> 00:01:45.510
So keep in mind that the
Glassware you write

00:01:45.510 --> 00:01:49.300
[INAUDIBLE] user, and with the
technology being so close to

00:01:49.300 --> 00:01:51.880
the user, it's really important
that the experience

00:01:51.880 --> 00:01:53.830
we provide is the
best possible.

00:01:53.830 --> 00:01:56.390
That is why we designed
guidelines

00:01:56.390 --> 00:01:58.860
around those four points.

00:01:58.860 --> 00:02:01.840
I won't go into details into
those because Timothy really

00:02:01.840 --> 00:02:03.670
did a great job explaining
them.

00:02:03.670 --> 00:02:05.280
If you managed to attend
his sessions--

00:02:05.280 --> 00:02:07.560
I bet many of you have--

00:02:07.560 --> 00:02:08.930
you should be good to go.

00:02:08.930 --> 00:02:11.770
If not, make sure to check his
session when it's back online.

00:02:11.770 --> 00:02:14.170
And always keep those guidelines
in mind when you

00:02:14.170 --> 00:02:17.700
are designing in Glassware,
[INAUDIBLE] in Glassware, and

00:02:17.700 --> 00:02:19.190
testing in Glassware.

00:02:19.190 --> 00:02:20.800
Sounds good?

00:02:20.800 --> 00:02:22.050
All right.

00:02:24.530 --> 00:02:25.380
JENNY MURPHY: Hi.

00:02:25.380 --> 00:02:27.820
Let's move on to the Mirror API,
those building blocks I

00:02:27.820 --> 00:02:30.280
mentioned before.

00:02:30.280 --> 00:02:34.115
Before I get into that, how many
of you here have built

00:02:34.115 --> 00:02:37.570
software using RESTful
web services before?

00:02:37.570 --> 00:02:37.950
Wow.

00:02:37.950 --> 00:02:39.490
Almost everyone.

00:02:39.490 --> 00:02:42.810
How about mobile applications
like Android apps?

00:02:42.810 --> 00:02:46.370
A good number, and quite
a bit of overlap.

00:02:46.370 --> 00:02:48.980
You're going to find that you
can leverage a lot of the

00:02:48.980 --> 00:02:51.190
knowledge you already have, a
lot of the experience you have

00:02:51.190 --> 00:02:51.963
from those two.

00:02:51.963 --> 00:02:56.160
But our perspective is a little
bit different so please

00:02:56.160 --> 00:02:57.410
try to keep an open mind.

00:03:00.250 --> 00:03:02.810
And as many technical
presentations start, we have

00:03:02.810 --> 00:03:07.360
our architecture diagram, and
this one is no different.

00:03:07.360 --> 00:03:10.790
We have the Mirror API,
the 10,000 foot view.

00:03:10.790 --> 00:03:13.390
Up at the top, we have a green
circle representing the Mirror

00:03:13.390 --> 00:03:17.040
API itself, and this is a
collection of RESTful web

00:03:17.040 --> 00:03:20.400
services, which is really just a
bunch of directories of JSON

00:03:20.400 --> 00:03:24.100
that you work with over HTTPS.

00:03:24.100 --> 00:03:27.640
Over on the right side, we have
a box representing Glass

00:03:27.640 --> 00:03:31.210
and its connection to the Mirror
API with Glass Sync.

00:03:31.210 --> 00:03:32.620
This is something you actually
don't need to

00:03:32.620 --> 00:03:34.140
worry too much about.

00:03:34.140 --> 00:03:36.200
This is one of the cool parts
of the Mirror API.

00:03:36.200 --> 00:03:38.410
We take care of the
synchronization for you.

00:03:38.410 --> 00:03:40.880
We handle connectivity,
we handle power, all

00:03:40.880 --> 00:03:41.980
that kind of stuff.

00:03:41.980 --> 00:03:46.670
You get to focus on the stuff to
the other side, those JSON

00:03:46.670 --> 00:03:51.385
messages you send back over
HTTPS and your Glassware, the

00:03:51.385 --> 00:03:52.720
code that interacts with
the Mirror API.

00:03:56.260 --> 00:03:57.910
And if you're observant,
you may have noticed

00:03:57.910 --> 00:03:58.840
I missed one thing.

00:03:58.840 --> 00:04:01.910
There were directories of JSON
up there, but we currently

00:04:01.910 --> 00:04:06.510
have no way to tell the Mirror
API what user you're

00:04:06.510 --> 00:04:11.900
interacting with and no way to
verify that they've given you

00:04:11.900 --> 00:04:13.620
access to their data.

00:04:13.620 --> 00:04:15.215
This is where OAuth comes in.

00:04:15.215 --> 00:04:18.890
We use OAuth to install
Glassware and to give the user

00:04:18.890 --> 00:04:24.020
the opportunity to provide
you access to their data.

00:04:24.020 --> 00:04:26.700
OAuth is kind of like the valet
keys for the internet.

00:04:26.700 --> 00:04:29.890
It gives users the ability to
give you access to just some

00:04:29.890 --> 00:04:31.980
of their data out there.

00:04:31.980 --> 00:04:34.460
Valet keys that kind of dance,
and I'm going to walk you

00:04:34.460 --> 00:04:37.620
through the dance that
we use to do this.

00:04:37.620 --> 00:04:41.590
So a new user arrives
at your Glassware.

00:04:41.590 --> 00:04:43.880
You don't know who they are.

00:04:43.880 --> 00:04:46.470
Maybe it's time to install,
maybe it's time just to hit a

00:04:46.470 --> 00:04:47.850
Settings page.

00:04:47.850 --> 00:04:51.300
In either case, what you're
going to do is you're going to

00:04:51.300 --> 00:04:54.190
redirect then to Google's
OS servers, or

00:04:54.190 --> 00:04:56.060
maybe open a pop-up.

00:04:56.060 --> 00:04:58.280
You're going to send over all
the permissions you want.

00:04:58.280 --> 00:05:00.900
Typically, this is going to be
glass.timeline, but we have

00:05:00.900 --> 00:05:03.390
some other permissions like
glass.location which I'll be

00:05:03.390 --> 00:05:05.406
going into a little bit later.

00:05:05.406 --> 00:05:07.995
The user logs into their Google
account if they're not

00:05:07.995 --> 00:05:11.020
already logged in, and then they
see a page where they see

00:05:11.020 --> 00:05:13.390
a list of permissions that
you've asked for.

00:05:13.390 --> 00:05:16.750
Since your Glassware has been
prudent on the permissions

00:05:16.750 --> 00:05:18.680
you're asking for and you have
some really compelling

00:05:18.680 --> 00:05:21.350
functionality, of course they're
going say yes and

00:05:21.350 --> 00:05:23.890
grant you those permissions.

00:05:23.890 --> 00:05:28.980
They get redirected back to your
service, and along with

00:05:28.980 --> 00:05:31.810
that redirection comes a code.

00:05:31.810 --> 00:05:34.920
Now it's your turn to complete
that three way handshake.

00:05:34.920 --> 00:05:38.180
You take that code and you make
a back end request, along

00:05:38.180 --> 00:05:42.480
with some details of your
service, and we send you an

00:05:42.480 --> 00:05:44.910
access token.

00:05:44.910 --> 00:05:48.210
You use this access token to
both identify the user when

00:05:48.210 --> 00:05:51.400
you make those requests and to
verify that you have those

00:05:51.400 --> 00:05:52.510
permissions.

00:05:52.510 --> 00:05:56.170
You include it in a header
on all those requests.

00:05:56.170 --> 00:05:57.520
There are a bunch
of steps here.

00:05:57.520 --> 00:05:59.720
One cool thing is we have
client libraries in our

00:05:59.720 --> 00:06:02.520
Resources that care of almost
all of this heavy lifting for

00:06:02.520 --> 00:06:05.450
you, so you don't need to worry
about these details.

00:06:05.450 --> 00:06:10.680
But if you want to, you can
code at this level, too.

00:06:10.680 --> 00:06:14.380
So now we have access tokens
and we can start using the

00:06:14.380 --> 00:06:16.260
Mirror API.

00:06:16.260 --> 00:06:17.510
ALAIN VONGSOUVANH:
Thank you, Jenny.

00:06:17.510 --> 00:06:22.430
So now that the user has
installed your Glassware, it's

00:06:22.430 --> 00:06:24.590
time to do stuff with it.

00:06:24.590 --> 00:06:26.990
Before we dive into how to write
Glassware, let's talk

00:06:26.990 --> 00:06:29.300
about the Mirror API and
what it's made of.

00:06:29.300 --> 00:06:32.450
I'm pretty sure many of you
already know, but it's always

00:06:32.450 --> 00:06:34.190
good to get a reminder.

00:06:34.190 --> 00:06:37.740
So Jenny mentioned that the
Mirror API is a RESTful API,

00:06:37.740 --> 00:06:42.070
so it means that it's an API
composed of connections that

00:06:42.070 --> 00:06:43.970
you manipulate through
HTTP requests.

00:06:43.970 --> 00:06:48.480
So you can update, retrieve,
delete, insert new items to

00:06:48.480 --> 00:06:50.290
your collections.

00:06:50.290 --> 00:06:52.060
The main collection you're going
to use when you write

00:06:52.060 --> 00:06:54.320
your Glassware is the
Timeline collection.

00:06:54.320 --> 00:06:57.950
This is how you insert content
into the user's Glass, what we

00:06:57.950 --> 00:07:01.080
call Timeline Card, and this is
how you retrieve Timeline

00:07:01.080 --> 00:07:04.330
Card from the user's
Glass as well.

00:07:04.330 --> 00:07:07.640
Each Glassware has their own
Timeline, so you don't get

00:07:07.640 --> 00:07:09.720
access to another Glassware
Timeline.

00:07:09.720 --> 00:07:12.100
For example, the Google+
Glassware doesn't have access

00:07:12.100 --> 00:07:14.480
to the Gmail Glassware,
and so forth.

00:07:14.480 --> 00:07:17.950
Very few exceptions, but that
needs user input and we'll get

00:07:17.950 --> 00:07:19.750
into that later.

00:07:19.750 --> 00:07:22.910
Now, the example you see on
screen is the most simple

00:07:22.910 --> 00:07:24.290
Timeline Card you can insert.

00:07:24.290 --> 00:07:25.610
It's text only.

00:07:25.610 --> 00:07:27.660
So this is a JSON representation
of a Timeline

00:07:27.660 --> 00:07:32.580
item, set the text property to
Hello World, and then send an

00:07:32.580 --> 00:07:35.730
authorized post request to the
Timeline collection, and boom,

00:07:35.730 --> 00:07:37.080
it's going to be in
the user's Glass.

00:07:37.080 --> 00:07:38.040
MALE SPEAKER: Hi everyone.

00:07:38.040 --> 00:07:40.210
ALAIN VONGSOUVANH: It's
as simple as that.

00:07:40.210 --> 00:07:43.320
Thanks for the noise.

00:07:43.320 --> 00:07:44.080
All right.

00:07:44.080 --> 00:07:46.030
Let's jump to the
other example.

00:07:46.030 --> 00:07:49.360
So we inserted text, but you can
also insert rich media to

00:07:49.360 --> 00:07:50.700
the user's Glass.

00:07:50.700 --> 00:07:53.850
The Glass client supports images
and videos, and you

00:07:53.850 --> 00:07:56.750
insert those using HTTP
requests as well.

00:07:56.750 --> 00:07:59.345
So you can insert media only,
or you can also provide

00:07:59.345 --> 00:08:02.280
metadata along with the media.

00:08:02.280 --> 00:08:06.350
This is an example of a
multipart HTTP request, but as

00:08:06.350 --> 00:08:08.370
Jenny mentioned, we have client
libraries that leverage

00:08:08.370 --> 00:08:10.040
all of that for you so
you don't have to do

00:08:10.040 --> 00:08:11.270
all the heavy lifting.

00:08:11.270 --> 00:08:13.420
And we have extensive
documentation on how to do

00:08:13.420 --> 00:08:16.360
that in our reference
documentation.

00:08:16.360 --> 00:08:20.640
So now, we have text, we have
media, but sometimes, you want

00:08:20.640 --> 00:08:22.170
to add your own branding
as well.

00:08:22.170 --> 00:08:24.010
You want to customize
your Timeline Card.

00:08:24.010 --> 00:08:27.980
You want to do more stuff,
provide a better

00:08:27.980 --> 00:08:29.450
experience to the user.

00:08:29.450 --> 00:08:32.179
For that, we have
HTML support.

00:08:32.179 --> 00:08:34.700
So you can set HTML
payload into the

00:08:34.700 --> 00:08:36.850
Timeline item metadata.

00:08:36.850 --> 00:08:39.539
It's as simple as just setting
the HTML into the HTML

00:08:39.539 --> 00:08:43.370
Property, and we have a list
of tags that we support and

00:08:43.370 --> 00:08:46.920
tags that we don't, like
Script and Link.

00:08:46.920 --> 00:08:50.820
All of that is documented in our
Reference Guide as well.

00:08:50.820 --> 00:08:55.630
And we also have a built-in CSS
that we encourage you to

00:08:55.630 --> 00:08:58.230
use to provide a consistent
experience

00:08:58.230 --> 00:09:00.470
across all the Glassware.

00:09:00.470 --> 00:09:03.920
Now, let's look at how it
looks like to the code.

00:09:03.920 --> 00:09:07.710
So in our slide, we decided to
use Java, but again, the

00:09:07.710 --> 00:09:10.680
Mirror API is a RESTful API,
so as long as you have a

00:09:10.680 --> 00:09:13.700
language that can communicate
over HTTP, you're good to go.

00:09:13.700 --> 00:09:16.280
And Google does provide many
client libraries in different

00:09:16.280 --> 00:09:20.470
languages like Java, Python,
PHP, .NET, and so forth.

00:09:20.470 --> 00:09:23.110
We have documentation again,
and then you can also check

00:09:23.110 --> 00:09:25.370
the Client Libraries
Project page to

00:09:25.370 --> 00:09:27.220
learn more about those.

00:09:27.220 --> 00:09:31.120
So for Java, how to insert a
Timeline Item, you just create

00:09:31.120 --> 00:09:34.860
a new Timeline Item Resource and
then set the text or the

00:09:34.860 --> 00:09:37.590
metadata properties you want
for the Timeline Item.

00:09:37.590 --> 00:09:41.090
In this example, we're only
saying hello to our Explorers.

00:09:41.090 --> 00:09:44.370
And then once you're good with
your Timeline Item, use an

00:09:44.370 --> 00:09:48.380
authorized Mirror service and
send an authorized HTTP

00:09:48.380 --> 00:09:49.970
request to the user's Glass.

00:09:49.970 --> 00:09:51.270
And that's it.

00:09:51.270 --> 00:09:51.970
You're done.

00:09:51.970 --> 00:09:55.360
You just sent a Timeline Item
to your user's Glass.

00:09:55.360 --> 00:09:57.110
It's so simple.

00:09:57.110 --> 00:10:01.050
Now, I could talk about this for
20 more minutes, or I can

00:10:01.050 --> 00:10:02.300
jump to a demo.

00:10:05.400 --> 00:10:06.370
All right.

00:10:06.370 --> 00:10:09.420
So we have a tool we built for
you called the Playground

00:10:09.420 --> 00:10:11.040
where you can experiment
with the API.

00:10:11.040 --> 00:10:14.010
So the Playground is actually
using the Mirror API to send

00:10:14.010 --> 00:10:15.880
data to your user's Glass.

00:10:15.880 --> 00:10:18.860
So we have a bunch
of templates.

00:10:18.860 --> 00:10:21.800
Let's start with a much simpler
one, text only.

00:10:21.800 --> 00:10:25.820
So you can simply
edit the text.

00:10:25.820 --> 00:10:30.330
Glass Explorers are awesome!

00:10:30.330 --> 00:10:33.620
You can see on the right side
of the screen, the JSON

00:10:33.620 --> 00:10:34.840
representation.

00:10:34.840 --> 00:10:38.570
And then when you're good with
the Timeline Item, just hit

00:10:38.570 --> 00:10:39.680
Insert Item.

00:10:39.680 --> 00:10:41.920
It's going to use the
API and then send it

00:10:41.920 --> 00:10:43.450
to the user's Glass.

00:10:43.450 --> 00:10:47.800
Now, let me go to my demo
device with a cable.

00:10:47.800 --> 00:10:50.360
Hang into it so I can show
you what the screen

00:10:50.360 --> 00:10:51.610
looks like for me.

00:10:55.550 --> 00:10:56.320
There we go.

00:10:56.320 --> 00:10:58.770
Just now, I just received the
item I just inserted.

00:10:58.770 --> 00:11:00.660
It's as simple as that.

00:11:00.660 --> 00:11:02.160
Cool.

00:11:02.160 --> 00:11:03.830
Now, let's jump back
to the Playground.

00:11:06.850 --> 00:11:10.660
We also have template support,
HTML support, and we have

00:11:10.660 --> 00:11:12.990
built some templates for you
so you can get started

00:11:12.990 --> 00:11:14.050
building your own.

00:11:14.050 --> 00:11:17.590
So use the ones you like,
do some modifications

00:11:17.590 --> 00:11:21.150
like JFK, et cetera.

00:11:21.150 --> 00:11:21.890
Modify it.

00:11:21.890 --> 00:11:25.950
You have the JSON on
the right side.

00:11:25.950 --> 00:11:28.730
It's kind of complicated to
modify via HTML from the JSON

00:11:28.730 --> 00:11:32.590
payload, so you can also
just edit the HTML by

00:11:32.590 --> 00:11:33.510
clicking on the tab.

00:11:33.510 --> 00:11:36.820
And then when you're happy with
your template, just push

00:11:36.820 --> 00:11:39.440
it into your Glass, make sure
it looks the same, copy the

00:11:39.440 --> 00:11:42.660
template over into your code,
and you're good to go.

00:11:42.660 --> 00:11:43.903
Sounds good?

00:11:43.903 --> 00:11:44.306
Cool.

00:11:44.306 --> 00:11:47.820
Let's jump back to the slide.

00:11:47.820 --> 00:11:49.070
All right.

00:11:52.950 --> 00:11:57.000
So right now, we've been doing
one way interaction.

00:11:57.000 --> 00:11:59.340
We've been pushing content
to a user of Glass.

00:11:59.340 --> 00:12:02.475
But the Glass also lets users
take action on the card you

00:12:02.475 --> 00:12:04.340
insert to the users.

00:12:04.340 --> 00:12:07.030
You do that by adding more
information into a Timeline

00:12:07.030 --> 00:12:10.350
Item Resource that we
call Menu Items.

00:12:10.350 --> 00:12:13.270
There are two main categories
of Menu Items, the built-in

00:12:13.270 --> 00:12:17.220
ones that usually leverage the
Glass client, like sharing,

00:12:17.220 --> 00:12:19.890
which would create a new item--
more on that later--

00:12:19.890 --> 00:12:23.880
Get Directions, that uses the
Glass GPS and internal

00:12:23.880 --> 00:12:27.130
navigation mode to navigate to
the location provided in the

00:12:27.130 --> 00:12:30.940
Timeline Item, and Reply, that
will use a microphone from

00:12:30.940 --> 00:12:33.850
Glass to get text input
from the user.

00:12:33.850 --> 00:12:37.280
There are many others built in
menu items that we have in our

00:12:37.280 --> 00:12:38.800
documentation.

00:12:38.800 --> 00:12:42.960
And then we also have
custom menu items.

00:12:42.960 --> 00:12:47.260
This is what you use when you
want to provide custom

00:12:47.260 --> 00:12:48.720
features to the user.

00:12:48.720 --> 00:12:52.060
For example, if you're a news
agency and you're pushing news

00:12:52.060 --> 00:12:54.810
content to a user of Glass, you
might want to provide a

00:12:54.810 --> 00:12:57.060
way for the user to
save an article or

00:12:57.060 --> 00:12:58.515
to vote on an article.

00:12:58.515 --> 00:13:00.840
Glass doesn't know what to do
with that, so you simply

00:13:00.840 --> 00:13:03.110
provide more information
to us.

00:13:03.110 --> 00:13:08.250
You provide an ID, so you get to
know when the user took an

00:13:08.250 --> 00:13:10.860
action, you get to know which
action the user took.

00:13:10.860 --> 00:13:14.330
And then when we push that to
you, it's up to you to process

00:13:14.330 --> 00:13:16.060
the notification.

00:13:16.060 --> 00:13:18.510
And then you also need to
provide more information to

00:13:18.510 --> 00:13:20.670
us, like the display name,
because we don't know how to

00:13:20.670 --> 00:13:24.080
display your custom menu item
in an icon URL that will be

00:13:24.080 --> 00:13:28.560
displayed alongside
the display name.

00:13:28.560 --> 00:13:29.080
All right.

00:13:29.080 --> 00:13:32.020
Now, let's take a quick
look at the code.

00:13:32.020 --> 00:13:34.490
So as I mentioned, adding a
menu item is simply adding

00:13:34.490 --> 00:13:36.730
more property to the
Timeline Resource.

00:13:36.730 --> 00:13:40.310
So again, we create a new
Timeline Item Resource, set

00:13:40.310 --> 00:13:43.900
the text, and then set
a built-in menu item.

00:13:43.900 --> 00:13:47.370
In our case, we want to let the
user be able to share this

00:13:47.370 --> 00:13:49.190
card with other Glassware.

00:13:49.190 --> 00:13:52.620
So you simply set the action
to menu item to share, and

00:13:52.620 --> 00:13:55.940
then add it to the list
of menu items to

00:13:55.940 --> 00:13:57.410
the Timeline Resource.

00:13:57.410 --> 00:14:00.040
Add other properties, use the
service object to push it to

00:14:00.040 --> 00:14:02.700
Glass, and you're good to go.

00:14:02.700 --> 00:14:05.390
Now let's take a quick look
at custom menu items.

00:14:05.390 --> 00:14:07.060
So it's almost the same thing.

00:14:07.060 --> 00:14:11.490
Create a new Timeline Item,
create a new Menu Item, set

00:14:11.490 --> 00:14:14.460
the action to Custom, but now we
need more information from

00:14:14.460 --> 00:14:16.860
you so we know what to do.

00:14:16.860 --> 00:14:20.800
So you need to set the ID so
when the user takes the

00:14:20.800 --> 00:14:23.880
action, the API will push a
notification back to you and

00:14:23.880 --> 00:14:26.520
let you know which action
was taken by the user.

00:14:26.520 --> 00:14:29.560
And also, we need to know how
to display the menu item.

00:14:29.560 --> 00:14:32.870
So simply provide a list of
values with a display name

00:14:32.870 --> 00:14:35.360
that will be displayed when the
user selects the list of

00:14:35.360 --> 00:14:38.520
menu items and an icon that will
be displayed alongside

00:14:38.520 --> 00:14:40.260
the display name.

00:14:40.260 --> 00:14:45.480
Add other properties and then
add the Menu Items to the

00:14:45.480 --> 00:14:47.660
Timeline Resource and push
it to Glass, and

00:14:47.660 --> 00:14:49.600
you're good to go.

00:14:49.600 --> 00:14:52.270
That's pretty simple, right?

00:14:52.270 --> 00:14:53.520
Cool.

00:14:57.056 --> 00:14:58.730
JENNY MURPHY: Next collection.

00:14:58.730 --> 00:15:00.110
Next collection.

00:15:00.110 --> 00:15:01.390
Contacts.

00:15:01.390 --> 00:15:04.450
Here's a flow you're probably
familiar with on Glass.

00:15:04.450 --> 00:15:06.560
Pick a photo, in this case,
a wonderful photo of

00:15:06.560 --> 00:15:09.020
Chipotle the cat.

00:15:09.020 --> 00:15:11.315
Of course you want to share that
with all your friends.

00:15:11.315 --> 00:15:14.170
So you tap, you share,
and you share it with

00:15:14.170 --> 00:15:16.230
your friends on Google+.

00:15:16.230 --> 00:15:19.470
This is a flow of sharing
that shares to contacts.

00:15:19.470 --> 00:15:22.030
In this case, the contact
represents

00:15:22.030 --> 00:15:24.750
that Circle on Google+.

00:15:24.750 --> 00:15:28.320
But contacts can represent other
things, too, anything

00:15:28.320 --> 00:15:29.700
you might want to share to.

00:15:29.700 --> 00:15:32.640
They might represent an
individual person, they might

00:15:32.640 --> 00:15:35.790
represent a group of people like
that circle, or they can

00:15:35.790 --> 00:15:38.440
represent things that are a
little bit more abstract, like

00:15:38.440 --> 00:15:43.620
a whole Glassware or a feature
within a Glassware like Path.

00:15:43.620 --> 00:15:46.780
So let's look at the code that
makes this possible.

00:15:46.780 --> 00:15:50.680
So we're going to create a
Contact Resource, we're going

00:15:50.680 --> 00:15:53.610
to create an object.

00:15:53.610 --> 00:15:54.720
We're going to set an ID.

00:15:54.720 --> 00:15:58.950
This ID is passed back in the
notification so that you can

00:15:58.950 --> 00:16:00.800
figure out which contact
was tripped

00:16:00.800 --> 00:16:03.030
when an item was shared.

00:16:03.030 --> 00:16:05.650
It's how you do the correlation
of the round trip.

00:16:05.650 --> 00:16:08.240
We're going to set some
display properties.

00:16:08.240 --> 00:16:10.370
We're going to set a
name and an icon.

00:16:10.370 --> 00:16:14.110
This is what shows up on
your user's Glass.

00:16:14.110 --> 00:16:16.500
And one property that's a little
more sophisticated,

00:16:16.500 --> 00:16:19.150
we're going to set
Accept Type.

00:16:19.150 --> 00:16:24.050
By default, contacts accept any
kind of content on Glass.

00:16:24.050 --> 00:16:26.960
Any Timeline Item that has been
marked sharable could be

00:16:26.960 --> 00:16:29.060
copied and shared.

00:16:29.060 --> 00:16:34.240
So this includes text Timeline
Items, HTML, images, video.

00:16:34.240 --> 00:16:36.980
But sometimes, the Glassware may
only want to process one

00:16:36.980 --> 00:16:38.830
kind of content.

00:16:38.830 --> 00:16:41.770
In this case, this example, we
only want to process images,

00:16:41.770 --> 00:16:44.760
so we're only going
to accept cards.

00:16:44.760 --> 00:16:48.470
And we specify that using a
Mime Content Type, in this

00:16:48.470 --> 00:16:49.410
case, image/*.

00:16:49.410 --> 00:16:51.020
Accept any type of image.

00:16:53.700 --> 00:16:55.830
Then we insert it,
and that's it.

00:16:55.830 --> 00:16:59.730
The contact is made available,
and users can turn it on in My

00:16:59.730 --> 00:17:01.170
Glass and start sharing
content with it.

00:17:05.359 --> 00:17:07.829
And one more collection,
location.

00:17:07.829 --> 00:17:09.609
So say we want to render
something cool, like

00:17:09.609 --> 00:17:12.290
this map, in a card.

00:17:12.290 --> 00:17:14.300
We want to get the
user's location.

00:17:14.300 --> 00:17:17.329
There's a special collection,
which has its own scope that

00:17:17.329 --> 00:17:21.089
you can request, and the user
can opt to share their

00:17:21.089 --> 00:17:22.890
location with your Glassware.

00:17:22.890 --> 00:17:25.609
If they've done that,
you can check for

00:17:25.609 --> 00:17:26.890
their latest location.

00:17:26.890 --> 00:17:29.500
It's updated about
every 10 minutes.

00:17:29.500 --> 00:17:32.110
This one is super easy to use
because we're just pulling

00:17:32.110 --> 00:17:33.370
from a collection.

00:17:33.370 --> 00:17:35.230
So the code is very simple.

00:17:35.230 --> 00:17:39.520
We just do a Get request for
the latest location, which

00:17:39.520 --> 00:17:41.390
will give us their
location within

00:17:41.390 --> 00:17:43.260
about the past 10 minutes.

00:17:43.260 --> 00:17:44.955
Then we do cool stuff with it.

00:17:44.955 --> 00:17:47.330
In this case, we're doing
something pretty simple.

00:17:47.330 --> 00:17:48.830
We're just printing
out the latitude,

00:17:48.830 --> 00:17:51.320
longitude, and accuracy.

00:17:51.320 --> 00:17:52.890
That's all there really
is to location.

00:17:52.890 --> 00:17:54.375
We read it, we get the
latest location.

00:17:58.040 --> 00:18:00.730
So up until now, we've been
talking about pushing content

00:18:00.730 --> 00:18:03.280
to Glass and having users
interact with the content

00:18:03.280 --> 00:18:06.770
you've pushed to their
Glass device.

00:18:06.770 --> 00:18:10.580
But there's really no mechanism
yet for that

00:18:10.580 --> 00:18:14.170
information to get from their
Glass back to your Glassware.

00:18:14.170 --> 00:18:16.090
What you could actually do is
you could poll all these

00:18:16.090 --> 00:18:18.720
collections every couple minutes
and look for changes.

00:18:18.720 --> 00:18:20.016
You could look for new
cards that have

00:18:20.016 --> 00:18:21.430
been shared with you.

00:18:21.430 --> 00:18:23.960
But that's not very efficient.

00:18:23.960 --> 00:18:26.870
So we have a better way
with subscriptions.

00:18:26.870 --> 00:18:31.890
Subscriptions allow you to
subscribe to notifications

00:18:31.890 --> 00:18:34.710
about changes in collections
on Glass.

00:18:34.710 --> 00:18:36.950
Kind of flips the
API on its head.

00:18:36.950 --> 00:18:41.030
Instead of you posting JSON to
the Mirror API, the Mirror API

00:18:41.030 --> 00:18:42.410
will post JSON back to you.

00:18:46.960 --> 00:18:48.880
Here's some code that
allows you to do it.

00:18:48.880 --> 00:18:51.038
This is code that captures
kind of the first half of

00:18:51.038 --> 00:18:52.930
this, subscribing to
notifications.

00:18:56.060 --> 00:18:58.610
To subscribe to notifications,
you insert an object into a

00:18:58.610 --> 00:19:02.060
collection called subscriptions,
you specify the

00:19:02.060 --> 00:19:03.530
collection you want
to monitor.

00:19:03.530 --> 00:19:05.160
There are a couple of options.

00:19:05.160 --> 00:19:07.390
In this case, you're subscribing
to changes in the

00:19:07.390 --> 00:19:10.144
Timeline Collection.

00:19:10.144 --> 00:19:12.570
You specify a couple
of identifiers.

00:19:12.570 --> 00:19:15.720
These are user-specific
identifiers that are passed

00:19:15.720 --> 00:19:18.400
back in all of the notifications
so that you can

00:19:18.400 --> 00:19:22.110
verify that this is a bona
fide notification, a true

00:19:22.110 --> 00:19:25.270
notification, and you can
identify the user that

00:19:25.270 --> 00:19:27.210
triggered that change.

00:19:27.210 --> 00:19:28.950
And of course, we need somewhere
to send those

00:19:28.950 --> 00:19:30.410
notifications.

00:19:30.410 --> 00:19:32.670
So as part of this description,
you specify a

00:19:32.670 --> 00:19:35.290
URL, and you'll want
to use an HTTPS URL

00:19:35.290 --> 00:19:37.316
to keep things secure.

00:19:37.316 --> 00:19:40.320
Once you have all that together,
you insert it, and

00:19:40.320 --> 00:19:43.760
after this point, any changes
to the Timeline Collection

00:19:43.760 --> 00:19:45.010
will be sent back
to your service.

00:19:48.450 --> 00:19:51.000
When the user takes action, or
over time, for the case of

00:19:51.000 --> 00:19:53.090
locations, you're going
to be receiving these

00:19:53.090 --> 00:19:56.670
pingbacks to that URL.

00:19:56.670 --> 00:19:57.960
The structure looks
a lot like the

00:19:57.960 --> 00:20:00.640
subscription we just inserted.

00:20:00.640 --> 00:20:03.010
Up at the top, we have
the collection.

00:20:03.010 --> 00:20:04.980
On one side, we have
the Timeline.

00:20:04.980 --> 00:20:07.690
On another case, we have
the Locations.

00:20:07.690 --> 00:20:10.370
We have an identifier of the
object that caused the change

00:20:10.370 --> 00:20:11.760
in notifications.

00:20:11.760 --> 00:20:14.700
If there's a shared item, this
is going to be the ID of that

00:20:14.700 --> 00:20:18.400
card in the timeline, same
for a menu trigger.

00:20:21.930 --> 00:20:24.620
Another case for Locations on
the other side, that's always

00:20:24.620 --> 00:20:26.420
going to be the same ID because
Locations always

00:20:26.420 --> 00:20:29.346
surfaces the latest location.

00:20:29.346 --> 00:20:32.590
In both cases, in all
notifications that come back,

00:20:32.590 --> 00:20:35.660
we're going to echo back to
you the User Token and the

00:20:35.660 --> 00:20:38.700
Verify Token so that you can
verify the authenticity and

00:20:38.700 --> 00:20:40.480
the user who made
that request.

00:20:40.480 --> 00:20:41.940
And in the case of Timeline,
we're also going

00:20:41.940 --> 00:20:43.400
to share some metadata.

00:20:43.400 --> 00:20:45.500
In this case, we're telling
you upfront from the

00:20:45.500 --> 00:20:48.270
notification that this is a
share that triggered this so

00:20:48.270 --> 00:20:53.500
you can write cleaner code that
takes advantage of that.

00:20:53.500 --> 00:20:55.280
So let's take a look at the
code for processing that

00:20:55.280 --> 00:20:56.920
notification.

00:20:56.920 --> 00:20:58.580
This code looks a little
different than the code we've

00:20:58.580 --> 00:21:01.160
had up here before.

00:21:01.160 --> 00:21:04.490
Instead of doing an Insert,
we're responding to a request.

00:21:04.490 --> 00:21:07.700
Since we're talking Java today,
we're going to use a

00:21:07.700 --> 00:21:08.340
servelet method.

00:21:08.340 --> 00:21:10.710
In this case, we're going
to handle a post.

00:21:10.710 --> 00:21:14.220
So a post comes on in.

00:21:14.220 --> 00:21:17.830
The notification is given to
us in the request body.

00:21:17.830 --> 00:21:19.830
So the first thing we're going
to do is pull that request

00:21:19.830 --> 00:21:21.940
body and parse the JSON.

00:21:21.940 --> 00:21:23.050
We're going to build
an object.

00:21:23.050 --> 00:21:26.200
We're going to push it into a
notification using Jackson, so

00:21:26.200 --> 00:21:27.790
then we can take action.

00:21:27.790 --> 00:21:30.050
First thing we're going
to do is we're going

00:21:30.050 --> 00:21:31.890
to verify that data.

00:21:31.890 --> 00:21:34.360
We're going to find the user,
we're going to verify the

00:21:34.360 --> 00:21:37.220
Verify Token to make sure
everything's on the up and up,

00:21:37.220 --> 00:21:42.590
and then we're going to create a
Client Object that allows us

00:21:42.590 --> 00:21:45.290
to make calls on their request
using their credentials that

00:21:45.290 --> 00:21:47.770
we got from that OAuth flow.

00:21:47.770 --> 00:21:50.720
And then the fun stuff starts.

00:21:50.720 --> 00:21:53.240
In this case, what we're doing
is if it was a Timeline

00:21:53.240 --> 00:21:57.960
notification, we're going to go
fetch that Timeline Item,

00:21:57.960 --> 00:22:02.560
we can inspect it, and then we
can take action based on it.

00:22:02.560 --> 00:22:04.200
That's the flow you're going
to use for most of your

00:22:04.200 --> 00:22:05.450
notifications coming in.

00:22:08.390 --> 00:22:11.040
That's all the pieces of the
Mirror API that you can use to

00:22:11.040 --> 00:22:13.510
build stuff.

00:22:13.510 --> 00:22:17.390
Here they are, Timeline,
Menu Items, Contacts,

00:22:17.390 --> 00:22:19.680
Subscriptions, and Locations.

00:22:19.680 --> 00:22:21.840
And now let's see how we can
put them together to build

00:22:21.840 --> 00:22:23.090
some cool stuff.

00:22:25.650 --> 00:22:26.762
ALAIN VONGSOUVANH: All right.

00:22:26.762 --> 00:22:28.540
Thank you, Jenny.

00:22:28.540 --> 00:22:30.880
So now we know what the
Mirror API is made of.

00:22:30.880 --> 00:22:33.010
It's quite simple but still
pretty powerful.

00:22:35.600 --> 00:22:38.680
We'd like now to take a moment
to actually dive into some

00:22:38.680 --> 00:22:42.260
demos of Glassware we brought
for you, and we actually have

00:22:42.260 --> 00:22:43.540
two of them.

00:22:43.540 --> 00:22:46.560
First one, it's probably the
most simple Glassware you

00:22:46.560 --> 00:22:49.050
might start with, and we
encourage you to start with

00:22:49.050 --> 00:22:50.300
such a Glassware.

00:22:52.290 --> 00:22:55.200
Cat Facts.

00:22:55.200 --> 00:22:57.650
So everybody loves
Cat Facts, right?

00:22:57.650 --> 00:23:00.480
Just simple Glassware.

00:23:00.480 --> 00:23:04.180
Just receive new Cat Facts every
few minutes, every few

00:23:04.180 --> 00:23:06.220
hours, or when new Cat
Facts are available.

00:23:06.220 --> 00:23:09.416
But on a more serious note,
it's actually how the "New

00:23:09.416 --> 00:23:12.470
York Times" Glassware or the
CNN Glassware is working.

00:23:12.470 --> 00:23:16.220
Every time they get a news
update, they go through a user

00:23:16.220 --> 00:23:19.670
database and then send push
notifications to all users who

00:23:19.670 --> 00:23:21.680
have subscribed.

00:23:21.680 --> 00:23:22.160
Cool.

00:23:22.160 --> 00:23:23.960
Now, let's take a look
at the demo.

00:23:23.960 --> 00:23:28.740
So again, this is a live demo,
and we've been using random

00:23:28.740 --> 00:23:33.390
Cat Facts, so we might have
funny things showing up.

00:23:33.390 --> 00:23:36.170
Let's go back to
my Gmail Glass.

00:23:36.170 --> 00:23:40.680
Let's see what I got
while talking.

00:23:40.680 --> 00:23:43.675
Cats are very lazy and yet
very warm creatures.

00:23:43.675 --> 00:23:44.780
I didn't know that.

00:23:44.780 --> 00:23:45.035
Did you?

00:23:45.035 --> 00:23:46.150
JENNY MURPHY: No, I didn't.

00:23:46.150 --> 00:23:46.580
ALAIN VONGSOUVANH: Wow.

00:23:46.580 --> 00:23:47.510
Cool.

00:23:47.510 --> 00:23:48.020
Now I know.

00:23:48.020 --> 00:23:49.730
It's awesome.

00:23:49.730 --> 00:23:50.630
It's really simple.

00:23:50.630 --> 00:23:52.300
Let's try another one.

00:23:52.300 --> 00:23:56.860
We've seen this one, it's
the item I inserted.

00:23:56.860 --> 00:23:57.890
Let's see if I have one.

00:23:57.890 --> 00:24:01.980
Pure black cats are part of an
ancient cat voodoo cult.

00:24:01.980 --> 00:24:05.350
Might be why some people are
scared of black cats.

00:24:05.350 --> 00:24:05.950
Cool.

00:24:05.950 --> 00:24:07.020
All right.

00:24:07.020 --> 00:24:08.530
So this is Cat Facts.

00:24:08.530 --> 00:24:11.510
It's actually quite simple.

00:24:11.510 --> 00:24:13.490
And we also had a placeholder
for you.

00:24:13.490 --> 00:24:15.820
Did you know that cats
can see in the dark?

00:24:15.820 --> 00:24:17.700
Again, I didn't know.

00:24:17.700 --> 00:24:21.560
That's why I got so spooked
many times by my cat.

00:24:21.560 --> 00:24:25.520
Let's see what Cat Facts used
from the Mirror API.

00:24:25.520 --> 00:24:27.780
Well, this is a pretty
simple Glassware.

00:24:27.780 --> 00:24:29.220
This is the most simple
Glassware you can write.

00:24:29.220 --> 00:24:31.530
It's only using the Timeline
collection.

00:24:31.530 --> 00:24:33.670
We don't need any other features
from the Mirror API

00:24:33.670 --> 00:24:36.440
because we're only pushing
contents to the Glass.

00:24:36.440 --> 00:24:38.560
But for instance, if you wanted
to provide a way for a

00:24:38.560 --> 00:24:41.900
user to save Cat Facts or to
share Cat Facts with their

00:24:41.900 --> 00:24:47.090
friends, you might want to add
menu items, et cetera.

00:24:47.090 --> 00:24:49.840
Let's see what the user
flow looks like.

00:24:49.840 --> 00:24:51.630
Again, it's pretty simple.

00:24:51.630 --> 00:24:54.420
So the user starts
on your website,

00:24:54.420 --> 00:24:57.200
authenticate using OAuth 2.0.

00:24:57.200 --> 00:25:00.540
Then once you get the user's
token, store the

00:25:00.540 --> 00:25:02.360
token in your database.

00:25:02.360 --> 00:25:04.680
And when you get a new Cat Fact
or when your Chron Job

00:25:04.680 --> 00:25:08.960
runs, just go through your
list of users, get the

00:25:08.960 --> 00:25:12.430
credentials, insert a new
service object, insert the

00:25:12.430 --> 00:25:15.750
item into the Mirror API,
and we'll take care of

00:25:15.750 --> 00:25:17.320
the rest from here.

00:25:17.320 --> 00:25:19.300
Google's server will sync with
the user's Glass and

00:25:19.300 --> 00:25:22.300
eventually, Cat Facts will be
pushed to the user's Glass and

00:25:22.300 --> 00:25:25.030
make the user happy.

00:25:25.030 --> 00:25:27.520
Let's take a look at the code.

00:25:27.520 --> 00:25:30.040
Again very simple.

00:25:30.040 --> 00:25:32.670
We start by getting
a random cat fact.

00:25:32.670 --> 00:25:35.300
So this is case, we're only
setting the text, but in your

00:25:35.300 --> 00:25:37.373
Glassware, you might want to
use HTML to be able to add

00:25:37.373 --> 00:25:38.690
your own branding.

00:25:38.690 --> 00:25:42.230
Then we are getting a random cat
fact, but you should get

00:25:42.230 --> 00:25:45.215
push notifications from the news
provider you're getting

00:25:45.215 --> 00:25:46.670
your information from.

00:25:46.670 --> 00:25:51.310
And then you go through all of
your users in your database,

00:25:51.310 --> 00:25:56.210
get their credentials, build
a Mirror service.

00:25:56.210 --> 00:25:57.040
This is Java.

00:25:57.040 --> 00:25:59.490
It might change according to
the language you're using.

00:25:59.490 --> 00:26:02.770
And then push the item
to the user's Glass,

00:26:02.770 --> 00:26:04.630
to the user's Timeline.

00:26:04.630 --> 00:26:07.050
Of course, always check
for exceptions.

00:26:07.050 --> 00:26:09.380
Something bad might happen and
you want to catch that so you

00:26:09.380 --> 00:26:13.330
don't break the process for
all the rest of the users.

00:26:13.330 --> 00:26:14.690
And then that's it.

00:26:14.690 --> 00:26:16.830
You just send all the cat facts
to all of the users.

00:26:16.830 --> 00:26:21.260
But what we did here was
sending a request

00:26:21.260 --> 00:26:22.180
for all of our users.

00:26:22.180 --> 00:26:24.050
There might be a better
way to do that.

00:26:24.050 --> 00:26:28.250
Instead of sending tons of HTTP
requests every hour when

00:26:28.250 --> 00:26:32.325
you get a new update,
you might be able to

00:26:32.325 --> 00:26:33.800
have a better process.

00:26:33.800 --> 00:26:37.810
And actually, API Stacks, on
which the Mirror API is built

00:26:37.810 --> 00:26:41.170
on, supports batching
requests.

00:26:41.170 --> 00:26:44.860
The way it works is that you
simply build a multipart HTTP

00:26:44.860 --> 00:26:48.850
request composed of sub-HTTP
requests, and you send a

00:26:48.850 --> 00:26:52.130
single HTTP request
for all the users.

00:26:52.130 --> 00:26:53.800
So all the current libraries
might not

00:26:53.800 --> 00:26:54.810
support batch requests.

00:26:54.810 --> 00:26:56.740
You should check on
the Project page.

00:26:56.740 --> 00:26:59.090
The Java that we're
using here does

00:26:59.090 --> 00:27:00.900
support batching requests.

00:27:00.900 --> 00:27:04.720
And the way it works is that
you first need to create a

00:27:04.720 --> 00:27:08.600
batch callback class that
extends the JSON batch

00:27:08.600 --> 00:27:10.790
callback interface.

00:27:10.790 --> 00:27:12.430
You need to implement
two methods, on

00:27:12.430 --> 00:27:13.810
success and on failure.

00:27:13.810 --> 00:27:17.450
This is to keep track of which
requests have failed or which

00:27:17.450 --> 00:27:18.950
requests have succeeded.

00:27:18.950 --> 00:27:21.180
In our case, we're only
keeping track of

00:27:21.180 --> 00:27:22.480
the number of requests.

00:27:22.480 --> 00:27:25.160
But in your case, you might want
to keep the request and

00:27:25.160 --> 00:27:28.560
retry again, or if the user had
revoked your token, just

00:27:28.560 --> 00:27:30.970
remove the user from
the database.

00:27:30.970 --> 00:27:35.140
Once you're done implementing
your class, simply create a

00:27:35.140 --> 00:27:37.400
Batch Request from the
Mirror service.

00:27:37.400 --> 00:27:39.720
So this is unauthorized.

00:27:39.720 --> 00:27:42.400
You don't need to authorize
a Batch Request.

00:27:42.400 --> 00:27:45.580
Create the new callback object
and then go through all your

00:27:45.580 --> 00:27:50.120
users again, get a credentials
from the

00:27:50.120 --> 00:27:51.580
database, same as before.

00:27:55.220 --> 00:27:57.770
Create a new Insert Request,
but don't execute the

00:27:57.770 --> 00:27:59.540
request right now.

00:27:59.540 --> 00:28:01.930
Simply add them to the queue
of a Batch Request.

00:28:01.930 --> 00:28:06.780
Once you've added all the
sub-requests to the batch,

00:28:06.780 --> 00:28:09.810
execute the Batch Request and
check out the results.

00:28:09.810 --> 00:28:10.840
That's it.

00:28:10.840 --> 00:28:11.960
You just saved bandwidth.

00:28:11.960 --> 00:28:15.790
You sent multiple requests into
one SQL request, and with

00:28:15.790 --> 00:28:18.070
gzip encoding you might
actually save a lot of

00:28:18.070 --> 00:28:20.400
bandwidth and data.

00:28:20.400 --> 00:28:23.260
But batching requests doesn't
save you quota, though.

00:28:23.260 --> 00:28:25.270
All right, this was
really simple.

00:28:25.270 --> 00:28:28.290
Let's jump into another demo
that leverages the API more.

00:28:31.986 --> 00:28:34.520
JENNY MURPHY: Now we're going to
show you another Glassware.

00:28:34.520 --> 00:28:37.410
This one's a little bit
more sophisticated.

00:28:37.410 --> 00:28:40.952
It makes photos better by
adding cats to them.

00:28:40.952 --> 00:28:44.600
Let's take a look at it.

00:28:44.600 --> 00:28:47.550
So switch into the demo
Glass device.

00:28:47.550 --> 00:28:50.740
Does anyone mind if I
take a photograph?

00:28:50.740 --> 00:28:51.660
Here we go.

00:28:51.660 --> 00:28:53.172
So here's a photo
of all of you.

00:28:53.172 --> 00:28:57.690
What I can do now is I can share
it with not a circle,

00:28:57.690 --> 00:29:01.460
but with Add a Cat to That.

00:29:01.460 --> 00:29:02.880
And we'll loop back in a moment

00:29:02.880 --> 00:29:04.610
just to see what happens.

00:29:04.610 --> 00:29:07.050
So right now, that's being sent
off to the server to get

00:29:07.050 --> 00:29:10.226
processed, have a
cat added to it.

00:29:10.226 --> 00:29:12.030
So let's take a look
at how that works.

00:29:15.580 --> 00:29:18.190
This uses a few more features
of the Mirror API.

00:29:18.190 --> 00:29:20.930
In addition to the Timeline,
which we used to work with the

00:29:20.930 --> 00:29:25.410
card up there and also to change
the card once the proof

00:29:25.410 --> 00:29:29.680
photo comes back, we also used
the Contacts Collection to add

00:29:29.680 --> 00:29:33.170
a contact for adding a cat.

00:29:33.170 --> 00:29:36.180
And we subscribed to changes in
the Timeline Collection so

00:29:36.180 --> 00:29:37.790
we know when it's time to
add a cat to a photo.

00:29:40.640 --> 00:29:44.300
The flow of this Glassware has
a couple different chunks.

00:29:44.300 --> 00:29:47.350
First chunk is the
Bootstrap phase.

00:29:47.350 --> 00:29:49.820
This is a design pattern we
see in a lot of Glassware,

00:29:49.820 --> 00:29:52.500
especially the more
sophisticated ones.

00:29:52.500 --> 00:29:55.980
This gets executed whenever a
user installs this Glassware.

00:29:55.980 --> 00:29:59.060
We do a few different things
to set them up.

00:29:59.060 --> 00:30:00.910
So it starts with the
user authenticating

00:30:00.910 --> 00:30:02.420
for the first time.

00:30:02.420 --> 00:30:05.660
We store their authentication
credentials so that we can

00:30:05.660 --> 00:30:08.900
make requests on their behalf
later, and we immediately do a

00:30:08.900 --> 00:30:09.850
couple things.

00:30:09.850 --> 00:30:12.120
We're going to insert that
contact so they can share

00:30:12.120 --> 00:30:15.170
photos to a Glassware, and we're
also going to insert the

00:30:15.170 --> 00:30:18.210
subscription to their changes
in the Timeline so we know

00:30:18.210 --> 00:30:19.460
when they share a
photo with us.

00:30:23.300 --> 00:30:26.410
Later, when our user is out
about running around, taking

00:30:26.410 --> 00:30:28.800
pictures that could be a little
bit better with the

00:30:28.800 --> 00:30:34.300
addition of a cat, we do
our interesting stuff.

00:30:34.300 --> 00:30:37.610
They take the photo, they
share it with us.

00:30:37.610 --> 00:30:41.530
That causes a notification to
be sent to our Glassware.

00:30:41.530 --> 00:30:45.030
We fetch the bytes of the photo,
take those bytes and

00:30:45.030 --> 00:30:46.200
composite them with the
pictures of the

00:30:46.200 --> 00:30:49.270
cat, making it better.

00:30:49.270 --> 00:30:51.590
Then we go back to their
Timeline and find the card

00:30:51.590 --> 00:30:55.680
that was created when they
shared that, and replace the

00:30:55.680 --> 00:30:57.355
image with our improved image.

00:31:00.830 --> 00:31:01.380
Let's take a look.

00:31:01.380 --> 00:31:03.810
It's already back.

00:31:03.810 --> 00:31:06.248
And here is that
photo improved.

00:31:06.248 --> 00:31:16.010
[APPLAUSE]

00:31:16.010 --> 00:31:17.280
JENNY MURPHY: So let's take a
look at the code that made

00:31:17.280 --> 00:31:18.530
that possible.

00:31:20.340 --> 00:31:21.270
First, we're going to
go through that

00:31:21.270 --> 00:31:22.780
Bootstrap phase again.

00:31:22.780 --> 00:31:24.890
This code will look really
familiar because we're just

00:31:24.890 --> 00:31:26.670
using the basic features
of those two different

00:31:26.670 --> 00:31:28.120
collections.

00:31:28.120 --> 00:31:31.060
First, we're adding
that contact.

00:31:31.060 --> 00:31:33.125
We're giving it a name, we're
setting display properties and

00:31:33.125 --> 00:31:36.960
then ID so we can correlate it
later, and we're setting an

00:31:36.960 --> 00:31:38.280
accept type.

00:31:38.280 --> 00:31:41.290
Our software can make
any image better.

00:31:41.290 --> 00:31:42.350
But we could have made
it more narrow.

00:31:42.350 --> 00:31:44.690
For example, if we only wanted
to process JPEGs, we could

00:31:44.690 --> 00:31:46.320
have said image/JPEG here.

00:31:49.890 --> 00:31:51.455
And then we insert it.

00:31:51.455 --> 00:31:54.880
We're also subscribing to
notifications on the Timeline

00:31:54.880 --> 00:31:56.410
Collection.

00:31:56.410 --> 00:32:00.120
This is pretty much the same
code you saw before.

00:32:00.120 --> 00:32:04.180
We're setting an endpoint,
HTTPS, setting tokens, and

00:32:04.180 --> 00:32:06.980
subscribing.

00:32:06.980 --> 00:32:09.550
Once the Bootstrap phase is
complete, then we are ready to

00:32:09.550 --> 00:32:11.980
start handling those
notifications as they come in

00:32:11.980 --> 00:32:13.230
from photos being shared.

00:32:15.660 --> 00:32:18.230
Pretty similar to last time,
we're using Jackson to parse

00:32:18.230 --> 00:32:20.400
those notifications
as they come in.

00:32:20.400 --> 00:32:23.190
We're verifying the
notification, we're inspecting

00:32:23.190 --> 00:32:25.755
that token and making sure
everything looks clean.

00:32:25.755 --> 00:32:29.460
Fetching the user, creating a
client so that we can make

00:32:29.460 --> 00:32:33.930
requests and manipulate
their Timeline Item.

00:32:33.930 --> 00:32:37.545
And then we call the Add a Cat
to that function to add a cat

00:32:37.545 --> 00:32:39.720
to that Timeline Item.

00:32:39.720 --> 00:32:41.820
Let's dig into there.

00:32:41.820 --> 00:32:44.620
First thing we do up
here is we get the

00:32:44.620 --> 00:32:46.230
Timeline Item that impacted.

00:32:46.230 --> 00:32:49.560
This is a copy of the original
photo that we took that is

00:32:49.560 --> 00:32:51.760
accessible to our Glassware
so that we can

00:32:51.760 --> 00:32:55.010
make changes in place.

00:32:55.010 --> 00:32:57.190
We're going to go through all of
the attachments that are on

00:32:57.190 --> 00:32:59.290
this Timeline Item.

00:32:59.290 --> 00:33:01.520
Typically, a card that's taken
from the built-in camera will

00:33:01.520 --> 00:33:04.470
only have one attachment, but
another Glassware could have

00:33:04.470 --> 00:33:07.750
created and made sharable a
Timeline Item with many

00:33:07.750 --> 00:33:08.860
attachments.

00:33:08.860 --> 00:33:10.860
We're going to iterate through
all of them and make them all

00:33:10.860 --> 00:33:13.150
better, because of course, they
want cats in all of them.

00:33:16.580 --> 00:33:19.625
We're going to get the bytes
and process the photo.

00:33:19.625 --> 00:33:23.060
We're going to do the
composition in that function.

00:33:23.060 --> 00:33:25.050
Then what we're going to do is
we're going to go through each

00:33:25.050 --> 00:33:28.060
one of those attachments and
we're going to remove the one

00:33:28.060 --> 00:33:31.250
that came to us and replace it
with the improved one so that

00:33:31.250 --> 00:33:34.260
the card is replaced in place.

00:33:34.260 --> 00:33:37.520
And then finally, we're going to
update the card itself and

00:33:37.520 --> 00:33:38.240
make it sharable.

00:33:38.240 --> 00:33:40.430
Because of course, you're going
to want to share these

00:33:40.430 --> 00:33:42.750
cat improved photos with social

00:33:42.750 --> 00:33:45.630
networks and other Glassware.

00:33:45.630 --> 00:33:48.730
Then we insert it.

00:33:48.730 --> 00:33:51.840
And that was Add
a Cat to That.

00:33:51.840 --> 00:33:53.460
Slightly more sophisticated
Glassware.

00:33:53.460 --> 00:33:56.400
And yeah, it's silly, but it
shows you how some of those

00:33:56.400 --> 00:33:59.170
features in the API can come
together to maybe produce

00:33:59.170 --> 00:34:03.630
something you didn't think
was quite obvious.

00:34:03.630 --> 00:34:04.880
So let's talk about
next steps.

00:34:10.050 --> 00:34:13.489
So we're now two sessions
into the track.

00:34:13.489 --> 00:34:15.310
I hope you've enjoyed
them so far.

00:34:15.310 --> 00:34:17.050
There are a couple more left and
we'd like to encourage you

00:34:17.050 --> 00:34:18.784
to go check them out.

00:34:18.784 --> 00:34:22.230
We have Hack Your Glass coming
up in a little while where you

00:34:22.230 --> 00:34:24.800
can dive deeper in beyond the
Mirror API on the bleeding

00:34:24.800 --> 00:34:28.130
edge in maybe void your warranty
in the process.

00:34:28.130 --> 00:34:31.070
And immediately after, we have
a fireside chat with a lot of

00:34:31.070 --> 00:34:32.320
the leaders of our team.

00:34:34.840 --> 00:34:37.300
Alain and myself and a whole
bunch of developers from the

00:34:37.300 --> 00:34:41.330
Glass team are hanging out in
the Sandbox so please come by

00:34:41.330 --> 00:34:44.969
later today, maybe tomorrow,
and ask us questions, share

00:34:44.969 --> 00:34:47.280
your ideas, and just chat
with us about Glass.

00:34:47.280 --> 00:34:50.070
We love hearing from you.

00:34:50.070 --> 00:34:54.580
And now and beyond I/O,
we have community

00:34:54.580 --> 00:34:57.690
on the web, of course.

00:34:57.690 --> 00:34:59.720
You can come and find us on
StackOverflow to ask your

00:34:59.720 --> 00:35:02.100
questions about the Mirror
API in Glass.

00:35:02.100 --> 00:35:05.240
You can find our sample
code on GitHub.

00:35:05.240 --> 00:35:07.740
And if you found an issue or
have a feature request, you

00:35:07.740 --> 00:35:09.900
can go to our Issue Track
and report it.

00:35:09.900 --> 00:35:12.537
You can find links to all of
these up on developers.googl

00:35:12.537 --> 00:35:18.230
e.com/glass/community.

00:35:18.230 --> 00:35:20.120
And just for you Explorers
in the audience--

00:35:20.120 --> 00:35:21.585
I see a bunch of you--

00:35:21.585 --> 00:35:25.650
we have a special community for
you to discuss Glass and

00:35:25.650 --> 00:35:27.200
the Mirror API.

00:35:27.200 --> 00:35:30.360
So if you have Glass already,
you can go there right now and

00:35:30.360 --> 00:35:32.930
discuss with your co-explorers,
and if you

00:35:32.930 --> 00:35:36.030
haven't picked up Glass yet,
you'll gain access once you

00:35:36.030 --> 00:35:37.280
pick it up.

00:35:40.400 --> 00:35:41.000
And that's it.

00:35:41.000 --> 00:35:43.210
We have a few minutes
for questions now.

00:35:43.210 --> 00:35:45.955
Thank you for listening to us.

00:35:45.955 --> 00:35:47.890
So if you'd like to come up
to the microphone to ask

00:35:47.890 --> 00:35:49.940
questions, please do.

00:35:49.940 --> 00:35:51.545
And after that, we're going
to be in the Sandbox.

00:35:51.545 --> 00:35:53.514
So if you have questions we
don't have time to answer,

00:35:53.514 --> 00:35:54.502
come ask me there.

00:35:54.502 --> 00:36:01.418
[APPLAUSE]

00:36:01.418 --> 00:36:02.420
ALAIN VONGSOUVANH: Thank you.

00:36:02.420 --> 00:36:03.050
Question?

00:36:03.050 --> 00:36:03.350
AUDIENCE: Yeah.

00:36:03.350 --> 00:36:07.720
So in the Add a Cat example,
you describe removing the

00:36:07.720 --> 00:36:12.690
attachments, modifying them,
and then doing an update.

00:36:12.690 --> 00:36:13.670
Why is that the pattern?

00:36:13.670 --> 00:36:18.330
Why isn't it creating a new
update and pushing that?

00:36:18.330 --> 00:36:19.490
Could you describe
the difference

00:36:19.490 --> 00:36:21.700
between both of those?

00:36:21.700 --> 00:36:24.100
ALAIN VONGSOUVANH: You mean the
client, creating a copy.

00:36:24.100 --> 00:36:26.670
So it's that because the
Glassware, so each Glassware

00:36:26.670 --> 00:36:29.250
has access to their own timeline
only, so you don't

00:36:29.250 --> 00:36:31.430
get to share a common
timeline.

00:36:31.430 --> 00:36:35.090
And so that the user still has
access to the original photo

00:36:35.090 --> 00:36:36.900
if they want to share with
other Glasswares.

00:36:36.900 --> 00:36:39.620
So we create a copy for you that
only your Glassware has

00:36:39.620 --> 00:36:42.430
access to, and you have
ownership over this item.

00:36:42.430 --> 00:36:43.130
AUDIENCE: Got it.

00:36:43.130 --> 00:36:45.250
ALAIN VONGSOUVANH: So you can
do updates on it, and if

00:36:45.250 --> 00:36:48.290
you've been using the Path on
Google+ Glassware, this is

00:36:48.290 --> 00:36:49.110
actually what we're doing.

00:36:49.110 --> 00:36:52.600
So when you share a photo with
Google+, Google+ reports that

00:36:52.600 --> 00:36:55.970
photo and then updates the card
to let the user know that

00:36:55.970 --> 00:36:57.010
it has been processed.

00:36:57.010 --> 00:37:00.220
And then when they get Plus One
or comments, they'll be

00:37:00.220 --> 00:37:01.960
pushed into the bundle.

00:37:01.960 --> 00:37:04.070
AUDIENCE: So you don't have to
create a new one and push it?

00:37:04.070 --> 00:37:04.570
ALAIN VONGSOUVANH: Yes.

00:37:04.570 --> 00:37:05.720
You update the existing one.

00:37:05.720 --> 00:37:09.460
AUDIENCE: And would there be
any time that you would

00:37:09.460 --> 00:37:11.650
actually create a new one?

00:37:11.650 --> 00:37:12.570
ALAIN VONGSOUVANH: It
really depends.

00:37:12.570 --> 00:37:12.920
JENNY MURPHY: For bundles.

00:37:12.920 --> 00:37:13.910
ALAIN VONGSOUVANH: Yeah,
it really depends.

00:37:13.910 --> 00:37:16.990
If you have an Instagram
Glassware, for instance, you

00:37:16.990 --> 00:37:21.580
might want to create multiple
attachments and add them to

00:37:21.580 --> 00:37:25.820
the item so the user can choose
which one they prefer.

00:37:25.820 --> 00:37:26.680
AUDIENCE: OK, got it.

00:37:26.680 --> 00:37:27.110
Thank you.

00:37:27.110 --> 00:37:28.048
ALAIN VONGSOUVANH:
You're welcome.

00:37:28.048 --> 00:37:29.044
JENNY MURPHY: How about
from this side?

00:37:29.044 --> 00:37:29.542
Question?

00:37:29.542 --> 00:37:30.538
AUDIENCE: Hello.

00:37:30.538 --> 00:37:32.350
I'm [INAUDIBLE] from Thailand.

00:37:32.350 --> 00:37:36.650
I'm wondering if it supports
international language, for

00:37:36.650 --> 00:37:40.680
example, Thai language or any
Asian language for displaying

00:37:40.680 --> 00:37:41.930
the timeline.

00:37:44.470 --> 00:37:46.770
JENNY MURPHY: So the Timeline
Items themselves are UTFA, and

00:37:46.770 --> 00:37:49.620
you can actually see from some
of our previous demos, we do

00:37:49.620 --> 00:37:50.910
translation.

00:37:50.910 --> 00:37:53.046
We're actually putting character
sets from other

00:37:53.046 --> 00:37:55.060
languages in there.

00:37:55.060 --> 00:37:56.560
So they should work, and if
you encounter a situation

00:37:56.560 --> 00:37:59.720
where they don't, please
let us know.

00:37:59.720 --> 00:38:01.811
AUDIENCE: How can I know
that it doesn't work?

00:38:01.811 --> 00:38:02.260
JENNY MURPHY: Sorry?

00:38:02.260 --> 00:38:06.560
AUDIENCE: I'm wondering
if this works.

00:38:06.560 --> 00:38:10.780
I saw in the last session
there is a "late-aral"?

00:38:10.780 --> 00:38:11.450
menu?

00:38:11.450 --> 00:38:12.250
JENNY MURPHY: Literal?

00:38:12.250 --> 00:38:13.240
AUDIENCE: Literal, yeah.

00:38:13.240 --> 00:38:17.500
And this works for non-English
languages, too?

00:38:17.500 --> 00:38:18.960
JENNY MURPHY: Yeah, it's
actually one of the really

00:38:18.960 --> 00:38:22.120
cool features of Glass is you
can Google for a translation.

00:38:22.120 --> 00:38:24.480
So I can ask it how to say
something in another language,

00:38:24.480 --> 00:38:26.040
and it reads to me in
that language, too.

00:38:26.040 --> 00:38:26.770
AUDIENCE: OK, cool.

00:38:26.770 --> 00:38:27.030
Thank you.

00:38:27.030 --> 00:38:29.770
JENNY MURPHY: It's
pretty neat.

00:38:29.770 --> 00:38:30.090
AUDIENCE: Hi.

00:38:30.090 --> 00:38:31.990
Billy Lo from Toronto.

00:38:31.990 --> 00:38:35.920
Specifically around the OAuth
integration, it's not quite

00:38:35.920 --> 00:38:41.120
clear how a Glass Mirror API
handles the OAuth Refresh of

00:38:41.120 --> 00:38:45.120
the token because generally,
there's an expiration of the

00:38:45.120 --> 00:38:46.910
OAuth token, right?

00:38:46.910 --> 00:38:49.030
ALAIN VONGSOUVANH: This is
actually part of the protocol

00:38:49.030 --> 00:38:49.950
and our API Stack.

00:38:49.950 --> 00:38:56.280
So usually, what you can do is
either keep the expiry date

00:38:56.280 --> 00:38:58.836
you get when you retrieve an
access token, or the other way

00:38:58.836 --> 00:39:02.790
you can do that is try to send
a request and look for an

00:39:02.790 --> 00:39:04.660
authorized request back
from the API.

00:39:04.660 --> 00:39:08.000
So if you get a 401 or 403
back, try to refresh the

00:39:08.000 --> 00:39:10.110
token, and if this
is successful,

00:39:10.110 --> 00:39:11.110
just use the new token.

00:39:11.110 --> 00:39:11.420
AUDIENCE: I see.

00:39:11.420 --> 00:39:11.730
Thank you.

00:39:11.730 --> 00:39:13.310
ALAIN VONGSOUVANH: And our
client libraries handle that

00:39:13.310 --> 00:39:13.970
for you as well.

00:39:13.970 --> 00:39:14.352
AUDIENCE: Excellent.

00:39:14.352 --> 00:39:15.500
Thank you.

00:39:15.500 --> 00:39:17.280
JENNY MURPHY: The slide
we showed was a slight

00:39:17.280 --> 00:39:20.980
oversimplification to try and
do OAuth in one slide, so

00:39:20.980 --> 00:39:23.660
there's a little more
detail to it.

00:39:23.660 --> 00:39:24.806
This side?

00:39:24.806 --> 00:39:25.620
AUDIENCE: Hi there.

00:39:25.620 --> 00:39:26.170
JENNY MURPHY: Hi.

00:39:26.170 --> 00:39:30.260
AUDIENCE: How soon can we send
audio attachments to the

00:39:30.260 --> 00:39:31.190
Mirror API?

00:39:31.190 --> 00:39:32.170
JENNY MURPHY: Audio
attachments.

00:39:32.170 --> 00:39:35.100
So right now, you can attach
photographs and video, and you

00:39:35.100 --> 00:39:37.510
can take the photos and embed
them into the card.

00:39:37.510 --> 00:39:40.260
Audio attachments is something
we want to support sometime.

00:39:40.260 --> 00:39:43.250
I don't have any specific
timeline on it.

00:39:43.250 --> 00:39:45.310
You can actually attach
them, they just

00:39:45.310 --> 00:39:47.080
don't play right now.

00:39:47.080 --> 00:39:50.890
But as we've mentioned before,
it's in developer preview, so

00:39:50.890 --> 00:39:52.020
that'll be coming
at some point.

00:39:52.020 --> 00:39:52.620
AUDIENCE: Thank you.

00:39:52.620 --> 00:39:53.670
JENNY MURPHY: You're welcome.

00:39:53.670 --> 00:39:56.490
AUDIENCE: Hey, this is Andreas
from Minnesota.

00:39:56.490 --> 00:39:59.930
I'm interested in lower latency
scenarios and wonder

00:39:59.930 --> 00:40:02.280
what round trip times could
be in [INAUDIBLE]

00:40:02.280 --> 00:40:02.910
scenarios.

00:40:02.910 --> 00:40:07.790
And beyond Mirror, if you're
looking at other APIs which

00:40:07.790 --> 00:40:10.350
enable like more real
time things?

00:40:10.350 --> 00:40:12.230
ALAIN VONGSOUVANH: So Timothy
this morning during his

00:40:12.230 --> 00:40:15.050
session announced that we're
working on GDK, so Glass

00:40:15.050 --> 00:40:15.970
Development Kit.

00:40:15.970 --> 00:40:18.150
It's not ready yet.

00:40:18.150 --> 00:40:19.210
We're still working on it.

00:40:19.210 --> 00:40:22.500
Make sure to file feature
requests if you have any, and

00:40:22.500 --> 00:40:24.770
we'll keep you updated when
we have more information.

00:40:24.770 --> 00:40:27.160
JENNY MURPHY: And in the
meantime, I recommend you go

00:40:27.160 --> 00:40:29.100
to the Hack Your
Glass session.

00:40:29.100 --> 00:40:32.530
I think you'll like
the content there.

00:40:32.530 --> 00:40:33.970
Switching sides again.

00:40:33.970 --> 00:40:34.770
Hi.

00:40:34.770 --> 00:40:36.980
AUDIENCE: Is there a character
limit for the bodies of the

00:40:36.980 --> 00:40:39.970
messages, because it looks like
in the Gmail app, emails

00:40:39.970 --> 00:40:41.600
are truncated?

00:40:41.600 --> 00:40:45.890
JENNY MURPHY: So for
content and length.

00:40:45.890 --> 00:40:48.390
So you can fit about seven lines
comfortably, but they're

00:40:48.390 --> 00:40:50.470
variable with fonts.

00:40:50.470 --> 00:40:52.100
AUDIENCE: So when you have
multiple cards, though, the

00:40:52.100 --> 00:40:53.230
message will keep going?

00:40:53.230 --> 00:40:54.160
JENNY MURPHY: Yes, you can
have multiple cards.

00:40:54.160 --> 00:40:55.920
AUDIENCE: Is there a
limit on how many

00:40:55.920 --> 00:40:57.300
characters you can put?

00:40:57.300 --> 00:40:58.420
JENNY MURPHY: There are a
couple ways to do this.

00:40:58.420 --> 00:41:01.950
If you're handcrafting HTML,
you kind of frame it so it

00:41:01.950 --> 00:41:03.570
fits in there well.

00:41:03.570 --> 00:41:05.910
If you have plain text content,
we'll actually page

00:41:05.910 --> 00:41:07.280
it for you automatically.

00:41:07.280 --> 00:41:08.540
That's how Gmail supports it.

00:41:08.540 --> 00:41:11.200
AUDIENCE: Is that a bug
in the Gmail app then?

00:41:11.200 --> 00:41:13.990
If you have a long email, it
truncates the message and you

00:41:13.990 --> 00:41:16.040
can't read the full
email on Glass.

00:41:16.040 --> 00:41:17.250
JENNY MURPHY: You can't
read the full email?

00:41:17.250 --> 00:41:18.660
It should be showing
you the full email.

00:41:18.660 --> 00:41:22.965
So if you can show that to me,
swing back by the Sandbox, and

00:41:22.965 --> 00:41:23.710
we'll take a peek.

00:41:23.710 --> 00:41:24.340
AUDIENCE: Thanks.

00:41:24.340 --> 00:41:27.640
JENNY MURPHY: I think we have
time for one more quick one.

00:41:27.640 --> 00:41:27.710
ALAIN VONGSOUVANH:
Seven seconds.

00:41:27.710 --> 00:41:30.030
JENNY MURPHY: Six
seconds left.

00:41:30.030 --> 00:41:31.370
AUDIENCE: So I've
been wondering--

00:41:31.370 --> 00:41:33.760
Timothy showed this morning the
Facebook application which

00:41:33.760 --> 00:41:36.860
allows you to add a caption to
a photo after sharing it.

00:41:36.860 --> 00:41:40.890
I've been wondering what kind
of menu item this is.

00:41:40.890 --> 00:41:42.260
ALAIN VONGSOUVANH: It's
a reply menu item.

00:41:42.260 --> 00:41:44.950
AUDIENCE: So you can change
the way the standard menu

00:41:44.950 --> 00:41:45.700
items are displayed?

00:41:45.700 --> 00:41:45.940
ALAIN VONGSOUVANH: Yes.

00:41:45.940 --> 00:41:48.650
So you can use built-in menu
items and override the display

00:41:48.650 --> 00:41:49.650
name and the icon.

00:41:49.650 --> 00:41:51.216
AUDIENCE: OK, thanks.

00:41:51.216 --> 00:41:52.670
ALAIN VONGSOUVANH: So for other
questions, we'll be at

00:41:52.670 --> 00:41:53.680
the Sandbox.

00:41:53.680 --> 00:41:56.100
Feel free to swing by and ask
us any questions you have.

00:41:56.100 --> 00:41:56.530
JENNY MURPHY: Yes.

00:41:56.530 --> 00:41:57.290
Come talk to us.

00:41:57.290 --> 00:41:58.490
We love talking about Glass.

00:41:58.490 --> 00:41:59.850
ALAIN VONGSOUVANH: Thank
you for coming.

00:41:59.850 --> 00:42:01.100
JENNY MURPHY: Thank
you, everyone.

