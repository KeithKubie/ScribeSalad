WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.374
[MUSIC PLAYING]

00:00:02.748 --> 00:00:05.430
SPEAKER 1: Making your
app big puts it at risk

00:00:05.430 --> 00:00:08.039
to suffer from all
these downsides.

00:00:08.039 --> 00:00:11.040
Bigger apps lose acquisitions,
and bigger apps also

00:00:11.040 --> 00:00:13.260
get uninstalled
to free up space.

00:00:13.260 --> 00:00:14.940
I'm sure you already know that.

00:00:14.940 --> 00:00:16.740
And you've probably
just considered it

00:00:16.740 --> 00:00:19.350
a trade-off that
you add new features

00:00:19.350 --> 00:00:21.750
and support more
device configurations

00:00:21.750 --> 00:00:25.230
but lose installs and
drive more uninstalls.

00:00:25.230 --> 00:00:29.815
We don't want you to have to
worry about these trade-offs.

00:00:29.815 --> 00:00:32.439
SPEAKER 2: That App Bundle
is the official Android app

00:00:32.439 --> 00:00:34.510
publishing format.

00:00:34.510 --> 00:00:36.510
Apps that have already
adopted the bundle

00:00:36.510 --> 00:00:40.630
are seeing an average
size saving of 35%.

00:00:40.630 --> 00:00:43.450
That's compared to a universal
APK, and that's quite a lot.

00:00:46.629 --> 00:00:48.170
All these developers
around the world

00:00:48.170 --> 00:00:51.410
have switched and are seeing
fantastic size savings.

00:00:51.410 --> 00:00:54.800
Duolingo, for example,
saw a 56% size saving

00:00:54.800 --> 00:00:56.960
compared to a universal APK.

00:00:56.960 --> 00:00:59.240
And it's really hard
to get such big savings

00:00:59.240 --> 00:01:00.980
from incremental optimizations.

00:01:05.580 --> 00:01:08.290
SPEAKER 1: We've added a new
Android platform optimisation

00:01:08.290 --> 00:01:13.120
to the App Bundle called
uncompressed native libraries.

00:01:13.120 --> 00:01:14.020
Here's how it works.

00:01:14.020 --> 00:01:15.910
On Android L and
below, native libraries

00:01:15.910 --> 00:01:17.830
have to be uncompressed
from the APK

00:01:17.830 --> 00:01:19.660
before the platform
can use them,

00:01:19.660 --> 00:01:23.580
meaning the user ends up with
two copies of the library.

00:01:23.580 --> 00:01:26.560
After Android M, the
platform can read the library

00:01:26.560 --> 00:01:30.220
directly from the APK if it's
left uncompressed, thus saving

00:01:30.220 --> 00:01:31.990
a copy on the device.

00:01:31.990 --> 00:01:34.060
To do it yourself,
you would need

00:01:34.060 --> 00:01:35.680
to upload two
versions of your app

00:01:35.680 --> 00:01:39.190
and create multi APK
for pre- and post-M.

00:01:39.190 --> 00:01:41.260
If you're using the App
Bundle, you just give us

00:01:41.260 --> 00:01:45.160
your libraries, and we create
the required flavor for pre-

00:01:45.160 --> 00:01:47.740
and post-M and serve the
right APK to the right user.

00:01:51.037 --> 00:01:53.940
Dynamic features can
be installed on demand

00:01:53.940 --> 00:01:55.860
when user requests them.

00:01:55.860 --> 00:01:59.340
Or you can choose to defer
installing them to a later time

00:01:59.340 --> 00:02:01.650
when the app goes
to the background.

00:02:01.650 --> 00:02:05.400
For pre-L devices which don't
support on-demand features,

00:02:05.400 --> 00:02:08.070
we can fuse the modules
into the main app

00:02:08.070 --> 00:02:10.860
so they're delivered
at install time.

00:02:10.860 --> 00:02:12.690
All of these use
cases are supported

00:02:12.690 --> 00:02:14.250
in production
to-date, with millions

00:02:14.250 --> 00:02:15.810
of users benefiting already.

00:02:21.090 --> 00:02:23.400
Now that we've created
our on-demand modules,

00:02:23.400 --> 00:02:25.860
let's write the code
to download them.

00:02:25.860 --> 00:02:27.690
In order to interact
with the Play Store

00:02:27.690 --> 00:02:29.730
to request these
on-demand modules,

00:02:29.730 --> 00:02:32.820
we have to use the split
install API which is

00:02:32.820 --> 00:02:35.190
part of the Play core library.

00:02:35.190 --> 00:02:37.320
This is a Java client
library that communicates

00:02:37.320 --> 00:02:39.010
with the Play Store via IPC.

00:02:43.206 --> 00:02:46.190
SPEAKER 2: Android Studio and
Gradle are not the only ways

00:02:46.190 --> 00:02:48.050
that you can build
bundles today.

00:02:48.050 --> 00:02:51.500
Because the format and
bundle tool are open source,

00:02:51.500 --> 00:02:53.690
others are already
adopting them.

00:02:53.690 --> 00:02:56.780
For example, we're excited to
share that games using Unity

00:02:56.780 --> 00:02:59.900
can now build Android
app bundles too.

00:02:59.900 --> 00:03:03.720
Unity added support in
the 2018.3 beta release,

00:03:03.720 --> 00:03:05.450
and you can join the
beta program now.

00:03:08.750 --> 00:03:11.200
[MUSIC PLAYING]

