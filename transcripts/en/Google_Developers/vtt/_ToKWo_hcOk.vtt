WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:06.970
And so when I expand this out, I can see the
HTTP post as the server viewed it and I can

00:00:06.970 --> 00:00:10.370
see that there was a JDBC select call that
happened on the server.

00:00:10.370 --> 00:00:15.389
So what we've done, then, is combined all
the sources of latency, client, network, server,

00:00:15.389 --> 00:00:19.270
all into one view inside Speed Tracer.
It helps you drill down and find any source

00:00:19.270 --> 00:00:24.320
of latency whatsoever.
So Spring Insight comes with the developer

00:00:24.320 --> 00:00:28.350
edition of TC Server as part of Springsource
tools.

00:00:28.350 --> 00:00:33.080
And that's great for tuning performance at
your desktop.

00:00:33.080 --> 00:00:39.070
At some point, you feel like it's good enough.
If you've used Google plug-in for Eclipse,

00:00:39.070 --> 00:00:42.830
you know that deploying is really just, essentially,
a one-button click.

00:00:42.830 --> 00:00:46.850
There's an App Engine icon inside Eclipse.
You click that icon.

00:00:46.850 --> 00:00:49.560
It goes to App Engine and continues running
as it did before.

00:00:49.560 --> 00:00:55.430
So we clicked that button.
And so now we have the same application running

00:00:55.430 --> 00:01:03.239
on App Engine.
And the network is a bit slow.

00:01:03.239 --> 00:01:07.320
So this is the same application, same code,
simple upload.

00:01:07.320 --> 00:01:13.350
We've added some additional data to make it
more realistic.

00:01:13.350 --> 00:01:17.780
But if you've ever done any sort of real performance
tuning, you know the way it works on your

00:01:17.780 --> 00:01:21.040
desk is not the way it's going to work in
production; right?

00:01:21.040 --> 00:01:25.200
So you need the same sort of tools we were
talking about, but you need them to work even

00:01:25.200 --> 00:01:29.690
on your production server in the cloud.
Well, it turns out App Engine introduced something

00:01:29.690 --> 00:01:32.360
that's almost exactly like Spring Insight
two months ago.

00:01:32.360 --> 00:01:36.060
It's called app stats.
And if you've seen app stats, you realize

00:01:36.060 --> 00:01:40.940
that, wow, if you could get that data, pull
that into Speed Tracer, then you could always

00:01:40.940 --> 00:01:45.030
do diagnostics and performance tuning, even
when your code is running in production on

00:01:45.030 --> 00:01:48.420
App Engine.
And, indeed, we did do that and integrated

00:01:48.420 --> 00:01:53.540
it back into Speed Tracer.
So, as you can click around here, use the

00:01:53.540 --> 00:01:59.970
app a bit, we'll come back over to Speed Tracer,
zoom out, take a look at some of the network

00:01:59.970 --> 00:02:07.000
events here at the end.
And -- well, network here is horribly slow.

00:02:07.000 --> 00:02:12.569
But you see these icons popping in.
That indicates that we have App Stats data

00:02:12.569 --> 00:02:15.549
integrated back into Speed Tracer.
Here you can see where we've hit the App Engine

00:02:15.549 --> 00:02:20.850
data store.
So --

00:02:20.850 --> 00:02:24.330
[ Applause ]
&gt;&gt;Bruce Johnson: Thank you, thank you, thank

00:02:24.330 --> 00:02:27.669
you.
That was not really -- I wasn't seeking applause,

00:02:27.669 --> 00:02:33.450
I was just gathering my thoughts.
Although, it is cool, I think.

00:02:33.450 --> 00:02:34.939
Okay.
So these are all tools; right?

00:02:34.939 --> 00:02:39.120
We've been talking about the tools, editing,
debugging, deployment, performance tuning

00:02:39.120 --> 00:02:42.829
and so on.
Tools are definitely a huge part of the story.

00:02:42.829 --> 00:02:48.090
But, to be really productive, you also need
great widget libraries and a great app framework.

00:02:48.090 --> 00:02:53.609
Now, we've been a little deficient in the
widget area in GWT in the sense that people

00:02:53.609 --> 00:02:59.389
want easy-to-use widgets that are -- you drop
them -- or you code them into your app.

00:02:59.389 --> 00:03:03.260
It's very easy to connect those widgets to
data that lives in the cloud or on the database

00:03:03.260 --> 00:03:05.469
or so on.
And they want to make it really easy to connect

00:03:05.469 --> 00:03:09.489
widgets to each other with a minimum of glue
code.

00:03:09.489 --> 00:03:12.629
So we've taken this seriously as part of GWT
2.1.

00:03:12.629 --> 00:03:16.689
And so we've got a new set of data presentation
widgets that we're really, really excited

00:03:16.689 --> 00:03:20.779
about.
Now, if you're like us, you've seen dozens

00:03:20.779 --> 00:03:26.329
of AJAX widget demos where they show you the
kitchen sink; right?

00:03:26.329 --> 00:03:30.531
So I wouldn't presume that you'd be especially
excited to see some new widgets.

00:03:30.531 --> 00:03:35.389
So I was thinking about how I can actually
make you interested in this anyway.

00:03:35.389 --> 00:03:40.040
So I said, well, we know that these widgets
have been designed to be lightweight, fast,

00:03:40.040 --> 00:03:44.489
small, and work with massive data sets.
But let me actually figure out a way to convince

00:03:44.489 --> 00:03:49.159
you that it actually works that well.
I said to the team, like, "Hey, let's do some

00:03:49.159 --> 00:03:53.760
ridiculous amount of data, like 18 million
records and show that everything still works

00:03:53.760 --> 00:03:56.400
fast."
I was joking, but they took me seriously.

00:03:56.400 --> 00:04:04.519
So yesterday, I think the latest numbers were,
we had filled this database full of 125,000

00:04:04.519 --> 00:04:11.169
employees, 5,000 expense reports, each of
which has multiple line items, for a total

00:04:11.169 --> 00:04:17.820
of about 20 million line items.
So a nontrivial amount of data, I think 125,000

00:04:17.820 --> 00:04:21.972
employees for an expense report app is probably
towards the high end.

00:04:21.972 --> 00:04:25.570
So now I want you to take a look at the widgets
and think about how this app is performing,

00:04:25.570 --> 00:04:31.110
knowing that we're working against a database
with, you know, 20 million-plus records.

00:04:31.110 --> 00:04:33.810
Okay?
So what sort of things do you want to do?

00:04:33.810 --> 00:04:39.230
Let's see.
I'll -- I'll page.

00:04:39.230 --> 00:04:47.570
And here I'm paging through 5 million records,
expense reports.

00:04:47.570 --> 00:04:50.910
Try this yourself.
Because on a noncongested wireless, you'll

00:04:50.910 --> 00:04:53.400
find that it pages about as fast as you'd
want it to.

00:04:53.400 --> 00:04:58.100
Actually, this does sort of undermine my point,
doesn't it?

00:04:58.100 --> 00:04:59.431
[ Laughter ]
&gt;&gt;Bruce Johnson: Wired.

00:04:59.431 --> 00:05:17.220
We'll see if the wired connection kicks in.
Am I brave enough to do this?

00:05:17.220 --> 00:05:18.580
Yeah.
Okay.

00:05:18.580 --> 00:05:24.830
[ Applause ]
&gt;&gt;Bruce Johnson: Much better; right?

00:05:24.830 --> 00:05:26.930
So that was what you were supposed to get
excited about.

00:05:26.930 --> 00:05:29.170
Everybody needs to page through 5 million
records.

00:05:29.170 --> 00:05:32.520
And when you do that, you want it to be fast.
Okay.

00:05:32.520 --> 00:05:36.770
So sorting is often done.
So you click on the header and you want to

00:05:36.770 --> 00:05:41.400
sort quickly.
Quickly.

00:05:41.400 --> 00:05:44.520
Sort by date.
You know, I mean, we're talking about seconds,

00:05:44.520 --> 00:05:48.800
which seems like a long time in demos, but
when you think about sorting 5 million records

00:05:48.800 --> 00:05:52.090
inside your own company, if you have to wait
a couple seconds, not too bad.

00:05:52.090 --> 00:05:58.950
As you can see, as it warms up through more
use, it gets faster and faster and faster.

00:05:58.950 --> 00:06:02.020
Okay.
So maybe I want to narrow down by department.

00:06:02.020 --> 00:06:05.620
Right now, they're all intermingled.
I click on that, and I'm looking, among the

00:06:05.620 --> 00:06:10.980
5 million, the ones that are just in engineering,
or maybe finance, or maybe marketing.

00:06:10.980 --> 00:06:15.880
Maybe I want to drill down to an individual
person, also very fast.

00:06:15.880 --> 00:06:18.400
Right?
You saw before how quickly we can jump into

00:06:18.400 --> 00:06:22.600
the details of any person we pick among the
20 million line items.

00:06:22.600 --> 00:06:28.450
All right.
Another neat feature is the ability to search

00:06:28.450 --> 00:06:32.080
and highlight within the page.
So here we see a lot of expense reports with

00:06:32.080 --> 00:06:37.130
W slash, so I'll type on a keystroke-by-keystroke,
you'll see it matching the records in the

00:06:37.130 --> 00:06:42.150
current page, W, space, slash, Z.
That keeps up with me.

00:06:42.150 --> 00:06:46.150
That's fantastic.
And now I can press enter, and it will do

00:06:46.150 --> 00:06:50.120
an actual query that will give me back a result
set that matches my search term.

00:06:50.120 --> 00:06:53.650
So I'm going to press "enter."
One, two, three, enter.

00:06:53.650 --> 00:06:58.270
And now, among the 5 million expense reports,
I am getting the ones that match my search

00:06:58.270 --> 00:07:02.030
term and I can continue to page through those
at my leisure.

00:07:02.030 --> 00:07:11.640
[ Applause ]
&gt;&gt;Bruce Johnson: Thanks.

00:07:11.640 --> 00:07:15.330
Okay.
Quick refresh of where we are.

00:07:15.330 --> 00:07:20.580
A few minutes ago, you saw a start with a
empty directory. In less than 200 keystrokes,

00:07:20.580 --> 00:07:23.450
we had the scaffolding app.
We used the tools that now are integrated

00:07:23.450 --> 00:07:28.160
and that work really well together, spent
a couple of days to create a more full-feature

00:07:28.160 --> 00:07:32.840
application.
We tuned it on the desktop, using Spring Insight

00:07:32.840 --> 00:07:36.330
and Speed Tracer.
With one click, we deployed it to App Engine.

00:07:36.330 --> 00:07:40.330
We continue to tune it using Speed Tracer
plus App Stats.

00:07:40.330 --> 00:07:44.250
And we uploaded a massive amount of data.
It literally took a couple of days to get

00:07:44.250 --> 00:07:47.210
that much data in the database, as a matter
of fact.

00:07:47.210 --> 00:07:50.510
And the app still runs exactly like you'd
want it to.

00:07:50.510 --> 00:07:58.720
We think that's pretty cool.
And we're excited for you guys to try these

00:07:58.720 --> 00:08:01.450
tools yourself.
[ Applause ]

00:08:01.450 --> 00:08:04.430
&gt;&gt;David Glazer: Thank you, Bruce.
Thank you, Ben.

00:08:04.430 --> 00:08:08.550
If you want to learn more, there are sessions.
You can find them on your Android app, you

00:08:08.550 --> 00:08:12.530
can find them in the schedule where you can
listen to the sessions and talk to the engineers

00:08:12.530 --> 00:08:15.930
afterwards.
What you just saw is not just a pretty cool

00:08:15.930 --> 00:08:19.669
app built on stage.
What you also saw is the tools to let you

00:08:19.669 --> 00:08:26.290
build those kind of app was that kind of performance
for your company, your needs, your use cases.

00:08:26.290 --> 00:08:30.990
Well, the second promise we made is, we were
going to show you how to make those apps mobile-ready.

00:08:30.990 --> 00:08:36.089
I'm happy to say that that exact same widget
library that Bruce just showed you, and showed

00:08:36.089 --> 00:08:42.180
you how well it performs on a laptop at work,
that same widget library is ready for mobile

00:08:42.180 --> 00:08:46.379
devices, makes it much easier to take one
application and say, "I want to access this

00:08:46.379 --> 00:08:51.540
data from all the devices I'm using, from
tablets, from phones," which matches the real-world

00:08:51.540 --> 00:08:56.050
use needs for applications like this.
To show you how this works, I'm going to ask

00:08:56.050 --> 00:09:02.149
Ben and Bruce to come back up, and show you
the same expense app how it runs on Mobile

00:09:02.149 --> 00:09:10.529
devices using the same widget libraries.
&gt;&gt;&gt; Hello, again.

00:09:10.529 --> 00:09:17.769
&gt;&gt;Bruce Johnson: All the cool widgets against
a massive data set.

00:09:17.769 --> 00:09:22.889
That was all in a desktop browser.
But if your companies are like Google, chances

00:09:22.889 --> 00:09:24.899
are people are not at their desks all the
time.

00:09:24.899 --> 00:09:29.319
They have all these great new mobile devices.
And you want to make sure these apps work

00:09:29.319 --> 00:09:33.899
well and are available on the device that
your users happen to actually be using.

00:09:33.899 --> 00:09:38.170
Well, as it turns out, when we designed these
news widgets that I was just bragging about,

00:09:38.170 --> 00:09:42.709
we made sure from the beginning that they
worked particularly well on mobile devices,

00:09:42.709 --> 00:09:46.860
you know, you have to think about mobile devices
are typically slower CPUs to save battery.

00:09:46.860 --> 00:09:49.130
You have slower network connections and so
on.

