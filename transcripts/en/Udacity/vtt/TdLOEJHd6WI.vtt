WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So the goal for the rest of this unit is to modify our search engine code,

00:00:04.000 --> 00:00:07.000
to implement the PageRank algorithm.

00:00:07.000 --> 00:00:09.000
We have one little problem.

00:00:09.000 --> 00:00:15.000
PageRank is a registered trademark of Google, so we're not going to call our algorithm PageRank,

00:00:15.000 --> 00:00:17.000
even though we'll do the same thing.

00:00:17.000 --> 00:00:20.000
We'll call it URank.

00:00:20.000 --> 00:00:23.000
The first thing we need to be able to do to implement this ranking algorithm

00:00:23.000 --> 00:00:26.000
is keep track of the link graph.

00:00:26.000 --> 00:00:31.000
So our popularity of pages depends on the link structure.

00:00:31.000 --> 00:00:35.000
So that means we need to keep track of what pages link to what pages.

00:00:35.000 --> 00:00:40.000
So for each link, there's a connection between pages.

00:00:40.000 --> 00:00:42.000
And we can think of that as a graph.

00:00:42.000 --> 00:00:45.000
Abstractly a graph is just a set of nodes.

00:00:45.000 --> 00:00:50.000
We'll draw those as circles with edges between the nodes.

00:00:50.000 --> 00:00:54.000
And because our edges go one way, just like links in a page,

00:00:54.000 --> 00:00:57.000
we call this a directed graph.

00:00:57.000 --> 00:01:02.000
So in order to represent our web link structure, we need to build a directed graph.

00:01:02.000 --> 00:01:05.000
The pages in the graph are the nodes.

00:01:05.000 --> 00:01:08.000
For each page, we need to keep track of the edges

00:01:08.000 --> 00:01:11.000
that connect that node to other nodes.

00:01:11.000 --> 00:01:16.000
And so the way we're going to do this is to keep a dictionary.

00:01:16.000 --> 00:01:21.000
So, we're going to have a dictionary where the entries in the dictionary are the node, which is the URL.

00:01:21.000 --> 00:01:23.000
That's the page.

00:01:23.000 --> 00:01:27.000
And for each URL, we'll have a list of all the pages that it links to.

00:01:27.000 --> 00:01:33.000
So if this was, say, node A and these were nodes B, C, and D,

00:01:33.000 --> 00:01:36.000
our entry for node A would contain the list B, C, D,

00:01:36.000 --> 00:01:39.000
and our entry for node B--

00:01:39.000 --> 00:01:44.000
Well, there are no edges out of B, so it would be an empty list.

00:01:44.000 --> 00:01:49.000
And finishing the example, C has an outlink to one node,

00:01:49.000 --> 00:01:52.000
and D has not outlinks.

00:01:52.000 --> 00:01:59.000
So that's our goal. We want to build a structure like this that shows the structure of the web pages that we crawl.

00:01:59.000 --> 00:02:03.000
And we see that structure because we're following the links in our crawler.

00:02:03.000 --> 00:02:10.000
So our goal is to modify the crawl&lt;u&gt;web procedure that we defined at the end of unit 5&lt;/u&gt;

00:02:10.000 --> 00:02:15.000
and to modify it so instead of just producing an index, it also produces a graph.

00:02:15.000 --> 00:02:20.000
So we're going to modify crawl&lt;u&gt;web. It's still going to take a seed page as its start.&lt;/u&gt;

00:02:20.000 --> 00:02:24.000
But what it's going to produce now is both an index and a graph,

00:02:24.000 --> 00:02:30.000
and the graph is a structure that gives the mapping from each node to the pages that it links to.

00:02:30.000 --> 00:02:35.000
So let's look at the code that we had at the end of unit 5 and see how we need to change that.

00:02:35.000 --> 00:02:39.000
So here's the code that we had at the end of unit 5 for crawling the web.

00:02:39.000 --> 00:02:44.000
And as a reminder, we're keeping track of the pages left to crawl in the list tocrawl

00:02:44.000 --> 00:02:46.000
starting with the seed page.

00:02:46.000 --> 00:02:48.000
And we're building up the index as a dictionary.

00:02:48.000 --> 00:02:50.000
And as long as there are more pages left to crawl,

00:02:50.000 --> 00:02:56.000
we go through the Y loop, which finds a page to crawl, popping fill list pages to crawl.

00:02:56.000 --> 00:02:58.000
As long as it's one we haven't crawled before,

00:02:58.000 --> 00:03:01.000
it gets the content from that page; it adds it to the index.

00:03:01.000 --> 00:03:05.000
It finds all the links using get&lt;u&gt;all&lt;u&gt;links, passing in the content on the page&lt;/u&gt;&lt;/u&gt;

00:03:05.000 --> 00:03:08.000
and unions those with tocrawl to update the tocrawl list,

00:03:08.000 --> 00:03:12.000
and then it appends this page to the list of pages that have already been crawled.

00:03:12.000 --> 00:03:18.000
So to change this to build a graph, we're going to keep most of the code the same.

00:03:18.000 --> 00:03:21.000
In addition to producing just the index, we're going to produce a graph,

00:03:21.000 --> 00:03:24.000
and the graph is also going to be a dictionary.

00:03:24.000 --> 00:03:27.000
And the reason the graph is a dictionary is that the mapping from nodes,

00:03:27.000 --> 00:03:31.000
which are URLs, to the list of edges that go out from that node.

00:03:31.000 --> 00:03:34.000
So we'll create the graph as an empty dictionary,

00:03:34.000 --> 00:03:37.000
and as we find new pages, we're going to add them to the graph.

00:03:37.000 --> 00:03:42.000
And we're going to also change the return to return both the index and the graph.

00:03:42.000 --> 00:03:45.000
I'm going to make one more change before we give you a quiz,

00:03:45.000 --> 00:03:49.000
and the change I'm going to make is instead of calling get&lt;u&gt;all&lt;u&gt;links here,&lt;/u&gt;&lt;/u&gt;

00:03:49.000 --> 00:03:55.000
since both the graph building and the tocrawl list depend on knowing all the links,

00:03:55.000 --> 00:03:59.000
we're going to create a new variable, and we'll assign the result of get&lt;u&gt;all&lt;u&gt;links content&lt;/u&gt;&lt;/u&gt;

00:03:59.000 --> 00:04:01.000
to that variable.

00:04:01.000 --> 00:04:05.000
that means we can use those links as the input to content,

00:04:05.000 --> 00:04:08.000
but we can also use them to build the graph.

00:04:08.000 --> 00:04:13.000
And I'm going to leave the line that we need to build the graph for you to complete.

00:04:13.000 --> 00:04:16.000
So we'll make that a quiz, to finish this code.

00:04:16.000 --> 99:59:59.000
Write the line that we need to update the graph.

