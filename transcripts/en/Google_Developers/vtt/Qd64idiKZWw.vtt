WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.402
[MUSIC PLAYING]

00:00:04.402 --> 00:00:05.860
WESLEY CHUN:
[GERMAN],, developers.

00:00:05.860 --> 00:00:08.140
Those who speak German
know that means "good day."

00:00:08.140 --> 00:00:09.680
Speaking of days,
did you know you

00:00:09.680 --> 00:00:11.860
could use email markup and
the Google Calendar API

00:00:11.860 --> 00:00:15.310
so your apps can create calendar
events on behalf of your users?

00:00:15.310 --> 00:00:16.180
Well, it's true.

00:00:16.180 --> 00:00:18.410
I've got code and
videos to prove it.

00:00:18.410 --> 00:00:19.330
But plans change.

00:00:19.330 --> 00:00:21.310
And wouldn't it be
awesome if you could also

00:00:21.310 --> 00:00:25.060
update events when plans change
or create repeating events?

00:00:25.060 --> 00:00:26.650
Welcome to the "G
Suite Dev Show."

00:00:26.650 --> 00:00:28.060
I'm your host, Wesley Chun.

00:00:28.060 --> 00:00:29.680
Today, we'll show
how your apps can

00:00:29.680 --> 00:00:32.740
update existing events with a
Calendar API and, as a bonus,

00:00:32.740 --> 00:00:34.570
make them repeat, too.

00:00:34.570 --> 00:00:36.310
In the video on email
markup, I describe

00:00:36.310 --> 00:00:38.140
how it helps Gmail
automatically add events

00:00:38.140 --> 00:00:39.550
to your user's calendars.

00:00:39.550 --> 00:00:42.550
It's simple and doesn't
require you to write any code.

00:00:42.550 --> 00:00:44.860
You're only adding markup
to messages you're already

00:00:44.860 --> 00:00:46.120
sending to users.

00:00:46.120 --> 00:00:47.890
Check out the video
and email markup docs

00:00:47.890 --> 00:00:50.320
to see how to do this
with the links down below.

00:00:50.320 --> 00:00:53.320
But as a developer, you
may want more control

00:00:53.320 --> 00:00:55.427
and not rely on another
app to do the work.

00:00:55.427 --> 00:00:57.010
What if you had a
typo in your markup?

00:00:57.010 --> 00:00:59.950
Or what if your users' email
clients don't process markup?

00:00:59.950 --> 00:01:02.170
No calendar event.

00:01:02.170 --> 00:01:04.690
Instead, your app can
explicitly insert events

00:01:04.690 --> 00:01:06.760
into your users' calendars.

00:01:06.760 --> 00:01:08.890
Here's another video
where I show you

00:01:08.890 --> 00:01:11.565
how to use the Calendar API
to set up dinner with friends.

00:01:11.565 --> 00:01:12.940
Check out the
video and blog post

00:01:12.940 --> 00:01:16.160
to review the JSON payload
use to create that event.

00:01:16.160 --> 00:01:18.790
Well, here's a JSON payload
in Python dictionary format

00:01:18.790 --> 00:01:19.990
from that video.

00:01:19.990 --> 00:01:22.090
The event variable
is how we ask the API

00:01:22.090 --> 00:01:24.730
to create that initial
dinner invite to begin with.

00:01:24.730 --> 00:01:27.220
It's got the event
name, the start and end

00:01:27.220 --> 00:01:29.500
times, and invitees.

00:01:29.500 --> 00:01:33.350
This entry or record is the
API resource for this event.

00:01:33.350 --> 00:01:36.832
By the way, what do you think
the R in URL stands for?

00:01:36.832 --> 00:01:39.040
Well, we're happy that dinner
worked out, but imagine

00:01:39.040 --> 00:01:42.190
another dinner that didn't,
leaving you with an unfulfilled

00:01:42.190 --> 00:01:43.750
calendar event.

00:01:43.750 --> 00:01:45.340
But wait, today you
got the good news

00:01:45.340 --> 00:01:47.200
that your friend got
assigned a job nearby

00:01:47.200 --> 00:01:48.580
for the rest of the year.

00:01:48.580 --> 00:01:50.950
Not only do you want to get
that dinner back on track,

00:01:50.950 --> 00:01:52.840
but also want to make
it a bi-monthly thing

00:01:52.840 --> 00:01:54.100
until the end of the year.

00:01:54.100 --> 00:01:57.040
This is the perfect feature
to update your app with.

00:01:57.040 --> 00:01:59.410
It saved the original event
ID from the dinner that

00:01:59.410 --> 00:02:01.240
didn't work out, and
now it only needs

00:02:01.240 --> 00:02:04.390
to be updated with the new
dates and to make it repeat.

00:02:04.390 --> 00:02:07.180
The Calendar API gives you
two ways of updating events.

00:02:07.180 --> 00:02:10.090
You can either patch, meaning
updating one or more fields

00:02:10.090 --> 00:02:12.520
of the event
resource, or update,

00:02:12.520 --> 00:02:14.440
meaning recreate
the entire resource.

00:02:14.440 --> 00:02:16.510
We'll look at both
and discuss when

00:02:16.510 --> 00:02:18.580
you'd pick one over the other.

00:02:18.580 --> 00:02:21.700
To update individual fields,
use the events dot patch method,

00:02:21.700 --> 00:02:24.430
named as such because you're
patching the updated fields--

00:02:24.430 --> 00:02:27.070
you know, the deltas from
the original resource.

00:02:27.070 --> 00:02:30.280
In our case, we got to patch
the new date into the event.

00:02:30.280 --> 00:02:31.990
Also, we're now using
a time zone instead

00:02:31.990 --> 00:02:34.240
of a specific offset from GMT.

00:02:34.240 --> 00:02:37.060
This allows for events to
observe Daylight Savings Time,

00:02:37.060 --> 00:02:39.220
meaning a 7:00 PM
dinner stays at 7:00 PM

00:02:39.220 --> 00:02:42.096
as we cross the fall
and spring boundaries.

00:02:42.096 --> 00:02:44.470
You can still use an offset
with a time zone if you wish,

00:02:44.470 --> 00:02:46.720
as they are independent
of each other.

00:02:46.720 --> 00:02:48.100
Something you
haven't seen before

00:02:48.100 --> 00:02:49.709
is how to do repeating events.

00:02:49.709 --> 00:02:51.250
To do this, you need
to define what's

00:02:51.250 --> 00:02:53.320
known as a recurrence
rule, which

00:02:53.320 --> 00:02:56.260
answers the question of
how often an event repeats.

00:02:56.260 --> 00:02:59.920
It looks somewhat cryptic, but
follows the RFC 5545 internet

00:02:59.920 --> 00:03:03.070
standard, which you can
basically decode like this.

00:03:03.070 --> 00:03:05.620
The event has a frequency
of occurring monthly

00:03:05.620 --> 00:03:08.590
but with an interval of two,
meaning every other month,

00:03:08.590 --> 00:03:10.250
till the end of the year.

00:03:10.250 --> 00:03:13.570
More info and examples at
the RFC link down below.

00:03:13.570 --> 00:03:15.790
The other alternative
to modifying an event

00:03:15.790 --> 00:03:19.751
in a calendar is update, meaning
replacing the whole thing.

00:03:19.751 --> 00:03:22.000
This is likely the best
choice if you're updating most

00:03:22.000 --> 00:03:24.160
or all of the fields anyway.

00:03:24.160 --> 00:03:26.680
Create a new resource with all
the existing updated fields

00:03:26.680 --> 00:03:28.760
as if you were
starting from scratch.

00:03:28.760 --> 00:03:30.850
Then call events dot
update to override

00:03:30.850 --> 00:03:33.610
the whole entire resource.

00:03:33.610 --> 00:03:36.490
Since we only need to update the
date and add a recurrence rule,

00:03:36.490 --> 00:03:39.100
which of the two
choices seems better?

00:03:39.100 --> 00:03:42.259
Yep, patch, because we're
only modifying two fields.

00:03:42.259 --> 00:03:44.050
Which you choose depends
on your situation,

00:03:44.050 --> 00:03:46.499
though, because if you want
to change the event name

00:03:46.499 --> 00:03:48.040
or have a whole new
group of friends,

00:03:48.040 --> 00:03:50.123
you'd probably choose
update since you're changing

00:03:50.123 --> 00:03:51.370
most of the fields, right?

00:03:51.370 --> 00:03:53.328
By the way, regardless
of whether you use patch

00:03:53.328 --> 00:03:55.270
or update, in a
real app, your user

00:03:55.270 --> 00:03:57.910
may make changes from their
desktop or mobile device.

00:03:57.910 --> 00:04:00.340
And typically, you want to
avoid conflicting changes

00:04:00.340 --> 00:04:01.420
or race conditions.

00:04:01.420 --> 00:04:03.490
So we recommend using
the if-match header

00:04:03.490 --> 00:04:07.000
and an e-tag string to
uniquely identify updates.

00:04:07.000 --> 00:04:09.400
For more info on the latter,
check out the Conditional

00:04:09.400 --> 00:04:12.070
Modification page in the docs.

00:04:12.070 --> 00:04:13.870
The code's in Python
to keep things brief,

00:04:13.870 --> 00:04:15.495
but feel free to use
the client library

00:04:15.495 --> 00:04:17.269
for your favorite language.

00:04:17.269 --> 00:04:19.060
Create a project in
the Developer's Console

00:04:19.060 --> 00:04:21.279
with a Calendar API and enable.

00:04:21.279 --> 00:04:24.487
Then create an event in Google
Calendar and grab its ID.

00:04:24.487 --> 00:04:27.070
Check out the previous video if
you don't know how to do that.

00:04:27.070 --> 00:04:28.840
Once you're set, we
can go to the computer

00:04:28.840 --> 00:04:32.950
now and look at some code
to modify that event.

00:04:32.950 --> 00:04:35.800
Lines 1 through 13 is
the standard boilerplate

00:04:35.800 --> 00:04:38.300
we've covered in many
of our other videos.

00:04:38.300 --> 00:04:40.150
But here, pay extra
attention to line

00:04:40.150 --> 00:04:42.730
7, which is the read/write
scope for Google Calendar,

00:04:42.730 --> 00:04:45.910
and line 13, which is where
we create the service endpoint

00:04:45.910 --> 00:04:48.070
to the Google Calendar API.

00:04:48.070 --> 00:04:51.010
As mentioned earlier, we
chose patch in this example,

00:04:51.010 --> 00:04:52.510
because we're only
changing the date

00:04:52.510 --> 00:04:54.490
and making this event repeat.

00:04:54.490 --> 00:04:56.980
The time zone on line
15 is immediately

00:04:56.980 --> 00:05:00.700
followed by the event payload
on line 16 through 20.

00:05:00.700 --> 00:05:04.120
You need to change line
21 for your event ID.

00:05:04.120 --> 00:05:08.850
22 and 23 send this request to
the API with a call to events

00:05:08.850 --> 00:05:10.120
dot patch.

00:05:10.120 --> 00:05:12.040
Finally, the print
call at the end

00:05:12.040 --> 00:05:14.410
gives us a receipt
showing the user

00:05:14.410 --> 00:05:17.470
the modified event, including
the newly installed recurrence

00:05:17.470 --> 00:05:19.581
rule.

00:05:19.581 --> 00:05:20.080
All right.

00:05:20.080 --> 00:05:21.850
Now let's run this thing.

00:05:21.850 --> 00:05:24.160
Since I've personally
run this before,

00:05:24.160 --> 00:05:26.290
we won't see the
OAuth 2 prompt here,

00:05:26.290 --> 00:05:30.160
but you'll get it
on your first try.

00:05:30.160 --> 00:05:32.740
The onscreen output shows
a new event information.

00:05:32.740 --> 00:05:36.400
But as you can see, it showed
up on our Google Calendar, too.

00:05:36.400 --> 00:05:38.500
Ta-da.

00:05:38.500 --> 00:05:41.200
Obviously the script I
ran had a real event ID.

00:05:41.200 --> 00:05:44.440
But the rest of it is exactly
what we just covered onscreen--

00:05:44.440 --> 00:05:46.570
code that modifies calendar
events and making them

00:05:46.570 --> 00:05:49.360
repeat, all in about
30 lines of code.

00:05:49.360 --> 00:05:51.110
Anyway, take a look
at the deep dive post

00:05:51.110 --> 00:05:53.080
if you want to dig
into the details.

00:05:53.080 --> 00:05:55.900
Your next steps-- check out the
official docs for everything

00:05:55.900 --> 00:05:56.950
you need to know.

00:05:56.950 --> 00:05:58.450
If you're new to
the Calendar API,

00:05:58.450 --> 00:06:01.460
specifically check out the
Concepts and Overview page.

00:06:01.460 --> 00:06:04.570
The final resource is a guide
on calendar and event objects.

00:06:04.570 --> 00:06:06.712
It even covers recurrence.

00:06:06.712 --> 00:06:08.170
Armed with this
newfound knowledge,

00:06:08.170 --> 00:06:10.170
you're now well on your
way to giving your users

00:06:10.170 --> 00:06:12.850
an even better experience
by enhancing your app

00:06:12.850 --> 00:06:14.712
with the Google Calendar API.

00:06:14.712 --> 00:06:17.170
Let us know how it works for
you down in the comments below

00:06:17.170 --> 00:06:19.330
and give us ideas
for future videos.

00:06:19.330 --> 00:06:21.370
This is Wesley Chun, and
we'll see you upstairs

00:06:21.370 --> 00:06:22.570
in the G Suite.

00:06:22.570 --> 00:06:24.720
[MUSIC PLAYING]

