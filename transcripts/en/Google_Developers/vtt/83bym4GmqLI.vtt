WEBVTT
Kind: captions
Language: en

00:00:19.439 --> 00:00:20.855
EUGENE MUTAI: And
today, I'm going

00:00:20.855 --> 00:00:24.590
to talk about REST matters,
and you need more of it.

00:00:24.590 --> 00:00:28.090
So most of us-- or
companies, startups,

00:00:28.090 --> 00:00:29.580
developers-- we've
been developing

00:00:29.580 --> 00:00:34.850
using RESTful architectures,
RESTful APIs, REST itself.

00:00:34.850 --> 00:00:37.580
But we've never really
stopped and asked ourselves

00:00:37.580 --> 00:00:39.380
why in the first place.

00:00:39.380 --> 00:00:41.190
Some of us have,
and then moved on

00:00:41.190 --> 00:00:43.510
to develop softwares using SOAP.

00:00:43.510 --> 00:00:47.020
But few of us, very few of
us, have stopped and asked

00:00:47.020 --> 00:00:49.110
themselves, why do
we use this REST,

00:00:49.110 --> 00:00:50.860
and what is this REST
in the first place?

00:00:50.860 --> 00:00:54.270
What are the advantages
of REST over the SOAP

00:00:54.270 --> 00:00:57.510
or [INAUDIBLE], which
were introduced way

00:00:57.510 --> 00:01:02.730
before REST itself, and which
are more secure in some form.

00:01:02.730 --> 00:01:04.870
So I'm going to
dive in straight.

00:01:04.870 --> 00:01:07.730
So I'm basically
trying to explain

00:01:07.730 --> 00:01:09.930
what is REST,
advantages of REST,

00:01:09.930 --> 00:01:14.780
and trying to demystify it
so that we can all understand

00:01:14.780 --> 00:01:17.830
it and be on the same page.

00:01:17.830 --> 00:01:21.190
Yes, so this is a Google
Developers expert event.

00:01:21.190 --> 00:01:22.000
We'll skip that.

00:01:22.000 --> 00:01:23.160
Let's dive in.

00:01:23.160 --> 00:01:27.880
So the meaning of REST, we
all know that, I hope so.

00:01:27.880 --> 00:01:30.570
But it's basically
Representational State

00:01:30.570 --> 00:01:31.530
Transfer.

00:01:31.530 --> 00:01:34.770
It was defined by Thomas
Fielding when he was making

00:01:34.770 --> 00:01:38.736
his doctorate dissertation.

00:01:38.736 --> 00:01:41.820
One thing I need to
make clear right now,

00:01:41.820 --> 00:01:44.400
or a few things I need to
make clear right now is one,

00:01:44.400 --> 00:01:45.490
REST is not an API.

00:01:45.490 --> 00:01:47.960
It is used in the
API's architecture.

00:01:47.960 --> 00:01:49.750
It is not an API.

00:01:49.750 --> 00:01:51.370
Two, REST is not a protocol.

00:01:51.370 --> 00:01:53.970
SOAP is a protocol.

00:01:53.970 --> 00:01:56.030
Three, REST is not a standard.

00:01:56.030 --> 00:01:57.700
It is not a must to use it.

00:01:57.700 --> 00:01:59.780
You can level up
web applications

00:01:59.780 --> 00:02:04.650
however you want it, but it
is not a specific standard.

00:02:04.650 --> 00:02:08.229
Four, is not a drop-in
replacement for SOAP.

00:02:08.229 --> 00:02:11.200
You cannot just say, today, I
want to replace a SOAP API with

00:02:11.200 --> 00:02:12.930
REST immediately.

00:02:12.930 --> 00:02:17.070
So now that we are on the same
page with those three thoughts,

00:02:17.070 --> 00:02:18.490
let's move on.

00:02:18.490 --> 00:02:21.170
So if I describe REST
with [? instruction ?]

00:02:21.170 --> 00:02:23.490
or with the fewest
words possible,

00:02:23.490 --> 00:02:28.570
REST is a non-XML-based,
web-based RPC or RMI.

00:02:28.570 --> 00:02:31.110
RPC basically means
Remote Procedure Call,

00:02:31.110 --> 00:02:33.590
or Remote Method
Invocation if you're

00:02:33.590 --> 00:02:36.135
using object-oriented
programming or frameworks.

00:02:39.440 --> 00:02:43.750
REST works entirely
on HTTP standard.

00:02:43.750 --> 00:02:47.270
It heavily depends
on HTTP because it

00:02:47.270 --> 00:02:49.870
defines all its standards,
or all its architecture

00:02:49.870 --> 00:02:51.930
using HTTP.

00:02:51.930 --> 00:02:57.160
Robert Fielding, when he came
up with the REST architecture,

00:02:57.160 --> 00:03:00.175
at the same time,
HTTP was on Version 1,

00:03:00.175 --> 00:03:03.240
and he was also working
at HTTP Version 1.1.

00:03:03.240 --> 00:03:07.740
HTTP Version 1.1 introduced
four other methods

00:03:07.740 --> 00:03:11.080
in HTTP, which are
basically PUT, POST, UPDATE.

00:03:11.080 --> 00:03:14.880
And later on, a few more
others were introduced.

00:03:14.880 --> 00:03:16.310
We'll go through that together.

00:03:19.000 --> 00:03:21.142
It heavily relies on JSON.

00:03:21.142 --> 00:03:21.850
We all know that.

00:03:21.850 --> 00:03:24.141
When you hear about REST,
the next thing we think about

00:03:24.141 --> 00:03:27.230
is JavaScript and JSON, or AJAX.

00:03:27.230 --> 00:03:30.450
It heavily relies on JSON,
but it is not a fact,

00:03:30.450 --> 00:03:33.670
or it is not a must that
you use JSON with it.

00:03:33.670 --> 00:03:36.160
You can use XML,
you can use HAL,

00:03:36.160 --> 00:03:39.790
or you can use YAML-- Yet
Another Markup Language--

00:03:39.790 --> 00:03:44.040
to send data to and fro.

00:03:44.040 --> 00:03:47.190
REST is data-driven.

00:03:47.190 --> 00:03:50.060
The SOAP API, which
came out in 1998,

00:03:50.060 --> 00:03:53.300
is when the internet
was growing up.

00:03:53.300 --> 00:03:57.020
And with remote
procedure call, we

00:03:57.020 --> 00:04:00.560
thought that the methods
that-- or the programming

00:04:00.560 --> 00:04:03.220
that we do in our laptop,
basically, when you are going

00:04:03.220 --> 00:04:04.760
to put it into
the internet, it's

00:04:04.760 --> 00:04:09.330
just taking the same functions,
putting them in a server,

00:04:09.330 --> 00:04:11.430
and letting people
call those servers.

00:04:11.430 --> 00:04:14.900
But now we've moved to a world
where data is the new gold.

00:04:14.900 --> 00:04:17.000
And if data is the new
gold, you need a way

00:04:17.000 --> 00:04:18.750
of at least protecting it.

00:04:18.750 --> 00:04:23.180
And REST allows us to do
that in some small ways.

00:04:23.180 --> 00:04:25.240
And because of that, it
is mostly data-driven.

00:04:25.240 --> 00:04:28.370
Because people asking
for data or asking

00:04:28.370 --> 00:04:30.470
to read data, and
basically, you're

00:04:30.470 --> 00:04:34.770
not asking to do procedures
or calls, or specific actions.

00:04:39.710 --> 00:04:44.370
So I think, when I went
through my research about REST,

00:04:44.370 --> 00:04:49.530
is that the biggest advantage
REST has over SOAP--

00:04:49.530 --> 00:04:55.760
and you'll ask me, why am
I comparing it with SOAP?

00:04:55.760 --> 00:04:59.100
SOAP was the architecture--
it's actually a protocol.

00:04:59.100 --> 00:05:01.100
SOAP was the protocol
which was being used

00:05:01.100 --> 00:05:03.140
before REST was introduced.

00:05:03.140 --> 00:05:08.950
And when REST was introduced,
it changed almost everything.

00:05:08.950 --> 00:05:13.170
And some people still use
SOAP, which is not a bad thing.

00:05:13.170 --> 00:05:15.520
It's a very good thing
to use SOAP depending

00:05:15.520 --> 00:05:18.740
on your system's architecture.

00:05:18.740 --> 00:05:25.150
But because most people have
moved to REST, because REST is

00:05:25.150 --> 00:05:27.750
easy to set up and SOAP is not.

00:05:27.750 --> 00:05:30.750
But SOAP sometimes
offers more security,

00:05:30.750 --> 00:05:32.390
offers more stability.

00:05:32.390 --> 00:05:38.010
But the biggest advantages of
REST over SOAP is flexibility.

00:05:38.010 --> 00:05:41.290
Because REST, you can change
your system's architecture

00:05:41.290 --> 00:05:45.420
permanent basis, [INAUDIBLE]
basis, or even every day

00:05:45.420 --> 00:05:49.100
without affecting your clients'
consumption of the same data.

00:05:49.100 --> 00:05:52.120
So let's-- for example, if my
client was [? concerning ?]

00:05:52.120 --> 00:05:56.200
about car models and I have not
added the colors of the cars.

00:05:56.200 --> 00:05:59.680
If I add colors of the
cars in a SOAP API,

00:05:59.680 --> 00:06:02.340
the clients who are
consuming my API

00:06:02.340 --> 00:06:04.180
need to restructure their API.

00:06:04.180 --> 00:06:05.330
They need to change stuff.

00:06:05.330 --> 00:06:07.704
I need to tell them, and they
need to change their stuff.

00:06:07.704 --> 00:06:09.460
In REST, they don't have to.

00:06:09.460 --> 00:06:12.780
They continue
consuming the same API.

00:06:12.780 --> 00:06:16.830
SOAP has something called
WSDL-- Web Services Definition

00:06:16.830 --> 00:06:18.400
Language-- where
basically, you're

00:06:18.400 --> 00:06:23.046
creating a contract between you
and your client that's, hey,

00:06:23.046 --> 00:06:25.420
these are contracts, I've
opened the connections for you,

00:06:25.420 --> 00:06:26.586
you can now start consuming.

00:06:26.586 --> 00:06:30.240
But if I change something,
the WSDL needs to change.

00:06:30.240 --> 00:06:33.970
And if it changed, it means
our contract has changed,

00:06:33.970 --> 00:06:36.620
and we need to create a
new contract with them.

00:06:36.620 --> 00:06:39.210
So the biggest advantage
of REST, according to me--

00:06:39.210 --> 00:06:41.530
it is very flexible.

00:06:41.530 --> 00:06:44.220
You can make APIs that
stand the test of time.

00:06:46.750 --> 00:06:50.760
SOAP is clunky but still works.

00:06:50.760 --> 00:06:55.950
SOAP makes you put
everything in that file

00:06:55.950 --> 00:06:58.000
that you're sending,
or let's say,

00:06:58.000 --> 00:06:59.840
the data resource
that you're sending.

00:06:59.840 --> 00:07:03.550
You put your request details,
your response details,

00:07:03.550 --> 00:07:05.590
your status's details,
and your links,

00:07:05.590 --> 00:07:09.940
and your data inside
the SOAP itself.

00:07:09.940 --> 00:07:11.080
In REST, you don't.

00:07:11.080 --> 00:07:13.080
Most of the things have
been defined for you.

00:07:13.080 --> 00:07:15.250
And so REST, the only
thing you have to do

00:07:15.250 --> 00:07:16.495
is send the data itself.

00:07:19.580 --> 00:07:22.670
REST uses HTTP, as I said.

00:07:22.670 --> 00:07:27.220
And the biggest advantages of
HTTP is that, since HTTP 1.1,

00:07:27.220 --> 00:07:30.640
we have so many verbs
to use with REST.

00:07:30.640 --> 00:07:34.840
And so REST is defined
using these verbs.

00:07:34.840 --> 00:07:40.260
There are more verbs, such as
HEAD, PATCH, OPTIONS, LINKS,

00:07:40.260 --> 00:07:41.610
and UNLINK.

00:07:41.610 --> 00:07:44.700
So, an example of
how we use REST.

00:07:44.700 --> 00:07:51.470
If I was creating a place
where I can sell music, one,

00:07:51.470 --> 00:07:53.870
if I wanted you to see all
the albums that I have,

00:07:53.870 --> 00:07:56.740
I can say /music/album.

00:07:56.740 --> 00:07:58.100
You'll see all the albums.

00:07:58.100 --> 00:08:01.030
Basically, [INAUDIBLE]
make this a GET request.

00:08:01.030 --> 00:08:03.990
Music, albums-- maybe
the idea of the album,

00:08:03.990 --> 00:08:07.920
for a specific album,
which you wanted to see.

00:08:07.920 --> 00:08:09.330
Upload an album.

00:08:09.330 --> 00:08:14.580
So the songs and the epic music
that you're supposed to upload.

00:08:14.580 --> 00:08:16.465
This could have
been a POST request.

00:08:20.310 --> 00:08:23.320
So the other good
thing about REST

00:08:23.320 --> 00:08:27.710
is that the status codes
have been defined for us.

00:08:27.710 --> 00:08:30.890
In SOAP, we have to
define them by ourselves.

00:08:30.890 --> 00:08:34.820
And I don't know if it's
good or bad, is that we can

00:08:34.820 --> 00:08:36.620
define however we want them.

00:08:36.620 --> 00:08:42.380
So we know that the status 200
in HTTP means everything's OK.

00:08:42.380 --> 00:08:47.390
In SOAP, we can say
status code 300 is OK.

00:08:47.390 --> 00:08:51.680
Yet in HTTP, 300
means redirection.

00:08:51.680 --> 00:08:53.900
And in SOAP, you
can use 300 if you

00:08:53.900 --> 00:08:55.490
want to because
you're the one who's

00:08:55.490 --> 00:08:57.354
defined your status codes.

00:08:57.354 --> 00:08:59.270
In HTTP, they've already
been defined for you,

00:08:59.270 --> 00:09:02.190
so you're using the ones
which are existing-- 404

00:09:02.190 --> 00:09:09.320
for page not found, 401 for
unauthorized, and so forth.

00:09:09.320 --> 00:09:11.350
REST is cacheable.

00:09:11.350 --> 00:09:16.390
But it is only cacheable if
you use an idempotent request.

00:09:16.390 --> 00:09:17.580
What idempotent request?

00:09:17.580 --> 00:09:23.460
This is a request which uses the
HTTP verb HEAD, HTTP verb GET,

00:09:23.460 --> 00:09:25.630
and HTTP verb OPTIONS.

00:09:25.630 --> 00:09:28.310
All other requests
are not idempotent.

00:09:28.310 --> 00:09:30.000
Idempotent basically
means that you

00:09:30.000 --> 00:09:33.270
can make the request as
many times as possible,

00:09:33.270 --> 00:09:35.280
and each and every
request does not

00:09:35.280 --> 00:09:39.220
rely on the previous
request that you made.

00:09:39.220 --> 00:09:42.360
So a GET request basically-- and
an OPTIONS and a HEAD request--

00:09:42.360 --> 00:09:46.420
is cacheable, meaning that if
you made your first request

00:09:46.420 --> 00:09:48.270
to the servers, and
for example, maybe you

00:09:48.270 --> 00:09:50.470
need to make this request
1,000 times a day,

00:09:50.470 --> 00:09:53.500
it means that I don't have
to process this request 1,000

00:09:53.500 --> 00:09:54.200
times.

00:09:54.200 --> 00:09:56.710
It means that it can be cached,
and that the next time you

00:09:56.710 --> 00:09:59.040
make this request,
you basically fetch it

00:09:59.040 --> 00:10:02.200
from where it's been cached,
and it will be faster that way.

00:10:02.200 --> 00:10:04.180
Because maybe a request,
when I process it,

00:10:04.180 --> 00:10:05.450
it takes me three seconds.

00:10:05.450 --> 00:10:07.770
But when it's cached, you'll
get it immediately back.

00:10:07.770 --> 00:10:12.446
So that goes down to even 10--
or 20, even-- microseconds.

00:10:12.446 --> 00:10:17.590
Oh, so one thing I need to make
clear, SOAP uses HTTP POST.

00:10:17.590 --> 00:10:21.110
A POST is not idempotent, so
meaning the request cannot be

00:10:21.110 --> 00:10:21.800
cached.

00:10:21.800 --> 00:10:24.560
So if you're going to
make a request using SOAP,

00:10:24.560 --> 00:10:26.460
you have to make the
request every time,

00:10:26.460 --> 00:10:29.005
and it will take the same
length for every request.

00:10:33.510 --> 00:10:35.800
I don't know if this is a
major advantage over SOAP,

00:10:35.800 --> 00:10:38.420
but personally, I
don't believe that.

00:10:38.420 --> 00:10:41.340
I believe that SOAP
is a a little bit more

00:10:41.340 --> 00:10:45.010
secure with the
introductions of WP-Security

00:10:45.010 --> 00:10:48.805
and a few other
protocols that it uses.

00:10:48.805 --> 00:10:50.680
REST can be secured though.

00:10:50.680 --> 00:10:54.970
It can be secured using HTTPS,
basically sending your request

00:10:54.970 --> 00:10:57.170
over a secure protocol.

00:10:57.170 --> 00:11:00.950
And you can use
system architectures

00:11:00.950 --> 00:11:07.630
such as OAuth2 and
JavaScript Web Tokens-- JWT.

00:11:07.630 --> 00:11:11.660
So you can actually secure your
REST APIs and everything else

00:11:11.660 --> 00:11:16.230
using HTTPS, OAuth, or even JWT.

00:11:16.230 --> 00:11:19.330
SOAP comes with one
in-built like WP-Security.

00:11:19.330 --> 00:11:21.720
And according to what
I read, according

00:11:21.720 --> 00:11:24.240
to what I researched
about, WP-Security

00:11:24.240 --> 00:11:26.050
seems much more
secure than REST.

00:11:26.050 --> 00:11:30.580
But it doesn't mean that
REST is any less secure.

00:11:30.580 --> 00:11:34.200
Almost at my last point
is-- REST is stateless.

00:11:34.200 --> 00:11:38.540
Basically, stateless means
that-- let me give you

00:11:38.540 --> 00:11:41.350
an example is that, when the
internet was starting out

00:11:41.350 --> 00:11:45.350
and when we were moving
our systems to the web,

00:11:45.350 --> 00:11:49.680
the introduction of remote
procedure calls-- basically,

00:11:49.680 --> 00:11:52.630
you are taking your application
code and putting it in a server

00:11:52.630 --> 00:11:54.970
and saying that if you want
a certain thing to be done,

00:11:54.970 --> 00:11:57.640
you have to ping this
specific function.

00:11:57.640 --> 00:11:59.290
In REST, it's different.

00:11:59.290 --> 00:12:02.100
We use URIs-- which are very
readable as I've shown you

00:12:02.100 --> 00:12:04.810
before-- like /album, /music.

00:12:04.810 --> 00:12:10.290
And that way basically helps
us hide a lot of information

00:12:10.290 --> 00:12:12.710
from the user or the
client who's consuming it.

00:12:12.710 --> 00:12:14.950
The client does not need to
know which kind of server

00:12:14.950 --> 00:12:15.360
we are running.

00:12:15.360 --> 00:12:17.850
We can be running on Windows,
we can be running on Linux,

00:12:17.850 --> 00:12:20.030
we can be running on Mac OS.

00:12:20.030 --> 00:12:21.730
The client also does
not need to know

00:12:21.730 --> 00:12:23.330
which programming
language we are

00:12:23.330 --> 00:12:25.370
programming our systems with.

00:12:25.370 --> 00:12:28.900
So we can be sending
him data, or he or she

00:12:28.900 --> 00:12:31.160
can be consuming data,
but he or she does not

00:12:31.160 --> 00:12:33.780
need to know that the
data is being provided

00:12:33.780 --> 00:12:36.910
by Python, by Ruby, or by--

00:12:36.910 --> 00:12:40.100
And us on the other
side with the servers

00:12:40.100 --> 00:12:43.187
would not need to know
who the client is.

00:12:43.187 --> 00:12:44.770
If the client is
using a mobile phone,

00:12:44.770 --> 00:12:47.730
if the client is using a laptop,
if the client is actually

00:12:47.730 --> 00:12:51.190
making request [INAUDIBLE]
by the introductions of IoT,

00:12:51.190 --> 00:12:53.565
if the client is making request
to buy [INAUDIBLE] watch,

00:12:53.565 --> 00:12:54.940
if the client is
making a request

00:12:54.940 --> 00:12:58.410
to buy speakers, buy chairs,
whatever IoT going into.

00:13:02.280 --> 00:13:05.720
As I mentioned before, all
requests are independent.

00:13:05.720 --> 00:13:08.610
Every request you make does not
depend on the previous request

00:13:08.610 --> 00:13:09.510
that you made.

00:13:09.510 --> 00:13:12.900
Some requests are independent,
meaning that requests

00:13:12.900 --> 00:13:15.000
can be made more than one time.

00:13:15.000 --> 00:13:25.430
And also it's means that-- I
think I've lost that point.

00:13:25.430 --> 00:13:28.040
But I said like, yeah, so
[INAUDIBLE] basically means

00:13:28.040 --> 00:13:30.210
that you can make the
request several times

00:13:30.210 --> 00:13:33.500
and in each request
is independent.

00:13:33.500 --> 00:13:35.490
And because each request
is independent also,

00:13:35.490 --> 00:13:37.910
we do not need to know the
servers and the [INAUDIBLE].

00:13:37.910 --> 00:13:39.909
I basically lost the point
somewhere in my head,

00:13:39.909 --> 00:13:42.480
but if I find it, I'll
go through it again.

00:13:42.480 --> 00:13:44.800
So another big
advantage of REST is

00:13:44.800 --> 00:13:46.610
because when almost
everything has

00:13:46.610 --> 00:13:50.480
been done for us, as
developers, we get to be lazy.

00:13:50.480 --> 00:13:51.439
We get to be very lazy.

00:13:51.439 --> 00:13:53.479
Because most of the things
have been done for us.

00:13:53.479 --> 00:13:55.190
So basically we're
setting up our systems

00:13:55.190 --> 00:13:59.315
very fast with little effort,
and using the current standards

00:13:59.315 --> 00:14:01.440
that [INAUDIBLE] have, or
the systems' architecture

00:14:01.440 --> 00:14:02.980
have already been set for us.

00:14:02.980 --> 00:14:07.070
And the other thing is that with
this edge, the edge of tools,

00:14:07.070 --> 00:14:08.760
we have a tool for
almost everything

00:14:08.760 --> 00:14:11.160
on every form of development
you can develop with.

00:14:11.160 --> 00:14:13.930
So for example, if you're
going to test our REST APIs,

00:14:13.930 --> 00:14:15.960
there's a very famous
tool known as Postman

00:14:15.960 --> 00:14:17.350
which has risen over the years.

00:14:17.350 --> 00:14:21.130
And I am sure that every
developer who uses REST

00:14:21.130 --> 00:14:25.210
has come by this
Postman software tool.

00:14:27.720 --> 00:14:32.715
So as I said, we get to be
lazy because these no existing

00:14:32.715 --> 00:14:33.340
learning curve.

00:14:33.340 --> 00:14:35.240
We basically dive in.

00:14:35.240 --> 00:14:37.990
And in this age where time is
really important, when people

00:14:37.990 --> 00:14:41.670
need to create things at a very
fast pace, REST supports that.

00:14:41.670 --> 00:14:46.180
REST encourages it.

00:14:46.180 --> 00:14:49.230
So my last point-- and
my laptop has slept.

00:14:53.050 --> 00:14:53.910
And my last point.

00:14:58.750 --> 00:15:01.090
Because everything has
been defined for us,

00:15:01.090 --> 00:15:05.470
and you're using architectures,
software pieces that

00:15:05.470 --> 00:15:07.270
are really, really
for us, we get

00:15:07.270 --> 00:15:12.900
to ship and test on projects
every day, every second.

00:15:12.900 --> 00:15:14.490
And that's the
final [INAUDIBLE].

00:15:14.490 --> 00:15:17.920
Like we create a system right
now, we test it, [INAUDIBLE]

00:15:17.920 --> 00:15:21.950
our office, we go back, fix it,
and continue life, and make it

00:15:21.950 --> 00:15:26.120
better every day, every
second, every hour.

00:15:26.120 --> 00:15:30.010
I don't think it
has been abandoned.

00:15:30.010 --> 00:15:32.930
I see still major
advantages of SOAP.

00:15:32.930 --> 00:15:37.745
SOAP, one major
difference between-- there

00:15:37.745 --> 00:15:40.030
are a lot of major differences
between SOAP and REST,

00:15:40.030 --> 00:15:43.330
but SOAP is action-oriented.

00:15:43.330 --> 00:15:45.250
REST is data-oriented.

00:15:45.250 --> 00:15:48.730
Like if basically you want
to fetch data, REST is OK.

00:15:48.730 --> 00:15:50.980
Basically you want to carry
some form of transactions,

00:15:50.980 --> 00:15:54.160
or some form of requests,
specifically requests,

00:15:54.160 --> 00:15:55.010
SOAP is OK.

00:15:55.010 --> 00:15:57.510
Then the other
thing is SOAP lets

00:15:57.510 --> 00:15:59.550
you-- like because
it's really strict,

00:15:59.550 --> 00:16:02.990
it lets you control how
you're [? sending ?] your data

00:16:02.990 --> 00:16:04.920
to your client.

00:16:04.920 --> 00:16:08.740
So if you look at Safaricom,
Safaricom uses SOAP.

00:16:08.740 --> 00:16:11.880
And when they released the G2
API, people complained a lot.

00:16:11.880 --> 00:16:14.940
And when they complained, this
is where I also complained.

00:16:14.940 --> 00:16:18.544
Because I'm this kid in the
21st century who has come out.

00:16:18.544 --> 00:16:21.085
And the new thing on the block
has risen, and all of a sudden

00:16:21.085 --> 00:16:22.310
it's really easy to use.

00:16:22.310 --> 00:16:25.460
And because I get to be
lazy, I get excited about it.

00:16:25.460 --> 00:16:27.860
But when it gets to SOAP,
it's pretty complicated.

00:16:27.860 --> 00:16:30.527
Because you need a VPN, you need
a server that connects directly

00:16:30.527 --> 00:16:32.776
to Safaricom because there's
a contract you're locking

00:16:32.776 --> 00:16:33.830
on [INAUDIBLE] Safaricom.

00:16:33.830 --> 00:16:37.360
Safaricom needs you to be secure
when you're locking onto them.

00:16:37.360 --> 00:16:39.400
And you [INAUDIBLE] them.

00:16:39.400 --> 00:16:41.950
But if you look at what
they actually [INAUDIBLE],

00:16:41.950 --> 00:16:42.980
they're serving M-Pesa.

00:16:42.980 --> 00:16:47.740
M-Pesa has like over a million
users-- maybe 14 million

00:16:47.740 --> 00:16:49.250
according to [INAUDIBLE].

00:16:49.250 --> 00:16:51.920
Because almost all
of us uses M-Pesa.

00:16:51.920 --> 00:16:53.920
M-Pesa is a finance system.

00:16:53.920 --> 00:16:55.670
It deals with money.

00:16:55.670 --> 00:16:57.590
So if you think
about it, it does not

00:16:57.590 --> 00:17:01.420
make sense them using REST.

00:17:01.420 --> 00:17:02.980
It makes sense
them having control

00:17:02.980 --> 00:17:05.450
of the whole architecture,
the whole system,

00:17:05.450 --> 00:17:06.930
and making it secure.

00:17:06.930 --> 00:17:09.589
And saying if you're
going to connect with us,

00:17:09.589 --> 00:17:12.160
you have to be secure, you have
to follow these specific SOAP

00:17:12.160 --> 00:17:12.510
protocols.

00:17:12.510 --> 00:17:13.635
Because SOAP is a protocol.

00:17:13.635 --> 00:17:15.800
It's very strict, it's
a protocol itself.

00:17:15.800 --> 00:17:20.930
So if you look at it, I
think the continuation

00:17:20.930 --> 00:17:23.950
of development of SOAP,
I think it's still there.

00:17:23.950 --> 00:17:28.050
And I remember a
few months ago, when

00:17:28.050 --> 00:17:30.440
I wanted to play around
with the M-Pesa API,

00:17:30.440 --> 00:17:34.960
I had to like get like a
lot of knowledge around XML

00:17:34.960 --> 00:17:36.209
and how to act with SOAP.

00:17:36.209 --> 00:17:37.750
And because of that,
there are things

00:17:37.750 --> 00:17:42.400
like defining a SOAP request,
how you're supposed to make it.

00:17:42.400 --> 00:17:43.840
Because I didn't
know it too well,

00:17:43.840 --> 00:17:45.464
and because I live
in the age of tools,

00:17:45.464 --> 00:17:47.194
I went online to
look for a tool.

00:17:47.194 --> 00:17:47.860
What did I find?

00:17:47.860 --> 00:17:48.740
I found a tool.

00:17:48.740 --> 00:17:50.420
It's called SoapUI.

00:17:50.420 --> 00:17:51.680
It's on Version 5.

00:17:51.680 --> 00:17:55.030
Version 5 basically
means it's in development

00:17:55.030 --> 00:17:57.127
and it's being developed.

00:17:57.127 --> 00:17:58.460
So I don't think it has stopped.

00:17:58.460 --> 00:18:01.070
SOAP is still an
alternative to REST.

00:18:01.070 --> 00:18:03.860
Depending on how you want
to structure a system.

00:18:03.860 --> 00:18:06.600
I feel the financial
systems are OK using SOAP

00:18:06.600 --> 00:18:09.700
because they get more
control over their systems

00:18:09.700 --> 00:18:12.290
compared to REST.

00:18:12.290 --> 00:18:15.940
It actually doesn't
affect REST at all.

00:18:15.940 --> 00:18:23.220
And I'd say they
might-- Roy Fielding,

00:18:23.220 --> 00:18:26.030
he might make you look into
the REST architecture himself,

00:18:26.030 --> 00:18:28.160
or somebody else,
and maybe improve

00:18:28.160 --> 00:18:30.557
upon the current set of REST.

00:18:30.557 --> 00:18:32.140
REST is not like
really hard to learn.

00:18:32.140 --> 00:18:34.320
You can take a
few hours to learn

00:18:34.320 --> 00:18:36.880
REST, that you need to make
specific [INAUDIBLE] requests

00:18:36.880 --> 00:18:39.170
using these specific URIs.

00:18:39.170 --> 00:18:41.210
You need to secure
[INAUDIBLE] HTTPS,

00:18:41.210 --> 00:18:42.940
you need to know [INAUDIBLE].

00:18:42.940 --> 00:18:46.910
So if you look at it-- and
here's the funny thing.

00:18:46.910 --> 00:18:49.850
People think REST has been
in continuous development.

00:18:49.850 --> 00:18:50.690
But no.

00:18:50.690 --> 00:18:54.450
It was actually a
dissertation by Roy Fielding.

00:18:54.450 --> 00:18:59.850
And it was released at the same
time HTTP 1.1 was released.

00:18:59.850 --> 00:19:02.700
And that is 1998.

00:19:02.700 --> 00:19:08.430
So ever since 1998, REST hasn't
really modified itself a lot.

00:19:08.430 --> 00:19:11.830
So I believe REST will
maintain its current state,

00:19:11.830 --> 00:19:12.960
the ways it is.

00:19:12.960 --> 00:19:15.350
Or maybe be improved upon.

00:19:15.350 --> 00:19:18.980
Because one disadvantage of REST
is that if you wanted to make

00:19:18.980 --> 00:19:22.250
a specific execution, like
a specific call to action,

00:19:22.250 --> 00:19:24.830
you couldn't.

00:19:24.830 --> 00:19:27.110
This basically is you
want a specific function

00:19:27.110 --> 00:19:28.060
to run in the servers.

00:19:28.060 --> 00:19:29.440
You couldn't make that happen.

00:19:29.440 --> 00:19:31.040
In SOAP, you can
make that happen.

00:19:31.040 --> 00:19:32.970
Because you actual
calling an action.

00:19:32.970 --> 00:19:35.120
And you're not
fetching data or trying

00:19:35.120 --> 00:19:37.320
to change the data [INAUDIBLE].

00:19:37.320 --> 00:19:39.150
So maybe that's one
of the improvements

00:19:39.150 --> 00:19:41.300
I'd say REST has to make.

00:19:41.300 --> 00:19:43.846
But if you look at it, REST,
the way it was structured,

00:19:43.846 --> 00:19:45.970
it was structured for almost
like the 21st century.

00:19:45.970 --> 00:19:48.590
He knew data will be there.

00:19:48.590 --> 00:19:50.710
The thing right now
we'll be dealing with.

00:19:50.710 --> 00:19:52.330
Because we fetch
data from Google,

00:19:52.330 --> 00:19:53.890
we fetch data from Facebook.

00:19:53.890 --> 00:19:57.144
We don't really want to do
any form of deep actions.

00:19:57.144 --> 00:19:59.310
We just really need to
communicate with the servers.

00:20:03.410 --> 00:20:07.072
When REST was released, when
Roy released the REST system's

00:20:07.072 --> 00:20:09.530
architecture, I don't think he
had any specific programming

00:20:09.530 --> 00:20:10.870
language in mind.

00:20:10.870 --> 00:20:12.530
Of course there were
specific languages

00:20:12.530 --> 00:20:14.700
that adopted REST
architecture really fast.

00:20:14.700 --> 00:20:17.754
For example, the release
of Ruby on Rails,

00:20:17.754 --> 00:20:19.920
which is one of the fast
[? objective ?] [INAUDIBLE]

00:20:19.920 --> 00:20:22.960
frameworks to support REST.

00:20:22.960 --> 00:20:29.520
But at the same-- because
JavaScript Object Notation

00:20:29.520 --> 00:20:34.860
is used a lot,
JavaScripts [INAUDIBLE]

00:20:34.860 --> 00:20:36.240
really, really well.

00:20:36.240 --> 00:20:38.880
But at the same time, if
you look over the years,

00:20:38.880 --> 00:20:42.350
people have been improving every
program language in the age.

00:20:42.350 --> 00:20:44.740
Like Python is
moving to Python 3.0.

00:20:44.740 --> 00:20:45.970
[INAUDIBLE] just came out.

00:20:45.970 --> 00:20:48.520
So I wouldn't say that
it has been improved.

00:20:48.520 --> 00:20:51.912
Ruby has been improved, it's
in version 2.2 right now.

00:20:51.912 --> 00:20:53.870
But any programming
language has been improved.

00:20:53.870 --> 00:20:56.570
And with improvements, they
look at the current state

00:20:56.570 --> 00:20:58.870
of development, the current
state of things people

00:20:58.870 --> 00:21:00.620
want to use, and
then they fuse them

00:21:00.620 --> 00:21:02.240
into the languages themselves.

00:21:02.240 --> 00:21:04.000
Last year, we got the
release of [? ES ?]

00:21:04.000 --> 00:21:07.150
15 because we wanted classes
and stuff like that, because

00:21:07.150 --> 00:21:07.750
of JavaScript.

00:21:07.750 --> 00:21:09.580
We were saying hey, JavaScript
doesn't have classes,

00:21:09.580 --> 00:21:11.220
we want them, and
they added them.

00:21:11.220 --> 00:21:15.640
But if you look at REST itself,
it's a system architecture.

00:21:15.640 --> 00:21:17.610
It's not tied to any
programming language.

00:21:17.610 --> 00:21:20.630
So basically, we'd want like
all programming languages

00:21:20.630 --> 00:21:21.480
to support it.

00:21:21.480 --> 00:21:23.320
And this is the case right now.

00:21:23.320 --> 00:21:25.800
But the problem is
that us developers,

00:21:25.800 --> 00:21:29.580
we listen to the wind too
much and not the person

00:21:29.580 --> 00:21:31.930
who is speaking in
between the wind.

00:21:31.930 --> 00:21:36.430
So if you hear around from
people, people will tell you,

00:21:36.430 --> 00:21:39.290
hey, JS is the best one
to use, we [INAUDIBLE].

00:21:39.290 --> 00:21:42.000
Because JavaScript
Object Notation of course

00:21:42.000 --> 00:21:43.320
came from JavaScript.

00:21:43.320 --> 00:21:46.270
But it doesn't mean this as a
languages did not implement it.

00:21:46.270 --> 00:21:50.190
If you go to Python, you see
that they [INAUDIBLE] JSON

00:21:50.190 --> 00:21:52.010
file when Python reads it.

00:21:52.010 --> 00:21:55.760
It maps everything to
the Python objects.

00:21:55.760 --> 00:21:58.270
So for example, a string, of
course, will map to a string.

00:21:58.270 --> 00:22:01.060
An object will map
to a dictionary,

00:22:01.060 --> 00:22:02.650
and so forth and so forth.

00:22:02.650 --> 00:22:05.560
So I don't think these are
specific languages is better

00:22:05.560 --> 00:22:09.100
in dealing with REST or JSON.

00:22:09.100 --> 00:22:12.230
But I believe that
libraries help

00:22:12.230 --> 00:22:13.760
us to deal with things easier.

00:22:13.760 --> 00:22:16.440
And because like
JavaScript especially

00:22:16.440 --> 00:22:20.030
doesn't require library, it
just snaps its fingers and deals

00:22:20.030 --> 00:22:22.799
with JSON easily, is the
fastest one, people will adopt.

00:22:22.799 --> 00:22:25.090
Because they say, hey, this
one is easier to work with,

00:22:25.090 --> 00:22:26.250
JSON easier.

00:22:26.250 --> 00:22:29.460
But if you look at
programming languages

00:22:29.460 --> 00:22:31.780
that have really,
really good libraries

00:22:31.780 --> 00:22:37.890
on JSON, which [INAUDIBLE],
dealing with JSON seamlessly.

00:22:37.890 --> 00:22:42.520
In that respect, I recently
began Python programming.

00:22:42.520 --> 00:22:44.770
So I was making a RESTful API.

00:22:44.770 --> 00:22:47.460
And I wanted to consume, of
course, JSON data being there.

00:22:47.460 --> 00:22:50.200
Most people use JSON
to consume REST data,

00:22:50.200 --> 00:22:51.990
to consume RESTful APIs.

00:22:51.990 --> 00:22:54.530
If you look at it that
way, when I tried,

00:22:54.530 --> 00:22:56.350
it has only two
lines of codes for me

00:22:56.350 --> 00:23:00.010
to convert my data into JSON.

00:23:00.010 --> 00:23:01.660
That was pretty easy in Python.

00:23:01.660 --> 00:23:04.060
And in other languages like
[INAUDIBLE], it's also easy.

00:23:04.060 --> 00:23:07.660
With PHP, it's also easy because
I've worked with all of those.

00:23:07.660 --> 00:23:11.070
And it's just people are
really fast in thinking.

00:23:11.070 --> 00:23:15.000
And it's good to go out there
and look at what there is.

00:23:15.000 --> 00:23:17.257
Because if you don't
have something built in,

00:23:17.257 --> 00:23:18.590
it's probability in the library.

00:23:18.590 --> 00:23:19.930
Someone has made it for you.

00:23:19.930 --> 00:23:22.260
Which is OK.

00:23:22.260 --> 00:23:25.285
So there's no specific language
that deals with SOAP easy-- I

00:23:25.285 --> 00:23:28.100
mean with REST easily.

00:23:28.100 --> 00:23:31.545
All of them, I'd say, deal with
REST APIs and JSON equally.

00:23:31.545 --> 00:23:38.480
But when it comes to
using XML, HAL-- HAL

00:23:38.480 --> 00:23:41.230
is more JSON because of--
[INAUDIBLE] uses JSON-HAL.

00:23:43.770 --> 00:23:47.366
XML, I'd say Java.

00:23:47.366 --> 00:23:49.240
Because Java was the
[? fast one ?], and SOAP

00:23:49.240 --> 00:23:53.760
was introduced way before REST.

00:23:53.760 --> 00:23:57.110
So I'd say XML, I usually
feel like Java deals with XML

00:23:57.110 --> 00:24:00.130
very easily.

00:24:00.130 --> 00:24:03.450
When it comes to YAM,
I haven't met anybody.

00:24:03.450 --> 00:24:06.270
I personally haven't
[INAUDIBLE] using [? IAM ?]

00:24:06.270 --> 00:24:07.580
to transmit data and fro.

00:24:07.580 --> 00:24:10.970
I use it in project definitions,
configuration files.

00:24:10.970 --> 00:24:13.127
I don't use it to
transmit to and fro.

00:24:13.127 --> 00:24:15.335
That I don't have much
knowledge on [? IAM ?] at all.

00:24:19.070 --> 00:24:20.570
I don't know how
phrase it, but this

00:24:20.570 --> 00:24:23.400
is more of a people's
opinion than more

00:24:23.400 --> 00:24:25.230
of the REST architecture itself.

00:24:25.230 --> 00:24:28.540
And when it comes to dealing
with people, it's a bit tricky.

00:24:28.540 --> 00:24:30.530
You need a whole cohort.

00:24:30.530 --> 00:24:33.860
And I know you know all the
kinds of tricks somebody

00:24:33.860 --> 00:24:34.560
has to be use.

00:24:34.560 --> 00:24:37.980
But sometimes some
don't work, some work.

00:24:37.980 --> 00:24:46.350
I'd say that I've grown to
understand that you'll never

00:24:46.350 --> 00:24:49.400
grow unless you accept change.

00:24:49.400 --> 00:24:52.240
And accepting change
sometimes means

00:24:52.240 --> 00:24:56.870
moving to watch your--
you are really used to do.

00:24:56.870 --> 00:25:01.090
And that, explaining it to a
developer is pretty tricky.

00:25:01.090 --> 00:25:02.830
I remember I used
to do some things,

00:25:02.830 --> 00:25:06.090
and that people used to tell
me do this, do this, do this.

00:25:06.090 --> 00:25:09.800
And until the day experimented
myself, by myself,

00:25:09.800 --> 00:25:13.040
is that when I really said
oh, this is really awesome.

00:25:13.040 --> 00:25:14.940
Like I should be
doing things this way.

00:25:14.940 --> 00:25:16.250
It's much more provisional.

00:25:16.250 --> 00:25:19.060
It makes much more sense.

00:25:19.060 --> 00:25:21.370
I think sometimes-- OK.

00:25:21.370 --> 00:25:23.860
I don't know if this
is-- I'm a developer.

00:25:23.860 --> 00:25:28.200
I'm not an entrepreneur,
I'm not a business person.

00:25:28.200 --> 00:25:32.120
But developers learn
best from failing.

00:25:32.120 --> 00:25:34.330
We learn best from
doing the wrong thing,

00:25:34.330 --> 00:25:39.030
then trying to look at
a way we were suggested,

00:25:39.030 --> 00:25:42.010
and saying like, you know what,
[INAUDIBLE] suggested this

00:25:42.010 --> 00:25:43.220
to me.

00:25:43.220 --> 00:25:46.220
And what I've been
trying has failed.

00:25:46.220 --> 00:25:47.990
And [INAUDIBLE]
suggested this to me.

00:25:47.990 --> 00:25:50.401
And let me try it, and
let's see if it works.

00:25:50.401 --> 00:25:51.900
And eventually, of
course, it works.

00:25:51.900 --> 00:25:53.358
Because it was a
better suggestion,

00:25:53.358 --> 00:25:55.780
it was an improvement,
everything else.

00:25:55.780 --> 00:25:59.320
The other thing
is that-- I'm not

00:25:59.320 --> 00:26:05.330
sure about this-- but is
that we succumb to authority.

00:26:05.330 --> 00:26:08.170
We succumb to authority
when authority is given

00:26:08.170 --> 00:26:10.640
in a much more stricter way.

00:26:10.640 --> 00:26:13.000
So for example is
like [? Mandela. ?]

00:26:13.000 --> 00:26:14.940
We learn a lot of things.

00:26:14.940 --> 00:26:17.090
That is a big one to learn.

00:26:17.090 --> 00:26:19.190
So for example,
continuous integration.

00:26:19.190 --> 00:26:21.300
You need to know a bit
of almost everything.

00:26:21.300 --> 00:26:23.049
I didn't want to go
and build the servers.

00:26:23.049 --> 00:26:25.830
I know that somebody else is
supposed to build the servers.

00:26:25.830 --> 00:26:28.750
But you're told like hey,
yo, the servers are down.

00:26:28.750 --> 00:26:29.310
Deal with it.

00:26:29.310 --> 00:26:30.820
I'll be back.

00:26:30.820 --> 00:26:33.740
And like, uh, I can't.

00:26:33.740 --> 00:26:36.770
And the best answer,
which usually

00:26:36.770 --> 00:26:41.620
silences any form of any kind
of developer is that you can.

00:26:41.620 --> 00:26:42.852
You can.

00:26:42.852 --> 00:26:45.310
If you've done this and you've
done all these other things,

00:26:45.310 --> 00:26:46.210
is you can.

00:26:46.210 --> 00:26:48.376
And I'm not hearing
anything else from you

00:26:48.376 --> 00:26:49.250
that it's impossible.

00:26:49.250 --> 00:26:52.260
If somebody else has done
it, why don't you do it.

00:26:52.260 --> 00:26:54.120
And when you're left
in that position,

00:26:54.120 --> 00:26:56.090
is that you either
do it, or you get

00:26:56.090 --> 00:26:57.972
fired because you didn't do it.

00:26:57.972 --> 00:26:59.430
And you don't want
to lose your job

00:26:59.430 --> 00:27:01.920
or you don't want
to lose the money.

00:27:01.920 --> 00:27:04.730
Lose the money that you are--
you wanted to work with.

00:27:04.730 --> 00:27:08.170
So as you see my explanation
is on a people's base,

00:27:08.170 --> 00:27:10.440
it's not like on an
architecture base.

00:27:10.440 --> 00:27:12.390
It's very hard
for people to move

00:27:12.390 --> 00:27:18.350
to a new-- like for example,
my phone runs on Android 4.2.

00:27:18.350 --> 00:27:20.820
The latest Android is 6.

00:27:20.820 --> 00:27:22.570
This year, I'm sure
they'll release 7.

00:27:22.570 --> 00:27:27.780
And believe me, I'm not
moving until my phone dies.

00:27:27.780 --> 00:27:29.340
And if you look at
that state, it's

00:27:29.340 --> 00:27:32.480
more of a person's
opinion than the-- like,

00:27:32.480 --> 00:27:34.360
I know 7 is awesome.

00:27:34.360 --> 00:27:36.655
I know 7 has been improved
and everything else.

00:27:36.655 --> 00:27:40.100
But because mine still
works, and maybe some day it

00:27:40.100 --> 00:27:43.450
will be killed,
that's when I'll move.

00:27:43.450 --> 00:27:47.626
So REST was in the
same situation.

00:27:47.626 --> 00:27:49.250
I think the biggest
lesson I've learned

00:27:49.250 --> 00:27:52.990
is that technology does not
surpass human interventions.

00:27:52.990 --> 00:27:53.790
It does not.

00:27:53.790 --> 00:27:57.414
We say like technology will take
over everything but it's us.

00:27:57.414 --> 00:27:58.330
Humans are pushing it.

00:27:58.330 --> 00:28:00.020
We learned to make this.

00:28:00.020 --> 00:28:02.060
We learned to push
it to the next level.

00:28:02.060 --> 00:28:03.600
So much as we make
our technology,

00:28:03.600 --> 00:28:06.360
adaptation will always
be-- like, for example,

00:28:06.360 --> 00:28:08.350
Angular 2 has been released.

00:28:08.350 --> 00:28:11.390
Believe me, I went to the pages
of Angular 2 over 100 times.

00:28:11.390 --> 00:28:14.140
I was looking at it this way and
I was like I'm not going there.

00:28:14.140 --> 00:28:15.050
I'll stay with 1.5.

00:28:15.050 --> 00:28:15.990
It's OK.

00:28:15.990 --> 00:28:17.120
I'll keep them.

00:28:17.120 --> 00:28:20.219
But as long as these
are days-- like maybe

00:28:20.219 --> 00:28:22.510
if my senior developer or my
senior trainer [INAUDIBLE]

00:28:22.510 --> 00:28:24.730
came and said, hey,
this project is supposed

00:28:24.730 --> 00:28:26.550
to be done with
Angular 2, the client

00:28:26.550 --> 00:28:29.360
does not want anything else,
it just wants Angular 2.

00:28:29.360 --> 00:28:30.475
Do I have an option?

00:28:30.475 --> 00:28:30.975
I don't.

00:28:30.975 --> 00:28:32.800
So I just have to adopt it.

00:28:32.800 --> 00:28:39.360
In other cases, some people
actually are just cognitive.

00:28:39.360 --> 00:28:43.480
They [INAUDIBLE] cognitive, and
they just adopt things easily.

00:28:43.480 --> 00:28:46.380
So when 2 comes out, they
dive into it, look into it.

00:28:46.380 --> 00:28:49.850
So it's a tricky aspect.

00:28:49.850 --> 00:28:55.910
But you, you sit in a very
good position at [INAUDIBLE].

00:28:55.910 --> 00:28:58.180
And I think you know
this more than me.

00:28:58.180 --> 00:28:58.985
I'm learning them.

00:28:58.985 --> 00:29:00.110
You know them more than me.

00:29:02.900 --> 00:29:03.880
Personally, I haven't.

00:29:03.880 --> 00:29:06.920
I haven't faced such challenges.

00:29:06.920 --> 00:29:08.030
And I'm grateful.

00:29:08.030 --> 00:29:09.930
I'm thankful.

00:29:09.930 --> 00:29:12.850
I'm thankful
because [INAUDIBLE].

00:29:12.850 --> 00:29:15.390
And believe me,
I feel I'd handle

00:29:15.390 --> 00:29:19.830
them more stupidly than
actually right now.

00:29:24.570 --> 00:29:28.630
Being our developer, a developer
in this place, it's a journey.

00:29:28.630 --> 00:29:31.630
And I remember there's a
time I used to say hey,

00:29:31.630 --> 00:29:34.762
I'm the HTML5 king and PHP king.

00:29:34.762 --> 00:29:37.100
Then after a while,
[INAUDIBLE] PHP

00:29:37.100 --> 00:29:38.610
didn't make sense at all to me.

00:29:38.610 --> 00:29:42.300
And I'm like, I'm speaking
really bad about PHP.

00:29:42.300 --> 00:29:46.640
Like you can find me making fun
of PHP every time, every day.

00:29:46.640 --> 00:29:50.470
And at some point I was
saying I'm PHP king.

00:29:50.470 --> 00:29:53.590
And then eventually when I
learned a couple of languages--

00:29:53.590 --> 00:29:56.950
like right now I've learned
at least four programming

00:29:56.950 --> 00:29:59.830
languages, Go, Python,
JavaScript, and PHP,

00:29:59.830 --> 00:30:04.860
over time-- I don't
feel so boastful.

00:30:07.400 --> 00:30:12.530
So I think it's a big challenge
when you start off development.

00:30:12.530 --> 00:30:14.780
Because programming is exciting.

00:30:14.780 --> 00:30:17.000
It's exciting when
you start it out.

00:30:17.000 --> 00:30:19.620
And then they start learning new
things, you get very excited.

00:30:19.620 --> 00:30:21.400
And at some point
you think you have,

00:30:21.400 --> 00:30:23.770
you know all the
knowledge in the world

00:30:23.770 --> 00:30:27.350
about a specific programming
language or a specific system.

00:30:27.350 --> 00:30:31.442
If you ask me about REST a year
ago, I couldn't describe it.

00:30:31.442 --> 00:30:32.900
I could have just
told you you make

00:30:32.900 --> 00:30:35.270
requests via [? gat, ?]
you get back JSON.

00:30:35.270 --> 00:30:37.430
I didn't know it's a
system architecture.

00:30:37.430 --> 00:30:39.090
But I knew how to use it.

00:30:39.090 --> 00:30:43.200
And we say ignorance is bliss,
but only bliss to some point.

00:30:46.230 --> 00:30:47.790
At that point, it
was bliss for me

00:30:47.790 --> 00:30:50.290
because I didn't see
the bigger picture.

00:30:50.290 --> 00:30:51.820
Most of us think
that we'll remain

00:30:51.820 --> 00:30:53.657
developers for the [INAUDIBLE].

00:30:53.657 --> 00:30:55.490
And I remember having
this argument actually

00:30:55.490 --> 00:30:57.448
with the same day who's
asked me this question,

00:30:57.448 --> 00:31:00.920
is that-- I used to.

00:31:00.920 --> 00:31:01.957
I stopped.

00:31:01.957 --> 00:31:03.540
I used to think I'd
remain a developer

00:31:03.540 --> 00:31:05.470
for the rest of my life.

00:31:05.470 --> 00:31:07.830
So like in 40 years
there doing some coding

00:31:07.830 --> 00:31:08.764
and stuff like that.

00:31:08.764 --> 00:31:10.680
You realize when you get
good at these things,

00:31:10.680 --> 00:31:13.310
people start pushing
you towards management.

00:31:13.310 --> 00:31:15.720
And when you move
towards management,

00:31:15.720 --> 00:31:18.980
you stop actually coding.

00:31:18.980 --> 00:31:21.120
But you understand everything
that has been done.

00:31:21.120 --> 00:31:25.400
And then the new
generation, the new guys

00:31:25.400 --> 00:31:29.550
who have come in who are
now where you are before.

00:31:29.550 --> 00:31:30.290
In that sense.

00:31:30.290 --> 00:31:36.740
Or the old guys who were
born in a previous age where

00:31:36.740 --> 00:31:38.630
these things are not there.

00:31:38.630 --> 00:31:39.715
MALE SPEAKER: [INAUDIBLE].

00:31:39.715 --> 00:31:41.090
EUGENE MUTAI:
Where SOAP matters.

00:31:44.030 --> 00:31:46.190
So I think because
he's brought it up,

00:31:46.190 --> 00:31:47.680
if I was going to
explain something

00:31:47.680 --> 00:31:51.330
to a really old guy
who is used to SOAP,

00:31:51.330 --> 00:31:54.430
I'd make a comparison
the same way I did.

00:31:54.430 --> 00:31:57.260
I'd look at what you're
trying to achieve.

00:31:57.260 --> 00:32:01.180
Are we trying to make people
carry specific actions

00:32:01.180 --> 00:32:02.170
to our servers?

00:32:02.170 --> 00:32:07.480
Or are we trying to collect
data, create data, and send it

00:32:07.480 --> 00:32:10.080
as resources to the users?

00:32:10.080 --> 00:32:12.840
And if you look at that point
and you argue with that point,

00:32:12.840 --> 00:32:16.720
and you tell the guy, I know
SOAP is good, but look at REST.

00:32:16.720 --> 00:32:18.980
We are doing a
data-oriented system.

00:32:18.980 --> 00:32:21.640
We are trying to
give people data.

00:32:21.640 --> 00:32:24.190
People are trying
to read our data.

00:32:24.190 --> 00:32:26.857
So it's more data driven
than actually action driven.

00:32:26.857 --> 00:32:28.440
They're not trying
to do transactions,

00:32:28.440 --> 00:32:32.300
they're not trying to do
like specific actions.

00:32:32.300 --> 00:32:34.710
And we don't really need
to secure these actions

00:32:34.710 --> 00:32:37.700
because we're using--
like for example, I

00:32:37.700 --> 00:32:41.176
didn't know back
then, I didn't know

00:32:41.176 --> 00:32:42.300
[? gat ?] is actually safe.

00:32:42.300 --> 00:32:44.070
It's safe and important.

00:32:44.070 --> 00:32:45.840
I didn't know that.

00:32:45.840 --> 00:32:49.997
I didn't know [? Post ?]
is not important.

00:32:49.997 --> 00:32:52.330
I had to first actually
research about the word itself--

00:32:52.330 --> 00:32:54.080
go to the dictionary,
find out the meaning

00:32:54.080 --> 00:32:57.450
of [INAUDIBLE] in
the first place

00:32:57.450 --> 00:32:59.616
before you move on to that.

00:32:59.616 --> 00:33:01.240
So if you look at
that stage, if you're

00:33:01.240 --> 00:33:02.940
moving towards-- in
most cases, you're

00:33:02.940 --> 00:33:07.300
moving towards product manager,
product management or project

00:33:07.300 --> 00:33:10.630
management, and you need to
know these architectures.

00:33:10.630 --> 00:33:14.135
You need to really go research,
learn them, understand them.

00:33:14.135 --> 00:33:16.260
As a developer, you don't
really need to know them.

00:33:16.260 --> 00:33:17.676
Because you're
developing systems.

00:33:17.676 --> 00:33:20.070
You just need to make the
systems work in a specific way

00:33:20.070 --> 00:33:21.710
that you've been told.

00:33:21.710 --> 00:33:25.640
And as a product manager,
you are in most cases,

00:33:25.640 --> 00:33:27.106
such people face that situation.

00:33:27.106 --> 00:33:29.355
Because you have people
higher than you who are asking

00:33:29.355 --> 00:33:29.890
you questions.

00:33:29.890 --> 00:33:31.100
Why are you doing
this the same way

00:33:31.100 --> 00:33:33.600
you're doing-- so you really
need to know what you're doing.

00:33:33.600 --> 00:33:35.610
You really need to
know what is SOAP.

00:33:35.610 --> 00:33:38.310
What are the advantages of SOAP?

00:33:38.310 --> 00:33:40.320
Why was it made in
the first place?

00:33:40.320 --> 00:33:42.010
So actually even
before SOAP, there

00:33:42.010 --> 00:33:46.580
was a system known as CORBA,
Common Object Request Broker

00:33:46.580 --> 00:33:47.540
Architecture.

00:33:47.540 --> 00:33:48.950
It was released in 1991.

00:33:48.950 --> 00:33:51.130
That was the version before it.

00:33:51.130 --> 00:33:54.380
So somebody could have faced
the same situation back then.

00:33:54.380 --> 00:33:57.029
Why is SOAP better than CORBA?

00:33:57.029 --> 00:33:59.070
So if you look at that,
it's going to like really

00:33:59.070 --> 00:34:00.219
do deep research.

00:34:00.219 --> 00:34:01.760
Then look at the
system you're trying

00:34:01.760 --> 00:34:03.560
to build in the first place.

00:34:03.560 --> 00:34:08.560
does it fit the SOAP basis,
or does it fit the REST basis?

00:34:08.560 --> 00:34:09.389
Is it data-driven?

00:34:09.389 --> 00:34:10.290
Is it action-driven?

00:34:10.290 --> 00:34:12.664
Do you need a protocol because
you need to really secure?

00:34:12.664 --> 00:34:15.320
Or do you need just
like a way of people

00:34:15.320 --> 00:34:17.170
communicating with it?

