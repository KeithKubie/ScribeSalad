WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:01:14.351
[MUSIC PLAYING]

00:01:14.351 --> 00:01:15.920
DANNY HERMES: Hey, everybody.

00:01:15.920 --> 00:01:16.970
I'm Danny Hermes.

00:01:16.970 --> 00:01:20.450
Welcome to this week's edition
of App Engine Google

00:01:20.450 --> 00:01:21.950
Developers Live.

00:01:21.950 --> 00:01:24.280
I'm here to talk about endpoints
with my colleagues,

00:01:24.280 --> 00:01:25.610
Dan Holevoet.

00:01:25.610 --> 00:01:26.880
DAN HOLEVOET: Hi.

00:01:26.880 --> 00:01:29.940
So today, we're going to talk
to you about a new feature

00:01:29.940 --> 00:01:32.710
that has just reached the
experimental phase in the App

00:01:32.710 --> 00:01:33.560
Engine SDK.

00:01:33.560 --> 00:01:34.710
DANNY HERMES: Literally
just reached.

00:01:34.710 --> 00:01:37.640
DAN HOLEVOET: Literally
hours before this.

00:01:37.640 --> 00:01:40.350
And the basic idea behind this
feature called Google Cloud

00:01:40.350 --> 00:01:42.940
Endpoints is that it's a really
easy way for you to

00:01:42.940 --> 00:01:48.020
make APIs hosted on App Engine
that you can consume within

00:01:48.020 --> 00:01:52.260
Android, iOS applications,
and JavaScript.

00:01:52.260 --> 00:01:54.100
DANNY HERMES: Why would
you want to do that?

00:01:54.100 --> 00:01:56.790
DAN HOLEVOET: Well, what we've
discovered with App Engine is

00:01:56.790 --> 00:02:00.170
actually it's a really great
place to host back ends for

00:02:00.170 --> 00:02:01.370
mobile applications.

00:02:01.370 --> 00:02:07.380
So the big pitch behind this
feature is that you can

00:02:07.380 --> 00:02:08.979
generate these APIs.

00:02:08.979 --> 00:02:11.260
We provide really great tooling
around them so that

00:02:11.260 --> 00:02:15.860
you can get great statically
typed client libraries for

00:02:15.860 --> 00:02:18.880
Java and Objective C. And then
if you're building a mobile

00:02:18.880 --> 00:02:23.095
application for the web as well,
you also get this great

00:02:23.095 --> 00:02:23.400
JavaScript library.

00:02:23.400 --> 00:02:24.642
DANNY HERMES: Totally.

00:02:24.642 --> 00:02:29.190
All right, well, I'm going
to get started now.

00:02:29.190 --> 00:02:32.330
From here forward, I'm going to
be teaching you guys about

00:02:32.330 --> 00:02:34.720
Endpoints through live coding.

00:02:34.720 --> 00:02:38.260
I'm going to be programming
in the Python SDK.

00:02:38.260 --> 00:02:42.930
The Python App Engine SDK
version 1.7.5 just became

00:02:42.930 --> 00:02:46.630
available today, and we had a
blog post announcing that.

00:02:46.630 --> 00:02:48.890
So let's get started.

00:02:48.890 --> 00:02:51.930
So here I am.

00:02:51.930 --> 00:02:53.030
My application--

00:02:53.030 --> 00:02:55.840
the very first thing I need,
I need an app.yaml file.

00:02:55.840 --> 00:02:59.310
So I'm not going to actually
deploy anything today, we're

00:02:59.310 --> 00:03:03.120
just going to be working in the
SDK, but everything that

00:03:03.120 --> 00:03:08.210
works in the SDK is also going
to be working in production

00:03:08.210 --> 00:03:09.155
and then some.

00:03:09.155 --> 00:03:13.170
So my App ID, I'll just put

00:03:13.170 --> 00:03:16.140
endpoints-app, just to be relevant.

00:03:16.140 --> 00:03:18.710
We need a version, we
need a runtime.

00:03:18.710 --> 00:03:20.485
I'm going to use python27.

00:03:20.485 --> 00:03:21.735
Is it thread safe?

00:03:24.250 --> 00:03:26.460
Threadsafe, true.

00:03:26.460 --> 00:03:30.680
And I can't remember.

00:03:30.680 --> 00:03:32.920
I've got to cheat.

00:03:32.920 --> 00:03:36.600
API version, there we go, to
actually tell us which version

00:03:36.600 --> 00:03:38.490
of the runtime were using.

00:03:38.490 --> 00:03:41.310
And I'll just continue
cheating.

00:03:41.310 --> 00:03:45.520
We're going to simply spin up a
back end, and we're going to

00:03:45.520 --> 00:03:48.960
use some of the testing tools
provided with the SDK and some

00:03:48.960 --> 00:03:53.720
of the rest of Google's API
tooling external to App Engine

00:03:53.720 --> 00:03:55.070
to actually test
this back end.

00:03:55.070 --> 00:03:56.570
We're not going to build a front
end, we're not going to

00:03:56.570 --> 00:03:59.390
build JavaScript, iOS, or
Android clients, but we will

00:03:59.390 --> 00:04:00.180
do this in the future.

00:04:00.180 --> 00:04:03.860
We just want to show you
quickly, in a few minutes, how

00:04:03.860 --> 00:04:06.110
you can get up and running
with your first back end.

00:04:06.110 --> 00:04:13.190
So what I have here is I'm
mapping the path _ah/spi, and

00:04:13.190 --> 00:04:16.690
then I have the wild card dot
glob, or dot asterisk after

00:04:16.690 --> 00:04:19.269
that, meaning everything in that
path will be handled by

00:04:19.269 --> 00:04:20.800
my app, main.application.

00:04:20.800 --> 00:04:24.350
And this is a special internal
path used to actually talk to

00:04:24.350 --> 00:04:26.590
Google's API infrastructure.

00:04:26.590 --> 00:04:29.910
In this case, it's not directly
talking to our API

00:04:29.910 --> 00:04:32.080
infrastructure because it's
running locally, but it talks

00:04:32.080 --> 00:04:33.190
to an approximation of that.

00:04:33.190 --> 00:04:36.120
But in production, it actually
talks to Google's API

00:04:36.120 --> 00:04:37.940
infrastructure directly.

00:04:37.940 --> 00:04:41.330
And I'll talk a bit more about
what that exchange looks like

00:04:41.330 --> 00:04:42.590
when we write some code.

00:04:42.590 --> 00:04:46.970
So now we need our main.py
file that's going to hold

00:04:46.970 --> 00:04:48.190
application.

00:04:48.190 --> 00:04:51.150
So I'll start up main.py.

00:04:53.790 --> 00:04:56.390
I'm going to have to cheat a bit
on this, but I'm going to

00:04:56.390 --> 00:04:59.290
go until I can't remember
anything.

00:04:59.290 --> 00:05:00.940
So the first thing
we do, we need to

00:05:00.940 --> 00:05:02.220
actually important endpoints.

00:05:02.220 --> 00:05:05.730
So as of today, and actually as
of the last release but it

00:05:05.730 --> 00:05:08.460
wasn't fully working, we
have App Engine in

00:05:08.460 --> 00:05:12.345
google.appengine.ext, and
we can just import

00:05:12.345 --> 00:05:13.480
endpoints from there.

00:05:13.480 --> 00:05:15.890
And that provides us with most
of the things we need to

00:05:15.890 --> 00:05:17.080
actually use endpoints.

00:05:17.080 --> 00:05:20.420
There's one other import that's
pretty important, and

00:05:20.420 --> 00:05:22.570
that's a library called
ProtoRPC.

00:05:22.570 --> 00:05:27.760
So ProtoRPC, I'm going to take
a break and talk about it.

00:05:27.760 --> 00:05:32.300
So we want the Messages module
within ProtoRPC, but what

00:05:32.300 --> 00:05:35.985
ProtoRPC is, it's a library
that is an experimental

00:05:35.985 --> 00:05:37.700
library as part of App Engine.

00:05:37.700 --> 00:05:39.450
It was released several
months ago, maybe a

00:05:39.450 --> 00:05:40.350
year ago at this point.

00:05:40.350 --> 00:05:43.150
I'm not exactly sure of
the full timeline.

00:05:43.150 --> 00:05:47.380
And it allows essentially a
native Python object that can

00:05:47.380 --> 00:05:48.620
talk protocol buffers.

00:05:48.620 --> 00:05:50.980
And this is pretty important,
especially when you're talking

00:05:50.980 --> 00:05:54.210
Google's internal
infrastructure, to actually

00:05:54.210 --> 00:05:59.980
send messages around and have
strongly typed messages

00:05:59.980 --> 00:06:03.260
sending from one arbitrary
runtime to another.

00:06:03.260 --> 00:06:06.420
And it's a way for large
services that aren't

00:06:06.420 --> 00:06:09.370
necessarily the same to be able
to talk to each other.

00:06:09.370 --> 00:06:13.410
And so since, as I mentioned
before, we have this path

00:06:13.410 --> 00:06:17.270
_ahspi to actually talk to
Google's infrastructure, we

00:06:17.270 --> 00:06:20.970
need to provide a mechanism
to actually make this

00:06:20.970 --> 00:06:22.080
conversation happen.

00:06:22.080 --> 00:06:25.890
And we use ProtoRPC to create
protocol buffers and actually

00:06:25.890 --> 00:06:28.430
speak JSON RPC.

00:06:28.430 --> 00:06:30.090
I'm not going to go much
further than that.

00:06:30.090 --> 00:06:33.540
But essentially, it's a way to
have strongly typed messages

00:06:33.540 --> 00:06:36.580
that you can use to actually
talk to other parts of the

00:06:36.580 --> 00:06:37.270
infrastructure.

00:06:37.270 --> 00:06:37.960
Cool.

00:06:37.960 --> 00:06:41.520
So before we actually design
our application, I want to

00:06:41.520 --> 00:06:42.970
talk about what it is.

00:06:42.970 --> 00:06:47.190
So what I'm going to do is make
a simple API that allows

00:06:47.190 --> 00:06:51.470
you to insert tasks and
to retrieve tasks.

00:06:51.470 --> 00:06:54.210
Now, I know what you're
probably thinking.

00:06:54.210 --> 00:06:58.200
Google has a Tasks API and we
saw Dan talk about it not too

00:06:58.200 --> 00:06:59.850
long ago on GDL.

00:06:59.850 --> 00:07:01.180
That's OK.

00:07:01.180 --> 00:07:04.530
I'm not proposing that you build
a Task API, but it's a

00:07:04.530 --> 00:07:07.760
simple enough concept for
everyone to understand, and I

00:07:07.760 --> 00:07:10.440
just want to show you
a proof of concept.

00:07:10.440 --> 00:07:14.650
But don't build a production
Task API, because you can

00:07:14.650 --> 00:07:17.310
already use existing ones.

00:07:17.310 --> 00:07:21.380
With that in mind, we need a
way to represent our tasks

00:07:21.380 --> 00:07:23.130
using ProtoRPC, right?

00:07:23.130 --> 00:07:27.210
So what kind of fields would
you like in a task object?

00:07:27.210 --> 00:07:28.930
DAN HOLEVOET: Maybe a
name might be good.

00:07:28.930 --> 00:07:30.180
DANNY HERMES: OK.

00:07:32.100 --> 00:07:35.850
DAN HOLEVOET: Someone
who owns the task.

00:07:35.850 --> 00:07:37.480
DANNY HERMES: OK.

00:07:37.480 --> 00:07:38.060
DAN HOLEVOET: How about
a due date?

00:07:38.060 --> 00:07:39.810
Can you do that one?

00:07:39.810 --> 00:07:41.060
DANNY HERMES: Yeah.

00:07:43.430 --> 00:07:46.320
Dan has made this difficult.

00:07:46.320 --> 00:07:47.665
DAN HOLEVOET: Let's just start
with a name and an owner.

00:07:47.665 --> 00:07:48.380
Can we do that one first?

00:07:48.380 --> 00:07:49.060
DANNY HERMES: Yeah.

00:07:49.060 --> 00:07:52.660
So the reason the due date is
difficult, it's just difficult

00:07:52.660 --> 00:07:53.190
to do right.

00:07:53.190 --> 00:07:55.890
We could fake it with a string,
but this is going to

00:07:55.890 --> 00:07:58.270
leave the scope of this talk
pretty quickly if we do that.

00:07:58.270 --> 00:08:01.790
So we're going to have the name,
which is a string, and

00:08:01.790 --> 00:08:02.560
the owner--

00:08:02.560 --> 00:08:03.650
again, just a string.

00:08:03.650 --> 00:08:05.980
We're not going to use any Auth
to be able to find out

00:08:05.980 --> 00:08:08.100
emails or names of people
inserting things.

00:08:11.930 --> 00:08:15.790
So what we have here, we have a
class called Task, which is

00:08:15.790 --> 00:08:19.880
going to represent our data,
and it's a subclass of

00:08:19.880 --> 00:08:21.080
messages.message.

00:08:21.080 --> 00:08:24.460
Messages is that module from
approach ProtoRPC, and this is

00:08:24.460 --> 00:08:27.040
a ProtoRPC message definition
to actually

00:08:27.040 --> 00:08:28.870
talk protocol buffers.

00:08:28.870 --> 00:08:30.090
And so we give it two fields.

00:08:30.090 --> 00:08:32.600
The first field is a name, and
this is going to be an

00:08:32.600 --> 00:08:35.549
instance of
messages.StringField.

00:08:35.549 --> 00:08:39.010
And we have these generic field
classes which actually

00:08:39.010 --> 00:08:42.580
allow us to create classes
within our message classes,

00:08:42.580 --> 00:08:43.340
like Task here.

00:08:43.340 --> 00:08:45.760
And we actually have to give
them numbers to have some sort

00:08:45.760 --> 00:08:48.860
of ordering within our protocol
buffer definition.

00:08:48.860 --> 00:08:52.510
And for owner, I'm going to use
the same thing except I'm

00:08:52.510 --> 00:08:56.090
going to give it the index
of two instead of one.

00:08:56.090 --> 00:08:59.160
Now, should any of these
be required?

00:08:59.160 --> 00:09:00.330
DAN HOLEVOET: The name should
probably be required.

00:09:00.330 --> 00:09:01.720
DANNY HERMES: Name should
probably be required.

00:09:01.720 --> 00:09:06.390
So we can add required equals
true to the string field that

00:09:06.390 --> 00:09:08.950
represents name, and this will
actually be enforced when the

00:09:08.950 --> 00:09:12.200
objects are created and passed
around and do other things.

00:09:12.200 --> 00:09:16.970
Now, I'll just wrap up on
getting our data and actually

00:09:16.970 --> 00:09:19.340
go and build the API.

00:09:19.340 --> 00:09:20.640
So I need another class.

00:09:20.640 --> 00:09:23.460
I need a class to represent
lists of tasks because we're

00:09:23.460 --> 00:09:25.910
going to do queries that are
going to return lists.

00:09:25.910 --> 00:09:28.820
So it's going to be the
same type of thing.

00:09:28.820 --> 00:09:30.790
I'm not asking for Dan's
input on here.

00:09:30.790 --> 00:09:33.190
We're just going to have one
field, Items, and then Items

00:09:33.190 --> 00:09:34.500
Field is just going
to be a list.

00:09:34.500 --> 00:09:38.200
So instead of Task, will
call it Task List.

00:09:38.200 --> 00:09:41.480
Instead of Name, we'll
call the field Items.

00:09:41.480 --> 00:09:42.960
It's not going to be
a string field.

00:09:42.960 --> 00:09:45.110
It's actually going to
be a message field.

00:09:45.110 --> 00:09:51.950
So this message field holds more
messages, and like we saw

00:09:51.950 --> 00:09:55.110
with String Field, the very
first argument to the

00:09:55.110 --> 00:09:56.680
constructor is the index.

00:09:56.680 --> 00:09:59.250
For message fields,
it's actually the

00:09:59.250 --> 00:10:00.250
class of the message.

00:10:00.250 --> 00:10:03.660
So we need a list of tasks
in our task list.

00:10:03.660 --> 00:10:05.890
So our message field is going
to have Task as the first

00:10:05.890 --> 00:10:09.050
argument, the index one as the
second, and instead of

00:10:09.050 --> 00:10:11.210
required, we're going to have
repeated equals true because

00:10:11.210 --> 00:10:16.250
we'd like multiple tasks
within this task list.

00:10:16.250 --> 00:10:17.100
OK, great.

00:10:17.100 --> 00:10:19.060
So now we're representing
our data.

00:10:19.060 --> 00:10:21.270
Now we need to actually
build our API.

00:10:21.270 --> 00:10:23.830
And again, building the API,
we're going to use the

00:10:23.830 --> 00:10:27.280
mechanics provided
by ProtoRPC.

00:10:27.280 --> 00:10:32.680
I'm going to add from ProtoRPC,
import Remote here.

00:10:32.680 --> 00:10:38.080
Remote is another module
provided by ProtoRPC which

00:10:38.080 --> 00:10:42.360
allows for actually standing up
a ProtoRPC client which can

00:10:42.360 --> 00:10:44.060
communicate externally.

00:10:44.060 --> 00:10:46.350
These are just ways to represent
data, but Remote

00:10:46.350 --> 00:10:49.070
actually allows us
to make a client.

00:10:49.070 --> 00:10:52.860
And as we'll see, it allows us
to make a WSGI Handler, which

00:10:52.860 --> 00:10:55.770
is what's going to end up in
application and be able to

00:10:55.770 --> 00:10:59.240
talk to the rest
of the pieces.

00:10:59.240 --> 00:11:00.180
OK, cool.

00:11:00.180 --> 00:11:06.650
So we'll start off with a Task
API, is the silly name, and

00:11:06.650 --> 00:11:09.230
it's going to be a subclass
of remote.Service.

00:11:09.230 --> 00:11:13.460
And remote.Service is that
class that I was talking

00:11:13.460 --> 00:11:17.060
about, that actually allows for
things like communication

00:11:17.060 --> 00:11:18.830
and WSGI Handler, et cetera.

00:11:18.830 --> 00:11:20.050
OK, great.

00:11:20.050 --> 00:11:22.770
So we've got nothing in there.

00:11:22.770 --> 00:11:24.470
We're going to need
two things, right?

00:11:24.470 --> 00:11:26.450
We're going to need to
insert, and we're

00:11:26.450 --> 00:11:27.470
going to need to list.

00:11:27.470 --> 00:11:29.880
So I'm going to create two
dummy methods that

00:11:29.880 --> 00:11:31.720
do nothing for now.

00:11:31.720 --> 00:11:34.800
Insert is going to
start us off.

00:11:34.800 --> 00:11:38.130
It's going to be an instance
method, meaning we have self

00:11:38.130 --> 00:11:41.900
on it, and it's going
to take a request.

00:11:41.900 --> 00:11:43.680
So the request is going to come
in and we're going to

00:11:43.680 --> 00:11:46.650
insert something based on
what's in the request.

00:11:46.650 --> 00:11:50.100
More details on that in a bit.

00:11:50.100 --> 00:11:52.380
And then List is going to
be something similar.

00:11:55.750 --> 00:11:58.450
I'm going to call
it List Tasks.

00:11:58.450 --> 00:12:05.340
I could use List, but as we just
saw in Emacs there, it

00:12:05.340 --> 00:12:08.140
recognizes it as one of those
reserves words in Python that

00:12:08.140 --> 00:12:09.550
you probably just
shouldn't use.

00:12:09.550 --> 00:12:12.697
And I'm also to be extra clear,
instead of insert, I'm

00:12:12.697 --> 00:12:16.000
going to say insert
task, just to be

00:12:16.000 --> 00:12:17.540
good programming citizens.

00:12:17.540 --> 00:12:18.790
OK, great.

00:12:22.420 --> 00:12:23.610
This is fine for now.

00:12:23.610 --> 00:12:24.850
It won't actually matter.

00:12:24.850 --> 00:12:29.590
So in order to make this talk
to Endpoints, we need to add

00:12:29.590 --> 00:12:30.440
some decorators.

00:12:30.440 --> 00:12:33.540
We need to annotate these a bit,
get some metadata, and

00:12:33.540 --> 00:12:36.690
actually figure out what this
actually does, how it relates

00:12:36.690 --> 00:12:39.730
to task list and task, which
we just defined, and a few

00:12:39.730 --> 00:12:41.230
other bits and pieces.

00:12:41.230 --> 00:12:44.700
So now, I'm actually going
to use this from

00:12:44.700 --> 00:12:48.890
google.appengine.ext import
Endpoints import.

00:12:48.890 --> 00:12:53.760
So what do you think the first
thing I should add is, Dan?

00:12:53.760 --> 00:12:54.170
DAN HOLEVOET: I don't know.

00:12:54.170 --> 00:12:55.610
Why don't you show us?

00:12:55.610 --> 00:12:56.340
DANNY HERMES: Fine.

00:12:56.340 --> 00:12:57.830
Dan doesn't like this.

00:12:57.830 --> 00:13:00.875
Dan wants to talk about Java
endpoints, and I'm sure he

00:13:00.875 --> 00:13:01.800
will at some point.

00:13:01.800 --> 00:13:04.230
DAN HOLEVOET: I just don't want
to make it too difficult

00:13:04.230 --> 00:13:05.290
for doing this on the air.

00:13:05.290 --> 00:13:05.900
DANNY HERMES: I see.

00:13:05.900 --> 00:13:07.630
He thought he made it
hard for me before.

00:13:07.630 --> 00:13:10.950
Well, I kind of like it when I
screw up on camera because it

00:13:10.950 --> 00:13:13.150
makes it more interesting for
you guys and lets you see how

00:13:13.150 --> 00:13:15.750
we debug things and how we
actually program and figure

00:13:15.750 --> 00:13:16.240
things out.

00:13:16.240 --> 00:13:17.700
But Dan doesn't like
it, apparently.

00:13:17.700 --> 00:13:19.310
DAN HOLEVOET: I want due
dates in a task.

00:13:19.310 --> 00:13:20.090
DANNY HERMES: Yes.

00:13:20.090 --> 00:13:23.760
So I'm going to first decorate
the service.

00:13:23.760 --> 00:13:28.230
So this Task API service, it
needs to know its name.

00:13:28.230 --> 00:13:31.320
For those of you who have used
Google APIs before, you'll

00:13:31.320 --> 00:13:34.800
know for the majority of our
APIs, our discovery based

00:13:34.800 --> 00:13:39.320
APIs, they're really
identified by

00:13:39.320 --> 00:13:40.370
a name and a version.

00:13:40.370 --> 00:13:43.820
So YouTube has three APIs.

00:13:43.820 --> 00:13:47.000
The first two aren't discovery
based, but the third one is.

00:13:47.000 --> 00:13:50.860
So if you have YouTube V3, you
can identify the YouTube API,

00:13:50.860 --> 00:13:54.700
and so similarly for many
of our other APIs.

00:13:54.700 --> 00:13:56.260
So we give it a name.

00:13:56.260 --> 00:13:58.120
We'll just call it Tasks.

00:13:58.120 --> 00:13:59.740
Very creative there.

00:13:59.740 --> 00:14:02.550
We'll give it a version, V1.

00:14:02.550 --> 00:14:06.120
And just for fun, I'm going to
give it a description so that

00:14:06.120 --> 00:14:09.860
if any human was actually
consuming what's called the

00:14:09.860 --> 00:14:11.620
discovery document for
this application--

00:14:11.620 --> 00:14:14.000
I've already mentioned
discovery a bit--

00:14:14.000 --> 00:14:15.810
they could see a nice
description of what this is.

00:14:15.810 --> 00:14:23.040
So the human readable
description, we'll just say

00:14:23.040 --> 00:14:26.130
API for task management.

00:14:26.130 --> 00:14:28.740
It's not literally for task
management because we're not

00:14:28.740 --> 00:14:31.310
to allow you to delete and check
off and do these other

00:14:31.310 --> 00:14:31.920
things, but--

00:14:31.920 --> 00:14:32.750
DAN HOLEVOET: Or
have due dates.

00:14:32.750 --> 00:14:33.640
DANNY HERMES: --we
easily could.

00:14:33.640 --> 00:14:34.660
Or have due dates.

00:14:34.660 --> 00:14:36.620
Well, who needs a due date?

00:14:36.620 --> 00:14:39.180
OK, great.

00:14:39.180 --> 00:14:42.660
So now, I actually need
to do a similar

00:14:42.660 --> 00:14:43.920
thing for the methods.

00:14:43.920 --> 00:14:47.130
In the same way that the API
itself needs to know who it

00:14:47.130 --> 00:14:50.220
is, each individual method
needs to know who it is

00:14:50.220 --> 00:14:52.560
relative to the application.

00:14:52.560 --> 00:14:56.600
So I'm going to do something
similar, but instead of

00:14:56.600 --> 00:14:58.690
endpoints.API, I'm
going to use the

00:14:58.690 --> 00:15:00.670
endpoints.method decorator.

00:15:00.670 --> 00:15:04.400
Now, if these aren't intuitive
names, I don't know what else

00:15:04.400 --> 00:15:05.170
we should have used.

00:15:05.170 --> 00:15:07.920
I think they're pretty
intuitive names.

00:15:07.920 --> 00:15:12.750
So we need to give this a few
things, but most importantly,

00:15:12.750 --> 00:15:15.320
we need to tell it what kind
of data it can expect to

00:15:15.320 --> 00:15:18.840
receive and what kind of data
it can expect to spit back

00:15:18.840 --> 00:15:20.330
out, right?

00:15:20.330 --> 00:15:25.760
So on the way in, we're going to
take a task, and on the way

00:15:25.760 --> 00:15:28.840
out, we're going to spit
a task out, right?

00:15:28.840 --> 00:15:29.910
It's not magic.

00:15:29.910 --> 00:15:34.190
Now, what we do with that task
once it reaches our API is up

00:15:34.190 --> 00:15:38.630
to us, but this is why we
actually made those protocol

00:15:38.630 --> 00:15:41.880
buffer definitions, so that we
can actually figure out what's

00:15:41.880 --> 00:15:43.980
supposed to go in here.

00:15:43.980 --> 00:15:47.090
So we've got that.

00:15:47.090 --> 00:15:49.180
This is the part where
I may need to cheat.

00:15:49.180 --> 00:15:52.540
So I'm fairly certain I can
remember all this, but I guess

00:15:52.540 --> 00:15:54.390
we'll try to run it and
see if it breaks.

00:15:54.390 --> 00:15:56.910
That's the funnest thing.

00:15:56.910 --> 00:16:02.770
So to give the method a name,
I'm actually going to use

00:16:02.770 --> 00:16:05.250
task.insert.

00:16:05.250 --> 00:16:08.570
I probably don't need to use the
dot, but I'm not 100% sure

00:16:08.570 --> 00:16:11.210
if this will-- so traditionally
with Google

00:16:11.210 --> 00:16:14.810
APIs, for those who are
familiar, we have an API, and

00:16:14.810 --> 00:16:17.040
then there's sub-resources
within the API.

00:16:17.040 --> 00:16:19.720
So for people familiar with the
Drive API, for example,

00:16:19.720 --> 00:16:22.640
they have an About sub-resource,
and you can get

00:16:22.640 --> 00:16:24.930
information about the
individual user as

00:16:24.930 --> 00:16:26.060
it relates to Drive.

00:16:26.060 --> 00:16:28.630
And they also have a File
sub-resource, so if you want

00:16:28.630 --> 00:16:32.880
to get a list of files or get
metadata about an individual

00:16:32.880 --> 00:16:37.830
file, delete a file, change a
title of a document, you name

00:16:37.830 --> 00:16:39.420
it, they have a sub-resource.

00:16:39.420 --> 00:16:42.650
So in this, we're thinking of
Task as our sub-resource and

00:16:42.650 --> 00:16:46.450
Insert as the actual method
name for this.

00:16:46.450 --> 00:16:50.460
In addition, we actually need to
tell the API the path that

00:16:50.460 --> 00:16:52.500
it can expect the request
to come in on.

00:16:52.500 --> 00:16:56.520
So here for Path I used
the string path.

00:16:56.520 --> 00:16:57.280
I didn't mean to.

00:16:57.280 --> 00:16:58.810
That's because I was
talking and typing.

00:16:58.810 --> 00:17:01.880
We're just going to use
the string task.

00:17:01.880 --> 00:17:04.910
So that means when they
come through--

00:17:04.910 --> 00:17:07.060
in this case, it's going
to be _ah/API/task--

00:17:10.089 --> 00:17:11.150
well actually, that's
not even sure.

00:17:11.150 --> 00:17:12.020
There's more--

00:17:12.020 --> 00:17:13.040
DAN HOLEVOET: API
name, version.

00:17:13.040 --> 00:17:13.290
DANNY HERMES: Yeah,

00:17:13.290 --> 00:17:16.390
/APIname/version/task, there we go.

00:17:16.390 --> 00:17:18.079
They will actually
hit our API.

00:17:18.079 --> 00:17:20.880
But you won't necessarily need
to worry about all this, as

00:17:20.880 --> 00:17:24.119
we'll show in a bit, because
the rich amount of client

00:17:24.119 --> 00:17:27.650
libraries that have been built
up by us and our colleagues

00:17:27.650 --> 00:17:31.630
for people who are already
using Google APIs.

00:17:31.630 --> 00:17:34.230
Within App Engine, we don't
necessarily talk about other

00:17:34.230 --> 00:17:38.410
Google APIs as much, but other
teams that you may have seen

00:17:38.410 --> 00:17:42.580
on GDL or through various other
things are very strongly

00:17:42.580 --> 00:17:44.890
about building up this
ecosystem, making these

00:17:44.890 --> 00:17:47.890
libraries work, and doing
great things like that.

00:17:47.890 --> 00:17:50.580
DAN HOLEVOET: If you build an
API using Endpoints, the end

00:17:50.580 --> 00:17:53.650
result will look a lot
like Google APIs that

00:17:53.650 --> 00:17:54.930
were authored by Google.

00:17:54.930 --> 00:17:58.220
And the way you consume them
within your applications will

00:17:58.220 --> 00:18:00.840
feel very similar, if not
identical, to the way you'd

00:18:00.840 --> 00:18:02.790
use other Google APIs.

00:18:02.790 --> 00:18:04.040
DANNY HERMES: Definitely.

00:18:05.550 --> 00:18:08.770
I believe I have everything
I need.

00:18:08.770 --> 00:18:11.430
Actually, no, I don't quite.

00:18:11.430 --> 00:18:15.900
So I'm also going to specify
an http method.

00:18:15.900 --> 00:18:19.090
So I want to specify it as POST,
since we're inserting

00:18:19.090 --> 00:18:23.680
something that's the
RESTful concept.

00:18:23.680 --> 00:18:25.360
Now, I actually have
to know this.

00:18:25.360 --> 00:18:32.940
POST is the default for this
keyword argument, but I wanted

00:18:32.940 --> 00:18:36.300
to actually have it in there
to indicate it to you guys.

00:18:36.300 --> 00:18:39.170
So enough talking.

00:18:39.170 --> 00:18:42.440
I'm just going to actually wrap
up on this particular

00:18:42.440 --> 00:18:44.880
method and we'll actually see
if we can get it to work.

00:18:44.880 --> 00:18:48.030
So instead of actually saving
the request or doing anything

00:18:48.030 --> 00:18:51.050
with it, we're just going to
return it back to the user and

00:18:51.050 --> 00:18:51.730
see what happens.

00:18:51.730 --> 00:18:57.770
So before I can run it, I
actually need an application.

00:18:57.770 --> 00:19:02.750
I believe I can just use
endpoins.api_server and give

00:19:02.750 --> 00:19:06.150
it a list of my APIs.

00:19:06.150 --> 00:19:07.415
I haven't cheated yet, have I?

00:19:07.415 --> 00:19:08.205
DAN HOLEVOET: Not really.

00:19:08.205 --> 00:19:09.742
DANNY HERMES: I kind of took
the API version and then

00:19:09.742 --> 00:19:12.260
mapped it to YAML.

00:19:12.260 --> 00:19:16.800
So what I've done here, in
addition to endpoints.api and

00:19:16.800 --> 00:19:20.670
endpoints.method, these
decorators that we've used, we

00:19:20.670 --> 00:19:22.510
also have endpoints.api_server.

00:19:22.510 --> 00:19:25.150
And what that does,
it takes a list of

00:19:25.150 --> 00:19:26.580
APIs that you've defined--

00:19:26.580 --> 00:19:29.360
so in this case, we've only
defined task API--

00:19:29.360 --> 00:19:34.430
and it will actually spin up a
server to serve the request

00:19:34.430 --> 00:19:36.550
and actually make
the API work.

00:19:36.550 --> 00:19:39.090
So enough coding.

00:19:39.090 --> 00:19:43.200
Let's actually see if
it works or not.

00:19:43.200 --> 00:19:44.020
DAN HOLEVOET: Place your bets.

00:19:44.020 --> 00:19:44.680
DANNY HERMES: Place your bets.

00:19:44.680 --> 00:19:48.930
So I'm here in the Google
App Engine Launcher.

00:19:48.930 --> 00:19:51.430
I haven't figured out how to
increase the font size on this

00:19:51.430 --> 00:19:55.250
ever, but I've got my app
running, and I'll head over to

00:19:55.250 --> 00:19:57.500
Chrome just to make
sure it's running.

00:19:57.500 --> 00:20:00.580
So I went to the Admin
console for the app,

00:20:00.580 --> 00:20:02.810
and again, it's running.

00:20:02.810 --> 00:20:03.930
It's good.

00:20:03.930 --> 00:20:09.020
And we want to test the actual
explorer for the application.

00:20:09.020 --> 00:20:11.410
And so it's very simple.

00:20:11.410 --> 00:20:15.125
There's a protected path under
_ah, which is, as people

00:20:15.125 --> 00:20:18.720
familiar with App Engine know,
full of protected paths.

00:20:18.720 --> 00:20:22.510
So if we go local host 8080,
which is the local name for

00:20:22.510 --> 00:20:24.015
the app that I'm running,
_ah/api/explorer--

00:20:28.100 --> 00:20:29.350
now, this is the moment
of truth.

00:20:32.710 --> 00:20:34.290
Ha!

00:20:34.290 --> 00:20:36.040
No problems.

00:20:36.040 --> 00:20:37.670
No problems yet.

00:20:37.670 --> 00:20:42.770
So what happened was, for people
who can't see, the font

00:20:42.770 --> 00:20:45.180
size in the URL bar
is fairly small.

00:20:45.180 --> 00:20:49.640
But what it's done is it's
redirected us to the Google

00:20:49.640 --> 00:20:51.997
APIs Explorer, which lives
at developers.googl

00:20:51.997 --> 00:20:55.730
e.com/APIs/explorer.

00:20:55.730 --> 00:21:00.370
And it's passed the query
parameter base equals with the

00:21:00.370 --> 00:21:04.700
actual place where my
application lives, and this

00:21:04.700 --> 00:21:09.320
base is LocalHost8080/_ah/api.

00:21:09.320 --> 00:21:11.790
And this is essentially a route
for all operations.

00:21:11.790 --> 00:21:15.640
Dan mentioned that full path is
going to be this route plus

00:21:15.640 --> 00:21:19.620
you API name plus your API
version plus whatever your

00:21:19.620 --> 00:21:20.450
path is, right?

00:21:20.450 --> 00:21:25.000
So this is how we're actually
calling it, and everything

00:21:25.000 --> 00:21:28.170
gets constructed based on that
route and other pieces of data

00:21:28.170 --> 00:21:29.530
by your application.

00:21:29.530 --> 00:21:32.010
So it's loaded up the full
list of APIs that we have

00:21:32.010 --> 00:21:34.480
available, just one.

00:21:34.480 --> 00:21:36.970
When I constructed my
endpoints.api server, I just

00:21:36.970 --> 00:21:37.790
passed it one thing.

00:21:37.790 --> 00:21:39.270
That's all we expected.

00:21:39.270 --> 00:21:42.570
We see the version, V1,
that we created.

00:21:42.570 --> 00:21:44.570
Just to prove I'm not lying,
let's go change

00:21:44.570 --> 00:21:46.820
it and refresh this.

00:21:46.820 --> 00:21:48.070
Version vGDL.

00:21:52.060 --> 00:21:53.020
Loading.

00:21:53.020 --> 00:21:54.840
Wonderful!

00:21:54.840 --> 00:21:56.080
No issues so far.

00:21:56.080 --> 00:21:58.310
I don't know, maybe it's less
fun if there's no errors.

00:21:58.310 --> 00:22:00.840
Maybe I should have had
more screw-ups.

00:22:00.840 --> 00:22:01.390
DAN HOLEVOET: Maybe something's

00:22:01.390 --> 00:22:02.520
secretly going to go wrong.

00:22:02.520 --> 00:22:05.450
DANNY HERMES: Yeah, we'll see.

00:22:05.450 --> 00:22:10.000
So we see the name we gave to
the API is Tasks, and then

00:22:10.000 --> 00:22:12.700
this human readable description,
API for task

00:22:12.700 --> 00:22:16.060
management, also there for your
use when you're debugging

00:22:16.060 --> 00:22:20.410
and for end users if
you go that route.

00:22:20.410 --> 00:22:24.650
So when I click into this API,
we get a list of the methods

00:22:24.650 --> 00:22:25.840
that we have available to us.

00:22:25.840 --> 00:22:31.830
So as I mentioned, we have the
task.insert method, and the

00:22:31.830 --> 00:22:34.340
way it's interpreted by the
API's explorer and by the

00:22:34.340 --> 00:22:38.210
general infrastructure that is
used to create these APIs,

00:22:38.210 --> 00:22:42.140
Tasks is the API name, Task is
the resource, and Insert is

00:22:42.140 --> 00:22:43.400
the method.

00:22:43.400 --> 00:22:46.980
So I'm going to do something
which I hope breaks.

00:22:46.980 --> 00:22:50.280
I'm going to try to call this
insert method with absolutely

00:22:50.280 --> 00:22:50.960
nothing in there.

00:22:50.960 --> 00:22:55.600
So we have this little box
with Request Body.

00:22:55.600 --> 00:22:58.980
This is, again, part of the
phenomenal tooling we have

00:22:58.980 --> 00:23:01.210
already available for you when
you're working with Google

00:23:01.210 --> 00:23:03.310
APIs, can automatically
be used with your

00:23:03.310 --> 00:23:04.930
API for testing out.

00:23:04.930 --> 00:23:08.130
This Request Body knows
the fields that it has

00:23:08.130 --> 00:23:09.190
available to it.

00:23:09.190 --> 00:23:12.990
From the discovery document
for my application, we

00:23:12.990 --> 00:23:18.060
actually see Name and Owner
here, which are the fields

00:23:18.060 --> 00:23:19.410
that we added.

00:23:19.410 --> 00:23:21.540
We made Name a required
property.

00:23:21.540 --> 00:23:25.140
So I'm going to submit a request
without Name and see

00:23:25.140 --> 00:23:26.420
what happens.

00:23:26.420 --> 00:23:28.255
I'm going to guess that--

00:23:31.270 --> 00:23:32.960
interesting.

00:23:32.960 --> 00:23:34.740
Let's see what happens.

00:23:34.740 --> 00:23:37.590
So we got a 400.

00:23:37.590 --> 00:23:38.860
Wonderful.

00:23:38.860 --> 00:23:42.110
And that 400 means it didn't
work, and the error is

00:23:42.110 --> 00:23:44.100
essentially that there
was an error parsing

00:23:44.100 --> 00:23:45.590
the ProtoRPC request.

00:23:45.590 --> 00:23:49.240
So when ProtoRPC got the empty
body, it tried to turn the

00:23:49.240 --> 00:23:54.350
empty body into an instance of
this task message class that

00:23:54.350 --> 00:23:56.520
we defined, and it said,
no, no, no, no, no.

00:23:56.520 --> 00:24:01.060
We're missing the required
field, Name.

00:24:01.060 --> 00:24:02.600
DAN HOLEVOET: And does
it say that in there?

00:24:02.600 --> 00:24:03.120
DANNY HERMES: It does.

00:24:03.120 --> 00:24:03.410
DAN HOLEVOET: Excellent.

00:24:03.410 --> 00:24:06.190
Message Task is missing
required field, Name.

00:24:06.190 --> 00:24:08.470
That one is a bit ambiguous
if you call your field

00:24:08.470 --> 00:24:10.840
"Name," it turns out.

00:24:10.840 --> 00:24:11.550
DAN HOLEVOET: Give
it a better name.

00:24:11.550 --> 00:24:13.510
DANNY HERMES: Let's
just give it Name.

00:24:13.510 --> 00:24:14.500
Go to sleep.

00:24:14.500 --> 00:24:17.540
That's a good name for
a task, right?

00:24:17.540 --> 00:24:20.250
OK, wonderful.

00:24:20.250 --> 00:24:22.580
So far, no bugs that
I know of.

00:24:22.580 --> 00:24:25.050
So we have a 200, OK.

00:24:25.050 --> 00:24:28.380
And the response is exactly
what was in the request.

00:24:28.380 --> 00:24:33.160
So now, let's make the API do
something, something at all.

00:24:33.160 --> 00:24:36.530
So we have this Request
Object that comes in.

00:24:36.530 --> 00:24:42.780
I'm just going to do a
repeat for the name.

00:24:42.780 --> 00:24:46.570
So if the name is A, it's going
to turn it into AA.

00:24:46.570 --> 00:24:52.655
So I think times equals will
work for this, yes?

00:24:52.655 --> 00:24:53.930
DAN HOLEVOET: I think
you're right.

00:24:53.930 --> 00:24:55.980
DANNY HERMES: I'm just
going to try it.

00:24:55.980 --> 00:24:59.330
So I'm calling request.name
times equals true.

00:24:59.330 --> 00:25:01.430
As far as I know, it'll take
the string that's in

00:25:01.430 --> 00:25:04.260
request.name and replace
it with string string

00:25:04.260 --> 00:25:06.160
concatenated on top of itself.

00:25:06.160 --> 00:25:07.410
Let's just see.

00:25:13.810 --> 00:25:14.470
Great.

00:25:14.470 --> 00:25:16.360
Go to sleep go to sleep.

00:25:16.360 --> 00:25:18.130
Obviously, we don't
want to do that.

00:25:18.130 --> 00:25:24.290
So before I actually go into
ways that you can store the

00:25:24.290 --> 00:25:27.050
data, interact with the data
otherwise, I'm going to move

00:25:27.050 --> 00:25:30.390
on and implement the
list method.

00:25:35.290 --> 00:25:39.760
I don't know off the top my head
the path to the discovery

00:25:39.760 --> 00:25:44.900
document, but I want to show you
guys this before I move on

00:25:44.900 --> 00:25:45.660
to the list method.

00:25:45.660 --> 00:25:49.720
So we've mentioned this a lot.

00:25:49.720 --> 00:25:54.310
So this is actually creating a
discovery based API for you.

00:25:54.310 --> 00:25:58.310
That's the reason this API's
explorer works, and the reason

00:25:58.310 --> 00:26:01.350
our Android and Objective C
clients just work for you,

00:26:01.350 --> 00:26:04.220
because they already know how to
take a discovery document,

00:26:04.220 --> 00:26:07.230
consume it, and turn it into
the thing it needs to be

00:26:07.230 --> 00:26:08.100
turned into.

00:26:08.100 --> 00:26:11.300
So I believe this is the link.

00:26:11.300 --> 00:26:13.490
Let's see, fingers crossed.

00:26:22.120 --> 00:26:23.650
I might get give up.

00:26:27.340 --> 00:26:29.260
DAN HOLEVOET: You could show
a public one as well if you

00:26:29.260 --> 00:26:31.510
don't want to show
your local one.

00:26:31.510 --> 00:26:33.490
DANNY HERMES: Yeah,
that's not as fun.

00:26:37.080 --> 00:26:38.950
Yeah, it was the wrong link.

00:26:38.950 --> 00:26:41.240
I just suck.

00:26:41.240 --> 00:26:42.417
No, it was the right one.

00:26:42.417 --> 00:26:43.880
I suck again.

00:26:43.880 --> 00:26:45.640
No, you know what?

00:26:45.640 --> 00:26:47.070
I went too far back
in the history.

00:26:47.070 --> 00:26:51.370
It's V1 and we changed V1 to
vGDL for your benefit.

00:26:51.370 --> 00:26:51.700
There we go.

00:26:51.700 --> 00:26:52.850
It really doesn't exist.

00:26:52.850 --> 00:26:54.480
But vGDL does exist.

00:26:54.480 --> 00:26:56.610
There we go, our first 404.

00:26:56.610 --> 00:26:59.820
We've got a 404.

00:26:59.820 --> 00:27:01.000
So here's the discovery
document.

00:27:01.000 --> 00:27:04.570
Now, it's just a JSON document,
but it's fairly

00:27:04.570 --> 00:27:08.680
long, and it describes very nice
things that intelligent

00:27:08.680 --> 00:27:10.150
clients can actually use.

00:27:10.150 --> 00:27:12.000
So we've got simple
things, right?

00:27:12.000 --> 00:27:15.300
We've got the name and the
version, tasks, vGDL, the

00:27:15.300 --> 00:27:17.230
description.

00:27:17.230 --> 00:27:20.740
But very quickly, we get some
more useful things.

00:27:20.740 --> 00:27:23.530
So we have here schemas.

00:27:23.530 --> 00:27:28.280
Schemas actually describe the
data so that things like what

00:27:28.280 --> 00:27:31.520
we saw on the client, those drop
downs that know what it's

00:27:31.520 --> 00:27:34.070
supposed to actually be sending,
can actually create

00:27:34.070 --> 00:27:35.720
these drop downs.

00:27:35.720 --> 00:27:37.910
And it's the same thing
when you have--

00:27:37.910 --> 00:27:40.580
this is running in JavaScript,
so it's just like whatever you

00:27:40.580 --> 00:27:41.440
want to do, do it.

00:27:41.440 --> 00:27:44.440
But in strongly typed languages
like Java and

00:27:44.440 --> 00:27:47.850
Objective C on Android, we're
actually able to use these

00:27:47.850 --> 00:27:51.120
schemas and create strongly
typed classes

00:27:51.120 --> 00:27:51.930
that you can call.

00:27:51.930 --> 00:27:54.590
You don't have to write any of
the code to interact with

00:27:54.590 --> 00:27:56.070
these things, right?

00:27:56.070 --> 00:27:59.120
And of course, we also
have Resources.

00:27:59.120 --> 00:28:01.690
Resources gives us a way to
actually figure out what the

00:28:01.690 --> 00:28:02.790
API can do.

00:28:02.790 --> 00:28:06.630
So we have this Resource Task
which I created, as I

00:28:06.630 --> 00:28:09.310
mentioned, and it has
a bunch of methods.

00:28:09.310 --> 00:28:13.260
Well for now, it just has one
method, but it will list more

00:28:13.260 --> 00:28:17.860
and you can get listings
of other sub-resources.

00:28:17.860 --> 00:28:20.910
So I just looked at the clock.

00:28:20.910 --> 00:28:24.770
I'm going to implement
List Task.

00:28:24.770 --> 00:28:26.305
Actually, first I need
to store them.

00:28:29.490 --> 00:28:32.350
So I'm going to do it.

00:28:32.350 --> 00:28:34.580
It'll be OK.

00:28:34.580 --> 00:28:36.390
So I'm going to import ndb.

00:28:36.390 --> 00:28:40.030
We're going to come up with a
simple model to actually store

00:28:40.030 --> 00:28:45.240
the task itself, and we're going
to use ndb queries to

00:28:45.240 --> 00:28:46.320
populate our list.

00:28:46.320 --> 00:28:48.420
DAN HOLEVOET: And why are
we going to use ndb?

00:28:48.420 --> 00:28:49.450
DANNY HERMES: We're going
to use ndb because

00:28:49.450 --> 00:28:51.820
db is not as good.

00:28:51.820 --> 00:28:53.950
There are two data store
APIs in Python.

00:28:53.950 --> 00:28:55.810
One's called db, one's
called ndb.

00:28:55.810 --> 00:28:58.340
The feature set of db is
completely contained in the

00:28:58.340 --> 00:29:00.030
feature set of ndb.

00:29:00.030 --> 00:29:03.350
And without really changing any
code at all, by switching

00:29:03.350 --> 00:29:05.340
to ndb, you get caching
for free.

00:29:05.340 --> 00:29:09.540
I've said this a lot on GDL,
but I'll say it some more--

00:29:09.540 --> 00:29:09.870
DAN HOLEVOET: It's good
to repeat it.

00:29:09.870 --> 00:29:11.930
DANNY HERMES: --and I'll
continue to say it some more.

00:29:11.930 --> 00:29:15.865
So I'm just going to copy this
model pretty much verbatim--

00:29:15.865 --> 00:29:18.020
excuse me, this message class.

00:29:18.020 --> 00:29:20.190
And I'm going to create an ndb
model, and I'll just call it

00:29:20.190 --> 00:29:22.190
task model.

00:29:22.190 --> 00:29:26.560
So it's going to be a subclass
of ndb.model, and instead of

00:29:26.560 --> 00:29:28.420
messages.StringField,
I'm going to use

00:29:28.420 --> 00:29:30.210
ndb.StringProperty.

00:29:30.210 --> 00:29:32.120
For those paying extra close
attention, you may have

00:29:32.120 --> 00:29:36.960
noticed that I initially typed
StringProperty instead of

00:29:36.960 --> 00:29:39.100
StringField.

00:29:39.100 --> 00:29:43.510
Unlike with the protocol buffer
definitions, here, we

00:29:43.510 --> 00:29:45.640
don't actually need the
index one and two.

00:29:45.640 --> 00:29:47.830
So I'm going to use the same
field names, Name and Owner,

00:29:47.830 --> 00:29:50.550
and I'm going to make
Name required again.

00:29:50.550 --> 00:29:55.490
So all I'm going to do with this
task model is turn the

00:29:55.490 --> 00:29:59.050
request into an instance
of task model.

00:29:59.050 --> 00:30:03.330
So I'm going to set Name equal
to the name from the request.

00:30:03.330 --> 00:30:08.110
I'm going to set Owner equal to
the owner from the request,

00:30:08.110 --> 00:30:09.720
request.owner.

00:30:09.720 --> 00:30:12.380
I have no sense for how close
this is to 80 characters,

00:30:12.380 --> 00:30:14.980
because this font is so big.

00:30:14.980 --> 00:30:16.820
And I'm just going to put
that in the data store.

00:30:16.820 --> 00:30:20.320
So in this initial call to Task
Model, I'm creating a

00:30:20.320 --> 00:30:23.280
model instance, and on the
instance, there's a put method

00:30:23.280 --> 00:30:27.250
which just saves the object
in the data store.

00:30:27.250 --> 00:30:29.880
So here, it's going to come in
handy that we have the Data

00:30:29.880 --> 00:30:32.840
Store Viewer open in
the admin console.

00:30:32.840 --> 00:30:35.680
So let me do a few of these.

00:30:35.680 --> 00:30:39.210
So we've done this
for Go to Sleep.

00:30:39.210 --> 00:30:41.350
Maybe we'll have Wake Up.

00:30:41.350 --> 00:30:42.290
Who should wake up?

00:30:42.290 --> 00:30:44.610
Definitely not me.

00:30:44.610 --> 00:30:46.650
Can't say Dan H, because
that's both of us.

00:30:51.210 --> 00:30:54.225
Did that execute?

00:30:54.225 --> 00:30:55.710
There we go.

00:30:55.710 --> 00:30:59.670
And so let me refresh
this guy.

00:30:59.670 --> 00:31:01.940
If we go to the data store, we
can actually see the models

00:31:01.940 --> 00:31:06.115
that we've inserted, and if we
were to play around more with

00:31:06.115 --> 00:31:07.680
it, we could get more of them.

00:31:07.680 --> 00:31:11.570
But we just want to do a query
and then peace out.

00:31:11.570 --> 00:31:14.080
So let's actually implement
this other method.

00:31:14.080 --> 00:31:22.860
So in the query case,
we actually don't

00:31:22.860 --> 00:31:24.445
need an input request.

00:31:27.820 --> 00:31:29.190
Actually no.

00:31:29.190 --> 00:31:30.230
We're not going to use it.

00:31:30.230 --> 00:31:37.560
So there's one, I can't remember
what it's called.

00:31:37.560 --> 00:31:43.360
I think it's ProtoRPC
Message Types.

00:31:43.360 --> 00:31:45.800
Let's see.

00:31:45.800 --> 00:31:49.660
I believe, in
ProtoRPC.message_types, there

00:31:49.660 --> 00:31:51.500
is a class called
Void Message.

00:31:51.500 --> 00:31:56.080
And Void Message is for things
like a simple query like this

00:31:56.080 --> 00:31:58.650
where you don't actually want to
send any information in the

00:31:58.650 --> 00:31:59.550
query, you just want

00:31:59.550 --> 00:32:00.990
information out in the response.

00:32:00.990 --> 00:32:03.440
Now in reality, if you're doing
queries, you'd like to

00:32:03.440 --> 00:32:06.260
allow paging, so you'd
want somebody to

00:32:06.260 --> 00:32:07.630
give a token for paging.

00:32:07.630 --> 00:32:12.160
You'd want to allow them
to limit the size.

00:32:12.160 --> 00:32:14.410
And there's probably tons
of other things

00:32:14.410 --> 00:32:14.820
you'd want to allow.

00:32:14.820 --> 00:32:15.510
DAN HOLEVOET: Filters,
things like that.

00:32:15.510 --> 00:32:16.720
DANNY HERMES: Filters,
et cetera.

00:32:16.720 --> 00:32:20.140
But for this one, we're just
going to use Void Message.

00:32:20.140 --> 00:32:22.710
And on the way out, we're going
to have a task list.

00:32:27.340 --> 00:32:30.980
We're going to call
this task.list.

00:32:30.980 --> 00:32:33.060
We'll leave it in the
Task resource.

00:32:33.060 --> 00:32:35.880
Doesn't really matter, we can
put it in another resource.

00:32:35.880 --> 00:32:37.460
It's doing the same things.

00:32:37.460 --> 00:32:39.530
Instead of using the
path Task, we're

00:32:39.530 --> 00:32:41.930
using the path Tasks.

00:32:41.930 --> 00:32:43.940
Also, instead of POST,
we're using GET.

00:32:43.940 --> 00:32:48.750
So actually, since we're using
different http verbs, we could

00:32:48.750 --> 00:32:53.680
actually use the same path,
Task, for both, but it's not

00:32:53.680 --> 00:32:57.490
very intuitive to have Task if
you're returning a list of

00:32:57.490 --> 00:32:58.810
tasks, right?

00:32:58.810 --> 00:33:01.890
So it actually turns out that
request won't be used because

00:33:01.890 --> 00:33:05.680
it's going to be an instance
of Void Message.

00:33:05.680 --> 00:33:14.270
And we're going to have to use
ndb here to actually query our

00:33:14.270 --> 00:33:15.940
task model.

00:33:15.940 --> 00:33:18.720
So this is about endpoints,
not ndb.

00:33:18.720 --> 00:33:23.270
So if there are ndb things that
are not familiar, feel

00:33:23.270 --> 00:33:26.820
free to ask them on our
Moderator queue or put them

00:33:26.820 --> 00:33:28.210
other places.

00:33:28.210 --> 00:33:32.490
But for now, I'm just
going to do it.

00:33:32.490 --> 00:33:35.880
So there's a query method on
the model itself, and I can

00:33:35.880 --> 00:33:37.970
just loop through all the
results in the query.

00:33:37.970 --> 00:33:43.880
So for task in TaskModel.query,
I'm going to

00:33:43.880 --> 00:33:53.090
save an instance of the
ProtoRPC Task Model

00:33:53.090 --> 00:33:55.920
corresponding to what came
from the data store.

00:33:55.920 --> 00:33:59.980
Now we can see you'd probably
like some nice methods to go

00:33:59.980 --> 00:34:01.680
back and forth, and we're
actually going to talk about

00:34:01.680 --> 00:34:04.970
this a bit next week.

00:34:04.970 --> 00:34:07.720
But for now, we're just
going to do it the

00:34:07.720 --> 00:34:09.090
old fashioned way.

00:34:09.090 --> 00:34:13.929
So using this task, we're
going to append

00:34:13.929 --> 00:34:15.210
an instance of Task.

00:34:15.210 --> 00:34:19.150
Now, Task is the ProtoRPC class,
not the ndb class.

00:34:19.150 --> 00:34:21.310
But we're going to actually use
the same values from the

00:34:21.310 --> 00:34:22.800
task that we got from
the data store.

00:34:22.800 --> 00:34:28.150
So Task, we're going to pass
Name, task.name, and Owner is

00:34:28.150 --> 00:34:29.400
going to be task.owner.

00:34:32.980 --> 00:34:38.870
And then we're going to return
an instance of TaskLists, and

00:34:38.870 --> 00:34:41.695
for Items, we're just going to
give it our list of tasks.

00:34:41.695 --> 00:34:42.389
DAN HOLEVOET: Sounds good.

00:34:42.389 --> 00:34:43.310
DANNY HERMES: Fingers crossed?

00:34:43.310 --> 00:34:44.230
DAN HOLEVOET: Fingers crossed.

00:34:44.230 --> 00:34:45.370
DANNY HERMES: Let's see it.

00:34:45.370 --> 00:34:48.940
So I'm going to reload the page,
which has all my methods

00:34:48.940 --> 00:34:51.949
that I can use.

00:34:51.949 --> 00:34:54.409
Nothing broke yet.

00:34:54.409 --> 00:34:57.570
Going to go into
the List Method

00:34:57.570 --> 00:35:00.770
now to actually execute.

00:35:00.770 --> 00:35:03.200
And we've got a 200.

00:35:03.200 --> 00:35:04.020
DAN HOLEVOET: Is the
content there?

00:35:04.020 --> 00:35:05.470
DANNY HERMES: The content
is there.

00:35:05.470 --> 00:35:05.810
DAN HOLEVOET: Perfect.

00:35:05.810 --> 00:35:07.460
DANNY HERMES: It is not
pretty printed.

00:35:07.460 --> 00:35:08.990
I actually know why it's
not pretty printed.

00:35:08.990 --> 00:35:10.650
We should do this.

00:35:10.650 --> 00:35:13.270
JSON.dumps, if you include
indent equals two,

00:35:13.270 --> 00:35:14.170
it'll make it pretty.

00:35:14.170 --> 00:35:15.240
This isn't so pretty.

00:35:15.240 --> 00:35:18.720
But what it has, it has items
with a list with two elements.

00:35:18.720 --> 00:35:21.800
The first is the task Go to
Sleep with no owner, and the

00:35:21.800 --> 00:35:24.485
second, the less lazy
one of us, Dan--

00:35:24.485 --> 00:35:26.900
it's actually not true
in real life--

00:35:26.900 --> 00:35:28.640
owns the task Wake Up.

00:35:28.640 --> 00:35:32.380
And you could, of course, go
ahead and insert something

00:35:32.380 --> 00:35:41.630
else like Record this.

00:35:41.630 --> 00:35:42.900
DAN HOLEVOET: Answer my email.

00:35:42.900 --> 00:35:43.880
Schedule meetings.

00:35:43.880 --> 00:35:45.590
DANNY HERMES: Mystery
GDL producer.

00:35:51.920 --> 00:35:55.580
And then we go back, we ask for
a list, and hopefully, the

00:35:55.580 --> 00:35:58.500
task records this for Mystery
GDL Producers in there.

00:35:58.500 --> 00:35:59.940
There we go.

00:35:59.940 --> 00:36:02.790
So I'm going to wrap this up.

00:36:02.790 --> 00:36:06.500
We're going to be doing a fair
amount more of production

00:36:06.500 --> 00:36:09.530
content, some live, some
not live for Endpoints.

00:36:09.530 --> 00:36:12.240
But next week, I'm going to be
talking about another library

00:36:12.240 --> 00:36:14.990
that you can use that I
personally wrote called

00:36:14.990 --> 00:36:16.840
Endpoints Proto Data Store.

00:36:16.840 --> 00:36:20.560
And from here, we're going to go
to the Moderator and try to

00:36:20.560 --> 00:36:22.860
answer as many questions
as makes sense.

00:36:22.860 --> 00:36:25.270
DAN HOLEVOET: Let's also put
in a plug for the public

00:36:25.270 --> 00:36:27.100
documentation we have.

00:36:27.100 --> 00:36:30.460
If you go to developers.googl
e.com/AppEngine, we have nice

00:36:30.460 --> 00:36:34.270
Java and Python documentation
there for Endpoints.

00:36:34.270 --> 00:36:38.850
If you follow our repositories
on GitHub, Google Cloud

00:36:38.850 --> 00:36:43.060
Platform, we also have examples
of the Java and

00:36:43.060 --> 00:36:46.820
Python back end in a simple tic
tac toe application, and

00:36:46.820 --> 00:36:50.350
we have example clients for tic
tac toe for JavaScript,

00:36:50.350 --> 00:36:52.550
iOS, and Android as well.

00:36:52.550 --> 00:36:54.627
So those are pretty good places
to get started if you

00:36:54.627 --> 00:36:56.080
want to see a little bit
more about this.

00:36:56.080 --> 00:36:57.550
DANNY HERMES: Totally.

00:36:57.550 --> 00:36:59.670
DAN HOLEVOET: All right, so
let's go to the questions.

00:36:59.670 --> 00:37:02.270
Let me refresh these here.

00:37:02.270 --> 00:37:03.100
We've got five.

00:37:03.100 --> 00:37:03.890
Excellent.

00:37:03.890 --> 00:37:07.100
So first one, how can I use
Google Endpoints code

00:37:07.100 --> 00:37:10.450
generation via command line
tools like Maven or Gradle so

00:37:10.450 --> 00:37:13.280
that release engineers and build
tools like Jenkins can

00:37:13.280 --> 00:37:16.250
build and test Endpoints from
annotated source code.

00:37:16.250 --> 00:37:19.910
So I think if I understand this
question correctly, it's

00:37:19.910 --> 00:37:23.360
asking how you would integrate
some of the client library

00:37:23.360 --> 00:37:26.560
generation, maybe discovery doc
generation that we do as

00:37:26.560 --> 00:37:30.840
part of the SDK into the release
managements that you

00:37:30.840 --> 00:37:31.980
might want to do with Maven.

00:37:31.980 --> 00:37:33.670
So I believe--

00:37:33.670 --> 00:37:36.490
and I'm not an expert with Maven
by any stretch of the

00:37:36.490 --> 00:37:37.810
imagination--

00:37:37.810 --> 00:37:42.480
but I believe you can run
command line scripts from

00:37:42.480 --> 00:37:44.550
within a Maven command.

00:37:44.550 --> 00:37:48.570
So all the things that you were
showing, if I were to

00:37:48.570 --> 00:37:51.480
actually go and generate an
Android client library, an

00:37:51.480 --> 00:37:53.920
Objective C client library, I
just run a command on the

00:37:53.920 --> 00:37:54.730
command line.

00:37:54.730 --> 00:37:57.260
We have equivalence in both
Python and Java for that.

00:37:57.260 --> 00:38:02.000
I could create a rule that
says, build my back end.

00:38:02.000 --> 00:38:05.230
When I'm done, generate this
command that will run based

00:38:05.230 --> 00:38:08.310
off the JARs that I've
generated, give me my output

00:38:08.310 --> 00:38:09.220
client library.

00:38:09.220 --> 00:38:11.030
So it will totally work.

00:38:11.030 --> 00:38:13.230
Maybe we needed some
examples on this.

00:38:13.230 --> 00:38:14.370
I'm not exactly sure.

00:38:14.370 --> 00:38:15.950
Maybe that's enough for people
to figure it out.

00:38:15.950 --> 00:38:17.620
We'll see, I guess.

00:38:17.620 --> 00:38:22.470
DANNY HERMES: In the Python
case, there's Endpoint cfg.py,

00:38:22.470 --> 00:38:25.145
and it's in our wonderful
documentation,

00:38:25.145 --> 00:38:27.080
which launched today.

00:38:27.080 --> 00:38:31.390
And for those who want to use
it with integration and

00:38:31.390 --> 00:38:35.330
testing, the source is open,
so you can just see the

00:38:35.330 --> 00:38:38.140
methods which actually
correspond to the argument

00:38:38.140 --> 00:38:42.160
parser and actually call those
directly, or somehow script

00:38:42.160 --> 00:38:44.600
calling it yourself.

00:38:44.600 --> 00:38:44.940
DAN HOLEVOET: Right.

00:38:44.940 --> 00:38:48.440
And we have a .sh equivalent
for the Java side, too.

00:38:48.440 --> 00:38:51.020
DANNY HERMES: Is it Endpoint
cfg.sh, or Endpoints.sh?

00:38:51.020 --> 00:38:52.220
DAN HOLEVOET: I belive so.

00:38:52.220 --> 00:38:54.420
I believe it's Endpoint cfg.sh

00:38:54.420 --> 00:38:55.320
DANNY HERMES: Good enough.

00:38:55.320 --> 00:38:59.525
So we have Endpoint cfg.sh and
.py for each of your poisons.

00:38:59.525 --> 00:38:59.820
DAN HOLEVOET: Yes.

00:38:59.820 --> 00:39:01.750
For people who like
to use Eclipse--

00:39:01.750 --> 00:39:04.060
I'm sure there are some of
you-- we also have an

00:39:04.060 --> 00:39:06.720
excellent integration in the
Google plug-in for Eclipse

00:39:06.720 --> 00:39:10.950
that lets you really easily
generate client libraries

00:39:10.950 --> 00:39:13.040
without having to touch the
command line at all.

00:39:13.040 --> 00:39:14.770
So if you use Eclipse,
definitely do that.

00:39:14.770 --> 00:39:16.220
It's way easier.

00:39:16.220 --> 00:39:18.490
But if you're not an Eclipse
person or you prefer the

00:39:18.490 --> 00:39:21.450
command line, we have great
tools for that stuff.

00:39:21.450 --> 00:39:22.210
Next question.

00:39:22.210 --> 00:39:25.220
Are Endpoints allowed to return
binary content, i.e. a

00:39:25.220 --> 00:39:28.770
blobster item, or they
limited to text?

00:39:28.770 --> 00:39:35.110
DANNY HERMES: So we only used
string here just for ease.

00:39:35.110 --> 00:39:39.260
There are many types supported,
and we're working

00:39:39.260 --> 00:39:40.770
on getting support
for all of them.

00:39:40.770 --> 00:39:44.230
We currently support strings.

00:39:44.230 --> 00:39:49.060
In Python, we support bytes,
but what happens on the

00:39:49.060 --> 00:39:54.890
client, you're going to have a
URL safe base 64 version, and

00:39:54.890 --> 00:39:57.180
that's what gets passed to the
server, and the server decides

00:39:57.180 --> 00:39:59.150
whether or not those bytes are
good or not, whether or not

00:39:59.150 --> 00:40:03.560
it's safe base 64.

00:40:03.560 --> 00:40:14.040
And we support integers, both
32-bit and 64-bit, and we

00:40:14.040 --> 00:40:17.870
support Booleans, we support
both floats and doubles.

00:40:17.870 --> 00:40:19.340
You name it, we support it.

00:40:19.340 --> 00:40:23.250
And we're working on getting
full support within Endpoints

00:40:23.250 --> 00:40:26.140
for this to actually talk to
Google's API infrastructure.

00:40:26.140 --> 00:40:26.490
DAN HOLEVOET: Right.

00:40:26.490 --> 00:40:29.200
And in both the Python and Java
case, you can also nest

00:40:29.200 --> 00:40:30.320
classes inside each other.

00:40:30.320 --> 00:40:32.880
So if you want a more
complex hierarchy of

00:40:32.880 --> 00:40:33.560
things, you can do that.

00:40:33.560 --> 00:40:35.525
DANNY HERMES: As we saw
in Task List, right?

00:40:35.525 --> 00:40:35.840
DAN HOLEVOET: Right.

00:40:35.840 --> 00:40:36.146
DANNY HERMES: Wow.

00:40:36.146 --> 00:40:39.790
We had a message field which
referenced the task, Message

00:40:39.790 --> 00:40:41.490
Class, and you can--

00:40:41.490 --> 00:40:42.450
turtles all the way down.

00:40:42.450 --> 00:40:44.280
You can recurse it
all you like.

00:40:44.280 --> 00:40:46.520
DAN HOLEVOET: Yes, exactly.

00:40:46.520 --> 00:40:47.200
Next question.

00:40:47.200 --> 00:40:49.610
If my JavaScript client code is
running within the same app

00:40:49.610 --> 00:40:52.710
ID defining the endpoints and
using App Engine's user

00:40:52.710 --> 00:40:55.930
service, are we automatically
authenticated to make requests

00:40:55.930 --> 00:40:59.140
or do we need to do the
OAuth process anyway?

00:40:59.140 --> 00:41:00.805
DANNY HERMES: You are not
automatically authenticated.

00:41:03.480 --> 00:41:06.940
So the way the request comes
through API, it comes through

00:41:06.940 --> 00:41:10.150
Google's API infrastructure
first, rather than to your

00:41:10.150 --> 00:41:11.600
application directly.

00:41:11.600 --> 00:41:15.870
So this note about same
application isn't necessarily

00:41:15.870 --> 00:41:17.620
same application.

00:41:17.620 --> 00:41:19.800
The sweet spot there isn't
necessarily your web app.

00:41:19.800 --> 00:41:23.450
It's your web app and
your mobile apps.

00:41:23.450 --> 00:41:25.970
So no, the cookie that you have
in the browser does not

00:41:25.970 --> 00:41:27.870
actually come through with the
request, so you would need to

00:41:27.870 --> 00:41:29.260
go through the OAuth
dance too.

00:41:29.260 --> 00:41:32.180
But to have sort of a unified
experience with the way you're

00:41:32.180 --> 00:41:36.540
treating users, it makes as much
sense to use OAuth in the

00:41:36.540 --> 00:41:38.670
browser as it does
to use cookies.

00:41:38.670 --> 00:41:41.270
And we'll be talking more about
OAuth at later dates.

00:41:41.270 --> 00:41:45.730
But we've tried to make it as
easy as possible for launch,

00:41:45.730 --> 00:41:47.250
but Auth is always
hard, right?

00:41:47.250 --> 00:41:49.480
DAN HOLEVOET: As someone that
has spent a very large amount

00:41:49.480 --> 00:41:53.060
of time dealing with OAuth one
and two, I can say that this

00:41:53.060 --> 00:41:57.020
is actually, in my opinion, a
relatively amazingly simple

00:41:57.020 --> 00:41:59.450
experience.

00:41:59.450 --> 00:42:01.650
So we're looking forward to
showing you more about this.

00:42:01.650 --> 00:42:02.840
DANNY HERMES: Click a
few buttons, cross

00:42:02.840 --> 00:42:03.830
your fingers, right?

00:42:03.830 --> 00:42:05.990
DAN HOLEVOET: Yeah.

00:42:05.990 --> 00:42:09.550
DANNY HERMES: I could do Auth
right now if you want.

00:42:09.550 --> 00:42:09.700
We'll wait.

00:42:09.700 --> 00:42:10.200
DAN HOLEVOET: Let's save it.

00:42:10.200 --> 00:42:11.710
Let's save it.

00:42:11.710 --> 00:42:13.910
All right, next question.

00:42:13.910 --> 00:42:19.090
I'd like to know if Unity
Endpoint is in your road map

00:42:19.090 --> 00:42:20.830
in the short term?

00:42:20.830 --> 00:42:23.650
DANNY HERMES: What is
Unity Endpoint?

00:42:23.650 --> 00:42:26.270
DAN HOLEVOET: I'm not sure, but
that suggests to me that

00:42:26.270 --> 00:42:27.910
it's not in our short
term roadmap.

00:42:27.910 --> 00:42:29.070
DANNY HERMES: Probably.

00:42:29.070 --> 00:42:29.860
DAN HOLEVOET: We can find out.

00:42:29.860 --> 00:42:31.780
We can reply to the question
in Moderator.

00:42:31.780 --> 00:42:32.520
DANNY HERMES: OK.

00:42:32.520 --> 00:42:33.740
I'm going to Google it.

00:42:33.740 --> 00:42:34.230
DAN HOLEVOET: All right.

00:42:34.230 --> 00:42:36.710
Sounds good.

00:42:36.710 --> 00:42:39.090
So that may be a
game framework.

00:42:39.090 --> 00:42:41.110
DANNY HERMES: Unity is a game
framework, but the word

00:42:41.110 --> 00:42:43.510
"unity" is pretty generic.

00:42:43.510 --> 00:42:45.708
DAN HOLEVOET: Universal.

00:42:45.708 --> 00:42:46.580
DANNY HERMES: I don't know.

00:42:46.580 --> 00:42:47.680
We'll have to come
back to that one.

00:42:47.680 --> 00:42:48.410
DAN HOLEVOET: We'll come
back to that one.

00:42:48.410 --> 00:42:49.010
All right.

00:42:49.010 --> 00:42:50.610
And the last question
has actually

00:42:50.610 --> 00:42:52.795
been down-voted heavily.

00:42:52.795 --> 00:42:58.280
It's sort of unrelated about
Excel of and Filemaker.

00:42:58.280 --> 00:42:59.610
So let's just leave that one.

00:42:59.610 --> 00:42:59.870
DANNY HERMES: Good deal.

00:42:59.870 --> 00:43:01.190
DAN HOLEVOET: I think
we're done.

00:43:01.190 --> 00:43:01.810
DANNY HERMES: All right.

00:43:01.810 --> 00:43:04.300
Well, thanks everybody.

00:43:04.300 --> 00:43:07.600
Join us again here same
time next week.

00:43:07.600 --> 00:43:10.690
I'm going to be talking again
about Python Endpoints, but a

00:43:10.690 --> 00:43:13.160
library called Endpoints
Proto Data Store.

00:43:13.160 --> 00:43:16.180
And we will be announcing on
the Google Cloud Platform

00:43:16.180 --> 00:43:19.380
Developers page, as well as
many other social media

00:43:19.380 --> 00:43:23.080
channels, the other times
that we'll be talking.

00:43:23.080 --> 00:43:23.390
DAN HOLEVOET: Great.

00:43:23.390 --> 00:43:24.440
Sounds good.

00:43:24.440 --> 00:43:25.020
Thank you.

00:43:25.020 --> 00:43:26.270
DANNY HERMES: All right.

