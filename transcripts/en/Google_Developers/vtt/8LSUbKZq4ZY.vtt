WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.494
[MUSIC PLAYING]

00:00:03.905 --> 00:00:06.280
WESLEY CHUN: Hi, this is Wesley
Chun, engineer at Google,

00:00:06.280 --> 00:00:09.420
and happy to introduce you
to the Google Slides API.

00:00:09.420 --> 00:00:10.020
It's new.

00:00:10.020 --> 00:00:12.090
We've never had an
API for slides before.

00:00:12.090 --> 00:00:13.420
Isn't that exciting?

00:00:13.420 --> 00:00:15.740
With the API, developers
can write apps that create

00:00:15.740 --> 00:00:17.610
or update slide presentations.

00:00:17.610 --> 00:00:19.039
What does that really mean?

00:00:19.039 --> 00:00:20.580
Well, there are so
many possibilities

00:00:20.580 --> 00:00:22.500
I can only give you a few ideas.

00:00:22.500 --> 00:00:24.550
An API means you can
take that data sitting

00:00:24.550 --> 00:00:26.240
in a database or a
spreadsheet and make

00:00:26.240 --> 00:00:27.706
it more visually appealing.

00:00:27.706 --> 00:00:29.830
It also means that you can
have a core presentation

00:00:29.830 --> 00:00:31.730
with placeholders
for text and images

00:00:31.730 --> 00:00:34.700
and then customize it in
bulk for different customers.

00:00:34.700 --> 00:00:37.200
But before I let you noodle
out some more great ideas out

00:00:37.200 --> 00:00:39.260
of that genius brain
of yours, let's

00:00:39.260 --> 00:00:41.050
show you how to
use the API first

00:00:41.050 --> 00:00:43.230
so that when that brilliant
scheme washes over you,

00:00:43.230 --> 00:00:45.210
you'll know exactly
how to make it happen.

00:00:45.210 --> 00:00:47.630
In our demo, we'll have
just a title slide template,

00:00:47.630 --> 00:00:48.970
like what you see here.

00:00:48.970 --> 00:00:51.540
There are two placeholders--
one for the presentation name,

00:00:51.540 --> 00:00:53.123
and the other, up
in the corner there,

00:00:53.123 --> 00:00:56.420
is a rectangle where an image
will go, like a company logo.

00:00:56.420 --> 00:00:58.919
In our example, we're going
to use a product icon.

00:00:58.919 --> 00:01:00.710
Now, there are other
ways of getting images

00:01:00.710 --> 00:01:01.870
into a presentation.

00:01:01.870 --> 00:01:03.760
This is just one
of the techniques.

00:01:03.760 --> 00:01:05.459
Both the icon and
the template files

00:01:05.459 --> 00:01:08.209
are sitting pretty right in my
Google Drive folder right now.

00:01:08.209 --> 00:01:10.500
If you've guessed that this
script uses both the Google

00:01:10.500 --> 00:01:12.460
Drive and the
Google Slides APIs,

00:01:12.460 --> 00:01:14.030
then you're right on target.

00:01:14.030 --> 00:01:15.692
But before we get
to the code, go

00:01:15.692 --> 00:01:17.400
to your project in
the Developers Console

00:01:17.400 --> 00:01:19.900
to enable both the
Drive and Slides APIs,

00:01:19.900 --> 00:01:22.120
then download the
JSON credentials file.

00:01:22.120 --> 00:01:24.417
If you're new to developing,
using Google APIs,

00:01:24.417 --> 00:01:26.500
be sure to check out our
earlier video walking you

00:01:26.500 --> 00:01:27.880
through this process.

00:01:27.880 --> 00:01:29.780
What's our script going to do?

00:01:29.780 --> 00:01:32.450
Copy the slide template,
construct the request

00:01:32.450 --> 00:01:34.870
to replace those placeholders
with a presentation name

00:01:34.870 --> 00:01:38.090
and product icon, and
then call the Slides API

00:01:38.090 --> 00:01:39.840
to execute those requests.

00:01:39.840 --> 00:01:42.920
And then you'll end up with
your desired new presentation.

00:01:42.920 --> 00:01:45.870
Now let's go to the computer
and look at the code.

00:01:45.870 --> 00:01:47.960
Let's start with
lines one through 20.

00:01:47.960 --> 00:01:50.360
This block of code includes
the standard imports

00:01:50.360 --> 00:01:52.810
and boilerplate authorization
code that we're probably

00:01:52.810 --> 00:01:54.661
already used to seeing.

00:01:54.661 --> 00:01:56.410
Now, the things that
are different to take

00:01:56.410 --> 00:01:58.910
note of in this script
include line seven and eight,

00:01:58.910 --> 00:02:02.060
which are the file names for the
slide template and product icon

00:02:02.060 --> 00:02:04.590
that are sitting in
our main Drive folder.

00:02:04.590 --> 00:02:08.259
Lines 9 through 12 represent
the authorization scopes

00:02:08.259 --> 00:02:10.259
to be able to copy
files in Google Drive,

00:02:10.259 --> 00:02:11.700
plus have
[? read/write ?] access

00:02:11.700 --> 00:02:14.040
to Google Slides presentations.

00:02:14.040 --> 00:02:15.580
Now, this is the
first episode where

00:02:15.580 --> 00:02:17.830
we're using more than one
Google API simultaneously.

00:02:17.830 --> 00:02:20.950
So we should expect code to
look like this-- where you have

00:02:20.950 --> 00:02:22.900
multiple scopes in the section.

00:02:22.900 --> 00:02:26.180
Now, I choose to have multiple
strings-- each one representing

00:02:26.180 --> 00:02:27.300
an individual scope.

00:02:27.300 --> 00:02:28.950
But you could also
put all the scopes

00:02:28.950 --> 00:02:31.800
in one giant string,
which are space delimited.

00:02:31.800 --> 00:02:33.720
To me, this is easier to read.

00:02:33.720 --> 00:02:35.920
Then, lines 18
through 20 are where

00:02:35.920 --> 00:02:37.550
we're creating the
service endpoints

00:02:37.550 --> 00:02:41.840
to the APIs using the same
[INAUDIBLE] HTTP client.

00:02:41.840 --> 00:02:44.890
On lines 22 to 25 is where
we use the Google Drive

00:02:44.890 --> 00:02:47.640
API to find the template
file and copy it,

00:02:47.640 --> 00:02:50.810
saving the ID of the new
presentation that's created.

00:02:50.810 --> 00:02:53.780
On lines 27 to 33 is
where we use the Slides

00:02:53.780 --> 00:02:56.360
API to find that rectangle
placeholder where

00:02:56.360 --> 00:02:57.660
the image will go.

00:02:57.660 --> 00:03:00.310
Lines 35 to 39 are
where we use the Drive

00:03:00.310 --> 00:03:03.880
API to find the image file
and get the secure URL.

00:03:03.880 --> 00:03:05.150
Or it can be downloaded.

00:03:05.150 --> 00:03:06.780
That's how the
Slides API creates

00:03:06.780 --> 00:03:08.520
images and presentations.

00:03:08.520 --> 00:03:11.765
All of the real work
is in lines 41 to 53,

00:03:11.765 --> 00:03:14.780
where we're putting together our
set of requests for the Slides

00:03:14.780 --> 00:03:15.730
API.

00:03:15.730 --> 00:03:18.780
The first is replaceAllText,
where the presentation name

00:03:18.780 --> 00:03:22.220
replaces the text placeholder
that we had in the template.

00:03:22.220 --> 00:03:25.310
The second is createImage to
replace the image placeholder

00:03:25.310 --> 00:03:28.110
with a product icon using
that secure URL we just

00:03:28.110 --> 00:03:29.140
talked about.

00:03:29.140 --> 00:03:31.500
Remember earlier how we
grabbed that rectangle

00:03:31.500 --> 00:03:32.510
where the image will go?

00:03:32.510 --> 00:03:34.140
You know, the placeholder?

00:03:34.140 --> 00:03:36.750
Well, we use its dimensions
so that the product

00:03:36.750 --> 00:03:40.030
icon is re-sized and drops
right over that rectangle

00:03:40.030 --> 00:03:41.230
placeholder.

00:03:41.230 --> 00:03:43.870
Finally, the last
request is deleteObject,

00:03:43.870 --> 00:03:46.590
because once we have our
product icon in place,

00:03:46.590 --> 00:03:49.040
we don't need that image
placeholder anymore.

00:03:49.040 --> 00:03:51.180
And the last lines of
code down at the bottom

00:03:51.180 --> 00:03:53.700
are where we send all of
these requests to the API

00:03:53.700 --> 00:03:55.980
and then let the
user know we're done.

00:03:55.980 --> 00:03:58.840
Let's run this script, which
we call slides_template.

00:03:58.840 --> 00:04:00.660
Now, you can use
Python 2.0 or 3.0.

00:04:00.660 --> 00:04:02.510
It doesn't really matter
because this script

00:04:02.510 --> 00:04:05.500
works with both versions
without any additional code.

00:04:05.500 --> 00:04:08.430
Assume that we've run our
[INAUDIBLE] authorization flow

00:04:08.430 --> 00:04:09.710
and accepted the request.

00:04:09.710 --> 00:04:12.170
And you can see the output
from the print calls

00:04:12.170 --> 00:04:13.750
until it's finished.

00:04:13.750 --> 00:04:15.950
And now all you need
to do is confirm

00:04:15.950 --> 00:04:18.060
that the new deck exists
in your Drive folder

00:04:18.060 --> 00:04:20.209
with all the substitutions.

00:04:20.209 --> 00:04:22.730
And if you click on the New
Presentation in Google Drive,

00:04:22.730 --> 00:04:24.960
you should have something
that looks like this.

00:04:24.960 --> 00:04:27.540
Now you have an idea of what
the Google Slides API can do

00:04:27.540 --> 00:04:29.400
in less than 60 lines of code.

00:04:29.400 --> 00:04:31.680
If you want a deeper dive
in today's code sample,

00:04:31.680 --> 00:04:33.050
check out the blog post.

00:04:33.050 --> 00:04:35.240
If you want to start
with an easier example,

00:04:35.240 --> 00:04:37.540
check out the quickstart,
which is available in Python

00:04:37.540 --> 00:04:38.677
in other languages.

00:04:38.677 --> 00:04:40.510
If you're ready to wrap
your head around how

00:04:40.510 --> 00:04:43.350
the API works in general,
check out the first link.

00:04:43.350 --> 00:04:45.730
To see the JSON payloads
for common operations

00:04:45.730 --> 00:04:48.620
you perform with the API,
go to the second link.

00:04:48.620 --> 00:04:50.730
And to go straight to
the API reference docs,

00:04:50.730 --> 00:04:52.350
hit up the third link.

00:04:52.350 --> 00:04:54.170
The next step is up to you.

00:04:54.170 --> 00:04:55.680
It's a green field out there.

00:04:55.680 --> 00:04:59.550
The Google Slides API is just
waiting for your next big idea.

00:04:59.550 --> 00:05:01.420
Go out and build
that awesome app.

00:05:01.420 --> 00:05:03.090
And be sure to subscribe
to our channel,

00:05:03.090 --> 00:05:04.660
and tune in again next time.

00:05:04.660 --> 00:05:07.070
This is Wesley Chun from
Google, and we'll see you soon.

00:05:07.070 --> 00:05:09.520
[MUSIC PLAYING]

