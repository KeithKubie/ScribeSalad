WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:02.734
Voiceover: A digital
signature is basically

00:00:02.734 --> 00:00:04.657
the mathematical mechanism

00:00:04.657 --> 00:00:08.329
for essentially combining
a public sequence

00:00:08.329 --> 00:00:10.990
of numbers with a given digital message,

00:00:10.990 --> 00:00:13.825
and you can really think
of a digital signature

00:00:13.825 --> 00:00:16.656
in many ways as the electronic analog

00:00:16.656 --> 00:00:18.651
of a physical signature.

00:00:18.651 --> 00:00:19.987
In a physical signature,

00:00:19.987 --> 00:00:21.546
you'll typically affix, let's say,

00:00:21.546 --> 00:00:23.701
a sequence of characters
representing your name

00:00:23.701 --> 00:00:26.486
or identity to a document.

00:00:26.486 --> 00:00:28.902
This process effectively
binds your identity

00:00:28.902 --> 00:00:30.602
to that document

00:00:30.602 --> 00:00:33.534
and more so by formulating the characters

00:00:33.534 --> 00:00:35.718
in your name, and maybe some

00:00:35.718 --> 00:00:37.663
particular to unique or peculiar way

00:00:37.663 --> 00:00:39.111
that's unique to you.

00:00:39.111 --> 00:00:40.764
The hope is that nobody will be able to

00:00:40.764 --> 00:00:43.398
forge your name on that document.

00:00:43.398 --> 00:00:44.809
Now in a digital signature scheme,

00:00:44.809 --> 00:00:47.949
it turns out you can achieve
these kinds of properties

00:00:47.949 --> 00:00:49.395
mathematically.

00:00:49.395 --> 00:00:50.527
Now, some of the more

00:00:50.527 --> 00:00:51.988
well-known digital signature schemes

00:00:51.988 --> 00:00:55.412
include things like the RSA
digital signature scheme,

00:00:55.412 --> 00:00:58.274
which stands for the
Rivest-Shamir-Adleman scheme.

00:00:58.274 --> 00:01:00.510
There's also a scheme known as DSS,

00:01:00.510 --> 00:01:03.520
which is the digital
signature standard, actually.

00:01:03.520 --> 00:01:05.070
And, actually, if you were to use a scheme

00:01:05.070 --> 00:01:07.630
like RSA or DSS,

00:01:07.630 --> 00:01:10.163
in my mind, it's actually
a lot harder to forge

00:01:10.163 --> 00:01:11.400
these digital signatures

00:01:11.400 --> 00:01:14.369
than it is to forge a
handwritten signature.

00:01:14.369 --> 00:01:15.516
So in this particular video,

00:01:15.516 --> 00:01:19.162
I'll try to describe the
overall higher-level mechanics,

00:01:19.162 --> 00:01:21.841
if you will, of a
digital signature scheme,

00:01:21.841 --> 00:01:24.189
but I won't actually go into or describe

00:01:24.189 --> 00:01:26.847
the underlying mathematical
details of, let's say,

00:01:26.847 --> 00:01:29.452
a specific scheme like RSA or DSS,

00:01:29.452 --> 00:01:32.500
at least not in this video.

00:01:32.500 --> 00:01:34.627
The way that a digital
signature scheme works

00:01:34.627 --> 00:01:35.870
is let's say you have a user,

00:01:35.870 --> 00:01:37.277
and I'm going to call her Alice,

00:01:37.277 --> 00:01:39.398
and let's say Alice wants to,

00:01:39.398 --> 00:01:41.343
digitally sign a document.

00:01:41.343 --> 00:01:42.533
In the scheme,

00:01:42.533 --> 00:01:43.438
in a digital signature scheme,

00:01:43.438 --> 00:01:46.155
Alice is going to first generate two keys,

00:01:46.155 --> 00:01:51.199
and these two keys are
known as the signing key,

00:01:51.199 --> 00:01:52.398
the signing key,

00:01:52.398 --> 00:01:53.497
which is a private key,

00:01:53.497 --> 00:01:56.437
so I'm going to use red to denote it,

00:01:56.437 --> 00:01:59.125
and we'll abbreviate
the signing key as SK.

00:01:59.125 --> 00:02:00.914
And then Alice is also going to generate

00:02:00.914 --> 00:02:03.914
a separate key known
as a verification key.

00:02:03.914 --> 00:02:05.373
Now the actual process of coming up

00:02:05.373 --> 00:02:07.461
with a signing key and a verification key

00:02:07.461 --> 00:02:09.300
kind of happens concurrently.

00:02:09.300 --> 00:02:11.176
Alice will generate these
two keys at the same time,

00:02:11.176 --> 00:02:11.941
and they're going to have

00:02:11.941 --> 00:02:13.687
a mathematical relationship

00:02:14.209 --> 00:02:15.916
but the interesting thing is

00:02:15.916 --> 00:02:17.364
that you want it to be the case

00:02:17.364 --> 00:02:19.062
that the verification key is public,

00:02:19.062 --> 00:02:21.570
and the signing key will be private

00:02:21.570 --> 00:02:24.373
but more so, in a
digital signature scheme,

00:02:24.373 --> 00:02:28.134
it should be hard to come up
with the verification key,

00:02:28.134 --> 00:02:29.457
or rather, it should be hard to come up

00:02:29.457 --> 00:02:31.044
with the signing key, rather,

00:02:31.044 --> 00:02:34.815
if you only see the verification key.

00:02:35.723 --> 00:02:37.795
Now, let's consider
what a digital signature

00:02:37.795 --> 00:02:38.855
on a message will entail.

00:02:38.855 --> 00:02:40.333
So basically, if you have a message,

00:02:40.333 --> 00:02:43.040
and let's call this message M,

00:02:43.040 --> 00:02:45.880
and you wish to digitally
sign that message.

00:02:45.880 --> 00:02:46.700
What you're going to basically do

00:02:46.700 --> 00:02:49.949
is apply a mathematical transformation,

00:02:49.949 --> 00:02:53.005
Alice is going to apply a
mathematical transformation

00:02:53.005 --> 00:02:57.510
to the message M and her signing key SK,

00:02:57.510 --> 00:03:00.102
and the result of that transformation,

00:03:00.102 --> 00:03:02.422
the output of that
transformation will be a special

00:03:04.128 --> 00:03:06.655
sequence of numbers that
we call the signature.

00:03:06.655 --> 00:03:10.369
The signature on the message M.

00:03:11.046 --> 00:03:12.192
Now, the interesting thing here is that

00:03:12.192 --> 00:03:16.044
the signature basically
is one that is derived

00:03:16.044 --> 00:03:19.646
from a combination of the message M

00:03:19.646 --> 00:03:22.175
together with the signing key,

00:03:22.175 --> 00:03:23.795
the private signing key of Alice,

00:03:23.795 --> 00:03:27.402
and it's going to
effectively produce a short,

00:03:27.402 --> 00:03:31.100
a relatively short sequence
of numbers as an output.

00:03:32.636 --> 00:03:34.596
In particular, digital signature schemes

00:03:34.596 --> 00:03:37.168
should be designed, or
they typically are designed

00:03:37.168 --> 00:03:40.269
so that only the person who possesses

00:03:40.269 --> 00:03:42.990
the signing key, that private signing key

00:03:42.990 --> 00:03:46.002
is capable of generating
this type of an output,

00:03:46.002 --> 00:03:50.116
this type of a signature,
S of M on the message M.

00:03:51.608 --> 00:03:54.885
Now, the verification
process is kind of analogous

00:03:54.885 --> 00:03:56.588
to the signing process,

00:03:56.588 --> 00:03:58.710
but it involves the
public verification key.

00:03:58.710 --> 00:04:00.512
So in the verification process,

00:04:00.512 --> 00:04:02.330
you actually have three different inputs,

00:04:02.330 --> 00:04:03.883
so the first input will be the message

00:04:03.883 --> 00:04:06.972
that you want to verify the signature of.

00:04:06.972 --> 00:04:08.501
You also need in addition to the message,

00:04:08.501 --> 00:04:10.142
you need to get as input

00:04:10.142 --> 00:04:11.844
the signature on that message.

00:04:11.844 --> 00:04:13.953
What does that S of M look like,

00:04:13.953 --> 00:04:17.534
and then finally, the
input, the final input

00:04:17.534 --> 00:04:21.668
to the verification scheme
will be the public key,

00:04:21.668 --> 00:04:26.720
the public verification
key that belongs to Alice.

00:04:26.720 --> 00:04:28.183
These three inputs are put in,

00:04:28.183 --> 00:04:29.779
and there's a mathematical transformation

00:04:29.779 --> 00:04:31.017
that's applied to these inputs,

00:04:31.017 --> 00:04:33.051
and basically what that
mathematical transformation

00:04:33.051 --> 00:04:36.064
is trying to ascertain or to check

00:04:36.064 --> 00:04:39.161
is that the signature that you see

00:04:39.161 --> 00:04:41.333
corresponding with the message M

00:04:41.333 --> 00:04:43.729
is one that would have been produced by

00:04:43.729 --> 00:04:45.948
Alice's private signing key.

00:04:45.948 --> 00:04:47.474
And this private signing key, in turn,

00:04:47.474 --> 00:04:50.553
corresponds to Alice's
public verification key.

00:04:50.553 --> 00:04:53.086
Now, what I think is
really remarkable is that

00:04:53.086 --> 00:04:56.702
you can actually carry out this process

00:04:56.702 --> 00:04:58.534
with just the verification key,

00:04:58.534 --> 00:05:01.165
that you don't actually
need the signing key

00:05:01.165 --> 00:05:02.607
to validate the digital signature.

00:05:02.607 --> 00:05:05.463
You don't even need it
inadvertently or indirectly.

00:05:05.463 --> 00:05:07.059
You can do everything.

00:05:07.059 --> 00:05:08.145
you can verify everything

00:05:08.145 --> 00:05:11.923
with knowledge of only the
public verification key.

00:05:11.923 --> 00:05:13.644
And the verification
procedure basically outputs

00:05:13.644 --> 00:05:15.363
kind of a yes or no.

00:05:15.363 --> 00:05:17.651
It tells you, "Should
I accept the signature,

00:05:17.651 --> 00:05:20.234
"or should I reject it?"

00:05:20.234 --> 00:05:22.536
It's a basic validation procedure.

00:05:22.536 --> 00:05:23.919
And so, as you can see,

00:05:23.919 --> 00:05:28.036
the process of signing
effectively will bind

00:05:28.036 --> 00:05:29.433
this public verification key.

00:05:29.433 --> 00:05:33.143
It binds the public verification
key to Alice, somehow,

00:05:33.143 --> 00:05:35.425
because Alice is the one who published

00:05:35.425 --> 00:05:37.141
this verification key
and told the whole world,

00:05:37.141 --> 00:05:40.017
"Hey, this is my verification
key in the system,

00:05:40.017 --> 00:05:42.962
"and only I will be able to sign messages

00:05:42.962 --> 00:05:45.142
"that will be considered valid

00:05:45.142 --> 00:05:49.162
"with respect to that verification key."

00:05:49.439 --> 00:05:52.975
Because the message is now
being essentially bound

00:05:52.975 --> 00:05:54.585
to this public key,

00:05:54.585 --> 00:05:56.046
and if you think of the public key

00:05:56.046 --> 00:05:57.812
as an identifier of sorts,

00:05:57.812 --> 00:05:59.965
maybe and identifier for Alice,

00:05:59.965 --> 00:06:02.743
then you can think of
digital signing as a process

00:06:02.743 --> 00:06:04.926
that basically binds an identity

00:06:04.926 --> 00:06:06.597
to an underlying message,

00:06:06.597 --> 00:06:09.350
and that really gives us,
in the mathematical sense,

00:06:09.350 --> 00:06:10.838
it gives us the analog

00:06:10.838 --> 00:06:14.104
of a traditional handwritten signature.

00:06:14.104 --> 00:06:15.267
Now, I want to make two remarks,

00:06:15.267 --> 00:06:17.111
and I think they're particularly relevant.

00:06:17.111 --> 00:06:19.187
First of all, you'll notice
that the transformation

00:06:19.187 --> 00:06:24.304
that produces the actual
digital signature itself,

00:06:24.842 --> 00:06:27.672
this transformation right
here that produces S of M,

00:06:27.672 --> 00:06:31.265
this transformation
basically takes the message.

00:06:31.265 --> 00:06:34.417
It takes the message as one of its inputs,

00:06:34.417 --> 00:06:38.362
and what that means is that the signature

00:06:38.362 --> 00:06:39.850
is dependent on the message.

00:06:39.850 --> 00:06:40.857
If you change the message,

00:06:40.857 --> 00:06:42.604
you'll get a different signature.

00:06:42.604 --> 00:06:43.982
Now, in this sense,

00:06:43.982 --> 00:06:46.206
a digital signature is actually different

00:06:46.206 --> 00:06:48.222
from a traditional handwritten signature.

00:06:48.222 --> 00:06:50.537
Your handwritten signature
probably doesn't change.

00:06:50.537 --> 00:06:52.273
It more or less stays the same

00:06:52.273 --> 00:06:54.465
regardless of what it is you're signing.

00:06:54.465 --> 00:06:56.713
But your digital signature
is very sensitive to

00:06:56.713 --> 00:06:57.341
what you're signing,

00:06:57.341 --> 00:06:59.477
and it will vary depending
on what you sign.

00:06:59.477 --> 00:07:00.366
If you sign a different message,

00:07:00.366 --> 00:07:03.376
you'll get a different
signature as an output.

00:07:03.376 --> 00:07:04.694
The second remark I want to make

00:07:04.694 --> 00:07:09.071
is that digital signatures
are often associated with

00:07:09.071 --> 00:07:10.529
a cryptographic hash function,

00:07:10.529 --> 00:07:11.486
and I've already done a video

00:07:11.486 --> 00:07:12.638
on cryptographic hash functions,

00:07:12.638 --> 00:07:14.616
and, in fact, I mention in that video,

00:07:14.616 --> 00:07:16.390
and I'll reiterate here that the first

00:07:16.390 --> 00:07:18.095
cryptographic hash functions
were actually designed

00:07:18.095 --> 00:07:21.905
specifically with digital
signatures in mind

00:07:21.905 --> 00:07:24.815
as their killer application, if you will.

00:07:24.815 --> 00:07:26.665
So, in particular, what
typically happens is that

00:07:26.665 --> 00:07:28.683
before you actually sign
an arbitrary message,

00:07:28.683 --> 00:07:31.133
let's say you have a huge message here

00:07:31.133 --> 00:07:32.713
that you want to sign.

00:07:32.713 --> 00:07:34.094
Before you sign this message,

00:07:34.094 --> 00:07:36.492
you're going to basically apply

00:07:36.492 --> 00:07:39.109
a cryptographic hash
function to that message

00:07:39.109 --> 00:07:41.953
and you're going to get an
output from that function,

00:07:41.953 --> 00:07:43.227
that cryptographic hash function,

00:07:43.227 --> 00:07:44.812
you'll get a shorter output,

00:07:44.812 --> 00:07:47.203
the digest of that
cryptographic hash function,

00:07:47.203 --> 00:07:49.477
and then what you do in a
signing algorithm is that

00:07:49.477 --> 00:07:51.569
rather than signing the original message,

00:07:51.569 --> 00:07:52.636
you will first hash it

00:07:52.636 --> 00:07:54.854
and then sign the hash of the message.

00:07:54.854 --> 00:07:56.299
You'll sign the resulting digest

00:07:56.299 --> 00:07:58.839
instead of the original message.

00:08:01.314 --> 00:08:04.289
This two-step paradigm
of doing kind of hashing

00:08:04.289 --> 00:08:05.518
and then signing,

00:08:05.518 --> 00:08:07.318
really ends up simplifying the process

00:08:07.318 --> 00:08:09.479
of digital signing since you effectively

00:08:09.479 --> 00:08:12.436
are no longer dealing with
an arbitrary length input,

00:08:12.436 --> 00:08:13.715
but instead, you're working with

00:08:13.715 --> 00:08:16.528
a fixed-length quantity.

00:08:16.528 --> 00:08:17.768
And this hashing sign paradigm

00:08:17.768 --> 00:08:21.441
actually is safe as long
as it's hard to find

00:08:21.441 --> 00:08:24.296
two messages that map to the same output

00:08:24.296 --> 00:08:26.068
under the application
of the hash function.

00:08:26.068 --> 00:08:29.152
In other words, you can't
come up with two messages

00:08:29.152 --> 00:08:30.683
that are different,

00:08:30.683 --> 00:08:32.890
but whose output when the hash function is

00:08:32.890 --> 00:08:34.869
applied to them are identical.

00:08:34.869 --> 00:08:36.838
In other words, the hash function,

00:08:36.838 --> 00:08:39.617
as long as it's collision resistant,

00:08:39.617 --> 00:08:42.105
it will result in a
secure signature scheme

00:08:42.105 --> 00:08:44.250
for this hash and sign paradigm.

00:08:44.250 --> 00:08:45.822
Okay, now you can
probably think about this

00:08:45.822 --> 00:08:47.621
for a moment, but if you
could find, let's say,

00:08:47.621 --> 00:08:50.246
two input messages that are distinct

00:08:50.246 --> 00:08:51.913
and that map to the same output

00:08:51.913 --> 00:08:54.552
under an application of the hash function,

00:08:54.552 --> 00:08:57.313
that would, in fact, lead
to some bizarre problems

00:08:57.313 --> 00:09:00.248
because a signature on the first message

00:09:00.509 --> 00:09:01.324
would then be identical

00:09:01.324 --> 00:09:03.003
to a signature on the second message

00:09:03.003 --> 00:09:04.220
since in both cases, what you're doing

00:09:04.220 --> 00:09:05.864
is you're not signing the actual message.

00:09:05.864 --> 00:09:07.292
You're signing the hash of the message.

00:09:07.292 --> 00:09:09.425
So, if the hashes are identical,

00:09:09.425 --> 00:09:10.908
you'll end up with the identical signature

00:09:10.908 --> 00:09:12.600
on two different messages,

00:09:12.600 --> 00:09:14.266
and that could create problems

00:09:14.266 --> 00:09:16.322
like making it easy for
maybe a particular message

00:09:16.322 --> 00:09:20.039
to be forged under this
digital signature approach,

00:09:20.039 --> 00:09:22.084
and that's obviously
something that you don't want.

00:09:22.084 --> 00:09:23.852
you don't want someone to be able to

00:09:23.852 --> 00:09:26.388
come up with a signature
on a different message,

00:09:26.388 --> 00:09:28.772
as opposed to maybe the
one that you initially

00:09:28.772 --> 00:09:31.289
intended to sign.

00:09:31.289 --> 00:09:34.810
Now, it is possible, and I
just want to make this clear,

00:09:34.810 --> 00:09:37.400
it's possible to describe
digital signatures

00:09:37.400 --> 00:09:39.488
with a lot more mathematical formalism,

00:09:39.488 --> 00:09:41.857
but my hope with this video
really was to give you

00:09:41.857 --> 00:09:43.685
a flavor, if you will,
without drilling into

00:09:43.685 --> 00:09:46.777
all of the underlying
nuances in mathematics.

