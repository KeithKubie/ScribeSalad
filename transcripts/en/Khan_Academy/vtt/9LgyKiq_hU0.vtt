WEBVTT
Kind: captions
Language: en

00:00:00.471 --> 00:00:02.220
Now that we know a
little bit about lists,

00:00:02.220 --> 00:00:04.600
I thought I would use this
video to introduce you

00:00:04.600 --> 00:00:06.720
to loops, and in
particular for loops.

00:00:06.720 --> 00:00:09.100
And if we have time, we might
do other types of loops.

00:00:09.100 --> 00:00:10.820
But before we even
do that, I want

00:00:10.820 --> 00:00:15.140
to introduce you to a built-in
Python function called Ranger.

00:00:15.140 --> 00:00:18.090
When I say built-in, it
means it comes with Python.

00:00:18.090 --> 00:00:20.280
And it's really
a way to generate

00:00:20.280 --> 00:00:22.950
lists that have
integers that increment.

00:00:22.950 --> 00:00:28.720
So for example, if I
just say, range of 6,

00:00:28.720 --> 00:00:31.400
it generates a list
from 0 through 5.

00:00:31.400 --> 00:00:35.520
So it's 6 elements up
to, but not including, 6.

00:00:35.520 --> 00:00:39.830
If I wanted to include 6, I
would have to do range of 7.

00:00:39.830 --> 00:00:42.740
And then I go all the way
up to, but not including 7.

00:00:42.740 --> 00:00:44.322
But I get 6 in there.

00:00:44.322 --> 00:00:45.780
If I want to have
1 through 6, if I

00:00:45.780 --> 00:00:50.820
don't want to have that 0 there,
I could do range starting at 1

00:00:50.820 --> 00:00:54.000
and including 1, up to,
but not including 7.

00:00:54.000 --> 00:00:56.260
So the first item
here will be included.

00:00:56.260 --> 00:00:58.810
The last item will
not be included.

00:00:58.810 --> 00:01:00.880
And there we go.

00:01:00.880 --> 00:01:03.640
We get 1, 2, 3, 4, 5, 6.

00:01:03.640 --> 00:01:06.040
And what's cool about these
integrated development

00:01:06.040 --> 00:01:08.720
environments, these IDE's, this
pie scripter that I'm running,

00:01:08.720 --> 00:01:11.919
is that, when I type in a
function that it recognizes,

00:01:11.919 --> 00:01:13.460
it actually will
tell me a little bit

00:01:13.460 --> 00:01:15.870
something about that function,
in case you forget it.

00:01:15.870 --> 00:01:17.270
So I don't know if you
can read this here,

00:01:17.270 --> 00:01:18.955
but it says, range,
start, stop, step.

00:01:22.680 --> 00:01:25.380
So right now, the default is
to increment by 1 each time.

00:01:25.380 --> 00:01:26.796
But it says, hey,
I could tell you

00:01:26.796 --> 00:01:28.710
to increment by a
different number.

00:01:28.710 --> 00:01:30.490
So let's say you have a range.

00:01:30.490 --> 00:01:38.380
Say you start at 0, and
you want to go up to 8.

00:01:38.380 --> 00:01:41.900
And I want to go up
by 2, instead of 1.

00:01:41.900 --> 00:01:45.800
So then I went to 0, 2, 4,
6-- I should have said it more

00:01:45.800 --> 00:01:47.560
precisely-- up to,
but not including 8.

00:01:47.560 --> 00:01:50.220
The upper part of the
range, you don't include it.

00:01:50.220 --> 00:01:53.500
So it goes up to that,
and it increments it by 2.

00:01:53.500 --> 00:01:56.120
So you could do it like that.

00:01:56.120 --> 00:02:01.560
So maybe you want to start at
3, and you want to go up to,

00:02:01.560 --> 00:02:03.410
but not including--
I don't know.

00:02:03.410 --> 00:02:06.910
Let me do up to, but
not including 31.

00:02:06.910 --> 00:02:09.759
And you want to go
up by steps of 3.

00:02:09.759 --> 00:02:10.930
So there you go.

00:02:10.930 --> 00:02:13.930
It went up steps by 3, up
to, but not including 31.

00:02:13.930 --> 00:02:15.826
So it can generate a
whole bunch of lists.

00:02:15.826 --> 00:02:17.200
And the reason
why this is useful

00:02:17.200 --> 00:02:20.722
is because we can use
these inside of loops.

00:02:20.722 --> 00:02:23.180
And so the first type of loop
I'm going to introduce you to

00:02:23.180 --> 00:02:23.940
is a for loop.

00:02:23.940 --> 00:02:25.523
So this was the
interpreter down here.

00:02:25.523 --> 00:02:27.970
Here, I'm going to
actually write a program.

00:02:27.970 --> 00:02:31.030
So this program is really just
to show you a for loop does.

00:02:31.030 --> 00:02:35.660
So I could say, for i-- and i
is this variable that's often

00:02:35.660 --> 00:02:38.160
used in for loops,
in iterative loops.

00:02:38.160 --> 00:02:40.600
And iterative means you keep
doing something over and over

00:02:40.600 --> 00:02:43.640
again-- for i in--
and let me just

00:02:43.640 --> 00:02:45.950
do a simple one-- in
range-- and I'm just

00:02:45.950 --> 00:02:47.900
going to say 5-- range of 5.

00:02:47.900 --> 00:02:51.270
So this will generate
a list, 0, 1, 2, 3, 4.

00:02:51.270 --> 00:02:53.240
So for i in range 5.

00:02:53.240 --> 00:02:55.270
And this colon says,
now we're going

00:02:55.270 --> 00:03:00.380
to have a sub clause of what to
do on each of those iterations.

00:03:00.380 --> 00:03:02.314
Let's just print out what i is.

00:03:02.314 --> 00:03:04.480
And so, before we even see
what this is going to do,

00:03:04.480 --> 00:03:05.620
let's just think about it.

00:03:05.620 --> 00:03:09.510
It's saying, for each time
we go through this loop,

00:03:09.510 --> 00:03:14.576
for each of the things in the
range, make i refer to them.

00:03:14.576 --> 00:03:17.200
And then each of those loops is
going to refer a different one.

00:03:17.200 --> 00:03:18.130
And you want to print it out.

00:03:18.130 --> 00:03:19.255
So let's just try this out.

00:03:19.255 --> 00:03:20.900
So let me save this program.

00:03:20.900 --> 00:03:23.790
And now, let me run it.

00:03:23.790 --> 00:03:24.670
So there you go.

00:03:24.670 --> 00:03:26.760
What it did is it
created a loop.

00:03:26.760 --> 00:03:28.960
So each time it
goes to the loop,

00:03:28.960 --> 00:03:31.580
it assigns i to a different
element in this list.

00:03:31.580 --> 00:03:36.324
As you remember, this
list was 0, 1, 2, 3 and 4.

00:03:36.324 --> 00:03:37.740
Did I say 0, 1,
2, 3, 4, 5 before?

00:03:37.740 --> 00:03:42.200
No, it's 0, 1, 2, 3, 4, up
to, but not including 5.

00:03:42.200 --> 00:03:46.730
And so, each time you
go through the loop,

00:03:46.730 --> 00:03:48.420
it goes through
each of those items.

00:03:48.420 --> 00:03:51.457
And this program really
just says, print out that i.

00:03:51.457 --> 00:03:53.290
So the first time we
go to the loop, i is 0.

00:03:53.290 --> 00:03:54.190
So it prints it out.

00:03:54.190 --> 00:03:55.130
Then it prints out 1.

00:03:55.130 --> 00:03:56.270
Then it prints a 2.

00:03:56.270 --> 00:03:57.150
Then it prints a 3.

00:03:57.150 --> 00:03:58.080
Then it prints a 4.

00:03:58.080 --> 00:04:00.260
So it just keeps going
through it that many times.

00:04:00.260 --> 00:04:04.320
If we said this
was for range 10.

00:04:04.320 --> 00:04:05.870
Now let's run this
program, you'll

00:04:05.870 --> 00:04:08.275
see it'll print 1 through 9.

00:04:11.010 --> 00:04:12.710
I should say 0 through
9, because that's

00:04:12.710 --> 00:04:14.510
the first element in this list.

00:04:14.510 --> 00:04:16.290
But you could do more
interesting things.

00:04:16.290 --> 00:04:22.440
Let's say that you wanted to
take the sum of 0 through 9.

00:04:22.440 --> 00:04:25.250
So what you could do is you
could define another variable

00:04:25.250 --> 00:04:25.980
here, sum.

00:04:25.980 --> 00:04:29.330
So before I do anything, the
sum is just going to be 0.

00:04:29.330 --> 00:04:31.830
And then what you could
say is, each time you go

00:04:31.830 --> 00:04:38.780
through the loop, why
don't you define sum

00:04:38.780 --> 00:04:44.802
to be the previous sum plus what
i is in this part of the loop?

00:04:44.802 --> 00:04:46.510
And just so that we
can keep track of it,

00:04:46.510 --> 00:04:50.425
I then want to print the sum.

00:04:53.150 --> 00:04:54.910
Now let's see what
this thing does.

00:04:54.910 --> 00:04:55.930
So let's try it out.

00:04:55.930 --> 00:05:01.440
So let me save it, and
then let me run it.

00:05:01.440 --> 00:05:03.830
So there you go.

00:05:03.830 --> 00:05:06.990
So the first time we went
to the loop, sum is zero.

00:05:06.990 --> 00:05:08.214
Sum is 0 and i is 0.

00:05:08.214 --> 00:05:09.130
You add them together.

00:05:09.130 --> 00:05:10.320
You print the sum, you get 0.

00:05:10.320 --> 00:05:12.195
The next time we go
through the loop, i is 1.

00:05:12.195 --> 00:05:14.710
We add that to the previous
sum, which was 0, print it,

00:05:14.710 --> 00:05:15.880
you get one.

00:05:15.880 --> 00:05:19.120
Then the next time through the
loop, i is now going to be 2.

00:05:19.120 --> 00:05:22.060
Add that to the previous
sum, 2 plus 1, you get 3.

00:05:22.060 --> 00:05:23.890
Next time through
the loop, i is 3.

00:05:23.890 --> 00:05:26.380
You add that to the
previous sum, you get 6.

00:05:26.380 --> 00:05:31.110
So the sum of all the
numbers, 0 through 9, is 45.

00:05:31.110 --> 00:05:35.761
So just that, that's actually
a kind of a useful program.

00:05:35.761 --> 00:05:37.760
But just to make the point
a little bit clearer,

00:05:37.760 --> 00:05:42.980
let me actually walk you through
this on my little drawing

00:05:42.980 --> 00:05:43.870
tablet.

00:05:43.870 --> 00:05:49.480
So let me close my-- let me
paste my code that I just

00:05:49.480 --> 00:05:50.850
wrote up here.

00:05:50.850 --> 00:05:56.080
And let's just think
about what this is doing.

00:05:56.080 --> 00:05:58.120
So we have a couple
of variables here.

00:05:58.120 --> 00:06:04.560
We start off with this
variable sum that is set to 0.

00:06:04.560 --> 00:06:07.210
And there's two ways
to visualize variables.

00:06:07.210 --> 00:06:09.050
A common way to
visualize it-- and this

00:06:09.050 --> 00:06:11.383
isn't necessarily wrong, this
is sometimes an easier way

00:06:11.383 --> 00:06:13.710
to think about it-- is
to view them as buckets.

00:06:13.710 --> 00:06:15.690
But in Python, the really
correct way-- and you

00:06:15.690 --> 00:06:17.231
saw why that's
important with lists--

00:06:17.231 --> 00:06:19.590
is to view them as
referring to something.

00:06:19.590 --> 00:06:21.990
So if you view them as
buckets, you can say, OK,

00:06:21.990 --> 00:06:25.970
from the get go, the number
in the sum bucket is 0.

00:06:25.970 --> 00:06:29.700
But the reality is, is that
the variable sum is now

00:06:29.700 --> 00:06:34.340
referring to the numeric
literal, the actual number 0,

00:06:34.340 --> 00:06:36.710
sitting in memory someplace.

00:06:36.710 --> 00:06:38.880
Now we enter into the for loop.

00:06:38.880 --> 00:06:42.760
And what the for loop
says is, let's iteratively

00:06:42.760 --> 00:06:46.960
assign i to each of the
elements in the list generated

00:06:46.960 --> 00:06:48.040
by a range of 10.

00:06:48.040 --> 00:06:51.270
So just to be clear, if we
called this right over here,

00:06:51.270 --> 00:06:55.110
range of 10, this will generate
a list that looks like this.

00:06:55.110 --> 00:07:04.970
So it will generate a list 0, 1,
2, 3, 4, 5, 6, 7, 8, and 9, up

00:07:04.970 --> 00:07:06.230
to, but not including 10.

00:07:06.230 --> 00:07:08.960
This is 10 elements
right over here.

00:07:08.960 --> 00:07:10.800
And then we go
into the for loop.

00:07:10.800 --> 00:07:13.030
So the first time we go
through the for loop--

00:07:13.030 --> 00:07:15.470
and let me write it--
so I'll think about it

00:07:15.470 --> 00:07:16.930
two different ways.

00:07:16.930 --> 00:07:21.180
So one, I'll think about
it in the bucket way.

00:07:21.180 --> 00:07:23.900
So we have this variable,
i, that can actually only

00:07:23.900 --> 00:07:25.770
be used inside of this clause.

00:07:25.770 --> 00:07:28.730
We'll talk more about scope or
where a variable can be used.

00:07:28.730 --> 00:07:31.150
But this i variable is only
good inside of this clause.

00:07:31.150 --> 00:07:32.720
The sum variable, the
way I've defined it,

00:07:32.720 --> 00:07:35.303
I can use it anywhere, outside
of the clause, or inside of it,

00:07:35.303 --> 00:07:37.860
because it was defined
outside of the clause.

00:07:37.860 --> 00:07:38.980
So you have your i.

00:07:38.980 --> 00:07:40.860
So this is if you think
of it as a bucket.

00:07:40.860 --> 00:07:42.670
And so, through the
first iteration,

00:07:42.670 --> 00:07:45.370
i is assigned to this
first item over here.

00:07:45.370 --> 00:07:48.180
So i is going to be 0.

00:07:48.180 --> 00:07:49.952
The better way to
think about it is i

00:07:49.952 --> 00:07:53.690
is actually referring to this
first element, our first time

00:07:53.690 --> 00:07:54.860
through the loop.

00:07:54.860 --> 00:07:57.750
And then we go through the
loop, and it says sum plus i.

00:07:57.750 --> 00:07:58.840
Well, sum is 0.

00:07:58.840 --> 00:07:59.730
And i is 0.

00:07:59.730 --> 00:08:01.380
You add them
together, you get 0.

00:08:01.380 --> 00:08:04.650
So sum is still going to be
0, or still referring to 0.

00:08:04.650 --> 00:08:06.840
And then it prints the sum out.

00:08:06.840 --> 00:08:11.030
So then this line right
over here prints sum.

00:08:11.030 --> 00:08:14.390
It says, OK, the sum
right now is just-- let

00:08:14.390 --> 00:08:16.196
me do it in blue-- it's just 0.

00:08:16.196 --> 00:08:17.760
And it printed it out.

00:08:17.760 --> 00:08:19.489
Then it goes back
to the for loop

00:08:19.489 --> 00:08:21.280
and says, look, are
there any more elements

00:08:21.280 --> 00:08:22.470
that I can assign i to?

00:08:22.470 --> 00:08:23.350
Well, sure there are.

00:08:23.350 --> 00:08:25.350
There's all of these that
we have to go through.

00:08:25.350 --> 00:08:29.270
So then it makes i the next
element in the sequence.

00:08:29.270 --> 00:08:32.522
So now i is going to be the
next element in the sequence.

00:08:32.522 --> 00:08:34.730
Or another way to think
about it is in the i bucket--

00:08:34.730 --> 00:08:36.510
if you want to view
them as buckets--

00:08:36.510 --> 00:08:38.490
i is now set equal to 1.

00:08:38.490 --> 00:08:40.520
And now we run this again.

00:08:40.520 --> 00:08:43.485
And we say, OK, sum is 0 plus i.

00:08:43.485 --> 00:08:44.660
I is 1.

00:08:44.660 --> 00:08:46.965
So sum is now going
to refer to 1.

00:08:50.590 --> 00:08:52.450
Or another way to
think about it is sum

00:08:52.450 --> 00:08:54.840
is now going to refer to 1.

00:08:54.840 --> 00:08:59.160
And when you print
sum, it'll now print 1.

00:08:59.160 --> 00:09:01.720
Then, the for loop
will say, alright,

00:09:01.720 --> 00:09:04.390
are there any more elements
in this list right over here

00:09:04.390 --> 00:09:06.481
to assign i to?

00:09:06.481 --> 00:09:07.355
Well, sure there are.

00:09:07.355 --> 00:09:10.490
There's all of these others,
so let me keep going.

00:09:10.490 --> 00:09:15.730
So i can now be equal
to, or can refer to, 2.

00:09:15.730 --> 00:09:18.220
So if you think of it
as a bucket, i is now 2.

00:09:18.220 --> 00:09:19.980
Or you could say, i
is now referring to 2.

00:09:19.980 --> 00:09:22.225
And you could ignore
these right over here.

00:09:22.225 --> 00:09:23.600
And we go through
the loop again.

00:09:23.600 --> 00:09:24.930
Sum is now 1.

00:09:24.930 --> 00:09:28.010
1 plus i, i is now 2.

00:09:28.010 --> 00:09:29.400
1 plus 2 is 3.

00:09:29.400 --> 00:09:33.530
So sum is now going to be 3
this time through the loop.

00:09:33.530 --> 00:09:37.000
So sum is now referring to 3.

00:09:37.000 --> 00:09:40.260
You print sum, you get 3.

00:09:40.260 --> 00:09:44.240
And you keep going all the way.

00:09:44.240 --> 00:09:45.890
As we go through
the loop, the loop

00:09:45.890 --> 00:09:47.320
will still keep
going, as there's

00:09:47.320 --> 00:09:50.890
more things that i can refer to.

00:09:50.890 --> 00:09:54.480
We can keep incrementing i to
these other values over here.

00:09:54.480 --> 00:09:56.550
And eventually, i
is going to be 9.

00:09:56.550 --> 00:09:57.761
We're going to evaluate this.

00:09:57.761 --> 00:09:59.260
And the for loop
says, hey, is there

00:09:59.260 --> 00:10:01.230
anything left in this
list that i can be?

00:10:01.230 --> 00:10:03.870
And you're like, no, there isn't
anything left in this list.

00:10:03.870 --> 00:10:05.260
And then the loop
is going to be done.

00:10:05.260 --> 00:10:06.343
And we'll break out to it.

00:10:06.343 --> 00:10:07.490
And the program will stop.

00:10:07.490 --> 00:10:11.340
And that's exactly
what we saw happening,

00:10:11.340 --> 00:10:14.061
when we ran the
program over here.

