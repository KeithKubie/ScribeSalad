WEBVTT
Kind: captions
Language: en

00:00:05.700 --> 00:00:05.995
Hi.

00:00:05.995 --> 00:00:09.130
I'm Chet Haase, an engineer on
the Android team at Google.

00:00:09.130 --> 00:00:11.360
I work on graphics and
animations, and today I wanted

00:00:11.360 --> 00:00:13.880
to talk a little bit about
window animations.

00:00:13.880 --> 00:00:17.630
In another show that we did we
saw a little bit about view

00:00:17.630 --> 00:00:21.210
animations, which are the
animation APIs that you can

00:00:21.210 --> 00:00:23.880
use for releases prior to 3.0.

00:00:23.880 --> 00:00:27.500
There's a more complete
animation system starting with

00:00:27.500 --> 00:00:30.150
3.0, but if you're doing window
animations you still

00:00:30.150 --> 00:00:33.310
want to use the animation
resource files

00:00:33.310 --> 00:00:34.340
of the older APIs.

00:00:34.340 --> 00:00:37.530
So we'll see how to use those
today to get to try the kinds

00:00:37.530 --> 00:00:39.460
of transitions between
activities and subactivities

00:00:39.460 --> 00:00:41.270
in your activity.

00:00:41.270 --> 00:00:43.420
So let's take a look
at a demo.

00:00:43.420 --> 00:00:46.190
I call this demo window
animations.

00:00:46.190 --> 00:00:48.883
And you'll see a few buttons and
then a little bitmap down

00:00:48.883 --> 00:00:51.700
at the bottom, and each of the
buttons enables a different

00:00:51.700 --> 00:00:54.790
type of window transition as
it goes between the main

00:00:54.790 --> 00:00:56.840
activity and the subactivity.

00:00:56.840 --> 00:00:59.160
So default animations, you just
get whatever the system

00:00:59.160 --> 00:01:01.500
provides you, which is
the scale fade--

00:01:01.500 --> 00:01:02.730
at least on the current
platform.

00:01:02.730 --> 00:01:05.370
It's the scale fade activity, so
we scale and fade in and we

00:01:05.370 --> 00:01:06.270
scale and fade out.

00:01:06.270 --> 00:01:07.300
That's the default.

00:01:07.300 --> 00:01:09.480
You can do translate animations,
so you can provide

00:01:09.480 --> 00:01:13.780
a custom animation of any type
that you specify using the

00:01:13.780 --> 00:01:15.210
view animation system.

00:01:15.210 --> 00:01:17.250
In this case, we're going to
slide things in and out.

00:01:17.250 --> 00:01:19.490
So the translate animation
slides in the new activity,

00:01:19.490 --> 00:01:23.560
slides out the old activity, and
then when you back out we

00:01:23.560 --> 00:01:26.000
get sort of the reverse thing,
which is actually a separate

00:01:26.000 --> 00:01:27.960
animation as we'll see in
the code in a minute.

00:01:27.960 --> 00:01:31.550
Scale animations is a new
capability that came online in

00:01:31.550 --> 00:01:33.490
Jelly Bean where you can
actually specify a

00:01:33.490 --> 00:01:36.880
subrectangle to launch the new
activity from and it'll scale

00:01:36.880 --> 00:01:37.800
up from that point.

00:01:37.800 --> 00:01:41.060
So it'll start out
at the view--

00:01:41.060 --> 00:01:43.450
the visuals that it's going to
have when it's running in the

00:01:43.450 --> 00:01:45.150
full screen and then
it'll simply scale

00:01:45.150 --> 00:01:46.310
that up over time.

00:01:46.310 --> 00:01:50.170
So scale animation launches that
window from the location

00:01:50.170 --> 00:01:51.980
that I gave it, which is
relative to that button that

00:01:51.980 --> 00:01:53.400
we clicked on.

00:01:53.400 --> 00:01:55.760
Now you'll notice that although
we scale into the

00:01:55.760 --> 00:02:00.960
activity, we still get some
defaults or nonscaling

00:02:00.960 --> 00:02:02.620
animations when we
back out of it.

00:02:02.620 --> 00:02:05.160
This is a limitation of the
current system where we can't

00:02:05.160 --> 00:02:07.090
scale back out of it.

00:02:07.090 --> 00:02:11.190
Instead, we can just use the
prior way of translation or

00:02:11.190 --> 00:02:12.980
scale fade or whatever
other kind of

00:02:12.980 --> 00:02:14.120
animation that you want.

00:02:14.120 --> 00:02:16.570
And then finally, we have the
bitmap at the bottom, which is

00:02:16.570 --> 00:02:18.960
another variation of the scale
animation where you can

00:02:18.960 --> 00:02:21.890
specify not only the
subrectangle to scale from but

00:02:21.890 --> 00:02:23.590
also the bitmap to start from.

00:02:23.590 --> 00:02:25.330
In this case, I took a
screenshot of what the

00:02:25.330 --> 00:02:27.740
activity was going to look
like and I saved it at a

00:02:27.740 --> 00:02:28.490
smaller size.

00:02:28.490 --> 00:02:30.360
We're simply going to scale
up from that one

00:02:30.360 --> 00:02:31.570
into the larger one.

00:02:31.570 --> 00:02:35.420
So we can see that we get
exactly the same kind of view

00:02:35.420 --> 00:02:37.830
scaling up into the
larger activity.

00:02:37.830 --> 00:02:40.120
Now what that's hiding is that
we're actually crossfading

00:02:40.120 --> 00:02:41.980
from one representation
to the other.

00:02:41.980 --> 00:02:44.450
So it starts out at the smaller
bitmap and then as it

00:02:44.450 --> 00:02:46.940
scales up, it also crossfades
to the full screen

00:02:46.940 --> 00:02:49.850
representation of
the subactivity.

00:02:49.850 --> 00:02:53.350
So that's the demo, but the more
interesting part is the

00:02:53.350 --> 00:02:55.460
actual code-- how does
this stuff work?

00:02:55.460 --> 00:02:57.620
So we can take a look at this
class I've defined called

00:02:57.620 --> 00:02:59.140
window animations.

00:02:59.140 --> 00:03:01.470
And in here, we have the buttons
that we saw on the

00:03:01.470 --> 00:03:02.670
screen and then we have
an image view

00:03:02.670 --> 00:03:04.070
that holds that bitmap.

00:03:04.070 --> 00:03:06.420
And as you click on each of
the buttons, you get a

00:03:06.420 --> 00:03:08.120
different kind of effect
depending on what we were

00:03:08.120 --> 00:03:09.740
trying to do with window
animations.

00:03:09.740 --> 00:03:12.590
The default button just uses
the system behavior.

00:03:12.590 --> 00:03:16.010
So when you click on that, it
launches this subactivity.

00:03:16.010 --> 00:03:18.230
Let's take a quick look
at subactivity--

00:03:18.230 --> 00:03:19.590
not much going on there.

00:03:19.590 --> 00:03:21.000
It's just a subactivity.

00:03:21.000 --> 00:03:25.130
It only exists to provide
something for us to look at

00:03:25.130 --> 00:03:27.650
when we transition to
the subactivity.

00:03:27.650 --> 00:03:30.160
So all it does is launch the
subactivity and then the

00:03:30.160 --> 00:03:33.300
system itself just takes care of
doing the translation, the

00:03:33.300 --> 00:03:36.700
default scale fade transition
than it normally has.

00:03:36.700 --> 00:03:39.060
The translate button, the second
button down, did a

00:03:39.060 --> 00:03:41.870
custom animation where we slid
the new activity in, slid the

00:03:41.870 --> 00:03:42.780
old activity out.

00:03:42.780 --> 00:03:46.410
And then on the way back out, we
slid to the right instead,

00:03:46.410 --> 00:03:48.330
sort of a nice reversing
behavior.

00:03:48.330 --> 00:03:51.250
It gives kind of an indication
of the flow of the application

00:03:51.250 --> 00:03:53.190
in and out of the subactivity.

00:03:53.190 --> 00:03:56.470
So here we launched a different
subactivity which we

00:03:56.470 --> 00:03:57.605
call animated subactivity.

00:03:57.605 --> 00:04:00.460
And I'll show you in a second
why we are using not just the

00:04:00.460 --> 00:04:01.770
regular subactivity.

00:04:01.770 --> 00:04:06.080
And then we created a bundle,
an activity options bundle,

00:04:06.080 --> 00:04:08.910
and said OK, well, here's this
custom animation that we're

00:04:08.910 --> 00:04:10.940
creating and we're going to load
in a couple of resources

00:04:10.940 --> 00:04:15.560
here so we can take a look at
those in our resources folder.

00:04:15.560 --> 00:04:19.390
In the anim directory we have
a slide in left resource,

00:04:19.390 --> 00:04:22.970
which is a translate animation
that's going to slide in and

00:04:22.970 --> 00:04:26.990
have the duration capabilities
specified in it.

00:04:26.990 --> 00:04:29.250
So we're going to start
at it from x delta.

00:04:29.250 --> 00:04:31.930
So we're basically going to
start off the screen 100% of

00:04:31.930 --> 00:04:34.280
the width of my parent and then
we're going to slide into

00:04:34.280 --> 00:04:35.360
an x delta of zero.

00:04:35.360 --> 00:04:38.200
So we're going to start out
there and then slide in over a

00:04:38.200 --> 00:04:40.360
duration of 500 milliseconds.

00:04:40.360 --> 00:04:42.180
Go back and we can take a look
at the other animation we're

00:04:42.180 --> 00:04:42.690
specifying.

00:04:42.690 --> 00:04:45.290
So that was for the new activity
coming in and then

00:04:45.290 --> 00:04:49.300
slide out left was for the
activity going out.

00:04:49.300 --> 00:04:52.140
Slide out left we
can see here.

00:04:52.140 --> 00:04:54.440
And then this one starts from
an x delta of zero, so

00:04:54.440 --> 00:04:56.860
basically where that activity
is now, and it's going to

00:04:56.860 --> 00:04:59.610
slide to half the width of
the parent out over 500

00:04:59.610 --> 00:05:00.580
milliseconds.

00:05:00.580 --> 00:05:02.210
So it would be sort of
a parallax effect.

00:05:02.210 --> 00:05:03.600
They're actually going
at a different rate.

00:05:03.600 --> 00:05:06.580
It's not just moving together
in lockstep, but instead one

00:05:06.580 --> 00:05:08.930
is moving faster than the other
is going out-- kind of a

00:05:08.930 --> 00:05:10.130
nice effect there.

00:05:10.130 --> 00:05:12.420
Now the reason we had an
animated subactivity there is

00:05:12.420 --> 00:05:15.670
because the transitions that we
specify here for the window

00:05:15.670 --> 00:05:18.870
animations only control what
happens when we go into the

00:05:18.870 --> 00:05:19.720
subactivity.

00:05:19.720 --> 00:05:21.900
But what if we actually want
to have a custom transition

00:05:21.900 --> 00:05:24.390
coming back out of that
activity as well?

00:05:24.390 --> 00:05:27.195
For that, we need a little bit
of code in the subactivities.

00:05:27.195 --> 00:05:30.530
So instead of using the normal
subactivity with no behavior

00:05:30.530 --> 00:05:33.310
specified here, we have this
animated subactivity.

00:05:33.310 --> 00:05:36.860
And here we override the finish
method, call super, and

00:05:36.860 --> 00:05:38.340
then override pending
transition.

00:05:38.340 --> 00:05:41.550
Then we specify different
transitions, which we don't

00:05:41.550 --> 00:05:42.690
need to go in and look
at the code.

00:05:42.690 --> 00:05:43.620
It's fairly straightforward.

00:05:43.620 --> 00:05:46.280
Basically we're sliding the
subactivity out to the right

00:05:46.280 --> 00:05:49.820
and then sliding the main
activity in to the right as

00:05:49.820 --> 00:05:52.690
well, sort of the reverse from
the transition that we did to

00:05:52.690 --> 00:05:54.110
begin with.

00:05:54.110 --> 00:05:57.170
So now we can go back and look
at the original code and see

00:05:57.170 --> 00:05:59.670
the more interesting stuff,
what's going on with those

00:05:59.670 --> 00:06:02.570
thumbnail scaling animations
instead.

00:06:02.570 --> 00:06:04.790
Again, we use the activity
options.

00:06:04.790 --> 00:06:07.150
This is the one where we scaled
up from the button

00:06:07.150 --> 00:06:09.320
itself and we basically give
it the rectangle that it's

00:06:09.320 --> 00:06:10.560
going to scale from.

00:06:10.560 --> 00:06:13.390
But for the content that's
actually going to scale on the

00:06:13.390 --> 00:06:15.480
screen, it uses the content
of the full

00:06:15.480 --> 00:06:16.570
screen activity itself.

00:06:16.570 --> 00:06:18.300
So we don't need to specify
anything else there.

00:06:18.300 --> 00:06:21.070
We just say where do you start
from and how large are you and

00:06:21.070 --> 00:06:24.160
then it takes care of all
the rest of scaling that

00:06:24.160 --> 00:06:26.170
thing in over time.

00:06:26.170 --> 00:06:29.070
And finally on the last one,
when we're actually scaling in

00:06:29.070 --> 00:06:32.000
from a thumbnail we not only
give it the location that it's

00:06:32.000 --> 00:06:34.610
going to scale from, but we also
give it the bitmap that

00:06:34.610 --> 00:06:35.270
it's going to use.

00:06:35.270 --> 00:06:38.250
So it's going to start with that
representation and then

00:06:38.250 --> 00:06:42.330
scale up and fade into crossfade
into the full screen

00:06:42.330 --> 00:06:44.380
activity that you're
going into.

00:06:44.380 --> 00:06:48.010
So here we create this bitmap.

00:06:48.010 --> 00:06:49.550
We're actually just
loading a bitmap.

00:06:49.550 --> 00:06:51.230
This is the screenshot
that I took earlier

00:06:51.230 --> 00:06:53.450
and saved as a drawable.

00:06:53.450 --> 00:06:56.460
And then we create some activity
options with the

00:06:56.460 --> 00:06:59.550
appropriate parameters and
start the activity.

00:06:59.550 --> 00:07:03.170
And then the window animation
just uses that bundle to run

00:07:03.170 --> 00:07:05.180
the appropriate animation.

00:07:05.180 --> 00:07:06.895
So these are window
animations.

00:07:06.895 --> 00:07:09.860
They are useful for giving
a custom look to your

00:07:09.860 --> 00:07:11.910
application, your activities.

00:07:11.910 --> 00:07:14.980
It's important to point out
that you can do this for

00:07:14.980 --> 00:07:15.780
subactivities.

00:07:15.780 --> 00:07:17.870
It's a little trickier to do
it for main activities, and

00:07:17.870 --> 00:07:20.720
the general advice is don't.

00:07:20.720 --> 00:07:22.690
It's kind of nice for the users
to have a consistent

00:07:22.690 --> 00:07:26.200
experience across the device as
they're using the main UI,

00:07:26.200 --> 00:07:29.250
and part of that is getting
consistent transition

00:07:29.250 --> 00:07:30.870
behaviors as they launch
activities.

00:07:30.870 --> 00:07:33.160
Now once they're in your
activity, that's a custom

00:07:33.160 --> 00:07:33.620
experience.

00:07:33.620 --> 00:07:35.860
That's totally understandable
how you might want to

00:07:35.860 --> 00:07:37.800
customize that according
to what your

00:07:37.800 --> 00:07:39.600
application needs to do.

00:07:39.600 --> 00:07:41.980
But as far as going between
activities or just launching

00:07:41.980 --> 00:07:44.640
it from the launcher screen,
it's kind of nice to let the

00:07:44.640 --> 00:07:49.230
default system behavior still
stay intact and use the custom

00:07:49.230 --> 00:07:53.240
window animations for the
activity transitions actually

00:07:53.240 --> 00:07:55.080
within your activities.

00:07:55.080 --> 00:07:56.330
Thanks for tuning in.

