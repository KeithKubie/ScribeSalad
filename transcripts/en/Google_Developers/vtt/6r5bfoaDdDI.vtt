WEBVTT
Kind: captions
Language: en

00:00:06.779 --> 00:00:08.069
&gt;&gt; HOLEVOET: Okay, hello, everyone.

00:00:08.069 --> 00:00:12.090
My name is Dan Holevoet and I'm an engineer
on Google's developer relations team and I'm

00:00:12.090 --> 00:00:17.520
going to talk to you today about building
context-aware extensions for Gmail, a deep-dive

00:00:17.520 --> 00:00:21.470
on writing Gmail contextual gadgets.

00:00:21.470 --> 00:00:25.710
So while I'm presenting here, we're going
to use Wave and Google Moderator.

00:00:25.710 --> 00:00:30.650
So if you have any questions, you can feel
free to open up this URL and enter those inside

00:00:30.650 --> 00:00:32.851
of the Google Moderator gadget that we have
running there.

00:00:32.851 --> 00:00:37.250
There'll also be live notes and so you can
feel free to follow along.

00:00:37.250 --> 00:00:42.079
And if you missed the URL or, you know, accidentally
closed your tab, you can find this on the

00:00:42.079 --> 00:00:45.760
session site with this talk as well.

00:00:45.760 --> 00:00:49.719
So a brief agenda, you know, why contextual
gadgets?

00:00:49.719 --> 00:00:50.950
You know, why are you all here?

00:00:50.950 --> 00:00:54.010
Why do you care about what I'm saying?

00:00:54.010 --> 00:00:57.249
You know, why are contextual gadgets great?

00:00:57.249 --> 00:00:58.859
And then what makes a contextual gadget?

00:00:58.859 --> 00:01:03.280
So there are three pieces: gadgets, extractors,
and application manifest.

00:01:03.280 --> 00:01:07.520
How to test and distribute contextual gadgets?

00:01:07.520 --> 00:01:11.030
Common tasks and best practices that, you
know, will help you along the way as you're

00:01:11.030 --> 00:01:12.440
writing these.

00:01:12.440 --> 00:01:17.500
An example application that uses contextual
gadgets to sort of highlight some of the ways

00:01:17.500 --> 00:01:18.500
that these are used.

00:01:18.500 --> 00:01:21.890
And then finally, hopefully, I'll convince
all of you to go out and start writing these

00:01:21.890 --> 00:01:25.450
so, some tips on getting started.

00:01:25.450 --> 00:01:27.610
So first, why contextual gadgets?

00:01:27.610 --> 00:01:30.380
Okay, so how many of you use Google Apps?

00:01:30.380 --> 00:01:32.580
Lots of hands, yes, excellent.

00:01:32.580 --> 00:01:34.899
Okay, how many of you have use Gmail?

00:01:34.899 --> 00:01:36.440
All right, yeah, the same number.

00:01:36.440 --> 00:01:37.440
Okay.

00:01:37.440 --> 00:01:38.939
How many of you spend lots of time in Gmail?

00:01:38.939 --> 00:01:41.450
Okay, okay, yeah.

00:01:41.450 --> 00:01:45.180
So, you can probably imagine that, you know,
when you're in your Gmail that you get tons

00:01:45.180 --> 00:01:50.600
of email everyday and, you know, a lot of
those emails convince you to, you know, load

00:01:50.600 --> 00:01:51.600
up another one URLs.

00:01:51.600 --> 00:01:55.290
They'll ask you a question about something,
and you go off in, you know another tab and

00:01:55.290 --> 00:01:57.080
look for something, and then you'll find it,
you know.

00:01:57.080 --> 00:02:00.820
Maybe you'll make some edits on a document
and, you know, some other application.

00:02:00.820 --> 00:02:02.869
Then you'll come back and you'll send a response,
right?

00:02:02.869 --> 00:02:07.060
This is a lot of different steps and they
all encourage you to leave your inbox.

00:02:07.060 --> 00:02:11.740
And if you're like me, you manage the things
that you have to do by staying in your inbox.

00:02:11.740 --> 00:02:14.830
And so leaving your inbox takes up time.

00:02:14.830 --> 00:02:18.180
It's a little bit of a context switch and,
you know, it's generally unproductive.

00:02:18.180 --> 00:02:23.230
So contextual gadgets allow you to stay inside
of your inbox and do all the things you have

00:02:23.230 --> 00:02:24.420
to do on your daily basis.

00:02:24.420 --> 00:02:28.570
So a great example of this is the Google Docs
gadgets, right?

00:02:28.570 --> 00:02:31.550
And so you can see that here, I have an email
from John.

00:02:31.550 --> 00:02:33.360
It's an important document.

00:02:33.360 --> 00:02:35.500
And, you know, he sent me a link to it, right?

00:02:35.500 --> 00:02:39.280
So I can click on that link and I can load
up Google Docs in a different window, read

00:02:39.280 --> 00:02:42.739
the document, maybe make some edits, and then
come back and reply to him.

00:02:42.739 --> 00:02:47.409
Or, you know, I could use this Gmail contextual
gadget, load up a preview of the document

00:02:47.409 --> 00:02:51.740
right inside of Gmail, you know, read the
document, you know, do whatever it is that

00:02:51.740 --> 00:02:56.549
I need to do inside of that email or inside
of that document, and then send off a reply

00:02:56.549 --> 00:02:59.550
to John, all without leaving the context of
my inbox, right?

00:02:59.550 --> 00:03:05.180
So I save a couple of extra steps here and,
you know, my day moves along a little bit

00:03:05.180 --> 00:03:07.560
faster than it would have otherwise.

00:03:07.560 --> 00:03:09.909
So what it is contextual gadgets do, right?

00:03:09.909 --> 00:03:11.920
So this is one example of one.

00:03:11.920 --> 00:03:16.580
Generally, they're matching on fields of an
incoming email message so who the message

00:03:16.580 --> 00:03:21.810
is to, who the message is from, the subject
of the message, parts of the email message

00:03:21.810 --> 00:03:25.400
body--things like links or images.

00:03:25.400 --> 00:03:29.330
And then based off of those matches, they
trigger a gadget to appear.

00:03:29.330 --> 00:03:34.849
And the context that we just matched in this
email message then gets passed into the gadgets

00:03:34.849 --> 00:03:39.610
so that you can do something useful like display
a link to a Google Doc and display the contents

00:03:39.610 --> 00:03:41.319
of that document.

00:03:41.319 --> 00:03:45.300
So, what makes up a contextual gadget?

00:03:45.300 --> 00:03:52.060
So, here's basically how Gmail looks normally,
right, or my artistic rendition of what Gmail

00:03:52.060 --> 00:03:53.250
looks like normally, right?

00:03:53.250 --> 00:03:55.829
And so this is what it appears like on a daily
basis.

00:03:55.829 --> 00:03:59.909
You have, you know, your different labels
on the left, you have a Search Bar on the

00:03:59.909 --> 00:04:01.659
top, and you're looking at this email thread,
right?

00:04:01.659 --> 00:04:03.980
So we have this message loaded up at the bottom.

00:04:03.980 --> 00:04:05.939
We can read that and we can do all sorts of
things with it.

00:04:05.939 --> 00:04:09.060
So what happens when we add contextual gadgets
to this flow?

00:04:09.060 --> 00:04:12.000
So I'm going to throw a bunch of terms at
you.

00:04:12.000 --> 00:04:14.329
You don't have to remember all of them now.

00:04:14.329 --> 00:04:17.500
I'll explain them all in just a moment, but
this is the basic idea of what's happening

00:04:17.500 --> 00:04:19.610
when we use one of these contextual gadgets.

00:04:19.610 --> 00:04:23.220
So, this email message, the one that we're
looking at the bottom here, is going to get

00:04:23.220 --> 00:04:25.830
passed to what we call an extractor.

00:04:25.830 --> 00:04:31.860
And that extractor is going to basically,
you know, use a regular expression to pull

00:04:31.860 --> 00:04:34.930
out relevant bits of this email message.

00:04:34.930 --> 00:04:39.530
Those are going to go to a filter, which is
basically a second layer of regular expressions

00:04:39.530 --> 00:04:43.169
to really hone in on the important details
of this email message.

00:04:43.169 --> 00:04:45.500
And then finally, we're going to make a decision.

00:04:45.500 --> 00:04:47.150
Are there matches on this email message?

00:04:47.150 --> 00:04:50.000
In most cases, no, there's no match.

00:04:50.000 --> 00:04:51.000
So what do we do?

00:04:51.000 --> 00:04:52.000
We don't do anything.

00:04:52.000 --> 00:04:53.630
It looks the same as it always does.

00:04:53.630 --> 00:04:54.630
Gmail doesn't change.

00:04:54.630 --> 00:04:56.500
Your workflow doesn't change.

00:04:56.500 --> 00:04:58.090
You just have an email message.

00:04:58.090 --> 00:05:00.060
But in the case we do have a match.

00:05:00.060 --> 00:05:04.630
Those matches are basically the context and
that triggers the gadgets and that context

00:05:04.630 --> 00:05:06.480
is passed into the gadget.

00:05:06.480 --> 00:05:10.870
All right, so these terms that I mentioned,
right?

00:05:10.870 --> 00:05:14.040
So each contextual gadget is made up of three
things.

00:05:14.040 --> 00:05:16.550
The first one of those is the gadget itself.

00:05:16.550 --> 00:05:20.840
The second thing is one or more extractors,
and I'll explain those in just a second.

00:05:20.840 --> 00:05:27.130
And then finally, because all of these extensions
or contextual gadgets are delivered as part

00:05:27.130 --> 00:05:31.100
of the Google Apps marketplace, we have an
application manifest file, which basically

00:05:31.100 --> 00:05:38.610
describes all of the pieces of the application
and ties them all into one application.

00:05:38.610 --> 00:05:40.789
So what are gadgets?

00:05:40.789 --> 00:05:44.951
Was anyone at my talk earlier today--is this
a refresher for some of you?

00:05:44.951 --> 00:05:45.951
Okay.

00:05:45.951 --> 00:05:47.009
I'll try and go through this a little bit
more quickly.

00:05:47.009 --> 00:05:51.800
If anyone thinks I'm going too fast, feel
free to ask me a question.

00:05:51.800 --> 00:05:55.229
So gadgets are XML, HTML, and JavaScript.

00:05:55.229 --> 00:05:58.920
This is a really simple example of a gadget
"Hello World," "hello world example" is the

00:05:58.920 --> 00:06:01.539
title of the gadget.

00:06:01.539 --> 00:06:05.789
On top of that, we have some gadget-specific
features that allow you to do things like

00:06:05.789 --> 00:06:08.949
adjust the height of the gadget, you know,
make it bigger or smaller, depending on the

00:06:08.949 --> 00:06:09.949
content.

00:06:09.949 --> 00:06:12.789
We have some classes for fetching remote data.

00:06:12.789 --> 00:06:17.819
Those give us some helper features, like if
we want to sign a request that we know it's

00:06:17.819 --> 00:06:18.819
coming from Gmail.

00:06:18.819 --> 00:06:19.819
We can do that.

00:06:19.819 --> 00:06:22.380
We also get some unique information about
the viewer.

00:06:22.380 --> 00:06:24.849
So a unique ID that we can use inside of our
database.

00:06:24.849 --> 00:06:27.960
And I'll talk a little bit more about that
in a few minutes.

00:06:27.960 --> 00:06:32.259
And then we have helpers who are, you know,
accessing data like JSON.

00:06:32.259 --> 00:06:36.639
If we've request JSON inside of this method,
we get back a JavaScript object that we don't

00:06:36.639 --> 00:06:41.260
have to do any additional work on to actually
consume inside of the gadget.

00:06:41.260 --> 00:06:45.490
And then finally, the piece that makes this
different from regular gadgets that you might

00:06:45.490 --> 00:06:50.410
have seen in other places is this Google Content
Match feature, which is basically what returns

00:06:50.410 --> 00:06:54.849
the context when one of these emails triggers
a match.

00:06:54.849 --> 00:06:58.550
So the next piece of a gadget is the extractor.

00:06:58.550 --> 00:07:01.940
And extractors are essentially Perl-compatible
regular expressions.

00:07:01.940 --> 00:07:04.129
I mean that's the easiest way to think about
them.

00:07:04.129 --> 00:07:06.449
And they come in two kinds or two varieties.

00:07:06.449 --> 00:07:10.800
The first of those is the pre-canned extractor
where Google's actually done all of the work

00:07:10.800 --> 00:07:17.129
for you, so if you want to pull out a specific
field of an email message like who the message

00:07:17.129 --> 00:07:21.770
is from or, you know, who the message is to,
you can use a pre-canned extractor for that.

00:07:21.770 --> 00:07:26.550
And on the second kind is the custom extractor.

00:07:26.550 --> 00:07:31.190
So most of these pre-canned extractors operate
on a single entity, right?

00:07:31.190 --> 00:07:37.150
So if I want to match in the context of an
email subject, like if I'm looking for, you

00:07:37.150 --> 00:07:42.010
know, all of the subjects or all of the emails
that have "Hello World" in the subject, I

00:07:42.010 --> 00:07:44.050
can use the pre-canned subject extractor.

00:07:44.050 --> 00:07:50.530
But if I also want to know the subject of
an email and then also who sent it, I really

00:07:50.530 --> 00:07:52.139
want to use a custom extractor.

00:07:52.139 --> 00:07:56.199
And the reason for that is that the normal
relationship when you're defining multiple

00:07:56.199 --> 00:07:58.460
extractors is an "OR" relationship.

00:07:58.460 --> 00:08:03.039
So it's, if this extractor finds a match or
if this other one finds a match.

00:08:03.039 --> 00:08:07.350
And a custom extractor combines those into
an "AND" relationships.

00:08:07.350 --> 00:08:11.810
So, you know, if this is the subject and this
is the sender of the email then trigger the

00:08:11.810 --> 00:08:12.810
gadget.

00:08:12.810 --> 00:08:17.880
And so these aren't actually available right
now but they're available very soon.

00:08:17.880 --> 00:08:22.319
And actually for people that are on the audience
today, if anyone is interested in testing

00:08:22.319 --> 00:08:28.629
custom extractors, come and talk to me afterwards
and I'll see if I can hook you up.

00:08:28.629 --> 00:08:33.430
So back to pre-canned extractors for just
a moment; this is the comprehensive list of

00:08:33.430 --> 00:08:40.210
pre-canned extractors that we have available,
things like email addresses, the time an email

00:08:40.210 --> 00:08:46.570
was sent, HTTP links, recipients, and even
USStockTicker if you're interested in pulling

00:08:46.570 --> 00:08:47.800
those out of an email message.

00:08:47.800 --> 00:08:51.500
And, you know, if there's something in this
list that we're not offering, we're really

00:08:51.500 --> 00:08:56.910
interested in, you know, hearing what types
of things you'd like to have access to that

00:08:56.910 --> 00:08:58.020
aren't available yet.

00:08:58.020 --> 00:09:01.300
We'll see if we can add those to that list.

00:09:01.300 --> 00:09:07.760
So, you might be saying, "Okay, well, a subject
extractor is cool, but it looks like it's

00:09:07.760 --> 00:09:10.080
pulling out the subject of every single email
message.

00:09:10.080 --> 00:09:11.950
And that would be true, right?

00:09:11.950 --> 00:09:16.880
So if you want a match on just a subset of
all the subjects of email messages, you can

00:09:16.880 --> 00:09:18.510
use what's called a filter.

00:09:18.510 --> 00:09:24.190
And like I was saying in my diagram before,
a filter is basically a second regular expression

00:09:24.190 --> 00:09:28.670
that hones in on the specific things that
we're really interested in looking for.

00:09:28.670 --> 00:09:33.070
And it's really straightforward to use one,
so in this particular case here, this larger

00:09:33.070 --> 00:09:37.770
piece is the extractor definition, which will
live inside of the application manifest.

00:09:37.770 --> 00:09:42.040
And we're specifying the field that we want
to filter, in this case, it's the subject.

00:09:42.040 --> 00:09:46.540
And we're looking for every message that says
"Hello World" at the beginning of the subject

00:09:46.540 --> 00:09:47.540
line.

00:09:47.540 --> 00:09:53.690
So if we were to actually apply this to someone's
inbox, only--we would only trigger the gadget

00:09:53.690 --> 00:09:57.090
when the subject says "Hello World" at the
beginning.

00:09:57.090 --> 00:10:03.690
As I said before, if you'd like to combine
the results of multiple pre-canned extractors,

00:10:03.690 --> 00:10:05.650
you would write a custom extractor.

00:10:05.650 --> 00:10:09.770
And that's useful for defining the "AND" relationship.

00:10:09.770 --> 00:10:12.950
So this is an example of one of those customer
extractors.

00:10:12.950 --> 00:10:18.300
This pulls out both the time an email was
sent, as well as the sender of the email message.

00:10:18.300 --> 00:10:22.770
And actually, if you want it to then apply
filters to these, you could do that.

00:10:22.770 --> 00:10:28.640
So you could say "param name equals sender
email," and specify a regular expression for

00:10:28.640 --> 00:10:32.720
matching on that particular email address
so if you wanted to trigger on all the emails

00:10:32.720 --> 00:10:37.370
from a certain domain, or certain sets of
domains, or everyone named "Bob," you can

00:10:37.370 --> 00:10:39.950
do that inside of a filter.

00:10:39.950 --> 00:10:45.130
So the final piece of these contextual gadgets
is the application manifest.

00:10:45.130 --> 00:10:49.650
And this is, like I said before, what defines
the components of the contextual gadgets.

00:10:49.650 --> 00:10:55.880
So you have definitions for the extractors,
you know, filters on any pre-canned or custom

00:10:55.880 --> 00:11:01.520
extractors, the gadgets that are triggered
when those extractors find matches, and finally,

00:11:01.520 --> 00:11:02.780
the scopes for data access.

00:11:02.780 --> 00:11:09.240
So for each of these fields of the email message,
you have to basically indicate to the domain

00:11:09.240 --> 00:11:13.110
administrator that's installing this gadget
that your gadgets are going to be looking

00:11:13.110 --> 00:11:21.060
or, I'm sorry, applying a pattern to the fields
or that field of an email message.

00:11:21.060 --> 00:11:22.060
So this is an example.

00:11:22.060 --> 00:11:25.960
These are some examples of the different fields
of the manifest.

00:11:25.960 --> 00:11:28.140
So the first one we're looking at here.

00:11:28.140 --> 00:11:33.070
This is a test extractor and we're defining
basically where the extractor lives.

00:11:33.070 --> 00:11:35.680
This is the test extractor ID.

00:11:35.680 --> 00:11:38.760
We have a field here, and we're applying a
filter to it.

00:11:38.760 --> 00:11:42.670
This is basically the same as what we're looking
at before.

00:11:42.670 --> 00:11:45.070
We trigger a gadget, which is defined below.

00:11:45.070 --> 00:11:47.820
So we indicate that by this trigger field
here.

00:11:47.820 --> 00:11:53.400
And then below, we have the definition of
the gadget, which is basically a unique identifier

00:11:53.400 --> 00:12:00.420
for the gadget as well as a link to the publicly
available gadget XML.

00:12:00.420 --> 00:12:04.310
And then finally, we're declaring that this
extractor uses a scope.

00:12:04.310 --> 00:12:07.500
So again, just like we referenced the gadget,
we're going to reference the scope, which

00:12:07.500 --> 00:12:11.320
is available later on in the manifest.

00:12:11.320 --> 00:12:14.740
The next slide has an example definition of
a scope.

00:12:14.740 --> 00:12:20.710
So, in this particular case, we're looking
at the subject line of the email message here

00:12:20.710 --> 00:12:27.430
and so the regular expression and the filter
that we've declared for this would then look

00:12:27.430 --> 00:12:31.480
for matches on the subject lines and to trigger
the gadget.

00:12:31.480 --> 00:12:38.230
And then, below that, we're actually specifying
a reason that the subject line is used by

00:12:38.230 --> 00:12:39.230
the gadget.

00:12:39.230 --> 00:12:43.140
So in this particular case, given that this
is an example, it's not a particularly descriptive

00:12:43.140 --> 00:12:44.710
reason.

00:12:44.710 --> 00:12:49.720
But when the application administrator goes
to install one of these contextual gadgets,

00:12:49.720 --> 00:12:52.300
they would see a screen somewhat like this.

00:12:52.300 --> 00:12:57.990
So, for each of the scopes reference in the
manifest, you would see the definition of

00:12:57.990 --> 00:12:58.990
the scopes.

00:12:58.990 --> 00:13:03.550
So something like mail, when the email was
received, and then that reason field would

00:13:03.550 --> 00:13:07.560
display below that particular scope.

00:13:07.560 --> 00:13:12.920
And so that's the way for the gadget author
to basically indicate to the domain administrator,

00:13:12.920 --> 00:13:19.930
you know, why they're interested in having
any access to that particular field.

00:13:19.930 --> 00:13:23.240
So, you know, basically, how these gadgets
work.

00:13:23.240 --> 00:13:24.240
How do you test them?

00:13:24.240 --> 00:13:25.990
How do you distribute them?

00:13:25.990 --> 00:13:30.740
So the flows relatively straightforward and
I spell it all on the slide here, but I can

00:13:30.740 --> 00:13:35.830
actually switch over to the marketplace and
show you how you would install one of these.

00:13:35.830 --> 00:13:41.540
Kara 13:30 So I'm logging with my testamine
right now and I actually have a vendor profile

00:13:41.540 --> 00:13:47.800
already set up, so we'll just click on this
and it will load.

00:13:47.800 --> 00:13:50.730
And, all right, so I have a bunch of listings
here.

00:13:50.730 --> 00:13:55.730
So I could create a new listing for my contextual
gadget, but since I already have on available,

00:13:55.730 --> 00:14:00.300
we'll just load that one up right here and
you can see all the fields that I've entered

00:14:00.300 --> 00:14:01.300
here.

00:14:01.300 --> 00:14:05.570
So, the first thing that's important, this
is a product that is directly installable

00:14:05.570 --> 00:14:08.670
into Google Apps domain so you check the first
box here.

00:14:08.670 --> 00:14:14.760
You can pick a category for your application,
give it a name, give it a summary and an overview.

00:14:14.760 --> 00:14:19.740
And then finally, you put in this application
manifest in the field here and this is basically

00:14:19.740 --> 00:14:21.610
the document that I was talking about before.

00:14:21.610 --> 00:14:23.630
So this is what gives all the scopes.

00:14:23.630 --> 00:14:27.170
This is what defines the extractors we're
going to use and most importantly has a link

00:14:27.170 --> 00:14:32.070
to the gadget that's going to trigger when
one of these extractors finds a match.

00:14:32.070 --> 00:14:35.400
And you can, you know, put enterprise and
terms of service.

00:14:35.400 --> 00:14:37.510
So don't blame me for breaks, et cetera, et
cetera.

00:14:37.510 --> 00:14:42.280
You probably want to have your lawyers think
of something a little bit more rock salt than

00:14:42.280 --> 00:14:43.280
that though.

00:14:43.280 --> 00:14:48.770
All right, so then, we'll go back to the listing
page here.

00:14:48.770 --> 00:14:51.570
All right.

00:14:51.570 --> 00:14:58.330
So I can then click on this and if I were
ready to submit this to the marketplace right

00:14:58.330 --> 00:14:59.660
now, I could click on this button.

00:14:59.660 --> 00:15:06.140
There's a one time fee for listing in the
marketplace of a $100.

00:15:06.140 --> 00:15:09.340
But since I'm not ready for that, I can still
add it to my domain.

00:15:09.340 --> 00:15:13.120
So, yeah, normally, I would just type in my
domain here and this would walk me through

00:15:13.120 --> 00:15:16.900
the installation flow which I just showed
you a second ago one of those, that screen

00:15:16.900 --> 00:15:20.200
so basically it would show me the terms of
service, it would show me the data that's

00:15:20.200 --> 00:15:21.260
being requested.

00:15:21.260 --> 00:15:25.170
And then basically at the end, it asked me
if I'd like to enable the applications.

00:15:25.170 --> 00:15:29.350
So I already have this application installed.

00:15:29.350 --> 00:15:30.800
So we're not going to do that here.

00:15:30.800 --> 00:15:34.760
But this is basically the install flow.

00:15:34.760 --> 00:15:36.640
Oops.

00:15:36.640 --> 00:15:40.700
So if you're developing for your own domain,
I don't know if anyone here is interested

00:15:40.700 --> 00:15:43.480
in just writing contextual gadgets for themselves.

00:15:43.480 --> 00:15:44.480
Anyone?

00:15:44.480 --> 00:15:45.480
Okay, cool.

00:15:45.480 --> 00:15:49.540
So if you're interested in doing that, the
flow that I just showed you is exactly what

00:15:49.540 --> 00:15:54.790
you need to do and then once you have created
your test listing, you're basically done.

00:15:54.790 --> 00:15:56.730
So you can install it on your own domain.

00:15:56.730 --> 00:15:58.010
You don't have to pay a listing fee.

00:15:58.010 --> 00:16:00.200
You don't have to publish it in the marketplace.

00:16:00.200 --> 00:16:04.120
You don't have to worry about like other pesky
customers asking you difficult questions about

00:16:04.120 --> 00:16:05.120
anything.

00:16:05.120 --> 00:16:07.400
You can just install it on your own domain
and then you're done.

00:16:07.400 --> 00:16:09.110
Right, so that's basically it.

00:16:09.110 --> 00:16:14.560
You don't have to worry about any other distribution
or any other people trying to install your

00:16:14.560 --> 00:16:15.560
gadget.

00:16:15.560 --> 00:16:19.220
If you would like to sell it though, like
I said before you hit the publish button and

00:16:19.220 --> 00:16:23.770
hopefully people will, you know, start pouring
in, installing your application on the domains,

00:16:23.770 --> 00:16:26.600
and sending you lots and lots of money.

00:16:26.600 --> 00:16:32.070
So, hopefully the business case is now being
made for why you would want to write one of

00:16:32.070 --> 00:16:33.070
these.

00:16:33.070 --> 00:16:34.190
So you're probably eager to get started.

00:16:34.190 --> 00:16:38.250
So here is some best practices for while you're
writing this contextual gadgets.

00:16:38.250 --> 00:16:43.040
So the first one of this is some notes on
using extractors.

00:16:43.040 --> 00:16:47.080
So you should use the pre-canned extractors
if it's all possible, right?

00:16:47.080 --> 00:16:48.080
They're fairly powerful.

00:16:48.080 --> 00:16:53.250
You can do lots of things with them, and we
really try to take all the hard work out of

00:16:53.250 --> 00:16:56.510
matching on particular fields, so use this
as we can.

00:16:56.510 --> 00:16:59.140
If you can't, well, you know, let us know
if there's something that you'd really like

00:16:59.140 --> 00:17:05.450
to do that you can't do yet, you know, a particular
thing that you're trying to match on and then

00:17:05.450 --> 00:17:10.220
email and it just doesn't seem like it's possible
yet, so we love to hear that feedback.

00:17:10.220 --> 00:17:16.449
The next thing is to use the smallest necessary
scope that you can while you were matching

00:17:16.449 --> 00:17:17.449
this data.

00:17:17.449 --> 00:17:21.670
So if you want to pull something out of the
subject line and you want to pull something

00:17:21.670 --> 00:17:26.990
out of the sender email, don't ask for access
to the message body, right?

00:17:26.990 --> 00:17:30.990
Every additional scope that you request to
access for is an additional roadblock that

00:17:30.990 --> 00:17:35.970
you're going to have to cross when a domain
administrator is installing one of these applications,

00:17:35.970 --> 00:17:36.970
right?

00:17:36.970 --> 00:17:42.940
They may be comfortable giving you some access
to the subject line and a sender but maybe

00:17:42.940 --> 00:17:46.580
not be so comfortable with access to a message
body, right?

00:17:46.580 --> 00:17:49.820
So don't ask for extra data, basically.

00:17:49.820 --> 00:17:54.270
And then finally, you should try and match
on these few emails as possible.

00:17:54.270 --> 00:17:58.400
And you're probably thinking why I have this
really great use-case but it involves matching

00:17:58.400 --> 00:17:59.440
in every single email message.

00:17:59.440 --> 00:18:00.440
Fair enough.

00:18:00.440 --> 00:18:03.850
I'm sure you do have a really great use-case
that does that.

00:18:03.850 --> 00:18:06.140
But there are a lot of other people that do
it as well.

00:18:06.140 --> 00:18:10.370
And it's not the greatest user experience
when you have one email triggering, you know,

00:18:10.370 --> 00:18:16.180
five or six or ten contextual gadgets all
below that one email message, so just keep

00:18:16.180 --> 00:18:24.510
that in mind; so sort of piggy backing in
that, some great tips for writing your gadget

00:18:24.510 --> 00:18:25.510
UI.

00:18:25.510 --> 00:18:29.280
So the first one, if your gadget doesn't have
anything to show, handle it gracefully, right?

00:18:29.280 --> 00:18:33.820
So say, you are matching at every single email
message but, you know, there's no data in

00:18:33.820 --> 00:18:38.150
your database or you can't find anything about
the particular field that you're matching

00:18:38.150 --> 00:18:39.150
on.

00:18:39.150 --> 00:18:42.990
If that's the case, collapse your gadget down,
use the dynamic type of call that I was just

00:18:42.990 --> 00:18:47.220
mentioning a few minutes ago or, you know,
show a little teeny descriptive message saying

00:18:47.220 --> 00:18:50.300
that there's no data for this particular message.

00:18:50.300 --> 00:18:54.630
Don't take up the entire UI saying, "Oh, sorry,
I don't have anything to do," because you're

00:18:54.630 --> 00:18:58.120
taking up the precious user's screen real
estate state and they're not going to appreciate

00:18:58.120 --> 00:19:03.280
that and they may even go as far as actually
uninstalling your gadget, and you don't want

00:19:03.280 --> 00:19:04.690
that and we don't want that.

00:19:04.690 --> 00:19:07.540
So try and take up as little space as possible.

00:19:07.540 --> 00:19:09.480
Be kind to the user.

00:19:09.480 --> 00:19:15.100
And along those lines, it's really helpful
if you provide an option to users to expand

00:19:15.100 --> 00:19:18.940
or collapse the gadget UI and actually remember
the user's preference.

00:19:18.940 --> 00:19:24.300
So if I have one gadget that's triggering
on a whole list of emails inside of my [INDISTINCT]

00:19:24.300 --> 00:19:28.870
thread that I'm looking at, it would be really
great if users could choose to collapse those

00:19:28.870 --> 00:19:30.970
contextual gadgets that are showing up.

00:19:30.970 --> 00:19:34.930
And the next time that they learn an email
thread, they already start out collapse and

00:19:34.930 --> 00:19:37.400
the best way to do that is using the user
prefs API.

00:19:37.400 --> 00:19:41.633
I don't actually have any code for that on
the slides but, if you want to know how to

00:19:41.633 --> 00:19:46.000
do that, you can feel free to ask me at the
end and all, you know, live codes something

00:19:46.000 --> 00:19:47.000
out for you.

00:19:47.000 --> 00:19:51.180
And then, you know, along all these lines,
when you're talking about shrinking and expanding

00:19:51.180 --> 00:19:55.860
the size of the gadget, the gadget's start
window.adjustHeight calls is really your friend

00:19:55.860 --> 00:20:00.170
there and that's the easiest way to do that.

00:20:00.170 --> 00:20:04.470
So for anyone that was here before, I talked
about fetching data, so I'm going to really

00:20:04.470 --> 00:20:06.420
quickly run through this.

00:20:06.420 --> 00:20:10.370
If anyone has questions on this, yeah, feel
free to ask me to expand on this a little

00:20:10.370 --> 00:20:11.370
bit later.

00:20:11.370 --> 00:20:18.550
So the way that we do this is using "osapi.http"
and this supports all the HTTP method.

00:20:18.550 --> 00:20:23.150
So in this case, we're using a "get", you
can also use "post" or "put" and we're requesting

00:20:23.150 --> 00:20:29.040
data at example.com, it's JSONs, we're going
to get back JavaScript object.

00:20:29.040 --> 00:20:33.320
And because this is a synchronous, it's not
going to block the browser while it's executing.

00:20:33.320 --> 00:20:38.550
So we're going to pass in a call back function
that's going to handle the data when the data

00:20:38.550 --> 00:20:41.990
is returned and then the gadget can do some
useful event.

00:20:41.990 --> 00:20:48.070
So this request gets made, proxies that request
to the gadget container that get sent along

00:20:48.070 --> 00:20:50.510
to a remote site whether it's App Engine.

00:20:50.510 --> 00:20:55.550
As it is in this case, a third-party site,
your own Web server something else.

00:20:55.550 --> 00:20:59.940
You know, any site that's accessible on the
Internet will work find here.

00:20:59.940 --> 00:21:05.290
The server sends back the, or it receives
a request that sends back the data and finally

00:21:05.290 --> 00:21:10.350
the data gets passed to the gadget, it's pretty
straightforward.

00:21:10.350 --> 00:21:15.230
Along those lines, you can actually use the
same flow if you'd like to do authentication

00:21:15.230 --> 00:21:17.550
of the currently signed in user.

00:21:17.550 --> 00:21:23.440
And so the key for this flow is that we're
adding the, of the sign parameter into this

00:21:23.440 --> 00:21:27.800
request and so what that basically does is
when this request gets to the container, so

00:21:27.800 --> 00:21:34.150
after it's passed through beyond the user
so that the user can no longer edit the request.

00:21:34.150 --> 00:21:39.870
You know, it's free of, you know; worry to
be of being mangled by, you know, a clever

00:21:39.870 --> 00:21:42.880
user and a JavaScript console or anything
like that.

00:21:42.880 --> 00:21:48.660
The container will actually append unique
user ID, which we call the OpenSocial ID on

00:21:48.660 --> 00:21:49.880
to the end of the request.

00:21:49.880 --> 00:21:54.680
Basically, mash all the parameters and the
request together or any data that's in the

00:21:54.680 --> 00:21:57.970
payload and then cryptographically sign it.

00:21:57.970 --> 00:22:04.210
So this is using a shared secret between the
gadget developer, you know, you and Google.

00:22:04.210 --> 00:22:07.850
So you're the only two people that will have
access to that key.

00:22:07.850 --> 00:22:15.110
So the signature that's at the end basically
signifies that none of the data was edited

00:22:15.110 --> 00:22:19.990
in transmission and that the user that has
identified is actually the user that's using

00:22:19.990 --> 00:22:21.750
your app, right?

00:22:21.750 --> 00:22:27.860
And so once this gets to the server, the server
can basically duplicates that signature process,

00:22:27.860 --> 00:22:33.650
basically mash all the parameters together,
add any of the payload content into this basically,

00:22:33.650 --> 00:22:38.620
you know, it's a giant string and then repeat
that signing process to make sure that the

00:22:38.620 --> 00:22:44.510
signature that results is the same signature
that was passed along in the request.

00:22:44.510 --> 00:22:46.800
And then, you know, it repeats as it did before.

00:22:46.800 --> 00:22:51.450
So the data gets returned to the container
and the data gets passed back to the gadget.

00:22:51.450 --> 00:22:53.210
So you say, "Okay, that's cool.

00:22:53.210 --> 00:22:56.560
But the OpenSocial ID is not particularly
useful."

00:22:56.560 --> 00:22:59.460
What would I do if I want more than the OpenSocial
ID?

00:22:59.460 --> 00:23:02.380
So this is fairly common.

00:23:02.380 --> 00:23:06.240
And because all of these applications are
part of the Google Apps Marketplace, you are

00:23:06.240 --> 00:23:11.460
already using OpenID to do authentication
for other parts of your apps, so we're going

00:23:11.460 --> 00:23:15.360
to encourage everyone to use OpenID for authentication
within a gadget.

00:23:15.360 --> 00:23:18.710
And so the basic flow for this is this follows,
right?

00:23:18.710 --> 00:23:25.450
So we have that same remote data request data
here, it's sign to passes in the OpenSocial

00:23:25.450 --> 00:23:27.710
ID to server.

00:23:27.710 --> 00:23:35.580
And here's some pseudo code Python like App
Engine code that you could use to basically

00:23:35.580 --> 00:23:38.580
use that OpenSocial ID, so we'll take that
ID here.

00:23:38.580 --> 00:23:43.430
We'll do a query on the user's table in our
App Engine app.

00:23:43.430 --> 00:23:48.060
Basically, we'll see if there's anyone we've
already identified that has that OpenSocial

00:23:48.060 --> 00:23:51.460
ID, you know, in datastore.

00:23:51.460 --> 00:23:55.270
And if there isn't anyone, what we're going
to do is we're going to basically save that

00:23:55.270 --> 00:23:59.400
OpenSocial ID along with a unique one-time
use token.

00:23:59.400 --> 00:24:01.460
So this could be a session token.

00:24:01.460 --> 00:24:07.390
It could be a random string, you know, any
value that you'd like as long as it is unique

00:24:07.390 --> 00:24:09.220
and it only gets used the single time, right?

00:24:09.220 --> 00:24:14.070
So we save that at datastore, and then we're
going to return to the gadget basically as

00:24:14.070 --> 00:24:15.510
status message, right?

00:24:15.510 --> 00:24:18.440
This user wasn't found.

00:24:18.440 --> 00:24:23.360
We've created a temporary table in our database
and it's identified by this session token,

00:24:23.360 --> 00:24:25.590
so that gets pass back to the gadget.

00:24:25.590 --> 00:24:28.440
And we'll talk about what happens next in
just a second.

00:24:28.440 --> 00:24:32.350
And the other case, where you have already
identified this user, you can send back a

00:24:32.350 --> 00:24:35.380
message saying, "Yes, we know who the user
is."

00:24:35.380 --> 00:24:36.850
You can also pass along some data.

00:24:36.850 --> 00:24:39.070
You know, here's the user's email.

00:24:39.070 --> 00:24:41.300
Here's their favorite color, things like that.

00:24:41.300 --> 00:24:44.280
Whatever you've already collected in your
datastore, at this point, you can pass it

00:24:44.280 --> 00:24:49.430
back to the gadget and use it in your gadget.

00:24:49.430 --> 00:24:50.590
So what do you do?

00:24:50.590 --> 00:24:55.010
What's the next step when you need to do further
authentication on the user, right?

00:24:55.010 --> 00:24:59.820
So you have this single-use token that's been
passed back to you.

00:24:59.820 --> 00:25:03.700
And you know if the OpenSocial ID is of the
current user.

00:25:03.700 --> 00:25:08.970
And so what you're going to do next is you're
going to open up a popup window to whatever

00:25:08.970 --> 00:25:12.480
location you're using until you handle OpenID
for your app, right?

00:25:12.480 --> 00:25:17.270
So this could be your own server, it could
be a third-party server as it does OpenID

00:25:17.270 --> 00:25:18.690
on your behalf.

00:25:18.690 --> 00:25:22.670
Whatever it is, as long as it does OpenID,
you're good to go.

00:25:22.670 --> 00:25:24.230
So you open up this URL.

00:25:24.230 --> 00:25:29.020
You're passing the session token as a parameter
at the end and then the user goes to the OpenID

00:25:29.020 --> 00:25:30.370
process.

00:25:30.370 --> 00:25:35.550
And since this is part of the Google Apps
Marketplace applications, in this case OpenID

00:25:35.550 --> 00:25:38.000
doesn't actually require the user to do anything.

00:25:38.000 --> 00:25:41.340
You're already in Gmail so the person is,
the user has already signed in with their

00:25:41.340 --> 00:25:42.700
Google Apps account.

00:25:42.700 --> 00:25:47.370
So when they get to the step of doing OpenID,
they're already authenticated.

00:25:47.370 --> 00:25:54.309
And because Google Apps Marketplace applications
can also whitelist the ROM that they're using

00:25:54.309 --> 00:25:58.340
for OpenID, you don't actually require authorization
step either.

00:25:58.340 --> 00:26:03.320
So this popup window will redirect itself
a couple times and finally end up on your

00:26:03.320 --> 00:26:07.480
server with that session token appended to
the end of the URL.

00:26:07.480 --> 00:26:11.550
And at this point, you know who the user is
because they've just logged-in via OpenID,

00:26:11.550 --> 00:26:16.440
so you have access to their OpenID and, you
know, if you use Attribute Exchange, you have

00:26:16.440 --> 00:26:19.590
access to things like users' email address.

00:26:19.590 --> 00:26:24.720
And then because you pass in the session token,
you can also look up in your datastore the

00:26:24.720 --> 00:26:27.550
OpenSocial ID that is associated with that
session token.

00:26:27.550 --> 00:26:32.120
So, you know the OpenID, you possibly know
the email address and you know the OpenSocial

00:26:32.120 --> 00:26:34.060
ID and you can save that all in your database.

00:26:34.060 --> 00:26:38.380
So at this point, you know everything you
need to know about the user in order to do

00:26:38.380 --> 00:26:42.220
authentication and then you can close the
popup window.

00:26:42.220 --> 00:26:45.890
And since the popup was opened from within
the gadget, if you're pulling to see when

00:26:45.890 --> 00:26:51.110
a popup is closed, you'll actually be able
to trigger some new behavior once the window

00:26:51.110 --> 00:26:52.110
gets closed.

00:26:52.110 --> 00:26:55.900
So this is sort of a [INDISTINCT] check sends
a request, talk to the server to basically

00:26:55.900 --> 00:26:59.720
ensure that everything went the way that you
expected it to.

00:26:59.720 --> 00:27:04.050
And if for some reason the user closes the
popup window before everything finishes, you

00:27:04.050 --> 00:27:09.720
can throw, you know, a message saying, you
know, "Hey, you didn't actually authenticate

00:27:09.720 --> 00:27:10.720
it.

00:27:10.720 --> 00:27:14.540
We really need you to do that just once, we
promise, and then you can open the popup window

00:27:14.540 --> 00:27:15.540
again."

00:27:15.540 --> 00:27:16.540
Otherwise, you're all set.

00:27:16.540 --> 00:27:18.800
You can run your gadget as you normally would.

00:27:18.800 --> 00:27:23.470
So, next, some tips on writing safe gadgets.

00:27:23.470 --> 00:27:29.460
So the first thing, probably the most important
thing here is to stick to the HTML and CSS

00:27:29.460 --> 00:27:30.460
specs.

00:27:30.460 --> 00:27:33.750
This is great for both security and compatibility
of your gadget.

00:27:33.750 --> 00:27:37.190
So these gadgets will work across browsers.

00:27:37.190 --> 00:27:42.420
And, you know, the best way to ensure compatibility
is by doing things as they are outlined in

00:27:42.420 --> 00:27:43.660
the spec.

00:27:43.660 --> 00:27:47.179
Along the same token, you know, stick to safe
DOM operations.

00:27:47.179 --> 00:27:49.620
Don't do things like document "document.write."

00:27:49.620 --> 00:27:55.800
Use supportive event handlers and timers and,
you know, in order to help you along in writing

00:27:55.800 --> 00:27:59.780
these gadgets, we actually recommend that
you use things like Google Web Toolkit, OpenSocial

00:27:59.780 --> 00:28:01.380
Templates, and jQuery.

00:28:01.380 --> 00:28:07.559
So if you're using one of these things that'll
take care of most of the recommendation above.

00:28:07.559 --> 00:28:12.260
So, just worry about jQuery and don't worry
about writing safe DOM operations you can

00:28:12.260 --> 00:28:16.060
sort of trust what it's doing and you'll be
all right.

00:28:16.060 --> 00:28:20.040
And a little bit of a distinct between these
gadgets and the ones I was talking about earlier

00:28:20.040 --> 00:28:23.210
is that Gmail contextual gadgets will be using
Caja.

00:28:23.210 --> 00:28:25.480
So how many people here know what Caja is?

00:28:25.480 --> 00:28:28.030
Yeah, that's about right.

00:28:28.030 --> 00:28:30.590
Okay, they're all Googlers.

00:28:30.590 --> 00:28:39.450
So Caja is basically an added layer of security
for applications that live inside of, you

00:28:39.450 --> 00:28:41.630
know, third party apps.

00:28:41.630 --> 00:28:48.550
And, so, what they provide is basically a
whitelist of JavaScript, safe JavaScript operations

00:28:48.550 --> 00:28:52.530
that can be executed by untrusted applications.

00:28:52.530 --> 00:28:58.190
So for applications that are already inside
of iFrames, you know, they're protecting against

00:28:58.190 --> 00:29:02.440
a smaller set of things but there are still
some things that that an iFrame doesn't protect

00:29:02.440 --> 00:29:05.750
you against that Caja would protect you against.

00:29:05.750 --> 00:29:10.429
And, if you're really interested in learning
more about this, you can go to this code hosting

00:29:10.429 --> 00:29:18.110
project or project hosting site here, code.google.com/p/google-caja,
which we'll explain in some more detail.

00:29:18.110 --> 00:29:23.430
It's a little bit out of scope of this presentation
but, more details than you can ever possibly

00:29:23.430 --> 00:29:25.610
want to know about using Caja.

00:29:25.610 --> 00:29:31.559
And, basically, if you're using one of these
supportive frameworks that we've outlined,

00:29:31.559 --> 00:29:36.320
when we do turn on Caja inside of Gmail contextual
gadgets, your gadgets will work.

00:29:36.320 --> 00:29:40.830
So if you use Google Web Toolkit, if you use
OpenSocial Templates, if you use jQuery, you're

00:29:40.830 --> 00:29:41.830
good to go.

00:29:41.830 --> 00:29:46.970
If you use something else, you might be good
to go, but you might not, so good to start

00:29:46.970 --> 00:29:52.070
now and, finally, if you'd like to test any
of the JavaScript that you've written, there's

00:29:52.070 --> 00:29:58.340
Caja playground at caja.appspot.com where
you can actually input some of your JavaScript

00:29:58.340 --> 00:30:05.920
and see how it cajoles as it's named, so good
things to keep in mind for now.

00:30:05.920 --> 00:30:10.380
And these are some examples of the good, the
bad, and the ugly when it comes to writing

00:30:10.380 --> 00:30:12.080
JavaScript code.

00:30:12.080 --> 00:30:13.880
These are very straightforward.

00:30:13.880 --> 00:30:18.020
The last one in particular, you shouldn't
trust things like, you know, redirecting the

00:30:18.020 --> 00:30:24.040
parent window to possibly untrusted data from,
you know, random users or anything that's

00:30:24.040 --> 00:30:28.430
unsanitized and that goes for things not just
a redirection of the page.

00:30:28.430 --> 00:30:33.220
But, if you're displaying content, make sure
that you sanitized it, everything that gets

00:30:33.220 --> 00:30:34.340
put in to your gadget.

00:30:34.340 --> 00:30:42.650
So, now, let's talk about an example application
that's using a Gmail contextual gadget.

00:30:42.650 --> 00:30:47.580
And if anyone was here before, you've seen
this application a little bit already.

00:30:47.580 --> 00:30:52.390
And this is an application I wrote, it's called
TicTrac, and it's a ticket tracking system.

00:30:52.390 --> 00:31:00.010
Basically, it uses Gmail as a ticketing system,
so you can assign owners and statuses to your

00:31:00.010 --> 00:31:03.530
email threads and then, you know, there are
some other gadgets that I wrote for the other

00:31:03.530 --> 00:31:09.880
session where you can see a different dashboards
and so on, things like this, you know, that

00:31:09.880 --> 00:31:13.480
give you a summary of activity inside of the
system.

00:31:13.480 --> 00:31:16.030
So, let's look at the application really quickly.

00:31:16.030 --> 00:31:18.559
Have it open one of these windows.

00:31:18.559 --> 00:31:22.990
So this is basically the app, and we have
a bunch of people that are working on these

00:31:22.990 --> 00:31:23.990
tickets.

00:31:23.990 --> 00:31:24.990
They can click on one.

00:31:24.990 --> 00:31:27.010
See the tickets that are assigned to me.

00:31:27.010 --> 00:31:28.820
App Engine is taking a little time.

00:31:28.820 --> 00:31:30.110
Okay, so here we go.

00:31:30.110 --> 00:31:31.880
These are all the tickets that are assigned
right now.

00:31:31.880 --> 00:31:35.290
It looks like I've resolved all and it's great.

00:31:35.290 --> 00:31:39.170
And basically the flow would be, you know,
click on one of this messages, see who it's

00:31:39.170 --> 00:31:40.170
from.

00:31:40.170 --> 00:31:42.380
You can unassign it.

00:31:42.380 --> 00:31:44.150
You can take; you can assign it to somebody.

00:31:44.150 --> 00:31:50.200
Basically, say, "I'm working on it" and when
you're done, you can finally hit resolve.

00:31:50.200 --> 00:31:56.350
And, so let's talk about how TicTrac is using
these contextual gadgets.

00:31:56.350 --> 00:32:04.230
So TicTrac basically specifies an extractor
that filters on the list of recipients of

00:32:04.230 --> 00:32:05.230
an email message.

00:32:05.230 --> 00:32:11.220
So, in this particular case, I have a ticket
queue which is basically a Google Groups email

00:32:11.220 --> 00:32:17.070
address, and whenever a message comes into
my inbox that sent to the list, I want to

00:32:17.070 --> 00:32:20.600
identify that as one of the messages that
sent to this Ticket Tracking system.

00:32:20.600 --> 00:32:24.929
And then, I'd like to trigger the contextual
gadget to appear.

00:32:24.929 --> 00:32:28.890
Once we're inside of the contextual gadget,
we're going to take the sender of the email

00:32:28.890 --> 00:32:34.980
as well as the time the email was sent and
shift that off to App Engine and, basically,

00:32:34.980 --> 00:32:39.000
use that to pull out information about the
thread that that email is part of and send

00:32:39.000 --> 00:32:43.440
that back to the contextual gadgets so that
we can learn interesting things about the

00:32:43.440 --> 00:32:45.720
email message and possibly take some actions.

00:32:45.720 --> 00:32:53.040
So this is a basic architecture diagram of
TicTrac and it's the familiar extractor filter

00:32:53.040 --> 00:32:55.360
flow here on the right.

00:32:55.360 --> 00:32:57.000
When there's matches, we trigger the gadget.

00:32:57.000 --> 00:32:59.190
The gadget sends information to App Engine.

00:32:59.190 --> 00:33:03.820
On the side here, we have email from these
groups being sent into App Engine as well

00:33:03.820 --> 00:33:09.679
so that we can perform the matching between
the emails and the threads that they're part

00:33:09.679 --> 00:33:11.510
of--excuse me.

00:33:11.510 --> 00:33:14.020
And then finally, we're setting the thread
details back.

00:33:14.020 --> 00:33:19.230
So, yeah, so let's look at this in action.

00:33:19.230 --> 00:33:24.940
So, here I am, I'm in my inbox and I have
these two threads that look like they need

00:33:24.940 --> 00:33:25.940
an answer.

00:33:25.940 --> 00:33:31.300
So, the first one is we'll open up, the tricky
question, does P equal NP?

00:33:31.300 --> 00:33:32.480
That is a tricky question.

00:33:32.480 --> 00:33:37.950
And we can see, below here, we have TicTrac
being triggered, so we can see that the message

00:33:37.950 --> 00:33:42.280
is new and basically it's unopened.

00:33:42.280 --> 00:33:45.190
On the right side, we have it's unassigned
so no one is working on this.

00:33:45.190 --> 00:33:47.590
I can't imagine why.

00:33:47.590 --> 00:33:49.310
It looks like we need to take some action.

00:33:49.310 --> 00:33:53.670
I really don't want this in my inbox, so let's
deal with this, let's triage these tickets.

00:33:53.670 --> 00:33:57.740
So, I don't think I can answer this one, so
I'm going to pass it to one of my colleagues,

00:33:57.740 --> 00:34:00.760
so I just type his username in there and I'll
sign it.

00:34:00.760 --> 00:34:04.070
So, at this point, I haven't left my inbox.

00:34:04.070 --> 00:34:06.770
I've assigned the email message.

00:34:06.770 --> 00:34:10.900
Basically, I'm done triaging and I can just
take out of the follow-up label and we're

00:34:10.900 --> 00:34:11.900
done.

00:34:11.900 --> 00:34:16.500
So, when Ryan comes in later, he'll see that
he has a ticket to work on and he can get

00:34:16.500 --> 00:34:19.109
work on solving that vital question.

00:34:19.109 --> 00:34:23.869
So the next one, a simple question, oh, this
is much better.

00:34:23.869 --> 00:34:24.869
So we can see here.

00:34:24.869 --> 00:34:26.700
What is the air speed velocity of an unladen
swallow?

00:34:26.700 --> 00:34:28.389
Oh, no one is working on this one yet.

00:34:28.389 --> 00:34:29.389
This is excellent.

00:34:29.389 --> 00:34:31.030
So I'll just take this one here.

00:34:31.030 --> 00:34:35.450
I think I can answer this with another question
actually.

00:34:35.450 --> 00:34:36.970
So let's see.

00:34:36.970 --> 00:34:48.790
African or European, and we'll send that off,
and we're done.

00:34:48.790 --> 00:34:54.159
So I can mark it as result and remove the
label and we're finished editing all these

00:34:54.159 --> 00:34:55.159
tickets.

00:34:55.159 --> 00:34:56.610
So I didn't have to leave my inbox.

00:34:56.610 --> 00:34:58.630
I could see that no one was working on a message.

00:34:58.630 --> 00:35:01.660
I could, you know, basically identify that
I was working on a message or assign it to

00:35:01.660 --> 00:35:03.050
someone else.

00:35:03.050 --> 00:35:06.060
Send off the email when I'm done with the
tickets resolved.

00:35:06.060 --> 00:35:10.220
I can mark it as resolved and, you know, I
basically completed this entire workflow in

00:35:10.220 --> 00:35:15.870
a couple of seconds without ever leaving the
context of the particular email message.

00:35:15.870 --> 00:35:22.140
All right, applause, this is excellent.

00:35:22.140 --> 00:35:25.560
All right, so how are we doing this?

00:35:25.560 --> 00:35:28.850
All right, so the first step, we're using
the matches.

00:35:28.850 --> 00:35:30.560
And this is really just boilerplate code.

00:35:30.560 --> 00:35:35.020
You can actually copy this into your own contextual
gadgets and just start using it.

00:35:35.020 --> 00:35:43.020
Basically, what this is going to do is, you
know, use as API call and get back an object

00:35:43.020 --> 00:35:45.740
that has fields for each of the things that
we're pulling out.

00:35:45.740 --> 00:35:49.030
So, in this particular case, I'm looking at
the time the time the email was sent as well

00:35:49.030 --> 00:35:53.530
as you sent the email so I'm going to get
context.time_sent and context.sender, and

00:35:53.530 --> 00:35:57.300
I can use those in map, it's really convenient.

00:35:57.300 --> 00:36:04.600
So, once we have these two fields, we can
use this method that I wrote here called getThreadFromDetails,

00:36:04.600 --> 00:36:09.420
which will take that context, pass it into
the method here.

00:36:09.420 --> 00:36:13.270
This is another asynchronous call that's going
to send off a request to App Engine.

00:36:13.270 --> 00:36:18.630
And, you know, basically, the result that
we're going to get back is some sort of thread

00:36:18.630 --> 00:36:19.760
ID.

00:36:19.760 --> 00:36:23.960
So, this is going to construct the payload
that's something like the following here.

00:36:23.960 --> 00:36:29.630
This is just basically some JSON, not particularly
interesting, but if you're interested in writing

00:36:29.630 --> 00:36:35.380
an API similar to this that takes inputs like
this, this is actually a really great article

00:36:35.380 --> 00:36:41.540
on code.google.com and the App Engine section
about writing RPC APIs on App Engine which

00:36:41.540 --> 00:36:44.170
is really great for gadgets like this.

00:36:44.170 --> 00:36:49.310
And I can find the URL if anyone is interested
in that after the talk.

00:36:49.310 --> 00:36:50.850
So this will send the request to App Engine.

00:36:50.850 --> 00:36:58.240
We'll get back some data and then we can display
those buttons or the little status bar for

00:36:58.240 --> 00:37:00.590
each of the tickets.

00:37:00.590 --> 00:37:03.480
So it's really straightforward, the rest of
it is basically just writing some UI code.

00:37:03.480 --> 00:37:07.450
And then the other interesting piece here
is that in the application manifest, we need

00:37:07.450 --> 00:37:10.500
to declare the details of this particular
application.

00:37:10.500 --> 00:37:17.060
So I'm using a customer extractor here because
I want to match only when we know the recipient

00:37:17.060 --> 00:37:20.440
is in the list of addresses that we want to
match upon.

00:37:20.440 --> 00:37:25.190
And then I'm also interested in collecting
the sender of the email as well as when the

00:37:25.190 --> 00:37:27.230
email was sent.

00:37:27.230 --> 00:37:30.040
So here we have the custom extractor.

00:37:30.040 --> 00:37:34.750
We're triggering TicTrac gadget, which we'll
see in a second.

00:37:34.750 --> 00:37:37.880
We're filtering on the recipient to email
address here.

00:37:37.880 --> 00:37:42.610
So this is a regular expression for matching
on my mailing list, and then finally, we're

00:37:42.610 --> 00:37:46.150
declaring the three scopes that are being
used by the gadgets so that's the time sent

00:37:46.150 --> 00:37:50.780
and the time received as well as the recipients
of the email.

00:37:50.780 --> 00:37:53.190
So this is the definition of the gadget, super
straightforward.

00:37:53.190 --> 00:37:57.369
Basically, you just have to make sure that
this ID matches up with the, what we declared

00:37:57.369 --> 00:37:58.369
earlier.

00:37:58.369 --> 00:38:02.100
And then, you know, this is the gadget XML.

00:38:02.100 --> 00:38:04.260
And then, you know, there's three of these
scopes.

00:38:04.260 --> 00:38:06.680
This is just the first one of those three.

00:38:06.680 --> 00:38:09.350
They're basically all the same.

00:38:09.350 --> 00:38:11.160
We give a definite--oops.

00:38:11.160 --> 00:38:16.320
We give the description of the, or basically
a unique name for this scope.

00:38:16.320 --> 00:38:23.840
We have field definition here for the particular
scope that we're interested in looking at.

00:38:23.840 --> 00:38:27.430
You don't have to memorize this or sort of
figure out what they all mean.

00:38:27.430 --> 00:38:31.251
We have a list of them in our documentation,
you can just copy and paste.

00:38:31.251 --> 00:38:36.859
And then finally we have a reason field, you
know, we're extracting the time sent because

00:38:36.859 --> 00:38:43.160
we need to perform email lookup, so relatively
straightforward.

00:38:43.160 --> 00:38:45.710
So hopefully that's seems relatively simple.

00:38:45.710 --> 00:38:47.180
You guys seem to like it.

00:38:47.180 --> 00:38:50.700
So, hopefully, you all want to get started
at this point.

00:38:50.700 --> 00:38:56.680
So I'm happy to say that we launched contextual
gadgets on Tuesday, so you're all free to

00:38:56.680 --> 00:38:58.530
start developing this today.

00:38:58.530 --> 00:39:01.620
We have documentation on code.google.com/api/gmail/gadgets/contextual.

00:39:01.620 --> 00:39:06.950
It's nice and hierarchical.

00:39:06.950 --> 00:39:13.560
We also have documentation on the marketplace
so if you're interested in writing applications

00:39:13.560 --> 00:39:17.810
that use other parts of the Google Apps Marketplace
you can feel free to check that out.

00:39:17.810 --> 00:39:23.230
And then we have a developer form for writing
gadgets that live inside the Google Apps,

00:39:23.230 --> 00:39:24.230
this URL here.

00:39:24.230 --> 00:39:28.640
And, you know, thank you all for coming to
this last session of Google I/O.

00:39:28.640 --> 00:39:33.650
It's, you know, it's a little bit late in
a day, so I'm happy you all stuck around and

00:39:33.650 --> 00:39:35.200
came to this.

00:39:35.200 --> 00:39:38.790
But there area lots of other enterprise sessions
as well so I'd really encourage everyone to

00:39:38.790 --> 00:39:42.400
check those out too, and they'll all be posted
online.

00:39:42.400 --> 00:39:47.440
And one thing is not mentioned in here is
that I like to give a huge shout out to all

00:39:47.440 --> 00:39:50.700
the people that watched contextual gadgets
with us on Tuesday.

00:39:50.700 --> 00:39:52.570
These are really great.

00:39:52.570 --> 00:39:56.490
And if anyone wants to see some really great
ways to use contextual gadgets, I'd encourage

00:39:56.490 --> 00:40:02.359
you to go bit.ly/getcontextual and you can
see all the integrations in the Google Apps

00:40:02.359 --> 00:40:05.930
Marketplace so these are really awesome.

00:40:05.930 --> 00:40:11.460
And without further ado, we will go to questions.

00:40:11.460 --> 00:40:16.030
Let's see.

00:40:16.030 --> 00:40:21.940
I thought there's a question here before.

00:40:21.940 --> 00:40:23.310
Let's just refresh.

00:40:23.310 --> 00:40:28.220
And, yeah, if anyone has live questions, feel
free to use the mics too.

00:40:28.220 --> 00:40:29.220
&gt;&gt; Yes.

00:40:29.220 --> 00:40:33.080
Actually, I would like to know a bit of a
limitation of the tool that you just shown

00:40:33.080 --> 00:40:34.080
us.

00:40:34.080 --> 00:40:36.060
Basically, can I reduce some kind of AdSense.

00:40:36.060 --> 00:40:39.480
Did you see what I mean?

00:40:39.480 --> 00:40:43.700
&gt;&gt; HOLEVOET: So, pull out the context from
an email message then to through your ads?

00:40:43.700 --> 00:40:44.700
&gt;&gt; Right, right, right.

00:40:44.700 --> 00:40:49.630
&gt;&gt; HOLEVOET: You technically could.

00:40:49.630 --> 00:40:51.710
Let's just leave it at that right now.

00:40:51.710 --> 00:40:56.670
I can get you the legal answer perhaps if
you give me your email address.

00:40:56.670 --> 00:40:58.330
&gt;&gt; Okay, thanks.

00:40:58.330 --> 00:41:06.020
&gt;&gt; Is it possible I have sort of like a configurable
extractors like, you know, for the gadget

00:41:06.020 --> 00:41:07.070
you made, it's like, you know, at my mailing
list at, you know, your company.com but what

00:41:07.070 --> 00:41:12.369
if, I'm in a different, I have a different
mailing list name, is there some support for

00:41:12.369 --> 00:41:13.589
something like that?

00:41:13.589 --> 00:41:16.570
&gt;&gt; HOLEVOET: Right, so, right now, the answer
is no.

00:41:16.570 --> 00:41:19.640
But we're looking at ways that you could possibly
do something like that.

00:41:19.640 --> 00:41:24.230
So if you have list somewhere that you want
to specify all the mailing list that you'd

00:41:24.230 --> 00:41:28.360
be interested in and matching on, have some
way to specify and extract it that looks at

00:41:28.360 --> 00:41:31.810
that list, but we don't have anything like
that yet.

00:41:31.810 --> 00:41:32.810
&gt;&gt; Thanks.

00:41:32.810 --> 00:41:34.260
&gt;&gt; HOLEVOET: Yup.

00:41:34.260 --> 00:41:35.260
Hey.

00:41:35.260 --> 00:41:36.710
&gt;&gt; Hello, again.

00:41:36.710 --> 00:41:41.880
You mentioned some shared secrets in signing
for so that the, your encryption stuff.

00:41:41.880 --> 00:41:42.880
&gt;&gt; HOLEVOET: Yup.

00:41:42.880 --> 00:41:44.621
&gt;&gt; Do you have any more details about that?

00:41:44.621 --> 00:41:49.180
Like, what sort of encryption, ramification
policy, exploration policy and the keys and...

00:41:49.180 --> 00:41:54.530
&gt;&gt; HOLEVOET: So, if you're concerned with
using our shared secret, you can also RSA,

00:41:54.530 --> 00:41:59.230
so that's probably the best thing to do in
that particular case, so we publish the key

00:41:59.230 --> 00:42:02.190
and you can just use that for all the signing.

00:42:02.190 --> 00:42:03.190
&gt;&gt; Cool.

00:42:03.190 --> 00:42:04.190
Thanks.

00:42:04.190 --> 00:42:05.900
&gt;&gt; HOLEVOET: Yup.

00:42:05.900 --> 00:42:06.900
Okay.

00:42:06.900 --> 00:42:07.900
Questions?

00:42:07.900 --> 00:42:16.050
&gt;&gt; All right, going to your YouTube example,
that's all about what the recipient of the

00:42:16.050 --> 00:42:17.050
email sees.

00:42:17.050 --> 00:42:21.770
What do you have to say about what the authoring
experience might be?

00:42:21.770 --> 00:42:25.430
I mean, obviously, if it say, "Link to a YouTube
URL," it's cut and paste the URL, but...

00:42:25.430 --> 00:42:26.430
&gt;&gt; HOLEVOET: Right.

00:42:26.430 --> 00:42:31.940
&gt;&gt; ...if you're in the Gmail editor what do,
it seems kind of limp.

00:42:31.940 --> 00:42:39.220
&gt;&gt; HOLEVOET: Yeah, so, right now, these are
operating strictly on the recipient side.

00:42:39.220 --> 00:42:43.990
We don't have contextual gadgets for authoring,
maybe we will.

00:42:43.990 --> 00:42:48.060
I don't have anything in particular in mind
of that right now.

00:42:48.060 --> 00:42:49.060
&gt;&gt; Okay.

00:42:49.060 --> 00:42:50.060
&gt;&gt; HOLEVOET: Yeah.

00:42:50.060 --> 00:42:58.250
&gt;&gt; I was wondering if you will be asking the
Android mobile client to include this kind

00:42:58.250 --> 00:42:59.250
of features.

00:42:59.250 --> 00:43:03.960
&gt;&gt; HOLEVOET: Right, so, right now, these won't
work inside of the mobile app.

00:43:03.960 --> 00:43:07.690
I think it would be really cool if they did.

00:43:07.690 --> 00:43:09.590
So, we'll see what we can do.

00:43:09.590 --> 00:43:10.590
Yup?

00:43:10.590 --> 00:43:11.590
&gt;&gt; Hi.

00:43:11.590 --> 00:43:18.880
Does it mean that the gadget is will only
hook the emails inside the inbox or it will

00:43:18.880 --> 00:43:24.839
hook also inside for emails to the other folders
including compose message?

00:43:24.839 --> 00:43:28.859
&gt;&gt; HOLEVOET: So, during composition, it won't
show up.

00:43:28.859 --> 00:43:33.630
But if I go to any other email that I perceived,
it will basically do the matching process.

00:43:33.630 --> 00:43:34.860
&gt;&gt; Including the trash also?

00:43:34.860 --> 00:43:35.860
&gt;&gt; HOLEVOET: Sorry?

00:43:35.860 --> 00:43:39.650
&gt;&gt; Inside the trash, email in the trash, inside
the sent email?

00:43:39.650 --> 00:43:41.270
&gt;&gt; HOLEVOET: It might not show up in the trash.

00:43:41.270 --> 00:43:46.099
Actually, it's a performance thing just because
it seems like a good place to optimize.

00:43:46.099 --> 00:43:50.730
But if you send an email message, you should
see a contextual gadget trigger on that as

00:43:50.730 --> 00:43:52.310
it normally would.

00:43:52.310 --> 00:43:56.280
So, after you sent it, if you go back to your
sent mail and load up one of the emails that

00:43:56.280 --> 00:44:00.590
you've sent, if that would trigger a contextual
gadget that should show up.

00:44:00.590 --> 00:44:04.890
&gt;&gt; Any plan to hook up the gadget for the
compose message also?

00:44:04.890 --> 00:44:10.900
&gt;&gt; HOLEVOET: Not, I mean, there's no particular
plan that I can share right now, so.

00:44:10.900 --> 00:44:12.529
&gt;&gt; All right, thank you.

00:44:12.529 --> 00:44:13.529
&gt;&gt; HOLEVOET: Yup.

00:44:13.529 --> 00:44:18.580
&gt;&gt; Just a quick, I guess, question request,
in the standard built-in ones, can we have

00:44:18.580 --> 00:44:22.440
arbitrary head of match so if I wanted references,
for example because I knew it was an email

00:44:22.440 --> 00:44:26.070
that came initially from me or being tagged
at a certain way for the message ID...

00:44:26.070 --> 00:44:27.070
&gt;&gt; HOLEVOET: Right.

00:44:27.070 --> 00:44:28.200
&gt;&gt; .. that I could, you know, use that as
a filter.

00:44:28.200 --> 00:44:33.349
&gt;&gt; HOLEVOET: Right, so, right now, there is
not, ways to do on an arbitrary header.

00:44:33.349 --> 00:44:36.710
We can certainly look into doing something
like that, and we'd have to figure out the

00:44:36.710 --> 00:44:42.620
right way to message that inside of the scopes
so that the domain administrator knows what

00:44:42.620 --> 00:44:45.650
types of things you're trying to extract.

00:44:45.650 --> 00:44:47.529
&gt;&gt; Yeah, no worries.

00:44:47.529 --> 00:44:53.130
&gt;&gt; So, hi, I was wondering you mentioned GWT
as a tool to write gadgets.

00:44:53.130 --> 00:44:54.130
Having gone through the experience of, from
using GWT for running iGoogle gadgets and

00:44:54.130 --> 00:45:05.000
breaking a few teeth on that, I was wondering
what the, if there's anyone actually written

00:45:05.000 --> 00:45:08.700
gadgets for contextual gadgets in GWT?

00:45:08.700 --> 00:45:12.540
&gt;&gt; HOLEVOET: Yes, I believe that there are
some people here that have actually written

00:45:12.540 --> 00:45:15.609
in contextual gadgets and GWT and can speak
to that, yes.

00:45:15.609 --> 00:45:17.660
Yeah, right on the back.

00:45:17.660 --> 00:45:18.660
&gt;&gt; Excellent.

00:45:18.660 --> 00:45:19.660
Thanks.

00:45:19.660 --> 00:45:20.660
&gt;&gt; HOLEVOET: Yeah, cool.

00:45:20.660 --> 00:45:22.700
&gt;&gt; And by the way, I'm, the header thing would
be great.

00:45:22.700 --> 00:45:23.700
&gt;&gt; HOLEVOET: Yup.

00:45:23.700 --> 00:45:24.700
&gt;&gt; Some header match.

00:45:24.700 --> 00:45:27.460
&gt;&gt; HOLEVOET: Yeah, we've done that feedback
from a bunch of much people, so we'll look

00:45:27.460 --> 00:45:28.460
into that.

00:45:28.460 --> 00:45:29.460
&gt;&gt; Cool.

00:45:29.460 --> 00:45:30.460
&gt;&gt; HOLEVOET: Yeah?

00:45:30.460 --> 00:45:35.060
I guess, that I should do some of the...

00:45:35.060 --> 00:45:37.710
&gt;&gt; How would the oldest handle privacy, right?

00:45:37.710 --> 00:45:43.190
So if my boss who is the controller of the
Google Apps would enforce all users to use

00:45:43.190 --> 00:45:47.760
a specific gadget that would eavesdrop on
all emails and send CCs to him so he can read

00:45:47.760 --> 00:45:49.290
or maybe even trigger on his own name or...

00:45:49.290 --> 00:45:50.290
&gt;&gt; HOLEVOET: Right.

00:45:50.290 --> 00:45:51.640
&gt;&gt; ...or sexual reference, I don't know.

00:45:51.640 --> 00:45:53.190
How would you, should do that?

00:45:53.190 --> 00:45:56.110
&gt;&gt; HOLEVOET: Right, so let me very clear about
this.

00:45:56.110 --> 00:45:59.609
The domain administrator is really the one
that's making the decision about what gadgets

00:45:59.609 --> 00:46:00.750
to install.

00:46:00.750 --> 00:46:06.290
And so, hopefully, your domain administrator
is the right person to be making that decision

00:46:06.290 --> 00:46:07.660
but that's where the decision is being made.

00:46:07.660 --> 00:46:12.290
So Google is not installing any of these on
your domains account and, you know, we're

00:46:12.290 --> 00:46:13.930
not going to match some things like that.

00:46:13.930 --> 00:46:21.000
So your domain administrator should make sure
that they understand what they're doing before

00:46:21.000 --> 00:46:22.369
they click the button.

00:46:22.369 --> 00:46:25.220
&gt;&gt; Okay, I understand.

00:46:25.220 --> 00:46:27.109
&gt;&gt; HOLEVOET: Yeah?

00:46:27.109 --> 00:46:28.109
&gt;&gt; [INDISTINCT].

00:46:28.109 --> 00:46:34.750
&gt;&gt; HOLEVOET: It might have been today or very
recently, yeah.

00:46:34.750 --> 00:46:39.130
So, yes?

00:46:39.130 --> 00:46:46.132
&gt;&gt; Can I use the gadget [INDISTINCT]?

00:46:46.132 --> 00:46:49.440
&gt;&gt; HOLEVOET: So, repeating the question for
the people who are watching the video.

00:46:49.440 --> 00:46:56.060
Can you use the contextual gadget for basically
as a target to drop things from other places?

00:46:56.060 --> 00:46:57.349
So, you could do that.

00:46:57.349 --> 00:47:03.071
I mean, if you're using like HTML5 or something,
you can do anything you can with HTML5 inside

00:47:03.071 --> 00:47:04.071
in one of these gadgets.

00:47:04.071 --> 00:47:06.980
It's basically just a small webpage.

00:47:06.980 --> 00:47:10.200
So you can certainly do that.

00:47:10.200 --> 00:47:13.370
I guess the gadget would have to trigger first
before you could that.

00:47:13.370 --> 00:47:18.180
If you want to do like a gadget in the Gmail
Fnav, you can also do something like that

00:47:18.180 --> 00:47:19.180
too.

00:47:19.180 --> 00:47:20.180
Yeah?

00:47:20.180 --> 00:47:27.130
&gt;&gt; Sorry, right now, the example is using
the webmail of Google Mail.

00:47:27.130 --> 00:47:32.660
If I'm using such software like Outlook, so
and the downloading is through POP3 or any

00:47:32.660 --> 00:47:34.980
kind of protocol like that.

00:47:34.980 --> 00:47:42.849
Would it be possible to add, to point some
text at the end of a mail received according

00:47:42.849 --> 00:47:45.430
to the rules by the rule codes on the widgets?

00:47:45.430 --> 00:47:49.589
&gt;&gt; HOLEVOET: I'm not sure if I understand
your question.

00:47:49.589 --> 00:47:54.560
&gt;&gt; No, basically, let's say that I'm quoting
something which adds a text at the end of

00:47:54.560 --> 00:47:55.560
a mail received.

00:47:55.560 --> 00:47:56.920
&gt;&gt; HOLEVOET: Okay.

00:47:56.920 --> 00:47:59.060
&gt;&gt; And it works on the webmail.

00:47:59.060 --> 00:48:00.060
&gt;&gt; HOLEVOET: Right.

00:48:00.060 --> 00:48:02.920
&gt;&gt; Would it work if I download the mail through
Outlook?

00:48:02.920 --> 00:48:06.410
&gt;&gt; HOLEVOET: So the contextual gadgets not
actually going to change anything about the

00:48:06.410 --> 00:48:09.140
email, it's just going to show up below.

00:48:09.140 --> 00:48:12.460
And so that's, you know, its' going to be
triggered based off of the match in that email

00:48:12.460 --> 00:48:16.109
message and that match is only going to show
up where contextual gadgets are available.

00:48:16.109 --> 00:48:17.109
&gt;&gt; Oh, okay.

00:48:17.109 --> 00:48:18.109
I see.

00:48:18.109 --> 00:48:20.960
&gt;&gt; HOLEVOET: Okay, so I'm going to quickly
go through this live question, or a matter

00:48:20.960 --> 00:48:23.330
of the questions here.

00:48:23.330 --> 00:48:26.670
Does contextual gadget can create Gmail folders?

00:48:26.670 --> 00:48:33.119
So right now, the only interaction with Gmail
itself is displaying at the bottom of these

00:48:33.119 --> 00:48:34.119
email messages.

00:48:34.119 --> 00:48:35.860
It's not actually changing anything in Gmail.

00:48:35.860 --> 00:48:40.230
It's not changing setting, it's not changing,
you know, filters or anything like that.

00:48:40.230 --> 00:48:44.580
So the answer for this one is no.

00:48:44.580 --> 00:48:47.760
Any way to store preferences are saving the
cloud instead.

00:48:47.760 --> 00:48:50.920
So I think in the context of gadgets, you
are saving to the cloud if you save it in

00:48:50.920 --> 00:48:57.290
a gadget, and that would be the user prefs
API that I was talking about before.

00:48:57.290 --> 00:49:01.270
There's documentation on that if anyone is
interested.

00:49:01.270 --> 00:49:07.080
When enabling a third-party gadget [INDISTINCT]
limit, the gadget's access to specific fields.

00:49:07.080 --> 00:49:14.890
So, the domain administrator cannot basically
deny parts of a request from a gadget, so

00:49:14.890 --> 00:49:17.040
it's basically all or nothing, right?

00:49:17.040 --> 00:49:23.280
You can decide to install a gadget that asks
for the site of fields that it's asking for

00:49:23.280 --> 00:49:26.359
or you can, you know, deny access to that
gadget.

00:49:26.359 --> 00:49:30.850
So, if the gadget is asking for every single
field of the email message, it's appropriate

00:49:30.850 --> 00:49:35.750
to sort of wonder what the motivation is for
doing that.

00:49:35.750 --> 00:49:43.080
But, you can't basically do a line of [INDISTINCT]
veto and the reason for that is basically

00:49:43.080 --> 00:49:47.609
what if you eliminate a field that prevents
or that keeps the gadget from working.

00:49:47.609 --> 00:49:51.339
So, now, you can do the one off restrictions.

00:49:51.339 --> 00:49:53.349
It's basically yes or no.

00:49:53.349 --> 00:49:59.890
For apps domains, how can you deploy to a
subset of users or user app out within a domain?

00:49:59.890 --> 00:50:06.300
So right now, you can only deploy to all the
users in a domain and, you know, this is common

00:50:06.300 --> 00:50:11.480
feedback so we're going to look at ways not
only at Google Apps or Gmail contextual gadgets

00:50:11.480 --> 00:50:17.280
can be restricted to certain users but also
everything in Google Apps that's installed

00:50:17.280 --> 00:50:18.300
will be in the marketplace.

00:50:18.300 --> 00:50:21.630
And I think that's it.

00:50:21.630 --> 00:50:25.300
So anymore live questions?

00:50:25.300 --> 00:50:27.140
Yeah?

00:50:27.140 --> 00:50:33.490
&gt;&gt; [INDISTINCT]
&gt;&gt; HOLEVOET: Okay, so this is basically the

00:50:33.490 --> 00:50:37.670
same as any other scope change inside of a
Google Apps Marketplace application.

00:50:37.670 --> 00:50:42.609
So you would update your manifest and basically,
you know, remember the scopes or edit scopes

00:50:42.609 --> 00:50:47.190
or add scopes, whatever it is that you're
interested in doing in particular.

00:50:47.190 --> 00:50:53.690
And then, the domain administrator would need
to go in and basically re-approve that change

00:50:53.690 --> 00:50:56.780
before it could take effect.

00:50:56.780 --> 00:50:57.780
Yup?

00:50:57.780 --> 00:50:58.780
Yeah?

00:50:58.780 --> 00:51:02.230
&gt;&gt; How long do you [INDISTINCT] with the gmail.com?

00:51:02.230 --> 00:51:04.820
&gt;&gt; HOLEVOET: Yes, I was waiting for something
to ask me that question.

00:51:04.820 --> 00:51:08.690
So, unfortunately, we don't have a specific
timeline on when this would be available to

00:51:08.690 --> 00:51:10.070
regular Gmail users.

00:51:10.070 --> 00:51:13.670
There are some things we have to think about
before that could happen.

00:51:13.670 --> 00:51:18.610
And, unfortunately, I don't have a timeline,
but, you know, I'm really excited about it

00:51:18.610 --> 00:51:20.120
and I think it would be great to roll out
to everyone, but that's just my opinion, so

00:51:20.120 --> 00:51:21.120
we'll see.

00:51:21.120 --> 00:51:22.120
&gt;&gt; Going back to this question, did you, if
you change the scope and then did you guys

00:51:22.120 --> 00:51:29.289
catch the apps or just disable the apps or
[INDISTINCT]?

00:51:29.289 --> 00:51:33.109
&gt;&gt; HOLEVOET: Right.

00:51:33.109 --> 00:51:39.897
&gt;&gt; Do some change in the application; the
administrator will be around to update it

00:51:39.897 --> 00:51:40.897
for a week.

00:51:40.897 --> 00:51:44.520
&gt;&gt; HOLEVOET: Right, so in the case of contextual
gadgets and one of the people in the audience

00:51:44.520 --> 00:51:45.760
can correct me if I'm wrong in this.

00:51:45.760 --> 00:51:49.380
But I believe if you change the scopes requested
by a contextual gadget, it would actually

00:51:49.380 --> 00:52:08.040
disable the contextual gadget, is that correct?

00:52:08.040 --> 00:52:09.040
&gt;&gt; Yeah, [INDISTINCT].

00:52:09.040 --> 00:52:10.040
&gt;&gt; HOLEVOET: Yeah.

00:52:10.040 --> 00:52:11.040
Yeah.

00:52:11.040 --> 00:52:12.040
&gt;&gt; If you have an existing [INDISTINCT] not
exactly [INDISTINCT]

00:52:12.040 --> 00:52:13.040
&gt;&gt; HOLEVOET: Right.

00:52:13.040 --> 00:52:14.040
&gt;&gt; So you [INDISTINCT]
&gt;&gt; HOLEVOET: Right.

00:52:14.040 --> 00:52:15.040
&gt;&gt; [INDISTINCT]
&gt;&gt; HOLEVOET: Right.

00:52:15.040 --> 00:52:16.650
So the best way to do this is to basically
like adding a new feature.

00:52:16.650 --> 00:52:20.790
So if you add a new feature to a Google Apps
Marketplace app, the other feature also going

00:52:20.790 --> 00:52:25.440
to work, the new feature is just not going
to be turned on yet.

00:52:25.440 --> 00:52:26.440
Okay.

00:52:26.440 --> 00:52:29.160
Well, thank you all for coming.

00:52:29.160 --> 00:52:33.140
And, yeah.

