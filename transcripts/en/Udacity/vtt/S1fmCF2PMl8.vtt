WEBVTT
Kind: captions
Language: en

00:00:00.330 --> 00:00:03.980
So protecting processes from
each other and protecting

00:00:03.980 --> 00:00:08.490
the operating system from untrusted
process code, same exact mechanism.

00:00:08.490 --> 00:00:11.960
The page table, when you're running in
user mode, doesn't allow you to go to

00:00:11.960 --> 00:00:14.795
any physical pages that belong
to the operating system.

00:00:14.795 --> 00:00:18.140
It's really done through this memory
management that we just talked about.

00:00:18.140 --> 00:00:21.160
The memory management
is important enough

00:00:21.160 --> 00:00:24.210
that we actually hardware
wired support for it.

00:00:24.210 --> 00:00:27.890
Typically, you have what is called
a memory management unit, or MMU,

00:00:27.890 --> 00:00:31.910
that helps you take those logical or
virtual addresses and

00:00:31.910 --> 00:00:35.460
resolve those into physical
addresses efficiently.

00:00:35.460 --> 00:00:40.580
Except we had to go through the page
table then to access memory location,

00:00:40.580 --> 00:00:44.280
you have to access page table entry and
that adds overhead.

00:00:44.280 --> 00:00:48.306
So the hardware actually can store
some of that in things called TLBs, or

00:00:48.306 --> 00:00:52.002
translation lookaside buffers,
that are associated memory that

00:00:52.002 --> 00:00:55.080
allows you to do this
mapping fairly efficiently.

00:00:55.080 --> 00:00:59.410
Memory management is translation,
and isolation, what you can access,

00:00:59.410 --> 00:01:01.770
and all that,
there's hardware support for it.

00:01:01.770 --> 00:01:05.120
So there's another interesting thing
that we should be able to think

00:01:05.120 --> 00:01:05.870
about here.

00:01:05.870 --> 00:01:10.320
So we have these units we call pages or
frames, and

00:01:10.320 --> 00:01:12.840
we have this table we call a page table.

00:01:12.840 --> 00:01:15.540
And we said we go through
a page table entry

00:01:15.540 --> 00:01:19.770
to see where our logical page
currently lives in physical memory.

00:01:19.770 --> 00:01:23.140
So that page table entry tells
us where in physical memories.

00:01:23.140 --> 00:01:26.130
But we can have some other
information along with that.

00:01:26.130 --> 00:01:31.026
We can, for example, have whether this
page that we're trying to access is for

00:01:31.026 --> 00:01:33.876
reading only, is it for
writing, or it's for

00:01:33.876 --> 00:01:38.600
execution only in case it happens
to contain instructions or a code.

00:01:38.600 --> 00:01:44.380
So you can actually have this kind of
protection information on these pages,

00:01:44.380 --> 00:01:49.020
in the page table entry, that can limit
the type of memory access you can do.

00:01:49.020 --> 00:01:52.980
So we said protection sort of, now we
are saying there are two parts to it.

00:01:52.980 --> 00:01:57.310
First part is, where in memory
a given process is allowed to go.

00:01:57.310 --> 00:02:01.680
So where can its logical addresses
be translated to in physical memory.

00:02:01.680 --> 00:02:06.320
But now we are saying another level of
protection is, in what manner can it

00:02:06.320 --> 00:02:10.430
access, even if it's allowed to access
a given location in physical memory.

00:02:10.430 --> 00:02:11.750
Is it reading only?

00:02:11.750 --> 00:02:13.150
Is it writing only?

00:02:13.150 --> 00:02:14.670
Is it execution and things like that?

00:02:14.670 --> 00:02:19.300
So the way we do that is in the page
table entries we keep this information,

00:02:19.300 --> 00:02:23.350
this protection information about the
ways in which memory can be accessed.

00:02:23.350 --> 00:02:27.240
And that is also used when you're
trying to do, let's say store, and

00:02:27.240 --> 00:02:30.030
the target address is write protected.

00:02:30.030 --> 00:02:30.952
You can't do that,

00:02:30.952 --> 00:02:34.109
that instruction would not be allowed
to go through by the hardware.

