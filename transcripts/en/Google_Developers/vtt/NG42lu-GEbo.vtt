WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:01:00.530
[MUSIC PLAYING]

00:01:00.530 --> 00:01:03.470
MALE SPEAKER 1: Shanghai GDG
is a very interesting

00:01:03.470 --> 00:01:04.440
developer community.

00:01:04.440 --> 00:01:05.269
FEMALE SPEAKER 1: I'm
glad somebody

00:01:05.269 --> 00:01:06.530
has asked this question.

00:01:06.530 --> 00:01:08.340
MALE SPEAKER 2: This is where
the magic happens.

00:01:08.340 --> 00:01:09.323
FEMALE SPEAKER 2: This is
primarily a question and

00:01:09.323 --> 00:01:10.920
answer show, so if any
of you out there

00:01:10.920 --> 00:01:12.170
would like to ask questions.

00:01:16.390 --> 00:01:18.950
PETE LAPAGE: Well, welcome
everybody.

00:01:18.950 --> 00:01:22.160
Kind of a fun day, a special
day for the Chrome Apps

00:01:22.160 --> 00:01:23.350
Hangout today.

00:01:23.350 --> 00:01:28.720
We have many of our Chrome
folks here, in

00:01:28.720 --> 00:01:30.000
Mountain View, with us.

00:01:30.000 --> 00:01:33.070
To my right, we've
got Paul Kinlan.

00:01:33.070 --> 00:01:34.520
PAUL KINLAN: Hello.

00:01:34.520 --> 00:01:36.350
PETE LAPAGE: Paul wasn't with
us last week but is going to

00:01:36.350 --> 00:01:37.330
be joining us regularly.

00:01:37.330 --> 00:01:37.670
Paul?

00:01:37.670 --> 00:01:38.920
PAUL KINLAN: Yeah, I
was on vacation.

00:01:38.920 --> 00:01:42.470
So I had a nice time off,
relaxed in the British sun.

00:01:42.470 --> 00:01:44.740
PETE LAPAGE: Ooh, the British
sun, is that different than

00:01:44.740 --> 00:01:48.930
the Brazilian sun or
the American sun?

00:01:48.930 --> 00:01:49.480
PAUL KINLAN: It's
a little bit--

00:01:49.480 --> 00:01:51.660
RENATO DIAS: Definitely.

00:01:51.660 --> 00:01:53.390
PETE LAPAGE: Do you want
to introduce yourself?

00:01:53.390 --> 00:01:54.910
PAUL KINLAN: Yes, so
I'm Paul Kinlan.

00:01:54.910 --> 00:01:58.250
I'm a developer at Google,
working on Chrome Apps and

00:01:58.250 --> 00:01:59.070
also Web Intents.

00:01:59.070 --> 00:02:00.890
I have to keep saying this
every single time I do a

00:02:00.890 --> 00:02:01.580
presentation.

00:02:01.580 --> 00:02:03.360
PETE LAPAGE: I thought you
weren't allowed to say Web

00:02:03.360 --> 00:02:04.410
Intents anymore though?

00:02:04.410 --> 00:02:06.170
PAUL KINLAN: Oh yeah, It's
Stnetni Bew, isn't it?

00:02:06.170 --> 00:02:06.420
PETE LAPAGE: Yes.

00:02:06.420 --> 00:02:07.730
PAUL KINLAN: We say Stnetni
Bew, which is Web Intents

00:02:07.730 --> 00:02:10.190
backwards, but anyway.

00:02:10.190 --> 00:02:11.090
Yeah, I'm Paul Kinlan.

00:02:11.090 --> 00:02:12.190
I'm developer advocate
at Google.

00:02:12.190 --> 00:02:14.110
I'm just here in Mountain
View for the week.

00:02:14.110 --> 00:02:15.030
PETE LAPAGE: Awesome.

00:02:15.030 --> 00:02:16.640
PAUL KINLAN: So yeah, I thought
I'd come and say hello

00:02:16.640 --> 00:02:17.495
to all you guys.

00:02:17.495 --> 00:02:19.690
And let's talk about some
Chrome Apps things.

00:02:19.690 --> 00:02:20.480
PETE LAPAGE: Cool Awesome.

00:02:20.480 --> 00:02:22.360
And we also have Renato.

00:02:22.360 --> 00:02:24.890
RENATO DIAS: Yeah, I'm a
developer program engineer for

00:02:24.890 --> 00:02:25.490
Chrome Apps.

00:02:25.490 --> 00:02:29.470
And this is the second session
I've participated in.

00:02:29.470 --> 00:02:31.860
And hopefully, we'll
have several

00:02:31.860 --> 00:02:33.680
others, many other APIs.

00:02:33.680 --> 00:02:35.440
PAUL KINLAN: Apparently, I'm
just hear for the banter,

00:02:35.440 --> 00:02:37.790
which when I was asked to come
along for this, I said, why am

00:02:37.790 --> 00:02:39.690
I going to be a Star Wars
character, one of those big

00:02:39.690 --> 00:02:40.660
woolly mammoths?

00:02:40.660 --> 00:02:43.330
And then I realized I'm here
for the funny conversation.

00:02:43.330 --> 00:02:44.930
PETE LAPAGE: Yes, well,
there's that, too.

00:02:44.930 --> 00:02:48.110
PAUL KINLAN: I've been preparing
that joke all week.

00:02:48.110 --> 00:02:49.030
PETE LAPAGE: Thanks very much.

00:02:49.030 --> 00:02:50.900
We'll be here next week, too.

00:02:50.900 --> 00:02:53.480
We also have Paul Lewis
joining us.

00:02:53.480 --> 00:02:55.845
Paul, do you want to say, hi,
and introduce yourself?

00:02:55.845 --> 00:02:57.480
PAUL LEWIS: Yeah,
hi, from London.

00:02:57.480 --> 00:03:00.050
I'm Paul Lewis, a developer
programs engineer also on the

00:03:00.050 --> 00:03:01.950
Chrome team, Chrome Apps.

00:03:01.950 --> 00:03:04.710
And I also look at GPU and
performance stuff as well, but

00:03:04.710 --> 00:03:07.530
primarily today, Chrome Apps.

00:03:07.530 --> 00:03:09.000
PETE LAPAGE: So I'm
Pete LaPage.

00:03:09.000 --> 00:03:11.140
I'm a developer advocate on the
Chrome team, working on

00:03:11.140 --> 00:03:13.590
Chrome Apps and Chrome Mobile
and all sorts of really cool

00:03:13.590 --> 00:03:14.900
Chrome stuff.

00:03:14.900 --> 00:03:17.700
We've got a pretty exciting
show this week.

00:03:17.700 --> 00:03:20.330
Last week, we gave you the
introduction to Chrome Apps.

00:03:20.330 --> 00:03:22.130
We talked about, hey,
what are they?

00:03:22.130 --> 00:03:22.990
How do they work?

00:03:22.990 --> 00:03:24.540
We showed you some samples.

00:03:24.540 --> 00:03:27.040
We showed you some cool stuff
on how you can get started.

00:03:27.040 --> 00:03:29.920
This week we're going to dive
into some of the recent

00:03:29.920 --> 00:03:35.020
changes as well as we're going
to build the Hello World and

00:03:35.020 --> 00:03:39.270
take it into a little bit of a
Hello Galaxy sample and show

00:03:39.270 --> 00:03:42.420
you some of the things that
are available with the

00:03:42.420 --> 00:03:44.890
Windowing API.

00:03:44.890 --> 00:03:47.100
Got to refer back to
your wookie joke.

00:03:47.100 --> 00:03:49.850
Well, I guess it wasn't a wookie
joke, but banter joke.

00:03:49.850 --> 00:03:51.230
PAUL KINLAN: I was looking
at Wookiepedia today.

00:03:51.230 --> 00:03:52.360
PETE LAPAGE: Oh, there you go.

00:03:52.360 --> 00:03:53.080
PAUL KINLAN: Just
to make sure.

00:03:53.080 --> 00:03:55.530
I just realized as well, looking
at the camera as well,

00:03:55.530 --> 00:03:58.010
I'm the only one who is
color coordinated.

00:03:58.010 --> 00:04:01.020
I have the blue Chrome
logo as my T-shirt.

00:04:01.020 --> 00:04:03.430
PETE LAPAGE: Well, I've got
the blue Chrome logo.

00:04:03.430 --> 00:04:04.680
I've got a stripe.

00:04:07.560 --> 00:04:09.700
Next time, I'll try better.

00:04:09.700 --> 00:04:13.234
So with that, why don't we pass
it over to Renato, who is

00:04:13.234 --> 00:04:15.170
going to talk about some of the
recent changes this week.

00:04:15.170 --> 00:04:19.529
RENATO DIAS: Yeah, this week
we had a breaking change on

00:04:19.529 --> 00:04:21.370
the way you launch
a new window.

00:04:21.370 --> 00:04:26.280
And previously, you launched
a window using the Chrome

00:04:26.280 --> 00:04:30.110
experimental app API.

00:04:30.110 --> 00:04:33.740
And this is, as it says in
the menu, experimental.

00:04:33.740 --> 00:04:38.430
And after we had a few weeks
of feedback from you, we

00:04:38.430 --> 00:04:42.670
transformed this API to
an app runtime API.

00:04:42.670 --> 00:04:44.280
And it's not experimental
anymore.

00:04:44.280 --> 00:04:48.200
So you should not expect that
many changes on this API

00:04:48.200 --> 00:04:49.360
practical area.

00:04:49.360 --> 00:04:52.260
PETE LAPAGE: So that's
a really good point.

00:04:52.260 --> 00:04:54.990
Many of these APIs right now
are under the experimental,

00:04:54.990 --> 00:04:57.700
which means they're
going to change.

00:04:57.700 --> 00:05:00.130
And so, when they're going to
change, you just sort of have

00:05:00.130 --> 00:05:01.670
to be a little bit
aware of that.

00:05:01.670 --> 00:05:03.510
And at some point, they'll
come out of that

00:05:03.510 --> 00:05:04.380
experimental state.

00:05:04.380 --> 00:05:05.110
RENATO DIAS: Exactly.

00:05:05.110 --> 00:05:06.380
PETE LAPAGE: And what does it
mean when they come out of

00:05:06.380 --> 00:05:08.968
that experimental state?

00:05:08.968 --> 00:05:11.020
PAUL KINLAN: It means they're
relatively set in stone.

00:05:11.020 --> 00:05:12.590
Obviously nothing is completely
set in stone.

00:05:12.590 --> 00:05:14.960
But the general idea is
that we're pretty

00:05:14.960 --> 00:05:15.960
happy with this API.

00:05:15.960 --> 00:05:18.420
We've got hold of the developer
feedback, and we're

00:05:18.420 --> 00:05:20.760
pretty confident that it's not
going to change that much.

00:05:20.760 --> 00:05:22.420
So it's like a little bit more
confidence that it's going to

00:05:22.420 --> 00:05:26.430
be stable for the foreseeable
future or the near foreseeable

00:05:26.430 --> 00:05:29.100
future at least.

00:05:29.100 --> 00:05:31.980
RENATO DIAS: And talking
about window, we

00:05:31.980 --> 00:05:34.090
also have a new feature.

00:05:34.090 --> 00:05:36.120
It's not a breaking change.

00:05:36.120 --> 00:05:41.580
But it's really cool, indeed,
where you can specify that

00:05:41.580 --> 00:05:44.880
your window is Chromeless.

00:05:44.880 --> 00:05:47.540
Chromeless means it
has no title bar.

00:05:47.540 --> 00:05:52.960
And you have control of all the
UI of your application.

00:05:52.960 --> 00:05:58.734
For this specifically, it is
still being developed.

00:05:58.734 --> 00:06:00.840
PETE LAPAGE: So if it's under
development, it's probably

00:06:00.840 --> 00:06:02.030
under the experimental API?

00:06:02.030 --> 00:06:03.580
RENATO DIAS: Exactly.

00:06:03.580 --> 00:06:05.040
PETE LAPAGE: So we need
to remember that.

00:06:05.040 --> 00:06:05.870
It may change.

00:06:05.870 --> 00:06:07.160
And we want your feedback.

00:06:07.160 --> 00:06:11.210
If it's under experimental,
we want to hear from you.

00:06:11.210 --> 00:06:12.290
RENATO DIAS: Yeah, exactly.

00:06:12.290 --> 00:06:16.940
Please, for all the APIs,
specifically for experimental

00:06:16.940 --> 00:06:21.420
APIs, go to the Chromium
Apps forum.

00:06:21.420 --> 00:06:22.160
We are there.

00:06:22.160 --> 00:06:24.030
We answer any questions there.

00:06:24.030 --> 00:06:26.890
And we really want to
hear your feedback.

00:06:26.890 --> 00:06:32.896
For this frameless window, what
it means to be frameless,

00:06:32.896 --> 00:06:36.760
it means basically for comparing
to the actual framed

00:06:36.760 --> 00:06:40.060
window, we have a title bar, and
we have Close buttons and

00:06:40.060 --> 00:06:41.340
Minimize buttons.

00:06:41.340 --> 00:06:44.390
For the frameless windows, it's
just a window where you

00:06:44.390 --> 00:06:47.300
draw on any part of it.

00:06:47.300 --> 00:06:52.210
It brings a problem, because you
need part of your window

00:06:52.210 --> 00:06:56.410
to be draggable, and you also
need a close button.

00:06:56.410 --> 00:07:04.710
And we all are working on this,
specifically on the

00:07:04.710 --> 00:07:09.080
draggable and on the
default title bar.

00:07:09.080 --> 00:07:12.790
But for now, you can already
create a frameless window on

00:07:12.790 --> 00:07:13.610
some platforms.

00:07:13.610 --> 00:07:18.110
And Paul Lewis will show
you an example of that.

00:07:18.110 --> 00:07:20.425
Paul?

00:07:20.425 --> 00:07:23.510
PETE LAPAGE: Paul, why don't
you start off with a little

00:07:23.510 --> 00:07:26.040
bit of a Hello World.

00:07:26.040 --> 00:07:28.110
PAUL LEWIS: Before I do that,
I'm going to just quickly show

00:07:28.110 --> 00:07:31.620
you this frameless window,
which I've got open here.

00:07:31.620 --> 00:07:36.260
So this is on the Chrome app
samples GitHub repro.

00:07:36.260 --> 00:07:38.040
So get the source code
for this right now.

00:07:38.040 --> 00:07:41.420
PETE LAPAGE: So that's the
GitHub repro, which we've got

00:07:41.420 --> 00:07:45.674
a URL for that, which
we'll show in a sec.

00:07:45.674 --> 00:07:48.550
PAUL LEWIS: Yeah, And you see
that the window that it's

00:07:48.550 --> 00:07:51.670
launched has nothing other
than the content.

00:07:51.670 --> 00:07:53.430
So it's exactly as
Renato said.

00:07:53.430 --> 00:07:54.100
We haven't got any
close buttons.

00:07:54.100 --> 00:07:55.970
We haven't got anything else.

00:07:55.970 --> 00:08:00.490
And if I check this box over
here, it introduces a title

00:08:00.490 --> 00:08:02.240
bar, which means I can
now drag this around.

00:08:02.240 --> 00:08:03.860
I can't drag using
anything else.

00:08:03.860 --> 00:08:07.480
We have top and bottom.

00:08:07.480 --> 00:08:09.725
PETE LAPAGE: Now are
those customizable?

00:08:09.725 --> 00:08:12.810
PAUL LEWIS: Yeah, I believe
they're completely within the

00:08:12.810 --> 00:08:15.580
developer's control as to what
they want to put there.

00:08:15.580 --> 00:08:16.625
PETE LAPAGE: Very cool.

00:08:16.625 --> 00:08:17.890
PAUL LEWIS: Yeah, total
control over

00:08:17.890 --> 00:08:20.000
how your window looks.

00:08:20.000 --> 00:08:21.940
And then a close
button as well.

00:08:21.940 --> 00:08:24.540
So that's a quick
look at that.

00:08:24.540 --> 00:08:25.920
PAUL KINLAN: They look like
the widgets, don't they?

00:08:25.920 --> 00:08:29.780
Do you know, like the little
notepad widgets with all the

00:08:29.780 --> 00:08:30.972
little stickies and all
that type of stuff.

00:08:30.972 --> 00:08:32.659
It's kind of cool the things
that you could do with that.

00:08:32.659 --> 00:08:34.650
It's pretty cool, I think.

00:08:34.650 --> 00:08:35.100
PAUL LEWIS: Cool.

00:08:35.100 --> 00:08:39.320
So what I'm going to do is I was
just going to go through

00:08:39.320 --> 00:08:41.919
the process of creating
Hello World.

00:08:41.919 --> 00:08:44.460
And so you guys hopefully
can see what

00:08:44.460 --> 00:08:45.750
I've got on my screen.

00:08:45.750 --> 00:08:47.500
And what I'm going to do is
I'm going to step through

00:08:47.500 --> 00:08:50.970
creating, as I said,
a Hello World app.

00:08:50.970 --> 00:08:53.200
I just talk through the
various parts of it.

00:08:53.200 --> 00:08:54.900
Guys, if you've got any
questions as I'm going, just

00:08:54.900 --> 00:08:56.480
feel free to shout.

00:08:56.480 --> 00:08:59.350
So the first thing that we
need is a manifest, which

00:08:59.350 --> 00:09:04.830
basically tells Chrome about
the app, thus a JSON file.

00:09:04.830 --> 00:09:06.830
So we'll start out with that.

00:09:06.830 --> 00:09:09.710
And we will call it
manifest.json.

00:09:09.710 --> 00:09:11.510
We need a "t" on the
end of that.

00:09:11.510 --> 00:09:13.350
PETE LAPAGE: I kind of feel like
we should be doing the

00:09:13.350 --> 00:09:15.530
Muppet thing.

00:09:15.530 --> 00:09:18.640
We're the old guys, sitting up
on the top of the thing with

00:09:18.640 --> 00:09:21.080
Muppets and making the
crazy comments.

00:09:21.080 --> 00:09:23.680
PAUL LEWIS: I think you guys
would make fantastic Muppets,

00:09:23.680 --> 00:09:25.850
for what it's worth.

00:09:25.850 --> 00:09:26.920
PAUL KINLAN: I was going to
try and do a Fozzy Bear

00:09:26.920 --> 00:09:28.420
impression.

00:09:28.420 --> 00:09:29.463
Awww!

00:09:29.463 --> 00:09:29.836
Sorry.

00:09:29.836 --> 00:09:31.810
[LAUGHTER]

00:09:31.810 --> 00:09:34.325
PETE LAPAGE: Paul, why
don't you keep going.

00:09:34.325 --> 00:09:35.650
PAUL KINLAN: We'll be quiet.

00:09:35.650 --> 00:09:39.200
PETE LAPAGE: The peanut gallery
will now shut up.

00:09:39.200 --> 00:09:41.000
PAUL LEWIS: So far, I've
got two properties.

00:09:41.000 --> 00:09:43.580
And the manifest version is what
tells Chrome that this is

00:09:43.580 --> 00:09:46.890
going to be a packaged
app, Version 2.

00:09:46.890 --> 00:09:50.179
Version 1, which is the next
property that I've got, it

00:09:50.179 --> 00:09:52.610
actually says this is the
version of the app.

00:09:52.610 --> 00:09:56.950
So if you update that to 1or
1.1 or something like that,

00:09:56.950 --> 00:09:58.990
that's what you put there.

00:09:58.990 --> 00:10:03.230
And the name of the app-- let me
put that in keys-- which is

00:10:03.230 --> 00:10:05.750
going to be Hello World.

00:10:08.550 --> 00:10:10.700
We talked about this
last time.

00:10:10.700 --> 00:10:16.270
We tell Chrome that we want
to run this as an app.

00:10:16.270 --> 00:10:18.970
And the background script
that we want to

00:10:18.970 --> 00:10:23.904
run is going to be--

00:10:23.904 --> 00:10:26.370
get this right--

00:10:26.370 --> 00:10:27.590
main.js.

00:10:27.590 --> 00:10:31.960
And this is the script that
runs in the background.

00:10:31.960 --> 00:10:34.770
It's like the hub of all our
app's communication.

00:10:34.770 --> 00:10:36.910
So it's what's actually going
to be responsible for

00:10:36.910 --> 00:10:39.160
launching the windows.

00:10:39.160 --> 00:10:43.130
It would be listening for the
on-launched event, which is

00:10:43.130 --> 00:10:46.700
the one that Renato just
told you has changed.

00:10:46.700 --> 00:10:48.140
So this is the manifest.

00:10:48.140 --> 00:10:50.190
And the next file that
we create is

00:10:50.190 --> 00:10:50.850
going to be this main.js.

00:10:50.850 --> 00:10:52.200
PETE LAPAGE: Now, can I just
ask a quick question?

00:10:52.200 --> 00:10:54.100
You said it has to be main.js.

00:10:54.100 --> 00:10:59.270
Can it be like pete.js or
fred.js, as long as it's just

00:10:59.270 --> 00:11:00.660
something .js?

00:11:00.660 --> 00:11:05.145
PAUL LEWIS: You're telling
Chrome here what the script is

00:11:05.145 --> 00:11:07.370
that you want to use as
the background script.

00:11:07.370 --> 00:11:08.720
So you can call it anything
you like.

00:11:08.720 --> 00:11:11.020
Conventions says it might
be something like main.

00:11:11.020 --> 00:11:13.700
PETE LAPAGE: Main, maybe app.js,
something like that.

00:11:13.700 --> 00:11:13.900
PAUL LEWIS: Exactly.

00:11:13.900 --> 00:11:16.560
Something that is indicative
of the role

00:11:16.560 --> 00:11:18.100
it's playing, I guess.

00:11:18.100 --> 00:11:19.060
So new file.

00:11:19.060 --> 00:11:20.400
PAUL KINLAN: And I'd say the
really cool thing there as

00:11:20.400 --> 00:11:23.130
well is you can actually have
multiple main files in that

00:11:23.130 --> 00:11:24.750
list as well.

00:11:24.750 --> 00:11:26.130
So you can break up your
applications--

00:11:26.130 --> 00:11:26.980
PETE LAPAGE: Oh, cool!

00:11:26.980 --> 00:11:29.060
Yeah, and because you're not
actually pulling files down

00:11:29.060 --> 00:11:33.030
over the internet, there's no
latency or delay or anything,

00:11:33.030 --> 00:11:35.340
it's just like that.

00:11:35.340 --> 00:11:36.240
PAUL KINLAN: Yeah.

00:11:36.240 --> 00:11:38.070
PAUL LEWIS: So this is
actually an array.

00:11:38.070 --> 00:11:40.410
So it's just an array with
a single item in it.

00:11:40.410 --> 00:11:45.020
So the main.js, as I say, this
is the hook of the app.

00:11:45.020 --> 00:11:48.900
This is the thing that Chrome is
running in the background.

00:11:48.900 --> 00:11:51.900
So the first thing we want to do
is we want to-- and this on

00:11:51.900 --> 00:11:56.730
the new namespace, which
is the new API, the

00:11:56.730 --> 00:11:58.510
chrome.app.runtime.

00:11:58.510 --> 00:12:04.060
And we want to attach a listener
to the on-launched

00:12:04.060 --> 00:12:06.940
event, which is what we want
Chrome to do whenever we

00:12:06.940 --> 00:12:08.560
actually kick off the app.

00:12:08.560 --> 00:12:09.850
So here we go.

00:12:09.850 --> 00:12:11.340
And I throw a function
in there.

00:12:11.340 --> 00:12:13.670
That always works.

00:12:13.670 --> 00:12:18.900
And inside that, we're going
to say, chome.app.window,

00:12:18.900 --> 00:12:22.310
which is one of our new APIs.

00:12:22.310 --> 00:12:24.130
Create, and we want
to create--

00:12:24.130 --> 00:12:27.460
the first thing we do is we tell
which HTML file we want

00:12:27.460 --> 00:12:28.680
it to load.

00:12:28.680 --> 00:12:30.930
And then we give it an object
with a load of properties

00:12:30.930 --> 00:12:32.745
there which specify
things like width.

00:12:35.290 --> 00:12:38.820
I won't add it to this, but you
could, if you wanted to,

00:12:38.820 --> 00:12:42.270
add the new frame None, which
is exactly how you get that

00:12:42.270 --> 00:12:43.770
frameless window.

00:12:43.770 --> 00:12:46.455
So if you want to create a
frameless window, you add the

00:12:46.455 --> 00:12:50.557
frame None property to when you
create a window, and that

00:12:50.557 --> 00:12:52.700
will let you do that.

00:12:52.700 --> 00:12:54.980
So now I've got a main.js
and the manifest.

00:12:54.980 --> 00:12:57.580
But the last thing I need at
this stage is the index, which

00:12:57.580 --> 00:13:01.090
is going to be what we actually
try and load up.

00:13:01.090 --> 00:13:02.990
PETE LAPAGE: Now again,
you can use any

00:13:02.990 --> 00:13:04.110
file name you want.

00:13:04.110 --> 00:13:05.320
You don't have to
call it Index.

00:13:05.320 --> 00:13:07.230
You could call it,
MyMainApp.html.

00:13:09.782 --> 00:13:10.470
PAUL LEWIS: Exactly.

00:13:10.470 --> 00:13:12.875
And I'm just making life
simple for myself.

00:13:12.875 --> 00:13:14.515
I'm just going to call
it, say, Hello World.

00:13:17.940 --> 00:13:18.870
So that's it.

00:13:18.870 --> 00:13:20.170
That's about all you
need to actually

00:13:20.170 --> 00:13:21.610
create a packaged app.

00:13:21.610 --> 00:13:23.620
So hopefully now, if
I go over here--

00:13:23.620 --> 00:13:26.170
and I'm in Canary.

00:13:26.170 --> 00:13:30.460
I've enabled the experimental
APIs and all those kinds of

00:13:30.460 --> 00:13:31.630
things we talked about
last time.

00:13:31.630 --> 00:13:34.200
And you can see, I've got Hello
World here that I'm

00:13:34.200 --> 00:13:35.790
going to try and
load unpacked.

00:13:35.790 --> 00:13:39.946
And all being well,
it's added itself.

00:13:39.946 --> 00:13:40.430
Yay!

00:13:40.430 --> 00:13:43.770
So now, if I go over here and
I click on this, I get my

00:13:43.770 --> 00:13:47.530
window with Hello World in.

00:13:47.530 --> 00:13:48.490
So that's all working.

00:13:48.490 --> 00:13:49.290
That's exactly--

00:13:49.290 --> 00:13:51.690
PETE LAPAGE: And it opens the
size that you said that you

00:13:51.690 --> 00:13:55.310
want it to open because you
didn't say No Frame.

00:13:55.310 --> 00:13:57.030
It still got the
normal things.

00:13:57.030 --> 00:13:59.640
And you can drag it around, just
like you normally would

00:13:59.640 --> 00:14:01.560
any other application
window, right?

00:14:01.560 --> 00:14:02.360
PAUL LEWIS: Exactly.

00:14:02.360 --> 00:14:05.890
So at this stage, it's like
these are almost things that

00:14:05.890 --> 00:14:08.726
you'd expect from a web
app so that the

00:14:08.726 --> 00:14:10.155
window is slightly different.

00:14:10.155 --> 00:14:13.650
But one of the things that you
can do, we mentioned before,

00:14:13.650 --> 00:14:17.020
is the Windowing API, which is
new controls that you've never

00:14:17.020 --> 00:14:19.590
had before for handling
windows.

00:14:19.590 --> 00:14:21.130
So I'm going to close
this down.

00:14:21.130 --> 00:14:23.110
And I'm going to go
back to my source.

00:14:23.110 --> 00:14:25.380
I'm going to add in a button.

00:14:25.380 --> 00:14:29.100
And I'm going to give it
something descriptive, because

00:14:29.100 --> 00:14:30.920
I'm helpful like that.

00:14:30.920 --> 00:14:34.662
And I'm going to make
mention of a script.

00:14:34.662 --> 00:14:37.360
And I'm just going to
call this app.js.

00:14:37.360 --> 00:14:39.160
Again, you don't have
to call it--

00:14:39.160 --> 00:14:42.260
PETE LAPAGE: So why not just
put the script inline?

00:14:42.260 --> 00:14:43.490
PAUL LEWIS: Now, we will
talk about this.

00:14:43.490 --> 00:14:45.240
[LAUGHTER]

00:14:45.240 --> 00:14:49.400
PAUL LEWIS: I'm glad you brought
it up now, though.

00:14:49.400 --> 00:14:51.025
There are Content Security
Policies.

00:14:51.025 --> 00:14:54.050
There are restrictions
on scripts.

00:14:54.050 --> 00:14:57.980
And we'll talk about this
in a little bit.

00:14:57.980 --> 00:15:00.840
One of the restrictions right
now is that you can't put

00:15:00.840 --> 00:15:02.350
inline scripts in place.

00:15:02.350 --> 00:15:06.540
This is supposed to protect your
app from injections and

00:15:06.540 --> 00:15:08.690
cross-site scripts and those
kinds of attacks.

00:15:08.690 --> 00:15:13.520
So I'm bouncing this script that
I need out to this app.js

00:15:13.520 --> 00:15:15.960
file, which I'll go ahead
and make now--

00:15:15.960 --> 00:15:16.720
app.js.

00:15:16.720 --> 00:15:22.310
And I'm just going to spit up
a little bit of code here.

00:15:22.310 --> 00:15:26.960
All being well, I'll immediately
invoke function

00:15:26.960 --> 00:15:28.210
expression.

00:15:33.210 --> 00:15:37.910
So what I want to do is I want
to grab my button from my

00:15:37.910 --> 00:15:42.750
HTML, and I want to add
a click handler.

00:15:42.750 --> 00:15:44.795
So adding that listener,
click.

00:15:44.795 --> 00:15:49.810
And when you click it, what I'd
like to do is I would like

00:15:49.810 --> 00:15:52.365
to call
chrome.app.window.minimize.

00:15:56.380 --> 00:15:59.140
Now this is not something you
can normally do with a window.

00:15:59.140 --> 00:16:02.230
You can only tell the browser,
hey, I'd like you to minimize

00:16:02.230 --> 00:16:03.040
the window.

00:16:03.040 --> 00:16:06.660
And then what I'm going to do is
I'm going to set a timeout,

00:16:06.660 --> 00:16:14.730
where I'm going to say, OK,
well, after about 4 seconds,

00:16:14.730 --> 00:16:17.060
chrome.app.window.restore.

00:16:17.060 --> 00:16:19.180
So not only can you
minimize windows,

00:16:19.180 --> 00:16:20.420
you can restore windows.

00:16:20.420 --> 00:16:21.620
PETE LAPAGE: Sweet!

00:16:21.620 --> 00:16:26.710
PAUL LEWIS: So all being well
now, if I go back to here and

00:16:26.710 --> 00:16:28.520
launch this, I should have
a Minimize button.

00:16:28.520 --> 00:16:30.395
And if this works, there
we go, minimized.

00:16:30.395 --> 00:16:33.420
And after a few seconds,
if the set-timer

00:16:33.420 --> 00:16:34.740
works, there it goes.

00:16:34.740 --> 00:16:35.280
It's back.

00:16:35.280 --> 00:16:36.250
The window has come back up.

00:16:36.250 --> 00:16:37.130
PETE LAPAGE: Very nice!

00:16:37.130 --> 00:16:40.030
PAUL LEWIS: So these kind of
capabilities and more, you now

00:16:40.030 --> 00:16:43.860
have available to you through
the Windowing API.

00:16:43.860 --> 00:16:46.630
And there are tons of
APIs like this, and

00:16:46.630 --> 00:16:47.770
they're so much fun.

00:16:47.770 --> 00:16:49.010
And you see how simple
that was.

00:16:49.010 --> 00:16:53.490
That was just two lines of code
for Minimize and Restore.

00:16:53.490 --> 00:16:54.645
So there we go.

00:16:54.645 --> 00:16:55.530
PETE LAPAGE: Excellent!

00:16:55.530 --> 00:16:59.560
So there's a whole Windowing API
set of instructions that

00:16:59.560 --> 00:17:02.900
folks can go have a look that
allow you to minimize,

00:17:02.900 --> 00:17:04.180
maximize, restore.

00:17:04.180 --> 00:17:05.390
What else is in there?

00:17:05.390 --> 00:17:09.660
PAUL LEWIS: There's
resizing, moving.

00:17:09.660 --> 00:17:13.519
But there is a sample in the
Chrome sample where one window

00:17:13.519 --> 00:17:19.859
is set to mimic its sibling,
which is quite interesting.

00:17:19.859 --> 00:17:23.349
So you can do quite a lot of
complex logic with these,

00:17:23.349 --> 00:17:26.109
where you could have conceivably
panel windows,

00:17:26.109 --> 00:17:27.310
especially with the frameless.

00:17:27.310 --> 00:17:29.740
So if you're making an app with
a main window and you

00:17:29.740 --> 00:17:32.570
wanted panels to snap to the
screen edges and things like,

00:17:32.570 --> 00:17:36.610
you could totally aim for that
kind of thing with these APIs.

00:17:36.610 --> 00:17:37.006
PETE LAPAGE: OK.

00:17:37.006 --> 00:17:37.800
PAUL LEWIS: All right?

00:17:37.800 --> 00:17:38.200
PETE LAPAGE: Awesome.

00:17:38.200 --> 00:17:38.970
Well, thank you.

00:17:38.970 --> 00:17:40.392
PAUL KINLAN: That's
pretty cool.

00:17:40.392 --> 00:17:41.340
PETE LAPAGE: Yeah.

00:17:41.340 --> 00:17:44.560
All right, well, we started to
talk about that whole Content

00:17:44.560 --> 00:17:47.770
Security Policy bit.

00:17:47.770 --> 00:17:50.060
Content Security Policy, I
think, is something that's

00:17:50.060 --> 00:17:53.270
really interesting and will
really help protect

00:17:53.270 --> 00:17:56.780
applications from a certain
set of vulnerabilities.

00:17:56.780 --> 00:17:58.910
Paul, do you want to tell us a
little bit more about Content

00:17:58.910 --> 00:17:59.690
Security Policy?

00:17:59.690 --> 00:18:01.730
PAUL KINLAN: Yeah, so Content
Security Policy is quite

00:18:01.730 --> 00:18:03.042
interesting.

00:18:03.042 --> 00:18:04.450
I say interesting.

00:18:04.450 --> 00:18:05.570
Actually, it is interesting.

00:18:05.570 --> 00:18:08.430
I did have a full head of
hair before I started

00:18:08.430 --> 00:18:09.620
messing with it.

00:18:09.620 --> 00:18:10.550
And now--

00:18:10.550 --> 00:18:11.637
sorry, it's a bad joke.

00:18:11.637 --> 00:18:15.620
PAUL LEWIS: Believe me, I know
this stuff, my friend.

00:18:15.620 --> 00:18:17.290
PAUL KINLAN: So Content Security
Policy is basically a

00:18:17.290 --> 00:18:21.290
framework that is designed to
mitigate the risks of people

00:18:21.290 --> 00:18:24.450
injecting code directly
into your web page.

00:18:24.450 --> 00:18:26.300
As you know, with HTML and
JavaScript, it's actually

00:18:26.300 --> 00:18:29.820
pretty easy, unfortunately, to
cross-site script on different

00:18:29.820 --> 00:18:33.580
sites, just by injecting
malformed HTML into a page or

00:18:33.580 --> 00:18:36.080
any kind of malformed
content into a page.

00:18:36.080 --> 00:18:38.130
And when you think about the
capabilities that these

00:18:38.130 --> 00:18:40.630
applications have, whether
it's access to USB or

00:18:40.630 --> 00:18:42.560
Bluetooth--

00:18:42.560 --> 00:18:44.680
PETE LAPAGE: They have
advanced access.

00:18:44.680 --> 00:18:47.490
They have things that normal
web apps, normal websites

00:18:47.490 --> 00:18:48.770
don't have access to.

00:18:48.770 --> 00:18:49.790
PAUL KINLAN: Exactly right.

00:18:49.790 --> 00:18:52.190
So even things like Chrome
Synchronized Storage, for

00:18:52.190 --> 00:18:55.040
instance, you don't want to
basically get people injecting

00:18:55.040 --> 00:18:57.820
a small piece of JavaScript or
HTML inside your application.

00:18:57.820 --> 00:18:58.590
PETE LAPAGE: Oh, yeah.

00:18:58.590 --> 00:19:00.550
PAUL KINLAN: And
then kind of--

00:19:00.550 --> 00:19:02.870
I'm not saying take over the
system, but do things that the

00:19:02.870 --> 00:19:04.930
user didn't expect on the
system from that single

00:19:04.930 --> 00:19:05.910
application.

00:19:05.910 --> 00:19:09.890
So Content Security Policy is
designed to restrict the types

00:19:09.890 --> 00:19:12.600
of things that people could do
inside your application in the

00:19:12.600 --> 00:19:16.250
sense of executing arbitrary
JavaScript and HTML.

00:19:16.250 --> 00:19:18.980
So some of the things we've seen
before and Paul mentioned

00:19:18.980 --> 00:19:21.940
it earlier on was you're not
allowed to have any inline

00:19:21.940 --> 00:19:23.360
JavaScript inside the page.

00:19:23.360 --> 00:19:26.520
That's like on-click, so a
button on-click, for instance,

00:19:26.520 --> 00:19:27.780
which Paul didn't do--

00:19:27.780 --> 00:19:29.630
PETE LAPAGE: Oh, yeah, so if
actually put on-click inside

00:19:29.630 --> 00:19:29.890
the button.

00:19:29.890 --> 00:19:30.830
PAUL KINLAN: Yeah,
you can't put the

00:19:30.830 --> 00:19:32.260
JavaScript inside there.

00:19:32.260 --> 00:19:36.240
It's pretty to hijack that if
you didn't have Content

00:19:36.240 --> 00:19:37.650
Security Policy in place.

00:19:37.650 --> 00:19:40.180
And then likewise, inline script
elements, you can't

00:19:40.180 --> 00:19:41.330
have them inside the page.

00:19:41.330 --> 00:19:44.630
They have to be inside a
separate artifact that's

00:19:44.630 --> 00:19:47.790
inside the Chrome package,
for instance.

00:19:47.790 --> 00:19:49.580
So they're just some of
the basic things.

00:19:49.580 --> 00:19:51.240
There are other things as well
that you find in Chrome

00:19:51.240 --> 00:19:55.910
packaged applications at least
that is enforced by the

00:19:55.910 --> 00:19:58.540
Content Security Policy is
that you can't directly

00:19:58.540 --> 00:20:00.240
reference external resources.

00:20:00.240 --> 00:20:01.050
PETE LAPAGE: Oh.

00:20:01.050 --> 00:20:05.010
OK, so I couldn't necessarily
say, hey, I want to go grab

00:20:05.010 --> 00:20:08.010
some fonts from TypeKit or
something like that.

00:20:08.010 --> 00:20:09.560
PAUL KINLAN: The fonts
are interesting.

00:20:09.560 --> 00:20:11.250
I believe not at the moment.

00:20:11.250 --> 00:20:12.940
But there are other
things as well.

00:20:12.940 --> 00:20:17.730
You can't load JavaScript from
arbitrary sources outside your

00:20:17.730 --> 00:20:19.070
application.

00:20:19.070 --> 00:20:19.770
Obviously, you can do

00:20:19.770 --> 00:20:21.980
cross-domain XML HTTP requests.

00:20:21.980 --> 00:20:24.240
So we've always had the ability
in Chrome Apps be able

00:20:24.240 --> 00:20:28.050
to specify a white-listed set
of sites, for instance, like

00:20:28.050 --> 00:20:31.380
your application can XML
HTTP request to.

00:20:31.380 --> 00:20:32.870
And then you can bring
the content in.

00:20:32.870 --> 00:20:35.810
But it has to be brought in
and maintained and locally

00:20:35.810 --> 00:20:38.560
stored inside your
application.

00:20:38.560 --> 00:20:40.640
PAUL LEWIS: This is why we were
talking about last time,

00:20:40.640 --> 00:20:41.940
and I think it's worth
saying again, that

00:20:41.940 --> 00:20:43.070
it's offline first.

00:20:43.070 --> 00:20:45.340
And you really do you need to
think about those terms.

00:20:45.340 --> 00:20:45.970
PAUL KINLAN: Exactly right.

00:20:45.970 --> 00:20:49.010
I mean, one of the things that
you find as well is that

00:20:49.010 --> 00:20:51.670
images, for instance, you are
not really supposed to

00:20:51.670 --> 00:20:54.600
reference images that are
normally structural, for

00:20:54.600 --> 00:20:56.120
instance, remotely.

00:20:56.120 --> 00:20:57.900
So what we're trying to do is
get developers to make sure

00:20:57.900 --> 00:21:00.200
that their applications, all
that images that they need,

00:21:00.200 --> 00:21:01.490
are referenced locally.

00:21:01.490 --> 00:21:03.320
This introduces some
complexities.

00:21:03.320 --> 00:21:05.950
You might have to download the
image, store it locally inside

00:21:05.950 --> 00:21:09.010
the applications local file
system API or the local file

00:21:09.010 --> 00:21:11.340
system sandbox and then
reference from there.

00:21:11.340 --> 00:21:13.830
And we've got, actually,
some great examples.

00:21:13.830 --> 00:21:17.340
So there is one news reader
application, which basically

00:21:17.340 --> 00:21:21.897
fetches data from the Google
News RSS feeds, but it stores

00:21:21.897 --> 00:21:23.475
all the RSS feeds in
local storage.

00:21:23.475 --> 00:21:26.770
And it does a XML HTTP request
to go out, brings it into

00:21:26.770 --> 00:21:27.870
local storage.

00:21:27.870 --> 00:21:30.980
And then that makes sure that
the actual content that you've

00:21:30.980 --> 00:21:34.240
requested is available
regardless of whether you're

00:21:34.240 --> 00:21:35.040
online or not.

00:21:35.040 --> 00:21:36.680
It's pretty interesting how
you're going to get around

00:21:36.680 --> 00:21:37.750
this at the moment.

00:21:37.750 --> 00:21:40.160
But it's there primarily
as a protection thing.

00:21:40.160 --> 00:21:41.900
Secondary as well is
to make sure these

00:21:41.900 --> 00:21:43.370
applications work offline.

00:21:43.370 --> 00:21:46.390
There are two exceptions, video
and audio, where you

00:21:46.390 --> 00:21:48.160
might want to stream the audio
in off the web, if you're

00:21:48.160 --> 00:21:50.420
doing a streaming-based
audio player.

00:21:50.420 --> 00:21:52.350
You might want to bring that in
off the web and just have

00:21:52.350 --> 00:21:53.575
access to that.

00:21:53.575 --> 00:21:56.890
And interestingly as well, in
our GitHub account, we've also

00:21:56.890 --> 00:22:00.060
got a demonstration
that does that.

00:22:00.060 --> 00:22:02.440
So basically it goes out, and
you can stream video from,

00:22:02.440 --> 00:22:05.620
say, your local network
into your application.

00:22:05.620 --> 00:22:08.000
PETE LAPAGE: And those are on
the Chrome App samples?

00:22:08.000 --> 00:22:10.980
PAUL KINLAN: It's a separate
repository on the Google

00:22:10.980 --> 00:22:14.390
Chrome GitHub user account.

00:22:14.390 --> 00:22:16.460
I believe it's called
Video Player.

00:22:16.460 --> 00:22:18.240
We can share the link
later as well.

00:22:18.240 --> 00:22:21.580
But essentially, you can go off,
connect to your remote

00:22:21.580 --> 00:22:25.350
networks, your home networks,
stream the video in, and then

00:22:25.350 --> 00:22:26.870
just kind of say, well, you
know what I'm going to do?

00:22:26.870 --> 00:22:28.614
I'm going to save this for
later, bring it in, store it

00:22:28.614 --> 00:22:32.220
in your local file system API,
and then play it back offline.

00:22:32.220 --> 00:22:33.180
So that's interesting.

00:22:33.180 --> 00:22:35.140
There's two other little
bits as well.

00:22:35.140 --> 00:22:36.780
You're not allowed to
do dynamic code

00:22:36.780 --> 00:22:39.200
execution as well in CSP.

00:22:39.200 --> 00:22:43.110
So that basically removes
the EVAL essentially.

00:22:43.110 --> 00:22:45.990
PETE LAPAGE: Yeah,
EVAL, EVAL evil.

00:22:45.990 --> 00:22:48.440
PAUL KINLAN: Which does cause
some issues in the sense of a

00:22:48.440 --> 00:22:51.660
lot of template and libraries
have been built to basically

00:22:51.660 --> 00:22:53.560
build up a function dynamically
based off the

00:22:53.560 --> 00:22:57.670
template structure and then
execute it as you build the

00:22:57.670 --> 00:22:59.340
template out.

00:22:59.340 --> 00:23:00.590
There are workarounds for it.

00:23:00.590 --> 00:23:02.070
You can either precompile
a template.

00:23:02.070 --> 00:23:04.340
So things like Handlebars,
for instance.

00:23:04.340 --> 00:23:06.720
You can use Handlebars to
precompile a template.

00:23:06.720 --> 00:23:07.820
I mean, there's not a lot
of people who actually

00:23:07.820 --> 00:23:09.930
dynamically compile templates
on the fly anyway.

00:23:09.930 --> 00:23:12.260
It's a convenience
thing normally.

00:23:12.260 --> 00:23:15.840
But essentially, what you'll
try and do is you will just

00:23:15.840 --> 00:23:18.380
compile it and include it inside
your application, and

00:23:18.380 --> 00:23:19.210
it works absolutely fine.

00:23:19.210 --> 00:23:20.230
It works brilliantly.

00:23:20.230 --> 00:23:22.510
And then there's other template
frameworks, things

00:23:22.510 --> 00:23:23.380
like Angular.

00:23:23.380 --> 00:23:24.560
Sorry, it's not a template
framework.

00:23:24.560 --> 00:23:27.350
But Angular has got the
ability to build these

00:23:27.350 --> 00:23:29.550
templates on the fly, because
it's more of a DOM-based

00:23:29.550 --> 00:23:30.650
structure anyway.

00:23:30.650 --> 00:23:32.160
So it doesn't go off and
execute a new function.

00:23:32.160 --> 00:23:33.090
It can just do it.

00:23:33.090 --> 00:23:33.940
PETE LAPAGE: It just does it.

00:23:33.940 --> 00:23:36.070
PAUL KINLAN: Because it builds
the structure of the DOM up

00:23:36.070 --> 00:23:37.380
automatically.

00:23:37.380 --> 00:23:40.050
So CSP does introduce
this restriction.

00:23:40.050 --> 00:23:42.560
We think it's a good
restrictions for users.

00:23:42.560 --> 00:23:44.570
It's a little bit awkward for
developers in the fact that

00:23:44.570 --> 00:23:47.590
you have to maybe retool
it a little bit.

00:23:47.590 --> 00:23:48.670
But it's not too hard
to get around.

00:23:48.670 --> 00:23:49.800
PETE LAPAGE: It sounds like
there's going to be some

00:23:49.800 --> 00:23:54.490
rethinking in terms of there
were things we used to do that

00:23:54.490 --> 00:23:57.540
could sometimes allows
cross-site scripting

00:23:57.540 --> 00:24:00.110
vulnerabilities or security
vulnerabilities.

00:24:00.110 --> 00:24:04.590
And now these things put us
into a more strict way of

00:24:04.590 --> 00:24:07.470
writing our code but will also
help us to make sure that we

00:24:07.470 --> 00:24:09.440
write better code.

00:24:09.440 --> 00:24:11.040
And that's important.

00:24:11.040 --> 00:24:12.570
I want to write better
code every day.

00:24:12.570 --> 00:24:15.460
I want to make sure that I'm not
exposing my users to like,

00:24:15.460 --> 00:24:19.165
oops, sorry, lost some
information for you.

00:24:19.165 --> 00:24:20.150
Oops.

00:24:20.150 --> 00:24:22.120
PAUL KINLAN: If you look on
the developers.chrome--

00:24:22.120 --> 00:24:25.830
is it developer.chrome or
developers.chrome.com/apps--

00:24:25.830 --> 00:24:28.870
we actually include a list of
frameworks we know to work

00:24:28.870 --> 00:24:31.850
with CSP and workarounds
as well.

00:24:31.850 --> 00:24:33.470
The interesting thing if you're
building a backbone-

00:24:33.470 --> 00:24:36.600
based application, the default
template and library doesn't

00:24:36.600 --> 00:24:39.850
work, which is the underscore
template and library, because

00:24:39.850 --> 00:24:41.670
it builds a function
of a runtime and

00:24:41.670 --> 00:24:44.310
then executes that.

00:24:44.310 --> 00:24:44.430
Just use Handlebars for it.

00:24:44.430 --> 00:24:46.820
RENATO DIAS: Talking about the
documentation, we are also

00:24:46.820 --> 00:24:50.230
working on that page,
specifically.

00:24:50.230 --> 00:24:54.530
And we will show some samples
of the most important or the

00:24:54.530 --> 00:24:57.990
most used frameworks and how
to use it on packaged apps.

00:24:57.990 --> 00:25:02.830
So in a few weeks, we will have
a more complete page with

00:25:02.830 --> 00:25:03.860
more samples.

00:25:03.860 --> 00:25:05.640
PAUL KINLAN: I mean, and this
goes out to the audience as

00:25:05.640 --> 00:25:07.870
well, is if you're building
applications and testing

00:25:07.870 --> 00:25:09.975
applications today and you find
that one of your template

00:25:09.975 --> 00:25:12.890
and libraries or maybe a
framework doesn't work, please

00:25:12.890 --> 00:25:13.650
let us know.

00:25:13.650 --> 00:25:16.560
Just go on the Chromium
Apps Google group.

00:25:16.560 --> 00:25:17.740
Email any of us directly.

00:25:17.740 --> 00:25:21.560
I'm talking PaulKinlan@Google
or my Google+ page.

00:25:21.560 --> 00:25:23.870
We'll feed that back to the team
and try and make those

00:25:23.870 --> 00:25:24.540
things work.

00:25:24.540 --> 00:25:26.070
PETE LAPAGE: Yeah, we definitely
want to hear about

00:25:26.070 --> 00:25:27.630
the things that you're using,
the things that

00:25:27.630 --> 00:25:28.620
you're running into.

00:25:28.620 --> 00:25:30.000
PAUL KINLAN: Yeah, because it
shouldn't be hard to build

00:25:30.000 --> 00:25:30.640
these applications.

00:25:30.640 --> 00:25:31.740
And we find that it's not.

00:25:31.740 --> 00:25:34.780
It's just a little bit of a
mind shift to get these

00:25:34.780 --> 00:25:36.190
frameworks working.

00:25:36.190 --> 00:25:39.710
PETE LAPAGE: And I think Mike
West on our team has written a

00:25:39.710 --> 00:25:42.470
really great article on Content
Security Policy that's

00:25:42.470 --> 00:25:45.390
up on HTML5 Rocks.

00:25:45.390 --> 00:25:46.470
You can go check that out.

00:25:46.470 --> 00:25:51.626
It's a great Content Security
Policy primer and how-to.

00:25:51.626 --> 00:25:55.800
A really great article, it
helped a lot for me.

00:25:55.800 --> 00:25:58.900
RENATO DIAS: There's one
specific situation on Chrome

00:25:58.900 --> 00:26:05.010
packaged apps is that you cannot
relax the CSP rules.

00:26:05.010 --> 00:26:09.500
So on extensions and
on websites, you

00:26:09.500 --> 00:26:10.640
can white-list domains.

00:26:10.640 --> 00:26:15.180
You can white-list specific
script source or image source.

00:26:15.180 --> 00:26:18.470
In Chrome App package
apps, they are not--

00:26:18.470 --> 00:26:19.780
PAUL KINLAN: It's basically
set to local packet.

00:26:19.780 --> 00:26:22.092
Everything is pretty much set
to the local package.

00:26:22.092 --> 00:26:24.370
RENATO DIAS: That is
very important.

00:26:24.370 --> 00:26:25.340
PAUL KINLAN: You know you can
store an image in the file

00:26:25.340 --> 00:26:25.880
system API.

00:26:25.880 --> 00:26:27.960
You can directly reference it
like a normal image link.

00:26:27.960 --> 00:26:28.660
It's fine.

00:26:28.660 --> 00:26:30.930
It's just that you've got to
try and get the image into

00:26:30.930 --> 00:26:33.430
your application as well,
whether that's zipping it up

00:26:33.430 --> 00:26:37.290
or downloading it and
installing it later.

00:26:37.290 --> 00:26:40.770
PETE LAPAGE: Now, Renato, when
we were talking earlier, you'd

00:26:40.770 --> 00:26:42.850
talked about some of
the things beyond

00:26:42.850 --> 00:26:44.740
CSP that have changed.

00:26:44.740 --> 00:26:47.150
Do you want to talk a little bit
about that and some of the

00:26:47.150 --> 00:26:48.730
things that developers
should know about?

00:26:48.730 --> 00:26:51.780
RENATO DIAS: Yeah, I will walk
through some of the features.

00:26:51.780 --> 00:26:57.130
Talking about the mindset change
that Paul mentioned,

00:26:57.130 --> 00:26:59.880
there are few things that
doesn't make sense in the

00:26:59.880 --> 00:27:00.980
context of an app.

00:27:00.980 --> 00:27:03.200
And there are a few things that
for security reasons,

00:27:03.200 --> 00:27:07.540
like CSP, were disabled
on purpose.

00:27:07.540 --> 00:27:13.750
So you have the list of all
these disabled web features on

00:27:13.750 --> 00:27:16.920
our documentation website.

00:27:16.920 --> 00:27:21.405
We'll show you the link
in a few seconds.

00:27:21.405 --> 00:27:22.890
Am I right about the link?

00:27:22.890 --> 00:27:25.690
PETE LAPAGE: I think I
got it in yesterday.

00:27:25.690 --> 00:27:26.630
I think I made it.

00:27:26.630 --> 00:27:29.080
But if it's not, we'll
just put it in the

00:27:29.080 --> 00:27:30.160
notes after the fact.

00:27:30.160 --> 00:27:31.270
RENATO DIAS: Yeah, absolutely.

00:27:31.270 --> 00:27:35.290
I grouped those web
features by the

00:27:35.290 --> 00:27:36.960
reason they are disabled.

00:27:36.960 --> 00:27:42.020
So I will just walk through
them and explain quickly.

00:27:42.020 --> 00:27:46.820
The first group is we have a
different flow, workflow, on

00:27:46.820 --> 00:27:49.780
an app that makes sense on an
app and doesn't make sense on

00:27:49.780 --> 00:27:52.370
the web, on the open web.

00:27:52.370 --> 00:27:58.710
And these features, disabled
features, are for this group

00:27:58.710 --> 00:28:01.370
is form submission.

00:28:01.370 --> 00:28:04.670
It doesn't make sense to submit
a form to an XML server

00:28:04.670 --> 00:28:05.550
for obvious reasons.

00:28:05.550 --> 00:28:09.100
Because you can do that.

00:28:09.100 --> 00:28:14.510
You can use a JavaScript to grab
the submit event and then

00:28:14.510 --> 00:28:23.200
Ajax, use XML HTTP request to
submit that asynchronously.

00:28:23.200 --> 00:28:26.060
You cannot use the APIs--

00:28:26.060 --> 00:28:28.276
feel free to interrupt me.

00:28:28.276 --> 00:28:30.435
PAUL KINLAN: On anything?

00:28:30.435 --> 00:28:33.070
Well, can we get some
football in?

00:28:33.070 --> 00:28:34.720
PETE LAPAGE: So you had a
fun flight yesterday?

00:28:34.720 --> 00:28:35.970
Nah.

00:28:38.250 --> 00:28:43.080
RENATO DIAS: The APIs to change
the browser Chrome, the

00:28:43.080 --> 00:28:47.150
visual aspects of the browser
that are available on

00:28:47.150 --> 00:28:49.580
extensions are not available
on the app for

00:28:49.580 --> 00:28:52.820
obvious reasons also.

00:28:52.820 --> 00:28:57.760
We also have some limits on
the navigation object.

00:28:57.760 --> 00:29:01.500
If you open a link, the link
will open on a browser, not on

00:29:01.500 --> 00:29:02.560
your web application.

00:29:02.560 --> 00:29:04.600
This is very important, because
you don't want the

00:29:04.600 --> 00:29:07.750
user to be disrupted by clicking
on links and get out

00:29:07.750 --> 00:29:08.940
of your application.

00:29:08.940 --> 00:29:11.890
PAUL KINLAN: Does this include
links internally as well,

00:29:11.890 --> 00:29:12.930
internal to the app?

00:29:12.930 --> 00:29:15.350
RENATO DIAS: No, it doesn't.

00:29:15.350 --> 00:29:16.980
PAUL KINLAN: The window
will never change.

00:29:16.980 --> 00:29:19.630
But I'm presuming you have to
manage and intercept the click

00:29:19.630 --> 00:29:20.270
and then do it.

00:29:20.270 --> 00:29:22.850
RENATO DIAS: Yeah, this is
very important stuff.

00:29:22.850 --> 00:29:26.940
We are working to
create samples.

00:29:26.940 --> 00:29:30.610
Because most of the frameworks
that manage the navigation

00:29:30.610 --> 00:29:32.735
process depends on the link.

00:29:35.660 --> 00:29:41.030
When I mentioned this change on
the list of frameworks, we

00:29:41.030 --> 00:29:44.440
also have a code for some of the
frameworks that depend on

00:29:44.440 --> 00:29:46.070
that and how it is
going to be.

00:29:46.070 --> 00:29:47.820
PAUL KINLAN: So how
to do hijacks.

00:29:47.820 --> 00:29:49.870
RENATO DIAS: Yeah, Exactly.

00:29:49.870 --> 00:29:52.640
And the cookie--

00:29:52.640 --> 00:29:53.570
PETE LAPAGE: Cookies?

00:29:53.570 --> 00:29:53.870
Cookies?

00:29:53.870 --> 00:29:54.215
RENATO DIAS: Where?

00:29:54.215 --> 00:29:55.480
Where?

00:29:55.480 --> 00:29:57.227
It's not lunchtime yet.

00:29:57.227 --> 00:29:58.360
PETE LAPAGE: Darn.

00:29:58.360 --> 00:30:01.600
RENATO DIAS: The document
cookies doesn't make sense in

00:30:01.600 --> 00:30:05.510
a client-only environment.

00:30:05.510 --> 00:30:08.660
Cookies are basically to send
information to the server and

00:30:08.660 --> 00:30:12.550
if you're using a server
to generate

00:30:12.550 --> 00:30:14.730
content for your client.

00:30:14.730 --> 00:30:23.120
So also you can use OAuth
and other stuff, too, to

00:30:23.120 --> 00:30:25.580
circumvent that.

00:30:25.580 --> 00:30:30.950
Regarding safety and CSP,
we disabled Flash.

00:30:30.950 --> 00:30:37.000
We disabled inline JavaScript
and the non-sandboxed plugins.

00:30:41.370 --> 00:30:44.680
PAUL KINLAN: So we can still run
Native Client code, right?

00:30:44.680 --> 00:30:45.070
RENATO DIAS: Pardon me?

00:30:45.070 --> 00:30:47.230
PAUL KINLAN: We can still
run Native Client code?

00:30:47.230 --> 00:30:49.990
RENATO DIAS: Yeah,
we can run NaCl.

00:30:49.990 --> 00:30:52.610
We absolutely can run NaCl.

00:30:52.610 --> 00:30:56.810
I think we have samples
for that also.

00:30:56.810 --> 00:31:01.560
And the games we showed on the
Google I/O, they use NaCl.

00:31:01.560 --> 00:31:03.990
It's pretty amazing.

00:31:03.990 --> 00:31:07.340
We also cannot show
external resource.

00:31:07.340 --> 00:31:10.190
We talked about that before.

00:31:10.190 --> 00:31:15.420
And for this synchronous nature
of some of the web

00:31:15.420 --> 00:31:18.640
features, we have disabled them,
because it stops the

00:31:18.640 --> 00:31:20.990
flow of the JavaScript
execution.

00:31:20.990 --> 00:31:25.720
And those are the model
dialogues, like Alert,

00:31:25.720 --> 00:31:32.360
Confirm, the local storage, and
the synchronous Ajax, the

00:31:32.360 --> 00:31:33.960
XML HTTP request.

00:31:33.960 --> 00:31:35.462
PAUL KINLAN: So can we go into
local storage a little bit

00:31:35.462 --> 00:31:36.860
more and tell us why--

00:31:36.860 --> 00:31:38.900
things that you might
have to do?

00:31:38.900 --> 00:31:40.030
RENATO DIAS: Yeah.

00:31:40.030 --> 00:31:43.440
If you are using local storage,
you should be use the

00:31:43.440 --> 00:31:46.370
indexed [INAUDIBLE] changer code
to index the [INAUDIBLE]

00:31:46.370 --> 00:31:50.640
because it's asynchronous, and
it allows storing BLOBS and

00:31:50.640 --> 00:31:51.960
storing objects.

00:31:51.960 --> 00:31:55.300
You don't have to change
out your code, too.

00:31:55.300 --> 00:31:57.640
PETE LAPAGE: But there's also
Chrome Sync with is, I think,

00:31:57.640 --> 00:31:58.695
where you were getting at.

00:31:58.695 --> 00:31:59.000
RENATO DIAS: Yeah, absolutely.

00:31:59.000 --> 00:31:59.840
PETE LAPAGE: Which is cool.

00:31:59.840 --> 00:32:02.720
PAUL KINLAN: I mean, it's
relatively like the local

00:32:02.720 --> 00:32:03.380
storage API.

00:32:03.380 --> 00:32:05.590
It's key value pair based.

00:32:05.590 --> 00:32:09.150
The idea behind it is it tries
to be asynchronous.

00:32:09.150 --> 00:32:10.180
One of the guiding
principals--

00:32:10.180 --> 00:32:11.570
PETE LAPAGE: There
is two of them.

00:32:11.570 --> 00:32:14.870
There's chrome.storage.local
and chrome.storage.sync.

00:32:14.870 --> 00:32:16.050
PAUL KINLAN: Actually,
that's a good point.

00:32:16.050 --> 00:32:18.290
So local is entirely local
to the application.

00:32:18.290 --> 00:32:20.090
And the synchronized one--

00:32:20.090 --> 00:32:22.590
PETE LAPAGE: So if I think of
chrome.storage.local, that's

00:32:22.590 --> 00:32:26.710
almost identical to local
storage, in that everything

00:32:26.710 --> 00:32:31.580
sits on my one computer, one
machine, doesn't go anywhere.

00:32:31.580 --> 00:32:34.070
It's asynchronous versus
synchronous.

00:32:34.070 --> 00:32:37.475
RENATO DIAS: And it allows
known strings.

00:32:37.475 --> 00:32:38.890
PETE LAPAGE: So I can store--

00:32:38.890 --> 00:32:40.390
[INTERPOSING VOICES]

00:32:40.390 --> 00:32:41.510
PETE LAPAGE: --true
objects in it.

00:32:41.510 --> 00:32:45.100
So then with
chrome.storage.sync--

00:32:45.100 --> 00:32:48.710
now, this is the one that I
go, this is kind of cool.

00:32:48.710 --> 00:32:51.270
PAUL KINLAN: Yeah, so the
chrome.storage.sync will allow

00:32:51.270 --> 00:32:53.900
you to basically say, well, I've
got my app installed on

00:32:53.900 --> 00:32:54.970
three different machines.

00:32:54.970 --> 00:32:57.950
How do I get the settings
between those, for instance?

00:32:57.950 --> 00:32:59.880
And it's just using the
synchronization framework

00:32:59.880 --> 00:33:02.100
built into Chrome already to
make sure that those settings

00:33:02.100 --> 00:33:03.820
and the data are replicated
across.

00:33:03.820 --> 00:33:06.880
And there are a couple of events
that tell you when data

00:33:06.880 --> 00:33:08.490
has arrived and all this
type of stuff as well.

00:33:08.490 --> 00:33:11.020
So it's pretty cool.

00:33:11.020 --> 00:33:13.440
It's relatively limited in
amount of data that can store

00:33:13.440 --> 00:33:15.440
in it and the amount of
operations that you can do.

00:33:15.440 --> 00:33:18.080
So right now, we're basically
trying to say if you've got

00:33:18.080 --> 00:33:20.710
local application settings,
for instance, that's what

00:33:20.710 --> 00:33:22.390
you'll store in the Chrome
Synchronized Storage.

00:33:22.390 --> 00:33:24.640
Because that's one of the things
that everyone hates

00:33:24.640 --> 00:33:28.760
about being on multiple machines
is that your basic

00:33:28.760 --> 00:33:29.880
configuration is not

00:33:29.880 --> 00:33:31.380
replicated across the machines.

00:33:31.380 --> 00:33:33.200
PETE LAPAGE: And that's one of
the things I love about Chrome

00:33:33.200 --> 00:33:36.390
is that I go to one computer,
to another computer, and

00:33:36.390 --> 00:33:38.210
everything is just all shared.

00:33:38.210 --> 00:33:39.560
PAUL KINLAN: You don't have
to use a developer.

00:33:39.560 --> 00:33:42.060
You don't have to build
the infrastructure for

00:33:42.060 --> 00:33:43.430
synchronization.

00:33:43.430 --> 00:33:44.630
RENATO DIAS: And it's
all there for you.

00:33:44.630 --> 00:33:47.610
PETE LAPAGE: Now, could I put
gigabytes worth of data into

00:33:47.610 --> 00:33:48.320
Chrome Sync?

00:33:48.320 --> 00:33:49.660
PAUL KINLAN: No, I think
it's limited to a

00:33:49.660 --> 00:33:50.970
couple of hundred kilobytes.

00:33:50.970 --> 00:33:53.450
PETE LAPAGE: So I couldn't
actually go and put

00:33:53.450 --> 00:33:54.210
everything in there?

00:33:54.210 --> 00:33:54.660
PAUL KINLAN: All your movies.

00:33:54.660 --> 00:33:56.805
PETE LAPAGE: All my movies.

00:33:56.805 --> 00:33:58.670
PAUL LEWIS: The documentation
does list the quotas.

00:33:58.670 --> 00:34:01.550
So there's the limit on the
number of items, the item

00:34:01.550 --> 00:34:04.340
size, and the number of requests
that you can make.

00:34:04.340 --> 00:34:06.040
So make sure to check out
the documentation.

00:34:06.040 --> 00:34:07.290
It lists those.

00:34:07.290 --> 00:34:08.860
PETE LAPAGE: That's an important
thing to just keep

00:34:08.860 --> 00:34:10.560
in mind, that you can't put
everything in there.

00:34:10.560 --> 00:34:12.790
It's not like a big dump truck
that you can just shove

00:34:12.790 --> 00:34:13.760
everything in.

00:34:13.760 --> 00:34:16.350
The internet is a
bunch of tubes.

00:34:16.350 --> 00:34:17.840
PAUL KINLAN: So can I just
actually preempt one of the

00:34:17.840 --> 00:34:19.790
questions that we've got
on the Moderator?

00:34:19.790 --> 00:34:20.830
PETE LAPAGE: In fact,
you know what?

00:34:20.830 --> 00:34:22.449
PAUL KINLAN: Because it's
relevant to this.

00:34:22.449 --> 00:34:22.699
PETE LAPAGE: Sure.

00:34:22.699 --> 00:34:24.790
PAUL KINLAN: So we had a
question, quite early on in

00:34:24.790 --> 00:34:28.460
the Moderator queue, which
basically said how do you

00:34:28.460 --> 00:34:31.110
migrate your local storage
settings from your Chrome apps

00:34:31.110 --> 00:34:32.720
to synchronized storage?

00:34:32.720 --> 00:34:34.320
PETE LAPAGE: Oh,
good question.

00:34:34.320 --> 00:34:35.570
PAUL KINLAN: It has to be
a manual taskk, right?

00:34:35.570 --> 00:34:36.540
I say manual.

00:34:36.540 --> 00:34:38.350
It's like a developer
manual task.

00:34:38.350 --> 00:34:42.120
You have to have a step inside
your application, which

00:34:42.120 --> 00:34:45.670
basically says migrate all these
local storage key value

00:34:45.670 --> 00:34:48.150
pairs into Chrome's
local storage.

00:34:48.150 --> 00:34:48.940
PETE LAPAGE: Will that
work though?

00:34:48.940 --> 00:34:51.940
Because from within the
app, you don't have

00:34:51.940 --> 00:34:53.179
access to local storage.

00:34:53.179 --> 00:34:55.030
PETE LAPAGE: So this is actually
a really good point.

00:34:55.030 --> 00:34:57.390
You got to remember is that
these apps aren't yet

00:34:57.390 --> 00:34:59.970
available on the Chrome
Web Store.

00:34:59.970 --> 00:35:01.940
So if you're going to do it now
with your packaged app or

00:35:01.940 --> 00:35:05.530
extension and you've got them
stored in local storage, I

00:35:05.530 --> 00:35:08.000
think Manifest Version
2 is fine for these.

00:35:08.000 --> 00:35:10.360
You might want to start to think
about migrating your

00:35:10.360 --> 00:35:13.130
application as opposed to
sitting in storage right now.

00:35:13.130 --> 00:35:15.750
PETE LAPAGE: So if you've got a
packaged app with a Manifest

00:35:15.750 --> 00:35:19.040
Version 1 today, you have access
to local storage and

00:35:19.040 --> 00:35:21.620
you have access to Chrome Synced
storage, so you should

00:35:21.620 --> 00:35:22.840
move it there.

00:35:22.840 --> 00:35:27.930
So that way when you ship your
Manifest Version 2, your

00:35:27.930 --> 00:35:32.060
updated Chrome packaged app,
it now has access to this.

00:35:32.060 --> 00:35:32.920
PAUL KINLAN: That's
the theory.

00:35:32.920 --> 00:35:33.650
PETE LAPAGE: Cool.

00:35:33.650 --> 00:35:35.200
OK, that makes a
lot more sense.

00:35:35.200 --> 00:35:38.110
And if you didn't see my hands,
I went like here to

00:35:38.110 --> 00:35:40.300
here, and then from
here to here.

00:35:40.300 --> 00:35:41.575
PAUL KINLAN: Or we could just
say the word "synchronize,"

00:35:41.575 --> 00:35:42.440
and then we'd be fine.

00:35:42.440 --> 00:35:44.840
PETE LAPAGE: That
would work, too.

00:35:44.840 --> 00:35:47.950
So on that note, I want to
remind folks of the survey

00:35:47.950 --> 00:35:50.940
that we're asking folks
to go and do.

00:35:50.940 --> 00:35:54.500
That survey is what Chrome
APIs are you

00:35:54.500 --> 00:35:55.460
most interested in?

00:35:55.460 --> 00:35:57.800
What are the things you
want us to talk about?

00:35:57.800 --> 00:36:00.450
We're going to plan our next
couple of Hangouts based on

00:36:00.450 --> 00:36:02.070
the feedback we get from you.

00:36:02.070 --> 00:36:04.230
We want to dive into
some of these APIs.

00:36:04.230 --> 00:36:08.450
Today we talked a little bit
about the Windowing API.

00:36:08.450 --> 00:36:10.690
But there's the USB.

00:36:10.690 --> 00:36:12.240
There's Bluetooth.

00:36:12.240 --> 00:36:12.930
There's serial.

00:36:12.930 --> 00:36:13.710
There's networking.

00:36:13.710 --> 00:36:15.630
There's all sorts
of cool APIs.

00:36:15.630 --> 00:36:18.390
Tell us which ones you're most
interested in so that we can

00:36:18.390 --> 00:36:20.540
try and really focus on
the ones you're most

00:36:20.540 --> 00:36:22.870
interested in first.

00:36:22.870 --> 00:36:26.970
And I think with that, we've got
a about five minutes, six

00:36:26.970 --> 00:36:27.830
minutes left.

00:36:27.830 --> 00:36:30.080
So let's go to the Moderator
and take a

00:36:30.080 --> 00:36:32.790
couple of the questions.

00:36:32.790 --> 00:36:34.050
PAUL KINLAN: It's changed quite
a bit, actually, since

00:36:34.050 --> 00:36:35.530
we've started this.

00:36:35.530 --> 00:36:37.670
So should we start from
the first one?

00:36:37.670 --> 00:36:41.540
RENATO DIAS: The first
one is from Tim.

00:36:41.540 --> 00:36:44.870
And he asks, "For enterprise,
some companies dislike

00:36:44.870 --> 00:36:46.860
auto-updating apps.

00:36:46.860 --> 00:36:50.780
Would it be possible to embed
a version of Chrome inside

00:36:50.780 --> 00:36:54.410
your Chrome app?"

00:36:54.410 --> 00:36:55.440
PAUL KINLAN: I think
the answer--

00:36:55.440 --> 00:36:57.440
yeah, that's a hard,
good question.

00:36:57.440 --> 00:37:00.920
RENATO DIAS: I think the
answer currently is no.

00:37:00.920 --> 00:37:02.580
PAUL KINLAN: I think there
are device policies.

00:37:02.580 --> 00:37:03.420
There are policies
for Chrome--

00:37:03.420 --> 00:37:05.910
PETE LAPAGE: There are some
enterprise policies that, as

00:37:05.910 --> 00:37:08.570
an enterprise, you can say
I do not want Chrome to

00:37:08.570 --> 00:37:10.490
auto-update.

00:37:10.490 --> 00:37:16.740
I want to manage the roll-out of
Chrome in my organization.

00:37:16.740 --> 00:37:20.400
So once you do that, you should
be able to control how

00:37:20.400 --> 00:37:21.880
that comes out.

00:37:21.880 --> 00:37:23.310
RENATO DIAS: But I'm curious
if the question

00:37:23.310 --> 00:37:26.016
is I want the Chrome--

00:37:26.016 --> 00:37:26.850
PAUL KINLAN: Things like
Enterprise apps?

00:37:26.850 --> 00:37:30.520
RENATO DIAS: The whole Chrome
runtime on the computer runs a

00:37:30.520 --> 00:37:36.120
specific version, or if the
Chrome apps runs it different?

00:37:36.120 --> 00:37:37.760
PAUL KINLAN: It's like, you
don't want Chrome to update.

00:37:37.760 --> 00:37:38.990
And then if you don't want
Chrome to update, you've

00:37:38.990 --> 00:37:40.890
probably got a very restrictive
policy about apps

00:37:40.890 --> 00:37:42.800
updating as well.

00:37:42.800 --> 00:37:45.030
I think you might be
able to control the

00:37:45.030 --> 00:37:45.840
update policy for apps.

00:37:45.840 --> 00:37:48.490
PETE LAPAGE: I believe you
may be able to do that.

00:37:48.490 --> 00:37:52.340
If you're using Google Apps
dashboard and you're

00:37:52.340 --> 00:37:54.250
installing your apps through
there, I believe you're right.

00:37:54.250 --> 00:37:54.770
You can.

00:37:54.770 --> 00:37:56.860
PAUL KINLAN: But if it's a
public app that you found on

00:37:56.860 --> 00:37:58.990
the public web store,
essentially, I don't believe

00:37:58.990 --> 00:38:01.730
you have any ability to control
that at the moment.

00:38:01.730 --> 00:38:02.890
I don't know.

00:38:02.890 --> 00:38:05.010
It's feedback that we get.

00:38:05.010 --> 00:38:07.940
And I've heard it quite
a few times.

00:38:07.940 --> 00:38:09.130
RENATO DIAS: Let's
go to the next.

00:38:09.130 --> 00:38:11.190
It's from Russell.

00:38:11.190 --> 00:38:16.240
"Apps and extensions have very
exciting features, bringing

00:38:16.240 --> 00:38:19.310
new possibilities in being able
to personalize Chrome.

00:38:19.310 --> 00:38:22.500
When using Chrome for Android,
however, it doesn't work.

00:38:22.500 --> 00:38:25.110
Are they going to be added?

00:38:25.110 --> 00:38:29.440
When can we write an app for
my phone?" We had this same

00:38:29.440 --> 00:38:31.040
question last week, right?

00:38:31.040 --> 00:38:32.720
PETE LAPAGE: Yeah, Paul, do
you want to go ahead?

00:38:32.720 --> 00:38:36.720
PAUL LEWIS: I was going to say
some guy talked about this at

00:38:36.720 --> 00:38:38.185
I/O. That's right, right?

00:38:38.185 --> 00:38:38.500
PETE LAPAGE: Yep.

00:38:38.500 --> 00:38:42.330
PAUL LEWIS: And the plan is that
we do want to bring all

00:38:42.330 --> 00:38:45.740
these apps to mobile, to
all platforms, really.

00:38:45.740 --> 00:38:47.790
It's about what we're trying to
do at the moment is get the

00:38:47.790 --> 00:38:52.320
desktop story correct and make
sure that we are consistent

00:38:52.320 --> 00:38:55.000
there and we iron
out any kinks.

00:38:55.000 --> 00:38:58.360
And then we don't have a date
or time or anything, but we,

00:38:58.360 --> 00:39:01.390
as I say, do plan
to roll it out.

00:39:01.390 --> 00:39:03.831
It's just about getting that
right on the desktop first.

00:39:03.831 --> 00:39:07.150
PETE LAPAGE: Yeah.

00:39:07.150 --> 00:39:11.970
RENATO DIAS: Jake sent a lot of
good questions last week.

00:39:11.970 --> 00:39:14.530
And this week, he also has
a very good question.

00:39:14.530 --> 00:39:18.390
We would take the chance that
Paul Kinlan is here and would

00:39:18.390 --> 00:39:19.730
be able to answer this.

00:39:19.730 --> 00:39:21.420
PAUL KINLAN: Is this the
Open-With question?

00:39:21.420 --> 00:39:21.850
RENATO DIAS: Yes.

00:39:21.850 --> 00:39:23.180
PETE LAPAGE: Is this a
Stnetni Bew question?

00:39:23.180 --> 00:39:24.280
PAUL KINLAN: It might be.

00:39:24.280 --> 00:39:26.580
RENATO DIAS: Let's say that I
have implemented simple text

00:39:26.580 --> 00:39:28.370
[INAUDIBLE] packaged
Chrome app.

00:39:28.370 --> 00:39:31.840
Is there any way to expose this
app and open with context

00:39:31.840 --> 00:39:36.460
menu, which shows up when a user
right-clicks on TXT files

00:39:36.460 --> 00:39:37.702
in File Manager?"

00:39:37.702 --> 00:39:39.250
PAUL KINLAN: Yeah.

00:39:39.250 --> 00:39:41.230
RENATO DIAS: OK.

00:39:41.230 --> 00:39:42.380
PETE LAPAGE: All right,
so the answer is yes.

00:39:42.380 --> 00:39:43.140
Next question.

00:39:43.140 --> 00:39:44.600
PAUL KINLAN: It's not quite
there just yet.

00:39:44.600 --> 00:39:46.250
I mean, the intention--

00:39:46.250 --> 00:39:48.340
to excuse the pun--

00:39:48.340 --> 00:39:50.840
was to have your application--

00:39:50.840 --> 00:39:52.120
thank you.

00:39:52.120 --> 00:39:53.686
We need sound effects for--

00:39:53.686 --> 00:39:57.270
[LAUGHTER]

00:39:57.270 --> 00:40:00.220
PAUL KINLAN: The intention was
to basically say Web Intents

00:40:00.220 --> 00:40:01.550
has got a view intent.

00:40:01.550 --> 00:40:04.700
The user intends to do view
some content, essentially.

00:40:04.700 --> 00:40:06.370
They don't particularly
intend to edit it or

00:40:06.370 --> 00:40:06.860
do some other stuff.

00:40:06.860 --> 00:40:08.370
They just want to view it.

00:40:08.370 --> 00:40:10.590
And whilst we don't have it in
the platform just yet, with

00:40:10.590 --> 00:40:12.510
the ability to say, look, I want
to be in the Open-With

00:40:12.510 --> 00:40:15.755
for text files, that was the
goal I had quite early on with

00:40:15.755 --> 00:40:18.290
this whole thing, was we've got
the ability to say I need

00:40:18.290 --> 00:40:19.830
to view text files.

00:40:19.830 --> 00:40:20.715
I need to view images.

00:40:20.715 --> 00:40:23.090
And I need to view videos and
all this type of stuff.

00:40:23.090 --> 00:40:25.500
Therefore, you should be able
to use the existing Web

00:40:25.500 --> 00:40:28.800
Intents functionality to say
to the system I want to be

00:40:28.800 --> 00:40:29.920
able to view these types--

00:40:29.920 --> 00:40:31.490
my application can view
these types of files.

00:40:31.490 --> 00:40:34.340
So when the user says, I want to
view it, like an image or a

00:40:34.340 --> 00:40:36.890
video, your application
will be listed there.

00:40:36.890 --> 00:40:39.170
I think we're a little bit away
from that, just getting

00:40:39.170 --> 00:40:40.600
that in right now.

00:40:40.600 --> 00:40:43.310
The goal is there to
do that, I think.

00:40:43.310 --> 00:40:45.810
The general idea behind Web
Intents inside these platform

00:40:45.810 --> 00:40:51.460
apps is it is like IPC basically
for these web

00:40:51.460 --> 00:40:54.890
platform type of apps.

00:40:54.890 --> 00:40:56.540
So the idea is that you might
be able to say, well, I need

00:40:56.540 --> 00:40:58.640
to do some other different types
of actions, and your

00:40:58.640 --> 00:40:59.806
applications will be
able to talk to

00:40:59.806 --> 00:41:01.530
each other via Intents.

00:41:01.530 --> 00:41:02.440
So the goal is there.

00:41:02.440 --> 00:41:05.390
I don't think it's available
just yet.

00:41:05.390 --> 00:41:05.925
PETE LAPAGE: But it's coming?

00:41:05.925 --> 00:41:07.485
PAUL KINLAN: Well, if you look
at Chrome itself, I think in

00:41:07.485 --> 00:41:09.790
the beta channel, it's got the
ability to view RSS feeds

00:41:09.790 --> 00:41:11.960
inside an application.

00:41:11.960 --> 00:41:15.400
So your application can say I
need view RSS or Atom feeds.

00:41:15.400 --> 00:41:16.180
You'll see it today.

00:41:16.180 --> 00:41:17.110
We've got a couple
of extensions.

00:41:17.110 --> 00:41:18.930
I think Wordpress has
got an extension.

00:41:18.930 --> 00:41:21.980
And RSS Feed Viewer, he's had
like 60,000 installs in week

00:41:21.980 --> 00:41:24.660
just from this piece
of technology.

00:41:24.660 --> 00:41:26.920
But the idea behind that is you
say, I need to view an RSS

00:41:26.920 --> 00:41:28.960
feed, You can open in
a viewer inside your

00:41:28.960 --> 00:41:30.120
application of choice.

00:41:30.120 --> 00:41:31.310
PETE LAPAGE: So I think
we have time

00:41:31.310 --> 00:41:33.000
for one more question.

00:41:33.000 --> 00:41:39.220
So do we want grab one more?

00:41:39.220 --> 00:41:40.850
PAUL KINLAN: Well, actually,
there's one here. "Can I make

00:41:40.850 --> 00:41:44.050
a window always on
top?" By Marco.

00:41:44.050 --> 00:41:44.970
Right now, no.

00:41:44.970 --> 00:41:48.030
I believe you can't make a
window stay on top at all.

00:41:48.030 --> 00:41:49.655
It's good piece of feedback that
we should give back to

00:41:49.655 --> 00:41:50.766
the team, actually.

00:41:50.766 --> 00:41:52.700
PETE LAPAGE: So we'll get
that back to the team.

00:41:52.700 --> 00:41:56.470
But it's always helpful if you
guys go and file bugs on

00:41:56.470 --> 00:41:57.610
Chromium bugs.

00:41:57.610 --> 00:42:01.140
Because that way, not only do
we get the feedback to the

00:42:01.140 --> 00:42:04.710
team, and they hear it from us,
but everybody else who's

00:42:04.710 --> 00:42:08.460
watching today can go star that
issue and say, yeah, I

00:42:08.460 --> 00:42:09.720
want that, too.

00:42:09.720 --> 00:42:12.900
Don't add the comment that says
I want that, too, but

00:42:12.900 --> 00:42:15.710
just star it so that the
engineering team sits there

00:42:15.710 --> 00:42:18.980
and goes, oh wow, this really
is a popular thing.

00:42:18.980 --> 00:42:21.020
So I think that's probably
about all the

00:42:21.020 --> 00:42:22.620
time we have for today.

00:42:22.620 --> 00:42:27.090
I want to thank these two for
being here and Paul for

00:42:27.090 --> 00:42:28.940
joining us from London.

00:42:28.940 --> 00:42:32.340
We'll be back next week, though
everybody is going to

00:42:32.340 --> 00:42:33.650
be in their home location.

00:42:33.650 --> 00:42:34.600
I'll be back in New York.

00:42:34.600 --> 00:42:36.305
You're back in London.

00:42:36.305 --> 00:42:37.250
RENATO DIAS: And I'm
back in Sao Paulo.

00:42:37.250 --> 00:42:38.820
PETE LAPAGE: You're
in Sao Paulo.

00:42:38.820 --> 00:42:41.150
So we're going to be coming to
you from all over the world.

00:42:41.150 --> 00:42:42.990
PAUL KINLAN: Before we finish,
there's actually about 18 or

00:42:42.990 --> 00:42:45.060
19 questions on the Moderator.

00:42:45.060 --> 00:42:48.150
We only had three at the
start of this talk.

00:42:48.150 --> 00:42:50.610
Is there anyway that we can just
start to answer some of

00:42:50.610 --> 00:42:52.020
these questions?

00:42:52.020 --> 00:42:54.650
PETE LAPAGE: Why don't we take
a stab at answering some of

00:42:54.650 --> 00:42:57.870
these questions in the
setting responses in

00:42:57.870 --> 00:42:59.130
the Moderator queue.

00:42:59.130 --> 00:43:01.110
So we'll take a stab
to give you some

00:43:01.110 --> 00:43:02.290
answers on some of these.

00:43:02.290 --> 00:43:03.990
So have a look at the
Moderator queue for

00:43:03.990 --> 00:43:04.990
this after the fact.

00:43:04.990 --> 00:43:06.220
We'll try and get
some of the--

00:43:06.220 --> 00:43:07.350
PAUL KINLAN: We've run
a little bit late.

00:43:07.350 --> 00:43:08.682
I was doing the banter.

00:43:12.410 --> 00:43:15.010
PETE LAPAGE: Well, with that,
guys, yep, exactly.

00:43:15.010 --> 00:43:16.550
Paul's hiding his head.

00:43:16.550 --> 00:43:17.790
I'm going to hide myself.

00:43:17.790 --> 00:43:19.550
With that, thank
you very much.

00:43:19.550 --> 00:43:24.380
We look forward to seeing you
next week, 9:00 AM Pacific,

00:43:24.380 --> 00:43:28.980
noon Eastern, 5 o'clock
in London,

00:43:28.980 --> 00:43:31.020
somewhere around the world.

00:43:31.020 --> 00:43:32.010
Can't wait to see you.

00:43:32.010 --> 00:43:33.315
Thanks everybody.

00:43:33.315 --> 00:43:34.390
PAUL KINLAN: Bye.

00:43:34.390 --> 00:43:34.835
RENATO DIAS: Bye-bye.

00:43:34.835 --> 00:43:59.267
[MUSIC PLAYING]

