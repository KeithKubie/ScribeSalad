WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:02.840
Here is your first foray
into iOS development,

00:00:02.840 --> 00:00:07.760
and I'm going to start you out with
something we call control flow.

00:00:07.760 --> 00:00:12.715
One way to control the flow of code
in our app is with an if statement.

00:00:12.715 --> 00:00:15.620
In Swift if statements
are easy to use and

00:00:15.620 --> 00:00:18.590
understand with a minimal
amount of code to type.

00:00:18.590 --> 00:00:20.250
Here's how it works.

00:00:20.250 --> 00:00:23.100
It starts with a keyword if and

00:00:23.100 --> 00:00:27.760
then a statement that you expect to be
true, following by opening curly braces.

00:00:29.040 --> 00:00:32.290
The closing curly braces
finish off the if.

00:00:32.290 --> 00:00:34.630
Inside the if statement,

00:00:34.630 --> 00:00:39.120
you can put the code that you want to
run if that statement evaluates to true.

00:00:40.210 --> 00:00:43.450
Some say change is the only
constant thing in life.

00:00:43.450 --> 00:00:47.750
What if we want to run some code
if the statement is not true?

00:00:47.750 --> 00:00:50.752
Enter the else clause.

00:00:50.752 --> 00:00:53.729
Right after the closing
curly brace of the if,

00:00:53.729 --> 00:00:57.970
we add the keyword else and
another set of curly braces.

00:00:57.970 --> 00:01:02.890
In there, we have code we want to run
if the statement evaluates to false.

00:01:02.890 --> 00:01:06.830
There are other types of control flows
in Swift including a very powerful

00:01:06.830 --> 00:01:11.100
switch statement that we will
cover later on in this Nanodegree.

00:01:11.100 --> 00:01:15.440
In fact, we even have an elective
course called Swift Syntax that

00:01:15.440 --> 00:01:19.390
takes you into all the ins and
outs of the Swift language.

00:01:19.390 --> 00:01:21.840
Now let's move on to Xcode.

00:01:21.840 --> 00:01:26.120
In Xcode open
the QuizViewController.swift file.

00:01:26.120 --> 00:01:31.250
In project zero I've pulled out most of
the code into something we call a class

00:01:31.250 --> 00:01:36.195
extension just so we can focus on
the few lines of code you need to write.

00:01:36.195 --> 00:01:42.135
Scroll down until you see the @IBAction
func flagButtonPressed function.

00:01:42.135 --> 00:01:46.920
This function is called when the user
presses one of the three flag buttons.

00:01:46.920 --> 00:01:49.440
We need to see if the user
press the correct button and

00:01:49.440 --> 00:01:51.797
then display a message to them.

00:01:51.797 --> 00:01:52.602
How to do this?

00:01:52.602 --> 00:01:55.040
An if statement will work great.

00:01:55.040 --> 00:01:59.938
The variable that this function is
given when called is named sender.

00:01:59.938 --> 00:02:03.978
By the way, you will hear people
use the phrase passed in.

00:02:03.978 --> 00:02:08.038
It just means the variable sent
to a function when it is called.

00:02:08.038 --> 00:02:12.678
Sender is an object representing
the button pressed by the user.

00:02:12.678 --> 00:02:15.008
All buttons have an integer tag.

00:02:15.008 --> 00:02:17.538
And we have also stored the correct tag

00:02:17.538 --> 00:02:20.303
under the variable
called correctButtonTag.

00:02:21.348 --> 00:02:23.460
So let me walk you through this.

00:02:23.460 --> 00:02:27.390
We know the correct tag is stored under
a variable called correctButtonTag.

00:02:28.460 --> 00:02:32.330
We know we just got passed an object
corresponding to the button that was

00:02:32.330 --> 00:02:35.230
pressed as a parameter to
this function called sender.

00:02:36.410 --> 00:02:40.060
So we need to check if the tag
of the button that is passed

00:02:40.060 --> 00:02:42.780
is the same as the correctButtonTag.

00:02:42.780 --> 00:02:46.695
In other words, we need to check whether
the user pressed the right button and

00:02:46.695 --> 00:02:48.700
picked the correct language.

00:02:48.700 --> 00:02:51.350
Here is the if statement that
you need to add to this.

00:02:53.090 --> 00:02:56.350
The double equals is
a comparison checking to see

00:02:56.350 --> 00:03:00.105
if the passed in buttons tag is
the same as a correctButtonTag.

00:03:01.550 --> 00:03:02.920
If it is, great.

00:03:02.920 --> 00:03:05.550
Tell the user they chose
the correct answer.

00:03:05.550 --> 00:03:09.900
If the tag integer values do not line
up, the answer was incorrect, and

00:03:09.900 --> 00:03:11.450
we should inform the user as well.

00:03:12.530 --> 00:03:15.900
With this if statement added,
we should be able to run the app and

00:03:15.900 --> 00:03:17.900
see what happens when
we choose an answer.

