WEBVTT
Kind: captions
Language: en

00:00:00.590 --> 00:00:01.910
SETH LADD: Thanks everybody
for your patience.

00:00:01.910 --> 00:00:03.820
Sorry about that, but
luckily these things

00:00:03.820 --> 00:00:05.670
reboot fairly fast.

00:00:05.670 --> 00:00:06.770
So we're back online.

00:00:06.770 --> 00:00:13.210
Welcome to an episode of
Dartisans, our podcast-style

00:00:13.210 --> 00:00:17.160
G+ Hangout On Air where we talk
about the Dart project

00:00:17.160 --> 00:00:22.880
and the different elements, and
releases, and news, and

00:00:22.880 --> 00:00:23.560
team members.

00:00:23.560 --> 00:00:27.720
And today we're doing a
community chat with a lot of

00:00:27.720 --> 00:00:30.480
the community members who've
been working on different

00:00:30.480 --> 00:00:33.730
projects around the open source
community for Dart.

00:00:33.730 --> 00:00:35.420
So welcome everyone.

00:00:35.420 --> 00:00:36.680
Very happy to see everyone.

00:00:36.680 --> 00:00:38.400
We are broadcasting live.

00:00:38.400 --> 00:00:42.600
Today in the studio, we have
Lars Tackmann from Denmark,

00:00:42.600 --> 00:00:46.670
who has been releasing a lot
of helpful community open

00:00:46.670 --> 00:00:47.590
source libraries.

00:00:47.590 --> 00:00:49.550
And we'll talk about what
you've been doing.

00:00:49.550 --> 00:00:51.060
But let's go around.

00:00:51.060 --> 00:00:54.030
Let's start with, on
my left, Adam.

00:00:54.030 --> 00:00:55.480
Introduce yourself.

00:00:55.480 --> 00:00:56.340
ADAM SMITH: Hey,
my name's Adam.

00:00:56.340 --> 00:00:59.455
I like to hack against
Dart and have fun.

00:00:59.455 --> 00:01:02.900
I'm not working on anything in
particular, just kind of

00:01:02.900 --> 00:01:05.890
absorbing what everyone else is
doing and then modifying,

00:01:05.890 --> 00:01:08.290
playing with, patching,
sending back.

00:01:08.290 --> 00:01:11.850
And just really inspecting--

00:01:11.850 --> 00:01:14.848
playing with everything that
comes out with Dart.

00:01:14.848 --> 00:01:15.250
SETH LADD: Great, thanks.

00:01:15.250 --> 00:01:17.280
JOHN EVANS: Now Adam,
don't be so modest.

00:01:17.280 --> 00:01:21.080
Because you are the guy who
knows about every single patch

00:01:21.080 --> 00:01:22.160
that ever comes out with Dart.

00:01:22.160 --> 00:01:24.900
You're the first guy out with
it, and that's who we look to

00:01:24.900 --> 00:01:26.770
get that great information.

00:01:26.770 --> 00:01:29.530
ADAM SMITH: Thank you.

00:01:29.530 --> 00:01:31.611
SETH LADD: Chris, why
don't you go next?

00:01:31.611 --> 00:01:34.690
CHRIS BUCKETT: Yeah, sure.

00:01:34.690 --> 00:01:38.240
So I'm Chris, Chris Buckett.

00:01:38.240 --> 00:01:43.810
And I've done a couple of
libraries, the JSONP library

00:01:43.810 --> 00:01:46.470
and the JSON Object Library.

00:01:46.470 --> 00:01:48.810
And again, I'm not working
on anything

00:01:48.810 --> 00:01:51.450
particular at the moment.

00:01:51.450 --> 00:01:55.690
Most of the offline,
professional work is writing

00:01:55.690 --> 00:01:59.530
the Dart book, Dart in Action,
which does seem to be taking

00:01:59.530 --> 00:02:02.680
up an awful lot of my time.

00:02:02.680 --> 00:02:07.020
But it's amazing how much the
language has moved on, quite

00:02:07.020 --> 00:02:09.240
like the last month.

00:02:09.240 --> 00:02:12.040
The mailing list seems to been
going mad with loads of great

00:02:12.040 --> 00:02:14.940
ideas the last couple
of weeks.

00:02:14.940 --> 00:02:18.160
And I also run the Dartwatch
blog as well.

00:02:20.890 --> 00:02:22.480
And been posting community
updates.

00:02:22.480 --> 00:02:25.012
I've been trying to keep on top
of what's been going on in

00:02:25.012 --> 00:02:29.155
the community, in terms of
libraries that people have

00:02:29.155 --> 00:02:30.460
been releasing and so on.

00:02:30.460 --> 00:02:33.480
So I think most of the people
here have got libraries up on

00:02:33.480 --> 00:02:36.180
the Dartwatch blog.

00:02:36.180 --> 00:02:40.040
And it's just great to
see how much activity

00:02:40.040 --> 00:02:41.140
there is going on.

00:02:41.140 --> 00:02:41.470
SETH LADD: Cool.

00:02:41.470 --> 00:02:44.050
And we'll get back to your
book a little bit later.

00:02:44.050 --> 00:02:45.985
John, you're next.

00:02:45.985 --> 00:02:47.540
JOHN EVANS: Yes, my
name's John Evans.

00:02:47.540 --> 00:02:49.750
And I've been working with Dart
I think now for about

00:02:49.750 --> 00:02:50.950
nine months.

00:02:50.950 --> 00:02:52.330
Really enjoy it.

00:02:52.330 --> 00:02:53.720
It's a great platform.

00:02:53.720 --> 00:02:54.570
It's developed--

00:02:54.570 --> 00:02:57.620
it's come a long way, certainly
since I started

00:02:57.620 --> 00:02:58.230
working with it.

00:02:58.230 --> 00:03:00.340
So I've been pleased
with that.

00:03:00.340 --> 00:03:04.310
I particularly enjoy the
closeness that the community

00:03:04.310 --> 00:03:08.900
has with the Dart team
and the amount of--

00:03:08.900 --> 00:03:09.820
I won't say influence--

00:03:09.820 --> 00:03:14.080
but certainly the amount of
accordance we're given in our

00:03:14.080 --> 00:03:16.340
ideas, and how that shapes
the language.

00:03:16.340 --> 00:03:21.570
So it's been really a
great time so far.

00:03:21.570 --> 00:03:24.980
The project that is really
taking the most of my time is

00:03:24.980 --> 00:03:26.390
the Buckshot UI library.

00:03:26.390 --> 00:03:29.110
And so I continue to work
on that, try to

00:03:29.110 --> 00:03:30.700
put out a good product.

00:03:30.700 --> 00:03:31.050
SETH LADD: Awesome.

00:03:31.050 --> 00:03:32.590
So we'll chat about
Buckshot, today.

00:03:32.590 --> 00:03:34.510
And then, sorry,
John McCutchan.

00:03:34.510 --> 00:03:36.070
The other John.

00:03:36.070 --> 00:03:36.820
JOHN MCCUTCHAN: Hello,
everyone.

00:03:36.820 --> 00:03:37.520
SETH LADD: Hi.

00:03:37.520 --> 00:03:39.500
JOHN MCCUTCHAN: I'm John
McCutchan and I've been

00:03:39.500 --> 00:03:41.990
working with Dart for,
I don't know, three

00:03:41.990 --> 00:03:43.595
or four months now.

00:03:43.595 --> 00:03:47.040
I've released the Dart Vector
Math library, which is a

00:03:47.040 --> 00:03:52.960
GLSL-like vector math
library for Dart.

00:03:52.960 --> 00:03:56.210
So I'm mainly interested
in the gaming

00:03:56.210 --> 00:03:59.986
aspect of the Dart language.

00:03:59.986 --> 00:04:00.460
SETH LADD: Awesome.

00:04:00.460 --> 00:04:02.326
And then, Lars, why don't you
talk about some of the

00:04:02.326 --> 00:04:03.480
libraries that you've
been working on.

00:04:03.480 --> 00:04:05.050
LARS TACKMANN: Yeah, my
name's Lars Tackmann.

00:04:05.050 --> 00:04:07.110
I'm doing a start up in Dart.

00:04:07.110 --> 00:04:10.725
And so I'm basically just
developing the libraries that

00:04:10.725 --> 00:04:13.450
I needed to do that.

00:04:13.450 --> 00:04:16.459
Everything from a small working
library to integrating

00:04:16.459 --> 00:04:20.709
with Amazon's website, which is
via Phonegap integration.

00:04:20.709 --> 00:04:22.310
SETH LADD: Where can we
find these libraries?

00:04:22.310 --> 00:04:25.090
LARS TACKMANN: We can
find them on GitHub.

00:04:25.090 --> 00:04:26.150
SETH LADD: I think
GitHub, GitHub,

00:04:26.150 --> 00:04:27.020
everyone's using GitHub.

00:04:27.020 --> 00:04:27.940
Is that right?

00:04:27.940 --> 00:04:28.510
JOHN MCCUTCHAN: Yeah.

00:04:28.510 --> 00:04:29.210
SETH LADD: Yeah?

00:04:29.210 --> 00:04:30.260
Awesome.

00:04:30.260 --> 00:04:32.160
[INAUDIBLE] fan myself.

00:04:32.160 --> 00:04:33.770
I think the Phonegap
one is the most

00:04:33.770 --> 00:04:35.660
interesting to me, at least.

00:04:35.660 --> 00:04:37.970
Cause I know a lot of start
ups, or just generally

00:04:37.970 --> 00:04:39.350
developers, want to
get their apps

00:04:39.350 --> 00:04:41.040
across multiple platforms.

00:04:41.040 --> 00:04:44.680
What's the experience been like
porting the Phonegap that

00:04:44.680 --> 00:04:46.090
most people are familiar
with to something

00:04:46.090 --> 00:04:47.900
that Dart can use?

00:04:47.900 --> 00:04:49.530
LARS TACKMANN: It's
been pretty good.

00:04:49.530 --> 00:04:51.735
There's some weird things when
we got to have to integrate

00:04:51.735 --> 00:04:52.810
with JavaScript.

00:04:52.810 --> 00:04:56.220
We had to do a call back from
JavaScript into Dart.

00:04:56.220 --> 00:05:00.670
But it was pretty quick
to get running.

00:05:00.670 --> 00:05:04.830
And there's also a good chance
to make an API that fits more

00:05:04.830 --> 00:05:09.280
with the API that Dart
has already.

00:05:09.280 --> 00:05:12.410
So I'm looking a lot into
how [INAUDIBLE]

00:05:12.410 --> 00:05:15.770
guys are creating the
new APIs and trying

00:05:15.770 --> 00:05:17.250
to fit it into that.

00:05:17.250 --> 00:05:22.006
So it gets that good platform
feel rather than just doing a

00:05:22.006 --> 00:05:24.956
direct port of how the
API is in JavaScript.

00:05:24.956 --> 00:05:25.570
SETH LADD: Oh, good.

00:05:25.570 --> 00:05:25.900
OK.

00:05:25.900 --> 00:05:28.540
So you make it feel Darty
in the process.

00:05:28.540 --> 00:05:31.110
Well you mentioned trying to
get data back and forth

00:05:31.110 --> 00:05:33.670
between Dart and JavaScript.

00:05:33.670 --> 00:05:38.050
So Chris, you mentioned really
briefly your JSONP library.

00:05:38.050 --> 00:05:43.230
What was that like trying to get
these two worlds to work?

00:05:43.230 --> 00:05:44.915
CHRIS BUCKETT: Yeah, it's
pretty interesting.

00:05:48.980 --> 00:05:53.550
The JSON library's--

00:05:53.550 --> 00:05:55.060
OK, let me think.

00:05:57.700 --> 00:06:00.780
I understand why there's an
issue with the JavaScript and

00:06:00.780 --> 00:06:02.840
the Dart virtual machines
talking with each other.

00:06:02.840 --> 00:06:06.100
And everything has to go via
this message-passing thing,

00:06:06.100 --> 00:06:10.290
which is great because
it shares the same

00:06:10.290 --> 00:06:11.270
level as the isolates.

00:06:11.270 --> 00:06:13.885
But again it could be annoying
if you're coming to Dart for

00:06:13.885 --> 00:06:16.350
the first time, and you think,
Oh, all we do is call-outs to

00:06:16.350 --> 00:06:18.710
JavaScript like we do
with [INAUDIBLE]

00:06:18.710 --> 00:06:19.960
and I can't.

00:06:24.790 --> 00:06:28.460
SETH LADD: The way to get Dart
in JavaScript to work right

00:06:28.460 --> 00:06:29.930
now, today at least, is

00:06:29.930 --> 00:06:32.120
postMessage, is what I'm hearing.

00:06:32.120 --> 00:06:36.255
CHRIS BUCKETT: Absolutely, so
the postMessage story is great

00:06:36.255 --> 00:06:38.610
as a starting point.

00:06:38.610 --> 00:06:43.420
And I know that there is a story
that you guys are after

00:06:43.420 --> 00:06:48.132
to improve the postMessage
scenario, I guess.

00:06:48.132 --> 00:06:48.510
SETH LADD: Right.

00:06:48.510 --> 00:06:52.540
In fact, I think I just saw the
team mark the issue for

00:06:52.540 --> 00:06:57.610
better JS interop as an M1,
which is really, really nice.

00:06:57.610 --> 00:07:02.150
It's nice to see that we've
heard their feedback and we're

00:07:02.150 --> 00:07:06.530
going to try to help
you migrate slowly,

00:07:06.530 --> 00:07:07.660
I think, into Dart.

00:07:07.660 --> 00:07:09.310
Right, how do you get 10% Dart?

00:07:09.310 --> 00:07:10.060
20% Dart?

00:07:10.060 --> 00:07:11.410
30% Dart?

00:07:11.410 --> 00:07:14.160
Until your whole app
is now 100% Dart.

00:07:14.160 --> 00:07:15.440
So that's great.

00:07:15.440 --> 00:07:17.540
[INAUDIBLE] soon.

00:07:17.540 --> 00:07:20.420
CHRIS BUCKETT: My feeling is
that part of the issue for

00:07:20.420 --> 00:07:22.280
JavaScript developers
especially-- as opposed to

00:07:22.280 --> 00:07:24.480
Java and C Sharp developers--

00:07:24.480 --> 00:07:26.330
so JavaScript developers have
got their whole heads in the

00:07:26.330 --> 00:07:27.530
world of JavaScript.

00:07:27.530 --> 00:07:28.600
And they know their favorite
libraries.

00:07:28.600 --> 00:07:32.050
And they know their favorite
UI platforms, and so on.

00:07:32.050 --> 00:07:34.600
And they want to see, how could
I take advantage of a

00:07:34.600 --> 00:07:36.885
bit of Dart, but still make use
of some of the stuff that

00:07:36.885 --> 00:07:38.090
I already know?

00:07:38.090 --> 00:07:39.000
SETH LADD: Exactly.

00:07:39.000 --> 00:07:40.790
That's one of those
key use cases.

00:07:40.790 --> 00:07:44.500
But that brings up a good
question for everybody.

00:07:44.500 --> 00:07:45.780
We're all developers.

00:07:45.780 --> 00:07:49.990
We have our experience in C
Sharp or Java or whatever.

00:07:49.990 --> 00:07:53.610
And that, I think, colors our
expectations or concerns when

00:07:53.610 --> 00:07:56.030
we approach development
and web programming.

00:07:56.030 --> 00:07:59.680
And so maybe John McCutchan,
can you start with the

00:07:59.680 --> 00:08:02.520
experience you've had in your
previous languages and how

00:08:02.520 --> 00:08:05.450
that's, I guess, shaped the way
you approached Dart or how

00:08:05.450 --> 00:08:07.910
you looked at Dart?

00:08:07.910 --> 00:08:10.780
So, in other words, how is it
like coming from non-web

00:08:10.780 --> 00:08:13.360
programming into web
programming in

00:08:13.360 --> 00:08:15.120
this particular case?

00:08:15.120 --> 00:08:16.060
JOHN MCCUTCHAN: Sure.

00:08:16.060 --> 00:08:20.150
So my background is primarily
with C++ programming.

00:08:20.150 --> 00:08:24.710
And what attracted me to
Dart over JavaScript

00:08:24.710 --> 00:08:26.950
was the type system.

00:08:26.950 --> 00:08:30.890
I'm very tied to having a type
system and being warned when

00:08:30.890 --> 00:08:33.240
I'm doing something silly
or made a typo or

00:08:33.240 --> 00:08:34.830
something like that.

00:08:34.830 --> 00:08:40.450
So that was what first pulled
me towards Dart rather than

00:08:40.450 --> 00:08:41.960
JavaScript.

00:08:41.960 --> 00:08:46.310
And the language itself is so
familiar to someone coming

00:08:46.310 --> 00:08:48.490
from a C++ background.

00:08:48.490 --> 00:08:52.950
Even the syntax for generic
types, like template types,

00:08:52.950 --> 00:08:55.140
coming from C++.

00:08:55.140 --> 00:08:57.840
Probably the biggest thing that
I've had to get used to

00:08:57.840 --> 00:09:00.720
is the lack of value types.

00:09:00.720 --> 00:09:05.020
I'm used to being able to pass
a vector to a function and

00:09:05.020 --> 00:09:07.990
then modify the vector inside
of that function--

00:09:07.990 --> 00:09:09.540
without side effects.

00:09:09.540 --> 00:09:11.920
So that's taken a little
bit of getting used to.

00:09:11.920 --> 00:09:13.950
But it's easy to wrap your
head around once you

00:09:13.950 --> 00:09:17.330
understand the object
model in Dart.

00:09:17.330 --> 00:09:20.470
SETH LADD: So John Evans, you
have a strong .Net, C Sharp

00:09:20.470 --> 00:09:20.950
background.

00:09:20.950 --> 00:09:23.660
How has that affected the way
you've approached web

00:09:23.660 --> 00:09:27.210
programming, specifically
with Dart?

00:09:27.210 --> 00:09:27.410
JOHN EVANS: Yeah.

00:09:27.410 --> 00:09:30.300
For me it was probably the
biggest attractant

00:09:30.300 --> 00:09:32.940
coming from the .Net.

00:09:32.940 --> 00:09:35.930
And I was really working a lot
in Silverlight at the time and

00:09:35.930 --> 00:09:41.000
trying to model web UI
frameworks in that sandbox.

00:09:41.000 --> 00:09:44.030
And so stepping in from that
sort of class method

00:09:44.030 --> 00:09:47.475
architecture to Dart
was seamless.

00:09:47.475 --> 00:09:50.910
It really was seamless
just getting to know

00:09:50.910 --> 00:09:52.820
Dart-specific APIs.

00:09:52.820 --> 00:09:55.350
And then once you pick that up,
you're off to the races.

00:09:55.350 --> 00:09:59.300
I think that was the biggest
pull for me.

00:09:59.300 --> 00:10:04.280
And so I really enjoy that
part of the experience.

00:10:04.280 --> 00:10:10.750
I think that Dart probably has
its biggest challenge in terms

00:10:10.750 --> 00:10:13.690
of sell with the JavaScript
community.

00:10:13.690 --> 00:10:20.410
Because their model with the
prototypes is wholly different

00:10:20.410 --> 00:10:23.140
from the way you think about
programming standpoint.

00:10:23.140 --> 00:10:23.820
But for me, yeah.

00:10:23.820 --> 00:10:26.270
It was an easy transition.

00:10:26.270 --> 00:10:29.240
SETH LADD: Well, this might be
a good segue into moving from

00:10:29.240 --> 00:10:32.920
just language into libraries,
which is why everyone's here

00:10:32.920 --> 00:10:35.770
today to chat about their
particular projects.

00:10:35.770 --> 00:10:37.840
So I know John you're
working with a

00:10:37.840 --> 00:10:39.120
library you call Buckshot.

00:10:39.120 --> 00:10:40.440
Tell us more about that.

00:10:40.440 --> 00:10:47.090
And I believe it's highly
influenced by .Net or C Sharp

00:10:47.090 --> 00:10:48.880
libraries that you're used
to, is that right?

00:10:48.880 --> 00:10:50.480
JOHN EVANS: Yeah, it's actually
heavily influenced by

00:10:50.480 --> 00:10:53.690
the WPF framework.

00:10:53.690 --> 00:10:56.750
Not to be redundant, but WPF--

00:10:56.750 --> 00:10:59.700
and Buckshot, by the way, I
called it Buckshot because the

00:10:59.700 --> 00:11:02.665
definition in Dart parlance
means that your just throwing

00:11:02.665 --> 00:11:04.790
darts all over the board.

00:11:04.790 --> 00:11:08.820
So that really inspired
the name there.

00:11:08.820 --> 00:11:12.770
So I really enjoyed the
experience in Silverlight and

00:11:12.770 --> 00:11:17.520
WPF of having static
templates in XAML.

00:11:17.520 --> 00:11:20.350
And then having a strong
data-body model between the

00:11:20.350 --> 00:11:25.320
template and code, where you
could bind events and bind

00:11:25.320 --> 00:11:30.630
properties and bind primitives,
just literals like

00:11:30.630 --> 00:11:33.300
integers, and strings,
and so on.

00:11:33.300 --> 00:11:39.770
So my experiment with Buckshot
was really to try to emulate

00:11:39.770 --> 00:11:42.480
that model in Dart.

00:11:42.480 --> 00:11:46.410
And so over the last eight
months or so, I think I've

00:11:46.410 --> 00:11:48.190
gotten to a pretty good
place with that.

00:11:48.190 --> 00:11:51.370
I've got templates and a pretty
good binding model.

00:11:51.370 --> 00:11:55.660
I don't have events hooked up
yet, still waiting for Dart's

00:11:55.660 --> 00:11:58.460
reflection to come
in for that.

00:11:58.460 --> 00:12:02.190
But by and large it's been
a pretty good experiment.

00:12:02.190 --> 00:12:04.340
I think it shows the
power of Dart.

00:12:04.340 --> 00:12:06.790
Because this is certainly a
non-trivial project that I'm

00:12:06.790 --> 00:12:07.715
working on.

00:12:07.715 --> 00:12:10.710
It's exercised the language
pretty much in every corner,

00:12:10.710 --> 00:12:14.180
at least on the client side,
that I can push it.

00:12:14.180 --> 00:12:15.310
And it's done pretty well.

00:12:15.310 --> 00:12:18.840
So I've been very pleased with
that experience so far.

00:12:18.840 --> 00:12:21.470
SETH LADD: How can people
try out Buckshot?

00:12:21.470 --> 00:12:21.581
JOHN EVANS: Yeah.

00:12:21.581 --> 00:12:25.540
You can just go to the
project on GitHub.

00:12:25.540 --> 00:12:26.300
Give it a download.

00:12:26.300 --> 00:12:27.490
There's plenty of
documentation.

00:12:27.490 --> 00:12:30.830
I got a bunch of videos I've
done that walk you through

00:12:30.830 --> 00:12:34.160
different approaches to how to
set up programs with it.

00:12:34.160 --> 00:12:35.380
And just give it a try.

00:12:35.380 --> 00:12:36.040
Give me some feedback.

00:12:36.040 --> 00:12:40.230
I will say, as just a caveat,
that it currently only works

00:12:40.230 --> 00:12:44.120
with Dartium and the latest
builds of Chromium.

00:12:44.120 --> 00:12:49.610
And that's because I'm using the
latest HTML5, CSS3 APIs--

00:12:49.610 --> 00:12:51.360
the very latest--

00:12:51.360 --> 00:12:52.690
to make some of those
layouts happen.

00:12:52.690 --> 00:12:54.720
So just that one caveat.

00:12:54.720 --> 00:12:56.260
But aside from that
give it a try.

00:12:56.260 --> 00:12:57.910
I'd love to hear
some feedback.

00:12:57.910 --> 00:13:01.020
SETH LADD: Well, Dart is
certainly looking at helping

00:13:01.020 --> 00:13:03.580
developers from all different
platforms--

00:13:03.580 --> 00:13:07.620
non-endemic web developers, that
is, to be successful and

00:13:07.620 --> 00:13:09.330
develop really high
performance,

00:13:09.330 --> 00:13:10.220
full-featured apps.

00:13:10.220 --> 00:13:14.640
And I think that implies
a strong, easy to use,

00:13:14.640 --> 00:13:16.530
client-side, MVC-type
framework.

00:13:16.530 --> 00:13:20.070
And that's where I think
Buckshot fits in.

00:13:20.070 --> 00:13:23.270
So Adam, I need to ask, you've
been around in the Dart

00:13:23.270 --> 00:13:25.910
community for quite a while And
you always seem to be able

00:13:25.910 --> 00:13:30.790
to pick out all those commits,
almost right when they happen.

00:13:30.790 --> 00:13:32.780
Tell me how do you do that?

00:13:32.780 --> 00:13:34.030
ADAM SMITH: Late nights.

00:13:36.210 --> 00:13:40.630
I signed up, I get the emails
from the issue tracker.

00:13:40.630 --> 00:13:43.650
And I just kind of scan through
just the commit title.

00:13:43.650 --> 00:13:46.130
And usually there's enough
description to find out if

00:13:46.130 --> 00:13:48.435
there's something interesting
in that commit.

00:13:48.435 --> 00:13:51.400
And a lot of the hot things like
finding out when mirrors

00:13:51.400 --> 00:13:54.230
are gonna come, or what the
mirror API is gonna look like,

00:13:54.230 --> 00:13:56.780
or what the change is, what
isolates are coming.

00:13:56.780 --> 00:14:00.950
They kind of just pop out
in those commit logs.

00:14:00.950 --> 00:14:03.230
Once I see them, I like to share
them with everyone else.

00:14:03.230 --> 00:14:07.130
Because going through the amount
of commits that go into

00:14:07.130 --> 00:14:10.960
Dart is so much, it's really
hard for everyone in the

00:14:10.960 --> 00:14:12.460
community to keep up with it.

00:14:12.460 --> 00:14:16.210
So I pull them out and I post
them on G+ because I feel like

00:14:16.210 --> 00:14:19.240
the general community wants
to see some of those.

00:14:19.240 --> 00:14:21.890
Even though they're all really
good commits, you just can't

00:14:21.890 --> 00:14:24.390
go through all of them.

00:14:24.390 --> 00:14:25.200
SETH LADD: Yeah, well
we definitely

00:14:25.200 --> 00:14:27.390
appreciate the service.

00:14:27.390 --> 00:14:27.650
You're right.

00:14:27.650 --> 00:14:29.080
There's a tremendous
amount of commits.

00:14:29.080 --> 00:14:31.180
And for those who don't
know, Dart is

00:14:31.180 --> 00:14:32.450
an open source project.

00:14:32.450 --> 00:14:37.140
So you can follow along in our
master subversion repository.

00:14:37.140 --> 00:14:39.790
And then we have mirrors over
into GitHub there as well.

00:14:39.790 --> 00:14:43.420
So if reading commits all
day isn't your thing,

00:14:43.420 --> 00:14:45.620
follow Adam on G+.

00:14:45.620 --> 00:14:49.310
And yeah, he does seem to pick
out the gems, the new

00:14:49.310 --> 00:14:50.240
interesting things,
like mirrors for

00:14:50.240 --> 00:14:51.250
reflection, and isolates.

00:14:51.250 --> 00:14:52.170
This is all good stuff.

00:14:52.170 --> 00:14:54.780
And I know a lot of us are
waiting with bated breath for

00:14:54.780 --> 00:14:56.280
these things to land.

00:14:56.280 --> 00:14:58.901
So thanks for that, Adam.

00:14:58.901 --> 00:15:01.840
While we're chatting with you,
so you participated in the

00:15:01.840 --> 00:15:03.790
Mountain View Dart Hackathon.

00:15:03.790 --> 00:15:07.580
And you built a Redis
database driver and

00:15:07.580 --> 00:15:08.630
kind of a front end.

00:15:08.630 --> 00:15:10.280
Tell us a little bit about
what you built and

00:15:10.280 --> 00:15:11.275
what did you learn?

00:15:11.275 --> 00:15:11.700
ADAM SMITH: Yeah.

00:15:11.700 --> 00:15:12.600
It was really fun.

00:15:12.600 --> 00:15:14.730
We were a team of five people.

00:15:14.730 --> 00:15:17.027
And I was kind of helping lead
the team because I had the

00:15:17.027 --> 00:15:18.050
experience with Dart.

00:15:18.050 --> 00:15:21.180
The other developers came from
backgrounds of Java,

00:15:21.180 --> 00:15:23.920
JavaScript, I think Python.

00:15:23.920 --> 00:15:26.840
And they really just picked
up Dart right away.

00:15:26.840 --> 00:15:30.130
So in this project it was to
do an implementation of a

00:15:30.130 --> 00:15:36.110
front end and back end in Dart
using Redis as your key value

00:15:36.110 --> 00:15:40.575
store and then using some nice
features of HTML5 and CSS as

00:15:40.575 --> 00:15:41.135
your front end.

00:15:41.135 --> 00:15:44.710
So the front end would run
Dart and it would be this

00:15:44.710 --> 00:15:46.840
virtual Linux terminal.

00:15:46.840 --> 00:15:49.800
And you would send commands in
the terminal, but it's really

00:15:49.800 --> 00:15:51.867
just a web browser with
a text input and

00:15:51.867 --> 00:15:54.260
some really nice CSS.

00:15:54.260 --> 00:16:00.870
And do an XHR request out to a
Dart server that runs on local

00:16:00.870 --> 00:16:02.790
host through the Dart VM.

00:16:02.790 --> 00:16:06.580
And then take those and then
proxy the commands to the

00:16:06.580 --> 00:16:08.060
Redis service.

00:16:08.060 --> 00:16:12.160
Which the Redis service ran
over a raw socket--

00:16:12.160 --> 00:16:16.260
well, you know, a TCP
socket with its own

00:16:16.260 --> 00:16:17.805
type of binary format.

00:16:17.805 --> 00:16:22.970
A very simple binary format,
but easy to use.

00:16:22.970 --> 00:16:25.370
It was nice to see that you're
playing with raw sockets on

00:16:25.370 --> 00:16:28.820
the server side, dealing with
binary communications between

00:16:28.820 --> 00:16:31.730
a different service that's
written in native code or

00:16:31.730 --> 00:16:35.410
written in something, and then
sending all that information

00:16:35.410 --> 00:16:38.270
back up through the Dart
web server into

00:16:38.270 --> 00:16:40.210
the Dart web client.

00:16:40.210 --> 00:16:43.698
So it was a nice way to see
information pass from a user

00:16:43.698 --> 00:16:46.010
all the way down to a system.

00:16:46.010 --> 00:16:49.140
SETH LADD: And that's such an
excellent point that at first

00:16:49.140 --> 00:16:50.230
it wasn't very clear.

00:16:50.230 --> 00:16:51.780
And we're talking about
Dart as a language

00:16:51.780 --> 00:16:53.200
targeting web maps.

00:16:53.200 --> 00:16:56.350
But Dart does ship with a
virtual machine that you can

00:16:56.350 --> 00:16:58.130
run right on the command line,
right on the server.

00:16:58.130 --> 00:17:00.530
And so it's enabled a suite
of Dart apps now

00:17:00.530 --> 00:17:01.370
running on the server.

00:17:01.370 --> 00:17:02.560
You have Dart running
on the client.

00:17:02.560 --> 00:17:06.560
And I know that for your
project, you're running both

00:17:06.560 --> 00:17:07.940
Dart on the client
and the server.

00:17:07.940 --> 00:17:08.970
Is that right?

00:17:08.970 --> 00:17:11.300
What are some of the things you
had to build, open source,

00:17:11.300 --> 00:17:14.200
library-wise, to make
that happen?

00:17:14.200 --> 00:17:16.479
LARS TACKMANN: Basically, the
Amazon integration layer was

00:17:16.479 --> 00:17:17.574
not completely done yet.

00:17:17.574 --> 00:17:18.860
We are waiting for
a few things to

00:17:18.860 --> 00:17:20.140
happen in the Dart VM.

00:17:20.140 --> 00:17:25.128
But that was our main thing for
using Amazon DynamoDB and

00:17:25.128 --> 00:17:29.410
S3, and SQL SQS, the
queue service.

00:17:29.410 --> 00:17:33.360
So basically we just had
to get some [INAUDIBLE]

00:17:33.360 --> 00:17:37.130
reporting to the VM, which
landed really, really quickly.

00:17:37.130 --> 00:17:38.770
I think it was like
a week after.

00:17:38.770 --> 00:17:41.430
So [INAUDIBLE] really cool,
but [INAUDIBLE].

00:17:41.430 --> 00:17:46.971
And that's what we
[INAUDIBLE].

00:17:46.971 --> 00:17:51.970
We're going to use it more as
soon as it lands in the VM.

00:17:51.970 --> 00:17:54.340
JOHN EVANS: Yeah, I think as
Dart matures you're gonna see

00:17:54.340 --> 00:17:56.720
a lot more end-to-end
solution sets.

00:17:56.720 --> 00:17:59.720
Because that story of having
the same language on the

00:17:59.720 --> 00:18:02.300
client server is really,
really strong.

00:18:02.300 --> 00:18:05.580
I don't think that's really come
to the fore yet because

00:18:05.580 --> 00:18:08.560
there isn't that whole
tie-through that's clean.

00:18:08.560 --> 00:18:10.372
But, wow, it's going
to be great when

00:18:10.372 --> 00:18:11.200
you have that, right?

00:18:11.200 --> 00:18:13.480
Instead of having to have three
different tools, you can

00:18:13.480 --> 00:18:15.660
just work in one code base
and make it happen in

00:18:15.660 --> 00:18:16.610
from stem to stern.

00:18:16.610 --> 00:18:17.920
I'm looking forward to it.

00:18:17.920 --> 00:18:19.960
SETH LADD: That's definitely
part of the vision.

00:18:19.960 --> 00:18:23.630
In fact, one of the use cases we
kick around here is, Can we

00:18:23.630 --> 00:18:26.680
use the isolates abstraction
as the way to communicate

00:18:26.680 --> 00:18:28.060
between client and server?

00:18:28.060 --> 00:18:30.390
Much like you can use the
isolate abstraction to

00:18:30.390 --> 00:18:32.120
communicate between--

00:18:32.120 --> 00:18:35.010
like intra-application
communications.

00:18:35.010 --> 00:18:37.260
Can you do inter-application
communication?

00:18:37.260 --> 00:18:40.330
I think, not only can you use
the same language in two

00:18:40.330 --> 00:18:42.040
different worlds, server
and client.

00:18:42.040 --> 00:18:44.810
Can you use the same
abstractions between

00:18:44.810 --> 00:18:46.060
client-client and
client server.

00:18:46.060 --> 00:18:48.080
So, yeah, I'm hoping for that.

00:18:48.080 --> 00:18:49.780
JOHN EVANS: I've heard Gilad
talk about that a couple of

00:18:49.780 --> 00:18:50.600
times on his videos.

00:18:50.600 --> 00:18:51.970
And that's a really
cool thing.

00:18:51.970 --> 00:18:53.380
If we can make that happen
with isolates

00:18:53.380 --> 00:18:54.430
that's going to be great.

00:18:54.430 --> 00:18:54.710
SETH LADD: Yeah.

00:18:54.710 --> 00:18:57.620
Well I think the semantics
basically work in posting

00:18:57.620 --> 00:19:00.720
messages, waiting for
returns on ports.

00:19:00.720 --> 00:19:03.660
But the thing that always comes
up in my mind is, I

00:19:03.660 --> 00:19:07.280
think to really achieve this
vision of a more unified

00:19:07.280 --> 00:19:10.270
environment and client server,
I think we need to do better

00:19:10.270 --> 00:19:13.850
at unifying our libraries across
client and server.

00:19:13.850 --> 00:19:16.240
I know that John McCutchan, this
is something that I think

00:19:16.240 --> 00:19:17.780
you've been recently
thinking about in

00:19:17.780 --> 00:19:20.110
terms of the byte arrays.

00:19:20.110 --> 00:19:23.110
And can you talk a little bit
about the work you've done in

00:19:23.110 --> 00:19:28.830
the Dart Vector Math library and
anything in terms of using

00:19:28.830 --> 00:19:32.060
those byte arrays across client
and/or server, or both?

00:19:32.060 --> 00:19:33.490
JOHN MCCUTCHAN: Sure.

00:19:33.490 --> 00:19:35.887
So first off, I'll talk about
using them in the client and

00:19:35.887 --> 00:19:37.340
the server.

00:19:37.340 --> 00:19:41.540
The issue right now is that
there are two different types.

00:19:41.540 --> 00:19:43.500
One is float 32 list,
and that's

00:19:43.500 --> 00:19:44.890
available on the server.

00:19:44.890 --> 00:19:47.350
And the other is float
32 array, and that

00:19:47.350 --> 00:19:49.860
comes from Dart HTML.

00:19:49.860 --> 00:19:53.720
The semantics of both of these
are practically identical.

00:19:53.720 --> 00:19:58.930
So it's a little bit tricky to
ship a library right now where

00:19:58.930 --> 00:20:01.750
you're using float 32 arrays
or float 32 list.

00:20:01.750 --> 00:20:06.100
Because there is like a fence
dividing these two worlds.

00:20:06.100 --> 00:20:10.550
So anything that can be done
to bring them together and

00:20:10.550 --> 00:20:13.780
have a common subset that works
on both the server and

00:20:13.780 --> 00:20:17.280
the browser would be
very beneficial.

00:20:17.280 --> 00:20:20.960
Speaking to what I've been doing
with float 32 arrays

00:20:20.960 --> 00:20:23.330
with Dart Vector Math.

00:20:23.330 --> 00:20:26.390
Last weekend, I started doing
some benchmarking of Dart

00:20:26.390 --> 00:20:31.630
Vector Math and comparing it
with a port of GL Matrix.js to

00:20:31.630 --> 00:20:33.150
the Dart language.

00:20:33.150 --> 00:20:36.400
I noticed immediately that there
was a huge performance

00:20:36.400 --> 00:20:38.990
advantage towards Dart
Vector Math.

00:20:38.990 --> 00:20:41.230
But it didn't actually make that
much sense when you start

00:20:41.230 --> 00:20:42.780
to look into the code.

00:20:42.780 --> 00:20:45.380
Because it's a four-by-four
matrix multiplication

00:20:45.380 --> 00:20:48.290
operation, the code is
the same everywhere.

00:20:48.290 --> 00:20:51.280
There's not a lot of
variation here.

00:20:51.280 --> 00:20:53.540
And looking at the dis-assembly
you can see that

00:20:53.540 --> 00:20:57.710
the VM right now doesn't inline
accesses to float 32

00:20:57.710 --> 00:21:00.740
array elements.

00:21:00.740 --> 00:21:04.060
I've heard back from some of the
VM engineers that it will

00:21:04.060 --> 00:21:04.840
in the near future.

00:21:04.840 --> 00:21:07.480
So that's great.

00:21:07.480 --> 00:21:11.100
But there's another benefit to
using float 32 arrays versus

00:21:11.100 --> 00:21:12.020
native Dart objects.

00:21:12.020 --> 00:21:14.620
And that's what WebGL
expects--

00:21:14.620 --> 00:21:17.820
uniform values to be passed
into it-- is as a float 32

00:21:17.820 --> 00:21:22.740
array, not a native
Dart object.

00:21:22.740 --> 00:21:24.560
SETH LADD: I think it's
important to reiterate that

00:21:24.560 --> 00:21:27.260
it's very early days for
the whole project.

00:21:27.260 --> 00:21:30.100
It's still in technology
preview, which means we're

00:21:30.100 --> 00:21:31.100
changing stuff a lot.

00:21:31.100 --> 00:21:34.000
I mean, as we were talking
earlier with Adam, keeping up

00:21:34.000 --> 00:21:34.610
with everything.

00:21:34.610 --> 00:21:37.430
And performance is definitely
one of those areas where we

00:21:37.430 --> 00:21:40.130
know we have particular
areas in mind that

00:21:40.130 --> 00:21:41.270
we're going to visit.

00:21:41.270 --> 00:21:45.150
We know that there is further
research to do there.

00:21:45.150 --> 00:21:50.630
And so the kind of early work
that you're doing, John,

00:21:50.630 --> 00:21:53.860
really helps us get to
where we want to get.

00:21:53.860 --> 00:21:58.235
But yeah, we definitely have
work to go to improve it.

00:21:58.235 --> 00:22:01.500
JOHN MCCUTCHAN: Of course,
it's very, very early.

00:22:01.500 --> 00:22:06.430
But following on to this work,
I also started work on a SIMD

00:22:06.430 --> 00:22:09.980
operations library embedded
into the VM.

00:22:09.980 --> 00:22:13.560
So this takes the float 32
arrays and uses the SIMD

00:22:13.560 --> 00:22:15.910
instruction sets available
on the CPU.

00:22:15.910 --> 00:22:20.240
And the code that I posted is
SSE, but it could work on

00:22:20.240 --> 00:22:21.960
other platforms as well.

00:22:21.960 --> 00:22:25.860
This is very fast and works very
nicely with the float 32

00:22:25.860 --> 00:22:29.320
array abstraction available
in Dart.

00:22:29.320 --> 00:22:29.760
SETH LADD: Cool.

00:22:29.760 --> 00:22:31.580
We did see that patch,
and that's awesome.

00:22:31.580 --> 00:22:32.230
It was really cool.

00:22:32.230 --> 00:22:33.700
It sparked a lot of
discussions here.

00:22:33.700 --> 00:22:36.740
And it certainly is a lot
of work to go there.

00:22:36.740 --> 00:22:39.750
But we hope that the discussions
continue with

00:22:39.750 --> 00:22:43.620
features like that, which move
us above and beyond what's

00:22:43.620 --> 00:22:46.590
available in web programming
today.

00:22:46.590 --> 00:22:49.420
So thanks for kicking
that off.

00:22:49.420 --> 00:22:50.910
JOHN MCCUTCHAN: It's
a lot of fun.

00:22:50.910 --> 00:22:52.440
SETH LADD: Chris, I'd like to
hear more about the book that

00:22:52.440 --> 00:22:53.020
you're writing.

00:22:53.020 --> 00:22:57.620
I mean, Dart is so young and
changing all the time, how are

00:22:57.620 --> 00:22:59.530
you compensating with that?

00:22:59.530 --> 00:23:01.350
CHRIS BUCKETT: Yeah.

00:23:01.350 --> 00:23:04.920
So what I'm sort of trying
to do with the book is--

00:23:04.920 --> 00:23:06.530
although it's going through
and it's teaching

00:23:06.530 --> 00:23:08.970
Dart as core concepts.

00:23:08.970 --> 00:23:11.610
So you've got the classes,
you've got types, you've got

00:23:11.610 --> 00:23:14.090
things that people who are
coming from C Sharp or Java

00:23:14.090 --> 00:23:16.580
will be comfortable with.

00:23:16.580 --> 00:23:17.940
But you've also got things
that people coming from

00:23:17.940 --> 00:23:19.840
JavaScript might not be
comfortable with.

00:23:19.840 --> 00:23:21.610
You've got the vice-versa,
as well.

00:23:21.610 --> 00:23:24.940
The dynamic typing that Java and
C Sharp developers won't

00:23:24.940 --> 00:23:28.480
necessarily be so comfortable
with, but JavaScript

00:23:28.480 --> 00:23:29.750
developers will be
comfortable with.

00:23:29.750 --> 00:23:32.650
And so it's sort of bringing
those two worlds together in

00:23:32.650 --> 00:23:33.080
the form of Dart.

00:23:33.080 --> 00:23:38.910
So although Dart is changing
and it has evolved over the

00:23:38.910 --> 00:23:43.500
last few months, the core
concepts are all still the

00:23:43.500 --> 00:23:46.930
same, in terms of the optional
typing, the class system, the

00:23:46.930 --> 00:23:49.090
interfaces, so on
and so forth.

00:23:49.090 --> 00:23:55.080
And so in terms of keeping the
book current while Dart is

00:23:55.080 --> 00:23:57.950
changing is proving--

00:23:57.950 --> 00:23:58.990
it's not easy.

00:23:58.990 --> 00:24:06.220
But I think that I'm sort of
splitting it up nicely.

00:24:06.220 --> 00:24:09.650
So we've got a client part of
the book, a server part of the

00:24:09.650 --> 00:24:12.090
book, the core components
in terms of

00:24:12.090 --> 00:24:13.560
classes and type systems.

00:24:13.560 --> 00:24:17.010
It fully advocates the
single-page, application type

00:24:17.010 --> 00:24:22.060
architecture, which Dart's
main use case

00:24:22.060 --> 00:24:24.310
really is, I think.

00:24:24.310 --> 00:24:27.230
It's designed for building
proper web applications as

00:24:27.230 --> 00:24:29.650
opposed to interactive
websites.

00:24:29.650 --> 00:24:31.450
Although there's nothing to
stop you using it for

00:24:31.450 --> 00:24:32.340
interactive websites.

00:24:32.340 --> 00:24:36.360
It's a great platform,
almost like the next

00:24:36.360 --> 00:24:38.295
step from GWT Grid.

00:24:38.295 --> 00:24:39.180
[INAUDIBLE]

00:24:39.180 --> 00:24:42.120
to produce proper
line-of-business applications,

00:24:42.120 --> 00:24:46.420
games, and anything
in between.

00:24:46.420 --> 00:24:48.570
SETH LADD: Well, you mentioned
optional typing as one of

00:24:48.570 --> 00:24:51.910
those new, kind of core concepts
to the language.

00:24:51.910 --> 00:24:55.090
And I'd love to hear actually
from the panel about how you

00:24:55.090 --> 00:24:57.160
were able to approach
optional typing.

00:24:57.160 --> 00:24:58.730
Is it something that
clicked right away?

00:24:58.730 --> 00:25:03.380
Is it something that took a
little while to feel around?

00:25:03.380 --> 00:25:06.180
John Evans, let's just
start with you.

00:25:06.180 --> 00:25:07.910
JOHN EVANS: It didn't click
right away to me.

00:25:07.910 --> 00:25:11.370
But the good thing was,
there was a couple of

00:25:11.370 --> 00:25:12.970
good videos out there.

00:25:12.970 --> 00:25:15.860
And certainly the mailing
list really helped for

00:25:15.860 --> 00:25:17.770
that type of stuff.

00:25:17.770 --> 00:25:21.225
Coming from a strongly
statically typed language like

00:25:21.225 --> 00:25:26.490
the .Net family, I didn't
understand the decoupling

00:25:26.490 --> 00:25:27.340
there, at first.

00:25:27.340 --> 00:25:31.420
But once you understand that
types are really just

00:25:31.420 --> 00:25:35.860
annotations in Dart, everything
at the run time is

00:25:35.860 --> 00:25:40.780
not semantically tied to that,
then you're OK with it.

00:25:40.780 --> 00:25:43.530
Then you use it as a tool
in development cycle.

00:25:43.530 --> 00:25:47.160
And so I use it to help me check
my mistakes, as John was

00:25:47.160 --> 00:25:49.630
talking about earlier,
while I'm developing.

00:25:49.630 --> 00:25:51.840
But when I feel comfortable with
the code and I have unit

00:25:51.840 --> 00:25:54.860
tests behind that to back it up,
you can back all that out

00:25:54.860 --> 00:25:58.350
and just keep your local methods
and operations very

00:25:58.350 --> 00:26:04.250
clean and very succinct
by not using types.

00:26:04.250 --> 00:26:08.750
So, yeah I think that a little
learning cycle, but once you

00:26:08.750 --> 00:26:10.060
get through that--

00:26:10.060 --> 00:26:12.120
And certainly there's plenty of
good information out there

00:26:12.120 --> 00:26:14.390
of what optional typing
is, and so on.

00:26:14.390 --> 00:26:20.530
So now I use it and I'm very
comfortable with it.

00:26:20.530 --> 00:26:22.250
SETH LADD: I guess the question
is-- and I'll start

00:26:22.250 --> 00:26:25.070
with you, Lars-- is, What's
the benefit of

00:26:25.070 --> 00:26:27.750
optional static types?

00:26:27.750 --> 00:26:29.380
Now that you've gotten your
head wrapped around

00:26:29.380 --> 00:26:31.580
it, do you like it?

00:26:31.580 --> 00:26:33.520
And does it buy you anything?

00:26:33.520 --> 00:26:34.810
LARS TACKMANN: I really
liked it.

00:26:34.810 --> 00:26:40.010
But also having done a bit of C
Sharp programing, it really

00:26:40.010 --> 00:26:42.930
just reminds me of how
[INAUDIBLE] variables are used

00:26:42.930 --> 00:26:46.240
in C Sharp, but in a
more loose manner.

00:26:46.240 --> 00:26:49.450
So I think I caught up with
it fairly quickly.

00:26:49.450 --> 00:26:52.540
And mostly in the [INAUDIBLE]
is just added for type

00:26:52.540 --> 00:26:53.715
information, to get
tab completion,

00:26:53.715 --> 00:26:55.450
and to catch errors.

00:26:55.450 --> 00:27:00.420
But I think that it's almost
become so good that it

00:27:00.420 --> 00:27:03.850
actually catches most of
those errors anyway.

00:27:03.850 --> 00:27:07.460
And particularly if you run it
in check mode then most of the

00:27:07.460 --> 00:27:11.690
time you can just move the
type, at least for the

00:27:11.690 --> 00:27:12.940
variables you assign
immediately.

00:27:15.740 --> 00:27:20.350
SETH LADD: And maybe, John
McCutchan or Adam, if you

00:27:20.350 --> 00:27:22.520
remove those types and you
use var, what's the

00:27:22.520 --> 00:27:23.530
advantage to you guys?

00:27:23.530 --> 00:27:24.920
Or do you even do that?

00:27:24.920 --> 00:27:25.390
ADAM SMITH: I do.

00:27:25.390 --> 00:27:28.640
You know, when I'm doing
samples, I pretty much use the

00:27:28.640 --> 00:27:32.230
types for the ID and the
tools to really tell me

00:27:32.230 --> 00:27:32.980
what's going on.

00:27:32.980 --> 00:27:38.430
And I jumped in it without
having my prior background

00:27:38.430 --> 00:27:39.980
influence the way I
was doing things.

00:27:39.980 --> 00:27:42.147
I'm like, I'm just going to do
things the way they say-- use

00:27:42.147 --> 00:27:45.910
types, don't use types,
see how it works out.

00:27:45.910 --> 00:27:48.440
And I found a lot of times
when I just want a code

00:27:48.440 --> 00:27:50.730
through something really fast,
and I just want to get

00:27:50.730 --> 00:27:51.686
something running right
away, I don't have

00:27:51.686 --> 00:27:52.840
to worry about types.

00:27:52.840 --> 00:27:54.196
I don't have to be concerned.

00:27:54.196 --> 00:27:57.240
And then I can go back and do
unit tests or testing, or even

00:27:57.240 --> 00:27:58.790
add types later as
I need them.

00:27:58.790 --> 00:28:02.070
Or if it's something public
facing, it makes a lot of

00:28:02.070 --> 00:28:04.950
sense to have types to just
show off what it does.

00:28:04.950 --> 00:28:07.878
But it doesn't really
interfere in

00:28:07.878 --> 00:28:11.110
your internal calls.

00:28:11.110 --> 00:28:14.500
I just kind of said, let me go
with it and see what happens.

00:28:14.500 --> 00:28:17.380
And I think with that approach,
I didn't feel like I

00:28:17.380 --> 00:28:19.480
got burned in any way.

00:28:19.480 --> 00:28:23.260
I didn't have any kind of
rigidosity against types or

00:28:23.260 --> 00:28:24.050
not having types.

00:28:24.050 --> 00:28:25.772
I just went with the flow.

00:28:25.772 --> 00:28:26.950
And I really like it.

00:28:26.950 --> 00:28:30.200
It kind of just makes sense,
if that's possible.

00:28:30.200 --> 00:28:32.892
JOHN MCCUTCHAN: Adam, I think
you really hit the nail on the

00:28:32.892 --> 00:28:33.780
head there.

00:28:33.780 --> 00:28:37.000
I really like types for
public interfaces.

00:28:37.000 --> 00:28:40.590
That's, to me, I think, one of
the biggest wins that you get

00:28:40.590 --> 00:28:43.850
with Dart, is that you can
really advertise strictly what

00:28:43.850 --> 00:28:47.710
your library's API is
going to accept.

00:28:47.710 --> 00:28:50.910
And you also hit it on the head
when you said that you

00:28:50.910 --> 00:28:53.590
can ignore types and
go really quickly.

00:28:53.590 --> 00:28:55.390
I like that when I'm just
playing around, it doesn't

00:28:55.390 --> 00:28:57.640
matter, I can just throw
var everywhere.

00:28:57.640 --> 00:29:00.610
And then once I'm satisfied with
the code and I want to

00:29:00.610 --> 00:29:05.520
really clean it up so that it's
consumable by other parts

00:29:05.520 --> 00:29:08.950
of my application library,
that's when I start to really

00:29:08.950 --> 00:29:10.180
annotate with types.

00:29:10.180 --> 00:29:16.470
But in the public API, having
types there is excellent.

00:29:16.470 --> 00:29:18.070
SETH LADD: I really, really
appreciate that when I'm

00:29:18.070 --> 00:29:21.610
trying to port or work with old
JavaScript code that I've

00:29:21.610 --> 00:29:22.500
written a long time ago.

00:29:22.500 --> 00:29:25.070
And I'm usually in reading the
method to figure out just the

00:29:25.070 --> 00:29:25.790
heck I was doing.

00:29:25.790 --> 00:29:30.990
And just having the types is
such a fantastic benefit in

00:29:30.990 --> 00:29:33.320
productivity, and really
maintenance.

00:29:33.320 --> 00:29:37.050
And I think that that's the
real test of a platform or

00:29:37.050 --> 00:29:38.140
language is--

00:29:38.140 --> 00:29:41.980
most languages you can get
dirty, get something running,

00:29:41.980 --> 00:29:44.070
without even really knowing
what you're doing, you get

00:29:44.070 --> 00:29:45.010
some results.

00:29:45.010 --> 00:29:48.700
But how quick is that transition
to maintenance?

00:29:48.700 --> 00:29:50.260
And what's the experience
like when you're

00:29:50.260 --> 00:29:51.520
in maintenance mode?

00:29:51.520 --> 00:29:54.780
To me kind of separates the
languages into fun toy or

00:29:54.780 --> 00:29:57.650
something I can actually
do something with.

00:29:57.650 --> 00:30:01.110
And the tools of Dart, like
the editor, and then these

00:30:01.110 --> 00:30:03.695
refactoring abilities, and then
the type annotation, at

00:30:03.695 --> 00:30:06.280
least for me mean that when I'm
in that maintenance mode,

00:30:06.280 --> 00:30:08.190
it's actually a decent
experience.

00:30:08.190 --> 00:30:10.620
And it's something like,
I'm not afraid of going

00:30:10.620 --> 00:30:11.926
back to that code.

00:30:11.926 --> 00:30:14.340
So that I'm really happy with.

00:30:14.340 --> 00:30:15.720
JOHN EVANS: Yeah, I would
second that, Seth.

00:30:15.720 --> 00:30:19.010
You know, Buckshot is over
25,000 lines now.

00:30:19.010 --> 00:30:21.280
And so when I go back
into something--

00:30:21.280 --> 00:30:22.940
I'm writing something new.

00:30:22.940 --> 00:30:26.890
Something that I wrote six
months ago, now I get warnings

00:30:26.890 --> 00:30:30.450
in the editor if I've forgotten
my old API, even.

00:30:30.450 --> 00:30:31.910
So that's a big help
on the maintenance

00:30:31.910 --> 00:30:33.414
cycle, you're right.

00:30:33.414 --> 00:30:33.796
LARS TACKMANN: Yeah man.

00:30:33.796 --> 00:30:34.650
It's definitely also--

00:30:34.650 --> 00:30:37.980
I've been developing large
scale, client-side web apps

00:30:37.980 --> 00:30:39.740
for a number of years now.

00:30:39.740 --> 00:30:42.842
And when you do a web app
in JavaScript, you can

00:30:42.842 --> 00:30:43.775
definitely do that.

00:30:43.775 --> 00:30:46.663
But it starts getting a pain
when you go above like 20,000

00:30:46.663 --> 00:30:48.440
lines of code, or something
like that.

00:30:48.440 --> 00:30:49.830
It's hard to refactor it.

00:30:49.830 --> 00:30:53.330
And with Dart I have also
a lot of code and we are

00:30:53.330 --> 00:30:55.300
constantly moving it around.

00:30:55.300 --> 00:30:56.670
I don't mind doing
that at all.

00:30:56.670 --> 00:30:59.870
And when you get a couple of
errors, and you fix it, then

00:30:59.870 --> 00:31:01.290
you are back.

00:31:01.290 --> 00:31:03.410
So it's a huge advantage.

00:31:03.410 --> 00:31:05.960
So that's why I'm sprinkling
types all over--

00:31:05.960 --> 00:31:06.710
SETH LADD: Yeah.

00:31:06.710 --> 00:31:07.530
LARS TACKMANN: To get that.

00:31:07.530 --> 00:31:08.030
SETH LADD: Cool.

00:31:08.030 --> 00:31:10.190
Well, that's definitely
the vision.

00:31:10.190 --> 00:31:12.410
Glad to hear it's working.

00:31:12.410 --> 00:31:14.990
So here's the portion of the
show where I want to hear some

00:31:14.990 --> 00:31:17.450
feedback from each one of you.

00:31:17.450 --> 00:31:19.410
What is one or two things
that you'd like the

00:31:19.410 --> 00:31:21.430
Dart team to know?

00:31:21.430 --> 00:31:22.960
What are some requests
from you?

00:31:22.960 --> 00:31:26.890
Because you're some of our most
prolific developers out

00:31:26.890 --> 00:31:30.010
there, we can check out your
GitHub, so it's definitely

00:31:30.010 --> 00:31:31.870
obvious you're active
on the mailing list.

00:31:31.870 --> 00:31:35.680
I think you know very well what
it is you need to go to

00:31:35.680 --> 00:31:36.690
even to that next level.

00:31:36.690 --> 00:31:39.790
So maybe we'll start with Adam
here and we'll work around.

00:31:39.790 --> 00:31:43.680
But is there anything that
you'd like to see next?

00:31:43.680 --> 00:31:48.126
Maybe a suggestion to re-bump
in the priority list.

00:31:48.126 --> 00:31:49.330
ADAM SMITH: Next I don't know.

00:31:49.330 --> 00:31:51.340
But there's one thing
long term that I

00:31:51.340 --> 00:31:52.610
think is very valuable.

00:31:52.610 --> 00:31:56.453
And I think Microsoft has
really, really hit it on the

00:31:56.453 --> 00:31:59.650
head with giving SDK samples--

00:31:59.650 --> 00:32:03.190
like thousands of samples,
if you go into the

00:32:03.190 --> 00:32:04.050
SDK developer kit.

00:32:04.050 --> 00:32:06.590
They got samples
for everything.

00:32:06.590 --> 00:32:09.005
I feel that's something that
really helps sell a platform

00:32:09.005 --> 00:32:12.340
and a language, When an
enterprise engineer can come

00:32:12.340 --> 00:32:15.160
and just take stuff right out
of the box and say, OK, this

00:32:15.160 --> 00:32:15.920
is what I need.

00:32:15.920 --> 00:32:17.680
Or, this is the direction
I go.

00:32:17.680 --> 00:32:19.500
Or, what's the proper way.

00:32:19.500 --> 00:32:21.850
I know that's a long
term thing.

00:32:21.850 --> 00:32:24.909
But it's just something I really
hope that the Dart team

00:32:24.909 --> 00:32:26.970
can take into consideration.

00:32:26.970 --> 00:32:28.940
SETH LADD: That's a
great suggestion.

00:32:28.940 --> 00:32:30.260
I think that will
come in time.

00:32:30.260 --> 00:32:31.900
And I totally hear you.

00:32:31.900 --> 00:32:33.250
We have some, in fact.

00:32:33.250 --> 00:32:36.310
Devon from the editor team
just cleaned up the stock

00:32:36.310 --> 00:32:37.480
samples that come
with the editor.

00:32:37.480 --> 00:32:39.430
And there's a couple of samples
that aren't readily

00:32:39.430 --> 00:32:41.690
faced in the editor.

00:32:41.690 --> 00:32:43.420
So I think it's more
on our radar now.

00:32:43.420 --> 00:32:45.690
And I think over time as things
settle down, I think

00:32:45.690 --> 00:32:49.970
there's still some library work
to do, then we can go

00:32:49.970 --> 00:32:50.800
full force on that.

00:32:50.800 --> 00:32:53.910
But I agree, I think most
developers want the cut and

00:32:53.910 --> 00:32:55.580
paste codebook-style thing.

00:32:55.580 --> 00:32:57.810
And so, yeah, great idea.

00:32:57.810 --> 00:33:00.862
ADAM SMITH: Immediately, though,
I think, mirrors is on

00:33:00.862 --> 00:33:02.840
the mind of a lot of people.

00:33:02.840 --> 00:33:05.640
That might provide the ability
for people to do even more

00:33:05.640 --> 00:33:08.220
innovative stuff with Dart,
and more kind of

00:33:08.220 --> 00:33:11.580
out of the box stuff.

00:33:11.580 --> 00:33:12.500
SETH LADD: Absolutely.

00:33:12.500 --> 00:33:14.990
OK, check plus one
for mirrors.

00:33:14.990 --> 00:33:15.920
Chris?

00:33:15.920 --> 00:33:16.420
CHRIS BUCKETT: Yeah.

00:33:16.420 --> 00:33:17.905
Plus one for mirrors.

00:33:17.905 --> 00:33:21.020
That's top of my list.

00:33:21.020 --> 00:33:25.370
Seriously, after that what I'd
really like to see-- and I

00:33:25.370 --> 00:33:29.700
think this is not necessarily
a blocker for people like us

00:33:29.700 --> 00:33:32.900
using it, but I think it's a
block at the moment for people

00:33:32.900 --> 00:33:35.260
using it for proper commercially
supported

00:33:35.260 --> 00:33:36.210
applications--

00:33:36.210 --> 00:33:38.650
is the language is still
fairly moving

00:33:38.650 --> 00:33:39.510
around quite a lot.

00:33:39.510 --> 00:33:43.070
And I think that although it's
is good to have people

00:33:43.070 --> 00:33:45.370
building stuff with it early
on while the language is

00:33:45.370 --> 00:33:47.860
moving cause it means you
guys get great feedback.

00:33:47.860 --> 00:33:50.640
It also means that some people
are wary of taking on a

00:33:50.640 --> 00:33:53.080
language that's so new and
still moving around.

00:33:53.080 --> 00:33:54.940
Because it means that code they
write today might not

00:33:54.940 --> 00:33:56.190
work in six months' time.

00:33:58.980 --> 00:34:00.230
There's not really an
easy answer to that.

00:34:02.386 --> 00:34:03.760
Go on.

00:34:03.760 --> 00:34:04.425
SETH LADD: Go ahead, John.

00:34:04.425 --> 00:34:06.220
JOHN EVANS: I was just saying
get it done faster, man,

00:34:06.220 --> 00:34:09.030
that's what he's saying.

00:34:09.030 --> 00:34:12.179
CHRIS BUCKETT: I think, like
going into maintenance mode.

00:34:12.179 --> 00:34:15.705
We've got software that we
wrote five years ago.

00:34:15.705 --> 00:34:18.440
And the customer's still asking
for changes on it.

00:34:18.440 --> 00:34:21.250
And at the moment, I couldn't
say, yes we'll go and write

00:34:21.250 --> 00:34:25.150
our next big project in Dart
with it as it is today.

00:34:25.150 --> 00:34:27.659
But I know that in six months'
time, or a year's time, we'd

00:34:27.659 --> 00:34:29.619
definitely say, Yeah go
and write it in Dart.

00:34:29.619 --> 00:34:30.659
SETH LADD: Yeah.

00:34:30.659 --> 00:34:33.030
CHRIS BUCKETT: For me, it
can't come soon enough.

00:34:33.030 --> 00:34:38.300
But obviously you guys need that
process to go through to

00:34:38.300 --> 00:34:40.719
get the feedback from us guys
picking up early on and

00:34:40.719 --> 00:34:42.370
building with it.

00:34:42.370 --> 00:34:42.700
SETH LADD: Yeah.

00:34:42.700 --> 00:34:46.250
And I know that getting to some
sort of milestone for the

00:34:46.250 --> 00:34:48.790
language, at least, so that the
implementations can catch

00:34:48.790 --> 00:34:51.679
up and the books don't have
to be changed every week.

00:34:51.679 --> 00:34:58.960
And once you have a language M1
event horizon, if you will,

00:34:58.960 --> 00:35:01.450
then with those assumptions
I think you can move on to

00:35:01.450 --> 00:35:04.520
second- and third-order type
problems in the system.

00:35:04.520 --> 00:35:07.900
And so you can go into
the issue tracker--

00:35:07.900 --> 00:35:10.780
for everyone at home-- you can
go into the issue tracker and

00:35:10.780 --> 00:35:14.710
filter on, I think,
milestone M1.

00:35:14.710 --> 00:35:17.700
And it'll give you a sense
of what made that cut.

00:35:17.700 --> 00:35:21.110
Now I don't really know exactly
what M1 means, but I

00:35:21.110 --> 00:35:24.200
believe it's a line in the sand
for things we're going to

00:35:24.200 --> 00:35:27.750
attack sooner versus things
we're going to attack later.

00:35:27.750 --> 00:35:31.620
But at least that idea of what's
in M1 is forming so you

00:35:31.620 --> 00:35:33.760
can kind of follow along
at home with that.

00:35:33.760 --> 00:35:35.920
So, yeah.

00:35:35.920 --> 00:35:39.150
I think we do appreciate,
though, having this kind of

00:35:39.150 --> 00:35:43.490
rare, possibly only, opportunity
to make backwards

00:35:43.490 --> 00:35:45.220
breaking changes.

00:35:45.220 --> 00:35:47.830
So that's just part
of the process.

00:35:47.830 --> 00:35:49.660
And you see it all because
it's open source.

00:35:49.660 --> 00:35:51.860
So it feels probably
extra painful.

00:35:51.860 --> 00:35:54.735
CHRIS BUCKETT: It's really good
comparing this to, say, C

00:35:54.735 --> 00:35:57.380
Sharp or other languages that
have been developed.

00:35:57.380 --> 00:36:00.180
Because Dart had been released
to the community so early on

00:36:00.180 --> 00:36:01.740
that people have actually been
able to get hands on, get

00:36:01.740 --> 00:36:03.660
dirty with it, even while
breaking changes

00:36:03.660 --> 00:36:04.740
are going on in there.

00:36:04.740 --> 00:36:08.370
And it's great that Google
have done this.

00:36:08.370 --> 00:36:09.180
ADAM SMITH: It's actually
very fun.

00:36:09.180 --> 00:36:11.730
I enjoy it, I think it's
very exciting.

00:36:11.730 --> 00:36:12.430
[OTHERS AGREE]

00:36:12.430 --> 00:36:13.190
SETH LADD: Cool.

00:36:13.190 --> 00:36:13.550
Appreciate that.

00:36:13.550 --> 00:36:17.324
John, what do you
need us to do?

00:36:17.324 --> 00:36:19.830
JOHN EVANS: Plus one
for mirrors.

00:36:19.830 --> 00:36:21.300
SETH LADD: OK.

00:36:21.300 --> 00:36:27.580
JOHN EVANS: So I think that in
order for me to build a truly

00:36:27.580 --> 00:36:30.730
comprehensive web application,
I'm really looking forward to

00:36:30.730 --> 00:36:34.390
that integration to the
Google API ecosystem.

00:36:37.090 --> 00:36:38.770
I got to get OAuth, right?

00:36:38.770 --> 00:36:42.080
I gotta get G+ and be able to
hook into those identities so

00:36:42.080 --> 00:36:44.690
you can bring that into
your application.

00:36:44.690 --> 00:36:47.150
Otherwise you're stuck
with really wonky

00:36:47.150 --> 00:36:48.060
workarounds right now.

00:36:48.060 --> 00:36:50.960
So I think that one is
probably getting--

00:36:50.960 --> 00:36:53.840
the pressure for that will start
to build as Dart moves

00:36:53.840 --> 00:36:54.790
towards M1, I think.

00:36:54.790 --> 00:36:59.160
Because people need that in
order to build a fully

00:36:59.160 --> 00:37:00.920
encompassed application.

00:37:00.920 --> 00:37:02.270
I think the second
thing that--

00:37:02.270 --> 00:37:06.170
For me, particularly working
in Buckshot, I'm obviously

00:37:06.170 --> 00:37:08.260
working in Dart HTML a lot.

00:37:08.260 --> 00:37:12.242
And I've seen that API mature
very well over the

00:37:12.242 --> 00:37:16.520
last almost year now.

00:37:16.520 --> 00:37:18.550
And I'd like to see,
obviously, more.

00:37:18.550 --> 00:37:20.390
I mean, more standardization,
more

00:37:20.390 --> 00:37:22.660
normalization across browsers.

00:37:22.660 --> 00:37:23.910
That's going to be
very important.

00:37:23.910 --> 00:37:25.230
And I know that's
a big challenge.

00:37:25.230 --> 00:37:27.540
Because there's a lot of
nuance between browser

00:37:27.540 --> 00:37:30.670
standards, even at the
very property level.

00:37:30.670 --> 00:37:36.080
But if Dart can make that happen
and make building a web

00:37:36.080 --> 00:37:38.610
application easier from
a cross-browser story

00:37:38.610 --> 00:37:40.210
standpoint, it's really
gonna be a win.

00:37:40.210 --> 00:37:41.320
Because that'll draw
people right away.

00:37:41.320 --> 00:37:45.420
A lot of the JavaScript stuff
now, those libraries do that

00:37:45.420 --> 00:37:46.760
for JavaScript developers.

00:37:46.760 --> 00:37:49.950
And if Dart has that batteries
included, it's going to be a

00:37:49.950 --> 00:37:50.750
really great story.

00:37:50.750 --> 00:37:52.280
So I'm excited about that.

00:37:52.280 --> 00:37:54.770
SETH LADD: I think that the team
is going to agree with

00:37:54.770 --> 00:37:56.080
you on that.

00:37:56.080 --> 00:37:58.370
I think it's a very real problem
that web developers

00:37:58.370 --> 00:38:00.820
face today is, how do you
deal with vendor prefix

00:38:00.820 --> 00:38:01.330
differences?

00:38:01.330 --> 00:38:03.660
How do you deal with
implementation differences?

00:38:03.660 --> 00:38:05.900
How do you deal with APIs
that may not even exist?

00:38:05.900 --> 00:38:08.570
And sometimes, we may not be
able to do anything about it.

00:38:08.570 --> 00:38:12.060
But I think in many of the
cases-- and as the poly-fill

00:38:12.060 --> 00:38:14.290
culture of JavaScript has shown
us, there are a lot of

00:38:14.290 --> 00:38:18.700
cases where you can write to a
standards compliant API shim,

00:38:18.700 --> 00:38:23.750
and help cover over-- spackle
over-- some of those

00:38:23.750 --> 00:38:25.630
differences.

00:38:25.630 --> 00:38:27.230
And yeah, so that's
a real problem.

00:38:27.230 --> 00:38:29.560
So why shouldn't Dart
help you solve that?

00:38:29.560 --> 00:38:33.010
So yeah, great feedback.

00:38:33.010 --> 00:38:34.450
John McCutchan.

00:38:34.450 --> 00:38:35.840
JOHN MCCUTCHAN: All right.

00:38:35.840 --> 00:38:37.680
I've been taking some notes.

00:38:37.680 --> 00:38:42.505
So unified binary data support
and some more--

00:38:45.780 --> 00:38:48.690
not more, but different
abstractions

00:38:48.690 --> 00:38:49.530
around binary data.

00:38:49.530 --> 00:38:52.310
Right now we have arrays
of typed data.

00:38:52.310 --> 00:38:56.700
But you might want to have a
ring buffer or some other

00:38:56.700 --> 00:39:00.430
types of containers for
storing binary data.

00:39:00.430 --> 00:39:05.210
SIMD operations on
float 32 arrays.

00:39:05.210 --> 00:39:09.430
And then, something that's maybe
up for discussion, is

00:39:09.430 --> 00:39:13.600
I'm starting to turn my
attention towards isolates and

00:39:13.600 --> 00:39:16.530
hiding libraries that I'm
writing behind isolates.

00:39:16.530 --> 00:39:18.640
And I have two main concerns.

00:39:18.640 --> 00:39:21.630
And I may just be wrong
about this.

00:39:21.630 --> 00:39:24.890
But I think I read somewhere on
the mailing list that there

00:39:24.890 --> 00:39:27.930
won't be support for passing
an arbitrary Dart object

00:39:27.930 --> 00:39:31.360
instance through one
isolate to another.

00:39:31.360 --> 00:39:34.330
And I really hope that
that does happen.

00:39:34.330 --> 00:39:39.270
I hope that any Dart object that
I can construct can be

00:39:39.270 --> 00:39:41.240
sent over to another isolate.

00:39:41.240 --> 00:39:42.440
That would make me
feel a lot more

00:39:42.440 --> 00:39:44.320
comfortable with isolates.

00:39:44.320 --> 00:39:48.430
And then passing ownership of
objects from one isolate to

00:39:48.430 --> 00:39:51.710
another efficiently, if they're
on the same machine,

00:39:51.710 --> 00:39:53.225
would be awesome.

00:39:53.225 --> 00:39:54.420
SETH LADD: Right.

00:39:54.420 --> 00:39:57.680
I think you're alluding to the
transferable typed arrays that

00:39:57.680 --> 00:40:01.300
the WebGL spec has
helped introduce.

00:40:01.300 --> 00:40:06.000
So I should probably say that
the isolates library is one of

00:40:06.000 --> 00:40:10.210
the less refactored libraries
in the system.

00:40:10.210 --> 00:40:13.330
I think that it's integral
to the Dart story.

00:40:13.330 --> 00:40:15.380
And there's a lot of
potential there.

00:40:15.380 --> 00:40:19.750
And I think we're trying to
get some of the more core

00:40:19.750 --> 00:40:22.730
things working before we
re-attack isolates.

00:40:22.730 --> 00:40:28.010
So I expect some more focus
on isolates in the future.

00:40:28.010 --> 00:40:29.500
And so this is good
feedback for us.

00:40:29.500 --> 00:40:29.840
But, yeah.

00:40:29.840 --> 00:40:32.620
I don't think what you see with
isolates today is our

00:40:32.620 --> 00:40:36.060
final vision by any means.

00:40:36.060 --> 00:40:38.250
So maybe I can ask a
follow up for you.

00:40:38.250 --> 00:40:42.300
And what is a use case or two
that is dictating some of

00:40:42.300 --> 00:40:44.780
these isolate based requests?

00:40:44.780 --> 00:40:47.810
JOHN MCCUTCHAN: So I'm working
right now on a graphics

00:40:47.810 --> 00:40:50.700
library that I want to run
as a separate thread,

00:40:50.700 --> 00:40:51.790
essentially.

00:40:51.790 --> 00:40:55.870
I want all of the object calling
to be done away from

00:40:55.870 --> 00:40:57.920
my main application.

00:40:57.920 --> 00:41:01.190
So basically that means that
I need my game logic to

00:41:01.190 --> 00:41:03.360
communicate back to the
rendering engine, which is

00:41:03.360 --> 00:41:06.120
running in whatever the
isolate happens

00:41:06.120 --> 00:41:07.362
to be running under.

00:41:07.362 --> 00:41:13.170
And I don't want to be limited
by how complex of a message I

00:41:13.170 --> 00:41:15.010
can send between the two.

00:41:15.010 --> 00:41:19.340
And I want to maximize my
performance, maybe generating

00:41:19.340 --> 00:41:20.085
a vertex buffer.

00:41:20.085 --> 00:41:23.395
And I want to pass that over
to the rendering engine.

00:41:23.395 --> 00:41:27.720
And I want to do that as
efficiently as possible.

00:41:27.720 --> 00:41:28.270
SETH LADD: OK, good.

00:41:28.270 --> 00:41:30.150
Good use cases.

00:41:30.150 --> 00:41:32.890
We'll finish up with Lars, here,
who has maybe written

00:41:32.890 --> 00:41:35.900
the most Dart code I've seen
outside of Google--

00:41:35.900 --> 00:41:38.950
possibly even also
including Google.

00:41:38.950 --> 00:41:41.350
What is something that you'd
like us to add that'd help you

00:41:41.350 --> 00:41:43.180
be more productive?

00:41:43.180 --> 00:41:45.030
LARS TACKMANN: What
I really miss is--

00:41:45.030 --> 00:41:47.720
I don't know if it's a natural
language feature, but I really

00:41:47.720 --> 00:41:51.270
miss some middleware.

00:41:51.270 --> 00:41:54.750
I mean, not servlets,
but building a more

00:41:54.750 --> 00:41:56.515
modern version of that.

00:41:56.515 --> 00:42:00.785
There are a lot of tiny web
frameworks out there that

00:42:00.785 --> 00:42:01.960
could be turned into that.

00:42:01.960 --> 00:42:06.120
But I feel that in order to
really move on with the server

00:42:06.120 --> 00:42:11.410
side of Dart, and to write
all that stuff--

00:42:11.410 --> 00:42:15.310
OAuth integration, we
need some kind of--

00:42:15.310 --> 00:42:17.420
I don't know if it should be
standardized, but there should

00:42:17.420 --> 00:42:22.660
be definitely be a connect from
the [INAUDIBLE] and Dart.

00:42:22.660 --> 00:42:23.910
I really need that.

00:42:25.820 --> 00:42:29.710
In order to just move Dart
forward we need to have a hub

00:42:29.710 --> 00:42:30.680
be more used.

00:42:30.680 --> 00:42:31.580
SETH LADD: Yes.

00:42:31.580 --> 00:42:33.990
LARS TACKMANN: I really like on
the C Sharp where they make

00:42:33.990 --> 00:42:36.500
this, I think, a [INAUDIBLE]

00:42:36.500 --> 00:42:37.980
versus this [INAUDIBLE]

00:42:37.980 --> 00:42:39.070
with really, really nice

00:42:39.070 --> 00:42:42.086
integration into Visual Studio.

00:42:42.086 --> 00:42:44.370
That's the test framework
everybody's using.

00:42:44.370 --> 00:42:48.450
And that is just a really neat
way for people who are not

00:42:48.450 --> 00:42:51.450
just digging around like Adam.

00:42:51.450 --> 00:42:55.670
And if we patch and if we did
have commits to see what's

00:42:55.670 --> 00:43:00.360
going on, things like that
is going to be needed.

00:43:00.360 --> 00:43:02.210
I'm also, of course, going
to give a plus--

00:43:02.210 --> 00:43:03.750
or probably 100--

00:43:03.750 --> 00:43:06.180
to mirrors, or something
like that.

00:43:06.180 --> 00:43:10.170
And then maybe a way to port
like in C Sharp so it can hide

00:43:10.170 --> 00:43:13.540
the fact that you using an
isolate as an [INAUDIBLE]

00:43:13.540 --> 00:43:14.450
API.

00:43:14.450 --> 00:43:16.590
SETH LADD: Well I think the good
news is that the mirrors

00:43:16.590 --> 00:43:21.680
stuff sounds like it's a
resounding plus 100, plus 4.

00:43:21.680 --> 00:43:23.530
So there's active work on
the mirrors going on.

00:43:23.530 --> 00:43:26.300
So the mirrors is a little
tricky, because we want to

00:43:26.300 --> 00:43:30.280
make sure we can still enable
intelligent tree shaking.

00:43:30.280 --> 00:43:34.160
And the smallest amount of code
over the wire, even if

00:43:34.160 --> 00:43:35.780
you have reflection going on.

00:43:35.780 --> 00:43:37.820
So we've got to get
that API correct.

00:43:37.820 --> 00:43:38.980
But there's active work there.

00:43:38.980 --> 00:43:40.000
So that's good news.

00:43:40.000 --> 00:43:44.100
So good to hear that unanimous
feedback on that.

00:43:44.100 --> 00:43:47.092
And we should mention
Pub, as you did.

00:43:47.092 --> 00:43:49.470
The package manager for Dart.

00:43:49.470 --> 00:43:50.880
That's in the SDK today.

00:43:50.880 --> 00:43:55.450
It has basic support for
Git-based repositories.

00:43:55.450 --> 00:43:59.370
And we have nice, high hopes
for this system.

00:43:59.370 --> 00:44:01.800
We think it will open the
floodgates to third-party

00:44:01.800 --> 00:44:04.640
developers much like yourselves,
but others.

00:44:04.640 --> 00:44:08.100
Standardize around the package
format, like what do some of

00:44:08.100 --> 00:44:09.040
the directors look like?

00:44:09.040 --> 00:44:11.920
I know Kevin Moore on the list
has done some work to try to

00:44:11.920 --> 00:44:16.170
plant some seeds in what a Dart
package might look like.

00:44:16.170 --> 00:44:18.610
So I'm personally very much
looking forward to that.

00:44:18.610 --> 00:44:21.910
And you'll be able to do A pub
install, and it just pulls

00:44:21.910 --> 00:44:23.040
down all the dependencies.

00:44:23.040 --> 00:44:27.570
And you as authors of libraries
would be able to put

00:44:27.570 --> 00:44:29.850
your packages up for
Pub to consume.

00:44:29.850 --> 00:44:32.220
So that's cool.

00:44:32.220 --> 00:44:33.390
That's already well underway.

00:44:33.390 --> 00:44:35.090
So good news on that.

00:44:35.090 --> 00:44:37.430
ADAM SMITH: So is Google
potentially planning to be

00:44:37.430 --> 00:44:42.188
maybe a central authority for
some packages, or at least one

00:44:42.188 --> 00:44:45.456
central authority for packages
from third parties?

00:44:45.456 --> 00:44:45.920
SETH LADD: Yeah.

00:44:45.920 --> 00:44:49.600
Part of the scope of the Pub
project is not only the

00:44:49.600 --> 00:44:53.190
command line tools to help you
install and manage those

00:44:53.190 --> 00:44:56.660
third-party dependencies, but
also provide a hosting service

00:44:56.660 --> 00:45:01.500
for packages and their metadata
to ease and enable

00:45:01.500 --> 00:45:02.710
discovery of packages.

00:45:02.710 --> 00:45:04.900
You should be able to do
something like, Pub search

00:45:04.900 --> 00:45:08.580
XML, and find John's XML
library, for instance.

00:45:08.580 --> 00:45:09.100
So, yeah.

00:45:09.100 --> 00:45:10.990
Certainly we won't
be the only one.

00:45:10.990 --> 00:45:13.930
And hopefully the community
takes these ideas and goes

00:45:13.930 --> 00:45:14.680
even further with them.

00:45:14.680 --> 00:45:15.540
But yes.

00:45:15.540 --> 00:45:19.620
We will help seed the
third-party package repository

00:45:19.620 --> 00:45:22.210
with something running
and plugged into

00:45:22.210 --> 00:45:27.460
the Pub tool by default.

00:45:27.460 --> 00:45:28.030
Awesome, guys.

00:45:28.030 --> 00:45:30.450
Well I'm going to wrap up with
a shout out to each one of

00:45:30.450 --> 00:45:33.230
your projects again, because
you've done so much good work

00:45:33.230 --> 00:45:34.660
for and with the
Dart community.

00:45:34.660 --> 00:45:36.820
We highly, highly
appreciate it.

00:45:36.820 --> 00:45:40.580
So if you want to follow along
with all the news, find Adam

00:45:40.580 --> 00:45:43.670
Smith on GitHub and
follow him.

00:45:43.670 --> 00:45:47.860
He will get you plugged in to
the late breaking patches.

00:45:47.860 --> 00:45:52.300
Sometimes quicker than the
editor can do a build.

00:45:52.300 --> 00:45:53.905
So that's awesome.

00:45:53.905 --> 00:45:56.070
And Chris Buckett, thank
you very much, joining

00:45:56.070 --> 00:45:57.350
us from the UK there.

00:45:57.350 --> 00:45:58.360
And good luck with your book.

00:45:58.360 --> 00:46:01.410
I believe it's getting
published by Manning?

00:46:01.410 --> 00:46:03.480
CHRIS BUCKETT: That's
right, yeah.

00:46:03.480 --> 00:46:05.990
10 chapters written,
5 more to go.

00:46:05.990 --> 00:46:08.180
SETH LADD: And do you have
an expected publishing--

00:46:08.180 --> 00:46:11.476
like when should we
approximately find the book?

00:46:11.476 --> 00:46:13.730
CHRIS BUCKETT: It should be
out in paper January,

00:46:13.730 --> 00:46:14.880
February next year.

00:46:14.880 --> 00:46:17.355
It's available now as
an early access.

00:46:17.355 --> 00:46:17.650
SETH LADD: Ah.

00:46:17.650 --> 00:46:19.653
So people can check out
your book right now?

00:46:19.653 --> 00:46:20.500
CHRIS BUCKETT: Yeah.

00:46:20.500 --> 00:46:21.710
Manning.com

00:46:21.710 --> 00:46:22.340
SETH LADD: All right.

00:46:22.340 --> 00:46:23.030
Good.

00:46:23.030 --> 00:46:26.480
And John, awesome work on the
recent screencasts you've been

00:46:26.480 --> 00:46:30.230
doing on Buckshot and
the XML library.

00:46:30.230 --> 00:46:33.930
I know modern web developers
like to talk in JSON, but

00:46:33.930 --> 00:46:37.010
there's a whole ton of stuff out
there with XML, so happy

00:46:37.010 --> 00:46:38.640
to see that come out
of the community.

00:46:38.640 --> 00:46:39.880
So appreciate that.

00:46:39.880 --> 00:46:42.610
And the website, again,
for Buckshot is what?

00:46:42.610 --> 00:46:43.630
JOHN EVANS: It's on GitHub.

00:46:43.630 --> 00:46:44.880
GitHub/prujohn/buckshot.

00:46:46.535 --> 00:46:46.810
SETH LADD: OK.

00:46:46.810 --> 00:46:48.480
P-R-U-J-O-H-N?

00:46:48.480 --> 00:46:50.150
JOHN EVANS: J-O-H-N,
that's right.

00:46:50.150 --> 00:46:50.490
SETH LADD: Awesome.

00:46:50.490 --> 00:46:53.460
And there's even a try Buckshot,
you can do it right

00:46:53.460 --> 00:46:54.230
in your browser.

00:46:54.230 --> 00:46:56.020
And you can watch
the screencasts.

00:46:56.020 --> 00:46:56.420
JOHN EVANS: Yes.

00:46:56.420 --> 00:46:59.230
It's all there on the
GitHub homepage.

00:46:59.230 --> 00:46:59.540
SETH LADD: Cool.

00:46:59.540 --> 00:47:03.270
It's good to see those MVC
frameworks start to come out.

00:47:03.270 --> 00:47:04.360
And John McCutchan.

00:47:04.360 --> 00:47:06.840
Thank you so much for
the awesome low

00:47:06.840 --> 00:47:08.230
level work in the VM.

00:47:08.230 --> 00:47:12.600
And the SIMD patches kind of
plant those seeds as well.

00:47:12.600 --> 00:47:16.620
And I hear hints of another
library you're working on.

00:47:16.620 --> 00:47:20.460
And so I'm excited to see what
that's going to turn into.

00:47:20.460 --> 00:47:20.890
JOHN MCCUTCHAN: Me, too.

00:47:20.890 --> 00:47:24.710
And you can get Dart Vector
Math at my GitHub.

00:47:24.710 --> 00:47:26.320
SETH LADD: And your GitHub is?

00:47:26.320 --> 00:47:27.140
JOHN MCCUTCHAN: Just
John McCutchan.

00:47:27.140 --> 00:47:28.400
SETH LADD: Ah, perfect.

00:47:28.400 --> 00:47:30.490
Yes, mine is Seth Ladd, I
find that much easier.

00:47:30.490 --> 00:47:33.470
[LAUGHTER]

00:47:33.470 --> 00:47:33.830
SETH LADD: Awesome.

00:47:33.830 --> 00:47:34.680
Well thanks everybody.

00:47:34.680 --> 00:47:36.870
Yeah, this is going to go
up on YouTube, we'll

00:47:36.870 --> 00:47:37.930
share it out again.

00:47:37.930 --> 00:47:40.850
And the Dart team is absolutely
listening to your

00:47:40.850 --> 00:47:43.110
feedback and so we really
appreciate it.

00:47:43.110 --> 00:47:46.800
And so thanks for working so
early with this brand new web

00:47:46.800 --> 00:47:48.175
programming language.

00:47:48.175 --> 00:47:51.830
It sounds like you're having fun
and we hope to continue to

00:47:51.830 --> 00:47:54.028
keep you guys productive
and happy.

00:47:54.028 --> 00:47:56.450
[OVERLAPPING THANKS]

00:47:56.450 --> 00:47:56.870
SETH LADD: We're signing out.

00:47:56.870 --> 00:47:57.880
Have a good weekend.

00:47:57.880 --> 00:48:00.417
And we'll see you next
episode of Dartisans.

00:48:00.417 --> 00:48:10.333
[OVERLAPPING GOODBYES]

