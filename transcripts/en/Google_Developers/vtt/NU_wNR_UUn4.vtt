WEBVTT
Kind: captions
Language: en

00:00:03.290 --> 00:00:03.450
CHRISTINA ILVENTO: Hi.

00:00:03.450 --> 00:00:04.730
Good morning, everyone.

00:00:04.730 --> 00:00:05.670
I'm Christina Ilvento.

00:00:05.670 --> 00:00:07.070
I'm one of the product managers

00:00:07.070 --> 00:00:08.410
for Google App Engine.

00:00:08.410 --> 00:00:09.370
DAN HOLEVOET: And I'm
Dan Holevoet.

00:00:09.370 --> 00:00:11.530
I'm an engineer on the Developer
Relations team, also

00:00:11.530 --> 00:00:12.910
focusing on App Engine.

00:00:12.910 --> 00:00:14.180
CHRISTINA ILVENTO: And today
we're here to talk to you

00:00:14.180 --> 00:00:17.520
about building mobile App Engine
back ends for Android,

00:00:17.520 --> 00:00:19.970
iOS, and the web.

00:00:19.970 --> 00:00:21.860
So a little bit about
why we're here.

00:00:21.860 --> 00:00:24.730
We're really here to talk to
you about using Google App

00:00:24.730 --> 00:00:26.790
Engine as a back end
for applications

00:00:26.790 --> 00:00:28.020
with multiple clients--

00:00:28.020 --> 00:00:30.400
clients on your phone, clients
in the browser--

00:00:30.400 --> 00:00:34.430
and also to introduce to you
Google Cloud Endpoints, which

00:00:34.430 --> 00:00:37.150
we announced yesterday in our
App Engine overview session,

00:00:37.150 --> 00:00:40.120
which is a feature that makes
it even easier to develop

00:00:40.120 --> 00:00:43.860
client applications for your
App Engine back ends.

00:00:43.860 --> 00:00:46.780
So we talked about what about
why we're here, but why are

00:00:46.780 --> 00:00:48.290
you all here?

00:00:48.290 --> 00:00:50.350
As a show of hands, how many
of you have built an App

00:00:50.350 --> 00:00:52.530
Engine app before?

00:00:52.530 --> 00:00:53.080
Wow!

00:00:53.080 --> 00:00:53.370
OK.

00:00:53.370 --> 00:00:55.910
We've got quite an App
Engine crowd here.

00:00:55.910 --> 00:00:59.940
And how many of you have built
a mobile app before?

00:00:59.940 --> 00:01:00.590
All right.

00:01:00.590 --> 00:01:01.420
Excellent.

00:01:01.420 --> 00:01:04.160
Anyone who's built a mobile
app backed on App Engine?

00:01:04.160 --> 00:01:05.630
AUDIENCE: Tried.

00:01:05.630 --> 00:01:06.150
FEMALE SPEAKER: Tried.

00:01:06.150 --> 00:01:07.920
OK, great.

00:01:07.920 --> 00:01:10.530
So chances are you're here to
learn a little bit more about

00:01:10.530 --> 00:01:13.000
App Engine, to learn about
building applications with

00:01:13.000 --> 00:01:14.980
multiple clients in general.

00:01:14.980 --> 00:01:17.580
But regardless of the specifics,
you're probably

00:01:17.580 --> 00:01:21.180
here because you're thinking
about building an application.

00:01:21.180 --> 00:01:23.180
And you're thinking about
building an app because you've

00:01:23.180 --> 00:01:24.970
got a great idea.

00:01:24.970 --> 00:01:28.240
You've got the kind of idea that
gets you onto the front

00:01:28.240 --> 00:01:31.870
page of your favorite news
source on the web, something

00:01:31.870 --> 00:01:34.440
that people talk about around
the water cooler.

00:01:34.440 --> 00:01:37.120
Or maybe if it's not something
really aspirational like that,

00:01:37.120 --> 00:01:39.430
at least it's an idea that you
think is going to make you a

00:01:39.430 --> 00:01:40.680
million bucks.

00:01:43.790 --> 00:01:46.630
So you're here to build an app,
and you know that this

00:01:46.630 --> 00:01:50.070
thing needs to be everywhere
your users are going to be.

00:01:50.070 --> 00:01:51.980
This thing needs to be on
multiple platforms.

00:01:51.980 --> 00:01:54.270
We're not talking about a
90s-style website here, we're

00:01:54.270 --> 00:01:58.480
talking about an app that goes
everywhere that your users go.

00:01:58.480 --> 00:02:00.750
And beyond that, we're
talking about an app

00:02:00.750 --> 00:02:02.630
that needs to scale.

00:02:02.630 --> 00:02:05.060
Chances are you're not going
to make a million bucks on

00:02:05.060 --> 00:02:06.660
your mom's book club.

00:02:06.660 --> 00:02:09.449
So you want this thing to be
able to scale up so that when

00:02:09.449 --> 00:02:12.840
all of your users start using
all those multiple platforms,

00:02:12.840 --> 00:02:15.820
your app scales with them.

00:02:15.820 --> 00:02:18.280
So keeping this in mind, we have
an app that needs to work

00:02:18.280 --> 00:02:20.130
on multiple platforms,
it needs to scale.

00:02:20.130 --> 00:02:22.660
We come up with an idea for what
our architecture is going

00:02:22.660 --> 00:02:23.070
to look like.

00:02:23.070 --> 00:02:25.300
It probably looks something like
this, where you have a

00:02:25.300 --> 00:02:28.620
single back end that has your
application logic that's

00:02:28.620 --> 00:02:32.330
actually talking to some sort of
shared state, some storage,

00:02:32.330 --> 00:02:34.710
and maybe some other
fancy services.

00:02:34.710 --> 00:02:37.390
But on top of that application
logic-- really the core of

00:02:37.390 --> 00:02:38.520
your application--

00:02:38.520 --> 00:02:41.330
you're probably standing
up an API.

00:02:41.330 --> 00:02:44.630
And that API is going to be
called by all of your client

00:02:44.630 --> 00:02:49.950
applications running on iOS,
Android, and in web browsers.

00:02:49.950 --> 00:02:52.880
And this seems like a pretty
reasonable design.

00:02:52.880 --> 00:02:55.080
So let's go ahead and start to
actually build this thing,

00:02:55.080 --> 00:02:57.160
make it work.

00:02:57.160 --> 00:03:00.280
So the first thing that we're
going to do is probably pick

00:03:00.280 --> 00:03:03.280
an open source stack and stand
this up maybe on a server that

00:03:03.280 --> 00:03:05.550
we have lying around
in our basement.

00:03:05.550 --> 00:03:07.730
So the first thing we're gonna
do, we'll stand up Apache,

00:03:07.730 --> 00:03:09.360
we'll stand up MySQL,
get those two

00:03:09.360 --> 00:03:11.980
playing nicely together.

00:03:11.980 --> 00:03:14.970
And we're essentially ready now
to actually start building

00:03:14.970 --> 00:03:17.080
the core of the application
now that we have our open

00:03:17.080 --> 00:03:18.480
source stack set up.

00:03:18.480 --> 00:03:20.860
So we start to actually
implement

00:03:20.860 --> 00:03:22.850
the application logic.

00:03:22.850 --> 00:03:25.420
So once we get the core of the
app written, we have to

00:03:25.420 --> 00:03:27.470
actually figure out what this
API is going to look like.

00:03:27.470 --> 00:03:30.300
And you figure out your API
methods, write all the service

00:03:30.300 --> 00:03:32.170
class code that you need
to have that API

00:03:32.170 --> 00:03:34.560
actually stand up.

00:03:34.560 --> 00:03:36.890
But now we get to a point where
we've got to figure out

00:03:36.890 --> 00:03:39.210
some of the specifics
of the API.

00:03:39.210 --> 00:03:40.520
It's not just figuring
out what methods

00:03:40.520 --> 00:03:41.060
you're going to use.

00:03:41.060 --> 00:03:42.270
We have to figure out,
How are we gonna

00:03:42.270 --> 00:03:43.690
authorize our clients?

00:03:43.690 --> 00:03:46.210
How do we know who's
calling our API?

00:03:46.210 --> 00:03:48.445
And are they allowed to
be calling our API?

00:03:48.445 --> 00:03:49.975
How are you gonna authenticate
your users?

00:03:49.975 --> 00:03:53.150
How are you going to
authenticate users on a device

00:03:53.150 --> 00:03:55.840
and have that actually be
communicated to your back end

00:03:55.840 --> 00:03:58.810
in a way you can securely
handle user data?

00:03:58.810 --> 00:04:00.720
I'm not sure if any of you have
ever tried to do this in

00:04:00.720 --> 00:04:03.310
the past, but it turns out that
it's not exactly trivial

00:04:03.310 --> 00:04:04.700
to make that work.

00:04:04.700 --> 00:04:06.730
What are you going to
do for compression?

00:04:06.730 --> 00:04:10.110
How are you going to decide
what wire format to use?

00:04:10.110 --> 00:04:12.260
There are a lot of things that
come along with building an

00:04:12.260 --> 00:04:16.310
API that you have to manage
before you can even get in to

00:04:16.310 --> 00:04:19.550
building those client
applications.

00:04:19.550 --> 00:04:20.709
But you've got this
great idea.

00:04:20.709 --> 00:04:22.930
So we're going to assume
you're a smart guy.

00:04:22.930 --> 00:04:24.110
And you've figured this out.

00:04:24.110 --> 00:04:25.670
You've actually stood
up the API.

00:04:25.670 --> 00:04:26.600
You're ready to go.

00:04:26.600 --> 00:04:28.250
And we're ready to start
building our client

00:04:28.250 --> 00:04:29.700
applications.

00:04:29.700 --> 00:04:31.770
So as you start to build these,
maybe you build them

00:04:31.770 --> 00:04:34.310
all at the same time, maybe
you build one at a time.

00:04:34.310 --> 00:04:37.010
But as you start to build the
client application, you

00:04:37.010 --> 00:04:40.420
probably don't want a lot of
that API-specific code sitting

00:04:40.420 --> 00:04:43.540
around in the logic of
your client apps.

00:04:43.540 --> 00:04:45.660
So what you're probably going to
do is factor that out into

00:04:45.660 --> 00:04:47.860
some sort of API wrapper code.

00:04:47.860 --> 00:04:50.850
So at this point we have
our three clients.

00:04:50.850 --> 00:04:52.110
They all have some
wrapper code.

00:04:52.110 --> 00:04:55.650
And every time we make
a change to our API--

00:04:55.650 --> 00:04:58.160
and chances are we're going to
make a few as we're developing

00:04:58.160 --> 00:04:59.190
this great app--

00:04:59.190 --> 00:05:02.710
we have to make that change now
in three places in three

00:05:02.710 --> 00:05:04.370
different languages--

00:05:04.370 --> 00:05:08.920
for our Android app, for our
iPhone app, and for the web.

00:05:08.920 --> 00:05:11.890
But again, we're smart
developers here.

00:05:11.890 --> 00:05:12.890
We've got this working.

00:05:12.890 --> 00:05:15.640
So at this point, our app
is ready to launch.

00:05:15.640 --> 00:05:16.230
We've got it.

00:05:16.230 --> 00:05:19.240
We've got the client apps
talking to this back end, and

00:05:19.240 --> 00:05:21.090
everything works.

00:05:21.090 --> 00:05:22.280
So we launch.

00:05:22.280 --> 00:05:26.160
And before we launch we probably
do some fancy math to

00:05:26.160 --> 00:05:28.230
figure out what our load is
going to look like and figure

00:05:28.230 --> 00:05:30.750
out how we're going to provision
and all of that.

00:05:30.750 --> 00:05:33.260
But it turns out that being good
at math is not the same

00:05:33.260 --> 00:05:35.080
thing as being able to
predict the future.

00:05:35.080 --> 00:05:38.560
And chances are you're either
going to over provision and

00:05:38.560 --> 00:05:41.630
end up provisioning a lot more
than you really need, or

00:05:41.630 --> 00:05:44.360
you're going to end up having
some really fun downtime and

00:05:44.360 --> 00:05:46.590
getting to send out your
first post-mortem

00:05:46.590 --> 00:05:49.550
to your beta users.

00:05:49.550 --> 00:05:52.660
So we get into a situation where
essentially what you're

00:05:52.660 --> 00:05:54.700
doing is you're actually
going through

00:05:54.700 --> 00:05:55.850
your development process.

00:05:55.850 --> 00:05:58.010
And then every time you're ready
to actually add more

00:05:58.010 --> 00:06:00.060
users, or whether you're ready
or not you're adding more

00:06:00.060 --> 00:06:03.480
users, you need to go through
the cycle of estimating your

00:06:03.480 --> 00:06:06.350
load, provisioning, actually
setting up all the hardware,

00:06:06.350 --> 00:06:10.620
if you're buying hardware, or
provisioning VMs, and then

00:06:10.620 --> 00:06:13.120
actually being able to launch--
in addition to all

00:06:13.120 --> 00:06:15.700
the overhead and maintenance of
just keeping your API up to

00:06:15.700 --> 00:06:18.580
date with all of your
new versions.

00:06:18.580 --> 00:06:22.340
So at some point after we've
been working on this app for a

00:06:22.340 --> 00:06:23.750
while, we realize that
what we're really

00:06:23.750 --> 00:06:25.180
doing is playing sysadmin.

00:06:25.180 --> 00:06:27.490
And really spending a lot
of time working on the

00:06:27.490 --> 00:06:30.050
API-specific aspects of this.

00:06:30.050 --> 00:06:33.050
And spending a lot of time
figuring out load balancing

00:06:33.050 --> 00:06:35.420
and all of that, rather than
doing what we really set out

00:06:35.420 --> 00:06:39.340
to do, which was to build this
great million-dollar app and

00:06:39.340 --> 00:06:42.750
do things like actually figure
out a monetization strategy,

00:06:42.750 --> 00:06:47.440
add features, improve our
clients, all of that.

00:06:47.440 --> 00:06:49.440
But let's pause for a minute.

00:06:49.440 --> 00:06:52.260
I promise that this talk is
not completely depressing.

00:06:52.260 --> 00:06:54.380
App Engine can really
help with this.

00:06:54.380 --> 00:06:57.030
So with App Engine, it's really,
really easy to get a

00:06:57.030 --> 00:07:00.080
scalable back end up and
running quickly.

00:07:00.080 --> 00:07:01.750
So if you're not familiar
with App Engine--

00:07:01.750 --> 00:07:04.120
I know we had a lot of folks
raise their hand, but many of

00:07:04.120 --> 00:07:05.110
you didn't.

00:07:05.110 --> 00:07:08.040
App Engine is our scalable web
hosting platform that lets you

00:07:08.040 --> 00:07:10.940
take advantage of the robustness
and scale of

00:07:10.940 --> 00:07:14.080
Google's core infrastructure
in your applications in a

00:07:14.080 --> 00:07:15.720
fully managed environment.

00:07:15.720 --> 00:07:17.330
And it's really easy
to get started.

00:07:17.330 --> 00:07:20.980
All you have to do is download
the SDK, write your code in

00:07:20.980 --> 00:07:22.640
Java, Python, or Go.

00:07:22.640 --> 00:07:24.720
And then you can test it
locally using our local

00:07:24.720 --> 00:07:25.880
development server.

00:07:25.880 --> 00:07:30.230
And then upload it to Google
and run your application on

00:07:30.230 --> 00:07:32.120
Google's infrastructure.

00:07:32.120 --> 00:07:35.500
So scaling is a really important
part of writing an

00:07:35.500 --> 00:07:36.780
app like this.

00:07:36.780 --> 00:07:38.410
And it turns out that
scaling is actually

00:07:38.410 --> 00:07:39.460
really easy on App Engine.

00:07:39.460 --> 00:07:40.960
And it's rare that important
things are

00:07:40.960 --> 00:07:42.890
easy, so this is great.

00:07:42.890 --> 00:07:45.560
So with App Engine, as the
traffic for your app

00:07:45.560 --> 00:07:48.420
increases, we automatically
provision more instances and

00:07:48.420 --> 00:07:50.340
actually spin up more instances
to handle that

00:07:50.340 --> 00:07:52.670
traffic as your traffic
increases.

00:07:52.670 --> 00:07:56.390
And the great thing is that you
only pay for what you use.

00:07:56.390 --> 00:08:00.570
So you get both the benefit of
reliable scaling when you need

00:08:00.570 --> 00:08:04.300
it, but you also get efficiency
when you don't.

00:08:04.300 --> 00:08:06.570
And beyond just the scaling,
because you're running in a

00:08:06.570 --> 00:08:09.480
fully managed environment, you
don't need to worry about your

00:08:09.480 --> 00:08:10.770
full stack.

00:08:10.770 --> 00:08:12.560
What version your kernel
is running,

00:08:12.560 --> 00:08:13.790
no longer your problem.

00:08:13.790 --> 00:08:15.970
All you need to be worrying
about is the actual

00:08:15.970 --> 00:08:18.660
application logic that
you're deploying.

00:08:18.660 --> 00:08:19.410
So this is great.

00:08:19.410 --> 00:08:21.660
But App Engine is more than just
sort of scaling and the

00:08:21.660 --> 00:08:23.070
fully managed environment.

00:08:23.070 --> 00:08:25.400
With App Engine you get a great
set of core features

00:08:25.400 --> 00:08:28.790
that help you to build a real

00:08:28.790 --> 00:08:30.980
feature-rich application quickly.

00:08:30.980 --> 00:08:33.179
So with App Engine, there are
several storage options that

00:08:33.179 --> 00:08:34.260
are already baked in.

00:08:34.260 --> 00:08:37.289
You can use the App Engine
Datastore, which is a NoSQL

00:08:37.289 --> 00:08:41.309
data store without any
configuration or setup already

00:08:41.309 --> 00:08:42.299
baked into your app.

00:08:42.299 --> 00:08:44.980
And you can also use Google
Cloud SQL with our integration

00:08:44.980 --> 00:08:47.440
with Google Cloud SQL.

00:08:47.440 --> 00:08:50.320
And they started taking open
sign ups, I think, yesterday.

00:08:50.320 --> 00:08:52.240
So you have storage that's
already built in.

00:08:52.240 --> 00:08:54.250
You also have some great
compute options.

00:08:54.250 --> 00:08:59.040
So things like task queues and
cron jobs, you don't have to

00:08:59.040 --> 00:09:00.400
manage all of that yourself.

00:09:00.400 --> 00:09:02.630
It's all just built
into App Engine.

00:09:02.630 --> 00:09:05.390
And beyond that, App Engine
has some great APIs and

00:09:05.390 --> 00:09:06.250
services included.

00:09:06.250 --> 00:09:09.480
So things like the user's API,
so you can authenticate Google

00:09:09.480 --> 00:09:12.780
users in your application,
that's all included in App

00:09:12.780 --> 00:09:16.390
Engine, as well as things like
MapReduce, Search, and Mail.

00:09:16.390 --> 00:09:18.550
So you don't need to go out
and find an open-source

00:09:18.550 --> 00:09:20.020
solution and worry
about integrating

00:09:20.020 --> 00:09:21.430
that into your app.

00:09:21.430 --> 00:09:24.090
It's all there for you
in App Engine.

00:09:24.090 --> 00:09:24.440
All right.

00:09:24.440 --> 00:09:26.800
So we've taken the lightning
tour of App Engine.

00:09:26.800 --> 00:09:29.970
Let's use that for
our back end.

00:09:29.970 --> 00:09:33.520
So now using App Engine as our
back end, what we'll do is

00:09:33.520 --> 00:09:36.700
we'll have that shared state
be stored in Datastore.

00:09:36.700 --> 00:09:39.970
We'll write all of our
application logic in an App

00:09:39.970 --> 00:09:41.060
Engine app.

00:09:41.060 --> 00:09:43.040
And then we can use
any of those APIs

00:09:43.040 --> 00:09:44.490
and services as well.

00:09:44.490 --> 00:09:48.210
And so now at this point, we're
both taking advantage of

00:09:48.210 --> 00:09:51.210
the scaling of App Engine, so
we don't have to worry about

00:09:51.210 --> 00:09:53.160
managing all that ourselves.

00:09:53.160 --> 00:09:55.580
But we're also sort of getting
this thing done more quickly

00:09:55.580 --> 00:09:57.530
because we didn't have to
do all that setup and

00:09:57.530 --> 00:10:00.730
configuration hassle
at the beginning.

00:10:00.730 --> 00:10:03.490
And so this is great.

00:10:03.490 --> 00:10:05.950
And so now we don't really need
to worry as much about

00:10:05.950 --> 00:10:06.880
the back end.

00:10:06.880 --> 00:10:09.330
But what about with the rest of
this architecture diagram

00:10:09.330 --> 00:10:11.150
that we have up here?

00:10:11.150 --> 00:10:14.020
We're still having to manage
that API ourselves.

00:10:14.020 --> 00:10:16.340
We're still having to deal with
all of the wrapper code

00:10:16.340 --> 00:10:19.160
and the things in our clients.

00:10:19.160 --> 00:10:21.000
I know I promised you at the
beginning we'd talk about

00:10:21.000 --> 00:10:24.850
Endpoints, our shiny new
feature of this talk.

00:10:24.850 --> 00:10:26.700
And so let's get right to it.

00:10:26.700 --> 00:10:28.730
And let's skip slides while
we're doing it.

00:10:28.730 --> 00:10:30.720
Sorry, guys.

00:10:30.720 --> 00:10:34.770
So with Endpoints, you can
extend your App Engine back

00:10:34.770 --> 00:10:37.410
end using Google's API
infrastructure.

00:10:37.410 --> 00:10:40.500
So basically, the way it works
is that you can annotate your

00:10:40.500 --> 00:10:43.500
App Engine back-end code to
stand up in API, and all of

00:10:43.500 --> 00:10:46.180
the configuration and service
classes are generated for you.

00:10:46.180 --> 00:10:48.520
You don't have to handle any
of that on your own.

00:10:48.520 --> 00:10:50.640
And then you've got an API up
and running for all of your

00:10:50.640 --> 00:10:52.370
clients to call in to.

00:10:52.370 --> 00:10:54.980
And another great feature of
Endpoints is that you get

00:10:54.980 --> 00:10:56.670
custom client libraries.

00:10:56.670 --> 00:10:58.850
So rather than dealing with
all of that wrapper code

00:10:58.850 --> 00:11:01.590
yourself, instead you get to
generate client libraries.

00:11:01.590 --> 00:11:04.520
So you can get strongly typed
Objective C or Java client

00:11:04.520 --> 00:11:08.100
libraries for your API that
you can use in your mobile

00:11:08.100 --> 00:11:10.380
clients, as well as dynamically
typed libraries

00:11:10.380 --> 00:11:14.090
for JavaScript that you can
use for your browser apps.

00:11:14.090 --> 00:11:18.860
And the final great thing about
this is that we have

00:11:18.860 --> 00:11:20.190
OAuth2 support.

00:11:20.190 --> 00:11:23.330
So figuring out the client
authentication and all that is

00:11:23.330 --> 00:11:25.900
all handled for you
with Endpoints.

00:11:25.900 --> 00:11:30.670
So if this slide was not dense
enough for you, let's walk

00:11:30.670 --> 00:11:32.890
through how this actually
works in your App Engine

00:11:32.890 --> 00:11:34.800
development process.

00:11:34.800 --> 00:11:37.310
So the first thing that we're
going to do is actually write

00:11:37.310 --> 00:11:38.810
our back-end code.

00:11:38.810 --> 00:11:41.620
And we write this the same
way that we would today.

00:11:41.620 --> 00:11:44.860
So what we have up here is just
a basic Java sample with

00:11:44.860 --> 00:11:48.140
a game and one method to update
the game, same way you

00:11:48.140 --> 00:11:51.290
would write a Java App
Engine app today.

00:11:51.290 --> 00:11:54.870
And the next thing we do to get
our API is we annotate it.

00:11:54.870 --> 00:11:58.230
And all we have to do is add
this @API annotation to

00:11:58.230 --> 00:12:00.020
actually turn this
into an API.

00:12:00.020 --> 00:12:03.010
So from here, the configuration
for the API and

00:12:03.010 --> 00:12:05.170
the actual service classes
are generated for you.

00:12:05.170 --> 00:12:06.910
You don't have to do any
additional work.

00:12:06.910 --> 00:12:09.090
At this point you've done all
you need to do to actually

00:12:09.090 --> 00:12:11.560
stand up this API.

00:12:11.560 --> 00:12:13.160
But now let's get on
to the clients.

00:12:13.160 --> 00:12:14.910
So we've got our API,
and we're going

00:12:14.910 --> 00:12:16.030
to write our clients.

00:12:16.030 --> 00:12:19.270
And this is just a little
snippet of what you'd see in

00:12:19.270 --> 00:12:21.920
the command line if you were
generating an Objective C

00:12:21.920 --> 00:12:22.465
client library.

00:12:22.465 --> 00:12:25.140
So we provide tools to
generate those client

00:12:25.140 --> 00:12:27.420
libraries, either in the command
line or through an

00:12:27.420 --> 00:12:31.220
integration with the Google
plug-in for Eclipse.

00:12:31.220 --> 00:12:34.190
So at this point, we now have
our strongly typed Objective C

00:12:34.190 --> 00:12:35.270
client library.

00:12:35.270 --> 00:12:38.290
We can pop that into
our client app.

00:12:38.290 --> 00:12:39.230
And then we're ready to go.

00:12:39.230 --> 00:12:43.300
And it's that simple to actually
get the API up and

00:12:43.300 --> 00:12:45.640
running and into your
application.

00:12:45.640 --> 00:12:48.750
So I've walked you through the
basics of how endpoints work.

00:12:48.750 --> 00:12:51.170
And I'm going to hand it over
now to Dan, who's going to

00:12:51.170 --> 00:12:53.330
give a more detailed
walk-through and show you some

00:12:53.330 --> 00:12:54.100
of the code.

00:12:54.100 --> 00:12:54.360
DAN HOLEVOET: Great.

00:12:54.360 --> 00:12:55.150
Thanks, Christina.

00:12:55.150 --> 00:13:01.860
[APPLAUSE]

00:13:01.860 --> 00:13:03.680
DAN HOLEVOET: So a lot of you
are probably wondering what

00:13:03.680 --> 00:13:05.490
our million-dollar
app idea is.

00:13:05.490 --> 00:13:09.890
And so to kill the suspense,
it's a tic-tac-toe game, which

00:13:09.890 --> 00:13:12.740
I'm sure is going to make
us tons of money.

00:13:12.740 --> 00:13:15.240
So let me just load up a sample
of what this type of

00:13:15.240 --> 00:13:17.700
app looks like on an Android
device here.

00:13:17.700 --> 00:13:20.170
So I have it running
in the emulator.

00:13:20.170 --> 00:13:21.180
This is working on Froyo.

00:13:21.180 --> 00:13:23.950
It works on Froyo and above.

00:13:23.950 --> 00:13:25.810
And so I've got the simple
board layout here.

00:13:25.810 --> 00:13:26.900
I can click on these squares.

00:13:26.900 --> 00:13:29.230
And every time I click on one
of these squares, what it's

00:13:29.230 --> 00:13:32.080
doing is it's sending requests
to our App Engine back end

00:13:32.080 --> 00:13:34.750
with the-- ugh, wow.

00:13:34.750 --> 00:13:35.950
Awesome.

00:13:35.950 --> 00:13:39.230
I checked right before
the demo, I swear.

00:13:39.230 --> 00:13:41.730
It's sending off a request to
our back-end server with the

00:13:41.730 --> 00:13:43.460
current board state.

00:13:43.460 --> 00:13:46.570
And then the computer is going
to make a move, send the

00:13:46.570 --> 00:13:49.660
request back to the
Android app.

00:13:49.660 --> 00:13:52.450
We're going to update the UI
with the computer's move.

00:13:52.450 --> 00:13:53.330
And then we can keep playing.

00:13:53.330 --> 00:13:55.780
So let's do that here.

00:13:55.780 --> 00:13:56.170
All right.

00:13:56.170 --> 00:13:59.510
So we got this nice
little option here

00:13:59.510 --> 00:14:00.420
for multiple moves.

00:14:00.420 --> 00:14:00.670
All right.

00:14:00.670 --> 00:14:01.330
Looks like I won.

00:14:01.330 --> 00:14:01.700
Awesome.

00:14:01.700 --> 00:14:02.100
Great.

00:14:02.100 --> 00:14:05.390
So this is going to send it
off to another API that we

00:14:05.390 --> 00:14:07.180
have running on App Engine,
which is keeping track of our

00:14:07.180 --> 00:14:08.500
previous games.

00:14:08.500 --> 00:14:10.720
It's recorded my victory
for posterity.

00:14:10.720 --> 00:14:12.650
And then it shows it up at
the bottom of the screen.

00:14:12.650 --> 00:14:15.720
So let's look at the code for
what this app looks like.

00:14:15.720 --> 00:14:19.280
So we'll start with the
App Engine back end.

00:14:19.280 --> 00:14:21.240
And as I said, I have
two APIs running.

00:14:21.240 --> 00:14:23.950
The first one of those APIs
is keeping track of the

00:14:23.950 --> 00:14:25.070
state of the board.

00:14:25.070 --> 00:14:28.490
And the second one is a really
simple resource that keeps

00:14:28.490 --> 00:14:29.710
track of the high score.

00:14:29.710 --> 00:14:33.230
So what we're looking
at here is a simple

00:14:33.230 --> 00:14:34.490
model for the Datastore.

00:14:34.490 --> 00:14:36.100
We're using JDO.

00:14:36.100 --> 00:14:38.490
This is exactly the same code
that you would write today if

00:14:38.490 --> 00:14:42.710
you were writing an App Engine
app that wanted to keep track

00:14:42.710 --> 00:14:43.870
of something like a
high score, right?

00:14:43.870 --> 00:14:46.940
So this is exactly the same
model and everything that

00:14:46.940 --> 00:14:47.890
you're used to writing.

00:14:47.890 --> 00:14:51.120
So we have a couple properties
here, things like the outcome

00:14:51.120 --> 00:14:54.170
of the game, when we played it,
some getters and setters,

00:14:54.170 --> 00:14:55.590
and things like that.

00:14:55.590 --> 00:14:57.510
So that's all very
straightforward.

00:14:57.510 --> 00:15:00.300
And then as a companion to
this, we've written an

00:15:00.300 --> 00:15:04.710
Endpoint class, which we'll use
to interact with the model

00:15:04.710 --> 00:15:05.480
in the data store.

00:15:05.480 --> 00:15:10.040
So we have some simple methods
here for getting one of the

00:15:10.040 --> 00:15:12.890
scores from the data store, or
listing all of the scores from

00:15:12.890 --> 00:15:15.950
the data store, or inserting a
score into the data store.

00:15:15.950 --> 00:15:17.660
And again this is all code
that you're probably very

00:15:17.660 --> 00:15:20.750
familiar writing if you've
written App Engine apps in

00:15:20.750 --> 00:15:22.860
Java in the past.

00:15:22.860 --> 00:15:24.510
So now what we're going to do
is we're going to turn this

00:15:24.510 --> 00:15:25.990
into an API.

00:15:25.990 --> 00:15:27.950
And we'll do that by
adding a series of

00:15:27.950 --> 00:15:30.070
annotations into the code.

00:15:30.070 --> 00:15:33.320
So the first one of these
is the @API annotation.

00:15:33.320 --> 00:15:35.700
And actually, as soon as I've
added this, this is actually

00:15:35.700 --> 00:15:39.320
enough to give me an API
that I can use inside

00:15:39.320 --> 00:15:40.440
of my Android app.

00:15:40.440 --> 00:15:42.560
But there's some small
improvements and tweaks that I

00:15:42.560 --> 00:15:44.790
can make to it if I want to
make it a little more

00:15:44.790 --> 00:15:46.090
customized.

00:15:46.090 --> 00:15:49.440
So the first one I'll do is
I'll give this API a name.

00:15:49.440 --> 00:15:50.345
This is part of tic-tac-toe.

00:15:50.345 --> 00:15:53.390
So we'll give it the
name of tictactoe.

00:15:53.390 --> 00:15:56.030
And then the next annotation we
can add-- and again, this

00:15:56.030 --> 00:15:57.810
is completely optional
at this point--

00:15:57.810 --> 00:16:00.180
is the API method annotation.

00:16:00.180 --> 00:16:03.930
And we can use that to give each
of our methods a name.

00:16:03.930 --> 00:16:06.760
So we'll call this scores.get.

00:16:06.760 --> 00:16:10.075
And we'll do this for the
other methods, as well.

00:16:10.075 --> 00:16:11.325
So this one is scores.list.

00:16:15.270 --> 00:16:16.520
And this is all very
straightforward.

00:16:21.700 --> 00:16:22.180
So there we go.

00:16:22.180 --> 00:16:25.000
We've got three nicely
named API methods.

00:16:25.000 --> 00:16:26.700
And then there's some other
things that we can also use

00:16:26.700 --> 00:16:28.210
the API method annotation for.

00:16:28.210 --> 00:16:32.020
So one of those, for example,
if I wanted to do user

00:16:32.020 --> 00:16:37.260
authentication inside of my
application, I could add some

00:16:37.260 --> 00:16:40.090
customization options for
OAuth2 inside of the API

00:16:40.090 --> 00:16:40.760
method annotation.

00:16:40.760 --> 00:16:44.810
So I could do things like
provide a list of client IDs

00:16:44.810 --> 00:16:48.140
that would be acceptable
as consumers of my API.

00:16:48.140 --> 00:16:50.580
I could add an audience field
if I only wanted to accept

00:16:50.580 --> 00:16:52.150
requests that were coming
from a certain

00:16:52.150 --> 00:16:53.700
audience, things like that.

00:16:53.700 --> 00:16:56.820
And then once those are in
there, I can add a user

00:16:56.820 --> 00:17:01.430
parameter into my API method,
which will give me a user

00:17:01.430 --> 00:17:04.079
object that I can then use
inside of my back-end code.

00:17:04.079 --> 00:17:06.950
And this is exactly the same
user object it you would use

00:17:06.950 --> 00:17:10.060
if you were using the
built-in users API

00:17:10.060 --> 00:17:11.010
that's part of App Engine.

00:17:11.010 --> 00:17:14.579
So it's exactly the
same behavior.

00:17:14.579 --> 00:17:17.050
It's the API that you're
used to using.

00:17:17.050 --> 00:17:19.990
We're not adding anything
custom or special here.

00:17:19.990 --> 00:17:24.640
So if you have other pieces of
your project that use the

00:17:24.640 --> 00:17:26.980
user's API there, this is
completely compatible with

00:17:26.980 --> 00:17:27.950
that as well.

00:17:27.950 --> 00:17:30.570
So for the purposes of the demo,
we'll leave that out

00:17:30.570 --> 00:17:33.770
just because it makes things run
a little bit smoother as

00:17:33.770 --> 00:17:34.900
far as my demo flow.

00:17:34.900 --> 00:17:38.400
But again, it's very simple
to add authentication

00:17:38.400 --> 00:17:39.930
to your back end.

00:17:39.930 --> 00:17:42.770
So this class is basically
finished at this point.

00:17:42.770 --> 00:17:45.660
And just quickly, I'll show you
the board Endpoint class

00:17:45.660 --> 00:17:47.180
that I've made, as well.

00:17:47.180 --> 00:17:50.150
Again, we have only one method
here, which is just allowing

00:17:50.150 --> 00:17:52.700
us to get the move from
the computer.

00:17:52.700 --> 00:17:54.390
And it's part of the same API.

00:17:54.390 --> 00:17:58.270
We're using the API method
annotation here as well.

00:17:58.270 --> 00:17:58.640
All right.

00:17:58.640 --> 00:18:01.180
So now that we've got all this
code written, we can run this

00:18:01.180 --> 00:18:02.050
application locally.

00:18:02.050 --> 00:18:06.590
So I'll just hit the Play button
here in Eclipse, and

00:18:06.590 --> 00:18:08.040
it'll spin up a local server.

00:18:08.040 --> 00:18:08.260
Great.

00:18:08.260 --> 00:18:10.470
Looks like it's running
on this port.

00:18:10.470 --> 00:18:13.850
And then we'll go into some curl
commands that we can try

00:18:13.850 --> 00:18:15.580
out the API locally.

00:18:15.580 --> 00:18:20.000
So the first one of these that
we're going to show you here

00:18:20.000 --> 00:18:23.860
is a command to test
the board API.

00:18:23.860 --> 00:18:28.170
And so what we're doing here is
we're passing in JSON Blob,

00:18:28.170 --> 00:18:30.360
which has the current
state of the board.

00:18:30.360 --> 00:18:32.050
So we're representing
the board here as a

00:18:32.050 --> 00:18:36.070
one-dimensional array
of squares.

00:18:36.070 --> 00:18:40.000
I've set the middle square to be
an X. And I'm sending that

00:18:40.000 --> 00:18:42.010
to the API that's running
on my local machine.

00:18:42.010 --> 00:18:47.090
And if I hit Return here,
we get a response back.

00:18:47.090 --> 00:18:50.170
The computer has played one of
the adjacent squares with an

00:18:50.170 --> 00:18:53.370
O. And then we can use
that in whatever

00:18:53.370 --> 00:18:55.090
applications we would like.

00:18:55.090 --> 00:18:56.460
So that's really convenient.

00:18:56.460 --> 00:18:58.970
It makes it really simple to
test these APIs as you're

00:18:58.970 --> 00:19:00.610
developing them.

00:19:00.610 --> 00:19:01.760
So that's cool.

00:19:01.760 --> 00:19:05.160
So let's actually try deploying
this to App Engine.

00:19:05.160 --> 00:19:07.050
So we'll use the Google plug-in
for Eclipse here.

00:19:07.050 --> 00:19:09.230
We'll hit the Deploy to App
Engine button inside of Google

00:19:09.230 --> 00:19:10.690
Plugin for Eclipse.

00:19:10.690 --> 00:19:13.010
We'll hit the Deploy, and then
we'll let this go in the

00:19:13.010 --> 00:19:15.470
background.

00:19:15.470 --> 00:19:16.910
Hopefully the network will
cooperate with us, and it

00:19:16.910 --> 00:19:18.620
won't take too long for
this to go through.

00:19:24.540 --> 00:19:26.430
All right, just checking to
make sure that the API is

00:19:26.430 --> 00:19:30.700
running and the back end is
running on App Engine.

00:19:30.700 --> 00:19:31.300
All right.

00:19:31.300 --> 00:19:32.520
Great.

00:19:32.520 --> 00:19:36.270
And so now we can flip over to
one of the tabs where I have

00:19:36.270 --> 00:19:37.350
the application running.

00:19:37.350 --> 00:19:41.350
So one of the things that
Christina mentioned before was

00:19:41.350 --> 00:19:44.720
that all of these APIs are
built on the same API

00:19:44.720 --> 00:19:47.340
infrastructure that powers lots
of Google's other APIs,

00:19:47.340 --> 00:19:50.220
so things like the Google
Calendar API or the Google+

00:19:50.220 --> 00:19:53.300
APIs that many of you are
probably familiar with.

00:19:53.300 --> 00:19:57.040
And one of the things that binds
all of those APIs and

00:19:57.040 --> 00:20:01.640
makes them very easy to use is
this common discovery format

00:20:01.640 --> 00:20:03.770
that we have provided
for all of the APIs.

00:20:03.770 --> 00:20:08.220
And basically what this is is a
JSON description of each of

00:20:08.220 --> 00:20:11.440
the APIs that's being hosted
by Google's infrastructure.

00:20:11.440 --> 00:20:14.720
And the same way that we have
those for Google APIs, we have

00:20:14.720 --> 00:20:17.180
those for APIs built with
Google Cloud Endpoints.

00:20:17.180 --> 00:20:20.520
So you can see here, this is the
discovery document for the

00:20:20.520 --> 00:20:22.510
API that I just deployed.

00:20:22.510 --> 00:20:26.410
And if we scroll through this,
we have descriptions of all of

00:20:26.410 --> 00:20:29.850
the methods and the objects that
I'm returning from any of

00:20:29.850 --> 00:20:32.470
these API calls, what the
expected inputs are, things

00:20:32.470 --> 00:20:35.010
like that, which we can
then use inside of

00:20:35.010 --> 00:20:36.850
Google's other tools.

00:20:36.850 --> 00:20:39.490
And so one of those tools that
we can use is the Google APIs

00:20:39.490 --> 00:20:43.060
Explorer, which many of have
probably tried for, again,

00:20:43.060 --> 00:20:45.610
things like the Google+ API,
when you're learning about a

00:20:45.610 --> 00:20:48.110
new API and you just want to
try it out before having to

00:20:48.110 --> 00:20:50.920
write too much client code.

00:20:50.920 --> 00:20:54.280
So I've loaded up the API
Explorer here with my

00:20:54.280 --> 00:20:55.700
tic-tac-toe APIs.

00:20:55.700 --> 00:20:58.330
And if I click on one of these
APIs here-- so let's look at

00:20:58.330 --> 00:21:01.440
the getmove method--

00:21:01.440 --> 00:21:04.730
I can fill in a sample
request to the API.

00:21:04.730 --> 00:21:07.480
And again, we'll use that same
board that I was showing you

00:21:07.480 --> 00:21:10.320
before where I've played
in the middle square.

00:21:10.320 --> 00:21:13.825
We can hit Execute, and then
this is going to send off a

00:21:13.825 --> 00:21:14.710
request to our API.

00:21:14.710 --> 00:21:18.030
You can see what that request
might look like if you were

00:21:18.030 --> 00:21:20.590
inspecting the packets in
something like Wireshark.

00:21:20.590 --> 00:21:22.670
And then you get the response
from the API, as well.

00:21:22.670 --> 00:21:24.590
And this looks very similar to
what we saw when we were just

00:21:24.590 --> 00:21:27.304
testing it locally, except the
computer's decided to play in

00:21:27.304 --> 00:21:29.390
a different square.

00:21:29.390 --> 00:21:30.440
So that's really cool.

00:21:30.440 --> 00:21:33.460
And one of the pieces that the
API Explorer is built on is

00:21:33.460 --> 00:21:35.450
the JavaScript client
library, which we

00:21:35.450 --> 00:21:37.050
provide for Google APIs.

00:21:37.050 --> 00:21:39.340
And using that same technology,
we can then go and

00:21:39.340 --> 00:21:44.190
build a web front end for
the tic-tac-toe game.

00:21:44.190 --> 00:21:46.740
Again, using this
exact same API.

00:21:46.740 --> 00:21:49.920
So I've written an application
like that here, which you can

00:21:49.920 --> 00:21:52.660
see, it's got a very simple
board interface.

00:21:52.660 --> 00:21:54.890
And if I click on one of these
squares, it'll send a request

00:21:54.890 --> 00:21:56.020
off to the computer.

00:21:56.020 --> 00:21:58.810
The computer plays, and so on.

00:21:58.810 --> 00:22:00.630
But one thing that's interesting
about this is then

00:22:00.630 --> 00:22:03.475
you can go and inspect these
requests as they're going on

00:22:03.475 --> 00:22:04.850
in the background.

00:22:04.850 --> 00:22:07.900
And you can look at the contents
of the requests that

00:22:07.900 --> 00:22:12.570
I'm sending, as well as the
responses from each of those

00:22:12.570 --> 00:22:14.560
requests here, too, which,
again, makes it really easy to

00:22:14.560 --> 00:22:19.250
develop these applications if
you were writing them in, say,

00:22:19.250 --> 00:22:20.890
Chrome, for instance.

00:22:20.890 --> 00:22:23.024
So we'll play again here.

00:22:23.024 --> 00:22:25.520
Looks like I am a winner
again, awesome.

00:22:25.520 --> 00:22:28.560
So this is going to send off
a request, again, recording

00:22:28.560 --> 00:22:29.850
another victory.

00:22:29.850 --> 00:22:32.210
And hopefully the--

00:22:32.210 --> 00:22:34.030
back her up-- yeah,
there we go--

00:22:34.030 --> 00:22:35.970
has loaded both the previous
game that I played on the

00:22:35.970 --> 00:22:39.820
Android device, as well as my
most recent victory in the

00:22:39.820 --> 00:22:41.770
JavaScript app.

00:22:41.770 --> 00:22:45.190
So I bet a lot of you are here
not because of your desire to

00:22:45.190 --> 00:22:47.490
build web applications but your
desire to build Android

00:22:47.490 --> 00:22:48.260
applications.

00:22:48.260 --> 00:22:50.860
So let's take a look at what
this might look like if we

00:22:50.860 --> 00:22:54.950
were to add this behavior to
an Android application.

00:22:54.950 --> 00:22:57.270
So the first thing that we're
going to do is we're going to

00:22:57.270 --> 00:22:59.270
return to our App
Engine project.

00:22:59.270 --> 00:23:02.430
And using the Google Plugin for
Eclipse, we're going to

00:23:02.430 --> 00:23:05.660
use this new feature we just
added which says, Generate

00:23:05.660 --> 00:23:07.080
Cloud Endpoint Client Library.

00:23:07.080 --> 00:23:10.540
And if I select this, what this
is going to do is it's

00:23:10.540 --> 00:23:14.100
going to read all of the
annotations that I've added to

00:23:14.100 --> 00:23:17.180
my back-end classes, send
them off to Google.

00:23:17.180 --> 00:23:20.030
Google is going to generate some
API configuration for me

00:23:20.030 --> 00:23:23.230
and return a client library
that I can then use in any

00:23:23.230 --> 00:23:25.080
Java application.

00:23:25.080 --> 00:23:26.560
So it's done that now.

00:23:26.560 --> 00:23:27.880
It's loaded this file here.

00:23:27.880 --> 00:23:32.230
And if we go and look at it
inside of the Finder, we can

00:23:32.230 --> 00:23:34.030
see all of the things that
it's generated for me.

00:23:34.030 --> 00:23:35.670
So we only have one API.

00:23:35.670 --> 00:23:37.490
It's v1, right?

00:23:37.490 --> 00:23:38.780
So we only have one
directory here.

00:23:38.780 --> 00:23:41.785
And if we expand this, we can
see all of the things that

00:23:41.785 --> 00:23:43.040
it's created for me.

00:23:43.040 --> 00:23:45.840
So the two things that are most
interesting to you here,

00:23:45.840 --> 00:23:49.190
probably are the Libs directory,
which has all of

00:23:49.190 --> 00:23:51.640
the libraries that I would need
to run this in basically

00:23:51.640 --> 00:23:52.770
any Java environment.

00:23:52.770 --> 00:23:54.730
So this isn't just the jars
that we need to run on

00:23:54.730 --> 00:23:57.810
Android, it also includes jars
for running it on another App

00:23:57.810 --> 00:24:01.000
Engine app, or other
Java environments.

00:24:01.000 --> 00:24:04.170
And so I have an Android
app that I've

00:24:04.170 --> 00:24:05.230
created here as well.

00:24:05.230 --> 00:24:08.780
And I've already loaded in a
smaller set of those libraries

00:24:08.780 --> 00:24:10.800
into this directory already.

00:24:10.800 --> 00:24:14.380
And one thing I should add is
that the Java client library

00:24:14.380 --> 00:24:15.540
also works with Proguard.

00:24:15.540 --> 00:24:17.740
So you might be looking at
this and saying, oh, well

00:24:17.740 --> 00:24:19.520
that's a lot of stuff.

00:24:19.520 --> 00:24:22.230
But it actually compiles down
to a very, very reasonable

00:24:22.230 --> 00:24:25.270
size when you're
using Proguard.

00:24:25.270 --> 00:24:28.770
And then the second thing that
we've got in here is a set of

00:24:28.770 --> 00:24:32.390
source files, which we can use
to interact with the API.

00:24:32.390 --> 00:24:36.670
So I will copy these into my
App Engine project here.

00:24:36.670 --> 00:24:41.460
And then if we go back into
Eclipse, refresh this

00:24:41.460 --> 00:24:44.770
directory here, it's loaded
those files in.

00:24:44.770 --> 00:24:47.860
And now we can update this
sample activity that I've

00:24:47.860 --> 00:24:50.730
created here, which will allow
me to interact with the API.

00:24:50.730 --> 00:24:55.080
So to show you a sample of what
these API calls might

00:24:55.080 --> 00:25:00.210
look like, I've constructed a
service class above here in

00:25:00.210 --> 00:25:01.500
this activity.

00:25:01.500 --> 00:25:02.720
Very straightforward, right?

00:25:02.720 --> 00:25:05.010
And so once I have done that,
I can then use it inside of

00:25:05.010 --> 00:25:07.910
the rest of the activity class
to generate calls to the API.

00:25:07.910 --> 00:25:10.450
So what we're interested
in here, inside of this

00:25:10.450 --> 00:25:13.690
asynchronous task, is the
computer's next move.

00:25:13.690 --> 00:25:17.500
So I will make a call
to the board API.

00:25:17.500 --> 00:25:19.220
So we'll call service.board.

00:25:19.220 --> 00:25:21.110
And then I'm interested
in the getmove

00:25:21.110 --> 00:25:23.180
method, which is great.

00:25:23.180 --> 00:25:27.760
And then we've been passed
in the board state

00:25:27.760 --> 00:25:29.190
here in this object.

00:25:29.190 --> 00:25:32.600
And then we'll send it
off to the server.

00:25:32.600 --> 00:25:35.430
So it's really simple to call
these API calls using the

00:25:35.430 --> 00:25:36.970
generated libraries.

00:25:36.970 --> 00:25:39.430
We basically have a one
liner here to make a

00:25:39.430 --> 00:25:41.240
call to my back end.

00:25:41.240 --> 00:25:44.770
So now that that's added we can
then compile this app in

00:25:44.770 --> 00:25:50.280
the background and hopefully
load it up on my Android

00:25:50.280 --> 00:25:51.480
emulator again.

00:25:51.480 --> 00:25:57.780
So we'll just give that
a second, switch

00:25:57.780 --> 00:25:59.030
over to this here.

00:26:06.364 --> 00:26:08.620
My poor little computer has
lots of things running, so

00:26:08.620 --> 00:26:10.455
this may take a second
longer than normal.

00:26:15.870 --> 00:26:17.110
All right.

00:26:17.110 --> 00:26:18.440
So this is the app that
I just built.

00:26:18.440 --> 00:26:20.710
It's also already loading
in the previous

00:26:20.710 --> 00:26:21.960
games that I've played.

00:26:21.960 --> 00:26:24.000
And if I click on one of these
squares, then it's sending a

00:26:24.000 --> 00:26:25.580
request off the server.

00:26:25.580 --> 00:26:28.210
And again, we're playing
tic-tac-toe.

00:26:28.210 --> 00:26:29.720
Pretty neat.

00:26:29.720 --> 00:26:33.090
So there's another mobile
development platform, which

00:26:33.090 --> 00:26:35.270
some of you guys might have
heard of, and maybe you're

00:26:35.270 --> 00:26:37.100
interested in developing
for that as well.

00:26:37.100 --> 00:26:40.270
So let's look at what this might
look like in the iOS

00:26:40.270 --> 00:26:42.480
development case.

00:26:42.480 --> 00:26:46.790
So in the same way that we have
a generator for the Java

00:26:46.790 --> 00:26:49.240
client library, we have
a generator for

00:26:49.240 --> 00:26:50.480
Objective C as well.

00:26:50.480 --> 00:26:53.500
So I'm going to call that here
using one of the discovery

00:26:53.500 --> 00:26:55.370
files that was generated
from my API.

00:26:55.370 --> 00:26:59.340
So what this is doing is it's,
again, reading that discovery

00:26:59.340 --> 00:27:02.780
format that I talked about
before and generating a set of

00:27:02.780 --> 00:27:05.930
header and implementation
classes that I can then use

00:27:05.930 --> 00:27:09.300
inside of an application
in Xcode.

00:27:09.300 --> 00:27:11.950
So these are all the
files I need here.

00:27:11.950 --> 00:27:15.910
And we can just copy these into
an application that I

00:27:15.910 --> 00:27:16.960
have set up.

00:27:16.960 --> 00:27:19.742
I've got a little directory
for them already.

00:27:19.742 --> 00:27:21.160
We'll just drop those
in there.

00:27:21.160 --> 00:27:24.670
And then in the same way that I
showed you in the Java case,

00:27:24.670 --> 00:27:29.800
we can paste in an example API
call to get the next move from

00:27:29.800 --> 00:27:30.360
the computer.

00:27:30.360 --> 00:27:32.020
So we'll start writing here.

00:27:32.020 --> 00:27:34.760
So we're interested in querying
the tic-tac-toe API.

00:27:34.760 --> 00:27:39.210
And we want to query for the
board and pass in an object.

00:27:44.470 --> 00:27:47.620
Autocomplete's super
helpful here.

00:27:47.620 --> 00:27:48.310
All right, great.

00:27:48.310 --> 00:27:49.550
So we have that written
as well.

00:27:49.550 --> 00:27:53.110
And then if we hit Run, again,
this will compile in the

00:27:53.110 --> 00:27:57.415
background and then fire
up the simulator.

00:28:01.990 --> 00:28:02.460
All right.

00:28:02.460 --> 00:28:04.040
We've got all my previous
games, again,

00:28:04.040 --> 00:28:04.770
loading at the bottom.

00:28:04.770 --> 00:28:06.700
I'm on a roll today.

00:28:06.700 --> 00:28:09.430
And I can play again.

00:28:09.430 --> 00:28:10.872
Running--

00:28:10.872 --> 00:28:12.122
oops.

00:28:17.178 --> 00:28:20.700
Yes, all right.

00:28:20.700 --> 00:28:22.210
Presenter's luck,
what can I say?

00:28:22.210 --> 00:28:24.670
All right.

00:28:24.670 --> 00:28:27.470
So now we've gotten clients
written in three different

00:28:27.470 --> 00:28:30.220
languages, running on three
different platforms.

00:28:30.220 --> 00:28:32.640
And to just show you what this
looks like as far as the

00:28:32.640 --> 00:28:36.720
development experience on the
admin side, we can then look

00:28:36.720 --> 00:28:39.580
at the requests coming in from
each of these platforms.

00:28:39.580 --> 00:28:43.700
And you can see here, at the top
we have requests coming in

00:28:43.700 --> 00:28:45.710
from the Objective C client.

00:28:45.710 --> 00:28:48.250
Below that, we have some
requests coming in from the

00:28:48.250 --> 00:28:51.220
Java client library, which is
the one running on Android.

00:28:51.220 --> 00:28:54.540
And looks like we've got some
people in the audience who are

00:28:54.540 --> 00:28:55.130
also playing.

00:28:55.130 --> 00:28:57.610
That's awesome.

00:28:57.610 --> 00:29:00.460
And then if we go back to the
previous page, we can see some

00:29:00.460 --> 00:29:03.930
requests coming from my laptop
here running the JavaScript

00:29:03.930 --> 00:29:04.680
client library.

00:29:04.680 --> 00:29:10.850
So there you have it, a simple
App Engine back end powering a

00:29:10.850 --> 00:29:15.710
mobile application running on
the web, iOS, and Android.

00:29:15.710 --> 00:29:17.795
So if anyone in the audience
is interested in trying out

00:29:17.795 --> 00:29:21.190
and doesn't want to copy the
URLs themselves, we also have

00:29:21.190 --> 00:29:26.150
some handy QR codes here you
can load up and play.

00:29:26.150 --> 00:29:27.630
So with that, I'll hand
it back to Christina.

00:29:27.630 --> 00:29:34.940
[APPLAUSE]

00:29:34.940 --> 00:29:35.220
CHRISTINA ILVENTO: Great.

00:29:35.220 --> 00:29:35.630
Thanks, Dan.

00:29:35.630 --> 00:29:39.630
I'll give everybody a minute to
scan those QR codes and see

00:29:39.630 --> 00:29:43.215
if you can beat Dan's really
awesome record for this run

00:29:43.215 --> 00:29:46.400
through of our talk.

00:29:46.400 --> 00:29:46.700
All right.

00:29:46.700 --> 00:29:50.750
Looks like still a few people
trying to get it.

00:29:50.750 --> 00:29:53.890
So this is really, really
powerful, what Dan just walked

00:29:53.890 --> 00:29:54.260
us through.

00:29:54.260 --> 00:29:57.740
We were able to get, in the
space of this talk and with

00:29:57.740 --> 00:30:00.720
admittedly a little bit of
copy-and-paste magic, a real

00:30:00.720 --> 00:30:04.850
application up and running
with multiple clients.

00:30:04.850 --> 00:30:08.880
And so for tic-tac-toe, really
what we did here was we

00:30:08.880 --> 00:30:11.210
actually wrote the back-end
code the same way we do

00:30:11.210 --> 00:30:13.560
normally in our normal App
Engine development

00:30:13.560 --> 00:30:14.170
environment.

00:30:14.170 --> 00:30:16.340
We were storing our previous
games in the Datastore.

00:30:16.340 --> 00:30:19.090
The game logic for the computer
to make its next move

00:30:19.090 --> 00:30:21.390
was just a regular
App Engine app.

00:30:21.390 --> 00:30:24.810
And then Dan showed you how you
might use the Users API to

00:30:24.810 --> 00:30:27.620
actually add that OAuth
support in, as well.

00:30:27.620 --> 00:30:30.810
And then we just annotated the
board and score classes to

00:30:30.810 --> 00:30:33.620
actually generate the API
configuration that Dan showed

00:30:33.620 --> 00:30:38.250
you, and the service classes,
and actually created our board

00:30:38.250 --> 00:30:40.280
and score APIs.

00:30:40.280 --> 00:30:42.380
And then we were able to
generate the client libraries.

00:30:42.380 --> 00:30:45.540
And Dan showed you both how to
do the Objective C on the

00:30:45.540 --> 00:30:48.760
command line, as well as using
the Google Plugin for Eclipse

00:30:48.760 --> 00:30:50.690
to generate the Java
client libraries.

00:30:50.690 --> 00:30:55.180
And then we used those to write
our client apps So in

00:30:55.180 --> 00:30:59.020
the space of the few minutes
Dan was up here, our

00:30:59.020 --> 00:31:01.170
tic-tac-toe app is off
the ground, and

00:31:01.170 --> 00:31:03.320
we're ready to launch.

00:31:03.320 --> 00:31:06.510
So with Endpoints, you get some
really great features.

00:31:06.510 --> 00:31:09.500
So you can write your back
end in Python or Java.

00:31:09.500 --> 00:31:11.400
And then you can use the
annotation-based configuration

00:31:11.400 --> 00:31:13.560
to actually set up
your API and then

00:31:13.560 --> 00:31:15.170
get the OAuth2 support.

00:31:15.170 --> 00:31:18.160
And then on the client side, you
can get generated client

00:31:18.160 --> 00:31:22.660
libraries in Objective C, Java,
or JavaScript for iOS,

00:31:22.660 --> 00:31:24.100
Android, or your browser.

00:31:24.100 --> 00:31:26.370
And then you get the great
tools, and Dan walked you

00:31:26.370 --> 00:31:27.400
through quite a few of those.

00:31:27.400 --> 00:31:30.250
So you both get the App Engine
Dev AppServer, so you can test

00:31:30.250 --> 00:31:33.360
your API locally as part of your
normal App Engine testing

00:31:33.360 --> 00:31:36.190
process, as well as the
integration with the Google

00:31:36.190 --> 00:31:38.630
Plugin for Eclipse for
generating client libraries

00:31:38.630 --> 00:31:43.120
and your natural Android,
Java flow, as well.

00:31:43.120 --> 00:31:46.640
And then the other cool thing
that you get as a benefit of

00:31:46.640 --> 00:31:49.600
being built on top of Google's
API infrastructure is you get

00:31:49.600 --> 00:31:52.450
some of the tooling that's
available around Google APIs,

00:31:52.450 --> 00:31:55.570
like the APIs Explorer, which
is a really great way to, as

00:31:55.570 --> 00:31:59.270
you're designing your API and
starting to test it out, play

00:31:59.270 --> 00:32:04.050
around with the API during
your development process.

00:32:04.050 --> 00:32:08.520
So Endpoints is really great
for actually building an

00:32:08.520 --> 00:32:10.310
application with multiple
clients.

00:32:10.310 --> 00:32:12.530
You get the scalability of
Google's infrastructure.

00:32:12.530 --> 00:32:14.780
You get the same scalability
that you're used to with App

00:32:14.780 --> 00:32:17.490
Engine, as well as the
scalability of Google's API

00:32:17.490 --> 00:32:18.530
infrastructure.

00:32:18.530 --> 00:32:21.060
If you're familiar with some
of the Google APIs, like

00:32:21.060 --> 00:32:24.760
Google+, YouTube, they're
handling billions of

00:32:24.760 --> 00:32:26.040
API calls per day.

00:32:26.040 --> 00:32:29.160
And your API for your client
applications is getting the

00:32:29.160 --> 00:32:30.860
benefit of that scale.

00:32:30.860 --> 00:32:34.150
You also get the flexibility
of multiple clients and the

00:32:34.150 --> 00:32:36.670
flexibility of choosing the
Endpoints that are meaningful

00:32:36.670 --> 00:32:37.580
to your application.

00:32:37.580 --> 00:32:40.700
So you're not restricted to
things like crowd operations,

00:32:40.700 --> 00:32:44.380
or any particular sort of data
type, or having to fit your

00:32:44.380 --> 00:32:47.980
application's logic into some
sort of mold of an API.

00:32:47.980 --> 00:32:50.670
You really create the API that
makes sense for your

00:32:50.670 --> 00:32:51.870
application.

00:32:51.870 --> 00:32:54.780
And then finally you get the
simplicity, which I think Dan

00:32:54.780 --> 00:32:58.340
showed pretty well, of just
needing to annotate and then

00:32:58.340 --> 00:32:58.830
you're done.

00:32:58.830 --> 00:32:59.860
You've got your API.

00:32:59.860 --> 00:33:02.590
And you get to continue to use
your normal App Engine

00:33:02.590 --> 00:33:03.800
development process.

00:33:03.800 --> 00:33:06.740
There's no need to go out and
find some other way to do an

00:33:06.740 --> 00:33:08.690
API, find some other
way to do auth.

00:33:08.690 --> 00:33:11.420
It's all very seamlessly
integrated into your normal

00:33:11.420 --> 00:33:14.680
App Engine development
process.

00:33:14.680 --> 00:33:16.980
And so maybe you're thinking,
all right,

00:33:16.980 --> 00:33:18.850
it's scalable, whatever.

00:33:18.850 --> 00:33:21.630
I mean you guys wrote
tic-tac-toe, very cute.

00:33:21.630 --> 00:33:25.310
But it turns out that on your
Android phones, if you all are

00:33:25.310 --> 00:33:28.750
using the I/O app, that the
I/O Android app is also

00:33:28.750 --> 00:33:29.980
written using Endpoints.

00:33:29.980 --> 00:33:32.690
So when you actually installed
that app, and chose which

00:33:32.690 --> 00:33:35.700
account you wanted to use, and
got your session scheduled,

00:33:35.700 --> 00:33:37.940
all of that is running
using Endpoints.

00:33:37.940 --> 00:33:40.160
And so we've had some really
good success using this

00:33:40.160 --> 00:33:42.920
internally to Google, to
actually create some of our

00:33:42.920 --> 00:33:44.120
applications.

00:33:44.120 --> 00:33:46.540
And so we're really excited
today to open this up to

00:33:46.540 --> 00:33:48.320
trusted testers.

00:33:48.320 --> 00:33:51.500
So if you all are interested
in getting early access to

00:33:51.500 --> 00:33:53.530
Endpoints--

00:33:53.530 --> 00:33:55.070
excellent, people are reaching
for their phones

00:33:55.070 --> 00:33:56.970
to scan the QR code.

00:33:56.970 --> 00:33:59.640
Please do scan the QR code and
sign up at endpoints-truste

00:33:59.640 --> 00:34:00.890
d-tester.appspot.com.

00:34:04.840 --> 00:34:07.520
We're really pleased to be
making this available to you

00:34:07.520 --> 00:34:11.080
today as trusted testers and
let you all try it out and

00:34:11.080 --> 00:34:14.110
build your million-dollar
app ideas.

00:34:14.110 --> 00:34:16.280
Because it turns out maybe ours
isn't going to make a

00:34:16.280 --> 00:34:17.409
million bucks, Dan.

00:34:17.409 --> 00:34:20.100
I'm not sure.

00:34:20.100 --> 00:34:24.050
So I'll give everybody a minute
to scan that QR code.

00:34:24.050 --> 00:34:27.639
And if you want to get even
earlier access, Dan is going

00:34:27.639 --> 00:34:30.940
to be running a Codelab tomorrow
at 11 AM, I think in

00:34:30.940 --> 00:34:32.679
Codelab room one.

00:34:32.679 --> 00:34:35.300
And he's going to walk you
through the finer points of

00:34:35.300 --> 00:34:37.770
building the tic-tac-toe app and
help you get this up and

00:34:37.770 --> 00:34:41.610
running for yourselves so you
can see what that's like.

00:34:41.610 --> 00:34:46.280
And there are a couple of talks
later this afternoon

00:34:46.280 --> 00:34:48.360
that are also going to
touch on Endpoints.

00:34:48.360 --> 00:34:53.010
So, Brad and Ido are going to be
talking about HTML5 in App

00:34:53.010 --> 00:34:55.690
Engine at about 1:30.

00:34:55.690 --> 00:34:59.160
And then Yaniv and Sriram are
going to be talking a bit more

00:34:59.160 --> 00:35:00.880
about the Android side,
as well as some of the

00:35:00.880 --> 00:35:03.380
authentication stuff that we
didn't get to go through

00:35:03.380 --> 00:35:08.180
today, at 5:15, and then the
Codelab that Dan is going to

00:35:08.180 --> 00:35:09.430
be running tomorrow.

00:35:12.060 --> 00:35:12.610
All right.

00:35:12.610 --> 00:35:15.960
So that about sums it up for
what we had for you all.

00:35:15.960 --> 00:35:19.190
So thank you very
much for coming.

00:35:19.190 --> 00:35:22.760
I think we definitely have some
time to take questions.

00:35:22.760 --> 00:35:26.420
And then, again, here are the QR
codes for the web version,

00:35:26.420 --> 00:35:29.660
the Android version, and the
trusted-tester sign up.

00:35:29.660 --> 00:35:32.580
But if you'd like to ask a
question, please do come up to

00:35:32.580 --> 00:35:34.790
the microphones on either side.

00:35:34.790 --> 00:35:35.390
Thank you.

00:35:35.390 --> 00:35:45.310
[APPLAUSE]

00:35:45.310 --> 00:35:45.806
AUDIENCE: Hi.

00:35:45.806 --> 00:35:46.302
CHRISTINA ILVENTO: Go ahead.

00:35:46.302 --> 00:35:47.790
Yeah.

00:35:47.790 --> 00:35:58.490
AUDIENCE: So when you develop
an app that runs--

00:35:58.490 --> 00:36:01.790
a product runs on multiple
clients, you have a data

00:36:01.790 --> 00:36:06.130
structure, and objects,
and stuff like that.

00:36:06.130 --> 00:36:09.900
So for example, there's
Java on App

00:36:09.900 --> 00:36:12.720
Engine, Java on Android.

00:36:12.720 --> 00:36:23.390
And sometimes I see the objects
get generated from the

00:36:23.390 --> 00:36:27.610
API and not the other
way around.

00:36:27.610 --> 00:36:30.156
So how do we tackle this?

00:36:30.156 --> 00:36:34.270
Like, I have the same structure
in other places, but

00:36:34.270 --> 00:36:35.895
I need to build it again.

00:36:41.120 --> 00:36:45.450
Because this approach goes from
the API point of view and

00:36:45.450 --> 00:36:48.340
not the object's
point of view.

00:36:48.340 --> 00:36:49.810
CHRISTINA ILVENTO: Sure,
so Dan do you want to?

00:36:49.810 --> 00:36:50.430
DAN HOLEVOET: Yeah.

00:36:50.430 --> 00:36:55.800
So in this case, the objects
that are passed by the API are

00:36:55.800 --> 00:36:58.130
described by the code
that you're writing.

00:36:58.130 --> 00:37:01.930
So the score class that I showed
on the App Engine side,

00:37:01.930 --> 00:37:04.680
if you already had an object and
you wanted to use that as

00:37:04.680 --> 00:37:07.420
the basis for your API,
you could do that.

00:37:07.420 --> 00:37:10.130
So the discovery format that's
powering all of these things

00:37:10.130 --> 00:37:14.110
behind the scenes is
interpreting your object and

00:37:14.110 --> 00:37:17.570
then writing client libraries
that will read and write to

00:37:17.570 --> 00:37:19.840
your object format in
the correct way.

00:37:19.840 --> 00:37:25.180
AUDIENCE: So I have an object
class in Objective C, an

00:37:25.180 --> 00:37:26.510
object class--

00:37:26.510 --> 00:37:26.960
DAN HOLEVOET: Right.

00:37:26.960 --> 00:37:30.030
So we generate a class in
Objective C for you that's

00:37:30.030 --> 00:37:33.830
matching the object that you've
created on your server.

00:37:33.830 --> 00:37:35.080
AUDIENCE: OK.

00:37:40.350 --> 00:37:46.540
So perhaps it's for the Codelab,
but I need to fill in

00:37:46.540 --> 00:37:48.970
the actual actions.

00:37:48.970 --> 00:37:55.320
So is it generated that I can
fill in without overriding my

00:37:55.320 --> 00:37:58.580
code every time the
API is generated?

00:37:58.580 --> 00:37:58.820
DAN HOLEVOET: Yeah.

00:37:58.820 --> 00:38:02.130
So the Endpoint class that I
showed you, you're in control

00:38:02.130 --> 00:38:05.200
of all of the code that's
in that class.

00:38:05.200 --> 00:38:06.470
AUDIENCE: But that's
generated.

00:38:06.470 --> 00:38:07.920
DAN HOLEVOET: No, that
wasn't generated.

00:38:07.920 --> 00:38:08.240
AUDIENCE: OK.

00:38:08.240 --> 00:38:09.790
DAN HOLEVOET: So that was
a class that I had.

00:38:09.790 --> 00:38:12.980
We actually do offer the
ability to generate,

00:38:12.980 --> 00:38:15.190
automatically, an Endpoint
class for you

00:38:15.190 --> 00:38:16.700
based off of an object.

00:38:16.700 --> 00:38:21.170
So I could've automatically
created a class to interact

00:38:21.170 --> 00:38:21.960
with the score object.

00:38:21.960 --> 00:38:22.850
I didn't show that here.

00:38:22.850 --> 00:38:24.220
But you could do that.

00:38:24.220 --> 00:38:26.330
The way I was showing it though,
you're in control of

00:38:26.330 --> 00:38:29.040
all of that code, and you're
just annotating it to describe

00:38:29.040 --> 00:38:31.600
the way that your API should
be built around it.

00:38:31.600 --> 00:38:32.010
AUDIENCE: OK.

00:38:32.010 --> 00:38:33.870
Thank you.

00:38:33.870 --> 00:38:35.730
CHRISTINA ILVENTO: Maybe take
one from the other side?

00:38:35.730 --> 00:38:36.570
AUDIENCE: Hi.

00:38:36.570 --> 00:38:38.860
So I was wondering, you guys
have support for the

00:38:38.860 --> 00:38:41.350
annotations on Java
and Python.

00:38:41.350 --> 00:38:45.570
But what is your plans for
supporting Go in this?

00:38:45.570 --> 00:38:47.360
CHRISTINA ILVENTO: So right
now we're only making this

00:38:47.360 --> 00:38:50.760
available to trusted testers
in Python and Java.

00:38:50.760 --> 00:38:55.720
So we don't have any specific
Go support yet.

00:38:55.720 --> 00:38:58.310
And I don't think we have any,
in particular, planned.

00:38:58.310 --> 00:38:59.070
But stay tuned.

00:38:59.070 --> 00:39:01.330
We'll definitely update you as
we make support for more

00:39:01.330 --> 00:39:02.550
languages available.

00:39:02.550 --> 00:39:05.490
AUDIENCE: And I just had one
more question about supporting

00:39:05.490 --> 00:39:08.270
multiple languages
in the same app.

00:39:08.270 --> 00:39:11.150
I know for right now there's a
work-around where you can push

00:39:11.150 --> 00:39:16.490
a Java version to one version
name and Go or Python to

00:39:16.490 --> 00:39:16.880
another one.

00:39:16.880 --> 00:39:20.700
But do you have any plans for
supporting multiple languages

00:39:20.700 --> 00:39:22.980
in the same app?

00:39:22.980 --> 00:39:24.940
CHRISTINA ILVENTO: So--

00:39:24.940 --> 00:39:26.520
DAN HOLEVOET: You mean just in
App Engine in general, or?

00:39:26.520 --> 00:39:27.150
AUDIENCE: Yes.

00:39:27.150 --> 00:39:27.760
Yes.

00:39:27.760 --> 00:39:29.920
CHRISTINA ILVENTO: For App
Engine in general, maybe find

00:39:29.920 --> 00:39:32.350
us in the sandbox afterwards
and we can talk in a little

00:39:32.350 --> 00:39:34.440
more detail about your
particular app.

00:39:34.440 --> 00:39:34.730
AUDIENCE: Sure.

00:39:34.730 --> 00:39:35.430
Thank you.

00:39:35.430 --> 00:39:37.070
CHRISTINA ILVENTO: Thanks.

00:39:37.070 --> 00:39:38.730
AUDIENCE: Cool demo.

00:39:38.730 --> 00:39:44.600
My question, I noticed after you
generated the client-side

00:39:44.600 --> 00:39:48.720
library it was in a folder with
a version, like v1, or

00:39:48.720 --> 00:39:49.745
something like that.

00:39:49.745 --> 00:39:52.110
So I was just curious if you
could talk a little bit about

00:39:52.110 --> 00:39:54.320
how the versioning is handled.

00:39:54.320 --> 00:39:59.020
So you were going to add the
user parameter, for example,

00:39:59.020 --> 00:40:03.280
when you created the next
version of the client library,

00:40:03.280 --> 00:40:04.095
how is that managed?

00:40:04.095 --> 00:40:04.490
DAN HOLEVOET: Right.

00:40:04.490 --> 00:40:07.700
So the @API annotation also
allows you to control things

00:40:07.700 --> 00:40:08.940
like the versioning.

00:40:08.940 --> 00:40:12.750
So if I wanted to say this is
v2 that I'm deploying now, I

00:40:12.750 --> 00:40:16.880
could add a version parameter
into the API annotation there

00:40:16.880 --> 00:40:18.100
and give it a different
version.

00:40:18.100 --> 00:40:20.390
And I could have both deployed
simultaneously.

00:40:20.390 --> 00:40:23.310
So if I had a client that was
still calling v1, that would

00:40:23.310 --> 00:40:25.220
still go back to
my old v1 code.

00:40:25.220 --> 00:40:27.270
And if I had a v2 client, I
could have that point to a

00:40:27.270 --> 00:40:27.810
different set of code.

00:40:27.810 --> 00:40:28.070
AUDIENCE: I see.

00:40:28.070 --> 00:40:28.680
Cool.

00:40:28.680 --> 00:40:30.940
And then the second
question is--

00:40:30.940 --> 00:40:32.710
let a few more people
leave the room--

00:40:32.710 --> 00:40:36.097
any plans for a Windows Phone
client generator?

00:40:36.097 --> 00:40:37.470
[LAUGHTER]

00:40:37.470 --> 00:40:37.860
AUDIENCE: I know.

00:40:37.860 --> 00:40:38.360
It sucks.

00:40:38.360 --> 00:40:39.550
But I have to do it.

00:40:39.550 --> 00:40:42.310
I don't choose to do it.

00:40:42.310 --> 00:40:44.390
CHRISTINA ILVENTO: No
concrete plans at

00:40:44.390 --> 00:40:45.560
this particular moment.

00:40:45.560 --> 00:40:45.970
AUDIENCE: OK.

00:40:45.970 --> 00:40:48.510
Thank you.

00:40:48.510 --> 00:40:49.530
CHRISTINA ILVENTO:
But you could--

00:40:49.530 --> 00:40:51.610
if you wanted to just call it
as a rest API, there's no

00:40:51.610 --> 00:40:53.840
reason you couldn't call
it from Windows Phone.

00:40:53.840 --> 00:40:58.200
But no particular plans
to support that yet.

00:40:58.200 --> 00:40:59.073
Other side?

00:40:59.073 --> 00:40:59.840
AUDIENCE: Two questions.

00:40:59.840 --> 00:41:01.310
Mine is sort of part of his.

00:41:01.310 --> 00:41:03.510
So for Windows clients on
tablets and things like that

00:41:03.510 --> 00:41:06.090
that are coming out, it sounds
like there's no plans for C

00:41:06.090 --> 00:41:08.750
Sharp or any .Net client
generation.

00:41:08.750 --> 00:41:09.720
CHRISTINA ILVENTO: So we
don't have support

00:41:09.720 --> 00:41:10.960
for that at the moment.

00:41:10.960 --> 00:41:13.820
But we are thinking about the
additional languages that

00:41:13.820 --> 00:41:14.920
we're going to provide
support for.

00:41:14.920 --> 00:41:17.390
So if you sign up for our
Trusted Tester program--

00:41:17.390 --> 00:41:17.700
AUDIENCE: Already did it.

00:41:17.700 --> 00:41:20.570
CHRISTINA ILVENTO: --and give
that feedback, that will be

00:41:20.570 --> 00:41:23.250
really helpful to us as we
continue to develop it.

00:41:23.250 --> 00:41:25.200
AUDIENCE: The other question I
had is with the Google Compute

00:41:25.200 --> 00:41:27.110
Engine mentioned this morning.

00:41:27.110 --> 00:41:30.200
Do you see scenarios where I
can deploy that plus this

00:41:30.200 --> 00:41:31.320
using Endpoints together?

00:41:31.320 --> 00:41:33.210
Or is those seen as I'd have to
expose a rest endpoint from

00:41:33.210 --> 00:41:34.940
there to be able to
deploy with this.

00:41:34.940 --> 00:41:37.720
So I'd have a worker role doing
something there combined

00:41:37.720 --> 00:41:39.380
with a front end that's
provided by this.

00:41:39.380 --> 00:41:42.250
CHRISTINA ILVENTO: Oh, so you'd
stand up an API on top

00:41:42.250 --> 00:41:44.040
of App Engine using Endpoints
and then have

00:41:44.040 --> 00:41:45.220
your compute engine--

00:41:45.220 --> 00:41:45.520
AUDIENCE: Yeah.

00:41:45.520 --> 00:41:46.710
CHRISTINA ILVENTO: --instances
call into that?

00:41:46.710 --> 00:41:47.090
AUDIENCE: Yeah.

00:41:47.090 --> 00:41:49.220
CHRISTINA ILVENTO: That's
not something that we've

00:41:49.220 --> 00:41:51.030
particularly been targeting.

00:41:51.030 --> 00:41:52.590
And I think that there's
probably going to be

00:41:52.590 --> 00:41:54.440
additional development
around there.

00:41:54.440 --> 00:41:56.580
But that's certainly something
that you could do, because you

00:41:56.580 --> 00:41:58.620
can just stand up a
basic rest API.

00:41:58.620 --> 00:42:00.870
And if you were writing some
Java code, you could just use

00:42:00.870 --> 00:42:01.830
the Java client library.

00:42:01.830 --> 00:42:03.810
So there's nothing that would
prevent you from doing that.

00:42:03.810 --> 00:42:04.160
AUDIENCE: OK.

00:42:04.160 --> 00:42:05.260
Thanks.

00:42:05.260 --> 00:42:07.420
CHRISTINA ILVENTO: Thank you.

00:42:07.420 --> 00:42:10.370
AUDIENCE: So I have a question
about authentication.

00:42:10.370 --> 00:42:12.380
So it's obviously using OAuth.

00:42:12.380 --> 00:42:14.940
And probably on Android side
you can use the account

00:42:14.940 --> 00:42:18.370
manager, and use the user
account, et cetera, et cetera.

00:42:18.370 --> 00:42:21.620
But sometimes you don't want
to authenticate the user.

00:42:21.620 --> 00:42:24.810
You just want to make sure that
only your app can talk to

00:42:24.810 --> 00:42:25.240
this Endpoint.

00:42:25.240 --> 00:42:27.580
You don't care about
the actual user.

00:42:27.580 --> 00:42:30.840
So just making sure that
nobody's calling your API and

00:42:30.840 --> 00:42:32.760
racking up you bill
and whatever.

00:42:32.760 --> 00:42:35.050
So do you have any
support for this?

00:42:35.050 --> 00:42:39.210
For example, App Engine has
the service accounts.

00:42:39.210 --> 00:42:44.170
So anything similar for mobile
clients like an application

00:42:44.170 --> 00:42:46.426
account on the user account?

00:42:46.426 --> 00:42:49.540
DAN HOLEVOET: So the client IDs
and audience field that I

00:42:49.540 --> 00:42:52.390
was talking about as possible
things you could add in to the

00:42:52.390 --> 00:42:53.640
API method annotation.

00:43:00.250 --> 00:43:03.440
If you have your client
represented by one of those

00:43:03.440 --> 00:43:07.090
client IDs, you can then say in
your API method annotation,

00:43:07.090 --> 00:43:12.620
I only want requests from this
client ID to be accepted when

00:43:12.620 --> 00:43:14.090
they're calling the back end.

00:43:14.090 --> 00:43:18.400
So then any other person who's
using a different client ID,

00:43:18.400 --> 00:43:20.571
their request would be denied
when the API is called.

00:43:20.571 --> 00:43:20.970
AUDIENCE: Right.

00:43:20.970 --> 00:43:25.975
So but the client IDs is
actually authenticated?

00:43:25.975 --> 00:43:29.030
It's like not just anyone can
reverse your app and copy the

00:43:29.030 --> 00:43:31.010
idea and do the same thing?

00:43:31.010 --> 00:43:31.440
DAN HOLEVOET: Right.

00:43:31.440 --> 00:43:33.740
So the client IDs are
set up through

00:43:33.740 --> 00:43:35.340
the Google APIs console.

00:43:35.340 --> 00:43:36.510
AUDIENCE: Oh, OK.

00:43:36.510 --> 00:43:39.820
DAN HOLEVOET: And then there's
some improvements to the

00:43:39.820 --> 00:43:44.150
account manager that are going
to make that process work end

00:43:44.150 --> 00:43:46.240
to end on Android devices,
as well.

00:43:46.240 --> 00:43:46.520
AUDIENCE: OK.

00:43:46.520 --> 00:43:50.990
So is there any documentation
about this yet, or?

00:43:50.990 --> 00:43:53.150
CHRISTINA ILVENTO: So definitely
check out Yaniv and

00:43:53.150 --> 00:43:54.350
Sriram's talk later today.

00:43:54.350 --> 00:43:56.200
I think that one was at 5:15.

00:43:56.200 --> 00:43:57.510
AUDIENCE: OK.

00:43:57.510 --> 00:43:58.870
CHRISTINA ILVENTO: And they'll
be talking a bit more about

00:43:58.870 --> 00:43:59.300
the auth there.

00:43:59.300 --> 00:43:59.780
AUDIENCE: All right.

00:43:59.780 --> 00:44:00.620
Thanks.

00:44:00.620 --> 00:44:02.440
CHRISTINA ILVENTO: Thank you.

00:44:02.440 --> 00:44:06.030
AUDIENCE: So if I have
server-side resources with

00:44:06.030 --> 00:44:09.910
child object collections, the
generated libraries have a

00:44:09.910 --> 00:44:14.710
sort of helper facility to do
lazy loading of those larger

00:44:14.710 --> 00:44:16.700
collections that are
attached to the

00:44:16.700 --> 00:44:19.211
resources that I'm accessing?

00:44:19.211 --> 00:44:20.960
DAN HOLEVOET: That's
a good question.

00:44:20.960 --> 00:44:23.280
I haven't checked into
that specifically.

00:44:23.280 --> 00:44:26.140
Maybe if you find us afterward,
we can investigate

00:44:26.140 --> 00:44:28.400
a little more into that
particular use case.

00:44:28.400 --> 00:44:28.630
AUDIENCE: OK.

00:44:28.630 --> 00:44:29.500
All right.

00:44:29.500 --> 00:44:30.121
Appreciate it.

00:44:30.121 --> 00:44:31.474
CHRISTINA ILVENTO: Thank you.

00:44:31.474 --> 00:44:32.380
AUDIENCE: Great.

00:44:32.380 --> 00:44:35.080
I do a ton of development
around the Calendar and

00:44:35.080 --> 00:44:36.520
Documents API.

00:44:36.520 --> 00:44:40.160
And typically when I'm
interacting with that service,

00:44:40.160 --> 00:44:43.840
from Python for example, I have
to implement exponential

00:44:43.840 --> 00:44:44.900
back-off and retries.

00:44:44.900 --> 00:44:48.010
The API just hiccups for
one reason or another.

00:44:48.010 --> 00:44:53.390
If I'm writing my own Endpoint,
should I implement

00:44:53.390 --> 00:44:55.160
similar back-off and retries--

00:44:55.160 --> 00:44:57.700
should I just expect it to fail
just for the heck of it?

00:45:01.190 --> 00:45:02.820
CHRISTINA ILVENTO: That sounds
like a reasonable coding

00:45:02.820 --> 00:45:05.590
practice, just in general.

00:45:05.590 --> 00:45:08.360
Expect that the worst will
happen every once in awhile.

00:45:08.360 --> 00:45:10.730
But in terms of a specific--

00:45:10.730 --> 00:45:12.840
is there retry already
included, or

00:45:12.840 --> 00:45:13.710
anything like that?

00:45:13.710 --> 00:45:17.010
Maybe we should chat in more
detail afterwards.

00:45:17.010 --> 00:45:18.050
AUDIENCE: OK.

00:45:18.050 --> 00:45:21.000
CHRISTINA ILVENTO: So there's
some bit in the client

00:45:21.000 --> 00:45:26.130
libraries there, but I think it
probably warrants a longer

00:45:26.130 --> 00:45:26.940
discussion.

00:45:26.940 --> 00:45:27.215
AUDIENCE: OK.

00:45:27.215 --> 00:45:27.490
Thank you.

00:45:27.490 --> 00:45:29.620
CHRISTINA ILVENTO: Thank you.

00:45:29.620 --> 00:45:32.650
AUDIENCE: Are there any plans
or problems with integrating

00:45:32.650 --> 00:45:37.550
the JavaScript libraries
with GWT, or gwit?

00:45:37.550 --> 00:45:39.720
CHRISTINA ILVENTO: Are there
any problems with it?

00:45:39.720 --> 00:45:41.850
AUDIENCE: Like having a wrapper
around it so that gwit

00:45:41.850 --> 00:45:46.610
services or widgets can easily
call these same services?

00:45:46.610 --> 00:45:47.670
DAN HOLEVOET: I haven't
tried that.

00:45:47.670 --> 00:45:47.820
CHRISTINA ILVENTO: Yeah.

00:45:47.820 --> 00:45:49.340
I haven't looked
into that much.

00:45:49.340 --> 00:45:49.826
AUDIENCE: OK.

00:45:49.826 --> 00:45:51.076
AUDIENCE: [INAUDIBLE]

00:45:54.686 --> 00:45:55.180
AUDIENCE: OK.

00:45:55.180 --> 00:45:56.430
CHRISTINA ILVENTO:
So stay tuned.

00:45:59.730 --> 00:46:00.590
AUDIENCE: Hi.

00:46:00.590 --> 00:46:02.620
I missed the first part
of the talk, so maybe

00:46:02.620 --> 00:46:03.710
you answered this.

00:46:03.710 --> 00:46:08.155
So does it have any support
for caching or

00:46:08.155 --> 00:46:11.910
throttling of clients?

00:46:11.910 --> 00:46:15.290
Like for overuse of one client,
it starts calling too

00:46:15.290 --> 00:46:18.430
much often to the API.

00:46:18.430 --> 00:46:20.470
DAN HOLEVOET: So caching
on the client side, or?

00:46:20.470 --> 00:46:22.420
AUDIENCE: Caching, no, no.

00:46:22.420 --> 00:46:24.320
Those, sorry, were
two questions.

00:46:24.320 --> 00:46:26.770
Does it have caching
support and also

00:46:26.770 --> 00:46:30.040
throttling in case of overuse?

00:46:30.040 --> 00:46:31.390
DAN HOLEVOET: So right now
I don't think we have any

00:46:31.390 --> 00:46:33.310
throttling support.

00:46:33.310 --> 00:46:35.860
But as far as the
caching goes--

00:46:35.860 --> 00:46:39.680
so one of the demos that I
showed, when I was calling the

00:46:39.680 --> 00:46:41.870
APIs Explorer, there's
an e-tag that's

00:46:41.870 --> 00:46:44.400
passed with each request.

00:46:44.400 --> 00:46:50.230
And you can use that on the
client side to basically not

00:46:50.230 --> 00:46:52.100
refresh the content every single
time that changes.

00:46:52.100 --> 00:46:55.880
So if you just say, give me the
e-tag, then you don't have

00:46:55.880 --> 00:46:57.760
to request everything again.

00:46:57.760 --> 00:46:57.950
AUDIENCE: OK.

00:46:57.950 --> 00:47:00.170
And caching on the server
side with memcache or

00:47:00.170 --> 00:47:02.090
something like that?

00:47:02.090 --> 00:47:05.970
DAN HOLEVOET: So then it's just
an App Engine API, or an

00:47:05.970 --> 00:47:06.480
App Engine app.

00:47:06.480 --> 00:47:08.310
So you can do whatever
type of caching you

00:47:08.310 --> 00:47:10.420
want on the back end.

00:47:10.420 --> 00:47:12.010
So App Engine supports
memcache,

00:47:12.010 --> 00:47:13.230
so you can use memcache.

00:47:13.230 --> 00:47:16.490
If you want to create some
sort of more complicated

00:47:16.490 --> 00:47:18.270
caching hierarchy, you
can do that, too.

00:47:18.270 --> 00:47:18.660
AUDIENCE: OK.

00:47:18.660 --> 00:47:20.600
Thank you.

00:47:20.600 --> 00:47:21.850
AUDIENCE: Oh, very
exciting demo.

00:47:21.850 --> 00:47:23.700
Thank you.

00:47:23.700 --> 00:47:27.480
So our company works on a
client-server application that

00:47:27.480 --> 00:47:30.490
handles tons of vehicle
network data.

00:47:30.490 --> 00:47:36.040
And I spend a lot of time
sending out database queries

00:47:36.040 --> 00:47:38.300
and all that, tons of them.

00:47:38.300 --> 00:47:42.620
I was wondering, since I spent
so much time profiling the

00:47:42.620 --> 00:47:47.510
database performance, if we
happen to port our existing

00:47:47.510 --> 00:47:52.960
server into the Google App
Engine, do you guys provide

00:47:52.960 --> 00:47:58.280
some sort of executables that
you can run to monitor the

00:47:58.280 --> 00:48:02.570
performance and all that?

00:48:02.570 --> 00:48:04.590
DAN HOLEVOET: I mean,
there's Appstats.

00:48:04.590 --> 00:48:05.530
AUDIENCE: OK.

00:48:05.530 --> 00:48:07.190
DAN HOLEVOET: Which does,
basically, I think, what

00:48:07.190 --> 00:48:08.130
you're looking for.

00:48:08.130 --> 00:48:08.590
AUDIENCE: OK.

00:48:08.590 --> 00:48:10.080
What was that called again?

00:48:10.080 --> 00:48:10.340
DAN HOLEVOET: Appstats.

00:48:10.340 --> 00:48:11.190
CHRISTINA ILVENTO: Appstats.

00:48:11.190 --> 00:48:11.870
AUDIENCE: Oh, OK.

00:48:11.870 --> 00:48:14.625
Thank you.

00:48:14.625 --> 00:48:17.090
CHRISTINA ILVENTO: So it looks
like we've exhausted the

00:48:17.090 --> 00:48:18.710
questions from the mic.

00:48:18.710 --> 00:48:21.500
Anyone else brave enough?

00:48:21.500 --> 00:48:22.460
All right.

00:48:22.460 --> 00:48:24.930
Well thank you, again,
very much for coming.

00:48:24.930 --> 00:48:27.450
And please feel free to find
us in the sandbox later.

00:48:27.450 --> 00:48:29.490
We will be around.

00:48:29.490 --> 00:48:31.460
And enjoy the rest of
the conference.

00:48:31.460 --> 00:48:32.380
Thanks, guys.

00:48:32.380 --> 00:48:32.980
DAN HOLEVOET: Thank you.

00:48:32.980 --> 00:48:37.050
[APPLAUSE]

