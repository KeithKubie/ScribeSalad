WEBVTT
Kind: captions
Language: en

00:00:02.670 --> 00:00:04.765
So you've built the
next great mobile app,

00:00:04.765 --> 00:00:06.890
but users are complaining
that the experience isn't

00:00:06.890 --> 00:00:07.792
always consistent.

00:00:07.792 --> 00:00:09.250
They're calling it
slow and hitchy.

00:00:09.250 --> 00:00:10.708
And they say that
it doesn't scroll

00:00:10.708 --> 00:00:11.987
as smoothly as they'd like.

00:00:11.987 --> 00:00:13.570
My name is Colt
McAnlis, and it sounds

00:00:13.570 --> 00:00:16.284
like your app has a serious
rendering performance problem.

00:00:16.284 --> 00:00:16.950
But don't worry.

00:00:16.950 --> 00:00:18.640
We can fix this by
taking a look at how

00:00:18.640 --> 00:00:20.700
Android is working
under the hood.

00:00:20.700 --> 00:00:23.584
Rendering performance is the
most common performance issue

00:00:23.584 --> 00:00:25.250
that you run into
while building an app.

00:00:25.250 --> 00:00:26.970
On the one hand,
your designers want

00:00:26.970 --> 00:00:29.100
to produce the most usable,
transcendent experience

00:00:29.100 --> 00:00:29.730
for your users.

00:00:29.730 --> 00:00:32.790
But on the other hand, all those
fancy graphics and transitions

00:00:32.790 --> 00:00:34.665
may not work well
on every device.

00:00:34.665 --> 00:00:37.040
So let's take a look at what
rendering performance is all

00:00:37.040 --> 00:00:37.710
about.

00:00:37.710 --> 00:00:39.126
Firstly, know that
the system will

00:00:39.126 --> 00:00:41.685
attempt to redraw your activity
every 16 milliseconds or so,

00:00:41.685 --> 00:00:43.310
which means that your
application needs

00:00:43.310 --> 00:00:44.990
to run all the
logic that updates

00:00:44.990 --> 00:00:47.440
the screen in that
16-millisecond frame

00:00:47.440 --> 00:00:50.080
in order to hit 60
frames per second.

00:00:50.080 --> 00:00:52.800
If you miss that window-- let's
say you take 24 milliseconds--

00:00:52.800 --> 00:00:54.970
you start to get what
we call a dropped frame.

00:00:54.970 --> 00:00:57.350
The system tried to draw a
new picture on the screen,

00:00:57.350 --> 00:00:58.830
but one wasn't ready yet.

00:00:58.830 --> 00:01:00.100
So it didn't refresh anything.

00:01:00.100 --> 00:01:03.080
The user ends up seeing the
same graphic for 32 milliseconds

00:01:03.080 --> 00:01:04.480
rather than for 16.

00:01:04.480 --> 00:01:07.100
This effect of missed
frames is at the core

00:01:07.100 --> 00:01:10.290
of what a user would call a
laggy or janky experience.

00:01:10.290 --> 00:01:12.300
Any animations that
are going on during a

00:01:12.300 --> 00:01:14.810
dropped frame will see a jump
in their smoothness, which

00:01:14.810 --> 00:01:16.129
users can easily see.

00:01:16.129 --> 00:01:17.920
It gets even worse when
this effect happens

00:01:17.920 --> 00:01:20.503
while the users are interacting
with the system-- for example,

00:01:20.503 --> 00:01:23.000
dragging a ListView or
typing in some data.

00:01:23.000 --> 00:01:25.810
This is what users quickly
start to complain about.

00:01:25.810 --> 00:01:27.520
There's a whole group
of reasons that you

00:01:27.520 --> 00:01:29.440
could miss your
16-millisecond frame window.

00:01:29.440 --> 00:01:31.560
For example, you may be
spending too much time

00:01:31.560 --> 00:01:33.950
redrawing large parts of
your View hierarchy, which

00:01:33.950 --> 00:01:35.300
wastes CPU cycles.

00:01:35.300 --> 00:01:37.290
Or you might be drawing
too many objects

00:01:37.290 --> 00:01:39.900
on top of each other, which
wastes valuable time coloring

00:01:39.900 --> 00:01:42.100
in pixels that aren't
visible to the final user.

00:01:42.100 --> 00:01:45.210
Or you could be doing a ton
of animation over and over

00:01:45.210 --> 00:01:48.210
and over again, which can cause
large amounts of churn on both

00:01:48.210 --> 00:01:50.700
your CPU and GPU components.

00:01:50.700 --> 00:01:52.340
Detecting and fixing
these problems

00:01:52.340 --> 00:01:54.490
is highly dependent on
how your app is built.

00:01:54.490 --> 00:01:57.670
But generally, it comes down
to using the available tools

00:01:57.670 --> 00:02:00.630
to track down and identify
what's going wrong.

00:02:00.630 --> 00:02:02.560
For example, you can
use Hierarchy Viewer

00:02:02.560 --> 00:02:05.182
to understand if your
activity is too complex, which

00:02:05.182 --> 00:02:07.640
can lead to issues with spending
too much time invalidating

00:02:07.640 --> 00:02:09.520
or wasting time redrawing.

00:02:09.520 --> 00:02:12.580
You can also use the On-Device
Tools, like Profile GPU

00:02:12.580 --> 00:02:15.770
Rendering, Show GPU Overdraw,
and GPU View Updates,

00:02:15.770 --> 00:02:17.900
to get a better sense of
where in your application

00:02:17.900 --> 00:02:19.440
you're running into problems.

00:02:19.440 --> 00:02:21.980
And for those tricky rendering
bugs that manifest themselves

00:02:21.980 --> 00:02:24.780
in CPU code, Traceview
is a great tool

00:02:24.780 --> 00:02:28.670
to track down what's causing
a missed 16-millisecond frame.

00:02:28.670 --> 00:02:30.980
Rendering performance is one
of the easiest performance

00:02:30.980 --> 00:02:33.150
problems to fall into, but
don't let that stop you

00:02:33.150 --> 00:02:34.330
from making an amazing app.

00:02:34.330 --> 00:02:36.580
Check out the rest of the
Android Performance Patterns

00:02:36.580 --> 00:02:37.100
resources.

00:02:37.100 --> 00:02:39.770
And don't forget to join
our Google+ community.

00:02:39.770 --> 00:02:43.020
So keep calm, profile your
code, and always remember,

00:02:43.020 --> 00:02:43.720
Perf Matters.

00:02:43.720 --> 00:02:47.070
[MUSIC PLAYING]

