WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.113
[MUSIC PLAYING]

00:00:04.350 --> 00:00:05.850
MICHAEL ANGERMANN:
Hello, everybody,

00:00:05.850 --> 00:00:09.110
and welcome to this session
on the new Fused Location

00:00:09.110 --> 00:00:11.045
Provider.

00:00:11.045 --> 00:00:12.920
Thanks for joining us
here, in Mountain View,

00:00:12.920 --> 00:00:16.170
and also folks on
the Livestream.

00:00:16.170 --> 00:00:19.260
My name is Michael Angermann,
I'm a software engineer here,

00:00:19.260 --> 00:00:21.750
at Google, right
across the street.

00:00:21.750 --> 00:00:25.160
And my job is to improve
location on Android.

00:00:25.160 --> 00:00:26.410
MARTIN FRASSL: Hello everyone.

00:00:26.410 --> 00:00:28.410
My name is Martin, and
I'm, as well, a software

00:00:28.410 --> 00:00:32.488
engineer in the Android location
team here, in Mountain View.

00:00:32.488 --> 00:00:33.910
Thanks.

00:00:33.910 --> 00:00:36.490
MICHAEL ANGERMANN: It's great
to see that so many of you

00:00:36.490 --> 00:00:40.700
have so much interest
in good location.

00:00:40.700 --> 00:00:45.750
And that's no surprise because
location is super important.

00:00:45.750 --> 00:00:48.600
It is used in many amazing
apps, and all these apps

00:00:48.600 --> 00:00:51.100
make our lives so much easier.

00:00:51.100 --> 00:00:55.698
So I would like to ask
for a quick show of hands.

00:00:55.698 --> 00:00:57.490
Many of you have traveled
to Mountain View,

00:00:57.490 --> 00:01:01.030
and who of you has used Maps
this week to find your way?

00:01:01.030 --> 00:01:03.510
I have.

00:01:03.510 --> 00:01:06.400
OK, I see two people who
haven't, but everybody else

00:01:06.400 --> 00:01:06.900
has.

00:01:06.900 --> 00:01:08.580
That's great.

00:01:08.580 --> 00:01:10.920
And who of you has used
a ride sharing app?

00:01:13.460 --> 00:01:14.840
OK, that's a lot.

00:01:14.840 --> 00:01:19.510
Who has actually exercised and
used to fitness up this week?

00:01:19.510 --> 00:01:20.010
OK.

00:01:22.630 --> 00:01:25.780
this is getting fewer.

00:01:25.780 --> 00:01:28.420
But I think we see
location powers

00:01:28.420 --> 00:01:30.798
all of these experiences, right?

00:01:30.798 --> 00:01:32.590
And I know that I am
preaching to the choir

00:01:32.590 --> 00:01:35.590
here, because most of
you probably showed up

00:01:35.590 --> 00:01:39.940
because you carry responsibility
for building location

00:01:39.940 --> 00:01:40.900
into your apps.

00:01:44.204 --> 00:01:49.130
And I would like
to take a moment

00:01:49.130 --> 00:01:52.280
and talk about one really
important service that

00:01:52.280 --> 00:01:54.020
uses location.

00:01:54.020 --> 00:01:55.850
And in contrast
to the other ones,

00:01:55.850 --> 00:01:59.120
I really hope that none of
you had to use it recently.

00:01:59.120 --> 00:02:03.440
But in fact, I think it is the
single most important service

00:02:03.440 --> 00:02:06.090
that uses location.

00:02:06.090 --> 00:02:08.639
And I'm talking about the
Android Emergency Location

00:02:08.639 --> 00:02:11.840
Service, or ELS.

00:02:11.840 --> 00:02:15.440
When you call 911, it's
critical for first responders

00:02:15.440 --> 00:02:18.330
to know where you are.

00:02:18.330 --> 00:02:20.610
But if you've ever done
it, it's really difficult

00:02:20.610 --> 00:02:23.770
to describe your
location, especially when

00:02:23.770 --> 00:02:25.350
you're a stressed.

00:02:25.350 --> 00:02:28.230
So when we order
a ride share, we

00:02:28.230 --> 00:02:29.910
don't have to
describe our location.

00:02:29.910 --> 00:02:31.980
We just send it
off with the app,

00:02:31.980 --> 00:02:35.440
and the car comes
to where we want it.

00:02:35.440 --> 00:02:37.630
And that's obviously,
the solution

00:02:37.630 --> 00:02:40.670
we would want for emergency
services, as well.

00:02:40.670 --> 00:02:42.110
So it's very easy.

00:02:42.110 --> 00:02:45.670
We send a location to
the emergency services

00:02:45.670 --> 00:02:47.710
when we call in an emergency.

00:02:47.710 --> 00:02:49.500
And it's exactly what ELS does.

00:02:49.500 --> 00:02:53.350
It sends the location,
wire, HTTPS, or SMS.

00:02:56.700 --> 00:02:59.010
ELS is already deployed
in 18 countries,

00:02:59.010 --> 00:03:02.340
and it's growing very fast.

00:03:02.340 --> 00:03:03.928
There is a really,
really good talk

00:03:03.928 --> 00:03:05.220
that I would like to recommend.

00:03:05.220 --> 00:03:08.580
It's happening at 230
today at stage one.

00:03:08.580 --> 00:03:09.790
It's by the same team.

00:03:09.790 --> 00:03:11.100
It's different speakers.

00:03:11.100 --> 00:03:13.330
And I highly recommend to
watch it, it's really good.

00:03:17.140 --> 00:03:19.480
So Android provides
a lot of choice

00:03:19.480 --> 00:03:22.690
to developers, especially
when it comes to location.

00:03:22.690 --> 00:03:26.140
You can choose to get location
from network location,

00:03:26.140 --> 00:03:28.360
straight from GPS.

00:03:28.360 --> 00:03:31.330
You can get it via location
manager, or the Fused Location

00:03:31.330 --> 00:03:32.800
Provider.

00:03:32.800 --> 00:03:36.550
And over the next 35
minutes, we will provide you

00:03:36.550 --> 00:03:38.140
with all the background
that you need

00:03:38.140 --> 00:03:40.240
to make a really informed
decision to what's

00:03:40.240 --> 00:03:42.190
best for your app.

00:03:42.190 --> 00:03:45.530
And in particular, we will
answer three questions.

00:03:45.530 --> 00:03:49.380
First, what is good location?

00:03:49.380 --> 00:03:52.550
Second, how do we and
Android make good location?

00:03:52.550 --> 00:03:54.720
And third, and probably
most importantly,

00:03:54.720 --> 00:03:57.200
how can you use that
location in your own apps?

00:04:01.020 --> 00:04:03.200
Let's start with
the first question.

00:04:03.200 --> 00:04:04.790
What is good location?

00:04:04.790 --> 00:04:06.080
Well, that's easy, right?

00:04:06.080 --> 00:04:09.140
It needs to be
accurate, obviously.

00:04:09.140 --> 00:04:13.170
But it turns out it needs to be
a lot more than just accurate.

00:04:13.170 --> 00:04:17.820
And choosing the right
source of location

00:04:17.820 --> 00:04:21.500
is like choosing the
perfect wine that

00:04:21.500 --> 00:04:24.814
goes with a good
menu in a restaurant.

00:04:24.814 --> 00:04:27.730
And winemakers
work really, really

00:04:27.730 --> 00:04:31.960
hard to make their
product better every year.

00:04:31.960 --> 00:04:33.960
And we do the same
thing with location.

00:04:33.960 --> 00:04:36.060
We really strive to
make location better

00:04:36.060 --> 00:04:37.650
with every release.

00:04:37.650 --> 00:04:39.810
And like winemakers,
we get really

00:04:39.810 --> 00:04:42.720
happy if true connoisseurs
who know about it

00:04:42.720 --> 00:04:45.290
appreciate that location.

00:04:45.290 --> 00:04:46.760
And this is why
we want all of you

00:04:46.760 --> 00:04:49.220
to be true connoisseurs
of location.

00:04:49.220 --> 00:04:52.640
And have all the information
that you need to judge it,

00:04:52.640 --> 00:04:54.560
and make the right
decision, so you can

00:04:54.560 --> 00:04:55.940
build what best fits your app.

00:04:59.060 --> 00:05:01.220
And we found these
four properties

00:05:01.220 --> 00:05:02.900
that good locations should have.

00:05:02.900 --> 00:05:08.390
I said it's not only accuracy,
but accurate is in there.

00:05:08.390 --> 00:05:11.430
But the other ones
are equally important.

00:05:11.430 --> 00:05:14.690
Smooth, ubiquitous, and instant.

00:05:14.690 --> 00:05:17.660
And let me explain each one
of them in a bit more detail.

00:05:21.760 --> 00:05:24.350
And let's start with accurate.

00:05:24.350 --> 00:05:27.680
When people talk about
location, and pitch

00:05:27.680 --> 00:05:30.680
a new sensor or new
algorithm, they often

00:05:30.680 --> 00:05:32.060
give just one number.

00:05:32.060 --> 00:05:35.730
They would say, our
accuracy is seven meters.

00:05:35.730 --> 00:05:38.010
Our accuracy is 25 meters.

00:05:38.010 --> 00:05:41.590
Or our accuracy is one meter.

00:05:41.590 --> 00:05:44.620
But what does this
actually tell us?

00:05:44.620 --> 00:05:48.980
Usually, this number is supposed
to reflect the typical error,

00:05:48.980 --> 00:05:53.250
or distance between
reported and true location.

00:05:53.250 --> 00:05:54.900
And we can use
statistical measures,

00:05:54.900 --> 00:05:59.360
such as the mean or the
median of an distribution,

00:05:59.360 --> 00:06:03.040
to compute a value
for that value.

00:06:03.040 --> 00:06:05.070
And again, this number
tells us something

00:06:05.070 --> 00:06:09.820
about the typical error, but
that's not the whole story.

00:06:09.820 --> 00:06:12.250
You definitely want to
know how big the error can

00:06:12.250 --> 00:06:15.380
get under difficult situations.

00:06:15.380 --> 00:06:18.970
And that's captured by what
we call the tail error.

00:06:18.970 --> 00:06:22.180
And depending on the specific
needs of your application,

00:06:22.180 --> 00:06:24.692
that may even be more important
than the typical error.

00:06:24.692 --> 00:06:26.650
And if you run your own
evaluations, of course,

00:06:26.650 --> 00:06:29.440
you can look at an entire
era distribution like what's

00:06:29.440 --> 00:06:31.900
shown in this diagram, here.

00:06:31.900 --> 00:06:34.150
But in most cases,
typical entail error

00:06:34.150 --> 00:06:35.710
can give you a
fairly good picture.

00:06:35.710 --> 00:06:38.950
And just to quickly talk to what
we see in this illustration,

00:06:38.950 --> 00:06:40.630
there are two
algorithms, a and b.

00:06:40.630 --> 00:06:43.390
And a does really better
on this typical error,

00:06:43.390 --> 00:06:45.217
but beat us better
on the tail error.

00:06:45.217 --> 00:06:47.050
And again, it may depend
on the application,

00:06:47.050 --> 00:06:47.883
what's best for you.

00:06:50.660 --> 00:06:53.030
Smooth.

00:06:53.030 --> 00:06:55.470
Good location is smooth.

00:06:55.470 --> 00:06:58.560
Users don't jump, so
location shouldn't jump.

00:06:58.560 --> 00:07:01.080
And it's really annoying to
see a blue dot crisscross

00:07:01.080 --> 00:07:02.500
the screen.

00:07:02.500 --> 00:07:05.160
And when it happens,
user complain about it.

00:07:05.160 --> 00:07:07.820
And there are a few things
that can lead to jumps.

00:07:07.820 --> 00:07:11.120
And in the previous slide,
I talked about accuracy.

00:07:11.120 --> 00:07:12.740
And surprisingly,
there is a trade off

00:07:12.740 --> 00:07:15.710
between accuracy and smoothness.

00:07:15.710 --> 00:07:18.770
And chasing the
latest measurement

00:07:18.770 --> 00:07:21.650
can actually improve
accuracy, but it can be

00:07:21.650 --> 00:07:23.540
very detrimental to smoothness.

00:07:23.540 --> 00:07:25.660
It can lead to jumps.

00:07:25.660 --> 00:07:28.720
And that's what you see in
this example on the top.

00:07:28.720 --> 00:07:31.925
The green line there, shows
the ground truth location.

00:07:31.925 --> 00:07:33.300
And the red line
shows the output

00:07:33.300 --> 00:07:35.940
of an algorithm that
aggressively chases the latest

00:07:35.940 --> 00:07:37.830
measurement.

00:07:37.830 --> 00:07:39.653
And we see how much it jumps.

00:07:39.653 --> 00:07:41.070
This is not a
pleasant experience.

00:07:41.070 --> 00:07:43.020
This is not what we want.

00:07:43.020 --> 00:07:46.830
On the bottom, we see the
output of an algorithm that

00:07:46.830 --> 00:07:49.260
puts more emphasis
on smoothness,

00:07:49.260 --> 00:07:51.570
and it's a much
better experience.

00:07:51.570 --> 00:07:53.810
It's just to show the
differences between these two.

00:07:57.660 --> 00:07:59.310
Also, quickly, talk
about transitions,

00:07:59.310 --> 00:08:01.860
because they are also a
major source of jumps.

00:08:01.860 --> 00:08:03.630
And they come in various forms.

00:08:03.630 --> 00:08:06.120
Users transition from
outdoors to indoors.

00:08:06.120 --> 00:08:08.640
And we'll talk about
this a little bit

00:08:08.640 --> 00:08:12.720
later, and maybe see what this
does to our input signals.

00:08:12.720 --> 00:08:15.210
And users transition
from driving to walking.

00:08:15.210 --> 00:08:17.800
Or they take their phone
from their pocket in hand.

00:08:17.800 --> 00:08:20.075
These are all transitions
that we have to handle

00:08:20.075 --> 00:08:21.450
and that we have
to perform well.

00:08:25.980 --> 00:08:28.420
Next is ubiquitous.

00:08:28.420 --> 00:08:32.210
And ubiquitous means definitely
coverage across space,

00:08:32.210 --> 00:08:34.735
such as different countries,
regions or cities.

00:08:38.140 --> 00:08:39.049
But it means more.

00:08:39.049 --> 00:08:40.460
It's not only across space.

00:08:40.460 --> 00:08:42.380
It's also across
different environments,

00:08:42.380 --> 00:08:44.720
such as indoors or outdoors.

00:08:44.720 --> 00:08:45.650
Type of movement.

00:08:45.650 --> 00:08:48.830
Whether you're
moving using wheels,

00:08:48.830 --> 00:08:51.110
or whether you moving
using your feet.

00:08:51.110 --> 00:08:54.680
And the type of carry, such as
in hand, in pocket, in a purse,

00:08:54.680 --> 00:08:57.790
or in a cup holder in a car.

00:08:57.790 --> 00:09:01.940
And just think about an
example of ride sharing.

00:09:01.940 --> 00:09:04.960
So we want to bring the
passenger and the driver

00:09:04.960 --> 00:09:06.040
together, right?

00:09:06.040 --> 00:09:08.200
And think how different
destinations are.

00:09:08.200 --> 00:09:11.110
The driver is in there
car on wheels, outdoors,

00:09:11.110 --> 00:09:12.700
with the phone on the dash.

00:09:12.700 --> 00:09:15.340
And the passenger
is indoors, on foot,

00:09:15.340 --> 00:09:18.420
and probably has the
phone in their pocket.

00:09:18.420 --> 00:09:22.460
And location has to
work for both of them.

00:09:22.460 --> 00:09:24.685
And I almost forgot,
we don't endorse

00:09:24.685 --> 00:09:26.560
using a phone while
skateboarding, and please

00:09:26.560 --> 00:09:27.143
wear a helmet.

00:09:30.850 --> 00:09:33.250
The last property
of good location,

00:09:33.250 --> 00:09:35.798
it needs to be instant.

00:09:35.798 --> 00:09:37.090
And what do we mean by instant?

00:09:37.090 --> 00:09:40.290
First, we mean no wait.

00:09:40.290 --> 00:09:44.430
If you can see this orange
arrow that points on this map,

00:09:44.430 --> 00:09:46.050
it points to a gray dot.

00:09:46.050 --> 00:09:47.640
That's not a happy sight.

00:09:47.640 --> 00:09:50.730
That means we haven't been
able to produce or compute

00:09:50.730 --> 00:09:53.360
a good location, therefore,
we are showing a gray dot.

00:09:53.360 --> 00:09:55.085
And a user needs
to wait for this,

00:09:55.085 --> 00:09:56.460
or an app needs
to wait for this.

00:09:56.460 --> 00:09:58.660
This is really not what we want.

00:09:58.660 --> 00:10:01.890
So instant means we are able
to rapidly compute a location

00:10:01.890 --> 00:10:04.128
and don't have to
show that gray dot.

00:10:04.128 --> 00:10:06.720
Second, no lag.

00:10:06.720 --> 00:10:08.560
And it's also super important.

00:10:08.560 --> 00:10:11.760
Imagine if we had a
really good lake locator,

00:10:11.760 --> 00:10:14.280
and it could produce the
most accurate location

00:10:14.280 --> 00:10:16.570
while driving on a highway.

00:10:16.570 --> 00:10:20.350
No error at all, but it would
always be five seconds late.

00:10:20.350 --> 00:10:22.420
A lot of users would
miss their exits,

00:10:22.420 --> 00:10:24.190
and they would be
really unhappy with us.

00:10:24.190 --> 00:10:26.890
So good location also
needs to be on time.

00:10:31.540 --> 00:10:35.140
OK, I think we now have
a really solid foundation

00:10:35.140 --> 00:10:37.210
to evaluate good location.

00:10:37.210 --> 00:10:40.480
And I do hope that thinking
along these four properties--

00:10:40.480 --> 00:10:43.510
accurate, smooth,
ubiquitous, and instant--

00:10:43.510 --> 00:10:47.060
comes in handy when you design
location into your apps.

00:10:47.060 --> 00:10:50.240
And we now get to dive a
little bit deeper, and talk

00:10:50.240 --> 00:10:54.050
about how we make good location
in the Fused Location Provider.

00:11:00.030 --> 00:11:03.870
Android provides a long list
of really great sensors.

00:11:03.870 --> 00:11:06.730
There are the radio based
ones that we see on the top,

00:11:06.730 --> 00:11:09.280
such as GPS, Wi-Fi, or cell.

00:11:09.280 --> 00:11:13.590
There are the national
sensors, such as Accel or Gyro

00:11:13.590 --> 00:11:15.750
as well as Magnetometer
and a few others.

00:11:15.750 --> 00:11:18.555
And each of these have
very unique properties.

00:11:18.555 --> 00:11:21.180
Now, the question is, which one
should we use to make location?

00:11:24.210 --> 00:11:26.130
Let's start with
the one on the top.

00:11:26.130 --> 00:11:28.170
And in this list,
GPS is actually

00:11:28.170 --> 00:11:30.210
the only one that
has been specifically

00:11:30.210 --> 00:11:33.300
designed to provide location.

00:11:33.300 --> 00:11:36.510
And GPS performs really great
outdoors, and in open sky

00:11:36.510 --> 00:11:38.080
conditions.

00:11:38.080 --> 00:11:42.680
But whenever a GPS signals are
blocked, such as in a building,

00:11:42.680 --> 00:11:44.390
GPS performance suffers a lot.

00:11:47.450 --> 00:11:51.110
So to show this, we
created this illustration.

00:11:51.110 --> 00:11:52.090
What do we see here?

00:11:52.090 --> 00:11:56.720
The blue line shows GPS
location accuracy over time.

00:11:56.720 --> 00:11:59.350
And this would be a user
who starts outdoors,

00:11:59.350 --> 00:12:02.710
and their accuracy from
GPS is really good.

00:12:02.710 --> 00:12:05.600
That's that blue shaded
area on the left.

00:12:05.600 --> 00:12:07.990
And then that user
enters a building--

00:12:07.990 --> 00:12:10.420
that's that red shaded area--

00:12:10.420 --> 00:12:12.160
and the location
accuracy from GPS

00:12:12.160 --> 00:12:14.090
really drops, because
the signals are blocked.

00:12:14.090 --> 00:12:15.340
There's not much GPS can do.

00:12:15.340 --> 00:12:17.080
It drops really to the floor.

00:12:17.080 --> 00:12:19.930
Some point, user exits that
building and the accuracy

00:12:19.930 --> 00:12:22.600
gets back, and is
really nice again.

00:12:22.600 --> 00:12:25.202
So we are really fine
outdoors, but we do

00:12:25.202 --> 00:12:26.410
have a problem indoors, here.

00:12:29.020 --> 00:12:33.930
Luckily, we can also
compute location from Wi-Fi.

00:12:33.930 --> 00:12:38.770
And Wi-Fi shows really, the
exact opposite behavior of GPS.

00:12:38.770 --> 00:12:41.400
Its quality is
really poor outdoors,

00:12:41.400 --> 00:12:43.590
but it's surprisingly
good indoors.

00:12:43.590 --> 00:12:46.150
And that's because this is where
a lot of Wi-Fi access points

00:12:46.150 --> 00:12:46.650
are.

00:12:46.650 --> 00:12:49.317
And this helps us to create that
really accurate Wi-Fi location.

00:12:53.030 --> 00:12:57.720
So if we combine these two,
we get this orange curve.

00:12:57.720 --> 00:12:59.482
And that's already much better.

00:12:59.482 --> 00:13:00.190
It's really good.

00:13:00.190 --> 00:13:01.732
Like, we have turned
a situation that

00:13:01.732 --> 00:13:04.750
was really poor into
something that's much better.

00:13:04.750 --> 00:13:07.540
But I'm sure you notice,
there's still this gap.

00:13:07.540 --> 00:13:09.700
And unfortunately, this
gap is right at the moment

00:13:09.700 --> 00:13:12.140
when this person
exits the building.

00:13:12.140 --> 00:13:15.220
And this is when we would really
like to provide good guidance,

00:13:15.220 --> 00:13:19.050
so we need a good
location for that.

00:13:19.050 --> 00:13:22.050
And it turns out that we can
use inertial sensors named

00:13:22.050 --> 00:13:24.500
the AccelGyro, plus
the Magnetometer,

00:13:24.500 --> 00:13:25.980
to bridge that gap.

00:13:25.980 --> 00:13:28.000
This is the screen
gap filler, here.

00:13:28.000 --> 00:13:29.750
And I'm going to explain
that in a moment.

00:13:33.320 --> 00:13:36.100
So let's look at
what this buys us.

00:13:36.100 --> 00:13:38.380
We have turned of really
rough location experience

00:13:38.380 --> 00:13:42.790
into actually good location
by combining multiple servers.

00:13:42.790 --> 00:13:45.520
So the question that we ask
is really the wrong one.

00:13:45.520 --> 00:13:49.460
It's not about which one to use,
but how to best combine them.

00:13:49.460 --> 00:13:53.510
And the technical term for
this combination is fusion.

00:13:53.510 --> 00:13:56.570
And this is obviously why
the Fused Location provider

00:13:56.570 --> 00:13:58.370
is called the Fused
Location provider.

00:14:01.050 --> 00:14:05.210
And we have two main
motivations to perform fusion.

00:14:05.210 --> 00:14:07.830
First-- and that's
the most obvious one--

00:14:07.830 --> 00:14:09.730
is to improve the quality.

00:14:09.730 --> 00:14:12.000
So make it more accurate,
smooth, ubiquitous,

00:14:12.000 --> 00:14:13.440
and instant.

00:14:13.440 --> 00:14:15.520
But it's not the
only reason for it.

00:14:15.520 --> 00:14:18.150
We have another
opportunity from Fusion,

00:14:18.150 --> 00:14:20.890
and that's we can
improve the battery life.

00:14:20.890 --> 00:14:22.000
How do we do this?

00:14:22.000 --> 00:14:25.260
Well, fusion allows us to turn
off the sensors that are not

00:14:25.260 --> 00:14:27.251
very effective in a situation.

00:14:30.140 --> 00:14:32.700
Whoops, I'm sorry.

00:14:32.700 --> 00:14:35.250
So in this particular
case, we would turn off

00:14:35.250 --> 00:14:37.380
Wi-Fi while outdoors.

00:14:37.380 --> 00:14:39.530
And we would turn
off GPS while being

00:14:39.530 --> 00:14:44.312
indoors without any detrimental
effect to location quality.

00:14:44.312 --> 00:14:45.770
And this saves us
a lot of battery.

00:14:50.390 --> 00:14:53.960
Let's now look at how this
fusion happens in more detail.

00:14:59.150 --> 00:15:00.767
Look at our census again.

00:15:00.767 --> 00:15:03.350
And if you look at them closely,
we can petition them actually

00:15:03.350 --> 00:15:04.580
into two domains.

00:15:04.580 --> 00:15:07.250
One is a fast domain,
one is a slow domain.

00:15:07.250 --> 00:15:10.760
So GPS, Wi-Fi, and cell provide
information only about once

00:15:10.760 --> 00:15:13.050
every second, or even slower.

00:15:13.050 --> 00:15:15.620
And that's what we
call the slow domain.

00:15:15.620 --> 00:15:18.320
In contrast, to national
sensors and the Magnetometer

00:15:18.320 --> 00:15:23.160
comes in much faster,
say, 100 times per second.

00:15:23.160 --> 00:15:26.560
And that's why we call
this the fast domain.

00:15:26.560 --> 00:15:30.220
So this partitioning allows
us to apply Bayesian fusion

00:15:30.220 --> 00:15:33.460
algorithms that best
fit each domain.

00:15:33.460 --> 00:15:35.890
And, of course, we can
perform a lot more operations

00:15:35.890 --> 00:15:38.320
per measurement in
the slow domain,

00:15:38.320 --> 00:15:40.630
and need to be really efficient
with every measurement

00:15:40.630 --> 00:15:42.420
in the fast domain.

00:15:42.420 --> 00:15:45.590
Together they form what we call
the Hybrid Bayesian fusion,

00:15:45.590 --> 00:15:48.090
and that's the workhorse of the
new Fused Location Provider.

00:15:51.440 --> 00:15:54.090
Talk a little bit about Bayesian
fusion algorithms in general.

00:15:54.090 --> 00:15:58.500
So, typically, they perform
two steps or phases.

00:15:58.500 --> 00:16:00.200
One is predict, one is update.

00:16:00.200 --> 00:16:02.870
And ours is no different
in this regard.

00:16:02.870 --> 00:16:04.520
Let's look at this illustration.

00:16:04.520 --> 00:16:06.590
Everything starts
at initialization.

00:16:06.590 --> 00:16:08.600
Say, from a really
good GPS measurement

00:16:08.600 --> 00:16:12.500
as we head outdoors in
this example earlier.

00:16:12.500 --> 00:16:15.260
And then we apply a model
and these fast measurements

00:16:15.260 --> 00:16:17.120
to predict the user's movement.

00:16:17.120 --> 00:16:22.130
In general, this will lead
to a growth of uncertainty.

00:16:22.130 --> 00:16:27.190
And we see this here,
this blue dot just grows.

00:16:27.190 --> 00:16:28.540
And after a few steps--

00:16:28.540 --> 00:16:30.970
and that's to be
taken literally--

00:16:30.970 --> 00:16:33.160
a new measurement
from Wi-Fi comes in,

00:16:33.160 --> 00:16:36.450
and we use it to perform
this update step.

00:16:36.450 --> 00:16:39.270
And we compare and correct
the hypothetical positions

00:16:39.270 --> 00:16:41.580
from our prediction with
this new measurement.

00:16:41.580 --> 00:16:47.560
And we get a more certain
location estimate.

00:16:47.560 --> 00:16:49.380
And in general, this
is what happens.

00:16:49.380 --> 00:16:51.550
An update step will
reduce the uncertainty.

00:16:51.550 --> 00:16:56.270
And this is why this blue dot
shrinks in this illustration.

00:16:56.270 --> 00:16:58.450
And then, after
this update, we're

00:16:58.450 --> 00:16:59.710
back to the previous step.

00:16:59.710 --> 00:17:03.130
And it's predicting, again,
from these fast sensors

00:17:03.130 --> 00:17:04.900
and the uncertainty
grows again until we

00:17:04.900 --> 00:17:06.609
get the next measurement.

00:17:06.609 --> 00:17:09.113
And what's really
important about this is--

00:17:09.113 --> 00:17:10.030
you will already see--

00:17:10.030 --> 00:17:13.690
you really want this
uncertainty to grow very slowly.

00:17:13.690 --> 00:17:15.480
That's critical.

00:17:15.480 --> 00:17:18.300
And so being good
in this prediction

00:17:18.300 --> 00:17:23.339
is a key to creating that
good location experience.

00:17:23.339 --> 00:17:26.089
And we will dive
deeper into this now.

00:17:26.089 --> 00:17:28.910
Because the key
to good prediction

00:17:28.910 --> 00:17:31.460
is understanding locomotion,
and applying the right

00:17:31.460 --> 00:17:33.480
models to each type.

00:17:33.480 --> 00:17:34.460
So what is locomotion?

00:17:34.460 --> 00:17:37.100
Locomotion is,
like, how we move.

00:17:37.100 --> 00:17:39.620
And we touched upon it
a little bit earlier.

00:17:39.620 --> 00:17:43.420
That could be on feet, when
we're walking or running.

00:17:43.420 --> 00:17:47.420
Or it could be on wheels, like
in a car, a motorcycle, a bike,

00:17:47.420 --> 00:17:52.000
a wheelchair, or the
skateboard that we saw.

00:17:52.000 --> 00:17:53.260
A lot of people use location.

00:17:53.260 --> 00:17:57.150
We always have to
deal with edge cases.

00:17:57.150 --> 00:18:00.060
But for now, let's look
at a more typical, really

00:18:00.060 --> 00:18:04.020
well-behaved pedestrian, me.

00:18:04.020 --> 00:18:08.700
Because this is a very
common case for our users.

00:18:08.700 --> 00:18:12.170
And so what we see
there, on the right--

00:18:12.170 --> 00:18:15.290
and I explained this--

00:18:15.290 --> 00:18:20.450
that's a top down, a bird's
eye view, of a walking user.

00:18:20.450 --> 00:18:21.273
So copy me.

00:18:21.273 --> 00:18:22.940
I'm going to the back
of the stage here.

00:18:22.940 --> 00:18:27.890
And I got this blue shirt
for this talk, so this fits.

00:18:27.890 --> 00:18:31.370
And so imagine a camera
looking at me from top down.

00:18:31.370 --> 00:18:34.130
And I'm just walking
in this slight arc, OK?

00:18:34.130 --> 00:18:34.820
This is me.

00:18:34.820 --> 00:18:38.010
This is what's
shown on this slide.

00:18:38.010 --> 00:18:43.340
And we will need this later,
so I had to introduce this.

00:18:43.340 --> 00:18:45.380
And remember, we
said we need to be

00:18:45.380 --> 00:18:47.180
able to predict the
motion between updates

00:18:47.180 --> 00:18:49.120
from GPS and Wi-Fi.

00:18:49.120 --> 00:18:51.890
And we can do this by
using a technique that's

00:18:51.890 --> 00:18:54.343
called pedestrian dead
reckoning, or PDR.

00:18:54.343 --> 00:18:55.760
It's a little bit
of a weird name,

00:18:55.760 --> 00:18:58.742
but that's just the name it is.

00:18:58.742 --> 00:19:04.450
And pedestrian dead reckoning
has two main ingredients.

00:19:04.450 --> 00:19:07.150
First, is step detection.

00:19:07.150 --> 00:19:10.390
Second, is direction
of movement.

00:19:10.390 --> 00:19:14.130
So the first thing we need to
do is we need to detect steps.

00:19:14.130 --> 00:19:15.570
And we can use
the accelerometers

00:19:15.570 --> 00:19:18.030
in a phone to detect
basically, the shape

00:19:18.030 --> 00:19:19.690
or bump caused by a step.

00:19:19.690 --> 00:19:20.730
So you saw me walking--

00:19:20.730 --> 00:19:21.910
I could exaggerate this--

00:19:21.910 --> 00:19:23.160
and my phone goes up and down.

00:19:23.160 --> 00:19:27.440
And you can see there's
an ad in the axel.

00:19:27.440 --> 00:19:29.030
And fitness trackers
have been doing

00:19:29.030 --> 00:19:31.550
this for a very long
time, very successfully.

00:19:31.550 --> 00:19:34.640
In our case, it's a little
bit more challenging

00:19:34.640 --> 00:19:37.440
because remember, we
talked about coverage.

00:19:37.440 --> 00:19:39.942
So it's not only when I'm
holding this phone in my hand,

00:19:39.942 --> 00:19:41.900
but it's also when this
is in my pocket, again,

00:19:41.900 --> 00:19:43.880
or it's in my purse,
or in my backpack.

00:19:43.880 --> 00:19:45.020
Has to work, as well.

00:19:45.020 --> 00:19:49.260
Makes this problem a little
bit more challenging.

00:19:49.260 --> 00:19:51.900
But let's focus on how we
get that change of direction,

00:19:51.900 --> 00:19:53.793
because that's even
more challenging.

00:19:56.970 --> 00:20:00.480
There is the obvious solution,
we use a compass, right?

00:20:00.480 --> 00:20:02.670
And let's see how
well this works.

00:20:08.610 --> 00:20:13.860
This is me holding a regular,
good compass in my hand, flat.

00:20:13.860 --> 00:20:15.540
And just look at what
this compass does.

00:20:15.540 --> 00:20:18.930
And I'm walking in a
straight line, here.

00:20:18.930 --> 00:20:20.890
Thing moves 90 degrees.

00:20:20.890 --> 00:20:21.675
180 degrees.

00:20:26.000 --> 00:20:28.010
Goes back.

00:20:28.010 --> 00:20:29.360
Does a 360 degree turn.

00:20:33.420 --> 00:20:35.140
This is not a broken compass.

00:20:35.140 --> 00:20:37.870
This is a really good compass.

00:20:37.870 --> 00:20:41.080
What's broken is the magnetic
field in this environment.

00:20:41.080 --> 00:20:44.770
That's our office building
that just has a lot of steel,

00:20:44.770 --> 00:20:48.390
and steel influences
the magnetic field.

00:20:48.390 --> 00:20:50.260
There's nothing that
a phone could do--

00:20:50.260 --> 00:20:52.150
or there's nothing
wrong with your phone--

00:20:52.150 --> 00:20:56.140
if it's compass shows the wrong
direction, or another direction

00:20:56.140 --> 00:20:56.900
and you expect.

00:20:56.900 --> 00:20:59.780
It just shows the direction
of the magnetic field.

00:20:59.780 --> 00:21:02.330
That's what it's supposed to do.

00:21:02.330 --> 00:21:06.590
So compass, alone, is not
going to fix this problem.

00:21:06.590 --> 00:21:09.460
The compass, or the magnetic
sensor, is part of it.

00:21:09.460 --> 00:21:13.010
But we need to combine
it with inertial sensors.

00:21:13.010 --> 00:21:18.000
And using a national sensors to
compute what's called attitude,

00:21:18.000 --> 00:21:23.160
is the same thing basically,
that's done in a spacecraft.

00:21:23.160 --> 00:21:26.570
So in a spacecraft,
a guidance computer

00:21:26.570 --> 00:21:30.080
needs to know how the
spacecraft is oriented in space.

00:21:30.080 --> 00:21:32.803
So it has nothing to do with
its position, where it is.

00:21:32.803 --> 00:21:33.970
It's only how it's oriented.

00:21:36.760 --> 00:21:39.190
And figure this out over time.

00:21:39.190 --> 00:21:41.260
And it's actually a really,
really hard problem.

00:21:41.260 --> 00:21:43.570
And it's almost
literally rocket science.

00:21:43.570 --> 00:21:46.300
So it's no surprise that the
team that drives this pod

00:21:46.300 --> 00:21:49.390
has not only great software
engineers, but a lot

00:21:49.390 --> 00:21:53.500
or areo astro engineers who
are really specialized in this.

00:21:57.490 --> 00:22:02.380
So let's say they
do a perfect job,

00:22:02.380 --> 00:22:05.920
and attitude is computed
as good as it can get.

00:22:05.920 --> 00:22:07.540
We're still facing a problem.

00:22:07.540 --> 00:22:10.300
We still have to deal
with multiple hypotheses.

00:22:10.300 --> 00:22:13.550
And by now, you're used to
this top down view of me,

00:22:13.550 --> 00:22:16.280
and I want to show
what's happening there.

00:22:16.280 --> 00:22:18.730
So this is me.

00:22:18.730 --> 00:22:20.543
Again, I have my phone
in my back pocket

00:22:20.543 --> 00:22:22.210
and I'm going to
transition to this one,

00:22:22.210 --> 00:22:24.430
because you see it a
little bit better there.

00:22:24.430 --> 00:22:27.670
And I'm first, going to
take that path a, which

00:22:27.670 --> 00:22:30.410
is this slight right turn.

00:22:30.410 --> 00:22:33.410
And what happens there, is
my phone made a 90 degree

00:22:33.410 --> 00:22:34.707
turn to the right.

00:22:34.707 --> 00:22:35.540
I hope that's clear.

00:22:35.540 --> 00:22:37.635
Phone was like this, and
then walked like this.

00:22:37.635 --> 00:22:39.590
It was a 90 degree turn.

00:22:39.590 --> 00:22:42.470
So that's possibly
an explanation

00:22:42.470 --> 00:22:45.615
of what we saw on the sensors,
Michael that this right turn.

00:22:45.615 --> 00:22:47.240
Another explanation
is Michael actually

00:22:47.240 --> 00:22:48.440
didn't do a right turn.

00:22:48.440 --> 00:22:51.840
I just walked straight, put the
phone to my ear, that's also

00:22:51.840 --> 00:22:53.547
90 degree turn.

00:22:53.547 --> 00:22:55.880
And we have to deal with these
two possible explanations

00:22:55.880 --> 00:22:57.130
of what we see in the sensors.

00:23:00.480 --> 00:23:02.330
And we actually have
to deal with a lot

00:23:02.330 --> 00:23:05.750
more hypotheses
than just these two.

00:23:05.750 --> 00:23:09.010
And this is what we do.

00:23:09.010 --> 00:23:10.160
Yes, thank you.

00:23:10.160 --> 00:23:13.900
Let's keep the video
there for a second.

00:23:13.900 --> 00:23:15.940
What we see here, it's
again, a bird's eye view.

00:23:15.940 --> 00:23:17.050
By now, you're used to it.

00:23:17.050 --> 00:23:20.680
It's not just on me, it's
onto a building here,

00:23:20.680 --> 00:23:22.240
in Mountain View.

00:23:22.240 --> 00:23:24.380
It's just an office building.

00:23:24.380 --> 00:23:27.620
And we see Martin actually,
on the parking lot.

00:23:27.620 --> 00:23:29.470
This is where this blue dot is.

00:23:29.470 --> 00:23:32.610
And there was a really
nice GPS fix out there.

00:23:32.610 --> 00:23:36.220
And all these green
colored dots represent

00:23:36.220 --> 00:23:38.830
hypotheses of where
Martin might be,

00:23:38.830 --> 00:23:42.360
given that particular
measurement.

00:23:42.360 --> 00:23:46.560
And what we will see is Martin
walks into this building,

00:23:46.560 --> 00:23:51.168
and I will point out
what the GPS does.

00:23:51.168 --> 00:23:52.960
Namely, it's going to
be stuck at the door.

00:23:52.960 --> 00:23:55.750
You will see this when
we pause the video.

00:23:55.750 --> 00:23:57.790
And let's see how this works.

00:23:57.790 --> 00:23:58.550
Roll it, please.

00:23:58.550 --> 00:24:00.700
Thank you.

00:24:00.700 --> 00:24:02.400
So we switched to
just the building

00:24:02.400 --> 00:24:05.890
outlines to make this
more clearly visible.

00:24:05.890 --> 00:24:09.190
This blue line
shows the trajectory

00:24:09.190 --> 00:24:12.617
that the location we
computed followed.

00:24:12.617 --> 00:24:14.450
And if you can't stop
it again here, please.

00:24:14.450 --> 00:24:15.440
Thank you.

00:24:15.440 --> 00:24:20.360
So this large gray circle
is the GPS measurement.

00:24:20.360 --> 00:24:21.610
If we look really closely--

00:24:21.610 --> 00:24:24.830
and I apologize, it maybe
a little bit hard to see--

00:24:24.830 --> 00:24:28.390
this small, gray dot that's
still stuck at the door.

00:24:28.390 --> 00:24:31.810
So the GPS was not able
to get enough signal

00:24:31.810 --> 00:24:34.660
to get a location
fixed that is correctly

00:24:34.660 --> 00:24:35.770
inside of the building.

00:24:35.770 --> 00:24:37.540
It's just stuck at the entrance.

00:24:37.540 --> 00:24:38.980
And we have to deal with this.

00:24:38.980 --> 00:24:41.800
And we do this, of
course, by using the PDR,

00:24:41.800 --> 00:24:43.210
the pedestrian dead reckoning.

00:24:43.210 --> 00:24:46.850
And we're using the strength
of the Wi-Fi signals in there.

00:24:46.850 --> 00:24:49.288
So, if we continue this, please.

00:24:49.288 --> 00:24:50.330
Resume the video, please.

00:24:54.720 --> 00:24:56.520
We see how nicely
this trajectory

00:24:56.520 --> 00:24:58.743
follows Martin's path.

00:24:58.743 --> 00:25:00.160
This small deviation
in the middle

00:25:00.160 --> 00:25:01.630
is actually in the hallway.

00:25:01.630 --> 00:25:13.540
So this is precisely picked
up by this trajectory, OK?

00:25:13.540 --> 00:25:17.380
Yeah, so we saw how we
computed this blue dot

00:25:17.380 --> 00:25:18.970
from all these hypotheses.

00:25:18.970 --> 00:25:21.190
And how this
surfaces to the user

00:25:21.190 --> 00:25:23.210
is going to be shown
in the next video.

00:25:23.210 --> 00:25:26.580
So let's-- one more time--
we see the same building,

00:25:26.580 --> 00:25:29.810
and we took a video of
the blue dot as it shows

00:25:29.810 --> 00:25:31.955
on Martin's phone.

00:25:35.340 --> 00:25:49.247
And this is sped up by 10x, OK?

00:25:49.247 --> 00:25:51.330
It's really amazing how
everything comes together,

00:25:51.330 --> 00:25:51.840
here.

00:25:51.840 --> 00:25:56.310
PDR, Wi-Fi, GPS tracking all
these multiple hypotheses

00:25:56.310 --> 00:25:58.430
and attitude.

00:25:58.430 --> 00:26:01.550
And the sped up video
is a really great way

00:26:01.550 --> 00:26:03.210
to analyze this.

00:26:03.210 --> 00:26:06.020
So we see how the transitions
happen from outdoors

00:26:06.020 --> 00:26:07.040
to indoors.

00:26:07.040 --> 00:26:08.600
How some jumps occur.

00:26:08.600 --> 00:26:10.010
Of course, indoors,
that's really

00:26:10.010 --> 00:26:14.250
accelerated, or exaggerated,
by this sped up.

00:26:14.250 --> 00:26:16.220
Actually, can we see
it one more time?

00:26:16.220 --> 00:26:18.770
Because I would like to point
out the nice transitions from

00:26:18.770 --> 00:26:20.330
outdoors to indoors.

00:26:20.330 --> 00:26:22.388
Thank you so much.

00:26:22.388 --> 00:26:23.680
So that's from the parking lot.

00:26:23.680 --> 00:26:25.055
And then we entered
the building,

00:26:25.055 --> 00:26:26.770
and that goes really smoothly.

00:26:26.770 --> 00:26:28.740
This was this small
turn that we had.

00:26:33.380 --> 00:26:33.880
Goes well.

00:26:33.880 --> 00:26:36.910
And again, this building has
no dedicated infrastructure.

00:26:36.910 --> 00:26:39.970
No surveys have been
taken there or anything.

00:26:39.970 --> 00:26:43.640
This is just organic location,
as you will get it in there.

00:26:43.640 --> 00:26:44.140
So--

00:26:44.140 --> 00:26:45.370
[APPLAUSE]

00:26:45.370 --> 00:26:46.390
Thank you so much.

00:26:49.750 --> 00:26:51.960
Thank you very much.

00:26:51.960 --> 00:26:55.450
So a lot of engineers
did a lot of work there.

00:26:55.450 --> 00:26:57.810
And the really good thing
is, you don't have to do it.

00:26:57.810 --> 00:27:01.330
Because Martin, now, is going
to tell you how to use it.

00:27:01.330 --> 00:27:01.830
Thank you.

00:27:01.830 --> 00:27:04.800
[APPLAUSE]

00:27:07.280 --> 00:27:09.168
MARTIN FRASSL:
Thank you, Michael.

00:27:09.168 --> 00:27:11.710
Hey, you heard a lot on how the
Fused Location Provider works

00:27:11.710 --> 00:27:14.043
under the hood, and what it
takes to get a good location

00:27:14.043 --> 00:27:15.280
estimate.

00:27:15.280 --> 00:27:17.530
We barely scratched the
surface, but you can already

00:27:17.530 --> 00:27:20.980
get a sense that building
all this takes a lot of work.

00:27:20.980 --> 00:27:23.460
The good news is,
everything that you just saw

00:27:23.460 --> 00:27:27.160
is readily available,
and super easy to use.

00:27:27.160 --> 00:27:28.770
We do all the
underlying work for you,

00:27:28.770 --> 00:27:31.290
and you can easily access it
via the Fused Location Provider

00:27:31.290 --> 00:27:33.520
API.

00:27:33.520 --> 00:27:36.810
But we're not only
working on the algorithms.

00:27:36.810 --> 00:27:38.580
We also perform
extensive testing

00:27:38.580 --> 00:27:40.170
to make sure that
good location is

00:27:40.170 --> 00:27:43.020
available across device
types, and at different places

00:27:43.020 --> 00:27:44.990
around the world.

00:27:44.990 --> 00:27:47.480
You can imagine that the
environment in downtown Tokyo--

00:27:47.480 --> 00:27:49.160
maybe in a subway station--

00:27:49.160 --> 00:27:51.740
is very different from
downtown Mountain View.

00:27:51.740 --> 00:27:54.770
Yeah, here, in
downtown Mountain View.

00:27:54.770 --> 00:27:57.560
On the image to the right, you
can see one of the many driving

00:27:57.560 --> 00:27:59.480
tests that we perform.

00:27:59.480 --> 00:28:00.928
And a big shout
out to this place,

00:28:00.928 --> 00:28:03.470
to our testing teams around the
world who make this possible.

00:28:06.038 --> 00:28:08.080
One of the best parts of
using the Fused Location

00:28:08.080 --> 00:28:10.960
Provider in your application
is that you can continually

00:28:10.960 --> 00:28:13.840
take advantage of the
improvements that Google makes,

00:28:13.840 --> 00:28:17.230
both in hardware adoption
and algorithmic improvements.

00:28:17.230 --> 00:28:19.210
These improvements become
active in your apps

00:28:19.210 --> 00:28:22.120
without any code change, just
via updates of the Google Play

00:28:22.120 --> 00:28:24.090
services.

00:28:24.090 --> 00:28:26.402
It just gets better and
better automatically.

00:28:29.005 --> 00:28:31.630
Next, we will talk about how to
use the Fused Location Provider

00:28:31.630 --> 00:28:34.500
API.

00:28:34.500 --> 00:28:36.027
So today's bike to
work day, and you

00:28:36.027 --> 00:28:37.860
might have noticed lots
of Googler's rolling

00:28:37.860 --> 00:28:39.240
in the morning.

00:28:39.240 --> 00:28:41.010
And to make it even
more fun, let's

00:28:41.010 --> 00:28:43.650
build a simple app that
celebrates us every time

00:28:43.650 --> 00:28:46.140
that we passed half a mile.

00:28:46.140 --> 00:28:47.640
And let's switch
gears a little bit,

00:28:47.640 --> 00:28:49.182
and dive into an
actual code example.

00:28:51.990 --> 00:28:55.230
First, we need to make
location available to our app

00:28:55.230 --> 00:28:59.150
by requesting the necessary
permissions in the manifest.

00:28:59.150 --> 00:29:02.120
In this case, we used
ACCESS_FINE_LOCATION,

00:29:02.120 --> 00:29:03.950
as we require high
accuracy location

00:29:03.950 --> 00:29:07.410
to determine the travel
distance on the trail.

00:29:07.410 --> 00:29:10.230
Keep in mind, you should only
request the location accuracy

00:29:10.230 --> 00:29:12.450
that is required
for your use case.

00:29:12.450 --> 00:29:15.180
A weather app, for
example, should already

00:29:15.180 --> 00:29:17.983
get sufficient information by
using ACCESS_COURSE_LOCATION

00:29:17.983 --> 00:29:18.900
here, in the manifest.

00:29:23.570 --> 00:29:27.092
Next, we get an instance of the
Fused Location Provider Client,

00:29:27.092 --> 00:29:29.300
which is our main point of
interaction with the Fused

00:29:29.300 --> 00:29:32.040
Location Provider.

00:29:32.040 --> 00:29:34.320
We then, create a
location request

00:29:34.320 --> 00:29:37.020
to define the characteristics
of how often we

00:29:37.020 --> 00:29:39.890
want to receive locations, and
what the priorities should be.

00:29:43.930 --> 00:29:47.560
One dimension that we haven't
talked much about yet is power.

00:29:47.560 --> 00:29:49.570
While we try to use as
little power as possible

00:29:49.570 --> 00:29:53.080
when designing our algorithms,
estimating a location procedure

00:29:53.080 --> 00:29:57.010
requires power to run
the sensors and radios,

00:29:57.010 --> 00:30:00.310
and to perform the
necessary calculations.

00:30:00.310 --> 00:30:02.830
This means that is also in
your hands as app developers

00:30:02.830 --> 00:30:05.050
to effect on how much
power is used by your app

00:30:05.050 --> 00:30:08.228
when it is using location.

00:30:08.228 --> 00:30:10.520
So let me highlight these
two lines, which can strongly

00:30:10.520 --> 00:30:13.130
affect how much power is used.

00:30:13.130 --> 00:30:16.410
In the first line, setInterval
defines how often our app wants

00:30:16.410 --> 00:30:19.040
to receive location updates.

00:30:19.040 --> 00:30:20.690
This obviously,
determines how often

00:30:20.690 --> 00:30:22.190
the location is calculated.

00:30:22.190 --> 00:30:26.490
So the higher this number, the
better in terms of power usage.

00:30:26.490 --> 00:30:28.800
In our example, we used
5,000 milliseconds,

00:30:28.800 --> 00:30:32.340
or five seconds, which is
actually a pretty fast rate.

00:30:32.340 --> 00:30:34.560
You might set it to 500
seconds or even longer

00:30:34.560 --> 00:30:37.500
for your use case.

00:30:37.500 --> 00:30:39.180
In the second line,
we set the priority

00:30:39.180 --> 00:30:41.010
of the location request.

00:30:41.010 --> 00:30:43.260
PRIORITY_HIGH_ACCURACY
means that we

00:30:43.260 --> 00:30:45.480
request the best
possible location, using

00:30:45.480 --> 00:30:48.200
all sensors that are available.

00:30:48.200 --> 00:30:50.660
The opposite value would
be PRIORITY_NO_POWER,

00:30:50.660 --> 00:30:52.100
which only receives
locations that

00:30:52.100 --> 00:30:56.340
are already available on the
system for other purposes.

00:30:56.340 --> 00:30:58.592
So again, by setting
these two values,

00:30:58.592 --> 00:31:00.050
you can influence
how much power is

00:31:00.050 --> 00:31:02.148
used for location computation.

00:31:05.938 --> 00:31:07.730
In the next step, we
define what to do when

00:31:07.730 --> 00:31:09.860
a new location is received.

00:31:09.860 --> 00:31:13.550
For this, we create a new
LocationCallback object,

00:31:13.550 --> 00:31:17.320
and override the
onLocationResult method.

00:31:17.320 --> 00:31:19.200
Once we receive a
location callback

00:31:19.200 --> 00:31:21.240
we update our travel
distance with it's

00:31:21.240 --> 00:31:23.640
past another half mile.

00:31:23.640 --> 00:31:27.630
Once we cross this threshold, we
play Hooray to notify the user,

00:31:27.630 --> 00:31:31.043
and push them over
the next half mile.

00:31:31.043 --> 00:31:32.460
The last two methods
are obviously

00:31:32.460 --> 00:31:35.113
not part of the Fused
Location Provider API,

00:31:35.113 --> 00:31:37.280
but have to be implemented
specifically for our app.

00:31:44.060 --> 00:31:46.420
Now, we put everything together.

00:31:46.420 --> 00:31:48.160
When our app is
resuming, we start

00:31:48.160 --> 00:31:52.360
to receive locations via the
startLocationUpdates method.

00:31:52.360 --> 00:31:54.490
In that method, we
request location updates

00:31:54.490 --> 00:31:56.950
using the objects
that we just created.

00:31:56.950 --> 00:31:59.740
The locationRequest, which
defines the characteristics

00:31:59.740 --> 00:32:00.942
of our request.

00:32:00.942 --> 00:32:02.650
And the Callback object
that defines what

00:32:02.650 --> 00:32:03.817
to do with the new location.

00:32:06.490 --> 00:32:09.210
Finally, we want to
stop location requests

00:32:09.210 --> 00:32:11.730
if the app is not used anymore.

00:32:11.730 --> 00:32:14.690
If onPause is called,
you stop location updates

00:32:14.690 --> 00:32:17.961
by removing them from the
Fused Location Client.

00:32:17.961 --> 00:32:19.650
So these were the
basic steps that I

00:32:19.650 --> 00:32:22.210
needed to use Fused
Location Provider API.

00:32:25.400 --> 00:32:27.650
Those of you who are already
using the Fused Location

00:32:27.650 --> 00:32:31.352
Provider probably noticed
that there are no API changes.

00:32:31.352 --> 00:32:33.560
The improvements that we
made are all under the hood,

00:32:33.560 --> 00:32:36.513
and have not affected the API.

00:32:36.513 --> 00:32:38.930
There are some changes though,
to the location permissions

00:32:38.930 --> 00:32:40.670
in Android Q,
especially for apps

00:32:40.670 --> 00:32:43.075
that access location
in the background.

00:32:43.075 --> 00:32:44.450
And you can find
more information

00:32:44.450 --> 00:32:46.940
in the session Updating Your
Apps for Location Permission

00:32:46.940 --> 00:32:50.870
Changes in Android Q. It
already took place yesterday,

00:32:50.870 --> 00:32:52.619
but you will find a
recording on YouTube.

00:32:56.750 --> 00:32:59.360
I mentioned it earlier,
already in this session,

00:32:59.360 --> 00:33:01.190
any updates to the
Fused Location Provider

00:33:01.190 --> 00:33:04.590
will automatically be
available to your apps.

00:33:04.590 --> 00:33:06.890
Here's a list of the major
sources of location quality

00:33:06.890 --> 00:33:10.080
that we plan to add
in the near future.

00:33:10.080 --> 00:33:12.960
First, we will, of
course, continuously

00:33:12.960 --> 00:33:15.000
improve the underlying
algorithms and models

00:33:15.000 --> 00:33:17.100
that are used in
the location engine

00:33:17.100 --> 00:33:18.780
to improve the
quality of location

00:33:18.780 --> 00:33:22.390
and reduce the amount of
power that is consumed.

00:33:22.390 --> 00:33:24.940
Second, we will apply
new improvements that

00:33:24.940 --> 00:33:27.160
are made around satellite
navigation systems,

00:33:27.160 --> 00:33:29.440
and make use of the
availability of monument data

00:33:29.440 --> 00:33:31.630
from the chipset.

00:33:31.630 --> 00:33:33.670
Of course, there's
not only GPS, but also

00:33:33.670 --> 00:33:35.980
other global navigation
satellite systems--

00:33:35.980 --> 00:33:40.722
abbreviated, GNSS-- like
Galileo, Glonass, or Beidou.

00:33:40.722 --> 00:33:42.430
These multiple
constellations are already

00:33:42.430 --> 00:33:43.960
supported by newer phones.

00:33:43.960 --> 00:33:45.760
And with a growing
number of satellites

00:33:45.760 --> 00:33:48.130
that are on view at
a given location,

00:33:48.130 --> 00:33:50.740
the quality of satellite
based location information

00:33:50.740 --> 00:33:51.280
gets better.

00:33:54.120 --> 00:33:58.500
The third major improvement is
Wi-Fi round trip time, or RTT.

00:33:58.500 --> 00:34:00.840
Wi-Fi RTT is a new
technology that is already

00:34:00.840 --> 00:34:02.820
supported by the
Android platform

00:34:02.820 --> 00:34:06.150
since the launch of
API 28 last year.

00:34:06.150 --> 00:34:08.699
As the name says,
RTT uses the time

00:34:08.699 --> 00:34:11.880
that a radio signal travels
between a fixed axis

00:34:11.880 --> 00:34:14.790
point and a mobile device.

00:34:14.790 --> 00:34:17.909
This time is used to determine
the distance between the two,

00:34:17.909 --> 00:34:21.310
and from that location
can be derived.

00:34:21.310 --> 00:34:23.670
This is very similar to how
satellite navigation systems

00:34:23.670 --> 00:34:26.760
work today, and provides much
better accuracy than existing

00:34:26.760 --> 00:34:30.780
Wi-Fi localization systems,
which are based on the received

00:34:30.780 --> 00:34:33.179
signal strength.

00:34:33.179 --> 00:34:36.190
With more and more access points
supporting the RTT protocol--

00:34:36.190 --> 00:34:39.330
for example, when rolling
out the new 802.11ax high

00:34:39.330 --> 00:34:41.949
performance standard-- its
availability will increase over

00:34:41.949 --> 00:34:42.449
time.

00:34:46.210 --> 00:34:48.230
To recap, here, the
main points, again,

00:34:48.230 --> 00:34:50.690
that we talked about
in this session.

00:34:50.690 --> 00:34:53.590
First, we looked into what
makes a good location,

00:34:53.590 --> 00:34:56.830
and introduced the four
dimensions of accurate, smooth,

00:34:56.830 --> 00:34:59.870
ubiquitous, and
instant location.

00:34:59.870 --> 00:35:03.070
Second, we took a peek into
how we-- and the Android team--

00:35:03.070 --> 00:35:05.350
actually compute a
location on device.

00:35:05.350 --> 00:35:06.820
And saw some of
the components that

00:35:06.820 --> 00:35:10.090
run under the hood of the
Fused Location provider.

00:35:10.090 --> 00:35:13.720
Third, we looked into how you
can benefit from our work,

00:35:13.720 --> 00:35:15.940
and use the Fused Location
Provider in your app

00:35:15.940 --> 00:35:17.170
by preserving battery life.

00:35:20.620 --> 00:35:22.340
That's all that we have today.

00:35:22.340 --> 00:35:24.840
You can find more information
in the Developer Documentation

00:35:24.840 --> 00:35:27.160
at developers.google.com,
which is

00:35:27.160 --> 00:35:30.520
helpful tips around the
usage of Location APIs.

00:35:30.520 --> 00:35:31.940
If you have any
questions that do

00:35:31.940 --> 00:35:33.440
you want to ask us
personally, we'll

00:35:33.440 --> 00:35:36.190
be outside of the
tent to your left.

00:35:36.190 --> 00:35:38.080
And as already mentioned,
there is a talk

00:35:38.080 --> 00:35:39.700
on the Android
emergency location

00:35:39.700 --> 00:35:44.260
servers at 2:30 today on stage
one, which we highly recommend.

00:35:44.260 --> 00:35:45.130
Thank you very much.

00:35:45.130 --> 00:35:47.430
And carry on building great
apps with the location.

00:35:47.430 --> 00:35:49.230
[APPLAUSE]

00:35:49.230 --> 00:35:52.280
[MUSIC PLAYING]

