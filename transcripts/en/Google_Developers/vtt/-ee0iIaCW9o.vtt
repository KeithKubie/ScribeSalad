WEBVTT
Kind: captions
Language: en

00:00:09.630 --> 00:00:11.110
DR. PETER MAGNUSSON: All
right, good day.

00:00:11.110 --> 00:00:16.050
So shalom, I'm Peter
Magnusson.

00:00:16.050 --> 00:00:18.920
I was trying to practice the
phrase "how are you guys" in

00:00:18.920 --> 00:00:21.230
Hebrew, but it didn't stick.

00:00:21.230 --> 00:00:21.630
MALE SPEAKER: Come on!

00:00:21.630 --> 00:00:22.450
You trained on it.

00:00:22.450 --> 00:00:23.510
DR. PETER MAGNUSSON:
I was training over

00:00:23.510 --> 00:00:24.470
there, but it didn't--

00:00:24.470 --> 00:00:25.020
MALE SPEAKER: [SPEAKING HEBREW].

00:00:25.020 --> 00:00:26.342
DR. PETER MAGNUSSON:
[REPEATING HEBREW].

00:00:26.342 --> 00:00:31.760
[LAUGHTER AND APPLAUSE]

00:00:31.760 --> 00:00:33.530
DR. PETER MAGNUSSON: So
pleasure to be here.

00:00:33.530 --> 00:00:34.650
So I'm Peter Magnusson.

00:00:34.650 --> 00:00:37.380
I'm an engineering director
at Google.

00:00:37.380 --> 00:00:41.390
Most of my work is I run App
Engine engineering and also

00:00:41.390 --> 00:00:44.710
run much of the business side
of App Engine, and I'm also

00:00:44.710 --> 00:00:47.000
involved in some other areas
of Cloud Platform.

00:00:51.120 --> 00:00:52.310
I'll have my email at
the end as well.

00:00:52.310 --> 00:00:55.300
But if you're App Engine
developers and you hate

00:00:55.300 --> 00:01:00.110
something, then email
that, and I'll tell

00:01:00.110 --> 00:01:03.550
someone else to fix it.

00:01:03.550 --> 00:01:07.160
So what I'm going to do now is
I'm going to go over just--

00:01:07.160 --> 00:01:10.970
for those of you who don't know,
this presentation has

00:01:10.970 --> 00:01:12.360
like two sections that
I'm going to go

00:01:12.360 --> 00:01:13.560
through pretty quick.

00:01:13.560 --> 00:01:15.840
And we're around afterwards for

00:01:15.840 --> 00:01:17.830
conversations and so forth.

00:01:17.830 --> 00:01:19.490
So I'm going to have the first
couple of slides, just for

00:01:19.490 --> 00:01:22.190
those of you who don't know
what App Engine is at all,

00:01:22.190 --> 00:01:24.700
just present a little bit more
in detail about what it is.

00:01:24.700 --> 00:01:26.850
And then I have another section
that sort of assumes

00:01:26.850 --> 00:01:28.920
you are actually an App Engine
developer, and you care about

00:01:28.920 --> 00:01:29.620
some details.

00:01:29.620 --> 00:01:32.780
And I'm going to go through
some of the roadmap stuff.

00:01:32.780 --> 00:01:35.950
And hopefully there's a couple
of new items in there.

00:01:35.950 --> 00:01:39.130
If you've been super paying
attention online and so forth,

00:01:39.130 --> 00:01:42.600
not much of this will be new.

00:01:42.600 --> 00:01:48.440
So the original vision from App
Engine was to be able to

00:01:48.440 --> 00:01:51.210
make it really simple to write
apps and make it really easy

00:01:51.210 --> 00:01:57.710
for them to do manage them for
scalability and for management

00:01:57.710 --> 00:01:59.420
of them and ownership of them.

00:01:59.420 --> 00:02:03.850
So the sort of mantra that we
derived was that it should be

00:02:03.850 --> 00:02:04.860
very easy to build.

00:02:04.860 --> 00:02:06.530
It should be simple to scale.

00:02:06.530 --> 00:02:08.759
It's never, ever trivial
to scale.

00:02:08.759 --> 00:02:11.630
No matter how easy, you
sort of set it up.

00:02:11.630 --> 00:02:15.070
But it really should be
trivial to manage.

00:02:15.070 --> 00:02:18.530
We changed prices about
a year and a half ago.

00:02:18.530 --> 00:02:21.940
And I got a fun email from a
user who got really upset that

00:02:21.940 --> 00:02:25.320
he suddenly had to enable his
credit card because the

00:02:25.320 --> 00:02:27.510
application-- he hadn't had to
do anything on his application

00:02:27.510 --> 00:02:28.850
for six months.

00:02:28.850 --> 00:02:30.450
And then a few minutes
afterwards, he sent me another

00:02:30.450 --> 00:02:32.770
email, and he just realized when
he typed that, that the

00:02:32.770 --> 00:02:35.320
fact that he hadn't had to
do anything to keep the

00:02:35.320 --> 00:02:37.960
application running for six
months maybe meant it was

00:02:37.960 --> 00:02:40.970
worth $3 a month.

00:02:40.970 --> 00:02:43.770
So it's a platform.

00:02:43.770 --> 00:02:45.450
You build and test your app.

00:02:45.450 --> 00:02:51.150
You upload it, and everything
else is managed by Google.

00:02:51.150 --> 00:02:53.860
Nowadays this is referred to
as platform as a service.

00:02:53.860 --> 00:02:57.320
The creation of App Engine was
actually one of the products

00:02:57.320 --> 00:03:01.190
that instigated people to invent
the term "platform as a

00:03:01.190 --> 00:03:05.600
service" because the idea really
is to make it invisible

00:03:05.600 --> 00:03:09.330
to you what the facilities are
that it's running on-- to hide

00:03:09.330 --> 00:03:11.720
that it's VM, to hide that
there's discs, to hide that

00:03:11.720 --> 00:03:12.850
there's network--

00:03:12.850 --> 00:03:16.810
and focus on the developer
experience.

00:03:16.810 --> 00:03:19.430
Ideally you should just be given
a straight as forward as

00:03:19.430 --> 00:03:21.680
possible API definition, and
then be able to write the

00:03:21.680 --> 00:03:24.100
application, and then just
worry about the business

00:03:24.100 --> 00:03:27.530
logic, and then be able to
manage it from web pages.

00:03:27.530 --> 00:03:29.760
And then you should have as
little as possible else to

00:03:29.760 --> 00:03:31.960
worry about.

00:03:31.960 --> 00:03:35.910
If you're interested in finding
out a little bit

00:03:35.910 --> 00:03:39.690
better, we recently launched
something called Cloud

00:03:39.690 --> 00:03:45.380
Playground, which allows you
edit simple App Engine

00:03:45.380 --> 00:03:49.960
applications on your web
browser and run them.

00:03:49.960 --> 00:03:52.420
It's actually an App Engine
application that creates App

00:03:52.420 --> 00:03:55.870
Engine applications and then
manages them and runs them.

00:03:55.870 --> 00:03:58.820
Pretty cool, sort of
self-referential, and we're

00:03:58.820 --> 00:04:01.110
going to be increasingly using
this as sort of live

00:04:01.110 --> 00:04:04.800
documentation so that when
there are sample code and

00:04:04.800 --> 00:04:07.140
things, how to do things, you
can just click on it, and it

00:04:07.140 --> 00:04:09.020
actually creates an application
for you.

00:04:09.020 --> 00:04:11.925
You don't have to install an
SDK or anything like that.

00:04:11.925 --> 00:04:15.720
In the interest of time, I'm not
going to demo this today.

00:04:15.720 --> 00:04:20.279
Of course, just a quick flash
that, increasingly, the Cloud

00:04:20.279 --> 00:04:25.080
Platform is a mixture of
a number of different

00:04:25.080 --> 00:04:25.460
capabilities.

00:04:25.460 --> 00:04:28.920
So as applications become
more complicated, more

00:04:28.920 --> 00:04:33.400
sophisticated, you start
bringing in more assets of

00:04:33.400 --> 00:04:37.400
what Google has across
Cloud Platform.

00:04:37.400 --> 00:04:41.700
Notable is the addition of
Compute Engine, which

00:04:41.700 --> 00:04:45.500
initially is being used a lot
for batch processing and

00:04:45.500 --> 00:04:46.750
things like that.

00:04:46.750 --> 00:04:48.570
And a number of related
services around it--

00:04:48.570 --> 00:04:49.560
messaging, endpoints--

00:04:49.560 --> 00:04:51.990
I'll be talking about
a few of them.

00:04:51.990 --> 00:04:53.980
But the idea to--

00:04:53.980 --> 00:04:58.240
the vision is to allow you to
approach Cloud Platform in one

00:04:58.240 --> 00:04:58.950
of two ways.

00:04:58.950 --> 00:05:01.400
You can either come at it
with a greenfield idea.

00:05:01.400 --> 00:05:03.260
You're writing something from
scratch, and then you get

00:05:03.260 --> 00:05:05.830
started on App Engine,
just off you go.

00:05:05.830 --> 00:05:08.620
And then as it becomes more
complicated or needs some more

00:05:08.620 --> 00:05:11.380
specific capabilities, you can
expand out to use other Cloud

00:05:11.380 --> 00:05:13.480
Platform products.

00:05:13.480 --> 00:05:17.280
Or you are forklifting over from
another more traditional

00:05:17.280 --> 00:05:18.060
LAMP stack.

00:05:18.060 --> 00:05:20.160
And we're moving towards making
it easier for you

00:05:20.160 --> 00:05:23.060
on-board existing stacks
and existing

00:05:23.060 --> 00:05:25.100
setups onto Cloud Platform.

00:05:27.840 --> 00:05:28.560
Let's see here.

00:05:28.560 --> 00:05:37.070
So here's a fun example of
a happy startup customer.

00:05:37.070 --> 00:05:42.370
In the US, there is a lot of
startup activity around shared

00:05:42.370 --> 00:05:48.010
writing, new forms of Taxi from
all different kinds of

00:05:48.010 --> 00:05:48.640
perspectives.

00:05:48.640 --> 00:05:50.720
It's quite interesting,
actually.

00:05:50.720 --> 00:05:55.290
One of them is a company called
Getaround, which aims

00:05:55.290 --> 00:05:57.380
to make it really simple for
you to rent your car to

00:05:57.380 --> 00:05:58.820
somebody else.

00:05:58.820 --> 00:06:06.120
And they won a TechCrunch
Disrupt, which is in the US a

00:06:06.120 --> 00:06:08.470
pretty distinguished
way of getting

00:06:08.470 --> 00:06:09.890
out there as a startup.

00:06:09.890 --> 00:06:14.300
And the traffic curve here
is what happened when the

00:06:14.300 --> 00:06:15.950
announcement came out
that they'd won.

00:06:15.950 --> 00:06:18.170
And it came out on Twitter
because everybody was

00:06:18.170 --> 00:06:19.610
following TechCrunch.

00:06:19.610 --> 00:06:23.460
So they went up, I think,
something like two orders of

00:06:23.460 --> 00:06:27.280
magnitude in traffic in the
immediate interest.

00:06:27.280 --> 00:06:30.710
And all their operations
engineers are visible in this

00:06:30.710 --> 00:06:33.940
picture because they were all
up on stage accepting the

00:06:33.940 --> 00:06:37.510
prize while this thing
is going off.

00:06:37.510 --> 00:06:39.250
And they realized afterwards
that none of

00:06:39.250 --> 00:06:40.260
their pagers went off.

00:06:40.260 --> 00:06:41.700
Nobody was calling
and complaining.

00:06:41.700 --> 00:06:43.340
It just sort of just worked.

00:06:43.340 --> 00:06:46.200
And they came back, and they
looked at this chart, and they

00:06:46.200 --> 00:06:49.190
emailed it over to us, and
they said, thanks, guys.

00:06:49.190 --> 00:06:51.850
It just worked.

00:06:51.850 --> 00:06:55.010
Now I do encourage you to
benchmark that if you haven't

00:06:55.010 --> 00:06:58.170
gotten any broken logic in your
software when it hits

00:06:58.170 --> 00:07:04.350
that spike because we can't
fix your source for you.

00:07:04.350 --> 00:07:06.480
Another sort of bigger--

00:07:06.480 --> 00:07:09.765
Greg already mentioned SongPop
as one example.

00:07:09.765 --> 00:07:12.290
But I wanted to emphasize some
of the numbers here.

00:07:12.290 --> 00:07:17.200
This is a startup that went from
0 to 60 million users in

00:07:17.200 --> 00:07:22.310
less than a year without having
to re-architect or

00:07:22.310 --> 00:07:24.360
rebuild or anything like that.

00:07:24.360 --> 00:07:27.010
And they did this
was a shockingly

00:07:27.010 --> 00:07:30.590
small number of engineers.

00:07:30.590 --> 00:07:33.270
And we're striving increasingly
to make it easier

00:07:33.270 --> 00:07:35.970
to maintain, have visibility
into what's going on, adding

00:07:35.970 --> 00:07:39.480
various ways for analyzing your
code, and see where your

00:07:39.480 --> 00:07:41.750
costs are going.

00:07:41.750 --> 00:07:43.610
So that's sort of what
App Engine is.

00:07:43.610 --> 00:07:46.200
So the next couple of slides
are going to--

00:07:46.200 --> 00:07:49.430
if you don't know much about App
Engine, you can check your

00:07:49.430 --> 00:07:51.460
cell phones or look out the
window or something.

00:07:51.460 --> 00:07:53.350
I'm going to go into more
details for those if you

00:07:53.350 --> 00:07:56.340
really care about App Engine.

00:07:56.340 --> 00:07:58.420
So I'm going to be summarizing
some of the new things that

00:07:58.420 --> 00:08:01.280
we're doing and that we're
adding and some of the themes

00:08:01.280 --> 00:08:01.930
of improvements.

00:08:01.930 --> 00:08:03.410
There's a lot of investment
that we're doing

00:08:03.410 --> 00:08:04.855
improving App Engine.

00:08:04.855 --> 00:08:09.710
So an application today in App
Engine is basically one or

00:08:09.710 --> 00:08:12.740
more versions of one
a more instances.

00:08:12.740 --> 00:08:14.780
And one of the nice things about
App Engine is how easy

00:08:14.780 --> 00:08:18.380
it is to manage versions and
roll back versions and run

00:08:18.380 --> 00:08:20.980
multiple versions without having
to think about how

00:08:20.980 --> 00:08:23.080
that's actually done
on the system.

00:08:23.080 --> 00:08:26.690
And the principal data system,
storage system that's used out

00:08:26.690 --> 00:08:30.860
of the box that's really easy
to use, is the Datastore.

00:08:30.860 --> 00:08:33.230
And then as you start getting
bigger, you want to start

00:08:33.230 --> 00:08:39.419
using the Memcache, and then you
want to start building a

00:08:39.419 --> 00:08:42.429
modularized application where
you're splitting out different

00:08:42.429 --> 00:08:46.820
kinds of logic from front-end
serving traffic to analysis

00:08:46.820 --> 00:08:49.110
and business logic.

00:08:49.110 --> 00:08:50.780
I know you're probably
orchestrating this with

00:08:50.780 --> 00:08:52.880
something called Task Queues.

00:08:52.880 --> 00:08:54.920
You're probably starting to use
some of the other storages

00:08:54.920 --> 00:08:57.550
like BLOB storage.

00:08:57.550 --> 00:09:00.090
And increasingly, if the
application become

00:09:00.090 --> 00:09:03.230
sophisticated, you start
writing multi-language.

00:09:03.230 --> 00:09:05.340
For example, it's quite common
for people to write the

00:09:05.340 --> 00:09:08.170
front-end code in Python because
it's very easy to

00:09:08.170 --> 00:09:12.510
prototype and iterate and the
backend server kind of code

00:09:12.510 --> 00:09:15.540
either in Java or GO because
they tend to be more

00:09:15.540 --> 00:09:19.060
appropriate for code that's not
undergoing so much change.

00:09:19.060 --> 00:09:21.490
In fact, I advocate people
to do all prototype

00:09:21.490 --> 00:09:22.570
development in Python.

00:09:22.570 --> 00:09:24.800
And then when they're going to
do a recode and cleanup to

00:09:24.800 --> 00:09:28.590
rebuild it in Java.

00:09:28.590 --> 00:09:30.820
And then you will also tend to
start breaking it up into

00:09:30.820 --> 00:09:33.590
multiple applications, some
handling the mobile version,

00:09:33.590 --> 00:09:36.280
some handling some
backend stuff.

00:09:36.280 --> 00:09:41.510
So as your applications get more
sophisticated and as our

00:09:41.510 --> 00:09:44.940
customers get more, demanding we
sort of identified a number

00:09:44.940 --> 00:09:47.750
of areas to improve things.

00:09:47.750 --> 00:09:51.750
Most of these we announced at
I/O. Some of them are already

00:09:51.750 --> 00:09:55.990
out, and some of them we're in
the middle of rolling out.

00:09:55.990 --> 00:09:58.360
First of all, the Memcache that
was available for App

00:09:58.360 --> 00:10:00.340
Engine developers was
a shared Memcache.

00:10:00.340 --> 00:10:02.225
It wasn't just shared with other
App Engine developers.

00:10:02.225 --> 00:10:07.760
It was assets that were shared
with other Google resources.

00:10:07.760 --> 00:10:10.940
The benefit of that was
that it was free.

00:10:10.940 --> 00:10:12.990
So we're going to keep that
option, so there is a free

00:10:12.990 --> 00:10:15.930
Memcache for App Engine
developers.

00:10:15.930 --> 00:10:18.700
But we then discovered lots of
customers who said, look, we

00:10:18.700 --> 00:10:20.460
don't really care if
it costs or not.

00:10:20.460 --> 00:10:23.300
We actually just want it to
behave a lot better for us,

00:10:23.300 --> 00:10:25.470
and we need a lot more-- we had
customers telling us they

00:10:25.470 --> 00:10:28.990
wanted 2 terabytes
of Memcache.

00:10:28.990 --> 00:10:33.740
So we've added a--

00:10:33.740 --> 00:10:36.150
it's now in preview--
dedicated Memcache.

00:10:36.150 --> 00:10:37.940
You can make your own
reservations.

00:10:37.940 --> 00:10:40.720
You're in control of it.

00:10:40.720 --> 00:10:44.350
There's no evictions from
other applications.

00:10:44.350 --> 00:10:46.095
You just dial up how much you
need for your application.

00:10:46.095 --> 00:10:48.740
This has been extremely popular

00:10:48.740 --> 00:10:50.640
with the larger customers.

00:10:53.670 --> 00:10:58.820
Task Queues has had a number
of challenges If you have a

00:10:58.820 --> 00:11:00.070
user of them.

00:11:05.160 --> 00:11:06.880
It's been used in ways
that it wasn't really

00:11:06.880 --> 00:11:09.360
intended to be used.

00:11:09.360 --> 00:11:11.740
People started using it as
effectively a message bus.

00:11:11.740 --> 00:11:14.330
People started using it as
with massive rights.

00:11:14.330 --> 00:11:17.480
It was kind of intended as sort
of like a cron job thing.

00:11:17.480 --> 00:11:20.125
Things you can't do in 30 or
60-second response time, you

00:11:20.125 --> 00:11:22.700
would throw it off to there.

00:11:22.700 --> 00:11:26.130
Some developers are using it as
a fan in for the data store

00:11:26.130 --> 00:11:29.510
and other like completely
crazy use cases.

00:11:29.510 --> 00:11:32.270
And it wasn't really built for
50,000 queries per second.

00:11:32.270 --> 00:11:34.700
Again, it's a task
queue system.

00:11:34.700 --> 00:11:38.320
But we sort of realized that
we should adapt to the

00:11:38.320 --> 00:11:40.560
patterns because we're
assuming mostly that

00:11:40.560 --> 00:11:41.750
developers aren't idiots.

00:11:41.750 --> 00:11:44.740
They're actually trying to do
patterns that makes sense.

00:11:44.740 --> 00:11:47.300
In some cases the developers
are idiots, but most of the

00:11:47.300 --> 00:11:49.500
time they're not.

00:11:49.500 --> 00:11:52.120
So we're doing a lot of
re-engineering of Task Queues

00:11:52.120 --> 00:11:54.110
to address a lot of the
responsiveness--

00:11:54.110 --> 00:11:56.570
stability capabilities,
improving

00:11:56.570 --> 00:11:58.210
statistics, and so forth.

00:11:58.210 --> 00:12:00.950
So if you've been having
problems with Task Queues the

00:12:00.950 --> 00:12:04.320
last few quarters, expect this
to be improving a lot over the

00:12:04.320 --> 00:12:06.980
next months as we
roll this out.

00:12:06.980 --> 00:12:09.960
Another big thing which we
recently started rolling out

00:12:09.960 --> 00:12:12.670
this is what we call
App Engine modules.

00:12:12.670 --> 00:12:14.330
And it's basically another--

00:12:14.330 --> 00:12:18.000
we used to have the abstraction
of applications

00:12:18.000 --> 00:12:19.010
and versions.

00:12:19.010 --> 00:12:24.140
And now we've also added the
abstraction of modules, so you

00:12:24.140 --> 00:12:27.560
can build modularized
applications with different

00:12:27.560 --> 00:12:29.200
settings and so forth.

00:12:29.200 --> 00:12:33.930
We've had some customers cut
their cost with App Engine by

00:12:33.930 --> 00:12:38.810
30 or 40% because they can we
architect their application so

00:12:38.810 --> 00:12:41.630
that they're don't have to force
front-end traffic and

00:12:41.630 --> 00:12:47.470
backend requests into the same
logic, and they can set the

00:12:47.470 --> 00:12:49.930
latencies differently.

00:12:49.930 --> 00:12:53.750
So one way of exemplifying
that is if you have a

00:12:53.750 --> 00:12:56.570
front-end service, you want
to have very, very good

00:12:56.570 --> 00:13:00.370
guarantees of low latencies, but
they take very small time

00:13:00.370 --> 00:13:01.500
to service.

00:13:01.500 --> 00:13:03.060
Then you want to have
a certain scheduler

00:13:03.060 --> 00:13:04.420
settings for that.

00:13:04.420 --> 00:13:06.740
But if you have more like
backend queries, backend

00:13:06.740 --> 00:13:11.490
processing, you can probably
accept seconds of latencies

00:13:11.490 --> 00:13:14.960
for response times so then you
don't have to have big compute

00:13:14.960 --> 00:13:18.010
assets up available at the
time, which leads to much

00:13:18.010 --> 00:13:19.260
higher efficiencies.

00:13:21.200 --> 00:13:24.950
We're also improving the
integration with cloud storage

00:13:24.950 --> 00:13:28.670
for migrating, in fact, from old
BLOB store to just Google

00:13:28.670 --> 00:13:33.710
Cloud Storage and adding default
storage bucket support

00:13:33.710 --> 00:13:34.930
and making it much easier to be

00:13:34.930 --> 00:13:36.640
managing and adding buckets.

00:13:36.640 --> 00:13:42.290
So in general, App Engine will
increasingly become--

00:13:42.290 --> 00:13:44.080
for those of you who have
applications that are

00:13:44.080 --> 00:13:46.980
basically storage management
applications of various

00:13:46.980 --> 00:13:49.770
flavors, App Engine will become
a very, very good

00:13:49.770 --> 00:13:52.710
platform for adding the layer
of logic on top of that.

00:13:56.190 --> 00:14:00.290
Yes, and of course, cloud
storage, per se, has more

00:14:00.290 --> 00:14:04.250
features than the BLOB store.

00:14:04.250 --> 00:14:05.500
Skip that.

00:14:08.690 --> 00:14:12.580
Probably the biggest thing that
we're doing in the second

00:14:12.580 --> 00:14:16.600
half of 2013 is we
are rolling out

00:14:16.600 --> 00:14:18.520
something called VM Runtime.

00:14:18.520 --> 00:14:22.720
The Trusted Tester Program for
this is available, so if you

00:14:22.720 --> 00:14:24.946
want to sign up and start
playing with it, you can find

00:14:24.946 --> 00:14:26.110
it on our forums.

00:14:26.110 --> 00:14:29.200
We did sort of a pretty low-key
announcement of this

00:14:29.200 --> 00:14:31.080
thing on the forums.

00:14:31.080 --> 00:14:33.300
But it's a pretty big deal
because we don't need that may

00:14:33.300 --> 00:14:36.380
testers for it, and we didn't
want to get people too excited

00:14:36.380 --> 00:14:37.900
because we need to stabilize
this for a bit.

00:14:37.900 --> 00:14:42.350
But basically, it is Compute
Engine VMs presented in an App

00:14:42.350 --> 00:14:44.530
Engine environment.

00:14:44.530 --> 00:14:46.750
And I do have a great demo for
it, but in the interest of

00:14:46.750 --> 00:14:47.960
time, I won't run it.

00:14:47.960 --> 00:14:51.840
But basically we're creating a
container that runs on a VM

00:14:51.840 --> 00:14:53.320
that is a Compute Engine VM.

00:14:53.320 --> 00:14:57.410
So it's a full-fledged VM that
is fully forward compatible

00:14:57.410 --> 00:15:00.940
from App Engine, so your App
Engine code will run

00:15:00.940 --> 00:15:02.980
unmodified on a VM.

00:15:02.980 --> 00:15:06.310
And as a developer, the only
thing you do is change one

00:15:06.310 --> 00:15:07.410
line of configuration.

00:15:07.410 --> 00:15:09.460
You have to tell App Engine that
this is not running on a

00:15:09.460 --> 00:15:11.850
Python App Engine front end.

00:15:11.850 --> 00:15:13.500
It's running on a full VM.

00:15:13.500 --> 00:15:15.980
And then App Engine will
just do everything

00:15:15.980 --> 00:15:16.890
that needs to be done.

00:15:16.890 --> 00:15:19.730
You don't have to worry about
load balancing for it, or

00:15:19.730 --> 00:15:22.380
[? odd ?] scaling, or failover,
or health checking,

00:15:22.380 --> 00:15:23.260
or any of that.

00:15:23.260 --> 00:15:25.290
It just magically brings up
a VM in the background

00:15:25.290 --> 00:15:27.460
that runs that code.

00:15:27.460 --> 00:15:35.010
So this sort of begins the
process of muddying the waters

00:15:35.010 --> 00:15:37.100
of what is the difference
between infrastructure as a

00:15:37.100 --> 00:15:39.180
service and platform
as a service.

00:15:39.180 --> 00:15:41.870
Because as we start adding
infrastructure capabilities to

00:15:41.870 --> 00:15:45.530
platform as a service, like
Cloud Storage and Compute, and

00:15:45.530 --> 00:15:48.320
as we're adding improved
platform management and

00:15:48.320 --> 00:15:50.370
infrastructure management
capabilities to Compute

00:15:50.370 --> 00:15:53.360
Engine, which is our
infrastructure as a service,

00:15:53.360 --> 00:15:54.700
it becomes a continuum.

00:15:54.700 --> 00:15:58.100
So one of things we're striving
to do is instead of

00:15:58.100 --> 00:16:01.040
having this cliff difference
between, OK, you either are

00:16:01.040 --> 00:16:04.430
fully managed or you are in
charge of all the bits and

00:16:04.430 --> 00:16:09.050
bolts is to create a continuum
where you can let us manage

00:16:09.050 --> 00:16:13.010
things for you unless you have
very particular opinions about

00:16:13.010 --> 00:16:15.180
parts of it, and then
you go in the sort

00:16:15.180 --> 00:16:16.430
of manage it yourself.

00:16:18.590 --> 00:16:22.250
Greg mentioned one of the
analogies that we use here to

00:16:22.250 --> 00:16:24.630
explain what we're trying to do,
which is in the old days,

00:16:24.630 --> 00:16:29.890
you would write a Pascal
program, but it wasn't really

00:16:29.890 --> 00:16:31.100
good at numerical code.

00:16:31.100 --> 00:16:33.300
So then you'd throw in some
assembly language when you

00:16:33.300 --> 00:16:36.670
needed it, but only once you
discovered that you needed it.

00:16:36.670 --> 00:16:40.210
And we think the new world of
cloud computing is going to

00:16:40.210 --> 00:16:43.760
have the analogous of very
powerful high-level

00:16:43.760 --> 00:16:45.750
abstractions for building
applications, but where you

00:16:45.750 --> 00:16:48.410
can sort of opt out of
it in areas that it

00:16:48.410 --> 00:16:51.380
makes a lot of sense.

00:16:51.380 --> 00:16:53.110
To make this complete, let
me give you an example.

00:16:53.110 --> 00:16:56.300
We had one customer who was
pretty unhappy with how much

00:16:56.300 --> 00:17:01.020
it cost them to use Datastore
for a presence server.

00:17:01.020 --> 00:17:03.160
If you're not familiar with
what a presence server is,

00:17:03.160 --> 00:17:06.150
basically a lot of social
applications and so forth need

00:17:06.150 --> 00:17:08.760
a service that you can easily
query and say, which of my

00:17:08.760 --> 00:17:13.180
friends are online right now
in some sense of online?

00:17:13.180 --> 00:17:14.810
And they ended up using
Datastore for this.

00:17:14.810 --> 00:17:18.079
They would push the time stamps
into it and do queries,

00:17:18.079 --> 00:17:20.630
which is a pretty insane use of
Datastore, because that is

00:17:20.630 --> 00:17:25.329
a massively backed-up,
replicated, multidata center,

00:17:25.329 --> 00:17:26.210
yada, yada, yada.

00:17:26.210 --> 00:17:28.840
And I asked them, do you really
need multiple lines on

00:17:28.840 --> 00:17:30.090
this thing?

00:17:31.940 --> 00:17:34.200
Isn't the reality of that if
this server goes down every

00:17:34.200 --> 00:17:36.380
couple days or five minutes,
it doesn't really matter,

00:17:36.380 --> 00:17:38.640
because this is not critical?

00:17:38.640 --> 00:17:41.760
And they said, yeah, yeah,
that's not important at all.

00:17:41.760 --> 00:17:44.850
So I said, well, if you just do
a single stand-up server on

00:17:44.850 --> 00:17:47.200
this and just restart it every
two days and just have it all

00:17:47.200 --> 00:17:50.740
in cache, that's like one or two
orders of magnitudes less

00:17:50.740 --> 00:17:54.410
expensive resource-wise than
running a massive data

00:17:54.410 --> 00:17:56.310
system behind it.

00:17:56.310 --> 00:17:59.180
But the reality is, in the
past, those kind of

00:17:59.180 --> 00:18:02.260
architectural decisions were
really, really cumbersome to

00:18:02.260 --> 00:18:05.770
do in App Engine.

00:18:05.770 --> 00:18:06.610
Historically, you'd see two.

00:18:06.610 --> 00:18:10.110
You would have to hop out to
Compute Engine now and then do

00:18:10.110 --> 00:18:13.900
all the logic to tie everything
together yourself.

00:18:13.900 --> 00:18:16.300
What we're trying to do here is
that if you discover that

00:18:16.300 --> 00:18:19.750
there's a section of your code
that really would be useful to

00:18:19.750 --> 00:18:21.910
break out a service, specialized
service,

00:18:21.910 --> 00:18:25.630
specialized storage thing, and
you want to code that up in

00:18:25.630 --> 00:18:27.250
C++ or whatever.

00:18:27.250 --> 00:18:29.680
We want to make it really,
really simple for you to say,

00:18:29.680 --> 00:18:31.520
oh, I just need four
servers over here.

00:18:31.520 --> 00:18:35.170
And here's the 4,000 lines of
C++, and just give me 128 gig

00:18:35.170 --> 00:18:38.160
of memory, and then we start
the servers every week, and

00:18:38.160 --> 00:18:42.260
I'm fine, without having to do
any configuration other than

00:18:42.260 --> 00:18:44.030
what I just said.

00:18:44.030 --> 00:18:45.990
So that's what we're targeting
here, and we think this is

00:18:45.990 --> 00:18:48.890
going to be a really big deal.

00:18:48.890 --> 00:18:55.940
And then, of course, PHP has
been the biggest request over

00:18:55.940 --> 00:18:57.790
a long period of time.

00:18:57.790 --> 00:19:00.240
It turns out that an
embarrassing percentage of the

00:19:00.240 --> 00:19:03.340
internet is written in PHP.

00:19:03.340 --> 00:19:07.280
So PHP is like the new x86 that
very few people defend on

00:19:07.280 --> 00:19:09.130
aesthetic grounds.

00:19:09.130 --> 00:19:12.360
But it's the reality
it's the assembly

00:19:12.360 --> 00:19:14.260
language of the internet.

00:19:14.260 --> 00:19:15.990
So we've added PHP support.

00:19:15.990 --> 00:19:18.970
And when we add PHP support to
App Engine, it's just like a

00:19:18.970 --> 00:19:20.340
LAMP stack with PHP on it.

00:19:20.340 --> 00:19:25.020
We've actually ported the 5.4
XenServer to run on App Engine

00:19:25.020 --> 00:19:26.460
NaCl server side.

00:19:26.460 --> 00:19:28.840
So you have a dramatically
different experience.

00:19:28.840 --> 00:19:32.550
This is not your typical
PHP server.

00:19:32.550 --> 00:19:35.900
This is scaling much more
quickly, better security.

00:19:35.900 --> 00:19:38.430
It again has the characteristic
that if you're

00:19:38.430 --> 00:19:41.660
not getting traffic for
it, it goes down

00:19:41.660 --> 00:19:43.950
zero cost in serving.

00:19:43.950 --> 00:19:45.805
So this has been greeted
with a lot of interest.

00:19:53.410 --> 00:19:56.090
Yeah, I think I covered a lot of
this, and Greg covered the

00:19:56.090 --> 00:19:58.310
Cloud Datastore.

00:19:58.310 --> 00:20:02.200
And as we're coordinating
between App Engine And Compute

00:20:02.200 --> 00:20:07.180
Engine, we'll be adding cloud
deployment services to make it

00:20:07.180 --> 00:20:10.210
easier for you pushing
out systems that cut

00:20:10.210 --> 00:20:11.460
across these services.

00:20:14.010 --> 00:20:16.380
Let's see, I'm probably
totally out

00:20:16.380 --> 00:20:18.374
of time, so I should--

00:20:18.374 --> 00:20:20.060
how's the--

00:20:20.060 --> 00:20:20.900
I'm OK?

00:20:20.900 --> 00:20:22.760
11:10 was my cutoff, right?

00:20:22.760 --> 00:20:23.150
Oh wow!

00:20:23.150 --> 00:20:24.080
Ha, ha!

00:20:24.080 --> 00:20:27.720
Look at that, look at that.

00:20:27.720 --> 00:20:32.600
So another thing that's pretty
cool if you're a mobile

00:20:32.600 --> 00:20:34.190
developer or mobile is
important for your

00:20:34.190 --> 00:20:38.050
application, which
I would assume is

00:20:38.050 --> 00:20:39.040
true for many of you.

00:20:39.040 --> 00:20:41.180
It's more than half of--

00:20:41.180 --> 00:20:43.430
in fact, we're seeing the bulk
of development happening on

00:20:43.430 --> 00:20:44.910
mobile side.

00:20:44.910 --> 00:20:47.420
So we've added something called
Google Cloud Endpoints

00:20:47.420 --> 00:20:51.440
that basically is targeting to
make it as simple as possible

00:20:51.440 --> 00:20:53.860
from an Auth perspective,
connectivity perspective, and

00:20:53.860 --> 00:20:56.350
so forth to coordinate
between server side

00:20:56.350 --> 00:20:58.840
code and client code.

00:20:58.840 --> 00:21:01.300
Now we have a really neat
thing called the Mobile

00:21:01.300 --> 00:21:05.710
Backend Starter, which is on our
websites, which I really

00:21:05.710 --> 00:21:08.230
encourage you to take
for a spin.

00:21:08.230 --> 00:21:13.350
And it basically includes the
client library in the backend

00:21:13.350 --> 00:21:17.920
started stuff to just hook
together your application with

00:21:17.920 --> 00:21:22.230
App Engine, with our storage
systems, and coordinate it

00:21:22.230 --> 00:21:25.610
with the Google Cloud Messaging
from the Android

00:21:25.610 --> 00:21:30.290
universe and make this stuff
have as little pain as

00:21:30.290 --> 00:21:32.020
possible to get this
up and running.

00:21:32.020 --> 00:21:37.540
So the general areas of 2013 for
App Engine is sort of to

00:21:37.540 --> 00:21:40.820
move applications to the
solutions we've been rolling

00:21:40.820 --> 00:21:47.190
out earlier this year to improve
customer experience.

00:21:47.190 --> 00:21:50.660
We have a tier of support now.

00:21:50.660 --> 00:21:54.140
In particular, we have a tier
called Gold Support and up,

00:21:54.140 --> 00:21:58.490
and gold is still $400 per
month, I think, and up.

00:21:58.490 --> 00:22:04.370
And if you do anything that's
important to you on App Engine

00:22:04.370 --> 00:22:07.890
or Cloud, please go gold or
higher for God sakes.

00:22:07.890 --> 00:22:10.490
I keep getting emails, support
hasn't been responsive.

00:22:10.490 --> 00:22:12.210
And I'm like, what's
your support level?

00:22:12.210 --> 00:22:13.890
Oh, you haven't signed up
for a support contract.

00:22:17.670 --> 00:22:22.250
Adding sensibility to it and
improving accessibility-- a

00:22:22.250 --> 00:22:25.520
lot of the things that we're
doing now is really addressing

00:22:25.520 --> 00:22:28.810
a lot of the limitations and
constraints and challenges

00:22:28.810 --> 00:22:31.260
that our developers encountered
over the last year

00:22:31.260 --> 00:22:34.450
with App Engine and sort of
fundamentally moved the

00:22:34.450 --> 00:22:38.350
goalposts on the developer
experience.

00:22:38.350 --> 00:22:39.750
And that's it.

00:22:39.750 --> 00:22:40.050
Thank you.

00:22:40.050 --> 00:22:51.347
[APPLAUSE]

